// starting begin ResetFog ;
   0: CALL_OW 335
// InitMultiplayer ;
   4: CALL 2587 0 0
// InitMultiplayerSettings ;
   8: CALL 17 0 0
// StartMultiplayer ;
  12: CALL 2971 0 0
// end ; end_of_file
  16: END
// export function InitMultiplayerSettings ; begin
  17: LD_INT 0
  19: PPUSH
// mpGameSettingsKeys := [ 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 0 , 0 , 1 , 0 , 1 , 1 ] ;
  20: LD_ADDR_EXP 4
  24: PUSH
  25: LD_INT 1
  27: PUSH
  28: LD_INT 1
  30: PUSH
  31: LD_INT 1
  33: PUSH
  34: LD_INT 1
  36: PUSH
  37: LD_INT 1
  39: PUSH
  40: LD_INT 1
  42: PUSH
  43: LD_INT 1
  45: PUSH
  46: LD_INT 1
  48: PUSH
  49: LD_INT 1
  51: PUSH
  52: LD_INT 1
  54: PUSH
  55: LD_INT 1
  57: PUSH
  58: LD_INT 1
  60: PUSH
  61: LD_INT 1
  63: PUSH
  64: LD_INT 1
  66: PUSH
  67: LD_INT 1
  69: PUSH
  70: LD_INT 0
  72: PUSH
  73: LD_INT 0
  75: PUSH
  76: LD_INT 1
  78: PUSH
  79: LD_INT 0
  81: PUSH
  82: LD_INT 1
  84: PUSH
  85: LD_INT 1
  87: PUSH
  88: EMPTY
  89: LIST
  90: LIST
  91: LIST
  92: LIST
  93: LIST
  94: LIST
  95: LIST
  96: LIST
  97: LIST
  98: LIST
  99: LIST
 100: LIST
 101: LIST
 102: LIST
 103: LIST
 104: LIST
 105: LIST
 106: LIST
 107: LIST
 108: LIST
 109: LIST
 110: ST_TO_ADDR
// mpGameSettingsValues := [ [ 0 , 1 ] , [ 9 , 12 , 15 , 24 ] , [ 1 , 3 , 5 , 7 ] , [ [ 0 , 0 , 0 ] , [ 100 , 30 , 0 ] , [ 200 , 75 , 10 ] , [ 500 , 150 , 30 ] ] , [ 1 , 2 , 3 , 4 ] , [ 0 , 1 , 2 ] , [ 0 , 1 , 2 ] , [ 250 , 350 , 500 , 1000 , 2000 ] , [ 0 , 2 ] , [ 0 , 5 5$00 , 10 10$00 , 15 15$00 , 20 20$00 , 30 30$00 ] , [ 0 , 1 ] , [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] , [ 0 , 1 ] , [ 0 , 6 6$30 , 3 3$30 ] , [ 0 , 2 , 4 , 6 ] , [ ] , [ ] , [ 0 , 1 , 15 15$0 , 25 25$0 , 30 30$0 , 45 45$0 , 60 60$0 , 90 90$0 , 100 100$0 , 120 120$0 , 180 180$0 ] , [ ] , [ 0 , 1 , 2 , 4 ] , [ 0 , 3 3$0 , 5 5$0 , 8 8$0 , 10 10$0 , 12 12$0 , 15 15$0 , 20 20$0 , 30 30$0 ] ] ;
 111: LD_ADDR_EXP 5
 115: PUSH
 116: LD_INT 0
 118: PUSH
 119: LD_INT 1
 121: PUSH
 122: EMPTY
 123: LIST
 124: LIST
 125: PUSH
 126: LD_INT 9
 128: PUSH
 129: LD_INT 12
 131: PUSH
 132: LD_INT 15
 134: PUSH
 135: LD_INT 24
 137: PUSH
 138: EMPTY
 139: LIST
 140: LIST
 141: LIST
 142: LIST
 143: PUSH
 144: LD_INT 1
 146: PUSH
 147: LD_INT 3
 149: PUSH
 150: LD_INT 5
 152: PUSH
 153: LD_INT 7
 155: PUSH
 156: EMPTY
 157: LIST
 158: LIST
 159: LIST
 160: LIST
 161: PUSH
 162: LD_INT 0
 164: PUSH
 165: LD_INT 0
 167: PUSH
 168: LD_INT 0
 170: PUSH
 171: EMPTY
 172: LIST
 173: LIST
 174: LIST
 175: PUSH
 176: LD_INT 100
 178: PUSH
 179: LD_INT 30
 181: PUSH
 182: LD_INT 0
 184: PUSH
 185: EMPTY
 186: LIST
 187: LIST
 188: LIST
 189: PUSH
 190: LD_INT 200
 192: PUSH
 193: LD_INT 75
 195: PUSH
 196: LD_INT 10
 198: PUSH
 199: EMPTY
 200: LIST
 201: LIST
 202: LIST
 203: PUSH
 204: LD_INT 500
 206: PUSH
 207: LD_INT 150
 209: PUSH
 210: LD_INT 30
 212: PUSH
 213: EMPTY
 214: LIST
 215: LIST
 216: LIST
 217: PUSH
 218: EMPTY
 219: LIST
 220: LIST
 221: LIST
 222: LIST
 223: PUSH
 224: LD_INT 1
 226: PUSH
 227: LD_INT 2
 229: PUSH
 230: LD_INT 3
 232: PUSH
 233: LD_INT 4
 235: PUSH
 236: EMPTY
 237: LIST
 238: LIST
 239: LIST
 240: LIST
 241: PUSH
 242: LD_INT 0
 244: PUSH
 245: LD_INT 1
 247: PUSH
 248: LD_INT 2
 250: PUSH
 251: EMPTY
 252: LIST
 253: LIST
 254: LIST
 255: PUSH
 256: LD_INT 0
 258: PUSH
 259: LD_INT 1
 261: PUSH
 262: LD_INT 2
 264: PUSH
 265: EMPTY
 266: LIST
 267: LIST
 268: LIST
 269: PUSH
 270: LD_INT 250
 272: PUSH
 273: LD_INT 350
 275: PUSH
 276: LD_INT 500
 278: PUSH
 279: LD_INT 1000
 281: PUSH
 282: LD_INT 2000
 284: PUSH
 285: EMPTY
 286: LIST
 287: LIST
 288: LIST
 289: LIST
 290: LIST
 291: PUSH
 292: LD_INT 0
 294: PUSH
 295: LD_INT 2
 297: PUSH
 298: EMPTY
 299: LIST
 300: LIST
 301: PUSH
 302: LD_INT 0
 304: PUSH
 305: LD_INT 10500
 307: PUSH
 308: LD_INT 21000
 310: PUSH
 311: LD_INT 31500
 313: PUSH
 314: LD_INT 42000
 316: PUSH
 317: LD_INT 63000
 319: PUSH
 320: EMPTY
 321: LIST
 322: LIST
 323: LIST
 324: LIST
 325: LIST
 326: LIST
 327: PUSH
 328: LD_INT 0
 330: PUSH
 331: LD_INT 1
 333: PUSH
 334: EMPTY
 335: LIST
 336: LIST
 337: PUSH
 338: LD_INT 1
 340: NEG
 341: PUSH
 342: LD_INT 350
 344: PUSH
 345: LD_INT 700
 347: PUSH
 348: LD_INT 1400
 350: PUSH
 351: LD_INT 0
 353: PUSH
 354: EMPTY
 355: LIST
 356: LIST
 357: LIST
 358: LIST
 359: LIST
 360: PUSH
 361: LD_INT 0
 363: PUSH
 364: LD_INT 1
 366: PUSH
 367: EMPTY
 368: LIST
 369: LIST
 370: PUSH
 371: LD_INT 0
 373: PUSH
 374: LD_INT 13650
 376: PUSH
 377: LD_INT 7350
 379: PUSH
 380: EMPTY
 381: LIST
 382: LIST
 383: LIST
 384: PUSH
 385: LD_INT 0
 387: PUSH
 388: LD_INT 2
 390: PUSH
 391: LD_INT 4
 393: PUSH
 394: LD_INT 6
 396: PUSH
 397: EMPTY
 398: LIST
 399: LIST
 400: LIST
 401: LIST
 402: PUSH
 403: EMPTY
 404: PUSH
 405: EMPTY
 406: PUSH
 407: LD_INT 0
 409: PUSH
 410: LD_INT 1
 412: PUSH
 413: LD_INT 31500
 415: PUSH
 416: LD_INT 52500
 418: PUSH
 419: LD_INT 63000
 421: PUSH
 422: LD_INT 94500
 424: PUSH
 425: LD_INT 126000
 427: PUSH
 428: LD_INT 189000
 430: PUSH
 431: LD_INT 210000
 433: PUSH
 434: LD_INT 252000
 436: PUSH
 437: LD_INT 378000
 439: PUSH
 440: EMPTY
 441: LIST
 442: LIST
 443: LIST
 444: LIST
 445: LIST
 446: LIST
 447: LIST
 448: LIST
 449: LIST
 450: LIST
 451: LIST
 452: PUSH
 453: EMPTY
 454: PUSH
 455: LD_INT 0
 457: PUSH
 458: LD_INT 1
 460: PUSH
 461: LD_INT 2
 463: PUSH
 464: LD_INT 4
 466: PUSH
 467: EMPTY
 468: LIST
 469: LIST
 470: LIST
 471: LIST
 472: PUSH
 473: LD_INT 0
 475: PUSH
 476: LD_INT 6300
 478: PUSH
 479: LD_INT 10500
 481: PUSH
 482: LD_INT 16800
 484: PUSH
 485: LD_INT 21000
 487: PUSH
 488: LD_INT 25200
 490: PUSH
 491: LD_INT 31500
 493: PUSH
 494: LD_INT 42000
 496: PUSH
 497: LD_INT 63000
 499: PUSH
 500: EMPTY
 501: LIST
 502: LIST
 503: LIST
 504: LIST
 505: LIST
 506: LIST
 507: LIST
 508: LIST
 509: LIST
 510: PUSH
 511: EMPTY
 512: LIST
 513: LIST
 514: LIST
 515: LIST
 516: LIST
 517: LIST
 518: LIST
 519: LIST
 520: LIST
 521: LIST
 522: LIST
 523: LIST
 524: LIST
 525: LIST
 526: LIST
 527: LIST
 528: LIST
 529: LIST
 530: LIST
 531: LIST
 532: LIST
 533: ST_TO_ADDR
// mpGameSettings := [ 1 , 15 , 4 , [ 100 , 30 , 0 ] , 3 , 1 , 2 , 250 , 0 , 0 , 1 , 0 0$20 , 1 , 0 0$20 , 3 , 0 , 0 , 15 15$0 , 0 , 0 , 3 3$0 ] ;
 534: LD_ADDR_EXP 6
 538: PUSH
 539: LD_INT 1
 541: PUSH
 542: LD_INT 15
 544: PUSH
 545: LD_INT 4
 547: PUSH
 548: LD_INT 100
 550: PUSH
 551: LD_INT 30
 553: PUSH
 554: LD_INT 0
 556: PUSH
 557: EMPTY
 558: LIST
 559: LIST
 560: LIST
 561: PUSH
 562: LD_INT 3
 564: PUSH
 565: LD_INT 1
 567: PUSH
 568: LD_INT 2
 570: PUSH
 571: LD_INT 250
 573: PUSH
 574: LD_INT 0
 576: PUSH
 577: LD_INT 0
 579: PUSH
 580: LD_INT 1
 582: PUSH
 583: LD_INT 700
 585: PUSH
 586: LD_INT 1
 588: PUSH
 589: LD_INT 700
 591: PUSH
 592: LD_INT 3
 594: PUSH
 595: LD_INT 0
 597: PUSH
 598: LD_INT 0
 600: PUSH
 601: LD_INT 31500
 603: PUSH
 604: LD_INT 0
 606: PUSH
 607: LD_INT 0
 609: PUSH
 610: LD_INT 6300
 612: PUSH
 613: EMPTY
 614: LIST
 615: LIST
 616: LIST
 617: LIST
 618: LIST
 619: LIST
 620: LIST
 621: LIST
 622: LIST
 623: LIST
 624: LIST
 625: LIST
 626: LIST
 627: LIST
 628: LIST
 629: LIST
 630: LIST
 631: LIST
 632: LIST
 633: LIST
 634: LIST
 635: ST_TO_ADDR
// mpGameType := GameTypeNormal ;
 636: LD_ADDR_EXP 3
 640: PUSH
 641: LD_INT 1
 643: ST_TO_ADDR
// your_side := 1 ;
 644: LD_ADDR_OWVAR 2
 648: PUSH
 649: LD_INT 1
 651: ST_TO_ADDR
// mpSidePositions := [ 1 , 2 , 3 , 4 , 0 , 0 , 0 , 0 ] ;
 652: LD_ADDR_EXP 7
 656: PUSH
 657: LD_INT 1
 659: PUSH
 660: LD_INT 2
 662: PUSH
 663: LD_INT 3
 665: PUSH
 666: LD_INT 4
 668: PUSH
 669: LD_INT 0
 671: PUSH
 672: LD_INT 0
 674: PUSH
 675: LD_INT 0
 677: PUSH
 678: LD_INT 0
 680: PUSH
 681: EMPTY
 682: LIST
 683: LIST
 684: LIST
 685: LIST
 686: LIST
 687: LIST
 688: LIST
 689: LIST
 690: ST_TO_ADDR
// mpSideTeams := [ 1 , 1 , 2 , 2 , 0 , 0 , 0 , 0 ] ;
 691: LD_ADDR_EXP 8
 695: PUSH
 696: LD_INT 1
 698: PUSH
 699: LD_INT 1
 701: PUSH
 702: LD_INT 2
 704: PUSH
 705: LD_INT 2
 707: PUSH
 708: LD_INT 0
 710: PUSH
 711: LD_INT 0
 713: PUSH
 714: LD_INT 0
 716: PUSH
 717: LD_INT 0
 719: PUSH
 720: EMPTY
 721: LIST
 722: LIST
 723: LIST
 724: LIST
 725: LIST
 726: LIST
 727: LIST
 728: LIST
 729: ST_TO_ADDR
// mpSideNations := [ 3 , 3 , 3 , 3 , 0 , 0 , 0 , 0 ] ;
 730: LD_ADDR_EXP 9
 734: PUSH
 735: LD_INT 3
 737: PUSH
 738: LD_INT 3
 740: PUSH
 741: LD_INT 3
 743: PUSH
 744: LD_INT 3
 746: PUSH
 747: LD_INT 0
 749: PUSH
 750: LD_INT 0
 752: PUSH
 753: LD_INT 0
 755: PUSH
 756: LD_INT 0
 758: PUSH
 759: EMPTY
 760: LIST
 761: LIST
 762: LIST
 763: LIST
 764: LIST
 765: LIST
 766: LIST
 767: LIST
 768: ST_TO_ADDR
// mpTeams := [ [ 1 , 2 ] , [ 3 , 4 ] ] ;
 769: LD_ADDR_EXP 10
 773: PUSH
 774: LD_INT 1
 776: PUSH
 777: LD_INT 2
 779: PUSH
 780: EMPTY
 781: LIST
 782: LIST
 783: PUSH
 784: LD_INT 3
 786: PUSH
 787: LD_INT 4
 789: PUSH
 790: EMPTY
 791: LIST
 792: LIST
 793: PUSH
 794: EMPTY
 795: LIST
 796: LIST
 797: ST_TO_ADDR
// mpTeamGame := true ;
 798: LD_ADDR_EXP 11
 802: PUSH
 803: LD_INT 1
 805: ST_TO_ADDR
// mpMapSize := [ 100 , 120 ] ;
 806: LD_ADDR_EXP 29
 810: PUSH
 811: LD_INT 100
 813: PUSH
 814: LD_INT 120
 816: PUSH
 817: EMPTY
 818: LIST
 819: LIST
 820: ST_TO_ADDR
// end ;
 821: LD_VAR 0 1
 825: RET
// export kingArea , kingCamArea ; export function GetMultiplayerMapData ( gameType ) ; var i , all , area , hasOil , hasSib , baseLevel , startPos ; begin
 826: LD_INT 0
 828: PPUSH
 829: PPUSH
 830: PPUSH
 831: PPUSH
 832: PPUSH
 833: PPUSH
 834: PPUSH
 835: PPUSH
// mpBuildUpAreas := [ BaseArea1 , BaseArea2 , BaseArea3 , BaseArea4 ] ;
 836: LD_ADDR_EXP 19
 840: PUSH
 841: LD_INT 5
 843: PUSH
 844: LD_INT 7
 846: PUSH
 847: LD_INT 6
 849: PUSH
 850: LD_INT 8
 852: PUSH
 853: EMPTY
 854: LIST
 855: LIST
 856: LIST
 857: LIST
 858: ST_TO_ADDR
// mpMarkedAreas := [ ] union mpBuildUpAreas ;
 859: LD_ADDR_EXP 18
 863: PUSH
 864: EMPTY
 865: PUSH
 866: LD_EXP 19
 870: UNION
 871: ST_TO_ADDR
// if gameType = GameTypeSurvival then
 872: LD_VAR 0 1
 876: PUSH
 877: LD_INT 2
 879: EQUAL
 880: IFFALSE 892
// baseLevel := 1 else
 882: LD_ADDR_VAR 0 8
 886: PUSH
 887: LD_INT 1
 889: ST_TO_ADDR
 890: GO 906
// baseLevel := mpGameSettings [ 1 ] ;
 892: LD_ADDR_VAR 0 8
 896: PUSH
 897: LD_EXP 6
 901: PUSH
 902: LD_INT 1
 904: ARRAY
 905: ST_TO_ADDR
// mpPeopleAmount := mpGameSettings [ 2 ] ;
 906: LD_ADDR_EXP 24
 910: PUSH
 911: LD_EXP 6
 915: PUSH
 916: LD_INT 2
 918: ARRAY
 919: ST_TO_ADDR
// mpPeopleSkill := mpGameSettings [ 3 ] ;
 920: LD_ADDR_EXP 25
 924: PUSH
 925: LD_EXP 6
 929: PUSH
 930: LD_INT 3
 932: ARRAY
 933: ST_TO_ADDR
// mpStartingResources := mpGameSettings [ 4 ] ;
 934: LD_ADDR_EXP 15
 938: PUSH
 939: LD_EXP 6
 943: PUSH
 944: LD_INT 4
 946: ARRAY
 947: ST_TO_ADDR
// mpShipments := mpGameSettings [ 5 ] ;
 948: LD_ADDR_EXP 27
 952: PUSH
 953: LD_EXP 6
 957: PUSH
 958: LD_INT 5
 960: ARRAY
 961: ST_TO_ADDR
// hasOil := mpGameSettings [ 6 ] > 0 ;
 962: LD_ADDR_VAR 0 6
 966: PUSH
 967: LD_EXP 6
 971: PUSH
 972: LD_INT 6
 974: ARRAY
 975: PUSH
 976: LD_INT 0
 978: GREATER
 979: ST_TO_ADDR
// hasSib := mpGameSettings [ 7 ] > 0 ;
 980: LD_ADDR_VAR 0 7
 984: PUSH
 985: LD_EXP 6
 989: PUSH
 990: LD_INT 7
 992: ARRAY
 993: PUSH
 994: LD_INT 0
 996: GREATER
 997: ST_TO_ADDR
// mpKingArea := 0 ;
 998: LD_ADDR_EXP 34
1002: PUSH
1003: LD_INT 0
1005: ST_TO_ADDR
// mpPoints := 0 ;
1006: LD_ADDR_EXP 35
1010: PUSH
1011: LD_INT 0
1013: ST_TO_ADDR
// mpEmissions := 0 ;
1014: LD_ADDR_EXP 37
1018: PUSH
1019: LD_INT 0
1021: ST_TO_ADDR
// kingArea := 0 ;
1022: LD_ADDR_EXP 1
1026: PUSH
1027: LD_INT 0
1029: ST_TO_ADDR
// kingCamArea := 0 ;
1030: LD_ADDR_EXP 2
1034: PUSH
1035: LD_INT 0
1037: ST_TO_ADDR
// if mpGameSettings [ 9 ] then
1038: LD_EXP 6
1042: PUSH
1043: LD_INT 9
1045: ARRAY
1046: IFFALSE 1249
// begin mpVehicles := [ [ [ us_light_wheeled , engine_combustion , control_manual , us_machine_gun ] , [ us_light_wheeled , engine_combustion , control_manual , us_light_gun ] , [ us_heavy_tracked , engine_combustion , control_manual , us_bulldozer , nation_american ] ] , [ [ ar_light_trike , engine_combustion , control_manual , ar_double_machine_gun ] , [ ar_light_trike , engine_combustion , control_manual , ar_light_gun ] , [ us_heavy_tracked , engine_combustion , control_manual , us_bulldozer , nation_american ] ] , [ [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun ] , [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun ] , [ us_heavy_tracked , engine_combustion , control_manual , us_bulldozer , nation_american ] ] ] ;
1048: LD_ADDR_EXP 36
1052: PUSH
1053: LD_INT 1
1055: PUSH
1056: LD_INT 1
1058: PUSH
1059: LD_INT 1
1061: PUSH
1062: LD_INT 2
1064: PUSH
1065: EMPTY
1066: LIST
1067: LIST
1068: LIST
1069: LIST
1070: PUSH
1071: LD_INT 1
1073: PUSH
1074: LD_INT 1
1076: PUSH
1077: LD_INT 1
1079: PUSH
1080: LD_INT 3
1082: PUSH
1083: EMPTY
1084: LIST
1085: LIST
1086: LIST
1087: LIST
1088: PUSH
1089: LD_INT 4
1091: PUSH
1092: LD_INT 1
1094: PUSH
1095: LD_INT 1
1097: PUSH
1098: LD_INT 14
1100: PUSH
1101: LD_INT 1
1103: PUSH
1104: EMPTY
1105: LIST
1106: LIST
1107: LIST
1108: LIST
1109: LIST
1110: PUSH
1111: EMPTY
1112: LIST
1113: LIST
1114: LIST
1115: PUSH
1116: LD_INT 12
1118: PUSH
1119: LD_INT 1
1121: PUSH
1122: LD_INT 1
1124: PUSH
1125: LD_INT 24
1127: PUSH
1128: EMPTY
1129: LIST
1130: LIST
1131: LIST
1132: LIST
1133: PUSH
1134: LD_INT 12
1136: PUSH
1137: LD_INT 1
1139: PUSH
1140: LD_INT 1
1142: PUSH
1143: LD_INT 23
1145: PUSH
1146: EMPTY
1147: LIST
1148: LIST
1149: LIST
1150: LIST
1151: PUSH
1152: LD_INT 4
1154: PUSH
1155: LD_INT 1
1157: PUSH
1158: LD_INT 1
1160: PUSH
1161: LD_INT 14
1163: PUSH
1164: LD_INT 1
1166: PUSH
1167: EMPTY
1168: LIST
1169: LIST
1170: LIST
1171: LIST
1172: LIST
1173: PUSH
1174: EMPTY
1175: LIST
1176: LIST
1177: LIST
1178: PUSH
1179: LD_INT 21
1181: PUSH
1182: LD_INT 1
1184: PUSH
1185: LD_INT 1
1187: PUSH
1188: LD_INT 42
1190: PUSH
1191: EMPTY
1192: LIST
1193: LIST
1194: LIST
1195: LIST
1196: PUSH
1197: LD_INT 21
1199: PUSH
1200: LD_INT 1
1202: PUSH
1203: LD_INT 1
1205: PUSH
1206: LD_INT 42
1208: PUSH
1209: EMPTY
1210: LIST
1211: LIST
1212: LIST
1213: LIST
1214: PUSH
1215: LD_INT 4
1217: PUSH
1218: LD_INT 1
1220: PUSH
1221: LD_INT 1
1223: PUSH
1224: LD_INT 14
1226: PUSH
1227: LD_INT 1
1229: PUSH
1230: EMPTY
1231: LIST
1232: LIST
1233: LIST
1234: LIST
1235: LIST
1236: PUSH
1237: EMPTY
1238: LIST
1239: LIST
1240: LIST
1241: PUSH
1242: EMPTY
1243: LIST
1244: LIST
1245: LIST
1246: ST_TO_ADDR
// end else
1247: GO 1334
// begin mpVehicles := [ [ [ us_heavy_tracked , engine_combustion , control_manual , us_bulldozer , nation_american ] ] , [ [ us_heavy_tracked , engine_combustion , control_manual , us_bulldozer , nation_american ] ] , [ [ us_heavy_tracked , engine_combustion , control_manual , us_bulldozer , nation_american ] ] ] ;
1249: LD_ADDR_EXP 36
1253: PUSH
1254: LD_INT 4
1256: PUSH
1257: LD_INT 1
1259: PUSH
1260: LD_INT 1
1262: PUSH
1263: LD_INT 14
1265: PUSH
1266: LD_INT 1
1268: PUSH
1269: EMPTY
1270: LIST
1271: LIST
1272: LIST
1273: LIST
1274: LIST
1275: PUSH
1276: EMPTY
1277: LIST
1278: PUSH
1279: LD_INT 4
1281: PUSH
1282: LD_INT 1
1284: PUSH
1285: LD_INT 1
1287: PUSH
1288: LD_INT 14
1290: PUSH
1291: LD_INT 1
1293: PUSH
1294: EMPTY
1295: LIST
1296: LIST
1297: LIST
1298: LIST
1299: LIST
1300: PUSH
1301: EMPTY
1302: LIST
1303: PUSH
1304: LD_INT 4
1306: PUSH
1307: LD_INT 1
1309: PUSH
1310: LD_INT 1
1312: PUSH
1313: LD_INT 14
1315: PUSH
1316: LD_INT 1
1318: PUSH
1319: EMPTY
1320: LIST
1321: LIST
1322: LIST
1323: LIST
1324: LIST
1325: PUSH
1326: EMPTY
1327: LIST
1328: PUSH
1329: EMPTY
1330: LIST
1331: LIST
1332: LIST
1333: ST_TO_ADDR
// end ; mpSharedVision := mpGameSettings [ 11 ] ;
1334: LD_ADDR_EXP 16
1338: PUSH
1339: LD_EXP 6
1343: PUSH
1344: LD_INT 11
1346: ARRAY
1347: ST_TO_ADDR
// mpBattleFlag := mpGameSettings [ 12 ] ;
1348: LD_ADDR_EXP 22
1352: PUSH
1353: LD_EXP 6
1357: PUSH
1358: LD_INT 12
1360: ARRAY
1361: ST_TO_ADDR
// mpSibDetection := mpGameSettings [ 13 ] ;
1362: LD_ADDR_EXP 26
1366: PUSH
1367: LD_EXP 6
1371: PUSH
1372: LD_INT 13
1374: ARRAY
1375: ST_TO_ADDR
// mpRespawn := mpGameSettings [ 14 ] ;
1376: LD_ADDR_EXP 33
1380: PUSH
1381: LD_EXP 6
1385: PUSH
1386: LD_INT 14
1388: ARRAY
1389: ST_TO_ADDR
// mpApemans := mpGameSettings [ 15 ] ;
1390: LD_ADDR_EXP 30
1394: PUSH
1395: LD_EXP 6
1399: PUSH
1400: LD_INT 15
1402: ARRAY
1403: ST_TO_ADDR
// mpSibBomb := mpGameSettings [ 18 ] ;
1404: LD_ADDR_EXP 28
1408: PUSH
1409: LD_EXP 6
1413: PUSH
1414: LD_INT 18
1416: ARRAY
1417: ST_TO_ADDR
// mpBuildUpTime := mpGameSettings [ 21 ] ;
1418: LD_ADDR_EXP 20
1422: PUSH
1423: LD_EXP 6
1427: PUSH
1428: LD_INT 21
1430: ARRAY
1431: ST_TO_ADDR
// mpApemansArea := [ ApeArea1 , ApeArea2 , ApeArea3 , ApeArea4 ] ;
1432: LD_ADDR_EXP 31
1436: PUSH
1437: LD_INT 10
1439: PUSH
1440: LD_INT 11
1442: PUSH
1443: LD_INT 12
1445: PUSH
1446: LD_INT 13
1448: PUSH
1449: EMPTY
1450: LIST
1451: LIST
1452: LIST
1453: LIST
1454: ST_TO_ADDR
// startPos := [ GetBuildingFromArea ( DepotArea1 , 2 ) , GetBuildingFromArea ( DepotArea2 , 0 ) , GetBuildingFromArea ( DepotArea3 , 3 ) , GetBuildingFromArea ( DepotArea4 , 5 ) ] ;
1455: LD_ADDR_VAR 0 9
1459: PUSH
1460: LD_INT 14
1462: PPUSH
1463: LD_INT 2
1465: PPUSH
1466: CALL 53381 0 2
1470: PUSH
1471: LD_INT 15
1473: PPUSH
1474: LD_INT 0
1476: PPUSH
1477: CALL 53381 0 2
1481: PUSH
1482: LD_INT 16
1484: PPUSH
1485: LD_INT 3
1487: PPUSH
1488: CALL 53381 0 2
1492: PUSH
1493: LD_INT 17
1495: PPUSH
1496: LD_INT 5
1498: PPUSH
1499: CALL 53381 0 2
1503: PUSH
1504: EMPTY
1505: LIST
1506: LIST
1507: LIST
1508: LIST
1509: ST_TO_ADDR
// for i := 1 to Count ( startPos ) do
1510: LD_ADDR_VAR 0 3
1514: PUSH
1515: DOUBLE
1516: LD_INT 1
1518: DEC
1519: ST_TO_ADDR
1520: LD_VAR 0 9
1524: PPUSH
1525: CALL 12696 0 1
1529: PUSH
1530: FOR_TO
1531: IFFALSE 1635
// mpStartPos := Replace ( mpStartPos , i , [ ShiftX ( startPos [ i ] [ 1 ] , startPos [ i ] [ 3 ] , 10 ) , ShiftY ( startPos [ i ] [ 2 ] , startPos [ i ] [ 3 ] , 10 ) ] ) ;
1533: LD_ADDR_EXP 21
1537: PUSH
1538: LD_EXP 21
1542: PPUSH
1543: LD_VAR 0 3
1547: PPUSH
1548: LD_VAR 0 9
1552: PUSH
1553: LD_VAR 0 3
1557: ARRAY
1558: PUSH
1559: LD_INT 1
1561: ARRAY
1562: PPUSH
1563: LD_VAR 0 9
1567: PUSH
1568: LD_VAR 0 3
1572: ARRAY
1573: PUSH
1574: LD_INT 3
1576: ARRAY
1577: PPUSH
1578: LD_INT 10
1580: PPUSH
1581: CALL_OW 272
1585: PUSH
1586: LD_VAR 0 9
1590: PUSH
1591: LD_VAR 0 3
1595: ARRAY
1596: PUSH
1597: LD_INT 2
1599: ARRAY
1600: PPUSH
1601: LD_VAR 0 9
1605: PUSH
1606: LD_VAR 0 3
1610: ARRAY
1611: PUSH
1612: LD_INT 3
1614: ARRAY
1615: PPUSH
1616: LD_INT 10
1618: PPUSH
1619: CALL_OW 273
1623: PUSH
1624: EMPTY
1625: LIST
1626: LIST
1627: PPUSH
1628: CALL_OW 1
1632: ST_TO_ADDR
1633: GO 1530
1635: POP
1636: POP
// if baseLevel >= 1 then
1637: LD_VAR 0 8
1641: PUSH
1642: LD_INT 1
1644: GREATEREQUAL
1645: IFFALSE 1657
// mpDepots := startPos ;
1647: LD_ADDR_EXP 14
1651: PUSH
1652: LD_VAR 0 9
1656: ST_TO_ADDR
// if hasOil then
1657: LD_VAR 0 6
1661: IFFALSE 1744
// begin all := ( mpGameSettings [ 6 ] = 2 ) ;
1663: LD_ADDR_VAR 0 4
1667: PUSH
1668: LD_EXP 6
1672: PUSH
1673: LD_INT 6
1675: ARRAY
1676: PUSH
1677: LD_INT 2
1679: EQUAL
1680: ST_TO_ADDR
// mpOilDeposits := [ GetSourcesFromArea ( OilArea1 , all ) , GetSourcesFromArea ( OilArea2 , all ) , GetSourcesFromArea ( OilArea3 , all ) , GetSourcesFromArea ( OilArea4 , all ) ] ;
1681: LD_ADDR_EXP 12
1685: PUSH
1686: LD_INT 18
1688: PPUSH
1689: LD_VAR 0 4
1693: PPUSH
1694: CALL 53214 0 2
1698: PUSH
1699: LD_INT 19
1701: PPUSH
1702: LD_VAR 0 4
1706: PPUSH
1707: CALL 53214 0 2
1711: PUSH
1712: LD_INT 20
1714: PPUSH
1715: LD_VAR 0 4
1719: PPUSH
1720: CALL 53214 0 2
1724: PUSH
1725: LD_INT 21
1727: PPUSH
1728: LD_VAR 0 4
1732: PPUSH
1733: CALL 53214 0 2
1737: PUSH
1738: EMPTY
1739: LIST
1740: LIST
1741: LIST
1742: LIST
1743: ST_TO_ADDR
// end ; if hasSib then
1744: LD_VAR 0 7
1748: IFFALSE 1831
// begin all := ( mpGameSettings [ 7 ] = 2 ) ;
1750: LD_ADDR_VAR 0 4
1754: PUSH
1755: LD_EXP 6
1759: PUSH
1760: LD_INT 7
1762: ARRAY
1763: PUSH
1764: LD_INT 2
1766: EQUAL
1767: ST_TO_ADDR
// mpSibDeposits := [ GetSourcesFromArea ( SibArea1 , all ) , GetSourcesFromArea ( SibArea2 , all ) , GetSourcesFromArea ( SibArea3 , all ) , GetSourcesFromArea ( SibArea4 , all ) ] ;
1768: LD_ADDR_EXP 13
1772: PUSH
1773: LD_INT 22
1775: PPUSH
1776: LD_VAR 0 4
1780: PPUSH
1781: CALL 53214 0 2
1785: PUSH
1786: LD_INT 23
1788: PPUSH
1789: LD_VAR 0 4
1793: PPUSH
1794: CALL 53214 0 2
1798: PUSH
1799: LD_INT 24
1801: PPUSH
1802: LD_VAR 0 4
1806: PPUSH
1807: CALL 53214 0 2
1811: PUSH
1812: LD_INT 25
1814: PPUSH
1815: LD_VAR 0 4
1819: PPUSH
1820: CALL 53214 0 2
1824: PUSH
1825: EMPTY
1826: LIST
1827: LIST
1828: LIST
1829: LIST
1830: ST_TO_ADDR
// end ; PlaceTreesToArea ( BigForestArea , [ 21 , 22 , 24 , 21 , 22 , 24 , 38 , 39 ] , rand ( 500 , 570 ) , 50 , 2 ) ;
1831: LD_INT 1
1833: PPUSH
1834: LD_INT 21
1836: PUSH
1837: LD_INT 22
1839: PUSH
1840: LD_INT 24
1842: PUSH
1843: LD_INT 21
1845: PUSH
1846: LD_INT 22
1848: PUSH
1849: LD_INT 24
1851: PUSH
1852: LD_INT 38
1854: PUSH
1855: LD_INT 39
1857: PUSH
1858: EMPTY
1859: LIST
1860: LIST
1861: LIST
1862: LIST
1863: LIST
1864: LIST
1865: LIST
1866: LIST
1867: PPUSH
1868: LD_INT 500
1870: PPUSH
1871: LD_INT 570
1873: PPUSH
1874: CALL_OW 12
1878: PPUSH
1879: LD_INT 50
1881: PPUSH
1882: LD_INT 2
1884: PPUSH
1885: CALL_OW 352
// if baseLevel then
1889: LD_VAR 0 8
1893: IFFALSE 1905
// area := BushForestSmallArea else
1895: LD_ADDR_VAR 0 5
1899: PUSH
1900: LD_INT 4
1902: ST_TO_ADDR
1903: GO 1913
// area := BushForestBigArea ;
1905: LD_ADDR_VAR 0 5
1909: PUSH
1910: LD_INT 3
1912: ST_TO_ADDR
// PlaceTreesToArea ( area , [ 38 , 39 , 37 ] , rand ( 300 , 350 ) , 10 , 3 ) ;
1913: LD_VAR 0 5
1917: PPUSH
1918: LD_INT 38
1920: PUSH
1921: LD_INT 39
1923: PUSH
1924: LD_INT 37
1926: PUSH
1927: EMPTY
1928: LIST
1929: LIST
1930: LIST
1931: PPUSH
1932: LD_INT 300
1934: PPUSH
1935: LD_INT 350
1937: PPUSH
1938: CALL_OW 12
1942: PPUSH
1943: LD_INT 10
1945: PPUSH
1946: LD_INT 3
1948: PPUSH
1949: CALL_OW 352
// PlaceTreesToArea ( BigForestArea , [ 38 , 39 , 37 ] , 80 , 10 , 3 ) ;
1953: LD_INT 1
1955: PPUSH
1956: LD_INT 38
1958: PUSH
1959: LD_INT 39
1961: PUSH
1962: LD_INT 37
1964: PUSH
1965: EMPTY
1966: LIST
1967: LIST
1968: LIST
1969: PPUSH
1970: LD_INT 80
1972: PPUSH
1973: LD_INT 10
1975: PPUSH
1976: LD_INT 3
1978: PPUSH
1979: CALL_OW 352
// end ;
1983: LD_VAR 0 2
1987: RET
// every 0 0$2 marked mpActive do var i , x , tmp , time , areas , normalTime , delayTime , maxTime ;
1988: GO 1990
1990: DISABLE
1991: LD_INT 0
1993: PPUSH
1994: PPUSH
1995: PPUSH
1996: PPUSH
1997: PPUSH
1998: PPUSH
1999: PPUSH
2000: PPUSH
// begin if not mpShipments then
2001: LD_EXP 27
2005: NOT
2006: IFFALSE 2010
// exit ;
2008: GO 2441
// case mpShipments of 1 :
2010: LD_EXP 27
2014: PUSH
2015: LD_INT 1
2017: DOUBLE
2018: EQUAL
2019: IFTRUE 2023
2021: GO 2058
2023: POP
// begin time := 0 0$30 ;
2024: LD_ADDR_VAR 0 4
2028: PUSH
2029: LD_INT 1050
2031: ST_TO_ADDR
// normalTime := 0 0$30 ;
2032: LD_ADDR_VAR 0 6
2036: PUSH
2037: LD_INT 1050
2039: ST_TO_ADDR
// maxTime := 1 1$20 ;
2040: LD_ADDR_VAR 0 8
2044: PUSH
2045: LD_INT 2800
2047: ST_TO_ADDR
// delayTime := 0 0$5 ;
2048: LD_ADDR_VAR 0 7
2052: PUSH
2053: LD_INT 175
2055: ST_TO_ADDR
// end ; 2 :
2056: GO 2188
2058: LD_INT 2
2060: DOUBLE
2061: EQUAL
2062: IFTRUE 2066
2064: GO 2101
2066: POP
// begin time := 0 0$25 ;
2067: LD_ADDR_VAR 0 4
2071: PUSH
2072: LD_INT 875
2074: ST_TO_ADDR
// normalTime := 0 0$25 ;
2075: LD_ADDR_VAR 0 6
2079: PUSH
2080: LD_INT 875
2082: ST_TO_ADDR
// maxTime := 1 1$10 ;
2083: LD_ADDR_VAR 0 8
2087: PUSH
2088: LD_INT 2450
2090: ST_TO_ADDR
// delayTime := 0 0$4 ;
2091: LD_ADDR_VAR 0 7
2095: PUSH
2096: LD_INT 140
2098: ST_TO_ADDR
// end ; 3 :
2099: GO 2188
2101: LD_INT 3
2103: DOUBLE
2104: EQUAL
2105: IFTRUE 2109
2107: GO 2144
2109: POP
// begin time := 0 0$20 ;
2110: LD_ADDR_VAR 0 4
2114: PUSH
2115: LD_INT 700
2117: ST_TO_ADDR
// normalTime := 0 0$20 ;
2118: LD_ADDR_VAR 0 6
2122: PUSH
2123: LD_INT 700
2125: ST_TO_ADDR
// maxTime := 1 1$00 ;
2126: LD_ADDR_VAR 0 8
2130: PUSH
2131: LD_INT 2100
2133: ST_TO_ADDR
// delayTime := 0 0$3 ;
2134: LD_ADDR_VAR 0 7
2138: PUSH
2139: LD_INT 105
2141: ST_TO_ADDR
// end ; 4 :
2142: GO 2188
2144: LD_INT 4
2146: DOUBLE
2147: EQUAL
2148: IFTRUE 2152
2150: GO 2187
2152: POP
// begin time := 0 0$15 ;
2153: LD_ADDR_VAR 0 4
2157: PUSH
2158: LD_INT 525
2160: ST_TO_ADDR
// normalTime := 0 0$15 ;
2161: LD_ADDR_VAR 0 6
2165: PUSH
2166: LD_INT 525
2168: ST_TO_ADDR
// maxTime := 0 0$55 ;
2169: LD_ADDR_VAR 0 8
2173: PUSH
2174: LD_INT 1925
2176: ST_TO_ADDR
// delayTime := 0 0$2 ;
2177: LD_ADDR_VAR 0 7
2181: PUSH
2182: LD_INT 70
2184: ST_TO_ADDR
// end ; end ;
2185: GO 2188
2187: POP
// tmp := [ BaseArea1 , BaseArea2 , BaseArea3 , BaseArea4 ] ;
2188: LD_ADDR_VAR 0 3
2192: PUSH
2193: LD_INT 5
2195: PUSH
2196: LD_INT 7
2198: PUSH
2199: LD_INT 6
2201: PUSH
2202: LD_INT 8
2204: PUSH
2205: EMPTY
2206: LIST
2207: LIST
2208: LIST
2209: LIST
2210: ST_TO_ADDR
// areas := [ Center1 , Center2 , Center3 , Center4 ] ;
2211: LD_ADDR_VAR 0 5
2215: PUSH
2216: LD_INT 26
2218: PUSH
2219: LD_INT 27
2221: PUSH
2222: LD_INT 29
2224: PUSH
2225: LD_INT 28
2227: PUSH
2228: EMPTY
2229: LIST
2230: LIST
2231: LIST
2232: LIST
2233: ST_TO_ADDR
// for i := 1 to 8 do
2234: LD_ADDR_VAR 0 1
2238: PUSH
2239: DOUBLE
2240: LD_INT 1
2242: DEC
2243: ST_TO_ADDR
2244: LD_INT 8
2246: PUSH
2247: FOR_TO
2248: IFFALSE 2295
// begin if not mpSidePositions [ i ] then
2250: LD_EXP 7
2254: PUSH
2255: LD_VAR 0 1
2259: ARRAY
2260: NOT
2261: IFFALSE 2265
// continue ;
2263: GO 2247
// areas := areas ^ tmp [ mpSidePositions [ i ] ] ;
2265: LD_ADDR_VAR 0 5
2269: PUSH
2270: LD_VAR 0 5
2274: PUSH
2275: LD_VAR 0 3
2279: PUSH
2280: LD_EXP 7
2284: PUSH
2285: LD_VAR 0 1
2289: ARRAY
2290: ARRAY
2291: ADD
2292: ST_TO_ADDR
// end ;
2293: GO 2247
2295: POP
2296: POP
// x := 1 ;
2297: LD_ADDR_VAR 0 2
2301: PUSH
2302: LD_INT 1
2304: ST_TO_ADDR
// repeat wait ( time ) ;
2305: LD_VAR 0 4
2309: PPUSH
2310: CALL_OW 67
// x := Inc ( x ) ;
2314: LD_ADDR_VAR 0 2
2318: PUSH
2319: LD_VAR 0 2
2323: PPUSH
2324: CALL 50035 0 1
2328: ST_TO_ADDR
// if x > 5 then
2329: LD_VAR 0 2
2333: PUSH
2334: LD_INT 5
2336: GREATER
2337: IFFALSE 2347
// x := 1 ;
2339: LD_ADDR_VAR 0 2
2343: PUSH
2344: LD_INT 1
2346: ST_TO_ADDR
// for i in areas do
2347: LD_ADDR_VAR 0 1
2351: PUSH
2352: LD_VAR 0 5
2356: PUSH
2357: FOR_IN
2358: IFFALSE 2397
// begin if GetResourceArea ( i , mat_cans ) < 20 then
2360: LD_VAR 0 1
2364: PPUSH
2365: LD_INT 1
2367: PPUSH
2368: CALL_OW 287
2372: PUSH
2373: LD_INT 20
2375: LESS
2376: IFFALSE 2395
// begin CreateCratesArea ( x , i , true ) ;
2378: LD_VAR 0 2
2382: PPUSH
2383: LD_VAR 0 1
2387: PPUSH
2388: LD_INT 1
2390: PPUSH
2391: CALL_OW 55
// end ; end ;
2395: GO 2357
2397: POP
2398: POP
// time := time + delayTime ;
2399: LD_ADDR_VAR 0 4
2403: PUSH
2404: LD_VAR 0 4
2408: PUSH
2409: LD_VAR 0 7
2413: PLUS
2414: ST_TO_ADDR
// if time > maxTime then
2415: LD_VAR 0 4
2419: PUSH
2420: LD_VAR 0 8
2424: GREATER
2425: IFFALSE 2437
// time := normalTime ;
2427: LD_ADDR_VAR 0 4
2431: PUSH
2432: LD_VAR 0 6
2436: ST_TO_ADDR
// until false ;
2437: LD_INT 0
2439: IFFALSE 2305
// end ; end_of_file
2441: PPOPN 8
2443: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
2444: LD_VAR 0 1
2448: PPUSH
2449: CALL 54179 0 1
// Multiplayer_UnitDestroyed ( un ) ;
2453: LD_VAR 0 1
2457: PPUSH
2458: CALL 7873 0 1
// end ;
2462: PPOPN 1
2464: END
// on UnitKamikazed ( un ) do begin SOS_UnitKamikazed ( un ) ;
2465: LD_VAR 0 1
2469: PPUSH
2470: CALL 54196 0 1
// end ;
2474: PPOPN 1
2476: END
// on BuildingComplete ( b ) do Multiplayer_BuildingComplete ( b ) ;
2477: LD_VAR 0 1
2481: PPUSH
2482: CALL 8580 0 1
2486: PPOPN 1
2488: END
// on VehicleConstructed ( vehicle , factory ) do SOS_VehicleConstructed ( vehicle , factory ) ;
2489: LD_VAR 0 1
2493: PPUSH
2494: LD_VAR 0 2
2498: PPUSH
2499: CALL 54237 0 2
2503: PPOPN 2
2505: END
// on BuildingCaptured ( building , oldSide , unit ) do Multiplayer_BuildingCaptured ( building , oldSide , unit ) ;
2506: LD_VAR 0 1
2510: PPUSH
2511: LD_VAR 0 2
2515: PPUSH
2516: LD_VAR 0 3
2520: PPUSH
2521: CALL 8633 0 3
2525: PPOPN 3
2527: END
// on VehicleConstructionStarted ( factory , chassis , engine , control , weapon ) do Multiplayer_VehicleConstructionStarted ( factory , chassis , engine , control , weapon ) ;
2528: LD_VAR 0 1
2532: PPUSH
2533: LD_VAR 0 2
2537: PPUSH
2538: LD_VAR 0 3
2542: PPUSH
2543: LD_VAR 0 4
2547: PPUSH
2548: LD_VAR 0 5
2552: PPUSH
2553: CALL 9272 0 5
2557: PPOPN 5
2559: END
// on VehicleCaptured ( newId , oldId , oldSide , unit ) do Multiplayer_VehicleCaptured ( newId , oldId , oldSide , unit ) ; end_of_file
2560: LD_VAR 0 1
2564: PPUSH
2565: LD_VAR 0 2
2569: PPUSH
2570: LD_VAR 0 3
2574: PPUSH
2575: LD_VAR 0 4
2579: PPUSH
2580: CALL 9375 0 4
2584: PPOPN 4
2586: END
// export mpGameType , mpGameSettingsKeys , mpGameSettingsValues , mpGameSettings , mpSidePositions , mpSideTeams , mpSideNations , mpTeams , mpTeamGame , mpOilDeposits , mpSibDeposits , mpDepots , mpStartingResources , mpSharedVision , mpBuildings , mpMarkedAreas , mpBuildUpAreas , mpBuildUpTime , mpStartPos , mpBattleFlag , mpBattleFlags , mpPeopleAmount , mpPeopleSkill , mpSibDetection , mpShipments , mpSibBomb , mpMapSize , mpApemans , mpApemansArea , mpApePosIndex , mpRespawn , mpKingArea , mpPoints , mpVehicles , mpEmissions , mpDisplayStrings , mpGameActive , mpRespawnPull , mpGlobalOilDeposits , mpGlobalSibDeposits , mpTeleports , mpArtifacts , mpTimeToWin , mpBlockRespThread ; export function InitMultiplayer ; var i ; begin
2587: LD_INT 0
2589: PPUSH
2590: PPUSH
// disable ( mpActive ) ;
2591: LD_INT 100
2593: DISABLE_MARKED
// disable ( mpWin ) ;
2594: LD_INT 101
2596: DISABLE_MARKED
// disable ( mpLose ) ;
2597: LD_INT 102
2599: DISABLE_MARKED
// mpGameType := 0 ;
2600: LD_ADDR_EXP 3
2604: PUSH
2605: LD_INT 0
2607: ST_TO_ADDR
// mpGameSettings := [ ] ;
2608: LD_ADDR_EXP 6
2612: PUSH
2613: EMPTY
2614: ST_TO_ADDR
// mpGameSettingsKeys := [ ] ;
2615: LD_ADDR_EXP 4
2619: PUSH
2620: EMPTY
2621: ST_TO_ADDR
// mpGameSettingsValues := [ ] ;
2622: LD_ADDR_EXP 5
2626: PUSH
2627: EMPTY
2628: ST_TO_ADDR
// mpMapSize := [ 2 , 2 ] ;
2629: LD_ADDR_EXP 29
2633: PUSH
2634: LD_INT 2
2636: PUSH
2637: LD_INT 2
2639: PUSH
2640: EMPTY
2641: LIST
2642: LIST
2643: ST_TO_ADDR
// mpOilDeposits := [ ] ;
2644: LD_ADDR_EXP 12
2648: PUSH
2649: EMPTY
2650: ST_TO_ADDR
// mpSibDeposits := [ ] ;
2651: LD_ADDR_EXP 13
2655: PUSH
2656: EMPTY
2657: ST_TO_ADDR
// mpGlobalOilDeposits := [ ] ;
2658: LD_ADDR_EXP 41
2662: PUSH
2663: EMPTY
2664: ST_TO_ADDR
// mpGlobalSibDeposits := [ ] ;
2665: LD_ADDR_EXP 42
2669: PUSH
2670: EMPTY
2671: ST_TO_ADDR
// mpDepots := [ ] ;
2672: LD_ADDR_EXP 14
2676: PUSH
2677: EMPTY
2678: ST_TO_ADDR
// mpBuildings := [ ] ;
2679: LD_ADDR_EXP 17
2683: PUSH
2684: EMPTY
2685: ST_TO_ADDR
// mpMarkedAreas := [ ] ;
2686: LD_ADDR_EXP 18
2690: PUSH
2691: EMPTY
2692: ST_TO_ADDR
// mpBuildUpAreas := [ ] ;
2693: LD_ADDR_EXP 19
2697: PUSH
2698: EMPTY
2699: ST_TO_ADDR
// mpBuildUpTime := [ ] ;
2700: LD_ADDR_EXP 20
2704: PUSH
2705: EMPTY
2706: ST_TO_ADDR
// mpStartingResources := [ ] ;
2707: LD_ADDR_EXP 15
2711: PUSH
2712: EMPTY
2713: ST_TO_ADDR
// mpStartPos := [ ] ;
2714: LD_ADDR_EXP 21
2718: PUSH
2719: EMPTY
2720: ST_TO_ADDR
// mpBattleFlag := - 1 ;
2721: LD_ADDR_EXP 22
2725: PUSH
2726: LD_INT 1
2728: NEG
2729: ST_TO_ADDR
// mpBattleFlags := [ ] ;
2730: LD_ADDR_EXP 23
2734: PUSH
2735: EMPTY
2736: ST_TO_ADDR
// mpApemans := [ ] ;
2737: LD_ADDR_EXP 30
2741: PUSH
2742: EMPTY
2743: ST_TO_ADDR
// mpApemansArea := [ ] ;
2744: LD_ADDR_EXP 31
2748: PUSH
2749: EMPTY
2750: ST_TO_ADDR
// mpRespawn := [ ] ;
2751: LD_ADDR_EXP 33
2755: PUSH
2756: EMPTY
2757: ST_TO_ADDR
// mpKingArea := 0 ;
2758: LD_ADDR_EXP 34
2762: PUSH
2763: LD_INT 0
2765: ST_TO_ADDR
// mpPoints := [ ] ;
2766: LD_ADDR_EXP 35
2770: PUSH
2771: EMPTY
2772: ST_TO_ADDR
// mpVehicles := 0 ;
2773: LD_ADDR_EXP 36
2777: PUSH
2778: LD_INT 0
2780: ST_TO_ADDR
// mpShipments := 0 ;
2781: LD_ADDR_EXP 27
2785: PUSH
2786: LD_INT 0
2788: ST_TO_ADDR
// mpRespawnPull := [ [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
2789: LD_ADDR_EXP 40
2793: PUSH
2794: EMPTY
2795: PUSH
2796: EMPTY
2797: PUSH
2798: EMPTY
2799: PUSH
2800: EMPTY
2801: PUSH
2802: EMPTY
2803: PUSH
2804: EMPTY
2805: PUSH
2806: EMPTY
2807: PUSH
2808: EMPTY
2809: PUSH
2810: EMPTY
2811: LIST
2812: LIST
2813: LIST
2814: LIST
2815: LIST
2816: LIST
2817: LIST
2818: LIST
2819: ST_TO_ADDR
// mpApePosIndex := [ [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
2820: LD_ADDR_EXP 32
2824: PUSH
2825: EMPTY
2826: PUSH
2827: EMPTY
2828: PUSH
2829: EMPTY
2830: PUSH
2831: EMPTY
2832: PUSH
2833: EMPTY
2834: PUSH
2835: EMPTY
2836: PUSH
2837: EMPTY
2838: PUSH
2839: EMPTY
2840: PUSH
2841: EMPTY
2842: LIST
2843: LIST
2844: LIST
2845: LIST
2846: LIST
2847: LIST
2848: LIST
2849: LIST
2850: ST_TO_ADDR
// mpEmissions := 0 ;
2851: LD_ADDR_EXP 37
2855: PUSH
2856: LD_INT 0
2858: ST_TO_ADDR
// mpTeleports := 0 ;
2859: LD_ADDR_EXP 43
2863: PUSH
2864: LD_INT 0
2866: ST_TO_ADDR
// mpArtifacts := 0 ;
2867: LD_ADDR_EXP 44
2871: PUSH
2872: LD_INT 0
2874: ST_TO_ADDR
// mpTimeToWin := 0 0$0 ;
2875: LD_ADDR_EXP 45
2879: PUSH
2880: LD_INT 0
2882: ST_TO_ADDR
// mpPeopleSkill := 3 ;
2883: LD_ADDR_EXP 25
2887: PUSH
2888: LD_INT 3
2890: ST_TO_ADDR
// mpPeopleAmount := 15 ;
2891: LD_ADDR_EXP 24
2895: PUSH
2896: LD_INT 15
2898: ST_TO_ADDR
// mpDisplayStrings := 0 ;
2899: LD_ADDR_EXP 38
2903: PUSH
2904: LD_INT 0
2906: ST_TO_ADDR
// mpGameActive := false ;
2907: LD_ADDR_EXP 39
2911: PUSH
2912: LD_INT 0
2914: ST_TO_ADDR
// mpBlockRespThread := false ;
2915: LD_ADDR_EXP 46
2919: PUSH
2920: LD_INT 0
2922: ST_TO_ADDR
// for i := 1 to 32 do
2923: LD_ADDR_VAR 0 2
2927: PUSH
2928: DOUBLE
2929: LD_INT 1
2931: DEC
2932: ST_TO_ADDR
2933: LD_INT 32
2935: PUSH
2936: FOR_TO
2937: IFFALSE 2964
// mpGameSettings := Replace ( mpGameSettings , i , 0 ) ;
2939: LD_ADDR_EXP 6
2943: PUSH
2944: LD_EXP 6
2948: PPUSH
2949: LD_VAR 0 2
2953: PPUSH
2954: LD_INT 0
2956: PPUSH
2957: CALL_OW 1
2961: ST_TO_ADDR
2962: GO 2936
2964: POP
2965: POP
// end ;
2966: LD_VAR 0 1
2970: RET
// export function StartMultiplayer ; var i , j , b , x , y , side , pos , nation , ape , team , setting , resources , gameTypes ; begin
2971: LD_INT 0
2973: PPUSH
2974: PPUSH
2975: PPUSH
2976: PPUSH
2977: PPUSH
2978: PPUSH
2979: PPUSH
2980: PPUSH
2981: PPUSH
2982: PPUSH
2983: PPUSH
2984: PPUSH
2985: PPUSH
2986: PPUSH
// gameTypes := [ GameTypeNormal , GameTypeSurvival , GameTypeKing , GameTypeFamine , GameTypeArmsRace , GameTypeArmsArtifact , ] ;
2987: LD_ADDR_VAR 0 14
2991: PUSH
2992: LD_INT 1
2994: PUSH
2995: LD_INT 2
2997: PUSH
2998: LD_INT 3
3000: PUSH
3001: LD_INT 5
3003: PUSH
3004: LD_INT 6
3006: PUSH
3007: LD_INT 7
3009: PUSH
3010: EMPTY
3011: LIST
3012: LIST
3013: LIST
3014: LIST
3015: LIST
3016: LIST
3017: ST_TO_ADDR
// for i in gameTypes do
3018: LD_ADDR_VAR 0 2
3022: PUSH
3023: LD_VAR 0 14
3027: PUSH
3028: FOR_IN
3029: IFFALSE 3038
// disable ( i ) ;
3031: LD_VAR 0 2
3035: DISABLE_MARKED
3036: GO 3028
3038: POP
3039: POP
// if Multiplayer then
3040: LD_OWVAR 4
3044: IFFALSE 3228
// begin mpGameType := mp_game_type ;
3046: LD_ADDR_EXP 3
3050: PUSH
3051: LD_OWVAR 6
3055: ST_TO_ADDR
// your_side := mp_player_side ;
3056: LD_ADDR_OWVAR 2
3060: PUSH
3061: LD_OWVAR 7
3065: ST_TO_ADDR
// mpSidePositions := mp_sides_positions ;
3066: LD_ADDR_EXP 7
3070: PUSH
3071: LD_OWVAR 17
3075: ST_TO_ADDR
// mpSideTeams := mp_sides_teams ;
3076: LD_ADDR_EXP 8
3080: PUSH
3081: LD_OWVAR 15
3085: ST_TO_ADDR
// mpSideNations := mp_sides_nations ;
3086: LD_ADDR_EXP 9
3090: PUSH
3091: LD_OWVAR 16
3095: ST_TO_ADDR
// mpTeams := mp_teams ;
3096: LD_ADDR_EXP 10
3100: PUSH
3101: LD_OWVAR 12
3105: ST_TO_ADDR
// for i := 1 to Count ( mpGameSettingsKeys ) do
3106: LD_ADDR_VAR 0 2
3110: PUSH
3111: DOUBLE
3112: LD_INT 1
3114: DEC
3115: ST_TO_ADDR
3116: LD_EXP 4
3120: PPUSH
3121: CALL 12696 0 1
3125: PUSH
3126: FOR_TO
3127: IFFALSE 3203
// begin setting := mpGameSettingsKeys [ i ] ;
3129: LD_ADDR_VAR 0 12
3133: PUSH
3134: LD_EXP 4
3138: PUSH
3139: LD_VAR 0 2
3143: ARRAY
3144: ST_TO_ADDR
// if setting then
3145: LD_VAR 0 12
3149: IFFALSE 3201
// mpGameSettings := Replace ( mpGameSettings , i , mpGameSettingsValues [ i ] [ GetMultiplayerSetting ( i - 1 ) + 1 ] ) ;
3151: LD_ADDR_EXP 6
3155: PUSH
3156: LD_EXP 6
3160: PPUSH
3161: LD_VAR 0 2
3165: PPUSH
3166: LD_EXP 5
3170: PUSH
3171: LD_VAR 0 2
3175: ARRAY
3176: PUSH
3177: LD_VAR 0 2
3181: PUSH
3182: LD_INT 1
3184: MINUS
3185: PPUSH
3186: CALL_OW 426
3190: PUSH
3191: LD_INT 1
3193: PLUS
3194: ARRAY
3195: PPUSH
3196: CALL_OW 1
3200: ST_TO_ADDR
// end ;
3201: GO 3126
3203: POP
3204: POP
// mpTeamGame := ( mpSideTeams diff [ 0 ] ) > 1 ;
3205: LD_ADDR_EXP 11
3209: PUSH
3210: LD_EXP 8
3214: PUSH
3215: LD_INT 0
3217: PUSH
3218: EMPTY
3219: LIST
3220: DIFF
3221: PUSH
3222: LD_INT 1
3224: GREATER
3225: ST_TO_ADDR
// end else
3226: GO 3228
// begin end ; GetMultiplayerMapData ( mpGameType ) ;
3228: LD_EXP 3
3232: PPUSH
3233: CALL 826 0 1
// if Count ( mpMarkedAreas ) then
3237: LD_EXP 18
3241: PPUSH
3242: CALL 12696 0 1
3246: IFFALSE 3277
// begin for i in mpMarkedAreas do
3248: LD_ADDR_VAR 0 2
3252: PUSH
3253: LD_EXP 18
3257: PUSH
3258: FOR_IN
3259: IFFALSE 3275
// SetAreaMapShow ( i , 0 ) ;
3261: LD_VAR 0 2
3265: PPUSH
3266: LD_INT 0
3268: PPUSH
3269: CALL_OW 424
3273: GO 3258
3275: POP
3276: POP
// end ; for i := 1 to 8 do
3277: LD_ADDR_VAR 0 2
3281: PUSH
3282: DOUBLE
3283: LD_INT 1
3285: DEC
3286: ST_TO_ADDR
3287: LD_INT 8
3289: PUSH
3290: FOR_TO
3291: IFFALSE 4726
// begin if not mpSidePositions [ i ] then
3293: LD_EXP 7
3297: PUSH
3298: LD_VAR 0 2
3302: ARRAY
3303: NOT
3304: IFFALSE 3308
// continue ;
3306: GO 3290
// side := i ;
3308: LD_ADDR_VAR 0 7
3312: PUSH
3313: LD_VAR 0 2
3317: ST_TO_ADDR
// nation := mpSideNations [ i ] ;
3318: LD_ADDR_VAR 0 9
3322: PUSH
3323: LD_EXP 9
3327: PUSH
3328: LD_VAR 0 2
3332: ARRAY
3333: ST_TO_ADDR
// pos := mpSidePositions [ i ] ;
3334: LD_ADDR_VAR 0 8
3338: PUSH
3339: LD_EXP 7
3343: PUSH
3344: LD_VAR 0 2
3348: ARRAY
3349: ST_TO_ADDR
// if Count ( mpOilDeposits ) then
3350: LD_EXP 12
3354: PPUSH
3355: CALL 12696 0 1
3359: IFFALSE 3436
// begin for j in mpOilDeposits [ pos ] do
3361: LD_ADDR_VAR 0 3
3365: PUSH
3366: LD_EXP 12
3370: PUSH
3371: LD_VAR 0 8
3375: ARRAY
3376: PUSH
3377: FOR_IN
3378: IFFALSE 3434
// begin CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_oil ) ;
3380: LD_VAR 0 3
3384: PUSH
3385: LD_INT 1
3387: ARRAY
3388: PPUSH
3389: LD_VAR 0 3
3393: PUSH
3394: LD_INT 2
3396: ARRAY
3397: PPUSH
3398: LD_INT 2
3400: PPUSH
3401: CALL_OW 62
// SetResourceVisibility ( j [ 1 ] , j [ 2 ] , side ) ;
3405: LD_VAR 0 3
3409: PUSH
3410: LD_INT 1
3412: ARRAY
3413: PPUSH
3414: LD_VAR 0 3
3418: PUSH
3419: LD_INT 2
3421: ARRAY
3422: PPUSH
3423: LD_VAR 0 7
3427: PPUSH
3428: CALL_OW 441
// end ;
3432: GO 3377
3434: POP
3435: POP
// end ; if Count ( mpSibDeposits ) then
3436: LD_EXP 13
3440: PPUSH
3441: CALL 12696 0 1
3445: IFFALSE 3522
// begin for j in mpSibDeposits [ pos ] do
3447: LD_ADDR_VAR 0 3
3451: PUSH
3452: LD_EXP 13
3456: PUSH
3457: LD_VAR 0 8
3461: ARRAY
3462: PUSH
3463: FOR_IN
3464: IFFALSE 3520
// begin CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_siberit ) ;
3466: LD_VAR 0 3
3470: PUSH
3471: LD_INT 1
3473: ARRAY
3474: PPUSH
3475: LD_VAR 0 3
3479: PUSH
3480: LD_INT 2
3482: ARRAY
3483: PPUSH
3484: LD_INT 3
3486: PPUSH
3487: CALL_OW 62
// SetResourceVisibility ( j [ 1 ] , j [ 2 ] , side ) ;
3491: LD_VAR 0 3
3495: PUSH
3496: LD_INT 1
3498: ARRAY
3499: PPUSH
3500: LD_VAR 0 3
3504: PUSH
3505: LD_INT 2
3507: ARRAY
3508: PPUSH
3509: LD_VAR 0 7
3513: PPUSH
3514: CALL_OW 441
// end ;
3518: GO 3463
3520: POP
3521: POP
// end ; InitBc ;
3522: CALL_OW 21
// InitUc ;
3526: CALL_OW 18
// uc_side := side ;
3530: LD_ADDR_OWVAR 20
3534: PUSH
3535: LD_VAR 0 7
3539: ST_TO_ADDR
// uc_nation := nation ;
3540: LD_ADDR_OWVAR 21
3544: PUSH
3545: LD_VAR 0 9
3549: ST_TO_ADDR
// if mpBattleFlag > - 1 then
3550: LD_EXP 22
3554: PUSH
3555: LD_INT 1
3557: NEG
3558: GREATER
3559: IFFALSE 3718
// begin x := mpStartPos [ pos ] [ 1 ] ;
3561: LD_ADDR_VAR 0 5
3565: PUSH
3566: LD_EXP 21
3570: PUSH
3571: LD_VAR 0 8
3575: ARRAY
3576: PUSH
3577: LD_INT 1
3579: ARRAY
3580: ST_TO_ADDR
// y := mpStartPos [ pos ] [ 2 ] ;
3581: LD_ADDR_VAR 0 6
3585: PUSH
3586: LD_EXP 21
3590: PUSH
3591: LD_VAR 0 8
3595: ARRAY
3596: PUSH
3597: LD_INT 2
3599: ARRAY
3600: ST_TO_ADDR
// PlaceEnvironment ( x , y , 12 , 2 ) ;
3601: LD_VAR 0 5
3605: PPUSH
3606: LD_VAR 0 6
3610: PPUSH
3611: LD_INT 12
3613: PPUSH
3614: LD_INT 2
3616: PPUSH
3617: CALL_OW 349
// mpBattleFlags := Replace ( mpBattleFlags , side , SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 70 ] , [ bfo_defend_bonus_building , 40 ] , [ bfo_range , 25 ] , [ bfo_height , 100 ] ] ) ) ;
3621: LD_ADDR_EXP 23
3625: PUSH
3626: LD_EXP 23
3630: PPUSH
3631: LD_VAR 0 7
3635: PPUSH
3636: LD_VAR 0 7
3640: PPUSH
3641: LD_VAR 0 5
3645: PPUSH
3646: LD_VAR 0 6
3650: PPUSH
3651: LD_INT 1
3653: PUSH
3654: LD_INT 100
3656: PUSH
3657: EMPTY
3658: LIST
3659: LIST
3660: PUSH
3661: LD_INT 2
3663: PUSH
3664: LD_INT 70
3666: PUSH
3667: EMPTY
3668: LIST
3669: LIST
3670: PUSH
3671: LD_INT 3
3673: PUSH
3674: LD_INT 40
3676: PUSH
3677: EMPTY
3678: LIST
3679: LIST
3680: PUSH
3681: LD_INT 10
3683: PUSH
3684: LD_INT 25
3686: PUSH
3687: EMPTY
3688: LIST
3689: LIST
3690: PUSH
3691: LD_INT 20
3693: PUSH
3694: LD_INT 100
3696: PUSH
3697: EMPTY
3698: LIST
3699: LIST
3700: PUSH
3701: EMPTY
3702: LIST
3703: LIST
3704: LIST
3705: LIST
3706: LIST
3707: PPUSH
3708: CALL_OW 418
3712: PPUSH
3713: CALL_OW 1
3717: ST_TO_ADDR
// end ; if Count ( mpDepots ) then
3718: LD_EXP 14
3722: PPUSH
3723: CALL 12696 0 1
3727: IFFALSE 3922
// begin if mpGameType in [ GameTypeSurvival , GameTypeArmsRace , GameTypeArmsArtifact ] then
3729: LD_EXP 3
3733: PUSH
3734: LD_INT 2
3736: PUSH
3737: LD_INT 6
3739: PUSH
3740: LD_INT 7
3742: PUSH
3743: EMPTY
3744: LIST
3745: LIST
3746: LIST
3747: IN
3748: IFFALSE 3768
// begin bc_level := 10 ;
3750: LD_ADDR_OWVAR 43
3754: PUSH
3755: LD_INT 10
3757: ST_TO_ADDR
// bc_type := b_warehouse ;
3758: LD_ADDR_OWVAR 42
3762: PUSH
3763: LD_INT 1
3765: ST_TO_ADDR
// end else
3766: GO 3784
// begin bc_level := 0 ;
3768: LD_ADDR_OWVAR 43
3772: PUSH
3773: LD_INT 0
3775: ST_TO_ADDR
// bc_type := b_depot ;
3776: LD_ADDR_OWVAR 42
3780: PUSH
3781: LD_INT 0
3783: ST_TO_ADDR
// end ; b := CreateAndPlaceBuildingXYD ( mpDepots [ pos ] [ 1 ] , mpDepots [ pos ] [ 2 ] , mpDepots [ pos ] [ 3 ] ) ;
3784: LD_ADDR_VAR 0 4
3788: PUSH
3789: LD_EXP 14
3793: PUSH
3794: LD_VAR 0 8
3798: ARRAY
3799: PUSH
3800: LD_INT 1
3802: ARRAY
3803: PPUSH
3804: LD_EXP 14
3808: PUSH
3809: LD_VAR 0 8
3813: ARRAY
3814: PUSH
3815: LD_INT 2
3817: ARRAY
3818: PPUSH
3819: LD_EXP 14
3823: PUSH
3824: LD_VAR 0 8
3828: ARRAY
3829: PUSH
3830: LD_INT 3
3832: ARRAY
3833: PPUSH
3834: CALL_OW 47
3838: ST_TO_ADDR
// SetBName ( b , @ & side ) ;
3839: LD_VAR 0 4
3843: PPUSH
3844: LD_STRING @
3846: PUSH
3847: LD_VAR 0 7
3851: STR
3852: PPUSH
3853: CALL_OW 500
// if Count ( mpStartingResources ) then
3857: LD_EXP 15
3861: PPUSH
3862: CALL 12696 0 1
3866: IFFALSE 3920
// begin for j := 1 to mpStartingResources do
3868: LD_ADDR_VAR 0 3
3872: PUSH
3873: DOUBLE
3874: LD_INT 1
3876: DEC
3877: ST_TO_ADDR
3878: LD_EXP 15
3882: PUSH
3883: FOR_TO
3884: IFFALSE 3918
// SetResourceType ( GetBase ( b ) , j , mpStartingResources [ j ] ) ;
3886: LD_VAR 0 4
3890: PPUSH
3891: CALL_OW 274
3895: PPUSH
3896: LD_VAR 0 3
3900: PPUSH
3901: LD_EXP 15
3905: PUSH
3906: LD_VAR 0 3
3910: ARRAY
3911: PPUSH
3912: CALL_OW 277
3916: GO 3883
3918: POP
3919: POP
// end ; end else
3920: GO 4129
// if Count ( mpStartingResources ) then
3922: LD_EXP 15
3926: PPUSH
3927: CALL 12696 0 1
3931: IFFALSE 4129
// begin x := mpStartPos [ pos ] [ 1 ] ;
3933: LD_ADDR_VAR 0 5
3937: PUSH
3938: LD_EXP 21
3942: PUSH
3943: LD_VAR 0 8
3947: ARRAY
3948: PUSH
3949: LD_INT 1
3951: ARRAY
3952: ST_TO_ADDR
// y := mpStartPos [ pos ] [ 2 ] ;
3953: LD_ADDR_VAR 0 6
3957: PUSH
3958: LD_EXP 21
3962: PUSH
3963: LD_VAR 0 8
3967: ARRAY
3968: PUSH
3969: LD_INT 2
3971: ARRAY
3972: ST_TO_ADDR
// for j := 1 to mpStartingResources do
3973: LD_ADDR_VAR 0 3
3977: PUSH
3978: DOUBLE
3979: LD_INT 1
3981: DEC
3982: ST_TO_ADDR
3983: LD_EXP 15
3987: PUSH
3988: FOR_TO
3989: IFFALSE 4127
// begin resources := mpStartingResources [ j ] ;
3991: LD_ADDR_VAR 0 13
3995: PUSH
3996: LD_EXP 15
4000: PUSH
4001: LD_VAR 0 3
4005: ARRAY
4006: ST_TO_ADDR
// if resources = 0 then
4007: LD_VAR 0 13
4011: PUSH
4012: LD_INT 0
4014: EQUAL
4015: IFFALSE 4019
// continue ;
4017: GO 3988
// repeat if resources >= 50 then
4019: LD_VAR 0 13
4023: PUSH
4024: LD_INT 50
4026: GREATEREQUAL
4027: IFFALSE 4073
// begin CreateResourcesXYR ( j , 5 , x , y , 6 , false ) ;
4029: LD_VAR 0 3
4033: PPUSH
4034: LD_INT 5
4036: PPUSH
4037: LD_VAR 0 5
4041: PPUSH
4042: LD_VAR 0 6
4046: PPUSH
4047: LD_INT 6
4049: PPUSH
4050: LD_INT 0
4052: PPUSH
4053: CALL_OW 60
// resources := resources - 50 ;
4057: LD_ADDR_VAR 0 13
4061: PUSH
4062: LD_VAR 0 13
4066: PUSH
4067: LD_INT 50
4069: MINUS
4070: ST_TO_ADDR
// end else
4071: GO 4115
// begin CreateResourcesXYR ( j , resources div 10 , x , y , 6 , false ) ;
4073: LD_VAR 0 3
4077: PPUSH
4078: LD_VAR 0 13
4082: PUSH
4083: LD_INT 10
4085: DIV
4086: PPUSH
4087: LD_VAR 0 5
4091: PPUSH
4092: LD_VAR 0 6
4096: PPUSH
4097: LD_INT 6
4099: PPUSH
4100: LD_INT 0
4102: PPUSH
4103: CALL_OW 60
// resources := 0 ;
4107: LD_ADDR_VAR 0 13
4111: PUSH
4112: LD_INT 0
4114: ST_TO_ADDR
// end ; until resources <= 0 ;
4115: LD_VAR 0 13
4119: PUSH
4120: LD_INT 0
4122: LESSEQUAL
4123: IFFALSE 4019
// end ;
4125: GO 3988
4127: POP
4128: POP
// end ; if Count ( mpBuildings ) then
4129: LD_EXP 17
4133: PPUSH
4134: CALL 12696 0 1
4138: IFFALSE 4216
// begin for j in mpBuildings [ pos ] do
4140: LD_ADDR_VAR 0 3
4144: PUSH
4145: LD_EXP 17
4149: PUSH
4150: LD_VAR 0 8
4154: ARRAY
4155: PUSH
4156: FOR_IN
4157: IFFALSE 4214
// begin bc_level := 0 ;
4159: LD_ADDR_OWVAR 43
4163: PUSH
4164: LD_INT 0
4166: ST_TO_ADDR
// bc_type := j [ 1 ] ;
4167: LD_ADDR_OWVAR 42
4171: PUSH
4172: LD_VAR 0 3
4176: PUSH
4177: LD_INT 1
4179: ARRAY
4180: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( j [ 2 ] , j [ 3 ] , j [ 4 ] ) ;
4181: LD_VAR 0 3
4185: PUSH
4186: LD_INT 2
4188: ARRAY
4189: PPUSH
4190: LD_VAR 0 3
4194: PUSH
4195: LD_INT 3
4197: ARRAY
4198: PPUSH
4199: LD_VAR 0 3
4203: PUSH
4204: LD_INT 4
4206: ARRAY
4207: PPUSH
4208: CALL_OW 47
// end ;
4212: GO 4156
4214: POP
4215: POP
// end ; if mpSibDetection and GetTech ( tech_sibdet , side ) = state_enabled then
4216: LD_EXP 26
4220: IFFALSE 4240
4222: PUSH
4223: LD_INT 20
4225: PPUSH
4226: LD_VAR 0 7
4230: PPUSH
4231: CALL_OW 321
4235: PUSH
4236: LD_INT 1
4238: EQUAL
4239: AND
4240: IFFALSE 4257
// SetTech ( tech_SibDet , side , state_researched ) ;
4242: LD_INT 20
4244: PPUSH
4245: LD_VAR 0 7
4249: PPUSH
4250: LD_INT 2
4252: PPUSH
4253: CALL_OW 322
// if not mpArtifacts then
4257: LD_EXP 44
4261: NOT
4262: IFFALSE 4279
// SetTech ( tech_artifact , side , state_disabled ) ;
4264: LD_INT 24
4266: PPUSH
4267: LD_VAR 0 7
4271: PPUSH
4272: LD_INT 0
4274: PPUSH
4275: CALL_OW 322
// if mpSibBomb = 1 then
4279: LD_EXP 28
4283: PUSH
4284: LD_INT 1
4286: EQUAL
4287: IFFALSE 4306
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
4289: LD_INT 25
4291: PPUSH
4292: LD_VAR 0 7
4296: PPUSH
4297: LD_INT 1
4299: PPUSH
4300: CALL_OW 322
// end else
4304: GO 4321
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
4306: LD_INT 25
4308: PPUSH
4309: LD_VAR 0 7
4313: PPUSH
4314: LD_INT 0
4316: PPUSH
4317: CALL_OW 322
// end ; if mpVehicles then
4321: LD_EXP 36
4325: IFFALSE 4424
// begin for j in mpPrepareVehicles ( side , nation , mpVehicles ) do
4327: LD_ADDR_VAR 0 3
4331: PUSH
4332: LD_VAR 0 7
4336: PPUSH
4337: LD_VAR 0 9
4341: PPUSH
4342: LD_EXP 36
4346: PPUSH
4347: CALL 5647 0 3
4351: PUSH
4352: FOR_IN
4353: IFFALSE 4422
// begin SetDir ( j , rand ( 0 , 5 ) ) ;
4355: LD_VAR 0 3
4359: PPUSH
4360: LD_INT 0
4362: PPUSH
4363: LD_INT 5
4365: PPUSH
4366: CALL_OW 12
4370: PPUSH
4371: CALL_OW 233
// PlaceUnitXYR ( j , mpStartPos [ pos ] [ 1 ] , mpStartPos [ pos ] [ 2 ] , 12 , false ) ;
4375: LD_VAR 0 3
4379: PPUSH
4380: LD_EXP 21
4384: PUSH
4385: LD_VAR 0 8
4389: ARRAY
4390: PUSH
4391: LD_INT 1
4393: ARRAY
4394: PPUSH
4395: LD_EXP 21
4399: PUSH
4400: LD_VAR 0 8
4404: ARRAY
4405: PUSH
4406: LD_INT 2
4408: ARRAY
4409: PPUSH
4410: LD_INT 12
4412: PPUSH
4413: LD_INT 0
4415: PPUSH
4416: CALL_OW 50
// end ;
4420: GO 4352
4422: POP
4423: POP
// end ; uc_nation := nation ;
4424: LD_ADDR_OWVAR 21
4428: PUSH
4429: LD_VAR 0 9
4433: ST_TO_ADDR
// if mpGameType in [ GameTypeArmsRace , GameTypeArmsArtifact ] and mpSidePositions [ i ] in [ 1 , 2 ] then
4434: LD_EXP 3
4438: PUSH
4439: LD_INT 6
4441: PUSH
4442: LD_INT 7
4444: PUSH
4445: EMPTY
4446: LIST
4447: LIST
4448: IN
4449: IFFALSE 4474
4451: PUSH
4452: LD_EXP 7
4456: PUSH
4457: LD_VAR 0 2
4461: ARRAY
4462: PUSH
4463: LD_INT 1
4465: PUSH
4466: LD_INT 2
4468: PUSH
4469: EMPTY
4470: LIST
4471: LIST
4472: IN
4473: AND
4474: IFFALSE 4522
// team := mpPrepareTeam ( side , nation , mpPeopleAmount + ( mpPeopleAmount div 2 ) , mpPeopleSkill + 1 ) else
4476: LD_ADDR_VAR 0 11
4480: PUSH
4481: LD_VAR 0 7
4485: PPUSH
4486: LD_VAR 0 9
4490: PPUSH
4491: LD_EXP 24
4495: PUSH
4496: LD_EXP 24
4500: PUSH
4501: LD_INT 2
4503: DIV
4504: PLUS
4505: PPUSH
4506: LD_EXP 25
4510: PUSH
4511: LD_INT 1
4513: PLUS
4514: PPUSH
4515: CALL 5138 0 4
4519: ST_TO_ADDR
4520: GO 4552
// team := mpPrepareTeam ( side , nation , mpPeopleAmount , mpPeopleSkill ) ;
4522: LD_ADDR_VAR 0 11
4526: PUSH
4527: LD_VAR 0 7
4531: PPUSH
4532: LD_VAR 0 9
4536: PPUSH
4537: LD_EXP 24
4541: PPUSH
4542: LD_EXP 25
4546: PPUSH
4547: CALL 5138 0 4
4551: ST_TO_ADDR
// for j in team do
4552: LD_ADDR_VAR 0 3
4556: PUSH
4557: LD_VAR 0 11
4561: PUSH
4562: FOR_IN
4563: IFFALSE 4612
// PlaceUnitXYR ( j , mpStartPos [ pos ] [ 1 ] , mpStartPos [ pos ] [ 2 ] , 12 , false ) ;
4565: LD_VAR 0 3
4569: PPUSH
4570: LD_EXP 21
4574: PUSH
4575: LD_VAR 0 8
4579: ARRAY
4580: PUSH
4581: LD_INT 1
4583: ARRAY
4584: PPUSH
4585: LD_EXP 21
4589: PUSH
4590: LD_VAR 0 8
4594: ARRAY
4595: PUSH
4596: LD_INT 2
4598: ARRAY
4599: PPUSH
4600: LD_INT 12
4602: PPUSH
4603: LD_INT 0
4605: PPUSH
4606: CALL_OW 50
4610: GO 4562
4612: POP
4613: POP
// if mpApemans then
4614: LD_EXP 30
4618: IFFALSE 4724
// begin for j := 1 to mpApemans do
4620: LD_ADDR_VAR 0 3
4624: PUSH
4625: DOUBLE
4626: LD_INT 1
4628: DEC
4629: ST_TO_ADDR
4630: LD_EXP 30
4634: PUSH
4635: FOR_TO
4636: IFFALSE 4722
// begin PrepareApeman ( - 5 ) ;
4638: LD_INT 5
4640: NEG
4641: PPUSH
4642: CALL 44789 0 1
// ape := CreateHuman ;
4646: LD_ADDR_VAR 0 10
4650: PUSH
4651: CALL_OW 44
4655: ST_TO_ADDR
// mpApePosIndex := Replace ( mpApePosIndex , pos , Join ( mpApePosIndex [ pos ] , ape ) ) ;
4656: LD_ADDR_EXP 32
4660: PUSH
4661: LD_EXP 32
4665: PPUSH
4666: LD_VAR 0 8
4670: PPUSH
4671: LD_EXP 32
4675: PUSH
4676: LD_VAR 0 8
4680: ARRAY
4681: PPUSH
4682: LD_VAR 0 10
4686: PPUSH
4687: CALL 48662 0 2
4691: PPUSH
4692: CALL_OW 1
4696: ST_TO_ADDR
// PlaceUnitArea ( ape , mpApemansArea [ pos ] , false ) ;
4697: LD_VAR 0 10
4701: PPUSH
4702: LD_EXP 31
4706: PUSH
4707: LD_VAR 0 8
4711: ARRAY
4712: PPUSH
4713: LD_INT 0
4715: PPUSH
4716: CALL_OW 49
// end ;
4720: GO 4635
4722: POP
4723: POP
// end ; end ;
4724: GO 3290
4726: POP
4727: POP
// if not mpTeamGame then
4728: LD_EXP 11
4732: NOT
4733: IFFALSE 4831
// begin for i := 1 to 8 do
4735: LD_ADDR_VAR 0 2
4739: PUSH
4740: DOUBLE
4741: LD_INT 1
4743: DEC
4744: ST_TO_ADDR
4745: LD_INT 8
4747: PUSH
4748: FOR_TO
4749: IFFALSE 4827
// for j := 1 to 8 do
4751: LD_ADDR_VAR 0 3
4755: PUSH
4756: DOUBLE
4757: LD_INT 1
4759: DEC
4760: ST_TO_ADDR
4761: LD_INT 8
4763: PUSH
4764: FOR_TO
4765: IFFALSE 4823
// if i <> j then
4767: LD_VAR 0 2
4771: PUSH
4772: LD_VAR 0 3
4776: NONEQUAL
4777: IFFALSE 4801
// SetAttitude ( i , j , att_neutral , true ) else
4779: LD_VAR 0 2
4783: PPUSH
4784: LD_VAR 0 3
4788: PPUSH
4789: LD_INT 0
4791: PPUSH
4792: LD_INT 1
4794: PPUSH
4795: CALL_OW 80
4799: GO 4821
// SetAttitude ( i , j , att_friend , true ) ;
4801: LD_VAR 0 2
4805: PPUSH
4806: LD_VAR 0 3
4810: PPUSH
4811: LD_INT 1
4813: PPUSH
4814: LD_INT 1
4816: PPUSH
4817: CALL_OW 80
4821: GO 4764
4823: POP
4824: POP
4825: GO 4748
4827: POP
4828: POP
// end else
4829: GO 5006
// begin if mpSharedVision then
4831: LD_EXP 16
4835: IFFALSE 4900
// begin for i in mpTeams do
4837: LD_ADDR_VAR 0 2
4841: PUSH
4842: LD_EXP 10
4846: PUSH
4847: FOR_IN
4848: IFFALSE 4898
// for j := 2 to i do
4850: LD_ADDR_VAR 0 3
4854: PUSH
4855: DOUBLE
4856: LD_INT 2
4858: DEC
4859: ST_TO_ADDR
4860: LD_VAR 0 2
4864: PUSH
4865: FOR_TO
4866: IFFALSE 4894
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
4868: LD_VAR 0 2
4872: PUSH
4873: LD_VAR 0 3
4877: ARRAY
4878: PPUSH
4879: LD_VAR 0 2
4883: PUSH
4884: LD_INT 1
4886: ARRAY
4887: PPUSH
4888: CALL_OW 343
4892: GO 4865
4894: POP
4895: POP
4896: GO 4847
4898: POP
4899: POP
// end ; for i := 1 to 8 do
4900: LD_ADDR_VAR 0 2
4904: PUSH
4905: DOUBLE
4906: LD_INT 1
4908: DEC
4909: ST_TO_ADDR
4910: LD_INT 8
4912: PUSH
4913: FOR_TO
4914: IFFALSE 5004
// for j := 1 to 8 do
4916: LD_ADDR_VAR 0 3
4920: PUSH
4921: DOUBLE
4922: LD_INT 1
4924: DEC
4925: ST_TO_ADDR
4926: LD_INT 8
4928: PUSH
4929: FOR_TO
4930: IFFALSE 5000
// if mpSideTeams [ i ] = mpSideTeams [ j ] then
4932: LD_EXP 8
4936: PUSH
4937: LD_VAR 0 2
4941: ARRAY
4942: PUSH
4943: LD_EXP 8
4947: PUSH
4948: LD_VAR 0 3
4952: ARRAY
4953: EQUAL
4954: IFFALSE 4978
// SetAttitude ( i , j , att_friend , true ) else
4956: LD_VAR 0 2
4960: PPUSH
4961: LD_VAR 0 3
4965: PPUSH
4966: LD_INT 1
4968: PPUSH
4969: LD_INT 1
4971: PPUSH
4972: CALL_OW 80
4976: GO 4998
// SetAttitude ( i , j , att_enemy , true ) ;
4978: LD_VAR 0 2
4982: PPUSH
4983: LD_VAR 0 3
4987: PPUSH
4988: LD_INT 2
4990: PPUSH
4991: LD_INT 1
4993: PPUSH
4994: CALL_OW 80
4998: GO 4929
5000: POP
5001: POP
5002: GO 4913
5004: POP
5005: POP
// end ; music_nat := mpSideNations [ your_side ] ;
5006: LD_ADDR_OWVAR 71
5010: PUSH
5011: LD_EXP 9
5015: PUSH
5016: LD_OWVAR 2
5020: ARRAY
5021: ST_TO_ADDR
// if IAmSpec then
5022: CALL_OW 531
5026: IFFALSE 5067
// begin FogOff ( true ) ;
5028: LD_INT 1
5030: PPUSH
5031: CALL_OW 344
// CenterNowOnXY ( mpMapSize [ 1 ] div 2 , mpMapSize [ 2 ] div 2 ) ;
5035: LD_EXP 29
5039: PUSH
5040: LD_INT 1
5042: ARRAY
5043: PUSH
5044: LD_INT 2
5046: DIV
5047: PPUSH
5048: LD_EXP 29
5052: PUSH
5053: LD_INT 2
5055: ARRAY
5056: PUSH
5057: LD_INT 2
5059: DIV
5060: PPUSH
5061: CALL_OW 86
// end else
5065: GO 5113
// begin CenterNowOnXY ( mpStartPos [ mpSidePositions [ your_side ] ] [ 1 ] , mpStartPos [ mpSidePositions [ your_side ] ] [ 2 ] ) ;
5067: LD_EXP 21
5071: PUSH
5072: LD_EXP 7
5076: PUSH
5077: LD_OWVAR 2
5081: ARRAY
5082: ARRAY
5083: PUSH
5084: LD_INT 1
5086: ARRAY
5087: PPUSH
5088: LD_EXP 21
5092: PUSH
5093: LD_EXP 7
5097: PUSH
5098: LD_OWVAR 2
5102: ARRAY
5103: ARRAY
5104: PUSH
5105: LD_INT 2
5107: ARRAY
5108: PPUSH
5109: CALL_OW 86
// end ; BeginBuildUp ;
5113: CALL 6180 0 0
// enable ( mpActive ) ;
5117: LD_INT 100
5119: ENABLE_MARKED
// enable ( mpGameType ) ;
5120: LD_EXP 3
5124: ENABLE_MARKED
// mpGameActive := true ;
5125: LD_ADDR_EXP 39
5129: PUSH
5130: LD_INT 1
5132: ST_TO_ADDR
// end ;
5133: LD_VAR 0 1
5137: RET
// var mpTeamPreset ; function mpPrepareTeam ( side , nation , amount , skill ) ; var i , un , class ; begin
5138: LD_INT 0
5140: PPUSH
5141: PPUSH
5142: PPUSH
5143: PPUSH
// result := [ ] ;
5144: LD_ADDR_VAR 0 5
5148: PUSH
5149: EMPTY
5150: ST_TO_ADDR
// class := class_soldier ;
5151: LD_ADDR_VAR 0 8
5155: PUSH
5156: LD_INT 1
5158: ST_TO_ADDR
// uc_side := side ;
5159: LD_ADDR_OWVAR 20
5163: PUSH
5164: LD_VAR 0 1
5168: ST_TO_ADDR
// uc_nation := nation ;
5169: LD_ADDR_OWVAR 21
5173: PUSH
5174: LD_VAR 0 2
5178: ST_TO_ADDR
// hc_name := mp_sides_players_names [ side ] ;
5179: LD_ADDR_OWVAR 26
5183: PUSH
5184: LD_OWVAR 19
5188: PUSH
5189: LD_VAR 0 1
5193: ARRAY
5194: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , class , skill + 2 ) ;
5195: LD_INT 1
5197: PPUSH
5198: LD_INT 2
5200: PPUSH
5201: CALL_OW 12
5205: PPUSH
5206: LD_VAR 0 8
5210: PPUSH
5211: LD_VAR 0 4
5215: PUSH
5216: LD_INT 2
5218: PLUS
5219: PPUSH
5220: CALL_OW 380
// hc_importance := 105 ;
5224: LD_ADDR_OWVAR 32
5228: PUSH
5229: LD_INT 105
5231: ST_TO_ADDR
// if Multiplayer then
5232: LD_OWVAR 4
5236: IFFALSE 5276
// begin hc_gallery := MULTIAVATARS ;
5238: LD_ADDR_OWVAR 33
5242: PUSH
5243: LD_STRING MULTIAVATARS
5245: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( side ) ;
5246: LD_ADDR_OWVAR 34
5250: PUSH
5251: LD_VAR 0 1
5255: PPUSH
5256: CALL_OW 525
5260: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( side ) ;
5261: LD_ADDR_OWVAR 27
5265: PUSH
5266: LD_VAR 0 1
5270: PPUSH
5271: CALL_OW 526
5275: ST_TO_ADDR
// end ; result := Join ( result , CreateHuman ) ;
5276: LD_ADDR_VAR 0 5
5280: PUSH
5281: LD_VAR 0 5
5285: PPUSH
5286: CALL_OW 44
5290: PPUSH
5291: CALL 48662 0 2
5295: ST_TO_ADDR
// if mpTeamPreset then
5296: LD_LOC 1
5300: IFFALSE 5396
// begin CopySkills ( mpTeamPreset [ 1 ] , result [ result ] ) ;
5302: LD_LOC 1
5306: PUSH
5307: LD_INT 1
5309: ARRAY
5310: PPUSH
5311: LD_VAR 0 5
5315: PUSH
5316: LD_VAR 0 5
5320: ARRAY
5321: PPUSH
5322: CALL_OW 510
// SetAttr ( result [ result ] , attr_stamina , GetAttr ( mpTeamPreset [ 1 ] , attr_stamina ) ) ;
5326: LD_VAR 0 5
5330: PUSH
5331: LD_VAR 0 5
5335: ARRAY
5336: PPUSH
5337: LD_INT 1
5339: PPUSH
5340: LD_LOC 1
5344: PUSH
5345: LD_INT 1
5347: ARRAY
5348: PPUSH
5349: LD_INT 1
5351: PPUSH
5352: CALL_OW 260
5356: PPUSH
5357: CALL_OW 239
// SetAttr ( result [ result ] , attr_speed , GetAttr ( mpTeamPreset [ 1 ] , attr_speed ) ) ;
5361: LD_VAR 0 5
5365: PUSH
5366: LD_VAR 0 5
5370: ARRAY
5371: PPUSH
5372: LD_INT 2
5374: PPUSH
5375: LD_LOC 1
5379: PUSH
5380: LD_INT 1
5382: ARRAY
5383: PPUSH
5384: LD_INT 2
5386: PPUSH
5387: CALL_OW 260
5391: PPUSH
5392: CALL_OW 239
// end ; InitHc_All ( ) ;
5396: CALL_OW 584
// class := 2 ;
5400: LD_ADDR_VAR 0 8
5404: PUSH
5405: LD_INT 2
5407: ST_TO_ADDR
// for i := 1 to ( amount - 1 ) do
5408: LD_ADDR_VAR 0 6
5412: PUSH
5413: DOUBLE
5414: LD_INT 1
5416: DEC
5417: ST_TO_ADDR
5418: LD_VAR 0 3
5422: PUSH
5423: LD_INT 1
5425: MINUS
5426: PUSH
5427: FOR_TO
5428: IFFALSE 5623
// begin PrepareHuman ( false , class , skill ) ;
5430: LD_INT 0
5432: PPUSH
5433: LD_VAR 0 8
5437: PPUSH
5438: LD_VAR 0 4
5442: PPUSH
5443: CALL_OW 380
// un := CreateHuman ;
5447: LD_ADDR_VAR 0 7
5451: PUSH
5452: CALL_OW 44
5456: ST_TO_ADDR
// result := Join ( result , un ) ;
5457: LD_ADDR_VAR 0 5
5461: PUSH
5462: LD_VAR 0 5
5466: PPUSH
5467: LD_VAR 0 7
5471: PPUSH
5472: CALL 48662 0 2
5476: ST_TO_ADDR
// if Count ( mpTeamPreset ) >= amount then
5477: LD_LOC 1
5481: PPUSH
5482: CALL 12696 0 1
5486: PUSH
5487: LD_VAR 0 3
5491: GREATEREQUAL
5492: IFFALSE 5588
// begin CopySkills ( mpTeamPreset [ i + 1 ] , un ) ;
5494: LD_LOC 1
5498: PUSH
5499: LD_VAR 0 6
5503: PUSH
5504: LD_INT 1
5506: PLUS
5507: ARRAY
5508: PPUSH
5509: LD_VAR 0 7
5513: PPUSH
5514: CALL_OW 510
// SetAttr ( un , attr_stamina , GetAttr ( mpTeamPreset [ i + 1 ] , attr_stamina ) ) ;
5518: LD_VAR 0 7
5522: PPUSH
5523: LD_INT 1
5525: PPUSH
5526: LD_LOC 1
5530: PUSH
5531: LD_VAR 0 6
5535: PUSH
5536: LD_INT 1
5538: PLUS
5539: ARRAY
5540: PPUSH
5541: LD_INT 1
5543: PPUSH
5544: CALL_OW 260
5548: PPUSH
5549: CALL_OW 239
// SetAttr ( un , attr_speed , GetAttr ( mpTeamPreset [ i + 1 ] , attr_speed ) ) ;
5553: LD_VAR 0 7
5557: PPUSH
5558: LD_INT 2
5560: PPUSH
5561: LD_LOC 1
5565: PUSH
5566: LD_VAR 0 6
5570: PUSH
5571: LD_INT 1
5573: PLUS
5574: ARRAY
5575: PPUSH
5576: LD_INT 2
5578: PPUSH
5579: CALL_OW 260
5583: PPUSH
5584: CALL_OW 239
// end ; class := Inc ( class ) ;
5588: LD_ADDR_VAR 0 8
5592: PUSH
5593: LD_VAR 0 8
5597: PPUSH
5598: CALL 50035 0 1
5602: ST_TO_ADDR
// if class = 5 then
5603: LD_VAR 0 8
5607: PUSH
5608: LD_INT 5
5610: EQUAL
5611: IFFALSE 5621
// class := 1 ;
5613: LD_ADDR_VAR 0 8
5617: PUSH
5618: LD_INT 1
5620: ST_TO_ADDR
// end ;
5621: GO 5427
5623: POP
5624: POP
// if not mpTeamPreset then
5625: LD_LOC 1
5629: NOT
5630: IFFALSE 5642
// mpTeamPreset := result ;
5632: LD_ADDR_LOC 1
5636: PUSH
5637: LD_VAR 0 5
5641: ST_TO_ADDR
// end ;
5642: LD_VAR 0 5
5646: RET
// function mpPrepareVehicles ( side , nation , vehicles ) ; var i ; begin
5647: LD_INT 0
5649: PPUSH
5650: PPUSH
// result := [ ] ;
5651: LD_ADDR_VAR 0 4
5655: PUSH
5656: EMPTY
5657: ST_TO_ADDR
// if not vehicles then
5658: LD_VAR 0 3
5662: NOT
5663: IFFALSE 5667
// exit ;
5665: GO 5881
// for i := 1 to vehicles [ nation ] do
5667: LD_ADDR_VAR 0 5
5671: PUSH
5672: DOUBLE
5673: LD_INT 1
5675: DEC
5676: ST_TO_ADDR
5677: LD_VAR 0 3
5681: PUSH
5682: LD_VAR 0 2
5686: ARRAY
5687: PUSH
5688: FOR_TO
5689: IFFALSE 5879
// begin uc_side := side ;
5691: LD_ADDR_OWVAR 20
5695: PUSH
5696: LD_VAR 0 1
5700: ST_TO_ADDR
// if Count ( vehicles [ nation ] [ i ] ) > 4 then
5701: LD_VAR 0 3
5705: PUSH
5706: LD_VAR 0 2
5710: ARRAY
5711: PUSH
5712: LD_VAR 0 5
5716: ARRAY
5717: PPUSH
5718: CALL 12696 0 1
5722: PUSH
5723: LD_INT 4
5725: GREATER
5726: IFFALSE 5756
// uc_nation := vehicles [ nation ] [ i ] [ 5 ] else
5728: LD_ADDR_OWVAR 21
5732: PUSH
5733: LD_VAR 0 3
5737: PUSH
5738: LD_VAR 0 2
5742: ARRAY
5743: PUSH
5744: LD_VAR 0 5
5748: ARRAY
5749: PUSH
5750: LD_INT 5
5752: ARRAY
5753: ST_TO_ADDR
5754: GO 5766
// uc_nation := nation ;
5756: LD_ADDR_OWVAR 21
5760: PUSH
5761: LD_VAR 0 2
5765: ST_TO_ADDR
// PrepareVehicle ( vehicles [ nation ] [ i ] [ 1 ] , vehicles [ nation ] [ i ] [ 2 ] , vehicles [ nation ] [ i ] [ 3 ] , vehicles [ nation ] [ i ] [ 4 ] , 80 ) ;
5766: LD_VAR 0 3
5770: PUSH
5771: LD_VAR 0 2
5775: ARRAY
5776: PUSH
5777: LD_VAR 0 5
5781: ARRAY
5782: PUSH
5783: LD_INT 1
5785: ARRAY
5786: PPUSH
5787: LD_VAR 0 3
5791: PUSH
5792: LD_VAR 0 2
5796: ARRAY
5797: PUSH
5798: LD_VAR 0 5
5802: ARRAY
5803: PUSH
5804: LD_INT 2
5806: ARRAY
5807: PPUSH
5808: LD_VAR 0 3
5812: PUSH
5813: LD_VAR 0 2
5817: ARRAY
5818: PUSH
5819: LD_VAR 0 5
5823: ARRAY
5824: PUSH
5825: LD_INT 3
5827: ARRAY
5828: PPUSH
5829: LD_VAR 0 3
5833: PUSH
5834: LD_VAR 0 2
5838: ARRAY
5839: PUSH
5840: LD_VAR 0 5
5844: ARRAY
5845: PUSH
5846: LD_INT 4
5848: ARRAY
5849: PPUSH
5850: LD_INT 80
5852: PPUSH
5853: CALL 15492 0 5
// result := Join ( result , CreateVehicle ) ;
5857: LD_ADDR_VAR 0 4
5861: PUSH
5862: LD_VAR 0 4
5866: PPUSH
5867: CALL_OW 45
5871: PPUSH
5872: CALL 48662 0 2
5876: ST_TO_ADDR
// end ;
5877: GO 5688
5879: POP
5880: POP
// end ;
5881: LD_VAR 0 4
5885: RET
// function mpUpdateFlags ( strength ) ; var i ; begin
5886: LD_INT 0
5888: PPUSH
5889: PPUSH
// for i in mpBattleFlags do
5890: LD_ADDR_VAR 0 3
5894: PUSH
5895: LD_EXP 23
5899: PUSH
5900: FOR_IN
5901: IFFALSE 5978
// ChangeBattleFlagOptions ( i , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength * 0.7 ] , [ bfo_defend_bonus_building , strength * 0.4 ] , [ bfo_height , strength ] ] ) ;
5903: LD_VAR 0 3
5907: PPUSH
5908: LD_INT 1
5910: PUSH
5911: LD_VAR 0 1
5915: PUSH
5916: EMPTY
5917: LIST
5918: LIST
5919: PUSH
5920: LD_INT 2
5922: PUSH
5923: LD_VAR 0 1
5927: PUSH
5928: LD_REAL  7.00000000000000E-0001
5931: MUL
5932: PUSH
5933: EMPTY
5934: LIST
5935: LIST
5936: PUSH
5937: LD_INT 3
5939: PUSH
5940: LD_VAR 0 1
5944: PUSH
5945: LD_REAL  4.00000000000000E-0001
5948: MUL
5949: PUSH
5950: EMPTY
5951: LIST
5952: LIST
5953: PUSH
5954: LD_INT 20
5956: PUSH
5957: LD_VAR 0 1
5961: PUSH
5962: EMPTY
5963: LIST
5964: LIST
5965: PUSH
5966: EMPTY
5967: LIST
5968: LIST
5969: LIST
5970: LIST
5971: PPUSH
5972: CALL_OW 423
5976: GO 5900
5978: POP
5979: POP
// end ;
5980: LD_VAR 0 2
5984: RET
// every 0 0$1 trigger mpActive do var i , strength ;
5985: LD_INT 100
5987: IFFALSE 6082
5989: GO 5991
5991: DISABLE
5992: LD_INT 0
5994: PPUSH
5995: PPUSH
// begin if mpBattleFlag <= 0 then
5996: LD_EXP 22
6000: PUSH
6001: LD_INT 0
6003: LESSEQUAL
6004: IFFALSE 6008
// exit ;
6006: GO 6082
// strength := 100 ;
6008: LD_ADDR_VAR 0 2
6012: PUSH
6013: LD_INT 100
6015: ST_TO_ADDR
// repeat wait ( mpBattleFlag ) ;
6016: LD_EXP 22
6020: PPUSH
6021: CALL_OW 67
// strength := Dec ( strength ) ;
6025: LD_ADDR_VAR 0 2
6029: PUSH
6030: LD_VAR 0 2
6034: PPUSH
6035: CALL 50057 0 1
6039: ST_TO_ADDR
// mpUpdateFlags ( strength ) ;
6040: LD_VAR 0 2
6044: PPUSH
6045: CALL 5886 0 1
// until not strength ;
6049: LD_VAR 0 2
6053: NOT
6054: IFFALSE 6016
// for i in mpBattleFlags do
6056: LD_ADDR_VAR 0 1
6060: PUSH
6061: LD_EXP 23
6065: PUSH
6066: FOR_IN
6067: IFFALSE 6080
// KillBattleFlag ( i ) ;
6069: LD_VAR 0 1
6073: PPUSH
6074: CALL_OW 419
6078: GO 6066
6080: POP
6081: POP
// end ;
6082: PPOPN 2
6084: END
// every 0 0$1 marked mpActive do var side , tmp ;
6085: GO 6087
6087: DISABLE
6088: LD_INT 0
6090: PPUSH
6091: PPUSH
// begin if mpSibBomb <= 1 then
6092: LD_EXP 28
6096: PUSH
6097: LD_INT 1
6099: LESSEQUAL
6100: IFFALSE 6104
// exit ;
6102: GO 6177
// tmp := mpSibBomb ;
6104: LD_ADDR_VAR 0 2
6108: PUSH
6109: LD_EXP 28
6113: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
6114: LD_INT 35
6116: PPUSH
6117: CALL_OW 67
// tmp := tmp - 0 0$1 ;
6121: LD_ADDR_VAR 0 2
6125: PUSH
6126: LD_VAR 0 2
6130: PUSH
6131: LD_INT 35
6133: MINUS
6134: ST_TO_ADDR
// until not tmp ;
6135: LD_VAR 0 2
6139: NOT
6140: IFFALSE 6114
// for side := 1 to 8 do
6142: LD_ADDR_VAR 0 1
6146: PUSH
6147: DOUBLE
6148: LD_INT 1
6150: DEC
6151: ST_TO_ADDR
6152: LD_INT 8
6154: PUSH
6155: FOR_TO
6156: IFFALSE 6175
// SetTech ( tech_SibFiss , side , state_enabled ) ;
6158: LD_INT 25
6160: PPUSH
6161: LD_VAR 0 1
6165: PPUSH
6166: LD_INT 1
6168: PPUSH
6169: CALL_OW 322
6173: GO 6155
6175: POP
6176: POP
// end ;
6177: PPOPN 2
6179: END
// export mpBuildUpTimeDelay , mpBuildUpTimeActive ; function BeginBuildUp ; var i , j ; begin
6180: LD_INT 0
6182: PPUSH
6183: PPUSH
6184: PPUSH
// mpBuildUpTimeDelay := 0 ;
6185: LD_ADDR_EXP 47
6189: PUSH
6190: LD_INT 0
6192: ST_TO_ADDR
// if not mpBuildUpTime then
6193: LD_EXP 20
6197: NOT
6198: IFFALSE 6202
// exit ;
6200: GO 6391
// mpBuildUpTimeDelay := 4 4$00 + 1 1$00 * mpBuildUpTime ;
6202: LD_ADDR_EXP 47
6206: PUSH
6207: LD_INT 8400
6209: PUSH
6210: LD_INT 2100
6212: PUSH
6213: LD_EXP 20
6217: MUL
6218: PLUS
6219: ST_TO_ADDR
// mpBuildUpTimeActive := true ;
6220: LD_ADDR_EXP 48
6224: PUSH
6225: LD_INT 1
6227: ST_TO_ADDR
// for i := 1 to 8 do
6228: LD_ADDR_VAR 0 2
6232: PUSH
6233: DOUBLE
6234: LD_INT 1
6236: DEC
6237: ST_TO_ADDR
6238: LD_INT 8
6240: PUSH
6241: FOR_TO
6242: IFFALSE 6389
// if mpSidePositions [ i ] then
6244: LD_EXP 7
6248: PUSH
6249: LD_VAR 0 2
6253: ARRAY
6254: IFFALSE 6387
// begin SetAreaMapShow ( mpBuildUpAreas [ mpSidePositions [ i ] ] , 5 ) ;
6256: LD_EXP 19
6260: PUSH
6261: LD_EXP 7
6265: PUSH
6266: LD_VAR 0 2
6270: ARRAY
6271: ARRAY
6272: PPUSH
6273: LD_INT 5
6275: PPUSH
6276: CALL_OW 424
// for j := 1 to 8 do
6280: LD_ADDR_VAR 0 3
6284: PUSH
6285: DOUBLE
6286: LD_INT 1
6288: DEC
6289: ST_TO_ADDR
6290: LD_INT 8
6292: PUSH
6293: FOR_TO
6294: IFFALSE 6385
// if mpSidePositions [ j ] and ( ( mpSideTeams [ i ] <> mpSideTeams [ j ] ) or ( not mpTeamGame ) and ( i <> j ) ) then
6296: LD_EXP 7
6300: PUSH
6301: LD_VAR 0 3
6305: ARRAY
6306: IFFALSE 6355
6308: PUSH
6309: LD_EXP 8
6313: PUSH
6314: LD_VAR 0 2
6318: ARRAY
6319: PUSH
6320: LD_EXP 8
6324: PUSH
6325: LD_VAR 0 3
6329: ARRAY
6330: NONEQUAL
6331: IFTRUE 6354
6333: PUSH
6334: LD_EXP 11
6338: NOT
6339: IFFALSE 6353
6341: PUSH
6342: LD_VAR 0 2
6346: PUSH
6347: LD_VAR 0 3
6351: NONEQUAL
6352: AND
6353: OR
6354: AND
6355: IFFALSE 6383
// HideArea ( j , mpBuildUpAreas [ mpSidePositions [ i ] ] ) ;
6357: LD_VAR 0 3
6361: PPUSH
6362: LD_EXP 19
6366: PUSH
6367: LD_EXP 7
6371: PUSH
6372: LD_VAR 0 2
6376: ARRAY
6377: ARRAY
6378: PPUSH
6379: CALL_OW 333
6383: GO 6293
6385: POP
6386: POP
// end ;
6387: GO 6241
6389: POP
6390: POP
// end ;
6391: LD_VAR 0 1
6395: RET
// function EndBuildUp ; var i , j ; begin
6396: LD_INT 0
6398: PPUSH
6399: PPUSH
6400: PPUSH
// mpBuildUpTimeActive := false ;
6401: LD_ADDR_EXP 48
6405: PUSH
6406: LD_INT 0
6408: ST_TO_ADDR
// for i := 1 to 8 do
6409: LD_ADDR_VAR 0 2
6413: PUSH
6414: DOUBLE
6415: LD_INT 1
6417: DEC
6418: ST_TO_ADDR
6419: LD_INT 8
6421: PUSH
6422: FOR_TO
6423: IFFALSE 6570
// if mpSidePositions [ i ] then
6425: LD_EXP 7
6429: PUSH
6430: LD_VAR 0 2
6434: ARRAY
6435: IFFALSE 6568
// begin SetAreaMapShow ( mpBuildUpAreas [ mpSidePositions [ i ] ] , 0 ) ;
6437: LD_EXP 19
6441: PUSH
6442: LD_EXP 7
6446: PUSH
6447: LD_VAR 0 2
6451: ARRAY
6452: ARRAY
6453: PPUSH
6454: LD_INT 0
6456: PPUSH
6457: CALL_OW 424
// for j := 1 to 8 do
6461: LD_ADDR_VAR 0 3
6465: PUSH
6466: DOUBLE
6467: LD_INT 1
6469: DEC
6470: ST_TO_ADDR
6471: LD_INT 8
6473: PUSH
6474: FOR_TO
6475: IFFALSE 6566
// if mpSidePositions [ j ] and ( ( mpSideTeams [ i ] <> mpSideTeams [ j ] ) or ( not mpTeamGame ) and ( i <> j ) ) then
6477: LD_EXP 7
6481: PUSH
6482: LD_VAR 0 3
6486: ARRAY
6487: IFFALSE 6536
6489: PUSH
6490: LD_EXP 8
6494: PUSH
6495: LD_VAR 0 2
6499: ARRAY
6500: PUSH
6501: LD_EXP 8
6505: PUSH
6506: LD_VAR 0 3
6510: ARRAY
6511: NONEQUAL
6512: IFTRUE 6535
6514: PUSH
6515: LD_EXP 11
6519: NOT
6520: IFFALSE 6534
6522: PUSH
6523: LD_VAR 0 2
6527: PUSH
6528: LD_VAR 0 3
6532: NONEQUAL
6533: AND
6534: OR
6535: AND
6536: IFFALSE 6564
// ShowArea ( j , mpBuildUpAreas [ mpSidePositions [ i ] ] ) ;
6538: LD_VAR 0 3
6542: PPUSH
6543: LD_EXP 19
6547: PUSH
6548: LD_EXP 7
6552: PUSH
6553: LD_VAR 0 2
6557: ARRAY
6558: ARRAY
6559: PPUSH
6560: CALL_OW 334
6564: GO 6474
6566: POP
6567: POP
// end ;
6568: GO 6422
6570: POP
6571: POP
// end ;
6572: LD_VAR 0 1
6576: RET
// every 5 trigger mpBuildUpTimeActive marked mpActive do var i , un ;
6577: LD_EXP 48
6581: IFFALSE 6760
6583: GO 6585
6585: DISABLE
6586: LD_INT 0
6588: PPUSH
6589: PPUSH
// begin for i := 1 to 8 do
6590: LD_ADDR_VAR 0 1
6594: PUSH
6595: DOUBLE
6596: LD_INT 1
6598: DEC
6599: ST_TO_ADDR
6600: LD_INT 8
6602: PUSH
6603: FOR_TO
6604: IFFALSE 6757
// if mpSidePositions [ i ] then
6606: LD_EXP 7
6610: PUSH
6611: LD_VAR 0 1
6615: ARRAY
6616: IFFALSE 6755
// for un in FilterUnitsInArea ( mpBuildUpAreas [ mpSidePositions [ i ] ] , [ [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] , [ f_side , your_side ] ] ) do
6618: LD_ADDR_VAR 0 2
6622: PUSH
6623: LD_EXP 19
6627: PUSH
6628: LD_EXP 7
6632: PUSH
6633: LD_VAR 0 1
6637: ARRAY
6638: ARRAY
6639: PPUSH
6640: LD_INT 2
6642: PUSH
6643: LD_INT 21
6645: PUSH
6646: LD_INT 1
6648: PUSH
6649: EMPTY
6650: LIST
6651: LIST
6652: PUSH
6653: LD_INT 21
6655: PUSH
6656: LD_INT 2
6658: PUSH
6659: EMPTY
6660: LIST
6661: LIST
6662: PUSH
6663: EMPTY
6664: LIST
6665: LIST
6666: LIST
6667: PUSH
6668: LD_INT 22
6670: PUSH
6671: LD_OWVAR 2
6675: PUSH
6676: EMPTY
6677: LIST
6678: LIST
6679: PUSH
6680: EMPTY
6681: LIST
6682: LIST
6683: PPUSH
6684: CALL_OW 70
6688: PUSH
6689: FOR_IN
6690: IFFALSE 6753
// if ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) or ( not mpTeamGame ) and ( i <> your_side ) ) then
6692: LD_EXP 8
6696: PUSH
6697: LD_VAR 0 1
6701: ARRAY
6702: PUSH
6703: LD_EXP 8
6707: PUSH
6708: LD_OWVAR 2
6712: ARRAY
6713: NONEQUAL
6714: IFTRUE 6737
6716: PUSH
6717: LD_EXP 11
6721: NOT
6722: IFFALSE 6736
6724: PUSH
6725: LD_VAR 0 1
6729: PUSH
6730: LD_OWVAR 2
6734: NONEQUAL
6735: AND
6736: OR
6737: IFFALSE 6751
// ComMoveToArea ( un , BuildUpEscape ) ;
6739: LD_VAR 0 2
6743: PPUSH
6744: LD_INT 9
6746: PPUSH
6747: CALL_OW 113
6751: GO 6689
6753: POP
6754: POP
6755: GO 6603
6757: POP
6758: POP
// enable ;
6759: ENABLE
// end ;
6760: PPOPN 2
6762: END
// every 0 0$1 trigger mpBuildUpTime marked mpActive do var tmp ;
6763: LD_EXP 20
6767: IFFALSE 6817
6769: GO 6771
6771: DISABLE
6772: LD_INT 0
6774: PPUSH
// begin tmp := mpBuildUpTime ;
6775: LD_ADDR_VAR 0 1
6779: PUSH
6780: LD_EXP 20
6784: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
6785: LD_INT 35
6787: PPUSH
6788: CALL_OW 67
// tmp := tmp - 0 0$1 ;
6792: LD_ADDR_VAR 0 1
6796: PUSH
6797: LD_VAR 0 1
6801: PUSH
6802: LD_INT 35
6804: MINUS
6805: ST_TO_ADDR
// until not tmp ;
6806: LD_VAR 0 1
6810: NOT
6811: IFFALSE 6785
// EndBuildUp ;
6813: CALL 6396 0 0
// end ;
6817: PPOPN 1
6819: END
// every 0 0$1 trigger mpActive marked mpWin do
6820: LD_INT 100
6822: IFFALSE 6856
6824: GO 6826
6826: DISABLE
// begin if IAmServer then
6827: CALL_OW 518
6831: IFFALSE 6840
// wait ( 0 0$3 ) ;
6833: LD_INT 105
6835: PPUSH
6836: CALL_OW 67
// if Multiplayer then
6840: LD_OWVAR 4
6844: IFFALSE 6852
// YouWinInMultiplayer else
6846: CALL_OW 106
6850: GO 6856
// YouWin ;
6852: CALL_OW 103
// end ;
6856: END
// export function HasPowerByGameType ( gameType , side ) ; begin
6857: LD_INT 0
6859: PPUSH
// result := false ;
6860: LD_ADDR_VAR 0 3
6864: PUSH
6865: LD_INT 0
6867: ST_TO_ADDR
// case gameType of GameTypeNormal , GameTypeFamine , GameTypeArmsRace , GameTypeArmsArtifact :
6868: LD_VAR 0 1
6872: PUSH
6873: LD_INT 1
6875: DOUBLE
6876: EQUAL
6877: IFTRUE 6899
6879: LD_INT 5
6881: DOUBLE
6882: EQUAL
6883: IFTRUE 6899
6885: LD_INT 6
6887: DOUBLE
6888: EQUAL
6889: IFTRUE 6899
6891: LD_INT 7
6893: DOUBLE
6894: EQUAL
6895: IFTRUE 6899
6897: GO 6972
6899: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) ;
6900: LD_ADDR_VAR 0 3
6904: PUSH
6905: LD_INT 22
6907: PUSH
6908: LD_VAR 0 2
6912: PUSH
6913: EMPTY
6914: LIST
6915: LIST
6916: PUSH
6917: LD_INT 2
6919: PUSH
6920: LD_INT 21
6922: PUSH
6923: LD_INT 1
6925: PUSH
6926: EMPTY
6927: LIST
6928: LIST
6929: PUSH
6930: LD_INT 33
6932: PUSH
6933: LD_INT 3
6935: PUSH
6936: EMPTY
6937: LIST
6938: LIST
6939: PUSH
6940: LD_INT 33
6942: PUSH
6943: LD_INT 5
6945: PUSH
6946: EMPTY
6947: LIST
6948: LIST
6949: PUSH
6950: EMPTY
6951: LIST
6952: LIST
6953: LIST
6954: LIST
6955: PUSH
6956: EMPTY
6957: LIST
6958: LIST
6959: PPUSH
6960: CALL_OW 69
6964: PPUSH
6965: CALL 12696 0 1
6969: ST_TO_ADDR
// end ; GameTypeSurvival :
6970: GO 7211
6972: LD_INT 2
6974: DOUBLE
6975: EQUAL
6976: IFTRUE 6980
6978: GO 7110
6980: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ) and Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) ;
6981: LD_ADDR_VAR 0 3
6985: PUSH
6986: LD_INT 22
6988: PUSH
6989: LD_VAR 0 2
6993: PUSH
6994: EMPTY
6995: LIST
6996: LIST
6997: PUSH
6998: LD_INT 2
7000: PUSH
7001: LD_INT 30
7003: PUSH
7004: LD_INT 0
7006: PUSH
7007: EMPTY
7008: LIST
7009: LIST
7010: PUSH
7011: LD_INT 30
7013: PUSH
7014: LD_INT 1
7016: PUSH
7017: EMPTY
7018: LIST
7019: LIST
7020: PUSH
7021: EMPTY
7022: LIST
7023: LIST
7024: LIST
7025: PUSH
7026: EMPTY
7027: LIST
7028: LIST
7029: PPUSH
7030: CALL_OW 69
7034: PPUSH
7035: CALL 12696 0 1
7039: IFFALSE 7107
7041: PUSH
7042: LD_INT 22
7044: PUSH
7045: LD_VAR 0 2
7049: PUSH
7050: EMPTY
7051: LIST
7052: LIST
7053: PUSH
7054: LD_INT 2
7056: PUSH
7057: LD_INT 21
7059: PUSH
7060: LD_INT 1
7062: PUSH
7063: EMPTY
7064: LIST
7065: LIST
7066: PUSH
7067: LD_INT 33
7069: PUSH
7070: LD_INT 3
7072: PUSH
7073: EMPTY
7074: LIST
7075: LIST
7076: PUSH
7077: LD_INT 33
7079: PUSH
7080: LD_INT 5
7082: PUSH
7083: EMPTY
7084: LIST
7085: LIST
7086: PUSH
7087: EMPTY
7088: LIST
7089: LIST
7090: LIST
7091: LIST
7092: PUSH
7093: EMPTY
7094: LIST
7095: LIST
7096: PPUSH
7097: CALL_OW 69
7101: PPUSH
7102: CALL 12696 0 1
7106: AND
7107: ST_TO_ADDR
// end ; GameTypeKing :
7108: GO 7211
7110: LD_INT 3
7112: DOUBLE
7113: EQUAL
7114: IFTRUE 7118
7116: GO 7210
7118: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) and HowMuchPointsKing ( side ) < mpPoints ;
7119: LD_ADDR_VAR 0 3
7123: PUSH
7124: LD_INT 22
7126: PUSH
7127: LD_VAR 0 2
7131: PUSH
7132: EMPTY
7133: LIST
7134: LIST
7135: PUSH
7136: LD_INT 2
7138: PUSH
7139: LD_INT 21
7141: PUSH
7142: LD_INT 1
7144: PUSH
7145: EMPTY
7146: LIST
7147: LIST
7148: PUSH
7149: LD_INT 33
7151: PUSH
7152: LD_INT 3
7154: PUSH
7155: EMPTY
7156: LIST
7157: LIST
7158: PUSH
7159: LD_INT 33
7161: PUSH
7162: LD_INT 5
7164: PUSH
7165: EMPTY
7166: LIST
7167: LIST
7168: PUSH
7169: EMPTY
7170: LIST
7171: LIST
7172: LIST
7173: LIST
7174: PUSH
7175: EMPTY
7176: LIST
7177: LIST
7178: PPUSH
7179: CALL_OW 69
7183: PPUSH
7184: CALL 12696 0 1
7188: IFFALSE 7207
7190: PUSH
7191: LD_VAR 0 2
7195: PPUSH
7196: CALL 61574 0 1
7200: PUSH
7201: LD_EXP 35
7205: LESS
7206: AND
7207: ST_TO_ADDR
// end ; end ;
7208: GO 7211
7210: POP
// end ;
7211: LD_VAR 0 3
7215: RET
// every 0 0$1 trigger mpActive marked mpLose do var gameIsOn , i ;
7216: LD_INT 100
7218: IFFALSE 7448
7220: GO 7222
7222: DISABLE
7223: LD_INT 0
7225: PPUSH
7226: PPUSH
// begin if Multiplayer then
7227: LD_OWVAR 4
7231: IFFALSE 7239
// SetPlayerSpectator ( ) else
7233: CALL_OW 572
7237: GO 7248
// FogOff ( your_side ) ;
7239: LD_OWVAR 2
7243: PPUSH
7244: CALL_OW 344
// repeat gameIsOn := false ;
7248: LD_ADDR_VAR 0 1
7252: PUSH
7253: LD_INT 0
7255: ST_TO_ADDR
// for i := 1 to 8 do
7256: LD_ADDR_VAR 0 2
7260: PUSH
7261: DOUBLE
7262: LD_INT 1
7264: DEC
7265: ST_TO_ADDR
7266: LD_INT 8
7268: PUSH
7269: FOR_TO
7270: IFFALSE 7400
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
7272: LD_EXP 7
7276: PUSH
7277: LD_VAR 0 2
7281: ARRAY
7282: IFFALSE 7295
7284: PUSH
7285: LD_VAR 0 2
7289: PPUSH
7290: CALL_OW 108
7294: AND
7295: IFFALSE 7309
7297: PUSH
7298: LD_VAR 0 2
7302: PUSH
7303: LD_OWVAR 2
7307: NONEQUAL
7308: AND
7309: IFFALSE 7398
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
7311: LD_EXP 8
7315: PUSH
7316: LD_VAR 0 2
7320: ARRAY
7321: NOT
7322: IFTRUE 7370
7324: PUSH
7325: LD_EXP 8
7329: PUSH
7330: LD_VAR 0 2
7334: ARRAY
7335: PUSH
7336: LD_EXP 8
7340: PUSH
7341: LD_OWVAR 2
7345: ARRAY
7346: NONEQUAL
7347: IFFALSE 7369
7349: PUSH
7350: LD_OWVAR 2
7354: PPUSH
7355: LD_VAR 0 2
7359: PPUSH
7360: CALL_OW 81
7364: PUSH
7365: LD_INT 1
7367: NONEQUAL
7368: AND
7369: OR
7370: IFFALSE 7398
// if HasPowerByGameType ( mpGameType , i ) then
7372: LD_EXP 3
7376: PPUSH
7377: LD_VAR 0 2
7381: PPUSH
7382: CALL 6857 0 2
7386: IFFALSE 7398
// begin gameIsOn := true ;
7388: LD_ADDR_VAR 0 1
7392: PUSH
7393: LD_INT 1
7395: ST_TO_ADDR
// break ;
7396: GO 7400
// end ;
7398: GO 7269
7400: POP
7401: POP
// wait ( 100 ) ;
7402: LD_INT 100
7404: PPUSH
7405: CALL_OW 67
// until not gameIsOn ;
7409: LD_VAR 0 1
7413: NOT
7414: IFFALSE 7248
// if IAmServer then
7416: CALL_OW 518
7420: IFFALSE 7429
// wait ( 0 0$3 ) ;
7422: LD_INT 105
7424: PPUSH
7425: CALL_OW 67
// if Multiplayer then
7429: LD_OWVAR 4
7433: IFFALSE 7441
// YouLostInMultiplayer else
7435: CALL_OW 107
7439: GO 7448
// YouLost (  ) ;
7441: LD_STRING 
7443: PPUSH
7444: CALL_OW 104
// end ;
7448: PPOPN 2
7450: END
// every 0 0$10 trigger mpRespawn marked mpActive do var i , j , tmp , spawn , sides ;
7451: LD_EXP 33
7455: IFFALSE 7839
7457: GO 7459
7459: DISABLE
7460: LD_INT 0
7462: PPUSH
7463: PPUSH
7464: PPUSH
7465: PPUSH
7466: PPUSH
// begin sides := [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 ] ;
7467: LD_ADDR_VAR 0 5
7471: PUSH
7472: LD_INT 1
7474: PUSH
7475: LD_INT 2
7477: PUSH
7478: LD_INT 3
7480: PUSH
7481: LD_INT 4
7483: PUSH
7484: LD_INT 5
7486: PUSH
7487: LD_INT 6
7489: PUSH
7490: LD_INT 7
7492: PUSH
7493: LD_INT 8
7495: PUSH
7496: EMPTY
7497: LIST
7498: LIST
7499: LIST
7500: LIST
7501: LIST
7502: LIST
7503: LIST
7504: LIST
7505: ST_TO_ADDR
// repeat wait ( 0 0$10 ) ;
7506: LD_INT 350
7508: PPUSH
7509: CALL_OW 67
// for i := 1 to 8 do
7513: LD_ADDR_VAR 0 1
7517: PUSH
7518: DOUBLE
7519: LD_INT 1
7521: DEC
7522: ST_TO_ADDR
7523: LD_INT 8
7525: PUSH
7526: FOR_TO
7527: IFFALSE 7809
// begin j := sides [ i ] ;
7529: LD_ADDR_VAR 0 2
7533: PUSH
7534: LD_VAR 0 5
7538: PUSH
7539: LD_VAR 0 1
7543: ARRAY
7544: ST_TO_ADDR
// if Count ( mpRespawnPull [ j ] ) and MultiplayerSideAlive ( j ) and HasPowerByGameType ( mpGameType , j ) then
7545: LD_EXP 40
7549: PUSH
7550: LD_VAR 0 2
7554: ARRAY
7555: PPUSH
7556: CALL 12696 0 1
7560: IFFALSE 7573
7562: PUSH
7563: LD_VAR 0 2
7567: PPUSH
7568: CALL_OW 108
7572: AND
7573: IFFALSE 7591
7575: PUSH
7576: LD_EXP 3
7580: PPUSH
7581: LD_VAR 0 2
7585: PPUSH
7586: CALL 6857 0 2
7590: AND
7591: IFFALSE 7807
// begin wait ( mpRespawn div 2 ) ;
7593: LD_EXP 33
7597: PUSH
7598: LD_INT 2
7600: DIV
7601: PPUSH
7602: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , j ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
7606: LD_ADDR_VAR 0 3
7610: PUSH
7611: LD_INT 22
7613: PUSH
7614: LD_VAR 0 2
7618: PUSH
7619: EMPTY
7620: LIST
7621: LIST
7622: PUSH
7623: LD_INT 50
7625: PUSH
7626: EMPTY
7627: LIST
7628: PUSH
7629: LD_INT 2
7631: PUSH
7632: LD_INT 30
7634: PUSH
7635: LD_INT 0
7637: PUSH
7638: EMPTY
7639: LIST
7640: LIST
7641: PUSH
7642: LD_INT 30
7644: PUSH
7645: LD_INT 1
7647: PUSH
7648: EMPTY
7649: LIST
7650: LIST
7651: PUSH
7652: EMPTY
7653: LIST
7654: LIST
7655: LIST
7656: PUSH
7657: EMPTY
7658: LIST
7659: LIST
7660: LIST
7661: PPUSH
7662: CALL_OW 69
7666: ST_TO_ADDR
// if not tmp or not MultiplayerSideAlive ( j ) or not HasPowerByGameType ( mpGameType , j ) then
7667: LD_VAR 0 3
7671: NOT
7672: IFTRUE 7686
7674: PUSH
7675: LD_VAR 0 2
7679: PPUSH
7680: CALL_OW 108
7684: NOT
7685: OR
7686: IFTRUE 7705
7688: PUSH
7689: LD_EXP 3
7693: PPUSH
7694: LD_VAR 0 2
7698: PPUSH
7699: CALL 6857 0 2
7703: NOT
7704: OR
7705: IFFALSE 7709
// continue ;
7707: GO 7526
// spawn := tmp [ 1 ] ;
7709: LD_ADDR_VAR 0 4
7713: PUSH
7714: LD_VAR 0 3
7718: PUSH
7719: LD_INT 1
7721: ARRAY
7722: ST_TO_ADDR
// PlaceUnitXYR ( mpRespawnPull [ j ] [ 1 ] , GetX ( spawn ) , GetY ( spawn ) , 32 , true ) ;
7723: LD_EXP 40
7727: PUSH
7728: LD_VAR 0 2
7732: ARRAY
7733: PUSH
7734: LD_INT 1
7736: ARRAY
7737: PPUSH
7738: LD_VAR 0 4
7742: PPUSH
7743: CALL_OW 250
7747: PPUSH
7748: LD_VAR 0 4
7752: PPUSH
7753: CALL_OW 251
7757: PPUSH
7758: LD_INT 32
7760: PPUSH
7761: LD_INT 1
7763: PPUSH
7764: CALL_OW 50
// mpRespawnPull := Replace ( mpRespawnPull , j , Delete ( mpRespawnPull [ j ] , 1 ) ) ;
7768: LD_ADDR_EXP 40
7772: PUSH
7773: LD_EXP 40
7777: PPUSH
7778: LD_VAR 0 2
7782: PPUSH
7783: LD_EXP 40
7787: PUSH
7788: LD_VAR 0 2
7792: ARRAY
7793: PPUSH
7794: LD_INT 1
7796: PPUSH
7797: CALL_OW 3
7801: PPUSH
7802: CALL_OW 1
7806: ST_TO_ADDR
// end ; end ;
7807: GO 7526
7809: POP
7810: POP
// sides := Reindex ( sides , 1 , 8 , true ) ;
7811: LD_ADDR_VAR 0 5
7815: PUSH
7816: LD_VAR 0 5
7820: PPUSH
7821: LD_INT 1
7823: PPUSH
7824: LD_INT 8
7826: PPUSH
7827: LD_INT 1
7829: PPUSH
7830: CALL 15022 0 4
7834: ST_TO_ADDR
// until false ;
7835: LD_INT 0
7837: IFFALSE 7506
// end ;
7839: PPOPN 5
7841: END
// every 0 0$1 marked mpActive do
7842: GO 7844
7844: DISABLE
// begin enable ;
7845: ENABLE
// if not mpDisplayStrings then
7846: LD_EXP 38
7850: NOT
7851: IFFALSE 7862
// begin display_strings := [ ] ;
7853: LD_ADDR_OWVAR 47
7857: PUSH
7858: EMPTY
7859: ST_TO_ADDR
// exit ;
7860: GO 7872
// end ; display_strings := mpDisplayStrings ;
7862: LD_ADDR_OWVAR 47
7866: PUSH
7867: LD_EXP 38
7871: ST_TO_ADDR
// end ; end_of_file
7872: END
// export function Multiplayer_UnitDestroyed ( un ) ; var i , ape , tag , class , area , nation , side , tmp ; begin
7873: LD_INT 0
7875: PPUSH
7876: PPUSH
7877: PPUSH
7878: PPUSH
7879: PPUSH
7880: PPUSH
7881: PPUSH
7882: PPUSH
7883: PPUSH
// if GetType ( un ) = unit_vehicle then
7884: LD_VAR 0 1
7888: PPUSH
7889: CALL_OW 247
7893: PUSH
7894: LD_INT 2
7896: EQUAL
7897: IFFALSE 7901
// exit ;
7899: GO 8575
// side := GetSide ( un ) ;
7901: LD_ADDR_VAR 0 9
7905: PUSH
7906: LD_VAR 0 1
7910: PPUSH
7911: CALL_OW 255
7915: ST_TO_ADDR
// if mpGameType = GameTypeSurvival then
7916: LD_EXP 3
7920: PUSH
7921: LD_INT 2
7923: EQUAL
7924: IFFALSE 8018
// if GetBType ( un ) in [ b_depot , b_warehouse ] then
7926: LD_VAR 0 1
7930: PPUSH
7931: CALL_OW 266
7935: PUSH
7936: LD_INT 0
7938: PUSH
7939: LD_INT 1
7941: PUSH
7942: EMPTY
7943: LIST
7944: LIST
7945: IN
7946: IFFALSE 8018
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] ] ] ) do
7948: LD_ADDR_VAR 0 3
7952: PUSH
7953: LD_INT 22
7955: PUSH
7956: LD_VAR 0 9
7960: PUSH
7961: EMPTY
7962: LIST
7963: LIST
7964: PUSH
7965: LD_INT 2
7967: PUSH
7968: LD_INT 21
7970: PUSH
7971: LD_INT 1
7973: PUSH
7974: EMPTY
7975: LIST
7976: LIST
7977: PUSH
7978: LD_INT 33
7980: PUSH
7981: LD_INT 3
7983: PUSH
7984: EMPTY
7985: LIST
7986: LIST
7987: PUSH
7988: EMPTY
7989: LIST
7990: LIST
7991: LIST
7992: PUSH
7993: EMPTY
7994: LIST
7995: LIST
7996: PPUSH
7997: CALL_OW 69
8001: PUSH
8002: FOR_IN
8003: IFFALSE 8016
// KillUnit ( i ) ;
8005: LD_VAR 0 3
8009: PPUSH
8010: CALL_OW 66
8014: GO 8002
8016: POP
8017: POP
// end ; if GetClass ( un ) in [ class_apeman , class_apeman_kamikaze , class_apeman_soldier , class_apeman_engineer ] or GetControl ( un ) = control_apeman then
8018: LD_VAR 0 1
8022: PPUSH
8023: CALL_OW 257
8027: PUSH
8028: LD_INT 12
8030: PUSH
8031: LD_INT 17
8033: PUSH
8034: LD_INT 15
8036: PUSH
8037: LD_INT 16
8039: PUSH
8040: EMPTY
8041: LIST
8042: LIST
8043: LIST
8044: LIST
8045: IN
8046: IFTRUE 8063
8048: PUSH
8049: LD_VAR 0 1
8053: PPUSH
8054: CALL_OW 263
8058: PUSH
8059: LD_INT 5
8061: EQUAL
8062: OR
8063: IFFALSE 8300
// begin tag := 0 ;
8065: LD_ADDR_VAR 0 5
8069: PUSH
8070: LD_INT 0
8072: ST_TO_ADDR
// for i := 1 to 8 do
8073: LD_ADDR_VAR 0 3
8077: PUSH
8078: DOUBLE
8079: LD_INT 1
8081: DEC
8082: ST_TO_ADDR
8083: LD_INT 8
8085: PUSH
8086: FOR_TO
8087: IFFALSE 8121
// if un in mpApePosIndex [ i ] then
8089: LD_VAR 0 1
8093: PUSH
8094: LD_EXP 32
8098: PUSH
8099: LD_VAR 0 3
8103: ARRAY
8104: IN
8105: IFFALSE 8119
// begin tag := i ;
8107: LD_ADDR_VAR 0 5
8111: PUSH
8112: LD_VAR 0 3
8116: ST_TO_ADDR
// break ;
8117: GO 8121
// end ;
8119: GO 8086
8121: POP
8122: POP
// if not tag then
8123: LD_VAR 0 5
8127: NOT
8128: IFFALSE 8132
// exit ;
8130: GO 8575
// area := mpApemansArea [ mpSidePositions [ tag ] ] ;
8132: LD_ADDR_VAR 0 7
8136: PUSH
8137: LD_EXP 31
8141: PUSH
8142: LD_EXP 7
8146: PUSH
8147: LD_VAR 0 5
8151: ARRAY
8152: ARRAY
8153: ST_TO_ADDR
// if not area then
8154: LD_VAR 0 7
8158: NOT
8159: IFFALSE 8163
// exit ;
8161: GO 8575
// wait ( 7 7$00 + ( ( ( un mod 5 ) + 1 ) * 0 0$20 ) ) ;
8163: LD_INT 14700
8165: PUSH
8166: LD_VAR 0 1
8170: PUSH
8171: LD_INT 5
8173: MOD
8174: PUSH
8175: LD_INT 1
8177: PLUS
8178: PUSH
8179: LD_INT 700
8181: MUL
8182: PLUS
8183: PPUSH
8184: CALL_OW 67
// repeat wait ( 10 ) ;
8188: LD_INT 10
8190: PPUSH
8191: CALL_OW 67
// until not mpBlockRespThread ;
8195: LD_EXP 46
8199: NOT
8200: IFFALSE 8188
// mpBlockRespThread := true ;
8202: LD_ADDR_EXP 46
8206: PUSH
8207: LD_INT 1
8209: ST_TO_ADDR
// PrepareApeman ( 0 ) ;
8210: LD_INT 0
8212: PPUSH
8213: CALL 44789 0 1
// ape := CreateHuman ;
8217: LD_ADDR_VAR 0 4
8221: PUSH
8222: CALL_OW 44
8226: ST_TO_ADDR
// mpApePosIndex := Replace ( mpApePosIndex , tag , Join ( mpApePosIndex [ tag ] , ape ) ) ;
8227: LD_ADDR_EXP 32
8231: PUSH
8232: LD_EXP 32
8236: PPUSH
8237: LD_VAR 0 5
8241: PPUSH
8242: LD_EXP 32
8246: PUSH
8247: LD_VAR 0 5
8251: ARRAY
8252: PPUSH
8253: LD_VAR 0 4
8257: PPUSH
8258: CALL 48662 0 2
8262: PPUSH
8263: CALL_OW 1
8267: ST_TO_ADDR
// PlaceUnitArea ( ape , area , false ) ;
8268: LD_VAR 0 4
8272: PPUSH
8273: LD_VAR 0 7
8277: PPUSH
8278: LD_INT 0
8280: PPUSH
8281: CALL_OW 49
// wait ( 10 ) ;
8285: LD_INT 10
8287: PPUSH
8288: CALL_OW 67
// mpBlockRespThread := false ;
8292: LD_ADDR_EXP 46
8296: PUSH
8297: LD_INT 0
8299: ST_TO_ADDR
// end ; if GetType ( un ) = unit_human and GetNation ( un ) > nation_nature then
8300: LD_VAR 0 1
8304: PPUSH
8305: CALL_OW 247
8309: PUSH
8310: LD_INT 1
8312: EQUAL
8313: IFFALSE 8330
8315: PUSH
8316: LD_VAR 0 1
8320: PPUSH
8321: CALL_OW 248
8325: PUSH
8326: LD_INT 0
8328: GREATER
8329: AND
8330: IFFALSE 8575
// begin if not mpRespawn then
8332: LD_EXP 33
8336: NOT
8337: IFFALSE 8341
// exit ;
8339: GO 8575
// if not MultiplayerSideAlive ( side ) and not HasPowerByGameType ( mpGameType , side ) then
8341: LD_VAR 0 9
8345: PPUSH
8346: CALL_OW 108
8350: NOT
8351: IFFALSE 8370
8353: PUSH
8354: LD_EXP 3
8358: PPUSH
8359: LD_VAR 0 9
8363: PPUSH
8364: CALL 6857 0 2
8368: NOT
8369: AND
8370: IFFALSE 8374
// exit ;
8372: GO 8575
// side := GetSide ( un ) ;
8374: LD_ADDR_VAR 0 9
8378: PUSH
8379: LD_VAR 0 1
8383: PPUSH
8384: CALL_OW 255
8388: ST_TO_ADDR
// nation := GetNation ( un ) ;
8389: LD_ADDR_VAR 0 8
8393: PUSH
8394: LD_VAR 0 1
8398: PPUSH
8399: CALL_OW 248
8403: ST_TO_ADDR
// class := GetClass ( un ) ;
8404: LD_ADDR_VAR 0 6
8408: PUSH
8409: LD_VAR 0 1
8413: PPUSH
8414: CALL_OW 257
8418: ST_TO_ADDR
// if class > 4 then
8419: LD_VAR 0 6
8423: PUSH
8424: LD_INT 4
8426: GREATER
8427: IFFALSE 8437
// class := 1 ;
8429: LD_ADDR_VAR 0 6
8433: PUSH
8434: LD_INT 1
8436: ST_TO_ADDR
// repeat wait ( 10 ) ;
8437: LD_INT 10
8439: PPUSH
8440: CALL_OW 67
// until not mpBlockRespThread ;
8444: LD_EXP 46
8448: NOT
8449: IFFALSE 8437
// mpBlockRespThread := true ;
8451: LD_ADDR_EXP 46
8455: PUSH
8456: LD_INT 1
8458: ST_TO_ADDR
// uc_side := side ;
8459: LD_ADDR_OWVAR 20
8463: PUSH
8464: LD_VAR 0 9
8468: ST_TO_ADDR
// uc_nation := nation ;
8469: LD_ADDR_OWVAR 21
8473: PUSH
8474: LD_VAR 0 8
8478: ST_TO_ADDR
// PrepareHuman ( false , class , 2 ) ;
8479: LD_INT 0
8481: PPUSH
8482: LD_VAR 0 6
8486: PPUSH
8487: LD_INT 2
8489: PPUSH
8490: CALL_OW 380
// un := CreateHuman ;
8494: LD_ADDR_VAR 0 1
8498: PUSH
8499: CALL_OW 44
8503: ST_TO_ADDR
// mpRespawnPull := Replace ( mpRespawnPull , side , Replace ( mpRespawnPull [ side ] , mpRespawnPull [ side ] + 1 , un ) ) ;
8504: LD_ADDR_EXP 40
8508: PUSH
8509: LD_EXP 40
8513: PPUSH
8514: LD_VAR 0 9
8518: PPUSH
8519: LD_EXP 40
8523: PUSH
8524: LD_VAR 0 9
8528: ARRAY
8529: PPUSH
8530: LD_EXP 40
8534: PUSH
8535: LD_VAR 0 9
8539: ARRAY
8540: PUSH
8541: LD_INT 1
8543: PLUS
8544: PPUSH
8545: LD_VAR 0 1
8549: PPUSH
8550: CALL_OW 1
8554: PPUSH
8555: CALL_OW 1
8559: ST_TO_ADDR
// wait ( 10 ) ;
8560: LD_INT 10
8562: PPUSH
8563: CALL_OW 67
// mpBlockRespThread := false ;
8567: LD_ADDR_EXP 46
8571: PUSH
8572: LD_INT 0
8574: ST_TO_ADDR
// end ; end ;
8575: LD_VAR 0 2
8579: RET
// export function Multiplayer_BuildingComplete ( building ) ; begin
8580: LD_INT 0
8582: PPUSH
// if GetBType ( building ) in [ b_depot , b_warehouse ] then
8583: LD_VAR 0 1
8587: PPUSH
8588: CALL_OW 266
8592: PUSH
8593: LD_INT 0
8595: PUSH
8596: LD_INT 1
8598: PUSH
8599: EMPTY
8600: LIST
8601: LIST
8602: IN
8603: IFFALSE 8628
// SetBName ( building , @ & GetSide ( building ) ) ;
8605: LD_VAR 0 1
8609: PPUSH
8610: LD_STRING @
8612: PUSH
8613: LD_VAR 0 1
8617: PPUSH
8618: CALL_OW 255
8622: STR
8623: PPUSH
8624: CALL_OW 500
// end ;
8628: LD_VAR 0 2
8632: RET
// export function Multiplayer_BuildingCaptured ( building , oldSide , unit ) ; var i ; begin
8633: LD_INT 0
8635: PPUSH
8636: PPUSH
// if mpGameType = GameTypeSurvival and GetBType ( building ) in [ b_depot , b_warehouse ] then
8637: LD_EXP 3
8641: PUSH
8642: LD_INT 2
8644: EQUAL
8645: IFFALSE 8669
8647: PUSH
8648: LD_VAR 0 1
8652: PPUSH
8653: CALL_OW 266
8657: PUSH
8658: LD_INT 0
8660: PUSH
8661: LD_INT 1
8663: PUSH
8664: EMPTY
8665: LIST
8666: LIST
8667: IN
8668: AND
8669: IFFALSE 8748
// begin SetSide ( building , oldSide ) ;
8671: LD_VAR 0 1
8675: PPUSH
8676: LD_VAR 0 2
8680: PPUSH
8681: CALL_OW 235
// KillUnit ( building ) ;
8685: LD_VAR 0 1
8689: PPUSH
8690: CALL_OW 66
// for i in FilterAllUnits ( [ [ f_side , oldSide ] , [ f_type , unit_human ] ] ) do
8694: LD_ADDR_VAR 0 5
8698: PUSH
8699: LD_INT 22
8701: PUSH
8702: LD_VAR 0 2
8706: PUSH
8707: EMPTY
8708: LIST
8709: LIST
8710: PUSH
8711: LD_INT 21
8713: PUSH
8714: LD_INT 1
8716: PUSH
8717: EMPTY
8718: LIST
8719: LIST
8720: PUSH
8721: EMPTY
8722: LIST
8723: LIST
8724: PPUSH
8725: CALL_OW 69
8729: PUSH
8730: FOR_IN
8731: IFFALSE 8744
// KillUnit ( i ) ;
8733: LD_VAR 0 5
8737: PPUSH
8738: CALL_OW 66
8742: GO 8730
8744: POP
8745: POP
// exit ;
8746: GO 8793
// end ; if GetBType ( building ) in [ b_depot , b_warehouse ] then
8748: LD_VAR 0 1
8752: PPUSH
8753: CALL_OW 266
8757: PUSH
8758: LD_INT 0
8760: PUSH
8761: LD_INT 1
8763: PUSH
8764: EMPTY
8765: LIST
8766: LIST
8767: IN
8768: IFFALSE 8793
// SetBName ( building , @ & GetSide ( building ) ) ;
8770: LD_VAR 0 1
8774: PPUSH
8775: LD_STRING @
8777: PUSH
8778: LD_VAR 0 1
8782: PPUSH
8783: CALL_OW 255
8787: STR
8788: PPUSH
8789: CALL_OW 500
// end ;
8793: LD_VAR 0 4
8797: RET
// export function Multiplayer_OilExtracted ( building , side , base , amount ) ; var i , value ; begin
8798: LD_INT 0
8800: PPUSH
8801: PPUSH
8802: PPUSH
// if mpGameType <> GameTypeFamine then
8803: LD_EXP 3
8807: PUSH
8808: LD_INT 5
8810: NONEQUAL
8811: IFFALSE 8815
// exit ;
8813: GO 9030
// for i := 1 to mpGlobalOilDeposits do
8815: LD_ADDR_VAR 0 6
8819: PUSH
8820: DOUBLE
8821: LD_INT 1
8823: DEC
8824: ST_TO_ADDR
8825: LD_EXP 41
8829: PUSH
8830: FOR_TO
8831: IFFALSE 9028
// begin if HexInfo ( mpGlobalOilDeposits [ i ] [ 1 ] , mpGlobalOilDeposits [ i ] [ 2 ] ) = building then
8833: LD_EXP 41
8837: PUSH
8838: LD_VAR 0 6
8842: ARRAY
8843: PUSH
8844: LD_INT 1
8846: ARRAY
8847: PPUSH
8848: LD_EXP 41
8852: PUSH
8853: LD_VAR 0 6
8857: ARRAY
8858: PUSH
8859: LD_INT 2
8861: ARRAY
8862: PPUSH
8863: CALL_OW 428
8867: PUSH
8868: LD_VAR 0 1
8872: EQUAL
8873: IFFALSE 9026
// begin value := mpGlobalOilDeposits [ i ] [ 3 ] ;
8875: LD_ADDR_VAR 0 7
8879: PUSH
8880: LD_EXP 41
8884: PUSH
8885: LD_VAR 0 6
8889: ARRAY
8890: PUSH
8891: LD_INT 3
8893: ARRAY
8894: ST_TO_ADDR
// value := value - amount ;
8895: LD_ADDR_VAR 0 7
8899: PUSH
8900: LD_VAR 0 7
8904: PUSH
8905: LD_VAR 0 4
8909: MINUS
8910: ST_TO_ADDR
// mpGlobalOilDeposits := Replace ( mpGlobalOilDeposits , i , Replace ( mpGlobalOilDeposits [ i ] , 3 , value ) ) ;
8911: LD_ADDR_EXP 41
8915: PUSH
8916: LD_EXP 41
8920: PPUSH
8921: LD_VAR 0 6
8925: PPUSH
8926: LD_EXP 41
8930: PUSH
8931: LD_VAR 0 6
8935: ARRAY
8936: PPUSH
8937: LD_INT 3
8939: PPUSH
8940: LD_VAR 0 7
8944: PPUSH
8945: CALL_OW 1
8949: PPUSH
8950: CALL_OW 1
8954: ST_TO_ADDR
// SetUnitDisplayNumber ( building , value ) ;
8955: LD_VAR 0 1
8959: PPUSH
8960: LD_VAR 0 7
8964: PPUSH
8965: CALL_OW 505
// if value <= 0 then
8969: LD_VAR 0 7
8973: PUSH
8974: LD_INT 0
8976: LESSEQUAL
8977: IFFALSE 9026
// begin RemoveDepositXY ( mpGlobalOilDeposits [ i ] [ 1 ] , mpGlobalOilDeposits [ i ] [ 2 ] ) ;
8979: LD_EXP 41
8983: PUSH
8984: LD_VAR 0 6
8988: ARRAY
8989: PUSH
8990: LD_INT 1
8992: ARRAY
8993: PPUSH
8994: LD_EXP 41
8998: PUSH
8999: LD_VAR 0 6
9003: ARRAY
9004: PUSH
9005: LD_INT 2
9007: ARRAY
9008: PPUSH
9009: CALL_OW 63
// KillUnit ( building ) ;
9013: LD_VAR 0 1
9017: PPUSH
9018: CALL_OW 66
// exit ;
9022: POP
9023: POP
9024: GO 9030
// end ; end ; end ;
9026: GO 8830
9028: POP
9029: POP
// end ;
9030: LD_VAR 0 5
9034: RET
// export function Multiplayer_SibExtracted ( building , side , base , amount ) ; var i , value ; begin
9035: LD_INT 0
9037: PPUSH
9038: PPUSH
9039: PPUSH
// if mpGameType <> GameTypeFamine then
9040: LD_EXP 3
9044: PUSH
9045: LD_INT 5
9047: NONEQUAL
9048: IFFALSE 9052
// exit ;
9050: GO 9267
// for i := 1 to mpGlobalSibDeposits do
9052: LD_ADDR_VAR 0 6
9056: PUSH
9057: DOUBLE
9058: LD_INT 1
9060: DEC
9061: ST_TO_ADDR
9062: LD_EXP 42
9066: PUSH
9067: FOR_TO
9068: IFFALSE 9265
// begin if HexInfo ( mpGlobalSibDeposits [ i ] [ 1 ] , mpGlobalSibDeposits [ i ] [ 2 ] ) = building then
9070: LD_EXP 42
9074: PUSH
9075: LD_VAR 0 6
9079: ARRAY
9080: PUSH
9081: LD_INT 1
9083: ARRAY
9084: PPUSH
9085: LD_EXP 42
9089: PUSH
9090: LD_VAR 0 6
9094: ARRAY
9095: PUSH
9096: LD_INT 2
9098: ARRAY
9099: PPUSH
9100: CALL_OW 428
9104: PUSH
9105: LD_VAR 0 1
9109: EQUAL
9110: IFFALSE 9263
// begin value := mpGlobalSibDeposits [ i ] [ 3 ] ;
9112: LD_ADDR_VAR 0 7
9116: PUSH
9117: LD_EXP 42
9121: PUSH
9122: LD_VAR 0 6
9126: ARRAY
9127: PUSH
9128: LD_INT 3
9130: ARRAY
9131: ST_TO_ADDR
// value := value - amount ;
9132: LD_ADDR_VAR 0 7
9136: PUSH
9137: LD_VAR 0 7
9141: PUSH
9142: LD_VAR 0 4
9146: MINUS
9147: ST_TO_ADDR
// mpGlobalSibDeposits := Replace ( mpGlobalSibDeposits , i , Replace ( mpGlobalSibDeposits [ i ] , 3 , value ) ) ;
9148: LD_ADDR_EXP 42
9152: PUSH
9153: LD_EXP 42
9157: PPUSH
9158: LD_VAR 0 6
9162: PPUSH
9163: LD_EXP 42
9167: PUSH
9168: LD_VAR 0 6
9172: ARRAY
9173: PPUSH
9174: LD_INT 3
9176: PPUSH
9177: LD_VAR 0 7
9181: PPUSH
9182: CALL_OW 1
9186: PPUSH
9187: CALL_OW 1
9191: ST_TO_ADDR
// SetUnitDisplayNumber ( building , value ) ;
9192: LD_VAR 0 1
9196: PPUSH
9197: LD_VAR 0 7
9201: PPUSH
9202: CALL_OW 505
// if value <= 0 then
9206: LD_VAR 0 7
9210: PUSH
9211: LD_INT 0
9213: LESSEQUAL
9214: IFFALSE 9263
// begin RemoveDepositXY ( mpGlobalSibDeposits [ i ] [ 1 ] , mpGlobalSibDeposits [ i ] [ 2 ] ) ;
9216: LD_EXP 42
9220: PUSH
9221: LD_VAR 0 6
9225: ARRAY
9226: PUSH
9227: LD_INT 1
9229: ARRAY
9230: PPUSH
9231: LD_EXP 42
9235: PUSH
9236: LD_VAR 0 6
9240: ARRAY
9241: PUSH
9242: LD_INT 2
9244: ARRAY
9245: PPUSH
9246: CALL_OW 63
// KillUnit ( building ) ;
9250: LD_VAR 0 1
9254: PPUSH
9255: CALL_OW 66
// exit ;
9259: POP
9260: POP
9261: GO 9267
// end ; end ; end ;
9263: GO 9067
9265: POP
9266: POP
// end ;
9267: LD_VAR 0 5
9271: RET
// export function Multiplayer_VehicleConstructionStarted ( factory , chassis , engine , control , weapon ) ; var side ; begin
9272: LD_INT 0
9274: PPUSH
9275: PPUSH
// side := GetSide ( factory ) ;
9276: LD_ADDR_VAR 0 7
9280: PUSH
9281: LD_VAR 0 1
9285: PPUSH
9286: CALL_OW 255
9290: ST_TO_ADDR
// if weapon = ar_miner and FilterAllUnits ( [ [ f_side , side ] , [ f_weapon , ar_miner ] ] ) > 0 then
9291: LD_VAR 0 5
9295: PUSH
9296: LD_INT 81
9298: EQUAL
9299: IFFALSE 9337
9301: PUSH
9302: LD_INT 22
9304: PUSH
9305: LD_VAR 0 7
9309: PUSH
9310: EMPTY
9311: LIST
9312: LIST
9313: PUSH
9314: LD_INT 34
9316: PUSH
9317: LD_INT 81
9319: PUSH
9320: EMPTY
9321: LIST
9322: LIST
9323: PUSH
9324: EMPTY
9325: LIST
9326: LIST
9327: PPUSH
9328: CALL_OW 69
9332: PUSH
9333: LD_INT 0
9335: GREATER
9336: AND
9337: IFFALSE 9370
// begin ComCancel ( factory ) ;
9339: LD_VAR 0 1
9343: PPUSH
9344: CALL_OW 127
// if side = your_side then
9348: LD_VAR 0 7
9352: PUSH
9353: LD_OWVAR 2
9357: EQUAL
9358: IFFALSE 9370
// HintSpec ( VehLimit , 2 ) ;
9360: LD_STRING VehLimit
9362: PPUSH
9363: LD_INT 2
9365: PPUSH
9366: CALL_OW 338
// end ; end ;
9370: LD_VAR 0 6
9374: RET
// export function Multiplayer_VehicleCaptured ( newId , oldId , oldSide , unit ) ; var i , j ; begin
9375: LD_INT 0
9377: PPUSH
9378: PPUSH
9379: PPUSH
// if GetWeapon ( newId ) = ar_miner and GetControl ( newId ) = control_manual then
9380: LD_VAR 0 1
9384: PPUSH
9385: CALL_OW 264
9389: PUSH
9390: LD_INT 81
9392: EQUAL
9393: IFFALSE 9410
9395: PUSH
9396: LD_VAR 0 1
9400: PPUSH
9401: CALL_OW 263
9405: PUSH
9406: LD_INT 1
9408: EQUAL
9409: AND
9410: IFFALSE 9690
// begin for i := 1 to Count ( minersList ) do
9412: LD_ADDR_VAR 0 6
9416: PUSH
9417: DOUBLE
9418: LD_INT 1
9420: DEC
9421: ST_TO_ADDR
9422: LD_EXP 56
9426: PPUSH
9427: CALL 12696 0 1
9431: PUSH
9432: FOR_TO
9433: IFFALSE 9551
// begin if minersList [ i ] = oldId then
9435: LD_EXP 56
9439: PUSH
9440: LD_VAR 0 6
9444: ARRAY
9445: PUSH
9446: LD_VAR 0 2
9450: EQUAL
9451: IFFALSE 9549
// begin for j := 1 to minerMinesList [ i ] do
9453: LD_ADDR_VAR 0 7
9457: PUSH
9458: DOUBLE
9459: LD_INT 1
9461: DEC
9462: ST_TO_ADDR
9463: LD_EXP 57
9467: PUSH
9468: LD_VAR 0 6
9472: ARRAY
9473: PUSH
9474: FOR_TO
9475: IFFALSE 9525
// RemoveMineXY ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
9477: LD_EXP 57
9481: PUSH
9482: LD_VAR 0 6
9486: ARRAY
9487: PUSH
9488: LD_VAR 0 7
9492: ARRAY
9493: PUSH
9494: LD_INT 1
9496: ARRAY
9497: PPUSH
9498: LD_EXP 57
9502: PUSH
9503: LD_VAR 0 6
9507: ARRAY
9508: PUSH
9509: LD_VAR 0 7
9513: ARRAY
9514: PUSH
9515: LD_INT 2
9517: ARRAY
9518: PPUSH
9519: CALL_OW 612
9523: GO 9474
9525: POP
9526: POP
// minerMinesList := Delete ( minerMinesList , i ) ;
9527: LD_ADDR_EXP 57
9531: PUSH
9532: LD_EXP 57
9536: PPUSH
9537: LD_VAR 0 6
9541: PPUSH
9542: CALL_OW 3
9546: ST_TO_ADDR
// break ;
9547: GO 9551
// end ; end ;
9549: GO 9432
9551: POP
9552: POP
// minersList := minersList diff oldId ;
9553: LD_ADDR_EXP 56
9557: PUSH
9558: LD_EXP 56
9562: PUSH
9563: LD_VAR 0 2
9567: DIFF
9568: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , GetSide ( unit ) ] , [ f_weapon , ar_miner ] ] ) > 1 then
9569: LD_INT 22
9571: PUSH
9572: LD_VAR 0 4
9576: PPUSH
9577: CALL_OW 255
9581: PUSH
9582: EMPTY
9583: LIST
9584: LIST
9585: PUSH
9586: LD_INT 34
9588: PUSH
9589: LD_INT 81
9591: PUSH
9592: EMPTY
9593: LIST
9594: LIST
9595: PUSH
9596: EMPTY
9597: LIST
9598: LIST
9599: PPUSH
9600: CALL_OW 69
9604: PUSH
9605: LD_INT 1
9607: GREATER
9608: IFFALSE 9635
// begin ComExit ( unit ) ;
9610: LD_VAR 0 4
9614: PPUSH
9615: CALL 49060 0 1
// SetSide ( newId , oldSide ) ;
9619: LD_VAR 0 1
9623: PPUSH
9624: LD_VAR 0 3
9628: PPUSH
9629: CALL_OW 235
// exit ;
9633: GO 9690
// end ; minersList := Replace ( minersList , minersList + 1 , newId ) ;
9635: LD_ADDR_EXP 56
9639: PUSH
9640: LD_EXP 56
9644: PPUSH
9645: LD_EXP 56
9649: PUSH
9650: LD_INT 1
9652: PLUS
9653: PPUSH
9654: LD_VAR 0 1
9658: PPUSH
9659: CALL_OW 1
9663: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
9664: LD_ADDR_EXP 57
9668: PUSH
9669: LD_EXP 57
9673: PPUSH
9674: LD_EXP 57
9678: PUSH
9679: LD_INT 1
9681: PLUS
9682: PPUSH
9683: EMPTY
9684: PPUSH
9685: CALL_OW 1
9689: ST_TO_ADDR
// end ; end ; end_of_file
9690: LD_VAR 0 5
9694: RET
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeNormal do var i , canWin ;
9695: LD_EXP 39
9699: IFFALSE 9707
9701: PUSH
9702: CALL 9917 0 0
9706: AND
9707: IFFALSE 9715
9709: PUSH
9710: LD_OWVAR 4
9714: AND
9715: IFFALSE 9914
9717: GO 9719
9719: DISABLE
9720: LD_INT 0
9722: PPUSH
9723: PPUSH
// begin canWin := false ;
9724: LD_ADDR_VAR 0 2
9728: PUSH
9729: LD_INT 0
9731: ST_TO_ADDR
// if not HasPower ( your_side ) then
9732: LD_OWVAR 2
9736: PPUSH
9737: CALL 9959 0 1
9741: NOT
9742: IFFALSE 9753
// begin Multiplayer_Loose_Message ;
9744: CALL_OW 521
// enable ( mpLose ) ;
9748: LD_INT 102
9750: ENABLE_MARKED
// end else
9751: GO 9914
// begin canWin := true ;
9753: LD_ADDR_VAR 0 2
9757: PUSH
9758: LD_INT 1
9760: ST_TO_ADDR
// for i := 1 to 8 do
9761: LD_ADDR_VAR 0 1
9765: PUSH
9766: DOUBLE
9767: LD_INT 1
9769: DEC
9770: ST_TO_ADDR
9771: LD_INT 8
9773: PUSH
9774: FOR_TO
9775: IFFALSE 9900
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
9777: LD_EXP 7
9781: PUSH
9782: LD_VAR 0 1
9786: ARRAY
9787: IFFALSE 9800
9789: PUSH
9790: LD_VAR 0 1
9794: PPUSH
9795: CALL_OW 108
9799: AND
9800: IFFALSE 9814
9802: PUSH
9803: LD_VAR 0 1
9807: PUSH
9808: LD_OWVAR 2
9812: NONEQUAL
9813: AND
9814: IFFALSE 9898
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
9816: LD_EXP 8
9820: PUSH
9821: LD_VAR 0 1
9825: ARRAY
9826: NOT
9827: IFTRUE 9875
9829: PUSH
9830: LD_EXP 8
9834: PUSH
9835: LD_VAR 0 1
9839: ARRAY
9840: PUSH
9841: LD_EXP 8
9845: PUSH
9846: LD_OWVAR 2
9850: ARRAY
9851: NONEQUAL
9852: IFFALSE 9874
9854: PUSH
9855: LD_OWVAR 2
9859: PPUSH
9860: LD_VAR 0 1
9864: PPUSH
9865: CALL_OW 81
9869: PUSH
9870: LD_INT 1
9872: NONEQUAL
9873: AND
9874: OR
9875: IFFALSE 9898
// if HasPower ( i ) then
9877: LD_VAR 0 1
9881: PPUSH
9882: CALL 9959 0 1
9886: IFFALSE 9898
// begin canWin := false ;
9888: LD_ADDR_VAR 0 2
9892: PUSH
9893: LD_INT 0
9895: ST_TO_ADDR
// break ;
9896: GO 9900
// end ;
9898: GO 9774
9900: POP
9901: POP
// if canWin then
9902: LD_VAR 0 2
9906: IFFALSE 9913
// enable ( mpWin ) else
9908: LD_INT 101
9910: ENABLE_MARKED
9911: GO 9914
// enable ;
9913: ENABLE
// end ; end ;
9914: PPOPN 2
9916: END
// function CanWinLoose ; begin
9917: LD_INT 0
9919: PPUSH
// result := true ;
9920: LD_ADDR_VAR 0 1
9924: PUSH
9925: LD_INT 1
9927: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
9928: CALL_OW 531
9932: IFFALSE 9944
9934: PUSH
9935: CALL_OW 519
9939: PUSH
9940: LD_INT 1
9942: GREATER
9943: AND
9944: IFFALSE 9954
// result := false ;
9946: LD_ADDR_VAR 0 1
9950: PUSH
9951: LD_INT 0
9953: ST_TO_ADDR
// end ;
9954: LD_VAR 0 1
9958: RET
// function HasPower ( i ) ; begin
9959: LD_INT 0
9961: PPUSH
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
9962: LD_ADDR_VAR 0 2
9966: PUSH
9967: LD_INT 22
9969: PUSH
9970: LD_VAR 0 1
9974: PUSH
9975: EMPTY
9976: LIST
9977: LIST
9978: PUSH
9979: LD_INT 2
9981: PUSH
9982: LD_INT 21
9984: PUSH
9985: LD_INT 1
9987: PUSH
9988: EMPTY
9989: LIST
9990: LIST
9991: PUSH
9992: LD_INT 33
9994: PUSH
9995: LD_INT 3
9997: PUSH
9998: EMPTY
9999: LIST
10000: LIST
10001: PUSH
10002: LD_INT 33
10004: PUSH
10005: LD_INT 5
10007: PUSH
10008: EMPTY
10009: LIST
10010: LIST
10011: PUSH
10012: EMPTY
10013: LIST
10014: LIST
10015: LIST
10016: LIST
10017: PUSH
10018: EMPTY
10019: LIST
10020: LIST
10021: PPUSH
10022: CALL_OW 69
10026: ST_TO_ADDR
// end ; end_of_file
10027: LD_VAR 0 2
10031: RET
// every 0 0$1 trigger mpGameActive marked GameTypeSurvival do var i ;
10032: LD_EXP 39
10036: IFFALSE 10079
10038: GO 10040
10040: DISABLE
10041: LD_INT 0
10043: PPUSH
// begin for i := 1 to 8 do
10044: LD_ADDR_VAR 0 1
10048: PUSH
10049: DOUBLE
10050: LD_INT 1
10052: DEC
10053: ST_TO_ADDR
10054: LD_INT 8
10056: PUSH
10057: FOR_TO
10058: IFFALSE 10077
// SetRestrict ( b_depot , i , state_disabled ) ;
10060: LD_INT 0
10062: PPUSH
10063: LD_VAR 0 1
10067: PPUSH
10068: LD_INT 0
10070: PPUSH
10071: CALL_OW 324
10075: GO 10057
10077: POP
10078: POP
// end ;
10079: PPOPN 1
10081: END
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeSurvival do var i , canWin ;
10082: LD_EXP 39
10086: IFFALSE 10094
10088: PUSH
10089: CALL 10304 0 0
10093: AND
10094: IFFALSE 10102
10096: PUSH
10097: LD_OWVAR 4
10101: AND
10102: IFFALSE 10301
10104: GO 10106
10106: DISABLE
10107: LD_INT 0
10109: PPUSH
10110: PPUSH
// begin canWin := false ;
10111: LD_ADDR_VAR 0 2
10115: PUSH
10116: LD_INT 0
10118: ST_TO_ADDR
// if not HasPower ( your_side ) then
10119: LD_OWVAR 2
10123: PPUSH
10124: CALL 10346 0 1
10128: NOT
10129: IFFALSE 10140
// begin Multiplayer_Loose_Message ;
10131: CALL_OW 521
// enable ( mpLose ) ;
10135: LD_INT 102
10137: ENABLE_MARKED
// end else
10138: GO 10301
// begin canWin := true ;
10140: LD_ADDR_VAR 0 2
10144: PUSH
10145: LD_INT 1
10147: ST_TO_ADDR
// for i := 1 to 8 do
10148: LD_ADDR_VAR 0 1
10152: PUSH
10153: DOUBLE
10154: LD_INT 1
10156: DEC
10157: ST_TO_ADDR
10158: LD_INT 8
10160: PUSH
10161: FOR_TO
10162: IFFALSE 10287
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
10164: LD_EXP 7
10168: PUSH
10169: LD_VAR 0 1
10173: ARRAY
10174: IFFALSE 10187
10176: PUSH
10177: LD_VAR 0 1
10181: PPUSH
10182: CALL_OW 108
10186: AND
10187: IFFALSE 10201
10189: PUSH
10190: LD_VAR 0 1
10194: PUSH
10195: LD_OWVAR 2
10199: NONEQUAL
10200: AND
10201: IFFALSE 10285
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
10203: LD_EXP 8
10207: PUSH
10208: LD_VAR 0 1
10212: ARRAY
10213: NOT
10214: IFTRUE 10262
10216: PUSH
10217: LD_EXP 8
10221: PUSH
10222: LD_VAR 0 1
10226: ARRAY
10227: PUSH
10228: LD_EXP 8
10232: PUSH
10233: LD_OWVAR 2
10237: ARRAY
10238: NONEQUAL
10239: IFFALSE 10261
10241: PUSH
10242: LD_OWVAR 2
10246: PPUSH
10247: LD_VAR 0 1
10251: PPUSH
10252: CALL_OW 81
10256: PUSH
10257: LD_INT 1
10259: NONEQUAL
10260: AND
10261: OR
10262: IFFALSE 10285
// if HasPower ( i ) then
10264: LD_VAR 0 1
10268: PPUSH
10269: CALL 10346 0 1
10273: IFFALSE 10285
// begin canWin := false ;
10275: LD_ADDR_VAR 0 2
10279: PUSH
10280: LD_INT 0
10282: ST_TO_ADDR
// break ;
10283: GO 10287
// end ;
10285: GO 10161
10287: POP
10288: POP
// if canWin then
10289: LD_VAR 0 2
10293: IFFALSE 10300
// enable ( mpWin ) else
10295: LD_INT 101
10297: ENABLE_MARKED
10298: GO 10301
// enable ;
10300: ENABLE
// end ; end ;
10301: PPOPN 2
10303: END
// function CanWinLoose ; begin
10304: LD_INT 0
10306: PPUSH
// result := true ;
10307: LD_ADDR_VAR 0 1
10311: PUSH
10312: LD_INT 1
10314: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
10315: CALL_OW 531
10319: IFFALSE 10331
10321: PUSH
10322: CALL_OW 519
10326: PUSH
10327: LD_INT 1
10329: GREATER
10330: AND
10331: IFFALSE 10341
// result := false ;
10333: LD_ADDR_VAR 0 1
10337: PUSH
10338: LD_INT 0
10340: ST_TO_ADDR
// end ;
10341: LD_VAR 0 1
10345: RET
// function HasPower ( i ) ; begin
10346: LD_INT 0
10348: PPUSH
// if not FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) then
10349: LD_INT 22
10351: PUSH
10352: LD_VAR 0 1
10356: PUSH
10357: EMPTY
10358: LIST
10359: LIST
10360: PUSH
10361: LD_INT 2
10363: PUSH
10364: LD_INT 30
10366: PUSH
10367: LD_INT 0
10369: PUSH
10370: EMPTY
10371: LIST
10372: LIST
10373: PUSH
10374: LD_INT 30
10376: PUSH
10377: LD_INT 1
10379: PUSH
10380: EMPTY
10381: LIST
10382: LIST
10383: PUSH
10384: EMPTY
10385: LIST
10386: LIST
10387: LIST
10388: PUSH
10389: EMPTY
10390: LIST
10391: LIST
10392: PPUSH
10393: CALL_OW 69
10397: NOT
10398: IFFALSE 10402
// exit ;
10400: GO 10467
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
10402: LD_ADDR_VAR 0 2
10406: PUSH
10407: LD_INT 22
10409: PUSH
10410: LD_VAR 0 1
10414: PUSH
10415: EMPTY
10416: LIST
10417: LIST
10418: PUSH
10419: LD_INT 2
10421: PUSH
10422: LD_INT 21
10424: PUSH
10425: LD_INT 1
10427: PUSH
10428: EMPTY
10429: LIST
10430: LIST
10431: PUSH
10432: LD_INT 33
10434: PUSH
10435: LD_INT 3
10437: PUSH
10438: EMPTY
10439: LIST
10440: LIST
10441: PUSH
10442: LD_INT 33
10444: PUSH
10445: LD_INT 5
10447: PUSH
10448: EMPTY
10449: LIST
10450: LIST
10451: PUSH
10452: EMPTY
10453: LIST
10454: LIST
10455: LIST
10456: LIST
10457: PUSH
10458: EMPTY
10459: LIST
10460: LIST
10461: PPUSH
10462: CALL_OW 69
10466: ST_TO_ADDR
// end ; end_of_file
10467: LD_VAR 0 2
10471: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
10472: LD_INT 0
10474: PPUSH
10475: PPUSH
// if exist_mode then
10476: LD_VAR 0 2
10480: IFFALSE 10526
// begin unit := CreateCharacter ( prefix & ident ) ;
10482: LD_ADDR_VAR 0 5
10486: PUSH
10487: LD_VAR 0 3
10491: PUSH
10492: LD_VAR 0 1
10496: STR
10497: PPUSH
10498: CALL_OW 34
10502: ST_TO_ADDR
// if unit then
10503: LD_VAR 0 5
10507: IFFALSE 10524
// DeleteCharacters ( prefix & ident ) ;
10509: LD_VAR 0 3
10513: PUSH
10514: LD_VAR 0 1
10518: STR
10519: PPUSH
10520: CALL_OW 40
// end else
10524: GO 10541
// unit := NewCharacter ( ident ) ;
10526: LD_ADDR_VAR 0 5
10530: PUSH
10531: LD_VAR 0 1
10535: PPUSH
10536: CALL_OW 25
10540: ST_TO_ADDR
// result := unit ;
10541: LD_ADDR_VAR 0 4
10545: PUSH
10546: LD_VAR 0 5
10550: ST_TO_ADDR
// end ;
10551: LD_VAR 0 4
10555: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
10556: LD_INT 0
10558: PPUSH
10559: PPUSH
// if exist_mode then
10560: LD_VAR 0 2
10564: IFFALSE 10589
// unit := CreateCharacter ( prefix & ident ) else
10566: LD_ADDR_VAR 0 5
10570: PUSH
10571: LD_VAR 0 3
10575: PUSH
10576: LD_VAR 0 1
10580: STR
10581: PPUSH
10582: CALL_OW 34
10586: ST_TO_ADDR
10587: GO 10604
// unit := NewCharacter ( ident ) ;
10589: LD_ADDR_VAR 0 5
10593: PUSH
10594: LD_VAR 0 1
10598: PPUSH
10599: CALL_OW 25
10603: ST_TO_ADDR
// result := unit ;
10604: LD_ADDR_VAR 0 4
10608: PUSH
10609: LD_VAR 0 5
10613: ST_TO_ADDR
// end ;
10614: LD_VAR 0 4
10618: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
10619: LD_INT 0
10621: PPUSH
10622: PPUSH
// if not side or not nation then
10623: LD_VAR 0 1
10627: NOT
10628: IFTRUE 10637
10630: PUSH
10631: LD_VAR 0 2
10635: NOT
10636: OR
10637: IFFALSE 10641
// exit ;
10639: GO 11435
// case nation of nation_american :
10641: LD_VAR 0 2
10645: PUSH
10646: LD_INT 1
10648: DOUBLE
10649: EQUAL
10650: IFTRUE 10654
10652: GO 10876
10654: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 , 90 , 93 ] ; nation_arabian :
10655: LD_ADDR_VAR 0 4
10659: PUSH
10660: LD_INT 35
10662: PUSH
10663: LD_INT 45
10665: PUSH
10666: LD_INT 46
10668: PUSH
10669: LD_INT 47
10671: PUSH
10672: LD_INT 82
10674: PUSH
10675: LD_INT 83
10677: PUSH
10678: LD_INT 84
10680: PUSH
10681: LD_INT 85
10683: PUSH
10684: LD_INT 86
10686: PUSH
10687: LD_INT 1
10689: PUSH
10690: LD_INT 2
10692: PUSH
10693: LD_INT 6
10695: PUSH
10696: LD_INT 15
10698: PUSH
10699: LD_INT 16
10701: PUSH
10702: LD_INT 7
10704: PUSH
10705: LD_INT 12
10707: PUSH
10708: LD_INT 13
10710: PUSH
10711: LD_INT 10
10713: PUSH
10714: LD_INT 14
10716: PUSH
10717: LD_INT 20
10719: PUSH
10720: LD_INT 21
10722: PUSH
10723: LD_INT 22
10725: PUSH
10726: LD_INT 25
10728: PUSH
10729: LD_INT 32
10731: PUSH
10732: LD_INT 27
10734: PUSH
10735: LD_INT 36
10737: PUSH
10738: LD_INT 69
10740: PUSH
10741: LD_INT 39
10743: PUSH
10744: LD_INT 34
10746: PUSH
10747: LD_INT 40
10749: PUSH
10750: LD_INT 48
10752: PUSH
10753: LD_INT 49
10755: PUSH
10756: LD_INT 50
10758: PUSH
10759: LD_INT 51
10761: PUSH
10762: LD_INT 52
10764: PUSH
10765: LD_INT 53
10767: PUSH
10768: LD_INT 54
10770: PUSH
10771: LD_INT 55
10773: PUSH
10774: LD_INT 56
10776: PUSH
10777: LD_INT 57
10779: PUSH
10780: LD_INT 58
10782: PUSH
10783: LD_INT 59
10785: PUSH
10786: LD_INT 60
10788: PUSH
10789: LD_INT 61
10791: PUSH
10792: LD_INT 62
10794: PUSH
10795: LD_INT 80
10797: PUSH
10798: LD_INT 82
10800: PUSH
10801: LD_INT 83
10803: PUSH
10804: LD_INT 84
10806: PUSH
10807: LD_INT 85
10809: PUSH
10810: LD_INT 86
10812: PUSH
10813: LD_INT 90
10815: PUSH
10816: LD_INT 93
10818: PUSH
10819: EMPTY
10820: LIST
10821: LIST
10822: LIST
10823: LIST
10824: LIST
10825: LIST
10826: LIST
10827: LIST
10828: LIST
10829: LIST
10830: LIST
10831: LIST
10832: LIST
10833: LIST
10834: LIST
10835: LIST
10836: LIST
10837: LIST
10838: LIST
10839: LIST
10840: LIST
10841: LIST
10842: LIST
10843: LIST
10844: LIST
10845: LIST
10846: LIST
10847: LIST
10848: LIST
10849: LIST
10850: LIST
10851: LIST
10852: LIST
10853: LIST
10854: LIST
10855: LIST
10856: LIST
10857: LIST
10858: LIST
10859: LIST
10860: LIST
10861: LIST
10862: LIST
10863: LIST
10864: LIST
10865: LIST
10866: LIST
10867: LIST
10868: LIST
10869: LIST
10870: LIST
10871: LIST
10872: LIST
10873: ST_TO_ADDR
10874: GO 11357
10876: LD_INT 2
10878: DOUBLE
10879: EQUAL
10880: IFTRUE 10884
10882: GO 11118
10884: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 , 92 , 94 ] ; nation_russian :
10885: LD_ADDR_VAR 0 4
10889: PUSH
10890: LD_INT 35
10892: PUSH
10893: LD_INT 45
10895: PUSH
10896: LD_INT 46
10898: PUSH
10899: LD_INT 47
10901: PUSH
10902: LD_INT 82
10904: PUSH
10905: LD_INT 83
10907: PUSH
10908: LD_INT 84
10910: PUSH
10911: LD_INT 85
10913: PUSH
10914: LD_INT 87
10916: PUSH
10917: LD_INT 70
10919: PUSH
10920: LD_INT 1
10922: PUSH
10923: LD_INT 11
10925: PUSH
10926: LD_INT 3
10928: PUSH
10929: LD_INT 4
10931: PUSH
10932: LD_INT 5
10934: PUSH
10935: LD_INT 6
10937: PUSH
10938: LD_INT 15
10940: PUSH
10941: LD_INT 18
10943: PUSH
10944: LD_INT 7
10946: PUSH
10947: LD_INT 17
10949: PUSH
10950: LD_INT 8
10952: PUSH
10953: LD_INT 20
10955: PUSH
10956: LD_INT 21
10958: PUSH
10959: LD_INT 22
10961: PUSH
10962: LD_INT 72
10964: PUSH
10965: LD_INT 26
10967: PUSH
10968: LD_INT 69
10970: PUSH
10971: LD_INT 39
10973: PUSH
10974: LD_INT 40
10976: PUSH
10977: LD_INT 41
10979: PUSH
10980: LD_INT 42
10982: PUSH
10983: LD_INT 43
10985: PUSH
10986: LD_INT 48
10988: PUSH
10989: LD_INT 49
10991: PUSH
10992: LD_INT 50
10994: PUSH
10995: LD_INT 51
10997: PUSH
10998: LD_INT 52
11000: PUSH
11001: LD_INT 53
11003: PUSH
11004: LD_INT 54
11006: PUSH
11007: LD_INT 55
11009: PUSH
11010: LD_INT 56
11012: PUSH
11013: LD_INT 60
11015: PUSH
11016: LD_INT 61
11018: PUSH
11019: LD_INT 62
11021: PUSH
11022: LD_INT 66
11024: PUSH
11025: LD_INT 67
11027: PUSH
11028: LD_INT 68
11030: PUSH
11031: LD_INT 81
11033: PUSH
11034: LD_INT 82
11036: PUSH
11037: LD_INT 83
11039: PUSH
11040: LD_INT 84
11042: PUSH
11043: LD_INT 85
11045: PUSH
11046: LD_INT 87
11048: PUSH
11049: LD_INT 88
11051: PUSH
11052: LD_INT 92
11054: PUSH
11055: LD_INT 94
11057: PUSH
11058: EMPTY
11059: LIST
11060: LIST
11061: LIST
11062: LIST
11063: LIST
11064: LIST
11065: LIST
11066: LIST
11067: LIST
11068: LIST
11069: LIST
11070: LIST
11071: LIST
11072: LIST
11073: LIST
11074: LIST
11075: LIST
11076: LIST
11077: LIST
11078: LIST
11079: LIST
11080: LIST
11081: LIST
11082: LIST
11083: LIST
11084: LIST
11085: LIST
11086: LIST
11087: LIST
11088: LIST
11089: LIST
11090: LIST
11091: LIST
11092: LIST
11093: LIST
11094: LIST
11095: LIST
11096: LIST
11097: LIST
11098: LIST
11099: LIST
11100: LIST
11101: LIST
11102: LIST
11103: LIST
11104: LIST
11105: LIST
11106: LIST
11107: LIST
11108: LIST
11109: LIST
11110: LIST
11111: LIST
11112: LIST
11113: LIST
11114: LIST
11115: ST_TO_ADDR
11116: GO 11357
11118: LD_INT 3
11120: DOUBLE
11121: EQUAL
11122: IFTRUE 11126
11124: GO 11356
11126: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 , 89 , 91 ] ; end ;
11127: LD_ADDR_VAR 0 4
11131: PUSH
11132: LD_INT 46
11134: PUSH
11135: LD_INT 47
11137: PUSH
11138: LD_INT 1
11140: PUSH
11141: LD_INT 2
11143: PUSH
11144: LD_INT 82
11146: PUSH
11147: LD_INT 83
11149: PUSH
11150: LD_INT 84
11152: PUSH
11153: LD_INT 85
11155: PUSH
11156: LD_INT 86
11158: PUSH
11159: LD_INT 11
11161: PUSH
11162: LD_INT 9
11164: PUSH
11165: LD_INT 20
11167: PUSH
11168: LD_INT 19
11170: PUSH
11171: LD_INT 21
11173: PUSH
11174: LD_INT 24
11176: PUSH
11177: LD_INT 22
11179: PUSH
11180: LD_INT 25
11182: PUSH
11183: LD_INT 28
11185: PUSH
11186: LD_INT 29
11188: PUSH
11189: LD_INT 30
11191: PUSH
11192: LD_INT 31
11194: PUSH
11195: LD_INT 37
11197: PUSH
11198: LD_INT 38
11200: PUSH
11201: LD_INT 32
11203: PUSH
11204: LD_INT 27
11206: PUSH
11207: LD_INT 33
11209: PUSH
11210: LD_INT 69
11212: PUSH
11213: LD_INT 39
11215: PUSH
11216: LD_INT 34
11218: PUSH
11219: LD_INT 40
11221: PUSH
11222: LD_INT 71
11224: PUSH
11225: LD_INT 23
11227: PUSH
11228: LD_INT 44
11230: PUSH
11231: LD_INT 48
11233: PUSH
11234: LD_INT 49
11236: PUSH
11237: LD_INT 50
11239: PUSH
11240: LD_INT 51
11242: PUSH
11243: LD_INT 52
11245: PUSH
11246: LD_INT 53
11248: PUSH
11249: LD_INT 54
11251: PUSH
11252: LD_INT 55
11254: PUSH
11255: LD_INT 56
11257: PUSH
11258: LD_INT 57
11260: PUSH
11261: LD_INT 58
11263: PUSH
11264: LD_INT 59
11266: PUSH
11267: LD_INT 63
11269: PUSH
11270: LD_INT 64
11272: PUSH
11273: LD_INT 65
11275: PUSH
11276: LD_INT 82
11278: PUSH
11279: LD_INT 83
11281: PUSH
11282: LD_INT 84
11284: PUSH
11285: LD_INT 85
11287: PUSH
11288: LD_INT 86
11290: PUSH
11291: LD_INT 89
11293: PUSH
11294: LD_INT 91
11296: PUSH
11297: EMPTY
11298: LIST
11299: LIST
11300: LIST
11301: LIST
11302: LIST
11303: LIST
11304: LIST
11305: LIST
11306: LIST
11307: LIST
11308: LIST
11309: LIST
11310: LIST
11311: LIST
11312: LIST
11313: LIST
11314: LIST
11315: LIST
11316: LIST
11317: LIST
11318: LIST
11319: LIST
11320: LIST
11321: LIST
11322: LIST
11323: LIST
11324: LIST
11325: LIST
11326: LIST
11327: LIST
11328: LIST
11329: LIST
11330: LIST
11331: LIST
11332: LIST
11333: LIST
11334: LIST
11335: LIST
11336: LIST
11337: LIST
11338: LIST
11339: LIST
11340: LIST
11341: LIST
11342: LIST
11343: LIST
11344: LIST
11345: LIST
11346: LIST
11347: LIST
11348: LIST
11349: LIST
11350: LIST
11351: LIST
11352: LIST
11353: ST_TO_ADDR
11354: GO 11357
11356: POP
// if state > - 1 and state < 3 then
11357: LD_VAR 0 3
11361: PUSH
11362: LD_INT 1
11364: NEG
11365: GREATER
11366: IFFALSE 11378
11368: PUSH
11369: LD_VAR 0 3
11373: PUSH
11374: LD_INT 3
11376: LESS
11377: AND
11378: IFFALSE 11435
// for i in result do
11380: LD_ADDR_VAR 0 5
11384: PUSH
11385: LD_VAR 0 4
11389: PUSH
11390: FOR_IN
11391: IFFALSE 11433
// if GetTech ( i , side ) <> state then
11393: LD_VAR 0 5
11397: PPUSH
11398: LD_VAR 0 1
11402: PPUSH
11403: CALL_OW 321
11407: PUSH
11408: LD_VAR 0 3
11412: NONEQUAL
11413: IFFALSE 11431
// result := result diff i ;
11415: LD_ADDR_VAR 0 4
11419: PUSH
11420: LD_VAR 0 4
11424: PUSH
11425: LD_VAR 0 5
11429: DIFF
11430: ST_TO_ADDR
11431: GO 11390
11433: POP
11434: POP
// end ;
11435: LD_VAR 0 4
11439: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
11440: LD_INT 0
11442: PPUSH
11443: PPUSH
11444: PPUSH
// result := true ;
11445: LD_ADDR_VAR 0 3
11449: PUSH
11450: LD_INT 1
11452: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
11453: LD_ADDR_VAR 0 5
11457: PUSH
11458: LD_VAR 0 2
11462: PPUSH
11463: CALL_OW 480
11467: ST_TO_ADDR
// if not tmp then
11468: LD_VAR 0 5
11472: NOT
11473: IFFALSE 11477
// exit ;
11475: GO 11526
// for i in tmp do
11477: LD_ADDR_VAR 0 4
11481: PUSH
11482: LD_VAR 0 5
11486: PUSH
11487: FOR_IN
11488: IFFALSE 11524
// if GetTech ( i , side ) <> state_researched then
11490: LD_VAR 0 4
11494: PPUSH
11495: LD_VAR 0 1
11499: PPUSH
11500: CALL_OW 321
11504: PUSH
11505: LD_INT 2
11507: NONEQUAL
11508: IFFALSE 11522
// begin result := false ;
11510: LD_ADDR_VAR 0 3
11514: PUSH
11515: LD_INT 0
11517: ST_TO_ADDR
// exit ;
11518: POP
11519: POP
11520: GO 11526
// end ;
11522: GO 11487
11524: POP
11525: POP
// end ;
11526: LD_VAR 0 3
11530: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
11531: LD_INT 0
11533: PPUSH
11534: PPUSH
11535: PPUSH
11536: PPUSH
11537: PPUSH
11538: PPUSH
11539: PPUSH
11540: PPUSH
11541: PPUSH
11542: PPUSH
11543: PPUSH
11544: PPUSH
11545: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
11546: LD_VAR 0 1
11550: NOT
11551: IFTRUE 11568
11553: PUSH
11554: LD_VAR 0 1
11558: PPUSH
11559: CALL_OW 257
11563: PUSH
11564: LD_INT 9
11566: NONEQUAL
11567: OR
11568: IFFALSE 11572
// exit ;
11570: GO 12151
// side := GetSide ( unit ) ;
11572: LD_ADDR_VAR 0 9
11576: PUSH
11577: LD_VAR 0 1
11581: PPUSH
11582: CALL_OW 255
11586: ST_TO_ADDR
// tech_space := tech_spacanom ;
11587: LD_ADDR_VAR 0 12
11591: PUSH
11592: LD_INT 29
11594: ST_TO_ADDR
// tech_time := tech_taurad ;
11595: LD_ADDR_VAR 0 13
11599: PUSH
11600: LD_INT 28
11602: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
11603: LD_ADDR_VAR 0 11
11607: PUSH
11608: LD_VAR 0 1
11612: PPUSH
11613: CALL_OW 310
11617: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
11618: LD_VAR 0 11
11622: PPUSH
11623: CALL_OW 247
11627: PUSH
11628: LD_INT 2
11630: EQUAL
11631: IFFALSE 11635
// exit ;
11633: GO 12151
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
11635: LD_ADDR_VAR 0 8
11639: PUSH
11640: LD_INT 81
11642: PUSH
11643: LD_VAR 0 9
11647: PUSH
11648: EMPTY
11649: LIST
11650: LIST
11651: PUSH
11652: LD_INT 3
11654: PUSH
11655: LD_INT 21
11657: PUSH
11658: LD_INT 3
11660: PUSH
11661: EMPTY
11662: LIST
11663: LIST
11664: PUSH
11665: EMPTY
11666: LIST
11667: LIST
11668: PUSH
11669: EMPTY
11670: LIST
11671: LIST
11672: PPUSH
11673: CALL_OW 69
11677: ST_TO_ADDR
// if not tmp then
11678: LD_VAR 0 8
11682: NOT
11683: IFFALSE 11687
// exit ;
11685: GO 12151
// if in_unit then
11687: LD_VAR 0 11
11691: IFFALSE 11715
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
11693: LD_ADDR_VAR 0 10
11697: PUSH
11698: LD_VAR 0 8
11702: PPUSH
11703: LD_VAR 0 11
11707: PPUSH
11708: CALL_OW 74
11712: ST_TO_ADDR
11713: GO 11735
// enemy := NearestUnitToUnit ( tmp , unit ) ;
11715: LD_ADDR_VAR 0 10
11719: PUSH
11720: LD_VAR 0 8
11724: PPUSH
11725: LD_VAR 0 1
11729: PPUSH
11730: CALL_OW 74
11734: ST_TO_ADDR
// if not enemy then
11735: LD_VAR 0 10
11739: NOT
11740: IFFALSE 11744
// exit ;
11742: GO 12151
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
11744: LD_VAR 0 11
11748: IFFALSE 11770
11750: PUSH
11751: LD_VAR 0 11
11755: PPUSH
11756: LD_VAR 0 10
11760: PPUSH
11761: CALL_OW 296
11765: PUSH
11766: LD_INT 13
11768: GREATER
11769: AND
11770: IFTRUE 11792
11772: PUSH
11773: LD_VAR 0 1
11777: PPUSH
11778: LD_VAR 0 10
11782: PPUSH
11783: CALL_OW 296
11787: PUSH
11788: LD_INT 12
11790: GREATER
11791: OR
11792: IFFALSE 11796
// exit ;
11794: GO 12151
// missile := [ 1 ] ;
11796: LD_ADDR_VAR 0 14
11800: PUSH
11801: LD_INT 1
11803: PUSH
11804: EMPTY
11805: LIST
11806: ST_TO_ADDR
// if Researched ( side , tech_space ) then
11807: LD_VAR 0 9
11811: PPUSH
11812: LD_VAR 0 12
11816: PPUSH
11817: CALL_OW 325
11821: IFFALSE 11850
// missile := Replace ( missile , missile + 1 , 2 ) ;
11823: LD_ADDR_VAR 0 14
11827: PUSH
11828: LD_VAR 0 14
11832: PPUSH
11833: LD_VAR 0 14
11837: PUSH
11838: LD_INT 1
11840: PLUS
11841: PPUSH
11842: LD_INT 2
11844: PPUSH
11845: CALL_OW 1
11849: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
11850: LD_VAR 0 9
11854: PPUSH
11855: LD_VAR 0 13
11859: PPUSH
11860: CALL_OW 325
11864: IFFALSE 11888
11866: PUSH
11867: LD_VAR 0 10
11871: PPUSH
11872: CALL_OW 255
11876: PPUSH
11877: LD_VAR 0 13
11881: PPUSH
11882: CALL_OW 325
11886: NOT
11887: AND
11888: IFFALSE 11917
// missile := Replace ( missile , missile + 1 , 3 ) ;
11890: LD_ADDR_VAR 0 14
11894: PUSH
11895: LD_VAR 0 14
11899: PPUSH
11900: LD_VAR 0 14
11904: PUSH
11905: LD_INT 1
11907: PLUS
11908: PPUSH
11909: LD_INT 3
11911: PPUSH
11912: CALL_OW 1
11916: ST_TO_ADDR
// if missile < 2 then
11917: LD_VAR 0 14
11921: PUSH
11922: LD_INT 2
11924: LESS
11925: IFFALSE 11929
// exit ;
11927: GO 12151
// x := GetX ( enemy ) ;
11929: LD_ADDR_VAR 0 4
11933: PUSH
11934: LD_VAR 0 10
11938: PPUSH
11939: CALL_OW 250
11943: ST_TO_ADDR
// y := GetY ( enemy ) ;
11944: LD_ADDR_VAR 0 5
11948: PUSH
11949: LD_VAR 0 10
11953: PPUSH
11954: CALL_OW 251
11958: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
11959: LD_ADDR_VAR 0 6
11963: PUSH
11964: LD_VAR 0 4
11968: PUSH
11969: LD_INT 1
11971: NEG
11972: PPUSH
11973: LD_INT 1
11975: PPUSH
11976: CALL_OW 12
11980: PLUS
11981: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
11982: LD_ADDR_VAR 0 7
11986: PUSH
11987: LD_VAR 0 5
11991: PUSH
11992: LD_INT 1
11994: NEG
11995: PPUSH
11996: LD_INT 1
11998: PPUSH
11999: CALL_OW 12
12003: PLUS
12004: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
12005: LD_VAR 0 6
12009: PPUSH
12010: LD_VAR 0 7
12014: PPUSH
12015: CALL_OW 488
12019: NOT
12020: IFFALSE 12042
// begin _x := x ;
12022: LD_ADDR_VAR 0 6
12026: PUSH
12027: LD_VAR 0 4
12031: ST_TO_ADDR
// _y := y ;
12032: LD_ADDR_VAR 0 7
12036: PUSH
12037: LD_VAR 0 5
12041: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
12042: LD_ADDR_VAR 0 3
12046: PUSH
12047: LD_INT 1
12049: PPUSH
12050: LD_VAR 0 14
12054: PPUSH
12055: CALL_OW 12
12059: ST_TO_ADDR
// case i of 1 :
12060: LD_VAR 0 3
12064: PUSH
12065: LD_INT 1
12067: DOUBLE
12068: EQUAL
12069: IFTRUE 12073
12071: GO 12090
12073: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
12074: LD_VAR 0 1
12078: PPUSH
12079: LD_VAR 0 10
12083: PPUSH
12084: CALL_OW 115
12088: GO 12151
12090: LD_INT 2
12092: DOUBLE
12093: EQUAL
12094: IFTRUE 12098
12096: GO 12120
12098: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
12099: LD_VAR 0 1
12103: PPUSH
12104: LD_VAR 0 6
12108: PPUSH
12109: LD_VAR 0 7
12113: PPUSH
12114: CALL_OW 153
12118: GO 12151
12120: LD_INT 3
12122: DOUBLE
12123: EQUAL
12124: IFTRUE 12128
12126: GO 12150
12128: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
12129: LD_VAR 0 1
12133: PPUSH
12134: LD_VAR 0 6
12138: PPUSH
12139: LD_VAR 0 7
12143: PPUSH
12144: CALL_OW 154
12148: GO 12151
12150: POP
// end ;
12151: LD_VAR 0 2
12155: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
12156: LD_INT 0
12158: PPUSH
12159: PPUSH
12160: PPUSH
12161: PPUSH
12162: PPUSH
12163: PPUSH
// if not unit or not building then
12164: LD_VAR 0 1
12168: NOT
12169: IFTRUE 12178
12171: PUSH
12172: LD_VAR 0 2
12176: NOT
12177: OR
12178: IFFALSE 12182
// exit ;
12180: GO 12340
// x := GetX ( building ) ;
12182: LD_ADDR_VAR 0 5
12186: PUSH
12187: LD_VAR 0 2
12191: PPUSH
12192: CALL_OW 250
12196: ST_TO_ADDR
// y := GetY ( building ) ;
12197: LD_ADDR_VAR 0 6
12201: PUSH
12202: LD_VAR 0 2
12206: PPUSH
12207: CALL_OW 251
12211: ST_TO_ADDR
// for i := 0 to 5 do
12212: LD_ADDR_VAR 0 4
12216: PUSH
12217: DOUBLE
12218: LD_INT 0
12220: DEC
12221: ST_TO_ADDR
12222: LD_INT 5
12224: PUSH
12225: FOR_TO
12226: IFFALSE 12338
// begin _x := ShiftX ( x , i , 3 ) ;
12228: LD_ADDR_VAR 0 7
12232: PUSH
12233: LD_VAR 0 5
12237: PPUSH
12238: LD_VAR 0 4
12242: PPUSH
12243: LD_INT 3
12245: PPUSH
12246: CALL_OW 272
12250: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
12251: LD_ADDR_VAR 0 8
12255: PUSH
12256: LD_VAR 0 6
12260: PPUSH
12261: LD_VAR 0 4
12265: PPUSH
12266: LD_INT 3
12268: PPUSH
12269: CALL_OW 273
12273: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
12274: LD_VAR 0 7
12278: PPUSH
12279: LD_VAR 0 8
12283: PPUSH
12284: CALL_OW 488
12288: NOT
12289: IFFALSE 12293
// continue ;
12291: GO 12225
// if HexInfo ( _x , _y ) = 0 then
12293: LD_VAR 0 7
12297: PPUSH
12298: LD_VAR 0 8
12302: PPUSH
12303: CALL_OW 428
12307: PUSH
12308: LD_INT 0
12310: EQUAL
12311: IFFALSE 12336
// begin ComMoveXY ( unit , _x , _y ) ;
12313: LD_VAR 0 1
12317: PPUSH
12318: LD_VAR 0 7
12322: PPUSH
12323: LD_VAR 0 8
12327: PPUSH
12328: CALL_OW 111
// exit ;
12332: POP
12333: POP
12334: GO 12340
// end ; end ;
12336: GO 12225
12338: POP
12339: POP
// end ;
12340: LD_VAR 0 3
12344: RET
// export function ScanBase ( side , base_area ) ; begin
12345: LD_INT 0
12347: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
12348: LD_ADDR_VAR 0 3
12352: PUSH
12353: LD_VAR 0 2
12357: PPUSH
12358: LD_INT 81
12360: PUSH
12361: LD_VAR 0 1
12365: PUSH
12366: EMPTY
12367: LIST
12368: LIST
12369: PPUSH
12370: CALL_OW 70
12374: ST_TO_ADDR
// end ;
12375: LD_VAR 0 3
12379: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
12380: LD_INT 0
12382: PPUSH
12383: PPUSH
12384: PPUSH
12385: PPUSH
// result := false ;
12386: LD_ADDR_VAR 0 2
12390: PUSH
12391: LD_INT 0
12393: ST_TO_ADDR
// side := GetSide ( unit ) ;
12394: LD_ADDR_VAR 0 3
12398: PUSH
12399: LD_VAR 0 1
12403: PPUSH
12404: CALL_OW 255
12408: ST_TO_ADDR
// nat := GetNation ( unit ) ;
12409: LD_ADDR_VAR 0 4
12413: PUSH
12414: LD_VAR 0 1
12418: PPUSH
12419: CALL_OW 248
12423: ST_TO_ADDR
// case nat of 1 :
12424: LD_VAR 0 4
12428: PUSH
12429: LD_INT 1
12431: DOUBLE
12432: EQUAL
12433: IFTRUE 12437
12435: GO 12448
12437: POP
// tech := tech_lassight ; 2 :
12438: LD_ADDR_VAR 0 5
12442: PUSH
12443: LD_INT 12
12445: ST_TO_ADDR
12446: GO 12487
12448: LD_INT 2
12450: DOUBLE
12451: EQUAL
12452: IFTRUE 12456
12454: GO 12467
12456: POP
// tech := tech_mortar ; 3 :
12457: LD_ADDR_VAR 0 5
12461: PUSH
12462: LD_INT 41
12464: ST_TO_ADDR
12465: GO 12487
12467: LD_INT 3
12469: DOUBLE
12470: EQUAL
12471: IFTRUE 12475
12473: GO 12486
12475: POP
// tech := tech_bazooka ; end ;
12476: LD_ADDR_VAR 0 5
12480: PUSH
12481: LD_INT 44
12483: ST_TO_ADDR
12484: GO 12487
12486: POP
// if Researched ( side , tech ) then
12487: LD_VAR 0 3
12491: PPUSH
12492: LD_VAR 0 5
12496: PPUSH
12497: CALL_OW 325
12501: IFFALSE 12528
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
12503: LD_ADDR_VAR 0 2
12507: PUSH
12508: LD_INT 5
12510: PUSH
12511: LD_INT 8
12513: PUSH
12514: LD_INT 9
12516: PUSH
12517: EMPTY
12518: LIST
12519: LIST
12520: LIST
12521: PUSH
12522: LD_VAR 0 4
12526: ARRAY
12527: ST_TO_ADDR
// end ;
12528: LD_VAR 0 2
12532: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
12533: LD_INT 0
12535: PPUSH
12536: PPUSH
12537: PPUSH
// if not mines then
12538: LD_VAR 0 2
12542: NOT
12543: IFFALSE 12547
// exit ;
12545: GO 12691
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
12547: LD_ADDR_VAR 0 5
12551: PUSH
12552: LD_INT 81
12554: PUSH
12555: LD_VAR 0 1
12559: PUSH
12560: EMPTY
12561: LIST
12562: LIST
12563: PUSH
12564: LD_INT 3
12566: PUSH
12567: LD_INT 21
12569: PUSH
12570: LD_INT 3
12572: PUSH
12573: EMPTY
12574: LIST
12575: LIST
12576: PUSH
12577: EMPTY
12578: LIST
12579: LIST
12580: PUSH
12581: EMPTY
12582: LIST
12583: LIST
12584: PPUSH
12585: CALL_OW 69
12589: ST_TO_ADDR
// for i in mines do
12590: LD_ADDR_VAR 0 4
12594: PUSH
12595: LD_VAR 0 2
12599: PUSH
12600: FOR_IN
12601: IFFALSE 12689
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
12603: LD_VAR 0 4
12607: PUSH
12608: LD_INT 1
12610: ARRAY
12611: PPUSH
12612: LD_VAR 0 4
12616: PUSH
12617: LD_INT 2
12619: ARRAY
12620: PPUSH
12621: CALL_OW 458
12625: NOT
12626: IFFALSE 12630
// continue ;
12628: GO 12600
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
12630: LD_VAR 0 4
12634: PUSH
12635: LD_INT 1
12637: ARRAY
12638: PPUSH
12639: LD_VAR 0 4
12643: PUSH
12644: LD_INT 2
12646: ARRAY
12647: PPUSH
12648: CALL_OW 428
12652: PUSH
12653: LD_VAR 0 5
12657: IN
12658: IFFALSE 12687
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
12660: LD_VAR 0 4
12664: PUSH
12665: LD_INT 1
12667: ARRAY
12668: PPUSH
12669: LD_VAR 0 4
12673: PUSH
12674: LD_INT 2
12676: ARRAY
12677: PPUSH
12678: LD_VAR 0 1
12682: PPUSH
12683: CALL_OW 456
// end ;
12687: GO 12600
12689: POP
12690: POP
// end ;
12691: LD_VAR 0 3
12695: RET
// export function Count ( array ) ; begin
12696: LD_INT 0
12698: PPUSH
// result := array + 0 ;
12699: LD_ADDR_VAR 0 2
12703: PUSH
12704: LD_VAR 0 1
12708: PUSH
12709: LD_INT 0
12711: PLUS
12712: ST_TO_ADDR
// end ;
12713: LD_VAR 0 2
12717: RET
// export function IsEmpty ( building ) ; begin
12718: LD_INT 0
12720: PPUSH
// if not building then
12721: LD_VAR 0 1
12725: NOT
12726: IFFALSE 12730
// exit ;
12728: GO 12773
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
12730: LD_ADDR_VAR 0 2
12734: PUSH
12735: LD_VAR 0 1
12739: PUSH
12740: LD_INT 22
12742: PUSH
12743: LD_VAR 0 1
12747: PPUSH
12748: CALL_OW 255
12752: PUSH
12753: EMPTY
12754: LIST
12755: LIST
12756: PUSH
12757: LD_INT 58
12759: PUSH
12760: EMPTY
12761: LIST
12762: PUSH
12763: EMPTY
12764: LIST
12765: LIST
12766: PPUSH
12767: CALL_OW 69
12771: IN
12772: ST_TO_ADDR
// end ;
12773: LD_VAR 0 2
12777: RET
// export function IsNotFull ( building ) ; var places ; begin
12778: LD_INT 0
12780: PPUSH
12781: PPUSH
// if not building then
12782: LD_VAR 0 1
12786: NOT
12787: IFFALSE 12791
// exit ;
12789: GO 12819
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
12791: LD_ADDR_VAR 0 2
12795: PUSH
12796: LD_VAR 0 1
12800: PPUSH
12801: LD_INT 3
12803: PUSH
12804: LD_INT 62
12806: PUSH
12807: EMPTY
12808: LIST
12809: PUSH
12810: EMPTY
12811: LIST
12812: LIST
12813: PPUSH
12814: CALL_OW 72
12818: ST_TO_ADDR
// end ;
12819: LD_VAR 0 2
12823: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
12824: LD_INT 0
12826: PPUSH
12827: PPUSH
12828: PPUSH
12829: PPUSH
// tmp := [ ] ;
12830: LD_ADDR_VAR 0 3
12834: PUSH
12835: EMPTY
12836: ST_TO_ADDR
// list := [ ] ;
12837: LD_ADDR_VAR 0 5
12841: PUSH
12842: EMPTY
12843: ST_TO_ADDR
// for i = 16 to 25 do
12844: LD_ADDR_VAR 0 4
12848: PUSH
12849: DOUBLE
12850: LD_INT 16
12852: DEC
12853: ST_TO_ADDR
12854: LD_INT 25
12856: PUSH
12857: FOR_TO
12858: IFFALSE 12931
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
12860: LD_ADDR_VAR 0 3
12864: PUSH
12865: LD_VAR 0 3
12869: PUSH
12870: LD_INT 22
12872: PUSH
12873: LD_VAR 0 1
12877: PPUSH
12878: CALL_OW 255
12882: PUSH
12883: EMPTY
12884: LIST
12885: LIST
12886: PUSH
12887: LD_INT 91
12889: PUSH
12890: LD_VAR 0 1
12894: PUSH
12895: LD_INT 6
12897: PUSH
12898: EMPTY
12899: LIST
12900: LIST
12901: LIST
12902: PUSH
12903: LD_INT 30
12905: PUSH
12906: LD_VAR 0 4
12910: PUSH
12911: EMPTY
12912: LIST
12913: LIST
12914: PUSH
12915: EMPTY
12916: LIST
12917: LIST
12918: LIST
12919: PUSH
12920: EMPTY
12921: LIST
12922: PPUSH
12923: CALL_OW 69
12927: ADD
12928: ST_TO_ADDR
12929: GO 12857
12931: POP
12932: POP
// for i = 1 to tmp do
12933: LD_ADDR_VAR 0 4
12937: PUSH
12938: DOUBLE
12939: LD_INT 1
12941: DEC
12942: ST_TO_ADDR
12943: LD_VAR 0 3
12947: PUSH
12948: FOR_TO
12949: IFFALSE 13037
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
12951: LD_ADDR_VAR 0 5
12955: PUSH
12956: LD_VAR 0 5
12960: PUSH
12961: LD_VAR 0 3
12965: PUSH
12966: LD_VAR 0 4
12970: ARRAY
12971: PPUSH
12972: CALL_OW 266
12976: PUSH
12977: LD_VAR 0 3
12981: PUSH
12982: LD_VAR 0 4
12986: ARRAY
12987: PPUSH
12988: CALL_OW 250
12992: PUSH
12993: LD_VAR 0 3
12997: PUSH
12998: LD_VAR 0 4
13002: ARRAY
13003: PPUSH
13004: CALL_OW 251
13008: PUSH
13009: LD_VAR 0 3
13013: PUSH
13014: LD_VAR 0 4
13018: ARRAY
13019: PPUSH
13020: CALL_OW 254
13024: PUSH
13025: EMPTY
13026: LIST
13027: LIST
13028: LIST
13029: LIST
13030: PUSH
13031: EMPTY
13032: LIST
13033: ADD
13034: ST_TO_ADDR
13035: GO 12948
13037: POP
13038: POP
// result := list ;
13039: LD_ADDR_VAR 0 2
13043: PUSH
13044: LD_VAR 0 5
13048: ST_TO_ADDR
// end ;
13049: LD_VAR 0 2
13053: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
13054: LD_INT 0
13056: PPUSH
13057: PPUSH
13058: PPUSH
13059: PPUSH
13060: PPUSH
13061: PPUSH
13062: PPUSH
// if not factory then
13063: LD_VAR 0 1
13067: NOT
13068: IFFALSE 13072
// exit ;
13070: GO 13675
// if control = control_apeman then
13072: LD_VAR 0 4
13076: PUSH
13077: LD_INT 5
13079: EQUAL
13080: IFFALSE 13189
// begin tmp := UnitsInside ( factory ) ;
13082: LD_ADDR_VAR 0 8
13086: PUSH
13087: LD_VAR 0 1
13091: PPUSH
13092: CALL_OW 313
13096: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
13097: LD_VAR 0 8
13101: PPUSH
13102: LD_INT 25
13104: PUSH
13105: LD_INT 12
13107: PUSH
13108: EMPTY
13109: LIST
13110: LIST
13111: PPUSH
13112: CALL_OW 72
13116: NOT
13117: IFFALSE 13127
// control := control_manual ;
13119: LD_ADDR_VAR 0 4
13123: PUSH
13124: LD_INT 1
13126: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
13127: LD_ADDR_VAR 0 8
13131: PUSH
13132: LD_VAR 0 1
13136: PPUSH
13137: CALL 12824 0 1
13141: ST_TO_ADDR
// if tmp then
13142: LD_VAR 0 8
13146: IFFALSE 13189
// begin for i in tmp do
13148: LD_ADDR_VAR 0 7
13152: PUSH
13153: LD_VAR 0 8
13157: PUSH
13158: FOR_IN
13159: IFFALSE 13187
// if i [ 1 ] = b_ext_radio then
13161: LD_VAR 0 7
13165: PUSH
13166: LD_INT 1
13168: ARRAY
13169: PUSH
13170: LD_INT 22
13172: EQUAL
13173: IFFALSE 13185
// begin control := control_remote ;
13175: LD_ADDR_VAR 0 4
13179: PUSH
13180: LD_INT 2
13182: ST_TO_ADDR
// break ;
13183: GO 13187
// end ;
13185: GO 13158
13187: POP
13188: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
13189: LD_VAR 0 1
13193: PPUSH
13194: LD_VAR 0 2
13198: PPUSH
13199: LD_VAR 0 3
13203: PPUSH
13204: LD_VAR 0 4
13208: PPUSH
13209: LD_VAR 0 5
13213: PPUSH
13214: CALL_OW 448
13218: IFFALSE 13253
// begin result := [ chassis , engine , control , weapon ] ;
13220: LD_ADDR_VAR 0 6
13224: PUSH
13225: LD_VAR 0 2
13229: PUSH
13230: LD_VAR 0 3
13234: PUSH
13235: LD_VAR 0 4
13239: PUSH
13240: LD_VAR 0 5
13244: PUSH
13245: EMPTY
13246: LIST
13247: LIST
13248: LIST
13249: LIST
13250: ST_TO_ADDR
// exit ;
13251: GO 13675
// end ; _chassis := AvailableChassisList ( factory ) ;
13253: LD_ADDR_VAR 0 9
13257: PUSH
13258: LD_VAR 0 1
13262: PPUSH
13263: CALL_OW 475
13267: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
13268: LD_ADDR_VAR 0 11
13272: PUSH
13273: LD_VAR 0 1
13277: PPUSH
13278: CALL_OW 476
13282: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
13283: LD_ADDR_VAR 0 12
13287: PUSH
13288: LD_VAR 0 1
13292: PPUSH
13293: CALL_OW 477
13297: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
13298: LD_ADDR_VAR 0 10
13302: PUSH
13303: LD_VAR 0 1
13307: PPUSH
13308: CALL_OW 478
13312: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
13313: LD_VAR 0 9
13317: NOT
13318: IFTRUE 13327
13320: PUSH
13321: LD_VAR 0 11
13325: NOT
13326: OR
13327: IFTRUE 13336
13329: PUSH
13330: LD_VAR 0 12
13334: NOT
13335: OR
13336: IFTRUE 13345
13338: PUSH
13339: LD_VAR 0 10
13343: NOT
13344: OR
13345: IFFALSE 13380
// begin result := [ chassis , engine , control , weapon ] ;
13347: LD_ADDR_VAR 0 6
13351: PUSH
13352: LD_VAR 0 2
13356: PUSH
13357: LD_VAR 0 3
13361: PUSH
13362: LD_VAR 0 4
13366: PUSH
13367: LD_VAR 0 5
13371: PUSH
13372: EMPTY
13373: LIST
13374: LIST
13375: LIST
13376: LIST
13377: ST_TO_ADDR
// exit ;
13378: GO 13675
// end ; if not chassis in _chassis then
13380: LD_VAR 0 2
13384: PUSH
13385: LD_VAR 0 9
13389: IN
13390: NOT
13391: IFFALSE 13417
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
13393: LD_ADDR_VAR 0 2
13397: PUSH
13398: LD_VAR 0 9
13402: PUSH
13403: LD_INT 1
13405: PPUSH
13406: LD_VAR 0 9
13410: PPUSH
13411: CALL_OW 12
13415: ARRAY
13416: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
13417: LD_VAR 0 2
13421: PPUSH
13422: LD_VAR 0 3
13426: PPUSH
13427: CALL 13680 0 2
13431: NOT
13432: IFFALSE 13493
// repeat engine := _engine [ 1 ] ;
13434: LD_ADDR_VAR 0 3
13438: PUSH
13439: LD_VAR 0 11
13443: PUSH
13444: LD_INT 1
13446: ARRAY
13447: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
13448: LD_ADDR_VAR 0 11
13452: PUSH
13453: LD_VAR 0 11
13457: PPUSH
13458: LD_INT 1
13460: PPUSH
13461: CALL_OW 3
13465: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
13466: LD_VAR 0 2
13470: PPUSH
13471: LD_VAR 0 3
13475: PPUSH
13476: CALL 13680 0 2
13480: IFTRUE 13491
13482: PUSH
13483: LD_VAR 0 11
13487: PUSH
13488: EMPTY
13489: EQUAL
13490: OR
13491: IFFALSE 13434
// if not control in _control then
13493: LD_VAR 0 4
13497: PUSH
13498: LD_VAR 0 12
13502: IN
13503: NOT
13504: IFFALSE 13530
// control := _control [ rand ( 1 , _control ) ] ;
13506: LD_ADDR_VAR 0 4
13510: PUSH
13511: LD_VAR 0 12
13515: PUSH
13516: LD_INT 1
13518: PPUSH
13519: LD_VAR 0 12
13523: PPUSH
13524: CALL_OW 12
13528: ARRAY
13529: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
13530: LD_VAR 0 2
13534: PPUSH
13535: LD_VAR 0 5
13539: PPUSH
13540: CALL 13902 0 2
13544: NOT
13545: IFFALSE 13606
// repeat weapon := _weapon [ 1 ] ;
13547: LD_ADDR_VAR 0 5
13551: PUSH
13552: LD_VAR 0 10
13556: PUSH
13557: LD_INT 1
13559: ARRAY
13560: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
13561: LD_ADDR_VAR 0 10
13565: PUSH
13566: LD_VAR 0 10
13570: PPUSH
13571: LD_INT 1
13573: PPUSH
13574: CALL_OW 3
13578: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
13579: LD_VAR 0 2
13583: PPUSH
13584: LD_VAR 0 5
13588: PPUSH
13589: CALL 13902 0 2
13593: IFTRUE 13604
13595: PUSH
13596: LD_VAR 0 10
13600: PUSH
13601: EMPTY
13602: EQUAL
13603: OR
13604: IFFALSE 13547
// result := [ ] ;
13606: LD_ADDR_VAR 0 6
13610: PUSH
13611: EMPTY
13612: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
13613: LD_VAR 0 1
13617: PPUSH
13618: LD_VAR 0 2
13622: PPUSH
13623: LD_VAR 0 3
13627: PPUSH
13628: LD_VAR 0 4
13632: PPUSH
13633: LD_VAR 0 5
13637: PPUSH
13638: CALL_OW 448
13642: IFFALSE 13675
// result := [ chassis , engine , control , weapon ] ;
13644: LD_ADDR_VAR 0 6
13648: PUSH
13649: LD_VAR 0 2
13653: PUSH
13654: LD_VAR 0 3
13658: PUSH
13659: LD_VAR 0 4
13663: PUSH
13664: LD_VAR 0 5
13668: PUSH
13669: EMPTY
13670: LIST
13671: LIST
13672: LIST
13673: LIST
13674: ST_TO_ADDR
// end ;
13675: LD_VAR 0 6
13679: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
13680: LD_INT 0
13682: PPUSH
// if not chassis or not engine then
13683: LD_VAR 0 1
13687: NOT
13688: IFTRUE 13697
13690: PUSH
13691: LD_VAR 0 2
13695: NOT
13696: OR
13697: IFFALSE 13701
// exit ;
13699: GO 13897
// case engine of engine_solar :
13701: LD_VAR 0 2
13705: PUSH
13706: LD_INT 2
13708: DOUBLE
13709: EQUAL
13710: IFTRUE 13714
13712: GO 13752
13714: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
13715: LD_ADDR_VAR 0 3
13719: PUSH
13720: LD_INT 11
13722: PUSH
13723: LD_INT 12
13725: PUSH
13726: LD_INT 13
13728: PUSH
13729: LD_INT 14
13731: PUSH
13732: LD_INT 1
13734: PUSH
13735: LD_INT 2
13737: PUSH
13738: LD_INT 3
13740: PUSH
13741: EMPTY
13742: LIST
13743: LIST
13744: LIST
13745: LIST
13746: LIST
13747: LIST
13748: LIST
13749: ST_TO_ADDR
13750: GO 13881
13752: LD_INT 1
13754: DOUBLE
13755: EQUAL
13756: IFTRUE 13760
13758: GO 13822
13760: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
13761: LD_ADDR_VAR 0 3
13765: PUSH
13766: LD_INT 11
13768: PUSH
13769: LD_INT 12
13771: PUSH
13772: LD_INT 13
13774: PUSH
13775: LD_INT 14
13777: PUSH
13778: LD_INT 1
13780: PUSH
13781: LD_INT 2
13783: PUSH
13784: LD_INT 3
13786: PUSH
13787: LD_INT 4
13789: PUSH
13790: LD_INT 5
13792: PUSH
13793: LD_INT 21
13795: PUSH
13796: LD_INT 23
13798: PUSH
13799: LD_INT 22
13801: PUSH
13802: LD_INT 24
13804: PUSH
13805: EMPTY
13806: LIST
13807: LIST
13808: LIST
13809: LIST
13810: LIST
13811: LIST
13812: LIST
13813: LIST
13814: LIST
13815: LIST
13816: LIST
13817: LIST
13818: LIST
13819: ST_TO_ADDR
13820: GO 13881
13822: LD_INT 3
13824: DOUBLE
13825: EQUAL
13826: IFTRUE 13830
13828: GO 13880
13830: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
13831: LD_ADDR_VAR 0 3
13835: PUSH
13836: LD_INT 13
13838: PUSH
13839: LD_INT 14
13841: PUSH
13842: LD_INT 2
13844: PUSH
13845: LD_INT 3
13847: PUSH
13848: LD_INT 4
13850: PUSH
13851: LD_INT 5
13853: PUSH
13854: LD_INT 21
13856: PUSH
13857: LD_INT 22
13859: PUSH
13860: LD_INT 23
13862: PUSH
13863: LD_INT 24
13865: PUSH
13866: EMPTY
13867: LIST
13868: LIST
13869: LIST
13870: LIST
13871: LIST
13872: LIST
13873: LIST
13874: LIST
13875: LIST
13876: LIST
13877: ST_TO_ADDR
13878: GO 13881
13880: POP
// result := ( chassis in result ) ;
13881: LD_ADDR_VAR 0 3
13885: PUSH
13886: LD_VAR 0 1
13890: PUSH
13891: LD_VAR 0 3
13895: IN
13896: ST_TO_ADDR
// end ;
13897: LD_VAR 0 3
13901: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
13902: LD_INT 0
13904: PPUSH
// if not chassis or not weapon then
13905: LD_VAR 0 1
13909: NOT
13910: IFTRUE 13919
13912: PUSH
13913: LD_VAR 0 2
13917: NOT
13918: OR
13919: IFFALSE 13923
// exit ;
13921: GO 15017
// case weapon of us_machine_gun :
13923: LD_VAR 0 2
13927: PUSH
13928: LD_INT 2
13930: DOUBLE
13931: EQUAL
13932: IFTRUE 13936
13934: GO 13966
13936: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
13937: LD_ADDR_VAR 0 3
13941: PUSH
13942: LD_INT 1
13944: PUSH
13945: LD_INT 2
13947: PUSH
13948: LD_INT 3
13950: PUSH
13951: LD_INT 4
13953: PUSH
13954: LD_INT 5
13956: PUSH
13957: EMPTY
13958: LIST
13959: LIST
13960: LIST
13961: LIST
13962: LIST
13963: ST_TO_ADDR
13964: GO 15001
13966: LD_INT 3
13968: DOUBLE
13969: EQUAL
13970: IFTRUE 13974
13972: GO 14004
13974: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
13975: LD_ADDR_VAR 0 3
13979: PUSH
13980: LD_INT 1
13982: PUSH
13983: LD_INT 2
13985: PUSH
13986: LD_INT 3
13988: PUSH
13989: LD_INT 4
13991: PUSH
13992: LD_INT 5
13994: PUSH
13995: EMPTY
13996: LIST
13997: LIST
13998: LIST
13999: LIST
14000: LIST
14001: ST_TO_ADDR
14002: GO 15001
14004: LD_INT 11
14006: DOUBLE
14007: EQUAL
14008: IFTRUE 14012
14010: GO 14042
14012: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
14013: LD_ADDR_VAR 0 3
14017: PUSH
14018: LD_INT 1
14020: PUSH
14021: LD_INT 2
14023: PUSH
14024: LD_INT 3
14026: PUSH
14027: LD_INT 4
14029: PUSH
14030: LD_INT 5
14032: PUSH
14033: EMPTY
14034: LIST
14035: LIST
14036: LIST
14037: LIST
14038: LIST
14039: ST_TO_ADDR
14040: GO 15001
14042: LD_INT 4
14044: DOUBLE
14045: EQUAL
14046: IFTRUE 14050
14048: GO 14076
14050: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
14051: LD_ADDR_VAR 0 3
14055: PUSH
14056: LD_INT 2
14058: PUSH
14059: LD_INT 3
14061: PUSH
14062: LD_INT 4
14064: PUSH
14065: LD_INT 5
14067: PUSH
14068: EMPTY
14069: LIST
14070: LIST
14071: LIST
14072: LIST
14073: ST_TO_ADDR
14074: GO 15001
14076: LD_INT 5
14078: DOUBLE
14079: EQUAL
14080: IFTRUE 14084
14082: GO 14110
14084: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
14085: LD_ADDR_VAR 0 3
14089: PUSH
14090: LD_INT 2
14092: PUSH
14093: LD_INT 3
14095: PUSH
14096: LD_INT 4
14098: PUSH
14099: LD_INT 5
14101: PUSH
14102: EMPTY
14103: LIST
14104: LIST
14105: LIST
14106: LIST
14107: ST_TO_ADDR
14108: GO 15001
14110: LD_INT 9
14112: DOUBLE
14113: EQUAL
14114: IFTRUE 14118
14116: GO 14144
14118: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
14119: LD_ADDR_VAR 0 3
14123: PUSH
14124: LD_INT 2
14126: PUSH
14127: LD_INT 3
14129: PUSH
14130: LD_INT 4
14132: PUSH
14133: LD_INT 5
14135: PUSH
14136: EMPTY
14137: LIST
14138: LIST
14139: LIST
14140: LIST
14141: ST_TO_ADDR
14142: GO 15001
14144: LD_INT 7
14146: DOUBLE
14147: EQUAL
14148: IFTRUE 14152
14150: GO 14178
14152: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
14153: LD_ADDR_VAR 0 3
14157: PUSH
14158: LD_INT 2
14160: PUSH
14161: LD_INT 3
14163: PUSH
14164: LD_INT 4
14166: PUSH
14167: LD_INT 5
14169: PUSH
14170: EMPTY
14171: LIST
14172: LIST
14173: LIST
14174: LIST
14175: ST_TO_ADDR
14176: GO 15001
14178: LD_INT 12
14180: DOUBLE
14181: EQUAL
14182: IFTRUE 14186
14184: GO 14212
14186: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
14187: LD_ADDR_VAR 0 3
14191: PUSH
14192: LD_INT 2
14194: PUSH
14195: LD_INT 3
14197: PUSH
14198: LD_INT 4
14200: PUSH
14201: LD_INT 5
14203: PUSH
14204: EMPTY
14205: LIST
14206: LIST
14207: LIST
14208: LIST
14209: ST_TO_ADDR
14210: GO 15001
14212: LD_INT 13
14214: DOUBLE
14215: EQUAL
14216: IFTRUE 14220
14218: GO 14246
14220: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
14221: LD_ADDR_VAR 0 3
14225: PUSH
14226: LD_INT 2
14228: PUSH
14229: LD_INT 3
14231: PUSH
14232: LD_INT 4
14234: PUSH
14235: LD_INT 5
14237: PUSH
14238: EMPTY
14239: LIST
14240: LIST
14241: LIST
14242: LIST
14243: ST_TO_ADDR
14244: GO 15001
14246: LD_INT 14
14248: DOUBLE
14249: EQUAL
14250: IFTRUE 14254
14252: GO 14272
14254: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
14255: LD_ADDR_VAR 0 3
14259: PUSH
14260: LD_INT 4
14262: PUSH
14263: LD_INT 5
14265: PUSH
14266: EMPTY
14267: LIST
14268: LIST
14269: ST_TO_ADDR
14270: GO 15001
14272: LD_INT 6
14274: DOUBLE
14275: EQUAL
14276: IFTRUE 14280
14278: GO 14298
14280: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
14281: LD_ADDR_VAR 0 3
14285: PUSH
14286: LD_INT 4
14288: PUSH
14289: LD_INT 5
14291: PUSH
14292: EMPTY
14293: LIST
14294: LIST
14295: ST_TO_ADDR
14296: GO 15001
14298: LD_INT 10
14300: DOUBLE
14301: EQUAL
14302: IFTRUE 14306
14304: GO 14324
14306: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
14307: LD_ADDR_VAR 0 3
14311: PUSH
14312: LD_INT 4
14314: PUSH
14315: LD_INT 5
14317: PUSH
14318: EMPTY
14319: LIST
14320: LIST
14321: ST_TO_ADDR
14322: GO 15001
14324: LD_INT 22
14326: DOUBLE
14327: EQUAL
14328: IFTRUE 14332
14330: GO 14358
14332: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
14333: LD_ADDR_VAR 0 3
14337: PUSH
14338: LD_INT 11
14340: PUSH
14341: LD_INT 12
14343: PUSH
14344: LD_INT 13
14346: PUSH
14347: LD_INT 14
14349: PUSH
14350: EMPTY
14351: LIST
14352: LIST
14353: LIST
14354: LIST
14355: ST_TO_ADDR
14356: GO 15001
14358: LD_INT 23
14360: DOUBLE
14361: EQUAL
14362: IFTRUE 14366
14364: GO 14392
14366: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
14367: LD_ADDR_VAR 0 3
14371: PUSH
14372: LD_INT 11
14374: PUSH
14375: LD_INT 12
14377: PUSH
14378: LD_INT 13
14380: PUSH
14381: LD_INT 14
14383: PUSH
14384: EMPTY
14385: LIST
14386: LIST
14387: LIST
14388: LIST
14389: ST_TO_ADDR
14390: GO 15001
14392: LD_INT 24
14394: DOUBLE
14395: EQUAL
14396: IFTRUE 14400
14398: GO 14426
14400: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
14401: LD_ADDR_VAR 0 3
14405: PUSH
14406: LD_INT 11
14408: PUSH
14409: LD_INT 12
14411: PUSH
14412: LD_INT 13
14414: PUSH
14415: LD_INT 14
14417: PUSH
14418: EMPTY
14419: LIST
14420: LIST
14421: LIST
14422: LIST
14423: ST_TO_ADDR
14424: GO 15001
14426: LD_INT 30
14428: DOUBLE
14429: EQUAL
14430: IFTRUE 14434
14432: GO 14460
14434: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
14435: LD_ADDR_VAR 0 3
14439: PUSH
14440: LD_INT 11
14442: PUSH
14443: LD_INT 12
14445: PUSH
14446: LD_INT 13
14448: PUSH
14449: LD_INT 14
14451: PUSH
14452: EMPTY
14453: LIST
14454: LIST
14455: LIST
14456: LIST
14457: ST_TO_ADDR
14458: GO 15001
14460: LD_INT 25
14462: DOUBLE
14463: EQUAL
14464: IFTRUE 14468
14466: GO 14486
14468: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
14469: LD_ADDR_VAR 0 3
14473: PUSH
14474: LD_INT 13
14476: PUSH
14477: LD_INT 14
14479: PUSH
14480: EMPTY
14481: LIST
14482: LIST
14483: ST_TO_ADDR
14484: GO 15001
14486: LD_INT 27
14488: DOUBLE
14489: EQUAL
14490: IFTRUE 14494
14492: GO 14512
14494: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
14495: LD_ADDR_VAR 0 3
14499: PUSH
14500: LD_INT 13
14502: PUSH
14503: LD_INT 14
14505: PUSH
14506: EMPTY
14507: LIST
14508: LIST
14509: ST_TO_ADDR
14510: GO 15001
14512: LD_INT 92
14514: DOUBLE
14515: EQUAL
14516: IFTRUE 14520
14518: GO 14546
14520: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
14521: LD_ADDR_VAR 0 3
14525: PUSH
14526: LD_INT 11
14528: PUSH
14529: LD_INT 12
14531: PUSH
14532: LD_INT 13
14534: PUSH
14535: LD_INT 14
14537: PUSH
14538: EMPTY
14539: LIST
14540: LIST
14541: LIST
14542: LIST
14543: ST_TO_ADDR
14544: GO 15001
14546: LD_INT 28
14548: DOUBLE
14549: EQUAL
14550: IFTRUE 14554
14552: GO 14572
14554: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
14555: LD_ADDR_VAR 0 3
14559: PUSH
14560: LD_INT 13
14562: PUSH
14563: LD_INT 14
14565: PUSH
14566: EMPTY
14567: LIST
14568: LIST
14569: ST_TO_ADDR
14570: GO 15001
14572: LD_INT 29
14574: DOUBLE
14575: EQUAL
14576: IFTRUE 14580
14578: GO 14598
14580: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
14581: LD_ADDR_VAR 0 3
14585: PUSH
14586: LD_INT 13
14588: PUSH
14589: LD_INT 14
14591: PUSH
14592: EMPTY
14593: LIST
14594: LIST
14595: ST_TO_ADDR
14596: GO 15001
14598: LD_INT 31
14600: DOUBLE
14601: EQUAL
14602: IFTRUE 14606
14604: GO 14624
14606: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
14607: LD_ADDR_VAR 0 3
14611: PUSH
14612: LD_INT 13
14614: PUSH
14615: LD_INT 14
14617: PUSH
14618: EMPTY
14619: LIST
14620: LIST
14621: ST_TO_ADDR
14622: GO 15001
14624: LD_INT 26
14626: DOUBLE
14627: EQUAL
14628: IFTRUE 14632
14630: GO 14650
14632: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
14633: LD_ADDR_VAR 0 3
14637: PUSH
14638: LD_INT 13
14640: PUSH
14641: LD_INT 14
14643: PUSH
14644: EMPTY
14645: LIST
14646: LIST
14647: ST_TO_ADDR
14648: GO 15001
14650: LD_INT 42
14652: DOUBLE
14653: EQUAL
14654: IFTRUE 14658
14656: GO 14684
14658: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
14659: LD_ADDR_VAR 0 3
14663: PUSH
14664: LD_INT 21
14666: PUSH
14667: LD_INT 22
14669: PUSH
14670: LD_INT 23
14672: PUSH
14673: LD_INT 24
14675: PUSH
14676: EMPTY
14677: LIST
14678: LIST
14679: LIST
14680: LIST
14681: ST_TO_ADDR
14682: GO 15001
14684: LD_INT 43
14686: DOUBLE
14687: EQUAL
14688: IFTRUE 14692
14690: GO 14718
14692: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
14693: LD_ADDR_VAR 0 3
14697: PUSH
14698: LD_INT 21
14700: PUSH
14701: LD_INT 22
14703: PUSH
14704: LD_INT 23
14706: PUSH
14707: LD_INT 24
14709: PUSH
14710: EMPTY
14711: LIST
14712: LIST
14713: LIST
14714: LIST
14715: ST_TO_ADDR
14716: GO 15001
14718: LD_INT 44
14720: DOUBLE
14721: EQUAL
14722: IFTRUE 14726
14724: GO 14752
14726: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
14727: LD_ADDR_VAR 0 3
14731: PUSH
14732: LD_INT 21
14734: PUSH
14735: LD_INT 22
14737: PUSH
14738: LD_INT 23
14740: PUSH
14741: LD_INT 24
14743: PUSH
14744: EMPTY
14745: LIST
14746: LIST
14747: LIST
14748: LIST
14749: ST_TO_ADDR
14750: GO 15001
14752: LD_INT 45
14754: DOUBLE
14755: EQUAL
14756: IFTRUE 14760
14758: GO 14786
14760: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
14761: LD_ADDR_VAR 0 3
14765: PUSH
14766: LD_INT 21
14768: PUSH
14769: LD_INT 22
14771: PUSH
14772: LD_INT 23
14774: PUSH
14775: LD_INT 24
14777: PUSH
14778: EMPTY
14779: LIST
14780: LIST
14781: LIST
14782: LIST
14783: ST_TO_ADDR
14784: GO 15001
14786: LD_INT 49
14788: DOUBLE
14789: EQUAL
14790: IFTRUE 14794
14792: GO 14820
14794: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
14795: LD_ADDR_VAR 0 3
14799: PUSH
14800: LD_INT 21
14802: PUSH
14803: LD_INT 22
14805: PUSH
14806: LD_INT 23
14808: PUSH
14809: LD_INT 24
14811: PUSH
14812: EMPTY
14813: LIST
14814: LIST
14815: LIST
14816: LIST
14817: ST_TO_ADDR
14818: GO 15001
14820: LD_INT 51
14822: DOUBLE
14823: EQUAL
14824: IFTRUE 14828
14826: GO 14854
14828: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
14829: LD_ADDR_VAR 0 3
14833: PUSH
14834: LD_INT 21
14836: PUSH
14837: LD_INT 22
14839: PUSH
14840: LD_INT 23
14842: PUSH
14843: LD_INT 24
14845: PUSH
14846: EMPTY
14847: LIST
14848: LIST
14849: LIST
14850: LIST
14851: ST_TO_ADDR
14852: GO 15001
14854: LD_INT 52
14856: DOUBLE
14857: EQUAL
14858: IFTRUE 14862
14860: GO 14888
14862: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
14863: LD_ADDR_VAR 0 3
14867: PUSH
14868: LD_INT 21
14870: PUSH
14871: LD_INT 22
14873: PUSH
14874: LD_INT 23
14876: PUSH
14877: LD_INT 24
14879: PUSH
14880: EMPTY
14881: LIST
14882: LIST
14883: LIST
14884: LIST
14885: ST_TO_ADDR
14886: GO 15001
14888: LD_INT 53
14890: DOUBLE
14891: EQUAL
14892: IFTRUE 14896
14894: GO 14914
14896: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
14897: LD_ADDR_VAR 0 3
14901: PUSH
14902: LD_INT 23
14904: PUSH
14905: LD_INT 24
14907: PUSH
14908: EMPTY
14909: LIST
14910: LIST
14911: ST_TO_ADDR
14912: GO 15001
14914: LD_INT 46
14916: DOUBLE
14917: EQUAL
14918: IFTRUE 14922
14920: GO 14940
14922: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
14923: LD_ADDR_VAR 0 3
14927: PUSH
14928: LD_INT 23
14930: PUSH
14931: LD_INT 24
14933: PUSH
14934: EMPTY
14935: LIST
14936: LIST
14937: ST_TO_ADDR
14938: GO 15001
14940: LD_INT 47
14942: DOUBLE
14943: EQUAL
14944: IFTRUE 14948
14946: GO 14966
14948: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_radar :
14949: LD_ADDR_VAR 0 3
14953: PUSH
14954: LD_INT 23
14956: PUSH
14957: LD_INT 24
14959: PUSH
14960: EMPTY
14961: LIST
14962: LIST
14963: ST_TO_ADDR
14964: GO 15001
14966: LD_INT 98
14968: DOUBLE
14969: EQUAL
14970: IFTRUE 14974
14972: GO 15000
14974: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
14975: LD_ADDR_VAR 0 3
14979: PUSH
14980: LD_INT 21
14982: PUSH
14983: LD_INT 22
14985: PUSH
14986: LD_INT 23
14988: PUSH
14989: LD_INT 24
14991: PUSH
14992: EMPTY
14993: LIST
14994: LIST
14995: LIST
14996: LIST
14997: ST_TO_ADDR
14998: GO 15001
15000: POP
// result := ( chassis in result ) ;
15001: LD_ADDR_VAR 0 3
15005: PUSH
15006: LD_VAR 0 1
15010: PUSH
15011: LD_VAR 0 3
15015: IN
15016: ST_TO_ADDR
// end ;
15017: LD_VAR 0 3
15021: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
15022: LD_INT 0
15024: PPUSH
15025: PPUSH
15026: PPUSH
15027: PPUSH
15028: PPUSH
15029: PPUSH
15030: PPUSH
// result := array ;
15031: LD_ADDR_VAR 0 5
15035: PUSH
15036: LD_VAR 0 1
15040: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
15041: LD_VAR 0 1
15045: NOT
15046: IFTRUE 15055
15048: PUSH
15049: LD_VAR 0 2
15053: NOT
15054: OR
15055: IFTRUE 15064
15057: PUSH
15058: LD_VAR 0 3
15062: NOT
15063: OR
15064: IFTRUE 15078
15066: PUSH
15067: LD_VAR 0 2
15071: PUSH
15072: LD_VAR 0 1
15076: GREATER
15077: OR
15078: IFTRUE 15092
15080: PUSH
15081: LD_VAR 0 3
15085: PUSH
15086: LD_VAR 0 1
15090: GREATER
15091: OR
15092: IFFALSE 15096
// exit ;
15094: GO 15392
// if direction then
15096: LD_VAR 0 4
15100: IFFALSE 15164
// begin d := 1 ;
15102: LD_ADDR_VAR 0 9
15106: PUSH
15107: LD_INT 1
15109: ST_TO_ADDR
// if i_from > i_to then
15110: LD_VAR 0 2
15114: PUSH
15115: LD_VAR 0 3
15119: GREATER
15120: IFFALSE 15146
// length := ( array - i_from ) + i_to else
15122: LD_ADDR_VAR 0 11
15126: PUSH
15127: LD_VAR 0 1
15131: PUSH
15132: LD_VAR 0 2
15136: MINUS
15137: PUSH
15138: LD_VAR 0 3
15142: PLUS
15143: ST_TO_ADDR
15144: GO 15162
// length := i_to - i_from ;
15146: LD_ADDR_VAR 0 11
15150: PUSH
15151: LD_VAR 0 3
15155: PUSH
15156: LD_VAR 0 2
15160: MINUS
15161: ST_TO_ADDR
// end else
15162: GO 15225
// begin d := - 1 ;
15164: LD_ADDR_VAR 0 9
15168: PUSH
15169: LD_INT 1
15171: NEG
15172: ST_TO_ADDR
// if i_from > i_to then
15173: LD_VAR 0 2
15177: PUSH
15178: LD_VAR 0 3
15182: GREATER
15183: IFFALSE 15203
// length := i_from - i_to else
15185: LD_ADDR_VAR 0 11
15189: PUSH
15190: LD_VAR 0 2
15194: PUSH
15195: LD_VAR 0 3
15199: MINUS
15200: ST_TO_ADDR
15201: GO 15225
// length := ( array - i_to ) + i_from ;
15203: LD_ADDR_VAR 0 11
15207: PUSH
15208: LD_VAR 0 1
15212: PUSH
15213: LD_VAR 0 3
15217: MINUS
15218: PUSH
15219: LD_VAR 0 2
15223: PLUS
15224: ST_TO_ADDR
// end ; if not length then
15225: LD_VAR 0 11
15229: NOT
15230: IFFALSE 15234
// exit ;
15232: GO 15392
// tmp := array ;
15234: LD_ADDR_VAR 0 10
15238: PUSH
15239: LD_VAR 0 1
15243: ST_TO_ADDR
// for i = 1 to length do
15244: LD_ADDR_VAR 0 6
15248: PUSH
15249: DOUBLE
15250: LD_INT 1
15252: DEC
15253: ST_TO_ADDR
15254: LD_VAR 0 11
15258: PUSH
15259: FOR_TO
15260: IFFALSE 15380
// begin for j = 1 to array do
15262: LD_ADDR_VAR 0 7
15266: PUSH
15267: DOUBLE
15268: LD_INT 1
15270: DEC
15271: ST_TO_ADDR
15272: LD_VAR 0 1
15276: PUSH
15277: FOR_TO
15278: IFFALSE 15366
// begin k := j + d ;
15280: LD_ADDR_VAR 0 8
15284: PUSH
15285: LD_VAR 0 7
15289: PUSH
15290: LD_VAR 0 9
15294: PLUS
15295: ST_TO_ADDR
// if k > array then
15296: LD_VAR 0 8
15300: PUSH
15301: LD_VAR 0 1
15305: GREATER
15306: IFFALSE 15316
// k := 1 ;
15308: LD_ADDR_VAR 0 8
15312: PUSH
15313: LD_INT 1
15315: ST_TO_ADDR
// if not k then
15316: LD_VAR 0 8
15320: NOT
15321: IFFALSE 15333
// k := array ;
15323: LD_ADDR_VAR 0 8
15327: PUSH
15328: LD_VAR 0 1
15332: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
15333: LD_ADDR_VAR 0 10
15337: PUSH
15338: LD_VAR 0 10
15342: PPUSH
15343: LD_VAR 0 8
15347: PPUSH
15348: LD_VAR 0 1
15352: PUSH
15353: LD_VAR 0 7
15357: ARRAY
15358: PPUSH
15359: CALL_OW 1
15363: ST_TO_ADDR
// end ;
15364: GO 15277
15366: POP
15367: POP
// array := tmp ;
15368: LD_ADDR_VAR 0 1
15372: PUSH
15373: LD_VAR 0 10
15377: ST_TO_ADDR
// end ;
15378: GO 15259
15380: POP
15381: POP
// result := array ;
15382: LD_ADDR_VAR 0 5
15386: PUSH
15387: LD_VAR 0 1
15391: ST_TO_ADDR
// end ;
15392: LD_VAR 0 5
15396: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
15397: LD_INT 0
15399: PPUSH
15400: PPUSH
// result := 0 ;
15401: LD_ADDR_VAR 0 3
15405: PUSH
15406: LD_INT 0
15408: ST_TO_ADDR
// if not array or not value in array then
15409: LD_VAR 0 1
15413: NOT
15414: IFTRUE 15429
15416: PUSH
15417: LD_VAR 0 2
15421: PUSH
15422: LD_VAR 0 1
15426: IN
15427: NOT
15428: OR
15429: IFFALSE 15433
// exit ;
15431: GO 15487
// for i = 1 to array do
15433: LD_ADDR_VAR 0 4
15437: PUSH
15438: DOUBLE
15439: LD_INT 1
15441: DEC
15442: ST_TO_ADDR
15443: LD_VAR 0 1
15447: PUSH
15448: FOR_TO
15449: IFFALSE 15485
// if value = array [ i ] then
15451: LD_VAR 0 2
15455: PUSH
15456: LD_VAR 0 1
15460: PUSH
15461: LD_VAR 0 4
15465: ARRAY
15466: EQUAL
15467: IFFALSE 15483
// begin result := i ;
15469: LD_ADDR_VAR 0 3
15473: PUSH
15474: LD_VAR 0 4
15478: ST_TO_ADDR
// exit ;
15479: POP
15480: POP
15481: GO 15487
// end ;
15483: GO 15448
15485: POP
15486: POP
// end ;
15487: LD_VAR 0 3
15491: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
15492: LD_INT 0
15494: PPUSH
// vc_chassis := chassis ;
15495: LD_ADDR_OWVAR 37
15499: PUSH
15500: LD_VAR 0 1
15504: ST_TO_ADDR
// vc_engine := engine ;
15505: LD_ADDR_OWVAR 39
15509: PUSH
15510: LD_VAR 0 2
15514: ST_TO_ADDR
// vc_control := control ;
15515: LD_ADDR_OWVAR 38
15519: PUSH
15520: LD_VAR 0 3
15524: ST_TO_ADDR
// vc_weapon := weapon ;
15525: LD_ADDR_OWVAR 40
15529: PUSH
15530: LD_VAR 0 4
15534: ST_TO_ADDR
// vc_fuel_battery := fuel ;
15535: LD_ADDR_OWVAR 41
15539: PUSH
15540: LD_VAR 0 5
15544: ST_TO_ADDR
// end ;
15545: LD_VAR 0 6
15549: RET
// export function WantPlant ( unit ) ; var task ; begin
15550: LD_INT 0
15552: PPUSH
15553: PPUSH
// result := false ;
15554: LD_ADDR_VAR 0 2
15558: PUSH
15559: LD_INT 0
15561: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
15562: LD_ADDR_VAR 0 3
15566: PUSH
15567: LD_VAR 0 1
15571: PPUSH
15572: CALL_OW 437
15576: ST_TO_ADDR
// if task then
15577: LD_VAR 0 3
15581: IFFALSE 15609
// if task [ 1 ] [ 1 ] = p then
15583: LD_VAR 0 3
15587: PUSH
15588: LD_INT 1
15590: ARRAY
15591: PUSH
15592: LD_INT 1
15594: ARRAY
15595: PUSH
15596: LD_STRING p
15598: EQUAL
15599: IFFALSE 15609
// result := true ;
15601: LD_ADDR_VAR 0 2
15605: PUSH
15606: LD_INT 1
15608: ST_TO_ADDR
// end ;
15609: LD_VAR 0 2
15613: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
15614: LD_INT 0
15616: PPUSH
15617: PPUSH
15618: PPUSH
15619: PPUSH
// if pos < 1 then
15620: LD_VAR 0 2
15624: PUSH
15625: LD_INT 1
15627: LESS
15628: IFFALSE 15632
// exit ;
15630: GO 15935
// if pos = 1 then
15632: LD_VAR 0 2
15636: PUSH
15637: LD_INT 1
15639: EQUAL
15640: IFFALSE 15673
// result := Replace ( arr , pos [ 1 ] , value ) else
15642: LD_ADDR_VAR 0 4
15646: PUSH
15647: LD_VAR 0 1
15651: PPUSH
15652: LD_VAR 0 2
15656: PUSH
15657: LD_INT 1
15659: ARRAY
15660: PPUSH
15661: LD_VAR 0 3
15665: PPUSH
15666: CALL_OW 1
15670: ST_TO_ADDR
15671: GO 15935
// begin tmp := arr ;
15673: LD_ADDR_VAR 0 6
15677: PUSH
15678: LD_VAR 0 1
15682: ST_TO_ADDR
// s_arr := [ tmp ] ;
15683: LD_ADDR_VAR 0 7
15687: PUSH
15688: LD_VAR 0 6
15692: PUSH
15693: EMPTY
15694: LIST
15695: ST_TO_ADDR
// for i = 1 to pos - 1 do
15696: LD_ADDR_VAR 0 5
15700: PUSH
15701: DOUBLE
15702: LD_INT 1
15704: DEC
15705: ST_TO_ADDR
15706: LD_VAR 0 2
15710: PUSH
15711: LD_INT 1
15713: MINUS
15714: PUSH
15715: FOR_TO
15716: IFFALSE 15761
// begin tmp := tmp [ pos [ i ] ] ;
15718: LD_ADDR_VAR 0 6
15722: PUSH
15723: LD_VAR 0 6
15727: PUSH
15728: LD_VAR 0 2
15732: PUSH
15733: LD_VAR 0 5
15737: ARRAY
15738: ARRAY
15739: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
15740: LD_ADDR_VAR 0 7
15744: PUSH
15745: LD_VAR 0 7
15749: PUSH
15750: LD_VAR 0 6
15754: PUSH
15755: EMPTY
15756: LIST
15757: ADD
15758: ST_TO_ADDR
// end ;
15759: GO 15715
15761: POP
15762: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
15763: LD_ADDR_VAR 0 6
15767: PUSH
15768: LD_VAR 0 6
15772: PPUSH
15773: LD_VAR 0 2
15777: PUSH
15778: LD_VAR 0 2
15782: ARRAY
15783: PPUSH
15784: LD_VAR 0 3
15788: PPUSH
15789: CALL_OW 1
15793: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
15794: LD_ADDR_VAR 0 7
15798: PUSH
15799: LD_VAR 0 7
15803: PPUSH
15804: LD_VAR 0 7
15808: PPUSH
15809: LD_VAR 0 6
15813: PPUSH
15814: CALL_OW 1
15818: ST_TO_ADDR
// for i = s_arr downto 2 do
15819: LD_ADDR_VAR 0 5
15823: PUSH
15824: DOUBLE
15825: LD_VAR 0 7
15829: INC
15830: ST_TO_ADDR
15831: LD_INT 2
15833: PUSH
15834: FOR_DOWNTO
15835: IFFALSE 15919
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
15837: LD_ADDR_VAR 0 6
15841: PUSH
15842: LD_VAR 0 7
15846: PUSH
15847: LD_VAR 0 5
15851: PUSH
15852: LD_INT 1
15854: MINUS
15855: ARRAY
15856: PPUSH
15857: LD_VAR 0 2
15861: PUSH
15862: LD_VAR 0 5
15866: PUSH
15867: LD_INT 1
15869: MINUS
15870: ARRAY
15871: PPUSH
15872: LD_VAR 0 7
15876: PUSH
15877: LD_VAR 0 5
15881: ARRAY
15882: PPUSH
15883: CALL_OW 1
15887: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
15888: LD_ADDR_VAR 0 7
15892: PUSH
15893: LD_VAR 0 7
15897: PPUSH
15898: LD_VAR 0 5
15902: PUSH
15903: LD_INT 1
15905: MINUS
15906: PPUSH
15907: LD_VAR 0 6
15911: PPUSH
15912: CALL_OW 1
15916: ST_TO_ADDR
// end ;
15917: GO 15834
15919: POP
15920: POP
// result := s_arr [ 1 ] ;
15921: LD_ADDR_VAR 0 4
15925: PUSH
15926: LD_VAR 0 7
15930: PUSH
15931: LD_INT 1
15933: ARRAY
15934: ST_TO_ADDR
// end ; end ;
15935: LD_VAR 0 4
15939: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
15940: LD_INT 0
15942: PPUSH
15943: PPUSH
// if not list then
15944: LD_VAR 0 1
15948: NOT
15949: IFFALSE 15953
// exit ;
15951: GO 16044
// i := list [ pos1 ] ;
15953: LD_ADDR_VAR 0 5
15957: PUSH
15958: LD_VAR 0 1
15962: PUSH
15963: LD_VAR 0 2
15967: ARRAY
15968: ST_TO_ADDR
// if not i then
15969: LD_VAR 0 5
15973: NOT
15974: IFFALSE 15978
// exit ;
15976: GO 16044
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
15978: LD_ADDR_VAR 0 1
15982: PUSH
15983: LD_VAR 0 1
15987: PPUSH
15988: LD_VAR 0 2
15992: PPUSH
15993: LD_VAR 0 1
15997: PUSH
15998: LD_VAR 0 3
16002: ARRAY
16003: PPUSH
16004: CALL_OW 1
16008: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
16009: LD_ADDR_VAR 0 1
16013: PUSH
16014: LD_VAR 0 1
16018: PPUSH
16019: LD_VAR 0 3
16023: PPUSH
16024: LD_VAR 0 5
16028: PPUSH
16029: CALL_OW 1
16033: ST_TO_ADDR
// result := list ;
16034: LD_ADDR_VAR 0 4
16038: PUSH
16039: LD_VAR 0 1
16043: ST_TO_ADDR
// end ;
16044: LD_VAR 0 4
16048: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
16049: LD_INT 0
16051: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
16052: LD_ADDR_VAR 0 5
16056: PUSH
16057: LD_VAR 0 1
16061: PPUSH
16062: CALL_OW 250
16066: PPUSH
16067: LD_VAR 0 1
16071: PPUSH
16072: CALL_OW 251
16076: PPUSH
16077: LD_VAR 0 2
16081: PPUSH
16082: LD_VAR 0 3
16086: PPUSH
16087: LD_VAR 0 4
16091: PPUSH
16092: CALL 16474 0 5
16096: ST_TO_ADDR
// end ;
16097: LD_VAR 0 5
16101: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
16102: LD_INT 0
16104: PPUSH
16105: PPUSH
16106: PPUSH
16107: PPUSH
// if not list or not unit then
16108: LD_VAR 0 2
16112: NOT
16113: IFTRUE 16122
16115: PUSH
16116: LD_VAR 0 1
16120: NOT
16121: OR
16122: IFFALSE 16126
// exit ;
16124: GO 16469
// result := [ ] ;
16126: LD_ADDR_VAR 0 5
16130: PUSH
16131: EMPTY
16132: ST_TO_ADDR
// for i in list do
16133: LD_ADDR_VAR 0 6
16137: PUSH
16138: LD_VAR 0 2
16142: PUSH
16143: FOR_IN
16144: IFFALSE 16362
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
16146: LD_ADDR_VAR 0 8
16150: PUSH
16151: LD_VAR 0 1
16155: PPUSH
16156: LD_VAR 0 6
16160: PUSH
16161: LD_INT 1
16163: ARRAY
16164: PPUSH
16165: LD_VAR 0 6
16169: PUSH
16170: LD_INT 2
16172: ARRAY
16173: PPUSH
16174: CALL_OW 297
16178: ST_TO_ADDR
// if not Count ( result ) then
16179: LD_VAR 0 5
16183: PPUSH
16184: CALL 12696 0 1
16188: NOT
16189: IFFALSE 16222
// begin result := Join ( result , [ i , tmp ] ) ;
16191: LD_ADDR_VAR 0 5
16195: PUSH
16196: LD_VAR 0 5
16200: PPUSH
16201: LD_VAR 0 6
16205: PUSH
16206: LD_VAR 0 8
16210: PUSH
16211: EMPTY
16212: LIST
16213: LIST
16214: PPUSH
16215: CALL 48662 0 2
16219: ST_TO_ADDR
// continue ;
16220: GO 16143
// end ; if result [ result ] [ 2 ] <= tmp then
16222: LD_VAR 0 5
16226: PUSH
16227: LD_VAR 0 5
16231: ARRAY
16232: PUSH
16233: LD_INT 2
16235: ARRAY
16236: PUSH
16237: LD_VAR 0 8
16241: LESSEQUAL
16242: IFFALSE 16275
// result := Join ( result , [ i , tmp ] ) else
16244: LD_ADDR_VAR 0 5
16248: PUSH
16249: LD_VAR 0 5
16253: PPUSH
16254: LD_VAR 0 6
16258: PUSH
16259: LD_VAR 0 8
16263: PUSH
16264: EMPTY
16265: LIST
16266: LIST
16267: PPUSH
16268: CALL 48662 0 2
16272: ST_TO_ADDR
16273: GO 16360
// begin for j := 1 to Count ( result ) do
16275: LD_ADDR_VAR 0 7
16279: PUSH
16280: DOUBLE
16281: LD_INT 1
16283: DEC
16284: ST_TO_ADDR
16285: LD_VAR 0 5
16289: PPUSH
16290: CALL 12696 0 1
16294: PUSH
16295: FOR_TO
16296: IFFALSE 16358
// begin if tmp < result [ j ] [ 2 ] then
16298: LD_VAR 0 8
16302: PUSH
16303: LD_VAR 0 5
16307: PUSH
16308: LD_VAR 0 7
16312: ARRAY
16313: PUSH
16314: LD_INT 2
16316: ARRAY
16317: LESS
16318: IFFALSE 16356
// begin result := Insert ( result , j , [ i , tmp ] ) ;
16320: LD_ADDR_VAR 0 5
16324: PUSH
16325: LD_VAR 0 5
16329: PPUSH
16330: LD_VAR 0 7
16334: PPUSH
16335: LD_VAR 0 6
16339: PUSH
16340: LD_VAR 0 8
16344: PUSH
16345: EMPTY
16346: LIST
16347: LIST
16348: PPUSH
16349: CALL_OW 2
16353: ST_TO_ADDR
// break ;
16354: GO 16358
// end ; end ;
16356: GO 16295
16358: POP
16359: POP
// end ; end ;
16360: GO 16143
16362: POP
16363: POP
// if result and not asc then
16364: LD_VAR 0 5
16368: IFFALSE 16377
16370: PUSH
16371: LD_VAR 0 3
16375: NOT
16376: AND
16377: IFFALSE 16394
// result := ReverseArray ( result ) ;
16379: LD_ADDR_VAR 0 5
16383: PUSH
16384: LD_VAR 0 5
16388: PPUSH
16389: CALL 43752 0 1
16393: ST_TO_ADDR
// tmp := [ ] ;
16394: LD_ADDR_VAR 0 8
16398: PUSH
16399: EMPTY
16400: ST_TO_ADDR
// if mode then
16401: LD_VAR 0 4
16405: IFFALSE 16469
// begin for i := 1 to result do
16407: LD_ADDR_VAR 0 6
16411: PUSH
16412: DOUBLE
16413: LD_INT 1
16415: DEC
16416: ST_TO_ADDR
16417: LD_VAR 0 5
16421: PUSH
16422: FOR_TO
16423: IFFALSE 16457
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
16425: LD_ADDR_VAR 0 8
16429: PUSH
16430: LD_VAR 0 8
16434: PPUSH
16435: LD_VAR 0 5
16439: PUSH
16440: LD_VAR 0 6
16444: ARRAY
16445: PUSH
16446: LD_INT 1
16448: ARRAY
16449: PPUSH
16450: CALL 48662 0 2
16454: ST_TO_ADDR
16455: GO 16422
16457: POP
16458: POP
// result := tmp ;
16459: LD_ADDR_VAR 0 5
16463: PUSH
16464: LD_VAR 0 8
16468: ST_TO_ADDR
// end ; end ;
16469: LD_VAR 0 5
16473: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
16474: LD_INT 0
16476: PPUSH
16477: PPUSH
16478: PPUSH
16479: PPUSH
// if not list then
16480: LD_VAR 0 3
16484: NOT
16485: IFFALSE 16489
// exit ;
16487: GO 16879
// result := [ ] ;
16489: LD_ADDR_VAR 0 6
16493: PUSH
16494: EMPTY
16495: ST_TO_ADDR
// for i in list do
16496: LD_ADDR_VAR 0 7
16500: PUSH
16501: LD_VAR 0 3
16505: PUSH
16506: FOR_IN
16507: IFFALSE 16709
// begin tmp := GetDistUnitXY ( i , x , y ) ;
16509: LD_ADDR_VAR 0 9
16513: PUSH
16514: LD_VAR 0 7
16518: PPUSH
16519: LD_VAR 0 1
16523: PPUSH
16524: LD_VAR 0 2
16528: PPUSH
16529: CALL_OW 297
16533: ST_TO_ADDR
// if not result then
16534: LD_VAR 0 6
16538: NOT
16539: IFFALSE 16565
// result := [ [ i , tmp ] ] else
16541: LD_ADDR_VAR 0 6
16545: PUSH
16546: LD_VAR 0 7
16550: PUSH
16551: LD_VAR 0 9
16555: PUSH
16556: EMPTY
16557: LIST
16558: LIST
16559: PUSH
16560: EMPTY
16561: LIST
16562: ST_TO_ADDR
16563: GO 16707
// begin if result [ result ] [ 2 ] <= tmp then
16565: LD_VAR 0 6
16569: PUSH
16570: LD_VAR 0 6
16574: ARRAY
16575: PUSH
16576: LD_INT 2
16578: ARRAY
16579: PUSH
16580: LD_VAR 0 9
16584: LESSEQUAL
16585: IFFALSE 16627
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
16587: LD_ADDR_VAR 0 6
16591: PUSH
16592: LD_VAR 0 6
16596: PPUSH
16597: LD_VAR 0 6
16601: PUSH
16602: LD_INT 1
16604: PLUS
16605: PPUSH
16606: LD_VAR 0 7
16610: PUSH
16611: LD_VAR 0 9
16615: PUSH
16616: EMPTY
16617: LIST
16618: LIST
16619: PPUSH
16620: CALL_OW 2
16624: ST_TO_ADDR
16625: GO 16707
// for j := 1 to result do
16627: LD_ADDR_VAR 0 8
16631: PUSH
16632: DOUBLE
16633: LD_INT 1
16635: DEC
16636: ST_TO_ADDR
16637: LD_VAR 0 6
16641: PUSH
16642: FOR_TO
16643: IFFALSE 16705
// begin if tmp < result [ j ] [ 2 ] then
16645: LD_VAR 0 9
16649: PUSH
16650: LD_VAR 0 6
16654: PUSH
16655: LD_VAR 0 8
16659: ARRAY
16660: PUSH
16661: LD_INT 2
16663: ARRAY
16664: LESS
16665: IFFALSE 16703
// begin result := Insert ( result , j , [ i , tmp ] ) ;
16667: LD_ADDR_VAR 0 6
16671: PUSH
16672: LD_VAR 0 6
16676: PPUSH
16677: LD_VAR 0 8
16681: PPUSH
16682: LD_VAR 0 7
16686: PUSH
16687: LD_VAR 0 9
16691: PUSH
16692: EMPTY
16693: LIST
16694: LIST
16695: PPUSH
16696: CALL_OW 2
16700: ST_TO_ADDR
// break ;
16701: GO 16705
// end ; end ;
16703: GO 16642
16705: POP
16706: POP
// end ; end ;
16707: GO 16506
16709: POP
16710: POP
// if result and not asc then
16711: LD_VAR 0 6
16715: IFFALSE 16724
16717: PUSH
16718: LD_VAR 0 4
16722: NOT
16723: AND
16724: IFFALSE 16799
// begin tmp := result ;
16726: LD_ADDR_VAR 0 9
16730: PUSH
16731: LD_VAR 0 6
16735: ST_TO_ADDR
// for i = tmp downto 1 do
16736: LD_ADDR_VAR 0 7
16740: PUSH
16741: DOUBLE
16742: LD_VAR 0 9
16746: INC
16747: ST_TO_ADDR
16748: LD_INT 1
16750: PUSH
16751: FOR_DOWNTO
16752: IFFALSE 16797
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
16754: LD_ADDR_VAR 0 6
16758: PUSH
16759: LD_VAR 0 6
16763: PPUSH
16764: LD_VAR 0 9
16768: PUSH
16769: LD_VAR 0 7
16773: MINUS
16774: PUSH
16775: LD_INT 1
16777: PLUS
16778: PPUSH
16779: LD_VAR 0 9
16783: PUSH
16784: LD_VAR 0 7
16788: ARRAY
16789: PPUSH
16790: CALL_OW 1
16794: ST_TO_ADDR
16795: GO 16751
16797: POP
16798: POP
// end ; tmp := [ ] ;
16799: LD_ADDR_VAR 0 9
16803: PUSH
16804: EMPTY
16805: ST_TO_ADDR
// if mode then
16806: LD_VAR 0 5
16810: IFFALSE 16879
// begin for i = 1 to result do
16812: LD_ADDR_VAR 0 7
16816: PUSH
16817: DOUBLE
16818: LD_INT 1
16820: DEC
16821: ST_TO_ADDR
16822: LD_VAR 0 6
16826: PUSH
16827: FOR_TO
16828: IFFALSE 16867
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
16830: LD_ADDR_VAR 0 9
16834: PUSH
16835: LD_VAR 0 9
16839: PPUSH
16840: LD_VAR 0 7
16844: PPUSH
16845: LD_VAR 0 6
16849: PUSH
16850: LD_VAR 0 7
16854: ARRAY
16855: PUSH
16856: LD_INT 1
16858: ARRAY
16859: PPUSH
16860: CALL_OW 1
16864: ST_TO_ADDR
16865: GO 16827
16867: POP
16868: POP
// result := tmp ;
16869: LD_ADDR_VAR 0 6
16873: PUSH
16874: LD_VAR 0 9
16878: ST_TO_ADDR
// end ; end ;
16879: LD_VAR 0 6
16883: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
16884: LD_INT 0
16886: PPUSH
16887: PPUSH
16888: PPUSH
16889: PPUSH
16890: PPUSH
16891: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
16892: LD_ADDR_VAR 0 5
16896: PUSH
16897: LD_INT 0
16899: PUSH
16900: LD_INT 0
16902: PUSH
16903: LD_INT 0
16905: PUSH
16906: EMPTY
16907: PUSH
16908: EMPTY
16909: LIST
16910: LIST
16911: LIST
16912: LIST
16913: ST_TO_ADDR
// if not x or not y then
16914: LD_VAR 0 2
16918: NOT
16919: IFTRUE 16928
16921: PUSH
16922: LD_VAR 0 3
16926: NOT
16927: OR
16928: IFFALSE 16932
// exit ;
16930: GO 18588
// if not range then
16932: LD_VAR 0 4
16936: NOT
16937: IFFALSE 16947
// range := 10 ;
16939: LD_ADDR_VAR 0 4
16943: PUSH
16944: LD_INT 10
16946: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
16947: LD_ADDR_VAR 0 8
16951: PUSH
16952: LD_INT 81
16954: PUSH
16955: LD_VAR 0 1
16959: PUSH
16960: EMPTY
16961: LIST
16962: LIST
16963: PUSH
16964: LD_INT 92
16966: PUSH
16967: LD_VAR 0 2
16971: PUSH
16972: LD_VAR 0 3
16976: PUSH
16977: LD_VAR 0 4
16981: PUSH
16982: EMPTY
16983: LIST
16984: LIST
16985: LIST
16986: LIST
16987: PUSH
16988: LD_INT 3
16990: PUSH
16991: LD_INT 21
16993: PUSH
16994: LD_INT 3
16996: PUSH
16997: EMPTY
16998: LIST
16999: LIST
17000: PUSH
17001: EMPTY
17002: LIST
17003: LIST
17004: PUSH
17005: EMPTY
17006: LIST
17007: LIST
17008: LIST
17009: PPUSH
17010: CALL_OW 69
17014: ST_TO_ADDR
// if not tmp then
17015: LD_VAR 0 8
17019: NOT
17020: IFFALSE 17024
// exit ;
17022: GO 18588
// for i in tmp do
17024: LD_ADDR_VAR 0 6
17028: PUSH
17029: LD_VAR 0 8
17033: PUSH
17034: FOR_IN
17035: IFFALSE 18563
// begin points := [ 0 , 0 , 0 ] ;
17037: LD_ADDR_VAR 0 9
17041: PUSH
17042: LD_INT 0
17044: PUSH
17045: LD_INT 0
17047: PUSH
17048: LD_INT 0
17050: PUSH
17051: EMPTY
17052: LIST
17053: LIST
17054: LIST
17055: ST_TO_ADDR
// bpoints := 1 ;
17056: LD_ADDR_VAR 0 10
17060: PUSH
17061: LD_INT 1
17063: ST_TO_ADDR
// case GetType ( i ) of unit_human :
17064: LD_VAR 0 6
17068: PPUSH
17069: CALL_OW 247
17073: PUSH
17074: LD_INT 1
17076: DOUBLE
17077: EQUAL
17078: IFTRUE 17082
17080: GO 17664
17082: POP
// begin if GetClass ( i ) = 1 then
17083: LD_VAR 0 6
17087: PPUSH
17088: CALL_OW 257
17092: PUSH
17093: LD_INT 1
17095: EQUAL
17096: IFFALSE 17117
// points := [ 10 , 5 , 3 ] ;
17098: LD_ADDR_VAR 0 9
17102: PUSH
17103: LD_INT 10
17105: PUSH
17106: LD_INT 5
17108: PUSH
17109: LD_INT 3
17111: PUSH
17112: EMPTY
17113: LIST
17114: LIST
17115: LIST
17116: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
17117: LD_VAR 0 6
17121: PPUSH
17122: CALL_OW 257
17126: PUSH
17127: LD_INT 2
17129: PUSH
17130: LD_INT 3
17132: PUSH
17133: LD_INT 4
17135: PUSH
17136: EMPTY
17137: LIST
17138: LIST
17139: LIST
17140: IN
17141: IFFALSE 17162
// points := [ 3 , 2 , 1 ] ;
17143: LD_ADDR_VAR 0 9
17147: PUSH
17148: LD_INT 3
17150: PUSH
17151: LD_INT 2
17153: PUSH
17154: LD_INT 1
17156: PUSH
17157: EMPTY
17158: LIST
17159: LIST
17160: LIST
17161: ST_TO_ADDR
// if GetClass ( i ) = 5 then
17162: LD_VAR 0 6
17166: PPUSH
17167: CALL_OW 257
17171: PUSH
17172: LD_INT 5
17174: EQUAL
17175: IFFALSE 17196
// points := [ 130 , 5 , 2 ] ;
17177: LD_ADDR_VAR 0 9
17181: PUSH
17182: LD_INT 130
17184: PUSH
17185: LD_INT 5
17187: PUSH
17188: LD_INT 2
17190: PUSH
17191: EMPTY
17192: LIST
17193: LIST
17194: LIST
17195: ST_TO_ADDR
// if GetClass ( i ) = 8 then
17196: LD_VAR 0 6
17200: PPUSH
17201: CALL_OW 257
17205: PUSH
17206: LD_INT 8
17208: EQUAL
17209: IFFALSE 17230
// points := [ 35 , 35 , 30 ] ;
17211: LD_ADDR_VAR 0 9
17215: PUSH
17216: LD_INT 35
17218: PUSH
17219: LD_INT 35
17221: PUSH
17222: LD_INT 30
17224: PUSH
17225: EMPTY
17226: LIST
17227: LIST
17228: LIST
17229: ST_TO_ADDR
// if GetClass ( i ) = 9 then
17230: LD_VAR 0 6
17234: PPUSH
17235: CALL_OW 257
17239: PUSH
17240: LD_INT 9
17242: EQUAL
17243: IFFALSE 17264
// points := [ 20 , 55 , 40 ] ;
17245: LD_ADDR_VAR 0 9
17249: PUSH
17250: LD_INT 20
17252: PUSH
17253: LD_INT 55
17255: PUSH
17256: LD_INT 40
17258: PUSH
17259: EMPTY
17260: LIST
17261: LIST
17262: LIST
17263: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
17264: LD_VAR 0 6
17268: PPUSH
17269: CALL_OW 257
17273: PUSH
17274: LD_INT 12
17276: PUSH
17277: LD_INT 16
17279: PUSH
17280: EMPTY
17281: LIST
17282: LIST
17283: IN
17284: IFFALSE 17305
// points := [ 5 , 3 , 2 ] ;
17286: LD_ADDR_VAR 0 9
17290: PUSH
17291: LD_INT 5
17293: PUSH
17294: LD_INT 3
17296: PUSH
17297: LD_INT 2
17299: PUSH
17300: EMPTY
17301: LIST
17302: LIST
17303: LIST
17304: ST_TO_ADDR
// if GetClass ( i ) = 17 then
17305: LD_VAR 0 6
17309: PPUSH
17310: CALL_OW 257
17314: PUSH
17315: LD_INT 17
17317: EQUAL
17318: IFFALSE 17339
// points := [ 100 , 50 , 75 ] ;
17320: LD_ADDR_VAR 0 9
17324: PUSH
17325: LD_INT 100
17327: PUSH
17328: LD_INT 50
17330: PUSH
17331: LD_INT 75
17333: PUSH
17334: EMPTY
17335: LIST
17336: LIST
17337: LIST
17338: ST_TO_ADDR
// if GetClass ( i ) = 15 then
17339: LD_VAR 0 6
17343: PPUSH
17344: CALL_OW 257
17348: PUSH
17349: LD_INT 15
17351: EQUAL
17352: IFFALSE 17373
// points := [ 10 , 5 , 3 ] ;
17354: LD_ADDR_VAR 0 9
17358: PUSH
17359: LD_INT 10
17361: PUSH
17362: LD_INT 5
17364: PUSH
17365: LD_INT 3
17367: PUSH
17368: EMPTY
17369: LIST
17370: LIST
17371: LIST
17372: ST_TO_ADDR
// if GetClass ( i ) = 14 then
17373: LD_VAR 0 6
17377: PPUSH
17378: CALL_OW 257
17382: PUSH
17383: LD_INT 14
17385: EQUAL
17386: IFFALSE 17407
// points := [ 10 , 0 , 0 ] ;
17388: LD_ADDR_VAR 0 9
17392: PUSH
17393: LD_INT 10
17395: PUSH
17396: LD_INT 0
17398: PUSH
17399: LD_INT 0
17401: PUSH
17402: EMPTY
17403: LIST
17404: LIST
17405: LIST
17406: ST_TO_ADDR
// if GetClass ( i ) = 11 then
17407: LD_VAR 0 6
17411: PPUSH
17412: CALL_OW 257
17416: PUSH
17417: LD_INT 11
17419: EQUAL
17420: IFFALSE 17441
// points := [ 30 , 10 , 5 ] ;
17422: LD_ADDR_VAR 0 9
17426: PUSH
17427: LD_INT 30
17429: PUSH
17430: LD_INT 10
17432: PUSH
17433: LD_INT 5
17435: PUSH
17436: EMPTY
17437: LIST
17438: LIST
17439: LIST
17440: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
17441: LD_VAR 0 1
17445: PPUSH
17446: LD_INT 5
17448: PPUSH
17449: CALL_OW 321
17453: PUSH
17454: LD_INT 2
17456: EQUAL
17457: IFFALSE 17474
// bpoints := bpoints * 1.8 ;
17459: LD_ADDR_VAR 0 10
17463: PUSH
17464: LD_VAR 0 10
17468: PUSH
17469: LD_REAL  1.80000000000000E+0000
17472: MUL
17473: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
17474: LD_VAR 0 6
17478: PPUSH
17479: CALL_OW 257
17483: PUSH
17484: LD_INT 1
17486: PUSH
17487: LD_INT 2
17489: PUSH
17490: LD_INT 3
17492: PUSH
17493: LD_INT 4
17495: PUSH
17496: EMPTY
17497: LIST
17498: LIST
17499: LIST
17500: LIST
17501: IN
17502: IFFALSE 17522
17504: PUSH
17505: LD_VAR 0 1
17509: PPUSH
17510: LD_INT 51
17512: PPUSH
17513: CALL_OW 321
17517: PUSH
17518: LD_INT 2
17520: EQUAL
17521: AND
17522: IFFALSE 17539
// bpoints := bpoints * 1.2 ;
17524: LD_ADDR_VAR 0 10
17528: PUSH
17529: LD_VAR 0 10
17533: PUSH
17534: LD_REAL  1.20000000000000E+0000
17537: MUL
17538: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
17539: LD_VAR 0 6
17543: PPUSH
17544: CALL_OW 257
17548: PUSH
17549: LD_INT 5
17551: PUSH
17552: LD_INT 7
17554: PUSH
17555: LD_INT 9
17557: PUSH
17558: EMPTY
17559: LIST
17560: LIST
17561: LIST
17562: IN
17563: IFFALSE 17583
17565: PUSH
17566: LD_VAR 0 1
17570: PPUSH
17571: LD_INT 52
17573: PPUSH
17574: CALL_OW 321
17578: PUSH
17579: LD_INT 2
17581: EQUAL
17582: AND
17583: IFFALSE 17600
// bpoints := bpoints * 1.5 ;
17585: LD_ADDR_VAR 0 10
17589: PUSH
17590: LD_VAR 0 10
17594: PUSH
17595: LD_REAL  1.50000000000000E+0000
17598: MUL
17599: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
17600: LD_VAR 0 1
17604: PPUSH
17605: LD_INT 66
17607: PPUSH
17608: CALL_OW 321
17612: PUSH
17613: LD_INT 2
17615: EQUAL
17616: IFFALSE 17633
// bpoints := bpoints * 1.1 ;
17618: LD_ADDR_VAR 0 10
17622: PUSH
17623: LD_VAR 0 10
17627: PUSH
17628: LD_REAL  1.10000000000000E+0000
17631: MUL
17632: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
17633: LD_ADDR_VAR 0 10
17637: PUSH
17638: LD_VAR 0 10
17642: PUSH
17643: LD_VAR 0 6
17647: PPUSH
17648: LD_INT 1
17650: PPUSH
17651: CALL_OW 259
17655: PUSH
17656: LD_REAL  1.15000000000000E+0000
17659: MUL
17660: MUL
17661: ST_TO_ADDR
// end ; unit_vehicle :
17662: GO 18492
17664: LD_INT 2
17666: DOUBLE
17667: EQUAL
17668: IFTRUE 17672
17670: GO 18480
17672: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
17673: LD_VAR 0 6
17677: PPUSH
17678: CALL_OW 264
17682: PUSH
17683: LD_INT 2
17685: PUSH
17686: LD_INT 42
17688: PUSH
17689: LD_INT 24
17691: PUSH
17692: EMPTY
17693: LIST
17694: LIST
17695: LIST
17696: IN
17697: IFFALSE 17718
// points := [ 25 , 5 , 3 ] ;
17699: LD_ADDR_VAR 0 9
17703: PUSH
17704: LD_INT 25
17706: PUSH
17707: LD_INT 5
17709: PUSH
17710: LD_INT 3
17712: PUSH
17713: EMPTY
17714: LIST
17715: LIST
17716: LIST
17717: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
17718: LD_VAR 0 6
17722: PPUSH
17723: CALL_OW 264
17727: PUSH
17728: LD_INT 4
17730: PUSH
17731: LD_INT 43
17733: PUSH
17734: LD_INT 25
17736: PUSH
17737: EMPTY
17738: LIST
17739: LIST
17740: LIST
17741: IN
17742: IFFALSE 17763
// points := [ 40 , 15 , 5 ] ;
17744: LD_ADDR_VAR 0 9
17748: PUSH
17749: LD_INT 40
17751: PUSH
17752: LD_INT 15
17754: PUSH
17755: LD_INT 5
17757: PUSH
17758: EMPTY
17759: LIST
17760: LIST
17761: LIST
17762: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
17763: LD_VAR 0 6
17767: PPUSH
17768: CALL_OW 264
17772: PUSH
17773: LD_INT 3
17775: PUSH
17776: LD_INT 23
17778: PUSH
17779: EMPTY
17780: LIST
17781: LIST
17782: IN
17783: IFFALSE 17804
// points := [ 7 , 25 , 8 ] ;
17785: LD_ADDR_VAR 0 9
17789: PUSH
17790: LD_INT 7
17792: PUSH
17793: LD_INT 25
17795: PUSH
17796: LD_INT 8
17798: PUSH
17799: EMPTY
17800: LIST
17801: LIST
17802: LIST
17803: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
17804: LD_VAR 0 6
17808: PPUSH
17809: CALL_OW 264
17813: PUSH
17814: LD_INT 5
17816: PUSH
17817: LD_INT 27
17819: PUSH
17820: LD_INT 44
17822: PUSH
17823: EMPTY
17824: LIST
17825: LIST
17826: LIST
17827: IN
17828: IFFALSE 17849
// points := [ 14 , 50 , 16 ] ;
17830: LD_ADDR_VAR 0 9
17834: PUSH
17835: LD_INT 14
17837: PUSH
17838: LD_INT 50
17840: PUSH
17841: LD_INT 16
17843: PUSH
17844: EMPTY
17845: LIST
17846: LIST
17847: LIST
17848: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
17849: LD_VAR 0 6
17853: PPUSH
17854: CALL_OW 264
17858: PUSH
17859: LD_INT 6
17861: PUSH
17862: LD_INT 46
17864: PUSH
17865: EMPTY
17866: LIST
17867: LIST
17868: IN
17869: IFFALSE 17890
// points := [ 32 , 120 , 70 ] ;
17871: LD_ADDR_VAR 0 9
17875: PUSH
17876: LD_INT 32
17878: PUSH
17879: LD_INT 120
17881: PUSH
17882: LD_INT 70
17884: PUSH
17885: EMPTY
17886: LIST
17887: LIST
17888: LIST
17889: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
17890: LD_VAR 0 6
17894: PPUSH
17895: CALL_OW 264
17899: PUSH
17900: LD_INT 7
17902: PUSH
17903: LD_INT 28
17905: PUSH
17906: LD_INT 45
17908: PUSH
17909: LD_INT 92
17911: PUSH
17912: EMPTY
17913: LIST
17914: LIST
17915: LIST
17916: LIST
17917: IN
17918: IFFALSE 17939
// points := [ 35 , 20 , 45 ] ;
17920: LD_ADDR_VAR 0 9
17924: PUSH
17925: LD_INT 35
17927: PUSH
17928: LD_INT 20
17930: PUSH
17931: LD_INT 45
17933: PUSH
17934: EMPTY
17935: LIST
17936: LIST
17937: LIST
17938: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
17939: LD_VAR 0 6
17943: PPUSH
17944: CALL_OW 264
17948: PUSH
17949: LD_INT 47
17951: PUSH
17952: EMPTY
17953: LIST
17954: IN
17955: IFFALSE 17976
// points := [ 67 , 45 , 75 ] ;
17957: LD_ADDR_VAR 0 9
17961: PUSH
17962: LD_INT 67
17964: PUSH
17965: LD_INT 45
17967: PUSH
17968: LD_INT 75
17970: PUSH
17971: EMPTY
17972: LIST
17973: LIST
17974: LIST
17975: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
17976: LD_VAR 0 6
17980: PPUSH
17981: CALL_OW 264
17985: PUSH
17986: LD_INT 26
17988: PUSH
17989: EMPTY
17990: LIST
17991: IN
17992: IFFALSE 18013
// points := [ 120 , 30 , 80 ] ;
17994: LD_ADDR_VAR 0 9
17998: PUSH
17999: LD_INT 120
18001: PUSH
18002: LD_INT 30
18004: PUSH
18005: LD_INT 80
18007: PUSH
18008: EMPTY
18009: LIST
18010: LIST
18011: LIST
18012: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
18013: LD_VAR 0 6
18017: PPUSH
18018: CALL_OW 264
18022: PUSH
18023: LD_INT 22
18025: PUSH
18026: EMPTY
18027: LIST
18028: IN
18029: IFFALSE 18050
// points := [ 40 , 1 , 1 ] ;
18031: LD_ADDR_VAR 0 9
18035: PUSH
18036: LD_INT 40
18038: PUSH
18039: LD_INT 1
18041: PUSH
18042: LD_INT 1
18044: PUSH
18045: EMPTY
18046: LIST
18047: LIST
18048: LIST
18049: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
18050: LD_VAR 0 6
18054: PPUSH
18055: CALL_OW 264
18059: PUSH
18060: LD_INT 29
18062: PUSH
18063: EMPTY
18064: LIST
18065: IN
18066: IFFALSE 18087
// points := [ 70 , 200 , 400 ] ;
18068: LD_ADDR_VAR 0 9
18072: PUSH
18073: LD_INT 70
18075: PUSH
18076: LD_INT 200
18078: PUSH
18079: LD_INT 400
18081: PUSH
18082: EMPTY
18083: LIST
18084: LIST
18085: LIST
18086: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
18087: LD_VAR 0 6
18091: PPUSH
18092: CALL_OW 264
18096: PUSH
18097: LD_INT 14
18099: PUSH
18100: LD_INT 53
18102: PUSH
18103: EMPTY
18104: LIST
18105: LIST
18106: IN
18107: IFFALSE 18128
// points := [ 40 , 10 , 20 ] ;
18109: LD_ADDR_VAR 0 9
18113: PUSH
18114: LD_INT 40
18116: PUSH
18117: LD_INT 10
18119: PUSH
18120: LD_INT 20
18122: PUSH
18123: EMPTY
18124: LIST
18125: LIST
18126: LIST
18127: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
18128: LD_VAR 0 6
18132: PPUSH
18133: CALL_OW 264
18137: PUSH
18138: LD_INT 9
18140: PUSH
18141: EMPTY
18142: LIST
18143: IN
18144: IFFALSE 18165
// points := [ 5 , 70 , 20 ] ;
18146: LD_ADDR_VAR 0 9
18150: PUSH
18151: LD_INT 5
18153: PUSH
18154: LD_INT 70
18156: PUSH
18157: LD_INT 20
18159: PUSH
18160: EMPTY
18161: LIST
18162: LIST
18163: LIST
18164: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
18165: LD_VAR 0 6
18169: PPUSH
18170: CALL_OW 264
18174: PUSH
18175: LD_INT 10
18177: PUSH
18178: EMPTY
18179: LIST
18180: IN
18181: IFFALSE 18202
// points := [ 35 , 110 , 70 ] ;
18183: LD_ADDR_VAR 0 9
18187: PUSH
18188: LD_INT 35
18190: PUSH
18191: LD_INT 110
18193: PUSH
18194: LD_INT 70
18196: PUSH
18197: EMPTY
18198: LIST
18199: LIST
18200: LIST
18201: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
18202: LD_VAR 0 6
18206: PPUSH
18207: CALL_OW 265
18211: PUSH
18212: LD_INT 25
18214: EQUAL
18215: IFFALSE 18236
// points := [ 80 , 65 , 100 ] ;
18217: LD_ADDR_VAR 0 9
18221: PUSH
18222: LD_INT 80
18224: PUSH
18225: LD_INT 65
18227: PUSH
18228: LD_INT 100
18230: PUSH
18231: EMPTY
18232: LIST
18233: LIST
18234: LIST
18235: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
18236: LD_VAR 0 6
18240: PPUSH
18241: CALL_OW 263
18245: PUSH
18246: LD_INT 1
18248: EQUAL
18249: IFFALSE 18284
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
18251: LD_ADDR_VAR 0 10
18255: PUSH
18256: LD_VAR 0 10
18260: PUSH
18261: LD_VAR 0 6
18265: PPUSH
18266: CALL_OW 311
18270: PPUSH
18271: LD_INT 3
18273: PPUSH
18274: CALL_OW 259
18278: PUSH
18279: LD_INT 4
18281: MUL
18282: MUL
18283: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
18284: LD_VAR 0 6
18288: PPUSH
18289: CALL_OW 263
18293: PUSH
18294: LD_INT 2
18296: EQUAL
18297: IFFALSE 18348
// begin j := IsControledBy ( i ) ;
18299: LD_ADDR_VAR 0 7
18303: PUSH
18304: LD_VAR 0 6
18308: PPUSH
18309: CALL_OW 312
18313: ST_TO_ADDR
// if j then
18314: LD_VAR 0 7
18318: IFFALSE 18348
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
18320: LD_ADDR_VAR 0 10
18324: PUSH
18325: LD_VAR 0 10
18329: PUSH
18330: LD_VAR 0 7
18334: PPUSH
18335: LD_INT 3
18337: PPUSH
18338: CALL_OW 259
18342: PUSH
18343: LD_INT 3
18345: MUL
18346: MUL
18347: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
18348: LD_VAR 0 6
18352: PPUSH
18353: CALL_OW 264
18357: PUSH
18358: LD_INT 5
18360: PUSH
18361: LD_INT 6
18363: PUSH
18364: LD_INT 46
18366: PUSH
18367: LD_INT 44
18369: PUSH
18370: LD_INT 47
18372: PUSH
18373: LD_INT 45
18375: PUSH
18376: LD_INT 28
18378: PUSH
18379: LD_INT 7
18381: PUSH
18382: LD_INT 27
18384: PUSH
18385: LD_INT 29
18387: PUSH
18388: EMPTY
18389: LIST
18390: LIST
18391: LIST
18392: LIST
18393: LIST
18394: LIST
18395: LIST
18396: LIST
18397: LIST
18398: LIST
18399: IN
18400: IFFALSE 18420
18402: PUSH
18403: LD_VAR 0 1
18407: PPUSH
18408: LD_INT 52
18410: PPUSH
18411: CALL_OW 321
18415: PUSH
18416: LD_INT 2
18418: EQUAL
18419: AND
18420: IFFALSE 18437
// bpoints := bpoints * 1.2 ;
18422: LD_ADDR_VAR 0 10
18426: PUSH
18427: LD_VAR 0 10
18431: PUSH
18432: LD_REAL  1.20000000000000E+0000
18435: MUL
18436: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
18437: LD_VAR 0 6
18441: PPUSH
18442: CALL_OW 264
18446: PUSH
18447: LD_INT 6
18449: PUSH
18450: LD_INT 46
18452: PUSH
18453: LD_INT 47
18455: PUSH
18456: EMPTY
18457: LIST
18458: LIST
18459: LIST
18460: IN
18461: IFFALSE 18478
// bpoints := bpoints * 1.2 ;
18463: LD_ADDR_VAR 0 10
18467: PUSH
18468: LD_VAR 0 10
18472: PUSH
18473: LD_REAL  1.20000000000000E+0000
18476: MUL
18477: ST_TO_ADDR
// end ; unit_building :
18478: GO 18492
18480: LD_INT 3
18482: DOUBLE
18483: EQUAL
18484: IFTRUE 18488
18486: GO 18491
18488: POP
// ; end ;
18489: GO 18492
18491: POP
// for j = 1 to 3 do
18492: LD_ADDR_VAR 0 7
18496: PUSH
18497: DOUBLE
18498: LD_INT 1
18500: DEC
18501: ST_TO_ADDR
18502: LD_INT 3
18504: PUSH
18505: FOR_TO
18506: IFFALSE 18559
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
18508: LD_ADDR_VAR 0 5
18512: PUSH
18513: LD_VAR 0 5
18517: PPUSH
18518: LD_VAR 0 7
18522: PPUSH
18523: LD_VAR 0 5
18527: PUSH
18528: LD_VAR 0 7
18532: ARRAY
18533: PUSH
18534: LD_VAR 0 9
18538: PUSH
18539: LD_VAR 0 7
18543: ARRAY
18544: PUSH
18545: LD_VAR 0 10
18549: MUL
18550: PLUS
18551: PPUSH
18552: CALL_OW 1
18556: ST_TO_ADDR
18557: GO 18505
18559: POP
18560: POP
// end ;
18561: GO 17034
18563: POP
18564: POP
// result := Replace ( result , 4 , tmp ) ;
18565: LD_ADDR_VAR 0 5
18569: PUSH
18570: LD_VAR 0 5
18574: PPUSH
18575: LD_INT 4
18577: PPUSH
18578: LD_VAR 0 8
18582: PPUSH
18583: CALL_OW 1
18587: ST_TO_ADDR
// end ;
18588: LD_VAR 0 5
18592: RET
// export function DangerAtRange ( unit , range ) ; begin
18593: LD_INT 0
18595: PPUSH
// if not unit then
18596: LD_VAR 0 1
18600: NOT
18601: IFFALSE 18605
// exit ;
18603: GO 18650
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
18605: LD_ADDR_VAR 0 3
18609: PUSH
18610: LD_VAR 0 1
18614: PPUSH
18615: CALL_OW 255
18619: PPUSH
18620: LD_VAR 0 1
18624: PPUSH
18625: CALL_OW 250
18629: PPUSH
18630: LD_VAR 0 1
18634: PPUSH
18635: CALL_OW 251
18639: PPUSH
18640: LD_VAR 0 2
18644: PPUSH
18645: CALL 16884 0 4
18649: ST_TO_ADDR
// end ;
18650: LD_VAR 0 3
18654: RET
// export function DangerInArea ( side , area ) ; begin
18655: LD_INT 0
18657: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
18658: LD_ADDR_VAR 0 3
18662: PUSH
18663: LD_VAR 0 2
18667: PPUSH
18668: LD_INT 81
18670: PUSH
18671: LD_VAR 0 1
18675: PUSH
18676: EMPTY
18677: LIST
18678: LIST
18679: PPUSH
18680: CALL_OW 70
18684: ST_TO_ADDR
// end ;
18685: LD_VAR 0 3
18689: RET
// export function IsExtension ( b ) ; begin
18690: LD_INT 0
18692: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
18693: LD_ADDR_VAR 0 2
18697: PUSH
18698: LD_VAR 0 1
18702: PUSH
18703: LD_INT 23
18705: PUSH
18706: LD_INT 20
18708: PUSH
18709: LD_INT 22
18711: PUSH
18712: LD_INT 17
18714: PUSH
18715: LD_INT 24
18717: PUSH
18718: LD_INT 21
18720: PUSH
18721: LD_INT 19
18723: PUSH
18724: LD_INT 16
18726: PUSH
18727: LD_INT 25
18729: PUSH
18730: LD_INT 18
18732: PUSH
18733: EMPTY
18734: LIST
18735: LIST
18736: LIST
18737: LIST
18738: LIST
18739: LIST
18740: LIST
18741: LIST
18742: LIST
18743: LIST
18744: IN
18745: ST_TO_ADDR
// end ;
18746: LD_VAR 0 2
18750: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
18751: LD_INT 0
18753: PPUSH
18754: PPUSH
18755: PPUSH
// result := [ ] ;
18756: LD_ADDR_VAR 0 4
18760: PUSH
18761: EMPTY
18762: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
18763: LD_ADDR_VAR 0 5
18767: PUSH
18768: LD_VAR 0 2
18772: PPUSH
18773: LD_INT 21
18775: PUSH
18776: LD_INT 3
18778: PUSH
18779: EMPTY
18780: LIST
18781: LIST
18782: PPUSH
18783: CALL_OW 70
18787: ST_TO_ADDR
// if not tmp then
18788: LD_VAR 0 5
18792: NOT
18793: IFFALSE 18797
// exit ;
18795: GO 18861
// if checkLink then
18797: LD_VAR 0 3
18801: IFFALSE 18851
// begin for i in tmp do
18803: LD_ADDR_VAR 0 6
18807: PUSH
18808: LD_VAR 0 5
18812: PUSH
18813: FOR_IN
18814: IFFALSE 18849
// if GetBase ( i ) <> base then
18816: LD_VAR 0 6
18820: PPUSH
18821: CALL_OW 274
18825: PUSH
18826: LD_VAR 0 1
18830: NONEQUAL
18831: IFFALSE 18847
// ComLinkToBase ( base , i ) ;
18833: LD_VAR 0 1
18837: PPUSH
18838: LD_VAR 0 6
18842: PPUSH
18843: CALL_OW 169
18847: GO 18813
18849: POP
18850: POP
// end ; result := tmp ;
18851: LD_ADDR_VAR 0 4
18855: PUSH
18856: LD_VAR 0 5
18860: ST_TO_ADDR
// end ;
18861: LD_VAR 0 4
18865: RET
// export function ComComplete ( units , b ) ; var i ; begin
18866: LD_INT 0
18868: PPUSH
18869: PPUSH
// if not units then
18870: LD_VAR 0 1
18874: NOT
18875: IFFALSE 18879
// exit ;
18877: GO 18969
// for i in units do
18879: LD_ADDR_VAR 0 4
18883: PUSH
18884: LD_VAR 0 1
18888: PUSH
18889: FOR_IN
18890: IFFALSE 18967
// if BuildingStatus ( b ) = bs_build then
18892: LD_VAR 0 2
18896: PPUSH
18897: CALL_OW 461
18901: PUSH
18902: LD_INT 1
18904: EQUAL
18905: IFFALSE 18965
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
18907: LD_VAR 0 4
18911: PPUSH
18912: LD_STRING h
18914: PUSH
18915: LD_VAR 0 2
18919: PPUSH
18920: CALL_OW 250
18924: PUSH
18925: LD_VAR 0 2
18929: PPUSH
18930: CALL_OW 251
18934: PUSH
18935: LD_VAR 0 2
18939: PUSH
18940: LD_INT 0
18942: PUSH
18943: LD_INT 0
18945: PUSH
18946: LD_INT 0
18948: PUSH
18949: EMPTY
18950: LIST
18951: LIST
18952: LIST
18953: LIST
18954: LIST
18955: LIST
18956: LIST
18957: PUSH
18958: EMPTY
18959: LIST
18960: PPUSH
18961: CALL_OW 446
18965: GO 18889
18967: POP
18968: POP
// end ;
18969: LD_VAR 0 3
18973: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
18974: LD_INT 0
18976: PPUSH
18977: PPUSH
18978: PPUSH
18979: PPUSH
18980: PPUSH
18981: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
18982: LD_VAR 0 1
18986: NOT
18987: IFTRUE 19004
18989: PUSH
18990: LD_VAR 0 1
18994: PPUSH
18995: CALL_OW 263
18999: PUSH
19000: LD_INT 2
19002: NONEQUAL
19003: OR
19004: IFFALSE 19008
// exit ;
19006: GO 19324
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
19008: LD_ADDR_VAR 0 6
19012: PUSH
19013: LD_INT 22
19015: PUSH
19016: LD_VAR 0 1
19020: PPUSH
19021: CALL_OW 255
19025: PUSH
19026: EMPTY
19027: LIST
19028: LIST
19029: PUSH
19030: LD_INT 2
19032: PUSH
19033: LD_INT 30
19035: PUSH
19036: LD_INT 36
19038: PUSH
19039: EMPTY
19040: LIST
19041: LIST
19042: PUSH
19043: LD_INT 34
19045: PUSH
19046: LD_INT 31
19048: PUSH
19049: EMPTY
19050: LIST
19051: LIST
19052: PUSH
19053: EMPTY
19054: LIST
19055: LIST
19056: LIST
19057: PUSH
19058: EMPTY
19059: LIST
19060: LIST
19061: PPUSH
19062: CALL_OW 69
19066: ST_TO_ADDR
// if not tmp then
19067: LD_VAR 0 6
19071: NOT
19072: IFFALSE 19076
// exit ;
19074: GO 19324
// result := [ ] ;
19076: LD_ADDR_VAR 0 2
19080: PUSH
19081: EMPTY
19082: ST_TO_ADDR
// for i in tmp do
19083: LD_ADDR_VAR 0 3
19087: PUSH
19088: LD_VAR 0 6
19092: PUSH
19093: FOR_IN
19094: IFFALSE 19165
// begin t := UnitsInside ( i ) ;
19096: LD_ADDR_VAR 0 4
19100: PUSH
19101: LD_VAR 0 3
19105: PPUSH
19106: CALL_OW 313
19110: ST_TO_ADDR
// if t then
19111: LD_VAR 0 4
19115: IFFALSE 19163
// for j in t do
19117: LD_ADDR_VAR 0 7
19121: PUSH
19122: LD_VAR 0 4
19126: PUSH
19127: FOR_IN
19128: IFFALSE 19161
// result := Replace ( result , result + 1 , j ) ;
19130: LD_ADDR_VAR 0 2
19134: PUSH
19135: LD_VAR 0 2
19139: PPUSH
19140: LD_VAR 0 2
19144: PUSH
19145: LD_INT 1
19147: PLUS
19148: PPUSH
19149: LD_VAR 0 7
19153: PPUSH
19154: CALL_OW 1
19158: ST_TO_ADDR
19159: GO 19127
19161: POP
19162: POP
// end ;
19163: GO 19093
19165: POP
19166: POP
// if not result then
19167: LD_VAR 0 2
19171: NOT
19172: IFFALSE 19176
// exit ;
19174: GO 19324
// mech := result [ 1 ] ;
19176: LD_ADDR_VAR 0 5
19180: PUSH
19181: LD_VAR 0 2
19185: PUSH
19186: LD_INT 1
19188: ARRAY
19189: ST_TO_ADDR
// if result > 1 then
19190: LD_VAR 0 2
19194: PUSH
19195: LD_INT 1
19197: GREATER
19198: IFFALSE 19310
// begin for i = 2 to result do
19200: LD_ADDR_VAR 0 3
19204: PUSH
19205: DOUBLE
19206: LD_INT 2
19208: DEC
19209: ST_TO_ADDR
19210: LD_VAR 0 2
19214: PUSH
19215: FOR_TO
19216: IFFALSE 19308
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
19218: LD_ADDR_VAR 0 4
19222: PUSH
19223: LD_VAR 0 2
19227: PUSH
19228: LD_VAR 0 3
19232: ARRAY
19233: PPUSH
19234: LD_INT 3
19236: PPUSH
19237: CALL_OW 259
19241: PUSH
19242: LD_VAR 0 2
19246: PUSH
19247: LD_VAR 0 3
19251: ARRAY
19252: PPUSH
19253: CALL_OW 432
19257: MINUS
19258: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
19259: LD_VAR 0 4
19263: PUSH
19264: LD_VAR 0 5
19268: PPUSH
19269: LD_INT 3
19271: PPUSH
19272: CALL_OW 259
19276: PUSH
19277: LD_VAR 0 5
19281: PPUSH
19282: CALL_OW 432
19286: MINUS
19287: GREATEREQUAL
19288: IFFALSE 19306
// mech := result [ i ] ;
19290: LD_ADDR_VAR 0 5
19294: PUSH
19295: LD_VAR 0 2
19299: PUSH
19300: LD_VAR 0 3
19304: ARRAY
19305: ST_TO_ADDR
// end ;
19306: GO 19215
19308: POP
19309: POP
// end ; ComLinkTo ( vehicle , mech ) ;
19310: LD_VAR 0 1
19314: PPUSH
19315: LD_VAR 0 5
19319: PPUSH
19320: CALL_OW 135
// end ;
19324: LD_VAR 0 2
19328: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
19329: LD_INT 0
19331: PPUSH
19332: PPUSH
19333: PPUSH
19334: PPUSH
19335: PPUSH
19336: PPUSH
19337: PPUSH
19338: PPUSH
19339: PPUSH
19340: PPUSH
19341: PPUSH
19342: PPUSH
19343: PPUSH
// result := [ ] ;
19344: LD_ADDR_VAR 0 7
19348: PUSH
19349: EMPTY
19350: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
19351: LD_VAR 0 1
19355: PPUSH
19356: CALL_OW 266
19360: PUSH
19361: LD_INT 0
19363: PUSH
19364: LD_INT 1
19366: PUSH
19367: EMPTY
19368: LIST
19369: LIST
19370: IN
19371: NOT
19372: IFFALSE 19376
// exit ;
19374: GO 21016
// if name then
19376: LD_VAR 0 3
19380: IFFALSE 19396
// SetBName ( base_dep , name ) ;
19382: LD_VAR 0 1
19386: PPUSH
19387: LD_VAR 0 3
19391: PPUSH
19392: CALL_OW 500
// base := GetBase ( base_dep ) ;
19396: LD_ADDR_VAR 0 15
19400: PUSH
19401: LD_VAR 0 1
19405: PPUSH
19406: CALL_OW 274
19410: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
19411: LD_ADDR_VAR 0 16
19415: PUSH
19416: LD_VAR 0 1
19420: PPUSH
19421: CALL_OW 255
19425: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
19426: LD_ADDR_VAR 0 17
19430: PUSH
19431: LD_VAR 0 1
19435: PPUSH
19436: CALL_OW 248
19440: ST_TO_ADDR
// if sources then
19441: LD_VAR 0 5
19445: IFFALSE 19492
// for i = 1 to 3 do
19447: LD_ADDR_VAR 0 8
19451: PUSH
19452: DOUBLE
19453: LD_INT 1
19455: DEC
19456: ST_TO_ADDR
19457: LD_INT 3
19459: PUSH
19460: FOR_TO
19461: IFFALSE 19490
// AddResourceType ( base , i , sources [ i ] ) ;
19463: LD_VAR 0 15
19467: PPUSH
19468: LD_VAR 0 8
19472: PPUSH
19473: LD_VAR 0 5
19477: PUSH
19478: LD_VAR 0 8
19482: ARRAY
19483: PPUSH
19484: CALL_OW 276
19488: GO 19460
19490: POP
19491: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
19492: LD_ADDR_VAR 0 18
19496: PUSH
19497: LD_VAR 0 15
19501: PPUSH
19502: LD_VAR 0 2
19506: PPUSH
19507: LD_INT 1
19509: PPUSH
19510: CALL 18751 0 3
19514: ST_TO_ADDR
// InitHc ;
19515: CALL_OW 19
// InitUc ;
19519: CALL_OW 18
// uc_side := side ;
19523: LD_ADDR_OWVAR 20
19527: PUSH
19528: LD_VAR 0 16
19532: ST_TO_ADDR
// uc_nation := nation ;
19533: LD_ADDR_OWVAR 21
19537: PUSH
19538: LD_VAR 0 17
19542: ST_TO_ADDR
// if buildings then
19543: LD_VAR 0 18
19547: IFFALSE 20875
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
19549: LD_ADDR_VAR 0 19
19553: PUSH
19554: LD_VAR 0 18
19558: PPUSH
19559: LD_INT 2
19561: PUSH
19562: LD_INT 30
19564: PUSH
19565: LD_INT 29
19567: PUSH
19568: EMPTY
19569: LIST
19570: LIST
19571: PUSH
19572: LD_INT 30
19574: PUSH
19575: LD_INT 30
19577: PUSH
19578: EMPTY
19579: LIST
19580: LIST
19581: PUSH
19582: EMPTY
19583: LIST
19584: LIST
19585: LIST
19586: PPUSH
19587: CALL_OW 72
19591: ST_TO_ADDR
// if tmp then
19592: LD_VAR 0 19
19596: IFFALSE 19644
// for i in tmp do
19598: LD_ADDR_VAR 0 8
19602: PUSH
19603: LD_VAR 0 19
19607: PUSH
19608: FOR_IN
19609: IFFALSE 19642
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
19611: LD_VAR 0 8
19615: PPUSH
19616: CALL_OW 250
19620: PPUSH
19621: LD_VAR 0 8
19625: PPUSH
19626: CALL_OW 251
19630: PPUSH
19631: LD_VAR 0 16
19635: PPUSH
19636: CALL_OW 441
19640: GO 19608
19642: POP
19643: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
19644: LD_VAR 0 18
19648: PPUSH
19649: LD_INT 2
19651: PUSH
19652: LD_INT 30
19654: PUSH
19655: LD_INT 32
19657: PUSH
19658: EMPTY
19659: LIST
19660: LIST
19661: PUSH
19662: LD_INT 30
19664: PUSH
19665: LD_INT 33
19667: PUSH
19668: EMPTY
19669: LIST
19670: LIST
19671: PUSH
19672: EMPTY
19673: LIST
19674: LIST
19675: LIST
19676: PPUSH
19677: CALL_OW 72
19681: IFFALSE 19769
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
19683: LD_ADDR_VAR 0 8
19687: PUSH
19688: LD_VAR 0 18
19692: PPUSH
19693: LD_INT 2
19695: PUSH
19696: LD_INT 30
19698: PUSH
19699: LD_INT 32
19701: PUSH
19702: EMPTY
19703: LIST
19704: LIST
19705: PUSH
19706: LD_INT 30
19708: PUSH
19709: LD_INT 33
19711: PUSH
19712: EMPTY
19713: LIST
19714: LIST
19715: PUSH
19716: EMPTY
19717: LIST
19718: LIST
19719: LIST
19720: PPUSH
19721: CALL_OW 72
19725: PUSH
19726: FOR_IN
19727: IFFALSE 19767
// begin if not GetBWeapon ( i ) then
19729: LD_VAR 0 8
19733: PPUSH
19734: CALL_OW 269
19738: NOT
19739: IFFALSE 19765
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
19741: LD_VAR 0 8
19745: PPUSH
19746: LD_VAR 0 8
19750: PPUSH
19751: LD_VAR 0 2
19755: PPUSH
19756: CALL 21021 0 2
19760: PPUSH
19761: CALL_OW 431
// end ;
19765: GO 19726
19767: POP
19768: POP
// end ; for i = 1 to personel do
19769: LD_ADDR_VAR 0 8
19773: PUSH
19774: DOUBLE
19775: LD_INT 1
19777: DEC
19778: ST_TO_ADDR
19779: LD_VAR 0 6
19783: PUSH
19784: FOR_TO
19785: IFFALSE 20855
// begin if i > 4 then
19787: LD_VAR 0 8
19791: PUSH
19792: LD_INT 4
19794: GREATER
19795: IFFALSE 19799
// break ;
19797: GO 20855
// case i of 1 :
19799: LD_VAR 0 8
19803: PUSH
19804: LD_INT 1
19806: DOUBLE
19807: EQUAL
19808: IFTRUE 19812
19810: GO 19892
19812: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
19813: LD_ADDR_VAR 0 12
19817: PUSH
19818: LD_VAR 0 18
19822: PPUSH
19823: LD_INT 22
19825: PUSH
19826: LD_VAR 0 16
19830: PUSH
19831: EMPTY
19832: LIST
19833: LIST
19834: PUSH
19835: LD_INT 58
19837: PUSH
19838: EMPTY
19839: LIST
19840: PUSH
19841: LD_INT 2
19843: PUSH
19844: LD_INT 30
19846: PUSH
19847: LD_INT 32
19849: PUSH
19850: EMPTY
19851: LIST
19852: LIST
19853: PUSH
19854: LD_INT 30
19856: PUSH
19857: LD_INT 4
19859: PUSH
19860: EMPTY
19861: LIST
19862: LIST
19863: PUSH
19864: LD_INT 30
19866: PUSH
19867: LD_INT 5
19869: PUSH
19870: EMPTY
19871: LIST
19872: LIST
19873: PUSH
19874: EMPTY
19875: LIST
19876: LIST
19877: LIST
19878: LIST
19879: PUSH
19880: EMPTY
19881: LIST
19882: LIST
19883: LIST
19884: PPUSH
19885: CALL_OW 72
19889: ST_TO_ADDR
19890: GO 20114
19892: LD_INT 2
19894: DOUBLE
19895: EQUAL
19896: IFTRUE 19900
19898: GO 19962
19900: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
19901: LD_ADDR_VAR 0 12
19905: PUSH
19906: LD_VAR 0 18
19910: PPUSH
19911: LD_INT 22
19913: PUSH
19914: LD_VAR 0 16
19918: PUSH
19919: EMPTY
19920: LIST
19921: LIST
19922: PUSH
19923: LD_INT 2
19925: PUSH
19926: LD_INT 30
19928: PUSH
19929: LD_INT 0
19931: PUSH
19932: EMPTY
19933: LIST
19934: LIST
19935: PUSH
19936: LD_INT 30
19938: PUSH
19939: LD_INT 1
19941: PUSH
19942: EMPTY
19943: LIST
19944: LIST
19945: PUSH
19946: EMPTY
19947: LIST
19948: LIST
19949: LIST
19950: PUSH
19951: EMPTY
19952: LIST
19953: LIST
19954: PPUSH
19955: CALL_OW 72
19959: ST_TO_ADDR
19960: GO 20114
19962: LD_INT 3
19964: DOUBLE
19965: EQUAL
19966: IFTRUE 19970
19968: GO 20032
19970: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
19971: LD_ADDR_VAR 0 12
19975: PUSH
19976: LD_VAR 0 18
19980: PPUSH
19981: LD_INT 22
19983: PUSH
19984: LD_VAR 0 16
19988: PUSH
19989: EMPTY
19990: LIST
19991: LIST
19992: PUSH
19993: LD_INT 2
19995: PUSH
19996: LD_INT 30
19998: PUSH
19999: LD_INT 2
20001: PUSH
20002: EMPTY
20003: LIST
20004: LIST
20005: PUSH
20006: LD_INT 30
20008: PUSH
20009: LD_INT 3
20011: PUSH
20012: EMPTY
20013: LIST
20014: LIST
20015: PUSH
20016: EMPTY
20017: LIST
20018: LIST
20019: LIST
20020: PUSH
20021: EMPTY
20022: LIST
20023: LIST
20024: PPUSH
20025: CALL_OW 72
20029: ST_TO_ADDR
20030: GO 20114
20032: LD_INT 4
20034: DOUBLE
20035: EQUAL
20036: IFTRUE 20040
20038: GO 20113
20040: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
20041: LD_ADDR_VAR 0 12
20045: PUSH
20046: LD_VAR 0 18
20050: PPUSH
20051: LD_INT 22
20053: PUSH
20054: LD_VAR 0 16
20058: PUSH
20059: EMPTY
20060: LIST
20061: LIST
20062: PUSH
20063: LD_INT 2
20065: PUSH
20066: LD_INT 30
20068: PUSH
20069: LD_INT 6
20071: PUSH
20072: EMPTY
20073: LIST
20074: LIST
20075: PUSH
20076: LD_INT 30
20078: PUSH
20079: LD_INT 7
20081: PUSH
20082: EMPTY
20083: LIST
20084: LIST
20085: PUSH
20086: LD_INT 30
20088: PUSH
20089: LD_INT 8
20091: PUSH
20092: EMPTY
20093: LIST
20094: LIST
20095: PUSH
20096: EMPTY
20097: LIST
20098: LIST
20099: LIST
20100: LIST
20101: PUSH
20102: EMPTY
20103: LIST
20104: LIST
20105: PPUSH
20106: CALL_OW 72
20110: ST_TO_ADDR
20111: GO 20114
20113: POP
// if i = 1 then
20114: LD_VAR 0 8
20118: PUSH
20119: LD_INT 1
20121: EQUAL
20122: IFFALSE 20233
// begin tmp := [ ] ;
20124: LD_ADDR_VAR 0 19
20128: PUSH
20129: EMPTY
20130: ST_TO_ADDR
// for j in f do
20131: LD_ADDR_VAR 0 9
20135: PUSH
20136: LD_VAR 0 12
20140: PUSH
20141: FOR_IN
20142: IFFALSE 20215
// if GetBType ( j ) = b_bunker then
20144: LD_VAR 0 9
20148: PPUSH
20149: CALL_OW 266
20153: PUSH
20154: LD_INT 32
20156: EQUAL
20157: IFFALSE 20184
// tmp := Insert ( tmp , 1 , j ) else
20159: LD_ADDR_VAR 0 19
20163: PUSH
20164: LD_VAR 0 19
20168: PPUSH
20169: LD_INT 1
20171: PPUSH
20172: LD_VAR 0 9
20176: PPUSH
20177: CALL_OW 2
20181: ST_TO_ADDR
20182: GO 20213
// tmp := Insert ( tmp , tmp + 1 , j ) ;
20184: LD_ADDR_VAR 0 19
20188: PUSH
20189: LD_VAR 0 19
20193: PPUSH
20194: LD_VAR 0 19
20198: PUSH
20199: LD_INT 1
20201: PLUS
20202: PPUSH
20203: LD_VAR 0 9
20207: PPUSH
20208: CALL_OW 2
20212: ST_TO_ADDR
20213: GO 20141
20215: POP
20216: POP
// if tmp then
20217: LD_VAR 0 19
20221: IFFALSE 20233
// f := tmp ;
20223: LD_ADDR_VAR 0 12
20227: PUSH
20228: LD_VAR 0 19
20232: ST_TO_ADDR
// end ; x := personel [ i ] ;
20233: LD_ADDR_VAR 0 13
20237: PUSH
20238: LD_VAR 0 6
20242: PUSH
20243: LD_VAR 0 8
20247: ARRAY
20248: ST_TO_ADDR
// if x = - 1 then
20249: LD_VAR 0 13
20253: PUSH
20254: LD_INT 1
20256: NEG
20257: EQUAL
20258: IFFALSE 20469
// begin for j in f do
20260: LD_ADDR_VAR 0 9
20264: PUSH
20265: LD_VAR 0 12
20269: PUSH
20270: FOR_IN
20271: IFFALSE 20465
// repeat InitHc ;
20273: CALL_OW 19
// if GetBType ( j ) = b_barracks then
20277: LD_VAR 0 9
20281: PPUSH
20282: CALL_OW 266
20286: PUSH
20287: LD_INT 5
20289: EQUAL
20290: IFFALSE 20360
// begin if UnitsInside ( j ) < 3 then
20292: LD_VAR 0 9
20296: PPUSH
20297: CALL_OW 313
20301: PUSH
20302: LD_INT 3
20304: LESS
20305: IFFALSE 20341
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
20307: LD_INT 0
20309: PPUSH
20310: LD_INT 5
20312: PUSH
20313: LD_INT 8
20315: PUSH
20316: LD_INT 9
20318: PUSH
20319: EMPTY
20320: LIST
20321: LIST
20322: LIST
20323: PUSH
20324: LD_VAR 0 17
20328: ARRAY
20329: PPUSH
20330: LD_VAR 0 4
20334: PPUSH
20335: CALL_OW 380
20339: GO 20358
// PrepareHuman ( false , i , skill ) ;
20341: LD_INT 0
20343: PPUSH
20344: LD_VAR 0 8
20348: PPUSH
20349: LD_VAR 0 4
20353: PPUSH
20354: CALL_OW 380
// end else
20358: GO 20377
// PrepareHuman ( false , i , skill ) ;
20360: LD_INT 0
20362: PPUSH
20363: LD_VAR 0 8
20367: PPUSH
20368: LD_VAR 0 4
20372: PPUSH
20373: CALL_OW 380
// un := CreateHuman ;
20377: LD_ADDR_VAR 0 14
20381: PUSH
20382: CALL_OW 44
20386: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
20387: LD_ADDR_VAR 0 7
20391: PUSH
20392: LD_VAR 0 7
20396: PPUSH
20397: LD_INT 1
20399: PPUSH
20400: LD_VAR 0 14
20404: PPUSH
20405: CALL_OW 2
20409: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
20410: LD_VAR 0 14
20414: PPUSH
20415: LD_VAR 0 9
20419: PPUSH
20420: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
20424: LD_VAR 0 9
20428: PPUSH
20429: CALL_OW 313
20433: PUSH
20434: LD_INT 6
20436: EQUAL
20437: IFTRUE 20461
20439: PUSH
20440: LD_VAR 0 9
20444: PPUSH
20445: CALL_OW 266
20449: PUSH
20450: LD_INT 32
20452: PUSH
20453: LD_INT 31
20455: PUSH
20456: EMPTY
20457: LIST
20458: LIST
20459: IN
20460: OR
20461: IFFALSE 20273
20463: GO 20270
20465: POP
20466: POP
// end else
20467: GO 20853
// for j = 1 to x do
20469: LD_ADDR_VAR 0 9
20473: PUSH
20474: DOUBLE
20475: LD_INT 1
20477: DEC
20478: ST_TO_ADDR
20479: LD_VAR 0 13
20483: PUSH
20484: FOR_TO
20485: IFFALSE 20851
// begin InitHc ;
20487: CALL_OW 19
// if not f then
20491: LD_VAR 0 12
20495: NOT
20496: IFFALSE 20585
// begin PrepareHuman ( false , i , skill ) ;
20498: LD_INT 0
20500: PPUSH
20501: LD_VAR 0 8
20505: PPUSH
20506: LD_VAR 0 4
20510: PPUSH
20511: CALL_OW 380
// un := CreateHuman ;
20515: LD_ADDR_VAR 0 14
20519: PUSH
20520: CALL_OW 44
20524: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
20525: LD_ADDR_VAR 0 7
20529: PUSH
20530: LD_VAR 0 7
20534: PPUSH
20535: LD_INT 1
20537: PPUSH
20538: LD_VAR 0 14
20542: PPUSH
20543: CALL_OW 2
20547: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
20548: LD_VAR 0 14
20552: PPUSH
20553: LD_VAR 0 1
20557: PPUSH
20558: CALL_OW 250
20562: PPUSH
20563: LD_VAR 0 1
20567: PPUSH
20568: CALL_OW 251
20572: PPUSH
20573: LD_INT 10
20575: PPUSH
20576: LD_INT 0
20578: PPUSH
20579: CALL_OW 50
// continue ;
20583: GO 20484
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
20585: LD_VAR 0 12
20589: PUSH
20590: LD_INT 1
20592: ARRAY
20593: PPUSH
20594: CALL_OW 313
20598: IFFALSE 20626
20600: PUSH
20601: LD_VAR 0 12
20605: PUSH
20606: LD_INT 1
20608: ARRAY
20609: PPUSH
20610: CALL_OW 266
20614: PUSH
20615: LD_INT 32
20617: PUSH
20618: LD_INT 31
20620: PUSH
20621: EMPTY
20622: LIST
20623: LIST
20624: IN
20625: AND
20626: IFTRUE 20647
20628: PUSH
20629: LD_VAR 0 12
20633: PUSH
20634: LD_INT 1
20636: ARRAY
20637: PPUSH
20638: CALL_OW 313
20642: PUSH
20643: LD_INT 6
20645: EQUAL
20646: OR
20647: IFFALSE 20667
// f := Delete ( f , 1 ) ;
20649: LD_ADDR_VAR 0 12
20653: PUSH
20654: LD_VAR 0 12
20658: PPUSH
20659: LD_INT 1
20661: PPUSH
20662: CALL_OW 3
20666: ST_TO_ADDR
// if not f then
20667: LD_VAR 0 12
20671: NOT
20672: IFFALSE 20690
// begin x := x + 2 ;
20674: LD_ADDR_VAR 0 13
20678: PUSH
20679: LD_VAR 0 13
20683: PUSH
20684: LD_INT 2
20686: PLUS
20687: ST_TO_ADDR
// continue ;
20688: GO 20484
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
20690: LD_VAR 0 12
20694: PUSH
20695: LD_INT 1
20697: ARRAY
20698: PPUSH
20699: CALL_OW 266
20703: PUSH
20704: LD_INT 5
20706: EQUAL
20707: IFFALSE 20781
// begin if UnitsInside ( f [ 1 ] ) < 3 then
20709: LD_VAR 0 12
20713: PUSH
20714: LD_INT 1
20716: ARRAY
20717: PPUSH
20718: CALL_OW 313
20722: PUSH
20723: LD_INT 3
20725: LESS
20726: IFFALSE 20762
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
20728: LD_INT 0
20730: PPUSH
20731: LD_INT 5
20733: PUSH
20734: LD_INT 8
20736: PUSH
20737: LD_INT 9
20739: PUSH
20740: EMPTY
20741: LIST
20742: LIST
20743: LIST
20744: PUSH
20745: LD_VAR 0 17
20749: ARRAY
20750: PPUSH
20751: LD_VAR 0 4
20755: PPUSH
20756: CALL_OW 380
20760: GO 20779
// PrepareHuman ( false , i , skill ) ;
20762: LD_INT 0
20764: PPUSH
20765: LD_VAR 0 8
20769: PPUSH
20770: LD_VAR 0 4
20774: PPUSH
20775: CALL_OW 380
// end else
20779: GO 20798
// PrepareHuman ( false , i , skill ) ;
20781: LD_INT 0
20783: PPUSH
20784: LD_VAR 0 8
20788: PPUSH
20789: LD_VAR 0 4
20793: PPUSH
20794: CALL_OW 380
// un := CreateHuman ;
20798: LD_ADDR_VAR 0 14
20802: PUSH
20803: CALL_OW 44
20807: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
20808: LD_ADDR_VAR 0 7
20812: PUSH
20813: LD_VAR 0 7
20817: PPUSH
20818: LD_INT 1
20820: PPUSH
20821: LD_VAR 0 14
20825: PPUSH
20826: CALL_OW 2
20830: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
20831: LD_VAR 0 14
20835: PPUSH
20836: LD_VAR 0 12
20840: PUSH
20841: LD_INT 1
20843: ARRAY
20844: PPUSH
20845: CALL_OW 52
// end ;
20849: GO 20484
20851: POP
20852: POP
// end ;
20853: GO 19784
20855: POP
20856: POP
// result := result ^ buildings ;
20857: LD_ADDR_VAR 0 7
20861: PUSH
20862: LD_VAR 0 7
20866: PUSH
20867: LD_VAR 0 18
20871: ADD
20872: ST_TO_ADDR
// end else
20873: GO 21016
// begin for i = 1 to personel do
20875: LD_ADDR_VAR 0 8
20879: PUSH
20880: DOUBLE
20881: LD_INT 1
20883: DEC
20884: ST_TO_ADDR
20885: LD_VAR 0 6
20889: PUSH
20890: FOR_TO
20891: IFFALSE 21014
// begin if i > 4 then
20893: LD_VAR 0 8
20897: PUSH
20898: LD_INT 4
20900: GREATER
20901: IFFALSE 20905
// break ;
20903: GO 21014
// x := personel [ i ] ;
20905: LD_ADDR_VAR 0 13
20909: PUSH
20910: LD_VAR 0 6
20914: PUSH
20915: LD_VAR 0 8
20919: ARRAY
20920: ST_TO_ADDR
// if x = - 1 then
20921: LD_VAR 0 13
20925: PUSH
20926: LD_INT 1
20928: NEG
20929: EQUAL
20930: IFFALSE 20934
// continue ;
20932: GO 20890
// PrepareHuman ( false , i , skill ) ;
20934: LD_INT 0
20936: PPUSH
20937: LD_VAR 0 8
20941: PPUSH
20942: LD_VAR 0 4
20946: PPUSH
20947: CALL_OW 380
// un := CreateHuman ;
20951: LD_ADDR_VAR 0 14
20955: PUSH
20956: CALL_OW 44
20960: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
20961: LD_VAR 0 14
20965: PPUSH
20966: LD_VAR 0 1
20970: PPUSH
20971: CALL_OW 250
20975: PPUSH
20976: LD_VAR 0 1
20980: PPUSH
20981: CALL_OW 251
20985: PPUSH
20986: LD_INT 10
20988: PPUSH
20989: LD_INT 0
20991: PPUSH
20992: CALL_OW 50
// result := result ^ un ;
20996: LD_ADDR_VAR 0 7
21000: PUSH
21001: LD_VAR 0 7
21005: PUSH
21006: LD_VAR 0 14
21010: ADD
21011: ST_TO_ADDR
// end ;
21012: GO 20890
21014: POP
21015: POP
// end ; end ;
21016: LD_VAR 0 7
21020: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
21021: LD_INT 0
21023: PPUSH
21024: PPUSH
21025: PPUSH
21026: PPUSH
21027: PPUSH
21028: PPUSH
21029: PPUSH
21030: PPUSH
21031: PPUSH
21032: PPUSH
21033: PPUSH
21034: PPUSH
21035: PPUSH
21036: PPUSH
21037: PPUSH
21038: PPUSH
// result := false ;
21039: LD_ADDR_VAR 0 3
21043: PUSH
21044: LD_INT 0
21046: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
21047: LD_VAR 0 1
21051: NOT
21052: IFTRUE 21077
21054: PUSH
21055: LD_VAR 0 1
21059: PPUSH
21060: CALL_OW 266
21064: PUSH
21065: LD_INT 32
21067: PUSH
21068: LD_INT 33
21070: PUSH
21071: EMPTY
21072: LIST
21073: LIST
21074: IN
21075: NOT
21076: OR
21077: IFFALSE 21081
// exit ;
21079: GO 22216
// nat := GetNation ( tower ) ;
21081: LD_ADDR_VAR 0 12
21085: PUSH
21086: LD_VAR 0 1
21090: PPUSH
21091: CALL_OW 248
21095: ST_TO_ADDR
// side := GetSide ( tower ) ;
21096: LD_ADDR_VAR 0 16
21100: PUSH
21101: LD_VAR 0 1
21105: PPUSH
21106: CALL_OW 255
21110: ST_TO_ADDR
// x := GetX ( tower ) ;
21111: LD_ADDR_VAR 0 10
21115: PUSH
21116: LD_VAR 0 1
21120: PPUSH
21121: CALL_OW 250
21125: ST_TO_ADDR
// y := GetY ( tower ) ;
21126: LD_ADDR_VAR 0 11
21130: PUSH
21131: LD_VAR 0 1
21135: PPUSH
21136: CALL_OW 251
21140: ST_TO_ADDR
// if not x or not y then
21141: LD_VAR 0 10
21145: NOT
21146: IFTRUE 21155
21148: PUSH
21149: LD_VAR 0 11
21153: NOT
21154: OR
21155: IFFALSE 21159
// exit ;
21157: GO 22216
// weapon := 0 ;
21159: LD_ADDR_VAR 0 18
21163: PUSH
21164: LD_INT 0
21166: ST_TO_ADDR
// fac_list := [ ] ;
21167: LD_ADDR_VAR 0 17
21171: PUSH
21172: EMPTY
21173: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
21174: LD_ADDR_VAR 0 6
21178: PUSH
21179: LD_VAR 0 1
21183: PPUSH
21184: CALL_OW 274
21188: PPUSH
21189: LD_VAR 0 2
21193: PPUSH
21194: LD_INT 0
21196: PPUSH
21197: CALL 18751 0 3
21201: PPUSH
21202: LD_INT 30
21204: PUSH
21205: LD_INT 3
21207: PUSH
21208: EMPTY
21209: LIST
21210: LIST
21211: PPUSH
21212: CALL_OW 72
21216: ST_TO_ADDR
// if not factories then
21217: LD_VAR 0 6
21221: NOT
21222: IFFALSE 21226
// exit ;
21224: GO 22216
// for i in factories do
21226: LD_ADDR_VAR 0 8
21230: PUSH
21231: LD_VAR 0 6
21235: PUSH
21236: FOR_IN
21237: IFFALSE 21262
// fac_list := fac_list union AvailableWeaponList ( i ) ;
21239: LD_ADDR_VAR 0 17
21243: PUSH
21244: LD_VAR 0 17
21248: PUSH
21249: LD_VAR 0 8
21253: PPUSH
21254: CALL_OW 478
21258: UNION
21259: ST_TO_ADDR
21260: GO 21236
21262: POP
21263: POP
// if not fac_list then
21264: LD_VAR 0 17
21268: NOT
21269: IFFALSE 21273
// exit ;
21271: GO 22216
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
21273: LD_ADDR_VAR 0 5
21277: PUSH
21278: LD_INT 4
21280: PUSH
21281: LD_INT 5
21283: PUSH
21284: LD_INT 9
21286: PUSH
21287: LD_INT 10
21289: PUSH
21290: LD_INT 6
21292: PUSH
21293: LD_INT 7
21295: PUSH
21296: LD_INT 11
21298: PUSH
21299: EMPTY
21300: LIST
21301: LIST
21302: LIST
21303: LIST
21304: LIST
21305: LIST
21306: LIST
21307: PUSH
21308: LD_INT 27
21310: PUSH
21311: LD_INT 28
21313: PUSH
21314: LD_INT 26
21316: PUSH
21317: LD_INT 30
21319: PUSH
21320: EMPTY
21321: LIST
21322: LIST
21323: LIST
21324: LIST
21325: PUSH
21326: LD_INT 43
21328: PUSH
21329: LD_INT 44
21331: PUSH
21332: LD_INT 46
21334: PUSH
21335: LD_INT 45
21337: PUSH
21338: LD_INT 47
21340: PUSH
21341: LD_INT 49
21343: PUSH
21344: EMPTY
21345: LIST
21346: LIST
21347: LIST
21348: LIST
21349: LIST
21350: LIST
21351: PUSH
21352: EMPTY
21353: LIST
21354: LIST
21355: LIST
21356: PUSH
21357: LD_VAR 0 12
21361: ARRAY
21362: ST_TO_ADDR
// list := list isect fac_list ;
21363: LD_ADDR_VAR 0 5
21367: PUSH
21368: LD_VAR 0 5
21372: PUSH
21373: LD_VAR 0 17
21377: ISECT
21378: ST_TO_ADDR
// if not list then
21379: LD_VAR 0 5
21383: NOT
21384: IFFALSE 21388
// exit ;
21386: GO 22216
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
21388: LD_VAR 0 12
21392: PUSH
21393: LD_INT 3
21395: EQUAL
21396: IFFALSE 21408
21398: PUSH
21399: LD_INT 49
21401: PUSH
21402: LD_VAR 0 5
21406: IN
21407: AND
21408: IFFALSE 21428
21410: PUSH
21411: LD_INT 31
21413: PPUSH
21414: LD_VAR 0 16
21418: PPUSH
21419: CALL_OW 321
21423: PUSH
21424: LD_INT 2
21426: EQUAL
21427: AND
21428: IFFALSE 21488
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
21430: LD_INT 22
21432: PUSH
21433: LD_VAR 0 16
21437: PUSH
21438: EMPTY
21439: LIST
21440: LIST
21441: PUSH
21442: LD_INT 35
21444: PUSH
21445: LD_INT 49
21447: PUSH
21448: EMPTY
21449: LIST
21450: LIST
21451: PUSH
21452: LD_INT 91
21454: PUSH
21455: LD_VAR 0 1
21459: PUSH
21460: LD_INT 10
21462: PUSH
21463: EMPTY
21464: LIST
21465: LIST
21466: LIST
21467: PUSH
21468: EMPTY
21469: LIST
21470: LIST
21471: LIST
21472: PPUSH
21473: CALL_OW 69
21477: NOT
21478: IFFALSE 21488
// weapon := ru_time_lapser ;
21480: LD_ADDR_VAR 0 18
21484: PUSH
21485: LD_INT 49
21487: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
21488: LD_VAR 0 12
21492: PUSH
21493: LD_INT 1
21495: PUSH
21496: LD_INT 2
21498: PUSH
21499: EMPTY
21500: LIST
21501: LIST
21502: IN
21503: IFFALSE 21527
21505: PUSH
21506: LD_INT 11
21508: PUSH
21509: LD_VAR 0 5
21513: IN
21514: IFTRUE 21526
21516: PUSH
21517: LD_INT 30
21519: PUSH
21520: LD_VAR 0 5
21524: IN
21525: OR
21526: AND
21527: IFFALSE 21547
21529: PUSH
21530: LD_INT 6
21532: PPUSH
21533: LD_VAR 0 16
21537: PPUSH
21538: CALL_OW 321
21542: PUSH
21543: LD_INT 2
21545: EQUAL
21546: AND
21547: IFFALSE 21714
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
21549: LD_INT 22
21551: PUSH
21552: LD_VAR 0 16
21556: PUSH
21557: EMPTY
21558: LIST
21559: LIST
21560: PUSH
21561: LD_INT 2
21563: PUSH
21564: LD_INT 35
21566: PUSH
21567: LD_INT 11
21569: PUSH
21570: EMPTY
21571: LIST
21572: LIST
21573: PUSH
21574: LD_INT 35
21576: PUSH
21577: LD_INT 30
21579: PUSH
21580: EMPTY
21581: LIST
21582: LIST
21583: PUSH
21584: EMPTY
21585: LIST
21586: LIST
21587: LIST
21588: PUSH
21589: LD_INT 91
21591: PUSH
21592: LD_VAR 0 1
21596: PUSH
21597: LD_INT 18
21599: PUSH
21600: EMPTY
21601: LIST
21602: LIST
21603: LIST
21604: PUSH
21605: EMPTY
21606: LIST
21607: LIST
21608: LIST
21609: PPUSH
21610: CALL_OW 69
21614: NOT
21615: IFFALSE 21691
21617: PUSH
21618: LD_INT 22
21620: PUSH
21621: LD_VAR 0 16
21625: PUSH
21626: EMPTY
21627: LIST
21628: LIST
21629: PUSH
21630: LD_INT 2
21632: PUSH
21633: LD_INT 30
21635: PUSH
21636: LD_INT 32
21638: PUSH
21639: EMPTY
21640: LIST
21641: LIST
21642: PUSH
21643: LD_INT 30
21645: PUSH
21646: LD_INT 33
21648: PUSH
21649: EMPTY
21650: LIST
21651: LIST
21652: PUSH
21653: EMPTY
21654: LIST
21655: LIST
21656: LIST
21657: PUSH
21658: LD_INT 91
21660: PUSH
21661: LD_VAR 0 1
21665: PUSH
21666: LD_INT 12
21668: PUSH
21669: EMPTY
21670: LIST
21671: LIST
21672: LIST
21673: PUSH
21674: EMPTY
21675: LIST
21676: LIST
21677: LIST
21678: PUSH
21679: EMPTY
21680: LIST
21681: PPUSH
21682: CALL_OW 69
21686: PUSH
21687: LD_INT 2
21689: GREATER
21690: AND
21691: IFFALSE 21714
// weapon := [ us_radar , ar_radar ] [ nat ] ;
21693: LD_ADDR_VAR 0 18
21697: PUSH
21698: LD_INT 11
21700: PUSH
21701: LD_INT 30
21703: PUSH
21704: EMPTY
21705: LIST
21706: LIST
21707: PUSH
21708: LD_VAR 0 12
21712: ARRAY
21713: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
21714: LD_VAR 0 18
21718: NOT
21719: IFFALSE 21739
21721: PUSH
21722: LD_INT 40
21724: PPUSH
21725: LD_VAR 0 16
21729: PPUSH
21730: CALL_OW 321
21734: PUSH
21735: LD_INT 2
21737: EQUAL
21738: AND
21739: IFFALSE 21775
21741: PUSH
21742: LD_INT 7
21744: PUSH
21745: LD_VAR 0 5
21749: IN
21750: IFTRUE 21762
21752: PUSH
21753: LD_INT 28
21755: PUSH
21756: LD_VAR 0 5
21760: IN
21761: OR
21762: IFTRUE 21774
21764: PUSH
21765: LD_INT 45
21767: PUSH
21768: LD_VAR 0 5
21772: IN
21773: OR
21774: AND
21775: IFFALSE 22029
// begin hex := GetHexInfo ( x , y ) ;
21777: LD_ADDR_VAR 0 4
21781: PUSH
21782: LD_VAR 0 10
21786: PPUSH
21787: LD_VAR 0 11
21791: PPUSH
21792: CALL_OW 546
21796: ST_TO_ADDR
// if hex [ 1 ] then
21797: LD_VAR 0 4
21801: PUSH
21802: LD_INT 1
21804: ARRAY
21805: IFFALSE 21809
// exit ;
21807: GO 22216
// height := hex [ 2 ] ;
21809: LD_ADDR_VAR 0 15
21813: PUSH
21814: LD_VAR 0 4
21818: PUSH
21819: LD_INT 2
21821: ARRAY
21822: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
21823: LD_ADDR_VAR 0 14
21827: PUSH
21828: LD_INT 0
21830: PUSH
21831: LD_INT 2
21833: PUSH
21834: LD_INT 3
21836: PUSH
21837: LD_INT 5
21839: PUSH
21840: EMPTY
21841: LIST
21842: LIST
21843: LIST
21844: LIST
21845: ST_TO_ADDR
// for i in tmp do
21846: LD_ADDR_VAR 0 8
21850: PUSH
21851: LD_VAR 0 14
21855: PUSH
21856: FOR_IN
21857: IFFALSE 22027
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
21859: LD_ADDR_VAR 0 9
21863: PUSH
21864: LD_VAR 0 10
21868: PPUSH
21869: LD_VAR 0 8
21873: PPUSH
21874: LD_INT 5
21876: PPUSH
21877: CALL_OW 272
21881: PUSH
21882: LD_VAR 0 11
21886: PPUSH
21887: LD_VAR 0 8
21891: PPUSH
21892: LD_INT 5
21894: PPUSH
21895: CALL_OW 273
21899: PUSH
21900: EMPTY
21901: LIST
21902: LIST
21903: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
21904: LD_VAR 0 9
21908: PUSH
21909: LD_INT 1
21911: ARRAY
21912: PPUSH
21913: LD_VAR 0 9
21917: PUSH
21918: LD_INT 2
21920: ARRAY
21921: PPUSH
21922: CALL_OW 488
21926: IFFALSE 22025
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
21928: LD_ADDR_VAR 0 4
21932: PUSH
21933: LD_VAR 0 9
21937: PUSH
21938: LD_INT 1
21940: ARRAY
21941: PPUSH
21942: LD_VAR 0 9
21946: PUSH
21947: LD_INT 2
21949: ARRAY
21950: PPUSH
21951: CALL_OW 546
21955: ST_TO_ADDR
// if hex [ 1 ] then
21956: LD_VAR 0 4
21960: PUSH
21961: LD_INT 1
21963: ARRAY
21964: IFFALSE 21968
// continue ;
21966: GO 21856
// h := hex [ 2 ] ;
21968: LD_ADDR_VAR 0 13
21972: PUSH
21973: LD_VAR 0 4
21977: PUSH
21978: LD_INT 2
21980: ARRAY
21981: ST_TO_ADDR
// if h + 7 < height then
21982: LD_VAR 0 13
21986: PUSH
21987: LD_INT 7
21989: PLUS
21990: PUSH
21991: LD_VAR 0 15
21995: LESS
21996: IFFALSE 22025
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
21998: LD_ADDR_VAR 0 18
22002: PUSH
22003: LD_INT 7
22005: PUSH
22006: LD_INT 28
22008: PUSH
22009: LD_INT 45
22011: PUSH
22012: EMPTY
22013: LIST
22014: LIST
22015: LIST
22016: PUSH
22017: LD_VAR 0 12
22021: ARRAY
22022: ST_TO_ADDR
// break ;
22023: GO 22027
// end ; end ; end ;
22025: GO 21856
22027: POP
22028: POP
// end ; if not weapon then
22029: LD_VAR 0 18
22033: NOT
22034: IFFALSE 22094
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
22036: LD_ADDR_VAR 0 5
22040: PUSH
22041: LD_VAR 0 5
22045: PUSH
22046: LD_INT 11
22048: PUSH
22049: LD_INT 30
22051: PUSH
22052: LD_INT 49
22054: PUSH
22055: EMPTY
22056: LIST
22057: LIST
22058: LIST
22059: DIFF
22060: ST_TO_ADDR
// if not list then
22061: LD_VAR 0 5
22065: NOT
22066: IFFALSE 22070
// exit ;
22068: GO 22216
// weapon := list [ rand ( 1 , list ) ] ;
22070: LD_ADDR_VAR 0 18
22074: PUSH
22075: LD_VAR 0 5
22079: PUSH
22080: LD_INT 1
22082: PPUSH
22083: LD_VAR 0 5
22087: PPUSH
22088: CALL_OW 12
22092: ARRAY
22093: ST_TO_ADDR
// end ; if weapon then
22094: LD_VAR 0 18
22098: IFFALSE 22216
// begin tmp := CostOfWeapon ( weapon ) ;
22100: LD_ADDR_VAR 0 14
22104: PUSH
22105: LD_VAR 0 18
22109: PPUSH
22110: CALL_OW 451
22114: ST_TO_ADDR
// j := GetBase ( tower ) ;
22115: LD_ADDR_VAR 0 9
22119: PUSH
22120: LD_VAR 0 1
22124: PPUSH
22125: CALL_OW 274
22129: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
22130: LD_VAR 0 9
22134: PPUSH
22135: LD_INT 1
22137: PPUSH
22138: CALL_OW 275
22142: PUSH
22143: LD_VAR 0 14
22147: PUSH
22148: LD_INT 1
22150: ARRAY
22151: GREATEREQUAL
22152: IFFALSE 22178
22154: PUSH
22155: LD_VAR 0 9
22159: PPUSH
22160: LD_INT 2
22162: PPUSH
22163: CALL_OW 275
22167: PUSH
22168: LD_VAR 0 14
22172: PUSH
22173: LD_INT 2
22175: ARRAY
22176: GREATEREQUAL
22177: AND
22178: IFFALSE 22204
22180: PUSH
22181: LD_VAR 0 9
22185: PPUSH
22186: LD_INT 3
22188: PPUSH
22189: CALL_OW 275
22193: PUSH
22194: LD_VAR 0 14
22198: PUSH
22199: LD_INT 3
22201: ARRAY
22202: GREATEREQUAL
22203: AND
22204: IFFALSE 22216
// result := weapon ;
22206: LD_ADDR_VAR 0 3
22210: PUSH
22211: LD_VAR 0 18
22215: ST_TO_ADDR
// end ; end ;
22216: LD_VAR 0 3
22220: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
22221: LD_INT 0
22223: PPUSH
22224: PPUSH
// result := true ;
22225: LD_ADDR_VAR 0 3
22229: PUSH
22230: LD_INT 1
22232: ST_TO_ADDR
// if array1 = array2 then
22233: LD_VAR 0 1
22237: PUSH
22238: LD_VAR 0 2
22242: EQUAL
22243: IFFALSE 22303
// begin for i = 1 to array1 do
22245: LD_ADDR_VAR 0 4
22249: PUSH
22250: DOUBLE
22251: LD_INT 1
22253: DEC
22254: ST_TO_ADDR
22255: LD_VAR 0 1
22259: PUSH
22260: FOR_TO
22261: IFFALSE 22299
// if array1 [ i ] <> array2 [ i ] then
22263: LD_VAR 0 1
22267: PUSH
22268: LD_VAR 0 4
22272: ARRAY
22273: PUSH
22274: LD_VAR 0 2
22278: PUSH
22279: LD_VAR 0 4
22283: ARRAY
22284: NONEQUAL
22285: IFFALSE 22297
// begin result := false ;
22287: LD_ADDR_VAR 0 3
22291: PUSH
22292: LD_INT 0
22294: ST_TO_ADDR
// break ;
22295: GO 22299
// end ;
22297: GO 22260
22299: POP
22300: POP
// end else
22301: GO 22311
// result := false ;
22303: LD_ADDR_VAR 0 3
22307: PUSH
22308: LD_INT 0
22310: ST_TO_ADDR
// end ;
22311: LD_VAR 0 3
22315: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
22316: LD_INT 0
22318: PPUSH
22319: PPUSH
// if not array1 or not array2 then
22320: LD_VAR 0 1
22324: NOT
22325: IFTRUE 22334
22327: PUSH
22328: LD_VAR 0 2
22332: NOT
22333: OR
22334: IFFALSE 22338
// exit ;
22336: GO 22402
// result := true ;
22338: LD_ADDR_VAR 0 3
22342: PUSH
22343: LD_INT 1
22345: ST_TO_ADDR
// for i = 1 to array1 do
22346: LD_ADDR_VAR 0 4
22350: PUSH
22351: DOUBLE
22352: LD_INT 1
22354: DEC
22355: ST_TO_ADDR
22356: LD_VAR 0 1
22360: PUSH
22361: FOR_TO
22362: IFFALSE 22400
// if array1 [ i ] <> array2 [ i ] then
22364: LD_VAR 0 1
22368: PUSH
22369: LD_VAR 0 4
22373: ARRAY
22374: PUSH
22375: LD_VAR 0 2
22379: PUSH
22380: LD_VAR 0 4
22384: ARRAY
22385: NONEQUAL
22386: IFFALSE 22398
// begin result := false ;
22388: LD_ADDR_VAR 0 3
22392: PUSH
22393: LD_INT 0
22395: ST_TO_ADDR
// break ;
22396: GO 22400
// end ;
22398: GO 22361
22400: POP
22401: POP
// end ;
22402: LD_VAR 0 3
22406: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
22407: LD_INT 0
22409: PPUSH
22410: PPUSH
22411: PPUSH
// pom := GetBase ( fac ) ;
22412: LD_ADDR_VAR 0 5
22416: PUSH
22417: LD_VAR 0 1
22421: PPUSH
22422: CALL_OW 274
22426: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
22427: LD_ADDR_VAR 0 4
22431: PUSH
22432: LD_VAR 0 2
22436: PUSH
22437: LD_INT 1
22439: ARRAY
22440: PPUSH
22441: LD_VAR 0 2
22445: PUSH
22446: LD_INT 2
22448: ARRAY
22449: PPUSH
22450: LD_VAR 0 2
22454: PUSH
22455: LD_INT 3
22457: ARRAY
22458: PPUSH
22459: LD_VAR 0 2
22463: PUSH
22464: LD_INT 4
22466: ARRAY
22467: PPUSH
22468: CALL_OW 449
22472: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
22473: LD_ADDR_VAR 0 3
22477: PUSH
22478: LD_VAR 0 5
22482: PPUSH
22483: LD_INT 1
22485: PPUSH
22486: CALL_OW 275
22490: PUSH
22491: LD_VAR 0 4
22495: PUSH
22496: LD_INT 1
22498: ARRAY
22499: GREATEREQUAL
22500: IFFALSE 22526
22502: PUSH
22503: LD_VAR 0 5
22507: PPUSH
22508: LD_INT 2
22510: PPUSH
22511: CALL_OW 275
22515: PUSH
22516: LD_VAR 0 4
22520: PUSH
22521: LD_INT 2
22523: ARRAY
22524: GREATEREQUAL
22525: AND
22526: IFFALSE 22552
22528: PUSH
22529: LD_VAR 0 5
22533: PPUSH
22534: LD_INT 3
22536: PPUSH
22537: CALL_OW 275
22541: PUSH
22542: LD_VAR 0 4
22546: PUSH
22547: LD_INT 3
22549: ARRAY
22550: GREATEREQUAL
22551: AND
22552: ST_TO_ADDR
// end ;
22553: LD_VAR 0 3
22557: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
22558: LD_INT 0
22560: PPUSH
22561: PPUSH
22562: PPUSH
22563: PPUSH
// pom := GetBase ( building ) ;
22564: LD_ADDR_VAR 0 3
22568: PUSH
22569: LD_VAR 0 1
22573: PPUSH
22574: CALL_OW 274
22578: ST_TO_ADDR
// if not pom then
22579: LD_VAR 0 3
22583: NOT
22584: IFFALSE 22588
// exit ;
22586: GO 22762
// btype := GetBType ( building ) ;
22588: LD_ADDR_VAR 0 5
22592: PUSH
22593: LD_VAR 0 1
22597: PPUSH
22598: CALL_OW 266
22602: ST_TO_ADDR
// if btype = b_armoury then
22603: LD_VAR 0 5
22607: PUSH
22608: LD_INT 4
22610: EQUAL
22611: IFFALSE 22621
// btype := b_barracks ;
22613: LD_ADDR_VAR 0 5
22617: PUSH
22618: LD_INT 5
22620: ST_TO_ADDR
// if btype = b_depot then
22621: LD_VAR 0 5
22625: PUSH
22626: LD_INT 0
22628: EQUAL
22629: IFFALSE 22639
// btype := b_warehouse ;
22631: LD_ADDR_VAR 0 5
22635: PUSH
22636: LD_INT 1
22638: ST_TO_ADDR
// if btype = b_workshop then
22639: LD_VAR 0 5
22643: PUSH
22644: LD_INT 2
22646: EQUAL
22647: IFFALSE 22657
// btype := b_factory ;
22649: LD_ADDR_VAR 0 5
22653: PUSH
22654: LD_INT 3
22656: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
22657: LD_ADDR_VAR 0 4
22661: PUSH
22662: LD_VAR 0 5
22666: PPUSH
22667: LD_VAR 0 1
22671: PPUSH
22672: CALL_OW 248
22676: PPUSH
22677: CALL_OW 450
22681: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
22682: LD_ADDR_VAR 0 2
22686: PUSH
22687: LD_VAR 0 3
22691: PPUSH
22692: LD_INT 1
22694: PPUSH
22695: CALL_OW 275
22699: PUSH
22700: LD_VAR 0 4
22704: PUSH
22705: LD_INT 1
22707: ARRAY
22708: GREATEREQUAL
22709: IFFALSE 22735
22711: PUSH
22712: LD_VAR 0 3
22716: PPUSH
22717: LD_INT 2
22719: PPUSH
22720: CALL_OW 275
22724: PUSH
22725: LD_VAR 0 4
22729: PUSH
22730: LD_INT 2
22732: ARRAY
22733: GREATEREQUAL
22734: AND
22735: IFFALSE 22761
22737: PUSH
22738: LD_VAR 0 3
22742: PPUSH
22743: LD_INT 3
22745: PPUSH
22746: CALL_OW 275
22750: PUSH
22751: LD_VAR 0 4
22755: PUSH
22756: LD_INT 3
22758: ARRAY
22759: GREATEREQUAL
22760: AND
22761: ST_TO_ADDR
// end ;
22762: LD_VAR 0 2
22766: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
22767: LD_INT 0
22769: PPUSH
22770: PPUSH
22771: PPUSH
// pom := GetBase ( building ) ;
22772: LD_ADDR_VAR 0 4
22776: PUSH
22777: LD_VAR 0 1
22781: PPUSH
22782: CALL_OW 274
22786: ST_TO_ADDR
// if not pom then
22787: LD_VAR 0 4
22791: NOT
22792: IFFALSE 22796
// exit ;
22794: GO 22901
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
22796: LD_ADDR_VAR 0 5
22800: PUSH
22801: LD_VAR 0 2
22805: PPUSH
22806: LD_VAR 0 1
22810: PPUSH
22811: CALL_OW 248
22815: PPUSH
22816: CALL_OW 450
22820: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
22821: LD_ADDR_VAR 0 3
22825: PUSH
22826: LD_VAR 0 4
22830: PPUSH
22831: LD_INT 1
22833: PPUSH
22834: CALL_OW 275
22838: PUSH
22839: LD_VAR 0 5
22843: PUSH
22844: LD_INT 1
22846: ARRAY
22847: GREATEREQUAL
22848: IFFALSE 22874
22850: PUSH
22851: LD_VAR 0 4
22855: PPUSH
22856: LD_INT 2
22858: PPUSH
22859: CALL_OW 275
22863: PUSH
22864: LD_VAR 0 5
22868: PUSH
22869: LD_INT 2
22871: ARRAY
22872: GREATEREQUAL
22873: AND
22874: IFFALSE 22900
22876: PUSH
22877: LD_VAR 0 4
22881: PPUSH
22882: LD_INT 3
22884: PPUSH
22885: CALL_OW 275
22889: PUSH
22890: LD_VAR 0 5
22894: PUSH
22895: LD_INT 3
22897: ARRAY
22898: GREATEREQUAL
22899: AND
22900: ST_TO_ADDR
// end ;
22901: LD_VAR 0 3
22905: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
22906: LD_INT 0
22908: PPUSH
22909: PPUSH
22910: PPUSH
22911: PPUSH
22912: PPUSH
22913: PPUSH
22914: PPUSH
22915: PPUSH
22916: PPUSH
22917: PPUSH
22918: PPUSH
// result := false ;
22919: LD_ADDR_VAR 0 8
22923: PUSH
22924: LD_INT 0
22926: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
22927: LD_VAR 0 5
22931: NOT
22932: IFTRUE 22941
22934: PUSH
22935: LD_VAR 0 1
22939: NOT
22940: OR
22941: IFTRUE 22950
22943: PUSH
22944: LD_VAR 0 2
22948: NOT
22949: OR
22950: IFTRUE 22959
22952: PUSH
22953: LD_VAR 0 3
22957: NOT
22958: OR
22959: IFFALSE 22963
// exit ;
22961: GO 23789
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
22963: LD_ADDR_VAR 0 14
22967: PUSH
22968: LD_VAR 0 1
22972: PPUSH
22973: LD_VAR 0 2
22977: PPUSH
22978: LD_VAR 0 3
22982: PPUSH
22983: LD_VAR 0 4
22987: PPUSH
22988: LD_VAR 0 5
22992: PUSH
22993: LD_INT 1
22995: ARRAY
22996: PPUSH
22997: CALL_OW 248
23001: PPUSH
23002: LD_INT 0
23004: PPUSH
23005: CALL 25070 0 6
23009: ST_TO_ADDR
// if not hexes then
23010: LD_VAR 0 14
23014: NOT
23015: IFFALSE 23019
// exit ;
23017: GO 23789
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
23019: LD_ADDR_VAR 0 17
23023: PUSH
23024: LD_VAR 0 5
23028: PPUSH
23029: LD_INT 22
23031: PUSH
23032: LD_VAR 0 13
23036: PPUSH
23037: CALL_OW 255
23041: PUSH
23042: EMPTY
23043: LIST
23044: LIST
23045: PUSH
23046: LD_INT 2
23048: PUSH
23049: LD_INT 30
23051: PUSH
23052: LD_INT 0
23054: PUSH
23055: EMPTY
23056: LIST
23057: LIST
23058: PUSH
23059: LD_INT 30
23061: PUSH
23062: LD_INT 1
23064: PUSH
23065: EMPTY
23066: LIST
23067: LIST
23068: PUSH
23069: EMPTY
23070: LIST
23071: LIST
23072: LIST
23073: PUSH
23074: EMPTY
23075: LIST
23076: LIST
23077: PPUSH
23078: CALL_OW 72
23082: ST_TO_ADDR
// for i = 1 to hexes do
23083: LD_ADDR_VAR 0 9
23087: PUSH
23088: DOUBLE
23089: LD_INT 1
23091: DEC
23092: ST_TO_ADDR
23093: LD_VAR 0 14
23097: PUSH
23098: FOR_TO
23099: IFFALSE 23787
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
23101: LD_ADDR_VAR 0 13
23105: PUSH
23106: LD_VAR 0 14
23110: PUSH
23111: LD_VAR 0 9
23115: ARRAY
23116: PUSH
23117: LD_INT 1
23119: ARRAY
23120: PPUSH
23121: LD_VAR 0 14
23125: PUSH
23126: LD_VAR 0 9
23130: ARRAY
23131: PUSH
23132: LD_INT 2
23134: ARRAY
23135: PPUSH
23136: CALL_OW 428
23140: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
23141: LD_VAR 0 14
23145: PUSH
23146: LD_VAR 0 9
23150: ARRAY
23151: PUSH
23152: LD_INT 1
23154: ARRAY
23155: PPUSH
23156: LD_VAR 0 14
23160: PUSH
23161: LD_VAR 0 9
23165: ARRAY
23166: PUSH
23167: LD_INT 2
23169: ARRAY
23170: PPUSH
23171: CALL_OW 351
23175: IFTRUE 23214
23177: PUSH
23178: LD_VAR 0 14
23182: PUSH
23183: LD_VAR 0 9
23187: ARRAY
23188: PUSH
23189: LD_INT 1
23191: ARRAY
23192: PPUSH
23193: LD_VAR 0 14
23197: PUSH
23198: LD_VAR 0 9
23202: ARRAY
23203: PUSH
23204: LD_INT 2
23206: ARRAY
23207: PPUSH
23208: CALL_OW 488
23212: NOT
23213: OR
23214: IFTRUE 23231
23216: PUSH
23217: LD_VAR 0 13
23221: PPUSH
23222: CALL_OW 247
23226: PUSH
23227: LD_INT 3
23229: EQUAL
23230: OR
23231: IFFALSE 23237
// exit ;
23233: POP
23234: POP
23235: GO 23789
// if not tmp then
23237: LD_VAR 0 13
23241: NOT
23242: IFFALSE 23246
// continue ;
23244: GO 23098
// result := true ;
23246: LD_ADDR_VAR 0 8
23250: PUSH
23251: LD_INT 1
23253: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
23254: LD_VAR 0 6
23258: IFFALSE 23275
23260: PUSH
23261: LD_VAR 0 13
23265: PPUSH
23266: CALL_OW 247
23270: PUSH
23271: LD_INT 2
23273: EQUAL
23274: AND
23275: IFFALSE 23292
23277: PUSH
23278: LD_VAR 0 13
23282: PPUSH
23283: CALL_OW 263
23287: PUSH
23288: LD_INT 1
23290: EQUAL
23291: AND
23292: IFFALSE 23456
// begin if IsDrivenBy ( tmp ) then
23294: LD_VAR 0 13
23298: PPUSH
23299: CALL_OW 311
23303: IFFALSE 23307
// continue ;
23305: GO 23098
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
23307: LD_VAR 0 6
23311: PPUSH
23312: LD_INT 3
23314: PUSH
23315: LD_INT 60
23317: PUSH
23318: EMPTY
23319: LIST
23320: PUSH
23321: EMPTY
23322: LIST
23323: LIST
23324: PUSH
23325: LD_INT 3
23327: PUSH
23328: LD_INT 55
23330: PUSH
23331: EMPTY
23332: LIST
23333: PUSH
23334: EMPTY
23335: LIST
23336: LIST
23337: PUSH
23338: EMPTY
23339: LIST
23340: LIST
23341: PPUSH
23342: CALL_OW 72
23346: IFFALSE 23454
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
23348: LD_ADDR_VAR 0 18
23352: PUSH
23353: LD_VAR 0 6
23357: PPUSH
23358: LD_INT 3
23360: PUSH
23361: LD_INT 60
23363: PUSH
23364: EMPTY
23365: LIST
23366: PUSH
23367: EMPTY
23368: LIST
23369: LIST
23370: PUSH
23371: LD_INT 3
23373: PUSH
23374: LD_INT 55
23376: PUSH
23377: EMPTY
23378: LIST
23379: PUSH
23380: EMPTY
23381: LIST
23382: LIST
23383: PUSH
23384: EMPTY
23385: LIST
23386: LIST
23387: PPUSH
23388: CALL_OW 72
23392: PUSH
23393: LD_INT 1
23395: ARRAY
23396: ST_TO_ADDR
// if IsInUnit ( driver ) then
23397: LD_VAR 0 18
23401: PPUSH
23402: CALL_OW 310
23406: IFFALSE 23417
// ComExit ( driver ) ;
23408: LD_VAR 0 18
23412: PPUSH
23413: CALL 49060 0 1
// AddComEnterUnit ( driver , tmp ) ;
23417: LD_VAR 0 18
23421: PPUSH
23422: LD_VAR 0 13
23426: PPUSH
23427: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
23431: LD_VAR 0 18
23435: PPUSH
23436: LD_VAR 0 7
23440: PPUSH
23441: CALL_OW 173
// AddComExitVehicle ( driver ) ;
23445: LD_VAR 0 18
23449: PPUSH
23450: CALL_OW 181
// end ; continue ;
23454: GO 23098
// end ; if not cleaners or not tmp in cleaners then
23456: LD_VAR 0 6
23460: NOT
23461: IFTRUE 23476
23463: PUSH
23464: LD_VAR 0 13
23468: PUSH
23469: LD_VAR 0 6
23473: IN
23474: NOT
23475: OR
23476: IFFALSE 23785
// begin if dep then
23478: LD_VAR 0 17
23482: IFFALSE 23618
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
23484: LD_ADDR_VAR 0 16
23488: PUSH
23489: LD_VAR 0 17
23493: PUSH
23494: LD_INT 1
23496: ARRAY
23497: PPUSH
23498: CALL_OW 250
23502: PPUSH
23503: LD_VAR 0 17
23507: PUSH
23508: LD_INT 1
23510: ARRAY
23511: PPUSH
23512: CALL_OW 254
23516: PPUSH
23517: LD_INT 5
23519: PPUSH
23520: CALL_OW 272
23524: PUSH
23525: LD_VAR 0 17
23529: PUSH
23530: LD_INT 1
23532: ARRAY
23533: PPUSH
23534: CALL_OW 251
23538: PPUSH
23539: LD_VAR 0 17
23543: PUSH
23544: LD_INT 1
23546: ARRAY
23547: PPUSH
23548: CALL_OW 254
23552: PPUSH
23553: LD_INT 5
23555: PPUSH
23556: CALL_OW 273
23560: PUSH
23561: EMPTY
23562: LIST
23563: LIST
23564: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
23565: LD_VAR 0 16
23569: PUSH
23570: LD_INT 1
23572: ARRAY
23573: PPUSH
23574: LD_VAR 0 16
23578: PUSH
23579: LD_INT 2
23581: ARRAY
23582: PPUSH
23583: CALL_OW 488
23587: IFFALSE 23618
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
23589: LD_VAR 0 13
23593: PPUSH
23594: LD_VAR 0 16
23598: PUSH
23599: LD_INT 1
23601: ARRAY
23602: PPUSH
23603: LD_VAR 0 16
23607: PUSH
23608: LD_INT 2
23610: ARRAY
23611: PPUSH
23612: CALL_OW 111
// continue ;
23616: GO 23098
// end ; end ; r := GetDir ( tmp ) ;
23618: LD_ADDR_VAR 0 15
23622: PUSH
23623: LD_VAR 0 13
23627: PPUSH
23628: CALL_OW 254
23632: ST_TO_ADDR
// if r = 5 then
23633: LD_VAR 0 15
23637: PUSH
23638: LD_INT 5
23640: EQUAL
23641: IFFALSE 23651
// r := 0 ;
23643: LD_ADDR_VAR 0 15
23647: PUSH
23648: LD_INT 0
23650: ST_TO_ADDR
// for j = r to 5 do
23651: LD_ADDR_VAR 0 10
23655: PUSH
23656: DOUBLE
23657: LD_VAR 0 15
23661: DEC
23662: ST_TO_ADDR
23663: LD_INT 5
23665: PUSH
23666: FOR_TO
23667: IFFALSE 23783
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
23669: LD_ADDR_VAR 0 11
23673: PUSH
23674: LD_VAR 0 13
23678: PPUSH
23679: CALL_OW 250
23683: PPUSH
23684: LD_VAR 0 10
23688: PPUSH
23689: LD_INT 2
23691: PPUSH
23692: CALL_OW 272
23696: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
23697: LD_ADDR_VAR 0 12
23701: PUSH
23702: LD_VAR 0 13
23706: PPUSH
23707: CALL_OW 251
23711: PPUSH
23712: LD_VAR 0 10
23716: PPUSH
23717: LD_INT 2
23719: PPUSH
23720: CALL_OW 273
23724: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
23725: LD_VAR 0 11
23729: PPUSH
23730: LD_VAR 0 12
23734: PPUSH
23735: CALL_OW 488
23739: IFFALSE 23758
23741: PUSH
23742: LD_VAR 0 11
23746: PPUSH
23747: LD_VAR 0 12
23751: PPUSH
23752: CALL_OW 428
23756: NOT
23757: AND
23758: IFFALSE 23781
// begin ComMoveXY ( tmp , _x , _y ) ;
23760: LD_VAR 0 13
23764: PPUSH
23765: LD_VAR 0 11
23769: PPUSH
23770: LD_VAR 0 12
23774: PPUSH
23775: CALL_OW 111
// break ;
23779: GO 23783
// end ; end ;
23781: GO 23666
23783: POP
23784: POP
// end ; end ;
23785: GO 23098
23787: POP
23788: POP
// end ;
23789: LD_VAR 0 8
23793: RET
// export function BuildingTechInvented ( side , btype ) ; begin
23794: LD_INT 0
23796: PPUSH
// result := true ;
23797: LD_ADDR_VAR 0 3
23801: PUSH
23802: LD_INT 1
23804: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
23805: LD_VAR 0 2
23809: PUSH
23810: LD_INT 24
23812: DOUBLE
23813: EQUAL
23814: IFTRUE 23824
23816: LD_INT 33
23818: DOUBLE
23819: EQUAL
23820: IFTRUE 23824
23822: GO 23849
23824: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
23825: LD_ADDR_VAR 0 3
23829: PUSH
23830: LD_INT 32
23832: PPUSH
23833: LD_VAR 0 1
23837: PPUSH
23838: CALL_OW 321
23842: PUSH
23843: LD_INT 2
23845: EQUAL
23846: ST_TO_ADDR
23847: GO 24165
23849: LD_INT 20
23851: DOUBLE
23852: EQUAL
23853: IFTRUE 23857
23855: GO 23882
23857: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
23858: LD_ADDR_VAR 0 3
23862: PUSH
23863: LD_INT 6
23865: PPUSH
23866: LD_VAR 0 1
23870: PPUSH
23871: CALL_OW 321
23875: PUSH
23876: LD_INT 2
23878: EQUAL
23879: ST_TO_ADDR
23880: GO 24165
23882: LD_INT 22
23884: DOUBLE
23885: EQUAL
23886: IFTRUE 23896
23888: LD_INT 36
23890: DOUBLE
23891: EQUAL
23892: IFTRUE 23896
23894: GO 23921
23896: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
23897: LD_ADDR_VAR 0 3
23901: PUSH
23902: LD_INT 15
23904: PPUSH
23905: LD_VAR 0 1
23909: PPUSH
23910: CALL_OW 321
23914: PUSH
23915: LD_INT 2
23917: EQUAL
23918: ST_TO_ADDR
23919: GO 24165
23921: LD_INT 30
23923: DOUBLE
23924: EQUAL
23925: IFTRUE 23929
23927: GO 23954
23929: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
23930: LD_ADDR_VAR 0 3
23934: PUSH
23935: LD_INT 20
23937: PPUSH
23938: LD_VAR 0 1
23942: PPUSH
23943: CALL_OW 321
23947: PUSH
23948: LD_INT 2
23950: EQUAL
23951: ST_TO_ADDR
23952: GO 24165
23954: LD_INT 28
23956: DOUBLE
23957: EQUAL
23958: IFTRUE 23968
23960: LD_INT 21
23962: DOUBLE
23963: EQUAL
23964: IFTRUE 23968
23966: GO 23993
23968: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
23969: LD_ADDR_VAR 0 3
23973: PUSH
23974: LD_INT 21
23976: PPUSH
23977: LD_VAR 0 1
23981: PPUSH
23982: CALL_OW 321
23986: PUSH
23987: LD_INT 2
23989: EQUAL
23990: ST_TO_ADDR
23991: GO 24165
23993: LD_INT 16
23995: DOUBLE
23996: EQUAL
23997: IFTRUE 24001
23999: GO 24026
24001: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
24002: LD_ADDR_VAR 0 3
24006: PUSH
24007: LD_INT 84
24009: PPUSH
24010: LD_VAR 0 1
24014: PPUSH
24015: CALL_OW 321
24019: PUSH
24020: LD_INT 2
24022: EQUAL
24023: ST_TO_ADDR
24024: GO 24165
24026: LD_INT 19
24028: DOUBLE
24029: EQUAL
24030: IFTRUE 24040
24032: LD_INT 23
24034: DOUBLE
24035: EQUAL
24036: IFTRUE 24040
24038: GO 24065
24040: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
24041: LD_ADDR_VAR 0 3
24045: PUSH
24046: LD_INT 83
24048: PPUSH
24049: LD_VAR 0 1
24053: PPUSH
24054: CALL_OW 321
24058: PUSH
24059: LD_INT 2
24061: EQUAL
24062: ST_TO_ADDR
24063: GO 24165
24065: LD_INT 17
24067: DOUBLE
24068: EQUAL
24069: IFTRUE 24073
24071: GO 24098
24073: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
24074: LD_ADDR_VAR 0 3
24078: PUSH
24079: LD_INT 39
24081: PPUSH
24082: LD_VAR 0 1
24086: PPUSH
24087: CALL_OW 321
24091: PUSH
24092: LD_INT 2
24094: EQUAL
24095: ST_TO_ADDR
24096: GO 24165
24098: LD_INT 18
24100: DOUBLE
24101: EQUAL
24102: IFTRUE 24106
24104: GO 24131
24106: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
24107: LD_ADDR_VAR 0 3
24111: PUSH
24112: LD_INT 40
24114: PPUSH
24115: LD_VAR 0 1
24119: PPUSH
24120: CALL_OW 321
24124: PUSH
24125: LD_INT 2
24127: EQUAL
24128: ST_TO_ADDR
24129: GO 24165
24131: LD_INT 27
24133: DOUBLE
24134: EQUAL
24135: IFTRUE 24139
24137: GO 24164
24139: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
24140: LD_ADDR_VAR 0 3
24144: PUSH
24145: LD_INT 35
24147: PPUSH
24148: LD_VAR 0 1
24152: PPUSH
24153: CALL_OW 321
24157: PUSH
24158: LD_INT 2
24160: EQUAL
24161: ST_TO_ADDR
24162: GO 24165
24164: POP
// end ;
24165: LD_VAR 0 3
24169: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
24170: LD_INT 0
24172: PPUSH
24173: PPUSH
24174: PPUSH
24175: PPUSH
24176: PPUSH
24177: PPUSH
24178: PPUSH
24179: PPUSH
24180: PPUSH
24181: PPUSH
24182: PPUSH
// result := false ;
24183: LD_ADDR_VAR 0 6
24187: PUSH
24188: LD_INT 0
24190: ST_TO_ADDR
// if btype = b_depot then
24191: LD_VAR 0 2
24195: PUSH
24196: LD_INT 0
24198: EQUAL
24199: IFFALSE 24211
// begin result := true ;
24201: LD_ADDR_VAR 0 6
24205: PUSH
24206: LD_INT 1
24208: ST_TO_ADDR
// exit ;
24209: GO 25065
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
24211: LD_VAR 0 1
24215: NOT
24216: IFTRUE 24241
24218: PUSH
24219: LD_VAR 0 1
24223: PPUSH
24224: CALL_OW 266
24228: PUSH
24229: LD_INT 0
24231: PUSH
24232: LD_INT 1
24234: PUSH
24235: EMPTY
24236: LIST
24237: LIST
24238: IN
24239: NOT
24240: OR
24241: IFTRUE 24250
24243: PUSH
24244: LD_VAR 0 2
24248: NOT
24249: OR
24250: IFTRUE 24286
24252: PUSH
24253: LD_VAR 0 5
24257: PUSH
24258: LD_INT 0
24260: PUSH
24261: LD_INT 1
24263: PUSH
24264: LD_INT 2
24266: PUSH
24267: LD_INT 3
24269: PUSH
24270: LD_INT 4
24272: PUSH
24273: LD_INT 5
24275: PUSH
24276: EMPTY
24277: LIST
24278: LIST
24279: LIST
24280: LIST
24281: LIST
24282: LIST
24283: IN
24284: NOT
24285: OR
24286: IFTRUE 24305
24288: PUSH
24289: LD_VAR 0 3
24293: PPUSH
24294: LD_VAR 0 4
24298: PPUSH
24299: CALL_OW 488
24303: NOT
24304: OR
24305: IFFALSE 24309
// exit ;
24307: GO 25065
// side := GetSide ( depot ) ;
24309: LD_ADDR_VAR 0 9
24313: PUSH
24314: LD_VAR 0 1
24318: PPUSH
24319: CALL_OW 255
24323: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
24324: LD_VAR 0 9
24328: PPUSH
24329: LD_VAR 0 2
24333: PPUSH
24334: CALL 23794 0 2
24338: NOT
24339: IFFALSE 24343
// exit ;
24341: GO 25065
// pom := GetBase ( depot ) ;
24343: LD_ADDR_VAR 0 10
24347: PUSH
24348: LD_VAR 0 1
24352: PPUSH
24353: CALL_OW 274
24357: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
24358: LD_ADDR_VAR 0 11
24362: PUSH
24363: LD_VAR 0 2
24367: PPUSH
24368: LD_VAR 0 1
24372: PPUSH
24373: CALL_OW 248
24377: PPUSH
24378: CALL_OW 450
24382: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
24383: LD_VAR 0 10
24387: PPUSH
24388: LD_INT 1
24390: PPUSH
24391: CALL_OW 275
24395: PUSH
24396: LD_VAR 0 11
24400: PUSH
24401: LD_INT 1
24403: ARRAY
24404: GREATEREQUAL
24405: IFFALSE 24431
24407: PUSH
24408: LD_VAR 0 10
24412: PPUSH
24413: LD_INT 2
24415: PPUSH
24416: CALL_OW 275
24420: PUSH
24421: LD_VAR 0 11
24425: PUSH
24426: LD_INT 2
24428: ARRAY
24429: GREATEREQUAL
24430: AND
24431: IFFALSE 24457
24433: PUSH
24434: LD_VAR 0 10
24438: PPUSH
24439: LD_INT 3
24441: PPUSH
24442: CALL_OW 275
24446: PUSH
24447: LD_VAR 0 11
24451: PUSH
24452: LD_INT 3
24454: ARRAY
24455: GREATEREQUAL
24456: AND
24457: NOT
24458: IFFALSE 24462
// exit ;
24460: GO 25065
// if GetBType ( depot ) = b_depot then
24462: LD_VAR 0 1
24466: PPUSH
24467: CALL_OW 266
24471: PUSH
24472: LD_INT 0
24474: EQUAL
24475: IFFALSE 24487
// dist := 28 else
24477: LD_ADDR_VAR 0 14
24481: PUSH
24482: LD_INT 28
24484: ST_TO_ADDR
24485: GO 24495
// dist := 36 ;
24487: LD_ADDR_VAR 0 14
24491: PUSH
24492: LD_INT 36
24494: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
24495: LD_VAR 0 1
24499: PPUSH
24500: LD_VAR 0 3
24504: PPUSH
24505: LD_VAR 0 4
24509: PPUSH
24510: CALL_OW 297
24514: PUSH
24515: LD_VAR 0 14
24519: GREATER
24520: IFFALSE 24524
// exit ;
24522: GO 25065
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
24524: LD_ADDR_VAR 0 12
24528: PUSH
24529: LD_VAR 0 2
24533: PPUSH
24534: LD_VAR 0 3
24538: PPUSH
24539: LD_VAR 0 4
24543: PPUSH
24544: LD_VAR 0 5
24548: PPUSH
24549: LD_VAR 0 1
24553: PPUSH
24554: CALL_OW 248
24558: PPUSH
24559: LD_INT 0
24561: PPUSH
24562: CALL 25070 0 6
24566: ST_TO_ADDR
// if not hexes then
24567: LD_VAR 0 12
24571: NOT
24572: IFFALSE 24576
// exit ;
24574: GO 25065
// hex := GetHexInfo ( x , y ) ;
24576: LD_ADDR_VAR 0 15
24580: PUSH
24581: LD_VAR 0 3
24585: PPUSH
24586: LD_VAR 0 4
24590: PPUSH
24591: CALL_OW 546
24595: ST_TO_ADDR
// if hex [ 1 ] then
24596: LD_VAR 0 15
24600: PUSH
24601: LD_INT 1
24603: ARRAY
24604: IFFALSE 24608
// exit ;
24606: GO 25065
// height := hex [ 2 ] ;
24608: LD_ADDR_VAR 0 13
24612: PUSH
24613: LD_VAR 0 15
24617: PUSH
24618: LD_INT 2
24620: ARRAY
24621: ST_TO_ADDR
// for i = 1 to hexes do
24622: LD_ADDR_VAR 0 7
24626: PUSH
24627: DOUBLE
24628: LD_INT 1
24630: DEC
24631: ST_TO_ADDR
24632: LD_VAR 0 12
24636: PUSH
24637: FOR_TO
24638: IFFALSE 24982
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
24640: LD_VAR 0 12
24644: PUSH
24645: LD_VAR 0 7
24649: ARRAY
24650: PUSH
24651: LD_INT 1
24653: ARRAY
24654: PPUSH
24655: LD_VAR 0 12
24659: PUSH
24660: LD_VAR 0 7
24664: ARRAY
24665: PUSH
24666: LD_INT 2
24668: ARRAY
24669: PPUSH
24670: CALL_OW 488
24674: NOT
24675: IFTRUE 24717
24677: PUSH
24678: LD_VAR 0 12
24682: PUSH
24683: LD_VAR 0 7
24687: ARRAY
24688: PUSH
24689: LD_INT 1
24691: ARRAY
24692: PPUSH
24693: LD_VAR 0 12
24697: PUSH
24698: LD_VAR 0 7
24702: ARRAY
24703: PUSH
24704: LD_INT 2
24706: ARRAY
24707: PPUSH
24708: CALL_OW 428
24712: PUSH
24713: LD_INT 0
24715: GREATER
24716: OR
24717: IFTRUE 24755
24719: PUSH
24720: LD_VAR 0 12
24724: PUSH
24725: LD_VAR 0 7
24729: ARRAY
24730: PUSH
24731: LD_INT 1
24733: ARRAY
24734: PPUSH
24735: LD_VAR 0 12
24739: PUSH
24740: LD_VAR 0 7
24744: ARRAY
24745: PUSH
24746: LD_INT 2
24748: ARRAY
24749: PPUSH
24750: CALL_OW 351
24754: OR
24755: IFFALSE 24761
// exit ;
24757: POP
24758: POP
24759: GO 25065
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
24761: LD_ADDR_VAR 0 8
24765: PUSH
24766: LD_VAR 0 12
24770: PUSH
24771: LD_VAR 0 7
24775: ARRAY
24776: PUSH
24777: LD_INT 1
24779: ARRAY
24780: PPUSH
24781: LD_VAR 0 12
24785: PUSH
24786: LD_VAR 0 7
24790: ARRAY
24791: PUSH
24792: LD_INT 2
24794: ARRAY
24795: PPUSH
24796: CALL_OW 546
24800: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
24801: LD_VAR 0 8
24805: PUSH
24806: LD_INT 1
24808: ARRAY
24809: IFTRUE 24831
24811: PUSH
24812: LD_VAR 0 8
24816: PUSH
24817: LD_INT 2
24819: ARRAY
24820: PUSH
24821: LD_VAR 0 13
24825: PUSH
24826: LD_INT 2
24828: PLUS
24829: GREATER
24830: OR
24831: IFTRUE 24853
24833: PUSH
24834: LD_VAR 0 8
24838: PUSH
24839: LD_INT 2
24841: ARRAY
24842: PUSH
24843: LD_VAR 0 13
24847: PUSH
24848: LD_INT 2
24850: MINUS
24851: LESS
24852: OR
24853: IFTRUE 24921
24855: PUSH
24856: LD_VAR 0 8
24860: PUSH
24861: LD_INT 3
24863: ARRAY
24864: PUSH
24865: LD_INT 0
24867: PUSH
24868: LD_INT 8
24870: PUSH
24871: LD_INT 9
24873: PUSH
24874: LD_INT 10
24876: PUSH
24877: LD_INT 11
24879: PUSH
24880: LD_INT 12
24882: PUSH
24883: LD_INT 13
24885: PUSH
24886: LD_INT 16
24888: PUSH
24889: LD_INT 17
24891: PUSH
24892: LD_INT 18
24894: PUSH
24895: LD_INT 19
24897: PUSH
24898: LD_INT 20
24900: PUSH
24901: LD_INT 21
24903: PUSH
24904: EMPTY
24905: LIST
24906: LIST
24907: LIST
24908: LIST
24909: LIST
24910: LIST
24911: LIST
24912: LIST
24913: LIST
24914: LIST
24915: LIST
24916: LIST
24917: LIST
24918: IN
24919: NOT
24920: OR
24921: IFTRUE 24934
24923: PUSH
24924: LD_VAR 0 8
24928: PUSH
24929: LD_INT 5
24931: ARRAY
24932: NOT
24933: OR
24934: IFTRUE 24974
24936: PUSH
24937: LD_VAR 0 8
24941: PUSH
24942: LD_INT 6
24944: ARRAY
24945: PUSH
24946: LD_INT 1
24948: PUSH
24949: LD_INT 2
24951: PUSH
24952: LD_INT 7
24954: PUSH
24955: LD_INT 9
24957: PUSH
24958: LD_INT 10
24960: PUSH
24961: LD_INT 11
24963: PUSH
24964: EMPTY
24965: LIST
24966: LIST
24967: LIST
24968: LIST
24969: LIST
24970: LIST
24971: IN
24972: NOT
24973: OR
24974: IFFALSE 24980
// exit ;
24976: POP
24977: POP
24978: GO 25065
// end ;
24980: GO 24637
24982: POP
24983: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
24984: LD_VAR 0 9
24988: PPUSH
24989: LD_VAR 0 3
24993: PPUSH
24994: LD_VAR 0 4
24998: PPUSH
24999: LD_INT 20
25001: PPUSH
25002: CALL 16884 0 4
25006: PUSH
25007: LD_INT 4
25009: ARRAY
25010: IFFALSE 25014
// exit ;
25012: GO 25065
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
25014: LD_VAR 0 2
25018: PUSH
25019: LD_INT 29
25021: PUSH
25022: LD_INT 30
25024: PUSH
25025: EMPTY
25026: LIST
25027: LIST
25028: IN
25029: IFFALSE 25053
25031: PUSH
25032: LD_VAR 0 3
25036: PPUSH
25037: LD_VAR 0 4
25041: PPUSH
25042: LD_VAR 0 9
25046: PPUSH
25047: CALL_OW 440
25051: NOT
25052: AND
25053: IFFALSE 25057
// exit ;
25055: GO 25065
// result := true ;
25057: LD_ADDR_VAR 0 6
25061: PUSH
25062: LD_INT 1
25064: ST_TO_ADDR
// end ;
25065: LD_VAR 0 6
25069: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
25070: LD_INT 0
25072: PPUSH
25073: PPUSH
25074: PPUSH
25075: PPUSH
25076: PPUSH
25077: PPUSH
25078: PPUSH
25079: PPUSH
25080: PPUSH
25081: PPUSH
25082: PPUSH
25083: PPUSH
25084: PPUSH
25085: PPUSH
25086: PPUSH
25087: PPUSH
25088: PPUSH
25089: PPUSH
25090: PPUSH
25091: PPUSH
25092: PPUSH
25093: PPUSH
25094: PPUSH
25095: PPUSH
25096: PPUSH
25097: PPUSH
25098: PPUSH
25099: PPUSH
25100: PPUSH
25101: PPUSH
25102: PPUSH
25103: PPUSH
25104: PPUSH
25105: PPUSH
25106: PPUSH
25107: PPUSH
25108: PPUSH
25109: PPUSH
25110: PPUSH
25111: PPUSH
25112: PPUSH
25113: PPUSH
25114: PPUSH
25115: PPUSH
25116: PPUSH
25117: PPUSH
25118: PPUSH
25119: PPUSH
25120: PPUSH
25121: PPUSH
25122: PPUSH
25123: PPUSH
25124: PPUSH
25125: PPUSH
25126: PPUSH
25127: PPUSH
25128: PPUSH
25129: PPUSH
// result = [ ] ;
25130: LD_ADDR_VAR 0 7
25134: PUSH
25135: EMPTY
25136: ST_TO_ADDR
// temp_list = [ ] ;
25137: LD_ADDR_VAR 0 9
25141: PUSH
25142: EMPTY
25143: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
25144: LD_VAR 0 4
25148: PUSH
25149: LD_INT 0
25151: PUSH
25152: LD_INT 1
25154: PUSH
25155: LD_INT 2
25157: PUSH
25158: LD_INT 3
25160: PUSH
25161: LD_INT 4
25163: PUSH
25164: LD_INT 5
25166: PUSH
25167: EMPTY
25168: LIST
25169: LIST
25170: LIST
25171: LIST
25172: LIST
25173: LIST
25174: IN
25175: NOT
25176: IFTRUE 25219
25178: PUSH
25179: LD_VAR 0 1
25183: PUSH
25184: LD_INT 0
25186: PUSH
25187: LD_INT 1
25189: PUSH
25190: EMPTY
25191: LIST
25192: LIST
25193: IN
25194: IFFALSE 25218
25196: PUSH
25197: LD_VAR 0 5
25201: PUSH
25202: LD_INT 1
25204: PUSH
25205: LD_INT 2
25207: PUSH
25208: LD_INT 3
25210: PUSH
25211: EMPTY
25212: LIST
25213: LIST
25214: LIST
25215: IN
25216: NOT
25217: AND
25218: OR
25219: IFFALSE 25223
// exit ;
25221: GO 43622
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
25223: LD_VAR 0 1
25227: PUSH
25228: LD_INT 6
25230: PUSH
25231: LD_INT 7
25233: PUSH
25234: LD_INT 8
25236: PUSH
25237: LD_INT 13
25239: PUSH
25240: LD_INT 12
25242: PUSH
25243: LD_INT 15
25245: PUSH
25246: LD_INT 11
25248: PUSH
25249: LD_INT 14
25251: PUSH
25252: LD_INT 10
25254: PUSH
25255: EMPTY
25256: LIST
25257: LIST
25258: LIST
25259: LIST
25260: LIST
25261: LIST
25262: LIST
25263: LIST
25264: LIST
25265: IN
25266: IFFALSE 25276
// btype = b_lab ;
25268: LD_ADDR_VAR 0 1
25272: PUSH
25273: LD_INT 6
25275: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
25276: LD_VAR 0 6
25280: PUSH
25281: LD_INT 0
25283: PUSH
25284: LD_INT 1
25286: PUSH
25287: LD_INT 2
25289: PUSH
25290: EMPTY
25291: LIST
25292: LIST
25293: LIST
25294: IN
25295: NOT
25296: IFTRUE 25364
25298: PUSH
25299: LD_VAR 0 1
25303: PUSH
25304: LD_INT 0
25306: PUSH
25307: LD_INT 1
25309: PUSH
25310: LD_INT 2
25312: PUSH
25313: LD_INT 3
25315: PUSH
25316: LD_INT 6
25318: PUSH
25319: LD_INT 36
25321: PUSH
25322: LD_INT 4
25324: PUSH
25325: LD_INT 5
25327: PUSH
25328: LD_INT 31
25330: PUSH
25331: LD_INT 32
25333: PUSH
25334: LD_INT 33
25336: PUSH
25337: EMPTY
25338: LIST
25339: LIST
25340: LIST
25341: LIST
25342: LIST
25343: LIST
25344: LIST
25345: LIST
25346: LIST
25347: LIST
25348: LIST
25349: IN
25350: NOT
25351: IFFALSE 25363
25353: PUSH
25354: LD_VAR 0 6
25358: PUSH
25359: LD_INT 1
25361: EQUAL
25362: AND
25363: OR
25364: IFTRUE 25396
25366: PUSH
25367: LD_VAR 0 1
25371: PUSH
25372: LD_INT 2
25374: PUSH
25375: LD_INT 3
25377: PUSH
25378: EMPTY
25379: LIST
25380: LIST
25381: IN
25382: NOT
25383: IFFALSE 25395
25385: PUSH
25386: LD_VAR 0 6
25390: PUSH
25391: LD_INT 2
25393: EQUAL
25394: AND
25395: OR
25396: IFFALSE 25406
// mode = 0 ;
25398: LD_ADDR_VAR 0 6
25402: PUSH
25403: LD_INT 0
25405: ST_TO_ADDR
// case mode of 0 :
25406: LD_VAR 0 6
25410: PUSH
25411: LD_INT 0
25413: DOUBLE
25414: EQUAL
25415: IFTRUE 25419
25417: GO 36872
25419: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
25420: LD_ADDR_VAR 0 11
25424: PUSH
25425: LD_INT 0
25427: PUSH
25428: LD_INT 0
25430: PUSH
25431: EMPTY
25432: LIST
25433: LIST
25434: PUSH
25435: LD_INT 0
25437: PUSH
25438: LD_INT 1
25440: NEG
25441: PUSH
25442: EMPTY
25443: LIST
25444: LIST
25445: PUSH
25446: LD_INT 1
25448: PUSH
25449: LD_INT 0
25451: PUSH
25452: EMPTY
25453: LIST
25454: LIST
25455: PUSH
25456: LD_INT 1
25458: PUSH
25459: LD_INT 1
25461: PUSH
25462: EMPTY
25463: LIST
25464: LIST
25465: PUSH
25466: LD_INT 0
25468: PUSH
25469: LD_INT 1
25471: PUSH
25472: EMPTY
25473: LIST
25474: LIST
25475: PUSH
25476: LD_INT 1
25478: NEG
25479: PUSH
25480: LD_INT 0
25482: PUSH
25483: EMPTY
25484: LIST
25485: LIST
25486: PUSH
25487: LD_INT 1
25489: NEG
25490: PUSH
25491: LD_INT 1
25493: NEG
25494: PUSH
25495: EMPTY
25496: LIST
25497: LIST
25498: PUSH
25499: LD_INT 1
25501: NEG
25502: PUSH
25503: LD_INT 2
25505: NEG
25506: PUSH
25507: EMPTY
25508: LIST
25509: LIST
25510: PUSH
25511: LD_INT 0
25513: PUSH
25514: LD_INT 2
25516: NEG
25517: PUSH
25518: EMPTY
25519: LIST
25520: LIST
25521: PUSH
25522: LD_INT 1
25524: PUSH
25525: LD_INT 1
25527: NEG
25528: PUSH
25529: EMPTY
25530: LIST
25531: LIST
25532: PUSH
25533: LD_INT 1
25535: PUSH
25536: LD_INT 2
25538: PUSH
25539: EMPTY
25540: LIST
25541: LIST
25542: PUSH
25543: LD_INT 0
25545: PUSH
25546: LD_INT 2
25548: PUSH
25549: EMPTY
25550: LIST
25551: LIST
25552: PUSH
25553: LD_INT 1
25555: NEG
25556: PUSH
25557: LD_INT 1
25559: PUSH
25560: EMPTY
25561: LIST
25562: LIST
25563: PUSH
25564: LD_INT 1
25566: PUSH
25567: LD_INT 3
25569: PUSH
25570: EMPTY
25571: LIST
25572: LIST
25573: PUSH
25574: LD_INT 0
25576: PUSH
25577: LD_INT 3
25579: PUSH
25580: EMPTY
25581: LIST
25582: LIST
25583: PUSH
25584: LD_INT 1
25586: NEG
25587: PUSH
25588: LD_INT 2
25590: PUSH
25591: EMPTY
25592: LIST
25593: LIST
25594: PUSH
25595: EMPTY
25596: LIST
25597: LIST
25598: LIST
25599: LIST
25600: LIST
25601: LIST
25602: LIST
25603: LIST
25604: LIST
25605: LIST
25606: LIST
25607: LIST
25608: LIST
25609: LIST
25610: LIST
25611: LIST
25612: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
25613: LD_ADDR_VAR 0 12
25617: PUSH
25618: LD_INT 0
25620: PUSH
25621: LD_INT 0
25623: PUSH
25624: EMPTY
25625: LIST
25626: LIST
25627: PUSH
25628: LD_INT 0
25630: PUSH
25631: LD_INT 1
25633: NEG
25634: PUSH
25635: EMPTY
25636: LIST
25637: LIST
25638: PUSH
25639: LD_INT 1
25641: PUSH
25642: LD_INT 0
25644: PUSH
25645: EMPTY
25646: LIST
25647: LIST
25648: PUSH
25649: LD_INT 1
25651: PUSH
25652: LD_INT 1
25654: PUSH
25655: EMPTY
25656: LIST
25657: LIST
25658: PUSH
25659: LD_INT 0
25661: PUSH
25662: LD_INT 1
25664: PUSH
25665: EMPTY
25666: LIST
25667: LIST
25668: PUSH
25669: LD_INT 1
25671: NEG
25672: PUSH
25673: LD_INT 0
25675: PUSH
25676: EMPTY
25677: LIST
25678: LIST
25679: PUSH
25680: LD_INT 1
25682: NEG
25683: PUSH
25684: LD_INT 1
25686: NEG
25687: PUSH
25688: EMPTY
25689: LIST
25690: LIST
25691: PUSH
25692: LD_INT 1
25694: PUSH
25695: LD_INT 1
25697: NEG
25698: PUSH
25699: EMPTY
25700: LIST
25701: LIST
25702: PUSH
25703: LD_INT 2
25705: PUSH
25706: LD_INT 0
25708: PUSH
25709: EMPTY
25710: LIST
25711: LIST
25712: PUSH
25713: LD_INT 2
25715: PUSH
25716: LD_INT 1
25718: PUSH
25719: EMPTY
25720: LIST
25721: LIST
25722: PUSH
25723: LD_INT 1
25725: NEG
25726: PUSH
25727: LD_INT 1
25729: PUSH
25730: EMPTY
25731: LIST
25732: LIST
25733: PUSH
25734: LD_INT 2
25736: NEG
25737: PUSH
25738: LD_INT 0
25740: PUSH
25741: EMPTY
25742: LIST
25743: LIST
25744: PUSH
25745: LD_INT 2
25747: NEG
25748: PUSH
25749: LD_INT 1
25751: NEG
25752: PUSH
25753: EMPTY
25754: LIST
25755: LIST
25756: PUSH
25757: LD_INT 2
25759: NEG
25760: PUSH
25761: LD_INT 1
25763: PUSH
25764: EMPTY
25765: LIST
25766: LIST
25767: PUSH
25768: LD_INT 3
25770: NEG
25771: PUSH
25772: LD_INT 0
25774: PUSH
25775: EMPTY
25776: LIST
25777: LIST
25778: PUSH
25779: LD_INT 3
25781: NEG
25782: PUSH
25783: LD_INT 1
25785: NEG
25786: PUSH
25787: EMPTY
25788: LIST
25789: LIST
25790: PUSH
25791: EMPTY
25792: LIST
25793: LIST
25794: LIST
25795: LIST
25796: LIST
25797: LIST
25798: LIST
25799: LIST
25800: LIST
25801: LIST
25802: LIST
25803: LIST
25804: LIST
25805: LIST
25806: LIST
25807: LIST
25808: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
25809: LD_ADDR_VAR 0 13
25813: PUSH
25814: LD_INT 0
25816: PUSH
25817: LD_INT 0
25819: PUSH
25820: EMPTY
25821: LIST
25822: LIST
25823: PUSH
25824: LD_INT 0
25826: PUSH
25827: LD_INT 1
25829: NEG
25830: PUSH
25831: EMPTY
25832: LIST
25833: LIST
25834: PUSH
25835: LD_INT 1
25837: PUSH
25838: LD_INT 0
25840: PUSH
25841: EMPTY
25842: LIST
25843: LIST
25844: PUSH
25845: LD_INT 1
25847: PUSH
25848: LD_INT 1
25850: PUSH
25851: EMPTY
25852: LIST
25853: LIST
25854: PUSH
25855: LD_INT 0
25857: PUSH
25858: LD_INT 1
25860: PUSH
25861: EMPTY
25862: LIST
25863: LIST
25864: PUSH
25865: LD_INT 1
25867: NEG
25868: PUSH
25869: LD_INT 0
25871: PUSH
25872: EMPTY
25873: LIST
25874: LIST
25875: PUSH
25876: LD_INT 1
25878: NEG
25879: PUSH
25880: LD_INT 1
25882: NEG
25883: PUSH
25884: EMPTY
25885: LIST
25886: LIST
25887: PUSH
25888: LD_INT 1
25890: NEG
25891: PUSH
25892: LD_INT 2
25894: NEG
25895: PUSH
25896: EMPTY
25897: LIST
25898: LIST
25899: PUSH
25900: LD_INT 2
25902: PUSH
25903: LD_INT 1
25905: PUSH
25906: EMPTY
25907: LIST
25908: LIST
25909: PUSH
25910: LD_INT 2
25912: PUSH
25913: LD_INT 2
25915: PUSH
25916: EMPTY
25917: LIST
25918: LIST
25919: PUSH
25920: LD_INT 1
25922: PUSH
25923: LD_INT 2
25925: PUSH
25926: EMPTY
25927: LIST
25928: LIST
25929: PUSH
25930: LD_INT 2
25932: NEG
25933: PUSH
25934: LD_INT 1
25936: NEG
25937: PUSH
25938: EMPTY
25939: LIST
25940: LIST
25941: PUSH
25942: LD_INT 2
25944: NEG
25945: PUSH
25946: LD_INT 2
25948: NEG
25949: PUSH
25950: EMPTY
25951: LIST
25952: LIST
25953: PUSH
25954: LD_INT 2
25956: NEG
25957: PUSH
25958: LD_INT 3
25960: NEG
25961: PUSH
25962: EMPTY
25963: LIST
25964: LIST
25965: PUSH
25966: LD_INT 3
25968: NEG
25969: PUSH
25970: LD_INT 2
25972: NEG
25973: PUSH
25974: EMPTY
25975: LIST
25976: LIST
25977: PUSH
25978: LD_INT 3
25980: NEG
25981: PUSH
25982: LD_INT 3
25984: NEG
25985: PUSH
25986: EMPTY
25987: LIST
25988: LIST
25989: PUSH
25990: EMPTY
25991: LIST
25992: LIST
25993: LIST
25994: LIST
25995: LIST
25996: LIST
25997: LIST
25998: LIST
25999: LIST
26000: LIST
26001: LIST
26002: LIST
26003: LIST
26004: LIST
26005: LIST
26006: LIST
26007: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
26008: LD_ADDR_VAR 0 14
26012: PUSH
26013: LD_INT 0
26015: PUSH
26016: LD_INT 0
26018: PUSH
26019: EMPTY
26020: LIST
26021: LIST
26022: PUSH
26023: LD_INT 0
26025: PUSH
26026: LD_INT 1
26028: NEG
26029: PUSH
26030: EMPTY
26031: LIST
26032: LIST
26033: PUSH
26034: LD_INT 1
26036: PUSH
26037: LD_INT 0
26039: PUSH
26040: EMPTY
26041: LIST
26042: LIST
26043: PUSH
26044: LD_INT 1
26046: PUSH
26047: LD_INT 1
26049: PUSH
26050: EMPTY
26051: LIST
26052: LIST
26053: PUSH
26054: LD_INT 0
26056: PUSH
26057: LD_INT 1
26059: PUSH
26060: EMPTY
26061: LIST
26062: LIST
26063: PUSH
26064: LD_INT 1
26066: NEG
26067: PUSH
26068: LD_INT 0
26070: PUSH
26071: EMPTY
26072: LIST
26073: LIST
26074: PUSH
26075: LD_INT 1
26077: NEG
26078: PUSH
26079: LD_INT 1
26081: NEG
26082: PUSH
26083: EMPTY
26084: LIST
26085: LIST
26086: PUSH
26087: LD_INT 1
26089: NEG
26090: PUSH
26091: LD_INT 2
26093: NEG
26094: PUSH
26095: EMPTY
26096: LIST
26097: LIST
26098: PUSH
26099: LD_INT 0
26101: PUSH
26102: LD_INT 2
26104: NEG
26105: PUSH
26106: EMPTY
26107: LIST
26108: LIST
26109: PUSH
26110: LD_INT 1
26112: PUSH
26113: LD_INT 1
26115: NEG
26116: PUSH
26117: EMPTY
26118: LIST
26119: LIST
26120: PUSH
26121: LD_INT 1
26123: PUSH
26124: LD_INT 2
26126: PUSH
26127: EMPTY
26128: LIST
26129: LIST
26130: PUSH
26131: LD_INT 0
26133: PUSH
26134: LD_INT 2
26136: PUSH
26137: EMPTY
26138: LIST
26139: LIST
26140: PUSH
26141: LD_INT 1
26143: NEG
26144: PUSH
26145: LD_INT 1
26147: PUSH
26148: EMPTY
26149: LIST
26150: LIST
26151: PUSH
26152: LD_INT 1
26154: NEG
26155: PUSH
26156: LD_INT 3
26158: NEG
26159: PUSH
26160: EMPTY
26161: LIST
26162: LIST
26163: PUSH
26164: LD_INT 0
26166: PUSH
26167: LD_INT 3
26169: NEG
26170: PUSH
26171: EMPTY
26172: LIST
26173: LIST
26174: PUSH
26175: LD_INT 1
26177: PUSH
26178: LD_INT 2
26180: NEG
26181: PUSH
26182: EMPTY
26183: LIST
26184: LIST
26185: PUSH
26186: EMPTY
26187: LIST
26188: LIST
26189: LIST
26190: LIST
26191: LIST
26192: LIST
26193: LIST
26194: LIST
26195: LIST
26196: LIST
26197: LIST
26198: LIST
26199: LIST
26200: LIST
26201: LIST
26202: LIST
26203: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
26204: LD_ADDR_VAR 0 15
26208: PUSH
26209: LD_INT 0
26211: PUSH
26212: LD_INT 0
26214: PUSH
26215: EMPTY
26216: LIST
26217: LIST
26218: PUSH
26219: LD_INT 0
26221: PUSH
26222: LD_INT 1
26224: NEG
26225: PUSH
26226: EMPTY
26227: LIST
26228: LIST
26229: PUSH
26230: LD_INT 1
26232: PUSH
26233: LD_INT 0
26235: PUSH
26236: EMPTY
26237: LIST
26238: LIST
26239: PUSH
26240: LD_INT 1
26242: PUSH
26243: LD_INT 1
26245: PUSH
26246: EMPTY
26247: LIST
26248: LIST
26249: PUSH
26250: LD_INT 0
26252: PUSH
26253: LD_INT 1
26255: PUSH
26256: EMPTY
26257: LIST
26258: LIST
26259: PUSH
26260: LD_INT 1
26262: NEG
26263: PUSH
26264: LD_INT 0
26266: PUSH
26267: EMPTY
26268: LIST
26269: LIST
26270: PUSH
26271: LD_INT 1
26273: NEG
26274: PUSH
26275: LD_INT 1
26277: NEG
26278: PUSH
26279: EMPTY
26280: LIST
26281: LIST
26282: PUSH
26283: LD_INT 1
26285: PUSH
26286: LD_INT 1
26288: NEG
26289: PUSH
26290: EMPTY
26291: LIST
26292: LIST
26293: PUSH
26294: LD_INT 2
26296: PUSH
26297: LD_INT 0
26299: PUSH
26300: EMPTY
26301: LIST
26302: LIST
26303: PUSH
26304: LD_INT 2
26306: PUSH
26307: LD_INT 1
26309: PUSH
26310: EMPTY
26311: LIST
26312: LIST
26313: PUSH
26314: LD_INT 1
26316: NEG
26317: PUSH
26318: LD_INT 1
26320: PUSH
26321: EMPTY
26322: LIST
26323: LIST
26324: PUSH
26325: LD_INT 2
26327: NEG
26328: PUSH
26329: LD_INT 0
26331: PUSH
26332: EMPTY
26333: LIST
26334: LIST
26335: PUSH
26336: LD_INT 2
26338: NEG
26339: PUSH
26340: LD_INT 1
26342: NEG
26343: PUSH
26344: EMPTY
26345: LIST
26346: LIST
26347: PUSH
26348: LD_INT 2
26350: PUSH
26351: LD_INT 1
26353: NEG
26354: PUSH
26355: EMPTY
26356: LIST
26357: LIST
26358: PUSH
26359: LD_INT 3
26361: PUSH
26362: LD_INT 0
26364: PUSH
26365: EMPTY
26366: LIST
26367: LIST
26368: PUSH
26369: LD_INT 3
26371: PUSH
26372: LD_INT 1
26374: PUSH
26375: EMPTY
26376: LIST
26377: LIST
26378: PUSH
26379: EMPTY
26380: LIST
26381: LIST
26382: LIST
26383: LIST
26384: LIST
26385: LIST
26386: LIST
26387: LIST
26388: LIST
26389: LIST
26390: LIST
26391: LIST
26392: LIST
26393: LIST
26394: LIST
26395: LIST
26396: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
26397: LD_ADDR_VAR 0 16
26401: PUSH
26402: LD_INT 0
26404: PUSH
26405: LD_INT 0
26407: PUSH
26408: EMPTY
26409: LIST
26410: LIST
26411: PUSH
26412: LD_INT 0
26414: PUSH
26415: LD_INT 1
26417: NEG
26418: PUSH
26419: EMPTY
26420: LIST
26421: LIST
26422: PUSH
26423: LD_INT 1
26425: PUSH
26426: LD_INT 0
26428: PUSH
26429: EMPTY
26430: LIST
26431: LIST
26432: PUSH
26433: LD_INT 1
26435: PUSH
26436: LD_INT 1
26438: PUSH
26439: EMPTY
26440: LIST
26441: LIST
26442: PUSH
26443: LD_INT 0
26445: PUSH
26446: LD_INT 1
26448: PUSH
26449: EMPTY
26450: LIST
26451: LIST
26452: PUSH
26453: LD_INT 1
26455: NEG
26456: PUSH
26457: LD_INT 0
26459: PUSH
26460: EMPTY
26461: LIST
26462: LIST
26463: PUSH
26464: LD_INT 1
26466: NEG
26467: PUSH
26468: LD_INT 1
26470: NEG
26471: PUSH
26472: EMPTY
26473: LIST
26474: LIST
26475: PUSH
26476: LD_INT 1
26478: NEG
26479: PUSH
26480: LD_INT 2
26482: NEG
26483: PUSH
26484: EMPTY
26485: LIST
26486: LIST
26487: PUSH
26488: LD_INT 2
26490: PUSH
26491: LD_INT 1
26493: PUSH
26494: EMPTY
26495: LIST
26496: LIST
26497: PUSH
26498: LD_INT 2
26500: PUSH
26501: LD_INT 2
26503: PUSH
26504: EMPTY
26505: LIST
26506: LIST
26507: PUSH
26508: LD_INT 1
26510: PUSH
26511: LD_INT 2
26513: PUSH
26514: EMPTY
26515: LIST
26516: LIST
26517: PUSH
26518: LD_INT 2
26520: NEG
26521: PUSH
26522: LD_INT 1
26524: NEG
26525: PUSH
26526: EMPTY
26527: LIST
26528: LIST
26529: PUSH
26530: LD_INT 2
26532: NEG
26533: PUSH
26534: LD_INT 2
26536: NEG
26537: PUSH
26538: EMPTY
26539: LIST
26540: LIST
26541: PUSH
26542: LD_INT 3
26544: PUSH
26545: LD_INT 2
26547: PUSH
26548: EMPTY
26549: LIST
26550: LIST
26551: PUSH
26552: LD_INT 3
26554: PUSH
26555: LD_INT 3
26557: PUSH
26558: EMPTY
26559: LIST
26560: LIST
26561: PUSH
26562: LD_INT 2
26564: PUSH
26565: LD_INT 3
26567: PUSH
26568: EMPTY
26569: LIST
26570: LIST
26571: PUSH
26572: EMPTY
26573: LIST
26574: LIST
26575: LIST
26576: LIST
26577: LIST
26578: LIST
26579: LIST
26580: LIST
26581: LIST
26582: LIST
26583: LIST
26584: LIST
26585: LIST
26586: LIST
26587: LIST
26588: LIST
26589: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26590: LD_ADDR_VAR 0 17
26594: PUSH
26595: LD_INT 0
26597: PUSH
26598: LD_INT 0
26600: PUSH
26601: EMPTY
26602: LIST
26603: LIST
26604: PUSH
26605: LD_INT 0
26607: PUSH
26608: LD_INT 1
26610: NEG
26611: PUSH
26612: EMPTY
26613: LIST
26614: LIST
26615: PUSH
26616: LD_INT 1
26618: PUSH
26619: LD_INT 0
26621: PUSH
26622: EMPTY
26623: LIST
26624: LIST
26625: PUSH
26626: LD_INT 1
26628: PUSH
26629: LD_INT 1
26631: PUSH
26632: EMPTY
26633: LIST
26634: LIST
26635: PUSH
26636: LD_INT 0
26638: PUSH
26639: LD_INT 1
26641: PUSH
26642: EMPTY
26643: LIST
26644: LIST
26645: PUSH
26646: LD_INT 1
26648: NEG
26649: PUSH
26650: LD_INT 0
26652: PUSH
26653: EMPTY
26654: LIST
26655: LIST
26656: PUSH
26657: LD_INT 1
26659: NEG
26660: PUSH
26661: LD_INT 1
26663: NEG
26664: PUSH
26665: EMPTY
26666: LIST
26667: LIST
26668: PUSH
26669: LD_INT 1
26671: NEG
26672: PUSH
26673: LD_INT 2
26675: NEG
26676: PUSH
26677: EMPTY
26678: LIST
26679: LIST
26680: PUSH
26681: LD_INT 0
26683: PUSH
26684: LD_INT 2
26686: NEG
26687: PUSH
26688: EMPTY
26689: LIST
26690: LIST
26691: PUSH
26692: LD_INT 1
26694: PUSH
26695: LD_INT 1
26697: NEG
26698: PUSH
26699: EMPTY
26700: LIST
26701: LIST
26702: PUSH
26703: LD_INT 2
26705: PUSH
26706: LD_INT 0
26708: PUSH
26709: EMPTY
26710: LIST
26711: LIST
26712: PUSH
26713: LD_INT 2
26715: PUSH
26716: LD_INT 1
26718: PUSH
26719: EMPTY
26720: LIST
26721: LIST
26722: PUSH
26723: LD_INT 2
26725: PUSH
26726: LD_INT 2
26728: PUSH
26729: EMPTY
26730: LIST
26731: LIST
26732: PUSH
26733: LD_INT 1
26735: PUSH
26736: LD_INT 2
26738: PUSH
26739: EMPTY
26740: LIST
26741: LIST
26742: PUSH
26743: LD_INT 0
26745: PUSH
26746: LD_INT 2
26748: PUSH
26749: EMPTY
26750: LIST
26751: LIST
26752: PUSH
26753: LD_INT 1
26755: NEG
26756: PUSH
26757: LD_INT 1
26759: PUSH
26760: EMPTY
26761: LIST
26762: LIST
26763: PUSH
26764: LD_INT 2
26766: NEG
26767: PUSH
26768: LD_INT 0
26770: PUSH
26771: EMPTY
26772: LIST
26773: LIST
26774: PUSH
26775: LD_INT 2
26777: NEG
26778: PUSH
26779: LD_INT 1
26781: NEG
26782: PUSH
26783: EMPTY
26784: LIST
26785: LIST
26786: PUSH
26787: LD_INT 2
26789: NEG
26790: PUSH
26791: LD_INT 2
26793: NEG
26794: PUSH
26795: EMPTY
26796: LIST
26797: LIST
26798: PUSH
26799: EMPTY
26800: LIST
26801: LIST
26802: LIST
26803: LIST
26804: LIST
26805: LIST
26806: LIST
26807: LIST
26808: LIST
26809: LIST
26810: LIST
26811: LIST
26812: LIST
26813: LIST
26814: LIST
26815: LIST
26816: LIST
26817: LIST
26818: LIST
26819: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26820: LD_ADDR_VAR 0 18
26824: PUSH
26825: LD_INT 0
26827: PUSH
26828: LD_INT 0
26830: PUSH
26831: EMPTY
26832: LIST
26833: LIST
26834: PUSH
26835: LD_INT 0
26837: PUSH
26838: LD_INT 1
26840: NEG
26841: PUSH
26842: EMPTY
26843: LIST
26844: LIST
26845: PUSH
26846: LD_INT 1
26848: PUSH
26849: LD_INT 0
26851: PUSH
26852: EMPTY
26853: LIST
26854: LIST
26855: PUSH
26856: LD_INT 1
26858: PUSH
26859: LD_INT 1
26861: PUSH
26862: EMPTY
26863: LIST
26864: LIST
26865: PUSH
26866: LD_INT 0
26868: PUSH
26869: LD_INT 1
26871: PUSH
26872: EMPTY
26873: LIST
26874: LIST
26875: PUSH
26876: LD_INT 1
26878: NEG
26879: PUSH
26880: LD_INT 0
26882: PUSH
26883: EMPTY
26884: LIST
26885: LIST
26886: PUSH
26887: LD_INT 1
26889: NEG
26890: PUSH
26891: LD_INT 1
26893: NEG
26894: PUSH
26895: EMPTY
26896: LIST
26897: LIST
26898: PUSH
26899: LD_INT 1
26901: NEG
26902: PUSH
26903: LD_INT 2
26905: NEG
26906: PUSH
26907: EMPTY
26908: LIST
26909: LIST
26910: PUSH
26911: LD_INT 0
26913: PUSH
26914: LD_INT 2
26916: NEG
26917: PUSH
26918: EMPTY
26919: LIST
26920: LIST
26921: PUSH
26922: LD_INT 1
26924: PUSH
26925: LD_INT 1
26927: NEG
26928: PUSH
26929: EMPTY
26930: LIST
26931: LIST
26932: PUSH
26933: LD_INT 2
26935: PUSH
26936: LD_INT 0
26938: PUSH
26939: EMPTY
26940: LIST
26941: LIST
26942: PUSH
26943: LD_INT 2
26945: PUSH
26946: LD_INT 1
26948: PUSH
26949: EMPTY
26950: LIST
26951: LIST
26952: PUSH
26953: LD_INT 2
26955: PUSH
26956: LD_INT 2
26958: PUSH
26959: EMPTY
26960: LIST
26961: LIST
26962: PUSH
26963: LD_INT 1
26965: PUSH
26966: LD_INT 2
26968: PUSH
26969: EMPTY
26970: LIST
26971: LIST
26972: PUSH
26973: LD_INT 0
26975: PUSH
26976: LD_INT 2
26978: PUSH
26979: EMPTY
26980: LIST
26981: LIST
26982: PUSH
26983: LD_INT 1
26985: NEG
26986: PUSH
26987: LD_INT 1
26989: PUSH
26990: EMPTY
26991: LIST
26992: LIST
26993: PUSH
26994: LD_INT 2
26996: NEG
26997: PUSH
26998: LD_INT 0
27000: PUSH
27001: EMPTY
27002: LIST
27003: LIST
27004: PUSH
27005: LD_INT 2
27007: NEG
27008: PUSH
27009: LD_INT 1
27011: NEG
27012: PUSH
27013: EMPTY
27014: LIST
27015: LIST
27016: PUSH
27017: LD_INT 2
27019: NEG
27020: PUSH
27021: LD_INT 2
27023: NEG
27024: PUSH
27025: EMPTY
27026: LIST
27027: LIST
27028: PUSH
27029: EMPTY
27030: LIST
27031: LIST
27032: LIST
27033: LIST
27034: LIST
27035: LIST
27036: LIST
27037: LIST
27038: LIST
27039: LIST
27040: LIST
27041: LIST
27042: LIST
27043: LIST
27044: LIST
27045: LIST
27046: LIST
27047: LIST
27048: LIST
27049: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27050: LD_ADDR_VAR 0 19
27054: PUSH
27055: LD_INT 0
27057: PUSH
27058: LD_INT 0
27060: PUSH
27061: EMPTY
27062: LIST
27063: LIST
27064: PUSH
27065: LD_INT 0
27067: PUSH
27068: LD_INT 1
27070: NEG
27071: PUSH
27072: EMPTY
27073: LIST
27074: LIST
27075: PUSH
27076: LD_INT 1
27078: PUSH
27079: LD_INT 0
27081: PUSH
27082: EMPTY
27083: LIST
27084: LIST
27085: PUSH
27086: LD_INT 1
27088: PUSH
27089: LD_INT 1
27091: PUSH
27092: EMPTY
27093: LIST
27094: LIST
27095: PUSH
27096: LD_INT 0
27098: PUSH
27099: LD_INT 1
27101: PUSH
27102: EMPTY
27103: LIST
27104: LIST
27105: PUSH
27106: LD_INT 1
27108: NEG
27109: PUSH
27110: LD_INT 0
27112: PUSH
27113: EMPTY
27114: LIST
27115: LIST
27116: PUSH
27117: LD_INT 1
27119: NEG
27120: PUSH
27121: LD_INT 1
27123: NEG
27124: PUSH
27125: EMPTY
27126: LIST
27127: LIST
27128: PUSH
27129: LD_INT 1
27131: NEG
27132: PUSH
27133: LD_INT 2
27135: NEG
27136: PUSH
27137: EMPTY
27138: LIST
27139: LIST
27140: PUSH
27141: LD_INT 0
27143: PUSH
27144: LD_INT 2
27146: NEG
27147: PUSH
27148: EMPTY
27149: LIST
27150: LIST
27151: PUSH
27152: LD_INT 1
27154: PUSH
27155: LD_INT 1
27157: NEG
27158: PUSH
27159: EMPTY
27160: LIST
27161: LIST
27162: PUSH
27163: LD_INT 2
27165: PUSH
27166: LD_INT 0
27168: PUSH
27169: EMPTY
27170: LIST
27171: LIST
27172: PUSH
27173: LD_INT 2
27175: PUSH
27176: LD_INT 1
27178: PUSH
27179: EMPTY
27180: LIST
27181: LIST
27182: PUSH
27183: LD_INT 2
27185: PUSH
27186: LD_INT 2
27188: PUSH
27189: EMPTY
27190: LIST
27191: LIST
27192: PUSH
27193: LD_INT 1
27195: PUSH
27196: LD_INT 2
27198: PUSH
27199: EMPTY
27200: LIST
27201: LIST
27202: PUSH
27203: LD_INT 0
27205: PUSH
27206: LD_INT 2
27208: PUSH
27209: EMPTY
27210: LIST
27211: LIST
27212: PUSH
27213: LD_INT 1
27215: NEG
27216: PUSH
27217: LD_INT 1
27219: PUSH
27220: EMPTY
27221: LIST
27222: LIST
27223: PUSH
27224: LD_INT 2
27226: NEG
27227: PUSH
27228: LD_INT 0
27230: PUSH
27231: EMPTY
27232: LIST
27233: LIST
27234: PUSH
27235: LD_INT 2
27237: NEG
27238: PUSH
27239: LD_INT 1
27241: NEG
27242: PUSH
27243: EMPTY
27244: LIST
27245: LIST
27246: PUSH
27247: LD_INT 2
27249: NEG
27250: PUSH
27251: LD_INT 2
27253: NEG
27254: PUSH
27255: EMPTY
27256: LIST
27257: LIST
27258: PUSH
27259: EMPTY
27260: LIST
27261: LIST
27262: LIST
27263: LIST
27264: LIST
27265: LIST
27266: LIST
27267: LIST
27268: LIST
27269: LIST
27270: LIST
27271: LIST
27272: LIST
27273: LIST
27274: LIST
27275: LIST
27276: LIST
27277: LIST
27278: LIST
27279: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27280: LD_ADDR_VAR 0 20
27284: PUSH
27285: LD_INT 0
27287: PUSH
27288: LD_INT 0
27290: PUSH
27291: EMPTY
27292: LIST
27293: LIST
27294: PUSH
27295: LD_INT 0
27297: PUSH
27298: LD_INT 1
27300: NEG
27301: PUSH
27302: EMPTY
27303: LIST
27304: LIST
27305: PUSH
27306: LD_INT 1
27308: PUSH
27309: LD_INT 0
27311: PUSH
27312: EMPTY
27313: LIST
27314: LIST
27315: PUSH
27316: LD_INT 1
27318: PUSH
27319: LD_INT 1
27321: PUSH
27322: EMPTY
27323: LIST
27324: LIST
27325: PUSH
27326: LD_INT 0
27328: PUSH
27329: LD_INT 1
27331: PUSH
27332: EMPTY
27333: LIST
27334: LIST
27335: PUSH
27336: LD_INT 1
27338: NEG
27339: PUSH
27340: LD_INT 0
27342: PUSH
27343: EMPTY
27344: LIST
27345: LIST
27346: PUSH
27347: LD_INT 1
27349: NEG
27350: PUSH
27351: LD_INT 1
27353: NEG
27354: PUSH
27355: EMPTY
27356: LIST
27357: LIST
27358: PUSH
27359: LD_INT 1
27361: NEG
27362: PUSH
27363: LD_INT 2
27365: NEG
27366: PUSH
27367: EMPTY
27368: LIST
27369: LIST
27370: PUSH
27371: LD_INT 0
27373: PUSH
27374: LD_INT 2
27376: NEG
27377: PUSH
27378: EMPTY
27379: LIST
27380: LIST
27381: PUSH
27382: LD_INT 1
27384: PUSH
27385: LD_INT 1
27387: NEG
27388: PUSH
27389: EMPTY
27390: LIST
27391: LIST
27392: PUSH
27393: LD_INT 2
27395: PUSH
27396: LD_INT 0
27398: PUSH
27399: EMPTY
27400: LIST
27401: LIST
27402: PUSH
27403: LD_INT 2
27405: PUSH
27406: LD_INT 1
27408: PUSH
27409: EMPTY
27410: LIST
27411: LIST
27412: PUSH
27413: LD_INT 2
27415: PUSH
27416: LD_INT 2
27418: PUSH
27419: EMPTY
27420: LIST
27421: LIST
27422: PUSH
27423: LD_INT 1
27425: PUSH
27426: LD_INT 2
27428: PUSH
27429: EMPTY
27430: LIST
27431: LIST
27432: PUSH
27433: LD_INT 0
27435: PUSH
27436: LD_INT 2
27438: PUSH
27439: EMPTY
27440: LIST
27441: LIST
27442: PUSH
27443: LD_INT 1
27445: NEG
27446: PUSH
27447: LD_INT 1
27449: PUSH
27450: EMPTY
27451: LIST
27452: LIST
27453: PUSH
27454: LD_INT 2
27456: NEG
27457: PUSH
27458: LD_INT 0
27460: PUSH
27461: EMPTY
27462: LIST
27463: LIST
27464: PUSH
27465: LD_INT 2
27467: NEG
27468: PUSH
27469: LD_INT 1
27471: NEG
27472: PUSH
27473: EMPTY
27474: LIST
27475: LIST
27476: PUSH
27477: LD_INT 2
27479: NEG
27480: PUSH
27481: LD_INT 2
27483: NEG
27484: PUSH
27485: EMPTY
27486: LIST
27487: LIST
27488: PUSH
27489: EMPTY
27490: LIST
27491: LIST
27492: LIST
27493: LIST
27494: LIST
27495: LIST
27496: LIST
27497: LIST
27498: LIST
27499: LIST
27500: LIST
27501: LIST
27502: LIST
27503: LIST
27504: LIST
27505: LIST
27506: LIST
27507: LIST
27508: LIST
27509: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27510: LD_ADDR_VAR 0 21
27514: PUSH
27515: LD_INT 0
27517: PUSH
27518: LD_INT 0
27520: PUSH
27521: EMPTY
27522: LIST
27523: LIST
27524: PUSH
27525: LD_INT 0
27527: PUSH
27528: LD_INT 1
27530: NEG
27531: PUSH
27532: EMPTY
27533: LIST
27534: LIST
27535: PUSH
27536: LD_INT 1
27538: PUSH
27539: LD_INT 0
27541: PUSH
27542: EMPTY
27543: LIST
27544: LIST
27545: PUSH
27546: LD_INT 1
27548: PUSH
27549: LD_INT 1
27551: PUSH
27552: EMPTY
27553: LIST
27554: LIST
27555: PUSH
27556: LD_INT 0
27558: PUSH
27559: LD_INT 1
27561: PUSH
27562: EMPTY
27563: LIST
27564: LIST
27565: PUSH
27566: LD_INT 1
27568: NEG
27569: PUSH
27570: LD_INT 0
27572: PUSH
27573: EMPTY
27574: LIST
27575: LIST
27576: PUSH
27577: LD_INT 1
27579: NEG
27580: PUSH
27581: LD_INT 1
27583: NEG
27584: PUSH
27585: EMPTY
27586: LIST
27587: LIST
27588: PUSH
27589: LD_INT 1
27591: NEG
27592: PUSH
27593: LD_INT 2
27595: NEG
27596: PUSH
27597: EMPTY
27598: LIST
27599: LIST
27600: PUSH
27601: LD_INT 0
27603: PUSH
27604: LD_INT 2
27606: NEG
27607: PUSH
27608: EMPTY
27609: LIST
27610: LIST
27611: PUSH
27612: LD_INT 1
27614: PUSH
27615: LD_INT 1
27617: NEG
27618: PUSH
27619: EMPTY
27620: LIST
27621: LIST
27622: PUSH
27623: LD_INT 2
27625: PUSH
27626: LD_INT 0
27628: PUSH
27629: EMPTY
27630: LIST
27631: LIST
27632: PUSH
27633: LD_INT 2
27635: PUSH
27636: LD_INT 1
27638: PUSH
27639: EMPTY
27640: LIST
27641: LIST
27642: PUSH
27643: LD_INT 2
27645: PUSH
27646: LD_INT 2
27648: PUSH
27649: EMPTY
27650: LIST
27651: LIST
27652: PUSH
27653: LD_INT 1
27655: PUSH
27656: LD_INT 2
27658: PUSH
27659: EMPTY
27660: LIST
27661: LIST
27662: PUSH
27663: LD_INT 0
27665: PUSH
27666: LD_INT 2
27668: PUSH
27669: EMPTY
27670: LIST
27671: LIST
27672: PUSH
27673: LD_INT 1
27675: NEG
27676: PUSH
27677: LD_INT 1
27679: PUSH
27680: EMPTY
27681: LIST
27682: LIST
27683: PUSH
27684: LD_INT 2
27686: NEG
27687: PUSH
27688: LD_INT 0
27690: PUSH
27691: EMPTY
27692: LIST
27693: LIST
27694: PUSH
27695: LD_INT 2
27697: NEG
27698: PUSH
27699: LD_INT 1
27701: NEG
27702: PUSH
27703: EMPTY
27704: LIST
27705: LIST
27706: PUSH
27707: LD_INT 2
27709: NEG
27710: PUSH
27711: LD_INT 2
27713: NEG
27714: PUSH
27715: EMPTY
27716: LIST
27717: LIST
27718: PUSH
27719: EMPTY
27720: LIST
27721: LIST
27722: LIST
27723: LIST
27724: LIST
27725: LIST
27726: LIST
27727: LIST
27728: LIST
27729: LIST
27730: LIST
27731: LIST
27732: LIST
27733: LIST
27734: LIST
27735: LIST
27736: LIST
27737: LIST
27738: LIST
27739: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27740: LD_ADDR_VAR 0 22
27744: PUSH
27745: LD_INT 0
27747: PUSH
27748: LD_INT 0
27750: PUSH
27751: EMPTY
27752: LIST
27753: LIST
27754: PUSH
27755: LD_INT 0
27757: PUSH
27758: LD_INT 1
27760: NEG
27761: PUSH
27762: EMPTY
27763: LIST
27764: LIST
27765: PUSH
27766: LD_INT 1
27768: PUSH
27769: LD_INT 0
27771: PUSH
27772: EMPTY
27773: LIST
27774: LIST
27775: PUSH
27776: LD_INT 1
27778: PUSH
27779: LD_INT 1
27781: PUSH
27782: EMPTY
27783: LIST
27784: LIST
27785: PUSH
27786: LD_INT 0
27788: PUSH
27789: LD_INT 1
27791: PUSH
27792: EMPTY
27793: LIST
27794: LIST
27795: PUSH
27796: LD_INT 1
27798: NEG
27799: PUSH
27800: LD_INT 0
27802: PUSH
27803: EMPTY
27804: LIST
27805: LIST
27806: PUSH
27807: LD_INT 1
27809: NEG
27810: PUSH
27811: LD_INT 1
27813: NEG
27814: PUSH
27815: EMPTY
27816: LIST
27817: LIST
27818: PUSH
27819: LD_INT 1
27821: NEG
27822: PUSH
27823: LD_INT 2
27825: NEG
27826: PUSH
27827: EMPTY
27828: LIST
27829: LIST
27830: PUSH
27831: LD_INT 0
27833: PUSH
27834: LD_INT 2
27836: NEG
27837: PUSH
27838: EMPTY
27839: LIST
27840: LIST
27841: PUSH
27842: LD_INT 1
27844: PUSH
27845: LD_INT 1
27847: NEG
27848: PUSH
27849: EMPTY
27850: LIST
27851: LIST
27852: PUSH
27853: LD_INT 2
27855: PUSH
27856: LD_INT 0
27858: PUSH
27859: EMPTY
27860: LIST
27861: LIST
27862: PUSH
27863: LD_INT 2
27865: PUSH
27866: LD_INT 1
27868: PUSH
27869: EMPTY
27870: LIST
27871: LIST
27872: PUSH
27873: LD_INT 2
27875: PUSH
27876: LD_INT 2
27878: PUSH
27879: EMPTY
27880: LIST
27881: LIST
27882: PUSH
27883: LD_INT 1
27885: PUSH
27886: LD_INT 2
27888: PUSH
27889: EMPTY
27890: LIST
27891: LIST
27892: PUSH
27893: LD_INT 0
27895: PUSH
27896: LD_INT 2
27898: PUSH
27899: EMPTY
27900: LIST
27901: LIST
27902: PUSH
27903: LD_INT 1
27905: NEG
27906: PUSH
27907: LD_INT 1
27909: PUSH
27910: EMPTY
27911: LIST
27912: LIST
27913: PUSH
27914: LD_INT 2
27916: NEG
27917: PUSH
27918: LD_INT 0
27920: PUSH
27921: EMPTY
27922: LIST
27923: LIST
27924: PUSH
27925: LD_INT 2
27927: NEG
27928: PUSH
27929: LD_INT 1
27931: NEG
27932: PUSH
27933: EMPTY
27934: LIST
27935: LIST
27936: PUSH
27937: LD_INT 2
27939: NEG
27940: PUSH
27941: LD_INT 2
27943: NEG
27944: PUSH
27945: EMPTY
27946: LIST
27947: LIST
27948: PUSH
27949: EMPTY
27950: LIST
27951: LIST
27952: LIST
27953: LIST
27954: LIST
27955: LIST
27956: LIST
27957: LIST
27958: LIST
27959: LIST
27960: LIST
27961: LIST
27962: LIST
27963: LIST
27964: LIST
27965: LIST
27966: LIST
27967: LIST
27968: LIST
27969: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
27970: LD_ADDR_VAR 0 23
27974: PUSH
27975: LD_INT 0
27977: PUSH
27978: LD_INT 0
27980: PUSH
27981: EMPTY
27982: LIST
27983: LIST
27984: PUSH
27985: LD_INT 0
27987: PUSH
27988: LD_INT 1
27990: NEG
27991: PUSH
27992: EMPTY
27993: LIST
27994: LIST
27995: PUSH
27996: LD_INT 1
27998: PUSH
27999: LD_INT 0
28001: PUSH
28002: EMPTY
28003: LIST
28004: LIST
28005: PUSH
28006: LD_INT 1
28008: PUSH
28009: LD_INT 1
28011: PUSH
28012: EMPTY
28013: LIST
28014: LIST
28015: PUSH
28016: LD_INT 0
28018: PUSH
28019: LD_INT 1
28021: PUSH
28022: EMPTY
28023: LIST
28024: LIST
28025: PUSH
28026: LD_INT 1
28028: NEG
28029: PUSH
28030: LD_INT 0
28032: PUSH
28033: EMPTY
28034: LIST
28035: LIST
28036: PUSH
28037: LD_INT 1
28039: NEG
28040: PUSH
28041: LD_INT 1
28043: NEG
28044: PUSH
28045: EMPTY
28046: LIST
28047: LIST
28048: PUSH
28049: LD_INT 1
28051: NEG
28052: PUSH
28053: LD_INT 2
28055: NEG
28056: PUSH
28057: EMPTY
28058: LIST
28059: LIST
28060: PUSH
28061: LD_INT 0
28063: PUSH
28064: LD_INT 2
28066: NEG
28067: PUSH
28068: EMPTY
28069: LIST
28070: LIST
28071: PUSH
28072: LD_INT 1
28074: PUSH
28075: LD_INT 1
28077: NEG
28078: PUSH
28079: EMPTY
28080: LIST
28081: LIST
28082: PUSH
28083: LD_INT 2
28085: PUSH
28086: LD_INT 0
28088: PUSH
28089: EMPTY
28090: LIST
28091: LIST
28092: PUSH
28093: LD_INT 2
28095: PUSH
28096: LD_INT 1
28098: PUSH
28099: EMPTY
28100: LIST
28101: LIST
28102: PUSH
28103: LD_INT 2
28105: PUSH
28106: LD_INT 2
28108: PUSH
28109: EMPTY
28110: LIST
28111: LIST
28112: PUSH
28113: LD_INT 1
28115: PUSH
28116: LD_INT 2
28118: PUSH
28119: EMPTY
28120: LIST
28121: LIST
28122: PUSH
28123: LD_INT 0
28125: PUSH
28126: LD_INT 2
28128: PUSH
28129: EMPTY
28130: LIST
28131: LIST
28132: PUSH
28133: LD_INT 1
28135: NEG
28136: PUSH
28137: LD_INT 1
28139: PUSH
28140: EMPTY
28141: LIST
28142: LIST
28143: PUSH
28144: LD_INT 2
28146: NEG
28147: PUSH
28148: LD_INT 0
28150: PUSH
28151: EMPTY
28152: LIST
28153: LIST
28154: PUSH
28155: LD_INT 2
28157: NEG
28158: PUSH
28159: LD_INT 1
28161: NEG
28162: PUSH
28163: EMPTY
28164: LIST
28165: LIST
28166: PUSH
28167: LD_INT 2
28169: NEG
28170: PUSH
28171: LD_INT 2
28173: NEG
28174: PUSH
28175: EMPTY
28176: LIST
28177: LIST
28178: PUSH
28179: LD_INT 2
28181: NEG
28182: PUSH
28183: LD_INT 3
28185: NEG
28186: PUSH
28187: EMPTY
28188: LIST
28189: LIST
28190: PUSH
28191: LD_INT 1
28193: NEG
28194: PUSH
28195: LD_INT 3
28197: NEG
28198: PUSH
28199: EMPTY
28200: LIST
28201: LIST
28202: PUSH
28203: LD_INT 1
28205: PUSH
28206: LD_INT 2
28208: NEG
28209: PUSH
28210: EMPTY
28211: LIST
28212: LIST
28213: PUSH
28214: LD_INT 2
28216: PUSH
28217: LD_INT 1
28219: NEG
28220: PUSH
28221: EMPTY
28222: LIST
28223: LIST
28224: PUSH
28225: EMPTY
28226: LIST
28227: LIST
28228: LIST
28229: LIST
28230: LIST
28231: LIST
28232: LIST
28233: LIST
28234: LIST
28235: LIST
28236: LIST
28237: LIST
28238: LIST
28239: LIST
28240: LIST
28241: LIST
28242: LIST
28243: LIST
28244: LIST
28245: LIST
28246: LIST
28247: LIST
28248: LIST
28249: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
28250: LD_ADDR_VAR 0 24
28254: PUSH
28255: LD_INT 0
28257: PUSH
28258: LD_INT 0
28260: PUSH
28261: EMPTY
28262: LIST
28263: LIST
28264: PUSH
28265: LD_INT 0
28267: PUSH
28268: LD_INT 1
28270: NEG
28271: PUSH
28272: EMPTY
28273: LIST
28274: LIST
28275: PUSH
28276: LD_INT 1
28278: PUSH
28279: LD_INT 0
28281: PUSH
28282: EMPTY
28283: LIST
28284: LIST
28285: PUSH
28286: LD_INT 1
28288: PUSH
28289: LD_INT 1
28291: PUSH
28292: EMPTY
28293: LIST
28294: LIST
28295: PUSH
28296: LD_INT 0
28298: PUSH
28299: LD_INT 1
28301: PUSH
28302: EMPTY
28303: LIST
28304: LIST
28305: PUSH
28306: LD_INT 1
28308: NEG
28309: PUSH
28310: LD_INT 0
28312: PUSH
28313: EMPTY
28314: LIST
28315: LIST
28316: PUSH
28317: LD_INT 1
28319: NEG
28320: PUSH
28321: LD_INT 1
28323: NEG
28324: PUSH
28325: EMPTY
28326: LIST
28327: LIST
28328: PUSH
28329: LD_INT 1
28331: NEG
28332: PUSH
28333: LD_INT 2
28335: NEG
28336: PUSH
28337: EMPTY
28338: LIST
28339: LIST
28340: PUSH
28341: LD_INT 0
28343: PUSH
28344: LD_INT 2
28346: NEG
28347: PUSH
28348: EMPTY
28349: LIST
28350: LIST
28351: PUSH
28352: LD_INT 1
28354: PUSH
28355: LD_INT 1
28357: NEG
28358: PUSH
28359: EMPTY
28360: LIST
28361: LIST
28362: PUSH
28363: LD_INT 2
28365: PUSH
28366: LD_INT 0
28368: PUSH
28369: EMPTY
28370: LIST
28371: LIST
28372: PUSH
28373: LD_INT 2
28375: PUSH
28376: LD_INT 1
28378: PUSH
28379: EMPTY
28380: LIST
28381: LIST
28382: PUSH
28383: LD_INT 2
28385: PUSH
28386: LD_INT 2
28388: PUSH
28389: EMPTY
28390: LIST
28391: LIST
28392: PUSH
28393: LD_INT 1
28395: PUSH
28396: LD_INT 2
28398: PUSH
28399: EMPTY
28400: LIST
28401: LIST
28402: PUSH
28403: LD_INT 0
28405: PUSH
28406: LD_INT 2
28408: PUSH
28409: EMPTY
28410: LIST
28411: LIST
28412: PUSH
28413: LD_INT 1
28415: NEG
28416: PUSH
28417: LD_INT 1
28419: PUSH
28420: EMPTY
28421: LIST
28422: LIST
28423: PUSH
28424: LD_INT 2
28426: NEG
28427: PUSH
28428: LD_INT 0
28430: PUSH
28431: EMPTY
28432: LIST
28433: LIST
28434: PUSH
28435: LD_INT 2
28437: NEG
28438: PUSH
28439: LD_INT 1
28441: NEG
28442: PUSH
28443: EMPTY
28444: LIST
28445: LIST
28446: PUSH
28447: LD_INT 2
28449: NEG
28450: PUSH
28451: LD_INT 2
28453: NEG
28454: PUSH
28455: EMPTY
28456: LIST
28457: LIST
28458: PUSH
28459: LD_INT 1
28461: PUSH
28462: LD_INT 2
28464: NEG
28465: PUSH
28466: EMPTY
28467: LIST
28468: LIST
28469: PUSH
28470: LD_INT 2
28472: PUSH
28473: LD_INT 1
28475: NEG
28476: PUSH
28477: EMPTY
28478: LIST
28479: LIST
28480: PUSH
28481: LD_INT 3
28483: PUSH
28484: LD_INT 1
28486: PUSH
28487: EMPTY
28488: LIST
28489: LIST
28490: PUSH
28491: LD_INT 3
28493: PUSH
28494: LD_INT 2
28496: PUSH
28497: EMPTY
28498: LIST
28499: LIST
28500: PUSH
28501: EMPTY
28502: LIST
28503: LIST
28504: LIST
28505: LIST
28506: LIST
28507: LIST
28508: LIST
28509: LIST
28510: LIST
28511: LIST
28512: LIST
28513: LIST
28514: LIST
28515: LIST
28516: LIST
28517: LIST
28518: LIST
28519: LIST
28520: LIST
28521: LIST
28522: LIST
28523: LIST
28524: LIST
28525: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
28526: LD_ADDR_VAR 0 25
28530: PUSH
28531: LD_INT 0
28533: PUSH
28534: LD_INT 0
28536: PUSH
28537: EMPTY
28538: LIST
28539: LIST
28540: PUSH
28541: LD_INT 0
28543: PUSH
28544: LD_INT 1
28546: NEG
28547: PUSH
28548: EMPTY
28549: LIST
28550: LIST
28551: PUSH
28552: LD_INT 1
28554: PUSH
28555: LD_INT 0
28557: PUSH
28558: EMPTY
28559: LIST
28560: LIST
28561: PUSH
28562: LD_INT 1
28564: PUSH
28565: LD_INT 1
28567: PUSH
28568: EMPTY
28569: LIST
28570: LIST
28571: PUSH
28572: LD_INT 0
28574: PUSH
28575: LD_INT 1
28577: PUSH
28578: EMPTY
28579: LIST
28580: LIST
28581: PUSH
28582: LD_INT 1
28584: NEG
28585: PUSH
28586: LD_INT 0
28588: PUSH
28589: EMPTY
28590: LIST
28591: LIST
28592: PUSH
28593: LD_INT 1
28595: NEG
28596: PUSH
28597: LD_INT 1
28599: NEG
28600: PUSH
28601: EMPTY
28602: LIST
28603: LIST
28604: PUSH
28605: LD_INT 1
28607: NEG
28608: PUSH
28609: LD_INT 2
28611: NEG
28612: PUSH
28613: EMPTY
28614: LIST
28615: LIST
28616: PUSH
28617: LD_INT 0
28619: PUSH
28620: LD_INT 2
28622: NEG
28623: PUSH
28624: EMPTY
28625: LIST
28626: LIST
28627: PUSH
28628: LD_INT 1
28630: PUSH
28631: LD_INT 1
28633: NEG
28634: PUSH
28635: EMPTY
28636: LIST
28637: LIST
28638: PUSH
28639: LD_INT 2
28641: PUSH
28642: LD_INT 0
28644: PUSH
28645: EMPTY
28646: LIST
28647: LIST
28648: PUSH
28649: LD_INT 2
28651: PUSH
28652: LD_INT 1
28654: PUSH
28655: EMPTY
28656: LIST
28657: LIST
28658: PUSH
28659: LD_INT 2
28661: PUSH
28662: LD_INT 2
28664: PUSH
28665: EMPTY
28666: LIST
28667: LIST
28668: PUSH
28669: LD_INT 1
28671: PUSH
28672: LD_INT 2
28674: PUSH
28675: EMPTY
28676: LIST
28677: LIST
28678: PUSH
28679: LD_INT 0
28681: PUSH
28682: LD_INT 2
28684: PUSH
28685: EMPTY
28686: LIST
28687: LIST
28688: PUSH
28689: LD_INT 1
28691: NEG
28692: PUSH
28693: LD_INT 1
28695: PUSH
28696: EMPTY
28697: LIST
28698: LIST
28699: PUSH
28700: LD_INT 2
28702: NEG
28703: PUSH
28704: LD_INT 0
28706: PUSH
28707: EMPTY
28708: LIST
28709: LIST
28710: PUSH
28711: LD_INT 2
28713: NEG
28714: PUSH
28715: LD_INT 1
28717: NEG
28718: PUSH
28719: EMPTY
28720: LIST
28721: LIST
28722: PUSH
28723: LD_INT 2
28725: NEG
28726: PUSH
28727: LD_INT 2
28729: NEG
28730: PUSH
28731: EMPTY
28732: LIST
28733: LIST
28734: PUSH
28735: LD_INT 3
28737: PUSH
28738: LD_INT 1
28740: PUSH
28741: EMPTY
28742: LIST
28743: LIST
28744: PUSH
28745: LD_INT 3
28747: PUSH
28748: LD_INT 2
28750: PUSH
28751: EMPTY
28752: LIST
28753: LIST
28754: PUSH
28755: LD_INT 2
28757: PUSH
28758: LD_INT 3
28760: PUSH
28761: EMPTY
28762: LIST
28763: LIST
28764: PUSH
28765: LD_INT 1
28767: PUSH
28768: LD_INT 3
28770: PUSH
28771: EMPTY
28772: LIST
28773: LIST
28774: PUSH
28775: EMPTY
28776: LIST
28777: LIST
28778: LIST
28779: LIST
28780: LIST
28781: LIST
28782: LIST
28783: LIST
28784: LIST
28785: LIST
28786: LIST
28787: LIST
28788: LIST
28789: LIST
28790: LIST
28791: LIST
28792: LIST
28793: LIST
28794: LIST
28795: LIST
28796: LIST
28797: LIST
28798: LIST
28799: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
28800: LD_ADDR_VAR 0 26
28804: PUSH
28805: LD_INT 0
28807: PUSH
28808: LD_INT 0
28810: PUSH
28811: EMPTY
28812: LIST
28813: LIST
28814: PUSH
28815: LD_INT 0
28817: PUSH
28818: LD_INT 1
28820: NEG
28821: PUSH
28822: EMPTY
28823: LIST
28824: LIST
28825: PUSH
28826: LD_INT 1
28828: PUSH
28829: LD_INT 0
28831: PUSH
28832: EMPTY
28833: LIST
28834: LIST
28835: PUSH
28836: LD_INT 1
28838: PUSH
28839: LD_INT 1
28841: PUSH
28842: EMPTY
28843: LIST
28844: LIST
28845: PUSH
28846: LD_INT 0
28848: PUSH
28849: LD_INT 1
28851: PUSH
28852: EMPTY
28853: LIST
28854: LIST
28855: PUSH
28856: LD_INT 1
28858: NEG
28859: PUSH
28860: LD_INT 0
28862: PUSH
28863: EMPTY
28864: LIST
28865: LIST
28866: PUSH
28867: LD_INT 1
28869: NEG
28870: PUSH
28871: LD_INT 1
28873: NEG
28874: PUSH
28875: EMPTY
28876: LIST
28877: LIST
28878: PUSH
28879: LD_INT 1
28881: NEG
28882: PUSH
28883: LD_INT 2
28885: NEG
28886: PUSH
28887: EMPTY
28888: LIST
28889: LIST
28890: PUSH
28891: LD_INT 0
28893: PUSH
28894: LD_INT 2
28896: NEG
28897: PUSH
28898: EMPTY
28899: LIST
28900: LIST
28901: PUSH
28902: LD_INT 1
28904: PUSH
28905: LD_INT 1
28907: NEG
28908: PUSH
28909: EMPTY
28910: LIST
28911: LIST
28912: PUSH
28913: LD_INT 2
28915: PUSH
28916: LD_INT 0
28918: PUSH
28919: EMPTY
28920: LIST
28921: LIST
28922: PUSH
28923: LD_INT 2
28925: PUSH
28926: LD_INT 1
28928: PUSH
28929: EMPTY
28930: LIST
28931: LIST
28932: PUSH
28933: LD_INT 2
28935: PUSH
28936: LD_INT 2
28938: PUSH
28939: EMPTY
28940: LIST
28941: LIST
28942: PUSH
28943: LD_INT 1
28945: PUSH
28946: LD_INT 2
28948: PUSH
28949: EMPTY
28950: LIST
28951: LIST
28952: PUSH
28953: LD_INT 0
28955: PUSH
28956: LD_INT 2
28958: PUSH
28959: EMPTY
28960: LIST
28961: LIST
28962: PUSH
28963: LD_INT 1
28965: NEG
28966: PUSH
28967: LD_INT 1
28969: PUSH
28970: EMPTY
28971: LIST
28972: LIST
28973: PUSH
28974: LD_INT 2
28976: NEG
28977: PUSH
28978: LD_INT 0
28980: PUSH
28981: EMPTY
28982: LIST
28983: LIST
28984: PUSH
28985: LD_INT 2
28987: NEG
28988: PUSH
28989: LD_INT 1
28991: NEG
28992: PUSH
28993: EMPTY
28994: LIST
28995: LIST
28996: PUSH
28997: LD_INT 2
28999: NEG
29000: PUSH
29001: LD_INT 2
29003: NEG
29004: PUSH
29005: EMPTY
29006: LIST
29007: LIST
29008: PUSH
29009: LD_INT 2
29011: PUSH
29012: LD_INT 3
29014: PUSH
29015: EMPTY
29016: LIST
29017: LIST
29018: PUSH
29019: LD_INT 1
29021: PUSH
29022: LD_INT 3
29024: PUSH
29025: EMPTY
29026: LIST
29027: LIST
29028: PUSH
29029: LD_INT 1
29031: NEG
29032: PUSH
29033: LD_INT 2
29035: PUSH
29036: EMPTY
29037: LIST
29038: LIST
29039: PUSH
29040: LD_INT 2
29042: NEG
29043: PUSH
29044: LD_INT 1
29046: PUSH
29047: EMPTY
29048: LIST
29049: LIST
29050: PUSH
29051: EMPTY
29052: LIST
29053: LIST
29054: LIST
29055: LIST
29056: LIST
29057: LIST
29058: LIST
29059: LIST
29060: LIST
29061: LIST
29062: LIST
29063: LIST
29064: LIST
29065: LIST
29066: LIST
29067: LIST
29068: LIST
29069: LIST
29070: LIST
29071: LIST
29072: LIST
29073: LIST
29074: LIST
29075: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
29076: LD_ADDR_VAR 0 27
29080: PUSH
29081: LD_INT 0
29083: PUSH
29084: LD_INT 0
29086: PUSH
29087: EMPTY
29088: LIST
29089: LIST
29090: PUSH
29091: LD_INT 0
29093: PUSH
29094: LD_INT 1
29096: NEG
29097: PUSH
29098: EMPTY
29099: LIST
29100: LIST
29101: PUSH
29102: LD_INT 1
29104: PUSH
29105: LD_INT 0
29107: PUSH
29108: EMPTY
29109: LIST
29110: LIST
29111: PUSH
29112: LD_INT 1
29114: PUSH
29115: LD_INT 1
29117: PUSH
29118: EMPTY
29119: LIST
29120: LIST
29121: PUSH
29122: LD_INT 0
29124: PUSH
29125: LD_INT 1
29127: PUSH
29128: EMPTY
29129: LIST
29130: LIST
29131: PUSH
29132: LD_INT 1
29134: NEG
29135: PUSH
29136: LD_INT 0
29138: PUSH
29139: EMPTY
29140: LIST
29141: LIST
29142: PUSH
29143: LD_INT 1
29145: NEG
29146: PUSH
29147: LD_INT 1
29149: NEG
29150: PUSH
29151: EMPTY
29152: LIST
29153: LIST
29154: PUSH
29155: LD_INT 1
29157: NEG
29158: PUSH
29159: LD_INT 2
29161: NEG
29162: PUSH
29163: EMPTY
29164: LIST
29165: LIST
29166: PUSH
29167: LD_INT 0
29169: PUSH
29170: LD_INT 2
29172: NEG
29173: PUSH
29174: EMPTY
29175: LIST
29176: LIST
29177: PUSH
29178: LD_INT 1
29180: PUSH
29181: LD_INT 1
29183: NEG
29184: PUSH
29185: EMPTY
29186: LIST
29187: LIST
29188: PUSH
29189: LD_INT 2
29191: PUSH
29192: LD_INT 0
29194: PUSH
29195: EMPTY
29196: LIST
29197: LIST
29198: PUSH
29199: LD_INT 2
29201: PUSH
29202: LD_INT 1
29204: PUSH
29205: EMPTY
29206: LIST
29207: LIST
29208: PUSH
29209: LD_INT 2
29211: PUSH
29212: LD_INT 2
29214: PUSH
29215: EMPTY
29216: LIST
29217: LIST
29218: PUSH
29219: LD_INT 1
29221: PUSH
29222: LD_INT 2
29224: PUSH
29225: EMPTY
29226: LIST
29227: LIST
29228: PUSH
29229: LD_INT 0
29231: PUSH
29232: LD_INT 2
29234: PUSH
29235: EMPTY
29236: LIST
29237: LIST
29238: PUSH
29239: LD_INT 1
29241: NEG
29242: PUSH
29243: LD_INT 1
29245: PUSH
29246: EMPTY
29247: LIST
29248: LIST
29249: PUSH
29250: LD_INT 2
29252: NEG
29253: PUSH
29254: LD_INT 0
29256: PUSH
29257: EMPTY
29258: LIST
29259: LIST
29260: PUSH
29261: LD_INT 2
29263: NEG
29264: PUSH
29265: LD_INT 1
29267: NEG
29268: PUSH
29269: EMPTY
29270: LIST
29271: LIST
29272: PUSH
29273: LD_INT 2
29275: NEG
29276: PUSH
29277: LD_INT 2
29279: NEG
29280: PUSH
29281: EMPTY
29282: LIST
29283: LIST
29284: PUSH
29285: LD_INT 1
29287: NEG
29288: PUSH
29289: LD_INT 2
29291: PUSH
29292: EMPTY
29293: LIST
29294: LIST
29295: PUSH
29296: LD_INT 2
29298: NEG
29299: PUSH
29300: LD_INT 1
29302: PUSH
29303: EMPTY
29304: LIST
29305: LIST
29306: PUSH
29307: LD_INT 3
29309: NEG
29310: PUSH
29311: LD_INT 1
29313: NEG
29314: PUSH
29315: EMPTY
29316: LIST
29317: LIST
29318: PUSH
29319: LD_INT 3
29321: NEG
29322: PUSH
29323: LD_INT 2
29325: NEG
29326: PUSH
29327: EMPTY
29328: LIST
29329: LIST
29330: PUSH
29331: EMPTY
29332: LIST
29333: LIST
29334: LIST
29335: LIST
29336: LIST
29337: LIST
29338: LIST
29339: LIST
29340: LIST
29341: LIST
29342: LIST
29343: LIST
29344: LIST
29345: LIST
29346: LIST
29347: LIST
29348: LIST
29349: LIST
29350: LIST
29351: LIST
29352: LIST
29353: LIST
29354: LIST
29355: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
29356: LD_ADDR_VAR 0 28
29360: PUSH
29361: LD_INT 0
29363: PUSH
29364: LD_INT 0
29366: PUSH
29367: EMPTY
29368: LIST
29369: LIST
29370: PUSH
29371: LD_INT 0
29373: PUSH
29374: LD_INT 1
29376: NEG
29377: PUSH
29378: EMPTY
29379: LIST
29380: LIST
29381: PUSH
29382: LD_INT 1
29384: PUSH
29385: LD_INT 0
29387: PUSH
29388: EMPTY
29389: LIST
29390: LIST
29391: PUSH
29392: LD_INT 1
29394: PUSH
29395: LD_INT 1
29397: PUSH
29398: EMPTY
29399: LIST
29400: LIST
29401: PUSH
29402: LD_INT 0
29404: PUSH
29405: LD_INT 1
29407: PUSH
29408: EMPTY
29409: LIST
29410: LIST
29411: PUSH
29412: LD_INT 1
29414: NEG
29415: PUSH
29416: LD_INT 0
29418: PUSH
29419: EMPTY
29420: LIST
29421: LIST
29422: PUSH
29423: LD_INT 1
29425: NEG
29426: PUSH
29427: LD_INT 1
29429: NEG
29430: PUSH
29431: EMPTY
29432: LIST
29433: LIST
29434: PUSH
29435: LD_INT 1
29437: NEG
29438: PUSH
29439: LD_INT 2
29441: NEG
29442: PUSH
29443: EMPTY
29444: LIST
29445: LIST
29446: PUSH
29447: LD_INT 0
29449: PUSH
29450: LD_INT 2
29452: NEG
29453: PUSH
29454: EMPTY
29455: LIST
29456: LIST
29457: PUSH
29458: LD_INT 1
29460: PUSH
29461: LD_INT 1
29463: NEG
29464: PUSH
29465: EMPTY
29466: LIST
29467: LIST
29468: PUSH
29469: LD_INT 2
29471: PUSH
29472: LD_INT 0
29474: PUSH
29475: EMPTY
29476: LIST
29477: LIST
29478: PUSH
29479: LD_INT 2
29481: PUSH
29482: LD_INT 1
29484: PUSH
29485: EMPTY
29486: LIST
29487: LIST
29488: PUSH
29489: LD_INT 2
29491: PUSH
29492: LD_INT 2
29494: PUSH
29495: EMPTY
29496: LIST
29497: LIST
29498: PUSH
29499: LD_INT 1
29501: PUSH
29502: LD_INT 2
29504: PUSH
29505: EMPTY
29506: LIST
29507: LIST
29508: PUSH
29509: LD_INT 0
29511: PUSH
29512: LD_INT 2
29514: PUSH
29515: EMPTY
29516: LIST
29517: LIST
29518: PUSH
29519: LD_INT 1
29521: NEG
29522: PUSH
29523: LD_INT 1
29525: PUSH
29526: EMPTY
29527: LIST
29528: LIST
29529: PUSH
29530: LD_INT 2
29532: NEG
29533: PUSH
29534: LD_INT 0
29536: PUSH
29537: EMPTY
29538: LIST
29539: LIST
29540: PUSH
29541: LD_INT 2
29543: NEG
29544: PUSH
29545: LD_INT 1
29547: NEG
29548: PUSH
29549: EMPTY
29550: LIST
29551: LIST
29552: PUSH
29553: LD_INT 2
29555: NEG
29556: PUSH
29557: LD_INT 2
29559: NEG
29560: PUSH
29561: EMPTY
29562: LIST
29563: LIST
29564: PUSH
29565: LD_INT 2
29567: NEG
29568: PUSH
29569: LD_INT 3
29571: NEG
29572: PUSH
29573: EMPTY
29574: LIST
29575: LIST
29576: PUSH
29577: LD_INT 1
29579: NEG
29580: PUSH
29581: LD_INT 3
29583: NEG
29584: PUSH
29585: EMPTY
29586: LIST
29587: LIST
29588: PUSH
29589: LD_INT 3
29591: NEG
29592: PUSH
29593: LD_INT 1
29595: NEG
29596: PUSH
29597: EMPTY
29598: LIST
29599: LIST
29600: PUSH
29601: LD_INT 3
29603: NEG
29604: PUSH
29605: LD_INT 2
29607: NEG
29608: PUSH
29609: EMPTY
29610: LIST
29611: LIST
29612: PUSH
29613: EMPTY
29614: LIST
29615: LIST
29616: LIST
29617: LIST
29618: LIST
29619: LIST
29620: LIST
29621: LIST
29622: LIST
29623: LIST
29624: LIST
29625: LIST
29626: LIST
29627: LIST
29628: LIST
29629: LIST
29630: LIST
29631: LIST
29632: LIST
29633: LIST
29634: LIST
29635: LIST
29636: LIST
29637: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
29638: LD_ADDR_VAR 0 29
29642: PUSH
29643: LD_INT 0
29645: PUSH
29646: LD_INT 0
29648: PUSH
29649: EMPTY
29650: LIST
29651: LIST
29652: PUSH
29653: LD_INT 0
29655: PUSH
29656: LD_INT 1
29658: NEG
29659: PUSH
29660: EMPTY
29661: LIST
29662: LIST
29663: PUSH
29664: LD_INT 1
29666: PUSH
29667: LD_INT 0
29669: PUSH
29670: EMPTY
29671: LIST
29672: LIST
29673: PUSH
29674: LD_INT 1
29676: PUSH
29677: LD_INT 1
29679: PUSH
29680: EMPTY
29681: LIST
29682: LIST
29683: PUSH
29684: LD_INT 0
29686: PUSH
29687: LD_INT 1
29689: PUSH
29690: EMPTY
29691: LIST
29692: LIST
29693: PUSH
29694: LD_INT 1
29696: NEG
29697: PUSH
29698: LD_INT 0
29700: PUSH
29701: EMPTY
29702: LIST
29703: LIST
29704: PUSH
29705: LD_INT 1
29707: NEG
29708: PUSH
29709: LD_INT 1
29711: NEG
29712: PUSH
29713: EMPTY
29714: LIST
29715: LIST
29716: PUSH
29717: LD_INT 1
29719: NEG
29720: PUSH
29721: LD_INT 2
29723: NEG
29724: PUSH
29725: EMPTY
29726: LIST
29727: LIST
29728: PUSH
29729: LD_INT 0
29731: PUSH
29732: LD_INT 2
29734: NEG
29735: PUSH
29736: EMPTY
29737: LIST
29738: LIST
29739: PUSH
29740: LD_INT 1
29742: PUSH
29743: LD_INT 1
29745: NEG
29746: PUSH
29747: EMPTY
29748: LIST
29749: LIST
29750: PUSH
29751: LD_INT 2
29753: PUSH
29754: LD_INT 0
29756: PUSH
29757: EMPTY
29758: LIST
29759: LIST
29760: PUSH
29761: LD_INT 2
29763: PUSH
29764: LD_INT 1
29766: PUSH
29767: EMPTY
29768: LIST
29769: LIST
29770: PUSH
29771: LD_INT 1
29773: PUSH
29774: LD_INT 2
29776: PUSH
29777: EMPTY
29778: LIST
29779: LIST
29780: PUSH
29781: LD_INT 0
29783: PUSH
29784: LD_INT 2
29786: PUSH
29787: EMPTY
29788: LIST
29789: LIST
29790: PUSH
29791: LD_INT 1
29793: NEG
29794: PUSH
29795: LD_INT 1
29797: PUSH
29798: EMPTY
29799: LIST
29800: LIST
29801: PUSH
29802: LD_INT 2
29804: NEG
29805: PUSH
29806: LD_INT 1
29808: NEG
29809: PUSH
29810: EMPTY
29811: LIST
29812: LIST
29813: PUSH
29814: LD_INT 2
29816: NEG
29817: PUSH
29818: LD_INT 2
29820: NEG
29821: PUSH
29822: EMPTY
29823: LIST
29824: LIST
29825: PUSH
29826: LD_INT 2
29828: NEG
29829: PUSH
29830: LD_INT 3
29832: NEG
29833: PUSH
29834: EMPTY
29835: LIST
29836: LIST
29837: PUSH
29838: LD_INT 2
29840: PUSH
29841: LD_INT 1
29843: NEG
29844: PUSH
29845: EMPTY
29846: LIST
29847: LIST
29848: PUSH
29849: LD_INT 3
29851: PUSH
29852: LD_INT 1
29854: PUSH
29855: EMPTY
29856: LIST
29857: LIST
29858: PUSH
29859: LD_INT 1
29861: PUSH
29862: LD_INT 3
29864: PUSH
29865: EMPTY
29866: LIST
29867: LIST
29868: PUSH
29869: LD_INT 1
29871: NEG
29872: PUSH
29873: LD_INT 2
29875: PUSH
29876: EMPTY
29877: LIST
29878: LIST
29879: PUSH
29880: LD_INT 3
29882: NEG
29883: PUSH
29884: LD_INT 2
29886: NEG
29887: PUSH
29888: EMPTY
29889: LIST
29890: LIST
29891: PUSH
29892: EMPTY
29893: LIST
29894: LIST
29895: LIST
29896: LIST
29897: LIST
29898: LIST
29899: LIST
29900: LIST
29901: LIST
29902: LIST
29903: LIST
29904: LIST
29905: LIST
29906: LIST
29907: LIST
29908: LIST
29909: LIST
29910: LIST
29911: LIST
29912: LIST
29913: LIST
29914: LIST
29915: LIST
29916: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
29917: LD_ADDR_VAR 0 30
29921: PUSH
29922: LD_INT 0
29924: PUSH
29925: LD_INT 0
29927: PUSH
29928: EMPTY
29929: LIST
29930: LIST
29931: PUSH
29932: LD_INT 0
29934: PUSH
29935: LD_INT 1
29937: NEG
29938: PUSH
29939: EMPTY
29940: LIST
29941: LIST
29942: PUSH
29943: LD_INT 1
29945: PUSH
29946: LD_INT 0
29948: PUSH
29949: EMPTY
29950: LIST
29951: LIST
29952: PUSH
29953: LD_INT 1
29955: PUSH
29956: LD_INT 1
29958: PUSH
29959: EMPTY
29960: LIST
29961: LIST
29962: PUSH
29963: LD_INT 0
29965: PUSH
29966: LD_INT 1
29968: PUSH
29969: EMPTY
29970: LIST
29971: LIST
29972: PUSH
29973: LD_INT 1
29975: NEG
29976: PUSH
29977: LD_INT 0
29979: PUSH
29980: EMPTY
29981: LIST
29982: LIST
29983: PUSH
29984: LD_INT 1
29986: NEG
29987: PUSH
29988: LD_INT 1
29990: NEG
29991: PUSH
29992: EMPTY
29993: LIST
29994: LIST
29995: PUSH
29996: LD_INT 1
29998: NEG
29999: PUSH
30000: LD_INT 2
30002: NEG
30003: PUSH
30004: EMPTY
30005: LIST
30006: LIST
30007: PUSH
30008: LD_INT 0
30010: PUSH
30011: LD_INT 2
30013: NEG
30014: PUSH
30015: EMPTY
30016: LIST
30017: LIST
30018: PUSH
30019: LD_INT 1
30021: PUSH
30022: LD_INT 1
30024: NEG
30025: PUSH
30026: EMPTY
30027: LIST
30028: LIST
30029: PUSH
30030: LD_INT 2
30032: PUSH
30033: LD_INT 0
30035: PUSH
30036: EMPTY
30037: LIST
30038: LIST
30039: PUSH
30040: LD_INT 2
30042: PUSH
30043: LD_INT 1
30045: PUSH
30046: EMPTY
30047: LIST
30048: LIST
30049: PUSH
30050: LD_INT 2
30052: PUSH
30053: LD_INT 2
30055: PUSH
30056: EMPTY
30057: LIST
30058: LIST
30059: PUSH
30060: LD_INT 1
30062: PUSH
30063: LD_INT 2
30065: PUSH
30066: EMPTY
30067: LIST
30068: LIST
30069: PUSH
30070: LD_INT 1
30072: NEG
30073: PUSH
30074: LD_INT 1
30076: PUSH
30077: EMPTY
30078: LIST
30079: LIST
30080: PUSH
30081: LD_INT 2
30083: NEG
30084: PUSH
30085: LD_INT 0
30087: PUSH
30088: EMPTY
30089: LIST
30090: LIST
30091: PUSH
30092: LD_INT 2
30094: NEG
30095: PUSH
30096: LD_INT 1
30098: NEG
30099: PUSH
30100: EMPTY
30101: LIST
30102: LIST
30103: PUSH
30104: LD_INT 1
30106: NEG
30107: PUSH
30108: LD_INT 3
30110: NEG
30111: PUSH
30112: EMPTY
30113: LIST
30114: LIST
30115: PUSH
30116: LD_INT 1
30118: PUSH
30119: LD_INT 2
30121: NEG
30122: PUSH
30123: EMPTY
30124: LIST
30125: LIST
30126: PUSH
30127: LD_INT 3
30129: PUSH
30130: LD_INT 2
30132: PUSH
30133: EMPTY
30134: LIST
30135: LIST
30136: PUSH
30137: LD_INT 2
30139: PUSH
30140: LD_INT 3
30142: PUSH
30143: EMPTY
30144: LIST
30145: LIST
30146: PUSH
30147: LD_INT 2
30149: NEG
30150: PUSH
30151: LD_INT 1
30153: PUSH
30154: EMPTY
30155: LIST
30156: LIST
30157: PUSH
30158: LD_INT 3
30160: NEG
30161: PUSH
30162: LD_INT 1
30164: NEG
30165: PUSH
30166: EMPTY
30167: LIST
30168: LIST
30169: PUSH
30170: EMPTY
30171: LIST
30172: LIST
30173: LIST
30174: LIST
30175: LIST
30176: LIST
30177: LIST
30178: LIST
30179: LIST
30180: LIST
30181: LIST
30182: LIST
30183: LIST
30184: LIST
30185: LIST
30186: LIST
30187: LIST
30188: LIST
30189: LIST
30190: LIST
30191: LIST
30192: LIST
30193: LIST
30194: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
30195: LD_ADDR_VAR 0 31
30199: PUSH
30200: LD_INT 0
30202: PUSH
30203: LD_INT 0
30205: PUSH
30206: EMPTY
30207: LIST
30208: LIST
30209: PUSH
30210: LD_INT 0
30212: PUSH
30213: LD_INT 1
30215: NEG
30216: PUSH
30217: EMPTY
30218: LIST
30219: LIST
30220: PUSH
30221: LD_INT 1
30223: PUSH
30224: LD_INT 0
30226: PUSH
30227: EMPTY
30228: LIST
30229: LIST
30230: PUSH
30231: LD_INT 1
30233: PUSH
30234: LD_INT 1
30236: PUSH
30237: EMPTY
30238: LIST
30239: LIST
30240: PUSH
30241: LD_INT 0
30243: PUSH
30244: LD_INT 1
30246: PUSH
30247: EMPTY
30248: LIST
30249: LIST
30250: PUSH
30251: LD_INT 1
30253: NEG
30254: PUSH
30255: LD_INT 0
30257: PUSH
30258: EMPTY
30259: LIST
30260: LIST
30261: PUSH
30262: LD_INT 1
30264: NEG
30265: PUSH
30266: LD_INT 1
30268: NEG
30269: PUSH
30270: EMPTY
30271: LIST
30272: LIST
30273: PUSH
30274: LD_INT 1
30276: NEG
30277: PUSH
30278: LD_INT 2
30280: NEG
30281: PUSH
30282: EMPTY
30283: LIST
30284: LIST
30285: PUSH
30286: LD_INT 1
30288: PUSH
30289: LD_INT 1
30291: NEG
30292: PUSH
30293: EMPTY
30294: LIST
30295: LIST
30296: PUSH
30297: LD_INT 2
30299: PUSH
30300: LD_INT 0
30302: PUSH
30303: EMPTY
30304: LIST
30305: LIST
30306: PUSH
30307: LD_INT 2
30309: PUSH
30310: LD_INT 1
30312: PUSH
30313: EMPTY
30314: LIST
30315: LIST
30316: PUSH
30317: LD_INT 2
30319: PUSH
30320: LD_INT 2
30322: PUSH
30323: EMPTY
30324: LIST
30325: LIST
30326: PUSH
30327: LD_INT 1
30329: PUSH
30330: LD_INT 2
30332: PUSH
30333: EMPTY
30334: LIST
30335: LIST
30336: PUSH
30337: LD_INT 0
30339: PUSH
30340: LD_INT 2
30342: PUSH
30343: EMPTY
30344: LIST
30345: LIST
30346: PUSH
30347: LD_INT 1
30349: NEG
30350: PUSH
30351: LD_INT 1
30353: PUSH
30354: EMPTY
30355: LIST
30356: LIST
30357: PUSH
30358: LD_INT 2
30360: NEG
30361: PUSH
30362: LD_INT 1
30364: NEG
30365: PUSH
30366: EMPTY
30367: LIST
30368: LIST
30369: PUSH
30370: LD_INT 2
30372: NEG
30373: PUSH
30374: LD_INT 2
30376: NEG
30377: PUSH
30378: EMPTY
30379: LIST
30380: LIST
30381: PUSH
30382: LD_INT 2
30384: NEG
30385: PUSH
30386: LD_INT 3
30388: NEG
30389: PUSH
30390: EMPTY
30391: LIST
30392: LIST
30393: PUSH
30394: LD_INT 2
30396: PUSH
30397: LD_INT 1
30399: NEG
30400: PUSH
30401: EMPTY
30402: LIST
30403: LIST
30404: PUSH
30405: LD_INT 3
30407: PUSH
30408: LD_INT 1
30410: PUSH
30411: EMPTY
30412: LIST
30413: LIST
30414: PUSH
30415: LD_INT 1
30417: PUSH
30418: LD_INT 3
30420: PUSH
30421: EMPTY
30422: LIST
30423: LIST
30424: PUSH
30425: LD_INT 1
30427: NEG
30428: PUSH
30429: LD_INT 2
30431: PUSH
30432: EMPTY
30433: LIST
30434: LIST
30435: PUSH
30436: LD_INT 3
30438: NEG
30439: PUSH
30440: LD_INT 2
30442: NEG
30443: PUSH
30444: EMPTY
30445: LIST
30446: LIST
30447: PUSH
30448: EMPTY
30449: LIST
30450: LIST
30451: LIST
30452: LIST
30453: LIST
30454: LIST
30455: LIST
30456: LIST
30457: LIST
30458: LIST
30459: LIST
30460: LIST
30461: LIST
30462: LIST
30463: LIST
30464: LIST
30465: LIST
30466: LIST
30467: LIST
30468: LIST
30469: LIST
30470: LIST
30471: LIST
30472: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
30473: LD_ADDR_VAR 0 32
30477: PUSH
30478: LD_INT 0
30480: PUSH
30481: LD_INT 0
30483: PUSH
30484: EMPTY
30485: LIST
30486: LIST
30487: PUSH
30488: LD_INT 0
30490: PUSH
30491: LD_INT 1
30493: NEG
30494: PUSH
30495: EMPTY
30496: LIST
30497: LIST
30498: PUSH
30499: LD_INT 1
30501: PUSH
30502: LD_INT 0
30504: PUSH
30505: EMPTY
30506: LIST
30507: LIST
30508: PUSH
30509: LD_INT 1
30511: PUSH
30512: LD_INT 1
30514: PUSH
30515: EMPTY
30516: LIST
30517: LIST
30518: PUSH
30519: LD_INT 0
30521: PUSH
30522: LD_INT 1
30524: PUSH
30525: EMPTY
30526: LIST
30527: LIST
30528: PUSH
30529: LD_INT 1
30531: NEG
30532: PUSH
30533: LD_INT 0
30535: PUSH
30536: EMPTY
30537: LIST
30538: LIST
30539: PUSH
30540: LD_INT 1
30542: NEG
30543: PUSH
30544: LD_INT 1
30546: NEG
30547: PUSH
30548: EMPTY
30549: LIST
30550: LIST
30551: PUSH
30552: LD_INT 1
30554: NEG
30555: PUSH
30556: LD_INT 2
30558: NEG
30559: PUSH
30560: EMPTY
30561: LIST
30562: LIST
30563: PUSH
30564: LD_INT 0
30566: PUSH
30567: LD_INT 2
30569: NEG
30570: PUSH
30571: EMPTY
30572: LIST
30573: LIST
30574: PUSH
30575: LD_INT 1
30577: PUSH
30578: LD_INT 1
30580: NEG
30581: PUSH
30582: EMPTY
30583: LIST
30584: LIST
30585: PUSH
30586: LD_INT 2
30588: PUSH
30589: LD_INT 1
30591: PUSH
30592: EMPTY
30593: LIST
30594: LIST
30595: PUSH
30596: LD_INT 2
30598: PUSH
30599: LD_INT 2
30601: PUSH
30602: EMPTY
30603: LIST
30604: LIST
30605: PUSH
30606: LD_INT 1
30608: PUSH
30609: LD_INT 2
30611: PUSH
30612: EMPTY
30613: LIST
30614: LIST
30615: PUSH
30616: LD_INT 0
30618: PUSH
30619: LD_INT 2
30621: PUSH
30622: EMPTY
30623: LIST
30624: LIST
30625: PUSH
30626: LD_INT 1
30628: NEG
30629: PUSH
30630: LD_INT 1
30632: PUSH
30633: EMPTY
30634: LIST
30635: LIST
30636: PUSH
30637: LD_INT 2
30639: NEG
30640: PUSH
30641: LD_INT 0
30643: PUSH
30644: EMPTY
30645: LIST
30646: LIST
30647: PUSH
30648: LD_INT 2
30650: NEG
30651: PUSH
30652: LD_INT 1
30654: NEG
30655: PUSH
30656: EMPTY
30657: LIST
30658: LIST
30659: PUSH
30660: LD_INT 1
30662: NEG
30663: PUSH
30664: LD_INT 3
30666: NEG
30667: PUSH
30668: EMPTY
30669: LIST
30670: LIST
30671: PUSH
30672: LD_INT 1
30674: PUSH
30675: LD_INT 2
30677: NEG
30678: PUSH
30679: EMPTY
30680: LIST
30681: LIST
30682: PUSH
30683: LD_INT 3
30685: PUSH
30686: LD_INT 2
30688: PUSH
30689: EMPTY
30690: LIST
30691: LIST
30692: PUSH
30693: LD_INT 2
30695: PUSH
30696: LD_INT 3
30698: PUSH
30699: EMPTY
30700: LIST
30701: LIST
30702: PUSH
30703: LD_INT 2
30705: NEG
30706: PUSH
30707: LD_INT 1
30709: PUSH
30710: EMPTY
30711: LIST
30712: LIST
30713: PUSH
30714: LD_INT 3
30716: NEG
30717: PUSH
30718: LD_INT 1
30720: NEG
30721: PUSH
30722: EMPTY
30723: LIST
30724: LIST
30725: PUSH
30726: EMPTY
30727: LIST
30728: LIST
30729: LIST
30730: LIST
30731: LIST
30732: LIST
30733: LIST
30734: LIST
30735: LIST
30736: LIST
30737: LIST
30738: LIST
30739: LIST
30740: LIST
30741: LIST
30742: LIST
30743: LIST
30744: LIST
30745: LIST
30746: LIST
30747: LIST
30748: LIST
30749: LIST
30750: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
30751: LD_ADDR_VAR 0 33
30755: PUSH
30756: LD_INT 0
30758: PUSH
30759: LD_INT 0
30761: PUSH
30762: EMPTY
30763: LIST
30764: LIST
30765: PUSH
30766: LD_INT 0
30768: PUSH
30769: LD_INT 1
30771: NEG
30772: PUSH
30773: EMPTY
30774: LIST
30775: LIST
30776: PUSH
30777: LD_INT 1
30779: PUSH
30780: LD_INT 0
30782: PUSH
30783: EMPTY
30784: LIST
30785: LIST
30786: PUSH
30787: LD_INT 1
30789: PUSH
30790: LD_INT 1
30792: PUSH
30793: EMPTY
30794: LIST
30795: LIST
30796: PUSH
30797: LD_INT 0
30799: PUSH
30800: LD_INT 1
30802: PUSH
30803: EMPTY
30804: LIST
30805: LIST
30806: PUSH
30807: LD_INT 1
30809: NEG
30810: PUSH
30811: LD_INT 0
30813: PUSH
30814: EMPTY
30815: LIST
30816: LIST
30817: PUSH
30818: LD_INT 1
30820: NEG
30821: PUSH
30822: LD_INT 1
30824: NEG
30825: PUSH
30826: EMPTY
30827: LIST
30828: LIST
30829: PUSH
30830: LD_INT 1
30832: NEG
30833: PUSH
30834: LD_INT 2
30836: NEG
30837: PUSH
30838: EMPTY
30839: LIST
30840: LIST
30841: PUSH
30842: LD_INT 1
30844: PUSH
30845: LD_INT 1
30847: NEG
30848: PUSH
30849: EMPTY
30850: LIST
30851: LIST
30852: PUSH
30853: LD_INT 2
30855: PUSH
30856: LD_INT 0
30858: PUSH
30859: EMPTY
30860: LIST
30861: LIST
30862: PUSH
30863: LD_INT 2
30865: PUSH
30866: LD_INT 1
30868: PUSH
30869: EMPTY
30870: LIST
30871: LIST
30872: PUSH
30873: LD_INT 1
30875: PUSH
30876: LD_INT 2
30878: PUSH
30879: EMPTY
30880: LIST
30881: LIST
30882: PUSH
30883: LD_INT 0
30885: PUSH
30886: LD_INT 2
30888: PUSH
30889: EMPTY
30890: LIST
30891: LIST
30892: PUSH
30893: LD_INT 1
30895: NEG
30896: PUSH
30897: LD_INT 1
30899: PUSH
30900: EMPTY
30901: LIST
30902: LIST
30903: PUSH
30904: LD_INT 2
30906: NEG
30907: PUSH
30908: LD_INT 0
30910: PUSH
30911: EMPTY
30912: LIST
30913: LIST
30914: PUSH
30915: LD_INT 2
30917: NEG
30918: PUSH
30919: LD_INT 1
30921: NEG
30922: PUSH
30923: EMPTY
30924: LIST
30925: LIST
30926: PUSH
30927: LD_INT 2
30929: NEG
30930: PUSH
30931: LD_INT 2
30933: NEG
30934: PUSH
30935: EMPTY
30936: LIST
30937: LIST
30938: PUSH
30939: LD_INT 2
30941: NEG
30942: PUSH
30943: LD_INT 3
30945: NEG
30946: PUSH
30947: EMPTY
30948: LIST
30949: LIST
30950: PUSH
30951: LD_INT 2
30953: PUSH
30954: LD_INT 1
30956: NEG
30957: PUSH
30958: EMPTY
30959: LIST
30960: LIST
30961: PUSH
30962: LD_INT 3
30964: PUSH
30965: LD_INT 1
30967: PUSH
30968: EMPTY
30969: LIST
30970: LIST
30971: PUSH
30972: LD_INT 1
30974: PUSH
30975: LD_INT 3
30977: PUSH
30978: EMPTY
30979: LIST
30980: LIST
30981: PUSH
30982: LD_INT 1
30984: NEG
30985: PUSH
30986: LD_INT 2
30988: PUSH
30989: EMPTY
30990: LIST
30991: LIST
30992: PUSH
30993: LD_INT 3
30995: NEG
30996: PUSH
30997: LD_INT 2
30999: NEG
31000: PUSH
31001: EMPTY
31002: LIST
31003: LIST
31004: PUSH
31005: EMPTY
31006: LIST
31007: LIST
31008: LIST
31009: LIST
31010: LIST
31011: LIST
31012: LIST
31013: LIST
31014: LIST
31015: LIST
31016: LIST
31017: LIST
31018: LIST
31019: LIST
31020: LIST
31021: LIST
31022: LIST
31023: LIST
31024: LIST
31025: LIST
31026: LIST
31027: LIST
31028: LIST
31029: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
31030: LD_ADDR_VAR 0 34
31034: PUSH
31035: LD_INT 0
31037: PUSH
31038: LD_INT 0
31040: PUSH
31041: EMPTY
31042: LIST
31043: LIST
31044: PUSH
31045: LD_INT 0
31047: PUSH
31048: LD_INT 1
31050: NEG
31051: PUSH
31052: EMPTY
31053: LIST
31054: LIST
31055: PUSH
31056: LD_INT 1
31058: PUSH
31059: LD_INT 0
31061: PUSH
31062: EMPTY
31063: LIST
31064: LIST
31065: PUSH
31066: LD_INT 1
31068: PUSH
31069: LD_INT 1
31071: PUSH
31072: EMPTY
31073: LIST
31074: LIST
31075: PUSH
31076: LD_INT 0
31078: PUSH
31079: LD_INT 1
31081: PUSH
31082: EMPTY
31083: LIST
31084: LIST
31085: PUSH
31086: LD_INT 1
31088: NEG
31089: PUSH
31090: LD_INT 0
31092: PUSH
31093: EMPTY
31094: LIST
31095: LIST
31096: PUSH
31097: LD_INT 1
31099: NEG
31100: PUSH
31101: LD_INT 1
31103: NEG
31104: PUSH
31105: EMPTY
31106: LIST
31107: LIST
31108: PUSH
31109: LD_INT 1
31111: NEG
31112: PUSH
31113: LD_INT 2
31115: NEG
31116: PUSH
31117: EMPTY
31118: LIST
31119: LIST
31120: PUSH
31121: LD_INT 0
31123: PUSH
31124: LD_INT 2
31126: NEG
31127: PUSH
31128: EMPTY
31129: LIST
31130: LIST
31131: PUSH
31132: LD_INT 1
31134: PUSH
31135: LD_INT 1
31137: NEG
31138: PUSH
31139: EMPTY
31140: LIST
31141: LIST
31142: PUSH
31143: LD_INT 2
31145: PUSH
31146: LD_INT 1
31148: PUSH
31149: EMPTY
31150: LIST
31151: LIST
31152: PUSH
31153: LD_INT 2
31155: PUSH
31156: LD_INT 2
31158: PUSH
31159: EMPTY
31160: LIST
31161: LIST
31162: PUSH
31163: LD_INT 1
31165: PUSH
31166: LD_INT 2
31168: PUSH
31169: EMPTY
31170: LIST
31171: LIST
31172: PUSH
31173: LD_INT 1
31175: NEG
31176: PUSH
31177: LD_INT 1
31179: PUSH
31180: EMPTY
31181: LIST
31182: LIST
31183: PUSH
31184: LD_INT 2
31186: NEG
31187: PUSH
31188: LD_INT 0
31190: PUSH
31191: EMPTY
31192: LIST
31193: LIST
31194: PUSH
31195: LD_INT 2
31197: NEG
31198: PUSH
31199: LD_INT 1
31201: NEG
31202: PUSH
31203: EMPTY
31204: LIST
31205: LIST
31206: PUSH
31207: LD_INT 2
31209: NEG
31210: PUSH
31211: LD_INT 2
31213: NEG
31214: PUSH
31215: EMPTY
31216: LIST
31217: LIST
31218: PUSH
31219: LD_INT 1
31221: NEG
31222: PUSH
31223: LD_INT 3
31225: NEG
31226: PUSH
31227: EMPTY
31228: LIST
31229: LIST
31230: PUSH
31231: LD_INT 1
31233: PUSH
31234: LD_INT 2
31236: NEG
31237: PUSH
31238: EMPTY
31239: LIST
31240: LIST
31241: PUSH
31242: LD_INT 3
31244: PUSH
31245: LD_INT 2
31247: PUSH
31248: EMPTY
31249: LIST
31250: LIST
31251: PUSH
31252: LD_INT 2
31254: PUSH
31255: LD_INT 3
31257: PUSH
31258: EMPTY
31259: LIST
31260: LIST
31261: PUSH
31262: LD_INT 2
31264: NEG
31265: PUSH
31266: LD_INT 1
31268: PUSH
31269: EMPTY
31270: LIST
31271: LIST
31272: PUSH
31273: LD_INT 3
31275: NEG
31276: PUSH
31277: LD_INT 1
31279: NEG
31280: PUSH
31281: EMPTY
31282: LIST
31283: LIST
31284: PUSH
31285: EMPTY
31286: LIST
31287: LIST
31288: LIST
31289: LIST
31290: LIST
31291: LIST
31292: LIST
31293: LIST
31294: LIST
31295: LIST
31296: LIST
31297: LIST
31298: LIST
31299: LIST
31300: LIST
31301: LIST
31302: LIST
31303: LIST
31304: LIST
31305: LIST
31306: LIST
31307: LIST
31308: LIST
31309: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
31310: LD_ADDR_VAR 0 35
31314: PUSH
31315: LD_INT 0
31317: PUSH
31318: LD_INT 0
31320: PUSH
31321: EMPTY
31322: LIST
31323: LIST
31324: PUSH
31325: LD_INT 0
31327: PUSH
31328: LD_INT 1
31330: NEG
31331: PUSH
31332: EMPTY
31333: LIST
31334: LIST
31335: PUSH
31336: LD_INT 1
31338: PUSH
31339: LD_INT 0
31341: PUSH
31342: EMPTY
31343: LIST
31344: LIST
31345: PUSH
31346: LD_INT 1
31348: PUSH
31349: LD_INT 1
31351: PUSH
31352: EMPTY
31353: LIST
31354: LIST
31355: PUSH
31356: LD_INT 0
31358: PUSH
31359: LD_INT 1
31361: PUSH
31362: EMPTY
31363: LIST
31364: LIST
31365: PUSH
31366: LD_INT 1
31368: NEG
31369: PUSH
31370: LD_INT 0
31372: PUSH
31373: EMPTY
31374: LIST
31375: LIST
31376: PUSH
31377: LD_INT 1
31379: NEG
31380: PUSH
31381: LD_INT 1
31383: NEG
31384: PUSH
31385: EMPTY
31386: LIST
31387: LIST
31388: PUSH
31389: LD_INT 2
31391: PUSH
31392: LD_INT 1
31394: PUSH
31395: EMPTY
31396: LIST
31397: LIST
31398: PUSH
31399: LD_INT 2
31401: NEG
31402: PUSH
31403: LD_INT 1
31405: NEG
31406: PUSH
31407: EMPTY
31408: LIST
31409: LIST
31410: PUSH
31411: EMPTY
31412: LIST
31413: LIST
31414: LIST
31415: LIST
31416: LIST
31417: LIST
31418: LIST
31419: LIST
31420: LIST
31421: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
31422: LD_ADDR_VAR 0 36
31426: PUSH
31427: LD_INT 0
31429: PUSH
31430: LD_INT 0
31432: PUSH
31433: EMPTY
31434: LIST
31435: LIST
31436: PUSH
31437: LD_INT 0
31439: PUSH
31440: LD_INT 1
31442: NEG
31443: PUSH
31444: EMPTY
31445: LIST
31446: LIST
31447: PUSH
31448: LD_INT 1
31450: PUSH
31451: LD_INT 0
31453: PUSH
31454: EMPTY
31455: LIST
31456: LIST
31457: PUSH
31458: LD_INT 1
31460: PUSH
31461: LD_INT 1
31463: PUSH
31464: EMPTY
31465: LIST
31466: LIST
31467: PUSH
31468: LD_INT 0
31470: PUSH
31471: LD_INT 1
31473: PUSH
31474: EMPTY
31475: LIST
31476: LIST
31477: PUSH
31478: LD_INT 1
31480: NEG
31481: PUSH
31482: LD_INT 0
31484: PUSH
31485: EMPTY
31486: LIST
31487: LIST
31488: PUSH
31489: LD_INT 1
31491: NEG
31492: PUSH
31493: LD_INT 1
31495: NEG
31496: PUSH
31497: EMPTY
31498: LIST
31499: LIST
31500: PUSH
31501: LD_INT 1
31503: NEG
31504: PUSH
31505: LD_INT 2
31507: NEG
31508: PUSH
31509: EMPTY
31510: LIST
31511: LIST
31512: PUSH
31513: LD_INT 1
31515: PUSH
31516: LD_INT 2
31518: PUSH
31519: EMPTY
31520: LIST
31521: LIST
31522: PUSH
31523: EMPTY
31524: LIST
31525: LIST
31526: LIST
31527: LIST
31528: LIST
31529: LIST
31530: LIST
31531: LIST
31532: LIST
31533: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
31534: LD_ADDR_VAR 0 37
31538: PUSH
31539: LD_INT 0
31541: PUSH
31542: LD_INT 0
31544: PUSH
31545: EMPTY
31546: LIST
31547: LIST
31548: PUSH
31549: LD_INT 0
31551: PUSH
31552: LD_INT 1
31554: NEG
31555: PUSH
31556: EMPTY
31557: LIST
31558: LIST
31559: PUSH
31560: LD_INT 1
31562: PUSH
31563: LD_INT 0
31565: PUSH
31566: EMPTY
31567: LIST
31568: LIST
31569: PUSH
31570: LD_INT 1
31572: PUSH
31573: LD_INT 1
31575: PUSH
31576: EMPTY
31577: LIST
31578: LIST
31579: PUSH
31580: LD_INT 0
31582: PUSH
31583: LD_INT 1
31585: PUSH
31586: EMPTY
31587: LIST
31588: LIST
31589: PUSH
31590: LD_INT 1
31592: NEG
31593: PUSH
31594: LD_INT 0
31596: PUSH
31597: EMPTY
31598: LIST
31599: LIST
31600: PUSH
31601: LD_INT 1
31603: NEG
31604: PUSH
31605: LD_INT 1
31607: NEG
31608: PUSH
31609: EMPTY
31610: LIST
31611: LIST
31612: PUSH
31613: LD_INT 1
31615: PUSH
31616: LD_INT 1
31618: NEG
31619: PUSH
31620: EMPTY
31621: LIST
31622: LIST
31623: PUSH
31624: LD_INT 1
31626: NEG
31627: PUSH
31628: LD_INT 1
31630: PUSH
31631: EMPTY
31632: LIST
31633: LIST
31634: PUSH
31635: EMPTY
31636: LIST
31637: LIST
31638: LIST
31639: LIST
31640: LIST
31641: LIST
31642: LIST
31643: LIST
31644: LIST
31645: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
31646: LD_ADDR_VAR 0 38
31650: PUSH
31651: LD_INT 0
31653: PUSH
31654: LD_INT 0
31656: PUSH
31657: EMPTY
31658: LIST
31659: LIST
31660: PUSH
31661: LD_INT 0
31663: PUSH
31664: LD_INT 1
31666: NEG
31667: PUSH
31668: EMPTY
31669: LIST
31670: LIST
31671: PUSH
31672: LD_INT 1
31674: PUSH
31675: LD_INT 0
31677: PUSH
31678: EMPTY
31679: LIST
31680: LIST
31681: PUSH
31682: LD_INT 1
31684: PUSH
31685: LD_INT 1
31687: PUSH
31688: EMPTY
31689: LIST
31690: LIST
31691: PUSH
31692: LD_INT 0
31694: PUSH
31695: LD_INT 1
31697: PUSH
31698: EMPTY
31699: LIST
31700: LIST
31701: PUSH
31702: LD_INT 1
31704: NEG
31705: PUSH
31706: LD_INT 0
31708: PUSH
31709: EMPTY
31710: LIST
31711: LIST
31712: PUSH
31713: LD_INT 1
31715: NEG
31716: PUSH
31717: LD_INT 1
31719: NEG
31720: PUSH
31721: EMPTY
31722: LIST
31723: LIST
31724: PUSH
31725: LD_INT 2
31727: PUSH
31728: LD_INT 1
31730: PUSH
31731: EMPTY
31732: LIST
31733: LIST
31734: PUSH
31735: LD_INT 2
31737: NEG
31738: PUSH
31739: LD_INT 1
31741: NEG
31742: PUSH
31743: EMPTY
31744: LIST
31745: LIST
31746: PUSH
31747: EMPTY
31748: LIST
31749: LIST
31750: LIST
31751: LIST
31752: LIST
31753: LIST
31754: LIST
31755: LIST
31756: LIST
31757: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
31758: LD_ADDR_VAR 0 39
31762: PUSH
31763: LD_INT 0
31765: PUSH
31766: LD_INT 0
31768: PUSH
31769: EMPTY
31770: LIST
31771: LIST
31772: PUSH
31773: LD_INT 0
31775: PUSH
31776: LD_INT 1
31778: NEG
31779: PUSH
31780: EMPTY
31781: LIST
31782: LIST
31783: PUSH
31784: LD_INT 1
31786: PUSH
31787: LD_INT 0
31789: PUSH
31790: EMPTY
31791: LIST
31792: LIST
31793: PUSH
31794: LD_INT 1
31796: PUSH
31797: LD_INT 1
31799: PUSH
31800: EMPTY
31801: LIST
31802: LIST
31803: PUSH
31804: LD_INT 0
31806: PUSH
31807: LD_INT 1
31809: PUSH
31810: EMPTY
31811: LIST
31812: LIST
31813: PUSH
31814: LD_INT 1
31816: NEG
31817: PUSH
31818: LD_INT 0
31820: PUSH
31821: EMPTY
31822: LIST
31823: LIST
31824: PUSH
31825: LD_INT 1
31827: NEG
31828: PUSH
31829: LD_INT 1
31831: NEG
31832: PUSH
31833: EMPTY
31834: LIST
31835: LIST
31836: PUSH
31837: LD_INT 1
31839: NEG
31840: PUSH
31841: LD_INT 2
31843: NEG
31844: PUSH
31845: EMPTY
31846: LIST
31847: LIST
31848: PUSH
31849: LD_INT 1
31851: PUSH
31852: LD_INT 2
31854: PUSH
31855: EMPTY
31856: LIST
31857: LIST
31858: PUSH
31859: EMPTY
31860: LIST
31861: LIST
31862: LIST
31863: LIST
31864: LIST
31865: LIST
31866: LIST
31867: LIST
31868: LIST
31869: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
31870: LD_ADDR_VAR 0 40
31874: PUSH
31875: LD_INT 0
31877: PUSH
31878: LD_INT 0
31880: PUSH
31881: EMPTY
31882: LIST
31883: LIST
31884: PUSH
31885: LD_INT 0
31887: PUSH
31888: LD_INT 1
31890: NEG
31891: PUSH
31892: EMPTY
31893: LIST
31894: LIST
31895: PUSH
31896: LD_INT 1
31898: PUSH
31899: LD_INT 0
31901: PUSH
31902: EMPTY
31903: LIST
31904: LIST
31905: PUSH
31906: LD_INT 1
31908: PUSH
31909: LD_INT 1
31911: PUSH
31912: EMPTY
31913: LIST
31914: LIST
31915: PUSH
31916: LD_INT 0
31918: PUSH
31919: LD_INT 1
31921: PUSH
31922: EMPTY
31923: LIST
31924: LIST
31925: PUSH
31926: LD_INT 1
31928: NEG
31929: PUSH
31930: LD_INT 0
31932: PUSH
31933: EMPTY
31934: LIST
31935: LIST
31936: PUSH
31937: LD_INT 1
31939: NEG
31940: PUSH
31941: LD_INT 1
31943: NEG
31944: PUSH
31945: EMPTY
31946: LIST
31947: LIST
31948: PUSH
31949: LD_INT 1
31951: PUSH
31952: LD_INT 1
31954: NEG
31955: PUSH
31956: EMPTY
31957: LIST
31958: LIST
31959: PUSH
31960: LD_INT 1
31962: NEG
31963: PUSH
31964: LD_INT 1
31966: PUSH
31967: EMPTY
31968: LIST
31969: LIST
31970: PUSH
31971: EMPTY
31972: LIST
31973: LIST
31974: LIST
31975: LIST
31976: LIST
31977: LIST
31978: LIST
31979: LIST
31980: LIST
31981: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
31982: LD_ADDR_VAR 0 41
31986: PUSH
31987: LD_INT 0
31989: PUSH
31990: LD_INT 0
31992: PUSH
31993: EMPTY
31994: LIST
31995: LIST
31996: PUSH
31997: LD_INT 0
31999: PUSH
32000: LD_INT 1
32002: NEG
32003: PUSH
32004: EMPTY
32005: LIST
32006: LIST
32007: PUSH
32008: LD_INT 1
32010: PUSH
32011: LD_INT 0
32013: PUSH
32014: EMPTY
32015: LIST
32016: LIST
32017: PUSH
32018: LD_INT 1
32020: PUSH
32021: LD_INT 1
32023: PUSH
32024: EMPTY
32025: LIST
32026: LIST
32027: PUSH
32028: LD_INT 0
32030: PUSH
32031: LD_INT 1
32033: PUSH
32034: EMPTY
32035: LIST
32036: LIST
32037: PUSH
32038: LD_INT 1
32040: NEG
32041: PUSH
32042: LD_INT 0
32044: PUSH
32045: EMPTY
32046: LIST
32047: LIST
32048: PUSH
32049: LD_INT 1
32051: NEG
32052: PUSH
32053: LD_INT 1
32055: NEG
32056: PUSH
32057: EMPTY
32058: LIST
32059: LIST
32060: PUSH
32061: LD_INT 1
32063: NEG
32064: PUSH
32065: LD_INT 2
32067: NEG
32068: PUSH
32069: EMPTY
32070: LIST
32071: LIST
32072: PUSH
32073: LD_INT 1
32075: PUSH
32076: LD_INT 1
32078: NEG
32079: PUSH
32080: EMPTY
32081: LIST
32082: LIST
32083: PUSH
32084: LD_INT 2
32086: PUSH
32087: LD_INT 0
32089: PUSH
32090: EMPTY
32091: LIST
32092: LIST
32093: PUSH
32094: LD_INT 2
32096: PUSH
32097: LD_INT 1
32099: PUSH
32100: EMPTY
32101: LIST
32102: LIST
32103: PUSH
32104: LD_INT 2
32106: PUSH
32107: LD_INT 2
32109: PUSH
32110: EMPTY
32111: LIST
32112: LIST
32113: PUSH
32114: LD_INT 1
32116: PUSH
32117: LD_INT 2
32119: PUSH
32120: EMPTY
32121: LIST
32122: LIST
32123: PUSH
32124: LD_INT 1
32126: NEG
32127: PUSH
32128: LD_INT 1
32130: PUSH
32131: EMPTY
32132: LIST
32133: LIST
32134: PUSH
32135: LD_INT 2
32137: NEG
32138: PUSH
32139: LD_INT 0
32141: PUSH
32142: EMPTY
32143: LIST
32144: LIST
32145: PUSH
32146: LD_INT 2
32148: NEG
32149: PUSH
32150: LD_INT 1
32152: NEG
32153: PUSH
32154: EMPTY
32155: LIST
32156: LIST
32157: PUSH
32158: LD_INT 2
32160: NEG
32161: PUSH
32162: LD_INT 2
32164: NEG
32165: PUSH
32166: EMPTY
32167: LIST
32168: LIST
32169: PUSH
32170: LD_INT 2
32172: NEG
32173: PUSH
32174: LD_INT 3
32176: NEG
32177: PUSH
32178: EMPTY
32179: LIST
32180: LIST
32181: PUSH
32182: LD_INT 2
32184: PUSH
32185: LD_INT 1
32187: NEG
32188: PUSH
32189: EMPTY
32190: LIST
32191: LIST
32192: PUSH
32193: LD_INT 3
32195: PUSH
32196: LD_INT 0
32198: PUSH
32199: EMPTY
32200: LIST
32201: LIST
32202: PUSH
32203: LD_INT 3
32205: PUSH
32206: LD_INT 1
32208: PUSH
32209: EMPTY
32210: LIST
32211: LIST
32212: PUSH
32213: LD_INT 3
32215: PUSH
32216: LD_INT 2
32218: PUSH
32219: EMPTY
32220: LIST
32221: LIST
32222: PUSH
32223: LD_INT 3
32225: PUSH
32226: LD_INT 3
32228: PUSH
32229: EMPTY
32230: LIST
32231: LIST
32232: PUSH
32233: LD_INT 2
32235: PUSH
32236: LD_INT 3
32238: PUSH
32239: EMPTY
32240: LIST
32241: LIST
32242: PUSH
32243: LD_INT 2
32245: NEG
32246: PUSH
32247: LD_INT 1
32249: PUSH
32250: EMPTY
32251: LIST
32252: LIST
32253: PUSH
32254: LD_INT 3
32256: NEG
32257: PUSH
32258: LD_INT 0
32260: PUSH
32261: EMPTY
32262: LIST
32263: LIST
32264: PUSH
32265: LD_INT 3
32267: NEG
32268: PUSH
32269: LD_INT 1
32271: NEG
32272: PUSH
32273: EMPTY
32274: LIST
32275: LIST
32276: PUSH
32277: LD_INT 3
32279: NEG
32280: PUSH
32281: LD_INT 2
32283: NEG
32284: PUSH
32285: EMPTY
32286: LIST
32287: LIST
32288: PUSH
32289: LD_INT 3
32291: NEG
32292: PUSH
32293: LD_INT 3
32295: NEG
32296: PUSH
32297: EMPTY
32298: LIST
32299: LIST
32300: PUSH
32301: EMPTY
32302: LIST
32303: LIST
32304: LIST
32305: LIST
32306: LIST
32307: LIST
32308: LIST
32309: LIST
32310: LIST
32311: LIST
32312: LIST
32313: LIST
32314: LIST
32315: LIST
32316: LIST
32317: LIST
32318: LIST
32319: LIST
32320: LIST
32321: LIST
32322: LIST
32323: LIST
32324: LIST
32325: LIST
32326: LIST
32327: LIST
32328: LIST
32329: LIST
32330: LIST
32331: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
32332: LD_ADDR_VAR 0 42
32336: PUSH
32337: LD_INT 0
32339: PUSH
32340: LD_INT 0
32342: PUSH
32343: EMPTY
32344: LIST
32345: LIST
32346: PUSH
32347: LD_INT 0
32349: PUSH
32350: LD_INT 1
32352: NEG
32353: PUSH
32354: EMPTY
32355: LIST
32356: LIST
32357: PUSH
32358: LD_INT 1
32360: PUSH
32361: LD_INT 0
32363: PUSH
32364: EMPTY
32365: LIST
32366: LIST
32367: PUSH
32368: LD_INT 1
32370: PUSH
32371: LD_INT 1
32373: PUSH
32374: EMPTY
32375: LIST
32376: LIST
32377: PUSH
32378: LD_INT 0
32380: PUSH
32381: LD_INT 1
32383: PUSH
32384: EMPTY
32385: LIST
32386: LIST
32387: PUSH
32388: LD_INT 1
32390: NEG
32391: PUSH
32392: LD_INT 0
32394: PUSH
32395: EMPTY
32396: LIST
32397: LIST
32398: PUSH
32399: LD_INT 1
32401: NEG
32402: PUSH
32403: LD_INT 1
32405: NEG
32406: PUSH
32407: EMPTY
32408: LIST
32409: LIST
32410: PUSH
32411: LD_INT 1
32413: NEG
32414: PUSH
32415: LD_INT 2
32417: NEG
32418: PUSH
32419: EMPTY
32420: LIST
32421: LIST
32422: PUSH
32423: LD_INT 0
32425: PUSH
32426: LD_INT 2
32428: NEG
32429: PUSH
32430: EMPTY
32431: LIST
32432: LIST
32433: PUSH
32434: LD_INT 1
32436: PUSH
32437: LD_INT 1
32439: NEG
32440: PUSH
32441: EMPTY
32442: LIST
32443: LIST
32444: PUSH
32445: LD_INT 2
32447: PUSH
32448: LD_INT 1
32450: PUSH
32451: EMPTY
32452: LIST
32453: LIST
32454: PUSH
32455: LD_INT 2
32457: PUSH
32458: LD_INT 2
32460: PUSH
32461: EMPTY
32462: LIST
32463: LIST
32464: PUSH
32465: LD_INT 1
32467: PUSH
32468: LD_INT 2
32470: PUSH
32471: EMPTY
32472: LIST
32473: LIST
32474: PUSH
32475: LD_INT 0
32477: PUSH
32478: LD_INT 2
32480: PUSH
32481: EMPTY
32482: LIST
32483: LIST
32484: PUSH
32485: LD_INT 1
32487: NEG
32488: PUSH
32489: LD_INT 1
32491: PUSH
32492: EMPTY
32493: LIST
32494: LIST
32495: PUSH
32496: LD_INT 2
32498: NEG
32499: PUSH
32500: LD_INT 1
32502: NEG
32503: PUSH
32504: EMPTY
32505: LIST
32506: LIST
32507: PUSH
32508: LD_INT 2
32510: NEG
32511: PUSH
32512: LD_INT 2
32514: NEG
32515: PUSH
32516: EMPTY
32517: LIST
32518: LIST
32519: PUSH
32520: LD_INT 2
32522: NEG
32523: PUSH
32524: LD_INT 3
32526: NEG
32527: PUSH
32528: EMPTY
32529: LIST
32530: LIST
32531: PUSH
32532: LD_INT 1
32534: NEG
32535: PUSH
32536: LD_INT 3
32538: NEG
32539: PUSH
32540: EMPTY
32541: LIST
32542: LIST
32543: PUSH
32544: LD_INT 0
32546: PUSH
32547: LD_INT 3
32549: NEG
32550: PUSH
32551: EMPTY
32552: LIST
32553: LIST
32554: PUSH
32555: LD_INT 1
32557: PUSH
32558: LD_INT 2
32560: NEG
32561: PUSH
32562: EMPTY
32563: LIST
32564: LIST
32565: PUSH
32566: LD_INT 3
32568: PUSH
32569: LD_INT 2
32571: PUSH
32572: EMPTY
32573: LIST
32574: LIST
32575: PUSH
32576: LD_INT 3
32578: PUSH
32579: LD_INT 3
32581: PUSH
32582: EMPTY
32583: LIST
32584: LIST
32585: PUSH
32586: LD_INT 2
32588: PUSH
32589: LD_INT 3
32591: PUSH
32592: EMPTY
32593: LIST
32594: LIST
32595: PUSH
32596: LD_INT 1
32598: PUSH
32599: LD_INT 3
32601: PUSH
32602: EMPTY
32603: LIST
32604: LIST
32605: PUSH
32606: LD_INT 0
32608: PUSH
32609: LD_INT 3
32611: PUSH
32612: EMPTY
32613: LIST
32614: LIST
32615: PUSH
32616: LD_INT 1
32618: NEG
32619: PUSH
32620: LD_INT 2
32622: PUSH
32623: EMPTY
32624: LIST
32625: LIST
32626: PUSH
32627: LD_INT 3
32629: NEG
32630: PUSH
32631: LD_INT 2
32633: NEG
32634: PUSH
32635: EMPTY
32636: LIST
32637: LIST
32638: PUSH
32639: LD_INT 3
32641: NEG
32642: PUSH
32643: LD_INT 3
32645: NEG
32646: PUSH
32647: EMPTY
32648: LIST
32649: LIST
32650: PUSH
32651: EMPTY
32652: LIST
32653: LIST
32654: LIST
32655: LIST
32656: LIST
32657: LIST
32658: LIST
32659: LIST
32660: LIST
32661: LIST
32662: LIST
32663: LIST
32664: LIST
32665: LIST
32666: LIST
32667: LIST
32668: LIST
32669: LIST
32670: LIST
32671: LIST
32672: LIST
32673: LIST
32674: LIST
32675: LIST
32676: LIST
32677: LIST
32678: LIST
32679: LIST
32680: LIST
32681: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
32682: LD_ADDR_VAR 0 43
32686: PUSH
32687: LD_INT 0
32689: PUSH
32690: LD_INT 0
32692: PUSH
32693: EMPTY
32694: LIST
32695: LIST
32696: PUSH
32697: LD_INT 0
32699: PUSH
32700: LD_INT 1
32702: NEG
32703: PUSH
32704: EMPTY
32705: LIST
32706: LIST
32707: PUSH
32708: LD_INT 1
32710: PUSH
32711: LD_INT 0
32713: PUSH
32714: EMPTY
32715: LIST
32716: LIST
32717: PUSH
32718: LD_INT 1
32720: PUSH
32721: LD_INT 1
32723: PUSH
32724: EMPTY
32725: LIST
32726: LIST
32727: PUSH
32728: LD_INT 0
32730: PUSH
32731: LD_INT 1
32733: PUSH
32734: EMPTY
32735: LIST
32736: LIST
32737: PUSH
32738: LD_INT 1
32740: NEG
32741: PUSH
32742: LD_INT 0
32744: PUSH
32745: EMPTY
32746: LIST
32747: LIST
32748: PUSH
32749: LD_INT 1
32751: NEG
32752: PUSH
32753: LD_INT 1
32755: NEG
32756: PUSH
32757: EMPTY
32758: LIST
32759: LIST
32760: PUSH
32761: LD_INT 1
32763: NEG
32764: PUSH
32765: LD_INT 2
32767: NEG
32768: PUSH
32769: EMPTY
32770: LIST
32771: LIST
32772: PUSH
32773: LD_INT 0
32775: PUSH
32776: LD_INT 2
32778: NEG
32779: PUSH
32780: EMPTY
32781: LIST
32782: LIST
32783: PUSH
32784: LD_INT 1
32786: PUSH
32787: LD_INT 1
32789: NEG
32790: PUSH
32791: EMPTY
32792: LIST
32793: LIST
32794: PUSH
32795: LD_INT 2
32797: PUSH
32798: LD_INT 0
32800: PUSH
32801: EMPTY
32802: LIST
32803: LIST
32804: PUSH
32805: LD_INT 2
32807: PUSH
32808: LD_INT 1
32810: PUSH
32811: EMPTY
32812: LIST
32813: LIST
32814: PUSH
32815: LD_INT 1
32817: PUSH
32818: LD_INT 2
32820: PUSH
32821: EMPTY
32822: LIST
32823: LIST
32824: PUSH
32825: LD_INT 0
32827: PUSH
32828: LD_INT 2
32830: PUSH
32831: EMPTY
32832: LIST
32833: LIST
32834: PUSH
32835: LD_INT 1
32837: NEG
32838: PUSH
32839: LD_INT 1
32841: PUSH
32842: EMPTY
32843: LIST
32844: LIST
32845: PUSH
32846: LD_INT 2
32848: NEG
32849: PUSH
32850: LD_INT 0
32852: PUSH
32853: EMPTY
32854: LIST
32855: LIST
32856: PUSH
32857: LD_INT 2
32859: NEG
32860: PUSH
32861: LD_INT 1
32863: NEG
32864: PUSH
32865: EMPTY
32866: LIST
32867: LIST
32868: PUSH
32869: LD_INT 1
32871: NEG
32872: PUSH
32873: LD_INT 3
32875: NEG
32876: PUSH
32877: EMPTY
32878: LIST
32879: LIST
32880: PUSH
32881: LD_INT 0
32883: PUSH
32884: LD_INT 3
32886: NEG
32887: PUSH
32888: EMPTY
32889: LIST
32890: LIST
32891: PUSH
32892: LD_INT 1
32894: PUSH
32895: LD_INT 2
32897: NEG
32898: PUSH
32899: EMPTY
32900: LIST
32901: LIST
32902: PUSH
32903: LD_INT 2
32905: PUSH
32906: LD_INT 1
32908: NEG
32909: PUSH
32910: EMPTY
32911: LIST
32912: LIST
32913: PUSH
32914: LD_INT 3
32916: PUSH
32917: LD_INT 0
32919: PUSH
32920: EMPTY
32921: LIST
32922: LIST
32923: PUSH
32924: LD_INT 3
32926: PUSH
32927: LD_INT 1
32929: PUSH
32930: EMPTY
32931: LIST
32932: LIST
32933: PUSH
32934: LD_INT 1
32936: PUSH
32937: LD_INT 3
32939: PUSH
32940: EMPTY
32941: LIST
32942: LIST
32943: PUSH
32944: LD_INT 0
32946: PUSH
32947: LD_INT 3
32949: PUSH
32950: EMPTY
32951: LIST
32952: LIST
32953: PUSH
32954: LD_INT 1
32956: NEG
32957: PUSH
32958: LD_INT 2
32960: PUSH
32961: EMPTY
32962: LIST
32963: LIST
32964: PUSH
32965: LD_INT 2
32967: NEG
32968: PUSH
32969: LD_INT 1
32971: PUSH
32972: EMPTY
32973: LIST
32974: LIST
32975: PUSH
32976: LD_INT 3
32978: NEG
32979: PUSH
32980: LD_INT 0
32982: PUSH
32983: EMPTY
32984: LIST
32985: LIST
32986: PUSH
32987: LD_INT 3
32989: NEG
32990: PUSH
32991: LD_INT 1
32993: NEG
32994: PUSH
32995: EMPTY
32996: LIST
32997: LIST
32998: PUSH
32999: EMPTY
33000: LIST
33001: LIST
33002: LIST
33003: LIST
33004: LIST
33005: LIST
33006: LIST
33007: LIST
33008: LIST
33009: LIST
33010: LIST
33011: LIST
33012: LIST
33013: LIST
33014: LIST
33015: LIST
33016: LIST
33017: LIST
33018: LIST
33019: LIST
33020: LIST
33021: LIST
33022: LIST
33023: LIST
33024: LIST
33025: LIST
33026: LIST
33027: LIST
33028: LIST
33029: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
33030: LD_ADDR_VAR 0 44
33034: PUSH
33035: LD_INT 0
33037: PUSH
33038: LD_INT 0
33040: PUSH
33041: EMPTY
33042: LIST
33043: LIST
33044: PUSH
33045: LD_INT 0
33047: PUSH
33048: LD_INT 1
33050: NEG
33051: PUSH
33052: EMPTY
33053: LIST
33054: LIST
33055: PUSH
33056: LD_INT 1
33058: PUSH
33059: LD_INT 0
33061: PUSH
33062: EMPTY
33063: LIST
33064: LIST
33065: PUSH
33066: LD_INT 1
33068: PUSH
33069: LD_INT 1
33071: PUSH
33072: EMPTY
33073: LIST
33074: LIST
33075: PUSH
33076: LD_INT 0
33078: PUSH
33079: LD_INT 1
33081: PUSH
33082: EMPTY
33083: LIST
33084: LIST
33085: PUSH
33086: LD_INT 1
33088: NEG
33089: PUSH
33090: LD_INT 0
33092: PUSH
33093: EMPTY
33094: LIST
33095: LIST
33096: PUSH
33097: LD_INT 1
33099: NEG
33100: PUSH
33101: LD_INT 1
33103: NEG
33104: PUSH
33105: EMPTY
33106: LIST
33107: LIST
33108: PUSH
33109: LD_INT 1
33111: NEG
33112: PUSH
33113: LD_INT 2
33115: NEG
33116: PUSH
33117: EMPTY
33118: LIST
33119: LIST
33120: PUSH
33121: LD_INT 1
33123: PUSH
33124: LD_INT 1
33126: NEG
33127: PUSH
33128: EMPTY
33129: LIST
33130: LIST
33131: PUSH
33132: LD_INT 2
33134: PUSH
33135: LD_INT 0
33137: PUSH
33138: EMPTY
33139: LIST
33140: LIST
33141: PUSH
33142: LD_INT 2
33144: PUSH
33145: LD_INT 1
33147: PUSH
33148: EMPTY
33149: LIST
33150: LIST
33151: PUSH
33152: LD_INT 2
33154: PUSH
33155: LD_INT 2
33157: PUSH
33158: EMPTY
33159: LIST
33160: LIST
33161: PUSH
33162: LD_INT 1
33164: PUSH
33165: LD_INT 2
33167: PUSH
33168: EMPTY
33169: LIST
33170: LIST
33171: PUSH
33172: LD_INT 1
33174: NEG
33175: PUSH
33176: LD_INT 1
33178: PUSH
33179: EMPTY
33180: LIST
33181: LIST
33182: PUSH
33183: LD_INT 2
33185: NEG
33186: PUSH
33187: LD_INT 0
33189: PUSH
33190: EMPTY
33191: LIST
33192: LIST
33193: PUSH
33194: LD_INT 2
33196: NEG
33197: PUSH
33198: LD_INT 1
33200: NEG
33201: PUSH
33202: EMPTY
33203: LIST
33204: LIST
33205: PUSH
33206: LD_INT 2
33208: NEG
33209: PUSH
33210: LD_INT 2
33212: NEG
33213: PUSH
33214: EMPTY
33215: LIST
33216: LIST
33217: PUSH
33218: LD_INT 2
33220: NEG
33221: PUSH
33222: LD_INT 3
33224: NEG
33225: PUSH
33226: EMPTY
33227: LIST
33228: LIST
33229: PUSH
33230: LD_INT 2
33232: PUSH
33233: LD_INT 1
33235: NEG
33236: PUSH
33237: EMPTY
33238: LIST
33239: LIST
33240: PUSH
33241: LD_INT 3
33243: PUSH
33244: LD_INT 0
33246: PUSH
33247: EMPTY
33248: LIST
33249: LIST
33250: PUSH
33251: LD_INT 3
33253: PUSH
33254: LD_INT 1
33256: PUSH
33257: EMPTY
33258: LIST
33259: LIST
33260: PUSH
33261: LD_INT 3
33263: PUSH
33264: LD_INT 2
33266: PUSH
33267: EMPTY
33268: LIST
33269: LIST
33270: PUSH
33271: LD_INT 3
33273: PUSH
33274: LD_INT 3
33276: PUSH
33277: EMPTY
33278: LIST
33279: LIST
33280: PUSH
33281: LD_INT 2
33283: PUSH
33284: LD_INT 3
33286: PUSH
33287: EMPTY
33288: LIST
33289: LIST
33290: PUSH
33291: LD_INT 2
33293: NEG
33294: PUSH
33295: LD_INT 1
33297: PUSH
33298: EMPTY
33299: LIST
33300: LIST
33301: PUSH
33302: LD_INT 3
33304: NEG
33305: PUSH
33306: LD_INT 0
33308: PUSH
33309: EMPTY
33310: LIST
33311: LIST
33312: PUSH
33313: LD_INT 3
33315: NEG
33316: PUSH
33317: LD_INT 1
33319: NEG
33320: PUSH
33321: EMPTY
33322: LIST
33323: LIST
33324: PUSH
33325: LD_INT 3
33327: NEG
33328: PUSH
33329: LD_INT 2
33331: NEG
33332: PUSH
33333: EMPTY
33334: LIST
33335: LIST
33336: PUSH
33337: LD_INT 3
33339: NEG
33340: PUSH
33341: LD_INT 3
33343: NEG
33344: PUSH
33345: EMPTY
33346: LIST
33347: LIST
33348: PUSH
33349: EMPTY
33350: LIST
33351: LIST
33352: LIST
33353: LIST
33354: LIST
33355: LIST
33356: LIST
33357: LIST
33358: LIST
33359: LIST
33360: LIST
33361: LIST
33362: LIST
33363: LIST
33364: LIST
33365: LIST
33366: LIST
33367: LIST
33368: LIST
33369: LIST
33370: LIST
33371: LIST
33372: LIST
33373: LIST
33374: LIST
33375: LIST
33376: LIST
33377: LIST
33378: LIST
33379: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
33380: LD_ADDR_VAR 0 45
33384: PUSH
33385: LD_INT 0
33387: PUSH
33388: LD_INT 0
33390: PUSH
33391: EMPTY
33392: LIST
33393: LIST
33394: PUSH
33395: LD_INT 0
33397: PUSH
33398: LD_INT 1
33400: NEG
33401: PUSH
33402: EMPTY
33403: LIST
33404: LIST
33405: PUSH
33406: LD_INT 1
33408: PUSH
33409: LD_INT 0
33411: PUSH
33412: EMPTY
33413: LIST
33414: LIST
33415: PUSH
33416: LD_INT 1
33418: PUSH
33419: LD_INT 1
33421: PUSH
33422: EMPTY
33423: LIST
33424: LIST
33425: PUSH
33426: LD_INT 0
33428: PUSH
33429: LD_INT 1
33431: PUSH
33432: EMPTY
33433: LIST
33434: LIST
33435: PUSH
33436: LD_INT 1
33438: NEG
33439: PUSH
33440: LD_INT 0
33442: PUSH
33443: EMPTY
33444: LIST
33445: LIST
33446: PUSH
33447: LD_INT 1
33449: NEG
33450: PUSH
33451: LD_INT 1
33453: NEG
33454: PUSH
33455: EMPTY
33456: LIST
33457: LIST
33458: PUSH
33459: LD_INT 1
33461: NEG
33462: PUSH
33463: LD_INT 2
33465: NEG
33466: PUSH
33467: EMPTY
33468: LIST
33469: LIST
33470: PUSH
33471: LD_INT 0
33473: PUSH
33474: LD_INT 2
33476: NEG
33477: PUSH
33478: EMPTY
33479: LIST
33480: LIST
33481: PUSH
33482: LD_INT 1
33484: PUSH
33485: LD_INT 1
33487: NEG
33488: PUSH
33489: EMPTY
33490: LIST
33491: LIST
33492: PUSH
33493: LD_INT 2
33495: PUSH
33496: LD_INT 1
33498: PUSH
33499: EMPTY
33500: LIST
33501: LIST
33502: PUSH
33503: LD_INT 2
33505: PUSH
33506: LD_INT 2
33508: PUSH
33509: EMPTY
33510: LIST
33511: LIST
33512: PUSH
33513: LD_INT 1
33515: PUSH
33516: LD_INT 2
33518: PUSH
33519: EMPTY
33520: LIST
33521: LIST
33522: PUSH
33523: LD_INT 0
33525: PUSH
33526: LD_INT 2
33528: PUSH
33529: EMPTY
33530: LIST
33531: LIST
33532: PUSH
33533: LD_INT 1
33535: NEG
33536: PUSH
33537: LD_INT 1
33539: PUSH
33540: EMPTY
33541: LIST
33542: LIST
33543: PUSH
33544: LD_INT 2
33546: NEG
33547: PUSH
33548: LD_INT 1
33550: NEG
33551: PUSH
33552: EMPTY
33553: LIST
33554: LIST
33555: PUSH
33556: LD_INT 2
33558: NEG
33559: PUSH
33560: LD_INT 2
33562: NEG
33563: PUSH
33564: EMPTY
33565: LIST
33566: LIST
33567: PUSH
33568: LD_INT 2
33570: NEG
33571: PUSH
33572: LD_INT 3
33574: NEG
33575: PUSH
33576: EMPTY
33577: LIST
33578: LIST
33579: PUSH
33580: LD_INT 1
33582: NEG
33583: PUSH
33584: LD_INT 3
33586: NEG
33587: PUSH
33588: EMPTY
33589: LIST
33590: LIST
33591: PUSH
33592: LD_INT 0
33594: PUSH
33595: LD_INT 3
33597: NEG
33598: PUSH
33599: EMPTY
33600: LIST
33601: LIST
33602: PUSH
33603: LD_INT 1
33605: PUSH
33606: LD_INT 2
33608: NEG
33609: PUSH
33610: EMPTY
33611: LIST
33612: LIST
33613: PUSH
33614: LD_INT 3
33616: PUSH
33617: LD_INT 2
33619: PUSH
33620: EMPTY
33621: LIST
33622: LIST
33623: PUSH
33624: LD_INT 3
33626: PUSH
33627: LD_INT 3
33629: PUSH
33630: EMPTY
33631: LIST
33632: LIST
33633: PUSH
33634: LD_INT 2
33636: PUSH
33637: LD_INT 3
33639: PUSH
33640: EMPTY
33641: LIST
33642: LIST
33643: PUSH
33644: LD_INT 1
33646: PUSH
33647: LD_INT 3
33649: PUSH
33650: EMPTY
33651: LIST
33652: LIST
33653: PUSH
33654: LD_INT 0
33656: PUSH
33657: LD_INT 3
33659: PUSH
33660: EMPTY
33661: LIST
33662: LIST
33663: PUSH
33664: LD_INT 1
33666: NEG
33667: PUSH
33668: LD_INT 2
33670: PUSH
33671: EMPTY
33672: LIST
33673: LIST
33674: PUSH
33675: LD_INT 3
33677: NEG
33678: PUSH
33679: LD_INT 2
33681: NEG
33682: PUSH
33683: EMPTY
33684: LIST
33685: LIST
33686: PUSH
33687: LD_INT 3
33689: NEG
33690: PUSH
33691: LD_INT 3
33693: NEG
33694: PUSH
33695: EMPTY
33696: LIST
33697: LIST
33698: PUSH
33699: EMPTY
33700: LIST
33701: LIST
33702: LIST
33703: LIST
33704: LIST
33705: LIST
33706: LIST
33707: LIST
33708: LIST
33709: LIST
33710: LIST
33711: LIST
33712: LIST
33713: LIST
33714: LIST
33715: LIST
33716: LIST
33717: LIST
33718: LIST
33719: LIST
33720: LIST
33721: LIST
33722: LIST
33723: LIST
33724: LIST
33725: LIST
33726: LIST
33727: LIST
33728: LIST
33729: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
33730: LD_ADDR_VAR 0 46
33734: PUSH
33735: LD_INT 0
33737: PUSH
33738: LD_INT 0
33740: PUSH
33741: EMPTY
33742: LIST
33743: LIST
33744: PUSH
33745: LD_INT 0
33747: PUSH
33748: LD_INT 1
33750: NEG
33751: PUSH
33752: EMPTY
33753: LIST
33754: LIST
33755: PUSH
33756: LD_INT 1
33758: PUSH
33759: LD_INT 0
33761: PUSH
33762: EMPTY
33763: LIST
33764: LIST
33765: PUSH
33766: LD_INT 1
33768: PUSH
33769: LD_INT 1
33771: PUSH
33772: EMPTY
33773: LIST
33774: LIST
33775: PUSH
33776: LD_INT 0
33778: PUSH
33779: LD_INT 1
33781: PUSH
33782: EMPTY
33783: LIST
33784: LIST
33785: PUSH
33786: LD_INT 1
33788: NEG
33789: PUSH
33790: LD_INT 0
33792: PUSH
33793: EMPTY
33794: LIST
33795: LIST
33796: PUSH
33797: LD_INT 1
33799: NEG
33800: PUSH
33801: LD_INT 1
33803: NEG
33804: PUSH
33805: EMPTY
33806: LIST
33807: LIST
33808: PUSH
33809: LD_INT 1
33811: NEG
33812: PUSH
33813: LD_INT 2
33815: NEG
33816: PUSH
33817: EMPTY
33818: LIST
33819: LIST
33820: PUSH
33821: LD_INT 0
33823: PUSH
33824: LD_INT 2
33826: NEG
33827: PUSH
33828: EMPTY
33829: LIST
33830: LIST
33831: PUSH
33832: LD_INT 1
33834: PUSH
33835: LD_INT 1
33837: NEG
33838: PUSH
33839: EMPTY
33840: LIST
33841: LIST
33842: PUSH
33843: LD_INT 2
33845: PUSH
33846: LD_INT 0
33848: PUSH
33849: EMPTY
33850: LIST
33851: LIST
33852: PUSH
33853: LD_INT 2
33855: PUSH
33856: LD_INT 1
33858: PUSH
33859: EMPTY
33860: LIST
33861: LIST
33862: PUSH
33863: LD_INT 1
33865: PUSH
33866: LD_INT 2
33868: PUSH
33869: EMPTY
33870: LIST
33871: LIST
33872: PUSH
33873: LD_INT 0
33875: PUSH
33876: LD_INT 2
33878: PUSH
33879: EMPTY
33880: LIST
33881: LIST
33882: PUSH
33883: LD_INT 1
33885: NEG
33886: PUSH
33887: LD_INT 1
33889: PUSH
33890: EMPTY
33891: LIST
33892: LIST
33893: PUSH
33894: LD_INT 2
33896: NEG
33897: PUSH
33898: LD_INT 0
33900: PUSH
33901: EMPTY
33902: LIST
33903: LIST
33904: PUSH
33905: LD_INT 2
33907: NEG
33908: PUSH
33909: LD_INT 1
33911: NEG
33912: PUSH
33913: EMPTY
33914: LIST
33915: LIST
33916: PUSH
33917: LD_INT 1
33919: NEG
33920: PUSH
33921: LD_INT 3
33923: NEG
33924: PUSH
33925: EMPTY
33926: LIST
33927: LIST
33928: PUSH
33929: LD_INT 0
33931: PUSH
33932: LD_INT 3
33934: NEG
33935: PUSH
33936: EMPTY
33937: LIST
33938: LIST
33939: PUSH
33940: LD_INT 1
33942: PUSH
33943: LD_INT 2
33945: NEG
33946: PUSH
33947: EMPTY
33948: LIST
33949: LIST
33950: PUSH
33951: LD_INT 2
33953: PUSH
33954: LD_INT 1
33956: NEG
33957: PUSH
33958: EMPTY
33959: LIST
33960: LIST
33961: PUSH
33962: LD_INT 3
33964: PUSH
33965: LD_INT 0
33967: PUSH
33968: EMPTY
33969: LIST
33970: LIST
33971: PUSH
33972: LD_INT 3
33974: PUSH
33975: LD_INT 1
33977: PUSH
33978: EMPTY
33979: LIST
33980: LIST
33981: PUSH
33982: LD_INT 1
33984: PUSH
33985: LD_INT 3
33987: PUSH
33988: EMPTY
33989: LIST
33990: LIST
33991: PUSH
33992: LD_INT 0
33994: PUSH
33995: LD_INT 3
33997: PUSH
33998: EMPTY
33999: LIST
34000: LIST
34001: PUSH
34002: LD_INT 1
34004: NEG
34005: PUSH
34006: LD_INT 2
34008: PUSH
34009: EMPTY
34010: LIST
34011: LIST
34012: PUSH
34013: LD_INT 2
34015: NEG
34016: PUSH
34017: LD_INT 1
34019: PUSH
34020: EMPTY
34021: LIST
34022: LIST
34023: PUSH
34024: LD_INT 3
34026: NEG
34027: PUSH
34028: LD_INT 0
34030: PUSH
34031: EMPTY
34032: LIST
34033: LIST
34034: PUSH
34035: LD_INT 3
34037: NEG
34038: PUSH
34039: LD_INT 1
34041: NEG
34042: PUSH
34043: EMPTY
34044: LIST
34045: LIST
34046: PUSH
34047: EMPTY
34048: LIST
34049: LIST
34050: LIST
34051: LIST
34052: LIST
34053: LIST
34054: LIST
34055: LIST
34056: LIST
34057: LIST
34058: LIST
34059: LIST
34060: LIST
34061: LIST
34062: LIST
34063: LIST
34064: LIST
34065: LIST
34066: LIST
34067: LIST
34068: LIST
34069: LIST
34070: LIST
34071: LIST
34072: LIST
34073: LIST
34074: LIST
34075: LIST
34076: LIST
34077: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34078: LD_ADDR_VAR 0 47
34082: PUSH
34083: LD_INT 0
34085: PUSH
34086: LD_INT 0
34088: PUSH
34089: EMPTY
34090: LIST
34091: LIST
34092: PUSH
34093: LD_INT 0
34095: PUSH
34096: LD_INT 1
34098: NEG
34099: PUSH
34100: EMPTY
34101: LIST
34102: LIST
34103: PUSH
34104: LD_INT 1
34106: PUSH
34107: LD_INT 0
34109: PUSH
34110: EMPTY
34111: LIST
34112: LIST
34113: PUSH
34114: LD_INT 1
34116: PUSH
34117: LD_INT 1
34119: PUSH
34120: EMPTY
34121: LIST
34122: LIST
34123: PUSH
34124: LD_INT 0
34126: PUSH
34127: LD_INT 1
34129: PUSH
34130: EMPTY
34131: LIST
34132: LIST
34133: PUSH
34134: LD_INT 1
34136: NEG
34137: PUSH
34138: LD_INT 0
34140: PUSH
34141: EMPTY
34142: LIST
34143: LIST
34144: PUSH
34145: LD_INT 1
34147: NEG
34148: PUSH
34149: LD_INT 1
34151: NEG
34152: PUSH
34153: EMPTY
34154: LIST
34155: LIST
34156: PUSH
34157: LD_INT 1
34159: NEG
34160: PUSH
34161: LD_INT 2
34163: NEG
34164: PUSH
34165: EMPTY
34166: LIST
34167: LIST
34168: PUSH
34169: LD_INT 0
34171: PUSH
34172: LD_INT 2
34174: NEG
34175: PUSH
34176: EMPTY
34177: LIST
34178: LIST
34179: PUSH
34180: LD_INT 1
34182: PUSH
34183: LD_INT 1
34185: NEG
34186: PUSH
34187: EMPTY
34188: LIST
34189: LIST
34190: PUSH
34191: LD_INT 2
34193: NEG
34194: PUSH
34195: LD_INT 1
34197: NEG
34198: PUSH
34199: EMPTY
34200: LIST
34201: LIST
34202: PUSH
34203: LD_INT 2
34205: NEG
34206: PUSH
34207: LD_INT 2
34209: NEG
34210: PUSH
34211: EMPTY
34212: LIST
34213: LIST
34214: PUSH
34215: EMPTY
34216: LIST
34217: LIST
34218: LIST
34219: LIST
34220: LIST
34221: LIST
34222: LIST
34223: LIST
34224: LIST
34225: LIST
34226: LIST
34227: LIST
34228: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
34229: LD_ADDR_VAR 0 48
34233: PUSH
34234: LD_INT 0
34236: PUSH
34237: LD_INT 0
34239: PUSH
34240: EMPTY
34241: LIST
34242: LIST
34243: PUSH
34244: LD_INT 0
34246: PUSH
34247: LD_INT 1
34249: NEG
34250: PUSH
34251: EMPTY
34252: LIST
34253: LIST
34254: PUSH
34255: LD_INT 1
34257: PUSH
34258: LD_INT 0
34260: PUSH
34261: EMPTY
34262: LIST
34263: LIST
34264: PUSH
34265: LD_INT 1
34267: PUSH
34268: LD_INT 1
34270: PUSH
34271: EMPTY
34272: LIST
34273: LIST
34274: PUSH
34275: LD_INT 0
34277: PUSH
34278: LD_INT 1
34280: PUSH
34281: EMPTY
34282: LIST
34283: LIST
34284: PUSH
34285: LD_INT 1
34287: NEG
34288: PUSH
34289: LD_INT 0
34291: PUSH
34292: EMPTY
34293: LIST
34294: LIST
34295: PUSH
34296: LD_INT 1
34298: NEG
34299: PUSH
34300: LD_INT 1
34302: NEG
34303: PUSH
34304: EMPTY
34305: LIST
34306: LIST
34307: PUSH
34308: LD_INT 1
34310: NEG
34311: PUSH
34312: LD_INT 2
34314: NEG
34315: PUSH
34316: EMPTY
34317: LIST
34318: LIST
34319: PUSH
34320: LD_INT 0
34322: PUSH
34323: LD_INT 2
34325: NEG
34326: PUSH
34327: EMPTY
34328: LIST
34329: LIST
34330: PUSH
34331: LD_INT 1
34333: PUSH
34334: LD_INT 1
34336: NEG
34337: PUSH
34338: EMPTY
34339: LIST
34340: LIST
34341: PUSH
34342: LD_INT 2
34344: PUSH
34345: LD_INT 0
34347: PUSH
34348: EMPTY
34349: LIST
34350: LIST
34351: PUSH
34352: LD_INT 2
34354: PUSH
34355: LD_INT 1
34357: PUSH
34358: EMPTY
34359: LIST
34360: LIST
34361: PUSH
34362: EMPTY
34363: LIST
34364: LIST
34365: LIST
34366: LIST
34367: LIST
34368: LIST
34369: LIST
34370: LIST
34371: LIST
34372: LIST
34373: LIST
34374: LIST
34375: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
34376: LD_ADDR_VAR 0 49
34380: PUSH
34381: LD_INT 0
34383: PUSH
34384: LD_INT 0
34386: PUSH
34387: EMPTY
34388: LIST
34389: LIST
34390: PUSH
34391: LD_INT 0
34393: PUSH
34394: LD_INT 1
34396: NEG
34397: PUSH
34398: EMPTY
34399: LIST
34400: LIST
34401: PUSH
34402: LD_INT 1
34404: PUSH
34405: LD_INT 0
34407: PUSH
34408: EMPTY
34409: LIST
34410: LIST
34411: PUSH
34412: LD_INT 1
34414: PUSH
34415: LD_INT 1
34417: PUSH
34418: EMPTY
34419: LIST
34420: LIST
34421: PUSH
34422: LD_INT 0
34424: PUSH
34425: LD_INT 1
34427: PUSH
34428: EMPTY
34429: LIST
34430: LIST
34431: PUSH
34432: LD_INT 1
34434: NEG
34435: PUSH
34436: LD_INT 0
34438: PUSH
34439: EMPTY
34440: LIST
34441: LIST
34442: PUSH
34443: LD_INT 1
34445: NEG
34446: PUSH
34447: LD_INT 1
34449: NEG
34450: PUSH
34451: EMPTY
34452: LIST
34453: LIST
34454: PUSH
34455: LD_INT 1
34457: PUSH
34458: LD_INT 1
34460: NEG
34461: PUSH
34462: EMPTY
34463: LIST
34464: LIST
34465: PUSH
34466: LD_INT 2
34468: PUSH
34469: LD_INT 0
34471: PUSH
34472: EMPTY
34473: LIST
34474: LIST
34475: PUSH
34476: LD_INT 2
34478: PUSH
34479: LD_INT 1
34481: PUSH
34482: EMPTY
34483: LIST
34484: LIST
34485: PUSH
34486: LD_INT 2
34488: PUSH
34489: LD_INT 2
34491: PUSH
34492: EMPTY
34493: LIST
34494: LIST
34495: PUSH
34496: LD_INT 1
34498: PUSH
34499: LD_INT 2
34501: PUSH
34502: EMPTY
34503: LIST
34504: LIST
34505: PUSH
34506: EMPTY
34507: LIST
34508: LIST
34509: LIST
34510: LIST
34511: LIST
34512: LIST
34513: LIST
34514: LIST
34515: LIST
34516: LIST
34517: LIST
34518: LIST
34519: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
34520: LD_ADDR_VAR 0 50
34524: PUSH
34525: LD_INT 0
34527: PUSH
34528: LD_INT 0
34530: PUSH
34531: EMPTY
34532: LIST
34533: LIST
34534: PUSH
34535: LD_INT 0
34537: PUSH
34538: LD_INT 1
34540: NEG
34541: PUSH
34542: EMPTY
34543: LIST
34544: LIST
34545: PUSH
34546: LD_INT 1
34548: PUSH
34549: LD_INT 0
34551: PUSH
34552: EMPTY
34553: LIST
34554: LIST
34555: PUSH
34556: LD_INT 1
34558: PUSH
34559: LD_INT 1
34561: PUSH
34562: EMPTY
34563: LIST
34564: LIST
34565: PUSH
34566: LD_INT 0
34568: PUSH
34569: LD_INT 1
34571: PUSH
34572: EMPTY
34573: LIST
34574: LIST
34575: PUSH
34576: LD_INT 1
34578: NEG
34579: PUSH
34580: LD_INT 0
34582: PUSH
34583: EMPTY
34584: LIST
34585: LIST
34586: PUSH
34587: LD_INT 1
34589: NEG
34590: PUSH
34591: LD_INT 1
34593: NEG
34594: PUSH
34595: EMPTY
34596: LIST
34597: LIST
34598: PUSH
34599: LD_INT 2
34601: PUSH
34602: LD_INT 1
34604: PUSH
34605: EMPTY
34606: LIST
34607: LIST
34608: PUSH
34609: LD_INT 2
34611: PUSH
34612: LD_INT 2
34614: PUSH
34615: EMPTY
34616: LIST
34617: LIST
34618: PUSH
34619: LD_INT 1
34621: PUSH
34622: LD_INT 2
34624: PUSH
34625: EMPTY
34626: LIST
34627: LIST
34628: PUSH
34629: LD_INT 0
34631: PUSH
34632: LD_INT 2
34634: PUSH
34635: EMPTY
34636: LIST
34637: LIST
34638: PUSH
34639: LD_INT 1
34641: NEG
34642: PUSH
34643: LD_INT 1
34645: PUSH
34646: EMPTY
34647: LIST
34648: LIST
34649: PUSH
34650: EMPTY
34651: LIST
34652: LIST
34653: LIST
34654: LIST
34655: LIST
34656: LIST
34657: LIST
34658: LIST
34659: LIST
34660: LIST
34661: LIST
34662: LIST
34663: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
34664: LD_ADDR_VAR 0 51
34668: PUSH
34669: LD_INT 0
34671: PUSH
34672: LD_INT 0
34674: PUSH
34675: EMPTY
34676: LIST
34677: LIST
34678: PUSH
34679: LD_INT 0
34681: PUSH
34682: LD_INT 1
34684: NEG
34685: PUSH
34686: EMPTY
34687: LIST
34688: LIST
34689: PUSH
34690: LD_INT 1
34692: PUSH
34693: LD_INT 0
34695: PUSH
34696: EMPTY
34697: LIST
34698: LIST
34699: PUSH
34700: LD_INT 1
34702: PUSH
34703: LD_INT 1
34705: PUSH
34706: EMPTY
34707: LIST
34708: LIST
34709: PUSH
34710: LD_INT 0
34712: PUSH
34713: LD_INT 1
34715: PUSH
34716: EMPTY
34717: LIST
34718: LIST
34719: PUSH
34720: LD_INT 1
34722: NEG
34723: PUSH
34724: LD_INT 0
34726: PUSH
34727: EMPTY
34728: LIST
34729: LIST
34730: PUSH
34731: LD_INT 1
34733: NEG
34734: PUSH
34735: LD_INT 1
34737: NEG
34738: PUSH
34739: EMPTY
34740: LIST
34741: LIST
34742: PUSH
34743: LD_INT 1
34745: PUSH
34746: LD_INT 2
34748: PUSH
34749: EMPTY
34750: LIST
34751: LIST
34752: PUSH
34753: LD_INT 0
34755: PUSH
34756: LD_INT 2
34758: PUSH
34759: EMPTY
34760: LIST
34761: LIST
34762: PUSH
34763: LD_INT 1
34765: NEG
34766: PUSH
34767: LD_INT 1
34769: PUSH
34770: EMPTY
34771: LIST
34772: LIST
34773: PUSH
34774: LD_INT 2
34776: NEG
34777: PUSH
34778: LD_INT 0
34780: PUSH
34781: EMPTY
34782: LIST
34783: LIST
34784: PUSH
34785: LD_INT 2
34787: NEG
34788: PUSH
34789: LD_INT 1
34791: NEG
34792: PUSH
34793: EMPTY
34794: LIST
34795: LIST
34796: PUSH
34797: EMPTY
34798: LIST
34799: LIST
34800: LIST
34801: LIST
34802: LIST
34803: LIST
34804: LIST
34805: LIST
34806: LIST
34807: LIST
34808: LIST
34809: LIST
34810: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34811: LD_ADDR_VAR 0 52
34815: PUSH
34816: LD_INT 0
34818: PUSH
34819: LD_INT 0
34821: PUSH
34822: EMPTY
34823: LIST
34824: LIST
34825: PUSH
34826: LD_INT 0
34828: PUSH
34829: LD_INT 1
34831: NEG
34832: PUSH
34833: EMPTY
34834: LIST
34835: LIST
34836: PUSH
34837: LD_INT 1
34839: PUSH
34840: LD_INT 0
34842: PUSH
34843: EMPTY
34844: LIST
34845: LIST
34846: PUSH
34847: LD_INT 1
34849: PUSH
34850: LD_INT 1
34852: PUSH
34853: EMPTY
34854: LIST
34855: LIST
34856: PUSH
34857: LD_INT 0
34859: PUSH
34860: LD_INT 1
34862: PUSH
34863: EMPTY
34864: LIST
34865: LIST
34866: PUSH
34867: LD_INT 1
34869: NEG
34870: PUSH
34871: LD_INT 0
34873: PUSH
34874: EMPTY
34875: LIST
34876: LIST
34877: PUSH
34878: LD_INT 1
34880: NEG
34881: PUSH
34882: LD_INT 1
34884: NEG
34885: PUSH
34886: EMPTY
34887: LIST
34888: LIST
34889: PUSH
34890: LD_INT 1
34892: NEG
34893: PUSH
34894: LD_INT 2
34896: NEG
34897: PUSH
34898: EMPTY
34899: LIST
34900: LIST
34901: PUSH
34902: LD_INT 1
34904: NEG
34905: PUSH
34906: LD_INT 1
34908: PUSH
34909: EMPTY
34910: LIST
34911: LIST
34912: PUSH
34913: LD_INT 2
34915: NEG
34916: PUSH
34917: LD_INT 0
34919: PUSH
34920: EMPTY
34921: LIST
34922: LIST
34923: PUSH
34924: LD_INT 2
34926: NEG
34927: PUSH
34928: LD_INT 1
34930: NEG
34931: PUSH
34932: EMPTY
34933: LIST
34934: LIST
34935: PUSH
34936: LD_INT 2
34938: NEG
34939: PUSH
34940: LD_INT 2
34942: NEG
34943: PUSH
34944: EMPTY
34945: LIST
34946: LIST
34947: PUSH
34948: EMPTY
34949: LIST
34950: LIST
34951: LIST
34952: LIST
34953: LIST
34954: LIST
34955: LIST
34956: LIST
34957: LIST
34958: LIST
34959: LIST
34960: LIST
34961: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34962: LD_ADDR_VAR 0 53
34966: PUSH
34967: LD_INT 0
34969: PUSH
34970: LD_INT 0
34972: PUSH
34973: EMPTY
34974: LIST
34975: LIST
34976: PUSH
34977: LD_INT 0
34979: PUSH
34980: LD_INT 1
34982: NEG
34983: PUSH
34984: EMPTY
34985: LIST
34986: LIST
34987: PUSH
34988: LD_INT 1
34990: PUSH
34991: LD_INT 0
34993: PUSH
34994: EMPTY
34995: LIST
34996: LIST
34997: PUSH
34998: LD_INT 1
35000: PUSH
35001: LD_INT 1
35003: PUSH
35004: EMPTY
35005: LIST
35006: LIST
35007: PUSH
35008: LD_INT 0
35010: PUSH
35011: LD_INT 1
35013: PUSH
35014: EMPTY
35015: LIST
35016: LIST
35017: PUSH
35018: LD_INT 1
35020: NEG
35021: PUSH
35022: LD_INT 0
35024: PUSH
35025: EMPTY
35026: LIST
35027: LIST
35028: PUSH
35029: LD_INT 1
35031: NEG
35032: PUSH
35033: LD_INT 1
35035: NEG
35036: PUSH
35037: EMPTY
35038: LIST
35039: LIST
35040: PUSH
35041: LD_INT 1
35043: NEG
35044: PUSH
35045: LD_INT 2
35047: NEG
35048: PUSH
35049: EMPTY
35050: LIST
35051: LIST
35052: PUSH
35053: LD_INT 0
35055: PUSH
35056: LD_INT 2
35058: NEG
35059: PUSH
35060: EMPTY
35061: LIST
35062: LIST
35063: PUSH
35064: LD_INT 1
35066: PUSH
35067: LD_INT 1
35069: NEG
35070: PUSH
35071: EMPTY
35072: LIST
35073: LIST
35074: PUSH
35075: LD_INT 2
35077: PUSH
35078: LD_INT 0
35080: PUSH
35081: EMPTY
35082: LIST
35083: LIST
35084: PUSH
35085: LD_INT 2
35087: PUSH
35088: LD_INT 1
35090: PUSH
35091: EMPTY
35092: LIST
35093: LIST
35094: PUSH
35095: LD_INT 2
35097: PUSH
35098: LD_INT 2
35100: PUSH
35101: EMPTY
35102: LIST
35103: LIST
35104: PUSH
35105: LD_INT 1
35107: PUSH
35108: LD_INT 2
35110: PUSH
35111: EMPTY
35112: LIST
35113: LIST
35114: PUSH
35115: LD_INT 0
35117: PUSH
35118: LD_INT 2
35120: PUSH
35121: EMPTY
35122: LIST
35123: LIST
35124: PUSH
35125: LD_INT 1
35127: NEG
35128: PUSH
35129: LD_INT 1
35131: PUSH
35132: EMPTY
35133: LIST
35134: LIST
35135: PUSH
35136: LD_INT 2
35138: NEG
35139: PUSH
35140: LD_INT 0
35142: PUSH
35143: EMPTY
35144: LIST
35145: LIST
35146: PUSH
35147: LD_INT 2
35149: NEG
35150: PUSH
35151: LD_INT 1
35153: NEG
35154: PUSH
35155: EMPTY
35156: LIST
35157: LIST
35158: PUSH
35159: LD_INT 2
35161: NEG
35162: PUSH
35163: LD_INT 2
35165: NEG
35166: PUSH
35167: EMPTY
35168: LIST
35169: LIST
35170: PUSH
35171: EMPTY
35172: LIST
35173: LIST
35174: LIST
35175: LIST
35176: LIST
35177: LIST
35178: LIST
35179: LIST
35180: LIST
35181: LIST
35182: LIST
35183: LIST
35184: LIST
35185: LIST
35186: LIST
35187: LIST
35188: LIST
35189: LIST
35190: LIST
35191: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35192: LD_ADDR_VAR 0 54
35196: PUSH
35197: LD_INT 0
35199: PUSH
35200: LD_INT 0
35202: PUSH
35203: EMPTY
35204: LIST
35205: LIST
35206: PUSH
35207: LD_INT 0
35209: PUSH
35210: LD_INT 1
35212: NEG
35213: PUSH
35214: EMPTY
35215: LIST
35216: LIST
35217: PUSH
35218: LD_INT 1
35220: PUSH
35221: LD_INT 0
35223: PUSH
35224: EMPTY
35225: LIST
35226: LIST
35227: PUSH
35228: LD_INT 1
35230: PUSH
35231: LD_INT 1
35233: PUSH
35234: EMPTY
35235: LIST
35236: LIST
35237: PUSH
35238: LD_INT 0
35240: PUSH
35241: LD_INT 1
35243: PUSH
35244: EMPTY
35245: LIST
35246: LIST
35247: PUSH
35248: LD_INT 1
35250: NEG
35251: PUSH
35252: LD_INT 0
35254: PUSH
35255: EMPTY
35256: LIST
35257: LIST
35258: PUSH
35259: LD_INT 1
35261: NEG
35262: PUSH
35263: LD_INT 1
35265: NEG
35266: PUSH
35267: EMPTY
35268: LIST
35269: LIST
35270: PUSH
35271: LD_INT 1
35273: NEG
35274: PUSH
35275: LD_INT 2
35277: NEG
35278: PUSH
35279: EMPTY
35280: LIST
35281: LIST
35282: PUSH
35283: LD_INT 0
35285: PUSH
35286: LD_INT 2
35288: NEG
35289: PUSH
35290: EMPTY
35291: LIST
35292: LIST
35293: PUSH
35294: LD_INT 1
35296: PUSH
35297: LD_INT 1
35299: NEG
35300: PUSH
35301: EMPTY
35302: LIST
35303: LIST
35304: PUSH
35305: LD_INT 2
35307: PUSH
35308: LD_INT 0
35310: PUSH
35311: EMPTY
35312: LIST
35313: LIST
35314: PUSH
35315: LD_INT 2
35317: PUSH
35318: LD_INT 1
35320: PUSH
35321: EMPTY
35322: LIST
35323: LIST
35324: PUSH
35325: LD_INT 2
35327: PUSH
35328: LD_INT 2
35330: PUSH
35331: EMPTY
35332: LIST
35333: LIST
35334: PUSH
35335: LD_INT 1
35337: PUSH
35338: LD_INT 2
35340: PUSH
35341: EMPTY
35342: LIST
35343: LIST
35344: PUSH
35345: LD_INT 0
35347: PUSH
35348: LD_INT 2
35350: PUSH
35351: EMPTY
35352: LIST
35353: LIST
35354: PUSH
35355: LD_INT 1
35357: NEG
35358: PUSH
35359: LD_INT 1
35361: PUSH
35362: EMPTY
35363: LIST
35364: LIST
35365: PUSH
35366: LD_INT 2
35368: NEG
35369: PUSH
35370: LD_INT 0
35372: PUSH
35373: EMPTY
35374: LIST
35375: LIST
35376: PUSH
35377: LD_INT 2
35379: NEG
35380: PUSH
35381: LD_INT 1
35383: NEG
35384: PUSH
35385: EMPTY
35386: LIST
35387: LIST
35388: PUSH
35389: LD_INT 2
35391: NEG
35392: PUSH
35393: LD_INT 2
35395: NEG
35396: PUSH
35397: EMPTY
35398: LIST
35399: LIST
35400: PUSH
35401: EMPTY
35402: LIST
35403: LIST
35404: LIST
35405: LIST
35406: LIST
35407: LIST
35408: LIST
35409: LIST
35410: LIST
35411: LIST
35412: LIST
35413: LIST
35414: LIST
35415: LIST
35416: LIST
35417: LIST
35418: LIST
35419: LIST
35420: LIST
35421: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35422: LD_ADDR_VAR 0 55
35426: PUSH
35427: LD_INT 0
35429: PUSH
35430: LD_INT 0
35432: PUSH
35433: EMPTY
35434: LIST
35435: LIST
35436: PUSH
35437: LD_INT 0
35439: PUSH
35440: LD_INT 1
35442: NEG
35443: PUSH
35444: EMPTY
35445: LIST
35446: LIST
35447: PUSH
35448: LD_INT 1
35450: PUSH
35451: LD_INT 0
35453: PUSH
35454: EMPTY
35455: LIST
35456: LIST
35457: PUSH
35458: LD_INT 1
35460: PUSH
35461: LD_INT 1
35463: PUSH
35464: EMPTY
35465: LIST
35466: LIST
35467: PUSH
35468: LD_INT 0
35470: PUSH
35471: LD_INT 1
35473: PUSH
35474: EMPTY
35475: LIST
35476: LIST
35477: PUSH
35478: LD_INT 1
35480: NEG
35481: PUSH
35482: LD_INT 0
35484: PUSH
35485: EMPTY
35486: LIST
35487: LIST
35488: PUSH
35489: LD_INT 1
35491: NEG
35492: PUSH
35493: LD_INT 1
35495: NEG
35496: PUSH
35497: EMPTY
35498: LIST
35499: LIST
35500: PUSH
35501: LD_INT 1
35503: NEG
35504: PUSH
35505: LD_INT 2
35507: NEG
35508: PUSH
35509: EMPTY
35510: LIST
35511: LIST
35512: PUSH
35513: LD_INT 0
35515: PUSH
35516: LD_INT 2
35518: NEG
35519: PUSH
35520: EMPTY
35521: LIST
35522: LIST
35523: PUSH
35524: LD_INT 1
35526: PUSH
35527: LD_INT 1
35529: NEG
35530: PUSH
35531: EMPTY
35532: LIST
35533: LIST
35534: PUSH
35535: LD_INT 2
35537: PUSH
35538: LD_INT 0
35540: PUSH
35541: EMPTY
35542: LIST
35543: LIST
35544: PUSH
35545: LD_INT 2
35547: PUSH
35548: LD_INT 1
35550: PUSH
35551: EMPTY
35552: LIST
35553: LIST
35554: PUSH
35555: LD_INT 2
35557: PUSH
35558: LD_INT 2
35560: PUSH
35561: EMPTY
35562: LIST
35563: LIST
35564: PUSH
35565: LD_INT 1
35567: PUSH
35568: LD_INT 2
35570: PUSH
35571: EMPTY
35572: LIST
35573: LIST
35574: PUSH
35575: LD_INT 0
35577: PUSH
35578: LD_INT 2
35580: PUSH
35581: EMPTY
35582: LIST
35583: LIST
35584: PUSH
35585: LD_INT 1
35587: NEG
35588: PUSH
35589: LD_INT 1
35591: PUSH
35592: EMPTY
35593: LIST
35594: LIST
35595: PUSH
35596: LD_INT 2
35598: NEG
35599: PUSH
35600: LD_INT 0
35602: PUSH
35603: EMPTY
35604: LIST
35605: LIST
35606: PUSH
35607: LD_INT 2
35609: NEG
35610: PUSH
35611: LD_INT 1
35613: NEG
35614: PUSH
35615: EMPTY
35616: LIST
35617: LIST
35618: PUSH
35619: LD_INT 2
35621: NEG
35622: PUSH
35623: LD_INT 2
35625: NEG
35626: PUSH
35627: EMPTY
35628: LIST
35629: LIST
35630: PUSH
35631: EMPTY
35632: LIST
35633: LIST
35634: LIST
35635: LIST
35636: LIST
35637: LIST
35638: LIST
35639: LIST
35640: LIST
35641: LIST
35642: LIST
35643: LIST
35644: LIST
35645: LIST
35646: LIST
35647: LIST
35648: LIST
35649: LIST
35650: LIST
35651: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35652: LD_ADDR_VAR 0 56
35656: PUSH
35657: LD_INT 0
35659: PUSH
35660: LD_INT 0
35662: PUSH
35663: EMPTY
35664: LIST
35665: LIST
35666: PUSH
35667: LD_INT 0
35669: PUSH
35670: LD_INT 1
35672: NEG
35673: PUSH
35674: EMPTY
35675: LIST
35676: LIST
35677: PUSH
35678: LD_INT 1
35680: PUSH
35681: LD_INT 0
35683: PUSH
35684: EMPTY
35685: LIST
35686: LIST
35687: PUSH
35688: LD_INT 1
35690: PUSH
35691: LD_INT 1
35693: PUSH
35694: EMPTY
35695: LIST
35696: LIST
35697: PUSH
35698: LD_INT 0
35700: PUSH
35701: LD_INT 1
35703: PUSH
35704: EMPTY
35705: LIST
35706: LIST
35707: PUSH
35708: LD_INT 1
35710: NEG
35711: PUSH
35712: LD_INT 0
35714: PUSH
35715: EMPTY
35716: LIST
35717: LIST
35718: PUSH
35719: LD_INT 1
35721: NEG
35722: PUSH
35723: LD_INT 1
35725: NEG
35726: PUSH
35727: EMPTY
35728: LIST
35729: LIST
35730: PUSH
35731: LD_INT 1
35733: NEG
35734: PUSH
35735: LD_INT 2
35737: NEG
35738: PUSH
35739: EMPTY
35740: LIST
35741: LIST
35742: PUSH
35743: LD_INT 0
35745: PUSH
35746: LD_INT 2
35748: NEG
35749: PUSH
35750: EMPTY
35751: LIST
35752: LIST
35753: PUSH
35754: LD_INT 1
35756: PUSH
35757: LD_INT 1
35759: NEG
35760: PUSH
35761: EMPTY
35762: LIST
35763: LIST
35764: PUSH
35765: LD_INT 2
35767: PUSH
35768: LD_INT 0
35770: PUSH
35771: EMPTY
35772: LIST
35773: LIST
35774: PUSH
35775: LD_INT 2
35777: PUSH
35778: LD_INT 1
35780: PUSH
35781: EMPTY
35782: LIST
35783: LIST
35784: PUSH
35785: LD_INT 2
35787: PUSH
35788: LD_INT 2
35790: PUSH
35791: EMPTY
35792: LIST
35793: LIST
35794: PUSH
35795: LD_INT 1
35797: PUSH
35798: LD_INT 2
35800: PUSH
35801: EMPTY
35802: LIST
35803: LIST
35804: PUSH
35805: LD_INT 0
35807: PUSH
35808: LD_INT 2
35810: PUSH
35811: EMPTY
35812: LIST
35813: LIST
35814: PUSH
35815: LD_INT 1
35817: NEG
35818: PUSH
35819: LD_INT 1
35821: PUSH
35822: EMPTY
35823: LIST
35824: LIST
35825: PUSH
35826: LD_INT 2
35828: NEG
35829: PUSH
35830: LD_INT 0
35832: PUSH
35833: EMPTY
35834: LIST
35835: LIST
35836: PUSH
35837: LD_INT 2
35839: NEG
35840: PUSH
35841: LD_INT 1
35843: NEG
35844: PUSH
35845: EMPTY
35846: LIST
35847: LIST
35848: PUSH
35849: LD_INT 2
35851: NEG
35852: PUSH
35853: LD_INT 2
35855: NEG
35856: PUSH
35857: EMPTY
35858: LIST
35859: LIST
35860: PUSH
35861: EMPTY
35862: LIST
35863: LIST
35864: LIST
35865: LIST
35866: LIST
35867: LIST
35868: LIST
35869: LIST
35870: LIST
35871: LIST
35872: LIST
35873: LIST
35874: LIST
35875: LIST
35876: LIST
35877: LIST
35878: LIST
35879: LIST
35880: LIST
35881: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35882: LD_ADDR_VAR 0 57
35886: PUSH
35887: LD_INT 0
35889: PUSH
35890: LD_INT 0
35892: PUSH
35893: EMPTY
35894: LIST
35895: LIST
35896: PUSH
35897: LD_INT 0
35899: PUSH
35900: LD_INT 1
35902: NEG
35903: PUSH
35904: EMPTY
35905: LIST
35906: LIST
35907: PUSH
35908: LD_INT 1
35910: PUSH
35911: LD_INT 0
35913: PUSH
35914: EMPTY
35915: LIST
35916: LIST
35917: PUSH
35918: LD_INT 1
35920: PUSH
35921: LD_INT 1
35923: PUSH
35924: EMPTY
35925: LIST
35926: LIST
35927: PUSH
35928: LD_INT 0
35930: PUSH
35931: LD_INT 1
35933: PUSH
35934: EMPTY
35935: LIST
35936: LIST
35937: PUSH
35938: LD_INT 1
35940: NEG
35941: PUSH
35942: LD_INT 0
35944: PUSH
35945: EMPTY
35946: LIST
35947: LIST
35948: PUSH
35949: LD_INT 1
35951: NEG
35952: PUSH
35953: LD_INT 1
35955: NEG
35956: PUSH
35957: EMPTY
35958: LIST
35959: LIST
35960: PUSH
35961: LD_INT 1
35963: NEG
35964: PUSH
35965: LD_INT 2
35967: NEG
35968: PUSH
35969: EMPTY
35970: LIST
35971: LIST
35972: PUSH
35973: LD_INT 0
35975: PUSH
35976: LD_INT 2
35978: NEG
35979: PUSH
35980: EMPTY
35981: LIST
35982: LIST
35983: PUSH
35984: LD_INT 1
35986: PUSH
35987: LD_INT 1
35989: NEG
35990: PUSH
35991: EMPTY
35992: LIST
35993: LIST
35994: PUSH
35995: LD_INT 2
35997: PUSH
35998: LD_INT 0
36000: PUSH
36001: EMPTY
36002: LIST
36003: LIST
36004: PUSH
36005: LD_INT 2
36007: PUSH
36008: LD_INT 1
36010: PUSH
36011: EMPTY
36012: LIST
36013: LIST
36014: PUSH
36015: LD_INT 2
36017: PUSH
36018: LD_INT 2
36020: PUSH
36021: EMPTY
36022: LIST
36023: LIST
36024: PUSH
36025: LD_INT 1
36027: PUSH
36028: LD_INT 2
36030: PUSH
36031: EMPTY
36032: LIST
36033: LIST
36034: PUSH
36035: LD_INT 0
36037: PUSH
36038: LD_INT 2
36040: PUSH
36041: EMPTY
36042: LIST
36043: LIST
36044: PUSH
36045: LD_INT 1
36047: NEG
36048: PUSH
36049: LD_INT 1
36051: PUSH
36052: EMPTY
36053: LIST
36054: LIST
36055: PUSH
36056: LD_INT 2
36058: NEG
36059: PUSH
36060: LD_INT 0
36062: PUSH
36063: EMPTY
36064: LIST
36065: LIST
36066: PUSH
36067: LD_INT 2
36069: NEG
36070: PUSH
36071: LD_INT 1
36073: NEG
36074: PUSH
36075: EMPTY
36076: LIST
36077: LIST
36078: PUSH
36079: LD_INT 2
36081: NEG
36082: PUSH
36083: LD_INT 2
36085: NEG
36086: PUSH
36087: EMPTY
36088: LIST
36089: LIST
36090: PUSH
36091: EMPTY
36092: LIST
36093: LIST
36094: LIST
36095: LIST
36096: LIST
36097: LIST
36098: LIST
36099: LIST
36100: LIST
36101: LIST
36102: LIST
36103: LIST
36104: LIST
36105: LIST
36106: LIST
36107: LIST
36108: LIST
36109: LIST
36110: LIST
36111: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36112: LD_ADDR_VAR 0 58
36116: PUSH
36117: LD_INT 0
36119: PUSH
36120: LD_INT 0
36122: PUSH
36123: EMPTY
36124: LIST
36125: LIST
36126: PUSH
36127: LD_INT 0
36129: PUSH
36130: LD_INT 1
36132: NEG
36133: PUSH
36134: EMPTY
36135: LIST
36136: LIST
36137: PUSH
36138: LD_INT 1
36140: PUSH
36141: LD_INT 0
36143: PUSH
36144: EMPTY
36145: LIST
36146: LIST
36147: PUSH
36148: LD_INT 1
36150: PUSH
36151: LD_INT 1
36153: PUSH
36154: EMPTY
36155: LIST
36156: LIST
36157: PUSH
36158: LD_INT 0
36160: PUSH
36161: LD_INT 1
36163: PUSH
36164: EMPTY
36165: LIST
36166: LIST
36167: PUSH
36168: LD_INT 1
36170: NEG
36171: PUSH
36172: LD_INT 0
36174: PUSH
36175: EMPTY
36176: LIST
36177: LIST
36178: PUSH
36179: LD_INT 1
36181: NEG
36182: PUSH
36183: LD_INT 1
36185: NEG
36186: PUSH
36187: EMPTY
36188: LIST
36189: LIST
36190: PUSH
36191: LD_INT 1
36193: NEG
36194: PUSH
36195: LD_INT 2
36197: NEG
36198: PUSH
36199: EMPTY
36200: LIST
36201: LIST
36202: PUSH
36203: LD_INT 0
36205: PUSH
36206: LD_INT 2
36208: NEG
36209: PUSH
36210: EMPTY
36211: LIST
36212: LIST
36213: PUSH
36214: LD_INT 1
36216: PUSH
36217: LD_INT 1
36219: NEG
36220: PUSH
36221: EMPTY
36222: LIST
36223: LIST
36224: PUSH
36225: LD_INT 2
36227: PUSH
36228: LD_INT 0
36230: PUSH
36231: EMPTY
36232: LIST
36233: LIST
36234: PUSH
36235: LD_INT 2
36237: PUSH
36238: LD_INT 1
36240: PUSH
36241: EMPTY
36242: LIST
36243: LIST
36244: PUSH
36245: LD_INT 2
36247: PUSH
36248: LD_INT 2
36250: PUSH
36251: EMPTY
36252: LIST
36253: LIST
36254: PUSH
36255: LD_INT 1
36257: PUSH
36258: LD_INT 2
36260: PUSH
36261: EMPTY
36262: LIST
36263: LIST
36264: PUSH
36265: LD_INT 0
36267: PUSH
36268: LD_INT 2
36270: PUSH
36271: EMPTY
36272: LIST
36273: LIST
36274: PUSH
36275: LD_INT 1
36277: NEG
36278: PUSH
36279: LD_INT 1
36281: PUSH
36282: EMPTY
36283: LIST
36284: LIST
36285: PUSH
36286: LD_INT 2
36288: NEG
36289: PUSH
36290: LD_INT 0
36292: PUSH
36293: EMPTY
36294: LIST
36295: LIST
36296: PUSH
36297: LD_INT 2
36299: NEG
36300: PUSH
36301: LD_INT 1
36303: NEG
36304: PUSH
36305: EMPTY
36306: LIST
36307: LIST
36308: PUSH
36309: LD_INT 2
36311: NEG
36312: PUSH
36313: LD_INT 2
36315: NEG
36316: PUSH
36317: EMPTY
36318: LIST
36319: LIST
36320: PUSH
36321: EMPTY
36322: LIST
36323: LIST
36324: LIST
36325: LIST
36326: LIST
36327: LIST
36328: LIST
36329: LIST
36330: LIST
36331: LIST
36332: LIST
36333: LIST
36334: LIST
36335: LIST
36336: LIST
36337: LIST
36338: LIST
36339: LIST
36340: LIST
36341: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
36342: LD_ADDR_VAR 0 59
36346: PUSH
36347: LD_INT 0
36349: PUSH
36350: LD_INT 0
36352: PUSH
36353: EMPTY
36354: LIST
36355: LIST
36356: PUSH
36357: LD_INT 0
36359: PUSH
36360: LD_INT 1
36362: NEG
36363: PUSH
36364: EMPTY
36365: LIST
36366: LIST
36367: PUSH
36368: LD_INT 1
36370: PUSH
36371: LD_INT 0
36373: PUSH
36374: EMPTY
36375: LIST
36376: LIST
36377: PUSH
36378: LD_INT 1
36380: PUSH
36381: LD_INT 1
36383: PUSH
36384: EMPTY
36385: LIST
36386: LIST
36387: PUSH
36388: LD_INT 0
36390: PUSH
36391: LD_INT 1
36393: PUSH
36394: EMPTY
36395: LIST
36396: LIST
36397: PUSH
36398: LD_INT 1
36400: NEG
36401: PUSH
36402: LD_INT 0
36404: PUSH
36405: EMPTY
36406: LIST
36407: LIST
36408: PUSH
36409: LD_INT 1
36411: NEG
36412: PUSH
36413: LD_INT 1
36415: NEG
36416: PUSH
36417: EMPTY
36418: LIST
36419: LIST
36420: PUSH
36421: EMPTY
36422: LIST
36423: LIST
36424: LIST
36425: LIST
36426: LIST
36427: LIST
36428: LIST
36429: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
36430: LD_ADDR_VAR 0 60
36434: PUSH
36435: LD_INT 0
36437: PUSH
36438: LD_INT 0
36440: PUSH
36441: EMPTY
36442: LIST
36443: LIST
36444: PUSH
36445: LD_INT 0
36447: PUSH
36448: LD_INT 1
36450: NEG
36451: PUSH
36452: EMPTY
36453: LIST
36454: LIST
36455: PUSH
36456: LD_INT 1
36458: PUSH
36459: LD_INT 0
36461: PUSH
36462: EMPTY
36463: LIST
36464: LIST
36465: PUSH
36466: LD_INT 1
36468: PUSH
36469: LD_INT 1
36471: PUSH
36472: EMPTY
36473: LIST
36474: LIST
36475: PUSH
36476: LD_INT 0
36478: PUSH
36479: LD_INT 1
36481: PUSH
36482: EMPTY
36483: LIST
36484: LIST
36485: PUSH
36486: LD_INT 1
36488: NEG
36489: PUSH
36490: LD_INT 0
36492: PUSH
36493: EMPTY
36494: LIST
36495: LIST
36496: PUSH
36497: LD_INT 1
36499: NEG
36500: PUSH
36501: LD_INT 1
36503: NEG
36504: PUSH
36505: EMPTY
36506: LIST
36507: LIST
36508: PUSH
36509: EMPTY
36510: LIST
36511: LIST
36512: LIST
36513: LIST
36514: LIST
36515: LIST
36516: LIST
36517: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
36518: LD_ADDR_VAR 0 61
36522: PUSH
36523: LD_INT 0
36525: PUSH
36526: LD_INT 0
36528: PUSH
36529: EMPTY
36530: LIST
36531: LIST
36532: PUSH
36533: LD_INT 0
36535: PUSH
36536: LD_INT 1
36538: NEG
36539: PUSH
36540: EMPTY
36541: LIST
36542: LIST
36543: PUSH
36544: LD_INT 1
36546: PUSH
36547: LD_INT 0
36549: PUSH
36550: EMPTY
36551: LIST
36552: LIST
36553: PUSH
36554: LD_INT 1
36556: PUSH
36557: LD_INT 1
36559: PUSH
36560: EMPTY
36561: LIST
36562: LIST
36563: PUSH
36564: LD_INT 0
36566: PUSH
36567: LD_INT 1
36569: PUSH
36570: EMPTY
36571: LIST
36572: LIST
36573: PUSH
36574: LD_INT 1
36576: NEG
36577: PUSH
36578: LD_INT 0
36580: PUSH
36581: EMPTY
36582: LIST
36583: LIST
36584: PUSH
36585: LD_INT 1
36587: NEG
36588: PUSH
36589: LD_INT 1
36591: NEG
36592: PUSH
36593: EMPTY
36594: LIST
36595: LIST
36596: PUSH
36597: EMPTY
36598: LIST
36599: LIST
36600: LIST
36601: LIST
36602: LIST
36603: LIST
36604: LIST
36605: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
36606: LD_ADDR_VAR 0 62
36610: PUSH
36611: LD_INT 0
36613: PUSH
36614: LD_INT 0
36616: PUSH
36617: EMPTY
36618: LIST
36619: LIST
36620: PUSH
36621: LD_INT 0
36623: PUSH
36624: LD_INT 1
36626: NEG
36627: PUSH
36628: EMPTY
36629: LIST
36630: LIST
36631: PUSH
36632: LD_INT 1
36634: PUSH
36635: LD_INT 0
36637: PUSH
36638: EMPTY
36639: LIST
36640: LIST
36641: PUSH
36642: LD_INT 1
36644: PUSH
36645: LD_INT 1
36647: PUSH
36648: EMPTY
36649: LIST
36650: LIST
36651: PUSH
36652: LD_INT 0
36654: PUSH
36655: LD_INT 1
36657: PUSH
36658: EMPTY
36659: LIST
36660: LIST
36661: PUSH
36662: LD_INT 1
36664: NEG
36665: PUSH
36666: LD_INT 0
36668: PUSH
36669: EMPTY
36670: LIST
36671: LIST
36672: PUSH
36673: LD_INT 1
36675: NEG
36676: PUSH
36677: LD_INT 1
36679: NEG
36680: PUSH
36681: EMPTY
36682: LIST
36683: LIST
36684: PUSH
36685: EMPTY
36686: LIST
36687: LIST
36688: LIST
36689: LIST
36690: LIST
36691: LIST
36692: LIST
36693: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
36694: LD_ADDR_VAR 0 63
36698: PUSH
36699: LD_INT 0
36701: PUSH
36702: LD_INT 0
36704: PUSH
36705: EMPTY
36706: LIST
36707: LIST
36708: PUSH
36709: LD_INT 0
36711: PUSH
36712: LD_INT 1
36714: NEG
36715: PUSH
36716: EMPTY
36717: LIST
36718: LIST
36719: PUSH
36720: LD_INT 1
36722: PUSH
36723: LD_INT 0
36725: PUSH
36726: EMPTY
36727: LIST
36728: LIST
36729: PUSH
36730: LD_INT 1
36732: PUSH
36733: LD_INT 1
36735: PUSH
36736: EMPTY
36737: LIST
36738: LIST
36739: PUSH
36740: LD_INT 0
36742: PUSH
36743: LD_INT 1
36745: PUSH
36746: EMPTY
36747: LIST
36748: LIST
36749: PUSH
36750: LD_INT 1
36752: NEG
36753: PUSH
36754: LD_INT 0
36756: PUSH
36757: EMPTY
36758: LIST
36759: LIST
36760: PUSH
36761: LD_INT 1
36763: NEG
36764: PUSH
36765: LD_INT 1
36767: NEG
36768: PUSH
36769: EMPTY
36770: LIST
36771: LIST
36772: PUSH
36773: EMPTY
36774: LIST
36775: LIST
36776: LIST
36777: LIST
36778: LIST
36779: LIST
36780: LIST
36781: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
36782: LD_ADDR_VAR 0 64
36786: PUSH
36787: LD_INT 0
36789: PUSH
36790: LD_INT 0
36792: PUSH
36793: EMPTY
36794: LIST
36795: LIST
36796: PUSH
36797: LD_INT 0
36799: PUSH
36800: LD_INT 1
36802: NEG
36803: PUSH
36804: EMPTY
36805: LIST
36806: LIST
36807: PUSH
36808: LD_INT 1
36810: PUSH
36811: LD_INT 0
36813: PUSH
36814: EMPTY
36815: LIST
36816: LIST
36817: PUSH
36818: LD_INT 1
36820: PUSH
36821: LD_INT 1
36823: PUSH
36824: EMPTY
36825: LIST
36826: LIST
36827: PUSH
36828: LD_INT 0
36830: PUSH
36831: LD_INT 1
36833: PUSH
36834: EMPTY
36835: LIST
36836: LIST
36837: PUSH
36838: LD_INT 1
36840: NEG
36841: PUSH
36842: LD_INT 0
36844: PUSH
36845: EMPTY
36846: LIST
36847: LIST
36848: PUSH
36849: LD_INT 1
36851: NEG
36852: PUSH
36853: LD_INT 1
36855: NEG
36856: PUSH
36857: EMPTY
36858: LIST
36859: LIST
36860: PUSH
36861: EMPTY
36862: LIST
36863: LIST
36864: LIST
36865: LIST
36866: LIST
36867: LIST
36868: LIST
36869: ST_TO_ADDR
// end ; 1 :
36870: GO 42767
36872: LD_INT 1
36874: DOUBLE
36875: EQUAL
36876: IFTRUE 36880
36878: GO 39503
36880: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
36881: LD_ADDR_VAR 0 11
36885: PUSH
36886: LD_INT 1
36888: NEG
36889: PUSH
36890: LD_INT 3
36892: NEG
36893: PUSH
36894: EMPTY
36895: LIST
36896: LIST
36897: PUSH
36898: LD_INT 0
36900: PUSH
36901: LD_INT 3
36903: NEG
36904: PUSH
36905: EMPTY
36906: LIST
36907: LIST
36908: PUSH
36909: LD_INT 1
36911: PUSH
36912: LD_INT 2
36914: NEG
36915: PUSH
36916: EMPTY
36917: LIST
36918: LIST
36919: PUSH
36920: EMPTY
36921: LIST
36922: LIST
36923: LIST
36924: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
36925: LD_ADDR_VAR 0 12
36929: PUSH
36930: LD_INT 2
36932: PUSH
36933: LD_INT 1
36935: NEG
36936: PUSH
36937: EMPTY
36938: LIST
36939: LIST
36940: PUSH
36941: LD_INT 3
36943: PUSH
36944: LD_INT 0
36946: PUSH
36947: EMPTY
36948: LIST
36949: LIST
36950: PUSH
36951: LD_INT 3
36953: PUSH
36954: LD_INT 1
36956: PUSH
36957: EMPTY
36958: LIST
36959: LIST
36960: PUSH
36961: EMPTY
36962: LIST
36963: LIST
36964: LIST
36965: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
36966: LD_ADDR_VAR 0 13
36970: PUSH
36971: LD_INT 3
36973: PUSH
36974: LD_INT 2
36976: PUSH
36977: EMPTY
36978: LIST
36979: LIST
36980: PUSH
36981: LD_INT 3
36983: PUSH
36984: LD_INT 3
36986: PUSH
36987: EMPTY
36988: LIST
36989: LIST
36990: PUSH
36991: LD_INT 2
36993: PUSH
36994: LD_INT 3
36996: PUSH
36997: EMPTY
36998: LIST
36999: LIST
37000: PUSH
37001: EMPTY
37002: LIST
37003: LIST
37004: LIST
37005: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
37006: LD_ADDR_VAR 0 14
37010: PUSH
37011: LD_INT 1
37013: PUSH
37014: LD_INT 3
37016: PUSH
37017: EMPTY
37018: LIST
37019: LIST
37020: PUSH
37021: LD_INT 0
37023: PUSH
37024: LD_INT 3
37026: PUSH
37027: EMPTY
37028: LIST
37029: LIST
37030: PUSH
37031: LD_INT 1
37033: NEG
37034: PUSH
37035: LD_INT 2
37037: PUSH
37038: EMPTY
37039: LIST
37040: LIST
37041: PUSH
37042: EMPTY
37043: LIST
37044: LIST
37045: LIST
37046: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
37047: LD_ADDR_VAR 0 15
37051: PUSH
37052: LD_INT 2
37054: NEG
37055: PUSH
37056: LD_INT 1
37058: PUSH
37059: EMPTY
37060: LIST
37061: LIST
37062: PUSH
37063: LD_INT 3
37065: NEG
37066: PUSH
37067: LD_INT 0
37069: PUSH
37070: EMPTY
37071: LIST
37072: LIST
37073: PUSH
37074: LD_INT 3
37076: NEG
37077: PUSH
37078: LD_INT 1
37080: NEG
37081: PUSH
37082: EMPTY
37083: LIST
37084: LIST
37085: PUSH
37086: EMPTY
37087: LIST
37088: LIST
37089: LIST
37090: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
37091: LD_ADDR_VAR 0 16
37095: PUSH
37096: LD_INT 2
37098: NEG
37099: PUSH
37100: LD_INT 3
37102: NEG
37103: PUSH
37104: EMPTY
37105: LIST
37106: LIST
37107: PUSH
37108: LD_INT 3
37110: NEG
37111: PUSH
37112: LD_INT 2
37114: NEG
37115: PUSH
37116: EMPTY
37117: LIST
37118: LIST
37119: PUSH
37120: LD_INT 3
37122: NEG
37123: PUSH
37124: LD_INT 3
37126: NEG
37127: PUSH
37128: EMPTY
37129: LIST
37130: LIST
37131: PUSH
37132: EMPTY
37133: LIST
37134: LIST
37135: LIST
37136: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
37137: LD_ADDR_VAR 0 17
37141: PUSH
37142: LD_INT 1
37144: NEG
37145: PUSH
37146: LD_INT 3
37148: NEG
37149: PUSH
37150: EMPTY
37151: LIST
37152: LIST
37153: PUSH
37154: LD_INT 0
37156: PUSH
37157: LD_INT 3
37159: NEG
37160: PUSH
37161: EMPTY
37162: LIST
37163: LIST
37164: PUSH
37165: LD_INT 1
37167: PUSH
37168: LD_INT 2
37170: NEG
37171: PUSH
37172: EMPTY
37173: LIST
37174: LIST
37175: PUSH
37176: EMPTY
37177: LIST
37178: LIST
37179: LIST
37180: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
37181: LD_ADDR_VAR 0 18
37185: PUSH
37186: LD_INT 2
37188: PUSH
37189: LD_INT 1
37191: NEG
37192: PUSH
37193: EMPTY
37194: LIST
37195: LIST
37196: PUSH
37197: LD_INT 3
37199: PUSH
37200: LD_INT 0
37202: PUSH
37203: EMPTY
37204: LIST
37205: LIST
37206: PUSH
37207: LD_INT 3
37209: PUSH
37210: LD_INT 1
37212: PUSH
37213: EMPTY
37214: LIST
37215: LIST
37216: PUSH
37217: EMPTY
37218: LIST
37219: LIST
37220: LIST
37221: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
37222: LD_ADDR_VAR 0 19
37226: PUSH
37227: LD_INT 3
37229: PUSH
37230: LD_INT 2
37232: PUSH
37233: EMPTY
37234: LIST
37235: LIST
37236: PUSH
37237: LD_INT 3
37239: PUSH
37240: LD_INT 3
37242: PUSH
37243: EMPTY
37244: LIST
37245: LIST
37246: PUSH
37247: LD_INT 2
37249: PUSH
37250: LD_INT 3
37252: PUSH
37253: EMPTY
37254: LIST
37255: LIST
37256: PUSH
37257: EMPTY
37258: LIST
37259: LIST
37260: LIST
37261: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
37262: LD_ADDR_VAR 0 20
37266: PUSH
37267: LD_INT 1
37269: PUSH
37270: LD_INT 3
37272: PUSH
37273: EMPTY
37274: LIST
37275: LIST
37276: PUSH
37277: LD_INT 0
37279: PUSH
37280: LD_INT 3
37282: PUSH
37283: EMPTY
37284: LIST
37285: LIST
37286: PUSH
37287: LD_INT 1
37289: NEG
37290: PUSH
37291: LD_INT 2
37293: PUSH
37294: EMPTY
37295: LIST
37296: LIST
37297: PUSH
37298: EMPTY
37299: LIST
37300: LIST
37301: LIST
37302: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
37303: LD_ADDR_VAR 0 21
37307: PUSH
37308: LD_INT 2
37310: NEG
37311: PUSH
37312: LD_INT 1
37314: PUSH
37315: EMPTY
37316: LIST
37317: LIST
37318: PUSH
37319: LD_INT 3
37321: NEG
37322: PUSH
37323: LD_INT 0
37325: PUSH
37326: EMPTY
37327: LIST
37328: LIST
37329: PUSH
37330: LD_INT 3
37332: NEG
37333: PUSH
37334: LD_INT 1
37336: NEG
37337: PUSH
37338: EMPTY
37339: LIST
37340: LIST
37341: PUSH
37342: EMPTY
37343: LIST
37344: LIST
37345: LIST
37346: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
37347: LD_ADDR_VAR 0 22
37351: PUSH
37352: LD_INT 2
37354: NEG
37355: PUSH
37356: LD_INT 3
37358: NEG
37359: PUSH
37360: EMPTY
37361: LIST
37362: LIST
37363: PUSH
37364: LD_INT 3
37366: NEG
37367: PUSH
37368: LD_INT 2
37370: NEG
37371: PUSH
37372: EMPTY
37373: LIST
37374: LIST
37375: PUSH
37376: LD_INT 3
37378: NEG
37379: PUSH
37380: LD_INT 3
37382: NEG
37383: PUSH
37384: EMPTY
37385: LIST
37386: LIST
37387: PUSH
37388: EMPTY
37389: LIST
37390: LIST
37391: LIST
37392: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
37393: LD_ADDR_VAR 0 23
37397: PUSH
37398: LD_INT 0
37400: PUSH
37401: LD_INT 3
37403: NEG
37404: PUSH
37405: EMPTY
37406: LIST
37407: LIST
37408: PUSH
37409: LD_INT 1
37411: NEG
37412: PUSH
37413: LD_INT 4
37415: NEG
37416: PUSH
37417: EMPTY
37418: LIST
37419: LIST
37420: PUSH
37421: LD_INT 1
37423: PUSH
37424: LD_INT 3
37426: NEG
37427: PUSH
37428: EMPTY
37429: LIST
37430: LIST
37431: PUSH
37432: EMPTY
37433: LIST
37434: LIST
37435: LIST
37436: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
37437: LD_ADDR_VAR 0 24
37441: PUSH
37442: LD_INT 3
37444: PUSH
37445: LD_INT 0
37447: PUSH
37448: EMPTY
37449: LIST
37450: LIST
37451: PUSH
37452: LD_INT 3
37454: PUSH
37455: LD_INT 1
37457: NEG
37458: PUSH
37459: EMPTY
37460: LIST
37461: LIST
37462: PUSH
37463: LD_INT 4
37465: PUSH
37466: LD_INT 1
37468: PUSH
37469: EMPTY
37470: LIST
37471: LIST
37472: PUSH
37473: EMPTY
37474: LIST
37475: LIST
37476: LIST
37477: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
37478: LD_ADDR_VAR 0 25
37482: PUSH
37483: LD_INT 3
37485: PUSH
37486: LD_INT 3
37488: PUSH
37489: EMPTY
37490: LIST
37491: LIST
37492: PUSH
37493: LD_INT 4
37495: PUSH
37496: LD_INT 3
37498: PUSH
37499: EMPTY
37500: LIST
37501: LIST
37502: PUSH
37503: LD_INT 3
37505: PUSH
37506: LD_INT 4
37508: PUSH
37509: EMPTY
37510: LIST
37511: LIST
37512: PUSH
37513: EMPTY
37514: LIST
37515: LIST
37516: LIST
37517: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
37518: LD_ADDR_VAR 0 26
37522: PUSH
37523: LD_INT 0
37525: PUSH
37526: LD_INT 3
37528: PUSH
37529: EMPTY
37530: LIST
37531: LIST
37532: PUSH
37533: LD_INT 1
37535: PUSH
37536: LD_INT 4
37538: PUSH
37539: EMPTY
37540: LIST
37541: LIST
37542: PUSH
37543: LD_INT 1
37545: NEG
37546: PUSH
37547: LD_INT 3
37549: PUSH
37550: EMPTY
37551: LIST
37552: LIST
37553: PUSH
37554: EMPTY
37555: LIST
37556: LIST
37557: LIST
37558: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
37559: LD_ADDR_VAR 0 27
37563: PUSH
37564: LD_INT 3
37566: NEG
37567: PUSH
37568: LD_INT 0
37570: PUSH
37571: EMPTY
37572: LIST
37573: LIST
37574: PUSH
37575: LD_INT 3
37577: NEG
37578: PUSH
37579: LD_INT 1
37581: PUSH
37582: EMPTY
37583: LIST
37584: LIST
37585: PUSH
37586: LD_INT 4
37588: NEG
37589: PUSH
37590: LD_INT 1
37592: NEG
37593: PUSH
37594: EMPTY
37595: LIST
37596: LIST
37597: PUSH
37598: EMPTY
37599: LIST
37600: LIST
37601: LIST
37602: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
37603: LD_ADDR_VAR 0 28
37607: PUSH
37608: LD_INT 3
37610: NEG
37611: PUSH
37612: LD_INT 3
37614: NEG
37615: PUSH
37616: EMPTY
37617: LIST
37618: LIST
37619: PUSH
37620: LD_INT 3
37622: NEG
37623: PUSH
37624: LD_INT 4
37626: NEG
37627: PUSH
37628: EMPTY
37629: LIST
37630: LIST
37631: PUSH
37632: LD_INT 4
37634: NEG
37635: PUSH
37636: LD_INT 3
37638: NEG
37639: PUSH
37640: EMPTY
37641: LIST
37642: LIST
37643: PUSH
37644: EMPTY
37645: LIST
37646: LIST
37647: LIST
37648: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
37649: LD_ADDR_VAR 0 29
37653: PUSH
37654: LD_INT 1
37656: NEG
37657: PUSH
37658: LD_INT 3
37660: NEG
37661: PUSH
37662: EMPTY
37663: LIST
37664: LIST
37665: PUSH
37666: LD_INT 0
37668: PUSH
37669: LD_INT 3
37671: NEG
37672: PUSH
37673: EMPTY
37674: LIST
37675: LIST
37676: PUSH
37677: LD_INT 1
37679: PUSH
37680: LD_INT 2
37682: NEG
37683: PUSH
37684: EMPTY
37685: LIST
37686: LIST
37687: PUSH
37688: LD_INT 1
37690: NEG
37691: PUSH
37692: LD_INT 4
37694: NEG
37695: PUSH
37696: EMPTY
37697: LIST
37698: LIST
37699: PUSH
37700: LD_INT 0
37702: PUSH
37703: LD_INT 4
37705: NEG
37706: PUSH
37707: EMPTY
37708: LIST
37709: LIST
37710: PUSH
37711: LD_INT 1
37713: PUSH
37714: LD_INT 3
37716: NEG
37717: PUSH
37718: EMPTY
37719: LIST
37720: LIST
37721: PUSH
37722: LD_INT 1
37724: NEG
37725: PUSH
37726: LD_INT 5
37728: NEG
37729: PUSH
37730: EMPTY
37731: LIST
37732: LIST
37733: PUSH
37734: LD_INT 0
37736: PUSH
37737: LD_INT 5
37739: NEG
37740: PUSH
37741: EMPTY
37742: LIST
37743: LIST
37744: PUSH
37745: LD_INT 1
37747: PUSH
37748: LD_INT 4
37750: NEG
37751: PUSH
37752: EMPTY
37753: LIST
37754: LIST
37755: PUSH
37756: LD_INT 1
37758: NEG
37759: PUSH
37760: LD_INT 6
37762: NEG
37763: PUSH
37764: EMPTY
37765: LIST
37766: LIST
37767: PUSH
37768: LD_INT 0
37770: PUSH
37771: LD_INT 6
37773: NEG
37774: PUSH
37775: EMPTY
37776: LIST
37777: LIST
37778: PUSH
37779: LD_INT 1
37781: PUSH
37782: LD_INT 5
37784: NEG
37785: PUSH
37786: EMPTY
37787: LIST
37788: LIST
37789: PUSH
37790: EMPTY
37791: LIST
37792: LIST
37793: LIST
37794: LIST
37795: LIST
37796: LIST
37797: LIST
37798: LIST
37799: LIST
37800: LIST
37801: LIST
37802: LIST
37803: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
37804: LD_ADDR_VAR 0 30
37808: PUSH
37809: LD_INT 2
37811: PUSH
37812: LD_INT 1
37814: NEG
37815: PUSH
37816: EMPTY
37817: LIST
37818: LIST
37819: PUSH
37820: LD_INT 3
37822: PUSH
37823: LD_INT 0
37825: PUSH
37826: EMPTY
37827: LIST
37828: LIST
37829: PUSH
37830: LD_INT 3
37832: PUSH
37833: LD_INT 1
37835: PUSH
37836: EMPTY
37837: LIST
37838: LIST
37839: PUSH
37840: LD_INT 3
37842: PUSH
37843: LD_INT 1
37845: NEG
37846: PUSH
37847: EMPTY
37848: LIST
37849: LIST
37850: PUSH
37851: LD_INT 4
37853: PUSH
37854: LD_INT 0
37856: PUSH
37857: EMPTY
37858: LIST
37859: LIST
37860: PUSH
37861: LD_INT 4
37863: PUSH
37864: LD_INT 1
37866: PUSH
37867: EMPTY
37868: LIST
37869: LIST
37870: PUSH
37871: LD_INT 4
37873: PUSH
37874: LD_INT 1
37876: NEG
37877: PUSH
37878: EMPTY
37879: LIST
37880: LIST
37881: PUSH
37882: LD_INT 5
37884: PUSH
37885: LD_INT 0
37887: PUSH
37888: EMPTY
37889: LIST
37890: LIST
37891: PUSH
37892: LD_INT 5
37894: PUSH
37895: LD_INT 1
37897: PUSH
37898: EMPTY
37899: LIST
37900: LIST
37901: PUSH
37902: LD_INT 5
37904: PUSH
37905: LD_INT 1
37907: NEG
37908: PUSH
37909: EMPTY
37910: LIST
37911: LIST
37912: PUSH
37913: LD_INT 6
37915: PUSH
37916: LD_INT 0
37918: PUSH
37919: EMPTY
37920: LIST
37921: LIST
37922: PUSH
37923: LD_INT 6
37925: PUSH
37926: LD_INT 1
37928: PUSH
37929: EMPTY
37930: LIST
37931: LIST
37932: PUSH
37933: EMPTY
37934: LIST
37935: LIST
37936: LIST
37937: LIST
37938: LIST
37939: LIST
37940: LIST
37941: LIST
37942: LIST
37943: LIST
37944: LIST
37945: LIST
37946: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
37947: LD_ADDR_VAR 0 31
37951: PUSH
37952: LD_INT 3
37954: PUSH
37955: LD_INT 2
37957: PUSH
37958: EMPTY
37959: LIST
37960: LIST
37961: PUSH
37962: LD_INT 3
37964: PUSH
37965: LD_INT 3
37967: PUSH
37968: EMPTY
37969: LIST
37970: LIST
37971: PUSH
37972: LD_INT 2
37974: PUSH
37975: LD_INT 3
37977: PUSH
37978: EMPTY
37979: LIST
37980: LIST
37981: PUSH
37982: LD_INT 4
37984: PUSH
37985: LD_INT 3
37987: PUSH
37988: EMPTY
37989: LIST
37990: LIST
37991: PUSH
37992: LD_INT 4
37994: PUSH
37995: LD_INT 4
37997: PUSH
37998: EMPTY
37999: LIST
38000: LIST
38001: PUSH
38002: LD_INT 3
38004: PUSH
38005: LD_INT 4
38007: PUSH
38008: EMPTY
38009: LIST
38010: LIST
38011: PUSH
38012: LD_INT 5
38014: PUSH
38015: LD_INT 4
38017: PUSH
38018: EMPTY
38019: LIST
38020: LIST
38021: PUSH
38022: LD_INT 5
38024: PUSH
38025: LD_INT 5
38027: PUSH
38028: EMPTY
38029: LIST
38030: LIST
38031: PUSH
38032: LD_INT 4
38034: PUSH
38035: LD_INT 5
38037: PUSH
38038: EMPTY
38039: LIST
38040: LIST
38041: PUSH
38042: LD_INT 6
38044: PUSH
38045: LD_INT 5
38047: PUSH
38048: EMPTY
38049: LIST
38050: LIST
38051: PUSH
38052: LD_INT 6
38054: PUSH
38055: LD_INT 6
38057: PUSH
38058: EMPTY
38059: LIST
38060: LIST
38061: PUSH
38062: LD_INT 5
38064: PUSH
38065: LD_INT 6
38067: PUSH
38068: EMPTY
38069: LIST
38070: LIST
38071: PUSH
38072: EMPTY
38073: LIST
38074: LIST
38075: LIST
38076: LIST
38077: LIST
38078: LIST
38079: LIST
38080: LIST
38081: LIST
38082: LIST
38083: LIST
38084: LIST
38085: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
38086: LD_ADDR_VAR 0 32
38090: PUSH
38091: LD_INT 1
38093: PUSH
38094: LD_INT 3
38096: PUSH
38097: EMPTY
38098: LIST
38099: LIST
38100: PUSH
38101: LD_INT 0
38103: PUSH
38104: LD_INT 3
38106: PUSH
38107: EMPTY
38108: LIST
38109: LIST
38110: PUSH
38111: LD_INT 1
38113: NEG
38114: PUSH
38115: LD_INT 2
38117: PUSH
38118: EMPTY
38119: LIST
38120: LIST
38121: PUSH
38122: LD_INT 1
38124: PUSH
38125: LD_INT 4
38127: PUSH
38128: EMPTY
38129: LIST
38130: LIST
38131: PUSH
38132: LD_INT 0
38134: PUSH
38135: LD_INT 4
38137: PUSH
38138: EMPTY
38139: LIST
38140: LIST
38141: PUSH
38142: LD_INT 1
38144: NEG
38145: PUSH
38146: LD_INT 3
38148: PUSH
38149: EMPTY
38150: LIST
38151: LIST
38152: PUSH
38153: LD_INT 1
38155: PUSH
38156: LD_INT 5
38158: PUSH
38159: EMPTY
38160: LIST
38161: LIST
38162: PUSH
38163: LD_INT 0
38165: PUSH
38166: LD_INT 5
38168: PUSH
38169: EMPTY
38170: LIST
38171: LIST
38172: PUSH
38173: LD_INT 1
38175: NEG
38176: PUSH
38177: LD_INT 4
38179: PUSH
38180: EMPTY
38181: LIST
38182: LIST
38183: PUSH
38184: LD_INT 1
38186: PUSH
38187: LD_INT 6
38189: PUSH
38190: EMPTY
38191: LIST
38192: LIST
38193: PUSH
38194: LD_INT 0
38196: PUSH
38197: LD_INT 6
38199: PUSH
38200: EMPTY
38201: LIST
38202: LIST
38203: PUSH
38204: LD_INT 1
38206: NEG
38207: PUSH
38208: LD_INT 5
38210: PUSH
38211: EMPTY
38212: LIST
38213: LIST
38214: PUSH
38215: EMPTY
38216: LIST
38217: LIST
38218: LIST
38219: LIST
38220: LIST
38221: LIST
38222: LIST
38223: LIST
38224: LIST
38225: LIST
38226: LIST
38227: LIST
38228: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
38229: LD_ADDR_VAR 0 33
38233: PUSH
38234: LD_INT 2
38236: NEG
38237: PUSH
38238: LD_INT 1
38240: PUSH
38241: EMPTY
38242: LIST
38243: LIST
38244: PUSH
38245: LD_INT 3
38247: NEG
38248: PUSH
38249: LD_INT 0
38251: PUSH
38252: EMPTY
38253: LIST
38254: LIST
38255: PUSH
38256: LD_INT 3
38258: NEG
38259: PUSH
38260: LD_INT 1
38262: NEG
38263: PUSH
38264: EMPTY
38265: LIST
38266: LIST
38267: PUSH
38268: LD_INT 3
38270: NEG
38271: PUSH
38272: LD_INT 1
38274: PUSH
38275: EMPTY
38276: LIST
38277: LIST
38278: PUSH
38279: LD_INT 4
38281: NEG
38282: PUSH
38283: LD_INT 0
38285: PUSH
38286: EMPTY
38287: LIST
38288: LIST
38289: PUSH
38290: LD_INT 4
38292: NEG
38293: PUSH
38294: LD_INT 1
38296: NEG
38297: PUSH
38298: EMPTY
38299: LIST
38300: LIST
38301: PUSH
38302: LD_INT 4
38304: NEG
38305: PUSH
38306: LD_INT 1
38308: PUSH
38309: EMPTY
38310: LIST
38311: LIST
38312: PUSH
38313: LD_INT 5
38315: NEG
38316: PUSH
38317: LD_INT 0
38319: PUSH
38320: EMPTY
38321: LIST
38322: LIST
38323: PUSH
38324: LD_INT 5
38326: NEG
38327: PUSH
38328: LD_INT 1
38330: NEG
38331: PUSH
38332: EMPTY
38333: LIST
38334: LIST
38335: PUSH
38336: LD_INT 5
38338: NEG
38339: PUSH
38340: LD_INT 1
38342: PUSH
38343: EMPTY
38344: LIST
38345: LIST
38346: PUSH
38347: LD_INT 6
38349: NEG
38350: PUSH
38351: LD_INT 0
38353: PUSH
38354: EMPTY
38355: LIST
38356: LIST
38357: PUSH
38358: LD_INT 6
38360: NEG
38361: PUSH
38362: LD_INT 1
38364: NEG
38365: PUSH
38366: EMPTY
38367: LIST
38368: LIST
38369: PUSH
38370: EMPTY
38371: LIST
38372: LIST
38373: LIST
38374: LIST
38375: LIST
38376: LIST
38377: LIST
38378: LIST
38379: LIST
38380: LIST
38381: LIST
38382: LIST
38383: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
38384: LD_ADDR_VAR 0 34
38388: PUSH
38389: LD_INT 2
38391: NEG
38392: PUSH
38393: LD_INT 3
38395: NEG
38396: PUSH
38397: EMPTY
38398: LIST
38399: LIST
38400: PUSH
38401: LD_INT 3
38403: NEG
38404: PUSH
38405: LD_INT 2
38407: NEG
38408: PUSH
38409: EMPTY
38410: LIST
38411: LIST
38412: PUSH
38413: LD_INT 3
38415: NEG
38416: PUSH
38417: LD_INT 3
38419: NEG
38420: PUSH
38421: EMPTY
38422: LIST
38423: LIST
38424: PUSH
38425: LD_INT 3
38427: NEG
38428: PUSH
38429: LD_INT 4
38431: NEG
38432: PUSH
38433: EMPTY
38434: LIST
38435: LIST
38436: PUSH
38437: LD_INT 4
38439: NEG
38440: PUSH
38441: LD_INT 3
38443: NEG
38444: PUSH
38445: EMPTY
38446: LIST
38447: LIST
38448: PUSH
38449: LD_INT 4
38451: NEG
38452: PUSH
38453: LD_INT 4
38455: NEG
38456: PUSH
38457: EMPTY
38458: LIST
38459: LIST
38460: PUSH
38461: LD_INT 4
38463: NEG
38464: PUSH
38465: LD_INT 5
38467: NEG
38468: PUSH
38469: EMPTY
38470: LIST
38471: LIST
38472: PUSH
38473: LD_INT 5
38475: NEG
38476: PUSH
38477: LD_INT 4
38479: NEG
38480: PUSH
38481: EMPTY
38482: LIST
38483: LIST
38484: PUSH
38485: LD_INT 5
38487: NEG
38488: PUSH
38489: LD_INT 5
38491: NEG
38492: PUSH
38493: EMPTY
38494: LIST
38495: LIST
38496: PUSH
38497: LD_INT 5
38499: NEG
38500: PUSH
38501: LD_INT 6
38503: NEG
38504: PUSH
38505: EMPTY
38506: LIST
38507: LIST
38508: PUSH
38509: LD_INT 6
38511: NEG
38512: PUSH
38513: LD_INT 5
38515: NEG
38516: PUSH
38517: EMPTY
38518: LIST
38519: LIST
38520: PUSH
38521: LD_INT 6
38523: NEG
38524: PUSH
38525: LD_INT 6
38527: NEG
38528: PUSH
38529: EMPTY
38530: LIST
38531: LIST
38532: PUSH
38533: EMPTY
38534: LIST
38535: LIST
38536: LIST
38537: LIST
38538: LIST
38539: LIST
38540: LIST
38541: LIST
38542: LIST
38543: LIST
38544: LIST
38545: LIST
38546: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
38547: LD_ADDR_VAR 0 41
38551: PUSH
38552: LD_INT 0
38554: PUSH
38555: LD_INT 2
38557: NEG
38558: PUSH
38559: EMPTY
38560: LIST
38561: LIST
38562: PUSH
38563: LD_INT 1
38565: NEG
38566: PUSH
38567: LD_INT 3
38569: NEG
38570: PUSH
38571: EMPTY
38572: LIST
38573: LIST
38574: PUSH
38575: LD_INT 1
38577: PUSH
38578: LD_INT 2
38580: NEG
38581: PUSH
38582: EMPTY
38583: LIST
38584: LIST
38585: PUSH
38586: EMPTY
38587: LIST
38588: LIST
38589: LIST
38590: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
38591: LD_ADDR_VAR 0 42
38595: PUSH
38596: LD_INT 2
38598: PUSH
38599: LD_INT 0
38601: PUSH
38602: EMPTY
38603: LIST
38604: LIST
38605: PUSH
38606: LD_INT 2
38608: PUSH
38609: LD_INT 1
38611: NEG
38612: PUSH
38613: EMPTY
38614: LIST
38615: LIST
38616: PUSH
38617: LD_INT 3
38619: PUSH
38620: LD_INT 1
38622: PUSH
38623: EMPTY
38624: LIST
38625: LIST
38626: PUSH
38627: EMPTY
38628: LIST
38629: LIST
38630: LIST
38631: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
38632: LD_ADDR_VAR 0 43
38636: PUSH
38637: LD_INT 2
38639: PUSH
38640: LD_INT 2
38642: PUSH
38643: EMPTY
38644: LIST
38645: LIST
38646: PUSH
38647: LD_INT 3
38649: PUSH
38650: LD_INT 2
38652: PUSH
38653: EMPTY
38654: LIST
38655: LIST
38656: PUSH
38657: LD_INT 2
38659: PUSH
38660: LD_INT 3
38662: PUSH
38663: EMPTY
38664: LIST
38665: LIST
38666: PUSH
38667: EMPTY
38668: LIST
38669: LIST
38670: LIST
38671: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
38672: LD_ADDR_VAR 0 44
38676: PUSH
38677: LD_INT 0
38679: PUSH
38680: LD_INT 2
38682: PUSH
38683: EMPTY
38684: LIST
38685: LIST
38686: PUSH
38687: LD_INT 1
38689: PUSH
38690: LD_INT 3
38692: PUSH
38693: EMPTY
38694: LIST
38695: LIST
38696: PUSH
38697: LD_INT 1
38699: NEG
38700: PUSH
38701: LD_INT 2
38703: PUSH
38704: EMPTY
38705: LIST
38706: LIST
38707: PUSH
38708: EMPTY
38709: LIST
38710: LIST
38711: LIST
38712: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
38713: LD_ADDR_VAR 0 45
38717: PUSH
38718: LD_INT 2
38720: NEG
38721: PUSH
38722: LD_INT 0
38724: PUSH
38725: EMPTY
38726: LIST
38727: LIST
38728: PUSH
38729: LD_INT 2
38731: NEG
38732: PUSH
38733: LD_INT 1
38735: PUSH
38736: EMPTY
38737: LIST
38738: LIST
38739: PUSH
38740: LD_INT 3
38742: NEG
38743: PUSH
38744: LD_INT 1
38746: NEG
38747: PUSH
38748: EMPTY
38749: LIST
38750: LIST
38751: PUSH
38752: EMPTY
38753: LIST
38754: LIST
38755: LIST
38756: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
38757: LD_ADDR_VAR 0 46
38761: PUSH
38762: LD_INT 2
38764: NEG
38765: PUSH
38766: LD_INT 2
38768: NEG
38769: PUSH
38770: EMPTY
38771: LIST
38772: LIST
38773: PUSH
38774: LD_INT 2
38776: NEG
38777: PUSH
38778: LD_INT 3
38780: NEG
38781: PUSH
38782: EMPTY
38783: LIST
38784: LIST
38785: PUSH
38786: LD_INT 3
38788: NEG
38789: PUSH
38790: LD_INT 2
38792: NEG
38793: PUSH
38794: EMPTY
38795: LIST
38796: LIST
38797: PUSH
38798: EMPTY
38799: LIST
38800: LIST
38801: LIST
38802: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
38803: LD_ADDR_VAR 0 47
38807: PUSH
38808: LD_INT 2
38810: NEG
38811: PUSH
38812: LD_INT 3
38814: NEG
38815: PUSH
38816: EMPTY
38817: LIST
38818: LIST
38819: PUSH
38820: LD_INT 1
38822: NEG
38823: PUSH
38824: LD_INT 3
38826: NEG
38827: PUSH
38828: EMPTY
38829: LIST
38830: LIST
38831: PUSH
38832: EMPTY
38833: LIST
38834: LIST
38835: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
38836: LD_ADDR_VAR 0 48
38840: PUSH
38841: LD_INT 1
38843: PUSH
38844: LD_INT 2
38846: NEG
38847: PUSH
38848: EMPTY
38849: LIST
38850: LIST
38851: PUSH
38852: LD_INT 2
38854: PUSH
38855: LD_INT 1
38857: NEG
38858: PUSH
38859: EMPTY
38860: LIST
38861: LIST
38862: PUSH
38863: EMPTY
38864: LIST
38865: LIST
38866: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
38867: LD_ADDR_VAR 0 49
38871: PUSH
38872: LD_INT 3
38874: PUSH
38875: LD_INT 1
38877: PUSH
38878: EMPTY
38879: LIST
38880: LIST
38881: PUSH
38882: LD_INT 3
38884: PUSH
38885: LD_INT 2
38887: PUSH
38888: EMPTY
38889: LIST
38890: LIST
38891: PUSH
38892: EMPTY
38893: LIST
38894: LIST
38895: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
38896: LD_ADDR_VAR 0 50
38900: PUSH
38901: LD_INT 2
38903: PUSH
38904: LD_INT 3
38906: PUSH
38907: EMPTY
38908: LIST
38909: LIST
38910: PUSH
38911: LD_INT 1
38913: PUSH
38914: LD_INT 3
38916: PUSH
38917: EMPTY
38918: LIST
38919: LIST
38920: PUSH
38921: EMPTY
38922: LIST
38923: LIST
38924: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
38925: LD_ADDR_VAR 0 51
38929: PUSH
38930: LD_INT 1
38932: NEG
38933: PUSH
38934: LD_INT 2
38936: PUSH
38937: EMPTY
38938: LIST
38939: LIST
38940: PUSH
38941: LD_INT 2
38943: NEG
38944: PUSH
38945: LD_INT 1
38947: PUSH
38948: EMPTY
38949: LIST
38950: LIST
38951: PUSH
38952: EMPTY
38953: LIST
38954: LIST
38955: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
38956: LD_ADDR_VAR 0 52
38960: PUSH
38961: LD_INT 3
38963: NEG
38964: PUSH
38965: LD_INT 1
38967: NEG
38968: PUSH
38969: EMPTY
38970: LIST
38971: LIST
38972: PUSH
38973: LD_INT 3
38975: NEG
38976: PUSH
38977: LD_INT 2
38979: NEG
38980: PUSH
38981: EMPTY
38982: LIST
38983: LIST
38984: PUSH
38985: EMPTY
38986: LIST
38987: LIST
38988: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
38989: LD_ADDR_VAR 0 53
38993: PUSH
38994: LD_INT 1
38996: NEG
38997: PUSH
38998: LD_INT 3
39000: NEG
39001: PUSH
39002: EMPTY
39003: LIST
39004: LIST
39005: PUSH
39006: LD_INT 0
39008: PUSH
39009: LD_INT 3
39011: NEG
39012: PUSH
39013: EMPTY
39014: LIST
39015: LIST
39016: PUSH
39017: LD_INT 1
39019: PUSH
39020: LD_INT 2
39022: NEG
39023: PUSH
39024: EMPTY
39025: LIST
39026: LIST
39027: PUSH
39028: EMPTY
39029: LIST
39030: LIST
39031: LIST
39032: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
39033: LD_ADDR_VAR 0 54
39037: PUSH
39038: LD_INT 2
39040: PUSH
39041: LD_INT 1
39043: NEG
39044: PUSH
39045: EMPTY
39046: LIST
39047: LIST
39048: PUSH
39049: LD_INT 3
39051: PUSH
39052: LD_INT 0
39054: PUSH
39055: EMPTY
39056: LIST
39057: LIST
39058: PUSH
39059: LD_INT 3
39061: PUSH
39062: LD_INT 1
39064: PUSH
39065: EMPTY
39066: LIST
39067: LIST
39068: PUSH
39069: EMPTY
39070: LIST
39071: LIST
39072: LIST
39073: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
39074: LD_ADDR_VAR 0 55
39078: PUSH
39079: LD_INT 3
39081: PUSH
39082: LD_INT 2
39084: PUSH
39085: EMPTY
39086: LIST
39087: LIST
39088: PUSH
39089: LD_INT 3
39091: PUSH
39092: LD_INT 3
39094: PUSH
39095: EMPTY
39096: LIST
39097: LIST
39098: PUSH
39099: LD_INT 2
39101: PUSH
39102: LD_INT 3
39104: PUSH
39105: EMPTY
39106: LIST
39107: LIST
39108: PUSH
39109: EMPTY
39110: LIST
39111: LIST
39112: LIST
39113: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
39114: LD_ADDR_VAR 0 56
39118: PUSH
39119: LD_INT 1
39121: PUSH
39122: LD_INT 3
39124: PUSH
39125: EMPTY
39126: LIST
39127: LIST
39128: PUSH
39129: LD_INT 0
39131: PUSH
39132: LD_INT 3
39134: PUSH
39135: EMPTY
39136: LIST
39137: LIST
39138: PUSH
39139: LD_INT 1
39141: NEG
39142: PUSH
39143: LD_INT 2
39145: PUSH
39146: EMPTY
39147: LIST
39148: LIST
39149: PUSH
39150: EMPTY
39151: LIST
39152: LIST
39153: LIST
39154: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
39155: LD_ADDR_VAR 0 57
39159: PUSH
39160: LD_INT 2
39162: NEG
39163: PUSH
39164: LD_INT 1
39166: PUSH
39167: EMPTY
39168: LIST
39169: LIST
39170: PUSH
39171: LD_INT 3
39173: NEG
39174: PUSH
39175: LD_INT 0
39177: PUSH
39178: EMPTY
39179: LIST
39180: LIST
39181: PUSH
39182: LD_INT 3
39184: NEG
39185: PUSH
39186: LD_INT 1
39188: NEG
39189: PUSH
39190: EMPTY
39191: LIST
39192: LIST
39193: PUSH
39194: EMPTY
39195: LIST
39196: LIST
39197: LIST
39198: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
39199: LD_ADDR_VAR 0 58
39203: PUSH
39204: LD_INT 2
39206: NEG
39207: PUSH
39208: LD_INT 3
39210: NEG
39211: PUSH
39212: EMPTY
39213: LIST
39214: LIST
39215: PUSH
39216: LD_INT 3
39218: NEG
39219: PUSH
39220: LD_INT 2
39222: NEG
39223: PUSH
39224: EMPTY
39225: LIST
39226: LIST
39227: PUSH
39228: LD_INT 3
39230: NEG
39231: PUSH
39232: LD_INT 3
39234: NEG
39235: PUSH
39236: EMPTY
39237: LIST
39238: LIST
39239: PUSH
39240: EMPTY
39241: LIST
39242: LIST
39243: LIST
39244: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
39245: LD_ADDR_VAR 0 59
39249: PUSH
39250: LD_INT 1
39252: NEG
39253: PUSH
39254: LD_INT 2
39256: NEG
39257: PUSH
39258: EMPTY
39259: LIST
39260: LIST
39261: PUSH
39262: LD_INT 0
39264: PUSH
39265: LD_INT 2
39267: NEG
39268: PUSH
39269: EMPTY
39270: LIST
39271: LIST
39272: PUSH
39273: LD_INT 1
39275: PUSH
39276: LD_INT 1
39278: NEG
39279: PUSH
39280: EMPTY
39281: LIST
39282: LIST
39283: PUSH
39284: EMPTY
39285: LIST
39286: LIST
39287: LIST
39288: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
39289: LD_ADDR_VAR 0 60
39293: PUSH
39294: LD_INT 1
39296: PUSH
39297: LD_INT 1
39299: NEG
39300: PUSH
39301: EMPTY
39302: LIST
39303: LIST
39304: PUSH
39305: LD_INT 2
39307: PUSH
39308: LD_INT 0
39310: PUSH
39311: EMPTY
39312: LIST
39313: LIST
39314: PUSH
39315: LD_INT 2
39317: PUSH
39318: LD_INT 1
39320: PUSH
39321: EMPTY
39322: LIST
39323: LIST
39324: PUSH
39325: EMPTY
39326: LIST
39327: LIST
39328: LIST
39329: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
39330: LD_ADDR_VAR 0 61
39334: PUSH
39335: LD_INT 2
39337: PUSH
39338: LD_INT 1
39340: PUSH
39341: EMPTY
39342: LIST
39343: LIST
39344: PUSH
39345: LD_INT 2
39347: PUSH
39348: LD_INT 2
39350: PUSH
39351: EMPTY
39352: LIST
39353: LIST
39354: PUSH
39355: LD_INT 1
39357: PUSH
39358: LD_INT 2
39360: PUSH
39361: EMPTY
39362: LIST
39363: LIST
39364: PUSH
39365: EMPTY
39366: LIST
39367: LIST
39368: LIST
39369: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
39370: LD_ADDR_VAR 0 62
39374: PUSH
39375: LD_INT 1
39377: PUSH
39378: LD_INT 2
39380: PUSH
39381: EMPTY
39382: LIST
39383: LIST
39384: PUSH
39385: LD_INT 0
39387: PUSH
39388: LD_INT 2
39390: PUSH
39391: EMPTY
39392: LIST
39393: LIST
39394: PUSH
39395: LD_INT 1
39397: NEG
39398: PUSH
39399: LD_INT 1
39401: PUSH
39402: EMPTY
39403: LIST
39404: LIST
39405: PUSH
39406: EMPTY
39407: LIST
39408: LIST
39409: LIST
39410: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
39411: LD_ADDR_VAR 0 63
39415: PUSH
39416: LD_INT 1
39418: NEG
39419: PUSH
39420: LD_INT 1
39422: PUSH
39423: EMPTY
39424: LIST
39425: LIST
39426: PUSH
39427: LD_INT 2
39429: NEG
39430: PUSH
39431: LD_INT 0
39433: PUSH
39434: EMPTY
39435: LIST
39436: LIST
39437: PUSH
39438: LD_INT 2
39440: NEG
39441: PUSH
39442: LD_INT 1
39444: NEG
39445: PUSH
39446: EMPTY
39447: LIST
39448: LIST
39449: PUSH
39450: EMPTY
39451: LIST
39452: LIST
39453: LIST
39454: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39455: LD_ADDR_VAR 0 64
39459: PUSH
39460: LD_INT 1
39462: NEG
39463: PUSH
39464: LD_INT 2
39466: NEG
39467: PUSH
39468: EMPTY
39469: LIST
39470: LIST
39471: PUSH
39472: LD_INT 2
39474: NEG
39475: PUSH
39476: LD_INT 1
39478: NEG
39479: PUSH
39480: EMPTY
39481: LIST
39482: LIST
39483: PUSH
39484: LD_INT 2
39486: NEG
39487: PUSH
39488: LD_INT 2
39490: NEG
39491: PUSH
39492: EMPTY
39493: LIST
39494: LIST
39495: PUSH
39496: EMPTY
39497: LIST
39498: LIST
39499: LIST
39500: ST_TO_ADDR
// end ; 2 :
39501: GO 42767
39503: LD_INT 2
39505: DOUBLE
39506: EQUAL
39507: IFTRUE 39511
39509: GO 42766
39511: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
39512: LD_ADDR_VAR 0 29
39516: PUSH
39517: LD_INT 4
39519: PUSH
39520: LD_INT 0
39522: PUSH
39523: EMPTY
39524: LIST
39525: LIST
39526: PUSH
39527: LD_INT 4
39529: PUSH
39530: LD_INT 1
39532: NEG
39533: PUSH
39534: EMPTY
39535: LIST
39536: LIST
39537: PUSH
39538: LD_INT 5
39540: PUSH
39541: LD_INT 0
39543: PUSH
39544: EMPTY
39545: LIST
39546: LIST
39547: PUSH
39548: LD_INT 5
39550: PUSH
39551: LD_INT 1
39553: PUSH
39554: EMPTY
39555: LIST
39556: LIST
39557: PUSH
39558: LD_INT 4
39560: PUSH
39561: LD_INT 1
39563: PUSH
39564: EMPTY
39565: LIST
39566: LIST
39567: PUSH
39568: LD_INT 3
39570: PUSH
39571: LD_INT 0
39573: PUSH
39574: EMPTY
39575: LIST
39576: LIST
39577: PUSH
39578: LD_INT 3
39580: PUSH
39581: LD_INT 1
39583: NEG
39584: PUSH
39585: EMPTY
39586: LIST
39587: LIST
39588: PUSH
39589: LD_INT 3
39591: PUSH
39592: LD_INT 2
39594: NEG
39595: PUSH
39596: EMPTY
39597: LIST
39598: LIST
39599: PUSH
39600: LD_INT 5
39602: PUSH
39603: LD_INT 2
39605: PUSH
39606: EMPTY
39607: LIST
39608: LIST
39609: PUSH
39610: LD_INT 3
39612: PUSH
39613: LD_INT 3
39615: PUSH
39616: EMPTY
39617: LIST
39618: LIST
39619: PUSH
39620: LD_INT 3
39622: PUSH
39623: LD_INT 2
39625: PUSH
39626: EMPTY
39627: LIST
39628: LIST
39629: PUSH
39630: LD_INT 4
39632: PUSH
39633: LD_INT 3
39635: PUSH
39636: EMPTY
39637: LIST
39638: LIST
39639: PUSH
39640: LD_INT 4
39642: PUSH
39643: LD_INT 4
39645: PUSH
39646: EMPTY
39647: LIST
39648: LIST
39649: PUSH
39650: LD_INT 3
39652: PUSH
39653: LD_INT 4
39655: PUSH
39656: EMPTY
39657: LIST
39658: LIST
39659: PUSH
39660: LD_INT 2
39662: PUSH
39663: LD_INT 3
39665: PUSH
39666: EMPTY
39667: LIST
39668: LIST
39669: PUSH
39670: LD_INT 2
39672: PUSH
39673: LD_INT 2
39675: PUSH
39676: EMPTY
39677: LIST
39678: LIST
39679: PUSH
39680: LD_INT 4
39682: PUSH
39683: LD_INT 2
39685: PUSH
39686: EMPTY
39687: LIST
39688: LIST
39689: PUSH
39690: LD_INT 2
39692: PUSH
39693: LD_INT 4
39695: PUSH
39696: EMPTY
39697: LIST
39698: LIST
39699: PUSH
39700: LD_INT 0
39702: PUSH
39703: LD_INT 4
39705: PUSH
39706: EMPTY
39707: LIST
39708: LIST
39709: PUSH
39710: LD_INT 0
39712: PUSH
39713: LD_INT 3
39715: PUSH
39716: EMPTY
39717: LIST
39718: LIST
39719: PUSH
39720: LD_INT 1
39722: PUSH
39723: LD_INT 4
39725: PUSH
39726: EMPTY
39727: LIST
39728: LIST
39729: PUSH
39730: LD_INT 1
39732: PUSH
39733: LD_INT 5
39735: PUSH
39736: EMPTY
39737: LIST
39738: LIST
39739: PUSH
39740: LD_INT 0
39742: PUSH
39743: LD_INT 5
39745: PUSH
39746: EMPTY
39747: LIST
39748: LIST
39749: PUSH
39750: LD_INT 1
39752: NEG
39753: PUSH
39754: LD_INT 4
39756: PUSH
39757: EMPTY
39758: LIST
39759: LIST
39760: PUSH
39761: LD_INT 1
39763: NEG
39764: PUSH
39765: LD_INT 3
39767: PUSH
39768: EMPTY
39769: LIST
39770: LIST
39771: PUSH
39772: LD_INT 2
39774: PUSH
39775: LD_INT 5
39777: PUSH
39778: EMPTY
39779: LIST
39780: LIST
39781: PUSH
39782: LD_INT 2
39784: NEG
39785: PUSH
39786: LD_INT 3
39788: PUSH
39789: EMPTY
39790: LIST
39791: LIST
39792: PUSH
39793: LD_INT 3
39795: NEG
39796: PUSH
39797: LD_INT 0
39799: PUSH
39800: EMPTY
39801: LIST
39802: LIST
39803: PUSH
39804: LD_INT 3
39806: NEG
39807: PUSH
39808: LD_INT 1
39810: NEG
39811: PUSH
39812: EMPTY
39813: LIST
39814: LIST
39815: PUSH
39816: LD_INT 2
39818: NEG
39819: PUSH
39820: LD_INT 0
39822: PUSH
39823: EMPTY
39824: LIST
39825: LIST
39826: PUSH
39827: LD_INT 2
39829: NEG
39830: PUSH
39831: LD_INT 1
39833: PUSH
39834: EMPTY
39835: LIST
39836: LIST
39837: PUSH
39838: LD_INT 3
39840: NEG
39841: PUSH
39842: LD_INT 1
39844: PUSH
39845: EMPTY
39846: LIST
39847: LIST
39848: PUSH
39849: LD_INT 4
39851: NEG
39852: PUSH
39853: LD_INT 0
39855: PUSH
39856: EMPTY
39857: LIST
39858: LIST
39859: PUSH
39860: LD_INT 4
39862: NEG
39863: PUSH
39864: LD_INT 1
39866: NEG
39867: PUSH
39868: EMPTY
39869: LIST
39870: LIST
39871: PUSH
39872: LD_INT 4
39874: NEG
39875: PUSH
39876: LD_INT 2
39878: NEG
39879: PUSH
39880: EMPTY
39881: LIST
39882: LIST
39883: PUSH
39884: LD_INT 2
39886: NEG
39887: PUSH
39888: LD_INT 2
39890: PUSH
39891: EMPTY
39892: LIST
39893: LIST
39894: PUSH
39895: LD_INT 4
39897: NEG
39898: PUSH
39899: LD_INT 4
39901: NEG
39902: PUSH
39903: EMPTY
39904: LIST
39905: LIST
39906: PUSH
39907: LD_INT 4
39909: NEG
39910: PUSH
39911: LD_INT 5
39913: NEG
39914: PUSH
39915: EMPTY
39916: LIST
39917: LIST
39918: PUSH
39919: LD_INT 3
39921: NEG
39922: PUSH
39923: LD_INT 4
39925: NEG
39926: PUSH
39927: EMPTY
39928: LIST
39929: LIST
39930: PUSH
39931: LD_INT 3
39933: NEG
39934: PUSH
39935: LD_INT 3
39937: NEG
39938: PUSH
39939: EMPTY
39940: LIST
39941: LIST
39942: PUSH
39943: LD_INT 4
39945: NEG
39946: PUSH
39947: LD_INT 3
39949: NEG
39950: PUSH
39951: EMPTY
39952: LIST
39953: LIST
39954: PUSH
39955: LD_INT 5
39957: NEG
39958: PUSH
39959: LD_INT 4
39961: NEG
39962: PUSH
39963: EMPTY
39964: LIST
39965: LIST
39966: PUSH
39967: LD_INT 5
39969: NEG
39970: PUSH
39971: LD_INT 5
39973: NEG
39974: PUSH
39975: EMPTY
39976: LIST
39977: LIST
39978: PUSH
39979: LD_INT 3
39981: NEG
39982: PUSH
39983: LD_INT 5
39985: NEG
39986: PUSH
39987: EMPTY
39988: LIST
39989: LIST
39990: PUSH
39991: LD_INT 5
39993: NEG
39994: PUSH
39995: LD_INT 3
39997: NEG
39998: PUSH
39999: EMPTY
40000: LIST
40001: LIST
40002: PUSH
40003: EMPTY
40004: LIST
40005: LIST
40006: LIST
40007: LIST
40008: LIST
40009: LIST
40010: LIST
40011: LIST
40012: LIST
40013: LIST
40014: LIST
40015: LIST
40016: LIST
40017: LIST
40018: LIST
40019: LIST
40020: LIST
40021: LIST
40022: LIST
40023: LIST
40024: LIST
40025: LIST
40026: LIST
40027: LIST
40028: LIST
40029: LIST
40030: LIST
40031: LIST
40032: LIST
40033: LIST
40034: LIST
40035: LIST
40036: LIST
40037: LIST
40038: LIST
40039: LIST
40040: LIST
40041: LIST
40042: LIST
40043: LIST
40044: LIST
40045: LIST
40046: LIST
40047: LIST
40048: LIST
40049: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
40050: LD_ADDR_VAR 0 30
40054: PUSH
40055: LD_INT 4
40057: PUSH
40058: LD_INT 4
40060: PUSH
40061: EMPTY
40062: LIST
40063: LIST
40064: PUSH
40065: LD_INT 4
40067: PUSH
40068: LD_INT 3
40070: PUSH
40071: EMPTY
40072: LIST
40073: LIST
40074: PUSH
40075: LD_INT 5
40077: PUSH
40078: LD_INT 4
40080: PUSH
40081: EMPTY
40082: LIST
40083: LIST
40084: PUSH
40085: LD_INT 5
40087: PUSH
40088: LD_INT 5
40090: PUSH
40091: EMPTY
40092: LIST
40093: LIST
40094: PUSH
40095: LD_INT 4
40097: PUSH
40098: LD_INT 5
40100: PUSH
40101: EMPTY
40102: LIST
40103: LIST
40104: PUSH
40105: LD_INT 3
40107: PUSH
40108: LD_INT 4
40110: PUSH
40111: EMPTY
40112: LIST
40113: LIST
40114: PUSH
40115: LD_INT 3
40117: PUSH
40118: LD_INT 3
40120: PUSH
40121: EMPTY
40122: LIST
40123: LIST
40124: PUSH
40125: LD_INT 5
40127: PUSH
40128: LD_INT 3
40130: PUSH
40131: EMPTY
40132: LIST
40133: LIST
40134: PUSH
40135: LD_INT 3
40137: PUSH
40138: LD_INT 5
40140: PUSH
40141: EMPTY
40142: LIST
40143: LIST
40144: PUSH
40145: LD_INT 0
40147: PUSH
40148: LD_INT 3
40150: PUSH
40151: EMPTY
40152: LIST
40153: LIST
40154: PUSH
40155: LD_INT 0
40157: PUSH
40158: LD_INT 2
40160: PUSH
40161: EMPTY
40162: LIST
40163: LIST
40164: PUSH
40165: LD_INT 1
40167: PUSH
40168: LD_INT 3
40170: PUSH
40171: EMPTY
40172: LIST
40173: LIST
40174: PUSH
40175: LD_INT 1
40177: PUSH
40178: LD_INT 4
40180: PUSH
40181: EMPTY
40182: LIST
40183: LIST
40184: PUSH
40185: LD_INT 0
40187: PUSH
40188: LD_INT 4
40190: PUSH
40191: EMPTY
40192: LIST
40193: LIST
40194: PUSH
40195: LD_INT 1
40197: NEG
40198: PUSH
40199: LD_INT 3
40201: PUSH
40202: EMPTY
40203: LIST
40204: LIST
40205: PUSH
40206: LD_INT 1
40208: NEG
40209: PUSH
40210: LD_INT 2
40212: PUSH
40213: EMPTY
40214: LIST
40215: LIST
40216: PUSH
40217: LD_INT 2
40219: PUSH
40220: LD_INT 4
40222: PUSH
40223: EMPTY
40224: LIST
40225: LIST
40226: PUSH
40227: LD_INT 2
40229: NEG
40230: PUSH
40231: LD_INT 2
40233: PUSH
40234: EMPTY
40235: LIST
40236: LIST
40237: PUSH
40238: LD_INT 4
40240: NEG
40241: PUSH
40242: LD_INT 0
40244: PUSH
40245: EMPTY
40246: LIST
40247: LIST
40248: PUSH
40249: LD_INT 4
40251: NEG
40252: PUSH
40253: LD_INT 1
40255: NEG
40256: PUSH
40257: EMPTY
40258: LIST
40259: LIST
40260: PUSH
40261: LD_INT 3
40263: NEG
40264: PUSH
40265: LD_INT 0
40267: PUSH
40268: EMPTY
40269: LIST
40270: LIST
40271: PUSH
40272: LD_INT 3
40274: NEG
40275: PUSH
40276: LD_INT 1
40278: PUSH
40279: EMPTY
40280: LIST
40281: LIST
40282: PUSH
40283: LD_INT 4
40285: NEG
40286: PUSH
40287: LD_INT 1
40289: PUSH
40290: EMPTY
40291: LIST
40292: LIST
40293: PUSH
40294: LD_INT 5
40296: NEG
40297: PUSH
40298: LD_INT 0
40300: PUSH
40301: EMPTY
40302: LIST
40303: LIST
40304: PUSH
40305: LD_INT 5
40307: NEG
40308: PUSH
40309: LD_INT 1
40311: NEG
40312: PUSH
40313: EMPTY
40314: LIST
40315: LIST
40316: PUSH
40317: LD_INT 5
40319: NEG
40320: PUSH
40321: LD_INT 2
40323: NEG
40324: PUSH
40325: EMPTY
40326: LIST
40327: LIST
40328: PUSH
40329: LD_INT 3
40331: NEG
40332: PUSH
40333: LD_INT 2
40335: PUSH
40336: EMPTY
40337: LIST
40338: LIST
40339: PUSH
40340: LD_INT 3
40342: NEG
40343: PUSH
40344: LD_INT 3
40346: NEG
40347: PUSH
40348: EMPTY
40349: LIST
40350: LIST
40351: PUSH
40352: LD_INT 3
40354: NEG
40355: PUSH
40356: LD_INT 4
40358: NEG
40359: PUSH
40360: EMPTY
40361: LIST
40362: LIST
40363: PUSH
40364: LD_INT 2
40366: NEG
40367: PUSH
40368: LD_INT 3
40370: NEG
40371: PUSH
40372: EMPTY
40373: LIST
40374: LIST
40375: PUSH
40376: LD_INT 2
40378: NEG
40379: PUSH
40380: LD_INT 2
40382: NEG
40383: PUSH
40384: EMPTY
40385: LIST
40386: LIST
40387: PUSH
40388: LD_INT 3
40390: NEG
40391: PUSH
40392: LD_INT 2
40394: NEG
40395: PUSH
40396: EMPTY
40397: LIST
40398: LIST
40399: PUSH
40400: LD_INT 4
40402: NEG
40403: PUSH
40404: LD_INT 3
40406: NEG
40407: PUSH
40408: EMPTY
40409: LIST
40410: LIST
40411: PUSH
40412: LD_INT 4
40414: NEG
40415: PUSH
40416: LD_INT 4
40418: NEG
40419: PUSH
40420: EMPTY
40421: LIST
40422: LIST
40423: PUSH
40424: LD_INT 2
40426: NEG
40427: PUSH
40428: LD_INT 4
40430: NEG
40431: PUSH
40432: EMPTY
40433: LIST
40434: LIST
40435: PUSH
40436: LD_INT 4
40438: NEG
40439: PUSH
40440: LD_INT 2
40442: NEG
40443: PUSH
40444: EMPTY
40445: LIST
40446: LIST
40447: PUSH
40448: LD_INT 0
40450: PUSH
40451: LD_INT 4
40453: NEG
40454: PUSH
40455: EMPTY
40456: LIST
40457: LIST
40458: PUSH
40459: LD_INT 0
40461: PUSH
40462: LD_INT 5
40464: NEG
40465: PUSH
40466: EMPTY
40467: LIST
40468: LIST
40469: PUSH
40470: LD_INT 1
40472: PUSH
40473: LD_INT 4
40475: NEG
40476: PUSH
40477: EMPTY
40478: LIST
40479: LIST
40480: PUSH
40481: LD_INT 1
40483: PUSH
40484: LD_INT 3
40486: NEG
40487: PUSH
40488: EMPTY
40489: LIST
40490: LIST
40491: PUSH
40492: LD_INT 0
40494: PUSH
40495: LD_INT 3
40497: NEG
40498: PUSH
40499: EMPTY
40500: LIST
40501: LIST
40502: PUSH
40503: LD_INT 1
40505: NEG
40506: PUSH
40507: LD_INT 4
40509: NEG
40510: PUSH
40511: EMPTY
40512: LIST
40513: LIST
40514: PUSH
40515: LD_INT 1
40517: NEG
40518: PUSH
40519: LD_INT 5
40521: NEG
40522: PUSH
40523: EMPTY
40524: LIST
40525: LIST
40526: PUSH
40527: LD_INT 2
40529: PUSH
40530: LD_INT 3
40532: NEG
40533: PUSH
40534: EMPTY
40535: LIST
40536: LIST
40537: PUSH
40538: LD_INT 2
40540: NEG
40541: PUSH
40542: LD_INT 5
40544: NEG
40545: PUSH
40546: EMPTY
40547: LIST
40548: LIST
40549: PUSH
40550: EMPTY
40551: LIST
40552: LIST
40553: LIST
40554: LIST
40555: LIST
40556: LIST
40557: LIST
40558: LIST
40559: LIST
40560: LIST
40561: LIST
40562: LIST
40563: LIST
40564: LIST
40565: LIST
40566: LIST
40567: LIST
40568: LIST
40569: LIST
40570: LIST
40571: LIST
40572: LIST
40573: LIST
40574: LIST
40575: LIST
40576: LIST
40577: LIST
40578: LIST
40579: LIST
40580: LIST
40581: LIST
40582: LIST
40583: LIST
40584: LIST
40585: LIST
40586: LIST
40587: LIST
40588: LIST
40589: LIST
40590: LIST
40591: LIST
40592: LIST
40593: LIST
40594: LIST
40595: LIST
40596: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
40597: LD_ADDR_VAR 0 31
40601: PUSH
40602: LD_INT 0
40604: PUSH
40605: LD_INT 4
40607: PUSH
40608: EMPTY
40609: LIST
40610: LIST
40611: PUSH
40612: LD_INT 0
40614: PUSH
40615: LD_INT 3
40617: PUSH
40618: EMPTY
40619: LIST
40620: LIST
40621: PUSH
40622: LD_INT 1
40624: PUSH
40625: LD_INT 4
40627: PUSH
40628: EMPTY
40629: LIST
40630: LIST
40631: PUSH
40632: LD_INT 1
40634: PUSH
40635: LD_INT 5
40637: PUSH
40638: EMPTY
40639: LIST
40640: LIST
40641: PUSH
40642: LD_INT 0
40644: PUSH
40645: LD_INT 5
40647: PUSH
40648: EMPTY
40649: LIST
40650: LIST
40651: PUSH
40652: LD_INT 1
40654: NEG
40655: PUSH
40656: LD_INT 4
40658: PUSH
40659: EMPTY
40660: LIST
40661: LIST
40662: PUSH
40663: LD_INT 1
40665: NEG
40666: PUSH
40667: LD_INT 3
40669: PUSH
40670: EMPTY
40671: LIST
40672: LIST
40673: PUSH
40674: LD_INT 2
40676: PUSH
40677: LD_INT 5
40679: PUSH
40680: EMPTY
40681: LIST
40682: LIST
40683: PUSH
40684: LD_INT 2
40686: NEG
40687: PUSH
40688: LD_INT 3
40690: PUSH
40691: EMPTY
40692: LIST
40693: LIST
40694: PUSH
40695: LD_INT 3
40697: NEG
40698: PUSH
40699: LD_INT 0
40701: PUSH
40702: EMPTY
40703: LIST
40704: LIST
40705: PUSH
40706: LD_INT 3
40708: NEG
40709: PUSH
40710: LD_INT 1
40712: NEG
40713: PUSH
40714: EMPTY
40715: LIST
40716: LIST
40717: PUSH
40718: LD_INT 2
40720: NEG
40721: PUSH
40722: LD_INT 0
40724: PUSH
40725: EMPTY
40726: LIST
40727: LIST
40728: PUSH
40729: LD_INT 2
40731: NEG
40732: PUSH
40733: LD_INT 1
40735: PUSH
40736: EMPTY
40737: LIST
40738: LIST
40739: PUSH
40740: LD_INT 3
40742: NEG
40743: PUSH
40744: LD_INT 1
40746: PUSH
40747: EMPTY
40748: LIST
40749: LIST
40750: PUSH
40751: LD_INT 4
40753: NEG
40754: PUSH
40755: LD_INT 0
40757: PUSH
40758: EMPTY
40759: LIST
40760: LIST
40761: PUSH
40762: LD_INT 4
40764: NEG
40765: PUSH
40766: LD_INT 1
40768: NEG
40769: PUSH
40770: EMPTY
40771: LIST
40772: LIST
40773: PUSH
40774: LD_INT 4
40776: NEG
40777: PUSH
40778: LD_INT 2
40780: NEG
40781: PUSH
40782: EMPTY
40783: LIST
40784: LIST
40785: PUSH
40786: LD_INT 2
40788: NEG
40789: PUSH
40790: LD_INT 2
40792: PUSH
40793: EMPTY
40794: LIST
40795: LIST
40796: PUSH
40797: LD_INT 4
40799: NEG
40800: PUSH
40801: LD_INT 4
40803: NEG
40804: PUSH
40805: EMPTY
40806: LIST
40807: LIST
40808: PUSH
40809: LD_INT 4
40811: NEG
40812: PUSH
40813: LD_INT 5
40815: NEG
40816: PUSH
40817: EMPTY
40818: LIST
40819: LIST
40820: PUSH
40821: LD_INT 3
40823: NEG
40824: PUSH
40825: LD_INT 4
40827: NEG
40828: PUSH
40829: EMPTY
40830: LIST
40831: LIST
40832: PUSH
40833: LD_INT 3
40835: NEG
40836: PUSH
40837: LD_INT 3
40839: NEG
40840: PUSH
40841: EMPTY
40842: LIST
40843: LIST
40844: PUSH
40845: LD_INT 4
40847: NEG
40848: PUSH
40849: LD_INT 3
40851: NEG
40852: PUSH
40853: EMPTY
40854: LIST
40855: LIST
40856: PUSH
40857: LD_INT 5
40859: NEG
40860: PUSH
40861: LD_INT 4
40863: NEG
40864: PUSH
40865: EMPTY
40866: LIST
40867: LIST
40868: PUSH
40869: LD_INT 5
40871: NEG
40872: PUSH
40873: LD_INT 5
40875: NEG
40876: PUSH
40877: EMPTY
40878: LIST
40879: LIST
40880: PUSH
40881: LD_INT 3
40883: NEG
40884: PUSH
40885: LD_INT 5
40887: NEG
40888: PUSH
40889: EMPTY
40890: LIST
40891: LIST
40892: PUSH
40893: LD_INT 5
40895: NEG
40896: PUSH
40897: LD_INT 3
40899: NEG
40900: PUSH
40901: EMPTY
40902: LIST
40903: LIST
40904: PUSH
40905: LD_INT 0
40907: PUSH
40908: LD_INT 3
40910: NEG
40911: PUSH
40912: EMPTY
40913: LIST
40914: LIST
40915: PUSH
40916: LD_INT 0
40918: PUSH
40919: LD_INT 4
40921: NEG
40922: PUSH
40923: EMPTY
40924: LIST
40925: LIST
40926: PUSH
40927: LD_INT 1
40929: PUSH
40930: LD_INT 3
40932: NEG
40933: PUSH
40934: EMPTY
40935: LIST
40936: LIST
40937: PUSH
40938: LD_INT 1
40940: PUSH
40941: LD_INT 2
40943: NEG
40944: PUSH
40945: EMPTY
40946: LIST
40947: LIST
40948: PUSH
40949: LD_INT 0
40951: PUSH
40952: LD_INT 2
40954: NEG
40955: PUSH
40956: EMPTY
40957: LIST
40958: LIST
40959: PUSH
40960: LD_INT 1
40962: NEG
40963: PUSH
40964: LD_INT 3
40966: NEG
40967: PUSH
40968: EMPTY
40969: LIST
40970: LIST
40971: PUSH
40972: LD_INT 1
40974: NEG
40975: PUSH
40976: LD_INT 4
40978: NEG
40979: PUSH
40980: EMPTY
40981: LIST
40982: LIST
40983: PUSH
40984: LD_INT 2
40986: PUSH
40987: LD_INT 2
40989: NEG
40990: PUSH
40991: EMPTY
40992: LIST
40993: LIST
40994: PUSH
40995: LD_INT 2
40997: NEG
40998: PUSH
40999: LD_INT 4
41001: NEG
41002: PUSH
41003: EMPTY
41004: LIST
41005: LIST
41006: PUSH
41007: LD_INT 4
41009: PUSH
41010: LD_INT 0
41012: PUSH
41013: EMPTY
41014: LIST
41015: LIST
41016: PUSH
41017: LD_INT 4
41019: PUSH
41020: LD_INT 1
41022: NEG
41023: PUSH
41024: EMPTY
41025: LIST
41026: LIST
41027: PUSH
41028: LD_INT 5
41030: PUSH
41031: LD_INT 0
41033: PUSH
41034: EMPTY
41035: LIST
41036: LIST
41037: PUSH
41038: LD_INT 5
41040: PUSH
41041: LD_INT 1
41043: PUSH
41044: EMPTY
41045: LIST
41046: LIST
41047: PUSH
41048: LD_INT 4
41050: PUSH
41051: LD_INT 1
41053: PUSH
41054: EMPTY
41055: LIST
41056: LIST
41057: PUSH
41058: LD_INT 3
41060: PUSH
41061: LD_INT 0
41063: PUSH
41064: EMPTY
41065: LIST
41066: LIST
41067: PUSH
41068: LD_INT 3
41070: PUSH
41071: LD_INT 1
41073: NEG
41074: PUSH
41075: EMPTY
41076: LIST
41077: LIST
41078: PUSH
41079: LD_INT 3
41081: PUSH
41082: LD_INT 2
41084: NEG
41085: PUSH
41086: EMPTY
41087: LIST
41088: LIST
41089: PUSH
41090: LD_INT 5
41092: PUSH
41093: LD_INT 2
41095: PUSH
41096: EMPTY
41097: LIST
41098: LIST
41099: PUSH
41100: EMPTY
41101: LIST
41102: LIST
41103: LIST
41104: LIST
41105: LIST
41106: LIST
41107: LIST
41108: LIST
41109: LIST
41110: LIST
41111: LIST
41112: LIST
41113: LIST
41114: LIST
41115: LIST
41116: LIST
41117: LIST
41118: LIST
41119: LIST
41120: LIST
41121: LIST
41122: LIST
41123: LIST
41124: LIST
41125: LIST
41126: LIST
41127: LIST
41128: LIST
41129: LIST
41130: LIST
41131: LIST
41132: LIST
41133: LIST
41134: LIST
41135: LIST
41136: LIST
41137: LIST
41138: LIST
41139: LIST
41140: LIST
41141: LIST
41142: LIST
41143: LIST
41144: LIST
41145: LIST
41146: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
41147: LD_ADDR_VAR 0 32
41151: PUSH
41152: LD_INT 4
41154: NEG
41155: PUSH
41156: LD_INT 0
41158: PUSH
41159: EMPTY
41160: LIST
41161: LIST
41162: PUSH
41163: LD_INT 4
41165: NEG
41166: PUSH
41167: LD_INT 1
41169: NEG
41170: PUSH
41171: EMPTY
41172: LIST
41173: LIST
41174: PUSH
41175: LD_INT 3
41177: NEG
41178: PUSH
41179: LD_INT 0
41181: PUSH
41182: EMPTY
41183: LIST
41184: LIST
41185: PUSH
41186: LD_INT 3
41188: NEG
41189: PUSH
41190: LD_INT 1
41192: PUSH
41193: EMPTY
41194: LIST
41195: LIST
41196: PUSH
41197: LD_INT 4
41199: NEG
41200: PUSH
41201: LD_INT 1
41203: PUSH
41204: EMPTY
41205: LIST
41206: LIST
41207: PUSH
41208: LD_INT 5
41210: NEG
41211: PUSH
41212: LD_INT 0
41214: PUSH
41215: EMPTY
41216: LIST
41217: LIST
41218: PUSH
41219: LD_INT 5
41221: NEG
41222: PUSH
41223: LD_INT 1
41225: NEG
41226: PUSH
41227: EMPTY
41228: LIST
41229: LIST
41230: PUSH
41231: LD_INT 5
41233: NEG
41234: PUSH
41235: LD_INT 2
41237: NEG
41238: PUSH
41239: EMPTY
41240: LIST
41241: LIST
41242: PUSH
41243: LD_INT 3
41245: NEG
41246: PUSH
41247: LD_INT 2
41249: PUSH
41250: EMPTY
41251: LIST
41252: LIST
41253: PUSH
41254: LD_INT 3
41256: NEG
41257: PUSH
41258: LD_INT 3
41260: NEG
41261: PUSH
41262: EMPTY
41263: LIST
41264: LIST
41265: PUSH
41266: LD_INT 3
41268: NEG
41269: PUSH
41270: LD_INT 4
41272: NEG
41273: PUSH
41274: EMPTY
41275: LIST
41276: LIST
41277: PUSH
41278: LD_INT 2
41280: NEG
41281: PUSH
41282: LD_INT 3
41284: NEG
41285: PUSH
41286: EMPTY
41287: LIST
41288: LIST
41289: PUSH
41290: LD_INT 2
41292: NEG
41293: PUSH
41294: LD_INT 2
41296: NEG
41297: PUSH
41298: EMPTY
41299: LIST
41300: LIST
41301: PUSH
41302: LD_INT 3
41304: NEG
41305: PUSH
41306: LD_INT 2
41308: NEG
41309: PUSH
41310: EMPTY
41311: LIST
41312: LIST
41313: PUSH
41314: LD_INT 4
41316: NEG
41317: PUSH
41318: LD_INT 3
41320: NEG
41321: PUSH
41322: EMPTY
41323: LIST
41324: LIST
41325: PUSH
41326: LD_INT 4
41328: NEG
41329: PUSH
41330: LD_INT 4
41332: NEG
41333: PUSH
41334: EMPTY
41335: LIST
41336: LIST
41337: PUSH
41338: LD_INT 2
41340: NEG
41341: PUSH
41342: LD_INT 4
41344: NEG
41345: PUSH
41346: EMPTY
41347: LIST
41348: LIST
41349: PUSH
41350: LD_INT 4
41352: NEG
41353: PUSH
41354: LD_INT 2
41356: NEG
41357: PUSH
41358: EMPTY
41359: LIST
41360: LIST
41361: PUSH
41362: LD_INT 0
41364: PUSH
41365: LD_INT 4
41367: NEG
41368: PUSH
41369: EMPTY
41370: LIST
41371: LIST
41372: PUSH
41373: LD_INT 0
41375: PUSH
41376: LD_INT 5
41378: NEG
41379: PUSH
41380: EMPTY
41381: LIST
41382: LIST
41383: PUSH
41384: LD_INT 1
41386: PUSH
41387: LD_INT 4
41389: NEG
41390: PUSH
41391: EMPTY
41392: LIST
41393: LIST
41394: PUSH
41395: LD_INT 1
41397: PUSH
41398: LD_INT 3
41400: NEG
41401: PUSH
41402: EMPTY
41403: LIST
41404: LIST
41405: PUSH
41406: LD_INT 0
41408: PUSH
41409: LD_INT 3
41411: NEG
41412: PUSH
41413: EMPTY
41414: LIST
41415: LIST
41416: PUSH
41417: LD_INT 1
41419: NEG
41420: PUSH
41421: LD_INT 4
41423: NEG
41424: PUSH
41425: EMPTY
41426: LIST
41427: LIST
41428: PUSH
41429: LD_INT 1
41431: NEG
41432: PUSH
41433: LD_INT 5
41435: NEG
41436: PUSH
41437: EMPTY
41438: LIST
41439: LIST
41440: PUSH
41441: LD_INT 2
41443: PUSH
41444: LD_INT 3
41446: NEG
41447: PUSH
41448: EMPTY
41449: LIST
41450: LIST
41451: PUSH
41452: LD_INT 2
41454: NEG
41455: PUSH
41456: LD_INT 5
41458: NEG
41459: PUSH
41460: EMPTY
41461: LIST
41462: LIST
41463: PUSH
41464: LD_INT 3
41466: PUSH
41467: LD_INT 0
41469: PUSH
41470: EMPTY
41471: LIST
41472: LIST
41473: PUSH
41474: LD_INT 3
41476: PUSH
41477: LD_INT 1
41479: NEG
41480: PUSH
41481: EMPTY
41482: LIST
41483: LIST
41484: PUSH
41485: LD_INT 4
41487: PUSH
41488: LD_INT 0
41490: PUSH
41491: EMPTY
41492: LIST
41493: LIST
41494: PUSH
41495: LD_INT 4
41497: PUSH
41498: LD_INT 1
41500: PUSH
41501: EMPTY
41502: LIST
41503: LIST
41504: PUSH
41505: LD_INT 3
41507: PUSH
41508: LD_INT 1
41510: PUSH
41511: EMPTY
41512: LIST
41513: LIST
41514: PUSH
41515: LD_INT 2
41517: PUSH
41518: LD_INT 0
41520: PUSH
41521: EMPTY
41522: LIST
41523: LIST
41524: PUSH
41525: LD_INT 2
41527: PUSH
41528: LD_INT 1
41530: NEG
41531: PUSH
41532: EMPTY
41533: LIST
41534: LIST
41535: PUSH
41536: LD_INT 2
41538: PUSH
41539: LD_INT 2
41541: NEG
41542: PUSH
41543: EMPTY
41544: LIST
41545: LIST
41546: PUSH
41547: LD_INT 4
41549: PUSH
41550: LD_INT 2
41552: PUSH
41553: EMPTY
41554: LIST
41555: LIST
41556: PUSH
41557: LD_INT 4
41559: PUSH
41560: LD_INT 4
41562: PUSH
41563: EMPTY
41564: LIST
41565: LIST
41566: PUSH
41567: LD_INT 4
41569: PUSH
41570: LD_INT 3
41572: PUSH
41573: EMPTY
41574: LIST
41575: LIST
41576: PUSH
41577: LD_INT 5
41579: PUSH
41580: LD_INT 4
41582: PUSH
41583: EMPTY
41584: LIST
41585: LIST
41586: PUSH
41587: LD_INT 5
41589: PUSH
41590: LD_INT 5
41592: PUSH
41593: EMPTY
41594: LIST
41595: LIST
41596: PUSH
41597: LD_INT 4
41599: PUSH
41600: LD_INT 5
41602: PUSH
41603: EMPTY
41604: LIST
41605: LIST
41606: PUSH
41607: LD_INT 3
41609: PUSH
41610: LD_INT 4
41612: PUSH
41613: EMPTY
41614: LIST
41615: LIST
41616: PUSH
41617: LD_INT 3
41619: PUSH
41620: LD_INT 3
41622: PUSH
41623: EMPTY
41624: LIST
41625: LIST
41626: PUSH
41627: LD_INT 5
41629: PUSH
41630: LD_INT 3
41632: PUSH
41633: EMPTY
41634: LIST
41635: LIST
41636: PUSH
41637: LD_INT 3
41639: PUSH
41640: LD_INT 5
41642: PUSH
41643: EMPTY
41644: LIST
41645: LIST
41646: PUSH
41647: EMPTY
41648: LIST
41649: LIST
41650: LIST
41651: LIST
41652: LIST
41653: LIST
41654: LIST
41655: LIST
41656: LIST
41657: LIST
41658: LIST
41659: LIST
41660: LIST
41661: LIST
41662: LIST
41663: LIST
41664: LIST
41665: LIST
41666: LIST
41667: LIST
41668: LIST
41669: LIST
41670: LIST
41671: LIST
41672: LIST
41673: LIST
41674: LIST
41675: LIST
41676: LIST
41677: LIST
41678: LIST
41679: LIST
41680: LIST
41681: LIST
41682: LIST
41683: LIST
41684: LIST
41685: LIST
41686: LIST
41687: LIST
41688: LIST
41689: LIST
41690: LIST
41691: LIST
41692: LIST
41693: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
41694: LD_ADDR_VAR 0 33
41698: PUSH
41699: LD_INT 4
41701: NEG
41702: PUSH
41703: LD_INT 4
41705: NEG
41706: PUSH
41707: EMPTY
41708: LIST
41709: LIST
41710: PUSH
41711: LD_INT 4
41713: NEG
41714: PUSH
41715: LD_INT 5
41717: NEG
41718: PUSH
41719: EMPTY
41720: LIST
41721: LIST
41722: PUSH
41723: LD_INT 3
41725: NEG
41726: PUSH
41727: LD_INT 4
41729: NEG
41730: PUSH
41731: EMPTY
41732: LIST
41733: LIST
41734: PUSH
41735: LD_INT 3
41737: NEG
41738: PUSH
41739: LD_INT 3
41741: NEG
41742: PUSH
41743: EMPTY
41744: LIST
41745: LIST
41746: PUSH
41747: LD_INT 4
41749: NEG
41750: PUSH
41751: LD_INT 3
41753: NEG
41754: PUSH
41755: EMPTY
41756: LIST
41757: LIST
41758: PUSH
41759: LD_INT 5
41761: NEG
41762: PUSH
41763: LD_INT 4
41765: NEG
41766: PUSH
41767: EMPTY
41768: LIST
41769: LIST
41770: PUSH
41771: LD_INT 5
41773: NEG
41774: PUSH
41775: LD_INT 5
41777: NEG
41778: PUSH
41779: EMPTY
41780: LIST
41781: LIST
41782: PUSH
41783: LD_INT 3
41785: NEG
41786: PUSH
41787: LD_INT 5
41789: NEG
41790: PUSH
41791: EMPTY
41792: LIST
41793: LIST
41794: PUSH
41795: LD_INT 5
41797: NEG
41798: PUSH
41799: LD_INT 3
41801: NEG
41802: PUSH
41803: EMPTY
41804: LIST
41805: LIST
41806: PUSH
41807: LD_INT 0
41809: PUSH
41810: LD_INT 3
41812: NEG
41813: PUSH
41814: EMPTY
41815: LIST
41816: LIST
41817: PUSH
41818: LD_INT 0
41820: PUSH
41821: LD_INT 4
41823: NEG
41824: PUSH
41825: EMPTY
41826: LIST
41827: LIST
41828: PUSH
41829: LD_INT 1
41831: PUSH
41832: LD_INT 3
41834: NEG
41835: PUSH
41836: EMPTY
41837: LIST
41838: LIST
41839: PUSH
41840: LD_INT 1
41842: PUSH
41843: LD_INT 2
41845: NEG
41846: PUSH
41847: EMPTY
41848: LIST
41849: LIST
41850: PUSH
41851: LD_INT 0
41853: PUSH
41854: LD_INT 2
41856: NEG
41857: PUSH
41858: EMPTY
41859: LIST
41860: LIST
41861: PUSH
41862: LD_INT 1
41864: NEG
41865: PUSH
41866: LD_INT 3
41868: NEG
41869: PUSH
41870: EMPTY
41871: LIST
41872: LIST
41873: PUSH
41874: LD_INT 1
41876: NEG
41877: PUSH
41878: LD_INT 4
41880: NEG
41881: PUSH
41882: EMPTY
41883: LIST
41884: LIST
41885: PUSH
41886: LD_INT 2
41888: PUSH
41889: LD_INT 2
41891: NEG
41892: PUSH
41893: EMPTY
41894: LIST
41895: LIST
41896: PUSH
41897: LD_INT 2
41899: NEG
41900: PUSH
41901: LD_INT 4
41903: NEG
41904: PUSH
41905: EMPTY
41906: LIST
41907: LIST
41908: PUSH
41909: LD_INT 4
41911: PUSH
41912: LD_INT 0
41914: PUSH
41915: EMPTY
41916: LIST
41917: LIST
41918: PUSH
41919: LD_INT 4
41921: PUSH
41922: LD_INT 1
41924: NEG
41925: PUSH
41926: EMPTY
41927: LIST
41928: LIST
41929: PUSH
41930: LD_INT 5
41932: PUSH
41933: LD_INT 0
41935: PUSH
41936: EMPTY
41937: LIST
41938: LIST
41939: PUSH
41940: LD_INT 5
41942: PUSH
41943: LD_INT 1
41945: PUSH
41946: EMPTY
41947: LIST
41948: LIST
41949: PUSH
41950: LD_INT 4
41952: PUSH
41953: LD_INT 1
41955: PUSH
41956: EMPTY
41957: LIST
41958: LIST
41959: PUSH
41960: LD_INT 3
41962: PUSH
41963: LD_INT 0
41965: PUSH
41966: EMPTY
41967: LIST
41968: LIST
41969: PUSH
41970: LD_INT 3
41972: PUSH
41973: LD_INT 1
41975: NEG
41976: PUSH
41977: EMPTY
41978: LIST
41979: LIST
41980: PUSH
41981: LD_INT 3
41983: PUSH
41984: LD_INT 2
41986: NEG
41987: PUSH
41988: EMPTY
41989: LIST
41990: LIST
41991: PUSH
41992: LD_INT 5
41994: PUSH
41995: LD_INT 2
41997: PUSH
41998: EMPTY
41999: LIST
42000: LIST
42001: PUSH
42002: LD_INT 3
42004: PUSH
42005: LD_INT 3
42007: PUSH
42008: EMPTY
42009: LIST
42010: LIST
42011: PUSH
42012: LD_INT 3
42014: PUSH
42015: LD_INT 2
42017: PUSH
42018: EMPTY
42019: LIST
42020: LIST
42021: PUSH
42022: LD_INT 4
42024: PUSH
42025: LD_INT 3
42027: PUSH
42028: EMPTY
42029: LIST
42030: LIST
42031: PUSH
42032: LD_INT 4
42034: PUSH
42035: LD_INT 4
42037: PUSH
42038: EMPTY
42039: LIST
42040: LIST
42041: PUSH
42042: LD_INT 3
42044: PUSH
42045: LD_INT 4
42047: PUSH
42048: EMPTY
42049: LIST
42050: LIST
42051: PUSH
42052: LD_INT 2
42054: PUSH
42055: LD_INT 3
42057: PUSH
42058: EMPTY
42059: LIST
42060: LIST
42061: PUSH
42062: LD_INT 2
42064: PUSH
42065: LD_INT 2
42067: PUSH
42068: EMPTY
42069: LIST
42070: LIST
42071: PUSH
42072: LD_INT 4
42074: PUSH
42075: LD_INT 2
42077: PUSH
42078: EMPTY
42079: LIST
42080: LIST
42081: PUSH
42082: LD_INT 2
42084: PUSH
42085: LD_INT 4
42087: PUSH
42088: EMPTY
42089: LIST
42090: LIST
42091: PUSH
42092: LD_INT 0
42094: PUSH
42095: LD_INT 4
42097: PUSH
42098: EMPTY
42099: LIST
42100: LIST
42101: PUSH
42102: LD_INT 0
42104: PUSH
42105: LD_INT 3
42107: PUSH
42108: EMPTY
42109: LIST
42110: LIST
42111: PUSH
42112: LD_INT 1
42114: PUSH
42115: LD_INT 4
42117: PUSH
42118: EMPTY
42119: LIST
42120: LIST
42121: PUSH
42122: LD_INT 1
42124: PUSH
42125: LD_INT 5
42127: PUSH
42128: EMPTY
42129: LIST
42130: LIST
42131: PUSH
42132: LD_INT 0
42134: PUSH
42135: LD_INT 5
42137: PUSH
42138: EMPTY
42139: LIST
42140: LIST
42141: PUSH
42142: LD_INT 1
42144: NEG
42145: PUSH
42146: LD_INT 4
42148: PUSH
42149: EMPTY
42150: LIST
42151: LIST
42152: PUSH
42153: LD_INT 1
42155: NEG
42156: PUSH
42157: LD_INT 3
42159: PUSH
42160: EMPTY
42161: LIST
42162: LIST
42163: PUSH
42164: LD_INT 2
42166: PUSH
42167: LD_INT 5
42169: PUSH
42170: EMPTY
42171: LIST
42172: LIST
42173: PUSH
42174: LD_INT 2
42176: NEG
42177: PUSH
42178: LD_INT 3
42180: PUSH
42181: EMPTY
42182: LIST
42183: LIST
42184: PUSH
42185: EMPTY
42186: LIST
42187: LIST
42188: LIST
42189: LIST
42190: LIST
42191: LIST
42192: LIST
42193: LIST
42194: LIST
42195: LIST
42196: LIST
42197: LIST
42198: LIST
42199: LIST
42200: LIST
42201: LIST
42202: LIST
42203: LIST
42204: LIST
42205: LIST
42206: LIST
42207: LIST
42208: LIST
42209: LIST
42210: LIST
42211: LIST
42212: LIST
42213: LIST
42214: LIST
42215: LIST
42216: LIST
42217: LIST
42218: LIST
42219: LIST
42220: LIST
42221: LIST
42222: LIST
42223: LIST
42224: LIST
42225: LIST
42226: LIST
42227: LIST
42228: LIST
42229: LIST
42230: LIST
42231: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
42232: LD_ADDR_VAR 0 34
42236: PUSH
42237: LD_INT 0
42239: PUSH
42240: LD_INT 4
42242: NEG
42243: PUSH
42244: EMPTY
42245: LIST
42246: LIST
42247: PUSH
42248: LD_INT 0
42250: PUSH
42251: LD_INT 5
42253: NEG
42254: PUSH
42255: EMPTY
42256: LIST
42257: LIST
42258: PUSH
42259: LD_INT 1
42261: PUSH
42262: LD_INT 4
42264: NEG
42265: PUSH
42266: EMPTY
42267: LIST
42268: LIST
42269: PUSH
42270: LD_INT 1
42272: PUSH
42273: LD_INT 3
42275: NEG
42276: PUSH
42277: EMPTY
42278: LIST
42279: LIST
42280: PUSH
42281: LD_INT 0
42283: PUSH
42284: LD_INT 3
42286: NEG
42287: PUSH
42288: EMPTY
42289: LIST
42290: LIST
42291: PUSH
42292: LD_INT 1
42294: NEG
42295: PUSH
42296: LD_INT 4
42298: NEG
42299: PUSH
42300: EMPTY
42301: LIST
42302: LIST
42303: PUSH
42304: LD_INT 1
42306: NEG
42307: PUSH
42308: LD_INT 5
42310: NEG
42311: PUSH
42312: EMPTY
42313: LIST
42314: LIST
42315: PUSH
42316: LD_INT 2
42318: PUSH
42319: LD_INT 3
42321: NEG
42322: PUSH
42323: EMPTY
42324: LIST
42325: LIST
42326: PUSH
42327: LD_INT 2
42329: NEG
42330: PUSH
42331: LD_INT 5
42333: NEG
42334: PUSH
42335: EMPTY
42336: LIST
42337: LIST
42338: PUSH
42339: LD_INT 3
42341: PUSH
42342: LD_INT 0
42344: PUSH
42345: EMPTY
42346: LIST
42347: LIST
42348: PUSH
42349: LD_INT 3
42351: PUSH
42352: LD_INT 1
42354: NEG
42355: PUSH
42356: EMPTY
42357: LIST
42358: LIST
42359: PUSH
42360: LD_INT 4
42362: PUSH
42363: LD_INT 0
42365: PUSH
42366: EMPTY
42367: LIST
42368: LIST
42369: PUSH
42370: LD_INT 4
42372: PUSH
42373: LD_INT 1
42375: PUSH
42376: EMPTY
42377: LIST
42378: LIST
42379: PUSH
42380: LD_INT 3
42382: PUSH
42383: LD_INT 1
42385: PUSH
42386: EMPTY
42387: LIST
42388: LIST
42389: PUSH
42390: LD_INT 2
42392: PUSH
42393: LD_INT 0
42395: PUSH
42396: EMPTY
42397: LIST
42398: LIST
42399: PUSH
42400: LD_INT 2
42402: PUSH
42403: LD_INT 1
42405: NEG
42406: PUSH
42407: EMPTY
42408: LIST
42409: LIST
42410: PUSH
42411: LD_INT 2
42413: PUSH
42414: LD_INT 2
42416: NEG
42417: PUSH
42418: EMPTY
42419: LIST
42420: LIST
42421: PUSH
42422: LD_INT 4
42424: PUSH
42425: LD_INT 2
42427: PUSH
42428: EMPTY
42429: LIST
42430: LIST
42431: PUSH
42432: LD_INT 4
42434: PUSH
42435: LD_INT 4
42437: PUSH
42438: EMPTY
42439: LIST
42440: LIST
42441: PUSH
42442: LD_INT 4
42444: PUSH
42445: LD_INT 3
42447: PUSH
42448: EMPTY
42449: LIST
42450: LIST
42451: PUSH
42452: LD_INT 5
42454: PUSH
42455: LD_INT 4
42457: PUSH
42458: EMPTY
42459: LIST
42460: LIST
42461: PUSH
42462: LD_INT 5
42464: PUSH
42465: LD_INT 5
42467: PUSH
42468: EMPTY
42469: LIST
42470: LIST
42471: PUSH
42472: LD_INT 4
42474: PUSH
42475: LD_INT 5
42477: PUSH
42478: EMPTY
42479: LIST
42480: LIST
42481: PUSH
42482: LD_INT 3
42484: PUSH
42485: LD_INT 4
42487: PUSH
42488: EMPTY
42489: LIST
42490: LIST
42491: PUSH
42492: LD_INT 3
42494: PUSH
42495: LD_INT 3
42497: PUSH
42498: EMPTY
42499: LIST
42500: LIST
42501: PUSH
42502: LD_INT 5
42504: PUSH
42505: LD_INT 3
42507: PUSH
42508: EMPTY
42509: LIST
42510: LIST
42511: PUSH
42512: LD_INT 3
42514: PUSH
42515: LD_INT 5
42517: PUSH
42518: EMPTY
42519: LIST
42520: LIST
42521: PUSH
42522: LD_INT 0
42524: PUSH
42525: LD_INT 3
42527: PUSH
42528: EMPTY
42529: LIST
42530: LIST
42531: PUSH
42532: LD_INT 0
42534: PUSH
42535: LD_INT 2
42537: PUSH
42538: EMPTY
42539: LIST
42540: LIST
42541: PUSH
42542: LD_INT 1
42544: PUSH
42545: LD_INT 3
42547: PUSH
42548: EMPTY
42549: LIST
42550: LIST
42551: PUSH
42552: LD_INT 1
42554: PUSH
42555: LD_INT 4
42557: PUSH
42558: EMPTY
42559: LIST
42560: LIST
42561: PUSH
42562: LD_INT 0
42564: PUSH
42565: LD_INT 4
42567: PUSH
42568: EMPTY
42569: LIST
42570: LIST
42571: PUSH
42572: LD_INT 1
42574: NEG
42575: PUSH
42576: LD_INT 3
42578: PUSH
42579: EMPTY
42580: LIST
42581: LIST
42582: PUSH
42583: LD_INT 1
42585: NEG
42586: PUSH
42587: LD_INT 2
42589: PUSH
42590: EMPTY
42591: LIST
42592: LIST
42593: PUSH
42594: LD_INT 2
42596: PUSH
42597: LD_INT 4
42599: PUSH
42600: EMPTY
42601: LIST
42602: LIST
42603: PUSH
42604: LD_INT 2
42606: NEG
42607: PUSH
42608: LD_INT 2
42610: PUSH
42611: EMPTY
42612: LIST
42613: LIST
42614: PUSH
42615: LD_INT 4
42617: NEG
42618: PUSH
42619: LD_INT 0
42621: PUSH
42622: EMPTY
42623: LIST
42624: LIST
42625: PUSH
42626: LD_INT 4
42628: NEG
42629: PUSH
42630: LD_INT 1
42632: NEG
42633: PUSH
42634: EMPTY
42635: LIST
42636: LIST
42637: PUSH
42638: LD_INT 3
42640: NEG
42641: PUSH
42642: LD_INT 0
42644: PUSH
42645: EMPTY
42646: LIST
42647: LIST
42648: PUSH
42649: LD_INT 3
42651: NEG
42652: PUSH
42653: LD_INT 1
42655: PUSH
42656: EMPTY
42657: LIST
42658: LIST
42659: PUSH
42660: LD_INT 4
42662: NEG
42663: PUSH
42664: LD_INT 1
42666: PUSH
42667: EMPTY
42668: LIST
42669: LIST
42670: PUSH
42671: LD_INT 5
42673: NEG
42674: PUSH
42675: LD_INT 0
42677: PUSH
42678: EMPTY
42679: LIST
42680: LIST
42681: PUSH
42682: LD_INT 5
42684: NEG
42685: PUSH
42686: LD_INT 1
42688: NEG
42689: PUSH
42690: EMPTY
42691: LIST
42692: LIST
42693: PUSH
42694: LD_INT 5
42696: NEG
42697: PUSH
42698: LD_INT 2
42700: NEG
42701: PUSH
42702: EMPTY
42703: LIST
42704: LIST
42705: PUSH
42706: LD_INT 3
42708: NEG
42709: PUSH
42710: LD_INT 2
42712: PUSH
42713: EMPTY
42714: LIST
42715: LIST
42716: PUSH
42717: EMPTY
42718: LIST
42719: LIST
42720: LIST
42721: LIST
42722: LIST
42723: LIST
42724: LIST
42725: LIST
42726: LIST
42727: LIST
42728: LIST
42729: LIST
42730: LIST
42731: LIST
42732: LIST
42733: LIST
42734: LIST
42735: LIST
42736: LIST
42737: LIST
42738: LIST
42739: LIST
42740: LIST
42741: LIST
42742: LIST
42743: LIST
42744: LIST
42745: LIST
42746: LIST
42747: LIST
42748: LIST
42749: LIST
42750: LIST
42751: LIST
42752: LIST
42753: LIST
42754: LIST
42755: LIST
42756: LIST
42757: LIST
42758: LIST
42759: LIST
42760: LIST
42761: LIST
42762: LIST
42763: ST_TO_ADDR
// end ; end ;
42764: GO 42767
42766: POP
// case btype of b_depot , b_warehouse :
42767: LD_VAR 0 1
42771: PUSH
42772: LD_INT 0
42774: DOUBLE
42775: EQUAL
42776: IFTRUE 42786
42778: LD_INT 1
42780: DOUBLE
42781: EQUAL
42782: IFTRUE 42786
42784: GO 42987
42786: POP
// case nation of nation_american :
42787: LD_VAR 0 5
42791: PUSH
42792: LD_INT 1
42794: DOUBLE
42795: EQUAL
42796: IFTRUE 42800
42798: GO 42856
42800: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
42801: LD_ADDR_VAR 0 9
42805: PUSH
42806: LD_VAR 0 11
42810: PUSH
42811: LD_VAR 0 12
42815: PUSH
42816: LD_VAR 0 13
42820: PUSH
42821: LD_VAR 0 14
42825: PUSH
42826: LD_VAR 0 15
42830: PUSH
42831: LD_VAR 0 16
42835: PUSH
42836: EMPTY
42837: LIST
42838: LIST
42839: LIST
42840: LIST
42841: LIST
42842: LIST
42843: PUSH
42844: LD_VAR 0 4
42848: PUSH
42849: LD_INT 1
42851: PLUS
42852: ARRAY
42853: ST_TO_ADDR
42854: GO 42985
42856: LD_INT 2
42858: DOUBLE
42859: EQUAL
42860: IFTRUE 42864
42862: GO 42920
42864: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
42865: LD_ADDR_VAR 0 9
42869: PUSH
42870: LD_VAR 0 17
42874: PUSH
42875: LD_VAR 0 18
42879: PUSH
42880: LD_VAR 0 19
42884: PUSH
42885: LD_VAR 0 20
42889: PUSH
42890: LD_VAR 0 21
42894: PUSH
42895: LD_VAR 0 22
42899: PUSH
42900: EMPTY
42901: LIST
42902: LIST
42903: LIST
42904: LIST
42905: LIST
42906: LIST
42907: PUSH
42908: LD_VAR 0 4
42912: PUSH
42913: LD_INT 1
42915: PLUS
42916: ARRAY
42917: ST_TO_ADDR
42918: GO 42985
42920: LD_INT 3
42922: DOUBLE
42923: EQUAL
42924: IFTRUE 42928
42926: GO 42984
42928: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
42929: LD_ADDR_VAR 0 9
42933: PUSH
42934: LD_VAR 0 23
42938: PUSH
42939: LD_VAR 0 24
42943: PUSH
42944: LD_VAR 0 25
42948: PUSH
42949: LD_VAR 0 26
42953: PUSH
42954: LD_VAR 0 27
42958: PUSH
42959: LD_VAR 0 28
42963: PUSH
42964: EMPTY
42965: LIST
42966: LIST
42967: LIST
42968: LIST
42969: LIST
42970: LIST
42971: PUSH
42972: LD_VAR 0 4
42976: PUSH
42977: LD_INT 1
42979: PLUS
42980: ARRAY
42981: ST_TO_ADDR
42982: GO 42985
42984: POP
42985: GO 43540
42987: LD_INT 2
42989: DOUBLE
42990: EQUAL
42991: IFTRUE 43001
42993: LD_INT 3
42995: DOUBLE
42996: EQUAL
42997: IFTRUE 43001
42999: GO 43057
43001: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
43002: LD_ADDR_VAR 0 9
43006: PUSH
43007: LD_VAR 0 29
43011: PUSH
43012: LD_VAR 0 30
43016: PUSH
43017: LD_VAR 0 31
43021: PUSH
43022: LD_VAR 0 32
43026: PUSH
43027: LD_VAR 0 33
43031: PUSH
43032: LD_VAR 0 34
43036: PUSH
43037: EMPTY
43038: LIST
43039: LIST
43040: LIST
43041: LIST
43042: LIST
43043: LIST
43044: PUSH
43045: LD_VAR 0 4
43049: PUSH
43050: LD_INT 1
43052: PLUS
43053: ARRAY
43054: ST_TO_ADDR
43055: GO 43540
43057: LD_INT 16
43059: DOUBLE
43060: EQUAL
43061: IFTRUE 43119
43063: LD_INT 17
43065: DOUBLE
43066: EQUAL
43067: IFTRUE 43119
43069: LD_INT 18
43071: DOUBLE
43072: EQUAL
43073: IFTRUE 43119
43075: LD_INT 19
43077: DOUBLE
43078: EQUAL
43079: IFTRUE 43119
43081: LD_INT 22
43083: DOUBLE
43084: EQUAL
43085: IFTRUE 43119
43087: LD_INT 20
43089: DOUBLE
43090: EQUAL
43091: IFTRUE 43119
43093: LD_INT 21
43095: DOUBLE
43096: EQUAL
43097: IFTRUE 43119
43099: LD_INT 23
43101: DOUBLE
43102: EQUAL
43103: IFTRUE 43119
43105: LD_INT 24
43107: DOUBLE
43108: EQUAL
43109: IFTRUE 43119
43111: LD_INT 25
43113: DOUBLE
43114: EQUAL
43115: IFTRUE 43119
43117: GO 43175
43119: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
43120: LD_ADDR_VAR 0 9
43124: PUSH
43125: LD_VAR 0 35
43129: PUSH
43130: LD_VAR 0 36
43134: PUSH
43135: LD_VAR 0 37
43139: PUSH
43140: LD_VAR 0 38
43144: PUSH
43145: LD_VAR 0 39
43149: PUSH
43150: LD_VAR 0 40
43154: PUSH
43155: EMPTY
43156: LIST
43157: LIST
43158: LIST
43159: LIST
43160: LIST
43161: LIST
43162: PUSH
43163: LD_VAR 0 4
43167: PUSH
43168: LD_INT 1
43170: PLUS
43171: ARRAY
43172: ST_TO_ADDR
43173: GO 43540
43175: LD_INT 6
43177: DOUBLE
43178: EQUAL
43179: IFTRUE 43231
43181: LD_INT 7
43183: DOUBLE
43184: EQUAL
43185: IFTRUE 43231
43187: LD_INT 8
43189: DOUBLE
43190: EQUAL
43191: IFTRUE 43231
43193: LD_INT 13
43195: DOUBLE
43196: EQUAL
43197: IFTRUE 43231
43199: LD_INT 12
43201: DOUBLE
43202: EQUAL
43203: IFTRUE 43231
43205: LD_INT 15
43207: DOUBLE
43208: EQUAL
43209: IFTRUE 43231
43211: LD_INT 11
43213: DOUBLE
43214: EQUAL
43215: IFTRUE 43231
43217: LD_INT 14
43219: DOUBLE
43220: EQUAL
43221: IFTRUE 43231
43223: LD_INT 10
43225: DOUBLE
43226: EQUAL
43227: IFTRUE 43231
43229: GO 43287
43231: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
43232: LD_ADDR_VAR 0 9
43236: PUSH
43237: LD_VAR 0 41
43241: PUSH
43242: LD_VAR 0 42
43246: PUSH
43247: LD_VAR 0 43
43251: PUSH
43252: LD_VAR 0 44
43256: PUSH
43257: LD_VAR 0 45
43261: PUSH
43262: LD_VAR 0 46
43266: PUSH
43267: EMPTY
43268: LIST
43269: LIST
43270: LIST
43271: LIST
43272: LIST
43273: LIST
43274: PUSH
43275: LD_VAR 0 4
43279: PUSH
43280: LD_INT 1
43282: PLUS
43283: ARRAY
43284: ST_TO_ADDR
43285: GO 43540
43287: LD_INT 36
43289: DOUBLE
43290: EQUAL
43291: IFTRUE 43295
43293: GO 43351
43295: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
43296: LD_ADDR_VAR 0 9
43300: PUSH
43301: LD_VAR 0 47
43305: PUSH
43306: LD_VAR 0 48
43310: PUSH
43311: LD_VAR 0 49
43315: PUSH
43316: LD_VAR 0 50
43320: PUSH
43321: LD_VAR 0 51
43325: PUSH
43326: LD_VAR 0 52
43330: PUSH
43331: EMPTY
43332: LIST
43333: LIST
43334: LIST
43335: LIST
43336: LIST
43337: LIST
43338: PUSH
43339: LD_VAR 0 4
43343: PUSH
43344: LD_INT 1
43346: PLUS
43347: ARRAY
43348: ST_TO_ADDR
43349: GO 43540
43351: LD_INT 4
43353: DOUBLE
43354: EQUAL
43355: IFTRUE 43377
43357: LD_INT 5
43359: DOUBLE
43360: EQUAL
43361: IFTRUE 43377
43363: LD_INT 34
43365: DOUBLE
43366: EQUAL
43367: IFTRUE 43377
43369: LD_INT 37
43371: DOUBLE
43372: EQUAL
43373: IFTRUE 43377
43375: GO 43433
43377: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
43378: LD_ADDR_VAR 0 9
43382: PUSH
43383: LD_VAR 0 53
43387: PUSH
43388: LD_VAR 0 54
43392: PUSH
43393: LD_VAR 0 55
43397: PUSH
43398: LD_VAR 0 56
43402: PUSH
43403: LD_VAR 0 57
43407: PUSH
43408: LD_VAR 0 58
43412: PUSH
43413: EMPTY
43414: LIST
43415: LIST
43416: LIST
43417: LIST
43418: LIST
43419: LIST
43420: PUSH
43421: LD_VAR 0 4
43425: PUSH
43426: LD_INT 1
43428: PLUS
43429: ARRAY
43430: ST_TO_ADDR
43431: GO 43540
43433: LD_INT 31
43435: DOUBLE
43436: EQUAL
43437: IFTRUE 43483
43439: LD_INT 32
43441: DOUBLE
43442: EQUAL
43443: IFTRUE 43483
43445: LD_INT 33
43447: DOUBLE
43448: EQUAL
43449: IFTRUE 43483
43451: LD_INT 27
43453: DOUBLE
43454: EQUAL
43455: IFTRUE 43483
43457: LD_INT 26
43459: DOUBLE
43460: EQUAL
43461: IFTRUE 43483
43463: LD_INT 28
43465: DOUBLE
43466: EQUAL
43467: IFTRUE 43483
43469: LD_INT 29
43471: DOUBLE
43472: EQUAL
43473: IFTRUE 43483
43475: LD_INT 30
43477: DOUBLE
43478: EQUAL
43479: IFTRUE 43483
43481: GO 43539
43483: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
43484: LD_ADDR_VAR 0 9
43488: PUSH
43489: LD_VAR 0 59
43493: PUSH
43494: LD_VAR 0 60
43498: PUSH
43499: LD_VAR 0 61
43503: PUSH
43504: LD_VAR 0 62
43508: PUSH
43509: LD_VAR 0 63
43513: PUSH
43514: LD_VAR 0 64
43518: PUSH
43519: EMPTY
43520: LIST
43521: LIST
43522: LIST
43523: LIST
43524: LIST
43525: LIST
43526: PUSH
43527: LD_VAR 0 4
43531: PUSH
43532: LD_INT 1
43534: PLUS
43535: ARRAY
43536: ST_TO_ADDR
43537: GO 43540
43539: POP
// temp_list2 = [ ] ;
43540: LD_ADDR_VAR 0 10
43544: PUSH
43545: EMPTY
43546: ST_TO_ADDR
// for i in temp_list do
43547: LD_ADDR_VAR 0 8
43551: PUSH
43552: LD_VAR 0 9
43556: PUSH
43557: FOR_IN
43558: IFFALSE 43610
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
43560: LD_ADDR_VAR 0 10
43564: PUSH
43565: LD_VAR 0 10
43569: PUSH
43570: LD_VAR 0 8
43574: PUSH
43575: LD_INT 1
43577: ARRAY
43578: PUSH
43579: LD_VAR 0 2
43583: PLUS
43584: PUSH
43585: LD_VAR 0 8
43589: PUSH
43590: LD_INT 2
43592: ARRAY
43593: PUSH
43594: LD_VAR 0 3
43598: PLUS
43599: PUSH
43600: EMPTY
43601: LIST
43602: LIST
43603: PUSH
43604: EMPTY
43605: LIST
43606: ADD
43607: ST_TO_ADDR
43608: GO 43557
43610: POP
43611: POP
// result = temp_list2 ;
43612: LD_ADDR_VAR 0 7
43616: PUSH
43617: LD_VAR 0 10
43621: ST_TO_ADDR
// end ;
43622: LD_VAR 0 7
43626: RET
// export function EnemyInRange ( unit , dist ) ; begin
43627: LD_INT 0
43629: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
43630: LD_ADDR_VAR 0 3
43634: PUSH
43635: LD_VAR 0 1
43639: PPUSH
43640: CALL_OW 255
43644: PPUSH
43645: LD_VAR 0 1
43649: PPUSH
43650: CALL_OW 250
43654: PPUSH
43655: LD_VAR 0 1
43659: PPUSH
43660: CALL_OW 251
43664: PPUSH
43665: LD_VAR 0 2
43669: PPUSH
43670: CALL 16884 0 4
43674: PUSH
43675: LD_INT 4
43677: ARRAY
43678: ST_TO_ADDR
// end ;
43679: LD_VAR 0 3
43683: RET
// export function PlayerSeeMe ( unit ) ; begin
43684: LD_INT 0
43686: PPUSH
// result := See ( your_side , unit ) ;
43687: LD_ADDR_VAR 0 2
43691: PUSH
43692: LD_OWVAR 2
43696: PPUSH
43697: LD_VAR 0 1
43701: PPUSH
43702: CALL_OW 292
43706: ST_TO_ADDR
// end ;
43707: LD_VAR 0 2
43711: RET
// export function ReverseDir ( unit ) ; begin
43712: LD_INT 0
43714: PPUSH
// if not unit then
43715: LD_VAR 0 1
43719: NOT
43720: IFFALSE 43724
// exit ;
43722: GO 43747
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
43724: LD_ADDR_VAR 0 2
43728: PUSH
43729: LD_VAR 0 1
43733: PPUSH
43734: CALL_OW 254
43738: PUSH
43739: LD_INT 3
43741: PLUS
43742: PUSH
43743: LD_INT 6
43745: MOD
43746: ST_TO_ADDR
// end ;
43747: LD_VAR 0 2
43751: RET
// export function ReverseArray ( array ) ; var i ; begin
43752: LD_INT 0
43754: PPUSH
43755: PPUSH
// if not array then
43756: LD_VAR 0 1
43760: NOT
43761: IFFALSE 43765
// exit ;
43763: GO 43820
// result := [ ] ;
43765: LD_ADDR_VAR 0 2
43769: PUSH
43770: EMPTY
43771: ST_TO_ADDR
// for i := array downto 1 do
43772: LD_ADDR_VAR 0 3
43776: PUSH
43777: DOUBLE
43778: LD_VAR 0 1
43782: INC
43783: ST_TO_ADDR
43784: LD_INT 1
43786: PUSH
43787: FOR_DOWNTO
43788: IFFALSE 43818
// result := Join ( result , array [ i ] ) ;
43790: LD_ADDR_VAR 0 2
43794: PUSH
43795: LD_VAR 0 2
43799: PPUSH
43800: LD_VAR 0 1
43804: PUSH
43805: LD_VAR 0 3
43809: ARRAY
43810: PPUSH
43811: CALL 48662 0 2
43815: ST_TO_ADDR
43816: GO 43787
43818: POP
43819: POP
// end ;
43820: LD_VAR 0 2
43824: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
43825: LD_INT 0
43827: PPUSH
43828: PPUSH
43829: PPUSH
43830: PPUSH
43831: PPUSH
43832: PPUSH
// if not unit or not hexes then
43833: LD_VAR 0 1
43837: NOT
43838: IFTRUE 43847
43840: PUSH
43841: LD_VAR 0 2
43845: NOT
43846: OR
43847: IFFALSE 43851
// exit ;
43849: GO 43974
// dist := 9999 ;
43851: LD_ADDR_VAR 0 5
43855: PUSH
43856: LD_INT 9999
43858: ST_TO_ADDR
// for i = 1 to hexes do
43859: LD_ADDR_VAR 0 4
43863: PUSH
43864: DOUBLE
43865: LD_INT 1
43867: DEC
43868: ST_TO_ADDR
43869: LD_VAR 0 2
43873: PUSH
43874: FOR_TO
43875: IFFALSE 43962
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
43877: LD_ADDR_VAR 0 6
43881: PUSH
43882: LD_VAR 0 1
43886: PPUSH
43887: LD_VAR 0 2
43891: PUSH
43892: LD_VAR 0 4
43896: ARRAY
43897: PUSH
43898: LD_INT 1
43900: ARRAY
43901: PPUSH
43902: LD_VAR 0 2
43906: PUSH
43907: LD_VAR 0 4
43911: ARRAY
43912: PUSH
43913: LD_INT 2
43915: ARRAY
43916: PPUSH
43917: CALL_OW 297
43921: ST_TO_ADDR
// if tdist < dist then
43922: LD_VAR 0 6
43926: PUSH
43927: LD_VAR 0 5
43931: LESS
43932: IFFALSE 43960
// begin hex := hexes [ i ] ;
43934: LD_ADDR_VAR 0 8
43938: PUSH
43939: LD_VAR 0 2
43943: PUSH
43944: LD_VAR 0 4
43948: ARRAY
43949: ST_TO_ADDR
// dist := tdist ;
43950: LD_ADDR_VAR 0 5
43954: PUSH
43955: LD_VAR 0 6
43959: ST_TO_ADDR
// end ; end ;
43960: GO 43874
43962: POP
43963: POP
// result := hex ;
43964: LD_ADDR_VAR 0 3
43968: PUSH
43969: LD_VAR 0 8
43973: ST_TO_ADDR
// end ;
43974: LD_VAR 0 3
43978: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
43979: LD_INT 0
43981: PPUSH
43982: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
43983: LD_VAR 0 1
43987: NOT
43988: IFTRUE 44027
43990: PUSH
43991: LD_VAR 0 1
43995: PUSH
43996: LD_INT 21
43998: PUSH
43999: LD_INT 2
44001: PUSH
44002: EMPTY
44003: LIST
44004: LIST
44005: PUSH
44006: LD_INT 23
44008: PUSH
44009: LD_INT 2
44011: PUSH
44012: EMPTY
44013: LIST
44014: LIST
44015: PUSH
44016: EMPTY
44017: LIST
44018: LIST
44019: PPUSH
44020: CALL_OW 69
44024: IN
44025: NOT
44026: OR
44027: IFFALSE 44031
// exit ;
44029: GO 44078
// for i = 1 to 3 do
44031: LD_ADDR_VAR 0 3
44035: PUSH
44036: DOUBLE
44037: LD_INT 1
44039: DEC
44040: ST_TO_ADDR
44041: LD_INT 3
44043: PUSH
44044: FOR_TO
44045: IFFALSE 44076
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
44047: LD_VAR 0 1
44051: PPUSH
44052: CALL_OW 250
44056: PPUSH
44057: LD_VAR 0 1
44061: PPUSH
44062: CALL_OW 251
44066: PPUSH
44067: LD_INT 1
44069: PPUSH
44070: CALL_OW 453
44074: GO 44044
44076: POP
44077: POP
// end ;
44078: LD_VAR 0 2
44082: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
44083: LD_INT 0
44085: PPUSH
44086: PPUSH
44087: PPUSH
44088: PPUSH
44089: PPUSH
44090: PPUSH
// if not unit or not enemy_unit then
44091: LD_VAR 0 1
44095: NOT
44096: IFTRUE 44105
44098: PUSH
44099: LD_VAR 0 2
44103: NOT
44104: OR
44105: IFFALSE 44109
// exit ;
44107: GO 44580
// if GetLives ( i ) < 250 then
44109: LD_VAR 0 4
44113: PPUSH
44114: CALL_OW 256
44118: PUSH
44119: LD_INT 250
44121: LESS
44122: IFFALSE 44135
// begin ComAutodestruct ( i ) ;
44124: LD_VAR 0 4
44128: PPUSH
44129: CALL 43979 0 1
// exit ;
44133: GO 44580
// end ; x := GetX ( enemy_unit ) ;
44135: LD_ADDR_VAR 0 7
44139: PUSH
44140: LD_VAR 0 2
44144: PPUSH
44145: CALL_OW 250
44149: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
44150: LD_ADDR_VAR 0 8
44154: PUSH
44155: LD_VAR 0 2
44159: PPUSH
44160: CALL_OW 251
44164: ST_TO_ADDR
// if not x or not y then
44165: LD_VAR 0 7
44169: NOT
44170: IFTRUE 44179
44172: PUSH
44173: LD_VAR 0 8
44177: NOT
44178: OR
44179: IFFALSE 44183
// exit ;
44181: GO 44580
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
44183: LD_ADDR_VAR 0 6
44187: PUSH
44188: LD_VAR 0 7
44192: PPUSH
44193: LD_INT 0
44195: PPUSH
44196: LD_INT 4
44198: PPUSH
44199: CALL_OW 272
44203: PUSH
44204: LD_VAR 0 8
44208: PPUSH
44209: LD_INT 0
44211: PPUSH
44212: LD_INT 4
44214: PPUSH
44215: CALL_OW 273
44219: PUSH
44220: EMPTY
44221: LIST
44222: LIST
44223: PUSH
44224: LD_VAR 0 7
44228: PPUSH
44229: LD_INT 1
44231: PPUSH
44232: LD_INT 4
44234: PPUSH
44235: CALL_OW 272
44239: PUSH
44240: LD_VAR 0 8
44244: PPUSH
44245: LD_INT 1
44247: PPUSH
44248: LD_INT 4
44250: PPUSH
44251: CALL_OW 273
44255: PUSH
44256: EMPTY
44257: LIST
44258: LIST
44259: PUSH
44260: LD_VAR 0 7
44264: PPUSH
44265: LD_INT 2
44267: PPUSH
44268: LD_INT 4
44270: PPUSH
44271: CALL_OW 272
44275: PUSH
44276: LD_VAR 0 8
44280: PPUSH
44281: LD_INT 2
44283: PPUSH
44284: LD_INT 4
44286: PPUSH
44287: CALL_OW 273
44291: PUSH
44292: EMPTY
44293: LIST
44294: LIST
44295: PUSH
44296: LD_VAR 0 7
44300: PPUSH
44301: LD_INT 3
44303: PPUSH
44304: LD_INT 4
44306: PPUSH
44307: CALL_OW 272
44311: PUSH
44312: LD_VAR 0 8
44316: PPUSH
44317: LD_INT 3
44319: PPUSH
44320: LD_INT 4
44322: PPUSH
44323: CALL_OW 273
44327: PUSH
44328: EMPTY
44329: LIST
44330: LIST
44331: PUSH
44332: LD_VAR 0 7
44336: PPUSH
44337: LD_INT 4
44339: PPUSH
44340: LD_INT 4
44342: PPUSH
44343: CALL_OW 272
44347: PUSH
44348: LD_VAR 0 8
44352: PPUSH
44353: LD_INT 4
44355: PPUSH
44356: LD_INT 4
44358: PPUSH
44359: CALL_OW 273
44363: PUSH
44364: EMPTY
44365: LIST
44366: LIST
44367: PUSH
44368: LD_VAR 0 7
44372: PPUSH
44373: LD_INT 5
44375: PPUSH
44376: LD_INT 4
44378: PPUSH
44379: CALL_OW 272
44383: PUSH
44384: LD_VAR 0 8
44388: PPUSH
44389: LD_INT 5
44391: PPUSH
44392: LD_INT 4
44394: PPUSH
44395: CALL_OW 273
44399: PUSH
44400: EMPTY
44401: LIST
44402: LIST
44403: PUSH
44404: EMPTY
44405: LIST
44406: LIST
44407: LIST
44408: LIST
44409: LIST
44410: LIST
44411: ST_TO_ADDR
// for i = tmp downto 1 do
44412: LD_ADDR_VAR 0 4
44416: PUSH
44417: DOUBLE
44418: LD_VAR 0 6
44422: INC
44423: ST_TO_ADDR
44424: LD_INT 1
44426: PUSH
44427: FOR_DOWNTO
44428: IFFALSE 44531
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
44430: LD_VAR 0 6
44434: PUSH
44435: LD_VAR 0 4
44439: ARRAY
44440: PUSH
44441: LD_INT 1
44443: ARRAY
44444: PPUSH
44445: LD_VAR 0 6
44449: PUSH
44450: LD_VAR 0 4
44454: ARRAY
44455: PUSH
44456: LD_INT 2
44458: ARRAY
44459: PPUSH
44460: CALL_OW 488
44464: NOT
44465: IFTRUE 44507
44467: PUSH
44468: LD_VAR 0 6
44472: PUSH
44473: LD_VAR 0 4
44477: ARRAY
44478: PUSH
44479: LD_INT 1
44481: ARRAY
44482: PPUSH
44483: LD_VAR 0 6
44487: PUSH
44488: LD_VAR 0 4
44492: ARRAY
44493: PUSH
44494: LD_INT 2
44496: ARRAY
44497: PPUSH
44498: CALL_OW 428
44502: PUSH
44503: LD_INT 0
44505: NONEQUAL
44506: OR
44507: IFFALSE 44529
// tmp := Delete ( tmp , i ) ;
44509: LD_ADDR_VAR 0 6
44513: PUSH
44514: LD_VAR 0 6
44518: PPUSH
44519: LD_VAR 0 4
44523: PPUSH
44524: CALL_OW 3
44528: ST_TO_ADDR
44529: GO 44427
44531: POP
44532: POP
// j := GetClosestHex ( unit , tmp ) ;
44533: LD_ADDR_VAR 0 5
44537: PUSH
44538: LD_VAR 0 1
44542: PPUSH
44543: LD_VAR 0 6
44547: PPUSH
44548: CALL 43825 0 2
44552: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
44553: LD_VAR 0 1
44557: PPUSH
44558: LD_VAR 0 5
44562: PUSH
44563: LD_INT 1
44565: ARRAY
44566: PPUSH
44567: LD_VAR 0 5
44571: PUSH
44572: LD_INT 2
44574: ARRAY
44575: PPUSH
44576: CALL_OW 111
// end ;
44580: LD_VAR 0 3
44584: RET
// export function PrepareApemanSoldier ( ) ; begin
44585: LD_INT 0
44587: PPUSH
// uc_nation := 0 ;
44588: LD_ADDR_OWVAR 21
44592: PUSH
44593: LD_INT 0
44595: ST_TO_ADDR
// hc_sex := sex_male ;
44596: LD_ADDR_OWVAR 27
44600: PUSH
44601: LD_INT 1
44603: ST_TO_ADDR
// hc_name :=  ;
44604: LD_ADDR_OWVAR 26
44608: PUSH
44609: LD_STRING 
44611: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
44612: LD_ADDR_OWVAR 28
44616: PUSH
44617: LD_INT 15
44619: ST_TO_ADDR
// hc_gallery :=  ;
44620: LD_ADDR_OWVAR 33
44624: PUSH
44625: LD_STRING 
44627: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
44628: LD_ADDR_OWVAR 31
44632: PUSH
44633: LD_INT 0
44635: PPUSH
44636: LD_INT 3
44638: PPUSH
44639: CALL_OW 12
44643: PUSH
44644: LD_INT 0
44646: PPUSH
44647: LD_INT 3
44649: PPUSH
44650: CALL_OW 12
44654: PUSH
44655: LD_INT 0
44657: PUSH
44658: LD_INT 0
44660: PUSH
44661: EMPTY
44662: LIST
44663: LIST
44664: LIST
44665: LIST
44666: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
44667: LD_ADDR_OWVAR 29
44671: PUSH
44672: LD_INT 12
44674: PUSH
44675: LD_INT 12
44677: PUSH
44678: EMPTY
44679: LIST
44680: LIST
44681: ST_TO_ADDR
// end ;
44682: LD_VAR 0 1
44686: RET
// export function PrepareApemanEngineer ( ) ; begin
44687: LD_INT 0
44689: PPUSH
// uc_nation := 0 ;
44690: LD_ADDR_OWVAR 21
44694: PUSH
44695: LD_INT 0
44697: ST_TO_ADDR
// hc_sex := sex_male ;
44698: LD_ADDR_OWVAR 27
44702: PUSH
44703: LD_INT 1
44705: ST_TO_ADDR
// hc_name :=  ;
44706: LD_ADDR_OWVAR 26
44710: PUSH
44711: LD_STRING 
44713: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
44714: LD_ADDR_OWVAR 28
44718: PUSH
44719: LD_INT 16
44721: ST_TO_ADDR
// hc_gallery :=  ;
44722: LD_ADDR_OWVAR 33
44726: PUSH
44727: LD_STRING 
44729: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
44730: LD_ADDR_OWVAR 31
44734: PUSH
44735: LD_INT 0
44737: PPUSH
44738: LD_INT 3
44740: PPUSH
44741: CALL_OW 12
44745: PUSH
44746: LD_INT 0
44748: PPUSH
44749: LD_INT 3
44751: PPUSH
44752: CALL_OW 12
44756: PUSH
44757: LD_INT 0
44759: PUSH
44760: LD_INT 0
44762: PUSH
44763: EMPTY
44764: LIST
44765: LIST
44766: LIST
44767: LIST
44768: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
44769: LD_ADDR_OWVAR 29
44773: PUSH
44774: LD_INT 12
44776: PUSH
44777: LD_INT 12
44779: PUSH
44780: EMPTY
44781: LIST
44782: LIST
44783: ST_TO_ADDR
// end ;
44784: LD_VAR 0 1
44788: RET
// export function PrepareApeman ( agressivity ) ; begin
44789: LD_INT 0
44791: PPUSH
// uc_side := 0 ;
44792: LD_ADDR_OWVAR 20
44796: PUSH
44797: LD_INT 0
44799: ST_TO_ADDR
// uc_nation := 0 ;
44800: LD_ADDR_OWVAR 21
44804: PUSH
44805: LD_INT 0
44807: ST_TO_ADDR
// hc_sex := sex_male ;
44808: LD_ADDR_OWVAR 27
44812: PUSH
44813: LD_INT 1
44815: ST_TO_ADDR
// hc_class := class_apeman ;
44816: LD_ADDR_OWVAR 28
44820: PUSH
44821: LD_INT 12
44823: ST_TO_ADDR
// hc_gallery :=  ;
44824: LD_ADDR_OWVAR 33
44828: PUSH
44829: LD_STRING 
44831: ST_TO_ADDR
// hc_name :=  ;
44832: LD_ADDR_OWVAR 26
44836: PUSH
44837: LD_STRING 
44839: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
44840: LD_ADDR_OWVAR 29
44844: PUSH
44845: LD_INT 12
44847: PUSH
44848: LD_INT 12
44850: PUSH
44851: EMPTY
44852: LIST
44853: LIST
44854: ST_TO_ADDR
// if agressivity = 0 then
44855: LD_VAR 0 1
44859: PUSH
44860: LD_INT 0
44862: EQUAL
44863: IFFALSE 44875
// hc_agressivity := 0 else
44865: LD_ADDR_OWVAR 35
44869: PUSH
44870: LD_INT 0
44872: ST_TO_ADDR
44873: GO 44896
// hc_agressivity := rand ( - agressivity , agressivity ) ;
44875: LD_ADDR_OWVAR 35
44879: PUSH
44880: LD_VAR 0 1
44884: NEG
44885: PPUSH
44886: LD_VAR 0 1
44890: PPUSH
44891: CALL_OW 12
44895: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
44896: LD_ADDR_OWVAR 31
44900: PUSH
44901: LD_INT 0
44903: PPUSH
44904: LD_INT 3
44906: PPUSH
44907: CALL_OW 12
44911: PUSH
44912: LD_INT 0
44914: PPUSH
44915: LD_INT 3
44917: PPUSH
44918: CALL_OW 12
44922: PUSH
44923: LD_INT 0
44925: PUSH
44926: LD_INT 0
44928: PUSH
44929: EMPTY
44930: LIST
44931: LIST
44932: LIST
44933: LIST
44934: ST_TO_ADDR
// end ;
44935: LD_VAR 0 2
44939: RET
// export function PrepareTiger ( agressivity ) ; begin
44940: LD_INT 0
44942: PPUSH
// uc_side := 0 ;
44943: LD_ADDR_OWVAR 20
44947: PUSH
44948: LD_INT 0
44950: ST_TO_ADDR
// uc_nation := 0 ;
44951: LD_ADDR_OWVAR 21
44955: PUSH
44956: LD_INT 0
44958: ST_TO_ADDR
// InitHc ;
44959: CALL_OW 19
// hc_class := class_tiger ;
44963: LD_ADDR_OWVAR 28
44967: PUSH
44968: LD_INT 14
44970: ST_TO_ADDR
// hc_gallery :=  ;
44971: LD_ADDR_OWVAR 33
44975: PUSH
44976: LD_STRING 
44978: ST_TO_ADDR
// hc_name :=  ;
44979: LD_ADDR_OWVAR 26
44983: PUSH
44984: LD_STRING 
44986: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
44987: LD_ADDR_OWVAR 35
44991: PUSH
44992: LD_VAR 0 1
44996: NEG
44997: PPUSH
44998: LD_VAR 0 1
45002: PPUSH
45003: CALL_OW 12
45007: ST_TO_ADDR
// end ;
45008: LD_VAR 0 2
45012: RET
// export function PrepareEnchidna ( ) ; begin
45013: LD_INT 0
45015: PPUSH
// uc_side := 0 ;
45016: LD_ADDR_OWVAR 20
45020: PUSH
45021: LD_INT 0
45023: ST_TO_ADDR
// uc_nation := 0 ;
45024: LD_ADDR_OWVAR 21
45028: PUSH
45029: LD_INT 0
45031: ST_TO_ADDR
// InitHc ;
45032: CALL_OW 19
// hc_class := class_baggie ;
45036: LD_ADDR_OWVAR 28
45040: PUSH
45041: LD_INT 13
45043: ST_TO_ADDR
// hc_gallery :=  ;
45044: LD_ADDR_OWVAR 33
45048: PUSH
45049: LD_STRING 
45051: ST_TO_ADDR
// hc_name :=  ;
45052: LD_ADDR_OWVAR 26
45056: PUSH
45057: LD_STRING 
45059: ST_TO_ADDR
// end ;
45060: LD_VAR 0 1
45064: RET
// export function PrepareFrog ( ) ; begin
45065: LD_INT 0
45067: PPUSH
// uc_side := 0 ;
45068: LD_ADDR_OWVAR 20
45072: PUSH
45073: LD_INT 0
45075: ST_TO_ADDR
// uc_nation := 0 ;
45076: LD_ADDR_OWVAR 21
45080: PUSH
45081: LD_INT 0
45083: ST_TO_ADDR
// InitHc ;
45084: CALL_OW 19
// hc_class := class_frog ;
45088: LD_ADDR_OWVAR 28
45092: PUSH
45093: LD_INT 19
45095: ST_TO_ADDR
// hc_gallery :=  ;
45096: LD_ADDR_OWVAR 33
45100: PUSH
45101: LD_STRING 
45103: ST_TO_ADDR
// hc_name :=  ;
45104: LD_ADDR_OWVAR 26
45108: PUSH
45109: LD_STRING 
45111: ST_TO_ADDR
// end ;
45112: LD_VAR 0 1
45116: RET
// export function PrepareFish ( ) ; begin
45117: LD_INT 0
45119: PPUSH
// uc_side := 0 ;
45120: LD_ADDR_OWVAR 20
45124: PUSH
45125: LD_INT 0
45127: ST_TO_ADDR
// uc_nation := 0 ;
45128: LD_ADDR_OWVAR 21
45132: PUSH
45133: LD_INT 0
45135: ST_TO_ADDR
// InitHc ;
45136: CALL_OW 19
// hc_class := class_fish ;
45140: LD_ADDR_OWVAR 28
45144: PUSH
45145: LD_INT 20
45147: ST_TO_ADDR
// hc_gallery :=  ;
45148: LD_ADDR_OWVAR 33
45152: PUSH
45153: LD_STRING 
45155: ST_TO_ADDR
// hc_name :=  ;
45156: LD_ADDR_OWVAR 26
45160: PUSH
45161: LD_STRING 
45163: ST_TO_ADDR
// end ;
45164: LD_VAR 0 1
45168: RET
// export function PrepareBird ( ) ; begin
45169: LD_INT 0
45171: PPUSH
// uc_side := 0 ;
45172: LD_ADDR_OWVAR 20
45176: PUSH
45177: LD_INT 0
45179: ST_TO_ADDR
// uc_nation := 0 ;
45180: LD_ADDR_OWVAR 21
45184: PUSH
45185: LD_INT 0
45187: ST_TO_ADDR
// InitHc ;
45188: CALL_OW 19
// hc_class := class_phororhacos ;
45192: LD_ADDR_OWVAR 28
45196: PUSH
45197: LD_INT 18
45199: ST_TO_ADDR
// hc_gallery :=  ;
45200: LD_ADDR_OWVAR 33
45204: PUSH
45205: LD_STRING 
45207: ST_TO_ADDR
// hc_name :=  ;
45208: LD_ADDR_OWVAR 26
45212: PUSH
45213: LD_STRING 
45215: ST_TO_ADDR
// end ;
45216: LD_VAR 0 1
45220: RET
// export function PrepareHorse ( ) ; begin
45221: LD_INT 0
45223: PPUSH
// uc_side := 0 ;
45224: LD_ADDR_OWVAR 20
45228: PUSH
45229: LD_INT 0
45231: ST_TO_ADDR
// uc_nation := 0 ;
45232: LD_ADDR_OWVAR 21
45236: PUSH
45237: LD_INT 0
45239: ST_TO_ADDR
// InitHc ;
45240: CALL_OW 19
// hc_class := class_horse ;
45244: LD_ADDR_OWVAR 28
45248: PUSH
45249: LD_INT 21
45251: ST_TO_ADDR
// hc_gallery :=  ;
45252: LD_ADDR_OWVAR 33
45256: PUSH
45257: LD_STRING 
45259: ST_TO_ADDR
// hc_name :=  ;
45260: LD_ADDR_OWVAR 26
45264: PUSH
45265: LD_STRING 
45267: ST_TO_ADDR
// end ;
45268: LD_VAR 0 1
45272: RET
// export function PrepareMastodont ( ) ; begin
45273: LD_INT 0
45275: PPUSH
// uc_side := 0 ;
45276: LD_ADDR_OWVAR 20
45280: PUSH
45281: LD_INT 0
45283: ST_TO_ADDR
// uc_nation := 0 ;
45284: LD_ADDR_OWVAR 21
45288: PUSH
45289: LD_INT 0
45291: ST_TO_ADDR
// vc_chassis := class_mastodont ;
45292: LD_ADDR_OWVAR 37
45296: PUSH
45297: LD_INT 31
45299: ST_TO_ADDR
// vc_control := control_rider ;
45300: LD_ADDR_OWVAR 38
45304: PUSH
45305: LD_INT 4
45307: ST_TO_ADDR
// end ;
45308: LD_VAR 0 1
45312: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
45313: LD_INT 0
45315: PPUSH
45316: PPUSH
45317: PPUSH
// uc_side = 0 ;
45318: LD_ADDR_OWVAR 20
45322: PUSH
45323: LD_INT 0
45325: ST_TO_ADDR
// uc_nation = 0 ;
45326: LD_ADDR_OWVAR 21
45330: PUSH
45331: LD_INT 0
45333: ST_TO_ADDR
// InitHc_All ( ) ;
45334: CALL_OW 584
// InitVc ;
45338: CALL_OW 20
// if mastodonts then
45342: LD_VAR 0 6
45346: IFFALSE 45413
// for i = 1 to mastodonts do
45348: LD_ADDR_VAR 0 11
45352: PUSH
45353: DOUBLE
45354: LD_INT 1
45356: DEC
45357: ST_TO_ADDR
45358: LD_VAR 0 6
45362: PUSH
45363: FOR_TO
45364: IFFALSE 45411
// begin vc_chassis := 31 ;
45366: LD_ADDR_OWVAR 37
45370: PUSH
45371: LD_INT 31
45373: ST_TO_ADDR
// vc_control := control_rider ;
45374: LD_ADDR_OWVAR 38
45378: PUSH
45379: LD_INT 4
45381: ST_TO_ADDR
// animal := CreateVehicle ;
45382: LD_ADDR_VAR 0 12
45386: PUSH
45387: CALL_OW 45
45391: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
45392: LD_VAR 0 12
45396: PPUSH
45397: LD_VAR 0 8
45401: PPUSH
45402: LD_INT 0
45404: PPUSH
45405: CALL 47555 0 3
// end ;
45409: GO 45363
45411: POP
45412: POP
// if horses then
45413: LD_VAR 0 5
45417: IFFALSE 45484
// for i = 1 to horses do
45419: LD_ADDR_VAR 0 11
45423: PUSH
45424: DOUBLE
45425: LD_INT 1
45427: DEC
45428: ST_TO_ADDR
45429: LD_VAR 0 5
45433: PUSH
45434: FOR_TO
45435: IFFALSE 45482
// begin hc_class := 21 ;
45437: LD_ADDR_OWVAR 28
45441: PUSH
45442: LD_INT 21
45444: ST_TO_ADDR
// hc_gallery :=  ;
45445: LD_ADDR_OWVAR 33
45449: PUSH
45450: LD_STRING 
45452: ST_TO_ADDR
// animal := CreateHuman ;
45453: LD_ADDR_VAR 0 12
45457: PUSH
45458: CALL_OW 44
45462: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
45463: LD_VAR 0 12
45467: PPUSH
45468: LD_VAR 0 8
45472: PPUSH
45473: LD_INT 0
45475: PPUSH
45476: CALL 47555 0 3
// end ;
45480: GO 45434
45482: POP
45483: POP
// if birds then
45484: LD_VAR 0 1
45488: IFFALSE 45555
// for i = 1 to birds do
45490: LD_ADDR_VAR 0 11
45494: PUSH
45495: DOUBLE
45496: LD_INT 1
45498: DEC
45499: ST_TO_ADDR
45500: LD_VAR 0 1
45504: PUSH
45505: FOR_TO
45506: IFFALSE 45553
// begin hc_class := 18 ;
45508: LD_ADDR_OWVAR 28
45512: PUSH
45513: LD_INT 18
45515: ST_TO_ADDR
// hc_gallery =  ;
45516: LD_ADDR_OWVAR 33
45520: PUSH
45521: LD_STRING 
45523: ST_TO_ADDR
// animal := CreateHuman ;
45524: LD_ADDR_VAR 0 12
45528: PUSH
45529: CALL_OW 44
45533: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
45534: LD_VAR 0 12
45538: PPUSH
45539: LD_VAR 0 8
45543: PPUSH
45544: LD_INT 0
45546: PPUSH
45547: CALL 47555 0 3
// end ;
45551: GO 45505
45553: POP
45554: POP
// if tigers then
45555: LD_VAR 0 2
45559: IFFALSE 45643
// for i = 1 to tigers do
45561: LD_ADDR_VAR 0 11
45565: PUSH
45566: DOUBLE
45567: LD_INT 1
45569: DEC
45570: ST_TO_ADDR
45571: LD_VAR 0 2
45575: PUSH
45576: FOR_TO
45577: IFFALSE 45641
// begin hc_class = class_tiger ;
45579: LD_ADDR_OWVAR 28
45583: PUSH
45584: LD_INT 14
45586: ST_TO_ADDR
// hc_gallery =  ;
45587: LD_ADDR_OWVAR 33
45591: PUSH
45592: LD_STRING 
45594: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
45595: LD_ADDR_OWVAR 35
45599: PUSH
45600: LD_INT 7
45602: NEG
45603: PPUSH
45604: LD_INT 7
45606: PPUSH
45607: CALL_OW 12
45611: ST_TO_ADDR
// animal := CreateHuman ;
45612: LD_ADDR_VAR 0 12
45616: PUSH
45617: CALL_OW 44
45621: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
45622: LD_VAR 0 12
45626: PPUSH
45627: LD_VAR 0 8
45631: PPUSH
45632: LD_INT 0
45634: PPUSH
45635: CALL 47555 0 3
// end ;
45639: GO 45576
45641: POP
45642: POP
// if apemans then
45643: LD_VAR 0 3
45647: IFFALSE 45770
// for i = 1 to apemans do
45649: LD_ADDR_VAR 0 11
45653: PUSH
45654: DOUBLE
45655: LD_INT 1
45657: DEC
45658: ST_TO_ADDR
45659: LD_VAR 0 3
45663: PUSH
45664: FOR_TO
45665: IFFALSE 45768
// begin hc_class = class_apeman ;
45667: LD_ADDR_OWVAR 28
45671: PUSH
45672: LD_INT 12
45674: ST_TO_ADDR
// hc_gallery =  ;
45675: LD_ADDR_OWVAR 33
45679: PUSH
45680: LD_STRING 
45682: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
45683: LD_ADDR_OWVAR 35
45687: PUSH
45688: LD_INT 2
45690: NEG
45691: PPUSH
45692: LD_INT 2
45694: PPUSH
45695: CALL_OW 12
45699: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
45700: LD_ADDR_OWVAR 31
45704: PUSH
45705: LD_INT 1
45707: PPUSH
45708: LD_INT 3
45710: PPUSH
45711: CALL_OW 12
45715: PUSH
45716: LD_INT 1
45718: PPUSH
45719: LD_INT 3
45721: PPUSH
45722: CALL_OW 12
45726: PUSH
45727: LD_INT 0
45729: PUSH
45730: LD_INT 0
45732: PUSH
45733: EMPTY
45734: LIST
45735: LIST
45736: LIST
45737: LIST
45738: ST_TO_ADDR
// animal := CreateHuman ;
45739: LD_ADDR_VAR 0 12
45743: PUSH
45744: CALL_OW 44
45748: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
45749: LD_VAR 0 12
45753: PPUSH
45754: LD_VAR 0 8
45758: PPUSH
45759: LD_INT 0
45761: PPUSH
45762: CALL 47555 0 3
// end ;
45766: GO 45664
45768: POP
45769: POP
// if enchidnas then
45770: LD_VAR 0 4
45774: IFFALSE 45841
// for i = 1 to enchidnas do
45776: LD_ADDR_VAR 0 11
45780: PUSH
45781: DOUBLE
45782: LD_INT 1
45784: DEC
45785: ST_TO_ADDR
45786: LD_VAR 0 4
45790: PUSH
45791: FOR_TO
45792: IFFALSE 45839
// begin hc_class = 13 ;
45794: LD_ADDR_OWVAR 28
45798: PUSH
45799: LD_INT 13
45801: ST_TO_ADDR
// hc_gallery =  ;
45802: LD_ADDR_OWVAR 33
45806: PUSH
45807: LD_STRING 
45809: ST_TO_ADDR
// animal := CreateHuman ;
45810: LD_ADDR_VAR 0 12
45814: PUSH
45815: CALL_OW 44
45819: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
45820: LD_VAR 0 12
45824: PPUSH
45825: LD_VAR 0 8
45829: PPUSH
45830: LD_INT 0
45832: PPUSH
45833: CALL 47555 0 3
// end ;
45837: GO 45791
45839: POP
45840: POP
// if fishes then
45841: LD_VAR 0 7
45845: IFFALSE 45912
// for i = 1 to fishes do
45847: LD_ADDR_VAR 0 11
45851: PUSH
45852: DOUBLE
45853: LD_INT 1
45855: DEC
45856: ST_TO_ADDR
45857: LD_VAR 0 7
45861: PUSH
45862: FOR_TO
45863: IFFALSE 45910
// begin hc_class = 20 ;
45865: LD_ADDR_OWVAR 28
45869: PUSH
45870: LD_INT 20
45872: ST_TO_ADDR
// hc_gallery =  ;
45873: LD_ADDR_OWVAR 33
45877: PUSH
45878: LD_STRING 
45880: ST_TO_ADDR
// animal := CreateHuman ;
45881: LD_ADDR_VAR 0 12
45885: PUSH
45886: CALL_OW 44
45890: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
45891: LD_VAR 0 12
45895: PPUSH
45896: LD_VAR 0 9
45900: PPUSH
45901: LD_INT 0
45903: PPUSH
45904: CALL 47555 0 3
// end ;
45908: GO 45862
45910: POP
45911: POP
// end ;
45912: LD_VAR 0 10
45916: RET
// export function WantHeal ( sci , unit ) ; begin
45917: LD_INT 0
45919: PPUSH
// if GetTaskList ( sci ) > 0 then
45920: LD_VAR 0 1
45924: PPUSH
45925: CALL_OW 437
45929: PUSH
45930: LD_INT 0
45932: GREATER
45933: IFFALSE 46005
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
45935: LD_VAR 0 1
45939: PPUSH
45940: CALL_OW 437
45944: PUSH
45945: LD_INT 1
45947: ARRAY
45948: PUSH
45949: LD_INT 1
45951: ARRAY
45952: PUSH
45953: LD_STRING l
45955: EQUAL
45956: IFFALSE 45983
45958: PUSH
45959: LD_VAR 0 1
45963: PPUSH
45964: CALL_OW 437
45968: PUSH
45969: LD_INT 1
45971: ARRAY
45972: PUSH
45973: LD_INT 4
45975: ARRAY
45976: PUSH
45977: LD_VAR 0 2
45981: EQUAL
45982: AND
45983: IFFALSE 45995
// result := true else
45985: LD_ADDR_VAR 0 3
45989: PUSH
45990: LD_INT 1
45992: ST_TO_ADDR
45993: GO 46003
// result := false ;
45995: LD_ADDR_VAR 0 3
45999: PUSH
46000: LD_INT 0
46002: ST_TO_ADDR
// end else
46003: GO 46013
// result := false ;
46005: LD_ADDR_VAR 0 3
46009: PUSH
46010: LD_INT 0
46012: ST_TO_ADDR
// end ;
46013: LD_VAR 0 3
46017: RET
// export function HealTarget ( sci ) ; begin
46018: LD_INT 0
46020: PPUSH
// if not sci then
46021: LD_VAR 0 1
46025: NOT
46026: IFFALSE 46030
// exit ;
46028: GO 46095
// result := 0 ;
46030: LD_ADDR_VAR 0 2
46034: PUSH
46035: LD_INT 0
46037: ST_TO_ADDR
// if GetTaskList ( sci ) then
46038: LD_VAR 0 1
46042: PPUSH
46043: CALL_OW 437
46047: IFFALSE 46095
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
46049: LD_VAR 0 1
46053: PPUSH
46054: CALL_OW 437
46058: PUSH
46059: LD_INT 1
46061: ARRAY
46062: PUSH
46063: LD_INT 1
46065: ARRAY
46066: PUSH
46067: LD_STRING l
46069: EQUAL
46070: IFFALSE 46095
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
46072: LD_ADDR_VAR 0 2
46076: PUSH
46077: LD_VAR 0 1
46081: PPUSH
46082: CALL_OW 437
46086: PUSH
46087: LD_INT 1
46089: ARRAY
46090: PUSH
46091: LD_INT 4
46093: ARRAY
46094: ST_TO_ADDR
// end ;
46095: LD_VAR 0 2
46099: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
46100: LD_INT 0
46102: PPUSH
46103: PPUSH
46104: PPUSH
46105: PPUSH
// if not base_units then
46106: LD_VAR 0 1
46110: NOT
46111: IFFALSE 46115
// exit ;
46113: GO 46202
// result := false ;
46115: LD_ADDR_VAR 0 2
46119: PUSH
46120: LD_INT 0
46122: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
46123: LD_ADDR_VAR 0 5
46127: PUSH
46128: LD_VAR 0 1
46132: PPUSH
46133: LD_INT 21
46135: PUSH
46136: LD_INT 3
46138: PUSH
46139: EMPTY
46140: LIST
46141: LIST
46142: PPUSH
46143: CALL_OW 72
46147: ST_TO_ADDR
// if not tmp then
46148: LD_VAR 0 5
46152: NOT
46153: IFFALSE 46157
// exit ;
46155: GO 46202
// for i in tmp do
46157: LD_ADDR_VAR 0 3
46161: PUSH
46162: LD_VAR 0 5
46166: PUSH
46167: FOR_IN
46168: IFFALSE 46200
// begin result := EnemyInRange ( i , 22 ) ;
46170: LD_ADDR_VAR 0 2
46174: PUSH
46175: LD_VAR 0 3
46179: PPUSH
46180: LD_INT 22
46182: PPUSH
46183: CALL 43627 0 2
46187: ST_TO_ADDR
// if result then
46188: LD_VAR 0 2
46192: IFFALSE 46198
// exit ;
46194: POP
46195: POP
46196: GO 46202
// end ;
46198: GO 46167
46200: POP
46201: POP
// end ;
46202: LD_VAR 0 2
46206: RET
// export function FilterByTag ( units , tag ) ; begin
46207: LD_INT 0
46209: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
46210: LD_ADDR_VAR 0 3
46214: PUSH
46215: LD_VAR 0 1
46219: PPUSH
46220: LD_INT 120
46222: PUSH
46223: LD_VAR 0 2
46227: PUSH
46228: EMPTY
46229: LIST
46230: LIST
46231: PPUSH
46232: CALL_OW 72
46236: ST_TO_ADDR
// end ;
46237: LD_VAR 0 3
46241: RET
// export function IsDriver ( un ) ; begin
46242: LD_INT 0
46244: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
46245: LD_ADDR_VAR 0 2
46249: PUSH
46250: LD_VAR 0 1
46254: PUSH
46255: LD_INT 55
46257: PUSH
46258: EMPTY
46259: LIST
46260: PPUSH
46261: CALL_OW 69
46265: IN
46266: ST_TO_ADDR
// end ;
46267: LD_VAR 0 2
46271: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
46272: LD_INT 0
46274: PPUSH
46275: PPUSH
// list := [ ] ;
46276: LD_ADDR_VAR 0 5
46280: PUSH
46281: EMPTY
46282: ST_TO_ADDR
// case d of 0 :
46283: LD_VAR 0 3
46287: PUSH
46288: LD_INT 0
46290: DOUBLE
46291: EQUAL
46292: IFTRUE 46296
46294: GO 46429
46296: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
46297: LD_ADDR_VAR 0 5
46301: PUSH
46302: LD_VAR 0 1
46306: PUSH
46307: LD_INT 4
46309: MINUS
46310: PUSH
46311: LD_VAR 0 2
46315: PUSH
46316: LD_INT 4
46318: MINUS
46319: PUSH
46320: LD_INT 2
46322: PUSH
46323: EMPTY
46324: LIST
46325: LIST
46326: LIST
46327: PUSH
46328: LD_VAR 0 1
46332: PUSH
46333: LD_INT 3
46335: MINUS
46336: PUSH
46337: LD_VAR 0 2
46341: PUSH
46342: LD_INT 1
46344: PUSH
46345: EMPTY
46346: LIST
46347: LIST
46348: LIST
46349: PUSH
46350: LD_VAR 0 1
46354: PUSH
46355: LD_INT 4
46357: PLUS
46358: PUSH
46359: LD_VAR 0 2
46363: PUSH
46364: LD_INT 4
46366: PUSH
46367: EMPTY
46368: LIST
46369: LIST
46370: LIST
46371: PUSH
46372: LD_VAR 0 1
46376: PUSH
46377: LD_INT 3
46379: PLUS
46380: PUSH
46381: LD_VAR 0 2
46385: PUSH
46386: LD_INT 3
46388: PLUS
46389: PUSH
46390: LD_INT 5
46392: PUSH
46393: EMPTY
46394: LIST
46395: LIST
46396: LIST
46397: PUSH
46398: LD_VAR 0 1
46402: PUSH
46403: LD_VAR 0 2
46407: PUSH
46408: LD_INT 4
46410: PLUS
46411: PUSH
46412: LD_INT 0
46414: PUSH
46415: EMPTY
46416: LIST
46417: LIST
46418: LIST
46419: PUSH
46420: EMPTY
46421: LIST
46422: LIST
46423: LIST
46424: LIST
46425: LIST
46426: ST_TO_ADDR
// end ; 1 :
46427: GO 47127
46429: LD_INT 1
46431: DOUBLE
46432: EQUAL
46433: IFTRUE 46437
46435: GO 46570
46437: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
46438: LD_ADDR_VAR 0 5
46442: PUSH
46443: LD_VAR 0 1
46447: PUSH
46448: LD_VAR 0 2
46452: PUSH
46453: LD_INT 4
46455: MINUS
46456: PUSH
46457: LD_INT 3
46459: PUSH
46460: EMPTY
46461: LIST
46462: LIST
46463: LIST
46464: PUSH
46465: LD_VAR 0 1
46469: PUSH
46470: LD_INT 3
46472: MINUS
46473: PUSH
46474: LD_VAR 0 2
46478: PUSH
46479: LD_INT 3
46481: MINUS
46482: PUSH
46483: LD_INT 2
46485: PUSH
46486: EMPTY
46487: LIST
46488: LIST
46489: LIST
46490: PUSH
46491: LD_VAR 0 1
46495: PUSH
46496: LD_INT 4
46498: MINUS
46499: PUSH
46500: LD_VAR 0 2
46504: PUSH
46505: LD_INT 1
46507: PUSH
46508: EMPTY
46509: LIST
46510: LIST
46511: LIST
46512: PUSH
46513: LD_VAR 0 1
46517: PUSH
46518: LD_VAR 0 2
46522: PUSH
46523: LD_INT 3
46525: PLUS
46526: PUSH
46527: LD_INT 0
46529: PUSH
46530: EMPTY
46531: LIST
46532: LIST
46533: LIST
46534: PUSH
46535: LD_VAR 0 1
46539: PUSH
46540: LD_INT 4
46542: PLUS
46543: PUSH
46544: LD_VAR 0 2
46548: PUSH
46549: LD_INT 4
46551: PLUS
46552: PUSH
46553: LD_INT 5
46555: PUSH
46556: EMPTY
46557: LIST
46558: LIST
46559: LIST
46560: PUSH
46561: EMPTY
46562: LIST
46563: LIST
46564: LIST
46565: LIST
46566: LIST
46567: ST_TO_ADDR
// end ; 2 :
46568: GO 47127
46570: LD_INT 2
46572: DOUBLE
46573: EQUAL
46574: IFTRUE 46578
46576: GO 46707
46578: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
46579: LD_ADDR_VAR 0 5
46583: PUSH
46584: LD_VAR 0 1
46588: PUSH
46589: LD_VAR 0 2
46593: PUSH
46594: LD_INT 3
46596: MINUS
46597: PUSH
46598: LD_INT 3
46600: PUSH
46601: EMPTY
46602: LIST
46603: LIST
46604: LIST
46605: PUSH
46606: LD_VAR 0 1
46610: PUSH
46611: LD_INT 4
46613: PLUS
46614: PUSH
46615: LD_VAR 0 2
46619: PUSH
46620: LD_INT 4
46622: PUSH
46623: EMPTY
46624: LIST
46625: LIST
46626: LIST
46627: PUSH
46628: LD_VAR 0 1
46632: PUSH
46633: LD_VAR 0 2
46637: PUSH
46638: LD_INT 4
46640: PLUS
46641: PUSH
46642: LD_INT 0
46644: PUSH
46645: EMPTY
46646: LIST
46647: LIST
46648: LIST
46649: PUSH
46650: LD_VAR 0 1
46654: PUSH
46655: LD_INT 3
46657: MINUS
46658: PUSH
46659: LD_VAR 0 2
46663: PUSH
46664: LD_INT 1
46666: PUSH
46667: EMPTY
46668: LIST
46669: LIST
46670: LIST
46671: PUSH
46672: LD_VAR 0 1
46676: PUSH
46677: LD_INT 4
46679: MINUS
46680: PUSH
46681: LD_VAR 0 2
46685: PUSH
46686: LD_INT 4
46688: MINUS
46689: PUSH
46690: LD_INT 2
46692: PUSH
46693: EMPTY
46694: LIST
46695: LIST
46696: LIST
46697: PUSH
46698: EMPTY
46699: LIST
46700: LIST
46701: LIST
46702: LIST
46703: LIST
46704: ST_TO_ADDR
// end ; 3 :
46705: GO 47127
46707: LD_INT 3
46709: DOUBLE
46710: EQUAL
46711: IFTRUE 46715
46713: GO 46848
46715: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
46716: LD_ADDR_VAR 0 5
46720: PUSH
46721: LD_VAR 0 1
46725: PUSH
46726: LD_INT 3
46728: PLUS
46729: PUSH
46730: LD_VAR 0 2
46734: PUSH
46735: LD_INT 4
46737: PUSH
46738: EMPTY
46739: LIST
46740: LIST
46741: LIST
46742: PUSH
46743: LD_VAR 0 1
46747: PUSH
46748: LD_INT 4
46750: PLUS
46751: PUSH
46752: LD_VAR 0 2
46756: PUSH
46757: LD_INT 4
46759: PLUS
46760: PUSH
46761: LD_INT 5
46763: PUSH
46764: EMPTY
46765: LIST
46766: LIST
46767: LIST
46768: PUSH
46769: LD_VAR 0 1
46773: PUSH
46774: LD_INT 4
46776: MINUS
46777: PUSH
46778: LD_VAR 0 2
46782: PUSH
46783: LD_INT 1
46785: PUSH
46786: EMPTY
46787: LIST
46788: LIST
46789: LIST
46790: PUSH
46791: LD_VAR 0 1
46795: PUSH
46796: LD_VAR 0 2
46800: PUSH
46801: LD_INT 4
46803: MINUS
46804: PUSH
46805: LD_INT 3
46807: PUSH
46808: EMPTY
46809: LIST
46810: LIST
46811: LIST
46812: PUSH
46813: LD_VAR 0 1
46817: PUSH
46818: LD_INT 3
46820: MINUS
46821: PUSH
46822: LD_VAR 0 2
46826: PUSH
46827: LD_INT 3
46829: MINUS
46830: PUSH
46831: LD_INT 2
46833: PUSH
46834: EMPTY
46835: LIST
46836: LIST
46837: LIST
46838: PUSH
46839: EMPTY
46840: LIST
46841: LIST
46842: LIST
46843: LIST
46844: LIST
46845: ST_TO_ADDR
// end ; 4 :
46846: GO 47127
46848: LD_INT 4
46850: DOUBLE
46851: EQUAL
46852: IFTRUE 46856
46854: GO 46989
46856: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
46857: LD_ADDR_VAR 0 5
46861: PUSH
46862: LD_VAR 0 1
46866: PUSH
46867: LD_VAR 0 2
46871: PUSH
46872: LD_INT 4
46874: PLUS
46875: PUSH
46876: LD_INT 0
46878: PUSH
46879: EMPTY
46880: LIST
46881: LIST
46882: LIST
46883: PUSH
46884: LD_VAR 0 1
46888: PUSH
46889: LD_INT 3
46891: PLUS
46892: PUSH
46893: LD_VAR 0 2
46897: PUSH
46898: LD_INT 3
46900: PLUS
46901: PUSH
46902: LD_INT 5
46904: PUSH
46905: EMPTY
46906: LIST
46907: LIST
46908: LIST
46909: PUSH
46910: LD_VAR 0 1
46914: PUSH
46915: LD_INT 4
46917: PLUS
46918: PUSH
46919: LD_VAR 0 2
46923: PUSH
46924: LD_INT 4
46926: PUSH
46927: EMPTY
46928: LIST
46929: LIST
46930: LIST
46931: PUSH
46932: LD_VAR 0 1
46936: PUSH
46937: LD_VAR 0 2
46941: PUSH
46942: LD_INT 3
46944: MINUS
46945: PUSH
46946: LD_INT 3
46948: PUSH
46949: EMPTY
46950: LIST
46951: LIST
46952: LIST
46953: PUSH
46954: LD_VAR 0 1
46958: PUSH
46959: LD_INT 4
46961: MINUS
46962: PUSH
46963: LD_VAR 0 2
46967: PUSH
46968: LD_INT 4
46970: MINUS
46971: PUSH
46972: LD_INT 2
46974: PUSH
46975: EMPTY
46976: LIST
46977: LIST
46978: LIST
46979: PUSH
46980: EMPTY
46981: LIST
46982: LIST
46983: LIST
46984: LIST
46985: LIST
46986: ST_TO_ADDR
// end ; 5 :
46987: GO 47127
46989: LD_INT 5
46991: DOUBLE
46992: EQUAL
46993: IFTRUE 46997
46995: GO 47126
46997: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
46998: LD_ADDR_VAR 0 5
47002: PUSH
47003: LD_VAR 0 1
47007: PUSH
47008: LD_INT 4
47010: MINUS
47011: PUSH
47012: LD_VAR 0 2
47016: PUSH
47017: LD_INT 1
47019: PUSH
47020: EMPTY
47021: LIST
47022: LIST
47023: LIST
47024: PUSH
47025: LD_VAR 0 1
47029: PUSH
47030: LD_VAR 0 2
47034: PUSH
47035: LD_INT 4
47037: MINUS
47038: PUSH
47039: LD_INT 3
47041: PUSH
47042: EMPTY
47043: LIST
47044: LIST
47045: LIST
47046: PUSH
47047: LD_VAR 0 1
47051: PUSH
47052: LD_INT 4
47054: PLUS
47055: PUSH
47056: LD_VAR 0 2
47060: PUSH
47061: LD_INT 4
47063: PLUS
47064: PUSH
47065: LD_INT 5
47067: PUSH
47068: EMPTY
47069: LIST
47070: LIST
47071: LIST
47072: PUSH
47073: LD_VAR 0 1
47077: PUSH
47078: LD_INT 3
47080: PLUS
47081: PUSH
47082: LD_VAR 0 2
47086: PUSH
47087: LD_INT 4
47089: PUSH
47090: EMPTY
47091: LIST
47092: LIST
47093: LIST
47094: PUSH
47095: LD_VAR 0 1
47099: PUSH
47100: LD_VAR 0 2
47104: PUSH
47105: LD_INT 3
47107: PLUS
47108: PUSH
47109: LD_INT 0
47111: PUSH
47112: EMPTY
47113: LIST
47114: LIST
47115: LIST
47116: PUSH
47117: EMPTY
47118: LIST
47119: LIST
47120: LIST
47121: LIST
47122: LIST
47123: ST_TO_ADDR
// end ; end ;
47124: GO 47127
47126: POP
// result := list ;
47127: LD_ADDR_VAR 0 4
47131: PUSH
47132: LD_VAR 0 5
47136: ST_TO_ADDR
// end ;
47137: LD_VAR 0 4
47141: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
47142: LD_INT 0
47144: PPUSH
47145: PPUSH
47146: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
47147: LD_VAR 0 1
47151: NOT
47152: IFTRUE 47180
47154: PUSH
47155: LD_VAR 0 2
47159: PUSH
47160: LD_INT 1
47162: PUSH
47163: LD_INT 2
47165: PUSH
47166: LD_INT 3
47168: PUSH
47169: LD_INT 4
47171: PUSH
47172: EMPTY
47173: LIST
47174: LIST
47175: LIST
47176: LIST
47177: IN
47178: NOT
47179: OR
47180: IFFALSE 47184
// exit ;
47182: GO 47267
// tmp := [ ] ;
47184: LD_ADDR_VAR 0 5
47188: PUSH
47189: EMPTY
47190: ST_TO_ADDR
// for i in units do
47191: LD_ADDR_VAR 0 4
47195: PUSH
47196: LD_VAR 0 1
47200: PUSH
47201: FOR_IN
47202: IFFALSE 47236
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
47204: LD_ADDR_VAR 0 5
47208: PUSH
47209: LD_VAR 0 5
47213: PPUSH
47214: LD_VAR 0 4
47218: PPUSH
47219: LD_VAR 0 2
47223: PPUSH
47224: CALL_OW 259
47228: PPUSH
47229: CALL 48662 0 2
47233: ST_TO_ADDR
47234: GO 47201
47236: POP
47237: POP
// if not tmp then
47238: LD_VAR 0 5
47242: NOT
47243: IFFALSE 47247
// exit ;
47245: GO 47267
// result := SortListByListDesc ( units , tmp ) ;
47247: LD_ADDR_VAR 0 3
47251: PUSH
47252: LD_VAR 0 1
47256: PPUSH
47257: LD_VAR 0 5
47261: PPUSH
47262: CALL_OW 77
47266: ST_TO_ADDR
// end ;
47267: LD_VAR 0 3
47271: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
47272: LD_INT 0
47274: PPUSH
47275: PPUSH
47276: PPUSH
// result := false ;
47277: LD_ADDR_VAR 0 3
47281: PUSH
47282: LD_INT 0
47284: ST_TO_ADDR
// if not building then
47285: LD_VAR 0 2
47289: NOT
47290: IFFALSE 47294
// exit ;
47292: GO 47438
// x := GetX ( building ) ;
47294: LD_ADDR_VAR 0 4
47298: PUSH
47299: LD_VAR 0 2
47303: PPUSH
47304: CALL_OW 250
47308: ST_TO_ADDR
// y := GetY ( building ) ;
47309: LD_ADDR_VAR 0 5
47313: PUSH
47314: LD_VAR 0 2
47318: PPUSH
47319: CALL_OW 251
47323: ST_TO_ADDR
// if not x or not y then
47324: LD_VAR 0 4
47328: NOT
47329: IFTRUE 47338
47331: PUSH
47332: LD_VAR 0 5
47336: NOT
47337: OR
47338: IFFALSE 47342
// exit ;
47340: GO 47438
// if GetTaskList ( unit ) then
47342: LD_VAR 0 1
47346: PPUSH
47347: CALL_OW 437
47351: IFFALSE 47438
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
47353: LD_STRING e
47355: PUSH
47356: LD_VAR 0 1
47360: PPUSH
47361: CALL_OW 437
47365: PUSH
47366: LD_INT 1
47368: ARRAY
47369: PUSH
47370: LD_INT 1
47372: ARRAY
47373: EQUAL
47374: IFFALSE 47401
47376: PUSH
47377: LD_VAR 0 4
47381: PUSH
47382: LD_VAR 0 1
47386: PPUSH
47387: CALL_OW 437
47391: PUSH
47392: LD_INT 1
47394: ARRAY
47395: PUSH
47396: LD_INT 2
47398: ARRAY
47399: EQUAL
47400: AND
47401: IFFALSE 47428
47403: PUSH
47404: LD_VAR 0 5
47408: PUSH
47409: LD_VAR 0 1
47413: PPUSH
47414: CALL_OW 437
47418: PUSH
47419: LD_INT 1
47421: ARRAY
47422: PUSH
47423: LD_INT 3
47425: ARRAY
47426: EQUAL
47427: AND
47428: IFFALSE 47438
// result := true end ;
47430: LD_ADDR_VAR 0 3
47434: PUSH
47435: LD_INT 1
47437: ST_TO_ADDR
// end ;
47438: LD_VAR 0 3
47442: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
47443: LD_INT 0
47445: PPUSH
// result := false ;
47446: LD_ADDR_VAR 0 4
47450: PUSH
47451: LD_INT 0
47453: ST_TO_ADDR
// if GetTaskList ( unit ) then
47454: LD_VAR 0 1
47458: PPUSH
47459: CALL_OW 437
47463: IFFALSE 47550
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
47465: LD_STRING M
47467: PUSH
47468: LD_VAR 0 1
47472: PPUSH
47473: CALL_OW 437
47477: PUSH
47478: LD_INT 1
47480: ARRAY
47481: PUSH
47482: LD_INT 1
47484: ARRAY
47485: EQUAL
47486: IFFALSE 47513
47488: PUSH
47489: LD_VAR 0 2
47493: PUSH
47494: LD_VAR 0 1
47498: PPUSH
47499: CALL_OW 437
47503: PUSH
47504: LD_INT 1
47506: ARRAY
47507: PUSH
47508: LD_INT 2
47510: ARRAY
47511: EQUAL
47512: AND
47513: IFFALSE 47540
47515: PUSH
47516: LD_VAR 0 3
47520: PUSH
47521: LD_VAR 0 1
47525: PPUSH
47526: CALL_OW 437
47530: PUSH
47531: LD_INT 1
47533: ARRAY
47534: PUSH
47535: LD_INT 3
47537: ARRAY
47538: EQUAL
47539: AND
47540: IFFALSE 47550
// result := true ;
47542: LD_ADDR_VAR 0 4
47546: PUSH
47547: LD_INT 1
47549: ST_TO_ADDR
// end ; end ;
47550: LD_VAR 0 4
47554: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
47555: LD_INT 0
47557: PPUSH
47558: PPUSH
47559: PPUSH
47560: PPUSH
// if not unit or not area then
47561: LD_VAR 0 1
47565: NOT
47566: IFTRUE 47575
47568: PUSH
47569: LD_VAR 0 2
47573: NOT
47574: OR
47575: IFFALSE 47579
// exit ;
47577: GO 47755
// tmp := AreaToList ( area , i ) ;
47579: LD_ADDR_VAR 0 6
47583: PUSH
47584: LD_VAR 0 2
47588: PPUSH
47589: LD_VAR 0 5
47593: PPUSH
47594: CALL_OW 517
47598: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
47599: LD_ADDR_VAR 0 5
47603: PUSH
47604: DOUBLE
47605: LD_INT 1
47607: DEC
47608: ST_TO_ADDR
47609: LD_VAR 0 6
47613: PUSH
47614: LD_INT 1
47616: ARRAY
47617: PUSH
47618: FOR_TO
47619: IFFALSE 47753
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
47621: LD_ADDR_VAR 0 7
47625: PUSH
47626: LD_VAR 0 6
47630: PUSH
47631: LD_INT 1
47633: ARRAY
47634: PUSH
47635: LD_VAR 0 5
47639: ARRAY
47640: PUSH
47641: LD_VAR 0 6
47645: PUSH
47646: LD_INT 2
47648: ARRAY
47649: PUSH
47650: LD_VAR 0 5
47654: ARRAY
47655: PUSH
47656: EMPTY
47657: LIST
47658: LIST
47659: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
47660: LD_INT 92
47662: PUSH
47663: LD_VAR 0 7
47667: PUSH
47668: LD_INT 1
47670: ARRAY
47671: PUSH
47672: LD_VAR 0 7
47676: PUSH
47677: LD_INT 2
47679: ARRAY
47680: PUSH
47681: LD_INT 2
47683: PUSH
47684: EMPTY
47685: LIST
47686: LIST
47687: LIST
47688: LIST
47689: PPUSH
47690: CALL_OW 69
47694: PUSH
47695: LD_INT 0
47697: EQUAL
47698: IFFALSE 47751
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
47700: LD_VAR 0 1
47704: PPUSH
47705: LD_VAR 0 7
47709: PUSH
47710: LD_INT 1
47712: ARRAY
47713: PPUSH
47714: LD_VAR 0 7
47718: PUSH
47719: LD_INT 2
47721: ARRAY
47722: PPUSH
47723: LD_VAR 0 3
47727: PPUSH
47728: CALL_OW 48
// result := IsPlaced ( unit ) ;
47732: LD_ADDR_VAR 0 4
47736: PUSH
47737: LD_VAR 0 1
47741: PPUSH
47742: CALL_OW 305
47746: ST_TO_ADDR
// exit ;
47747: POP
47748: POP
47749: GO 47755
// end ; end ;
47751: GO 47618
47753: POP
47754: POP
// end ;
47755: LD_VAR 0 4
47759: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
47760: LD_INT 0
47762: PPUSH
47763: PPUSH
47764: PPUSH
// if not side or side > 8 then
47765: LD_VAR 0 1
47769: NOT
47770: IFTRUE 47782
47772: PUSH
47773: LD_VAR 0 1
47777: PUSH
47778: LD_INT 8
47780: GREATER
47781: OR
47782: IFFALSE 47786
// exit ;
47784: GO 47973
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
47786: LD_ADDR_VAR 0 4
47790: PUSH
47791: LD_INT 22
47793: PUSH
47794: LD_VAR 0 1
47798: PUSH
47799: EMPTY
47800: LIST
47801: LIST
47802: PUSH
47803: LD_INT 21
47805: PUSH
47806: LD_INT 3
47808: PUSH
47809: EMPTY
47810: LIST
47811: LIST
47812: PUSH
47813: EMPTY
47814: LIST
47815: LIST
47816: PPUSH
47817: CALL_OW 69
47821: ST_TO_ADDR
// if not tmp then
47822: LD_VAR 0 4
47826: NOT
47827: IFFALSE 47831
// exit ;
47829: GO 47973
// enable_addtolog := true ;
47831: LD_ADDR_OWVAR 81
47835: PUSH
47836: LD_INT 1
47838: ST_TO_ADDR
// AddToLog ( [ ) ;
47839: LD_STRING [
47841: PPUSH
47842: CALL_OW 561
// for i in tmp do
47846: LD_ADDR_VAR 0 3
47850: PUSH
47851: LD_VAR 0 4
47855: PUSH
47856: FOR_IN
47857: IFFALSE 47964
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
47859: LD_STRING [
47861: PUSH
47862: LD_VAR 0 3
47866: PPUSH
47867: CALL_OW 266
47871: STR
47872: PUSH
47873: LD_STRING , 
47875: STR
47876: PUSH
47877: LD_VAR 0 3
47881: PPUSH
47882: CALL_OW 250
47886: STR
47887: PUSH
47888: LD_STRING , 
47890: STR
47891: PUSH
47892: LD_VAR 0 3
47896: PPUSH
47897: CALL_OW 251
47901: STR
47902: PUSH
47903: LD_STRING , 
47905: STR
47906: PUSH
47907: LD_VAR 0 3
47911: PPUSH
47912: CALL_OW 254
47916: STR
47917: PUSH
47918: LD_STRING , 
47920: STR
47921: PUSH
47922: LD_VAR 0 3
47926: PPUSH
47927: LD_INT 1
47929: PPUSH
47930: CALL_OW 268
47934: STR
47935: PUSH
47936: LD_STRING , 
47938: STR
47939: PUSH
47940: LD_VAR 0 3
47944: PPUSH
47945: LD_INT 2
47947: PPUSH
47948: CALL_OW 268
47952: STR
47953: PUSH
47954: LD_STRING ],
47956: STR
47957: PPUSH
47958: CALL_OW 561
// end ;
47962: GO 47856
47964: POP
47965: POP
// AddToLog ( ]; ) ;
47966: LD_STRING ];
47968: PPUSH
47969: CALL_OW 561
// end ;
47973: LD_VAR 0 2
47977: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
47978: LD_INT 0
47980: PPUSH
47981: PPUSH
47982: PPUSH
47983: PPUSH
47984: PPUSH
// if not area or not rate or not max then
47985: LD_VAR 0 1
47989: NOT
47990: IFTRUE 47999
47992: PUSH
47993: LD_VAR 0 2
47997: NOT
47998: OR
47999: IFTRUE 48008
48001: PUSH
48002: LD_VAR 0 4
48006: NOT
48007: OR
48008: IFFALSE 48012
// exit ;
48010: GO 48201
// while 1 do
48012: LD_INT 1
48014: IFFALSE 48201
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
48016: LD_ADDR_VAR 0 9
48020: PUSH
48021: LD_VAR 0 1
48025: PPUSH
48026: LD_INT 1
48028: PPUSH
48029: CALL_OW 287
48033: PUSH
48034: LD_INT 10
48036: MUL
48037: ST_TO_ADDR
// r := rate / 10 ;
48038: LD_ADDR_VAR 0 7
48042: PUSH
48043: LD_VAR 0 2
48047: PUSH
48048: LD_INT 10
48050: DIVREAL
48051: ST_TO_ADDR
// time := 1 1$00 ;
48052: LD_ADDR_VAR 0 8
48056: PUSH
48057: LD_INT 2100
48059: ST_TO_ADDR
// if amount < min then
48060: LD_VAR 0 9
48064: PUSH
48065: LD_VAR 0 3
48069: LESS
48070: IFFALSE 48088
// r := r * 2 else
48072: LD_ADDR_VAR 0 7
48076: PUSH
48077: LD_VAR 0 7
48081: PUSH
48082: LD_INT 2
48084: MUL
48085: ST_TO_ADDR
48086: GO 48114
// if amount > max then
48088: LD_VAR 0 9
48092: PUSH
48093: LD_VAR 0 4
48097: GREATER
48098: IFFALSE 48114
// r := r / 2 ;
48100: LD_ADDR_VAR 0 7
48104: PUSH
48105: LD_VAR 0 7
48109: PUSH
48110: LD_INT 2
48112: DIVREAL
48113: ST_TO_ADDR
// time := time / r ;
48114: LD_ADDR_VAR 0 8
48118: PUSH
48119: LD_VAR 0 8
48123: PUSH
48124: LD_VAR 0 7
48128: DIVREAL
48129: ST_TO_ADDR
// if time < 0 then
48130: LD_VAR 0 8
48134: PUSH
48135: LD_INT 0
48137: LESS
48138: IFFALSE 48155
// time := time * - 1 ;
48140: LD_ADDR_VAR 0 8
48144: PUSH
48145: LD_VAR 0 8
48149: PUSH
48150: LD_INT 1
48152: NEG
48153: MUL
48154: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
48155: LD_VAR 0 8
48159: PUSH
48160: LD_INT 35
48162: PPUSH
48163: LD_INT 875
48165: PPUSH
48166: CALL_OW 12
48170: PLUS
48171: PPUSH
48172: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
48176: LD_INT 1
48178: PPUSH
48179: LD_INT 5
48181: PPUSH
48182: CALL_OW 12
48186: PPUSH
48187: LD_VAR 0 1
48191: PPUSH
48192: LD_INT 1
48194: PPUSH
48195: CALL_OW 55
// end ;
48199: GO 48012
// end ;
48201: LD_VAR 0 5
48205: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
48206: LD_INT 0
48208: PPUSH
48209: PPUSH
48210: PPUSH
48211: PPUSH
48212: PPUSH
48213: PPUSH
48214: PPUSH
48215: PPUSH
// if not turrets or not factories then
48216: LD_VAR 0 1
48220: NOT
48221: IFTRUE 48230
48223: PUSH
48224: LD_VAR 0 2
48228: NOT
48229: OR
48230: IFFALSE 48234
// exit ;
48232: GO 48541
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
48234: LD_ADDR_VAR 0 10
48238: PUSH
48239: LD_INT 5
48241: PUSH
48242: LD_INT 6
48244: PUSH
48245: EMPTY
48246: LIST
48247: LIST
48248: PUSH
48249: LD_INT 2
48251: PUSH
48252: LD_INT 4
48254: PUSH
48255: EMPTY
48256: LIST
48257: LIST
48258: PUSH
48259: LD_INT 3
48261: PUSH
48262: LD_INT 5
48264: PUSH
48265: EMPTY
48266: LIST
48267: LIST
48268: PUSH
48269: EMPTY
48270: LIST
48271: LIST
48272: LIST
48273: PUSH
48274: LD_INT 24
48276: PUSH
48277: LD_INT 25
48279: PUSH
48280: EMPTY
48281: LIST
48282: LIST
48283: PUSH
48284: LD_INT 23
48286: PUSH
48287: LD_INT 27
48289: PUSH
48290: EMPTY
48291: LIST
48292: LIST
48293: PUSH
48294: EMPTY
48295: LIST
48296: LIST
48297: PUSH
48298: LD_INT 42
48300: PUSH
48301: LD_INT 43
48303: PUSH
48304: EMPTY
48305: LIST
48306: LIST
48307: PUSH
48308: LD_INT 44
48310: PUSH
48311: LD_INT 46
48313: PUSH
48314: EMPTY
48315: LIST
48316: LIST
48317: PUSH
48318: LD_INT 45
48320: PUSH
48321: LD_INT 47
48323: PUSH
48324: EMPTY
48325: LIST
48326: LIST
48327: PUSH
48328: EMPTY
48329: LIST
48330: LIST
48331: LIST
48332: PUSH
48333: EMPTY
48334: LIST
48335: LIST
48336: LIST
48337: ST_TO_ADDR
// result := [ ] ;
48338: LD_ADDR_VAR 0 3
48342: PUSH
48343: EMPTY
48344: ST_TO_ADDR
// for i in turrets do
48345: LD_ADDR_VAR 0 4
48349: PUSH
48350: LD_VAR 0 1
48354: PUSH
48355: FOR_IN
48356: IFFALSE 48539
// begin nat := GetNation ( i ) ;
48358: LD_ADDR_VAR 0 7
48362: PUSH
48363: LD_VAR 0 4
48367: PPUSH
48368: CALL_OW 248
48372: ST_TO_ADDR
// weapon := 0 ;
48373: LD_ADDR_VAR 0 8
48377: PUSH
48378: LD_INT 0
48380: ST_TO_ADDR
// if not nat then
48381: LD_VAR 0 7
48385: NOT
48386: IFFALSE 48390
// continue ;
48388: GO 48355
// for j in list [ nat ] do
48390: LD_ADDR_VAR 0 5
48394: PUSH
48395: LD_VAR 0 10
48399: PUSH
48400: LD_VAR 0 7
48404: ARRAY
48405: PUSH
48406: FOR_IN
48407: IFFALSE 48448
// if GetBWeapon ( i ) = j [ 1 ] then
48409: LD_VAR 0 4
48413: PPUSH
48414: CALL_OW 269
48418: PUSH
48419: LD_VAR 0 5
48423: PUSH
48424: LD_INT 1
48426: ARRAY
48427: EQUAL
48428: IFFALSE 48446
// begin weapon := j [ 2 ] ;
48430: LD_ADDR_VAR 0 8
48434: PUSH
48435: LD_VAR 0 5
48439: PUSH
48440: LD_INT 2
48442: ARRAY
48443: ST_TO_ADDR
// break ;
48444: GO 48448
// end ;
48446: GO 48406
48448: POP
48449: POP
// if not weapon then
48450: LD_VAR 0 8
48454: NOT
48455: IFFALSE 48459
// continue ;
48457: GO 48355
// for k in factories do
48459: LD_ADDR_VAR 0 6
48463: PUSH
48464: LD_VAR 0 2
48468: PUSH
48469: FOR_IN
48470: IFFALSE 48535
// begin weapons := AvailableWeaponList ( k ) ;
48472: LD_ADDR_VAR 0 9
48476: PUSH
48477: LD_VAR 0 6
48481: PPUSH
48482: CALL_OW 478
48486: ST_TO_ADDR
// if not weapons then
48487: LD_VAR 0 9
48491: NOT
48492: IFFALSE 48496
// continue ;
48494: GO 48469
// if weapon in weapons then
48496: LD_VAR 0 8
48500: PUSH
48501: LD_VAR 0 9
48505: IN
48506: IFFALSE 48533
// begin result := [ i , weapon ] ;
48508: LD_ADDR_VAR 0 3
48512: PUSH
48513: LD_VAR 0 4
48517: PUSH
48518: LD_VAR 0 8
48522: PUSH
48523: EMPTY
48524: LIST
48525: LIST
48526: ST_TO_ADDR
// exit ;
48527: POP
48528: POP
48529: POP
48530: POP
48531: GO 48541
// end ; end ;
48533: GO 48469
48535: POP
48536: POP
// end ;
48537: GO 48355
48539: POP
48540: POP
// end ;
48541: LD_VAR 0 3
48545: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
48546: LD_INT 0
48548: PPUSH
// if not side or side > 8 then
48549: LD_VAR 0 3
48553: NOT
48554: IFTRUE 48566
48556: PUSH
48557: LD_VAR 0 3
48561: PUSH
48562: LD_INT 8
48564: GREATER
48565: OR
48566: IFFALSE 48570
// exit ;
48568: GO 48629
// if not range then
48570: LD_VAR 0 4
48574: NOT
48575: IFFALSE 48586
// range := - 12 ;
48577: LD_ADDR_VAR 0 4
48581: PUSH
48582: LD_INT 12
48584: NEG
48585: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
48586: LD_VAR 0 1
48590: PPUSH
48591: LD_VAR 0 2
48595: PPUSH
48596: LD_VAR 0 3
48600: PPUSH
48601: LD_VAR 0 4
48605: PPUSH
48606: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
48610: LD_VAR 0 1
48614: PPUSH
48615: LD_VAR 0 2
48619: PPUSH
48620: LD_VAR 0 3
48624: PPUSH
48625: CALL_OW 331
// end ;
48629: LD_VAR 0 5
48633: RET
// export function Video ( mode ) ; begin
48634: LD_INT 0
48636: PPUSH
// ingame_video = mode ;
48637: LD_ADDR_OWVAR 52
48641: PUSH
48642: LD_VAR 0 1
48646: ST_TO_ADDR
// interface_hidden = mode ;
48647: LD_ADDR_OWVAR 54
48651: PUSH
48652: LD_VAR 0 1
48656: ST_TO_ADDR
// end ;
48657: LD_VAR 0 2
48661: RET
// export function Join ( array , element ) ; begin
48662: LD_INT 0
48664: PPUSH
// result := Replace ( array , array + 1 , element ) ;
48665: LD_ADDR_VAR 0 3
48669: PUSH
48670: LD_VAR 0 1
48674: PPUSH
48675: LD_VAR 0 1
48679: PUSH
48680: LD_INT 1
48682: PLUS
48683: PPUSH
48684: LD_VAR 0 2
48688: PPUSH
48689: CALL_OW 1
48693: ST_TO_ADDR
// end ;
48694: LD_VAR 0 3
48698: RET
// export function JoinUnion ( array , element ) ; begin
48699: LD_INT 0
48701: PPUSH
// result := array union element ;
48702: LD_ADDR_VAR 0 3
48706: PUSH
48707: LD_VAR 0 1
48711: PUSH
48712: LD_VAR 0 2
48716: UNION
48717: ST_TO_ADDR
// end ;
48718: LD_VAR 0 3
48722: RET
// export function GetBehemoths ( side ) ; begin
48723: LD_INT 0
48725: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
48726: LD_ADDR_VAR 0 2
48730: PUSH
48731: LD_INT 22
48733: PUSH
48734: LD_VAR 0 1
48738: PUSH
48739: EMPTY
48740: LIST
48741: LIST
48742: PUSH
48743: LD_INT 31
48745: PUSH
48746: LD_INT 25
48748: PUSH
48749: EMPTY
48750: LIST
48751: LIST
48752: PUSH
48753: EMPTY
48754: LIST
48755: LIST
48756: PPUSH
48757: CALL_OW 69
48761: ST_TO_ADDR
// end ;
48762: LD_VAR 0 2
48766: RET
// export function Shuffle ( array ) ; var i , index ; begin
48767: LD_INT 0
48769: PPUSH
48770: PPUSH
48771: PPUSH
// result := [ ] ;
48772: LD_ADDR_VAR 0 2
48776: PUSH
48777: EMPTY
48778: ST_TO_ADDR
// if not array then
48779: LD_VAR 0 1
48783: NOT
48784: IFFALSE 48788
// exit ;
48786: GO 48887
// Randomize ;
48788: CALL_OW 10
// for i = array downto 1 do
48792: LD_ADDR_VAR 0 3
48796: PUSH
48797: DOUBLE
48798: LD_VAR 0 1
48802: INC
48803: ST_TO_ADDR
48804: LD_INT 1
48806: PUSH
48807: FOR_DOWNTO
48808: IFFALSE 48885
// begin index := rand ( 1 , array ) ;
48810: LD_ADDR_VAR 0 4
48814: PUSH
48815: LD_INT 1
48817: PPUSH
48818: LD_VAR 0 1
48822: PPUSH
48823: CALL_OW 12
48827: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
48828: LD_ADDR_VAR 0 2
48832: PUSH
48833: LD_VAR 0 2
48837: PPUSH
48838: LD_VAR 0 2
48842: PUSH
48843: LD_INT 1
48845: PLUS
48846: PPUSH
48847: LD_VAR 0 1
48851: PUSH
48852: LD_VAR 0 4
48856: ARRAY
48857: PPUSH
48858: CALL_OW 2
48862: ST_TO_ADDR
// array := Delete ( array , index ) ;
48863: LD_ADDR_VAR 0 1
48867: PUSH
48868: LD_VAR 0 1
48872: PPUSH
48873: LD_VAR 0 4
48877: PPUSH
48878: CALL_OW 3
48882: ST_TO_ADDR
// end ;
48883: GO 48807
48885: POP
48886: POP
// end ;
48887: LD_VAR 0 2
48891: RET
// export function GetBaseMaterials ( base ) ; begin
48892: LD_INT 0
48894: PPUSH
// result := [ 0 , 0 , 0 ] ;
48895: LD_ADDR_VAR 0 2
48899: PUSH
48900: LD_INT 0
48902: PUSH
48903: LD_INT 0
48905: PUSH
48906: LD_INT 0
48908: PUSH
48909: EMPTY
48910: LIST
48911: LIST
48912: LIST
48913: ST_TO_ADDR
// if not base then
48914: LD_VAR 0 1
48918: NOT
48919: IFFALSE 48923
// exit ;
48921: GO 48972
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
48923: LD_ADDR_VAR 0 2
48927: PUSH
48928: LD_VAR 0 1
48932: PPUSH
48933: LD_INT 1
48935: PPUSH
48936: CALL_OW 275
48940: PUSH
48941: LD_VAR 0 1
48945: PPUSH
48946: LD_INT 2
48948: PPUSH
48949: CALL_OW 275
48953: PUSH
48954: LD_VAR 0 1
48958: PPUSH
48959: LD_INT 3
48961: PPUSH
48962: CALL_OW 275
48966: PUSH
48967: EMPTY
48968: LIST
48969: LIST
48970: LIST
48971: ST_TO_ADDR
// end ;
48972: LD_VAR 0 2
48976: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
48977: LD_INT 0
48979: PPUSH
48980: PPUSH
// result := array ;
48981: LD_ADDR_VAR 0 3
48985: PUSH
48986: LD_VAR 0 1
48990: ST_TO_ADDR
// if size >= result then
48991: LD_VAR 0 2
48995: PUSH
48996: LD_VAR 0 3
49000: GREATEREQUAL
49001: IFFALSE 49005
// exit ;
49003: GO 49055
// if size then
49005: LD_VAR 0 2
49009: IFFALSE 49055
// for i := array downto size do
49011: LD_ADDR_VAR 0 4
49015: PUSH
49016: DOUBLE
49017: LD_VAR 0 1
49021: INC
49022: ST_TO_ADDR
49023: LD_VAR 0 2
49027: PUSH
49028: FOR_DOWNTO
49029: IFFALSE 49053
// result := Delete ( result , result ) ;
49031: LD_ADDR_VAR 0 3
49035: PUSH
49036: LD_VAR 0 3
49040: PPUSH
49041: LD_VAR 0 3
49045: PPUSH
49046: CALL_OW 3
49050: ST_TO_ADDR
49051: GO 49028
49053: POP
49054: POP
// end ;
49055: LD_VAR 0 3
49059: RET
// export function ComExit ( unit ) ; var tmp ; begin
49060: LD_INT 0
49062: PPUSH
49063: PPUSH
// if not IsInUnit ( unit ) then
49064: LD_VAR 0 1
49068: PPUSH
49069: CALL_OW 310
49073: NOT
49074: IFFALSE 49078
// exit ;
49076: GO 49138
// tmp := IsInUnit ( unit ) ;
49078: LD_ADDR_VAR 0 3
49082: PUSH
49083: LD_VAR 0 1
49087: PPUSH
49088: CALL_OW 310
49092: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
49093: LD_VAR 0 3
49097: PPUSH
49098: CALL_OW 247
49102: PUSH
49103: LD_INT 2
49105: EQUAL
49106: IFFALSE 49119
// ComExitVehicle ( unit ) else
49108: LD_VAR 0 1
49112: PPUSH
49113: CALL_OW 121
49117: GO 49128
// ComExitBuilding ( unit ) ;
49119: LD_VAR 0 1
49123: PPUSH
49124: CALL_OW 122
// result := tmp ;
49128: LD_ADDR_VAR 0 2
49132: PUSH
49133: LD_VAR 0 3
49137: ST_TO_ADDR
// end ;
49138: LD_VAR 0 2
49142: RET
// export function ComExitAll ( units ) ; var i ; begin
49143: LD_INT 0
49145: PPUSH
49146: PPUSH
// if not units then
49147: LD_VAR 0 1
49151: NOT
49152: IFFALSE 49156
// exit ;
49154: GO 49182
// for i in units do
49156: LD_ADDR_VAR 0 3
49160: PUSH
49161: LD_VAR 0 1
49165: PUSH
49166: FOR_IN
49167: IFFALSE 49180
// ComExit ( i ) ;
49169: LD_VAR 0 3
49173: PPUSH
49174: CALL 49060 0 1
49178: GO 49166
49180: POP
49181: POP
// end ;
49182: LD_VAR 0 2
49186: RET
// export function ResetHc ; begin
49187: LD_INT 0
49189: PPUSH
// InitHc ;
49190: CALL_OW 19
// hc_importance := 0 ;
49194: LD_ADDR_OWVAR 32
49198: PUSH
49199: LD_INT 0
49201: ST_TO_ADDR
// end ;
49202: LD_VAR 0 1
49206: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
49207: LD_INT 0
49209: PPUSH
49210: PPUSH
49211: PPUSH
// _x := ( x1 + x2 ) div 2 ;
49212: LD_ADDR_VAR 0 6
49216: PUSH
49217: LD_VAR 0 1
49221: PUSH
49222: LD_VAR 0 3
49226: PLUS
49227: PUSH
49228: LD_INT 2
49230: DIV
49231: ST_TO_ADDR
// if _x < 0 then
49232: LD_VAR 0 6
49236: PUSH
49237: LD_INT 0
49239: LESS
49240: IFFALSE 49257
// _x := _x * - 1 ;
49242: LD_ADDR_VAR 0 6
49246: PUSH
49247: LD_VAR 0 6
49251: PUSH
49252: LD_INT 1
49254: NEG
49255: MUL
49256: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
49257: LD_ADDR_VAR 0 7
49261: PUSH
49262: LD_VAR 0 2
49266: PUSH
49267: LD_VAR 0 4
49271: PLUS
49272: PUSH
49273: LD_INT 2
49275: DIV
49276: ST_TO_ADDR
// if _y < 0 then
49277: LD_VAR 0 7
49281: PUSH
49282: LD_INT 0
49284: LESS
49285: IFFALSE 49302
// _y := _y * - 1 ;
49287: LD_ADDR_VAR 0 7
49291: PUSH
49292: LD_VAR 0 7
49296: PUSH
49297: LD_INT 1
49299: NEG
49300: MUL
49301: ST_TO_ADDR
// result := [ _x , _y ] ;
49302: LD_ADDR_VAR 0 5
49306: PUSH
49307: LD_VAR 0 6
49311: PUSH
49312: LD_VAR 0 7
49316: PUSH
49317: EMPTY
49318: LIST
49319: LIST
49320: ST_TO_ADDR
// end ;
49321: LD_VAR 0 5
49325: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
49326: LD_INT 0
49328: PPUSH
49329: PPUSH
49330: PPUSH
49331: PPUSH
// task := GetTaskList ( unit ) ;
49332: LD_ADDR_VAR 0 7
49336: PUSH
49337: LD_VAR 0 1
49341: PPUSH
49342: CALL_OW 437
49346: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
49347: LD_VAR 0 7
49351: NOT
49352: IFFALSE 49371
49354: PUSH
49355: LD_VAR 0 1
49359: PPUSH
49360: LD_VAR 0 2
49364: PPUSH
49365: CALL_OW 308
49369: NOT
49370: AND
49371: IFFALSE 49375
// exit ;
49373: GO 49493
// if IsInArea ( unit , area ) then
49375: LD_VAR 0 1
49379: PPUSH
49380: LD_VAR 0 2
49384: PPUSH
49385: CALL_OW 308
49389: IFFALSE 49407
// begin ComMoveToArea ( unit , goAway ) ;
49391: LD_VAR 0 1
49395: PPUSH
49396: LD_VAR 0 3
49400: PPUSH
49401: CALL_OW 113
// exit ;
49405: GO 49493
// end ; if task [ 1 ] [ 1 ] <> M then
49407: LD_VAR 0 7
49411: PUSH
49412: LD_INT 1
49414: ARRAY
49415: PUSH
49416: LD_INT 1
49418: ARRAY
49419: PUSH
49420: LD_STRING M
49422: NONEQUAL
49423: IFFALSE 49427
// exit ;
49425: GO 49493
// x := task [ 1 ] [ 2 ] ;
49427: LD_ADDR_VAR 0 5
49431: PUSH
49432: LD_VAR 0 7
49436: PUSH
49437: LD_INT 1
49439: ARRAY
49440: PUSH
49441: LD_INT 2
49443: ARRAY
49444: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
49445: LD_ADDR_VAR 0 6
49449: PUSH
49450: LD_VAR 0 7
49454: PUSH
49455: LD_INT 1
49457: ARRAY
49458: PUSH
49459: LD_INT 3
49461: ARRAY
49462: ST_TO_ADDR
// if InArea ( x , y , area ) then
49463: LD_VAR 0 5
49467: PPUSH
49468: LD_VAR 0 6
49472: PPUSH
49473: LD_VAR 0 2
49477: PPUSH
49478: CALL_OW 309
49482: IFFALSE 49493
// ComStop ( unit ) ;
49484: LD_VAR 0 1
49488: PPUSH
49489: CALL_OW 141
// end ;
49493: LD_VAR 0 4
49497: RET
// export function Abs ( value ) ; begin
49498: LD_INT 0
49500: PPUSH
// result := value ;
49501: LD_ADDR_VAR 0 2
49505: PUSH
49506: LD_VAR 0 1
49510: ST_TO_ADDR
// if value < 0 then
49511: LD_VAR 0 1
49515: PUSH
49516: LD_INT 0
49518: LESS
49519: IFFALSE 49536
// result := value * - 1 ;
49521: LD_ADDR_VAR 0 2
49525: PUSH
49526: LD_VAR 0 1
49530: PUSH
49531: LD_INT 1
49533: NEG
49534: MUL
49535: ST_TO_ADDR
// end ;
49536: LD_VAR 0 2
49540: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
49541: LD_INT 0
49543: PPUSH
49544: PPUSH
49545: PPUSH
49546: PPUSH
49547: PPUSH
49548: PPUSH
49549: PPUSH
49550: PPUSH
// if not unit or not building then
49551: LD_VAR 0 1
49555: NOT
49556: IFTRUE 49565
49558: PUSH
49559: LD_VAR 0 2
49563: NOT
49564: OR
49565: IFFALSE 49569
// exit ;
49567: GO 49797
// x := GetX ( building ) ;
49569: LD_ADDR_VAR 0 4
49573: PUSH
49574: LD_VAR 0 2
49578: PPUSH
49579: CALL_OW 250
49583: ST_TO_ADDR
// y := GetY ( building ) ;
49584: LD_ADDR_VAR 0 6
49588: PUSH
49589: LD_VAR 0 2
49593: PPUSH
49594: CALL_OW 251
49598: ST_TO_ADDR
// d := GetDir ( building ) ;
49599: LD_ADDR_VAR 0 8
49603: PUSH
49604: LD_VAR 0 2
49608: PPUSH
49609: CALL_OW 254
49613: ST_TO_ADDR
// r := 4 ;
49614: LD_ADDR_VAR 0 9
49618: PUSH
49619: LD_INT 4
49621: ST_TO_ADDR
// for i := 1 to 5 do
49622: LD_ADDR_VAR 0 10
49626: PUSH
49627: DOUBLE
49628: LD_INT 1
49630: DEC
49631: ST_TO_ADDR
49632: LD_INT 5
49634: PUSH
49635: FOR_TO
49636: IFFALSE 49795
// begin _x := ShiftX ( x , d , r + i ) ;
49638: LD_ADDR_VAR 0 5
49642: PUSH
49643: LD_VAR 0 4
49647: PPUSH
49648: LD_VAR 0 8
49652: PPUSH
49653: LD_VAR 0 9
49657: PUSH
49658: LD_VAR 0 10
49662: PLUS
49663: PPUSH
49664: CALL_OW 272
49668: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
49669: LD_ADDR_VAR 0 7
49673: PUSH
49674: LD_VAR 0 6
49678: PPUSH
49679: LD_VAR 0 8
49683: PPUSH
49684: LD_VAR 0 9
49688: PUSH
49689: LD_VAR 0 10
49693: PLUS
49694: PPUSH
49695: CALL_OW 273
49699: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
49700: LD_VAR 0 5
49704: PPUSH
49705: LD_VAR 0 7
49709: PPUSH
49710: CALL_OW 488
49714: IFFALSE 49749
49716: PUSH
49717: LD_VAR 0 5
49721: PPUSH
49722: LD_VAR 0 7
49726: PPUSH
49727: CALL_OW 428
49731: PPUSH
49732: CALL_OW 247
49736: PUSH
49737: LD_INT 3
49739: PUSH
49740: LD_INT 2
49742: PUSH
49743: EMPTY
49744: LIST
49745: LIST
49746: IN
49747: NOT
49748: AND
49749: IFFALSE 49793
// begin ComMoveXY ( unit , _x , _y ) ;
49751: LD_VAR 0 1
49755: PPUSH
49756: LD_VAR 0 5
49760: PPUSH
49761: LD_VAR 0 7
49765: PPUSH
49766: CALL_OW 111
// result := [ _x , _y ] ;
49770: LD_ADDR_VAR 0 3
49774: PUSH
49775: LD_VAR 0 5
49779: PUSH
49780: LD_VAR 0 7
49784: PUSH
49785: EMPTY
49786: LIST
49787: LIST
49788: ST_TO_ADDR
// exit ;
49789: POP
49790: POP
49791: GO 49797
// end ; end ;
49793: GO 49635
49795: POP
49796: POP
// end ;
49797: LD_VAR 0 3
49801: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
49802: LD_INT 0
49804: PPUSH
49805: PPUSH
49806: PPUSH
// result := 0 ;
49807: LD_ADDR_VAR 0 3
49811: PUSH
49812: LD_INT 0
49814: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
49815: LD_VAR 0 1
49819: PUSH
49820: LD_INT 0
49822: LESS
49823: IFTRUE 49835
49825: PUSH
49826: LD_VAR 0 1
49830: PUSH
49831: LD_INT 8
49833: GREATER
49834: OR
49835: IFTRUE 49847
49837: PUSH
49838: LD_VAR 0 2
49842: PUSH
49843: LD_INT 0
49845: LESS
49846: OR
49847: IFTRUE 49859
49849: PUSH
49850: LD_VAR 0 2
49854: PUSH
49855: LD_INT 8
49857: GREATER
49858: OR
49859: IFFALSE 49863
// exit ;
49861: GO 49938
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
49863: LD_ADDR_VAR 0 4
49867: PUSH
49868: LD_INT 22
49870: PUSH
49871: LD_VAR 0 2
49875: PUSH
49876: EMPTY
49877: LIST
49878: LIST
49879: PPUSH
49880: CALL_OW 69
49884: PUSH
49885: FOR_IN
49886: IFFALSE 49936
// begin un := UnitShoot ( i ) ;
49888: LD_ADDR_VAR 0 5
49892: PUSH
49893: LD_VAR 0 4
49897: PPUSH
49898: CALL_OW 504
49902: ST_TO_ADDR
// if GetSide ( un ) = side1 then
49903: LD_VAR 0 5
49907: PPUSH
49908: CALL_OW 255
49912: PUSH
49913: LD_VAR 0 1
49917: EQUAL
49918: IFFALSE 49934
// begin result := un ;
49920: LD_ADDR_VAR 0 3
49924: PUSH
49925: LD_VAR 0 5
49929: ST_TO_ADDR
// exit ;
49930: POP
49931: POP
49932: GO 49938
// end ; end ;
49934: GO 49885
49936: POP
49937: POP
// end ;
49938: LD_VAR 0 3
49942: RET
// export function GetCargoBay ( units ) ; begin
49943: LD_INT 0
49945: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
49946: LD_ADDR_VAR 0 2
49950: PUSH
49951: LD_VAR 0 1
49955: PPUSH
49956: LD_INT 2
49958: PUSH
49959: LD_INT 34
49961: PUSH
49962: LD_INT 12
49964: PUSH
49965: EMPTY
49966: LIST
49967: LIST
49968: PUSH
49969: LD_INT 34
49971: PUSH
49972: LD_INT 51
49974: PUSH
49975: EMPTY
49976: LIST
49977: LIST
49978: PUSH
49979: LD_INT 34
49981: PUSH
49982: LD_INT 32
49984: PUSH
49985: EMPTY
49986: LIST
49987: LIST
49988: PUSH
49989: LD_INT 34
49991: PUSH
49992: LD_INT 89
49994: PUSH
49995: EMPTY
49996: LIST
49997: LIST
49998: PUSH
49999: EMPTY
50000: LIST
50001: LIST
50002: LIST
50003: LIST
50004: LIST
50005: PPUSH
50006: CALL_OW 72
50010: ST_TO_ADDR
// end ;
50011: LD_VAR 0 2
50015: RET
// export function Negate ( value ) ; begin
50016: LD_INT 0
50018: PPUSH
// result := not value ;
50019: LD_ADDR_VAR 0 2
50023: PUSH
50024: LD_VAR 0 1
50028: NOT
50029: ST_TO_ADDR
// end ;
50030: LD_VAR 0 2
50034: RET
// export function Inc ( value ) ; begin
50035: LD_INT 0
50037: PPUSH
// result := value + 1 ;
50038: LD_ADDR_VAR 0 2
50042: PUSH
50043: LD_VAR 0 1
50047: PUSH
50048: LD_INT 1
50050: PLUS
50051: ST_TO_ADDR
// end ;
50052: LD_VAR 0 2
50056: RET
// export function Dec ( value ) ; begin
50057: LD_INT 0
50059: PPUSH
// result := value - 1 ;
50060: LD_ADDR_VAR 0 2
50064: PUSH
50065: LD_VAR 0 1
50069: PUSH
50070: LD_INT 1
50072: MINUS
50073: ST_TO_ADDR
// end ;
50074: LD_VAR 0 2
50078: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
50079: LD_INT 0
50081: PPUSH
50082: PPUSH
50083: PPUSH
50084: PPUSH
50085: PPUSH
50086: PPUSH
50087: PPUSH
50088: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
50089: LD_VAR 0 1
50093: PPUSH
50094: LD_VAR 0 2
50098: PPUSH
50099: CALL_OW 488
50103: NOT
50104: IFTRUE 50123
50106: PUSH
50107: LD_VAR 0 3
50111: PPUSH
50112: LD_VAR 0 4
50116: PPUSH
50117: CALL_OW 488
50121: NOT
50122: OR
50123: IFFALSE 50136
// begin result := - 1 ;
50125: LD_ADDR_VAR 0 5
50129: PUSH
50130: LD_INT 1
50132: NEG
50133: ST_TO_ADDR
// exit ;
50134: GO 50371
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
50136: LD_ADDR_VAR 0 12
50140: PUSH
50141: LD_VAR 0 1
50145: PPUSH
50146: LD_VAR 0 2
50150: PPUSH
50151: LD_VAR 0 3
50155: PPUSH
50156: LD_VAR 0 4
50160: PPUSH
50161: CALL 49207 0 4
50165: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
50166: LD_ADDR_VAR 0 11
50170: PUSH
50171: LD_VAR 0 1
50175: PPUSH
50176: LD_VAR 0 2
50180: PPUSH
50181: LD_VAR 0 12
50185: PUSH
50186: LD_INT 1
50188: ARRAY
50189: PPUSH
50190: LD_VAR 0 12
50194: PUSH
50195: LD_INT 2
50197: ARRAY
50198: PPUSH
50199: CALL_OW 298
50203: ST_TO_ADDR
// distance := 9999 ;
50204: LD_ADDR_VAR 0 10
50208: PUSH
50209: LD_INT 9999
50211: ST_TO_ADDR
// for i := 0 to 5 do
50212: LD_ADDR_VAR 0 6
50216: PUSH
50217: DOUBLE
50218: LD_INT 0
50220: DEC
50221: ST_TO_ADDR
50222: LD_INT 5
50224: PUSH
50225: FOR_TO
50226: IFFALSE 50369
// begin _x := ShiftX ( x1 , i , centerDist ) ;
50228: LD_ADDR_VAR 0 7
50232: PUSH
50233: LD_VAR 0 1
50237: PPUSH
50238: LD_VAR 0 6
50242: PPUSH
50243: LD_VAR 0 11
50247: PPUSH
50248: CALL_OW 272
50252: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
50253: LD_ADDR_VAR 0 8
50257: PUSH
50258: LD_VAR 0 2
50262: PPUSH
50263: LD_VAR 0 6
50267: PPUSH
50268: LD_VAR 0 11
50272: PPUSH
50273: CALL_OW 273
50277: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
50278: LD_VAR 0 7
50282: PPUSH
50283: LD_VAR 0 8
50287: PPUSH
50288: CALL_OW 488
50292: NOT
50293: IFFALSE 50297
// continue ;
50295: GO 50225
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
50297: LD_ADDR_VAR 0 9
50301: PUSH
50302: LD_VAR 0 12
50306: PUSH
50307: LD_INT 1
50309: ARRAY
50310: PPUSH
50311: LD_VAR 0 12
50315: PUSH
50316: LD_INT 2
50318: ARRAY
50319: PPUSH
50320: LD_VAR 0 7
50324: PPUSH
50325: LD_VAR 0 8
50329: PPUSH
50330: CALL_OW 298
50334: ST_TO_ADDR
// if tmp < distance then
50335: LD_VAR 0 9
50339: PUSH
50340: LD_VAR 0 10
50344: LESS
50345: IFFALSE 50367
// begin result := i ;
50347: LD_ADDR_VAR 0 5
50351: PUSH
50352: LD_VAR 0 6
50356: ST_TO_ADDR
// distance := tmp ;
50357: LD_ADDR_VAR 0 10
50361: PUSH
50362: LD_VAR 0 9
50366: ST_TO_ADDR
// end ; end ;
50367: GO 50225
50369: POP
50370: POP
// end ;
50371: LD_VAR 0 5
50375: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
50376: LD_INT 0
50378: PPUSH
50379: PPUSH
// if not driver or not IsInUnit ( driver ) then
50380: LD_VAR 0 1
50384: NOT
50385: IFTRUE 50399
50387: PUSH
50388: LD_VAR 0 1
50392: PPUSH
50393: CALL_OW 310
50397: NOT
50398: OR
50399: IFFALSE 50403
// exit ;
50401: GO 50493
// vehicle := IsInUnit ( driver ) ;
50403: LD_ADDR_VAR 0 3
50407: PUSH
50408: LD_VAR 0 1
50412: PPUSH
50413: CALL_OW 310
50417: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
50418: LD_VAR 0 1
50422: PPUSH
50423: LD_STRING \
50425: PUSH
50426: LD_INT 0
50428: PUSH
50429: LD_INT 0
50431: PUSH
50432: LD_INT 0
50434: PUSH
50435: LD_INT 0
50437: PUSH
50438: LD_INT 0
50440: PUSH
50441: LD_INT 0
50443: PUSH
50444: EMPTY
50445: LIST
50446: LIST
50447: LIST
50448: LIST
50449: LIST
50450: LIST
50451: LIST
50452: PUSH
50453: LD_STRING E
50455: PUSH
50456: LD_INT 0
50458: PUSH
50459: LD_INT 0
50461: PUSH
50462: LD_VAR 0 3
50466: PUSH
50467: LD_INT 0
50469: PUSH
50470: LD_INT 0
50472: PUSH
50473: LD_INT 0
50475: PUSH
50476: EMPTY
50477: LIST
50478: LIST
50479: LIST
50480: LIST
50481: LIST
50482: LIST
50483: LIST
50484: PUSH
50485: EMPTY
50486: LIST
50487: LIST
50488: PPUSH
50489: CALL_OW 446
// end ;
50493: LD_VAR 0 2
50497: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
50498: LD_INT 0
50500: PPUSH
50501: PPUSH
// if not driver or not IsInUnit ( driver ) then
50502: LD_VAR 0 1
50506: NOT
50507: IFTRUE 50521
50509: PUSH
50510: LD_VAR 0 1
50514: PPUSH
50515: CALL_OW 310
50519: NOT
50520: OR
50521: IFFALSE 50525
// exit ;
50523: GO 50615
// vehicle := IsInUnit ( driver ) ;
50525: LD_ADDR_VAR 0 3
50529: PUSH
50530: LD_VAR 0 1
50534: PPUSH
50535: CALL_OW 310
50539: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
50540: LD_VAR 0 1
50544: PPUSH
50545: LD_STRING \
50547: PUSH
50548: LD_INT 0
50550: PUSH
50551: LD_INT 0
50553: PUSH
50554: LD_INT 0
50556: PUSH
50557: LD_INT 0
50559: PUSH
50560: LD_INT 0
50562: PUSH
50563: LD_INT 0
50565: PUSH
50566: EMPTY
50567: LIST
50568: LIST
50569: LIST
50570: LIST
50571: LIST
50572: LIST
50573: LIST
50574: PUSH
50575: LD_STRING E
50577: PUSH
50578: LD_INT 0
50580: PUSH
50581: LD_INT 0
50583: PUSH
50584: LD_VAR 0 3
50588: PUSH
50589: LD_INT 0
50591: PUSH
50592: LD_INT 0
50594: PUSH
50595: LD_INT 0
50597: PUSH
50598: EMPTY
50599: LIST
50600: LIST
50601: LIST
50602: LIST
50603: LIST
50604: LIST
50605: LIST
50606: PUSH
50607: EMPTY
50608: LIST
50609: LIST
50610: PPUSH
50611: CALL_OW 447
// end ;
50615: LD_VAR 0 2
50619: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
50620: LD_INT 0
50622: PPUSH
50623: PPUSH
50624: PPUSH
// tmp := [ ] ;
50625: LD_ADDR_VAR 0 5
50629: PUSH
50630: EMPTY
50631: ST_TO_ADDR
// for i in units do
50632: LD_ADDR_VAR 0 4
50636: PUSH
50637: LD_VAR 0 1
50641: PUSH
50642: FOR_IN
50643: IFFALSE 50681
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
50645: LD_ADDR_VAR 0 5
50649: PUSH
50650: LD_VAR 0 5
50654: PPUSH
50655: LD_VAR 0 5
50659: PUSH
50660: LD_INT 1
50662: PLUS
50663: PPUSH
50664: LD_VAR 0 4
50668: PPUSH
50669: CALL_OW 256
50673: PPUSH
50674: CALL_OW 2
50678: ST_TO_ADDR
50679: GO 50642
50681: POP
50682: POP
// if not tmp then
50683: LD_VAR 0 5
50687: NOT
50688: IFFALSE 50692
// exit ;
50690: GO 50740
// if asc then
50692: LD_VAR 0 2
50696: IFFALSE 50720
// result := SortListByListAsc ( units , tmp ) else
50698: LD_ADDR_VAR 0 3
50702: PUSH
50703: LD_VAR 0 1
50707: PPUSH
50708: LD_VAR 0 5
50712: PPUSH
50713: CALL_OW 76
50717: ST_TO_ADDR
50718: GO 50740
// result := SortListByListDesc ( units , tmp ) ;
50720: LD_ADDR_VAR 0 3
50724: PUSH
50725: LD_VAR 0 1
50729: PPUSH
50730: LD_VAR 0 5
50734: PPUSH
50735: CALL_OW 77
50739: ST_TO_ADDR
// end ;
50740: LD_VAR 0 3
50744: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
50745: LD_INT 0
50747: PPUSH
50748: PPUSH
// task := GetTaskList ( mech ) ;
50749: LD_ADDR_VAR 0 4
50753: PUSH
50754: LD_VAR 0 1
50758: PPUSH
50759: CALL_OW 437
50763: ST_TO_ADDR
// if not task then
50764: LD_VAR 0 4
50768: NOT
50769: IFFALSE 50773
// exit ;
50771: GO 50817
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
50773: LD_ADDR_VAR 0 3
50777: PUSH
50778: LD_VAR 0 4
50782: PUSH
50783: LD_INT 1
50785: ARRAY
50786: PUSH
50787: LD_INT 1
50789: ARRAY
50790: PUSH
50791: LD_STRING r
50793: EQUAL
50794: IFFALSE 50816
50796: PUSH
50797: LD_VAR 0 4
50801: PUSH
50802: LD_INT 1
50804: ARRAY
50805: PUSH
50806: LD_INT 4
50808: ARRAY
50809: PUSH
50810: LD_VAR 0 2
50814: EQUAL
50815: AND
50816: ST_TO_ADDR
// end ;
50817: LD_VAR 0 3
50821: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
50822: LD_INT 0
50824: PPUSH
// SetDir ( unit , d ) ;
50825: LD_VAR 0 1
50829: PPUSH
50830: LD_VAR 0 4
50834: PPUSH
50835: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
50839: LD_ADDR_VAR 0 6
50843: PUSH
50844: LD_VAR 0 1
50848: PPUSH
50849: LD_VAR 0 2
50853: PPUSH
50854: LD_VAR 0 3
50858: PPUSH
50859: LD_VAR 0 5
50863: PPUSH
50864: CALL_OW 48
50868: ST_TO_ADDR
// end ;
50869: LD_VAR 0 6
50873: RET
// export function ToNaturalNumber ( number ) ; begin
50874: LD_INT 0
50876: PPUSH
// result := number div 1 ;
50877: LD_ADDR_VAR 0 2
50881: PUSH
50882: LD_VAR 0 1
50886: PUSH
50887: LD_INT 1
50889: DIV
50890: ST_TO_ADDR
// if number < 0 then
50891: LD_VAR 0 1
50895: PUSH
50896: LD_INT 0
50898: LESS
50899: IFFALSE 50909
// result := 0 ;
50901: LD_ADDR_VAR 0 2
50905: PUSH
50906: LD_INT 0
50908: ST_TO_ADDR
// end ;
50909: LD_VAR 0 2
50913: RET
// export function SortByBType ( buildings , asc ) ; var b , tmp ; begin
50914: LD_INT 0
50916: PPUSH
50917: PPUSH
50918: PPUSH
// if not buildings then
50919: LD_VAR 0 1
50923: NOT
50924: IFFALSE 50928
// exit ;
50926: GO 51043
// tmp := [ ] ;
50928: LD_ADDR_VAR 0 5
50932: PUSH
50933: EMPTY
50934: ST_TO_ADDR
// for b in buildings do
50935: LD_ADDR_VAR 0 4
50939: PUSH
50940: LD_VAR 0 1
50944: PUSH
50945: FOR_IN
50946: IFFALSE 50984
// tmp := Replace ( tmp , tmp + 1 , GetBType ( b ) ) ;
50948: LD_ADDR_VAR 0 5
50952: PUSH
50953: LD_VAR 0 5
50957: PPUSH
50958: LD_VAR 0 5
50962: PUSH
50963: LD_INT 1
50965: PLUS
50966: PPUSH
50967: LD_VAR 0 4
50971: PPUSH
50972: CALL_OW 266
50976: PPUSH
50977: CALL_OW 1
50981: ST_TO_ADDR
50982: GO 50945
50984: POP
50985: POP
// if not tmp then
50986: LD_VAR 0 5
50990: NOT
50991: IFFALSE 50995
// exit ;
50993: GO 51043
// if asc then
50995: LD_VAR 0 2
50999: IFFALSE 51023
// result := SortListByListAsc ( buildings , tmp ) else
51001: LD_ADDR_VAR 0 3
51005: PUSH
51006: LD_VAR 0 1
51010: PPUSH
51011: LD_VAR 0 5
51015: PPUSH
51016: CALL_OW 76
51020: ST_TO_ADDR
51021: GO 51043
// result := SortListByListDesc ( buildings , tmp ) ;
51023: LD_ADDR_VAR 0 3
51027: PUSH
51028: LD_VAR 0 1
51032: PPUSH
51033: LD_VAR 0 5
51037: PPUSH
51038: CALL_OW 77
51042: ST_TO_ADDR
// end ;
51043: LD_VAR 0 3
51047: RET
// export function SortByClass ( units , class ) ; var un ; begin
51048: LD_INT 0
51050: PPUSH
51051: PPUSH
// if not units or not class then
51052: LD_VAR 0 1
51056: NOT
51057: IFTRUE 51066
51059: PUSH
51060: LD_VAR 0 2
51064: NOT
51065: OR
51066: IFFALSE 51070
// exit ;
51068: GO 51165
// result := [ ] ;
51070: LD_ADDR_VAR 0 3
51074: PUSH
51075: EMPTY
51076: ST_TO_ADDR
// for un in units do
51077: LD_ADDR_VAR 0 4
51081: PUSH
51082: LD_VAR 0 1
51086: PUSH
51087: FOR_IN
51088: IFFALSE 51163
// if GetClass ( un ) = class then
51090: LD_VAR 0 4
51094: PPUSH
51095: CALL_OW 257
51099: PUSH
51100: LD_VAR 0 2
51104: EQUAL
51105: IFFALSE 51132
// result := Insert ( result , 1 , un ) else
51107: LD_ADDR_VAR 0 3
51111: PUSH
51112: LD_VAR 0 3
51116: PPUSH
51117: LD_INT 1
51119: PPUSH
51120: LD_VAR 0 4
51124: PPUSH
51125: CALL_OW 2
51129: ST_TO_ADDR
51130: GO 51161
// result := Replace ( result , result + 1 , un ) ;
51132: LD_ADDR_VAR 0 3
51136: PUSH
51137: LD_VAR 0 3
51141: PPUSH
51142: LD_VAR 0 3
51146: PUSH
51147: LD_INT 1
51149: PLUS
51150: PPUSH
51151: LD_VAR 0 4
51155: PPUSH
51156: CALL_OW 1
51160: ST_TO_ADDR
51161: GO 51087
51163: POP
51164: POP
// end ;
51165: LD_VAR 0 3
51169: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
51170: LD_INT 0
51172: PPUSH
51173: PPUSH
51174: PPUSH
51175: PPUSH
51176: PPUSH
51177: PPUSH
51178: PPUSH
// result := [ ] ;
51179: LD_ADDR_VAR 0 4
51183: PUSH
51184: EMPTY
51185: ST_TO_ADDR
// if x - r < 0 then
51186: LD_VAR 0 1
51190: PUSH
51191: LD_VAR 0 3
51195: MINUS
51196: PUSH
51197: LD_INT 0
51199: LESS
51200: IFFALSE 51212
// min_x := 0 else
51202: LD_ADDR_VAR 0 8
51206: PUSH
51207: LD_INT 0
51209: ST_TO_ADDR
51210: GO 51228
// min_x := x - r ;
51212: LD_ADDR_VAR 0 8
51216: PUSH
51217: LD_VAR 0 1
51221: PUSH
51222: LD_VAR 0 3
51226: MINUS
51227: ST_TO_ADDR
// if y - r < 0 then
51228: LD_VAR 0 2
51232: PUSH
51233: LD_VAR 0 3
51237: MINUS
51238: PUSH
51239: LD_INT 0
51241: LESS
51242: IFFALSE 51254
// min_y := 0 else
51244: LD_ADDR_VAR 0 7
51248: PUSH
51249: LD_INT 0
51251: ST_TO_ADDR
51252: GO 51270
// min_y := y - r ;
51254: LD_ADDR_VAR 0 7
51258: PUSH
51259: LD_VAR 0 2
51263: PUSH
51264: LD_VAR 0 3
51268: MINUS
51269: ST_TO_ADDR
// max_x := x + r ;
51270: LD_ADDR_VAR 0 9
51274: PUSH
51275: LD_VAR 0 1
51279: PUSH
51280: LD_VAR 0 3
51284: PLUS
51285: ST_TO_ADDR
// max_y := y + r ;
51286: LD_ADDR_VAR 0 10
51290: PUSH
51291: LD_VAR 0 2
51295: PUSH
51296: LD_VAR 0 3
51300: PLUS
51301: ST_TO_ADDR
// for _x = min_x to max_x do
51302: LD_ADDR_VAR 0 5
51306: PUSH
51307: DOUBLE
51308: LD_VAR 0 8
51312: DEC
51313: ST_TO_ADDR
51314: LD_VAR 0 9
51318: PUSH
51319: FOR_TO
51320: IFFALSE 51421
// for _y = min_y to max_y do
51322: LD_ADDR_VAR 0 6
51326: PUSH
51327: DOUBLE
51328: LD_VAR 0 7
51332: DEC
51333: ST_TO_ADDR
51334: LD_VAR 0 10
51338: PUSH
51339: FOR_TO
51340: IFFALSE 51417
// begin if not ValidHex ( _x , _y ) then
51342: LD_VAR 0 5
51346: PPUSH
51347: LD_VAR 0 6
51351: PPUSH
51352: CALL_OW 488
51356: NOT
51357: IFFALSE 51361
// continue ;
51359: GO 51339
// if GetResourceTypeXY ( _x , _y ) then
51361: LD_VAR 0 5
51365: PPUSH
51366: LD_VAR 0 6
51370: PPUSH
51371: CALL_OW 283
51375: IFFALSE 51415
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
51377: LD_ADDR_VAR 0 4
51381: PUSH
51382: LD_VAR 0 4
51386: PPUSH
51387: LD_VAR 0 4
51391: PUSH
51392: LD_INT 1
51394: PLUS
51395: PPUSH
51396: LD_VAR 0 5
51400: PUSH
51401: LD_VAR 0 6
51405: PUSH
51406: EMPTY
51407: LIST
51408: LIST
51409: PPUSH
51410: CALL_OW 1
51414: ST_TO_ADDR
// end ;
51415: GO 51339
51417: POP
51418: POP
51419: GO 51319
51421: POP
51422: POP
// end ;
51423: LD_VAR 0 4
51427: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
51428: LD_INT 0
51430: PPUSH
51431: PPUSH
51432: PPUSH
51433: PPUSH
51434: PPUSH
51435: PPUSH
51436: PPUSH
51437: PPUSH
// if not units then
51438: LD_VAR 0 1
51442: NOT
51443: IFFALSE 51447
// exit ;
51445: GO 51979
// result := UnitFilter ( units , [ f_ok ] ) ;
51447: LD_ADDR_VAR 0 3
51451: PUSH
51452: LD_VAR 0 1
51456: PPUSH
51457: LD_INT 50
51459: PUSH
51460: EMPTY
51461: LIST
51462: PPUSH
51463: CALL_OW 72
51467: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
51468: LD_ADDR_VAR 0 8
51472: PUSH
51473: LD_VAR 0 1
51477: PUSH
51478: LD_INT 1
51480: ARRAY
51481: PPUSH
51482: CALL_OW 255
51486: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
51487: LD_ADDR_VAR 0 10
51491: PUSH
51492: LD_INT 29
51494: PUSH
51495: LD_INT 91
51497: PUSH
51498: LD_INT 49
51500: PUSH
51501: EMPTY
51502: LIST
51503: LIST
51504: LIST
51505: ST_TO_ADDR
// if not result then
51506: LD_VAR 0 3
51510: NOT
51511: IFFALSE 51515
// exit ;
51513: GO 51979
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
51515: LD_ADDR_VAR 0 5
51519: PUSH
51520: LD_INT 81
51522: PUSH
51523: LD_VAR 0 8
51527: PUSH
51528: EMPTY
51529: LIST
51530: LIST
51531: PPUSH
51532: CALL_OW 69
51536: ST_TO_ADDR
// for i in result do
51537: LD_ADDR_VAR 0 4
51541: PUSH
51542: LD_VAR 0 3
51546: PUSH
51547: FOR_IN
51548: IFFALSE 51977
// begin tag := GetTag ( i ) + 1 ;
51550: LD_ADDR_VAR 0 9
51554: PUSH
51555: LD_VAR 0 4
51559: PPUSH
51560: CALL_OW 110
51564: PUSH
51565: LD_INT 1
51567: PLUS
51568: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
51569: LD_ADDR_VAR 0 7
51573: PUSH
51574: LD_VAR 0 4
51578: PPUSH
51579: CALL_OW 250
51583: PPUSH
51584: LD_VAR 0 4
51588: PPUSH
51589: CALL_OW 251
51593: PPUSH
51594: LD_INT 4
51596: PPUSH
51597: CALL 51170 0 3
51601: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
51602: LD_VAR 0 4
51606: PPUSH
51607: CALL_OW 247
51611: PUSH
51612: LD_INT 2
51614: EQUAL
51615: IFFALSE 51627
51617: PUSH
51618: LD_VAR 0 7
51622: PUSH
51623: LD_INT 2
51625: GREATER
51626: AND
51627: IFFALSE 51647
51629: PUSH
51630: LD_VAR 0 4
51634: PPUSH
51635: CALL_OW 264
51639: PUSH
51640: LD_VAR 0 10
51644: IN
51645: NOT
51646: AND
51647: IFFALSE 51686
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
51649: LD_VAR 0 4
51653: PPUSH
51654: LD_VAR 0 7
51658: PUSH
51659: LD_INT 1
51661: ARRAY
51662: PUSH
51663: LD_INT 1
51665: ARRAY
51666: PPUSH
51667: LD_VAR 0 7
51671: PUSH
51672: LD_INT 1
51674: ARRAY
51675: PUSH
51676: LD_INT 2
51678: ARRAY
51679: PPUSH
51680: CALL_OW 116
51684: GO 51975
// if path > tag then
51686: LD_VAR 0 2
51690: PUSH
51691: LD_VAR 0 9
51695: GREATER
51696: IFFALSE 51904
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
51698: LD_ADDR_VAR 0 6
51702: PUSH
51703: LD_VAR 0 5
51707: PPUSH
51708: LD_INT 91
51710: PUSH
51711: LD_VAR 0 4
51715: PUSH
51716: LD_INT 8
51718: PUSH
51719: EMPTY
51720: LIST
51721: LIST
51722: LIST
51723: PPUSH
51724: CALL_OW 72
51728: ST_TO_ADDR
// if nearEnemy then
51729: LD_VAR 0 6
51733: IFFALSE 51802
// begin if GetWeapon ( i ) = ru_time_lapser then
51735: LD_VAR 0 4
51739: PPUSH
51740: CALL_OW 264
51744: PUSH
51745: LD_INT 49
51747: EQUAL
51748: IFFALSE 51776
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
51750: LD_VAR 0 4
51754: PPUSH
51755: LD_VAR 0 6
51759: PPUSH
51760: LD_VAR 0 4
51764: PPUSH
51765: CALL_OW 74
51769: PPUSH
51770: CALL_OW 112
51774: GO 51800
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
51776: LD_VAR 0 4
51780: PPUSH
51781: LD_VAR 0 6
51785: PPUSH
51786: LD_VAR 0 4
51790: PPUSH
51791: CALL_OW 74
51795: PPUSH
51796: CALL 53060 0 2
// end else
51800: GO 51902
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
51802: LD_VAR 0 4
51806: PPUSH
51807: LD_VAR 0 2
51811: PUSH
51812: LD_VAR 0 9
51816: ARRAY
51817: PUSH
51818: LD_INT 1
51820: ARRAY
51821: PPUSH
51822: LD_VAR 0 2
51826: PUSH
51827: LD_VAR 0 9
51831: ARRAY
51832: PUSH
51833: LD_INT 2
51835: ARRAY
51836: PPUSH
51837: CALL_OW 297
51841: PUSH
51842: LD_INT 6
51844: GREATER
51845: IFFALSE 51888
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
51847: LD_VAR 0 4
51851: PPUSH
51852: LD_VAR 0 2
51856: PUSH
51857: LD_VAR 0 9
51861: ARRAY
51862: PUSH
51863: LD_INT 1
51865: ARRAY
51866: PPUSH
51867: LD_VAR 0 2
51871: PUSH
51872: LD_VAR 0 9
51876: ARRAY
51877: PUSH
51878: LD_INT 2
51880: ARRAY
51881: PPUSH
51882: CALL_OW 114
51886: GO 51902
// SetTag ( i , tag ) ;
51888: LD_VAR 0 4
51892: PPUSH
51893: LD_VAR 0 9
51897: PPUSH
51898: CALL_OW 109
// end else
51902: GO 51975
// if enemy then
51904: LD_VAR 0 5
51908: IFFALSE 51975
// begin if GetWeapon ( i ) = ru_time_lapser then
51910: LD_VAR 0 4
51914: PPUSH
51915: CALL_OW 264
51919: PUSH
51920: LD_INT 49
51922: EQUAL
51923: IFFALSE 51951
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
51925: LD_VAR 0 4
51929: PPUSH
51930: LD_VAR 0 5
51934: PPUSH
51935: LD_VAR 0 4
51939: PPUSH
51940: CALL_OW 74
51944: PPUSH
51945: CALL_OW 112
51949: GO 51975
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
51951: LD_VAR 0 4
51955: PPUSH
51956: LD_VAR 0 5
51960: PPUSH
51961: LD_VAR 0 4
51965: PPUSH
51966: CALL_OW 74
51970: PPUSH
51971: CALL 53060 0 2
// end ; end ;
51975: GO 51547
51977: POP
51978: POP
// end ;
51979: LD_VAR 0 3
51983: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
51984: LD_INT 0
51986: PPUSH
51987: PPUSH
51988: PPUSH
// if not unit or IsInUnit ( unit ) then
51989: LD_VAR 0 1
51993: NOT
51994: IFTRUE 52007
51996: PUSH
51997: LD_VAR 0 1
52001: PPUSH
52002: CALL_OW 310
52006: OR
52007: IFFALSE 52011
// exit ;
52009: GO 52102
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
52011: LD_ADDR_VAR 0 4
52015: PUSH
52016: LD_VAR 0 1
52020: PPUSH
52021: CALL_OW 250
52025: PPUSH
52026: LD_VAR 0 2
52030: PPUSH
52031: LD_INT 1
52033: PPUSH
52034: CALL_OW 272
52038: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
52039: LD_ADDR_VAR 0 5
52043: PUSH
52044: LD_VAR 0 1
52048: PPUSH
52049: CALL_OW 251
52053: PPUSH
52054: LD_VAR 0 2
52058: PPUSH
52059: LD_INT 1
52061: PPUSH
52062: CALL_OW 273
52066: ST_TO_ADDR
// if ValidHex ( x , y ) then
52067: LD_VAR 0 4
52071: PPUSH
52072: LD_VAR 0 5
52076: PPUSH
52077: CALL_OW 488
52081: IFFALSE 52102
// ComTurnXY ( unit , x , y ) ;
52083: LD_VAR 0 1
52087: PPUSH
52088: LD_VAR 0 4
52092: PPUSH
52093: LD_VAR 0 5
52097: PPUSH
52098: CALL_OW 118
// end ;
52102: LD_VAR 0 3
52106: RET
// export function SeeUnits ( side , units ) ; var i ; begin
52107: LD_INT 0
52109: PPUSH
52110: PPUSH
// result := false ;
52111: LD_ADDR_VAR 0 3
52115: PUSH
52116: LD_INT 0
52118: ST_TO_ADDR
// if not units then
52119: LD_VAR 0 2
52123: NOT
52124: IFFALSE 52128
// exit ;
52126: GO 52173
// for i in units do
52128: LD_ADDR_VAR 0 4
52132: PUSH
52133: LD_VAR 0 2
52137: PUSH
52138: FOR_IN
52139: IFFALSE 52171
// if See ( side , i ) then
52141: LD_VAR 0 1
52145: PPUSH
52146: LD_VAR 0 4
52150: PPUSH
52151: CALL_OW 292
52155: IFFALSE 52169
// begin result := true ;
52157: LD_ADDR_VAR 0 3
52161: PUSH
52162: LD_INT 1
52164: ST_TO_ADDR
// exit ;
52165: POP
52166: POP
52167: GO 52173
// end ;
52169: GO 52138
52171: POP
52172: POP
// end ;
52173: LD_VAR 0 3
52177: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
52178: LD_INT 0
52180: PPUSH
52181: PPUSH
52182: PPUSH
52183: PPUSH
// if not unit or not points then
52184: LD_VAR 0 1
52188: NOT
52189: IFTRUE 52198
52191: PUSH
52192: LD_VAR 0 2
52196: NOT
52197: OR
52198: IFFALSE 52202
// exit ;
52200: GO 52292
// dist := 99999 ;
52202: LD_ADDR_VAR 0 5
52206: PUSH
52207: LD_INT 99999
52209: ST_TO_ADDR
// for i in points do
52210: LD_ADDR_VAR 0 4
52214: PUSH
52215: LD_VAR 0 2
52219: PUSH
52220: FOR_IN
52221: IFFALSE 52290
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
52223: LD_ADDR_VAR 0 6
52227: PUSH
52228: LD_VAR 0 1
52232: PPUSH
52233: LD_VAR 0 4
52237: PUSH
52238: LD_INT 1
52240: ARRAY
52241: PPUSH
52242: LD_VAR 0 4
52246: PUSH
52247: LD_INT 2
52249: ARRAY
52250: PPUSH
52251: CALL_OW 297
52255: ST_TO_ADDR
// if tmpDist < dist then
52256: LD_VAR 0 6
52260: PUSH
52261: LD_VAR 0 5
52265: LESS
52266: IFFALSE 52288
// begin result := i ;
52268: LD_ADDR_VAR 0 3
52272: PUSH
52273: LD_VAR 0 4
52277: ST_TO_ADDR
// dist := tmpDist ;
52278: LD_ADDR_VAR 0 5
52282: PUSH
52283: LD_VAR 0 6
52287: ST_TO_ADDR
// end ; end ;
52288: GO 52220
52290: POP
52291: POP
// end ;
52292: LD_VAR 0 3
52296: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
52297: LD_INT 0
52299: PPUSH
// uc_side := side ;
52300: LD_ADDR_OWVAR 20
52304: PUSH
52305: LD_VAR 0 1
52309: ST_TO_ADDR
// uc_nation := 3 ;
52310: LD_ADDR_OWVAR 21
52314: PUSH
52315: LD_INT 3
52317: ST_TO_ADDR
// vc_chassis := 25 ;
52318: LD_ADDR_OWVAR 37
52322: PUSH
52323: LD_INT 25
52325: ST_TO_ADDR
// vc_engine := engine_siberite ;
52326: LD_ADDR_OWVAR 39
52330: PUSH
52331: LD_INT 3
52333: ST_TO_ADDR
// vc_control := control_computer ;
52334: LD_ADDR_OWVAR 38
52338: PUSH
52339: LD_INT 3
52341: ST_TO_ADDR
// vc_weapon := 59 ;
52342: LD_ADDR_OWVAR 40
52346: PUSH
52347: LD_INT 59
52349: ST_TO_ADDR
// result := CreateVehicle ;
52350: LD_ADDR_VAR 0 5
52354: PUSH
52355: CALL_OW 45
52359: ST_TO_ADDR
// SetDir ( result , d ) ;
52360: LD_VAR 0 5
52364: PPUSH
52365: LD_VAR 0 4
52369: PPUSH
52370: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
52374: LD_VAR 0 5
52378: PPUSH
52379: LD_VAR 0 2
52383: PPUSH
52384: LD_VAR 0 3
52388: PPUSH
52389: LD_INT 0
52391: PPUSH
52392: CALL_OW 48
// end ;
52396: LD_VAR 0 5
52400: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
52401: LD_INT 0
52403: PPUSH
52404: PPUSH
52405: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
52406: LD_ADDR_VAR 0 2
52410: PUSH
52411: LD_INT 0
52413: PUSH
52414: LD_INT 0
52416: PUSH
52417: LD_INT 0
52419: PUSH
52420: LD_INT 0
52422: PUSH
52423: EMPTY
52424: LIST
52425: LIST
52426: LIST
52427: LIST
52428: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
52429: LD_VAR 0 1
52433: NOT
52434: IFTRUE 52467
52436: PUSH
52437: LD_VAR 0 1
52441: PPUSH
52442: CALL_OW 264
52446: PUSH
52447: LD_INT 12
52449: PUSH
52450: LD_INT 51
52452: PUSH
52453: LD_INT 32
52455: PUSH
52456: LD_INT 89
52458: PUSH
52459: EMPTY
52460: LIST
52461: LIST
52462: LIST
52463: LIST
52464: IN
52465: NOT
52466: OR
52467: IFFALSE 52471
// exit ;
52469: GO 52569
// for i := 1 to 3 do
52471: LD_ADDR_VAR 0 3
52475: PUSH
52476: DOUBLE
52477: LD_INT 1
52479: DEC
52480: ST_TO_ADDR
52481: LD_INT 3
52483: PUSH
52484: FOR_TO
52485: IFFALSE 52567
// begin tmp := GetCargo ( cargo , i ) ;
52487: LD_ADDR_VAR 0 4
52491: PUSH
52492: LD_VAR 0 1
52496: PPUSH
52497: LD_VAR 0 3
52501: PPUSH
52502: CALL_OW 289
52506: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
52507: LD_ADDR_VAR 0 2
52511: PUSH
52512: LD_VAR 0 2
52516: PPUSH
52517: LD_VAR 0 3
52521: PPUSH
52522: LD_VAR 0 4
52526: PPUSH
52527: CALL_OW 1
52531: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
52532: LD_ADDR_VAR 0 2
52536: PUSH
52537: LD_VAR 0 2
52541: PPUSH
52542: LD_INT 4
52544: PPUSH
52545: LD_VAR 0 2
52549: PUSH
52550: LD_INT 4
52552: ARRAY
52553: PUSH
52554: LD_VAR 0 4
52558: PLUS
52559: PPUSH
52560: CALL_OW 1
52564: ST_TO_ADDR
// end ;
52565: GO 52484
52567: POP
52568: POP
// end ;
52569: LD_VAR 0 2
52573: RET
// export function Length ( array ) ; begin
52574: LD_INT 0
52576: PPUSH
// result := array + 0 ;
52577: LD_ADDR_VAR 0 2
52581: PUSH
52582: LD_VAR 0 1
52586: PUSH
52587: LD_INT 0
52589: PLUS
52590: ST_TO_ADDR
// end ;
52591: LD_VAR 0 2
52595: RET
// export function PrepareArray ( array ) ; begin
52596: LD_INT 0
52598: PPUSH
// result := array diff 0 ;
52599: LD_ADDR_VAR 0 2
52603: PUSH
52604: LD_VAR 0 1
52608: PUSH
52609: LD_INT 0
52611: DIFF
52612: ST_TO_ADDR
// if not result [ 1 ] then
52613: LD_VAR 0 2
52617: PUSH
52618: LD_INT 1
52620: ARRAY
52621: NOT
52622: IFFALSE 52642
// result := Delete ( result , 1 ) ;
52624: LD_ADDR_VAR 0 2
52628: PUSH
52629: LD_VAR 0 2
52633: PPUSH
52634: LD_INT 1
52636: PPUSH
52637: CALL_OW 3
52641: ST_TO_ADDR
// end ;
52642: LD_VAR 0 2
52646: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
52647: LD_INT 0
52649: PPUSH
52650: PPUSH
52651: PPUSH
52652: PPUSH
// sibRocketRange := 25 ;
52653: LD_ADDR_VAR 0 6
52657: PUSH
52658: LD_INT 25
52660: ST_TO_ADDR
// result := false ;
52661: LD_ADDR_VAR 0 4
52665: PUSH
52666: LD_INT 0
52668: ST_TO_ADDR
// for i := 0 to 5 do
52669: LD_ADDR_VAR 0 5
52673: PUSH
52674: DOUBLE
52675: LD_INT 0
52677: DEC
52678: ST_TO_ADDR
52679: LD_INT 5
52681: PUSH
52682: FOR_TO
52683: IFFALSE 52750
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
52685: LD_VAR 0 1
52689: PPUSH
52690: LD_VAR 0 5
52694: PPUSH
52695: LD_VAR 0 6
52699: PPUSH
52700: CALL_OW 272
52704: PPUSH
52705: LD_VAR 0 2
52709: PPUSH
52710: LD_VAR 0 5
52714: PPUSH
52715: LD_VAR 0 6
52719: PPUSH
52720: CALL_OW 273
52724: PPUSH
52725: LD_VAR 0 3
52729: PPUSH
52730: CALL_OW 309
52734: IFFALSE 52748
// begin result := true ;
52736: LD_ADDR_VAR 0 4
52740: PUSH
52741: LD_INT 1
52743: ST_TO_ADDR
// exit ;
52744: POP
52745: POP
52746: GO 52752
// end ;
52748: GO 52682
52750: POP
52751: POP
// end ;
52752: LD_VAR 0 4
52756: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
52757: LD_INT 0
52759: PPUSH
52760: PPUSH
52761: PPUSH
// if btype = b_depot then
52762: LD_VAR 0 2
52766: PUSH
52767: LD_INT 0
52769: EQUAL
52770: IFFALSE 52782
// begin result := true ;
52772: LD_ADDR_VAR 0 3
52776: PUSH
52777: LD_INT 1
52779: ST_TO_ADDR
// exit ;
52780: GO 52902
// end ; pom := GetBase ( depot ) ;
52782: LD_ADDR_VAR 0 4
52786: PUSH
52787: LD_VAR 0 1
52791: PPUSH
52792: CALL_OW 274
52796: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
52797: LD_ADDR_VAR 0 5
52801: PUSH
52802: LD_VAR 0 2
52806: PPUSH
52807: LD_VAR 0 1
52811: PPUSH
52812: CALL_OW 248
52816: PPUSH
52817: CALL_OW 450
52821: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
52822: LD_ADDR_VAR 0 3
52826: PUSH
52827: LD_VAR 0 4
52831: PPUSH
52832: LD_INT 1
52834: PPUSH
52835: CALL_OW 275
52839: PUSH
52840: LD_VAR 0 5
52844: PUSH
52845: LD_INT 1
52847: ARRAY
52848: GREATEREQUAL
52849: IFFALSE 52875
52851: PUSH
52852: LD_VAR 0 4
52856: PPUSH
52857: LD_INT 2
52859: PPUSH
52860: CALL_OW 275
52864: PUSH
52865: LD_VAR 0 5
52869: PUSH
52870: LD_INT 2
52872: ARRAY
52873: GREATEREQUAL
52874: AND
52875: IFFALSE 52901
52877: PUSH
52878: LD_VAR 0 4
52882: PPUSH
52883: LD_INT 3
52885: PPUSH
52886: CALL_OW 275
52890: PUSH
52891: LD_VAR 0 5
52895: PUSH
52896: LD_INT 3
52898: ARRAY
52899: GREATEREQUAL
52900: AND
52901: ST_TO_ADDR
// end ;
52902: LD_VAR 0 3
52906: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
52907: LD_INT 0
52909: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
52910: LD_VAR 0 1
52914: PPUSH
52915: LD_VAR 0 2
52919: PPUSH
52920: LD_INT 0
52922: PPUSH
52923: LD_INT 0
52925: PPUSH
52926: LD_INT 1
52928: PPUSH
52929: LD_INT 0
52931: PPUSH
52932: CALL_OW 587
// end ;
52936: LD_VAR 0 3
52940: RET
// export function CenterOnNow ( unit ) ; begin
52941: LD_INT 0
52943: PPUSH
// result := IsInUnit ( unit ) ;
52944: LD_ADDR_VAR 0 2
52948: PUSH
52949: LD_VAR 0 1
52953: PPUSH
52954: CALL_OW 310
52958: ST_TO_ADDR
// if not result then
52959: LD_VAR 0 2
52963: NOT
52964: IFFALSE 52976
// result := unit ;
52966: LD_ADDR_VAR 0 2
52970: PUSH
52971: LD_VAR 0 1
52975: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
52976: LD_VAR 0 1
52980: PPUSH
52981: CALL_OW 87
// end ;
52985: LD_VAR 0 2
52989: RET
// export function ComMoveHex ( unit , hex ) ; begin
52990: LD_INT 0
52992: PPUSH
// if not hex then
52993: LD_VAR 0 2
52997: NOT
52998: IFFALSE 53002
// exit ;
53000: GO 53055
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
53002: LD_VAR 0 2
53006: PUSH
53007: LD_INT 1
53009: ARRAY
53010: PPUSH
53011: LD_VAR 0 2
53015: PUSH
53016: LD_INT 2
53018: ARRAY
53019: PPUSH
53020: CALL_OW 428
53024: IFFALSE 53028
// exit ;
53026: GO 53055
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
53028: LD_VAR 0 1
53032: PPUSH
53033: LD_VAR 0 2
53037: PUSH
53038: LD_INT 1
53040: ARRAY
53041: PPUSH
53042: LD_VAR 0 2
53046: PUSH
53047: LD_INT 2
53049: ARRAY
53050: PPUSH
53051: CALL_OW 111
// end ;
53055: LD_VAR 0 3
53059: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
53060: LD_INT 0
53062: PPUSH
53063: PPUSH
53064: PPUSH
// if not unit or not enemy then
53065: LD_VAR 0 1
53069: NOT
53070: IFTRUE 53079
53072: PUSH
53073: LD_VAR 0 2
53077: NOT
53078: OR
53079: IFFALSE 53083
// exit ;
53081: GO 53209
// x := GetX ( enemy ) ;
53083: LD_ADDR_VAR 0 4
53087: PUSH
53088: LD_VAR 0 2
53092: PPUSH
53093: CALL_OW 250
53097: ST_TO_ADDR
// y := GetY ( enemy ) ;
53098: LD_ADDR_VAR 0 5
53102: PUSH
53103: LD_VAR 0 2
53107: PPUSH
53108: CALL_OW 251
53112: ST_TO_ADDR
// if ValidHex ( x , y ) then
53113: LD_VAR 0 4
53117: PPUSH
53118: LD_VAR 0 5
53122: PPUSH
53123: CALL_OW 488
53127: IFFALSE 53209
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
53129: LD_VAR 0 2
53133: PPUSH
53134: CALL_OW 247
53138: PUSH
53139: LD_INT 3
53141: PUSH
53142: LD_INT 2
53144: PUSH
53145: EMPTY
53146: LIST
53147: LIST
53148: IN
53149: IFTRUE 53172
53151: PUSH
53152: LD_VAR 0 1
53156: PPUSH
53157: CALL_OW 255
53161: PPUSH
53162: LD_VAR 0 2
53166: PPUSH
53167: CALL_OW 292
53171: OR
53172: IFFALSE 53190
// ComAttackUnit ( unit , enemy ) else
53174: LD_VAR 0 1
53178: PPUSH
53179: LD_VAR 0 2
53183: PPUSH
53184: CALL_OW 115
53188: GO 53209
// ComAgressiveMove ( unit , x , y ) ;
53190: LD_VAR 0 1
53194: PPUSH
53195: LD_VAR 0 4
53199: PPUSH
53200: LD_VAR 0 5
53204: PPUSH
53205: CALL_OW 114
// end ;
53209: LD_VAR 0 3
53213: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
53214: LD_INT 0
53216: PPUSH
53217: PPUSH
53218: PPUSH
// list := AreaToList ( area , 0 ) ;
53219: LD_ADDR_VAR 0 5
53223: PUSH
53224: LD_VAR 0 1
53228: PPUSH
53229: LD_INT 0
53231: PPUSH
53232: CALL_OW 517
53236: ST_TO_ADDR
// if not list then
53237: LD_VAR 0 5
53241: NOT
53242: IFFALSE 53246
// exit ;
53244: GO 53376
// if all then
53246: LD_VAR 0 2
53250: IFFALSE 53338
// begin for i := 1 to list [ 1 ] do
53252: LD_ADDR_VAR 0 4
53256: PUSH
53257: DOUBLE
53258: LD_INT 1
53260: DEC
53261: ST_TO_ADDR
53262: LD_VAR 0 5
53266: PUSH
53267: LD_INT 1
53269: ARRAY
53270: PUSH
53271: FOR_TO
53272: IFFALSE 53334
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
53274: LD_ADDR_VAR 0 3
53278: PUSH
53279: LD_VAR 0 3
53283: PPUSH
53284: LD_VAR 0 3
53288: PUSH
53289: LD_INT 1
53291: PLUS
53292: PPUSH
53293: LD_VAR 0 5
53297: PUSH
53298: LD_INT 1
53300: ARRAY
53301: PUSH
53302: LD_VAR 0 4
53306: ARRAY
53307: PUSH
53308: LD_VAR 0 5
53312: PUSH
53313: LD_INT 2
53315: ARRAY
53316: PUSH
53317: LD_VAR 0 4
53321: ARRAY
53322: PUSH
53323: EMPTY
53324: LIST
53325: LIST
53326: PPUSH
53327: CALL_OW 1
53331: ST_TO_ADDR
53332: GO 53271
53334: POP
53335: POP
// exit ;
53336: GO 53376
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
53338: LD_ADDR_VAR 0 3
53342: PUSH
53343: LD_VAR 0 5
53347: PUSH
53348: LD_INT 1
53350: ARRAY
53351: PUSH
53352: LD_INT 1
53354: ARRAY
53355: PUSH
53356: LD_VAR 0 5
53360: PUSH
53361: LD_INT 2
53363: ARRAY
53364: PUSH
53365: LD_INT 1
53367: ARRAY
53368: PUSH
53369: EMPTY
53370: LIST
53371: LIST
53372: PUSH
53373: EMPTY
53374: LIST
53375: ST_TO_ADDR
// end ;
53376: LD_VAR 0 3
53380: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
53381: LD_INT 0
53383: PPUSH
53384: PPUSH
// list := AreaToList ( area , 0 ) ;
53385: LD_ADDR_VAR 0 4
53389: PUSH
53390: LD_VAR 0 1
53394: PPUSH
53395: LD_INT 0
53397: PPUSH
53398: CALL_OW 517
53402: ST_TO_ADDR
// if not list then
53403: LD_VAR 0 4
53407: NOT
53408: IFFALSE 53412
// exit ;
53410: GO 53453
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
53412: LD_ADDR_VAR 0 3
53416: PUSH
53417: LD_VAR 0 4
53421: PUSH
53422: LD_INT 1
53424: ARRAY
53425: PUSH
53426: LD_INT 1
53428: ARRAY
53429: PUSH
53430: LD_VAR 0 4
53434: PUSH
53435: LD_INT 2
53437: ARRAY
53438: PUSH
53439: LD_INT 1
53441: ARRAY
53442: PUSH
53443: LD_VAR 0 2
53447: PUSH
53448: EMPTY
53449: LIST
53450: LIST
53451: LIST
53452: ST_TO_ADDR
// end ;
53453: LD_VAR 0 3
53457: RET
// export function First ( array ) ; begin
53458: LD_INT 0
53460: PPUSH
// if not array then
53461: LD_VAR 0 1
53465: NOT
53466: IFFALSE 53470
// exit ;
53468: GO 53484
// result := array [ 1 ] ;
53470: LD_ADDR_VAR 0 2
53474: PUSH
53475: LD_VAR 0 1
53479: PUSH
53480: LD_INT 1
53482: ARRAY
53483: ST_TO_ADDR
// end ;
53484: LD_VAR 0 2
53488: RET
// export function Last ( array ) ; begin
53489: LD_INT 0
53491: PPUSH
// if not array then
53492: LD_VAR 0 1
53496: NOT
53497: IFFALSE 53501
// exit ;
53499: GO 53517
// result := array [ array ] ;
53501: LD_ADDR_VAR 0 2
53505: PUSH
53506: LD_VAR 0 1
53510: PUSH
53511: LD_VAR 0 1
53515: ARRAY
53516: ST_TO_ADDR
// end ;
53517: LD_VAR 0 2
53521: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
53522: LD_INT 0
53524: PPUSH
53525: PPUSH
// result := [ ] ;
53526: LD_ADDR_VAR 0 5
53530: PUSH
53531: EMPTY
53532: ST_TO_ADDR
// if not array then
53533: LD_VAR 0 1
53537: NOT
53538: IFFALSE 53542
// exit ;
53540: GO 53654
// for i := 1 to array do
53542: LD_ADDR_VAR 0 6
53546: PUSH
53547: DOUBLE
53548: LD_INT 1
53550: DEC
53551: ST_TO_ADDR
53552: LD_VAR 0 1
53556: PUSH
53557: FOR_TO
53558: IFFALSE 53652
// if array [ i ] [ index ] = value then
53560: LD_VAR 0 1
53564: PUSH
53565: LD_VAR 0 6
53569: ARRAY
53570: PUSH
53571: LD_VAR 0 2
53575: ARRAY
53576: PUSH
53577: LD_VAR 0 3
53581: EQUAL
53582: IFFALSE 53650
// begin if indexColumn then
53584: LD_VAR 0 4
53588: IFFALSE 53624
// result := Join ( result , array [ i ] [ indexColumn ] ) else
53590: LD_ADDR_VAR 0 5
53594: PUSH
53595: LD_VAR 0 5
53599: PPUSH
53600: LD_VAR 0 1
53604: PUSH
53605: LD_VAR 0 6
53609: ARRAY
53610: PUSH
53611: LD_VAR 0 4
53615: ARRAY
53616: PPUSH
53617: CALL 48662 0 2
53621: ST_TO_ADDR
53622: GO 53650
// result := Join ( result , array [ i ] ) ;
53624: LD_ADDR_VAR 0 5
53628: PUSH
53629: LD_VAR 0 5
53633: PPUSH
53634: LD_VAR 0 1
53638: PUSH
53639: LD_VAR 0 6
53643: ARRAY
53644: PPUSH
53645: CALL 48662 0 2
53649: ST_TO_ADDR
// end ;
53650: GO 53557
53652: POP
53653: POP
// end ;
53654: LD_VAR 0 5
53658: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
53659: LD_INT 0
53661: PPUSH
// if not vehicles or not parkingPoint then
53662: LD_VAR 0 1
53666: NOT
53667: IFTRUE 53676
53669: PUSH
53670: LD_VAR 0 2
53674: NOT
53675: OR
53676: IFFALSE 53680
// exit ;
53678: GO 53778
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
53680: LD_ADDR_VAR 0 1
53684: PUSH
53685: LD_VAR 0 1
53689: PPUSH
53690: LD_INT 50
53692: PUSH
53693: EMPTY
53694: LIST
53695: PUSH
53696: LD_INT 3
53698: PUSH
53699: LD_INT 92
53701: PUSH
53702: LD_VAR 0 2
53706: PUSH
53707: LD_INT 1
53709: ARRAY
53710: PUSH
53711: LD_VAR 0 2
53715: PUSH
53716: LD_INT 2
53718: ARRAY
53719: PUSH
53720: LD_INT 8
53722: PUSH
53723: EMPTY
53724: LIST
53725: LIST
53726: LIST
53727: LIST
53728: PUSH
53729: EMPTY
53730: LIST
53731: LIST
53732: PUSH
53733: EMPTY
53734: LIST
53735: LIST
53736: PPUSH
53737: CALL_OW 72
53741: ST_TO_ADDR
// if not vehicles then
53742: LD_VAR 0 1
53746: NOT
53747: IFFALSE 53751
// exit ;
53749: GO 53778
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
53751: LD_VAR 0 1
53755: PPUSH
53756: LD_VAR 0 2
53760: PUSH
53761: LD_INT 1
53763: ARRAY
53764: PPUSH
53765: LD_VAR 0 2
53769: PUSH
53770: LD_INT 2
53772: ARRAY
53773: PPUSH
53774: CALL_OW 111
// end ;
53778: LD_VAR 0 3
53782: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
53783: LD_INT 0
53785: PPUSH
53786: PPUSH
53787: PPUSH
// if not side or not area then
53788: LD_VAR 0 1
53792: NOT
53793: IFTRUE 53802
53795: PUSH
53796: LD_VAR 0 2
53800: NOT
53801: OR
53802: IFFALSE 53806
// exit ;
53804: GO 53925
// tmp := AreaToList ( area , 0 ) ;
53806: LD_ADDR_VAR 0 5
53810: PUSH
53811: LD_VAR 0 2
53815: PPUSH
53816: LD_INT 0
53818: PPUSH
53819: CALL_OW 517
53823: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
53824: LD_ADDR_VAR 0 4
53828: PUSH
53829: DOUBLE
53830: LD_INT 1
53832: DEC
53833: ST_TO_ADDR
53834: LD_VAR 0 5
53838: PUSH
53839: LD_INT 1
53841: ARRAY
53842: PUSH
53843: FOR_TO
53844: IFFALSE 53923
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
53846: LD_VAR 0 5
53850: PUSH
53851: LD_INT 1
53853: ARRAY
53854: PUSH
53855: LD_VAR 0 4
53859: ARRAY
53860: PPUSH
53861: LD_VAR 0 5
53865: PUSH
53866: LD_INT 2
53868: ARRAY
53869: PUSH
53870: LD_VAR 0 4
53874: ARRAY
53875: PPUSH
53876: CALL_OW 351
53880: IFFALSE 53921
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
53882: LD_VAR 0 5
53886: PUSH
53887: LD_INT 1
53889: ARRAY
53890: PUSH
53891: LD_VAR 0 4
53895: ARRAY
53896: PPUSH
53897: LD_VAR 0 5
53901: PUSH
53902: LD_INT 2
53904: ARRAY
53905: PUSH
53906: LD_VAR 0 4
53910: ARRAY
53911: PPUSH
53912: LD_VAR 0 1
53916: PPUSH
53917: CALL_OW 244
// end ;
53921: GO 53843
53923: POP
53924: POP
// end ;
53925: LD_VAR 0 3
53929: RET
// export function UniqueArray ( array ) ; var i ; begin
53930: LD_INT 0
53932: PPUSH
53933: PPUSH
// result := [ ] ;
53934: LD_ADDR_VAR 0 2
53938: PUSH
53939: EMPTY
53940: ST_TO_ADDR
// if not array then
53941: LD_VAR 0 1
53945: NOT
53946: IFFALSE 53950
// exit ;
53948: GO 54011
// for i := 1 to array do
53950: LD_ADDR_VAR 0 3
53954: PUSH
53955: DOUBLE
53956: LD_INT 1
53958: DEC
53959: ST_TO_ADDR
53960: LD_VAR 0 1
53964: PUSH
53965: FOR_TO
53966: IFFALSE 54009
// if not array [ i ] in result then
53968: LD_VAR 0 1
53972: PUSH
53973: LD_VAR 0 3
53977: ARRAY
53978: PUSH
53979: LD_VAR 0 2
53983: IN
53984: NOT
53985: IFFALSE 54007
// result := Join ( result , i ) ;
53987: LD_ADDR_VAR 0 2
53991: PUSH
53992: LD_VAR 0 2
53996: PPUSH
53997: LD_VAR 0 3
54001: PPUSH
54002: CALL 48662 0 2
54006: ST_TO_ADDR
54007: GO 53965
54009: POP
54010: POP
// end ; end_of_file
54011: LD_VAR 0 2
54015: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
54016: LD_VAR 0 1
54020: PUSH
54021: LD_INT 200
54023: DOUBLE
54024: GREATEREQUAL
54025: IFFALSE 54033
54027: LD_INT 299
54029: DOUBLE
54030: LESSEQUAL
54031: IFTRUE 54035
54033: GO 54067
54035: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
54036: LD_VAR 0 1
54040: PPUSH
54041: LD_VAR 0 2
54045: PPUSH
54046: LD_VAR 0 3
54050: PPUSH
54051: LD_VAR 0 4
54055: PPUSH
54056: LD_VAR 0 5
54060: PPUSH
54061: CALL 54929 0 5
54065: GO 54144
54067: LD_INT 300
54069: DOUBLE
54070: GREATEREQUAL
54071: IFFALSE 54079
54073: LD_INT 399
54075: DOUBLE
54076: LESSEQUAL
54077: IFTRUE 54081
54079: GO 54143
54081: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
54082: LD_VAR 0 1
54086: PPUSH
54087: LD_VAR 0 2
54091: PPUSH
54092: LD_VAR 0 3
54096: PPUSH
54097: LD_VAR 0 4
54101: PPUSH
54102: LD_VAR 0 5
54106: PPUSH
54107: LD_VAR 0 6
54111: PPUSH
54112: LD_VAR 0 7
54116: PPUSH
54117: LD_VAR 0 8
54121: PPUSH
54122: LD_VAR 0 9
54126: PPUSH
54127: LD_VAR 0 10
54131: PPUSH
54132: LD_VAR 0 11
54136: PPUSH
54137: CALL 62931 0 11
54141: GO 54144
54143: POP
// end ;
54144: PPOPN 11
54146: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
54147: LD_VAR 0 1
54151: PPUSH
54152: LD_VAR 0 2
54156: PPUSH
54157: LD_VAR 0 3
54161: PPUSH
54162: LD_VAR 0 4
54166: PPUSH
54167: LD_VAR 0 5
54171: PPUSH
54172: CALL 54229 0 5
// end ; end_of_file
54176: PPOPN 5
54178: END
// export function SOS_UnitDestroyed ( un ) ; begin
54179: LD_INT 0
54181: PPUSH
// ComRadiation ( un ) ;
54182: LD_VAR 0 1
54186: PPUSH
54187: CALL 55349 0 1
// end ;
54191: LD_VAR 0 2
54195: RET
// export function SOS_UnitKamikazed ( un ) ; begin
54196: LD_INT 0
54198: PPUSH
// ComRadiation ( un ) ;
54199: LD_VAR 0 1
54203: PPUSH
54204: CALL 55349 0 1
// end ;
54208: LD_VAR 0 2
54212: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
54213: LD_INT 0
54215: PPUSH
// end ;
54216: LD_VAR 0 4
54220: RET
// export function SOS_Command ( cmd ) ; begin
54221: LD_INT 0
54223: PPUSH
// end ;
54224: LD_VAR 0 2
54228: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
54229: LD_INT 0
54231: PPUSH
// end ;
54232: LD_VAR 0 6
54236: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , driver , hex , weapon ; begin
54237: LD_INT 0
54239: PPUSH
54240: PPUSH
54241: PPUSH
54242: PPUSH
54243: PPUSH
// if not vehicle or not factory then
54244: LD_VAR 0 1
54248: NOT
54249: IFTRUE 54258
54251: PUSH
54252: LD_VAR 0 2
54256: NOT
54257: OR
54258: IFFALSE 54262
// exit ;
54260: GO 54924
// weapon := GetWeapon ( vehicle ) ;
54262: LD_ADDR_VAR 0 7
54266: PUSH
54267: LD_VAR 0 1
54271: PPUSH
54272: CALL_OW 264
54276: ST_TO_ADDR
// if weapon = ar_miner then
54277: LD_VAR 0 7
54281: PUSH
54282: LD_INT 81
54284: EQUAL
54285: IFFALSE 54342
// begin minersList := Replace ( minersList , minersList + 1 , vehicle ) ;
54287: LD_ADDR_EXP 56
54291: PUSH
54292: LD_EXP 56
54296: PPUSH
54297: LD_EXP 56
54301: PUSH
54302: LD_INT 1
54304: PLUS
54305: PPUSH
54306: LD_VAR 0 1
54310: PPUSH
54311: CALL_OW 1
54315: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
54316: LD_ADDR_EXP 57
54320: PUSH
54321: LD_EXP 57
54325: PPUSH
54326: LD_EXP 57
54330: PUSH
54331: LD_INT 1
54333: PLUS
54334: PPUSH
54335: EMPTY
54336: PPUSH
54337: CALL_OW 1
54341: ST_TO_ADDR
// end ; if not factoryWaypoints then
54342: LD_EXP 60
54346: NOT
54347: IFFALSE 54351
// exit ;
54349: GO 54924
// for i := 1 to Count ( factoryWaypoints ) do
54351: LD_ADDR_VAR 0 4
54355: PUSH
54356: DOUBLE
54357: LD_INT 1
54359: DEC
54360: ST_TO_ADDR
54361: LD_EXP 60
54365: PPUSH
54366: CALL 12696 0 1
54370: PUSH
54371: FOR_TO
54372: IFFALSE 54922
// if factoryWaypoints [ i ] [ 2 ] = factory then
54374: LD_EXP 60
54378: PUSH
54379: LD_VAR 0 4
54383: ARRAY
54384: PUSH
54385: LD_INT 2
54387: ARRAY
54388: PUSH
54389: LD_VAR 0 2
54393: EQUAL
54394: IFFALSE 54920
// begin if GetControl ( vehicle ) = control_manual then
54396: LD_VAR 0 1
54400: PPUSH
54401: CALL_OW 263
54405: PUSH
54406: LD_INT 1
54408: EQUAL
54409: IFFALSE 54773
// begin driver := IsDrivenBy ( vehicle ) ;
54411: LD_ADDR_VAR 0 5
54415: PUSH
54416: LD_VAR 0 1
54420: PPUSH
54421: CALL_OW 311
54425: ST_TO_ADDR
// if driver in factoryWaypointsDrivers or vehicle in factoryWaypointsDrivers then
54426: LD_VAR 0 5
54430: PUSH
54431: LD_EXP 61
54435: IN
54436: IFTRUE 54450
54438: PUSH
54439: LD_VAR 0 1
54443: PUSH
54444: LD_EXP 61
54448: IN
54449: OR
54450: IFFALSE 54456
// exit ;
54452: POP
54453: POP
54454: GO 54924
// if not HasTask ( driver ) then
54456: LD_VAR 0 5
54460: PPUSH
54461: CALL_OW 314
54465: NOT
54466: IFFALSE 54771
// begin factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , driver ) ;
54468: LD_ADDR_EXP 61
54472: PUSH
54473: LD_EXP 61
54477: PPUSH
54478: LD_VAR 0 5
54482: PPUSH
54483: CALL 48662 0 2
54487: ST_TO_ADDR
// factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , vehicle ) ;
54488: LD_ADDR_EXP 61
54492: PUSH
54493: LD_EXP 61
54497: PPUSH
54498: LD_VAR 0 1
54502: PPUSH
54503: CALL 48662 0 2
54507: ST_TO_ADDR
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
54508: LD_ADDR_VAR 0 6
54512: PUSH
54513: LD_EXP 60
54517: PUSH
54518: LD_VAR 0 4
54522: ARRAY
54523: PUSH
54524: LD_INT 3
54526: ARRAY
54527: PPUSH
54528: LD_EXP 60
54532: PUSH
54533: LD_VAR 0 4
54537: ARRAY
54538: PUSH
54539: LD_INT 4
54541: ARRAY
54542: PPUSH
54543: CALL_OW 428
54547: ST_TO_ADDR
// if hex then
54548: LD_VAR 0 6
54552: IFFALSE 54570
// ComMoveUnit ( driver , hex ) else
54554: LD_VAR 0 5
54558: PPUSH
54559: LD_VAR 0 6
54563: PPUSH
54564: CALL_OW 112
54568: GO 54654
// if GetDistUnitXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) > 0 then
54570: LD_VAR 0 1
54574: PPUSH
54575: LD_EXP 60
54579: PUSH
54580: LD_VAR 0 4
54584: ARRAY
54585: PUSH
54586: LD_INT 3
54588: ARRAY
54589: PPUSH
54590: LD_EXP 60
54594: PUSH
54595: LD_VAR 0 4
54599: ARRAY
54600: PUSH
54601: LD_INT 4
54603: ARRAY
54604: PPUSH
54605: CALL_OW 297
54609: PUSH
54610: LD_INT 0
54612: GREATER
54613: IFFALSE 54654
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
54615: LD_VAR 0 5
54619: PPUSH
54620: LD_EXP 60
54624: PUSH
54625: LD_VAR 0 4
54629: ARRAY
54630: PUSH
54631: LD_INT 3
54633: ARRAY
54634: PPUSH
54635: LD_EXP 60
54639: PUSH
54640: LD_VAR 0 4
54644: ARRAY
54645: PUSH
54646: LD_INT 4
54648: ARRAY
54649: PPUSH
54650: CALL_OW 111
// AddComExitVehicle ( driver ) ;
54654: LD_VAR 0 5
54658: PPUSH
54659: CALL_OW 181
// if Multiplayer then
54663: LD_OWVAR 4
54667: IFFALSE 54716
// begin repeat wait ( 10 ) ;
54669: LD_INT 10
54671: PPUSH
54672: CALL_OW 67
// until not IsInUnit ( driver ) ;
54676: LD_VAR 0 5
54680: PPUSH
54681: CALL_OW 310
54685: NOT
54686: IFFALSE 54669
// if not HasTask ( driver ) then
54688: LD_VAR 0 5
54692: PPUSH
54693: CALL_OW 314
54697: NOT
54698: IFFALSE 54714
// ComEnterUnit ( driver , factory ) ;
54700: LD_VAR 0 5
54704: PPUSH
54705: LD_VAR 0 2
54709: PPUSH
54710: CALL_OW 120
// end else
54714: GO 54730
// AddComEnterUnit ( driver , factory ) ;
54716: LD_VAR 0 5
54720: PPUSH
54721: LD_VAR 0 2
54725: PPUSH
54726: CALL_OW 180
// wait ( 0 0$1 ) ;
54730: LD_INT 35
54732: PPUSH
54733: CALL_OW 67
// factoryWaypointsDrivers := factoryWaypointsDrivers diff driver ;
54737: LD_ADDR_EXP 61
54741: PUSH
54742: LD_EXP 61
54746: PUSH
54747: LD_VAR 0 5
54751: DIFF
54752: ST_TO_ADDR
// factoryWaypointsDrivers := factoryWaypointsDrivers diff vehicle ;
54753: LD_ADDR_EXP 61
54757: PUSH
54758: LD_EXP 61
54762: PUSH
54763: LD_VAR 0 1
54767: DIFF
54768: ST_TO_ADDR
// break ;
54769: GO 54922
// end ; end else
54771: GO 54920
// if GetControl ( vehicle ) = control_remote then
54773: LD_VAR 0 1
54777: PPUSH
54778: CALL_OW 263
54782: PUSH
54783: LD_INT 2
54785: EQUAL
54786: IFFALSE 54872
// begin wait ( 0 0$2 ) ;
54788: LD_INT 70
54790: PPUSH
54791: CALL_OW 67
// repeat wait ( 10 ) ;
54795: LD_INT 10
54797: PPUSH
54798: CALL_OW 67
// Connect ( vehicle ) ;
54802: LD_VAR 0 1
54806: PPUSH
54807: CALL 18974 0 1
// until IsControledBy ( vehicle ) ;
54811: LD_VAR 0 1
54815: PPUSH
54816: CALL_OW 312
54820: IFFALSE 54795
// wait ( 10 ) ;
54822: LD_INT 10
54824: PPUSH
54825: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
54829: LD_VAR 0 1
54833: PPUSH
54834: LD_EXP 60
54838: PUSH
54839: LD_VAR 0 4
54843: ARRAY
54844: PUSH
54845: LD_INT 3
54847: ARRAY
54848: PPUSH
54849: LD_EXP 60
54853: PUSH
54854: LD_VAR 0 4
54858: ARRAY
54859: PUSH
54860: LD_INT 4
54862: ARRAY
54863: PPUSH
54864: CALL_OW 111
// break ;
54868: GO 54922
// end else
54870: GO 54920
// begin wait ( 0 0$3 ) ;
54872: LD_INT 105
54874: PPUSH
54875: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
54879: LD_VAR 0 1
54883: PPUSH
54884: LD_EXP 60
54888: PUSH
54889: LD_VAR 0 4
54893: ARRAY
54894: PUSH
54895: LD_INT 3
54897: ARRAY
54898: PPUSH
54899: LD_EXP 60
54903: PUSH
54904: LD_VAR 0 4
54908: ARRAY
54909: PUSH
54910: LD_INT 4
54912: ARRAY
54913: PPUSH
54914: CALL_OW 111
// break ;
54918: GO 54922
// end ; end ;
54920: GO 54371
54922: POP
54923: POP
// end ;
54924: LD_VAR 0 3
54928: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
54929: LD_INT 0
54931: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
54932: LD_VAR 0 1
54936: PUSH
54937: LD_INT 250
54939: EQUAL
54940: IFFALSE 54957
54942: PUSH
54943: LD_VAR 0 2
54947: PPUSH
54948: CALL_OW 264
54952: PUSH
54953: LD_INT 81
54955: EQUAL
54956: AND
54957: IFFALSE 54978
// MinerPlaceMine ( unit , x , y ) ;
54959: LD_VAR 0 2
54963: PPUSH
54964: LD_VAR 0 4
54968: PPUSH
54969: LD_VAR 0 5
54973: PPUSH
54974: CALL 58259 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
54978: LD_VAR 0 1
54982: PUSH
54983: LD_INT 251
54985: EQUAL
54986: IFFALSE 55003
54988: PUSH
54989: LD_VAR 0 2
54993: PPUSH
54994: CALL_OW 264
54998: PUSH
54999: LD_INT 81
55001: EQUAL
55002: AND
55003: IFFALSE 55024
// MinerDetonateMine ( unit , x , y ) ;
55005: LD_VAR 0 2
55009: PPUSH
55010: LD_VAR 0 4
55014: PPUSH
55015: LD_VAR 0 5
55019: PPUSH
55020: CALL 58666 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
55024: LD_VAR 0 1
55028: PUSH
55029: LD_INT 252
55031: EQUAL
55032: IFFALSE 55049
55034: PUSH
55035: LD_VAR 0 2
55039: PPUSH
55040: CALL_OW 264
55044: PUSH
55045: LD_INT 81
55047: EQUAL
55048: AND
55049: IFFALSE 55070
// MinerCreateMinefield ( unit , x , y ) ;
55051: LD_VAR 0 2
55055: PPUSH
55056: LD_VAR 0 4
55060: PPUSH
55061: LD_VAR 0 5
55065: PPUSH
55066: CALL 58898 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
55070: LD_VAR 0 1
55074: PUSH
55075: LD_INT 253
55077: EQUAL
55078: IFFALSE 55095
55080: PUSH
55081: LD_VAR 0 2
55085: PPUSH
55086: CALL_OW 257
55090: PUSH
55091: LD_INT 5
55093: EQUAL
55094: AND
55095: IFFALSE 55116
// ComBinocular ( unit , x , y ) ;
55097: LD_VAR 0 2
55101: PPUSH
55102: LD_VAR 0 4
55106: PPUSH
55107: LD_VAR 0 5
55111: PPUSH
55112: CALL 59273 0 3
// if selectedUnit then
55116: LD_VAR 0 3
55120: IFFALSE 55180
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
55122: LD_VAR 0 1
55126: PUSH
55127: LD_INT 254
55129: EQUAL
55130: IFFALSE 55147
55132: PUSH
55133: LD_VAR 0 2
55137: PPUSH
55138: CALL_OW 264
55142: PUSH
55143: LD_INT 99
55145: EQUAL
55146: AND
55147: IFFALSE 55164
55149: PUSH
55150: LD_VAR 0 3
55154: PPUSH
55155: CALL_OW 263
55159: PUSH
55160: LD_INT 3
55162: EQUAL
55163: AND
55164: IFFALSE 55180
// HackDestroyVehicle ( unit , selectedUnit ) ;
55166: LD_VAR 0 2
55170: PPUSH
55171: LD_VAR 0 3
55175: PPUSH
55176: CALL 57470 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
55180: LD_VAR 0 1
55184: PUSH
55185: LD_INT 255
55187: EQUAL
55188: IFFALSE 55212
55190: PUSH
55191: LD_VAR 0 2
55195: PPUSH
55196: CALL_OW 264
55200: PUSH
55201: LD_INT 14
55203: PUSH
55204: LD_INT 53
55206: PUSH
55207: EMPTY
55208: LIST
55209: LIST
55210: IN
55211: AND
55212: IFFALSE 55230
55214: PUSH
55215: LD_VAR 0 4
55219: PPUSH
55220: LD_VAR 0 5
55224: PPUSH
55225: CALL_OW 488
55229: AND
55230: IFFALSE 55254
// CutTreeXYR ( unit , x , y , 12 ) ;
55232: LD_VAR 0 2
55236: PPUSH
55237: LD_VAR 0 4
55241: PPUSH
55242: LD_VAR 0 5
55246: PPUSH
55247: LD_INT 12
55249: PPUSH
55250: CALL 55445 0 4
// if cmd = 256 then
55254: LD_VAR 0 1
55258: PUSH
55259: LD_INT 256
55261: EQUAL
55262: IFFALSE 55283
// SetFactoryWaypoint ( unit , x , y ) ;
55264: LD_VAR 0 2
55268: PPUSH
55269: LD_VAR 0 4
55273: PPUSH
55274: LD_VAR 0 5
55278: PPUSH
55279: CALL 62939 0 3
// if cmd = 257 then
55283: LD_VAR 0 1
55287: PUSH
55288: LD_INT 257
55290: EQUAL
55291: IFFALSE 55312
// SetWarehouseGatheringPoint ( unit , x , y ) ;
55293: LD_VAR 0 2
55297: PPUSH
55298: LD_VAR 0 4
55302: PPUSH
55303: LD_VAR 0 5
55307: PPUSH
55308: CALL 63435 0 3
// if cmd = 258 then
55312: LD_VAR 0 1
55316: PUSH
55317: LD_INT 258
55319: EQUAL
55320: IFFALSE 55344
// BurnTreeXYR ( unit , x , y , 8 ) ;
55322: LD_VAR 0 2
55326: PPUSH
55327: LD_VAR 0 4
55331: PPUSH
55332: LD_VAR 0 5
55336: PPUSH
55337: LD_INT 8
55339: PPUSH
55340: CALL 55845 0 4
// end ;
55344: LD_VAR 0 6
55348: RET
// export function ComRadiation ( un ) ; var eff ; begin
55349: LD_INT 0
55351: PPUSH
55352: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
55353: LD_VAR 0 1
55357: PPUSH
55358: CALL_OW 264
55362: PUSH
55363: LD_INT 91
55365: NONEQUAL
55366: IFFALSE 55370
// exit ;
55368: GO 55440
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
55370: LD_INT 68
55372: PPUSH
55373: LD_VAR 0 1
55377: PPUSH
55378: CALL_OW 255
55382: PPUSH
55383: CALL_OW 321
55387: PUSH
55388: LD_INT 2
55390: EQUAL
55391: IFFALSE 55403
// eff := 50 else
55393: LD_ADDR_VAR 0 3
55397: PUSH
55398: LD_INT 50
55400: ST_TO_ADDR
55401: GO 55411
// eff := 25 ;
55403: LD_ADDR_VAR 0 3
55407: PUSH
55408: LD_INT 25
55410: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
55411: LD_VAR 0 1
55415: PPUSH
55416: CALL_OW 250
55420: PPUSH
55421: LD_VAR 0 1
55425: PPUSH
55426: CALL_OW 251
55430: PPUSH
55431: LD_VAR 0 3
55435: PPUSH
55436: CALL_OW 495
// end ;
55440: LD_VAR 0 2
55444: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
55445: LD_INT 0
55447: PPUSH
55448: PPUSH
55449: PPUSH
55450: PPUSH
55451: PPUSH
55452: PPUSH
55453: PPUSH
55454: PPUSH
55455: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
55456: LD_VAR 0 1
55460: PPUSH
55461: CALL_OW 302
55465: NOT
55466: IFTRUE 55485
55468: PUSH
55469: LD_VAR 0 2
55473: PPUSH
55474: LD_VAR 0 3
55478: PPUSH
55479: CALL_OW 488
55483: NOT
55484: OR
55485: IFTRUE 55494
55487: PUSH
55488: LD_VAR 0 4
55492: NOT
55493: OR
55494: IFFALSE 55498
// exit ;
55496: GO 55840
// list := [ ] ;
55498: LD_ADDR_VAR 0 13
55502: PUSH
55503: EMPTY
55504: ST_TO_ADDR
// if x - r < 0 then
55505: LD_VAR 0 2
55509: PUSH
55510: LD_VAR 0 4
55514: MINUS
55515: PUSH
55516: LD_INT 0
55518: LESS
55519: IFFALSE 55531
// min_x := 0 else
55521: LD_ADDR_VAR 0 7
55525: PUSH
55526: LD_INT 0
55528: ST_TO_ADDR
55529: GO 55547
// min_x := x - r ;
55531: LD_ADDR_VAR 0 7
55535: PUSH
55536: LD_VAR 0 2
55540: PUSH
55541: LD_VAR 0 4
55545: MINUS
55546: ST_TO_ADDR
// if y - r < 0 then
55547: LD_VAR 0 3
55551: PUSH
55552: LD_VAR 0 4
55556: MINUS
55557: PUSH
55558: LD_INT 0
55560: LESS
55561: IFFALSE 55573
// min_y := 0 else
55563: LD_ADDR_VAR 0 8
55567: PUSH
55568: LD_INT 0
55570: ST_TO_ADDR
55571: GO 55589
// min_y := y - r ;
55573: LD_ADDR_VAR 0 8
55577: PUSH
55578: LD_VAR 0 3
55582: PUSH
55583: LD_VAR 0 4
55587: MINUS
55588: ST_TO_ADDR
// max_x := x + r ;
55589: LD_ADDR_VAR 0 9
55593: PUSH
55594: LD_VAR 0 2
55598: PUSH
55599: LD_VAR 0 4
55603: PLUS
55604: ST_TO_ADDR
// max_y := y + r ;
55605: LD_ADDR_VAR 0 10
55609: PUSH
55610: LD_VAR 0 3
55614: PUSH
55615: LD_VAR 0 4
55619: PLUS
55620: ST_TO_ADDR
// for _x = min_x to max_x do
55621: LD_ADDR_VAR 0 11
55625: PUSH
55626: DOUBLE
55627: LD_VAR 0 7
55631: DEC
55632: ST_TO_ADDR
55633: LD_VAR 0 9
55637: PUSH
55638: FOR_TO
55639: IFFALSE 55758
// for _y = min_y to max_y do
55641: LD_ADDR_VAR 0 12
55645: PUSH
55646: DOUBLE
55647: LD_VAR 0 8
55651: DEC
55652: ST_TO_ADDR
55653: LD_VAR 0 10
55657: PUSH
55658: FOR_TO
55659: IFFALSE 55754
// begin if not ValidHex ( _x , _y ) then
55661: LD_VAR 0 11
55665: PPUSH
55666: LD_VAR 0 12
55670: PPUSH
55671: CALL_OW 488
55675: NOT
55676: IFFALSE 55680
// continue ;
55678: GO 55658
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
55680: LD_VAR 0 11
55684: PPUSH
55685: LD_VAR 0 12
55689: PPUSH
55690: CALL_OW 351
55694: IFFALSE 55712
55696: PUSH
55697: LD_VAR 0 11
55701: PPUSH
55702: LD_VAR 0 12
55706: PPUSH
55707: CALL_OW 554
55711: AND
55712: IFFALSE 55752
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
55714: LD_ADDR_VAR 0 13
55718: PUSH
55719: LD_VAR 0 13
55723: PPUSH
55724: LD_VAR 0 13
55728: PUSH
55729: LD_INT 1
55731: PLUS
55732: PPUSH
55733: LD_VAR 0 11
55737: PUSH
55738: LD_VAR 0 12
55742: PUSH
55743: EMPTY
55744: LIST
55745: LIST
55746: PPUSH
55747: CALL_OW 2
55751: ST_TO_ADDR
// end ;
55752: GO 55658
55754: POP
55755: POP
55756: GO 55638
55758: POP
55759: POP
// if not list then
55760: LD_VAR 0 13
55764: NOT
55765: IFFALSE 55769
// exit ;
55767: GO 55840
// for i in list do
55769: LD_ADDR_VAR 0 6
55773: PUSH
55774: LD_VAR 0 13
55778: PUSH
55779: FOR_IN
55780: IFFALSE 55838
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
55782: LD_VAR 0 1
55786: PPUSH
55787: LD_STRING M
55789: PUSH
55790: LD_VAR 0 6
55794: PUSH
55795: LD_INT 1
55797: ARRAY
55798: PUSH
55799: LD_VAR 0 6
55803: PUSH
55804: LD_INT 2
55806: ARRAY
55807: PUSH
55808: LD_INT 0
55810: PUSH
55811: LD_INT 0
55813: PUSH
55814: LD_INT 0
55816: PUSH
55817: LD_INT 0
55819: PUSH
55820: EMPTY
55821: LIST
55822: LIST
55823: LIST
55824: LIST
55825: LIST
55826: LIST
55827: LIST
55828: PUSH
55829: EMPTY
55830: LIST
55831: PPUSH
55832: CALL_OW 447
55836: GO 55779
55838: POP
55839: POP
// end ;
55840: LD_VAR 0 5
55844: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
55845: LD_INT 0
55847: PPUSH
55848: PPUSH
55849: PPUSH
55850: PPUSH
55851: PPUSH
55852: PPUSH
55853: PPUSH
55854: PPUSH
55855: PPUSH
55856: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
55857: LD_VAR 0 1
55861: PPUSH
55862: CALL_OW 302
55866: NOT
55867: IFTRUE 55886
55869: PUSH
55870: LD_VAR 0 2
55874: PPUSH
55875: LD_VAR 0 3
55879: PPUSH
55880: CALL_OW 488
55884: NOT
55885: OR
55886: IFTRUE 55895
55888: PUSH
55889: LD_VAR 0 4
55893: NOT
55894: OR
55895: IFFALSE 55899
// exit ;
55897: GO 56416
// list := [ ] ;
55899: LD_ADDR_VAR 0 13
55903: PUSH
55904: EMPTY
55905: ST_TO_ADDR
// if x - r < 0 then
55906: LD_VAR 0 2
55910: PUSH
55911: LD_VAR 0 4
55915: MINUS
55916: PUSH
55917: LD_INT 0
55919: LESS
55920: IFFALSE 55932
// min_x := 0 else
55922: LD_ADDR_VAR 0 7
55926: PUSH
55927: LD_INT 0
55929: ST_TO_ADDR
55930: GO 55948
// min_x := x - r ;
55932: LD_ADDR_VAR 0 7
55936: PUSH
55937: LD_VAR 0 2
55941: PUSH
55942: LD_VAR 0 4
55946: MINUS
55947: ST_TO_ADDR
// if y - r < 0 then
55948: LD_VAR 0 3
55952: PUSH
55953: LD_VAR 0 4
55957: MINUS
55958: PUSH
55959: LD_INT 0
55961: LESS
55962: IFFALSE 55974
// min_y := 0 else
55964: LD_ADDR_VAR 0 8
55968: PUSH
55969: LD_INT 0
55971: ST_TO_ADDR
55972: GO 55990
// min_y := y - r ;
55974: LD_ADDR_VAR 0 8
55978: PUSH
55979: LD_VAR 0 3
55983: PUSH
55984: LD_VAR 0 4
55988: MINUS
55989: ST_TO_ADDR
// max_x := x + r ;
55990: LD_ADDR_VAR 0 9
55994: PUSH
55995: LD_VAR 0 2
55999: PUSH
56000: LD_VAR 0 4
56004: PLUS
56005: ST_TO_ADDR
// max_y := y + r ;
56006: LD_ADDR_VAR 0 10
56010: PUSH
56011: LD_VAR 0 3
56015: PUSH
56016: LD_VAR 0 4
56020: PLUS
56021: ST_TO_ADDR
// for _x = min_x to max_x do
56022: LD_ADDR_VAR 0 11
56026: PUSH
56027: DOUBLE
56028: LD_VAR 0 7
56032: DEC
56033: ST_TO_ADDR
56034: LD_VAR 0 9
56038: PUSH
56039: FOR_TO
56040: IFFALSE 56159
// for _y = min_y to max_y do
56042: LD_ADDR_VAR 0 12
56046: PUSH
56047: DOUBLE
56048: LD_VAR 0 8
56052: DEC
56053: ST_TO_ADDR
56054: LD_VAR 0 10
56058: PUSH
56059: FOR_TO
56060: IFFALSE 56155
// begin if not ValidHex ( _x , _y ) then
56062: LD_VAR 0 11
56066: PPUSH
56067: LD_VAR 0 12
56071: PPUSH
56072: CALL_OW 488
56076: NOT
56077: IFFALSE 56081
// continue ;
56079: GO 56059
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
56081: LD_VAR 0 11
56085: PPUSH
56086: LD_VAR 0 12
56090: PPUSH
56091: CALL_OW 351
56095: IFFALSE 56113
56097: PUSH
56098: LD_VAR 0 11
56102: PPUSH
56103: LD_VAR 0 12
56107: PPUSH
56108: CALL_OW 554
56112: AND
56113: IFFALSE 56153
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
56115: LD_ADDR_VAR 0 13
56119: PUSH
56120: LD_VAR 0 13
56124: PPUSH
56125: LD_VAR 0 13
56129: PUSH
56130: LD_INT 1
56132: PLUS
56133: PPUSH
56134: LD_VAR 0 11
56138: PUSH
56139: LD_VAR 0 12
56143: PUSH
56144: EMPTY
56145: LIST
56146: LIST
56147: PPUSH
56148: CALL_OW 2
56152: ST_TO_ADDR
// end ;
56153: GO 56059
56155: POP
56156: POP
56157: GO 56039
56159: POP
56160: POP
// if not list then
56161: LD_VAR 0 13
56165: NOT
56166: IFFALSE 56170
// exit ;
56168: GO 56416
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
56170: LD_ADDR_VAR 0 13
56174: PUSH
56175: LD_VAR 0 1
56179: PPUSH
56180: LD_VAR 0 13
56184: PPUSH
56185: LD_INT 1
56187: PPUSH
56188: LD_INT 1
56190: PPUSH
56191: CALL 16102 0 4
56195: ST_TO_ADDR
// ComStop ( flame ) ;
56196: LD_VAR 0 1
56200: PPUSH
56201: CALL_OW 141
// for i in list do
56205: LD_ADDR_VAR 0 6
56209: PUSH
56210: LD_VAR 0 13
56214: PUSH
56215: FOR_IN
56216: IFFALSE 56247
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
56218: LD_VAR 0 1
56222: PPUSH
56223: LD_VAR 0 6
56227: PUSH
56228: LD_INT 1
56230: ARRAY
56231: PPUSH
56232: LD_VAR 0 6
56236: PUSH
56237: LD_INT 2
56239: ARRAY
56240: PPUSH
56241: CALL_OW 176
56245: GO 56215
56247: POP
56248: POP
// repeat wait ( 0 0$1 ) ;
56249: LD_INT 35
56251: PPUSH
56252: CALL_OW 67
// task := GetTaskList ( flame ) ;
56256: LD_ADDR_VAR 0 14
56260: PUSH
56261: LD_VAR 0 1
56265: PPUSH
56266: CALL_OW 437
56270: ST_TO_ADDR
// if not task then
56271: LD_VAR 0 14
56275: NOT
56276: IFFALSE 56280
// exit ;
56278: GO 56416
// if task [ 1 ] [ 1 ] <> | then
56280: LD_VAR 0 14
56284: PUSH
56285: LD_INT 1
56287: ARRAY
56288: PUSH
56289: LD_INT 1
56291: ARRAY
56292: PUSH
56293: LD_STRING |
56295: NONEQUAL
56296: IFFALSE 56300
// exit ;
56298: GO 56416
// _x := task [ 1 ] [ 2 ] ;
56300: LD_ADDR_VAR 0 11
56304: PUSH
56305: LD_VAR 0 14
56309: PUSH
56310: LD_INT 1
56312: ARRAY
56313: PUSH
56314: LD_INT 2
56316: ARRAY
56317: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
56318: LD_ADDR_VAR 0 12
56322: PUSH
56323: LD_VAR 0 14
56327: PUSH
56328: LD_INT 1
56330: ARRAY
56331: PUSH
56332: LD_INT 3
56334: ARRAY
56335: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
56336: LD_VAR 0 11
56340: PPUSH
56341: LD_VAR 0 12
56345: PPUSH
56346: CALL_OW 351
56350: NOT
56351: IFTRUE 56370
56353: PUSH
56354: LD_VAR 0 11
56358: PPUSH
56359: LD_VAR 0 12
56363: PPUSH
56364: CALL_OW 554
56368: NOT
56369: OR
56370: IFFALSE 56404
// begin task := Delete ( task , 1 ) ;
56372: LD_ADDR_VAR 0 14
56376: PUSH
56377: LD_VAR 0 14
56381: PPUSH
56382: LD_INT 1
56384: PPUSH
56385: CALL_OW 3
56389: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
56390: LD_VAR 0 1
56394: PPUSH
56395: LD_VAR 0 14
56399: PPUSH
56400: CALL_OW 446
// end ; until not HasTask ( flame ) ;
56404: LD_VAR 0 1
56408: PPUSH
56409: CALL_OW 314
56413: NOT
56414: IFFALSE 56249
// end ;
56416: LD_VAR 0 5
56420: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
56421: LD_EXP 49
56425: NOT
56426: IFFALSE 56476
56428: GO 56430
56430: DISABLE
// begin initHack := true ;
56431: LD_ADDR_EXP 49
56435: PUSH
56436: LD_INT 1
56438: ST_TO_ADDR
// hackTanks := [ ] ;
56439: LD_ADDR_EXP 50
56443: PUSH
56444: EMPTY
56445: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
56446: LD_ADDR_EXP 51
56450: PUSH
56451: EMPTY
56452: ST_TO_ADDR
// hackLimit := 3 ;
56453: LD_ADDR_EXP 52
56457: PUSH
56458: LD_INT 3
56460: ST_TO_ADDR
// hackDist := 12 ;
56461: LD_ADDR_EXP 53
56465: PUSH
56466: LD_INT 12
56468: ST_TO_ADDR
// hackCounter := [ ] ;
56469: LD_ADDR_EXP 54
56473: PUSH
56474: EMPTY
56475: ST_TO_ADDR
// end ;
56476: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
56477: LD_EXP 49
56481: IFFALSE 56499
56483: PUSH
56484: LD_INT 34
56486: PUSH
56487: LD_INT 99
56489: PUSH
56490: EMPTY
56491: LIST
56492: LIST
56493: PPUSH
56494: CALL_OW 69
56498: AND
56499: IFFALSE 56752
56501: GO 56503
56503: DISABLE
56504: LD_INT 0
56506: PPUSH
56507: PPUSH
// begin enable ;
56508: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
56509: LD_ADDR_VAR 0 1
56513: PUSH
56514: LD_INT 34
56516: PUSH
56517: LD_INT 99
56519: PUSH
56520: EMPTY
56521: LIST
56522: LIST
56523: PPUSH
56524: CALL_OW 69
56528: PUSH
56529: FOR_IN
56530: IFFALSE 56750
// begin if not i in hackTanks then
56532: LD_VAR 0 1
56536: PUSH
56537: LD_EXP 50
56541: IN
56542: NOT
56543: IFFALSE 56626
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
56545: LD_ADDR_EXP 50
56549: PUSH
56550: LD_EXP 50
56554: PPUSH
56555: LD_EXP 50
56559: PUSH
56560: LD_INT 1
56562: PLUS
56563: PPUSH
56564: LD_VAR 0 1
56568: PPUSH
56569: CALL_OW 1
56573: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
56574: LD_ADDR_EXP 51
56578: PUSH
56579: LD_EXP 51
56583: PPUSH
56584: LD_EXP 51
56588: PUSH
56589: LD_INT 1
56591: PLUS
56592: PPUSH
56593: EMPTY
56594: PPUSH
56595: CALL_OW 1
56599: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
56600: LD_ADDR_EXP 54
56604: PUSH
56605: LD_EXP 54
56609: PPUSH
56610: LD_EXP 54
56614: PUSH
56615: LD_INT 1
56617: PLUS
56618: PPUSH
56619: EMPTY
56620: PPUSH
56621: CALL_OW 1
56625: ST_TO_ADDR
// end ; if not IsOk ( i ) then
56626: LD_VAR 0 1
56630: PPUSH
56631: CALL_OW 302
56635: NOT
56636: IFFALSE 56649
// begin HackUnlinkAll ( i ) ;
56638: LD_VAR 0 1
56642: PPUSH
56643: CALL 56755 0 1
// continue ;
56647: GO 56529
// end ; HackCheckCapturedStatus ( i ) ;
56649: LD_VAR 0 1
56653: PPUSH
56654: CALL 57200 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
56658: LD_ADDR_VAR 0 2
56662: PUSH
56663: LD_INT 81
56665: PUSH
56666: LD_VAR 0 1
56670: PPUSH
56671: CALL_OW 255
56675: PUSH
56676: EMPTY
56677: LIST
56678: LIST
56679: PUSH
56680: LD_INT 33
56682: PUSH
56683: LD_INT 3
56685: PUSH
56686: EMPTY
56687: LIST
56688: LIST
56689: PUSH
56690: LD_INT 91
56692: PUSH
56693: LD_VAR 0 1
56697: PUSH
56698: LD_EXP 53
56702: PUSH
56703: EMPTY
56704: LIST
56705: LIST
56706: LIST
56707: PUSH
56708: LD_INT 50
56710: PUSH
56711: EMPTY
56712: LIST
56713: PUSH
56714: EMPTY
56715: LIST
56716: LIST
56717: LIST
56718: LIST
56719: PPUSH
56720: CALL_OW 69
56724: ST_TO_ADDR
// if not tmp then
56725: LD_VAR 0 2
56729: NOT
56730: IFFALSE 56734
// continue ;
56732: GO 56529
// HackLink ( i , tmp ) ;
56734: LD_VAR 0 1
56738: PPUSH
56739: LD_VAR 0 2
56743: PPUSH
56744: CALL 56891 0 2
// end ;
56748: GO 56529
56750: POP
56751: POP
// end ;
56752: PPOPN 2
56754: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
56755: LD_INT 0
56757: PPUSH
56758: PPUSH
56759: PPUSH
// if not hack in hackTanks then
56760: LD_VAR 0 1
56764: PUSH
56765: LD_EXP 50
56769: IN
56770: NOT
56771: IFFALSE 56775
// exit ;
56773: GO 56886
// index := GetElementIndex ( hackTanks , hack ) ;
56775: LD_ADDR_VAR 0 4
56779: PUSH
56780: LD_EXP 50
56784: PPUSH
56785: LD_VAR 0 1
56789: PPUSH
56790: CALL 15397 0 2
56794: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
56795: LD_EXP 51
56799: PUSH
56800: LD_VAR 0 4
56804: ARRAY
56805: IFFALSE 56886
// begin for i in hackTanksCaptured [ index ] do
56807: LD_ADDR_VAR 0 3
56811: PUSH
56812: LD_EXP 51
56816: PUSH
56817: LD_VAR 0 4
56821: ARRAY
56822: PUSH
56823: FOR_IN
56824: IFFALSE 56850
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
56826: LD_VAR 0 3
56830: PUSH
56831: LD_INT 1
56833: ARRAY
56834: PPUSH
56835: LD_VAR 0 3
56839: PUSH
56840: LD_INT 2
56842: ARRAY
56843: PPUSH
56844: CALL_OW 235
56848: GO 56823
56850: POP
56851: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
56852: LD_ADDR_EXP 51
56856: PUSH
56857: LD_EXP 51
56861: PPUSH
56862: LD_VAR 0 4
56866: PPUSH
56867: EMPTY
56868: PPUSH
56869: CALL_OW 1
56873: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
56874: LD_VAR 0 1
56878: PPUSH
56879: LD_INT 0
56881: PPUSH
56882: CALL_OW 505
// end ; end ;
56886: LD_VAR 0 2
56890: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
56891: LD_INT 0
56893: PPUSH
56894: PPUSH
56895: PPUSH
// if not hack in hackTanks or not vehicles then
56896: LD_VAR 0 1
56900: PUSH
56901: LD_EXP 50
56905: IN
56906: NOT
56907: IFTRUE 56916
56909: PUSH
56910: LD_VAR 0 2
56914: NOT
56915: OR
56916: IFFALSE 56920
// exit ;
56918: GO 57195
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
56920: LD_ADDR_VAR 0 2
56924: PUSH
56925: LD_VAR 0 1
56929: PPUSH
56930: LD_VAR 0 2
56934: PPUSH
56935: LD_INT 1
56937: PPUSH
56938: LD_INT 1
56940: PPUSH
56941: CALL 16049 0 4
56945: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
56946: LD_ADDR_VAR 0 5
56950: PUSH
56951: LD_EXP 50
56955: PPUSH
56956: LD_VAR 0 1
56960: PPUSH
56961: CALL 15397 0 2
56965: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
56966: LD_EXP 51
56970: PUSH
56971: LD_VAR 0 5
56975: ARRAY
56976: PUSH
56977: LD_EXP 52
56981: LESS
56982: IFFALSE 57171
// begin for i := 1 to vehicles do
56984: LD_ADDR_VAR 0 4
56988: PUSH
56989: DOUBLE
56990: LD_INT 1
56992: DEC
56993: ST_TO_ADDR
56994: LD_VAR 0 2
56998: PUSH
56999: FOR_TO
57000: IFFALSE 57169
// begin if hackTanksCaptured [ index ] = hackLimit then
57002: LD_EXP 51
57006: PUSH
57007: LD_VAR 0 5
57011: ARRAY
57012: PUSH
57013: LD_EXP 52
57017: EQUAL
57018: IFFALSE 57022
// break ;
57020: GO 57169
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
57022: LD_ADDR_EXP 54
57026: PUSH
57027: LD_EXP 54
57031: PPUSH
57032: LD_VAR 0 5
57036: PPUSH
57037: LD_EXP 54
57041: PUSH
57042: LD_VAR 0 5
57046: ARRAY
57047: PUSH
57048: LD_INT 1
57050: PLUS
57051: PPUSH
57052: CALL_OW 1
57056: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
57057: LD_ADDR_EXP 51
57061: PUSH
57062: LD_EXP 51
57066: PPUSH
57067: LD_VAR 0 5
57071: PUSH
57072: LD_EXP 51
57076: PUSH
57077: LD_VAR 0 5
57081: ARRAY
57082: PUSH
57083: LD_INT 1
57085: PLUS
57086: PUSH
57087: EMPTY
57088: LIST
57089: LIST
57090: PPUSH
57091: LD_VAR 0 2
57095: PUSH
57096: LD_VAR 0 4
57100: ARRAY
57101: PUSH
57102: LD_VAR 0 2
57106: PUSH
57107: LD_VAR 0 4
57111: ARRAY
57112: PPUSH
57113: CALL_OW 255
57117: PUSH
57118: EMPTY
57119: LIST
57120: LIST
57121: PPUSH
57122: CALL 15614 0 3
57126: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
57127: LD_VAR 0 2
57131: PUSH
57132: LD_VAR 0 4
57136: ARRAY
57137: PPUSH
57138: LD_VAR 0 1
57142: PPUSH
57143: CALL_OW 255
57147: PPUSH
57148: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
57152: LD_VAR 0 2
57156: PUSH
57157: LD_VAR 0 4
57161: ARRAY
57162: PPUSH
57163: CALL_OW 141
// end ;
57167: GO 56999
57169: POP
57170: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
57171: LD_VAR 0 1
57175: PPUSH
57176: LD_EXP 51
57180: PUSH
57181: LD_VAR 0 5
57185: ARRAY
57186: PUSH
57187: LD_INT 0
57189: PLUS
57190: PPUSH
57191: CALL_OW 505
// end ;
57195: LD_VAR 0 3
57199: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
57200: LD_INT 0
57202: PPUSH
57203: PPUSH
57204: PPUSH
57205: PPUSH
// if not hack in hackTanks then
57206: LD_VAR 0 1
57210: PUSH
57211: LD_EXP 50
57215: IN
57216: NOT
57217: IFFALSE 57221
// exit ;
57219: GO 57465
// index := GetElementIndex ( hackTanks , hack ) ;
57221: LD_ADDR_VAR 0 4
57225: PUSH
57226: LD_EXP 50
57230: PPUSH
57231: LD_VAR 0 1
57235: PPUSH
57236: CALL 15397 0 2
57240: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
57241: LD_ADDR_VAR 0 3
57245: PUSH
57246: DOUBLE
57247: LD_EXP 51
57251: PUSH
57252: LD_VAR 0 4
57256: ARRAY
57257: INC
57258: ST_TO_ADDR
57259: LD_INT 1
57261: PUSH
57262: FOR_DOWNTO
57263: IFFALSE 57439
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
57265: LD_ADDR_VAR 0 5
57269: PUSH
57270: LD_EXP 51
57274: PUSH
57275: LD_VAR 0 4
57279: ARRAY
57280: PUSH
57281: LD_VAR 0 3
57285: ARRAY
57286: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
57287: LD_VAR 0 5
57291: PUSH
57292: LD_INT 1
57294: ARRAY
57295: PPUSH
57296: CALL_OW 302
57300: NOT
57301: IFTRUE 57329
57303: PUSH
57304: LD_VAR 0 5
57308: PUSH
57309: LD_INT 1
57311: ARRAY
57312: PPUSH
57313: CALL_OW 255
57317: PUSH
57318: LD_VAR 0 1
57322: PPUSH
57323: CALL_OW 255
57327: NONEQUAL
57328: OR
57329: IFFALSE 57437
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
57331: LD_VAR 0 5
57335: PUSH
57336: LD_INT 1
57338: ARRAY
57339: PPUSH
57340: CALL_OW 305
57344: IFFALSE 57372
57346: PUSH
57347: LD_VAR 0 5
57351: PUSH
57352: LD_INT 1
57354: ARRAY
57355: PPUSH
57356: CALL_OW 255
57360: PUSH
57361: LD_VAR 0 1
57365: PPUSH
57366: CALL_OW 255
57370: EQUAL
57371: AND
57372: IFFALSE 57396
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
57374: LD_VAR 0 5
57378: PUSH
57379: LD_INT 1
57381: ARRAY
57382: PPUSH
57383: LD_VAR 0 5
57387: PUSH
57388: LD_INT 2
57390: ARRAY
57391: PPUSH
57392: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
57396: LD_ADDR_EXP 51
57400: PUSH
57401: LD_EXP 51
57405: PPUSH
57406: LD_VAR 0 4
57410: PPUSH
57411: LD_EXP 51
57415: PUSH
57416: LD_VAR 0 4
57420: ARRAY
57421: PPUSH
57422: LD_VAR 0 3
57426: PPUSH
57427: CALL_OW 3
57431: PPUSH
57432: CALL_OW 1
57436: ST_TO_ADDR
// end ; end ;
57437: GO 57262
57439: POP
57440: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
57441: LD_VAR 0 1
57445: PPUSH
57446: LD_EXP 51
57450: PUSH
57451: LD_VAR 0 4
57455: ARRAY
57456: PUSH
57457: LD_INT 0
57459: PLUS
57460: PPUSH
57461: CALL_OW 505
// end ;
57465: LD_VAR 0 2
57469: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
57470: LD_INT 0
57472: PPUSH
57473: PPUSH
57474: PPUSH
57475: PPUSH
// if not hack in hackTanks then
57476: LD_VAR 0 1
57480: PUSH
57481: LD_EXP 50
57485: IN
57486: NOT
57487: IFFALSE 57491
// exit ;
57489: GO 57576
// index := GetElementIndex ( hackTanks , hack ) ;
57491: LD_ADDR_VAR 0 5
57495: PUSH
57496: LD_EXP 50
57500: PPUSH
57501: LD_VAR 0 1
57505: PPUSH
57506: CALL 15397 0 2
57510: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
57511: LD_ADDR_VAR 0 4
57515: PUSH
57516: DOUBLE
57517: LD_INT 1
57519: DEC
57520: ST_TO_ADDR
57521: LD_EXP 51
57525: PUSH
57526: LD_VAR 0 5
57530: ARRAY
57531: PUSH
57532: FOR_TO
57533: IFFALSE 57574
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
57535: LD_EXP 51
57539: PUSH
57540: LD_VAR 0 5
57544: ARRAY
57545: PUSH
57546: LD_VAR 0 4
57550: ARRAY
57551: PUSH
57552: LD_INT 1
57554: ARRAY
57555: PUSH
57556: LD_VAR 0 2
57560: EQUAL
57561: IFFALSE 57572
// KillUnit ( vehicle ) ;
57563: LD_VAR 0 2
57567: PPUSH
57568: CALL_OW 66
57572: GO 57532
57574: POP
57575: POP
// end ;
57576: LD_VAR 0 3
57580: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do var i ;
57581: LD_EXP 55
57585: NOT
57586: IFFALSE 57719
57588: GO 57590
57590: DISABLE
57591: LD_INT 0
57593: PPUSH
// begin initMiner := true ;
57594: LD_ADDR_EXP 55
57598: PUSH
57599: LD_INT 1
57601: ST_TO_ADDR
// minersList := [ ] ;
57602: LD_ADDR_EXP 56
57606: PUSH
57607: EMPTY
57608: ST_TO_ADDR
// minerMinesList := [ ] ;
57609: LD_ADDR_EXP 57
57613: PUSH
57614: EMPTY
57615: ST_TO_ADDR
// minesLimitPerVehicle := 6 ;
57616: LD_ADDR_EXP 58
57620: PUSH
57621: LD_INT 6
57623: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
57624: LD_ADDR_VAR 0 1
57628: PUSH
57629: LD_INT 34
57631: PUSH
57632: LD_INT 81
57634: PUSH
57635: EMPTY
57636: LIST
57637: LIST
57638: PPUSH
57639: CALL_OW 69
57643: PUSH
57644: FOR_IN
57645: IFFALSE 57717
// begin if not i in minersList then
57647: LD_VAR 0 1
57651: PUSH
57652: LD_EXP 56
57656: IN
57657: NOT
57658: IFFALSE 57715
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
57660: LD_ADDR_EXP 56
57664: PUSH
57665: LD_EXP 56
57669: PPUSH
57670: LD_EXP 56
57674: PUSH
57675: LD_INT 1
57677: PLUS
57678: PPUSH
57679: LD_VAR 0 1
57683: PPUSH
57684: CALL_OW 1
57688: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
57689: LD_ADDR_EXP 57
57693: PUSH
57694: LD_EXP 57
57698: PPUSH
57699: LD_EXP 57
57703: PUSH
57704: LD_INT 1
57706: PLUS
57707: PPUSH
57708: EMPTY
57709: PPUSH
57710: CALL_OW 1
57714: ST_TO_ADDR
// end end ;
57715: GO 57644
57717: POP
57718: POP
// end ;
57719: PPOPN 1
57721: END
// every 0 0$1 trigger initMiner and ( Count ( minerMinesList ) or FilterAllUnits ( [ f_weapon , ar_miner ] ) ) do var i , j , side , tmp ;
57722: LD_EXP 55
57726: IFFALSE 57757
57728: PUSH
57729: LD_EXP 57
57733: PPUSH
57734: CALL 12696 0 1
57738: IFTRUE 57756
57740: PUSH
57741: LD_INT 34
57743: PUSH
57744: LD_INT 81
57746: PUSH
57747: EMPTY
57748: LIST
57749: LIST
57750: PPUSH
57751: CALL_OW 69
57755: OR
57756: AND
57757: IFFALSE 58256
57759: GO 57761
57761: DISABLE
57762: LD_INT 0
57764: PPUSH
57765: PPUSH
57766: PPUSH
57767: PPUSH
// begin enable ;
57768: ENABLE
// for i := minerMinesList downto 1 do
57769: LD_ADDR_VAR 0 1
57773: PUSH
57774: DOUBLE
57775: LD_EXP 57
57779: INC
57780: ST_TO_ADDR
57781: LD_INT 1
57783: PUSH
57784: FOR_DOWNTO
57785: IFFALSE 58254
// begin if IsLive ( minersList [ i ] ) then
57787: LD_EXP 56
57791: PUSH
57792: LD_VAR 0 1
57796: ARRAY
57797: PPUSH
57798: CALL_OW 300
57802: IFFALSE 57835
// SetUnitDisplayNumber ( minersList [ i ] , Count ( minerMinesList [ i ] ) ) ;
57804: LD_EXP 56
57808: PUSH
57809: LD_VAR 0 1
57813: ARRAY
57814: PPUSH
57815: LD_EXP 57
57819: PUSH
57820: LD_VAR 0 1
57824: ARRAY
57825: PPUSH
57826: CALL 12696 0 1
57830: PPUSH
57831: CALL_OW 505
// if not minerMinesList [ i ] then
57835: LD_EXP 57
57839: PUSH
57840: LD_VAR 0 1
57844: ARRAY
57845: NOT
57846: IFFALSE 57850
// continue ;
57848: GO 57784
// for j := minerMinesList [ i ] downto 1 do
57850: LD_ADDR_VAR 0 2
57854: PUSH
57855: DOUBLE
57856: LD_EXP 57
57860: PUSH
57861: LD_VAR 0 1
57865: ARRAY
57866: INC
57867: ST_TO_ADDR
57868: LD_INT 1
57870: PUSH
57871: FOR_DOWNTO
57872: IFFALSE 58250
// begin side := GetSide ( minersList [ i ] ) ;
57874: LD_ADDR_VAR 0 3
57878: PUSH
57879: LD_EXP 56
57883: PUSH
57884: LD_VAR 0 1
57888: ARRAY
57889: PPUSH
57890: CALL_OW 255
57894: ST_TO_ADDR
// if IsDead ( minersList [ i ] ) or not IsPlaced ( minersList [ i ] ) then
57895: LD_EXP 56
57899: PUSH
57900: LD_VAR 0 1
57904: ARRAY
57905: PPUSH
57906: CALL_OW 301
57910: IFTRUE 57930
57912: PUSH
57913: LD_EXP 56
57917: PUSH
57918: LD_VAR 0 1
57922: ARRAY
57923: PPUSH
57924: CALL_OW 305
57928: NOT
57929: OR
57930: IFFALSE 58021
// begin RemoveMineXY ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
57932: LD_EXP 57
57936: PUSH
57937: LD_VAR 0 1
57941: ARRAY
57942: PUSH
57943: LD_VAR 0 2
57947: ARRAY
57948: PUSH
57949: LD_INT 1
57951: ARRAY
57952: PPUSH
57953: LD_EXP 57
57957: PUSH
57958: LD_VAR 0 1
57962: ARRAY
57963: PUSH
57964: LD_VAR 0 2
57968: ARRAY
57969: PUSH
57970: LD_INT 2
57972: ARRAY
57973: PPUSH
57974: CALL_OW 612
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
57978: LD_ADDR_EXP 57
57982: PUSH
57983: LD_EXP 57
57987: PPUSH
57988: LD_VAR 0 1
57992: PPUSH
57993: LD_EXP 57
57997: PUSH
57998: LD_VAR 0 1
58002: ARRAY
58003: PPUSH
58004: LD_VAR 0 2
58008: PPUSH
58009: CALL_OW 3
58013: PPUSH
58014: CALL_OW 1
58018: ST_TO_ADDR
// continue ;
58019: GO 57871
// end ; tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
58021: LD_ADDR_VAR 0 4
58025: PUSH
58026: LD_EXP 57
58030: PUSH
58031: LD_VAR 0 1
58035: ARRAY
58036: PUSH
58037: LD_VAR 0 2
58041: ARRAY
58042: PUSH
58043: LD_INT 1
58045: ARRAY
58046: PPUSH
58047: LD_EXP 57
58051: PUSH
58052: LD_VAR 0 1
58056: ARRAY
58057: PUSH
58058: LD_VAR 0 2
58062: ARRAY
58063: PUSH
58064: LD_INT 2
58066: ARRAY
58067: PPUSH
58068: CALL_OW 428
58072: ST_TO_ADDR
// if not tmp then
58073: LD_VAR 0 4
58077: NOT
58078: IFFALSE 58082
// continue ;
58080: GO 57871
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
58082: LD_VAR 0 4
58086: PUSH
58087: LD_INT 81
58089: PUSH
58090: LD_VAR 0 3
58094: PUSH
58095: EMPTY
58096: LIST
58097: LIST
58098: PPUSH
58099: CALL_OW 69
58103: IN
58104: IFFALSE 58154
58106: PUSH
58107: LD_EXP 57
58111: PUSH
58112: LD_VAR 0 1
58116: ARRAY
58117: PUSH
58118: LD_VAR 0 2
58122: ARRAY
58123: PUSH
58124: LD_INT 1
58126: ARRAY
58127: PPUSH
58128: LD_EXP 57
58132: PUSH
58133: LD_VAR 0 1
58137: ARRAY
58138: PUSH
58139: LD_VAR 0 2
58143: ARRAY
58144: PUSH
58145: LD_INT 2
58147: ARRAY
58148: PPUSH
58149: CALL_OW 458
58153: AND
58154: IFFALSE 58248
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
58156: LD_EXP 57
58160: PUSH
58161: LD_VAR 0 1
58165: ARRAY
58166: PUSH
58167: LD_VAR 0 2
58171: ARRAY
58172: PUSH
58173: LD_INT 1
58175: ARRAY
58176: PPUSH
58177: LD_EXP 57
58181: PUSH
58182: LD_VAR 0 1
58186: ARRAY
58187: PUSH
58188: LD_VAR 0 2
58192: ARRAY
58193: PUSH
58194: LD_INT 2
58196: ARRAY
58197: PPUSH
58198: LD_VAR 0 3
58202: PPUSH
58203: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
58207: LD_ADDR_EXP 57
58211: PUSH
58212: LD_EXP 57
58216: PPUSH
58217: LD_VAR 0 1
58221: PPUSH
58222: LD_EXP 57
58226: PUSH
58227: LD_VAR 0 1
58231: ARRAY
58232: PPUSH
58233: LD_VAR 0 2
58237: PPUSH
58238: CALL_OW 3
58242: PPUSH
58243: CALL_OW 1
58247: ST_TO_ADDR
// end ; end ;
58248: GO 57871
58250: POP
58251: POP
// end ;
58252: GO 57784
58254: POP
58255: POP
// end ;
58256: PPOPN 4
58258: END
// export function MinerPlaceMine ( unit , x , y ) ; var index , side , i ; begin
58259: LD_INT 0
58261: PPUSH
58262: PPUSH
58263: PPUSH
58264: PPUSH
// result := false ;
58265: LD_ADDR_VAR 0 4
58269: PUSH
58270: LD_INT 0
58272: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
58273: LD_VAR 0 1
58277: PPUSH
58278: CALL_OW 264
58282: PUSH
58283: LD_INT 81
58285: EQUAL
58286: NOT
58287: IFFALSE 58291
// exit ;
58289: GO 58661
// side := GetSide ( unit ) ;
58291: LD_ADDR_VAR 0 6
58295: PUSH
58296: LD_VAR 0 1
58300: PPUSH
58301: CALL_OW 255
58305: ST_TO_ADDR
// index := GetElementIndex ( minersList , unit ) ;
58306: LD_ADDR_VAR 0 5
58310: PUSH
58311: LD_EXP 56
58315: PPUSH
58316: LD_VAR 0 1
58320: PPUSH
58321: CALL 15397 0 2
58325: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
58326: LD_EXP 57
58330: PUSH
58331: LD_VAR 0 5
58335: ARRAY
58336: PUSH
58337: LD_EXP 58
58341: GREATEREQUAL
58342: IFFALSE 58346
// exit ;
58344: GO 58661
// ComMoveXY ( unit , x , y ) ;
58346: LD_VAR 0 1
58350: PPUSH
58351: LD_VAR 0 2
58355: PPUSH
58356: LD_VAR 0 3
58360: PPUSH
58361: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
58365: LD_INT 35
58367: PPUSH
58368: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
58372: LD_VAR 0 1
58376: PPUSH
58377: LD_VAR 0 2
58381: PPUSH
58382: LD_VAR 0 3
58386: PPUSH
58387: CALL 47443 0 3
58391: NOT
58392: IFFALSE 58405
58394: PUSH
58395: LD_VAR 0 1
58399: PPUSH
58400: CALL_OW 314
58404: AND
58405: IFFALSE 58409
// exit ;
58407: GO 58661
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
58409: LD_VAR 0 2
58413: PPUSH
58414: LD_VAR 0 3
58418: PPUSH
58419: CALL_OW 428
58423: PUSH
58424: LD_VAR 0 1
58428: EQUAL
58429: IFFALSE 58443
58431: PUSH
58432: LD_VAR 0 1
58436: PPUSH
58437: CALL_OW 314
58441: NOT
58442: AND
58443: IFFALSE 58365
// if MineAtPos ( x , y ) then
58445: LD_VAR 0 2
58449: PPUSH
58450: LD_VAR 0 3
58454: PPUSH
58455: CALL_OW 458
58459: IFFALSE 58463
// exit ;
58461: GO 58661
// if your_side = side then
58463: LD_OWVAR 2
58467: PUSH
58468: LD_VAR 0 6
58472: EQUAL
58473: IFFALSE 58492
// PlaySoundXY ( x , y , PlantMine ) ;
58475: LD_VAR 0 2
58479: PPUSH
58480: LD_VAR 0 3
58484: PPUSH
58485: LD_STRING PlantMine
58487: PPUSH
58488: CALL_OW 366
// repeat wait ( 1 ) ;
58492: LD_INT 1
58494: PPUSH
58495: CALL_OW 67
// until PlaceMine ( x , y , side , 0 ) ;
58499: LD_VAR 0 2
58503: PPUSH
58504: LD_VAR 0 3
58508: PPUSH
58509: LD_VAR 0 6
58513: PPUSH
58514: LD_INT 0
58516: PPUSH
58517: CALL_OW 454
58521: IFFALSE 58492
// if MineAtPos ( x , y ) then
58523: LD_VAR 0 2
58527: PPUSH
58528: LD_VAR 0 3
58532: PPUSH
58533: CALL_OW 458
58537: IFFALSE 58653
// begin for i in minerMinesList [ index ] do
58539: LD_ADDR_VAR 0 7
58543: PUSH
58544: LD_EXP 57
58548: PUSH
58549: LD_VAR 0 5
58553: ARRAY
58554: PUSH
58555: FOR_IN
58556: IFFALSE 58598
// if i [ 1 ] = x and i [ 2 ] = y then
58558: LD_VAR 0 7
58562: PUSH
58563: LD_INT 1
58565: ARRAY
58566: PUSH
58567: LD_VAR 0 2
58571: EQUAL
58572: IFFALSE 58590
58574: PUSH
58575: LD_VAR 0 7
58579: PUSH
58580: LD_INT 2
58582: ARRAY
58583: PUSH
58584: LD_VAR 0 3
58588: EQUAL
58589: AND
58590: IFFALSE 58596
// exit ;
58592: POP
58593: POP
58594: GO 58661
58596: GO 58555
58598: POP
58599: POP
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
58600: LD_ADDR_EXP 57
58604: PUSH
58605: LD_EXP 57
58609: PPUSH
58610: LD_VAR 0 5
58614: PUSH
58615: LD_EXP 57
58619: PUSH
58620: LD_VAR 0 5
58624: ARRAY
58625: PUSH
58626: LD_INT 1
58628: PLUS
58629: PUSH
58630: EMPTY
58631: LIST
58632: LIST
58633: PPUSH
58634: LD_VAR 0 2
58638: PUSH
58639: LD_VAR 0 3
58643: PUSH
58644: EMPTY
58645: LIST
58646: LIST
58647: PPUSH
58648: CALL 15614 0 3
58652: ST_TO_ADDR
// end ; result := true ;
58653: LD_ADDR_VAR 0 4
58657: PUSH
58658: LD_INT 1
58660: ST_TO_ADDR
// end ;
58661: LD_VAR 0 4
58665: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
58666: LD_INT 0
58668: PPUSH
58669: PPUSH
58670: PPUSH
// if not unit in minersList then
58671: LD_VAR 0 1
58675: PUSH
58676: LD_EXP 56
58680: IN
58681: NOT
58682: IFFALSE 58686
// exit ;
58684: GO 58893
// index := GetElementIndex ( minersList , unit ) ;
58686: LD_ADDR_VAR 0 6
58690: PUSH
58691: LD_EXP 56
58695: PPUSH
58696: LD_VAR 0 1
58700: PPUSH
58701: CALL 15397 0 2
58705: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
58706: LD_ADDR_VAR 0 5
58710: PUSH
58711: DOUBLE
58712: LD_EXP 57
58716: PUSH
58717: LD_VAR 0 6
58721: ARRAY
58722: INC
58723: ST_TO_ADDR
58724: LD_INT 1
58726: PUSH
58727: FOR_DOWNTO
58728: IFFALSE 58891
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
58730: LD_EXP 57
58734: PUSH
58735: LD_VAR 0 6
58739: ARRAY
58740: PUSH
58741: LD_VAR 0 5
58745: ARRAY
58746: PUSH
58747: LD_INT 1
58749: ARRAY
58750: PPUSH
58751: LD_EXP 57
58755: PUSH
58756: LD_VAR 0 6
58760: ARRAY
58761: PUSH
58762: LD_VAR 0 5
58766: ARRAY
58767: PUSH
58768: LD_INT 2
58770: ARRAY
58771: PPUSH
58772: LD_VAR 0 2
58776: PPUSH
58777: LD_VAR 0 3
58781: PPUSH
58782: CALL_OW 298
58786: PUSH
58787: LD_INT 6
58789: LESS
58790: IFFALSE 58889
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
58792: LD_EXP 57
58796: PUSH
58797: LD_VAR 0 6
58801: ARRAY
58802: PUSH
58803: LD_VAR 0 5
58807: ARRAY
58808: PUSH
58809: LD_INT 1
58811: ARRAY
58812: PPUSH
58813: LD_EXP 57
58817: PUSH
58818: LD_VAR 0 6
58822: ARRAY
58823: PUSH
58824: LD_VAR 0 5
58828: ARRAY
58829: PUSH
58830: LD_INT 2
58832: ARRAY
58833: PPUSH
58834: LD_VAR 0 1
58838: PPUSH
58839: CALL_OW 255
58843: PPUSH
58844: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
58848: LD_ADDR_EXP 57
58852: PUSH
58853: LD_EXP 57
58857: PPUSH
58858: LD_VAR 0 6
58862: PPUSH
58863: LD_EXP 57
58867: PUSH
58868: LD_VAR 0 6
58872: ARRAY
58873: PPUSH
58874: LD_VAR 0 5
58878: PPUSH
58879: CALL_OW 3
58883: PPUSH
58884: CALL_OW 1
58888: ST_TO_ADDR
// end ; end ;
58889: GO 58727
58891: POP
58892: POP
// end ;
58893: LD_VAR 0 4
58897: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
58898: LD_INT 0
58900: PPUSH
58901: PPUSH
58902: PPUSH
58903: PPUSH
58904: PPUSH
58905: PPUSH
58906: PPUSH
58907: PPUSH
58908: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
58909: LD_VAR 0 1
58913: PPUSH
58914: CALL_OW 264
58918: PUSH
58919: LD_INT 81
58921: EQUAL
58922: NOT
58923: IFTRUE 58938
58925: PUSH
58926: LD_VAR 0 1
58930: PUSH
58931: LD_EXP 56
58935: IN
58936: NOT
58937: OR
58938: IFFALSE 58942
// exit ;
58940: GO 59268
// index := GetElementIndex ( minersList , unit ) ;
58942: LD_ADDR_VAR 0 6
58946: PUSH
58947: LD_EXP 56
58951: PPUSH
58952: LD_VAR 0 1
58956: PPUSH
58957: CALL 15397 0 2
58961: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
58962: LD_ADDR_VAR 0 8
58966: PUSH
58967: LD_EXP 58
58971: PUSH
58972: LD_EXP 57
58976: PUSH
58977: LD_VAR 0 6
58981: ARRAY
58982: MINUS
58983: ST_TO_ADDR
// if not minesFreeAmount then
58984: LD_VAR 0 8
58988: NOT
58989: IFFALSE 58993
// exit ;
58991: GO 59268
// tmp := [ ] ;
58993: LD_ADDR_VAR 0 7
58997: PUSH
58998: EMPTY
58999: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
59000: LD_ADDR_VAR 0 5
59004: PUSH
59005: DOUBLE
59006: LD_INT 1
59008: DEC
59009: ST_TO_ADDR
59010: LD_VAR 0 8
59014: PUSH
59015: FOR_TO
59016: IFFALSE 59215
// begin _d := rand ( 0 , 5 ) ;
59018: LD_ADDR_VAR 0 11
59022: PUSH
59023: LD_INT 0
59025: PPUSH
59026: LD_INT 5
59028: PPUSH
59029: CALL_OW 12
59033: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
59034: LD_ADDR_VAR 0 12
59038: PUSH
59039: LD_INT 2
59041: PPUSH
59042: LD_INT 6
59044: PPUSH
59045: CALL_OW 12
59049: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
59050: LD_ADDR_VAR 0 9
59054: PUSH
59055: LD_VAR 0 2
59059: PPUSH
59060: LD_VAR 0 11
59064: PPUSH
59065: LD_VAR 0 12
59069: PPUSH
59070: CALL_OW 272
59074: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
59075: LD_ADDR_VAR 0 10
59079: PUSH
59080: LD_VAR 0 3
59084: PPUSH
59085: LD_VAR 0 11
59089: PPUSH
59090: LD_VAR 0 12
59094: PPUSH
59095: CALL_OW 273
59099: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
59100: LD_VAR 0 9
59104: PPUSH
59105: LD_VAR 0 10
59109: PPUSH
59110: CALL_OW 488
59114: IFFALSE 59138
59116: PUSH
59117: LD_VAR 0 9
59121: PUSH
59122: LD_VAR 0 10
59126: PUSH
59127: EMPTY
59128: LIST
59129: LIST
59130: PUSH
59131: LD_VAR 0 7
59135: IN
59136: NOT
59137: AND
59138: IFFALSE 59157
59140: PUSH
59141: LD_VAR 0 9
59145: PPUSH
59146: LD_VAR 0 10
59150: PPUSH
59151: CALL_OW 458
59155: NOT
59156: AND
59157: IFFALSE 59199
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
59159: LD_ADDR_VAR 0 7
59163: PUSH
59164: LD_VAR 0 7
59168: PPUSH
59169: LD_VAR 0 7
59173: PUSH
59174: LD_INT 1
59176: PLUS
59177: PPUSH
59178: LD_VAR 0 9
59182: PUSH
59183: LD_VAR 0 10
59187: PUSH
59188: EMPTY
59189: LIST
59190: LIST
59191: PPUSH
59192: CALL_OW 1
59196: ST_TO_ADDR
59197: GO 59213
// i := i - 1 ;
59199: LD_ADDR_VAR 0 5
59203: PUSH
59204: LD_VAR 0 5
59208: PUSH
59209: LD_INT 1
59211: MINUS
59212: ST_TO_ADDR
// end ;
59213: GO 59015
59215: POP
59216: POP
// for i in tmp do
59217: LD_ADDR_VAR 0 5
59221: PUSH
59222: LD_VAR 0 7
59226: PUSH
59227: FOR_IN
59228: IFFALSE 59266
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
59230: LD_VAR 0 1
59234: PPUSH
59235: LD_VAR 0 5
59239: PUSH
59240: LD_INT 1
59242: ARRAY
59243: PPUSH
59244: LD_VAR 0 5
59248: PUSH
59249: LD_INT 2
59251: ARRAY
59252: PPUSH
59253: CALL 58259 0 3
59257: NOT
59258: IFFALSE 59264
// exit ;
59260: POP
59261: POP
59262: GO 59268
59264: GO 59227
59266: POP
59267: POP
// end ;
59268: LD_VAR 0 4
59272: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
59273: LD_INT 0
59275: PPUSH
59276: PPUSH
59277: PPUSH
59278: PPUSH
59279: PPUSH
59280: PPUSH
59281: PPUSH
59282: PPUSH
59283: PPUSH
// if GetClass ( unit ) <> class_sniper then
59284: LD_VAR 0 1
59288: PPUSH
59289: CALL_OW 257
59293: PUSH
59294: LD_INT 5
59296: NONEQUAL
59297: IFFALSE 59301
// exit ;
59299: GO 59771
// dist := 8 ;
59301: LD_ADDR_VAR 0 5
59305: PUSH
59306: LD_INT 8
59308: ST_TO_ADDR
// viewRange := 12 ;
59309: LD_ADDR_VAR 0 8
59313: PUSH
59314: LD_INT 12
59316: ST_TO_ADDR
// side := GetSide ( unit ) ;
59317: LD_ADDR_VAR 0 6
59321: PUSH
59322: LD_VAR 0 1
59326: PPUSH
59327: CALL_OW 255
59331: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
59332: LD_INT 61
59334: PPUSH
59335: LD_VAR 0 6
59339: PPUSH
59340: CALL_OW 321
59344: PUSH
59345: LD_INT 2
59347: EQUAL
59348: IFFALSE 59358
// viewRange := 16 ;
59350: LD_ADDR_VAR 0 8
59354: PUSH
59355: LD_INT 16
59357: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
59358: LD_VAR 0 1
59362: PPUSH
59363: LD_VAR 0 2
59367: PPUSH
59368: LD_VAR 0 3
59372: PPUSH
59373: CALL_OW 297
59377: PUSH
59378: LD_VAR 0 5
59382: GREATER
59383: IFFALSE 59462
// begin ComMoveXY ( unit , x , y ) ;
59385: LD_VAR 0 1
59389: PPUSH
59390: LD_VAR 0 2
59394: PPUSH
59395: LD_VAR 0 3
59399: PPUSH
59400: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
59404: LD_INT 35
59406: PPUSH
59407: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
59411: LD_VAR 0 1
59415: PPUSH
59416: LD_VAR 0 2
59420: PPUSH
59421: LD_VAR 0 3
59425: PPUSH
59426: CALL 47443 0 3
59430: NOT
59431: IFFALSE 59435
// exit ;
59433: GO 59771
// until GetDistUnitXY ( unit , x , y ) < dist ;
59435: LD_VAR 0 1
59439: PPUSH
59440: LD_VAR 0 2
59444: PPUSH
59445: LD_VAR 0 3
59449: PPUSH
59450: CALL_OW 297
59454: PUSH
59455: LD_VAR 0 5
59459: LESS
59460: IFFALSE 59404
// end ; ComTurnXY ( unit , x , y ) ;
59462: LD_VAR 0 1
59466: PPUSH
59467: LD_VAR 0 2
59471: PPUSH
59472: LD_VAR 0 3
59476: PPUSH
59477: CALL_OW 118
// repeat if Multiplayer then
59481: LD_OWVAR 4
59485: IFFALSE 59496
// wait ( 35 ) else
59487: LD_INT 35
59489: PPUSH
59490: CALL_OW 67
59494: GO 59503
// wait ( 5 ) ;
59496: LD_INT 5
59498: PPUSH
59499: CALL_OW 67
// _d := GetDir ( unit ) ;
59503: LD_ADDR_VAR 0 11
59507: PUSH
59508: LD_VAR 0 1
59512: PPUSH
59513: CALL_OW 254
59517: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
59518: LD_ADDR_VAR 0 7
59522: PUSH
59523: LD_VAR 0 1
59527: PPUSH
59528: CALL_OW 250
59532: PPUSH
59533: LD_VAR 0 1
59537: PPUSH
59538: CALL_OW 251
59542: PPUSH
59543: LD_VAR 0 2
59547: PPUSH
59548: LD_VAR 0 3
59552: PPUSH
59553: CALL 50079 0 4
59557: ST_TO_ADDR
// until dir = _d ;
59558: LD_VAR 0 7
59562: PUSH
59563: LD_VAR 0 11
59567: EQUAL
59568: IFFALSE 59481
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
59570: LD_ADDR_VAR 0 9
59574: PUSH
59575: LD_VAR 0 1
59579: PPUSH
59580: CALL_OW 250
59584: PPUSH
59585: LD_VAR 0 7
59589: PPUSH
59590: LD_VAR 0 5
59594: PPUSH
59595: CALL_OW 272
59599: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
59600: LD_ADDR_VAR 0 10
59604: PUSH
59605: LD_VAR 0 1
59609: PPUSH
59610: CALL_OW 251
59614: PPUSH
59615: LD_VAR 0 7
59619: PPUSH
59620: LD_VAR 0 5
59624: PPUSH
59625: CALL_OW 273
59629: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
59630: LD_VAR 0 9
59634: PPUSH
59635: LD_VAR 0 10
59639: PPUSH
59640: CALL_OW 488
59644: NOT
59645: IFFALSE 59649
// exit ;
59647: GO 59771
// ComAnimCustom ( unit , 1 ) ;
59649: LD_VAR 0 1
59653: PPUSH
59654: LD_INT 1
59656: PPUSH
59657: CALL_OW 592
// p := 0 ;
59661: LD_ADDR_VAR 0 12
59665: PUSH
59666: LD_INT 0
59668: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
59669: LD_VAR 0 9
59673: PPUSH
59674: LD_VAR 0 10
59678: PPUSH
59679: LD_VAR 0 6
59683: PPUSH
59684: LD_VAR 0 8
59688: PPUSH
59689: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
59693: LD_INT 35
59695: PPUSH
59696: CALL_OW 67
// p := Inc ( p ) ;
59700: LD_ADDR_VAR 0 12
59704: PUSH
59705: LD_VAR 0 12
59709: PPUSH
59710: CALL 50035 0 1
59714: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
59715: LD_VAR 0 12
59719: PUSH
59720: LD_INT 3
59722: EQUAL
59723: IFTRUE 59737
59725: PUSH
59726: LD_VAR 0 1
59730: PPUSH
59731: CALL_OW 302
59735: NOT
59736: OR
59737: IFTRUE 59750
59739: PUSH
59740: LD_VAR 0 1
59744: PPUSH
59745: CALL_OW 301
59749: OR
59750: IFFALSE 59693
// RemoveSeeing ( _x , _y , side ) ;
59752: LD_VAR 0 9
59756: PPUSH
59757: LD_VAR 0 10
59761: PPUSH
59762: LD_VAR 0 6
59766: PPUSH
59767: CALL_OW 331
// end ;
59771: LD_VAR 0 4
59775: RET
// function RevealDetectorMine ( unit ) ; var side , r , x , y , min_x , min_y , max_x , max_y , _x , _y ; begin
59776: LD_INT 0
59778: PPUSH
59779: PPUSH
59780: PPUSH
59781: PPUSH
59782: PPUSH
59783: PPUSH
59784: PPUSH
59785: PPUSH
59786: PPUSH
59787: PPUSH
59788: PPUSH
// if not unit then
59789: LD_VAR 0 1
59793: NOT
59794: IFFALSE 59798
// exit ;
59796: GO 60069
// side := GetSide ( unit ) ;
59798: LD_ADDR_VAR 0 3
59802: PUSH
59803: LD_VAR 0 1
59807: PPUSH
59808: CALL_OW 255
59812: ST_TO_ADDR
// x := GetX ( unit ) ;
59813: LD_ADDR_VAR 0 5
59817: PUSH
59818: LD_VAR 0 1
59822: PPUSH
59823: CALL_OW 250
59827: ST_TO_ADDR
// y := GetY ( unit ) ;
59828: LD_ADDR_VAR 0 6
59832: PUSH
59833: LD_VAR 0 1
59837: PPUSH
59838: CALL_OW 251
59842: ST_TO_ADDR
// r := 8 ;
59843: LD_ADDR_VAR 0 4
59847: PUSH
59848: LD_INT 8
59850: ST_TO_ADDR
// if x - r < 0 then
59851: LD_VAR 0 5
59855: PUSH
59856: LD_VAR 0 4
59860: MINUS
59861: PUSH
59862: LD_INT 0
59864: LESS
59865: IFFALSE 59877
// min_x := 0 else
59867: LD_ADDR_VAR 0 7
59871: PUSH
59872: LD_INT 0
59874: ST_TO_ADDR
59875: GO 59893
// min_x := x - r ;
59877: LD_ADDR_VAR 0 7
59881: PUSH
59882: LD_VAR 0 5
59886: PUSH
59887: LD_VAR 0 4
59891: MINUS
59892: ST_TO_ADDR
// if y - r < 0 then
59893: LD_VAR 0 6
59897: PUSH
59898: LD_VAR 0 4
59902: MINUS
59903: PUSH
59904: LD_INT 0
59906: LESS
59907: IFFALSE 59919
// min_y := 0 else
59909: LD_ADDR_VAR 0 8
59913: PUSH
59914: LD_INT 0
59916: ST_TO_ADDR
59917: GO 59935
// min_y := y - r ;
59919: LD_ADDR_VAR 0 8
59923: PUSH
59924: LD_VAR 0 6
59928: PUSH
59929: LD_VAR 0 4
59933: MINUS
59934: ST_TO_ADDR
// max_x := x + r ;
59935: LD_ADDR_VAR 0 9
59939: PUSH
59940: LD_VAR 0 5
59944: PUSH
59945: LD_VAR 0 4
59949: PLUS
59950: ST_TO_ADDR
// max_y := y + r ;
59951: LD_ADDR_VAR 0 10
59955: PUSH
59956: LD_VAR 0 6
59960: PUSH
59961: LD_VAR 0 4
59965: PLUS
59966: ST_TO_ADDR
// for _x = min_x to max_x do
59967: LD_ADDR_VAR 0 11
59971: PUSH
59972: DOUBLE
59973: LD_VAR 0 7
59977: DEC
59978: ST_TO_ADDR
59979: LD_VAR 0 9
59983: PUSH
59984: FOR_TO
59985: IFFALSE 60067
// for _y = min_y to max_y do
59987: LD_ADDR_VAR 0 12
59991: PUSH
59992: DOUBLE
59993: LD_VAR 0 8
59997: DEC
59998: ST_TO_ADDR
59999: LD_VAR 0 10
60003: PUSH
60004: FOR_TO
60005: IFFALSE 60063
// begin if not ValidHex ( _x , _y ) then
60007: LD_VAR 0 11
60011: PPUSH
60012: LD_VAR 0 12
60016: PPUSH
60017: CALL_OW 488
60021: NOT
60022: IFFALSE 60026
// continue ;
60024: GO 60004
// if MineAtPos ( _x , _y ) then
60026: LD_VAR 0 11
60030: PPUSH
60031: LD_VAR 0 12
60035: PPUSH
60036: CALL_OW 458
60040: IFFALSE 60061
// ViewMineAtPos ( _x , _y , side ) ;
60042: LD_VAR 0 11
60046: PPUSH
60047: LD_VAR 0 12
60051: PPUSH
60052: LD_VAR 0 3
60056: PPUSH
60057: CALL_OW 457
// end ;
60061: GO 60004
60063: POP
60064: POP
60065: GO 59984
60067: POP
60068: POP
// end ;
60069: LD_VAR 0 2
60073: RET
// function DetectMine ( units ) ; var i , x , y , scaners , timer ; begin
60074: LD_INT 0
60076: PPUSH
60077: PPUSH
60078: PPUSH
60079: PPUSH
60080: PPUSH
60081: PPUSH
// if not units then
60082: LD_VAR 0 1
60086: NOT
60087: IFFALSE 60091
// exit ;
60089: GO 60521
// scaners := [ ] ;
60091: LD_ADDR_VAR 0 6
60095: PUSH
60096: EMPTY
60097: ST_TO_ADDR
// for i in units do
60098: LD_ADDR_VAR 0 3
60102: PUSH
60103: LD_VAR 0 1
60107: PUSH
60108: FOR_IN
60109: IFFALSE 60266
// begin if GetWeapon ( i ) <> us_radar or not IsOk ( i ) or GetTag ( i ) = tMineDetector then
60111: LD_VAR 0 3
60115: PPUSH
60116: CALL_OW 264
60120: PUSH
60121: LD_INT 11
60123: NONEQUAL
60124: IFTRUE 60138
60126: PUSH
60127: LD_VAR 0 3
60131: PPUSH
60132: CALL_OW 302
60136: NOT
60137: OR
60138: IFTRUE 60155
60140: PUSH
60141: LD_VAR 0 3
60145: PPUSH
60146: CALL_OW 110
60150: PUSH
60151: LD_INT 502
60153: EQUAL
60154: OR
60155: IFFALSE 60159
// continue ;
60157: GO 60108
// ComStop ( i ) ;
60159: LD_VAR 0 3
60163: PPUSH
60164: CALL_OW 141
// x := GetX ( i ) ;
60168: LD_ADDR_VAR 0 4
60172: PUSH
60173: LD_VAR 0 3
60177: PPUSH
60178: CALL_OW 250
60182: ST_TO_ADDR
// y := GetY ( i ) ;
60183: LD_ADDR_VAR 0 5
60187: PUSH
60188: LD_VAR 0 3
60192: PPUSH
60193: CALL_OW 251
60197: ST_TO_ADDR
// if GetSide ( i ) = your_side then
60198: LD_VAR 0 3
60202: PPUSH
60203: CALL_OW 255
60207: PUSH
60208: LD_OWVAR 2
60212: EQUAL
60213: IFFALSE 60232
// PlaySoundXY ( x , y , mineDetector ) ;
60215: LD_VAR 0 4
60219: PPUSH
60220: LD_VAR 0 5
60224: PPUSH
60225: LD_STRING mineDetector
60227: PPUSH
60228: CALL_OW 366
// scaners := Join ( scaners , i ) ;
60232: LD_ADDR_VAR 0 6
60236: PUSH
60237: LD_VAR 0 6
60241: PPUSH
60242: LD_VAR 0 3
60246: PPUSH
60247: CALL 48662 0 2
60251: ST_TO_ADDR
// SetTag ( i , tMineDetector ) ;
60252: LD_VAR 0 3
60256: PPUSH
60257: LD_INT 502
60259: PPUSH
60260: CALL_OW 109
// end ;
60264: GO 60108
60266: POP
60267: POP
// if not scaners then
60268: LD_VAR 0 6
60272: NOT
60273: IFFALSE 60277
// exit ;
60275: GO 60521
// wait ( 3 ) ;
60277: LD_INT 3
60279: PPUSH
60280: CALL_OW 67
// timer := 6 ;
60284: LD_ADDR_VAR 0 7
60288: PUSH
60289: LD_INT 6
60291: ST_TO_ADDR
// repeat for i in scaners do
60292: LD_ADDR_VAR 0 3
60296: PUSH
60297: LD_VAR 0 6
60301: PUSH
60302: FOR_IN
60303: IFFALSE 60419
// begin if not IsOk ( i ) or HasTask ( i ) or ( GetControl ( i ) = control_manual and not IsDrivenBy ( i ) ) then
60305: LD_VAR 0 3
60309: PPUSH
60310: CALL_OW 302
60314: NOT
60315: IFTRUE 60328
60317: PUSH
60318: LD_VAR 0 3
60322: PPUSH
60323: CALL_OW 314
60327: OR
60328: IFTRUE 60359
60330: PUSH
60331: LD_VAR 0 3
60335: PPUSH
60336: CALL_OW 263
60340: PUSH
60341: LD_INT 1
60343: EQUAL
60344: IFFALSE 60358
60346: PUSH
60347: LD_VAR 0 3
60351: PPUSH
60352: CALL_OW 311
60356: NOT
60357: AND
60358: OR
60359: IFFALSE 60403
// begin SetUnitDisplayNumber ( i , 0 ) ;
60361: LD_VAR 0 3
60365: PPUSH
60366: LD_INT 0
60368: PPUSH
60369: CALL_OW 505
// SetTag ( i , 0 ) ;
60373: LD_VAR 0 3
60377: PPUSH
60378: LD_INT 0
60380: PPUSH
60381: CALL_OW 109
// scaners := scaners diff i ;
60385: LD_ADDR_VAR 0 6
60389: PUSH
60390: LD_VAR 0 6
60394: PUSH
60395: LD_VAR 0 3
60399: DIFF
60400: ST_TO_ADDR
// continue ;
60401: GO 60302
// end ; SetUnitDisplayNumber ( i , timer ) ;
60403: LD_VAR 0 3
60407: PPUSH
60408: LD_VAR 0 7
60412: PPUSH
60413: CALL_OW 505
// end ;
60417: GO 60302
60419: POP
60420: POP
// if not scaners then
60421: LD_VAR 0 6
60425: NOT
60426: IFFALSE 60430
// exit ;
60428: GO 60521
// timer := Dec ( timer ) ;
60430: LD_ADDR_VAR 0 7
60434: PUSH
60435: LD_VAR 0 7
60439: PPUSH
60440: CALL 50057 0 1
60444: ST_TO_ADDR
// wait ( 0 0$1 ) ;
60445: LD_INT 35
60447: PPUSH
60448: CALL_OW 67
// until timer = 0 ;
60452: LD_VAR 0 7
60456: PUSH
60457: LD_INT 0
60459: EQUAL
60460: IFFALSE 60292
// if not scaners then
60462: LD_VAR 0 6
60466: NOT
60467: IFFALSE 60471
// exit ;
60469: GO 60521
// for i in scaners do
60471: LD_ADDR_VAR 0 3
60475: PUSH
60476: LD_VAR 0 6
60480: PUSH
60481: FOR_IN
60482: IFFALSE 60519
// begin SetUnitDisplayNumber ( i , 0 ) ;
60484: LD_VAR 0 3
60488: PPUSH
60489: LD_INT 0
60491: PPUSH
60492: CALL_OW 505
// SetTag ( i , 0 ) ;
60496: LD_VAR 0 3
60500: PPUSH
60501: LD_INT 0
60503: PPUSH
60504: CALL_OW 109
// RevealDetectorMine ( i ) ;
60508: LD_VAR 0 3
60512: PPUSH
60513: CALL 59776 0 1
// end ;
60517: GO 60481
60519: POP
60520: POP
// end ;
60521: LD_VAR 0 2
60525: RET
// export function SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ; begin
60526: LD_INT 0
60528: PPUSH
// if p1 = mine_detector_mode then
60529: LD_VAR 0 2
60533: PUSH
60534: LD_INT 103
60536: EQUAL
60537: IFFALSE 60548
// DetectMine ( units ) ;
60539: LD_VAR 0 1
60543: PPUSH
60544: CALL 60074 0 1
// end ; end_of_file
60548: LD_VAR 0 7
60552: RET
// export mpKingPoints ; every 0 0$1 trigger mpGameActive marked GameTypeKing do var i , j , tmp ;
60553: LD_EXP 39
60557: IFFALSE 60898
60559: GO 60561
60561: DISABLE
60562: LD_INT 0
60564: PPUSH
60565: PPUSH
60566: PPUSH
// begin mpKingPoints := [ ] ;
60567: LD_ADDR_EXP 59
60571: PUSH
60572: EMPTY
60573: ST_TO_ADDR
// if mpTeamGame then
60574: LD_EXP 11
60578: IFFALSE 60632
// begin for i := 1 to Count ( mpTeams ) do
60580: LD_ADDR_VAR 0 1
60584: PUSH
60585: DOUBLE
60586: LD_INT 1
60588: DEC
60589: ST_TO_ADDR
60590: LD_EXP 10
60594: PPUSH
60595: CALL 12696 0 1
60599: PUSH
60600: FOR_TO
60601: IFFALSE 60628
// mpKingPoints := Replace ( mpKingPoints , i , 0 ) ;
60603: LD_ADDR_EXP 59
60607: PUSH
60608: LD_EXP 59
60612: PPUSH
60613: LD_VAR 0 1
60617: PPUSH
60618: LD_INT 0
60620: PPUSH
60621: CALL_OW 1
60625: ST_TO_ADDR
60626: GO 60600
60628: POP
60629: POP
// end else
60630: GO 60675
// begin for i := 1 to 8 do
60632: LD_ADDR_VAR 0 1
60636: PUSH
60637: DOUBLE
60638: LD_INT 1
60640: DEC
60641: ST_TO_ADDR
60642: LD_INT 8
60644: PUSH
60645: FOR_TO
60646: IFFALSE 60673
// mpKingPoints := Replace ( mpKingPoints , i , 0 ) ;
60648: LD_ADDR_EXP 59
60652: PUSH
60653: LD_EXP 59
60657: PPUSH
60658: LD_VAR 0 1
60662: PPUSH
60663: LD_INT 0
60665: PPUSH
60666: CALL_OW 1
60670: ST_TO_ADDR
60671: GO 60645
60673: POP
60674: POP
// end ; tmp := AreaToList ( kingCamArea , 0 ) ;
60675: LD_ADDR_VAR 0 3
60679: PUSH
60680: LD_EXP 2
60684: PPUSH
60685: LD_INT 0
60687: PPUSH
60688: CALL_OW 517
60692: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
60693: LD_ADDR_VAR 0 1
60697: PUSH
60698: DOUBLE
60699: LD_INT 1
60701: DEC
60702: ST_TO_ADDR
60703: LD_VAR 0 3
60707: PUSH
60708: LD_INT 1
60710: ARRAY
60711: PUSH
60712: FOR_TO
60713: IFFALSE 60780
// for j := 1 to 8 do
60715: LD_ADDR_VAR 0 2
60719: PUSH
60720: DOUBLE
60721: LD_INT 1
60723: DEC
60724: ST_TO_ADDR
60725: LD_INT 8
60727: PUSH
60728: FOR_TO
60729: IFFALSE 60776
// PlaceSeeing ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , j , - 12 ) ;
60731: LD_VAR 0 3
60735: PUSH
60736: LD_INT 1
60738: ARRAY
60739: PUSH
60740: LD_VAR 0 1
60744: ARRAY
60745: PPUSH
60746: LD_VAR 0 3
60750: PUSH
60751: LD_INT 2
60753: ARRAY
60754: PUSH
60755: LD_VAR 0 1
60759: ARRAY
60760: PPUSH
60761: LD_VAR 0 2
60765: PPUSH
60766: LD_INT 12
60768: NEG
60769: PPUSH
60770: CALL_OW 330
60774: GO 60728
60776: POP
60777: POP
60778: GO 60712
60780: POP
60781: POP
// SetAreaMapShow ( mpKingArea , 1 ) ;
60782: LD_EXP 34
60786: PPUSH
60787: LD_INT 1
60789: PPUSH
60790: CALL_OW 424
// UpdateCounter ;
60794: CALL 61404 0 0
// repeat wait ( 0 0$1 ) ;
60798: LD_INT 35
60800: PPUSH
60801: CALL_OW 67
// tmp := FilterUnitsInArea ( mpKingArea , [ [ f_not , [ f_constructed ] ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
60805: LD_ADDR_VAR 0 3
60809: PUSH
60810: LD_EXP 34
60814: PPUSH
60815: LD_INT 3
60817: PUSH
60818: LD_INT 57
60820: PUSH
60821: EMPTY
60822: LIST
60823: PUSH
60824: EMPTY
60825: LIST
60826: LIST
60827: PUSH
60828: LD_INT 50
60830: PUSH
60831: EMPTY
60832: LIST
60833: PUSH
60834: LD_INT 2
60836: PUSH
60837: LD_INT 30
60839: PUSH
60840: LD_INT 0
60842: PUSH
60843: EMPTY
60844: LIST
60845: LIST
60846: PUSH
60847: LD_INT 30
60849: PUSH
60850: LD_INT 1
60852: PUSH
60853: EMPTY
60854: LIST
60855: LIST
60856: PUSH
60857: EMPTY
60858: LIST
60859: LIST
60860: LIST
60861: PUSH
60862: EMPTY
60863: LIST
60864: LIST
60865: LIST
60866: PPUSH
60867: CALL_OW 70
60871: ST_TO_ADDR
// if not tmp then
60872: LD_VAR 0 3
60876: NOT
60877: IFFALSE 60881
// continue ;
60879: GO 60798
// AddPoints ( tmp ) ;
60881: LD_VAR 0 3
60885: PPUSH
60886: CALL 61082 0 1
// UpdateCounter ;
60890: CALL 61404 0 0
// until false ;
60894: LD_INT 0
60896: IFFALSE 60798
// end ;
60898: PPOPN 3
60900: END
// every 0 0$1 trigger mpGameActive and mpEmissions marked GameTypeKing do var i , tmp ;
60901: LD_EXP 39
60905: IFFALSE 60913
60907: PUSH
60908: LD_EXP 37
60912: AND
60913: IFFALSE 61079
60915: GO 60917
60917: DISABLE
60918: LD_INT 0
60920: PPUSH
60921: PPUSH
// begin tmp := AreaToList ( kingCamArea , 0 ) ;
60922: LD_ADDR_VAR 0 2
60926: PUSH
60927: LD_EXP 2
60931: PPUSH
60932: LD_INT 0
60934: PPUSH
60935: CALL_OW 517
60939: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
60940: LD_ADDR_VAR 0 1
60944: PUSH
60945: DOUBLE
60946: LD_INT 1
60948: DEC
60949: ST_TO_ADDR
60950: LD_VAR 0 2
60954: PUSH
60955: LD_INT 1
60957: ARRAY
60958: PUSH
60959: FOR_TO
60960: IFFALSE 61001
// ArtContamination ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 125 ) ;
60962: LD_VAR 0 2
60966: PUSH
60967: LD_INT 1
60969: ARRAY
60970: PUSH
60971: LD_VAR 0 1
60975: ARRAY
60976: PPUSH
60977: LD_VAR 0 2
60981: PUSH
60982: LD_INT 2
60984: ARRAY
60985: PUSH
60986: LD_VAR 0 1
60990: ARRAY
60991: PPUSH
60992: LD_INT 125
60994: PPUSH
60995: CALL_OW 495
60999: GO 60959
61001: POP
61002: POP
// repeat wait ( mpEmissions ) ;
61003: LD_EXP 37
61007: PPUSH
61008: CALL_OW 67
// for i := 1 to tmp [ 1 ] do
61012: LD_ADDR_VAR 0 1
61016: PUSH
61017: DOUBLE
61018: LD_INT 1
61020: DEC
61021: ST_TO_ADDR
61022: LD_VAR 0 2
61026: PUSH
61027: LD_INT 1
61029: ARRAY
61030: PUSH
61031: FOR_TO
61032: IFFALSE 61073
// ArtContamination ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 15 ) ;
61034: LD_VAR 0 2
61038: PUSH
61039: LD_INT 1
61041: ARRAY
61042: PUSH
61043: LD_VAR 0 1
61047: ARRAY
61048: PPUSH
61049: LD_VAR 0 2
61053: PUSH
61054: LD_INT 2
61056: ARRAY
61057: PUSH
61058: LD_VAR 0 1
61062: ARRAY
61063: PPUSH
61064: LD_INT 15
61066: PPUSH
61067: CALL_OW 495
61071: GO 61031
61073: POP
61074: POP
// until false ;
61075: LD_INT 0
61077: IFFALSE 61003
// end ;
61079: PPOPN 2
61081: END
// function AddPoints ( depots ) ; var i , first , team , side ; begin
61082: LD_INT 0
61084: PPUSH
61085: PPUSH
61086: PPUSH
61087: PPUSH
61088: PPUSH
// if mpTeamGame then
61089: LD_EXP 11
61093: IFFALSE 61290
// begin first := depots [ 1 ] ;
61095: LD_ADDR_VAR 0 4
61099: PUSH
61100: LD_VAR 0 1
61104: PUSH
61105: LD_INT 1
61107: ARRAY
61108: ST_TO_ADDR
// side := GetSide ( first ) ;
61109: LD_ADDR_VAR 0 6
61113: PUSH
61114: LD_VAR 0 4
61118: PPUSH
61119: CALL_OW 255
61123: ST_TO_ADDR
// for i := 1 to mpTeams do
61124: LD_ADDR_VAR 0 3
61128: PUSH
61129: DOUBLE
61130: LD_INT 1
61132: DEC
61133: ST_TO_ADDR
61134: LD_EXP 10
61138: PUSH
61139: FOR_TO
61140: IFFALSE 61174
// if side in mpTeams [ i ] then
61142: LD_VAR 0 6
61146: PUSH
61147: LD_EXP 10
61151: PUSH
61152: LD_VAR 0 3
61156: ARRAY
61157: IN
61158: IFFALSE 61172
// begin team := i ;
61160: LD_ADDR_VAR 0 5
61164: PUSH
61165: LD_VAR 0 3
61169: ST_TO_ADDR
// break ;
61170: GO 61174
// end ;
61172: GO 61139
61174: POP
61175: POP
// if not team then
61176: LD_VAR 0 5
61180: NOT
61181: IFFALSE 61185
// exit ;
61183: GO 61399
// if FilterUnitsInArea ( mpKingArea , [ f_enemy , side ] ) then
61185: LD_EXP 34
61189: PPUSH
61190: LD_INT 81
61192: PUSH
61193: LD_VAR 0 6
61197: PUSH
61198: EMPTY
61199: LIST
61200: LIST
61201: PPUSH
61202: CALL_OW 70
61206: IFFALSE 61210
// exit ;
61208: GO 61399
// mpKingPoints := Replace ( mpKingPoints , team , mpKingPoints [ team ] + 1 ) ;
61210: LD_ADDR_EXP 59
61214: PUSH
61215: LD_EXP 59
61219: PPUSH
61220: LD_VAR 0 5
61224: PPUSH
61225: LD_EXP 59
61229: PUSH
61230: LD_VAR 0 5
61234: ARRAY
61235: PUSH
61236: LD_INT 1
61238: PLUS
61239: PPUSH
61240: CALL_OW 1
61244: ST_TO_ADDR
// for i in mpTeams [ team ] do
61245: LD_ADDR_VAR 0 3
61249: PUSH
61250: LD_EXP 10
61254: PUSH
61255: LD_VAR 0 5
61259: ARRAY
61260: PUSH
61261: FOR_IN
61262: IFFALSE 61286
// SetMultiScore ( i , mpKingPoints [ team ] ) ;
61264: LD_VAR 0 3
61268: PPUSH
61269: LD_EXP 59
61273: PUSH
61274: LD_VAR 0 5
61278: ARRAY
61279: PPUSH
61280: CALL_OW 506
61284: GO 61261
61286: POP
61287: POP
// end else
61288: GO 61399
// begin first := depots [ 1 ] ;
61290: LD_ADDR_VAR 0 4
61294: PUSH
61295: LD_VAR 0 1
61299: PUSH
61300: LD_INT 1
61302: ARRAY
61303: ST_TO_ADDR
// side := GetSide ( first ) ;
61304: LD_ADDR_VAR 0 6
61308: PUSH
61309: LD_VAR 0 4
61313: PPUSH
61314: CALL_OW 255
61318: ST_TO_ADDR
// if FilterUnitsInArea ( mpKingArea , [ f_enemy , side ] ) then
61319: LD_EXP 34
61323: PPUSH
61324: LD_INT 81
61326: PUSH
61327: LD_VAR 0 6
61331: PUSH
61332: EMPTY
61333: LIST
61334: LIST
61335: PPUSH
61336: CALL_OW 70
61340: IFFALSE 61344
// exit ;
61342: GO 61399
// mpKingPoints := Replace ( mpKingPoints , side , mpKingPoints [ side ] + 1 ) ;
61344: LD_ADDR_EXP 59
61348: PUSH
61349: LD_EXP 59
61353: PPUSH
61354: LD_VAR 0 6
61358: PPUSH
61359: LD_EXP 59
61363: PUSH
61364: LD_VAR 0 6
61368: ARRAY
61369: PUSH
61370: LD_INT 1
61372: PLUS
61373: PPUSH
61374: CALL_OW 1
61378: ST_TO_ADDR
// SetMultiScore ( side , mpKingPoints [ side ] ) ;
61379: LD_VAR 0 6
61383: PPUSH
61384: LD_EXP 59
61388: PUSH
61389: LD_VAR 0 6
61393: ARRAY
61394: PPUSH
61395: CALL_OW 506
// end ; end ;
61399: LD_VAR 0 2
61403: RET
// function UpdateCounter ; var i ; begin
61404: LD_INT 0
61406: PPUSH
61407: PPUSH
// result := [ ] ;
61408: LD_ADDR_VAR 0 1
61412: PUSH
61413: EMPTY
61414: ST_TO_ADDR
// if mpTeamGame then
61415: LD_EXP 11
61419: IFFALSE 61486
// begin for i := 1 to mpTeams do
61421: LD_ADDR_VAR 0 2
61425: PUSH
61426: DOUBLE
61427: LD_INT 1
61429: DEC
61430: ST_TO_ADDR
61431: LD_EXP 10
61435: PUSH
61436: FOR_TO
61437: IFFALSE 61482
// result := result ^ [ #KingoftheHill-Team , i , mpKingPoints [ i ] , mpPoints ] ;
61439: LD_ADDR_VAR 0 1
61443: PUSH
61444: LD_VAR 0 1
61448: PUSH
61449: LD_STRING #KingoftheHill-Team
61451: PUSH
61452: LD_VAR 0 2
61456: PUSH
61457: LD_EXP 59
61461: PUSH
61462: LD_VAR 0 2
61466: ARRAY
61467: PUSH
61468: LD_EXP 35
61472: PUSH
61473: EMPTY
61474: LIST
61475: LIST
61476: LIST
61477: LIST
61478: ADD
61479: ST_TO_ADDR
61480: GO 61436
61482: POP
61483: POP
// end else
61484: GO 61559
// begin for i := 1 to 8 do
61486: LD_ADDR_VAR 0 2
61490: PUSH
61491: DOUBLE
61492: LD_INT 1
61494: DEC
61495: ST_TO_ADDR
61496: LD_INT 8
61498: PUSH
61499: FOR_TO
61500: IFFALSE 61557
// if mpSidePositions [ i ] then
61502: LD_EXP 7
61506: PUSH
61507: LD_VAR 0 2
61511: ARRAY
61512: IFFALSE 61555
// result := result ^ [ #KingoftheHill-Player , i , mpKingPoints [ i ] , mpPoints ] ;
61514: LD_ADDR_VAR 0 1
61518: PUSH
61519: LD_VAR 0 1
61523: PUSH
61524: LD_STRING #KingoftheHill-Player
61526: PUSH
61527: LD_VAR 0 2
61531: PUSH
61532: LD_EXP 59
61536: PUSH
61537: LD_VAR 0 2
61541: ARRAY
61542: PUSH
61543: LD_EXP 35
61547: PUSH
61548: EMPTY
61549: LIST
61550: LIST
61551: LIST
61552: LIST
61553: ADD
61554: ST_TO_ADDR
61555: GO 61499
61557: POP
61558: POP
// end ; mpDisplayStrings := result ;
61559: LD_ADDR_EXP 38
61563: PUSH
61564: LD_VAR 0 1
61568: ST_TO_ADDR
// end ;
61569: LD_VAR 0 1
61573: RET
// export function HowMuchPointsKing ( side ) ; begin
61574: LD_INT 0
61576: PPUSH
// result := HowMuchPoints ( side ) ;
61577: LD_ADDR_VAR 0 2
61581: PUSH
61582: LD_VAR 0 1
61586: PPUSH
61587: CALL 61597 0 1
61591: ST_TO_ADDR
// end ;
61592: LD_VAR 0 2
61596: RET
// function HowMuchPoints ( side ) ; var i ; begin
61597: LD_INT 0
61599: PPUSH
61600: PPUSH
// if mpTeamGame then
61601: LD_EXP 11
61605: IFFALSE 61674
// begin for i := 1 to Count ( mpTeams ) do
61607: LD_ADDR_VAR 0 3
61611: PUSH
61612: DOUBLE
61613: LD_INT 1
61615: DEC
61616: ST_TO_ADDR
61617: LD_EXP 10
61621: PPUSH
61622: CALL 12696 0 1
61626: PUSH
61627: FOR_TO
61628: IFFALSE 61670
// begin if side in mpTeams [ i ] then
61630: LD_VAR 0 1
61634: PUSH
61635: LD_EXP 10
61639: PUSH
61640: LD_VAR 0 3
61644: ARRAY
61645: IN
61646: IFFALSE 61668
// begin result := mpKingPoints [ i ] ;
61648: LD_ADDR_VAR 0 2
61652: PUSH
61653: LD_EXP 59
61657: PUSH
61658: LD_VAR 0 3
61662: ARRAY
61663: ST_TO_ADDR
// exit ;
61664: POP
61665: POP
61666: GO 61690
// end ; end ;
61668: GO 61627
61670: POP
61671: POP
// end else
61672: GO 61690
// result := mpKingPoints [ side ] ;
61674: LD_ADDR_VAR 0 2
61678: PUSH
61679: LD_EXP 59
61683: PUSH
61684: LD_VAR 0 1
61688: ARRAY
61689: ST_TO_ADDR
// end ;
61690: LD_VAR 0 2
61694: RET
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeKing do var i , canWin ;
61695: LD_EXP 39
61699: IFFALSE 61707
61701: PUSH
61702: CALL 62119 0 0
61706: AND
61707: IFFALSE 61715
61709: PUSH
61710: LD_OWVAR 4
61714: AND
61715: IFFALSE 61968
61717: GO 61719
61719: DISABLE
61720: LD_INT 0
61722: PPUSH
61723: PPUSH
// begin canWin := false ;
61724: LD_ADDR_VAR 0 2
61728: PUSH
61729: LD_INT 0
61731: ST_TO_ADDR
// if not HasPower ( your_side ) then
61732: LD_OWVAR 2
61736: PPUSH
61737: CALL 62161 0 1
61741: NOT
61742: IFFALSE 61753
// begin Multiplayer_Loose_Message ;
61744: CALL_OW 521
// enable ( mpLose ) ;
61748: LD_INT 102
61750: ENABLE_MARKED
// end else
61751: GO 61968
// begin if not EnemiesInGame then
61753: CALL 61971 0 0
61757: NOT
61758: IFFALSE 61765
// begin enable ( mpWin ) ;
61760: LD_INT 101
61762: ENABLE_MARKED
// exit ;
61763: GO 61968
// end ; canWin := ( HowMuchPoints ( your_side ) >= mpPoints and HasPower ( your_side ) ) ;
61765: LD_ADDR_VAR 0 2
61769: PUSH
61770: LD_OWVAR 2
61774: PPUSH
61775: CALL 61597 0 1
61779: PUSH
61780: LD_EXP 35
61784: GREATEREQUAL
61785: IFFALSE 61798
61787: PUSH
61788: LD_OWVAR 2
61792: PPUSH
61793: CALL 62161 0 1
61797: AND
61798: ST_TO_ADDR
// for i := 1 to 8 do
61799: LD_ADDR_VAR 0 1
61803: PUSH
61804: DOUBLE
61805: LD_INT 1
61807: DEC
61808: ST_TO_ADDR
61809: LD_INT 8
61811: PUSH
61812: FOR_TO
61813: IFFALSE 61954
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
61815: LD_EXP 7
61819: PUSH
61820: LD_VAR 0 1
61824: ARRAY
61825: IFFALSE 61838
61827: PUSH
61828: LD_VAR 0 1
61832: PPUSH
61833: CALL_OW 108
61837: AND
61838: IFFALSE 61852
61840: PUSH
61841: LD_VAR 0 1
61845: PUSH
61846: LD_OWVAR 2
61850: NONEQUAL
61851: AND
61852: IFFALSE 61952
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
61854: LD_EXP 8
61858: PUSH
61859: LD_VAR 0 1
61863: ARRAY
61864: NOT
61865: IFTRUE 61913
61867: PUSH
61868: LD_EXP 8
61872: PUSH
61873: LD_VAR 0 1
61877: ARRAY
61878: PUSH
61879: LD_EXP 8
61883: PUSH
61884: LD_OWVAR 2
61888: ARRAY
61889: NONEQUAL
61890: IFFALSE 61912
61892: PUSH
61893: LD_OWVAR 2
61897: PPUSH
61898: LD_VAR 0 1
61902: PPUSH
61903: CALL_OW 81
61907: PUSH
61908: LD_INT 1
61910: NONEQUAL
61911: AND
61912: OR
61913: IFFALSE 61952
// if HowMuchPoints ( i ) >= mpPoints and HasPower ( i ) then
61915: LD_VAR 0 1
61919: PPUSH
61920: CALL 61597 0 1
61924: PUSH
61925: LD_EXP 35
61929: GREATEREQUAL
61930: IFFALSE 61943
61932: PUSH
61933: LD_VAR 0 1
61937: PPUSH
61938: CALL 62161 0 1
61942: AND
61943: IFFALSE 61952
// begin enable ( mpLose ) ;
61945: LD_INT 102
61947: ENABLE_MARKED
// exit ;
61948: POP
61949: POP
61950: GO 61968
// end ;
61952: GO 61812
61954: POP
61955: POP
// if canWin then
61956: LD_VAR 0 2
61960: IFFALSE 61967
// enable ( mpWin ) else
61962: LD_INT 101
61964: ENABLE_MARKED
61965: GO 61968
// enable ;
61967: ENABLE
// end ; end ;
61968: PPOPN 2
61970: END
// function EnemiesInGame ; var i ; begin
61971: LD_INT 0
61973: PPUSH
61974: PPUSH
// result := false ;
61975: LD_ADDR_VAR 0 1
61979: PUSH
61980: LD_INT 0
61982: ST_TO_ADDR
// for i := 1 to 8 do
61983: LD_ADDR_VAR 0 2
61987: PUSH
61988: DOUBLE
61989: LD_INT 1
61991: DEC
61992: ST_TO_ADDR
61993: LD_INT 8
61995: PUSH
61996: FOR_TO
61997: IFFALSE 62112
// if i <> your_side and HasPower ( i ) and MultiplayerSideAlive ( i ) then
61999: LD_VAR 0 2
62003: PUSH
62004: LD_OWVAR 2
62008: NONEQUAL
62009: IFFALSE 62022
62011: PUSH
62012: LD_VAR 0 2
62016: PPUSH
62017: CALL 62161 0 1
62021: AND
62022: IFFALSE 62035
62024: PUSH
62025: LD_VAR 0 2
62029: PPUSH
62030: CALL_OW 108
62034: AND
62035: IFFALSE 62110
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
62037: LD_EXP 8
62041: PUSH
62042: LD_VAR 0 2
62046: ARRAY
62047: NOT
62048: IFTRUE 62096
62050: PUSH
62051: LD_EXP 8
62055: PUSH
62056: LD_VAR 0 2
62060: ARRAY
62061: PUSH
62062: LD_EXP 8
62066: PUSH
62067: LD_OWVAR 2
62071: ARRAY
62072: NONEQUAL
62073: IFFALSE 62095
62075: PUSH
62076: LD_OWVAR 2
62080: PPUSH
62081: LD_VAR 0 2
62085: PPUSH
62086: CALL_OW 81
62090: PUSH
62091: LD_INT 1
62093: NONEQUAL
62094: AND
62095: OR
62096: IFFALSE 62110
// begin result := true ;
62098: LD_ADDR_VAR 0 1
62102: PUSH
62103: LD_INT 1
62105: ST_TO_ADDR
// exit ;
62106: POP
62107: POP
62108: GO 62114
// end ;
62110: GO 61996
62112: POP
62113: POP
// end ;
62114: LD_VAR 0 1
62118: RET
// function CanWinLoose ; begin
62119: LD_INT 0
62121: PPUSH
// result := true ;
62122: LD_ADDR_VAR 0 1
62126: PUSH
62127: LD_INT 1
62129: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
62130: CALL_OW 531
62134: IFFALSE 62146
62136: PUSH
62137: CALL_OW 519
62141: PUSH
62142: LD_INT 1
62144: GREATER
62145: AND
62146: IFFALSE 62156
// result := false ;
62148: LD_ADDR_VAR 0 1
62152: PUSH
62153: LD_INT 0
62155: ST_TO_ADDR
// end ;
62156: LD_VAR 0 1
62160: RET
// function HasPower ( i ) ; begin
62161: LD_INT 0
62163: PPUSH
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
62164: LD_ADDR_VAR 0 2
62168: PUSH
62169: LD_INT 22
62171: PUSH
62172: LD_VAR 0 1
62176: PUSH
62177: EMPTY
62178: LIST
62179: LIST
62180: PUSH
62181: LD_INT 2
62183: PUSH
62184: LD_INT 21
62186: PUSH
62187: LD_INT 1
62189: PUSH
62190: EMPTY
62191: LIST
62192: LIST
62193: PUSH
62194: LD_INT 33
62196: PUSH
62197: LD_INT 3
62199: PUSH
62200: EMPTY
62201: LIST
62202: LIST
62203: PUSH
62204: LD_INT 33
62206: PUSH
62207: LD_INT 5
62209: PUSH
62210: EMPTY
62211: LIST
62212: LIST
62213: PUSH
62214: EMPTY
62215: LIST
62216: LIST
62217: LIST
62218: LIST
62219: PUSH
62220: EMPTY
62221: LIST
62222: LIST
62223: PPUSH
62224: CALL_OW 69
62228: ST_TO_ADDR
// end ; end_of_file
62229: LD_VAR 0 2
62233: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin end ;
62234: PPOPN 6
62236: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
62237: LD_INT 0
62239: PPUSH
// begin if not units then
62240: LD_VAR 0 1
62244: NOT
62245: IFFALSE 62249
// exit ;
62247: GO 62283
// SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ;
62249: LD_VAR 0 1
62253: PPUSH
62254: LD_VAR 0 2
62258: PPUSH
62259: LD_VAR 0 3
62263: PPUSH
62264: LD_VAR 0 4
62268: PPUSH
62269: LD_VAR 0 5
62273: PPUSH
62274: LD_VAR 0 6
62278: PPUSH
62279: CALL 60526 0 6
// end ;
62283: PPOPN 7
62285: END
// on MapStart ( p ) do begin if mpGameType = GameTypeCoop then
62286: LD_EXP 3
62290: PUSH
62291: LD_INT 4
62293: EQUAL
62294: IFFALSE 62330
// begin ToLua ( setGameDifficulty( & Difficulty & ) ) ;
62296: LD_STRING setGameDifficulty(
62298: PUSH
62299: LD_OWVAR 67
62303: STR
62304: PUSH
62305: LD_STRING )
62307: STR
62308: PPUSH
62309: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
62313: LD_STRING displayDifficulty(
62315: PUSH
62316: LD_OWVAR 67
62320: STR
62321: PUSH
62322: LD_STRING )
62324: STR
62325: PPUSH
62326: CALL_OW 559
// end ; SOS_MapStart ( ) ;
62330: CALL 62359 0 0
// end ; end_of_file
62334: PPOPN 1
62336: END
// every 0 0$1 do
62337: GO 62339
62339: DISABLE
// begin enable ;
62340: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
62341: LD_STRING updateTimer(
62343: PUSH
62344: LD_OWVAR 1
62348: STR
62349: PUSH
62350: LD_STRING );
62352: STR
62353: PPUSH
62354: CALL_OW 559
// end ;
62358: END
// export function SOS_MapStart ( ) ; begin
62359: LD_INT 0
62361: PPUSH
// UpdateFactoryWaypoints ( ) ;
62362: CALL 63293 0 0
// UpdateWarehouseGatheringPoints ( ) ;
62366: CALL 63545 0 0
// ParseMultiDataToLua ( ) ;
62370: CALL 63692 0 0
// ToLua ( setSpecLogoNumber( & 2 & , & 1 & ) ) ;
62374: LD_STRING setSpecLogoNumber(
62376: PUSH
62377: LD_INT 2
62379: STR
62380: PUSH
62381: LD_STRING ,
62383: STR
62384: PUSH
62385: LD_INT 1
62387: STR
62388: PUSH
62389: LD_STRING )
62391: STR
62392: PPUSH
62393: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 3 & , & 2 & ) ) ;
62397: LD_STRING setSpecLogoNumber(
62399: PUSH
62400: LD_INT 3
62402: STR
62403: PUSH
62404: LD_STRING ,
62406: STR
62407: PUSH
62408: LD_INT 2
62410: STR
62411: PUSH
62412: LD_STRING )
62414: STR
62415: PPUSH
62416: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 4 & , & 3 & ) ) ;
62420: LD_STRING setSpecLogoNumber(
62422: PUSH
62423: LD_INT 4
62425: STR
62426: PUSH
62427: LD_STRING ,
62429: STR
62430: PUSH
62431: LD_INT 3
62433: STR
62434: PUSH
62435: LD_STRING )
62437: STR
62438: PPUSH
62439: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 5 & , & 4 & ) ) ;
62443: LD_STRING setSpecLogoNumber(
62445: PUSH
62446: LD_INT 5
62448: STR
62449: PUSH
62450: LD_STRING ,
62452: STR
62453: PUSH
62454: LD_INT 4
62456: STR
62457: PUSH
62458: LD_STRING )
62460: STR
62461: PPUSH
62462: CALL_OW 559
// end ;
62466: LD_VAR 0 1
62470: RET
// export function UpdateSpectatorBar ; var i , j , crates , oil , sib , people , base , bases ; begin
62471: LD_INT 0
62473: PPUSH
62474: PPUSH
62475: PPUSH
62476: PPUSH
62477: PPUSH
62478: PPUSH
62479: PPUSH
62480: PPUSH
62481: PPUSH
// for i := 1 to 8 do
62482: LD_ADDR_VAR 0 2
62486: PUSH
62487: DOUBLE
62488: LD_INT 1
62490: DEC
62491: ST_TO_ADDR
62492: LD_INT 8
62494: PUSH
62495: FOR_TO
62496: IFFALSE 62881
// begin if mpSidePositions [ i ] then
62498: LD_EXP 7
62502: PUSH
62503: LD_VAR 0 2
62507: ARRAY
62508: IFFALSE 62879
// begin people := Count ( FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) ) ;
62510: LD_ADDR_VAR 0 7
62514: PUSH
62515: LD_INT 22
62517: PUSH
62518: LD_VAR 0 2
62522: PUSH
62523: EMPTY
62524: LIST
62525: LIST
62526: PUSH
62527: LD_INT 21
62529: PUSH
62530: LD_INT 1
62532: PUSH
62533: EMPTY
62534: LIST
62535: LIST
62536: PUSH
62537: EMPTY
62538: LIST
62539: LIST
62540: PPUSH
62541: CALL_OW 69
62545: PPUSH
62546: CALL 12696 0 1
62550: ST_TO_ADDR
// bases := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
62551: LD_ADDR_VAR 0 9
62555: PUSH
62556: LD_INT 22
62558: PUSH
62559: LD_VAR 0 2
62563: PUSH
62564: EMPTY
62565: LIST
62566: LIST
62567: PUSH
62568: LD_INT 2
62570: PUSH
62571: LD_INT 30
62573: PUSH
62574: LD_INT 0
62576: PUSH
62577: EMPTY
62578: LIST
62579: LIST
62580: PUSH
62581: LD_INT 30
62583: PUSH
62584: LD_INT 1
62586: PUSH
62587: EMPTY
62588: LIST
62589: LIST
62590: PUSH
62591: EMPTY
62592: LIST
62593: LIST
62594: LIST
62595: PUSH
62596: EMPTY
62597: LIST
62598: LIST
62599: PPUSH
62600: CALL_OW 69
62604: ST_TO_ADDR
// crates := 0 ;
62605: LD_ADDR_VAR 0 4
62609: PUSH
62610: LD_INT 0
62612: ST_TO_ADDR
// oil := 0 ;
62613: LD_ADDR_VAR 0 5
62617: PUSH
62618: LD_INT 0
62620: ST_TO_ADDR
// sib := 0 ;
62621: LD_ADDR_VAR 0 6
62625: PUSH
62626: LD_INT 0
62628: ST_TO_ADDR
// if bases then
62629: LD_VAR 0 9
62633: IFFALSE 62739
// begin for j in bases do
62635: LD_ADDR_VAR 0 3
62639: PUSH
62640: LD_VAR 0 9
62644: PUSH
62645: FOR_IN
62646: IFFALSE 62737
// begin base := GetBase ( j ) ;
62648: LD_ADDR_VAR 0 8
62652: PUSH
62653: LD_VAR 0 3
62657: PPUSH
62658: CALL_OW 274
62662: ST_TO_ADDR
// crates := crates + GetResourceType ( base , mat_cans ) ;
62663: LD_ADDR_VAR 0 4
62667: PUSH
62668: LD_VAR 0 4
62672: PUSH
62673: LD_VAR 0 8
62677: PPUSH
62678: LD_INT 1
62680: PPUSH
62681: CALL_OW 275
62685: PLUS
62686: ST_TO_ADDR
// oil := oil + GetResourceType ( base , mat_oil ) ;
62687: LD_ADDR_VAR 0 5
62691: PUSH
62692: LD_VAR 0 5
62696: PUSH
62697: LD_VAR 0 8
62701: PPUSH
62702: LD_INT 2
62704: PPUSH
62705: CALL_OW 275
62709: PLUS
62710: ST_TO_ADDR
// sib := sib + GetResourceType ( base , mat_siberit ) ;
62711: LD_ADDR_VAR 0 6
62715: PUSH
62716: LD_VAR 0 6
62720: PUSH
62721: LD_VAR 0 8
62725: PPUSH
62726: LD_INT 3
62728: PPUSH
62729: CALL_OW 275
62733: PLUS
62734: ST_TO_ADDR
// end ;
62735: GO 62645
62737: POP
62738: POP
// end ; ToLua ( setSpecText( & i & , & 2 & , & crates & ) ) ;
62739: LD_STRING setSpecText(
62741: PUSH
62742: LD_VAR 0 2
62746: STR
62747: PUSH
62748: LD_STRING ,
62750: STR
62751: PUSH
62752: LD_INT 2
62754: STR
62755: PUSH
62756: LD_STRING ,
62758: STR
62759: PUSH
62760: LD_VAR 0 4
62764: STR
62765: PUSH
62766: LD_STRING )
62768: STR
62769: PPUSH
62770: CALL_OW 559
// ToLua ( setSpecText( & i & , & 3 & , & oil & ) ) ;
62774: LD_STRING setSpecText(
62776: PUSH
62777: LD_VAR 0 2
62781: STR
62782: PUSH
62783: LD_STRING ,
62785: STR
62786: PUSH
62787: LD_INT 3
62789: STR
62790: PUSH
62791: LD_STRING ,
62793: STR
62794: PUSH
62795: LD_VAR 0 5
62799: STR
62800: PUSH
62801: LD_STRING )
62803: STR
62804: PPUSH
62805: CALL_OW 559
// ToLua ( setSpecText( & i & , & 4 & , & sib & ) ) ;
62809: LD_STRING setSpecText(
62811: PUSH
62812: LD_VAR 0 2
62816: STR
62817: PUSH
62818: LD_STRING ,
62820: STR
62821: PUSH
62822: LD_INT 4
62824: STR
62825: PUSH
62826: LD_STRING ,
62828: STR
62829: PUSH
62830: LD_VAR 0 6
62834: STR
62835: PUSH
62836: LD_STRING )
62838: STR
62839: PPUSH
62840: CALL_OW 559
// ToLua ( setSpecText( & i & , & 5 & , & people & ) ) ;
62844: LD_STRING setSpecText(
62846: PUSH
62847: LD_VAR 0 2
62851: STR
62852: PUSH
62853: LD_STRING ,
62855: STR
62856: PUSH
62857: LD_INT 5
62859: STR
62860: PUSH
62861: LD_STRING ,
62863: STR
62864: PUSH
62865: LD_VAR 0 7
62869: STR
62870: PUSH
62871: LD_STRING )
62873: STR
62874: PPUSH
62875: CALL_OW 559
// end ; end ;
62879: GO 62495
62881: POP
62882: POP
// end ;
62883: LD_VAR 0 1
62887: RET
// every 20 + 0 0$5 trigger FilterAllUnits ( [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) do
62888: LD_INT 2
62890: PUSH
62891: LD_INT 30
62893: PUSH
62894: LD_INT 0
62896: PUSH
62897: EMPTY
62898: LIST
62899: LIST
62900: PUSH
62901: LD_INT 30
62903: PUSH
62904: LD_INT 1
62906: PUSH
62907: EMPTY
62908: LIST
62909: LIST
62910: PUSH
62911: EMPTY
62912: LIST
62913: LIST
62914: LIST
62915: PPUSH
62916: CALL_OW 69
62920: IFFALSE 62930
62922: GO 62924
62924: DISABLE
// begin enable ;
62925: ENABLE
// UpdateSpectatorBar ;
62926: CALL 62471 0 0
// end ;
62930: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
62931: LD_INT 0
62933: PPUSH
// end ;
62934: LD_VAR 0 12
62938: RET
// export factoryWaypoints , factoryWaypointsDrivers ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
62939: LD_INT 0
62941: PPUSH
62942: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
62943: LD_VAR 0 1
62947: NOT
62948: IFTRUE 62967
62950: PUSH
62951: LD_VAR 0 2
62955: PPUSH
62956: LD_VAR 0 3
62960: PPUSH
62961: CALL_OW 488
62965: NOT
62966: OR
62967: IFTRUE 63002
62969: PUSH
62970: LD_VAR 0 1
62974: PPUSH
62975: CALL_OW 266
62979: PUSH
62980: LD_INT 3
62982: NONEQUAL
62983: IFFALSE 63001
62985: PUSH
62986: LD_VAR 0 1
62990: PPUSH
62991: CALL_OW 247
62995: PUSH
62996: LD_INT 1
62998: EQUAL
62999: NOT
63000: AND
63001: OR
63002: IFFALSE 63006
// exit ;
63004: GO 63288
// if GetType ( factory ) = unit_human then
63006: LD_VAR 0 1
63010: PPUSH
63011: CALL_OW 247
63015: PUSH
63016: LD_INT 1
63018: EQUAL
63019: IFFALSE 63036
// factory := IsInUnit ( factory ) ;
63021: LD_ADDR_VAR 0 1
63025: PUSH
63026: LD_VAR 0 1
63030: PPUSH
63031: CALL_OW 310
63035: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
63036: LD_VAR 0 1
63040: PPUSH
63041: CALL_OW 266
63045: PUSH
63046: LD_INT 3
63048: NONEQUAL
63049: IFFALSE 63053
// exit ;
63051: GO 63288
// for i := 1 to Count ( factoryWaypoints ) do
63053: LD_ADDR_VAR 0 5
63057: PUSH
63058: DOUBLE
63059: LD_INT 1
63061: DEC
63062: ST_TO_ADDR
63063: LD_EXP 60
63067: PPUSH
63068: CALL 12696 0 1
63072: PUSH
63073: FOR_TO
63074: IFFALSE 63236
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
63076: LD_VAR 0 2
63080: PPUSH
63081: LD_VAR 0 3
63085: PPUSH
63086: CALL_OW 428
63090: PUSH
63091: LD_EXP 60
63095: PUSH
63096: LD_VAR 0 5
63100: ARRAY
63101: PUSH
63102: LD_INT 2
63104: ARRAY
63105: EQUAL
63106: IFFALSE 63138
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
63108: LD_ADDR_EXP 60
63112: PUSH
63113: LD_EXP 60
63117: PPUSH
63118: LD_VAR 0 5
63122: PPUSH
63123: CALL_OW 3
63127: ST_TO_ADDR
// UpdateFactoryWaypoints ;
63128: CALL 63293 0 0
// exit ;
63132: POP
63133: POP
63134: GO 63288
// end else
63136: GO 63234
// if factory = factoryWaypoints [ i ] [ 2 ] then
63138: LD_VAR 0 1
63142: PUSH
63143: LD_EXP 60
63147: PUSH
63148: LD_VAR 0 5
63152: ARRAY
63153: PUSH
63154: LD_INT 2
63156: ARRAY
63157: EQUAL
63158: IFFALSE 63234
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
63160: LD_ADDR_EXP 60
63164: PUSH
63165: LD_EXP 60
63169: PPUSH
63170: LD_VAR 0 5
63174: PPUSH
63175: CALL_OW 3
63179: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
63180: LD_ADDR_EXP 60
63184: PUSH
63185: LD_EXP 60
63189: PPUSH
63190: LD_VAR 0 1
63194: PPUSH
63195: CALL_OW 255
63199: PUSH
63200: LD_VAR 0 1
63204: PUSH
63205: LD_VAR 0 2
63209: PUSH
63210: LD_VAR 0 3
63214: PUSH
63215: EMPTY
63216: LIST
63217: LIST
63218: LIST
63219: LIST
63220: PPUSH
63221: CALL 48662 0 2
63225: ST_TO_ADDR
// UpdateFactoryWaypoints ;
63226: CALL 63293 0 0
// exit ;
63230: POP
63231: POP
63232: GO 63288
// end ; end ;
63234: GO 63073
63236: POP
63237: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
63238: LD_ADDR_EXP 60
63242: PUSH
63243: LD_EXP 60
63247: PPUSH
63248: LD_VAR 0 1
63252: PPUSH
63253: CALL_OW 255
63257: PUSH
63258: LD_VAR 0 1
63262: PUSH
63263: LD_VAR 0 2
63267: PUSH
63268: LD_VAR 0 3
63272: PUSH
63273: EMPTY
63274: LIST
63275: LIST
63276: LIST
63277: LIST
63278: PPUSH
63279: CALL 48662 0 2
63283: ST_TO_ADDR
// UpdateFactoryWaypoints ;
63284: CALL 63293 0 0
// end ;
63288: LD_VAR 0 4
63292: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
63293: LD_INT 0
63295: PPUSH
63296: PPUSH
63297: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
63298: LD_STRING resetFactoryWaypoint();
63300: PPUSH
63301: CALL_OW 559
// if factoryWaypoints then
63305: LD_EXP 60
63309: IFFALSE 63430
// begin list := factoryWaypoints ;
63311: LD_ADDR_VAR 0 3
63315: PUSH
63316: LD_EXP 60
63320: ST_TO_ADDR
// for i := 1 to list do
63321: LD_ADDR_VAR 0 2
63325: PUSH
63326: DOUBLE
63327: LD_INT 1
63329: DEC
63330: ST_TO_ADDR
63331: LD_VAR 0 3
63335: PUSH
63336: FOR_TO
63337: IFFALSE 63428
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
63339: LD_STRING setFactoryWaypointXY(
63341: PUSH
63342: LD_VAR 0 3
63346: PUSH
63347: LD_VAR 0 2
63351: ARRAY
63352: PUSH
63353: LD_INT 1
63355: ARRAY
63356: STR
63357: PUSH
63358: LD_STRING ,
63360: STR
63361: PUSH
63362: LD_VAR 0 3
63366: PUSH
63367: LD_VAR 0 2
63371: ARRAY
63372: PUSH
63373: LD_INT 2
63375: ARRAY
63376: STR
63377: PUSH
63378: LD_STRING ,
63380: STR
63381: PUSH
63382: LD_VAR 0 3
63386: PUSH
63387: LD_VAR 0 2
63391: ARRAY
63392: PUSH
63393: LD_INT 3
63395: ARRAY
63396: STR
63397: PUSH
63398: LD_STRING ,
63400: STR
63401: PUSH
63402: LD_VAR 0 3
63406: PUSH
63407: LD_VAR 0 2
63411: ARRAY
63412: PUSH
63413: LD_INT 4
63415: ARRAY
63416: STR
63417: PUSH
63418: LD_STRING )
63420: STR
63421: PPUSH
63422: CALL_OW 559
63426: GO 63336
63428: POP
63429: POP
// end ; end ;
63430: LD_VAR 0 1
63434: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
63435: LD_INT 0
63437: PPUSH
// if HexInfo ( x , y ) = warehouse then
63438: LD_VAR 0 2
63442: PPUSH
63443: LD_VAR 0 3
63447: PPUSH
63448: CALL_OW 428
63452: PUSH
63453: LD_VAR 0 1
63457: EQUAL
63458: IFFALSE 63485
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
63460: LD_ADDR_EXP 62
63464: PUSH
63465: LD_EXP 62
63469: PPUSH
63470: LD_VAR 0 1
63474: PPUSH
63475: LD_INT 0
63477: PPUSH
63478: CALL_OW 1
63482: ST_TO_ADDR
63483: GO 63536
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
63485: LD_ADDR_EXP 62
63489: PUSH
63490: LD_EXP 62
63494: PPUSH
63495: LD_VAR 0 1
63499: PPUSH
63500: LD_VAR 0 1
63504: PPUSH
63505: CALL_OW 255
63509: PUSH
63510: LD_VAR 0 1
63514: PUSH
63515: LD_VAR 0 2
63519: PUSH
63520: LD_VAR 0 3
63524: PUSH
63525: EMPTY
63526: LIST
63527: LIST
63528: LIST
63529: LIST
63530: PPUSH
63531: CALL_OW 1
63535: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
63536: CALL 63545 0 0
// end ;
63540: LD_VAR 0 4
63544: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
63545: LD_INT 0
63547: PPUSH
63548: PPUSH
63549: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
63550: LD_STRING resetWarehouseGatheringPoints();
63552: PPUSH
63553: CALL_OW 559
// if warehouseGatheringPoints then
63557: LD_EXP 62
63561: IFFALSE 63687
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
63563: LD_ADDR_VAR 0 3
63567: PUSH
63568: LD_EXP 62
63572: PPUSH
63573: CALL 52596 0 1
63577: ST_TO_ADDR
// for i := 1 to list do
63578: LD_ADDR_VAR 0 2
63582: PUSH
63583: DOUBLE
63584: LD_INT 1
63586: DEC
63587: ST_TO_ADDR
63588: LD_VAR 0 3
63592: PUSH
63593: FOR_TO
63594: IFFALSE 63685
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
63596: LD_STRING setWarehouseGatheringPointXY(
63598: PUSH
63599: LD_VAR 0 3
63603: PUSH
63604: LD_VAR 0 2
63608: ARRAY
63609: PUSH
63610: LD_INT 1
63612: ARRAY
63613: STR
63614: PUSH
63615: LD_STRING ,
63617: STR
63618: PUSH
63619: LD_VAR 0 3
63623: PUSH
63624: LD_VAR 0 2
63628: ARRAY
63629: PUSH
63630: LD_INT 2
63632: ARRAY
63633: STR
63634: PUSH
63635: LD_STRING ,
63637: STR
63638: PUSH
63639: LD_VAR 0 3
63643: PUSH
63644: LD_VAR 0 2
63648: ARRAY
63649: PUSH
63650: LD_INT 3
63652: ARRAY
63653: STR
63654: PUSH
63655: LD_STRING ,
63657: STR
63658: PUSH
63659: LD_VAR 0 3
63663: PUSH
63664: LD_VAR 0 2
63668: ARRAY
63669: PUSH
63670: LD_INT 4
63672: ARRAY
63673: STR
63674: PUSH
63675: LD_STRING )
63677: STR
63678: PPUSH
63679: CALL_OW 559
63683: GO 63593
63685: POP
63686: POP
// end ; end ;
63687: LD_VAR 0 1
63691: RET
// function ParseMultiDataToLua ( ) ; var i ; begin
63692: LD_INT 0
63694: PPUSH
63695: PPUSH
// if not mpSidePositions then
63696: LD_EXP 7
63700: NOT
63701: IFFALSE 63705
// exit ;
63703: GO 63776
// result :=  ;
63705: LD_ADDR_VAR 0 1
63709: PUSH
63710: LD_STRING 
63712: ST_TO_ADDR
// for i := 1 to 8 do
63713: LD_ADDR_VAR 0 2
63717: PUSH
63718: DOUBLE
63719: LD_INT 1
63721: DEC
63722: ST_TO_ADDR
63723: LD_INT 8
63725: PUSH
63726: FOR_TO
63727: IFFALSE 63757
// begin result := result & mpSidePositions [ i ] & ; ;
63729: LD_ADDR_VAR 0 1
63733: PUSH
63734: LD_VAR 0 1
63738: PUSH
63739: LD_EXP 7
63743: PUSH
63744: LD_VAR 0 2
63748: ARRAY
63749: STR
63750: PUSH
63751: LD_STRING ;
63753: STR
63754: ST_TO_ADDR
// end ;
63755: GO 63726
63757: POP
63758: POP
// ToLua ( setMultiplayerRealPosition(" & result & "); ) ;
63759: LD_STRING setMultiplayerRealPosition("
63761: PUSH
63762: LD_VAR 0 1
63766: STR
63767: PUSH
63768: LD_STRING ");
63770: STR
63771: PPUSH
63772: CALL_OW 559
// end ;
63776: LD_VAR 0 1
63780: RET
