// starting begin ResetFog ;
   0: CALL_OW 335
// InitMultiplayer ;
   4: CALL 2528 0 0
// InitMultiplayerSettings ;
   8: CALL 17 0 0
// StartMultiplayer ;
  12: CALL 2904 0 0
// end ; end_of_file
  16: END
// export function InitMultiplayerSettings ; begin
  17: LD_INT 0
  19: PPUSH
// mpGameSettingsKeys := [ 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 0 , 0 , 1 , 0 , 1 , 1 ] ;
  20: LD_ADDR_EXP 4
  24: PUSH
  25: LD_INT 1
  27: PUSH
  28: LD_INT 1
  30: PUSH
  31: LD_INT 1
  33: PUSH
  34: LD_INT 1
  36: PUSH
  37: LD_INT 1
  39: PUSH
  40: LD_INT 1
  42: PUSH
  43: LD_INT 1
  45: PUSH
  46: LD_INT 1
  48: PUSH
  49: LD_INT 1
  51: PUSH
  52: LD_INT 1
  54: PUSH
  55: LD_INT 1
  57: PUSH
  58: LD_INT 1
  60: PUSH
  61: LD_INT 1
  63: PUSH
  64: LD_INT 1
  66: PUSH
  67: LD_INT 1
  69: PUSH
  70: LD_INT 0
  72: PUSH
  73: LD_INT 0
  75: PUSH
  76: LD_INT 1
  78: PUSH
  79: LD_INT 0
  81: PUSH
  82: LD_INT 1
  84: PUSH
  85: LD_INT 1
  87: PUSH
  88: EMPTY
  89: LIST
  90: LIST
  91: LIST
  92: LIST
  93: LIST
  94: LIST
  95: LIST
  96: LIST
  97: LIST
  98: LIST
  99: LIST
 100: LIST
 101: LIST
 102: LIST
 103: LIST
 104: LIST
 105: LIST
 106: LIST
 107: LIST
 108: LIST
 109: LIST
 110: ST_TO_ADDR
// mpGameSettingsValues := [ [ 0 , 1 ] , [ 9 , 12 , 15 , 24 ] , [ 1 , 3 , 5 , 7 ] , [ [ 0 , 0 , 0 ] , [ 100 , 30 , 0 ] , [ 200 , 75 , 10 ] , [ 500 , 150 , 30 ] ] , [ 1 , 2 , 3 , 4 ] , [ 0 , 1 , 2 ] , [ 0 , 1 , 2 ] , [ 250 , 350 , 500 , 1000 , 2000 ] , [ 0 , 2 ] , [ 0 , 5 5$00 , 10 10$00 , 15 15$00 , 20 20$00 , 30 30$00 ] , [ 0 , 1 ] , [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] , [ 0 , 1 ] , [ 0 , 6 6$30 , 3 3$30 ] , [ 0 , 2 , 4 , 6 ] , [ ] , [ ] , [ 0 , 1 , 15 15$0 , 25 25$0 , 30 30$0 , 45 45$0 , 60 60$0 , 90 90$0 , 100 100$0 , 120 120$0 , 180 180$0 ] , [ ] , [ 0 , 1 , 2 , 4 ] , [ 0 , 3 3$0 , 5 5$0 , 8 8$0 , 10 10$0 , 12 12$0 , 15 15$0 , 20 20$0 , 30 30$0 ] ] ;
 111: LD_ADDR_EXP 5
 115: PUSH
 116: LD_INT 0
 118: PUSH
 119: LD_INT 1
 121: PUSH
 122: EMPTY
 123: LIST
 124: LIST
 125: PUSH
 126: LD_INT 9
 128: PUSH
 129: LD_INT 12
 131: PUSH
 132: LD_INT 15
 134: PUSH
 135: LD_INT 24
 137: PUSH
 138: EMPTY
 139: LIST
 140: LIST
 141: LIST
 142: LIST
 143: PUSH
 144: LD_INT 1
 146: PUSH
 147: LD_INT 3
 149: PUSH
 150: LD_INT 5
 152: PUSH
 153: LD_INT 7
 155: PUSH
 156: EMPTY
 157: LIST
 158: LIST
 159: LIST
 160: LIST
 161: PUSH
 162: LD_INT 0
 164: PUSH
 165: LD_INT 0
 167: PUSH
 168: LD_INT 0
 170: PUSH
 171: EMPTY
 172: LIST
 173: LIST
 174: LIST
 175: PUSH
 176: LD_INT 100
 178: PUSH
 179: LD_INT 30
 181: PUSH
 182: LD_INT 0
 184: PUSH
 185: EMPTY
 186: LIST
 187: LIST
 188: LIST
 189: PUSH
 190: LD_INT 200
 192: PUSH
 193: LD_INT 75
 195: PUSH
 196: LD_INT 10
 198: PUSH
 199: EMPTY
 200: LIST
 201: LIST
 202: LIST
 203: PUSH
 204: LD_INT 500
 206: PUSH
 207: LD_INT 150
 209: PUSH
 210: LD_INT 30
 212: PUSH
 213: EMPTY
 214: LIST
 215: LIST
 216: LIST
 217: PUSH
 218: EMPTY
 219: LIST
 220: LIST
 221: LIST
 222: LIST
 223: PUSH
 224: LD_INT 1
 226: PUSH
 227: LD_INT 2
 229: PUSH
 230: LD_INT 3
 232: PUSH
 233: LD_INT 4
 235: PUSH
 236: EMPTY
 237: LIST
 238: LIST
 239: LIST
 240: LIST
 241: PUSH
 242: LD_INT 0
 244: PUSH
 245: LD_INT 1
 247: PUSH
 248: LD_INT 2
 250: PUSH
 251: EMPTY
 252: LIST
 253: LIST
 254: LIST
 255: PUSH
 256: LD_INT 0
 258: PUSH
 259: LD_INT 1
 261: PUSH
 262: LD_INT 2
 264: PUSH
 265: EMPTY
 266: LIST
 267: LIST
 268: LIST
 269: PUSH
 270: LD_INT 250
 272: PUSH
 273: LD_INT 350
 275: PUSH
 276: LD_INT 500
 278: PUSH
 279: LD_INT 1000
 281: PUSH
 282: LD_INT 2000
 284: PUSH
 285: EMPTY
 286: LIST
 287: LIST
 288: LIST
 289: LIST
 290: LIST
 291: PUSH
 292: LD_INT 0
 294: PUSH
 295: LD_INT 2
 297: PUSH
 298: EMPTY
 299: LIST
 300: LIST
 301: PUSH
 302: LD_INT 0
 304: PUSH
 305: LD_INT 10500
 307: PUSH
 308: LD_INT 21000
 310: PUSH
 311: LD_INT 31500
 313: PUSH
 314: LD_INT 42000
 316: PUSH
 317: LD_INT 63000
 319: PUSH
 320: EMPTY
 321: LIST
 322: LIST
 323: LIST
 324: LIST
 325: LIST
 326: LIST
 327: PUSH
 328: LD_INT 0
 330: PUSH
 331: LD_INT 1
 333: PUSH
 334: EMPTY
 335: LIST
 336: LIST
 337: PUSH
 338: LD_INT 1
 340: NEG
 341: PUSH
 342: LD_INT 350
 344: PUSH
 345: LD_INT 700
 347: PUSH
 348: LD_INT 1400
 350: PUSH
 351: LD_INT 0
 353: PUSH
 354: EMPTY
 355: LIST
 356: LIST
 357: LIST
 358: LIST
 359: LIST
 360: PUSH
 361: LD_INT 0
 363: PUSH
 364: LD_INT 1
 366: PUSH
 367: EMPTY
 368: LIST
 369: LIST
 370: PUSH
 371: LD_INT 0
 373: PUSH
 374: LD_INT 13650
 376: PUSH
 377: LD_INT 7350
 379: PUSH
 380: EMPTY
 381: LIST
 382: LIST
 383: LIST
 384: PUSH
 385: LD_INT 0
 387: PUSH
 388: LD_INT 2
 390: PUSH
 391: LD_INT 4
 393: PUSH
 394: LD_INT 6
 396: PUSH
 397: EMPTY
 398: LIST
 399: LIST
 400: LIST
 401: LIST
 402: PUSH
 403: EMPTY
 404: PUSH
 405: EMPTY
 406: PUSH
 407: LD_INT 0
 409: PUSH
 410: LD_INT 1
 412: PUSH
 413: LD_INT 31500
 415: PUSH
 416: LD_INT 52500
 418: PUSH
 419: LD_INT 63000
 421: PUSH
 422: LD_INT 94500
 424: PUSH
 425: LD_INT 126000
 427: PUSH
 428: LD_INT 189000
 430: PUSH
 431: LD_INT 210000
 433: PUSH
 434: LD_INT 252000
 436: PUSH
 437: LD_INT 378000
 439: PUSH
 440: EMPTY
 441: LIST
 442: LIST
 443: LIST
 444: LIST
 445: LIST
 446: LIST
 447: LIST
 448: LIST
 449: LIST
 450: LIST
 451: LIST
 452: PUSH
 453: EMPTY
 454: PUSH
 455: LD_INT 0
 457: PUSH
 458: LD_INT 1
 460: PUSH
 461: LD_INT 2
 463: PUSH
 464: LD_INT 4
 466: PUSH
 467: EMPTY
 468: LIST
 469: LIST
 470: LIST
 471: LIST
 472: PUSH
 473: LD_INT 0
 475: PUSH
 476: LD_INT 6300
 478: PUSH
 479: LD_INT 10500
 481: PUSH
 482: LD_INT 16800
 484: PUSH
 485: LD_INT 21000
 487: PUSH
 488: LD_INT 25200
 490: PUSH
 491: LD_INT 31500
 493: PUSH
 494: LD_INT 42000
 496: PUSH
 497: LD_INT 63000
 499: PUSH
 500: EMPTY
 501: LIST
 502: LIST
 503: LIST
 504: LIST
 505: LIST
 506: LIST
 507: LIST
 508: LIST
 509: LIST
 510: PUSH
 511: EMPTY
 512: LIST
 513: LIST
 514: LIST
 515: LIST
 516: LIST
 517: LIST
 518: LIST
 519: LIST
 520: LIST
 521: LIST
 522: LIST
 523: LIST
 524: LIST
 525: LIST
 526: LIST
 527: LIST
 528: LIST
 529: LIST
 530: LIST
 531: LIST
 532: LIST
 533: ST_TO_ADDR
// mpGameSettings := [ 1 , 15 , 4 , [ 100 , 30 , 0 ] , 3 , 1 , 2 , 250 , 0 , 0 , 1 , 0 0$20 , 1 , 0 0$20 , 3 , 0 , 0 , 15 15$0 , 0 , 0 , 3 3$0 ] ;
 534: LD_ADDR_EXP 6
 538: PUSH
 539: LD_INT 1
 541: PUSH
 542: LD_INT 15
 544: PUSH
 545: LD_INT 4
 547: PUSH
 548: LD_INT 100
 550: PUSH
 551: LD_INT 30
 553: PUSH
 554: LD_INT 0
 556: PUSH
 557: EMPTY
 558: LIST
 559: LIST
 560: LIST
 561: PUSH
 562: LD_INT 3
 564: PUSH
 565: LD_INT 1
 567: PUSH
 568: LD_INT 2
 570: PUSH
 571: LD_INT 250
 573: PUSH
 574: LD_INT 0
 576: PUSH
 577: LD_INT 0
 579: PUSH
 580: LD_INT 1
 582: PUSH
 583: LD_INT 700
 585: PUSH
 586: LD_INT 1
 588: PUSH
 589: LD_INT 700
 591: PUSH
 592: LD_INT 3
 594: PUSH
 595: LD_INT 0
 597: PUSH
 598: LD_INT 0
 600: PUSH
 601: LD_INT 31500
 603: PUSH
 604: LD_INT 0
 606: PUSH
 607: LD_INT 0
 609: PUSH
 610: LD_INT 6300
 612: PUSH
 613: EMPTY
 614: LIST
 615: LIST
 616: LIST
 617: LIST
 618: LIST
 619: LIST
 620: LIST
 621: LIST
 622: LIST
 623: LIST
 624: LIST
 625: LIST
 626: LIST
 627: LIST
 628: LIST
 629: LIST
 630: LIST
 631: LIST
 632: LIST
 633: LIST
 634: LIST
 635: ST_TO_ADDR
// mpGameType := GameTypeNormal ;
 636: LD_ADDR_EXP 3
 640: PUSH
 641: LD_INT 1
 643: ST_TO_ADDR
// your_side := 1 ;
 644: LD_ADDR_OWVAR 2
 648: PUSH
 649: LD_INT 1
 651: ST_TO_ADDR
// mpSidePositions := [ 1 , 2 , 3 , 4 , 0 , 0 , 0 , 0 ] ;
 652: LD_ADDR_EXP 7
 656: PUSH
 657: LD_INT 1
 659: PUSH
 660: LD_INT 2
 662: PUSH
 663: LD_INT 3
 665: PUSH
 666: LD_INT 4
 668: PUSH
 669: LD_INT 0
 671: PUSH
 672: LD_INT 0
 674: PUSH
 675: LD_INT 0
 677: PUSH
 678: LD_INT 0
 680: PUSH
 681: EMPTY
 682: LIST
 683: LIST
 684: LIST
 685: LIST
 686: LIST
 687: LIST
 688: LIST
 689: LIST
 690: ST_TO_ADDR
// mpSideTeams := [ 1 , 1 , 2 , 2 , 0 , 0 , 0 , 0 ] ;
 691: LD_ADDR_EXP 8
 695: PUSH
 696: LD_INT 1
 698: PUSH
 699: LD_INT 1
 701: PUSH
 702: LD_INT 2
 704: PUSH
 705: LD_INT 2
 707: PUSH
 708: LD_INT 0
 710: PUSH
 711: LD_INT 0
 713: PUSH
 714: LD_INT 0
 716: PUSH
 717: LD_INT 0
 719: PUSH
 720: EMPTY
 721: LIST
 722: LIST
 723: LIST
 724: LIST
 725: LIST
 726: LIST
 727: LIST
 728: LIST
 729: ST_TO_ADDR
// mpSideNations := [ 3 , 3 , 3 , 3 , 0 , 0 , 0 , 0 ] ;
 730: LD_ADDR_EXP 9
 734: PUSH
 735: LD_INT 3
 737: PUSH
 738: LD_INT 3
 740: PUSH
 741: LD_INT 3
 743: PUSH
 744: LD_INT 3
 746: PUSH
 747: LD_INT 0
 749: PUSH
 750: LD_INT 0
 752: PUSH
 753: LD_INT 0
 755: PUSH
 756: LD_INT 0
 758: PUSH
 759: EMPTY
 760: LIST
 761: LIST
 762: LIST
 763: LIST
 764: LIST
 765: LIST
 766: LIST
 767: LIST
 768: ST_TO_ADDR
// mpTeams := [ [ 1 , 2 ] , [ 3 , 4 ] ] ;
 769: LD_ADDR_EXP 10
 773: PUSH
 774: LD_INT 1
 776: PUSH
 777: LD_INT 2
 779: PUSH
 780: EMPTY
 781: LIST
 782: LIST
 783: PUSH
 784: LD_INT 3
 786: PUSH
 787: LD_INT 4
 789: PUSH
 790: EMPTY
 791: LIST
 792: LIST
 793: PUSH
 794: EMPTY
 795: LIST
 796: LIST
 797: ST_TO_ADDR
// mpTeamGame := true ;
 798: LD_ADDR_EXP 11
 802: PUSH
 803: LD_INT 1
 805: ST_TO_ADDR
// mpMapSize := [ 100 , 120 ] ;
 806: LD_ADDR_EXP 29
 810: PUSH
 811: LD_INT 100
 813: PUSH
 814: LD_INT 120
 816: PUSH
 817: EMPTY
 818: LIST
 819: LIST
 820: ST_TO_ADDR
// end ;
 821: LD_VAR 0 1
 825: RET
// export kingArea , kingCamArea ; export function GetMultiplayerMapData ( gameType ) ; var i , all , area , hasOil , hasSib , baseLevel , startPos ; begin
 826: LD_INT 0
 828: PPUSH
 829: PPUSH
 830: PPUSH
 831: PPUSH
 832: PPUSH
 833: PPUSH
 834: PPUSH
 835: PPUSH
// mpBuildUpAreas := [ BaseArea1 , BaseArea2 , BaseArea3 , BaseArea4 ] ;
 836: LD_ADDR_EXP 19
 840: PUSH
 841: LD_INT 5
 843: PUSH
 844: LD_INT 7
 846: PUSH
 847: LD_INT 6
 849: PUSH
 850: LD_INT 8
 852: PUSH
 853: EMPTY
 854: LIST
 855: LIST
 856: LIST
 857: LIST
 858: ST_TO_ADDR
// mpMarkedAreas := [ ] union mpBuildUpAreas ;
 859: LD_ADDR_EXP 18
 863: PUSH
 864: EMPTY
 865: PUSH
 866: LD_EXP 19
 870: UNION
 871: ST_TO_ADDR
// if gameType = GameTypeSurvival then
 872: LD_VAR 0 1
 876: PUSH
 877: LD_INT 2
 879: EQUAL
 880: IFFALSE 892
// baseLevel := 1 else
 882: LD_ADDR_VAR 0 8
 886: PUSH
 887: LD_INT 1
 889: ST_TO_ADDR
 890: GO 906
// baseLevel := mpGameSettings [ 1 ] ;
 892: LD_ADDR_VAR 0 8
 896: PUSH
 897: LD_EXP 6
 901: PUSH
 902: LD_INT 1
 904: ARRAY
 905: ST_TO_ADDR
// mpPeopleAmount := mpGameSettings [ 2 ] ;
 906: LD_ADDR_EXP 24
 910: PUSH
 911: LD_EXP 6
 915: PUSH
 916: LD_INT 2
 918: ARRAY
 919: ST_TO_ADDR
// mpPeopleSkill := mpGameSettings [ 3 ] ;
 920: LD_ADDR_EXP 25
 924: PUSH
 925: LD_EXP 6
 929: PUSH
 930: LD_INT 3
 932: ARRAY
 933: ST_TO_ADDR
// mpStartingResources := mpGameSettings [ 4 ] ;
 934: LD_ADDR_EXP 15
 938: PUSH
 939: LD_EXP 6
 943: PUSH
 944: LD_INT 4
 946: ARRAY
 947: ST_TO_ADDR
// mpShipments := mpGameSettings [ 5 ] ;
 948: LD_ADDR_EXP 27
 952: PUSH
 953: LD_EXP 6
 957: PUSH
 958: LD_INT 5
 960: ARRAY
 961: ST_TO_ADDR
// hasOil := mpGameSettings [ 6 ] > 0 ;
 962: LD_ADDR_VAR 0 6
 966: PUSH
 967: LD_EXP 6
 971: PUSH
 972: LD_INT 6
 974: ARRAY
 975: PUSH
 976: LD_INT 0
 978: GREATER
 979: ST_TO_ADDR
// hasSib := mpGameSettings [ 7 ] > 0 ;
 980: LD_ADDR_VAR 0 7
 984: PUSH
 985: LD_EXP 6
 989: PUSH
 990: LD_INT 7
 992: ARRAY
 993: PUSH
 994: LD_INT 0
 996: GREATER
 997: ST_TO_ADDR
// mpKingArea := 0 ;
 998: LD_ADDR_EXP 34
1002: PUSH
1003: LD_INT 0
1005: ST_TO_ADDR
// mpPoints := 0 ;
1006: LD_ADDR_EXP 35
1010: PUSH
1011: LD_INT 0
1013: ST_TO_ADDR
// mpEmissions := 0 ;
1014: LD_ADDR_EXP 37
1018: PUSH
1019: LD_INT 0
1021: ST_TO_ADDR
// kingArea := 0 ;
1022: LD_ADDR_EXP 1
1026: PUSH
1027: LD_INT 0
1029: ST_TO_ADDR
// kingCamArea := 0 ;
1030: LD_ADDR_EXP 2
1034: PUSH
1035: LD_INT 0
1037: ST_TO_ADDR
// if mpGameSettings [ 9 ] then
1038: LD_EXP 6
1042: PUSH
1043: LD_INT 9
1045: ARRAY
1046: IFFALSE 1249
// begin mpVehicles := [ [ [ us_light_wheeled , engine_combustion , control_manual , us_machine_gun ] , [ us_light_wheeled , engine_combustion , control_manual , us_light_gun ] , [ us_heavy_tracked , engine_combustion , control_manual , us_bulldozer , nation_american ] ] , [ [ ar_light_trike , engine_combustion , control_manual , ar_double_machine_gun ] , [ ar_light_trike , engine_combustion , control_manual , ar_light_gun ] , [ us_heavy_tracked , engine_combustion , control_manual , us_bulldozer , nation_american ] ] , [ [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun ] , [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun ] , [ us_heavy_tracked , engine_combustion , control_manual , us_bulldozer , nation_american ] ] ] ;
1048: LD_ADDR_EXP 36
1052: PUSH
1053: LD_INT 1
1055: PUSH
1056: LD_INT 1
1058: PUSH
1059: LD_INT 1
1061: PUSH
1062: LD_INT 2
1064: PUSH
1065: EMPTY
1066: LIST
1067: LIST
1068: LIST
1069: LIST
1070: PUSH
1071: LD_INT 1
1073: PUSH
1074: LD_INT 1
1076: PUSH
1077: LD_INT 1
1079: PUSH
1080: LD_INT 3
1082: PUSH
1083: EMPTY
1084: LIST
1085: LIST
1086: LIST
1087: LIST
1088: PUSH
1089: LD_INT 4
1091: PUSH
1092: LD_INT 1
1094: PUSH
1095: LD_INT 1
1097: PUSH
1098: LD_INT 14
1100: PUSH
1101: LD_INT 1
1103: PUSH
1104: EMPTY
1105: LIST
1106: LIST
1107: LIST
1108: LIST
1109: LIST
1110: PUSH
1111: EMPTY
1112: LIST
1113: LIST
1114: LIST
1115: PUSH
1116: LD_INT 12
1118: PUSH
1119: LD_INT 1
1121: PUSH
1122: LD_INT 1
1124: PUSH
1125: LD_INT 24
1127: PUSH
1128: EMPTY
1129: LIST
1130: LIST
1131: LIST
1132: LIST
1133: PUSH
1134: LD_INT 12
1136: PUSH
1137: LD_INT 1
1139: PUSH
1140: LD_INT 1
1142: PUSH
1143: LD_INT 23
1145: PUSH
1146: EMPTY
1147: LIST
1148: LIST
1149: LIST
1150: LIST
1151: PUSH
1152: LD_INT 4
1154: PUSH
1155: LD_INT 1
1157: PUSH
1158: LD_INT 1
1160: PUSH
1161: LD_INT 14
1163: PUSH
1164: LD_INT 1
1166: PUSH
1167: EMPTY
1168: LIST
1169: LIST
1170: LIST
1171: LIST
1172: LIST
1173: PUSH
1174: EMPTY
1175: LIST
1176: LIST
1177: LIST
1178: PUSH
1179: LD_INT 21
1181: PUSH
1182: LD_INT 1
1184: PUSH
1185: LD_INT 1
1187: PUSH
1188: LD_INT 42
1190: PUSH
1191: EMPTY
1192: LIST
1193: LIST
1194: LIST
1195: LIST
1196: PUSH
1197: LD_INT 21
1199: PUSH
1200: LD_INT 1
1202: PUSH
1203: LD_INT 1
1205: PUSH
1206: LD_INT 42
1208: PUSH
1209: EMPTY
1210: LIST
1211: LIST
1212: LIST
1213: LIST
1214: PUSH
1215: LD_INT 4
1217: PUSH
1218: LD_INT 1
1220: PUSH
1221: LD_INT 1
1223: PUSH
1224: LD_INT 14
1226: PUSH
1227: LD_INT 1
1229: PUSH
1230: EMPTY
1231: LIST
1232: LIST
1233: LIST
1234: LIST
1235: LIST
1236: PUSH
1237: EMPTY
1238: LIST
1239: LIST
1240: LIST
1241: PUSH
1242: EMPTY
1243: LIST
1244: LIST
1245: LIST
1246: ST_TO_ADDR
// end else
1247: GO 1334
// begin mpVehicles := [ [ [ us_heavy_tracked , engine_combustion , control_manual , us_bulldozer , nation_american ] ] , [ [ us_heavy_tracked , engine_combustion , control_manual , us_bulldozer , nation_american ] ] , [ [ us_heavy_tracked , engine_combustion , control_manual , us_bulldozer , nation_american ] ] ] ;
1249: LD_ADDR_EXP 36
1253: PUSH
1254: LD_INT 4
1256: PUSH
1257: LD_INT 1
1259: PUSH
1260: LD_INT 1
1262: PUSH
1263: LD_INT 14
1265: PUSH
1266: LD_INT 1
1268: PUSH
1269: EMPTY
1270: LIST
1271: LIST
1272: LIST
1273: LIST
1274: LIST
1275: PUSH
1276: EMPTY
1277: LIST
1278: PUSH
1279: LD_INT 4
1281: PUSH
1282: LD_INT 1
1284: PUSH
1285: LD_INT 1
1287: PUSH
1288: LD_INT 14
1290: PUSH
1291: LD_INT 1
1293: PUSH
1294: EMPTY
1295: LIST
1296: LIST
1297: LIST
1298: LIST
1299: LIST
1300: PUSH
1301: EMPTY
1302: LIST
1303: PUSH
1304: LD_INT 4
1306: PUSH
1307: LD_INT 1
1309: PUSH
1310: LD_INT 1
1312: PUSH
1313: LD_INT 14
1315: PUSH
1316: LD_INT 1
1318: PUSH
1319: EMPTY
1320: LIST
1321: LIST
1322: LIST
1323: LIST
1324: LIST
1325: PUSH
1326: EMPTY
1327: LIST
1328: PUSH
1329: EMPTY
1330: LIST
1331: LIST
1332: LIST
1333: ST_TO_ADDR
// end ; mpSharedVision := mpGameSettings [ 11 ] ;
1334: LD_ADDR_EXP 16
1338: PUSH
1339: LD_EXP 6
1343: PUSH
1344: LD_INT 11
1346: ARRAY
1347: ST_TO_ADDR
// mpBattleFlag := mpGameSettings [ 12 ] ;
1348: LD_ADDR_EXP 22
1352: PUSH
1353: LD_EXP 6
1357: PUSH
1358: LD_INT 12
1360: ARRAY
1361: ST_TO_ADDR
// mpSibDetection := mpGameSettings [ 13 ] ;
1362: LD_ADDR_EXP 26
1366: PUSH
1367: LD_EXP 6
1371: PUSH
1372: LD_INT 13
1374: ARRAY
1375: ST_TO_ADDR
// mpRespawn := mpGameSettings [ 14 ] ;
1376: LD_ADDR_EXP 33
1380: PUSH
1381: LD_EXP 6
1385: PUSH
1386: LD_INT 14
1388: ARRAY
1389: ST_TO_ADDR
// mpApemans := mpGameSettings [ 15 ] ;
1390: LD_ADDR_EXP 30
1394: PUSH
1395: LD_EXP 6
1399: PUSH
1400: LD_INT 15
1402: ARRAY
1403: ST_TO_ADDR
// mpSibBomb := mpGameSettings [ 18 ] ;
1404: LD_ADDR_EXP 28
1408: PUSH
1409: LD_EXP 6
1413: PUSH
1414: LD_INT 18
1416: ARRAY
1417: ST_TO_ADDR
// mpBuildUpTime := mpGameSettings [ 21 ] ;
1418: LD_ADDR_EXP 20
1422: PUSH
1423: LD_EXP 6
1427: PUSH
1428: LD_INT 21
1430: ARRAY
1431: ST_TO_ADDR
// mpApemansArea := [ ApeArea1 , ApeArea2 , ApeArea3 , ApeArea4 ] ;
1432: LD_ADDR_EXP 31
1436: PUSH
1437: LD_INT 10
1439: PUSH
1440: LD_INT 11
1442: PUSH
1443: LD_INT 12
1445: PUSH
1446: LD_INT 13
1448: PUSH
1449: EMPTY
1450: LIST
1451: LIST
1452: LIST
1453: LIST
1454: ST_TO_ADDR
// startPos := [ GetBuildingFromArea ( DepotArea1 , 2 ) , GetBuildingFromArea ( DepotArea2 , 0 ) , GetBuildingFromArea ( DepotArea3 , 3 ) , GetBuildingFromArea ( DepotArea4 , 5 ) ] ;
1455: LD_ADDR_VAR 0 9
1459: PUSH
1460: LD_INT 14
1462: PPUSH
1463: LD_INT 2
1465: PPUSH
1466: CALL 52066 0 2
1470: PUSH
1471: LD_INT 15
1473: PPUSH
1474: LD_INT 0
1476: PPUSH
1477: CALL 52066 0 2
1481: PUSH
1482: LD_INT 16
1484: PPUSH
1485: LD_INT 3
1487: PPUSH
1488: CALL 52066 0 2
1492: PUSH
1493: LD_INT 17
1495: PPUSH
1496: LD_INT 5
1498: PPUSH
1499: CALL 52066 0 2
1503: PUSH
1504: EMPTY
1505: LIST
1506: LIST
1507: LIST
1508: LIST
1509: ST_TO_ADDR
// for i := 1 to Count ( startPos ) do
1510: LD_ADDR_VAR 0 3
1514: PUSH
1515: DOUBLE
1516: LD_INT 1
1518: DEC
1519: ST_TO_ADDR
1520: LD_VAR 0 9
1524: PPUSH
1525: CALL 11912 0 1
1529: PUSH
1530: FOR_TO
1531: IFFALSE 1635
// mpStartPos := Replace ( mpStartPos , i , [ ShiftX ( startPos [ i ] [ 1 ] , startPos [ i ] [ 3 ] , 10 ) , ShiftY ( startPos [ i ] [ 2 ] , startPos [ i ] [ 3 ] , 10 ) ] ) ;
1533: LD_ADDR_EXP 21
1537: PUSH
1538: LD_EXP 21
1542: PPUSH
1543: LD_VAR 0 3
1547: PPUSH
1548: LD_VAR 0 9
1552: PUSH
1553: LD_VAR 0 3
1557: ARRAY
1558: PUSH
1559: LD_INT 1
1561: ARRAY
1562: PPUSH
1563: LD_VAR 0 9
1567: PUSH
1568: LD_VAR 0 3
1572: ARRAY
1573: PUSH
1574: LD_INT 3
1576: ARRAY
1577: PPUSH
1578: LD_INT 10
1580: PPUSH
1581: CALL_OW 272
1585: PUSH
1586: LD_VAR 0 9
1590: PUSH
1591: LD_VAR 0 3
1595: ARRAY
1596: PUSH
1597: LD_INT 2
1599: ARRAY
1600: PPUSH
1601: LD_VAR 0 9
1605: PUSH
1606: LD_VAR 0 3
1610: ARRAY
1611: PUSH
1612: LD_INT 3
1614: ARRAY
1615: PPUSH
1616: LD_INT 10
1618: PPUSH
1619: CALL_OW 273
1623: PUSH
1624: EMPTY
1625: LIST
1626: LIST
1627: PPUSH
1628: CALL_OW 1
1632: ST_TO_ADDR
1633: GO 1530
1635: POP
1636: POP
// if baseLevel >= 1 then
1637: LD_VAR 0 8
1641: PUSH
1642: LD_INT 1
1644: GREATEREQUAL
1645: IFFALSE 1657
// mpDepots := startPos ;
1647: LD_ADDR_EXP 14
1651: PUSH
1652: LD_VAR 0 9
1656: ST_TO_ADDR
// if hasOil then
1657: LD_VAR 0 6
1661: IFFALSE 1744
// begin all := ( mpGameSettings [ 6 ] = 2 ) ;
1663: LD_ADDR_VAR 0 4
1667: PUSH
1668: LD_EXP 6
1672: PUSH
1673: LD_INT 6
1675: ARRAY
1676: PUSH
1677: LD_INT 2
1679: EQUAL
1680: ST_TO_ADDR
// mpOilDeposits := [ GetSourcesFromArea ( OilArea1 , all ) , GetSourcesFromArea ( OilArea2 , all ) , GetSourcesFromArea ( OilArea3 , all ) , GetSourcesFromArea ( OilArea4 , all ) ] ;
1681: LD_ADDR_EXP 12
1685: PUSH
1686: LD_INT 18
1688: PPUSH
1689: LD_VAR 0 4
1693: PPUSH
1694: CALL 51899 0 2
1698: PUSH
1699: LD_INT 19
1701: PPUSH
1702: LD_VAR 0 4
1706: PPUSH
1707: CALL 51899 0 2
1711: PUSH
1712: LD_INT 20
1714: PPUSH
1715: LD_VAR 0 4
1719: PPUSH
1720: CALL 51899 0 2
1724: PUSH
1725: LD_INT 21
1727: PPUSH
1728: LD_VAR 0 4
1732: PPUSH
1733: CALL 51899 0 2
1737: PUSH
1738: EMPTY
1739: LIST
1740: LIST
1741: LIST
1742: LIST
1743: ST_TO_ADDR
// end ; if hasSib then
1744: LD_VAR 0 7
1748: IFFALSE 1831
// begin all := ( mpGameSettings [ 7 ] = 2 ) ;
1750: LD_ADDR_VAR 0 4
1754: PUSH
1755: LD_EXP 6
1759: PUSH
1760: LD_INT 7
1762: ARRAY
1763: PUSH
1764: LD_INT 2
1766: EQUAL
1767: ST_TO_ADDR
// mpSibDeposits := [ GetSourcesFromArea ( SibArea1 , all ) , GetSourcesFromArea ( SibArea2 , all ) , GetSourcesFromArea ( SibArea3 , all ) , GetSourcesFromArea ( SibArea4 , all ) ] ;
1768: LD_ADDR_EXP 13
1772: PUSH
1773: LD_INT 22
1775: PPUSH
1776: LD_VAR 0 4
1780: PPUSH
1781: CALL 51899 0 2
1785: PUSH
1786: LD_INT 23
1788: PPUSH
1789: LD_VAR 0 4
1793: PPUSH
1794: CALL 51899 0 2
1798: PUSH
1799: LD_INT 24
1801: PPUSH
1802: LD_VAR 0 4
1806: PPUSH
1807: CALL 51899 0 2
1811: PUSH
1812: LD_INT 25
1814: PPUSH
1815: LD_VAR 0 4
1819: PPUSH
1820: CALL 51899 0 2
1824: PUSH
1825: EMPTY
1826: LIST
1827: LIST
1828: LIST
1829: LIST
1830: ST_TO_ADDR
// end ; PlaceTreesToArea ( BigForestArea , [ 21 , 22 , 24 , 21 , 22 , 24 , 38 , 39 ] , rand ( 500 , 570 ) , 50 , 2 ) ;
1831: LD_INT 1
1833: PPUSH
1834: LD_INT 21
1836: PUSH
1837: LD_INT 22
1839: PUSH
1840: LD_INT 24
1842: PUSH
1843: LD_INT 21
1845: PUSH
1846: LD_INT 22
1848: PUSH
1849: LD_INT 24
1851: PUSH
1852: LD_INT 38
1854: PUSH
1855: LD_INT 39
1857: PUSH
1858: EMPTY
1859: LIST
1860: LIST
1861: LIST
1862: LIST
1863: LIST
1864: LIST
1865: LIST
1866: LIST
1867: PPUSH
1868: LD_INT 500
1870: PPUSH
1871: LD_INT 570
1873: PPUSH
1874: CALL_OW 12
1878: PPUSH
1879: LD_INT 50
1881: PPUSH
1882: LD_INT 2
1884: PPUSH
1885: CALL_OW 352
// if baseLevel then
1889: LD_VAR 0 8
1893: IFFALSE 1905
// area := BushForestSmallArea else
1895: LD_ADDR_VAR 0 5
1899: PUSH
1900: LD_INT 4
1902: ST_TO_ADDR
1903: GO 1913
// area := BushForestBigArea ;
1905: LD_ADDR_VAR 0 5
1909: PUSH
1910: LD_INT 3
1912: ST_TO_ADDR
// PlaceTreesToArea ( area , [ 38 , 39 , 37 ] , rand ( 300 , 350 ) , 10 , 3 ) ;
1913: LD_VAR 0 5
1917: PPUSH
1918: LD_INT 38
1920: PUSH
1921: LD_INT 39
1923: PUSH
1924: LD_INT 37
1926: PUSH
1927: EMPTY
1928: LIST
1929: LIST
1930: LIST
1931: PPUSH
1932: LD_INT 300
1934: PPUSH
1935: LD_INT 350
1937: PPUSH
1938: CALL_OW 12
1942: PPUSH
1943: LD_INT 10
1945: PPUSH
1946: LD_INT 3
1948: PPUSH
1949: CALL_OW 352
// PlaceTreesToArea ( BigForestArea , [ 38 , 39 , 37 ] , 80 , 10 , 3 ) ;
1953: LD_INT 1
1955: PPUSH
1956: LD_INT 38
1958: PUSH
1959: LD_INT 39
1961: PUSH
1962: LD_INT 37
1964: PUSH
1965: EMPTY
1966: LIST
1967: LIST
1968: LIST
1969: PPUSH
1970: LD_INT 80
1972: PPUSH
1973: LD_INT 10
1975: PPUSH
1976: LD_INT 3
1978: PPUSH
1979: CALL_OW 352
// end ;
1983: LD_VAR 0 2
1987: RET
// every 0 0$2 marked mpActive do var i , x , tmp , time , areas , normalTime , delayTime , maxTime ;
1988: GO 1990
1990: DISABLE
1991: LD_INT 0
1993: PPUSH
1994: PPUSH
1995: PPUSH
1996: PPUSH
1997: PPUSH
1998: PPUSH
1999: PPUSH
2000: PPUSH
// begin if not mpShipments then
2001: LD_EXP 27
2005: NOT
2006: IFFALSE 2010
// exit ;
2008: GO 2441
// case mpShipments of 1 :
2010: LD_EXP 27
2014: PUSH
2015: LD_INT 1
2017: DOUBLE
2018: EQUAL
2019: IFTRUE 2023
2021: GO 2058
2023: POP
// begin time := 0 0$30 ;
2024: LD_ADDR_VAR 0 4
2028: PUSH
2029: LD_INT 1050
2031: ST_TO_ADDR
// normalTime := 0 0$30 ;
2032: LD_ADDR_VAR 0 6
2036: PUSH
2037: LD_INT 1050
2039: ST_TO_ADDR
// maxTime := 1 1$20 ;
2040: LD_ADDR_VAR 0 8
2044: PUSH
2045: LD_INT 2800
2047: ST_TO_ADDR
// delayTime := 0 0$5 ;
2048: LD_ADDR_VAR 0 7
2052: PUSH
2053: LD_INT 175
2055: ST_TO_ADDR
// end ; 2 :
2056: GO 2188
2058: LD_INT 2
2060: DOUBLE
2061: EQUAL
2062: IFTRUE 2066
2064: GO 2101
2066: POP
// begin time := 0 0$25 ;
2067: LD_ADDR_VAR 0 4
2071: PUSH
2072: LD_INT 875
2074: ST_TO_ADDR
// normalTime := 0 0$25 ;
2075: LD_ADDR_VAR 0 6
2079: PUSH
2080: LD_INT 875
2082: ST_TO_ADDR
// maxTime := 1 1$10 ;
2083: LD_ADDR_VAR 0 8
2087: PUSH
2088: LD_INT 2450
2090: ST_TO_ADDR
// delayTime := 0 0$4 ;
2091: LD_ADDR_VAR 0 7
2095: PUSH
2096: LD_INT 140
2098: ST_TO_ADDR
// end ; 3 :
2099: GO 2188
2101: LD_INT 3
2103: DOUBLE
2104: EQUAL
2105: IFTRUE 2109
2107: GO 2144
2109: POP
// begin time := 0 0$20 ;
2110: LD_ADDR_VAR 0 4
2114: PUSH
2115: LD_INT 700
2117: ST_TO_ADDR
// normalTime := 0 0$20 ;
2118: LD_ADDR_VAR 0 6
2122: PUSH
2123: LD_INT 700
2125: ST_TO_ADDR
// maxTime := 1 1$00 ;
2126: LD_ADDR_VAR 0 8
2130: PUSH
2131: LD_INT 2100
2133: ST_TO_ADDR
// delayTime := 0 0$3 ;
2134: LD_ADDR_VAR 0 7
2138: PUSH
2139: LD_INT 105
2141: ST_TO_ADDR
// end ; 4 :
2142: GO 2188
2144: LD_INT 4
2146: DOUBLE
2147: EQUAL
2148: IFTRUE 2152
2150: GO 2187
2152: POP
// begin time := 0 0$15 ;
2153: LD_ADDR_VAR 0 4
2157: PUSH
2158: LD_INT 525
2160: ST_TO_ADDR
// normalTime := 0 0$15 ;
2161: LD_ADDR_VAR 0 6
2165: PUSH
2166: LD_INT 525
2168: ST_TO_ADDR
// maxTime := 0 0$55 ;
2169: LD_ADDR_VAR 0 8
2173: PUSH
2174: LD_INT 1925
2176: ST_TO_ADDR
// delayTime := 0 0$2 ;
2177: LD_ADDR_VAR 0 7
2181: PUSH
2182: LD_INT 70
2184: ST_TO_ADDR
// end ; end ;
2185: GO 2188
2187: POP
// tmp := [ BaseArea1 , BaseArea2 , BaseArea3 , BaseArea4 ] ;
2188: LD_ADDR_VAR 0 3
2192: PUSH
2193: LD_INT 5
2195: PUSH
2196: LD_INT 7
2198: PUSH
2199: LD_INT 6
2201: PUSH
2202: LD_INT 8
2204: PUSH
2205: EMPTY
2206: LIST
2207: LIST
2208: LIST
2209: LIST
2210: ST_TO_ADDR
// areas := [ Center1 , Center2 , Center3 , Center4 ] ;
2211: LD_ADDR_VAR 0 5
2215: PUSH
2216: LD_INT 26
2218: PUSH
2219: LD_INT 27
2221: PUSH
2222: LD_INT 29
2224: PUSH
2225: LD_INT 28
2227: PUSH
2228: EMPTY
2229: LIST
2230: LIST
2231: LIST
2232: LIST
2233: ST_TO_ADDR
// for i := 1 to 8 do
2234: LD_ADDR_VAR 0 1
2238: PUSH
2239: DOUBLE
2240: LD_INT 1
2242: DEC
2243: ST_TO_ADDR
2244: LD_INT 8
2246: PUSH
2247: FOR_TO
2248: IFFALSE 2295
// begin if not mpSidePositions [ i ] then
2250: LD_EXP 7
2254: PUSH
2255: LD_VAR 0 1
2259: ARRAY
2260: NOT
2261: IFFALSE 2265
// continue ;
2263: GO 2247
// areas := areas ^ tmp [ mpSidePositions [ i ] ] ;
2265: LD_ADDR_VAR 0 5
2269: PUSH
2270: LD_VAR 0 5
2274: PUSH
2275: LD_VAR 0 3
2279: PUSH
2280: LD_EXP 7
2284: PUSH
2285: LD_VAR 0 1
2289: ARRAY
2290: ARRAY
2291: ADD
2292: ST_TO_ADDR
// end ;
2293: GO 2247
2295: POP
2296: POP
// x := 1 ;
2297: LD_ADDR_VAR 0 2
2301: PUSH
2302: LD_INT 1
2304: ST_TO_ADDR
// repeat wait ( time ) ;
2305: LD_VAR 0 4
2309: PPUSH
2310: CALL_OW 67
// x := Inc ( x ) ;
2314: LD_ADDR_VAR 0 2
2318: PUSH
2319: LD_VAR 0 2
2323: PPUSH
2324: CALL 48882 0 1
2328: ST_TO_ADDR
// if x > 5 then
2329: LD_VAR 0 2
2333: PUSH
2334: LD_INT 5
2336: GREATER
2337: IFFALSE 2347
// x := 1 ;
2339: LD_ADDR_VAR 0 2
2343: PUSH
2344: LD_INT 1
2346: ST_TO_ADDR
// for i in areas do
2347: LD_ADDR_VAR 0 1
2351: PUSH
2352: LD_VAR 0 5
2356: PUSH
2357: FOR_IN
2358: IFFALSE 2397
// begin if GetResourceArea ( i , mat_cans ) < 20 then
2360: LD_VAR 0 1
2364: PPUSH
2365: LD_INT 1
2367: PPUSH
2368: CALL_OW 287
2372: PUSH
2373: LD_INT 20
2375: LESS
2376: IFFALSE 2395
// begin CreateCratesArea ( x , i , true ) ;
2378: LD_VAR 0 2
2382: PPUSH
2383: LD_VAR 0 1
2387: PPUSH
2388: LD_INT 1
2390: PPUSH
2391: CALL_OW 55
// end ; end ;
2395: GO 2357
2397: POP
2398: POP
// time := time + delayTime ;
2399: LD_ADDR_VAR 0 4
2403: PUSH
2404: LD_VAR 0 4
2408: PUSH
2409: LD_VAR 0 7
2413: PLUS
2414: ST_TO_ADDR
// if time > maxTime then
2415: LD_VAR 0 4
2419: PUSH
2420: LD_VAR 0 8
2424: GREATER
2425: IFFALSE 2437
// time := normalTime ;
2427: LD_ADDR_VAR 0 4
2431: PUSH
2432: LD_VAR 0 6
2436: ST_TO_ADDR
// until false ;
2437: LD_INT 0
2439: IFFALSE 2305
// end ; end_of_file
2441: PPOPN 8
2443: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
2444: LD_VAR 0 1
2448: PPUSH
2449: CALL 52774 0 1
// Multiplayer_UnitDestroyed ( un ) ;
2453: LD_VAR 0 1
2457: PPUSH
2458: CALL 7638 0 1
// end ;
2462: PPOPN 1
2464: END
// on UnitKamikazed ( un ) do begin SOS_UnitKamikazed ( un ) ;
2465: LD_VAR 0 1
2469: PPUSH
2470: CALL 52791 0 1
// end ;
2474: PPOPN 1
2476: END
// on BuildingComplete ( b ) do Multiplayer_BuildingComplete ( b ) ;
2477: LD_VAR 0 1
2481: PPUSH
2482: CALL 8303 0 1
2486: PPOPN 1
2488: END
// on VehicleConstructed ( vehicle , factory ) do SOS_VehicleConstructed ( vehicle , factory ) ;
2489: LD_VAR 0 1
2493: PPUSH
2494: LD_VAR 0 2
2498: PPUSH
2499: CALL 52832 0 2
2503: PPOPN 2
2505: END
// on BuildingCaptured ( building , oldSide , unit ) do Multiplayer_BuildingCaptured ( building , oldSide , unit ) ; end_of_file
2506: LD_VAR 0 1
2510: PPUSH
2511: LD_VAR 0 2
2515: PPUSH
2516: LD_VAR 0 3
2520: PPUSH
2521: CALL 8356 0 3
2525: PPOPN 3
2527: END
// export mpGameType , mpGameSettingsKeys , mpGameSettingsValues , mpGameSettings , mpSidePositions , mpSideTeams , mpSideNations , mpTeams , mpTeamGame , mpOilDeposits , mpSibDeposits , mpDepots , mpStartingResources , mpSharedVision , mpBuildings , mpMarkedAreas , mpBuildUpAreas , mpBuildUpTime , mpStartPos , mpBattleFlag , mpBattleFlags , mpPeopleAmount , mpPeopleSkill , mpSibDetection , mpShipments , mpSibBomb , mpMapSize , mpApemans , mpApemansArea , mpApePosIndex , mpRespawn , mpKingArea , mpPoints , mpVehicles , mpEmissions , mpDisplayStrings , mpGameActive , mpRespawnPull , mpGlobalOilDeposits , mpGlobalSibDeposits , mpTeleports , mpArtifacts , mpBlockRespThread ; export function InitMultiplayer ; var i ; begin
2528: LD_INT 0
2530: PPUSH
2531: PPUSH
// disable ( mpActive ) ;
2532: LD_INT 100
2534: DISABLE_MARKED
// disable ( mpWin ) ;
2535: LD_INT 101
2537: DISABLE_MARKED
// disable ( mpLose ) ;
2538: LD_INT 102
2540: DISABLE_MARKED
// mpGameType := 0 ;
2541: LD_ADDR_EXP 3
2545: PUSH
2546: LD_INT 0
2548: ST_TO_ADDR
// mpGameSettings := [ ] ;
2549: LD_ADDR_EXP 6
2553: PUSH
2554: EMPTY
2555: ST_TO_ADDR
// mpGameSettingsKeys := [ ] ;
2556: LD_ADDR_EXP 4
2560: PUSH
2561: EMPTY
2562: ST_TO_ADDR
// mpGameSettingsValues := [ ] ;
2563: LD_ADDR_EXP 5
2567: PUSH
2568: EMPTY
2569: ST_TO_ADDR
// mpMapSize := [ 2 , 2 ] ;
2570: LD_ADDR_EXP 29
2574: PUSH
2575: LD_INT 2
2577: PUSH
2578: LD_INT 2
2580: PUSH
2581: EMPTY
2582: LIST
2583: LIST
2584: ST_TO_ADDR
// mpOilDeposits := [ ] ;
2585: LD_ADDR_EXP 12
2589: PUSH
2590: EMPTY
2591: ST_TO_ADDR
// mpSibDeposits := [ ] ;
2592: LD_ADDR_EXP 13
2596: PUSH
2597: EMPTY
2598: ST_TO_ADDR
// mpGlobalOilDeposits := [ ] ;
2599: LD_ADDR_EXP 41
2603: PUSH
2604: EMPTY
2605: ST_TO_ADDR
// mpGlobalSibDeposits := [ ] ;
2606: LD_ADDR_EXP 42
2610: PUSH
2611: EMPTY
2612: ST_TO_ADDR
// mpDepots := [ ] ;
2613: LD_ADDR_EXP 14
2617: PUSH
2618: EMPTY
2619: ST_TO_ADDR
// mpBuildings := [ ] ;
2620: LD_ADDR_EXP 17
2624: PUSH
2625: EMPTY
2626: ST_TO_ADDR
// mpMarkedAreas := [ ] ;
2627: LD_ADDR_EXP 18
2631: PUSH
2632: EMPTY
2633: ST_TO_ADDR
// mpBuildUpAreas := [ ] ;
2634: LD_ADDR_EXP 19
2638: PUSH
2639: EMPTY
2640: ST_TO_ADDR
// mpBuildUpTime := [ ] ;
2641: LD_ADDR_EXP 20
2645: PUSH
2646: EMPTY
2647: ST_TO_ADDR
// mpStartingResources := [ ] ;
2648: LD_ADDR_EXP 15
2652: PUSH
2653: EMPTY
2654: ST_TO_ADDR
// mpStartPos := [ ] ;
2655: LD_ADDR_EXP 21
2659: PUSH
2660: EMPTY
2661: ST_TO_ADDR
// mpBattleFlag := - 1 ;
2662: LD_ADDR_EXP 22
2666: PUSH
2667: LD_INT 1
2669: NEG
2670: ST_TO_ADDR
// mpBattleFlags := [ ] ;
2671: LD_ADDR_EXP 23
2675: PUSH
2676: EMPTY
2677: ST_TO_ADDR
// mpApemans := [ ] ;
2678: LD_ADDR_EXP 30
2682: PUSH
2683: EMPTY
2684: ST_TO_ADDR
// mpApemansArea := [ ] ;
2685: LD_ADDR_EXP 31
2689: PUSH
2690: EMPTY
2691: ST_TO_ADDR
// mpRespawn := [ ] ;
2692: LD_ADDR_EXP 33
2696: PUSH
2697: EMPTY
2698: ST_TO_ADDR
// mpKingArea := 0 ;
2699: LD_ADDR_EXP 34
2703: PUSH
2704: LD_INT 0
2706: ST_TO_ADDR
// mpPoints := [ ] ;
2707: LD_ADDR_EXP 35
2711: PUSH
2712: EMPTY
2713: ST_TO_ADDR
// mpVehicles := 0 ;
2714: LD_ADDR_EXP 36
2718: PUSH
2719: LD_INT 0
2721: ST_TO_ADDR
// mpShipments := 0 ;
2722: LD_ADDR_EXP 27
2726: PUSH
2727: LD_INT 0
2729: ST_TO_ADDR
// mpRespawnPull := [ [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
2730: LD_ADDR_EXP 40
2734: PUSH
2735: EMPTY
2736: PUSH
2737: EMPTY
2738: PUSH
2739: EMPTY
2740: PUSH
2741: EMPTY
2742: PUSH
2743: EMPTY
2744: PUSH
2745: EMPTY
2746: PUSH
2747: EMPTY
2748: PUSH
2749: EMPTY
2750: PUSH
2751: EMPTY
2752: LIST
2753: LIST
2754: LIST
2755: LIST
2756: LIST
2757: LIST
2758: LIST
2759: LIST
2760: ST_TO_ADDR
// mpApePosIndex := [ [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
2761: LD_ADDR_EXP 32
2765: PUSH
2766: EMPTY
2767: PUSH
2768: EMPTY
2769: PUSH
2770: EMPTY
2771: PUSH
2772: EMPTY
2773: PUSH
2774: EMPTY
2775: PUSH
2776: EMPTY
2777: PUSH
2778: EMPTY
2779: PUSH
2780: EMPTY
2781: PUSH
2782: EMPTY
2783: LIST
2784: LIST
2785: LIST
2786: LIST
2787: LIST
2788: LIST
2789: LIST
2790: LIST
2791: ST_TO_ADDR
// mpEmissions := 0 ;
2792: LD_ADDR_EXP 37
2796: PUSH
2797: LD_INT 0
2799: ST_TO_ADDR
// mpTeleports := 0 ;
2800: LD_ADDR_EXP 43
2804: PUSH
2805: LD_INT 0
2807: ST_TO_ADDR
// mpArtifacts := 0 ;
2808: LD_ADDR_EXP 44
2812: PUSH
2813: LD_INT 0
2815: ST_TO_ADDR
// mpPeopleSkill := 3 ;
2816: LD_ADDR_EXP 25
2820: PUSH
2821: LD_INT 3
2823: ST_TO_ADDR
// mpPeopleAmount := 15 ;
2824: LD_ADDR_EXP 24
2828: PUSH
2829: LD_INT 15
2831: ST_TO_ADDR
// mpDisplayStrings := 0 ;
2832: LD_ADDR_EXP 38
2836: PUSH
2837: LD_INT 0
2839: ST_TO_ADDR
// mpGameActive := false ;
2840: LD_ADDR_EXP 39
2844: PUSH
2845: LD_INT 0
2847: ST_TO_ADDR
// mpBlockRespThread := false ;
2848: LD_ADDR_EXP 45
2852: PUSH
2853: LD_INT 0
2855: ST_TO_ADDR
// for i := 1 to 32 do
2856: LD_ADDR_VAR 0 2
2860: PUSH
2861: DOUBLE
2862: LD_INT 1
2864: DEC
2865: ST_TO_ADDR
2866: LD_INT 32
2868: PUSH
2869: FOR_TO
2870: IFFALSE 2897
// mpGameSettings := Replace ( mpGameSettings , i , 0 ) ;
2872: LD_ADDR_EXP 6
2876: PUSH
2877: LD_EXP 6
2881: PPUSH
2882: LD_VAR 0 2
2886: PPUSH
2887: LD_INT 0
2889: PPUSH
2890: CALL_OW 1
2894: ST_TO_ADDR
2895: GO 2869
2897: POP
2898: POP
// end ;
2899: LD_VAR 0 1
2903: RET
// export function StartMultiplayer ; var i , j , b , x , y , side , pos , nation , ape , team , setting , resources , gameTypes ; begin
2904: LD_INT 0
2906: PPUSH
2907: PPUSH
2908: PPUSH
2909: PPUSH
2910: PPUSH
2911: PPUSH
2912: PPUSH
2913: PPUSH
2914: PPUSH
2915: PPUSH
2916: PPUSH
2917: PPUSH
2918: PPUSH
2919: PPUSH
// gameTypes := [ GameTypeNormal , GameTypeSurvival , GameTypeKing , GameTypeFamine ] ;
2920: LD_ADDR_VAR 0 14
2924: PUSH
2925: LD_INT 1
2927: PUSH
2928: LD_INT 2
2930: PUSH
2931: LD_INT 3
2933: PUSH
2934: LD_INT 5
2936: PUSH
2937: EMPTY
2938: LIST
2939: LIST
2940: LIST
2941: LIST
2942: ST_TO_ADDR
// for i in gameTypes do
2943: LD_ADDR_VAR 0 2
2947: PUSH
2948: LD_VAR 0 14
2952: PUSH
2953: FOR_IN
2954: IFFALSE 2963
// disable ( i ) ;
2956: LD_VAR 0 2
2960: DISABLE_MARKED
2961: GO 2953
2963: POP
2964: POP
// if Multiplayer then
2965: LD_OWVAR 4
2969: IFFALSE 3153
// begin mpGameType := mp_game_type ;
2971: LD_ADDR_EXP 3
2975: PUSH
2976: LD_OWVAR 6
2980: ST_TO_ADDR
// your_side := mp_player_side ;
2981: LD_ADDR_OWVAR 2
2985: PUSH
2986: LD_OWVAR 7
2990: ST_TO_ADDR
// mpSidePositions := mp_sides_positions ;
2991: LD_ADDR_EXP 7
2995: PUSH
2996: LD_OWVAR 17
3000: ST_TO_ADDR
// mpSideTeams := mp_sides_teams ;
3001: LD_ADDR_EXP 8
3005: PUSH
3006: LD_OWVAR 15
3010: ST_TO_ADDR
// mpSideNations := mp_sides_nations ;
3011: LD_ADDR_EXP 9
3015: PUSH
3016: LD_OWVAR 16
3020: ST_TO_ADDR
// mpTeams := mp_teams ;
3021: LD_ADDR_EXP 10
3025: PUSH
3026: LD_OWVAR 12
3030: ST_TO_ADDR
// for i := 1 to Count ( mpGameSettingsKeys ) do
3031: LD_ADDR_VAR 0 2
3035: PUSH
3036: DOUBLE
3037: LD_INT 1
3039: DEC
3040: ST_TO_ADDR
3041: LD_EXP 4
3045: PPUSH
3046: CALL 11912 0 1
3050: PUSH
3051: FOR_TO
3052: IFFALSE 3128
// begin setting := mpGameSettingsKeys [ i ] ;
3054: LD_ADDR_VAR 0 12
3058: PUSH
3059: LD_EXP 4
3063: PUSH
3064: LD_VAR 0 2
3068: ARRAY
3069: ST_TO_ADDR
// if setting then
3070: LD_VAR 0 12
3074: IFFALSE 3126
// mpGameSettings := Replace ( mpGameSettings , i , mpGameSettingsValues [ i ] [ GetMultiplayerSetting ( i - 1 ) + 1 ] ) ;
3076: LD_ADDR_EXP 6
3080: PUSH
3081: LD_EXP 6
3085: PPUSH
3086: LD_VAR 0 2
3090: PPUSH
3091: LD_EXP 5
3095: PUSH
3096: LD_VAR 0 2
3100: ARRAY
3101: PUSH
3102: LD_VAR 0 2
3106: PUSH
3107: LD_INT 1
3109: MINUS
3110: PPUSH
3111: CALL_OW 426
3115: PUSH
3116: LD_INT 1
3118: PLUS
3119: ARRAY
3120: PPUSH
3121: CALL_OW 1
3125: ST_TO_ADDR
// end ;
3126: GO 3051
3128: POP
3129: POP
// mpTeamGame := ( mpSideTeams diff [ 0 ] ) > 1 ;
3130: LD_ADDR_EXP 11
3134: PUSH
3135: LD_EXP 8
3139: PUSH
3140: LD_INT 0
3142: PUSH
3143: EMPTY
3144: LIST
3145: DIFF
3146: PUSH
3147: LD_INT 1
3149: GREATER
3150: ST_TO_ADDR
// end else
3151: GO 3153
// begin end ; GetMultiplayerMapData ( mpGameType ) ;
3153: LD_EXP 3
3157: PPUSH
3158: CALL 826 0 1
// if Count ( mpMarkedAreas ) then
3162: LD_EXP 18
3166: PPUSH
3167: CALL 11912 0 1
3171: IFFALSE 3202
// begin for i in mpMarkedAreas do
3173: LD_ADDR_VAR 0 2
3177: PUSH
3178: LD_EXP 18
3182: PUSH
3183: FOR_IN
3184: IFFALSE 3200
// SetAreaMapShow ( i , 0 ) ;
3186: LD_VAR 0 2
3190: PPUSH
3191: LD_INT 0
3193: PPUSH
3194: CALL_OW 424
3198: GO 3183
3200: POP
3201: POP
// end ; for i := 1 to 8 do
3202: LD_ADDR_VAR 0 2
3206: PUSH
3207: DOUBLE
3208: LD_INT 1
3210: DEC
3211: ST_TO_ADDR
3212: LD_INT 8
3214: PUSH
3215: FOR_TO
3216: IFFALSE 4550
// begin if not mpSidePositions [ i ] then
3218: LD_EXP 7
3222: PUSH
3223: LD_VAR 0 2
3227: ARRAY
3228: NOT
3229: IFFALSE 3233
// continue ;
3231: GO 3215
// side := i ;
3233: LD_ADDR_VAR 0 7
3237: PUSH
3238: LD_VAR 0 2
3242: ST_TO_ADDR
// nation := mpSideNations [ i ] ;
3243: LD_ADDR_VAR 0 9
3247: PUSH
3248: LD_EXP 9
3252: PUSH
3253: LD_VAR 0 2
3257: ARRAY
3258: ST_TO_ADDR
// pos := mpSidePositions [ i ] ;
3259: LD_ADDR_VAR 0 8
3263: PUSH
3264: LD_EXP 7
3268: PUSH
3269: LD_VAR 0 2
3273: ARRAY
3274: ST_TO_ADDR
// if Count ( mpOilDeposits ) then
3275: LD_EXP 12
3279: PPUSH
3280: CALL 11912 0 1
3284: IFFALSE 3361
// begin for j in mpOilDeposits [ pos ] do
3286: LD_ADDR_VAR 0 3
3290: PUSH
3291: LD_EXP 12
3295: PUSH
3296: LD_VAR 0 8
3300: ARRAY
3301: PUSH
3302: FOR_IN
3303: IFFALSE 3359
// begin CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_oil ) ;
3305: LD_VAR 0 3
3309: PUSH
3310: LD_INT 1
3312: ARRAY
3313: PPUSH
3314: LD_VAR 0 3
3318: PUSH
3319: LD_INT 2
3321: ARRAY
3322: PPUSH
3323: LD_INT 2
3325: PPUSH
3326: CALL_OW 62
// SetResourceVisibility ( j [ 1 ] , j [ 2 ] , side ) ;
3330: LD_VAR 0 3
3334: PUSH
3335: LD_INT 1
3337: ARRAY
3338: PPUSH
3339: LD_VAR 0 3
3343: PUSH
3344: LD_INT 2
3346: ARRAY
3347: PPUSH
3348: LD_VAR 0 7
3352: PPUSH
3353: CALL_OW 441
// end ;
3357: GO 3302
3359: POP
3360: POP
// end ; if Count ( mpSibDeposits ) then
3361: LD_EXP 13
3365: PPUSH
3366: CALL 11912 0 1
3370: IFFALSE 3447
// begin for j in mpSibDeposits [ pos ] do
3372: LD_ADDR_VAR 0 3
3376: PUSH
3377: LD_EXP 13
3381: PUSH
3382: LD_VAR 0 8
3386: ARRAY
3387: PUSH
3388: FOR_IN
3389: IFFALSE 3445
// begin CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_siberit ) ;
3391: LD_VAR 0 3
3395: PUSH
3396: LD_INT 1
3398: ARRAY
3399: PPUSH
3400: LD_VAR 0 3
3404: PUSH
3405: LD_INT 2
3407: ARRAY
3408: PPUSH
3409: LD_INT 3
3411: PPUSH
3412: CALL_OW 62
// SetResourceVisibility ( j [ 1 ] , j [ 2 ] , side ) ;
3416: LD_VAR 0 3
3420: PUSH
3421: LD_INT 1
3423: ARRAY
3424: PPUSH
3425: LD_VAR 0 3
3429: PUSH
3430: LD_INT 2
3432: ARRAY
3433: PPUSH
3434: LD_VAR 0 7
3438: PPUSH
3439: CALL_OW 441
// end ;
3443: GO 3388
3445: POP
3446: POP
// end ; InitBc ;
3447: CALL_OW 21
// InitUc ;
3451: CALL_OW 18
// uc_side := side ;
3455: LD_ADDR_OWVAR 20
3459: PUSH
3460: LD_VAR 0 7
3464: ST_TO_ADDR
// uc_nation := nation ;
3465: LD_ADDR_OWVAR 21
3469: PUSH
3470: LD_VAR 0 9
3474: ST_TO_ADDR
// if mpBattleFlag > - 1 then
3475: LD_EXP 22
3479: PUSH
3480: LD_INT 1
3482: NEG
3483: GREATER
3484: IFFALSE 3643
// begin x := mpStartPos [ pos ] [ 1 ] ;
3486: LD_ADDR_VAR 0 5
3490: PUSH
3491: LD_EXP 21
3495: PUSH
3496: LD_VAR 0 8
3500: ARRAY
3501: PUSH
3502: LD_INT 1
3504: ARRAY
3505: ST_TO_ADDR
// y := mpStartPos [ pos ] [ 2 ] ;
3506: LD_ADDR_VAR 0 6
3510: PUSH
3511: LD_EXP 21
3515: PUSH
3516: LD_VAR 0 8
3520: ARRAY
3521: PUSH
3522: LD_INT 2
3524: ARRAY
3525: ST_TO_ADDR
// PlaceEnvironment ( x , y , 12 , 2 ) ;
3526: LD_VAR 0 5
3530: PPUSH
3531: LD_VAR 0 6
3535: PPUSH
3536: LD_INT 12
3538: PPUSH
3539: LD_INT 2
3541: PPUSH
3542: CALL_OW 349
// mpBattleFlags := Replace ( mpBattleFlags , side , SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 70 ] , [ bfo_defend_bonus_building , 40 ] , [ bfo_range , 25 ] , [ bfo_height , 100 ] ] ) ) ;
3546: LD_ADDR_EXP 23
3550: PUSH
3551: LD_EXP 23
3555: PPUSH
3556: LD_VAR 0 7
3560: PPUSH
3561: LD_VAR 0 7
3565: PPUSH
3566: LD_VAR 0 5
3570: PPUSH
3571: LD_VAR 0 6
3575: PPUSH
3576: LD_INT 1
3578: PUSH
3579: LD_INT 100
3581: PUSH
3582: EMPTY
3583: LIST
3584: LIST
3585: PUSH
3586: LD_INT 2
3588: PUSH
3589: LD_INT 70
3591: PUSH
3592: EMPTY
3593: LIST
3594: LIST
3595: PUSH
3596: LD_INT 3
3598: PUSH
3599: LD_INT 40
3601: PUSH
3602: EMPTY
3603: LIST
3604: LIST
3605: PUSH
3606: LD_INT 10
3608: PUSH
3609: LD_INT 25
3611: PUSH
3612: EMPTY
3613: LIST
3614: LIST
3615: PUSH
3616: LD_INT 20
3618: PUSH
3619: LD_INT 100
3621: PUSH
3622: EMPTY
3623: LIST
3624: LIST
3625: PUSH
3626: EMPTY
3627: LIST
3628: LIST
3629: LIST
3630: LIST
3631: LIST
3632: PPUSH
3633: CALL_OW 418
3637: PPUSH
3638: CALL_OW 1
3642: ST_TO_ADDR
// end ; if Count ( mpDepots ) then
3643: LD_EXP 14
3647: PPUSH
3648: CALL 11912 0 1
3652: IFFALSE 3836
// begin if mpGameType = GameTypeSurvival then
3654: LD_EXP 3
3658: PUSH
3659: LD_INT 2
3661: EQUAL
3662: IFFALSE 3682
// begin bc_level := 10 ;
3664: LD_ADDR_OWVAR 43
3668: PUSH
3669: LD_INT 10
3671: ST_TO_ADDR
// bc_type := b_warehouse ;
3672: LD_ADDR_OWVAR 42
3676: PUSH
3677: LD_INT 1
3679: ST_TO_ADDR
// end else
3680: GO 3698
// begin bc_level := 0 ;
3682: LD_ADDR_OWVAR 43
3686: PUSH
3687: LD_INT 0
3689: ST_TO_ADDR
// bc_type := b_depot ;
3690: LD_ADDR_OWVAR 42
3694: PUSH
3695: LD_INT 0
3697: ST_TO_ADDR
// end ; b := CreateAndPlaceBuildingXYD ( mpDepots [ pos ] [ 1 ] , mpDepots [ pos ] [ 2 ] , mpDepots [ pos ] [ 3 ] ) ;
3698: LD_ADDR_VAR 0 4
3702: PUSH
3703: LD_EXP 14
3707: PUSH
3708: LD_VAR 0 8
3712: ARRAY
3713: PUSH
3714: LD_INT 1
3716: ARRAY
3717: PPUSH
3718: LD_EXP 14
3722: PUSH
3723: LD_VAR 0 8
3727: ARRAY
3728: PUSH
3729: LD_INT 2
3731: ARRAY
3732: PPUSH
3733: LD_EXP 14
3737: PUSH
3738: LD_VAR 0 8
3742: ARRAY
3743: PUSH
3744: LD_INT 3
3746: ARRAY
3747: PPUSH
3748: CALL_OW 47
3752: ST_TO_ADDR
// SetBName ( b , @ & side ) ;
3753: LD_VAR 0 4
3757: PPUSH
3758: LD_STRING @
3760: PUSH
3761: LD_VAR 0 7
3765: STR
3766: PPUSH
3767: CALL_OW 500
// if Count ( mpStartingResources ) then
3771: LD_EXP 15
3775: PPUSH
3776: CALL 11912 0 1
3780: IFFALSE 3834
// begin for j := 1 to mpStartingResources do
3782: LD_ADDR_VAR 0 3
3786: PUSH
3787: DOUBLE
3788: LD_INT 1
3790: DEC
3791: ST_TO_ADDR
3792: LD_EXP 15
3796: PUSH
3797: FOR_TO
3798: IFFALSE 3832
// SetResourceType ( GetBase ( b ) , j , mpStartingResources [ j ] ) ;
3800: LD_VAR 0 4
3804: PPUSH
3805: CALL_OW 274
3809: PPUSH
3810: LD_VAR 0 3
3814: PPUSH
3815: LD_EXP 15
3819: PUSH
3820: LD_VAR 0 3
3824: ARRAY
3825: PPUSH
3826: CALL_OW 277
3830: GO 3797
3832: POP
3833: POP
// end ; end else
3834: GO 4043
// if Count ( mpStartingResources ) then
3836: LD_EXP 15
3840: PPUSH
3841: CALL 11912 0 1
3845: IFFALSE 4043
// begin x := mpStartPos [ pos ] [ 1 ] ;
3847: LD_ADDR_VAR 0 5
3851: PUSH
3852: LD_EXP 21
3856: PUSH
3857: LD_VAR 0 8
3861: ARRAY
3862: PUSH
3863: LD_INT 1
3865: ARRAY
3866: ST_TO_ADDR
// y := mpStartPos [ pos ] [ 2 ] ;
3867: LD_ADDR_VAR 0 6
3871: PUSH
3872: LD_EXP 21
3876: PUSH
3877: LD_VAR 0 8
3881: ARRAY
3882: PUSH
3883: LD_INT 2
3885: ARRAY
3886: ST_TO_ADDR
// for j := 1 to mpStartingResources do
3887: LD_ADDR_VAR 0 3
3891: PUSH
3892: DOUBLE
3893: LD_INT 1
3895: DEC
3896: ST_TO_ADDR
3897: LD_EXP 15
3901: PUSH
3902: FOR_TO
3903: IFFALSE 4041
// begin resources := mpStartingResources [ j ] ;
3905: LD_ADDR_VAR 0 13
3909: PUSH
3910: LD_EXP 15
3914: PUSH
3915: LD_VAR 0 3
3919: ARRAY
3920: ST_TO_ADDR
// if resources = 0 then
3921: LD_VAR 0 13
3925: PUSH
3926: LD_INT 0
3928: EQUAL
3929: IFFALSE 3933
// continue ;
3931: GO 3902
// repeat if resources >= 50 then
3933: LD_VAR 0 13
3937: PUSH
3938: LD_INT 50
3940: GREATEREQUAL
3941: IFFALSE 3987
// begin CreateResourcesXYR ( j , 5 , x , y , 6 , false ) ;
3943: LD_VAR 0 3
3947: PPUSH
3948: LD_INT 5
3950: PPUSH
3951: LD_VAR 0 5
3955: PPUSH
3956: LD_VAR 0 6
3960: PPUSH
3961: LD_INT 6
3963: PPUSH
3964: LD_INT 0
3966: PPUSH
3967: CALL_OW 60
// resources := resources - 50 ;
3971: LD_ADDR_VAR 0 13
3975: PUSH
3976: LD_VAR 0 13
3980: PUSH
3981: LD_INT 50
3983: MINUS
3984: ST_TO_ADDR
// end else
3985: GO 4029
// begin CreateResourcesXYR ( j , resources div 10 , x , y , 6 , false ) ;
3987: LD_VAR 0 3
3991: PPUSH
3992: LD_VAR 0 13
3996: PUSH
3997: LD_INT 10
3999: DIV
4000: PPUSH
4001: LD_VAR 0 5
4005: PPUSH
4006: LD_VAR 0 6
4010: PPUSH
4011: LD_INT 6
4013: PPUSH
4014: LD_INT 0
4016: PPUSH
4017: CALL_OW 60
// resources := 0 ;
4021: LD_ADDR_VAR 0 13
4025: PUSH
4026: LD_INT 0
4028: ST_TO_ADDR
// end ; until resources <= 0 ;
4029: LD_VAR 0 13
4033: PUSH
4034: LD_INT 0
4036: LESSEQUAL
4037: IFFALSE 3933
// end ;
4039: GO 3902
4041: POP
4042: POP
// end ; if Count ( mpBuildings ) then
4043: LD_EXP 17
4047: PPUSH
4048: CALL 11912 0 1
4052: IFFALSE 4130
// begin for j in mpBuildings [ pos ] do
4054: LD_ADDR_VAR 0 3
4058: PUSH
4059: LD_EXP 17
4063: PUSH
4064: LD_VAR 0 8
4068: ARRAY
4069: PUSH
4070: FOR_IN
4071: IFFALSE 4128
// begin bc_level := 0 ;
4073: LD_ADDR_OWVAR 43
4077: PUSH
4078: LD_INT 0
4080: ST_TO_ADDR
// bc_type := j [ 1 ] ;
4081: LD_ADDR_OWVAR 42
4085: PUSH
4086: LD_VAR 0 3
4090: PUSH
4091: LD_INT 1
4093: ARRAY
4094: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( j [ 2 ] , j [ 3 ] , j [ 4 ] ) ;
4095: LD_VAR 0 3
4099: PUSH
4100: LD_INT 2
4102: ARRAY
4103: PPUSH
4104: LD_VAR 0 3
4108: PUSH
4109: LD_INT 3
4111: ARRAY
4112: PPUSH
4113: LD_VAR 0 3
4117: PUSH
4118: LD_INT 4
4120: ARRAY
4121: PPUSH
4122: CALL_OW 47
// end ;
4126: GO 4070
4128: POP
4129: POP
// end ; if mpSibDetection and GetTech ( tech_sibdet , side ) = state_enabled then
4130: LD_EXP 26
4134: PUSH
4135: LD_INT 20
4137: PPUSH
4138: LD_VAR 0 7
4142: PPUSH
4143: CALL_OW 321
4147: PUSH
4148: LD_INT 1
4150: EQUAL
4151: AND
4152: IFFALSE 4169
// SetTech ( tech_SibDet , side , state_researched ) ;
4154: LD_INT 20
4156: PPUSH
4157: LD_VAR 0 7
4161: PPUSH
4162: LD_INT 2
4164: PPUSH
4165: CALL_OW 322
// if not mpArtifacts then
4169: LD_EXP 44
4173: NOT
4174: IFFALSE 4191
// SetTech ( tech_artifact , side , state_disabled ) ;
4176: LD_INT 24
4178: PPUSH
4179: LD_VAR 0 7
4183: PPUSH
4184: LD_INT 0
4186: PPUSH
4187: CALL_OW 322
// if mpSibBomb = 1 then
4191: LD_EXP 28
4195: PUSH
4196: LD_INT 1
4198: EQUAL
4199: IFFALSE 4218
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
4201: LD_INT 25
4203: PPUSH
4204: LD_VAR 0 7
4208: PPUSH
4209: LD_INT 1
4211: PPUSH
4212: CALL_OW 322
// end else
4216: GO 4233
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
4218: LD_INT 25
4220: PPUSH
4221: LD_VAR 0 7
4225: PPUSH
4226: LD_INT 0
4228: PPUSH
4229: CALL_OW 322
// end ; if mpVehicles then
4233: LD_EXP 36
4237: IFFALSE 4336
// begin for j in mpPrepareVehicles ( side , nation , mpVehicles ) do
4239: LD_ADDR_VAR 0 3
4243: PUSH
4244: LD_VAR 0 7
4248: PPUSH
4249: LD_VAR 0 9
4253: PPUSH
4254: LD_EXP 36
4258: PPUSH
4259: CALL 5460 0 3
4263: PUSH
4264: FOR_IN
4265: IFFALSE 4334
// begin SetDir ( j , rand ( 0 , 5 ) ) ;
4267: LD_VAR 0 3
4271: PPUSH
4272: LD_INT 0
4274: PPUSH
4275: LD_INT 5
4277: PPUSH
4278: CALL_OW 12
4282: PPUSH
4283: CALL_OW 233
// PlaceUnitXYR ( j , mpStartPos [ pos ] [ 1 ] , mpStartPos [ pos ] [ 2 ] , 12 , false ) ;
4287: LD_VAR 0 3
4291: PPUSH
4292: LD_EXP 21
4296: PUSH
4297: LD_VAR 0 8
4301: ARRAY
4302: PUSH
4303: LD_INT 1
4305: ARRAY
4306: PPUSH
4307: LD_EXP 21
4311: PUSH
4312: LD_VAR 0 8
4316: ARRAY
4317: PUSH
4318: LD_INT 2
4320: ARRAY
4321: PPUSH
4322: LD_INT 12
4324: PPUSH
4325: LD_INT 0
4327: PPUSH
4328: CALL_OW 50
// end ;
4332: GO 4264
4334: POP
4335: POP
// end ; uc_nation := nation ;
4336: LD_ADDR_OWVAR 21
4340: PUSH
4341: LD_VAR 0 9
4345: ST_TO_ADDR
// team := mpPrepareTeam ( side , nation , mpPeopleAmount , mpPeopleSkill ) ;
4346: LD_ADDR_VAR 0 11
4350: PUSH
4351: LD_VAR 0 7
4355: PPUSH
4356: LD_VAR 0 9
4360: PPUSH
4361: LD_EXP 24
4365: PPUSH
4366: LD_EXP 25
4370: PPUSH
4371: CALL 4962 0 4
4375: ST_TO_ADDR
// for j in team do
4376: LD_ADDR_VAR 0 3
4380: PUSH
4381: LD_VAR 0 11
4385: PUSH
4386: FOR_IN
4387: IFFALSE 4436
// PlaceUnitXYR ( j , mpStartPos [ pos ] [ 1 ] , mpStartPos [ pos ] [ 2 ] , 12 , false ) ;
4389: LD_VAR 0 3
4393: PPUSH
4394: LD_EXP 21
4398: PUSH
4399: LD_VAR 0 8
4403: ARRAY
4404: PUSH
4405: LD_INT 1
4407: ARRAY
4408: PPUSH
4409: LD_EXP 21
4413: PUSH
4414: LD_VAR 0 8
4418: ARRAY
4419: PUSH
4420: LD_INT 2
4422: ARRAY
4423: PPUSH
4424: LD_INT 12
4426: PPUSH
4427: LD_INT 0
4429: PPUSH
4430: CALL_OW 50
4434: GO 4386
4436: POP
4437: POP
// if mpApemans then
4438: LD_EXP 30
4442: IFFALSE 4548
// begin for j := 1 to mpApemans do
4444: LD_ADDR_VAR 0 3
4448: PUSH
4449: DOUBLE
4450: LD_INT 1
4452: DEC
4453: ST_TO_ADDR
4454: LD_EXP 30
4458: PUSH
4459: FOR_TO
4460: IFFALSE 4546
// begin PrepareApeman ( - 5 ) ;
4462: LD_INT 5
4464: NEG
4465: PPUSH
4466: CALL 43769 0 1
// ape := CreateHuman ;
4470: LD_ADDR_VAR 0 10
4474: PUSH
4475: CALL_OW 44
4479: ST_TO_ADDR
// mpApePosIndex := Replace ( mpApePosIndex , pos , Join ( mpApePosIndex [ pos ] , ape ) ) ;
4480: LD_ADDR_EXP 32
4484: PUSH
4485: LD_EXP 32
4489: PPUSH
4490: LD_VAR 0 8
4494: PPUSH
4495: LD_EXP 32
4499: PUSH
4500: LD_VAR 0 8
4504: ARRAY
4505: PPUSH
4506: LD_VAR 0 10
4510: PPUSH
4511: CALL 47521 0 2
4515: PPUSH
4516: CALL_OW 1
4520: ST_TO_ADDR
// PlaceUnitArea ( ape , mpApemansArea [ pos ] , false ) ;
4521: LD_VAR 0 10
4525: PPUSH
4526: LD_EXP 31
4530: PUSH
4531: LD_VAR 0 8
4535: ARRAY
4536: PPUSH
4537: LD_INT 0
4539: PPUSH
4540: CALL_OW 49
// end ;
4544: GO 4459
4546: POP
4547: POP
// end ; end ;
4548: GO 3215
4550: POP
4551: POP
// if not mpTeamGame then
4552: LD_EXP 11
4556: NOT
4557: IFFALSE 4655
// begin for i := 1 to 8 do
4559: LD_ADDR_VAR 0 2
4563: PUSH
4564: DOUBLE
4565: LD_INT 1
4567: DEC
4568: ST_TO_ADDR
4569: LD_INT 8
4571: PUSH
4572: FOR_TO
4573: IFFALSE 4651
// for j := 1 to 8 do
4575: LD_ADDR_VAR 0 3
4579: PUSH
4580: DOUBLE
4581: LD_INT 1
4583: DEC
4584: ST_TO_ADDR
4585: LD_INT 8
4587: PUSH
4588: FOR_TO
4589: IFFALSE 4647
// if i <> j then
4591: LD_VAR 0 2
4595: PUSH
4596: LD_VAR 0 3
4600: NONEQUAL
4601: IFFALSE 4625
// SetAttitude ( i , j , att_neutral , true ) else
4603: LD_VAR 0 2
4607: PPUSH
4608: LD_VAR 0 3
4612: PPUSH
4613: LD_INT 0
4615: PPUSH
4616: LD_INT 1
4618: PPUSH
4619: CALL_OW 80
4623: GO 4645
// SetAttitude ( i , j , att_friend , true ) ;
4625: LD_VAR 0 2
4629: PPUSH
4630: LD_VAR 0 3
4634: PPUSH
4635: LD_INT 1
4637: PPUSH
4638: LD_INT 1
4640: PPUSH
4641: CALL_OW 80
4645: GO 4588
4647: POP
4648: POP
4649: GO 4572
4651: POP
4652: POP
// end else
4653: GO 4830
// begin if mpSharedVision then
4655: LD_EXP 16
4659: IFFALSE 4724
// begin for i in mpTeams do
4661: LD_ADDR_VAR 0 2
4665: PUSH
4666: LD_EXP 10
4670: PUSH
4671: FOR_IN
4672: IFFALSE 4722
// for j := 2 to i do
4674: LD_ADDR_VAR 0 3
4678: PUSH
4679: DOUBLE
4680: LD_INT 2
4682: DEC
4683: ST_TO_ADDR
4684: LD_VAR 0 2
4688: PUSH
4689: FOR_TO
4690: IFFALSE 4718
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
4692: LD_VAR 0 2
4696: PUSH
4697: LD_VAR 0 3
4701: ARRAY
4702: PPUSH
4703: LD_VAR 0 2
4707: PUSH
4708: LD_INT 1
4710: ARRAY
4711: PPUSH
4712: CALL_OW 343
4716: GO 4689
4718: POP
4719: POP
4720: GO 4671
4722: POP
4723: POP
// end ; for i := 1 to 8 do
4724: LD_ADDR_VAR 0 2
4728: PUSH
4729: DOUBLE
4730: LD_INT 1
4732: DEC
4733: ST_TO_ADDR
4734: LD_INT 8
4736: PUSH
4737: FOR_TO
4738: IFFALSE 4828
// for j := 1 to 8 do
4740: LD_ADDR_VAR 0 3
4744: PUSH
4745: DOUBLE
4746: LD_INT 1
4748: DEC
4749: ST_TO_ADDR
4750: LD_INT 8
4752: PUSH
4753: FOR_TO
4754: IFFALSE 4824
// if mpSideTeams [ i ] = mpSideTeams [ j ] then
4756: LD_EXP 8
4760: PUSH
4761: LD_VAR 0 2
4765: ARRAY
4766: PUSH
4767: LD_EXP 8
4771: PUSH
4772: LD_VAR 0 3
4776: ARRAY
4777: EQUAL
4778: IFFALSE 4802
// SetAttitude ( i , j , att_friend , true ) else
4780: LD_VAR 0 2
4784: PPUSH
4785: LD_VAR 0 3
4789: PPUSH
4790: LD_INT 1
4792: PPUSH
4793: LD_INT 1
4795: PPUSH
4796: CALL_OW 80
4800: GO 4822
// SetAttitude ( i , j , att_enemy , true ) ;
4802: LD_VAR 0 2
4806: PPUSH
4807: LD_VAR 0 3
4811: PPUSH
4812: LD_INT 2
4814: PPUSH
4815: LD_INT 1
4817: PPUSH
4818: CALL_OW 80
4822: GO 4753
4824: POP
4825: POP
4826: GO 4737
4828: POP
4829: POP
// end ; music_nat := mpSideNations [ your_side ] ;
4830: LD_ADDR_OWVAR 71
4834: PUSH
4835: LD_EXP 9
4839: PUSH
4840: LD_OWVAR 2
4844: ARRAY
4845: ST_TO_ADDR
// if IAmSpec then
4846: CALL_OW 531
4850: IFFALSE 4891
// begin FogOff ( true ) ;
4852: LD_INT 1
4854: PPUSH
4855: CALL_OW 344
// CenterNowOnXY ( mpMapSize [ 1 ] div 2 , mpMapSize [ 2 ] div 2 ) ;
4859: LD_EXP 29
4863: PUSH
4864: LD_INT 1
4866: ARRAY
4867: PUSH
4868: LD_INT 2
4870: DIV
4871: PPUSH
4872: LD_EXP 29
4876: PUSH
4877: LD_INT 2
4879: ARRAY
4880: PUSH
4881: LD_INT 2
4883: DIV
4884: PPUSH
4885: CALL_OW 86
// end else
4889: GO 4937
// begin CenterNowOnXY ( mpStartPos [ mpSidePositions [ your_side ] ] [ 1 ] , mpStartPos [ mpSidePositions [ your_side ] ] [ 2 ] ) ;
4891: LD_EXP 21
4895: PUSH
4896: LD_EXP 7
4900: PUSH
4901: LD_OWVAR 2
4905: ARRAY
4906: ARRAY
4907: PUSH
4908: LD_INT 1
4910: ARRAY
4911: PPUSH
4912: LD_EXP 21
4916: PUSH
4917: LD_EXP 7
4921: PUSH
4922: LD_OWVAR 2
4926: ARRAY
4927: ARRAY
4928: PUSH
4929: LD_INT 2
4931: ARRAY
4932: PPUSH
4933: CALL_OW 86
// end ; BeginBuildUp ;
4937: CALL 5993 0 0
// enable ( mpActive ) ;
4941: LD_INT 100
4943: ENABLE_MARKED
// enable ( mpGameType ) ;
4944: LD_EXP 3
4948: ENABLE_MARKED
// mpGameActive := true ;
4949: LD_ADDR_EXP 39
4953: PUSH
4954: LD_INT 1
4956: ST_TO_ADDR
// end ;
4957: LD_VAR 0 1
4961: RET
// var mpTeamPreset ; function mpPrepareTeam ( side , nation , amount , skill ) ; var i , un , class ; begin
4962: LD_INT 0
4964: PPUSH
4965: PPUSH
4966: PPUSH
4967: PPUSH
// result := [ ] ;
4968: LD_ADDR_VAR 0 5
4972: PUSH
4973: EMPTY
4974: ST_TO_ADDR
// class := class_soldier ;
4975: LD_ADDR_VAR 0 8
4979: PUSH
4980: LD_INT 1
4982: ST_TO_ADDR
// uc_side := side ;
4983: LD_ADDR_OWVAR 20
4987: PUSH
4988: LD_VAR 0 1
4992: ST_TO_ADDR
// uc_nation := nation ;
4993: LD_ADDR_OWVAR 21
4997: PUSH
4998: LD_VAR 0 2
5002: ST_TO_ADDR
// hc_name := mp_sides_players_names [ side ] ;
5003: LD_ADDR_OWVAR 26
5007: PUSH
5008: LD_OWVAR 19
5012: PUSH
5013: LD_VAR 0 1
5017: ARRAY
5018: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , class , skill + 2 ) ;
5019: LD_INT 1
5021: PPUSH
5022: LD_INT 2
5024: PPUSH
5025: CALL_OW 12
5029: PPUSH
5030: LD_VAR 0 8
5034: PPUSH
5035: LD_VAR 0 4
5039: PUSH
5040: LD_INT 2
5042: PLUS
5043: PPUSH
5044: CALL_OW 380
// hc_importance := 105 ;
5048: LD_ADDR_OWVAR 32
5052: PUSH
5053: LD_INT 105
5055: ST_TO_ADDR
// if Multiplayer then
5056: LD_OWVAR 4
5060: IFFALSE 5100
// begin hc_gallery := MULTIAVATARS ;
5062: LD_ADDR_OWVAR 33
5066: PUSH
5067: LD_STRING MULTIAVATARS
5069: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( side ) ;
5070: LD_ADDR_OWVAR 34
5074: PUSH
5075: LD_VAR 0 1
5079: PPUSH
5080: CALL_OW 525
5084: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( side ) ;
5085: LD_ADDR_OWVAR 27
5089: PUSH
5090: LD_VAR 0 1
5094: PPUSH
5095: CALL_OW 526
5099: ST_TO_ADDR
// end ; result := Join ( result , CreateHuman ) ;
5100: LD_ADDR_VAR 0 5
5104: PUSH
5105: LD_VAR 0 5
5109: PPUSH
5110: CALL_OW 44
5114: PPUSH
5115: CALL 47521 0 2
5119: ST_TO_ADDR
// if mpTeamPreset then
5120: LD_LOC 1
5124: IFFALSE 5220
// begin CopySkills ( mpTeamPreset [ 1 ] , result [ result ] ) ;
5126: LD_LOC 1
5130: PUSH
5131: LD_INT 1
5133: ARRAY
5134: PPUSH
5135: LD_VAR 0 5
5139: PUSH
5140: LD_VAR 0 5
5144: ARRAY
5145: PPUSH
5146: CALL_OW 510
// SetAttr ( result [ result ] , attr_stamina , GetAttr ( mpTeamPreset [ 1 ] , attr_stamina ) ) ;
5150: LD_VAR 0 5
5154: PUSH
5155: LD_VAR 0 5
5159: ARRAY
5160: PPUSH
5161: LD_INT 1
5163: PPUSH
5164: LD_LOC 1
5168: PUSH
5169: LD_INT 1
5171: ARRAY
5172: PPUSH
5173: LD_INT 1
5175: PPUSH
5176: CALL_OW 260
5180: PPUSH
5181: CALL_OW 239
// SetAttr ( result [ result ] , attr_speed , GetAttr ( mpTeamPreset [ 1 ] , attr_speed ) ) ;
5185: LD_VAR 0 5
5189: PUSH
5190: LD_VAR 0 5
5194: ARRAY
5195: PPUSH
5196: LD_INT 2
5198: PPUSH
5199: LD_LOC 1
5203: PUSH
5204: LD_INT 1
5206: ARRAY
5207: PPUSH
5208: LD_INT 2
5210: PPUSH
5211: CALL_OW 260
5215: PPUSH
5216: CALL_OW 239
// end ; InitHc_All ( ) ;
5220: CALL_OW 584
// class := 2 ;
5224: LD_ADDR_VAR 0 8
5228: PUSH
5229: LD_INT 2
5231: ST_TO_ADDR
// for i := 1 to ( amount - 1 ) do
5232: LD_ADDR_VAR 0 6
5236: PUSH
5237: DOUBLE
5238: LD_INT 1
5240: DEC
5241: ST_TO_ADDR
5242: LD_VAR 0 3
5246: PUSH
5247: LD_INT 1
5249: MINUS
5250: PUSH
5251: FOR_TO
5252: IFFALSE 5436
// begin PrepareHuman ( false , class , skill ) ;
5254: LD_INT 0
5256: PPUSH
5257: LD_VAR 0 8
5261: PPUSH
5262: LD_VAR 0 4
5266: PPUSH
5267: CALL_OW 380
// un := CreateHuman ;
5271: LD_ADDR_VAR 0 7
5275: PUSH
5276: CALL_OW 44
5280: ST_TO_ADDR
// result := Join ( result , un ) ;
5281: LD_ADDR_VAR 0 5
5285: PUSH
5286: LD_VAR 0 5
5290: PPUSH
5291: LD_VAR 0 7
5295: PPUSH
5296: CALL 47521 0 2
5300: ST_TO_ADDR
// if mpTeamPreset then
5301: LD_LOC 1
5305: IFFALSE 5401
// begin CopySkills ( mpTeamPreset [ i + 1 ] , un ) ;
5307: LD_LOC 1
5311: PUSH
5312: LD_VAR 0 6
5316: PUSH
5317: LD_INT 1
5319: PLUS
5320: ARRAY
5321: PPUSH
5322: LD_VAR 0 7
5326: PPUSH
5327: CALL_OW 510
// SetAttr ( un , attr_stamina , GetAttr ( mpTeamPreset [ i + 1 ] , attr_stamina ) ) ;
5331: LD_VAR 0 7
5335: PPUSH
5336: LD_INT 1
5338: PPUSH
5339: LD_LOC 1
5343: PUSH
5344: LD_VAR 0 6
5348: PUSH
5349: LD_INT 1
5351: PLUS
5352: ARRAY
5353: PPUSH
5354: LD_INT 1
5356: PPUSH
5357: CALL_OW 260
5361: PPUSH
5362: CALL_OW 239
// SetAttr ( un , attr_speed , GetAttr ( mpTeamPreset [ i + 1 ] , attr_speed ) ) ;
5366: LD_VAR 0 7
5370: PPUSH
5371: LD_INT 2
5373: PPUSH
5374: LD_LOC 1
5378: PUSH
5379: LD_VAR 0 6
5383: PUSH
5384: LD_INT 1
5386: PLUS
5387: ARRAY
5388: PPUSH
5389: LD_INT 2
5391: PPUSH
5392: CALL_OW 260
5396: PPUSH
5397: CALL_OW 239
// end ; class := Inc ( class ) ;
5401: LD_ADDR_VAR 0 8
5405: PUSH
5406: LD_VAR 0 8
5410: PPUSH
5411: CALL 48882 0 1
5415: ST_TO_ADDR
// if class = 5 then
5416: LD_VAR 0 8
5420: PUSH
5421: LD_INT 5
5423: EQUAL
5424: IFFALSE 5434
// class := 1 ;
5426: LD_ADDR_VAR 0 8
5430: PUSH
5431: LD_INT 1
5433: ST_TO_ADDR
// end ;
5434: GO 5251
5436: POP
5437: POP
// if not mpTeamPreset then
5438: LD_LOC 1
5442: NOT
5443: IFFALSE 5455
// mpTeamPreset := result ;
5445: LD_ADDR_LOC 1
5449: PUSH
5450: LD_VAR 0 5
5454: ST_TO_ADDR
// end ;
5455: LD_VAR 0 5
5459: RET
// function mpPrepareVehicles ( side , nation , vehicles ) ; var i ; begin
5460: LD_INT 0
5462: PPUSH
5463: PPUSH
// result := [ ] ;
5464: LD_ADDR_VAR 0 4
5468: PUSH
5469: EMPTY
5470: ST_TO_ADDR
// if not vehicles then
5471: LD_VAR 0 3
5475: NOT
5476: IFFALSE 5480
// exit ;
5478: GO 5694
// for i := 1 to vehicles [ nation ] do
5480: LD_ADDR_VAR 0 5
5484: PUSH
5485: DOUBLE
5486: LD_INT 1
5488: DEC
5489: ST_TO_ADDR
5490: LD_VAR 0 3
5494: PUSH
5495: LD_VAR 0 2
5499: ARRAY
5500: PUSH
5501: FOR_TO
5502: IFFALSE 5692
// begin uc_side := side ;
5504: LD_ADDR_OWVAR 20
5508: PUSH
5509: LD_VAR 0 1
5513: ST_TO_ADDR
// if Count ( vehicles [ nation ] [ i ] ) > 4 then
5514: LD_VAR 0 3
5518: PUSH
5519: LD_VAR 0 2
5523: ARRAY
5524: PUSH
5525: LD_VAR 0 5
5529: ARRAY
5530: PPUSH
5531: CALL 11912 0 1
5535: PUSH
5536: LD_INT 4
5538: GREATER
5539: IFFALSE 5569
// uc_nation := vehicles [ nation ] [ i ] [ 5 ] else
5541: LD_ADDR_OWVAR 21
5545: PUSH
5546: LD_VAR 0 3
5550: PUSH
5551: LD_VAR 0 2
5555: ARRAY
5556: PUSH
5557: LD_VAR 0 5
5561: ARRAY
5562: PUSH
5563: LD_INT 5
5565: ARRAY
5566: ST_TO_ADDR
5567: GO 5579
// uc_nation := nation ;
5569: LD_ADDR_OWVAR 21
5573: PUSH
5574: LD_VAR 0 2
5578: ST_TO_ADDR
// PrepareVehicle ( vehicles [ nation ] [ i ] [ 1 ] , vehicles [ nation ] [ i ] [ 2 ] , vehicles [ nation ] [ i ] [ 3 ] , vehicles [ nation ] [ i ] [ 4 ] , 80 ) ;
5579: LD_VAR 0 3
5583: PUSH
5584: LD_VAR 0 2
5588: ARRAY
5589: PUSH
5590: LD_VAR 0 5
5594: ARRAY
5595: PUSH
5596: LD_INT 1
5598: ARRAY
5599: PPUSH
5600: LD_VAR 0 3
5604: PUSH
5605: LD_VAR 0 2
5609: ARRAY
5610: PUSH
5611: LD_VAR 0 5
5615: ARRAY
5616: PUSH
5617: LD_INT 2
5619: ARRAY
5620: PPUSH
5621: LD_VAR 0 3
5625: PUSH
5626: LD_VAR 0 2
5630: ARRAY
5631: PUSH
5632: LD_VAR 0 5
5636: ARRAY
5637: PUSH
5638: LD_INT 3
5640: ARRAY
5641: PPUSH
5642: LD_VAR 0 3
5646: PUSH
5647: LD_VAR 0 2
5651: ARRAY
5652: PUSH
5653: LD_VAR 0 5
5657: ARRAY
5658: PUSH
5659: LD_INT 4
5661: ARRAY
5662: PPUSH
5663: LD_INT 80
5665: PPUSH
5666: CALL 14650 0 5
// result := Join ( result , CreateVehicle ) ;
5670: LD_ADDR_VAR 0 4
5674: PUSH
5675: LD_VAR 0 4
5679: PPUSH
5680: CALL_OW 45
5684: PPUSH
5685: CALL 47521 0 2
5689: ST_TO_ADDR
// end ;
5690: GO 5501
5692: POP
5693: POP
// end ;
5694: LD_VAR 0 4
5698: RET
// function mpUpdateFlags ( strength ) ; var i ; begin
5699: LD_INT 0
5701: PPUSH
5702: PPUSH
// for i in mpBattleFlags do
5703: LD_ADDR_VAR 0 3
5707: PUSH
5708: LD_EXP 23
5712: PUSH
5713: FOR_IN
5714: IFFALSE 5791
// ChangeBattleFlagOptions ( i , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength * 0.7 ] , [ bfo_defend_bonus_building , strength * 0.4 ] , [ bfo_height , strength ] ] ) ;
5716: LD_VAR 0 3
5720: PPUSH
5721: LD_INT 1
5723: PUSH
5724: LD_VAR 0 1
5728: PUSH
5729: EMPTY
5730: LIST
5731: LIST
5732: PUSH
5733: LD_INT 2
5735: PUSH
5736: LD_VAR 0 1
5740: PUSH
5741: LD_REAL  7.00000000000000E-0001
5744: MUL
5745: PUSH
5746: EMPTY
5747: LIST
5748: LIST
5749: PUSH
5750: LD_INT 3
5752: PUSH
5753: LD_VAR 0 1
5757: PUSH
5758: LD_REAL  4.00000000000000E-0001
5761: MUL
5762: PUSH
5763: EMPTY
5764: LIST
5765: LIST
5766: PUSH
5767: LD_INT 20
5769: PUSH
5770: LD_VAR 0 1
5774: PUSH
5775: EMPTY
5776: LIST
5777: LIST
5778: PUSH
5779: EMPTY
5780: LIST
5781: LIST
5782: LIST
5783: LIST
5784: PPUSH
5785: CALL_OW 423
5789: GO 5713
5791: POP
5792: POP
// end ;
5793: LD_VAR 0 2
5797: RET
// every 0 0$1 trigger mpActive do var i , strength ;
5798: LD_INT 100
5800: IFFALSE 5895
5802: GO 5804
5804: DISABLE
5805: LD_INT 0
5807: PPUSH
5808: PPUSH
// begin if mpBattleFlag <= 0 then
5809: LD_EXP 22
5813: PUSH
5814: LD_INT 0
5816: LESSEQUAL
5817: IFFALSE 5821
// exit ;
5819: GO 5895
// strength := 100 ;
5821: LD_ADDR_VAR 0 2
5825: PUSH
5826: LD_INT 100
5828: ST_TO_ADDR
// repeat wait ( mpBattleFlag ) ;
5829: LD_EXP 22
5833: PPUSH
5834: CALL_OW 67
// strength := Dec ( strength ) ;
5838: LD_ADDR_VAR 0 2
5842: PUSH
5843: LD_VAR 0 2
5847: PPUSH
5848: CALL 48904 0 1
5852: ST_TO_ADDR
// mpUpdateFlags ( strength ) ;
5853: LD_VAR 0 2
5857: PPUSH
5858: CALL 5699 0 1
// until not strength ;
5862: LD_VAR 0 2
5866: NOT
5867: IFFALSE 5829
// for i in mpBattleFlags do
5869: LD_ADDR_VAR 0 1
5873: PUSH
5874: LD_EXP 23
5878: PUSH
5879: FOR_IN
5880: IFFALSE 5893
// KillBattleFlag ( i ) ;
5882: LD_VAR 0 1
5886: PPUSH
5887: CALL_OW 419
5891: GO 5879
5893: POP
5894: POP
// end ;
5895: PPOPN 2
5897: END
// every 0 0$1 marked mpActive do var side , tmp ;
5898: GO 5900
5900: DISABLE
5901: LD_INT 0
5903: PPUSH
5904: PPUSH
// begin if mpSibBomb <= 1 then
5905: LD_EXP 28
5909: PUSH
5910: LD_INT 1
5912: LESSEQUAL
5913: IFFALSE 5917
// exit ;
5915: GO 5990
// tmp := mpSibBomb ;
5917: LD_ADDR_VAR 0 2
5921: PUSH
5922: LD_EXP 28
5926: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
5927: LD_INT 35
5929: PPUSH
5930: CALL_OW 67
// tmp := tmp - 0 0$1 ;
5934: LD_ADDR_VAR 0 2
5938: PUSH
5939: LD_VAR 0 2
5943: PUSH
5944: LD_INT 35
5946: MINUS
5947: ST_TO_ADDR
// until not tmp ;
5948: LD_VAR 0 2
5952: NOT
5953: IFFALSE 5927
// for side := 1 to 8 do
5955: LD_ADDR_VAR 0 1
5959: PUSH
5960: DOUBLE
5961: LD_INT 1
5963: DEC
5964: ST_TO_ADDR
5965: LD_INT 8
5967: PUSH
5968: FOR_TO
5969: IFFALSE 5988
// SetTech ( tech_SibFiss , side , state_enabled ) ;
5971: LD_INT 25
5973: PPUSH
5974: LD_VAR 0 1
5978: PPUSH
5979: LD_INT 1
5981: PPUSH
5982: CALL_OW 322
5986: GO 5968
5988: POP
5989: POP
// end ;
5990: PPOPN 2
5992: END
// export mpBuildUpTimeDelay , mpBuildUpTimeActive ; function BeginBuildUp ; var i , j ; begin
5993: LD_INT 0
5995: PPUSH
5996: PPUSH
5997: PPUSH
// mpBuildUpTimeDelay := 0 ;
5998: LD_ADDR_EXP 46
6002: PUSH
6003: LD_INT 0
6005: ST_TO_ADDR
// if not mpBuildUpTime then
6006: LD_EXP 20
6010: NOT
6011: IFFALSE 6015
// exit ;
6013: GO 6198
// mpBuildUpTimeDelay := 4 4$00 + 1 1$00 * mpBuildUpTime ;
6015: LD_ADDR_EXP 46
6019: PUSH
6020: LD_INT 8400
6022: PUSH
6023: LD_INT 2100
6025: PUSH
6026: LD_EXP 20
6030: MUL
6031: PLUS
6032: ST_TO_ADDR
// mpBuildUpTimeActive := true ;
6033: LD_ADDR_EXP 47
6037: PUSH
6038: LD_INT 1
6040: ST_TO_ADDR
// for i := 1 to 8 do
6041: LD_ADDR_VAR 0 2
6045: PUSH
6046: DOUBLE
6047: LD_INT 1
6049: DEC
6050: ST_TO_ADDR
6051: LD_INT 8
6053: PUSH
6054: FOR_TO
6055: IFFALSE 6196
// if mpSidePositions [ i ] then
6057: LD_EXP 7
6061: PUSH
6062: LD_VAR 0 2
6066: ARRAY
6067: IFFALSE 6194
// begin SetAreaMapShow ( mpBuildUpAreas [ mpSidePositions [ i ] ] , 5 ) ;
6069: LD_EXP 19
6073: PUSH
6074: LD_EXP 7
6078: PUSH
6079: LD_VAR 0 2
6083: ARRAY
6084: ARRAY
6085: PPUSH
6086: LD_INT 5
6088: PPUSH
6089: CALL_OW 424
// for j := 1 to 8 do
6093: LD_ADDR_VAR 0 3
6097: PUSH
6098: DOUBLE
6099: LD_INT 1
6101: DEC
6102: ST_TO_ADDR
6103: LD_INT 8
6105: PUSH
6106: FOR_TO
6107: IFFALSE 6192
// if mpSidePositions [ j ] and ( ( mpSideTeams [ i ] <> mpSideTeams [ j ] ) or ( not mpTeamGame ) and ( i <> j ) ) then
6109: LD_EXP 7
6113: PUSH
6114: LD_VAR 0 3
6118: ARRAY
6119: PUSH
6120: LD_EXP 8
6124: PUSH
6125: LD_VAR 0 2
6129: ARRAY
6130: PUSH
6131: LD_EXP 8
6135: PUSH
6136: LD_VAR 0 3
6140: ARRAY
6141: NONEQUAL
6142: PUSH
6143: LD_EXP 11
6147: NOT
6148: PUSH
6149: LD_VAR 0 2
6153: PUSH
6154: LD_VAR 0 3
6158: NONEQUAL
6159: AND
6160: OR
6161: AND
6162: IFFALSE 6190
// HideArea ( j , mpBuildUpAreas [ mpSidePositions [ i ] ] ) ;
6164: LD_VAR 0 3
6168: PPUSH
6169: LD_EXP 19
6173: PUSH
6174: LD_EXP 7
6178: PUSH
6179: LD_VAR 0 2
6183: ARRAY
6184: ARRAY
6185: PPUSH
6186: CALL_OW 333
6190: GO 6106
6192: POP
6193: POP
// end ;
6194: GO 6054
6196: POP
6197: POP
// end ;
6198: LD_VAR 0 1
6202: RET
// function EndBuildUp ; var i , j ; begin
6203: LD_INT 0
6205: PPUSH
6206: PPUSH
6207: PPUSH
// mpBuildUpTimeActive := false ;
6208: LD_ADDR_EXP 47
6212: PUSH
6213: LD_INT 0
6215: ST_TO_ADDR
// for i := 1 to 8 do
6216: LD_ADDR_VAR 0 2
6220: PUSH
6221: DOUBLE
6222: LD_INT 1
6224: DEC
6225: ST_TO_ADDR
6226: LD_INT 8
6228: PUSH
6229: FOR_TO
6230: IFFALSE 6371
// if mpSidePositions [ i ] then
6232: LD_EXP 7
6236: PUSH
6237: LD_VAR 0 2
6241: ARRAY
6242: IFFALSE 6369
// begin SetAreaMapShow ( mpBuildUpAreas [ mpSidePositions [ i ] ] , 0 ) ;
6244: LD_EXP 19
6248: PUSH
6249: LD_EXP 7
6253: PUSH
6254: LD_VAR 0 2
6258: ARRAY
6259: ARRAY
6260: PPUSH
6261: LD_INT 0
6263: PPUSH
6264: CALL_OW 424
// for j := 1 to 8 do
6268: LD_ADDR_VAR 0 3
6272: PUSH
6273: DOUBLE
6274: LD_INT 1
6276: DEC
6277: ST_TO_ADDR
6278: LD_INT 8
6280: PUSH
6281: FOR_TO
6282: IFFALSE 6367
// if mpSidePositions [ j ] and ( ( mpSideTeams [ i ] <> mpSideTeams [ j ] ) or ( not mpTeamGame ) and ( i <> j ) ) then
6284: LD_EXP 7
6288: PUSH
6289: LD_VAR 0 3
6293: ARRAY
6294: PUSH
6295: LD_EXP 8
6299: PUSH
6300: LD_VAR 0 2
6304: ARRAY
6305: PUSH
6306: LD_EXP 8
6310: PUSH
6311: LD_VAR 0 3
6315: ARRAY
6316: NONEQUAL
6317: PUSH
6318: LD_EXP 11
6322: NOT
6323: PUSH
6324: LD_VAR 0 2
6328: PUSH
6329: LD_VAR 0 3
6333: NONEQUAL
6334: AND
6335: OR
6336: AND
6337: IFFALSE 6365
// ShowArea ( j , mpBuildUpAreas [ mpSidePositions [ i ] ] ) ;
6339: LD_VAR 0 3
6343: PPUSH
6344: LD_EXP 19
6348: PUSH
6349: LD_EXP 7
6353: PUSH
6354: LD_VAR 0 2
6358: ARRAY
6359: ARRAY
6360: PPUSH
6361: CALL_OW 334
6365: GO 6281
6367: POP
6368: POP
// end ;
6369: GO 6229
6371: POP
6372: POP
// end ;
6373: LD_VAR 0 1
6377: RET
// every 5 trigger mpBuildUpTimeActive marked mpActive do var i , un ;
6378: LD_EXP 47
6382: IFFALSE 6557
6384: GO 6386
6386: DISABLE
6387: LD_INT 0
6389: PPUSH
6390: PPUSH
// begin for i := 1 to 8 do
6391: LD_ADDR_VAR 0 1
6395: PUSH
6396: DOUBLE
6397: LD_INT 1
6399: DEC
6400: ST_TO_ADDR
6401: LD_INT 8
6403: PUSH
6404: FOR_TO
6405: IFFALSE 6554
// if mpSidePositions [ i ] then
6407: LD_EXP 7
6411: PUSH
6412: LD_VAR 0 1
6416: ARRAY
6417: IFFALSE 6552
// for un in FilterUnitsInArea ( mpBuildUpAreas [ mpSidePositions [ i ] ] , [ [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] , [ f_side , your_side ] ] ) do
6419: LD_ADDR_VAR 0 2
6423: PUSH
6424: LD_EXP 19
6428: PUSH
6429: LD_EXP 7
6433: PUSH
6434: LD_VAR 0 1
6438: ARRAY
6439: ARRAY
6440: PPUSH
6441: LD_INT 2
6443: PUSH
6444: LD_INT 21
6446: PUSH
6447: LD_INT 1
6449: PUSH
6450: EMPTY
6451: LIST
6452: LIST
6453: PUSH
6454: LD_INT 21
6456: PUSH
6457: LD_INT 2
6459: PUSH
6460: EMPTY
6461: LIST
6462: LIST
6463: PUSH
6464: EMPTY
6465: LIST
6466: LIST
6467: LIST
6468: PUSH
6469: LD_INT 22
6471: PUSH
6472: LD_OWVAR 2
6476: PUSH
6477: EMPTY
6478: LIST
6479: LIST
6480: PUSH
6481: EMPTY
6482: LIST
6483: LIST
6484: PPUSH
6485: CALL_OW 70
6489: PUSH
6490: FOR_IN
6491: IFFALSE 6550
// if ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) or ( not mpTeamGame ) and ( i <> your_side ) ) then
6493: LD_EXP 8
6497: PUSH
6498: LD_VAR 0 1
6502: ARRAY
6503: PUSH
6504: LD_EXP 8
6508: PUSH
6509: LD_OWVAR 2
6513: ARRAY
6514: NONEQUAL
6515: PUSH
6516: LD_EXP 11
6520: NOT
6521: PUSH
6522: LD_VAR 0 1
6526: PUSH
6527: LD_OWVAR 2
6531: NONEQUAL
6532: AND
6533: OR
6534: IFFALSE 6548
// ComMoveToArea ( un , BuildUpEscape ) ;
6536: LD_VAR 0 2
6540: PPUSH
6541: LD_INT 9
6543: PPUSH
6544: CALL_OW 113
6548: GO 6490
6550: POP
6551: POP
6552: GO 6404
6554: POP
6555: POP
// enable ;
6556: ENABLE
// end ;
6557: PPOPN 2
6559: END
// every 0 0$1 trigger mpBuildUpTime marked mpActive do var tmp ;
6560: LD_EXP 20
6564: IFFALSE 6614
6566: GO 6568
6568: DISABLE
6569: LD_INT 0
6571: PPUSH
// begin tmp := mpBuildUpTime ;
6572: LD_ADDR_VAR 0 1
6576: PUSH
6577: LD_EXP 20
6581: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
6582: LD_INT 35
6584: PPUSH
6585: CALL_OW 67
// tmp := tmp - 0 0$1 ;
6589: LD_ADDR_VAR 0 1
6593: PUSH
6594: LD_VAR 0 1
6598: PUSH
6599: LD_INT 35
6601: MINUS
6602: ST_TO_ADDR
// until not tmp ;
6603: LD_VAR 0 1
6607: NOT
6608: IFFALSE 6582
// EndBuildUp ;
6610: CALL 6203 0 0
// end ;
6614: PPOPN 1
6616: END
// every 0 0$1 trigger mpActive marked mpWin do
6617: LD_INT 100
6619: IFFALSE 6653
6621: GO 6623
6623: DISABLE
// begin if IAmServer then
6624: CALL_OW 518
6628: IFFALSE 6637
// wait ( 0 0$3 ) ;
6630: LD_INT 105
6632: PPUSH
6633: CALL_OW 67
// if Multiplayer then
6637: LD_OWVAR 4
6641: IFFALSE 6649
// YouWinInMultiplayer else
6643: CALL_OW 106
6647: GO 6653
// YouWin ;
6649: CALL_OW 103
// end ;
6653: END
// export function HasPowerByGameType ( gameType , side ) ; begin
6654: LD_INT 0
6656: PPUSH
// result := false ;
6657: LD_ADDR_VAR 0 3
6661: PUSH
6662: LD_INT 0
6664: ST_TO_ADDR
// case gameType of GameTypeNormal , GameTypeFamine :
6665: LD_VAR 0 1
6669: PUSH
6670: LD_INT 1
6672: DOUBLE
6673: EQUAL
6674: IFTRUE 6684
6676: LD_INT 5
6678: DOUBLE
6679: EQUAL
6680: IFTRUE 6684
6682: GO 6757
6684: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) ;
6685: LD_ADDR_VAR 0 3
6689: PUSH
6690: LD_INT 22
6692: PUSH
6693: LD_VAR 0 2
6697: PUSH
6698: EMPTY
6699: LIST
6700: LIST
6701: PUSH
6702: LD_INT 2
6704: PUSH
6705: LD_INT 21
6707: PUSH
6708: LD_INT 1
6710: PUSH
6711: EMPTY
6712: LIST
6713: LIST
6714: PUSH
6715: LD_INT 33
6717: PUSH
6718: LD_INT 3
6720: PUSH
6721: EMPTY
6722: LIST
6723: LIST
6724: PUSH
6725: LD_INT 33
6727: PUSH
6728: LD_INT 5
6730: PUSH
6731: EMPTY
6732: LIST
6733: LIST
6734: PUSH
6735: EMPTY
6736: LIST
6737: LIST
6738: LIST
6739: LIST
6740: PUSH
6741: EMPTY
6742: LIST
6743: LIST
6744: PPUSH
6745: CALL_OW 69
6749: PPUSH
6750: CALL 11912 0 1
6754: ST_TO_ADDR
// end ; GameTypeSurvival :
6755: GO 6992
6757: LD_INT 2
6759: DOUBLE
6760: EQUAL
6761: IFTRUE 6765
6763: GO 6893
6765: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ) and Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) ;
6766: LD_ADDR_VAR 0 3
6770: PUSH
6771: LD_INT 22
6773: PUSH
6774: LD_VAR 0 2
6778: PUSH
6779: EMPTY
6780: LIST
6781: LIST
6782: PUSH
6783: LD_INT 2
6785: PUSH
6786: LD_INT 30
6788: PUSH
6789: LD_INT 0
6791: PUSH
6792: EMPTY
6793: LIST
6794: LIST
6795: PUSH
6796: LD_INT 30
6798: PUSH
6799: LD_INT 1
6801: PUSH
6802: EMPTY
6803: LIST
6804: LIST
6805: PUSH
6806: EMPTY
6807: LIST
6808: LIST
6809: LIST
6810: PUSH
6811: EMPTY
6812: LIST
6813: LIST
6814: PPUSH
6815: CALL_OW 69
6819: PPUSH
6820: CALL 11912 0 1
6824: PUSH
6825: LD_INT 22
6827: PUSH
6828: LD_VAR 0 2
6832: PUSH
6833: EMPTY
6834: LIST
6835: LIST
6836: PUSH
6837: LD_INT 2
6839: PUSH
6840: LD_INT 21
6842: PUSH
6843: LD_INT 1
6845: PUSH
6846: EMPTY
6847: LIST
6848: LIST
6849: PUSH
6850: LD_INT 33
6852: PUSH
6853: LD_INT 3
6855: PUSH
6856: EMPTY
6857: LIST
6858: LIST
6859: PUSH
6860: LD_INT 33
6862: PUSH
6863: LD_INT 5
6865: PUSH
6866: EMPTY
6867: LIST
6868: LIST
6869: PUSH
6870: EMPTY
6871: LIST
6872: LIST
6873: LIST
6874: LIST
6875: PUSH
6876: EMPTY
6877: LIST
6878: LIST
6879: PPUSH
6880: CALL_OW 69
6884: PPUSH
6885: CALL 11912 0 1
6889: AND
6890: ST_TO_ADDR
// end ; GameTypeKing :
6891: GO 6992
6893: LD_INT 3
6895: DOUBLE
6896: EQUAL
6897: IFTRUE 6901
6899: GO 6991
6901: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) and HowMuchPointsKing ( side ) < mpPoints ;
6902: LD_ADDR_VAR 0 3
6906: PUSH
6907: LD_INT 22
6909: PUSH
6910: LD_VAR 0 2
6914: PUSH
6915: EMPTY
6916: LIST
6917: LIST
6918: PUSH
6919: LD_INT 2
6921: PUSH
6922: LD_INT 21
6924: PUSH
6925: LD_INT 1
6927: PUSH
6928: EMPTY
6929: LIST
6930: LIST
6931: PUSH
6932: LD_INT 33
6934: PUSH
6935: LD_INT 3
6937: PUSH
6938: EMPTY
6939: LIST
6940: LIST
6941: PUSH
6942: LD_INT 33
6944: PUSH
6945: LD_INT 5
6947: PUSH
6948: EMPTY
6949: LIST
6950: LIST
6951: PUSH
6952: EMPTY
6953: LIST
6954: LIST
6955: LIST
6956: LIST
6957: PUSH
6958: EMPTY
6959: LIST
6960: LIST
6961: PPUSH
6962: CALL_OW 69
6966: PPUSH
6967: CALL 11912 0 1
6971: PUSH
6972: LD_VAR 0 2
6976: PPUSH
6977: CALL 59157 0 1
6981: PUSH
6982: LD_EXP 35
6986: LESS
6987: AND
6988: ST_TO_ADDR
// end ; end ;
6989: GO 6992
6991: POP
// end ;
6992: LD_VAR 0 3
6996: RET
// every 0 0$1 trigger mpActive marked mpLose do var gameIsOn , i ;
6997: LD_INT 100
6999: IFFALSE 7221
7001: GO 7003
7003: DISABLE
7004: LD_INT 0
7006: PPUSH
7007: PPUSH
// begin if Multiplayer then
7008: LD_OWVAR 4
7012: IFFALSE 7020
// SetPlayerSpectator ( ) else
7014: CALL_OW 572
7018: GO 7029
// FogOff ( your_side ) ;
7020: LD_OWVAR 2
7024: PPUSH
7025: CALL_OW 344
// repeat gameIsOn := false ;
7029: LD_ADDR_VAR 0 1
7033: PUSH
7034: LD_INT 0
7036: ST_TO_ADDR
// for i := 1 to 8 do
7037: LD_ADDR_VAR 0 2
7041: PUSH
7042: DOUBLE
7043: LD_INT 1
7045: DEC
7046: ST_TO_ADDR
7047: LD_INT 8
7049: PUSH
7050: FOR_TO
7051: IFFALSE 7173
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
7053: LD_EXP 7
7057: PUSH
7058: LD_VAR 0 2
7062: ARRAY
7063: PUSH
7064: LD_VAR 0 2
7068: PPUSH
7069: CALL_OW 108
7073: AND
7074: PUSH
7075: LD_VAR 0 2
7079: PUSH
7080: LD_OWVAR 2
7084: NONEQUAL
7085: AND
7086: IFFALSE 7171
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
7088: LD_EXP 8
7092: PUSH
7093: LD_VAR 0 2
7097: ARRAY
7098: NOT
7099: PUSH
7100: LD_EXP 8
7104: PUSH
7105: LD_VAR 0 2
7109: ARRAY
7110: PUSH
7111: LD_EXP 8
7115: PUSH
7116: LD_OWVAR 2
7120: ARRAY
7121: NONEQUAL
7122: PUSH
7123: LD_OWVAR 2
7127: PPUSH
7128: LD_VAR 0 2
7132: PPUSH
7133: CALL_OW 81
7137: PUSH
7138: LD_INT 1
7140: NONEQUAL
7141: AND
7142: OR
7143: IFFALSE 7171
// if HasPowerByGameType ( mpGameType , i ) then
7145: LD_EXP 3
7149: PPUSH
7150: LD_VAR 0 2
7154: PPUSH
7155: CALL 6654 0 2
7159: IFFALSE 7171
// begin gameIsOn := true ;
7161: LD_ADDR_VAR 0 1
7165: PUSH
7166: LD_INT 1
7168: ST_TO_ADDR
// break ;
7169: GO 7173
// end ;
7171: GO 7050
7173: POP
7174: POP
// wait ( 100 ) ;
7175: LD_INT 100
7177: PPUSH
7178: CALL_OW 67
// until not gameIsOn ;
7182: LD_VAR 0 1
7186: NOT
7187: IFFALSE 7029
// if IAmServer then
7189: CALL_OW 518
7193: IFFALSE 7202
// wait ( 0 0$3 ) ;
7195: LD_INT 105
7197: PPUSH
7198: CALL_OW 67
// if Multiplayer then
7202: LD_OWVAR 4
7206: IFFALSE 7214
// YouLostInMultiplayer else
7208: CALL_OW 107
7212: GO 7221
// YouLost (  ) ;
7214: LD_STRING 
7216: PPUSH
7217: CALL_OW 104
// end ;
7221: PPOPN 2
7223: END
// every 0 0$10 trigger mpRespawn marked mpActive do var i , j , tmp , spawn , sides ;
7224: LD_EXP 33
7228: IFFALSE 7604
7230: GO 7232
7232: DISABLE
7233: LD_INT 0
7235: PPUSH
7236: PPUSH
7237: PPUSH
7238: PPUSH
7239: PPUSH
// begin sides := [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 ] ;
7240: LD_ADDR_VAR 0 5
7244: PUSH
7245: LD_INT 1
7247: PUSH
7248: LD_INT 2
7250: PUSH
7251: LD_INT 3
7253: PUSH
7254: LD_INT 4
7256: PUSH
7257: LD_INT 5
7259: PUSH
7260: LD_INT 6
7262: PUSH
7263: LD_INT 7
7265: PUSH
7266: LD_INT 8
7268: PUSH
7269: EMPTY
7270: LIST
7271: LIST
7272: LIST
7273: LIST
7274: LIST
7275: LIST
7276: LIST
7277: LIST
7278: ST_TO_ADDR
// repeat wait ( 0 0$10 ) ;
7279: LD_INT 350
7281: PPUSH
7282: CALL_OW 67
// for i := 1 to 8 do
7286: LD_ADDR_VAR 0 1
7290: PUSH
7291: DOUBLE
7292: LD_INT 1
7294: DEC
7295: ST_TO_ADDR
7296: LD_INT 8
7298: PUSH
7299: FOR_TO
7300: IFFALSE 7574
// begin j := sides [ i ] ;
7302: LD_ADDR_VAR 0 2
7306: PUSH
7307: LD_VAR 0 5
7311: PUSH
7312: LD_VAR 0 1
7316: ARRAY
7317: ST_TO_ADDR
// if Count ( mpRespawnPull [ j ] ) and MultiplayerSideAlive ( j ) and HasPowerByGameType ( mpGameType , j ) then
7318: LD_EXP 40
7322: PUSH
7323: LD_VAR 0 2
7327: ARRAY
7328: PPUSH
7329: CALL 11912 0 1
7333: PUSH
7334: LD_VAR 0 2
7338: PPUSH
7339: CALL_OW 108
7343: AND
7344: PUSH
7345: LD_EXP 3
7349: PPUSH
7350: LD_VAR 0 2
7354: PPUSH
7355: CALL 6654 0 2
7359: AND
7360: IFFALSE 7572
// begin wait ( mpRespawn div 3 ) ;
7362: LD_EXP 33
7366: PUSH
7367: LD_INT 3
7369: DIV
7370: PPUSH
7371: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , j ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
7375: LD_ADDR_VAR 0 3
7379: PUSH
7380: LD_INT 22
7382: PUSH
7383: LD_VAR 0 2
7387: PUSH
7388: EMPTY
7389: LIST
7390: LIST
7391: PUSH
7392: LD_INT 50
7394: PUSH
7395: EMPTY
7396: LIST
7397: PUSH
7398: LD_INT 2
7400: PUSH
7401: LD_INT 30
7403: PUSH
7404: LD_INT 0
7406: PUSH
7407: EMPTY
7408: LIST
7409: LIST
7410: PUSH
7411: LD_INT 30
7413: PUSH
7414: LD_INT 1
7416: PUSH
7417: EMPTY
7418: LIST
7419: LIST
7420: PUSH
7421: EMPTY
7422: LIST
7423: LIST
7424: LIST
7425: PUSH
7426: EMPTY
7427: LIST
7428: LIST
7429: LIST
7430: PPUSH
7431: CALL_OW 69
7435: ST_TO_ADDR
// if not tmp or not MultiplayerSideAlive ( j ) or not HasPowerByGameType ( mpGameType , j ) then
7436: LD_VAR 0 3
7440: NOT
7441: PUSH
7442: LD_VAR 0 2
7446: PPUSH
7447: CALL_OW 108
7451: NOT
7452: OR
7453: PUSH
7454: LD_EXP 3
7458: PPUSH
7459: LD_VAR 0 2
7463: PPUSH
7464: CALL 6654 0 2
7468: NOT
7469: OR
7470: IFFALSE 7474
// continue ;
7472: GO 7299
// spawn := tmp [ 1 ] ;
7474: LD_ADDR_VAR 0 4
7478: PUSH
7479: LD_VAR 0 3
7483: PUSH
7484: LD_INT 1
7486: ARRAY
7487: ST_TO_ADDR
// PlaceUnitXYR ( mpRespawnPull [ j ] [ 1 ] , GetX ( spawn ) , GetY ( spawn ) , 32 , true ) ;
7488: LD_EXP 40
7492: PUSH
7493: LD_VAR 0 2
7497: ARRAY
7498: PUSH
7499: LD_INT 1
7501: ARRAY
7502: PPUSH
7503: LD_VAR 0 4
7507: PPUSH
7508: CALL_OW 250
7512: PPUSH
7513: LD_VAR 0 4
7517: PPUSH
7518: CALL_OW 251
7522: PPUSH
7523: LD_INT 32
7525: PPUSH
7526: LD_INT 1
7528: PPUSH
7529: CALL_OW 50
// mpRespawnPull := Replace ( mpRespawnPull , j , Delete ( mpRespawnPull [ j ] , 1 ) ) ;
7533: LD_ADDR_EXP 40
7537: PUSH
7538: LD_EXP 40
7542: PPUSH
7543: LD_VAR 0 2
7547: PPUSH
7548: LD_EXP 40
7552: PUSH
7553: LD_VAR 0 2
7557: ARRAY
7558: PPUSH
7559: LD_INT 1
7561: PPUSH
7562: CALL_OW 3
7566: PPUSH
7567: CALL_OW 1
7571: ST_TO_ADDR
// end ; end ;
7572: GO 7299
7574: POP
7575: POP
// sides := Reindex ( sides , 1 , 8 , true ) ;
7576: LD_ADDR_VAR 0 5
7580: PUSH
7581: LD_VAR 0 5
7585: PPUSH
7586: LD_INT 1
7588: PPUSH
7589: LD_INT 8
7591: PPUSH
7592: LD_INT 1
7594: PPUSH
7595: CALL 14190 0 4
7599: ST_TO_ADDR
// until false ;
7600: LD_INT 0
7602: IFFALSE 7279
// end ;
7604: PPOPN 5
7606: END
// every 0 0$1 marked mpActive do
7607: GO 7609
7609: DISABLE
// begin enable ;
7610: ENABLE
// if not mpDisplayStrings then
7611: LD_EXP 38
7615: NOT
7616: IFFALSE 7627
// begin display_strings := [ ] ;
7618: LD_ADDR_OWVAR 47
7622: PUSH
7623: EMPTY
7624: ST_TO_ADDR
// exit ;
7625: GO 7637
// end ; display_strings := mpDisplayStrings ;
7627: LD_ADDR_OWVAR 47
7631: PUSH
7632: LD_EXP 38
7636: ST_TO_ADDR
// end ; end_of_file
7637: END
// export function Multiplayer_UnitDestroyed ( un ) ; var i , ape , tag , class , area , nation , side , tmp ; begin
7638: LD_INT 0
7640: PPUSH
7641: PPUSH
7642: PPUSH
7643: PPUSH
7644: PPUSH
7645: PPUSH
7646: PPUSH
7647: PPUSH
7648: PPUSH
// if GetType ( un ) = unit_vehicle then
7649: LD_VAR 0 1
7653: PPUSH
7654: CALL_OW 247
7658: PUSH
7659: LD_INT 2
7661: EQUAL
7662: IFFALSE 7666
// exit ;
7664: GO 8298
// side := GetSide ( un ) ;
7666: LD_ADDR_VAR 0 9
7670: PUSH
7671: LD_VAR 0 1
7675: PPUSH
7676: CALL_OW 255
7680: ST_TO_ADDR
// if mpGameType = GameTypeSurvival then
7681: LD_EXP 3
7685: PUSH
7686: LD_INT 2
7688: EQUAL
7689: IFFALSE 7765
// if GetBType ( un ) in [ b_depot , b_warehouse ] then
7691: LD_VAR 0 1
7695: PPUSH
7696: CALL_OW 266
7700: PUSH
7701: LD_INT 0
7703: PUSH
7704: LD_INT 1
7706: PUSH
7707: EMPTY
7708: LIST
7709: LIST
7710: IN
7711: IFFALSE 7765
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_human ] ] ) do
7713: LD_ADDR_VAR 0 3
7717: PUSH
7718: LD_INT 22
7720: PUSH
7721: LD_VAR 0 9
7725: PUSH
7726: EMPTY
7727: LIST
7728: LIST
7729: PUSH
7730: LD_INT 21
7732: PUSH
7733: LD_INT 1
7735: PUSH
7736: EMPTY
7737: LIST
7738: LIST
7739: PUSH
7740: EMPTY
7741: LIST
7742: LIST
7743: PPUSH
7744: CALL_OW 69
7748: PUSH
7749: FOR_IN
7750: IFFALSE 7763
// KillUnit ( i ) ;
7752: LD_VAR 0 3
7756: PPUSH
7757: CALL_OW 66
7761: GO 7749
7763: POP
7764: POP
// end ; if GetClass ( un ) in [ class_apeman , class_apeman_kamikaze , class_apeman_soldier , class_apeman_engineer ] or GetControl ( un ) = control_apeman then
7765: LD_VAR 0 1
7769: PPUSH
7770: CALL_OW 257
7774: PUSH
7775: LD_INT 12
7777: PUSH
7778: LD_INT 17
7780: PUSH
7781: LD_INT 15
7783: PUSH
7784: LD_INT 16
7786: PUSH
7787: EMPTY
7788: LIST
7789: LIST
7790: LIST
7791: LIST
7792: IN
7793: PUSH
7794: LD_VAR 0 1
7798: PPUSH
7799: CALL_OW 263
7803: PUSH
7804: LD_INT 5
7806: EQUAL
7807: OR
7808: IFFALSE 8027
// begin tag := 0 ;
7810: LD_ADDR_VAR 0 5
7814: PUSH
7815: LD_INT 0
7817: ST_TO_ADDR
// for i := 1 to 8 do
7818: LD_ADDR_VAR 0 3
7822: PUSH
7823: DOUBLE
7824: LD_INT 1
7826: DEC
7827: ST_TO_ADDR
7828: LD_INT 8
7830: PUSH
7831: FOR_TO
7832: IFFALSE 7866
// if un in mpApePosIndex [ i ] then
7834: LD_VAR 0 1
7838: PUSH
7839: LD_EXP 32
7843: PUSH
7844: LD_VAR 0 3
7848: ARRAY
7849: IN
7850: IFFALSE 7864
// begin tag := i ;
7852: LD_ADDR_VAR 0 5
7856: PUSH
7857: LD_VAR 0 3
7861: ST_TO_ADDR
// break ;
7862: GO 7866
// end ;
7864: GO 7831
7866: POP
7867: POP
// if not tag then
7868: LD_VAR 0 5
7872: NOT
7873: IFFALSE 7877
// exit ;
7875: GO 8298
// area := mpApemansArea [ mpSidePositions [ tag ] ] ;
7877: LD_ADDR_VAR 0 7
7881: PUSH
7882: LD_EXP 31
7886: PUSH
7887: LD_EXP 7
7891: PUSH
7892: LD_VAR 0 5
7896: ARRAY
7897: ARRAY
7898: ST_TO_ADDR
// if not area then
7899: LD_VAR 0 7
7903: NOT
7904: IFFALSE 7908
// exit ;
7906: GO 8298
// wait ( 4 4$00 ) ;
7908: LD_INT 8400
7910: PPUSH
7911: CALL_OW 67
// repeat wait ( 10 ) ;
7915: LD_INT 10
7917: PPUSH
7918: CALL_OW 67
// until not mpBlockRespThread ;
7922: LD_EXP 45
7926: NOT
7927: IFFALSE 7915
// mpBlockRespThread := true ;
7929: LD_ADDR_EXP 45
7933: PUSH
7934: LD_INT 1
7936: ST_TO_ADDR
// PrepareApeman ( 0 ) ;
7937: LD_INT 0
7939: PPUSH
7940: CALL 43769 0 1
// ape := CreateHuman ;
7944: LD_ADDR_VAR 0 4
7948: PUSH
7949: CALL_OW 44
7953: ST_TO_ADDR
// mpApePosIndex := Replace ( mpApePosIndex , tag , Join ( mpApePosIndex [ tag ] , ape ) ) ;
7954: LD_ADDR_EXP 32
7958: PUSH
7959: LD_EXP 32
7963: PPUSH
7964: LD_VAR 0 5
7968: PPUSH
7969: LD_EXP 32
7973: PUSH
7974: LD_VAR 0 5
7978: ARRAY
7979: PPUSH
7980: LD_VAR 0 4
7984: PPUSH
7985: CALL 47521 0 2
7989: PPUSH
7990: CALL_OW 1
7994: ST_TO_ADDR
// PlaceUnitArea ( ape , area , false ) ;
7995: LD_VAR 0 4
7999: PPUSH
8000: LD_VAR 0 7
8004: PPUSH
8005: LD_INT 0
8007: PPUSH
8008: CALL_OW 49
// wait ( 10 ) ;
8012: LD_INT 10
8014: PPUSH
8015: CALL_OW 67
// mpBlockRespThread := false ;
8019: LD_ADDR_EXP 45
8023: PUSH
8024: LD_INT 0
8026: ST_TO_ADDR
// end ; if GetType ( un ) = unit_human and GetNation ( un ) > nation_nature then
8027: LD_VAR 0 1
8031: PPUSH
8032: CALL_OW 247
8036: PUSH
8037: LD_INT 1
8039: EQUAL
8040: PUSH
8041: LD_VAR 0 1
8045: PPUSH
8046: CALL_OW 248
8050: PUSH
8051: LD_INT 0
8053: GREATER
8054: AND
8055: IFFALSE 8298
// begin if not mpRespawn then
8057: LD_EXP 33
8061: NOT
8062: IFFALSE 8066
// exit ;
8064: GO 8298
// if not MultiplayerSideAlive ( side ) and not HasPowerByGameType ( mpGameType , side ) then
8066: LD_VAR 0 9
8070: PPUSH
8071: CALL_OW 108
8075: NOT
8076: PUSH
8077: LD_EXP 3
8081: PPUSH
8082: LD_VAR 0 9
8086: PPUSH
8087: CALL 6654 0 2
8091: NOT
8092: AND
8093: IFFALSE 8097
// exit ;
8095: GO 8298
// side := GetSide ( un ) ;
8097: LD_ADDR_VAR 0 9
8101: PUSH
8102: LD_VAR 0 1
8106: PPUSH
8107: CALL_OW 255
8111: ST_TO_ADDR
// nation := GetNation ( un ) ;
8112: LD_ADDR_VAR 0 8
8116: PUSH
8117: LD_VAR 0 1
8121: PPUSH
8122: CALL_OW 248
8126: ST_TO_ADDR
// class := GetClass ( un ) ;
8127: LD_ADDR_VAR 0 6
8131: PUSH
8132: LD_VAR 0 1
8136: PPUSH
8137: CALL_OW 257
8141: ST_TO_ADDR
// if class > 4 then
8142: LD_VAR 0 6
8146: PUSH
8147: LD_INT 4
8149: GREATER
8150: IFFALSE 8160
// class := 1 ;
8152: LD_ADDR_VAR 0 6
8156: PUSH
8157: LD_INT 1
8159: ST_TO_ADDR
// repeat wait ( 10 ) ;
8160: LD_INT 10
8162: PPUSH
8163: CALL_OW 67
// until not mpBlockRespThread ;
8167: LD_EXP 45
8171: NOT
8172: IFFALSE 8160
// mpBlockRespThread := true ;
8174: LD_ADDR_EXP 45
8178: PUSH
8179: LD_INT 1
8181: ST_TO_ADDR
// uc_side := side ;
8182: LD_ADDR_OWVAR 20
8186: PUSH
8187: LD_VAR 0 9
8191: ST_TO_ADDR
// uc_nation := nation ;
8192: LD_ADDR_OWVAR 21
8196: PUSH
8197: LD_VAR 0 8
8201: ST_TO_ADDR
// PrepareHuman ( false , class , 2 ) ;
8202: LD_INT 0
8204: PPUSH
8205: LD_VAR 0 6
8209: PPUSH
8210: LD_INT 2
8212: PPUSH
8213: CALL_OW 380
// un := CreateHuman ;
8217: LD_ADDR_VAR 0 1
8221: PUSH
8222: CALL_OW 44
8226: ST_TO_ADDR
// mpRespawnPull := Replace ( mpRespawnPull , side , Replace ( mpRespawnPull [ side ] , mpRespawnPull [ side ] + 1 , un ) ) ;
8227: LD_ADDR_EXP 40
8231: PUSH
8232: LD_EXP 40
8236: PPUSH
8237: LD_VAR 0 9
8241: PPUSH
8242: LD_EXP 40
8246: PUSH
8247: LD_VAR 0 9
8251: ARRAY
8252: PPUSH
8253: LD_EXP 40
8257: PUSH
8258: LD_VAR 0 9
8262: ARRAY
8263: PUSH
8264: LD_INT 1
8266: PLUS
8267: PPUSH
8268: LD_VAR 0 1
8272: PPUSH
8273: CALL_OW 1
8277: PPUSH
8278: CALL_OW 1
8282: ST_TO_ADDR
// wait ( 10 ) ;
8283: LD_INT 10
8285: PPUSH
8286: CALL_OW 67
// mpBlockRespThread := false ;
8290: LD_ADDR_EXP 45
8294: PUSH
8295: LD_INT 0
8297: ST_TO_ADDR
// end ; end ;
8298: LD_VAR 0 2
8302: RET
// export function Multiplayer_BuildingComplete ( building ) ; begin
8303: LD_INT 0
8305: PPUSH
// if GetBType ( building ) in [ b_depot , b_warehouse ] then
8306: LD_VAR 0 1
8310: PPUSH
8311: CALL_OW 266
8315: PUSH
8316: LD_INT 0
8318: PUSH
8319: LD_INT 1
8321: PUSH
8322: EMPTY
8323: LIST
8324: LIST
8325: IN
8326: IFFALSE 8351
// SetBName ( building , @ & GetSide ( building ) ) ;
8328: LD_VAR 0 1
8332: PPUSH
8333: LD_STRING @
8335: PUSH
8336: LD_VAR 0 1
8340: PPUSH
8341: CALL_OW 255
8345: STR
8346: PPUSH
8347: CALL_OW 500
// end ;
8351: LD_VAR 0 2
8355: RET
// export function Multiplayer_BuildingCaptured ( building , oldSide , unit ) ; var i ; begin
8356: LD_INT 0
8358: PPUSH
8359: PPUSH
// if mpGameType = GameTypeSurvival and GetBType ( building ) in [ b_depot , b_warehouse ] then
8360: LD_EXP 3
8364: PUSH
8365: LD_INT 2
8367: EQUAL
8368: PUSH
8369: LD_VAR 0 1
8373: PPUSH
8374: CALL_OW 266
8378: PUSH
8379: LD_INT 0
8381: PUSH
8382: LD_INT 1
8384: PUSH
8385: EMPTY
8386: LIST
8387: LIST
8388: IN
8389: AND
8390: IFFALSE 8455
// begin KillUnit ( building ) ;
8392: LD_VAR 0 1
8396: PPUSH
8397: CALL_OW 66
// for i in FilterAllUnits ( [ [ f_side , oldSide ] , [ f_type , unit_human ] ] ) do
8401: LD_ADDR_VAR 0 5
8405: PUSH
8406: LD_INT 22
8408: PUSH
8409: LD_VAR 0 2
8413: PUSH
8414: EMPTY
8415: LIST
8416: LIST
8417: PUSH
8418: LD_INT 21
8420: PUSH
8421: LD_INT 1
8423: PUSH
8424: EMPTY
8425: LIST
8426: LIST
8427: PUSH
8428: EMPTY
8429: LIST
8430: LIST
8431: PPUSH
8432: CALL_OW 69
8436: PUSH
8437: FOR_IN
8438: IFFALSE 8451
// KillUnit ( i ) ;
8440: LD_VAR 0 5
8444: PPUSH
8445: CALL_OW 66
8449: GO 8437
8451: POP
8452: POP
// exit ;
8453: GO 8500
// end ; if GetBType ( building ) in [ b_depot , b_warehouse ] then
8455: LD_VAR 0 1
8459: PPUSH
8460: CALL_OW 266
8464: PUSH
8465: LD_INT 0
8467: PUSH
8468: LD_INT 1
8470: PUSH
8471: EMPTY
8472: LIST
8473: LIST
8474: IN
8475: IFFALSE 8500
// SetBName ( building , @ & GetSide ( building ) ) ;
8477: LD_VAR 0 1
8481: PPUSH
8482: LD_STRING @
8484: PUSH
8485: LD_VAR 0 1
8489: PPUSH
8490: CALL_OW 255
8494: STR
8495: PPUSH
8496: CALL_OW 500
// end ;
8500: LD_VAR 0 4
8504: RET
// export function Multiplayer_OilExtracted ( building , side , base , amount ) ; var i , value ; begin
8505: LD_INT 0
8507: PPUSH
8508: PPUSH
8509: PPUSH
// if mpGameType <> GameTypeFamine then
8510: LD_EXP 3
8514: PUSH
8515: LD_INT 5
8517: NONEQUAL
8518: IFFALSE 8522
// exit ;
8520: GO 8736
// for i := 1 to mpGlobalOilDeposits do
8522: LD_ADDR_VAR 0 6
8526: PUSH
8527: DOUBLE
8528: LD_INT 1
8530: DEC
8531: ST_TO_ADDR
8532: LD_EXP 41
8536: PUSH
8537: FOR_TO
8538: IFFALSE 8734
// begin if HexInfo ( mpGlobalOilDeposits [ i ] [ 1 ] , mpGlobalOilDeposits [ i ] [ 2 ] ) = building then
8540: LD_EXP 41
8544: PUSH
8545: LD_VAR 0 6
8549: ARRAY
8550: PUSH
8551: LD_INT 1
8553: ARRAY
8554: PPUSH
8555: LD_EXP 41
8559: PUSH
8560: LD_VAR 0 6
8564: ARRAY
8565: PUSH
8566: LD_INT 2
8568: ARRAY
8569: PPUSH
8570: CALL_OW 428
8574: PUSH
8575: LD_VAR 0 1
8579: EQUAL
8580: IFFALSE 8732
// begin value := mpGlobalOilDeposits [ i ] [ 3 ] ;
8582: LD_ADDR_VAR 0 7
8586: PUSH
8587: LD_EXP 41
8591: PUSH
8592: LD_VAR 0 6
8596: ARRAY
8597: PUSH
8598: LD_INT 3
8600: ARRAY
8601: ST_TO_ADDR
// value := Dec ( value ) ;
8602: LD_ADDR_VAR 0 7
8606: PUSH
8607: LD_VAR 0 7
8611: PPUSH
8612: CALL 48904 0 1
8616: ST_TO_ADDR
// mpGlobalOilDeposits := Replace ( mpGlobalOilDeposits , i , Replace ( mpGlobalOilDeposits [ i ] , 3 , value ) ) ;
8617: LD_ADDR_EXP 41
8621: PUSH
8622: LD_EXP 41
8626: PPUSH
8627: LD_VAR 0 6
8631: PPUSH
8632: LD_EXP 41
8636: PUSH
8637: LD_VAR 0 6
8641: ARRAY
8642: PPUSH
8643: LD_INT 3
8645: PPUSH
8646: LD_VAR 0 7
8650: PPUSH
8651: CALL_OW 1
8655: PPUSH
8656: CALL_OW 1
8660: ST_TO_ADDR
// SetUnitDisplayNumber ( building , value ) ;
8661: LD_VAR 0 1
8665: PPUSH
8666: LD_VAR 0 7
8670: PPUSH
8671: CALL_OW 505
// if value = 0 then
8675: LD_VAR 0 7
8679: PUSH
8680: LD_INT 0
8682: EQUAL
8683: IFFALSE 8732
// begin RemoveDepositXY ( mpGlobalOilDeposits [ i ] [ 1 ] , mpGlobalOilDeposits [ i ] [ 2 ] ) ;
8685: LD_EXP 41
8689: PUSH
8690: LD_VAR 0 6
8694: ARRAY
8695: PUSH
8696: LD_INT 1
8698: ARRAY
8699: PPUSH
8700: LD_EXP 41
8704: PUSH
8705: LD_VAR 0 6
8709: ARRAY
8710: PUSH
8711: LD_INT 2
8713: ARRAY
8714: PPUSH
8715: CALL_OW 63
// KillUnit ( building ) ;
8719: LD_VAR 0 1
8723: PPUSH
8724: CALL_OW 66
// exit ;
8728: POP
8729: POP
8730: GO 8736
// end ; end ; end ;
8732: GO 8537
8734: POP
8735: POP
// end ;
8736: LD_VAR 0 5
8740: RET
// export function Multiplayer_SibExtracted ( building , side , base , amount ) ; var i , value ; begin
8741: LD_INT 0
8743: PPUSH
8744: PPUSH
8745: PPUSH
// if mpGameType <> GameTypeFamine then
8746: LD_EXP 3
8750: PUSH
8751: LD_INT 5
8753: NONEQUAL
8754: IFFALSE 8758
// exit ;
8756: GO 8972
// for i := 1 to mpGlobalSibDeposits do
8758: LD_ADDR_VAR 0 6
8762: PUSH
8763: DOUBLE
8764: LD_INT 1
8766: DEC
8767: ST_TO_ADDR
8768: LD_EXP 42
8772: PUSH
8773: FOR_TO
8774: IFFALSE 8970
// begin if HexInfo ( mpGlobalSibDeposits [ i ] [ 1 ] , mpGlobalSibDeposits [ i ] [ 2 ] ) = building then
8776: LD_EXP 42
8780: PUSH
8781: LD_VAR 0 6
8785: ARRAY
8786: PUSH
8787: LD_INT 1
8789: ARRAY
8790: PPUSH
8791: LD_EXP 42
8795: PUSH
8796: LD_VAR 0 6
8800: ARRAY
8801: PUSH
8802: LD_INT 2
8804: ARRAY
8805: PPUSH
8806: CALL_OW 428
8810: PUSH
8811: LD_VAR 0 1
8815: EQUAL
8816: IFFALSE 8968
// begin value := mpGlobalSibDeposits [ i ] [ 3 ] ;
8818: LD_ADDR_VAR 0 7
8822: PUSH
8823: LD_EXP 42
8827: PUSH
8828: LD_VAR 0 6
8832: ARRAY
8833: PUSH
8834: LD_INT 3
8836: ARRAY
8837: ST_TO_ADDR
// value := Dec ( value ) ;
8838: LD_ADDR_VAR 0 7
8842: PUSH
8843: LD_VAR 0 7
8847: PPUSH
8848: CALL 48904 0 1
8852: ST_TO_ADDR
// mpGlobalSibDeposits := Replace ( mpGlobalSibDeposits , i , Replace ( mpGlobalSibDeposits [ i ] , 3 , value ) ) ;
8853: LD_ADDR_EXP 42
8857: PUSH
8858: LD_EXP 42
8862: PPUSH
8863: LD_VAR 0 6
8867: PPUSH
8868: LD_EXP 42
8872: PUSH
8873: LD_VAR 0 6
8877: ARRAY
8878: PPUSH
8879: LD_INT 3
8881: PPUSH
8882: LD_VAR 0 7
8886: PPUSH
8887: CALL_OW 1
8891: PPUSH
8892: CALL_OW 1
8896: ST_TO_ADDR
// SetUnitDisplayNumber ( building , value ) ;
8897: LD_VAR 0 1
8901: PPUSH
8902: LD_VAR 0 7
8906: PPUSH
8907: CALL_OW 505
// if value = 0 then
8911: LD_VAR 0 7
8915: PUSH
8916: LD_INT 0
8918: EQUAL
8919: IFFALSE 8968
// begin RemoveDepositXY ( mpGlobalSibDeposits [ i ] [ 1 ] , mpGlobalSibDeposits [ i ] [ 2 ] ) ;
8921: LD_EXP 42
8925: PUSH
8926: LD_VAR 0 6
8930: ARRAY
8931: PUSH
8932: LD_INT 1
8934: ARRAY
8935: PPUSH
8936: LD_EXP 42
8940: PUSH
8941: LD_VAR 0 6
8945: ARRAY
8946: PUSH
8947: LD_INT 2
8949: ARRAY
8950: PPUSH
8951: CALL_OW 63
// KillUnit ( building ) ;
8955: LD_VAR 0 1
8959: PPUSH
8960: CALL_OW 66
// exit ;
8964: POP
8965: POP
8966: GO 8972
// end ; end ; end ;
8968: GO 8773
8970: POP
8971: POP
// end ; end_of_file
8972: LD_VAR 0 5
8976: RET
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeNormal do var i , canWin ;
8977: LD_EXP 39
8981: PUSH
8982: CALL 9187 0 0
8986: AND
8987: PUSH
8988: LD_OWVAR 4
8992: AND
8993: IFFALSE 9184
8995: GO 8997
8997: DISABLE
8998: LD_INT 0
9000: PPUSH
9001: PPUSH
// begin canWin := false ;
9002: LD_ADDR_VAR 0 2
9006: PUSH
9007: LD_INT 0
9009: ST_TO_ADDR
// if not HasPower ( your_side ) then
9010: LD_OWVAR 2
9014: PPUSH
9015: CALL 9227 0 1
9019: NOT
9020: IFFALSE 9031
// begin Multiplayer_Loose_Message ;
9022: CALL_OW 521
// enable ( mpLose ) ;
9026: LD_INT 102
9028: ENABLE_MARKED
// end else
9029: GO 9184
// begin canWin := true ;
9031: LD_ADDR_VAR 0 2
9035: PUSH
9036: LD_INT 1
9038: ST_TO_ADDR
// for i := 1 to 8 do
9039: LD_ADDR_VAR 0 1
9043: PUSH
9044: DOUBLE
9045: LD_INT 1
9047: DEC
9048: ST_TO_ADDR
9049: LD_INT 8
9051: PUSH
9052: FOR_TO
9053: IFFALSE 9170
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
9055: LD_EXP 7
9059: PUSH
9060: LD_VAR 0 1
9064: ARRAY
9065: PUSH
9066: LD_VAR 0 1
9070: PPUSH
9071: CALL_OW 108
9075: AND
9076: PUSH
9077: LD_VAR 0 1
9081: PUSH
9082: LD_OWVAR 2
9086: NONEQUAL
9087: AND
9088: IFFALSE 9168
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
9090: LD_EXP 8
9094: PUSH
9095: LD_VAR 0 1
9099: ARRAY
9100: NOT
9101: PUSH
9102: LD_EXP 8
9106: PUSH
9107: LD_VAR 0 1
9111: ARRAY
9112: PUSH
9113: LD_EXP 8
9117: PUSH
9118: LD_OWVAR 2
9122: ARRAY
9123: NONEQUAL
9124: PUSH
9125: LD_OWVAR 2
9129: PPUSH
9130: LD_VAR 0 1
9134: PPUSH
9135: CALL_OW 81
9139: PUSH
9140: LD_INT 1
9142: NONEQUAL
9143: AND
9144: OR
9145: IFFALSE 9168
// if HasPower ( i ) then
9147: LD_VAR 0 1
9151: PPUSH
9152: CALL 9227 0 1
9156: IFFALSE 9168
// begin canWin := false ;
9158: LD_ADDR_VAR 0 2
9162: PUSH
9163: LD_INT 0
9165: ST_TO_ADDR
// break ;
9166: GO 9170
// end ;
9168: GO 9052
9170: POP
9171: POP
// if canWin then
9172: LD_VAR 0 2
9176: IFFALSE 9183
// enable ( mpWin ) else
9178: LD_INT 101
9180: ENABLE_MARKED
9181: GO 9184
// enable ;
9183: ENABLE
// end ; end ;
9184: PPOPN 2
9186: END
// function CanWinLoose ; begin
9187: LD_INT 0
9189: PPUSH
// result := true ;
9190: LD_ADDR_VAR 0 1
9194: PUSH
9195: LD_INT 1
9197: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
9198: CALL_OW 531
9202: PUSH
9203: CALL_OW 519
9207: PUSH
9208: LD_INT 1
9210: GREATER
9211: AND
9212: IFFALSE 9222
// result := false ;
9214: LD_ADDR_VAR 0 1
9218: PUSH
9219: LD_INT 0
9221: ST_TO_ADDR
// end ;
9222: LD_VAR 0 1
9226: RET
// function HasPower ( i ) ; begin
9227: LD_INT 0
9229: PPUSH
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
9230: LD_ADDR_VAR 0 2
9234: PUSH
9235: LD_INT 22
9237: PUSH
9238: LD_VAR 0 1
9242: PUSH
9243: EMPTY
9244: LIST
9245: LIST
9246: PUSH
9247: LD_INT 2
9249: PUSH
9250: LD_INT 21
9252: PUSH
9253: LD_INT 1
9255: PUSH
9256: EMPTY
9257: LIST
9258: LIST
9259: PUSH
9260: LD_INT 33
9262: PUSH
9263: LD_INT 3
9265: PUSH
9266: EMPTY
9267: LIST
9268: LIST
9269: PUSH
9270: LD_INT 33
9272: PUSH
9273: LD_INT 5
9275: PUSH
9276: EMPTY
9277: LIST
9278: LIST
9279: PUSH
9280: EMPTY
9281: LIST
9282: LIST
9283: LIST
9284: LIST
9285: PUSH
9286: EMPTY
9287: LIST
9288: LIST
9289: PPUSH
9290: CALL_OW 69
9294: ST_TO_ADDR
// end ; end_of_file
9295: LD_VAR 0 2
9299: RET
// every 0 0$1 trigger mpGameActive marked GameTypeSurvival do var i ;
9300: LD_EXP 39
9304: IFFALSE 9347
9306: GO 9308
9308: DISABLE
9309: LD_INT 0
9311: PPUSH
// begin for i := 1 to 8 do
9312: LD_ADDR_VAR 0 1
9316: PUSH
9317: DOUBLE
9318: LD_INT 1
9320: DEC
9321: ST_TO_ADDR
9322: LD_INT 8
9324: PUSH
9325: FOR_TO
9326: IFFALSE 9345
// SetRestrict ( b_depot , i , state_disabled ) ;
9328: LD_INT 0
9330: PPUSH
9331: LD_VAR 0 1
9335: PPUSH
9336: LD_INT 0
9338: PPUSH
9339: CALL_OW 324
9343: GO 9325
9345: POP
9346: POP
// end ;
9347: PPOPN 1
9349: END
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeSurvival do var i , canWin ;
9350: LD_EXP 39
9354: PUSH
9355: CALL 9560 0 0
9359: AND
9360: PUSH
9361: LD_OWVAR 4
9365: AND
9366: IFFALSE 9557
9368: GO 9370
9370: DISABLE
9371: LD_INT 0
9373: PPUSH
9374: PPUSH
// begin canWin := false ;
9375: LD_ADDR_VAR 0 2
9379: PUSH
9380: LD_INT 0
9382: ST_TO_ADDR
// if not HasPower ( your_side ) then
9383: LD_OWVAR 2
9387: PPUSH
9388: CALL 9600 0 1
9392: NOT
9393: IFFALSE 9404
// begin Multiplayer_Loose_Message ;
9395: CALL_OW 521
// enable ( mpLose ) ;
9399: LD_INT 102
9401: ENABLE_MARKED
// end else
9402: GO 9557
// begin canWin := true ;
9404: LD_ADDR_VAR 0 2
9408: PUSH
9409: LD_INT 1
9411: ST_TO_ADDR
// for i := 1 to 8 do
9412: LD_ADDR_VAR 0 1
9416: PUSH
9417: DOUBLE
9418: LD_INT 1
9420: DEC
9421: ST_TO_ADDR
9422: LD_INT 8
9424: PUSH
9425: FOR_TO
9426: IFFALSE 9543
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
9428: LD_EXP 7
9432: PUSH
9433: LD_VAR 0 1
9437: ARRAY
9438: PUSH
9439: LD_VAR 0 1
9443: PPUSH
9444: CALL_OW 108
9448: AND
9449: PUSH
9450: LD_VAR 0 1
9454: PUSH
9455: LD_OWVAR 2
9459: NONEQUAL
9460: AND
9461: IFFALSE 9541
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
9463: LD_EXP 8
9467: PUSH
9468: LD_VAR 0 1
9472: ARRAY
9473: NOT
9474: PUSH
9475: LD_EXP 8
9479: PUSH
9480: LD_VAR 0 1
9484: ARRAY
9485: PUSH
9486: LD_EXP 8
9490: PUSH
9491: LD_OWVAR 2
9495: ARRAY
9496: NONEQUAL
9497: PUSH
9498: LD_OWVAR 2
9502: PPUSH
9503: LD_VAR 0 1
9507: PPUSH
9508: CALL_OW 81
9512: PUSH
9513: LD_INT 1
9515: NONEQUAL
9516: AND
9517: OR
9518: IFFALSE 9541
// if HasPower ( i ) then
9520: LD_VAR 0 1
9524: PPUSH
9525: CALL 9600 0 1
9529: IFFALSE 9541
// begin canWin := false ;
9531: LD_ADDR_VAR 0 2
9535: PUSH
9536: LD_INT 0
9538: ST_TO_ADDR
// break ;
9539: GO 9543
// end ;
9541: GO 9425
9543: POP
9544: POP
// if canWin then
9545: LD_VAR 0 2
9549: IFFALSE 9556
// enable ( mpWin ) else
9551: LD_INT 101
9553: ENABLE_MARKED
9554: GO 9557
// enable ;
9556: ENABLE
// end ; end ;
9557: PPOPN 2
9559: END
// function CanWinLoose ; begin
9560: LD_INT 0
9562: PPUSH
// result := true ;
9563: LD_ADDR_VAR 0 1
9567: PUSH
9568: LD_INT 1
9570: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
9571: CALL_OW 531
9575: PUSH
9576: CALL_OW 519
9580: PUSH
9581: LD_INT 1
9583: GREATER
9584: AND
9585: IFFALSE 9595
// result := false ;
9587: LD_ADDR_VAR 0 1
9591: PUSH
9592: LD_INT 0
9594: ST_TO_ADDR
// end ;
9595: LD_VAR 0 1
9599: RET
// function HasPower ( i ) ; begin
9600: LD_INT 0
9602: PPUSH
// if not FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) then
9603: LD_INT 22
9605: PUSH
9606: LD_VAR 0 1
9610: PUSH
9611: EMPTY
9612: LIST
9613: LIST
9614: PUSH
9615: LD_INT 2
9617: PUSH
9618: LD_INT 30
9620: PUSH
9621: LD_INT 0
9623: PUSH
9624: EMPTY
9625: LIST
9626: LIST
9627: PUSH
9628: LD_INT 30
9630: PUSH
9631: LD_INT 1
9633: PUSH
9634: EMPTY
9635: LIST
9636: LIST
9637: PUSH
9638: EMPTY
9639: LIST
9640: LIST
9641: LIST
9642: PUSH
9643: EMPTY
9644: LIST
9645: LIST
9646: PPUSH
9647: CALL_OW 69
9651: NOT
9652: IFFALSE 9656
// exit ;
9654: GO 9721
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
9656: LD_ADDR_VAR 0 2
9660: PUSH
9661: LD_INT 22
9663: PUSH
9664: LD_VAR 0 1
9668: PUSH
9669: EMPTY
9670: LIST
9671: LIST
9672: PUSH
9673: LD_INT 2
9675: PUSH
9676: LD_INT 21
9678: PUSH
9679: LD_INT 1
9681: PUSH
9682: EMPTY
9683: LIST
9684: LIST
9685: PUSH
9686: LD_INT 33
9688: PUSH
9689: LD_INT 3
9691: PUSH
9692: EMPTY
9693: LIST
9694: LIST
9695: PUSH
9696: LD_INT 33
9698: PUSH
9699: LD_INT 5
9701: PUSH
9702: EMPTY
9703: LIST
9704: LIST
9705: PUSH
9706: EMPTY
9707: LIST
9708: LIST
9709: LIST
9710: LIST
9711: PUSH
9712: EMPTY
9713: LIST
9714: LIST
9715: PPUSH
9716: CALL_OW 69
9720: ST_TO_ADDR
// end ; end_of_file
9721: LD_VAR 0 2
9725: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
9726: LD_INT 0
9728: PPUSH
9729: PPUSH
// if exist_mode then
9730: LD_VAR 0 2
9734: IFFALSE 9780
// begin unit := CreateCharacter ( prefix & ident ) ;
9736: LD_ADDR_VAR 0 5
9740: PUSH
9741: LD_VAR 0 3
9745: PUSH
9746: LD_VAR 0 1
9750: STR
9751: PPUSH
9752: CALL_OW 34
9756: ST_TO_ADDR
// if unit then
9757: LD_VAR 0 5
9761: IFFALSE 9778
// DeleteCharacters ( prefix & ident ) ;
9763: LD_VAR 0 3
9767: PUSH
9768: LD_VAR 0 1
9772: STR
9773: PPUSH
9774: CALL_OW 40
// end else
9778: GO 9795
// unit := NewCharacter ( ident ) ;
9780: LD_ADDR_VAR 0 5
9784: PUSH
9785: LD_VAR 0 1
9789: PPUSH
9790: CALL_OW 25
9794: ST_TO_ADDR
// result := unit ;
9795: LD_ADDR_VAR 0 4
9799: PUSH
9800: LD_VAR 0 5
9804: ST_TO_ADDR
// end ;
9805: LD_VAR 0 4
9809: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
9810: LD_INT 0
9812: PPUSH
9813: PPUSH
// if exist_mode then
9814: LD_VAR 0 2
9818: IFFALSE 9843
// unit := CreateCharacter ( prefix & ident ) else
9820: LD_ADDR_VAR 0 5
9824: PUSH
9825: LD_VAR 0 3
9829: PUSH
9830: LD_VAR 0 1
9834: STR
9835: PPUSH
9836: CALL_OW 34
9840: ST_TO_ADDR
9841: GO 9858
// unit := NewCharacter ( ident ) ;
9843: LD_ADDR_VAR 0 5
9847: PUSH
9848: LD_VAR 0 1
9852: PPUSH
9853: CALL_OW 25
9857: ST_TO_ADDR
// result := unit ;
9858: LD_ADDR_VAR 0 4
9862: PUSH
9863: LD_VAR 0 5
9867: ST_TO_ADDR
// end ;
9868: LD_VAR 0 4
9872: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
9873: LD_INT 0
9875: PPUSH
9876: PPUSH
// if not side or not nation then
9877: LD_VAR 0 1
9881: NOT
9882: PUSH
9883: LD_VAR 0 2
9887: NOT
9888: OR
9889: IFFALSE 9893
// exit ;
9891: GO 10661
// case nation of nation_american :
9893: LD_VAR 0 2
9897: PUSH
9898: LD_INT 1
9900: DOUBLE
9901: EQUAL
9902: IFTRUE 9906
9904: GO 10120
9906: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
9907: LD_ADDR_VAR 0 4
9911: PUSH
9912: LD_INT 35
9914: PUSH
9915: LD_INT 45
9917: PUSH
9918: LD_INT 46
9920: PUSH
9921: LD_INT 47
9923: PUSH
9924: LD_INT 82
9926: PUSH
9927: LD_INT 83
9929: PUSH
9930: LD_INT 84
9932: PUSH
9933: LD_INT 85
9935: PUSH
9936: LD_INT 86
9938: PUSH
9939: LD_INT 1
9941: PUSH
9942: LD_INT 2
9944: PUSH
9945: LD_INT 6
9947: PUSH
9948: LD_INT 15
9950: PUSH
9951: LD_INT 16
9953: PUSH
9954: LD_INT 7
9956: PUSH
9957: LD_INT 12
9959: PUSH
9960: LD_INT 13
9962: PUSH
9963: LD_INT 10
9965: PUSH
9966: LD_INT 14
9968: PUSH
9969: LD_INT 20
9971: PUSH
9972: LD_INT 21
9974: PUSH
9975: LD_INT 22
9977: PUSH
9978: LD_INT 25
9980: PUSH
9981: LD_INT 32
9983: PUSH
9984: LD_INT 27
9986: PUSH
9987: LD_INT 36
9989: PUSH
9990: LD_INT 69
9992: PUSH
9993: LD_INT 39
9995: PUSH
9996: LD_INT 34
9998: PUSH
9999: LD_INT 40
10001: PUSH
10002: LD_INT 48
10004: PUSH
10005: LD_INT 49
10007: PUSH
10008: LD_INT 50
10010: PUSH
10011: LD_INT 51
10013: PUSH
10014: LD_INT 52
10016: PUSH
10017: LD_INT 53
10019: PUSH
10020: LD_INT 54
10022: PUSH
10023: LD_INT 55
10025: PUSH
10026: LD_INT 56
10028: PUSH
10029: LD_INT 57
10031: PUSH
10032: LD_INT 58
10034: PUSH
10035: LD_INT 59
10037: PUSH
10038: LD_INT 60
10040: PUSH
10041: LD_INT 61
10043: PUSH
10044: LD_INT 62
10046: PUSH
10047: LD_INT 80
10049: PUSH
10050: LD_INT 82
10052: PUSH
10053: LD_INT 83
10055: PUSH
10056: LD_INT 84
10058: PUSH
10059: LD_INT 85
10061: PUSH
10062: LD_INT 86
10064: PUSH
10065: EMPTY
10066: LIST
10067: LIST
10068: LIST
10069: LIST
10070: LIST
10071: LIST
10072: LIST
10073: LIST
10074: LIST
10075: LIST
10076: LIST
10077: LIST
10078: LIST
10079: LIST
10080: LIST
10081: LIST
10082: LIST
10083: LIST
10084: LIST
10085: LIST
10086: LIST
10087: LIST
10088: LIST
10089: LIST
10090: LIST
10091: LIST
10092: LIST
10093: LIST
10094: LIST
10095: LIST
10096: LIST
10097: LIST
10098: LIST
10099: LIST
10100: LIST
10101: LIST
10102: LIST
10103: LIST
10104: LIST
10105: LIST
10106: LIST
10107: LIST
10108: LIST
10109: LIST
10110: LIST
10111: LIST
10112: LIST
10113: LIST
10114: LIST
10115: LIST
10116: LIST
10117: ST_TO_ADDR
10118: GO 10585
10120: LD_INT 2
10122: DOUBLE
10123: EQUAL
10124: IFTRUE 10128
10126: GO 10354
10128: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
10129: LD_ADDR_VAR 0 4
10133: PUSH
10134: LD_INT 35
10136: PUSH
10137: LD_INT 45
10139: PUSH
10140: LD_INT 46
10142: PUSH
10143: LD_INT 47
10145: PUSH
10146: LD_INT 82
10148: PUSH
10149: LD_INT 83
10151: PUSH
10152: LD_INT 84
10154: PUSH
10155: LD_INT 85
10157: PUSH
10158: LD_INT 87
10160: PUSH
10161: LD_INT 70
10163: PUSH
10164: LD_INT 1
10166: PUSH
10167: LD_INT 11
10169: PUSH
10170: LD_INT 3
10172: PUSH
10173: LD_INT 4
10175: PUSH
10176: LD_INT 5
10178: PUSH
10179: LD_INT 6
10181: PUSH
10182: LD_INT 15
10184: PUSH
10185: LD_INT 18
10187: PUSH
10188: LD_INT 7
10190: PUSH
10191: LD_INT 17
10193: PUSH
10194: LD_INT 8
10196: PUSH
10197: LD_INT 20
10199: PUSH
10200: LD_INT 21
10202: PUSH
10203: LD_INT 22
10205: PUSH
10206: LD_INT 72
10208: PUSH
10209: LD_INT 26
10211: PUSH
10212: LD_INT 69
10214: PUSH
10215: LD_INT 39
10217: PUSH
10218: LD_INT 40
10220: PUSH
10221: LD_INT 41
10223: PUSH
10224: LD_INT 42
10226: PUSH
10227: LD_INT 43
10229: PUSH
10230: LD_INT 48
10232: PUSH
10233: LD_INT 49
10235: PUSH
10236: LD_INT 50
10238: PUSH
10239: LD_INT 51
10241: PUSH
10242: LD_INT 52
10244: PUSH
10245: LD_INT 53
10247: PUSH
10248: LD_INT 54
10250: PUSH
10251: LD_INT 55
10253: PUSH
10254: LD_INT 56
10256: PUSH
10257: LD_INT 60
10259: PUSH
10260: LD_INT 61
10262: PUSH
10263: LD_INT 62
10265: PUSH
10266: LD_INT 66
10268: PUSH
10269: LD_INT 67
10271: PUSH
10272: LD_INT 68
10274: PUSH
10275: LD_INT 81
10277: PUSH
10278: LD_INT 82
10280: PUSH
10281: LD_INT 83
10283: PUSH
10284: LD_INT 84
10286: PUSH
10287: LD_INT 85
10289: PUSH
10290: LD_INT 87
10292: PUSH
10293: LD_INT 88
10295: PUSH
10296: EMPTY
10297: LIST
10298: LIST
10299: LIST
10300: LIST
10301: LIST
10302: LIST
10303: LIST
10304: LIST
10305: LIST
10306: LIST
10307: LIST
10308: LIST
10309: LIST
10310: LIST
10311: LIST
10312: LIST
10313: LIST
10314: LIST
10315: LIST
10316: LIST
10317: LIST
10318: LIST
10319: LIST
10320: LIST
10321: LIST
10322: LIST
10323: LIST
10324: LIST
10325: LIST
10326: LIST
10327: LIST
10328: LIST
10329: LIST
10330: LIST
10331: LIST
10332: LIST
10333: LIST
10334: LIST
10335: LIST
10336: LIST
10337: LIST
10338: LIST
10339: LIST
10340: LIST
10341: LIST
10342: LIST
10343: LIST
10344: LIST
10345: LIST
10346: LIST
10347: LIST
10348: LIST
10349: LIST
10350: LIST
10351: ST_TO_ADDR
10352: GO 10585
10354: LD_INT 3
10356: DOUBLE
10357: EQUAL
10358: IFTRUE 10362
10360: GO 10584
10362: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
10363: LD_ADDR_VAR 0 4
10367: PUSH
10368: LD_INT 46
10370: PUSH
10371: LD_INT 47
10373: PUSH
10374: LD_INT 1
10376: PUSH
10377: LD_INT 2
10379: PUSH
10380: LD_INT 82
10382: PUSH
10383: LD_INT 83
10385: PUSH
10386: LD_INT 84
10388: PUSH
10389: LD_INT 85
10391: PUSH
10392: LD_INT 86
10394: PUSH
10395: LD_INT 11
10397: PUSH
10398: LD_INT 9
10400: PUSH
10401: LD_INT 20
10403: PUSH
10404: LD_INT 19
10406: PUSH
10407: LD_INT 21
10409: PUSH
10410: LD_INT 24
10412: PUSH
10413: LD_INT 22
10415: PUSH
10416: LD_INT 25
10418: PUSH
10419: LD_INT 28
10421: PUSH
10422: LD_INT 29
10424: PUSH
10425: LD_INT 30
10427: PUSH
10428: LD_INT 31
10430: PUSH
10431: LD_INT 37
10433: PUSH
10434: LD_INT 38
10436: PUSH
10437: LD_INT 32
10439: PUSH
10440: LD_INT 27
10442: PUSH
10443: LD_INT 33
10445: PUSH
10446: LD_INT 69
10448: PUSH
10449: LD_INT 39
10451: PUSH
10452: LD_INT 34
10454: PUSH
10455: LD_INT 40
10457: PUSH
10458: LD_INT 71
10460: PUSH
10461: LD_INT 23
10463: PUSH
10464: LD_INT 44
10466: PUSH
10467: LD_INT 48
10469: PUSH
10470: LD_INT 49
10472: PUSH
10473: LD_INT 50
10475: PUSH
10476: LD_INT 51
10478: PUSH
10479: LD_INT 52
10481: PUSH
10482: LD_INT 53
10484: PUSH
10485: LD_INT 54
10487: PUSH
10488: LD_INT 55
10490: PUSH
10491: LD_INT 56
10493: PUSH
10494: LD_INT 57
10496: PUSH
10497: LD_INT 58
10499: PUSH
10500: LD_INT 59
10502: PUSH
10503: LD_INT 63
10505: PUSH
10506: LD_INT 64
10508: PUSH
10509: LD_INT 65
10511: PUSH
10512: LD_INT 82
10514: PUSH
10515: LD_INT 83
10517: PUSH
10518: LD_INT 84
10520: PUSH
10521: LD_INT 85
10523: PUSH
10524: LD_INT 86
10526: PUSH
10527: EMPTY
10528: LIST
10529: LIST
10530: LIST
10531: LIST
10532: LIST
10533: LIST
10534: LIST
10535: LIST
10536: LIST
10537: LIST
10538: LIST
10539: LIST
10540: LIST
10541: LIST
10542: LIST
10543: LIST
10544: LIST
10545: LIST
10546: LIST
10547: LIST
10548: LIST
10549: LIST
10550: LIST
10551: LIST
10552: LIST
10553: LIST
10554: LIST
10555: LIST
10556: LIST
10557: LIST
10558: LIST
10559: LIST
10560: LIST
10561: LIST
10562: LIST
10563: LIST
10564: LIST
10565: LIST
10566: LIST
10567: LIST
10568: LIST
10569: LIST
10570: LIST
10571: LIST
10572: LIST
10573: LIST
10574: LIST
10575: LIST
10576: LIST
10577: LIST
10578: LIST
10579: LIST
10580: LIST
10581: ST_TO_ADDR
10582: GO 10585
10584: POP
// if state > - 1 and state < 3 then
10585: LD_VAR 0 3
10589: PUSH
10590: LD_INT 1
10592: NEG
10593: GREATER
10594: PUSH
10595: LD_VAR 0 3
10599: PUSH
10600: LD_INT 3
10602: LESS
10603: AND
10604: IFFALSE 10661
// for i in result do
10606: LD_ADDR_VAR 0 5
10610: PUSH
10611: LD_VAR 0 4
10615: PUSH
10616: FOR_IN
10617: IFFALSE 10659
// if GetTech ( i , side ) <> state then
10619: LD_VAR 0 5
10623: PPUSH
10624: LD_VAR 0 1
10628: PPUSH
10629: CALL_OW 321
10633: PUSH
10634: LD_VAR 0 3
10638: NONEQUAL
10639: IFFALSE 10657
// result := result diff i ;
10641: LD_ADDR_VAR 0 4
10645: PUSH
10646: LD_VAR 0 4
10650: PUSH
10651: LD_VAR 0 5
10655: DIFF
10656: ST_TO_ADDR
10657: GO 10616
10659: POP
10660: POP
// end ;
10661: LD_VAR 0 4
10665: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
10666: LD_INT 0
10668: PPUSH
10669: PPUSH
10670: PPUSH
// result := true ;
10671: LD_ADDR_VAR 0 3
10675: PUSH
10676: LD_INT 1
10678: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
10679: LD_ADDR_VAR 0 5
10683: PUSH
10684: LD_VAR 0 2
10688: PPUSH
10689: CALL_OW 480
10693: ST_TO_ADDR
// if not tmp then
10694: LD_VAR 0 5
10698: NOT
10699: IFFALSE 10703
// exit ;
10701: GO 10752
// for i in tmp do
10703: LD_ADDR_VAR 0 4
10707: PUSH
10708: LD_VAR 0 5
10712: PUSH
10713: FOR_IN
10714: IFFALSE 10750
// if GetTech ( i , side ) <> state_researched then
10716: LD_VAR 0 4
10720: PPUSH
10721: LD_VAR 0 1
10725: PPUSH
10726: CALL_OW 321
10730: PUSH
10731: LD_INT 2
10733: NONEQUAL
10734: IFFALSE 10748
// begin result := false ;
10736: LD_ADDR_VAR 0 3
10740: PUSH
10741: LD_INT 0
10743: ST_TO_ADDR
// exit ;
10744: POP
10745: POP
10746: GO 10752
// end ;
10748: GO 10713
10750: POP
10751: POP
// end ;
10752: LD_VAR 0 3
10756: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
10757: LD_INT 0
10759: PPUSH
10760: PPUSH
10761: PPUSH
10762: PPUSH
10763: PPUSH
10764: PPUSH
10765: PPUSH
10766: PPUSH
10767: PPUSH
10768: PPUSH
10769: PPUSH
10770: PPUSH
10771: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
10772: LD_VAR 0 1
10776: NOT
10777: PUSH
10778: LD_VAR 0 1
10782: PPUSH
10783: CALL_OW 257
10787: PUSH
10788: LD_INT 9
10790: NONEQUAL
10791: OR
10792: IFFALSE 10796
// exit ;
10794: GO 11369
// side := GetSide ( unit ) ;
10796: LD_ADDR_VAR 0 9
10800: PUSH
10801: LD_VAR 0 1
10805: PPUSH
10806: CALL_OW 255
10810: ST_TO_ADDR
// tech_space := tech_spacanom ;
10811: LD_ADDR_VAR 0 12
10815: PUSH
10816: LD_INT 29
10818: ST_TO_ADDR
// tech_time := tech_taurad ;
10819: LD_ADDR_VAR 0 13
10823: PUSH
10824: LD_INT 28
10826: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
10827: LD_ADDR_VAR 0 11
10831: PUSH
10832: LD_VAR 0 1
10836: PPUSH
10837: CALL_OW 310
10841: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
10842: LD_VAR 0 11
10846: PPUSH
10847: CALL_OW 247
10851: PUSH
10852: LD_INT 2
10854: EQUAL
10855: IFFALSE 10859
// exit ;
10857: GO 11369
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
10859: LD_ADDR_VAR 0 8
10863: PUSH
10864: LD_INT 81
10866: PUSH
10867: LD_VAR 0 9
10871: PUSH
10872: EMPTY
10873: LIST
10874: LIST
10875: PUSH
10876: LD_INT 3
10878: PUSH
10879: LD_INT 21
10881: PUSH
10882: LD_INT 3
10884: PUSH
10885: EMPTY
10886: LIST
10887: LIST
10888: PUSH
10889: EMPTY
10890: LIST
10891: LIST
10892: PUSH
10893: EMPTY
10894: LIST
10895: LIST
10896: PPUSH
10897: CALL_OW 69
10901: ST_TO_ADDR
// if not tmp then
10902: LD_VAR 0 8
10906: NOT
10907: IFFALSE 10911
// exit ;
10909: GO 11369
// if in_unit then
10911: LD_VAR 0 11
10915: IFFALSE 10939
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
10917: LD_ADDR_VAR 0 10
10921: PUSH
10922: LD_VAR 0 8
10926: PPUSH
10927: LD_VAR 0 11
10931: PPUSH
10932: CALL_OW 74
10936: ST_TO_ADDR
10937: GO 10959
// enemy := NearestUnitToUnit ( tmp , unit ) ;
10939: LD_ADDR_VAR 0 10
10943: PUSH
10944: LD_VAR 0 8
10948: PPUSH
10949: LD_VAR 0 1
10953: PPUSH
10954: CALL_OW 74
10958: ST_TO_ADDR
// if not enemy then
10959: LD_VAR 0 10
10963: NOT
10964: IFFALSE 10968
// exit ;
10966: GO 11369
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
10968: LD_VAR 0 11
10972: PUSH
10973: LD_VAR 0 11
10977: PPUSH
10978: LD_VAR 0 10
10982: PPUSH
10983: CALL_OW 296
10987: PUSH
10988: LD_INT 13
10990: GREATER
10991: AND
10992: PUSH
10993: LD_VAR 0 1
10997: PPUSH
10998: LD_VAR 0 10
11002: PPUSH
11003: CALL_OW 296
11007: PUSH
11008: LD_INT 12
11010: GREATER
11011: OR
11012: IFFALSE 11016
// exit ;
11014: GO 11369
// missile := [ 1 ] ;
11016: LD_ADDR_VAR 0 14
11020: PUSH
11021: LD_INT 1
11023: PUSH
11024: EMPTY
11025: LIST
11026: ST_TO_ADDR
// if Researched ( side , tech_space ) then
11027: LD_VAR 0 9
11031: PPUSH
11032: LD_VAR 0 12
11036: PPUSH
11037: CALL_OW 325
11041: IFFALSE 11070
// missile := Replace ( missile , missile + 1 , 2 ) ;
11043: LD_ADDR_VAR 0 14
11047: PUSH
11048: LD_VAR 0 14
11052: PPUSH
11053: LD_VAR 0 14
11057: PUSH
11058: LD_INT 1
11060: PLUS
11061: PPUSH
11062: LD_INT 2
11064: PPUSH
11065: CALL_OW 1
11069: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
11070: LD_VAR 0 9
11074: PPUSH
11075: LD_VAR 0 13
11079: PPUSH
11080: CALL_OW 325
11084: PUSH
11085: LD_VAR 0 10
11089: PPUSH
11090: CALL_OW 255
11094: PPUSH
11095: LD_VAR 0 13
11099: PPUSH
11100: CALL_OW 325
11104: NOT
11105: AND
11106: IFFALSE 11135
// missile := Replace ( missile , missile + 1 , 3 ) ;
11108: LD_ADDR_VAR 0 14
11112: PUSH
11113: LD_VAR 0 14
11117: PPUSH
11118: LD_VAR 0 14
11122: PUSH
11123: LD_INT 1
11125: PLUS
11126: PPUSH
11127: LD_INT 3
11129: PPUSH
11130: CALL_OW 1
11134: ST_TO_ADDR
// if missile < 2 then
11135: LD_VAR 0 14
11139: PUSH
11140: LD_INT 2
11142: LESS
11143: IFFALSE 11147
// exit ;
11145: GO 11369
// x := GetX ( enemy ) ;
11147: LD_ADDR_VAR 0 4
11151: PUSH
11152: LD_VAR 0 10
11156: PPUSH
11157: CALL_OW 250
11161: ST_TO_ADDR
// y := GetY ( enemy ) ;
11162: LD_ADDR_VAR 0 5
11166: PUSH
11167: LD_VAR 0 10
11171: PPUSH
11172: CALL_OW 251
11176: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
11177: LD_ADDR_VAR 0 6
11181: PUSH
11182: LD_VAR 0 4
11186: PUSH
11187: LD_INT 1
11189: NEG
11190: PPUSH
11191: LD_INT 1
11193: PPUSH
11194: CALL_OW 12
11198: PLUS
11199: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
11200: LD_ADDR_VAR 0 7
11204: PUSH
11205: LD_VAR 0 5
11209: PUSH
11210: LD_INT 1
11212: NEG
11213: PPUSH
11214: LD_INT 1
11216: PPUSH
11217: CALL_OW 12
11221: PLUS
11222: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
11223: LD_VAR 0 6
11227: PPUSH
11228: LD_VAR 0 7
11232: PPUSH
11233: CALL_OW 488
11237: NOT
11238: IFFALSE 11260
// begin _x := x ;
11240: LD_ADDR_VAR 0 6
11244: PUSH
11245: LD_VAR 0 4
11249: ST_TO_ADDR
// _y := y ;
11250: LD_ADDR_VAR 0 7
11254: PUSH
11255: LD_VAR 0 5
11259: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
11260: LD_ADDR_VAR 0 3
11264: PUSH
11265: LD_INT 1
11267: PPUSH
11268: LD_VAR 0 14
11272: PPUSH
11273: CALL_OW 12
11277: ST_TO_ADDR
// case i of 1 :
11278: LD_VAR 0 3
11282: PUSH
11283: LD_INT 1
11285: DOUBLE
11286: EQUAL
11287: IFTRUE 11291
11289: GO 11308
11291: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
11292: LD_VAR 0 1
11296: PPUSH
11297: LD_VAR 0 10
11301: PPUSH
11302: CALL_OW 115
11306: GO 11369
11308: LD_INT 2
11310: DOUBLE
11311: EQUAL
11312: IFTRUE 11316
11314: GO 11338
11316: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
11317: LD_VAR 0 1
11321: PPUSH
11322: LD_VAR 0 6
11326: PPUSH
11327: LD_VAR 0 7
11331: PPUSH
11332: CALL_OW 153
11336: GO 11369
11338: LD_INT 3
11340: DOUBLE
11341: EQUAL
11342: IFTRUE 11346
11344: GO 11368
11346: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
11347: LD_VAR 0 1
11351: PPUSH
11352: LD_VAR 0 6
11356: PPUSH
11357: LD_VAR 0 7
11361: PPUSH
11362: CALL_OW 154
11366: GO 11369
11368: POP
// end ;
11369: LD_VAR 0 2
11373: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
11374: LD_INT 0
11376: PPUSH
11377: PPUSH
11378: PPUSH
11379: PPUSH
11380: PPUSH
11381: PPUSH
// if not unit or not building then
11382: LD_VAR 0 1
11386: NOT
11387: PUSH
11388: LD_VAR 0 2
11392: NOT
11393: OR
11394: IFFALSE 11398
// exit ;
11396: GO 11556
// x := GetX ( building ) ;
11398: LD_ADDR_VAR 0 5
11402: PUSH
11403: LD_VAR 0 2
11407: PPUSH
11408: CALL_OW 250
11412: ST_TO_ADDR
// y := GetY ( building ) ;
11413: LD_ADDR_VAR 0 6
11417: PUSH
11418: LD_VAR 0 2
11422: PPUSH
11423: CALL_OW 251
11427: ST_TO_ADDR
// for i = 0 to 5 do
11428: LD_ADDR_VAR 0 4
11432: PUSH
11433: DOUBLE
11434: LD_INT 0
11436: DEC
11437: ST_TO_ADDR
11438: LD_INT 5
11440: PUSH
11441: FOR_TO
11442: IFFALSE 11554
// begin _x := ShiftX ( x , i , 3 ) ;
11444: LD_ADDR_VAR 0 7
11448: PUSH
11449: LD_VAR 0 5
11453: PPUSH
11454: LD_VAR 0 4
11458: PPUSH
11459: LD_INT 3
11461: PPUSH
11462: CALL_OW 272
11466: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
11467: LD_ADDR_VAR 0 8
11471: PUSH
11472: LD_VAR 0 6
11476: PPUSH
11477: LD_VAR 0 4
11481: PPUSH
11482: LD_INT 3
11484: PPUSH
11485: CALL_OW 273
11489: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
11490: LD_VAR 0 7
11494: PPUSH
11495: LD_VAR 0 8
11499: PPUSH
11500: CALL_OW 488
11504: NOT
11505: IFFALSE 11509
// continue ;
11507: GO 11441
// if HexInfo ( _x , _y ) = 0 then
11509: LD_VAR 0 7
11513: PPUSH
11514: LD_VAR 0 8
11518: PPUSH
11519: CALL_OW 428
11523: PUSH
11524: LD_INT 0
11526: EQUAL
11527: IFFALSE 11552
// begin ComMoveXY ( unit , _x , _y ) ;
11529: LD_VAR 0 1
11533: PPUSH
11534: LD_VAR 0 7
11538: PPUSH
11539: LD_VAR 0 8
11543: PPUSH
11544: CALL_OW 111
// exit ;
11548: POP
11549: POP
11550: GO 11556
// end ; end ;
11552: GO 11441
11554: POP
11555: POP
// end ;
11556: LD_VAR 0 3
11560: RET
// export function ScanBase ( side , base_area ) ; begin
11561: LD_INT 0
11563: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
11564: LD_ADDR_VAR 0 3
11568: PUSH
11569: LD_VAR 0 2
11573: PPUSH
11574: LD_INT 81
11576: PUSH
11577: LD_VAR 0 1
11581: PUSH
11582: EMPTY
11583: LIST
11584: LIST
11585: PPUSH
11586: CALL_OW 70
11590: ST_TO_ADDR
// end ;
11591: LD_VAR 0 3
11595: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
11596: LD_INT 0
11598: PPUSH
11599: PPUSH
11600: PPUSH
11601: PPUSH
// result := false ;
11602: LD_ADDR_VAR 0 2
11606: PUSH
11607: LD_INT 0
11609: ST_TO_ADDR
// side := GetSide ( unit ) ;
11610: LD_ADDR_VAR 0 3
11614: PUSH
11615: LD_VAR 0 1
11619: PPUSH
11620: CALL_OW 255
11624: ST_TO_ADDR
// nat := GetNation ( unit ) ;
11625: LD_ADDR_VAR 0 4
11629: PUSH
11630: LD_VAR 0 1
11634: PPUSH
11635: CALL_OW 248
11639: ST_TO_ADDR
// case nat of 1 :
11640: LD_VAR 0 4
11644: PUSH
11645: LD_INT 1
11647: DOUBLE
11648: EQUAL
11649: IFTRUE 11653
11651: GO 11664
11653: POP
// tech := tech_lassight ; 2 :
11654: LD_ADDR_VAR 0 5
11658: PUSH
11659: LD_INT 12
11661: ST_TO_ADDR
11662: GO 11703
11664: LD_INT 2
11666: DOUBLE
11667: EQUAL
11668: IFTRUE 11672
11670: GO 11683
11672: POP
// tech := tech_mortar ; 3 :
11673: LD_ADDR_VAR 0 5
11677: PUSH
11678: LD_INT 41
11680: ST_TO_ADDR
11681: GO 11703
11683: LD_INT 3
11685: DOUBLE
11686: EQUAL
11687: IFTRUE 11691
11689: GO 11702
11691: POP
// tech := tech_bazooka ; end ;
11692: LD_ADDR_VAR 0 5
11696: PUSH
11697: LD_INT 44
11699: ST_TO_ADDR
11700: GO 11703
11702: POP
// if Researched ( side , tech ) then
11703: LD_VAR 0 3
11707: PPUSH
11708: LD_VAR 0 5
11712: PPUSH
11713: CALL_OW 325
11717: IFFALSE 11744
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
11719: LD_ADDR_VAR 0 2
11723: PUSH
11724: LD_INT 5
11726: PUSH
11727: LD_INT 8
11729: PUSH
11730: LD_INT 9
11732: PUSH
11733: EMPTY
11734: LIST
11735: LIST
11736: LIST
11737: PUSH
11738: LD_VAR 0 4
11742: ARRAY
11743: ST_TO_ADDR
// end ;
11744: LD_VAR 0 2
11748: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
11749: LD_INT 0
11751: PPUSH
11752: PPUSH
11753: PPUSH
// if not mines then
11754: LD_VAR 0 2
11758: NOT
11759: IFFALSE 11763
// exit ;
11761: GO 11907
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
11763: LD_ADDR_VAR 0 5
11767: PUSH
11768: LD_INT 81
11770: PUSH
11771: LD_VAR 0 1
11775: PUSH
11776: EMPTY
11777: LIST
11778: LIST
11779: PUSH
11780: LD_INT 3
11782: PUSH
11783: LD_INT 21
11785: PUSH
11786: LD_INT 3
11788: PUSH
11789: EMPTY
11790: LIST
11791: LIST
11792: PUSH
11793: EMPTY
11794: LIST
11795: LIST
11796: PUSH
11797: EMPTY
11798: LIST
11799: LIST
11800: PPUSH
11801: CALL_OW 69
11805: ST_TO_ADDR
// for i in mines do
11806: LD_ADDR_VAR 0 4
11810: PUSH
11811: LD_VAR 0 2
11815: PUSH
11816: FOR_IN
11817: IFFALSE 11905
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
11819: LD_VAR 0 4
11823: PUSH
11824: LD_INT 1
11826: ARRAY
11827: PPUSH
11828: LD_VAR 0 4
11832: PUSH
11833: LD_INT 2
11835: ARRAY
11836: PPUSH
11837: CALL_OW 458
11841: NOT
11842: IFFALSE 11846
// continue ;
11844: GO 11816
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
11846: LD_VAR 0 4
11850: PUSH
11851: LD_INT 1
11853: ARRAY
11854: PPUSH
11855: LD_VAR 0 4
11859: PUSH
11860: LD_INT 2
11862: ARRAY
11863: PPUSH
11864: CALL_OW 428
11868: PUSH
11869: LD_VAR 0 5
11873: IN
11874: IFFALSE 11903
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
11876: LD_VAR 0 4
11880: PUSH
11881: LD_INT 1
11883: ARRAY
11884: PPUSH
11885: LD_VAR 0 4
11889: PUSH
11890: LD_INT 2
11892: ARRAY
11893: PPUSH
11894: LD_VAR 0 1
11898: PPUSH
11899: CALL_OW 456
// end ;
11903: GO 11816
11905: POP
11906: POP
// end ;
11907: LD_VAR 0 3
11911: RET
// export function Count ( array ) ; begin
11912: LD_INT 0
11914: PPUSH
// result := array + 0 ;
11915: LD_ADDR_VAR 0 2
11919: PUSH
11920: LD_VAR 0 1
11924: PUSH
11925: LD_INT 0
11927: PLUS
11928: ST_TO_ADDR
// end ;
11929: LD_VAR 0 2
11933: RET
// export function IsEmpty ( building ) ; begin
11934: LD_INT 0
11936: PPUSH
// if not building then
11937: LD_VAR 0 1
11941: NOT
11942: IFFALSE 11946
// exit ;
11944: GO 11989
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
11946: LD_ADDR_VAR 0 2
11950: PUSH
11951: LD_VAR 0 1
11955: PUSH
11956: LD_INT 22
11958: PUSH
11959: LD_VAR 0 1
11963: PPUSH
11964: CALL_OW 255
11968: PUSH
11969: EMPTY
11970: LIST
11971: LIST
11972: PUSH
11973: LD_INT 58
11975: PUSH
11976: EMPTY
11977: LIST
11978: PUSH
11979: EMPTY
11980: LIST
11981: LIST
11982: PPUSH
11983: CALL_OW 69
11987: IN
11988: ST_TO_ADDR
// end ;
11989: LD_VAR 0 2
11993: RET
// export function IsNotFull ( building ) ; var places ; begin
11994: LD_INT 0
11996: PPUSH
11997: PPUSH
// if not building then
11998: LD_VAR 0 1
12002: NOT
12003: IFFALSE 12007
// exit ;
12005: GO 12035
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
12007: LD_ADDR_VAR 0 2
12011: PUSH
12012: LD_VAR 0 1
12016: PPUSH
12017: LD_INT 3
12019: PUSH
12020: LD_INT 62
12022: PUSH
12023: EMPTY
12024: LIST
12025: PUSH
12026: EMPTY
12027: LIST
12028: LIST
12029: PPUSH
12030: CALL_OW 72
12034: ST_TO_ADDR
// end ;
12035: LD_VAR 0 2
12039: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
12040: LD_INT 0
12042: PPUSH
12043: PPUSH
12044: PPUSH
12045: PPUSH
// tmp := [ ] ;
12046: LD_ADDR_VAR 0 3
12050: PUSH
12051: EMPTY
12052: ST_TO_ADDR
// list := [ ] ;
12053: LD_ADDR_VAR 0 5
12057: PUSH
12058: EMPTY
12059: ST_TO_ADDR
// for i = 16 to 25 do
12060: LD_ADDR_VAR 0 4
12064: PUSH
12065: DOUBLE
12066: LD_INT 16
12068: DEC
12069: ST_TO_ADDR
12070: LD_INT 25
12072: PUSH
12073: FOR_TO
12074: IFFALSE 12147
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
12076: LD_ADDR_VAR 0 3
12080: PUSH
12081: LD_VAR 0 3
12085: PUSH
12086: LD_INT 22
12088: PUSH
12089: LD_VAR 0 1
12093: PPUSH
12094: CALL_OW 255
12098: PUSH
12099: EMPTY
12100: LIST
12101: LIST
12102: PUSH
12103: LD_INT 91
12105: PUSH
12106: LD_VAR 0 1
12110: PUSH
12111: LD_INT 6
12113: PUSH
12114: EMPTY
12115: LIST
12116: LIST
12117: LIST
12118: PUSH
12119: LD_INT 30
12121: PUSH
12122: LD_VAR 0 4
12126: PUSH
12127: EMPTY
12128: LIST
12129: LIST
12130: PUSH
12131: EMPTY
12132: LIST
12133: LIST
12134: LIST
12135: PUSH
12136: EMPTY
12137: LIST
12138: PPUSH
12139: CALL_OW 69
12143: ADD
12144: ST_TO_ADDR
12145: GO 12073
12147: POP
12148: POP
// for i = 1 to tmp do
12149: LD_ADDR_VAR 0 4
12153: PUSH
12154: DOUBLE
12155: LD_INT 1
12157: DEC
12158: ST_TO_ADDR
12159: LD_VAR 0 3
12163: PUSH
12164: FOR_TO
12165: IFFALSE 12253
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
12167: LD_ADDR_VAR 0 5
12171: PUSH
12172: LD_VAR 0 5
12176: PUSH
12177: LD_VAR 0 3
12181: PUSH
12182: LD_VAR 0 4
12186: ARRAY
12187: PPUSH
12188: CALL_OW 266
12192: PUSH
12193: LD_VAR 0 3
12197: PUSH
12198: LD_VAR 0 4
12202: ARRAY
12203: PPUSH
12204: CALL_OW 250
12208: PUSH
12209: LD_VAR 0 3
12213: PUSH
12214: LD_VAR 0 4
12218: ARRAY
12219: PPUSH
12220: CALL_OW 251
12224: PUSH
12225: LD_VAR 0 3
12229: PUSH
12230: LD_VAR 0 4
12234: ARRAY
12235: PPUSH
12236: CALL_OW 254
12240: PUSH
12241: EMPTY
12242: LIST
12243: LIST
12244: LIST
12245: LIST
12246: PUSH
12247: EMPTY
12248: LIST
12249: ADD
12250: ST_TO_ADDR
12251: GO 12164
12253: POP
12254: POP
// result := list ;
12255: LD_ADDR_VAR 0 2
12259: PUSH
12260: LD_VAR 0 5
12264: ST_TO_ADDR
// end ;
12265: LD_VAR 0 2
12269: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
12270: LD_INT 0
12272: PPUSH
12273: PPUSH
12274: PPUSH
12275: PPUSH
12276: PPUSH
12277: PPUSH
12278: PPUSH
// if not factory then
12279: LD_VAR 0 1
12283: NOT
12284: IFFALSE 12288
// exit ;
12286: GO 12881
// if control = control_apeman then
12288: LD_VAR 0 4
12292: PUSH
12293: LD_INT 5
12295: EQUAL
12296: IFFALSE 12405
// begin tmp := UnitsInside ( factory ) ;
12298: LD_ADDR_VAR 0 8
12302: PUSH
12303: LD_VAR 0 1
12307: PPUSH
12308: CALL_OW 313
12312: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
12313: LD_VAR 0 8
12317: PPUSH
12318: LD_INT 25
12320: PUSH
12321: LD_INT 12
12323: PUSH
12324: EMPTY
12325: LIST
12326: LIST
12327: PPUSH
12328: CALL_OW 72
12332: NOT
12333: IFFALSE 12343
// control := control_manual ;
12335: LD_ADDR_VAR 0 4
12339: PUSH
12340: LD_INT 1
12342: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
12343: LD_ADDR_VAR 0 8
12347: PUSH
12348: LD_VAR 0 1
12352: PPUSH
12353: CALL 12040 0 1
12357: ST_TO_ADDR
// if tmp then
12358: LD_VAR 0 8
12362: IFFALSE 12405
// begin for i in tmp do
12364: LD_ADDR_VAR 0 7
12368: PUSH
12369: LD_VAR 0 8
12373: PUSH
12374: FOR_IN
12375: IFFALSE 12403
// if i [ 1 ] = b_ext_radio then
12377: LD_VAR 0 7
12381: PUSH
12382: LD_INT 1
12384: ARRAY
12385: PUSH
12386: LD_INT 22
12388: EQUAL
12389: IFFALSE 12401
// begin control := control_remote ;
12391: LD_ADDR_VAR 0 4
12395: PUSH
12396: LD_INT 2
12398: ST_TO_ADDR
// break ;
12399: GO 12403
// end ;
12401: GO 12374
12403: POP
12404: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
12405: LD_VAR 0 1
12409: PPUSH
12410: LD_VAR 0 2
12414: PPUSH
12415: LD_VAR 0 3
12419: PPUSH
12420: LD_VAR 0 4
12424: PPUSH
12425: LD_VAR 0 5
12429: PPUSH
12430: CALL_OW 448
12434: IFFALSE 12469
// begin result := [ chassis , engine , control , weapon ] ;
12436: LD_ADDR_VAR 0 6
12440: PUSH
12441: LD_VAR 0 2
12445: PUSH
12446: LD_VAR 0 3
12450: PUSH
12451: LD_VAR 0 4
12455: PUSH
12456: LD_VAR 0 5
12460: PUSH
12461: EMPTY
12462: LIST
12463: LIST
12464: LIST
12465: LIST
12466: ST_TO_ADDR
// exit ;
12467: GO 12881
// end ; _chassis := AvailableChassisList ( factory ) ;
12469: LD_ADDR_VAR 0 9
12473: PUSH
12474: LD_VAR 0 1
12478: PPUSH
12479: CALL_OW 475
12483: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
12484: LD_ADDR_VAR 0 11
12488: PUSH
12489: LD_VAR 0 1
12493: PPUSH
12494: CALL_OW 476
12498: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
12499: LD_ADDR_VAR 0 12
12503: PUSH
12504: LD_VAR 0 1
12508: PPUSH
12509: CALL_OW 477
12513: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
12514: LD_ADDR_VAR 0 10
12518: PUSH
12519: LD_VAR 0 1
12523: PPUSH
12524: CALL_OW 478
12528: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
12529: LD_VAR 0 9
12533: NOT
12534: PUSH
12535: LD_VAR 0 11
12539: NOT
12540: OR
12541: PUSH
12542: LD_VAR 0 12
12546: NOT
12547: OR
12548: PUSH
12549: LD_VAR 0 10
12553: NOT
12554: OR
12555: IFFALSE 12590
// begin result := [ chassis , engine , control , weapon ] ;
12557: LD_ADDR_VAR 0 6
12561: PUSH
12562: LD_VAR 0 2
12566: PUSH
12567: LD_VAR 0 3
12571: PUSH
12572: LD_VAR 0 4
12576: PUSH
12577: LD_VAR 0 5
12581: PUSH
12582: EMPTY
12583: LIST
12584: LIST
12585: LIST
12586: LIST
12587: ST_TO_ADDR
// exit ;
12588: GO 12881
// end ; if not chassis in _chassis then
12590: LD_VAR 0 2
12594: PUSH
12595: LD_VAR 0 9
12599: IN
12600: NOT
12601: IFFALSE 12627
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
12603: LD_ADDR_VAR 0 2
12607: PUSH
12608: LD_VAR 0 9
12612: PUSH
12613: LD_INT 1
12615: PPUSH
12616: LD_VAR 0 9
12620: PPUSH
12621: CALL_OW 12
12625: ARRAY
12626: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
12627: LD_VAR 0 2
12631: PPUSH
12632: LD_VAR 0 3
12636: PPUSH
12637: CALL 12886 0 2
12641: NOT
12642: IFFALSE 12701
// repeat engine := _engine [ 1 ] ;
12644: LD_ADDR_VAR 0 3
12648: PUSH
12649: LD_VAR 0 11
12653: PUSH
12654: LD_INT 1
12656: ARRAY
12657: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
12658: LD_ADDR_VAR 0 11
12662: PUSH
12663: LD_VAR 0 11
12667: PPUSH
12668: LD_INT 1
12670: PPUSH
12671: CALL_OW 3
12675: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
12676: LD_VAR 0 2
12680: PPUSH
12681: LD_VAR 0 3
12685: PPUSH
12686: CALL 12886 0 2
12690: PUSH
12691: LD_VAR 0 11
12695: PUSH
12696: EMPTY
12697: EQUAL
12698: OR
12699: IFFALSE 12644
// if not control in _control then
12701: LD_VAR 0 4
12705: PUSH
12706: LD_VAR 0 12
12710: IN
12711: NOT
12712: IFFALSE 12738
// control := _control [ rand ( 1 , _control ) ] ;
12714: LD_ADDR_VAR 0 4
12718: PUSH
12719: LD_VAR 0 12
12723: PUSH
12724: LD_INT 1
12726: PPUSH
12727: LD_VAR 0 12
12731: PPUSH
12732: CALL_OW 12
12736: ARRAY
12737: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
12738: LD_VAR 0 2
12742: PPUSH
12743: LD_VAR 0 5
12747: PPUSH
12748: CALL 13106 0 2
12752: NOT
12753: IFFALSE 12812
// repeat weapon := _weapon [ 1 ] ;
12755: LD_ADDR_VAR 0 5
12759: PUSH
12760: LD_VAR 0 10
12764: PUSH
12765: LD_INT 1
12767: ARRAY
12768: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
12769: LD_ADDR_VAR 0 10
12773: PUSH
12774: LD_VAR 0 10
12778: PPUSH
12779: LD_INT 1
12781: PPUSH
12782: CALL_OW 3
12786: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
12787: LD_VAR 0 2
12791: PPUSH
12792: LD_VAR 0 5
12796: PPUSH
12797: CALL 13106 0 2
12801: PUSH
12802: LD_VAR 0 10
12806: PUSH
12807: EMPTY
12808: EQUAL
12809: OR
12810: IFFALSE 12755
// result := [ ] ;
12812: LD_ADDR_VAR 0 6
12816: PUSH
12817: EMPTY
12818: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
12819: LD_VAR 0 1
12823: PPUSH
12824: LD_VAR 0 2
12828: PPUSH
12829: LD_VAR 0 3
12833: PPUSH
12834: LD_VAR 0 4
12838: PPUSH
12839: LD_VAR 0 5
12843: PPUSH
12844: CALL_OW 448
12848: IFFALSE 12881
// result := [ chassis , engine , control , weapon ] ;
12850: LD_ADDR_VAR 0 6
12854: PUSH
12855: LD_VAR 0 2
12859: PUSH
12860: LD_VAR 0 3
12864: PUSH
12865: LD_VAR 0 4
12869: PUSH
12870: LD_VAR 0 5
12874: PUSH
12875: EMPTY
12876: LIST
12877: LIST
12878: LIST
12879: LIST
12880: ST_TO_ADDR
// end ;
12881: LD_VAR 0 6
12885: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
12886: LD_INT 0
12888: PPUSH
// if not chassis or not engine then
12889: LD_VAR 0 1
12893: NOT
12894: PUSH
12895: LD_VAR 0 2
12899: NOT
12900: OR
12901: IFFALSE 12905
// exit ;
12903: GO 13101
// case engine of engine_solar :
12905: LD_VAR 0 2
12909: PUSH
12910: LD_INT 2
12912: DOUBLE
12913: EQUAL
12914: IFTRUE 12918
12916: GO 12956
12918: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
12919: LD_ADDR_VAR 0 3
12923: PUSH
12924: LD_INT 11
12926: PUSH
12927: LD_INT 12
12929: PUSH
12930: LD_INT 13
12932: PUSH
12933: LD_INT 14
12935: PUSH
12936: LD_INT 1
12938: PUSH
12939: LD_INT 2
12941: PUSH
12942: LD_INT 3
12944: PUSH
12945: EMPTY
12946: LIST
12947: LIST
12948: LIST
12949: LIST
12950: LIST
12951: LIST
12952: LIST
12953: ST_TO_ADDR
12954: GO 13085
12956: LD_INT 1
12958: DOUBLE
12959: EQUAL
12960: IFTRUE 12964
12962: GO 13026
12964: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
12965: LD_ADDR_VAR 0 3
12969: PUSH
12970: LD_INT 11
12972: PUSH
12973: LD_INT 12
12975: PUSH
12976: LD_INT 13
12978: PUSH
12979: LD_INT 14
12981: PUSH
12982: LD_INT 1
12984: PUSH
12985: LD_INT 2
12987: PUSH
12988: LD_INT 3
12990: PUSH
12991: LD_INT 4
12993: PUSH
12994: LD_INT 5
12996: PUSH
12997: LD_INT 21
12999: PUSH
13000: LD_INT 23
13002: PUSH
13003: LD_INT 22
13005: PUSH
13006: LD_INT 24
13008: PUSH
13009: EMPTY
13010: LIST
13011: LIST
13012: LIST
13013: LIST
13014: LIST
13015: LIST
13016: LIST
13017: LIST
13018: LIST
13019: LIST
13020: LIST
13021: LIST
13022: LIST
13023: ST_TO_ADDR
13024: GO 13085
13026: LD_INT 3
13028: DOUBLE
13029: EQUAL
13030: IFTRUE 13034
13032: GO 13084
13034: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
13035: LD_ADDR_VAR 0 3
13039: PUSH
13040: LD_INT 13
13042: PUSH
13043: LD_INT 14
13045: PUSH
13046: LD_INT 2
13048: PUSH
13049: LD_INT 3
13051: PUSH
13052: LD_INT 4
13054: PUSH
13055: LD_INT 5
13057: PUSH
13058: LD_INT 21
13060: PUSH
13061: LD_INT 22
13063: PUSH
13064: LD_INT 23
13066: PUSH
13067: LD_INT 24
13069: PUSH
13070: EMPTY
13071: LIST
13072: LIST
13073: LIST
13074: LIST
13075: LIST
13076: LIST
13077: LIST
13078: LIST
13079: LIST
13080: LIST
13081: ST_TO_ADDR
13082: GO 13085
13084: POP
// result := ( chassis in result ) ;
13085: LD_ADDR_VAR 0 3
13089: PUSH
13090: LD_VAR 0 1
13094: PUSH
13095: LD_VAR 0 3
13099: IN
13100: ST_TO_ADDR
// end ;
13101: LD_VAR 0 3
13105: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
13106: LD_INT 0
13108: PPUSH
// if not chassis or not weapon then
13109: LD_VAR 0 1
13113: NOT
13114: PUSH
13115: LD_VAR 0 2
13119: NOT
13120: OR
13121: IFFALSE 13125
// exit ;
13123: GO 14185
// case weapon of us_machine_gun :
13125: LD_VAR 0 2
13129: PUSH
13130: LD_INT 2
13132: DOUBLE
13133: EQUAL
13134: IFTRUE 13138
13136: GO 13168
13138: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
13139: LD_ADDR_VAR 0 3
13143: PUSH
13144: LD_INT 1
13146: PUSH
13147: LD_INT 2
13149: PUSH
13150: LD_INT 3
13152: PUSH
13153: LD_INT 4
13155: PUSH
13156: LD_INT 5
13158: PUSH
13159: EMPTY
13160: LIST
13161: LIST
13162: LIST
13163: LIST
13164: LIST
13165: ST_TO_ADDR
13166: GO 14169
13168: LD_INT 3
13170: DOUBLE
13171: EQUAL
13172: IFTRUE 13176
13174: GO 13206
13176: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
13177: LD_ADDR_VAR 0 3
13181: PUSH
13182: LD_INT 1
13184: PUSH
13185: LD_INT 2
13187: PUSH
13188: LD_INT 3
13190: PUSH
13191: LD_INT 4
13193: PUSH
13194: LD_INT 5
13196: PUSH
13197: EMPTY
13198: LIST
13199: LIST
13200: LIST
13201: LIST
13202: LIST
13203: ST_TO_ADDR
13204: GO 14169
13206: LD_INT 11
13208: DOUBLE
13209: EQUAL
13210: IFTRUE 13214
13212: GO 13244
13214: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
13215: LD_ADDR_VAR 0 3
13219: PUSH
13220: LD_INT 1
13222: PUSH
13223: LD_INT 2
13225: PUSH
13226: LD_INT 3
13228: PUSH
13229: LD_INT 4
13231: PUSH
13232: LD_INT 5
13234: PUSH
13235: EMPTY
13236: LIST
13237: LIST
13238: LIST
13239: LIST
13240: LIST
13241: ST_TO_ADDR
13242: GO 14169
13244: LD_INT 4
13246: DOUBLE
13247: EQUAL
13248: IFTRUE 13252
13250: GO 13278
13252: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
13253: LD_ADDR_VAR 0 3
13257: PUSH
13258: LD_INT 2
13260: PUSH
13261: LD_INT 3
13263: PUSH
13264: LD_INT 4
13266: PUSH
13267: LD_INT 5
13269: PUSH
13270: EMPTY
13271: LIST
13272: LIST
13273: LIST
13274: LIST
13275: ST_TO_ADDR
13276: GO 14169
13278: LD_INT 5
13280: DOUBLE
13281: EQUAL
13282: IFTRUE 13286
13284: GO 13312
13286: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
13287: LD_ADDR_VAR 0 3
13291: PUSH
13292: LD_INT 2
13294: PUSH
13295: LD_INT 3
13297: PUSH
13298: LD_INT 4
13300: PUSH
13301: LD_INT 5
13303: PUSH
13304: EMPTY
13305: LIST
13306: LIST
13307: LIST
13308: LIST
13309: ST_TO_ADDR
13310: GO 14169
13312: LD_INT 9
13314: DOUBLE
13315: EQUAL
13316: IFTRUE 13320
13318: GO 13346
13320: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
13321: LD_ADDR_VAR 0 3
13325: PUSH
13326: LD_INT 2
13328: PUSH
13329: LD_INT 3
13331: PUSH
13332: LD_INT 4
13334: PUSH
13335: LD_INT 5
13337: PUSH
13338: EMPTY
13339: LIST
13340: LIST
13341: LIST
13342: LIST
13343: ST_TO_ADDR
13344: GO 14169
13346: LD_INT 7
13348: DOUBLE
13349: EQUAL
13350: IFTRUE 13354
13352: GO 13380
13354: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
13355: LD_ADDR_VAR 0 3
13359: PUSH
13360: LD_INT 2
13362: PUSH
13363: LD_INT 3
13365: PUSH
13366: LD_INT 4
13368: PUSH
13369: LD_INT 5
13371: PUSH
13372: EMPTY
13373: LIST
13374: LIST
13375: LIST
13376: LIST
13377: ST_TO_ADDR
13378: GO 14169
13380: LD_INT 12
13382: DOUBLE
13383: EQUAL
13384: IFTRUE 13388
13386: GO 13414
13388: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
13389: LD_ADDR_VAR 0 3
13393: PUSH
13394: LD_INT 2
13396: PUSH
13397: LD_INT 3
13399: PUSH
13400: LD_INT 4
13402: PUSH
13403: LD_INT 5
13405: PUSH
13406: EMPTY
13407: LIST
13408: LIST
13409: LIST
13410: LIST
13411: ST_TO_ADDR
13412: GO 14169
13414: LD_INT 13
13416: DOUBLE
13417: EQUAL
13418: IFTRUE 13422
13420: GO 13448
13422: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
13423: LD_ADDR_VAR 0 3
13427: PUSH
13428: LD_INT 2
13430: PUSH
13431: LD_INT 3
13433: PUSH
13434: LD_INT 4
13436: PUSH
13437: LD_INT 5
13439: PUSH
13440: EMPTY
13441: LIST
13442: LIST
13443: LIST
13444: LIST
13445: ST_TO_ADDR
13446: GO 14169
13448: LD_INT 14
13450: DOUBLE
13451: EQUAL
13452: IFTRUE 13456
13454: GO 13474
13456: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
13457: LD_ADDR_VAR 0 3
13461: PUSH
13462: LD_INT 4
13464: PUSH
13465: LD_INT 5
13467: PUSH
13468: EMPTY
13469: LIST
13470: LIST
13471: ST_TO_ADDR
13472: GO 14169
13474: LD_INT 6
13476: DOUBLE
13477: EQUAL
13478: IFTRUE 13482
13480: GO 13500
13482: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
13483: LD_ADDR_VAR 0 3
13487: PUSH
13488: LD_INT 4
13490: PUSH
13491: LD_INT 5
13493: PUSH
13494: EMPTY
13495: LIST
13496: LIST
13497: ST_TO_ADDR
13498: GO 14169
13500: LD_INT 10
13502: DOUBLE
13503: EQUAL
13504: IFTRUE 13508
13506: GO 13526
13508: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
13509: LD_ADDR_VAR 0 3
13513: PUSH
13514: LD_INT 4
13516: PUSH
13517: LD_INT 5
13519: PUSH
13520: EMPTY
13521: LIST
13522: LIST
13523: ST_TO_ADDR
13524: GO 14169
13526: LD_INT 22
13528: DOUBLE
13529: EQUAL
13530: IFTRUE 13534
13532: GO 13560
13534: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
13535: LD_ADDR_VAR 0 3
13539: PUSH
13540: LD_INT 11
13542: PUSH
13543: LD_INT 12
13545: PUSH
13546: LD_INT 13
13548: PUSH
13549: LD_INT 14
13551: PUSH
13552: EMPTY
13553: LIST
13554: LIST
13555: LIST
13556: LIST
13557: ST_TO_ADDR
13558: GO 14169
13560: LD_INT 23
13562: DOUBLE
13563: EQUAL
13564: IFTRUE 13568
13566: GO 13594
13568: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
13569: LD_ADDR_VAR 0 3
13573: PUSH
13574: LD_INT 11
13576: PUSH
13577: LD_INT 12
13579: PUSH
13580: LD_INT 13
13582: PUSH
13583: LD_INT 14
13585: PUSH
13586: EMPTY
13587: LIST
13588: LIST
13589: LIST
13590: LIST
13591: ST_TO_ADDR
13592: GO 14169
13594: LD_INT 24
13596: DOUBLE
13597: EQUAL
13598: IFTRUE 13602
13600: GO 13628
13602: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
13603: LD_ADDR_VAR 0 3
13607: PUSH
13608: LD_INT 11
13610: PUSH
13611: LD_INT 12
13613: PUSH
13614: LD_INT 13
13616: PUSH
13617: LD_INT 14
13619: PUSH
13620: EMPTY
13621: LIST
13622: LIST
13623: LIST
13624: LIST
13625: ST_TO_ADDR
13626: GO 14169
13628: LD_INT 30
13630: DOUBLE
13631: EQUAL
13632: IFTRUE 13636
13634: GO 13662
13636: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
13637: LD_ADDR_VAR 0 3
13641: PUSH
13642: LD_INT 11
13644: PUSH
13645: LD_INT 12
13647: PUSH
13648: LD_INT 13
13650: PUSH
13651: LD_INT 14
13653: PUSH
13654: EMPTY
13655: LIST
13656: LIST
13657: LIST
13658: LIST
13659: ST_TO_ADDR
13660: GO 14169
13662: LD_INT 25
13664: DOUBLE
13665: EQUAL
13666: IFTRUE 13670
13668: GO 13688
13670: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
13671: LD_ADDR_VAR 0 3
13675: PUSH
13676: LD_INT 13
13678: PUSH
13679: LD_INT 14
13681: PUSH
13682: EMPTY
13683: LIST
13684: LIST
13685: ST_TO_ADDR
13686: GO 14169
13688: LD_INT 27
13690: DOUBLE
13691: EQUAL
13692: IFTRUE 13696
13694: GO 13714
13696: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
13697: LD_ADDR_VAR 0 3
13701: PUSH
13702: LD_INT 13
13704: PUSH
13705: LD_INT 14
13707: PUSH
13708: EMPTY
13709: LIST
13710: LIST
13711: ST_TO_ADDR
13712: GO 14169
13714: LD_INT 92
13716: DOUBLE
13717: EQUAL
13718: IFTRUE 13722
13720: GO 13748
13722: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
13723: LD_ADDR_VAR 0 3
13727: PUSH
13728: LD_INT 11
13730: PUSH
13731: LD_INT 12
13733: PUSH
13734: LD_INT 13
13736: PUSH
13737: LD_INT 14
13739: PUSH
13740: EMPTY
13741: LIST
13742: LIST
13743: LIST
13744: LIST
13745: ST_TO_ADDR
13746: GO 14169
13748: LD_INT 28
13750: DOUBLE
13751: EQUAL
13752: IFTRUE 13756
13754: GO 13774
13756: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
13757: LD_ADDR_VAR 0 3
13761: PUSH
13762: LD_INT 13
13764: PUSH
13765: LD_INT 14
13767: PUSH
13768: EMPTY
13769: LIST
13770: LIST
13771: ST_TO_ADDR
13772: GO 14169
13774: LD_INT 29
13776: DOUBLE
13777: EQUAL
13778: IFTRUE 13782
13780: GO 13800
13782: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
13783: LD_ADDR_VAR 0 3
13787: PUSH
13788: LD_INT 13
13790: PUSH
13791: LD_INT 14
13793: PUSH
13794: EMPTY
13795: LIST
13796: LIST
13797: ST_TO_ADDR
13798: GO 14169
13800: LD_INT 31
13802: DOUBLE
13803: EQUAL
13804: IFTRUE 13808
13806: GO 13826
13808: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
13809: LD_ADDR_VAR 0 3
13813: PUSH
13814: LD_INT 13
13816: PUSH
13817: LD_INT 14
13819: PUSH
13820: EMPTY
13821: LIST
13822: LIST
13823: ST_TO_ADDR
13824: GO 14169
13826: LD_INT 26
13828: DOUBLE
13829: EQUAL
13830: IFTRUE 13834
13832: GO 13852
13834: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
13835: LD_ADDR_VAR 0 3
13839: PUSH
13840: LD_INT 13
13842: PUSH
13843: LD_INT 14
13845: PUSH
13846: EMPTY
13847: LIST
13848: LIST
13849: ST_TO_ADDR
13850: GO 14169
13852: LD_INT 42
13854: DOUBLE
13855: EQUAL
13856: IFTRUE 13860
13858: GO 13886
13860: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
13861: LD_ADDR_VAR 0 3
13865: PUSH
13866: LD_INT 21
13868: PUSH
13869: LD_INT 22
13871: PUSH
13872: LD_INT 23
13874: PUSH
13875: LD_INT 24
13877: PUSH
13878: EMPTY
13879: LIST
13880: LIST
13881: LIST
13882: LIST
13883: ST_TO_ADDR
13884: GO 14169
13886: LD_INT 43
13888: DOUBLE
13889: EQUAL
13890: IFTRUE 13894
13892: GO 13920
13894: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
13895: LD_ADDR_VAR 0 3
13899: PUSH
13900: LD_INT 21
13902: PUSH
13903: LD_INT 22
13905: PUSH
13906: LD_INT 23
13908: PUSH
13909: LD_INT 24
13911: PUSH
13912: EMPTY
13913: LIST
13914: LIST
13915: LIST
13916: LIST
13917: ST_TO_ADDR
13918: GO 14169
13920: LD_INT 44
13922: DOUBLE
13923: EQUAL
13924: IFTRUE 13928
13926: GO 13954
13928: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
13929: LD_ADDR_VAR 0 3
13933: PUSH
13934: LD_INT 21
13936: PUSH
13937: LD_INT 22
13939: PUSH
13940: LD_INT 23
13942: PUSH
13943: LD_INT 24
13945: PUSH
13946: EMPTY
13947: LIST
13948: LIST
13949: LIST
13950: LIST
13951: ST_TO_ADDR
13952: GO 14169
13954: LD_INT 45
13956: DOUBLE
13957: EQUAL
13958: IFTRUE 13962
13960: GO 13988
13962: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
13963: LD_ADDR_VAR 0 3
13967: PUSH
13968: LD_INT 21
13970: PUSH
13971: LD_INT 22
13973: PUSH
13974: LD_INT 23
13976: PUSH
13977: LD_INT 24
13979: PUSH
13980: EMPTY
13981: LIST
13982: LIST
13983: LIST
13984: LIST
13985: ST_TO_ADDR
13986: GO 14169
13988: LD_INT 49
13990: DOUBLE
13991: EQUAL
13992: IFTRUE 13996
13994: GO 14022
13996: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
13997: LD_ADDR_VAR 0 3
14001: PUSH
14002: LD_INT 21
14004: PUSH
14005: LD_INT 22
14007: PUSH
14008: LD_INT 23
14010: PUSH
14011: LD_INT 24
14013: PUSH
14014: EMPTY
14015: LIST
14016: LIST
14017: LIST
14018: LIST
14019: ST_TO_ADDR
14020: GO 14169
14022: LD_INT 51
14024: DOUBLE
14025: EQUAL
14026: IFTRUE 14030
14028: GO 14056
14030: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
14031: LD_ADDR_VAR 0 3
14035: PUSH
14036: LD_INT 21
14038: PUSH
14039: LD_INT 22
14041: PUSH
14042: LD_INT 23
14044: PUSH
14045: LD_INT 24
14047: PUSH
14048: EMPTY
14049: LIST
14050: LIST
14051: LIST
14052: LIST
14053: ST_TO_ADDR
14054: GO 14169
14056: LD_INT 52
14058: DOUBLE
14059: EQUAL
14060: IFTRUE 14064
14062: GO 14090
14064: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
14065: LD_ADDR_VAR 0 3
14069: PUSH
14070: LD_INT 21
14072: PUSH
14073: LD_INT 22
14075: PUSH
14076: LD_INT 23
14078: PUSH
14079: LD_INT 24
14081: PUSH
14082: EMPTY
14083: LIST
14084: LIST
14085: LIST
14086: LIST
14087: ST_TO_ADDR
14088: GO 14169
14090: LD_INT 53
14092: DOUBLE
14093: EQUAL
14094: IFTRUE 14098
14096: GO 14116
14098: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
14099: LD_ADDR_VAR 0 3
14103: PUSH
14104: LD_INT 23
14106: PUSH
14107: LD_INT 24
14109: PUSH
14110: EMPTY
14111: LIST
14112: LIST
14113: ST_TO_ADDR
14114: GO 14169
14116: LD_INT 46
14118: DOUBLE
14119: EQUAL
14120: IFTRUE 14124
14122: GO 14142
14124: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
14125: LD_ADDR_VAR 0 3
14129: PUSH
14130: LD_INT 23
14132: PUSH
14133: LD_INT 24
14135: PUSH
14136: EMPTY
14137: LIST
14138: LIST
14139: ST_TO_ADDR
14140: GO 14169
14142: LD_INT 47
14144: DOUBLE
14145: EQUAL
14146: IFTRUE 14150
14148: GO 14168
14150: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
14151: LD_ADDR_VAR 0 3
14155: PUSH
14156: LD_INT 23
14158: PUSH
14159: LD_INT 24
14161: PUSH
14162: EMPTY
14163: LIST
14164: LIST
14165: ST_TO_ADDR
14166: GO 14169
14168: POP
// result := ( chassis in result ) ;
14169: LD_ADDR_VAR 0 3
14173: PUSH
14174: LD_VAR 0 1
14178: PUSH
14179: LD_VAR 0 3
14183: IN
14184: ST_TO_ADDR
// end ;
14185: LD_VAR 0 3
14189: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
14190: LD_INT 0
14192: PPUSH
14193: PPUSH
14194: PPUSH
14195: PPUSH
14196: PPUSH
14197: PPUSH
14198: PPUSH
// result := array ;
14199: LD_ADDR_VAR 0 5
14203: PUSH
14204: LD_VAR 0 1
14208: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
14209: LD_VAR 0 1
14213: NOT
14214: PUSH
14215: LD_VAR 0 2
14219: NOT
14220: OR
14221: PUSH
14222: LD_VAR 0 3
14226: NOT
14227: OR
14228: PUSH
14229: LD_VAR 0 2
14233: PUSH
14234: LD_VAR 0 1
14238: GREATER
14239: OR
14240: PUSH
14241: LD_VAR 0 3
14245: PUSH
14246: LD_VAR 0 1
14250: GREATER
14251: OR
14252: IFFALSE 14256
// exit ;
14254: GO 14552
// if direction then
14256: LD_VAR 0 4
14260: IFFALSE 14324
// begin d := 1 ;
14262: LD_ADDR_VAR 0 9
14266: PUSH
14267: LD_INT 1
14269: ST_TO_ADDR
// if i_from > i_to then
14270: LD_VAR 0 2
14274: PUSH
14275: LD_VAR 0 3
14279: GREATER
14280: IFFALSE 14306
// length := ( array - i_from ) + i_to else
14282: LD_ADDR_VAR 0 11
14286: PUSH
14287: LD_VAR 0 1
14291: PUSH
14292: LD_VAR 0 2
14296: MINUS
14297: PUSH
14298: LD_VAR 0 3
14302: PLUS
14303: ST_TO_ADDR
14304: GO 14322
// length := i_to - i_from ;
14306: LD_ADDR_VAR 0 11
14310: PUSH
14311: LD_VAR 0 3
14315: PUSH
14316: LD_VAR 0 2
14320: MINUS
14321: ST_TO_ADDR
// end else
14322: GO 14385
// begin d := - 1 ;
14324: LD_ADDR_VAR 0 9
14328: PUSH
14329: LD_INT 1
14331: NEG
14332: ST_TO_ADDR
// if i_from > i_to then
14333: LD_VAR 0 2
14337: PUSH
14338: LD_VAR 0 3
14342: GREATER
14343: IFFALSE 14363
// length := i_from - i_to else
14345: LD_ADDR_VAR 0 11
14349: PUSH
14350: LD_VAR 0 2
14354: PUSH
14355: LD_VAR 0 3
14359: MINUS
14360: ST_TO_ADDR
14361: GO 14385
// length := ( array - i_to ) + i_from ;
14363: LD_ADDR_VAR 0 11
14367: PUSH
14368: LD_VAR 0 1
14372: PUSH
14373: LD_VAR 0 3
14377: MINUS
14378: PUSH
14379: LD_VAR 0 2
14383: PLUS
14384: ST_TO_ADDR
// end ; if not length then
14385: LD_VAR 0 11
14389: NOT
14390: IFFALSE 14394
// exit ;
14392: GO 14552
// tmp := array ;
14394: LD_ADDR_VAR 0 10
14398: PUSH
14399: LD_VAR 0 1
14403: ST_TO_ADDR
// for i = 1 to length do
14404: LD_ADDR_VAR 0 6
14408: PUSH
14409: DOUBLE
14410: LD_INT 1
14412: DEC
14413: ST_TO_ADDR
14414: LD_VAR 0 11
14418: PUSH
14419: FOR_TO
14420: IFFALSE 14540
// begin for j = 1 to array do
14422: LD_ADDR_VAR 0 7
14426: PUSH
14427: DOUBLE
14428: LD_INT 1
14430: DEC
14431: ST_TO_ADDR
14432: LD_VAR 0 1
14436: PUSH
14437: FOR_TO
14438: IFFALSE 14526
// begin k := j + d ;
14440: LD_ADDR_VAR 0 8
14444: PUSH
14445: LD_VAR 0 7
14449: PUSH
14450: LD_VAR 0 9
14454: PLUS
14455: ST_TO_ADDR
// if k > array then
14456: LD_VAR 0 8
14460: PUSH
14461: LD_VAR 0 1
14465: GREATER
14466: IFFALSE 14476
// k := 1 ;
14468: LD_ADDR_VAR 0 8
14472: PUSH
14473: LD_INT 1
14475: ST_TO_ADDR
// if not k then
14476: LD_VAR 0 8
14480: NOT
14481: IFFALSE 14493
// k := array ;
14483: LD_ADDR_VAR 0 8
14487: PUSH
14488: LD_VAR 0 1
14492: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
14493: LD_ADDR_VAR 0 10
14497: PUSH
14498: LD_VAR 0 10
14502: PPUSH
14503: LD_VAR 0 8
14507: PPUSH
14508: LD_VAR 0 1
14512: PUSH
14513: LD_VAR 0 7
14517: ARRAY
14518: PPUSH
14519: CALL_OW 1
14523: ST_TO_ADDR
// end ;
14524: GO 14437
14526: POP
14527: POP
// array := tmp ;
14528: LD_ADDR_VAR 0 1
14532: PUSH
14533: LD_VAR 0 10
14537: ST_TO_ADDR
// end ;
14538: GO 14419
14540: POP
14541: POP
// result := array ;
14542: LD_ADDR_VAR 0 5
14546: PUSH
14547: LD_VAR 0 1
14551: ST_TO_ADDR
// end ;
14552: LD_VAR 0 5
14556: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
14557: LD_INT 0
14559: PPUSH
14560: PPUSH
// result := 0 ;
14561: LD_ADDR_VAR 0 3
14565: PUSH
14566: LD_INT 0
14568: ST_TO_ADDR
// if not array or not value in array then
14569: LD_VAR 0 1
14573: NOT
14574: PUSH
14575: LD_VAR 0 2
14579: PUSH
14580: LD_VAR 0 1
14584: IN
14585: NOT
14586: OR
14587: IFFALSE 14591
// exit ;
14589: GO 14645
// for i = 1 to array do
14591: LD_ADDR_VAR 0 4
14595: PUSH
14596: DOUBLE
14597: LD_INT 1
14599: DEC
14600: ST_TO_ADDR
14601: LD_VAR 0 1
14605: PUSH
14606: FOR_TO
14607: IFFALSE 14643
// if value = array [ i ] then
14609: LD_VAR 0 2
14613: PUSH
14614: LD_VAR 0 1
14618: PUSH
14619: LD_VAR 0 4
14623: ARRAY
14624: EQUAL
14625: IFFALSE 14641
// begin result := i ;
14627: LD_ADDR_VAR 0 3
14631: PUSH
14632: LD_VAR 0 4
14636: ST_TO_ADDR
// exit ;
14637: POP
14638: POP
14639: GO 14645
// end ;
14641: GO 14606
14643: POP
14644: POP
// end ;
14645: LD_VAR 0 3
14649: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
14650: LD_INT 0
14652: PPUSH
// vc_chassis := chassis ;
14653: LD_ADDR_OWVAR 37
14657: PUSH
14658: LD_VAR 0 1
14662: ST_TO_ADDR
// vc_engine := engine ;
14663: LD_ADDR_OWVAR 39
14667: PUSH
14668: LD_VAR 0 2
14672: ST_TO_ADDR
// vc_control := control ;
14673: LD_ADDR_OWVAR 38
14677: PUSH
14678: LD_VAR 0 3
14682: ST_TO_ADDR
// vc_weapon := weapon ;
14683: LD_ADDR_OWVAR 40
14687: PUSH
14688: LD_VAR 0 4
14692: ST_TO_ADDR
// vc_fuel_battery := fuel ;
14693: LD_ADDR_OWVAR 41
14697: PUSH
14698: LD_VAR 0 5
14702: ST_TO_ADDR
// end ;
14703: LD_VAR 0 6
14707: RET
// export function WantPlant ( unit ) ; var task ; begin
14708: LD_INT 0
14710: PPUSH
14711: PPUSH
// result := false ;
14712: LD_ADDR_VAR 0 2
14716: PUSH
14717: LD_INT 0
14719: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
14720: LD_ADDR_VAR 0 3
14724: PUSH
14725: LD_VAR 0 1
14729: PPUSH
14730: CALL_OW 437
14734: ST_TO_ADDR
// if task then
14735: LD_VAR 0 3
14739: IFFALSE 14767
// if task [ 1 ] [ 1 ] = p then
14741: LD_VAR 0 3
14745: PUSH
14746: LD_INT 1
14748: ARRAY
14749: PUSH
14750: LD_INT 1
14752: ARRAY
14753: PUSH
14754: LD_STRING p
14756: EQUAL
14757: IFFALSE 14767
// result := true ;
14759: LD_ADDR_VAR 0 2
14763: PUSH
14764: LD_INT 1
14766: ST_TO_ADDR
// end ;
14767: LD_VAR 0 2
14771: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
14772: LD_INT 0
14774: PPUSH
14775: PPUSH
14776: PPUSH
14777: PPUSH
// if pos < 1 then
14778: LD_VAR 0 2
14782: PUSH
14783: LD_INT 1
14785: LESS
14786: IFFALSE 14790
// exit ;
14788: GO 15093
// if pos = 1 then
14790: LD_VAR 0 2
14794: PUSH
14795: LD_INT 1
14797: EQUAL
14798: IFFALSE 14831
// result := Replace ( arr , pos [ 1 ] , value ) else
14800: LD_ADDR_VAR 0 4
14804: PUSH
14805: LD_VAR 0 1
14809: PPUSH
14810: LD_VAR 0 2
14814: PUSH
14815: LD_INT 1
14817: ARRAY
14818: PPUSH
14819: LD_VAR 0 3
14823: PPUSH
14824: CALL_OW 1
14828: ST_TO_ADDR
14829: GO 15093
// begin tmp := arr ;
14831: LD_ADDR_VAR 0 6
14835: PUSH
14836: LD_VAR 0 1
14840: ST_TO_ADDR
// s_arr := [ tmp ] ;
14841: LD_ADDR_VAR 0 7
14845: PUSH
14846: LD_VAR 0 6
14850: PUSH
14851: EMPTY
14852: LIST
14853: ST_TO_ADDR
// for i = 1 to pos - 1 do
14854: LD_ADDR_VAR 0 5
14858: PUSH
14859: DOUBLE
14860: LD_INT 1
14862: DEC
14863: ST_TO_ADDR
14864: LD_VAR 0 2
14868: PUSH
14869: LD_INT 1
14871: MINUS
14872: PUSH
14873: FOR_TO
14874: IFFALSE 14919
// begin tmp := tmp [ pos [ i ] ] ;
14876: LD_ADDR_VAR 0 6
14880: PUSH
14881: LD_VAR 0 6
14885: PUSH
14886: LD_VAR 0 2
14890: PUSH
14891: LD_VAR 0 5
14895: ARRAY
14896: ARRAY
14897: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
14898: LD_ADDR_VAR 0 7
14902: PUSH
14903: LD_VAR 0 7
14907: PUSH
14908: LD_VAR 0 6
14912: PUSH
14913: EMPTY
14914: LIST
14915: ADD
14916: ST_TO_ADDR
// end ;
14917: GO 14873
14919: POP
14920: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
14921: LD_ADDR_VAR 0 6
14925: PUSH
14926: LD_VAR 0 6
14930: PPUSH
14931: LD_VAR 0 2
14935: PUSH
14936: LD_VAR 0 2
14940: ARRAY
14941: PPUSH
14942: LD_VAR 0 3
14946: PPUSH
14947: CALL_OW 1
14951: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
14952: LD_ADDR_VAR 0 7
14956: PUSH
14957: LD_VAR 0 7
14961: PPUSH
14962: LD_VAR 0 7
14966: PPUSH
14967: LD_VAR 0 6
14971: PPUSH
14972: CALL_OW 1
14976: ST_TO_ADDR
// for i = s_arr downto 2 do
14977: LD_ADDR_VAR 0 5
14981: PUSH
14982: DOUBLE
14983: LD_VAR 0 7
14987: INC
14988: ST_TO_ADDR
14989: LD_INT 2
14991: PUSH
14992: FOR_DOWNTO
14993: IFFALSE 15077
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
14995: LD_ADDR_VAR 0 6
14999: PUSH
15000: LD_VAR 0 7
15004: PUSH
15005: LD_VAR 0 5
15009: PUSH
15010: LD_INT 1
15012: MINUS
15013: ARRAY
15014: PPUSH
15015: LD_VAR 0 2
15019: PUSH
15020: LD_VAR 0 5
15024: PUSH
15025: LD_INT 1
15027: MINUS
15028: ARRAY
15029: PPUSH
15030: LD_VAR 0 7
15034: PUSH
15035: LD_VAR 0 5
15039: ARRAY
15040: PPUSH
15041: CALL_OW 1
15045: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
15046: LD_ADDR_VAR 0 7
15050: PUSH
15051: LD_VAR 0 7
15055: PPUSH
15056: LD_VAR 0 5
15060: PUSH
15061: LD_INT 1
15063: MINUS
15064: PPUSH
15065: LD_VAR 0 6
15069: PPUSH
15070: CALL_OW 1
15074: ST_TO_ADDR
// end ;
15075: GO 14992
15077: POP
15078: POP
// result := s_arr [ 1 ] ;
15079: LD_ADDR_VAR 0 4
15083: PUSH
15084: LD_VAR 0 7
15088: PUSH
15089: LD_INT 1
15091: ARRAY
15092: ST_TO_ADDR
// end ; end ;
15093: LD_VAR 0 4
15097: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
15098: LD_INT 0
15100: PPUSH
15101: PPUSH
// if not list then
15102: LD_VAR 0 1
15106: NOT
15107: IFFALSE 15111
// exit ;
15109: GO 15202
// i := list [ pos1 ] ;
15111: LD_ADDR_VAR 0 5
15115: PUSH
15116: LD_VAR 0 1
15120: PUSH
15121: LD_VAR 0 2
15125: ARRAY
15126: ST_TO_ADDR
// if not i then
15127: LD_VAR 0 5
15131: NOT
15132: IFFALSE 15136
// exit ;
15134: GO 15202
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
15136: LD_ADDR_VAR 0 1
15140: PUSH
15141: LD_VAR 0 1
15145: PPUSH
15146: LD_VAR 0 2
15150: PPUSH
15151: LD_VAR 0 1
15155: PUSH
15156: LD_VAR 0 3
15160: ARRAY
15161: PPUSH
15162: CALL_OW 1
15166: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
15167: LD_ADDR_VAR 0 1
15171: PUSH
15172: LD_VAR 0 1
15176: PPUSH
15177: LD_VAR 0 3
15181: PPUSH
15182: LD_VAR 0 5
15186: PPUSH
15187: CALL_OW 1
15191: ST_TO_ADDR
// result := list ;
15192: LD_ADDR_VAR 0 4
15196: PUSH
15197: LD_VAR 0 1
15201: ST_TO_ADDR
// end ;
15202: LD_VAR 0 4
15206: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
15207: LD_INT 0
15209: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
15210: LD_ADDR_VAR 0 5
15214: PUSH
15215: LD_VAR 0 1
15219: PPUSH
15220: CALL_OW 250
15224: PPUSH
15225: LD_VAR 0 1
15229: PPUSH
15230: CALL_OW 251
15234: PPUSH
15235: LD_VAR 0 2
15239: PPUSH
15240: LD_VAR 0 3
15244: PPUSH
15245: LD_VAR 0 4
15249: PPUSH
15250: CALL 15628 0 5
15254: ST_TO_ADDR
// end ;
15255: LD_VAR 0 5
15259: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
15260: LD_INT 0
15262: PPUSH
15263: PPUSH
15264: PPUSH
15265: PPUSH
// if not list or not unit then
15266: LD_VAR 0 2
15270: NOT
15271: PUSH
15272: LD_VAR 0 1
15276: NOT
15277: OR
15278: IFFALSE 15282
// exit ;
15280: GO 15623
// result := [ ] ;
15282: LD_ADDR_VAR 0 5
15286: PUSH
15287: EMPTY
15288: ST_TO_ADDR
// for i in list do
15289: LD_ADDR_VAR 0 6
15293: PUSH
15294: LD_VAR 0 2
15298: PUSH
15299: FOR_IN
15300: IFFALSE 15518
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
15302: LD_ADDR_VAR 0 8
15306: PUSH
15307: LD_VAR 0 1
15311: PPUSH
15312: LD_VAR 0 6
15316: PUSH
15317: LD_INT 1
15319: ARRAY
15320: PPUSH
15321: LD_VAR 0 6
15325: PUSH
15326: LD_INT 2
15328: ARRAY
15329: PPUSH
15330: CALL_OW 297
15334: ST_TO_ADDR
// if not Count ( result ) then
15335: LD_VAR 0 5
15339: PPUSH
15340: CALL 11912 0 1
15344: NOT
15345: IFFALSE 15378
// begin result := Join ( result , [ i , tmp ] ) ;
15347: LD_ADDR_VAR 0 5
15351: PUSH
15352: LD_VAR 0 5
15356: PPUSH
15357: LD_VAR 0 6
15361: PUSH
15362: LD_VAR 0 8
15366: PUSH
15367: EMPTY
15368: LIST
15369: LIST
15370: PPUSH
15371: CALL 47521 0 2
15375: ST_TO_ADDR
// continue ;
15376: GO 15299
// end ; if result [ result ] [ 2 ] <= tmp then
15378: LD_VAR 0 5
15382: PUSH
15383: LD_VAR 0 5
15387: ARRAY
15388: PUSH
15389: LD_INT 2
15391: ARRAY
15392: PUSH
15393: LD_VAR 0 8
15397: LESSEQUAL
15398: IFFALSE 15431
// result := Join ( result , [ i , tmp ] ) else
15400: LD_ADDR_VAR 0 5
15404: PUSH
15405: LD_VAR 0 5
15409: PPUSH
15410: LD_VAR 0 6
15414: PUSH
15415: LD_VAR 0 8
15419: PUSH
15420: EMPTY
15421: LIST
15422: LIST
15423: PPUSH
15424: CALL 47521 0 2
15428: ST_TO_ADDR
15429: GO 15516
// begin for j := 1 to Count ( result ) do
15431: LD_ADDR_VAR 0 7
15435: PUSH
15436: DOUBLE
15437: LD_INT 1
15439: DEC
15440: ST_TO_ADDR
15441: LD_VAR 0 5
15445: PPUSH
15446: CALL 11912 0 1
15450: PUSH
15451: FOR_TO
15452: IFFALSE 15514
// begin if tmp < result [ j ] [ 2 ] then
15454: LD_VAR 0 8
15458: PUSH
15459: LD_VAR 0 5
15463: PUSH
15464: LD_VAR 0 7
15468: ARRAY
15469: PUSH
15470: LD_INT 2
15472: ARRAY
15473: LESS
15474: IFFALSE 15512
// begin result := Insert ( result , j , [ i , tmp ] ) ;
15476: LD_ADDR_VAR 0 5
15480: PUSH
15481: LD_VAR 0 5
15485: PPUSH
15486: LD_VAR 0 7
15490: PPUSH
15491: LD_VAR 0 6
15495: PUSH
15496: LD_VAR 0 8
15500: PUSH
15501: EMPTY
15502: LIST
15503: LIST
15504: PPUSH
15505: CALL_OW 2
15509: ST_TO_ADDR
// break ;
15510: GO 15514
// end ; end ;
15512: GO 15451
15514: POP
15515: POP
// end ; end ;
15516: GO 15299
15518: POP
15519: POP
// if result and not asc then
15520: LD_VAR 0 5
15524: PUSH
15525: LD_VAR 0 3
15529: NOT
15530: AND
15531: IFFALSE 15548
// result := ReverseArray ( result ) ;
15533: LD_ADDR_VAR 0 5
15537: PUSH
15538: LD_VAR 0 5
15542: PPUSH
15543: CALL 42788 0 1
15547: ST_TO_ADDR
// tmp := [ ] ;
15548: LD_ADDR_VAR 0 8
15552: PUSH
15553: EMPTY
15554: ST_TO_ADDR
// if mode then
15555: LD_VAR 0 4
15559: IFFALSE 15623
// begin for i := 1 to result do
15561: LD_ADDR_VAR 0 6
15565: PUSH
15566: DOUBLE
15567: LD_INT 1
15569: DEC
15570: ST_TO_ADDR
15571: LD_VAR 0 5
15575: PUSH
15576: FOR_TO
15577: IFFALSE 15611
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
15579: LD_ADDR_VAR 0 8
15583: PUSH
15584: LD_VAR 0 8
15588: PPUSH
15589: LD_VAR 0 5
15593: PUSH
15594: LD_VAR 0 6
15598: ARRAY
15599: PUSH
15600: LD_INT 1
15602: ARRAY
15603: PPUSH
15604: CALL 47521 0 2
15608: ST_TO_ADDR
15609: GO 15576
15611: POP
15612: POP
// result := tmp ;
15613: LD_ADDR_VAR 0 5
15617: PUSH
15618: LD_VAR 0 8
15622: ST_TO_ADDR
// end ; end ;
15623: LD_VAR 0 5
15627: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
15628: LD_INT 0
15630: PPUSH
15631: PPUSH
15632: PPUSH
15633: PPUSH
// if not list then
15634: LD_VAR 0 3
15638: NOT
15639: IFFALSE 15643
// exit ;
15641: GO 16031
// result := [ ] ;
15643: LD_ADDR_VAR 0 6
15647: PUSH
15648: EMPTY
15649: ST_TO_ADDR
// for i in list do
15650: LD_ADDR_VAR 0 7
15654: PUSH
15655: LD_VAR 0 3
15659: PUSH
15660: FOR_IN
15661: IFFALSE 15863
// begin tmp := GetDistUnitXY ( i , x , y ) ;
15663: LD_ADDR_VAR 0 9
15667: PUSH
15668: LD_VAR 0 7
15672: PPUSH
15673: LD_VAR 0 1
15677: PPUSH
15678: LD_VAR 0 2
15682: PPUSH
15683: CALL_OW 297
15687: ST_TO_ADDR
// if not result then
15688: LD_VAR 0 6
15692: NOT
15693: IFFALSE 15719
// result := [ [ i , tmp ] ] else
15695: LD_ADDR_VAR 0 6
15699: PUSH
15700: LD_VAR 0 7
15704: PUSH
15705: LD_VAR 0 9
15709: PUSH
15710: EMPTY
15711: LIST
15712: LIST
15713: PUSH
15714: EMPTY
15715: LIST
15716: ST_TO_ADDR
15717: GO 15861
// begin if result [ result ] [ 2 ] <= tmp then
15719: LD_VAR 0 6
15723: PUSH
15724: LD_VAR 0 6
15728: ARRAY
15729: PUSH
15730: LD_INT 2
15732: ARRAY
15733: PUSH
15734: LD_VAR 0 9
15738: LESSEQUAL
15739: IFFALSE 15781
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
15741: LD_ADDR_VAR 0 6
15745: PUSH
15746: LD_VAR 0 6
15750: PPUSH
15751: LD_VAR 0 6
15755: PUSH
15756: LD_INT 1
15758: PLUS
15759: PPUSH
15760: LD_VAR 0 7
15764: PUSH
15765: LD_VAR 0 9
15769: PUSH
15770: EMPTY
15771: LIST
15772: LIST
15773: PPUSH
15774: CALL_OW 2
15778: ST_TO_ADDR
15779: GO 15861
// for j := 1 to result do
15781: LD_ADDR_VAR 0 8
15785: PUSH
15786: DOUBLE
15787: LD_INT 1
15789: DEC
15790: ST_TO_ADDR
15791: LD_VAR 0 6
15795: PUSH
15796: FOR_TO
15797: IFFALSE 15859
// begin if tmp < result [ j ] [ 2 ] then
15799: LD_VAR 0 9
15803: PUSH
15804: LD_VAR 0 6
15808: PUSH
15809: LD_VAR 0 8
15813: ARRAY
15814: PUSH
15815: LD_INT 2
15817: ARRAY
15818: LESS
15819: IFFALSE 15857
// begin result := Insert ( result , j , [ i , tmp ] ) ;
15821: LD_ADDR_VAR 0 6
15825: PUSH
15826: LD_VAR 0 6
15830: PPUSH
15831: LD_VAR 0 8
15835: PPUSH
15836: LD_VAR 0 7
15840: PUSH
15841: LD_VAR 0 9
15845: PUSH
15846: EMPTY
15847: LIST
15848: LIST
15849: PPUSH
15850: CALL_OW 2
15854: ST_TO_ADDR
// break ;
15855: GO 15859
// end ; end ;
15857: GO 15796
15859: POP
15860: POP
// end ; end ;
15861: GO 15660
15863: POP
15864: POP
// if result and not asc then
15865: LD_VAR 0 6
15869: PUSH
15870: LD_VAR 0 4
15874: NOT
15875: AND
15876: IFFALSE 15951
// begin tmp := result ;
15878: LD_ADDR_VAR 0 9
15882: PUSH
15883: LD_VAR 0 6
15887: ST_TO_ADDR
// for i = tmp downto 1 do
15888: LD_ADDR_VAR 0 7
15892: PUSH
15893: DOUBLE
15894: LD_VAR 0 9
15898: INC
15899: ST_TO_ADDR
15900: LD_INT 1
15902: PUSH
15903: FOR_DOWNTO
15904: IFFALSE 15949
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
15906: LD_ADDR_VAR 0 6
15910: PUSH
15911: LD_VAR 0 6
15915: PPUSH
15916: LD_VAR 0 9
15920: PUSH
15921: LD_VAR 0 7
15925: MINUS
15926: PUSH
15927: LD_INT 1
15929: PLUS
15930: PPUSH
15931: LD_VAR 0 9
15935: PUSH
15936: LD_VAR 0 7
15940: ARRAY
15941: PPUSH
15942: CALL_OW 1
15946: ST_TO_ADDR
15947: GO 15903
15949: POP
15950: POP
// end ; tmp := [ ] ;
15951: LD_ADDR_VAR 0 9
15955: PUSH
15956: EMPTY
15957: ST_TO_ADDR
// if mode then
15958: LD_VAR 0 5
15962: IFFALSE 16031
// begin for i = 1 to result do
15964: LD_ADDR_VAR 0 7
15968: PUSH
15969: DOUBLE
15970: LD_INT 1
15972: DEC
15973: ST_TO_ADDR
15974: LD_VAR 0 6
15978: PUSH
15979: FOR_TO
15980: IFFALSE 16019
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
15982: LD_ADDR_VAR 0 9
15986: PUSH
15987: LD_VAR 0 9
15991: PPUSH
15992: LD_VAR 0 7
15996: PPUSH
15997: LD_VAR 0 6
16001: PUSH
16002: LD_VAR 0 7
16006: ARRAY
16007: PUSH
16008: LD_INT 1
16010: ARRAY
16011: PPUSH
16012: CALL_OW 1
16016: ST_TO_ADDR
16017: GO 15979
16019: POP
16020: POP
// result := tmp ;
16021: LD_ADDR_VAR 0 6
16025: PUSH
16026: LD_VAR 0 9
16030: ST_TO_ADDR
// end ; end ;
16031: LD_VAR 0 6
16035: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
16036: LD_INT 0
16038: PPUSH
16039: PPUSH
16040: PPUSH
16041: PPUSH
16042: PPUSH
16043: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
16044: LD_ADDR_VAR 0 5
16048: PUSH
16049: LD_INT 0
16051: PUSH
16052: LD_INT 0
16054: PUSH
16055: LD_INT 0
16057: PUSH
16058: EMPTY
16059: PUSH
16060: EMPTY
16061: LIST
16062: LIST
16063: LIST
16064: LIST
16065: ST_TO_ADDR
// if not x or not y then
16066: LD_VAR 0 2
16070: NOT
16071: PUSH
16072: LD_VAR 0 3
16076: NOT
16077: OR
16078: IFFALSE 16082
// exit ;
16080: GO 17732
// if not range then
16082: LD_VAR 0 4
16086: NOT
16087: IFFALSE 16097
// range := 10 ;
16089: LD_ADDR_VAR 0 4
16093: PUSH
16094: LD_INT 10
16096: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
16097: LD_ADDR_VAR 0 8
16101: PUSH
16102: LD_INT 81
16104: PUSH
16105: LD_VAR 0 1
16109: PUSH
16110: EMPTY
16111: LIST
16112: LIST
16113: PUSH
16114: LD_INT 92
16116: PUSH
16117: LD_VAR 0 2
16121: PUSH
16122: LD_VAR 0 3
16126: PUSH
16127: LD_VAR 0 4
16131: PUSH
16132: EMPTY
16133: LIST
16134: LIST
16135: LIST
16136: LIST
16137: PUSH
16138: LD_INT 3
16140: PUSH
16141: LD_INT 21
16143: PUSH
16144: LD_INT 3
16146: PUSH
16147: EMPTY
16148: LIST
16149: LIST
16150: PUSH
16151: EMPTY
16152: LIST
16153: LIST
16154: PUSH
16155: EMPTY
16156: LIST
16157: LIST
16158: LIST
16159: PPUSH
16160: CALL_OW 69
16164: ST_TO_ADDR
// if not tmp then
16165: LD_VAR 0 8
16169: NOT
16170: IFFALSE 16174
// exit ;
16172: GO 17732
// for i in tmp do
16174: LD_ADDR_VAR 0 6
16178: PUSH
16179: LD_VAR 0 8
16183: PUSH
16184: FOR_IN
16185: IFFALSE 17707
// begin points := [ 0 , 0 , 0 ] ;
16187: LD_ADDR_VAR 0 9
16191: PUSH
16192: LD_INT 0
16194: PUSH
16195: LD_INT 0
16197: PUSH
16198: LD_INT 0
16200: PUSH
16201: EMPTY
16202: LIST
16203: LIST
16204: LIST
16205: ST_TO_ADDR
// bpoints := 1 ;
16206: LD_ADDR_VAR 0 10
16210: PUSH
16211: LD_INT 1
16213: ST_TO_ADDR
// case GetType ( i ) of unit_human :
16214: LD_VAR 0 6
16218: PPUSH
16219: CALL_OW 247
16223: PUSH
16224: LD_INT 1
16226: DOUBLE
16227: EQUAL
16228: IFTRUE 16232
16230: GO 16810
16232: POP
// begin if GetClass ( i ) = 1 then
16233: LD_VAR 0 6
16237: PPUSH
16238: CALL_OW 257
16242: PUSH
16243: LD_INT 1
16245: EQUAL
16246: IFFALSE 16267
// points := [ 10 , 5 , 3 ] ;
16248: LD_ADDR_VAR 0 9
16252: PUSH
16253: LD_INT 10
16255: PUSH
16256: LD_INT 5
16258: PUSH
16259: LD_INT 3
16261: PUSH
16262: EMPTY
16263: LIST
16264: LIST
16265: LIST
16266: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
16267: LD_VAR 0 6
16271: PPUSH
16272: CALL_OW 257
16276: PUSH
16277: LD_INT 2
16279: PUSH
16280: LD_INT 3
16282: PUSH
16283: LD_INT 4
16285: PUSH
16286: EMPTY
16287: LIST
16288: LIST
16289: LIST
16290: IN
16291: IFFALSE 16312
// points := [ 3 , 2 , 1 ] ;
16293: LD_ADDR_VAR 0 9
16297: PUSH
16298: LD_INT 3
16300: PUSH
16301: LD_INT 2
16303: PUSH
16304: LD_INT 1
16306: PUSH
16307: EMPTY
16308: LIST
16309: LIST
16310: LIST
16311: ST_TO_ADDR
// if GetClass ( i ) = 5 then
16312: LD_VAR 0 6
16316: PPUSH
16317: CALL_OW 257
16321: PUSH
16322: LD_INT 5
16324: EQUAL
16325: IFFALSE 16346
// points := [ 130 , 5 , 2 ] ;
16327: LD_ADDR_VAR 0 9
16331: PUSH
16332: LD_INT 130
16334: PUSH
16335: LD_INT 5
16337: PUSH
16338: LD_INT 2
16340: PUSH
16341: EMPTY
16342: LIST
16343: LIST
16344: LIST
16345: ST_TO_ADDR
// if GetClass ( i ) = 8 then
16346: LD_VAR 0 6
16350: PPUSH
16351: CALL_OW 257
16355: PUSH
16356: LD_INT 8
16358: EQUAL
16359: IFFALSE 16380
// points := [ 35 , 35 , 30 ] ;
16361: LD_ADDR_VAR 0 9
16365: PUSH
16366: LD_INT 35
16368: PUSH
16369: LD_INT 35
16371: PUSH
16372: LD_INT 30
16374: PUSH
16375: EMPTY
16376: LIST
16377: LIST
16378: LIST
16379: ST_TO_ADDR
// if GetClass ( i ) = 9 then
16380: LD_VAR 0 6
16384: PPUSH
16385: CALL_OW 257
16389: PUSH
16390: LD_INT 9
16392: EQUAL
16393: IFFALSE 16414
// points := [ 20 , 55 , 40 ] ;
16395: LD_ADDR_VAR 0 9
16399: PUSH
16400: LD_INT 20
16402: PUSH
16403: LD_INT 55
16405: PUSH
16406: LD_INT 40
16408: PUSH
16409: EMPTY
16410: LIST
16411: LIST
16412: LIST
16413: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
16414: LD_VAR 0 6
16418: PPUSH
16419: CALL_OW 257
16423: PUSH
16424: LD_INT 12
16426: PUSH
16427: LD_INT 16
16429: PUSH
16430: EMPTY
16431: LIST
16432: LIST
16433: IN
16434: IFFALSE 16455
// points := [ 5 , 3 , 2 ] ;
16436: LD_ADDR_VAR 0 9
16440: PUSH
16441: LD_INT 5
16443: PUSH
16444: LD_INT 3
16446: PUSH
16447: LD_INT 2
16449: PUSH
16450: EMPTY
16451: LIST
16452: LIST
16453: LIST
16454: ST_TO_ADDR
// if GetClass ( i ) = 17 then
16455: LD_VAR 0 6
16459: PPUSH
16460: CALL_OW 257
16464: PUSH
16465: LD_INT 17
16467: EQUAL
16468: IFFALSE 16489
// points := [ 100 , 50 , 75 ] ;
16470: LD_ADDR_VAR 0 9
16474: PUSH
16475: LD_INT 100
16477: PUSH
16478: LD_INT 50
16480: PUSH
16481: LD_INT 75
16483: PUSH
16484: EMPTY
16485: LIST
16486: LIST
16487: LIST
16488: ST_TO_ADDR
// if GetClass ( i ) = 15 then
16489: LD_VAR 0 6
16493: PPUSH
16494: CALL_OW 257
16498: PUSH
16499: LD_INT 15
16501: EQUAL
16502: IFFALSE 16523
// points := [ 10 , 5 , 3 ] ;
16504: LD_ADDR_VAR 0 9
16508: PUSH
16509: LD_INT 10
16511: PUSH
16512: LD_INT 5
16514: PUSH
16515: LD_INT 3
16517: PUSH
16518: EMPTY
16519: LIST
16520: LIST
16521: LIST
16522: ST_TO_ADDR
// if GetClass ( i ) = 14 then
16523: LD_VAR 0 6
16527: PPUSH
16528: CALL_OW 257
16532: PUSH
16533: LD_INT 14
16535: EQUAL
16536: IFFALSE 16557
// points := [ 10 , 0 , 0 ] ;
16538: LD_ADDR_VAR 0 9
16542: PUSH
16543: LD_INT 10
16545: PUSH
16546: LD_INT 0
16548: PUSH
16549: LD_INT 0
16551: PUSH
16552: EMPTY
16553: LIST
16554: LIST
16555: LIST
16556: ST_TO_ADDR
// if GetClass ( i ) = 11 then
16557: LD_VAR 0 6
16561: PPUSH
16562: CALL_OW 257
16566: PUSH
16567: LD_INT 11
16569: EQUAL
16570: IFFALSE 16591
// points := [ 30 , 10 , 5 ] ;
16572: LD_ADDR_VAR 0 9
16576: PUSH
16577: LD_INT 30
16579: PUSH
16580: LD_INT 10
16582: PUSH
16583: LD_INT 5
16585: PUSH
16586: EMPTY
16587: LIST
16588: LIST
16589: LIST
16590: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
16591: LD_VAR 0 1
16595: PPUSH
16596: LD_INT 5
16598: PPUSH
16599: CALL_OW 321
16603: PUSH
16604: LD_INT 2
16606: EQUAL
16607: IFFALSE 16624
// bpoints := bpoints * 1.8 ;
16609: LD_ADDR_VAR 0 10
16613: PUSH
16614: LD_VAR 0 10
16618: PUSH
16619: LD_REAL  1.80000000000000E+0000
16622: MUL
16623: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
16624: LD_VAR 0 6
16628: PPUSH
16629: CALL_OW 257
16633: PUSH
16634: LD_INT 1
16636: PUSH
16637: LD_INT 2
16639: PUSH
16640: LD_INT 3
16642: PUSH
16643: LD_INT 4
16645: PUSH
16646: EMPTY
16647: LIST
16648: LIST
16649: LIST
16650: LIST
16651: IN
16652: PUSH
16653: LD_VAR 0 1
16657: PPUSH
16658: LD_INT 51
16660: PPUSH
16661: CALL_OW 321
16665: PUSH
16666: LD_INT 2
16668: EQUAL
16669: AND
16670: IFFALSE 16687
// bpoints := bpoints * 1.2 ;
16672: LD_ADDR_VAR 0 10
16676: PUSH
16677: LD_VAR 0 10
16681: PUSH
16682: LD_REAL  1.20000000000000E+0000
16685: MUL
16686: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
16687: LD_VAR 0 6
16691: PPUSH
16692: CALL_OW 257
16696: PUSH
16697: LD_INT 5
16699: PUSH
16700: LD_INT 7
16702: PUSH
16703: LD_INT 9
16705: PUSH
16706: EMPTY
16707: LIST
16708: LIST
16709: LIST
16710: IN
16711: PUSH
16712: LD_VAR 0 1
16716: PPUSH
16717: LD_INT 52
16719: PPUSH
16720: CALL_OW 321
16724: PUSH
16725: LD_INT 2
16727: EQUAL
16728: AND
16729: IFFALSE 16746
// bpoints := bpoints * 1.5 ;
16731: LD_ADDR_VAR 0 10
16735: PUSH
16736: LD_VAR 0 10
16740: PUSH
16741: LD_REAL  1.50000000000000E+0000
16744: MUL
16745: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
16746: LD_VAR 0 1
16750: PPUSH
16751: LD_INT 66
16753: PPUSH
16754: CALL_OW 321
16758: PUSH
16759: LD_INT 2
16761: EQUAL
16762: IFFALSE 16779
// bpoints := bpoints * 1.1 ;
16764: LD_ADDR_VAR 0 10
16768: PUSH
16769: LD_VAR 0 10
16773: PUSH
16774: LD_REAL  1.10000000000000E+0000
16777: MUL
16778: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
16779: LD_ADDR_VAR 0 10
16783: PUSH
16784: LD_VAR 0 10
16788: PUSH
16789: LD_VAR 0 6
16793: PPUSH
16794: LD_INT 1
16796: PPUSH
16797: CALL_OW 259
16801: PUSH
16802: LD_REAL  1.15000000000000E+0000
16805: MUL
16806: MUL
16807: ST_TO_ADDR
// end ; unit_vehicle :
16808: GO 17636
16810: LD_INT 2
16812: DOUBLE
16813: EQUAL
16814: IFTRUE 16818
16816: GO 17624
16818: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
16819: LD_VAR 0 6
16823: PPUSH
16824: CALL_OW 264
16828: PUSH
16829: LD_INT 2
16831: PUSH
16832: LD_INT 42
16834: PUSH
16835: LD_INT 24
16837: PUSH
16838: EMPTY
16839: LIST
16840: LIST
16841: LIST
16842: IN
16843: IFFALSE 16864
// points := [ 25 , 5 , 3 ] ;
16845: LD_ADDR_VAR 0 9
16849: PUSH
16850: LD_INT 25
16852: PUSH
16853: LD_INT 5
16855: PUSH
16856: LD_INT 3
16858: PUSH
16859: EMPTY
16860: LIST
16861: LIST
16862: LIST
16863: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
16864: LD_VAR 0 6
16868: PPUSH
16869: CALL_OW 264
16873: PUSH
16874: LD_INT 4
16876: PUSH
16877: LD_INT 43
16879: PUSH
16880: LD_INT 25
16882: PUSH
16883: EMPTY
16884: LIST
16885: LIST
16886: LIST
16887: IN
16888: IFFALSE 16909
// points := [ 40 , 15 , 5 ] ;
16890: LD_ADDR_VAR 0 9
16894: PUSH
16895: LD_INT 40
16897: PUSH
16898: LD_INT 15
16900: PUSH
16901: LD_INT 5
16903: PUSH
16904: EMPTY
16905: LIST
16906: LIST
16907: LIST
16908: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
16909: LD_VAR 0 6
16913: PPUSH
16914: CALL_OW 264
16918: PUSH
16919: LD_INT 3
16921: PUSH
16922: LD_INT 23
16924: PUSH
16925: EMPTY
16926: LIST
16927: LIST
16928: IN
16929: IFFALSE 16950
// points := [ 7 , 25 , 8 ] ;
16931: LD_ADDR_VAR 0 9
16935: PUSH
16936: LD_INT 7
16938: PUSH
16939: LD_INT 25
16941: PUSH
16942: LD_INT 8
16944: PUSH
16945: EMPTY
16946: LIST
16947: LIST
16948: LIST
16949: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
16950: LD_VAR 0 6
16954: PPUSH
16955: CALL_OW 264
16959: PUSH
16960: LD_INT 5
16962: PUSH
16963: LD_INT 27
16965: PUSH
16966: LD_INT 44
16968: PUSH
16969: EMPTY
16970: LIST
16971: LIST
16972: LIST
16973: IN
16974: IFFALSE 16995
// points := [ 14 , 50 , 16 ] ;
16976: LD_ADDR_VAR 0 9
16980: PUSH
16981: LD_INT 14
16983: PUSH
16984: LD_INT 50
16986: PUSH
16987: LD_INT 16
16989: PUSH
16990: EMPTY
16991: LIST
16992: LIST
16993: LIST
16994: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
16995: LD_VAR 0 6
16999: PPUSH
17000: CALL_OW 264
17004: PUSH
17005: LD_INT 6
17007: PUSH
17008: LD_INT 46
17010: PUSH
17011: EMPTY
17012: LIST
17013: LIST
17014: IN
17015: IFFALSE 17036
// points := [ 32 , 120 , 70 ] ;
17017: LD_ADDR_VAR 0 9
17021: PUSH
17022: LD_INT 32
17024: PUSH
17025: LD_INT 120
17027: PUSH
17028: LD_INT 70
17030: PUSH
17031: EMPTY
17032: LIST
17033: LIST
17034: LIST
17035: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
17036: LD_VAR 0 6
17040: PPUSH
17041: CALL_OW 264
17045: PUSH
17046: LD_INT 7
17048: PUSH
17049: LD_INT 28
17051: PUSH
17052: LD_INT 45
17054: PUSH
17055: LD_INT 92
17057: PUSH
17058: EMPTY
17059: LIST
17060: LIST
17061: LIST
17062: LIST
17063: IN
17064: IFFALSE 17085
// points := [ 35 , 20 , 45 ] ;
17066: LD_ADDR_VAR 0 9
17070: PUSH
17071: LD_INT 35
17073: PUSH
17074: LD_INT 20
17076: PUSH
17077: LD_INT 45
17079: PUSH
17080: EMPTY
17081: LIST
17082: LIST
17083: LIST
17084: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
17085: LD_VAR 0 6
17089: PPUSH
17090: CALL_OW 264
17094: PUSH
17095: LD_INT 47
17097: PUSH
17098: EMPTY
17099: LIST
17100: IN
17101: IFFALSE 17122
// points := [ 67 , 45 , 75 ] ;
17103: LD_ADDR_VAR 0 9
17107: PUSH
17108: LD_INT 67
17110: PUSH
17111: LD_INT 45
17113: PUSH
17114: LD_INT 75
17116: PUSH
17117: EMPTY
17118: LIST
17119: LIST
17120: LIST
17121: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
17122: LD_VAR 0 6
17126: PPUSH
17127: CALL_OW 264
17131: PUSH
17132: LD_INT 26
17134: PUSH
17135: EMPTY
17136: LIST
17137: IN
17138: IFFALSE 17159
// points := [ 120 , 30 , 80 ] ;
17140: LD_ADDR_VAR 0 9
17144: PUSH
17145: LD_INT 120
17147: PUSH
17148: LD_INT 30
17150: PUSH
17151: LD_INT 80
17153: PUSH
17154: EMPTY
17155: LIST
17156: LIST
17157: LIST
17158: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
17159: LD_VAR 0 6
17163: PPUSH
17164: CALL_OW 264
17168: PUSH
17169: LD_INT 22
17171: PUSH
17172: EMPTY
17173: LIST
17174: IN
17175: IFFALSE 17196
// points := [ 40 , 1 , 1 ] ;
17177: LD_ADDR_VAR 0 9
17181: PUSH
17182: LD_INT 40
17184: PUSH
17185: LD_INT 1
17187: PUSH
17188: LD_INT 1
17190: PUSH
17191: EMPTY
17192: LIST
17193: LIST
17194: LIST
17195: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
17196: LD_VAR 0 6
17200: PPUSH
17201: CALL_OW 264
17205: PUSH
17206: LD_INT 29
17208: PUSH
17209: EMPTY
17210: LIST
17211: IN
17212: IFFALSE 17233
// points := [ 70 , 200 , 400 ] ;
17214: LD_ADDR_VAR 0 9
17218: PUSH
17219: LD_INT 70
17221: PUSH
17222: LD_INT 200
17224: PUSH
17225: LD_INT 400
17227: PUSH
17228: EMPTY
17229: LIST
17230: LIST
17231: LIST
17232: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
17233: LD_VAR 0 6
17237: PPUSH
17238: CALL_OW 264
17242: PUSH
17243: LD_INT 14
17245: PUSH
17246: LD_INT 53
17248: PUSH
17249: EMPTY
17250: LIST
17251: LIST
17252: IN
17253: IFFALSE 17274
// points := [ 40 , 10 , 20 ] ;
17255: LD_ADDR_VAR 0 9
17259: PUSH
17260: LD_INT 40
17262: PUSH
17263: LD_INT 10
17265: PUSH
17266: LD_INT 20
17268: PUSH
17269: EMPTY
17270: LIST
17271: LIST
17272: LIST
17273: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
17274: LD_VAR 0 6
17278: PPUSH
17279: CALL_OW 264
17283: PUSH
17284: LD_INT 9
17286: PUSH
17287: EMPTY
17288: LIST
17289: IN
17290: IFFALSE 17311
// points := [ 5 , 70 , 20 ] ;
17292: LD_ADDR_VAR 0 9
17296: PUSH
17297: LD_INT 5
17299: PUSH
17300: LD_INT 70
17302: PUSH
17303: LD_INT 20
17305: PUSH
17306: EMPTY
17307: LIST
17308: LIST
17309: LIST
17310: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
17311: LD_VAR 0 6
17315: PPUSH
17316: CALL_OW 264
17320: PUSH
17321: LD_INT 10
17323: PUSH
17324: EMPTY
17325: LIST
17326: IN
17327: IFFALSE 17348
// points := [ 35 , 110 , 70 ] ;
17329: LD_ADDR_VAR 0 9
17333: PUSH
17334: LD_INT 35
17336: PUSH
17337: LD_INT 110
17339: PUSH
17340: LD_INT 70
17342: PUSH
17343: EMPTY
17344: LIST
17345: LIST
17346: LIST
17347: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
17348: LD_VAR 0 6
17352: PPUSH
17353: CALL_OW 265
17357: PUSH
17358: LD_INT 25
17360: EQUAL
17361: IFFALSE 17382
// points := [ 80 , 65 , 100 ] ;
17363: LD_ADDR_VAR 0 9
17367: PUSH
17368: LD_INT 80
17370: PUSH
17371: LD_INT 65
17373: PUSH
17374: LD_INT 100
17376: PUSH
17377: EMPTY
17378: LIST
17379: LIST
17380: LIST
17381: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
17382: LD_VAR 0 6
17386: PPUSH
17387: CALL_OW 263
17391: PUSH
17392: LD_INT 1
17394: EQUAL
17395: IFFALSE 17430
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
17397: LD_ADDR_VAR 0 10
17401: PUSH
17402: LD_VAR 0 10
17406: PUSH
17407: LD_VAR 0 6
17411: PPUSH
17412: CALL_OW 311
17416: PPUSH
17417: LD_INT 3
17419: PPUSH
17420: CALL_OW 259
17424: PUSH
17425: LD_INT 4
17427: MUL
17428: MUL
17429: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
17430: LD_VAR 0 6
17434: PPUSH
17435: CALL_OW 263
17439: PUSH
17440: LD_INT 2
17442: EQUAL
17443: IFFALSE 17494
// begin j := IsControledBy ( i ) ;
17445: LD_ADDR_VAR 0 7
17449: PUSH
17450: LD_VAR 0 6
17454: PPUSH
17455: CALL_OW 312
17459: ST_TO_ADDR
// if j then
17460: LD_VAR 0 7
17464: IFFALSE 17494
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
17466: LD_ADDR_VAR 0 10
17470: PUSH
17471: LD_VAR 0 10
17475: PUSH
17476: LD_VAR 0 7
17480: PPUSH
17481: LD_INT 3
17483: PPUSH
17484: CALL_OW 259
17488: PUSH
17489: LD_INT 3
17491: MUL
17492: MUL
17493: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
17494: LD_VAR 0 6
17498: PPUSH
17499: CALL_OW 264
17503: PUSH
17504: LD_INT 5
17506: PUSH
17507: LD_INT 6
17509: PUSH
17510: LD_INT 46
17512: PUSH
17513: LD_INT 44
17515: PUSH
17516: LD_INT 47
17518: PUSH
17519: LD_INT 45
17521: PUSH
17522: LD_INT 28
17524: PUSH
17525: LD_INT 7
17527: PUSH
17528: LD_INT 27
17530: PUSH
17531: LD_INT 29
17533: PUSH
17534: EMPTY
17535: LIST
17536: LIST
17537: LIST
17538: LIST
17539: LIST
17540: LIST
17541: LIST
17542: LIST
17543: LIST
17544: LIST
17545: IN
17546: PUSH
17547: LD_VAR 0 1
17551: PPUSH
17552: LD_INT 52
17554: PPUSH
17555: CALL_OW 321
17559: PUSH
17560: LD_INT 2
17562: EQUAL
17563: AND
17564: IFFALSE 17581
// bpoints := bpoints * 1.2 ;
17566: LD_ADDR_VAR 0 10
17570: PUSH
17571: LD_VAR 0 10
17575: PUSH
17576: LD_REAL  1.20000000000000E+0000
17579: MUL
17580: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
17581: LD_VAR 0 6
17585: PPUSH
17586: CALL_OW 264
17590: PUSH
17591: LD_INT 6
17593: PUSH
17594: LD_INT 46
17596: PUSH
17597: LD_INT 47
17599: PUSH
17600: EMPTY
17601: LIST
17602: LIST
17603: LIST
17604: IN
17605: IFFALSE 17622
// bpoints := bpoints * 1.2 ;
17607: LD_ADDR_VAR 0 10
17611: PUSH
17612: LD_VAR 0 10
17616: PUSH
17617: LD_REAL  1.20000000000000E+0000
17620: MUL
17621: ST_TO_ADDR
// end ; unit_building :
17622: GO 17636
17624: LD_INT 3
17626: DOUBLE
17627: EQUAL
17628: IFTRUE 17632
17630: GO 17635
17632: POP
// ; end ;
17633: GO 17636
17635: POP
// for j = 1 to 3 do
17636: LD_ADDR_VAR 0 7
17640: PUSH
17641: DOUBLE
17642: LD_INT 1
17644: DEC
17645: ST_TO_ADDR
17646: LD_INT 3
17648: PUSH
17649: FOR_TO
17650: IFFALSE 17703
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
17652: LD_ADDR_VAR 0 5
17656: PUSH
17657: LD_VAR 0 5
17661: PPUSH
17662: LD_VAR 0 7
17666: PPUSH
17667: LD_VAR 0 5
17671: PUSH
17672: LD_VAR 0 7
17676: ARRAY
17677: PUSH
17678: LD_VAR 0 9
17682: PUSH
17683: LD_VAR 0 7
17687: ARRAY
17688: PUSH
17689: LD_VAR 0 10
17693: MUL
17694: PLUS
17695: PPUSH
17696: CALL_OW 1
17700: ST_TO_ADDR
17701: GO 17649
17703: POP
17704: POP
// end ;
17705: GO 16184
17707: POP
17708: POP
// result := Replace ( result , 4 , tmp ) ;
17709: LD_ADDR_VAR 0 5
17713: PUSH
17714: LD_VAR 0 5
17718: PPUSH
17719: LD_INT 4
17721: PPUSH
17722: LD_VAR 0 8
17726: PPUSH
17727: CALL_OW 1
17731: ST_TO_ADDR
// end ;
17732: LD_VAR 0 5
17736: RET
// export function DangerAtRange ( unit , range ) ; begin
17737: LD_INT 0
17739: PPUSH
// if not unit then
17740: LD_VAR 0 1
17744: NOT
17745: IFFALSE 17749
// exit ;
17747: GO 17794
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
17749: LD_ADDR_VAR 0 3
17753: PUSH
17754: LD_VAR 0 1
17758: PPUSH
17759: CALL_OW 255
17763: PPUSH
17764: LD_VAR 0 1
17768: PPUSH
17769: CALL_OW 250
17773: PPUSH
17774: LD_VAR 0 1
17778: PPUSH
17779: CALL_OW 251
17783: PPUSH
17784: LD_VAR 0 2
17788: PPUSH
17789: CALL 16036 0 4
17793: ST_TO_ADDR
// end ;
17794: LD_VAR 0 3
17798: RET
// export function DangerInArea ( side , area ) ; begin
17799: LD_INT 0
17801: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
17802: LD_ADDR_VAR 0 3
17806: PUSH
17807: LD_VAR 0 2
17811: PPUSH
17812: LD_INT 81
17814: PUSH
17815: LD_VAR 0 1
17819: PUSH
17820: EMPTY
17821: LIST
17822: LIST
17823: PPUSH
17824: CALL_OW 70
17828: ST_TO_ADDR
// end ;
17829: LD_VAR 0 3
17833: RET
// export function IsExtension ( b ) ; begin
17834: LD_INT 0
17836: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
17837: LD_ADDR_VAR 0 2
17841: PUSH
17842: LD_VAR 0 1
17846: PUSH
17847: LD_INT 23
17849: PUSH
17850: LD_INT 20
17852: PUSH
17853: LD_INT 22
17855: PUSH
17856: LD_INT 17
17858: PUSH
17859: LD_INT 24
17861: PUSH
17862: LD_INT 21
17864: PUSH
17865: LD_INT 19
17867: PUSH
17868: LD_INT 16
17870: PUSH
17871: LD_INT 25
17873: PUSH
17874: LD_INT 18
17876: PUSH
17877: EMPTY
17878: LIST
17879: LIST
17880: LIST
17881: LIST
17882: LIST
17883: LIST
17884: LIST
17885: LIST
17886: LIST
17887: LIST
17888: IN
17889: ST_TO_ADDR
// end ;
17890: LD_VAR 0 2
17894: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
17895: LD_INT 0
17897: PPUSH
17898: PPUSH
17899: PPUSH
// result := [ ] ;
17900: LD_ADDR_VAR 0 4
17904: PUSH
17905: EMPTY
17906: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
17907: LD_ADDR_VAR 0 5
17911: PUSH
17912: LD_VAR 0 2
17916: PPUSH
17917: LD_INT 21
17919: PUSH
17920: LD_INT 3
17922: PUSH
17923: EMPTY
17924: LIST
17925: LIST
17926: PPUSH
17927: CALL_OW 70
17931: ST_TO_ADDR
// if not tmp then
17932: LD_VAR 0 5
17936: NOT
17937: IFFALSE 17941
// exit ;
17939: GO 18005
// if checkLink then
17941: LD_VAR 0 3
17945: IFFALSE 17995
// begin for i in tmp do
17947: LD_ADDR_VAR 0 6
17951: PUSH
17952: LD_VAR 0 5
17956: PUSH
17957: FOR_IN
17958: IFFALSE 17993
// if GetBase ( i ) <> base then
17960: LD_VAR 0 6
17964: PPUSH
17965: CALL_OW 274
17969: PUSH
17970: LD_VAR 0 1
17974: NONEQUAL
17975: IFFALSE 17991
// ComLinkToBase ( base , i ) ;
17977: LD_VAR 0 1
17981: PPUSH
17982: LD_VAR 0 6
17986: PPUSH
17987: CALL_OW 169
17991: GO 17957
17993: POP
17994: POP
// end ; result := tmp ;
17995: LD_ADDR_VAR 0 4
17999: PUSH
18000: LD_VAR 0 5
18004: ST_TO_ADDR
// end ;
18005: LD_VAR 0 4
18009: RET
// export function ComComplete ( units , b ) ; var i ; begin
18010: LD_INT 0
18012: PPUSH
18013: PPUSH
// if not units then
18014: LD_VAR 0 1
18018: NOT
18019: IFFALSE 18023
// exit ;
18021: GO 18113
// for i in units do
18023: LD_ADDR_VAR 0 4
18027: PUSH
18028: LD_VAR 0 1
18032: PUSH
18033: FOR_IN
18034: IFFALSE 18111
// if BuildingStatus ( b ) = bs_build then
18036: LD_VAR 0 2
18040: PPUSH
18041: CALL_OW 461
18045: PUSH
18046: LD_INT 1
18048: EQUAL
18049: IFFALSE 18109
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
18051: LD_VAR 0 4
18055: PPUSH
18056: LD_STRING h
18058: PUSH
18059: LD_VAR 0 2
18063: PPUSH
18064: CALL_OW 250
18068: PUSH
18069: LD_VAR 0 2
18073: PPUSH
18074: CALL_OW 251
18078: PUSH
18079: LD_VAR 0 2
18083: PUSH
18084: LD_INT 0
18086: PUSH
18087: LD_INT 0
18089: PUSH
18090: LD_INT 0
18092: PUSH
18093: EMPTY
18094: LIST
18095: LIST
18096: LIST
18097: LIST
18098: LIST
18099: LIST
18100: LIST
18101: PUSH
18102: EMPTY
18103: LIST
18104: PPUSH
18105: CALL_OW 446
18109: GO 18033
18111: POP
18112: POP
// end ;
18113: LD_VAR 0 3
18117: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
18118: LD_INT 0
18120: PPUSH
18121: PPUSH
18122: PPUSH
18123: PPUSH
18124: PPUSH
18125: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
18126: LD_VAR 0 1
18130: NOT
18131: PUSH
18132: LD_VAR 0 1
18136: PPUSH
18137: CALL_OW 263
18141: PUSH
18142: LD_INT 2
18144: NONEQUAL
18145: OR
18146: IFFALSE 18150
// exit ;
18148: GO 18466
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
18150: LD_ADDR_VAR 0 6
18154: PUSH
18155: LD_INT 22
18157: PUSH
18158: LD_VAR 0 1
18162: PPUSH
18163: CALL_OW 255
18167: PUSH
18168: EMPTY
18169: LIST
18170: LIST
18171: PUSH
18172: LD_INT 2
18174: PUSH
18175: LD_INT 30
18177: PUSH
18178: LD_INT 36
18180: PUSH
18181: EMPTY
18182: LIST
18183: LIST
18184: PUSH
18185: LD_INT 34
18187: PUSH
18188: LD_INT 31
18190: PUSH
18191: EMPTY
18192: LIST
18193: LIST
18194: PUSH
18195: EMPTY
18196: LIST
18197: LIST
18198: LIST
18199: PUSH
18200: EMPTY
18201: LIST
18202: LIST
18203: PPUSH
18204: CALL_OW 69
18208: ST_TO_ADDR
// if not tmp then
18209: LD_VAR 0 6
18213: NOT
18214: IFFALSE 18218
// exit ;
18216: GO 18466
// result := [ ] ;
18218: LD_ADDR_VAR 0 2
18222: PUSH
18223: EMPTY
18224: ST_TO_ADDR
// for i in tmp do
18225: LD_ADDR_VAR 0 3
18229: PUSH
18230: LD_VAR 0 6
18234: PUSH
18235: FOR_IN
18236: IFFALSE 18307
// begin t := UnitsInside ( i ) ;
18238: LD_ADDR_VAR 0 4
18242: PUSH
18243: LD_VAR 0 3
18247: PPUSH
18248: CALL_OW 313
18252: ST_TO_ADDR
// if t then
18253: LD_VAR 0 4
18257: IFFALSE 18305
// for j in t do
18259: LD_ADDR_VAR 0 7
18263: PUSH
18264: LD_VAR 0 4
18268: PUSH
18269: FOR_IN
18270: IFFALSE 18303
// result := Replace ( result , result + 1 , j ) ;
18272: LD_ADDR_VAR 0 2
18276: PUSH
18277: LD_VAR 0 2
18281: PPUSH
18282: LD_VAR 0 2
18286: PUSH
18287: LD_INT 1
18289: PLUS
18290: PPUSH
18291: LD_VAR 0 7
18295: PPUSH
18296: CALL_OW 1
18300: ST_TO_ADDR
18301: GO 18269
18303: POP
18304: POP
// end ;
18305: GO 18235
18307: POP
18308: POP
// if not result then
18309: LD_VAR 0 2
18313: NOT
18314: IFFALSE 18318
// exit ;
18316: GO 18466
// mech := result [ 1 ] ;
18318: LD_ADDR_VAR 0 5
18322: PUSH
18323: LD_VAR 0 2
18327: PUSH
18328: LD_INT 1
18330: ARRAY
18331: ST_TO_ADDR
// if result > 1 then
18332: LD_VAR 0 2
18336: PUSH
18337: LD_INT 1
18339: GREATER
18340: IFFALSE 18452
// begin for i = 2 to result do
18342: LD_ADDR_VAR 0 3
18346: PUSH
18347: DOUBLE
18348: LD_INT 2
18350: DEC
18351: ST_TO_ADDR
18352: LD_VAR 0 2
18356: PUSH
18357: FOR_TO
18358: IFFALSE 18450
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
18360: LD_ADDR_VAR 0 4
18364: PUSH
18365: LD_VAR 0 2
18369: PUSH
18370: LD_VAR 0 3
18374: ARRAY
18375: PPUSH
18376: LD_INT 3
18378: PPUSH
18379: CALL_OW 259
18383: PUSH
18384: LD_VAR 0 2
18388: PUSH
18389: LD_VAR 0 3
18393: ARRAY
18394: PPUSH
18395: CALL_OW 432
18399: MINUS
18400: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
18401: LD_VAR 0 4
18405: PUSH
18406: LD_VAR 0 5
18410: PPUSH
18411: LD_INT 3
18413: PPUSH
18414: CALL_OW 259
18418: PUSH
18419: LD_VAR 0 5
18423: PPUSH
18424: CALL_OW 432
18428: MINUS
18429: GREATEREQUAL
18430: IFFALSE 18448
// mech := result [ i ] ;
18432: LD_ADDR_VAR 0 5
18436: PUSH
18437: LD_VAR 0 2
18441: PUSH
18442: LD_VAR 0 3
18446: ARRAY
18447: ST_TO_ADDR
// end ;
18448: GO 18357
18450: POP
18451: POP
// end ; ComLinkTo ( vehicle , mech ) ;
18452: LD_VAR 0 1
18456: PPUSH
18457: LD_VAR 0 5
18461: PPUSH
18462: CALL_OW 135
// end ;
18466: LD_VAR 0 2
18470: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
18471: LD_INT 0
18473: PPUSH
18474: PPUSH
18475: PPUSH
18476: PPUSH
18477: PPUSH
18478: PPUSH
18479: PPUSH
18480: PPUSH
18481: PPUSH
18482: PPUSH
18483: PPUSH
18484: PPUSH
18485: PPUSH
// result := [ ] ;
18486: LD_ADDR_VAR 0 7
18490: PUSH
18491: EMPTY
18492: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
18493: LD_VAR 0 1
18497: PPUSH
18498: CALL_OW 266
18502: PUSH
18503: LD_INT 0
18505: PUSH
18506: LD_INT 1
18508: PUSH
18509: EMPTY
18510: LIST
18511: LIST
18512: IN
18513: NOT
18514: IFFALSE 18518
// exit ;
18516: GO 20152
// if name then
18518: LD_VAR 0 3
18522: IFFALSE 18538
// SetBName ( base_dep , name ) ;
18524: LD_VAR 0 1
18528: PPUSH
18529: LD_VAR 0 3
18533: PPUSH
18534: CALL_OW 500
// base := GetBase ( base_dep ) ;
18538: LD_ADDR_VAR 0 15
18542: PUSH
18543: LD_VAR 0 1
18547: PPUSH
18548: CALL_OW 274
18552: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
18553: LD_ADDR_VAR 0 16
18557: PUSH
18558: LD_VAR 0 1
18562: PPUSH
18563: CALL_OW 255
18567: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
18568: LD_ADDR_VAR 0 17
18572: PUSH
18573: LD_VAR 0 1
18577: PPUSH
18578: CALL_OW 248
18582: ST_TO_ADDR
// if sources then
18583: LD_VAR 0 5
18587: IFFALSE 18634
// for i = 1 to 3 do
18589: LD_ADDR_VAR 0 8
18593: PUSH
18594: DOUBLE
18595: LD_INT 1
18597: DEC
18598: ST_TO_ADDR
18599: LD_INT 3
18601: PUSH
18602: FOR_TO
18603: IFFALSE 18632
// AddResourceType ( base , i , sources [ i ] ) ;
18605: LD_VAR 0 15
18609: PPUSH
18610: LD_VAR 0 8
18614: PPUSH
18615: LD_VAR 0 5
18619: PUSH
18620: LD_VAR 0 8
18624: ARRAY
18625: PPUSH
18626: CALL_OW 276
18630: GO 18602
18632: POP
18633: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
18634: LD_ADDR_VAR 0 18
18638: PUSH
18639: LD_VAR 0 15
18643: PPUSH
18644: LD_VAR 0 2
18648: PPUSH
18649: LD_INT 1
18651: PPUSH
18652: CALL 17895 0 3
18656: ST_TO_ADDR
// InitHc ;
18657: CALL_OW 19
// InitUc ;
18661: CALL_OW 18
// uc_side := side ;
18665: LD_ADDR_OWVAR 20
18669: PUSH
18670: LD_VAR 0 16
18674: ST_TO_ADDR
// uc_nation := nation ;
18675: LD_ADDR_OWVAR 21
18679: PUSH
18680: LD_VAR 0 17
18684: ST_TO_ADDR
// if buildings then
18685: LD_VAR 0 18
18689: IFFALSE 20011
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
18691: LD_ADDR_VAR 0 19
18695: PUSH
18696: LD_VAR 0 18
18700: PPUSH
18701: LD_INT 2
18703: PUSH
18704: LD_INT 30
18706: PUSH
18707: LD_INT 29
18709: PUSH
18710: EMPTY
18711: LIST
18712: LIST
18713: PUSH
18714: LD_INT 30
18716: PUSH
18717: LD_INT 30
18719: PUSH
18720: EMPTY
18721: LIST
18722: LIST
18723: PUSH
18724: EMPTY
18725: LIST
18726: LIST
18727: LIST
18728: PPUSH
18729: CALL_OW 72
18733: ST_TO_ADDR
// if tmp then
18734: LD_VAR 0 19
18738: IFFALSE 18786
// for i in tmp do
18740: LD_ADDR_VAR 0 8
18744: PUSH
18745: LD_VAR 0 19
18749: PUSH
18750: FOR_IN
18751: IFFALSE 18784
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
18753: LD_VAR 0 8
18757: PPUSH
18758: CALL_OW 250
18762: PPUSH
18763: LD_VAR 0 8
18767: PPUSH
18768: CALL_OW 251
18772: PPUSH
18773: LD_VAR 0 16
18777: PPUSH
18778: CALL_OW 441
18782: GO 18750
18784: POP
18785: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
18786: LD_VAR 0 18
18790: PPUSH
18791: LD_INT 2
18793: PUSH
18794: LD_INT 30
18796: PUSH
18797: LD_INT 32
18799: PUSH
18800: EMPTY
18801: LIST
18802: LIST
18803: PUSH
18804: LD_INT 30
18806: PUSH
18807: LD_INT 33
18809: PUSH
18810: EMPTY
18811: LIST
18812: LIST
18813: PUSH
18814: EMPTY
18815: LIST
18816: LIST
18817: LIST
18818: PPUSH
18819: CALL_OW 72
18823: IFFALSE 18911
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
18825: LD_ADDR_VAR 0 8
18829: PUSH
18830: LD_VAR 0 18
18834: PPUSH
18835: LD_INT 2
18837: PUSH
18838: LD_INT 30
18840: PUSH
18841: LD_INT 32
18843: PUSH
18844: EMPTY
18845: LIST
18846: LIST
18847: PUSH
18848: LD_INT 30
18850: PUSH
18851: LD_INT 33
18853: PUSH
18854: EMPTY
18855: LIST
18856: LIST
18857: PUSH
18858: EMPTY
18859: LIST
18860: LIST
18861: LIST
18862: PPUSH
18863: CALL_OW 72
18867: PUSH
18868: FOR_IN
18869: IFFALSE 18909
// begin if not GetBWeapon ( i ) then
18871: LD_VAR 0 8
18875: PPUSH
18876: CALL_OW 269
18880: NOT
18881: IFFALSE 18907
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
18883: LD_VAR 0 8
18887: PPUSH
18888: LD_VAR 0 8
18892: PPUSH
18893: LD_VAR 0 2
18897: PPUSH
18898: CALL 20157 0 2
18902: PPUSH
18903: CALL_OW 431
// end ;
18907: GO 18868
18909: POP
18910: POP
// end ; for i = 1 to personel do
18911: LD_ADDR_VAR 0 8
18915: PUSH
18916: DOUBLE
18917: LD_INT 1
18919: DEC
18920: ST_TO_ADDR
18921: LD_VAR 0 6
18925: PUSH
18926: FOR_TO
18927: IFFALSE 19991
// begin if i > 4 then
18929: LD_VAR 0 8
18933: PUSH
18934: LD_INT 4
18936: GREATER
18937: IFFALSE 18941
// break ;
18939: GO 19991
// case i of 1 :
18941: LD_VAR 0 8
18945: PUSH
18946: LD_INT 1
18948: DOUBLE
18949: EQUAL
18950: IFTRUE 18954
18952: GO 19034
18954: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
18955: LD_ADDR_VAR 0 12
18959: PUSH
18960: LD_VAR 0 18
18964: PPUSH
18965: LD_INT 22
18967: PUSH
18968: LD_VAR 0 16
18972: PUSH
18973: EMPTY
18974: LIST
18975: LIST
18976: PUSH
18977: LD_INT 58
18979: PUSH
18980: EMPTY
18981: LIST
18982: PUSH
18983: LD_INT 2
18985: PUSH
18986: LD_INT 30
18988: PUSH
18989: LD_INT 32
18991: PUSH
18992: EMPTY
18993: LIST
18994: LIST
18995: PUSH
18996: LD_INT 30
18998: PUSH
18999: LD_INT 4
19001: PUSH
19002: EMPTY
19003: LIST
19004: LIST
19005: PUSH
19006: LD_INT 30
19008: PUSH
19009: LD_INT 5
19011: PUSH
19012: EMPTY
19013: LIST
19014: LIST
19015: PUSH
19016: EMPTY
19017: LIST
19018: LIST
19019: LIST
19020: LIST
19021: PUSH
19022: EMPTY
19023: LIST
19024: LIST
19025: LIST
19026: PPUSH
19027: CALL_OW 72
19031: ST_TO_ADDR
19032: GO 19256
19034: LD_INT 2
19036: DOUBLE
19037: EQUAL
19038: IFTRUE 19042
19040: GO 19104
19042: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
19043: LD_ADDR_VAR 0 12
19047: PUSH
19048: LD_VAR 0 18
19052: PPUSH
19053: LD_INT 22
19055: PUSH
19056: LD_VAR 0 16
19060: PUSH
19061: EMPTY
19062: LIST
19063: LIST
19064: PUSH
19065: LD_INT 2
19067: PUSH
19068: LD_INT 30
19070: PUSH
19071: LD_INT 0
19073: PUSH
19074: EMPTY
19075: LIST
19076: LIST
19077: PUSH
19078: LD_INT 30
19080: PUSH
19081: LD_INT 1
19083: PUSH
19084: EMPTY
19085: LIST
19086: LIST
19087: PUSH
19088: EMPTY
19089: LIST
19090: LIST
19091: LIST
19092: PUSH
19093: EMPTY
19094: LIST
19095: LIST
19096: PPUSH
19097: CALL_OW 72
19101: ST_TO_ADDR
19102: GO 19256
19104: LD_INT 3
19106: DOUBLE
19107: EQUAL
19108: IFTRUE 19112
19110: GO 19174
19112: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
19113: LD_ADDR_VAR 0 12
19117: PUSH
19118: LD_VAR 0 18
19122: PPUSH
19123: LD_INT 22
19125: PUSH
19126: LD_VAR 0 16
19130: PUSH
19131: EMPTY
19132: LIST
19133: LIST
19134: PUSH
19135: LD_INT 2
19137: PUSH
19138: LD_INT 30
19140: PUSH
19141: LD_INT 2
19143: PUSH
19144: EMPTY
19145: LIST
19146: LIST
19147: PUSH
19148: LD_INT 30
19150: PUSH
19151: LD_INT 3
19153: PUSH
19154: EMPTY
19155: LIST
19156: LIST
19157: PUSH
19158: EMPTY
19159: LIST
19160: LIST
19161: LIST
19162: PUSH
19163: EMPTY
19164: LIST
19165: LIST
19166: PPUSH
19167: CALL_OW 72
19171: ST_TO_ADDR
19172: GO 19256
19174: LD_INT 4
19176: DOUBLE
19177: EQUAL
19178: IFTRUE 19182
19180: GO 19255
19182: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
19183: LD_ADDR_VAR 0 12
19187: PUSH
19188: LD_VAR 0 18
19192: PPUSH
19193: LD_INT 22
19195: PUSH
19196: LD_VAR 0 16
19200: PUSH
19201: EMPTY
19202: LIST
19203: LIST
19204: PUSH
19205: LD_INT 2
19207: PUSH
19208: LD_INT 30
19210: PUSH
19211: LD_INT 6
19213: PUSH
19214: EMPTY
19215: LIST
19216: LIST
19217: PUSH
19218: LD_INT 30
19220: PUSH
19221: LD_INT 7
19223: PUSH
19224: EMPTY
19225: LIST
19226: LIST
19227: PUSH
19228: LD_INT 30
19230: PUSH
19231: LD_INT 8
19233: PUSH
19234: EMPTY
19235: LIST
19236: LIST
19237: PUSH
19238: EMPTY
19239: LIST
19240: LIST
19241: LIST
19242: LIST
19243: PUSH
19244: EMPTY
19245: LIST
19246: LIST
19247: PPUSH
19248: CALL_OW 72
19252: ST_TO_ADDR
19253: GO 19256
19255: POP
// if i = 1 then
19256: LD_VAR 0 8
19260: PUSH
19261: LD_INT 1
19263: EQUAL
19264: IFFALSE 19375
// begin tmp := [ ] ;
19266: LD_ADDR_VAR 0 19
19270: PUSH
19271: EMPTY
19272: ST_TO_ADDR
// for j in f do
19273: LD_ADDR_VAR 0 9
19277: PUSH
19278: LD_VAR 0 12
19282: PUSH
19283: FOR_IN
19284: IFFALSE 19357
// if GetBType ( j ) = b_bunker then
19286: LD_VAR 0 9
19290: PPUSH
19291: CALL_OW 266
19295: PUSH
19296: LD_INT 32
19298: EQUAL
19299: IFFALSE 19326
// tmp := Insert ( tmp , 1 , j ) else
19301: LD_ADDR_VAR 0 19
19305: PUSH
19306: LD_VAR 0 19
19310: PPUSH
19311: LD_INT 1
19313: PPUSH
19314: LD_VAR 0 9
19318: PPUSH
19319: CALL_OW 2
19323: ST_TO_ADDR
19324: GO 19355
// tmp := Insert ( tmp , tmp + 1 , j ) ;
19326: LD_ADDR_VAR 0 19
19330: PUSH
19331: LD_VAR 0 19
19335: PPUSH
19336: LD_VAR 0 19
19340: PUSH
19341: LD_INT 1
19343: PLUS
19344: PPUSH
19345: LD_VAR 0 9
19349: PPUSH
19350: CALL_OW 2
19354: ST_TO_ADDR
19355: GO 19283
19357: POP
19358: POP
// if tmp then
19359: LD_VAR 0 19
19363: IFFALSE 19375
// f := tmp ;
19365: LD_ADDR_VAR 0 12
19369: PUSH
19370: LD_VAR 0 19
19374: ST_TO_ADDR
// end ; x := personel [ i ] ;
19375: LD_ADDR_VAR 0 13
19379: PUSH
19380: LD_VAR 0 6
19384: PUSH
19385: LD_VAR 0 8
19389: ARRAY
19390: ST_TO_ADDR
// if x = - 1 then
19391: LD_VAR 0 13
19395: PUSH
19396: LD_INT 1
19398: NEG
19399: EQUAL
19400: IFFALSE 19609
// begin for j in f do
19402: LD_ADDR_VAR 0 9
19406: PUSH
19407: LD_VAR 0 12
19411: PUSH
19412: FOR_IN
19413: IFFALSE 19605
// repeat InitHc ;
19415: CALL_OW 19
// if GetBType ( j ) = b_barracks then
19419: LD_VAR 0 9
19423: PPUSH
19424: CALL_OW 266
19428: PUSH
19429: LD_INT 5
19431: EQUAL
19432: IFFALSE 19502
// begin if UnitsInside ( j ) < 3 then
19434: LD_VAR 0 9
19438: PPUSH
19439: CALL_OW 313
19443: PUSH
19444: LD_INT 3
19446: LESS
19447: IFFALSE 19483
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
19449: LD_INT 0
19451: PPUSH
19452: LD_INT 5
19454: PUSH
19455: LD_INT 8
19457: PUSH
19458: LD_INT 9
19460: PUSH
19461: EMPTY
19462: LIST
19463: LIST
19464: LIST
19465: PUSH
19466: LD_VAR 0 17
19470: ARRAY
19471: PPUSH
19472: LD_VAR 0 4
19476: PPUSH
19477: CALL_OW 380
19481: GO 19500
// PrepareHuman ( false , i , skill ) ;
19483: LD_INT 0
19485: PPUSH
19486: LD_VAR 0 8
19490: PPUSH
19491: LD_VAR 0 4
19495: PPUSH
19496: CALL_OW 380
// end else
19500: GO 19519
// PrepareHuman ( false , i , skill ) ;
19502: LD_INT 0
19504: PPUSH
19505: LD_VAR 0 8
19509: PPUSH
19510: LD_VAR 0 4
19514: PPUSH
19515: CALL_OW 380
// un := CreateHuman ;
19519: LD_ADDR_VAR 0 14
19523: PUSH
19524: CALL_OW 44
19528: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
19529: LD_ADDR_VAR 0 7
19533: PUSH
19534: LD_VAR 0 7
19538: PPUSH
19539: LD_INT 1
19541: PPUSH
19542: LD_VAR 0 14
19546: PPUSH
19547: CALL_OW 2
19551: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
19552: LD_VAR 0 14
19556: PPUSH
19557: LD_VAR 0 9
19561: PPUSH
19562: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
19566: LD_VAR 0 9
19570: PPUSH
19571: CALL_OW 313
19575: PUSH
19576: LD_INT 6
19578: EQUAL
19579: PUSH
19580: LD_VAR 0 9
19584: PPUSH
19585: CALL_OW 266
19589: PUSH
19590: LD_INT 32
19592: PUSH
19593: LD_INT 31
19595: PUSH
19596: EMPTY
19597: LIST
19598: LIST
19599: IN
19600: OR
19601: IFFALSE 19415
19603: GO 19412
19605: POP
19606: POP
// end else
19607: GO 19989
// for j = 1 to x do
19609: LD_ADDR_VAR 0 9
19613: PUSH
19614: DOUBLE
19615: LD_INT 1
19617: DEC
19618: ST_TO_ADDR
19619: LD_VAR 0 13
19623: PUSH
19624: FOR_TO
19625: IFFALSE 19987
// begin InitHc ;
19627: CALL_OW 19
// if not f then
19631: LD_VAR 0 12
19635: NOT
19636: IFFALSE 19725
// begin PrepareHuman ( false , i , skill ) ;
19638: LD_INT 0
19640: PPUSH
19641: LD_VAR 0 8
19645: PPUSH
19646: LD_VAR 0 4
19650: PPUSH
19651: CALL_OW 380
// un := CreateHuman ;
19655: LD_ADDR_VAR 0 14
19659: PUSH
19660: CALL_OW 44
19664: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
19665: LD_ADDR_VAR 0 7
19669: PUSH
19670: LD_VAR 0 7
19674: PPUSH
19675: LD_INT 1
19677: PPUSH
19678: LD_VAR 0 14
19682: PPUSH
19683: CALL_OW 2
19687: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
19688: LD_VAR 0 14
19692: PPUSH
19693: LD_VAR 0 1
19697: PPUSH
19698: CALL_OW 250
19702: PPUSH
19703: LD_VAR 0 1
19707: PPUSH
19708: CALL_OW 251
19712: PPUSH
19713: LD_INT 10
19715: PPUSH
19716: LD_INT 0
19718: PPUSH
19719: CALL_OW 50
// continue ;
19723: GO 19624
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
19725: LD_VAR 0 12
19729: PUSH
19730: LD_INT 1
19732: ARRAY
19733: PPUSH
19734: CALL_OW 313
19738: PUSH
19739: LD_VAR 0 12
19743: PUSH
19744: LD_INT 1
19746: ARRAY
19747: PPUSH
19748: CALL_OW 266
19752: PUSH
19753: LD_INT 32
19755: PUSH
19756: LD_INT 31
19758: PUSH
19759: EMPTY
19760: LIST
19761: LIST
19762: IN
19763: AND
19764: PUSH
19765: LD_VAR 0 12
19769: PUSH
19770: LD_INT 1
19772: ARRAY
19773: PPUSH
19774: CALL_OW 313
19778: PUSH
19779: LD_INT 6
19781: EQUAL
19782: OR
19783: IFFALSE 19803
// f := Delete ( f , 1 ) ;
19785: LD_ADDR_VAR 0 12
19789: PUSH
19790: LD_VAR 0 12
19794: PPUSH
19795: LD_INT 1
19797: PPUSH
19798: CALL_OW 3
19802: ST_TO_ADDR
// if not f then
19803: LD_VAR 0 12
19807: NOT
19808: IFFALSE 19826
// begin x := x + 2 ;
19810: LD_ADDR_VAR 0 13
19814: PUSH
19815: LD_VAR 0 13
19819: PUSH
19820: LD_INT 2
19822: PLUS
19823: ST_TO_ADDR
// continue ;
19824: GO 19624
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
19826: LD_VAR 0 12
19830: PUSH
19831: LD_INT 1
19833: ARRAY
19834: PPUSH
19835: CALL_OW 266
19839: PUSH
19840: LD_INT 5
19842: EQUAL
19843: IFFALSE 19917
// begin if UnitsInside ( f [ 1 ] ) < 3 then
19845: LD_VAR 0 12
19849: PUSH
19850: LD_INT 1
19852: ARRAY
19853: PPUSH
19854: CALL_OW 313
19858: PUSH
19859: LD_INT 3
19861: LESS
19862: IFFALSE 19898
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
19864: LD_INT 0
19866: PPUSH
19867: LD_INT 5
19869: PUSH
19870: LD_INT 8
19872: PUSH
19873: LD_INT 9
19875: PUSH
19876: EMPTY
19877: LIST
19878: LIST
19879: LIST
19880: PUSH
19881: LD_VAR 0 17
19885: ARRAY
19886: PPUSH
19887: LD_VAR 0 4
19891: PPUSH
19892: CALL_OW 380
19896: GO 19915
// PrepareHuman ( false , i , skill ) ;
19898: LD_INT 0
19900: PPUSH
19901: LD_VAR 0 8
19905: PPUSH
19906: LD_VAR 0 4
19910: PPUSH
19911: CALL_OW 380
// end else
19915: GO 19934
// PrepareHuman ( false , i , skill ) ;
19917: LD_INT 0
19919: PPUSH
19920: LD_VAR 0 8
19924: PPUSH
19925: LD_VAR 0 4
19929: PPUSH
19930: CALL_OW 380
// un := CreateHuman ;
19934: LD_ADDR_VAR 0 14
19938: PUSH
19939: CALL_OW 44
19943: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
19944: LD_ADDR_VAR 0 7
19948: PUSH
19949: LD_VAR 0 7
19953: PPUSH
19954: LD_INT 1
19956: PPUSH
19957: LD_VAR 0 14
19961: PPUSH
19962: CALL_OW 2
19966: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
19967: LD_VAR 0 14
19971: PPUSH
19972: LD_VAR 0 12
19976: PUSH
19977: LD_INT 1
19979: ARRAY
19980: PPUSH
19981: CALL_OW 52
// end ;
19985: GO 19624
19987: POP
19988: POP
// end ;
19989: GO 18926
19991: POP
19992: POP
// result := result ^ buildings ;
19993: LD_ADDR_VAR 0 7
19997: PUSH
19998: LD_VAR 0 7
20002: PUSH
20003: LD_VAR 0 18
20007: ADD
20008: ST_TO_ADDR
// end else
20009: GO 20152
// begin for i = 1 to personel do
20011: LD_ADDR_VAR 0 8
20015: PUSH
20016: DOUBLE
20017: LD_INT 1
20019: DEC
20020: ST_TO_ADDR
20021: LD_VAR 0 6
20025: PUSH
20026: FOR_TO
20027: IFFALSE 20150
// begin if i > 4 then
20029: LD_VAR 0 8
20033: PUSH
20034: LD_INT 4
20036: GREATER
20037: IFFALSE 20041
// break ;
20039: GO 20150
// x := personel [ i ] ;
20041: LD_ADDR_VAR 0 13
20045: PUSH
20046: LD_VAR 0 6
20050: PUSH
20051: LD_VAR 0 8
20055: ARRAY
20056: ST_TO_ADDR
// if x = - 1 then
20057: LD_VAR 0 13
20061: PUSH
20062: LD_INT 1
20064: NEG
20065: EQUAL
20066: IFFALSE 20070
// continue ;
20068: GO 20026
// PrepareHuman ( false , i , skill ) ;
20070: LD_INT 0
20072: PPUSH
20073: LD_VAR 0 8
20077: PPUSH
20078: LD_VAR 0 4
20082: PPUSH
20083: CALL_OW 380
// un := CreateHuman ;
20087: LD_ADDR_VAR 0 14
20091: PUSH
20092: CALL_OW 44
20096: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
20097: LD_VAR 0 14
20101: PPUSH
20102: LD_VAR 0 1
20106: PPUSH
20107: CALL_OW 250
20111: PPUSH
20112: LD_VAR 0 1
20116: PPUSH
20117: CALL_OW 251
20121: PPUSH
20122: LD_INT 10
20124: PPUSH
20125: LD_INT 0
20127: PPUSH
20128: CALL_OW 50
// result := result ^ un ;
20132: LD_ADDR_VAR 0 7
20136: PUSH
20137: LD_VAR 0 7
20141: PUSH
20142: LD_VAR 0 14
20146: ADD
20147: ST_TO_ADDR
// end ;
20148: GO 20026
20150: POP
20151: POP
// end ; end ;
20152: LD_VAR 0 7
20156: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
20157: LD_INT 0
20159: PPUSH
20160: PPUSH
20161: PPUSH
20162: PPUSH
20163: PPUSH
20164: PPUSH
20165: PPUSH
20166: PPUSH
20167: PPUSH
20168: PPUSH
20169: PPUSH
20170: PPUSH
20171: PPUSH
20172: PPUSH
20173: PPUSH
20174: PPUSH
// result := false ;
20175: LD_ADDR_VAR 0 3
20179: PUSH
20180: LD_INT 0
20182: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
20183: LD_VAR 0 1
20187: NOT
20188: PUSH
20189: LD_VAR 0 1
20193: PPUSH
20194: CALL_OW 266
20198: PUSH
20199: LD_INT 32
20201: PUSH
20202: LD_INT 33
20204: PUSH
20205: EMPTY
20206: LIST
20207: LIST
20208: IN
20209: NOT
20210: OR
20211: IFFALSE 20215
// exit ;
20213: GO 21324
// nat := GetNation ( tower ) ;
20215: LD_ADDR_VAR 0 12
20219: PUSH
20220: LD_VAR 0 1
20224: PPUSH
20225: CALL_OW 248
20229: ST_TO_ADDR
// side := GetSide ( tower ) ;
20230: LD_ADDR_VAR 0 16
20234: PUSH
20235: LD_VAR 0 1
20239: PPUSH
20240: CALL_OW 255
20244: ST_TO_ADDR
// x := GetX ( tower ) ;
20245: LD_ADDR_VAR 0 10
20249: PUSH
20250: LD_VAR 0 1
20254: PPUSH
20255: CALL_OW 250
20259: ST_TO_ADDR
// y := GetY ( tower ) ;
20260: LD_ADDR_VAR 0 11
20264: PUSH
20265: LD_VAR 0 1
20269: PPUSH
20270: CALL_OW 251
20274: ST_TO_ADDR
// if not x or not y then
20275: LD_VAR 0 10
20279: NOT
20280: PUSH
20281: LD_VAR 0 11
20285: NOT
20286: OR
20287: IFFALSE 20291
// exit ;
20289: GO 21324
// weapon := 0 ;
20291: LD_ADDR_VAR 0 18
20295: PUSH
20296: LD_INT 0
20298: ST_TO_ADDR
// fac_list := [ ] ;
20299: LD_ADDR_VAR 0 17
20303: PUSH
20304: EMPTY
20305: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
20306: LD_ADDR_VAR 0 6
20310: PUSH
20311: LD_VAR 0 1
20315: PPUSH
20316: CALL_OW 274
20320: PPUSH
20321: LD_VAR 0 2
20325: PPUSH
20326: LD_INT 0
20328: PPUSH
20329: CALL 17895 0 3
20333: PPUSH
20334: LD_INT 30
20336: PUSH
20337: LD_INT 3
20339: PUSH
20340: EMPTY
20341: LIST
20342: LIST
20343: PPUSH
20344: CALL_OW 72
20348: ST_TO_ADDR
// if not factories then
20349: LD_VAR 0 6
20353: NOT
20354: IFFALSE 20358
// exit ;
20356: GO 21324
// for i in factories do
20358: LD_ADDR_VAR 0 8
20362: PUSH
20363: LD_VAR 0 6
20367: PUSH
20368: FOR_IN
20369: IFFALSE 20394
// fac_list := fac_list union AvailableWeaponList ( i ) ;
20371: LD_ADDR_VAR 0 17
20375: PUSH
20376: LD_VAR 0 17
20380: PUSH
20381: LD_VAR 0 8
20385: PPUSH
20386: CALL_OW 478
20390: UNION
20391: ST_TO_ADDR
20392: GO 20368
20394: POP
20395: POP
// if not fac_list then
20396: LD_VAR 0 17
20400: NOT
20401: IFFALSE 20405
// exit ;
20403: GO 21324
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
20405: LD_ADDR_VAR 0 5
20409: PUSH
20410: LD_INT 4
20412: PUSH
20413: LD_INT 5
20415: PUSH
20416: LD_INT 9
20418: PUSH
20419: LD_INT 10
20421: PUSH
20422: LD_INT 6
20424: PUSH
20425: LD_INT 7
20427: PUSH
20428: LD_INT 11
20430: PUSH
20431: EMPTY
20432: LIST
20433: LIST
20434: LIST
20435: LIST
20436: LIST
20437: LIST
20438: LIST
20439: PUSH
20440: LD_INT 27
20442: PUSH
20443: LD_INT 28
20445: PUSH
20446: LD_INT 26
20448: PUSH
20449: LD_INT 30
20451: PUSH
20452: EMPTY
20453: LIST
20454: LIST
20455: LIST
20456: LIST
20457: PUSH
20458: LD_INT 43
20460: PUSH
20461: LD_INT 44
20463: PUSH
20464: LD_INT 46
20466: PUSH
20467: LD_INT 45
20469: PUSH
20470: LD_INT 47
20472: PUSH
20473: LD_INT 49
20475: PUSH
20476: EMPTY
20477: LIST
20478: LIST
20479: LIST
20480: LIST
20481: LIST
20482: LIST
20483: PUSH
20484: EMPTY
20485: LIST
20486: LIST
20487: LIST
20488: PUSH
20489: LD_VAR 0 12
20493: ARRAY
20494: ST_TO_ADDR
// list := list isect fac_list ;
20495: LD_ADDR_VAR 0 5
20499: PUSH
20500: LD_VAR 0 5
20504: PUSH
20505: LD_VAR 0 17
20509: ISECT
20510: ST_TO_ADDR
// if not list then
20511: LD_VAR 0 5
20515: NOT
20516: IFFALSE 20520
// exit ;
20518: GO 21324
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
20520: LD_VAR 0 12
20524: PUSH
20525: LD_INT 3
20527: EQUAL
20528: PUSH
20529: LD_INT 49
20531: PUSH
20532: LD_VAR 0 5
20536: IN
20537: AND
20538: PUSH
20539: LD_INT 31
20541: PPUSH
20542: LD_VAR 0 16
20546: PPUSH
20547: CALL_OW 321
20551: PUSH
20552: LD_INT 2
20554: EQUAL
20555: AND
20556: IFFALSE 20616
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
20558: LD_INT 22
20560: PUSH
20561: LD_VAR 0 16
20565: PUSH
20566: EMPTY
20567: LIST
20568: LIST
20569: PUSH
20570: LD_INT 35
20572: PUSH
20573: LD_INT 49
20575: PUSH
20576: EMPTY
20577: LIST
20578: LIST
20579: PUSH
20580: LD_INT 91
20582: PUSH
20583: LD_VAR 0 1
20587: PUSH
20588: LD_INT 10
20590: PUSH
20591: EMPTY
20592: LIST
20593: LIST
20594: LIST
20595: PUSH
20596: EMPTY
20597: LIST
20598: LIST
20599: LIST
20600: PPUSH
20601: CALL_OW 69
20605: NOT
20606: IFFALSE 20616
// weapon := ru_time_lapser ;
20608: LD_ADDR_VAR 0 18
20612: PUSH
20613: LD_INT 49
20615: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
20616: LD_VAR 0 12
20620: PUSH
20621: LD_INT 1
20623: PUSH
20624: LD_INT 2
20626: PUSH
20627: EMPTY
20628: LIST
20629: LIST
20630: IN
20631: PUSH
20632: LD_INT 11
20634: PUSH
20635: LD_VAR 0 5
20639: IN
20640: PUSH
20641: LD_INT 30
20643: PUSH
20644: LD_VAR 0 5
20648: IN
20649: OR
20650: AND
20651: PUSH
20652: LD_INT 6
20654: PPUSH
20655: LD_VAR 0 16
20659: PPUSH
20660: CALL_OW 321
20664: PUSH
20665: LD_INT 2
20667: EQUAL
20668: AND
20669: IFFALSE 20834
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
20671: LD_INT 22
20673: PUSH
20674: LD_VAR 0 16
20678: PUSH
20679: EMPTY
20680: LIST
20681: LIST
20682: PUSH
20683: LD_INT 2
20685: PUSH
20686: LD_INT 35
20688: PUSH
20689: LD_INT 11
20691: PUSH
20692: EMPTY
20693: LIST
20694: LIST
20695: PUSH
20696: LD_INT 35
20698: PUSH
20699: LD_INT 30
20701: PUSH
20702: EMPTY
20703: LIST
20704: LIST
20705: PUSH
20706: EMPTY
20707: LIST
20708: LIST
20709: LIST
20710: PUSH
20711: LD_INT 91
20713: PUSH
20714: LD_VAR 0 1
20718: PUSH
20719: LD_INT 18
20721: PUSH
20722: EMPTY
20723: LIST
20724: LIST
20725: LIST
20726: PUSH
20727: EMPTY
20728: LIST
20729: LIST
20730: LIST
20731: PPUSH
20732: CALL_OW 69
20736: NOT
20737: PUSH
20738: LD_INT 22
20740: PUSH
20741: LD_VAR 0 16
20745: PUSH
20746: EMPTY
20747: LIST
20748: LIST
20749: PUSH
20750: LD_INT 2
20752: PUSH
20753: LD_INT 30
20755: PUSH
20756: LD_INT 32
20758: PUSH
20759: EMPTY
20760: LIST
20761: LIST
20762: PUSH
20763: LD_INT 30
20765: PUSH
20766: LD_INT 33
20768: PUSH
20769: EMPTY
20770: LIST
20771: LIST
20772: PUSH
20773: EMPTY
20774: LIST
20775: LIST
20776: LIST
20777: PUSH
20778: LD_INT 91
20780: PUSH
20781: LD_VAR 0 1
20785: PUSH
20786: LD_INT 12
20788: PUSH
20789: EMPTY
20790: LIST
20791: LIST
20792: LIST
20793: PUSH
20794: EMPTY
20795: LIST
20796: LIST
20797: LIST
20798: PUSH
20799: EMPTY
20800: LIST
20801: PPUSH
20802: CALL_OW 69
20806: PUSH
20807: LD_INT 2
20809: GREATER
20810: AND
20811: IFFALSE 20834
// weapon := [ us_radar , ar_radar ] [ nat ] ;
20813: LD_ADDR_VAR 0 18
20817: PUSH
20818: LD_INT 11
20820: PUSH
20821: LD_INT 30
20823: PUSH
20824: EMPTY
20825: LIST
20826: LIST
20827: PUSH
20828: LD_VAR 0 12
20832: ARRAY
20833: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
20834: LD_VAR 0 18
20838: NOT
20839: PUSH
20840: LD_INT 40
20842: PPUSH
20843: LD_VAR 0 16
20847: PPUSH
20848: CALL_OW 321
20852: PUSH
20853: LD_INT 2
20855: EQUAL
20856: AND
20857: PUSH
20858: LD_INT 7
20860: PUSH
20861: LD_VAR 0 5
20865: IN
20866: PUSH
20867: LD_INT 28
20869: PUSH
20870: LD_VAR 0 5
20874: IN
20875: OR
20876: PUSH
20877: LD_INT 45
20879: PUSH
20880: LD_VAR 0 5
20884: IN
20885: OR
20886: AND
20887: IFFALSE 21141
// begin hex := GetHexInfo ( x , y ) ;
20889: LD_ADDR_VAR 0 4
20893: PUSH
20894: LD_VAR 0 10
20898: PPUSH
20899: LD_VAR 0 11
20903: PPUSH
20904: CALL_OW 546
20908: ST_TO_ADDR
// if hex [ 1 ] then
20909: LD_VAR 0 4
20913: PUSH
20914: LD_INT 1
20916: ARRAY
20917: IFFALSE 20921
// exit ;
20919: GO 21324
// height := hex [ 2 ] ;
20921: LD_ADDR_VAR 0 15
20925: PUSH
20926: LD_VAR 0 4
20930: PUSH
20931: LD_INT 2
20933: ARRAY
20934: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
20935: LD_ADDR_VAR 0 14
20939: PUSH
20940: LD_INT 0
20942: PUSH
20943: LD_INT 2
20945: PUSH
20946: LD_INT 3
20948: PUSH
20949: LD_INT 5
20951: PUSH
20952: EMPTY
20953: LIST
20954: LIST
20955: LIST
20956: LIST
20957: ST_TO_ADDR
// for i in tmp do
20958: LD_ADDR_VAR 0 8
20962: PUSH
20963: LD_VAR 0 14
20967: PUSH
20968: FOR_IN
20969: IFFALSE 21139
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
20971: LD_ADDR_VAR 0 9
20975: PUSH
20976: LD_VAR 0 10
20980: PPUSH
20981: LD_VAR 0 8
20985: PPUSH
20986: LD_INT 5
20988: PPUSH
20989: CALL_OW 272
20993: PUSH
20994: LD_VAR 0 11
20998: PPUSH
20999: LD_VAR 0 8
21003: PPUSH
21004: LD_INT 5
21006: PPUSH
21007: CALL_OW 273
21011: PUSH
21012: EMPTY
21013: LIST
21014: LIST
21015: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
21016: LD_VAR 0 9
21020: PUSH
21021: LD_INT 1
21023: ARRAY
21024: PPUSH
21025: LD_VAR 0 9
21029: PUSH
21030: LD_INT 2
21032: ARRAY
21033: PPUSH
21034: CALL_OW 488
21038: IFFALSE 21137
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
21040: LD_ADDR_VAR 0 4
21044: PUSH
21045: LD_VAR 0 9
21049: PUSH
21050: LD_INT 1
21052: ARRAY
21053: PPUSH
21054: LD_VAR 0 9
21058: PUSH
21059: LD_INT 2
21061: ARRAY
21062: PPUSH
21063: CALL_OW 546
21067: ST_TO_ADDR
// if hex [ 1 ] then
21068: LD_VAR 0 4
21072: PUSH
21073: LD_INT 1
21075: ARRAY
21076: IFFALSE 21080
// continue ;
21078: GO 20968
// h := hex [ 2 ] ;
21080: LD_ADDR_VAR 0 13
21084: PUSH
21085: LD_VAR 0 4
21089: PUSH
21090: LD_INT 2
21092: ARRAY
21093: ST_TO_ADDR
// if h + 7 < height then
21094: LD_VAR 0 13
21098: PUSH
21099: LD_INT 7
21101: PLUS
21102: PUSH
21103: LD_VAR 0 15
21107: LESS
21108: IFFALSE 21137
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
21110: LD_ADDR_VAR 0 18
21114: PUSH
21115: LD_INT 7
21117: PUSH
21118: LD_INT 28
21120: PUSH
21121: LD_INT 45
21123: PUSH
21124: EMPTY
21125: LIST
21126: LIST
21127: LIST
21128: PUSH
21129: LD_VAR 0 12
21133: ARRAY
21134: ST_TO_ADDR
// break ;
21135: GO 21139
// end ; end ; end ;
21137: GO 20968
21139: POP
21140: POP
// end ; if not weapon then
21141: LD_VAR 0 18
21145: NOT
21146: IFFALSE 21206
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
21148: LD_ADDR_VAR 0 5
21152: PUSH
21153: LD_VAR 0 5
21157: PUSH
21158: LD_INT 11
21160: PUSH
21161: LD_INT 30
21163: PUSH
21164: LD_INT 49
21166: PUSH
21167: EMPTY
21168: LIST
21169: LIST
21170: LIST
21171: DIFF
21172: ST_TO_ADDR
// if not list then
21173: LD_VAR 0 5
21177: NOT
21178: IFFALSE 21182
// exit ;
21180: GO 21324
// weapon := list [ rand ( 1 , list ) ] ;
21182: LD_ADDR_VAR 0 18
21186: PUSH
21187: LD_VAR 0 5
21191: PUSH
21192: LD_INT 1
21194: PPUSH
21195: LD_VAR 0 5
21199: PPUSH
21200: CALL_OW 12
21204: ARRAY
21205: ST_TO_ADDR
// end ; if weapon then
21206: LD_VAR 0 18
21210: IFFALSE 21324
// begin tmp := CostOfWeapon ( weapon ) ;
21212: LD_ADDR_VAR 0 14
21216: PUSH
21217: LD_VAR 0 18
21221: PPUSH
21222: CALL_OW 451
21226: ST_TO_ADDR
// j := GetBase ( tower ) ;
21227: LD_ADDR_VAR 0 9
21231: PUSH
21232: LD_VAR 0 1
21236: PPUSH
21237: CALL_OW 274
21241: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
21242: LD_VAR 0 9
21246: PPUSH
21247: LD_INT 1
21249: PPUSH
21250: CALL_OW 275
21254: PUSH
21255: LD_VAR 0 14
21259: PUSH
21260: LD_INT 1
21262: ARRAY
21263: GREATEREQUAL
21264: PUSH
21265: LD_VAR 0 9
21269: PPUSH
21270: LD_INT 2
21272: PPUSH
21273: CALL_OW 275
21277: PUSH
21278: LD_VAR 0 14
21282: PUSH
21283: LD_INT 2
21285: ARRAY
21286: GREATEREQUAL
21287: AND
21288: PUSH
21289: LD_VAR 0 9
21293: PPUSH
21294: LD_INT 3
21296: PPUSH
21297: CALL_OW 275
21301: PUSH
21302: LD_VAR 0 14
21306: PUSH
21307: LD_INT 3
21309: ARRAY
21310: GREATEREQUAL
21311: AND
21312: IFFALSE 21324
// result := weapon ;
21314: LD_ADDR_VAR 0 3
21318: PUSH
21319: LD_VAR 0 18
21323: ST_TO_ADDR
// end ; end ;
21324: LD_VAR 0 3
21328: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
21329: LD_INT 0
21331: PPUSH
21332: PPUSH
// result := true ;
21333: LD_ADDR_VAR 0 3
21337: PUSH
21338: LD_INT 1
21340: ST_TO_ADDR
// if array1 = array2 then
21341: LD_VAR 0 1
21345: PUSH
21346: LD_VAR 0 2
21350: EQUAL
21351: IFFALSE 21411
// begin for i = 1 to array1 do
21353: LD_ADDR_VAR 0 4
21357: PUSH
21358: DOUBLE
21359: LD_INT 1
21361: DEC
21362: ST_TO_ADDR
21363: LD_VAR 0 1
21367: PUSH
21368: FOR_TO
21369: IFFALSE 21407
// if array1 [ i ] <> array2 [ i ] then
21371: LD_VAR 0 1
21375: PUSH
21376: LD_VAR 0 4
21380: ARRAY
21381: PUSH
21382: LD_VAR 0 2
21386: PUSH
21387: LD_VAR 0 4
21391: ARRAY
21392: NONEQUAL
21393: IFFALSE 21405
// begin result := false ;
21395: LD_ADDR_VAR 0 3
21399: PUSH
21400: LD_INT 0
21402: ST_TO_ADDR
// break ;
21403: GO 21407
// end ;
21405: GO 21368
21407: POP
21408: POP
// end else
21409: GO 21419
// result := false ;
21411: LD_ADDR_VAR 0 3
21415: PUSH
21416: LD_INT 0
21418: ST_TO_ADDR
// end ;
21419: LD_VAR 0 3
21423: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
21424: LD_INT 0
21426: PPUSH
21427: PPUSH
// if not array1 or not array2 then
21428: LD_VAR 0 1
21432: NOT
21433: PUSH
21434: LD_VAR 0 2
21438: NOT
21439: OR
21440: IFFALSE 21444
// exit ;
21442: GO 21508
// result := true ;
21444: LD_ADDR_VAR 0 3
21448: PUSH
21449: LD_INT 1
21451: ST_TO_ADDR
// for i = 1 to array1 do
21452: LD_ADDR_VAR 0 4
21456: PUSH
21457: DOUBLE
21458: LD_INT 1
21460: DEC
21461: ST_TO_ADDR
21462: LD_VAR 0 1
21466: PUSH
21467: FOR_TO
21468: IFFALSE 21506
// if array1 [ i ] <> array2 [ i ] then
21470: LD_VAR 0 1
21474: PUSH
21475: LD_VAR 0 4
21479: ARRAY
21480: PUSH
21481: LD_VAR 0 2
21485: PUSH
21486: LD_VAR 0 4
21490: ARRAY
21491: NONEQUAL
21492: IFFALSE 21504
// begin result := false ;
21494: LD_ADDR_VAR 0 3
21498: PUSH
21499: LD_INT 0
21501: ST_TO_ADDR
// break ;
21502: GO 21506
// end ;
21504: GO 21467
21506: POP
21507: POP
// end ;
21508: LD_VAR 0 3
21512: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
21513: LD_INT 0
21515: PPUSH
21516: PPUSH
21517: PPUSH
// pom := GetBase ( fac ) ;
21518: LD_ADDR_VAR 0 5
21522: PUSH
21523: LD_VAR 0 1
21527: PPUSH
21528: CALL_OW 274
21532: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
21533: LD_ADDR_VAR 0 4
21537: PUSH
21538: LD_VAR 0 2
21542: PUSH
21543: LD_INT 1
21545: ARRAY
21546: PPUSH
21547: LD_VAR 0 2
21551: PUSH
21552: LD_INT 2
21554: ARRAY
21555: PPUSH
21556: LD_VAR 0 2
21560: PUSH
21561: LD_INT 3
21563: ARRAY
21564: PPUSH
21565: LD_VAR 0 2
21569: PUSH
21570: LD_INT 4
21572: ARRAY
21573: PPUSH
21574: CALL_OW 449
21578: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
21579: LD_ADDR_VAR 0 3
21583: PUSH
21584: LD_VAR 0 5
21588: PPUSH
21589: LD_INT 1
21591: PPUSH
21592: CALL_OW 275
21596: PUSH
21597: LD_VAR 0 4
21601: PUSH
21602: LD_INT 1
21604: ARRAY
21605: GREATEREQUAL
21606: PUSH
21607: LD_VAR 0 5
21611: PPUSH
21612: LD_INT 2
21614: PPUSH
21615: CALL_OW 275
21619: PUSH
21620: LD_VAR 0 4
21624: PUSH
21625: LD_INT 2
21627: ARRAY
21628: GREATEREQUAL
21629: AND
21630: PUSH
21631: LD_VAR 0 5
21635: PPUSH
21636: LD_INT 3
21638: PPUSH
21639: CALL_OW 275
21643: PUSH
21644: LD_VAR 0 4
21648: PUSH
21649: LD_INT 3
21651: ARRAY
21652: GREATEREQUAL
21653: AND
21654: ST_TO_ADDR
// end ;
21655: LD_VAR 0 3
21659: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
21660: LD_INT 0
21662: PPUSH
21663: PPUSH
21664: PPUSH
21665: PPUSH
// pom := GetBase ( building ) ;
21666: LD_ADDR_VAR 0 3
21670: PUSH
21671: LD_VAR 0 1
21675: PPUSH
21676: CALL_OW 274
21680: ST_TO_ADDR
// if not pom then
21681: LD_VAR 0 3
21685: NOT
21686: IFFALSE 21690
// exit ;
21688: GO 21860
// btype := GetBType ( building ) ;
21690: LD_ADDR_VAR 0 5
21694: PUSH
21695: LD_VAR 0 1
21699: PPUSH
21700: CALL_OW 266
21704: ST_TO_ADDR
// if btype = b_armoury then
21705: LD_VAR 0 5
21709: PUSH
21710: LD_INT 4
21712: EQUAL
21713: IFFALSE 21723
// btype := b_barracks ;
21715: LD_ADDR_VAR 0 5
21719: PUSH
21720: LD_INT 5
21722: ST_TO_ADDR
// if btype = b_depot then
21723: LD_VAR 0 5
21727: PUSH
21728: LD_INT 0
21730: EQUAL
21731: IFFALSE 21741
// btype := b_warehouse ;
21733: LD_ADDR_VAR 0 5
21737: PUSH
21738: LD_INT 1
21740: ST_TO_ADDR
// if btype = b_workshop then
21741: LD_VAR 0 5
21745: PUSH
21746: LD_INT 2
21748: EQUAL
21749: IFFALSE 21759
// btype := b_factory ;
21751: LD_ADDR_VAR 0 5
21755: PUSH
21756: LD_INT 3
21758: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
21759: LD_ADDR_VAR 0 4
21763: PUSH
21764: LD_VAR 0 5
21768: PPUSH
21769: LD_VAR 0 1
21773: PPUSH
21774: CALL_OW 248
21778: PPUSH
21779: CALL_OW 450
21783: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
21784: LD_ADDR_VAR 0 2
21788: PUSH
21789: LD_VAR 0 3
21793: PPUSH
21794: LD_INT 1
21796: PPUSH
21797: CALL_OW 275
21801: PUSH
21802: LD_VAR 0 4
21806: PUSH
21807: LD_INT 1
21809: ARRAY
21810: GREATEREQUAL
21811: PUSH
21812: LD_VAR 0 3
21816: PPUSH
21817: LD_INT 2
21819: PPUSH
21820: CALL_OW 275
21824: PUSH
21825: LD_VAR 0 4
21829: PUSH
21830: LD_INT 2
21832: ARRAY
21833: GREATEREQUAL
21834: AND
21835: PUSH
21836: LD_VAR 0 3
21840: PPUSH
21841: LD_INT 3
21843: PPUSH
21844: CALL_OW 275
21848: PUSH
21849: LD_VAR 0 4
21853: PUSH
21854: LD_INT 3
21856: ARRAY
21857: GREATEREQUAL
21858: AND
21859: ST_TO_ADDR
// end ;
21860: LD_VAR 0 2
21864: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
21865: LD_INT 0
21867: PPUSH
21868: PPUSH
21869: PPUSH
// pom := GetBase ( building ) ;
21870: LD_ADDR_VAR 0 4
21874: PUSH
21875: LD_VAR 0 1
21879: PPUSH
21880: CALL_OW 274
21884: ST_TO_ADDR
// if not pom then
21885: LD_VAR 0 4
21889: NOT
21890: IFFALSE 21894
// exit ;
21892: GO 21995
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
21894: LD_ADDR_VAR 0 5
21898: PUSH
21899: LD_VAR 0 2
21903: PPUSH
21904: LD_VAR 0 1
21908: PPUSH
21909: CALL_OW 248
21913: PPUSH
21914: CALL_OW 450
21918: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
21919: LD_ADDR_VAR 0 3
21923: PUSH
21924: LD_VAR 0 4
21928: PPUSH
21929: LD_INT 1
21931: PPUSH
21932: CALL_OW 275
21936: PUSH
21937: LD_VAR 0 5
21941: PUSH
21942: LD_INT 1
21944: ARRAY
21945: GREATEREQUAL
21946: PUSH
21947: LD_VAR 0 4
21951: PPUSH
21952: LD_INT 2
21954: PPUSH
21955: CALL_OW 275
21959: PUSH
21960: LD_VAR 0 5
21964: PUSH
21965: LD_INT 2
21967: ARRAY
21968: GREATEREQUAL
21969: AND
21970: PUSH
21971: LD_VAR 0 4
21975: PPUSH
21976: LD_INT 3
21978: PPUSH
21979: CALL_OW 275
21983: PUSH
21984: LD_VAR 0 5
21988: PUSH
21989: LD_INT 3
21991: ARRAY
21992: GREATEREQUAL
21993: AND
21994: ST_TO_ADDR
// end ;
21995: LD_VAR 0 3
21999: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
22000: LD_INT 0
22002: PPUSH
22003: PPUSH
22004: PPUSH
22005: PPUSH
22006: PPUSH
22007: PPUSH
22008: PPUSH
22009: PPUSH
22010: PPUSH
22011: PPUSH
22012: PPUSH
// result := false ;
22013: LD_ADDR_VAR 0 8
22017: PUSH
22018: LD_INT 0
22020: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
22021: LD_VAR 0 5
22025: NOT
22026: PUSH
22027: LD_VAR 0 1
22031: NOT
22032: OR
22033: PUSH
22034: LD_VAR 0 2
22038: NOT
22039: OR
22040: PUSH
22041: LD_VAR 0 3
22045: NOT
22046: OR
22047: IFFALSE 22051
// exit ;
22049: GO 22865
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
22051: LD_ADDR_VAR 0 14
22055: PUSH
22056: LD_VAR 0 1
22060: PPUSH
22061: LD_VAR 0 2
22065: PPUSH
22066: LD_VAR 0 3
22070: PPUSH
22071: LD_VAR 0 4
22075: PPUSH
22076: LD_VAR 0 5
22080: PUSH
22081: LD_INT 1
22083: ARRAY
22084: PPUSH
22085: CALL_OW 248
22089: PPUSH
22090: LD_INT 0
22092: PPUSH
22093: CALL 24118 0 6
22097: ST_TO_ADDR
// if not hexes then
22098: LD_VAR 0 14
22102: NOT
22103: IFFALSE 22107
// exit ;
22105: GO 22865
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
22107: LD_ADDR_VAR 0 17
22111: PUSH
22112: LD_VAR 0 5
22116: PPUSH
22117: LD_INT 22
22119: PUSH
22120: LD_VAR 0 13
22124: PPUSH
22125: CALL_OW 255
22129: PUSH
22130: EMPTY
22131: LIST
22132: LIST
22133: PUSH
22134: LD_INT 2
22136: PUSH
22137: LD_INT 30
22139: PUSH
22140: LD_INT 0
22142: PUSH
22143: EMPTY
22144: LIST
22145: LIST
22146: PUSH
22147: LD_INT 30
22149: PUSH
22150: LD_INT 1
22152: PUSH
22153: EMPTY
22154: LIST
22155: LIST
22156: PUSH
22157: EMPTY
22158: LIST
22159: LIST
22160: LIST
22161: PUSH
22162: EMPTY
22163: LIST
22164: LIST
22165: PPUSH
22166: CALL_OW 72
22170: ST_TO_ADDR
// for i = 1 to hexes do
22171: LD_ADDR_VAR 0 9
22175: PUSH
22176: DOUBLE
22177: LD_INT 1
22179: DEC
22180: ST_TO_ADDR
22181: LD_VAR 0 14
22185: PUSH
22186: FOR_TO
22187: IFFALSE 22863
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
22189: LD_ADDR_VAR 0 13
22193: PUSH
22194: LD_VAR 0 14
22198: PUSH
22199: LD_VAR 0 9
22203: ARRAY
22204: PUSH
22205: LD_INT 1
22207: ARRAY
22208: PPUSH
22209: LD_VAR 0 14
22213: PUSH
22214: LD_VAR 0 9
22218: ARRAY
22219: PUSH
22220: LD_INT 2
22222: ARRAY
22223: PPUSH
22224: CALL_OW 428
22228: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
22229: LD_VAR 0 14
22233: PUSH
22234: LD_VAR 0 9
22238: ARRAY
22239: PUSH
22240: LD_INT 1
22242: ARRAY
22243: PPUSH
22244: LD_VAR 0 14
22248: PUSH
22249: LD_VAR 0 9
22253: ARRAY
22254: PUSH
22255: LD_INT 2
22257: ARRAY
22258: PPUSH
22259: CALL_OW 351
22263: PUSH
22264: LD_VAR 0 14
22268: PUSH
22269: LD_VAR 0 9
22273: ARRAY
22274: PUSH
22275: LD_INT 1
22277: ARRAY
22278: PPUSH
22279: LD_VAR 0 14
22283: PUSH
22284: LD_VAR 0 9
22288: ARRAY
22289: PUSH
22290: LD_INT 2
22292: ARRAY
22293: PPUSH
22294: CALL_OW 488
22298: NOT
22299: OR
22300: PUSH
22301: LD_VAR 0 13
22305: PPUSH
22306: CALL_OW 247
22310: PUSH
22311: LD_INT 3
22313: EQUAL
22314: OR
22315: IFFALSE 22321
// exit ;
22317: POP
22318: POP
22319: GO 22865
// if not tmp then
22321: LD_VAR 0 13
22325: NOT
22326: IFFALSE 22330
// continue ;
22328: GO 22186
// result := true ;
22330: LD_ADDR_VAR 0 8
22334: PUSH
22335: LD_INT 1
22337: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
22338: LD_VAR 0 6
22342: PUSH
22343: LD_VAR 0 13
22347: PPUSH
22348: CALL_OW 247
22352: PUSH
22353: LD_INT 2
22355: EQUAL
22356: AND
22357: PUSH
22358: LD_VAR 0 13
22362: PPUSH
22363: CALL_OW 263
22367: PUSH
22368: LD_INT 1
22370: EQUAL
22371: AND
22372: IFFALSE 22536
// begin if IsDrivenBy ( tmp ) then
22374: LD_VAR 0 13
22378: PPUSH
22379: CALL_OW 311
22383: IFFALSE 22387
// continue ;
22385: GO 22186
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
22387: LD_VAR 0 6
22391: PPUSH
22392: LD_INT 3
22394: PUSH
22395: LD_INT 60
22397: PUSH
22398: EMPTY
22399: LIST
22400: PUSH
22401: EMPTY
22402: LIST
22403: LIST
22404: PUSH
22405: LD_INT 3
22407: PUSH
22408: LD_INT 55
22410: PUSH
22411: EMPTY
22412: LIST
22413: PUSH
22414: EMPTY
22415: LIST
22416: LIST
22417: PUSH
22418: EMPTY
22419: LIST
22420: LIST
22421: PPUSH
22422: CALL_OW 72
22426: IFFALSE 22534
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
22428: LD_ADDR_VAR 0 18
22432: PUSH
22433: LD_VAR 0 6
22437: PPUSH
22438: LD_INT 3
22440: PUSH
22441: LD_INT 60
22443: PUSH
22444: EMPTY
22445: LIST
22446: PUSH
22447: EMPTY
22448: LIST
22449: LIST
22450: PUSH
22451: LD_INT 3
22453: PUSH
22454: LD_INT 55
22456: PUSH
22457: EMPTY
22458: LIST
22459: PUSH
22460: EMPTY
22461: LIST
22462: LIST
22463: PUSH
22464: EMPTY
22465: LIST
22466: LIST
22467: PPUSH
22468: CALL_OW 72
22472: PUSH
22473: LD_INT 1
22475: ARRAY
22476: ST_TO_ADDR
// if IsInUnit ( driver ) then
22477: LD_VAR 0 18
22481: PPUSH
22482: CALL_OW 310
22486: IFFALSE 22497
// ComExit ( driver ) ;
22488: LD_VAR 0 18
22492: PPUSH
22493: CALL 47919 0 1
// AddComEnterUnit ( driver , tmp ) ;
22497: LD_VAR 0 18
22501: PPUSH
22502: LD_VAR 0 13
22506: PPUSH
22507: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
22511: LD_VAR 0 18
22515: PPUSH
22516: LD_VAR 0 7
22520: PPUSH
22521: CALL_OW 173
// AddComExitVehicle ( driver ) ;
22525: LD_VAR 0 18
22529: PPUSH
22530: CALL_OW 181
// end ; continue ;
22534: GO 22186
// end ; if not cleaners or not tmp in cleaners then
22536: LD_VAR 0 6
22540: NOT
22541: PUSH
22542: LD_VAR 0 13
22546: PUSH
22547: LD_VAR 0 6
22551: IN
22552: NOT
22553: OR
22554: IFFALSE 22861
// begin if dep then
22556: LD_VAR 0 17
22560: IFFALSE 22696
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
22562: LD_ADDR_VAR 0 16
22566: PUSH
22567: LD_VAR 0 17
22571: PUSH
22572: LD_INT 1
22574: ARRAY
22575: PPUSH
22576: CALL_OW 250
22580: PPUSH
22581: LD_VAR 0 17
22585: PUSH
22586: LD_INT 1
22588: ARRAY
22589: PPUSH
22590: CALL_OW 254
22594: PPUSH
22595: LD_INT 5
22597: PPUSH
22598: CALL_OW 272
22602: PUSH
22603: LD_VAR 0 17
22607: PUSH
22608: LD_INT 1
22610: ARRAY
22611: PPUSH
22612: CALL_OW 251
22616: PPUSH
22617: LD_VAR 0 17
22621: PUSH
22622: LD_INT 1
22624: ARRAY
22625: PPUSH
22626: CALL_OW 254
22630: PPUSH
22631: LD_INT 5
22633: PPUSH
22634: CALL_OW 273
22638: PUSH
22639: EMPTY
22640: LIST
22641: LIST
22642: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
22643: LD_VAR 0 16
22647: PUSH
22648: LD_INT 1
22650: ARRAY
22651: PPUSH
22652: LD_VAR 0 16
22656: PUSH
22657: LD_INT 2
22659: ARRAY
22660: PPUSH
22661: CALL_OW 488
22665: IFFALSE 22696
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
22667: LD_VAR 0 13
22671: PPUSH
22672: LD_VAR 0 16
22676: PUSH
22677: LD_INT 1
22679: ARRAY
22680: PPUSH
22681: LD_VAR 0 16
22685: PUSH
22686: LD_INT 2
22688: ARRAY
22689: PPUSH
22690: CALL_OW 111
// continue ;
22694: GO 22186
// end ; end ; r := GetDir ( tmp ) ;
22696: LD_ADDR_VAR 0 15
22700: PUSH
22701: LD_VAR 0 13
22705: PPUSH
22706: CALL_OW 254
22710: ST_TO_ADDR
// if r = 5 then
22711: LD_VAR 0 15
22715: PUSH
22716: LD_INT 5
22718: EQUAL
22719: IFFALSE 22729
// r := 0 ;
22721: LD_ADDR_VAR 0 15
22725: PUSH
22726: LD_INT 0
22728: ST_TO_ADDR
// for j = r to 5 do
22729: LD_ADDR_VAR 0 10
22733: PUSH
22734: DOUBLE
22735: LD_VAR 0 15
22739: DEC
22740: ST_TO_ADDR
22741: LD_INT 5
22743: PUSH
22744: FOR_TO
22745: IFFALSE 22859
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
22747: LD_ADDR_VAR 0 11
22751: PUSH
22752: LD_VAR 0 13
22756: PPUSH
22757: CALL_OW 250
22761: PPUSH
22762: LD_VAR 0 10
22766: PPUSH
22767: LD_INT 2
22769: PPUSH
22770: CALL_OW 272
22774: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
22775: LD_ADDR_VAR 0 12
22779: PUSH
22780: LD_VAR 0 13
22784: PPUSH
22785: CALL_OW 251
22789: PPUSH
22790: LD_VAR 0 10
22794: PPUSH
22795: LD_INT 2
22797: PPUSH
22798: CALL_OW 273
22802: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
22803: LD_VAR 0 11
22807: PPUSH
22808: LD_VAR 0 12
22812: PPUSH
22813: CALL_OW 488
22817: PUSH
22818: LD_VAR 0 11
22822: PPUSH
22823: LD_VAR 0 12
22827: PPUSH
22828: CALL_OW 428
22832: NOT
22833: AND
22834: IFFALSE 22857
// begin ComMoveXY ( tmp , _x , _y ) ;
22836: LD_VAR 0 13
22840: PPUSH
22841: LD_VAR 0 11
22845: PPUSH
22846: LD_VAR 0 12
22850: PPUSH
22851: CALL_OW 111
// break ;
22855: GO 22859
// end ; end ;
22857: GO 22744
22859: POP
22860: POP
// end ; end ;
22861: GO 22186
22863: POP
22864: POP
// end ;
22865: LD_VAR 0 8
22869: RET
// export function BuildingTechInvented ( side , btype ) ; begin
22870: LD_INT 0
22872: PPUSH
// result := true ;
22873: LD_ADDR_VAR 0 3
22877: PUSH
22878: LD_INT 1
22880: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
22881: LD_VAR 0 2
22885: PUSH
22886: LD_INT 24
22888: DOUBLE
22889: EQUAL
22890: IFTRUE 22900
22892: LD_INT 33
22894: DOUBLE
22895: EQUAL
22896: IFTRUE 22900
22898: GO 22925
22900: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
22901: LD_ADDR_VAR 0 3
22905: PUSH
22906: LD_INT 32
22908: PPUSH
22909: LD_VAR 0 1
22913: PPUSH
22914: CALL_OW 321
22918: PUSH
22919: LD_INT 2
22921: EQUAL
22922: ST_TO_ADDR
22923: GO 23241
22925: LD_INT 20
22927: DOUBLE
22928: EQUAL
22929: IFTRUE 22933
22931: GO 22958
22933: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
22934: LD_ADDR_VAR 0 3
22938: PUSH
22939: LD_INT 6
22941: PPUSH
22942: LD_VAR 0 1
22946: PPUSH
22947: CALL_OW 321
22951: PUSH
22952: LD_INT 2
22954: EQUAL
22955: ST_TO_ADDR
22956: GO 23241
22958: LD_INT 22
22960: DOUBLE
22961: EQUAL
22962: IFTRUE 22972
22964: LD_INT 36
22966: DOUBLE
22967: EQUAL
22968: IFTRUE 22972
22970: GO 22997
22972: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
22973: LD_ADDR_VAR 0 3
22977: PUSH
22978: LD_INT 15
22980: PPUSH
22981: LD_VAR 0 1
22985: PPUSH
22986: CALL_OW 321
22990: PUSH
22991: LD_INT 2
22993: EQUAL
22994: ST_TO_ADDR
22995: GO 23241
22997: LD_INT 30
22999: DOUBLE
23000: EQUAL
23001: IFTRUE 23005
23003: GO 23030
23005: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
23006: LD_ADDR_VAR 0 3
23010: PUSH
23011: LD_INT 20
23013: PPUSH
23014: LD_VAR 0 1
23018: PPUSH
23019: CALL_OW 321
23023: PUSH
23024: LD_INT 2
23026: EQUAL
23027: ST_TO_ADDR
23028: GO 23241
23030: LD_INT 28
23032: DOUBLE
23033: EQUAL
23034: IFTRUE 23044
23036: LD_INT 21
23038: DOUBLE
23039: EQUAL
23040: IFTRUE 23044
23042: GO 23069
23044: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
23045: LD_ADDR_VAR 0 3
23049: PUSH
23050: LD_INT 21
23052: PPUSH
23053: LD_VAR 0 1
23057: PPUSH
23058: CALL_OW 321
23062: PUSH
23063: LD_INT 2
23065: EQUAL
23066: ST_TO_ADDR
23067: GO 23241
23069: LD_INT 16
23071: DOUBLE
23072: EQUAL
23073: IFTRUE 23077
23075: GO 23102
23077: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
23078: LD_ADDR_VAR 0 3
23082: PUSH
23083: LD_INT 84
23085: PPUSH
23086: LD_VAR 0 1
23090: PPUSH
23091: CALL_OW 321
23095: PUSH
23096: LD_INT 2
23098: EQUAL
23099: ST_TO_ADDR
23100: GO 23241
23102: LD_INT 19
23104: DOUBLE
23105: EQUAL
23106: IFTRUE 23116
23108: LD_INT 23
23110: DOUBLE
23111: EQUAL
23112: IFTRUE 23116
23114: GO 23141
23116: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
23117: LD_ADDR_VAR 0 3
23121: PUSH
23122: LD_INT 83
23124: PPUSH
23125: LD_VAR 0 1
23129: PPUSH
23130: CALL_OW 321
23134: PUSH
23135: LD_INT 2
23137: EQUAL
23138: ST_TO_ADDR
23139: GO 23241
23141: LD_INT 17
23143: DOUBLE
23144: EQUAL
23145: IFTRUE 23149
23147: GO 23174
23149: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
23150: LD_ADDR_VAR 0 3
23154: PUSH
23155: LD_INT 39
23157: PPUSH
23158: LD_VAR 0 1
23162: PPUSH
23163: CALL_OW 321
23167: PUSH
23168: LD_INT 2
23170: EQUAL
23171: ST_TO_ADDR
23172: GO 23241
23174: LD_INT 18
23176: DOUBLE
23177: EQUAL
23178: IFTRUE 23182
23180: GO 23207
23182: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
23183: LD_ADDR_VAR 0 3
23187: PUSH
23188: LD_INT 40
23190: PPUSH
23191: LD_VAR 0 1
23195: PPUSH
23196: CALL_OW 321
23200: PUSH
23201: LD_INT 2
23203: EQUAL
23204: ST_TO_ADDR
23205: GO 23241
23207: LD_INT 27
23209: DOUBLE
23210: EQUAL
23211: IFTRUE 23215
23213: GO 23240
23215: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
23216: LD_ADDR_VAR 0 3
23220: PUSH
23221: LD_INT 35
23223: PPUSH
23224: LD_VAR 0 1
23228: PPUSH
23229: CALL_OW 321
23233: PUSH
23234: LD_INT 2
23236: EQUAL
23237: ST_TO_ADDR
23238: GO 23241
23240: POP
// end ;
23241: LD_VAR 0 3
23245: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
23246: LD_INT 0
23248: PPUSH
23249: PPUSH
23250: PPUSH
23251: PPUSH
23252: PPUSH
23253: PPUSH
23254: PPUSH
23255: PPUSH
23256: PPUSH
23257: PPUSH
23258: PPUSH
// result := false ;
23259: LD_ADDR_VAR 0 6
23263: PUSH
23264: LD_INT 0
23266: ST_TO_ADDR
// if btype = b_depot then
23267: LD_VAR 0 2
23271: PUSH
23272: LD_INT 0
23274: EQUAL
23275: IFFALSE 23287
// begin result := true ;
23277: LD_ADDR_VAR 0 6
23281: PUSH
23282: LD_INT 1
23284: ST_TO_ADDR
// exit ;
23285: GO 24113
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
23287: LD_VAR 0 1
23291: NOT
23292: PUSH
23293: LD_VAR 0 1
23297: PPUSH
23298: CALL_OW 266
23302: PUSH
23303: LD_INT 0
23305: PUSH
23306: LD_INT 1
23308: PUSH
23309: EMPTY
23310: LIST
23311: LIST
23312: IN
23313: NOT
23314: OR
23315: PUSH
23316: LD_VAR 0 2
23320: NOT
23321: OR
23322: PUSH
23323: LD_VAR 0 5
23327: PUSH
23328: LD_INT 0
23330: PUSH
23331: LD_INT 1
23333: PUSH
23334: LD_INT 2
23336: PUSH
23337: LD_INT 3
23339: PUSH
23340: LD_INT 4
23342: PUSH
23343: LD_INT 5
23345: PUSH
23346: EMPTY
23347: LIST
23348: LIST
23349: LIST
23350: LIST
23351: LIST
23352: LIST
23353: IN
23354: NOT
23355: OR
23356: PUSH
23357: LD_VAR 0 3
23361: PPUSH
23362: LD_VAR 0 4
23366: PPUSH
23367: CALL_OW 488
23371: NOT
23372: OR
23373: IFFALSE 23377
// exit ;
23375: GO 24113
// side := GetSide ( depot ) ;
23377: LD_ADDR_VAR 0 9
23381: PUSH
23382: LD_VAR 0 1
23386: PPUSH
23387: CALL_OW 255
23391: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
23392: LD_VAR 0 9
23396: PPUSH
23397: LD_VAR 0 2
23401: PPUSH
23402: CALL 22870 0 2
23406: NOT
23407: IFFALSE 23411
// exit ;
23409: GO 24113
// pom := GetBase ( depot ) ;
23411: LD_ADDR_VAR 0 10
23415: PUSH
23416: LD_VAR 0 1
23420: PPUSH
23421: CALL_OW 274
23425: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
23426: LD_ADDR_VAR 0 11
23430: PUSH
23431: LD_VAR 0 2
23435: PPUSH
23436: LD_VAR 0 1
23440: PPUSH
23441: CALL_OW 248
23445: PPUSH
23446: CALL_OW 450
23450: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
23451: LD_VAR 0 10
23455: PPUSH
23456: LD_INT 1
23458: PPUSH
23459: CALL_OW 275
23463: PUSH
23464: LD_VAR 0 11
23468: PUSH
23469: LD_INT 1
23471: ARRAY
23472: GREATEREQUAL
23473: PUSH
23474: LD_VAR 0 10
23478: PPUSH
23479: LD_INT 2
23481: PPUSH
23482: CALL_OW 275
23486: PUSH
23487: LD_VAR 0 11
23491: PUSH
23492: LD_INT 2
23494: ARRAY
23495: GREATEREQUAL
23496: AND
23497: PUSH
23498: LD_VAR 0 10
23502: PPUSH
23503: LD_INT 3
23505: PPUSH
23506: CALL_OW 275
23510: PUSH
23511: LD_VAR 0 11
23515: PUSH
23516: LD_INT 3
23518: ARRAY
23519: GREATEREQUAL
23520: AND
23521: NOT
23522: IFFALSE 23526
// exit ;
23524: GO 24113
// if GetBType ( depot ) = b_depot then
23526: LD_VAR 0 1
23530: PPUSH
23531: CALL_OW 266
23535: PUSH
23536: LD_INT 0
23538: EQUAL
23539: IFFALSE 23551
// dist := 28 else
23541: LD_ADDR_VAR 0 14
23545: PUSH
23546: LD_INT 28
23548: ST_TO_ADDR
23549: GO 23559
// dist := 36 ;
23551: LD_ADDR_VAR 0 14
23555: PUSH
23556: LD_INT 36
23558: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
23559: LD_VAR 0 1
23563: PPUSH
23564: LD_VAR 0 3
23568: PPUSH
23569: LD_VAR 0 4
23573: PPUSH
23574: CALL_OW 297
23578: PUSH
23579: LD_VAR 0 14
23583: GREATER
23584: IFFALSE 23588
// exit ;
23586: GO 24113
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
23588: LD_ADDR_VAR 0 12
23592: PUSH
23593: LD_VAR 0 2
23597: PPUSH
23598: LD_VAR 0 3
23602: PPUSH
23603: LD_VAR 0 4
23607: PPUSH
23608: LD_VAR 0 5
23612: PPUSH
23613: LD_VAR 0 1
23617: PPUSH
23618: CALL_OW 248
23622: PPUSH
23623: LD_INT 0
23625: PPUSH
23626: CALL 24118 0 6
23630: ST_TO_ADDR
// if not hexes then
23631: LD_VAR 0 12
23635: NOT
23636: IFFALSE 23640
// exit ;
23638: GO 24113
// hex := GetHexInfo ( x , y ) ;
23640: LD_ADDR_VAR 0 15
23644: PUSH
23645: LD_VAR 0 3
23649: PPUSH
23650: LD_VAR 0 4
23654: PPUSH
23655: CALL_OW 546
23659: ST_TO_ADDR
// if hex [ 1 ] then
23660: LD_VAR 0 15
23664: PUSH
23665: LD_INT 1
23667: ARRAY
23668: IFFALSE 23672
// exit ;
23670: GO 24113
// height := hex [ 2 ] ;
23672: LD_ADDR_VAR 0 13
23676: PUSH
23677: LD_VAR 0 15
23681: PUSH
23682: LD_INT 2
23684: ARRAY
23685: ST_TO_ADDR
// for i = 1 to hexes do
23686: LD_ADDR_VAR 0 7
23690: PUSH
23691: DOUBLE
23692: LD_INT 1
23694: DEC
23695: ST_TO_ADDR
23696: LD_VAR 0 12
23700: PUSH
23701: FOR_TO
23702: IFFALSE 24032
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
23704: LD_VAR 0 12
23708: PUSH
23709: LD_VAR 0 7
23713: ARRAY
23714: PUSH
23715: LD_INT 1
23717: ARRAY
23718: PPUSH
23719: LD_VAR 0 12
23723: PUSH
23724: LD_VAR 0 7
23728: ARRAY
23729: PUSH
23730: LD_INT 2
23732: ARRAY
23733: PPUSH
23734: CALL_OW 488
23738: NOT
23739: PUSH
23740: LD_VAR 0 12
23744: PUSH
23745: LD_VAR 0 7
23749: ARRAY
23750: PUSH
23751: LD_INT 1
23753: ARRAY
23754: PPUSH
23755: LD_VAR 0 12
23759: PUSH
23760: LD_VAR 0 7
23764: ARRAY
23765: PUSH
23766: LD_INT 2
23768: ARRAY
23769: PPUSH
23770: CALL_OW 428
23774: PUSH
23775: LD_INT 0
23777: GREATER
23778: OR
23779: PUSH
23780: LD_VAR 0 12
23784: PUSH
23785: LD_VAR 0 7
23789: ARRAY
23790: PUSH
23791: LD_INT 1
23793: ARRAY
23794: PPUSH
23795: LD_VAR 0 12
23799: PUSH
23800: LD_VAR 0 7
23804: ARRAY
23805: PUSH
23806: LD_INT 2
23808: ARRAY
23809: PPUSH
23810: CALL_OW 351
23814: OR
23815: IFFALSE 23821
// exit ;
23817: POP
23818: POP
23819: GO 24113
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
23821: LD_ADDR_VAR 0 8
23825: PUSH
23826: LD_VAR 0 12
23830: PUSH
23831: LD_VAR 0 7
23835: ARRAY
23836: PUSH
23837: LD_INT 1
23839: ARRAY
23840: PPUSH
23841: LD_VAR 0 12
23845: PUSH
23846: LD_VAR 0 7
23850: ARRAY
23851: PUSH
23852: LD_INT 2
23854: ARRAY
23855: PPUSH
23856: CALL_OW 546
23860: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
23861: LD_VAR 0 8
23865: PUSH
23866: LD_INT 1
23868: ARRAY
23869: PUSH
23870: LD_VAR 0 8
23874: PUSH
23875: LD_INT 2
23877: ARRAY
23878: PUSH
23879: LD_VAR 0 13
23883: PUSH
23884: LD_INT 2
23886: PLUS
23887: GREATER
23888: OR
23889: PUSH
23890: LD_VAR 0 8
23894: PUSH
23895: LD_INT 2
23897: ARRAY
23898: PUSH
23899: LD_VAR 0 13
23903: PUSH
23904: LD_INT 2
23906: MINUS
23907: LESS
23908: OR
23909: PUSH
23910: LD_VAR 0 8
23914: PUSH
23915: LD_INT 3
23917: ARRAY
23918: PUSH
23919: LD_INT 0
23921: PUSH
23922: LD_INT 8
23924: PUSH
23925: LD_INT 9
23927: PUSH
23928: LD_INT 10
23930: PUSH
23931: LD_INT 11
23933: PUSH
23934: LD_INT 12
23936: PUSH
23937: LD_INT 13
23939: PUSH
23940: LD_INT 16
23942: PUSH
23943: LD_INT 17
23945: PUSH
23946: LD_INT 18
23948: PUSH
23949: LD_INT 19
23951: PUSH
23952: LD_INT 20
23954: PUSH
23955: LD_INT 21
23957: PUSH
23958: EMPTY
23959: LIST
23960: LIST
23961: LIST
23962: LIST
23963: LIST
23964: LIST
23965: LIST
23966: LIST
23967: LIST
23968: LIST
23969: LIST
23970: LIST
23971: LIST
23972: IN
23973: NOT
23974: OR
23975: PUSH
23976: LD_VAR 0 8
23980: PUSH
23981: LD_INT 5
23983: ARRAY
23984: NOT
23985: OR
23986: PUSH
23987: LD_VAR 0 8
23991: PUSH
23992: LD_INT 6
23994: ARRAY
23995: PUSH
23996: LD_INT 1
23998: PUSH
23999: LD_INT 2
24001: PUSH
24002: LD_INT 7
24004: PUSH
24005: LD_INT 9
24007: PUSH
24008: LD_INT 10
24010: PUSH
24011: LD_INT 11
24013: PUSH
24014: EMPTY
24015: LIST
24016: LIST
24017: LIST
24018: LIST
24019: LIST
24020: LIST
24021: IN
24022: NOT
24023: OR
24024: IFFALSE 24030
// exit ;
24026: POP
24027: POP
24028: GO 24113
// end ;
24030: GO 23701
24032: POP
24033: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
24034: LD_VAR 0 9
24038: PPUSH
24039: LD_VAR 0 3
24043: PPUSH
24044: LD_VAR 0 4
24048: PPUSH
24049: LD_INT 20
24051: PPUSH
24052: CALL 16036 0 4
24056: PUSH
24057: LD_INT 4
24059: ARRAY
24060: IFFALSE 24064
// exit ;
24062: GO 24113
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
24064: LD_VAR 0 2
24068: PUSH
24069: LD_INT 29
24071: PUSH
24072: LD_INT 30
24074: PUSH
24075: EMPTY
24076: LIST
24077: LIST
24078: IN
24079: PUSH
24080: LD_VAR 0 3
24084: PPUSH
24085: LD_VAR 0 4
24089: PPUSH
24090: LD_VAR 0 9
24094: PPUSH
24095: CALL_OW 440
24099: NOT
24100: AND
24101: IFFALSE 24105
// exit ;
24103: GO 24113
// result := true ;
24105: LD_ADDR_VAR 0 6
24109: PUSH
24110: LD_INT 1
24112: ST_TO_ADDR
// end ;
24113: LD_VAR 0 6
24117: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
24118: LD_INT 0
24120: PPUSH
24121: PPUSH
24122: PPUSH
24123: PPUSH
24124: PPUSH
24125: PPUSH
24126: PPUSH
24127: PPUSH
24128: PPUSH
24129: PPUSH
24130: PPUSH
24131: PPUSH
24132: PPUSH
24133: PPUSH
24134: PPUSH
24135: PPUSH
24136: PPUSH
24137: PPUSH
24138: PPUSH
24139: PPUSH
24140: PPUSH
24141: PPUSH
24142: PPUSH
24143: PPUSH
24144: PPUSH
24145: PPUSH
24146: PPUSH
24147: PPUSH
24148: PPUSH
24149: PPUSH
24150: PPUSH
24151: PPUSH
24152: PPUSH
24153: PPUSH
24154: PPUSH
24155: PPUSH
24156: PPUSH
24157: PPUSH
24158: PPUSH
24159: PPUSH
24160: PPUSH
24161: PPUSH
24162: PPUSH
24163: PPUSH
24164: PPUSH
24165: PPUSH
24166: PPUSH
24167: PPUSH
24168: PPUSH
24169: PPUSH
24170: PPUSH
24171: PPUSH
24172: PPUSH
24173: PPUSH
24174: PPUSH
24175: PPUSH
24176: PPUSH
24177: PPUSH
// result = [ ] ;
24178: LD_ADDR_VAR 0 7
24182: PUSH
24183: EMPTY
24184: ST_TO_ADDR
// temp_list = [ ] ;
24185: LD_ADDR_VAR 0 9
24189: PUSH
24190: EMPTY
24191: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
24192: LD_VAR 0 4
24196: PUSH
24197: LD_INT 0
24199: PUSH
24200: LD_INT 1
24202: PUSH
24203: LD_INT 2
24205: PUSH
24206: LD_INT 3
24208: PUSH
24209: LD_INT 4
24211: PUSH
24212: LD_INT 5
24214: PUSH
24215: EMPTY
24216: LIST
24217: LIST
24218: LIST
24219: LIST
24220: LIST
24221: LIST
24222: IN
24223: NOT
24224: PUSH
24225: LD_VAR 0 1
24229: PUSH
24230: LD_INT 0
24232: PUSH
24233: LD_INT 1
24235: PUSH
24236: EMPTY
24237: LIST
24238: LIST
24239: IN
24240: PUSH
24241: LD_VAR 0 5
24245: PUSH
24246: LD_INT 1
24248: PUSH
24249: LD_INT 2
24251: PUSH
24252: LD_INT 3
24254: PUSH
24255: EMPTY
24256: LIST
24257: LIST
24258: LIST
24259: IN
24260: NOT
24261: AND
24262: OR
24263: IFFALSE 24267
// exit ;
24265: GO 42658
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
24267: LD_VAR 0 1
24271: PUSH
24272: LD_INT 6
24274: PUSH
24275: LD_INT 7
24277: PUSH
24278: LD_INT 8
24280: PUSH
24281: LD_INT 13
24283: PUSH
24284: LD_INT 12
24286: PUSH
24287: LD_INT 15
24289: PUSH
24290: LD_INT 11
24292: PUSH
24293: LD_INT 14
24295: PUSH
24296: LD_INT 10
24298: PUSH
24299: EMPTY
24300: LIST
24301: LIST
24302: LIST
24303: LIST
24304: LIST
24305: LIST
24306: LIST
24307: LIST
24308: LIST
24309: IN
24310: IFFALSE 24320
// btype = b_lab ;
24312: LD_ADDR_VAR 0 1
24316: PUSH
24317: LD_INT 6
24319: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
24320: LD_VAR 0 6
24324: PUSH
24325: LD_INT 0
24327: PUSH
24328: LD_INT 1
24330: PUSH
24331: LD_INT 2
24333: PUSH
24334: EMPTY
24335: LIST
24336: LIST
24337: LIST
24338: IN
24339: NOT
24340: PUSH
24341: LD_VAR 0 1
24345: PUSH
24346: LD_INT 0
24348: PUSH
24349: LD_INT 1
24351: PUSH
24352: LD_INT 2
24354: PUSH
24355: LD_INT 3
24357: PUSH
24358: LD_INT 6
24360: PUSH
24361: LD_INT 36
24363: PUSH
24364: LD_INT 4
24366: PUSH
24367: LD_INT 5
24369: PUSH
24370: LD_INT 31
24372: PUSH
24373: LD_INT 32
24375: PUSH
24376: LD_INT 33
24378: PUSH
24379: EMPTY
24380: LIST
24381: LIST
24382: LIST
24383: LIST
24384: LIST
24385: LIST
24386: LIST
24387: LIST
24388: LIST
24389: LIST
24390: LIST
24391: IN
24392: NOT
24393: PUSH
24394: LD_VAR 0 6
24398: PUSH
24399: LD_INT 1
24401: EQUAL
24402: AND
24403: OR
24404: PUSH
24405: LD_VAR 0 1
24409: PUSH
24410: LD_INT 2
24412: PUSH
24413: LD_INT 3
24415: PUSH
24416: EMPTY
24417: LIST
24418: LIST
24419: IN
24420: NOT
24421: PUSH
24422: LD_VAR 0 6
24426: PUSH
24427: LD_INT 2
24429: EQUAL
24430: AND
24431: OR
24432: IFFALSE 24442
// mode = 0 ;
24434: LD_ADDR_VAR 0 6
24438: PUSH
24439: LD_INT 0
24441: ST_TO_ADDR
// case mode of 0 :
24442: LD_VAR 0 6
24446: PUSH
24447: LD_INT 0
24449: DOUBLE
24450: EQUAL
24451: IFTRUE 24455
24453: GO 35908
24455: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
24456: LD_ADDR_VAR 0 11
24460: PUSH
24461: LD_INT 0
24463: PUSH
24464: LD_INT 0
24466: PUSH
24467: EMPTY
24468: LIST
24469: LIST
24470: PUSH
24471: LD_INT 0
24473: PUSH
24474: LD_INT 1
24476: NEG
24477: PUSH
24478: EMPTY
24479: LIST
24480: LIST
24481: PUSH
24482: LD_INT 1
24484: PUSH
24485: LD_INT 0
24487: PUSH
24488: EMPTY
24489: LIST
24490: LIST
24491: PUSH
24492: LD_INT 1
24494: PUSH
24495: LD_INT 1
24497: PUSH
24498: EMPTY
24499: LIST
24500: LIST
24501: PUSH
24502: LD_INT 0
24504: PUSH
24505: LD_INT 1
24507: PUSH
24508: EMPTY
24509: LIST
24510: LIST
24511: PUSH
24512: LD_INT 1
24514: NEG
24515: PUSH
24516: LD_INT 0
24518: PUSH
24519: EMPTY
24520: LIST
24521: LIST
24522: PUSH
24523: LD_INT 1
24525: NEG
24526: PUSH
24527: LD_INT 1
24529: NEG
24530: PUSH
24531: EMPTY
24532: LIST
24533: LIST
24534: PUSH
24535: LD_INT 1
24537: NEG
24538: PUSH
24539: LD_INT 2
24541: NEG
24542: PUSH
24543: EMPTY
24544: LIST
24545: LIST
24546: PUSH
24547: LD_INT 0
24549: PUSH
24550: LD_INT 2
24552: NEG
24553: PUSH
24554: EMPTY
24555: LIST
24556: LIST
24557: PUSH
24558: LD_INT 1
24560: PUSH
24561: LD_INT 1
24563: NEG
24564: PUSH
24565: EMPTY
24566: LIST
24567: LIST
24568: PUSH
24569: LD_INT 1
24571: PUSH
24572: LD_INT 2
24574: PUSH
24575: EMPTY
24576: LIST
24577: LIST
24578: PUSH
24579: LD_INT 0
24581: PUSH
24582: LD_INT 2
24584: PUSH
24585: EMPTY
24586: LIST
24587: LIST
24588: PUSH
24589: LD_INT 1
24591: NEG
24592: PUSH
24593: LD_INT 1
24595: PUSH
24596: EMPTY
24597: LIST
24598: LIST
24599: PUSH
24600: LD_INT 1
24602: PUSH
24603: LD_INT 3
24605: PUSH
24606: EMPTY
24607: LIST
24608: LIST
24609: PUSH
24610: LD_INT 0
24612: PUSH
24613: LD_INT 3
24615: PUSH
24616: EMPTY
24617: LIST
24618: LIST
24619: PUSH
24620: LD_INT 1
24622: NEG
24623: PUSH
24624: LD_INT 2
24626: PUSH
24627: EMPTY
24628: LIST
24629: LIST
24630: PUSH
24631: EMPTY
24632: LIST
24633: LIST
24634: LIST
24635: LIST
24636: LIST
24637: LIST
24638: LIST
24639: LIST
24640: LIST
24641: LIST
24642: LIST
24643: LIST
24644: LIST
24645: LIST
24646: LIST
24647: LIST
24648: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
24649: LD_ADDR_VAR 0 12
24653: PUSH
24654: LD_INT 0
24656: PUSH
24657: LD_INT 0
24659: PUSH
24660: EMPTY
24661: LIST
24662: LIST
24663: PUSH
24664: LD_INT 0
24666: PUSH
24667: LD_INT 1
24669: NEG
24670: PUSH
24671: EMPTY
24672: LIST
24673: LIST
24674: PUSH
24675: LD_INT 1
24677: PUSH
24678: LD_INT 0
24680: PUSH
24681: EMPTY
24682: LIST
24683: LIST
24684: PUSH
24685: LD_INT 1
24687: PUSH
24688: LD_INT 1
24690: PUSH
24691: EMPTY
24692: LIST
24693: LIST
24694: PUSH
24695: LD_INT 0
24697: PUSH
24698: LD_INT 1
24700: PUSH
24701: EMPTY
24702: LIST
24703: LIST
24704: PUSH
24705: LD_INT 1
24707: NEG
24708: PUSH
24709: LD_INT 0
24711: PUSH
24712: EMPTY
24713: LIST
24714: LIST
24715: PUSH
24716: LD_INT 1
24718: NEG
24719: PUSH
24720: LD_INT 1
24722: NEG
24723: PUSH
24724: EMPTY
24725: LIST
24726: LIST
24727: PUSH
24728: LD_INT 1
24730: PUSH
24731: LD_INT 1
24733: NEG
24734: PUSH
24735: EMPTY
24736: LIST
24737: LIST
24738: PUSH
24739: LD_INT 2
24741: PUSH
24742: LD_INT 0
24744: PUSH
24745: EMPTY
24746: LIST
24747: LIST
24748: PUSH
24749: LD_INT 2
24751: PUSH
24752: LD_INT 1
24754: PUSH
24755: EMPTY
24756: LIST
24757: LIST
24758: PUSH
24759: LD_INT 1
24761: NEG
24762: PUSH
24763: LD_INT 1
24765: PUSH
24766: EMPTY
24767: LIST
24768: LIST
24769: PUSH
24770: LD_INT 2
24772: NEG
24773: PUSH
24774: LD_INT 0
24776: PUSH
24777: EMPTY
24778: LIST
24779: LIST
24780: PUSH
24781: LD_INT 2
24783: NEG
24784: PUSH
24785: LD_INT 1
24787: NEG
24788: PUSH
24789: EMPTY
24790: LIST
24791: LIST
24792: PUSH
24793: LD_INT 2
24795: NEG
24796: PUSH
24797: LD_INT 1
24799: PUSH
24800: EMPTY
24801: LIST
24802: LIST
24803: PUSH
24804: LD_INT 3
24806: NEG
24807: PUSH
24808: LD_INT 0
24810: PUSH
24811: EMPTY
24812: LIST
24813: LIST
24814: PUSH
24815: LD_INT 3
24817: NEG
24818: PUSH
24819: LD_INT 1
24821: NEG
24822: PUSH
24823: EMPTY
24824: LIST
24825: LIST
24826: PUSH
24827: EMPTY
24828: LIST
24829: LIST
24830: LIST
24831: LIST
24832: LIST
24833: LIST
24834: LIST
24835: LIST
24836: LIST
24837: LIST
24838: LIST
24839: LIST
24840: LIST
24841: LIST
24842: LIST
24843: LIST
24844: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
24845: LD_ADDR_VAR 0 13
24849: PUSH
24850: LD_INT 0
24852: PUSH
24853: LD_INT 0
24855: PUSH
24856: EMPTY
24857: LIST
24858: LIST
24859: PUSH
24860: LD_INT 0
24862: PUSH
24863: LD_INT 1
24865: NEG
24866: PUSH
24867: EMPTY
24868: LIST
24869: LIST
24870: PUSH
24871: LD_INT 1
24873: PUSH
24874: LD_INT 0
24876: PUSH
24877: EMPTY
24878: LIST
24879: LIST
24880: PUSH
24881: LD_INT 1
24883: PUSH
24884: LD_INT 1
24886: PUSH
24887: EMPTY
24888: LIST
24889: LIST
24890: PUSH
24891: LD_INT 0
24893: PUSH
24894: LD_INT 1
24896: PUSH
24897: EMPTY
24898: LIST
24899: LIST
24900: PUSH
24901: LD_INT 1
24903: NEG
24904: PUSH
24905: LD_INT 0
24907: PUSH
24908: EMPTY
24909: LIST
24910: LIST
24911: PUSH
24912: LD_INT 1
24914: NEG
24915: PUSH
24916: LD_INT 1
24918: NEG
24919: PUSH
24920: EMPTY
24921: LIST
24922: LIST
24923: PUSH
24924: LD_INT 1
24926: NEG
24927: PUSH
24928: LD_INT 2
24930: NEG
24931: PUSH
24932: EMPTY
24933: LIST
24934: LIST
24935: PUSH
24936: LD_INT 2
24938: PUSH
24939: LD_INT 1
24941: PUSH
24942: EMPTY
24943: LIST
24944: LIST
24945: PUSH
24946: LD_INT 2
24948: PUSH
24949: LD_INT 2
24951: PUSH
24952: EMPTY
24953: LIST
24954: LIST
24955: PUSH
24956: LD_INT 1
24958: PUSH
24959: LD_INT 2
24961: PUSH
24962: EMPTY
24963: LIST
24964: LIST
24965: PUSH
24966: LD_INT 2
24968: NEG
24969: PUSH
24970: LD_INT 1
24972: NEG
24973: PUSH
24974: EMPTY
24975: LIST
24976: LIST
24977: PUSH
24978: LD_INT 2
24980: NEG
24981: PUSH
24982: LD_INT 2
24984: NEG
24985: PUSH
24986: EMPTY
24987: LIST
24988: LIST
24989: PUSH
24990: LD_INT 2
24992: NEG
24993: PUSH
24994: LD_INT 3
24996: NEG
24997: PUSH
24998: EMPTY
24999: LIST
25000: LIST
25001: PUSH
25002: LD_INT 3
25004: NEG
25005: PUSH
25006: LD_INT 2
25008: NEG
25009: PUSH
25010: EMPTY
25011: LIST
25012: LIST
25013: PUSH
25014: LD_INT 3
25016: NEG
25017: PUSH
25018: LD_INT 3
25020: NEG
25021: PUSH
25022: EMPTY
25023: LIST
25024: LIST
25025: PUSH
25026: EMPTY
25027: LIST
25028: LIST
25029: LIST
25030: LIST
25031: LIST
25032: LIST
25033: LIST
25034: LIST
25035: LIST
25036: LIST
25037: LIST
25038: LIST
25039: LIST
25040: LIST
25041: LIST
25042: LIST
25043: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
25044: LD_ADDR_VAR 0 14
25048: PUSH
25049: LD_INT 0
25051: PUSH
25052: LD_INT 0
25054: PUSH
25055: EMPTY
25056: LIST
25057: LIST
25058: PUSH
25059: LD_INT 0
25061: PUSH
25062: LD_INT 1
25064: NEG
25065: PUSH
25066: EMPTY
25067: LIST
25068: LIST
25069: PUSH
25070: LD_INT 1
25072: PUSH
25073: LD_INT 0
25075: PUSH
25076: EMPTY
25077: LIST
25078: LIST
25079: PUSH
25080: LD_INT 1
25082: PUSH
25083: LD_INT 1
25085: PUSH
25086: EMPTY
25087: LIST
25088: LIST
25089: PUSH
25090: LD_INT 0
25092: PUSH
25093: LD_INT 1
25095: PUSH
25096: EMPTY
25097: LIST
25098: LIST
25099: PUSH
25100: LD_INT 1
25102: NEG
25103: PUSH
25104: LD_INT 0
25106: PUSH
25107: EMPTY
25108: LIST
25109: LIST
25110: PUSH
25111: LD_INT 1
25113: NEG
25114: PUSH
25115: LD_INT 1
25117: NEG
25118: PUSH
25119: EMPTY
25120: LIST
25121: LIST
25122: PUSH
25123: LD_INT 1
25125: NEG
25126: PUSH
25127: LD_INT 2
25129: NEG
25130: PUSH
25131: EMPTY
25132: LIST
25133: LIST
25134: PUSH
25135: LD_INT 0
25137: PUSH
25138: LD_INT 2
25140: NEG
25141: PUSH
25142: EMPTY
25143: LIST
25144: LIST
25145: PUSH
25146: LD_INT 1
25148: PUSH
25149: LD_INT 1
25151: NEG
25152: PUSH
25153: EMPTY
25154: LIST
25155: LIST
25156: PUSH
25157: LD_INT 1
25159: PUSH
25160: LD_INT 2
25162: PUSH
25163: EMPTY
25164: LIST
25165: LIST
25166: PUSH
25167: LD_INT 0
25169: PUSH
25170: LD_INT 2
25172: PUSH
25173: EMPTY
25174: LIST
25175: LIST
25176: PUSH
25177: LD_INT 1
25179: NEG
25180: PUSH
25181: LD_INT 1
25183: PUSH
25184: EMPTY
25185: LIST
25186: LIST
25187: PUSH
25188: LD_INT 1
25190: NEG
25191: PUSH
25192: LD_INT 3
25194: NEG
25195: PUSH
25196: EMPTY
25197: LIST
25198: LIST
25199: PUSH
25200: LD_INT 0
25202: PUSH
25203: LD_INT 3
25205: NEG
25206: PUSH
25207: EMPTY
25208: LIST
25209: LIST
25210: PUSH
25211: LD_INT 1
25213: PUSH
25214: LD_INT 2
25216: NEG
25217: PUSH
25218: EMPTY
25219: LIST
25220: LIST
25221: PUSH
25222: EMPTY
25223: LIST
25224: LIST
25225: LIST
25226: LIST
25227: LIST
25228: LIST
25229: LIST
25230: LIST
25231: LIST
25232: LIST
25233: LIST
25234: LIST
25235: LIST
25236: LIST
25237: LIST
25238: LIST
25239: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
25240: LD_ADDR_VAR 0 15
25244: PUSH
25245: LD_INT 0
25247: PUSH
25248: LD_INT 0
25250: PUSH
25251: EMPTY
25252: LIST
25253: LIST
25254: PUSH
25255: LD_INT 0
25257: PUSH
25258: LD_INT 1
25260: NEG
25261: PUSH
25262: EMPTY
25263: LIST
25264: LIST
25265: PUSH
25266: LD_INT 1
25268: PUSH
25269: LD_INT 0
25271: PUSH
25272: EMPTY
25273: LIST
25274: LIST
25275: PUSH
25276: LD_INT 1
25278: PUSH
25279: LD_INT 1
25281: PUSH
25282: EMPTY
25283: LIST
25284: LIST
25285: PUSH
25286: LD_INT 0
25288: PUSH
25289: LD_INT 1
25291: PUSH
25292: EMPTY
25293: LIST
25294: LIST
25295: PUSH
25296: LD_INT 1
25298: NEG
25299: PUSH
25300: LD_INT 0
25302: PUSH
25303: EMPTY
25304: LIST
25305: LIST
25306: PUSH
25307: LD_INT 1
25309: NEG
25310: PUSH
25311: LD_INT 1
25313: NEG
25314: PUSH
25315: EMPTY
25316: LIST
25317: LIST
25318: PUSH
25319: LD_INT 1
25321: PUSH
25322: LD_INT 1
25324: NEG
25325: PUSH
25326: EMPTY
25327: LIST
25328: LIST
25329: PUSH
25330: LD_INT 2
25332: PUSH
25333: LD_INT 0
25335: PUSH
25336: EMPTY
25337: LIST
25338: LIST
25339: PUSH
25340: LD_INT 2
25342: PUSH
25343: LD_INT 1
25345: PUSH
25346: EMPTY
25347: LIST
25348: LIST
25349: PUSH
25350: LD_INT 1
25352: NEG
25353: PUSH
25354: LD_INT 1
25356: PUSH
25357: EMPTY
25358: LIST
25359: LIST
25360: PUSH
25361: LD_INT 2
25363: NEG
25364: PUSH
25365: LD_INT 0
25367: PUSH
25368: EMPTY
25369: LIST
25370: LIST
25371: PUSH
25372: LD_INT 2
25374: NEG
25375: PUSH
25376: LD_INT 1
25378: NEG
25379: PUSH
25380: EMPTY
25381: LIST
25382: LIST
25383: PUSH
25384: LD_INT 2
25386: PUSH
25387: LD_INT 1
25389: NEG
25390: PUSH
25391: EMPTY
25392: LIST
25393: LIST
25394: PUSH
25395: LD_INT 3
25397: PUSH
25398: LD_INT 0
25400: PUSH
25401: EMPTY
25402: LIST
25403: LIST
25404: PUSH
25405: LD_INT 3
25407: PUSH
25408: LD_INT 1
25410: PUSH
25411: EMPTY
25412: LIST
25413: LIST
25414: PUSH
25415: EMPTY
25416: LIST
25417: LIST
25418: LIST
25419: LIST
25420: LIST
25421: LIST
25422: LIST
25423: LIST
25424: LIST
25425: LIST
25426: LIST
25427: LIST
25428: LIST
25429: LIST
25430: LIST
25431: LIST
25432: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
25433: LD_ADDR_VAR 0 16
25437: PUSH
25438: LD_INT 0
25440: PUSH
25441: LD_INT 0
25443: PUSH
25444: EMPTY
25445: LIST
25446: LIST
25447: PUSH
25448: LD_INT 0
25450: PUSH
25451: LD_INT 1
25453: NEG
25454: PUSH
25455: EMPTY
25456: LIST
25457: LIST
25458: PUSH
25459: LD_INT 1
25461: PUSH
25462: LD_INT 0
25464: PUSH
25465: EMPTY
25466: LIST
25467: LIST
25468: PUSH
25469: LD_INT 1
25471: PUSH
25472: LD_INT 1
25474: PUSH
25475: EMPTY
25476: LIST
25477: LIST
25478: PUSH
25479: LD_INT 0
25481: PUSH
25482: LD_INT 1
25484: PUSH
25485: EMPTY
25486: LIST
25487: LIST
25488: PUSH
25489: LD_INT 1
25491: NEG
25492: PUSH
25493: LD_INT 0
25495: PUSH
25496: EMPTY
25497: LIST
25498: LIST
25499: PUSH
25500: LD_INT 1
25502: NEG
25503: PUSH
25504: LD_INT 1
25506: NEG
25507: PUSH
25508: EMPTY
25509: LIST
25510: LIST
25511: PUSH
25512: LD_INT 1
25514: NEG
25515: PUSH
25516: LD_INT 2
25518: NEG
25519: PUSH
25520: EMPTY
25521: LIST
25522: LIST
25523: PUSH
25524: LD_INT 2
25526: PUSH
25527: LD_INT 1
25529: PUSH
25530: EMPTY
25531: LIST
25532: LIST
25533: PUSH
25534: LD_INT 2
25536: PUSH
25537: LD_INT 2
25539: PUSH
25540: EMPTY
25541: LIST
25542: LIST
25543: PUSH
25544: LD_INT 1
25546: PUSH
25547: LD_INT 2
25549: PUSH
25550: EMPTY
25551: LIST
25552: LIST
25553: PUSH
25554: LD_INT 2
25556: NEG
25557: PUSH
25558: LD_INT 1
25560: NEG
25561: PUSH
25562: EMPTY
25563: LIST
25564: LIST
25565: PUSH
25566: LD_INT 2
25568: NEG
25569: PUSH
25570: LD_INT 2
25572: NEG
25573: PUSH
25574: EMPTY
25575: LIST
25576: LIST
25577: PUSH
25578: LD_INT 3
25580: PUSH
25581: LD_INT 2
25583: PUSH
25584: EMPTY
25585: LIST
25586: LIST
25587: PUSH
25588: LD_INT 3
25590: PUSH
25591: LD_INT 3
25593: PUSH
25594: EMPTY
25595: LIST
25596: LIST
25597: PUSH
25598: LD_INT 2
25600: PUSH
25601: LD_INT 3
25603: PUSH
25604: EMPTY
25605: LIST
25606: LIST
25607: PUSH
25608: EMPTY
25609: LIST
25610: LIST
25611: LIST
25612: LIST
25613: LIST
25614: LIST
25615: LIST
25616: LIST
25617: LIST
25618: LIST
25619: LIST
25620: LIST
25621: LIST
25622: LIST
25623: LIST
25624: LIST
25625: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25626: LD_ADDR_VAR 0 17
25630: PUSH
25631: LD_INT 0
25633: PUSH
25634: LD_INT 0
25636: PUSH
25637: EMPTY
25638: LIST
25639: LIST
25640: PUSH
25641: LD_INT 0
25643: PUSH
25644: LD_INT 1
25646: NEG
25647: PUSH
25648: EMPTY
25649: LIST
25650: LIST
25651: PUSH
25652: LD_INT 1
25654: PUSH
25655: LD_INT 0
25657: PUSH
25658: EMPTY
25659: LIST
25660: LIST
25661: PUSH
25662: LD_INT 1
25664: PUSH
25665: LD_INT 1
25667: PUSH
25668: EMPTY
25669: LIST
25670: LIST
25671: PUSH
25672: LD_INT 0
25674: PUSH
25675: LD_INT 1
25677: PUSH
25678: EMPTY
25679: LIST
25680: LIST
25681: PUSH
25682: LD_INT 1
25684: NEG
25685: PUSH
25686: LD_INT 0
25688: PUSH
25689: EMPTY
25690: LIST
25691: LIST
25692: PUSH
25693: LD_INT 1
25695: NEG
25696: PUSH
25697: LD_INT 1
25699: NEG
25700: PUSH
25701: EMPTY
25702: LIST
25703: LIST
25704: PUSH
25705: LD_INT 1
25707: NEG
25708: PUSH
25709: LD_INT 2
25711: NEG
25712: PUSH
25713: EMPTY
25714: LIST
25715: LIST
25716: PUSH
25717: LD_INT 0
25719: PUSH
25720: LD_INT 2
25722: NEG
25723: PUSH
25724: EMPTY
25725: LIST
25726: LIST
25727: PUSH
25728: LD_INT 1
25730: PUSH
25731: LD_INT 1
25733: NEG
25734: PUSH
25735: EMPTY
25736: LIST
25737: LIST
25738: PUSH
25739: LD_INT 2
25741: PUSH
25742: LD_INT 0
25744: PUSH
25745: EMPTY
25746: LIST
25747: LIST
25748: PUSH
25749: LD_INT 2
25751: PUSH
25752: LD_INT 1
25754: PUSH
25755: EMPTY
25756: LIST
25757: LIST
25758: PUSH
25759: LD_INT 2
25761: PUSH
25762: LD_INT 2
25764: PUSH
25765: EMPTY
25766: LIST
25767: LIST
25768: PUSH
25769: LD_INT 1
25771: PUSH
25772: LD_INT 2
25774: PUSH
25775: EMPTY
25776: LIST
25777: LIST
25778: PUSH
25779: LD_INT 0
25781: PUSH
25782: LD_INT 2
25784: PUSH
25785: EMPTY
25786: LIST
25787: LIST
25788: PUSH
25789: LD_INT 1
25791: NEG
25792: PUSH
25793: LD_INT 1
25795: PUSH
25796: EMPTY
25797: LIST
25798: LIST
25799: PUSH
25800: LD_INT 2
25802: NEG
25803: PUSH
25804: LD_INT 0
25806: PUSH
25807: EMPTY
25808: LIST
25809: LIST
25810: PUSH
25811: LD_INT 2
25813: NEG
25814: PUSH
25815: LD_INT 1
25817: NEG
25818: PUSH
25819: EMPTY
25820: LIST
25821: LIST
25822: PUSH
25823: LD_INT 2
25825: NEG
25826: PUSH
25827: LD_INT 2
25829: NEG
25830: PUSH
25831: EMPTY
25832: LIST
25833: LIST
25834: PUSH
25835: EMPTY
25836: LIST
25837: LIST
25838: LIST
25839: LIST
25840: LIST
25841: LIST
25842: LIST
25843: LIST
25844: LIST
25845: LIST
25846: LIST
25847: LIST
25848: LIST
25849: LIST
25850: LIST
25851: LIST
25852: LIST
25853: LIST
25854: LIST
25855: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25856: LD_ADDR_VAR 0 18
25860: PUSH
25861: LD_INT 0
25863: PUSH
25864: LD_INT 0
25866: PUSH
25867: EMPTY
25868: LIST
25869: LIST
25870: PUSH
25871: LD_INT 0
25873: PUSH
25874: LD_INT 1
25876: NEG
25877: PUSH
25878: EMPTY
25879: LIST
25880: LIST
25881: PUSH
25882: LD_INT 1
25884: PUSH
25885: LD_INT 0
25887: PUSH
25888: EMPTY
25889: LIST
25890: LIST
25891: PUSH
25892: LD_INT 1
25894: PUSH
25895: LD_INT 1
25897: PUSH
25898: EMPTY
25899: LIST
25900: LIST
25901: PUSH
25902: LD_INT 0
25904: PUSH
25905: LD_INT 1
25907: PUSH
25908: EMPTY
25909: LIST
25910: LIST
25911: PUSH
25912: LD_INT 1
25914: NEG
25915: PUSH
25916: LD_INT 0
25918: PUSH
25919: EMPTY
25920: LIST
25921: LIST
25922: PUSH
25923: LD_INT 1
25925: NEG
25926: PUSH
25927: LD_INT 1
25929: NEG
25930: PUSH
25931: EMPTY
25932: LIST
25933: LIST
25934: PUSH
25935: LD_INT 1
25937: NEG
25938: PUSH
25939: LD_INT 2
25941: NEG
25942: PUSH
25943: EMPTY
25944: LIST
25945: LIST
25946: PUSH
25947: LD_INT 0
25949: PUSH
25950: LD_INT 2
25952: NEG
25953: PUSH
25954: EMPTY
25955: LIST
25956: LIST
25957: PUSH
25958: LD_INT 1
25960: PUSH
25961: LD_INT 1
25963: NEG
25964: PUSH
25965: EMPTY
25966: LIST
25967: LIST
25968: PUSH
25969: LD_INT 2
25971: PUSH
25972: LD_INT 0
25974: PUSH
25975: EMPTY
25976: LIST
25977: LIST
25978: PUSH
25979: LD_INT 2
25981: PUSH
25982: LD_INT 1
25984: PUSH
25985: EMPTY
25986: LIST
25987: LIST
25988: PUSH
25989: LD_INT 2
25991: PUSH
25992: LD_INT 2
25994: PUSH
25995: EMPTY
25996: LIST
25997: LIST
25998: PUSH
25999: LD_INT 1
26001: PUSH
26002: LD_INT 2
26004: PUSH
26005: EMPTY
26006: LIST
26007: LIST
26008: PUSH
26009: LD_INT 0
26011: PUSH
26012: LD_INT 2
26014: PUSH
26015: EMPTY
26016: LIST
26017: LIST
26018: PUSH
26019: LD_INT 1
26021: NEG
26022: PUSH
26023: LD_INT 1
26025: PUSH
26026: EMPTY
26027: LIST
26028: LIST
26029: PUSH
26030: LD_INT 2
26032: NEG
26033: PUSH
26034: LD_INT 0
26036: PUSH
26037: EMPTY
26038: LIST
26039: LIST
26040: PUSH
26041: LD_INT 2
26043: NEG
26044: PUSH
26045: LD_INT 1
26047: NEG
26048: PUSH
26049: EMPTY
26050: LIST
26051: LIST
26052: PUSH
26053: LD_INT 2
26055: NEG
26056: PUSH
26057: LD_INT 2
26059: NEG
26060: PUSH
26061: EMPTY
26062: LIST
26063: LIST
26064: PUSH
26065: EMPTY
26066: LIST
26067: LIST
26068: LIST
26069: LIST
26070: LIST
26071: LIST
26072: LIST
26073: LIST
26074: LIST
26075: LIST
26076: LIST
26077: LIST
26078: LIST
26079: LIST
26080: LIST
26081: LIST
26082: LIST
26083: LIST
26084: LIST
26085: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26086: LD_ADDR_VAR 0 19
26090: PUSH
26091: LD_INT 0
26093: PUSH
26094: LD_INT 0
26096: PUSH
26097: EMPTY
26098: LIST
26099: LIST
26100: PUSH
26101: LD_INT 0
26103: PUSH
26104: LD_INT 1
26106: NEG
26107: PUSH
26108: EMPTY
26109: LIST
26110: LIST
26111: PUSH
26112: LD_INT 1
26114: PUSH
26115: LD_INT 0
26117: PUSH
26118: EMPTY
26119: LIST
26120: LIST
26121: PUSH
26122: LD_INT 1
26124: PUSH
26125: LD_INT 1
26127: PUSH
26128: EMPTY
26129: LIST
26130: LIST
26131: PUSH
26132: LD_INT 0
26134: PUSH
26135: LD_INT 1
26137: PUSH
26138: EMPTY
26139: LIST
26140: LIST
26141: PUSH
26142: LD_INT 1
26144: NEG
26145: PUSH
26146: LD_INT 0
26148: PUSH
26149: EMPTY
26150: LIST
26151: LIST
26152: PUSH
26153: LD_INT 1
26155: NEG
26156: PUSH
26157: LD_INT 1
26159: NEG
26160: PUSH
26161: EMPTY
26162: LIST
26163: LIST
26164: PUSH
26165: LD_INT 1
26167: NEG
26168: PUSH
26169: LD_INT 2
26171: NEG
26172: PUSH
26173: EMPTY
26174: LIST
26175: LIST
26176: PUSH
26177: LD_INT 0
26179: PUSH
26180: LD_INT 2
26182: NEG
26183: PUSH
26184: EMPTY
26185: LIST
26186: LIST
26187: PUSH
26188: LD_INT 1
26190: PUSH
26191: LD_INT 1
26193: NEG
26194: PUSH
26195: EMPTY
26196: LIST
26197: LIST
26198: PUSH
26199: LD_INT 2
26201: PUSH
26202: LD_INT 0
26204: PUSH
26205: EMPTY
26206: LIST
26207: LIST
26208: PUSH
26209: LD_INT 2
26211: PUSH
26212: LD_INT 1
26214: PUSH
26215: EMPTY
26216: LIST
26217: LIST
26218: PUSH
26219: LD_INT 2
26221: PUSH
26222: LD_INT 2
26224: PUSH
26225: EMPTY
26226: LIST
26227: LIST
26228: PUSH
26229: LD_INT 1
26231: PUSH
26232: LD_INT 2
26234: PUSH
26235: EMPTY
26236: LIST
26237: LIST
26238: PUSH
26239: LD_INT 0
26241: PUSH
26242: LD_INT 2
26244: PUSH
26245: EMPTY
26246: LIST
26247: LIST
26248: PUSH
26249: LD_INT 1
26251: NEG
26252: PUSH
26253: LD_INT 1
26255: PUSH
26256: EMPTY
26257: LIST
26258: LIST
26259: PUSH
26260: LD_INT 2
26262: NEG
26263: PUSH
26264: LD_INT 0
26266: PUSH
26267: EMPTY
26268: LIST
26269: LIST
26270: PUSH
26271: LD_INT 2
26273: NEG
26274: PUSH
26275: LD_INT 1
26277: NEG
26278: PUSH
26279: EMPTY
26280: LIST
26281: LIST
26282: PUSH
26283: LD_INT 2
26285: NEG
26286: PUSH
26287: LD_INT 2
26289: NEG
26290: PUSH
26291: EMPTY
26292: LIST
26293: LIST
26294: PUSH
26295: EMPTY
26296: LIST
26297: LIST
26298: LIST
26299: LIST
26300: LIST
26301: LIST
26302: LIST
26303: LIST
26304: LIST
26305: LIST
26306: LIST
26307: LIST
26308: LIST
26309: LIST
26310: LIST
26311: LIST
26312: LIST
26313: LIST
26314: LIST
26315: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26316: LD_ADDR_VAR 0 20
26320: PUSH
26321: LD_INT 0
26323: PUSH
26324: LD_INT 0
26326: PUSH
26327: EMPTY
26328: LIST
26329: LIST
26330: PUSH
26331: LD_INT 0
26333: PUSH
26334: LD_INT 1
26336: NEG
26337: PUSH
26338: EMPTY
26339: LIST
26340: LIST
26341: PUSH
26342: LD_INT 1
26344: PUSH
26345: LD_INT 0
26347: PUSH
26348: EMPTY
26349: LIST
26350: LIST
26351: PUSH
26352: LD_INT 1
26354: PUSH
26355: LD_INT 1
26357: PUSH
26358: EMPTY
26359: LIST
26360: LIST
26361: PUSH
26362: LD_INT 0
26364: PUSH
26365: LD_INT 1
26367: PUSH
26368: EMPTY
26369: LIST
26370: LIST
26371: PUSH
26372: LD_INT 1
26374: NEG
26375: PUSH
26376: LD_INT 0
26378: PUSH
26379: EMPTY
26380: LIST
26381: LIST
26382: PUSH
26383: LD_INT 1
26385: NEG
26386: PUSH
26387: LD_INT 1
26389: NEG
26390: PUSH
26391: EMPTY
26392: LIST
26393: LIST
26394: PUSH
26395: LD_INT 1
26397: NEG
26398: PUSH
26399: LD_INT 2
26401: NEG
26402: PUSH
26403: EMPTY
26404: LIST
26405: LIST
26406: PUSH
26407: LD_INT 0
26409: PUSH
26410: LD_INT 2
26412: NEG
26413: PUSH
26414: EMPTY
26415: LIST
26416: LIST
26417: PUSH
26418: LD_INT 1
26420: PUSH
26421: LD_INT 1
26423: NEG
26424: PUSH
26425: EMPTY
26426: LIST
26427: LIST
26428: PUSH
26429: LD_INT 2
26431: PUSH
26432: LD_INT 0
26434: PUSH
26435: EMPTY
26436: LIST
26437: LIST
26438: PUSH
26439: LD_INT 2
26441: PUSH
26442: LD_INT 1
26444: PUSH
26445: EMPTY
26446: LIST
26447: LIST
26448: PUSH
26449: LD_INT 2
26451: PUSH
26452: LD_INT 2
26454: PUSH
26455: EMPTY
26456: LIST
26457: LIST
26458: PUSH
26459: LD_INT 1
26461: PUSH
26462: LD_INT 2
26464: PUSH
26465: EMPTY
26466: LIST
26467: LIST
26468: PUSH
26469: LD_INT 0
26471: PUSH
26472: LD_INT 2
26474: PUSH
26475: EMPTY
26476: LIST
26477: LIST
26478: PUSH
26479: LD_INT 1
26481: NEG
26482: PUSH
26483: LD_INT 1
26485: PUSH
26486: EMPTY
26487: LIST
26488: LIST
26489: PUSH
26490: LD_INT 2
26492: NEG
26493: PUSH
26494: LD_INT 0
26496: PUSH
26497: EMPTY
26498: LIST
26499: LIST
26500: PUSH
26501: LD_INT 2
26503: NEG
26504: PUSH
26505: LD_INT 1
26507: NEG
26508: PUSH
26509: EMPTY
26510: LIST
26511: LIST
26512: PUSH
26513: LD_INT 2
26515: NEG
26516: PUSH
26517: LD_INT 2
26519: NEG
26520: PUSH
26521: EMPTY
26522: LIST
26523: LIST
26524: PUSH
26525: EMPTY
26526: LIST
26527: LIST
26528: LIST
26529: LIST
26530: LIST
26531: LIST
26532: LIST
26533: LIST
26534: LIST
26535: LIST
26536: LIST
26537: LIST
26538: LIST
26539: LIST
26540: LIST
26541: LIST
26542: LIST
26543: LIST
26544: LIST
26545: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26546: LD_ADDR_VAR 0 21
26550: PUSH
26551: LD_INT 0
26553: PUSH
26554: LD_INT 0
26556: PUSH
26557: EMPTY
26558: LIST
26559: LIST
26560: PUSH
26561: LD_INT 0
26563: PUSH
26564: LD_INT 1
26566: NEG
26567: PUSH
26568: EMPTY
26569: LIST
26570: LIST
26571: PUSH
26572: LD_INT 1
26574: PUSH
26575: LD_INT 0
26577: PUSH
26578: EMPTY
26579: LIST
26580: LIST
26581: PUSH
26582: LD_INT 1
26584: PUSH
26585: LD_INT 1
26587: PUSH
26588: EMPTY
26589: LIST
26590: LIST
26591: PUSH
26592: LD_INT 0
26594: PUSH
26595: LD_INT 1
26597: PUSH
26598: EMPTY
26599: LIST
26600: LIST
26601: PUSH
26602: LD_INT 1
26604: NEG
26605: PUSH
26606: LD_INT 0
26608: PUSH
26609: EMPTY
26610: LIST
26611: LIST
26612: PUSH
26613: LD_INT 1
26615: NEG
26616: PUSH
26617: LD_INT 1
26619: NEG
26620: PUSH
26621: EMPTY
26622: LIST
26623: LIST
26624: PUSH
26625: LD_INT 1
26627: NEG
26628: PUSH
26629: LD_INT 2
26631: NEG
26632: PUSH
26633: EMPTY
26634: LIST
26635: LIST
26636: PUSH
26637: LD_INT 0
26639: PUSH
26640: LD_INT 2
26642: NEG
26643: PUSH
26644: EMPTY
26645: LIST
26646: LIST
26647: PUSH
26648: LD_INT 1
26650: PUSH
26651: LD_INT 1
26653: NEG
26654: PUSH
26655: EMPTY
26656: LIST
26657: LIST
26658: PUSH
26659: LD_INT 2
26661: PUSH
26662: LD_INT 0
26664: PUSH
26665: EMPTY
26666: LIST
26667: LIST
26668: PUSH
26669: LD_INT 2
26671: PUSH
26672: LD_INT 1
26674: PUSH
26675: EMPTY
26676: LIST
26677: LIST
26678: PUSH
26679: LD_INT 2
26681: PUSH
26682: LD_INT 2
26684: PUSH
26685: EMPTY
26686: LIST
26687: LIST
26688: PUSH
26689: LD_INT 1
26691: PUSH
26692: LD_INT 2
26694: PUSH
26695: EMPTY
26696: LIST
26697: LIST
26698: PUSH
26699: LD_INT 0
26701: PUSH
26702: LD_INT 2
26704: PUSH
26705: EMPTY
26706: LIST
26707: LIST
26708: PUSH
26709: LD_INT 1
26711: NEG
26712: PUSH
26713: LD_INT 1
26715: PUSH
26716: EMPTY
26717: LIST
26718: LIST
26719: PUSH
26720: LD_INT 2
26722: NEG
26723: PUSH
26724: LD_INT 0
26726: PUSH
26727: EMPTY
26728: LIST
26729: LIST
26730: PUSH
26731: LD_INT 2
26733: NEG
26734: PUSH
26735: LD_INT 1
26737: NEG
26738: PUSH
26739: EMPTY
26740: LIST
26741: LIST
26742: PUSH
26743: LD_INT 2
26745: NEG
26746: PUSH
26747: LD_INT 2
26749: NEG
26750: PUSH
26751: EMPTY
26752: LIST
26753: LIST
26754: PUSH
26755: EMPTY
26756: LIST
26757: LIST
26758: LIST
26759: LIST
26760: LIST
26761: LIST
26762: LIST
26763: LIST
26764: LIST
26765: LIST
26766: LIST
26767: LIST
26768: LIST
26769: LIST
26770: LIST
26771: LIST
26772: LIST
26773: LIST
26774: LIST
26775: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26776: LD_ADDR_VAR 0 22
26780: PUSH
26781: LD_INT 0
26783: PUSH
26784: LD_INT 0
26786: PUSH
26787: EMPTY
26788: LIST
26789: LIST
26790: PUSH
26791: LD_INT 0
26793: PUSH
26794: LD_INT 1
26796: NEG
26797: PUSH
26798: EMPTY
26799: LIST
26800: LIST
26801: PUSH
26802: LD_INT 1
26804: PUSH
26805: LD_INT 0
26807: PUSH
26808: EMPTY
26809: LIST
26810: LIST
26811: PUSH
26812: LD_INT 1
26814: PUSH
26815: LD_INT 1
26817: PUSH
26818: EMPTY
26819: LIST
26820: LIST
26821: PUSH
26822: LD_INT 0
26824: PUSH
26825: LD_INT 1
26827: PUSH
26828: EMPTY
26829: LIST
26830: LIST
26831: PUSH
26832: LD_INT 1
26834: NEG
26835: PUSH
26836: LD_INT 0
26838: PUSH
26839: EMPTY
26840: LIST
26841: LIST
26842: PUSH
26843: LD_INT 1
26845: NEG
26846: PUSH
26847: LD_INT 1
26849: NEG
26850: PUSH
26851: EMPTY
26852: LIST
26853: LIST
26854: PUSH
26855: LD_INT 1
26857: NEG
26858: PUSH
26859: LD_INT 2
26861: NEG
26862: PUSH
26863: EMPTY
26864: LIST
26865: LIST
26866: PUSH
26867: LD_INT 0
26869: PUSH
26870: LD_INT 2
26872: NEG
26873: PUSH
26874: EMPTY
26875: LIST
26876: LIST
26877: PUSH
26878: LD_INT 1
26880: PUSH
26881: LD_INT 1
26883: NEG
26884: PUSH
26885: EMPTY
26886: LIST
26887: LIST
26888: PUSH
26889: LD_INT 2
26891: PUSH
26892: LD_INT 0
26894: PUSH
26895: EMPTY
26896: LIST
26897: LIST
26898: PUSH
26899: LD_INT 2
26901: PUSH
26902: LD_INT 1
26904: PUSH
26905: EMPTY
26906: LIST
26907: LIST
26908: PUSH
26909: LD_INT 2
26911: PUSH
26912: LD_INT 2
26914: PUSH
26915: EMPTY
26916: LIST
26917: LIST
26918: PUSH
26919: LD_INT 1
26921: PUSH
26922: LD_INT 2
26924: PUSH
26925: EMPTY
26926: LIST
26927: LIST
26928: PUSH
26929: LD_INT 0
26931: PUSH
26932: LD_INT 2
26934: PUSH
26935: EMPTY
26936: LIST
26937: LIST
26938: PUSH
26939: LD_INT 1
26941: NEG
26942: PUSH
26943: LD_INT 1
26945: PUSH
26946: EMPTY
26947: LIST
26948: LIST
26949: PUSH
26950: LD_INT 2
26952: NEG
26953: PUSH
26954: LD_INT 0
26956: PUSH
26957: EMPTY
26958: LIST
26959: LIST
26960: PUSH
26961: LD_INT 2
26963: NEG
26964: PUSH
26965: LD_INT 1
26967: NEG
26968: PUSH
26969: EMPTY
26970: LIST
26971: LIST
26972: PUSH
26973: LD_INT 2
26975: NEG
26976: PUSH
26977: LD_INT 2
26979: NEG
26980: PUSH
26981: EMPTY
26982: LIST
26983: LIST
26984: PUSH
26985: EMPTY
26986: LIST
26987: LIST
26988: LIST
26989: LIST
26990: LIST
26991: LIST
26992: LIST
26993: LIST
26994: LIST
26995: LIST
26996: LIST
26997: LIST
26998: LIST
26999: LIST
27000: LIST
27001: LIST
27002: LIST
27003: LIST
27004: LIST
27005: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
27006: LD_ADDR_VAR 0 23
27010: PUSH
27011: LD_INT 0
27013: PUSH
27014: LD_INT 0
27016: PUSH
27017: EMPTY
27018: LIST
27019: LIST
27020: PUSH
27021: LD_INT 0
27023: PUSH
27024: LD_INT 1
27026: NEG
27027: PUSH
27028: EMPTY
27029: LIST
27030: LIST
27031: PUSH
27032: LD_INT 1
27034: PUSH
27035: LD_INT 0
27037: PUSH
27038: EMPTY
27039: LIST
27040: LIST
27041: PUSH
27042: LD_INT 1
27044: PUSH
27045: LD_INT 1
27047: PUSH
27048: EMPTY
27049: LIST
27050: LIST
27051: PUSH
27052: LD_INT 0
27054: PUSH
27055: LD_INT 1
27057: PUSH
27058: EMPTY
27059: LIST
27060: LIST
27061: PUSH
27062: LD_INT 1
27064: NEG
27065: PUSH
27066: LD_INT 0
27068: PUSH
27069: EMPTY
27070: LIST
27071: LIST
27072: PUSH
27073: LD_INT 1
27075: NEG
27076: PUSH
27077: LD_INT 1
27079: NEG
27080: PUSH
27081: EMPTY
27082: LIST
27083: LIST
27084: PUSH
27085: LD_INT 1
27087: NEG
27088: PUSH
27089: LD_INT 2
27091: NEG
27092: PUSH
27093: EMPTY
27094: LIST
27095: LIST
27096: PUSH
27097: LD_INT 0
27099: PUSH
27100: LD_INT 2
27102: NEG
27103: PUSH
27104: EMPTY
27105: LIST
27106: LIST
27107: PUSH
27108: LD_INT 1
27110: PUSH
27111: LD_INT 1
27113: NEG
27114: PUSH
27115: EMPTY
27116: LIST
27117: LIST
27118: PUSH
27119: LD_INT 2
27121: PUSH
27122: LD_INT 0
27124: PUSH
27125: EMPTY
27126: LIST
27127: LIST
27128: PUSH
27129: LD_INT 2
27131: PUSH
27132: LD_INT 1
27134: PUSH
27135: EMPTY
27136: LIST
27137: LIST
27138: PUSH
27139: LD_INT 2
27141: PUSH
27142: LD_INT 2
27144: PUSH
27145: EMPTY
27146: LIST
27147: LIST
27148: PUSH
27149: LD_INT 1
27151: PUSH
27152: LD_INT 2
27154: PUSH
27155: EMPTY
27156: LIST
27157: LIST
27158: PUSH
27159: LD_INT 0
27161: PUSH
27162: LD_INT 2
27164: PUSH
27165: EMPTY
27166: LIST
27167: LIST
27168: PUSH
27169: LD_INT 1
27171: NEG
27172: PUSH
27173: LD_INT 1
27175: PUSH
27176: EMPTY
27177: LIST
27178: LIST
27179: PUSH
27180: LD_INT 2
27182: NEG
27183: PUSH
27184: LD_INT 0
27186: PUSH
27187: EMPTY
27188: LIST
27189: LIST
27190: PUSH
27191: LD_INT 2
27193: NEG
27194: PUSH
27195: LD_INT 1
27197: NEG
27198: PUSH
27199: EMPTY
27200: LIST
27201: LIST
27202: PUSH
27203: LD_INT 2
27205: NEG
27206: PUSH
27207: LD_INT 2
27209: NEG
27210: PUSH
27211: EMPTY
27212: LIST
27213: LIST
27214: PUSH
27215: LD_INT 2
27217: NEG
27218: PUSH
27219: LD_INT 3
27221: NEG
27222: PUSH
27223: EMPTY
27224: LIST
27225: LIST
27226: PUSH
27227: LD_INT 1
27229: NEG
27230: PUSH
27231: LD_INT 3
27233: NEG
27234: PUSH
27235: EMPTY
27236: LIST
27237: LIST
27238: PUSH
27239: LD_INT 1
27241: PUSH
27242: LD_INT 2
27244: NEG
27245: PUSH
27246: EMPTY
27247: LIST
27248: LIST
27249: PUSH
27250: LD_INT 2
27252: PUSH
27253: LD_INT 1
27255: NEG
27256: PUSH
27257: EMPTY
27258: LIST
27259: LIST
27260: PUSH
27261: EMPTY
27262: LIST
27263: LIST
27264: LIST
27265: LIST
27266: LIST
27267: LIST
27268: LIST
27269: LIST
27270: LIST
27271: LIST
27272: LIST
27273: LIST
27274: LIST
27275: LIST
27276: LIST
27277: LIST
27278: LIST
27279: LIST
27280: LIST
27281: LIST
27282: LIST
27283: LIST
27284: LIST
27285: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
27286: LD_ADDR_VAR 0 24
27290: PUSH
27291: LD_INT 0
27293: PUSH
27294: LD_INT 0
27296: PUSH
27297: EMPTY
27298: LIST
27299: LIST
27300: PUSH
27301: LD_INT 0
27303: PUSH
27304: LD_INT 1
27306: NEG
27307: PUSH
27308: EMPTY
27309: LIST
27310: LIST
27311: PUSH
27312: LD_INT 1
27314: PUSH
27315: LD_INT 0
27317: PUSH
27318: EMPTY
27319: LIST
27320: LIST
27321: PUSH
27322: LD_INT 1
27324: PUSH
27325: LD_INT 1
27327: PUSH
27328: EMPTY
27329: LIST
27330: LIST
27331: PUSH
27332: LD_INT 0
27334: PUSH
27335: LD_INT 1
27337: PUSH
27338: EMPTY
27339: LIST
27340: LIST
27341: PUSH
27342: LD_INT 1
27344: NEG
27345: PUSH
27346: LD_INT 0
27348: PUSH
27349: EMPTY
27350: LIST
27351: LIST
27352: PUSH
27353: LD_INT 1
27355: NEG
27356: PUSH
27357: LD_INT 1
27359: NEG
27360: PUSH
27361: EMPTY
27362: LIST
27363: LIST
27364: PUSH
27365: LD_INT 1
27367: NEG
27368: PUSH
27369: LD_INT 2
27371: NEG
27372: PUSH
27373: EMPTY
27374: LIST
27375: LIST
27376: PUSH
27377: LD_INT 0
27379: PUSH
27380: LD_INT 2
27382: NEG
27383: PUSH
27384: EMPTY
27385: LIST
27386: LIST
27387: PUSH
27388: LD_INT 1
27390: PUSH
27391: LD_INT 1
27393: NEG
27394: PUSH
27395: EMPTY
27396: LIST
27397: LIST
27398: PUSH
27399: LD_INT 2
27401: PUSH
27402: LD_INT 0
27404: PUSH
27405: EMPTY
27406: LIST
27407: LIST
27408: PUSH
27409: LD_INT 2
27411: PUSH
27412: LD_INT 1
27414: PUSH
27415: EMPTY
27416: LIST
27417: LIST
27418: PUSH
27419: LD_INT 2
27421: PUSH
27422: LD_INT 2
27424: PUSH
27425: EMPTY
27426: LIST
27427: LIST
27428: PUSH
27429: LD_INT 1
27431: PUSH
27432: LD_INT 2
27434: PUSH
27435: EMPTY
27436: LIST
27437: LIST
27438: PUSH
27439: LD_INT 0
27441: PUSH
27442: LD_INT 2
27444: PUSH
27445: EMPTY
27446: LIST
27447: LIST
27448: PUSH
27449: LD_INT 1
27451: NEG
27452: PUSH
27453: LD_INT 1
27455: PUSH
27456: EMPTY
27457: LIST
27458: LIST
27459: PUSH
27460: LD_INT 2
27462: NEG
27463: PUSH
27464: LD_INT 0
27466: PUSH
27467: EMPTY
27468: LIST
27469: LIST
27470: PUSH
27471: LD_INT 2
27473: NEG
27474: PUSH
27475: LD_INT 1
27477: NEG
27478: PUSH
27479: EMPTY
27480: LIST
27481: LIST
27482: PUSH
27483: LD_INT 2
27485: NEG
27486: PUSH
27487: LD_INT 2
27489: NEG
27490: PUSH
27491: EMPTY
27492: LIST
27493: LIST
27494: PUSH
27495: LD_INT 1
27497: PUSH
27498: LD_INT 2
27500: NEG
27501: PUSH
27502: EMPTY
27503: LIST
27504: LIST
27505: PUSH
27506: LD_INT 2
27508: PUSH
27509: LD_INT 1
27511: NEG
27512: PUSH
27513: EMPTY
27514: LIST
27515: LIST
27516: PUSH
27517: LD_INT 3
27519: PUSH
27520: LD_INT 1
27522: PUSH
27523: EMPTY
27524: LIST
27525: LIST
27526: PUSH
27527: LD_INT 3
27529: PUSH
27530: LD_INT 2
27532: PUSH
27533: EMPTY
27534: LIST
27535: LIST
27536: PUSH
27537: EMPTY
27538: LIST
27539: LIST
27540: LIST
27541: LIST
27542: LIST
27543: LIST
27544: LIST
27545: LIST
27546: LIST
27547: LIST
27548: LIST
27549: LIST
27550: LIST
27551: LIST
27552: LIST
27553: LIST
27554: LIST
27555: LIST
27556: LIST
27557: LIST
27558: LIST
27559: LIST
27560: LIST
27561: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
27562: LD_ADDR_VAR 0 25
27566: PUSH
27567: LD_INT 0
27569: PUSH
27570: LD_INT 0
27572: PUSH
27573: EMPTY
27574: LIST
27575: LIST
27576: PUSH
27577: LD_INT 0
27579: PUSH
27580: LD_INT 1
27582: NEG
27583: PUSH
27584: EMPTY
27585: LIST
27586: LIST
27587: PUSH
27588: LD_INT 1
27590: PUSH
27591: LD_INT 0
27593: PUSH
27594: EMPTY
27595: LIST
27596: LIST
27597: PUSH
27598: LD_INT 1
27600: PUSH
27601: LD_INT 1
27603: PUSH
27604: EMPTY
27605: LIST
27606: LIST
27607: PUSH
27608: LD_INT 0
27610: PUSH
27611: LD_INT 1
27613: PUSH
27614: EMPTY
27615: LIST
27616: LIST
27617: PUSH
27618: LD_INT 1
27620: NEG
27621: PUSH
27622: LD_INT 0
27624: PUSH
27625: EMPTY
27626: LIST
27627: LIST
27628: PUSH
27629: LD_INT 1
27631: NEG
27632: PUSH
27633: LD_INT 1
27635: NEG
27636: PUSH
27637: EMPTY
27638: LIST
27639: LIST
27640: PUSH
27641: LD_INT 1
27643: NEG
27644: PUSH
27645: LD_INT 2
27647: NEG
27648: PUSH
27649: EMPTY
27650: LIST
27651: LIST
27652: PUSH
27653: LD_INT 0
27655: PUSH
27656: LD_INT 2
27658: NEG
27659: PUSH
27660: EMPTY
27661: LIST
27662: LIST
27663: PUSH
27664: LD_INT 1
27666: PUSH
27667: LD_INT 1
27669: NEG
27670: PUSH
27671: EMPTY
27672: LIST
27673: LIST
27674: PUSH
27675: LD_INT 2
27677: PUSH
27678: LD_INT 0
27680: PUSH
27681: EMPTY
27682: LIST
27683: LIST
27684: PUSH
27685: LD_INT 2
27687: PUSH
27688: LD_INT 1
27690: PUSH
27691: EMPTY
27692: LIST
27693: LIST
27694: PUSH
27695: LD_INT 2
27697: PUSH
27698: LD_INT 2
27700: PUSH
27701: EMPTY
27702: LIST
27703: LIST
27704: PUSH
27705: LD_INT 1
27707: PUSH
27708: LD_INT 2
27710: PUSH
27711: EMPTY
27712: LIST
27713: LIST
27714: PUSH
27715: LD_INT 0
27717: PUSH
27718: LD_INT 2
27720: PUSH
27721: EMPTY
27722: LIST
27723: LIST
27724: PUSH
27725: LD_INT 1
27727: NEG
27728: PUSH
27729: LD_INT 1
27731: PUSH
27732: EMPTY
27733: LIST
27734: LIST
27735: PUSH
27736: LD_INT 2
27738: NEG
27739: PUSH
27740: LD_INT 0
27742: PUSH
27743: EMPTY
27744: LIST
27745: LIST
27746: PUSH
27747: LD_INT 2
27749: NEG
27750: PUSH
27751: LD_INT 1
27753: NEG
27754: PUSH
27755: EMPTY
27756: LIST
27757: LIST
27758: PUSH
27759: LD_INT 2
27761: NEG
27762: PUSH
27763: LD_INT 2
27765: NEG
27766: PUSH
27767: EMPTY
27768: LIST
27769: LIST
27770: PUSH
27771: LD_INT 3
27773: PUSH
27774: LD_INT 1
27776: PUSH
27777: EMPTY
27778: LIST
27779: LIST
27780: PUSH
27781: LD_INT 3
27783: PUSH
27784: LD_INT 2
27786: PUSH
27787: EMPTY
27788: LIST
27789: LIST
27790: PUSH
27791: LD_INT 2
27793: PUSH
27794: LD_INT 3
27796: PUSH
27797: EMPTY
27798: LIST
27799: LIST
27800: PUSH
27801: LD_INT 1
27803: PUSH
27804: LD_INT 3
27806: PUSH
27807: EMPTY
27808: LIST
27809: LIST
27810: PUSH
27811: EMPTY
27812: LIST
27813: LIST
27814: LIST
27815: LIST
27816: LIST
27817: LIST
27818: LIST
27819: LIST
27820: LIST
27821: LIST
27822: LIST
27823: LIST
27824: LIST
27825: LIST
27826: LIST
27827: LIST
27828: LIST
27829: LIST
27830: LIST
27831: LIST
27832: LIST
27833: LIST
27834: LIST
27835: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
27836: LD_ADDR_VAR 0 26
27840: PUSH
27841: LD_INT 0
27843: PUSH
27844: LD_INT 0
27846: PUSH
27847: EMPTY
27848: LIST
27849: LIST
27850: PUSH
27851: LD_INT 0
27853: PUSH
27854: LD_INT 1
27856: NEG
27857: PUSH
27858: EMPTY
27859: LIST
27860: LIST
27861: PUSH
27862: LD_INT 1
27864: PUSH
27865: LD_INT 0
27867: PUSH
27868: EMPTY
27869: LIST
27870: LIST
27871: PUSH
27872: LD_INT 1
27874: PUSH
27875: LD_INT 1
27877: PUSH
27878: EMPTY
27879: LIST
27880: LIST
27881: PUSH
27882: LD_INT 0
27884: PUSH
27885: LD_INT 1
27887: PUSH
27888: EMPTY
27889: LIST
27890: LIST
27891: PUSH
27892: LD_INT 1
27894: NEG
27895: PUSH
27896: LD_INT 0
27898: PUSH
27899: EMPTY
27900: LIST
27901: LIST
27902: PUSH
27903: LD_INT 1
27905: NEG
27906: PUSH
27907: LD_INT 1
27909: NEG
27910: PUSH
27911: EMPTY
27912: LIST
27913: LIST
27914: PUSH
27915: LD_INT 1
27917: NEG
27918: PUSH
27919: LD_INT 2
27921: NEG
27922: PUSH
27923: EMPTY
27924: LIST
27925: LIST
27926: PUSH
27927: LD_INT 0
27929: PUSH
27930: LD_INT 2
27932: NEG
27933: PUSH
27934: EMPTY
27935: LIST
27936: LIST
27937: PUSH
27938: LD_INT 1
27940: PUSH
27941: LD_INT 1
27943: NEG
27944: PUSH
27945: EMPTY
27946: LIST
27947: LIST
27948: PUSH
27949: LD_INT 2
27951: PUSH
27952: LD_INT 0
27954: PUSH
27955: EMPTY
27956: LIST
27957: LIST
27958: PUSH
27959: LD_INT 2
27961: PUSH
27962: LD_INT 1
27964: PUSH
27965: EMPTY
27966: LIST
27967: LIST
27968: PUSH
27969: LD_INT 2
27971: PUSH
27972: LD_INT 2
27974: PUSH
27975: EMPTY
27976: LIST
27977: LIST
27978: PUSH
27979: LD_INT 1
27981: PUSH
27982: LD_INT 2
27984: PUSH
27985: EMPTY
27986: LIST
27987: LIST
27988: PUSH
27989: LD_INT 0
27991: PUSH
27992: LD_INT 2
27994: PUSH
27995: EMPTY
27996: LIST
27997: LIST
27998: PUSH
27999: LD_INT 1
28001: NEG
28002: PUSH
28003: LD_INT 1
28005: PUSH
28006: EMPTY
28007: LIST
28008: LIST
28009: PUSH
28010: LD_INT 2
28012: NEG
28013: PUSH
28014: LD_INT 0
28016: PUSH
28017: EMPTY
28018: LIST
28019: LIST
28020: PUSH
28021: LD_INT 2
28023: NEG
28024: PUSH
28025: LD_INT 1
28027: NEG
28028: PUSH
28029: EMPTY
28030: LIST
28031: LIST
28032: PUSH
28033: LD_INT 2
28035: NEG
28036: PUSH
28037: LD_INT 2
28039: NEG
28040: PUSH
28041: EMPTY
28042: LIST
28043: LIST
28044: PUSH
28045: LD_INT 2
28047: PUSH
28048: LD_INT 3
28050: PUSH
28051: EMPTY
28052: LIST
28053: LIST
28054: PUSH
28055: LD_INT 1
28057: PUSH
28058: LD_INT 3
28060: PUSH
28061: EMPTY
28062: LIST
28063: LIST
28064: PUSH
28065: LD_INT 1
28067: NEG
28068: PUSH
28069: LD_INT 2
28071: PUSH
28072: EMPTY
28073: LIST
28074: LIST
28075: PUSH
28076: LD_INT 2
28078: NEG
28079: PUSH
28080: LD_INT 1
28082: PUSH
28083: EMPTY
28084: LIST
28085: LIST
28086: PUSH
28087: EMPTY
28088: LIST
28089: LIST
28090: LIST
28091: LIST
28092: LIST
28093: LIST
28094: LIST
28095: LIST
28096: LIST
28097: LIST
28098: LIST
28099: LIST
28100: LIST
28101: LIST
28102: LIST
28103: LIST
28104: LIST
28105: LIST
28106: LIST
28107: LIST
28108: LIST
28109: LIST
28110: LIST
28111: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
28112: LD_ADDR_VAR 0 27
28116: PUSH
28117: LD_INT 0
28119: PUSH
28120: LD_INT 0
28122: PUSH
28123: EMPTY
28124: LIST
28125: LIST
28126: PUSH
28127: LD_INT 0
28129: PUSH
28130: LD_INT 1
28132: NEG
28133: PUSH
28134: EMPTY
28135: LIST
28136: LIST
28137: PUSH
28138: LD_INT 1
28140: PUSH
28141: LD_INT 0
28143: PUSH
28144: EMPTY
28145: LIST
28146: LIST
28147: PUSH
28148: LD_INT 1
28150: PUSH
28151: LD_INT 1
28153: PUSH
28154: EMPTY
28155: LIST
28156: LIST
28157: PUSH
28158: LD_INT 0
28160: PUSH
28161: LD_INT 1
28163: PUSH
28164: EMPTY
28165: LIST
28166: LIST
28167: PUSH
28168: LD_INT 1
28170: NEG
28171: PUSH
28172: LD_INT 0
28174: PUSH
28175: EMPTY
28176: LIST
28177: LIST
28178: PUSH
28179: LD_INT 1
28181: NEG
28182: PUSH
28183: LD_INT 1
28185: NEG
28186: PUSH
28187: EMPTY
28188: LIST
28189: LIST
28190: PUSH
28191: LD_INT 1
28193: NEG
28194: PUSH
28195: LD_INT 2
28197: NEG
28198: PUSH
28199: EMPTY
28200: LIST
28201: LIST
28202: PUSH
28203: LD_INT 0
28205: PUSH
28206: LD_INT 2
28208: NEG
28209: PUSH
28210: EMPTY
28211: LIST
28212: LIST
28213: PUSH
28214: LD_INT 1
28216: PUSH
28217: LD_INT 1
28219: NEG
28220: PUSH
28221: EMPTY
28222: LIST
28223: LIST
28224: PUSH
28225: LD_INT 2
28227: PUSH
28228: LD_INT 0
28230: PUSH
28231: EMPTY
28232: LIST
28233: LIST
28234: PUSH
28235: LD_INT 2
28237: PUSH
28238: LD_INT 1
28240: PUSH
28241: EMPTY
28242: LIST
28243: LIST
28244: PUSH
28245: LD_INT 2
28247: PUSH
28248: LD_INT 2
28250: PUSH
28251: EMPTY
28252: LIST
28253: LIST
28254: PUSH
28255: LD_INT 1
28257: PUSH
28258: LD_INT 2
28260: PUSH
28261: EMPTY
28262: LIST
28263: LIST
28264: PUSH
28265: LD_INT 0
28267: PUSH
28268: LD_INT 2
28270: PUSH
28271: EMPTY
28272: LIST
28273: LIST
28274: PUSH
28275: LD_INT 1
28277: NEG
28278: PUSH
28279: LD_INT 1
28281: PUSH
28282: EMPTY
28283: LIST
28284: LIST
28285: PUSH
28286: LD_INT 2
28288: NEG
28289: PUSH
28290: LD_INT 0
28292: PUSH
28293: EMPTY
28294: LIST
28295: LIST
28296: PUSH
28297: LD_INT 2
28299: NEG
28300: PUSH
28301: LD_INT 1
28303: NEG
28304: PUSH
28305: EMPTY
28306: LIST
28307: LIST
28308: PUSH
28309: LD_INT 2
28311: NEG
28312: PUSH
28313: LD_INT 2
28315: NEG
28316: PUSH
28317: EMPTY
28318: LIST
28319: LIST
28320: PUSH
28321: LD_INT 1
28323: NEG
28324: PUSH
28325: LD_INT 2
28327: PUSH
28328: EMPTY
28329: LIST
28330: LIST
28331: PUSH
28332: LD_INT 2
28334: NEG
28335: PUSH
28336: LD_INT 1
28338: PUSH
28339: EMPTY
28340: LIST
28341: LIST
28342: PUSH
28343: LD_INT 3
28345: NEG
28346: PUSH
28347: LD_INT 1
28349: NEG
28350: PUSH
28351: EMPTY
28352: LIST
28353: LIST
28354: PUSH
28355: LD_INT 3
28357: NEG
28358: PUSH
28359: LD_INT 2
28361: NEG
28362: PUSH
28363: EMPTY
28364: LIST
28365: LIST
28366: PUSH
28367: EMPTY
28368: LIST
28369: LIST
28370: LIST
28371: LIST
28372: LIST
28373: LIST
28374: LIST
28375: LIST
28376: LIST
28377: LIST
28378: LIST
28379: LIST
28380: LIST
28381: LIST
28382: LIST
28383: LIST
28384: LIST
28385: LIST
28386: LIST
28387: LIST
28388: LIST
28389: LIST
28390: LIST
28391: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
28392: LD_ADDR_VAR 0 28
28396: PUSH
28397: LD_INT 0
28399: PUSH
28400: LD_INT 0
28402: PUSH
28403: EMPTY
28404: LIST
28405: LIST
28406: PUSH
28407: LD_INT 0
28409: PUSH
28410: LD_INT 1
28412: NEG
28413: PUSH
28414: EMPTY
28415: LIST
28416: LIST
28417: PUSH
28418: LD_INT 1
28420: PUSH
28421: LD_INT 0
28423: PUSH
28424: EMPTY
28425: LIST
28426: LIST
28427: PUSH
28428: LD_INT 1
28430: PUSH
28431: LD_INT 1
28433: PUSH
28434: EMPTY
28435: LIST
28436: LIST
28437: PUSH
28438: LD_INT 0
28440: PUSH
28441: LD_INT 1
28443: PUSH
28444: EMPTY
28445: LIST
28446: LIST
28447: PUSH
28448: LD_INT 1
28450: NEG
28451: PUSH
28452: LD_INT 0
28454: PUSH
28455: EMPTY
28456: LIST
28457: LIST
28458: PUSH
28459: LD_INT 1
28461: NEG
28462: PUSH
28463: LD_INT 1
28465: NEG
28466: PUSH
28467: EMPTY
28468: LIST
28469: LIST
28470: PUSH
28471: LD_INT 1
28473: NEG
28474: PUSH
28475: LD_INT 2
28477: NEG
28478: PUSH
28479: EMPTY
28480: LIST
28481: LIST
28482: PUSH
28483: LD_INT 0
28485: PUSH
28486: LD_INT 2
28488: NEG
28489: PUSH
28490: EMPTY
28491: LIST
28492: LIST
28493: PUSH
28494: LD_INT 1
28496: PUSH
28497: LD_INT 1
28499: NEG
28500: PUSH
28501: EMPTY
28502: LIST
28503: LIST
28504: PUSH
28505: LD_INT 2
28507: PUSH
28508: LD_INT 0
28510: PUSH
28511: EMPTY
28512: LIST
28513: LIST
28514: PUSH
28515: LD_INT 2
28517: PUSH
28518: LD_INT 1
28520: PUSH
28521: EMPTY
28522: LIST
28523: LIST
28524: PUSH
28525: LD_INT 2
28527: PUSH
28528: LD_INT 2
28530: PUSH
28531: EMPTY
28532: LIST
28533: LIST
28534: PUSH
28535: LD_INT 1
28537: PUSH
28538: LD_INT 2
28540: PUSH
28541: EMPTY
28542: LIST
28543: LIST
28544: PUSH
28545: LD_INT 0
28547: PUSH
28548: LD_INT 2
28550: PUSH
28551: EMPTY
28552: LIST
28553: LIST
28554: PUSH
28555: LD_INT 1
28557: NEG
28558: PUSH
28559: LD_INT 1
28561: PUSH
28562: EMPTY
28563: LIST
28564: LIST
28565: PUSH
28566: LD_INT 2
28568: NEG
28569: PUSH
28570: LD_INT 0
28572: PUSH
28573: EMPTY
28574: LIST
28575: LIST
28576: PUSH
28577: LD_INT 2
28579: NEG
28580: PUSH
28581: LD_INT 1
28583: NEG
28584: PUSH
28585: EMPTY
28586: LIST
28587: LIST
28588: PUSH
28589: LD_INT 2
28591: NEG
28592: PUSH
28593: LD_INT 2
28595: NEG
28596: PUSH
28597: EMPTY
28598: LIST
28599: LIST
28600: PUSH
28601: LD_INT 2
28603: NEG
28604: PUSH
28605: LD_INT 3
28607: NEG
28608: PUSH
28609: EMPTY
28610: LIST
28611: LIST
28612: PUSH
28613: LD_INT 1
28615: NEG
28616: PUSH
28617: LD_INT 3
28619: NEG
28620: PUSH
28621: EMPTY
28622: LIST
28623: LIST
28624: PUSH
28625: LD_INT 3
28627: NEG
28628: PUSH
28629: LD_INT 1
28631: NEG
28632: PUSH
28633: EMPTY
28634: LIST
28635: LIST
28636: PUSH
28637: LD_INT 3
28639: NEG
28640: PUSH
28641: LD_INT 2
28643: NEG
28644: PUSH
28645: EMPTY
28646: LIST
28647: LIST
28648: PUSH
28649: EMPTY
28650: LIST
28651: LIST
28652: LIST
28653: LIST
28654: LIST
28655: LIST
28656: LIST
28657: LIST
28658: LIST
28659: LIST
28660: LIST
28661: LIST
28662: LIST
28663: LIST
28664: LIST
28665: LIST
28666: LIST
28667: LIST
28668: LIST
28669: LIST
28670: LIST
28671: LIST
28672: LIST
28673: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
28674: LD_ADDR_VAR 0 29
28678: PUSH
28679: LD_INT 0
28681: PUSH
28682: LD_INT 0
28684: PUSH
28685: EMPTY
28686: LIST
28687: LIST
28688: PUSH
28689: LD_INT 0
28691: PUSH
28692: LD_INT 1
28694: NEG
28695: PUSH
28696: EMPTY
28697: LIST
28698: LIST
28699: PUSH
28700: LD_INT 1
28702: PUSH
28703: LD_INT 0
28705: PUSH
28706: EMPTY
28707: LIST
28708: LIST
28709: PUSH
28710: LD_INT 1
28712: PUSH
28713: LD_INT 1
28715: PUSH
28716: EMPTY
28717: LIST
28718: LIST
28719: PUSH
28720: LD_INT 0
28722: PUSH
28723: LD_INT 1
28725: PUSH
28726: EMPTY
28727: LIST
28728: LIST
28729: PUSH
28730: LD_INT 1
28732: NEG
28733: PUSH
28734: LD_INT 0
28736: PUSH
28737: EMPTY
28738: LIST
28739: LIST
28740: PUSH
28741: LD_INT 1
28743: NEG
28744: PUSH
28745: LD_INT 1
28747: NEG
28748: PUSH
28749: EMPTY
28750: LIST
28751: LIST
28752: PUSH
28753: LD_INT 1
28755: NEG
28756: PUSH
28757: LD_INT 2
28759: NEG
28760: PUSH
28761: EMPTY
28762: LIST
28763: LIST
28764: PUSH
28765: LD_INT 0
28767: PUSH
28768: LD_INT 2
28770: NEG
28771: PUSH
28772: EMPTY
28773: LIST
28774: LIST
28775: PUSH
28776: LD_INT 1
28778: PUSH
28779: LD_INT 1
28781: NEG
28782: PUSH
28783: EMPTY
28784: LIST
28785: LIST
28786: PUSH
28787: LD_INT 2
28789: PUSH
28790: LD_INT 0
28792: PUSH
28793: EMPTY
28794: LIST
28795: LIST
28796: PUSH
28797: LD_INT 2
28799: PUSH
28800: LD_INT 1
28802: PUSH
28803: EMPTY
28804: LIST
28805: LIST
28806: PUSH
28807: LD_INT 1
28809: PUSH
28810: LD_INT 2
28812: PUSH
28813: EMPTY
28814: LIST
28815: LIST
28816: PUSH
28817: LD_INT 0
28819: PUSH
28820: LD_INT 2
28822: PUSH
28823: EMPTY
28824: LIST
28825: LIST
28826: PUSH
28827: LD_INT 1
28829: NEG
28830: PUSH
28831: LD_INT 1
28833: PUSH
28834: EMPTY
28835: LIST
28836: LIST
28837: PUSH
28838: LD_INT 2
28840: NEG
28841: PUSH
28842: LD_INT 1
28844: NEG
28845: PUSH
28846: EMPTY
28847: LIST
28848: LIST
28849: PUSH
28850: LD_INT 2
28852: NEG
28853: PUSH
28854: LD_INT 2
28856: NEG
28857: PUSH
28858: EMPTY
28859: LIST
28860: LIST
28861: PUSH
28862: LD_INT 2
28864: NEG
28865: PUSH
28866: LD_INT 3
28868: NEG
28869: PUSH
28870: EMPTY
28871: LIST
28872: LIST
28873: PUSH
28874: LD_INT 2
28876: PUSH
28877: LD_INT 1
28879: NEG
28880: PUSH
28881: EMPTY
28882: LIST
28883: LIST
28884: PUSH
28885: LD_INT 3
28887: PUSH
28888: LD_INT 1
28890: PUSH
28891: EMPTY
28892: LIST
28893: LIST
28894: PUSH
28895: LD_INT 1
28897: PUSH
28898: LD_INT 3
28900: PUSH
28901: EMPTY
28902: LIST
28903: LIST
28904: PUSH
28905: LD_INT 1
28907: NEG
28908: PUSH
28909: LD_INT 2
28911: PUSH
28912: EMPTY
28913: LIST
28914: LIST
28915: PUSH
28916: LD_INT 3
28918: NEG
28919: PUSH
28920: LD_INT 2
28922: NEG
28923: PUSH
28924: EMPTY
28925: LIST
28926: LIST
28927: PUSH
28928: EMPTY
28929: LIST
28930: LIST
28931: LIST
28932: LIST
28933: LIST
28934: LIST
28935: LIST
28936: LIST
28937: LIST
28938: LIST
28939: LIST
28940: LIST
28941: LIST
28942: LIST
28943: LIST
28944: LIST
28945: LIST
28946: LIST
28947: LIST
28948: LIST
28949: LIST
28950: LIST
28951: LIST
28952: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
28953: LD_ADDR_VAR 0 30
28957: PUSH
28958: LD_INT 0
28960: PUSH
28961: LD_INT 0
28963: PUSH
28964: EMPTY
28965: LIST
28966: LIST
28967: PUSH
28968: LD_INT 0
28970: PUSH
28971: LD_INT 1
28973: NEG
28974: PUSH
28975: EMPTY
28976: LIST
28977: LIST
28978: PUSH
28979: LD_INT 1
28981: PUSH
28982: LD_INT 0
28984: PUSH
28985: EMPTY
28986: LIST
28987: LIST
28988: PUSH
28989: LD_INT 1
28991: PUSH
28992: LD_INT 1
28994: PUSH
28995: EMPTY
28996: LIST
28997: LIST
28998: PUSH
28999: LD_INT 0
29001: PUSH
29002: LD_INT 1
29004: PUSH
29005: EMPTY
29006: LIST
29007: LIST
29008: PUSH
29009: LD_INT 1
29011: NEG
29012: PUSH
29013: LD_INT 0
29015: PUSH
29016: EMPTY
29017: LIST
29018: LIST
29019: PUSH
29020: LD_INT 1
29022: NEG
29023: PUSH
29024: LD_INT 1
29026: NEG
29027: PUSH
29028: EMPTY
29029: LIST
29030: LIST
29031: PUSH
29032: LD_INT 1
29034: NEG
29035: PUSH
29036: LD_INT 2
29038: NEG
29039: PUSH
29040: EMPTY
29041: LIST
29042: LIST
29043: PUSH
29044: LD_INT 0
29046: PUSH
29047: LD_INT 2
29049: NEG
29050: PUSH
29051: EMPTY
29052: LIST
29053: LIST
29054: PUSH
29055: LD_INT 1
29057: PUSH
29058: LD_INT 1
29060: NEG
29061: PUSH
29062: EMPTY
29063: LIST
29064: LIST
29065: PUSH
29066: LD_INT 2
29068: PUSH
29069: LD_INT 0
29071: PUSH
29072: EMPTY
29073: LIST
29074: LIST
29075: PUSH
29076: LD_INT 2
29078: PUSH
29079: LD_INT 1
29081: PUSH
29082: EMPTY
29083: LIST
29084: LIST
29085: PUSH
29086: LD_INT 2
29088: PUSH
29089: LD_INT 2
29091: PUSH
29092: EMPTY
29093: LIST
29094: LIST
29095: PUSH
29096: LD_INT 1
29098: PUSH
29099: LD_INT 2
29101: PUSH
29102: EMPTY
29103: LIST
29104: LIST
29105: PUSH
29106: LD_INT 1
29108: NEG
29109: PUSH
29110: LD_INT 1
29112: PUSH
29113: EMPTY
29114: LIST
29115: LIST
29116: PUSH
29117: LD_INT 2
29119: NEG
29120: PUSH
29121: LD_INT 0
29123: PUSH
29124: EMPTY
29125: LIST
29126: LIST
29127: PUSH
29128: LD_INT 2
29130: NEG
29131: PUSH
29132: LD_INT 1
29134: NEG
29135: PUSH
29136: EMPTY
29137: LIST
29138: LIST
29139: PUSH
29140: LD_INT 1
29142: NEG
29143: PUSH
29144: LD_INT 3
29146: NEG
29147: PUSH
29148: EMPTY
29149: LIST
29150: LIST
29151: PUSH
29152: LD_INT 1
29154: PUSH
29155: LD_INT 2
29157: NEG
29158: PUSH
29159: EMPTY
29160: LIST
29161: LIST
29162: PUSH
29163: LD_INT 3
29165: PUSH
29166: LD_INT 2
29168: PUSH
29169: EMPTY
29170: LIST
29171: LIST
29172: PUSH
29173: LD_INT 2
29175: PUSH
29176: LD_INT 3
29178: PUSH
29179: EMPTY
29180: LIST
29181: LIST
29182: PUSH
29183: LD_INT 2
29185: NEG
29186: PUSH
29187: LD_INT 1
29189: PUSH
29190: EMPTY
29191: LIST
29192: LIST
29193: PUSH
29194: LD_INT 3
29196: NEG
29197: PUSH
29198: LD_INT 1
29200: NEG
29201: PUSH
29202: EMPTY
29203: LIST
29204: LIST
29205: PUSH
29206: EMPTY
29207: LIST
29208: LIST
29209: LIST
29210: LIST
29211: LIST
29212: LIST
29213: LIST
29214: LIST
29215: LIST
29216: LIST
29217: LIST
29218: LIST
29219: LIST
29220: LIST
29221: LIST
29222: LIST
29223: LIST
29224: LIST
29225: LIST
29226: LIST
29227: LIST
29228: LIST
29229: LIST
29230: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
29231: LD_ADDR_VAR 0 31
29235: PUSH
29236: LD_INT 0
29238: PUSH
29239: LD_INT 0
29241: PUSH
29242: EMPTY
29243: LIST
29244: LIST
29245: PUSH
29246: LD_INT 0
29248: PUSH
29249: LD_INT 1
29251: NEG
29252: PUSH
29253: EMPTY
29254: LIST
29255: LIST
29256: PUSH
29257: LD_INT 1
29259: PUSH
29260: LD_INT 0
29262: PUSH
29263: EMPTY
29264: LIST
29265: LIST
29266: PUSH
29267: LD_INT 1
29269: PUSH
29270: LD_INT 1
29272: PUSH
29273: EMPTY
29274: LIST
29275: LIST
29276: PUSH
29277: LD_INT 0
29279: PUSH
29280: LD_INT 1
29282: PUSH
29283: EMPTY
29284: LIST
29285: LIST
29286: PUSH
29287: LD_INT 1
29289: NEG
29290: PUSH
29291: LD_INT 0
29293: PUSH
29294: EMPTY
29295: LIST
29296: LIST
29297: PUSH
29298: LD_INT 1
29300: NEG
29301: PUSH
29302: LD_INT 1
29304: NEG
29305: PUSH
29306: EMPTY
29307: LIST
29308: LIST
29309: PUSH
29310: LD_INT 1
29312: NEG
29313: PUSH
29314: LD_INT 2
29316: NEG
29317: PUSH
29318: EMPTY
29319: LIST
29320: LIST
29321: PUSH
29322: LD_INT 1
29324: PUSH
29325: LD_INT 1
29327: NEG
29328: PUSH
29329: EMPTY
29330: LIST
29331: LIST
29332: PUSH
29333: LD_INT 2
29335: PUSH
29336: LD_INT 0
29338: PUSH
29339: EMPTY
29340: LIST
29341: LIST
29342: PUSH
29343: LD_INT 2
29345: PUSH
29346: LD_INT 1
29348: PUSH
29349: EMPTY
29350: LIST
29351: LIST
29352: PUSH
29353: LD_INT 2
29355: PUSH
29356: LD_INT 2
29358: PUSH
29359: EMPTY
29360: LIST
29361: LIST
29362: PUSH
29363: LD_INT 1
29365: PUSH
29366: LD_INT 2
29368: PUSH
29369: EMPTY
29370: LIST
29371: LIST
29372: PUSH
29373: LD_INT 0
29375: PUSH
29376: LD_INT 2
29378: PUSH
29379: EMPTY
29380: LIST
29381: LIST
29382: PUSH
29383: LD_INT 1
29385: NEG
29386: PUSH
29387: LD_INT 1
29389: PUSH
29390: EMPTY
29391: LIST
29392: LIST
29393: PUSH
29394: LD_INT 2
29396: NEG
29397: PUSH
29398: LD_INT 1
29400: NEG
29401: PUSH
29402: EMPTY
29403: LIST
29404: LIST
29405: PUSH
29406: LD_INT 2
29408: NEG
29409: PUSH
29410: LD_INT 2
29412: NEG
29413: PUSH
29414: EMPTY
29415: LIST
29416: LIST
29417: PUSH
29418: LD_INT 2
29420: NEG
29421: PUSH
29422: LD_INT 3
29424: NEG
29425: PUSH
29426: EMPTY
29427: LIST
29428: LIST
29429: PUSH
29430: LD_INT 2
29432: PUSH
29433: LD_INT 1
29435: NEG
29436: PUSH
29437: EMPTY
29438: LIST
29439: LIST
29440: PUSH
29441: LD_INT 3
29443: PUSH
29444: LD_INT 1
29446: PUSH
29447: EMPTY
29448: LIST
29449: LIST
29450: PUSH
29451: LD_INT 1
29453: PUSH
29454: LD_INT 3
29456: PUSH
29457: EMPTY
29458: LIST
29459: LIST
29460: PUSH
29461: LD_INT 1
29463: NEG
29464: PUSH
29465: LD_INT 2
29467: PUSH
29468: EMPTY
29469: LIST
29470: LIST
29471: PUSH
29472: LD_INT 3
29474: NEG
29475: PUSH
29476: LD_INT 2
29478: NEG
29479: PUSH
29480: EMPTY
29481: LIST
29482: LIST
29483: PUSH
29484: EMPTY
29485: LIST
29486: LIST
29487: LIST
29488: LIST
29489: LIST
29490: LIST
29491: LIST
29492: LIST
29493: LIST
29494: LIST
29495: LIST
29496: LIST
29497: LIST
29498: LIST
29499: LIST
29500: LIST
29501: LIST
29502: LIST
29503: LIST
29504: LIST
29505: LIST
29506: LIST
29507: LIST
29508: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
29509: LD_ADDR_VAR 0 32
29513: PUSH
29514: LD_INT 0
29516: PUSH
29517: LD_INT 0
29519: PUSH
29520: EMPTY
29521: LIST
29522: LIST
29523: PUSH
29524: LD_INT 0
29526: PUSH
29527: LD_INT 1
29529: NEG
29530: PUSH
29531: EMPTY
29532: LIST
29533: LIST
29534: PUSH
29535: LD_INT 1
29537: PUSH
29538: LD_INT 0
29540: PUSH
29541: EMPTY
29542: LIST
29543: LIST
29544: PUSH
29545: LD_INT 1
29547: PUSH
29548: LD_INT 1
29550: PUSH
29551: EMPTY
29552: LIST
29553: LIST
29554: PUSH
29555: LD_INT 0
29557: PUSH
29558: LD_INT 1
29560: PUSH
29561: EMPTY
29562: LIST
29563: LIST
29564: PUSH
29565: LD_INT 1
29567: NEG
29568: PUSH
29569: LD_INT 0
29571: PUSH
29572: EMPTY
29573: LIST
29574: LIST
29575: PUSH
29576: LD_INT 1
29578: NEG
29579: PUSH
29580: LD_INT 1
29582: NEG
29583: PUSH
29584: EMPTY
29585: LIST
29586: LIST
29587: PUSH
29588: LD_INT 1
29590: NEG
29591: PUSH
29592: LD_INT 2
29594: NEG
29595: PUSH
29596: EMPTY
29597: LIST
29598: LIST
29599: PUSH
29600: LD_INT 0
29602: PUSH
29603: LD_INT 2
29605: NEG
29606: PUSH
29607: EMPTY
29608: LIST
29609: LIST
29610: PUSH
29611: LD_INT 1
29613: PUSH
29614: LD_INT 1
29616: NEG
29617: PUSH
29618: EMPTY
29619: LIST
29620: LIST
29621: PUSH
29622: LD_INT 2
29624: PUSH
29625: LD_INT 1
29627: PUSH
29628: EMPTY
29629: LIST
29630: LIST
29631: PUSH
29632: LD_INT 2
29634: PUSH
29635: LD_INT 2
29637: PUSH
29638: EMPTY
29639: LIST
29640: LIST
29641: PUSH
29642: LD_INT 1
29644: PUSH
29645: LD_INT 2
29647: PUSH
29648: EMPTY
29649: LIST
29650: LIST
29651: PUSH
29652: LD_INT 0
29654: PUSH
29655: LD_INT 2
29657: PUSH
29658: EMPTY
29659: LIST
29660: LIST
29661: PUSH
29662: LD_INT 1
29664: NEG
29665: PUSH
29666: LD_INT 1
29668: PUSH
29669: EMPTY
29670: LIST
29671: LIST
29672: PUSH
29673: LD_INT 2
29675: NEG
29676: PUSH
29677: LD_INT 0
29679: PUSH
29680: EMPTY
29681: LIST
29682: LIST
29683: PUSH
29684: LD_INT 2
29686: NEG
29687: PUSH
29688: LD_INT 1
29690: NEG
29691: PUSH
29692: EMPTY
29693: LIST
29694: LIST
29695: PUSH
29696: LD_INT 1
29698: NEG
29699: PUSH
29700: LD_INT 3
29702: NEG
29703: PUSH
29704: EMPTY
29705: LIST
29706: LIST
29707: PUSH
29708: LD_INT 1
29710: PUSH
29711: LD_INT 2
29713: NEG
29714: PUSH
29715: EMPTY
29716: LIST
29717: LIST
29718: PUSH
29719: LD_INT 3
29721: PUSH
29722: LD_INT 2
29724: PUSH
29725: EMPTY
29726: LIST
29727: LIST
29728: PUSH
29729: LD_INT 2
29731: PUSH
29732: LD_INT 3
29734: PUSH
29735: EMPTY
29736: LIST
29737: LIST
29738: PUSH
29739: LD_INT 2
29741: NEG
29742: PUSH
29743: LD_INT 1
29745: PUSH
29746: EMPTY
29747: LIST
29748: LIST
29749: PUSH
29750: LD_INT 3
29752: NEG
29753: PUSH
29754: LD_INT 1
29756: NEG
29757: PUSH
29758: EMPTY
29759: LIST
29760: LIST
29761: PUSH
29762: EMPTY
29763: LIST
29764: LIST
29765: LIST
29766: LIST
29767: LIST
29768: LIST
29769: LIST
29770: LIST
29771: LIST
29772: LIST
29773: LIST
29774: LIST
29775: LIST
29776: LIST
29777: LIST
29778: LIST
29779: LIST
29780: LIST
29781: LIST
29782: LIST
29783: LIST
29784: LIST
29785: LIST
29786: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
29787: LD_ADDR_VAR 0 33
29791: PUSH
29792: LD_INT 0
29794: PUSH
29795: LD_INT 0
29797: PUSH
29798: EMPTY
29799: LIST
29800: LIST
29801: PUSH
29802: LD_INT 0
29804: PUSH
29805: LD_INT 1
29807: NEG
29808: PUSH
29809: EMPTY
29810: LIST
29811: LIST
29812: PUSH
29813: LD_INT 1
29815: PUSH
29816: LD_INT 0
29818: PUSH
29819: EMPTY
29820: LIST
29821: LIST
29822: PUSH
29823: LD_INT 1
29825: PUSH
29826: LD_INT 1
29828: PUSH
29829: EMPTY
29830: LIST
29831: LIST
29832: PUSH
29833: LD_INT 0
29835: PUSH
29836: LD_INT 1
29838: PUSH
29839: EMPTY
29840: LIST
29841: LIST
29842: PUSH
29843: LD_INT 1
29845: NEG
29846: PUSH
29847: LD_INT 0
29849: PUSH
29850: EMPTY
29851: LIST
29852: LIST
29853: PUSH
29854: LD_INT 1
29856: NEG
29857: PUSH
29858: LD_INT 1
29860: NEG
29861: PUSH
29862: EMPTY
29863: LIST
29864: LIST
29865: PUSH
29866: LD_INT 1
29868: NEG
29869: PUSH
29870: LD_INT 2
29872: NEG
29873: PUSH
29874: EMPTY
29875: LIST
29876: LIST
29877: PUSH
29878: LD_INT 1
29880: PUSH
29881: LD_INT 1
29883: NEG
29884: PUSH
29885: EMPTY
29886: LIST
29887: LIST
29888: PUSH
29889: LD_INT 2
29891: PUSH
29892: LD_INT 0
29894: PUSH
29895: EMPTY
29896: LIST
29897: LIST
29898: PUSH
29899: LD_INT 2
29901: PUSH
29902: LD_INT 1
29904: PUSH
29905: EMPTY
29906: LIST
29907: LIST
29908: PUSH
29909: LD_INT 1
29911: PUSH
29912: LD_INT 2
29914: PUSH
29915: EMPTY
29916: LIST
29917: LIST
29918: PUSH
29919: LD_INT 0
29921: PUSH
29922: LD_INT 2
29924: PUSH
29925: EMPTY
29926: LIST
29927: LIST
29928: PUSH
29929: LD_INT 1
29931: NEG
29932: PUSH
29933: LD_INT 1
29935: PUSH
29936: EMPTY
29937: LIST
29938: LIST
29939: PUSH
29940: LD_INT 2
29942: NEG
29943: PUSH
29944: LD_INT 0
29946: PUSH
29947: EMPTY
29948: LIST
29949: LIST
29950: PUSH
29951: LD_INT 2
29953: NEG
29954: PUSH
29955: LD_INT 1
29957: NEG
29958: PUSH
29959: EMPTY
29960: LIST
29961: LIST
29962: PUSH
29963: LD_INT 2
29965: NEG
29966: PUSH
29967: LD_INT 2
29969: NEG
29970: PUSH
29971: EMPTY
29972: LIST
29973: LIST
29974: PUSH
29975: LD_INT 2
29977: NEG
29978: PUSH
29979: LD_INT 3
29981: NEG
29982: PUSH
29983: EMPTY
29984: LIST
29985: LIST
29986: PUSH
29987: LD_INT 2
29989: PUSH
29990: LD_INT 1
29992: NEG
29993: PUSH
29994: EMPTY
29995: LIST
29996: LIST
29997: PUSH
29998: LD_INT 3
30000: PUSH
30001: LD_INT 1
30003: PUSH
30004: EMPTY
30005: LIST
30006: LIST
30007: PUSH
30008: LD_INT 1
30010: PUSH
30011: LD_INT 3
30013: PUSH
30014: EMPTY
30015: LIST
30016: LIST
30017: PUSH
30018: LD_INT 1
30020: NEG
30021: PUSH
30022: LD_INT 2
30024: PUSH
30025: EMPTY
30026: LIST
30027: LIST
30028: PUSH
30029: LD_INT 3
30031: NEG
30032: PUSH
30033: LD_INT 2
30035: NEG
30036: PUSH
30037: EMPTY
30038: LIST
30039: LIST
30040: PUSH
30041: EMPTY
30042: LIST
30043: LIST
30044: LIST
30045: LIST
30046: LIST
30047: LIST
30048: LIST
30049: LIST
30050: LIST
30051: LIST
30052: LIST
30053: LIST
30054: LIST
30055: LIST
30056: LIST
30057: LIST
30058: LIST
30059: LIST
30060: LIST
30061: LIST
30062: LIST
30063: LIST
30064: LIST
30065: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
30066: LD_ADDR_VAR 0 34
30070: PUSH
30071: LD_INT 0
30073: PUSH
30074: LD_INT 0
30076: PUSH
30077: EMPTY
30078: LIST
30079: LIST
30080: PUSH
30081: LD_INT 0
30083: PUSH
30084: LD_INT 1
30086: NEG
30087: PUSH
30088: EMPTY
30089: LIST
30090: LIST
30091: PUSH
30092: LD_INT 1
30094: PUSH
30095: LD_INT 0
30097: PUSH
30098: EMPTY
30099: LIST
30100: LIST
30101: PUSH
30102: LD_INT 1
30104: PUSH
30105: LD_INT 1
30107: PUSH
30108: EMPTY
30109: LIST
30110: LIST
30111: PUSH
30112: LD_INT 0
30114: PUSH
30115: LD_INT 1
30117: PUSH
30118: EMPTY
30119: LIST
30120: LIST
30121: PUSH
30122: LD_INT 1
30124: NEG
30125: PUSH
30126: LD_INT 0
30128: PUSH
30129: EMPTY
30130: LIST
30131: LIST
30132: PUSH
30133: LD_INT 1
30135: NEG
30136: PUSH
30137: LD_INT 1
30139: NEG
30140: PUSH
30141: EMPTY
30142: LIST
30143: LIST
30144: PUSH
30145: LD_INT 1
30147: NEG
30148: PUSH
30149: LD_INT 2
30151: NEG
30152: PUSH
30153: EMPTY
30154: LIST
30155: LIST
30156: PUSH
30157: LD_INT 0
30159: PUSH
30160: LD_INT 2
30162: NEG
30163: PUSH
30164: EMPTY
30165: LIST
30166: LIST
30167: PUSH
30168: LD_INT 1
30170: PUSH
30171: LD_INT 1
30173: NEG
30174: PUSH
30175: EMPTY
30176: LIST
30177: LIST
30178: PUSH
30179: LD_INT 2
30181: PUSH
30182: LD_INT 1
30184: PUSH
30185: EMPTY
30186: LIST
30187: LIST
30188: PUSH
30189: LD_INT 2
30191: PUSH
30192: LD_INT 2
30194: PUSH
30195: EMPTY
30196: LIST
30197: LIST
30198: PUSH
30199: LD_INT 1
30201: PUSH
30202: LD_INT 2
30204: PUSH
30205: EMPTY
30206: LIST
30207: LIST
30208: PUSH
30209: LD_INT 1
30211: NEG
30212: PUSH
30213: LD_INT 1
30215: PUSH
30216: EMPTY
30217: LIST
30218: LIST
30219: PUSH
30220: LD_INT 2
30222: NEG
30223: PUSH
30224: LD_INT 0
30226: PUSH
30227: EMPTY
30228: LIST
30229: LIST
30230: PUSH
30231: LD_INT 2
30233: NEG
30234: PUSH
30235: LD_INT 1
30237: NEG
30238: PUSH
30239: EMPTY
30240: LIST
30241: LIST
30242: PUSH
30243: LD_INT 2
30245: NEG
30246: PUSH
30247: LD_INT 2
30249: NEG
30250: PUSH
30251: EMPTY
30252: LIST
30253: LIST
30254: PUSH
30255: LD_INT 1
30257: NEG
30258: PUSH
30259: LD_INT 3
30261: NEG
30262: PUSH
30263: EMPTY
30264: LIST
30265: LIST
30266: PUSH
30267: LD_INT 1
30269: PUSH
30270: LD_INT 2
30272: NEG
30273: PUSH
30274: EMPTY
30275: LIST
30276: LIST
30277: PUSH
30278: LD_INT 3
30280: PUSH
30281: LD_INT 2
30283: PUSH
30284: EMPTY
30285: LIST
30286: LIST
30287: PUSH
30288: LD_INT 2
30290: PUSH
30291: LD_INT 3
30293: PUSH
30294: EMPTY
30295: LIST
30296: LIST
30297: PUSH
30298: LD_INT 2
30300: NEG
30301: PUSH
30302: LD_INT 1
30304: PUSH
30305: EMPTY
30306: LIST
30307: LIST
30308: PUSH
30309: LD_INT 3
30311: NEG
30312: PUSH
30313: LD_INT 1
30315: NEG
30316: PUSH
30317: EMPTY
30318: LIST
30319: LIST
30320: PUSH
30321: EMPTY
30322: LIST
30323: LIST
30324: LIST
30325: LIST
30326: LIST
30327: LIST
30328: LIST
30329: LIST
30330: LIST
30331: LIST
30332: LIST
30333: LIST
30334: LIST
30335: LIST
30336: LIST
30337: LIST
30338: LIST
30339: LIST
30340: LIST
30341: LIST
30342: LIST
30343: LIST
30344: LIST
30345: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
30346: LD_ADDR_VAR 0 35
30350: PUSH
30351: LD_INT 0
30353: PUSH
30354: LD_INT 0
30356: PUSH
30357: EMPTY
30358: LIST
30359: LIST
30360: PUSH
30361: LD_INT 0
30363: PUSH
30364: LD_INT 1
30366: NEG
30367: PUSH
30368: EMPTY
30369: LIST
30370: LIST
30371: PUSH
30372: LD_INT 1
30374: PUSH
30375: LD_INT 0
30377: PUSH
30378: EMPTY
30379: LIST
30380: LIST
30381: PUSH
30382: LD_INT 1
30384: PUSH
30385: LD_INT 1
30387: PUSH
30388: EMPTY
30389: LIST
30390: LIST
30391: PUSH
30392: LD_INT 0
30394: PUSH
30395: LD_INT 1
30397: PUSH
30398: EMPTY
30399: LIST
30400: LIST
30401: PUSH
30402: LD_INT 1
30404: NEG
30405: PUSH
30406: LD_INT 0
30408: PUSH
30409: EMPTY
30410: LIST
30411: LIST
30412: PUSH
30413: LD_INT 1
30415: NEG
30416: PUSH
30417: LD_INT 1
30419: NEG
30420: PUSH
30421: EMPTY
30422: LIST
30423: LIST
30424: PUSH
30425: LD_INT 2
30427: PUSH
30428: LD_INT 1
30430: PUSH
30431: EMPTY
30432: LIST
30433: LIST
30434: PUSH
30435: LD_INT 2
30437: NEG
30438: PUSH
30439: LD_INT 1
30441: NEG
30442: PUSH
30443: EMPTY
30444: LIST
30445: LIST
30446: PUSH
30447: EMPTY
30448: LIST
30449: LIST
30450: LIST
30451: LIST
30452: LIST
30453: LIST
30454: LIST
30455: LIST
30456: LIST
30457: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
30458: LD_ADDR_VAR 0 36
30462: PUSH
30463: LD_INT 0
30465: PUSH
30466: LD_INT 0
30468: PUSH
30469: EMPTY
30470: LIST
30471: LIST
30472: PUSH
30473: LD_INT 0
30475: PUSH
30476: LD_INT 1
30478: NEG
30479: PUSH
30480: EMPTY
30481: LIST
30482: LIST
30483: PUSH
30484: LD_INT 1
30486: PUSH
30487: LD_INT 0
30489: PUSH
30490: EMPTY
30491: LIST
30492: LIST
30493: PUSH
30494: LD_INT 1
30496: PUSH
30497: LD_INT 1
30499: PUSH
30500: EMPTY
30501: LIST
30502: LIST
30503: PUSH
30504: LD_INT 0
30506: PUSH
30507: LD_INT 1
30509: PUSH
30510: EMPTY
30511: LIST
30512: LIST
30513: PUSH
30514: LD_INT 1
30516: NEG
30517: PUSH
30518: LD_INT 0
30520: PUSH
30521: EMPTY
30522: LIST
30523: LIST
30524: PUSH
30525: LD_INT 1
30527: NEG
30528: PUSH
30529: LD_INT 1
30531: NEG
30532: PUSH
30533: EMPTY
30534: LIST
30535: LIST
30536: PUSH
30537: LD_INT 1
30539: NEG
30540: PUSH
30541: LD_INT 2
30543: NEG
30544: PUSH
30545: EMPTY
30546: LIST
30547: LIST
30548: PUSH
30549: LD_INT 1
30551: PUSH
30552: LD_INT 2
30554: PUSH
30555: EMPTY
30556: LIST
30557: LIST
30558: PUSH
30559: EMPTY
30560: LIST
30561: LIST
30562: LIST
30563: LIST
30564: LIST
30565: LIST
30566: LIST
30567: LIST
30568: LIST
30569: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
30570: LD_ADDR_VAR 0 37
30574: PUSH
30575: LD_INT 0
30577: PUSH
30578: LD_INT 0
30580: PUSH
30581: EMPTY
30582: LIST
30583: LIST
30584: PUSH
30585: LD_INT 0
30587: PUSH
30588: LD_INT 1
30590: NEG
30591: PUSH
30592: EMPTY
30593: LIST
30594: LIST
30595: PUSH
30596: LD_INT 1
30598: PUSH
30599: LD_INT 0
30601: PUSH
30602: EMPTY
30603: LIST
30604: LIST
30605: PUSH
30606: LD_INT 1
30608: PUSH
30609: LD_INT 1
30611: PUSH
30612: EMPTY
30613: LIST
30614: LIST
30615: PUSH
30616: LD_INT 0
30618: PUSH
30619: LD_INT 1
30621: PUSH
30622: EMPTY
30623: LIST
30624: LIST
30625: PUSH
30626: LD_INT 1
30628: NEG
30629: PUSH
30630: LD_INT 0
30632: PUSH
30633: EMPTY
30634: LIST
30635: LIST
30636: PUSH
30637: LD_INT 1
30639: NEG
30640: PUSH
30641: LD_INT 1
30643: NEG
30644: PUSH
30645: EMPTY
30646: LIST
30647: LIST
30648: PUSH
30649: LD_INT 1
30651: PUSH
30652: LD_INT 1
30654: NEG
30655: PUSH
30656: EMPTY
30657: LIST
30658: LIST
30659: PUSH
30660: LD_INT 1
30662: NEG
30663: PUSH
30664: LD_INT 1
30666: PUSH
30667: EMPTY
30668: LIST
30669: LIST
30670: PUSH
30671: EMPTY
30672: LIST
30673: LIST
30674: LIST
30675: LIST
30676: LIST
30677: LIST
30678: LIST
30679: LIST
30680: LIST
30681: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
30682: LD_ADDR_VAR 0 38
30686: PUSH
30687: LD_INT 0
30689: PUSH
30690: LD_INT 0
30692: PUSH
30693: EMPTY
30694: LIST
30695: LIST
30696: PUSH
30697: LD_INT 0
30699: PUSH
30700: LD_INT 1
30702: NEG
30703: PUSH
30704: EMPTY
30705: LIST
30706: LIST
30707: PUSH
30708: LD_INT 1
30710: PUSH
30711: LD_INT 0
30713: PUSH
30714: EMPTY
30715: LIST
30716: LIST
30717: PUSH
30718: LD_INT 1
30720: PUSH
30721: LD_INT 1
30723: PUSH
30724: EMPTY
30725: LIST
30726: LIST
30727: PUSH
30728: LD_INT 0
30730: PUSH
30731: LD_INT 1
30733: PUSH
30734: EMPTY
30735: LIST
30736: LIST
30737: PUSH
30738: LD_INT 1
30740: NEG
30741: PUSH
30742: LD_INT 0
30744: PUSH
30745: EMPTY
30746: LIST
30747: LIST
30748: PUSH
30749: LD_INT 1
30751: NEG
30752: PUSH
30753: LD_INT 1
30755: NEG
30756: PUSH
30757: EMPTY
30758: LIST
30759: LIST
30760: PUSH
30761: LD_INT 2
30763: PUSH
30764: LD_INT 1
30766: PUSH
30767: EMPTY
30768: LIST
30769: LIST
30770: PUSH
30771: LD_INT 2
30773: NEG
30774: PUSH
30775: LD_INT 1
30777: NEG
30778: PUSH
30779: EMPTY
30780: LIST
30781: LIST
30782: PUSH
30783: EMPTY
30784: LIST
30785: LIST
30786: LIST
30787: LIST
30788: LIST
30789: LIST
30790: LIST
30791: LIST
30792: LIST
30793: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
30794: LD_ADDR_VAR 0 39
30798: PUSH
30799: LD_INT 0
30801: PUSH
30802: LD_INT 0
30804: PUSH
30805: EMPTY
30806: LIST
30807: LIST
30808: PUSH
30809: LD_INT 0
30811: PUSH
30812: LD_INT 1
30814: NEG
30815: PUSH
30816: EMPTY
30817: LIST
30818: LIST
30819: PUSH
30820: LD_INT 1
30822: PUSH
30823: LD_INT 0
30825: PUSH
30826: EMPTY
30827: LIST
30828: LIST
30829: PUSH
30830: LD_INT 1
30832: PUSH
30833: LD_INT 1
30835: PUSH
30836: EMPTY
30837: LIST
30838: LIST
30839: PUSH
30840: LD_INT 0
30842: PUSH
30843: LD_INT 1
30845: PUSH
30846: EMPTY
30847: LIST
30848: LIST
30849: PUSH
30850: LD_INT 1
30852: NEG
30853: PUSH
30854: LD_INT 0
30856: PUSH
30857: EMPTY
30858: LIST
30859: LIST
30860: PUSH
30861: LD_INT 1
30863: NEG
30864: PUSH
30865: LD_INT 1
30867: NEG
30868: PUSH
30869: EMPTY
30870: LIST
30871: LIST
30872: PUSH
30873: LD_INT 1
30875: NEG
30876: PUSH
30877: LD_INT 2
30879: NEG
30880: PUSH
30881: EMPTY
30882: LIST
30883: LIST
30884: PUSH
30885: LD_INT 1
30887: PUSH
30888: LD_INT 2
30890: PUSH
30891: EMPTY
30892: LIST
30893: LIST
30894: PUSH
30895: EMPTY
30896: LIST
30897: LIST
30898: LIST
30899: LIST
30900: LIST
30901: LIST
30902: LIST
30903: LIST
30904: LIST
30905: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
30906: LD_ADDR_VAR 0 40
30910: PUSH
30911: LD_INT 0
30913: PUSH
30914: LD_INT 0
30916: PUSH
30917: EMPTY
30918: LIST
30919: LIST
30920: PUSH
30921: LD_INT 0
30923: PUSH
30924: LD_INT 1
30926: NEG
30927: PUSH
30928: EMPTY
30929: LIST
30930: LIST
30931: PUSH
30932: LD_INT 1
30934: PUSH
30935: LD_INT 0
30937: PUSH
30938: EMPTY
30939: LIST
30940: LIST
30941: PUSH
30942: LD_INT 1
30944: PUSH
30945: LD_INT 1
30947: PUSH
30948: EMPTY
30949: LIST
30950: LIST
30951: PUSH
30952: LD_INT 0
30954: PUSH
30955: LD_INT 1
30957: PUSH
30958: EMPTY
30959: LIST
30960: LIST
30961: PUSH
30962: LD_INT 1
30964: NEG
30965: PUSH
30966: LD_INT 0
30968: PUSH
30969: EMPTY
30970: LIST
30971: LIST
30972: PUSH
30973: LD_INT 1
30975: NEG
30976: PUSH
30977: LD_INT 1
30979: NEG
30980: PUSH
30981: EMPTY
30982: LIST
30983: LIST
30984: PUSH
30985: LD_INT 1
30987: PUSH
30988: LD_INT 1
30990: NEG
30991: PUSH
30992: EMPTY
30993: LIST
30994: LIST
30995: PUSH
30996: LD_INT 1
30998: NEG
30999: PUSH
31000: LD_INT 1
31002: PUSH
31003: EMPTY
31004: LIST
31005: LIST
31006: PUSH
31007: EMPTY
31008: LIST
31009: LIST
31010: LIST
31011: LIST
31012: LIST
31013: LIST
31014: LIST
31015: LIST
31016: LIST
31017: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
31018: LD_ADDR_VAR 0 41
31022: PUSH
31023: LD_INT 0
31025: PUSH
31026: LD_INT 0
31028: PUSH
31029: EMPTY
31030: LIST
31031: LIST
31032: PUSH
31033: LD_INT 0
31035: PUSH
31036: LD_INT 1
31038: NEG
31039: PUSH
31040: EMPTY
31041: LIST
31042: LIST
31043: PUSH
31044: LD_INT 1
31046: PUSH
31047: LD_INT 0
31049: PUSH
31050: EMPTY
31051: LIST
31052: LIST
31053: PUSH
31054: LD_INT 1
31056: PUSH
31057: LD_INT 1
31059: PUSH
31060: EMPTY
31061: LIST
31062: LIST
31063: PUSH
31064: LD_INT 0
31066: PUSH
31067: LD_INT 1
31069: PUSH
31070: EMPTY
31071: LIST
31072: LIST
31073: PUSH
31074: LD_INT 1
31076: NEG
31077: PUSH
31078: LD_INT 0
31080: PUSH
31081: EMPTY
31082: LIST
31083: LIST
31084: PUSH
31085: LD_INT 1
31087: NEG
31088: PUSH
31089: LD_INT 1
31091: NEG
31092: PUSH
31093: EMPTY
31094: LIST
31095: LIST
31096: PUSH
31097: LD_INT 1
31099: NEG
31100: PUSH
31101: LD_INT 2
31103: NEG
31104: PUSH
31105: EMPTY
31106: LIST
31107: LIST
31108: PUSH
31109: LD_INT 1
31111: PUSH
31112: LD_INT 1
31114: NEG
31115: PUSH
31116: EMPTY
31117: LIST
31118: LIST
31119: PUSH
31120: LD_INT 2
31122: PUSH
31123: LD_INT 0
31125: PUSH
31126: EMPTY
31127: LIST
31128: LIST
31129: PUSH
31130: LD_INT 2
31132: PUSH
31133: LD_INT 1
31135: PUSH
31136: EMPTY
31137: LIST
31138: LIST
31139: PUSH
31140: LD_INT 2
31142: PUSH
31143: LD_INT 2
31145: PUSH
31146: EMPTY
31147: LIST
31148: LIST
31149: PUSH
31150: LD_INT 1
31152: PUSH
31153: LD_INT 2
31155: PUSH
31156: EMPTY
31157: LIST
31158: LIST
31159: PUSH
31160: LD_INT 1
31162: NEG
31163: PUSH
31164: LD_INT 1
31166: PUSH
31167: EMPTY
31168: LIST
31169: LIST
31170: PUSH
31171: LD_INT 2
31173: NEG
31174: PUSH
31175: LD_INT 0
31177: PUSH
31178: EMPTY
31179: LIST
31180: LIST
31181: PUSH
31182: LD_INT 2
31184: NEG
31185: PUSH
31186: LD_INT 1
31188: NEG
31189: PUSH
31190: EMPTY
31191: LIST
31192: LIST
31193: PUSH
31194: LD_INT 2
31196: NEG
31197: PUSH
31198: LD_INT 2
31200: NEG
31201: PUSH
31202: EMPTY
31203: LIST
31204: LIST
31205: PUSH
31206: LD_INT 2
31208: NEG
31209: PUSH
31210: LD_INT 3
31212: NEG
31213: PUSH
31214: EMPTY
31215: LIST
31216: LIST
31217: PUSH
31218: LD_INT 2
31220: PUSH
31221: LD_INT 1
31223: NEG
31224: PUSH
31225: EMPTY
31226: LIST
31227: LIST
31228: PUSH
31229: LD_INT 3
31231: PUSH
31232: LD_INT 0
31234: PUSH
31235: EMPTY
31236: LIST
31237: LIST
31238: PUSH
31239: LD_INT 3
31241: PUSH
31242: LD_INT 1
31244: PUSH
31245: EMPTY
31246: LIST
31247: LIST
31248: PUSH
31249: LD_INT 3
31251: PUSH
31252: LD_INT 2
31254: PUSH
31255: EMPTY
31256: LIST
31257: LIST
31258: PUSH
31259: LD_INT 3
31261: PUSH
31262: LD_INT 3
31264: PUSH
31265: EMPTY
31266: LIST
31267: LIST
31268: PUSH
31269: LD_INT 2
31271: PUSH
31272: LD_INT 3
31274: PUSH
31275: EMPTY
31276: LIST
31277: LIST
31278: PUSH
31279: LD_INT 2
31281: NEG
31282: PUSH
31283: LD_INT 1
31285: PUSH
31286: EMPTY
31287: LIST
31288: LIST
31289: PUSH
31290: LD_INT 3
31292: NEG
31293: PUSH
31294: LD_INT 0
31296: PUSH
31297: EMPTY
31298: LIST
31299: LIST
31300: PUSH
31301: LD_INT 3
31303: NEG
31304: PUSH
31305: LD_INT 1
31307: NEG
31308: PUSH
31309: EMPTY
31310: LIST
31311: LIST
31312: PUSH
31313: LD_INT 3
31315: NEG
31316: PUSH
31317: LD_INT 2
31319: NEG
31320: PUSH
31321: EMPTY
31322: LIST
31323: LIST
31324: PUSH
31325: LD_INT 3
31327: NEG
31328: PUSH
31329: LD_INT 3
31331: NEG
31332: PUSH
31333: EMPTY
31334: LIST
31335: LIST
31336: PUSH
31337: EMPTY
31338: LIST
31339: LIST
31340: LIST
31341: LIST
31342: LIST
31343: LIST
31344: LIST
31345: LIST
31346: LIST
31347: LIST
31348: LIST
31349: LIST
31350: LIST
31351: LIST
31352: LIST
31353: LIST
31354: LIST
31355: LIST
31356: LIST
31357: LIST
31358: LIST
31359: LIST
31360: LIST
31361: LIST
31362: LIST
31363: LIST
31364: LIST
31365: LIST
31366: LIST
31367: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
31368: LD_ADDR_VAR 0 42
31372: PUSH
31373: LD_INT 0
31375: PUSH
31376: LD_INT 0
31378: PUSH
31379: EMPTY
31380: LIST
31381: LIST
31382: PUSH
31383: LD_INT 0
31385: PUSH
31386: LD_INT 1
31388: NEG
31389: PUSH
31390: EMPTY
31391: LIST
31392: LIST
31393: PUSH
31394: LD_INT 1
31396: PUSH
31397: LD_INT 0
31399: PUSH
31400: EMPTY
31401: LIST
31402: LIST
31403: PUSH
31404: LD_INT 1
31406: PUSH
31407: LD_INT 1
31409: PUSH
31410: EMPTY
31411: LIST
31412: LIST
31413: PUSH
31414: LD_INT 0
31416: PUSH
31417: LD_INT 1
31419: PUSH
31420: EMPTY
31421: LIST
31422: LIST
31423: PUSH
31424: LD_INT 1
31426: NEG
31427: PUSH
31428: LD_INT 0
31430: PUSH
31431: EMPTY
31432: LIST
31433: LIST
31434: PUSH
31435: LD_INT 1
31437: NEG
31438: PUSH
31439: LD_INT 1
31441: NEG
31442: PUSH
31443: EMPTY
31444: LIST
31445: LIST
31446: PUSH
31447: LD_INT 1
31449: NEG
31450: PUSH
31451: LD_INT 2
31453: NEG
31454: PUSH
31455: EMPTY
31456: LIST
31457: LIST
31458: PUSH
31459: LD_INT 0
31461: PUSH
31462: LD_INT 2
31464: NEG
31465: PUSH
31466: EMPTY
31467: LIST
31468: LIST
31469: PUSH
31470: LD_INT 1
31472: PUSH
31473: LD_INT 1
31475: NEG
31476: PUSH
31477: EMPTY
31478: LIST
31479: LIST
31480: PUSH
31481: LD_INT 2
31483: PUSH
31484: LD_INT 1
31486: PUSH
31487: EMPTY
31488: LIST
31489: LIST
31490: PUSH
31491: LD_INT 2
31493: PUSH
31494: LD_INT 2
31496: PUSH
31497: EMPTY
31498: LIST
31499: LIST
31500: PUSH
31501: LD_INT 1
31503: PUSH
31504: LD_INT 2
31506: PUSH
31507: EMPTY
31508: LIST
31509: LIST
31510: PUSH
31511: LD_INT 0
31513: PUSH
31514: LD_INT 2
31516: PUSH
31517: EMPTY
31518: LIST
31519: LIST
31520: PUSH
31521: LD_INT 1
31523: NEG
31524: PUSH
31525: LD_INT 1
31527: PUSH
31528: EMPTY
31529: LIST
31530: LIST
31531: PUSH
31532: LD_INT 2
31534: NEG
31535: PUSH
31536: LD_INT 1
31538: NEG
31539: PUSH
31540: EMPTY
31541: LIST
31542: LIST
31543: PUSH
31544: LD_INT 2
31546: NEG
31547: PUSH
31548: LD_INT 2
31550: NEG
31551: PUSH
31552: EMPTY
31553: LIST
31554: LIST
31555: PUSH
31556: LD_INT 2
31558: NEG
31559: PUSH
31560: LD_INT 3
31562: NEG
31563: PUSH
31564: EMPTY
31565: LIST
31566: LIST
31567: PUSH
31568: LD_INT 1
31570: NEG
31571: PUSH
31572: LD_INT 3
31574: NEG
31575: PUSH
31576: EMPTY
31577: LIST
31578: LIST
31579: PUSH
31580: LD_INT 0
31582: PUSH
31583: LD_INT 3
31585: NEG
31586: PUSH
31587: EMPTY
31588: LIST
31589: LIST
31590: PUSH
31591: LD_INT 1
31593: PUSH
31594: LD_INT 2
31596: NEG
31597: PUSH
31598: EMPTY
31599: LIST
31600: LIST
31601: PUSH
31602: LD_INT 3
31604: PUSH
31605: LD_INT 2
31607: PUSH
31608: EMPTY
31609: LIST
31610: LIST
31611: PUSH
31612: LD_INT 3
31614: PUSH
31615: LD_INT 3
31617: PUSH
31618: EMPTY
31619: LIST
31620: LIST
31621: PUSH
31622: LD_INT 2
31624: PUSH
31625: LD_INT 3
31627: PUSH
31628: EMPTY
31629: LIST
31630: LIST
31631: PUSH
31632: LD_INT 1
31634: PUSH
31635: LD_INT 3
31637: PUSH
31638: EMPTY
31639: LIST
31640: LIST
31641: PUSH
31642: LD_INT 0
31644: PUSH
31645: LD_INT 3
31647: PUSH
31648: EMPTY
31649: LIST
31650: LIST
31651: PUSH
31652: LD_INT 1
31654: NEG
31655: PUSH
31656: LD_INT 2
31658: PUSH
31659: EMPTY
31660: LIST
31661: LIST
31662: PUSH
31663: LD_INT 3
31665: NEG
31666: PUSH
31667: LD_INT 2
31669: NEG
31670: PUSH
31671: EMPTY
31672: LIST
31673: LIST
31674: PUSH
31675: LD_INT 3
31677: NEG
31678: PUSH
31679: LD_INT 3
31681: NEG
31682: PUSH
31683: EMPTY
31684: LIST
31685: LIST
31686: PUSH
31687: EMPTY
31688: LIST
31689: LIST
31690: LIST
31691: LIST
31692: LIST
31693: LIST
31694: LIST
31695: LIST
31696: LIST
31697: LIST
31698: LIST
31699: LIST
31700: LIST
31701: LIST
31702: LIST
31703: LIST
31704: LIST
31705: LIST
31706: LIST
31707: LIST
31708: LIST
31709: LIST
31710: LIST
31711: LIST
31712: LIST
31713: LIST
31714: LIST
31715: LIST
31716: LIST
31717: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
31718: LD_ADDR_VAR 0 43
31722: PUSH
31723: LD_INT 0
31725: PUSH
31726: LD_INT 0
31728: PUSH
31729: EMPTY
31730: LIST
31731: LIST
31732: PUSH
31733: LD_INT 0
31735: PUSH
31736: LD_INT 1
31738: NEG
31739: PUSH
31740: EMPTY
31741: LIST
31742: LIST
31743: PUSH
31744: LD_INT 1
31746: PUSH
31747: LD_INT 0
31749: PUSH
31750: EMPTY
31751: LIST
31752: LIST
31753: PUSH
31754: LD_INT 1
31756: PUSH
31757: LD_INT 1
31759: PUSH
31760: EMPTY
31761: LIST
31762: LIST
31763: PUSH
31764: LD_INT 0
31766: PUSH
31767: LD_INT 1
31769: PUSH
31770: EMPTY
31771: LIST
31772: LIST
31773: PUSH
31774: LD_INT 1
31776: NEG
31777: PUSH
31778: LD_INT 0
31780: PUSH
31781: EMPTY
31782: LIST
31783: LIST
31784: PUSH
31785: LD_INT 1
31787: NEG
31788: PUSH
31789: LD_INT 1
31791: NEG
31792: PUSH
31793: EMPTY
31794: LIST
31795: LIST
31796: PUSH
31797: LD_INT 1
31799: NEG
31800: PUSH
31801: LD_INT 2
31803: NEG
31804: PUSH
31805: EMPTY
31806: LIST
31807: LIST
31808: PUSH
31809: LD_INT 0
31811: PUSH
31812: LD_INT 2
31814: NEG
31815: PUSH
31816: EMPTY
31817: LIST
31818: LIST
31819: PUSH
31820: LD_INT 1
31822: PUSH
31823: LD_INT 1
31825: NEG
31826: PUSH
31827: EMPTY
31828: LIST
31829: LIST
31830: PUSH
31831: LD_INT 2
31833: PUSH
31834: LD_INT 0
31836: PUSH
31837: EMPTY
31838: LIST
31839: LIST
31840: PUSH
31841: LD_INT 2
31843: PUSH
31844: LD_INT 1
31846: PUSH
31847: EMPTY
31848: LIST
31849: LIST
31850: PUSH
31851: LD_INT 1
31853: PUSH
31854: LD_INT 2
31856: PUSH
31857: EMPTY
31858: LIST
31859: LIST
31860: PUSH
31861: LD_INT 0
31863: PUSH
31864: LD_INT 2
31866: PUSH
31867: EMPTY
31868: LIST
31869: LIST
31870: PUSH
31871: LD_INT 1
31873: NEG
31874: PUSH
31875: LD_INT 1
31877: PUSH
31878: EMPTY
31879: LIST
31880: LIST
31881: PUSH
31882: LD_INT 2
31884: NEG
31885: PUSH
31886: LD_INT 0
31888: PUSH
31889: EMPTY
31890: LIST
31891: LIST
31892: PUSH
31893: LD_INT 2
31895: NEG
31896: PUSH
31897: LD_INT 1
31899: NEG
31900: PUSH
31901: EMPTY
31902: LIST
31903: LIST
31904: PUSH
31905: LD_INT 1
31907: NEG
31908: PUSH
31909: LD_INT 3
31911: NEG
31912: PUSH
31913: EMPTY
31914: LIST
31915: LIST
31916: PUSH
31917: LD_INT 0
31919: PUSH
31920: LD_INT 3
31922: NEG
31923: PUSH
31924: EMPTY
31925: LIST
31926: LIST
31927: PUSH
31928: LD_INT 1
31930: PUSH
31931: LD_INT 2
31933: NEG
31934: PUSH
31935: EMPTY
31936: LIST
31937: LIST
31938: PUSH
31939: LD_INT 2
31941: PUSH
31942: LD_INT 1
31944: NEG
31945: PUSH
31946: EMPTY
31947: LIST
31948: LIST
31949: PUSH
31950: LD_INT 3
31952: PUSH
31953: LD_INT 0
31955: PUSH
31956: EMPTY
31957: LIST
31958: LIST
31959: PUSH
31960: LD_INT 3
31962: PUSH
31963: LD_INT 1
31965: PUSH
31966: EMPTY
31967: LIST
31968: LIST
31969: PUSH
31970: LD_INT 1
31972: PUSH
31973: LD_INT 3
31975: PUSH
31976: EMPTY
31977: LIST
31978: LIST
31979: PUSH
31980: LD_INT 0
31982: PUSH
31983: LD_INT 3
31985: PUSH
31986: EMPTY
31987: LIST
31988: LIST
31989: PUSH
31990: LD_INT 1
31992: NEG
31993: PUSH
31994: LD_INT 2
31996: PUSH
31997: EMPTY
31998: LIST
31999: LIST
32000: PUSH
32001: LD_INT 2
32003: NEG
32004: PUSH
32005: LD_INT 1
32007: PUSH
32008: EMPTY
32009: LIST
32010: LIST
32011: PUSH
32012: LD_INT 3
32014: NEG
32015: PUSH
32016: LD_INT 0
32018: PUSH
32019: EMPTY
32020: LIST
32021: LIST
32022: PUSH
32023: LD_INT 3
32025: NEG
32026: PUSH
32027: LD_INT 1
32029: NEG
32030: PUSH
32031: EMPTY
32032: LIST
32033: LIST
32034: PUSH
32035: EMPTY
32036: LIST
32037: LIST
32038: LIST
32039: LIST
32040: LIST
32041: LIST
32042: LIST
32043: LIST
32044: LIST
32045: LIST
32046: LIST
32047: LIST
32048: LIST
32049: LIST
32050: LIST
32051: LIST
32052: LIST
32053: LIST
32054: LIST
32055: LIST
32056: LIST
32057: LIST
32058: LIST
32059: LIST
32060: LIST
32061: LIST
32062: LIST
32063: LIST
32064: LIST
32065: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
32066: LD_ADDR_VAR 0 44
32070: PUSH
32071: LD_INT 0
32073: PUSH
32074: LD_INT 0
32076: PUSH
32077: EMPTY
32078: LIST
32079: LIST
32080: PUSH
32081: LD_INT 0
32083: PUSH
32084: LD_INT 1
32086: NEG
32087: PUSH
32088: EMPTY
32089: LIST
32090: LIST
32091: PUSH
32092: LD_INT 1
32094: PUSH
32095: LD_INT 0
32097: PUSH
32098: EMPTY
32099: LIST
32100: LIST
32101: PUSH
32102: LD_INT 1
32104: PUSH
32105: LD_INT 1
32107: PUSH
32108: EMPTY
32109: LIST
32110: LIST
32111: PUSH
32112: LD_INT 0
32114: PUSH
32115: LD_INT 1
32117: PUSH
32118: EMPTY
32119: LIST
32120: LIST
32121: PUSH
32122: LD_INT 1
32124: NEG
32125: PUSH
32126: LD_INT 0
32128: PUSH
32129: EMPTY
32130: LIST
32131: LIST
32132: PUSH
32133: LD_INT 1
32135: NEG
32136: PUSH
32137: LD_INT 1
32139: NEG
32140: PUSH
32141: EMPTY
32142: LIST
32143: LIST
32144: PUSH
32145: LD_INT 1
32147: NEG
32148: PUSH
32149: LD_INT 2
32151: NEG
32152: PUSH
32153: EMPTY
32154: LIST
32155: LIST
32156: PUSH
32157: LD_INT 1
32159: PUSH
32160: LD_INT 1
32162: NEG
32163: PUSH
32164: EMPTY
32165: LIST
32166: LIST
32167: PUSH
32168: LD_INT 2
32170: PUSH
32171: LD_INT 0
32173: PUSH
32174: EMPTY
32175: LIST
32176: LIST
32177: PUSH
32178: LD_INT 2
32180: PUSH
32181: LD_INT 1
32183: PUSH
32184: EMPTY
32185: LIST
32186: LIST
32187: PUSH
32188: LD_INT 2
32190: PUSH
32191: LD_INT 2
32193: PUSH
32194: EMPTY
32195: LIST
32196: LIST
32197: PUSH
32198: LD_INT 1
32200: PUSH
32201: LD_INT 2
32203: PUSH
32204: EMPTY
32205: LIST
32206: LIST
32207: PUSH
32208: LD_INT 1
32210: NEG
32211: PUSH
32212: LD_INT 1
32214: PUSH
32215: EMPTY
32216: LIST
32217: LIST
32218: PUSH
32219: LD_INT 2
32221: NEG
32222: PUSH
32223: LD_INT 0
32225: PUSH
32226: EMPTY
32227: LIST
32228: LIST
32229: PUSH
32230: LD_INT 2
32232: NEG
32233: PUSH
32234: LD_INT 1
32236: NEG
32237: PUSH
32238: EMPTY
32239: LIST
32240: LIST
32241: PUSH
32242: LD_INT 2
32244: NEG
32245: PUSH
32246: LD_INT 2
32248: NEG
32249: PUSH
32250: EMPTY
32251: LIST
32252: LIST
32253: PUSH
32254: LD_INT 2
32256: NEG
32257: PUSH
32258: LD_INT 3
32260: NEG
32261: PUSH
32262: EMPTY
32263: LIST
32264: LIST
32265: PUSH
32266: LD_INT 2
32268: PUSH
32269: LD_INT 1
32271: NEG
32272: PUSH
32273: EMPTY
32274: LIST
32275: LIST
32276: PUSH
32277: LD_INT 3
32279: PUSH
32280: LD_INT 0
32282: PUSH
32283: EMPTY
32284: LIST
32285: LIST
32286: PUSH
32287: LD_INT 3
32289: PUSH
32290: LD_INT 1
32292: PUSH
32293: EMPTY
32294: LIST
32295: LIST
32296: PUSH
32297: LD_INT 3
32299: PUSH
32300: LD_INT 2
32302: PUSH
32303: EMPTY
32304: LIST
32305: LIST
32306: PUSH
32307: LD_INT 3
32309: PUSH
32310: LD_INT 3
32312: PUSH
32313: EMPTY
32314: LIST
32315: LIST
32316: PUSH
32317: LD_INT 2
32319: PUSH
32320: LD_INT 3
32322: PUSH
32323: EMPTY
32324: LIST
32325: LIST
32326: PUSH
32327: LD_INT 2
32329: NEG
32330: PUSH
32331: LD_INT 1
32333: PUSH
32334: EMPTY
32335: LIST
32336: LIST
32337: PUSH
32338: LD_INT 3
32340: NEG
32341: PUSH
32342: LD_INT 0
32344: PUSH
32345: EMPTY
32346: LIST
32347: LIST
32348: PUSH
32349: LD_INT 3
32351: NEG
32352: PUSH
32353: LD_INT 1
32355: NEG
32356: PUSH
32357: EMPTY
32358: LIST
32359: LIST
32360: PUSH
32361: LD_INT 3
32363: NEG
32364: PUSH
32365: LD_INT 2
32367: NEG
32368: PUSH
32369: EMPTY
32370: LIST
32371: LIST
32372: PUSH
32373: LD_INT 3
32375: NEG
32376: PUSH
32377: LD_INT 3
32379: NEG
32380: PUSH
32381: EMPTY
32382: LIST
32383: LIST
32384: PUSH
32385: EMPTY
32386: LIST
32387: LIST
32388: LIST
32389: LIST
32390: LIST
32391: LIST
32392: LIST
32393: LIST
32394: LIST
32395: LIST
32396: LIST
32397: LIST
32398: LIST
32399: LIST
32400: LIST
32401: LIST
32402: LIST
32403: LIST
32404: LIST
32405: LIST
32406: LIST
32407: LIST
32408: LIST
32409: LIST
32410: LIST
32411: LIST
32412: LIST
32413: LIST
32414: LIST
32415: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
32416: LD_ADDR_VAR 0 45
32420: PUSH
32421: LD_INT 0
32423: PUSH
32424: LD_INT 0
32426: PUSH
32427: EMPTY
32428: LIST
32429: LIST
32430: PUSH
32431: LD_INT 0
32433: PUSH
32434: LD_INT 1
32436: NEG
32437: PUSH
32438: EMPTY
32439: LIST
32440: LIST
32441: PUSH
32442: LD_INT 1
32444: PUSH
32445: LD_INT 0
32447: PUSH
32448: EMPTY
32449: LIST
32450: LIST
32451: PUSH
32452: LD_INT 1
32454: PUSH
32455: LD_INT 1
32457: PUSH
32458: EMPTY
32459: LIST
32460: LIST
32461: PUSH
32462: LD_INT 0
32464: PUSH
32465: LD_INT 1
32467: PUSH
32468: EMPTY
32469: LIST
32470: LIST
32471: PUSH
32472: LD_INT 1
32474: NEG
32475: PUSH
32476: LD_INT 0
32478: PUSH
32479: EMPTY
32480: LIST
32481: LIST
32482: PUSH
32483: LD_INT 1
32485: NEG
32486: PUSH
32487: LD_INT 1
32489: NEG
32490: PUSH
32491: EMPTY
32492: LIST
32493: LIST
32494: PUSH
32495: LD_INT 1
32497: NEG
32498: PUSH
32499: LD_INT 2
32501: NEG
32502: PUSH
32503: EMPTY
32504: LIST
32505: LIST
32506: PUSH
32507: LD_INT 0
32509: PUSH
32510: LD_INT 2
32512: NEG
32513: PUSH
32514: EMPTY
32515: LIST
32516: LIST
32517: PUSH
32518: LD_INT 1
32520: PUSH
32521: LD_INT 1
32523: NEG
32524: PUSH
32525: EMPTY
32526: LIST
32527: LIST
32528: PUSH
32529: LD_INT 2
32531: PUSH
32532: LD_INT 1
32534: PUSH
32535: EMPTY
32536: LIST
32537: LIST
32538: PUSH
32539: LD_INT 2
32541: PUSH
32542: LD_INT 2
32544: PUSH
32545: EMPTY
32546: LIST
32547: LIST
32548: PUSH
32549: LD_INT 1
32551: PUSH
32552: LD_INT 2
32554: PUSH
32555: EMPTY
32556: LIST
32557: LIST
32558: PUSH
32559: LD_INT 0
32561: PUSH
32562: LD_INT 2
32564: PUSH
32565: EMPTY
32566: LIST
32567: LIST
32568: PUSH
32569: LD_INT 1
32571: NEG
32572: PUSH
32573: LD_INT 1
32575: PUSH
32576: EMPTY
32577: LIST
32578: LIST
32579: PUSH
32580: LD_INT 2
32582: NEG
32583: PUSH
32584: LD_INT 1
32586: NEG
32587: PUSH
32588: EMPTY
32589: LIST
32590: LIST
32591: PUSH
32592: LD_INT 2
32594: NEG
32595: PUSH
32596: LD_INT 2
32598: NEG
32599: PUSH
32600: EMPTY
32601: LIST
32602: LIST
32603: PUSH
32604: LD_INT 2
32606: NEG
32607: PUSH
32608: LD_INT 3
32610: NEG
32611: PUSH
32612: EMPTY
32613: LIST
32614: LIST
32615: PUSH
32616: LD_INT 1
32618: NEG
32619: PUSH
32620: LD_INT 3
32622: NEG
32623: PUSH
32624: EMPTY
32625: LIST
32626: LIST
32627: PUSH
32628: LD_INT 0
32630: PUSH
32631: LD_INT 3
32633: NEG
32634: PUSH
32635: EMPTY
32636: LIST
32637: LIST
32638: PUSH
32639: LD_INT 1
32641: PUSH
32642: LD_INT 2
32644: NEG
32645: PUSH
32646: EMPTY
32647: LIST
32648: LIST
32649: PUSH
32650: LD_INT 3
32652: PUSH
32653: LD_INT 2
32655: PUSH
32656: EMPTY
32657: LIST
32658: LIST
32659: PUSH
32660: LD_INT 3
32662: PUSH
32663: LD_INT 3
32665: PUSH
32666: EMPTY
32667: LIST
32668: LIST
32669: PUSH
32670: LD_INT 2
32672: PUSH
32673: LD_INT 3
32675: PUSH
32676: EMPTY
32677: LIST
32678: LIST
32679: PUSH
32680: LD_INT 1
32682: PUSH
32683: LD_INT 3
32685: PUSH
32686: EMPTY
32687: LIST
32688: LIST
32689: PUSH
32690: LD_INT 0
32692: PUSH
32693: LD_INT 3
32695: PUSH
32696: EMPTY
32697: LIST
32698: LIST
32699: PUSH
32700: LD_INT 1
32702: NEG
32703: PUSH
32704: LD_INT 2
32706: PUSH
32707: EMPTY
32708: LIST
32709: LIST
32710: PUSH
32711: LD_INT 3
32713: NEG
32714: PUSH
32715: LD_INT 2
32717: NEG
32718: PUSH
32719: EMPTY
32720: LIST
32721: LIST
32722: PUSH
32723: LD_INT 3
32725: NEG
32726: PUSH
32727: LD_INT 3
32729: NEG
32730: PUSH
32731: EMPTY
32732: LIST
32733: LIST
32734: PUSH
32735: EMPTY
32736: LIST
32737: LIST
32738: LIST
32739: LIST
32740: LIST
32741: LIST
32742: LIST
32743: LIST
32744: LIST
32745: LIST
32746: LIST
32747: LIST
32748: LIST
32749: LIST
32750: LIST
32751: LIST
32752: LIST
32753: LIST
32754: LIST
32755: LIST
32756: LIST
32757: LIST
32758: LIST
32759: LIST
32760: LIST
32761: LIST
32762: LIST
32763: LIST
32764: LIST
32765: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
32766: LD_ADDR_VAR 0 46
32770: PUSH
32771: LD_INT 0
32773: PUSH
32774: LD_INT 0
32776: PUSH
32777: EMPTY
32778: LIST
32779: LIST
32780: PUSH
32781: LD_INT 0
32783: PUSH
32784: LD_INT 1
32786: NEG
32787: PUSH
32788: EMPTY
32789: LIST
32790: LIST
32791: PUSH
32792: LD_INT 1
32794: PUSH
32795: LD_INT 0
32797: PUSH
32798: EMPTY
32799: LIST
32800: LIST
32801: PUSH
32802: LD_INT 1
32804: PUSH
32805: LD_INT 1
32807: PUSH
32808: EMPTY
32809: LIST
32810: LIST
32811: PUSH
32812: LD_INT 0
32814: PUSH
32815: LD_INT 1
32817: PUSH
32818: EMPTY
32819: LIST
32820: LIST
32821: PUSH
32822: LD_INT 1
32824: NEG
32825: PUSH
32826: LD_INT 0
32828: PUSH
32829: EMPTY
32830: LIST
32831: LIST
32832: PUSH
32833: LD_INT 1
32835: NEG
32836: PUSH
32837: LD_INT 1
32839: NEG
32840: PUSH
32841: EMPTY
32842: LIST
32843: LIST
32844: PUSH
32845: LD_INT 1
32847: NEG
32848: PUSH
32849: LD_INT 2
32851: NEG
32852: PUSH
32853: EMPTY
32854: LIST
32855: LIST
32856: PUSH
32857: LD_INT 0
32859: PUSH
32860: LD_INT 2
32862: NEG
32863: PUSH
32864: EMPTY
32865: LIST
32866: LIST
32867: PUSH
32868: LD_INT 1
32870: PUSH
32871: LD_INT 1
32873: NEG
32874: PUSH
32875: EMPTY
32876: LIST
32877: LIST
32878: PUSH
32879: LD_INT 2
32881: PUSH
32882: LD_INT 0
32884: PUSH
32885: EMPTY
32886: LIST
32887: LIST
32888: PUSH
32889: LD_INT 2
32891: PUSH
32892: LD_INT 1
32894: PUSH
32895: EMPTY
32896: LIST
32897: LIST
32898: PUSH
32899: LD_INT 1
32901: PUSH
32902: LD_INT 2
32904: PUSH
32905: EMPTY
32906: LIST
32907: LIST
32908: PUSH
32909: LD_INT 0
32911: PUSH
32912: LD_INT 2
32914: PUSH
32915: EMPTY
32916: LIST
32917: LIST
32918: PUSH
32919: LD_INT 1
32921: NEG
32922: PUSH
32923: LD_INT 1
32925: PUSH
32926: EMPTY
32927: LIST
32928: LIST
32929: PUSH
32930: LD_INT 2
32932: NEG
32933: PUSH
32934: LD_INT 0
32936: PUSH
32937: EMPTY
32938: LIST
32939: LIST
32940: PUSH
32941: LD_INT 2
32943: NEG
32944: PUSH
32945: LD_INT 1
32947: NEG
32948: PUSH
32949: EMPTY
32950: LIST
32951: LIST
32952: PUSH
32953: LD_INT 1
32955: NEG
32956: PUSH
32957: LD_INT 3
32959: NEG
32960: PUSH
32961: EMPTY
32962: LIST
32963: LIST
32964: PUSH
32965: LD_INT 0
32967: PUSH
32968: LD_INT 3
32970: NEG
32971: PUSH
32972: EMPTY
32973: LIST
32974: LIST
32975: PUSH
32976: LD_INT 1
32978: PUSH
32979: LD_INT 2
32981: NEG
32982: PUSH
32983: EMPTY
32984: LIST
32985: LIST
32986: PUSH
32987: LD_INT 2
32989: PUSH
32990: LD_INT 1
32992: NEG
32993: PUSH
32994: EMPTY
32995: LIST
32996: LIST
32997: PUSH
32998: LD_INT 3
33000: PUSH
33001: LD_INT 0
33003: PUSH
33004: EMPTY
33005: LIST
33006: LIST
33007: PUSH
33008: LD_INT 3
33010: PUSH
33011: LD_INT 1
33013: PUSH
33014: EMPTY
33015: LIST
33016: LIST
33017: PUSH
33018: LD_INT 1
33020: PUSH
33021: LD_INT 3
33023: PUSH
33024: EMPTY
33025: LIST
33026: LIST
33027: PUSH
33028: LD_INT 0
33030: PUSH
33031: LD_INT 3
33033: PUSH
33034: EMPTY
33035: LIST
33036: LIST
33037: PUSH
33038: LD_INT 1
33040: NEG
33041: PUSH
33042: LD_INT 2
33044: PUSH
33045: EMPTY
33046: LIST
33047: LIST
33048: PUSH
33049: LD_INT 2
33051: NEG
33052: PUSH
33053: LD_INT 1
33055: PUSH
33056: EMPTY
33057: LIST
33058: LIST
33059: PUSH
33060: LD_INT 3
33062: NEG
33063: PUSH
33064: LD_INT 0
33066: PUSH
33067: EMPTY
33068: LIST
33069: LIST
33070: PUSH
33071: LD_INT 3
33073: NEG
33074: PUSH
33075: LD_INT 1
33077: NEG
33078: PUSH
33079: EMPTY
33080: LIST
33081: LIST
33082: PUSH
33083: EMPTY
33084: LIST
33085: LIST
33086: LIST
33087: LIST
33088: LIST
33089: LIST
33090: LIST
33091: LIST
33092: LIST
33093: LIST
33094: LIST
33095: LIST
33096: LIST
33097: LIST
33098: LIST
33099: LIST
33100: LIST
33101: LIST
33102: LIST
33103: LIST
33104: LIST
33105: LIST
33106: LIST
33107: LIST
33108: LIST
33109: LIST
33110: LIST
33111: LIST
33112: LIST
33113: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33114: LD_ADDR_VAR 0 47
33118: PUSH
33119: LD_INT 0
33121: PUSH
33122: LD_INT 0
33124: PUSH
33125: EMPTY
33126: LIST
33127: LIST
33128: PUSH
33129: LD_INT 0
33131: PUSH
33132: LD_INT 1
33134: NEG
33135: PUSH
33136: EMPTY
33137: LIST
33138: LIST
33139: PUSH
33140: LD_INT 1
33142: PUSH
33143: LD_INT 0
33145: PUSH
33146: EMPTY
33147: LIST
33148: LIST
33149: PUSH
33150: LD_INT 1
33152: PUSH
33153: LD_INT 1
33155: PUSH
33156: EMPTY
33157: LIST
33158: LIST
33159: PUSH
33160: LD_INT 0
33162: PUSH
33163: LD_INT 1
33165: PUSH
33166: EMPTY
33167: LIST
33168: LIST
33169: PUSH
33170: LD_INT 1
33172: NEG
33173: PUSH
33174: LD_INT 0
33176: PUSH
33177: EMPTY
33178: LIST
33179: LIST
33180: PUSH
33181: LD_INT 1
33183: NEG
33184: PUSH
33185: LD_INT 1
33187: NEG
33188: PUSH
33189: EMPTY
33190: LIST
33191: LIST
33192: PUSH
33193: LD_INT 1
33195: NEG
33196: PUSH
33197: LD_INT 2
33199: NEG
33200: PUSH
33201: EMPTY
33202: LIST
33203: LIST
33204: PUSH
33205: LD_INT 0
33207: PUSH
33208: LD_INT 2
33210: NEG
33211: PUSH
33212: EMPTY
33213: LIST
33214: LIST
33215: PUSH
33216: LD_INT 1
33218: PUSH
33219: LD_INT 1
33221: NEG
33222: PUSH
33223: EMPTY
33224: LIST
33225: LIST
33226: PUSH
33227: LD_INT 2
33229: NEG
33230: PUSH
33231: LD_INT 1
33233: NEG
33234: PUSH
33235: EMPTY
33236: LIST
33237: LIST
33238: PUSH
33239: LD_INT 2
33241: NEG
33242: PUSH
33243: LD_INT 2
33245: NEG
33246: PUSH
33247: EMPTY
33248: LIST
33249: LIST
33250: PUSH
33251: EMPTY
33252: LIST
33253: LIST
33254: LIST
33255: LIST
33256: LIST
33257: LIST
33258: LIST
33259: LIST
33260: LIST
33261: LIST
33262: LIST
33263: LIST
33264: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
33265: LD_ADDR_VAR 0 48
33269: PUSH
33270: LD_INT 0
33272: PUSH
33273: LD_INT 0
33275: PUSH
33276: EMPTY
33277: LIST
33278: LIST
33279: PUSH
33280: LD_INT 0
33282: PUSH
33283: LD_INT 1
33285: NEG
33286: PUSH
33287: EMPTY
33288: LIST
33289: LIST
33290: PUSH
33291: LD_INT 1
33293: PUSH
33294: LD_INT 0
33296: PUSH
33297: EMPTY
33298: LIST
33299: LIST
33300: PUSH
33301: LD_INT 1
33303: PUSH
33304: LD_INT 1
33306: PUSH
33307: EMPTY
33308: LIST
33309: LIST
33310: PUSH
33311: LD_INT 0
33313: PUSH
33314: LD_INT 1
33316: PUSH
33317: EMPTY
33318: LIST
33319: LIST
33320: PUSH
33321: LD_INT 1
33323: NEG
33324: PUSH
33325: LD_INT 0
33327: PUSH
33328: EMPTY
33329: LIST
33330: LIST
33331: PUSH
33332: LD_INT 1
33334: NEG
33335: PUSH
33336: LD_INT 1
33338: NEG
33339: PUSH
33340: EMPTY
33341: LIST
33342: LIST
33343: PUSH
33344: LD_INT 1
33346: NEG
33347: PUSH
33348: LD_INT 2
33350: NEG
33351: PUSH
33352: EMPTY
33353: LIST
33354: LIST
33355: PUSH
33356: LD_INT 0
33358: PUSH
33359: LD_INT 2
33361: NEG
33362: PUSH
33363: EMPTY
33364: LIST
33365: LIST
33366: PUSH
33367: LD_INT 1
33369: PUSH
33370: LD_INT 1
33372: NEG
33373: PUSH
33374: EMPTY
33375: LIST
33376: LIST
33377: PUSH
33378: LD_INT 2
33380: PUSH
33381: LD_INT 0
33383: PUSH
33384: EMPTY
33385: LIST
33386: LIST
33387: PUSH
33388: LD_INT 2
33390: PUSH
33391: LD_INT 1
33393: PUSH
33394: EMPTY
33395: LIST
33396: LIST
33397: PUSH
33398: EMPTY
33399: LIST
33400: LIST
33401: LIST
33402: LIST
33403: LIST
33404: LIST
33405: LIST
33406: LIST
33407: LIST
33408: LIST
33409: LIST
33410: LIST
33411: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
33412: LD_ADDR_VAR 0 49
33416: PUSH
33417: LD_INT 0
33419: PUSH
33420: LD_INT 0
33422: PUSH
33423: EMPTY
33424: LIST
33425: LIST
33426: PUSH
33427: LD_INT 0
33429: PUSH
33430: LD_INT 1
33432: NEG
33433: PUSH
33434: EMPTY
33435: LIST
33436: LIST
33437: PUSH
33438: LD_INT 1
33440: PUSH
33441: LD_INT 0
33443: PUSH
33444: EMPTY
33445: LIST
33446: LIST
33447: PUSH
33448: LD_INT 1
33450: PUSH
33451: LD_INT 1
33453: PUSH
33454: EMPTY
33455: LIST
33456: LIST
33457: PUSH
33458: LD_INT 0
33460: PUSH
33461: LD_INT 1
33463: PUSH
33464: EMPTY
33465: LIST
33466: LIST
33467: PUSH
33468: LD_INT 1
33470: NEG
33471: PUSH
33472: LD_INT 0
33474: PUSH
33475: EMPTY
33476: LIST
33477: LIST
33478: PUSH
33479: LD_INT 1
33481: NEG
33482: PUSH
33483: LD_INT 1
33485: NEG
33486: PUSH
33487: EMPTY
33488: LIST
33489: LIST
33490: PUSH
33491: LD_INT 1
33493: PUSH
33494: LD_INT 1
33496: NEG
33497: PUSH
33498: EMPTY
33499: LIST
33500: LIST
33501: PUSH
33502: LD_INT 2
33504: PUSH
33505: LD_INT 0
33507: PUSH
33508: EMPTY
33509: LIST
33510: LIST
33511: PUSH
33512: LD_INT 2
33514: PUSH
33515: LD_INT 1
33517: PUSH
33518: EMPTY
33519: LIST
33520: LIST
33521: PUSH
33522: LD_INT 2
33524: PUSH
33525: LD_INT 2
33527: PUSH
33528: EMPTY
33529: LIST
33530: LIST
33531: PUSH
33532: LD_INT 1
33534: PUSH
33535: LD_INT 2
33537: PUSH
33538: EMPTY
33539: LIST
33540: LIST
33541: PUSH
33542: EMPTY
33543: LIST
33544: LIST
33545: LIST
33546: LIST
33547: LIST
33548: LIST
33549: LIST
33550: LIST
33551: LIST
33552: LIST
33553: LIST
33554: LIST
33555: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
33556: LD_ADDR_VAR 0 50
33560: PUSH
33561: LD_INT 0
33563: PUSH
33564: LD_INT 0
33566: PUSH
33567: EMPTY
33568: LIST
33569: LIST
33570: PUSH
33571: LD_INT 0
33573: PUSH
33574: LD_INT 1
33576: NEG
33577: PUSH
33578: EMPTY
33579: LIST
33580: LIST
33581: PUSH
33582: LD_INT 1
33584: PUSH
33585: LD_INT 0
33587: PUSH
33588: EMPTY
33589: LIST
33590: LIST
33591: PUSH
33592: LD_INT 1
33594: PUSH
33595: LD_INT 1
33597: PUSH
33598: EMPTY
33599: LIST
33600: LIST
33601: PUSH
33602: LD_INT 0
33604: PUSH
33605: LD_INT 1
33607: PUSH
33608: EMPTY
33609: LIST
33610: LIST
33611: PUSH
33612: LD_INT 1
33614: NEG
33615: PUSH
33616: LD_INT 0
33618: PUSH
33619: EMPTY
33620: LIST
33621: LIST
33622: PUSH
33623: LD_INT 1
33625: NEG
33626: PUSH
33627: LD_INT 1
33629: NEG
33630: PUSH
33631: EMPTY
33632: LIST
33633: LIST
33634: PUSH
33635: LD_INT 2
33637: PUSH
33638: LD_INT 1
33640: PUSH
33641: EMPTY
33642: LIST
33643: LIST
33644: PUSH
33645: LD_INT 2
33647: PUSH
33648: LD_INT 2
33650: PUSH
33651: EMPTY
33652: LIST
33653: LIST
33654: PUSH
33655: LD_INT 1
33657: PUSH
33658: LD_INT 2
33660: PUSH
33661: EMPTY
33662: LIST
33663: LIST
33664: PUSH
33665: LD_INT 0
33667: PUSH
33668: LD_INT 2
33670: PUSH
33671: EMPTY
33672: LIST
33673: LIST
33674: PUSH
33675: LD_INT 1
33677: NEG
33678: PUSH
33679: LD_INT 1
33681: PUSH
33682: EMPTY
33683: LIST
33684: LIST
33685: PUSH
33686: EMPTY
33687: LIST
33688: LIST
33689: LIST
33690: LIST
33691: LIST
33692: LIST
33693: LIST
33694: LIST
33695: LIST
33696: LIST
33697: LIST
33698: LIST
33699: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
33700: LD_ADDR_VAR 0 51
33704: PUSH
33705: LD_INT 0
33707: PUSH
33708: LD_INT 0
33710: PUSH
33711: EMPTY
33712: LIST
33713: LIST
33714: PUSH
33715: LD_INT 0
33717: PUSH
33718: LD_INT 1
33720: NEG
33721: PUSH
33722: EMPTY
33723: LIST
33724: LIST
33725: PUSH
33726: LD_INT 1
33728: PUSH
33729: LD_INT 0
33731: PUSH
33732: EMPTY
33733: LIST
33734: LIST
33735: PUSH
33736: LD_INT 1
33738: PUSH
33739: LD_INT 1
33741: PUSH
33742: EMPTY
33743: LIST
33744: LIST
33745: PUSH
33746: LD_INT 0
33748: PUSH
33749: LD_INT 1
33751: PUSH
33752: EMPTY
33753: LIST
33754: LIST
33755: PUSH
33756: LD_INT 1
33758: NEG
33759: PUSH
33760: LD_INT 0
33762: PUSH
33763: EMPTY
33764: LIST
33765: LIST
33766: PUSH
33767: LD_INT 1
33769: NEG
33770: PUSH
33771: LD_INT 1
33773: NEG
33774: PUSH
33775: EMPTY
33776: LIST
33777: LIST
33778: PUSH
33779: LD_INT 1
33781: PUSH
33782: LD_INT 2
33784: PUSH
33785: EMPTY
33786: LIST
33787: LIST
33788: PUSH
33789: LD_INT 0
33791: PUSH
33792: LD_INT 2
33794: PUSH
33795: EMPTY
33796: LIST
33797: LIST
33798: PUSH
33799: LD_INT 1
33801: NEG
33802: PUSH
33803: LD_INT 1
33805: PUSH
33806: EMPTY
33807: LIST
33808: LIST
33809: PUSH
33810: LD_INT 2
33812: NEG
33813: PUSH
33814: LD_INT 0
33816: PUSH
33817: EMPTY
33818: LIST
33819: LIST
33820: PUSH
33821: LD_INT 2
33823: NEG
33824: PUSH
33825: LD_INT 1
33827: NEG
33828: PUSH
33829: EMPTY
33830: LIST
33831: LIST
33832: PUSH
33833: EMPTY
33834: LIST
33835: LIST
33836: LIST
33837: LIST
33838: LIST
33839: LIST
33840: LIST
33841: LIST
33842: LIST
33843: LIST
33844: LIST
33845: LIST
33846: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33847: LD_ADDR_VAR 0 52
33851: PUSH
33852: LD_INT 0
33854: PUSH
33855: LD_INT 0
33857: PUSH
33858: EMPTY
33859: LIST
33860: LIST
33861: PUSH
33862: LD_INT 0
33864: PUSH
33865: LD_INT 1
33867: NEG
33868: PUSH
33869: EMPTY
33870: LIST
33871: LIST
33872: PUSH
33873: LD_INT 1
33875: PUSH
33876: LD_INT 0
33878: PUSH
33879: EMPTY
33880: LIST
33881: LIST
33882: PUSH
33883: LD_INT 1
33885: PUSH
33886: LD_INT 1
33888: PUSH
33889: EMPTY
33890: LIST
33891: LIST
33892: PUSH
33893: LD_INT 0
33895: PUSH
33896: LD_INT 1
33898: PUSH
33899: EMPTY
33900: LIST
33901: LIST
33902: PUSH
33903: LD_INT 1
33905: NEG
33906: PUSH
33907: LD_INT 0
33909: PUSH
33910: EMPTY
33911: LIST
33912: LIST
33913: PUSH
33914: LD_INT 1
33916: NEG
33917: PUSH
33918: LD_INT 1
33920: NEG
33921: PUSH
33922: EMPTY
33923: LIST
33924: LIST
33925: PUSH
33926: LD_INT 1
33928: NEG
33929: PUSH
33930: LD_INT 2
33932: NEG
33933: PUSH
33934: EMPTY
33935: LIST
33936: LIST
33937: PUSH
33938: LD_INT 1
33940: NEG
33941: PUSH
33942: LD_INT 1
33944: PUSH
33945: EMPTY
33946: LIST
33947: LIST
33948: PUSH
33949: LD_INT 2
33951: NEG
33952: PUSH
33953: LD_INT 0
33955: PUSH
33956: EMPTY
33957: LIST
33958: LIST
33959: PUSH
33960: LD_INT 2
33962: NEG
33963: PUSH
33964: LD_INT 1
33966: NEG
33967: PUSH
33968: EMPTY
33969: LIST
33970: LIST
33971: PUSH
33972: LD_INT 2
33974: NEG
33975: PUSH
33976: LD_INT 2
33978: NEG
33979: PUSH
33980: EMPTY
33981: LIST
33982: LIST
33983: PUSH
33984: EMPTY
33985: LIST
33986: LIST
33987: LIST
33988: LIST
33989: LIST
33990: LIST
33991: LIST
33992: LIST
33993: LIST
33994: LIST
33995: LIST
33996: LIST
33997: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33998: LD_ADDR_VAR 0 53
34002: PUSH
34003: LD_INT 0
34005: PUSH
34006: LD_INT 0
34008: PUSH
34009: EMPTY
34010: LIST
34011: LIST
34012: PUSH
34013: LD_INT 0
34015: PUSH
34016: LD_INT 1
34018: NEG
34019: PUSH
34020: EMPTY
34021: LIST
34022: LIST
34023: PUSH
34024: LD_INT 1
34026: PUSH
34027: LD_INT 0
34029: PUSH
34030: EMPTY
34031: LIST
34032: LIST
34033: PUSH
34034: LD_INT 1
34036: PUSH
34037: LD_INT 1
34039: PUSH
34040: EMPTY
34041: LIST
34042: LIST
34043: PUSH
34044: LD_INT 0
34046: PUSH
34047: LD_INT 1
34049: PUSH
34050: EMPTY
34051: LIST
34052: LIST
34053: PUSH
34054: LD_INT 1
34056: NEG
34057: PUSH
34058: LD_INT 0
34060: PUSH
34061: EMPTY
34062: LIST
34063: LIST
34064: PUSH
34065: LD_INT 1
34067: NEG
34068: PUSH
34069: LD_INT 1
34071: NEG
34072: PUSH
34073: EMPTY
34074: LIST
34075: LIST
34076: PUSH
34077: LD_INT 1
34079: NEG
34080: PUSH
34081: LD_INT 2
34083: NEG
34084: PUSH
34085: EMPTY
34086: LIST
34087: LIST
34088: PUSH
34089: LD_INT 0
34091: PUSH
34092: LD_INT 2
34094: NEG
34095: PUSH
34096: EMPTY
34097: LIST
34098: LIST
34099: PUSH
34100: LD_INT 1
34102: PUSH
34103: LD_INT 1
34105: NEG
34106: PUSH
34107: EMPTY
34108: LIST
34109: LIST
34110: PUSH
34111: LD_INT 2
34113: PUSH
34114: LD_INT 0
34116: PUSH
34117: EMPTY
34118: LIST
34119: LIST
34120: PUSH
34121: LD_INT 2
34123: PUSH
34124: LD_INT 1
34126: PUSH
34127: EMPTY
34128: LIST
34129: LIST
34130: PUSH
34131: LD_INT 2
34133: PUSH
34134: LD_INT 2
34136: PUSH
34137: EMPTY
34138: LIST
34139: LIST
34140: PUSH
34141: LD_INT 1
34143: PUSH
34144: LD_INT 2
34146: PUSH
34147: EMPTY
34148: LIST
34149: LIST
34150: PUSH
34151: LD_INT 0
34153: PUSH
34154: LD_INT 2
34156: PUSH
34157: EMPTY
34158: LIST
34159: LIST
34160: PUSH
34161: LD_INT 1
34163: NEG
34164: PUSH
34165: LD_INT 1
34167: PUSH
34168: EMPTY
34169: LIST
34170: LIST
34171: PUSH
34172: LD_INT 2
34174: NEG
34175: PUSH
34176: LD_INT 0
34178: PUSH
34179: EMPTY
34180: LIST
34181: LIST
34182: PUSH
34183: LD_INT 2
34185: NEG
34186: PUSH
34187: LD_INT 1
34189: NEG
34190: PUSH
34191: EMPTY
34192: LIST
34193: LIST
34194: PUSH
34195: LD_INT 2
34197: NEG
34198: PUSH
34199: LD_INT 2
34201: NEG
34202: PUSH
34203: EMPTY
34204: LIST
34205: LIST
34206: PUSH
34207: EMPTY
34208: LIST
34209: LIST
34210: LIST
34211: LIST
34212: LIST
34213: LIST
34214: LIST
34215: LIST
34216: LIST
34217: LIST
34218: LIST
34219: LIST
34220: LIST
34221: LIST
34222: LIST
34223: LIST
34224: LIST
34225: LIST
34226: LIST
34227: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34228: LD_ADDR_VAR 0 54
34232: PUSH
34233: LD_INT 0
34235: PUSH
34236: LD_INT 0
34238: PUSH
34239: EMPTY
34240: LIST
34241: LIST
34242: PUSH
34243: LD_INT 0
34245: PUSH
34246: LD_INT 1
34248: NEG
34249: PUSH
34250: EMPTY
34251: LIST
34252: LIST
34253: PUSH
34254: LD_INT 1
34256: PUSH
34257: LD_INT 0
34259: PUSH
34260: EMPTY
34261: LIST
34262: LIST
34263: PUSH
34264: LD_INT 1
34266: PUSH
34267: LD_INT 1
34269: PUSH
34270: EMPTY
34271: LIST
34272: LIST
34273: PUSH
34274: LD_INT 0
34276: PUSH
34277: LD_INT 1
34279: PUSH
34280: EMPTY
34281: LIST
34282: LIST
34283: PUSH
34284: LD_INT 1
34286: NEG
34287: PUSH
34288: LD_INT 0
34290: PUSH
34291: EMPTY
34292: LIST
34293: LIST
34294: PUSH
34295: LD_INT 1
34297: NEG
34298: PUSH
34299: LD_INT 1
34301: NEG
34302: PUSH
34303: EMPTY
34304: LIST
34305: LIST
34306: PUSH
34307: LD_INT 1
34309: NEG
34310: PUSH
34311: LD_INT 2
34313: NEG
34314: PUSH
34315: EMPTY
34316: LIST
34317: LIST
34318: PUSH
34319: LD_INT 0
34321: PUSH
34322: LD_INT 2
34324: NEG
34325: PUSH
34326: EMPTY
34327: LIST
34328: LIST
34329: PUSH
34330: LD_INT 1
34332: PUSH
34333: LD_INT 1
34335: NEG
34336: PUSH
34337: EMPTY
34338: LIST
34339: LIST
34340: PUSH
34341: LD_INT 2
34343: PUSH
34344: LD_INT 0
34346: PUSH
34347: EMPTY
34348: LIST
34349: LIST
34350: PUSH
34351: LD_INT 2
34353: PUSH
34354: LD_INT 1
34356: PUSH
34357: EMPTY
34358: LIST
34359: LIST
34360: PUSH
34361: LD_INT 2
34363: PUSH
34364: LD_INT 2
34366: PUSH
34367: EMPTY
34368: LIST
34369: LIST
34370: PUSH
34371: LD_INT 1
34373: PUSH
34374: LD_INT 2
34376: PUSH
34377: EMPTY
34378: LIST
34379: LIST
34380: PUSH
34381: LD_INT 0
34383: PUSH
34384: LD_INT 2
34386: PUSH
34387: EMPTY
34388: LIST
34389: LIST
34390: PUSH
34391: LD_INT 1
34393: NEG
34394: PUSH
34395: LD_INT 1
34397: PUSH
34398: EMPTY
34399: LIST
34400: LIST
34401: PUSH
34402: LD_INT 2
34404: NEG
34405: PUSH
34406: LD_INT 0
34408: PUSH
34409: EMPTY
34410: LIST
34411: LIST
34412: PUSH
34413: LD_INT 2
34415: NEG
34416: PUSH
34417: LD_INT 1
34419: NEG
34420: PUSH
34421: EMPTY
34422: LIST
34423: LIST
34424: PUSH
34425: LD_INT 2
34427: NEG
34428: PUSH
34429: LD_INT 2
34431: NEG
34432: PUSH
34433: EMPTY
34434: LIST
34435: LIST
34436: PUSH
34437: EMPTY
34438: LIST
34439: LIST
34440: LIST
34441: LIST
34442: LIST
34443: LIST
34444: LIST
34445: LIST
34446: LIST
34447: LIST
34448: LIST
34449: LIST
34450: LIST
34451: LIST
34452: LIST
34453: LIST
34454: LIST
34455: LIST
34456: LIST
34457: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34458: LD_ADDR_VAR 0 55
34462: PUSH
34463: LD_INT 0
34465: PUSH
34466: LD_INT 0
34468: PUSH
34469: EMPTY
34470: LIST
34471: LIST
34472: PUSH
34473: LD_INT 0
34475: PUSH
34476: LD_INT 1
34478: NEG
34479: PUSH
34480: EMPTY
34481: LIST
34482: LIST
34483: PUSH
34484: LD_INT 1
34486: PUSH
34487: LD_INT 0
34489: PUSH
34490: EMPTY
34491: LIST
34492: LIST
34493: PUSH
34494: LD_INT 1
34496: PUSH
34497: LD_INT 1
34499: PUSH
34500: EMPTY
34501: LIST
34502: LIST
34503: PUSH
34504: LD_INT 0
34506: PUSH
34507: LD_INT 1
34509: PUSH
34510: EMPTY
34511: LIST
34512: LIST
34513: PUSH
34514: LD_INT 1
34516: NEG
34517: PUSH
34518: LD_INT 0
34520: PUSH
34521: EMPTY
34522: LIST
34523: LIST
34524: PUSH
34525: LD_INT 1
34527: NEG
34528: PUSH
34529: LD_INT 1
34531: NEG
34532: PUSH
34533: EMPTY
34534: LIST
34535: LIST
34536: PUSH
34537: LD_INT 1
34539: NEG
34540: PUSH
34541: LD_INT 2
34543: NEG
34544: PUSH
34545: EMPTY
34546: LIST
34547: LIST
34548: PUSH
34549: LD_INT 0
34551: PUSH
34552: LD_INT 2
34554: NEG
34555: PUSH
34556: EMPTY
34557: LIST
34558: LIST
34559: PUSH
34560: LD_INT 1
34562: PUSH
34563: LD_INT 1
34565: NEG
34566: PUSH
34567: EMPTY
34568: LIST
34569: LIST
34570: PUSH
34571: LD_INT 2
34573: PUSH
34574: LD_INT 0
34576: PUSH
34577: EMPTY
34578: LIST
34579: LIST
34580: PUSH
34581: LD_INT 2
34583: PUSH
34584: LD_INT 1
34586: PUSH
34587: EMPTY
34588: LIST
34589: LIST
34590: PUSH
34591: LD_INT 2
34593: PUSH
34594: LD_INT 2
34596: PUSH
34597: EMPTY
34598: LIST
34599: LIST
34600: PUSH
34601: LD_INT 1
34603: PUSH
34604: LD_INT 2
34606: PUSH
34607: EMPTY
34608: LIST
34609: LIST
34610: PUSH
34611: LD_INT 0
34613: PUSH
34614: LD_INT 2
34616: PUSH
34617: EMPTY
34618: LIST
34619: LIST
34620: PUSH
34621: LD_INT 1
34623: NEG
34624: PUSH
34625: LD_INT 1
34627: PUSH
34628: EMPTY
34629: LIST
34630: LIST
34631: PUSH
34632: LD_INT 2
34634: NEG
34635: PUSH
34636: LD_INT 0
34638: PUSH
34639: EMPTY
34640: LIST
34641: LIST
34642: PUSH
34643: LD_INT 2
34645: NEG
34646: PUSH
34647: LD_INT 1
34649: NEG
34650: PUSH
34651: EMPTY
34652: LIST
34653: LIST
34654: PUSH
34655: LD_INT 2
34657: NEG
34658: PUSH
34659: LD_INT 2
34661: NEG
34662: PUSH
34663: EMPTY
34664: LIST
34665: LIST
34666: PUSH
34667: EMPTY
34668: LIST
34669: LIST
34670: LIST
34671: LIST
34672: LIST
34673: LIST
34674: LIST
34675: LIST
34676: LIST
34677: LIST
34678: LIST
34679: LIST
34680: LIST
34681: LIST
34682: LIST
34683: LIST
34684: LIST
34685: LIST
34686: LIST
34687: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34688: LD_ADDR_VAR 0 56
34692: PUSH
34693: LD_INT 0
34695: PUSH
34696: LD_INT 0
34698: PUSH
34699: EMPTY
34700: LIST
34701: LIST
34702: PUSH
34703: LD_INT 0
34705: PUSH
34706: LD_INT 1
34708: NEG
34709: PUSH
34710: EMPTY
34711: LIST
34712: LIST
34713: PUSH
34714: LD_INT 1
34716: PUSH
34717: LD_INT 0
34719: PUSH
34720: EMPTY
34721: LIST
34722: LIST
34723: PUSH
34724: LD_INT 1
34726: PUSH
34727: LD_INT 1
34729: PUSH
34730: EMPTY
34731: LIST
34732: LIST
34733: PUSH
34734: LD_INT 0
34736: PUSH
34737: LD_INT 1
34739: PUSH
34740: EMPTY
34741: LIST
34742: LIST
34743: PUSH
34744: LD_INT 1
34746: NEG
34747: PUSH
34748: LD_INT 0
34750: PUSH
34751: EMPTY
34752: LIST
34753: LIST
34754: PUSH
34755: LD_INT 1
34757: NEG
34758: PUSH
34759: LD_INT 1
34761: NEG
34762: PUSH
34763: EMPTY
34764: LIST
34765: LIST
34766: PUSH
34767: LD_INT 1
34769: NEG
34770: PUSH
34771: LD_INT 2
34773: NEG
34774: PUSH
34775: EMPTY
34776: LIST
34777: LIST
34778: PUSH
34779: LD_INT 0
34781: PUSH
34782: LD_INT 2
34784: NEG
34785: PUSH
34786: EMPTY
34787: LIST
34788: LIST
34789: PUSH
34790: LD_INT 1
34792: PUSH
34793: LD_INT 1
34795: NEG
34796: PUSH
34797: EMPTY
34798: LIST
34799: LIST
34800: PUSH
34801: LD_INT 2
34803: PUSH
34804: LD_INT 0
34806: PUSH
34807: EMPTY
34808: LIST
34809: LIST
34810: PUSH
34811: LD_INT 2
34813: PUSH
34814: LD_INT 1
34816: PUSH
34817: EMPTY
34818: LIST
34819: LIST
34820: PUSH
34821: LD_INT 2
34823: PUSH
34824: LD_INT 2
34826: PUSH
34827: EMPTY
34828: LIST
34829: LIST
34830: PUSH
34831: LD_INT 1
34833: PUSH
34834: LD_INT 2
34836: PUSH
34837: EMPTY
34838: LIST
34839: LIST
34840: PUSH
34841: LD_INT 0
34843: PUSH
34844: LD_INT 2
34846: PUSH
34847: EMPTY
34848: LIST
34849: LIST
34850: PUSH
34851: LD_INT 1
34853: NEG
34854: PUSH
34855: LD_INT 1
34857: PUSH
34858: EMPTY
34859: LIST
34860: LIST
34861: PUSH
34862: LD_INT 2
34864: NEG
34865: PUSH
34866: LD_INT 0
34868: PUSH
34869: EMPTY
34870: LIST
34871: LIST
34872: PUSH
34873: LD_INT 2
34875: NEG
34876: PUSH
34877: LD_INT 1
34879: NEG
34880: PUSH
34881: EMPTY
34882: LIST
34883: LIST
34884: PUSH
34885: LD_INT 2
34887: NEG
34888: PUSH
34889: LD_INT 2
34891: NEG
34892: PUSH
34893: EMPTY
34894: LIST
34895: LIST
34896: PUSH
34897: EMPTY
34898: LIST
34899: LIST
34900: LIST
34901: LIST
34902: LIST
34903: LIST
34904: LIST
34905: LIST
34906: LIST
34907: LIST
34908: LIST
34909: LIST
34910: LIST
34911: LIST
34912: LIST
34913: LIST
34914: LIST
34915: LIST
34916: LIST
34917: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34918: LD_ADDR_VAR 0 57
34922: PUSH
34923: LD_INT 0
34925: PUSH
34926: LD_INT 0
34928: PUSH
34929: EMPTY
34930: LIST
34931: LIST
34932: PUSH
34933: LD_INT 0
34935: PUSH
34936: LD_INT 1
34938: NEG
34939: PUSH
34940: EMPTY
34941: LIST
34942: LIST
34943: PUSH
34944: LD_INT 1
34946: PUSH
34947: LD_INT 0
34949: PUSH
34950: EMPTY
34951: LIST
34952: LIST
34953: PUSH
34954: LD_INT 1
34956: PUSH
34957: LD_INT 1
34959: PUSH
34960: EMPTY
34961: LIST
34962: LIST
34963: PUSH
34964: LD_INT 0
34966: PUSH
34967: LD_INT 1
34969: PUSH
34970: EMPTY
34971: LIST
34972: LIST
34973: PUSH
34974: LD_INT 1
34976: NEG
34977: PUSH
34978: LD_INT 0
34980: PUSH
34981: EMPTY
34982: LIST
34983: LIST
34984: PUSH
34985: LD_INT 1
34987: NEG
34988: PUSH
34989: LD_INT 1
34991: NEG
34992: PUSH
34993: EMPTY
34994: LIST
34995: LIST
34996: PUSH
34997: LD_INT 1
34999: NEG
35000: PUSH
35001: LD_INT 2
35003: NEG
35004: PUSH
35005: EMPTY
35006: LIST
35007: LIST
35008: PUSH
35009: LD_INT 0
35011: PUSH
35012: LD_INT 2
35014: NEG
35015: PUSH
35016: EMPTY
35017: LIST
35018: LIST
35019: PUSH
35020: LD_INT 1
35022: PUSH
35023: LD_INT 1
35025: NEG
35026: PUSH
35027: EMPTY
35028: LIST
35029: LIST
35030: PUSH
35031: LD_INT 2
35033: PUSH
35034: LD_INT 0
35036: PUSH
35037: EMPTY
35038: LIST
35039: LIST
35040: PUSH
35041: LD_INT 2
35043: PUSH
35044: LD_INT 1
35046: PUSH
35047: EMPTY
35048: LIST
35049: LIST
35050: PUSH
35051: LD_INT 2
35053: PUSH
35054: LD_INT 2
35056: PUSH
35057: EMPTY
35058: LIST
35059: LIST
35060: PUSH
35061: LD_INT 1
35063: PUSH
35064: LD_INT 2
35066: PUSH
35067: EMPTY
35068: LIST
35069: LIST
35070: PUSH
35071: LD_INT 0
35073: PUSH
35074: LD_INT 2
35076: PUSH
35077: EMPTY
35078: LIST
35079: LIST
35080: PUSH
35081: LD_INT 1
35083: NEG
35084: PUSH
35085: LD_INT 1
35087: PUSH
35088: EMPTY
35089: LIST
35090: LIST
35091: PUSH
35092: LD_INT 2
35094: NEG
35095: PUSH
35096: LD_INT 0
35098: PUSH
35099: EMPTY
35100: LIST
35101: LIST
35102: PUSH
35103: LD_INT 2
35105: NEG
35106: PUSH
35107: LD_INT 1
35109: NEG
35110: PUSH
35111: EMPTY
35112: LIST
35113: LIST
35114: PUSH
35115: LD_INT 2
35117: NEG
35118: PUSH
35119: LD_INT 2
35121: NEG
35122: PUSH
35123: EMPTY
35124: LIST
35125: LIST
35126: PUSH
35127: EMPTY
35128: LIST
35129: LIST
35130: LIST
35131: LIST
35132: LIST
35133: LIST
35134: LIST
35135: LIST
35136: LIST
35137: LIST
35138: LIST
35139: LIST
35140: LIST
35141: LIST
35142: LIST
35143: LIST
35144: LIST
35145: LIST
35146: LIST
35147: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35148: LD_ADDR_VAR 0 58
35152: PUSH
35153: LD_INT 0
35155: PUSH
35156: LD_INT 0
35158: PUSH
35159: EMPTY
35160: LIST
35161: LIST
35162: PUSH
35163: LD_INT 0
35165: PUSH
35166: LD_INT 1
35168: NEG
35169: PUSH
35170: EMPTY
35171: LIST
35172: LIST
35173: PUSH
35174: LD_INT 1
35176: PUSH
35177: LD_INT 0
35179: PUSH
35180: EMPTY
35181: LIST
35182: LIST
35183: PUSH
35184: LD_INT 1
35186: PUSH
35187: LD_INT 1
35189: PUSH
35190: EMPTY
35191: LIST
35192: LIST
35193: PUSH
35194: LD_INT 0
35196: PUSH
35197: LD_INT 1
35199: PUSH
35200: EMPTY
35201: LIST
35202: LIST
35203: PUSH
35204: LD_INT 1
35206: NEG
35207: PUSH
35208: LD_INT 0
35210: PUSH
35211: EMPTY
35212: LIST
35213: LIST
35214: PUSH
35215: LD_INT 1
35217: NEG
35218: PUSH
35219: LD_INT 1
35221: NEG
35222: PUSH
35223: EMPTY
35224: LIST
35225: LIST
35226: PUSH
35227: LD_INT 1
35229: NEG
35230: PUSH
35231: LD_INT 2
35233: NEG
35234: PUSH
35235: EMPTY
35236: LIST
35237: LIST
35238: PUSH
35239: LD_INT 0
35241: PUSH
35242: LD_INT 2
35244: NEG
35245: PUSH
35246: EMPTY
35247: LIST
35248: LIST
35249: PUSH
35250: LD_INT 1
35252: PUSH
35253: LD_INT 1
35255: NEG
35256: PUSH
35257: EMPTY
35258: LIST
35259: LIST
35260: PUSH
35261: LD_INT 2
35263: PUSH
35264: LD_INT 0
35266: PUSH
35267: EMPTY
35268: LIST
35269: LIST
35270: PUSH
35271: LD_INT 2
35273: PUSH
35274: LD_INT 1
35276: PUSH
35277: EMPTY
35278: LIST
35279: LIST
35280: PUSH
35281: LD_INT 2
35283: PUSH
35284: LD_INT 2
35286: PUSH
35287: EMPTY
35288: LIST
35289: LIST
35290: PUSH
35291: LD_INT 1
35293: PUSH
35294: LD_INT 2
35296: PUSH
35297: EMPTY
35298: LIST
35299: LIST
35300: PUSH
35301: LD_INT 0
35303: PUSH
35304: LD_INT 2
35306: PUSH
35307: EMPTY
35308: LIST
35309: LIST
35310: PUSH
35311: LD_INT 1
35313: NEG
35314: PUSH
35315: LD_INT 1
35317: PUSH
35318: EMPTY
35319: LIST
35320: LIST
35321: PUSH
35322: LD_INT 2
35324: NEG
35325: PUSH
35326: LD_INT 0
35328: PUSH
35329: EMPTY
35330: LIST
35331: LIST
35332: PUSH
35333: LD_INT 2
35335: NEG
35336: PUSH
35337: LD_INT 1
35339: NEG
35340: PUSH
35341: EMPTY
35342: LIST
35343: LIST
35344: PUSH
35345: LD_INT 2
35347: NEG
35348: PUSH
35349: LD_INT 2
35351: NEG
35352: PUSH
35353: EMPTY
35354: LIST
35355: LIST
35356: PUSH
35357: EMPTY
35358: LIST
35359: LIST
35360: LIST
35361: LIST
35362: LIST
35363: LIST
35364: LIST
35365: LIST
35366: LIST
35367: LIST
35368: LIST
35369: LIST
35370: LIST
35371: LIST
35372: LIST
35373: LIST
35374: LIST
35375: LIST
35376: LIST
35377: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
35378: LD_ADDR_VAR 0 59
35382: PUSH
35383: LD_INT 0
35385: PUSH
35386: LD_INT 0
35388: PUSH
35389: EMPTY
35390: LIST
35391: LIST
35392: PUSH
35393: LD_INT 0
35395: PUSH
35396: LD_INT 1
35398: NEG
35399: PUSH
35400: EMPTY
35401: LIST
35402: LIST
35403: PUSH
35404: LD_INT 1
35406: PUSH
35407: LD_INT 0
35409: PUSH
35410: EMPTY
35411: LIST
35412: LIST
35413: PUSH
35414: LD_INT 1
35416: PUSH
35417: LD_INT 1
35419: PUSH
35420: EMPTY
35421: LIST
35422: LIST
35423: PUSH
35424: LD_INT 0
35426: PUSH
35427: LD_INT 1
35429: PUSH
35430: EMPTY
35431: LIST
35432: LIST
35433: PUSH
35434: LD_INT 1
35436: NEG
35437: PUSH
35438: LD_INT 0
35440: PUSH
35441: EMPTY
35442: LIST
35443: LIST
35444: PUSH
35445: LD_INT 1
35447: NEG
35448: PUSH
35449: LD_INT 1
35451: NEG
35452: PUSH
35453: EMPTY
35454: LIST
35455: LIST
35456: PUSH
35457: EMPTY
35458: LIST
35459: LIST
35460: LIST
35461: LIST
35462: LIST
35463: LIST
35464: LIST
35465: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
35466: LD_ADDR_VAR 0 60
35470: PUSH
35471: LD_INT 0
35473: PUSH
35474: LD_INT 0
35476: PUSH
35477: EMPTY
35478: LIST
35479: LIST
35480: PUSH
35481: LD_INT 0
35483: PUSH
35484: LD_INT 1
35486: NEG
35487: PUSH
35488: EMPTY
35489: LIST
35490: LIST
35491: PUSH
35492: LD_INT 1
35494: PUSH
35495: LD_INT 0
35497: PUSH
35498: EMPTY
35499: LIST
35500: LIST
35501: PUSH
35502: LD_INT 1
35504: PUSH
35505: LD_INT 1
35507: PUSH
35508: EMPTY
35509: LIST
35510: LIST
35511: PUSH
35512: LD_INT 0
35514: PUSH
35515: LD_INT 1
35517: PUSH
35518: EMPTY
35519: LIST
35520: LIST
35521: PUSH
35522: LD_INT 1
35524: NEG
35525: PUSH
35526: LD_INT 0
35528: PUSH
35529: EMPTY
35530: LIST
35531: LIST
35532: PUSH
35533: LD_INT 1
35535: NEG
35536: PUSH
35537: LD_INT 1
35539: NEG
35540: PUSH
35541: EMPTY
35542: LIST
35543: LIST
35544: PUSH
35545: EMPTY
35546: LIST
35547: LIST
35548: LIST
35549: LIST
35550: LIST
35551: LIST
35552: LIST
35553: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
35554: LD_ADDR_VAR 0 61
35558: PUSH
35559: LD_INT 0
35561: PUSH
35562: LD_INT 0
35564: PUSH
35565: EMPTY
35566: LIST
35567: LIST
35568: PUSH
35569: LD_INT 0
35571: PUSH
35572: LD_INT 1
35574: NEG
35575: PUSH
35576: EMPTY
35577: LIST
35578: LIST
35579: PUSH
35580: LD_INT 1
35582: PUSH
35583: LD_INT 0
35585: PUSH
35586: EMPTY
35587: LIST
35588: LIST
35589: PUSH
35590: LD_INT 1
35592: PUSH
35593: LD_INT 1
35595: PUSH
35596: EMPTY
35597: LIST
35598: LIST
35599: PUSH
35600: LD_INT 0
35602: PUSH
35603: LD_INT 1
35605: PUSH
35606: EMPTY
35607: LIST
35608: LIST
35609: PUSH
35610: LD_INT 1
35612: NEG
35613: PUSH
35614: LD_INT 0
35616: PUSH
35617: EMPTY
35618: LIST
35619: LIST
35620: PUSH
35621: LD_INT 1
35623: NEG
35624: PUSH
35625: LD_INT 1
35627: NEG
35628: PUSH
35629: EMPTY
35630: LIST
35631: LIST
35632: PUSH
35633: EMPTY
35634: LIST
35635: LIST
35636: LIST
35637: LIST
35638: LIST
35639: LIST
35640: LIST
35641: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
35642: LD_ADDR_VAR 0 62
35646: PUSH
35647: LD_INT 0
35649: PUSH
35650: LD_INT 0
35652: PUSH
35653: EMPTY
35654: LIST
35655: LIST
35656: PUSH
35657: LD_INT 0
35659: PUSH
35660: LD_INT 1
35662: NEG
35663: PUSH
35664: EMPTY
35665: LIST
35666: LIST
35667: PUSH
35668: LD_INT 1
35670: PUSH
35671: LD_INT 0
35673: PUSH
35674: EMPTY
35675: LIST
35676: LIST
35677: PUSH
35678: LD_INT 1
35680: PUSH
35681: LD_INT 1
35683: PUSH
35684: EMPTY
35685: LIST
35686: LIST
35687: PUSH
35688: LD_INT 0
35690: PUSH
35691: LD_INT 1
35693: PUSH
35694: EMPTY
35695: LIST
35696: LIST
35697: PUSH
35698: LD_INT 1
35700: NEG
35701: PUSH
35702: LD_INT 0
35704: PUSH
35705: EMPTY
35706: LIST
35707: LIST
35708: PUSH
35709: LD_INT 1
35711: NEG
35712: PUSH
35713: LD_INT 1
35715: NEG
35716: PUSH
35717: EMPTY
35718: LIST
35719: LIST
35720: PUSH
35721: EMPTY
35722: LIST
35723: LIST
35724: LIST
35725: LIST
35726: LIST
35727: LIST
35728: LIST
35729: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
35730: LD_ADDR_VAR 0 63
35734: PUSH
35735: LD_INT 0
35737: PUSH
35738: LD_INT 0
35740: PUSH
35741: EMPTY
35742: LIST
35743: LIST
35744: PUSH
35745: LD_INT 0
35747: PUSH
35748: LD_INT 1
35750: NEG
35751: PUSH
35752: EMPTY
35753: LIST
35754: LIST
35755: PUSH
35756: LD_INT 1
35758: PUSH
35759: LD_INT 0
35761: PUSH
35762: EMPTY
35763: LIST
35764: LIST
35765: PUSH
35766: LD_INT 1
35768: PUSH
35769: LD_INT 1
35771: PUSH
35772: EMPTY
35773: LIST
35774: LIST
35775: PUSH
35776: LD_INT 0
35778: PUSH
35779: LD_INT 1
35781: PUSH
35782: EMPTY
35783: LIST
35784: LIST
35785: PUSH
35786: LD_INT 1
35788: NEG
35789: PUSH
35790: LD_INT 0
35792: PUSH
35793: EMPTY
35794: LIST
35795: LIST
35796: PUSH
35797: LD_INT 1
35799: NEG
35800: PUSH
35801: LD_INT 1
35803: NEG
35804: PUSH
35805: EMPTY
35806: LIST
35807: LIST
35808: PUSH
35809: EMPTY
35810: LIST
35811: LIST
35812: LIST
35813: LIST
35814: LIST
35815: LIST
35816: LIST
35817: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
35818: LD_ADDR_VAR 0 64
35822: PUSH
35823: LD_INT 0
35825: PUSH
35826: LD_INT 0
35828: PUSH
35829: EMPTY
35830: LIST
35831: LIST
35832: PUSH
35833: LD_INT 0
35835: PUSH
35836: LD_INT 1
35838: NEG
35839: PUSH
35840: EMPTY
35841: LIST
35842: LIST
35843: PUSH
35844: LD_INT 1
35846: PUSH
35847: LD_INT 0
35849: PUSH
35850: EMPTY
35851: LIST
35852: LIST
35853: PUSH
35854: LD_INT 1
35856: PUSH
35857: LD_INT 1
35859: PUSH
35860: EMPTY
35861: LIST
35862: LIST
35863: PUSH
35864: LD_INT 0
35866: PUSH
35867: LD_INT 1
35869: PUSH
35870: EMPTY
35871: LIST
35872: LIST
35873: PUSH
35874: LD_INT 1
35876: NEG
35877: PUSH
35878: LD_INT 0
35880: PUSH
35881: EMPTY
35882: LIST
35883: LIST
35884: PUSH
35885: LD_INT 1
35887: NEG
35888: PUSH
35889: LD_INT 1
35891: NEG
35892: PUSH
35893: EMPTY
35894: LIST
35895: LIST
35896: PUSH
35897: EMPTY
35898: LIST
35899: LIST
35900: LIST
35901: LIST
35902: LIST
35903: LIST
35904: LIST
35905: ST_TO_ADDR
// end ; 1 :
35906: GO 41803
35908: LD_INT 1
35910: DOUBLE
35911: EQUAL
35912: IFTRUE 35916
35914: GO 38539
35916: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
35917: LD_ADDR_VAR 0 11
35921: PUSH
35922: LD_INT 1
35924: NEG
35925: PUSH
35926: LD_INT 3
35928: NEG
35929: PUSH
35930: EMPTY
35931: LIST
35932: LIST
35933: PUSH
35934: LD_INT 0
35936: PUSH
35937: LD_INT 3
35939: NEG
35940: PUSH
35941: EMPTY
35942: LIST
35943: LIST
35944: PUSH
35945: LD_INT 1
35947: PUSH
35948: LD_INT 2
35950: NEG
35951: PUSH
35952: EMPTY
35953: LIST
35954: LIST
35955: PUSH
35956: EMPTY
35957: LIST
35958: LIST
35959: LIST
35960: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
35961: LD_ADDR_VAR 0 12
35965: PUSH
35966: LD_INT 2
35968: PUSH
35969: LD_INT 1
35971: NEG
35972: PUSH
35973: EMPTY
35974: LIST
35975: LIST
35976: PUSH
35977: LD_INT 3
35979: PUSH
35980: LD_INT 0
35982: PUSH
35983: EMPTY
35984: LIST
35985: LIST
35986: PUSH
35987: LD_INT 3
35989: PUSH
35990: LD_INT 1
35992: PUSH
35993: EMPTY
35994: LIST
35995: LIST
35996: PUSH
35997: EMPTY
35998: LIST
35999: LIST
36000: LIST
36001: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
36002: LD_ADDR_VAR 0 13
36006: PUSH
36007: LD_INT 3
36009: PUSH
36010: LD_INT 2
36012: PUSH
36013: EMPTY
36014: LIST
36015: LIST
36016: PUSH
36017: LD_INT 3
36019: PUSH
36020: LD_INT 3
36022: PUSH
36023: EMPTY
36024: LIST
36025: LIST
36026: PUSH
36027: LD_INT 2
36029: PUSH
36030: LD_INT 3
36032: PUSH
36033: EMPTY
36034: LIST
36035: LIST
36036: PUSH
36037: EMPTY
36038: LIST
36039: LIST
36040: LIST
36041: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
36042: LD_ADDR_VAR 0 14
36046: PUSH
36047: LD_INT 1
36049: PUSH
36050: LD_INT 3
36052: PUSH
36053: EMPTY
36054: LIST
36055: LIST
36056: PUSH
36057: LD_INT 0
36059: PUSH
36060: LD_INT 3
36062: PUSH
36063: EMPTY
36064: LIST
36065: LIST
36066: PUSH
36067: LD_INT 1
36069: NEG
36070: PUSH
36071: LD_INT 2
36073: PUSH
36074: EMPTY
36075: LIST
36076: LIST
36077: PUSH
36078: EMPTY
36079: LIST
36080: LIST
36081: LIST
36082: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
36083: LD_ADDR_VAR 0 15
36087: PUSH
36088: LD_INT 2
36090: NEG
36091: PUSH
36092: LD_INT 1
36094: PUSH
36095: EMPTY
36096: LIST
36097: LIST
36098: PUSH
36099: LD_INT 3
36101: NEG
36102: PUSH
36103: LD_INT 0
36105: PUSH
36106: EMPTY
36107: LIST
36108: LIST
36109: PUSH
36110: LD_INT 3
36112: NEG
36113: PUSH
36114: LD_INT 1
36116: NEG
36117: PUSH
36118: EMPTY
36119: LIST
36120: LIST
36121: PUSH
36122: EMPTY
36123: LIST
36124: LIST
36125: LIST
36126: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
36127: LD_ADDR_VAR 0 16
36131: PUSH
36132: LD_INT 2
36134: NEG
36135: PUSH
36136: LD_INT 3
36138: NEG
36139: PUSH
36140: EMPTY
36141: LIST
36142: LIST
36143: PUSH
36144: LD_INT 3
36146: NEG
36147: PUSH
36148: LD_INT 2
36150: NEG
36151: PUSH
36152: EMPTY
36153: LIST
36154: LIST
36155: PUSH
36156: LD_INT 3
36158: NEG
36159: PUSH
36160: LD_INT 3
36162: NEG
36163: PUSH
36164: EMPTY
36165: LIST
36166: LIST
36167: PUSH
36168: EMPTY
36169: LIST
36170: LIST
36171: LIST
36172: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
36173: LD_ADDR_VAR 0 17
36177: PUSH
36178: LD_INT 1
36180: NEG
36181: PUSH
36182: LD_INT 3
36184: NEG
36185: PUSH
36186: EMPTY
36187: LIST
36188: LIST
36189: PUSH
36190: LD_INT 0
36192: PUSH
36193: LD_INT 3
36195: NEG
36196: PUSH
36197: EMPTY
36198: LIST
36199: LIST
36200: PUSH
36201: LD_INT 1
36203: PUSH
36204: LD_INT 2
36206: NEG
36207: PUSH
36208: EMPTY
36209: LIST
36210: LIST
36211: PUSH
36212: EMPTY
36213: LIST
36214: LIST
36215: LIST
36216: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
36217: LD_ADDR_VAR 0 18
36221: PUSH
36222: LD_INT 2
36224: PUSH
36225: LD_INT 1
36227: NEG
36228: PUSH
36229: EMPTY
36230: LIST
36231: LIST
36232: PUSH
36233: LD_INT 3
36235: PUSH
36236: LD_INT 0
36238: PUSH
36239: EMPTY
36240: LIST
36241: LIST
36242: PUSH
36243: LD_INT 3
36245: PUSH
36246: LD_INT 1
36248: PUSH
36249: EMPTY
36250: LIST
36251: LIST
36252: PUSH
36253: EMPTY
36254: LIST
36255: LIST
36256: LIST
36257: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
36258: LD_ADDR_VAR 0 19
36262: PUSH
36263: LD_INT 3
36265: PUSH
36266: LD_INT 2
36268: PUSH
36269: EMPTY
36270: LIST
36271: LIST
36272: PUSH
36273: LD_INT 3
36275: PUSH
36276: LD_INT 3
36278: PUSH
36279: EMPTY
36280: LIST
36281: LIST
36282: PUSH
36283: LD_INT 2
36285: PUSH
36286: LD_INT 3
36288: PUSH
36289: EMPTY
36290: LIST
36291: LIST
36292: PUSH
36293: EMPTY
36294: LIST
36295: LIST
36296: LIST
36297: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
36298: LD_ADDR_VAR 0 20
36302: PUSH
36303: LD_INT 1
36305: PUSH
36306: LD_INT 3
36308: PUSH
36309: EMPTY
36310: LIST
36311: LIST
36312: PUSH
36313: LD_INT 0
36315: PUSH
36316: LD_INT 3
36318: PUSH
36319: EMPTY
36320: LIST
36321: LIST
36322: PUSH
36323: LD_INT 1
36325: NEG
36326: PUSH
36327: LD_INT 2
36329: PUSH
36330: EMPTY
36331: LIST
36332: LIST
36333: PUSH
36334: EMPTY
36335: LIST
36336: LIST
36337: LIST
36338: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
36339: LD_ADDR_VAR 0 21
36343: PUSH
36344: LD_INT 2
36346: NEG
36347: PUSH
36348: LD_INT 1
36350: PUSH
36351: EMPTY
36352: LIST
36353: LIST
36354: PUSH
36355: LD_INT 3
36357: NEG
36358: PUSH
36359: LD_INT 0
36361: PUSH
36362: EMPTY
36363: LIST
36364: LIST
36365: PUSH
36366: LD_INT 3
36368: NEG
36369: PUSH
36370: LD_INT 1
36372: NEG
36373: PUSH
36374: EMPTY
36375: LIST
36376: LIST
36377: PUSH
36378: EMPTY
36379: LIST
36380: LIST
36381: LIST
36382: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
36383: LD_ADDR_VAR 0 22
36387: PUSH
36388: LD_INT 2
36390: NEG
36391: PUSH
36392: LD_INT 3
36394: NEG
36395: PUSH
36396: EMPTY
36397: LIST
36398: LIST
36399: PUSH
36400: LD_INT 3
36402: NEG
36403: PUSH
36404: LD_INT 2
36406: NEG
36407: PUSH
36408: EMPTY
36409: LIST
36410: LIST
36411: PUSH
36412: LD_INT 3
36414: NEG
36415: PUSH
36416: LD_INT 3
36418: NEG
36419: PUSH
36420: EMPTY
36421: LIST
36422: LIST
36423: PUSH
36424: EMPTY
36425: LIST
36426: LIST
36427: LIST
36428: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
36429: LD_ADDR_VAR 0 23
36433: PUSH
36434: LD_INT 0
36436: PUSH
36437: LD_INT 3
36439: NEG
36440: PUSH
36441: EMPTY
36442: LIST
36443: LIST
36444: PUSH
36445: LD_INT 1
36447: NEG
36448: PUSH
36449: LD_INT 4
36451: NEG
36452: PUSH
36453: EMPTY
36454: LIST
36455: LIST
36456: PUSH
36457: LD_INT 1
36459: PUSH
36460: LD_INT 3
36462: NEG
36463: PUSH
36464: EMPTY
36465: LIST
36466: LIST
36467: PUSH
36468: EMPTY
36469: LIST
36470: LIST
36471: LIST
36472: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
36473: LD_ADDR_VAR 0 24
36477: PUSH
36478: LD_INT 3
36480: PUSH
36481: LD_INT 0
36483: PUSH
36484: EMPTY
36485: LIST
36486: LIST
36487: PUSH
36488: LD_INT 3
36490: PUSH
36491: LD_INT 1
36493: NEG
36494: PUSH
36495: EMPTY
36496: LIST
36497: LIST
36498: PUSH
36499: LD_INT 4
36501: PUSH
36502: LD_INT 1
36504: PUSH
36505: EMPTY
36506: LIST
36507: LIST
36508: PUSH
36509: EMPTY
36510: LIST
36511: LIST
36512: LIST
36513: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
36514: LD_ADDR_VAR 0 25
36518: PUSH
36519: LD_INT 3
36521: PUSH
36522: LD_INT 3
36524: PUSH
36525: EMPTY
36526: LIST
36527: LIST
36528: PUSH
36529: LD_INT 4
36531: PUSH
36532: LD_INT 3
36534: PUSH
36535: EMPTY
36536: LIST
36537: LIST
36538: PUSH
36539: LD_INT 3
36541: PUSH
36542: LD_INT 4
36544: PUSH
36545: EMPTY
36546: LIST
36547: LIST
36548: PUSH
36549: EMPTY
36550: LIST
36551: LIST
36552: LIST
36553: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
36554: LD_ADDR_VAR 0 26
36558: PUSH
36559: LD_INT 0
36561: PUSH
36562: LD_INT 3
36564: PUSH
36565: EMPTY
36566: LIST
36567: LIST
36568: PUSH
36569: LD_INT 1
36571: PUSH
36572: LD_INT 4
36574: PUSH
36575: EMPTY
36576: LIST
36577: LIST
36578: PUSH
36579: LD_INT 1
36581: NEG
36582: PUSH
36583: LD_INT 3
36585: PUSH
36586: EMPTY
36587: LIST
36588: LIST
36589: PUSH
36590: EMPTY
36591: LIST
36592: LIST
36593: LIST
36594: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
36595: LD_ADDR_VAR 0 27
36599: PUSH
36600: LD_INT 3
36602: NEG
36603: PUSH
36604: LD_INT 0
36606: PUSH
36607: EMPTY
36608: LIST
36609: LIST
36610: PUSH
36611: LD_INT 3
36613: NEG
36614: PUSH
36615: LD_INT 1
36617: PUSH
36618: EMPTY
36619: LIST
36620: LIST
36621: PUSH
36622: LD_INT 4
36624: NEG
36625: PUSH
36626: LD_INT 1
36628: NEG
36629: PUSH
36630: EMPTY
36631: LIST
36632: LIST
36633: PUSH
36634: EMPTY
36635: LIST
36636: LIST
36637: LIST
36638: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
36639: LD_ADDR_VAR 0 28
36643: PUSH
36644: LD_INT 3
36646: NEG
36647: PUSH
36648: LD_INT 3
36650: NEG
36651: PUSH
36652: EMPTY
36653: LIST
36654: LIST
36655: PUSH
36656: LD_INT 3
36658: NEG
36659: PUSH
36660: LD_INT 4
36662: NEG
36663: PUSH
36664: EMPTY
36665: LIST
36666: LIST
36667: PUSH
36668: LD_INT 4
36670: NEG
36671: PUSH
36672: LD_INT 3
36674: NEG
36675: PUSH
36676: EMPTY
36677: LIST
36678: LIST
36679: PUSH
36680: EMPTY
36681: LIST
36682: LIST
36683: LIST
36684: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
36685: LD_ADDR_VAR 0 29
36689: PUSH
36690: LD_INT 1
36692: NEG
36693: PUSH
36694: LD_INT 3
36696: NEG
36697: PUSH
36698: EMPTY
36699: LIST
36700: LIST
36701: PUSH
36702: LD_INT 0
36704: PUSH
36705: LD_INT 3
36707: NEG
36708: PUSH
36709: EMPTY
36710: LIST
36711: LIST
36712: PUSH
36713: LD_INT 1
36715: PUSH
36716: LD_INT 2
36718: NEG
36719: PUSH
36720: EMPTY
36721: LIST
36722: LIST
36723: PUSH
36724: LD_INT 1
36726: NEG
36727: PUSH
36728: LD_INT 4
36730: NEG
36731: PUSH
36732: EMPTY
36733: LIST
36734: LIST
36735: PUSH
36736: LD_INT 0
36738: PUSH
36739: LD_INT 4
36741: NEG
36742: PUSH
36743: EMPTY
36744: LIST
36745: LIST
36746: PUSH
36747: LD_INT 1
36749: PUSH
36750: LD_INT 3
36752: NEG
36753: PUSH
36754: EMPTY
36755: LIST
36756: LIST
36757: PUSH
36758: LD_INT 1
36760: NEG
36761: PUSH
36762: LD_INT 5
36764: NEG
36765: PUSH
36766: EMPTY
36767: LIST
36768: LIST
36769: PUSH
36770: LD_INT 0
36772: PUSH
36773: LD_INT 5
36775: NEG
36776: PUSH
36777: EMPTY
36778: LIST
36779: LIST
36780: PUSH
36781: LD_INT 1
36783: PUSH
36784: LD_INT 4
36786: NEG
36787: PUSH
36788: EMPTY
36789: LIST
36790: LIST
36791: PUSH
36792: LD_INT 1
36794: NEG
36795: PUSH
36796: LD_INT 6
36798: NEG
36799: PUSH
36800: EMPTY
36801: LIST
36802: LIST
36803: PUSH
36804: LD_INT 0
36806: PUSH
36807: LD_INT 6
36809: NEG
36810: PUSH
36811: EMPTY
36812: LIST
36813: LIST
36814: PUSH
36815: LD_INT 1
36817: PUSH
36818: LD_INT 5
36820: NEG
36821: PUSH
36822: EMPTY
36823: LIST
36824: LIST
36825: PUSH
36826: EMPTY
36827: LIST
36828: LIST
36829: LIST
36830: LIST
36831: LIST
36832: LIST
36833: LIST
36834: LIST
36835: LIST
36836: LIST
36837: LIST
36838: LIST
36839: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
36840: LD_ADDR_VAR 0 30
36844: PUSH
36845: LD_INT 2
36847: PUSH
36848: LD_INT 1
36850: NEG
36851: PUSH
36852: EMPTY
36853: LIST
36854: LIST
36855: PUSH
36856: LD_INT 3
36858: PUSH
36859: LD_INT 0
36861: PUSH
36862: EMPTY
36863: LIST
36864: LIST
36865: PUSH
36866: LD_INT 3
36868: PUSH
36869: LD_INT 1
36871: PUSH
36872: EMPTY
36873: LIST
36874: LIST
36875: PUSH
36876: LD_INT 3
36878: PUSH
36879: LD_INT 1
36881: NEG
36882: PUSH
36883: EMPTY
36884: LIST
36885: LIST
36886: PUSH
36887: LD_INT 4
36889: PUSH
36890: LD_INT 0
36892: PUSH
36893: EMPTY
36894: LIST
36895: LIST
36896: PUSH
36897: LD_INT 4
36899: PUSH
36900: LD_INT 1
36902: PUSH
36903: EMPTY
36904: LIST
36905: LIST
36906: PUSH
36907: LD_INT 4
36909: PUSH
36910: LD_INT 1
36912: NEG
36913: PUSH
36914: EMPTY
36915: LIST
36916: LIST
36917: PUSH
36918: LD_INT 5
36920: PUSH
36921: LD_INT 0
36923: PUSH
36924: EMPTY
36925: LIST
36926: LIST
36927: PUSH
36928: LD_INT 5
36930: PUSH
36931: LD_INT 1
36933: PUSH
36934: EMPTY
36935: LIST
36936: LIST
36937: PUSH
36938: LD_INT 5
36940: PUSH
36941: LD_INT 1
36943: NEG
36944: PUSH
36945: EMPTY
36946: LIST
36947: LIST
36948: PUSH
36949: LD_INT 6
36951: PUSH
36952: LD_INT 0
36954: PUSH
36955: EMPTY
36956: LIST
36957: LIST
36958: PUSH
36959: LD_INT 6
36961: PUSH
36962: LD_INT 1
36964: PUSH
36965: EMPTY
36966: LIST
36967: LIST
36968: PUSH
36969: EMPTY
36970: LIST
36971: LIST
36972: LIST
36973: LIST
36974: LIST
36975: LIST
36976: LIST
36977: LIST
36978: LIST
36979: LIST
36980: LIST
36981: LIST
36982: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
36983: LD_ADDR_VAR 0 31
36987: PUSH
36988: LD_INT 3
36990: PUSH
36991: LD_INT 2
36993: PUSH
36994: EMPTY
36995: LIST
36996: LIST
36997: PUSH
36998: LD_INT 3
37000: PUSH
37001: LD_INT 3
37003: PUSH
37004: EMPTY
37005: LIST
37006: LIST
37007: PUSH
37008: LD_INT 2
37010: PUSH
37011: LD_INT 3
37013: PUSH
37014: EMPTY
37015: LIST
37016: LIST
37017: PUSH
37018: LD_INT 4
37020: PUSH
37021: LD_INT 3
37023: PUSH
37024: EMPTY
37025: LIST
37026: LIST
37027: PUSH
37028: LD_INT 4
37030: PUSH
37031: LD_INT 4
37033: PUSH
37034: EMPTY
37035: LIST
37036: LIST
37037: PUSH
37038: LD_INT 3
37040: PUSH
37041: LD_INT 4
37043: PUSH
37044: EMPTY
37045: LIST
37046: LIST
37047: PUSH
37048: LD_INT 5
37050: PUSH
37051: LD_INT 4
37053: PUSH
37054: EMPTY
37055: LIST
37056: LIST
37057: PUSH
37058: LD_INT 5
37060: PUSH
37061: LD_INT 5
37063: PUSH
37064: EMPTY
37065: LIST
37066: LIST
37067: PUSH
37068: LD_INT 4
37070: PUSH
37071: LD_INT 5
37073: PUSH
37074: EMPTY
37075: LIST
37076: LIST
37077: PUSH
37078: LD_INT 6
37080: PUSH
37081: LD_INT 5
37083: PUSH
37084: EMPTY
37085: LIST
37086: LIST
37087: PUSH
37088: LD_INT 6
37090: PUSH
37091: LD_INT 6
37093: PUSH
37094: EMPTY
37095: LIST
37096: LIST
37097: PUSH
37098: LD_INT 5
37100: PUSH
37101: LD_INT 6
37103: PUSH
37104: EMPTY
37105: LIST
37106: LIST
37107: PUSH
37108: EMPTY
37109: LIST
37110: LIST
37111: LIST
37112: LIST
37113: LIST
37114: LIST
37115: LIST
37116: LIST
37117: LIST
37118: LIST
37119: LIST
37120: LIST
37121: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
37122: LD_ADDR_VAR 0 32
37126: PUSH
37127: LD_INT 1
37129: PUSH
37130: LD_INT 3
37132: PUSH
37133: EMPTY
37134: LIST
37135: LIST
37136: PUSH
37137: LD_INT 0
37139: PUSH
37140: LD_INT 3
37142: PUSH
37143: EMPTY
37144: LIST
37145: LIST
37146: PUSH
37147: LD_INT 1
37149: NEG
37150: PUSH
37151: LD_INT 2
37153: PUSH
37154: EMPTY
37155: LIST
37156: LIST
37157: PUSH
37158: LD_INT 1
37160: PUSH
37161: LD_INT 4
37163: PUSH
37164: EMPTY
37165: LIST
37166: LIST
37167: PUSH
37168: LD_INT 0
37170: PUSH
37171: LD_INT 4
37173: PUSH
37174: EMPTY
37175: LIST
37176: LIST
37177: PUSH
37178: LD_INT 1
37180: NEG
37181: PUSH
37182: LD_INT 3
37184: PUSH
37185: EMPTY
37186: LIST
37187: LIST
37188: PUSH
37189: LD_INT 1
37191: PUSH
37192: LD_INT 5
37194: PUSH
37195: EMPTY
37196: LIST
37197: LIST
37198: PUSH
37199: LD_INT 0
37201: PUSH
37202: LD_INT 5
37204: PUSH
37205: EMPTY
37206: LIST
37207: LIST
37208: PUSH
37209: LD_INT 1
37211: NEG
37212: PUSH
37213: LD_INT 4
37215: PUSH
37216: EMPTY
37217: LIST
37218: LIST
37219: PUSH
37220: LD_INT 1
37222: PUSH
37223: LD_INT 6
37225: PUSH
37226: EMPTY
37227: LIST
37228: LIST
37229: PUSH
37230: LD_INT 0
37232: PUSH
37233: LD_INT 6
37235: PUSH
37236: EMPTY
37237: LIST
37238: LIST
37239: PUSH
37240: LD_INT 1
37242: NEG
37243: PUSH
37244: LD_INT 5
37246: PUSH
37247: EMPTY
37248: LIST
37249: LIST
37250: PUSH
37251: EMPTY
37252: LIST
37253: LIST
37254: LIST
37255: LIST
37256: LIST
37257: LIST
37258: LIST
37259: LIST
37260: LIST
37261: LIST
37262: LIST
37263: LIST
37264: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
37265: LD_ADDR_VAR 0 33
37269: PUSH
37270: LD_INT 2
37272: NEG
37273: PUSH
37274: LD_INT 1
37276: PUSH
37277: EMPTY
37278: LIST
37279: LIST
37280: PUSH
37281: LD_INT 3
37283: NEG
37284: PUSH
37285: LD_INT 0
37287: PUSH
37288: EMPTY
37289: LIST
37290: LIST
37291: PUSH
37292: LD_INT 3
37294: NEG
37295: PUSH
37296: LD_INT 1
37298: NEG
37299: PUSH
37300: EMPTY
37301: LIST
37302: LIST
37303: PUSH
37304: LD_INT 3
37306: NEG
37307: PUSH
37308: LD_INT 1
37310: PUSH
37311: EMPTY
37312: LIST
37313: LIST
37314: PUSH
37315: LD_INT 4
37317: NEG
37318: PUSH
37319: LD_INT 0
37321: PUSH
37322: EMPTY
37323: LIST
37324: LIST
37325: PUSH
37326: LD_INT 4
37328: NEG
37329: PUSH
37330: LD_INT 1
37332: NEG
37333: PUSH
37334: EMPTY
37335: LIST
37336: LIST
37337: PUSH
37338: LD_INT 4
37340: NEG
37341: PUSH
37342: LD_INT 1
37344: PUSH
37345: EMPTY
37346: LIST
37347: LIST
37348: PUSH
37349: LD_INT 5
37351: NEG
37352: PUSH
37353: LD_INT 0
37355: PUSH
37356: EMPTY
37357: LIST
37358: LIST
37359: PUSH
37360: LD_INT 5
37362: NEG
37363: PUSH
37364: LD_INT 1
37366: NEG
37367: PUSH
37368: EMPTY
37369: LIST
37370: LIST
37371: PUSH
37372: LD_INT 5
37374: NEG
37375: PUSH
37376: LD_INT 1
37378: PUSH
37379: EMPTY
37380: LIST
37381: LIST
37382: PUSH
37383: LD_INT 6
37385: NEG
37386: PUSH
37387: LD_INT 0
37389: PUSH
37390: EMPTY
37391: LIST
37392: LIST
37393: PUSH
37394: LD_INT 6
37396: NEG
37397: PUSH
37398: LD_INT 1
37400: NEG
37401: PUSH
37402: EMPTY
37403: LIST
37404: LIST
37405: PUSH
37406: EMPTY
37407: LIST
37408: LIST
37409: LIST
37410: LIST
37411: LIST
37412: LIST
37413: LIST
37414: LIST
37415: LIST
37416: LIST
37417: LIST
37418: LIST
37419: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
37420: LD_ADDR_VAR 0 34
37424: PUSH
37425: LD_INT 2
37427: NEG
37428: PUSH
37429: LD_INT 3
37431: NEG
37432: PUSH
37433: EMPTY
37434: LIST
37435: LIST
37436: PUSH
37437: LD_INT 3
37439: NEG
37440: PUSH
37441: LD_INT 2
37443: NEG
37444: PUSH
37445: EMPTY
37446: LIST
37447: LIST
37448: PUSH
37449: LD_INT 3
37451: NEG
37452: PUSH
37453: LD_INT 3
37455: NEG
37456: PUSH
37457: EMPTY
37458: LIST
37459: LIST
37460: PUSH
37461: LD_INT 3
37463: NEG
37464: PUSH
37465: LD_INT 4
37467: NEG
37468: PUSH
37469: EMPTY
37470: LIST
37471: LIST
37472: PUSH
37473: LD_INT 4
37475: NEG
37476: PUSH
37477: LD_INT 3
37479: NEG
37480: PUSH
37481: EMPTY
37482: LIST
37483: LIST
37484: PUSH
37485: LD_INT 4
37487: NEG
37488: PUSH
37489: LD_INT 4
37491: NEG
37492: PUSH
37493: EMPTY
37494: LIST
37495: LIST
37496: PUSH
37497: LD_INT 4
37499: NEG
37500: PUSH
37501: LD_INT 5
37503: NEG
37504: PUSH
37505: EMPTY
37506: LIST
37507: LIST
37508: PUSH
37509: LD_INT 5
37511: NEG
37512: PUSH
37513: LD_INT 4
37515: NEG
37516: PUSH
37517: EMPTY
37518: LIST
37519: LIST
37520: PUSH
37521: LD_INT 5
37523: NEG
37524: PUSH
37525: LD_INT 5
37527: NEG
37528: PUSH
37529: EMPTY
37530: LIST
37531: LIST
37532: PUSH
37533: LD_INT 5
37535: NEG
37536: PUSH
37537: LD_INT 6
37539: NEG
37540: PUSH
37541: EMPTY
37542: LIST
37543: LIST
37544: PUSH
37545: LD_INT 6
37547: NEG
37548: PUSH
37549: LD_INT 5
37551: NEG
37552: PUSH
37553: EMPTY
37554: LIST
37555: LIST
37556: PUSH
37557: LD_INT 6
37559: NEG
37560: PUSH
37561: LD_INT 6
37563: NEG
37564: PUSH
37565: EMPTY
37566: LIST
37567: LIST
37568: PUSH
37569: EMPTY
37570: LIST
37571: LIST
37572: LIST
37573: LIST
37574: LIST
37575: LIST
37576: LIST
37577: LIST
37578: LIST
37579: LIST
37580: LIST
37581: LIST
37582: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
37583: LD_ADDR_VAR 0 41
37587: PUSH
37588: LD_INT 0
37590: PUSH
37591: LD_INT 2
37593: NEG
37594: PUSH
37595: EMPTY
37596: LIST
37597: LIST
37598: PUSH
37599: LD_INT 1
37601: NEG
37602: PUSH
37603: LD_INT 3
37605: NEG
37606: PUSH
37607: EMPTY
37608: LIST
37609: LIST
37610: PUSH
37611: LD_INT 1
37613: PUSH
37614: LD_INT 2
37616: NEG
37617: PUSH
37618: EMPTY
37619: LIST
37620: LIST
37621: PUSH
37622: EMPTY
37623: LIST
37624: LIST
37625: LIST
37626: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
37627: LD_ADDR_VAR 0 42
37631: PUSH
37632: LD_INT 2
37634: PUSH
37635: LD_INT 0
37637: PUSH
37638: EMPTY
37639: LIST
37640: LIST
37641: PUSH
37642: LD_INT 2
37644: PUSH
37645: LD_INT 1
37647: NEG
37648: PUSH
37649: EMPTY
37650: LIST
37651: LIST
37652: PUSH
37653: LD_INT 3
37655: PUSH
37656: LD_INT 1
37658: PUSH
37659: EMPTY
37660: LIST
37661: LIST
37662: PUSH
37663: EMPTY
37664: LIST
37665: LIST
37666: LIST
37667: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
37668: LD_ADDR_VAR 0 43
37672: PUSH
37673: LD_INT 2
37675: PUSH
37676: LD_INT 2
37678: PUSH
37679: EMPTY
37680: LIST
37681: LIST
37682: PUSH
37683: LD_INT 3
37685: PUSH
37686: LD_INT 2
37688: PUSH
37689: EMPTY
37690: LIST
37691: LIST
37692: PUSH
37693: LD_INT 2
37695: PUSH
37696: LD_INT 3
37698: PUSH
37699: EMPTY
37700: LIST
37701: LIST
37702: PUSH
37703: EMPTY
37704: LIST
37705: LIST
37706: LIST
37707: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
37708: LD_ADDR_VAR 0 44
37712: PUSH
37713: LD_INT 0
37715: PUSH
37716: LD_INT 2
37718: PUSH
37719: EMPTY
37720: LIST
37721: LIST
37722: PUSH
37723: LD_INT 1
37725: PUSH
37726: LD_INT 3
37728: PUSH
37729: EMPTY
37730: LIST
37731: LIST
37732: PUSH
37733: LD_INT 1
37735: NEG
37736: PUSH
37737: LD_INT 2
37739: PUSH
37740: EMPTY
37741: LIST
37742: LIST
37743: PUSH
37744: EMPTY
37745: LIST
37746: LIST
37747: LIST
37748: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
37749: LD_ADDR_VAR 0 45
37753: PUSH
37754: LD_INT 2
37756: NEG
37757: PUSH
37758: LD_INT 0
37760: PUSH
37761: EMPTY
37762: LIST
37763: LIST
37764: PUSH
37765: LD_INT 2
37767: NEG
37768: PUSH
37769: LD_INT 1
37771: PUSH
37772: EMPTY
37773: LIST
37774: LIST
37775: PUSH
37776: LD_INT 3
37778: NEG
37779: PUSH
37780: LD_INT 1
37782: NEG
37783: PUSH
37784: EMPTY
37785: LIST
37786: LIST
37787: PUSH
37788: EMPTY
37789: LIST
37790: LIST
37791: LIST
37792: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
37793: LD_ADDR_VAR 0 46
37797: PUSH
37798: LD_INT 2
37800: NEG
37801: PUSH
37802: LD_INT 2
37804: NEG
37805: PUSH
37806: EMPTY
37807: LIST
37808: LIST
37809: PUSH
37810: LD_INT 2
37812: NEG
37813: PUSH
37814: LD_INT 3
37816: NEG
37817: PUSH
37818: EMPTY
37819: LIST
37820: LIST
37821: PUSH
37822: LD_INT 3
37824: NEG
37825: PUSH
37826: LD_INT 2
37828: NEG
37829: PUSH
37830: EMPTY
37831: LIST
37832: LIST
37833: PUSH
37834: EMPTY
37835: LIST
37836: LIST
37837: LIST
37838: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
37839: LD_ADDR_VAR 0 47
37843: PUSH
37844: LD_INT 2
37846: NEG
37847: PUSH
37848: LD_INT 3
37850: NEG
37851: PUSH
37852: EMPTY
37853: LIST
37854: LIST
37855: PUSH
37856: LD_INT 1
37858: NEG
37859: PUSH
37860: LD_INT 3
37862: NEG
37863: PUSH
37864: EMPTY
37865: LIST
37866: LIST
37867: PUSH
37868: EMPTY
37869: LIST
37870: LIST
37871: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
37872: LD_ADDR_VAR 0 48
37876: PUSH
37877: LD_INT 1
37879: PUSH
37880: LD_INT 2
37882: NEG
37883: PUSH
37884: EMPTY
37885: LIST
37886: LIST
37887: PUSH
37888: LD_INT 2
37890: PUSH
37891: LD_INT 1
37893: NEG
37894: PUSH
37895: EMPTY
37896: LIST
37897: LIST
37898: PUSH
37899: EMPTY
37900: LIST
37901: LIST
37902: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
37903: LD_ADDR_VAR 0 49
37907: PUSH
37908: LD_INT 3
37910: PUSH
37911: LD_INT 1
37913: PUSH
37914: EMPTY
37915: LIST
37916: LIST
37917: PUSH
37918: LD_INT 3
37920: PUSH
37921: LD_INT 2
37923: PUSH
37924: EMPTY
37925: LIST
37926: LIST
37927: PUSH
37928: EMPTY
37929: LIST
37930: LIST
37931: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
37932: LD_ADDR_VAR 0 50
37936: PUSH
37937: LD_INT 2
37939: PUSH
37940: LD_INT 3
37942: PUSH
37943: EMPTY
37944: LIST
37945: LIST
37946: PUSH
37947: LD_INT 1
37949: PUSH
37950: LD_INT 3
37952: PUSH
37953: EMPTY
37954: LIST
37955: LIST
37956: PUSH
37957: EMPTY
37958: LIST
37959: LIST
37960: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
37961: LD_ADDR_VAR 0 51
37965: PUSH
37966: LD_INT 1
37968: NEG
37969: PUSH
37970: LD_INT 2
37972: PUSH
37973: EMPTY
37974: LIST
37975: LIST
37976: PUSH
37977: LD_INT 2
37979: NEG
37980: PUSH
37981: LD_INT 1
37983: PUSH
37984: EMPTY
37985: LIST
37986: LIST
37987: PUSH
37988: EMPTY
37989: LIST
37990: LIST
37991: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
37992: LD_ADDR_VAR 0 52
37996: PUSH
37997: LD_INT 3
37999: NEG
38000: PUSH
38001: LD_INT 1
38003: NEG
38004: PUSH
38005: EMPTY
38006: LIST
38007: LIST
38008: PUSH
38009: LD_INT 3
38011: NEG
38012: PUSH
38013: LD_INT 2
38015: NEG
38016: PUSH
38017: EMPTY
38018: LIST
38019: LIST
38020: PUSH
38021: EMPTY
38022: LIST
38023: LIST
38024: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
38025: LD_ADDR_VAR 0 53
38029: PUSH
38030: LD_INT 1
38032: NEG
38033: PUSH
38034: LD_INT 3
38036: NEG
38037: PUSH
38038: EMPTY
38039: LIST
38040: LIST
38041: PUSH
38042: LD_INT 0
38044: PUSH
38045: LD_INT 3
38047: NEG
38048: PUSH
38049: EMPTY
38050: LIST
38051: LIST
38052: PUSH
38053: LD_INT 1
38055: PUSH
38056: LD_INT 2
38058: NEG
38059: PUSH
38060: EMPTY
38061: LIST
38062: LIST
38063: PUSH
38064: EMPTY
38065: LIST
38066: LIST
38067: LIST
38068: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
38069: LD_ADDR_VAR 0 54
38073: PUSH
38074: LD_INT 2
38076: PUSH
38077: LD_INT 1
38079: NEG
38080: PUSH
38081: EMPTY
38082: LIST
38083: LIST
38084: PUSH
38085: LD_INT 3
38087: PUSH
38088: LD_INT 0
38090: PUSH
38091: EMPTY
38092: LIST
38093: LIST
38094: PUSH
38095: LD_INT 3
38097: PUSH
38098: LD_INT 1
38100: PUSH
38101: EMPTY
38102: LIST
38103: LIST
38104: PUSH
38105: EMPTY
38106: LIST
38107: LIST
38108: LIST
38109: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
38110: LD_ADDR_VAR 0 55
38114: PUSH
38115: LD_INT 3
38117: PUSH
38118: LD_INT 2
38120: PUSH
38121: EMPTY
38122: LIST
38123: LIST
38124: PUSH
38125: LD_INT 3
38127: PUSH
38128: LD_INT 3
38130: PUSH
38131: EMPTY
38132: LIST
38133: LIST
38134: PUSH
38135: LD_INT 2
38137: PUSH
38138: LD_INT 3
38140: PUSH
38141: EMPTY
38142: LIST
38143: LIST
38144: PUSH
38145: EMPTY
38146: LIST
38147: LIST
38148: LIST
38149: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
38150: LD_ADDR_VAR 0 56
38154: PUSH
38155: LD_INT 1
38157: PUSH
38158: LD_INT 3
38160: PUSH
38161: EMPTY
38162: LIST
38163: LIST
38164: PUSH
38165: LD_INT 0
38167: PUSH
38168: LD_INT 3
38170: PUSH
38171: EMPTY
38172: LIST
38173: LIST
38174: PUSH
38175: LD_INT 1
38177: NEG
38178: PUSH
38179: LD_INT 2
38181: PUSH
38182: EMPTY
38183: LIST
38184: LIST
38185: PUSH
38186: EMPTY
38187: LIST
38188: LIST
38189: LIST
38190: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
38191: LD_ADDR_VAR 0 57
38195: PUSH
38196: LD_INT 2
38198: NEG
38199: PUSH
38200: LD_INT 1
38202: PUSH
38203: EMPTY
38204: LIST
38205: LIST
38206: PUSH
38207: LD_INT 3
38209: NEG
38210: PUSH
38211: LD_INT 0
38213: PUSH
38214: EMPTY
38215: LIST
38216: LIST
38217: PUSH
38218: LD_INT 3
38220: NEG
38221: PUSH
38222: LD_INT 1
38224: NEG
38225: PUSH
38226: EMPTY
38227: LIST
38228: LIST
38229: PUSH
38230: EMPTY
38231: LIST
38232: LIST
38233: LIST
38234: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
38235: LD_ADDR_VAR 0 58
38239: PUSH
38240: LD_INT 2
38242: NEG
38243: PUSH
38244: LD_INT 3
38246: NEG
38247: PUSH
38248: EMPTY
38249: LIST
38250: LIST
38251: PUSH
38252: LD_INT 3
38254: NEG
38255: PUSH
38256: LD_INT 2
38258: NEG
38259: PUSH
38260: EMPTY
38261: LIST
38262: LIST
38263: PUSH
38264: LD_INT 3
38266: NEG
38267: PUSH
38268: LD_INT 3
38270: NEG
38271: PUSH
38272: EMPTY
38273: LIST
38274: LIST
38275: PUSH
38276: EMPTY
38277: LIST
38278: LIST
38279: LIST
38280: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
38281: LD_ADDR_VAR 0 59
38285: PUSH
38286: LD_INT 1
38288: NEG
38289: PUSH
38290: LD_INT 2
38292: NEG
38293: PUSH
38294: EMPTY
38295: LIST
38296: LIST
38297: PUSH
38298: LD_INT 0
38300: PUSH
38301: LD_INT 2
38303: NEG
38304: PUSH
38305: EMPTY
38306: LIST
38307: LIST
38308: PUSH
38309: LD_INT 1
38311: PUSH
38312: LD_INT 1
38314: NEG
38315: PUSH
38316: EMPTY
38317: LIST
38318: LIST
38319: PUSH
38320: EMPTY
38321: LIST
38322: LIST
38323: LIST
38324: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
38325: LD_ADDR_VAR 0 60
38329: PUSH
38330: LD_INT 1
38332: PUSH
38333: LD_INT 1
38335: NEG
38336: PUSH
38337: EMPTY
38338: LIST
38339: LIST
38340: PUSH
38341: LD_INT 2
38343: PUSH
38344: LD_INT 0
38346: PUSH
38347: EMPTY
38348: LIST
38349: LIST
38350: PUSH
38351: LD_INT 2
38353: PUSH
38354: LD_INT 1
38356: PUSH
38357: EMPTY
38358: LIST
38359: LIST
38360: PUSH
38361: EMPTY
38362: LIST
38363: LIST
38364: LIST
38365: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
38366: LD_ADDR_VAR 0 61
38370: PUSH
38371: LD_INT 2
38373: PUSH
38374: LD_INT 1
38376: PUSH
38377: EMPTY
38378: LIST
38379: LIST
38380: PUSH
38381: LD_INT 2
38383: PUSH
38384: LD_INT 2
38386: PUSH
38387: EMPTY
38388: LIST
38389: LIST
38390: PUSH
38391: LD_INT 1
38393: PUSH
38394: LD_INT 2
38396: PUSH
38397: EMPTY
38398: LIST
38399: LIST
38400: PUSH
38401: EMPTY
38402: LIST
38403: LIST
38404: LIST
38405: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
38406: LD_ADDR_VAR 0 62
38410: PUSH
38411: LD_INT 1
38413: PUSH
38414: LD_INT 2
38416: PUSH
38417: EMPTY
38418: LIST
38419: LIST
38420: PUSH
38421: LD_INT 0
38423: PUSH
38424: LD_INT 2
38426: PUSH
38427: EMPTY
38428: LIST
38429: LIST
38430: PUSH
38431: LD_INT 1
38433: NEG
38434: PUSH
38435: LD_INT 1
38437: PUSH
38438: EMPTY
38439: LIST
38440: LIST
38441: PUSH
38442: EMPTY
38443: LIST
38444: LIST
38445: LIST
38446: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
38447: LD_ADDR_VAR 0 63
38451: PUSH
38452: LD_INT 1
38454: NEG
38455: PUSH
38456: LD_INT 1
38458: PUSH
38459: EMPTY
38460: LIST
38461: LIST
38462: PUSH
38463: LD_INT 2
38465: NEG
38466: PUSH
38467: LD_INT 0
38469: PUSH
38470: EMPTY
38471: LIST
38472: LIST
38473: PUSH
38474: LD_INT 2
38476: NEG
38477: PUSH
38478: LD_INT 1
38480: NEG
38481: PUSH
38482: EMPTY
38483: LIST
38484: LIST
38485: PUSH
38486: EMPTY
38487: LIST
38488: LIST
38489: LIST
38490: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38491: LD_ADDR_VAR 0 64
38495: PUSH
38496: LD_INT 1
38498: NEG
38499: PUSH
38500: LD_INT 2
38502: NEG
38503: PUSH
38504: EMPTY
38505: LIST
38506: LIST
38507: PUSH
38508: LD_INT 2
38510: NEG
38511: PUSH
38512: LD_INT 1
38514: NEG
38515: PUSH
38516: EMPTY
38517: LIST
38518: LIST
38519: PUSH
38520: LD_INT 2
38522: NEG
38523: PUSH
38524: LD_INT 2
38526: NEG
38527: PUSH
38528: EMPTY
38529: LIST
38530: LIST
38531: PUSH
38532: EMPTY
38533: LIST
38534: LIST
38535: LIST
38536: ST_TO_ADDR
// end ; 2 :
38537: GO 41803
38539: LD_INT 2
38541: DOUBLE
38542: EQUAL
38543: IFTRUE 38547
38545: GO 41802
38547: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
38548: LD_ADDR_VAR 0 29
38552: PUSH
38553: LD_INT 4
38555: PUSH
38556: LD_INT 0
38558: PUSH
38559: EMPTY
38560: LIST
38561: LIST
38562: PUSH
38563: LD_INT 4
38565: PUSH
38566: LD_INT 1
38568: NEG
38569: PUSH
38570: EMPTY
38571: LIST
38572: LIST
38573: PUSH
38574: LD_INT 5
38576: PUSH
38577: LD_INT 0
38579: PUSH
38580: EMPTY
38581: LIST
38582: LIST
38583: PUSH
38584: LD_INT 5
38586: PUSH
38587: LD_INT 1
38589: PUSH
38590: EMPTY
38591: LIST
38592: LIST
38593: PUSH
38594: LD_INT 4
38596: PUSH
38597: LD_INT 1
38599: PUSH
38600: EMPTY
38601: LIST
38602: LIST
38603: PUSH
38604: LD_INT 3
38606: PUSH
38607: LD_INT 0
38609: PUSH
38610: EMPTY
38611: LIST
38612: LIST
38613: PUSH
38614: LD_INT 3
38616: PUSH
38617: LD_INT 1
38619: NEG
38620: PUSH
38621: EMPTY
38622: LIST
38623: LIST
38624: PUSH
38625: LD_INT 3
38627: PUSH
38628: LD_INT 2
38630: NEG
38631: PUSH
38632: EMPTY
38633: LIST
38634: LIST
38635: PUSH
38636: LD_INT 5
38638: PUSH
38639: LD_INT 2
38641: PUSH
38642: EMPTY
38643: LIST
38644: LIST
38645: PUSH
38646: LD_INT 3
38648: PUSH
38649: LD_INT 3
38651: PUSH
38652: EMPTY
38653: LIST
38654: LIST
38655: PUSH
38656: LD_INT 3
38658: PUSH
38659: LD_INT 2
38661: PUSH
38662: EMPTY
38663: LIST
38664: LIST
38665: PUSH
38666: LD_INT 4
38668: PUSH
38669: LD_INT 3
38671: PUSH
38672: EMPTY
38673: LIST
38674: LIST
38675: PUSH
38676: LD_INT 4
38678: PUSH
38679: LD_INT 4
38681: PUSH
38682: EMPTY
38683: LIST
38684: LIST
38685: PUSH
38686: LD_INT 3
38688: PUSH
38689: LD_INT 4
38691: PUSH
38692: EMPTY
38693: LIST
38694: LIST
38695: PUSH
38696: LD_INT 2
38698: PUSH
38699: LD_INT 3
38701: PUSH
38702: EMPTY
38703: LIST
38704: LIST
38705: PUSH
38706: LD_INT 2
38708: PUSH
38709: LD_INT 2
38711: PUSH
38712: EMPTY
38713: LIST
38714: LIST
38715: PUSH
38716: LD_INT 4
38718: PUSH
38719: LD_INT 2
38721: PUSH
38722: EMPTY
38723: LIST
38724: LIST
38725: PUSH
38726: LD_INT 2
38728: PUSH
38729: LD_INT 4
38731: PUSH
38732: EMPTY
38733: LIST
38734: LIST
38735: PUSH
38736: LD_INT 0
38738: PUSH
38739: LD_INT 4
38741: PUSH
38742: EMPTY
38743: LIST
38744: LIST
38745: PUSH
38746: LD_INT 0
38748: PUSH
38749: LD_INT 3
38751: PUSH
38752: EMPTY
38753: LIST
38754: LIST
38755: PUSH
38756: LD_INT 1
38758: PUSH
38759: LD_INT 4
38761: PUSH
38762: EMPTY
38763: LIST
38764: LIST
38765: PUSH
38766: LD_INT 1
38768: PUSH
38769: LD_INT 5
38771: PUSH
38772: EMPTY
38773: LIST
38774: LIST
38775: PUSH
38776: LD_INT 0
38778: PUSH
38779: LD_INT 5
38781: PUSH
38782: EMPTY
38783: LIST
38784: LIST
38785: PUSH
38786: LD_INT 1
38788: NEG
38789: PUSH
38790: LD_INT 4
38792: PUSH
38793: EMPTY
38794: LIST
38795: LIST
38796: PUSH
38797: LD_INT 1
38799: NEG
38800: PUSH
38801: LD_INT 3
38803: PUSH
38804: EMPTY
38805: LIST
38806: LIST
38807: PUSH
38808: LD_INT 2
38810: PUSH
38811: LD_INT 5
38813: PUSH
38814: EMPTY
38815: LIST
38816: LIST
38817: PUSH
38818: LD_INT 2
38820: NEG
38821: PUSH
38822: LD_INT 3
38824: PUSH
38825: EMPTY
38826: LIST
38827: LIST
38828: PUSH
38829: LD_INT 3
38831: NEG
38832: PUSH
38833: LD_INT 0
38835: PUSH
38836: EMPTY
38837: LIST
38838: LIST
38839: PUSH
38840: LD_INT 3
38842: NEG
38843: PUSH
38844: LD_INT 1
38846: NEG
38847: PUSH
38848: EMPTY
38849: LIST
38850: LIST
38851: PUSH
38852: LD_INT 2
38854: NEG
38855: PUSH
38856: LD_INT 0
38858: PUSH
38859: EMPTY
38860: LIST
38861: LIST
38862: PUSH
38863: LD_INT 2
38865: NEG
38866: PUSH
38867: LD_INT 1
38869: PUSH
38870: EMPTY
38871: LIST
38872: LIST
38873: PUSH
38874: LD_INT 3
38876: NEG
38877: PUSH
38878: LD_INT 1
38880: PUSH
38881: EMPTY
38882: LIST
38883: LIST
38884: PUSH
38885: LD_INT 4
38887: NEG
38888: PUSH
38889: LD_INT 0
38891: PUSH
38892: EMPTY
38893: LIST
38894: LIST
38895: PUSH
38896: LD_INT 4
38898: NEG
38899: PUSH
38900: LD_INT 1
38902: NEG
38903: PUSH
38904: EMPTY
38905: LIST
38906: LIST
38907: PUSH
38908: LD_INT 4
38910: NEG
38911: PUSH
38912: LD_INT 2
38914: NEG
38915: PUSH
38916: EMPTY
38917: LIST
38918: LIST
38919: PUSH
38920: LD_INT 2
38922: NEG
38923: PUSH
38924: LD_INT 2
38926: PUSH
38927: EMPTY
38928: LIST
38929: LIST
38930: PUSH
38931: LD_INT 4
38933: NEG
38934: PUSH
38935: LD_INT 4
38937: NEG
38938: PUSH
38939: EMPTY
38940: LIST
38941: LIST
38942: PUSH
38943: LD_INT 4
38945: NEG
38946: PUSH
38947: LD_INT 5
38949: NEG
38950: PUSH
38951: EMPTY
38952: LIST
38953: LIST
38954: PUSH
38955: LD_INT 3
38957: NEG
38958: PUSH
38959: LD_INT 4
38961: NEG
38962: PUSH
38963: EMPTY
38964: LIST
38965: LIST
38966: PUSH
38967: LD_INT 3
38969: NEG
38970: PUSH
38971: LD_INT 3
38973: NEG
38974: PUSH
38975: EMPTY
38976: LIST
38977: LIST
38978: PUSH
38979: LD_INT 4
38981: NEG
38982: PUSH
38983: LD_INT 3
38985: NEG
38986: PUSH
38987: EMPTY
38988: LIST
38989: LIST
38990: PUSH
38991: LD_INT 5
38993: NEG
38994: PUSH
38995: LD_INT 4
38997: NEG
38998: PUSH
38999: EMPTY
39000: LIST
39001: LIST
39002: PUSH
39003: LD_INT 5
39005: NEG
39006: PUSH
39007: LD_INT 5
39009: NEG
39010: PUSH
39011: EMPTY
39012: LIST
39013: LIST
39014: PUSH
39015: LD_INT 3
39017: NEG
39018: PUSH
39019: LD_INT 5
39021: NEG
39022: PUSH
39023: EMPTY
39024: LIST
39025: LIST
39026: PUSH
39027: LD_INT 5
39029: NEG
39030: PUSH
39031: LD_INT 3
39033: NEG
39034: PUSH
39035: EMPTY
39036: LIST
39037: LIST
39038: PUSH
39039: EMPTY
39040: LIST
39041: LIST
39042: LIST
39043: LIST
39044: LIST
39045: LIST
39046: LIST
39047: LIST
39048: LIST
39049: LIST
39050: LIST
39051: LIST
39052: LIST
39053: LIST
39054: LIST
39055: LIST
39056: LIST
39057: LIST
39058: LIST
39059: LIST
39060: LIST
39061: LIST
39062: LIST
39063: LIST
39064: LIST
39065: LIST
39066: LIST
39067: LIST
39068: LIST
39069: LIST
39070: LIST
39071: LIST
39072: LIST
39073: LIST
39074: LIST
39075: LIST
39076: LIST
39077: LIST
39078: LIST
39079: LIST
39080: LIST
39081: LIST
39082: LIST
39083: LIST
39084: LIST
39085: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
39086: LD_ADDR_VAR 0 30
39090: PUSH
39091: LD_INT 4
39093: PUSH
39094: LD_INT 4
39096: PUSH
39097: EMPTY
39098: LIST
39099: LIST
39100: PUSH
39101: LD_INT 4
39103: PUSH
39104: LD_INT 3
39106: PUSH
39107: EMPTY
39108: LIST
39109: LIST
39110: PUSH
39111: LD_INT 5
39113: PUSH
39114: LD_INT 4
39116: PUSH
39117: EMPTY
39118: LIST
39119: LIST
39120: PUSH
39121: LD_INT 5
39123: PUSH
39124: LD_INT 5
39126: PUSH
39127: EMPTY
39128: LIST
39129: LIST
39130: PUSH
39131: LD_INT 4
39133: PUSH
39134: LD_INT 5
39136: PUSH
39137: EMPTY
39138: LIST
39139: LIST
39140: PUSH
39141: LD_INT 3
39143: PUSH
39144: LD_INT 4
39146: PUSH
39147: EMPTY
39148: LIST
39149: LIST
39150: PUSH
39151: LD_INT 3
39153: PUSH
39154: LD_INT 3
39156: PUSH
39157: EMPTY
39158: LIST
39159: LIST
39160: PUSH
39161: LD_INT 5
39163: PUSH
39164: LD_INT 3
39166: PUSH
39167: EMPTY
39168: LIST
39169: LIST
39170: PUSH
39171: LD_INT 3
39173: PUSH
39174: LD_INT 5
39176: PUSH
39177: EMPTY
39178: LIST
39179: LIST
39180: PUSH
39181: LD_INT 0
39183: PUSH
39184: LD_INT 3
39186: PUSH
39187: EMPTY
39188: LIST
39189: LIST
39190: PUSH
39191: LD_INT 0
39193: PUSH
39194: LD_INT 2
39196: PUSH
39197: EMPTY
39198: LIST
39199: LIST
39200: PUSH
39201: LD_INT 1
39203: PUSH
39204: LD_INT 3
39206: PUSH
39207: EMPTY
39208: LIST
39209: LIST
39210: PUSH
39211: LD_INT 1
39213: PUSH
39214: LD_INT 4
39216: PUSH
39217: EMPTY
39218: LIST
39219: LIST
39220: PUSH
39221: LD_INT 0
39223: PUSH
39224: LD_INT 4
39226: PUSH
39227: EMPTY
39228: LIST
39229: LIST
39230: PUSH
39231: LD_INT 1
39233: NEG
39234: PUSH
39235: LD_INT 3
39237: PUSH
39238: EMPTY
39239: LIST
39240: LIST
39241: PUSH
39242: LD_INT 1
39244: NEG
39245: PUSH
39246: LD_INT 2
39248: PUSH
39249: EMPTY
39250: LIST
39251: LIST
39252: PUSH
39253: LD_INT 2
39255: PUSH
39256: LD_INT 4
39258: PUSH
39259: EMPTY
39260: LIST
39261: LIST
39262: PUSH
39263: LD_INT 2
39265: NEG
39266: PUSH
39267: LD_INT 2
39269: PUSH
39270: EMPTY
39271: LIST
39272: LIST
39273: PUSH
39274: LD_INT 4
39276: NEG
39277: PUSH
39278: LD_INT 0
39280: PUSH
39281: EMPTY
39282: LIST
39283: LIST
39284: PUSH
39285: LD_INT 4
39287: NEG
39288: PUSH
39289: LD_INT 1
39291: NEG
39292: PUSH
39293: EMPTY
39294: LIST
39295: LIST
39296: PUSH
39297: LD_INT 3
39299: NEG
39300: PUSH
39301: LD_INT 0
39303: PUSH
39304: EMPTY
39305: LIST
39306: LIST
39307: PUSH
39308: LD_INT 3
39310: NEG
39311: PUSH
39312: LD_INT 1
39314: PUSH
39315: EMPTY
39316: LIST
39317: LIST
39318: PUSH
39319: LD_INT 4
39321: NEG
39322: PUSH
39323: LD_INT 1
39325: PUSH
39326: EMPTY
39327: LIST
39328: LIST
39329: PUSH
39330: LD_INT 5
39332: NEG
39333: PUSH
39334: LD_INT 0
39336: PUSH
39337: EMPTY
39338: LIST
39339: LIST
39340: PUSH
39341: LD_INT 5
39343: NEG
39344: PUSH
39345: LD_INT 1
39347: NEG
39348: PUSH
39349: EMPTY
39350: LIST
39351: LIST
39352: PUSH
39353: LD_INT 5
39355: NEG
39356: PUSH
39357: LD_INT 2
39359: NEG
39360: PUSH
39361: EMPTY
39362: LIST
39363: LIST
39364: PUSH
39365: LD_INT 3
39367: NEG
39368: PUSH
39369: LD_INT 2
39371: PUSH
39372: EMPTY
39373: LIST
39374: LIST
39375: PUSH
39376: LD_INT 3
39378: NEG
39379: PUSH
39380: LD_INT 3
39382: NEG
39383: PUSH
39384: EMPTY
39385: LIST
39386: LIST
39387: PUSH
39388: LD_INT 3
39390: NEG
39391: PUSH
39392: LD_INT 4
39394: NEG
39395: PUSH
39396: EMPTY
39397: LIST
39398: LIST
39399: PUSH
39400: LD_INT 2
39402: NEG
39403: PUSH
39404: LD_INT 3
39406: NEG
39407: PUSH
39408: EMPTY
39409: LIST
39410: LIST
39411: PUSH
39412: LD_INT 2
39414: NEG
39415: PUSH
39416: LD_INT 2
39418: NEG
39419: PUSH
39420: EMPTY
39421: LIST
39422: LIST
39423: PUSH
39424: LD_INT 3
39426: NEG
39427: PUSH
39428: LD_INT 2
39430: NEG
39431: PUSH
39432: EMPTY
39433: LIST
39434: LIST
39435: PUSH
39436: LD_INT 4
39438: NEG
39439: PUSH
39440: LD_INT 3
39442: NEG
39443: PUSH
39444: EMPTY
39445: LIST
39446: LIST
39447: PUSH
39448: LD_INT 4
39450: NEG
39451: PUSH
39452: LD_INT 4
39454: NEG
39455: PUSH
39456: EMPTY
39457: LIST
39458: LIST
39459: PUSH
39460: LD_INT 2
39462: NEG
39463: PUSH
39464: LD_INT 4
39466: NEG
39467: PUSH
39468: EMPTY
39469: LIST
39470: LIST
39471: PUSH
39472: LD_INT 4
39474: NEG
39475: PUSH
39476: LD_INT 2
39478: NEG
39479: PUSH
39480: EMPTY
39481: LIST
39482: LIST
39483: PUSH
39484: LD_INT 0
39486: PUSH
39487: LD_INT 4
39489: NEG
39490: PUSH
39491: EMPTY
39492: LIST
39493: LIST
39494: PUSH
39495: LD_INT 0
39497: PUSH
39498: LD_INT 5
39500: NEG
39501: PUSH
39502: EMPTY
39503: LIST
39504: LIST
39505: PUSH
39506: LD_INT 1
39508: PUSH
39509: LD_INT 4
39511: NEG
39512: PUSH
39513: EMPTY
39514: LIST
39515: LIST
39516: PUSH
39517: LD_INT 1
39519: PUSH
39520: LD_INT 3
39522: NEG
39523: PUSH
39524: EMPTY
39525: LIST
39526: LIST
39527: PUSH
39528: LD_INT 0
39530: PUSH
39531: LD_INT 3
39533: NEG
39534: PUSH
39535: EMPTY
39536: LIST
39537: LIST
39538: PUSH
39539: LD_INT 1
39541: NEG
39542: PUSH
39543: LD_INT 4
39545: NEG
39546: PUSH
39547: EMPTY
39548: LIST
39549: LIST
39550: PUSH
39551: LD_INT 1
39553: NEG
39554: PUSH
39555: LD_INT 5
39557: NEG
39558: PUSH
39559: EMPTY
39560: LIST
39561: LIST
39562: PUSH
39563: LD_INT 2
39565: PUSH
39566: LD_INT 3
39568: NEG
39569: PUSH
39570: EMPTY
39571: LIST
39572: LIST
39573: PUSH
39574: LD_INT 2
39576: NEG
39577: PUSH
39578: LD_INT 5
39580: NEG
39581: PUSH
39582: EMPTY
39583: LIST
39584: LIST
39585: PUSH
39586: EMPTY
39587: LIST
39588: LIST
39589: LIST
39590: LIST
39591: LIST
39592: LIST
39593: LIST
39594: LIST
39595: LIST
39596: LIST
39597: LIST
39598: LIST
39599: LIST
39600: LIST
39601: LIST
39602: LIST
39603: LIST
39604: LIST
39605: LIST
39606: LIST
39607: LIST
39608: LIST
39609: LIST
39610: LIST
39611: LIST
39612: LIST
39613: LIST
39614: LIST
39615: LIST
39616: LIST
39617: LIST
39618: LIST
39619: LIST
39620: LIST
39621: LIST
39622: LIST
39623: LIST
39624: LIST
39625: LIST
39626: LIST
39627: LIST
39628: LIST
39629: LIST
39630: LIST
39631: LIST
39632: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
39633: LD_ADDR_VAR 0 31
39637: PUSH
39638: LD_INT 0
39640: PUSH
39641: LD_INT 4
39643: PUSH
39644: EMPTY
39645: LIST
39646: LIST
39647: PUSH
39648: LD_INT 0
39650: PUSH
39651: LD_INT 3
39653: PUSH
39654: EMPTY
39655: LIST
39656: LIST
39657: PUSH
39658: LD_INT 1
39660: PUSH
39661: LD_INT 4
39663: PUSH
39664: EMPTY
39665: LIST
39666: LIST
39667: PUSH
39668: LD_INT 1
39670: PUSH
39671: LD_INT 5
39673: PUSH
39674: EMPTY
39675: LIST
39676: LIST
39677: PUSH
39678: LD_INT 0
39680: PUSH
39681: LD_INT 5
39683: PUSH
39684: EMPTY
39685: LIST
39686: LIST
39687: PUSH
39688: LD_INT 1
39690: NEG
39691: PUSH
39692: LD_INT 4
39694: PUSH
39695: EMPTY
39696: LIST
39697: LIST
39698: PUSH
39699: LD_INT 1
39701: NEG
39702: PUSH
39703: LD_INT 3
39705: PUSH
39706: EMPTY
39707: LIST
39708: LIST
39709: PUSH
39710: LD_INT 2
39712: PUSH
39713: LD_INT 5
39715: PUSH
39716: EMPTY
39717: LIST
39718: LIST
39719: PUSH
39720: LD_INT 2
39722: NEG
39723: PUSH
39724: LD_INT 3
39726: PUSH
39727: EMPTY
39728: LIST
39729: LIST
39730: PUSH
39731: LD_INT 3
39733: NEG
39734: PUSH
39735: LD_INT 0
39737: PUSH
39738: EMPTY
39739: LIST
39740: LIST
39741: PUSH
39742: LD_INT 3
39744: NEG
39745: PUSH
39746: LD_INT 1
39748: NEG
39749: PUSH
39750: EMPTY
39751: LIST
39752: LIST
39753: PUSH
39754: LD_INT 2
39756: NEG
39757: PUSH
39758: LD_INT 0
39760: PUSH
39761: EMPTY
39762: LIST
39763: LIST
39764: PUSH
39765: LD_INT 2
39767: NEG
39768: PUSH
39769: LD_INT 1
39771: PUSH
39772: EMPTY
39773: LIST
39774: LIST
39775: PUSH
39776: LD_INT 3
39778: NEG
39779: PUSH
39780: LD_INT 1
39782: PUSH
39783: EMPTY
39784: LIST
39785: LIST
39786: PUSH
39787: LD_INT 4
39789: NEG
39790: PUSH
39791: LD_INT 0
39793: PUSH
39794: EMPTY
39795: LIST
39796: LIST
39797: PUSH
39798: LD_INT 4
39800: NEG
39801: PUSH
39802: LD_INT 1
39804: NEG
39805: PUSH
39806: EMPTY
39807: LIST
39808: LIST
39809: PUSH
39810: LD_INT 4
39812: NEG
39813: PUSH
39814: LD_INT 2
39816: NEG
39817: PUSH
39818: EMPTY
39819: LIST
39820: LIST
39821: PUSH
39822: LD_INT 2
39824: NEG
39825: PUSH
39826: LD_INT 2
39828: PUSH
39829: EMPTY
39830: LIST
39831: LIST
39832: PUSH
39833: LD_INT 4
39835: NEG
39836: PUSH
39837: LD_INT 4
39839: NEG
39840: PUSH
39841: EMPTY
39842: LIST
39843: LIST
39844: PUSH
39845: LD_INT 4
39847: NEG
39848: PUSH
39849: LD_INT 5
39851: NEG
39852: PUSH
39853: EMPTY
39854: LIST
39855: LIST
39856: PUSH
39857: LD_INT 3
39859: NEG
39860: PUSH
39861: LD_INT 4
39863: NEG
39864: PUSH
39865: EMPTY
39866: LIST
39867: LIST
39868: PUSH
39869: LD_INT 3
39871: NEG
39872: PUSH
39873: LD_INT 3
39875: NEG
39876: PUSH
39877: EMPTY
39878: LIST
39879: LIST
39880: PUSH
39881: LD_INT 4
39883: NEG
39884: PUSH
39885: LD_INT 3
39887: NEG
39888: PUSH
39889: EMPTY
39890: LIST
39891: LIST
39892: PUSH
39893: LD_INT 5
39895: NEG
39896: PUSH
39897: LD_INT 4
39899: NEG
39900: PUSH
39901: EMPTY
39902: LIST
39903: LIST
39904: PUSH
39905: LD_INT 5
39907: NEG
39908: PUSH
39909: LD_INT 5
39911: NEG
39912: PUSH
39913: EMPTY
39914: LIST
39915: LIST
39916: PUSH
39917: LD_INT 3
39919: NEG
39920: PUSH
39921: LD_INT 5
39923: NEG
39924: PUSH
39925: EMPTY
39926: LIST
39927: LIST
39928: PUSH
39929: LD_INT 5
39931: NEG
39932: PUSH
39933: LD_INT 3
39935: NEG
39936: PUSH
39937: EMPTY
39938: LIST
39939: LIST
39940: PUSH
39941: LD_INT 0
39943: PUSH
39944: LD_INT 3
39946: NEG
39947: PUSH
39948: EMPTY
39949: LIST
39950: LIST
39951: PUSH
39952: LD_INT 0
39954: PUSH
39955: LD_INT 4
39957: NEG
39958: PUSH
39959: EMPTY
39960: LIST
39961: LIST
39962: PUSH
39963: LD_INT 1
39965: PUSH
39966: LD_INT 3
39968: NEG
39969: PUSH
39970: EMPTY
39971: LIST
39972: LIST
39973: PUSH
39974: LD_INT 1
39976: PUSH
39977: LD_INT 2
39979: NEG
39980: PUSH
39981: EMPTY
39982: LIST
39983: LIST
39984: PUSH
39985: LD_INT 0
39987: PUSH
39988: LD_INT 2
39990: NEG
39991: PUSH
39992: EMPTY
39993: LIST
39994: LIST
39995: PUSH
39996: LD_INT 1
39998: NEG
39999: PUSH
40000: LD_INT 3
40002: NEG
40003: PUSH
40004: EMPTY
40005: LIST
40006: LIST
40007: PUSH
40008: LD_INT 1
40010: NEG
40011: PUSH
40012: LD_INT 4
40014: NEG
40015: PUSH
40016: EMPTY
40017: LIST
40018: LIST
40019: PUSH
40020: LD_INT 2
40022: PUSH
40023: LD_INT 2
40025: NEG
40026: PUSH
40027: EMPTY
40028: LIST
40029: LIST
40030: PUSH
40031: LD_INT 2
40033: NEG
40034: PUSH
40035: LD_INT 4
40037: NEG
40038: PUSH
40039: EMPTY
40040: LIST
40041: LIST
40042: PUSH
40043: LD_INT 4
40045: PUSH
40046: LD_INT 0
40048: PUSH
40049: EMPTY
40050: LIST
40051: LIST
40052: PUSH
40053: LD_INT 4
40055: PUSH
40056: LD_INT 1
40058: NEG
40059: PUSH
40060: EMPTY
40061: LIST
40062: LIST
40063: PUSH
40064: LD_INT 5
40066: PUSH
40067: LD_INT 0
40069: PUSH
40070: EMPTY
40071: LIST
40072: LIST
40073: PUSH
40074: LD_INT 5
40076: PUSH
40077: LD_INT 1
40079: PUSH
40080: EMPTY
40081: LIST
40082: LIST
40083: PUSH
40084: LD_INT 4
40086: PUSH
40087: LD_INT 1
40089: PUSH
40090: EMPTY
40091: LIST
40092: LIST
40093: PUSH
40094: LD_INT 3
40096: PUSH
40097: LD_INT 0
40099: PUSH
40100: EMPTY
40101: LIST
40102: LIST
40103: PUSH
40104: LD_INT 3
40106: PUSH
40107: LD_INT 1
40109: NEG
40110: PUSH
40111: EMPTY
40112: LIST
40113: LIST
40114: PUSH
40115: LD_INT 3
40117: PUSH
40118: LD_INT 2
40120: NEG
40121: PUSH
40122: EMPTY
40123: LIST
40124: LIST
40125: PUSH
40126: LD_INT 5
40128: PUSH
40129: LD_INT 2
40131: PUSH
40132: EMPTY
40133: LIST
40134: LIST
40135: PUSH
40136: EMPTY
40137: LIST
40138: LIST
40139: LIST
40140: LIST
40141: LIST
40142: LIST
40143: LIST
40144: LIST
40145: LIST
40146: LIST
40147: LIST
40148: LIST
40149: LIST
40150: LIST
40151: LIST
40152: LIST
40153: LIST
40154: LIST
40155: LIST
40156: LIST
40157: LIST
40158: LIST
40159: LIST
40160: LIST
40161: LIST
40162: LIST
40163: LIST
40164: LIST
40165: LIST
40166: LIST
40167: LIST
40168: LIST
40169: LIST
40170: LIST
40171: LIST
40172: LIST
40173: LIST
40174: LIST
40175: LIST
40176: LIST
40177: LIST
40178: LIST
40179: LIST
40180: LIST
40181: LIST
40182: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
40183: LD_ADDR_VAR 0 32
40187: PUSH
40188: LD_INT 4
40190: NEG
40191: PUSH
40192: LD_INT 0
40194: PUSH
40195: EMPTY
40196: LIST
40197: LIST
40198: PUSH
40199: LD_INT 4
40201: NEG
40202: PUSH
40203: LD_INT 1
40205: NEG
40206: PUSH
40207: EMPTY
40208: LIST
40209: LIST
40210: PUSH
40211: LD_INT 3
40213: NEG
40214: PUSH
40215: LD_INT 0
40217: PUSH
40218: EMPTY
40219: LIST
40220: LIST
40221: PUSH
40222: LD_INT 3
40224: NEG
40225: PUSH
40226: LD_INT 1
40228: PUSH
40229: EMPTY
40230: LIST
40231: LIST
40232: PUSH
40233: LD_INT 4
40235: NEG
40236: PUSH
40237: LD_INT 1
40239: PUSH
40240: EMPTY
40241: LIST
40242: LIST
40243: PUSH
40244: LD_INT 5
40246: NEG
40247: PUSH
40248: LD_INT 0
40250: PUSH
40251: EMPTY
40252: LIST
40253: LIST
40254: PUSH
40255: LD_INT 5
40257: NEG
40258: PUSH
40259: LD_INT 1
40261: NEG
40262: PUSH
40263: EMPTY
40264: LIST
40265: LIST
40266: PUSH
40267: LD_INT 5
40269: NEG
40270: PUSH
40271: LD_INT 2
40273: NEG
40274: PUSH
40275: EMPTY
40276: LIST
40277: LIST
40278: PUSH
40279: LD_INT 3
40281: NEG
40282: PUSH
40283: LD_INT 2
40285: PUSH
40286: EMPTY
40287: LIST
40288: LIST
40289: PUSH
40290: LD_INT 3
40292: NEG
40293: PUSH
40294: LD_INT 3
40296: NEG
40297: PUSH
40298: EMPTY
40299: LIST
40300: LIST
40301: PUSH
40302: LD_INT 3
40304: NEG
40305: PUSH
40306: LD_INT 4
40308: NEG
40309: PUSH
40310: EMPTY
40311: LIST
40312: LIST
40313: PUSH
40314: LD_INT 2
40316: NEG
40317: PUSH
40318: LD_INT 3
40320: NEG
40321: PUSH
40322: EMPTY
40323: LIST
40324: LIST
40325: PUSH
40326: LD_INT 2
40328: NEG
40329: PUSH
40330: LD_INT 2
40332: NEG
40333: PUSH
40334: EMPTY
40335: LIST
40336: LIST
40337: PUSH
40338: LD_INT 3
40340: NEG
40341: PUSH
40342: LD_INT 2
40344: NEG
40345: PUSH
40346: EMPTY
40347: LIST
40348: LIST
40349: PUSH
40350: LD_INT 4
40352: NEG
40353: PUSH
40354: LD_INT 3
40356: NEG
40357: PUSH
40358: EMPTY
40359: LIST
40360: LIST
40361: PUSH
40362: LD_INT 4
40364: NEG
40365: PUSH
40366: LD_INT 4
40368: NEG
40369: PUSH
40370: EMPTY
40371: LIST
40372: LIST
40373: PUSH
40374: LD_INT 2
40376: NEG
40377: PUSH
40378: LD_INT 4
40380: NEG
40381: PUSH
40382: EMPTY
40383: LIST
40384: LIST
40385: PUSH
40386: LD_INT 4
40388: NEG
40389: PUSH
40390: LD_INT 2
40392: NEG
40393: PUSH
40394: EMPTY
40395: LIST
40396: LIST
40397: PUSH
40398: LD_INT 0
40400: PUSH
40401: LD_INT 4
40403: NEG
40404: PUSH
40405: EMPTY
40406: LIST
40407: LIST
40408: PUSH
40409: LD_INT 0
40411: PUSH
40412: LD_INT 5
40414: NEG
40415: PUSH
40416: EMPTY
40417: LIST
40418: LIST
40419: PUSH
40420: LD_INT 1
40422: PUSH
40423: LD_INT 4
40425: NEG
40426: PUSH
40427: EMPTY
40428: LIST
40429: LIST
40430: PUSH
40431: LD_INT 1
40433: PUSH
40434: LD_INT 3
40436: NEG
40437: PUSH
40438: EMPTY
40439: LIST
40440: LIST
40441: PUSH
40442: LD_INT 0
40444: PUSH
40445: LD_INT 3
40447: NEG
40448: PUSH
40449: EMPTY
40450: LIST
40451: LIST
40452: PUSH
40453: LD_INT 1
40455: NEG
40456: PUSH
40457: LD_INT 4
40459: NEG
40460: PUSH
40461: EMPTY
40462: LIST
40463: LIST
40464: PUSH
40465: LD_INT 1
40467: NEG
40468: PUSH
40469: LD_INT 5
40471: NEG
40472: PUSH
40473: EMPTY
40474: LIST
40475: LIST
40476: PUSH
40477: LD_INT 2
40479: PUSH
40480: LD_INT 3
40482: NEG
40483: PUSH
40484: EMPTY
40485: LIST
40486: LIST
40487: PUSH
40488: LD_INT 2
40490: NEG
40491: PUSH
40492: LD_INT 5
40494: NEG
40495: PUSH
40496: EMPTY
40497: LIST
40498: LIST
40499: PUSH
40500: LD_INT 3
40502: PUSH
40503: LD_INT 0
40505: PUSH
40506: EMPTY
40507: LIST
40508: LIST
40509: PUSH
40510: LD_INT 3
40512: PUSH
40513: LD_INT 1
40515: NEG
40516: PUSH
40517: EMPTY
40518: LIST
40519: LIST
40520: PUSH
40521: LD_INT 4
40523: PUSH
40524: LD_INT 0
40526: PUSH
40527: EMPTY
40528: LIST
40529: LIST
40530: PUSH
40531: LD_INT 4
40533: PUSH
40534: LD_INT 1
40536: PUSH
40537: EMPTY
40538: LIST
40539: LIST
40540: PUSH
40541: LD_INT 3
40543: PUSH
40544: LD_INT 1
40546: PUSH
40547: EMPTY
40548: LIST
40549: LIST
40550: PUSH
40551: LD_INT 2
40553: PUSH
40554: LD_INT 0
40556: PUSH
40557: EMPTY
40558: LIST
40559: LIST
40560: PUSH
40561: LD_INT 2
40563: PUSH
40564: LD_INT 1
40566: NEG
40567: PUSH
40568: EMPTY
40569: LIST
40570: LIST
40571: PUSH
40572: LD_INT 2
40574: PUSH
40575: LD_INT 2
40577: NEG
40578: PUSH
40579: EMPTY
40580: LIST
40581: LIST
40582: PUSH
40583: LD_INT 4
40585: PUSH
40586: LD_INT 2
40588: PUSH
40589: EMPTY
40590: LIST
40591: LIST
40592: PUSH
40593: LD_INT 4
40595: PUSH
40596: LD_INT 4
40598: PUSH
40599: EMPTY
40600: LIST
40601: LIST
40602: PUSH
40603: LD_INT 4
40605: PUSH
40606: LD_INT 3
40608: PUSH
40609: EMPTY
40610: LIST
40611: LIST
40612: PUSH
40613: LD_INT 5
40615: PUSH
40616: LD_INT 4
40618: PUSH
40619: EMPTY
40620: LIST
40621: LIST
40622: PUSH
40623: LD_INT 5
40625: PUSH
40626: LD_INT 5
40628: PUSH
40629: EMPTY
40630: LIST
40631: LIST
40632: PUSH
40633: LD_INT 4
40635: PUSH
40636: LD_INT 5
40638: PUSH
40639: EMPTY
40640: LIST
40641: LIST
40642: PUSH
40643: LD_INT 3
40645: PUSH
40646: LD_INT 4
40648: PUSH
40649: EMPTY
40650: LIST
40651: LIST
40652: PUSH
40653: LD_INT 3
40655: PUSH
40656: LD_INT 3
40658: PUSH
40659: EMPTY
40660: LIST
40661: LIST
40662: PUSH
40663: LD_INT 5
40665: PUSH
40666: LD_INT 3
40668: PUSH
40669: EMPTY
40670: LIST
40671: LIST
40672: PUSH
40673: LD_INT 3
40675: PUSH
40676: LD_INT 5
40678: PUSH
40679: EMPTY
40680: LIST
40681: LIST
40682: PUSH
40683: EMPTY
40684: LIST
40685: LIST
40686: LIST
40687: LIST
40688: LIST
40689: LIST
40690: LIST
40691: LIST
40692: LIST
40693: LIST
40694: LIST
40695: LIST
40696: LIST
40697: LIST
40698: LIST
40699: LIST
40700: LIST
40701: LIST
40702: LIST
40703: LIST
40704: LIST
40705: LIST
40706: LIST
40707: LIST
40708: LIST
40709: LIST
40710: LIST
40711: LIST
40712: LIST
40713: LIST
40714: LIST
40715: LIST
40716: LIST
40717: LIST
40718: LIST
40719: LIST
40720: LIST
40721: LIST
40722: LIST
40723: LIST
40724: LIST
40725: LIST
40726: LIST
40727: LIST
40728: LIST
40729: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
40730: LD_ADDR_VAR 0 33
40734: PUSH
40735: LD_INT 4
40737: NEG
40738: PUSH
40739: LD_INT 4
40741: NEG
40742: PUSH
40743: EMPTY
40744: LIST
40745: LIST
40746: PUSH
40747: LD_INT 4
40749: NEG
40750: PUSH
40751: LD_INT 5
40753: NEG
40754: PUSH
40755: EMPTY
40756: LIST
40757: LIST
40758: PUSH
40759: LD_INT 3
40761: NEG
40762: PUSH
40763: LD_INT 4
40765: NEG
40766: PUSH
40767: EMPTY
40768: LIST
40769: LIST
40770: PUSH
40771: LD_INT 3
40773: NEG
40774: PUSH
40775: LD_INT 3
40777: NEG
40778: PUSH
40779: EMPTY
40780: LIST
40781: LIST
40782: PUSH
40783: LD_INT 4
40785: NEG
40786: PUSH
40787: LD_INT 3
40789: NEG
40790: PUSH
40791: EMPTY
40792: LIST
40793: LIST
40794: PUSH
40795: LD_INT 5
40797: NEG
40798: PUSH
40799: LD_INT 4
40801: NEG
40802: PUSH
40803: EMPTY
40804: LIST
40805: LIST
40806: PUSH
40807: LD_INT 5
40809: NEG
40810: PUSH
40811: LD_INT 5
40813: NEG
40814: PUSH
40815: EMPTY
40816: LIST
40817: LIST
40818: PUSH
40819: LD_INT 3
40821: NEG
40822: PUSH
40823: LD_INT 5
40825: NEG
40826: PUSH
40827: EMPTY
40828: LIST
40829: LIST
40830: PUSH
40831: LD_INT 5
40833: NEG
40834: PUSH
40835: LD_INT 3
40837: NEG
40838: PUSH
40839: EMPTY
40840: LIST
40841: LIST
40842: PUSH
40843: LD_INT 0
40845: PUSH
40846: LD_INT 3
40848: NEG
40849: PUSH
40850: EMPTY
40851: LIST
40852: LIST
40853: PUSH
40854: LD_INT 0
40856: PUSH
40857: LD_INT 4
40859: NEG
40860: PUSH
40861: EMPTY
40862: LIST
40863: LIST
40864: PUSH
40865: LD_INT 1
40867: PUSH
40868: LD_INT 3
40870: NEG
40871: PUSH
40872: EMPTY
40873: LIST
40874: LIST
40875: PUSH
40876: LD_INT 1
40878: PUSH
40879: LD_INT 2
40881: NEG
40882: PUSH
40883: EMPTY
40884: LIST
40885: LIST
40886: PUSH
40887: LD_INT 0
40889: PUSH
40890: LD_INT 2
40892: NEG
40893: PUSH
40894: EMPTY
40895: LIST
40896: LIST
40897: PUSH
40898: LD_INT 1
40900: NEG
40901: PUSH
40902: LD_INT 3
40904: NEG
40905: PUSH
40906: EMPTY
40907: LIST
40908: LIST
40909: PUSH
40910: LD_INT 1
40912: NEG
40913: PUSH
40914: LD_INT 4
40916: NEG
40917: PUSH
40918: EMPTY
40919: LIST
40920: LIST
40921: PUSH
40922: LD_INT 2
40924: PUSH
40925: LD_INT 2
40927: NEG
40928: PUSH
40929: EMPTY
40930: LIST
40931: LIST
40932: PUSH
40933: LD_INT 2
40935: NEG
40936: PUSH
40937: LD_INT 4
40939: NEG
40940: PUSH
40941: EMPTY
40942: LIST
40943: LIST
40944: PUSH
40945: LD_INT 4
40947: PUSH
40948: LD_INT 0
40950: PUSH
40951: EMPTY
40952: LIST
40953: LIST
40954: PUSH
40955: LD_INT 4
40957: PUSH
40958: LD_INT 1
40960: NEG
40961: PUSH
40962: EMPTY
40963: LIST
40964: LIST
40965: PUSH
40966: LD_INT 5
40968: PUSH
40969: LD_INT 0
40971: PUSH
40972: EMPTY
40973: LIST
40974: LIST
40975: PUSH
40976: LD_INT 5
40978: PUSH
40979: LD_INT 1
40981: PUSH
40982: EMPTY
40983: LIST
40984: LIST
40985: PUSH
40986: LD_INT 4
40988: PUSH
40989: LD_INT 1
40991: PUSH
40992: EMPTY
40993: LIST
40994: LIST
40995: PUSH
40996: LD_INT 3
40998: PUSH
40999: LD_INT 0
41001: PUSH
41002: EMPTY
41003: LIST
41004: LIST
41005: PUSH
41006: LD_INT 3
41008: PUSH
41009: LD_INT 1
41011: NEG
41012: PUSH
41013: EMPTY
41014: LIST
41015: LIST
41016: PUSH
41017: LD_INT 3
41019: PUSH
41020: LD_INT 2
41022: NEG
41023: PUSH
41024: EMPTY
41025: LIST
41026: LIST
41027: PUSH
41028: LD_INT 5
41030: PUSH
41031: LD_INT 2
41033: PUSH
41034: EMPTY
41035: LIST
41036: LIST
41037: PUSH
41038: LD_INT 3
41040: PUSH
41041: LD_INT 3
41043: PUSH
41044: EMPTY
41045: LIST
41046: LIST
41047: PUSH
41048: LD_INT 3
41050: PUSH
41051: LD_INT 2
41053: PUSH
41054: EMPTY
41055: LIST
41056: LIST
41057: PUSH
41058: LD_INT 4
41060: PUSH
41061: LD_INT 3
41063: PUSH
41064: EMPTY
41065: LIST
41066: LIST
41067: PUSH
41068: LD_INT 4
41070: PUSH
41071: LD_INT 4
41073: PUSH
41074: EMPTY
41075: LIST
41076: LIST
41077: PUSH
41078: LD_INT 3
41080: PUSH
41081: LD_INT 4
41083: PUSH
41084: EMPTY
41085: LIST
41086: LIST
41087: PUSH
41088: LD_INT 2
41090: PUSH
41091: LD_INT 3
41093: PUSH
41094: EMPTY
41095: LIST
41096: LIST
41097: PUSH
41098: LD_INT 2
41100: PUSH
41101: LD_INT 2
41103: PUSH
41104: EMPTY
41105: LIST
41106: LIST
41107: PUSH
41108: LD_INT 4
41110: PUSH
41111: LD_INT 2
41113: PUSH
41114: EMPTY
41115: LIST
41116: LIST
41117: PUSH
41118: LD_INT 2
41120: PUSH
41121: LD_INT 4
41123: PUSH
41124: EMPTY
41125: LIST
41126: LIST
41127: PUSH
41128: LD_INT 0
41130: PUSH
41131: LD_INT 4
41133: PUSH
41134: EMPTY
41135: LIST
41136: LIST
41137: PUSH
41138: LD_INT 0
41140: PUSH
41141: LD_INT 3
41143: PUSH
41144: EMPTY
41145: LIST
41146: LIST
41147: PUSH
41148: LD_INT 1
41150: PUSH
41151: LD_INT 4
41153: PUSH
41154: EMPTY
41155: LIST
41156: LIST
41157: PUSH
41158: LD_INT 1
41160: PUSH
41161: LD_INT 5
41163: PUSH
41164: EMPTY
41165: LIST
41166: LIST
41167: PUSH
41168: LD_INT 0
41170: PUSH
41171: LD_INT 5
41173: PUSH
41174: EMPTY
41175: LIST
41176: LIST
41177: PUSH
41178: LD_INT 1
41180: NEG
41181: PUSH
41182: LD_INT 4
41184: PUSH
41185: EMPTY
41186: LIST
41187: LIST
41188: PUSH
41189: LD_INT 1
41191: NEG
41192: PUSH
41193: LD_INT 3
41195: PUSH
41196: EMPTY
41197: LIST
41198: LIST
41199: PUSH
41200: LD_INT 2
41202: PUSH
41203: LD_INT 5
41205: PUSH
41206: EMPTY
41207: LIST
41208: LIST
41209: PUSH
41210: LD_INT 2
41212: NEG
41213: PUSH
41214: LD_INT 3
41216: PUSH
41217: EMPTY
41218: LIST
41219: LIST
41220: PUSH
41221: EMPTY
41222: LIST
41223: LIST
41224: LIST
41225: LIST
41226: LIST
41227: LIST
41228: LIST
41229: LIST
41230: LIST
41231: LIST
41232: LIST
41233: LIST
41234: LIST
41235: LIST
41236: LIST
41237: LIST
41238: LIST
41239: LIST
41240: LIST
41241: LIST
41242: LIST
41243: LIST
41244: LIST
41245: LIST
41246: LIST
41247: LIST
41248: LIST
41249: LIST
41250: LIST
41251: LIST
41252: LIST
41253: LIST
41254: LIST
41255: LIST
41256: LIST
41257: LIST
41258: LIST
41259: LIST
41260: LIST
41261: LIST
41262: LIST
41263: LIST
41264: LIST
41265: LIST
41266: LIST
41267: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
41268: LD_ADDR_VAR 0 34
41272: PUSH
41273: LD_INT 0
41275: PUSH
41276: LD_INT 4
41278: NEG
41279: PUSH
41280: EMPTY
41281: LIST
41282: LIST
41283: PUSH
41284: LD_INT 0
41286: PUSH
41287: LD_INT 5
41289: NEG
41290: PUSH
41291: EMPTY
41292: LIST
41293: LIST
41294: PUSH
41295: LD_INT 1
41297: PUSH
41298: LD_INT 4
41300: NEG
41301: PUSH
41302: EMPTY
41303: LIST
41304: LIST
41305: PUSH
41306: LD_INT 1
41308: PUSH
41309: LD_INT 3
41311: NEG
41312: PUSH
41313: EMPTY
41314: LIST
41315: LIST
41316: PUSH
41317: LD_INT 0
41319: PUSH
41320: LD_INT 3
41322: NEG
41323: PUSH
41324: EMPTY
41325: LIST
41326: LIST
41327: PUSH
41328: LD_INT 1
41330: NEG
41331: PUSH
41332: LD_INT 4
41334: NEG
41335: PUSH
41336: EMPTY
41337: LIST
41338: LIST
41339: PUSH
41340: LD_INT 1
41342: NEG
41343: PUSH
41344: LD_INT 5
41346: NEG
41347: PUSH
41348: EMPTY
41349: LIST
41350: LIST
41351: PUSH
41352: LD_INT 2
41354: PUSH
41355: LD_INT 3
41357: NEG
41358: PUSH
41359: EMPTY
41360: LIST
41361: LIST
41362: PUSH
41363: LD_INT 2
41365: NEG
41366: PUSH
41367: LD_INT 5
41369: NEG
41370: PUSH
41371: EMPTY
41372: LIST
41373: LIST
41374: PUSH
41375: LD_INT 3
41377: PUSH
41378: LD_INT 0
41380: PUSH
41381: EMPTY
41382: LIST
41383: LIST
41384: PUSH
41385: LD_INT 3
41387: PUSH
41388: LD_INT 1
41390: NEG
41391: PUSH
41392: EMPTY
41393: LIST
41394: LIST
41395: PUSH
41396: LD_INT 4
41398: PUSH
41399: LD_INT 0
41401: PUSH
41402: EMPTY
41403: LIST
41404: LIST
41405: PUSH
41406: LD_INT 4
41408: PUSH
41409: LD_INT 1
41411: PUSH
41412: EMPTY
41413: LIST
41414: LIST
41415: PUSH
41416: LD_INT 3
41418: PUSH
41419: LD_INT 1
41421: PUSH
41422: EMPTY
41423: LIST
41424: LIST
41425: PUSH
41426: LD_INT 2
41428: PUSH
41429: LD_INT 0
41431: PUSH
41432: EMPTY
41433: LIST
41434: LIST
41435: PUSH
41436: LD_INT 2
41438: PUSH
41439: LD_INT 1
41441: NEG
41442: PUSH
41443: EMPTY
41444: LIST
41445: LIST
41446: PUSH
41447: LD_INT 2
41449: PUSH
41450: LD_INT 2
41452: NEG
41453: PUSH
41454: EMPTY
41455: LIST
41456: LIST
41457: PUSH
41458: LD_INT 4
41460: PUSH
41461: LD_INT 2
41463: PUSH
41464: EMPTY
41465: LIST
41466: LIST
41467: PUSH
41468: LD_INT 4
41470: PUSH
41471: LD_INT 4
41473: PUSH
41474: EMPTY
41475: LIST
41476: LIST
41477: PUSH
41478: LD_INT 4
41480: PUSH
41481: LD_INT 3
41483: PUSH
41484: EMPTY
41485: LIST
41486: LIST
41487: PUSH
41488: LD_INT 5
41490: PUSH
41491: LD_INT 4
41493: PUSH
41494: EMPTY
41495: LIST
41496: LIST
41497: PUSH
41498: LD_INT 5
41500: PUSH
41501: LD_INT 5
41503: PUSH
41504: EMPTY
41505: LIST
41506: LIST
41507: PUSH
41508: LD_INT 4
41510: PUSH
41511: LD_INT 5
41513: PUSH
41514: EMPTY
41515: LIST
41516: LIST
41517: PUSH
41518: LD_INT 3
41520: PUSH
41521: LD_INT 4
41523: PUSH
41524: EMPTY
41525: LIST
41526: LIST
41527: PUSH
41528: LD_INT 3
41530: PUSH
41531: LD_INT 3
41533: PUSH
41534: EMPTY
41535: LIST
41536: LIST
41537: PUSH
41538: LD_INT 5
41540: PUSH
41541: LD_INT 3
41543: PUSH
41544: EMPTY
41545: LIST
41546: LIST
41547: PUSH
41548: LD_INT 3
41550: PUSH
41551: LD_INT 5
41553: PUSH
41554: EMPTY
41555: LIST
41556: LIST
41557: PUSH
41558: LD_INT 0
41560: PUSH
41561: LD_INT 3
41563: PUSH
41564: EMPTY
41565: LIST
41566: LIST
41567: PUSH
41568: LD_INT 0
41570: PUSH
41571: LD_INT 2
41573: PUSH
41574: EMPTY
41575: LIST
41576: LIST
41577: PUSH
41578: LD_INT 1
41580: PUSH
41581: LD_INT 3
41583: PUSH
41584: EMPTY
41585: LIST
41586: LIST
41587: PUSH
41588: LD_INT 1
41590: PUSH
41591: LD_INT 4
41593: PUSH
41594: EMPTY
41595: LIST
41596: LIST
41597: PUSH
41598: LD_INT 0
41600: PUSH
41601: LD_INT 4
41603: PUSH
41604: EMPTY
41605: LIST
41606: LIST
41607: PUSH
41608: LD_INT 1
41610: NEG
41611: PUSH
41612: LD_INT 3
41614: PUSH
41615: EMPTY
41616: LIST
41617: LIST
41618: PUSH
41619: LD_INT 1
41621: NEG
41622: PUSH
41623: LD_INT 2
41625: PUSH
41626: EMPTY
41627: LIST
41628: LIST
41629: PUSH
41630: LD_INT 2
41632: PUSH
41633: LD_INT 4
41635: PUSH
41636: EMPTY
41637: LIST
41638: LIST
41639: PUSH
41640: LD_INT 2
41642: NEG
41643: PUSH
41644: LD_INT 2
41646: PUSH
41647: EMPTY
41648: LIST
41649: LIST
41650: PUSH
41651: LD_INT 4
41653: NEG
41654: PUSH
41655: LD_INT 0
41657: PUSH
41658: EMPTY
41659: LIST
41660: LIST
41661: PUSH
41662: LD_INT 4
41664: NEG
41665: PUSH
41666: LD_INT 1
41668: NEG
41669: PUSH
41670: EMPTY
41671: LIST
41672: LIST
41673: PUSH
41674: LD_INT 3
41676: NEG
41677: PUSH
41678: LD_INT 0
41680: PUSH
41681: EMPTY
41682: LIST
41683: LIST
41684: PUSH
41685: LD_INT 3
41687: NEG
41688: PUSH
41689: LD_INT 1
41691: PUSH
41692: EMPTY
41693: LIST
41694: LIST
41695: PUSH
41696: LD_INT 4
41698: NEG
41699: PUSH
41700: LD_INT 1
41702: PUSH
41703: EMPTY
41704: LIST
41705: LIST
41706: PUSH
41707: LD_INT 5
41709: NEG
41710: PUSH
41711: LD_INT 0
41713: PUSH
41714: EMPTY
41715: LIST
41716: LIST
41717: PUSH
41718: LD_INT 5
41720: NEG
41721: PUSH
41722: LD_INT 1
41724: NEG
41725: PUSH
41726: EMPTY
41727: LIST
41728: LIST
41729: PUSH
41730: LD_INT 5
41732: NEG
41733: PUSH
41734: LD_INT 2
41736: NEG
41737: PUSH
41738: EMPTY
41739: LIST
41740: LIST
41741: PUSH
41742: LD_INT 3
41744: NEG
41745: PUSH
41746: LD_INT 2
41748: PUSH
41749: EMPTY
41750: LIST
41751: LIST
41752: PUSH
41753: EMPTY
41754: LIST
41755: LIST
41756: LIST
41757: LIST
41758: LIST
41759: LIST
41760: LIST
41761: LIST
41762: LIST
41763: LIST
41764: LIST
41765: LIST
41766: LIST
41767: LIST
41768: LIST
41769: LIST
41770: LIST
41771: LIST
41772: LIST
41773: LIST
41774: LIST
41775: LIST
41776: LIST
41777: LIST
41778: LIST
41779: LIST
41780: LIST
41781: LIST
41782: LIST
41783: LIST
41784: LIST
41785: LIST
41786: LIST
41787: LIST
41788: LIST
41789: LIST
41790: LIST
41791: LIST
41792: LIST
41793: LIST
41794: LIST
41795: LIST
41796: LIST
41797: LIST
41798: LIST
41799: ST_TO_ADDR
// end ; end ;
41800: GO 41803
41802: POP
// case btype of b_depot , b_warehouse :
41803: LD_VAR 0 1
41807: PUSH
41808: LD_INT 0
41810: DOUBLE
41811: EQUAL
41812: IFTRUE 41822
41814: LD_INT 1
41816: DOUBLE
41817: EQUAL
41818: IFTRUE 41822
41820: GO 42023
41822: POP
// case nation of nation_american :
41823: LD_VAR 0 5
41827: PUSH
41828: LD_INT 1
41830: DOUBLE
41831: EQUAL
41832: IFTRUE 41836
41834: GO 41892
41836: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
41837: LD_ADDR_VAR 0 9
41841: PUSH
41842: LD_VAR 0 11
41846: PUSH
41847: LD_VAR 0 12
41851: PUSH
41852: LD_VAR 0 13
41856: PUSH
41857: LD_VAR 0 14
41861: PUSH
41862: LD_VAR 0 15
41866: PUSH
41867: LD_VAR 0 16
41871: PUSH
41872: EMPTY
41873: LIST
41874: LIST
41875: LIST
41876: LIST
41877: LIST
41878: LIST
41879: PUSH
41880: LD_VAR 0 4
41884: PUSH
41885: LD_INT 1
41887: PLUS
41888: ARRAY
41889: ST_TO_ADDR
41890: GO 42021
41892: LD_INT 2
41894: DOUBLE
41895: EQUAL
41896: IFTRUE 41900
41898: GO 41956
41900: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
41901: LD_ADDR_VAR 0 9
41905: PUSH
41906: LD_VAR 0 17
41910: PUSH
41911: LD_VAR 0 18
41915: PUSH
41916: LD_VAR 0 19
41920: PUSH
41921: LD_VAR 0 20
41925: PUSH
41926: LD_VAR 0 21
41930: PUSH
41931: LD_VAR 0 22
41935: PUSH
41936: EMPTY
41937: LIST
41938: LIST
41939: LIST
41940: LIST
41941: LIST
41942: LIST
41943: PUSH
41944: LD_VAR 0 4
41948: PUSH
41949: LD_INT 1
41951: PLUS
41952: ARRAY
41953: ST_TO_ADDR
41954: GO 42021
41956: LD_INT 3
41958: DOUBLE
41959: EQUAL
41960: IFTRUE 41964
41962: GO 42020
41964: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
41965: LD_ADDR_VAR 0 9
41969: PUSH
41970: LD_VAR 0 23
41974: PUSH
41975: LD_VAR 0 24
41979: PUSH
41980: LD_VAR 0 25
41984: PUSH
41985: LD_VAR 0 26
41989: PUSH
41990: LD_VAR 0 27
41994: PUSH
41995: LD_VAR 0 28
41999: PUSH
42000: EMPTY
42001: LIST
42002: LIST
42003: LIST
42004: LIST
42005: LIST
42006: LIST
42007: PUSH
42008: LD_VAR 0 4
42012: PUSH
42013: LD_INT 1
42015: PLUS
42016: ARRAY
42017: ST_TO_ADDR
42018: GO 42021
42020: POP
42021: GO 42576
42023: LD_INT 2
42025: DOUBLE
42026: EQUAL
42027: IFTRUE 42037
42029: LD_INT 3
42031: DOUBLE
42032: EQUAL
42033: IFTRUE 42037
42035: GO 42093
42037: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
42038: LD_ADDR_VAR 0 9
42042: PUSH
42043: LD_VAR 0 29
42047: PUSH
42048: LD_VAR 0 30
42052: PUSH
42053: LD_VAR 0 31
42057: PUSH
42058: LD_VAR 0 32
42062: PUSH
42063: LD_VAR 0 33
42067: PUSH
42068: LD_VAR 0 34
42072: PUSH
42073: EMPTY
42074: LIST
42075: LIST
42076: LIST
42077: LIST
42078: LIST
42079: LIST
42080: PUSH
42081: LD_VAR 0 4
42085: PUSH
42086: LD_INT 1
42088: PLUS
42089: ARRAY
42090: ST_TO_ADDR
42091: GO 42576
42093: LD_INT 16
42095: DOUBLE
42096: EQUAL
42097: IFTRUE 42155
42099: LD_INT 17
42101: DOUBLE
42102: EQUAL
42103: IFTRUE 42155
42105: LD_INT 18
42107: DOUBLE
42108: EQUAL
42109: IFTRUE 42155
42111: LD_INT 19
42113: DOUBLE
42114: EQUAL
42115: IFTRUE 42155
42117: LD_INT 22
42119: DOUBLE
42120: EQUAL
42121: IFTRUE 42155
42123: LD_INT 20
42125: DOUBLE
42126: EQUAL
42127: IFTRUE 42155
42129: LD_INT 21
42131: DOUBLE
42132: EQUAL
42133: IFTRUE 42155
42135: LD_INT 23
42137: DOUBLE
42138: EQUAL
42139: IFTRUE 42155
42141: LD_INT 24
42143: DOUBLE
42144: EQUAL
42145: IFTRUE 42155
42147: LD_INT 25
42149: DOUBLE
42150: EQUAL
42151: IFTRUE 42155
42153: GO 42211
42155: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
42156: LD_ADDR_VAR 0 9
42160: PUSH
42161: LD_VAR 0 35
42165: PUSH
42166: LD_VAR 0 36
42170: PUSH
42171: LD_VAR 0 37
42175: PUSH
42176: LD_VAR 0 38
42180: PUSH
42181: LD_VAR 0 39
42185: PUSH
42186: LD_VAR 0 40
42190: PUSH
42191: EMPTY
42192: LIST
42193: LIST
42194: LIST
42195: LIST
42196: LIST
42197: LIST
42198: PUSH
42199: LD_VAR 0 4
42203: PUSH
42204: LD_INT 1
42206: PLUS
42207: ARRAY
42208: ST_TO_ADDR
42209: GO 42576
42211: LD_INT 6
42213: DOUBLE
42214: EQUAL
42215: IFTRUE 42267
42217: LD_INT 7
42219: DOUBLE
42220: EQUAL
42221: IFTRUE 42267
42223: LD_INT 8
42225: DOUBLE
42226: EQUAL
42227: IFTRUE 42267
42229: LD_INT 13
42231: DOUBLE
42232: EQUAL
42233: IFTRUE 42267
42235: LD_INT 12
42237: DOUBLE
42238: EQUAL
42239: IFTRUE 42267
42241: LD_INT 15
42243: DOUBLE
42244: EQUAL
42245: IFTRUE 42267
42247: LD_INT 11
42249: DOUBLE
42250: EQUAL
42251: IFTRUE 42267
42253: LD_INT 14
42255: DOUBLE
42256: EQUAL
42257: IFTRUE 42267
42259: LD_INT 10
42261: DOUBLE
42262: EQUAL
42263: IFTRUE 42267
42265: GO 42323
42267: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
42268: LD_ADDR_VAR 0 9
42272: PUSH
42273: LD_VAR 0 41
42277: PUSH
42278: LD_VAR 0 42
42282: PUSH
42283: LD_VAR 0 43
42287: PUSH
42288: LD_VAR 0 44
42292: PUSH
42293: LD_VAR 0 45
42297: PUSH
42298: LD_VAR 0 46
42302: PUSH
42303: EMPTY
42304: LIST
42305: LIST
42306: LIST
42307: LIST
42308: LIST
42309: LIST
42310: PUSH
42311: LD_VAR 0 4
42315: PUSH
42316: LD_INT 1
42318: PLUS
42319: ARRAY
42320: ST_TO_ADDR
42321: GO 42576
42323: LD_INT 36
42325: DOUBLE
42326: EQUAL
42327: IFTRUE 42331
42329: GO 42387
42331: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
42332: LD_ADDR_VAR 0 9
42336: PUSH
42337: LD_VAR 0 47
42341: PUSH
42342: LD_VAR 0 48
42346: PUSH
42347: LD_VAR 0 49
42351: PUSH
42352: LD_VAR 0 50
42356: PUSH
42357: LD_VAR 0 51
42361: PUSH
42362: LD_VAR 0 52
42366: PUSH
42367: EMPTY
42368: LIST
42369: LIST
42370: LIST
42371: LIST
42372: LIST
42373: LIST
42374: PUSH
42375: LD_VAR 0 4
42379: PUSH
42380: LD_INT 1
42382: PLUS
42383: ARRAY
42384: ST_TO_ADDR
42385: GO 42576
42387: LD_INT 4
42389: DOUBLE
42390: EQUAL
42391: IFTRUE 42413
42393: LD_INT 5
42395: DOUBLE
42396: EQUAL
42397: IFTRUE 42413
42399: LD_INT 34
42401: DOUBLE
42402: EQUAL
42403: IFTRUE 42413
42405: LD_INT 37
42407: DOUBLE
42408: EQUAL
42409: IFTRUE 42413
42411: GO 42469
42413: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
42414: LD_ADDR_VAR 0 9
42418: PUSH
42419: LD_VAR 0 53
42423: PUSH
42424: LD_VAR 0 54
42428: PUSH
42429: LD_VAR 0 55
42433: PUSH
42434: LD_VAR 0 56
42438: PUSH
42439: LD_VAR 0 57
42443: PUSH
42444: LD_VAR 0 58
42448: PUSH
42449: EMPTY
42450: LIST
42451: LIST
42452: LIST
42453: LIST
42454: LIST
42455: LIST
42456: PUSH
42457: LD_VAR 0 4
42461: PUSH
42462: LD_INT 1
42464: PLUS
42465: ARRAY
42466: ST_TO_ADDR
42467: GO 42576
42469: LD_INT 31
42471: DOUBLE
42472: EQUAL
42473: IFTRUE 42519
42475: LD_INT 32
42477: DOUBLE
42478: EQUAL
42479: IFTRUE 42519
42481: LD_INT 33
42483: DOUBLE
42484: EQUAL
42485: IFTRUE 42519
42487: LD_INT 27
42489: DOUBLE
42490: EQUAL
42491: IFTRUE 42519
42493: LD_INT 26
42495: DOUBLE
42496: EQUAL
42497: IFTRUE 42519
42499: LD_INT 28
42501: DOUBLE
42502: EQUAL
42503: IFTRUE 42519
42505: LD_INT 29
42507: DOUBLE
42508: EQUAL
42509: IFTRUE 42519
42511: LD_INT 30
42513: DOUBLE
42514: EQUAL
42515: IFTRUE 42519
42517: GO 42575
42519: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
42520: LD_ADDR_VAR 0 9
42524: PUSH
42525: LD_VAR 0 59
42529: PUSH
42530: LD_VAR 0 60
42534: PUSH
42535: LD_VAR 0 61
42539: PUSH
42540: LD_VAR 0 62
42544: PUSH
42545: LD_VAR 0 63
42549: PUSH
42550: LD_VAR 0 64
42554: PUSH
42555: EMPTY
42556: LIST
42557: LIST
42558: LIST
42559: LIST
42560: LIST
42561: LIST
42562: PUSH
42563: LD_VAR 0 4
42567: PUSH
42568: LD_INT 1
42570: PLUS
42571: ARRAY
42572: ST_TO_ADDR
42573: GO 42576
42575: POP
// temp_list2 = [ ] ;
42576: LD_ADDR_VAR 0 10
42580: PUSH
42581: EMPTY
42582: ST_TO_ADDR
// for i in temp_list do
42583: LD_ADDR_VAR 0 8
42587: PUSH
42588: LD_VAR 0 9
42592: PUSH
42593: FOR_IN
42594: IFFALSE 42646
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
42596: LD_ADDR_VAR 0 10
42600: PUSH
42601: LD_VAR 0 10
42605: PUSH
42606: LD_VAR 0 8
42610: PUSH
42611: LD_INT 1
42613: ARRAY
42614: PUSH
42615: LD_VAR 0 2
42619: PLUS
42620: PUSH
42621: LD_VAR 0 8
42625: PUSH
42626: LD_INT 2
42628: ARRAY
42629: PUSH
42630: LD_VAR 0 3
42634: PLUS
42635: PUSH
42636: EMPTY
42637: LIST
42638: LIST
42639: PUSH
42640: EMPTY
42641: LIST
42642: ADD
42643: ST_TO_ADDR
42644: GO 42593
42646: POP
42647: POP
// result = temp_list2 ;
42648: LD_ADDR_VAR 0 7
42652: PUSH
42653: LD_VAR 0 10
42657: ST_TO_ADDR
// end ;
42658: LD_VAR 0 7
42662: RET
// export function EnemyInRange ( unit , dist ) ; begin
42663: LD_INT 0
42665: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
42666: LD_ADDR_VAR 0 3
42670: PUSH
42671: LD_VAR 0 1
42675: PPUSH
42676: CALL_OW 255
42680: PPUSH
42681: LD_VAR 0 1
42685: PPUSH
42686: CALL_OW 250
42690: PPUSH
42691: LD_VAR 0 1
42695: PPUSH
42696: CALL_OW 251
42700: PPUSH
42701: LD_VAR 0 2
42705: PPUSH
42706: CALL 16036 0 4
42710: PUSH
42711: LD_INT 4
42713: ARRAY
42714: ST_TO_ADDR
// end ;
42715: LD_VAR 0 3
42719: RET
// export function PlayerSeeMe ( unit ) ; begin
42720: LD_INT 0
42722: PPUSH
// result := See ( your_side , unit ) ;
42723: LD_ADDR_VAR 0 2
42727: PUSH
42728: LD_OWVAR 2
42732: PPUSH
42733: LD_VAR 0 1
42737: PPUSH
42738: CALL_OW 292
42742: ST_TO_ADDR
// end ;
42743: LD_VAR 0 2
42747: RET
// export function ReverseDir ( unit ) ; begin
42748: LD_INT 0
42750: PPUSH
// if not unit then
42751: LD_VAR 0 1
42755: NOT
42756: IFFALSE 42760
// exit ;
42758: GO 42783
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
42760: LD_ADDR_VAR 0 2
42764: PUSH
42765: LD_VAR 0 1
42769: PPUSH
42770: CALL_OW 254
42774: PUSH
42775: LD_INT 3
42777: PLUS
42778: PUSH
42779: LD_INT 6
42781: MOD
42782: ST_TO_ADDR
// end ;
42783: LD_VAR 0 2
42787: RET
// export function ReverseArray ( array ) ; var i ; begin
42788: LD_INT 0
42790: PPUSH
42791: PPUSH
// if not array then
42792: LD_VAR 0 1
42796: NOT
42797: IFFALSE 42801
// exit ;
42799: GO 42856
// result := [ ] ;
42801: LD_ADDR_VAR 0 2
42805: PUSH
42806: EMPTY
42807: ST_TO_ADDR
// for i := array downto 1 do
42808: LD_ADDR_VAR 0 3
42812: PUSH
42813: DOUBLE
42814: LD_VAR 0 1
42818: INC
42819: ST_TO_ADDR
42820: LD_INT 1
42822: PUSH
42823: FOR_DOWNTO
42824: IFFALSE 42854
// result := Join ( result , array [ i ] ) ;
42826: LD_ADDR_VAR 0 2
42830: PUSH
42831: LD_VAR 0 2
42835: PPUSH
42836: LD_VAR 0 1
42840: PUSH
42841: LD_VAR 0 3
42845: ARRAY
42846: PPUSH
42847: CALL 47521 0 2
42851: ST_TO_ADDR
42852: GO 42823
42854: POP
42855: POP
// end ;
42856: LD_VAR 0 2
42860: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
42861: LD_INT 0
42863: PPUSH
42864: PPUSH
42865: PPUSH
42866: PPUSH
42867: PPUSH
42868: PPUSH
// if not unit or not hexes then
42869: LD_VAR 0 1
42873: NOT
42874: PUSH
42875: LD_VAR 0 2
42879: NOT
42880: OR
42881: IFFALSE 42885
// exit ;
42883: GO 43008
// dist := 9999 ;
42885: LD_ADDR_VAR 0 5
42889: PUSH
42890: LD_INT 9999
42892: ST_TO_ADDR
// for i = 1 to hexes do
42893: LD_ADDR_VAR 0 4
42897: PUSH
42898: DOUBLE
42899: LD_INT 1
42901: DEC
42902: ST_TO_ADDR
42903: LD_VAR 0 2
42907: PUSH
42908: FOR_TO
42909: IFFALSE 42996
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
42911: LD_ADDR_VAR 0 6
42915: PUSH
42916: LD_VAR 0 1
42920: PPUSH
42921: LD_VAR 0 2
42925: PUSH
42926: LD_VAR 0 4
42930: ARRAY
42931: PUSH
42932: LD_INT 1
42934: ARRAY
42935: PPUSH
42936: LD_VAR 0 2
42940: PUSH
42941: LD_VAR 0 4
42945: ARRAY
42946: PUSH
42947: LD_INT 2
42949: ARRAY
42950: PPUSH
42951: CALL_OW 297
42955: ST_TO_ADDR
// if tdist < dist then
42956: LD_VAR 0 6
42960: PUSH
42961: LD_VAR 0 5
42965: LESS
42966: IFFALSE 42994
// begin hex := hexes [ i ] ;
42968: LD_ADDR_VAR 0 8
42972: PUSH
42973: LD_VAR 0 2
42977: PUSH
42978: LD_VAR 0 4
42982: ARRAY
42983: ST_TO_ADDR
// dist := tdist ;
42984: LD_ADDR_VAR 0 5
42988: PUSH
42989: LD_VAR 0 6
42993: ST_TO_ADDR
// end ; end ;
42994: GO 42908
42996: POP
42997: POP
// result := hex ;
42998: LD_ADDR_VAR 0 3
43002: PUSH
43003: LD_VAR 0 8
43007: ST_TO_ADDR
// end ;
43008: LD_VAR 0 3
43012: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
43013: LD_INT 0
43015: PPUSH
43016: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
43017: LD_VAR 0 1
43021: NOT
43022: PUSH
43023: LD_VAR 0 1
43027: PUSH
43028: LD_INT 21
43030: PUSH
43031: LD_INT 2
43033: PUSH
43034: EMPTY
43035: LIST
43036: LIST
43037: PUSH
43038: LD_INT 23
43040: PUSH
43041: LD_INT 2
43043: PUSH
43044: EMPTY
43045: LIST
43046: LIST
43047: PUSH
43048: EMPTY
43049: LIST
43050: LIST
43051: PPUSH
43052: CALL_OW 69
43056: IN
43057: NOT
43058: OR
43059: IFFALSE 43063
// exit ;
43061: GO 43110
// for i = 1 to 3 do
43063: LD_ADDR_VAR 0 3
43067: PUSH
43068: DOUBLE
43069: LD_INT 1
43071: DEC
43072: ST_TO_ADDR
43073: LD_INT 3
43075: PUSH
43076: FOR_TO
43077: IFFALSE 43108
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
43079: LD_VAR 0 1
43083: PPUSH
43084: CALL_OW 250
43088: PPUSH
43089: LD_VAR 0 1
43093: PPUSH
43094: CALL_OW 251
43098: PPUSH
43099: LD_INT 1
43101: PPUSH
43102: CALL_OW 453
43106: GO 43076
43108: POP
43109: POP
// end ;
43110: LD_VAR 0 2
43114: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
43115: LD_INT 0
43117: PPUSH
43118: PPUSH
43119: PPUSH
43120: PPUSH
43121: PPUSH
43122: PPUSH
// if not unit or not enemy_unit then
43123: LD_VAR 0 1
43127: NOT
43128: PUSH
43129: LD_VAR 0 2
43133: NOT
43134: OR
43135: IFFALSE 43139
// exit ;
43137: GO 43606
// if GetLives ( i ) < 250 then
43139: LD_VAR 0 4
43143: PPUSH
43144: CALL_OW 256
43148: PUSH
43149: LD_INT 250
43151: LESS
43152: IFFALSE 43165
// begin ComAutodestruct ( i ) ;
43154: LD_VAR 0 4
43158: PPUSH
43159: CALL 43013 0 1
// exit ;
43163: GO 43606
// end ; x := GetX ( enemy_unit ) ;
43165: LD_ADDR_VAR 0 7
43169: PUSH
43170: LD_VAR 0 2
43174: PPUSH
43175: CALL_OW 250
43179: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
43180: LD_ADDR_VAR 0 8
43184: PUSH
43185: LD_VAR 0 2
43189: PPUSH
43190: CALL_OW 251
43194: ST_TO_ADDR
// if not x or not y then
43195: LD_VAR 0 7
43199: NOT
43200: PUSH
43201: LD_VAR 0 8
43205: NOT
43206: OR
43207: IFFALSE 43211
// exit ;
43209: GO 43606
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
43211: LD_ADDR_VAR 0 6
43215: PUSH
43216: LD_VAR 0 7
43220: PPUSH
43221: LD_INT 0
43223: PPUSH
43224: LD_INT 4
43226: PPUSH
43227: CALL_OW 272
43231: PUSH
43232: LD_VAR 0 8
43236: PPUSH
43237: LD_INT 0
43239: PPUSH
43240: LD_INT 4
43242: PPUSH
43243: CALL_OW 273
43247: PUSH
43248: EMPTY
43249: LIST
43250: LIST
43251: PUSH
43252: LD_VAR 0 7
43256: PPUSH
43257: LD_INT 1
43259: PPUSH
43260: LD_INT 4
43262: PPUSH
43263: CALL_OW 272
43267: PUSH
43268: LD_VAR 0 8
43272: PPUSH
43273: LD_INT 1
43275: PPUSH
43276: LD_INT 4
43278: PPUSH
43279: CALL_OW 273
43283: PUSH
43284: EMPTY
43285: LIST
43286: LIST
43287: PUSH
43288: LD_VAR 0 7
43292: PPUSH
43293: LD_INT 2
43295: PPUSH
43296: LD_INT 4
43298: PPUSH
43299: CALL_OW 272
43303: PUSH
43304: LD_VAR 0 8
43308: PPUSH
43309: LD_INT 2
43311: PPUSH
43312: LD_INT 4
43314: PPUSH
43315: CALL_OW 273
43319: PUSH
43320: EMPTY
43321: LIST
43322: LIST
43323: PUSH
43324: LD_VAR 0 7
43328: PPUSH
43329: LD_INT 3
43331: PPUSH
43332: LD_INT 4
43334: PPUSH
43335: CALL_OW 272
43339: PUSH
43340: LD_VAR 0 8
43344: PPUSH
43345: LD_INT 3
43347: PPUSH
43348: LD_INT 4
43350: PPUSH
43351: CALL_OW 273
43355: PUSH
43356: EMPTY
43357: LIST
43358: LIST
43359: PUSH
43360: LD_VAR 0 7
43364: PPUSH
43365: LD_INT 4
43367: PPUSH
43368: LD_INT 4
43370: PPUSH
43371: CALL_OW 272
43375: PUSH
43376: LD_VAR 0 8
43380: PPUSH
43381: LD_INT 4
43383: PPUSH
43384: LD_INT 4
43386: PPUSH
43387: CALL_OW 273
43391: PUSH
43392: EMPTY
43393: LIST
43394: LIST
43395: PUSH
43396: LD_VAR 0 7
43400: PPUSH
43401: LD_INT 5
43403: PPUSH
43404: LD_INT 4
43406: PPUSH
43407: CALL_OW 272
43411: PUSH
43412: LD_VAR 0 8
43416: PPUSH
43417: LD_INT 5
43419: PPUSH
43420: LD_INT 4
43422: PPUSH
43423: CALL_OW 273
43427: PUSH
43428: EMPTY
43429: LIST
43430: LIST
43431: PUSH
43432: EMPTY
43433: LIST
43434: LIST
43435: LIST
43436: LIST
43437: LIST
43438: LIST
43439: ST_TO_ADDR
// for i = tmp downto 1 do
43440: LD_ADDR_VAR 0 4
43444: PUSH
43445: DOUBLE
43446: LD_VAR 0 6
43450: INC
43451: ST_TO_ADDR
43452: LD_INT 1
43454: PUSH
43455: FOR_DOWNTO
43456: IFFALSE 43557
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
43458: LD_VAR 0 6
43462: PUSH
43463: LD_VAR 0 4
43467: ARRAY
43468: PUSH
43469: LD_INT 1
43471: ARRAY
43472: PPUSH
43473: LD_VAR 0 6
43477: PUSH
43478: LD_VAR 0 4
43482: ARRAY
43483: PUSH
43484: LD_INT 2
43486: ARRAY
43487: PPUSH
43488: CALL_OW 488
43492: NOT
43493: PUSH
43494: LD_VAR 0 6
43498: PUSH
43499: LD_VAR 0 4
43503: ARRAY
43504: PUSH
43505: LD_INT 1
43507: ARRAY
43508: PPUSH
43509: LD_VAR 0 6
43513: PUSH
43514: LD_VAR 0 4
43518: ARRAY
43519: PUSH
43520: LD_INT 2
43522: ARRAY
43523: PPUSH
43524: CALL_OW 428
43528: PUSH
43529: LD_INT 0
43531: NONEQUAL
43532: OR
43533: IFFALSE 43555
// tmp := Delete ( tmp , i ) ;
43535: LD_ADDR_VAR 0 6
43539: PUSH
43540: LD_VAR 0 6
43544: PPUSH
43545: LD_VAR 0 4
43549: PPUSH
43550: CALL_OW 3
43554: ST_TO_ADDR
43555: GO 43455
43557: POP
43558: POP
// j := GetClosestHex ( unit , tmp ) ;
43559: LD_ADDR_VAR 0 5
43563: PUSH
43564: LD_VAR 0 1
43568: PPUSH
43569: LD_VAR 0 6
43573: PPUSH
43574: CALL 42861 0 2
43578: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
43579: LD_VAR 0 1
43583: PPUSH
43584: LD_VAR 0 5
43588: PUSH
43589: LD_INT 1
43591: ARRAY
43592: PPUSH
43593: LD_VAR 0 5
43597: PUSH
43598: LD_INT 2
43600: ARRAY
43601: PPUSH
43602: CALL_OW 111
// end ;
43606: LD_VAR 0 3
43610: RET
// export function PrepareApemanSoldier ( ) ; begin
43611: LD_INT 0
43613: PPUSH
// uc_nation := 0 ;
43614: LD_ADDR_OWVAR 21
43618: PUSH
43619: LD_INT 0
43621: ST_TO_ADDR
// hc_sex := sex_male ;
43622: LD_ADDR_OWVAR 27
43626: PUSH
43627: LD_INT 1
43629: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
43630: LD_ADDR_OWVAR 28
43634: PUSH
43635: LD_INT 15
43637: ST_TO_ADDR
// hc_gallery :=  ;
43638: LD_ADDR_OWVAR 33
43642: PUSH
43643: LD_STRING 
43645: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
43646: LD_ADDR_OWVAR 31
43650: PUSH
43651: LD_INT 0
43653: PPUSH
43654: LD_INT 3
43656: PPUSH
43657: CALL_OW 12
43661: PUSH
43662: LD_INT 0
43664: PPUSH
43665: LD_INT 3
43667: PPUSH
43668: CALL_OW 12
43672: PUSH
43673: LD_INT 0
43675: PUSH
43676: LD_INT 0
43678: PUSH
43679: EMPTY
43680: LIST
43681: LIST
43682: LIST
43683: LIST
43684: ST_TO_ADDR
// end ;
43685: LD_VAR 0 1
43689: RET
// export function PrepareApemanEngineer ( ) ; begin
43690: LD_INT 0
43692: PPUSH
// uc_nation := 0 ;
43693: LD_ADDR_OWVAR 21
43697: PUSH
43698: LD_INT 0
43700: ST_TO_ADDR
// hc_sex := sex_male ;
43701: LD_ADDR_OWVAR 27
43705: PUSH
43706: LD_INT 1
43708: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
43709: LD_ADDR_OWVAR 28
43713: PUSH
43714: LD_INT 16
43716: ST_TO_ADDR
// hc_gallery :=  ;
43717: LD_ADDR_OWVAR 33
43721: PUSH
43722: LD_STRING 
43724: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
43725: LD_ADDR_OWVAR 31
43729: PUSH
43730: LD_INT 0
43732: PPUSH
43733: LD_INT 3
43735: PPUSH
43736: CALL_OW 12
43740: PUSH
43741: LD_INT 0
43743: PPUSH
43744: LD_INT 3
43746: PPUSH
43747: CALL_OW 12
43751: PUSH
43752: LD_INT 0
43754: PUSH
43755: LD_INT 0
43757: PUSH
43758: EMPTY
43759: LIST
43760: LIST
43761: LIST
43762: LIST
43763: ST_TO_ADDR
// end ;
43764: LD_VAR 0 1
43768: RET
// export function PrepareApeman ( agressivity ) ; begin
43769: LD_INT 0
43771: PPUSH
// uc_side := 0 ;
43772: LD_ADDR_OWVAR 20
43776: PUSH
43777: LD_INT 0
43779: ST_TO_ADDR
// uc_nation := 0 ;
43780: LD_ADDR_OWVAR 21
43784: PUSH
43785: LD_INT 0
43787: ST_TO_ADDR
// hc_sex := sex_male ;
43788: LD_ADDR_OWVAR 27
43792: PUSH
43793: LD_INT 1
43795: ST_TO_ADDR
// hc_class := class_apeman ;
43796: LD_ADDR_OWVAR 28
43800: PUSH
43801: LD_INT 12
43803: ST_TO_ADDR
// hc_gallery :=  ;
43804: LD_ADDR_OWVAR 33
43808: PUSH
43809: LD_STRING 
43811: ST_TO_ADDR
// if agressivity = 0 then
43812: LD_VAR 0 1
43816: PUSH
43817: LD_INT 0
43819: EQUAL
43820: IFFALSE 43832
// hc_agressivity := 0 else
43822: LD_ADDR_OWVAR 35
43826: PUSH
43827: LD_INT 0
43829: ST_TO_ADDR
43830: GO 43853
// hc_agressivity := rand ( - agressivity , agressivity ) ;
43832: LD_ADDR_OWVAR 35
43836: PUSH
43837: LD_VAR 0 1
43841: NEG
43842: PPUSH
43843: LD_VAR 0 1
43847: PPUSH
43848: CALL_OW 12
43852: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
43853: LD_ADDR_OWVAR 31
43857: PUSH
43858: LD_INT 0
43860: PPUSH
43861: LD_INT 3
43863: PPUSH
43864: CALL_OW 12
43868: PUSH
43869: LD_INT 0
43871: PPUSH
43872: LD_INT 3
43874: PPUSH
43875: CALL_OW 12
43879: PUSH
43880: LD_INT 0
43882: PUSH
43883: LD_INT 0
43885: PUSH
43886: EMPTY
43887: LIST
43888: LIST
43889: LIST
43890: LIST
43891: ST_TO_ADDR
// end ;
43892: LD_VAR 0 2
43896: RET
// export function PrepareTiger ( agressivity ) ; begin
43897: LD_INT 0
43899: PPUSH
// uc_side := 0 ;
43900: LD_ADDR_OWVAR 20
43904: PUSH
43905: LD_INT 0
43907: ST_TO_ADDR
// uc_nation := 0 ;
43908: LD_ADDR_OWVAR 21
43912: PUSH
43913: LD_INT 0
43915: ST_TO_ADDR
// hc_class := class_tiger ;
43916: LD_ADDR_OWVAR 28
43920: PUSH
43921: LD_INT 14
43923: ST_TO_ADDR
// hc_gallery :=  ;
43924: LD_ADDR_OWVAR 33
43928: PUSH
43929: LD_STRING 
43931: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
43932: LD_ADDR_OWVAR 35
43936: PUSH
43937: LD_VAR 0 1
43941: NEG
43942: PPUSH
43943: LD_VAR 0 1
43947: PPUSH
43948: CALL_OW 12
43952: ST_TO_ADDR
// end ;
43953: LD_VAR 0 2
43957: RET
// export function PrepareEnchidna ( ) ; begin
43958: LD_INT 0
43960: PPUSH
// uc_side := 0 ;
43961: LD_ADDR_OWVAR 20
43965: PUSH
43966: LD_INT 0
43968: ST_TO_ADDR
// uc_nation := 0 ;
43969: LD_ADDR_OWVAR 21
43973: PUSH
43974: LD_INT 0
43976: ST_TO_ADDR
// hc_class := class_baggie ;
43977: LD_ADDR_OWVAR 28
43981: PUSH
43982: LD_INT 13
43984: ST_TO_ADDR
// hc_gallery :=  ;
43985: LD_ADDR_OWVAR 33
43989: PUSH
43990: LD_STRING 
43992: ST_TO_ADDR
// end ;
43993: LD_VAR 0 1
43997: RET
// export function PrepareFrog ( ) ; begin
43998: LD_INT 0
44000: PPUSH
// uc_side := 0 ;
44001: LD_ADDR_OWVAR 20
44005: PUSH
44006: LD_INT 0
44008: ST_TO_ADDR
// uc_nation := 0 ;
44009: LD_ADDR_OWVAR 21
44013: PUSH
44014: LD_INT 0
44016: ST_TO_ADDR
// hc_class := class_frog ;
44017: LD_ADDR_OWVAR 28
44021: PUSH
44022: LD_INT 19
44024: ST_TO_ADDR
// hc_gallery :=  ;
44025: LD_ADDR_OWVAR 33
44029: PUSH
44030: LD_STRING 
44032: ST_TO_ADDR
// end ;
44033: LD_VAR 0 1
44037: RET
// export function PrepareFish ( ) ; begin
44038: LD_INT 0
44040: PPUSH
// uc_side := 0 ;
44041: LD_ADDR_OWVAR 20
44045: PUSH
44046: LD_INT 0
44048: ST_TO_ADDR
// uc_nation := 0 ;
44049: LD_ADDR_OWVAR 21
44053: PUSH
44054: LD_INT 0
44056: ST_TO_ADDR
// hc_class := class_fish ;
44057: LD_ADDR_OWVAR 28
44061: PUSH
44062: LD_INT 20
44064: ST_TO_ADDR
// hc_gallery :=  ;
44065: LD_ADDR_OWVAR 33
44069: PUSH
44070: LD_STRING 
44072: ST_TO_ADDR
// end ;
44073: LD_VAR 0 1
44077: RET
// export function PrepareBird ( ) ; begin
44078: LD_INT 0
44080: PPUSH
// uc_side := 0 ;
44081: LD_ADDR_OWVAR 20
44085: PUSH
44086: LD_INT 0
44088: ST_TO_ADDR
// uc_nation := 0 ;
44089: LD_ADDR_OWVAR 21
44093: PUSH
44094: LD_INT 0
44096: ST_TO_ADDR
// hc_class := class_phororhacos ;
44097: LD_ADDR_OWVAR 28
44101: PUSH
44102: LD_INT 18
44104: ST_TO_ADDR
// hc_gallery :=  ;
44105: LD_ADDR_OWVAR 33
44109: PUSH
44110: LD_STRING 
44112: ST_TO_ADDR
// end ;
44113: LD_VAR 0 1
44117: RET
// export function PrepareHorse ( ) ; begin
44118: LD_INT 0
44120: PPUSH
// uc_side := 0 ;
44121: LD_ADDR_OWVAR 20
44125: PUSH
44126: LD_INT 0
44128: ST_TO_ADDR
// uc_nation := 0 ;
44129: LD_ADDR_OWVAR 21
44133: PUSH
44134: LD_INT 0
44136: ST_TO_ADDR
// hc_class := class_horse ;
44137: LD_ADDR_OWVAR 28
44141: PUSH
44142: LD_INT 21
44144: ST_TO_ADDR
// hc_gallery :=  ;
44145: LD_ADDR_OWVAR 33
44149: PUSH
44150: LD_STRING 
44152: ST_TO_ADDR
// end ;
44153: LD_VAR 0 1
44157: RET
// export function PrepareMastodont ( ) ; begin
44158: LD_INT 0
44160: PPUSH
// uc_side := 0 ;
44161: LD_ADDR_OWVAR 20
44165: PUSH
44166: LD_INT 0
44168: ST_TO_ADDR
// uc_nation := 0 ;
44169: LD_ADDR_OWVAR 21
44173: PUSH
44174: LD_INT 0
44176: ST_TO_ADDR
// vc_chassis := class_mastodont ;
44177: LD_ADDR_OWVAR 37
44181: PUSH
44182: LD_INT 31
44184: ST_TO_ADDR
// vc_control := control_rider ;
44185: LD_ADDR_OWVAR 38
44189: PUSH
44190: LD_INT 4
44192: ST_TO_ADDR
// end ;
44193: LD_VAR 0 1
44197: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
44198: LD_INT 0
44200: PPUSH
44201: PPUSH
44202: PPUSH
// uc_side = 0 ;
44203: LD_ADDR_OWVAR 20
44207: PUSH
44208: LD_INT 0
44210: ST_TO_ADDR
// uc_nation = 0 ;
44211: LD_ADDR_OWVAR 21
44215: PUSH
44216: LD_INT 0
44218: ST_TO_ADDR
// InitHc_All ( ) ;
44219: CALL_OW 584
// InitVc ;
44223: CALL_OW 20
// if mastodonts then
44227: LD_VAR 0 6
44231: IFFALSE 44298
// for i = 1 to mastodonts do
44233: LD_ADDR_VAR 0 11
44237: PUSH
44238: DOUBLE
44239: LD_INT 1
44241: DEC
44242: ST_TO_ADDR
44243: LD_VAR 0 6
44247: PUSH
44248: FOR_TO
44249: IFFALSE 44296
// begin vc_chassis := 31 ;
44251: LD_ADDR_OWVAR 37
44255: PUSH
44256: LD_INT 31
44258: ST_TO_ADDR
// vc_control := control_rider ;
44259: LD_ADDR_OWVAR 38
44263: PUSH
44264: LD_INT 4
44266: ST_TO_ADDR
// animal := CreateVehicle ;
44267: LD_ADDR_VAR 0 12
44271: PUSH
44272: CALL_OW 45
44276: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
44277: LD_VAR 0 12
44281: PPUSH
44282: LD_VAR 0 8
44286: PPUSH
44287: LD_INT 0
44289: PPUSH
44290: CALL 46426 0 3
// end ;
44294: GO 44248
44296: POP
44297: POP
// if horses then
44298: LD_VAR 0 5
44302: IFFALSE 44369
// for i = 1 to horses do
44304: LD_ADDR_VAR 0 11
44308: PUSH
44309: DOUBLE
44310: LD_INT 1
44312: DEC
44313: ST_TO_ADDR
44314: LD_VAR 0 5
44318: PUSH
44319: FOR_TO
44320: IFFALSE 44367
// begin hc_class := 21 ;
44322: LD_ADDR_OWVAR 28
44326: PUSH
44327: LD_INT 21
44329: ST_TO_ADDR
// hc_gallery :=  ;
44330: LD_ADDR_OWVAR 33
44334: PUSH
44335: LD_STRING 
44337: ST_TO_ADDR
// animal := CreateHuman ;
44338: LD_ADDR_VAR 0 12
44342: PUSH
44343: CALL_OW 44
44347: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
44348: LD_VAR 0 12
44352: PPUSH
44353: LD_VAR 0 8
44357: PPUSH
44358: LD_INT 0
44360: PPUSH
44361: CALL 46426 0 3
// end ;
44365: GO 44319
44367: POP
44368: POP
// if birds then
44369: LD_VAR 0 1
44373: IFFALSE 44440
// for i = 1 to birds do
44375: LD_ADDR_VAR 0 11
44379: PUSH
44380: DOUBLE
44381: LD_INT 1
44383: DEC
44384: ST_TO_ADDR
44385: LD_VAR 0 1
44389: PUSH
44390: FOR_TO
44391: IFFALSE 44438
// begin hc_class := 18 ;
44393: LD_ADDR_OWVAR 28
44397: PUSH
44398: LD_INT 18
44400: ST_TO_ADDR
// hc_gallery =  ;
44401: LD_ADDR_OWVAR 33
44405: PUSH
44406: LD_STRING 
44408: ST_TO_ADDR
// animal := CreateHuman ;
44409: LD_ADDR_VAR 0 12
44413: PUSH
44414: CALL_OW 44
44418: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
44419: LD_VAR 0 12
44423: PPUSH
44424: LD_VAR 0 8
44428: PPUSH
44429: LD_INT 0
44431: PPUSH
44432: CALL 46426 0 3
// end ;
44436: GO 44390
44438: POP
44439: POP
// if tigers then
44440: LD_VAR 0 2
44444: IFFALSE 44528
// for i = 1 to tigers do
44446: LD_ADDR_VAR 0 11
44450: PUSH
44451: DOUBLE
44452: LD_INT 1
44454: DEC
44455: ST_TO_ADDR
44456: LD_VAR 0 2
44460: PUSH
44461: FOR_TO
44462: IFFALSE 44526
// begin hc_class = class_tiger ;
44464: LD_ADDR_OWVAR 28
44468: PUSH
44469: LD_INT 14
44471: ST_TO_ADDR
// hc_gallery =  ;
44472: LD_ADDR_OWVAR 33
44476: PUSH
44477: LD_STRING 
44479: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
44480: LD_ADDR_OWVAR 35
44484: PUSH
44485: LD_INT 7
44487: NEG
44488: PPUSH
44489: LD_INT 7
44491: PPUSH
44492: CALL_OW 12
44496: ST_TO_ADDR
// animal := CreateHuman ;
44497: LD_ADDR_VAR 0 12
44501: PUSH
44502: CALL_OW 44
44506: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
44507: LD_VAR 0 12
44511: PPUSH
44512: LD_VAR 0 8
44516: PPUSH
44517: LD_INT 0
44519: PPUSH
44520: CALL 46426 0 3
// end ;
44524: GO 44461
44526: POP
44527: POP
// if apemans then
44528: LD_VAR 0 3
44532: IFFALSE 44655
// for i = 1 to apemans do
44534: LD_ADDR_VAR 0 11
44538: PUSH
44539: DOUBLE
44540: LD_INT 1
44542: DEC
44543: ST_TO_ADDR
44544: LD_VAR 0 3
44548: PUSH
44549: FOR_TO
44550: IFFALSE 44653
// begin hc_class = class_apeman ;
44552: LD_ADDR_OWVAR 28
44556: PUSH
44557: LD_INT 12
44559: ST_TO_ADDR
// hc_gallery =  ;
44560: LD_ADDR_OWVAR 33
44564: PUSH
44565: LD_STRING 
44567: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
44568: LD_ADDR_OWVAR 35
44572: PUSH
44573: LD_INT 2
44575: NEG
44576: PPUSH
44577: LD_INT 2
44579: PPUSH
44580: CALL_OW 12
44584: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
44585: LD_ADDR_OWVAR 31
44589: PUSH
44590: LD_INT 1
44592: PPUSH
44593: LD_INT 3
44595: PPUSH
44596: CALL_OW 12
44600: PUSH
44601: LD_INT 1
44603: PPUSH
44604: LD_INT 3
44606: PPUSH
44607: CALL_OW 12
44611: PUSH
44612: LD_INT 0
44614: PUSH
44615: LD_INT 0
44617: PUSH
44618: EMPTY
44619: LIST
44620: LIST
44621: LIST
44622: LIST
44623: ST_TO_ADDR
// animal := CreateHuman ;
44624: LD_ADDR_VAR 0 12
44628: PUSH
44629: CALL_OW 44
44633: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
44634: LD_VAR 0 12
44638: PPUSH
44639: LD_VAR 0 8
44643: PPUSH
44644: LD_INT 0
44646: PPUSH
44647: CALL 46426 0 3
// end ;
44651: GO 44549
44653: POP
44654: POP
// if enchidnas then
44655: LD_VAR 0 4
44659: IFFALSE 44726
// for i = 1 to enchidnas do
44661: LD_ADDR_VAR 0 11
44665: PUSH
44666: DOUBLE
44667: LD_INT 1
44669: DEC
44670: ST_TO_ADDR
44671: LD_VAR 0 4
44675: PUSH
44676: FOR_TO
44677: IFFALSE 44724
// begin hc_class = 13 ;
44679: LD_ADDR_OWVAR 28
44683: PUSH
44684: LD_INT 13
44686: ST_TO_ADDR
// hc_gallery =  ;
44687: LD_ADDR_OWVAR 33
44691: PUSH
44692: LD_STRING 
44694: ST_TO_ADDR
// animal := CreateHuman ;
44695: LD_ADDR_VAR 0 12
44699: PUSH
44700: CALL_OW 44
44704: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
44705: LD_VAR 0 12
44709: PPUSH
44710: LD_VAR 0 8
44714: PPUSH
44715: LD_INT 0
44717: PPUSH
44718: CALL 46426 0 3
// end ;
44722: GO 44676
44724: POP
44725: POP
// if fishes then
44726: LD_VAR 0 7
44730: IFFALSE 44797
// for i = 1 to fishes do
44732: LD_ADDR_VAR 0 11
44736: PUSH
44737: DOUBLE
44738: LD_INT 1
44740: DEC
44741: ST_TO_ADDR
44742: LD_VAR 0 7
44746: PUSH
44747: FOR_TO
44748: IFFALSE 44795
// begin hc_class = 20 ;
44750: LD_ADDR_OWVAR 28
44754: PUSH
44755: LD_INT 20
44757: ST_TO_ADDR
// hc_gallery =  ;
44758: LD_ADDR_OWVAR 33
44762: PUSH
44763: LD_STRING 
44765: ST_TO_ADDR
// animal := CreateHuman ;
44766: LD_ADDR_VAR 0 12
44770: PUSH
44771: CALL_OW 44
44775: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
44776: LD_VAR 0 12
44780: PPUSH
44781: LD_VAR 0 9
44785: PPUSH
44786: LD_INT 0
44788: PPUSH
44789: CALL 46426 0 3
// end ;
44793: GO 44747
44795: POP
44796: POP
// end ;
44797: LD_VAR 0 10
44801: RET
// export function WantHeal ( sci , unit ) ; begin
44802: LD_INT 0
44804: PPUSH
// if GetTaskList ( sci ) > 0 then
44805: LD_VAR 0 1
44809: PPUSH
44810: CALL_OW 437
44814: PUSH
44815: LD_INT 0
44817: GREATER
44818: IFFALSE 44888
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
44820: LD_VAR 0 1
44824: PPUSH
44825: CALL_OW 437
44829: PUSH
44830: LD_INT 1
44832: ARRAY
44833: PUSH
44834: LD_INT 1
44836: ARRAY
44837: PUSH
44838: LD_STRING l
44840: EQUAL
44841: PUSH
44842: LD_VAR 0 1
44846: PPUSH
44847: CALL_OW 437
44851: PUSH
44852: LD_INT 1
44854: ARRAY
44855: PUSH
44856: LD_INT 4
44858: ARRAY
44859: PUSH
44860: LD_VAR 0 2
44864: EQUAL
44865: AND
44866: IFFALSE 44878
// result := true else
44868: LD_ADDR_VAR 0 3
44872: PUSH
44873: LD_INT 1
44875: ST_TO_ADDR
44876: GO 44886
// result := false ;
44878: LD_ADDR_VAR 0 3
44882: PUSH
44883: LD_INT 0
44885: ST_TO_ADDR
// end else
44886: GO 44896
// result := false ;
44888: LD_ADDR_VAR 0 3
44892: PUSH
44893: LD_INT 0
44895: ST_TO_ADDR
// end ;
44896: LD_VAR 0 3
44900: RET
// export function HealTarget ( sci ) ; begin
44901: LD_INT 0
44903: PPUSH
// if not sci then
44904: LD_VAR 0 1
44908: NOT
44909: IFFALSE 44913
// exit ;
44911: GO 44978
// result := 0 ;
44913: LD_ADDR_VAR 0 2
44917: PUSH
44918: LD_INT 0
44920: ST_TO_ADDR
// if GetTaskList ( sci ) then
44921: LD_VAR 0 1
44925: PPUSH
44926: CALL_OW 437
44930: IFFALSE 44978
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
44932: LD_VAR 0 1
44936: PPUSH
44937: CALL_OW 437
44941: PUSH
44942: LD_INT 1
44944: ARRAY
44945: PUSH
44946: LD_INT 1
44948: ARRAY
44949: PUSH
44950: LD_STRING l
44952: EQUAL
44953: IFFALSE 44978
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
44955: LD_ADDR_VAR 0 2
44959: PUSH
44960: LD_VAR 0 1
44964: PPUSH
44965: CALL_OW 437
44969: PUSH
44970: LD_INT 1
44972: ARRAY
44973: PUSH
44974: LD_INT 4
44976: ARRAY
44977: ST_TO_ADDR
// end ;
44978: LD_VAR 0 2
44982: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
44983: LD_INT 0
44985: PPUSH
44986: PPUSH
44987: PPUSH
44988: PPUSH
// if not base_units then
44989: LD_VAR 0 1
44993: NOT
44994: IFFALSE 44998
// exit ;
44996: GO 45085
// result := false ;
44998: LD_ADDR_VAR 0 2
45002: PUSH
45003: LD_INT 0
45005: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
45006: LD_ADDR_VAR 0 5
45010: PUSH
45011: LD_VAR 0 1
45015: PPUSH
45016: LD_INT 21
45018: PUSH
45019: LD_INT 3
45021: PUSH
45022: EMPTY
45023: LIST
45024: LIST
45025: PPUSH
45026: CALL_OW 72
45030: ST_TO_ADDR
// if not tmp then
45031: LD_VAR 0 5
45035: NOT
45036: IFFALSE 45040
// exit ;
45038: GO 45085
// for i in tmp do
45040: LD_ADDR_VAR 0 3
45044: PUSH
45045: LD_VAR 0 5
45049: PUSH
45050: FOR_IN
45051: IFFALSE 45083
// begin result := EnemyInRange ( i , 22 ) ;
45053: LD_ADDR_VAR 0 2
45057: PUSH
45058: LD_VAR 0 3
45062: PPUSH
45063: LD_INT 22
45065: PPUSH
45066: CALL 42663 0 2
45070: ST_TO_ADDR
// if result then
45071: LD_VAR 0 2
45075: IFFALSE 45081
// exit ;
45077: POP
45078: POP
45079: GO 45085
// end ;
45081: GO 45050
45083: POP
45084: POP
// end ;
45085: LD_VAR 0 2
45089: RET
// export function FilterByTag ( units , tag ) ; begin
45090: LD_INT 0
45092: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
45093: LD_ADDR_VAR 0 3
45097: PUSH
45098: LD_VAR 0 1
45102: PPUSH
45103: LD_INT 120
45105: PUSH
45106: LD_VAR 0 2
45110: PUSH
45111: EMPTY
45112: LIST
45113: LIST
45114: PPUSH
45115: CALL_OW 72
45119: ST_TO_ADDR
// end ;
45120: LD_VAR 0 3
45124: RET
// export function IsDriver ( un ) ; begin
45125: LD_INT 0
45127: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
45128: LD_ADDR_VAR 0 2
45132: PUSH
45133: LD_VAR 0 1
45137: PUSH
45138: LD_INT 55
45140: PUSH
45141: EMPTY
45142: LIST
45143: PPUSH
45144: CALL_OW 69
45148: IN
45149: ST_TO_ADDR
// end ;
45150: LD_VAR 0 2
45154: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
45155: LD_INT 0
45157: PPUSH
45158: PPUSH
// list := [ ] ;
45159: LD_ADDR_VAR 0 5
45163: PUSH
45164: EMPTY
45165: ST_TO_ADDR
// case d of 0 :
45166: LD_VAR 0 3
45170: PUSH
45171: LD_INT 0
45173: DOUBLE
45174: EQUAL
45175: IFTRUE 45179
45177: GO 45312
45179: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
45180: LD_ADDR_VAR 0 5
45184: PUSH
45185: LD_VAR 0 1
45189: PUSH
45190: LD_INT 4
45192: MINUS
45193: PUSH
45194: LD_VAR 0 2
45198: PUSH
45199: LD_INT 4
45201: MINUS
45202: PUSH
45203: LD_INT 2
45205: PUSH
45206: EMPTY
45207: LIST
45208: LIST
45209: LIST
45210: PUSH
45211: LD_VAR 0 1
45215: PUSH
45216: LD_INT 3
45218: MINUS
45219: PUSH
45220: LD_VAR 0 2
45224: PUSH
45225: LD_INT 1
45227: PUSH
45228: EMPTY
45229: LIST
45230: LIST
45231: LIST
45232: PUSH
45233: LD_VAR 0 1
45237: PUSH
45238: LD_INT 4
45240: PLUS
45241: PUSH
45242: LD_VAR 0 2
45246: PUSH
45247: LD_INT 4
45249: PUSH
45250: EMPTY
45251: LIST
45252: LIST
45253: LIST
45254: PUSH
45255: LD_VAR 0 1
45259: PUSH
45260: LD_INT 3
45262: PLUS
45263: PUSH
45264: LD_VAR 0 2
45268: PUSH
45269: LD_INT 3
45271: PLUS
45272: PUSH
45273: LD_INT 5
45275: PUSH
45276: EMPTY
45277: LIST
45278: LIST
45279: LIST
45280: PUSH
45281: LD_VAR 0 1
45285: PUSH
45286: LD_VAR 0 2
45290: PUSH
45291: LD_INT 4
45293: PLUS
45294: PUSH
45295: LD_INT 0
45297: PUSH
45298: EMPTY
45299: LIST
45300: LIST
45301: LIST
45302: PUSH
45303: EMPTY
45304: LIST
45305: LIST
45306: LIST
45307: LIST
45308: LIST
45309: ST_TO_ADDR
// end ; 1 :
45310: GO 46010
45312: LD_INT 1
45314: DOUBLE
45315: EQUAL
45316: IFTRUE 45320
45318: GO 45453
45320: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
45321: LD_ADDR_VAR 0 5
45325: PUSH
45326: LD_VAR 0 1
45330: PUSH
45331: LD_VAR 0 2
45335: PUSH
45336: LD_INT 4
45338: MINUS
45339: PUSH
45340: LD_INT 3
45342: PUSH
45343: EMPTY
45344: LIST
45345: LIST
45346: LIST
45347: PUSH
45348: LD_VAR 0 1
45352: PUSH
45353: LD_INT 3
45355: MINUS
45356: PUSH
45357: LD_VAR 0 2
45361: PUSH
45362: LD_INT 3
45364: MINUS
45365: PUSH
45366: LD_INT 2
45368: PUSH
45369: EMPTY
45370: LIST
45371: LIST
45372: LIST
45373: PUSH
45374: LD_VAR 0 1
45378: PUSH
45379: LD_INT 4
45381: MINUS
45382: PUSH
45383: LD_VAR 0 2
45387: PUSH
45388: LD_INT 1
45390: PUSH
45391: EMPTY
45392: LIST
45393: LIST
45394: LIST
45395: PUSH
45396: LD_VAR 0 1
45400: PUSH
45401: LD_VAR 0 2
45405: PUSH
45406: LD_INT 3
45408: PLUS
45409: PUSH
45410: LD_INT 0
45412: PUSH
45413: EMPTY
45414: LIST
45415: LIST
45416: LIST
45417: PUSH
45418: LD_VAR 0 1
45422: PUSH
45423: LD_INT 4
45425: PLUS
45426: PUSH
45427: LD_VAR 0 2
45431: PUSH
45432: LD_INT 4
45434: PLUS
45435: PUSH
45436: LD_INT 5
45438: PUSH
45439: EMPTY
45440: LIST
45441: LIST
45442: LIST
45443: PUSH
45444: EMPTY
45445: LIST
45446: LIST
45447: LIST
45448: LIST
45449: LIST
45450: ST_TO_ADDR
// end ; 2 :
45451: GO 46010
45453: LD_INT 2
45455: DOUBLE
45456: EQUAL
45457: IFTRUE 45461
45459: GO 45590
45461: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
45462: LD_ADDR_VAR 0 5
45466: PUSH
45467: LD_VAR 0 1
45471: PUSH
45472: LD_VAR 0 2
45476: PUSH
45477: LD_INT 3
45479: MINUS
45480: PUSH
45481: LD_INT 3
45483: PUSH
45484: EMPTY
45485: LIST
45486: LIST
45487: LIST
45488: PUSH
45489: LD_VAR 0 1
45493: PUSH
45494: LD_INT 4
45496: PLUS
45497: PUSH
45498: LD_VAR 0 2
45502: PUSH
45503: LD_INT 4
45505: PUSH
45506: EMPTY
45507: LIST
45508: LIST
45509: LIST
45510: PUSH
45511: LD_VAR 0 1
45515: PUSH
45516: LD_VAR 0 2
45520: PUSH
45521: LD_INT 4
45523: PLUS
45524: PUSH
45525: LD_INT 0
45527: PUSH
45528: EMPTY
45529: LIST
45530: LIST
45531: LIST
45532: PUSH
45533: LD_VAR 0 1
45537: PUSH
45538: LD_INT 3
45540: MINUS
45541: PUSH
45542: LD_VAR 0 2
45546: PUSH
45547: LD_INT 1
45549: PUSH
45550: EMPTY
45551: LIST
45552: LIST
45553: LIST
45554: PUSH
45555: LD_VAR 0 1
45559: PUSH
45560: LD_INT 4
45562: MINUS
45563: PUSH
45564: LD_VAR 0 2
45568: PUSH
45569: LD_INT 4
45571: MINUS
45572: PUSH
45573: LD_INT 2
45575: PUSH
45576: EMPTY
45577: LIST
45578: LIST
45579: LIST
45580: PUSH
45581: EMPTY
45582: LIST
45583: LIST
45584: LIST
45585: LIST
45586: LIST
45587: ST_TO_ADDR
// end ; 3 :
45588: GO 46010
45590: LD_INT 3
45592: DOUBLE
45593: EQUAL
45594: IFTRUE 45598
45596: GO 45731
45598: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
45599: LD_ADDR_VAR 0 5
45603: PUSH
45604: LD_VAR 0 1
45608: PUSH
45609: LD_INT 3
45611: PLUS
45612: PUSH
45613: LD_VAR 0 2
45617: PUSH
45618: LD_INT 4
45620: PUSH
45621: EMPTY
45622: LIST
45623: LIST
45624: LIST
45625: PUSH
45626: LD_VAR 0 1
45630: PUSH
45631: LD_INT 4
45633: PLUS
45634: PUSH
45635: LD_VAR 0 2
45639: PUSH
45640: LD_INT 4
45642: PLUS
45643: PUSH
45644: LD_INT 5
45646: PUSH
45647: EMPTY
45648: LIST
45649: LIST
45650: LIST
45651: PUSH
45652: LD_VAR 0 1
45656: PUSH
45657: LD_INT 4
45659: MINUS
45660: PUSH
45661: LD_VAR 0 2
45665: PUSH
45666: LD_INT 1
45668: PUSH
45669: EMPTY
45670: LIST
45671: LIST
45672: LIST
45673: PUSH
45674: LD_VAR 0 1
45678: PUSH
45679: LD_VAR 0 2
45683: PUSH
45684: LD_INT 4
45686: MINUS
45687: PUSH
45688: LD_INT 3
45690: PUSH
45691: EMPTY
45692: LIST
45693: LIST
45694: LIST
45695: PUSH
45696: LD_VAR 0 1
45700: PUSH
45701: LD_INT 3
45703: MINUS
45704: PUSH
45705: LD_VAR 0 2
45709: PUSH
45710: LD_INT 3
45712: MINUS
45713: PUSH
45714: LD_INT 2
45716: PUSH
45717: EMPTY
45718: LIST
45719: LIST
45720: LIST
45721: PUSH
45722: EMPTY
45723: LIST
45724: LIST
45725: LIST
45726: LIST
45727: LIST
45728: ST_TO_ADDR
// end ; 4 :
45729: GO 46010
45731: LD_INT 4
45733: DOUBLE
45734: EQUAL
45735: IFTRUE 45739
45737: GO 45872
45739: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
45740: LD_ADDR_VAR 0 5
45744: PUSH
45745: LD_VAR 0 1
45749: PUSH
45750: LD_VAR 0 2
45754: PUSH
45755: LD_INT 4
45757: PLUS
45758: PUSH
45759: LD_INT 0
45761: PUSH
45762: EMPTY
45763: LIST
45764: LIST
45765: LIST
45766: PUSH
45767: LD_VAR 0 1
45771: PUSH
45772: LD_INT 3
45774: PLUS
45775: PUSH
45776: LD_VAR 0 2
45780: PUSH
45781: LD_INT 3
45783: PLUS
45784: PUSH
45785: LD_INT 5
45787: PUSH
45788: EMPTY
45789: LIST
45790: LIST
45791: LIST
45792: PUSH
45793: LD_VAR 0 1
45797: PUSH
45798: LD_INT 4
45800: PLUS
45801: PUSH
45802: LD_VAR 0 2
45806: PUSH
45807: LD_INT 4
45809: PUSH
45810: EMPTY
45811: LIST
45812: LIST
45813: LIST
45814: PUSH
45815: LD_VAR 0 1
45819: PUSH
45820: LD_VAR 0 2
45824: PUSH
45825: LD_INT 3
45827: MINUS
45828: PUSH
45829: LD_INT 3
45831: PUSH
45832: EMPTY
45833: LIST
45834: LIST
45835: LIST
45836: PUSH
45837: LD_VAR 0 1
45841: PUSH
45842: LD_INT 4
45844: MINUS
45845: PUSH
45846: LD_VAR 0 2
45850: PUSH
45851: LD_INT 4
45853: MINUS
45854: PUSH
45855: LD_INT 2
45857: PUSH
45858: EMPTY
45859: LIST
45860: LIST
45861: LIST
45862: PUSH
45863: EMPTY
45864: LIST
45865: LIST
45866: LIST
45867: LIST
45868: LIST
45869: ST_TO_ADDR
// end ; 5 :
45870: GO 46010
45872: LD_INT 5
45874: DOUBLE
45875: EQUAL
45876: IFTRUE 45880
45878: GO 46009
45880: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
45881: LD_ADDR_VAR 0 5
45885: PUSH
45886: LD_VAR 0 1
45890: PUSH
45891: LD_INT 4
45893: MINUS
45894: PUSH
45895: LD_VAR 0 2
45899: PUSH
45900: LD_INT 1
45902: PUSH
45903: EMPTY
45904: LIST
45905: LIST
45906: LIST
45907: PUSH
45908: LD_VAR 0 1
45912: PUSH
45913: LD_VAR 0 2
45917: PUSH
45918: LD_INT 4
45920: MINUS
45921: PUSH
45922: LD_INT 3
45924: PUSH
45925: EMPTY
45926: LIST
45927: LIST
45928: LIST
45929: PUSH
45930: LD_VAR 0 1
45934: PUSH
45935: LD_INT 4
45937: PLUS
45938: PUSH
45939: LD_VAR 0 2
45943: PUSH
45944: LD_INT 4
45946: PLUS
45947: PUSH
45948: LD_INT 5
45950: PUSH
45951: EMPTY
45952: LIST
45953: LIST
45954: LIST
45955: PUSH
45956: LD_VAR 0 1
45960: PUSH
45961: LD_INT 3
45963: PLUS
45964: PUSH
45965: LD_VAR 0 2
45969: PUSH
45970: LD_INT 4
45972: PUSH
45973: EMPTY
45974: LIST
45975: LIST
45976: LIST
45977: PUSH
45978: LD_VAR 0 1
45982: PUSH
45983: LD_VAR 0 2
45987: PUSH
45988: LD_INT 3
45990: PLUS
45991: PUSH
45992: LD_INT 0
45994: PUSH
45995: EMPTY
45996: LIST
45997: LIST
45998: LIST
45999: PUSH
46000: EMPTY
46001: LIST
46002: LIST
46003: LIST
46004: LIST
46005: LIST
46006: ST_TO_ADDR
// end ; end ;
46007: GO 46010
46009: POP
// result := list ;
46010: LD_ADDR_VAR 0 4
46014: PUSH
46015: LD_VAR 0 5
46019: ST_TO_ADDR
// end ;
46020: LD_VAR 0 4
46024: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
46025: LD_INT 0
46027: PPUSH
46028: PPUSH
46029: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
46030: LD_VAR 0 1
46034: NOT
46035: PUSH
46036: LD_VAR 0 2
46040: PUSH
46041: LD_INT 1
46043: PUSH
46044: LD_INT 2
46046: PUSH
46047: LD_INT 3
46049: PUSH
46050: LD_INT 4
46052: PUSH
46053: EMPTY
46054: LIST
46055: LIST
46056: LIST
46057: LIST
46058: IN
46059: NOT
46060: OR
46061: IFFALSE 46065
// exit ;
46063: GO 46148
// tmp := [ ] ;
46065: LD_ADDR_VAR 0 5
46069: PUSH
46070: EMPTY
46071: ST_TO_ADDR
// for i in units do
46072: LD_ADDR_VAR 0 4
46076: PUSH
46077: LD_VAR 0 1
46081: PUSH
46082: FOR_IN
46083: IFFALSE 46117
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
46085: LD_ADDR_VAR 0 5
46089: PUSH
46090: LD_VAR 0 5
46094: PPUSH
46095: LD_VAR 0 4
46099: PPUSH
46100: LD_VAR 0 2
46104: PPUSH
46105: CALL_OW 259
46109: PPUSH
46110: CALL 47521 0 2
46114: ST_TO_ADDR
46115: GO 46082
46117: POP
46118: POP
// if not tmp then
46119: LD_VAR 0 5
46123: NOT
46124: IFFALSE 46128
// exit ;
46126: GO 46148
// result := SortListByListDesc ( units , tmp ) ;
46128: LD_ADDR_VAR 0 3
46132: PUSH
46133: LD_VAR 0 1
46137: PPUSH
46138: LD_VAR 0 5
46142: PPUSH
46143: CALL_OW 77
46147: ST_TO_ADDR
// end ;
46148: LD_VAR 0 3
46152: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
46153: LD_INT 0
46155: PPUSH
46156: PPUSH
46157: PPUSH
// result := false ;
46158: LD_ADDR_VAR 0 3
46162: PUSH
46163: LD_INT 0
46165: ST_TO_ADDR
// if not building then
46166: LD_VAR 0 2
46170: NOT
46171: IFFALSE 46175
// exit ;
46173: GO 46313
// x := GetX ( building ) ;
46175: LD_ADDR_VAR 0 4
46179: PUSH
46180: LD_VAR 0 2
46184: PPUSH
46185: CALL_OW 250
46189: ST_TO_ADDR
// y := GetY ( building ) ;
46190: LD_ADDR_VAR 0 5
46194: PUSH
46195: LD_VAR 0 2
46199: PPUSH
46200: CALL_OW 251
46204: ST_TO_ADDR
// if not x or not y then
46205: LD_VAR 0 4
46209: NOT
46210: PUSH
46211: LD_VAR 0 5
46215: NOT
46216: OR
46217: IFFALSE 46221
// exit ;
46219: GO 46313
// if GetTaskList ( unit ) then
46221: LD_VAR 0 1
46225: PPUSH
46226: CALL_OW 437
46230: IFFALSE 46313
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
46232: LD_STRING e
46234: PUSH
46235: LD_VAR 0 1
46239: PPUSH
46240: CALL_OW 437
46244: PUSH
46245: LD_INT 1
46247: ARRAY
46248: PUSH
46249: LD_INT 1
46251: ARRAY
46252: EQUAL
46253: PUSH
46254: LD_VAR 0 4
46258: PUSH
46259: LD_VAR 0 1
46263: PPUSH
46264: CALL_OW 437
46268: PUSH
46269: LD_INT 1
46271: ARRAY
46272: PUSH
46273: LD_INT 2
46275: ARRAY
46276: EQUAL
46277: AND
46278: PUSH
46279: LD_VAR 0 5
46283: PUSH
46284: LD_VAR 0 1
46288: PPUSH
46289: CALL_OW 437
46293: PUSH
46294: LD_INT 1
46296: ARRAY
46297: PUSH
46298: LD_INT 3
46300: ARRAY
46301: EQUAL
46302: AND
46303: IFFALSE 46313
// result := true end ;
46305: LD_ADDR_VAR 0 3
46309: PUSH
46310: LD_INT 1
46312: ST_TO_ADDR
// end ;
46313: LD_VAR 0 3
46317: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
46318: LD_INT 0
46320: PPUSH
// result := false ;
46321: LD_ADDR_VAR 0 4
46325: PUSH
46326: LD_INT 0
46328: ST_TO_ADDR
// if GetTaskList ( unit ) then
46329: LD_VAR 0 1
46333: PPUSH
46334: CALL_OW 437
46338: IFFALSE 46421
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
46340: LD_STRING M
46342: PUSH
46343: LD_VAR 0 1
46347: PPUSH
46348: CALL_OW 437
46352: PUSH
46353: LD_INT 1
46355: ARRAY
46356: PUSH
46357: LD_INT 1
46359: ARRAY
46360: EQUAL
46361: PUSH
46362: LD_VAR 0 2
46366: PUSH
46367: LD_VAR 0 1
46371: PPUSH
46372: CALL_OW 437
46376: PUSH
46377: LD_INT 1
46379: ARRAY
46380: PUSH
46381: LD_INT 2
46383: ARRAY
46384: EQUAL
46385: AND
46386: PUSH
46387: LD_VAR 0 3
46391: PUSH
46392: LD_VAR 0 1
46396: PPUSH
46397: CALL_OW 437
46401: PUSH
46402: LD_INT 1
46404: ARRAY
46405: PUSH
46406: LD_INT 3
46408: ARRAY
46409: EQUAL
46410: AND
46411: IFFALSE 46421
// result := true ;
46413: LD_ADDR_VAR 0 4
46417: PUSH
46418: LD_INT 1
46420: ST_TO_ADDR
// end ; end ;
46421: LD_VAR 0 4
46425: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
46426: LD_INT 0
46428: PPUSH
46429: PPUSH
46430: PPUSH
46431: PPUSH
// if not unit or not area then
46432: LD_VAR 0 1
46436: NOT
46437: PUSH
46438: LD_VAR 0 2
46442: NOT
46443: OR
46444: IFFALSE 46448
// exit ;
46446: GO 46624
// tmp := AreaToList ( area , i ) ;
46448: LD_ADDR_VAR 0 6
46452: PUSH
46453: LD_VAR 0 2
46457: PPUSH
46458: LD_VAR 0 5
46462: PPUSH
46463: CALL_OW 517
46467: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
46468: LD_ADDR_VAR 0 5
46472: PUSH
46473: DOUBLE
46474: LD_INT 1
46476: DEC
46477: ST_TO_ADDR
46478: LD_VAR 0 6
46482: PUSH
46483: LD_INT 1
46485: ARRAY
46486: PUSH
46487: FOR_TO
46488: IFFALSE 46622
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
46490: LD_ADDR_VAR 0 7
46494: PUSH
46495: LD_VAR 0 6
46499: PUSH
46500: LD_INT 1
46502: ARRAY
46503: PUSH
46504: LD_VAR 0 5
46508: ARRAY
46509: PUSH
46510: LD_VAR 0 6
46514: PUSH
46515: LD_INT 2
46517: ARRAY
46518: PUSH
46519: LD_VAR 0 5
46523: ARRAY
46524: PUSH
46525: EMPTY
46526: LIST
46527: LIST
46528: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
46529: LD_INT 92
46531: PUSH
46532: LD_VAR 0 7
46536: PUSH
46537: LD_INT 1
46539: ARRAY
46540: PUSH
46541: LD_VAR 0 7
46545: PUSH
46546: LD_INT 2
46548: ARRAY
46549: PUSH
46550: LD_INT 2
46552: PUSH
46553: EMPTY
46554: LIST
46555: LIST
46556: LIST
46557: LIST
46558: PPUSH
46559: CALL_OW 69
46563: PUSH
46564: LD_INT 0
46566: EQUAL
46567: IFFALSE 46620
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
46569: LD_VAR 0 1
46573: PPUSH
46574: LD_VAR 0 7
46578: PUSH
46579: LD_INT 1
46581: ARRAY
46582: PPUSH
46583: LD_VAR 0 7
46587: PUSH
46588: LD_INT 2
46590: ARRAY
46591: PPUSH
46592: LD_VAR 0 3
46596: PPUSH
46597: CALL_OW 48
// result := IsPlaced ( unit ) ;
46601: LD_ADDR_VAR 0 4
46605: PUSH
46606: LD_VAR 0 1
46610: PPUSH
46611: CALL_OW 305
46615: ST_TO_ADDR
// exit ;
46616: POP
46617: POP
46618: GO 46624
// end ; end ;
46620: GO 46487
46622: POP
46623: POP
// end ;
46624: LD_VAR 0 4
46628: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
46629: LD_INT 0
46631: PPUSH
46632: PPUSH
46633: PPUSH
// if not side or side > 8 then
46634: LD_VAR 0 1
46638: NOT
46639: PUSH
46640: LD_VAR 0 1
46644: PUSH
46645: LD_INT 8
46647: GREATER
46648: OR
46649: IFFALSE 46653
// exit ;
46651: GO 46840
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
46653: LD_ADDR_VAR 0 4
46657: PUSH
46658: LD_INT 22
46660: PUSH
46661: LD_VAR 0 1
46665: PUSH
46666: EMPTY
46667: LIST
46668: LIST
46669: PUSH
46670: LD_INT 21
46672: PUSH
46673: LD_INT 3
46675: PUSH
46676: EMPTY
46677: LIST
46678: LIST
46679: PUSH
46680: EMPTY
46681: LIST
46682: LIST
46683: PPUSH
46684: CALL_OW 69
46688: ST_TO_ADDR
// if not tmp then
46689: LD_VAR 0 4
46693: NOT
46694: IFFALSE 46698
// exit ;
46696: GO 46840
// enable_addtolog := true ;
46698: LD_ADDR_OWVAR 81
46702: PUSH
46703: LD_INT 1
46705: ST_TO_ADDR
// AddToLog ( [ ) ;
46706: LD_STRING [
46708: PPUSH
46709: CALL_OW 561
// for i in tmp do
46713: LD_ADDR_VAR 0 3
46717: PUSH
46718: LD_VAR 0 4
46722: PUSH
46723: FOR_IN
46724: IFFALSE 46831
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
46726: LD_STRING [
46728: PUSH
46729: LD_VAR 0 3
46733: PPUSH
46734: CALL_OW 266
46738: STR
46739: PUSH
46740: LD_STRING , 
46742: STR
46743: PUSH
46744: LD_VAR 0 3
46748: PPUSH
46749: CALL_OW 250
46753: STR
46754: PUSH
46755: LD_STRING , 
46757: STR
46758: PUSH
46759: LD_VAR 0 3
46763: PPUSH
46764: CALL_OW 251
46768: STR
46769: PUSH
46770: LD_STRING , 
46772: STR
46773: PUSH
46774: LD_VAR 0 3
46778: PPUSH
46779: CALL_OW 254
46783: STR
46784: PUSH
46785: LD_STRING , 
46787: STR
46788: PUSH
46789: LD_VAR 0 3
46793: PPUSH
46794: LD_INT 1
46796: PPUSH
46797: CALL_OW 268
46801: STR
46802: PUSH
46803: LD_STRING , 
46805: STR
46806: PUSH
46807: LD_VAR 0 3
46811: PPUSH
46812: LD_INT 2
46814: PPUSH
46815: CALL_OW 268
46819: STR
46820: PUSH
46821: LD_STRING ],
46823: STR
46824: PPUSH
46825: CALL_OW 561
// end ;
46829: GO 46723
46831: POP
46832: POP
// AddToLog ( ]; ) ;
46833: LD_STRING ];
46835: PPUSH
46836: CALL_OW 561
// end ;
46840: LD_VAR 0 2
46844: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
46845: LD_INT 0
46847: PPUSH
46848: PPUSH
46849: PPUSH
46850: PPUSH
46851: PPUSH
// if not area or not rate or not max then
46852: LD_VAR 0 1
46856: NOT
46857: PUSH
46858: LD_VAR 0 2
46862: NOT
46863: OR
46864: PUSH
46865: LD_VAR 0 4
46869: NOT
46870: OR
46871: IFFALSE 46875
// exit ;
46873: GO 47064
// while 1 do
46875: LD_INT 1
46877: IFFALSE 47064
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
46879: LD_ADDR_VAR 0 9
46883: PUSH
46884: LD_VAR 0 1
46888: PPUSH
46889: LD_INT 1
46891: PPUSH
46892: CALL_OW 287
46896: PUSH
46897: LD_INT 10
46899: MUL
46900: ST_TO_ADDR
// r := rate / 10 ;
46901: LD_ADDR_VAR 0 7
46905: PUSH
46906: LD_VAR 0 2
46910: PUSH
46911: LD_INT 10
46913: DIVREAL
46914: ST_TO_ADDR
// time := 1 1$00 ;
46915: LD_ADDR_VAR 0 8
46919: PUSH
46920: LD_INT 2100
46922: ST_TO_ADDR
// if amount < min then
46923: LD_VAR 0 9
46927: PUSH
46928: LD_VAR 0 3
46932: LESS
46933: IFFALSE 46951
// r := r * 2 else
46935: LD_ADDR_VAR 0 7
46939: PUSH
46940: LD_VAR 0 7
46944: PUSH
46945: LD_INT 2
46947: MUL
46948: ST_TO_ADDR
46949: GO 46977
// if amount > max then
46951: LD_VAR 0 9
46955: PUSH
46956: LD_VAR 0 4
46960: GREATER
46961: IFFALSE 46977
// r := r / 2 ;
46963: LD_ADDR_VAR 0 7
46967: PUSH
46968: LD_VAR 0 7
46972: PUSH
46973: LD_INT 2
46975: DIVREAL
46976: ST_TO_ADDR
// time := time / r ;
46977: LD_ADDR_VAR 0 8
46981: PUSH
46982: LD_VAR 0 8
46986: PUSH
46987: LD_VAR 0 7
46991: DIVREAL
46992: ST_TO_ADDR
// if time < 0 then
46993: LD_VAR 0 8
46997: PUSH
46998: LD_INT 0
47000: LESS
47001: IFFALSE 47018
// time := time * - 1 ;
47003: LD_ADDR_VAR 0 8
47007: PUSH
47008: LD_VAR 0 8
47012: PUSH
47013: LD_INT 1
47015: NEG
47016: MUL
47017: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
47018: LD_VAR 0 8
47022: PUSH
47023: LD_INT 35
47025: PPUSH
47026: LD_INT 875
47028: PPUSH
47029: CALL_OW 12
47033: PLUS
47034: PPUSH
47035: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
47039: LD_INT 1
47041: PPUSH
47042: LD_INT 5
47044: PPUSH
47045: CALL_OW 12
47049: PPUSH
47050: LD_VAR 0 1
47054: PPUSH
47055: LD_INT 1
47057: PPUSH
47058: CALL_OW 55
// end ;
47062: GO 46875
// end ;
47064: LD_VAR 0 5
47068: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
47069: LD_INT 0
47071: PPUSH
47072: PPUSH
47073: PPUSH
47074: PPUSH
47075: PPUSH
47076: PPUSH
47077: PPUSH
47078: PPUSH
// if not turrets or not factories then
47079: LD_VAR 0 1
47083: NOT
47084: PUSH
47085: LD_VAR 0 2
47089: NOT
47090: OR
47091: IFFALSE 47095
// exit ;
47093: GO 47402
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
47095: LD_ADDR_VAR 0 10
47099: PUSH
47100: LD_INT 5
47102: PUSH
47103: LD_INT 6
47105: PUSH
47106: EMPTY
47107: LIST
47108: LIST
47109: PUSH
47110: LD_INT 2
47112: PUSH
47113: LD_INT 4
47115: PUSH
47116: EMPTY
47117: LIST
47118: LIST
47119: PUSH
47120: LD_INT 3
47122: PUSH
47123: LD_INT 5
47125: PUSH
47126: EMPTY
47127: LIST
47128: LIST
47129: PUSH
47130: EMPTY
47131: LIST
47132: LIST
47133: LIST
47134: PUSH
47135: LD_INT 24
47137: PUSH
47138: LD_INT 25
47140: PUSH
47141: EMPTY
47142: LIST
47143: LIST
47144: PUSH
47145: LD_INT 23
47147: PUSH
47148: LD_INT 27
47150: PUSH
47151: EMPTY
47152: LIST
47153: LIST
47154: PUSH
47155: EMPTY
47156: LIST
47157: LIST
47158: PUSH
47159: LD_INT 42
47161: PUSH
47162: LD_INT 43
47164: PUSH
47165: EMPTY
47166: LIST
47167: LIST
47168: PUSH
47169: LD_INT 44
47171: PUSH
47172: LD_INT 46
47174: PUSH
47175: EMPTY
47176: LIST
47177: LIST
47178: PUSH
47179: LD_INT 45
47181: PUSH
47182: LD_INT 47
47184: PUSH
47185: EMPTY
47186: LIST
47187: LIST
47188: PUSH
47189: EMPTY
47190: LIST
47191: LIST
47192: LIST
47193: PUSH
47194: EMPTY
47195: LIST
47196: LIST
47197: LIST
47198: ST_TO_ADDR
// result := [ ] ;
47199: LD_ADDR_VAR 0 3
47203: PUSH
47204: EMPTY
47205: ST_TO_ADDR
// for i in turrets do
47206: LD_ADDR_VAR 0 4
47210: PUSH
47211: LD_VAR 0 1
47215: PUSH
47216: FOR_IN
47217: IFFALSE 47400
// begin nat := GetNation ( i ) ;
47219: LD_ADDR_VAR 0 7
47223: PUSH
47224: LD_VAR 0 4
47228: PPUSH
47229: CALL_OW 248
47233: ST_TO_ADDR
// weapon := 0 ;
47234: LD_ADDR_VAR 0 8
47238: PUSH
47239: LD_INT 0
47241: ST_TO_ADDR
// if not nat then
47242: LD_VAR 0 7
47246: NOT
47247: IFFALSE 47251
// continue ;
47249: GO 47216
// for j in list [ nat ] do
47251: LD_ADDR_VAR 0 5
47255: PUSH
47256: LD_VAR 0 10
47260: PUSH
47261: LD_VAR 0 7
47265: ARRAY
47266: PUSH
47267: FOR_IN
47268: IFFALSE 47309
// if GetBWeapon ( i ) = j [ 1 ] then
47270: LD_VAR 0 4
47274: PPUSH
47275: CALL_OW 269
47279: PUSH
47280: LD_VAR 0 5
47284: PUSH
47285: LD_INT 1
47287: ARRAY
47288: EQUAL
47289: IFFALSE 47307
// begin weapon := j [ 2 ] ;
47291: LD_ADDR_VAR 0 8
47295: PUSH
47296: LD_VAR 0 5
47300: PUSH
47301: LD_INT 2
47303: ARRAY
47304: ST_TO_ADDR
// break ;
47305: GO 47309
// end ;
47307: GO 47267
47309: POP
47310: POP
// if not weapon then
47311: LD_VAR 0 8
47315: NOT
47316: IFFALSE 47320
// continue ;
47318: GO 47216
// for k in factories do
47320: LD_ADDR_VAR 0 6
47324: PUSH
47325: LD_VAR 0 2
47329: PUSH
47330: FOR_IN
47331: IFFALSE 47396
// begin weapons := AvailableWeaponList ( k ) ;
47333: LD_ADDR_VAR 0 9
47337: PUSH
47338: LD_VAR 0 6
47342: PPUSH
47343: CALL_OW 478
47347: ST_TO_ADDR
// if not weapons then
47348: LD_VAR 0 9
47352: NOT
47353: IFFALSE 47357
// continue ;
47355: GO 47330
// if weapon in weapons then
47357: LD_VAR 0 8
47361: PUSH
47362: LD_VAR 0 9
47366: IN
47367: IFFALSE 47394
// begin result := [ i , weapon ] ;
47369: LD_ADDR_VAR 0 3
47373: PUSH
47374: LD_VAR 0 4
47378: PUSH
47379: LD_VAR 0 8
47383: PUSH
47384: EMPTY
47385: LIST
47386: LIST
47387: ST_TO_ADDR
// exit ;
47388: POP
47389: POP
47390: POP
47391: POP
47392: GO 47402
// end ; end ;
47394: GO 47330
47396: POP
47397: POP
// end ;
47398: GO 47216
47400: POP
47401: POP
// end ;
47402: LD_VAR 0 3
47406: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
47407: LD_INT 0
47409: PPUSH
// if not side or side > 8 then
47410: LD_VAR 0 3
47414: NOT
47415: PUSH
47416: LD_VAR 0 3
47420: PUSH
47421: LD_INT 8
47423: GREATER
47424: OR
47425: IFFALSE 47429
// exit ;
47427: GO 47488
// if not range then
47429: LD_VAR 0 4
47433: NOT
47434: IFFALSE 47445
// range := - 12 ;
47436: LD_ADDR_VAR 0 4
47440: PUSH
47441: LD_INT 12
47443: NEG
47444: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
47445: LD_VAR 0 1
47449: PPUSH
47450: LD_VAR 0 2
47454: PPUSH
47455: LD_VAR 0 3
47459: PPUSH
47460: LD_VAR 0 4
47464: PPUSH
47465: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
47469: LD_VAR 0 1
47473: PPUSH
47474: LD_VAR 0 2
47478: PPUSH
47479: LD_VAR 0 3
47483: PPUSH
47484: CALL_OW 331
// end ;
47488: LD_VAR 0 5
47492: RET
// export function Video ( mode ) ; begin
47493: LD_INT 0
47495: PPUSH
// ingame_video = mode ;
47496: LD_ADDR_OWVAR 52
47500: PUSH
47501: LD_VAR 0 1
47505: ST_TO_ADDR
// interface_hidden = mode ;
47506: LD_ADDR_OWVAR 54
47510: PUSH
47511: LD_VAR 0 1
47515: ST_TO_ADDR
// end ;
47516: LD_VAR 0 2
47520: RET
// export function Join ( array , element ) ; begin
47521: LD_INT 0
47523: PPUSH
// result := Replace ( array , array + 1 , element ) ;
47524: LD_ADDR_VAR 0 3
47528: PUSH
47529: LD_VAR 0 1
47533: PPUSH
47534: LD_VAR 0 1
47538: PUSH
47539: LD_INT 1
47541: PLUS
47542: PPUSH
47543: LD_VAR 0 2
47547: PPUSH
47548: CALL_OW 1
47552: ST_TO_ADDR
// end ;
47553: LD_VAR 0 3
47557: RET
// export function JoinUnion ( array , element ) ; begin
47558: LD_INT 0
47560: PPUSH
// result := array union element ;
47561: LD_ADDR_VAR 0 3
47565: PUSH
47566: LD_VAR 0 1
47570: PUSH
47571: LD_VAR 0 2
47575: UNION
47576: ST_TO_ADDR
// end ;
47577: LD_VAR 0 3
47581: RET
// export function GetBehemoths ( side ) ; begin
47582: LD_INT 0
47584: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
47585: LD_ADDR_VAR 0 2
47589: PUSH
47590: LD_INT 22
47592: PUSH
47593: LD_VAR 0 1
47597: PUSH
47598: EMPTY
47599: LIST
47600: LIST
47601: PUSH
47602: LD_INT 31
47604: PUSH
47605: LD_INT 25
47607: PUSH
47608: EMPTY
47609: LIST
47610: LIST
47611: PUSH
47612: EMPTY
47613: LIST
47614: LIST
47615: PPUSH
47616: CALL_OW 69
47620: ST_TO_ADDR
// end ;
47621: LD_VAR 0 2
47625: RET
// export function Shuffle ( array ) ; var i , index ; begin
47626: LD_INT 0
47628: PPUSH
47629: PPUSH
47630: PPUSH
// result := [ ] ;
47631: LD_ADDR_VAR 0 2
47635: PUSH
47636: EMPTY
47637: ST_TO_ADDR
// if not array then
47638: LD_VAR 0 1
47642: NOT
47643: IFFALSE 47647
// exit ;
47645: GO 47746
// Randomize ;
47647: CALL_OW 10
// for i = array downto 1 do
47651: LD_ADDR_VAR 0 3
47655: PUSH
47656: DOUBLE
47657: LD_VAR 0 1
47661: INC
47662: ST_TO_ADDR
47663: LD_INT 1
47665: PUSH
47666: FOR_DOWNTO
47667: IFFALSE 47744
// begin index := rand ( 1 , array ) ;
47669: LD_ADDR_VAR 0 4
47673: PUSH
47674: LD_INT 1
47676: PPUSH
47677: LD_VAR 0 1
47681: PPUSH
47682: CALL_OW 12
47686: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
47687: LD_ADDR_VAR 0 2
47691: PUSH
47692: LD_VAR 0 2
47696: PPUSH
47697: LD_VAR 0 2
47701: PUSH
47702: LD_INT 1
47704: PLUS
47705: PPUSH
47706: LD_VAR 0 1
47710: PUSH
47711: LD_VAR 0 4
47715: ARRAY
47716: PPUSH
47717: CALL_OW 2
47721: ST_TO_ADDR
// array := Delete ( array , index ) ;
47722: LD_ADDR_VAR 0 1
47726: PUSH
47727: LD_VAR 0 1
47731: PPUSH
47732: LD_VAR 0 4
47736: PPUSH
47737: CALL_OW 3
47741: ST_TO_ADDR
// end ;
47742: GO 47666
47744: POP
47745: POP
// end ;
47746: LD_VAR 0 2
47750: RET
// export function GetBaseMaterials ( base ) ; begin
47751: LD_INT 0
47753: PPUSH
// result := [ 0 , 0 , 0 ] ;
47754: LD_ADDR_VAR 0 2
47758: PUSH
47759: LD_INT 0
47761: PUSH
47762: LD_INT 0
47764: PUSH
47765: LD_INT 0
47767: PUSH
47768: EMPTY
47769: LIST
47770: LIST
47771: LIST
47772: ST_TO_ADDR
// if not base then
47773: LD_VAR 0 1
47777: NOT
47778: IFFALSE 47782
// exit ;
47780: GO 47831
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
47782: LD_ADDR_VAR 0 2
47786: PUSH
47787: LD_VAR 0 1
47791: PPUSH
47792: LD_INT 1
47794: PPUSH
47795: CALL_OW 275
47799: PUSH
47800: LD_VAR 0 1
47804: PPUSH
47805: LD_INT 2
47807: PPUSH
47808: CALL_OW 275
47812: PUSH
47813: LD_VAR 0 1
47817: PPUSH
47818: LD_INT 3
47820: PPUSH
47821: CALL_OW 275
47825: PUSH
47826: EMPTY
47827: LIST
47828: LIST
47829: LIST
47830: ST_TO_ADDR
// end ;
47831: LD_VAR 0 2
47835: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
47836: LD_INT 0
47838: PPUSH
47839: PPUSH
// result := array ;
47840: LD_ADDR_VAR 0 3
47844: PUSH
47845: LD_VAR 0 1
47849: ST_TO_ADDR
// if size >= result then
47850: LD_VAR 0 2
47854: PUSH
47855: LD_VAR 0 3
47859: GREATEREQUAL
47860: IFFALSE 47864
// exit ;
47862: GO 47914
// if size then
47864: LD_VAR 0 2
47868: IFFALSE 47914
// for i := array downto size do
47870: LD_ADDR_VAR 0 4
47874: PUSH
47875: DOUBLE
47876: LD_VAR 0 1
47880: INC
47881: ST_TO_ADDR
47882: LD_VAR 0 2
47886: PUSH
47887: FOR_DOWNTO
47888: IFFALSE 47912
// result := Delete ( result , result ) ;
47890: LD_ADDR_VAR 0 3
47894: PUSH
47895: LD_VAR 0 3
47899: PPUSH
47900: LD_VAR 0 3
47904: PPUSH
47905: CALL_OW 3
47909: ST_TO_ADDR
47910: GO 47887
47912: POP
47913: POP
// end ;
47914: LD_VAR 0 3
47918: RET
// export function ComExit ( unit ) ; var tmp ; begin
47919: LD_INT 0
47921: PPUSH
47922: PPUSH
// if not IsInUnit ( unit ) then
47923: LD_VAR 0 1
47927: PPUSH
47928: CALL_OW 310
47932: NOT
47933: IFFALSE 47937
// exit ;
47935: GO 47997
// tmp := IsInUnit ( unit ) ;
47937: LD_ADDR_VAR 0 3
47941: PUSH
47942: LD_VAR 0 1
47946: PPUSH
47947: CALL_OW 310
47951: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
47952: LD_VAR 0 3
47956: PPUSH
47957: CALL_OW 247
47961: PUSH
47962: LD_INT 2
47964: EQUAL
47965: IFFALSE 47978
// ComExitVehicle ( unit ) else
47967: LD_VAR 0 1
47971: PPUSH
47972: CALL_OW 121
47976: GO 47987
// ComExitBuilding ( unit ) ;
47978: LD_VAR 0 1
47982: PPUSH
47983: CALL_OW 122
// result := tmp ;
47987: LD_ADDR_VAR 0 2
47991: PUSH
47992: LD_VAR 0 3
47996: ST_TO_ADDR
// end ;
47997: LD_VAR 0 2
48001: RET
// export function ComExitAll ( units ) ; var i ; begin
48002: LD_INT 0
48004: PPUSH
48005: PPUSH
// if not units then
48006: LD_VAR 0 1
48010: NOT
48011: IFFALSE 48015
// exit ;
48013: GO 48041
// for i in units do
48015: LD_ADDR_VAR 0 3
48019: PUSH
48020: LD_VAR 0 1
48024: PUSH
48025: FOR_IN
48026: IFFALSE 48039
// ComExit ( i ) ;
48028: LD_VAR 0 3
48032: PPUSH
48033: CALL 47919 0 1
48037: GO 48025
48039: POP
48040: POP
// end ;
48041: LD_VAR 0 2
48045: RET
// export function ResetHc ; begin
48046: LD_INT 0
48048: PPUSH
// InitHc ;
48049: CALL_OW 19
// hc_importance := 0 ;
48053: LD_ADDR_OWVAR 32
48057: PUSH
48058: LD_INT 0
48060: ST_TO_ADDR
// end ;
48061: LD_VAR 0 1
48065: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
48066: LD_INT 0
48068: PPUSH
48069: PPUSH
48070: PPUSH
// _x := ( x1 + x2 ) div 2 ;
48071: LD_ADDR_VAR 0 6
48075: PUSH
48076: LD_VAR 0 1
48080: PUSH
48081: LD_VAR 0 3
48085: PLUS
48086: PUSH
48087: LD_INT 2
48089: DIV
48090: ST_TO_ADDR
// if _x < 0 then
48091: LD_VAR 0 6
48095: PUSH
48096: LD_INT 0
48098: LESS
48099: IFFALSE 48116
// _x := _x * - 1 ;
48101: LD_ADDR_VAR 0 6
48105: PUSH
48106: LD_VAR 0 6
48110: PUSH
48111: LD_INT 1
48113: NEG
48114: MUL
48115: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
48116: LD_ADDR_VAR 0 7
48120: PUSH
48121: LD_VAR 0 2
48125: PUSH
48126: LD_VAR 0 4
48130: PLUS
48131: PUSH
48132: LD_INT 2
48134: DIV
48135: ST_TO_ADDR
// if _y < 0 then
48136: LD_VAR 0 7
48140: PUSH
48141: LD_INT 0
48143: LESS
48144: IFFALSE 48161
// _y := _y * - 1 ;
48146: LD_ADDR_VAR 0 7
48150: PUSH
48151: LD_VAR 0 7
48155: PUSH
48156: LD_INT 1
48158: NEG
48159: MUL
48160: ST_TO_ADDR
// result := [ _x , _y ] ;
48161: LD_ADDR_VAR 0 5
48165: PUSH
48166: LD_VAR 0 6
48170: PUSH
48171: LD_VAR 0 7
48175: PUSH
48176: EMPTY
48177: LIST
48178: LIST
48179: ST_TO_ADDR
// end ;
48180: LD_VAR 0 5
48184: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
48185: LD_INT 0
48187: PPUSH
48188: PPUSH
48189: PPUSH
48190: PPUSH
// task := GetTaskList ( unit ) ;
48191: LD_ADDR_VAR 0 7
48195: PUSH
48196: LD_VAR 0 1
48200: PPUSH
48201: CALL_OW 437
48205: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
48206: LD_VAR 0 7
48210: NOT
48211: PUSH
48212: LD_VAR 0 1
48216: PPUSH
48217: LD_VAR 0 2
48221: PPUSH
48222: CALL_OW 308
48226: NOT
48227: AND
48228: IFFALSE 48232
// exit ;
48230: GO 48350
// if IsInArea ( unit , area ) then
48232: LD_VAR 0 1
48236: PPUSH
48237: LD_VAR 0 2
48241: PPUSH
48242: CALL_OW 308
48246: IFFALSE 48264
// begin ComMoveToArea ( unit , goAway ) ;
48248: LD_VAR 0 1
48252: PPUSH
48253: LD_VAR 0 3
48257: PPUSH
48258: CALL_OW 113
// exit ;
48262: GO 48350
// end ; if task [ 1 ] [ 1 ] <> M then
48264: LD_VAR 0 7
48268: PUSH
48269: LD_INT 1
48271: ARRAY
48272: PUSH
48273: LD_INT 1
48275: ARRAY
48276: PUSH
48277: LD_STRING M
48279: NONEQUAL
48280: IFFALSE 48284
// exit ;
48282: GO 48350
// x := task [ 1 ] [ 2 ] ;
48284: LD_ADDR_VAR 0 5
48288: PUSH
48289: LD_VAR 0 7
48293: PUSH
48294: LD_INT 1
48296: ARRAY
48297: PUSH
48298: LD_INT 2
48300: ARRAY
48301: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
48302: LD_ADDR_VAR 0 6
48306: PUSH
48307: LD_VAR 0 7
48311: PUSH
48312: LD_INT 1
48314: ARRAY
48315: PUSH
48316: LD_INT 3
48318: ARRAY
48319: ST_TO_ADDR
// if InArea ( x , y , area ) then
48320: LD_VAR 0 5
48324: PPUSH
48325: LD_VAR 0 6
48329: PPUSH
48330: LD_VAR 0 2
48334: PPUSH
48335: CALL_OW 309
48339: IFFALSE 48350
// ComStop ( unit ) ;
48341: LD_VAR 0 1
48345: PPUSH
48346: CALL_OW 141
// end ;
48350: LD_VAR 0 4
48354: RET
// export function Abs ( value ) ; begin
48355: LD_INT 0
48357: PPUSH
// result := value ;
48358: LD_ADDR_VAR 0 2
48362: PUSH
48363: LD_VAR 0 1
48367: ST_TO_ADDR
// if value < 0 then
48368: LD_VAR 0 1
48372: PUSH
48373: LD_INT 0
48375: LESS
48376: IFFALSE 48393
// result := value * - 1 ;
48378: LD_ADDR_VAR 0 2
48382: PUSH
48383: LD_VAR 0 1
48387: PUSH
48388: LD_INT 1
48390: NEG
48391: MUL
48392: ST_TO_ADDR
// end ;
48393: LD_VAR 0 2
48397: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
48398: LD_INT 0
48400: PPUSH
48401: PPUSH
48402: PPUSH
48403: PPUSH
48404: PPUSH
48405: PPUSH
48406: PPUSH
48407: PPUSH
// if not unit or not building then
48408: LD_VAR 0 1
48412: NOT
48413: PUSH
48414: LD_VAR 0 2
48418: NOT
48419: OR
48420: IFFALSE 48424
// exit ;
48422: GO 48650
// x := GetX ( building ) ;
48424: LD_ADDR_VAR 0 4
48428: PUSH
48429: LD_VAR 0 2
48433: PPUSH
48434: CALL_OW 250
48438: ST_TO_ADDR
// y := GetY ( building ) ;
48439: LD_ADDR_VAR 0 6
48443: PUSH
48444: LD_VAR 0 2
48448: PPUSH
48449: CALL_OW 251
48453: ST_TO_ADDR
// d := GetDir ( building ) ;
48454: LD_ADDR_VAR 0 8
48458: PUSH
48459: LD_VAR 0 2
48463: PPUSH
48464: CALL_OW 254
48468: ST_TO_ADDR
// r := 4 ;
48469: LD_ADDR_VAR 0 9
48473: PUSH
48474: LD_INT 4
48476: ST_TO_ADDR
// for i := 1 to 5 do
48477: LD_ADDR_VAR 0 10
48481: PUSH
48482: DOUBLE
48483: LD_INT 1
48485: DEC
48486: ST_TO_ADDR
48487: LD_INT 5
48489: PUSH
48490: FOR_TO
48491: IFFALSE 48648
// begin _x := ShiftX ( x , d , r + i ) ;
48493: LD_ADDR_VAR 0 5
48497: PUSH
48498: LD_VAR 0 4
48502: PPUSH
48503: LD_VAR 0 8
48507: PPUSH
48508: LD_VAR 0 9
48512: PUSH
48513: LD_VAR 0 10
48517: PLUS
48518: PPUSH
48519: CALL_OW 272
48523: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
48524: LD_ADDR_VAR 0 7
48528: PUSH
48529: LD_VAR 0 6
48533: PPUSH
48534: LD_VAR 0 8
48538: PPUSH
48539: LD_VAR 0 9
48543: PUSH
48544: LD_VAR 0 10
48548: PLUS
48549: PPUSH
48550: CALL_OW 273
48554: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
48555: LD_VAR 0 5
48559: PPUSH
48560: LD_VAR 0 7
48564: PPUSH
48565: CALL_OW 488
48569: PUSH
48570: LD_VAR 0 5
48574: PPUSH
48575: LD_VAR 0 7
48579: PPUSH
48580: CALL_OW 428
48584: PPUSH
48585: CALL_OW 247
48589: PUSH
48590: LD_INT 3
48592: PUSH
48593: LD_INT 2
48595: PUSH
48596: EMPTY
48597: LIST
48598: LIST
48599: IN
48600: NOT
48601: AND
48602: IFFALSE 48646
// begin ComMoveXY ( unit , _x , _y ) ;
48604: LD_VAR 0 1
48608: PPUSH
48609: LD_VAR 0 5
48613: PPUSH
48614: LD_VAR 0 7
48618: PPUSH
48619: CALL_OW 111
// result := [ _x , _y ] ;
48623: LD_ADDR_VAR 0 3
48627: PUSH
48628: LD_VAR 0 5
48632: PUSH
48633: LD_VAR 0 7
48637: PUSH
48638: EMPTY
48639: LIST
48640: LIST
48641: ST_TO_ADDR
// exit ;
48642: POP
48643: POP
48644: GO 48650
// end ; end ;
48646: GO 48490
48648: POP
48649: POP
// end ;
48650: LD_VAR 0 3
48654: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
48655: LD_INT 0
48657: PPUSH
48658: PPUSH
48659: PPUSH
// result := 0 ;
48660: LD_ADDR_VAR 0 3
48664: PUSH
48665: LD_INT 0
48667: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
48668: LD_VAR 0 1
48672: PUSH
48673: LD_INT 0
48675: LESS
48676: PUSH
48677: LD_VAR 0 1
48681: PUSH
48682: LD_INT 8
48684: GREATER
48685: OR
48686: PUSH
48687: LD_VAR 0 2
48691: PUSH
48692: LD_INT 0
48694: LESS
48695: OR
48696: PUSH
48697: LD_VAR 0 2
48701: PUSH
48702: LD_INT 8
48704: GREATER
48705: OR
48706: IFFALSE 48710
// exit ;
48708: GO 48785
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
48710: LD_ADDR_VAR 0 4
48714: PUSH
48715: LD_INT 22
48717: PUSH
48718: LD_VAR 0 2
48722: PUSH
48723: EMPTY
48724: LIST
48725: LIST
48726: PPUSH
48727: CALL_OW 69
48731: PUSH
48732: FOR_IN
48733: IFFALSE 48783
// begin un := UnitShoot ( i ) ;
48735: LD_ADDR_VAR 0 5
48739: PUSH
48740: LD_VAR 0 4
48744: PPUSH
48745: CALL_OW 504
48749: ST_TO_ADDR
// if GetSide ( un ) = side1 then
48750: LD_VAR 0 5
48754: PPUSH
48755: CALL_OW 255
48759: PUSH
48760: LD_VAR 0 1
48764: EQUAL
48765: IFFALSE 48781
// begin result := un ;
48767: LD_ADDR_VAR 0 3
48771: PUSH
48772: LD_VAR 0 5
48776: ST_TO_ADDR
// exit ;
48777: POP
48778: POP
48779: GO 48785
// end ; end ;
48781: GO 48732
48783: POP
48784: POP
// end ;
48785: LD_VAR 0 3
48789: RET
// export function GetCargoBay ( units ) ; begin
48790: LD_INT 0
48792: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
48793: LD_ADDR_VAR 0 2
48797: PUSH
48798: LD_VAR 0 1
48802: PPUSH
48803: LD_INT 2
48805: PUSH
48806: LD_INT 34
48808: PUSH
48809: LD_INT 12
48811: PUSH
48812: EMPTY
48813: LIST
48814: LIST
48815: PUSH
48816: LD_INT 34
48818: PUSH
48819: LD_INT 51
48821: PUSH
48822: EMPTY
48823: LIST
48824: LIST
48825: PUSH
48826: LD_INT 34
48828: PUSH
48829: LD_INT 32
48831: PUSH
48832: EMPTY
48833: LIST
48834: LIST
48835: PUSH
48836: LD_INT 34
48838: PUSH
48839: LD_INT 89
48841: PUSH
48842: EMPTY
48843: LIST
48844: LIST
48845: PUSH
48846: EMPTY
48847: LIST
48848: LIST
48849: LIST
48850: LIST
48851: LIST
48852: PPUSH
48853: CALL_OW 72
48857: ST_TO_ADDR
// end ;
48858: LD_VAR 0 2
48862: RET
// export function Negate ( value ) ; begin
48863: LD_INT 0
48865: PPUSH
// result := not value ;
48866: LD_ADDR_VAR 0 2
48870: PUSH
48871: LD_VAR 0 1
48875: NOT
48876: ST_TO_ADDR
// end ;
48877: LD_VAR 0 2
48881: RET
// export function Inc ( value ) ; begin
48882: LD_INT 0
48884: PPUSH
// result := value + 1 ;
48885: LD_ADDR_VAR 0 2
48889: PUSH
48890: LD_VAR 0 1
48894: PUSH
48895: LD_INT 1
48897: PLUS
48898: ST_TO_ADDR
// end ;
48899: LD_VAR 0 2
48903: RET
// export function Dec ( value ) ; begin
48904: LD_INT 0
48906: PPUSH
// result := value - 1 ;
48907: LD_ADDR_VAR 0 2
48911: PUSH
48912: LD_VAR 0 1
48916: PUSH
48917: LD_INT 1
48919: MINUS
48920: ST_TO_ADDR
// end ;
48921: LD_VAR 0 2
48925: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
48926: LD_INT 0
48928: PPUSH
48929: PPUSH
48930: PPUSH
48931: PPUSH
48932: PPUSH
48933: PPUSH
48934: PPUSH
48935: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
48936: LD_VAR 0 1
48940: PPUSH
48941: LD_VAR 0 2
48945: PPUSH
48946: CALL_OW 488
48950: NOT
48951: PUSH
48952: LD_VAR 0 3
48956: PPUSH
48957: LD_VAR 0 4
48961: PPUSH
48962: CALL_OW 488
48966: NOT
48967: OR
48968: IFFALSE 48981
// begin result := - 1 ;
48970: LD_ADDR_VAR 0 5
48974: PUSH
48975: LD_INT 1
48977: NEG
48978: ST_TO_ADDR
// exit ;
48979: GO 49216
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
48981: LD_ADDR_VAR 0 12
48985: PUSH
48986: LD_VAR 0 1
48990: PPUSH
48991: LD_VAR 0 2
48995: PPUSH
48996: LD_VAR 0 3
49000: PPUSH
49001: LD_VAR 0 4
49005: PPUSH
49006: CALL 48066 0 4
49010: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
49011: LD_ADDR_VAR 0 11
49015: PUSH
49016: LD_VAR 0 1
49020: PPUSH
49021: LD_VAR 0 2
49025: PPUSH
49026: LD_VAR 0 12
49030: PUSH
49031: LD_INT 1
49033: ARRAY
49034: PPUSH
49035: LD_VAR 0 12
49039: PUSH
49040: LD_INT 2
49042: ARRAY
49043: PPUSH
49044: CALL_OW 298
49048: ST_TO_ADDR
// distance := 9999 ;
49049: LD_ADDR_VAR 0 10
49053: PUSH
49054: LD_INT 9999
49056: ST_TO_ADDR
// for i := 0 to 5 do
49057: LD_ADDR_VAR 0 6
49061: PUSH
49062: DOUBLE
49063: LD_INT 0
49065: DEC
49066: ST_TO_ADDR
49067: LD_INT 5
49069: PUSH
49070: FOR_TO
49071: IFFALSE 49214
// begin _x := ShiftX ( x1 , i , centerDist ) ;
49073: LD_ADDR_VAR 0 7
49077: PUSH
49078: LD_VAR 0 1
49082: PPUSH
49083: LD_VAR 0 6
49087: PPUSH
49088: LD_VAR 0 11
49092: PPUSH
49093: CALL_OW 272
49097: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
49098: LD_ADDR_VAR 0 8
49102: PUSH
49103: LD_VAR 0 2
49107: PPUSH
49108: LD_VAR 0 6
49112: PPUSH
49113: LD_VAR 0 11
49117: PPUSH
49118: CALL_OW 273
49122: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
49123: LD_VAR 0 7
49127: PPUSH
49128: LD_VAR 0 8
49132: PPUSH
49133: CALL_OW 488
49137: NOT
49138: IFFALSE 49142
// continue ;
49140: GO 49070
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
49142: LD_ADDR_VAR 0 9
49146: PUSH
49147: LD_VAR 0 12
49151: PUSH
49152: LD_INT 1
49154: ARRAY
49155: PPUSH
49156: LD_VAR 0 12
49160: PUSH
49161: LD_INT 2
49163: ARRAY
49164: PPUSH
49165: LD_VAR 0 7
49169: PPUSH
49170: LD_VAR 0 8
49174: PPUSH
49175: CALL_OW 298
49179: ST_TO_ADDR
// if tmp < distance then
49180: LD_VAR 0 9
49184: PUSH
49185: LD_VAR 0 10
49189: LESS
49190: IFFALSE 49212
// begin result := i ;
49192: LD_ADDR_VAR 0 5
49196: PUSH
49197: LD_VAR 0 6
49201: ST_TO_ADDR
// distance := tmp ;
49202: LD_ADDR_VAR 0 10
49206: PUSH
49207: LD_VAR 0 9
49211: ST_TO_ADDR
// end ; end ;
49212: GO 49070
49214: POP
49215: POP
// end ;
49216: LD_VAR 0 5
49220: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
49221: LD_INT 0
49223: PPUSH
49224: PPUSH
// if not driver or not IsInUnit ( driver ) then
49225: LD_VAR 0 1
49229: NOT
49230: PUSH
49231: LD_VAR 0 1
49235: PPUSH
49236: CALL_OW 310
49240: NOT
49241: OR
49242: IFFALSE 49246
// exit ;
49244: GO 49336
// vehicle := IsInUnit ( driver ) ;
49246: LD_ADDR_VAR 0 3
49250: PUSH
49251: LD_VAR 0 1
49255: PPUSH
49256: CALL_OW 310
49260: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
49261: LD_VAR 0 1
49265: PPUSH
49266: LD_STRING \
49268: PUSH
49269: LD_INT 0
49271: PUSH
49272: LD_INT 0
49274: PUSH
49275: LD_INT 0
49277: PUSH
49278: LD_INT 0
49280: PUSH
49281: LD_INT 0
49283: PUSH
49284: LD_INT 0
49286: PUSH
49287: EMPTY
49288: LIST
49289: LIST
49290: LIST
49291: LIST
49292: LIST
49293: LIST
49294: LIST
49295: PUSH
49296: LD_STRING E
49298: PUSH
49299: LD_INT 0
49301: PUSH
49302: LD_INT 0
49304: PUSH
49305: LD_VAR 0 3
49309: PUSH
49310: LD_INT 0
49312: PUSH
49313: LD_INT 0
49315: PUSH
49316: LD_INT 0
49318: PUSH
49319: EMPTY
49320: LIST
49321: LIST
49322: LIST
49323: LIST
49324: LIST
49325: LIST
49326: LIST
49327: PUSH
49328: EMPTY
49329: LIST
49330: LIST
49331: PPUSH
49332: CALL_OW 446
// end ;
49336: LD_VAR 0 2
49340: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
49341: LD_INT 0
49343: PPUSH
49344: PPUSH
// if not driver or not IsInUnit ( driver ) then
49345: LD_VAR 0 1
49349: NOT
49350: PUSH
49351: LD_VAR 0 1
49355: PPUSH
49356: CALL_OW 310
49360: NOT
49361: OR
49362: IFFALSE 49366
// exit ;
49364: GO 49456
// vehicle := IsInUnit ( driver ) ;
49366: LD_ADDR_VAR 0 3
49370: PUSH
49371: LD_VAR 0 1
49375: PPUSH
49376: CALL_OW 310
49380: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
49381: LD_VAR 0 1
49385: PPUSH
49386: LD_STRING \
49388: PUSH
49389: LD_INT 0
49391: PUSH
49392: LD_INT 0
49394: PUSH
49395: LD_INT 0
49397: PUSH
49398: LD_INT 0
49400: PUSH
49401: LD_INT 0
49403: PUSH
49404: LD_INT 0
49406: PUSH
49407: EMPTY
49408: LIST
49409: LIST
49410: LIST
49411: LIST
49412: LIST
49413: LIST
49414: LIST
49415: PUSH
49416: LD_STRING E
49418: PUSH
49419: LD_INT 0
49421: PUSH
49422: LD_INT 0
49424: PUSH
49425: LD_VAR 0 3
49429: PUSH
49430: LD_INT 0
49432: PUSH
49433: LD_INT 0
49435: PUSH
49436: LD_INT 0
49438: PUSH
49439: EMPTY
49440: LIST
49441: LIST
49442: LIST
49443: LIST
49444: LIST
49445: LIST
49446: LIST
49447: PUSH
49448: EMPTY
49449: LIST
49450: LIST
49451: PPUSH
49452: CALL_OW 447
// end ;
49456: LD_VAR 0 2
49460: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
49461: LD_INT 0
49463: PPUSH
49464: PPUSH
49465: PPUSH
// tmp := [ ] ;
49466: LD_ADDR_VAR 0 5
49470: PUSH
49471: EMPTY
49472: ST_TO_ADDR
// for i in units do
49473: LD_ADDR_VAR 0 4
49477: PUSH
49478: LD_VAR 0 1
49482: PUSH
49483: FOR_IN
49484: IFFALSE 49522
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
49486: LD_ADDR_VAR 0 5
49490: PUSH
49491: LD_VAR 0 5
49495: PPUSH
49496: LD_VAR 0 5
49500: PUSH
49501: LD_INT 1
49503: PLUS
49504: PPUSH
49505: LD_VAR 0 4
49509: PPUSH
49510: CALL_OW 256
49514: PPUSH
49515: CALL_OW 2
49519: ST_TO_ADDR
49520: GO 49483
49522: POP
49523: POP
// if not tmp then
49524: LD_VAR 0 5
49528: NOT
49529: IFFALSE 49533
// exit ;
49531: GO 49581
// if asc then
49533: LD_VAR 0 2
49537: IFFALSE 49561
// result := SortListByListAsc ( units , tmp ) else
49539: LD_ADDR_VAR 0 3
49543: PUSH
49544: LD_VAR 0 1
49548: PPUSH
49549: LD_VAR 0 5
49553: PPUSH
49554: CALL_OW 76
49558: ST_TO_ADDR
49559: GO 49581
// result := SortListByListDesc ( units , tmp ) ;
49561: LD_ADDR_VAR 0 3
49565: PUSH
49566: LD_VAR 0 1
49570: PPUSH
49571: LD_VAR 0 5
49575: PPUSH
49576: CALL_OW 77
49580: ST_TO_ADDR
// end ;
49581: LD_VAR 0 3
49585: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
49586: LD_INT 0
49588: PPUSH
49589: PPUSH
// task := GetTaskList ( mech ) ;
49590: LD_ADDR_VAR 0 4
49594: PUSH
49595: LD_VAR 0 1
49599: PPUSH
49600: CALL_OW 437
49604: ST_TO_ADDR
// if not task then
49605: LD_VAR 0 4
49609: NOT
49610: IFFALSE 49614
// exit ;
49612: GO 49656
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
49614: LD_ADDR_VAR 0 3
49618: PUSH
49619: LD_VAR 0 4
49623: PUSH
49624: LD_INT 1
49626: ARRAY
49627: PUSH
49628: LD_INT 1
49630: ARRAY
49631: PUSH
49632: LD_STRING r
49634: EQUAL
49635: PUSH
49636: LD_VAR 0 4
49640: PUSH
49641: LD_INT 1
49643: ARRAY
49644: PUSH
49645: LD_INT 4
49647: ARRAY
49648: PUSH
49649: LD_VAR 0 2
49653: EQUAL
49654: AND
49655: ST_TO_ADDR
// end ;
49656: LD_VAR 0 3
49660: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
49661: LD_INT 0
49663: PPUSH
// SetDir ( unit , d ) ;
49664: LD_VAR 0 1
49668: PPUSH
49669: LD_VAR 0 4
49673: PPUSH
49674: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
49678: LD_ADDR_VAR 0 6
49682: PUSH
49683: LD_VAR 0 1
49687: PPUSH
49688: LD_VAR 0 2
49692: PPUSH
49693: LD_VAR 0 3
49697: PPUSH
49698: LD_VAR 0 5
49702: PPUSH
49703: CALL_OW 48
49707: ST_TO_ADDR
// end ;
49708: LD_VAR 0 6
49712: RET
// export function ToNaturalNumber ( number ) ; begin
49713: LD_INT 0
49715: PPUSH
// result := number div 1 ;
49716: LD_ADDR_VAR 0 2
49720: PUSH
49721: LD_VAR 0 1
49725: PUSH
49726: LD_INT 1
49728: DIV
49729: ST_TO_ADDR
// if number < 0 then
49730: LD_VAR 0 1
49734: PUSH
49735: LD_INT 0
49737: LESS
49738: IFFALSE 49748
// result := 0 ;
49740: LD_ADDR_VAR 0 2
49744: PUSH
49745: LD_INT 0
49747: ST_TO_ADDR
// end ;
49748: LD_VAR 0 2
49752: RET
// export function SortByClass ( units , class ) ; var un ; begin
49753: LD_INT 0
49755: PPUSH
49756: PPUSH
// if not units or not class then
49757: LD_VAR 0 1
49761: NOT
49762: PUSH
49763: LD_VAR 0 2
49767: NOT
49768: OR
49769: IFFALSE 49773
// exit ;
49771: GO 49868
// result := [ ] ;
49773: LD_ADDR_VAR 0 3
49777: PUSH
49778: EMPTY
49779: ST_TO_ADDR
// for un in units do
49780: LD_ADDR_VAR 0 4
49784: PUSH
49785: LD_VAR 0 1
49789: PUSH
49790: FOR_IN
49791: IFFALSE 49866
// if GetClass ( un ) = class then
49793: LD_VAR 0 4
49797: PPUSH
49798: CALL_OW 257
49802: PUSH
49803: LD_VAR 0 2
49807: EQUAL
49808: IFFALSE 49835
// result := Insert ( result , 1 , un ) else
49810: LD_ADDR_VAR 0 3
49814: PUSH
49815: LD_VAR 0 3
49819: PPUSH
49820: LD_INT 1
49822: PPUSH
49823: LD_VAR 0 4
49827: PPUSH
49828: CALL_OW 2
49832: ST_TO_ADDR
49833: GO 49864
// result := Replace ( result , result + 1 , un ) ;
49835: LD_ADDR_VAR 0 3
49839: PUSH
49840: LD_VAR 0 3
49844: PPUSH
49845: LD_VAR 0 3
49849: PUSH
49850: LD_INT 1
49852: PLUS
49853: PPUSH
49854: LD_VAR 0 4
49858: PPUSH
49859: CALL_OW 1
49863: ST_TO_ADDR
49864: GO 49790
49866: POP
49867: POP
// end ;
49868: LD_VAR 0 3
49872: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
49873: LD_INT 0
49875: PPUSH
49876: PPUSH
49877: PPUSH
49878: PPUSH
49879: PPUSH
49880: PPUSH
49881: PPUSH
// result := [ ] ;
49882: LD_ADDR_VAR 0 4
49886: PUSH
49887: EMPTY
49888: ST_TO_ADDR
// if x - r < 0 then
49889: LD_VAR 0 1
49893: PUSH
49894: LD_VAR 0 3
49898: MINUS
49899: PUSH
49900: LD_INT 0
49902: LESS
49903: IFFALSE 49915
// min_x := 0 else
49905: LD_ADDR_VAR 0 8
49909: PUSH
49910: LD_INT 0
49912: ST_TO_ADDR
49913: GO 49931
// min_x := x - r ;
49915: LD_ADDR_VAR 0 8
49919: PUSH
49920: LD_VAR 0 1
49924: PUSH
49925: LD_VAR 0 3
49929: MINUS
49930: ST_TO_ADDR
// if y - r < 0 then
49931: LD_VAR 0 2
49935: PUSH
49936: LD_VAR 0 3
49940: MINUS
49941: PUSH
49942: LD_INT 0
49944: LESS
49945: IFFALSE 49957
// min_y := 0 else
49947: LD_ADDR_VAR 0 7
49951: PUSH
49952: LD_INT 0
49954: ST_TO_ADDR
49955: GO 49973
// min_y := y - r ;
49957: LD_ADDR_VAR 0 7
49961: PUSH
49962: LD_VAR 0 2
49966: PUSH
49967: LD_VAR 0 3
49971: MINUS
49972: ST_TO_ADDR
// max_x := x + r ;
49973: LD_ADDR_VAR 0 9
49977: PUSH
49978: LD_VAR 0 1
49982: PUSH
49983: LD_VAR 0 3
49987: PLUS
49988: ST_TO_ADDR
// max_y := y + r ;
49989: LD_ADDR_VAR 0 10
49993: PUSH
49994: LD_VAR 0 2
49998: PUSH
49999: LD_VAR 0 3
50003: PLUS
50004: ST_TO_ADDR
// for _x = min_x to max_x do
50005: LD_ADDR_VAR 0 5
50009: PUSH
50010: DOUBLE
50011: LD_VAR 0 8
50015: DEC
50016: ST_TO_ADDR
50017: LD_VAR 0 9
50021: PUSH
50022: FOR_TO
50023: IFFALSE 50124
// for _y = min_y to max_y do
50025: LD_ADDR_VAR 0 6
50029: PUSH
50030: DOUBLE
50031: LD_VAR 0 7
50035: DEC
50036: ST_TO_ADDR
50037: LD_VAR 0 10
50041: PUSH
50042: FOR_TO
50043: IFFALSE 50120
// begin if not ValidHex ( _x , _y ) then
50045: LD_VAR 0 5
50049: PPUSH
50050: LD_VAR 0 6
50054: PPUSH
50055: CALL_OW 488
50059: NOT
50060: IFFALSE 50064
// continue ;
50062: GO 50042
// if GetResourceTypeXY ( _x , _y ) then
50064: LD_VAR 0 5
50068: PPUSH
50069: LD_VAR 0 6
50073: PPUSH
50074: CALL_OW 283
50078: IFFALSE 50118
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
50080: LD_ADDR_VAR 0 4
50084: PUSH
50085: LD_VAR 0 4
50089: PPUSH
50090: LD_VAR 0 4
50094: PUSH
50095: LD_INT 1
50097: PLUS
50098: PPUSH
50099: LD_VAR 0 5
50103: PUSH
50104: LD_VAR 0 6
50108: PUSH
50109: EMPTY
50110: LIST
50111: LIST
50112: PPUSH
50113: CALL_OW 1
50117: ST_TO_ADDR
// end ;
50118: GO 50042
50120: POP
50121: POP
50122: GO 50022
50124: POP
50125: POP
// end ;
50126: LD_VAR 0 4
50130: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
50131: LD_INT 0
50133: PPUSH
50134: PPUSH
50135: PPUSH
50136: PPUSH
50137: PPUSH
50138: PPUSH
50139: PPUSH
50140: PPUSH
// if not units then
50141: LD_VAR 0 1
50145: NOT
50146: IFFALSE 50150
// exit ;
50148: GO 50678
// result := UnitFilter ( units , [ f_ok ] ) ;
50150: LD_ADDR_VAR 0 3
50154: PUSH
50155: LD_VAR 0 1
50159: PPUSH
50160: LD_INT 50
50162: PUSH
50163: EMPTY
50164: LIST
50165: PPUSH
50166: CALL_OW 72
50170: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
50171: LD_ADDR_VAR 0 8
50175: PUSH
50176: LD_VAR 0 1
50180: PUSH
50181: LD_INT 1
50183: ARRAY
50184: PPUSH
50185: CALL_OW 255
50189: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
50190: LD_ADDR_VAR 0 10
50194: PUSH
50195: LD_INT 29
50197: PUSH
50198: LD_INT 91
50200: PUSH
50201: LD_INT 49
50203: PUSH
50204: EMPTY
50205: LIST
50206: LIST
50207: LIST
50208: ST_TO_ADDR
// if not result then
50209: LD_VAR 0 3
50213: NOT
50214: IFFALSE 50218
// exit ;
50216: GO 50678
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
50218: LD_ADDR_VAR 0 5
50222: PUSH
50223: LD_INT 81
50225: PUSH
50226: LD_VAR 0 8
50230: PUSH
50231: EMPTY
50232: LIST
50233: LIST
50234: PPUSH
50235: CALL_OW 69
50239: ST_TO_ADDR
// for i in result do
50240: LD_ADDR_VAR 0 4
50244: PUSH
50245: LD_VAR 0 3
50249: PUSH
50250: FOR_IN
50251: IFFALSE 50676
// begin tag := GetTag ( i ) + 1 ;
50253: LD_ADDR_VAR 0 9
50257: PUSH
50258: LD_VAR 0 4
50262: PPUSH
50263: CALL_OW 110
50267: PUSH
50268: LD_INT 1
50270: PLUS
50271: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
50272: LD_ADDR_VAR 0 7
50276: PUSH
50277: LD_VAR 0 4
50281: PPUSH
50282: CALL_OW 250
50286: PPUSH
50287: LD_VAR 0 4
50291: PPUSH
50292: CALL_OW 251
50296: PPUSH
50297: LD_INT 4
50299: PPUSH
50300: CALL 49873 0 3
50304: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
50305: LD_VAR 0 4
50309: PPUSH
50310: CALL_OW 247
50314: PUSH
50315: LD_INT 2
50317: EQUAL
50318: PUSH
50319: LD_VAR 0 7
50323: PUSH
50324: LD_INT 2
50326: GREATER
50327: AND
50328: PUSH
50329: LD_VAR 0 4
50333: PPUSH
50334: CALL_OW 264
50338: PUSH
50339: LD_VAR 0 10
50343: IN
50344: NOT
50345: AND
50346: IFFALSE 50385
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
50348: LD_VAR 0 4
50352: PPUSH
50353: LD_VAR 0 7
50357: PUSH
50358: LD_INT 1
50360: ARRAY
50361: PUSH
50362: LD_INT 1
50364: ARRAY
50365: PPUSH
50366: LD_VAR 0 7
50370: PUSH
50371: LD_INT 1
50373: ARRAY
50374: PUSH
50375: LD_INT 2
50377: ARRAY
50378: PPUSH
50379: CALL_OW 116
50383: GO 50674
// if path > tag then
50385: LD_VAR 0 2
50389: PUSH
50390: LD_VAR 0 9
50394: GREATER
50395: IFFALSE 50603
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
50397: LD_ADDR_VAR 0 6
50401: PUSH
50402: LD_VAR 0 5
50406: PPUSH
50407: LD_INT 91
50409: PUSH
50410: LD_VAR 0 4
50414: PUSH
50415: LD_INT 8
50417: PUSH
50418: EMPTY
50419: LIST
50420: LIST
50421: LIST
50422: PPUSH
50423: CALL_OW 72
50427: ST_TO_ADDR
// if nearEnemy then
50428: LD_VAR 0 6
50432: IFFALSE 50501
// begin if GetWeapon ( i ) = ru_time_lapser then
50434: LD_VAR 0 4
50438: PPUSH
50439: CALL_OW 264
50443: PUSH
50444: LD_INT 49
50446: EQUAL
50447: IFFALSE 50475
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
50449: LD_VAR 0 4
50453: PPUSH
50454: LD_VAR 0 6
50458: PPUSH
50459: LD_VAR 0 4
50463: PPUSH
50464: CALL_OW 74
50468: PPUSH
50469: CALL_OW 112
50473: GO 50499
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
50475: LD_VAR 0 4
50479: PPUSH
50480: LD_VAR 0 6
50484: PPUSH
50485: LD_VAR 0 4
50489: PPUSH
50490: CALL_OW 74
50494: PPUSH
50495: CALL 51749 0 2
// end else
50499: GO 50601
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
50501: LD_VAR 0 4
50505: PPUSH
50506: LD_VAR 0 2
50510: PUSH
50511: LD_VAR 0 9
50515: ARRAY
50516: PUSH
50517: LD_INT 1
50519: ARRAY
50520: PPUSH
50521: LD_VAR 0 2
50525: PUSH
50526: LD_VAR 0 9
50530: ARRAY
50531: PUSH
50532: LD_INT 2
50534: ARRAY
50535: PPUSH
50536: CALL_OW 297
50540: PUSH
50541: LD_INT 6
50543: GREATER
50544: IFFALSE 50587
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
50546: LD_VAR 0 4
50550: PPUSH
50551: LD_VAR 0 2
50555: PUSH
50556: LD_VAR 0 9
50560: ARRAY
50561: PUSH
50562: LD_INT 1
50564: ARRAY
50565: PPUSH
50566: LD_VAR 0 2
50570: PUSH
50571: LD_VAR 0 9
50575: ARRAY
50576: PUSH
50577: LD_INT 2
50579: ARRAY
50580: PPUSH
50581: CALL_OW 114
50585: GO 50601
// SetTag ( i , tag ) ;
50587: LD_VAR 0 4
50591: PPUSH
50592: LD_VAR 0 9
50596: PPUSH
50597: CALL_OW 109
// end else
50601: GO 50674
// if enemy then
50603: LD_VAR 0 5
50607: IFFALSE 50674
// begin if GetWeapon ( i ) = ru_time_lapser then
50609: LD_VAR 0 4
50613: PPUSH
50614: CALL_OW 264
50618: PUSH
50619: LD_INT 49
50621: EQUAL
50622: IFFALSE 50650
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
50624: LD_VAR 0 4
50628: PPUSH
50629: LD_VAR 0 5
50633: PPUSH
50634: LD_VAR 0 4
50638: PPUSH
50639: CALL_OW 74
50643: PPUSH
50644: CALL_OW 112
50648: GO 50674
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
50650: LD_VAR 0 4
50654: PPUSH
50655: LD_VAR 0 5
50659: PPUSH
50660: LD_VAR 0 4
50664: PPUSH
50665: CALL_OW 74
50669: PPUSH
50670: CALL 51749 0 2
// end ; end ;
50674: GO 50250
50676: POP
50677: POP
// end ;
50678: LD_VAR 0 3
50682: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
50683: LD_INT 0
50685: PPUSH
50686: PPUSH
50687: PPUSH
// if not unit or IsInUnit ( unit ) then
50688: LD_VAR 0 1
50692: NOT
50693: PUSH
50694: LD_VAR 0 1
50698: PPUSH
50699: CALL_OW 310
50703: OR
50704: IFFALSE 50708
// exit ;
50706: GO 50799
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
50708: LD_ADDR_VAR 0 4
50712: PUSH
50713: LD_VAR 0 1
50717: PPUSH
50718: CALL_OW 250
50722: PPUSH
50723: LD_VAR 0 2
50727: PPUSH
50728: LD_INT 1
50730: PPUSH
50731: CALL_OW 272
50735: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
50736: LD_ADDR_VAR 0 5
50740: PUSH
50741: LD_VAR 0 1
50745: PPUSH
50746: CALL_OW 251
50750: PPUSH
50751: LD_VAR 0 2
50755: PPUSH
50756: LD_INT 1
50758: PPUSH
50759: CALL_OW 273
50763: ST_TO_ADDR
// if ValidHex ( x , y ) then
50764: LD_VAR 0 4
50768: PPUSH
50769: LD_VAR 0 5
50773: PPUSH
50774: CALL_OW 488
50778: IFFALSE 50799
// ComTurnXY ( unit , x , y ) ;
50780: LD_VAR 0 1
50784: PPUSH
50785: LD_VAR 0 4
50789: PPUSH
50790: LD_VAR 0 5
50794: PPUSH
50795: CALL_OW 118
// end ;
50799: LD_VAR 0 3
50803: RET
// export function SeeUnits ( side , units ) ; var i ; begin
50804: LD_INT 0
50806: PPUSH
50807: PPUSH
// result := false ;
50808: LD_ADDR_VAR 0 3
50812: PUSH
50813: LD_INT 0
50815: ST_TO_ADDR
// if not units then
50816: LD_VAR 0 2
50820: NOT
50821: IFFALSE 50825
// exit ;
50823: GO 50870
// for i in units do
50825: LD_ADDR_VAR 0 4
50829: PUSH
50830: LD_VAR 0 2
50834: PUSH
50835: FOR_IN
50836: IFFALSE 50868
// if See ( side , i ) then
50838: LD_VAR 0 1
50842: PPUSH
50843: LD_VAR 0 4
50847: PPUSH
50848: CALL_OW 292
50852: IFFALSE 50866
// begin result := true ;
50854: LD_ADDR_VAR 0 3
50858: PUSH
50859: LD_INT 1
50861: ST_TO_ADDR
// exit ;
50862: POP
50863: POP
50864: GO 50870
// end ;
50866: GO 50835
50868: POP
50869: POP
// end ;
50870: LD_VAR 0 3
50874: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
50875: LD_INT 0
50877: PPUSH
50878: PPUSH
50879: PPUSH
50880: PPUSH
// if not unit or not points then
50881: LD_VAR 0 1
50885: NOT
50886: PUSH
50887: LD_VAR 0 2
50891: NOT
50892: OR
50893: IFFALSE 50897
// exit ;
50895: GO 50987
// dist := 99999 ;
50897: LD_ADDR_VAR 0 5
50901: PUSH
50902: LD_INT 99999
50904: ST_TO_ADDR
// for i in points do
50905: LD_ADDR_VAR 0 4
50909: PUSH
50910: LD_VAR 0 2
50914: PUSH
50915: FOR_IN
50916: IFFALSE 50985
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
50918: LD_ADDR_VAR 0 6
50922: PUSH
50923: LD_VAR 0 1
50927: PPUSH
50928: LD_VAR 0 4
50932: PUSH
50933: LD_INT 1
50935: ARRAY
50936: PPUSH
50937: LD_VAR 0 4
50941: PUSH
50942: LD_INT 2
50944: ARRAY
50945: PPUSH
50946: CALL_OW 297
50950: ST_TO_ADDR
// if tmpDist < dist then
50951: LD_VAR 0 6
50955: PUSH
50956: LD_VAR 0 5
50960: LESS
50961: IFFALSE 50983
// begin result := i ;
50963: LD_ADDR_VAR 0 3
50967: PUSH
50968: LD_VAR 0 4
50972: ST_TO_ADDR
// dist := tmpDist ;
50973: LD_ADDR_VAR 0 5
50977: PUSH
50978: LD_VAR 0 6
50982: ST_TO_ADDR
// end ; end ;
50983: GO 50915
50985: POP
50986: POP
// end ;
50987: LD_VAR 0 3
50991: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
50992: LD_INT 0
50994: PPUSH
// uc_side := side ;
50995: LD_ADDR_OWVAR 20
50999: PUSH
51000: LD_VAR 0 1
51004: ST_TO_ADDR
// uc_nation := 3 ;
51005: LD_ADDR_OWVAR 21
51009: PUSH
51010: LD_INT 3
51012: ST_TO_ADDR
// vc_chassis := 25 ;
51013: LD_ADDR_OWVAR 37
51017: PUSH
51018: LD_INT 25
51020: ST_TO_ADDR
// vc_engine := engine_siberite ;
51021: LD_ADDR_OWVAR 39
51025: PUSH
51026: LD_INT 3
51028: ST_TO_ADDR
// vc_control := control_computer ;
51029: LD_ADDR_OWVAR 38
51033: PUSH
51034: LD_INT 3
51036: ST_TO_ADDR
// vc_weapon := 59 ;
51037: LD_ADDR_OWVAR 40
51041: PUSH
51042: LD_INT 59
51044: ST_TO_ADDR
// result := CreateVehicle ;
51045: LD_ADDR_VAR 0 5
51049: PUSH
51050: CALL_OW 45
51054: ST_TO_ADDR
// SetDir ( result , d ) ;
51055: LD_VAR 0 5
51059: PPUSH
51060: LD_VAR 0 4
51064: PPUSH
51065: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
51069: LD_VAR 0 5
51073: PPUSH
51074: LD_VAR 0 2
51078: PPUSH
51079: LD_VAR 0 3
51083: PPUSH
51084: LD_INT 0
51086: PPUSH
51087: CALL_OW 48
// end ;
51091: LD_VAR 0 5
51095: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
51096: LD_INT 0
51098: PPUSH
51099: PPUSH
51100: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
51101: LD_ADDR_VAR 0 2
51105: PUSH
51106: LD_INT 0
51108: PUSH
51109: LD_INT 0
51111: PUSH
51112: LD_INT 0
51114: PUSH
51115: LD_INT 0
51117: PUSH
51118: EMPTY
51119: LIST
51120: LIST
51121: LIST
51122: LIST
51123: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
51124: LD_VAR 0 1
51128: NOT
51129: PUSH
51130: LD_VAR 0 1
51134: PPUSH
51135: CALL_OW 264
51139: PUSH
51140: LD_INT 12
51142: PUSH
51143: LD_INT 51
51145: PUSH
51146: LD_INT 32
51148: PUSH
51149: LD_INT 89
51151: PUSH
51152: EMPTY
51153: LIST
51154: LIST
51155: LIST
51156: LIST
51157: IN
51158: NOT
51159: OR
51160: IFFALSE 51164
// exit ;
51162: GO 51262
// for i := 1 to 3 do
51164: LD_ADDR_VAR 0 3
51168: PUSH
51169: DOUBLE
51170: LD_INT 1
51172: DEC
51173: ST_TO_ADDR
51174: LD_INT 3
51176: PUSH
51177: FOR_TO
51178: IFFALSE 51260
// begin tmp := GetCargo ( cargo , i ) ;
51180: LD_ADDR_VAR 0 4
51184: PUSH
51185: LD_VAR 0 1
51189: PPUSH
51190: LD_VAR 0 3
51194: PPUSH
51195: CALL_OW 289
51199: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
51200: LD_ADDR_VAR 0 2
51204: PUSH
51205: LD_VAR 0 2
51209: PPUSH
51210: LD_VAR 0 3
51214: PPUSH
51215: LD_VAR 0 4
51219: PPUSH
51220: CALL_OW 1
51224: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
51225: LD_ADDR_VAR 0 2
51229: PUSH
51230: LD_VAR 0 2
51234: PPUSH
51235: LD_INT 4
51237: PPUSH
51238: LD_VAR 0 2
51242: PUSH
51243: LD_INT 4
51245: ARRAY
51246: PUSH
51247: LD_VAR 0 4
51251: PLUS
51252: PPUSH
51253: CALL_OW 1
51257: ST_TO_ADDR
// end ;
51258: GO 51177
51260: POP
51261: POP
// end ;
51262: LD_VAR 0 2
51266: RET
// export function Length ( array ) ; begin
51267: LD_INT 0
51269: PPUSH
// result := array + 0 ;
51270: LD_ADDR_VAR 0 2
51274: PUSH
51275: LD_VAR 0 1
51279: PUSH
51280: LD_INT 0
51282: PLUS
51283: ST_TO_ADDR
// end ;
51284: LD_VAR 0 2
51288: RET
// export function PrepareArray ( array ) ; begin
51289: LD_INT 0
51291: PPUSH
// result := array diff 0 ;
51292: LD_ADDR_VAR 0 2
51296: PUSH
51297: LD_VAR 0 1
51301: PUSH
51302: LD_INT 0
51304: DIFF
51305: ST_TO_ADDR
// if not result [ 1 ] then
51306: LD_VAR 0 2
51310: PUSH
51311: LD_INT 1
51313: ARRAY
51314: NOT
51315: IFFALSE 51335
// result := Delete ( result , 1 ) ;
51317: LD_ADDR_VAR 0 2
51321: PUSH
51322: LD_VAR 0 2
51326: PPUSH
51327: LD_INT 1
51329: PPUSH
51330: CALL_OW 3
51334: ST_TO_ADDR
// end ;
51335: LD_VAR 0 2
51339: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
51340: LD_INT 0
51342: PPUSH
51343: PPUSH
51344: PPUSH
51345: PPUSH
// sibRocketRange := 25 ;
51346: LD_ADDR_VAR 0 6
51350: PUSH
51351: LD_INT 25
51353: ST_TO_ADDR
// result := false ;
51354: LD_ADDR_VAR 0 4
51358: PUSH
51359: LD_INT 0
51361: ST_TO_ADDR
// for i := 0 to 5 do
51362: LD_ADDR_VAR 0 5
51366: PUSH
51367: DOUBLE
51368: LD_INT 0
51370: DEC
51371: ST_TO_ADDR
51372: LD_INT 5
51374: PUSH
51375: FOR_TO
51376: IFFALSE 51443
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
51378: LD_VAR 0 1
51382: PPUSH
51383: LD_VAR 0 5
51387: PPUSH
51388: LD_VAR 0 6
51392: PPUSH
51393: CALL_OW 272
51397: PPUSH
51398: LD_VAR 0 2
51402: PPUSH
51403: LD_VAR 0 5
51407: PPUSH
51408: LD_VAR 0 6
51412: PPUSH
51413: CALL_OW 273
51417: PPUSH
51418: LD_VAR 0 3
51422: PPUSH
51423: CALL_OW 309
51427: IFFALSE 51441
// begin result := true ;
51429: LD_ADDR_VAR 0 4
51433: PUSH
51434: LD_INT 1
51436: ST_TO_ADDR
// exit ;
51437: POP
51438: POP
51439: GO 51445
// end ;
51441: GO 51375
51443: POP
51444: POP
// end ;
51445: LD_VAR 0 4
51449: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
51450: LD_INT 0
51452: PPUSH
51453: PPUSH
51454: PPUSH
// if btype = b_depot then
51455: LD_VAR 0 2
51459: PUSH
51460: LD_INT 0
51462: EQUAL
51463: IFFALSE 51475
// begin result := true ;
51465: LD_ADDR_VAR 0 3
51469: PUSH
51470: LD_INT 1
51472: ST_TO_ADDR
// exit ;
51473: GO 51591
// end ; pom := GetBase ( depot ) ;
51475: LD_ADDR_VAR 0 4
51479: PUSH
51480: LD_VAR 0 1
51484: PPUSH
51485: CALL_OW 274
51489: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
51490: LD_ADDR_VAR 0 5
51494: PUSH
51495: LD_VAR 0 2
51499: PPUSH
51500: LD_VAR 0 1
51504: PPUSH
51505: CALL_OW 248
51509: PPUSH
51510: CALL_OW 450
51514: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
51515: LD_ADDR_VAR 0 3
51519: PUSH
51520: LD_VAR 0 4
51524: PPUSH
51525: LD_INT 1
51527: PPUSH
51528: CALL_OW 275
51532: PUSH
51533: LD_VAR 0 5
51537: PUSH
51538: LD_INT 1
51540: ARRAY
51541: GREATEREQUAL
51542: PUSH
51543: LD_VAR 0 4
51547: PPUSH
51548: LD_INT 2
51550: PPUSH
51551: CALL_OW 275
51555: PUSH
51556: LD_VAR 0 5
51560: PUSH
51561: LD_INT 2
51563: ARRAY
51564: GREATEREQUAL
51565: AND
51566: PUSH
51567: LD_VAR 0 4
51571: PPUSH
51572: LD_INT 3
51574: PPUSH
51575: CALL_OW 275
51579: PUSH
51580: LD_VAR 0 5
51584: PUSH
51585: LD_INT 3
51587: ARRAY
51588: GREATEREQUAL
51589: AND
51590: ST_TO_ADDR
// end ;
51591: LD_VAR 0 3
51595: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
51596: LD_INT 0
51598: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
51599: LD_VAR 0 1
51603: PPUSH
51604: LD_VAR 0 2
51608: PPUSH
51609: LD_INT 0
51611: PPUSH
51612: LD_INT 0
51614: PPUSH
51615: LD_INT 1
51617: PPUSH
51618: LD_INT 0
51620: PPUSH
51621: CALL_OW 587
// end ;
51625: LD_VAR 0 3
51629: RET
// export function CenterOnNow ( unit ) ; begin
51630: LD_INT 0
51632: PPUSH
// result := IsInUnit ( unit ) ;
51633: LD_ADDR_VAR 0 2
51637: PUSH
51638: LD_VAR 0 1
51642: PPUSH
51643: CALL_OW 310
51647: ST_TO_ADDR
// if not result then
51648: LD_VAR 0 2
51652: NOT
51653: IFFALSE 51665
// result := unit ;
51655: LD_ADDR_VAR 0 2
51659: PUSH
51660: LD_VAR 0 1
51664: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
51665: LD_VAR 0 1
51669: PPUSH
51670: CALL_OW 87
// end ;
51674: LD_VAR 0 2
51678: RET
// export function ComMoveHex ( unit , hex ) ; begin
51679: LD_INT 0
51681: PPUSH
// if not hex then
51682: LD_VAR 0 2
51686: NOT
51687: IFFALSE 51691
// exit ;
51689: GO 51744
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
51691: LD_VAR 0 2
51695: PUSH
51696: LD_INT 1
51698: ARRAY
51699: PPUSH
51700: LD_VAR 0 2
51704: PUSH
51705: LD_INT 2
51707: ARRAY
51708: PPUSH
51709: CALL_OW 428
51713: IFFALSE 51717
// exit ;
51715: GO 51744
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
51717: LD_VAR 0 1
51721: PPUSH
51722: LD_VAR 0 2
51726: PUSH
51727: LD_INT 1
51729: ARRAY
51730: PPUSH
51731: LD_VAR 0 2
51735: PUSH
51736: LD_INT 2
51738: ARRAY
51739: PPUSH
51740: CALL_OW 111
// end ;
51744: LD_VAR 0 3
51748: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
51749: LD_INT 0
51751: PPUSH
51752: PPUSH
51753: PPUSH
// if not unit or not enemy then
51754: LD_VAR 0 1
51758: NOT
51759: PUSH
51760: LD_VAR 0 2
51764: NOT
51765: OR
51766: IFFALSE 51770
// exit ;
51768: GO 51894
// x := GetX ( enemy ) ;
51770: LD_ADDR_VAR 0 4
51774: PUSH
51775: LD_VAR 0 2
51779: PPUSH
51780: CALL_OW 250
51784: ST_TO_ADDR
// y := GetY ( enemy ) ;
51785: LD_ADDR_VAR 0 5
51789: PUSH
51790: LD_VAR 0 2
51794: PPUSH
51795: CALL_OW 251
51799: ST_TO_ADDR
// if ValidHex ( x , y ) then
51800: LD_VAR 0 4
51804: PPUSH
51805: LD_VAR 0 5
51809: PPUSH
51810: CALL_OW 488
51814: IFFALSE 51894
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
51816: LD_VAR 0 2
51820: PPUSH
51821: CALL_OW 247
51825: PUSH
51826: LD_INT 3
51828: PUSH
51829: LD_INT 2
51831: PUSH
51832: EMPTY
51833: LIST
51834: LIST
51835: IN
51836: PUSH
51837: LD_VAR 0 1
51841: PPUSH
51842: CALL_OW 255
51846: PPUSH
51847: LD_VAR 0 2
51851: PPUSH
51852: CALL_OW 292
51856: OR
51857: IFFALSE 51875
// ComAttackUnit ( unit , enemy ) else
51859: LD_VAR 0 1
51863: PPUSH
51864: LD_VAR 0 2
51868: PPUSH
51869: CALL_OW 115
51873: GO 51894
// ComAgressiveMove ( unit , x , y ) ;
51875: LD_VAR 0 1
51879: PPUSH
51880: LD_VAR 0 4
51884: PPUSH
51885: LD_VAR 0 5
51889: PPUSH
51890: CALL_OW 114
// end ;
51894: LD_VAR 0 3
51898: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
51899: LD_INT 0
51901: PPUSH
51902: PPUSH
51903: PPUSH
// list := AreaToList ( area , 0 ) ;
51904: LD_ADDR_VAR 0 5
51908: PUSH
51909: LD_VAR 0 1
51913: PPUSH
51914: LD_INT 0
51916: PPUSH
51917: CALL_OW 517
51921: ST_TO_ADDR
// if not list then
51922: LD_VAR 0 5
51926: NOT
51927: IFFALSE 51931
// exit ;
51929: GO 52061
// if all then
51931: LD_VAR 0 2
51935: IFFALSE 52023
// begin for i := 1 to list [ 1 ] do
51937: LD_ADDR_VAR 0 4
51941: PUSH
51942: DOUBLE
51943: LD_INT 1
51945: DEC
51946: ST_TO_ADDR
51947: LD_VAR 0 5
51951: PUSH
51952: LD_INT 1
51954: ARRAY
51955: PUSH
51956: FOR_TO
51957: IFFALSE 52019
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
51959: LD_ADDR_VAR 0 3
51963: PUSH
51964: LD_VAR 0 3
51968: PPUSH
51969: LD_VAR 0 3
51973: PUSH
51974: LD_INT 1
51976: PLUS
51977: PPUSH
51978: LD_VAR 0 5
51982: PUSH
51983: LD_INT 1
51985: ARRAY
51986: PUSH
51987: LD_VAR 0 4
51991: ARRAY
51992: PUSH
51993: LD_VAR 0 5
51997: PUSH
51998: LD_INT 2
52000: ARRAY
52001: PUSH
52002: LD_VAR 0 4
52006: ARRAY
52007: PUSH
52008: EMPTY
52009: LIST
52010: LIST
52011: PPUSH
52012: CALL_OW 1
52016: ST_TO_ADDR
52017: GO 51956
52019: POP
52020: POP
// exit ;
52021: GO 52061
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
52023: LD_ADDR_VAR 0 3
52027: PUSH
52028: LD_VAR 0 5
52032: PUSH
52033: LD_INT 1
52035: ARRAY
52036: PUSH
52037: LD_INT 1
52039: ARRAY
52040: PUSH
52041: LD_VAR 0 5
52045: PUSH
52046: LD_INT 2
52048: ARRAY
52049: PUSH
52050: LD_INT 1
52052: ARRAY
52053: PUSH
52054: EMPTY
52055: LIST
52056: LIST
52057: PUSH
52058: EMPTY
52059: LIST
52060: ST_TO_ADDR
// end ;
52061: LD_VAR 0 3
52065: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
52066: LD_INT 0
52068: PPUSH
52069: PPUSH
// list := AreaToList ( area , 0 ) ;
52070: LD_ADDR_VAR 0 4
52074: PUSH
52075: LD_VAR 0 1
52079: PPUSH
52080: LD_INT 0
52082: PPUSH
52083: CALL_OW 517
52087: ST_TO_ADDR
// if not list then
52088: LD_VAR 0 4
52092: NOT
52093: IFFALSE 52097
// exit ;
52095: GO 52138
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
52097: LD_ADDR_VAR 0 3
52101: PUSH
52102: LD_VAR 0 4
52106: PUSH
52107: LD_INT 1
52109: ARRAY
52110: PUSH
52111: LD_INT 1
52113: ARRAY
52114: PUSH
52115: LD_VAR 0 4
52119: PUSH
52120: LD_INT 2
52122: ARRAY
52123: PUSH
52124: LD_INT 1
52126: ARRAY
52127: PUSH
52128: LD_VAR 0 2
52132: PUSH
52133: EMPTY
52134: LIST
52135: LIST
52136: LIST
52137: ST_TO_ADDR
// end ;
52138: LD_VAR 0 3
52142: RET
// export function First ( array ) ; begin
52143: LD_INT 0
52145: PPUSH
// if not array then
52146: LD_VAR 0 1
52150: NOT
52151: IFFALSE 52155
// exit ;
52153: GO 52169
// result := array [ 1 ] ;
52155: LD_ADDR_VAR 0 2
52159: PUSH
52160: LD_VAR 0 1
52164: PUSH
52165: LD_INT 1
52167: ARRAY
52168: ST_TO_ADDR
// end ;
52169: LD_VAR 0 2
52173: RET
// export function Last ( array ) ; begin
52174: LD_INT 0
52176: PPUSH
// if not array then
52177: LD_VAR 0 1
52181: NOT
52182: IFFALSE 52186
// exit ;
52184: GO 52202
// result := array [ array ] ;
52186: LD_ADDR_VAR 0 2
52190: PUSH
52191: LD_VAR 0 1
52195: PUSH
52196: LD_VAR 0 1
52200: ARRAY
52201: ST_TO_ADDR
// end ;
52202: LD_VAR 0 2
52206: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
52207: LD_INT 0
52209: PPUSH
52210: PPUSH
// result := [ ] ;
52211: LD_ADDR_VAR 0 5
52215: PUSH
52216: EMPTY
52217: ST_TO_ADDR
// if not array then
52218: LD_VAR 0 1
52222: NOT
52223: IFFALSE 52227
// exit ;
52225: GO 52339
// for i := 1 to array do
52227: LD_ADDR_VAR 0 6
52231: PUSH
52232: DOUBLE
52233: LD_INT 1
52235: DEC
52236: ST_TO_ADDR
52237: LD_VAR 0 1
52241: PUSH
52242: FOR_TO
52243: IFFALSE 52337
// if array [ i ] [ index ] = value then
52245: LD_VAR 0 1
52249: PUSH
52250: LD_VAR 0 6
52254: ARRAY
52255: PUSH
52256: LD_VAR 0 2
52260: ARRAY
52261: PUSH
52262: LD_VAR 0 3
52266: EQUAL
52267: IFFALSE 52335
// begin if indexColumn then
52269: LD_VAR 0 4
52273: IFFALSE 52309
// result := Join ( result , array [ i ] [ indexColumn ] ) else
52275: LD_ADDR_VAR 0 5
52279: PUSH
52280: LD_VAR 0 5
52284: PPUSH
52285: LD_VAR 0 1
52289: PUSH
52290: LD_VAR 0 6
52294: ARRAY
52295: PUSH
52296: LD_VAR 0 4
52300: ARRAY
52301: PPUSH
52302: CALL 47521 0 2
52306: ST_TO_ADDR
52307: GO 52335
// result := Join ( result , array [ i ] ) ;
52309: LD_ADDR_VAR 0 5
52313: PUSH
52314: LD_VAR 0 5
52318: PPUSH
52319: LD_VAR 0 1
52323: PUSH
52324: LD_VAR 0 6
52328: ARRAY
52329: PPUSH
52330: CALL 47521 0 2
52334: ST_TO_ADDR
// end ;
52335: GO 52242
52337: POP
52338: POP
// end ;
52339: LD_VAR 0 5
52343: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
52344: LD_INT 0
52346: PPUSH
// if not vehicles or not parkingPoint then
52347: LD_VAR 0 1
52351: NOT
52352: PUSH
52353: LD_VAR 0 2
52357: NOT
52358: OR
52359: IFFALSE 52363
// exit ;
52361: GO 52461
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
52363: LD_ADDR_VAR 0 1
52367: PUSH
52368: LD_VAR 0 1
52372: PPUSH
52373: LD_INT 50
52375: PUSH
52376: EMPTY
52377: LIST
52378: PUSH
52379: LD_INT 3
52381: PUSH
52382: LD_INT 92
52384: PUSH
52385: LD_VAR 0 2
52389: PUSH
52390: LD_INT 1
52392: ARRAY
52393: PUSH
52394: LD_VAR 0 2
52398: PUSH
52399: LD_INT 2
52401: ARRAY
52402: PUSH
52403: LD_INT 8
52405: PUSH
52406: EMPTY
52407: LIST
52408: LIST
52409: LIST
52410: LIST
52411: PUSH
52412: EMPTY
52413: LIST
52414: LIST
52415: PUSH
52416: EMPTY
52417: LIST
52418: LIST
52419: PPUSH
52420: CALL_OW 72
52424: ST_TO_ADDR
// if not vehicles then
52425: LD_VAR 0 1
52429: NOT
52430: IFFALSE 52434
// exit ;
52432: GO 52461
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
52434: LD_VAR 0 1
52438: PPUSH
52439: LD_VAR 0 2
52443: PUSH
52444: LD_INT 1
52446: ARRAY
52447: PPUSH
52448: LD_VAR 0 2
52452: PUSH
52453: LD_INT 2
52455: ARRAY
52456: PPUSH
52457: CALL_OW 111
// end ;
52461: LD_VAR 0 3
52465: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
52466: LD_INT 0
52468: PPUSH
52469: PPUSH
52470: PPUSH
// if not side or not area then
52471: LD_VAR 0 1
52475: NOT
52476: PUSH
52477: LD_VAR 0 2
52481: NOT
52482: OR
52483: IFFALSE 52487
// exit ;
52485: GO 52606
// tmp := AreaToList ( area , 0 ) ;
52487: LD_ADDR_VAR 0 5
52491: PUSH
52492: LD_VAR 0 2
52496: PPUSH
52497: LD_INT 0
52499: PPUSH
52500: CALL_OW 517
52504: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
52505: LD_ADDR_VAR 0 4
52509: PUSH
52510: DOUBLE
52511: LD_INT 1
52513: DEC
52514: ST_TO_ADDR
52515: LD_VAR 0 5
52519: PUSH
52520: LD_INT 1
52522: ARRAY
52523: PUSH
52524: FOR_TO
52525: IFFALSE 52604
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
52527: LD_VAR 0 5
52531: PUSH
52532: LD_INT 1
52534: ARRAY
52535: PUSH
52536: LD_VAR 0 4
52540: ARRAY
52541: PPUSH
52542: LD_VAR 0 5
52546: PUSH
52547: LD_INT 2
52549: ARRAY
52550: PUSH
52551: LD_VAR 0 4
52555: ARRAY
52556: PPUSH
52557: CALL_OW 351
52561: IFFALSE 52602
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
52563: LD_VAR 0 5
52567: PUSH
52568: LD_INT 1
52570: ARRAY
52571: PUSH
52572: LD_VAR 0 4
52576: ARRAY
52577: PPUSH
52578: LD_VAR 0 5
52582: PUSH
52583: LD_INT 2
52585: ARRAY
52586: PUSH
52587: LD_VAR 0 4
52591: ARRAY
52592: PPUSH
52593: LD_VAR 0 1
52597: PPUSH
52598: CALL_OW 244
// end ;
52602: GO 52524
52604: POP
52605: POP
// end ; end_of_file
52606: LD_VAR 0 3
52610: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
52611: LD_VAR 0 1
52615: PUSH
52616: LD_INT 200
52618: DOUBLE
52619: GREATEREQUAL
52620: IFFALSE 52628
52622: LD_INT 299
52624: DOUBLE
52625: LESSEQUAL
52626: IFTRUE 52630
52628: GO 52662
52630: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
52631: LD_VAR 0 1
52635: PPUSH
52636: LD_VAR 0 2
52640: PPUSH
52641: LD_VAR 0 3
52645: PPUSH
52646: LD_VAR 0 4
52650: PPUSH
52651: LD_VAR 0 5
52655: PPUSH
52656: CALL 53439 0 5
52660: GO 52739
52662: LD_INT 300
52664: DOUBLE
52665: GREATEREQUAL
52666: IFFALSE 52674
52668: LD_INT 399
52670: DOUBLE
52671: LESSEQUAL
52672: IFTRUE 52676
52674: GO 52738
52676: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
52677: LD_VAR 0 1
52681: PPUSH
52682: LD_VAR 0 2
52686: PPUSH
52687: LD_VAR 0 3
52691: PPUSH
52692: LD_VAR 0 4
52696: PPUSH
52697: LD_VAR 0 5
52701: PPUSH
52702: LD_VAR 0 6
52706: PPUSH
52707: LD_VAR 0 7
52711: PPUSH
52712: LD_VAR 0 8
52716: PPUSH
52717: LD_VAR 0 9
52721: PPUSH
52722: LD_VAR 0 10
52726: PPUSH
52727: LD_VAR 0 11
52731: PPUSH
52732: CALL 60366 0 11
52736: GO 52739
52738: POP
// end ;
52739: PPOPN 11
52741: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
52742: LD_VAR 0 1
52746: PPUSH
52747: LD_VAR 0 2
52751: PPUSH
52752: LD_VAR 0 3
52756: PPUSH
52757: LD_VAR 0 4
52761: PPUSH
52762: LD_VAR 0 5
52766: PPUSH
52767: CALL 52824 0 5
// end ; end_of_file
52771: PPOPN 5
52773: END
// export function SOS_UnitDestroyed ( un ) ; begin
52774: LD_INT 0
52776: PPUSH
// ComRadiation ( un ) ;
52777: LD_VAR 0 1
52781: PPUSH
52782: CALL 53843 0 1
// end ;
52786: LD_VAR 0 2
52790: RET
// export function SOS_UnitKamikazed ( un ) ; begin
52791: LD_INT 0
52793: PPUSH
// ComRadiation ( un ) ;
52794: LD_VAR 0 1
52798: PPUSH
52799: CALL 53843 0 1
// end ;
52803: LD_VAR 0 2
52807: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
52808: LD_INT 0
52810: PPUSH
// end ;
52811: LD_VAR 0 4
52815: RET
// export function SOS_Command ( cmd ) ; begin
52816: LD_INT 0
52818: PPUSH
// end ;
52819: LD_VAR 0 2
52823: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
52824: LD_INT 0
52826: PPUSH
// end ;
52827: LD_VAR 0 6
52831: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , driver , hex ; begin
52832: LD_INT 0
52834: PPUSH
52835: PPUSH
52836: PPUSH
52837: PPUSH
// if not vehicle or not factory then
52838: LD_VAR 0 1
52842: NOT
52843: PUSH
52844: LD_VAR 0 2
52848: NOT
52849: OR
52850: IFFALSE 52854
// exit ;
52852: GO 53434
// if not factoryWaypoints then
52854: LD_EXP 59
52858: NOT
52859: IFFALSE 52863
// exit ;
52861: GO 53434
// for i := 1 to Count ( factoryWaypoints ) do
52863: LD_ADDR_VAR 0 4
52867: PUSH
52868: DOUBLE
52869: LD_INT 1
52871: DEC
52872: ST_TO_ADDR
52873: LD_EXP 59
52877: PPUSH
52878: CALL 11912 0 1
52882: PUSH
52883: FOR_TO
52884: IFFALSE 53432
// if factoryWaypoints [ i ] [ 2 ] = factory then
52886: LD_EXP 59
52890: PUSH
52891: LD_VAR 0 4
52895: ARRAY
52896: PUSH
52897: LD_INT 2
52899: ARRAY
52900: PUSH
52901: LD_VAR 0 2
52905: EQUAL
52906: IFFALSE 53430
// begin if GetControl ( vehicle ) = control_manual then
52908: LD_VAR 0 1
52912: PPUSH
52913: CALL_OW 263
52917: PUSH
52918: LD_INT 1
52920: EQUAL
52921: IFFALSE 53283
// begin driver := IsDrivenBy ( vehicle ) ;
52923: LD_ADDR_VAR 0 5
52927: PUSH
52928: LD_VAR 0 1
52932: PPUSH
52933: CALL_OW 311
52937: ST_TO_ADDR
// if driver in factoryWaypointsDrivers or vehicle in factoryWaypointsDrivers then
52938: LD_VAR 0 5
52942: PUSH
52943: LD_EXP 60
52947: IN
52948: PUSH
52949: LD_VAR 0 1
52953: PUSH
52954: LD_EXP 60
52958: IN
52959: OR
52960: IFFALSE 52966
// exit ;
52962: POP
52963: POP
52964: GO 53434
// if not HasTask ( driver ) then
52966: LD_VAR 0 5
52970: PPUSH
52971: CALL_OW 314
52975: NOT
52976: IFFALSE 53281
// begin factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , driver ) ;
52978: LD_ADDR_EXP 60
52982: PUSH
52983: LD_EXP 60
52987: PPUSH
52988: LD_VAR 0 5
52992: PPUSH
52993: CALL 47521 0 2
52997: ST_TO_ADDR
// factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , vehicle ) ;
52998: LD_ADDR_EXP 60
53002: PUSH
53003: LD_EXP 60
53007: PPUSH
53008: LD_VAR 0 1
53012: PPUSH
53013: CALL 47521 0 2
53017: ST_TO_ADDR
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
53018: LD_ADDR_VAR 0 6
53022: PUSH
53023: LD_EXP 59
53027: PUSH
53028: LD_VAR 0 4
53032: ARRAY
53033: PUSH
53034: LD_INT 3
53036: ARRAY
53037: PPUSH
53038: LD_EXP 59
53042: PUSH
53043: LD_VAR 0 4
53047: ARRAY
53048: PUSH
53049: LD_INT 4
53051: ARRAY
53052: PPUSH
53053: CALL_OW 428
53057: ST_TO_ADDR
// if hex then
53058: LD_VAR 0 6
53062: IFFALSE 53080
// ComMoveUnit ( driver , hex ) else
53064: LD_VAR 0 5
53068: PPUSH
53069: LD_VAR 0 6
53073: PPUSH
53074: CALL_OW 112
53078: GO 53164
// if GetDistUnitXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) > 0 then
53080: LD_VAR 0 1
53084: PPUSH
53085: LD_EXP 59
53089: PUSH
53090: LD_VAR 0 4
53094: ARRAY
53095: PUSH
53096: LD_INT 3
53098: ARRAY
53099: PPUSH
53100: LD_EXP 59
53104: PUSH
53105: LD_VAR 0 4
53109: ARRAY
53110: PUSH
53111: LD_INT 4
53113: ARRAY
53114: PPUSH
53115: CALL_OW 297
53119: PUSH
53120: LD_INT 0
53122: GREATER
53123: IFFALSE 53164
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
53125: LD_VAR 0 5
53129: PPUSH
53130: LD_EXP 59
53134: PUSH
53135: LD_VAR 0 4
53139: ARRAY
53140: PUSH
53141: LD_INT 3
53143: ARRAY
53144: PPUSH
53145: LD_EXP 59
53149: PUSH
53150: LD_VAR 0 4
53154: ARRAY
53155: PUSH
53156: LD_INT 4
53158: ARRAY
53159: PPUSH
53160: CALL_OW 111
// AddComExitVehicle ( driver ) ;
53164: LD_VAR 0 5
53168: PPUSH
53169: CALL_OW 181
// if Multiplayer then
53173: LD_OWVAR 4
53177: IFFALSE 53226
// begin repeat wait ( 10 ) ;
53179: LD_INT 10
53181: PPUSH
53182: CALL_OW 67
// until not IsInUnit ( driver ) ;
53186: LD_VAR 0 5
53190: PPUSH
53191: CALL_OW 310
53195: NOT
53196: IFFALSE 53179
// if not HasTask ( driver ) then
53198: LD_VAR 0 5
53202: PPUSH
53203: CALL_OW 314
53207: NOT
53208: IFFALSE 53224
// ComEnterUnit ( driver , factory ) ;
53210: LD_VAR 0 5
53214: PPUSH
53215: LD_VAR 0 2
53219: PPUSH
53220: CALL_OW 120
// end else
53224: GO 53240
// AddComEnterUnit ( driver , factory ) ;
53226: LD_VAR 0 5
53230: PPUSH
53231: LD_VAR 0 2
53235: PPUSH
53236: CALL_OW 180
// wait ( 0 0$1 ) ;
53240: LD_INT 35
53242: PPUSH
53243: CALL_OW 67
// factoryWaypointsDrivers := factoryWaypointsDrivers diff driver ;
53247: LD_ADDR_EXP 60
53251: PUSH
53252: LD_EXP 60
53256: PUSH
53257: LD_VAR 0 5
53261: DIFF
53262: ST_TO_ADDR
// factoryWaypointsDrivers := factoryWaypointsDrivers diff vehicle ;
53263: LD_ADDR_EXP 60
53267: PUSH
53268: LD_EXP 60
53272: PUSH
53273: LD_VAR 0 1
53277: DIFF
53278: ST_TO_ADDR
// break ;
53279: GO 53432
// end ; end else
53281: GO 53430
// if GetControl ( vehicle ) = control_remote then
53283: LD_VAR 0 1
53287: PPUSH
53288: CALL_OW 263
53292: PUSH
53293: LD_INT 2
53295: EQUAL
53296: IFFALSE 53382
// begin wait ( 0 0$2 ) ;
53298: LD_INT 70
53300: PPUSH
53301: CALL_OW 67
// repeat wait ( 10 ) ;
53305: LD_INT 10
53307: PPUSH
53308: CALL_OW 67
// Connect ( vehicle ) ;
53312: LD_VAR 0 1
53316: PPUSH
53317: CALL 18118 0 1
// until IsControledBy ( vehicle ) ;
53321: LD_VAR 0 1
53325: PPUSH
53326: CALL_OW 312
53330: IFFALSE 53305
// wait ( 10 ) ;
53332: LD_INT 10
53334: PPUSH
53335: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
53339: LD_VAR 0 1
53343: PPUSH
53344: LD_EXP 59
53348: PUSH
53349: LD_VAR 0 4
53353: ARRAY
53354: PUSH
53355: LD_INT 3
53357: ARRAY
53358: PPUSH
53359: LD_EXP 59
53363: PUSH
53364: LD_VAR 0 4
53368: ARRAY
53369: PUSH
53370: LD_INT 4
53372: ARRAY
53373: PPUSH
53374: CALL_OW 111
// break ;
53378: GO 53432
// end else
53380: GO 53430
// begin wait ( 0 0$3 ) ;
53382: LD_INT 105
53384: PPUSH
53385: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
53389: LD_VAR 0 1
53393: PPUSH
53394: LD_EXP 59
53398: PUSH
53399: LD_VAR 0 4
53403: ARRAY
53404: PUSH
53405: LD_INT 3
53407: ARRAY
53408: PPUSH
53409: LD_EXP 59
53413: PUSH
53414: LD_VAR 0 4
53418: ARRAY
53419: PUSH
53420: LD_INT 4
53422: ARRAY
53423: PPUSH
53424: CALL_OW 111
// break ;
53428: GO 53432
// end ; end ;
53430: GO 52883
53432: POP
53433: POP
// end ;
53434: LD_VAR 0 3
53438: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
53439: LD_INT 0
53441: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
53442: LD_VAR 0 1
53446: PUSH
53447: LD_INT 250
53449: EQUAL
53450: PUSH
53451: LD_VAR 0 2
53455: PPUSH
53456: CALL_OW 264
53460: PUSH
53461: LD_INT 81
53463: EQUAL
53464: AND
53465: IFFALSE 53486
// MinerPlaceMine ( unit , x , y ) ;
53467: LD_VAR 0 2
53471: PPUSH
53472: LD_VAR 0 4
53476: PPUSH
53477: LD_VAR 0 5
53481: PPUSH
53482: CALL 56578 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
53486: LD_VAR 0 1
53490: PUSH
53491: LD_INT 251
53493: EQUAL
53494: PUSH
53495: LD_VAR 0 2
53499: PPUSH
53500: CALL_OW 264
53504: PUSH
53505: LD_INT 81
53507: EQUAL
53508: AND
53509: IFFALSE 53530
// MinerDetonateMine ( unit , x , y ) ;
53511: LD_VAR 0 2
53515: PPUSH
53516: LD_VAR 0 4
53520: PPUSH
53521: LD_VAR 0 5
53525: PPUSH
53526: CALL 56853 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
53530: LD_VAR 0 1
53534: PUSH
53535: LD_INT 252
53537: EQUAL
53538: PUSH
53539: LD_VAR 0 2
53543: PPUSH
53544: CALL_OW 264
53548: PUSH
53549: LD_INT 81
53551: EQUAL
53552: AND
53553: IFFALSE 53574
// MinerCreateMinefield ( unit , x , y ) ;
53555: LD_VAR 0 2
53559: PPUSH
53560: LD_VAR 0 4
53564: PPUSH
53565: LD_VAR 0 5
53569: PPUSH
53570: CALL 57270 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
53574: LD_VAR 0 1
53578: PUSH
53579: LD_INT 253
53581: EQUAL
53582: PUSH
53583: LD_VAR 0 2
53587: PPUSH
53588: CALL_OW 257
53592: PUSH
53593: LD_INT 5
53595: EQUAL
53596: AND
53597: IFFALSE 53618
// ComBinocular ( unit , x , y ) ;
53599: LD_VAR 0 2
53603: PPUSH
53604: LD_VAR 0 4
53608: PPUSH
53609: LD_VAR 0 5
53613: PPUSH
53614: CALL 57639 0 3
// if selectedUnit then
53618: LD_VAR 0 3
53622: IFFALSE 53678
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
53624: LD_VAR 0 1
53628: PUSH
53629: LD_INT 254
53631: EQUAL
53632: PUSH
53633: LD_VAR 0 2
53637: PPUSH
53638: CALL_OW 264
53642: PUSH
53643: LD_INT 99
53645: EQUAL
53646: AND
53647: PUSH
53648: LD_VAR 0 3
53652: PPUSH
53653: CALL_OW 263
53657: PUSH
53658: LD_INT 3
53660: EQUAL
53661: AND
53662: IFFALSE 53678
// HackDestroyVehicle ( unit , selectedUnit ) ;
53664: LD_VAR 0 2
53668: PPUSH
53669: LD_VAR 0 3
53673: PPUSH
53674: CALL 55942 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
53678: LD_VAR 0 1
53682: PUSH
53683: LD_INT 255
53685: EQUAL
53686: PUSH
53687: LD_VAR 0 2
53691: PPUSH
53692: CALL_OW 264
53696: PUSH
53697: LD_INT 14
53699: PUSH
53700: LD_INT 53
53702: PUSH
53703: EMPTY
53704: LIST
53705: LIST
53706: IN
53707: AND
53708: PUSH
53709: LD_VAR 0 4
53713: PPUSH
53714: LD_VAR 0 5
53718: PPUSH
53719: CALL_OW 488
53723: AND
53724: IFFALSE 53748
// CutTreeXYR ( unit , x , y , 12 ) ;
53726: LD_VAR 0 2
53730: PPUSH
53731: LD_VAR 0 4
53735: PPUSH
53736: LD_VAR 0 5
53740: PPUSH
53741: LD_INT 12
53743: PPUSH
53744: CALL 53939 0 4
// if cmd = 256 then
53748: LD_VAR 0 1
53752: PUSH
53753: LD_INT 256
53755: EQUAL
53756: IFFALSE 53777
// SetFactoryWaypoint ( unit , x , y ) ;
53758: LD_VAR 0 2
53762: PPUSH
53763: LD_VAR 0 4
53767: PPUSH
53768: LD_VAR 0 5
53772: PPUSH
53773: CALL 60374 0 3
// if cmd = 257 then
53777: LD_VAR 0 1
53781: PUSH
53782: LD_INT 257
53784: EQUAL
53785: IFFALSE 53806
// SetWarehouseGatheringPoint ( unit , x , y ) ;
53787: LD_VAR 0 2
53791: PPUSH
53792: LD_VAR 0 4
53796: PPUSH
53797: LD_VAR 0 5
53801: PPUSH
53802: CALL 60864 0 3
// if cmd = 258 then
53806: LD_VAR 0 1
53810: PUSH
53811: LD_INT 258
53813: EQUAL
53814: IFFALSE 53838
// BurnTreeXYR ( unit , x , y , 8 ) ;
53816: LD_VAR 0 2
53820: PPUSH
53821: LD_VAR 0 4
53825: PPUSH
53826: LD_VAR 0 5
53830: PPUSH
53831: LD_INT 8
53833: PPUSH
53834: CALL 54333 0 4
// end ;
53838: LD_VAR 0 6
53842: RET
// export function ComRadiation ( un ) ; var eff ; begin
53843: LD_INT 0
53845: PPUSH
53846: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
53847: LD_VAR 0 1
53851: PPUSH
53852: CALL_OW 264
53856: PUSH
53857: LD_INT 91
53859: NONEQUAL
53860: IFFALSE 53864
// exit ;
53862: GO 53934
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
53864: LD_INT 68
53866: PPUSH
53867: LD_VAR 0 1
53871: PPUSH
53872: CALL_OW 255
53876: PPUSH
53877: CALL_OW 321
53881: PUSH
53882: LD_INT 2
53884: EQUAL
53885: IFFALSE 53897
// eff := 50 else
53887: LD_ADDR_VAR 0 3
53891: PUSH
53892: LD_INT 50
53894: ST_TO_ADDR
53895: GO 53905
// eff := 25 ;
53897: LD_ADDR_VAR 0 3
53901: PUSH
53902: LD_INT 25
53904: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
53905: LD_VAR 0 1
53909: PPUSH
53910: CALL_OW 250
53914: PPUSH
53915: LD_VAR 0 1
53919: PPUSH
53920: CALL_OW 251
53924: PPUSH
53925: LD_VAR 0 3
53929: PPUSH
53930: CALL_OW 495
// end ;
53934: LD_VAR 0 2
53938: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
53939: LD_INT 0
53941: PPUSH
53942: PPUSH
53943: PPUSH
53944: PPUSH
53945: PPUSH
53946: PPUSH
53947: PPUSH
53948: PPUSH
53949: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
53950: LD_VAR 0 1
53954: PPUSH
53955: CALL_OW 302
53959: NOT
53960: PUSH
53961: LD_VAR 0 2
53965: PPUSH
53966: LD_VAR 0 3
53970: PPUSH
53971: CALL_OW 488
53975: NOT
53976: OR
53977: PUSH
53978: LD_VAR 0 4
53982: NOT
53983: OR
53984: IFFALSE 53988
// exit ;
53986: GO 54328
// list := [ ] ;
53988: LD_ADDR_VAR 0 13
53992: PUSH
53993: EMPTY
53994: ST_TO_ADDR
// if x - r < 0 then
53995: LD_VAR 0 2
53999: PUSH
54000: LD_VAR 0 4
54004: MINUS
54005: PUSH
54006: LD_INT 0
54008: LESS
54009: IFFALSE 54021
// min_x := 0 else
54011: LD_ADDR_VAR 0 7
54015: PUSH
54016: LD_INT 0
54018: ST_TO_ADDR
54019: GO 54037
// min_x := x - r ;
54021: LD_ADDR_VAR 0 7
54025: PUSH
54026: LD_VAR 0 2
54030: PUSH
54031: LD_VAR 0 4
54035: MINUS
54036: ST_TO_ADDR
// if y - r < 0 then
54037: LD_VAR 0 3
54041: PUSH
54042: LD_VAR 0 4
54046: MINUS
54047: PUSH
54048: LD_INT 0
54050: LESS
54051: IFFALSE 54063
// min_y := 0 else
54053: LD_ADDR_VAR 0 8
54057: PUSH
54058: LD_INT 0
54060: ST_TO_ADDR
54061: GO 54079
// min_y := y - r ;
54063: LD_ADDR_VAR 0 8
54067: PUSH
54068: LD_VAR 0 3
54072: PUSH
54073: LD_VAR 0 4
54077: MINUS
54078: ST_TO_ADDR
// max_x := x + r ;
54079: LD_ADDR_VAR 0 9
54083: PUSH
54084: LD_VAR 0 2
54088: PUSH
54089: LD_VAR 0 4
54093: PLUS
54094: ST_TO_ADDR
// max_y := y + r ;
54095: LD_ADDR_VAR 0 10
54099: PUSH
54100: LD_VAR 0 3
54104: PUSH
54105: LD_VAR 0 4
54109: PLUS
54110: ST_TO_ADDR
// for _x = min_x to max_x do
54111: LD_ADDR_VAR 0 11
54115: PUSH
54116: DOUBLE
54117: LD_VAR 0 7
54121: DEC
54122: ST_TO_ADDR
54123: LD_VAR 0 9
54127: PUSH
54128: FOR_TO
54129: IFFALSE 54246
// for _y = min_y to max_y do
54131: LD_ADDR_VAR 0 12
54135: PUSH
54136: DOUBLE
54137: LD_VAR 0 8
54141: DEC
54142: ST_TO_ADDR
54143: LD_VAR 0 10
54147: PUSH
54148: FOR_TO
54149: IFFALSE 54242
// begin if not ValidHex ( _x , _y ) then
54151: LD_VAR 0 11
54155: PPUSH
54156: LD_VAR 0 12
54160: PPUSH
54161: CALL_OW 488
54165: NOT
54166: IFFALSE 54170
// continue ;
54168: GO 54148
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
54170: LD_VAR 0 11
54174: PPUSH
54175: LD_VAR 0 12
54179: PPUSH
54180: CALL_OW 351
54184: PUSH
54185: LD_VAR 0 11
54189: PPUSH
54190: LD_VAR 0 12
54194: PPUSH
54195: CALL_OW 554
54199: AND
54200: IFFALSE 54240
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
54202: LD_ADDR_VAR 0 13
54206: PUSH
54207: LD_VAR 0 13
54211: PPUSH
54212: LD_VAR 0 13
54216: PUSH
54217: LD_INT 1
54219: PLUS
54220: PPUSH
54221: LD_VAR 0 11
54225: PUSH
54226: LD_VAR 0 12
54230: PUSH
54231: EMPTY
54232: LIST
54233: LIST
54234: PPUSH
54235: CALL_OW 2
54239: ST_TO_ADDR
// end ;
54240: GO 54148
54242: POP
54243: POP
54244: GO 54128
54246: POP
54247: POP
// if not list then
54248: LD_VAR 0 13
54252: NOT
54253: IFFALSE 54257
// exit ;
54255: GO 54328
// for i in list do
54257: LD_ADDR_VAR 0 6
54261: PUSH
54262: LD_VAR 0 13
54266: PUSH
54267: FOR_IN
54268: IFFALSE 54326
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
54270: LD_VAR 0 1
54274: PPUSH
54275: LD_STRING M
54277: PUSH
54278: LD_VAR 0 6
54282: PUSH
54283: LD_INT 1
54285: ARRAY
54286: PUSH
54287: LD_VAR 0 6
54291: PUSH
54292: LD_INT 2
54294: ARRAY
54295: PUSH
54296: LD_INT 0
54298: PUSH
54299: LD_INT 0
54301: PUSH
54302: LD_INT 0
54304: PUSH
54305: LD_INT 0
54307: PUSH
54308: EMPTY
54309: LIST
54310: LIST
54311: LIST
54312: LIST
54313: LIST
54314: LIST
54315: LIST
54316: PUSH
54317: EMPTY
54318: LIST
54319: PPUSH
54320: CALL_OW 447
54324: GO 54267
54326: POP
54327: POP
// end ;
54328: LD_VAR 0 5
54332: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
54333: LD_INT 0
54335: PPUSH
54336: PPUSH
54337: PPUSH
54338: PPUSH
54339: PPUSH
54340: PPUSH
54341: PPUSH
54342: PPUSH
54343: PPUSH
54344: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
54345: LD_VAR 0 1
54349: PPUSH
54350: CALL_OW 302
54354: NOT
54355: PUSH
54356: LD_VAR 0 2
54360: PPUSH
54361: LD_VAR 0 3
54365: PPUSH
54366: CALL_OW 488
54370: NOT
54371: OR
54372: PUSH
54373: LD_VAR 0 4
54377: NOT
54378: OR
54379: IFFALSE 54383
// exit ;
54381: GO 54896
// list := [ ] ;
54383: LD_ADDR_VAR 0 13
54387: PUSH
54388: EMPTY
54389: ST_TO_ADDR
// if x - r < 0 then
54390: LD_VAR 0 2
54394: PUSH
54395: LD_VAR 0 4
54399: MINUS
54400: PUSH
54401: LD_INT 0
54403: LESS
54404: IFFALSE 54416
// min_x := 0 else
54406: LD_ADDR_VAR 0 7
54410: PUSH
54411: LD_INT 0
54413: ST_TO_ADDR
54414: GO 54432
// min_x := x - r ;
54416: LD_ADDR_VAR 0 7
54420: PUSH
54421: LD_VAR 0 2
54425: PUSH
54426: LD_VAR 0 4
54430: MINUS
54431: ST_TO_ADDR
// if y - r < 0 then
54432: LD_VAR 0 3
54436: PUSH
54437: LD_VAR 0 4
54441: MINUS
54442: PUSH
54443: LD_INT 0
54445: LESS
54446: IFFALSE 54458
// min_y := 0 else
54448: LD_ADDR_VAR 0 8
54452: PUSH
54453: LD_INT 0
54455: ST_TO_ADDR
54456: GO 54474
// min_y := y - r ;
54458: LD_ADDR_VAR 0 8
54462: PUSH
54463: LD_VAR 0 3
54467: PUSH
54468: LD_VAR 0 4
54472: MINUS
54473: ST_TO_ADDR
// max_x := x + r ;
54474: LD_ADDR_VAR 0 9
54478: PUSH
54479: LD_VAR 0 2
54483: PUSH
54484: LD_VAR 0 4
54488: PLUS
54489: ST_TO_ADDR
// max_y := y + r ;
54490: LD_ADDR_VAR 0 10
54494: PUSH
54495: LD_VAR 0 3
54499: PUSH
54500: LD_VAR 0 4
54504: PLUS
54505: ST_TO_ADDR
// for _x = min_x to max_x do
54506: LD_ADDR_VAR 0 11
54510: PUSH
54511: DOUBLE
54512: LD_VAR 0 7
54516: DEC
54517: ST_TO_ADDR
54518: LD_VAR 0 9
54522: PUSH
54523: FOR_TO
54524: IFFALSE 54641
// for _y = min_y to max_y do
54526: LD_ADDR_VAR 0 12
54530: PUSH
54531: DOUBLE
54532: LD_VAR 0 8
54536: DEC
54537: ST_TO_ADDR
54538: LD_VAR 0 10
54542: PUSH
54543: FOR_TO
54544: IFFALSE 54637
// begin if not ValidHex ( _x , _y ) then
54546: LD_VAR 0 11
54550: PPUSH
54551: LD_VAR 0 12
54555: PPUSH
54556: CALL_OW 488
54560: NOT
54561: IFFALSE 54565
// continue ;
54563: GO 54543
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
54565: LD_VAR 0 11
54569: PPUSH
54570: LD_VAR 0 12
54574: PPUSH
54575: CALL_OW 351
54579: PUSH
54580: LD_VAR 0 11
54584: PPUSH
54585: LD_VAR 0 12
54589: PPUSH
54590: CALL_OW 554
54594: AND
54595: IFFALSE 54635
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
54597: LD_ADDR_VAR 0 13
54601: PUSH
54602: LD_VAR 0 13
54606: PPUSH
54607: LD_VAR 0 13
54611: PUSH
54612: LD_INT 1
54614: PLUS
54615: PPUSH
54616: LD_VAR 0 11
54620: PUSH
54621: LD_VAR 0 12
54625: PUSH
54626: EMPTY
54627: LIST
54628: LIST
54629: PPUSH
54630: CALL_OW 2
54634: ST_TO_ADDR
// end ;
54635: GO 54543
54637: POP
54638: POP
54639: GO 54523
54641: POP
54642: POP
// if not list then
54643: LD_VAR 0 13
54647: NOT
54648: IFFALSE 54652
// exit ;
54650: GO 54896
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
54652: LD_ADDR_VAR 0 13
54656: PUSH
54657: LD_VAR 0 1
54661: PPUSH
54662: LD_VAR 0 13
54666: PPUSH
54667: LD_INT 1
54669: PPUSH
54670: LD_INT 1
54672: PPUSH
54673: CALL 15260 0 4
54677: ST_TO_ADDR
// ComStop ( flame ) ;
54678: LD_VAR 0 1
54682: PPUSH
54683: CALL_OW 141
// for i in list do
54687: LD_ADDR_VAR 0 6
54691: PUSH
54692: LD_VAR 0 13
54696: PUSH
54697: FOR_IN
54698: IFFALSE 54729
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
54700: LD_VAR 0 1
54704: PPUSH
54705: LD_VAR 0 6
54709: PUSH
54710: LD_INT 1
54712: ARRAY
54713: PPUSH
54714: LD_VAR 0 6
54718: PUSH
54719: LD_INT 2
54721: ARRAY
54722: PPUSH
54723: CALL_OW 176
54727: GO 54697
54729: POP
54730: POP
// repeat wait ( 0 0$1 ) ;
54731: LD_INT 35
54733: PPUSH
54734: CALL_OW 67
// task := GetTaskList ( flame ) ;
54738: LD_ADDR_VAR 0 14
54742: PUSH
54743: LD_VAR 0 1
54747: PPUSH
54748: CALL_OW 437
54752: ST_TO_ADDR
// if not task then
54753: LD_VAR 0 14
54757: NOT
54758: IFFALSE 54762
// exit ;
54760: GO 54896
// if task [ 1 ] [ 1 ] <> | then
54762: LD_VAR 0 14
54766: PUSH
54767: LD_INT 1
54769: ARRAY
54770: PUSH
54771: LD_INT 1
54773: ARRAY
54774: PUSH
54775: LD_STRING |
54777: NONEQUAL
54778: IFFALSE 54782
// exit ;
54780: GO 54896
// _x := task [ 1 ] [ 2 ] ;
54782: LD_ADDR_VAR 0 11
54786: PUSH
54787: LD_VAR 0 14
54791: PUSH
54792: LD_INT 1
54794: ARRAY
54795: PUSH
54796: LD_INT 2
54798: ARRAY
54799: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
54800: LD_ADDR_VAR 0 12
54804: PUSH
54805: LD_VAR 0 14
54809: PUSH
54810: LD_INT 1
54812: ARRAY
54813: PUSH
54814: LD_INT 3
54816: ARRAY
54817: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
54818: LD_VAR 0 11
54822: PPUSH
54823: LD_VAR 0 12
54827: PPUSH
54828: CALL_OW 351
54832: NOT
54833: PUSH
54834: LD_VAR 0 11
54838: PPUSH
54839: LD_VAR 0 12
54843: PPUSH
54844: CALL_OW 554
54848: NOT
54849: OR
54850: IFFALSE 54884
// begin task := Delete ( task , 1 ) ;
54852: LD_ADDR_VAR 0 14
54856: PUSH
54857: LD_VAR 0 14
54861: PPUSH
54862: LD_INT 1
54864: PPUSH
54865: CALL_OW 3
54869: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
54870: LD_VAR 0 1
54874: PPUSH
54875: LD_VAR 0 14
54879: PPUSH
54880: CALL_OW 446
// end ; until not HasTask ( flame ) ;
54884: LD_VAR 0 1
54888: PPUSH
54889: CALL_OW 314
54893: NOT
54894: IFFALSE 54731
// end ;
54896: LD_VAR 0 5
54900: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
54901: LD_EXP 48
54905: NOT
54906: IFFALSE 54956
54908: GO 54910
54910: DISABLE
// begin initHack := true ;
54911: LD_ADDR_EXP 48
54915: PUSH
54916: LD_INT 1
54918: ST_TO_ADDR
// hackTanks := [ ] ;
54919: LD_ADDR_EXP 49
54923: PUSH
54924: EMPTY
54925: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
54926: LD_ADDR_EXP 50
54930: PUSH
54931: EMPTY
54932: ST_TO_ADDR
// hackLimit := 3 ;
54933: LD_ADDR_EXP 51
54937: PUSH
54938: LD_INT 3
54940: ST_TO_ADDR
// hackDist := 12 ;
54941: LD_ADDR_EXP 52
54945: PUSH
54946: LD_INT 12
54948: ST_TO_ADDR
// hackCounter := [ ] ;
54949: LD_ADDR_EXP 53
54953: PUSH
54954: EMPTY
54955: ST_TO_ADDR
// end ;
54956: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
54957: LD_EXP 48
54961: PUSH
54962: LD_INT 34
54964: PUSH
54965: LD_INT 99
54967: PUSH
54968: EMPTY
54969: LIST
54970: LIST
54971: PPUSH
54972: CALL_OW 69
54976: AND
54977: IFFALSE 55230
54979: GO 54981
54981: DISABLE
54982: LD_INT 0
54984: PPUSH
54985: PPUSH
// begin enable ;
54986: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
54987: LD_ADDR_VAR 0 1
54991: PUSH
54992: LD_INT 34
54994: PUSH
54995: LD_INT 99
54997: PUSH
54998: EMPTY
54999: LIST
55000: LIST
55001: PPUSH
55002: CALL_OW 69
55006: PUSH
55007: FOR_IN
55008: IFFALSE 55228
// begin if not i in hackTanks then
55010: LD_VAR 0 1
55014: PUSH
55015: LD_EXP 49
55019: IN
55020: NOT
55021: IFFALSE 55104
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
55023: LD_ADDR_EXP 49
55027: PUSH
55028: LD_EXP 49
55032: PPUSH
55033: LD_EXP 49
55037: PUSH
55038: LD_INT 1
55040: PLUS
55041: PPUSH
55042: LD_VAR 0 1
55046: PPUSH
55047: CALL_OW 1
55051: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
55052: LD_ADDR_EXP 50
55056: PUSH
55057: LD_EXP 50
55061: PPUSH
55062: LD_EXP 50
55066: PUSH
55067: LD_INT 1
55069: PLUS
55070: PPUSH
55071: EMPTY
55072: PPUSH
55073: CALL_OW 1
55077: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
55078: LD_ADDR_EXP 53
55082: PUSH
55083: LD_EXP 53
55087: PPUSH
55088: LD_EXP 53
55092: PUSH
55093: LD_INT 1
55095: PLUS
55096: PPUSH
55097: EMPTY
55098: PPUSH
55099: CALL_OW 1
55103: ST_TO_ADDR
// end ; if not IsOk ( i ) then
55104: LD_VAR 0 1
55108: PPUSH
55109: CALL_OW 302
55113: NOT
55114: IFFALSE 55127
// begin HackUnlinkAll ( i ) ;
55116: LD_VAR 0 1
55120: PPUSH
55121: CALL 55233 0 1
// continue ;
55125: GO 55007
// end ; HackCheckCapturedStatus ( i ) ;
55127: LD_VAR 0 1
55131: PPUSH
55132: CALL 55676 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
55136: LD_ADDR_VAR 0 2
55140: PUSH
55141: LD_INT 81
55143: PUSH
55144: LD_VAR 0 1
55148: PPUSH
55149: CALL_OW 255
55153: PUSH
55154: EMPTY
55155: LIST
55156: LIST
55157: PUSH
55158: LD_INT 33
55160: PUSH
55161: LD_INT 3
55163: PUSH
55164: EMPTY
55165: LIST
55166: LIST
55167: PUSH
55168: LD_INT 91
55170: PUSH
55171: LD_VAR 0 1
55175: PUSH
55176: LD_EXP 52
55180: PUSH
55181: EMPTY
55182: LIST
55183: LIST
55184: LIST
55185: PUSH
55186: LD_INT 50
55188: PUSH
55189: EMPTY
55190: LIST
55191: PUSH
55192: EMPTY
55193: LIST
55194: LIST
55195: LIST
55196: LIST
55197: PPUSH
55198: CALL_OW 69
55202: ST_TO_ADDR
// if not tmp then
55203: LD_VAR 0 2
55207: NOT
55208: IFFALSE 55212
// continue ;
55210: GO 55007
// HackLink ( i , tmp ) ;
55212: LD_VAR 0 1
55216: PPUSH
55217: LD_VAR 0 2
55221: PPUSH
55222: CALL 55369 0 2
// end ;
55226: GO 55007
55228: POP
55229: POP
// end ;
55230: PPOPN 2
55232: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
55233: LD_INT 0
55235: PPUSH
55236: PPUSH
55237: PPUSH
// if not hack in hackTanks then
55238: LD_VAR 0 1
55242: PUSH
55243: LD_EXP 49
55247: IN
55248: NOT
55249: IFFALSE 55253
// exit ;
55251: GO 55364
// index := GetElementIndex ( hackTanks , hack ) ;
55253: LD_ADDR_VAR 0 4
55257: PUSH
55258: LD_EXP 49
55262: PPUSH
55263: LD_VAR 0 1
55267: PPUSH
55268: CALL 14557 0 2
55272: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
55273: LD_EXP 50
55277: PUSH
55278: LD_VAR 0 4
55282: ARRAY
55283: IFFALSE 55364
// begin for i in hackTanksCaptured [ index ] do
55285: LD_ADDR_VAR 0 3
55289: PUSH
55290: LD_EXP 50
55294: PUSH
55295: LD_VAR 0 4
55299: ARRAY
55300: PUSH
55301: FOR_IN
55302: IFFALSE 55328
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
55304: LD_VAR 0 3
55308: PUSH
55309: LD_INT 1
55311: ARRAY
55312: PPUSH
55313: LD_VAR 0 3
55317: PUSH
55318: LD_INT 2
55320: ARRAY
55321: PPUSH
55322: CALL_OW 235
55326: GO 55301
55328: POP
55329: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
55330: LD_ADDR_EXP 50
55334: PUSH
55335: LD_EXP 50
55339: PPUSH
55340: LD_VAR 0 4
55344: PPUSH
55345: EMPTY
55346: PPUSH
55347: CALL_OW 1
55351: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
55352: LD_VAR 0 1
55356: PPUSH
55357: LD_INT 0
55359: PPUSH
55360: CALL_OW 505
// end ; end ;
55364: LD_VAR 0 2
55368: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
55369: LD_INT 0
55371: PPUSH
55372: PPUSH
55373: PPUSH
// if not hack in hackTanks or not vehicles then
55374: LD_VAR 0 1
55378: PUSH
55379: LD_EXP 49
55383: IN
55384: NOT
55385: PUSH
55386: LD_VAR 0 2
55390: NOT
55391: OR
55392: IFFALSE 55396
// exit ;
55394: GO 55671
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
55396: LD_ADDR_VAR 0 2
55400: PUSH
55401: LD_VAR 0 1
55405: PPUSH
55406: LD_VAR 0 2
55410: PPUSH
55411: LD_INT 1
55413: PPUSH
55414: LD_INT 1
55416: PPUSH
55417: CALL 15207 0 4
55421: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
55422: LD_ADDR_VAR 0 5
55426: PUSH
55427: LD_EXP 49
55431: PPUSH
55432: LD_VAR 0 1
55436: PPUSH
55437: CALL 14557 0 2
55441: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
55442: LD_EXP 50
55446: PUSH
55447: LD_VAR 0 5
55451: ARRAY
55452: PUSH
55453: LD_EXP 51
55457: LESS
55458: IFFALSE 55647
// begin for i := 1 to vehicles do
55460: LD_ADDR_VAR 0 4
55464: PUSH
55465: DOUBLE
55466: LD_INT 1
55468: DEC
55469: ST_TO_ADDR
55470: LD_VAR 0 2
55474: PUSH
55475: FOR_TO
55476: IFFALSE 55645
// begin if hackTanksCaptured [ index ] = hackLimit then
55478: LD_EXP 50
55482: PUSH
55483: LD_VAR 0 5
55487: ARRAY
55488: PUSH
55489: LD_EXP 51
55493: EQUAL
55494: IFFALSE 55498
// break ;
55496: GO 55645
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
55498: LD_ADDR_EXP 53
55502: PUSH
55503: LD_EXP 53
55507: PPUSH
55508: LD_VAR 0 5
55512: PPUSH
55513: LD_EXP 53
55517: PUSH
55518: LD_VAR 0 5
55522: ARRAY
55523: PUSH
55524: LD_INT 1
55526: PLUS
55527: PPUSH
55528: CALL_OW 1
55532: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
55533: LD_ADDR_EXP 50
55537: PUSH
55538: LD_EXP 50
55542: PPUSH
55543: LD_VAR 0 5
55547: PUSH
55548: LD_EXP 50
55552: PUSH
55553: LD_VAR 0 5
55557: ARRAY
55558: PUSH
55559: LD_INT 1
55561: PLUS
55562: PUSH
55563: EMPTY
55564: LIST
55565: LIST
55566: PPUSH
55567: LD_VAR 0 2
55571: PUSH
55572: LD_VAR 0 4
55576: ARRAY
55577: PUSH
55578: LD_VAR 0 2
55582: PUSH
55583: LD_VAR 0 4
55587: ARRAY
55588: PPUSH
55589: CALL_OW 255
55593: PUSH
55594: EMPTY
55595: LIST
55596: LIST
55597: PPUSH
55598: CALL 14772 0 3
55602: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
55603: LD_VAR 0 2
55607: PUSH
55608: LD_VAR 0 4
55612: ARRAY
55613: PPUSH
55614: LD_VAR 0 1
55618: PPUSH
55619: CALL_OW 255
55623: PPUSH
55624: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
55628: LD_VAR 0 2
55632: PUSH
55633: LD_VAR 0 4
55637: ARRAY
55638: PPUSH
55639: CALL_OW 141
// end ;
55643: GO 55475
55645: POP
55646: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
55647: LD_VAR 0 1
55651: PPUSH
55652: LD_EXP 50
55656: PUSH
55657: LD_VAR 0 5
55661: ARRAY
55662: PUSH
55663: LD_INT 0
55665: PLUS
55666: PPUSH
55667: CALL_OW 505
// end ;
55671: LD_VAR 0 3
55675: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
55676: LD_INT 0
55678: PPUSH
55679: PPUSH
55680: PPUSH
55681: PPUSH
// if not hack in hackTanks then
55682: LD_VAR 0 1
55686: PUSH
55687: LD_EXP 49
55691: IN
55692: NOT
55693: IFFALSE 55697
// exit ;
55695: GO 55937
// index := GetElementIndex ( hackTanks , hack ) ;
55697: LD_ADDR_VAR 0 4
55701: PUSH
55702: LD_EXP 49
55706: PPUSH
55707: LD_VAR 0 1
55711: PPUSH
55712: CALL 14557 0 2
55716: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
55717: LD_ADDR_VAR 0 3
55721: PUSH
55722: DOUBLE
55723: LD_EXP 50
55727: PUSH
55728: LD_VAR 0 4
55732: ARRAY
55733: INC
55734: ST_TO_ADDR
55735: LD_INT 1
55737: PUSH
55738: FOR_DOWNTO
55739: IFFALSE 55911
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
55741: LD_ADDR_VAR 0 5
55745: PUSH
55746: LD_EXP 50
55750: PUSH
55751: LD_VAR 0 4
55755: ARRAY
55756: PUSH
55757: LD_VAR 0 3
55761: ARRAY
55762: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
55763: LD_VAR 0 5
55767: PUSH
55768: LD_INT 1
55770: ARRAY
55771: PPUSH
55772: CALL_OW 302
55776: NOT
55777: PUSH
55778: LD_VAR 0 5
55782: PUSH
55783: LD_INT 1
55785: ARRAY
55786: PPUSH
55787: CALL_OW 255
55791: PUSH
55792: LD_VAR 0 1
55796: PPUSH
55797: CALL_OW 255
55801: NONEQUAL
55802: OR
55803: IFFALSE 55909
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
55805: LD_VAR 0 5
55809: PUSH
55810: LD_INT 1
55812: ARRAY
55813: PPUSH
55814: CALL_OW 305
55818: PUSH
55819: LD_VAR 0 5
55823: PUSH
55824: LD_INT 1
55826: ARRAY
55827: PPUSH
55828: CALL_OW 255
55832: PUSH
55833: LD_VAR 0 1
55837: PPUSH
55838: CALL_OW 255
55842: EQUAL
55843: AND
55844: IFFALSE 55868
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
55846: LD_VAR 0 5
55850: PUSH
55851: LD_INT 1
55853: ARRAY
55854: PPUSH
55855: LD_VAR 0 5
55859: PUSH
55860: LD_INT 2
55862: ARRAY
55863: PPUSH
55864: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
55868: LD_ADDR_EXP 50
55872: PUSH
55873: LD_EXP 50
55877: PPUSH
55878: LD_VAR 0 4
55882: PPUSH
55883: LD_EXP 50
55887: PUSH
55888: LD_VAR 0 4
55892: ARRAY
55893: PPUSH
55894: LD_VAR 0 3
55898: PPUSH
55899: CALL_OW 3
55903: PPUSH
55904: CALL_OW 1
55908: ST_TO_ADDR
// end ; end ;
55909: GO 55738
55911: POP
55912: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
55913: LD_VAR 0 1
55917: PPUSH
55918: LD_EXP 50
55922: PUSH
55923: LD_VAR 0 4
55927: ARRAY
55928: PUSH
55929: LD_INT 0
55931: PLUS
55932: PPUSH
55933: CALL_OW 505
// end ;
55937: LD_VAR 0 2
55941: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
55942: LD_INT 0
55944: PPUSH
55945: PPUSH
55946: PPUSH
55947: PPUSH
// if not hack in hackTanks then
55948: LD_VAR 0 1
55952: PUSH
55953: LD_EXP 49
55957: IN
55958: NOT
55959: IFFALSE 55963
// exit ;
55961: GO 56048
// index := GetElementIndex ( hackTanks , hack ) ;
55963: LD_ADDR_VAR 0 5
55967: PUSH
55968: LD_EXP 49
55972: PPUSH
55973: LD_VAR 0 1
55977: PPUSH
55978: CALL 14557 0 2
55982: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
55983: LD_ADDR_VAR 0 4
55987: PUSH
55988: DOUBLE
55989: LD_INT 1
55991: DEC
55992: ST_TO_ADDR
55993: LD_EXP 50
55997: PUSH
55998: LD_VAR 0 5
56002: ARRAY
56003: PUSH
56004: FOR_TO
56005: IFFALSE 56046
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
56007: LD_EXP 50
56011: PUSH
56012: LD_VAR 0 5
56016: ARRAY
56017: PUSH
56018: LD_VAR 0 4
56022: ARRAY
56023: PUSH
56024: LD_INT 1
56026: ARRAY
56027: PUSH
56028: LD_VAR 0 2
56032: EQUAL
56033: IFFALSE 56044
// KillUnit ( vehicle ) ;
56035: LD_VAR 0 2
56039: PPUSH
56040: CALL_OW 66
56044: GO 56004
56046: POP
56047: POP
// end ;
56048: LD_VAR 0 3
56052: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
56053: LD_EXP 54
56057: NOT
56058: IFFALSE 56093
56060: GO 56062
56062: DISABLE
// begin initMiner := true ;
56063: LD_ADDR_EXP 54
56067: PUSH
56068: LD_INT 1
56070: ST_TO_ADDR
// minersList := [ ] ;
56071: LD_ADDR_EXP 55
56075: PUSH
56076: EMPTY
56077: ST_TO_ADDR
// minerMinesList := [ ] ;
56078: LD_ADDR_EXP 56
56082: PUSH
56083: EMPTY
56084: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
56085: LD_ADDR_EXP 57
56089: PUSH
56090: LD_INT 5
56092: ST_TO_ADDR
// end ;
56093: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
56094: LD_EXP 54
56098: PUSH
56099: LD_INT 34
56101: PUSH
56102: LD_INT 81
56104: PUSH
56105: EMPTY
56106: LIST
56107: LIST
56108: PPUSH
56109: CALL_OW 69
56113: AND
56114: IFFALSE 56575
56116: GO 56118
56118: DISABLE
56119: LD_INT 0
56121: PPUSH
56122: PPUSH
56123: PPUSH
56124: PPUSH
// begin enable ;
56125: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
56126: LD_ADDR_VAR 0 1
56130: PUSH
56131: LD_INT 34
56133: PUSH
56134: LD_INT 81
56136: PUSH
56137: EMPTY
56138: LIST
56139: LIST
56140: PPUSH
56141: CALL_OW 69
56145: PUSH
56146: FOR_IN
56147: IFFALSE 56219
// begin if not i in minersList then
56149: LD_VAR 0 1
56153: PUSH
56154: LD_EXP 55
56158: IN
56159: NOT
56160: IFFALSE 56217
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
56162: LD_ADDR_EXP 55
56166: PUSH
56167: LD_EXP 55
56171: PPUSH
56172: LD_EXP 55
56176: PUSH
56177: LD_INT 1
56179: PLUS
56180: PPUSH
56181: LD_VAR 0 1
56185: PPUSH
56186: CALL_OW 1
56190: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
56191: LD_ADDR_EXP 56
56195: PUSH
56196: LD_EXP 56
56200: PPUSH
56201: LD_EXP 56
56205: PUSH
56206: LD_INT 1
56208: PLUS
56209: PPUSH
56210: EMPTY
56211: PPUSH
56212: CALL_OW 1
56216: ST_TO_ADDR
// end end ;
56217: GO 56146
56219: POP
56220: POP
// for i := minerMinesList downto 1 do
56221: LD_ADDR_VAR 0 1
56225: PUSH
56226: DOUBLE
56227: LD_EXP 56
56231: INC
56232: ST_TO_ADDR
56233: LD_INT 1
56235: PUSH
56236: FOR_DOWNTO
56237: IFFALSE 56573
// begin if IsLive ( minersList [ i ] ) then
56239: LD_EXP 55
56243: PUSH
56244: LD_VAR 0 1
56248: ARRAY
56249: PPUSH
56250: CALL_OW 300
56254: IFFALSE 56282
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
56256: LD_EXP 55
56260: PUSH
56261: LD_VAR 0 1
56265: ARRAY
56266: PPUSH
56267: LD_EXP 56
56271: PUSH
56272: LD_VAR 0 1
56276: ARRAY
56277: PPUSH
56278: CALL_OW 505
// if not minerMinesList [ i ] then
56282: LD_EXP 56
56286: PUSH
56287: LD_VAR 0 1
56291: ARRAY
56292: NOT
56293: IFFALSE 56297
// continue ;
56295: GO 56236
// for j := minerMinesList [ i ] downto 1 do
56297: LD_ADDR_VAR 0 2
56301: PUSH
56302: DOUBLE
56303: LD_EXP 56
56307: PUSH
56308: LD_VAR 0 1
56312: ARRAY
56313: INC
56314: ST_TO_ADDR
56315: LD_INT 1
56317: PUSH
56318: FOR_DOWNTO
56319: IFFALSE 56569
// begin side := GetSide ( minersList [ i ] ) ;
56321: LD_ADDR_VAR 0 3
56325: PUSH
56326: LD_EXP 55
56330: PUSH
56331: LD_VAR 0 1
56335: ARRAY
56336: PPUSH
56337: CALL_OW 255
56341: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
56342: LD_ADDR_VAR 0 4
56346: PUSH
56347: LD_EXP 56
56351: PUSH
56352: LD_VAR 0 1
56356: ARRAY
56357: PUSH
56358: LD_VAR 0 2
56362: ARRAY
56363: PUSH
56364: LD_INT 1
56366: ARRAY
56367: PPUSH
56368: LD_EXP 56
56372: PUSH
56373: LD_VAR 0 1
56377: ARRAY
56378: PUSH
56379: LD_VAR 0 2
56383: ARRAY
56384: PUSH
56385: LD_INT 2
56387: ARRAY
56388: PPUSH
56389: CALL_OW 428
56393: ST_TO_ADDR
// if not tmp then
56394: LD_VAR 0 4
56398: NOT
56399: IFFALSE 56403
// continue ;
56401: GO 56318
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
56403: LD_VAR 0 4
56407: PUSH
56408: LD_INT 81
56410: PUSH
56411: LD_VAR 0 3
56415: PUSH
56416: EMPTY
56417: LIST
56418: LIST
56419: PPUSH
56420: CALL_OW 69
56424: IN
56425: PUSH
56426: LD_EXP 56
56430: PUSH
56431: LD_VAR 0 1
56435: ARRAY
56436: PUSH
56437: LD_VAR 0 2
56441: ARRAY
56442: PUSH
56443: LD_INT 1
56445: ARRAY
56446: PPUSH
56447: LD_EXP 56
56451: PUSH
56452: LD_VAR 0 1
56456: ARRAY
56457: PUSH
56458: LD_VAR 0 2
56462: ARRAY
56463: PUSH
56464: LD_INT 2
56466: ARRAY
56467: PPUSH
56468: CALL_OW 458
56472: AND
56473: IFFALSE 56567
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
56475: LD_EXP 56
56479: PUSH
56480: LD_VAR 0 1
56484: ARRAY
56485: PUSH
56486: LD_VAR 0 2
56490: ARRAY
56491: PUSH
56492: LD_INT 1
56494: ARRAY
56495: PPUSH
56496: LD_EXP 56
56500: PUSH
56501: LD_VAR 0 1
56505: ARRAY
56506: PUSH
56507: LD_VAR 0 2
56511: ARRAY
56512: PUSH
56513: LD_INT 2
56515: ARRAY
56516: PPUSH
56517: LD_VAR 0 3
56521: PPUSH
56522: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
56526: LD_ADDR_EXP 56
56530: PUSH
56531: LD_EXP 56
56535: PPUSH
56536: LD_VAR 0 1
56540: PPUSH
56541: LD_EXP 56
56545: PUSH
56546: LD_VAR 0 1
56550: ARRAY
56551: PPUSH
56552: LD_VAR 0 2
56556: PPUSH
56557: CALL_OW 3
56561: PPUSH
56562: CALL_OW 1
56566: ST_TO_ADDR
// end ; end ;
56567: GO 56318
56569: POP
56570: POP
// end ;
56571: GO 56236
56573: POP
56574: POP
// end ;
56575: PPOPN 4
56577: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
56578: LD_INT 0
56580: PPUSH
56581: PPUSH
// result := false ;
56582: LD_ADDR_VAR 0 4
56586: PUSH
56587: LD_INT 0
56589: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
56590: LD_VAR 0 1
56594: PPUSH
56595: CALL_OW 264
56599: PUSH
56600: LD_INT 81
56602: EQUAL
56603: NOT
56604: IFFALSE 56608
// exit ;
56606: GO 56848
// index := GetElementIndex ( minersList , unit ) ;
56608: LD_ADDR_VAR 0 5
56612: PUSH
56613: LD_EXP 55
56617: PPUSH
56618: LD_VAR 0 1
56622: PPUSH
56623: CALL 14557 0 2
56627: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
56628: LD_EXP 56
56632: PUSH
56633: LD_VAR 0 5
56637: ARRAY
56638: PUSH
56639: LD_EXP 57
56643: GREATEREQUAL
56644: IFFALSE 56648
// exit ;
56646: GO 56848
// ComMoveXY ( unit , x , y ) ;
56648: LD_VAR 0 1
56652: PPUSH
56653: LD_VAR 0 2
56657: PPUSH
56658: LD_VAR 0 3
56662: PPUSH
56663: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
56667: LD_INT 35
56669: PPUSH
56670: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
56674: LD_VAR 0 1
56678: PPUSH
56679: LD_VAR 0 2
56683: PPUSH
56684: LD_VAR 0 3
56688: PPUSH
56689: CALL 46318 0 3
56693: NOT
56694: PUSH
56695: LD_VAR 0 1
56699: PPUSH
56700: CALL_OW 314
56704: AND
56705: IFFALSE 56709
// exit ;
56707: GO 56848
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
56709: LD_VAR 0 2
56713: PPUSH
56714: LD_VAR 0 3
56718: PPUSH
56719: CALL_OW 428
56723: PUSH
56724: LD_VAR 0 1
56728: EQUAL
56729: PUSH
56730: LD_VAR 0 1
56734: PPUSH
56735: CALL_OW 314
56739: NOT
56740: AND
56741: IFFALSE 56667
// PlaySoundXY ( x , y , PlantMine ) ;
56743: LD_VAR 0 2
56747: PPUSH
56748: LD_VAR 0 3
56752: PPUSH
56753: LD_STRING PlantMine
56755: PPUSH
56756: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
56760: LD_VAR 0 2
56764: PPUSH
56765: LD_VAR 0 3
56769: PPUSH
56770: LD_VAR 0 1
56774: PPUSH
56775: CALL_OW 255
56779: PPUSH
56780: LD_INT 0
56782: PPUSH
56783: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
56787: LD_ADDR_EXP 56
56791: PUSH
56792: LD_EXP 56
56796: PPUSH
56797: LD_VAR 0 5
56801: PUSH
56802: LD_EXP 56
56806: PUSH
56807: LD_VAR 0 5
56811: ARRAY
56812: PUSH
56813: LD_INT 1
56815: PLUS
56816: PUSH
56817: EMPTY
56818: LIST
56819: LIST
56820: PPUSH
56821: LD_VAR 0 2
56825: PUSH
56826: LD_VAR 0 3
56830: PUSH
56831: EMPTY
56832: LIST
56833: LIST
56834: PPUSH
56835: CALL 14772 0 3
56839: ST_TO_ADDR
// result := true ;
56840: LD_ADDR_VAR 0 4
56844: PUSH
56845: LD_INT 1
56847: ST_TO_ADDR
// end ;
56848: LD_VAR 0 4
56852: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
56853: LD_INT 0
56855: PPUSH
56856: PPUSH
56857: PPUSH
// if not unit in minersList then
56858: LD_VAR 0 1
56862: PUSH
56863: LD_EXP 55
56867: IN
56868: NOT
56869: IFFALSE 56873
// exit ;
56871: GO 57265
// index := GetElementIndex ( minersList , unit ) ;
56873: LD_ADDR_VAR 0 6
56877: PUSH
56878: LD_EXP 55
56882: PPUSH
56883: LD_VAR 0 1
56887: PPUSH
56888: CALL 14557 0 2
56892: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
56893: LD_ADDR_VAR 0 5
56897: PUSH
56898: DOUBLE
56899: LD_EXP 56
56903: PUSH
56904: LD_VAR 0 6
56908: ARRAY
56909: INC
56910: ST_TO_ADDR
56911: LD_INT 1
56913: PUSH
56914: FOR_DOWNTO
56915: IFFALSE 57076
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
56917: LD_EXP 56
56921: PUSH
56922: LD_VAR 0 6
56926: ARRAY
56927: PUSH
56928: LD_VAR 0 5
56932: ARRAY
56933: PUSH
56934: LD_INT 1
56936: ARRAY
56937: PUSH
56938: LD_VAR 0 2
56942: EQUAL
56943: PUSH
56944: LD_EXP 56
56948: PUSH
56949: LD_VAR 0 6
56953: ARRAY
56954: PUSH
56955: LD_VAR 0 5
56959: ARRAY
56960: PUSH
56961: LD_INT 2
56963: ARRAY
56964: PUSH
56965: LD_VAR 0 3
56969: EQUAL
56970: AND
56971: IFFALSE 57074
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
56973: LD_EXP 56
56977: PUSH
56978: LD_VAR 0 6
56982: ARRAY
56983: PUSH
56984: LD_VAR 0 5
56988: ARRAY
56989: PUSH
56990: LD_INT 1
56992: ARRAY
56993: PPUSH
56994: LD_EXP 56
56998: PUSH
56999: LD_VAR 0 6
57003: ARRAY
57004: PUSH
57005: LD_VAR 0 5
57009: ARRAY
57010: PUSH
57011: LD_INT 2
57013: ARRAY
57014: PPUSH
57015: LD_VAR 0 1
57019: PPUSH
57020: CALL_OW 255
57024: PPUSH
57025: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
57029: LD_ADDR_EXP 56
57033: PUSH
57034: LD_EXP 56
57038: PPUSH
57039: LD_VAR 0 6
57043: PPUSH
57044: LD_EXP 56
57048: PUSH
57049: LD_VAR 0 6
57053: ARRAY
57054: PPUSH
57055: LD_VAR 0 5
57059: PPUSH
57060: CALL_OW 3
57064: PPUSH
57065: CALL_OW 1
57069: ST_TO_ADDR
// exit ;
57070: POP
57071: POP
57072: GO 57265
// end ; end ;
57074: GO 56914
57076: POP
57077: POP
// for i := minerMinesList [ index ] downto 1 do
57078: LD_ADDR_VAR 0 5
57082: PUSH
57083: DOUBLE
57084: LD_EXP 56
57088: PUSH
57089: LD_VAR 0 6
57093: ARRAY
57094: INC
57095: ST_TO_ADDR
57096: LD_INT 1
57098: PUSH
57099: FOR_DOWNTO
57100: IFFALSE 57263
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
57102: LD_EXP 56
57106: PUSH
57107: LD_VAR 0 6
57111: ARRAY
57112: PUSH
57113: LD_VAR 0 5
57117: ARRAY
57118: PUSH
57119: LD_INT 1
57121: ARRAY
57122: PPUSH
57123: LD_EXP 56
57127: PUSH
57128: LD_VAR 0 6
57132: ARRAY
57133: PUSH
57134: LD_VAR 0 5
57138: ARRAY
57139: PUSH
57140: LD_INT 2
57142: ARRAY
57143: PPUSH
57144: LD_VAR 0 2
57148: PPUSH
57149: LD_VAR 0 3
57153: PPUSH
57154: CALL_OW 298
57158: PUSH
57159: LD_INT 6
57161: LESS
57162: IFFALSE 57261
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
57164: LD_EXP 56
57168: PUSH
57169: LD_VAR 0 6
57173: ARRAY
57174: PUSH
57175: LD_VAR 0 5
57179: ARRAY
57180: PUSH
57181: LD_INT 1
57183: ARRAY
57184: PPUSH
57185: LD_EXP 56
57189: PUSH
57190: LD_VAR 0 6
57194: ARRAY
57195: PUSH
57196: LD_VAR 0 5
57200: ARRAY
57201: PUSH
57202: LD_INT 2
57204: ARRAY
57205: PPUSH
57206: LD_VAR 0 1
57210: PPUSH
57211: CALL_OW 255
57215: PPUSH
57216: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
57220: LD_ADDR_EXP 56
57224: PUSH
57225: LD_EXP 56
57229: PPUSH
57230: LD_VAR 0 6
57234: PPUSH
57235: LD_EXP 56
57239: PUSH
57240: LD_VAR 0 6
57244: ARRAY
57245: PPUSH
57246: LD_VAR 0 5
57250: PPUSH
57251: CALL_OW 3
57255: PPUSH
57256: CALL_OW 1
57260: ST_TO_ADDR
// end ; end ;
57261: GO 57099
57263: POP
57264: POP
// end ;
57265: LD_VAR 0 4
57269: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
57270: LD_INT 0
57272: PPUSH
57273: PPUSH
57274: PPUSH
57275: PPUSH
57276: PPUSH
57277: PPUSH
57278: PPUSH
57279: PPUSH
57280: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
57281: LD_VAR 0 1
57285: PPUSH
57286: CALL_OW 264
57290: PUSH
57291: LD_INT 81
57293: EQUAL
57294: NOT
57295: PUSH
57296: LD_VAR 0 1
57300: PUSH
57301: LD_EXP 55
57305: IN
57306: NOT
57307: OR
57308: IFFALSE 57312
// exit ;
57310: GO 57634
// index := GetElementIndex ( minersList , unit ) ;
57312: LD_ADDR_VAR 0 6
57316: PUSH
57317: LD_EXP 55
57321: PPUSH
57322: LD_VAR 0 1
57326: PPUSH
57327: CALL 14557 0 2
57331: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
57332: LD_ADDR_VAR 0 8
57336: PUSH
57337: LD_EXP 57
57341: PUSH
57342: LD_EXP 56
57346: PUSH
57347: LD_VAR 0 6
57351: ARRAY
57352: MINUS
57353: ST_TO_ADDR
// if not minesFreeAmount then
57354: LD_VAR 0 8
57358: NOT
57359: IFFALSE 57363
// exit ;
57361: GO 57634
// tmp := [ ] ;
57363: LD_ADDR_VAR 0 7
57367: PUSH
57368: EMPTY
57369: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
57370: LD_ADDR_VAR 0 5
57374: PUSH
57375: DOUBLE
57376: LD_INT 1
57378: DEC
57379: ST_TO_ADDR
57380: LD_VAR 0 8
57384: PUSH
57385: FOR_TO
57386: IFFALSE 57581
// begin _d := rand ( 0 , 5 ) ;
57388: LD_ADDR_VAR 0 11
57392: PUSH
57393: LD_INT 0
57395: PPUSH
57396: LD_INT 5
57398: PPUSH
57399: CALL_OW 12
57403: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
57404: LD_ADDR_VAR 0 12
57408: PUSH
57409: LD_INT 2
57411: PPUSH
57412: LD_INT 6
57414: PPUSH
57415: CALL_OW 12
57419: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
57420: LD_ADDR_VAR 0 9
57424: PUSH
57425: LD_VAR 0 2
57429: PPUSH
57430: LD_VAR 0 11
57434: PPUSH
57435: LD_VAR 0 12
57439: PPUSH
57440: CALL_OW 272
57444: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
57445: LD_ADDR_VAR 0 10
57449: PUSH
57450: LD_VAR 0 3
57454: PPUSH
57455: LD_VAR 0 11
57459: PPUSH
57460: LD_VAR 0 12
57464: PPUSH
57465: CALL_OW 273
57469: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
57470: LD_VAR 0 9
57474: PPUSH
57475: LD_VAR 0 10
57479: PPUSH
57480: CALL_OW 488
57484: PUSH
57485: LD_VAR 0 9
57489: PUSH
57490: LD_VAR 0 10
57494: PUSH
57495: EMPTY
57496: LIST
57497: LIST
57498: PUSH
57499: LD_VAR 0 7
57503: IN
57504: NOT
57505: AND
57506: PUSH
57507: LD_VAR 0 9
57511: PPUSH
57512: LD_VAR 0 10
57516: PPUSH
57517: CALL_OW 458
57521: NOT
57522: AND
57523: IFFALSE 57565
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
57525: LD_ADDR_VAR 0 7
57529: PUSH
57530: LD_VAR 0 7
57534: PPUSH
57535: LD_VAR 0 7
57539: PUSH
57540: LD_INT 1
57542: PLUS
57543: PPUSH
57544: LD_VAR 0 9
57548: PUSH
57549: LD_VAR 0 10
57553: PUSH
57554: EMPTY
57555: LIST
57556: LIST
57557: PPUSH
57558: CALL_OW 1
57562: ST_TO_ADDR
57563: GO 57579
// i := i - 1 ;
57565: LD_ADDR_VAR 0 5
57569: PUSH
57570: LD_VAR 0 5
57574: PUSH
57575: LD_INT 1
57577: MINUS
57578: ST_TO_ADDR
// end ;
57579: GO 57385
57581: POP
57582: POP
// for i in tmp do
57583: LD_ADDR_VAR 0 5
57587: PUSH
57588: LD_VAR 0 7
57592: PUSH
57593: FOR_IN
57594: IFFALSE 57632
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
57596: LD_VAR 0 1
57600: PPUSH
57601: LD_VAR 0 5
57605: PUSH
57606: LD_INT 1
57608: ARRAY
57609: PPUSH
57610: LD_VAR 0 5
57614: PUSH
57615: LD_INT 2
57617: ARRAY
57618: PPUSH
57619: CALL 56578 0 3
57623: NOT
57624: IFFALSE 57630
// exit ;
57626: POP
57627: POP
57628: GO 57634
57630: GO 57593
57632: POP
57633: POP
// end ;
57634: LD_VAR 0 4
57638: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
57639: LD_INT 0
57641: PPUSH
57642: PPUSH
57643: PPUSH
57644: PPUSH
57645: PPUSH
57646: PPUSH
57647: PPUSH
57648: PPUSH
57649: PPUSH
// if GetClass ( unit ) <> class_sniper then
57650: LD_VAR 0 1
57654: PPUSH
57655: CALL_OW 257
57659: PUSH
57660: LD_INT 5
57662: NONEQUAL
57663: IFFALSE 57667
// exit ;
57665: GO 58133
// dist := 8 ;
57667: LD_ADDR_VAR 0 5
57671: PUSH
57672: LD_INT 8
57674: ST_TO_ADDR
// viewRange := 12 ;
57675: LD_ADDR_VAR 0 8
57679: PUSH
57680: LD_INT 12
57682: ST_TO_ADDR
// side := GetSide ( unit ) ;
57683: LD_ADDR_VAR 0 6
57687: PUSH
57688: LD_VAR 0 1
57692: PPUSH
57693: CALL_OW 255
57697: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
57698: LD_INT 61
57700: PPUSH
57701: LD_VAR 0 6
57705: PPUSH
57706: CALL_OW 321
57710: PUSH
57711: LD_INT 2
57713: EQUAL
57714: IFFALSE 57724
// viewRange := 16 ;
57716: LD_ADDR_VAR 0 8
57720: PUSH
57721: LD_INT 16
57723: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
57724: LD_VAR 0 1
57728: PPUSH
57729: LD_VAR 0 2
57733: PPUSH
57734: LD_VAR 0 3
57738: PPUSH
57739: CALL_OW 297
57743: PUSH
57744: LD_VAR 0 5
57748: GREATER
57749: IFFALSE 57828
// begin ComMoveXY ( unit , x , y ) ;
57751: LD_VAR 0 1
57755: PPUSH
57756: LD_VAR 0 2
57760: PPUSH
57761: LD_VAR 0 3
57765: PPUSH
57766: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
57770: LD_INT 35
57772: PPUSH
57773: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
57777: LD_VAR 0 1
57781: PPUSH
57782: LD_VAR 0 2
57786: PPUSH
57787: LD_VAR 0 3
57791: PPUSH
57792: CALL 46318 0 3
57796: NOT
57797: IFFALSE 57801
// exit ;
57799: GO 58133
// until GetDistUnitXY ( unit , x , y ) < dist ;
57801: LD_VAR 0 1
57805: PPUSH
57806: LD_VAR 0 2
57810: PPUSH
57811: LD_VAR 0 3
57815: PPUSH
57816: CALL_OW 297
57820: PUSH
57821: LD_VAR 0 5
57825: LESS
57826: IFFALSE 57770
// end ; ComTurnXY ( unit , x , y ) ;
57828: LD_VAR 0 1
57832: PPUSH
57833: LD_VAR 0 2
57837: PPUSH
57838: LD_VAR 0 3
57842: PPUSH
57843: CALL_OW 118
// repeat if Multiplayer then
57847: LD_OWVAR 4
57851: IFFALSE 57862
// wait ( 35 ) else
57853: LD_INT 35
57855: PPUSH
57856: CALL_OW 67
57860: GO 57869
// wait ( 5 ) ;
57862: LD_INT 5
57864: PPUSH
57865: CALL_OW 67
// _d := GetDir ( unit ) ;
57869: LD_ADDR_VAR 0 11
57873: PUSH
57874: LD_VAR 0 1
57878: PPUSH
57879: CALL_OW 254
57883: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
57884: LD_ADDR_VAR 0 7
57888: PUSH
57889: LD_VAR 0 1
57893: PPUSH
57894: CALL_OW 250
57898: PPUSH
57899: LD_VAR 0 1
57903: PPUSH
57904: CALL_OW 251
57908: PPUSH
57909: LD_VAR 0 2
57913: PPUSH
57914: LD_VAR 0 3
57918: PPUSH
57919: CALL 48926 0 4
57923: ST_TO_ADDR
// until dir = _d ;
57924: LD_VAR 0 7
57928: PUSH
57929: LD_VAR 0 11
57933: EQUAL
57934: IFFALSE 57847
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
57936: LD_ADDR_VAR 0 9
57940: PUSH
57941: LD_VAR 0 1
57945: PPUSH
57946: CALL_OW 250
57950: PPUSH
57951: LD_VAR 0 7
57955: PPUSH
57956: LD_VAR 0 5
57960: PPUSH
57961: CALL_OW 272
57965: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
57966: LD_ADDR_VAR 0 10
57970: PUSH
57971: LD_VAR 0 1
57975: PPUSH
57976: CALL_OW 251
57980: PPUSH
57981: LD_VAR 0 7
57985: PPUSH
57986: LD_VAR 0 5
57990: PPUSH
57991: CALL_OW 273
57995: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
57996: LD_VAR 0 9
58000: PPUSH
58001: LD_VAR 0 10
58005: PPUSH
58006: CALL_OW 488
58010: NOT
58011: IFFALSE 58015
// exit ;
58013: GO 58133
// ComAnimCustom ( unit , 1 ) ;
58015: LD_VAR 0 1
58019: PPUSH
58020: LD_INT 1
58022: PPUSH
58023: CALL_OW 592
// p := 0 ;
58027: LD_ADDR_VAR 0 12
58031: PUSH
58032: LD_INT 0
58034: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
58035: LD_VAR 0 9
58039: PPUSH
58040: LD_VAR 0 10
58044: PPUSH
58045: LD_VAR 0 6
58049: PPUSH
58050: LD_VAR 0 8
58054: PPUSH
58055: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
58059: LD_INT 35
58061: PPUSH
58062: CALL_OW 67
// p := Inc ( p ) ;
58066: LD_ADDR_VAR 0 12
58070: PUSH
58071: LD_VAR 0 12
58075: PPUSH
58076: CALL 48882 0 1
58080: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
58081: LD_VAR 0 12
58085: PUSH
58086: LD_INT 3
58088: EQUAL
58089: PUSH
58090: LD_VAR 0 1
58094: PPUSH
58095: CALL_OW 302
58099: NOT
58100: OR
58101: PUSH
58102: LD_VAR 0 1
58106: PPUSH
58107: CALL_OW 301
58111: OR
58112: IFFALSE 58059
// RemoveSeeing ( _x , _y , side ) ;
58114: LD_VAR 0 9
58118: PPUSH
58119: LD_VAR 0 10
58123: PPUSH
58124: LD_VAR 0 6
58128: PPUSH
58129: CALL_OW 331
// end ; end_of_file
58133: LD_VAR 0 4
58137: RET
// export mpKingPoints ; every 0 0$1 trigger mpGameActive marked GameTypeKing do var i , j , tmp ;
58138: LD_EXP 39
58142: IFFALSE 58483
58144: GO 58146
58146: DISABLE
58147: LD_INT 0
58149: PPUSH
58150: PPUSH
58151: PPUSH
// begin mpKingPoints := [ ] ;
58152: LD_ADDR_EXP 58
58156: PUSH
58157: EMPTY
58158: ST_TO_ADDR
// if mpTeamGame then
58159: LD_EXP 11
58163: IFFALSE 58217
// begin for i := 1 to Count ( mpTeams ) do
58165: LD_ADDR_VAR 0 1
58169: PUSH
58170: DOUBLE
58171: LD_INT 1
58173: DEC
58174: ST_TO_ADDR
58175: LD_EXP 10
58179: PPUSH
58180: CALL 11912 0 1
58184: PUSH
58185: FOR_TO
58186: IFFALSE 58213
// mpKingPoints := Replace ( mpKingPoints , i , 0 ) ;
58188: LD_ADDR_EXP 58
58192: PUSH
58193: LD_EXP 58
58197: PPUSH
58198: LD_VAR 0 1
58202: PPUSH
58203: LD_INT 0
58205: PPUSH
58206: CALL_OW 1
58210: ST_TO_ADDR
58211: GO 58185
58213: POP
58214: POP
// end else
58215: GO 58260
// begin for i := 1 to 8 do
58217: LD_ADDR_VAR 0 1
58221: PUSH
58222: DOUBLE
58223: LD_INT 1
58225: DEC
58226: ST_TO_ADDR
58227: LD_INT 8
58229: PUSH
58230: FOR_TO
58231: IFFALSE 58258
// mpKingPoints := Replace ( mpKingPoints , i , 0 ) ;
58233: LD_ADDR_EXP 58
58237: PUSH
58238: LD_EXP 58
58242: PPUSH
58243: LD_VAR 0 1
58247: PPUSH
58248: LD_INT 0
58250: PPUSH
58251: CALL_OW 1
58255: ST_TO_ADDR
58256: GO 58230
58258: POP
58259: POP
// end ; tmp := AreaToList ( kingCamArea , 0 ) ;
58260: LD_ADDR_VAR 0 3
58264: PUSH
58265: LD_EXP 2
58269: PPUSH
58270: LD_INT 0
58272: PPUSH
58273: CALL_OW 517
58277: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
58278: LD_ADDR_VAR 0 1
58282: PUSH
58283: DOUBLE
58284: LD_INT 1
58286: DEC
58287: ST_TO_ADDR
58288: LD_VAR 0 3
58292: PUSH
58293: LD_INT 1
58295: ARRAY
58296: PUSH
58297: FOR_TO
58298: IFFALSE 58365
// for j := 1 to 8 do
58300: LD_ADDR_VAR 0 2
58304: PUSH
58305: DOUBLE
58306: LD_INT 1
58308: DEC
58309: ST_TO_ADDR
58310: LD_INT 8
58312: PUSH
58313: FOR_TO
58314: IFFALSE 58361
// PlaceSeeing ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , j , - 12 ) ;
58316: LD_VAR 0 3
58320: PUSH
58321: LD_INT 1
58323: ARRAY
58324: PUSH
58325: LD_VAR 0 1
58329: ARRAY
58330: PPUSH
58331: LD_VAR 0 3
58335: PUSH
58336: LD_INT 2
58338: ARRAY
58339: PUSH
58340: LD_VAR 0 1
58344: ARRAY
58345: PPUSH
58346: LD_VAR 0 2
58350: PPUSH
58351: LD_INT 12
58353: NEG
58354: PPUSH
58355: CALL_OW 330
58359: GO 58313
58361: POP
58362: POP
58363: GO 58297
58365: POP
58366: POP
// SetAreaMapShow ( mpKingArea , 1 ) ;
58367: LD_EXP 34
58371: PPUSH
58372: LD_INT 1
58374: PPUSH
58375: CALL_OW 424
// UpdateCounter ;
58379: CALL 58987 0 0
// repeat wait ( 0 0$1 ) ;
58383: LD_INT 35
58385: PPUSH
58386: CALL_OW 67
// tmp := FilterUnitsInArea ( mpKingArea , [ [ f_not , [ f_constructed ] ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
58390: LD_ADDR_VAR 0 3
58394: PUSH
58395: LD_EXP 34
58399: PPUSH
58400: LD_INT 3
58402: PUSH
58403: LD_INT 57
58405: PUSH
58406: EMPTY
58407: LIST
58408: PUSH
58409: EMPTY
58410: LIST
58411: LIST
58412: PUSH
58413: LD_INT 50
58415: PUSH
58416: EMPTY
58417: LIST
58418: PUSH
58419: LD_INT 2
58421: PUSH
58422: LD_INT 30
58424: PUSH
58425: LD_INT 0
58427: PUSH
58428: EMPTY
58429: LIST
58430: LIST
58431: PUSH
58432: LD_INT 30
58434: PUSH
58435: LD_INT 1
58437: PUSH
58438: EMPTY
58439: LIST
58440: LIST
58441: PUSH
58442: EMPTY
58443: LIST
58444: LIST
58445: LIST
58446: PUSH
58447: EMPTY
58448: LIST
58449: LIST
58450: LIST
58451: PPUSH
58452: CALL_OW 70
58456: ST_TO_ADDR
// if not tmp then
58457: LD_VAR 0 3
58461: NOT
58462: IFFALSE 58466
// continue ;
58464: GO 58383
// AddPoints ( tmp ) ;
58466: LD_VAR 0 3
58470: PPUSH
58471: CALL 58665 0 1
// UpdateCounter ;
58475: CALL 58987 0 0
// until false ;
58479: LD_INT 0
58481: IFFALSE 58383
// end ;
58483: PPOPN 3
58485: END
// every 0 0$1 trigger mpGameActive and mpEmissions marked GameTypeKing do var i , tmp ;
58486: LD_EXP 39
58490: PUSH
58491: LD_EXP 37
58495: AND
58496: IFFALSE 58662
58498: GO 58500
58500: DISABLE
58501: LD_INT 0
58503: PPUSH
58504: PPUSH
// begin tmp := AreaToList ( kingCamArea , 0 ) ;
58505: LD_ADDR_VAR 0 2
58509: PUSH
58510: LD_EXP 2
58514: PPUSH
58515: LD_INT 0
58517: PPUSH
58518: CALL_OW 517
58522: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
58523: LD_ADDR_VAR 0 1
58527: PUSH
58528: DOUBLE
58529: LD_INT 1
58531: DEC
58532: ST_TO_ADDR
58533: LD_VAR 0 2
58537: PUSH
58538: LD_INT 1
58540: ARRAY
58541: PUSH
58542: FOR_TO
58543: IFFALSE 58584
// ArtContamination ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 125 ) ;
58545: LD_VAR 0 2
58549: PUSH
58550: LD_INT 1
58552: ARRAY
58553: PUSH
58554: LD_VAR 0 1
58558: ARRAY
58559: PPUSH
58560: LD_VAR 0 2
58564: PUSH
58565: LD_INT 2
58567: ARRAY
58568: PUSH
58569: LD_VAR 0 1
58573: ARRAY
58574: PPUSH
58575: LD_INT 125
58577: PPUSH
58578: CALL_OW 495
58582: GO 58542
58584: POP
58585: POP
// repeat wait ( mpEmissions ) ;
58586: LD_EXP 37
58590: PPUSH
58591: CALL_OW 67
// for i := 1 to tmp [ 1 ] do
58595: LD_ADDR_VAR 0 1
58599: PUSH
58600: DOUBLE
58601: LD_INT 1
58603: DEC
58604: ST_TO_ADDR
58605: LD_VAR 0 2
58609: PUSH
58610: LD_INT 1
58612: ARRAY
58613: PUSH
58614: FOR_TO
58615: IFFALSE 58656
// ArtContamination ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 15 ) ;
58617: LD_VAR 0 2
58621: PUSH
58622: LD_INT 1
58624: ARRAY
58625: PUSH
58626: LD_VAR 0 1
58630: ARRAY
58631: PPUSH
58632: LD_VAR 0 2
58636: PUSH
58637: LD_INT 2
58639: ARRAY
58640: PUSH
58641: LD_VAR 0 1
58645: ARRAY
58646: PPUSH
58647: LD_INT 15
58649: PPUSH
58650: CALL_OW 495
58654: GO 58614
58656: POP
58657: POP
// until false ;
58658: LD_INT 0
58660: IFFALSE 58586
// end ;
58662: PPOPN 2
58664: END
// function AddPoints ( depots ) ; var i , first , team , side ; begin
58665: LD_INT 0
58667: PPUSH
58668: PPUSH
58669: PPUSH
58670: PPUSH
58671: PPUSH
// if mpTeamGame then
58672: LD_EXP 11
58676: IFFALSE 58873
// begin first := depots [ 1 ] ;
58678: LD_ADDR_VAR 0 4
58682: PUSH
58683: LD_VAR 0 1
58687: PUSH
58688: LD_INT 1
58690: ARRAY
58691: ST_TO_ADDR
// side := GetSide ( first ) ;
58692: LD_ADDR_VAR 0 6
58696: PUSH
58697: LD_VAR 0 4
58701: PPUSH
58702: CALL_OW 255
58706: ST_TO_ADDR
// for i := 1 to mpTeams do
58707: LD_ADDR_VAR 0 3
58711: PUSH
58712: DOUBLE
58713: LD_INT 1
58715: DEC
58716: ST_TO_ADDR
58717: LD_EXP 10
58721: PUSH
58722: FOR_TO
58723: IFFALSE 58757
// if side in mpTeams [ i ] then
58725: LD_VAR 0 6
58729: PUSH
58730: LD_EXP 10
58734: PUSH
58735: LD_VAR 0 3
58739: ARRAY
58740: IN
58741: IFFALSE 58755
// begin team := i ;
58743: LD_ADDR_VAR 0 5
58747: PUSH
58748: LD_VAR 0 3
58752: ST_TO_ADDR
// break ;
58753: GO 58757
// end ;
58755: GO 58722
58757: POP
58758: POP
// if not team then
58759: LD_VAR 0 5
58763: NOT
58764: IFFALSE 58768
// exit ;
58766: GO 58982
// if FilterUnitsInArea ( mpKingArea , [ f_enemy , side ] ) then
58768: LD_EXP 34
58772: PPUSH
58773: LD_INT 81
58775: PUSH
58776: LD_VAR 0 6
58780: PUSH
58781: EMPTY
58782: LIST
58783: LIST
58784: PPUSH
58785: CALL_OW 70
58789: IFFALSE 58793
// exit ;
58791: GO 58982
// mpKingPoints := Replace ( mpKingPoints , team , mpKingPoints [ team ] + 1 ) ;
58793: LD_ADDR_EXP 58
58797: PUSH
58798: LD_EXP 58
58802: PPUSH
58803: LD_VAR 0 5
58807: PPUSH
58808: LD_EXP 58
58812: PUSH
58813: LD_VAR 0 5
58817: ARRAY
58818: PUSH
58819: LD_INT 1
58821: PLUS
58822: PPUSH
58823: CALL_OW 1
58827: ST_TO_ADDR
// for i in mpTeams [ team ] do
58828: LD_ADDR_VAR 0 3
58832: PUSH
58833: LD_EXP 10
58837: PUSH
58838: LD_VAR 0 5
58842: ARRAY
58843: PUSH
58844: FOR_IN
58845: IFFALSE 58869
// SetMultiScore ( i , mpKingPoints [ team ] ) ;
58847: LD_VAR 0 3
58851: PPUSH
58852: LD_EXP 58
58856: PUSH
58857: LD_VAR 0 5
58861: ARRAY
58862: PPUSH
58863: CALL_OW 506
58867: GO 58844
58869: POP
58870: POP
// end else
58871: GO 58982
// begin first := depots [ 1 ] ;
58873: LD_ADDR_VAR 0 4
58877: PUSH
58878: LD_VAR 0 1
58882: PUSH
58883: LD_INT 1
58885: ARRAY
58886: ST_TO_ADDR
// side := GetSide ( first ) ;
58887: LD_ADDR_VAR 0 6
58891: PUSH
58892: LD_VAR 0 4
58896: PPUSH
58897: CALL_OW 255
58901: ST_TO_ADDR
// if FilterUnitsInArea ( mpKingArea , [ f_enemy , side ] ) then
58902: LD_EXP 34
58906: PPUSH
58907: LD_INT 81
58909: PUSH
58910: LD_VAR 0 6
58914: PUSH
58915: EMPTY
58916: LIST
58917: LIST
58918: PPUSH
58919: CALL_OW 70
58923: IFFALSE 58927
// exit ;
58925: GO 58982
// mpKingPoints := Replace ( mpKingPoints , side , mpKingPoints [ side ] + 1 ) ;
58927: LD_ADDR_EXP 58
58931: PUSH
58932: LD_EXP 58
58936: PPUSH
58937: LD_VAR 0 6
58941: PPUSH
58942: LD_EXP 58
58946: PUSH
58947: LD_VAR 0 6
58951: ARRAY
58952: PUSH
58953: LD_INT 1
58955: PLUS
58956: PPUSH
58957: CALL_OW 1
58961: ST_TO_ADDR
// SetMultiScore ( side , mpKingPoints [ side ] ) ;
58962: LD_VAR 0 6
58966: PPUSH
58967: LD_EXP 58
58971: PUSH
58972: LD_VAR 0 6
58976: ARRAY
58977: PPUSH
58978: CALL_OW 506
// end ; end ;
58982: LD_VAR 0 2
58986: RET
// function UpdateCounter ; var i ; begin
58987: LD_INT 0
58989: PPUSH
58990: PPUSH
// result := [ ] ;
58991: LD_ADDR_VAR 0 1
58995: PUSH
58996: EMPTY
58997: ST_TO_ADDR
// if mpTeamGame then
58998: LD_EXP 11
59002: IFFALSE 59069
// begin for i := 1 to mpTeams do
59004: LD_ADDR_VAR 0 2
59008: PUSH
59009: DOUBLE
59010: LD_INT 1
59012: DEC
59013: ST_TO_ADDR
59014: LD_EXP 10
59018: PUSH
59019: FOR_TO
59020: IFFALSE 59065
// result := result ^ [ #KingoftheHill-Team , i , mpKingPoints [ i ] , mpPoints ] ;
59022: LD_ADDR_VAR 0 1
59026: PUSH
59027: LD_VAR 0 1
59031: PUSH
59032: LD_STRING #KingoftheHill-Team
59034: PUSH
59035: LD_VAR 0 2
59039: PUSH
59040: LD_EXP 58
59044: PUSH
59045: LD_VAR 0 2
59049: ARRAY
59050: PUSH
59051: LD_EXP 35
59055: PUSH
59056: EMPTY
59057: LIST
59058: LIST
59059: LIST
59060: LIST
59061: ADD
59062: ST_TO_ADDR
59063: GO 59019
59065: POP
59066: POP
// end else
59067: GO 59142
// begin for i := 1 to 8 do
59069: LD_ADDR_VAR 0 2
59073: PUSH
59074: DOUBLE
59075: LD_INT 1
59077: DEC
59078: ST_TO_ADDR
59079: LD_INT 8
59081: PUSH
59082: FOR_TO
59083: IFFALSE 59140
// if mpSidePositions [ i ] then
59085: LD_EXP 7
59089: PUSH
59090: LD_VAR 0 2
59094: ARRAY
59095: IFFALSE 59138
// result := result ^ [ #KingoftheHill-Player , i , mpKingPoints [ i ] , mpPoints ] ;
59097: LD_ADDR_VAR 0 1
59101: PUSH
59102: LD_VAR 0 1
59106: PUSH
59107: LD_STRING #KingoftheHill-Player
59109: PUSH
59110: LD_VAR 0 2
59114: PUSH
59115: LD_EXP 58
59119: PUSH
59120: LD_VAR 0 2
59124: ARRAY
59125: PUSH
59126: LD_EXP 35
59130: PUSH
59131: EMPTY
59132: LIST
59133: LIST
59134: LIST
59135: LIST
59136: ADD
59137: ST_TO_ADDR
59138: GO 59082
59140: POP
59141: POP
// end ; mpDisplayStrings := result ;
59142: LD_ADDR_EXP 38
59146: PUSH
59147: LD_VAR 0 1
59151: ST_TO_ADDR
// end ;
59152: LD_VAR 0 1
59156: RET
// export function HowMuchPointsKing ( side ) ; begin
59157: LD_INT 0
59159: PPUSH
// result := HowMuchPoints ( side ) ;
59160: LD_ADDR_VAR 0 2
59164: PUSH
59165: LD_VAR 0 1
59169: PPUSH
59170: CALL 59180 0 1
59174: ST_TO_ADDR
// end ;
59175: LD_VAR 0 2
59179: RET
// function HowMuchPoints ( side ) ; var i ; begin
59180: LD_INT 0
59182: PPUSH
59183: PPUSH
// if mpTeamGame then
59184: LD_EXP 11
59188: IFFALSE 59257
// begin for i := 1 to Count ( mpTeams ) do
59190: LD_ADDR_VAR 0 3
59194: PUSH
59195: DOUBLE
59196: LD_INT 1
59198: DEC
59199: ST_TO_ADDR
59200: LD_EXP 10
59204: PPUSH
59205: CALL 11912 0 1
59209: PUSH
59210: FOR_TO
59211: IFFALSE 59253
// begin if side in mpTeams [ i ] then
59213: LD_VAR 0 1
59217: PUSH
59218: LD_EXP 10
59222: PUSH
59223: LD_VAR 0 3
59227: ARRAY
59228: IN
59229: IFFALSE 59251
// begin result := mpKingPoints [ i ] ;
59231: LD_ADDR_VAR 0 2
59235: PUSH
59236: LD_EXP 58
59240: PUSH
59241: LD_VAR 0 3
59245: ARRAY
59246: ST_TO_ADDR
// exit ;
59247: POP
59248: POP
59249: GO 59273
// end ; end ;
59251: GO 59210
59253: POP
59254: POP
// end else
59255: GO 59273
// result := mpKingPoints [ side ] ;
59257: LD_ADDR_VAR 0 2
59261: PUSH
59262: LD_EXP 58
59266: PUSH
59267: LD_VAR 0 1
59271: ARRAY
59272: ST_TO_ADDR
// end ;
59273: LD_VAR 0 2
59277: RET
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeKing do var i , canWin ;
59278: LD_EXP 39
59282: PUSH
59283: CALL 59605 0 0
59287: AND
59288: PUSH
59289: LD_OWVAR 4
59293: AND
59294: IFFALSE 59530
59296: GO 59298
59298: DISABLE
59299: LD_INT 0
59301: PPUSH
59302: PPUSH
// begin canWin := false ;
59303: LD_ADDR_VAR 0 2
59307: PUSH
59308: LD_INT 0
59310: ST_TO_ADDR
// if not HasPower ( your_side ) then
59311: LD_OWVAR 2
59315: PPUSH
59316: CALL 59645 0 1
59320: NOT
59321: IFFALSE 59332
// begin Multiplayer_Loose_Message ;
59323: CALL_OW 521
// enable ( mpLose ) ;
59327: LD_INT 102
59329: ENABLE_MARKED
// end else
59330: GO 59530
// begin canWin := ( HowMuchPoints ( your_side ) >= mpPoints and HasPower ( your_side ) ) or not EnemiesInGame ;
59332: LD_ADDR_VAR 0 2
59336: PUSH
59337: LD_OWVAR 2
59341: PPUSH
59342: CALL 59180 0 1
59346: PUSH
59347: LD_EXP 35
59351: GREATEREQUAL
59352: PUSH
59353: LD_OWVAR 2
59357: PPUSH
59358: CALL 59645 0 1
59362: AND
59363: PUSH
59364: CALL 59533 0 0
59368: NOT
59369: OR
59370: ST_TO_ADDR
// for i := 1 to 8 do
59371: LD_ADDR_VAR 0 1
59375: PUSH
59376: DOUBLE
59377: LD_INT 1
59379: DEC
59380: ST_TO_ADDR
59381: LD_INT 8
59383: PUSH
59384: FOR_TO
59385: IFFALSE 59516
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
59387: LD_EXP 7
59391: PUSH
59392: LD_VAR 0 1
59396: ARRAY
59397: PUSH
59398: LD_VAR 0 1
59402: PPUSH
59403: CALL_OW 108
59407: AND
59408: PUSH
59409: LD_VAR 0 1
59413: PUSH
59414: LD_OWVAR 2
59418: NONEQUAL
59419: AND
59420: IFFALSE 59514
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
59422: LD_EXP 8
59426: PUSH
59427: LD_VAR 0 1
59431: ARRAY
59432: NOT
59433: PUSH
59434: LD_EXP 8
59438: PUSH
59439: LD_VAR 0 1
59443: ARRAY
59444: PUSH
59445: LD_EXP 8
59449: PUSH
59450: LD_OWVAR 2
59454: ARRAY
59455: NONEQUAL
59456: PUSH
59457: LD_OWVAR 2
59461: PPUSH
59462: LD_VAR 0 1
59466: PPUSH
59467: CALL_OW 81
59471: PUSH
59472: LD_INT 1
59474: NONEQUAL
59475: AND
59476: OR
59477: IFFALSE 59514
// if HowMuchPoints ( i ) >= mpPoints and HasPower ( i ) then
59479: LD_VAR 0 1
59483: PPUSH
59484: CALL 59180 0 1
59488: PUSH
59489: LD_EXP 35
59493: GREATEREQUAL
59494: PUSH
59495: LD_VAR 0 1
59499: PPUSH
59500: CALL 59645 0 1
59504: AND
59505: IFFALSE 59514
// begin enable ( mpLose ) ;
59507: LD_INT 102
59509: ENABLE_MARKED
// exit ;
59510: POP
59511: POP
59512: GO 59530
// end ;
59514: GO 59384
59516: POP
59517: POP
// if canWin then
59518: LD_VAR 0 2
59522: IFFALSE 59529
// enable ( mpWin ) else
59524: LD_INT 101
59526: ENABLE_MARKED
59527: GO 59530
// enable ;
59529: ENABLE
// end ; end ;
59530: PPOPN 2
59532: END
// function EnemiesInGame ; var i ; begin
59533: LD_INT 0
59535: PPUSH
59536: PPUSH
// result := false ;
59537: LD_ADDR_VAR 0 1
59541: PUSH
59542: LD_INT 0
59544: ST_TO_ADDR
// for i := 1 to 8 do
59545: LD_ADDR_VAR 0 2
59549: PUSH
59550: DOUBLE
59551: LD_INT 1
59553: DEC
59554: ST_TO_ADDR
59555: LD_INT 8
59557: PUSH
59558: FOR_TO
59559: IFFALSE 59598
// if i <> your_side and HasPower ( i ) then
59561: LD_VAR 0 2
59565: PUSH
59566: LD_OWVAR 2
59570: NONEQUAL
59571: PUSH
59572: LD_VAR 0 2
59576: PPUSH
59577: CALL 59645 0 1
59581: AND
59582: IFFALSE 59596
// begin result := true ;
59584: LD_ADDR_VAR 0 1
59588: PUSH
59589: LD_INT 1
59591: ST_TO_ADDR
// exit ;
59592: POP
59593: POP
59594: GO 59600
// end ;
59596: GO 59558
59598: POP
59599: POP
// end ;
59600: LD_VAR 0 1
59604: RET
// function CanWinLoose ; begin
59605: LD_INT 0
59607: PPUSH
// result := true ;
59608: LD_ADDR_VAR 0 1
59612: PUSH
59613: LD_INT 1
59615: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
59616: CALL_OW 531
59620: PUSH
59621: CALL_OW 519
59625: PUSH
59626: LD_INT 1
59628: GREATER
59629: AND
59630: IFFALSE 59640
// result := false ;
59632: LD_ADDR_VAR 0 1
59636: PUSH
59637: LD_INT 0
59639: ST_TO_ADDR
// end ;
59640: LD_VAR 0 1
59644: RET
// function HasPower ( i ) ; begin
59645: LD_INT 0
59647: PPUSH
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
59648: LD_ADDR_VAR 0 2
59652: PUSH
59653: LD_INT 22
59655: PUSH
59656: LD_VAR 0 1
59660: PUSH
59661: EMPTY
59662: LIST
59663: LIST
59664: PUSH
59665: LD_INT 2
59667: PUSH
59668: LD_INT 21
59670: PUSH
59671: LD_INT 1
59673: PUSH
59674: EMPTY
59675: LIST
59676: LIST
59677: PUSH
59678: LD_INT 33
59680: PUSH
59681: LD_INT 3
59683: PUSH
59684: EMPTY
59685: LIST
59686: LIST
59687: PUSH
59688: LD_INT 33
59690: PUSH
59691: LD_INT 5
59693: PUSH
59694: EMPTY
59695: LIST
59696: LIST
59697: PUSH
59698: EMPTY
59699: LIST
59700: LIST
59701: LIST
59702: LIST
59703: PUSH
59704: EMPTY
59705: LIST
59706: LIST
59707: PPUSH
59708: CALL_OW 69
59712: ST_TO_ADDR
// end ; end_of_file
59713: LD_VAR 0 2
59717: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin end ;
59718: PPOPN 6
59720: END
// on MapStart ( p ) do begin if mpGameType = GameTypeCoop then
59721: LD_EXP 3
59725: PUSH
59726: LD_INT 4
59728: EQUAL
59729: IFFALSE 59765
// begin ToLua ( setGameDifficulty( & Difficulty & ) ) ;
59731: LD_STRING setGameDifficulty(
59733: PUSH
59734: LD_OWVAR 67
59738: STR
59739: PUSH
59740: LD_STRING )
59742: STR
59743: PPUSH
59744: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
59748: LD_STRING displayDifficulty(
59750: PUSH
59751: LD_OWVAR 67
59755: STR
59756: PUSH
59757: LD_STRING )
59759: STR
59760: PPUSH
59761: CALL_OW 559
// end ; SOS_MapStart ( ) ;
59765: CALL 59794 0 0
// end ; end_of_file
59769: PPOPN 1
59771: END
// every 0 0$1 do
59772: GO 59774
59774: DISABLE
// begin enable ;
59775: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
59776: LD_STRING updateTimer(
59778: PUSH
59779: LD_OWVAR 1
59783: STR
59784: PUSH
59785: LD_STRING );
59787: STR
59788: PPUSH
59789: CALL_OW 559
// end ;
59793: END
// export function SOS_MapStart ( ) ; begin
59794: LD_INT 0
59796: PPUSH
// UpdateFactoryWaypoints ( ) ;
59797: CALL 60722 0 0
// UpdateWarehouseGatheringPoints ( ) ;
59801: CALL 60974 0 0
// ParseMultiDataToLua ( ) ;
59805: CALL 61121 0 0
// ToLua ( setSpecLogoNumber( & 2 & , & 1 & ) ) ;
59809: LD_STRING setSpecLogoNumber(
59811: PUSH
59812: LD_INT 2
59814: STR
59815: PUSH
59816: LD_STRING ,
59818: STR
59819: PUSH
59820: LD_INT 1
59822: STR
59823: PUSH
59824: LD_STRING )
59826: STR
59827: PPUSH
59828: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 3 & , & 2 & ) ) ;
59832: LD_STRING setSpecLogoNumber(
59834: PUSH
59835: LD_INT 3
59837: STR
59838: PUSH
59839: LD_STRING ,
59841: STR
59842: PUSH
59843: LD_INT 2
59845: STR
59846: PUSH
59847: LD_STRING )
59849: STR
59850: PPUSH
59851: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 4 & , & 3 & ) ) ;
59855: LD_STRING setSpecLogoNumber(
59857: PUSH
59858: LD_INT 4
59860: STR
59861: PUSH
59862: LD_STRING ,
59864: STR
59865: PUSH
59866: LD_INT 3
59868: STR
59869: PUSH
59870: LD_STRING )
59872: STR
59873: PPUSH
59874: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 5 & , & 4 & ) ) ;
59878: LD_STRING setSpecLogoNumber(
59880: PUSH
59881: LD_INT 5
59883: STR
59884: PUSH
59885: LD_STRING ,
59887: STR
59888: PUSH
59889: LD_INT 4
59891: STR
59892: PUSH
59893: LD_STRING )
59895: STR
59896: PPUSH
59897: CALL_OW 559
// end ;
59901: LD_VAR 0 1
59905: RET
// export function UpdateSpectatorBar ; var i , j , crates , oil , sib , people , base , bases ; begin
59906: LD_INT 0
59908: PPUSH
59909: PPUSH
59910: PPUSH
59911: PPUSH
59912: PPUSH
59913: PPUSH
59914: PPUSH
59915: PPUSH
59916: PPUSH
// for i := 1 to 8 do
59917: LD_ADDR_VAR 0 2
59921: PUSH
59922: DOUBLE
59923: LD_INT 1
59925: DEC
59926: ST_TO_ADDR
59927: LD_INT 8
59929: PUSH
59930: FOR_TO
59931: IFFALSE 60316
// begin if mpSidePositions [ i ] then
59933: LD_EXP 7
59937: PUSH
59938: LD_VAR 0 2
59942: ARRAY
59943: IFFALSE 60314
// begin people := Count ( FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) ) ;
59945: LD_ADDR_VAR 0 7
59949: PUSH
59950: LD_INT 22
59952: PUSH
59953: LD_VAR 0 2
59957: PUSH
59958: EMPTY
59959: LIST
59960: LIST
59961: PUSH
59962: LD_INT 21
59964: PUSH
59965: LD_INT 1
59967: PUSH
59968: EMPTY
59969: LIST
59970: LIST
59971: PUSH
59972: EMPTY
59973: LIST
59974: LIST
59975: PPUSH
59976: CALL_OW 69
59980: PPUSH
59981: CALL 11912 0 1
59985: ST_TO_ADDR
// bases := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
59986: LD_ADDR_VAR 0 9
59990: PUSH
59991: LD_INT 22
59993: PUSH
59994: LD_VAR 0 2
59998: PUSH
59999: EMPTY
60000: LIST
60001: LIST
60002: PUSH
60003: LD_INT 2
60005: PUSH
60006: LD_INT 30
60008: PUSH
60009: LD_INT 0
60011: PUSH
60012: EMPTY
60013: LIST
60014: LIST
60015: PUSH
60016: LD_INT 30
60018: PUSH
60019: LD_INT 1
60021: PUSH
60022: EMPTY
60023: LIST
60024: LIST
60025: PUSH
60026: EMPTY
60027: LIST
60028: LIST
60029: LIST
60030: PUSH
60031: EMPTY
60032: LIST
60033: LIST
60034: PPUSH
60035: CALL_OW 69
60039: ST_TO_ADDR
// crates := 0 ;
60040: LD_ADDR_VAR 0 4
60044: PUSH
60045: LD_INT 0
60047: ST_TO_ADDR
// oil := 0 ;
60048: LD_ADDR_VAR 0 5
60052: PUSH
60053: LD_INT 0
60055: ST_TO_ADDR
// sib := 0 ;
60056: LD_ADDR_VAR 0 6
60060: PUSH
60061: LD_INT 0
60063: ST_TO_ADDR
// if bases then
60064: LD_VAR 0 9
60068: IFFALSE 60174
// begin for j in bases do
60070: LD_ADDR_VAR 0 3
60074: PUSH
60075: LD_VAR 0 9
60079: PUSH
60080: FOR_IN
60081: IFFALSE 60172
// begin base := GetBase ( j ) ;
60083: LD_ADDR_VAR 0 8
60087: PUSH
60088: LD_VAR 0 3
60092: PPUSH
60093: CALL_OW 274
60097: ST_TO_ADDR
// crates := crates + GetResourceType ( base , mat_cans ) ;
60098: LD_ADDR_VAR 0 4
60102: PUSH
60103: LD_VAR 0 4
60107: PUSH
60108: LD_VAR 0 8
60112: PPUSH
60113: LD_INT 1
60115: PPUSH
60116: CALL_OW 275
60120: PLUS
60121: ST_TO_ADDR
// oil := oil + GetResourceType ( base , mat_oil ) ;
60122: LD_ADDR_VAR 0 5
60126: PUSH
60127: LD_VAR 0 5
60131: PUSH
60132: LD_VAR 0 8
60136: PPUSH
60137: LD_INT 2
60139: PPUSH
60140: CALL_OW 275
60144: PLUS
60145: ST_TO_ADDR
// sib := sib + GetResourceType ( base , mat_siberit ) ;
60146: LD_ADDR_VAR 0 6
60150: PUSH
60151: LD_VAR 0 6
60155: PUSH
60156: LD_VAR 0 8
60160: PPUSH
60161: LD_INT 3
60163: PPUSH
60164: CALL_OW 275
60168: PLUS
60169: ST_TO_ADDR
// end ;
60170: GO 60080
60172: POP
60173: POP
// end ; ToLua ( setSpecText( & i & , & 2 & , & crates & ) ) ;
60174: LD_STRING setSpecText(
60176: PUSH
60177: LD_VAR 0 2
60181: STR
60182: PUSH
60183: LD_STRING ,
60185: STR
60186: PUSH
60187: LD_INT 2
60189: STR
60190: PUSH
60191: LD_STRING ,
60193: STR
60194: PUSH
60195: LD_VAR 0 4
60199: STR
60200: PUSH
60201: LD_STRING )
60203: STR
60204: PPUSH
60205: CALL_OW 559
// ToLua ( setSpecText( & i & , & 3 & , & oil & ) ) ;
60209: LD_STRING setSpecText(
60211: PUSH
60212: LD_VAR 0 2
60216: STR
60217: PUSH
60218: LD_STRING ,
60220: STR
60221: PUSH
60222: LD_INT 3
60224: STR
60225: PUSH
60226: LD_STRING ,
60228: STR
60229: PUSH
60230: LD_VAR 0 5
60234: STR
60235: PUSH
60236: LD_STRING )
60238: STR
60239: PPUSH
60240: CALL_OW 559
// ToLua ( setSpecText( & i & , & 4 & , & sib & ) ) ;
60244: LD_STRING setSpecText(
60246: PUSH
60247: LD_VAR 0 2
60251: STR
60252: PUSH
60253: LD_STRING ,
60255: STR
60256: PUSH
60257: LD_INT 4
60259: STR
60260: PUSH
60261: LD_STRING ,
60263: STR
60264: PUSH
60265: LD_VAR 0 6
60269: STR
60270: PUSH
60271: LD_STRING )
60273: STR
60274: PPUSH
60275: CALL_OW 559
// ToLua ( setSpecText( & i & , & 5 & , & people & ) ) ;
60279: LD_STRING setSpecText(
60281: PUSH
60282: LD_VAR 0 2
60286: STR
60287: PUSH
60288: LD_STRING ,
60290: STR
60291: PUSH
60292: LD_INT 5
60294: STR
60295: PUSH
60296: LD_STRING ,
60298: STR
60299: PUSH
60300: LD_VAR 0 7
60304: STR
60305: PUSH
60306: LD_STRING )
60308: STR
60309: PPUSH
60310: CALL_OW 559
// end ; end ;
60314: GO 59930
60316: POP
60317: POP
// end ;
60318: LD_VAR 0 1
60322: RET
// every 20 + 0 0$5 trigger FilterAllUnits ( [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) do
60323: LD_INT 2
60325: PUSH
60326: LD_INT 30
60328: PUSH
60329: LD_INT 0
60331: PUSH
60332: EMPTY
60333: LIST
60334: LIST
60335: PUSH
60336: LD_INT 30
60338: PUSH
60339: LD_INT 1
60341: PUSH
60342: EMPTY
60343: LIST
60344: LIST
60345: PUSH
60346: EMPTY
60347: LIST
60348: LIST
60349: LIST
60350: PPUSH
60351: CALL_OW 69
60355: IFFALSE 60365
60357: GO 60359
60359: DISABLE
// begin enable ;
60360: ENABLE
// UpdateSpectatorBar ;
60361: CALL 59906 0 0
// end ;
60365: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
60366: LD_INT 0
60368: PPUSH
// end ;
60369: LD_VAR 0 12
60373: RET
// export factoryWaypoints , factoryWaypointsDrivers ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
60374: LD_INT 0
60376: PPUSH
60377: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
60378: LD_VAR 0 1
60382: NOT
60383: PUSH
60384: LD_VAR 0 2
60388: PPUSH
60389: LD_VAR 0 3
60393: PPUSH
60394: CALL_OW 488
60398: NOT
60399: OR
60400: PUSH
60401: LD_VAR 0 1
60405: PPUSH
60406: CALL_OW 266
60410: PUSH
60411: LD_INT 3
60413: NONEQUAL
60414: PUSH
60415: LD_VAR 0 1
60419: PPUSH
60420: CALL_OW 247
60424: PUSH
60425: LD_INT 1
60427: EQUAL
60428: NOT
60429: AND
60430: OR
60431: IFFALSE 60435
// exit ;
60433: GO 60717
// if GetType ( factory ) = unit_human then
60435: LD_VAR 0 1
60439: PPUSH
60440: CALL_OW 247
60444: PUSH
60445: LD_INT 1
60447: EQUAL
60448: IFFALSE 60465
// factory := IsInUnit ( factory ) ;
60450: LD_ADDR_VAR 0 1
60454: PUSH
60455: LD_VAR 0 1
60459: PPUSH
60460: CALL_OW 310
60464: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
60465: LD_VAR 0 1
60469: PPUSH
60470: CALL_OW 266
60474: PUSH
60475: LD_INT 3
60477: NONEQUAL
60478: IFFALSE 60482
// exit ;
60480: GO 60717
// for i := 1 to Count ( factoryWaypoints ) do
60482: LD_ADDR_VAR 0 5
60486: PUSH
60487: DOUBLE
60488: LD_INT 1
60490: DEC
60491: ST_TO_ADDR
60492: LD_EXP 59
60496: PPUSH
60497: CALL 11912 0 1
60501: PUSH
60502: FOR_TO
60503: IFFALSE 60665
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
60505: LD_VAR 0 2
60509: PPUSH
60510: LD_VAR 0 3
60514: PPUSH
60515: CALL_OW 428
60519: PUSH
60520: LD_EXP 59
60524: PUSH
60525: LD_VAR 0 5
60529: ARRAY
60530: PUSH
60531: LD_INT 2
60533: ARRAY
60534: EQUAL
60535: IFFALSE 60567
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
60537: LD_ADDR_EXP 59
60541: PUSH
60542: LD_EXP 59
60546: PPUSH
60547: LD_VAR 0 5
60551: PPUSH
60552: CALL_OW 3
60556: ST_TO_ADDR
// UpdateFactoryWaypoints ;
60557: CALL 60722 0 0
// exit ;
60561: POP
60562: POP
60563: GO 60717
// end else
60565: GO 60663
// if factory = factoryWaypoints [ i ] [ 2 ] then
60567: LD_VAR 0 1
60571: PUSH
60572: LD_EXP 59
60576: PUSH
60577: LD_VAR 0 5
60581: ARRAY
60582: PUSH
60583: LD_INT 2
60585: ARRAY
60586: EQUAL
60587: IFFALSE 60663
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
60589: LD_ADDR_EXP 59
60593: PUSH
60594: LD_EXP 59
60598: PPUSH
60599: LD_VAR 0 5
60603: PPUSH
60604: CALL_OW 3
60608: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
60609: LD_ADDR_EXP 59
60613: PUSH
60614: LD_EXP 59
60618: PPUSH
60619: LD_VAR 0 1
60623: PPUSH
60624: CALL_OW 255
60628: PUSH
60629: LD_VAR 0 1
60633: PUSH
60634: LD_VAR 0 2
60638: PUSH
60639: LD_VAR 0 3
60643: PUSH
60644: EMPTY
60645: LIST
60646: LIST
60647: LIST
60648: LIST
60649: PPUSH
60650: CALL 47521 0 2
60654: ST_TO_ADDR
// UpdateFactoryWaypoints ;
60655: CALL 60722 0 0
// exit ;
60659: POP
60660: POP
60661: GO 60717
// end ; end ;
60663: GO 60502
60665: POP
60666: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
60667: LD_ADDR_EXP 59
60671: PUSH
60672: LD_EXP 59
60676: PPUSH
60677: LD_VAR 0 1
60681: PPUSH
60682: CALL_OW 255
60686: PUSH
60687: LD_VAR 0 1
60691: PUSH
60692: LD_VAR 0 2
60696: PUSH
60697: LD_VAR 0 3
60701: PUSH
60702: EMPTY
60703: LIST
60704: LIST
60705: LIST
60706: LIST
60707: PPUSH
60708: CALL 47521 0 2
60712: ST_TO_ADDR
// UpdateFactoryWaypoints ;
60713: CALL 60722 0 0
// end ;
60717: LD_VAR 0 4
60721: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
60722: LD_INT 0
60724: PPUSH
60725: PPUSH
60726: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
60727: LD_STRING resetFactoryWaypoint();
60729: PPUSH
60730: CALL_OW 559
// if factoryWaypoints then
60734: LD_EXP 59
60738: IFFALSE 60859
// begin list := factoryWaypoints ;
60740: LD_ADDR_VAR 0 3
60744: PUSH
60745: LD_EXP 59
60749: ST_TO_ADDR
// for i := 1 to list do
60750: LD_ADDR_VAR 0 2
60754: PUSH
60755: DOUBLE
60756: LD_INT 1
60758: DEC
60759: ST_TO_ADDR
60760: LD_VAR 0 3
60764: PUSH
60765: FOR_TO
60766: IFFALSE 60857
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
60768: LD_STRING setFactoryWaypointXY(
60770: PUSH
60771: LD_VAR 0 3
60775: PUSH
60776: LD_VAR 0 2
60780: ARRAY
60781: PUSH
60782: LD_INT 1
60784: ARRAY
60785: STR
60786: PUSH
60787: LD_STRING ,
60789: STR
60790: PUSH
60791: LD_VAR 0 3
60795: PUSH
60796: LD_VAR 0 2
60800: ARRAY
60801: PUSH
60802: LD_INT 2
60804: ARRAY
60805: STR
60806: PUSH
60807: LD_STRING ,
60809: STR
60810: PUSH
60811: LD_VAR 0 3
60815: PUSH
60816: LD_VAR 0 2
60820: ARRAY
60821: PUSH
60822: LD_INT 3
60824: ARRAY
60825: STR
60826: PUSH
60827: LD_STRING ,
60829: STR
60830: PUSH
60831: LD_VAR 0 3
60835: PUSH
60836: LD_VAR 0 2
60840: ARRAY
60841: PUSH
60842: LD_INT 4
60844: ARRAY
60845: STR
60846: PUSH
60847: LD_STRING )
60849: STR
60850: PPUSH
60851: CALL_OW 559
60855: GO 60765
60857: POP
60858: POP
// end ; end ;
60859: LD_VAR 0 1
60863: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
60864: LD_INT 0
60866: PPUSH
// if HexInfo ( x , y ) = warehouse then
60867: LD_VAR 0 2
60871: PPUSH
60872: LD_VAR 0 3
60876: PPUSH
60877: CALL_OW 428
60881: PUSH
60882: LD_VAR 0 1
60886: EQUAL
60887: IFFALSE 60914
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
60889: LD_ADDR_EXP 61
60893: PUSH
60894: LD_EXP 61
60898: PPUSH
60899: LD_VAR 0 1
60903: PPUSH
60904: LD_INT 0
60906: PPUSH
60907: CALL_OW 1
60911: ST_TO_ADDR
60912: GO 60965
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
60914: LD_ADDR_EXP 61
60918: PUSH
60919: LD_EXP 61
60923: PPUSH
60924: LD_VAR 0 1
60928: PPUSH
60929: LD_VAR 0 1
60933: PPUSH
60934: CALL_OW 255
60938: PUSH
60939: LD_VAR 0 1
60943: PUSH
60944: LD_VAR 0 2
60948: PUSH
60949: LD_VAR 0 3
60953: PUSH
60954: EMPTY
60955: LIST
60956: LIST
60957: LIST
60958: LIST
60959: PPUSH
60960: CALL_OW 1
60964: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
60965: CALL 60974 0 0
// end ;
60969: LD_VAR 0 4
60973: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
60974: LD_INT 0
60976: PPUSH
60977: PPUSH
60978: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
60979: LD_STRING resetWarehouseGatheringPoints();
60981: PPUSH
60982: CALL_OW 559
// if warehouseGatheringPoints then
60986: LD_EXP 61
60990: IFFALSE 61116
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
60992: LD_ADDR_VAR 0 3
60996: PUSH
60997: LD_EXP 61
61001: PPUSH
61002: CALL 51289 0 1
61006: ST_TO_ADDR
// for i := 1 to list do
61007: LD_ADDR_VAR 0 2
61011: PUSH
61012: DOUBLE
61013: LD_INT 1
61015: DEC
61016: ST_TO_ADDR
61017: LD_VAR 0 3
61021: PUSH
61022: FOR_TO
61023: IFFALSE 61114
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
61025: LD_STRING setWarehouseGatheringPointXY(
61027: PUSH
61028: LD_VAR 0 3
61032: PUSH
61033: LD_VAR 0 2
61037: ARRAY
61038: PUSH
61039: LD_INT 1
61041: ARRAY
61042: STR
61043: PUSH
61044: LD_STRING ,
61046: STR
61047: PUSH
61048: LD_VAR 0 3
61052: PUSH
61053: LD_VAR 0 2
61057: ARRAY
61058: PUSH
61059: LD_INT 2
61061: ARRAY
61062: STR
61063: PUSH
61064: LD_STRING ,
61066: STR
61067: PUSH
61068: LD_VAR 0 3
61072: PUSH
61073: LD_VAR 0 2
61077: ARRAY
61078: PUSH
61079: LD_INT 3
61081: ARRAY
61082: STR
61083: PUSH
61084: LD_STRING ,
61086: STR
61087: PUSH
61088: LD_VAR 0 3
61092: PUSH
61093: LD_VAR 0 2
61097: ARRAY
61098: PUSH
61099: LD_INT 4
61101: ARRAY
61102: STR
61103: PUSH
61104: LD_STRING )
61106: STR
61107: PPUSH
61108: CALL_OW 559
61112: GO 61022
61114: POP
61115: POP
// end ; end ;
61116: LD_VAR 0 1
61120: RET
// function ParseMultiDataToLua ( ) ; var i ; begin
61121: LD_INT 0
61123: PPUSH
61124: PPUSH
// if not mpSidePositions then
61125: LD_EXP 7
61129: NOT
61130: IFFALSE 61134
// exit ;
61132: GO 61205
// result :=  ;
61134: LD_ADDR_VAR 0 1
61138: PUSH
61139: LD_STRING 
61141: ST_TO_ADDR
// for i := 1 to 8 do
61142: LD_ADDR_VAR 0 2
61146: PUSH
61147: DOUBLE
61148: LD_INT 1
61150: DEC
61151: ST_TO_ADDR
61152: LD_INT 8
61154: PUSH
61155: FOR_TO
61156: IFFALSE 61186
// begin result := result & mpSidePositions [ i ] & ; ;
61158: LD_ADDR_VAR 0 1
61162: PUSH
61163: LD_VAR 0 1
61167: PUSH
61168: LD_EXP 7
61172: PUSH
61173: LD_VAR 0 2
61177: ARRAY
61178: STR
61179: PUSH
61180: LD_STRING ;
61182: STR
61183: ST_TO_ADDR
// end ;
61184: GO 61155
61186: POP
61187: POP
// ToLua ( setMultiplayerRealPosition(" & result & "); ) ;
61188: LD_STRING setMultiplayerRealPosition("
61190: PUSH
61191: LD_VAR 0 1
61195: STR
61196: PUSH
61197: LD_STRING ");
61199: STR
61200: PPUSH
61201: CALL_OW 559
// end ;
61205: LD_VAR 0 1
61209: RET
