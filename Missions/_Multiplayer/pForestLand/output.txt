// starting begin ResetFog ;
   0: CALL_OW 335
// InitMultiplayer ;
   4: CALL 2528 0 0
// InitMultiplayerSettings ;
   8: CALL 17 0 0
// StartMultiplayer ;
  12: CALL 2904 0 0
// end ; end_of_file
  16: END
// export function InitMultiplayerSettings ; begin
  17: LD_INT 0
  19: PPUSH
// mpGameSettingsKeys := [ 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 0 , 0 , 1 , 0 , 1 , 1 ] ;
  20: LD_ADDR_EXP 4
  24: PUSH
  25: LD_INT 1
  27: PUSH
  28: LD_INT 1
  30: PUSH
  31: LD_INT 1
  33: PUSH
  34: LD_INT 1
  36: PUSH
  37: LD_INT 1
  39: PUSH
  40: LD_INT 1
  42: PUSH
  43: LD_INT 1
  45: PUSH
  46: LD_INT 1
  48: PUSH
  49: LD_INT 1
  51: PUSH
  52: LD_INT 1
  54: PUSH
  55: LD_INT 1
  57: PUSH
  58: LD_INT 1
  60: PUSH
  61: LD_INT 1
  63: PUSH
  64: LD_INT 1
  66: PUSH
  67: LD_INT 1
  69: PUSH
  70: LD_INT 0
  72: PUSH
  73: LD_INT 0
  75: PUSH
  76: LD_INT 1
  78: PUSH
  79: LD_INT 0
  81: PUSH
  82: LD_INT 1
  84: PUSH
  85: LD_INT 1
  87: PUSH
  88: EMPTY
  89: LIST
  90: LIST
  91: LIST
  92: LIST
  93: LIST
  94: LIST
  95: LIST
  96: LIST
  97: LIST
  98: LIST
  99: LIST
 100: LIST
 101: LIST
 102: LIST
 103: LIST
 104: LIST
 105: LIST
 106: LIST
 107: LIST
 108: LIST
 109: LIST
 110: ST_TO_ADDR
// mpGameSettingsValues := [ [ 0 , 1 ] , [ 9 , 12 , 15 , 24 ] , [ 1 , 3 , 5 , 7 ] , [ [ 0 , 0 , 0 ] , [ 100 , 30 , 0 ] , [ 200 , 75 , 10 ] , [ 500 , 150 , 30 ] ] , [ 1 , 2 , 3 , 4 ] , [ 0 , 1 , 2 ] , [ 0 , 1 , 2 ] , [ 250 , 350 , 500 , 1000 , 2000 ] , [ 0 , 2 ] , [ 0 , 5 5$00 , 10 10$00 , 15 15$00 , 20 20$00 , 30 30$00 ] , [ 0 , 1 ] , [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] , [ 0 , 1 ] , [ 0 , 6 6$30 , 3 3$30 ] , [ 0 , 2 , 4 , 6 ] , [ ] , [ ] , [ 0 , 1 , 15 15$0 , 25 25$0 , 30 30$0 , 45 45$0 , 60 60$0 , 90 90$0 , 100 100$0 , 120 120$0 , 180 180$0 ] , [ ] , [ 0 , 1 , 2 , 4 ] , [ 0 , 3 3$0 , 5 5$0 , 8 8$0 , 10 10$0 , 12 12$0 , 15 15$0 , 20 20$0 , 30 30$0 ] ] ;
 111: LD_ADDR_EXP 5
 115: PUSH
 116: LD_INT 0
 118: PUSH
 119: LD_INT 1
 121: PUSH
 122: EMPTY
 123: LIST
 124: LIST
 125: PUSH
 126: LD_INT 9
 128: PUSH
 129: LD_INT 12
 131: PUSH
 132: LD_INT 15
 134: PUSH
 135: LD_INT 24
 137: PUSH
 138: EMPTY
 139: LIST
 140: LIST
 141: LIST
 142: LIST
 143: PUSH
 144: LD_INT 1
 146: PUSH
 147: LD_INT 3
 149: PUSH
 150: LD_INT 5
 152: PUSH
 153: LD_INT 7
 155: PUSH
 156: EMPTY
 157: LIST
 158: LIST
 159: LIST
 160: LIST
 161: PUSH
 162: LD_INT 0
 164: PUSH
 165: LD_INT 0
 167: PUSH
 168: LD_INT 0
 170: PUSH
 171: EMPTY
 172: LIST
 173: LIST
 174: LIST
 175: PUSH
 176: LD_INT 100
 178: PUSH
 179: LD_INT 30
 181: PUSH
 182: LD_INT 0
 184: PUSH
 185: EMPTY
 186: LIST
 187: LIST
 188: LIST
 189: PUSH
 190: LD_INT 200
 192: PUSH
 193: LD_INT 75
 195: PUSH
 196: LD_INT 10
 198: PUSH
 199: EMPTY
 200: LIST
 201: LIST
 202: LIST
 203: PUSH
 204: LD_INT 500
 206: PUSH
 207: LD_INT 150
 209: PUSH
 210: LD_INT 30
 212: PUSH
 213: EMPTY
 214: LIST
 215: LIST
 216: LIST
 217: PUSH
 218: EMPTY
 219: LIST
 220: LIST
 221: LIST
 222: LIST
 223: PUSH
 224: LD_INT 1
 226: PUSH
 227: LD_INT 2
 229: PUSH
 230: LD_INT 3
 232: PUSH
 233: LD_INT 4
 235: PUSH
 236: EMPTY
 237: LIST
 238: LIST
 239: LIST
 240: LIST
 241: PUSH
 242: LD_INT 0
 244: PUSH
 245: LD_INT 1
 247: PUSH
 248: LD_INT 2
 250: PUSH
 251: EMPTY
 252: LIST
 253: LIST
 254: LIST
 255: PUSH
 256: LD_INT 0
 258: PUSH
 259: LD_INT 1
 261: PUSH
 262: LD_INT 2
 264: PUSH
 265: EMPTY
 266: LIST
 267: LIST
 268: LIST
 269: PUSH
 270: LD_INT 250
 272: PUSH
 273: LD_INT 350
 275: PUSH
 276: LD_INT 500
 278: PUSH
 279: LD_INT 1000
 281: PUSH
 282: LD_INT 2000
 284: PUSH
 285: EMPTY
 286: LIST
 287: LIST
 288: LIST
 289: LIST
 290: LIST
 291: PUSH
 292: LD_INT 0
 294: PUSH
 295: LD_INT 2
 297: PUSH
 298: EMPTY
 299: LIST
 300: LIST
 301: PUSH
 302: LD_INT 0
 304: PUSH
 305: LD_INT 10500
 307: PUSH
 308: LD_INT 21000
 310: PUSH
 311: LD_INT 31500
 313: PUSH
 314: LD_INT 42000
 316: PUSH
 317: LD_INT 63000
 319: PUSH
 320: EMPTY
 321: LIST
 322: LIST
 323: LIST
 324: LIST
 325: LIST
 326: LIST
 327: PUSH
 328: LD_INT 0
 330: PUSH
 331: LD_INT 1
 333: PUSH
 334: EMPTY
 335: LIST
 336: LIST
 337: PUSH
 338: LD_INT 1
 340: NEG
 341: PUSH
 342: LD_INT 350
 344: PUSH
 345: LD_INT 700
 347: PUSH
 348: LD_INT 1400
 350: PUSH
 351: LD_INT 0
 353: PUSH
 354: EMPTY
 355: LIST
 356: LIST
 357: LIST
 358: LIST
 359: LIST
 360: PUSH
 361: LD_INT 0
 363: PUSH
 364: LD_INT 1
 366: PUSH
 367: EMPTY
 368: LIST
 369: LIST
 370: PUSH
 371: LD_INT 0
 373: PUSH
 374: LD_INT 13650
 376: PUSH
 377: LD_INT 7350
 379: PUSH
 380: EMPTY
 381: LIST
 382: LIST
 383: LIST
 384: PUSH
 385: LD_INT 0
 387: PUSH
 388: LD_INT 2
 390: PUSH
 391: LD_INT 4
 393: PUSH
 394: LD_INT 6
 396: PUSH
 397: EMPTY
 398: LIST
 399: LIST
 400: LIST
 401: LIST
 402: PUSH
 403: EMPTY
 404: PUSH
 405: EMPTY
 406: PUSH
 407: LD_INT 0
 409: PUSH
 410: LD_INT 1
 412: PUSH
 413: LD_INT 31500
 415: PUSH
 416: LD_INT 52500
 418: PUSH
 419: LD_INT 63000
 421: PUSH
 422: LD_INT 94500
 424: PUSH
 425: LD_INT 126000
 427: PUSH
 428: LD_INT 189000
 430: PUSH
 431: LD_INT 210000
 433: PUSH
 434: LD_INT 252000
 436: PUSH
 437: LD_INT 378000
 439: PUSH
 440: EMPTY
 441: LIST
 442: LIST
 443: LIST
 444: LIST
 445: LIST
 446: LIST
 447: LIST
 448: LIST
 449: LIST
 450: LIST
 451: LIST
 452: PUSH
 453: EMPTY
 454: PUSH
 455: LD_INT 0
 457: PUSH
 458: LD_INT 1
 460: PUSH
 461: LD_INT 2
 463: PUSH
 464: LD_INT 4
 466: PUSH
 467: EMPTY
 468: LIST
 469: LIST
 470: LIST
 471: LIST
 472: PUSH
 473: LD_INT 0
 475: PUSH
 476: LD_INT 6300
 478: PUSH
 479: LD_INT 10500
 481: PUSH
 482: LD_INT 16800
 484: PUSH
 485: LD_INT 21000
 487: PUSH
 488: LD_INT 25200
 490: PUSH
 491: LD_INT 31500
 493: PUSH
 494: LD_INT 42000
 496: PUSH
 497: LD_INT 63000
 499: PUSH
 500: EMPTY
 501: LIST
 502: LIST
 503: LIST
 504: LIST
 505: LIST
 506: LIST
 507: LIST
 508: LIST
 509: LIST
 510: PUSH
 511: EMPTY
 512: LIST
 513: LIST
 514: LIST
 515: LIST
 516: LIST
 517: LIST
 518: LIST
 519: LIST
 520: LIST
 521: LIST
 522: LIST
 523: LIST
 524: LIST
 525: LIST
 526: LIST
 527: LIST
 528: LIST
 529: LIST
 530: LIST
 531: LIST
 532: LIST
 533: ST_TO_ADDR
// mpGameSettings := [ 1 , 15 , 4 , [ 100 , 30 , 0 ] , 3 , 1 , 2 , 250 , 0 , 0 , 1 , 0 0$20 , 1 , 0 0$20 , 3 , 0 , 0 , 15 15$0 , 0 , 0 , 3 3$0 ] ;
 534: LD_ADDR_EXP 6
 538: PUSH
 539: LD_INT 1
 541: PUSH
 542: LD_INT 15
 544: PUSH
 545: LD_INT 4
 547: PUSH
 548: LD_INT 100
 550: PUSH
 551: LD_INT 30
 553: PUSH
 554: LD_INT 0
 556: PUSH
 557: EMPTY
 558: LIST
 559: LIST
 560: LIST
 561: PUSH
 562: LD_INT 3
 564: PUSH
 565: LD_INT 1
 567: PUSH
 568: LD_INT 2
 570: PUSH
 571: LD_INT 250
 573: PUSH
 574: LD_INT 0
 576: PUSH
 577: LD_INT 0
 579: PUSH
 580: LD_INT 1
 582: PUSH
 583: LD_INT 700
 585: PUSH
 586: LD_INT 1
 588: PUSH
 589: LD_INT 700
 591: PUSH
 592: LD_INT 3
 594: PUSH
 595: LD_INT 0
 597: PUSH
 598: LD_INT 0
 600: PUSH
 601: LD_INT 31500
 603: PUSH
 604: LD_INT 0
 606: PUSH
 607: LD_INT 0
 609: PUSH
 610: LD_INT 6300
 612: PUSH
 613: EMPTY
 614: LIST
 615: LIST
 616: LIST
 617: LIST
 618: LIST
 619: LIST
 620: LIST
 621: LIST
 622: LIST
 623: LIST
 624: LIST
 625: LIST
 626: LIST
 627: LIST
 628: LIST
 629: LIST
 630: LIST
 631: LIST
 632: LIST
 633: LIST
 634: LIST
 635: ST_TO_ADDR
// mpGameType := GameTypeNormal ;
 636: LD_ADDR_EXP 3
 640: PUSH
 641: LD_INT 1
 643: ST_TO_ADDR
// your_side := 1 ;
 644: LD_ADDR_OWVAR 2
 648: PUSH
 649: LD_INT 1
 651: ST_TO_ADDR
// mpSidePositions := [ 1 , 2 , 3 , 4 , 0 , 0 , 0 , 0 ] ;
 652: LD_ADDR_EXP 7
 656: PUSH
 657: LD_INT 1
 659: PUSH
 660: LD_INT 2
 662: PUSH
 663: LD_INT 3
 665: PUSH
 666: LD_INT 4
 668: PUSH
 669: LD_INT 0
 671: PUSH
 672: LD_INT 0
 674: PUSH
 675: LD_INT 0
 677: PUSH
 678: LD_INT 0
 680: PUSH
 681: EMPTY
 682: LIST
 683: LIST
 684: LIST
 685: LIST
 686: LIST
 687: LIST
 688: LIST
 689: LIST
 690: ST_TO_ADDR
// mpSideTeams := [ 1 , 1 , 2 , 2 , 0 , 0 , 0 , 0 ] ;
 691: LD_ADDR_EXP 8
 695: PUSH
 696: LD_INT 1
 698: PUSH
 699: LD_INT 1
 701: PUSH
 702: LD_INT 2
 704: PUSH
 705: LD_INT 2
 707: PUSH
 708: LD_INT 0
 710: PUSH
 711: LD_INT 0
 713: PUSH
 714: LD_INT 0
 716: PUSH
 717: LD_INT 0
 719: PUSH
 720: EMPTY
 721: LIST
 722: LIST
 723: LIST
 724: LIST
 725: LIST
 726: LIST
 727: LIST
 728: LIST
 729: ST_TO_ADDR
// mpSideNations := [ 3 , 3 , 3 , 3 , 0 , 0 , 0 , 0 ] ;
 730: LD_ADDR_EXP 9
 734: PUSH
 735: LD_INT 3
 737: PUSH
 738: LD_INT 3
 740: PUSH
 741: LD_INT 3
 743: PUSH
 744: LD_INT 3
 746: PUSH
 747: LD_INT 0
 749: PUSH
 750: LD_INT 0
 752: PUSH
 753: LD_INT 0
 755: PUSH
 756: LD_INT 0
 758: PUSH
 759: EMPTY
 760: LIST
 761: LIST
 762: LIST
 763: LIST
 764: LIST
 765: LIST
 766: LIST
 767: LIST
 768: ST_TO_ADDR
// mpTeams := [ [ 1 , 2 ] , [ 3 , 4 ] ] ;
 769: LD_ADDR_EXP 10
 773: PUSH
 774: LD_INT 1
 776: PUSH
 777: LD_INT 2
 779: PUSH
 780: EMPTY
 781: LIST
 782: LIST
 783: PUSH
 784: LD_INT 3
 786: PUSH
 787: LD_INT 4
 789: PUSH
 790: EMPTY
 791: LIST
 792: LIST
 793: PUSH
 794: EMPTY
 795: LIST
 796: LIST
 797: ST_TO_ADDR
// mpTeamGame := true ;
 798: LD_ADDR_EXP 11
 802: PUSH
 803: LD_INT 1
 805: ST_TO_ADDR
// mpMapSize := [ 100 , 120 ] ;
 806: LD_ADDR_EXP 29
 810: PUSH
 811: LD_INT 100
 813: PUSH
 814: LD_INT 120
 816: PUSH
 817: EMPTY
 818: LIST
 819: LIST
 820: ST_TO_ADDR
// end ;
 821: LD_VAR 0 1
 825: RET
// export kingArea , kingCamArea ; export function GetMultiplayerMapData ( gameType ) ; var i , all , area , hasOil , hasSib , baseLevel , startPos ; begin
 826: LD_INT 0
 828: PPUSH
 829: PPUSH
 830: PPUSH
 831: PPUSH
 832: PPUSH
 833: PPUSH
 834: PPUSH
 835: PPUSH
// mpBuildUpAreas := [ BaseArea1 , BaseArea2 , BaseArea3 , BaseArea4 ] ;
 836: LD_ADDR_EXP 19
 840: PUSH
 841: LD_INT 5
 843: PUSH
 844: LD_INT 7
 846: PUSH
 847: LD_INT 6
 849: PUSH
 850: LD_INT 8
 852: PUSH
 853: EMPTY
 854: LIST
 855: LIST
 856: LIST
 857: LIST
 858: ST_TO_ADDR
// mpMarkedAreas := [ ] union mpBuildUpAreas ;
 859: LD_ADDR_EXP 18
 863: PUSH
 864: EMPTY
 865: PUSH
 866: LD_EXP 19
 870: UNION
 871: ST_TO_ADDR
// if gameType = GameTypeSurvival then
 872: LD_VAR 0 1
 876: PUSH
 877: LD_INT 2
 879: EQUAL
 880: IFFALSE 892
// baseLevel := 1 else
 882: LD_ADDR_VAR 0 8
 886: PUSH
 887: LD_INT 1
 889: ST_TO_ADDR
 890: GO 906
// baseLevel := mpGameSettings [ 1 ] ;
 892: LD_ADDR_VAR 0 8
 896: PUSH
 897: LD_EXP 6
 901: PUSH
 902: LD_INT 1
 904: ARRAY
 905: ST_TO_ADDR
// mpPeopleAmount := mpGameSettings [ 2 ] ;
 906: LD_ADDR_EXP 24
 910: PUSH
 911: LD_EXP 6
 915: PUSH
 916: LD_INT 2
 918: ARRAY
 919: ST_TO_ADDR
// mpPeopleSkill := mpGameSettings [ 3 ] ;
 920: LD_ADDR_EXP 25
 924: PUSH
 925: LD_EXP 6
 929: PUSH
 930: LD_INT 3
 932: ARRAY
 933: ST_TO_ADDR
// mpStartingResources := mpGameSettings [ 4 ] ;
 934: LD_ADDR_EXP 15
 938: PUSH
 939: LD_EXP 6
 943: PUSH
 944: LD_INT 4
 946: ARRAY
 947: ST_TO_ADDR
// mpShipments := mpGameSettings [ 5 ] ;
 948: LD_ADDR_EXP 27
 952: PUSH
 953: LD_EXP 6
 957: PUSH
 958: LD_INT 5
 960: ARRAY
 961: ST_TO_ADDR
// hasOil := mpGameSettings [ 6 ] > 0 ;
 962: LD_ADDR_VAR 0 6
 966: PUSH
 967: LD_EXP 6
 971: PUSH
 972: LD_INT 6
 974: ARRAY
 975: PUSH
 976: LD_INT 0
 978: GREATER
 979: ST_TO_ADDR
// hasSib := mpGameSettings [ 7 ] > 0 ;
 980: LD_ADDR_VAR 0 7
 984: PUSH
 985: LD_EXP 6
 989: PUSH
 990: LD_INT 7
 992: ARRAY
 993: PUSH
 994: LD_INT 0
 996: GREATER
 997: ST_TO_ADDR
// mpKingArea := 0 ;
 998: LD_ADDR_EXP 34
1002: PUSH
1003: LD_INT 0
1005: ST_TO_ADDR
// mpPoints := 0 ;
1006: LD_ADDR_EXP 35
1010: PUSH
1011: LD_INT 0
1013: ST_TO_ADDR
// mpEmissions := 0 ;
1014: LD_ADDR_EXP 37
1018: PUSH
1019: LD_INT 0
1021: ST_TO_ADDR
// kingArea := 0 ;
1022: LD_ADDR_EXP 1
1026: PUSH
1027: LD_INT 0
1029: ST_TO_ADDR
// kingCamArea := 0 ;
1030: LD_ADDR_EXP 2
1034: PUSH
1035: LD_INT 0
1037: ST_TO_ADDR
// if mpGameSettings [ 9 ] then
1038: LD_EXP 6
1042: PUSH
1043: LD_INT 9
1045: ARRAY
1046: IFFALSE 1249
// begin mpVehicles := [ [ [ us_light_wheeled , engine_combustion , control_manual , us_machine_gun ] , [ us_light_wheeled , engine_combustion , control_manual , us_light_gun ] , [ us_heavy_tracked , engine_combustion , control_manual , us_bulldozer , nation_american ] ] , [ [ ar_light_trike , engine_combustion , control_manual , ar_double_machine_gun ] , [ ar_light_trike , engine_combustion , control_manual , ar_light_gun ] , [ us_heavy_tracked , engine_combustion , control_manual , us_bulldozer , nation_american ] ] , [ [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun ] , [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun ] , [ us_heavy_tracked , engine_combustion , control_manual , us_bulldozer , nation_american ] ] ] ;
1048: LD_ADDR_EXP 36
1052: PUSH
1053: LD_INT 1
1055: PUSH
1056: LD_INT 1
1058: PUSH
1059: LD_INT 1
1061: PUSH
1062: LD_INT 2
1064: PUSH
1065: EMPTY
1066: LIST
1067: LIST
1068: LIST
1069: LIST
1070: PUSH
1071: LD_INT 1
1073: PUSH
1074: LD_INT 1
1076: PUSH
1077: LD_INT 1
1079: PUSH
1080: LD_INT 3
1082: PUSH
1083: EMPTY
1084: LIST
1085: LIST
1086: LIST
1087: LIST
1088: PUSH
1089: LD_INT 4
1091: PUSH
1092: LD_INT 1
1094: PUSH
1095: LD_INT 1
1097: PUSH
1098: LD_INT 14
1100: PUSH
1101: LD_INT 1
1103: PUSH
1104: EMPTY
1105: LIST
1106: LIST
1107: LIST
1108: LIST
1109: LIST
1110: PUSH
1111: EMPTY
1112: LIST
1113: LIST
1114: LIST
1115: PUSH
1116: LD_INT 12
1118: PUSH
1119: LD_INT 1
1121: PUSH
1122: LD_INT 1
1124: PUSH
1125: LD_INT 24
1127: PUSH
1128: EMPTY
1129: LIST
1130: LIST
1131: LIST
1132: LIST
1133: PUSH
1134: LD_INT 12
1136: PUSH
1137: LD_INT 1
1139: PUSH
1140: LD_INT 1
1142: PUSH
1143: LD_INT 23
1145: PUSH
1146: EMPTY
1147: LIST
1148: LIST
1149: LIST
1150: LIST
1151: PUSH
1152: LD_INT 4
1154: PUSH
1155: LD_INT 1
1157: PUSH
1158: LD_INT 1
1160: PUSH
1161: LD_INT 14
1163: PUSH
1164: LD_INT 1
1166: PUSH
1167: EMPTY
1168: LIST
1169: LIST
1170: LIST
1171: LIST
1172: LIST
1173: PUSH
1174: EMPTY
1175: LIST
1176: LIST
1177: LIST
1178: PUSH
1179: LD_INT 21
1181: PUSH
1182: LD_INT 1
1184: PUSH
1185: LD_INT 1
1187: PUSH
1188: LD_INT 42
1190: PUSH
1191: EMPTY
1192: LIST
1193: LIST
1194: LIST
1195: LIST
1196: PUSH
1197: LD_INT 21
1199: PUSH
1200: LD_INT 1
1202: PUSH
1203: LD_INT 1
1205: PUSH
1206: LD_INT 42
1208: PUSH
1209: EMPTY
1210: LIST
1211: LIST
1212: LIST
1213: LIST
1214: PUSH
1215: LD_INT 4
1217: PUSH
1218: LD_INT 1
1220: PUSH
1221: LD_INT 1
1223: PUSH
1224: LD_INT 14
1226: PUSH
1227: LD_INT 1
1229: PUSH
1230: EMPTY
1231: LIST
1232: LIST
1233: LIST
1234: LIST
1235: LIST
1236: PUSH
1237: EMPTY
1238: LIST
1239: LIST
1240: LIST
1241: PUSH
1242: EMPTY
1243: LIST
1244: LIST
1245: LIST
1246: ST_TO_ADDR
// end else
1247: GO 1334
// begin mpVehicles := [ [ [ us_heavy_tracked , engine_combustion , control_manual , us_bulldozer , nation_american ] ] , [ [ us_heavy_tracked , engine_combustion , control_manual , us_bulldozer , nation_american ] ] , [ [ us_heavy_tracked , engine_combustion , control_manual , us_bulldozer , nation_american ] ] ] ;
1249: LD_ADDR_EXP 36
1253: PUSH
1254: LD_INT 4
1256: PUSH
1257: LD_INT 1
1259: PUSH
1260: LD_INT 1
1262: PUSH
1263: LD_INT 14
1265: PUSH
1266: LD_INT 1
1268: PUSH
1269: EMPTY
1270: LIST
1271: LIST
1272: LIST
1273: LIST
1274: LIST
1275: PUSH
1276: EMPTY
1277: LIST
1278: PUSH
1279: LD_INT 4
1281: PUSH
1282: LD_INT 1
1284: PUSH
1285: LD_INT 1
1287: PUSH
1288: LD_INT 14
1290: PUSH
1291: LD_INT 1
1293: PUSH
1294: EMPTY
1295: LIST
1296: LIST
1297: LIST
1298: LIST
1299: LIST
1300: PUSH
1301: EMPTY
1302: LIST
1303: PUSH
1304: LD_INT 4
1306: PUSH
1307: LD_INT 1
1309: PUSH
1310: LD_INT 1
1312: PUSH
1313: LD_INT 14
1315: PUSH
1316: LD_INT 1
1318: PUSH
1319: EMPTY
1320: LIST
1321: LIST
1322: LIST
1323: LIST
1324: LIST
1325: PUSH
1326: EMPTY
1327: LIST
1328: PUSH
1329: EMPTY
1330: LIST
1331: LIST
1332: LIST
1333: ST_TO_ADDR
// end ; mpSharedVision := mpGameSettings [ 11 ] ;
1334: LD_ADDR_EXP 16
1338: PUSH
1339: LD_EXP 6
1343: PUSH
1344: LD_INT 11
1346: ARRAY
1347: ST_TO_ADDR
// mpBattleFlag := mpGameSettings [ 12 ] ;
1348: LD_ADDR_EXP 22
1352: PUSH
1353: LD_EXP 6
1357: PUSH
1358: LD_INT 12
1360: ARRAY
1361: ST_TO_ADDR
// mpSibDetection := mpGameSettings [ 13 ] ;
1362: LD_ADDR_EXP 26
1366: PUSH
1367: LD_EXP 6
1371: PUSH
1372: LD_INT 13
1374: ARRAY
1375: ST_TO_ADDR
// mpRespawn := mpGameSettings [ 14 ] ;
1376: LD_ADDR_EXP 33
1380: PUSH
1381: LD_EXP 6
1385: PUSH
1386: LD_INT 14
1388: ARRAY
1389: ST_TO_ADDR
// mpApemans := mpGameSettings [ 15 ] ;
1390: LD_ADDR_EXP 30
1394: PUSH
1395: LD_EXP 6
1399: PUSH
1400: LD_INT 15
1402: ARRAY
1403: ST_TO_ADDR
// mpSibBomb := mpGameSettings [ 18 ] ;
1404: LD_ADDR_EXP 28
1408: PUSH
1409: LD_EXP 6
1413: PUSH
1414: LD_INT 18
1416: ARRAY
1417: ST_TO_ADDR
// mpBuildUpTime := mpGameSettings [ 21 ] ;
1418: LD_ADDR_EXP 20
1422: PUSH
1423: LD_EXP 6
1427: PUSH
1428: LD_INT 21
1430: ARRAY
1431: ST_TO_ADDR
// mpApemansArea := [ ApeArea1 , ApeArea2 , ApeArea3 , ApeArea4 ] ;
1432: LD_ADDR_EXP 31
1436: PUSH
1437: LD_INT 10
1439: PUSH
1440: LD_INT 11
1442: PUSH
1443: LD_INT 12
1445: PUSH
1446: LD_INT 13
1448: PUSH
1449: EMPTY
1450: LIST
1451: LIST
1452: LIST
1453: LIST
1454: ST_TO_ADDR
// startPos := [ GetBuildingFromArea ( DepotArea1 , 2 ) , GetBuildingFromArea ( DepotArea2 , 0 ) , GetBuildingFromArea ( DepotArea3 , 3 ) , GetBuildingFromArea ( DepotArea4 , 5 ) ] ;
1455: LD_ADDR_VAR 0 9
1459: PUSH
1460: LD_INT 14
1462: PPUSH
1463: LD_INT 2
1465: PPUSH
1466: CALL 52665 0 2
1470: PUSH
1471: LD_INT 15
1473: PPUSH
1474: LD_INT 0
1476: PPUSH
1477: CALL 52665 0 2
1481: PUSH
1482: LD_INT 16
1484: PPUSH
1485: LD_INT 3
1487: PPUSH
1488: CALL 52665 0 2
1492: PUSH
1493: LD_INT 17
1495: PPUSH
1496: LD_INT 5
1498: PPUSH
1499: CALL 52665 0 2
1503: PUSH
1504: EMPTY
1505: LIST
1506: LIST
1507: LIST
1508: LIST
1509: ST_TO_ADDR
// for i := 1 to Count ( startPos ) do
1510: LD_ADDR_VAR 0 3
1514: PUSH
1515: DOUBLE
1516: LD_INT 1
1518: DEC
1519: ST_TO_ADDR
1520: LD_VAR 0 9
1524: PPUSH
1525: CALL 12014 0 1
1529: PUSH
1530: FOR_TO
1531: IFFALSE 1635
// mpStartPos := Replace ( mpStartPos , i , [ ShiftX ( startPos [ i ] [ 1 ] , startPos [ i ] [ 3 ] , 10 ) , ShiftY ( startPos [ i ] [ 2 ] , startPos [ i ] [ 3 ] , 10 ) ] ) ;
1533: LD_ADDR_EXP 21
1537: PUSH
1538: LD_EXP 21
1542: PPUSH
1543: LD_VAR 0 3
1547: PPUSH
1548: LD_VAR 0 9
1552: PUSH
1553: LD_VAR 0 3
1557: ARRAY
1558: PUSH
1559: LD_INT 1
1561: ARRAY
1562: PPUSH
1563: LD_VAR 0 9
1567: PUSH
1568: LD_VAR 0 3
1572: ARRAY
1573: PUSH
1574: LD_INT 3
1576: ARRAY
1577: PPUSH
1578: LD_INT 10
1580: PPUSH
1581: CALL_OW 272
1585: PUSH
1586: LD_VAR 0 9
1590: PUSH
1591: LD_VAR 0 3
1595: ARRAY
1596: PUSH
1597: LD_INT 2
1599: ARRAY
1600: PPUSH
1601: LD_VAR 0 9
1605: PUSH
1606: LD_VAR 0 3
1610: ARRAY
1611: PUSH
1612: LD_INT 3
1614: ARRAY
1615: PPUSH
1616: LD_INT 10
1618: PPUSH
1619: CALL_OW 273
1623: PUSH
1624: EMPTY
1625: LIST
1626: LIST
1627: PPUSH
1628: CALL_OW 1
1632: ST_TO_ADDR
1633: GO 1530
1635: POP
1636: POP
// if baseLevel >= 1 then
1637: LD_VAR 0 8
1641: PUSH
1642: LD_INT 1
1644: GREATEREQUAL
1645: IFFALSE 1657
// mpDepots := startPos ;
1647: LD_ADDR_EXP 14
1651: PUSH
1652: LD_VAR 0 9
1656: ST_TO_ADDR
// if hasOil then
1657: LD_VAR 0 6
1661: IFFALSE 1744
// begin all := ( mpGameSettings [ 6 ] = 2 ) ;
1663: LD_ADDR_VAR 0 4
1667: PUSH
1668: LD_EXP 6
1672: PUSH
1673: LD_INT 6
1675: ARRAY
1676: PUSH
1677: LD_INT 2
1679: EQUAL
1680: ST_TO_ADDR
// mpOilDeposits := [ GetSourcesFromArea ( OilArea1 , all ) , GetSourcesFromArea ( OilArea2 , all ) , GetSourcesFromArea ( OilArea3 , all ) , GetSourcesFromArea ( OilArea4 , all ) ] ;
1681: LD_ADDR_EXP 12
1685: PUSH
1686: LD_INT 18
1688: PPUSH
1689: LD_VAR 0 4
1693: PPUSH
1694: CALL 52498 0 2
1698: PUSH
1699: LD_INT 19
1701: PPUSH
1702: LD_VAR 0 4
1706: PPUSH
1707: CALL 52498 0 2
1711: PUSH
1712: LD_INT 20
1714: PPUSH
1715: LD_VAR 0 4
1719: PPUSH
1720: CALL 52498 0 2
1724: PUSH
1725: LD_INT 21
1727: PPUSH
1728: LD_VAR 0 4
1732: PPUSH
1733: CALL 52498 0 2
1737: PUSH
1738: EMPTY
1739: LIST
1740: LIST
1741: LIST
1742: LIST
1743: ST_TO_ADDR
// end ; if hasSib then
1744: LD_VAR 0 7
1748: IFFALSE 1831
// begin all := ( mpGameSettings [ 7 ] = 2 ) ;
1750: LD_ADDR_VAR 0 4
1754: PUSH
1755: LD_EXP 6
1759: PUSH
1760: LD_INT 7
1762: ARRAY
1763: PUSH
1764: LD_INT 2
1766: EQUAL
1767: ST_TO_ADDR
// mpSibDeposits := [ GetSourcesFromArea ( SibArea1 , all ) , GetSourcesFromArea ( SibArea2 , all ) , GetSourcesFromArea ( SibArea3 , all ) , GetSourcesFromArea ( SibArea4 , all ) ] ;
1768: LD_ADDR_EXP 13
1772: PUSH
1773: LD_INT 22
1775: PPUSH
1776: LD_VAR 0 4
1780: PPUSH
1781: CALL 52498 0 2
1785: PUSH
1786: LD_INT 23
1788: PPUSH
1789: LD_VAR 0 4
1793: PPUSH
1794: CALL 52498 0 2
1798: PUSH
1799: LD_INT 24
1801: PPUSH
1802: LD_VAR 0 4
1806: PPUSH
1807: CALL 52498 0 2
1811: PUSH
1812: LD_INT 25
1814: PPUSH
1815: LD_VAR 0 4
1819: PPUSH
1820: CALL 52498 0 2
1824: PUSH
1825: EMPTY
1826: LIST
1827: LIST
1828: LIST
1829: LIST
1830: ST_TO_ADDR
// end ; PlaceTreesToArea ( BigForestArea , [ 21 , 22 , 24 , 21 , 22 , 24 , 38 , 39 ] , rand ( 500 , 570 ) , 50 , 2 ) ;
1831: LD_INT 1
1833: PPUSH
1834: LD_INT 21
1836: PUSH
1837: LD_INT 22
1839: PUSH
1840: LD_INT 24
1842: PUSH
1843: LD_INT 21
1845: PUSH
1846: LD_INT 22
1848: PUSH
1849: LD_INT 24
1851: PUSH
1852: LD_INT 38
1854: PUSH
1855: LD_INT 39
1857: PUSH
1858: EMPTY
1859: LIST
1860: LIST
1861: LIST
1862: LIST
1863: LIST
1864: LIST
1865: LIST
1866: LIST
1867: PPUSH
1868: LD_INT 500
1870: PPUSH
1871: LD_INT 570
1873: PPUSH
1874: CALL_OW 12
1878: PPUSH
1879: LD_INT 50
1881: PPUSH
1882: LD_INT 2
1884: PPUSH
1885: CALL_OW 352
// if baseLevel then
1889: LD_VAR 0 8
1893: IFFALSE 1905
// area := BushForestSmallArea else
1895: LD_ADDR_VAR 0 5
1899: PUSH
1900: LD_INT 4
1902: ST_TO_ADDR
1903: GO 1913
// area := BushForestBigArea ;
1905: LD_ADDR_VAR 0 5
1909: PUSH
1910: LD_INT 3
1912: ST_TO_ADDR
// PlaceTreesToArea ( area , [ 38 , 39 , 37 ] , rand ( 300 , 350 ) , 10 , 3 ) ;
1913: LD_VAR 0 5
1917: PPUSH
1918: LD_INT 38
1920: PUSH
1921: LD_INT 39
1923: PUSH
1924: LD_INT 37
1926: PUSH
1927: EMPTY
1928: LIST
1929: LIST
1930: LIST
1931: PPUSH
1932: LD_INT 300
1934: PPUSH
1935: LD_INT 350
1937: PPUSH
1938: CALL_OW 12
1942: PPUSH
1943: LD_INT 10
1945: PPUSH
1946: LD_INT 3
1948: PPUSH
1949: CALL_OW 352
// PlaceTreesToArea ( BigForestArea , [ 38 , 39 , 37 ] , 80 , 10 , 3 ) ;
1953: LD_INT 1
1955: PPUSH
1956: LD_INT 38
1958: PUSH
1959: LD_INT 39
1961: PUSH
1962: LD_INT 37
1964: PUSH
1965: EMPTY
1966: LIST
1967: LIST
1968: LIST
1969: PPUSH
1970: LD_INT 80
1972: PPUSH
1973: LD_INT 10
1975: PPUSH
1976: LD_INT 3
1978: PPUSH
1979: CALL_OW 352
// end ;
1983: LD_VAR 0 2
1987: RET
// every 0 0$2 marked mpActive do var i , x , tmp , time , areas , normalTime , delayTime , maxTime ;
1988: GO 1990
1990: DISABLE
1991: LD_INT 0
1993: PPUSH
1994: PPUSH
1995: PPUSH
1996: PPUSH
1997: PPUSH
1998: PPUSH
1999: PPUSH
2000: PPUSH
// begin if not mpShipments then
2001: LD_EXP 27
2005: NOT
2006: IFFALSE 2010
// exit ;
2008: GO 2441
// case mpShipments of 1 :
2010: LD_EXP 27
2014: PUSH
2015: LD_INT 1
2017: DOUBLE
2018: EQUAL
2019: IFTRUE 2023
2021: GO 2058
2023: POP
// begin time := 0 0$30 ;
2024: LD_ADDR_VAR 0 4
2028: PUSH
2029: LD_INT 1050
2031: ST_TO_ADDR
// normalTime := 0 0$30 ;
2032: LD_ADDR_VAR 0 6
2036: PUSH
2037: LD_INT 1050
2039: ST_TO_ADDR
// maxTime := 1 1$20 ;
2040: LD_ADDR_VAR 0 8
2044: PUSH
2045: LD_INT 2800
2047: ST_TO_ADDR
// delayTime := 0 0$5 ;
2048: LD_ADDR_VAR 0 7
2052: PUSH
2053: LD_INT 175
2055: ST_TO_ADDR
// end ; 2 :
2056: GO 2188
2058: LD_INT 2
2060: DOUBLE
2061: EQUAL
2062: IFTRUE 2066
2064: GO 2101
2066: POP
// begin time := 0 0$25 ;
2067: LD_ADDR_VAR 0 4
2071: PUSH
2072: LD_INT 875
2074: ST_TO_ADDR
// normalTime := 0 0$25 ;
2075: LD_ADDR_VAR 0 6
2079: PUSH
2080: LD_INT 875
2082: ST_TO_ADDR
// maxTime := 1 1$10 ;
2083: LD_ADDR_VAR 0 8
2087: PUSH
2088: LD_INT 2450
2090: ST_TO_ADDR
// delayTime := 0 0$4 ;
2091: LD_ADDR_VAR 0 7
2095: PUSH
2096: LD_INT 140
2098: ST_TO_ADDR
// end ; 3 :
2099: GO 2188
2101: LD_INT 3
2103: DOUBLE
2104: EQUAL
2105: IFTRUE 2109
2107: GO 2144
2109: POP
// begin time := 0 0$20 ;
2110: LD_ADDR_VAR 0 4
2114: PUSH
2115: LD_INT 700
2117: ST_TO_ADDR
// normalTime := 0 0$20 ;
2118: LD_ADDR_VAR 0 6
2122: PUSH
2123: LD_INT 700
2125: ST_TO_ADDR
// maxTime := 1 1$00 ;
2126: LD_ADDR_VAR 0 8
2130: PUSH
2131: LD_INT 2100
2133: ST_TO_ADDR
// delayTime := 0 0$3 ;
2134: LD_ADDR_VAR 0 7
2138: PUSH
2139: LD_INT 105
2141: ST_TO_ADDR
// end ; 4 :
2142: GO 2188
2144: LD_INT 4
2146: DOUBLE
2147: EQUAL
2148: IFTRUE 2152
2150: GO 2187
2152: POP
// begin time := 0 0$15 ;
2153: LD_ADDR_VAR 0 4
2157: PUSH
2158: LD_INT 525
2160: ST_TO_ADDR
// normalTime := 0 0$15 ;
2161: LD_ADDR_VAR 0 6
2165: PUSH
2166: LD_INT 525
2168: ST_TO_ADDR
// maxTime := 0 0$55 ;
2169: LD_ADDR_VAR 0 8
2173: PUSH
2174: LD_INT 1925
2176: ST_TO_ADDR
// delayTime := 0 0$2 ;
2177: LD_ADDR_VAR 0 7
2181: PUSH
2182: LD_INT 70
2184: ST_TO_ADDR
// end ; end ;
2185: GO 2188
2187: POP
// tmp := [ BaseArea1 , BaseArea2 , BaseArea3 , BaseArea4 ] ;
2188: LD_ADDR_VAR 0 3
2192: PUSH
2193: LD_INT 5
2195: PUSH
2196: LD_INT 7
2198: PUSH
2199: LD_INT 6
2201: PUSH
2202: LD_INT 8
2204: PUSH
2205: EMPTY
2206: LIST
2207: LIST
2208: LIST
2209: LIST
2210: ST_TO_ADDR
// areas := [ Center1 , Center2 , Center3 , Center4 ] ;
2211: LD_ADDR_VAR 0 5
2215: PUSH
2216: LD_INT 26
2218: PUSH
2219: LD_INT 27
2221: PUSH
2222: LD_INT 29
2224: PUSH
2225: LD_INT 28
2227: PUSH
2228: EMPTY
2229: LIST
2230: LIST
2231: LIST
2232: LIST
2233: ST_TO_ADDR
// for i := 1 to 8 do
2234: LD_ADDR_VAR 0 1
2238: PUSH
2239: DOUBLE
2240: LD_INT 1
2242: DEC
2243: ST_TO_ADDR
2244: LD_INT 8
2246: PUSH
2247: FOR_TO
2248: IFFALSE 2295
// begin if not mpSidePositions [ i ] then
2250: LD_EXP 7
2254: PUSH
2255: LD_VAR 0 1
2259: ARRAY
2260: NOT
2261: IFFALSE 2265
// continue ;
2263: GO 2247
// areas := areas ^ tmp [ mpSidePositions [ i ] ] ;
2265: LD_ADDR_VAR 0 5
2269: PUSH
2270: LD_VAR 0 5
2274: PUSH
2275: LD_VAR 0 3
2279: PUSH
2280: LD_EXP 7
2284: PUSH
2285: LD_VAR 0 1
2289: ARRAY
2290: ARRAY
2291: ADD
2292: ST_TO_ADDR
// end ;
2293: GO 2247
2295: POP
2296: POP
// x := 1 ;
2297: LD_ADDR_VAR 0 2
2301: PUSH
2302: LD_INT 1
2304: ST_TO_ADDR
// repeat wait ( time ) ;
2305: LD_VAR 0 4
2309: PPUSH
2310: CALL_OW 67
// x := Inc ( x ) ;
2314: LD_ADDR_VAR 0 2
2318: PUSH
2319: LD_VAR 0 2
2323: PPUSH
2324: CALL 49319 0 1
2328: ST_TO_ADDR
// if x > 5 then
2329: LD_VAR 0 2
2333: PUSH
2334: LD_INT 5
2336: GREATER
2337: IFFALSE 2347
// x := 1 ;
2339: LD_ADDR_VAR 0 2
2343: PUSH
2344: LD_INT 1
2346: ST_TO_ADDR
// for i in areas do
2347: LD_ADDR_VAR 0 1
2351: PUSH
2352: LD_VAR 0 5
2356: PUSH
2357: FOR_IN
2358: IFFALSE 2397
// begin if GetResourceArea ( i , mat_cans ) < 20 then
2360: LD_VAR 0 1
2364: PPUSH
2365: LD_INT 1
2367: PPUSH
2368: CALL_OW 287
2372: PUSH
2373: LD_INT 20
2375: LESS
2376: IFFALSE 2395
// begin CreateCratesArea ( x , i , true ) ;
2378: LD_VAR 0 2
2382: PPUSH
2383: LD_VAR 0 1
2387: PPUSH
2388: LD_INT 1
2390: PPUSH
2391: CALL_OW 55
// end ; end ;
2395: GO 2357
2397: POP
2398: POP
// time := time + delayTime ;
2399: LD_ADDR_VAR 0 4
2403: PUSH
2404: LD_VAR 0 4
2408: PUSH
2409: LD_VAR 0 7
2413: PLUS
2414: ST_TO_ADDR
// if time > maxTime then
2415: LD_VAR 0 4
2419: PUSH
2420: LD_VAR 0 8
2424: GREATER
2425: IFFALSE 2437
// time := normalTime ;
2427: LD_ADDR_VAR 0 4
2431: PUSH
2432: LD_VAR 0 6
2436: ST_TO_ADDR
// until false ;
2437: LD_INT 0
2439: IFFALSE 2305
// end ; end_of_file
2441: PPOPN 8
2443: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
2444: LD_VAR 0 1
2448: PPUSH
2449: CALL 53463 0 1
// Multiplayer_UnitDestroyed ( un ) ;
2453: LD_VAR 0 1
2457: PPUSH
2458: CALL 7676 0 1
// end ;
2462: PPOPN 1
2464: END
// on UnitKamikazed ( un ) do begin SOS_UnitKamikazed ( un ) ;
2465: LD_VAR 0 1
2469: PPUSH
2470: CALL 53480 0 1
// end ;
2474: PPOPN 1
2476: END
// on BuildingComplete ( b ) do Multiplayer_BuildingComplete ( b ) ;
2477: LD_VAR 0 1
2481: PPUSH
2482: CALL 8347 0 1
2486: PPOPN 1
2488: END
// on VehicleConstructed ( vehicle , factory ) do SOS_VehicleConstructed ( vehicle , factory ) ;
2489: LD_VAR 0 1
2493: PPUSH
2494: LD_VAR 0 2
2498: PPUSH
2499: CALL 53521 0 2
2503: PPOPN 2
2505: END
// on BuildingCaptured ( building , oldSide , unit ) do Multiplayer_BuildingCaptured ( building , oldSide , unit ) ; end_of_file
2506: LD_VAR 0 1
2510: PPUSH
2511: LD_VAR 0 2
2515: PPUSH
2516: LD_VAR 0 3
2520: PPUSH
2521: CALL 8400 0 3
2525: PPOPN 3
2527: END
// export mpGameType , mpGameSettingsKeys , mpGameSettingsValues , mpGameSettings , mpSidePositions , mpSideTeams , mpSideNations , mpTeams , mpTeamGame , mpOilDeposits , mpSibDeposits , mpDepots , mpStartingResources , mpSharedVision , mpBuildings , mpMarkedAreas , mpBuildUpAreas , mpBuildUpTime , mpStartPos , mpBattleFlag , mpBattleFlags , mpPeopleAmount , mpPeopleSkill , mpSibDetection , mpShipments , mpSibBomb , mpMapSize , mpApemans , mpApemansArea , mpApePosIndex , mpRespawn , mpKingArea , mpPoints , mpVehicles , mpEmissions , mpDisplayStrings , mpGameActive , mpRespawnPull , mpGlobalOilDeposits , mpGlobalSibDeposits , mpTeleports , mpArtifacts , mpBlockRespThread ; export function InitMultiplayer ; var i ; begin
2528: LD_INT 0
2530: PPUSH
2531: PPUSH
// disable ( mpActive ) ;
2532: LD_INT 100
2534: DISABLE_MARKED
// disable ( mpWin ) ;
2535: LD_INT 101
2537: DISABLE_MARKED
// disable ( mpLose ) ;
2538: LD_INT 102
2540: DISABLE_MARKED
// mpGameType := 0 ;
2541: LD_ADDR_EXP 3
2545: PUSH
2546: LD_INT 0
2548: ST_TO_ADDR
// mpGameSettings := [ ] ;
2549: LD_ADDR_EXP 6
2553: PUSH
2554: EMPTY
2555: ST_TO_ADDR
// mpGameSettingsKeys := [ ] ;
2556: LD_ADDR_EXP 4
2560: PUSH
2561: EMPTY
2562: ST_TO_ADDR
// mpGameSettingsValues := [ ] ;
2563: LD_ADDR_EXP 5
2567: PUSH
2568: EMPTY
2569: ST_TO_ADDR
// mpMapSize := [ 2 , 2 ] ;
2570: LD_ADDR_EXP 29
2574: PUSH
2575: LD_INT 2
2577: PUSH
2578: LD_INT 2
2580: PUSH
2581: EMPTY
2582: LIST
2583: LIST
2584: ST_TO_ADDR
// mpOilDeposits := [ ] ;
2585: LD_ADDR_EXP 12
2589: PUSH
2590: EMPTY
2591: ST_TO_ADDR
// mpSibDeposits := [ ] ;
2592: LD_ADDR_EXP 13
2596: PUSH
2597: EMPTY
2598: ST_TO_ADDR
// mpGlobalOilDeposits := [ ] ;
2599: LD_ADDR_EXP 41
2603: PUSH
2604: EMPTY
2605: ST_TO_ADDR
// mpGlobalSibDeposits := [ ] ;
2606: LD_ADDR_EXP 42
2610: PUSH
2611: EMPTY
2612: ST_TO_ADDR
// mpDepots := [ ] ;
2613: LD_ADDR_EXP 14
2617: PUSH
2618: EMPTY
2619: ST_TO_ADDR
// mpBuildings := [ ] ;
2620: LD_ADDR_EXP 17
2624: PUSH
2625: EMPTY
2626: ST_TO_ADDR
// mpMarkedAreas := [ ] ;
2627: LD_ADDR_EXP 18
2631: PUSH
2632: EMPTY
2633: ST_TO_ADDR
// mpBuildUpAreas := [ ] ;
2634: LD_ADDR_EXP 19
2638: PUSH
2639: EMPTY
2640: ST_TO_ADDR
// mpBuildUpTime := [ ] ;
2641: LD_ADDR_EXP 20
2645: PUSH
2646: EMPTY
2647: ST_TO_ADDR
// mpStartingResources := [ ] ;
2648: LD_ADDR_EXP 15
2652: PUSH
2653: EMPTY
2654: ST_TO_ADDR
// mpStartPos := [ ] ;
2655: LD_ADDR_EXP 21
2659: PUSH
2660: EMPTY
2661: ST_TO_ADDR
// mpBattleFlag := - 1 ;
2662: LD_ADDR_EXP 22
2666: PUSH
2667: LD_INT 1
2669: NEG
2670: ST_TO_ADDR
// mpBattleFlags := [ ] ;
2671: LD_ADDR_EXP 23
2675: PUSH
2676: EMPTY
2677: ST_TO_ADDR
// mpApemans := [ ] ;
2678: LD_ADDR_EXP 30
2682: PUSH
2683: EMPTY
2684: ST_TO_ADDR
// mpApemansArea := [ ] ;
2685: LD_ADDR_EXP 31
2689: PUSH
2690: EMPTY
2691: ST_TO_ADDR
// mpRespawn := [ ] ;
2692: LD_ADDR_EXP 33
2696: PUSH
2697: EMPTY
2698: ST_TO_ADDR
// mpKingArea := 0 ;
2699: LD_ADDR_EXP 34
2703: PUSH
2704: LD_INT 0
2706: ST_TO_ADDR
// mpPoints := [ ] ;
2707: LD_ADDR_EXP 35
2711: PUSH
2712: EMPTY
2713: ST_TO_ADDR
// mpVehicles := 0 ;
2714: LD_ADDR_EXP 36
2718: PUSH
2719: LD_INT 0
2721: ST_TO_ADDR
// mpShipments := 0 ;
2722: LD_ADDR_EXP 27
2726: PUSH
2727: LD_INT 0
2729: ST_TO_ADDR
// mpRespawnPull := [ [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
2730: LD_ADDR_EXP 40
2734: PUSH
2735: EMPTY
2736: PUSH
2737: EMPTY
2738: PUSH
2739: EMPTY
2740: PUSH
2741: EMPTY
2742: PUSH
2743: EMPTY
2744: PUSH
2745: EMPTY
2746: PUSH
2747: EMPTY
2748: PUSH
2749: EMPTY
2750: PUSH
2751: EMPTY
2752: LIST
2753: LIST
2754: LIST
2755: LIST
2756: LIST
2757: LIST
2758: LIST
2759: LIST
2760: ST_TO_ADDR
// mpApePosIndex := [ [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
2761: LD_ADDR_EXP 32
2765: PUSH
2766: EMPTY
2767: PUSH
2768: EMPTY
2769: PUSH
2770: EMPTY
2771: PUSH
2772: EMPTY
2773: PUSH
2774: EMPTY
2775: PUSH
2776: EMPTY
2777: PUSH
2778: EMPTY
2779: PUSH
2780: EMPTY
2781: PUSH
2782: EMPTY
2783: LIST
2784: LIST
2785: LIST
2786: LIST
2787: LIST
2788: LIST
2789: LIST
2790: LIST
2791: ST_TO_ADDR
// mpEmissions := 0 ;
2792: LD_ADDR_EXP 37
2796: PUSH
2797: LD_INT 0
2799: ST_TO_ADDR
// mpTeleports := 0 ;
2800: LD_ADDR_EXP 43
2804: PUSH
2805: LD_INT 0
2807: ST_TO_ADDR
// mpArtifacts := 0 ;
2808: LD_ADDR_EXP 44
2812: PUSH
2813: LD_INT 0
2815: ST_TO_ADDR
// mpPeopleSkill := 3 ;
2816: LD_ADDR_EXP 25
2820: PUSH
2821: LD_INT 3
2823: ST_TO_ADDR
// mpPeopleAmount := 15 ;
2824: LD_ADDR_EXP 24
2828: PUSH
2829: LD_INT 15
2831: ST_TO_ADDR
// mpDisplayStrings := 0 ;
2832: LD_ADDR_EXP 38
2836: PUSH
2837: LD_INT 0
2839: ST_TO_ADDR
// mpGameActive := false ;
2840: LD_ADDR_EXP 39
2844: PUSH
2845: LD_INT 0
2847: ST_TO_ADDR
// mpBlockRespThread := false ;
2848: LD_ADDR_EXP 45
2852: PUSH
2853: LD_INT 0
2855: ST_TO_ADDR
// for i := 1 to 32 do
2856: LD_ADDR_VAR 0 2
2860: PUSH
2861: DOUBLE
2862: LD_INT 1
2864: DEC
2865: ST_TO_ADDR
2866: LD_INT 32
2868: PUSH
2869: FOR_TO
2870: IFFALSE 2897
// mpGameSettings := Replace ( mpGameSettings , i , 0 ) ;
2872: LD_ADDR_EXP 6
2876: PUSH
2877: LD_EXP 6
2881: PPUSH
2882: LD_VAR 0 2
2886: PPUSH
2887: LD_INT 0
2889: PPUSH
2890: CALL_OW 1
2894: ST_TO_ADDR
2895: GO 2869
2897: POP
2898: POP
// end ;
2899: LD_VAR 0 1
2903: RET
// export function StartMultiplayer ; var i , j , b , x , y , side , pos , nation , ape , team , setting , resources , gameTypes ; begin
2904: LD_INT 0
2906: PPUSH
2907: PPUSH
2908: PPUSH
2909: PPUSH
2910: PPUSH
2911: PPUSH
2912: PPUSH
2913: PPUSH
2914: PPUSH
2915: PPUSH
2916: PPUSH
2917: PPUSH
2918: PPUSH
2919: PPUSH
// gameTypes := [ GameTypeNormal , GameTypeSurvival , GameTypeKing , GameTypeFamine ] ;
2920: LD_ADDR_VAR 0 14
2924: PUSH
2925: LD_INT 1
2927: PUSH
2928: LD_INT 2
2930: PUSH
2931: LD_INT 3
2933: PUSH
2934: LD_INT 5
2936: PUSH
2937: EMPTY
2938: LIST
2939: LIST
2940: LIST
2941: LIST
2942: ST_TO_ADDR
// for i in gameTypes do
2943: LD_ADDR_VAR 0 2
2947: PUSH
2948: LD_VAR 0 14
2952: PUSH
2953: FOR_IN
2954: IFFALSE 2963
// disable ( i ) ;
2956: LD_VAR 0 2
2960: DISABLE_MARKED
2961: GO 2953
2963: POP
2964: POP
// if Multiplayer then
2965: LD_OWVAR 4
2969: IFFALSE 3153
// begin mpGameType := mp_game_type ;
2971: LD_ADDR_EXP 3
2975: PUSH
2976: LD_OWVAR 6
2980: ST_TO_ADDR
// your_side := mp_player_side ;
2981: LD_ADDR_OWVAR 2
2985: PUSH
2986: LD_OWVAR 7
2990: ST_TO_ADDR
// mpSidePositions := mp_sides_positions ;
2991: LD_ADDR_EXP 7
2995: PUSH
2996: LD_OWVAR 17
3000: ST_TO_ADDR
// mpSideTeams := mp_sides_teams ;
3001: LD_ADDR_EXP 8
3005: PUSH
3006: LD_OWVAR 15
3010: ST_TO_ADDR
// mpSideNations := mp_sides_nations ;
3011: LD_ADDR_EXP 9
3015: PUSH
3016: LD_OWVAR 16
3020: ST_TO_ADDR
// mpTeams := mp_teams ;
3021: LD_ADDR_EXP 10
3025: PUSH
3026: LD_OWVAR 12
3030: ST_TO_ADDR
// for i := 1 to Count ( mpGameSettingsKeys ) do
3031: LD_ADDR_VAR 0 2
3035: PUSH
3036: DOUBLE
3037: LD_INT 1
3039: DEC
3040: ST_TO_ADDR
3041: LD_EXP 4
3045: PPUSH
3046: CALL 12014 0 1
3050: PUSH
3051: FOR_TO
3052: IFFALSE 3128
// begin setting := mpGameSettingsKeys [ i ] ;
3054: LD_ADDR_VAR 0 12
3058: PUSH
3059: LD_EXP 4
3063: PUSH
3064: LD_VAR 0 2
3068: ARRAY
3069: ST_TO_ADDR
// if setting then
3070: LD_VAR 0 12
3074: IFFALSE 3126
// mpGameSettings := Replace ( mpGameSettings , i , mpGameSettingsValues [ i ] [ GetMultiplayerSetting ( i - 1 ) + 1 ] ) ;
3076: LD_ADDR_EXP 6
3080: PUSH
3081: LD_EXP 6
3085: PPUSH
3086: LD_VAR 0 2
3090: PPUSH
3091: LD_EXP 5
3095: PUSH
3096: LD_VAR 0 2
3100: ARRAY
3101: PUSH
3102: LD_VAR 0 2
3106: PUSH
3107: LD_INT 1
3109: MINUS
3110: PPUSH
3111: CALL_OW 426
3115: PUSH
3116: LD_INT 1
3118: PLUS
3119: ARRAY
3120: PPUSH
3121: CALL_OW 1
3125: ST_TO_ADDR
// end ;
3126: GO 3051
3128: POP
3129: POP
// mpTeamGame := ( mpSideTeams diff [ 0 ] ) > 1 ;
3130: LD_ADDR_EXP 11
3134: PUSH
3135: LD_EXP 8
3139: PUSH
3140: LD_INT 0
3142: PUSH
3143: EMPTY
3144: LIST
3145: DIFF
3146: PUSH
3147: LD_INT 1
3149: GREATER
3150: ST_TO_ADDR
// end else
3151: GO 3153
// begin end ; GetMultiplayerMapData ( mpGameType ) ;
3153: LD_EXP 3
3157: PPUSH
3158: CALL 826 0 1
// if Count ( mpMarkedAreas ) then
3162: LD_EXP 18
3166: PPUSH
3167: CALL 12014 0 1
3171: IFFALSE 3202
// begin for i in mpMarkedAreas do
3173: LD_ADDR_VAR 0 2
3177: PUSH
3178: LD_EXP 18
3182: PUSH
3183: FOR_IN
3184: IFFALSE 3200
// SetAreaMapShow ( i , 0 ) ;
3186: LD_VAR 0 2
3190: PPUSH
3191: LD_INT 0
3193: PPUSH
3194: CALL_OW 424
3198: GO 3183
3200: POP
3201: POP
// end ; for i := 1 to 8 do
3202: LD_ADDR_VAR 0 2
3206: PUSH
3207: DOUBLE
3208: LD_INT 1
3210: DEC
3211: ST_TO_ADDR
3212: LD_INT 8
3214: PUSH
3215: FOR_TO
3216: IFFALSE 4552
// begin if not mpSidePositions [ i ] then
3218: LD_EXP 7
3222: PUSH
3223: LD_VAR 0 2
3227: ARRAY
3228: NOT
3229: IFFALSE 3233
// continue ;
3231: GO 3215
// side := i ;
3233: LD_ADDR_VAR 0 7
3237: PUSH
3238: LD_VAR 0 2
3242: ST_TO_ADDR
// nation := mpSideNations [ i ] ;
3243: LD_ADDR_VAR 0 9
3247: PUSH
3248: LD_EXP 9
3252: PUSH
3253: LD_VAR 0 2
3257: ARRAY
3258: ST_TO_ADDR
// pos := mpSidePositions [ i ] ;
3259: LD_ADDR_VAR 0 8
3263: PUSH
3264: LD_EXP 7
3268: PUSH
3269: LD_VAR 0 2
3273: ARRAY
3274: ST_TO_ADDR
// if Count ( mpOilDeposits ) then
3275: LD_EXP 12
3279: PPUSH
3280: CALL 12014 0 1
3284: IFFALSE 3361
// begin for j in mpOilDeposits [ pos ] do
3286: LD_ADDR_VAR 0 3
3290: PUSH
3291: LD_EXP 12
3295: PUSH
3296: LD_VAR 0 8
3300: ARRAY
3301: PUSH
3302: FOR_IN
3303: IFFALSE 3359
// begin CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_oil ) ;
3305: LD_VAR 0 3
3309: PUSH
3310: LD_INT 1
3312: ARRAY
3313: PPUSH
3314: LD_VAR 0 3
3318: PUSH
3319: LD_INT 2
3321: ARRAY
3322: PPUSH
3323: LD_INT 2
3325: PPUSH
3326: CALL_OW 62
// SetResourceVisibility ( j [ 1 ] , j [ 2 ] , side ) ;
3330: LD_VAR 0 3
3334: PUSH
3335: LD_INT 1
3337: ARRAY
3338: PPUSH
3339: LD_VAR 0 3
3343: PUSH
3344: LD_INT 2
3346: ARRAY
3347: PPUSH
3348: LD_VAR 0 7
3352: PPUSH
3353: CALL_OW 441
// end ;
3357: GO 3302
3359: POP
3360: POP
// end ; if Count ( mpSibDeposits ) then
3361: LD_EXP 13
3365: PPUSH
3366: CALL 12014 0 1
3370: IFFALSE 3447
// begin for j in mpSibDeposits [ pos ] do
3372: LD_ADDR_VAR 0 3
3376: PUSH
3377: LD_EXP 13
3381: PUSH
3382: LD_VAR 0 8
3386: ARRAY
3387: PUSH
3388: FOR_IN
3389: IFFALSE 3445
// begin CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_siberit ) ;
3391: LD_VAR 0 3
3395: PUSH
3396: LD_INT 1
3398: ARRAY
3399: PPUSH
3400: LD_VAR 0 3
3404: PUSH
3405: LD_INT 2
3407: ARRAY
3408: PPUSH
3409: LD_INT 3
3411: PPUSH
3412: CALL_OW 62
// SetResourceVisibility ( j [ 1 ] , j [ 2 ] , side ) ;
3416: LD_VAR 0 3
3420: PUSH
3421: LD_INT 1
3423: ARRAY
3424: PPUSH
3425: LD_VAR 0 3
3429: PUSH
3430: LD_INT 2
3432: ARRAY
3433: PPUSH
3434: LD_VAR 0 7
3438: PPUSH
3439: CALL_OW 441
// end ;
3443: GO 3388
3445: POP
3446: POP
// end ; InitBc ;
3447: CALL_OW 21
// InitUc ;
3451: CALL_OW 18
// uc_side := side ;
3455: LD_ADDR_OWVAR 20
3459: PUSH
3460: LD_VAR 0 7
3464: ST_TO_ADDR
// uc_nation := nation ;
3465: LD_ADDR_OWVAR 21
3469: PUSH
3470: LD_VAR 0 9
3474: ST_TO_ADDR
// if mpBattleFlag > - 1 then
3475: LD_EXP 22
3479: PUSH
3480: LD_INT 1
3482: NEG
3483: GREATER
3484: IFFALSE 3643
// begin x := mpStartPos [ pos ] [ 1 ] ;
3486: LD_ADDR_VAR 0 5
3490: PUSH
3491: LD_EXP 21
3495: PUSH
3496: LD_VAR 0 8
3500: ARRAY
3501: PUSH
3502: LD_INT 1
3504: ARRAY
3505: ST_TO_ADDR
// y := mpStartPos [ pos ] [ 2 ] ;
3506: LD_ADDR_VAR 0 6
3510: PUSH
3511: LD_EXP 21
3515: PUSH
3516: LD_VAR 0 8
3520: ARRAY
3521: PUSH
3522: LD_INT 2
3524: ARRAY
3525: ST_TO_ADDR
// PlaceEnvironment ( x , y , 12 , 2 ) ;
3526: LD_VAR 0 5
3530: PPUSH
3531: LD_VAR 0 6
3535: PPUSH
3536: LD_INT 12
3538: PPUSH
3539: LD_INT 2
3541: PPUSH
3542: CALL_OW 349
// mpBattleFlags := Replace ( mpBattleFlags , side , SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 70 ] , [ bfo_defend_bonus_building , 40 ] , [ bfo_range , 25 ] , [ bfo_height , 100 ] ] ) ) ;
3546: LD_ADDR_EXP 23
3550: PUSH
3551: LD_EXP 23
3555: PPUSH
3556: LD_VAR 0 7
3560: PPUSH
3561: LD_VAR 0 7
3565: PPUSH
3566: LD_VAR 0 5
3570: PPUSH
3571: LD_VAR 0 6
3575: PPUSH
3576: LD_INT 1
3578: PUSH
3579: LD_INT 100
3581: PUSH
3582: EMPTY
3583: LIST
3584: LIST
3585: PUSH
3586: LD_INT 2
3588: PUSH
3589: LD_INT 70
3591: PUSH
3592: EMPTY
3593: LIST
3594: LIST
3595: PUSH
3596: LD_INT 3
3598: PUSH
3599: LD_INT 40
3601: PUSH
3602: EMPTY
3603: LIST
3604: LIST
3605: PUSH
3606: LD_INT 10
3608: PUSH
3609: LD_INT 25
3611: PUSH
3612: EMPTY
3613: LIST
3614: LIST
3615: PUSH
3616: LD_INT 20
3618: PUSH
3619: LD_INT 100
3621: PUSH
3622: EMPTY
3623: LIST
3624: LIST
3625: PUSH
3626: EMPTY
3627: LIST
3628: LIST
3629: LIST
3630: LIST
3631: LIST
3632: PPUSH
3633: CALL_OW 418
3637: PPUSH
3638: CALL_OW 1
3642: ST_TO_ADDR
// end ; if Count ( mpDepots ) then
3643: LD_EXP 14
3647: PPUSH
3648: CALL 12014 0 1
3652: IFFALSE 3836
// begin if mpGameType = GameTypeSurvival then
3654: LD_EXP 3
3658: PUSH
3659: LD_INT 2
3661: EQUAL
3662: IFFALSE 3682
// begin bc_level := 10 ;
3664: LD_ADDR_OWVAR 43
3668: PUSH
3669: LD_INT 10
3671: ST_TO_ADDR
// bc_type := b_warehouse ;
3672: LD_ADDR_OWVAR 42
3676: PUSH
3677: LD_INT 1
3679: ST_TO_ADDR
// end else
3680: GO 3698
// begin bc_level := 0 ;
3682: LD_ADDR_OWVAR 43
3686: PUSH
3687: LD_INT 0
3689: ST_TO_ADDR
// bc_type := b_depot ;
3690: LD_ADDR_OWVAR 42
3694: PUSH
3695: LD_INT 0
3697: ST_TO_ADDR
// end ; b := CreateAndPlaceBuildingXYD ( mpDepots [ pos ] [ 1 ] , mpDepots [ pos ] [ 2 ] , mpDepots [ pos ] [ 3 ] ) ;
3698: LD_ADDR_VAR 0 4
3702: PUSH
3703: LD_EXP 14
3707: PUSH
3708: LD_VAR 0 8
3712: ARRAY
3713: PUSH
3714: LD_INT 1
3716: ARRAY
3717: PPUSH
3718: LD_EXP 14
3722: PUSH
3723: LD_VAR 0 8
3727: ARRAY
3728: PUSH
3729: LD_INT 2
3731: ARRAY
3732: PPUSH
3733: LD_EXP 14
3737: PUSH
3738: LD_VAR 0 8
3742: ARRAY
3743: PUSH
3744: LD_INT 3
3746: ARRAY
3747: PPUSH
3748: CALL_OW 47
3752: ST_TO_ADDR
// SetBName ( b , @ & side ) ;
3753: LD_VAR 0 4
3757: PPUSH
3758: LD_STRING @
3760: PUSH
3761: LD_VAR 0 7
3765: STR
3766: PPUSH
3767: CALL_OW 500
// if Count ( mpStartingResources ) then
3771: LD_EXP 15
3775: PPUSH
3776: CALL 12014 0 1
3780: IFFALSE 3834
// begin for j := 1 to mpStartingResources do
3782: LD_ADDR_VAR 0 3
3786: PUSH
3787: DOUBLE
3788: LD_INT 1
3790: DEC
3791: ST_TO_ADDR
3792: LD_EXP 15
3796: PUSH
3797: FOR_TO
3798: IFFALSE 3832
// SetResourceType ( GetBase ( b ) , j , mpStartingResources [ j ] ) ;
3800: LD_VAR 0 4
3804: PPUSH
3805: CALL_OW 274
3809: PPUSH
3810: LD_VAR 0 3
3814: PPUSH
3815: LD_EXP 15
3819: PUSH
3820: LD_VAR 0 3
3824: ARRAY
3825: PPUSH
3826: CALL_OW 277
3830: GO 3797
3832: POP
3833: POP
// end ; end else
3834: GO 4043
// if Count ( mpStartingResources ) then
3836: LD_EXP 15
3840: PPUSH
3841: CALL 12014 0 1
3845: IFFALSE 4043
// begin x := mpStartPos [ pos ] [ 1 ] ;
3847: LD_ADDR_VAR 0 5
3851: PUSH
3852: LD_EXP 21
3856: PUSH
3857: LD_VAR 0 8
3861: ARRAY
3862: PUSH
3863: LD_INT 1
3865: ARRAY
3866: ST_TO_ADDR
// y := mpStartPos [ pos ] [ 2 ] ;
3867: LD_ADDR_VAR 0 6
3871: PUSH
3872: LD_EXP 21
3876: PUSH
3877: LD_VAR 0 8
3881: ARRAY
3882: PUSH
3883: LD_INT 2
3885: ARRAY
3886: ST_TO_ADDR
// for j := 1 to mpStartingResources do
3887: LD_ADDR_VAR 0 3
3891: PUSH
3892: DOUBLE
3893: LD_INT 1
3895: DEC
3896: ST_TO_ADDR
3897: LD_EXP 15
3901: PUSH
3902: FOR_TO
3903: IFFALSE 4041
// begin resources := mpStartingResources [ j ] ;
3905: LD_ADDR_VAR 0 13
3909: PUSH
3910: LD_EXP 15
3914: PUSH
3915: LD_VAR 0 3
3919: ARRAY
3920: ST_TO_ADDR
// if resources = 0 then
3921: LD_VAR 0 13
3925: PUSH
3926: LD_INT 0
3928: EQUAL
3929: IFFALSE 3933
// continue ;
3931: GO 3902
// repeat if resources >= 50 then
3933: LD_VAR 0 13
3937: PUSH
3938: LD_INT 50
3940: GREATEREQUAL
3941: IFFALSE 3987
// begin CreateResourcesXYR ( j , 5 , x , y , 6 , false ) ;
3943: LD_VAR 0 3
3947: PPUSH
3948: LD_INT 5
3950: PPUSH
3951: LD_VAR 0 5
3955: PPUSH
3956: LD_VAR 0 6
3960: PPUSH
3961: LD_INT 6
3963: PPUSH
3964: LD_INT 0
3966: PPUSH
3967: CALL_OW 60
// resources := resources - 50 ;
3971: LD_ADDR_VAR 0 13
3975: PUSH
3976: LD_VAR 0 13
3980: PUSH
3981: LD_INT 50
3983: MINUS
3984: ST_TO_ADDR
// end else
3985: GO 4029
// begin CreateResourcesXYR ( j , resources div 10 , x , y , 6 , false ) ;
3987: LD_VAR 0 3
3991: PPUSH
3992: LD_VAR 0 13
3996: PUSH
3997: LD_INT 10
3999: DIV
4000: PPUSH
4001: LD_VAR 0 5
4005: PPUSH
4006: LD_VAR 0 6
4010: PPUSH
4011: LD_INT 6
4013: PPUSH
4014: LD_INT 0
4016: PPUSH
4017: CALL_OW 60
// resources := 0 ;
4021: LD_ADDR_VAR 0 13
4025: PUSH
4026: LD_INT 0
4028: ST_TO_ADDR
// end ; until resources <= 0 ;
4029: LD_VAR 0 13
4033: PUSH
4034: LD_INT 0
4036: LESSEQUAL
4037: IFFALSE 3933
// end ;
4039: GO 3902
4041: POP
4042: POP
// end ; if Count ( mpBuildings ) then
4043: LD_EXP 17
4047: PPUSH
4048: CALL 12014 0 1
4052: IFFALSE 4130
// begin for j in mpBuildings [ pos ] do
4054: LD_ADDR_VAR 0 3
4058: PUSH
4059: LD_EXP 17
4063: PUSH
4064: LD_VAR 0 8
4068: ARRAY
4069: PUSH
4070: FOR_IN
4071: IFFALSE 4128
// begin bc_level := 0 ;
4073: LD_ADDR_OWVAR 43
4077: PUSH
4078: LD_INT 0
4080: ST_TO_ADDR
// bc_type := j [ 1 ] ;
4081: LD_ADDR_OWVAR 42
4085: PUSH
4086: LD_VAR 0 3
4090: PUSH
4091: LD_INT 1
4093: ARRAY
4094: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( j [ 2 ] , j [ 3 ] , j [ 4 ] ) ;
4095: LD_VAR 0 3
4099: PUSH
4100: LD_INT 2
4102: ARRAY
4103: PPUSH
4104: LD_VAR 0 3
4108: PUSH
4109: LD_INT 3
4111: ARRAY
4112: PPUSH
4113: LD_VAR 0 3
4117: PUSH
4118: LD_INT 4
4120: ARRAY
4121: PPUSH
4122: CALL_OW 47
// end ;
4126: GO 4070
4128: POP
4129: POP
// end ; if mpSibDetection and GetTech ( tech_sibdet , side ) = state_enabled then
4130: LD_EXP 26
4134: IFFALSE 4154
4136: PUSH
4137: LD_INT 20
4139: PPUSH
4140: LD_VAR 0 7
4144: PPUSH
4145: CALL_OW 321
4149: PUSH
4150: LD_INT 1
4152: EQUAL
4153: AND
4154: IFFALSE 4171
// SetTech ( tech_SibDet , side , state_researched ) ;
4156: LD_INT 20
4158: PPUSH
4159: LD_VAR 0 7
4163: PPUSH
4164: LD_INT 2
4166: PPUSH
4167: CALL_OW 322
// if not mpArtifacts then
4171: LD_EXP 44
4175: NOT
4176: IFFALSE 4193
// SetTech ( tech_artifact , side , state_disabled ) ;
4178: LD_INT 24
4180: PPUSH
4181: LD_VAR 0 7
4185: PPUSH
4186: LD_INT 0
4188: PPUSH
4189: CALL_OW 322
// if mpSibBomb = 1 then
4193: LD_EXP 28
4197: PUSH
4198: LD_INT 1
4200: EQUAL
4201: IFFALSE 4220
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
4203: LD_INT 25
4205: PPUSH
4206: LD_VAR 0 7
4210: PPUSH
4211: LD_INT 1
4213: PPUSH
4214: CALL_OW 322
// end else
4218: GO 4235
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
4220: LD_INT 25
4222: PPUSH
4223: LD_VAR 0 7
4227: PPUSH
4228: LD_INT 0
4230: PPUSH
4231: CALL_OW 322
// end ; if mpVehicles then
4235: LD_EXP 36
4239: IFFALSE 4338
// begin for j in mpPrepareVehicles ( side , nation , mpVehicles ) do
4241: LD_ADDR_VAR 0 3
4245: PUSH
4246: LD_VAR 0 7
4250: PPUSH
4251: LD_VAR 0 9
4255: PPUSH
4256: LD_EXP 36
4260: PPUSH
4261: CALL 5462 0 3
4265: PUSH
4266: FOR_IN
4267: IFFALSE 4336
// begin SetDir ( j , rand ( 0 , 5 ) ) ;
4269: LD_VAR 0 3
4273: PPUSH
4274: LD_INT 0
4276: PPUSH
4277: LD_INT 5
4279: PPUSH
4280: CALL_OW 12
4284: PPUSH
4285: CALL_OW 233
// PlaceUnitXYR ( j , mpStartPos [ pos ] [ 1 ] , mpStartPos [ pos ] [ 2 ] , 12 , false ) ;
4289: LD_VAR 0 3
4293: PPUSH
4294: LD_EXP 21
4298: PUSH
4299: LD_VAR 0 8
4303: ARRAY
4304: PUSH
4305: LD_INT 1
4307: ARRAY
4308: PPUSH
4309: LD_EXP 21
4313: PUSH
4314: LD_VAR 0 8
4318: ARRAY
4319: PUSH
4320: LD_INT 2
4322: ARRAY
4323: PPUSH
4324: LD_INT 12
4326: PPUSH
4327: LD_INT 0
4329: PPUSH
4330: CALL_OW 50
// end ;
4334: GO 4266
4336: POP
4337: POP
// end ; uc_nation := nation ;
4338: LD_ADDR_OWVAR 21
4342: PUSH
4343: LD_VAR 0 9
4347: ST_TO_ADDR
// team := mpPrepareTeam ( side , nation , mpPeopleAmount , mpPeopleSkill ) ;
4348: LD_ADDR_VAR 0 11
4352: PUSH
4353: LD_VAR 0 7
4357: PPUSH
4358: LD_VAR 0 9
4362: PPUSH
4363: LD_EXP 24
4367: PPUSH
4368: LD_EXP 25
4372: PPUSH
4373: CALL 4964 0 4
4377: ST_TO_ADDR
// for j in team do
4378: LD_ADDR_VAR 0 3
4382: PUSH
4383: LD_VAR 0 11
4387: PUSH
4388: FOR_IN
4389: IFFALSE 4438
// PlaceUnitXYR ( j , mpStartPos [ pos ] [ 1 ] , mpStartPos [ pos ] [ 2 ] , 12 , false ) ;
4391: LD_VAR 0 3
4395: PPUSH
4396: LD_EXP 21
4400: PUSH
4401: LD_VAR 0 8
4405: ARRAY
4406: PUSH
4407: LD_INT 1
4409: ARRAY
4410: PPUSH
4411: LD_EXP 21
4415: PUSH
4416: LD_VAR 0 8
4420: ARRAY
4421: PUSH
4422: LD_INT 2
4424: ARRAY
4425: PPUSH
4426: LD_INT 12
4428: PPUSH
4429: LD_INT 0
4431: PPUSH
4432: CALL_OW 50
4436: GO 4388
4438: POP
4439: POP
// if mpApemans then
4440: LD_EXP 30
4444: IFFALSE 4550
// begin for j := 1 to mpApemans do
4446: LD_ADDR_VAR 0 3
4450: PUSH
4451: DOUBLE
4452: LD_INT 1
4454: DEC
4455: ST_TO_ADDR
4456: LD_EXP 30
4460: PUSH
4461: FOR_TO
4462: IFFALSE 4548
// begin PrepareApeman ( - 5 ) ;
4464: LD_INT 5
4466: NEG
4467: PPUSH
4468: CALL 44073 0 1
// ape := CreateHuman ;
4472: LD_ADDR_VAR 0 10
4476: PUSH
4477: CALL_OW 44
4481: ST_TO_ADDR
// mpApePosIndex := Replace ( mpApePosIndex , pos , Join ( mpApePosIndex [ pos ] , ape ) ) ;
4482: LD_ADDR_EXP 32
4486: PUSH
4487: LD_EXP 32
4491: PPUSH
4492: LD_VAR 0 8
4496: PPUSH
4497: LD_EXP 32
4501: PUSH
4502: LD_VAR 0 8
4506: ARRAY
4507: PPUSH
4508: LD_VAR 0 10
4512: PPUSH
4513: CALL 47946 0 2
4517: PPUSH
4518: CALL_OW 1
4522: ST_TO_ADDR
// PlaceUnitArea ( ape , mpApemansArea [ pos ] , false ) ;
4523: LD_VAR 0 10
4527: PPUSH
4528: LD_EXP 31
4532: PUSH
4533: LD_VAR 0 8
4537: ARRAY
4538: PPUSH
4539: LD_INT 0
4541: PPUSH
4542: CALL_OW 49
// end ;
4546: GO 4461
4548: POP
4549: POP
// end ; end ;
4550: GO 3215
4552: POP
4553: POP
// if not mpTeamGame then
4554: LD_EXP 11
4558: NOT
4559: IFFALSE 4657
// begin for i := 1 to 8 do
4561: LD_ADDR_VAR 0 2
4565: PUSH
4566: DOUBLE
4567: LD_INT 1
4569: DEC
4570: ST_TO_ADDR
4571: LD_INT 8
4573: PUSH
4574: FOR_TO
4575: IFFALSE 4653
// for j := 1 to 8 do
4577: LD_ADDR_VAR 0 3
4581: PUSH
4582: DOUBLE
4583: LD_INT 1
4585: DEC
4586: ST_TO_ADDR
4587: LD_INT 8
4589: PUSH
4590: FOR_TO
4591: IFFALSE 4649
// if i <> j then
4593: LD_VAR 0 2
4597: PUSH
4598: LD_VAR 0 3
4602: NONEQUAL
4603: IFFALSE 4627
// SetAttitude ( i , j , att_neutral , true ) else
4605: LD_VAR 0 2
4609: PPUSH
4610: LD_VAR 0 3
4614: PPUSH
4615: LD_INT 0
4617: PPUSH
4618: LD_INT 1
4620: PPUSH
4621: CALL_OW 80
4625: GO 4647
// SetAttitude ( i , j , att_friend , true ) ;
4627: LD_VAR 0 2
4631: PPUSH
4632: LD_VAR 0 3
4636: PPUSH
4637: LD_INT 1
4639: PPUSH
4640: LD_INT 1
4642: PPUSH
4643: CALL_OW 80
4647: GO 4590
4649: POP
4650: POP
4651: GO 4574
4653: POP
4654: POP
// end else
4655: GO 4832
// begin if mpSharedVision then
4657: LD_EXP 16
4661: IFFALSE 4726
// begin for i in mpTeams do
4663: LD_ADDR_VAR 0 2
4667: PUSH
4668: LD_EXP 10
4672: PUSH
4673: FOR_IN
4674: IFFALSE 4724
// for j := 2 to i do
4676: LD_ADDR_VAR 0 3
4680: PUSH
4681: DOUBLE
4682: LD_INT 2
4684: DEC
4685: ST_TO_ADDR
4686: LD_VAR 0 2
4690: PUSH
4691: FOR_TO
4692: IFFALSE 4720
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
4694: LD_VAR 0 2
4698: PUSH
4699: LD_VAR 0 3
4703: ARRAY
4704: PPUSH
4705: LD_VAR 0 2
4709: PUSH
4710: LD_INT 1
4712: ARRAY
4713: PPUSH
4714: CALL_OW 343
4718: GO 4691
4720: POP
4721: POP
4722: GO 4673
4724: POP
4725: POP
// end ; for i := 1 to 8 do
4726: LD_ADDR_VAR 0 2
4730: PUSH
4731: DOUBLE
4732: LD_INT 1
4734: DEC
4735: ST_TO_ADDR
4736: LD_INT 8
4738: PUSH
4739: FOR_TO
4740: IFFALSE 4830
// for j := 1 to 8 do
4742: LD_ADDR_VAR 0 3
4746: PUSH
4747: DOUBLE
4748: LD_INT 1
4750: DEC
4751: ST_TO_ADDR
4752: LD_INT 8
4754: PUSH
4755: FOR_TO
4756: IFFALSE 4826
// if mpSideTeams [ i ] = mpSideTeams [ j ] then
4758: LD_EXP 8
4762: PUSH
4763: LD_VAR 0 2
4767: ARRAY
4768: PUSH
4769: LD_EXP 8
4773: PUSH
4774: LD_VAR 0 3
4778: ARRAY
4779: EQUAL
4780: IFFALSE 4804
// SetAttitude ( i , j , att_friend , true ) else
4782: LD_VAR 0 2
4786: PPUSH
4787: LD_VAR 0 3
4791: PPUSH
4792: LD_INT 1
4794: PPUSH
4795: LD_INT 1
4797: PPUSH
4798: CALL_OW 80
4802: GO 4824
// SetAttitude ( i , j , att_enemy , true ) ;
4804: LD_VAR 0 2
4808: PPUSH
4809: LD_VAR 0 3
4813: PPUSH
4814: LD_INT 2
4816: PPUSH
4817: LD_INT 1
4819: PPUSH
4820: CALL_OW 80
4824: GO 4755
4826: POP
4827: POP
4828: GO 4739
4830: POP
4831: POP
// end ; music_nat := mpSideNations [ your_side ] ;
4832: LD_ADDR_OWVAR 71
4836: PUSH
4837: LD_EXP 9
4841: PUSH
4842: LD_OWVAR 2
4846: ARRAY
4847: ST_TO_ADDR
// if IAmSpec then
4848: CALL_OW 531
4852: IFFALSE 4893
// begin FogOff ( true ) ;
4854: LD_INT 1
4856: PPUSH
4857: CALL_OW 344
// CenterNowOnXY ( mpMapSize [ 1 ] div 2 , mpMapSize [ 2 ] div 2 ) ;
4861: LD_EXP 29
4865: PUSH
4866: LD_INT 1
4868: ARRAY
4869: PUSH
4870: LD_INT 2
4872: DIV
4873: PPUSH
4874: LD_EXP 29
4878: PUSH
4879: LD_INT 2
4881: ARRAY
4882: PUSH
4883: LD_INT 2
4885: DIV
4886: PPUSH
4887: CALL_OW 86
// end else
4891: GO 4939
// begin CenterNowOnXY ( mpStartPos [ mpSidePositions [ your_side ] ] [ 1 ] , mpStartPos [ mpSidePositions [ your_side ] ] [ 2 ] ) ;
4893: LD_EXP 21
4897: PUSH
4898: LD_EXP 7
4902: PUSH
4903: LD_OWVAR 2
4907: ARRAY
4908: ARRAY
4909: PUSH
4910: LD_INT 1
4912: ARRAY
4913: PPUSH
4914: LD_EXP 21
4918: PUSH
4919: LD_EXP 7
4923: PUSH
4924: LD_OWVAR 2
4928: ARRAY
4929: ARRAY
4930: PUSH
4931: LD_INT 2
4933: ARRAY
4934: PPUSH
4935: CALL_OW 86
// end ; BeginBuildUp ;
4939: CALL 5995 0 0
// enable ( mpActive ) ;
4943: LD_INT 100
4945: ENABLE_MARKED
// enable ( mpGameType ) ;
4946: LD_EXP 3
4950: ENABLE_MARKED
// mpGameActive := true ;
4951: LD_ADDR_EXP 39
4955: PUSH
4956: LD_INT 1
4958: ST_TO_ADDR
// end ;
4959: LD_VAR 0 1
4963: RET
// var mpTeamPreset ; function mpPrepareTeam ( side , nation , amount , skill ) ; var i , un , class ; begin
4964: LD_INT 0
4966: PPUSH
4967: PPUSH
4968: PPUSH
4969: PPUSH
// result := [ ] ;
4970: LD_ADDR_VAR 0 5
4974: PUSH
4975: EMPTY
4976: ST_TO_ADDR
// class := class_soldier ;
4977: LD_ADDR_VAR 0 8
4981: PUSH
4982: LD_INT 1
4984: ST_TO_ADDR
// uc_side := side ;
4985: LD_ADDR_OWVAR 20
4989: PUSH
4990: LD_VAR 0 1
4994: ST_TO_ADDR
// uc_nation := nation ;
4995: LD_ADDR_OWVAR 21
4999: PUSH
5000: LD_VAR 0 2
5004: ST_TO_ADDR
// hc_name := mp_sides_players_names [ side ] ;
5005: LD_ADDR_OWVAR 26
5009: PUSH
5010: LD_OWVAR 19
5014: PUSH
5015: LD_VAR 0 1
5019: ARRAY
5020: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , class , skill + 2 ) ;
5021: LD_INT 1
5023: PPUSH
5024: LD_INT 2
5026: PPUSH
5027: CALL_OW 12
5031: PPUSH
5032: LD_VAR 0 8
5036: PPUSH
5037: LD_VAR 0 4
5041: PUSH
5042: LD_INT 2
5044: PLUS
5045: PPUSH
5046: CALL_OW 380
// hc_importance := 105 ;
5050: LD_ADDR_OWVAR 32
5054: PUSH
5055: LD_INT 105
5057: ST_TO_ADDR
// if Multiplayer then
5058: LD_OWVAR 4
5062: IFFALSE 5102
// begin hc_gallery := MULTIAVATARS ;
5064: LD_ADDR_OWVAR 33
5068: PUSH
5069: LD_STRING MULTIAVATARS
5071: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( side ) ;
5072: LD_ADDR_OWVAR 34
5076: PUSH
5077: LD_VAR 0 1
5081: PPUSH
5082: CALL_OW 525
5086: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( side ) ;
5087: LD_ADDR_OWVAR 27
5091: PUSH
5092: LD_VAR 0 1
5096: PPUSH
5097: CALL_OW 526
5101: ST_TO_ADDR
// end ; result := Join ( result , CreateHuman ) ;
5102: LD_ADDR_VAR 0 5
5106: PUSH
5107: LD_VAR 0 5
5111: PPUSH
5112: CALL_OW 44
5116: PPUSH
5117: CALL 47946 0 2
5121: ST_TO_ADDR
// if mpTeamPreset then
5122: LD_LOC 1
5126: IFFALSE 5222
// begin CopySkills ( mpTeamPreset [ 1 ] , result [ result ] ) ;
5128: LD_LOC 1
5132: PUSH
5133: LD_INT 1
5135: ARRAY
5136: PPUSH
5137: LD_VAR 0 5
5141: PUSH
5142: LD_VAR 0 5
5146: ARRAY
5147: PPUSH
5148: CALL_OW 510
// SetAttr ( result [ result ] , attr_stamina , GetAttr ( mpTeamPreset [ 1 ] , attr_stamina ) ) ;
5152: LD_VAR 0 5
5156: PUSH
5157: LD_VAR 0 5
5161: ARRAY
5162: PPUSH
5163: LD_INT 1
5165: PPUSH
5166: LD_LOC 1
5170: PUSH
5171: LD_INT 1
5173: ARRAY
5174: PPUSH
5175: LD_INT 1
5177: PPUSH
5178: CALL_OW 260
5182: PPUSH
5183: CALL_OW 239
// SetAttr ( result [ result ] , attr_speed , GetAttr ( mpTeamPreset [ 1 ] , attr_speed ) ) ;
5187: LD_VAR 0 5
5191: PUSH
5192: LD_VAR 0 5
5196: ARRAY
5197: PPUSH
5198: LD_INT 2
5200: PPUSH
5201: LD_LOC 1
5205: PUSH
5206: LD_INT 1
5208: ARRAY
5209: PPUSH
5210: LD_INT 2
5212: PPUSH
5213: CALL_OW 260
5217: PPUSH
5218: CALL_OW 239
// end ; InitHc_All ( ) ;
5222: CALL_OW 584
// class := 2 ;
5226: LD_ADDR_VAR 0 8
5230: PUSH
5231: LD_INT 2
5233: ST_TO_ADDR
// for i := 1 to ( amount - 1 ) do
5234: LD_ADDR_VAR 0 6
5238: PUSH
5239: DOUBLE
5240: LD_INT 1
5242: DEC
5243: ST_TO_ADDR
5244: LD_VAR 0 3
5248: PUSH
5249: LD_INT 1
5251: MINUS
5252: PUSH
5253: FOR_TO
5254: IFFALSE 5438
// begin PrepareHuman ( false , class , skill ) ;
5256: LD_INT 0
5258: PPUSH
5259: LD_VAR 0 8
5263: PPUSH
5264: LD_VAR 0 4
5268: PPUSH
5269: CALL_OW 380
// un := CreateHuman ;
5273: LD_ADDR_VAR 0 7
5277: PUSH
5278: CALL_OW 44
5282: ST_TO_ADDR
// result := Join ( result , un ) ;
5283: LD_ADDR_VAR 0 5
5287: PUSH
5288: LD_VAR 0 5
5292: PPUSH
5293: LD_VAR 0 7
5297: PPUSH
5298: CALL 47946 0 2
5302: ST_TO_ADDR
// if mpTeamPreset then
5303: LD_LOC 1
5307: IFFALSE 5403
// begin CopySkills ( mpTeamPreset [ i + 1 ] , un ) ;
5309: LD_LOC 1
5313: PUSH
5314: LD_VAR 0 6
5318: PUSH
5319: LD_INT 1
5321: PLUS
5322: ARRAY
5323: PPUSH
5324: LD_VAR 0 7
5328: PPUSH
5329: CALL_OW 510
// SetAttr ( un , attr_stamina , GetAttr ( mpTeamPreset [ i + 1 ] , attr_stamina ) ) ;
5333: LD_VAR 0 7
5337: PPUSH
5338: LD_INT 1
5340: PPUSH
5341: LD_LOC 1
5345: PUSH
5346: LD_VAR 0 6
5350: PUSH
5351: LD_INT 1
5353: PLUS
5354: ARRAY
5355: PPUSH
5356: LD_INT 1
5358: PPUSH
5359: CALL_OW 260
5363: PPUSH
5364: CALL_OW 239
// SetAttr ( un , attr_speed , GetAttr ( mpTeamPreset [ i + 1 ] , attr_speed ) ) ;
5368: LD_VAR 0 7
5372: PPUSH
5373: LD_INT 2
5375: PPUSH
5376: LD_LOC 1
5380: PUSH
5381: LD_VAR 0 6
5385: PUSH
5386: LD_INT 1
5388: PLUS
5389: ARRAY
5390: PPUSH
5391: LD_INT 2
5393: PPUSH
5394: CALL_OW 260
5398: PPUSH
5399: CALL_OW 239
// end ; class := Inc ( class ) ;
5403: LD_ADDR_VAR 0 8
5407: PUSH
5408: LD_VAR 0 8
5412: PPUSH
5413: CALL 49319 0 1
5417: ST_TO_ADDR
// if class = 5 then
5418: LD_VAR 0 8
5422: PUSH
5423: LD_INT 5
5425: EQUAL
5426: IFFALSE 5436
// class := 1 ;
5428: LD_ADDR_VAR 0 8
5432: PUSH
5433: LD_INT 1
5435: ST_TO_ADDR
// end ;
5436: GO 5253
5438: POP
5439: POP
// if not mpTeamPreset then
5440: LD_LOC 1
5444: NOT
5445: IFFALSE 5457
// mpTeamPreset := result ;
5447: LD_ADDR_LOC 1
5451: PUSH
5452: LD_VAR 0 5
5456: ST_TO_ADDR
// end ;
5457: LD_VAR 0 5
5461: RET
// function mpPrepareVehicles ( side , nation , vehicles ) ; var i ; begin
5462: LD_INT 0
5464: PPUSH
5465: PPUSH
// result := [ ] ;
5466: LD_ADDR_VAR 0 4
5470: PUSH
5471: EMPTY
5472: ST_TO_ADDR
// if not vehicles then
5473: LD_VAR 0 3
5477: NOT
5478: IFFALSE 5482
// exit ;
5480: GO 5696
// for i := 1 to vehicles [ nation ] do
5482: LD_ADDR_VAR 0 5
5486: PUSH
5487: DOUBLE
5488: LD_INT 1
5490: DEC
5491: ST_TO_ADDR
5492: LD_VAR 0 3
5496: PUSH
5497: LD_VAR 0 2
5501: ARRAY
5502: PUSH
5503: FOR_TO
5504: IFFALSE 5694
// begin uc_side := side ;
5506: LD_ADDR_OWVAR 20
5510: PUSH
5511: LD_VAR 0 1
5515: ST_TO_ADDR
// if Count ( vehicles [ nation ] [ i ] ) > 4 then
5516: LD_VAR 0 3
5520: PUSH
5521: LD_VAR 0 2
5525: ARRAY
5526: PUSH
5527: LD_VAR 0 5
5531: ARRAY
5532: PPUSH
5533: CALL 12014 0 1
5537: PUSH
5538: LD_INT 4
5540: GREATER
5541: IFFALSE 5571
// uc_nation := vehicles [ nation ] [ i ] [ 5 ] else
5543: LD_ADDR_OWVAR 21
5547: PUSH
5548: LD_VAR 0 3
5552: PUSH
5553: LD_VAR 0 2
5557: ARRAY
5558: PUSH
5559: LD_VAR 0 5
5563: ARRAY
5564: PUSH
5565: LD_INT 5
5567: ARRAY
5568: ST_TO_ADDR
5569: GO 5581
// uc_nation := nation ;
5571: LD_ADDR_OWVAR 21
5575: PUSH
5576: LD_VAR 0 2
5580: ST_TO_ADDR
// PrepareVehicle ( vehicles [ nation ] [ i ] [ 1 ] , vehicles [ nation ] [ i ] [ 2 ] , vehicles [ nation ] [ i ] [ 3 ] , vehicles [ nation ] [ i ] [ 4 ] , 80 ) ;
5581: LD_VAR 0 3
5585: PUSH
5586: LD_VAR 0 2
5590: ARRAY
5591: PUSH
5592: LD_VAR 0 5
5596: ARRAY
5597: PUSH
5598: LD_INT 1
5600: ARRAY
5601: PPUSH
5602: LD_VAR 0 3
5606: PUSH
5607: LD_VAR 0 2
5611: ARRAY
5612: PUSH
5613: LD_VAR 0 5
5617: ARRAY
5618: PUSH
5619: LD_INT 2
5621: ARRAY
5622: PPUSH
5623: LD_VAR 0 3
5627: PUSH
5628: LD_VAR 0 2
5632: ARRAY
5633: PUSH
5634: LD_VAR 0 5
5638: ARRAY
5639: PUSH
5640: LD_INT 3
5642: ARRAY
5643: PPUSH
5644: LD_VAR 0 3
5648: PUSH
5649: LD_VAR 0 2
5653: ARRAY
5654: PUSH
5655: LD_VAR 0 5
5659: ARRAY
5660: PUSH
5661: LD_INT 4
5663: ARRAY
5664: PPUSH
5665: LD_INT 80
5667: PPUSH
5668: CALL 14776 0 5
// result := Join ( result , CreateVehicle ) ;
5672: LD_ADDR_VAR 0 4
5676: PUSH
5677: LD_VAR 0 4
5681: PPUSH
5682: CALL_OW 45
5686: PPUSH
5687: CALL 47946 0 2
5691: ST_TO_ADDR
// end ;
5692: GO 5503
5694: POP
5695: POP
// end ;
5696: LD_VAR 0 4
5700: RET
// function mpUpdateFlags ( strength ) ; var i ; begin
5701: LD_INT 0
5703: PPUSH
5704: PPUSH
// for i in mpBattleFlags do
5705: LD_ADDR_VAR 0 3
5709: PUSH
5710: LD_EXP 23
5714: PUSH
5715: FOR_IN
5716: IFFALSE 5793
// ChangeBattleFlagOptions ( i , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength * 0.7 ] , [ bfo_defend_bonus_building , strength * 0.4 ] , [ bfo_height , strength ] ] ) ;
5718: LD_VAR 0 3
5722: PPUSH
5723: LD_INT 1
5725: PUSH
5726: LD_VAR 0 1
5730: PUSH
5731: EMPTY
5732: LIST
5733: LIST
5734: PUSH
5735: LD_INT 2
5737: PUSH
5738: LD_VAR 0 1
5742: PUSH
5743: LD_REAL  7.00000000000000E-0001
5746: MUL
5747: PUSH
5748: EMPTY
5749: LIST
5750: LIST
5751: PUSH
5752: LD_INT 3
5754: PUSH
5755: LD_VAR 0 1
5759: PUSH
5760: LD_REAL  4.00000000000000E-0001
5763: MUL
5764: PUSH
5765: EMPTY
5766: LIST
5767: LIST
5768: PUSH
5769: LD_INT 20
5771: PUSH
5772: LD_VAR 0 1
5776: PUSH
5777: EMPTY
5778: LIST
5779: LIST
5780: PUSH
5781: EMPTY
5782: LIST
5783: LIST
5784: LIST
5785: LIST
5786: PPUSH
5787: CALL_OW 423
5791: GO 5715
5793: POP
5794: POP
// end ;
5795: LD_VAR 0 2
5799: RET
// every 0 0$1 trigger mpActive do var i , strength ;
5800: LD_INT 100
5802: IFFALSE 5897
5804: GO 5806
5806: DISABLE
5807: LD_INT 0
5809: PPUSH
5810: PPUSH
// begin if mpBattleFlag <= 0 then
5811: LD_EXP 22
5815: PUSH
5816: LD_INT 0
5818: LESSEQUAL
5819: IFFALSE 5823
// exit ;
5821: GO 5897
// strength := 100 ;
5823: LD_ADDR_VAR 0 2
5827: PUSH
5828: LD_INT 100
5830: ST_TO_ADDR
// repeat wait ( mpBattleFlag ) ;
5831: LD_EXP 22
5835: PPUSH
5836: CALL_OW 67
// strength := Dec ( strength ) ;
5840: LD_ADDR_VAR 0 2
5844: PUSH
5845: LD_VAR 0 2
5849: PPUSH
5850: CALL 49341 0 1
5854: ST_TO_ADDR
// mpUpdateFlags ( strength ) ;
5855: LD_VAR 0 2
5859: PPUSH
5860: CALL 5701 0 1
// until not strength ;
5864: LD_VAR 0 2
5868: NOT
5869: IFFALSE 5831
// for i in mpBattleFlags do
5871: LD_ADDR_VAR 0 1
5875: PUSH
5876: LD_EXP 23
5880: PUSH
5881: FOR_IN
5882: IFFALSE 5895
// KillBattleFlag ( i ) ;
5884: LD_VAR 0 1
5888: PPUSH
5889: CALL_OW 419
5893: GO 5881
5895: POP
5896: POP
// end ;
5897: PPOPN 2
5899: END
// every 0 0$1 marked mpActive do var side , tmp ;
5900: GO 5902
5902: DISABLE
5903: LD_INT 0
5905: PPUSH
5906: PPUSH
// begin if mpSibBomb <= 1 then
5907: LD_EXP 28
5911: PUSH
5912: LD_INT 1
5914: LESSEQUAL
5915: IFFALSE 5919
// exit ;
5917: GO 5992
// tmp := mpSibBomb ;
5919: LD_ADDR_VAR 0 2
5923: PUSH
5924: LD_EXP 28
5928: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
5929: LD_INT 35
5931: PPUSH
5932: CALL_OW 67
// tmp := tmp - 0 0$1 ;
5936: LD_ADDR_VAR 0 2
5940: PUSH
5941: LD_VAR 0 2
5945: PUSH
5946: LD_INT 35
5948: MINUS
5949: ST_TO_ADDR
// until not tmp ;
5950: LD_VAR 0 2
5954: NOT
5955: IFFALSE 5929
// for side := 1 to 8 do
5957: LD_ADDR_VAR 0 1
5961: PUSH
5962: DOUBLE
5963: LD_INT 1
5965: DEC
5966: ST_TO_ADDR
5967: LD_INT 8
5969: PUSH
5970: FOR_TO
5971: IFFALSE 5990
// SetTech ( tech_SibFiss , side , state_enabled ) ;
5973: LD_INT 25
5975: PPUSH
5976: LD_VAR 0 1
5980: PPUSH
5981: LD_INT 1
5983: PPUSH
5984: CALL_OW 322
5988: GO 5970
5990: POP
5991: POP
// end ;
5992: PPOPN 2
5994: END
// export mpBuildUpTimeDelay , mpBuildUpTimeActive ; function BeginBuildUp ; var i , j ; begin
5995: LD_INT 0
5997: PPUSH
5998: PPUSH
5999: PPUSH
// mpBuildUpTimeDelay := 0 ;
6000: LD_ADDR_EXP 46
6004: PUSH
6005: LD_INT 0
6007: ST_TO_ADDR
// if not mpBuildUpTime then
6008: LD_EXP 20
6012: NOT
6013: IFFALSE 6017
// exit ;
6015: GO 6206
// mpBuildUpTimeDelay := 4 4$00 + 1 1$00 * mpBuildUpTime ;
6017: LD_ADDR_EXP 46
6021: PUSH
6022: LD_INT 8400
6024: PUSH
6025: LD_INT 2100
6027: PUSH
6028: LD_EXP 20
6032: MUL
6033: PLUS
6034: ST_TO_ADDR
// mpBuildUpTimeActive := true ;
6035: LD_ADDR_EXP 47
6039: PUSH
6040: LD_INT 1
6042: ST_TO_ADDR
// for i := 1 to 8 do
6043: LD_ADDR_VAR 0 2
6047: PUSH
6048: DOUBLE
6049: LD_INT 1
6051: DEC
6052: ST_TO_ADDR
6053: LD_INT 8
6055: PUSH
6056: FOR_TO
6057: IFFALSE 6204
// if mpSidePositions [ i ] then
6059: LD_EXP 7
6063: PUSH
6064: LD_VAR 0 2
6068: ARRAY
6069: IFFALSE 6202
// begin SetAreaMapShow ( mpBuildUpAreas [ mpSidePositions [ i ] ] , 5 ) ;
6071: LD_EXP 19
6075: PUSH
6076: LD_EXP 7
6080: PUSH
6081: LD_VAR 0 2
6085: ARRAY
6086: ARRAY
6087: PPUSH
6088: LD_INT 5
6090: PPUSH
6091: CALL_OW 424
// for j := 1 to 8 do
6095: LD_ADDR_VAR 0 3
6099: PUSH
6100: DOUBLE
6101: LD_INT 1
6103: DEC
6104: ST_TO_ADDR
6105: LD_INT 8
6107: PUSH
6108: FOR_TO
6109: IFFALSE 6200
// if mpSidePositions [ j ] and ( ( mpSideTeams [ i ] <> mpSideTeams [ j ] ) or ( not mpTeamGame ) and ( i <> j ) ) then
6111: LD_EXP 7
6115: PUSH
6116: LD_VAR 0 3
6120: ARRAY
6121: IFFALSE 6170
6123: PUSH
6124: LD_EXP 8
6128: PUSH
6129: LD_VAR 0 2
6133: ARRAY
6134: PUSH
6135: LD_EXP 8
6139: PUSH
6140: LD_VAR 0 3
6144: ARRAY
6145: NONEQUAL
6146: IFTRUE 6169
6148: PUSH
6149: LD_EXP 11
6153: NOT
6154: IFFALSE 6168
6156: PUSH
6157: LD_VAR 0 2
6161: PUSH
6162: LD_VAR 0 3
6166: NONEQUAL
6167: AND
6168: OR
6169: AND
6170: IFFALSE 6198
// HideArea ( j , mpBuildUpAreas [ mpSidePositions [ i ] ] ) ;
6172: LD_VAR 0 3
6176: PPUSH
6177: LD_EXP 19
6181: PUSH
6182: LD_EXP 7
6186: PUSH
6187: LD_VAR 0 2
6191: ARRAY
6192: ARRAY
6193: PPUSH
6194: CALL_OW 333
6198: GO 6108
6200: POP
6201: POP
// end ;
6202: GO 6056
6204: POP
6205: POP
// end ;
6206: LD_VAR 0 1
6210: RET
// function EndBuildUp ; var i , j ; begin
6211: LD_INT 0
6213: PPUSH
6214: PPUSH
6215: PPUSH
// mpBuildUpTimeActive := false ;
6216: LD_ADDR_EXP 47
6220: PUSH
6221: LD_INT 0
6223: ST_TO_ADDR
// for i := 1 to 8 do
6224: LD_ADDR_VAR 0 2
6228: PUSH
6229: DOUBLE
6230: LD_INT 1
6232: DEC
6233: ST_TO_ADDR
6234: LD_INT 8
6236: PUSH
6237: FOR_TO
6238: IFFALSE 6385
// if mpSidePositions [ i ] then
6240: LD_EXP 7
6244: PUSH
6245: LD_VAR 0 2
6249: ARRAY
6250: IFFALSE 6383
// begin SetAreaMapShow ( mpBuildUpAreas [ mpSidePositions [ i ] ] , 0 ) ;
6252: LD_EXP 19
6256: PUSH
6257: LD_EXP 7
6261: PUSH
6262: LD_VAR 0 2
6266: ARRAY
6267: ARRAY
6268: PPUSH
6269: LD_INT 0
6271: PPUSH
6272: CALL_OW 424
// for j := 1 to 8 do
6276: LD_ADDR_VAR 0 3
6280: PUSH
6281: DOUBLE
6282: LD_INT 1
6284: DEC
6285: ST_TO_ADDR
6286: LD_INT 8
6288: PUSH
6289: FOR_TO
6290: IFFALSE 6381
// if mpSidePositions [ j ] and ( ( mpSideTeams [ i ] <> mpSideTeams [ j ] ) or ( not mpTeamGame ) and ( i <> j ) ) then
6292: LD_EXP 7
6296: PUSH
6297: LD_VAR 0 3
6301: ARRAY
6302: IFFALSE 6351
6304: PUSH
6305: LD_EXP 8
6309: PUSH
6310: LD_VAR 0 2
6314: ARRAY
6315: PUSH
6316: LD_EXP 8
6320: PUSH
6321: LD_VAR 0 3
6325: ARRAY
6326: NONEQUAL
6327: IFTRUE 6350
6329: PUSH
6330: LD_EXP 11
6334: NOT
6335: IFFALSE 6349
6337: PUSH
6338: LD_VAR 0 2
6342: PUSH
6343: LD_VAR 0 3
6347: NONEQUAL
6348: AND
6349: OR
6350: AND
6351: IFFALSE 6379
// ShowArea ( j , mpBuildUpAreas [ mpSidePositions [ i ] ] ) ;
6353: LD_VAR 0 3
6357: PPUSH
6358: LD_EXP 19
6362: PUSH
6363: LD_EXP 7
6367: PUSH
6368: LD_VAR 0 2
6372: ARRAY
6373: ARRAY
6374: PPUSH
6375: CALL_OW 334
6379: GO 6289
6381: POP
6382: POP
// end ;
6383: GO 6237
6385: POP
6386: POP
// end ;
6387: LD_VAR 0 1
6391: RET
// every 5 trigger mpBuildUpTimeActive marked mpActive do var i , un ;
6392: LD_EXP 47
6396: IFFALSE 6575
6398: GO 6400
6400: DISABLE
6401: LD_INT 0
6403: PPUSH
6404: PPUSH
// begin for i := 1 to 8 do
6405: LD_ADDR_VAR 0 1
6409: PUSH
6410: DOUBLE
6411: LD_INT 1
6413: DEC
6414: ST_TO_ADDR
6415: LD_INT 8
6417: PUSH
6418: FOR_TO
6419: IFFALSE 6572
// if mpSidePositions [ i ] then
6421: LD_EXP 7
6425: PUSH
6426: LD_VAR 0 1
6430: ARRAY
6431: IFFALSE 6570
// for un in FilterUnitsInArea ( mpBuildUpAreas [ mpSidePositions [ i ] ] , [ [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] , [ f_side , your_side ] ] ) do
6433: LD_ADDR_VAR 0 2
6437: PUSH
6438: LD_EXP 19
6442: PUSH
6443: LD_EXP 7
6447: PUSH
6448: LD_VAR 0 1
6452: ARRAY
6453: ARRAY
6454: PPUSH
6455: LD_INT 2
6457: PUSH
6458: LD_INT 21
6460: PUSH
6461: LD_INT 1
6463: PUSH
6464: EMPTY
6465: LIST
6466: LIST
6467: PUSH
6468: LD_INT 21
6470: PUSH
6471: LD_INT 2
6473: PUSH
6474: EMPTY
6475: LIST
6476: LIST
6477: PUSH
6478: EMPTY
6479: LIST
6480: LIST
6481: LIST
6482: PUSH
6483: LD_INT 22
6485: PUSH
6486: LD_OWVAR 2
6490: PUSH
6491: EMPTY
6492: LIST
6493: LIST
6494: PUSH
6495: EMPTY
6496: LIST
6497: LIST
6498: PPUSH
6499: CALL_OW 70
6503: PUSH
6504: FOR_IN
6505: IFFALSE 6568
// if ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) or ( not mpTeamGame ) and ( i <> your_side ) ) then
6507: LD_EXP 8
6511: PUSH
6512: LD_VAR 0 1
6516: ARRAY
6517: PUSH
6518: LD_EXP 8
6522: PUSH
6523: LD_OWVAR 2
6527: ARRAY
6528: NONEQUAL
6529: IFTRUE 6552
6531: PUSH
6532: LD_EXP 11
6536: NOT
6537: IFFALSE 6551
6539: PUSH
6540: LD_VAR 0 1
6544: PUSH
6545: LD_OWVAR 2
6549: NONEQUAL
6550: AND
6551: OR
6552: IFFALSE 6566
// ComMoveToArea ( un , BuildUpEscape ) ;
6554: LD_VAR 0 2
6558: PPUSH
6559: LD_INT 9
6561: PPUSH
6562: CALL_OW 113
6566: GO 6504
6568: POP
6569: POP
6570: GO 6418
6572: POP
6573: POP
// enable ;
6574: ENABLE
// end ;
6575: PPOPN 2
6577: END
// every 0 0$1 trigger mpBuildUpTime marked mpActive do var tmp ;
6578: LD_EXP 20
6582: IFFALSE 6632
6584: GO 6586
6586: DISABLE
6587: LD_INT 0
6589: PPUSH
// begin tmp := mpBuildUpTime ;
6590: LD_ADDR_VAR 0 1
6594: PUSH
6595: LD_EXP 20
6599: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
6600: LD_INT 35
6602: PPUSH
6603: CALL_OW 67
// tmp := tmp - 0 0$1 ;
6607: LD_ADDR_VAR 0 1
6611: PUSH
6612: LD_VAR 0 1
6616: PUSH
6617: LD_INT 35
6619: MINUS
6620: ST_TO_ADDR
// until not tmp ;
6621: LD_VAR 0 1
6625: NOT
6626: IFFALSE 6600
// EndBuildUp ;
6628: CALL 6211 0 0
// end ;
6632: PPOPN 1
6634: END
// every 0 0$1 trigger mpActive marked mpWin do
6635: LD_INT 100
6637: IFFALSE 6671
6639: GO 6641
6641: DISABLE
// begin if IAmServer then
6642: CALL_OW 518
6646: IFFALSE 6655
// wait ( 0 0$3 ) ;
6648: LD_INT 105
6650: PPUSH
6651: CALL_OW 67
// if Multiplayer then
6655: LD_OWVAR 4
6659: IFFALSE 6667
// YouWinInMultiplayer else
6661: CALL_OW 106
6665: GO 6671
// YouWin ;
6667: CALL_OW 103
// end ;
6671: END
// export function HasPowerByGameType ( gameType , side ) ; begin
6672: LD_INT 0
6674: PPUSH
// result := false ;
6675: LD_ADDR_VAR 0 3
6679: PUSH
6680: LD_INT 0
6682: ST_TO_ADDR
// case gameType of GameTypeNormal , GameTypeFamine :
6683: LD_VAR 0 1
6687: PUSH
6688: LD_INT 1
6690: DOUBLE
6691: EQUAL
6692: IFTRUE 6702
6694: LD_INT 5
6696: DOUBLE
6697: EQUAL
6698: IFTRUE 6702
6700: GO 6775
6702: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) ;
6703: LD_ADDR_VAR 0 3
6707: PUSH
6708: LD_INT 22
6710: PUSH
6711: LD_VAR 0 2
6715: PUSH
6716: EMPTY
6717: LIST
6718: LIST
6719: PUSH
6720: LD_INT 2
6722: PUSH
6723: LD_INT 21
6725: PUSH
6726: LD_INT 1
6728: PUSH
6729: EMPTY
6730: LIST
6731: LIST
6732: PUSH
6733: LD_INT 33
6735: PUSH
6736: LD_INT 3
6738: PUSH
6739: EMPTY
6740: LIST
6741: LIST
6742: PUSH
6743: LD_INT 33
6745: PUSH
6746: LD_INT 5
6748: PUSH
6749: EMPTY
6750: LIST
6751: LIST
6752: PUSH
6753: EMPTY
6754: LIST
6755: LIST
6756: LIST
6757: LIST
6758: PUSH
6759: EMPTY
6760: LIST
6761: LIST
6762: PPUSH
6763: CALL_OW 69
6767: PPUSH
6768: CALL 12014 0 1
6772: ST_TO_ADDR
// end ; GameTypeSurvival :
6773: GO 7014
6775: LD_INT 2
6777: DOUBLE
6778: EQUAL
6779: IFTRUE 6783
6781: GO 6913
6783: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ) and Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) ;
6784: LD_ADDR_VAR 0 3
6788: PUSH
6789: LD_INT 22
6791: PUSH
6792: LD_VAR 0 2
6796: PUSH
6797: EMPTY
6798: LIST
6799: LIST
6800: PUSH
6801: LD_INT 2
6803: PUSH
6804: LD_INT 30
6806: PUSH
6807: LD_INT 0
6809: PUSH
6810: EMPTY
6811: LIST
6812: LIST
6813: PUSH
6814: LD_INT 30
6816: PUSH
6817: LD_INT 1
6819: PUSH
6820: EMPTY
6821: LIST
6822: LIST
6823: PUSH
6824: EMPTY
6825: LIST
6826: LIST
6827: LIST
6828: PUSH
6829: EMPTY
6830: LIST
6831: LIST
6832: PPUSH
6833: CALL_OW 69
6837: PPUSH
6838: CALL 12014 0 1
6842: IFFALSE 6910
6844: PUSH
6845: LD_INT 22
6847: PUSH
6848: LD_VAR 0 2
6852: PUSH
6853: EMPTY
6854: LIST
6855: LIST
6856: PUSH
6857: LD_INT 2
6859: PUSH
6860: LD_INT 21
6862: PUSH
6863: LD_INT 1
6865: PUSH
6866: EMPTY
6867: LIST
6868: LIST
6869: PUSH
6870: LD_INT 33
6872: PUSH
6873: LD_INT 3
6875: PUSH
6876: EMPTY
6877: LIST
6878: LIST
6879: PUSH
6880: LD_INT 33
6882: PUSH
6883: LD_INT 5
6885: PUSH
6886: EMPTY
6887: LIST
6888: LIST
6889: PUSH
6890: EMPTY
6891: LIST
6892: LIST
6893: LIST
6894: LIST
6895: PUSH
6896: EMPTY
6897: LIST
6898: LIST
6899: PPUSH
6900: CALL_OW 69
6904: PPUSH
6905: CALL 12014 0 1
6909: AND
6910: ST_TO_ADDR
// end ; GameTypeKing :
6911: GO 7014
6913: LD_INT 3
6915: DOUBLE
6916: EQUAL
6917: IFTRUE 6921
6919: GO 7013
6921: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) and HowMuchPointsKing ( side ) < mpPoints ;
6922: LD_ADDR_VAR 0 3
6926: PUSH
6927: LD_INT 22
6929: PUSH
6930: LD_VAR 0 2
6934: PUSH
6935: EMPTY
6936: LIST
6937: LIST
6938: PUSH
6939: LD_INT 2
6941: PUSH
6942: LD_INT 21
6944: PUSH
6945: LD_INT 1
6947: PUSH
6948: EMPTY
6949: LIST
6950: LIST
6951: PUSH
6952: LD_INT 33
6954: PUSH
6955: LD_INT 3
6957: PUSH
6958: EMPTY
6959: LIST
6960: LIST
6961: PUSH
6962: LD_INT 33
6964: PUSH
6965: LD_INT 5
6967: PUSH
6968: EMPTY
6969: LIST
6970: LIST
6971: PUSH
6972: EMPTY
6973: LIST
6974: LIST
6975: LIST
6976: LIST
6977: PUSH
6978: EMPTY
6979: LIST
6980: LIST
6981: PPUSH
6982: CALL_OW 69
6986: PPUSH
6987: CALL 12014 0 1
6991: IFFALSE 7010
6993: PUSH
6994: LD_VAR 0 2
6998: PPUSH
6999: CALL 59910 0 1
7003: PUSH
7004: LD_EXP 35
7008: LESS
7009: AND
7010: ST_TO_ADDR
// end ; end ;
7011: GO 7014
7013: POP
// end ;
7014: LD_VAR 0 3
7018: RET
// every 0 0$1 trigger mpActive marked mpLose do var gameIsOn , i ;
7019: LD_INT 100
7021: IFFALSE 7251
7023: GO 7025
7025: DISABLE
7026: LD_INT 0
7028: PPUSH
7029: PPUSH
// begin if Multiplayer then
7030: LD_OWVAR 4
7034: IFFALSE 7042
// SetPlayerSpectator ( ) else
7036: CALL_OW 572
7040: GO 7051
// FogOff ( your_side ) ;
7042: LD_OWVAR 2
7046: PPUSH
7047: CALL_OW 344
// repeat gameIsOn := false ;
7051: LD_ADDR_VAR 0 1
7055: PUSH
7056: LD_INT 0
7058: ST_TO_ADDR
// for i := 1 to 8 do
7059: LD_ADDR_VAR 0 2
7063: PUSH
7064: DOUBLE
7065: LD_INT 1
7067: DEC
7068: ST_TO_ADDR
7069: LD_INT 8
7071: PUSH
7072: FOR_TO
7073: IFFALSE 7203
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
7075: LD_EXP 7
7079: PUSH
7080: LD_VAR 0 2
7084: ARRAY
7085: IFFALSE 7098
7087: PUSH
7088: LD_VAR 0 2
7092: PPUSH
7093: CALL_OW 108
7097: AND
7098: IFFALSE 7112
7100: PUSH
7101: LD_VAR 0 2
7105: PUSH
7106: LD_OWVAR 2
7110: NONEQUAL
7111: AND
7112: IFFALSE 7201
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
7114: LD_EXP 8
7118: PUSH
7119: LD_VAR 0 2
7123: ARRAY
7124: NOT
7125: IFTRUE 7173
7127: PUSH
7128: LD_EXP 8
7132: PUSH
7133: LD_VAR 0 2
7137: ARRAY
7138: PUSH
7139: LD_EXP 8
7143: PUSH
7144: LD_OWVAR 2
7148: ARRAY
7149: NONEQUAL
7150: IFFALSE 7172
7152: PUSH
7153: LD_OWVAR 2
7157: PPUSH
7158: LD_VAR 0 2
7162: PPUSH
7163: CALL_OW 81
7167: PUSH
7168: LD_INT 1
7170: NONEQUAL
7171: AND
7172: OR
7173: IFFALSE 7201
// if HasPowerByGameType ( mpGameType , i ) then
7175: LD_EXP 3
7179: PPUSH
7180: LD_VAR 0 2
7184: PPUSH
7185: CALL 6672 0 2
7189: IFFALSE 7201
// begin gameIsOn := true ;
7191: LD_ADDR_VAR 0 1
7195: PUSH
7196: LD_INT 1
7198: ST_TO_ADDR
// break ;
7199: GO 7203
// end ;
7201: GO 7072
7203: POP
7204: POP
// wait ( 100 ) ;
7205: LD_INT 100
7207: PPUSH
7208: CALL_OW 67
// until not gameIsOn ;
7212: LD_VAR 0 1
7216: NOT
7217: IFFALSE 7051
// if IAmServer then
7219: CALL_OW 518
7223: IFFALSE 7232
// wait ( 0 0$3 ) ;
7225: LD_INT 105
7227: PPUSH
7228: CALL_OW 67
// if Multiplayer then
7232: LD_OWVAR 4
7236: IFFALSE 7244
// YouLostInMultiplayer else
7238: CALL_OW 107
7242: GO 7251
// YouLost (  ) ;
7244: LD_STRING 
7246: PPUSH
7247: CALL_OW 104
// end ;
7251: PPOPN 2
7253: END
// every 0 0$10 trigger mpRespawn marked mpActive do var i , j , tmp , spawn , sides ;
7254: LD_EXP 33
7258: IFFALSE 7642
7260: GO 7262
7262: DISABLE
7263: LD_INT 0
7265: PPUSH
7266: PPUSH
7267: PPUSH
7268: PPUSH
7269: PPUSH
// begin sides := [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 ] ;
7270: LD_ADDR_VAR 0 5
7274: PUSH
7275: LD_INT 1
7277: PUSH
7278: LD_INT 2
7280: PUSH
7281: LD_INT 3
7283: PUSH
7284: LD_INT 4
7286: PUSH
7287: LD_INT 5
7289: PUSH
7290: LD_INT 6
7292: PUSH
7293: LD_INT 7
7295: PUSH
7296: LD_INT 8
7298: PUSH
7299: EMPTY
7300: LIST
7301: LIST
7302: LIST
7303: LIST
7304: LIST
7305: LIST
7306: LIST
7307: LIST
7308: ST_TO_ADDR
// repeat wait ( 0 0$10 ) ;
7309: LD_INT 350
7311: PPUSH
7312: CALL_OW 67
// for i := 1 to 8 do
7316: LD_ADDR_VAR 0 1
7320: PUSH
7321: DOUBLE
7322: LD_INT 1
7324: DEC
7325: ST_TO_ADDR
7326: LD_INT 8
7328: PUSH
7329: FOR_TO
7330: IFFALSE 7612
// begin j := sides [ i ] ;
7332: LD_ADDR_VAR 0 2
7336: PUSH
7337: LD_VAR 0 5
7341: PUSH
7342: LD_VAR 0 1
7346: ARRAY
7347: ST_TO_ADDR
// if Count ( mpRespawnPull [ j ] ) and MultiplayerSideAlive ( j ) and HasPowerByGameType ( mpGameType , j ) then
7348: LD_EXP 40
7352: PUSH
7353: LD_VAR 0 2
7357: ARRAY
7358: PPUSH
7359: CALL 12014 0 1
7363: IFFALSE 7376
7365: PUSH
7366: LD_VAR 0 2
7370: PPUSH
7371: CALL_OW 108
7375: AND
7376: IFFALSE 7394
7378: PUSH
7379: LD_EXP 3
7383: PPUSH
7384: LD_VAR 0 2
7388: PPUSH
7389: CALL 6672 0 2
7393: AND
7394: IFFALSE 7610
// begin wait ( mpRespawn div 3 ) ;
7396: LD_EXP 33
7400: PUSH
7401: LD_INT 3
7403: DIV
7404: PPUSH
7405: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , j ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
7409: LD_ADDR_VAR 0 3
7413: PUSH
7414: LD_INT 22
7416: PUSH
7417: LD_VAR 0 2
7421: PUSH
7422: EMPTY
7423: LIST
7424: LIST
7425: PUSH
7426: LD_INT 50
7428: PUSH
7429: EMPTY
7430: LIST
7431: PUSH
7432: LD_INT 2
7434: PUSH
7435: LD_INT 30
7437: PUSH
7438: LD_INT 0
7440: PUSH
7441: EMPTY
7442: LIST
7443: LIST
7444: PUSH
7445: LD_INT 30
7447: PUSH
7448: LD_INT 1
7450: PUSH
7451: EMPTY
7452: LIST
7453: LIST
7454: PUSH
7455: EMPTY
7456: LIST
7457: LIST
7458: LIST
7459: PUSH
7460: EMPTY
7461: LIST
7462: LIST
7463: LIST
7464: PPUSH
7465: CALL_OW 69
7469: ST_TO_ADDR
// if not tmp or not MultiplayerSideAlive ( j ) or not HasPowerByGameType ( mpGameType , j ) then
7470: LD_VAR 0 3
7474: NOT
7475: IFTRUE 7489
7477: PUSH
7478: LD_VAR 0 2
7482: PPUSH
7483: CALL_OW 108
7487: NOT
7488: OR
7489: IFTRUE 7508
7491: PUSH
7492: LD_EXP 3
7496: PPUSH
7497: LD_VAR 0 2
7501: PPUSH
7502: CALL 6672 0 2
7506: NOT
7507: OR
7508: IFFALSE 7512
// continue ;
7510: GO 7329
// spawn := tmp [ 1 ] ;
7512: LD_ADDR_VAR 0 4
7516: PUSH
7517: LD_VAR 0 3
7521: PUSH
7522: LD_INT 1
7524: ARRAY
7525: ST_TO_ADDR
// PlaceUnitXYR ( mpRespawnPull [ j ] [ 1 ] , GetX ( spawn ) , GetY ( spawn ) , 32 , true ) ;
7526: LD_EXP 40
7530: PUSH
7531: LD_VAR 0 2
7535: ARRAY
7536: PUSH
7537: LD_INT 1
7539: ARRAY
7540: PPUSH
7541: LD_VAR 0 4
7545: PPUSH
7546: CALL_OW 250
7550: PPUSH
7551: LD_VAR 0 4
7555: PPUSH
7556: CALL_OW 251
7560: PPUSH
7561: LD_INT 32
7563: PPUSH
7564: LD_INT 1
7566: PPUSH
7567: CALL_OW 50
// mpRespawnPull := Replace ( mpRespawnPull , j , Delete ( mpRespawnPull [ j ] , 1 ) ) ;
7571: LD_ADDR_EXP 40
7575: PUSH
7576: LD_EXP 40
7580: PPUSH
7581: LD_VAR 0 2
7585: PPUSH
7586: LD_EXP 40
7590: PUSH
7591: LD_VAR 0 2
7595: ARRAY
7596: PPUSH
7597: LD_INT 1
7599: PPUSH
7600: CALL_OW 3
7604: PPUSH
7605: CALL_OW 1
7609: ST_TO_ADDR
// end ; end ;
7610: GO 7329
7612: POP
7613: POP
// sides := Reindex ( sides , 1 , 8 , true ) ;
7614: LD_ADDR_VAR 0 5
7618: PUSH
7619: LD_VAR 0 5
7623: PPUSH
7624: LD_INT 1
7626: PPUSH
7627: LD_INT 8
7629: PPUSH
7630: LD_INT 1
7632: PPUSH
7633: CALL 14306 0 4
7637: ST_TO_ADDR
// until false ;
7638: LD_INT 0
7640: IFFALSE 7309
// end ;
7642: PPOPN 5
7644: END
// every 0 0$1 marked mpActive do
7645: GO 7647
7647: DISABLE
// begin enable ;
7648: ENABLE
// if not mpDisplayStrings then
7649: LD_EXP 38
7653: NOT
7654: IFFALSE 7665
// begin display_strings := [ ] ;
7656: LD_ADDR_OWVAR 47
7660: PUSH
7661: EMPTY
7662: ST_TO_ADDR
// exit ;
7663: GO 7675
// end ; display_strings := mpDisplayStrings ;
7665: LD_ADDR_OWVAR 47
7669: PUSH
7670: LD_EXP 38
7674: ST_TO_ADDR
// end ; end_of_file
7675: END
// export function Multiplayer_UnitDestroyed ( un ) ; var i , ape , tag , class , area , nation , side , tmp ; begin
7676: LD_INT 0
7678: PPUSH
7679: PPUSH
7680: PPUSH
7681: PPUSH
7682: PPUSH
7683: PPUSH
7684: PPUSH
7685: PPUSH
7686: PPUSH
// if GetType ( un ) = unit_vehicle then
7687: LD_VAR 0 1
7691: PPUSH
7692: CALL_OW 247
7696: PUSH
7697: LD_INT 2
7699: EQUAL
7700: IFFALSE 7704
// exit ;
7702: GO 8342
// side := GetSide ( un ) ;
7704: LD_ADDR_VAR 0 9
7708: PUSH
7709: LD_VAR 0 1
7713: PPUSH
7714: CALL_OW 255
7718: ST_TO_ADDR
// if mpGameType = GameTypeSurvival then
7719: LD_EXP 3
7723: PUSH
7724: LD_INT 2
7726: EQUAL
7727: IFFALSE 7803
// if GetBType ( un ) in [ b_depot , b_warehouse ] then
7729: LD_VAR 0 1
7733: PPUSH
7734: CALL_OW 266
7738: PUSH
7739: LD_INT 0
7741: PUSH
7742: LD_INT 1
7744: PUSH
7745: EMPTY
7746: LIST
7747: LIST
7748: IN
7749: IFFALSE 7803
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_human ] ] ) do
7751: LD_ADDR_VAR 0 3
7755: PUSH
7756: LD_INT 22
7758: PUSH
7759: LD_VAR 0 9
7763: PUSH
7764: EMPTY
7765: LIST
7766: LIST
7767: PUSH
7768: LD_INT 21
7770: PUSH
7771: LD_INT 1
7773: PUSH
7774: EMPTY
7775: LIST
7776: LIST
7777: PUSH
7778: EMPTY
7779: LIST
7780: LIST
7781: PPUSH
7782: CALL_OW 69
7786: PUSH
7787: FOR_IN
7788: IFFALSE 7801
// KillUnit ( i ) ;
7790: LD_VAR 0 3
7794: PPUSH
7795: CALL_OW 66
7799: GO 7787
7801: POP
7802: POP
// end ; if GetClass ( un ) in [ class_apeman , class_apeman_kamikaze , class_apeman_soldier , class_apeman_engineer ] or GetControl ( un ) = control_apeman then
7803: LD_VAR 0 1
7807: PPUSH
7808: CALL_OW 257
7812: PUSH
7813: LD_INT 12
7815: PUSH
7816: LD_INT 17
7818: PUSH
7819: LD_INT 15
7821: PUSH
7822: LD_INT 16
7824: PUSH
7825: EMPTY
7826: LIST
7827: LIST
7828: LIST
7829: LIST
7830: IN
7831: IFTRUE 7848
7833: PUSH
7834: LD_VAR 0 1
7838: PPUSH
7839: CALL_OW 263
7843: PUSH
7844: LD_INT 5
7846: EQUAL
7847: OR
7848: IFFALSE 8067
// begin tag := 0 ;
7850: LD_ADDR_VAR 0 5
7854: PUSH
7855: LD_INT 0
7857: ST_TO_ADDR
// for i := 1 to 8 do
7858: LD_ADDR_VAR 0 3
7862: PUSH
7863: DOUBLE
7864: LD_INT 1
7866: DEC
7867: ST_TO_ADDR
7868: LD_INT 8
7870: PUSH
7871: FOR_TO
7872: IFFALSE 7906
// if un in mpApePosIndex [ i ] then
7874: LD_VAR 0 1
7878: PUSH
7879: LD_EXP 32
7883: PUSH
7884: LD_VAR 0 3
7888: ARRAY
7889: IN
7890: IFFALSE 7904
// begin tag := i ;
7892: LD_ADDR_VAR 0 5
7896: PUSH
7897: LD_VAR 0 3
7901: ST_TO_ADDR
// break ;
7902: GO 7906
// end ;
7904: GO 7871
7906: POP
7907: POP
// if not tag then
7908: LD_VAR 0 5
7912: NOT
7913: IFFALSE 7917
// exit ;
7915: GO 8342
// area := mpApemansArea [ mpSidePositions [ tag ] ] ;
7917: LD_ADDR_VAR 0 7
7921: PUSH
7922: LD_EXP 31
7926: PUSH
7927: LD_EXP 7
7931: PUSH
7932: LD_VAR 0 5
7936: ARRAY
7937: ARRAY
7938: ST_TO_ADDR
// if not area then
7939: LD_VAR 0 7
7943: NOT
7944: IFFALSE 7948
// exit ;
7946: GO 8342
// wait ( 4 4$00 ) ;
7948: LD_INT 8400
7950: PPUSH
7951: CALL_OW 67
// repeat wait ( 10 ) ;
7955: LD_INT 10
7957: PPUSH
7958: CALL_OW 67
// until not mpBlockRespThread ;
7962: LD_EXP 45
7966: NOT
7967: IFFALSE 7955
// mpBlockRespThread := true ;
7969: LD_ADDR_EXP 45
7973: PUSH
7974: LD_INT 1
7976: ST_TO_ADDR
// PrepareApeman ( 0 ) ;
7977: LD_INT 0
7979: PPUSH
7980: CALL 44073 0 1
// ape := CreateHuman ;
7984: LD_ADDR_VAR 0 4
7988: PUSH
7989: CALL_OW 44
7993: ST_TO_ADDR
// mpApePosIndex := Replace ( mpApePosIndex , tag , Join ( mpApePosIndex [ tag ] , ape ) ) ;
7994: LD_ADDR_EXP 32
7998: PUSH
7999: LD_EXP 32
8003: PPUSH
8004: LD_VAR 0 5
8008: PPUSH
8009: LD_EXP 32
8013: PUSH
8014: LD_VAR 0 5
8018: ARRAY
8019: PPUSH
8020: LD_VAR 0 4
8024: PPUSH
8025: CALL 47946 0 2
8029: PPUSH
8030: CALL_OW 1
8034: ST_TO_ADDR
// PlaceUnitArea ( ape , area , false ) ;
8035: LD_VAR 0 4
8039: PPUSH
8040: LD_VAR 0 7
8044: PPUSH
8045: LD_INT 0
8047: PPUSH
8048: CALL_OW 49
// wait ( 10 ) ;
8052: LD_INT 10
8054: PPUSH
8055: CALL_OW 67
// mpBlockRespThread := false ;
8059: LD_ADDR_EXP 45
8063: PUSH
8064: LD_INT 0
8066: ST_TO_ADDR
// end ; if GetType ( un ) = unit_human and GetNation ( un ) > nation_nature then
8067: LD_VAR 0 1
8071: PPUSH
8072: CALL_OW 247
8076: PUSH
8077: LD_INT 1
8079: EQUAL
8080: IFFALSE 8097
8082: PUSH
8083: LD_VAR 0 1
8087: PPUSH
8088: CALL_OW 248
8092: PUSH
8093: LD_INT 0
8095: GREATER
8096: AND
8097: IFFALSE 8342
// begin if not mpRespawn then
8099: LD_EXP 33
8103: NOT
8104: IFFALSE 8108
// exit ;
8106: GO 8342
// if not MultiplayerSideAlive ( side ) and not HasPowerByGameType ( mpGameType , side ) then
8108: LD_VAR 0 9
8112: PPUSH
8113: CALL_OW 108
8117: NOT
8118: IFFALSE 8137
8120: PUSH
8121: LD_EXP 3
8125: PPUSH
8126: LD_VAR 0 9
8130: PPUSH
8131: CALL 6672 0 2
8135: NOT
8136: AND
8137: IFFALSE 8141
// exit ;
8139: GO 8342
// side := GetSide ( un ) ;
8141: LD_ADDR_VAR 0 9
8145: PUSH
8146: LD_VAR 0 1
8150: PPUSH
8151: CALL_OW 255
8155: ST_TO_ADDR
// nation := GetNation ( un ) ;
8156: LD_ADDR_VAR 0 8
8160: PUSH
8161: LD_VAR 0 1
8165: PPUSH
8166: CALL_OW 248
8170: ST_TO_ADDR
// class := GetClass ( un ) ;
8171: LD_ADDR_VAR 0 6
8175: PUSH
8176: LD_VAR 0 1
8180: PPUSH
8181: CALL_OW 257
8185: ST_TO_ADDR
// if class > 4 then
8186: LD_VAR 0 6
8190: PUSH
8191: LD_INT 4
8193: GREATER
8194: IFFALSE 8204
// class := 1 ;
8196: LD_ADDR_VAR 0 6
8200: PUSH
8201: LD_INT 1
8203: ST_TO_ADDR
// repeat wait ( 10 ) ;
8204: LD_INT 10
8206: PPUSH
8207: CALL_OW 67
// until not mpBlockRespThread ;
8211: LD_EXP 45
8215: NOT
8216: IFFALSE 8204
// mpBlockRespThread := true ;
8218: LD_ADDR_EXP 45
8222: PUSH
8223: LD_INT 1
8225: ST_TO_ADDR
// uc_side := side ;
8226: LD_ADDR_OWVAR 20
8230: PUSH
8231: LD_VAR 0 9
8235: ST_TO_ADDR
// uc_nation := nation ;
8236: LD_ADDR_OWVAR 21
8240: PUSH
8241: LD_VAR 0 8
8245: ST_TO_ADDR
// PrepareHuman ( false , class , 2 ) ;
8246: LD_INT 0
8248: PPUSH
8249: LD_VAR 0 6
8253: PPUSH
8254: LD_INT 2
8256: PPUSH
8257: CALL_OW 380
// un := CreateHuman ;
8261: LD_ADDR_VAR 0 1
8265: PUSH
8266: CALL_OW 44
8270: ST_TO_ADDR
// mpRespawnPull := Replace ( mpRespawnPull , side , Replace ( mpRespawnPull [ side ] , mpRespawnPull [ side ] + 1 , un ) ) ;
8271: LD_ADDR_EXP 40
8275: PUSH
8276: LD_EXP 40
8280: PPUSH
8281: LD_VAR 0 9
8285: PPUSH
8286: LD_EXP 40
8290: PUSH
8291: LD_VAR 0 9
8295: ARRAY
8296: PPUSH
8297: LD_EXP 40
8301: PUSH
8302: LD_VAR 0 9
8306: ARRAY
8307: PUSH
8308: LD_INT 1
8310: PLUS
8311: PPUSH
8312: LD_VAR 0 1
8316: PPUSH
8317: CALL_OW 1
8321: PPUSH
8322: CALL_OW 1
8326: ST_TO_ADDR
// wait ( 10 ) ;
8327: LD_INT 10
8329: PPUSH
8330: CALL_OW 67
// mpBlockRespThread := false ;
8334: LD_ADDR_EXP 45
8338: PUSH
8339: LD_INT 0
8341: ST_TO_ADDR
// end ; end ;
8342: LD_VAR 0 2
8346: RET
// export function Multiplayer_BuildingComplete ( building ) ; begin
8347: LD_INT 0
8349: PPUSH
// if GetBType ( building ) in [ b_depot , b_warehouse ] then
8350: LD_VAR 0 1
8354: PPUSH
8355: CALL_OW 266
8359: PUSH
8360: LD_INT 0
8362: PUSH
8363: LD_INT 1
8365: PUSH
8366: EMPTY
8367: LIST
8368: LIST
8369: IN
8370: IFFALSE 8395
// SetBName ( building , @ & GetSide ( building ) ) ;
8372: LD_VAR 0 1
8376: PPUSH
8377: LD_STRING @
8379: PUSH
8380: LD_VAR 0 1
8384: PPUSH
8385: CALL_OW 255
8389: STR
8390: PPUSH
8391: CALL_OW 500
// end ;
8395: LD_VAR 0 2
8399: RET
// export function Multiplayer_BuildingCaptured ( building , oldSide , unit ) ; var i ; begin
8400: LD_INT 0
8402: PPUSH
8403: PPUSH
// if mpGameType = GameTypeSurvival and GetBType ( building ) in [ b_depot , b_warehouse ] then
8404: LD_EXP 3
8408: PUSH
8409: LD_INT 2
8411: EQUAL
8412: IFFALSE 8436
8414: PUSH
8415: LD_VAR 0 1
8419: PPUSH
8420: CALL_OW 266
8424: PUSH
8425: LD_INT 0
8427: PUSH
8428: LD_INT 1
8430: PUSH
8431: EMPTY
8432: LIST
8433: LIST
8434: IN
8435: AND
8436: IFFALSE 8515
// begin SetSide ( building , oldSide ) ;
8438: LD_VAR 0 1
8442: PPUSH
8443: LD_VAR 0 2
8447: PPUSH
8448: CALL_OW 235
// KillUnit ( building ) ;
8452: LD_VAR 0 1
8456: PPUSH
8457: CALL_OW 66
// for i in FilterAllUnits ( [ [ f_side , oldSide ] , [ f_type , unit_human ] ] ) do
8461: LD_ADDR_VAR 0 5
8465: PUSH
8466: LD_INT 22
8468: PUSH
8469: LD_VAR 0 2
8473: PUSH
8474: EMPTY
8475: LIST
8476: LIST
8477: PUSH
8478: LD_INT 21
8480: PUSH
8481: LD_INT 1
8483: PUSH
8484: EMPTY
8485: LIST
8486: LIST
8487: PUSH
8488: EMPTY
8489: LIST
8490: LIST
8491: PPUSH
8492: CALL_OW 69
8496: PUSH
8497: FOR_IN
8498: IFFALSE 8511
// KillUnit ( i ) ;
8500: LD_VAR 0 5
8504: PPUSH
8505: CALL_OW 66
8509: GO 8497
8511: POP
8512: POP
// exit ;
8513: GO 8560
// end ; if GetBType ( building ) in [ b_depot , b_warehouse ] then
8515: LD_VAR 0 1
8519: PPUSH
8520: CALL_OW 266
8524: PUSH
8525: LD_INT 0
8527: PUSH
8528: LD_INT 1
8530: PUSH
8531: EMPTY
8532: LIST
8533: LIST
8534: IN
8535: IFFALSE 8560
// SetBName ( building , @ & GetSide ( building ) ) ;
8537: LD_VAR 0 1
8541: PPUSH
8542: LD_STRING @
8544: PUSH
8545: LD_VAR 0 1
8549: PPUSH
8550: CALL_OW 255
8554: STR
8555: PPUSH
8556: CALL_OW 500
// end ;
8560: LD_VAR 0 4
8564: RET
// export function Multiplayer_OilExtracted ( building , side , base , amount ) ; var i , value ; begin
8565: LD_INT 0
8567: PPUSH
8568: PPUSH
8569: PPUSH
// if mpGameType <> GameTypeFamine then
8570: LD_EXP 3
8574: PUSH
8575: LD_INT 5
8577: NONEQUAL
8578: IFFALSE 8582
// exit ;
8580: GO 8796
// for i := 1 to mpGlobalOilDeposits do
8582: LD_ADDR_VAR 0 6
8586: PUSH
8587: DOUBLE
8588: LD_INT 1
8590: DEC
8591: ST_TO_ADDR
8592: LD_EXP 41
8596: PUSH
8597: FOR_TO
8598: IFFALSE 8794
// begin if HexInfo ( mpGlobalOilDeposits [ i ] [ 1 ] , mpGlobalOilDeposits [ i ] [ 2 ] ) = building then
8600: LD_EXP 41
8604: PUSH
8605: LD_VAR 0 6
8609: ARRAY
8610: PUSH
8611: LD_INT 1
8613: ARRAY
8614: PPUSH
8615: LD_EXP 41
8619: PUSH
8620: LD_VAR 0 6
8624: ARRAY
8625: PUSH
8626: LD_INT 2
8628: ARRAY
8629: PPUSH
8630: CALL_OW 428
8634: PUSH
8635: LD_VAR 0 1
8639: EQUAL
8640: IFFALSE 8792
// begin value := mpGlobalOilDeposits [ i ] [ 3 ] ;
8642: LD_ADDR_VAR 0 7
8646: PUSH
8647: LD_EXP 41
8651: PUSH
8652: LD_VAR 0 6
8656: ARRAY
8657: PUSH
8658: LD_INT 3
8660: ARRAY
8661: ST_TO_ADDR
// value := Dec ( value ) ;
8662: LD_ADDR_VAR 0 7
8666: PUSH
8667: LD_VAR 0 7
8671: PPUSH
8672: CALL 49341 0 1
8676: ST_TO_ADDR
// mpGlobalOilDeposits := Replace ( mpGlobalOilDeposits , i , Replace ( mpGlobalOilDeposits [ i ] , 3 , value ) ) ;
8677: LD_ADDR_EXP 41
8681: PUSH
8682: LD_EXP 41
8686: PPUSH
8687: LD_VAR 0 6
8691: PPUSH
8692: LD_EXP 41
8696: PUSH
8697: LD_VAR 0 6
8701: ARRAY
8702: PPUSH
8703: LD_INT 3
8705: PPUSH
8706: LD_VAR 0 7
8710: PPUSH
8711: CALL_OW 1
8715: PPUSH
8716: CALL_OW 1
8720: ST_TO_ADDR
// SetUnitDisplayNumber ( building , value ) ;
8721: LD_VAR 0 1
8725: PPUSH
8726: LD_VAR 0 7
8730: PPUSH
8731: CALL_OW 505
// if value = 0 then
8735: LD_VAR 0 7
8739: PUSH
8740: LD_INT 0
8742: EQUAL
8743: IFFALSE 8792
// begin RemoveDepositXY ( mpGlobalOilDeposits [ i ] [ 1 ] , mpGlobalOilDeposits [ i ] [ 2 ] ) ;
8745: LD_EXP 41
8749: PUSH
8750: LD_VAR 0 6
8754: ARRAY
8755: PUSH
8756: LD_INT 1
8758: ARRAY
8759: PPUSH
8760: LD_EXP 41
8764: PUSH
8765: LD_VAR 0 6
8769: ARRAY
8770: PUSH
8771: LD_INT 2
8773: ARRAY
8774: PPUSH
8775: CALL_OW 63
// KillUnit ( building ) ;
8779: LD_VAR 0 1
8783: PPUSH
8784: CALL_OW 66
// exit ;
8788: POP
8789: POP
8790: GO 8796
// end ; end ; end ;
8792: GO 8597
8794: POP
8795: POP
// end ;
8796: LD_VAR 0 5
8800: RET
// export function Multiplayer_SibExtracted ( building , side , base , amount ) ; var i , value ; begin
8801: LD_INT 0
8803: PPUSH
8804: PPUSH
8805: PPUSH
// if mpGameType <> GameTypeFamine then
8806: LD_EXP 3
8810: PUSH
8811: LD_INT 5
8813: NONEQUAL
8814: IFFALSE 8818
// exit ;
8816: GO 9032
// for i := 1 to mpGlobalSibDeposits do
8818: LD_ADDR_VAR 0 6
8822: PUSH
8823: DOUBLE
8824: LD_INT 1
8826: DEC
8827: ST_TO_ADDR
8828: LD_EXP 42
8832: PUSH
8833: FOR_TO
8834: IFFALSE 9030
// begin if HexInfo ( mpGlobalSibDeposits [ i ] [ 1 ] , mpGlobalSibDeposits [ i ] [ 2 ] ) = building then
8836: LD_EXP 42
8840: PUSH
8841: LD_VAR 0 6
8845: ARRAY
8846: PUSH
8847: LD_INT 1
8849: ARRAY
8850: PPUSH
8851: LD_EXP 42
8855: PUSH
8856: LD_VAR 0 6
8860: ARRAY
8861: PUSH
8862: LD_INT 2
8864: ARRAY
8865: PPUSH
8866: CALL_OW 428
8870: PUSH
8871: LD_VAR 0 1
8875: EQUAL
8876: IFFALSE 9028
// begin value := mpGlobalSibDeposits [ i ] [ 3 ] ;
8878: LD_ADDR_VAR 0 7
8882: PUSH
8883: LD_EXP 42
8887: PUSH
8888: LD_VAR 0 6
8892: ARRAY
8893: PUSH
8894: LD_INT 3
8896: ARRAY
8897: ST_TO_ADDR
// value := Dec ( value ) ;
8898: LD_ADDR_VAR 0 7
8902: PUSH
8903: LD_VAR 0 7
8907: PPUSH
8908: CALL 49341 0 1
8912: ST_TO_ADDR
// mpGlobalSibDeposits := Replace ( mpGlobalSibDeposits , i , Replace ( mpGlobalSibDeposits [ i ] , 3 , value ) ) ;
8913: LD_ADDR_EXP 42
8917: PUSH
8918: LD_EXP 42
8922: PPUSH
8923: LD_VAR 0 6
8927: PPUSH
8928: LD_EXP 42
8932: PUSH
8933: LD_VAR 0 6
8937: ARRAY
8938: PPUSH
8939: LD_INT 3
8941: PPUSH
8942: LD_VAR 0 7
8946: PPUSH
8947: CALL_OW 1
8951: PPUSH
8952: CALL_OW 1
8956: ST_TO_ADDR
// SetUnitDisplayNumber ( building , value ) ;
8957: LD_VAR 0 1
8961: PPUSH
8962: LD_VAR 0 7
8966: PPUSH
8967: CALL_OW 505
// if value = 0 then
8971: LD_VAR 0 7
8975: PUSH
8976: LD_INT 0
8978: EQUAL
8979: IFFALSE 9028
// begin RemoveDepositXY ( mpGlobalSibDeposits [ i ] [ 1 ] , mpGlobalSibDeposits [ i ] [ 2 ] ) ;
8981: LD_EXP 42
8985: PUSH
8986: LD_VAR 0 6
8990: ARRAY
8991: PUSH
8992: LD_INT 1
8994: ARRAY
8995: PPUSH
8996: LD_EXP 42
9000: PUSH
9001: LD_VAR 0 6
9005: ARRAY
9006: PUSH
9007: LD_INT 2
9009: ARRAY
9010: PPUSH
9011: CALL_OW 63
// KillUnit ( building ) ;
9015: LD_VAR 0 1
9019: PPUSH
9020: CALL_OW 66
// exit ;
9024: POP
9025: POP
9026: GO 9032
// end ; end ; end ;
9028: GO 8833
9030: POP
9031: POP
// end ; end_of_file
9032: LD_VAR 0 5
9036: RET
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeNormal do var i , canWin ;
9037: LD_EXP 39
9041: IFFALSE 9049
9043: PUSH
9044: CALL 9259 0 0
9048: AND
9049: IFFALSE 9057
9051: PUSH
9052: LD_OWVAR 4
9056: AND
9057: IFFALSE 9256
9059: GO 9061
9061: DISABLE
9062: LD_INT 0
9064: PPUSH
9065: PPUSH
// begin canWin := false ;
9066: LD_ADDR_VAR 0 2
9070: PUSH
9071: LD_INT 0
9073: ST_TO_ADDR
// if not HasPower ( your_side ) then
9074: LD_OWVAR 2
9078: PPUSH
9079: CALL 9301 0 1
9083: NOT
9084: IFFALSE 9095
// begin Multiplayer_Loose_Message ;
9086: CALL_OW 521
// enable ( mpLose ) ;
9090: LD_INT 102
9092: ENABLE_MARKED
// end else
9093: GO 9256
// begin canWin := true ;
9095: LD_ADDR_VAR 0 2
9099: PUSH
9100: LD_INT 1
9102: ST_TO_ADDR
// for i := 1 to 8 do
9103: LD_ADDR_VAR 0 1
9107: PUSH
9108: DOUBLE
9109: LD_INT 1
9111: DEC
9112: ST_TO_ADDR
9113: LD_INT 8
9115: PUSH
9116: FOR_TO
9117: IFFALSE 9242
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
9119: LD_EXP 7
9123: PUSH
9124: LD_VAR 0 1
9128: ARRAY
9129: IFFALSE 9142
9131: PUSH
9132: LD_VAR 0 1
9136: PPUSH
9137: CALL_OW 108
9141: AND
9142: IFFALSE 9156
9144: PUSH
9145: LD_VAR 0 1
9149: PUSH
9150: LD_OWVAR 2
9154: NONEQUAL
9155: AND
9156: IFFALSE 9240
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
9158: LD_EXP 8
9162: PUSH
9163: LD_VAR 0 1
9167: ARRAY
9168: NOT
9169: IFTRUE 9217
9171: PUSH
9172: LD_EXP 8
9176: PUSH
9177: LD_VAR 0 1
9181: ARRAY
9182: PUSH
9183: LD_EXP 8
9187: PUSH
9188: LD_OWVAR 2
9192: ARRAY
9193: NONEQUAL
9194: IFFALSE 9216
9196: PUSH
9197: LD_OWVAR 2
9201: PPUSH
9202: LD_VAR 0 1
9206: PPUSH
9207: CALL_OW 81
9211: PUSH
9212: LD_INT 1
9214: NONEQUAL
9215: AND
9216: OR
9217: IFFALSE 9240
// if HasPower ( i ) then
9219: LD_VAR 0 1
9223: PPUSH
9224: CALL 9301 0 1
9228: IFFALSE 9240
// begin canWin := false ;
9230: LD_ADDR_VAR 0 2
9234: PUSH
9235: LD_INT 0
9237: ST_TO_ADDR
// break ;
9238: GO 9242
// end ;
9240: GO 9116
9242: POP
9243: POP
// if canWin then
9244: LD_VAR 0 2
9248: IFFALSE 9255
// enable ( mpWin ) else
9250: LD_INT 101
9252: ENABLE_MARKED
9253: GO 9256
// enable ;
9255: ENABLE
// end ; end ;
9256: PPOPN 2
9258: END
// function CanWinLoose ; begin
9259: LD_INT 0
9261: PPUSH
// result := true ;
9262: LD_ADDR_VAR 0 1
9266: PUSH
9267: LD_INT 1
9269: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
9270: CALL_OW 531
9274: IFFALSE 9286
9276: PUSH
9277: CALL_OW 519
9281: PUSH
9282: LD_INT 1
9284: GREATER
9285: AND
9286: IFFALSE 9296
// result := false ;
9288: LD_ADDR_VAR 0 1
9292: PUSH
9293: LD_INT 0
9295: ST_TO_ADDR
// end ;
9296: LD_VAR 0 1
9300: RET
// function HasPower ( i ) ; begin
9301: LD_INT 0
9303: PPUSH
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
9304: LD_ADDR_VAR 0 2
9308: PUSH
9309: LD_INT 22
9311: PUSH
9312: LD_VAR 0 1
9316: PUSH
9317: EMPTY
9318: LIST
9319: LIST
9320: PUSH
9321: LD_INT 2
9323: PUSH
9324: LD_INT 21
9326: PUSH
9327: LD_INT 1
9329: PUSH
9330: EMPTY
9331: LIST
9332: LIST
9333: PUSH
9334: LD_INT 33
9336: PUSH
9337: LD_INT 3
9339: PUSH
9340: EMPTY
9341: LIST
9342: LIST
9343: PUSH
9344: LD_INT 33
9346: PUSH
9347: LD_INT 5
9349: PUSH
9350: EMPTY
9351: LIST
9352: LIST
9353: PUSH
9354: EMPTY
9355: LIST
9356: LIST
9357: LIST
9358: LIST
9359: PUSH
9360: EMPTY
9361: LIST
9362: LIST
9363: PPUSH
9364: CALL_OW 69
9368: ST_TO_ADDR
// end ; end_of_file
9369: LD_VAR 0 2
9373: RET
// every 0 0$1 trigger mpGameActive marked GameTypeSurvival do var i ;
9374: LD_EXP 39
9378: IFFALSE 9421
9380: GO 9382
9382: DISABLE
9383: LD_INT 0
9385: PPUSH
// begin for i := 1 to 8 do
9386: LD_ADDR_VAR 0 1
9390: PUSH
9391: DOUBLE
9392: LD_INT 1
9394: DEC
9395: ST_TO_ADDR
9396: LD_INT 8
9398: PUSH
9399: FOR_TO
9400: IFFALSE 9419
// SetRestrict ( b_depot , i , state_disabled ) ;
9402: LD_INT 0
9404: PPUSH
9405: LD_VAR 0 1
9409: PPUSH
9410: LD_INT 0
9412: PPUSH
9413: CALL_OW 324
9417: GO 9399
9419: POP
9420: POP
// end ;
9421: PPOPN 1
9423: END
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeSurvival do var i , canWin ;
9424: LD_EXP 39
9428: IFFALSE 9436
9430: PUSH
9431: CALL 9646 0 0
9435: AND
9436: IFFALSE 9444
9438: PUSH
9439: LD_OWVAR 4
9443: AND
9444: IFFALSE 9643
9446: GO 9448
9448: DISABLE
9449: LD_INT 0
9451: PPUSH
9452: PPUSH
// begin canWin := false ;
9453: LD_ADDR_VAR 0 2
9457: PUSH
9458: LD_INT 0
9460: ST_TO_ADDR
// if not HasPower ( your_side ) then
9461: LD_OWVAR 2
9465: PPUSH
9466: CALL 9688 0 1
9470: NOT
9471: IFFALSE 9482
// begin Multiplayer_Loose_Message ;
9473: CALL_OW 521
// enable ( mpLose ) ;
9477: LD_INT 102
9479: ENABLE_MARKED
// end else
9480: GO 9643
// begin canWin := true ;
9482: LD_ADDR_VAR 0 2
9486: PUSH
9487: LD_INT 1
9489: ST_TO_ADDR
// for i := 1 to 8 do
9490: LD_ADDR_VAR 0 1
9494: PUSH
9495: DOUBLE
9496: LD_INT 1
9498: DEC
9499: ST_TO_ADDR
9500: LD_INT 8
9502: PUSH
9503: FOR_TO
9504: IFFALSE 9629
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
9506: LD_EXP 7
9510: PUSH
9511: LD_VAR 0 1
9515: ARRAY
9516: IFFALSE 9529
9518: PUSH
9519: LD_VAR 0 1
9523: PPUSH
9524: CALL_OW 108
9528: AND
9529: IFFALSE 9543
9531: PUSH
9532: LD_VAR 0 1
9536: PUSH
9537: LD_OWVAR 2
9541: NONEQUAL
9542: AND
9543: IFFALSE 9627
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
9545: LD_EXP 8
9549: PUSH
9550: LD_VAR 0 1
9554: ARRAY
9555: NOT
9556: IFTRUE 9604
9558: PUSH
9559: LD_EXP 8
9563: PUSH
9564: LD_VAR 0 1
9568: ARRAY
9569: PUSH
9570: LD_EXP 8
9574: PUSH
9575: LD_OWVAR 2
9579: ARRAY
9580: NONEQUAL
9581: IFFALSE 9603
9583: PUSH
9584: LD_OWVAR 2
9588: PPUSH
9589: LD_VAR 0 1
9593: PPUSH
9594: CALL_OW 81
9598: PUSH
9599: LD_INT 1
9601: NONEQUAL
9602: AND
9603: OR
9604: IFFALSE 9627
// if HasPower ( i ) then
9606: LD_VAR 0 1
9610: PPUSH
9611: CALL 9688 0 1
9615: IFFALSE 9627
// begin canWin := false ;
9617: LD_ADDR_VAR 0 2
9621: PUSH
9622: LD_INT 0
9624: ST_TO_ADDR
// break ;
9625: GO 9629
// end ;
9627: GO 9503
9629: POP
9630: POP
// if canWin then
9631: LD_VAR 0 2
9635: IFFALSE 9642
// enable ( mpWin ) else
9637: LD_INT 101
9639: ENABLE_MARKED
9640: GO 9643
// enable ;
9642: ENABLE
// end ; end ;
9643: PPOPN 2
9645: END
// function CanWinLoose ; begin
9646: LD_INT 0
9648: PPUSH
// result := true ;
9649: LD_ADDR_VAR 0 1
9653: PUSH
9654: LD_INT 1
9656: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
9657: CALL_OW 531
9661: IFFALSE 9673
9663: PUSH
9664: CALL_OW 519
9668: PUSH
9669: LD_INT 1
9671: GREATER
9672: AND
9673: IFFALSE 9683
// result := false ;
9675: LD_ADDR_VAR 0 1
9679: PUSH
9680: LD_INT 0
9682: ST_TO_ADDR
// end ;
9683: LD_VAR 0 1
9687: RET
// function HasPower ( i ) ; begin
9688: LD_INT 0
9690: PPUSH
// if not FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) then
9691: LD_INT 22
9693: PUSH
9694: LD_VAR 0 1
9698: PUSH
9699: EMPTY
9700: LIST
9701: LIST
9702: PUSH
9703: LD_INT 2
9705: PUSH
9706: LD_INT 30
9708: PUSH
9709: LD_INT 0
9711: PUSH
9712: EMPTY
9713: LIST
9714: LIST
9715: PUSH
9716: LD_INT 30
9718: PUSH
9719: LD_INT 1
9721: PUSH
9722: EMPTY
9723: LIST
9724: LIST
9725: PUSH
9726: EMPTY
9727: LIST
9728: LIST
9729: LIST
9730: PUSH
9731: EMPTY
9732: LIST
9733: LIST
9734: PPUSH
9735: CALL_OW 69
9739: NOT
9740: IFFALSE 9744
// exit ;
9742: GO 9809
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
9744: LD_ADDR_VAR 0 2
9748: PUSH
9749: LD_INT 22
9751: PUSH
9752: LD_VAR 0 1
9756: PUSH
9757: EMPTY
9758: LIST
9759: LIST
9760: PUSH
9761: LD_INT 2
9763: PUSH
9764: LD_INT 21
9766: PUSH
9767: LD_INT 1
9769: PUSH
9770: EMPTY
9771: LIST
9772: LIST
9773: PUSH
9774: LD_INT 33
9776: PUSH
9777: LD_INT 3
9779: PUSH
9780: EMPTY
9781: LIST
9782: LIST
9783: PUSH
9784: LD_INT 33
9786: PUSH
9787: LD_INT 5
9789: PUSH
9790: EMPTY
9791: LIST
9792: LIST
9793: PUSH
9794: EMPTY
9795: LIST
9796: LIST
9797: LIST
9798: LIST
9799: PUSH
9800: EMPTY
9801: LIST
9802: LIST
9803: PPUSH
9804: CALL_OW 69
9808: ST_TO_ADDR
// end ; end_of_file
9809: LD_VAR 0 2
9813: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
9814: LD_INT 0
9816: PPUSH
9817: PPUSH
// if exist_mode then
9818: LD_VAR 0 2
9822: IFFALSE 9868
// begin unit := CreateCharacter ( prefix & ident ) ;
9824: LD_ADDR_VAR 0 5
9828: PUSH
9829: LD_VAR 0 3
9833: PUSH
9834: LD_VAR 0 1
9838: STR
9839: PPUSH
9840: CALL_OW 34
9844: ST_TO_ADDR
// if unit then
9845: LD_VAR 0 5
9849: IFFALSE 9866
// DeleteCharacters ( prefix & ident ) ;
9851: LD_VAR 0 3
9855: PUSH
9856: LD_VAR 0 1
9860: STR
9861: PPUSH
9862: CALL_OW 40
// end else
9866: GO 9883
// unit := NewCharacter ( ident ) ;
9868: LD_ADDR_VAR 0 5
9872: PUSH
9873: LD_VAR 0 1
9877: PPUSH
9878: CALL_OW 25
9882: ST_TO_ADDR
// result := unit ;
9883: LD_ADDR_VAR 0 4
9887: PUSH
9888: LD_VAR 0 5
9892: ST_TO_ADDR
// end ;
9893: LD_VAR 0 4
9897: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
9898: LD_INT 0
9900: PPUSH
9901: PPUSH
// if exist_mode then
9902: LD_VAR 0 2
9906: IFFALSE 9931
// unit := CreateCharacter ( prefix & ident ) else
9908: LD_ADDR_VAR 0 5
9912: PUSH
9913: LD_VAR 0 3
9917: PUSH
9918: LD_VAR 0 1
9922: STR
9923: PPUSH
9924: CALL_OW 34
9928: ST_TO_ADDR
9929: GO 9946
// unit := NewCharacter ( ident ) ;
9931: LD_ADDR_VAR 0 5
9935: PUSH
9936: LD_VAR 0 1
9940: PPUSH
9941: CALL_OW 25
9945: ST_TO_ADDR
// result := unit ;
9946: LD_ADDR_VAR 0 4
9950: PUSH
9951: LD_VAR 0 5
9955: ST_TO_ADDR
// end ;
9956: LD_VAR 0 4
9960: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
9961: LD_INT 0
9963: PPUSH
9964: PPUSH
// if not side or not nation then
9965: LD_VAR 0 1
9969: NOT
9970: IFTRUE 9979
9972: PUSH
9973: LD_VAR 0 2
9977: NOT
9978: OR
9979: IFFALSE 9983
// exit ;
9981: GO 10753
// case nation of nation_american :
9983: LD_VAR 0 2
9987: PUSH
9988: LD_INT 1
9990: DOUBLE
9991: EQUAL
9992: IFTRUE 9996
9994: GO 10210
9996: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
9997: LD_ADDR_VAR 0 4
10001: PUSH
10002: LD_INT 35
10004: PUSH
10005: LD_INT 45
10007: PUSH
10008: LD_INT 46
10010: PUSH
10011: LD_INT 47
10013: PUSH
10014: LD_INT 82
10016: PUSH
10017: LD_INT 83
10019: PUSH
10020: LD_INT 84
10022: PUSH
10023: LD_INT 85
10025: PUSH
10026: LD_INT 86
10028: PUSH
10029: LD_INT 1
10031: PUSH
10032: LD_INT 2
10034: PUSH
10035: LD_INT 6
10037: PUSH
10038: LD_INT 15
10040: PUSH
10041: LD_INT 16
10043: PUSH
10044: LD_INT 7
10046: PUSH
10047: LD_INT 12
10049: PUSH
10050: LD_INT 13
10052: PUSH
10053: LD_INT 10
10055: PUSH
10056: LD_INT 14
10058: PUSH
10059: LD_INT 20
10061: PUSH
10062: LD_INT 21
10064: PUSH
10065: LD_INT 22
10067: PUSH
10068: LD_INT 25
10070: PUSH
10071: LD_INT 32
10073: PUSH
10074: LD_INT 27
10076: PUSH
10077: LD_INT 36
10079: PUSH
10080: LD_INT 69
10082: PUSH
10083: LD_INT 39
10085: PUSH
10086: LD_INT 34
10088: PUSH
10089: LD_INT 40
10091: PUSH
10092: LD_INT 48
10094: PUSH
10095: LD_INT 49
10097: PUSH
10098: LD_INT 50
10100: PUSH
10101: LD_INT 51
10103: PUSH
10104: LD_INT 52
10106: PUSH
10107: LD_INT 53
10109: PUSH
10110: LD_INT 54
10112: PUSH
10113: LD_INT 55
10115: PUSH
10116: LD_INT 56
10118: PUSH
10119: LD_INT 57
10121: PUSH
10122: LD_INT 58
10124: PUSH
10125: LD_INT 59
10127: PUSH
10128: LD_INT 60
10130: PUSH
10131: LD_INT 61
10133: PUSH
10134: LD_INT 62
10136: PUSH
10137: LD_INT 80
10139: PUSH
10140: LD_INT 82
10142: PUSH
10143: LD_INT 83
10145: PUSH
10146: LD_INT 84
10148: PUSH
10149: LD_INT 85
10151: PUSH
10152: LD_INT 86
10154: PUSH
10155: EMPTY
10156: LIST
10157: LIST
10158: LIST
10159: LIST
10160: LIST
10161: LIST
10162: LIST
10163: LIST
10164: LIST
10165: LIST
10166: LIST
10167: LIST
10168: LIST
10169: LIST
10170: LIST
10171: LIST
10172: LIST
10173: LIST
10174: LIST
10175: LIST
10176: LIST
10177: LIST
10178: LIST
10179: LIST
10180: LIST
10181: LIST
10182: LIST
10183: LIST
10184: LIST
10185: LIST
10186: LIST
10187: LIST
10188: LIST
10189: LIST
10190: LIST
10191: LIST
10192: LIST
10193: LIST
10194: LIST
10195: LIST
10196: LIST
10197: LIST
10198: LIST
10199: LIST
10200: LIST
10201: LIST
10202: LIST
10203: LIST
10204: LIST
10205: LIST
10206: LIST
10207: ST_TO_ADDR
10208: GO 10675
10210: LD_INT 2
10212: DOUBLE
10213: EQUAL
10214: IFTRUE 10218
10216: GO 10444
10218: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
10219: LD_ADDR_VAR 0 4
10223: PUSH
10224: LD_INT 35
10226: PUSH
10227: LD_INT 45
10229: PUSH
10230: LD_INT 46
10232: PUSH
10233: LD_INT 47
10235: PUSH
10236: LD_INT 82
10238: PUSH
10239: LD_INT 83
10241: PUSH
10242: LD_INT 84
10244: PUSH
10245: LD_INT 85
10247: PUSH
10248: LD_INT 87
10250: PUSH
10251: LD_INT 70
10253: PUSH
10254: LD_INT 1
10256: PUSH
10257: LD_INT 11
10259: PUSH
10260: LD_INT 3
10262: PUSH
10263: LD_INT 4
10265: PUSH
10266: LD_INT 5
10268: PUSH
10269: LD_INT 6
10271: PUSH
10272: LD_INT 15
10274: PUSH
10275: LD_INT 18
10277: PUSH
10278: LD_INT 7
10280: PUSH
10281: LD_INT 17
10283: PUSH
10284: LD_INT 8
10286: PUSH
10287: LD_INT 20
10289: PUSH
10290: LD_INT 21
10292: PUSH
10293: LD_INT 22
10295: PUSH
10296: LD_INT 72
10298: PUSH
10299: LD_INT 26
10301: PUSH
10302: LD_INT 69
10304: PUSH
10305: LD_INT 39
10307: PUSH
10308: LD_INT 40
10310: PUSH
10311: LD_INT 41
10313: PUSH
10314: LD_INT 42
10316: PUSH
10317: LD_INT 43
10319: PUSH
10320: LD_INT 48
10322: PUSH
10323: LD_INT 49
10325: PUSH
10326: LD_INT 50
10328: PUSH
10329: LD_INT 51
10331: PUSH
10332: LD_INT 52
10334: PUSH
10335: LD_INT 53
10337: PUSH
10338: LD_INT 54
10340: PUSH
10341: LD_INT 55
10343: PUSH
10344: LD_INT 56
10346: PUSH
10347: LD_INT 60
10349: PUSH
10350: LD_INT 61
10352: PUSH
10353: LD_INT 62
10355: PUSH
10356: LD_INT 66
10358: PUSH
10359: LD_INT 67
10361: PUSH
10362: LD_INT 68
10364: PUSH
10365: LD_INT 81
10367: PUSH
10368: LD_INT 82
10370: PUSH
10371: LD_INT 83
10373: PUSH
10374: LD_INT 84
10376: PUSH
10377: LD_INT 85
10379: PUSH
10380: LD_INT 87
10382: PUSH
10383: LD_INT 88
10385: PUSH
10386: EMPTY
10387: LIST
10388: LIST
10389: LIST
10390: LIST
10391: LIST
10392: LIST
10393: LIST
10394: LIST
10395: LIST
10396: LIST
10397: LIST
10398: LIST
10399: LIST
10400: LIST
10401: LIST
10402: LIST
10403: LIST
10404: LIST
10405: LIST
10406: LIST
10407: LIST
10408: LIST
10409: LIST
10410: LIST
10411: LIST
10412: LIST
10413: LIST
10414: LIST
10415: LIST
10416: LIST
10417: LIST
10418: LIST
10419: LIST
10420: LIST
10421: LIST
10422: LIST
10423: LIST
10424: LIST
10425: LIST
10426: LIST
10427: LIST
10428: LIST
10429: LIST
10430: LIST
10431: LIST
10432: LIST
10433: LIST
10434: LIST
10435: LIST
10436: LIST
10437: LIST
10438: LIST
10439: LIST
10440: LIST
10441: ST_TO_ADDR
10442: GO 10675
10444: LD_INT 3
10446: DOUBLE
10447: EQUAL
10448: IFTRUE 10452
10450: GO 10674
10452: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
10453: LD_ADDR_VAR 0 4
10457: PUSH
10458: LD_INT 46
10460: PUSH
10461: LD_INT 47
10463: PUSH
10464: LD_INT 1
10466: PUSH
10467: LD_INT 2
10469: PUSH
10470: LD_INT 82
10472: PUSH
10473: LD_INT 83
10475: PUSH
10476: LD_INT 84
10478: PUSH
10479: LD_INT 85
10481: PUSH
10482: LD_INT 86
10484: PUSH
10485: LD_INT 11
10487: PUSH
10488: LD_INT 9
10490: PUSH
10491: LD_INT 20
10493: PUSH
10494: LD_INT 19
10496: PUSH
10497: LD_INT 21
10499: PUSH
10500: LD_INT 24
10502: PUSH
10503: LD_INT 22
10505: PUSH
10506: LD_INT 25
10508: PUSH
10509: LD_INT 28
10511: PUSH
10512: LD_INT 29
10514: PUSH
10515: LD_INT 30
10517: PUSH
10518: LD_INT 31
10520: PUSH
10521: LD_INT 37
10523: PUSH
10524: LD_INT 38
10526: PUSH
10527: LD_INT 32
10529: PUSH
10530: LD_INT 27
10532: PUSH
10533: LD_INT 33
10535: PUSH
10536: LD_INT 69
10538: PUSH
10539: LD_INT 39
10541: PUSH
10542: LD_INT 34
10544: PUSH
10545: LD_INT 40
10547: PUSH
10548: LD_INT 71
10550: PUSH
10551: LD_INT 23
10553: PUSH
10554: LD_INT 44
10556: PUSH
10557: LD_INT 48
10559: PUSH
10560: LD_INT 49
10562: PUSH
10563: LD_INT 50
10565: PUSH
10566: LD_INT 51
10568: PUSH
10569: LD_INT 52
10571: PUSH
10572: LD_INT 53
10574: PUSH
10575: LD_INT 54
10577: PUSH
10578: LD_INT 55
10580: PUSH
10581: LD_INT 56
10583: PUSH
10584: LD_INT 57
10586: PUSH
10587: LD_INT 58
10589: PUSH
10590: LD_INT 59
10592: PUSH
10593: LD_INT 63
10595: PUSH
10596: LD_INT 64
10598: PUSH
10599: LD_INT 65
10601: PUSH
10602: LD_INT 82
10604: PUSH
10605: LD_INT 83
10607: PUSH
10608: LD_INT 84
10610: PUSH
10611: LD_INT 85
10613: PUSH
10614: LD_INT 86
10616: PUSH
10617: EMPTY
10618: LIST
10619: LIST
10620: LIST
10621: LIST
10622: LIST
10623: LIST
10624: LIST
10625: LIST
10626: LIST
10627: LIST
10628: LIST
10629: LIST
10630: LIST
10631: LIST
10632: LIST
10633: LIST
10634: LIST
10635: LIST
10636: LIST
10637: LIST
10638: LIST
10639: LIST
10640: LIST
10641: LIST
10642: LIST
10643: LIST
10644: LIST
10645: LIST
10646: LIST
10647: LIST
10648: LIST
10649: LIST
10650: LIST
10651: LIST
10652: LIST
10653: LIST
10654: LIST
10655: LIST
10656: LIST
10657: LIST
10658: LIST
10659: LIST
10660: LIST
10661: LIST
10662: LIST
10663: LIST
10664: LIST
10665: LIST
10666: LIST
10667: LIST
10668: LIST
10669: LIST
10670: LIST
10671: ST_TO_ADDR
10672: GO 10675
10674: POP
// if state > - 1 and state < 3 then
10675: LD_VAR 0 3
10679: PUSH
10680: LD_INT 1
10682: NEG
10683: GREATER
10684: IFFALSE 10696
10686: PUSH
10687: LD_VAR 0 3
10691: PUSH
10692: LD_INT 3
10694: LESS
10695: AND
10696: IFFALSE 10753
// for i in result do
10698: LD_ADDR_VAR 0 5
10702: PUSH
10703: LD_VAR 0 4
10707: PUSH
10708: FOR_IN
10709: IFFALSE 10751
// if GetTech ( i , side ) <> state then
10711: LD_VAR 0 5
10715: PPUSH
10716: LD_VAR 0 1
10720: PPUSH
10721: CALL_OW 321
10725: PUSH
10726: LD_VAR 0 3
10730: NONEQUAL
10731: IFFALSE 10749
// result := result diff i ;
10733: LD_ADDR_VAR 0 4
10737: PUSH
10738: LD_VAR 0 4
10742: PUSH
10743: LD_VAR 0 5
10747: DIFF
10748: ST_TO_ADDR
10749: GO 10708
10751: POP
10752: POP
// end ;
10753: LD_VAR 0 4
10757: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
10758: LD_INT 0
10760: PPUSH
10761: PPUSH
10762: PPUSH
// result := true ;
10763: LD_ADDR_VAR 0 3
10767: PUSH
10768: LD_INT 1
10770: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
10771: LD_ADDR_VAR 0 5
10775: PUSH
10776: LD_VAR 0 2
10780: PPUSH
10781: CALL_OW 480
10785: ST_TO_ADDR
// if not tmp then
10786: LD_VAR 0 5
10790: NOT
10791: IFFALSE 10795
// exit ;
10793: GO 10844
// for i in tmp do
10795: LD_ADDR_VAR 0 4
10799: PUSH
10800: LD_VAR 0 5
10804: PUSH
10805: FOR_IN
10806: IFFALSE 10842
// if GetTech ( i , side ) <> state_researched then
10808: LD_VAR 0 4
10812: PPUSH
10813: LD_VAR 0 1
10817: PPUSH
10818: CALL_OW 321
10822: PUSH
10823: LD_INT 2
10825: NONEQUAL
10826: IFFALSE 10840
// begin result := false ;
10828: LD_ADDR_VAR 0 3
10832: PUSH
10833: LD_INT 0
10835: ST_TO_ADDR
// exit ;
10836: POP
10837: POP
10838: GO 10844
// end ;
10840: GO 10805
10842: POP
10843: POP
// end ;
10844: LD_VAR 0 3
10848: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
10849: LD_INT 0
10851: PPUSH
10852: PPUSH
10853: PPUSH
10854: PPUSH
10855: PPUSH
10856: PPUSH
10857: PPUSH
10858: PPUSH
10859: PPUSH
10860: PPUSH
10861: PPUSH
10862: PPUSH
10863: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
10864: LD_VAR 0 1
10868: NOT
10869: IFTRUE 10886
10871: PUSH
10872: LD_VAR 0 1
10876: PPUSH
10877: CALL_OW 257
10881: PUSH
10882: LD_INT 9
10884: NONEQUAL
10885: OR
10886: IFFALSE 10890
// exit ;
10888: GO 11469
// side := GetSide ( unit ) ;
10890: LD_ADDR_VAR 0 9
10894: PUSH
10895: LD_VAR 0 1
10899: PPUSH
10900: CALL_OW 255
10904: ST_TO_ADDR
// tech_space := tech_spacanom ;
10905: LD_ADDR_VAR 0 12
10909: PUSH
10910: LD_INT 29
10912: ST_TO_ADDR
// tech_time := tech_taurad ;
10913: LD_ADDR_VAR 0 13
10917: PUSH
10918: LD_INT 28
10920: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
10921: LD_ADDR_VAR 0 11
10925: PUSH
10926: LD_VAR 0 1
10930: PPUSH
10931: CALL_OW 310
10935: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
10936: LD_VAR 0 11
10940: PPUSH
10941: CALL_OW 247
10945: PUSH
10946: LD_INT 2
10948: EQUAL
10949: IFFALSE 10953
// exit ;
10951: GO 11469
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
10953: LD_ADDR_VAR 0 8
10957: PUSH
10958: LD_INT 81
10960: PUSH
10961: LD_VAR 0 9
10965: PUSH
10966: EMPTY
10967: LIST
10968: LIST
10969: PUSH
10970: LD_INT 3
10972: PUSH
10973: LD_INT 21
10975: PUSH
10976: LD_INT 3
10978: PUSH
10979: EMPTY
10980: LIST
10981: LIST
10982: PUSH
10983: EMPTY
10984: LIST
10985: LIST
10986: PUSH
10987: EMPTY
10988: LIST
10989: LIST
10990: PPUSH
10991: CALL_OW 69
10995: ST_TO_ADDR
// if not tmp then
10996: LD_VAR 0 8
11000: NOT
11001: IFFALSE 11005
// exit ;
11003: GO 11469
// if in_unit then
11005: LD_VAR 0 11
11009: IFFALSE 11033
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
11011: LD_ADDR_VAR 0 10
11015: PUSH
11016: LD_VAR 0 8
11020: PPUSH
11021: LD_VAR 0 11
11025: PPUSH
11026: CALL_OW 74
11030: ST_TO_ADDR
11031: GO 11053
// enemy := NearestUnitToUnit ( tmp , unit ) ;
11033: LD_ADDR_VAR 0 10
11037: PUSH
11038: LD_VAR 0 8
11042: PPUSH
11043: LD_VAR 0 1
11047: PPUSH
11048: CALL_OW 74
11052: ST_TO_ADDR
// if not enemy then
11053: LD_VAR 0 10
11057: NOT
11058: IFFALSE 11062
// exit ;
11060: GO 11469
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
11062: LD_VAR 0 11
11066: IFFALSE 11088
11068: PUSH
11069: LD_VAR 0 11
11073: PPUSH
11074: LD_VAR 0 10
11078: PPUSH
11079: CALL_OW 296
11083: PUSH
11084: LD_INT 13
11086: GREATER
11087: AND
11088: IFTRUE 11110
11090: PUSH
11091: LD_VAR 0 1
11095: PPUSH
11096: LD_VAR 0 10
11100: PPUSH
11101: CALL_OW 296
11105: PUSH
11106: LD_INT 12
11108: GREATER
11109: OR
11110: IFFALSE 11114
// exit ;
11112: GO 11469
// missile := [ 1 ] ;
11114: LD_ADDR_VAR 0 14
11118: PUSH
11119: LD_INT 1
11121: PUSH
11122: EMPTY
11123: LIST
11124: ST_TO_ADDR
// if Researched ( side , tech_space ) then
11125: LD_VAR 0 9
11129: PPUSH
11130: LD_VAR 0 12
11134: PPUSH
11135: CALL_OW 325
11139: IFFALSE 11168
// missile := Replace ( missile , missile + 1 , 2 ) ;
11141: LD_ADDR_VAR 0 14
11145: PUSH
11146: LD_VAR 0 14
11150: PPUSH
11151: LD_VAR 0 14
11155: PUSH
11156: LD_INT 1
11158: PLUS
11159: PPUSH
11160: LD_INT 2
11162: PPUSH
11163: CALL_OW 1
11167: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
11168: LD_VAR 0 9
11172: PPUSH
11173: LD_VAR 0 13
11177: PPUSH
11178: CALL_OW 325
11182: IFFALSE 11206
11184: PUSH
11185: LD_VAR 0 10
11189: PPUSH
11190: CALL_OW 255
11194: PPUSH
11195: LD_VAR 0 13
11199: PPUSH
11200: CALL_OW 325
11204: NOT
11205: AND
11206: IFFALSE 11235
// missile := Replace ( missile , missile + 1 , 3 ) ;
11208: LD_ADDR_VAR 0 14
11212: PUSH
11213: LD_VAR 0 14
11217: PPUSH
11218: LD_VAR 0 14
11222: PUSH
11223: LD_INT 1
11225: PLUS
11226: PPUSH
11227: LD_INT 3
11229: PPUSH
11230: CALL_OW 1
11234: ST_TO_ADDR
// if missile < 2 then
11235: LD_VAR 0 14
11239: PUSH
11240: LD_INT 2
11242: LESS
11243: IFFALSE 11247
// exit ;
11245: GO 11469
// x := GetX ( enemy ) ;
11247: LD_ADDR_VAR 0 4
11251: PUSH
11252: LD_VAR 0 10
11256: PPUSH
11257: CALL_OW 250
11261: ST_TO_ADDR
// y := GetY ( enemy ) ;
11262: LD_ADDR_VAR 0 5
11266: PUSH
11267: LD_VAR 0 10
11271: PPUSH
11272: CALL_OW 251
11276: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
11277: LD_ADDR_VAR 0 6
11281: PUSH
11282: LD_VAR 0 4
11286: PUSH
11287: LD_INT 1
11289: NEG
11290: PPUSH
11291: LD_INT 1
11293: PPUSH
11294: CALL_OW 12
11298: PLUS
11299: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
11300: LD_ADDR_VAR 0 7
11304: PUSH
11305: LD_VAR 0 5
11309: PUSH
11310: LD_INT 1
11312: NEG
11313: PPUSH
11314: LD_INT 1
11316: PPUSH
11317: CALL_OW 12
11321: PLUS
11322: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
11323: LD_VAR 0 6
11327: PPUSH
11328: LD_VAR 0 7
11332: PPUSH
11333: CALL_OW 488
11337: NOT
11338: IFFALSE 11360
// begin _x := x ;
11340: LD_ADDR_VAR 0 6
11344: PUSH
11345: LD_VAR 0 4
11349: ST_TO_ADDR
// _y := y ;
11350: LD_ADDR_VAR 0 7
11354: PUSH
11355: LD_VAR 0 5
11359: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
11360: LD_ADDR_VAR 0 3
11364: PUSH
11365: LD_INT 1
11367: PPUSH
11368: LD_VAR 0 14
11372: PPUSH
11373: CALL_OW 12
11377: ST_TO_ADDR
// case i of 1 :
11378: LD_VAR 0 3
11382: PUSH
11383: LD_INT 1
11385: DOUBLE
11386: EQUAL
11387: IFTRUE 11391
11389: GO 11408
11391: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
11392: LD_VAR 0 1
11396: PPUSH
11397: LD_VAR 0 10
11401: PPUSH
11402: CALL_OW 115
11406: GO 11469
11408: LD_INT 2
11410: DOUBLE
11411: EQUAL
11412: IFTRUE 11416
11414: GO 11438
11416: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
11417: LD_VAR 0 1
11421: PPUSH
11422: LD_VAR 0 6
11426: PPUSH
11427: LD_VAR 0 7
11431: PPUSH
11432: CALL_OW 153
11436: GO 11469
11438: LD_INT 3
11440: DOUBLE
11441: EQUAL
11442: IFTRUE 11446
11444: GO 11468
11446: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
11447: LD_VAR 0 1
11451: PPUSH
11452: LD_VAR 0 6
11456: PPUSH
11457: LD_VAR 0 7
11461: PPUSH
11462: CALL_OW 154
11466: GO 11469
11468: POP
// end ;
11469: LD_VAR 0 2
11473: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
11474: LD_INT 0
11476: PPUSH
11477: PPUSH
11478: PPUSH
11479: PPUSH
11480: PPUSH
11481: PPUSH
// if not unit or not building then
11482: LD_VAR 0 1
11486: NOT
11487: IFTRUE 11496
11489: PUSH
11490: LD_VAR 0 2
11494: NOT
11495: OR
11496: IFFALSE 11500
// exit ;
11498: GO 11658
// x := GetX ( building ) ;
11500: LD_ADDR_VAR 0 5
11504: PUSH
11505: LD_VAR 0 2
11509: PPUSH
11510: CALL_OW 250
11514: ST_TO_ADDR
// y := GetY ( building ) ;
11515: LD_ADDR_VAR 0 6
11519: PUSH
11520: LD_VAR 0 2
11524: PPUSH
11525: CALL_OW 251
11529: ST_TO_ADDR
// for i := 0 to 5 do
11530: LD_ADDR_VAR 0 4
11534: PUSH
11535: DOUBLE
11536: LD_INT 0
11538: DEC
11539: ST_TO_ADDR
11540: LD_INT 5
11542: PUSH
11543: FOR_TO
11544: IFFALSE 11656
// begin _x := ShiftX ( x , i , 3 ) ;
11546: LD_ADDR_VAR 0 7
11550: PUSH
11551: LD_VAR 0 5
11555: PPUSH
11556: LD_VAR 0 4
11560: PPUSH
11561: LD_INT 3
11563: PPUSH
11564: CALL_OW 272
11568: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
11569: LD_ADDR_VAR 0 8
11573: PUSH
11574: LD_VAR 0 6
11578: PPUSH
11579: LD_VAR 0 4
11583: PPUSH
11584: LD_INT 3
11586: PPUSH
11587: CALL_OW 273
11591: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
11592: LD_VAR 0 7
11596: PPUSH
11597: LD_VAR 0 8
11601: PPUSH
11602: CALL_OW 488
11606: NOT
11607: IFFALSE 11611
// continue ;
11609: GO 11543
// if HexInfo ( _x , _y ) = 0 then
11611: LD_VAR 0 7
11615: PPUSH
11616: LD_VAR 0 8
11620: PPUSH
11621: CALL_OW 428
11625: PUSH
11626: LD_INT 0
11628: EQUAL
11629: IFFALSE 11654
// begin ComMoveXY ( unit , _x , _y ) ;
11631: LD_VAR 0 1
11635: PPUSH
11636: LD_VAR 0 7
11640: PPUSH
11641: LD_VAR 0 8
11645: PPUSH
11646: CALL_OW 111
// exit ;
11650: POP
11651: POP
11652: GO 11658
// end ; end ;
11654: GO 11543
11656: POP
11657: POP
// end ;
11658: LD_VAR 0 3
11662: RET
// export function ScanBase ( side , base_area ) ; begin
11663: LD_INT 0
11665: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
11666: LD_ADDR_VAR 0 3
11670: PUSH
11671: LD_VAR 0 2
11675: PPUSH
11676: LD_INT 81
11678: PUSH
11679: LD_VAR 0 1
11683: PUSH
11684: EMPTY
11685: LIST
11686: LIST
11687: PPUSH
11688: CALL_OW 70
11692: ST_TO_ADDR
// end ;
11693: LD_VAR 0 3
11697: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
11698: LD_INT 0
11700: PPUSH
11701: PPUSH
11702: PPUSH
11703: PPUSH
// result := false ;
11704: LD_ADDR_VAR 0 2
11708: PUSH
11709: LD_INT 0
11711: ST_TO_ADDR
// side := GetSide ( unit ) ;
11712: LD_ADDR_VAR 0 3
11716: PUSH
11717: LD_VAR 0 1
11721: PPUSH
11722: CALL_OW 255
11726: ST_TO_ADDR
// nat := GetNation ( unit ) ;
11727: LD_ADDR_VAR 0 4
11731: PUSH
11732: LD_VAR 0 1
11736: PPUSH
11737: CALL_OW 248
11741: ST_TO_ADDR
// case nat of 1 :
11742: LD_VAR 0 4
11746: PUSH
11747: LD_INT 1
11749: DOUBLE
11750: EQUAL
11751: IFTRUE 11755
11753: GO 11766
11755: POP
// tech := tech_lassight ; 2 :
11756: LD_ADDR_VAR 0 5
11760: PUSH
11761: LD_INT 12
11763: ST_TO_ADDR
11764: GO 11805
11766: LD_INT 2
11768: DOUBLE
11769: EQUAL
11770: IFTRUE 11774
11772: GO 11785
11774: POP
// tech := tech_mortar ; 3 :
11775: LD_ADDR_VAR 0 5
11779: PUSH
11780: LD_INT 41
11782: ST_TO_ADDR
11783: GO 11805
11785: LD_INT 3
11787: DOUBLE
11788: EQUAL
11789: IFTRUE 11793
11791: GO 11804
11793: POP
// tech := tech_bazooka ; end ;
11794: LD_ADDR_VAR 0 5
11798: PUSH
11799: LD_INT 44
11801: ST_TO_ADDR
11802: GO 11805
11804: POP
// if Researched ( side , tech ) then
11805: LD_VAR 0 3
11809: PPUSH
11810: LD_VAR 0 5
11814: PPUSH
11815: CALL_OW 325
11819: IFFALSE 11846
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
11821: LD_ADDR_VAR 0 2
11825: PUSH
11826: LD_INT 5
11828: PUSH
11829: LD_INT 8
11831: PUSH
11832: LD_INT 9
11834: PUSH
11835: EMPTY
11836: LIST
11837: LIST
11838: LIST
11839: PUSH
11840: LD_VAR 0 4
11844: ARRAY
11845: ST_TO_ADDR
// end ;
11846: LD_VAR 0 2
11850: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
11851: LD_INT 0
11853: PPUSH
11854: PPUSH
11855: PPUSH
// if not mines then
11856: LD_VAR 0 2
11860: NOT
11861: IFFALSE 11865
// exit ;
11863: GO 12009
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
11865: LD_ADDR_VAR 0 5
11869: PUSH
11870: LD_INT 81
11872: PUSH
11873: LD_VAR 0 1
11877: PUSH
11878: EMPTY
11879: LIST
11880: LIST
11881: PUSH
11882: LD_INT 3
11884: PUSH
11885: LD_INT 21
11887: PUSH
11888: LD_INT 3
11890: PUSH
11891: EMPTY
11892: LIST
11893: LIST
11894: PUSH
11895: EMPTY
11896: LIST
11897: LIST
11898: PUSH
11899: EMPTY
11900: LIST
11901: LIST
11902: PPUSH
11903: CALL_OW 69
11907: ST_TO_ADDR
// for i in mines do
11908: LD_ADDR_VAR 0 4
11912: PUSH
11913: LD_VAR 0 2
11917: PUSH
11918: FOR_IN
11919: IFFALSE 12007
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
11921: LD_VAR 0 4
11925: PUSH
11926: LD_INT 1
11928: ARRAY
11929: PPUSH
11930: LD_VAR 0 4
11934: PUSH
11935: LD_INT 2
11937: ARRAY
11938: PPUSH
11939: CALL_OW 458
11943: NOT
11944: IFFALSE 11948
// continue ;
11946: GO 11918
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
11948: LD_VAR 0 4
11952: PUSH
11953: LD_INT 1
11955: ARRAY
11956: PPUSH
11957: LD_VAR 0 4
11961: PUSH
11962: LD_INT 2
11964: ARRAY
11965: PPUSH
11966: CALL_OW 428
11970: PUSH
11971: LD_VAR 0 5
11975: IN
11976: IFFALSE 12005
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
11978: LD_VAR 0 4
11982: PUSH
11983: LD_INT 1
11985: ARRAY
11986: PPUSH
11987: LD_VAR 0 4
11991: PUSH
11992: LD_INT 2
11994: ARRAY
11995: PPUSH
11996: LD_VAR 0 1
12000: PPUSH
12001: CALL_OW 456
// end ;
12005: GO 11918
12007: POP
12008: POP
// end ;
12009: LD_VAR 0 3
12013: RET
// export function Count ( array ) ; begin
12014: LD_INT 0
12016: PPUSH
// result := array + 0 ;
12017: LD_ADDR_VAR 0 2
12021: PUSH
12022: LD_VAR 0 1
12026: PUSH
12027: LD_INT 0
12029: PLUS
12030: ST_TO_ADDR
// end ;
12031: LD_VAR 0 2
12035: RET
// export function IsEmpty ( building ) ; begin
12036: LD_INT 0
12038: PPUSH
// if not building then
12039: LD_VAR 0 1
12043: NOT
12044: IFFALSE 12048
// exit ;
12046: GO 12091
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
12048: LD_ADDR_VAR 0 2
12052: PUSH
12053: LD_VAR 0 1
12057: PUSH
12058: LD_INT 22
12060: PUSH
12061: LD_VAR 0 1
12065: PPUSH
12066: CALL_OW 255
12070: PUSH
12071: EMPTY
12072: LIST
12073: LIST
12074: PUSH
12075: LD_INT 58
12077: PUSH
12078: EMPTY
12079: LIST
12080: PUSH
12081: EMPTY
12082: LIST
12083: LIST
12084: PPUSH
12085: CALL_OW 69
12089: IN
12090: ST_TO_ADDR
// end ;
12091: LD_VAR 0 2
12095: RET
// export function IsNotFull ( building ) ; var places ; begin
12096: LD_INT 0
12098: PPUSH
12099: PPUSH
// if not building then
12100: LD_VAR 0 1
12104: NOT
12105: IFFALSE 12109
// exit ;
12107: GO 12137
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
12109: LD_ADDR_VAR 0 2
12113: PUSH
12114: LD_VAR 0 1
12118: PPUSH
12119: LD_INT 3
12121: PUSH
12122: LD_INT 62
12124: PUSH
12125: EMPTY
12126: LIST
12127: PUSH
12128: EMPTY
12129: LIST
12130: LIST
12131: PPUSH
12132: CALL_OW 72
12136: ST_TO_ADDR
// end ;
12137: LD_VAR 0 2
12141: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
12142: LD_INT 0
12144: PPUSH
12145: PPUSH
12146: PPUSH
12147: PPUSH
// tmp := [ ] ;
12148: LD_ADDR_VAR 0 3
12152: PUSH
12153: EMPTY
12154: ST_TO_ADDR
// list := [ ] ;
12155: LD_ADDR_VAR 0 5
12159: PUSH
12160: EMPTY
12161: ST_TO_ADDR
// for i = 16 to 25 do
12162: LD_ADDR_VAR 0 4
12166: PUSH
12167: DOUBLE
12168: LD_INT 16
12170: DEC
12171: ST_TO_ADDR
12172: LD_INT 25
12174: PUSH
12175: FOR_TO
12176: IFFALSE 12249
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
12178: LD_ADDR_VAR 0 3
12182: PUSH
12183: LD_VAR 0 3
12187: PUSH
12188: LD_INT 22
12190: PUSH
12191: LD_VAR 0 1
12195: PPUSH
12196: CALL_OW 255
12200: PUSH
12201: EMPTY
12202: LIST
12203: LIST
12204: PUSH
12205: LD_INT 91
12207: PUSH
12208: LD_VAR 0 1
12212: PUSH
12213: LD_INT 6
12215: PUSH
12216: EMPTY
12217: LIST
12218: LIST
12219: LIST
12220: PUSH
12221: LD_INT 30
12223: PUSH
12224: LD_VAR 0 4
12228: PUSH
12229: EMPTY
12230: LIST
12231: LIST
12232: PUSH
12233: EMPTY
12234: LIST
12235: LIST
12236: LIST
12237: PUSH
12238: EMPTY
12239: LIST
12240: PPUSH
12241: CALL_OW 69
12245: ADD
12246: ST_TO_ADDR
12247: GO 12175
12249: POP
12250: POP
// for i = 1 to tmp do
12251: LD_ADDR_VAR 0 4
12255: PUSH
12256: DOUBLE
12257: LD_INT 1
12259: DEC
12260: ST_TO_ADDR
12261: LD_VAR 0 3
12265: PUSH
12266: FOR_TO
12267: IFFALSE 12355
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
12269: LD_ADDR_VAR 0 5
12273: PUSH
12274: LD_VAR 0 5
12278: PUSH
12279: LD_VAR 0 3
12283: PUSH
12284: LD_VAR 0 4
12288: ARRAY
12289: PPUSH
12290: CALL_OW 266
12294: PUSH
12295: LD_VAR 0 3
12299: PUSH
12300: LD_VAR 0 4
12304: ARRAY
12305: PPUSH
12306: CALL_OW 250
12310: PUSH
12311: LD_VAR 0 3
12315: PUSH
12316: LD_VAR 0 4
12320: ARRAY
12321: PPUSH
12322: CALL_OW 251
12326: PUSH
12327: LD_VAR 0 3
12331: PUSH
12332: LD_VAR 0 4
12336: ARRAY
12337: PPUSH
12338: CALL_OW 254
12342: PUSH
12343: EMPTY
12344: LIST
12345: LIST
12346: LIST
12347: LIST
12348: PUSH
12349: EMPTY
12350: LIST
12351: ADD
12352: ST_TO_ADDR
12353: GO 12266
12355: POP
12356: POP
// result := list ;
12357: LD_ADDR_VAR 0 2
12361: PUSH
12362: LD_VAR 0 5
12366: ST_TO_ADDR
// end ;
12367: LD_VAR 0 2
12371: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
12372: LD_INT 0
12374: PPUSH
12375: PPUSH
12376: PPUSH
12377: PPUSH
12378: PPUSH
12379: PPUSH
12380: PPUSH
// if not factory then
12381: LD_VAR 0 1
12385: NOT
12386: IFFALSE 12390
// exit ;
12388: GO 12993
// if control = control_apeman then
12390: LD_VAR 0 4
12394: PUSH
12395: LD_INT 5
12397: EQUAL
12398: IFFALSE 12507
// begin tmp := UnitsInside ( factory ) ;
12400: LD_ADDR_VAR 0 8
12404: PUSH
12405: LD_VAR 0 1
12409: PPUSH
12410: CALL_OW 313
12414: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
12415: LD_VAR 0 8
12419: PPUSH
12420: LD_INT 25
12422: PUSH
12423: LD_INT 12
12425: PUSH
12426: EMPTY
12427: LIST
12428: LIST
12429: PPUSH
12430: CALL_OW 72
12434: NOT
12435: IFFALSE 12445
// control := control_manual ;
12437: LD_ADDR_VAR 0 4
12441: PUSH
12442: LD_INT 1
12444: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
12445: LD_ADDR_VAR 0 8
12449: PUSH
12450: LD_VAR 0 1
12454: PPUSH
12455: CALL 12142 0 1
12459: ST_TO_ADDR
// if tmp then
12460: LD_VAR 0 8
12464: IFFALSE 12507
// begin for i in tmp do
12466: LD_ADDR_VAR 0 7
12470: PUSH
12471: LD_VAR 0 8
12475: PUSH
12476: FOR_IN
12477: IFFALSE 12505
// if i [ 1 ] = b_ext_radio then
12479: LD_VAR 0 7
12483: PUSH
12484: LD_INT 1
12486: ARRAY
12487: PUSH
12488: LD_INT 22
12490: EQUAL
12491: IFFALSE 12503
// begin control := control_remote ;
12493: LD_ADDR_VAR 0 4
12497: PUSH
12498: LD_INT 2
12500: ST_TO_ADDR
// break ;
12501: GO 12505
// end ;
12503: GO 12476
12505: POP
12506: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
12507: LD_VAR 0 1
12511: PPUSH
12512: LD_VAR 0 2
12516: PPUSH
12517: LD_VAR 0 3
12521: PPUSH
12522: LD_VAR 0 4
12526: PPUSH
12527: LD_VAR 0 5
12531: PPUSH
12532: CALL_OW 448
12536: IFFALSE 12571
// begin result := [ chassis , engine , control , weapon ] ;
12538: LD_ADDR_VAR 0 6
12542: PUSH
12543: LD_VAR 0 2
12547: PUSH
12548: LD_VAR 0 3
12552: PUSH
12553: LD_VAR 0 4
12557: PUSH
12558: LD_VAR 0 5
12562: PUSH
12563: EMPTY
12564: LIST
12565: LIST
12566: LIST
12567: LIST
12568: ST_TO_ADDR
// exit ;
12569: GO 12993
// end ; _chassis := AvailableChassisList ( factory ) ;
12571: LD_ADDR_VAR 0 9
12575: PUSH
12576: LD_VAR 0 1
12580: PPUSH
12581: CALL_OW 475
12585: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
12586: LD_ADDR_VAR 0 11
12590: PUSH
12591: LD_VAR 0 1
12595: PPUSH
12596: CALL_OW 476
12600: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
12601: LD_ADDR_VAR 0 12
12605: PUSH
12606: LD_VAR 0 1
12610: PPUSH
12611: CALL_OW 477
12615: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
12616: LD_ADDR_VAR 0 10
12620: PUSH
12621: LD_VAR 0 1
12625: PPUSH
12626: CALL_OW 478
12630: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
12631: LD_VAR 0 9
12635: NOT
12636: IFTRUE 12645
12638: PUSH
12639: LD_VAR 0 11
12643: NOT
12644: OR
12645: IFTRUE 12654
12647: PUSH
12648: LD_VAR 0 12
12652: NOT
12653: OR
12654: IFTRUE 12663
12656: PUSH
12657: LD_VAR 0 10
12661: NOT
12662: OR
12663: IFFALSE 12698
// begin result := [ chassis , engine , control , weapon ] ;
12665: LD_ADDR_VAR 0 6
12669: PUSH
12670: LD_VAR 0 2
12674: PUSH
12675: LD_VAR 0 3
12679: PUSH
12680: LD_VAR 0 4
12684: PUSH
12685: LD_VAR 0 5
12689: PUSH
12690: EMPTY
12691: LIST
12692: LIST
12693: LIST
12694: LIST
12695: ST_TO_ADDR
// exit ;
12696: GO 12993
// end ; if not chassis in _chassis then
12698: LD_VAR 0 2
12702: PUSH
12703: LD_VAR 0 9
12707: IN
12708: NOT
12709: IFFALSE 12735
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
12711: LD_ADDR_VAR 0 2
12715: PUSH
12716: LD_VAR 0 9
12720: PUSH
12721: LD_INT 1
12723: PPUSH
12724: LD_VAR 0 9
12728: PPUSH
12729: CALL_OW 12
12733: ARRAY
12734: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
12735: LD_VAR 0 2
12739: PPUSH
12740: LD_VAR 0 3
12744: PPUSH
12745: CALL 12998 0 2
12749: NOT
12750: IFFALSE 12811
// repeat engine := _engine [ 1 ] ;
12752: LD_ADDR_VAR 0 3
12756: PUSH
12757: LD_VAR 0 11
12761: PUSH
12762: LD_INT 1
12764: ARRAY
12765: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
12766: LD_ADDR_VAR 0 11
12770: PUSH
12771: LD_VAR 0 11
12775: PPUSH
12776: LD_INT 1
12778: PPUSH
12779: CALL_OW 3
12783: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
12784: LD_VAR 0 2
12788: PPUSH
12789: LD_VAR 0 3
12793: PPUSH
12794: CALL 12998 0 2
12798: IFTRUE 12809
12800: PUSH
12801: LD_VAR 0 11
12805: PUSH
12806: EMPTY
12807: EQUAL
12808: OR
12809: IFFALSE 12752
// if not control in _control then
12811: LD_VAR 0 4
12815: PUSH
12816: LD_VAR 0 12
12820: IN
12821: NOT
12822: IFFALSE 12848
// control := _control [ rand ( 1 , _control ) ] ;
12824: LD_ADDR_VAR 0 4
12828: PUSH
12829: LD_VAR 0 12
12833: PUSH
12834: LD_INT 1
12836: PPUSH
12837: LD_VAR 0 12
12841: PPUSH
12842: CALL_OW 12
12846: ARRAY
12847: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
12848: LD_VAR 0 2
12852: PPUSH
12853: LD_VAR 0 5
12857: PPUSH
12858: CALL 13220 0 2
12862: NOT
12863: IFFALSE 12924
// repeat weapon := _weapon [ 1 ] ;
12865: LD_ADDR_VAR 0 5
12869: PUSH
12870: LD_VAR 0 10
12874: PUSH
12875: LD_INT 1
12877: ARRAY
12878: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
12879: LD_ADDR_VAR 0 10
12883: PUSH
12884: LD_VAR 0 10
12888: PPUSH
12889: LD_INT 1
12891: PPUSH
12892: CALL_OW 3
12896: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
12897: LD_VAR 0 2
12901: PPUSH
12902: LD_VAR 0 5
12906: PPUSH
12907: CALL 13220 0 2
12911: IFTRUE 12922
12913: PUSH
12914: LD_VAR 0 10
12918: PUSH
12919: EMPTY
12920: EQUAL
12921: OR
12922: IFFALSE 12865
// result := [ ] ;
12924: LD_ADDR_VAR 0 6
12928: PUSH
12929: EMPTY
12930: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
12931: LD_VAR 0 1
12935: PPUSH
12936: LD_VAR 0 2
12940: PPUSH
12941: LD_VAR 0 3
12945: PPUSH
12946: LD_VAR 0 4
12950: PPUSH
12951: LD_VAR 0 5
12955: PPUSH
12956: CALL_OW 448
12960: IFFALSE 12993
// result := [ chassis , engine , control , weapon ] ;
12962: LD_ADDR_VAR 0 6
12966: PUSH
12967: LD_VAR 0 2
12971: PUSH
12972: LD_VAR 0 3
12976: PUSH
12977: LD_VAR 0 4
12981: PUSH
12982: LD_VAR 0 5
12986: PUSH
12987: EMPTY
12988: LIST
12989: LIST
12990: LIST
12991: LIST
12992: ST_TO_ADDR
// end ;
12993: LD_VAR 0 6
12997: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
12998: LD_INT 0
13000: PPUSH
// if not chassis or not engine then
13001: LD_VAR 0 1
13005: NOT
13006: IFTRUE 13015
13008: PUSH
13009: LD_VAR 0 2
13013: NOT
13014: OR
13015: IFFALSE 13019
// exit ;
13017: GO 13215
// case engine of engine_solar :
13019: LD_VAR 0 2
13023: PUSH
13024: LD_INT 2
13026: DOUBLE
13027: EQUAL
13028: IFTRUE 13032
13030: GO 13070
13032: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
13033: LD_ADDR_VAR 0 3
13037: PUSH
13038: LD_INT 11
13040: PUSH
13041: LD_INT 12
13043: PUSH
13044: LD_INT 13
13046: PUSH
13047: LD_INT 14
13049: PUSH
13050: LD_INT 1
13052: PUSH
13053: LD_INT 2
13055: PUSH
13056: LD_INT 3
13058: PUSH
13059: EMPTY
13060: LIST
13061: LIST
13062: LIST
13063: LIST
13064: LIST
13065: LIST
13066: LIST
13067: ST_TO_ADDR
13068: GO 13199
13070: LD_INT 1
13072: DOUBLE
13073: EQUAL
13074: IFTRUE 13078
13076: GO 13140
13078: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
13079: LD_ADDR_VAR 0 3
13083: PUSH
13084: LD_INT 11
13086: PUSH
13087: LD_INT 12
13089: PUSH
13090: LD_INT 13
13092: PUSH
13093: LD_INT 14
13095: PUSH
13096: LD_INT 1
13098: PUSH
13099: LD_INT 2
13101: PUSH
13102: LD_INT 3
13104: PUSH
13105: LD_INT 4
13107: PUSH
13108: LD_INT 5
13110: PUSH
13111: LD_INT 21
13113: PUSH
13114: LD_INT 23
13116: PUSH
13117: LD_INT 22
13119: PUSH
13120: LD_INT 24
13122: PUSH
13123: EMPTY
13124: LIST
13125: LIST
13126: LIST
13127: LIST
13128: LIST
13129: LIST
13130: LIST
13131: LIST
13132: LIST
13133: LIST
13134: LIST
13135: LIST
13136: LIST
13137: ST_TO_ADDR
13138: GO 13199
13140: LD_INT 3
13142: DOUBLE
13143: EQUAL
13144: IFTRUE 13148
13146: GO 13198
13148: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
13149: LD_ADDR_VAR 0 3
13153: PUSH
13154: LD_INT 13
13156: PUSH
13157: LD_INT 14
13159: PUSH
13160: LD_INT 2
13162: PUSH
13163: LD_INT 3
13165: PUSH
13166: LD_INT 4
13168: PUSH
13169: LD_INT 5
13171: PUSH
13172: LD_INT 21
13174: PUSH
13175: LD_INT 22
13177: PUSH
13178: LD_INT 23
13180: PUSH
13181: LD_INT 24
13183: PUSH
13184: EMPTY
13185: LIST
13186: LIST
13187: LIST
13188: LIST
13189: LIST
13190: LIST
13191: LIST
13192: LIST
13193: LIST
13194: LIST
13195: ST_TO_ADDR
13196: GO 13199
13198: POP
// result := ( chassis in result ) ;
13199: LD_ADDR_VAR 0 3
13203: PUSH
13204: LD_VAR 0 1
13208: PUSH
13209: LD_VAR 0 3
13213: IN
13214: ST_TO_ADDR
// end ;
13215: LD_VAR 0 3
13219: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
13220: LD_INT 0
13222: PPUSH
// if not chassis or not weapon then
13223: LD_VAR 0 1
13227: NOT
13228: IFTRUE 13237
13230: PUSH
13231: LD_VAR 0 2
13235: NOT
13236: OR
13237: IFFALSE 13241
// exit ;
13239: GO 14301
// case weapon of us_machine_gun :
13241: LD_VAR 0 2
13245: PUSH
13246: LD_INT 2
13248: DOUBLE
13249: EQUAL
13250: IFTRUE 13254
13252: GO 13284
13254: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
13255: LD_ADDR_VAR 0 3
13259: PUSH
13260: LD_INT 1
13262: PUSH
13263: LD_INT 2
13265: PUSH
13266: LD_INT 3
13268: PUSH
13269: LD_INT 4
13271: PUSH
13272: LD_INT 5
13274: PUSH
13275: EMPTY
13276: LIST
13277: LIST
13278: LIST
13279: LIST
13280: LIST
13281: ST_TO_ADDR
13282: GO 14285
13284: LD_INT 3
13286: DOUBLE
13287: EQUAL
13288: IFTRUE 13292
13290: GO 13322
13292: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
13293: LD_ADDR_VAR 0 3
13297: PUSH
13298: LD_INT 1
13300: PUSH
13301: LD_INT 2
13303: PUSH
13304: LD_INT 3
13306: PUSH
13307: LD_INT 4
13309: PUSH
13310: LD_INT 5
13312: PUSH
13313: EMPTY
13314: LIST
13315: LIST
13316: LIST
13317: LIST
13318: LIST
13319: ST_TO_ADDR
13320: GO 14285
13322: LD_INT 11
13324: DOUBLE
13325: EQUAL
13326: IFTRUE 13330
13328: GO 13360
13330: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
13331: LD_ADDR_VAR 0 3
13335: PUSH
13336: LD_INT 1
13338: PUSH
13339: LD_INT 2
13341: PUSH
13342: LD_INT 3
13344: PUSH
13345: LD_INT 4
13347: PUSH
13348: LD_INT 5
13350: PUSH
13351: EMPTY
13352: LIST
13353: LIST
13354: LIST
13355: LIST
13356: LIST
13357: ST_TO_ADDR
13358: GO 14285
13360: LD_INT 4
13362: DOUBLE
13363: EQUAL
13364: IFTRUE 13368
13366: GO 13394
13368: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
13369: LD_ADDR_VAR 0 3
13373: PUSH
13374: LD_INT 2
13376: PUSH
13377: LD_INT 3
13379: PUSH
13380: LD_INT 4
13382: PUSH
13383: LD_INT 5
13385: PUSH
13386: EMPTY
13387: LIST
13388: LIST
13389: LIST
13390: LIST
13391: ST_TO_ADDR
13392: GO 14285
13394: LD_INT 5
13396: DOUBLE
13397: EQUAL
13398: IFTRUE 13402
13400: GO 13428
13402: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
13403: LD_ADDR_VAR 0 3
13407: PUSH
13408: LD_INT 2
13410: PUSH
13411: LD_INT 3
13413: PUSH
13414: LD_INT 4
13416: PUSH
13417: LD_INT 5
13419: PUSH
13420: EMPTY
13421: LIST
13422: LIST
13423: LIST
13424: LIST
13425: ST_TO_ADDR
13426: GO 14285
13428: LD_INT 9
13430: DOUBLE
13431: EQUAL
13432: IFTRUE 13436
13434: GO 13462
13436: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
13437: LD_ADDR_VAR 0 3
13441: PUSH
13442: LD_INT 2
13444: PUSH
13445: LD_INT 3
13447: PUSH
13448: LD_INT 4
13450: PUSH
13451: LD_INT 5
13453: PUSH
13454: EMPTY
13455: LIST
13456: LIST
13457: LIST
13458: LIST
13459: ST_TO_ADDR
13460: GO 14285
13462: LD_INT 7
13464: DOUBLE
13465: EQUAL
13466: IFTRUE 13470
13468: GO 13496
13470: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
13471: LD_ADDR_VAR 0 3
13475: PUSH
13476: LD_INT 2
13478: PUSH
13479: LD_INT 3
13481: PUSH
13482: LD_INT 4
13484: PUSH
13485: LD_INT 5
13487: PUSH
13488: EMPTY
13489: LIST
13490: LIST
13491: LIST
13492: LIST
13493: ST_TO_ADDR
13494: GO 14285
13496: LD_INT 12
13498: DOUBLE
13499: EQUAL
13500: IFTRUE 13504
13502: GO 13530
13504: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
13505: LD_ADDR_VAR 0 3
13509: PUSH
13510: LD_INT 2
13512: PUSH
13513: LD_INT 3
13515: PUSH
13516: LD_INT 4
13518: PUSH
13519: LD_INT 5
13521: PUSH
13522: EMPTY
13523: LIST
13524: LIST
13525: LIST
13526: LIST
13527: ST_TO_ADDR
13528: GO 14285
13530: LD_INT 13
13532: DOUBLE
13533: EQUAL
13534: IFTRUE 13538
13536: GO 13564
13538: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
13539: LD_ADDR_VAR 0 3
13543: PUSH
13544: LD_INT 2
13546: PUSH
13547: LD_INT 3
13549: PUSH
13550: LD_INT 4
13552: PUSH
13553: LD_INT 5
13555: PUSH
13556: EMPTY
13557: LIST
13558: LIST
13559: LIST
13560: LIST
13561: ST_TO_ADDR
13562: GO 14285
13564: LD_INT 14
13566: DOUBLE
13567: EQUAL
13568: IFTRUE 13572
13570: GO 13590
13572: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
13573: LD_ADDR_VAR 0 3
13577: PUSH
13578: LD_INT 4
13580: PUSH
13581: LD_INT 5
13583: PUSH
13584: EMPTY
13585: LIST
13586: LIST
13587: ST_TO_ADDR
13588: GO 14285
13590: LD_INT 6
13592: DOUBLE
13593: EQUAL
13594: IFTRUE 13598
13596: GO 13616
13598: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
13599: LD_ADDR_VAR 0 3
13603: PUSH
13604: LD_INT 4
13606: PUSH
13607: LD_INT 5
13609: PUSH
13610: EMPTY
13611: LIST
13612: LIST
13613: ST_TO_ADDR
13614: GO 14285
13616: LD_INT 10
13618: DOUBLE
13619: EQUAL
13620: IFTRUE 13624
13622: GO 13642
13624: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
13625: LD_ADDR_VAR 0 3
13629: PUSH
13630: LD_INT 4
13632: PUSH
13633: LD_INT 5
13635: PUSH
13636: EMPTY
13637: LIST
13638: LIST
13639: ST_TO_ADDR
13640: GO 14285
13642: LD_INT 22
13644: DOUBLE
13645: EQUAL
13646: IFTRUE 13650
13648: GO 13676
13650: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
13651: LD_ADDR_VAR 0 3
13655: PUSH
13656: LD_INT 11
13658: PUSH
13659: LD_INT 12
13661: PUSH
13662: LD_INT 13
13664: PUSH
13665: LD_INT 14
13667: PUSH
13668: EMPTY
13669: LIST
13670: LIST
13671: LIST
13672: LIST
13673: ST_TO_ADDR
13674: GO 14285
13676: LD_INT 23
13678: DOUBLE
13679: EQUAL
13680: IFTRUE 13684
13682: GO 13710
13684: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
13685: LD_ADDR_VAR 0 3
13689: PUSH
13690: LD_INT 11
13692: PUSH
13693: LD_INT 12
13695: PUSH
13696: LD_INT 13
13698: PUSH
13699: LD_INT 14
13701: PUSH
13702: EMPTY
13703: LIST
13704: LIST
13705: LIST
13706: LIST
13707: ST_TO_ADDR
13708: GO 14285
13710: LD_INT 24
13712: DOUBLE
13713: EQUAL
13714: IFTRUE 13718
13716: GO 13744
13718: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
13719: LD_ADDR_VAR 0 3
13723: PUSH
13724: LD_INT 11
13726: PUSH
13727: LD_INT 12
13729: PUSH
13730: LD_INT 13
13732: PUSH
13733: LD_INT 14
13735: PUSH
13736: EMPTY
13737: LIST
13738: LIST
13739: LIST
13740: LIST
13741: ST_TO_ADDR
13742: GO 14285
13744: LD_INT 30
13746: DOUBLE
13747: EQUAL
13748: IFTRUE 13752
13750: GO 13778
13752: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
13753: LD_ADDR_VAR 0 3
13757: PUSH
13758: LD_INT 11
13760: PUSH
13761: LD_INT 12
13763: PUSH
13764: LD_INT 13
13766: PUSH
13767: LD_INT 14
13769: PUSH
13770: EMPTY
13771: LIST
13772: LIST
13773: LIST
13774: LIST
13775: ST_TO_ADDR
13776: GO 14285
13778: LD_INT 25
13780: DOUBLE
13781: EQUAL
13782: IFTRUE 13786
13784: GO 13804
13786: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
13787: LD_ADDR_VAR 0 3
13791: PUSH
13792: LD_INT 13
13794: PUSH
13795: LD_INT 14
13797: PUSH
13798: EMPTY
13799: LIST
13800: LIST
13801: ST_TO_ADDR
13802: GO 14285
13804: LD_INT 27
13806: DOUBLE
13807: EQUAL
13808: IFTRUE 13812
13810: GO 13830
13812: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
13813: LD_ADDR_VAR 0 3
13817: PUSH
13818: LD_INT 13
13820: PUSH
13821: LD_INT 14
13823: PUSH
13824: EMPTY
13825: LIST
13826: LIST
13827: ST_TO_ADDR
13828: GO 14285
13830: LD_INT 92
13832: DOUBLE
13833: EQUAL
13834: IFTRUE 13838
13836: GO 13864
13838: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
13839: LD_ADDR_VAR 0 3
13843: PUSH
13844: LD_INT 11
13846: PUSH
13847: LD_INT 12
13849: PUSH
13850: LD_INT 13
13852: PUSH
13853: LD_INT 14
13855: PUSH
13856: EMPTY
13857: LIST
13858: LIST
13859: LIST
13860: LIST
13861: ST_TO_ADDR
13862: GO 14285
13864: LD_INT 28
13866: DOUBLE
13867: EQUAL
13868: IFTRUE 13872
13870: GO 13890
13872: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
13873: LD_ADDR_VAR 0 3
13877: PUSH
13878: LD_INT 13
13880: PUSH
13881: LD_INT 14
13883: PUSH
13884: EMPTY
13885: LIST
13886: LIST
13887: ST_TO_ADDR
13888: GO 14285
13890: LD_INT 29
13892: DOUBLE
13893: EQUAL
13894: IFTRUE 13898
13896: GO 13916
13898: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
13899: LD_ADDR_VAR 0 3
13903: PUSH
13904: LD_INT 13
13906: PUSH
13907: LD_INT 14
13909: PUSH
13910: EMPTY
13911: LIST
13912: LIST
13913: ST_TO_ADDR
13914: GO 14285
13916: LD_INT 31
13918: DOUBLE
13919: EQUAL
13920: IFTRUE 13924
13922: GO 13942
13924: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
13925: LD_ADDR_VAR 0 3
13929: PUSH
13930: LD_INT 13
13932: PUSH
13933: LD_INT 14
13935: PUSH
13936: EMPTY
13937: LIST
13938: LIST
13939: ST_TO_ADDR
13940: GO 14285
13942: LD_INT 26
13944: DOUBLE
13945: EQUAL
13946: IFTRUE 13950
13948: GO 13968
13950: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
13951: LD_ADDR_VAR 0 3
13955: PUSH
13956: LD_INT 13
13958: PUSH
13959: LD_INT 14
13961: PUSH
13962: EMPTY
13963: LIST
13964: LIST
13965: ST_TO_ADDR
13966: GO 14285
13968: LD_INT 42
13970: DOUBLE
13971: EQUAL
13972: IFTRUE 13976
13974: GO 14002
13976: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
13977: LD_ADDR_VAR 0 3
13981: PUSH
13982: LD_INT 21
13984: PUSH
13985: LD_INT 22
13987: PUSH
13988: LD_INT 23
13990: PUSH
13991: LD_INT 24
13993: PUSH
13994: EMPTY
13995: LIST
13996: LIST
13997: LIST
13998: LIST
13999: ST_TO_ADDR
14000: GO 14285
14002: LD_INT 43
14004: DOUBLE
14005: EQUAL
14006: IFTRUE 14010
14008: GO 14036
14010: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
14011: LD_ADDR_VAR 0 3
14015: PUSH
14016: LD_INT 21
14018: PUSH
14019: LD_INT 22
14021: PUSH
14022: LD_INT 23
14024: PUSH
14025: LD_INT 24
14027: PUSH
14028: EMPTY
14029: LIST
14030: LIST
14031: LIST
14032: LIST
14033: ST_TO_ADDR
14034: GO 14285
14036: LD_INT 44
14038: DOUBLE
14039: EQUAL
14040: IFTRUE 14044
14042: GO 14070
14044: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
14045: LD_ADDR_VAR 0 3
14049: PUSH
14050: LD_INT 21
14052: PUSH
14053: LD_INT 22
14055: PUSH
14056: LD_INT 23
14058: PUSH
14059: LD_INT 24
14061: PUSH
14062: EMPTY
14063: LIST
14064: LIST
14065: LIST
14066: LIST
14067: ST_TO_ADDR
14068: GO 14285
14070: LD_INT 45
14072: DOUBLE
14073: EQUAL
14074: IFTRUE 14078
14076: GO 14104
14078: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
14079: LD_ADDR_VAR 0 3
14083: PUSH
14084: LD_INT 21
14086: PUSH
14087: LD_INT 22
14089: PUSH
14090: LD_INT 23
14092: PUSH
14093: LD_INT 24
14095: PUSH
14096: EMPTY
14097: LIST
14098: LIST
14099: LIST
14100: LIST
14101: ST_TO_ADDR
14102: GO 14285
14104: LD_INT 49
14106: DOUBLE
14107: EQUAL
14108: IFTRUE 14112
14110: GO 14138
14112: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
14113: LD_ADDR_VAR 0 3
14117: PUSH
14118: LD_INT 21
14120: PUSH
14121: LD_INT 22
14123: PUSH
14124: LD_INT 23
14126: PUSH
14127: LD_INT 24
14129: PUSH
14130: EMPTY
14131: LIST
14132: LIST
14133: LIST
14134: LIST
14135: ST_TO_ADDR
14136: GO 14285
14138: LD_INT 51
14140: DOUBLE
14141: EQUAL
14142: IFTRUE 14146
14144: GO 14172
14146: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
14147: LD_ADDR_VAR 0 3
14151: PUSH
14152: LD_INT 21
14154: PUSH
14155: LD_INT 22
14157: PUSH
14158: LD_INT 23
14160: PUSH
14161: LD_INT 24
14163: PUSH
14164: EMPTY
14165: LIST
14166: LIST
14167: LIST
14168: LIST
14169: ST_TO_ADDR
14170: GO 14285
14172: LD_INT 52
14174: DOUBLE
14175: EQUAL
14176: IFTRUE 14180
14178: GO 14206
14180: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
14181: LD_ADDR_VAR 0 3
14185: PUSH
14186: LD_INT 21
14188: PUSH
14189: LD_INT 22
14191: PUSH
14192: LD_INT 23
14194: PUSH
14195: LD_INT 24
14197: PUSH
14198: EMPTY
14199: LIST
14200: LIST
14201: LIST
14202: LIST
14203: ST_TO_ADDR
14204: GO 14285
14206: LD_INT 53
14208: DOUBLE
14209: EQUAL
14210: IFTRUE 14214
14212: GO 14232
14214: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
14215: LD_ADDR_VAR 0 3
14219: PUSH
14220: LD_INT 23
14222: PUSH
14223: LD_INT 24
14225: PUSH
14226: EMPTY
14227: LIST
14228: LIST
14229: ST_TO_ADDR
14230: GO 14285
14232: LD_INT 46
14234: DOUBLE
14235: EQUAL
14236: IFTRUE 14240
14238: GO 14258
14240: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
14241: LD_ADDR_VAR 0 3
14245: PUSH
14246: LD_INT 23
14248: PUSH
14249: LD_INT 24
14251: PUSH
14252: EMPTY
14253: LIST
14254: LIST
14255: ST_TO_ADDR
14256: GO 14285
14258: LD_INT 47
14260: DOUBLE
14261: EQUAL
14262: IFTRUE 14266
14264: GO 14284
14266: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
14267: LD_ADDR_VAR 0 3
14271: PUSH
14272: LD_INT 23
14274: PUSH
14275: LD_INT 24
14277: PUSH
14278: EMPTY
14279: LIST
14280: LIST
14281: ST_TO_ADDR
14282: GO 14285
14284: POP
// result := ( chassis in result ) ;
14285: LD_ADDR_VAR 0 3
14289: PUSH
14290: LD_VAR 0 1
14294: PUSH
14295: LD_VAR 0 3
14299: IN
14300: ST_TO_ADDR
// end ;
14301: LD_VAR 0 3
14305: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
14306: LD_INT 0
14308: PPUSH
14309: PPUSH
14310: PPUSH
14311: PPUSH
14312: PPUSH
14313: PPUSH
14314: PPUSH
// result := array ;
14315: LD_ADDR_VAR 0 5
14319: PUSH
14320: LD_VAR 0 1
14324: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
14325: LD_VAR 0 1
14329: NOT
14330: IFTRUE 14339
14332: PUSH
14333: LD_VAR 0 2
14337: NOT
14338: OR
14339: IFTRUE 14348
14341: PUSH
14342: LD_VAR 0 3
14346: NOT
14347: OR
14348: IFTRUE 14362
14350: PUSH
14351: LD_VAR 0 2
14355: PUSH
14356: LD_VAR 0 1
14360: GREATER
14361: OR
14362: IFTRUE 14376
14364: PUSH
14365: LD_VAR 0 3
14369: PUSH
14370: LD_VAR 0 1
14374: GREATER
14375: OR
14376: IFFALSE 14380
// exit ;
14378: GO 14676
// if direction then
14380: LD_VAR 0 4
14384: IFFALSE 14448
// begin d := 1 ;
14386: LD_ADDR_VAR 0 9
14390: PUSH
14391: LD_INT 1
14393: ST_TO_ADDR
// if i_from > i_to then
14394: LD_VAR 0 2
14398: PUSH
14399: LD_VAR 0 3
14403: GREATER
14404: IFFALSE 14430
// length := ( array - i_from ) + i_to else
14406: LD_ADDR_VAR 0 11
14410: PUSH
14411: LD_VAR 0 1
14415: PUSH
14416: LD_VAR 0 2
14420: MINUS
14421: PUSH
14422: LD_VAR 0 3
14426: PLUS
14427: ST_TO_ADDR
14428: GO 14446
// length := i_to - i_from ;
14430: LD_ADDR_VAR 0 11
14434: PUSH
14435: LD_VAR 0 3
14439: PUSH
14440: LD_VAR 0 2
14444: MINUS
14445: ST_TO_ADDR
// end else
14446: GO 14509
// begin d := - 1 ;
14448: LD_ADDR_VAR 0 9
14452: PUSH
14453: LD_INT 1
14455: NEG
14456: ST_TO_ADDR
// if i_from > i_to then
14457: LD_VAR 0 2
14461: PUSH
14462: LD_VAR 0 3
14466: GREATER
14467: IFFALSE 14487
// length := i_from - i_to else
14469: LD_ADDR_VAR 0 11
14473: PUSH
14474: LD_VAR 0 2
14478: PUSH
14479: LD_VAR 0 3
14483: MINUS
14484: ST_TO_ADDR
14485: GO 14509
// length := ( array - i_to ) + i_from ;
14487: LD_ADDR_VAR 0 11
14491: PUSH
14492: LD_VAR 0 1
14496: PUSH
14497: LD_VAR 0 3
14501: MINUS
14502: PUSH
14503: LD_VAR 0 2
14507: PLUS
14508: ST_TO_ADDR
// end ; if not length then
14509: LD_VAR 0 11
14513: NOT
14514: IFFALSE 14518
// exit ;
14516: GO 14676
// tmp := array ;
14518: LD_ADDR_VAR 0 10
14522: PUSH
14523: LD_VAR 0 1
14527: ST_TO_ADDR
// for i = 1 to length do
14528: LD_ADDR_VAR 0 6
14532: PUSH
14533: DOUBLE
14534: LD_INT 1
14536: DEC
14537: ST_TO_ADDR
14538: LD_VAR 0 11
14542: PUSH
14543: FOR_TO
14544: IFFALSE 14664
// begin for j = 1 to array do
14546: LD_ADDR_VAR 0 7
14550: PUSH
14551: DOUBLE
14552: LD_INT 1
14554: DEC
14555: ST_TO_ADDR
14556: LD_VAR 0 1
14560: PUSH
14561: FOR_TO
14562: IFFALSE 14650
// begin k := j + d ;
14564: LD_ADDR_VAR 0 8
14568: PUSH
14569: LD_VAR 0 7
14573: PUSH
14574: LD_VAR 0 9
14578: PLUS
14579: ST_TO_ADDR
// if k > array then
14580: LD_VAR 0 8
14584: PUSH
14585: LD_VAR 0 1
14589: GREATER
14590: IFFALSE 14600
// k := 1 ;
14592: LD_ADDR_VAR 0 8
14596: PUSH
14597: LD_INT 1
14599: ST_TO_ADDR
// if not k then
14600: LD_VAR 0 8
14604: NOT
14605: IFFALSE 14617
// k := array ;
14607: LD_ADDR_VAR 0 8
14611: PUSH
14612: LD_VAR 0 1
14616: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
14617: LD_ADDR_VAR 0 10
14621: PUSH
14622: LD_VAR 0 10
14626: PPUSH
14627: LD_VAR 0 8
14631: PPUSH
14632: LD_VAR 0 1
14636: PUSH
14637: LD_VAR 0 7
14641: ARRAY
14642: PPUSH
14643: CALL_OW 1
14647: ST_TO_ADDR
// end ;
14648: GO 14561
14650: POP
14651: POP
// array := tmp ;
14652: LD_ADDR_VAR 0 1
14656: PUSH
14657: LD_VAR 0 10
14661: ST_TO_ADDR
// end ;
14662: GO 14543
14664: POP
14665: POP
// result := array ;
14666: LD_ADDR_VAR 0 5
14670: PUSH
14671: LD_VAR 0 1
14675: ST_TO_ADDR
// end ;
14676: LD_VAR 0 5
14680: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
14681: LD_INT 0
14683: PPUSH
14684: PPUSH
// result := 0 ;
14685: LD_ADDR_VAR 0 3
14689: PUSH
14690: LD_INT 0
14692: ST_TO_ADDR
// if not array or not value in array then
14693: LD_VAR 0 1
14697: NOT
14698: IFTRUE 14713
14700: PUSH
14701: LD_VAR 0 2
14705: PUSH
14706: LD_VAR 0 1
14710: IN
14711: NOT
14712: OR
14713: IFFALSE 14717
// exit ;
14715: GO 14771
// for i = 1 to array do
14717: LD_ADDR_VAR 0 4
14721: PUSH
14722: DOUBLE
14723: LD_INT 1
14725: DEC
14726: ST_TO_ADDR
14727: LD_VAR 0 1
14731: PUSH
14732: FOR_TO
14733: IFFALSE 14769
// if value = array [ i ] then
14735: LD_VAR 0 2
14739: PUSH
14740: LD_VAR 0 1
14744: PUSH
14745: LD_VAR 0 4
14749: ARRAY
14750: EQUAL
14751: IFFALSE 14767
// begin result := i ;
14753: LD_ADDR_VAR 0 3
14757: PUSH
14758: LD_VAR 0 4
14762: ST_TO_ADDR
// exit ;
14763: POP
14764: POP
14765: GO 14771
// end ;
14767: GO 14732
14769: POP
14770: POP
// end ;
14771: LD_VAR 0 3
14775: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
14776: LD_INT 0
14778: PPUSH
// vc_chassis := chassis ;
14779: LD_ADDR_OWVAR 37
14783: PUSH
14784: LD_VAR 0 1
14788: ST_TO_ADDR
// vc_engine := engine ;
14789: LD_ADDR_OWVAR 39
14793: PUSH
14794: LD_VAR 0 2
14798: ST_TO_ADDR
// vc_control := control ;
14799: LD_ADDR_OWVAR 38
14803: PUSH
14804: LD_VAR 0 3
14808: ST_TO_ADDR
// vc_weapon := weapon ;
14809: LD_ADDR_OWVAR 40
14813: PUSH
14814: LD_VAR 0 4
14818: ST_TO_ADDR
// vc_fuel_battery := fuel ;
14819: LD_ADDR_OWVAR 41
14823: PUSH
14824: LD_VAR 0 5
14828: ST_TO_ADDR
// end ;
14829: LD_VAR 0 6
14833: RET
// export function WantPlant ( unit ) ; var task ; begin
14834: LD_INT 0
14836: PPUSH
14837: PPUSH
// result := false ;
14838: LD_ADDR_VAR 0 2
14842: PUSH
14843: LD_INT 0
14845: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
14846: LD_ADDR_VAR 0 3
14850: PUSH
14851: LD_VAR 0 1
14855: PPUSH
14856: CALL_OW 437
14860: ST_TO_ADDR
// if task then
14861: LD_VAR 0 3
14865: IFFALSE 14893
// if task [ 1 ] [ 1 ] = p then
14867: LD_VAR 0 3
14871: PUSH
14872: LD_INT 1
14874: ARRAY
14875: PUSH
14876: LD_INT 1
14878: ARRAY
14879: PUSH
14880: LD_STRING p
14882: EQUAL
14883: IFFALSE 14893
// result := true ;
14885: LD_ADDR_VAR 0 2
14889: PUSH
14890: LD_INT 1
14892: ST_TO_ADDR
// end ;
14893: LD_VAR 0 2
14897: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
14898: LD_INT 0
14900: PPUSH
14901: PPUSH
14902: PPUSH
14903: PPUSH
// if pos < 1 then
14904: LD_VAR 0 2
14908: PUSH
14909: LD_INT 1
14911: LESS
14912: IFFALSE 14916
// exit ;
14914: GO 15219
// if pos = 1 then
14916: LD_VAR 0 2
14920: PUSH
14921: LD_INT 1
14923: EQUAL
14924: IFFALSE 14957
// result := Replace ( arr , pos [ 1 ] , value ) else
14926: LD_ADDR_VAR 0 4
14930: PUSH
14931: LD_VAR 0 1
14935: PPUSH
14936: LD_VAR 0 2
14940: PUSH
14941: LD_INT 1
14943: ARRAY
14944: PPUSH
14945: LD_VAR 0 3
14949: PPUSH
14950: CALL_OW 1
14954: ST_TO_ADDR
14955: GO 15219
// begin tmp := arr ;
14957: LD_ADDR_VAR 0 6
14961: PUSH
14962: LD_VAR 0 1
14966: ST_TO_ADDR
// s_arr := [ tmp ] ;
14967: LD_ADDR_VAR 0 7
14971: PUSH
14972: LD_VAR 0 6
14976: PUSH
14977: EMPTY
14978: LIST
14979: ST_TO_ADDR
// for i = 1 to pos - 1 do
14980: LD_ADDR_VAR 0 5
14984: PUSH
14985: DOUBLE
14986: LD_INT 1
14988: DEC
14989: ST_TO_ADDR
14990: LD_VAR 0 2
14994: PUSH
14995: LD_INT 1
14997: MINUS
14998: PUSH
14999: FOR_TO
15000: IFFALSE 15045
// begin tmp := tmp [ pos [ i ] ] ;
15002: LD_ADDR_VAR 0 6
15006: PUSH
15007: LD_VAR 0 6
15011: PUSH
15012: LD_VAR 0 2
15016: PUSH
15017: LD_VAR 0 5
15021: ARRAY
15022: ARRAY
15023: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
15024: LD_ADDR_VAR 0 7
15028: PUSH
15029: LD_VAR 0 7
15033: PUSH
15034: LD_VAR 0 6
15038: PUSH
15039: EMPTY
15040: LIST
15041: ADD
15042: ST_TO_ADDR
// end ;
15043: GO 14999
15045: POP
15046: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
15047: LD_ADDR_VAR 0 6
15051: PUSH
15052: LD_VAR 0 6
15056: PPUSH
15057: LD_VAR 0 2
15061: PUSH
15062: LD_VAR 0 2
15066: ARRAY
15067: PPUSH
15068: LD_VAR 0 3
15072: PPUSH
15073: CALL_OW 1
15077: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
15078: LD_ADDR_VAR 0 7
15082: PUSH
15083: LD_VAR 0 7
15087: PPUSH
15088: LD_VAR 0 7
15092: PPUSH
15093: LD_VAR 0 6
15097: PPUSH
15098: CALL_OW 1
15102: ST_TO_ADDR
// for i = s_arr downto 2 do
15103: LD_ADDR_VAR 0 5
15107: PUSH
15108: DOUBLE
15109: LD_VAR 0 7
15113: INC
15114: ST_TO_ADDR
15115: LD_INT 2
15117: PUSH
15118: FOR_DOWNTO
15119: IFFALSE 15203
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
15121: LD_ADDR_VAR 0 6
15125: PUSH
15126: LD_VAR 0 7
15130: PUSH
15131: LD_VAR 0 5
15135: PUSH
15136: LD_INT 1
15138: MINUS
15139: ARRAY
15140: PPUSH
15141: LD_VAR 0 2
15145: PUSH
15146: LD_VAR 0 5
15150: PUSH
15151: LD_INT 1
15153: MINUS
15154: ARRAY
15155: PPUSH
15156: LD_VAR 0 7
15160: PUSH
15161: LD_VAR 0 5
15165: ARRAY
15166: PPUSH
15167: CALL_OW 1
15171: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
15172: LD_ADDR_VAR 0 7
15176: PUSH
15177: LD_VAR 0 7
15181: PPUSH
15182: LD_VAR 0 5
15186: PUSH
15187: LD_INT 1
15189: MINUS
15190: PPUSH
15191: LD_VAR 0 6
15195: PPUSH
15196: CALL_OW 1
15200: ST_TO_ADDR
// end ;
15201: GO 15118
15203: POP
15204: POP
// result := s_arr [ 1 ] ;
15205: LD_ADDR_VAR 0 4
15209: PUSH
15210: LD_VAR 0 7
15214: PUSH
15215: LD_INT 1
15217: ARRAY
15218: ST_TO_ADDR
// end ; end ;
15219: LD_VAR 0 4
15223: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
15224: LD_INT 0
15226: PPUSH
15227: PPUSH
// if not list then
15228: LD_VAR 0 1
15232: NOT
15233: IFFALSE 15237
// exit ;
15235: GO 15328
// i := list [ pos1 ] ;
15237: LD_ADDR_VAR 0 5
15241: PUSH
15242: LD_VAR 0 1
15246: PUSH
15247: LD_VAR 0 2
15251: ARRAY
15252: ST_TO_ADDR
// if not i then
15253: LD_VAR 0 5
15257: NOT
15258: IFFALSE 15262
// exit ;
15260: GO 15328
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
15262: LD_ADDR_VAR 0 1
15266: PUSH
15267: LD_VAR 0 1
15271: PPUSH
15272: LD_VAR 0 2
15276: PPUSH
15277: LD_VAR 0 1
15281: PUSH
15282: LD_VAR 0 3
15286: ARRAY
15287: PPUSH
15288: CALL_OW 1
15292: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
15293: LD_ADDR_VAR 0 1
15297: PUSH
15298: LD_VAR 0 1
15302: PPUSH
15303: LD_VAR 0 3
15307: PPUSH
15308: LD_VAR 0 5
15312: PPUSH
15313: CALL_OW 1
15317: ST_TO_ADDR
// result := list ;
15318: LD_ADDR_VAR 0 4
15322: PUSH
15323: LD_VAR 0 1
15327: ST_TO_ADDR
// end ;
15328: LD_VAR 0 4
15332: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
15333: LD_INT 0
15335: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
15336: LD_ADDR_VAR 0 5
15340: PUSH
15341: LD_VAR 0 1
15345: PPUSH
15346: CALL_OW 250
15350: PPUSH
15351: LD_VAR 0 1
15355: PPUSH
15356: CALL_OW 251
15360: PPUSH
15361: LD_VAR 0 2
15365: PPUSH
15366: LD_VAR 0 3
15370: PPUSH
15371: LD_VAR 0 4
15375: PPUSH
15376: CALL 15758 0 5
15380: ST_TO_ADDR
// end ;
15381: LD_VAR 0 5
15385: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
15386: LD_INT 0
15388: PPUSH
15389: PPUSH
15390: PPUSH
15391: PPUSH
// if not list or not unit then
15392: LD_VAR 0 2
15396: NOT
15397: IFTRUE 15406
15399: PUSH
15400: LD_VAR 0 1
15404: NOT
15405: OR
15406: IFFALSE 15410
// exit ;
15408: GO 15753
// result := [ ] ;
15410: LD_ADDR_VAR 0 5
15414: PUSH
15415: EMPTY
15416: ST_TO_ADDR
// for i in list do
15417: LD_ADDR_VAR 0 6
15421: PUSH
15422: LD_VAR 0 2
15426: PUSH
15427: FOR_IN
15428: IFFALSE 15646
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
15430: LD_ADDR_VAR 0 8
15434: PUSH
15435: LD_VAR 0 1
15439: PPUSH
15440: LD_VAR 0 6
15444: PUSH
15445: LD_INT 1
15447: ARRAY
15448: PPUSH
15449: LD_VAR 0 6
15453: PUSH
15454: LD_INT 2
15456: ARRAY
15457: PPUSH
15458: CALL_OW 297
15462: ST_TO_ADDR
// if not Count ( result ) then
15463: LD_VAR 0 5
15467: PPUSH
15468: CALL 12014 0 1
15472: NOT
15473: IFFALSE 15506
// begin result := Join ( result , [ i , tmp ] ) ;
15475: LD_ADDR_VAR 0 5
15479: PUSH
15480: LD_VAR 0 5
15484: PPUSH
15485: LD_VAR 0 6
15489: PUSH
15490: LD_VAR 0 8
15494: PUSH
15495: EMPTY
15496: LIST
15497: LIST
15498: PPUSH
15499: CALL 47946 0 2
15503: ST_TO_ADDR
// continue ;
15504: GO 15427
// end ; if result [ result ] [ 2 ] <= tmp then
15506: LD_VAR 0 5
15510: PUSH
15511: LD_VAR 0 5
15515: ARRAY
15516: PUSH
15517: LD_INT 2
15519: ARRAY
15520: PUSH
15521: LD_VAR 0 8
15525: LESSEQUAL
15526: IFFALSE 15559
// result := Join ( result , [ i , tmp ] ) else
15528: LD_ADDR_VAR 0 5
15532: PUSH
15533: LD_VAR 0 5
15537: PPUSH
15538: LD_VAR 0 6
15542: PUSH
15543: LD_VAR 0 8
15547: PUSH
15548: EMPTY
15549: LIST
15550: LIST
15551: PPUSH
15552: CALL 47946 0 2
15556: ST_TO_ADDR
15557: GO 15644
// begin for j := 1 to Count ( result ) do
15559: LD_ADDR_VAR 0 7
15563: PUSH
15564: DOUBLE
15565: LD_INT 1
15567: DEC
15568: ST_TO_ADDR
15569: LD_VAR 0 5
15573: PPUSH
15574: CALL 12014 0 1
15578: PUSH
15579: FOR_TO
15580: IFFALSE 15642
// begin if tmp < result [ j ] [ 2 ] then
15582: LD_VAR 0 8
15586: PUSH
15587: LD_VAR 0 5
15591: PUSH
15592: LD_VAR 0 7
15596: ARRAY
15597: PUSH
15598: LD_INT 2
15600: ARRAY
15601: LESS
15602: IFFALSE 15640
// begin result := Insert ( result , j , [ i , tmp ] ) ;
15604: LD_ADDR_VAR 0 5
15608: PUSH
15609: LD_VAR 0 5
15613: PPUSH
15614: LD_VAR 0 7
15618: PPUSH
15619: LD_VAR 0 6
15623: PUSH
15624: LD_VAR 0 8
15628: PUSH
15629: EMPTY
15630: LIST
15631: LIST
15632: PPUSH
15633: CALL_OW 2
15637: ST_TO_ADDR
// break ;
15638: GO 15642
// end ; end ;
15640: GO 15579
15642: POP
15643: POP
// end ; end ;
15644: GO 15427
15646: POP
15647: POP
// if result and not asc then
15648: LD_VAR 0 5
15652: IFFALSE 15661
15654: PUSH
15655: LD_VAR 0 3
15659: NOT
15660: AND
15661: IFFALSE 15678
// result := ReverseArray ( result ) ;
15663: LD_ADDR_VAR 0 5
15667: PUSH
15668: LD_VAR 0 5
15672: PPUSH
15673: CALL 43036 0 1
15677: ST_TO_ADDR
// tmp := [ ] ;
15678: LD_ADDR_VAR 0 8
15682: PUSH
15683: EMPTY
15684: ST_TO_ADDR
// if mode then
15685: LD_VAR 0 4
15689: IFFALSE 15753
// begin for i := 1 to result do
15691: LD_ADDR_VAR 0 6
15695: PUSH
15696: DOUBLE
15697: LD_INT 1
15699: DEC
15700: ST_TO_ADDR
15701: LD_VAR 0 5
15705: PUSH
15706: FOR_TO
15707: IFFALSE 15741
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
15709: LD_ADDR_VAR 0 8
15713: PUSH
15714: LD_VAR 0 8
15718: PPUSH
15719: LD_VAR 0 5
15723: PUSH
15724: LD_VAR 0 6
15728: ARRAY
15729: PUSH
15730: LD_INT 1
15732: ARRAY
15733: PPUSH
15734: CALL 47946 0 2
15738: ST_TO_ADDR
15739: GO 15706
15741: POP
15742: POP
// result := tmp ;
15743: LD_ADDR_VAR 0 5
15747: PUSH
15748: LD_VAR 0 8
15752: ST_TO_ADDR
// end ; end ;
15753: LD_VAR 0 5
15757: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
15758: LD_INT 0
15760: PPUSH
15761: PPUSH
15762: PPUSH
15763: PPUSH
// if not list then
15764: LD_VAR 0 3
15768: NOT
15769: IFFALSE 15773
// exit ;
15771: GO 16163
// result := [ ] ;
15773: LD_ADDR_VAR 0 6
15777: PUSH
15778: EMPTY
15779: ST_TO_ADDR
// for i in list do
15780: LD_ADDR_VAR 0 7
15784: PUSH
15785: LD_VAR 0 3
15789: PUSH
15790: FOR_IN
15791: IFFALSE 15993
// begin tmp := GetDistUnitXY ( i , x , y ) ;
15793: LD_ADDR_VAR 0 9
15797: PUSH
15798: LD_VAR 0 7
15802: PPUSH
15803: LD_VAR 0 1
15807: PPUSH
15808: LD_VAR 0 2
15812: PPUSH
15813: CALL_OW 297
15817: ST_TO_ADDR
// if not result then
15818: LD_VAR 0 6
15822: NOT
15823: IFFALSE 15849
// result := [ [ i , tmp ] ] else
15825: LD_ADDR_VAR 0 6
15829: PUSH
15830: LD_VAR 0 7
15834: PUSH
15835: LD_VAR 0 9
15839: PUSH
15840: EMPTY
15841: LIST
15842: LIST
15843: PUSH
15844: EMPTY
15845: LIST
15846: ST_TO_ADDR
15847: GO 15991
// begin if result [ result ] [ 2 ] <= tmp then
15849: LD_VAR 0 6
15853: PUSH
15854: LD_VAR 0 6
15858: ARRAY
15859: PUSH
15860: LD_INT 2
15862: ARRAY
15863: PUSH
15864: LD_VAR 0 9
15868: LESSEQUAL
15869: IFFALSE 15911
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
15871: LD_ADDR_VAR 0 6
15875: PUSH
15876: LD_VAR 0 6
15880: PPUSH
15881: LD_VAR 0 6
15885: PUSH
15886: LD_INT 1
15888: PLUS
15889: PPUSH
15890: LD_VAR 0 7
15894: PUSH
15895: LD_VAR 0 9
15899: PUSH
15900: EMPTY
15901: LIST
15902: LIST
15903: PPUSH
15904: CALL_OW 2
15908: ST_TO_ADDR
15909: GO 15991
// for j := 1 to result do
15911: LD_ADDR_VAR 0 8
15915: PUSH
15916: DOUBLE
15917: LD_INT 1
15919: DEC
15920: ST_TO_ADDR
15921: LD_VAR 0 6
15925: PUSH
15926: FOR_TO
15927: IFFALSE 15989
// begin if tmp < result [ j ] [ 2 ] then
15929: LD_VAR 0 9
15933: PUSH
15934: LD_VAR 0 6
15938: PUSH
15939: LD_VAR 0 8
15943: ARRAY
15944: PUSH
15945: LD_INT 2
15947: ARRAY
15948: LESS
15949: IFFALSE 15987
// begin result := Insert ( result , j , [ i , tmp ] ) ;
15951: LD_ADDR_VAR 0 6
15955: PUSH
15956: LD_VAR 0 6
15960: PPUSH
15961: LD_VAR 0 8
15965: PPUSH
15966: LD_VAR 0 7
15970: PUSH
15971: LD_VAR 0 9
15975: PUSH
15976: EMPTY
15977: LIST
15978: LIST
15979: PPUSH
15980: CALL_OW 2
15984: ST_TO_ADDR
// break ;
15985: GO 15989
// end ; end ;
15987: GO 15926
15989: POP
15990: POP
// end ; end ;
15991: GO 15790
15993: POP
15994: POP
// if result and not asc then
15995: LD_VAR 0 6
15999: IFFALSE 16008
16001: PUSH
16002: LD_VAR 0 4
16006: NOT
16007: AND
16008: IFFALSE 16083
// begin tmp := result ;
16010: LD_ADDR_VAR 0 9
16014: PUSH
16015: LD_VAR 0 6
16019: ST_TO_ADDR
// for i = tmp downto 1 do
16020: LD_ADDR_VAR 0 7
16024: PUSH
16025: DOUBLE
16026: LD_VAR 0 9
16030: INC
16031: ST_TO_ADDR
16032: LD_INT 1
16034: PUSH
16035: FOR_DOWNTO
16036: IFFALSE 16081
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
16038: LD_ADDR_VAR 0 6
16042: PUSH
16043: LD_VAR 0 6
16047: PPUSH
16048: LD_VAR 0 9
16052: PUSH
16053: LD_VAR 0 7
16057: MINUS
16058: PUSH
16059: LD_INT 1
16061: PLUS
16062: PPUSH
16063: LD_VAR 0 9
16067: PUSH
16068: LD_VAR 0 7
16072: ARRAY
16073: PPUSH
16074: CALL_OW 1
16078: ST_TO_ADDR
16079: GO 16035
16081: POP
16082: POP
// end ; tmp := [ ] ;
16083: LD_ADDR_VAR 0 9
16087: PUSH
16088: EMPTY
16089: ST_TO_ADDR
// if mode then
16090: LD_VAR 0 5
16094: IFFALSE 16163
// begin for i = 1 to result do
16096: LD_ADDR_VAR 0 7
16100: PUSH
16101: DOUBLE
16102: LD_INT 1
16104: DEC
16105: ST_TO_ADDR
16106: LD_VAR 0 6
16110: PUSH
16111: FOR_TO
16112: IFFALSE 16151
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
16114: LD_ADDR_VAR 0 9
16118: PUSH
16119: LD_VAR 0 9
16123: PPUSH
16124: LD_VAR 0 7
16128: PPUSH
16129: LD_VAR 0 6
16133: PUSH
16134: LD_VAR 0 7
16138: ARRAY
16139: PUSH
16140: LD_INT 1
16142: ARRAY
16143: PPUSH
16144: CALL_OW 1
16148: ST_TO_ADDR
16149: GO 16111
16151: POP
16152: POP
// result := tmp ;
16153: LD_ADDR_VAR 0 6
16157: PUSH
16158: LD_VAR 0 9
16162: ST_TO_ADDR
// end ; end ;
16163: LD_VAR 0 6
16167: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
16168: LD_INT 0
16170: PPUSH
16171: PPUSH
16172: PPUSH
16173: PPUSH
16174: PPUSH
16175: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
16176: LD_ADDR_VAR 0 5
16180: PUSH
16181: LD_INT 0
16183: PUSH
16184: LD_INT 0
16186: PUSH
16187: LD_INT 0
16189: PUSH
16190: EMPTY
16191: PUSH
16192: EMPTY
16193: LIST
16194: LIST
16195: LIST
16196: LIST
16197: ST_TO_ADDR
// if not x or not y then
16198: LD_VAR 0 2
16202: NOT
16203: IFTRUE 16212
16205: PUSH
16206: LD_VAR 0 3
16210: NOT
16211: OR
16212: IFFALSE 16216
// exit ;
16214: GO 17872
// if not range then
16216: LD_VAR 0 4
16220: NOT
16221: IFFALSE 16231
// range := 10 ;
16223: LD_ADDR_VAR 0 4
16227: PUSH
16228: LD_INT 10
16230: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
16231: LD_ADDR_VAR 0 8
16235: PUSH
16236: LD_INT 81
16238: PUSH
16239: LD_VAR 0 1
16243: PUSH
16244: EMPTY
16245: LIST
16246: LIST
16247: PUSH
16248: LD_INT 92
16250: PUSH
16251: LD_VAR 0 2
16255: PUSH
16256: LD_VAR 0 3
16260: PUSH
16261: LD_VAR 0 4
16265: PUSH
16266: EMPTY
16267: LIST
16268: LIST
16269: LIST
16270: LIST
16271: PUSH
16272: LD_INT 3
16274: PUSH
16275: LD_INT 21
16277: PUSH
16278: LD_INT 3
16280: PUSH
16281: EMPTY
16282: LIST
16283: LIST
16284: PUSH
16285: EMPTY
16286: LIST
16287: LIST
16288: PUSH
16289: EMPTY
16290: LIST
16291: LIST
16292: LIST
16293: PPUSH
16294: CALL_OW 69
16298: ST_TO_ADDR
// if not tmp then
16299: LD_VAR 0 8
16303: NOT
16304: IFFALSE 16308
// exit ;
16306: GO 17872
// for i in tmp do
16308: LD_ADDR_VAR 0 6
16312: PUSH
16313: LD_VAR 0 8
16317: PUSH
16318: FOR_IN
16319: IFFALSE 17847
// begin points := [ 0 , 0 , 0 ] ;
16321: LD_ADDR_VAR 0 9
16325: PUSH
16326: LD_INT 0
16328: PUSH
16329: LD_INT 0
16331: PUSH
16332: LD_INT 0
16334: PUSH
16335: EMPTY
16336: LIST
16337: LIST
16338: LIST
16339: ST_TO_ADDR
// bpoints := 1 ;
16340: LD_ADDR_VAR 0 10
16344: PUSH
16345: LD_INT 1
16347: ST_TO_ADDR
// case GetType ( i ) of unit_human :
16348: LD_VAR 0 6
16352: PPUSH
16353: CALL_OW 247
16357: PUSH
16358: LD_INT 1
16360: DOUBLE
16361: EQUAL
16362: IFTRUE 16366
16364: GO 16948
16366: POP
// begin if GetClass ( i ) = 1 then
16367: LD_VAR 0 6
16371: PPUSH
16372: CALL_OW 257
16376: PUSH
16377: LD_INT 1
16379: EQUAL
16380: IFFALSE 16401
// points := [ 10 , 5 , 3 ] ;
16382: LD_ADDR_VAR 0 9
16386: PUSH
16387: LD_INT 10
16389: PUSH
16390: LD_INT 5
16392: PUSH
16393: LD_INT 3
16395: PUSH
16396: EMPTY
16397: LIST
16398: LIST
16399: LIST
16400: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
16401: LD_VAR 0 6
16405: PPUSH
16406: CALL_OW 257
16410: PUSH
16411: LD_INT 2
16413: PUSH
16414: LD_INT 3
16416: PUSH
16417: LD_INT 4
16419: PUSH
16420: EMPTY
16421: LIST
16422: LIST
16423: LIST
16424: IN
16425: IFFALSE 16446
// points := [ 3 , 2 , 1 ] ;
16427: LD_ADDR_VAR 0 9
16431: PUSH
16432: LD_INT 3
16434: PUSH
16435: LD_INT 2
16437: PUSH
16438: LD_INT 1
16440: PUSH
16441: EMPTY
16442: LIST
16443: LIST
16444: LIST
16445: ST_TO_ADDR
// if GetClass ( i ) = 5 then
16446: LD_VAR 0 6
16450: PPUSH
16451: CALL_OW 257
16455: PUSH
16456: LD_INT 5
16458: EQUAL
16459: IFFALSE 16480
// points := [ 130 , 5 , 2 ] ;
16461: LD_ADDR_VAR 0 9
16465: PUSH
16466: LD_INT 130
16468: PUSH
16469: LD_INT 5
16471: PUSH
16472: LD_INT 2
16474: PUSH
16475: EMPTY
16476: LIST
16477: LIST
16478: LIST
16479: ST_TO_ADDR
// if GetClass ( i ) = 8 then
16480: LD_VAR 0 6
16484: PPUSH
16485: CALL_OW 257
16489: PUSH
16490: LD_INT 8
16492: EQUAL
16493: IFFALSE 16514
// points := [ 35 , 35 , 30 ] ;
16495: LD_ADDR_VAR 0 9
16499: PUSH
16500: LD_INT 35
16502: PUSH
16503: LD_INT 35
16505: PUSH
16506: LD_INT 30
16508: PUSH
16509: EMPTY
16510: LIST
16511: LIST
16512: LIST
16513: ST_TO_ADDR
// if GetClass ( i ) = 9 then
16514: LD_VAR 0 6
16518: PPUSH
16519: CALL_OW 257
16523: PUSH
16524: LD_INT 9
16526: EQUAL
16527: IFFALSE 16548
// points := [ 20 , 55 , 40 ] ;
16529: LD_ADDR_VAR 0 9
16533: PUSH
16534: LD_INT 20
16536: PUSH
16537: LD_INT 55
16539: PUSH
16540: LD_INT 40
16542: PUSH
16543: EMPTY
16544: LIST
16545: LIST
16546: LIST
16547: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
16548: LD_VAR 0 6
16552: PPUSH
16553: CALL_OW 257
16557: PUSH
16558: LD_INT 12
16560: PUSH
16561: LD_INT 16
16563: PUSH
16564: EMPTY
16565: LIST
16566: LIST
16567: IN
16568: IFFALSE 16589
// points := [ 5 , 3 , 2 ] ;
16570: LD_ADDR_VAR 0 9
16574: PUSH
16575: LD_INT 5
16577: PUSH
16578: LD_INT 3
16580: PUSH
16581: LD_INT 2
16583: PUSH
16584: EMPTY
16585: LIST
16586: LIST
16587: LIST
16588: ST_TO_ADDR
// if GetClass ( i ) = 17 then
16589: LD_VAR 0 6
16593: PPUSH
16594: CALL_OW 257
16598: PUSH
16599: LD_INT 17
16601: EQUAL
16602: IFFALSE 16623
// points := [ 100 , 50 , 75 ] ;
16604: LD_ADDR_VAR 0 9
16608: PUSH
16609: LD_INT 100
16611: PUSH
16612: LD_INT 50
16614: PUSH
16615: LD_INT 75
16617: PUSH
16618: EMPTY
16619: LIST
16620: LIST
16621: LIST
16622: ST_TO_ADDR
// if GetClass ( i ) = 15 then
16623: LD_VAR 0 6
16627: PPUSH
16628: CALL_OW 257
16632: PUSH
16633: LD_INT 15
16635: EQUAL
16636: IFFALSE 16657
// points := [ 10 , 5 , 3 ] ;
16638: LD_ADDR_VAR 0 9
16642: PUSH
16643: LD_INT 10
16645: PUSH
16646: LD_INT 5
16648: PUSH
16649: LD_INT 3
16651: PUSH
16652: EMPTY
16653: LIST
16654: LIST
16655: LIST
16656: ST_TO_ADDR
// if GetClass ( i ) = 14 then
16657: LD_VAR 0 6
16661: PPUSH
16662: CALL_OW 257
16666: PUSH
16667: LD_INT 14
16669: EQUAL
16670: IFFALSE 16691
// points := [ 10 , 0 , 0 ] ;
16672: LD_ADDR_VAR 0 9
16676: PUSH
16677: LD_INT 10
16679: PUSH
16680: LD_INT 0
16682: PUSH
16683: LD_INT 0
16685: PUSH
16686: EMPTY
16687: LIST
16688: LIST
16689: LIST
16690: ST_TO_ADDR
// if GetClass ( i ) = 11 then
16691: LD_VAR 0 6
16695: PPUSH
16696: CALL_OW 257
16700: PUSH
16701: LD_INT 11
16703: EQUAL
16704: IFFALSE 16725
// points := [ 30 , 10 , 5 ] ;
16706: LD_ADDR_VAR 0 9
16710: PUSH
16711: LD_INT 30
16713: PUSH
16714: LD_INT 10
16716: PUSH
16717: LD_INT 5
16719: PUSH
16720: EMPTY
16721: LIST
16722: LIST
16723: LIST
16724: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
16725: LD_VAR 0 1
16729: PPUSH
16730: LD_INT 5
16732: PPUSH
16733: CALL_OW 321
16737: PUSH
16738: LD_INT 2
16740: EQUAL
16741: IFFALSE 16758
// bpoints := bpoints * 1.8 ;
16743: LD_ADDR_VAR 0 10
16747: PUSH
16748: LD_VAR 0 10
16752: PUSH
16753: LD_REAL  1.80000000000000E+0000
16756: MUL
16757: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
16758: LD_VAR 0 6
16762: PPUSH
16763: CALL_OW 257
16767: PUSH
16768: LD_INT 1
16770: PUSH
16771: LD_INT 2
16773: PUSH
16774: LD_INT 3
16776: PUSH
16777: LD_INT 4
16779: PUSH
16780: EMPTY
16781: LIST
16782: LIST
16783: LIST
16784: LIST
16785: IN
16786: IFFALSE 16806
16788: PUSH
16789: LD_VAR 0 1
16793: PPUSH
16794: LD_INT 51
16796: PPUSH
16797: CALL_OW 321
16801: PUSH
16802: LD_INT 2
16804: EQUAL
16805: AND
16806: IFFALSE 16823
// bpoints := bpoints * 1.2 ;
16808: LD_ADDR_VAR 0 10
16812: PUSH
16813: LD_VAR 0 10
16817: PUSH
16818: LD_REAL  1.20000000000000E+0000
16821: MUL
16822: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
16823: LD_VAR 0 6
16827: PPUSH
16828: CALL_OW 257
16832: PUSH
16833: LD_INT 5
16835: PUSH
16836: LD_INT 7
16838: PUSH
16839: LD_INT 9
16841: PUSH
16842: EMPTY
16843: LIST
16844: LIST
16845: LIST
16846: IN
16847: IFFALSE 16867
16849: PUSH
16850: LD_VAR 0 1
16854: PPUSH
16855: LD_INT 52
16857: PPUSH
16858: CALL_OW 321
16862: PUSH
16863: LD_INT 2
16865: EQUAL
16866: AND
16867: IFFALSE 16884
// bpoints := bpoints * 1.5 ;
16869: LD_ADDR_VAR 0 10
16873: PUSH
16874: LD_VAR 0 10
16878: PUSH
16879: LD_REAL  1.50000000000000E+0000
16882: MUL
16883: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
16884: LD_VAR 0 1
16888: PPUSH
16889: LD_INT 66
16891: PPUSH
16892: CALL_OW 321
16896: PUSH
16897: LD_INT 2
16899: EQUAL
16900: IFFALSE 16917
// bpoints := bpoints * 1.1 ;
16902: LD_ADDR_VAR 0 10
16906: PUSH
16907: LD_VAR 0 10
16911: PUSH
16912: LD_REAL  1.10000000000000E+0000
16915: MUL
16916: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
16917: LD_ADDR_VAR 0 10
16921: PUSH
16922: LD_VAR 0 10
16926: PUSH
16927: LD_VAR 0 6
16931: PPUSH
16932: LD_INT 1
16934: PPUSH
16935: CALL_OW 259
16939: PUSH
16940: LD_REAL  1.15000000000000E+0000
16943: MUL
16944: MUL
16945: ST_TO_ADDR
// end ; unit_vehicle :
16946: GO 17776
16948: LD_INT 2
16950: DOUBLE
16951: EQUAL
16952: IFTRUE 16956
16954: GO 17764
16956: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
16957: LD_VAR 0 6
16961: PPUSH
16962: CALL_OW 264
16966: PUSH
16967: LD_INT 2
16969: PUSH
16970: LD_INT 42
16972: PUSH
16973: LD_INT 24
16975: PUSH
16976: EMPTY
16977: LIST
16978: LIST
16979: LIST
16980: IN
16981: IFFALSE 17002
// points := [ 25 , 5 , 3 ] ;
16983: LD_ADDR_VAR 0 9
16987: PUSH
16988: LD_INT 25
16990: PUSH
16991: LD_INT 5
16993: PUSH
16994: LD_INT 3
16996: PUSH
16997: EMPTY
16998: LIST
16999: LIST
17000: LIST
17001: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
17002: LD_VAR 0 6
17006: PPUSH
17007: CALL_OW 264
17011: PUSH
17012: LD_INT 4
17014: PUSH
17015: LD_INT 43
17017: PUSH
17018: LD_INT 25
17020: PUSH
17021: EMPTY
17022: LIST
17023: LIST
17024: LIST
17025: IN
17026: IFFALSE 17047
// points := [ 40 , 15 , 5 ] ;
17028: LD_ADDR_VAR 0 9
17032: PUSH
17033: LD_INT 40
17035: PUSH
17036: LD_INT 15
17038: PUSH
17039: LD_INT 5
17041: PUSH
17042: EMPTY
17043: LIST
17044: LIST
17045: LIST
17046: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
17047: LD_VAR 0 6
17051: PPUSH
17052: CALL_OW 264
17056: PUSH
17057: LD_INT 3
17059: PUSH
17060: LD_INT 23
17062: PUSH
17063: EMPTY
17064: LIST
17065: LIST
17066: IN
17067: IFFALSE 17088
// points := [ 7 , 25 , 8 ] ;
17069: LD_ADDR_VAR 0 9
17073: PUSH
17074: LD_INT 7
17076: PUSH
17077: LD_INT 25
17079: PUSH
17080: LD_INT 8
17082: PUSH
17083: EMPTY
17084: LIST
17085: LIST
17086: LIST
17087: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
17088: LD_VAR 0 6
17092: PPUSH
17093: CALL_OW 264
17097: PUSH
17098: LD_INT 5
17100: PUSH
17101: LD_INT 27
17103: PUSH
17104: LD_INT 44
17106: PUSH
17107: EMPTY
17108: LIST
17109: LIST
17110: LIST
17111: IN
17112: IFFALSE 17133
// points := [ 14 , 50 , 16 ] ;
17114: LD_ADDR_VAR 0 9
17118: PUSH
17119: LD_INT 14
17121: PUSH
17122: LD_INT 50
17124: PUSH
17125: LD_INT 16
17127: PUSH
17128: EMPTY
17129: LIST
17130: LIST
17131: LIST
17132: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
17133: LD_VAR 0 6
17137: PPUSH
17138: CALL_OW 264
17142: PUSH
17143: LD_INT 6
17145: PUSH
17146: LD_INT 46
17148: PUSH
17149: EMPTY
17150: LIST
17151: LIST
17152: IN
17153: IFFALSE 17174
// points := [ 32 , 120 , 70 ] ;
17155: LD_ADDR_VAR 0 9
17159: PUSH
17160: LD_INT 32
17162: PUSH
17163: LD_INT 120
17165: PUSH
17166: LD_INT 70
17168: PUSH
17169: EMPTY
17170: LIST
17171: LIST
17172: LIST
17173: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
17174: LD_VAR 0 6
17178: PPUSH
17179: CALL_OW 264
17183: PUSH
17184: LD_INT 7
17186: PUSH
17187: LD_INT 28
17189: PUSH
17190: LD_INT 45
17192: PUSH
17193: LD_INT 92
17195: PUSH
17196: EMPTY
17197: LIST
17198: LIST
17199: LIST
17200: LIST
17201: IN
17202: IFFALSE 17223
// points := [ 35 , 20 , 45 ] ;
17204: LD_ADDR_VAR 0 9
17208: PUSH
17209: LD_INT 35
17211: PUSH
17212: LD_INT 20
17214: PUSH
17215: LD_INT 45
17217: PUSH
17218: EMPTY
17219: LIST
17220: LIST
17221: LIST
17222: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
17223: LD_VAR 0 6
17227: PPUSH
17228: CALL_OW 264
17232: PUSH
17233: LD_INT 47
17235: PUSH
17236: EMPTY
17237: LIST
17238: IN
17239: IFFALSE 17260
// points := [ 67 , 45 , 75 ] ;
17241: LD_ADDR_VAR 0 9
17245: PUSH
17246: LD_INT 67
17248: PUSH
17249: LD_INT 45
17251: PUSH
17252: LD_INT 75
17254: PUSH
17255: EMPTY
17256: LIST
17257: LIST
17258: LIST
17259: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
17260: LD_VAR 0 6
17264: PPUSH
17265: CALL_OW 264
17269: PUSH
17270: LD_INT 26
17272: PUSH
17273: EMPTY
17274: LIST
17275: IN
17276: IFFALSE 17297
// points := [ 120 , 30 , 80 ] ;
17278: LD_ADDR_VAR 0 9
17282: PUSH
17283: LD_INT 120
17285: PUSH
17286: LD_INT 30
17288: PUSH
17289: LD_INT 80
17291: PUSH
17292: EMPTY
17293: LIST
17294: LIST
17295: LIST
17296: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
17297: LD_VAR 0 6
17301: PPUSH
17302: CALL_OW 264
17306: PUSH
17307: LD_INT 22
17309: PUSH
17310: EMPTY
17311: LIST
17312: IN
17313: IFFALSE 17334
// points := [ 40 , 1 , 1 ] ;
17315: LD_ADDR_VAR 0 9
17319: PUSH
17320: LD_INT 40
17322: PUSH
17323: LD_INT 1
17325: PUSH
17326: LD_INT 1
17328: PUSH
17329: EMPTY
17330: LIST
17331: LIST
17332: LIST
17333: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
17334: LD_VAR 0 6
17338: PPUSH
17339: CALL_OW 264
17343: PUSH
17344: LD_INT 29
17346: PUSH
17347: EMPTY
17348: LIST
17349: IN
17350: IFFALSE 17371
// points := [ 70 , 200 , 400 ] ;
17352: LD_ADDR_VAR 0 9
17356: PUSH
17357: LD_INT 70
17359: PUSH
17360: LD_INT 200
17362: PUSH
17363: LD_INT 400
17365: PUSH
17366: EMPTY
17367: LIST
17368: LIST
17369: LIST
17370: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
17371: LD_VAR 0 6
17375: PPUSH
17376: CALL_OW 264
17380: PUSH
17381: LD_INT 14
17383: PUSH
17384: LD_INT 53
17386: PUSH
17387: EMPTY
17388: LIST
17389: LIST
17390: IN
17391: IFFALSE 17412
// points := [ 40 , 10 , 20 ] ;
17393: LD_ADDR_VAR 0 9
17397: PUSH
17398: LD_INT 40
17400: PUSH
17401: LD_INT 10
17403: PUSH
17404: LD_INT 20
17406: PUSH
17407: EMPTY
17408: LIST
17409: LIST
17410: LIST
17411: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
17412: LD_VAR 0 6
17416: PPUSH
17417: CALL_OW 264
17421: PUSH
17422: LD_INT 9
17424: PUSH
17425: EMPTY
17426: LIST
17427: IN
17428: IFFALSE 17449
// points := [ 5 , 70 , 20 ] ;
17430: LD_ADDR_VAR 0 9
17434: PUSH
17435: LD_INT 5
17437: PUSH
17438: LD_INT 70
17440: PUSH
17441: LD_INT 20
17443: PUSH
17444: EMPTY
17445: LIST
17446: LIST
17447: LIST
17448: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
17449: LD_VAR 0 6
17453: PPUSH
17454: CALL_OW 264
17458: PUSH
17459: LD_INT 10
17461: PUSH
17462: EMPTY
17463: LIST
17464: IN
17465: IFFALSE 17486
// points := [ 35 , 110 , 70 ] ;
17467: LD_ADDR_VAR 0 9
17471: PUSH
17472: LD_INT 35
17474: PUSH
17475: LD_INT 110
17477: PUSH
17478: LD_INT 70
17480: PUSH
17481: EMPTY
17482: LIST
17483: LIST
17484: LIST
17485: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
17486: LD_VAR 0 6
17490: PPUSH
17491: CALL_OW 265
17495: PUSH
17496: LD_INT 25
17498: EQUAL
17499: IFFALSE 17520
// points := [ 80 , 65 , 100 ] ;
17501: LD_ADDR_VAR 0 9
17505: PUSH
17506: LD_INT 80
17508: PUSH
17509: LD_INT 65
17511: PUSH
17512: LD_INT 100
17514: PUSH
17515: EMPTY
17516: LIST
17517: LIST
17518: LIST
17519: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
17520: LD_VAR 0 6
17524: PPUSH
17525: CALL_OW 263
17529: PUSH
17530: LD_INT 1
17532: EQUAL
17533: IFFALSE 17568
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
17535: LD_ADDR_VAR 0 10
17539: PUSH
17540: LD_VAR 0 10
17544: PUSH
17545: LD_VAR 0 6
17549: PPUSH
17550: CALL_OW 311
17554: PPUSH
17555: LD_INT 3
17557: PPUSH
17558: CALL_OW 259
17562: PUSH
17563: LD_INT 4
17565: MUL
17566: MUL
17567: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
17568: LD_VAR 0 6
17572: PPUSH
17573: CALL_OW 263
17577: PUSH
17578: LD_INT 2
17580: EQUAL
17581: IFFALSE 17632
// begin j := IsControledBy ( i ) ;
17583: LD_ADDR_VAR 0 7
17587: PUSH
17588: LD_VAR 0 6
17592: PPUSH
17593: CALL_OW 312
17597: ST_TO_ADDR
// if j then
17598: LD_VAR 0 7
17602: IFFALSE 17632
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
17604: LD_ADDR_VAR 0 10
17608: PUSH
17609: LD_VAR 0 10
17613: PUSH
17614: LD_VAR 0 7
17618: PPUSH
17619: LD_INT 3
17621: PPUSH
17622: CALL_OW 259
17626: PUSH
17627: LD_INT 3
17629: MUL
17630: MUL
17631: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
17632: LD_VAR 0 6
17636: PPUSH
17637: CALL_OW 264
17641: PUSH
17642: LD_INT 5
17644: PUSH
17645: LD_INT 6
17647: PUSH
17648: LD_INT 46
17650: PUSH
17651: LD_INT 44
17653: PUSH
17654: LD_INT 47
17656: PUSH
17657: LD_INT 45
17659: PUSH
17660: LD_INT 28
17662: PUSH
17663: LD_INT 7
17665: PUSH
17666: LD_INT 27
17668: PUSH
17669: LD_INT 29
17671: PUSH
17672: EMPTY
17673: LIST
17674: LIST
17675: LIST
17676: LIST
17677: LIST
17678: LIST
17679: LIST
17680: LIST
17681: LIST
17682: LIST
17683: IN
17684: IFFALSE 17704
17686: PUSH
17687: LD_VAR 0 1
17691: PPUSH
17692: LD_INT 52
17694: PPUSH
17695: CALL_OW 321
17699: PUSH
17700: LD_INT 2
17702: EQUAL
17703: AND
17704: IFFALSE 17721
// bpoints := bpoints * 1.2 ;
17706: LD_ADDR_VAR 0 10
17710: PUSH
17711: LD_VAR 0 10
17715: PUSH
17716: LD_REAL  1.20000000000000E+0000
17719: MUL
17720: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
17721: LD_VAR 0 6
17725: PPUSH
17726: CALL_OW 264
17730: PUSH
17731: LD_INT 6
17733: PUSH
17734: LD_INT 46
17736: PUSH
17737: LD_INT 47
17739: PUSH
17740: EMPTY
17741: LIST
17742: LIST
17743: LIST
17744: IN
17745: IFFALSE 17762
// bpoints := bpoints * 1.2 ;
17747: LD_ADDR_VAR 0 10
17751: PUSH
17752: LD_VAR 0 10
17756: PUSH
17757: LD_REAL  1.20000000000000E+0000
17760: MUL
17761: ST_TO_ADDR
// end ; unit_building :
17762: GO 17776
17764: LD_INT 3
17766: DOUBLE
17767: EQUAL
17768: IFTRUE 17772
17770: GO 17775
17772: POP
// ; end ;
17773: GO 17776
17775: POP
// for j = 1 to 3 do
17776: LD_ADDR_VAR 0 7
17780: PUSH
17781: DOUBLE
17782: LD_INT 1
17784: DEC
17785: ST_TO_ADDR
17786: LD_INT 3
17788: PUSH
17789: FOR_TO
17790: IFFALSE 17843
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
17792: LD_ADDR_VAR 0 5
17796: PUSH
17797: LD_VAR 0 5
17801: PPUSH
17802: LD_VAR 0 7
17806: PPUSH
17807: LD_VAR 0 5
17811: PUSH
17812: LD_VAR 0 7
17816: ARRAY
17817: PUSH
17818: LD_VAR 0 9
17822: PUSH
17823: LD_VAR 0 7
17827: ARRAY
17828: PUSH
17829: LD_VAR 0 10
17833: MUL
17834: PLUS
17835: PPUSH
17836: CALL_OW 1
17840: ST_TO_ADDR
17841: GO 17789
17843: POP
17844: POP
// end ;
17845: GO 16318
17847: POP
17848: POP
// result := Replace ( result , 4 , tmp ) ;
17849: LD_ADDR_VAR 0 5
17853: PUSH
17854: LD_VAR 0 5
17858: PPUSH
17859: LD_INT 4
17861: PPUSH
17862: LD_VAR 0 8
17866: PPUSH
17867: CALL_OW 1
17871: ST_TO_ADDR
// end ;
17872: LD_VAR 0 5
17876: RET
// export function DangerAtRange ( unit , range ) ; begin
17877: LD_INT 0
17879: PPUSH
// if not unit then
17880: LD_VAR 0 1
17884: NOT
17885: IFFALSE 17889
// exit ;
17887: GO 17934
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
17889: LD_ADDR_VAR 0 3
17893: PUSH
17894: LD_VAR 0 1
17898: PPUSH
17899: CALL_OW 255
17903: PPUSH
17904: LD_VAR 0 1
17908: PPUSH
17909: CALL_OW 250
17913: PPUSH
17914: LD_VAR 0 1
17918: PPUSH
17919: CALL_OW 251
17923: PPUSH
17924: LD_VAR 0 2
17928: PPUSH
17929: CALL 16168 0 4
17933: ST_TO_ADDR
// end ;
17934: LD_VAR 0 3
17938: RET
// export function DangerInArea ( side , area ) ; begin
17939: LD_INT 0
17941: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
17942: LD_ADDR_VAR 0 3
17946: PUSH
17947: LD_VAR 0 2
17951: PPUSH
17952: LD_INT 81
17954: PUSH
17955: LD_VAR 0 1
17959: PUSH
17960: EMPTY
17961: LIST
17962: LIST
17963: PPUSH
17964: CALL_OW 70
17968: ST_TO_ADDR
// end ;
17969: LD_VAR 0 3
17973: RET
// export function IsExtension ( b ) ; begin
17974: LD_INT 0
17976: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
17977: LD_ADDR_VAR 0 2
17981: PUSH
17982: LD_VAR 0 1
17986: PUSH
17987: LD_INT 23
17989: PUSH
17990: LD_INT 20
17992: PUSH
17993: LD_INT 22
17995: PUSH
17996: LD_INT 17
17998: PUSH
17999: LD_INT 24
18001: PUSH
18002: LD_INT 21
18004: PUSH
18005: LD_INT 19
18007: PUSH
18008: LD_INT 16
18010: PUSH
18011: LD_INT 25
18013: PUSH
18014: LD_INT 18
18016: PUSH
18017: EMPTY
18018: LIST
18019: LIST
18020: LIST
18021: LIST
18022: LIST
18023: LIST
18024: LIST
18025: LIST
18026: LIST
18027: LIST
18028: IN
18029: ST_TO_ADDR
// end ;
18030: LD_VAR 0 2
18034: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
18035: LD_INT 0
18037: PPUSH
18038: PPUSH
18039: PPUSH
// result := [ ] ;
18040: LD_ADDR_VAR 0 4
18044: PUSH
18045: EMPTY
18046: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
18047: LD_ADDR_VAR 0 5
18051: PUSH
18052: LD_VAR 0 2
18056: PPUSH
18057: LD_INT 21
18059: PUSH
18060: LD_INT 3
18062: PUSH
18063: EMPTY
18064: LIST
18065: LIST
18066: PPUSH
18067: CALL_OW 70
18071: ST_TO_ADDR
// if not tmp then
18072: LD_VAR 0 5
18076: NOT
18077: IFFALSE 18081
// exit ;
18079: GO 18145
// if checkLink then
18081: LD_VAR 0 3
18085: IFFALSE 18135
// begin for i in tmp do
18087: LD_ADDR_VAR 0 6
18091: PUSH
18092: LD_VAR 0 5
18096: PUSH
18097: FOR_IN
18098: IFFALSE 18133
// if GetBase ( i ) <> base then
18100: LD_VAR 0 6
18104: PPUSH
18105: CALL_OW 274
18109: PUSH
18110: LD_VAR 0 1
18114: NONEQUAL
18115: IFFALSE 18131
// ComLinkToBase ( base , i ) ;
18117: LD_VAR 0 1
18121: PPUSH
18122: LD_VAR 0 6
18126: PPUSH
18127: CALL_OW 169
18131: GO 18097
18133: POP
18134: POP
// end ; result := tmp ;
18135: LD_ADDR_VAR 0 4
18139: PUSH
18140: LD_VAR 0 5
18144: ST_TO_ADDR
// end ;
18145: LD_VAR 0 4
18149: RET
// export function ComComplete ( units , b ) ; var i ; begin
18150: LD_INT 0
18152: PPUSH
18153: PPUSH
// if not units then
18154: LD_VAR 0 1
18158: NOT
18159: IFFALSE 18163
// exit ;
18161: GO 18253
// for i in units do
18163: LD_ADDR_VAR 0 4
18167: PUSH
18168: LD_VAR 0 1
18172: PUSH
18173: FOR_IN
18174: IFFALSE 18251
// if BuildingStatus ( b ) = bs_build then
18176: LD_VAR 0 2
18180: PPUSH
18181: CALL_OW 461
18185: PUSH
18186: LD_INT 1
18188: EQUAL
18189: IFFALSE 18249
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
18191: LD_VAR 0 4
18195: PPUSH
18196: LD_STRING h
18198: PUSH
18199: LD_VAR 0 2
18203: PPUSH
18204: CALL_OW 250
18208: PUSH
18209: LD_VAR 0 2
18213: PPUSH
18214: CALL_OW 251
18218: PUSH
18219: LD_VAR 0 2
18223: PUSH
18224: LD_INT 0
18226: PUSH
18227: LD_INT 0
18229: PUSH
18230: LD_INT 0
18232: PUSH
18233: EMPTY
18234: LIST
18235: LIST
18236: LIST
18237: LIST
18238: LIST
18239: LIST
18240: LIST
18241: PUSH
18242: EMPTY
18243: LIST
18244: PPUSH
18245: CALL_OW 446
18249: GO 18173
18251: POP
18252: POP
// end ;
18253: LD_VAR 0 3
18257: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
18258: LD_INT 0
18260: PPUSH
18261: PPUSH
18262: PPUSH
18263: PPUSH
18264: PPUSH
18265: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
18266: LD_VAR 0 1
18270: NOT
18271: IFTRUE 18288
18273: PUSH
18274: LD_VAR 0 1
18278: PPUSH
18279: CALL_OW 263
18283: PUSH
18284: LD_INT 2
18286: NONEQUAL
18287: OR
18288: IFFALSE 18292
// exit ;
18290: GO 18608
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
18292: LD_ADDR_VAR 0 6
18296: PUSH
18297: LD_INT 22
18299: PUSH
18300: LD_VAR 0 1
18304: PPUSH
18305: CALL_OW 255
18309: PUSH
18310: EMPTY
18311: LIST
18312: LIST
18313: PUSH
18314: LD_INT 2
18316: PUSH
18317: LD_INT 30
18319: PUSH
18320: LD_INT 36
18322: PUSH
18323: EMPTY
18324: LIST
18325: LIST
18326: PUSH
18327: LD_INT 34
18329: PUSH
18330: LD_INT 31
18332: PUSH
18333: EMPTY
18334: LIST
18335: LIST
18336: PUSH
18337: EMPTY
18338: LIST
18339: LIST
18340: LIST
18341: PUSH
18342: EMPTY
18343: LIST
18344: LIST
18345: PPUSH
18346: CALL_OW 69
18350: ST_TO_ADDR
// if not tmp then
18351: LD_VAR 0 6
18355: NOT
18356: IFFALSE 18360
// exit ;
18358: GO 18608
// result := [ ] ;
18360: LD_ADDR_VAR 0 2
18364: PUSH
18365: EMPTY
18366: ST_TO_ADDR
// for i in tmp do
18367: LD_ADDR_VAR 0 3
18371: PUSH
18372: LD_VAR 0 6
18376: PUSH
18377: FOR_IN
18378: IFFALSE 18449
// begin t := UnitsInside ( i ) ;
18380: LD_ADDR_VAR 0 4
18384: PUSH
18385: LD_VAR 0 3
18389: PPUSH
18390: CALL_OW 313
18394: ST_TO_ADDR
// if t then
18395: LD_VAR 0 4
18399: IFFALSE 18447
// for j in t do
18401: LD_ADDR_VAR 0 7
18405: PUSH
18406: LD_VAR 0 4
18410: PUSH
18411: FOR_IN
18412: IFFALSE 18445
// result := Replace ( result , result + 1 , j ) ;
18414: LD_ADDR_VAR 0 2
18418: PUSH
18419: LD_VAR 0 2
18423: PPUSH
18424: LD_VAR 0 2
18428: PUSH
18429: LD_INT 1
18431: PLUS
18432: PPUSH
18433: LD_VAR 0 7
18437: PPUSH
18438: CALL_OW 1
18442: ST_TO_ADDR
18443: GO 18411
18445: POP
18446: POP
// end ;
18447: GO 18377
18449: POP
18450: POP
// if not result then
18451: LD_VAR 0 2
18455: NOT
18456: IFFALSE 18460
// exit ;
18458: GO 18608
// mech := result [ 1 ] ;
18460: LD_ADDR_VAR 0 5
18464: PUSH
18465: LD_VAR 0 2
18469: PUSH
18470: LD_INT 1
18472: ARRAY
18473: ST_TO_ADDR
// if result > 1 then
18474: LD_VAR 0 2
18478: PUSH
18479: LD_INT 1
18481: GREATER
18482: IFFALSE 18594
// begin for i = 2 to result do
18484: LD_ADDR_VAR 0 3
18488: PUSH
18489: DOUBLE
18490: LD_INT 2
18492: DEC
18493: ST_TO_ADDR
18494: LD_VAR 0 2
18498: PUSH
18499: FOR_TO
18500: IFFALSE 18592
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
18502: LD_ADDR_VAR 0 4
18506: PUSH
18507: LD_VAR 0 2
18511: PUSH
18512: LD_VAR 0 3
18516: ARRAY
18517: PPUSH
18518: LD_INT 3
18520: PPUSH
18521: CALL_OW 259
18525: PUSH
18526: LD_VAR 0 2
18530: PUSH
18531: LD_VAR 0 3
18535: ARRAY
18536: PPUSH
18537: CALL_OW 432
18541: MINUS
18542: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
18543: LD_VAR 0 4
18547: PUSH
18548: LD_VAR 0 5
18552: PPUSH
18553: LD_INT 3
18555: PPUSH
18556: CALL_OW 259
18560: PUSH
18561: LD_VAR 0 5
18565: PPUSH
18566: CALL_OW 432
18570: MINUS
18571: GREATEREQUAL
18572: IFFALSE 18590
// mech := result [ i ] ;
18574: LD_ADDR_VAR 0 5
18578: PUSH
18579: LD_VAR 0 2
18583: PUSH
18584: LD_VAR 0 3
18588: ARRAY
18589: ST_TO_ADDR
// end ;
18590: GO 18499
18592: POP
18593: POP
// end ; ComLinkTo ( vehicle , mech ) ;
18594: LD_VAR 0 1
18598: PPUSH
18599: LD_VAR 0 5
18603: PPUSH
18604: CALL_OW 135
// end ;
18608: LD_VAR 0 2
18612: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
18613: LD_INT 0
18615: PPUSH
18616: PPUSH
18617: PPUSH
18618: PPUSH
18619: PPUSH
18620: PPUSH
18621: PPUSH
18622: PPUSH
18623: PPUSH
18624: PPUSH
18625: PPUSH
18626: PPUSH
18627: PPUSH
// result := [ ] ;
18628: LD_ADDR_VAR 0 7
18632: PUSH
18633: EMPTY
18634: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
18635: LD_VAR 0 1
18639: PPUSH
18640: CALL_OW 266
18644: PUSH
18645: LD_INT 0
18647: PUSH
18648: LD_INT 1
18650: PUSH
18651: EMPTY
18652: LIST
18653: LIST
18654: IN
18655: NOT
18656: IFFALSE 18660
// exit ;
18658: GO 20300
// if name then
18660: LD_VAR 0 3
18664: IFFALSE 18680
// SetBName ( base_dep , name ) ;
18666: LD_VAR 0 1
18670: PPUSH
18671: LD_VAR 0 3
18675: PPUSH
18676: CALL_OW 500
// base := GetBase ( base_dep ) ;
18680: LD_ADDR_VAR 0 15
18684: PUSH
18685: LD_VAR 0 1
18689: PPUSH
18690: CALL_OW 274
18694: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
18695: LD_ADDR_VAR 0 16
18699: PUSH
18700: LD_VAR 0 1
18704: PPUSH
18705: CALL_OW 255
18709: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
18710: LD_ADDR_VAR 0 17
18714: PUSH
18715: LD_VAR 0 1
18719: PPUSH
18720: CALL_OW 248
18724: ST_TO_ADDR
// if sources then
18725: LD_VAR 0 5
18729: IFFALSE 18776
// for i = 1 to 3 do
18731: LD_ADDR_VAR 0 8
18735: PUSH
18736: DOUBLE
18737: LD_INT 1
18739: DEC
18740: ST_TO_ADDR
18741: LD_INT 3
18743: PUSH
18744: FOR_TO
18745: IFFALSE 18774
// AddResourceType ( base , i , sources [ i ] ) ;
18747: LD_VAR 0 15
18751: PPUSH
18752: LD_VAR 0 8
18756: PPUSH
18757: LD_VAR 0 5
18761: PUSH
18762: LD_VAR 0 8
18766: ARRAY
18767: PPUSH
18768: CALL_OW 276
18772: GO 18744
18774: POP
18775: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
18776: LD_ADDR_VAR 0 18
18780: PUSH
18781: LD_VAR 0 15
18785: PPUSH
18786: LD_VAR 0 2
18790: PPUSH
18791: LD_INT 1
18793: PPUSH
18794: CALL 18035 0 3
18798: ST_TO_ADDR
// InitHc ;
18799: CALL_OW 19
// InitUc ;
18803: CALL_OW 18
// uc_side := side ;
18807: LD_ADDR_OWVAR 20
18811: PUSH
18812: LD_VAR 0 16
18816: ST_TO_ADDR
// uc_nation := nation ;
18817: LD_ADDR_OWVAR 21
18821: PUSH
18822: LD_VAR 0 17
18826: ST_TO_ADDR
// if buildings then
18827: LD_VAR 0 18
18831: IFFALSE 20159
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
18833: LD_ADDR_VAR 0 19
18837: PUSH
18838: LD_VAR 0 18
18842: PPUSH
18843: LD_INT 2
18845: PUSH
18846: LD_INT 30
18848: PUSH
18849: LD_INT 29
18851: PUSH
18852: EMPTY
18853: LIST
18854: LIST
18855: PUSH
18856: LD_INT 30
18858: PUSH
18859: LD_INT 30
18861: PUSH
18862: EMPTY
18863: LIST
18864: LIST
18865: PUSH
18866: EMPTY
18867: LIST
18868: LIST
18869: LIST
18870: PPUSH
18871: CALL_OW 72
18875: ST_TO_ADDR
// if tmp then
18876: LD_VAR 0 19
18880: IFFALSE 18928
// for i in tmp do
18882: LD_ADDR_VAR 0 8
18886: PUSH
18887: LD_VAR 0 19
18891: PUSH
18892: FOR_IN
18893: IFFALSE 18926
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
18895: LD_VAR 0 8
18899: PPUSH
18900: CALL_OW 250
18904: PPUSH
18905: LD_VAR 0 8
18909: PPUSH
18910: CALL_OW 251
18914: PPUSH
18915: LD_VAR 0 16
18919: PPUSH
18920: CALL_OW 441
18924: GO 18892
18926: POP
18927: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
18928: LD_VAR 0 18
18932: PPUSH
18933: LD_INT 2
18935: PUSH
18936: LD_INT 30
18938: PUSH
18939: LD_INT 32
18941: PUSH
18942: EMPTY
18943: LIST
18944: LIST
18945: PUSH
18946: LD_INT 30
18948: PUSH
18949: LD_INT 33
18951: PUSH
18952: EMPTY
18953: LIST
18954: LIST
18955: PUSH
18956: EMPTY
18957: LIST
18958: LIST
18959: LIST
18960: PPUSH
18961: CALL_OW 72
18965: IFFALSE 19053
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
18967: LD_ADDR_VAR 0 8
18971: PUSH
18972: LD_VAR 0 18
18976: PPUSH
18977: LD_INT 2
18979: PUSH
18980: LD_INT 30
18982: PUSH
18983: LD_INT 32
18985: PUSH
18986: EMPTY
18987: LIST
18988: LIST
18989: PUSH
18990: LD_INT 30
18992: PUSH
18993: LD_INT 33
18995: PUSH
18996: EMPTY
18997: LIST
18998: LIST
18999: PUSH
19000: EMPTY
19001: LIST
19002: LIST
19003: LIST
19004: PPUSH
19005: CALL_OW 72
19009: PUSH
19010: FOR_IN
19011: IFFALSE 19051
// begin if not GetBWeapon ( i ) then
19013: LD_VAR 0 8
19017: PPUSH
19018: CALL_OW 269
19022: NOT
19023: IFFALSE 19049
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
19025: LD_VAR 0 8
19029: PPUSH
19030: LD_VAR 0 8
19034: PPUSH
19035: LD_VAR 0 2
19039: PPUSH
19040: CALL 20305 0 2
19044: PPUSH
19045: CALL_OW 431
// end ;
19049: GO 19010
19051: POP
19052: POP
// end ; for i = 1 to personel do
19053: LD_ADDR_VAR 0 8
19057: PUSH
19058: DOUBLE
19059: LD_INT 1
19061: DEC
19062: ST_TO_ADDR
19063: LD_VAR 0 6
19067: PUSH
19068: FOR_TO
19069: IFFALSE 20139
// begin if i > 4 then
19071: LD_VAR 0 8
19075: PUSH
19076: LD_INT 4
19078: GREATER
19079: IFFALSE 19083
// break ;
19081: GO 20139
// case i of 1 :
19083: LD_VAR 0 8
19087: PUSH
19088: LD_INT 1
19090: DOUBLE
19091: EQUAL
19092: IFTRUE 19096
19094: GO 19176
19096: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
19097: LD_ADDR_VAR 0 12
19101: PUSH
19102: LD_VAR 0 18
19106: PPUSH
19107: LD_INT 22
19109: PUSH
19110: LD_VAR 0 16
19114: PUSH
19115: EMPTY
19116: LIST
19117: LIST
19118: PUSH
19119: LD_INT 58
19121: PUSH
19122: EMPTY
19123: LIST
19124: PUSH
19125: LD_INT 2
19127: PUSH
19128: LD_INT 30
19130: PUSH
19131: LD_INT 32
19133: PUSH
19134: EMPTY
19135: LIST
19136: LIST
19137: PUSH
19138: LD_INT 30
19140: PUSH
19141: LD_INT 4
19143: PUSH
19144: EMPTY
19145: LIST
19146: LIST
19147: PUSH
19148: LD_INT 30
19150: PUSH
19151: LD_INT 5
19153: PUSH
19154: EMPTY
19155: LIST
19156: LIST
19157: PUSH
19158: EMPTY
19159: LIST
19160: LIST
19161: LIST
19162: LIST
19163: PUSH
19164: EMPTY
19165: LIST
19166: LIST
19167: LIST
19168: PPUSH
19169: CALL_OW 72
19173: ST_TO_ADDR
19174: GO 19398
19176: LD_INT 2
19178: DOUBLE
19179: EQUAL
19180: IFTRUE 19184
19182: GO 19246
19184: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
19185: LD_ADDR_VAR 0 12
19189: PUSH
19190: LD_VAR 0 18
19194: PPUSH
19195: LD_INT 22
19197: PUSH
19198: LD_VAR 0 16
19202: PUSH
19203: EMPTY
19204: LIST
19205: LIST
19206: PUSH
19207: LD_INT 2
19209: PUSH
19210: LD_INT 30
19212: PUSH
19213: LD_INT 0
19215: PUSH
19216: EMPTY
19217: LIST
19218: LIST
19219: PUSH
19220: LD_INT 30
19222: PUSH
19223: LD_INT 1
19225: PUSH
19226: EMPTY
19227: LIST
19228: LIST
19229: PUSH
19230: EMPTY
19231: LIST
19232: LIST
19233: LIST
19234: PUSH
19235: EMPTY
19236: LIST
19237: LIST
19238: PPUSH
19239: CALL_OW 72
19243: ST_TO_ADDR
19244: GO 19398
19246: LD_INT 3
19248: DOUBLE
19249: EQUAL
19250: IFTRUE 19254
19252: GO 19316
19254: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
19255: LD_ADDR_VAR 0 12
19259: PUSH
19260: LD_VAR 0 18
19264: PPUSH
19265: LD_INT 22
19267: PUSH
19268: LD_VAR 0 16
19272: PUSH
19273: EMPTY
19274: LIST
19275: LIST
19276: PUSH
19277: LD_INT 2
19279: PUSH
19280: LD_INT 30
19282: PUSH
19283: LD_INT 2
19285: PUSH
19286: EMPTY
19287: LIST
19288: LIST
19289: PUSH
19290: LD_INT 30
19292: PUSH
19293: LD_INT 3
19295: PUSH
19296: EMPTY
19297: LIST
19298: LIST
19299: PUSH
19300: EMPTY
19301: LIST
19302: LIST
19303: LIST
19304: PUSH
19305: EMPTY
19306: LIST
19307: LIST
19308: PPUSH
19309: CALL_OW 72
19313: ST_TO_ADDR
19314: GO 19398
19316: LD_INT 4
19318: DOUBLE
19319: EQUAL
19320: IFTRUE 19324
19322: GO 19397
19324: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
19325: LD_ADDR_VAR 0 12
19329: PUSH
19330: LD_VAR 0 18
19334: PPUSH
19335: LD_INT 22
19337: PUSH
19338: LD_VAR 0 16
19342: PUSH
19343: EMPTY
19344: LIST
19345: LIST
19346: PUSH
19347: LD_INT 2
19349: PUSH
19350: LD_INT 30
19352: PUSH
19353: LD_INT 6
19355: PUSH
19356: EMPTY
19357: LIST
19358: LIST
19359: PUSH
19360: LD_INT 30
19362: PUSH
19363: LD_INT 7
19365: PUSH
19366: EMPTY
19367: LIST
19368: LIST
19369: PUSH
19370: LD_INT 30
19372: PUSH
19373: LD_INT 8
19375: PUSH
19376: EMPTY
19377: LIST
19378: LIST
19379: PUSH
19380: EMPTY
19381: LIST
19382: LIST
19383: LIST
19384: LIST
19385: PUSH
19386: EMPTY
19387: LIST
19388: LIST
19389: PPUSH
19390: CALL_OW 72
19394: ST_TO_ADDR
19395: GO 19398
19397: POP
// if i = 1 then
19398: LD_VAR 0 8
19402: PUSH
19403: LD_INT 1
19405: EQUAL
19406: IFFALSE 19517
// begin tmp := [ ] ;
19408: LD_ADDR_VAR 0 19
19412: PUSH
19413: EMPTY
19414: ST_TO_ADDR
// for j in f do
19415: LD_ADDR_VAR 0 9
19419: PUSH
19420: LD_VAR 0 12
19424: PUSH
19425: FOR_IN
19426: IFFALSE 19499
// if GetBType ( j ) = b_bunker then
19428: LD_VAR 0 9
19432: PPUSH
19433: CALL_OW 266
19437: PUSH
19438: LD_INT 32
19440: EQUAL
19441: IFFALSE 19468
// tmp := Insert ( tmp , 1 , j ) else
19443: LD_ADDR_VAR 0 19
19447: PUSH
19448: LD_VAR 0 19
19452: PPUSH
19453: LD_INT 1
19455: PPUSH
19456: LD_VAR 0 9
19460: PPUSH
19461: CALL_OW 2
19465: ST_TO_ADDR
19466: GO 19497
// tmp := Insert ( tmp , tmp + 1 , j ) ;
19468: LD_ADDR_VAR 0 19
19472: PUSH
19473: LD_VAR 0 19
19477: PPUSH
19478: LD_VAR 0 19
19482: PUSH
19483: LD_INT 1
19485: PLUS
19486: PPUSH
19487: LD_VAR 0 9
19491: PPUSH
19492: CALL_OW 2
19496: ST_TO_ADDR
19497: GO 19425
19499: POP
19500: POP
// if tmp then
19501: LD_VAR 0 19
19505: IFFALSE 19517
// f := tmp ;
19507: LD_ADDR_VAR 0 12
19511: PUSH
19512: LD_VAR 0 19
19516: ST_TO_ADDR
// end ; x := personel [ i ] ;
19517: LD_ADDR_VAR 0 13
19521: PUSH
19522: LD_VAR 0 6
19526: PUSH
19527: LD_VAR 0 8
19531: ARRAY
19532: ST_TO_ADDR
// if x = - 1 then
19533: LD_VAR 0 13
19537: PUSH
19538: LD_INT 1
19540: NEG
19541: EQUAL
19542: IFFALSE 19753
// begin for j in f do
19544: LD_ADDR_VAR 0 9
19548: PUSH
19549: LD_VAR 0 12
19553: PUSH
19554: FOR_IN
19555: IFFALSE 19749
// repeat InitHc ;
19557: CALL_OW 19
// if GetBType ( j ) = b_barracks then
19561: LD_VAR 0 9
19565: PPUSH
19566: CALL_OW 266
19570: PUSH
19571: LD_INT 5
19573: EQUAL
19574: IFFALSE 19644
// begin if UnitsInside ( j ) < 3 then
19576: LD_VAR 0 9
19580: PPUSH
19581: CALL_OW 313
19585: PUSH
19586: LD_INT 3
19588: LESS
19589: IFFALSE 19625
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
19591: LD_INT 0
19593: PPUSH
19594: LD_INT 5
19596: PUSH
19597: LD_INT 8
19599: PUSH
19600: LD_INT 9
19602: PUSH
19603: EMPTY
19604: LIST
19605: LIST
19606: LIST
19607: PUSH
19608: LD_VAR 0 17
19612: ARRAY
19613: PPUSH
19614: LD_VAR 0 4
19618: PPUSH
19619: CALL_OW 380
19623: GO 19642
// PrepareHuman ( false , i , skill ) ;
19625: LD_INT 0
19627: PPUSH
19628: LD_VAR 0 8
19632: PPUSH
19633: LD_VAR 0 4
19637: PPUSH
19638: CALL_OW 380
// end else
19642: GO 19661
// PrepareHuman ( false , i , skill ) ;
19644: LD_INT 0
19646: PPUSH
19647: LD_VAR 0 8
19651: PPUSH
19652: LD_VAR 0 4
19656: PPUSH
19657: CALL_OW 380
// un := CreateHuman ;
19661: LD_ADDR_VAR 0 14
19665: PUSH
19666: CALL_OW 44
19670: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
19671: LD_ADDR_VAR 0 7
19675: PUSH
19676: LD_VAR 0 7
19680: PPUSH
19681: LD_INT 1
19683: PPUSH
19684: LD_VAR 0 14
19688: PPUSH
19689: CALL_OW 2
19693: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
19694: LD_VAR 0 14
19698: PPUSH
19699: LD_VAR 0 9
19703: PPUSH
19704: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
19708: LD_VAR 0 9
19712: PPUSH
19713: CALL_OW 313
19717: PUSH
19718: LD_INT 6
19720: EQUAL
19721: IFTRUE 19745
19723: PUSH
19724: LD_VAR 0 9
19728: PPUSH
19729: CALL_OW 266
19733: PUSH
19734: LD_INT 32
19736: PUSH
19737: LD_INT 31
19739: PUSH
19740: EMPTY
19741: LIST
19742: LIST
19743: IN
19744: OR
19745: IFFALSE 19557
19747: GO 19554
19749: POP
19750: POP
// end else
19751: GO 20137
// for j = 1 to x do
19753: LD_ADDR_VAR 0 9
19757: PUSH
19758: DOUBLE
19759: LD_INT 1
19761: DEC
19762: ST_TO_ADDR
19763: LD_VAR 0 13
19767: PUSH
19768: FOR_TO
19769: IFFALSE 20135
// begin InitHc ;
19771: CALL_OW 19
// if not f then
19775: LD_VAR 0 12
19779: NOT
19780: IFFALSE 19869
// begin PrepareHuman ( false , i , skill ) ;
19782: LD_INT 0
19784: PPUSH
19785: LD_VAR 0 8
19789: PPUSH
19790: LD_VAR 0 4
19794: PPUSH
19795: CALL_OW 380
// un := CreateHuman ;
19799: LD_ADDR_VAR 0 14
19803: PUSH
19804: CALL_OW 44
19808: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
19809: LD_ADDR_VAR 0 7
19813: PUSH
19814: LD_VAR 0 7
19818: PPUSH
19819: LD_INT 1
19821: PPUSH
19822: LD_VAR 0 14
19826: PPUSH
19827: CALL_OW 2
19831: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
19832: LD_VAR 0 14
19836: PPUSH
19837: LD_VAR 0 1
19841: PPUSH
19842: CALL_OW 250
19846: PPUSH
19847: LD_VAR 0 1
19851: PPUSH
19852: CALL_OW 251
19856: PPUSH
19857: LD_INT 10
19859: PPUSH
19860: LD_INT 0
19862: PPUSH
19863: CALL_OW 50
// continue ;
19867: GO 19768
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
19869: LD_VAR 0 12
19873: PUSH
19874: LD_INT 1
19876: ARRAY
19877: PPUSH
19878: CALL_OW 313
19882: IFFALSE 19910
19884: PUSH
19885: LD_VAR 0 12
19889: PUSH
19890: LD_INT 1
19892: ARRAY
19893: PPUSH
19894: CALL_OW 266
19898: PUSH
19899: LD_INT 32
19901: PUSH
19902: LD_INT 31
19904: PUSH
19905: EMPTY
19906: LIST
19907: LIST
19908: IN
19909: AND
19910: IFTRUE 19931
19912: PUSH
19913: LD_VAR 0 12
19917: PUSH
19918: LD_INT 1
19920: ARRAY
19921: PPUSH
19922: CALL_OW 313
19926: PUSH
19927: LD_INT 6
19929: EQUAL
19930: OR
19931: IFFALSE 19951
// f := Delete ( f , 1 ) ;
19933: LD_ADDR_VAR 0 12
19937: PUSH
19938: LD_VAR 0 12
19942: PPUSH
19943: LD_INT 1
19945: PPUSH
19946: CALL_OW 3
19950: ST_TO_ADDR
// if not f then
19951: LD_VAR 0 12
19955: NOT
19956: IFFALSE 19974
// begin x := x + 2 ;
19958: LD_ADDR_VAR 0 13
19962: PUSH
19963: LD_VAR 0 13
19967: PUSH
19968: LD_INT 2
19970: PLUS
19971: ST_TO_ADDR
// continue ;
19972: GO 19768
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
19974: LD_VAR 0 12
19978: PUSH
19979: LD_INT 1
19981: ARRAY
19982: PPUSH
19983: CALL_OW 266
19987: PUSH
19988: LD_INT 5
19990: EQUAL
19991: IFFALSE 20065
// begin if UnitsInside ( f [ 1 ] ) < 3 then
19993: LD_VAR 0 12
19997: PUSH
19998: LD_INT 1
20000: ARRAY
20001: PPUSH
20002: CALL_OW 313
20006: PUSH
20007: LD_INT 3
20009: LESS
20010: IFFALSE 20046
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
20012: LD_INT 0
20014: PPUSH
20015: LD_INT 5
20017: PUSH
20018: LD_INT 8
20020: PUSH
20021: LD_INT 9
20023: PUSH
20024: EMPTY
20025: LIST
20026: LIST
20027: LIST
20028: PUSH
20029: LD_VAR 0 17
20033: ARRAY
20034: PPUSH
20035: LD_VAR 0 4
20039: PPUSH
20040: CALL_OW 380
20044: GO 20063
// PrepareHuman ( false , i , skill ) ;
20046: LD_INT 0
20048: PPUSH
20049: LD_VAR 0 8
20053: PPUSH
20054: LD_VAR 0 4
20058: PPUSH
20059: CALL_OW 380
// end else
20063: GO 20082
// PrepareHuman ( false , i , skill ) ;
20065: LD_INT 0
20067: PPUSH
20068: LD_VAR 0 8
20072: PPUSH
20073: LD_VAR 0 4
20077: PPUSH
20078: CALL_OW 380
// un := CreateHuman ;
20082: LD_ADDR_VAR 0 14
20086: PUSH
20087: CALL_OW 44
20091: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
20092: LD_ADDR_VAR 0 7
20096: PUSH
20097: LD_VAR 0 7
20101: PPUSH
20102: LD_INT 1
20104: PPUSH
20105: LD_VAR 0 14
20109: PPUSH
20110: CALL_OW 2
20114: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
20115: LD_VAR 0 14
20119: PPUSH
20120: LD_VAR 0 12
20124: PUSH
20125: LD_INT 1
20127: ARRAY
20128: PPUSH
20129: CALL_OW 52
// end ;
20133: GO 19768
20135: POP
20136: POP
// end ;
20137: GO 19068
20139: POP
20140: POP
// result := result ^ buildings ;
20141: LD_ADDR_VAR 0 7
20145: PUSH
20146: LD_VAR 0 7
20150: PUSH
20151: LD_VAR 0 18
20155: ADD
20156: ST_TO_ADDR
// end else
20157: GO 20300
// begin for i = 1 to personel do
20159: LD_ADDR_VAR 0 8
20163: PUSH
20164: DOUBLE
20165: LD_INT 1
20167: DEC
20168: ST_TO_ADDR
20169: LD_VAR 0 6
20173: PUSH
20174: FOR_TO
20175: IFFALSE 20298
// begin if i > 4 then
20177: LD_VAR 0 8
20181: PUSH
20182: LD_INT 4
20184: GREATER
20185: IFFALSE 20189
// break ;
20187: GO 20298
// x := personel [ i ] ;
20189: LD_ADDR_VAR 0 13
20193: PUSH
20194: LD_VAR 0 6
20198: PUSH
20199: LD_VAR 0 8
20203: ARRAY
20204: ST_TO_ADDR
// if x = - 1 then
20205: LD_VAR 0 13
20209: PUSH
20210: LD_INT 1
20212: NEG
20213: EQUAL
20214: IFFALSE 20218
// continue ;
20216: GO 20174
// PrepareHuman ( false , i , skill ) ;
20218: LD_INT 0
20220: PPUSH
20221: LD_VAR 0 8
20225: PPUSH
20226: LD_VAR 0 4
20230: PPUSH
20231: CALL_OW 380
// un := CreateHuman ;
20235: LD_ADDR_VAR 0 14
20239: PUSH
20240: CALL_OW 44
20244: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
20245: LD_VAR 0 14
20249: PPUSH
20250: LD_VAR 0 1
20254: PPUSH
20255: CALL_OW 250
20259: PPUSH
20260: LD_VAR 0 1
20264: PPUSH
20265: CALL_OW 251
20269: PPUSH
20270: LD_INT 10
20272: PPUSH
20273: LD_INT 0
20275: PPUSH
20276: CALL_OW 50
// result := result ^ un ;
20280: LD_ADDR_VAR 0 7
20284: PUSH
20285: LD_VAR 0 7
20289: PUSH
20290: LD_VAR 0 14
20294: ADD
20295: ST_TO_ADDR
// end ;
20296: GO 20174
20298: POP
20299: POP
// end ; end ;
20300: LD_VAR 0 7
20304: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
20305: LD_INT 0
20307: PPUSH
20308: PPUSH
20309: PPUSH
20310: PPUSH
20311: PPUSH
20312: PPUSH
20313: PPUSH
20314: PPUSH
20315: PPUSH
20316: PPUSH
20317: PPUSH
20318: PPUSH
20319: PPUSH
20320: PPUSH
20321: PPUSH
20322: PPUSH
// result := false ;
20323: LD_ADDR_VAR 0 3
20327: PUSH
20328: LD_INT 0
20330: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
20331: LD_VAR 0 1
20335: NOT
20336: IFTRUE 20361
20338: PUSH
20339: LD_VAR 0 1
20343: PPUSH
20344: CALL_OW 266
20348: PUSH
20349: LD_INT 32
20351: PUSH
20352: LD_INT 33
20354: PUSH
20355: EMPTY
20356: LIST
20357: LIST
20358: IN
20359: NOT
20360: OR
20361: IFFALSE 20365
// exit ;
20363: GO 21500
// nat := GetNation ( tower ) ;
20365: LD_ADDR_VAR 0 12
20369: PUSH
20370: LD_VAR 0 1
20374: PPUSH
20375: CALL_OW 248
20379: ST_TO_ADDR
// side := GetSide ( tower ) ;
20380: LD_ADDR_VAR 0 16
20384: PUSH
20385: LD_VAR 0 1
20389: PPUSH
20390: CALL_OW 255
20394: ST_TO_ADDR
// x := GetX ( tower ) ;
20395: LD_ADDR_VAR 0 10
20399: PUSH
20400: LD_VAR 0 1
20404: PPUSH
20405: CALL_OW 250
20409: ST_TO_ADDR
// y := GetY ( tower ) ;
20410: LD_ADDR_VAR 0 11
20414: PUSH
20415: LD_VAR 0 1
20419: PPUSH
20420: CALL_OW 251
20424: ST_TO_ADDR
// if not x or not y then
20425: LD_VAR 0 10
20429: NOT
20430: IFTRUE 20439
20432: PUSH
20433: LD_VAR 0 11
20437: NOT
20438: OR
20439: IFFALSE 20443
// exit ;
20441: GO 21500
// weapon := 0 ;
20443: LD_ADDR_VAR 0 18
20447: PUSH
20448: LD_INT 0
20450: ST_TO_ADDR
// fac_list := [ ] ;
20451: LD_ADDR_VAR 0 17
20455: PUSH
20456: EMPTY
20457: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
20458: LD_ADDR_VAR 0 6
20462: PUSH
20463: LD_VAR 0 1
20467: PPUSH
20468: CALL_OW 274
20472: PPUSH
20473: LD_VAR 0 2
20477: PPUSH
20478: LD_INT 0
20480: PPUSH
20481: CALL 18035 0 3
20485: PPUSH
20486: LD_INT 30
20488: PUSH
20489: LD_INT 3
20491: PUSH
20492: EMPTY
20493: LIST
20494: LIST
20495: PPUSH
20496: CALL_OW 72
20500: ST_TO_ADDR
// if not factories then
20501: LD_VAR 0 6
20505: NOT
20506: IFFALSE 20510
// exit ;
20508: GO 21500
// for i in factories do
20510: LD_ADDR_VAR 0 8
20514: PUSH
20515: LD_VAR 0 6
20519: PUSH
20520: FOR_IN
20521: IFFALSE 20546
// fac_list := fac_list union AvailableWeaponList ( i ) ;
20523: LD_ADDR_VAR 0 17
20527: PUSH
20528: LD_VAR 0 17
20532: PUSH
20533: LD_VAR 0 8
20537: PPUSH
20538: CALL_OW 478
20542: UNION
20543: ST_TO_ADDR
20544: GO 20520
20546: POP
20547: POP
// if not fac_list then
20548: LD_VAR 0 17
20552: NOT
20553: IFFALSE 20557
// exit ;
20555: GO 21500
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
20557: LD_ADDR_VAR 0 5
20561: PUSH
20562: LD_INT 4
20564: PUSH
20565: LD_INT 5
20567: PUSH
20568: LD_INT 9
20570: PUSH
20571: LD_INT 10
20573: PUSH
20574: LD_INT 6
20576: PUSH
20577: LD_INT 7
20579: PUSH
20580: LD_INT 11
20582: PUSH
20583: EMPTY
20584: LIST
20585: LIST
20586: LIST
20587: LIST
20588: LIST
20589: LIST
20590: LIST
20591: PUSH
20592: LD_INT 27
20594: PUSH
20595: LD_INT 28
20597: PUSH
20598: LD_INT 26
20600: PUSH
20601: LD_INT 30
20603: PUSH
20604: EMPTY
20605: LIST
20606: LIST
20607: LIST
20608: LIST
20609: PUSH
20610: LD_INT 43
20612: PUSH
20613: LD_INT 44
20615: PUSH
20616: LD_INT 46
20618: PUSH
20619: LD_INT 45
20621: PUSH
20622: LD_INT 47
20624: PUSH
20625: LD_INT 49
20627: PUSH
20628: EMPTY
20629: LIST
20630: LIST
20631: LIST
20632: LIST
20633: LIST
20634: LIST
20635: PUSH
20636: EMPTY
20637: LIST
20638: LIST
20639: LIST
20640: PUSH
20641: LD_VAR 0 12
20645: ARRAY
20646: ST_TO_ADDR
// list := list isect fac_list ;
20647: LD_ADDR_VAR 0 5
20651: PUSH
20652: LD_VAR 0 5
20656: PUSH
20657: LD_VAR 0 17
20661: ISECT
20662: ST_TO_ADDR
// if not list then
20663: LD_VAR 0 5
20667: NOT
20668: IFFALSE 20672
// exit ;
20670: GO 21500
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
20672: LD_VAR 0 12
20676: PUSH
20677: LD_INT 3
20679: EQUAL
20680: IFFALSE 20692
20682: PUSH
20683: LD_INT 49
20685: PUSH
20686: LD_VAR 0 5
20690: IN
20691: AND
20692: IFFALSE 20712
20694: PUSH
20695: LD_INT 31
20697: PPUSH
20698: LD_VAR 0 16
20702: PPUSH
20703: CALL_OW 321
20707: PUSH
20708: LD_INT 2
20710: EQUAL
20711: AND
20712: IFFALSE 20772
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
20714: LD_INT 22
20716: PUSH
20717: LD_VAR 0 16
20721: PUSH
20722: EMPTY
20723: LIST
20724: LIST
20725: PUSH
20726: LD_INT 35
20728: PUSH
20729: LD_INT 49
20731: PUSH
20732: EMPTY
20733: LIST
20734: LIST
20735: PUSH
20736: LD_INT 91
20738: PUSH
20739: LD_VAR 0 1
20743: PUSH
20744: LD_INT 10
20746: PUSH
20747: EMPTY
20748: LIST
20749: LIST
20750: LIST
20751: PUSH
20752: EMPTY
20753: LIST
20754: LIST
20755: LIST
20756: PPUSH
20757: CALL_OW 69
20761: NOT
20762: IFFALSE 20772
// weapon := ru_time_lapser ;
20764: LD_ADDR_VAR 0 18
20768: PUSH
20769: LD_INT 49
20771: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
20772: LD_VAR 0 12
20776: PUSH
20777: LD_INT 1
20779: PUSH
20780: LD_INT 2
20782: PUSH
20783: EMPTY
20784: LIST
20785: LIST
20786: IN
20787: IFFALSE 20811
20789: PUSH
20790: LD_INT 11
20792: PUSH
20793: LD_VAR 0 5
20797: IN
20798: IFTRUE 20810
20800: PUSH
20801: LD_INT 30
20803: PUSH
20804: LD_VAR 0 5
20808: IN
20809: OR
20810: AND
20811: IFFALSE 20831
20813: PUSH
20814: LD_INT 6
20816: PPUSH
20817: LD_VAR 0 16
20821: PPUSH
20822: CALL_OW 321
20826: PUSH
20827: LD_INT 2
20829: EQUAL
20830: AND
20831: IFFALSE 20998
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
20833: LD_INT 22
20835: PUSH
20836: LD_VAR 0 16
20840: PUSH
20841: EMPTY
20842: LIST
20843: LIST
20844: PUSH
20845: LD_INT 2
20847: PUSH
20848: LD_INT 35
20850: PUSH
20851: LD_INT 11
20853: PUSH
20854: EMPTY
20855: LIST
20856: LIST
20857: PUSH
20858: LD_INT 35
20860: PUSH
20861: LD_INT 30
20863: PUSH
20864: EMPTY
20865: LIST
20866: LIST
20867: PUSH
20868: EMPTY
20869: LIST
20870: LIST
20871: LIST
20872: PUSH
20873: LD_INT 91
20875: PUSH
20876: LD_VAR 0 1
20880: PUSH
20881: LD_INT 18
20883: PUSH
20884: EMPTY
20885: LIST
20886: LIST
20887: LIST
20888: PUSH
20889: EMPTY
20890: LIST
20891: LIST
20892: LIST
20893: PPUSH
20894: CALL_OW 69
20898: NOT
20899: IFFALSE 20975
20901: PUSH
20902: LD_INT 22
20904: PUSH
20905: LD_VAR 0 16
20909: PUSH
20910: EMPTY
20911: LIST
20912: LIST
20913: PUSH
20914: LD_INT 2
20916: PUSH
20917: LD_INT 30
20919: PUSH
20920: LD_INT 32
20922: PUSH
20923: EMPTY
20924: LIST
20925: LIST
20926: PUSH
20927: LD_INT 30
20929: PUSH
20930: LD_INT 33
20932: PUSH
20933: EMPTY
20934: LIST
20935: LIST
20936: PUSH
20937: EMPTY
20938: LIST
20939: LIST
20940: LIST
20941: PUSH
20942: LD_INT 91
20944: PUSH
20945: LD_VAR 0 1
20949: PUSH
20950: LD_INT 12
20952: PUSH
20953: EMPTY
20954: LIST
20955: LIST
20956: LIST
20957: PUSH
20958: EMPTY
20959: LIST
20960: LIST
20961: LIST
20962: PUSH
20963: EMPTY
20964: LIST
20965: PPUSH
20966: CALL_OW 69
20970: PUSH
20971: LD_INT 2
20973: GREATER
20974: AND
20975: IFFALSE 20998
// weapon := [ us_radar , ar_radar ] [ nat ] ;
20977: LD_ADDR_VAR 0 18
20981: PUSH
20982: LD_INT 11
20984: PUSH
20985: LD_INT 30
20987: PUSH
20988: EMPTY
20989: LIST
20990: LIST
20991: PUSH
20992: LD_VAR 0 12
20996: ARRAY
20997: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
20998: LD_VAR 0 18
21002: NOT
21003: IFFALSE 21023
21005: PUSH
21006: LD_INT 40
21008: PPUSH
21009: LD_VAR 0 16
21013: PPUSH
21014: CALL_OW 321
21018: PUSH
21019: LD_INT 2
21021: EQUAL
21022: AND
21023: IFFALSE 21059
21025: PUSH
21026: LD_INT 7
21028: PUSH
21029: LD_VAR 0 5
21033: IN
21034: IFTRUE 21046
21036: PUSH
21037: LD_INT 28
21039: PUSH
21040: LD_VAR 0 5
21044: IN
21045: OR
21046: IFTRUE 21058
21048: PUSH
21049: LD_INT 45
21051: PUSH
21052: LD_VAR 0 5
21056: IN
21057: OR
21058: AND
21059: IFFALSE 21313
// begin hex := GetHexInfo ( x , y ) ;
21061: LD_ADDR_VAR 0 4
21065: PUSH
21066: LD_VAR 0 10
21070: PPUSH
21071: LD_VAR 0 11
21075: PPUSH
21076: CALL_OW 546
21080: ST_TO_ADDR
// if hex [ 1 ] then
21081: LD_VAR 0 4
21085: PUSH
21086: LD_INT 1
21088: ARRAY
21089: IFFALSE 21093
// exit ;
21091: GO 21500
// height := hex [ 2 ] ;
21093: LD_ADDR_VAR 0 15
21097: PUSH
21098: LD_VAR 0 4
21102: PUSH
21103: LD_INT 2
21105: ARRAY
21106: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
21107: LD_ADDR_VAR 0 14
21111: PUSH
21112: LD_INT 0
21114: PUSH
21115: LD_INT 2
21117: PUSH
21118: LD_INT 3
21120: PUSH
21121: LD_INT 5
21123: PUSH
21124: EMPTY
21125: LIST
21126: LIST
21127: LIST
21128: LIST
21129: ST_TO_ADDR
// for i in tmp do
21130: LD_ADDR_VAR 0 8
21134: PUSH
21135: LD_VAR 0 14
21139: PUSH
21140: FOR_IN
21141: IFFALSE 21311
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
21143: LD_ADDR_VAR 0 9
21147: PUSH
21148: LD_VAR 0 10
21152: PPUSH
21153: LD_VAR 0 8
21157: PPUSH
21158: LD_INT 5
21160: PPUSH
21161: CALL_OW 272
21165: PUSH
21166: LD_VAR 0 11
21170: PPUSH
21171: LD_VAR 0 8
21175: PPUSH
21176: LD_INT 5
21178: PPUSH
21179: CALL_OW 273
21183: PUSH
21184: EMPTY
21185: LIST
21186: LIST
21187: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
21188: LD_VAR 0 9
21192: PUSH
21193: LD_INT 1
21195: ARRAY
21196: PPUSH
21197: LD_VAR 0 9
21201: PUSH
21202: LD_INT 2
21204: ARRAY
21205: PPUSH
21206: CALL_OW 488
21210: IFFALSE 21309
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
21212: LD_ADDR_VAR 0 4
21216: PUSH
21217: LD_VAR 0 9
21221: PUSH
21222: LD_INT 1
21224: ARRAY
21225: PPUSH
21226: LD_VAR 0 9
21230: PUSH
21231: LD_INT 2
21233: ARRAY
21234: PPUSH
21235: CALL_OW 546
21239: ST_TO_ADDR
// if hex [ 1 ] then
21240: LD_VAR 0 4
21244: PUSH
21245: LD_INT 1
21247: ARRAY
21248: IFFALSE 21252
// continue ;
21250: GO 21140
// h := hex [ 2 ] ;
21252: LD_ADDR_VAR 0 13
21256: PUSH
21257: LD_VAR 0 4
21261: PUSH
21262: LD_INT 2
21264: ARRAY
21265: ST_TO_ADDR
// if h + 7 < height then
21266: LD_VAR 0 13
21270: PUSH
21271: LD_INT 7
21273: PLUS
21274: PUSH
21275: LD_VAR 0 15
21279: LESS
21280: IFFALSE 21309
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
21282: LD_ADDR_VAR 0 18
21286: PUSH
21287: LD_INT 7
21289: PUSH
21290: LD_INT 28
21292: PUSH
21293: LD_INT 45
21295: PUSH
21296: EMPTY
21297: LIST
21298: LIST
21299: LIST
21300: PUSH
21301: LD_VAR 0 12
21305: ARRAY
21306: ST_TO_ADDR
// break ;
21307: GO 21311
// end ; end ; end ;
21309: GO 21140
21311: POP
21312: POP
// end ; if not weapon then
21313: LD_VAR 0 18
21317: NOT
21318: IFFALSE 21378
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
21320: LD_ADDR_VAR 0 5
21324: PUSH
21325: LD_VAR 0 5
21329: PUSH
21330: LD_INT 11
21332: PUSH
21333: LD_INT 30
21335: PUSH
21336: LD_INT 49
21338: PUSH
21339: EMPTY
21340: LIST
21341: LIST
21342: LIST
21343: DIFF
21344: ST_TO_ADDR
// if not list then
21345: LD_VAR 0 5
21349: NOT
21350: IFFALSE 21354
// exit ;
21352: GO 21500
// weapon := list [ rand ( 1 , list ) ] ;
21354: LD_ADDR_VAR 0 18
21358: PUSH
21359: LD_VAR 0 5
21363: PUSH
21364: LD_INT 1
21366: PPUSH
21367: LD_VAR 0 5
21371: PPUSH
21372: CALL_OW 12
21376: ARRAY
21377: ST_TO_ADDR
// end ; if weapon then
21378: LD_VAR 0 18
21382: IFFALSE 21500
// begin tmp := CostOfWeapon ( weapon ) ;
21384: LD_ADDR_VAR 0 14
21388: PUSH
21389: LD_VAR 0 18
21393: PPUSH
21394: CALL_OW 451
21398: ST_TO_ADDR
// j := GetBase ( tower ) ;
21399: LD_ADDR_VAR 0 9
21403: PUSH
21404: LD_VAR 0 1
21408: PPUSH
21409: CALL_OW 274
21413: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
21414: LD_VAR 0 9
21418: PPUSH
21419: LD_INT 1
21421: PPUSH
21422: CALL_OW 275
21426: PUSH
21427: LD_VAR 0 14
21431: PUSH
21432: LD_INT 1
21434: ARRAY
21435: GREATEREQUAL
21436: IFFALSE 21462
21438: PUSH
21439: LD_VAR 0 9
21443: PPUSH
21444: LD_INT 2
21446: PPUSH
21447: CALL_OW 275
21451: PUSH
21452: LD_VAR 0 14
21456: PUSH
21457: LD_INT 2
21459: ARRAY
21460: GREATEREQUAL
21461: AND
21462: IFFALSE 21488
21464: PUSH
21465: LD_VAR 0 9
21469: PPUSH
21470: LD_INT 3
21472: PPUSH
21473: CALL_OW 275
21477: PUSH
21478: LD_VAR 0 14
21482: PUSH
21483: LD_INT 3
21485: ARRAY
21486: GREATEREQUAL
21487: AND
21488: IFFALSE 21500
// result := weapon ;
21490: LD_ADDR_VAR 0 3
21494: PUSH
21495: LD_VAR 0 18
21499: ST_TO_ADDR
// end ; end ;
21500: LD_VAR 0 3
21504: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
21505: LD_INT 0
21507: PPUSH
21508: PPUSH
// result := true ;
21509: LD_ADDR_VAR 0 3
21513: PUSH
21514: LD_INT 1
21516: ST_TO_ADDR
// if array1 = array2 then
21517: LD_VAR 0 1
21521: PUSH
21522: LD_VAR 0 2
21526: EQUAL
21527: IFFALSE 21587
// begin for i = 1 to array1 do
21529: LD_ADDR_VAR 0 4
21533: PUSH
21534: DOUBLE
21535: LD_INT 1
21537: DEC
21538: ST_TO_ADDR
21539: LD_VAR 0 1
21543: PUSH
21544: FOR_TO
21545: IFFALSE 21583
// if array1 [ i ] <> array2 [ i ] then
21547: LD_VAR 0 1
21551: PUSH
21552: LD_VAR 0 4
21556: ARRAY
21557: PUSH
21558: LD_VAR 0 2
21562: PUSH
21563: LD_VAR 0 4
21567: ARRAY
21568: NONEQUAL
21569: IFFALSE 21581
// begin result := false ;
21571: LD_ADDR_VAR 0 3
21575: PUSH
21576: LD_INT 0
21578: ST_TO_ADDR
// break ;
21579: GO 21583
// end ;
21581: GO 21544
21583: POP
21584: POP
// end else
21585: GO 21595
// result := false ;
21587: LD_ADDR_VAR 0 3
21591: PUSH
21592: LD_INT 0
21594: ST_TO_ADDR
// end ;
21595: LD_VAR 0 3
21599: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
21600: LD_INT 0
21602: PPUSH
21603: PPUSH
// if not array1 or not array2 then
21604: LD_VAR 0 1
21608: NOT
21609: IFTRUE 21618
21611: PUSH
21612: LD_VAR 0 2
21616: NOT
21617: OR
21618: IFFALSE 21622
// exit ;
21620: GO 21686
// result := true ;
21622: LD_ADDR_VAR 0 3
21626: PUSH
21627: LD_INT 1
21629: ST_TO_ADDR
// for i = 1 to array1 do
21630: LD_ADDR_VAR 0 4
21634: PUSH
21635: DOUBLE
21636: LD_INT 1
21638: DEC
21639: ST_TO_ADDR
21640: LD_VAR 0 1
21644: PUSH
21645: FOR_TO
21646: IFFALSE 21684
// if array1 [ i ] <> array2 [ i ] then
21648: LD_VAR 0 1
21652: PUSH
21653: LD_VAR 0 4
21657: ARRAY
21658: PUSH
21659: LD_VAR 0 2
21663: PUSH
21664: LD_VAR 0 4
21668: ARRAY
21669: NONEQUAL
21670: IFFALSE 21682
// begin result := false ;
21672: LD_ADDR_VAR 0 3
21676: PUSH
21677: LD_INT 0
21679: ST_TO_ADDR
// break ;
21680: GO 21684
// end ;
21682: GO 21645
21684: POP
21685: POP
// end ;
21686: LD_VAR 0 3
21690: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
21691: LD_INT 0
21693: PPUSH
21694: PPUSH
21695: PPUSH
// pom := GetBase ( fac ) ;
21696: LD_ADDR_VAR 0 5
21700: PUSH
21701: LD_VAR 0 1
21705: PPUSH
21706: CALL_OW 274
21710: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
21711: LD_ADDR_VAR 0 4
21715: PUSH
21716: LD_VAR 0 2
21720: PUSH
21721: LD_INT 1
21723: ARRAY
21724: PPUSH
21725: LD_VAR 0 2
21729: PUSH
21730: LD_INT 2
21732: ARRAY
21733: PPUSH
21734: LD_VAR 0 2
21738: PUSH
21739: LD_INT 3
21741: ARRAY
21742: PPUSH
21743: LD_VAR 0 2
21747: PUSH
21748: LD_INT 4
21750: ARRAY
21751: PPUSH
21752: CALL_OW 449
21756: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
21757: LD_ADDR_VAR 0 3
21761: PUSH
21762: LD_VAR 0 5
21766: PPUSH
21767: LD_INT 1
21769: PPUSH
21770: CALL_OW 275
21774: PUSH
21775: LD_VAR 0 4
21779: PUSH
21780: LD_INT 1
21782: ARRAY
21783: GREATEREQUAL
21784: IFFALSE 21810
21786: PUSH
21787: LD_VAR 0 5
21791: PPUSH
21792: LD_INT 2
21794: PPUSH
21795: CALL_OW 275
21799: PUSH
21800: LD_VAR 0 4
21804: PUSH
21805: LD_INT 2
21807: ARRAY
21808: GREATEREQUAL
21809: AND
21810: IFFALSE 21836
21812: PUSH
21813: LD_VAR 0 5
21817: PPUSH
21818: LD_INT 3
21820: PPUSH
21821: CALL_OW 275
21825: PUSH
21826: LD_VAR 0 4
21830: PUSH
21831: LD_INT 3
21833: ARRAY
21834: GREATEREQUAL
21835: AND
21836: ST_TO_ADDR
// end ;
21837: LD_VAR 0 3
21841: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
21842: LD_INT 0
21844: PPUSH
21845: PPUSH
21846: PPUSH
21847: PPUSH
// pom := GetBase ( building ) ;
21848: LD_ADDR_VAR 0 3
21852: PUSH
21853: LD_VAR 0 1
21857: PPUSH
21858: CALL_OW 274
21862: ST_TO_ADDR
// if not pom then
21863: LD_VAR 0 3
21867: NOT
21868: IFFALSE 21872
// exit ;
21870: GO 22046
// btype := GetBType ( building ) ;
21872: LD_ADDR_VAR 0 5
21876: PUSH
21877: LD_VAR 0 1
21881: PPUSH
21882: CALL_OW 266
21886: ST_TO_ADDR
// if btype = b_armoury then
21887: LD_VAR 0 5
21891: PUSH
21892: LD_INT 4
21894: EQUAL
21895: IFFALSE 21905
// btype := b_barracks ;
21897: LD_ADDR_VAR 0 5
21901: PUSH
21902: LD_INT 5
21904: ST_TO_ADDR
// if btype = b_depot then
21905: LD_VAR 0 5
21909: PUSH
21910: LD_INT 0
21912: EQUAL
21913: IFFALSE 21923
// btype := b_warehouse ;
21915: LD_ADDR_VAR 0 5
21919: PUSH
21920: LD_INT 1
21922: ST_TO_ADDR
// if btype = b_workshop then
21923: LD_VAR 0 5
21927: PUSH
21928: LD_INT 2
21930: EQUAL
21931: IFFALSE 21941
// btype := b_factory ;
21933: LD_ADDR_VAR 0 5
21937: PUSH
21938: LD_INT 3
21940: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
21941: LD_ADDR_VAR 0 4
21945: PUSH
21946: LD_VAR 0 5
21950: PPUSH
21951: LD_VAR 0 1
21955: PPUSH
21956: CALL_OW 248
21960: PPUSH
21961: CALL_OW 450
21965: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
21966: LD_ADDR_VAR 0 2
21970: PUSH
21971: LD_VAR 0 3
21975: PPUSH
21976: LD_INT 1
21978: PPUSH
21979: CALL_OW 275
21983: PUSH
21984: LD_VAR 0 4
21988: PUSH
21989: LD_INT 1
21991: ARRAY
21992: GREATEREQUAL
21993: IFFALSE 22019
21995: PUSH
21996: LD_VAR 0 3
22000: PPUSH
22001: LD_INT 2
22003: PPUSH
22004: CALL_OW 275
22008: PUSH
22009: LD_VAR 0 4
22013: PUSH
22014: LD_INT 2
22016: ARRAY
22017: GREATEREQUAL
22018: AND
22019: IFFALSE 22045
22021: PUSH
22022: LD_VAR 0 3
22026: PPUSH
22027: LD_INT 3
22029: PPUSH
22030: CALL_OW 275
22034: PUSH
22035: LD_VAR 0 4
22039: PUSH
22040: LD_INT 3
22042: ARRAY
22043: GREATEREQUAL
22044: AND
22045: ST_TO_ADDR
// end ;
22046: LD_VAR 0 2
22050: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
22051: LD_INT 0
22053: PPUSH
22054: PPUSH
22055: PPUSH
// pom := GetBase ( building ) ;
22056: LD_ADDR_VAR 0 4
22060: PUSH
22061: LD_VAR 0 1
22065: PPUSH
22066: CALL_OW 274
22070: ST_TO_ADDR
// if not pom then
22071: LD_VAR 0 4
22075: NOT
22076: IFFALSE 22080
// exit ;
22078: GO 22185
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
22080: LD_ADDR_VAR 0 5
22084: PUSH
22085: LD_VAR 0 2
22089: PPUSH
22090: LD_VAR 0 1
22094: PPUSH
22095: CALL_OW 248
22099: PPUSH
22100: CALL_OW 450
22104: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
22105: LD_ADDR_VAR 0 3
22109: PUSH
22110: LD_VAR 0 4
22114: PPUSH
22115: LD_INT 1
22117: PPUSH
22118: CALL_OW 275
22122: PUSH
22123: LD_VAR 0 5
22127: PUSH
22128: LD_INT 1
22130: ARRAY
22131: GREATEREQUAL
22132: IFFALSE 22158
22134: PUSH
22135: LD_VAR 0 4
22139: PPUSH
22140: LD_INT 2
22142: PPUSH
22143: CALL_OW 275
22147: PUSH
22148: LD_VAR 0 5
22152: PUSH
22153: LD_INT 2
22155: ARRAY
22156: GREATEREQUAL
22157: AND
22158: IFFALSE 22184
22160: PUSH
22161: LD_VAR 0 4
22165: PPUSH
22166: LD_INT 3
22168: PPUSH
22169: CALL_OW 275
22173: PUSH
22174: LD_VAR 0 5
22178: PUSH
22179: LD_INT 3
22181: ARRAY
22182: GREATEREQUAL
22183: AND
22184: ST_TO_ADDR
// end ;
22185: LD_VAR 0 3
22189: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
22190: LD_INT 0
22192: PPUSH
22193: PPUSH
22194: PPUSH
22195: PPUSH
22196: PPUSH
22197: PPUSH
22198: PPUSH
22199: PPUSH
22200: PPUSH
22201: PPUSH
22202: PPUSH
// result := false ;
22203: LD_ADDR_VAR 0 8
22207: PUSH
22208: LD_INT 0
22210: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
22211: LD_VAR 0 5
22215: NOT
22216: IFTRUE 22225
22218: PUSH
22219: LD_VAR 0 1
22223: NOT
22224: OR
22225: IFTRUE 22234
22227: PUSH
22228: LD_VAR 0 2
22232: NOT
22233: OR
22234: IFTRUE 22243
22236: PUSH
22237: LD_VAR 0 3
22241: NOT
22242: OR
22243: IFFALSE 22247
// exit ;
22245: GO 23073
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
22247: LD_ADDR_VAR 0 14
22251: PUSH
22252: LD_VAR 0 1
22256: PPUSH
22257: LD_VAR 0 2
22261: PPUSH
22262: LD_VAR 0 3
22266: PPUSH
22267: LD_VAR 0 4
22271: PPUSH
22272: LD_VAR 0 5
22276: PUSH
22277: LD_INT 1
22279: ARRAY
22280: PPUSH
22281: CALL_OW 248
22285: PPUSH
22286: LD_INT 0
22288: PPUSH
22289: CALL 24354 0 6
22293: ST_TO_ADDR
// if not hexes then
22294: LD_VAR 0 14
22298: NOT
22299: IFFALSE 22303
// exit ;
22301: GO 23073
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
22303: LD_ADDR_VAR 0 17
22307: PUSH
22308: LD_VAR 0 5
22312: PPUSH
22313: LD_INT 22
22315: PUSH
22316: LD_VAR 0 13
22320: PPUSH
22321: CALL_OW 255
22325: PUSH
22326: EMPTY
22327: LIST
22328: LIST
22329: PUSH
22330: LD_INT 2
22332: PUSH
22333: LD_INT 30
22335: PUSH
22336: LD_INT 0
22338: PUSH
22339: EMPTY
22340: LIST
22341: LIST
22342: PUSH
22343: LD_INT 30
22345: PUSH
22346: LD_INT 1
22348: PUSH
22349: EMPTY
22350: LIST
22351: LIST
22352: PUSH
22353: EMPTY
22354: LIST
22355: LIST
22356: LIST
22357: PUSH
22358: EMPTY
22359: LIST
22360: LIST
22361: PPUSH
22362: CALL_OW 72
22366: ST_TO_ADDR
// for i = 1 to hexes do
22367: LD_ADDR_VAR 0 9
22371: PUSH
22372: DOUBLE
22373: LD_INT 1
22375: DEC
22376: ST_TO_ADDR
22377: LD_VAR 0 14
22381: PUSH
22382: FOR_TO
22383: IFFALSE 23071
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
22385: LD_ADDR_VAR 0 13
22389: PUSH
22390: LD_VAR 0 14
22394: PUSH
22395: LD_VAR 0 9
22399: ARRAY
22400: PUSH
22401: LD_INT 1
22403: ARRAY
22404: PPUSH
22405: LD_VAR 0 14
22409: PUSH
22410: LD_VAR 0 9
22414: ARRAY
22415: PUSH
22416: LD_INT 2
22418: ARRAY
22419: PPUSH
22420: CALL_OW 428
22424: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
22425: LD_VAR 0 14
22429: PUSH
22430: LD_VAR 0 9
22434: ARRAY
22435: PUSH
22436: LD_INT 1
22438: ARRAY
22439: PPUSH
22440: LD_VAR 0 14
22444: PUSH
22445: LD_VAR 0 9
22449: ARRAY
22450: PUSH
22451: LD_INT 2
22453: ARRAY
22454: PPUSH
22455: CALL_OW 351
22459: IFTRUE 22498
22461: PUSH
22462: LD_VAR 0 14
22466: PUSH
22467: LD_VAR 0 9
22471: ARRAY
22472: PUSH
22473: LD_INT 1
22475: ARRAY
22476: PPUSH
22477: LD_VAR 0 14
22481: PUSH
22482: LD_VAR 0 9
22486: ARRAY
22487: PUSH
22488: LD_INT 2
22490: ARRAY
22491: PPUSH
22492: CALL_OW 488
22496: NOT
22497: OR
22498: IFTRUE 22515
22500: PUSH
22501: LD_VAR 0 13
22505: PPUSH
22506: CALL_OW 247
22510: PUSH
22511: LD_INT 3
22513: EQUAL
22514: OR
22515: IFFALSE 22521
// exit ;
22517: POP
22518: POP
22519: GO 23073
// if not tmp then
22521: LD_VAR 0 13
22525: NOT
22526: IFFALSE 22530
// continue ;
22528: GO 22382
// result := true ;
22530: LD_ADDR_VAR 0 8
22534: PUSH
22535: LD_INT 1
22537: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
22538: LD_VAR 0 6
22542: IFFALSE 22559
22544: PUSH
22545: LD_VAR 0 13
22549: PPUSH
22550: CALL_OW 247
22554: PUSH
22555: LD_INT 2
22557: EQUAL
22558: AND
22559: IFFALSE 22576
22561: PUSH
22562: LD_VAR 0 13
22566: PPUSH
22567: CALL_OW 263
22571: PUSH
22572: LD_INT 1
22574: EQUAL
22575: AND
22576: IFFALSE 22740
// begin if IsDrivenBy ( tmp ) then
22578: LD_VAR 0 13
22582: PPUSH
22583: CALL_OW 311
22587: IFFALSE 22591
// continue ;
22589: GO 22382
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
22591: LD_VAR 0 6
22595: PPUSH
22596: LD_INT 3
22598: PUSH
22599: LD_INT 60
22601: PUSH
22602: EMPTY
22603: LIST
22604: PUSH
22605: EMPTY
22606: LIST
22607: LIST
22608: PUSH
22609: LD_INT 3
22611: PUSH
22612: LD_INT 55
22614: PUSH
22615: EMPTY
22616: LIST
22617: PUSH
22618: EMPTY
22619: LIST
22620: LIST
22621: PUSH
22622: EMPTY
22623: LIST
22624: LIST
22625: PPUSH
22626: CALL_OW 72
22630: IFFALSE 22738
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
22632: LD_ADDR_VAR 0 18
22636: PUSH
22637: LD_VAR 0 6
22641: PPUSH
22642: LD_INT 3
22644: PUSH
22645: LD_INT 60
22647: PUSH
22648: EMPTY
22649: LIST
22650: PUSH
22651: EMPTY
22652: LIST
22653: LIST
22654: PUSH
22655: LD_INT 3
22657: PUSH
22658: LD_INT 55
22660: PUSH
22661: EMPTY
22662: LIST
22663: PUSH
22664: EMPTY
22665: LIST
22666: LIST
22667: PUSH
22668: EMPTY
22669: LIST
22670: LIST
22671: PPUSH
22672: CALL_OW 72
22676: PUSH
22677: LD_INT 1
22679: ARRAY
22680: ST_TO_ADDR
// if IsInUnit ( driver ) then
22681: LD_VAR 0 18
22685: PPUSH
22686: CALL_OW 310
22690: IFFALSE 22701
// ComExit ( driver ) ;
22692: LD_VAR 0 18
22696: PPUSH
22697: CALL 48344 0 1
// AddComEnterUnit ( driver , tmp ) ;
22701: LD_VAR 0 18
22705: PPUSH
22706: LD_VAR 0 13
22710: PPUSH
22711: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
22715: LD_VAR 0 18
22719: PPUSH
22720: LD_VAR 0 7
22724: PPUSH
22725: CALL_OW 173
// AddComExitVehicle ( driver ) ;
22729: LD_VAR 0 18
22733: PPUSH
22734: CALL_OW 181
// end ; continue ;
22738: GO 22382
// end ; if not cleaners or not tmp in cleaners then
22740: LD_VAR 0 6
22744: NOT
22745: IFTRUE 22760
22747: PUSH
22748: LD_VAR 0 13
22752: PUSH
22753: LD_VAR 0 6
22757: IN
22758: NOT
22759: OR
22760: IFFALSE 23069
// begin if dep then
22762: LD_VAR 0 17
22766: IFFALSE 22902
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
22768: LD_ADDR_VAR 0 16
22772: PUSH
22773: LD_VAR 0 17
22777: PUSH
22778: LD_INT 1
22780: ARRAY
22781: PPUSH
22782: CALL_OW 250
22786: PPUSH
22787: LD_VAR 0 17
22791: PUSH
22792: LD_INT 1
22794: ARRAY
22795: PPUSH
22796: CALL_OW 254
22800: PPUSH
22801: LD_INT 5
22803: PPUSH
22804: CALL_OW 272
22808: PUSH
22809: LD_VAR 0 17
22813: PUSH
22814: LD_INT 1
22816: ARRAY
22817: PPUSH
22818: CALL_OW 251
22822: PPUSH
22823: LD_VAR 0 17
22827: PUSH
22828: LD_INT 1
22830: ARRAY
22831: PPUSH
22832: CALL_OW 254
22836: PPUSH
22837: LD_INT 5
22839: PPUSH
22840: CALL_OW 273
22844: PUSH
22845: EMPTY
22846: LIST
22847: LIST
22848: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
22849: LD_VAR 0 16
22853: PUSH
22854: LD_INT 1
22856: ARRAY
22857: PPUSH
22858: LD_VAR 0 16
22862: PUSH
22863: LD_INT 2
22865: ARRAY
22866: PPUSH
22867: CALL_OW 488
22871: IFFALSE 22902
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
22873: LD_VAR 0 13
22877: PPUSH
22878: LD_VAR 0 16
22882: PUSH
22883: LD_INT 1
22885: ARRAY
22886: PPUSH
22887: LD_VAR 0 16
22891: PUSH
22892: LD_INT 2
22894: ARRAY
22895: PPUSH
22896: CALL_OW 111
// continue ;
22900: GO 22382
// end ; end ; r := GetDir ( tmp ) ;
22902: LD_ADDR_VAR 0 15
22906: PUSH
22907: LD_VAR 0 13
22911: PPUSH
22912: CALL_OW 254
22916: ST_TO_ADDR
// if r = 5 then
22917: LD_VAR 0 15
22921: PUSH
22922: LD_INT 5
22924: EQUAL
22925: IFFALSE 22935
// r := 0 ;
22927: LD_ADDR_VAR 0 15
22931: PUSH
22932: LD_INT 0
22934: ST_TO_ADDR
// for j = r to 5 do
22935: LD_ADDR_VAR 0 10
22939: PUSH
22940: DOUBLE
22941: LD_VAR 0 15
22945: DEC
22946: ST_TO_ADDR
22947: LD_INT 5
22949: PUSH
22950: FOR_TO
22951: IFFALSE 23067
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
22953: LD_ADDR_VAR 0 11
22957: PUSH
22958: LD_VAR 0 13
22962: PPUSH
22963: CALL_OW 250
22967: PPUSH
22968: LD_VAR 0 10
22972: PPUSH
22973: LD_INT 2
22975: PPUSH
22976: CALL_OW 272
22980: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
22981: LD_ADDR_VAR 0 12
22985: PUSH
22986: LD_VAR 0 13
22990: PPUSH
22991: CALL_OW 251
22995: PPUSH
22996: LD_VAR 0 10
23000: PPUSH
23001: LD_INT 2
23003: PPUSH
23004: CALL_OW 273
23008: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
23009: LD_VAR 0 11
23013: PPUSH
23014: LD_VAR 0 12
23018: PPUSH
23019: CALL_OW 488
23023: IFFALSE 23042
23025: PUSH
23026: LD_VAR 0 11
23030: PPUSH
23031: LD_VAR 0 12
23035: PPUSH
23036: CALL_OW 428
23040: NOT
23041: AND
23042: IFFALSE 23065
// begin ComMoveXY ( tmp , _x , _y ) ;
23044: LD_VAR 0 13
23048: PPUSH
23049: LD_VAR 0 11
23053: PPUSH
23054: LD_VAR 0 12
23058: PPUSH
23059: CALL_OW 111
// break ;
23063: GO 23067
// end ; end ;
23065: GO 22950
23067: POP
23068: POP
// end ; end ;
23069: GO 22382
23071: POP
23072: POP
// end ;
23073: LD_VAR 0 8
23077: RET
// export function BuildingTechInvented ( side , btype ) ; begin
23078: LD_INT 0
23080: PPUSH
// result := true ;
23081: LD_ADDR_VAR 0 3
23085: PUSH
23086: LD_INT 1
23088: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
23089: LD_VAR 0 2
23093: PUSH
23094: LD_INT 24
23096: DOUBLE
23097: EQUAL
23098: IFTRUE 23108
23100: LD_INT 33
23102: DOUBLE
23103: EQUAL
23104: IFTRUE 23108
23106: GO 23133
23108: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
23109: LD_ADDR_VAR 0 3
23113: PUSH
23114: LD_INT 32
23116: PPUSH
23117: LD_VAR 0 1
23121: PPUSH
23122: CALL_OW 321
23126: PUSH
23127: LD_INT 2
23129: EQUAL
23130: ST_TO_ADDR
23131: GO 23449
23133: LD_INT 20
23135: DOUBLE
23136: EQUAL
23137: IFTRUE 23141
23139: GO 23166
23141: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
23142: LD_ADDR_VAR 0 3
23146: PUSH
23147: LD_INT 6
23149: PPUSH
23150: LD_VAR 0 1
23154: PPUSH
23155: CALL_OW 321
23159: PUSH
23160: LD_INT 2
23162: EQUAL
23163: ST_TO_ADDR
23164: GO 23449
23166: LD_INT 22
23168: DOUBLE
23169: EQUAL
23170: IFTRUE 23180
23172: LD_INT 36
23174: DOUBLE
23175: EQUAL
23176: IFTRUE 23180
23178: GO 23205
23180: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
23181: LD_ADDR_VAR 0 3
23185: PUSH
23186: LD_INT 15
23188: PPUSH
23189: LD_VAR 0 1
23193: PPUSH
23194: CALL_OW 321
23198: PUSH
23199: LD_INT 2
23201: EQUAL
23202: ST_TO_ADDR
23203: GO 23449
23205: LD_INT 30
23207: DOUBLE
23208: EQUAL
23209: IFTRUE 23213
23211: GO 23238
23213: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
23214: LD_ADDR_VAR 0 3
23218: PUSH
23219: LD_INT 20
23221: PPUSH
23222: LD_VAR 0 1
23226: PPUSH
23227: CALL_OW 321
23231: PUSH
23232: LD_INT 2
23234: EQUAL
23235: ST_TO_ADDR
23236: GO 23449
23238: LD_INT 28
23240: DOUBLE
23241: EQUAL
23242: IFTRUE 23252
23244: LD_INT 21
23246: DOUBLE
23247: EQUAL
23248: IFTRUE 23252
23250: GO 23277
23252: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
23253: LD_ADDR_VAR 0 3
23257: PUSH
23258: LD_INT 21
23260: PPUSH
23261: LD_VAR 0 1
23265: PPUSH
23266: CALL_OW 321
23270: PUSH
23271: LD_INT 2
23273: EQUAL
23274: ST_TO_ADDR
23275: GO 23449
23277: LD_INT 16
23279: DOUBLE
23280: EQUAL
23281: IFTRUE 23285
23283: GO 23310
23285: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
23286: LD_ADDR_VAR 0 3
23290: PUSH
23291: LD_INT 84
23293: PPUSH
23294: LD_VAR 0 1
23298: PPUSH
23299: CALL_OW 321
23303: PUSH
23304: LD_INT 2
23306: EQUAL
23307: ST_TO_ADDR
23308: GO 23449
23310: LD_INT 19
23312: DOUBLE
23313: EQUAL
23314: IFTRUE 23324
23316: LD_INT 23
23318: DOUBLE
23319: EQUAL
23320: IFTRUE 23324
23322: GO 23349
23324: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
23325: LD_ADDR_VAR 0 3
23329: PUSH
23330: LD_INT 83
23332: PPUSH
23333: LD_VAR 0 1
23337: PPUSH
23338: CALL_OW 321
23342: PUSH
23343: LD_INT 2
23345: EQUAL
23346: ST_TO_ADDR
23347: GO 23449
23349: LD_INT 17
23351: DOUBLE
23352: EQUAL
23353: IFTRUE 23357
23355: GO 23382
23357: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
23358: LD_ADDR_VAR 0 3
23362: PUSH
23363: LD_INT 39
23365: PPUSH
23366: LD_VAR 0 1
23370: PPUSH
23371: CALL_OW 321
23375: PUSH
23376: LD_INT 2
23378: EQUAL
23379: ST_TO_ADDR
23380: GO 23449
23382: LD_INT 18
23384: DOUBLE
23385: EQUAL
23386: IFTRUE 23390
23388: GO 23415
23390: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
23391: LD_ADDR_VAR 0 3
23395: PUSH
23396: LD_INT 40
23398: PPUSH
23399: LD_VAR 0 1
23403: PPUSH
23404: CALL_OW 321
23408: PUSH
23409: LD_INT 2
23411: EQUAL
23412: ST_TO_ADDR
23413: GO 23449
23415: LD_INT 27
23417: DOUBLE
23418: EQUAL
23419: IFTRUE 23423
23421: GO 23448
23423: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
23424: LD_ADDR_VAR 0 3
23428: PUSH
23429: LD_INT 35
23431: PPUSH
23432: LD_VAR 0 1
23436: PPUSH
23437: CALL_OW 321
23441: PUSH
23442: LD_INT 2
23444: EQUAL
23445: ST_TO_ADDR
23446: GO 23449
23448: POP
// end ;
23449: LD_VAR 0 3
23453: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
23454: LD_INT 0
23456: PPUSH
23457: PPUSH
23458: PPUSH
23459: PPUSH
23460: PPUSH
23461: PPUSH
23462: PPUSH
23463: PPUSH
23464: PPUSH
23465: PPUSH
23466: PPUSH
// result := false ;
23467: LD_ADDR_VAR 0 6
23471: PUSH
23472: LD_INT 0
23474: ST_TO_ADDR
// if btype = b_depot then
23475: LD_VAR 0 2
23479: PUSH
23480: LD_INT 0
23482: EQUAL
23483: IFFALSE 23495
// begin result := true ;
23485: LD_ADDR_VAR 0 6
23489: PUSH
23490: LD_INT 1
23492: ST_TO_ADDR
// exit ;
23493: GO 24349
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
23495: LD_VAR 0 1
23499: NOT
23500: IFTRUE 23525
23502: PUSH
23503: LD_VAR 0 1
23507: PPUSH
23508: CALL_OW 266
23512: PUSH
23513: LD_INT 0
23515: PUSH
23516: LD_INT 1
23518: PUSH
23519: EMPTY
23520: LIST
23521: LIST
23522: IN
23523: NOT
23524: OR
23525: IFTRUE 23534
23527: PUSH
23528: LD_VAR 0 2
23532: NOT
23533: OR
23534: IFTRUE 23570
23536: PUSH
23537: LD_VAR 0 5
23541: PUSH
23542: LD_INT 0
23544: PUSH
23545: LD_INT 1
23547: PUSH
23548: LD_INT 2
23550: PUSH
23551: LD_INT 3
23553: PUSH
23554: LD_INT 4
23556: PUSH
23557: LD_INT 5
23559: PUSH
23560: EMPTY
23561: LIST
23562: LIST
23563: LIST
23564: LIST
23565: LIST
23566: LIST
23567: IN
23568: NOT
23569: OR
23570: IFTRUE 23589
23572: PUSH
23573: LD_VAR 0 3
23577: PPUSH
23578: LD_VAR 0 4
23582: PPUSH
23583: CALL_OW 488
23587: NOT
23588: OR
23589: IFFALSE 23593
// exit ;
23591: GO 24349
// side := GetSide ( depot ) ;
23593: LD_ADDR_VAR 0 9
23597: PUSH
23598: LD_VAR 0 1
23602: PPUSH
23603: CALL_OW 255
23607: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
23608: LD_VAR 0 9
23612: PPUSH
23613: LD_VAR 0 2
23617: PPUSH
23618: CALL 23078 0 2
23622: NOT
23623: IFFALSE 23627
// exit ;
23625: GO 24349
// pom := GetBase ( depot ) ;
23627: LD_ADDR_VAR 0 10
23631: PUSH
23632: LD_VAR 0 1
23636: PPUSH
23637: CALL_OW 274
23641: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
23642: LD_ADDR_VAR 0 11
23646: PUSH
23647: LD_VAR 0 2
23651: PPUSH
23652: LD_VAR 0 1
23656: PPUSH
23657: CALL_OW 248
23661: PPUSH
23662: CALL_OW 450
23666: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
23667: LD_VAR 0 10
23671: PPUSH
23672: LD_INT 1
23674: PPUSH
23675: CALL_OW 275
23679: PUSH
23680: LD_VAR 0 11
23684: PUSH
23685: LD_INT 1
23687: ARRAY
23688: GREATEREQUAL
23689: IFFALSE 23715
23691: PUSH
23692: LD_VAR 0 10
23696: PPUSH
23697: LD_INT 2
23699: PPUSH
23700: CALL_OW 275
23704: PUSH
23705: LD_VAR 0 11
23709: PUSH
23710: LD_INT 2
23712: ARRAY
23713: GREATEREQUAL
23714: AND
23715: IFFALSE 23741
23717: PUSH
23718: LD_VAR 0 10
23722: PPUSH
23723: LD_INT 3
23725: PPUSH
23726: CALL_OW 275
23730: PUSH
23731: LD_VAR 0 11
23735: PUSH
23736: LD_INT 3
23738: ARRAY
23739: GREATEREQUAL
23740: AND
23741: NOT
23742: IFFALSE 23746
// exit ;
23744: GO 24349
// if GetBType ( depot ) = b_depot then
23746: LD_VAR 0 1
23750: PPUSH
23751: CALL_OW 266
23755: PUSH
23756: LD_INT 0
23758: EQUAL
23759: IFFALSE 23771
// dist := 28 else
23761: LD_ADDR_VAR 0 14
23765: PUSH
23766: LD_INT 28
23768: ST_TO_ADDR
23769: GO 23779
// dist := 36 ;
23771: LD_ADDR_VAR 0 14
23775: PUSH
23776: LD_INT 36
23778: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
23779: LD_VAR 0 1
23783: PPUSH
23784: LD_VAR 0 3
23788: PPUSH
23789: LD_VAR 0 4
23793: PPUSH
23794: CALL_OW 297
23798: PUSH
23799: LD_VAR 0 14
23803: GREATER
23804: IFFALSE 23808
// exit ;
23806: GO 24349
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
23808: LD_ADDR_VAR 0 12
23812: PUSH
23813: LD_VAR 0 2
23817: PPUSH
23818: LD_VAR 0 3
23822: PPUSH
23823: LD_VAR 0 4
23827: PPUSH
23828: LD_VAR 0 5
23832: PPUSH
23833: LD_VAR 0 1
23837: PPUSH
23838: CALL_OW 248
23842: PPUSH
23843: LD_INT 0
23845: PPUSH
23846: CALL 24354 0 6
23850: ST_TO_ADDR
// if not hexes then
23851: LD_VAR 0 12
23855: NOT
23856: IFFALSE 23860
// exit ;
23858: GO 24349
// hex := GetHexInfo ( x , y ) ;
23860: LD_ADDR_VAR 0 15
23864: PUSH
23865: LD_VAR 0 3
23869: PPUSH
23870: LD_VAR 0 4
23874: PPUSH
23875: CALL_OW 546
23879: ST_TO_ADDR
// if hex [ 1 ] then
23880: LD_VAR 0 15
23884: PUSH
23885: LD_INT 1
23887: ARRAY
23888: IFFALSE 23892
// exit ;
23890: GO 24349
// height := hex [ 2 ] ;
23892: LD_ADDR_VAR 0 13
23896: PUSH
23897: LD_VAR 0 15
23901: PUSH
23902: LD_INT 2
23904: ARRAY
23905: ST_TO_ADDR
// for i = 1 to hexes do
23906: LD_ADDR_VAR 0 7
23910: PUSH
23911: DOUBLE
23912: LD_INT 1
23914: DEC
23915: ST_TO_ADDR
23916: LD_VAR 0 12
23920: PUSH
23921: FOR_TO
23922: IFFALSE 24266
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
23924: LD_VAR 0 12
23928: PUSH
23929: LD_VAR 0 7
23933: ARRAY
23934: PUSH
23935: LD_INT 1
23937: ARRAY
23938: PPUSH
23939: LD_VAR 0 12
23943: PUSH
23944: LD_VAR 0 7
23948: ARRAY
23949: PUSH
23950: LD_INT 2
23952: ARRAY
23953: PPUSH
23954: CALL_OW 488
23958: NOT
23959: IFTRUE 24001
23961: PUSH
23962: LD_VAR 0 12
23966: PUSH
23967: LD_VAR 0 7
23971: ARRAY
23972: PUSH
23973: LD_INT 1
23975: ARRAY
23976: PPUSH
23977: LD_VAR 0 12
23981: PUSH
23982: LD_VAR 0 7
23986: ARRAY
23987: PUSH
23988: LD_INT 2
23990: ARRAY
23991: PPUSH
23992: CALL_OW 428
23996: PUSH
23997: LD_INT 0
23999: GREATER
24000: OR
24001: IFTRUE 24039
24003: PUSH
24004: LD_VAR 0 12
24008: PUSH
24009: LD_VAR 0 7
24013: ARRAY
24014: PUSH
24015: LD_INT 1
24017: ARRAY
24018: PPUSH
24019: LD_VAR 0 12
24023: PUSH
24024: LD_VAR 0 7
24028: ARRAY
24029: PUSH
24030: LD_INT 2
24032: ARRAY
24033: PPUSH
24034: CALL_OW 351
24038: OR
24039: IFFALSE 24045
// exit ;
24041: POP
24042: POP
24043: GO 24349
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
24045: LD_ADDR_VAR 0 8
24049: PUSH
24050: LD_VAR 0 12
24054: PUSH
24055: LD_VAR 0 7
24059: ARRAY
24060: PUSH
24061: LD_INT 1
24063: ARRAY
24064: PPUSH
24065: LD_VAR 0 12
24069: PUSH
24070: LD_VAR 0 7
24074: ARRAY
24075: PUSH
24076: LD_INT 2
24078: ARRAY
24079: PPUSH
24080: CALL_OW 546
24084: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
24085: LD_VAR 0 8
24089: PUSH
24090: LD_INT 1
24092: ARRAY
24093: IFTRUE 24115
24095: PUSH
24096: LD_VAR 0 8
24100: PUSH
24101: LD_INT 2
24103: ARRAY
24104: PUSH
24105: LD_VAR 0 13
24109: PUSH
24110: LD_INT 2
24112: PLUS
24113: GREATER
24114: OR
24115: IFTRUE 24137
24117: PUSH
24118: LD_VAR 0 8
24122: PUSH
24123: LD_INT 2
24125: ARRAY
24126: PUSH
24127: LD_VAR 0 13
24131: PUSH
24132: LD_INT 2
24134: MINUS
24135: LESS
24136: OR
24137: IFTRUE 24205
24139: PUSH
24140: LD_VAR 0 8
24144: PUSH
24145: LD_INT 3
24147: ARRAY
24148: PUSH
24149: LD_INT 0
24151: PUSH
24152: LD_INT 8
24154: PUSH
24155: LD_INT 9
24157: PUSH
24158: LD_INT 10
24160: PUSH
24161: LD_INT 11
24163: PUSH
24164: LD_INT 12
24166: PUSH
24167: LD_INT 13
24169: PUSH
24170: LD_INT 16
24172: PUSH
24173: LD_INT 17
24175: PUSH
24176: LD_INT 18
24178: PUSH
24179: LD_INT 19
24181: PUSH
24182: LD_INT 20
24184: PUSH
24185: LD_INT 21
24187: PUSH
24188: EMPTY
24189: LIST
24190: LIST
24191: LIST
24192: LIST
24193: LIST
24194: LIST
24195: LIST
24196: LIST
24197: LIST
24198: LIST
24199: LIST
24200: LIST
24201: LIST
24202: IN
24203: NOT
24204: OR
24205: IFTRUE 24218
24207: PUSH
24208: LD_VAR 0 8
24212: PUSH
24213: LD_INT 5
24215: ARRAY
24216: NOT
24217: OR
24218: IFTRUE 24258
24220: PUSH
24221: LD_VAR 0 8
24225: PUSH
24226: LD_INT 6
24228: ARRAY
24229: PUSH
24230: LD_INT 1
24232: PUSH
24233: LD_INT 2
24235: PUSH
24236: LD_INT 7
24238: PUSH
24239: LD_INT 9
24241: PUSH
24242: LD_INT 10
24244: PUSH
24245: LD_INT 11
24247: PUSH
24248: EMPTY
24249: LIST
24250: LIST
24251: LIST
24252: LIST
24253: LIST
24254: LIST
24255: IN
24256: NOT
24257: OR
24258: IFFALSE 24264
// exit ;
24260: POP
24261: POP
24262: GO 24349
// end ;
24264: GO 23921
24266: POP
24267: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
24268: LD_VAR 0 9
24272: PPUSH
24273: LD_VAR 0 3
24277: PPUSH
24278: LD_VAR 0 4
24282: PPUSH
24283: LD_INT 20
24285: PPUSH
24286: CALL 16168 0 4
24290: PUSH
24291: LD_INT 4
24293: ARRAY
24294: IFFALSE 24298
// exit ;
24296: GO 24349
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
24298: LD_VAR 0 2
24302: PUSH
24303: LD_INT 29
24305: PUSH
24306: LD_INT 30
24308: PUSH
24309: EMPTY
24310: LIST
24311: LIST
24312: IN
24313: IFFALSE 24337
24315: PUSH
24316: LD_VAR 0 3
24320: PPUSH
24321: LD_VAR 0 4
24325: PPUSH
24326: LD_VAR 0 9
24330: PPUSH
24331: CALL_OW 440
24335: NOT
24336: AND
24337: IFFALSE 24341
// exit ;
24339: GO 24349
// result := true ;
24341: LD_ADDR_VAR 0 6
24345: PUSH
24346: LD_INT 1
24348: ST_TO_ADDR
// end ;
24349: LD_VAR 0 6
24353: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
24354: LD_INT 0
24356: PPUSH
24357: PPUSH
24358: PPUSH
24359: PPUSH
24360: PPUSH
24361: PPUSH
24362: PPUSH
24363: PPUSH
24364: PPUSH
24365: PPUSH
24366: PPUSH
24367: PPUSH
24368: PPUSH
24369: PPUSH
24370: PPUSH
24371: PPUSH
24372: PPUSH
24373: PPUSH
24374: PPUSH
24375: PPUSH
24376: PPUSH
24377: PPUSH
24378: PPUSH
24379: PPUSH
24380: PPUSH
24381: PPUSH
24382: PPUSH
24383: PPUSH
24384: PPUSH
24385: PPUSH
24386: PPUSH
24387: PPUSH
24388: PPUSH
24389: PPUSH
24390: PPUSH
24391: PPUSH
24392: PPUSH
24393: PPUSH
24394: PPUSH
24395: PPUSH
24396: PPUSH
24397: PPUSH
24398: PPUSH
24399: PPUSH
24400: PPUSH
24401: PPUSH
24402: PPUSH
24403: PPUSH
24404: PPUSH
24405: PPUSH
24406: PPUSH
24407: PPUSH
24408: PPUSH
24409: PPUSH
24410: PPUSH
24411: PPUSH
24412: PPUSH
24413: PPUSH
// result = [ ] ;
24414: LD_ADDR_VAR 0 7
24418: PUSH
24419: EMPTY
24420: ST_TO_ADDR
// temp_list = [ ] ;
24421: LD_ADDR_VAR 0 9
24425: PUSH
24426: EMPTY
24427: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
24428: LD_VAR 0 4
24432: PUSH
24433: LD_INT 0
24435: PUSH
24436: LD_INT 1
24438: PUSH
24439: LD_INT 2
24441: PUSH
24442: LD_INT 3
24444: PUSH
24445: LD_INT 4
24447: PUSH
24448: LD_INT 5
24450: PUSH
24451: EMPTY
24452: LIST
24453: LIST
24454: LIST
24455: LIST
24456: LIST
24457: LIST
24458: IN
24459: NOT
24460: IFTRUE 24503
24462: PUSH
24463: LD_VAR 0 1
24467: PUSH
24468: LD_INT 0
24470: PUSH
24471: LD_INT 1
24473: PUSH
24474: EMPTY
24475: LIST
24476: LIST
24477: IN
24478: IFFALSE 24502
24480: PUSH
24481: LD_VAR 0 5
24485: PUSH
24486: LD_INT 1
24488: PUSH
24489: LD_INT 2
24491: PUSH
24492: LD_INT 3
24494: PUSH
24495: EMPTY
24496: LIST
24497: LIST
24498: LIST
24499: IN
24500: NOT
24501: AND
24502: OR
24503: IFFALSE 24507
// exit ;
24505: GO 42906
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
24507: LD_VAR 0 1
24511: PUSH
24512: LD_INT 6
24514: PUSH
24515: LD_INT 7
24517: PUSH
24518: LD_INT 8
24520: PUSH
24521: LD_INT 13
24523: PUSH
24524: LD_INT 12
24526: PUSH
24527: LD_INT 15
24529: PUSH
24530: LD_INT 11
24532: PUSH
24533: LD_INT 14
24535: PUSH
24536: LD_INT 10
24538: PUSH
24539: EMPTY
24540: LIST
24541: LIST
24542: LIST
24543: LIST
24544: LIST
24545: LIST
24546: LIST
24547: LIST
24548: LIST
24549: IN
24550: IFFALSE 24560
// btype = b_lab ;
24552: LD_ADDR_VAR 0 1
24556: PUSH
24557: LD_INT 6
24559: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
24560: LD_VAR 0 6
24564: PUSH
24565: LD_INT 0
24567: PUSH
24568: LD_INT 1
24570: PUSH
24571: LD_INT 2
24573: PUSH
24574: EMPTY
24575: LIST
24576: LIST
24577: LIST
24578: IN
24579: NOT
24580: IFTRUE 24648
24582: PUSH
24583: LD_VAR 0 1
24587: PUSH
24588: LD_INT 0
24590: PUSH
24591: LD_INT 1
24593: PUSH
24594: LD_INT 2
24596: PUSH
24597: LD_INT 3
24599: PUSH
24600: LD_INT 6
24602: PUSH
24603: LD_INT 36
24605: PUSH
24606: LD_INT 4
24608: PUSH
24609: LD_INT 5
24611: PUSH
24612: LD_INT 31
24614: PUSH
24615: LD_INT 32
24617: PUSH
24618: LD_INT 33
24620: PUSH
24621: EMPTY
24622: LIST
24623: LIST
24624: LIST
24625: LIST
24626: LIST
24627: LIST
24628: LIST
24629: LIST
24630: LIST
24631: LIST
24632: LIST
24633: IN
24634: NOT
24635: IFFALSE 24647
24637: PUSH
24638: LD_VAR 0 6
24642: PUSH
24643: LD_INT 1
24645: EQUAL
24646: AND
24647: OR
24648: IFTRUE 24680
24650: PUSH
24651: LD_VAR 0 1
24655: PUSH
24656: LD_INT 2
24658: PUSH
24659: LD_INT 3
24661: PUSH
24662: EMPTY
24663: LIST
24664: LIST
24665: IN
24666: NOT
24667: IFFALSE 24679
24669: PUSH
24670: LD_VAR 0 6
24674: PUSH
24675: LD_INT 2
24677: EQUAL
24678: AND
24679: OR
24680: IFFALSE 24690
// mode = 0 ;
24682: LD_ADDR_VAR 0 6
24686: PUSH
24687: LD_INT 0
24689: ST_TO_ADDR
// case mode of 0 :
24690: LD_VAR 0 6
24694: PUSH
24695: LD_INT 0
24697: DOUBLE
24698: EQUAL
24699: IFTRUE 24703
24701: GO 36156
24703: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
24704: LD_ADDR_VAR 0 11
24708: PUSH
24709: LD_INT 0
24711: PUSH
24712: LD_INT 0
24714: PUSH
24715: EMPTY
24716: LIST
24717: LIST
24718: PUSH
24719: LD_INT 0
24721: PUSH
24722: LD_INT 1
24724: NEG
24725: PUSH
24726: EMPTY
24727: LIST
24728: LIST
24729: PUSH
24730: LD_INT 1
24732: PUSH
24733: LD_INT 0
24735: PUSH
24736: EMPTY
24737: LIST
24738: LIST
24739: PUSH
24740: LD_INT 1
24742: PUSH
24743: LD_INT 1
24745: PUSH
24746: EMPTY
24747: LIST
24748: LIST
24749: PUSH
24750: LD_INT 0
24752: PUSH
24753: LD_INT 1
24755: PUSH
24756: EMPTY
24757: LIST
24758: LIST
24759: PUSH
24760: LD_INT 1
24762: NEG
24763: PUSH
24764: LD_INT 0
24766: PUSH
24767: EMPTY
24768: LIST
24769: LIST
24770: PUSH
24771: LD_INT 1
24773: NEG
24774: PUSH
24775: LD_INT 1
24777: NEG
24778: PUSH
24779: EMPTY
24780: LIST
24781: LIST
24782: PUSH
24783: LD_INT 1
24785: NEG
24786: PUSH
24787: LD_INT 2
24789: NEG
24790: PUSH
24791: EMPTY
24792: LIST
24793: LIST
24794: PUSH
24795: LD_INT 0
24797: PUSH
24798: LD_INT 2
24800: NEG
24801: PUSH
24802: EMPTY
24803: LIST
24804: LIST
24805: PUSH
24806: LD_INT 1
24808: PUSH
24809: LD_INT 1
24811: NEG
24812: PUSH
24813: EMPTY
24814: LIST
24815: LIST
24816: PUSH
24817: LD_INT 1
24819: PUSH
24820: LD_INT 2
24822: PUSH
24823: EMPTY
24824: LIST
24825: LIST
24826: PUSH
24827: LD_INT 0
24829: PUSH
24830: LD_INT 2
24832: PUSH
24833: EMPTY
24834: LIST
24835: LIST
24836: PUSH
24837: LD_INT 1
24839: NEG
24840: PUSH
24841: LD_INT 1
24843: PUSH
24844: EMPTY
24845: LIST
24846: LIST
24847: PUSH
24848: LD_INT 1
24850: PUSH
24851: LD_INT 3
24853: PUSH
24854: EMPTY
24855: LIST
24856: LIST
24857: PUSH
24858: LD_INT 0
24860: PUSH
24861: LD_INT 3
24863: PUSH
24864: EMPTY
24865: LIST
24866: LIST
24867: PUSH
24868: LD_INT 1
24870: NEG
24871: PUSH
24872: LD_INT 2
24874: PUSH
24875: EMPTY
24876: LIST
24877: LIST
24878: PUSH
24879: EMPTY
24880: LIST
24881: LIST
24882: LIST
24883: LIST
24884: LIST
24885: LIST
24886: LIST
24887: LIST
24888: LIST
24889: LIST
24890: LIST
24891: LIST
24892: LIST
24893: LIST
24894: LIST
24895: LIST
24896: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
24897: LD_ADDR_VAR 0 12
24901: PUSH
24902: LD_INT 0
24904: PUSH
24905: LD_INT 0
24907: PUSH
24908: EMPTY
24909: LIST
24910: LIST
24911: PUSH
24912: LD_INT 0
24914: PUSH
24915: LD_INT 1
24917: NEG
24918: PUSH
24919: EMPTY
24920: LIST
24921: LIST
24922: PUSH
24923: LD_INT 1
24925: PUSH
24926: LD_INT 0
24928: PUSH
24929: EMPTY
24930: LIST
24931: LIST
24932: PUSH
24933: LD_INT 1
24935: PUSH
24936: LD_INT 1
24938: PUSH
24939: EMPTY
24940: LIST
24941: LIST
24942: PUSH
24943: LD_INT 0
24945: PUSH
24946: LD_INT 1
24948: PUSH
24949: EMPTY
24950: LIST
24951: LIST
24952: PUSH
24953: LD_INT 1
24955: NEG
24956: PUSH
24957: LD_INT 0
24959: PUSH
24960: EMPTY
24961: LIST
24962: LIST
24963: PUSH
24964: LD_INT 1
24966: NEG
24967: PUSH
24968: LD_INT 1
24970: NEG
24971: PUSH
24972: EMPTY
24973: LIST
24974: LIST
24975: PUSH
24976: LD_INT 1
24978: PUSH
24979: LD_INT 1
24981: NEG
24982: PUSH
24983: EMPTY
24984: LIST
24985: LIST
24986: PUSH
24987: LD_INT 2
24989: PUSH
24990: LD_INT 0
24992: PUSH
24993: EMPTY
24994: LIST
24995: LIST
24996: PUSH
24997: LD_INT 2
24999: PUSH
25000: LD_INT 1
25002: PUSH
25003: EMPTY
25004: LIST
25005: LIST
25006: PUSH
25007: LD_INT 1
25009: NEG
25010: PUSH
25011: LD_INT 1
25013: PUSH
25014: EMPTY
25015: LIST
25016: LIST
25017: PUSH
25018: LD_INT 2
25020: NEG
25021: PUSH
25022: LD_INT 0
25024: PUSH
25025: EMPTY
25026: LIST
25027: LIST
25028: PUSH
25029: LD_INT 2
25031: NEG
25032: PUSH
25033: LD_INT 1
25035: NEG
25036: PUSH
25037: EMPTY
25038: LIST
25039: LIST
25040: PUSH
25041: LD_INT 2
25043: NEG
25044: PUSH
25045: LD_INT 1
25047: PUSH
25048: EMPTY
25049: LIST
25050: LIST
25051: PUSH
25052: LD_INT 3
25054: NEG
25055: PUSH
25056: LD_INT 0
25058: PUSH
25059: EMPTY
25060: LIST
25061: LIST
25062: PUSH
25063: LD_INT 3
25065: NEG
25066: PUSH
25067: LD_INT 1
25069: NEG
25070: PUSH
25071: EMPTY
25072: LIST
25073: LIST
25074: PUSH
25075: EMPTY
25076: LIST
25077: LIST
25078: LIST
25079: LIST
25080: LIST
25081: LIST
25082: LIST
25083: LIST
25084: LIST
25085: LIST
25086: LIST
25087: LIST
25088: LIST
25089: LIST
25090: LIST
25091: LIST
25092: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
25093: LD_ADDR_VAR 0 13
25097: PUSH
25098: LD_INT 0
25100: PUSH
25101: LD_INT 0
25103: PUSH
25104: EMPTY
25105: LIST
25106: LIST
25107: PUSH
25108: LD_INT 0
25110: PUSH
25111: LD_INT 1
25113: NEG
25114: PUSH
25115: EMPTY
25116: LIST
25117: LIST
25118: PUSH
25119: LD_INT 1
25121: PUSH
25122: LD_INT 0
25124: PUSH
25125: EMPTY
25126: LIST
25127: LIST
25128: PUSH
25129: LD_INT 1
25131: PUSH
25132: LD_INT 1
25134: PUSH
25135: EMPTY
25136: LIST
25137: LIST
25138: PUSH
25139: LD_INT 0
25141: PUSH
25142: LD_INT 1
25144: PUSH
25145: EMPTY
25146: LIST
25147: LIST
25148: PUSH
25149: LD_INT 1
25151: NEG
25152: PUSH
25153: LD_INT 0
25155: PUSH
25156: EMPTY
25157: LIST
25158: LIST
25159: PUSH
25160: LD_INT 1
25162: NEG
25163: PUSH
25164: LD_INT 1
25166: NEG
25167: PUSH
25168: EMPTY
25169: LIST
25170: LIST
25171: PUSH
25172: LD_INT 1
25174: NEG
25175: PUSH
25176: LD_INT 2
25178: NEG
25179: PUSH
25180: EMPTY
25181: LIST
25182: LIST
25183: PUSH
25184: LD_INT 2
25186: PUSH
25187: LD_INT 1
25189: PUSH
25190: EMPTY
25191: LIST
25192: LIST
25193: PUSH
25194: LD_INT 2
25196: PUSH
25197: LD_INT 2
25199: PUSH
25200: EMPTY
25201: LIST
25202: LIST
25203: PUSH
25204: LD_INT 1
25206: PUSH
25207: LD_INT 2
25209: PUSH
25210: EMPTY
25211: LIST
25212: LIST
25213: PUSH
25214: LD_INT 2
25216: NEG
25217: PUSH
25218: LD_INT 1
25220: NEG
25221: PUSH
25222: EMPTY
25223: LIST
25224: LIST
25225: PUSH
25226: LD_INT 2
25228: NEG
25229: PUSH
25230: LD_INT 2
25232: NEG
25233: PUSH
25234: EMPTY
25235: LIST
25236: LIST
25237: PUSH
25238: LD_INT 2
25240: NEG
25241: PUSH
25242: LD_INT 3
25244: NEG
25245: PUSH
25246: EMPTY
25247: LIST
25248: LIST
25249: PUSH
25250: LD_INT 3
25252: NEG
25253: PUSH
25254: LD_INT 2
25256: NEG
25257: PUSH
25258: EMPTY
25259: LIST
25260: LIST
25261: PUSH
25262: LD_INT 3
25264: NEG
25265: PUSH
25266: LD_INT 3
25268: NEG
25269: PUSH
25270: EMPTY
25271: LIST
25272: LIST
25273: PUSH
25274: EMPTY
25275: LIST
25276: LIST
25277: LIST
25278: LIST
25279: LIST
25280: LIST
25281: LIST
25282: LIST
25283: LIST
25284: LIST
25285: LIST
25286: LIST
25287: LIST
25288: LIST
25289: LIST
25290: LIST
25291: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
25292: LD_ADDR_VAR 0 14
25296: PUSH
25297: LD_INT 0
25299: PUSH
25300: LD_INT 0
25302: PUSH
25303: EMPTY
25304: LIST
25305: LIST
25306: PUSH
25307: LD_INT 0
25309: PUSH
25310: LD_INT 1
25312: NEG
25313: PUSH
25314: EMPTY
25315: LIST
25316: LIST
25317: PUSH
25318: LD_INT 1
25320: PUSH
25321: LD_INT 0
25323: PUSH
25324: EMPTY
25325: LIST
25326: LIST
25327: PUSH
25328: LD_INT 1
25330: PUSH
25331: LD_INT 1
25333: PUSH
25334: EMPTY
25335: LIST
25336: LIST
25337: PUSH
25338: LD_INT 0
25340: PUSH
25341: LD_INT 1
25343: PUSH
25344: EMPTY
25345: LIST
25346: LIST
25347: PUSH
25348: LD_INT 1
25350: NEG
25351: PUSH
25352: LD_INT 0
25354: PUSH
25355: EMPTY
25356: LIST
25357: LIST
25358: PUSH
25359: LD_INT 1
25361: NEG
25362: PUSH
25363: LD_INT 1
25365: NEG
25366: PUSH
25367: EMPTY
25368: LIST
25369: LIST
25370: PUSH
25371: LD_INT 1
25373: NEG
25374: PUSH
25375: LD_INT 2
25377: NEG
25378: PUSH
25379: EMPTY
25380: LIST
25381: LIST
25382: PUSH
25383: LD_INT 0
25385: PUSH
25386: LD_INT 2
25388: NEG
25389: PUSH
25390: EMPTY
25391: LIST
25392: LIST
25393: PUSH
25394: LD_INT 1
25396: PUSH
25397: LD_INT 1
25399: NEG
25400: PUSH
25401: EMPTY
25402: LIST
25403: LIST
25404: PUSH
25405: LD_INT 1
25407: PUSH
25408: LD_INT 2
25410: PUSH
25411: EMPTY
25412: LIST
25413: LIST
25414: PUSH
25415: LD_INT 0
25417: PUSH
25418: LD_INT 2
25420: PUSH
25421: EMPTY
25422: LIST
25423: LIST
25424: PUSH
25425: LD_INT 1
25427: NEG
25428: PUSH
25429: LD_INT 1
25431: PUSH
25432: EMPTY
25433: LIST
25434: LIST
25435: PUSH
25436: LD_INT 1
25438: NEG
25439: PUSH
25440: LD_INT 3
25442: NEG
25443: PUSH
25444: EMPTY
25445: LIST
25446: LIST
25447: PUSH
25448: LD_INT 0
25450: PUSH
25451: LD_INT 3
25453: NEG
25454: PUSH
25455: EMPTY
25456: LIST
25457: LIST
25458: PUSH
25459: LD_INT 1
25461: PUSH
25462: LD_INT 2
25464: NEG
25465: PUSH
25466: EMPTY
25467: LIST
25468: LIST
25469: PUSH
25470: EMPTY
25471: LIST
25472: LIST
25473: LIST
25474: LIST
25475: LIST
25476: LIST
25477: LIST
25478: LIST
25479: LIST
25480: LIST
25481: LIST
25482: LIST
25483: LIST
25484: LIST
25485: LIST
25486: LIST
25487: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
25488: LD_ADDR_VAR 0 15
25492: PUSH
25493: LD_INT 0
25495: PUSH
25496: LD_INT 0
25498: PUSH
25499: EMPTY
25500: LIST
25501: LIST
25502: PUSH
25503: LD_INT 0
25505: PUSH
25506: LD_INT 1
25508: NEG
25509: PUSH
25510: EMPTY
25511: LIST
25512: LIST
25513: PUSH
25514: LD_INT 1
25516: PUSH
25517: LD_INT 0
25519: PUSH
25520: EMPTY
25521: LIST
25522: LIST
25523: PUSH
25524: LD_INT 1
25526: PUSH
25527: LD_INT 1
25529: PUSH
25530: EMPTY
25531: LIST
25532: LIST
25533: PUSH
25534: LD_INT 0
25536: PUSH
25537: LD_INT 1
25539: PUSH
25540: EMPTY
25541: LIST
25542: LIST
25543: PUSH
25544: LD_INT 1
25546: NEG
25547: PUSH
25548: LD_INT 0
25550: PUSH
25551: EMPTY
25552: LIST
25553: LIST
25554: PUSH
25555: LD_INT 1
25557: NEG
25558: PUSH
25559: LD_INT 1
25561: NEG
25562: PUSH
25563: EMPTY
25564: LIST
25565: LIST
25566: PUSH
25567: LD_INT 1
25569: PUSH
25570: LD_INT 1
25572: NEG
25573: PUSH
25574: EMPTY
25575: LIST
25576: LIST
25577: PUSH
25578: LD_INT 2
25580: PUSH
25581: LD_INT 0
25583: PUSH
25584: EMPTY
25585: LIST
25586: LIST
25587: PUSH
25588: LD_INT 2
25590: PUSH
25591: LD_INT 1
25593: PUSH
25594: EMPTY
25595: LIST
25596: LIST
25597: PUSH
25598: LD_INT 1
25600: NEG
25601: PUSH
25602: LD_INT 1
25604: PUSH
25605: EMPTY
25606: LIST
25607: LIST
25608: PUSH
25609: LD_INT 2
25611: NEG
25612: PUSH
25613: LD_INT 0
25615: PUSH
25616: EMPTY
25617: LIST
25618: LIST
25619: PUSH
25620: LD_INT 2
25622: NEG
25623: PUSH
25624: LD_INT 1
25626: NEG
25627: PUSH
25628: EMPTY
25629: LIST
25630: LIST
25631: PUSH
25632: LD_INT 2
25634: PUSH
25635: LD_INT 1
25637: NEG
25638: PUSH
25639: EMPTY
25640: LIST
25641: LIST
25642: PUSH
25643: LD_INT 3
25645: PUSH
25646: LD_INT 0
25648: PUSH
25649: EMPTY
25650: LIST
25651: LIST
25652: PUSH
25653: LD_INT 3
25655: PUSH
25656: LD_INT 1
25658: PUSH
25659: EMPTY
25660: LIST
25661: LIST
25662: PUSH
25663: EMPTY
25664: LIST
25665: LIST
25666: LIST
25667: LIST
25668: LIST
25669: LIST
25670: LIST
25671: LIST
25672: LIST
25673: LIST
25674: LIST
25675: LIST
25676: LIST
25677: LIST
25678: LIST
25679: LIST
25680: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
25681: LD_ADDR_VAR 0 16
25685: PUSH
25686: LD_INT 0
25688: PUSH
25689: LD_INT 0
25691: PUSH
25692: EMPTY
25693: LIST
25694: LIST
25695: PUSH
25696: LD_INT 0
25698: PUSH
25699: LD_INT 1
25701: NEG
25702: PUSH
25703: EMPTY
25704: LIST
25705: LIST
25706: PUSH
25707: LD_INT 1
25709: PUSH
25710: LD_INT 0
25712: PUSH
25713: EMPTY
25714: LIST
25715: LIST
25716: PUSH
25717: LD_INT 1
25719: PUSH
25720: LD_INT 1
25722: PUSH
25723: EMPTY
25724: LIST
25725: LIST
25726: PUSH
25727: LD_INT 0
25729: PUSH
25730: LD_INT 1
25732: PUSH
25733: EMPTY
25734: LIST
25735: LIST
25736: PUSH
25737: LD_INT 1
25739: NEG
25740: PUSH
25741: LD_INT 0
25743: PUSH
25744: EMPTY
25745: LIST
25746: LIST
25747: PUSH
25748: LD_INT 1
25750: NEG
25751: PUSH
25752: LD_INT 1
25754: NEG
25755: PUSH
25756: EMPTY
25757: LIST
25758: LIST
25759: PUSH
25760: LD_INT 1
25762: NEG
25763: PUSH
25764: LD_INT 2
25766: NEG
25767: PUSH
25768: EMPTY
25769: LIST
25770: LIST
25771: PUSH
25772: LD_INT 2
25774: PUSH
25775: LD_INT 1
25777: PUSH
25778: EMPTY
25779: LIST
25780: LIST
25781: PUSH
25782: LD_INT 2
25784: PUSH
25785: LD_INT 2
25787: PUSH
25788: EMPTY
25789: LIST
25790: LIST
25791: PUSH
25792: LD_INT 1
25794: PUSH
25795: LD_INT 2
25797: PUSH
25798: EMPTY
25799: LIST
25800: LIST
25801: PUSH
25802: LD_INT 2
25804: NEG
25805: PUSH
25806: LD_INT 1
25808: NEG
25809: PUSH
25810: EMPTY
25811: LIST
25812: LIST
25813: PUSH
25814: LD_INT 2
25816: NEG
25817: PUSH
25818: LD_INT 2
25820: NEG
25821: PUSH
25822: EMPTY
25823: LIST
25824: LIST
25825: PUSH
25826: LD_INT 3
25828: PUSH
25829: LD_INT 2
25831: PUSH
25832: EMPTY
25833: LIST
25834: LIST
25835: PUSH
25836: LD_INT 3
25838: PUSH
25839: LD_INT 3
25841: PUSH
25842: EMPTY
25843: LIST
25844: LIST
25845: PUSH
25846: LD_INT 2
25848: PUSH
25849: LD_INT 3
25851: PUSH
25852: EMPTY
25853: LIST
25854: LIST
25855: PUSH
25856: EMPTY
25857: LIST
25858: LIST
25859: LIST
25860: LIST
25861: LIST
25862: LIST
25863: LIST
25864: LIST
25865: LIST
25866: LIST
25867: LIST
25868: LIST
25869: LIST
25870: LIST
25871: LIST
25872: LIST
25873: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25874: LD_ADDR_VAR 0 17
25878: PUSH
25879: LD_INT 0
25881: PUSH
25882: LD_INT 0
25884: PUSH
25885: EMPTY
25886: LIST
25887: LIST
25888: PUSH
25889: LD_INT 0
25891: PUSH
25892: LD_INT 1
25894: NEG
25895: PUSH
25896: EMPTY
25897: LIST
25898: LIST
25899: PUSH
25900: LD_INT 1
25902: PUSH
25903: LD_INT 0
25905: PUSH
25906: EMPTY
25907: LIST
25908: LIST
25909: PUSH
25910: LD_INT 1
25912: PUSH
25913: LD_INT 1
25915: PUSH
25916: EMPTY
25917: LIST
25918: LIST
25919: PUSH
25920: LD_INT 0
25922: PUSH
25923: LD_INT 1
25925: PUSH
25926: EMPTY
25927: LIST
25928: LIST
25929: PUSH
25930: LD_INT 1
25932: NEG
25933: PUSH
25934: LD_INT 0
25936: PUSH
25937: EMPTY
25938: LIST
25939: LIST
25940: PUSH
25941: LD_INT 1
25943: NEG
25944: PUSH
25945: LD_INT 1
25947: NEG
25948: PUSH
25949: EMPTY
25950: LIST
25951: LIST
25952: PUSH
25953: LD_INT 1
25955: NEG
25956: PUSH
25957: LD_INT 2
25959: NEG
25960: PUSH
25961: EMPTY
25962: LIST
25963: LIST
25964: PUSH
25965: LD_INT 0
25967: PUSH
25968: LD_INT 2
25970: NEG
25971: PUSH
25972: EMPTY
25973: LIST
25974: LIST
25975: PUSH
25976: LD_INT 1
25978: PUSH
25979: LD_INT 1
25981: NEG
25982: PUSH
25983: EMPTY
25984: LIST
25985: LIST
25986: PUSH
25987: LD_INT 2
25989: PUSH
25990: LD_INT 0
25992: PUSH
25993: EMPTY
25994: LIST
25995: LIST
25996: PUSH
25997: LD_INT 2
25999: PUSH
26000: LD_INT 1
26002: PUSH
26003: EMPTY
26004: LIST
26005: LIST
26006: PUSH
26007: LD_INT 2
26009: PUSH
26010: LD_INT 2
26012: PUSH
26013: EMPTY
26014: LIST
26015: LIST
26016: PUSH
26017: LD_INT 1
26019: PUSH
26020: LD_INT 2
26022: PUSH
26023: EMPTY
26024: LIST
26025: LIST
26026: PUSH
26027: LD_INT 0
26029: PUSH
26030: LD_INT 2
26032: PUSH
26033: EMPTY
26034: LIST
26035: LIST
26036: PUSH
26037: LD_INT 1
26039: NEG
26040: PUSH
26041: LD_INT 1
26043: PUSH
26044: EMPTY
26045: LIST
26046: LIST
26047: PUSH
26048: LD_INT 2
26050: NEG
26051: PUSH
26052: LD_INT 0
26054: PUSH
26055: EMPTY
26056: LIST
26057: LIST
26058: PUSH
26059: LD_INT 2
26061: NEG
26062: PUSH
26063: LD_INT 1
26065: NEG
26066: PUSH
26067: EMPTY
26068: LIST
26069: LIST
26070: PUSH
26071: LD_INT 2
26073: NEG
26074: PUSH
26075: LD_INT 2
26077: NEG
26078: PUSH
26079: EMPTY
26080: LIST
26081: LIST
26082: PUSH
26083: EMPTY
26084: LIST
26085: LIST
26086: LIST
26087: LIST
26088: LIST
26089: LIST
26090: LIST
26091: LIST
26092: LIST
26093: LIST
26094: LIST
26095: LIST
26096: LIST
26097: LIST
26098: LIST
26099: LIST
26100: LIST
26101: LIST
26102: LIST
26103: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26104: LD_ADDR_VAR 0 18
26108: PUSH
26109: LD_INT 0
26111: PUSH
26112: LD_INT 0
26114: PUSH
26115: EMPTY
26116: LIST
26117: LIST
26118: PUSH
26119: LD_INT 0
26121: PUSH
26122: LD_INT 1
26124: NEG
26125: PUSH
26126: EMPTY
26127: LIST
26128: LIST
26129: PUSH
26130: LD_INT 1
26132: PUSH
26133: LD_INT 0
26135: PUSH
26136: EMPTY
26137: LIST
26138: LIST
26139: PUSH
26140: LD_INT 1
26142: PUSH
26143: LD_INT 1
26145: PUSH
26146: EMPTY
26147: LIST
26148: LIST
26149: PUSH
26150: LD_INT 0
26152: PUSH
26153: LD_INT 1
26155: PUSH
26156: EMPTY
26157: LIST
26158: LIST
26159: PUSH
26160: LD_INT 1
26162: NEG
26163: PUSH
26164: LD_INT 0
26166: PUSH
26167: EMPTY
26168: LIST
26169: LIST
26170: PUSH
26171: LD_INT 1
26173: NEG
26174: PUSH
26175: LD_INT 1
26177: NEG
26178: PUSH
26179: EMPTY
26180: LIST
26181: LIST
26182: PUSH
26183: LD_INT 1
26185: NEG
26186: PUSH
26187: LD_INT 2
26189: NEG
26190: PUSH
26191: EMPTY
26192: LIST
26193: LIST
26194: PUSH
26195: LD_INT 0
26197: PUSH
26198: LD_INT 2
26200: NEG
26201: PUSH
26202: EMPTY
26203: LIST
26204: LIST
26205: PUSH
26206: LD_INT 1
26208: PUSH
26209: LD_INT 1
26211: NEG
26212: PUSH
26213: EMPTY
26214: LIST
26215: LIST
26216: PUSH
26217: LD_INT 2
26219: PUSH
26220: LD_INT 0
26222: PUSH
26223: EMPTY
26224: LIST
26225: LIST
26226: PUSH
26227: LD_INT 2
26229: PUSH
26230: LD_INT 1
26232: PUSH
26233: EMPTY
26234: LIST
26235: LIST
26236: PUSH
26237: LD_INT 2
26239: PUSH
26240: LD_INT 2
26242: PUSH
26243: EMPTY
26244: LIST
26245: LIST
26246: PUSH
26247: LD_INT 1
26249: PUSH
26250: LD_INT 2
26252: PUSH
26253: EMPTY
26254: LIST
26255: LIST
26256: PUSH
26257: LD_INT 0
26259: PUSH
26260: LD_INT 2
26262: PUSH
26263: EMPTY
26264: LIST
26265: LIST
26266: PUSH
26267: LD_INT 1
26269: NEG
26270: PUSH
26271: LD_INT 1
26273: PUSH
26274: EMPTY
26275: LIST
26276: LIST
26277: PUSH
26278: LD_INT 2
26280: NEG
26281: PUSH
26282: LD_INT 0
26284: PUSH
26285: EMPTY
26286: LIST
26287: LIST
26288: PUSH
26289: LD_INT 2
26291: NEG
26292: PUSH
26293: LD_INT 1
26295: NEG
26296: PUSH
26297: EMPTY
26298: LIST
26299: LIST
26300: PUSH
26301: LD_INT 2
26303: NEG
26304: PUSH
26305: LD_INT 2
26307: NEG
26308: PUSH
26309: EMPTY
26310: LIST
26311: LIST
26312: PUSH
26313: EMPTY
26314: LIST
26315: LIST
26316: LIST
26317: LIST
26318: LIST
26319: LIST
26320: LIST
26321: LIST
26322: LIST
26323: LIST
26324: LIST
26325: LIST
26326: LIST
26327: LIST
26328: LIST
26329: LIST
26330: LIST
26331: LIST
26332: LIST
26333: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26334: LD_ADDR_VAR 0 19
26338: PUSH
26339: LD_INT 0
26341: PUSH
26342: LD_INT 0
26344: PUSH
26345: EMPTY
26346: LIST
26347: LIST
26348: PUSH
26349: LD_INT 0
26351: PUSH
26352: LD_INT 1
26354: NEG
26355: PUSH
26356: EMPTY
26357: LIST
26358: LIST
26359: PUSH
26360: LD_INT 1
26362: PUSH
26363: LD_INT 0
26365: PUSH
26366: EMPTY
26367: LIST
26368: LIST
26369: PUSH
26370: LD_INT 1
26372: PUSH
26373: LD_INT 1
26375: PUSH
26376: EMPTY
26377: LIST
26378: LIST
26379: PUSH
26380: LD_INT 0
26382: PUSH
26383: LD_INT 1
26385: PUSH
26386: EMPTY
26387: LIST
26388: LIST
26389: PUSH
26390: LD_INT 1
26392: NEG
26393: PUSH
26394: LD_INT 0
26396: PUSH
26397: EMPTY
26398: LIST
26399: LIST
26400: PUSH
26401: LD_INT 1
26403: NEG
26404: PUSH
26405: LD_INT 1
26407: NEG
26408: PUSH
26409: EMPTY
26410: LIST
26411: LIST
26412: PUSH
26413: LD_INT 1
26415: NEG
26416: PUSH
26417: LD_INT 2
26419: NEG
26420: PUSH
26421: EMPTY
26422: LIST
26423: LIST
26424: PUSH
26425: LD_INT 0
26427: PUSH
26428: LD_INT 2
26430: NEG
26431: PUSH
26432: EMPTY
26433: LIST
26434: LIST
26435: PUSH
26436: LD_INT 1
26438: PUSH
26439: LD_INT 1
26441: NEG
26442: PUSH
26443: EMPTY
26444: LIST
26445: LIST
26446: PUSH
26447: LD_INT 2
26449: PUSH
26450: LD_INT 0
26452: PUSH
26453: EMPTY
26454: LIST
26455: LIST
26456: PUSH
26457: LD_INT 2
26459: PUSH
26460: LD_INT 1
26462: PUSH
26463: EMPTY
26464: LIST
26465: LIST
26466: PUSH
26467: LD_INT 2
26469: PUSH
26470: LD_INT 2
26472: PUSH
26473: EMPTY
26474: LIST
26475: LIST
26476: PUSH
26477: LD_INT 1
26479: PUSH
26480: LD_INT 2
26482: PUSH
26483: EMPTY
26484: LIST
26485: LIST
26486: PUSH
26487: LD_INT 0
26489: PUSH
26490: LD_INT 2
26492: PUSH
26493: EMPTY
26494: LIST
26495: LIST
26496: PUSH
26497: LD_INT 1
26499: NEG
26500: PUSH
26501: LD_INT 1
26503: PUSH
26504: EMPTY
26505: LIST
26506: LIST
26507: PUSH
26508: LD_INT 2
26510: NEG
26511: PUSH
26512: LD_INT 0
26514: PUSH
26515: EMPTY
26516: LIST
26517: LIST
26518: PUSH
26519: LD_INT 2
26521: NEG
26522: PUSH
26523: LD_INT 1
26525: NEG
26526: PUSH
26527: EMPTY
26528: LIST
26529: LIST
26530: PUSH
26531: LD_INT 2
26533: NEG
26534: PUSH
26535: LD_INT 2
26537: NEG
26538: PUSH
26539: EMPTY
26540: LIST
26541: LIST
26542: PUSH
26543: EMPTY
26544: LIST
26545: LIST
26546: LIST
26547: LIST
26548: LIST
26549: LIST
26550: LIST
26551: LIST
26552: LIST
26553: LIST
26554: LIST
26555: LIST
26556: LIST
26557: LIST
26558: LIST
26559: LIST
26560: LIST
26561: LIST
26562: LIST
26563: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26564: LD_ADDR_VAR 0 20
26568: PUSH
26569: LD_INT 0
26571: PUSH
26572: LD_INT 0
26574: PUSH
26575: EMPTY
26576: LIST
26577: LIST
26578: PUSH
26579: LD_INT 0
26581: PUSH
26582: LD_INT 1
26584: NEG
26585: PUSH
26586: EMPTY
26587: LIST
26588: LIST
26589: PUSH
26590: LD_INT 1
26592: PUSH
26593: LD_INT 0
26595: PUSH
26596: EMPTY
26597: LIST
26598: LIST
26599: PUSH
26600: LD_INT 1
26602: PUSH
26603: LD_INT 1
26605: PUSH
26606: EMPTY
26607: LIST
26608: LIST
26609: PUSH
26610: LD_INT 0
26612: PUSH
26613: LD_INT 1
26615: PUSH
26616: EMPTY
26617: LIST
26618: LIST
26619: PUSH
26620: LD_INT 1
26622: NEG
26623: PUSH
26624: LD_INT 0
26626: PUSH
26627: EMPTY
26628: LIST
26629: LIST
26630: PUSH
26631: LD_INT 1
26633: NEG
26634: PUSH
26635: LD_INT 1
26637: NEG
26638: PUSH
26639: EMPTY
26640: LIST
26641: LIST
26642: PUSH
26643: LD_INT 1
26645: NEG
26646: PUSH
26647: LD_INT 2
26649: NEG
26650: PUSH
26651: EMPTY
26652: LIST
26653: LIST
26654: PUSH
26655: LD_INT 0
26657: PUSH
26658: LD_INT 2
26660: NEG
26661: PUSH
26662: EMPTY
26663: LIST
26664: LIST
26665: PUSH
26666: LD_INT 1
26668: PUSH
26669: LD_INT 1
26671: NEG
26672: PUSH
26673: EMPTY
26674: LIST
26675: LIST
26676: PUSH
26677: LD_INT 2
26679: PUSH
26680: LD_INT 0
26682: PUSH
26683: EMPTY
26684: LIST
26685: LIST
26686: PUSH
26687: LD_INT 2
26689: PUSH
26690: LD_INT 1
26692: PUSH
26693: EMPTY
26694: LIST
26695: LIST
26696: PUSH
26697: LD_INT 2
26699: PUSH
26700: LD_INT 2
26702: PUSH
26703: EMPTY
26704: LIST
26705: LIST
26706: PUSH
26707: LD_INT 1
26709: PUSH
26710: LD_INT 2
26712: PUSH
26713: EMPTY
26714: LIST
26715: LIST
26716: PUSH
26717: LD_INT 0
26719: PUSH
26720: LD_INT 2
26722: PUSH
26723: EMPTY
26724: LIST
26725: LIST
26726: PUSH
26727: LD_INT 1
26729: NEG
26730: PUSH
26731: LD_INT 1
26733: PUSH
26734: EMPTY
26735: LIST
26736: LIST
26737: PUSH
26738: LD_INT 2
26740: NEG
26741: PUSH
26742: LD_INT 0
26744: PUSH
26745: EMPTY
26746: LIST
26747: LIST
26748: PUSH
26749: LD_INT 2
26751: NEG
26752: PUSH
26753: LD_INT 1
26755: NEG
26756: PUSH
26757: EMPTY
26758: LIST
26759: LIST
26760: PUSH
26761: LD_INT 2
26763: NEG
26764: PUSH
26765: LD_INT 2
26767: NEG
26768: PUSH
26769: EMPTY
26770: LIST
26771: LIST
26772: PUSH
26773: EMPTY
26774: LIST
26775: LIST
26776: LIST
26777: LIST
26778: LIST
26779: LIST
26780: LIST
26781: LIST
26782: LIST
26783: LIST
26784: LIST
26785: LIST
26786: LIST
26787: LIST
26788: LIST
26789: LIST
26790: LIST
26791: LIST
26792: LIST
26793: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26794: LD_ADDR_VAR 0 21
26798: PUSH
26799: LD_INT 0
26801: PUSH
26802: LD_INT 0
26804: PUSH
26805: EMPTY
26806: LIST
26807: LIST
26808: PUSH
26809: LD_INT 0
26811: PUSH
26812: LD_INT 1
26814: NEG
26815: PUSH
26816: EMPTY
26817: LIST
26818: LIST
26819: PUSH
26820: LD_INT 1
26822: PUSH
26823: LD_INT 0
26825: PUSH
26826: EMPTY
26827: LIST
26828: LIST
26829: PUSH
26830: LD_INT 1
26832: PUSH
26833: LD_INT 1
26835: PUSH
26836: EMPTY
26837: LIST
26838: LIST
26839: PUSH
26840: LD_INT 0
26842: PUSH
26843: LD_INT 1
26845: PUSH
26846: EMPTY
26847: LIST
26848: LIST
26849: PUSH
26850: LD_INT 1
26852: NEG
26853: PUSH
26854: LD_INT 0
26856: PUSH
26857: EMPTY
26858: LIST
26859: LIST
26860: PUSH
26861: LD_INT 1
26863: NEG
26864: PUSH
26865: LD_INT 1
26867: NEG
26868: PUSH
26869: EMPTY
26870: LIST
26871: LIST
26872: PUSH
26873: LD_INT 1
26875: NEG
26876: PUSH
26877: LD_INT 2
26879: NEG
26880: PUSH
26881: EMPTY
26882: LIST
26883: LIST
26884: PUSH
26885: LD_INT 0
26887: PUSH
26888: LD_INT 2
26890: NEG
26891: PUSH
26892: EMPTY
26893: LIST
26894: LIST
26895: PUSH
26896: LD_INT 1
26898: PUSH
26899: LD_INT 1
26901: NEG
26902: PUSH
26903: EMPTY
26904: LIST
26905: LIST
26906: PUSH
26907: LD_INT 2
26909: PUSH
26910: LD_INT 0
26912: PUSH
26913: EMPTY
26914: LIST
26915: LIST
26916: PUSH
26917: LD_INT 2
26919: PUSH
26920: LD_INT 1
26922: PUSH
26923: EMPTY
26924: LIST
26925: LIST
26926: PUSH
26927: LD_INT 2
26929: PUSH
26930: LD_INT 2
26932: PUSH
26933: EMPTY
26934: LIST
26935: LIST
26936: PUSH
26937: LD_INT 1
26939: PUSH
26940: LD_INT 2
26942: PUSH
26943: EMPTY
26944: LIST
26945: LIST
26946: PUSH
26947: LD_INT 0
26949: PUSH
26950: LD_INT 2
26952: PUSH
26953: EMPTY
26954: LIST
26955: LIST
26956: PUSH
26957: LD_INT 1
26959: NEG
26960: PUSH
26961: LD_INT 1
26963: PUSH
26964: EMPTY
26965: LIST
26966: LIST
26967: PUSH
26968: LD_INT 2
26970: NEG
26971: PUSH
26972: LD_INT 0
26974: PUSH
26975: EMPTY
26976: LIST
26977: LIST
26978: PUSH
26979: LD_INT 2
26981: NEG
26982: PUSH
26983: LD_INT 1
26985: NEG
26986: PUSH
26987: EMPTY
26988: LIST
26989: LIST
26990: PUSH
26991: LD_INT 2
26993: NEG
26994: PUSH
26995: LD_INT 2
26997: NEG
26998: PUSH
26999: EMPTY
27000: LIST
27001: LIST
27002: PUSH
27003: EMPTY
27004: LIST
27005: LIST
27006: LIST
27007: LIST
27008: LIST
27009: LIST
27010: LIST
27011: LIST
27012: LIST
27013: LIST
27014: LIST
27015: LIST
27016: LIST
27017: LIST
27018: LIST
27019: LIST
27020: LIST
27021: LIST
27022: LIST
27023: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27024: LD_ADDR_VAR 0 22
27028: PUSH
27029: LD_INT 0
27031: PUSH
27032: LD_INT 0
27034: PUSH
27035: EMPTY
27036: LIST
27037: LIST
27038: PUSH
27039: LD_INT 0
27041: PUSH
27042: LD_INT 1
27044: NEG
27045: PUSH
27046: EMPTY
27047: LIST
27048: LIST
27049: PUSH
27050: LD_INT 1
27052: PUSH
27053: LD_INT 0
27055: PUSH
27056: EMPTY
27057: LIST
27058: LIST
27059: PUSH
27060: LD_INT 1
27062: PUSH
27063: LD_INT 1
27065: PUSH
27066: EMPTY
27067: LIST
27068: LIST
27069: PUSH
27070: LD_INT 0
27072: PUSH
27073: LD_INT 1
27075: PUSH
27076: EMPTY
27077: LIST
27078: LIST
27079: PUSH
27080: LD_INT 1
27082: NEG
27083: PUSH
27084: LD_INT 0
27086: PUSH
27087: EMPTY
27088: LIST
27089: LIST
27090: PUSH
27091: LD_INT 1
27093: NEG
27094: PUSH
27095: LD_INT 1
27097: NEG
27098: PUSH
27099: EMPTY
27100: LIST
27101: LIST
27102: PUSH
27103: LD_INT 1
27105: NEG
27106: PUSH
27107: LD_INT 2
27109: NEG
27110: PUSH
27111: EMPTY
27112: LIST
27113: LIST
27114: PUSH
27115: LD_INT 0
27117: PUSH
27118: LD_INT 2
27120: NEG
27121: PUSH
27122: EMPTY
27123: LIST
27124: LIST
27125: PUSH
27126: LD_INT 1
27128: PUSH
27129: LD_INT 1
27131: NEG
27132: PUSH
27133: EMPTY
27134: LIST
27135: LIST
27136: PUSH
27137: LD_INT 2
27139: PUSH
27140: LD_INT 0
27142: PUSH
27143: EMPTY
27144: LIST
27145: LIST
27146: PUSH
27147: LD_INT 2
27149: PUSH
27150: LD_INT 1
27152: PUSH
27153: EMPTY
27154: LIST
27155: LIST
27156: PUSH
27157: LD_INT 2
27159: PUSH
27160: LD_INT 2
27162: PUSH
27163: EMPTY
27164: LIST
27165: LIST
27166: PUSH
27167: LD_INT 1
27169: PUSH
27170: LD_INT 2
27172: PUSH
27173: EMPTY
27174: LIST
27175: LIST
27176: PUSH
27177: LD_INT 0
27179: PUSH
27180: LD_INT 2
27182: PUSH
27183: EMPTY
27184: LIST
27185: LIST
27186: PUSH
27187: LD_INT 1
27189: NEG
27190: PUSH
27191: LD_INT 1
27193: PUSH
27194: EMPTY
27195: LIST
27196: LIST
27197: PUSH
27198: LD_INT 2
27200: NEG
27201: PUSH
27202: LD_INT 0
27204: PUSH
27205: EMPTY
27206: LIST
27207: LIST
27208: PUSH
27209: LD_INT 2
27211: NEG
27212: PUSH
27213: LD_INT 1
27215: NEG
27216: PUSH
27217: EMPTY
27218: LIST
27219: LIST
27220: PUSH
27221: LD_INT 2
27223: NEG
27224: PUSH
27225: LD_INT 2
27227: NEG
27228: PUSH
27229: EMPTY
27230: LIST
27231: LIST
27232: PUSH
27233: EMPTY
27234: LIST
27235: LIST
27236: LIST
27237: LIST
27238: LIST
27239: LIST
27240: LIST
27241: LIST
27242: LIST
27243: LIST
27244: LIST
27245: LIST
27246: LIST
27247: LIST
27248: LIST
27249: LIST
27250: LIST
27251: LIST
27252: LIST
27253: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
27254: LD_ADDR_VAR 0 23
27258: PUSH
27259: LD_INT 0
27261: PUSH
27262: LD_INT 0
27264: PUSH
27265: EMPTY
27266: LIST
27267: LIST
27268: PUSH
27269: LD_INT 0
27271: PUSH
27272: LD_INT 1
27274: NEG
27275: PUSH
27276: EMPTY
27277: LIST
27278: LIST
27279: PUSH
27280: LD_INT 1
27282: PUSH
27283: LD_INT 0
27285: PUSH
27286: EMPTY
27287: LIST
27288: LIST
27289: PUSH
27290: LD_INT 1
27292: PUSH
27293: LD_INT 1
27295: PUSH
27296: EMPTY
27297: LIST
27298: LIST
27299: PUSH
27300: LD_INT 0
27302: PUSH
27303: LD_INT 1
27305: PUSH
27306: EMPTY
27307: LIST
27308: LIST
27309: PUSH
27310: LD_INT 1
27312: NEG
27313: PUSH
27314: LD_INT 0
27316: PUSH
27317: EMPTY
27318: LIST
27319: LIST
27320: PUSH
27321: LD_INT 1
27323: NEG
27324: PUSH
27325: LD_INT 1
27327: NEG
27328: PUSH
27329: EMPTY
27330: LIST
27331: LIST
27332: PUSH
27333: LD_INT 1
27335: NEG
27336: PUSH
27337: LD_INT 2
27339: NEG
27340: PUSH
27341: EMPTY
27342: LIST
27343: LIST
27344: PUSH
27345: LD_INT 0
27347: PUSH
27348: LD_INT 2
27350: NEG
27351: PUSH
27352: EMPTY
27353: LIST
27354: LIST
27355: PUSH
27356: LD_INT 1
27358: PUSH
27359: LD_INT 1
27361: NEG
27362: PUSH
27363: EMPTY
27364: LIST
27365: LIST
27366: PUSH
27367: LD_INT 2
27369: PUSH
27370: LD_INT 0
27372: PUSH
27373: EMPTY
27374: LIST
27375: LIST
27376: PUSH
27377: LD_INT 2
27379: PUSH
27380: LD_INT 1
27382: PUSH
27383: EMPTY
27384: LIST
27385: LIST
27386: PUSH
27387: LD_INT 2
27389: PUSH
27390: LD_INT 2
27392: PUSH
27393: EMPTY
27394: LIST
27395: LIST
27396: PUSH
27397: LD_INT 1
27399: PUSH
27400: LD_INT 2
27402: PUSH
27403: EMPTY
27404: LIST
27405: LIST
27406: PUSH
27407: LD_INT 0
27409: PUSH
27410: LD_INT 2
27412: PUSH
27413: EMPTY
27414: LIST
27415: LIST
27416: PUSH
27417: LD_INT 1
27419: NEG
27420: PUSH
27421: LD_INT 1
27423: PUSH
27424: EMPTY
27425: LIST
27426: LIST
27427: PUSH
27428: LD_INT 2
27430: NEG
27431: PUSH
27432: LD_INT 0
27434: PUSH
27435: EMPTY
27436: LIST
27437: LIST
27438: PUSH
27439: LD_INT 2
27441: NEG
27442: PUSH
27443: LD_INT 1
27445: NEG
27446: PUSH
27447: EMPTY
27448: LIST
27449: LIST
27450: PUSH
27451: LD_INT 2
27453: NEG
27454: PUSH
27455: LD_INT 2
27457: NEG
27458: PUSH
27459: EMPTY
27460: LIST
27461: LIST
27462: PUSH
27463: LD_INT 2
27465: NEG
27466: PUSH
27467: LD_INT 3
27469: NEG
27470: PUSH
27471: EMPTY
27472: LIST
27473: LIST
27474: PUSH
27475: LD_INT 1
27477: NEG
27478: PUSH
27479: LD_INT 3
27481: NEG
27482: PUSH
27483: EMPTY
27484: LIST
27485: LIST
27486: PUSH
27487: LD_INT 1
27489: PUSH
27490: LD_INT 2
27492: NEG
27493: PUSH
27494: EMPTY
27495: LIST
27496: LIST
27497: PUSH
27498: LD_INT 2
27500: PUSH
27501: LD_INT 1
27503: NEG
27504: PUSH
27505: EMPTY
27506: LIST
27507: LIST
27508: PUSH
27509: EMPTY
27510: LIST
27511: LIST
27512: LIST
27513: LIST
27514: LIST
27515: LIST
27516: LIST
27517: LIST
27518: LIST
27519: LIST
27520: LIST
27521: LIST
27522: LIST
27523: LIST
27524: LIST
27525: LIST
27526: LIST
27527: LIST
27528: LIST
27529: LIST
27530: LIST
27531: LIST
27532: LIST
27533: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
27534: LD_ADDR_VAR 0 24
27538: PUSH
27539: LD_INT 0
27541: PUSH
27542: LD_INT 0
27544: PUSH
27545: EMPTY
27546: LIST
27547: LIST
27548: PUSH
27549: LD_INT 0
27551: PUSH
27552: LD_INT 1
27554: NEG
27555: PUSH
27556: EMPTY
27557: LIST
27558: LIST
27559: PUSH
27560: LD_INT 1
27562: PUSH
27563: LD_INT 0
27565: PUSH
27566: EMPTY
27567: LIST
27568: LIST
27569: PUSH
27570: LD_INT 1
27572: PUSH
27573: LD_INT 1
27575: PUSH
27576: EMPTY
27577: LIST
27578: LIST
27579: PUSH
27580: LD_INT 0
27582: PUSH
27583: LD_INT 1
27585: PUSH
27586: EMPTY
27587: LIST
27588: LIST
27589: PUSH
27590: LD_INT 1
27592: NEG
27593: PUSH
27594: LD_INT 0
27596: PUSH
27597: EMPTY
27598: LIST
27599: LIST
27600: PUSH
27601: LD_INT 1
27603: NEG
27604: PUSH
27605: LD_INT 1
27607: NEG
27608: PUSH
27609: EMPTY
27610: LIST
27611: LIST
27612: PUSH
27613: LD_INT 1
27615: NEG
27616: PUSH
27617: LD_INT 2
27619: NEG
27620: PUSH
27621: EMPTY
27622: LIST
27623: LIST
27624: PUSH
27625: LD_INT 0
27627: PUSH
27628: LD_INT 2
27630: NEG
27631: PUSH
27632: EMPTY
27633: LIST
27634: LIST
27635: PUSH
27636: LD_INT 1
27638: PUSH
27639: LD_INT 1
27641: NEG
27642: PUSH
27643: EMPTY
27644: LIST
27645: LIST
27646: PUSH
27647: LD_INT 2
27649: PUSH
27650: LD_INT 0
27652: PUSH
27653: EMPTY
27654: LIST
27655: LIST
27656: PUSH
27657: LD_INT 2
27659: PUSH
27660: LD_INT 1
27662: PUSH
27663: EMPTY
27664: LIST
27665: LIST
27666: PUSH
27667: LD_INT 2
27669: PUSH
27670: LD_INT 2
27672: PUSH
27673: EMPTY
27674: LIST
27675: LIST
27676: PUSH
27677: LD_INT 1
27679: PUSH
27680: LD_INT 2
27682: PUSH
27683: EMPTY
27684: LIST
27685: LIST
27686: PUSH
27687: LD_INT 0
27689: PUSH
27690: LD_INT 2
27692: PUSH
27693: EMPTY
27694: LIST
27695: LIST
27696: PUSH
27697: LD_INT 1
27699: NEG
27700: PUSH
27701: LD_INT 1
27703: PUSH
27704: EMPTY
27705: LIST
27706: LIST
27707: PUSH
27708: LD_INT 2
27710: NEG
27711: PUSH
27712: LD_INT 0
27714: PUSH
27715: EMPTY
27716: LIST
27717: LIST
27718: PUSH
27719: LD_INT 2
27721: NEG
27722: PUSH
27723: LD_INT 1
27725: NEG
27726: PUSH
27727: EMPTY
27728: LIST
27729: LIST
27730: PUSH
27731: LD_INT 2
27733: NEG
27734: PUSH
27735: LD_INT 2
27737: NEG
27738: PUSH
27739: EMPTY
27740: LIST
27741: LIST
27742: PUSH
27743: LD_INT 1
27745: PUSH
27746: LD_INT 2
27748: NEG
27749: PUSH
27750: EMPTY
27751: LIST
27752: LIST
27753: PUSH
27754: LD_INT 2
27756: PUSH
27757: LD_INT 1
27759: NEG
27760: PUSH
27761: EMPTY
27762: LIST
27763: LIST
27764: PUSH
27765: LD_INT 3
27767: PUSH
27768: LD_INT 1
27770: PUSH
27771: EMPTY
27772: LIST
27773: LIST
27774: PUSH
27775: LD_INT 3
27777: PUSH
27778: LD_INT 2
27780: PUSH
27781: EMPTY
27782: LIST
27783: LIST
27784: PUSH
27785: EMPTY
27786: LIST
27787: LIST
27788: LIST
27789: LIST
27790: LIST
27791: LIST
27792: LIST
27793: LIST
27794: LIST
27795: LIST
27796: LIST
27797: LIST
27798: LIST
27799: LIST
27800: LIST
27801: LIST
27802: LIST
27803: LIST
27804: LIST
27805: LIST
27806: LIST
27807: LIST
27808: LIST
27809: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
27810: LD_ADDR_VAR 0 25
27814: PUSH
27815: LD_INT 0
27817: PUSH
27818: LD_INT 0
27820: PUSH
27821: EMPTY
27822: LIST
27823: LIST
27824: PUSH
27825: LD_INT 0
27827: PUSH
27828: LD_INT 1
27830: NEG
27831: PUSH
27832: EMPTY
27833: LIST
27834: LIST
27835: PUSH
27836: LD_INT 1
27838: PUSH
27839: LD_INT 0
27841: PUSH
27842: EMPTY
27843: LIST
27844: LIST
27845: PUSH
27846: LD_INT 1
27848: PUSH
27849: LD_INT 1
27851: PUSH
27852: EMPTY
27853: LIST
27854: LIST
27855: PUSH
27856: LD_INT 0
27858: PUSH
27859: LD_INT 1
27861: PUSH
27862: EMPTY
27863: LIST
27864: LIST
27865: PUSH
27866: LD_INT 1
27868: NEG
27869: PUSH
27870: LD_INT 0
27872: PUSH
27873: EMPTY
27874: LIST
27875: LIST
27876: PUSH
27877: LD_INT 1
27879: NEG
27880: PUSH
27881: LD_INT 1
27883: NEG
27884: PUSH
27885: EMPTY
27886: LIST
27887: LIST
27888: PUSH
27889: LD_INT 1
27891: NEG
27892: PUSH
27893: LD_INT 2
27895: NEG
27896: PUSH
27897: EMPTY
27898: LIST
27899: LIST
27900: PUSH
27901: LD_INT 0
27903: PUSH
27904: LD_INT 2
27906: NEG
27907: PUSH
27908: EMPTY
27909: LIST
27910: LIST
27911: PUSH
27912: LD_INT 1
27914: PUSH
27915: LD_INT 1
27917: NEG
27918: PUSH
27919: EMPTY
27920: LIST
27921: LIST
27922: PUSH
27923: LD_INT 2
27925: PUSH
27926: LD_INT 0
27928: PUSH
27929: EMPTY
27930: LIST
27931: LIST
27932: PUSH
27933: LD_INT 2
27935: PUSH
27936: LD_INT 1
27938: PUSH
27939: EMPTY
27940: LIST
27941: LIST
27942: PUSH
27943: LD_INT 2
27945: PUSH
27946: LD_INT 2
27948: PUSH
27949: EMPTY
27950: LIST
27951: LIST
27952: PUSH
27953: LD_INT 1
27955: PUSH
27956: LD_INT 2
27958: PUSH
27959: EMPTY
27960: LIST
27961: LIST
27962: PUSH
27963: LD_INT 0
27965: PUSH
27966: LD_INT 2
27968: PUSH
27969: EMPTY
27970: LIST
27971: LIST
27972: PUSH
27973: LD_INT 1
27975: NEG
27976: PUSH
27977: LD_INT 1
27979: PUSH
27980: EMPTY
27981: LIST
27982: LIST
27983: PUSH
27984: LD_INT 2
27986: NEG
27987: PUSH
27988: LD_INT 0
27990: PUSH
27991: EMPTY
27992: LIST
27993: LIST
27994: PUSH
27995: LD_INT 2
27997: NEG
27998: PUSH
27999: LD_INT 1
28001: NEG
28002: PUSH
28003: EMPTY
28004: LIST
28005: LIST
28006: PUSH
28007: LD_INT 2
28009: NEG
28010: PUSH
28011: LD_INT 2
28013: NEG
28014: PUSH
28015: EMPTY
28016: LIST
28017: LIST
28018: PUSH
28019: LD_INT 3
28021: PUSH
28022: LD_INT 1
28024: PUSH
28025: EMPTY
28026: LIST
28027: LIST
28028: PUSH
28029: LD_INT 3
28031: PUSH
28032: LD_INT 2
28034: PUSH
28035: EMPTY
28036: LIST
28037: LIST
28038: PUSH
28039: LD_INT 2
28041: PUSH
28042: LD_INT 3
28044: PUSH
28045: EMPTY
28046: LIST
28047: LIST
28048: PUSH
28049: LD_INT 1
28051: PUSH
28052: LD_INT 3
28054: PUSH
28055: EMPTY
28056: LIST
28057: LIST
28058: PUSH
28059: EMPTY
28060: LIST
28061: LIST
28062: LIST
28063: LIST
28064: LIST
28065: LIST
28066: LIST
28067: LIST
28068: LIST
28069: LIST
28070: LIST
28071: LIST
28072: LIST
28073: LIST
28074: LIST
28075: LIST
28076: LIST
28077: LIST
28078: LIST
28079: LIST
28080: LIST
28081: LIST
28082: LIST
28083: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
28084: LD_ADDR_VAR 0 26
28088: PUSH
28089: LD_INT 0
28091: PUSH
28092: LD_INT 0
28094: PUSH
28095: EMPTY
28096: LIST
28097: LIST
28098: PUSH
28099: LD_INT 0
28101: PUSH
28102: LD_INT 1
28104: NEG
28105: PUSH
28106: EMPTY
28107: LIST
28108: LIST
28109: PUSH
28110: LD_INT 1
28112: PUSH
28113: LD_INT 0
28115: PUSH
28116: EMPTY
28117: LIST
28118: LIST
28119: PUSH
28120: LD_INT 1
28122: PUSH
28123: LD_INT 1
28125: PUSH
28126: EMPTY
28127: LIST
28128: LIST
28129: PUSH
28130: LD_INT 0
28132: PUSH
28133: LD_INT 1
28135: PUSH
28136: EMPTY
28137: LIST
28138: LIST
28139: PUSH
28140: LD_INT 1
28142: NEG
28143: PUSH
28144: LD_INT 0
28146: PUSH
28147: EMPTY
28148: LIST
28149: LIST
28150: PUSH
28151: LD_INT 1
28153: NEG
28154: PUSH
28155: LD_INT 1
28157: NEG
28158: PUSH
28159: EMPTY
28160: LIST
28161: LIST
28162: PUSH
28163: LD_INT 1
28165: NEG
28166: PUSH
28167: LD_INT 2
28169: NEG
28170: PUSH
28171: EMPTY
28172: LIST
28173: LIST
28174: PUSH
28175: LD_INT 0
28177: PUSH
28178: LD_INT 2
28180: NEG
28181: PUSH
28182: EMPTY
28183: LIST
28184: LIST
28185: PUSH
28186: LD_INT 1
28188: PUSH
28189: LD_INT 1
28191: NEG
28192: PUSH
28193: EMPTY
28194: LIST
28195: LIST
28196: PUSH
28197: LD_INT 2
28199: PUSH
28200: LD_INT 0
28202: PUSH
28203: EMPTY
28204: LIST
28205: LIST
28206: PUSH
28207: LD_INT 2
28209: PUSH
28210: LD_INT 1
28212: PUSH
28213: EMPTY
28214: LIST
28215: LIST
28216: PUSH
28217: LD_INT 2
28219: PUSH
28220: LD_INT 2
28222: PUSH
28223: EMPTY
28224: LIST
28225: LIST
28226: PUSH
28227: LD_INT 1
28229: PUSH
28230: LD_INT 2
28232: PUSH
28233: EMPTY
28234: LIST
28235: LIST
28236: PUSH
28237: LD_INT 0
28239: PUSH
28240: LD_INT 2
28242: PUSH
28243: EMPTY
28244: LIST
28245: LIST
28246: PUSH
28247: LD_INT 1
28249: NEG
28250: PUSH
28251: LD_INT 1
28253: PUSH
28254: EMPTY
28255: LIST
28256: LIST
28257: PUSH
28258: LD_INT 2
28260: NEG
28261: PUSH
28262: LD_INT 0
28264: PUSH
28265: EMPTY
28266: LIST
28267: LIST
28268: PUSH
28269: LD_INT 2
28271: NEG
28272: PUSH
28273: LD_INT 1
28275: NEG
28276: PUSH
28277: EMPTY
28278: LIST
28279: LIST
28280: PUSH
28281: LD_INT 2
28283: NEG
28284: PUSH
28285: LD_INT 2
28287: NEG
28288: PUSH
28289: EMPTY
28290: LIST
28291: LIST
28292: PUSH
28293: LD_INT 2
28295: PUSH
28296: LD_INT 3
28298: PUSH
28299: EMPTY
28300: LIST
28301: LIST
28302: PUSH
28303: LD_INT 1
28305: PUSH
28306: LD_INT 3
28308: PUSH
28309: EMPTY
28310: LIST
28311: LIST
28312: PUSH
28313: LD_INT 1
28315: NEG
28316: PUSH
28317: LD_INT 2
28319: PUSH
28320: EMPTY
28321: LIST
28322: LIST
28323: PUSH
28324: LD_INT 2
28326: NEG
28327: PUSH
28328: LD_INT 1
28330: PUSH
28331: EMPTY
28332: LIST
28333: LIST
28334: PUSH
28335: EMPTY
28336: LIST
28337: LIST
28338: LIST
28339: LIST
28340: LIST
28341: LIST
28342: LIST
28343: LIST
28344: LIST
28345: LIST
28346: LIST
28347: LIST
28348: LIST
28349: LIST
28350: LIST
28351: LIST
28352: LIST
28353: LIST
28354: LIST
28355: LIST
28356: LIST
28357: LIST
28358: LIST
28359: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
28360: LD_ADDR_VAR 0 27
28364: PUSH
28365: LD_INT 0
28367: PUSH
28368: LD_INT 0
28370: PUSH
28371: EMPTY
28372: LIST
28373: LIST
28374: PUSH
28375: LD_INT 0
28377: PUSH
28378: LD_INT 1
28380: NEG
28381: PUSH
28382: EMPTY
28383: LIST
28384: LIST
28385: PUSH
28386: LD_INT 1
28388: PUSH
28389: LD_INT 0
28391: PUSH
28392: EMPTY
28393: LIST
28394: LIST
28395: PUSH
28396: LD_INT 1
28398: PUSH
28399: LD_INT 1
28401: PUSH
28402: EMPTY
28403: LIST
28404: LIST
28405: PUSH
28406: LD_INT 0
28408: PUSH
28409: LD_INT 1
28411: PUSH
28412: EMPTY
28413: LIST
28414: LIST
28415: PUSH
28416: LD_INT 1
28418: NEG
28419: PUSH
28420: LD_INT 0
28422: PUSH
28423: EMPTY
28424: LIST
28425: LIST
28426: PUSH
28427: LD_INT 1
28429: NEG
28430: PUSH
28431: LD_INT 1
28433: NEG
28434: PUSH
28435: EMPTY
28436: LIST
28437: LIST
28438: PUSH
28439: LD_INT 1
28441: NEG
28442: PUSH
28443: LD_INT 2
28445: NEG
28446: PUSH
28447: EMPTY
28448: LIST
28449: LIST
28450: PUSH
28451: LD_INT 0
28453: PUSH
28454: LD_INT 2
28456: NEG
28457: PUSH
28458: EMPTY
28459: LIST
28460: LIST
28461: PUSH
28462: LD_INT 1
28464: PUSH
28465: LD_INT 1
28467: NEG
28468: PUSH
28469: EMPTY
28470: LIST
28471: LIST
28472: PUSH
28473: LD_INT 2
28475: PUSH
28476: LD_INT 0
28478: PUSH
28479: EMPTY
28480: LIST
28481: LIST
28482: PUSH
28483: LD_INT 2
28485: PUSH
28486: LD_INT 1
28488: PUSH
28489: EMPTY
28490: LIST
28491: LIST
28492: PUSH
28493: LD_INT 2
28495: PUSH
28496: LD_INT 2
28498: PUSH
28499: EMPTY
28500: LIST
28501: LIST
28502: PUSH
28503: LD_INT 1
28505: PUSH
28506: LD_INT 2
28508: PUSH
28509: EMPTY
28510: LIST
28511: LIST
28512: PUSH
28513: LD_INT 0
28515: PUSH
28516: LD_INT 2
28518: PUSH
28519: EMPTY
28520: LIST
28521: LIST
28522: PUSH
28523: LD_INT 1
28525: NEG
28526: PUSH
28527: LD_INT 1
28529: PUSH
28530: EMPTY
28531: LIST
28532: LIST
28533: PUSH
28534: LD_INT 2
28536: NEG
28537: PUSH
28538: LD_INT 0
28540: PUSH
28541: EMPTY
28542: LIST
28543: LIST
28544: PUSH
28545: LD_INT 2
28547: NEG
28548: PUSH
28549: LD_INT 1
28551: NEG
28552: PUSH
28553: EMPTY
28554: LIST
28555: LIST
28556: PUSH
28557: LD_INT 2
28559: NEG
28560: PUSH
28561: LD_INT 2
28563: NEG
28564: PUSH
28565: EMPTY
28566: LIST
28567: LIST
28568: PUSH
28569: LD_INT 1
28571: NEG
28572: PUSH
28573: LD_INT 2
28575: PUSH
28576: EMPTY
28577: LIST
28578: LIST
28579: PUSH
28580: LD_INT 2
28582: NEG
28583: PUSH
28584: LD_INT 1
28586: PUSH
28587: EMPTY
28588: LIST
28589: LIST
28590: PUSH
28591: LD_INT 3
28593: NEG
28594: PUSH
28595: LD_INT 1
28597: NEG
28598: PUSH
28599: EMPTY
28600: LIST
28601: LIST
28602: PUSH
28603: LD_INT 3
28605: NEG
28606: PUSH
28607: LD_INT 2
28609: NEG
28610: PUSH
28611: EMPTY
28612: LIST
28613: LIST
28614: PUSH
28615: EMPTY
28616: LIST
28617: LIST
28618: LIST
28619: LIST
28620: LIST
28621: LIST
28622: LIST
28623: LIST
28624: LIST
28625: LIST
28626: LIST
28627: LIST
28628: LIST
28629: LIST
28630: LIST
28631: LIST
28632: LIST
28633: LIST
28634: LIST
28635: LIST
28636: LIST
28637: LIST
28638: LIST
28639: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
28640: LD_ADDR_VAR 0 28
28644: PUSH
28645: LD_INT 0
28647: PUSH
28648: LD_INT 0
28650: PUSH
28651: EMPTY
28652: LIST
28653: LIST
28654: PUSH
28655: LD_INT 0
28657: PUSH
28658: LD_INT 1
28660: NEG
28661: PUSH
28662: EMPTY
28663: LIST
28664: LIST
28665: PUSH
28666: LD_INT 1
28668: PUSH
28669: LD_INT 0
28671: PUSH
28672: EMPTY
28673: LIST
28674: LIST
28675: PUSH
28676: LD_INT 1
28678: PUSH
28679: LD_INT 1
28681: PUSH
28682: EMPTY
28683: LIST
28684: LIST
28685: PUSH
28686: LD_INT 0
28688: PUSH
28689: LD_INT 1
28691: PUSH
28692: EMPTY
28693: LIST
28694: LIST
28695: PUSH
28696: LD_INT 1
28698: NEG
28699: PUSH
28700: LD_INT 0
28702: PUSH
28703: EMPTY
28704: LIST
28705: LIST
28706: PUSH
28707: LD_INT 1
28709: NEG
28710: PUSH
28711: LD_INT 1
28713: NEG
28714: PUSH
28715: EMPTY
28716: LIST
28717: LIST
28718: PUSH
28719: LD_INT 1
28721: NEG
28722: PUSH
28723: LD_INT 2
28725: NEG
28726: PUSH
28727: EMPTY
28728: LIST
28729: LIST
28730: PUSH
28731: LD_INT 0
28733: PUSH
28734: LD_INT 2
28736: NEG
28737: PUSH
28738: EMPTY
28739: LIST
28740: LIST
28741: PUSH
28742: LD_INT 1
28744: PUSH
28745: LD_INT 1
28747: NEG
28748: PUSH
28749: EMPTY
28750: LIST
28751: LIST
28752: PUSH
28753: LD_INT 2
28755: PUSH
28756: LD_INT 0
28758: PUSH
28759: EMPTY
28760: LIST
28761: LIST
28762: PUSH
28763: LD_INT 2
28765: PUSH
28766: LD_INT 1
28768: PUSH
28769: EMPTY
28770: LIST
28771: LIST
28772: PUSH
28773: LD_INT 2
28775: PUSH
28776: LD_INT 2
28778: PUSH
28779: EMPTY
28780: LIST
28781: LIST
28782: PUSH
28783: LD_INT 1
28785: PUSH
28786: LD_INT 2
28788: PUSH
28789: EMPTY
28790: LIST
28791: LIST
28792: PUSH
28793: LD_INT 0
28795: PUSH
28796: LD_INT 2
28798: PUSH
28799: EMPTY
28800: LIST
28801: LIST
28802: PUSH
28803: LD_INT 1
28805: NEG
28806: PUSH
28807: LD_INT 1
28809: PUSH
28810: EMPTY
28811: LIST
28812: LIST
28813: PUSH
28814: LD_INT 2
28816: NEG
28817: PUSH
28818: LD_INT 0
28820: PUSH
28821: EMPTY
28822: LIST
28823: LIST
28824: PUSH
28825: LD_INT 2
28827: NEG
28828: PUSH
28829: LD_INT 1
28831: NEG
28832: PUSH
28833: EMPTY
28834: LIST
28835: LIST
28836: PUSH
28837: LD_INT 2
28839: NEG
28840: PUSH
28841: LD_INT 2
28843: NEG
28844: PUSH
28845: EMPTY
28846: LIST
28847: LIST
28848: PUSH
28849: LD_INT 2
28851: NEG
28852: PUSH
28853: LD_INT 3
28855: NEG
28856: PUSH
28857: EMPTY
28858: LIST
28859: LIST
28860: PUSH
28861: LD_INT 1
28863: NEG
28864: PUSH
28865: LD_INT 3
28867: NEG
28868: PUSH
28869: EMPTY
28870: LIST
28871: LIST
28872: PUSH
28873: LD_INT 3
28875: NEG
28876: PUSH
28877: LD_INT 1
28879: NEG
28880: PUSH
28881: EMPTY
28882: LIST
28883: LIST
28884: PUSH
28885: LD_INT 3
28887: NEG
28888: PUSH
28889: LD_INT 2
28891: NEG
28892: PUSH
28893: EMPTY
28894: LIST
28895: LIST
28896: PUSH
28897: EMPTY
28898: LIST
28899: LIST
28900: LIST
28901: LIST
28902: LIST
28903: LIST
28904: LIST
28905: LIST
28906: LIST
28907: LIST
28908: LIST
28909: LIST
28910: LIST
28911: LIST
28912: LIST
28913: LIST
28914: LIST
28915: LIST
28916: LIST
28917: LIST
28918: LIST
28919: LIST
28920: LIST
28921: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
28922: LD_ADDR_VAR 0 29
28926: PUSH
28927: LD_INT 0
28929: PUSH
28930: LD_INT 0
28932: PUSH
28933: EMPTY
28934: LIST
28935: LIST
28936: PUSH
28937: LD_INT 0
28939: PUSH
28940: LD_INT 1
28942: NEG
28943: PUSH
28944: EMPTY
28945: LIST
28946: LIST
28947: PUSH
28948: LD_INT 1
28950: PUSH
28951: LD_INT 0
28953: PUSH
28954: EMPTY
28955: LIST
28956: LIST
28957: PUSH
28958: LD_INT 1
28960: PUSH
28961: LD_INT 1
28963: PUSH
28964: EMPTY
28965: LIST
28966: LIST
28967: PUSH
28968: LD_INT 0
28970: PUSH
28971: LD_INT 1
28973: PUSH
28974: EMPTY
28975: LIST
28976: LIST
28977: PUSH
28978: LD_INT 1
28980: NEG
28981: PUSH
28982: LD_INT 0
28984: PUSH
28985: EMPTY
28986: LIST
28987: LIST
28988: PUSH
28989: LD_INT 1
28991: NEG
28992: PUSH
28993: LD_INT 1
28995: NEG
28996: PUSH
28997: EMPTY
28998: LIST
28999: LIST
29000: PUSH
29001: LD_INT 1
29003: NEG
29004: PUSH
29005: LD_INT 2
29007: NEG
29008: PUSH
29009: EMPTY
29010: LIST
29011: LIST
29012: PUSH
29013: LD_INT 0
29015: PUSH
29016: LD_INT 2
29018: NEG
29019: PUSH
29020: EMPTY
29021: LIST
29022: LIST
29023: PUSH
29024: LD_INT 1
29026: PUSH
29027: LD_INT 1
29029: NEG
29030: PUSH
29031: EMPTY
29032: LIST
29033: LIST
29034: PUSH
29035: LD_INT 2
29037: PUSH
29038: LD_INT 0
29040: PUSH
29041: EMPTY
29042: LIST
29043: LIST
29044: PUSH
29045: LD_INT 2
29047: PUSH
29048: LD_INT 1
29050: PUSH
29051: EMPTY
29052: LIST
29053: LIST
29054: PUSH
29055: LD_INT 1
29057: PUSH
29058: LD_INT 2
29060: PUSH
29061: EMPTY
29062: LIST
29063: LIST
29064: PUSH
29065: LD_INT 0
29067: PUSH
29068: LD_INT 2
29070: PUSH
29071: EMPTY
29072: LIST
29073: LIST
29074: PUSH
29075: LD_INT 1
29077: NEG
29078: PUSH
29079: LD_INT 1
29081: PUSH
29082: EMPTY
29083: LIST
29084: LIST
29085: PUSH
29086: LD_INT 2
29088: NEG
29089: PUSH
29090: LD_INT 1
29092: NEG
29093: PUSH
29094: EMPTY
29095: LIST
29096: LIST
29097: PUSH
29098: LD_INT 2
29100: NEG
29101: PUSH
29102: LD_INT 2
29104: NEG
29105: PUSH
29106: EMPTY
29107: LIST
29108: LIST
29109: PUSH
29110: LD_INT 2
29112: NEG
29113: PUSH
29114: LD_INT 3
29116: NEG
29117: PUSH
29118: EMPTY
29119: LIST
29120: LIST
29121: PUSH
29122: LD_INT 2
29124: PUSH
29125: LD_INT 1
29127: NEG
29128: PUSH
29129: EMPTY
29130: LIST
29131: LIST
29132: PUSH
29133: LD_INT 3
29135: PUSH
29136: LD_INT 1
29138: PUSH
29139: EMPTY
29140: LIST
29141: LIST
29142: PUSH
29143: LD_INT 1
29145: PUSH
29146: LD_INT 3
29148: PUSH
29149: EMPTY
29150: LIST
29151: LIST
29152: PUSH
29153: LD_INT 1
29155: NEG
29156: PUSH
29157: LD_INT 2
29159: PUSH
29160: EMPTY
29161: LIST
29162: LIST
29163: PUSH
29164: LD_INT 3
29166: NEG
29167: PUSH
29168: LD_INT 2
29170: NEG
29171: PUSH
29172: EMPTY
29173: LIST
29174: LIST
29175: PUSH
29176: EMPTY
29177: LIST
29178: LIST
29179: LIST
29180: LIST
29181: LIST
29182: LIST
29183: LIST
29184: LIST
29185: LIST
29186: LIST
29187: LIST
29188: LIST
29189: LIST
29190: LIST
29191: LIST
29192: LIST
29193: LIST
29194: LIST
29195: LIST
29196: LIST
29197: LIST
29198: LIST
29199: LIST
29200: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
29201: LD_ADDR_VAR 0 30
29205: PUSH
29206: LD_INT 0
29208: PUSH
29209: LD_INT 0
29211: PUSH
29212: EMPTY
29213: LIST
29214: LIST
29215: PUSH
29216: LD_INT 0
29218: PUSH
29219: LD_INT 1
29221: NEG
29222: PUSH
29223: EMPTY
29224: LIST
29225: LIST
29226: PUSH
29227: LD_INT 1
29229: PUSH
29230: LD_INT 0
29232: PUSH
29233: EMPTY
29234: LIST
29235: LIST
29236: PUSH
29237: LD_INT 1
29239: PUSH
29240: LD_INT 1
29242: PUSH
29243: EMPTY
29244: LIST
29245: LIST
29246: PUSH
29247: LD_INT 0
29249: PUSH
29250: LD_INT 1
29252: PUSH
29253: EMPTY
29254: LIST
29255: LIST
29256: PUSH
29257: LD_INT 1
29259: NEG
29260: PUSH
29261: LD_INT 0
29263: PUSH
29264: EMPTY
29265: LIST
29266: LIST
29267: PUSH
29268: LD_INT 1
29270: NEG
29271: PUSH
29272: LD_INT 1
29274: NEG
29275: PUSH
29276: EMPTY
29277: LIST
29278: LIST
29279: PUSH
29280: LD_INT 1
29282: NEG
29283: PUSH
29284: LD_INT 2
29286: NEG
29287: PUSH
29288: EMPTY
29289: LIST
29290: LIST
29291: PUSH
29292: LD_INT 0
29294: PUSH
29295: LD_INT 2
29297: NEG
29298: PUSH
29299: EMPTY
29300: LIST
29301: LIST
29302: PUSH
29303: LD_INT 1
29305: PUSH
29306: LD_INT 1
29308: NEG
29309: PUSH
29310: EMPTY
29311: LIST
29312: LIST
29313: PUSH
29314: LD_INT 2
29316: PUSH
29317: LD_INT 0
29319: PUSH
29320: EMPTY
29321: LIST
29322: LIST
29323: PUSH
29324: LD_INT 2
29326: PUSH
29327: LD_INT 1
29329: PUSH
29330: EMPTY
29331: LIST
29332: LIST
29333: PUSH
29334: LD_INT 2
29336: PUSH
29337: LD_INT 2
29339: PUSH
29340: EMPTY
29341: LIST
29342: LIST
29343: PUSH
29344: LD_INT 1
29346: PUSH
29347: LD_INT 2
29349: PUSH
29350: EMPTY
29351: LIST
29352: LIST
29353: PUSH
29354: LD_INT 1
29356: NEG
29357: PUSH
29358: LD_INT 1
29360: PUSH
29361: EMPTY
29362: LIST
29363: LIST
29364: PUSH
29365: LD_INT 2
29367: NEG
29368: PUSH
29369: LD_INT 0
29371: PUSH
29372: EMPTY
29373: LIST
29374: LIST
29375: PUSH
29376: LD_INT 2
29378: NEG
29379: PUSH
29380: LD_INT 1
29382: NEG
29383: PUSH
29384: EMPTY
29385: LIST
29386: LIST
29387: PUSH
29388: LD_INT 1
29390: NEG
29391: PUSH
29392: LD_INT 3
29394: NEG
29395: PUSH
29396: EMPTY
29397: LIST
29398: LIST
29399: PUSH
29400: LD_INT 1
29402: PUSH
29403: LD_INT 2
29405: NEG
29406: PUSH
29407: EMPTY
29408: LIST
29409: LIST
29410: PUSH
29411: LD_INT 3
29413: PUSH
29414: LD_INT 2
29416: PUSH
29417: EMPTY
29418: LIST
29419: LIST
29420: PUSH
29421: LD_INT 2
29423: PUSH
29424: LD_INT 3
29426: PUSH
29427: EMPTY
29428: LIST
29429: LIST
29430: PUSH
29431: LD_INT 2
29433: NEG
29434: PUSH
29435: LD_INT 1
29437: PUSH
29438: EMPTY
29439: LIST
29440: LIST
29441: PUSH
29442: LD_INT 3
29444: NEG
29445: PUSH
29446: LD_INT 1
29448: NEG
29449: PUSH
29450: EMPTY
29451: LIST
29452: LIST
29453: PUSH
29454: EMPTY
29455: LIST
29456: LIST
29457: LIST
29458: LIST
29459: LIST
29460: LIST
29461: LIST
29462: LIST
29463: LIST
29464: LIST
29465: LIST
29466: LIST
29467: LIST
29468: LIST
29469: LIST
29470: LIST
29471: LIST
29472: LIST
29473: LIST
29474: LIST
29475: LIST
29476: LIST
29477: LIST
29478: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
29479: LD_ADDR_VAR 0 31
29483: PUSH
29484: LD_INT 0
29486: PUSH
29487: LD_INT 0
29489: PUSH
29490: EMPTY
29491: LIST
29492: LIST
29493: PUSH
29494: LD_INT 0
29496: PUSH
29497: LD_INT 1
29499: NEG
29500: PUSH
29501: EMPTY
29502: LIST
29503: LIST
29504: PUSH
29505: LD_INT 1
29507: PUSH
29508: LD_INT 0
29510: PUSH
29511: EMPTY
29512: LIST
29513: LIST
29514: PUSH
29515: LD_INT 1
29517: PUSH
29518: LD_INT 1
29520: PUSH
29521: EMPTY
29522: LIST
29523: LIST
29524: PUSH
29525: LD_INT 0
29527: PUSH
29528: LD_INT 1
29530: PUSH
29531: EMPTY
29532: LIST
29533: LIST
29534: PUSH
29535: LD_INT 1
29537: NEG
29538: PUSH
29539: LD_INT 0
29541: PUSH
29542: EMPTY
29543: LIST
29544: LIST
29545: PUSH
29546: LD_INT 1
29548: NEG
29549: PUSH
29550: LD_INT 1
29552: NEG
29553: PUSH
29554: EMPTY
29555: LIST
29556: LIST
29557: PUSH
29558: LD_INT 1
29560: NEG
29561: PUSH
29562: LD_INT 2
29564: NEG
29565: PUSH
29566: EMPTY
29567: LIST
29568: LIST
29569: PUSH
29570: LD_INT 1
29572: PUSH
29573: LD_INT 1
29575: NEG
29576: PUSH
29577: EMPTY
29578: LIST
29579: LIST
29580: PUSH
29581: LD_INT 2
29583: PUSH
29584: LD_INT 0
29586: PUSH
29587: EMPTY
29588: LIST
29589: LIST
29590: PUSH
29591: LD_INT 2
29593: PUSH
29594: LD_INT 1
29596: PUSH
29597: EMPTY
29598: LIST
29599: LIST
29600: PUSH
29601: LD_INT 2
29603: PUSH
29604: LD_INT 2
29606: PUSH
29607: EMPTY
29608: LIST
29609: LIST
29610: PUSH
29611: LD_INT 1
29613: PUSH
29614: LD_INT 2
29616: PUSH
29617: EMPTY
29618: LIST
29619: LIST
29620: PUSH
29621: LD_INT 0
29623: PUSH
29624: LD_INT 2
29626: PUSH
29627: EMPTY
29628: LIST
29629: LIST
29630: PUSH
29631: LD_INT 1
29633: NEG
29634: PUSH
29635: LD_INT 1
29637: PUSH
29638: EMPTY
29639: LIST
29640: LIST
29641: PUSH
29642: LD_INT 2
29644: NEG
29645: PUSH
29646: LD_INT 1
29648: NEG
29649: PUSH
29650: EMPTY
29651: LIST
29652: LIST
29653: PUSH
29654: LD_INT 2
29656: NEG
29657: PUSH
29658: LD_INT 2
29660: NEG
29661: PUSH
29662: EMPTY
29663: LIST
29664: LIST
29665: PUSH
29666: LD_INT 2
29668: NEG
29669: PUSH
29670: LD_INT 3
29672: NEG
29673: PUSH
29674: EMPTY
29675: LIST
29676: LIST
29677: PUSH
29678: LD_INT 2
29680: PUSH
29681: LD_INT 1
29683: NEG
29684: PUSH
29685: EMPTY
29686: LIST
29687: LIST
29688: PUSH
29689: LD_INT 3
29691: PUSH
29692: LD_INT 1
29694: PUSH
29695: EMPTY
29696: LIST
29697: LIST
29698: PUSH
29699: LD_INT 1
29701: PUSH
29702: LD_INT 3
29704: PUSH
29705: EMPTY
29706: LIST
29707: LIST
29708: PUSH
29709: LD_INT 1
29711: NEG
29712: PUSH
29713: LD_INT 2
29715: PUSH
29716: EMPTY
29717: LIST
29718: LIST
29719: PUSH
29720: LD_INT 3
29722: NEG
29723: PUSH
29724: LD_INT 2
29726: NEG
29727: PUSH
29728: EMPTY
29729: LIST
29730: LIST
29731: PUSH
29732: EMPTY
29733: LIST
29734: LIST
29735: LIST
29736: LIST
29737: LIST
29738: LIST
29739: LIST
29740: LIST
29741: LIST
29742: LIST
29743: LIST
29744: LIST
29745: LIST
29746: LIST
29747: LIST
29748: LIST
29749: LIST
29750: LIST
29751: LIST
29752: LIST
29753: LIST
29754: LIST
29755: LIST
29756: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
29757: LD_ADDR_VAR 0 32
29761: PUSH
29762: LD_INT 0
29764: PUSH
29765: LD_INT 0
29767: PUSH
29768: EMPTY
29769: LIST
29770: LIST
29771: PUSH
29772: LD_INT 0
29774: PUSH
29775: LD_INT 1
29777: NEG
29778: PUSH
29779: EMPTY
29780: LIST
29781: LIST
29782: PUSH
29783: LD_INT 1
29785: PUSH
29786: LD_INT 0
29788: PUSH
29789: EMPTY
29790: LIST
29791: LIST
29792: PUSH
29793: LD_INT 1
29795: PUSH
29796: LD_INT 1
29798: PUSH
29799: EMPTY
29800: LIST
29801: LIST
29802: PUSH
29803: LD_INT 0
29805: PUSH
29806: LD_INT 1
29808: PUSH
29809: EMPTY
29810: LIST
29811: LIST
29812: PUSH
29813: LD_INT 1
29815: NEG
29816: PUSH
29817: LD_INT 0
29819: PUSH
29820: EMPTY
29821: LIST
29822: LIST
29823: PUSH
29824: LD_INT 1
29826: NEG
29827: PUSH
29828: LD_INT 1
29830: NEG
29831: PUSH
29832: EMPTY
29833: LIST
29834: LIST
29835: PUSH
29836: LD_INT 1
29838: NEG
29839: PUSH
29840: LD_INT 2
29842: NEG
29843: PUSH
29844: EMPTY
29845: LIST
29846: LIST
29847: PUSH
29848: LD_INT 0
29850: PUSH
29851: LD_INT 2
29853: NEG
29854: PUSH
29855: EMPTY
29856: LIST
29857: LIST
29858: PUSH
29859: LD_INT 1
29861: PUSH
29862: LD_INT 1
29864: NEG
29865: PUSH
29866: EMPTY
29867: LIST
29868: LIST
29869: PUSH
29870: LD_INT 2
29872: PUSH
29873: LD_INT 1
29875: PUSH
29876: EMPTY
29877: LIST
29878: LIST
29879: PUSH
29880: LD_INT 2
29882: PUSH
29883: LD_INT 2
29885: PUSH
29886: EMPTY
29887: LIST
29888: LIST
29889: PUSH
29890: LD_INT 1
29892: PUSH
29893: LD_INT 2
29895: PUSH
29896: EMPTY
29897: LIST
29898: LIST
29899: PUSH
29900: LD_INT 0
29902: PUSH
29903: LD_INT 2
29905: PUSH
29906: EMPTY
29907: LIST
29908: LIST
29909: PUSH
29910: LD_INT 1
29912: NEG
29913: PUSH
29914: LD_INT 1
29916: PUSH
29917: EMPTY
29918: LIST
29919: LIST
29920: PUSH
29921: LD_INT 2
29923: NEG
29924: PUSH
29925: LD_INT 0
29927: PUSH
29928: EMPTY
29929: LIST
29930: LIST
29931: PUSH
29932: LD_INT 2
29934: NEG
29935: PUSH
29936: LD_INT 1
29938: NEG
29939: PUSH
29940: EMPTY
29941: LIST
29942: LIST
29943: PUSH
29944: LD_INT 1
29946: NEG
29947: PUSH
29948: LD_INT 3
29950: NEG
29951: PUSH
29952: EMPTY
29953: LIST
29954: LIST
29955: PUSH
29956: LD_INT 1
29958: PUSH
29959: LD_INT 2
29961: NEG
29962: PUSH
29963: EMPTY
29964: LIST
29965: LIST
29966: PUSH
29967: LD_INT 3
29969: PUSH
29970: LD_INT 2
29972: PUSH
29973: EMPTY
29974: LIST
29975: LIST
29976: PUSH
29977: LD_INT 2
29979: PUSH
29980: LD_INT 3
29982: PUSH
29983: EMPTY
29984: LIST
29985: LIST
29986: PUSH
29987: LD_INT 2
29989: NEG
29990: PUSH
29991: LD_INT 1
29993: PUSH
29994: EMPTY
29995: LIST
29996: LIST
29997: PUSH
29998: LD_INT 3
30000: NEG
30001: PUSH
30002: LD_INT 1
30004: NEG
30005: PUSH
30006: EMPTY
30007: LIST
30008: LIST
30009: PUSH
30010: EMPTY
30011: LIST
30012: LIST
30013: LIST
30014: LIST
30015: LIST
30016: LIST
30017: LIST
30018: LIST
30019: LIST
30020: LIST
30021: LIST
30022: LIST
30023: LIST
30024: LIST
30025: LIST
30026: LIST
30027: LIST
30028: LIST
30029: LIST
30030: LIST
30031: LIST
30032: LIST
30033: LIST
30034: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
30035: LD_ADDR_VAR 0 33
30039: PUSH
30040: LD_INT 0
30042: PUSH
30043: LD_INT 0
30045: PUSH
30046: EMPTY
30047: LIST
30048: LIST
30049: PUSH
30050: LD_INT 0
30052: PUSH
30053: LD_INT 1
30055: NEG
30056: PUSH
30057: EMPTY
30058: LIST
30059: LIST
30060: PUSH
30061: LD_INT 1
30063: PUSH
30064: LD_INT 0
30066: PUSH
30067: EMPTY
30068: LIST
30069: LIST
30070: PUSH
30071: LD_INT 1
30073: PUSH
30074: LD_INT 1
30076: PUSH
30077: EMPTY
30078: LIST
30079: LIST
30080: PUSH
30081: LD_INT 0
30083: PUSH
30084: LD_INT 1
30086: PUSH
30087: EMPTY
30088: LIST
30089: LIST
30090: PUSH
30091: LD_INT 1
30093: NEG
30094: PUSH
30095: LD_INT 0
30097: PUSH
30098: EMPTY
30099: LIST
30100: LIST
30101: PUSH
30102: LD_INT 1
30104: NEG
30105: PUSH
30106: LD_INT 1
30108: NEG
30109: PUSH
30110: EMPTY
30111: LIST
30112: LIST
30113: PUSH
30114: LD_INT 1
30116: NEG
30117: PUSH
30118: LD_INT 2
30120: NEG
30121: PUSH
30122: EMPTY
30123: LIST
30124: LIST
30125: PUSH
30126: LD_INT 1
30128: PUSH
30129: LD_INT 1
30131: NEG
30132: PUSH
30133: EMPTY
30134: LIST
30135: LIST
30136: PUSH
30137: LD_INT 2
30139: PUSH
30140: LD_INT 0
30142: PUSH
30143: EMPTY
30144: LIST
30145: LIST
30146: PUSH
30147: LD_INT 2
30149: PUSH
30150: LD_INT 1
30152: PUSH
30153: EMPTY
30154: LIST
30155: LIST
30156: PUSH
30157: LD_INT 1
30159: PUSH
30160: LD_INT 2
30162: PUSH
30163: EMPTY
30164: LIST
30165: LIST
30166: PUSH
30167: LD_INT 0
30169: PUSH
30170: LD_INT 2
30172: PUSH
30173: EMPTY
30174: LIST
30175: LIST
30176: PUSH
30177: LD_INT 1
30179: NEG
30180: PUSH
30181: LD_INT 1
30183: PUSH
30184: EMPTY
30185: LIST
30186: LIST
30187: PUSH
30188: LD_INT 2
30190: NEG
30191: PUSH
30192: LD_INT 0
30194: PUSH
30195: EMPTY
30196: LIST
30197: LIST
30198: PUSH
30199: LD_INT 2
30201: NEG
30202: PUSH
30203: LD_INT 1
30205: NEG
30206: PUSH
30207: EMPTY
30208: LIST
30209: LIST
30210: PUSH
30211: LD_INT 2
30213: NEG
30214: PUSH
30215: LD_INT 2
30217: NEG
30218: PUSH
30219: EMPTY
30220: LIST
30221: LIST
30222: PUSH
30223: LD_INT 2
30225: NEG
30226: PUSH
30227: LD_INT 3
30229: NEG
30230: PUSH
30231: EMPTY
30232: LIST
30233: LIST
30234: PUSH
30235: LD_INT 2
30237: PUSH
30238: LD_INT 1
30240: NEG
30241: PUSH
30242: EMPTY
30243: LIST
30244: LIST
30245: PUSH
30246: LD_INT 3
30248: PUSH
30249: LD_INT 1
30251: PUSH
30252: EMPTY
30253: LIST
30254: LIST
30255: PUSH
30256: LD_INT 1
30258: PUSH
30259: LD_INT 3
30261: PUSH
30262: EMPTY
30263: LIST
30264: LIST
30265: PUSH
30266: LD_INT 1
30268: NEG
30269: PUSH
30270: LD_INT 2
30272: PUSH
30273: EMPTY
30274: LIST
30275: LIST
30276: PUSH
30277: LD_INT 3
30279: NEG
30280: PUSH
30281: LD_INT 2
30283: NEG
30284: PUSH
30285: EMPTY
30286: LIST
30287: LIST
30288: PUSH
30289: EMPTY
30290: LIST
30291: LIST
30292: LIST
30293: LIST
30294: LIST
30295: LIST
30296: LIST
30297: LIST
30298: LIST
30299: LIST
30300: LIST
30301: LIST
30302: LIST
30303: LIST
30304: LIST
30305: LIST
30306: LIST
30307: LIST
30308: LIST
30309: LIST
30310: LIST
30311: LIST
30312: LIST
30313: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
30314: LD_ADDR_VAR 0 34
30318: PUSH
30319: LD_INT 0
30321: PUSH
30322: LD_INT 0
30324: PUSH
30325: EMPTY
30326: LIST
30327: LIST
30328: PUSH
30329: LD_INT 0
30331: PUSH
30332: LD_INT 1
30334: NEG
30335: PUSH
30336: EMPTY
30337: LIST
30338: LIST
30339: PUSH
30340: LD_INT 1
30342: PUSH
30343: LD_INT 0
30345: PUSH
30346: EMPTY
30347: LIST
30348: LIST
30349: PUSH
30350: LD_INT 1
30352: PUSH
30353: LD_INT 1
30355: PUSH
30356: EMPTY
30357: LIST
30358: LIST
30359: PUSH
30360: LD_INT 0
30362: PUSH
30363: LD_INT 1
30365: PUSH
30366: EMPTY
30367: LIST
30368: LIST
30369: PUSH
30370: LD_INT 1
30372: NEG
30373: PUSH
30374: LD_INT 0
30376: PUSH
30377: EMPTY
30378: LIST
30379: LIST
30380: PUSH
30381: LD_INT 1
30383: NEG
30384: PUSH
30385: LD_INT 1
30387: NEG
30388: PUSH
30389: EMPTY
30390: LIST
30391: LIST
30392: PUSH
30393: LD_INT 1
30395: NEG
30396: PUSH
30397: LD_INT 2
30399: NEG
30400: PUSH
30401: EMPTY
30402: LIST
30403: LIST
30404: PUSH
30405: LD_INT 0
30407: PUSH
30408: LD_INT 2
30410: NEG
30411: PUSH
30412: EMPTY
30413: LIST
30414: LIST
30415: PUSH
30416: LD_INT 1
30418: PUSH
30419: LD_INT 1
30421: NEG
30422: PUSH
30423: EMPTY
30424: LIST
30425: LIST
30426: PUSH
30427: LD_INT 2
30429: PUSH
30430: LD_INT 1
30432: PUSH
30433: EMPTY
30434: LIST
30435: LIST
30436: PUSH
30437: LD_INT 2
30439: PUSH
30440: LD_INT 2
30442: PUSH
30443: EMPTY
30444: LIST
30445: LIST
30446: PUSH
30447: LD_INT 1
30449: PUSH
30450: LD_INT 2
30452: PUSH
30453: EMPTY
30454: LIST
30455: LIST
30456: PUSH
30457: LD_INT 1
30459: NEG
30460: PUSH
30461: LD_INT 1
30463: PUSH
30464: EMPTY
30465: LIST
30466: LIST
30467: PUSH
30468: LD_INT 2
30470: NEG
30471: PUSH
30472: LD_INT 0
30474: PUSH
30475: EMPTY
30476: LIST
30477: LIST
30478: PUSH
30479: LD_INT 2
30481: NEG
30482: PUSH
30483: LD_INT 1
30485: NEG
30486: PUSH
30487: EMPTY
30488: LIST
30489: LIST
30490: PUSH
30491: LD_INT 2
30493: NEG
30494: PUSH
30495: LD_INT 2
30497: NEG
30498: PUSH
30499: EMPTY
30500: LIST
30501: LIST
30502: PUSH
30503: LD_INT 1
30505: NEG
30506: PUSH
30507: LD_INT 3
30509: NEG
30510: PUSH
30511: EMPTY
30512: LIST
30513: LIST
30514: PUSH
30515: LD_INT 1
30517: PUSH
30518: LD_INT 2
30520: NEG
30521: PUSH
30522: EMPTY
30523: LIST
30524: LIST
30525: PUSH
30526: LD_INT 3
30528: PUSH
30529: LD_INT 2
30531: PUSH
30532: EMPTY
30533: LIST
30534: LIST
30535: PUSH
30536: LD_INT 2
30538: PUSH
30539: LD_INT 3
30541: PUSH
30542: EMPTY
30543: LIST
30544: LIST
30545: PUSH
30546: LD_INT 2
30548: NEG
30549: PUSH
30550: LD_INT 1
30552: PUSH
30553: EMPTY
30554: LIST
30555: LIST
30556: PUSH
30557: LD_INT 3
30559: NEG
30560: PUSH
30561: LD_INT 1
30563: NEG
30564: PUSH
30565: EMPTY
30566: LIST
30567: LIST
30568: PUSH
30569: EMPTY
30570: LIST
30571: LIST
30572: LIST
30573: LIST
30574: LIST
30575: LIST
30576: LIST
30577: LIST
30578: LIST
30579: LIST
30580: LIST
30581: LIST
30582: LIST
30583: LIST
30584: LIST
30585: LIST
30586: LIST
30587: LIST
30588: LIST
30589: LIST
30590: LIST
30591: LIST
30592: LIST
30593: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
30594: LD_ADDR_VAR 0 35
30598: PUSH
30599: LD_INT 0
30601: PUSH
30602: LD_INT 0
30604: PUSH
30605: EMPTY
30606: LIST
30607: LIST
30608: PUSH
30609: LD_INT 0
30611: PUSH
30612: LD_INT 1
30614: NEG
30615: PUSH
30616: EMPTY
30617: LIST
30618: LIST
30619: PUSH
30620: LD_INT 1
30622: PUSH
30623: LD_INT 0
30625: PUSH
30626: EMPTY
30627: LIST
30628: LIST
30629: PUSH
30630: LD_INT 1
30632: PUSH
30633: LD_INT 1
30635: PUSH
30636: EMPTY
30637: LIST
30638: LIST
30639: PUSH
30640: LD_INT 0
30642: PUSH
30643: LD_INT 1
30645: PUSH
30646: EMPTY
30647: LIST
30648: LIST
30649: PUSH
30650: LD_INT 1
30652: NEG
30653: PUSH
30654: LD_INT 0
30656: PUSH
30657: EMPTY
30658: LIST
30659: LIST
30660: PUSH
30661: LD_INT 1
30663: NEG
30664: PUSH
30665: LD_INT 1
30667: NEG
30668: PUSH
30669: EMPTY
30670: LIST
30671: LIST
30672: PUSH
30673: LD_INT 2
30675: PUSH
30676: LD_INT 1
30678: PUSH
30679: EMPTY
30680: LIST
30681: LIST
30682: PUSH
30683: LD_INT 2
30685: NEG
30686: PUSH
30687: LD_INT 1
30689: NEG
30690: PUSH
30691: EMPTY
30692: LIST
30693: LIST
30694: PUSH
30695: EMPTY
30696: LIST
30697: LIST
30698: LIST
30699: LIST
30700: LIST
30701: LIST
30702: LIST
30703: LIST
30704: LIST
30705: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
30706: LD_ADDR_VAR 0 36
30710: PUSH
30711: LD_INT 0
30713: PUSH
30714: LD_INT 0
30716: PUSH
30717: EMPTY
30718: LIST
30719: LIST
30720: PUSH
30721: LD_INT 0
30723: PUSH
30724: LD_INT 1
30726: NEG
30727: PUSH
30728: EMPTY
30729: LIST
30730: LIST
30731: PUSH
30732: LD_INT 1
30734: PUSH
30735: LD_INT 0
30737: PUSH
30738: EMPTY
30739: LIST
30740: LIST
30741: PUSH
30742: LD_INT 1
30744: PUSH
30745: LD_INT 1
30747: PUSH
30748: EMPTY
30749: LIST
30750: LIST
30751: PUSH
30752: LD_INT 0
30754: PUSH
30755: LD_INT 1
30757: PUSH
30758: EMPTY
30759: LIST
30760: LIST
30761: PUSH
30762: LD_INT 1
30764: NEG
30765: PUSH
30766: LD_INT 0
30768: PUSH
30769: EMPTY
30770: LIST
30771: LIST
30772: PUSH
30773: LD_INT 1
30775: NEG
30776: PUSH
30777: LD_INT 1
30779: NEG
30780: PUSH
30781: EMPTY
30782: LIST
30783: LIST
30784: PUSH
30785: LD_INT 1
30787: NEG
30788: PUSH
30789: LD_INT 2
30791: NEG
30792: PUSH
30793: EMPTY
30794: LIST
30795: LIST
30796: PUSH
30797: LD_INT 1
30799: PUSH
30800: LD_INT 2
30802: PUSH
30803: EMPTY
30804: LIST
30805: LIST
30806: PUSH
30807: EMPTY
30808: LIST
30809: LIST
30810: LIST
30811: LIST
30812: LIST
30813: LIST
30814: LIST
30815: LIST
30816: LIST
30817: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
30818: LD_ADDR_VAR 0 37
30822: PUSH
30823: LD_INT 0
30825: PUSH
30826: LD_INT 0
30828: PUSH
30829: EMPTY
30830: LIST
30831: LIST
30832: PUSH
30833: LD_INT 0
30835: PUSH
30836: LD_INT 1
30838: NEG
30839: PUSH
30840: EMPTY
30841: LIST
30842: LIST
30843: PUSH
30844: LD_INT 1
30846: PUSH
30847: LD_INT 0
30849: PUSH
30850: EMPTY
30851: LIST
30852: LIST
30853: PUSH
30854: LD_INT 1
30856: PUSH
30857: LD_INT 1
30859: PUSH
30860: EMPTY
30861: LIST
30862: LIST
30863: PUSH
30864: LD_INT 0
30866: PUSH
30867: LD_INT 1
30869: PUSH
30870: EMPTY
30871: LIST
30872: LIST
30873: PUSH
30874: LD_INT 1
30876: NEG
30877: PUSH
30878: LD_INT 0
30880: PUSH
30881: EMPTY
30882: LIST
30883: LIST
30884: PUSH
30885: LD_INT 1
30887: NEG
30888: PUSH
30889: LD_INT 1
30891: NEG
30892: PUSH
30893: EMPTY
30894: LIST
30895: LIST
30896: PUSH
30897: LD_INT 1
30899: PUSH
30900: LD_INT 1
30902: NEG
30903: PUSH
30904: EMPTY
30905: LIST
30906: LIST
30907: PUSH
30908: LD_INT 1
30910: NEG
30911: PUSH
30912: LD_INT 1
30914: PUSH
30915: EMPTY
30916: LIST
30917: LIST
30918: PUSH
30919: EMPTY
30920: LIST
30921: LIST
30922: LIST
30923: LIST
30924: LIST
30925: LIST
30926: LIST
30927: LIST
30928: LIST
30929: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
30930: LD_ADDR_VAR 0 38
30934: PUSH
30935: LD_INT 0
30937: PUSH
30938: LD_INT 0
30940: PUSH
30941: EMPTY
30942: LIST
30943: LIST
30944: PUSH
30945: LD_INT 0
30947: PUSH
30948: LD_INT 1
30950: NEG
30951: PUSH
30952: EMPTY
30953: LIST
30954: LIST
30955: PUSH
30956: LD_INT 1
30958: PUSH
30959: LD_INT 0
30961: PUSH
30962: EMPTY
30963: LIST
30964: LIST
30965: PUSH
30966: LD_INT 1
30968: PUSH
30969: LD_INT 1
30971: PUSH
30972: EMPTY
30973: LIST
30974: LIST
30975: PUSH
30976: LD_INT 0
30978: PUSH
30979: LD_INT 1
30981: PUSH
30982: EMPTY
30983: LIST
30984: LIST
30985: PUSH
30986: LD_INT 1
30988: NEG
30989: PUSH
30990: LD_INT 0
30992: PUSH
30993: EMPTY
30994: LIST
30995: LIST
30996: PUSH
30997: LD_INT 1
30999: NEG
31000: PUSH
31001: LD_INT 1
31003: NEG
31004: PUSH
31005: EMPTY
31006: LIST
31007: LIST
31008: PUSH
31009: LD_INT 2
31011: PUSH
31012: LD_INT 1
31014: PUSH
31015: EMPTY
31016: LIST
31017: LIST
31018: PUSH
31019: LD_INT 2
31021: NEG
31022: PUSH
31023: LD_INT 1
31025: NEG
31026: PUSH
31027: EMPTY
31028: LIST
31029: LIST
31030: PUSH
31031: EMPTY
31032: LIST
31033: LIST
31034: LIST
31035: LIST
31036: LIST
31037: LIST
31038: LIST
31039: LIST
31040: LIST
31041: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
31042: LD_ADDR_VAR 0 39
31046: PUSH
31047: LD_INT 0
31049: PUSH
31050: LD_INT 0
31052: PUSH
31053: EMPTY
31054: LIST
31055: LIST
31056: PUSH
31057: LD_INT 0
31059: PUSH
31060: LD_INT 1
31062: NEG
31063: PUSH
31064: EMPTY
31065: LIST
31066: LIST
31067: PUSH
31068: LD_INT 1
31070: PUSH
31071: LD_INT 0
31073: PUSH
31074: EMPTY
31075: LIST
31076: LIST
31077: PUSH
31078: LD_INT 1
31080: PUSH
31081: LD_INT 1
31083: PUSH
31084: EMPTY
31085: LIST
31086: LIST
31087: PUSH
31088: LD_INT 0
31090: PUSH
31091: LD_INT 1
31093: PUSH
31094: EMPTY
31095: LIST
31096: LIST
31097: PUSH
31098: LD_INT 1
31100: NEG
31101: PUSH
31102: LD_INT 0
31104: PUSH
31105: EMPTY
31106: LIST
31107: LIST
31108: PUSH
31109: LD_INT 1
31111: NEG
31112: PUSH
31113: LD_INT 1
31115: NEG
31116: PUSH
31117: EMPTY
31118: LIST
31119: LIST
31120: PUSH
31121: LD_INT 1
31123: NEG
31124: PUSH
31125: LD_INT 2
31127: NEG
31128: PUSH
31129: EMPTY
31130: LIST
31131: LIST
31132: PUSH
31133: LD_INT 1
31135: PUSH
31136: LD_INT 2
31138: PUSH
31139: EMPTY
31140: LIST
31141: LIST
31142: PUSH
31143: EMPTY
31144: LIST
31145: LIST
31146: LIST
31147: LIST
31148: LIST
31149: LIST
31150: LIST
31151: LIST
31152: LIST
31153: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
31154: LD_ADDR_VAR 0 40
31158: PUSH
31159: LD_INT 0
31161: PUSH
31162: LD_INT 0
31164: PUSH
31165: EMPTY
31166: LIST
31167: LIST
31168: PUSH
31169: LD_INT 0
31171: PUSH
31172: LD_INT 1
31174: NEG
31175: PUSH
31176: EMPTY
31177: LIST
31178: LIST
31179: PUSH
31180: LD_INT 1
31182: PUSH
31183: LD_INT 0
31185: PUSH
31186: EMPTY
31187: LIST
31188: LIST
31189: PUSH
31190: LD_INT 1
31192: PUSH
31193: LD_INT 1
31195: PUSH
31196: EMPTY
31197: LIST
31198: LIST
31199: PUSH
31200: LD_INT 0
31202: PUSH
31203: LD_INT 1
31205: PUSH
31206: EMPTY
31207: LIST
31208: LIST
31209: PUSH
31210: LD_INT 1
31212: NEG
31213: PUSH
31214: LD_INT 0
31216: PUSH
31217: EMPTY
31218: LIST
31219: LIST
31220: PUSH
31221: LD_INT 1
31223: NEG
31224: PUSH
31225: LD_INT 1
31227: NEG
31228: PUSH
31229: EMPTY
31230: LIST
31231: LIST
31232: PUSH
31233: LD_INT 1
31235: PUSH
31236: LD_INT 1
31238: NEG
31239: PUSH
31240: EMPTY
31241: LIST
31242: LIST
31243: PUSH
31244: LD_INT 1
31246: NEG
31247: PUSH
31248: LD_INT 1
31250: PUSH
31251: EMPTY
31252: LIST
31253: LIST
31254: PUSH
31255: EMPTY
31256: LIST
31257: LIST
31258: LIST
31259: LIST
31260: LIST
31261: LIST
31262: LIST
31263: LIST
31264: LIST
31265: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
31266: LD_ADDR_VAR 0 41
31270: PUSH
31271: LD_INT 0
31273: PUSH
31274: LD_INT 0
31276: PUSH
31277: EMPTY
31278: LIST
31279: LIST
31280: PUSH
31281: LD_INT 0
31283: PUSH
31284: LD_INT 1
31286: NEG
31287: PUSH
31288: EMPTY
31289: LIST
31290: LIST
31291: PUSH
31292: LD_INT 1
31294: PUSH
31295: LD_INT 0
31297: PUSH
31298: EMPTY
31299: LIST
31300: LIST
31301: PUSH
31302: LD_INT 1
31304: PUSH
31305: LD_INT 1
31307: PUSH
31308: EMPTY
31309: LIST
31310: LIST
31311: PUSH
31312: LD_INT 0
31314: PUSH
31315: LD_INT 1
31317: PUSH
31318: EMPTY
31319: LIST
31320: LIST
31321: PUSH
31322: LD_INT 1
31324: NEG
31325: PUSH
31326: LD_INT 0
31328: PUSH
31329: EMPTY
31330: LIST
31331: LIST
31332: PUSH
31333: LD_INT 1
31335: NEG
31336: PUSH
31337: LD_INT 1
31339: NEG
31340: PUSH
31341: EMPTY
31342: LIST
31343: LIST
31344: PUSH
31345: LD_INT 1
31347: NEG
31348: PUSH
31349: LD_INT 2
31351: NEG
31352: PUSH
31353: EMPTY
31354: LIST
31355: LIST
31356: PUSH
31357: LD_INT 1
31359: PUSH
31360: LD_INT 1
31362: NEG
31363: PUSH
31364: EMPTY
31365: LIST
31366: LIST
31367: PUSH
31368: LD_INT 2
31370: PUSH
31371: LD_INT 0
31373: PUSH
31374: EMPTY
31375: LIST
31376: LIST
31377: PUSH
31378: LD_INT 2
31380: PUSH
31381: LD_INT 1
31383: PUSH
31384: EMPTY
31385: LIST
31386: LIST
31387: PUSH
31388: LD_INT 2
31390: PUSH
31391: LD_INT 2
31393: PUSH
31394: EMPTY
31395: LIST
31396: LIST
31397: PUSH
31398: LD_INT 1
31400: PUSH
31401: LD_INT 2
31403: PUSH
31404: EMPTY
31405: LIST
31406: LIST
31407: PUSH
31408: LD_INT 1
31410: NEG
31411: PUSH
31412: LD_INT 1
31414: PUSH
31415: EMPTY
31416: LIST
31417: LIST
31418: PUSH
31419: LD_INT 2
31421: NEG
31422: PUSH
31423: LD_INT 0
31425: PUSH
31426: EMPTY
31427: LIST
31428: LIST
31429: PUSH
31430: LD_INT 2
31432: NEG
31433: PUSH
31434: LD_INT 1
31436: NEG
31437: PUSH
31438: EMPTY
31439: LIST
31440: LIST
31441: PUSH
31442: LD_INT 2
31444: NEG
31445: PUSH
31446: LD_INT 2
31448: NEG
31449: PUSH
31450: EMPTY
31451: LIST
31452: LIST
31453: PUSH
31454: LD_INT 2
31456: NEG
31457: PUSH
31458: LD_INT 3
31460: NEG
31461: PUSH
31462: EMPTY
31463: LIST
31464: LIST
31465: PUSH
31466: LD_INT 2
31468: PUSH
31469: LD_INT 1
31471: NEG
31472: PUSH
31473: EMPTY
31474: LIST
31475: LIST
31476: PUSH
31477: LD_INT 3
31479: PUSH
31480: LD_INT 0
31482: PUSH
31483: EMPTY
31484: LIST
31485: LIST
31486: PUSH
31487: LD_INT 3
31489: PUSH
31490: LD_INT 1
31492: PUSH
31493: EMPTY
31494: LIST
31495: LIST
31496: PUSH
31497: LD_INT 3
31499: PUSH
31500: LD_INT 2
31502: PUSH
31503: EMPTY
31504: LIST
31505: LIST
31506: PUSH
31507: LD_INT 3
31509: PUSH
31510: LD_INT 3
31512: PUSH
31513: EMPTY
31514: LIST
31515: LIST
31516: PUSH
31517: LD_INT 2
31519: PUSH
31520: LD_INT 3
31522: PUSH
31523: EMPTY
31524: LIST
31525: LIST
31526: PUSH
31527: LD_INT 2
31529: NEG
31530: PUSH
31531: LD_INT 1
31533: PUSH
31534: EMPTY
31535: LIST
31536: LIST
31537: PUSH
31538: LD_INT 3
31540: NEG
31541: PUSH
31542: LD_INT 0
31544: PUSH
31545: EMPTY
31546: LIST
31547: LIST
31548: PUSH
31549: LD_INT 3
31551: NEG
31552: PUSH
31553: LD_INT 1
31555: NEG
31556: PUSH
31557: EMPTY
31558: LIST
31559: LIST
31560: PUSH
31561: LD_INT 3
31563: NEG
31564: PUSH
31565: LD_INT 2
31567: NEG
31568: PUSH
31569: EMPTY
31570: LIST
31571: LIST
31572: PUSH
31573: LD_INT 3
31575: NEG
31576: PUSH
31577: LD_INT 3
31579: NEG
31580: PUSH
31581: EMPTY
31582: LIST
31583: LIST
31584: PUSH
31585: EMPTY
31586: LIST
31587: LIST
31588: LIST
31589: LIST
31590: LIST
31591: LIST
31592: LIST
31593: LIST
31594: LIST
31595: LIST
31596: LIST
31597: LIST
31598: LIST
31599: LIST
31600: LIST
31601: LIST
31602: LIST
31603: LIST
31604: LIST
31605: LIST
31606: LIST
31607: LIST
31608: LIST
31609: LIST
31610: LIST
31611: LIST
31612: LIST
31613: LIST
31614: LIST
31615: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
31616: LD_ADDR_VAR 0 42
31620: PUSH
31621: LD_INT 0
31623: PUSH
31624: LD_INT 0
31626: PUSH
31627: EMPTY
31628: LIST
31629: LIST
31630: PUSH
31631: LD_INT 0
31633: PUSH
31634: LD_INT 1
31636: NEG
31637: PUSH
31638: EMPTY
31639: LIST
31640: LIST
31641: PUSH
31642: LD_INT 1
31644: PUSH
31645: LD_INT 0
31647: PUSH
31648: EMPTY
31649: LIST
31650: LIST
31651: PUSH
31652: LD_INT 1
31654: PUSH
31655: LD_INT 1
31657: PUSH
31658: EMPTY
31659: LIST
31660: LIST
31661: PUSH
31662: LD_INT 0
31664: PUSH
31665: LD_INT 1
31667: PUSH
31668: EMPTY
31669: LIST
31670: LIST
31671: PUSH
31672: LD_INT 1
31674: NEG
31675: PUSH
31676: LD_INT 0
31678: PUSH
31679: EMPTY
31680: LIST
31681: LIST
31682: PUSH
31683: LD_INT 1
31685: NEG
31686: PUSH
31687: LD_INT 1
31689: NEG
31690: PUSH
31691: EMPTY
31692: LIST
31693: LIST
31694: PUSH
31695: LD_INT 1
31697: NEG
31698: PUSH
31699: LD_INT 2
31701: NEG
31702: PUSH
31703: EMPTY
31704: LIST
31705: LIST
31706: PUSH
31707: LD_INT 0
31709: PUSH
31710: LD_INT 2
31712: NEG
31713: PUSH
31714: EMPTY
31715: LIST
31716: LIST
31717: PUSH
31718: LD_INT 1
31720: PUSH
31721: LD_INT 1
31723: NEG
31724: PUSH
31725: EMPTY
31726: LIST
31727: LIST
31728: PUSH
31729: LD_INT 2
31731: PUSH
31732: LD_INT 1
31734: PUSH
31735: EMPTY
31736: LIST
31737: LIST
31738: PUSH
31739: LD_INT 2
31741: PUSH
31742: LD_INT 2
31744: PUSH
31745: EMPTY
31746: LIST
31747: LIST
31748: PUSH
31749: LD_INT 1
31751: PUSH
31752: LD_INT 2
31754: PUSH
31755: EMPTY
31756: LIST
31757: LIST
31758: PUSH
31759: LD_INT 0
31761: PUSH
31762: LD_INT 2
31764: PUSH
31765: EMPTY
31766: LIST
31767: LIST
31768: PUSH
31769: LD_INT 1
31771: NEG
31772: PUSH
31773: LD_INT 1
31775: PUSH
31776: EMPTY
31777: LIST
31778: LIST
31779: PUSH
31780: LD_INT 2
31782: NEG
31783: PUSH
31784: LD_INT 1
31786: NEG
31787: PUSH
31788: EMPTY
31789: LIST
31790: LIST
31791: PUSH
31792: LD_INT 2
31794: NEG
31795: PUSH
31796: LD_INT 2
31798: NEG
31799: PUSH
31800: EMPTY
31801: LIST
31802: LIST
31803: PUSH
31804: LD_INT 2
31806: NEG
31807: PUSH
31808: LD_INT 3
31810: NEG
31811: PUSH
31812: EMPTY
31813: LIST
31814: LIST
31815: PUSH
31816: LD_INT 1
31818: NEG
31819: PUSH
31820: LD_INT 3
31822: NEG
31823: PUSH
31824: EMPTY
31825: LIST
31826: LIST
31827: PUSH
31828: LD_INT 0
31830: PUSH
31831: LD_INT 3
31833: NEG
31834: PUSH
31835: EMPTY
31836: LIST
31837: LIST
31838: PUSH
31839: LD_INT 1
31841: PUSH
31842: LD_INT 2
31844: NEG
31845: PUSH
31846: EMPTY
31847: LIST
31848: LIST
31849: PUSH
31850: LD_INT 3
31852: PUSH
31853: LD_INT 2
31855: PUSH
31856: EMPTY
31857: LIST
31858: LIST
31859: PUSH
31860: LD_INT 3
31862: PUSH
31863: LD_INT 3
31865: PUSH
31866: EMPTY
31867: LIST
31868: LIST
31869: PUSH
31870: LD_INT 2
31872: PUSH
31873: LD_INT 3
31875: PUSH
31876: EMPTY
31877: LIST
31878: LIST
31879: PUSH
31880: LD_INT 1
31882: PUSH
31883: LD_INT 3
31885: PUSH
31886: EMPTY
31887: LIST
31888: LIST
31889: PUSH
31890: LD_INT 0
31892: PUSH
31893: LD_INT 3
31895: PUSH
31896: EMPTY
31897: LIST
31898: LIST
31899: PUSH
31900: LD_INT 1
31902: NEG
31903: PUSH
31904: LD_INT 2
31906: PUSH
31907: EMPTY
31908: LIST
31909: LIST
31910: PUSH
31911: LD_INT 3
31913: NEG
31914: PUSH
31915: LD_INT 2
31917: NEG
31918: PUSH
31919: EMPTY
31920: LIST
31921: LIST
31922: PUSH
31923: LD_INT 3
31925: NEG
31926: PUSH
31927: LD_INT 3
31929: NEG
31930: PUSH
31931: EMPTY
31932: LIST
31933: LIST
31934: PUSH
31935: EMPTY
31936: LIST
31937: LIST
31938: LIST
31939: LIST
31940: LIST
31941: LIST
31942: LIST
31943: LIST
31944: LIST
31945: LIST
31946: LIST
31947: LIST
31948: LIST
31949: LIST
31950: LIST
31951: LIST
31952: LIST
31953: LIST
31954: LIST
31955: LIST
31956: LIST
31957: LIST
31958: LIST
31959: LIST
31960: LIST
31961: LIST
31962: LIST
31963: LIST
31964: LIST
31965: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
31966: LD_ADDR_VAR 0 43
31970: PUSH
31971: LD_INT 0
31973: PUSH
31974: LD_INT 0
31976: PUSH
31977: EMPTY
31978: LIST
31979: LIST
31980: PUSH
31981: LD_INT 0
31983: PUSH
31984: LD_INT 1
31986: NEG
31987: PUSH
31988: EMPTY
31989: LIST
31990: LIST
31991: PUSH
31992: LD_INT 1
31994: PUSH
31995: LD_INT 0
31997: PUSH
31998: EMPTY
31999: LIST
32000: LIST
32001: PUSH
32002: LD_INT 1
32004: PUSH
32005: LD_INT 1
32007: PUSH
32008: EMPTY
32009: LIST
32010: LIST
32011: PUSH
32012: LD_INT 0
32014: PUSH
32015: LD_INT 1
32017: PUSH
32018: EMPTY
32019: LIST
32020: LIST
32021: PUSH
32022: LD_INT 1
32024: NEG
32025: PUSH
32026: LD_INT 0
32028: PUSH
32029: EMPTY
32030: LIST
32031: LIST
32032: PUSH
32033: LD_INT 1
32035: NEG
32036: PUSH
32037: LD_INT 1
32039: NEG
32040: PUSH
32041: EMPTY
32042: LIST
32043: LIST
32044: PUSH
32045: LD_INT 1
32047: NEG
32048: PUSH
32049: LD_INT 2
32051: NEG
32052: PUSH
32053: EMPTY
32054: LIST
32055: LIST
32056: PUSH
32057: LD_INT 0
32059: PUSH
32060: LD_INT 2
32062: NEG
32063: PUSH
32064: EMPTY
32065: LIST
32066: LIST
32067: PUSH
32068: LD_INT 1
32070: PUSH
32071: LD_INT 1
32073: NEG
32074: PUSH
32075: EMPTY
32076: LIST
32077: LIST
32078: PUSH
32079: LD_INT 2
32081: PUSH
32082: LD_INT 0
32084: PUSH
32085: EMPTY
32086: LIST
32087: LIST
32088: PUSH
32089: LD_INT 2
32091: PUSH
32092: LD_INT 1
32094: PUSH
32095: EMPTY
32096: LIST
32097: LIST
32098: PUSH
32099: LD_INT 1
32101: PUSH
32102: LD_INT 2
32104: PUSH
32105: EMPTY
32106: LIST
32107: LIST
32108: PUSH
32109: LD_INT 0
32111: PUSH
32112: LD_INT 2
32114: PUSH
32115: EMPTY
32116: LIST
32117: LIST
32118: PUSH
32119: LD_INT 1
32121: NEG
32122: PUSH
32123: LD_INT 1
32125: PUSH
32126: EMPTY
32127: LIST
32128: LIST
32129: PUSH
32130: LD_INT 2
32132: NEG
32133: PUSH
32134: LD_INT 0
32136: PUSH
32137: EMPTY
32138: LIST
32139: LIST
32140: PUSH
32141: LD_INT 2
32143: NEG
32144: PUSH
32145: LD_INT 1
32147: NEG
32148: PUSH
32149: EMPTY
32150: LIST
32151: LIST
32152: PUSH
32153: LD_INT 1
32155: NEG
32156: PUSH
32157: LD_INT 3
32159: NEG
32160: PUSH
32161: EMPTY
32162: LIST
32163: LIST
32164: PUSH
32165: LD_INT 0
32167: PUSH
32168: LD_INT 3
32170: NEG
32171: PUSH
32172: EMPTY
32173: LIST
32174: LIST
32175: PUSH
32176: LD_INT 1
32178: PUSH
32179: LD_INT 2
32181: NEG
32182: PUSH
32183: EMPTY
32184: LIST
32185: LIST
32186: PUSH
32187: LD_INT 2
32189: PUSH
32190: LD_INT 1
32192: NEG
32193: PUSH
32194: EMPTY
32195: LIST
32196: LIST
32197: PUSH
32198: LD_INT 3
32200: PUSH
32201: LD_INT 0
32203: PUSH
32204: EMPTY
32205: LIST
32206: LIST
32207: PUSH
32208: LD_INT 3
32210: PUSH
32211: LD_INT 1
32213: PUSH
32214: EMPTY
32215: LIST
32216: LIST
32217: PUSH
32218: LD_INT 1
32220: PUSH
32221: LD_INT 3
32223: PUSH
32224: EMPTY
32225: LIST
32226: LIST
32227: PUSH
32228: LD_INT 0
32230: PUSH
32231: LD_INT 3
32233: PUSH
32234: EMPTY
32235: LIST
32236: LIST
32237: PUSH
32238: LD_INT 1
32240: NEG
32241: PUSH
32242: LD_INT 2
32244: PUSH
32245: EMPTY
32246: LIST
32247: LIST
32248: PUSH
32249: LD_INT 2
32251: NEG
32252: PUSH
32253: LD_INT 1
32255: PUSH
32256: EMPTY
32257: LIST
32258: LIST
32259: PUSH
32260: LD_INT 3
32262: NEG
32263: PUSH
32264: LD_INT 0
32266: PUSH
32267: EMPTY
32268: LIST
32269: LIST
32270: PUSH
32271: LD_INT 3
32273: NEG
32274: PUSH
32275: LD_INT 1
32277: NEG
32278: PUSH
32279: EMPTY
32280: LIST
32281: LIST
32282: PUSH
32283: EMPTY
32284: LIST
32285: LIST
32286: LIST
32287: LIST
32288: LIST
32289: LIST
32290: LIST
32291: LIST
32292: LIST
32293: LIST
32294: LIST
32295: LIST
32296: LIST
32297: LIST
32298: LIST
32299: LIST
32300: LIST
32301: LIST
32302: LIST
32303: LIST
32304: LIST
32305: LIST
32306: LIST
32307: LIST
32308: LIST
32309: LIST
32310: LIST
32311: LIST
32312: LIST
32313: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
32314: LD_ADDR_VAR 0 44
32318: PUSH
32319: LD_INT 0
32321: PUSH
32322: LD_INT 0
32324: PUSH
32325: EMPTY
32326: LIST
32327: LIST
32328: PUSH
32329: LD_INT 0
32331: PUSH
32332: LD_INT 1
32334: NEG
32335: PUSH
32336: EMPTY
32337: LIST
32338: LIST
32339: PUSH
32340: LD_INT 1
32342: PUSH
32343: LD_INT 0
32345: PUSH
32346: EMPTY
32347: LIST
32348: LIST
32349: PUSH
32350: LD_INT 1
32352: PUSH
32353: LD_INT 1
32355: PUSH
32356: EMPTY
32357: LIST
32358: LIST
32359: PUSH
32360: LD_INT 0
32362: PUSH
32363: LD_INT 1
32365: PUSH
32366: EMPTY
32367: LIST
32368: LIST
32369: PUSH
32370: LD_INT 1
32372: NEG
32373: PUSH
32374: LD_INT 0
32376: PUSH
32377: EMPTY
32378: LIST
32379: LIST
32380: PUSH
32381: LD_INT 1
32383: NEG
32384: PUSH
32385: LD_INT 1
32387: NEG
32388: PUSH
32389: EMPTY
32390: LIST
32391: LIST
32392: PUSH
32393: LD_INT 1
32395: NEG
32396: PUSH
32397: LD_INT 2
32399: NEG
32400: PUSH
32401: EMPTY
32402: LIST
32403: LIST
32404: PUSH
32405: LD_INT 1
32407: PUSH
32408: LD_INT 1
32410: NEG
32411: PUSH
32412: EMPTY
32413: LIST
32414: LIST
32415: PUSH
32416: LD_INT 2
32418: PUSH
32419: LD_INT 0
32421: PUSH
32422: EMPTY
32423: LIST
32424: LIST
32425: PUSH
32426: LD_INT 2
32428: PUSH
32429: LD_INT 1
32431: PUSH
32432: EMPTY
32433: LIST
32434: LIST
32435: PUSH
32436: LD_INT 2
32438: PUSH
32439: LD_INT 2
32441: PUSH
32442: EMPTY
32443: LIST
32444: LIST
32445: PUSH
32446: LD_INT 1
32448: PUSH
32449: LD_INT 2
32451: PUSH
32452: EMPTY
32453: LIST
32454: LIST
32455: PUSH
32456: LD_INT 1
32458: NEG
32459: PUSH
32460: LD_INT 1
32462: PUSH
32463: EMPTY
32464: LIST
32465: LIST
32466: PUSH
32467: LD_INT 2
32469: NEG
32470: PUSH
32471: LD_INT 0
32473: PUSH
32474: EMPTY
32475: LIST
32476: LIST
32477: PUSH
32478: LD_INT 2
32480: NEG
32481: PUSH
32482: LD_INT 1
32484: NEG
32485: PUSH
32486: EMPTY
32487: LIST
32488: LIST
32489: PUSH
32490: LD_INT 2
32492: NEG
32493: PUSH
32494: LD_INT 2
32496: NEG
32497: PUSH
32498: EMPTY
32499: LIST
32500: LIST
32501: PUSH
32502: LD_INT 2
32504: NEG
32505: PUSH
32506: LD_INT 3
32508: NEG
32509: PUSH
32510: EMPTY
32511: LIST
32512: LIST
32513: PUSH
32514: LD_INT 2
32516: PUSH
32517: LD_INT 1
32519: NEG
32520: PUSH
32521: EMPTY
32522: LIST
32523: LIST
32524: PUSH
32525: LD_INT 3
32527: PUSH
32528: LD_INT 0
32530: PUSH
32531: EMPTY
32532: LIST
32533: LIST
32534: PUSH
32535: LD_INT 3
32537: PUSH
32538: LD_INT 1
32540: PUSH
32541: EMPTY
32542: LIST
32543: LIST
32544: PUSH
32545: LD_INT 3
32547: PUSH
32548: LD_INT 2
32550: PUSH
32551: EMPTY
32552: LIST
32553: LIST
32554: PUSH
32555: LD_INT 3
32557: PUSH
32558: LD_INT 3
32560: PUSH
32561: EMPTY
32562: LIST
32563: LIST
32564: PUSH
32565: LD_INT 2
32567: PUSH
32568: LD_INT 3
32570: PUSH
32571: EMPTY
32572: LIST
32573: LIST
32574: PUSH
32575: LD_INT 2
32577: NEG
32578: PUSH
32579: LD_INT 1
32581: PUSH
32582: EMPTY
32583: LIST
32584: LIST
32585: PUSH
32586: LD_INT 3
32588: NEG
32589: PUSH
32590: LD_INT 0
32592: PUSH
32593: EMPTY
32594: LIST
32595: LIST
32596: PUSH
32597: LD_INT 3
32599: NEG
32600: PUSH
32601: LD_INT 1
32603: NEG
32604: PUSH
32605: EMPTY
32606: LIST
32607: LIST
32608: PUSH
32609: LD_INT 3
32611: NEG
32612: PUSH
32613: LD_INT 2
32615: NEG
32616: PUSH
32617: EMPTY
32618: LIST
32619: LIST
32620: PUSH
32621: LD_INT 3
32623: NEG
32624: PUSH
32625: LD_INT 3
32627: NEG
32628: PUSH
32629: EMPTY
32630: LIST
32631: LIST
32632: PUSH
32633: EMPTY
32634: LIST
32635: LIST
32636: LIST
32637: LIST
32638: LIST
32639: LIST
32640: LIST
32641: LIST
32642: LIST
32643: LIST
32644: LIST
32645: LIST
32646: LIST
32647: LIST
32648: LIST
32649: LIST
32650: LIST
32651: LIST
32652: LIST
32653: LIST
32654: LIST
32655: LIST
32656: LIST
32657: LIST
32658: LIST
32659: LIST
32660: LIST
32661: LIST
32662: LIST
32663: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
32664: LD_ADDR_VAR 0 45
32668: PUSH
32669: LD_INT 0
32671: PUSH
32672: LD_INT 0
32674: PUSH
32675: EMPTY
32676: LIST
32677: LIST
32678: PUSH
32679: LD_INT 0
32681: PUSH
32682: LD_INT 1
32684: NEG
32685: PUSH
32686: EMPTY
32687: LIST
32688: LIST
32689: PUSH
32690: LD_INT 1
32692: PUSH
32693: LD_INT 0
32695: PUSH
32696: EMPTY
32697: LIST
32698: LIST
32699: PUSH
32700: LD_INT 1
32702: PUSH
32703: LD_INT 1
32705: PUSH
32706: EMPTY
32707: LIST
32708: LIST
32709: PUSH
32710: LD_INT 0
32712: PUSH
32713: LD_INT 1
32715: PUSH
32716: EMPTY
32717: LIST
32718: LIST
32719: PUSH
32720: LD_INT 1
32722: NEG
32723: PUSH
32724: LD_INT 0
32726: PUSH
32727: EMPTY
32728: LIST
32729: LIST
32730: PUSH
32731: LD_INT 1
32733: NEG
32734: PUSH
32735: LD_INT 1
32737: NEG
32738: PUSH
32739: EMPTY
32740: LIST
32741: LIST
32742: PUSH
32743: LD_INT 1
32745: NEG
32746: PUSH
32747: LD_INT 2
32749: NEG
32750: PUSH
32751: EMPTY
32752: LIST
32753: LIST
32754: PUSH
32755: LD_INT 0
32757: PUSH
32758: LD_INT 2
32760: NEG
32761: PUSH
32762: EMPTY
32763: LIST
32764: LIST
32765: PUSH
32766: LD_INT 1
32768: PUSH
32769: LD_INT 1
32771: NEG
32772: PUSH
32773: EMPTY
32774: LIST
32775: LIST
32776: PUSH
32777: LD_INT 2
32779: PUSH
32780: LD_INT 1
32782: PUSH
32783: EMPTY
32784: LIST
32785: LIST
32786: PUSH
32787: LD_INT 2
32789: PUSH
32790: LD_INT 2
32792: PUSH
32793: EMPTY
32794: LIST
32795: LIST
32796: PUSH
32797: LD_INT 1
32799: PUSH
32800: LD_INT 2
32802: PUSH
32803: EMPTY
32804: LIST
32805: LIST
32806: PUSH
32807: LD_INT 0
32809: PUSH
32810: LD_INT 2
32812: PUSH
32813: EMPTY
32814: LIST
32815: LIST
32816: PUSH
32817: LD_INT 1
32819: NEG
32820: PUSH
32821: LD_INT 1
32823: PUSH
32824: EMPTY
32825: LIST
32826: LIST
32827: PUSH
32828: LD_INT 2
32830: NEG
32831: PUSH
32832: LD_INT 1
32834: NEG
32835: PUSH
32836: EMPTY
32837: LIST
32838: LIST
32839: PUSH
32840: LD_INT 2
32842: NEG
32843: PUSH
32844: LD_INT 2
32846: NEG
32847: PUSH
32848: EMPTY
32849: LIST
32850: LIST
32851: PUSH
32852: LD_INT 2
32854: NEG
32855: PUSH
32856: LD_INT 3
32858: NEG
32859: PUSH
32860: EMPTY
32861: LIST
32862: LIST
32863: PUSH
32864: LD_INT 1
32866: NEG
32867: PUSH
32868: LD_INT 3
32870: NEG
32871: PUSH
32872: EMPTY
32873: LIST
32874: LIST
32875: PUSH
32876: LD_INT 0
32878: PUSH
32879: LD_INT 3
32881: NEG
32882: PUSH
32883: EMPTY
32884: LIST
32885: LIST
32886: PUSH
32887: LD_INT 1
32889: PUSH
32890: LD_INT 2
32892: NEG
32893: PUSH
32894: EMPTY
32895: LIST
32896: LIST
32897: PUSH
32898: LD_INT 3
32900: PUSH
32901: LD_INT 2
32903: PUSH
32904: EMPTY
32905: LIST
32906: LIST
32907: PUSH
32908: LD_INT 3
32910: PUSH
32911: LD_INT 3
32913: PUSH
32914: EMPTY
32915: LIST
32916: LIST
32917: PUSH
32918: LD_INT 2
32920: PUSH
32921: LD_INT 3
32923: PUSH
32924: EMPTY
32925: LIST
32926: LIST
32927: PUSH
32928: LD_INT 1
32930: PUSH
32931: LD_INT 3
32933: PUSH
32934: EMPTY
32935: LIST
32936: LIST
32937: PUSH
32938: LD_INT 0
32940: PUSH
32941: LD_INT 3
32943: PUSH
32944: EMPTY
32945: LIST
32946: LIST
32947: PUSH
32948: LD_INT 1
32950: NEG
32951: PUSH
32952: LD_INT 2
32954: PUSH
32955: EMPTY
32956: LIST
32957: LIST
32958: PUSH
32959: LD_INT 3
32961: NEG
32962: PUSH
32963: LD_INT 2
32965: NEG
32966: PUSH
32967: EMPTY
32968: LIST
32969: LIST
32970: PUSH
32971: LD_INT 3
32973: NEG
32974: PUSH
32975: LD_INT 3
32977: NEG
32978: PUSH
32979: EMPTY
32980: LIST
32981: LIST
32982: PUSH
32983: EMPTY
32984: LIST
32985: LIST
32986: LIST
32987: LIST
32988: LIST
32989: LIST
32990: LIST
32991: LIST
32992: LIST
32993: LIST
32994: LIST
32995: LIST
32996: LIST
32997: LIST
32998: LIST
32999: LIST
33000: LIST
33001: LIST
33002: LIST
33003: LIST
33004: LIST
33005: LIST
33006: LIST
33007: LIST
33008: LIST
33009: LIST
33010: LIST
33011: LIST
33012: LIST
33013: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
33014: LD_ADDR_VAR 0 46
33018: PUSH
33019: LD_INT 0
33021: PUSH
33022: LD_INT 0
33024: PUSH
33025: EMPTY
33026: LIST
33027: LIST
33028: PUSH
33029: LD_INT 0
33031: PUSH
33032: LD_INT 1
33034: NEG
33035: PUSH
33036: EMPTY
33037: LIST
33038: LIST
33039: PUSH
33040: LD_INT 1
33042: PUSH
33043: LD_INT 0
33045: PUSH
33046: EMPTY
33047: LIST
33048: LIST
33049: PUSH
33050: LD_INT 1
33052: PUSH
33053: LD_INT 1
33055: PUSH
33056: EMPTY
33057: LIST
33058: LIST
33059: PUSH
33060: LD_INT 0
33062: PUSH
33063: LD_INT 1
33065: PUSH
33066: EMPTY
33067: LIST
33068: LIST
33069: PUSH
33070: LD_INT 1
33072: NEG
33073: PUSH
33074: LD_INT 0
33076: PUSH
33077: EMPTY
33078: LIST
33079: LIST
33080: PUSH
33081: LD_INT 1
33083: NEG
33084: PUSH
33085: LD_INT 1
33087: NEG
33088: PUSH
33089: EMPTY
33090: LIST
33091: LIST
33092: PUSH
33093: LD_INT 1
33095: NEG
33096: PUSH
33097: LD_INT 2
33099: NEG
33100: PUSH
33101: EMPTY
33102: LIST
33103: LIST
33104: PUSH
33105: LD_INT 0
33107: PUSH
33108: LD_INT 2
33110: NEG
33111: PUSH
33112: EMPTY
33113: LIST
33114: LIST
33115: PUSH
33116: LD_INT 1
33118: PUSH
33119: LD_INT 1
33121: NEG
33122: PUSH
33123: EMPTY
33124: LIST
33125: LIST
33126: PUSH
33127: LD_INT 2
33129: PUSH
33130: LD_INT 0
33132: PUSH
33133: EMPTY
33134: LIST
33135: LIST
33136: PUSH
33137: LD_INT 2
33139: PUSH
33140: LD_INT 1
33142: PUSH
33143: EMPTY
33144: LIST
33145: LIST
33146: PUSH
33147: LD_INT 1
33149: PUSH
33150: LD_INT 2
33152: PUSH
33153: EMPTY
33154: LIST
33155: LIST
33156: PUSH
33157: LD_INT 0
33159: PUSH
33160: LD_INT 2
33162: PUSH
33163: EMPTY
33164: LIST
33165: LIST
33166: PUSH
33167: LD_INT 1
33169: NEG
33170: PUSH
33171: LD_INT 1
33173: PUSH
33174: EMPTY
33175: LIST
33176: LIST
33177: PUSH
33178: LD_INT 2
33180: NEG
33181: PUSH
33182: LD_INT 0
33184: PUSH
33185: EMPTY
33186: LIST
33187: LIST
33188: PUSH
33189: LD_INT 2
33191: NEG
33192: PUSH
33193: LD_INT 1
33195: NEG
33196: PUSH
33197: EMPTY
33198: LIST
33199: LIST
33200: PUSH
33201: LD_INT 1
33203: NEG
33204: PUSH
33205: LD_INT 3
33207: NEG
33208: PUSH
33209: EMPTY
33210: LIST
33211: LIST
33212: PUSH
33213: LD_INT 0
33215: PUSH
33216: LD_INT 3
33218: NEG
33219: PUSH
33220: EMPTY
33221: LIST
33222: LIST
33223: PUSH
33224: LD_INT 1
33226: PUSH
33227: LD_INT 2
33229: NEG
33230: PUSH
33231: EMPTY
33232: LIST
33233: LIST
33234: PUSH
33235: LD_INT 2
33237: PUSH
33238: LD_INT 1
33240: NEG
33241: PUSH
33242: EMPTY
33243: LIST
33244: LIST
33245: PUSH
33246: LD_INT 3
33248: PUSH
33249: LD_INT 0
33251: PUSH
33252: EMPTY
33253: LIST
33254: LIST
33255: PUSH
33256: LD_INT 3
33258: PUSH
33259: LD_INT 1
33261: PUSH
33262: EMPTY
33263: LIST
33264: LIST
33265: PUSH
33266: LD_INT 1
33268: PUSH
33269: LD_INT 3
33271: PUSH
33272: EMPTY
33273: LIST
33274: LIST
33275: PUSH
33276: LD_INT 0
33278: PUSH
33279: LD_INT 3
33281: PUSH
33282: EMPTY
33283: LIST
33284: LIST
33285: PUSH
33286: LD_INT 1
33288: NEG
33289: PUSH
33290: LD_INT 2
33292: PUSH
33293: EMPTY
33294: LIST
33295: LIST
33296: PUSH
33297: LD_INT 2
33299: NEG
33300: PUSH
33301: LD_INT 1
33303: PUSH
33304: EMPTY
33305: LIST
33306: LIST
33307: PUSH
33308: LD_INT 3
33310: NEG
33311: PUSH
33312: LD_INT 0
33314: PUSH
33315: EMPTY
33316: LIST
33317: LIST
33318: PUSH
33319: LD_INT 3
33321: NEG
33322: PUSH
33323: LD_INT 1
33325: NEG
33326: PUSH
33327: EMPTY
33328: LIST
33329: LIST
33330: PUSH
33331: EMPTY
33332: LIST
33333: LIST
33334: LIST
33335: LIST
33336: LIST
33337: LIST
33338: LIST
33339: LIST
33340: LIST
33341: LIST
33342: LIST
33343: LIST
33344: LIST
33345: LIST
33346: LIST
33347: LIST
33348: LIST
33349: LIST
33350: LIST
33351: LIST
33352: LIST
33353: LIST
33354: LIST
33355: LIST
33356: LIST
33357: LIST
33358: LIST
33359: LIST
33360: LIST
33361: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33362: LD_ADDR_VAR 0 47
33366: PUSH
33367: LD_INT 0
33369: PUSH
33370: LD_INT 0
33372: PUSH
33373: EMPTY
33374: LIST
33375: LIST
33376: PUSH
33377: LD_INT 0
33379: PUSH
33380: LD_INT 1
33382: NEG
33383: PUSH
33384: EMPTY
33385: LIST
33386: LIST
33387: PUSH
33388: LD_INT 1
33390: PUSH
33391: LD_INT 0
33393: PUSH
33394: EMPTY
33395: LIST
33396: LIST
33397: PUSH
33398: LD_INT 1
33400: PUSH
33401: LD_INT 1
33403: PUSH
33404: EMPTY
33405: LIST
33406: LIST
33407: PUSH
33408: LD_INT 0
33410: PUSH
33411: LD_INT 1
33413: PUSH
33414: EMPTY
33415: LIST
33416: LIST
33417: PUSH
33418: LD_INT 1
33420: NEG
33421: PUSH
33422: LD_INT 0
33424: PUSH
33425: EMPTY
33426: LIST
33427: LIST
33428: PUSH
33429: LD_INT 1
33431: NEG
33432: PUSH
33433: LD_INT 1
33435: NEG
33436: PUSH
33437: EMPTY
33438: LIST
33439: LIST
33440: PUSH
33441: LD_INT 1
33443: NEG
33444: PUSH
33445: LD_INT 2
33447: NEG
33448: PUSH
33449: EMPTY
33450: LIST
33451: LIST
33452: PUSH
33453: LD_INT 0
33455: PUSH
33456: LD_INT 2
33458: NEG
33459: PUSH
33460: EMPTY
33461: LIST
33462: LIST
33463: PUSH
33464: LD_INT 1
33466: PUSH
33467: LD_INT 1
33469: NEG
33470: PUSH
33471: EMPTY
33472: LIST
33473: LIST
33474: PUSH
33475: LD_INT 2
33477: NEG
33478: PUSH
33479: LD_INT 1
33481: NEG
33482: PUSH
33483: EMPTY
33484: LIST
33485: LIST
33486: PUSH
33487: LD_INT 2
33489: NEG
33490: PUSH
33491: LD_INT 2
33493: NEG
33494: PUSH
33495: EMPTY
33496: LIST
33497: LIST
33498: PUSH
33499: EMPTY
33500: LIST
33501: LIST
33502: LIST
33503: LIST
33504: LIST
33505: LIST
33506: LIST
33507: LIST
33508: LIST
33509: LIST
33510: LIST
33511: LIST
33512: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
33513: LD_ADDR_VAR 0 48
33517: PUSH
33518: LD_INT 0
33520: PUSH
33521: LD_INT 0
33523: PUSH
33524: EMPTY
33525: LIST
33526: LIST
33527: PUSH
33528: LD_INT 0
33530: PUSH
33531: LD_INT 1
33533: NEG
33534: PUSH
33535: EMPTY
33536: LIST
33537: LIST
33538: PUSH
33539: LD_INT 1
33541: PUSH
33542: LD_INT 0
33544: PUSH
33545: EMPTY
33546: LIST
33547: LIST
33548: PUSH
33549: LD_INT 1
33551: PUSH
33552: LD_INT 1
33554: PUSH
33555: EMPTY
33556: LIST
33557: LIST
33558: PUSH
33559: LD_INT 0
33561: PUSH
33562: LD_INT 1
33564: PUSH
33565: EMPTY
33566: LIST
33567: LIST
33568: PUSH
33569: LD_INT 1
33571: NEG
33572: PUSH
33573: LD_INT 0
33575: PUSH
33576: EMPTY
33577: LIST
33578: LIST
33579: PUSH
33580: LD_INT 1
33582: NEG
33583: PUSH
33584: LD_INT 1
33586: NEG
33587: PUSH
33588: EMPTY
33589: LIST
33590: LIST
33591: PUSH
33592: LD_INT 1
33594: NEG
33595: PUSH
33596: LD_INT 2
33598: NEG
33599: PUSH
33600: EMPTY
33601: LIST
33602: LIST
33603: PUSH
33604: LD_INT 0
33606: PUSH
33607: LD_INT 2
33609: NEG
33610: PUSH
33611: EMPTY
33612: LIST
33613: LIST
33614: PUSH
33615: LD_INT 1
33617: PUSH
33618: LD_INT 1
33620: NEG
33621: PUSH
33622: EMPTY
33623: LIST
33624: LIST
33625: PUSH
33626: LD_INT 2
33628: PUSH
33629: LD_INT 0
33631: PUSH
33632: EMPTY
33633: LIST
33634: LIST
33635: PUSH
33636: LD_INT 2
33638: PUSH
33639: LD_INT 1
33641: PUSH
33642: EMPTY
33643: LIST
33644: LIST
33645: PUSH
33646: EMPTY
33647: LIST
33648: LIST
33649: LIST
33650: LIST
33651: LIST
33652: LIST
33653: LIST
33654: LIST
33655: LIST
33656: LIST
33657: LIST
33658: LIST
33659: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
33660: LD_ADDR_VAR 0 49
33664: PUSH
33665: LD_INT 0
33667: PUSH
33668: LD_INT 0
33670: PUSH
33671: EMPTY
33672: LIST
33673: LIST
33674: PUSH
33675: LD_INT 0
33677: PUSH
33678: LD_INT 1
33680: NEG
33681: PUSH
33682: EMPTY
33683: LIST
33684: LIST
33685: PUSH
33686: LD_INT 1
33688: PUSH
33689: LD_INT 0
33691: PUSH
33692: EMPTY
33693: LIST
33694: LIST
33695: PUSH
33696: LD_INT 1
33698: PUSH
33699: LD_INT 1
33701: PUSH
33702: EMPTY
33703: LIST
33704: LIST
33705: PUSH
33706: LD_INT 0
33708: PUSH
33709: LD_INT 1
33711: PUSH
33712: EMPTY
33713: LIST
33714: LIST
33715: PUSH
33716: LD_INT 1
33718: NEG
33719: PUSH
33720: LD_INT 0
33722: PUSH
33723: EMPTY
33724: LIST
33725: LIST
33726: PUSH
33727: LD_INT 1
33729: NEG
33730: PUSH
33731: LD_INT 1
33733: NEG
33734: PUSH
33735: EMPTY
33736: LIST
33737: LIST
33738: PUSH
33739: LD_INT 1
33741: PUSH
33742: LD_INT 1
33744: NEG
33745: PUSH
33746: EMPTY
33747: LIST
33748: LIST
33749: PUSH
33750: LD_INT 2
33752: PUSH
33753: LD_INT 0
33755: PUSH
33756: EMPTY
33757: LIST
33758: LIST
33759: PUSH
33760: LD_INT 2
33762: PUSH
33763: LD_INT 1
33765: PUSH
33766: EMPTY
33767: LIST
33768: LIST
33769: PUSH
33770: LD_INT 2
33772: PUSH
33773: LD_INT 2
33775: PUSH
33776: EMPTY
33777: LIST
33778: LIST
33779: PUSH
33780: LD_INT 1
33782: PUSH
33783: LD_INT 2
33785: PUSH
33786: EMPTY
33787: LIST
33788: LIST
33789: PUSH
33790: EMPTY
33791: LIST
33792: LIST
33793: LIST
33794: LIST
33795: LIST
33796: LIST
33797: LIST
33798: LIST
33799: LIST
33800: LIST
33801: LIST
33802: LIST
33803: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
33804: LD_ADDR_VAR 0 50
33808: PUSH
33809: LD_INT 0
33811: PUSH
33812: LD_INT 0
33814: PUSH
33815: EMPTY
33816: LIST
33817: LIST
33818: PUSH
33819: LD_INT 0
33821: PUSH
33822: LD_INT 1
33824: NEG
33825: PUSH
33826: EMPTY
33827: LIST
33828: LIST
33829: PUSH
33830: LD_INT 1
33832: PUSH
33833: LD_INT 0
33835: PUSH
33836: EMPTY
33837: LIST
33838: LIST
33839: PUSH
33840: LD_INT 1
33842: PUSH
33843: LD_INT 1
33845: PUSH
33846: EMPTY
33847: LIST
33848: LIST
33849: PUSH
33850: LD_INT 0
33852: PUSH
33853: LD_INT 1
33855: PUSH
33856: EMPTY
33857: LIST
33858: LIST
33859: PUSH
33860: LD_INT 1
33862: NEG
33863: PUSH
33864: LD_INT 0
33866: PUSH
33867: EMPTY
33868: LIST
33869: LIST
33870: PUSH
33871: LD_INT 1
33873: NEG
33874: PUSH
33875: LD_INT 1
33877: NEG
33878: PUSH
33879: EMPTY
33880: LIST
33881: LIST
33882: PUSH
33883: LD_INT 2
33885: PUSH
33886: LD_INT 1
33888: PUSH
33889: EMPTY
33890: LIST
33891: LIST
33892: PUSH
33893: LD_INT 2
33895: PUSH
33896: LD_INT 2
33898: PUSH
33899: EMPTY
33900: LIST
33901: LIST
33902: PUSH
33903: LD_INT 1
33905: PUSH
33906: LD_INT 2
33908: PUSH
33909: EMPTY
33910: LIST
33911: LIST
33912: PUSH
33913: LD_INT 0
33915: PUSH
33916: LD_INT 2
33918: PUSH
33919: EMPTY
33920: LIST
33921: LIST
33922: PUSH
33923: LD_INT 1
33925: NEG
33926: PUSH
33927: LD_INT 1
33929: PUSH
33930: EMPTY
33931: LIST
33932: LIST
33933: PUSH
33934: EMPTY
33935: LIST
33936: LIST
33937: LIST
33938: LIST
33939: LIST
33940: LIST
33941: LIST
33942: LIST
33943: LIST
33944: LIST
33945: LIST
33946: LIST
33947: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
33948: LD_ADDR_VAR 0 51
33952: PUSH
33953: LD_INT 0
33955: PUSH
33956: LD_INT 0
33958: PUSH
33959: EMPTY
33960: LIST
33961: LIST
33962: PUSH
33963: LD_INT 0
33965: PUSH
33966: LD_INT 1
33968: NEG
33969: PUSH
33970: EMPTY
33971: LIST
33972: LIST
33973: PUSH
33974: LD_INT 1
33976: PUSH
33977: LD_INT 0
33979: PUSH
33980: EMPTY
33981: LIST
33982: LIST
33983: PUSH
33984: LD_INT 1
33986: PUSH
33987: LD_INT 1
33989: PUSH
33990: EMPTY
33991: LIST
33992: LIST
33993: PUSH
33994: LD_INT 0
33996: PUSH
33997: LD_INT 1
33999: PUSH
34000: EMPTY
34001: LIST
34002: LIST
34003: PUSH
34004: LD_INT 1
34006: NEG
34007: PUSH
34008: LD_INT 0
34010: PUSH
34011: EMPTY
34012: LIST
34013: LIST
34014: PUSH
34015: LD_INT 1
34017: NEG
34018: PUSH
34019: LD_INT 1
34021: NEG
34022: PUSH
34023: EMPTY
34024: LIST
34025: LIST
34026: PUSH
34027: LD_INT 1
34029: PUSH
34030: LD_INT 2
34032: PUSH
34033: EMPTY
34034: LIST
34035: LIST
34036: PUSH
34037: LD_INT 0
34039: PUSH
34040: LD_INT 2
34042: PUSH
34043: EMPTY
34044: LIST
34045: LIST
34046: PUSH
34047: LD_INT 1
34049: NEG
34050: PUSH
34051: LD_INT 1
34053: PUSH
34054: EMPTY
34055: LIST
34056: LIST
34057: PUSH
34058: LD_INT 2
34060: NEG
34061: PUSH
34062: LD_INT 0
34064: PUSH
34065: EMPTY
34066: LIST
34067: LIST
34068: PUSH
34069: LD_INT 2
34071: NEG
34072: PUSH
34073: LD_INT 1
34075: NEG
34076: PUSH
34077: EMPTY
34078: LIST
34079: LIST
34080: PUSH
34081: EMPTY
34082: LIST
34083: LIST
34084: LIST
34085: LIST
34086: LIST
34087: LIST
34088: LIST
34089: LIST
34090: LIST
34091: LIST
34092: LIST
34093: LIST
34094: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34095: LD_ADDR_VAR 0 52
34099: PUSH
34100: LD_INT 0
34102: PUSH
34103: LD_INT 0
34105: PUSH
34106: EMPTY
34107: LIST
34108: LIST
34109: PUSH
34110: LD_INT 0
34112: PUSH
34113: LD_INT 1
34115: NEG
34116: PUSH
34117: EMPTY
34118: LIST
34119: LIST
34120: PUSH
34121: LD_INT 1
34123: PUSH
34124: LD_INT 0
34126: PUSH
34127: EMPTY
34128: LIST
34129: LIST
34130: PUSH
34131: LD_INT 1
34133: PUSH
34134: LD_INT 1
34136: PUSH
34137: EMPTY
34138: LIST
34139: LIST
34140: PUSH
34141: LD_INT 0
34143: PUSH
34144: LD_INT 1
34146: PUSH
34147: EMPTY
34148: LIST
34149: LIST
34150: PUSH
34151: LD_INT 1
34153: NEG
34154: PUSH
34155: LD_INT 0
34157: PUSH
34158: EMPTY
34159: LIST
34160: LIST
34161: PUSH
34162: LD_INT 1
34164: NEG
34165: PUSH
34166: LD_INT 1
34168: NEG
34169: PUSH
34170: EMPTY
34171: LIST
34172: LIST
34173: PUSH
34174: LD_INT 1
34176: NEG
34177: PUSH
34178: LD_INT 2
34180: NEG
34181: PUSH
34182: EMPTY
34183: LIST
34184: LIST
34185: PUSH
34186: LD_INT 1
34188: NEG
34189: PUSH
34190: LD_INT 1
34192: PUSH
34193: EMPTY
34194: LIST
34195: LIST
34196: PUSH
34197: LD_INT 2
34199: NEG
34200: PUSH
34201: LD_INT 0
34203: PUSH
34204: EMPTY
34205: LIST
34206: LIST
34207: PUSH
34208: LD_INT 2
34210: NEG
34211: PUSH
34212: LD_INT 1
34214: NEG
34215: PUSH
34216: EMPTY
34217: LIST
34218: LIST
34219: PUSH
34220: LD_INT 2
34222: NEG
34223: PUSH
34224: LD_INT 2
34226: NEG
34227: PUSH
34228: EMPTY
34229: LIST
34230: LIST
34231: PUSH
34232: EMPTY
34233: LIST
34234: LIST
34235: LIST
34236: LIST
34237: LIST
34238: LIST
34239: LIST
34240: LIST
34241: LIST
34242: LIST
34243: LIST
34244: LIST
34245: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34246: LD_ADDR_VAR 0 53
34250: PUSH
34251: LD_INT 0
34253: PUSH
34254: LD_INT 0
34256: PUSH
34257: EMPTY
34258: LIST
34259: LIST
34260: PUSH
34261: LD_INT 0
34263: PUSH
34264: LD_INT 1
34266: NEG
34267: PUSH
34268: EMPTY
34269: LIST
34270: LIST
34271: PUSH
34272: LD_INT 1
34274: PUSH
34275: LD_INT 0
34277: PUSH
34278: EMPTY
34279: LIST
34280: LIST
34281: PUSH
34282: LD_INT 1
34284: PUSH
34285: LD_INT 1
34287: PUSH
34288: EMPTY
34289: LIST
34290: LIST
34291: PUSH
34292: LD_INT 0
34294: PUSH
34295: LD_INT 1
34297: PUSH
34298: EMPTY
34299: LIST
34300: LIST
34301: PUSH
34302: LD_INT 1
34304: NEG
34305: PUSH
34306: LD_INT 0
34308: PUSH
34309: EMPTY
34310: LIST
34311: LIST
34312: PUSH
34313: LD_INT 1
34315: NEG
34316: PUSH
34317: LD_INT 1
34319: NEG
34320: PUSH
34321: EMPTY
34322: LIST
34323: LIST
34324: PUSH
34325: LD_INT 1
34327: NEG
34328: PUSH
34329: LD_INT 2
34331: NEG
34332: PUSH
34333: EMPTY
34334: LIST
34335: LIST
34336: PUSH
34337: LD_INT 0
34339: PUSH
34340: LD_INT 2
34342: NEG
34343: PUSH
34344: EMPTY
34345: LIST
34346: LIST
34347: PUSH
34348: LD_INT 1
34350: PUSH
34351: LD_INT 1
34353: NEG
34354: PUSH
34355: EMPTY
34356: LIST
34357: LIST
34358: PUSH
34359: LD_INT 2
34361: PUSH
34362: LD_INT 0
34364: PUSH
34365: EMPTY
34366: LIST
34367: LIST
34368: PUSH
34369: LD_INT 2
34371: PUSH
34372: LD_INT 1
34374: PUSH
34375: EMPTY
34376: LIST
34377: LIST
34378: PUSH
34379: LD_INT 2
34381: PUSH
34382: LD_INT 2
34384: PUSH
34385: EMPTY
34386: LIST
34387: LIST
34388: PUSH
34389: LD_INT 1
34391: PUSH
34392: LD_INT 2
34394: PUSH
34395: EMPTY
34396: LIST
34397: LIST
34398: PUSH
34399: LD_INT 0
34401: PUSH
34402: LD_INT 2
34404: PUSH
34405: EMPTY
34406: LIST
34407: LIST
34408: PUSH
34409: LD_INT 1
34411: NEG
34412: PUSH
34413: LD_INT 1
34415: PUSH
34416: EMPTY
34417: LIST
34418: LIST
34419: PUSH
34420: LD_INT 2
34422: NEG
34423: PUSH
34424: LD_INT 0
34426: PUSH
34427: EMPTY
34428: LIST
34429: LIST
34430: PUSH
34431: LD_INT 2
34433: NEG
34434: PUSH
34435: LD_INT 1
34437: NEG
34438: PUSH
34439: EMPTY
34440: LIST
34441: LIST
34442: PUSH
34443: LD_INT 2
34445: NEG
34446: PUSH
34447: LD_INT 2
34449: NEG
34450: PUSH
34451: EMPTY
34452: LIST
34453: LIST
34454: PUSH
34455: EMPTY
34456: LIST
34457: LIST
34458: LIST
34459: LIST
34460: LIST
34461: LIST
34462: LIST
34463: LIST
34464: LIST
34465: LIST
34466: LIST
34467: LIST
34468: LIST
34469: LIST
34470: LIST
34471: LIST
34472: LIST
34473: LIST
34474: LIST
34475: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34476: LD_ADDR_VAR 0 54
34480: PUSH
34481: LD_INT 0
34483: PUSH
34484: LD_INT 0
34486: PUSH
34487: EMPTY
34488: LIST
34489: LIST
34490: PUSH
34491: LD_INT 0
34493: PUSH
34494: LD_INT 1
34496: NEG
34497: PUSH
34498: EMPTY
34499: LIST
34500: LIST
34501: PUSH
34502: LD_INT 1
34504: PUSH
34505: LD_INT 0
34507: PUSH
34508: EMPTY
34509: LIST
34510: LIST
34511: PUSH
34512: LD_INT 1
34514: PUSH
34515: LD_INT 1
34517: PUSH
34518: EMPTY
34519: LIST
34520: LIST
34521: PUSH
34522: LD_INT 0
34524: PUSH
34525: LD_INT 1
34527: PUSH
34528: EMPTY
34529: LIST
34530: LIST
34531: PUSH
34532: LD_INT 1
34534: NEG
34535: PUSH
34536: LD_INT 0
34538: PUSH
34539: EMPTY
34540: LIST
34541: LIST
34542: PUSH
34543: LD_INT 1
34545: NEG
34546: PUSH
34547: LD_INT 1
34549: NEG
34550: PUSH
34551: EMPTY
34552: LIST
34553: LIST
34554: PUSH
34555: LD_INT 1
34557: NEG
34558: PUSH
34559: LD_INT 2
34561: NEG
34562: PUSH
34563: EMPTY
34564: LIST
34565: LIST
34566: PUSH
34567: LD_INT 0
34569: PUSH
34570: LD_INT 2
34572: NEG
34573: PUSH
34574: EMPTY
34575: LIST
34576: LIST
34577: PUSH
34578: LD_INT 1
34580: PUSH
34581: LD_INT 1
34583: NEG
34584: PUSH
34585: EMPTY
34586: LIST
34587: LIST
34588: PUSH
34589: LD_INT 2
34591: PUSH
34592: LD_INT 0
34594: PUSH
34595: EMPTY
34596: LIST
34597: LIST
34598: PUSH
34599: LD_INT 2
34601: PUSH
34602: LD_INT 1
34604: PUSH
34605: EMPTY
34606: LIST
34607: LIST
34608: PUSH
34609: LD_INT 2
34611: PUSH
34612: LD_INT 2
34614: PUSH
34615: EMPTY
34616: LIST
34617: LIST
34618: PUSH
34619: LD_INT 1
34621: PUSH
34622: LD_INT 2
34624: PUSH
34625: EMPTY
34626: LIST
34627: LIST
34628: PUSH
34629: LD_INT 0
34631: PUSH
34632: LD_INT 2
34634: PUSH
34635: EMPTY
34636: LIST
34637: LIST
34638: PUSH
34639: LD_INT 1
34641: NEG
34642: PUSH
34643: LD_INT 1
34645: PUSH
34646: EMPTY
34647: LIST
34648: LIST
34649: PUSH
34650: LD_INT 2
34652: NEG
34653: PUSH
34654: LD_INT 0
34656: PUSH
34657: EMPTY
34658: LIST
34659: LIST
34660: PUSH
34661: LD_INT 2
34663: NEG
34664: PUSH
34665: LD_INT 1
34667: NEG
34668: PUSH
34669: EMPTY
34670: LIST
34671: LIST
34672: PUSH
34673: LD_INT 2
34675: NEG
34676: PUSH
34677: LD_INT 2
34679: NEG
34680: PUSH
34681: EMPTY
34682: LIST
34683: LIST
34684: PUSH
34685: EMPTY
34686: LIST
34687: LIST
34688: LIST
34689: LIST
34690: LIST
34691: LIST
34692: LIST
34693: LIST
34694: LIST
34695: LIST
34696: LIST
34697: LIST
34698: LIST
34699: LIST
34700: LIST
34701: LIST
34702: LIST
34703: LIST
34704: LIST
34705: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34706: LD_ADDR_VAR 0 55
34710: PUSH
34711: LD_INT 0
34713: PUSH
34714: LD_INT 0
34716: PUSH
34717: EMPTY
34718: LIST
34719: LIST
34720: PUSH
34721: LD_INT 0
34723: PUSH
34724: LD_INT 1
34726: NEG
34727: PUSH
34728: EMPTY
34729: LIST
34730: LIST
34731: PUSH
34732: LD_INT 1
34734: PUSH
34735: LD_INT 0
34737: PUSH
34738: EMPTY
34739: LIST
34740: LIST
34741: PUSH
34742: LD_INT 1
34744: PUSH
34745: LD_INT 1
34747: PUSH
34748: EMPTY
34749: LIST
34750: LIST
34751: PUSH
34752: LD_INT 0
34754: PUSH
34755: LD_INT 1
34757: PUSH
34758: EMPTY
34759: LIST
34760: LIST
34761: PUSH
34762: LD_INT 1
34764: NEG
34765: PUSH
34766: LD_INT 0
34768: PUSH
34769: EMPTY
34770: LIST
34771: LIST
34772: PUSH
34773: LD_INT 1
34775: NEG
34776: PUSH
34777: LD_INT 1
34779: NEG
34780: PUSH
34781: EMPTY
34782: LIST
34783: LIST
34784: PUSH
34785: LD_INT 1
34787: NEG
34788: PUSH
34789: LD_INT 2
34791: NEG
34792: PUSH
34793: EMPTY
34794: LIST
34795: LIST
34796: PUSH
34797: LD_INT 0
34799: PUSH
34800: LD_INT 2
34802: NEG
34803: PUSH
34804: EMPTY
34805: LIST
34806: LIST
34807: PUSH
34808: LD_INT 1
34810: PUSH
34811: LD_INT 1
34813: NEG
34814: PUSH
34815: EMPTY
34816: LIST
34817: LIST
34818: PUSH
34819: LD_INT 2
34821: PUSH
34822: LD_INT 0
34824: PUSH
34825: EMPTY
34826: LIST
34827: LIST
34828: PUSH
34829: LD_INT 2
34831: PUSH
34832: LD_INT 1
34834: PUSH
34835: EMPTY
34836: LIST
34837: LIST
34838: PUSH
34839: LD_INT 2
34841: PUSH
34842: LD_INT 2
34844: PUSH
34845: EMPTY
34846: LIST
34847: LIST
34848: PUSH
34849: LD_INT 1
34851: PUSH
34852: LD_INT 2
34854: PUSH
34855: EMPTY
34856: LIST
34857: LIST
34858: PUSH
34859: LD_INT 0
34861: PUSH
34862: LD_INT 2
34864: PUSH
34865: EMPTY
34866: LIST
34867: LIST
34868: PUSH
34869: LD_INT 1
34871: NEG
34872: PUSH
34873: LD_INT 1
34875: PUSH
34876: EMPTY
34877: LIST
34878: LIST
34879: PUSH
34880: LD_INT 2
34882: NEG
34883: PUSH
34884: LD_INT 0
34886: PUSH
34887: EMPTY
34888: LIST
34889: LIST
34890: PUSH
34891: LD_INT 2
34893: NEG
34894: PUSH
34895: LD_INT 1
34897: NEG
34898: PUSH
34899: EMPTY
34900: LIST
34901: LIST
34902: PUSH
34903: LD_INT 2
34905: NEG
34906: PUSH
34907: LD_INT 2
34909: NEG
34910: PUSH
34911: EMPTY
34912: LIST
34913: LIST
34914: PUSH
34915: EMPTY
34916: LIST
34917: LIST
34918: LIST
34919: LIST
34920: LIST
34921: LIST
34922: LIST
34923: LIST
34924: LIST
34925: LIST
34926: LIST
34927: LIST
34928: LIST
34929: LIST
34930: LIST
34931: LIST
34932: LIST
34933: LIST
34934: LIST
34935: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34936: LD_ADDR_VAR 0 56
34940: PUSH
34941: LD_INT 0
34943: PUSH
34944: LD_INT 0
34946: PUSH
34947: EMPTY
34948: LIST
34949: LIST
34950: PUSH
34951: LD_INT 0
34953: PUSH
34954: LD_INT 1
34956: NEG
34957: PUSH
34958: EMPTY
34959: LIST
34960: LIST
34961: PUSH
34962: LD_INT 1
34964: PUSH
34965: LD_INT 0
34967: PUSH
34968: EMPTY
34969: LIST
34970: LIST
34971: PUSH
34972: LD_INT 1
34974: PUSH
34975: LD_INT 1
34977: PUSH
34978: EMPTY
34979: LIST
34980: LIST
34981: PUSH
34982: LD_INT 0
34984: PUSH
34985: LD_INT 1
34987: PUSH
34988: EMPTY
34989: LIST
34990: LIST
34991: PUSH
34992: LD_INT 1
34994: NEG
34995: PUSH
34996: LD_INT 0
34998: PUSH
34999: EMPTY
35000: LIST
35001: LIST
35002: PUSH
35003: LD_INT 1
35005: NEG
35006: PUSH
35007: LD_INT 1
35009: NEG
35010: PUSH
35011: EMPTY
35012: LIST
35013: LIST
35014: PUSH
35015: LD_INT 1
35017: NEG
35018: PUSH
35019: LD_INT 2
35021: NEG
35022: PUSH
35023: EMPTY
35024: LIST
35025: LIST
35026: PUSH
35027: LD_INT 0
35029: PUSH
35030: LD_INT 2
35032: NEG
35033: PUSH
35034: EMPTY
35035: LIST
35036: LIST
35037: PUSH
35038: LD_INT 1
35040: PUSH
35041: LD_INT 1
35043: NEG
35044: PUSH
35045: EMPTY
35046: LIST
35047: LIST
35048: PUSH
35049: LD_INT 2
35051: PUSH
35052: LD_INT 0
35054: PUSH
35055: EMPTY
35056: LIST
35057: LIST
35058: PUSH
35059: LD_INT 2
35061: PUSH
35062: LD_INT 1
35064: PUSH
35065: EMPTY
35066: LIST
35067: LIST
35068: PUSH
35069: LD_INT 2
35071: PUSH
35072: LD_INT 2
35074: PUSH
35075: EMPTY
35076: LIST
35077: LIST
35078: PUSH
35079: LD_INT 1
35081: PUSH
35082: LD_INT 2
35084: PUSH
35085: EMPTY
35086: LIST
35087: LIST
35088: PUSH
35089: LD_INT 0
35091: PUSH
35092: LD_INT 2
35094: PUSH
35095: EMPTY
35096: LIST
35097: LIST
35098: PUSH
35099: LD_INT 1
35101: NEG
35102: PUSH
35103: LD_INT 1
35105: PUSH
35106: EMPTY
35107: LIST
35108: LIST
35109: PUSH
35110: LD_INT 2
35112: NEG
35113: PUSH
35114: LD_INT 0
35116: PUSH
35117: EMPTY
35118: LIST
35119: LIST
35120: PUSH
35121: LD_INT 2
35123: NEG
35124: PUSH
35125: LD_INT 1
35127: NEG
35128: PUSH
35129: EMPTY
35130: LIST
35131: LIST
35132: PUSH
35133: LD_INT 2
35135: NEG
35136: PUSH
35137: LD_INT 2
35139: NEG
35140: PUSH
35141: EMPTY
35142: LIST
35143: LIST
35144: PUSH
35145: EMPTY
35146: LIST
35147: LIST
35148: LIST
35149: LIST
35150: LIST
35151: LIST
35152: LIST
35153: LIST
35154: LIST
35155: LIST
35156: LIST
35157: LIST
35158: LIST
35159: LIST
35160: LIST
35161: LIST
35162: LIST
35163: LIST
35164: LIST
35165: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35166: LD_ADDR_VAR 0 57
35170: PUSH
35171: LD_INT 0
35173: PUSH
35174: LD_INT 0
35176: PUSH
35177: EMPTY
35178: LIST
35179: LIST
35180: PUSH
35181: LD_INT 0
35183: PUSH
35184: LD_INT 1
35186: NEG
35187: PUSH
35188: EMPTY
35189: LIST
35190: LIST
35191: PUSH
35192: LD_INT 1
35194: PUSH
35195: LD_INT 0
35197: PUSH
35198: EMPTY
35199: LIST
35200: LIST
35201: PUSH
35202: LD_INT 1
35204: PUSH
35205: LD_INT 1
35207: PUSH
35208: EMPTY
35209: LIST
35210: LIST
35211: PUSH
35212: LD_INT 0
35214: PUSH
35215: LD_INT 1
35217: PUSH
35218: EMPTY
35219: LIST
35220: LIST
35221: PUSH
35222: LD_INT 1
35224: NEG
35225: PUSH
35226: LD_INT 0
35228: PUSH
35229: EMPTY
35230: LIST
35231: LIST
35232: PUSH
35233: LD_INT 1
35235: NEG
35236: PUSH
35237: LD_INT 1
35239: NEG
35240: PUSH
35241: EMPTY
35242: LIST
35243: LIST
35244: PUSH
35245: LD_INT 1
35247: NEG
35248: PUSH
35249: LD_INT 2
35251: NEG
35252: PUSH
35253: EMPTY
35254: LIST
35255: LIST
35256: PUSH
35257: LD_INT 0
35259: PUSH
35260: LD_INT 2
35262: NEG
35263: PUSH
35264: EMPTY
35265: LIST
35266: LIST
35267: PUSH
35268: LD_INT 1
35270: PUSH
35271: LD_INT 1
35273: NEG
35274: PUSH
35275: EMPTY
35276: LIST
35277: LIST
35278: PUSH
35279: LD_INT 2
35281: PUSH
35282: LD_INT 0
35284: PUSH
35285: EMPTY
35286: LIST
35287: LIST
35288: PUSH
35289: LD_INT 2
35291: PUSH
35292: LD_INT 1
35294: PUSH
35295: EMPTY
35296: LIST
35297: LIST
35298: PUSH
35299: LD_INT 2
35301: PUSH
35302: LD_INT 2
35304: PUSH
35305: EMPTY
35306: LIST
35307: LIST
35308: PUSH
35309: LD_INT 1
35311: PUSH
35312: LD_INT 2
35314: PUSH
35315: EMPTY
35316: LIST
35317: LIST
35318: PUSH
35319: LD_INT 0
35321: PUSH
35322: LD_INT 2
35324: PUSH
35325: EMPTY
35326: LIST
35327: LIST
35328: PUSH
35329: LD_INT 1
35331: NEG
35332: PUSH
35333: LD_INT 1
35335: PUSH
35336: EMPTY
35337: LIST
35338: LIST
35339: PUSH
35340: LD_INT 2
35342: NEG
35343: PUSH
35344: LD_INT 0
35346: PUSH
35347: EMPTY
35348: LIST
35349: LIST
35350: PUSH
35351: LD_INT 2
35353: NEG
35354: PUSH
35355: LD_INT 1
35357: NEG
35358: PUSH
35359: EMPTY
35360: LIST
35361: LIST
35362: PUSH
35363: LD_INT 2
35365: NEG
35366: PUSH
35367: LD_INT 2
35369: NEG
35370: PUSH
35371: EMPTY
35372: LIST
35373: LIST
35374: PUSH
35375: EMPTY
35376: LIST
35377: LIST
35378: LIST
35379: LIST
35380: LIST
35381: LIST
35382: LIST
35383: LIST
35384: LIST
35385: LIST
35386: LIST
35387: LIST
35388: LIST
35389: LIST
35390: LIST
35391: LIST
35392: LIST
35393: LIST
35394: LIST
35395: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35396: LD_ADDR_VAR 0 58
35400: PUSH
35401: LD_INT 0
35403: PUSH
35404: LD_INT 0
35406: PUSH
35407: EMPTY
35408: LIST
35409: LIST
35410: PUSH
35411: LD_INT 0
35413: PUSH
35414: LD_INT 1
35416: NEG
35417: PUSH
35418: EMPTY
35419: LIST
35420: LIST
35421: PUSH
35422: LD_INT 1
35424: PUSH
35425: LD_INT 0
35427: PUSH
35428: EMPTY
35429: LIST
35430: LIST
35431: PUSH
35432: LD_INT 1
35434: PUSH
35435: LD_INT 1
35437: PUSH
35438: EMPTY
35439: LIST
35440: LIST
35441: PUSH
35442: LD_INT 0
35444: PUSH
35445: LD_INT 1
35447: PUSH
35448: EMPTY
35449: LIST
35450: LIST
35451: PUSH
35452: LD_INT 1
35454: NEG
35455: PUSH
35456: LD_INT 0
35458: PUSH
35459: EMPTY
35460: LIST
35461: LIST
35462: PUSH
35463: LD_INT 1
35465: NEG
35466: PUSH
35467: LD_INT 1
35469: NEG
35470: PUSH
35471: EMPTY
35472: LIST
35473: LIST
35474: PUSH
35475: LD_INT 1
35477: NEG
35478: PUSH
35479: LD_INT 2
35481: NEG
35482: PUSH
35483: EMPTY
35484: LIST
35485: LIST
35486: PUSH
35487: LD_INT 0
35489: PUSH
35490: LD_INT 2
35492: NEG
35493: PUSH
35494: EMPTY
35495: LIST
35496: LIST
35497: PUSH
35498: LD_INT 1
35500: PUSH
35501: LD_INT 1
35503: NEG
35504: PUSH
35505: EMPTY
35506: LIST
35507: LIST
35508: PUSH
35509: LD_INT 2
35511: PUSH
35512: LD_INT 0
35514: PUSH
35515: EMPTY
35516: LIST
35517: LIST
35518: PUSH
35519: LD_INT 2
35521: PUSH
35522: LD_INT 1
35524: PUSH
35525: EMPTY
35526: LIST
35527: LIST
35528: PUSH
35529: LD_INT 2
35531: PUSH
35532: LD_INT 2
35534: PUSH
35535: EMPTY
35536: LIST
35537: LIST
35538: PUSH
35539: LD_INT 1
35541: PUSH
35542: LD_INT 2
35544: PUSH
35545: EMPTY
35546: LIST
35547: LIST
35548: PUSH
35549: LD_INT 0
35551: PUSH
35552: LD_INT 2
35554: PUSH
35555: EMPTY
35556: LIST
35557: LIST
35558: PUSH
35559: LD_INT 1
35561: NEG
35562: PUSH
35563: LD_INT 1
35565: PUSH
35566: EMPTY
35567: LIST
35568: LIST
35569: PUSH
35570: LD_INT 2
35572: NEG
35573: PUSH
35574: LD_INT 0
35576: PUSH
35577: EMPTY
35578: LIST
35579: LIST
35580: PUSH
35581: LD_INT 2
35583: NEG
35584: PUSH
35585: LD_INT 1
35587: NEG
35588: PUSH
35589: EMPTY
35590: LIST
35591: LIST
35592: PUSH
35593: LD_INT 2
35595: NEG
35596: PUSH
35597: LD_INT 2
35599: NEG
35600: PUSH
35601: EMPTY
35602: LIST
35603: LIST
35604: PUSH
35605: EMPTY
35606: LIST
35607: LIST
35608: LIST
35609: LIST
35610: LIST
35611: LIST
35612: LIST
35613: LIST
35614: LIST
35615: LIST
35616: LIST
35617: LIST
35618: LIST
35619: LIST
35620: LIST
35621: LIST
35622: LIST
35623: LIST
35624: LIST
35625: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
35626: LD_ADDR_VAR 0 59
35630: PUSH
35631: LD_INT 0
35633: PUSH
35634: LD_INT 0
35636: PUSH
35637: EMPTY
35638: LIST
35639: LIST
35640: PUSH
35641: LD_INT 0
35643: PUSH
35644: LD_INT 1
35646: NEG
35647: PUSH
35648: EMPTY
35649: LIST
35650: LIST
35651: PUSH
35652: LD_INT 1
35654: PUSH
35655: LD_INT 0
35657: PUSH
35658: EMPTY
35659: LIST
35660: LIST
35661: PUSH
35662: LD_INT 1
35664: PUSH
35665: LD_INT 1
35667: PUSH
35668: EMPTY
35669: LIST
35670: LIST
35671: PUSH
35672: LD_INT 0
35674: PUSH
35675: LD_INT 1
35677: PUSH
35678: EMPTY
35679: LIST
35680: LIST
35681: PUSH
35682: LD_INT 1
35684: NEG
35685: PUSH
35686: LD_INT 0
35688: PUSH
35689: EMPTY
35690: LIST
35691: LIST
35692: PUSH
35693: LD_INT 1
35695: NEG
35696: PUSH
35697: LD_INT 1
35699: NEG
35700: PUSH
35701: EMPTY
35702: LIST
35703: LIST
35704: PUSH
35705: EMPTY
35706: LIST
35707: LIST
35708: LIST
35709: LIST
35710: LIST
35711: LIST
35712: LIST
35713: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
35714: LD_ADDR_VAR 0 60
35718: PUSH
35719: LD_INT 0
35721: PUSH
35722: LD_INT 0
35724: PUSH
35725: EMPTY
35726: LIST
35727: LIST
35728: PUSH
35729: LD_INT 0
35731: PUSH
35732: LD_INT 1
35734: NEG
35735: PUSH
35736: EMPTY
35737: LIST
35738: LIST
35739: PUSH
35740: LD_INT 1
35742: PUSH
35743: LD_INT 0
35745: PUSH
35746: EMPTY
35747: LIST
35748: LIST
35749: PUSH
35750: LD_INT 1
35752: PUSH
35753: LD_INT 1
35755: PUSH
35756: EMPTY
35757: LIST
35758: LIST
35759: PUSH
35760: LD_INT 0
35762: PUSH
35763: LD_INT 1
35765: PUSH
35766: EMPTY
35767: LIST
35768: LIST
35769: PUSH
35770: LD_INT 1
35772: NEG
35773: PUSH
35774: LD_INT 0
35776: PUSH
35777: EMPTY
35778: LIST
35779: LIST
35780: PUSH
35781: LD_INT 1
35783: NEG
35784: PUSH
35785: LD_INT 1
35787: NEG
35788: PUSH
35789: EMPTY
35790: LIST
35791: LIST
35792: PUSH
35793: EMPTY
35794: LIST
35795: LIST
35796: LIST
35797: LIST
35798: LIST
35799: LIST
35800: LIST
35801: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
35802: LD_ADDR_VAR 0 61
35806: PUSH
35807: LD_INT 0
35809: PUSH
35810: LD_INT 0
35812: PUSH
35813: EMPTY
35814: LIST
35815: LIST
35816: PUSH
35817: LD_INT 0
35819: PUSH
35820: LD_INT 1
35822: NEG
35823: PUSH
35824: EMPTY
35825: LIST
35826: LIST
35827: PUSH
35828: LD_INT 1
35830: PUSH
35831: LD_INT 0
35833: PUSH
35834: EMPTY
35835: LIST
35836: LIST
35837: PUSH
35838: LD_INT 1
35840: PUSH
35841: LD_INT 1
35843: PUSH
35844: EMPTY
35845: LIST
35846: LIST
35847: PUSH
35848: LD_INT 0
35850: PUSH
35851: LD_INT 1
35853: PUSH
35854: EMPTY
35855: LIST
35856: LIST
35857: PUSH
35858: LD_INT 1
35860: NEG
35861: PUSH
35862: LD_INT 0
35864: PUSH
35865: EMPTY
35866: LIST
35867: LIST
35868: PUSH
35869: LD_INT 1
35871: NEG
35872: PUSH
35873: LD_INT 1
35875: NEG
35876: PUSH
35877: EMPTY
35878: LIST
35879: LIST
35880: PUSH
35881: EMPTY
35882: LIST
35883: LIST
35884: LIST
35885: LIST
35886: LIST
35887: LIST
35888: LIST
35889: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
35890: LD_ADDR_VAR 0 62
35894: PUSH
35895: LD_INT 0
35897: PUSH
35898: LD_INT 0
35900: PUSH
35901: EMPTY
35902: LIST
35903: LIST
35904: PUSH
35905: LD_INT 0
35907: PUSH
35908: LD_INT 1
35910: NEG
35911: PUSH
35912: EMPTY
35913: LIST
35914: LIST
35915: PUSH
35916: LD_INT 1
35918: PUSH
35919: LD_INT 0
35921: PUSH
35922: EMPTY
35923: LIST
35924: LIST
35925: PUSH
35926: LD_INT 1
35928: PUSH
35929: LD_INT 1
35931: PUSH
35932: EMPTY
35933: LIST
35934: LIST
35935: PUSH
35936: LD_INT 0
35938: PUSH
35939: LD_INT 1
35941: PUSH
35942: EMPTY
35943: LIST
35944: LIST
35945: PUSH
35946: LD_INT 1
35948: NEG
35949: PUSH
35950: LD_INT 0
35952: PUSH
35953: EMPTY
35954: LIST
35955: LIST
35956: PUSH
35957: LD_INT 1
35959: NEG
35960: PUSH
35961: LD_INT 1
35963: NEG
35964: PUSH
35965: EMPTY
35966: LIST
35967: LIST
35968: PUSH
35969: EMPTY
35970: LIST
35971: LIST
35972: LIST
35973: LIST
35974: LIST
35975: LIST
35976: LIST
35977: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
35978: LD_ADDR_VAR 0 63
35982: PUSH
35983: LD_INT 0
35985: PUSH
35986: LD_INT 0
35988: PUSH
35989: EMPTY
35990: LIST
35991: LIST
35992: PUSH
35993: LD_INT 0
35995: PUSH
35996: LD_INT 1
35998: NEG
35999: PUSH
36000: EMPTY
36001: LIST
36002: LIST
36003: PUSH
36004: LD_INT 1
36006: PUSH
36007: LD_INT 0
36009: PUSH
36010: EMPTY
36011: LIST
36012: LIST
36013: PUSH
36014: LD_INT 1
36016: PUSH
36017: LD_INT 1
36019: PUSH
36020: EMPTY
36021: LIST
36022: LIST
36023: PUSH
36024: LD_INT 0
36026: PUSH
36027: LD_INT 1
36029: PUSH
36030: EMPTY
36031: LIST
36032: LIST
36033: PUSH
36034: LD_INT 1
36036: NEG
36037: PUSH
36038: LD_INT 0
36040: PUSH
36041: EMPTY
36042: LIST
36043: LIST
36044: PUSH
36045: LD_INT 1
36047: NEG
36048: PUSH
36049: LD_INT 1
36051: NEG
36052: PUSH
36053: EMPTY
36054: LIST
36055: LIST
36056: PUSH
36057: EMPTY
36058: LIST
36059: LIST
36060: LIST
36061: LIST
36062: LIST
36063: LIST
36064: LIST
36065: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
36066: LD_ADDR_VAR 0 64
36070: PUSH
36071: LD_INT 0
36073: PUSH
36074: LD_INT 0
36076: PUSH
36077: EMPTY
36078: LIST
36079: LIST
36080: PUSH
36081: LD_INT 0
36083: PUSH
36084: LD_INT 1
36086: NEG
36087: PUSH
36088: EMPTY
36089: LIST
36090: LIST
36091: PUSH
36092: LD_INT 1
36094: PUSH
36095: LD_INT 0
36097: PUSH
36098: EMPTY
36099: LIST
36100: LIST
36101: PUSH
36102: LD_INT 1
36104: PUSH
36105: LD_INT 1
36107: PUSH
36108: EMPTY
36109: LIST
36110: LIST
36111: PUSH
36112: LD_INT 0
36114: PUSH
36115: LD_INT 1
36117: PUSH
36118: EMPTY
36119: LIST
36120: LIST
36121: PUSH
36122: LD_INT 1
36124: NEG
36125: PUSH
36126: LD_INT 0
36128: PUSH
36129: EMPTY
36130: LIST
36131: LIST
36132: PUSH
36133: LD_INT 1
36135: NEG
36136: PUSH
36137: LD_INT 1
36139: NEG
36140: PUSH
36141: EMPTY
36142: LIST
36143: LIST
36144: PUSH
36145: EMPTY
36146: LIST
36147: LIST
36148: LIST
36149: LIST
36150: LIST
36151: LIST
36152: LIST
36153: ST_TO_ADDR
// end ; 1 :
36154: GO 42051
36156: LD_INT 1
36158: DOUBLE
36159: EQUAL
36160: IFTRUE 36164
36162: GO 38787
36164: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
36165: LD_ADDR_VAR 0 11
36169: PUSH
36170: LD_INT 1
36172: NEG
36173: PUSH
36174: LD_INT 3
36176: NEG
36177: PUSH
36178: EMPTY
36179: LIST
36180: LIST
36181: PUSH
36182: LD_INT 0
36184: PUSH
36185: LD_INT 3
36187: NEG
36188: PUSH
36189: EMPTY
36190: LIST
36191: LIST
36192: PUSH
36193: LD_INT 1
36195: PUSH
36196: LD_INT 2
36198: NEG
36199: PUSH
36200: EMPTY
36201: LIST
36202: LIST
36203: PUSH
36204: EMPTY
36205: LIST
36206: LIST
36207: LIST
36208: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
36209: LD_ADDR_VAR 0 12
36213: PUSH
36214: LD_INT 2
36216: PUSH
36217: LD_INT 1
36219: NEG
36220: PUSH
36221: EMPTY
36222: LIST
36223: LIST
36224: PUSH
36225: LD_INT 3
36227: PUSH
36228: LD_INT 0
36230: PUSH
36231: EMPTY
36232: LIST
36233: LIST
36234: PUSH
36235: LD_INT 3
36237: PUSH
36238: LD_INT 1
36240: PUSH
36241: EMPTY
36242: LIST
36243: LIST
36244: PUSH
36245: EMPTY
36246: LIST
36247: LIST
36248: LIST
36249: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
36250: LD_ADDR_VAR 0 13
36254: PUSH
36255: LD_INT 3
36257: PUSH
36258: LD_INT 2
36260: PUSH
36261: EMPTY
36262: LIST
36263: LIST
36264: PUSH
36265: LD_INT 3
36267: PUSH
36268: LD_INT 3
36270: PUSH
36271: EMPTY
36272: LIST
36273: LIST
36274: PUSH
36275: LD_INT 2
36277: PUSH
36278: LD_INT 3
36280: PUSH
36281: EMPTY
36282: LIST
36283: LIST
36284: PUSH
36285: EMPTY
36286: LIST
36287: LIST
36288: LIST
36289: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
36290: LD_ADDR_VAR 0 14
36294: PUSH
36295: LD_INT 1
36297: PUSH
36298: LD_INT 3
36300: PUSH
36301: EMPTY
36302: LIST
36303: LIST
36304: PUSH
36305: LD_INT 0
36307: PUSH
36308: LD_INT 3
36310: PUSH
36311: EMPTY
36312: LIST
36313: LIST
36314: PUSH
36315: LD_INT 1
36317: NEG
36318: PUSH
36319: LD_INT 2
36321: PUSH
36322: EMPTY
36323: LIST
36324: LIST
36325: PUSH
36326: EMPTY
36327: LIST
36328: LIST
36329: LIST
36330: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
36331: LD_ADDR_VAR 0 15
36335: PUSH
36336: LD_INT 2
36338: NEG
36339: PUSH
36340: LD_INT 1
36342: PUSH
36343: EMPTY
36344: LIST
36345: LIST
36346: PUSH
36347: LD_INT 3
36349: NEG
36350: PUSH
36351: LD_INT 0
36353: PUSH
36354: EMPTY
36355: LIST
36356: LIST
36357: PUSH
36358: LD_INT 3
36360: NEG
36361: PUSH
36362: LD_INT 1
36364: NEG
36365: PUSH
36366: EMPTY
36367: LIST
36368: LIST
36369: PUSH
36370: EMPTY
36371: LIST
36372: LIST
36373: LIST
36374: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
36375: LD_ADDR_VAR 0 16
36379: PUSH
36380: LD_INT 2
36382: NEG
36383: PUSH
36384: LD_INT 3
36386: NEG
36387: PUSH
36388: EMPTY
36389: LIST
36390: LIST
36391: PUSH
36392: LD_INT 3
36394: NEG
36395: PUSH
36396: LD_INT 2
36398: NEG
36399: PUSH
36400: EMPTY
36401: LIST
36402: LIST
36403: PUSH
36404: LD_INT 3
36406: NEG
36407: PUSH
36408: LD_INT 3
36410: NEG
36411: PUSH
36412: EMPTY
36413: LIST
36414: LIST
36415: PUSH
36416: EMPTY
36417: LIST
36418: LIST
36419: LIST
36420: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
36421: LD_ADDR_VAR 0 17
36425: PUSH
36426: LD_INT 1
36428: NEG
36429: PUSH
36430: LD_INT 3
36432: NEG
36433: PUSH
36434: EMPTY
36435: LIST
36436: LIST
36437: PUSH
36438: LD_INT 0
36440: PUSH
36441: LD_INT 3
36443: NEG
36444: PUSH
36445: EMPTY
36446: LIST
36447: LIST
36448: PUSH
36449: LD_INT 1
36451: PUSH
36452: LD_INT 2
36454: NEG
36455: PUSH
36456: EMPTY
36457: LIST
36458: LIST
36459: PUSH
36460: EMPTY
36461: LIST
36462: LIST
36463: LIST
36464: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
36465: LD_ADDR_VAR 0 18
36469: PUSH
36470: LD_INT 2
36472: PUSH
36473: LD_INT 1
36475: NEG
36476: PUSH
36477: EMPTY
36478: LIST
36479: LIST
36480: PUSH
36481: LD_INT 3
36483: PUSH
36484: LD_INT 0
36486: PUSH
36487: EMPTY
36488: LIST
36489: LIST
36490: PUSH
36491: LD_INT 3
36493: PUSH
36494: LD_INT 1
36496: PUSH
36497: EMPTY
36498: LIST
36499: LIST
36500: PUSH
36501: EMPTY
36502: LIST
36503: LIST
36504: LIST
36505: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
36506: LD_ADDR_VAR 0 19
36510: PUSH
36511: LD_INT 3
36513: PUSH
36514: LD_INT 2
36516: PUSH
36517: EMPTY
36518: LIST
36519: LIST
36520: PUSH
36521: LD_INT 3
36523: PUSH
36524: LD_INT 3
36526: PUSH
36527: EMPTY
36528: LIST
36529: LIST
36530: PUSH
36531: LD_INT 2
36533: PUSH
36534: LD_INT 3
36536: PUSH
36537: EMPTY
36538: LIST
36539: LIST
36540: PUSH
36541: EMPTY
36542: LIST
36543: LIST
36544: LIST
36545: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
36546: LD_ADDR_VAR 0 20
36550: PUSH
36551: LD_INT 1
36553: PUSH
36554: LD_INT 3
36556: PUSH
36557: EMPTY
36558: LIST
36559: LIST
36560: PUSH
36561: LD_INT 0
36563: PUSH
36564: LD_INT 3
36566: PUSH
36567: EMPTY
36568: LIST
36569: LIST
36570: PUSH
36571: LD_INT 1
36573: NEG
36574: PUSH
36575: LD_INT 2
36577: PUSH
36578: EMPTY
36579: LIST
36580: LIST
36581: PUSH
36582: EMPTY
36583: LIST
36584: LIST
36585: LIST
36586: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
36587: LD_ADDR_VAR 0 21
36591: PUSH
36592: LD_INT 2
36594: NEG
36595: PUSH
36596: LD_INT 1
36598: PUSH
36599: EMPTY
36600: LIST
36601: LIST
36602: PUSH
36603: LD_INT 3
36605: NEG
36606: PUSH
36607: LD_INT 0
36609: PUSH
36610: EMPTY
36611: LIST
36612: LIST
36613: PUSH
36614: LD_INT 3
36616: NEG
36617: PUSH
36618: LD_INT 1
36620: NEG
36621: PUSH
36622: EMPTY
36623: LIST
36624: LIST
36625: PUSH
36626: EMPTY
36627: LIST
36628: LIST
36629: LIST
36630: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
36631: LD_ADDR_VAR 0 22
36635: PUSH
36636: LD_INT 2
36638: NEG
36639: PUSH
36640: LD_INT 3
36642: NEG
36643: PUSH
36644: EMPTY
36645: LIST
36646: LIST
36647: PUSH
36648: LD_INT 3
36650: NEG
36651: PUSH
36652: LD_INT 2
36654: NEG
36655: PUSH
36656: EMPTY
36657: LIST
36658: LIST
36659: PUSH
36660: LD_INT 3
36662: NEG
36663: PUSH
36664: LD_INT 3
36666: NEG
36667: PUSH
36668: EMPTY
36669: LIST
36670: LIST
36671: PUSH
36672: EMPTY
36673: LIST
36674: LIST
36675: LIST
36676: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
36677: LD_ADDR_VAR 0 23
36681: PUSH
36682: LD_INT 0
36684: PUSH
36685: LD_INT 3
36687: NEG
36688: PUSH
36689: EMPTY
36690: LIST
36691: LIST
36692: PUSH
36693: LD_INT 1
36695: NEG
36696: PUSH
36697: LD_INT 4
36699: NEG
36700: PUSH
36701: EMPTY
36702: LIST
36703: LIST
36704: PUSH
36705: LD_INT 1
36707: PUSH
36708: LD_INT 3
36710: NEG
36711: PUSH
36712: EMPTY
36713: LIST
36714: LIST
36715: PUSH
36716: EMPTY
36717: LIST
36718: LIST
36719: LIST
36720: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
36721: LD_ADDR_VAR 0 24
36725: PUSH
36726: LD_INT 3
36728: PUSH
36729: LD_INT 0
36731: PUSH
36732: EMPTY
36733: LIST
36734: LIST
36735: PUSH
36736: LD_INT 3
36738: PUSH
36739: LD_INT 1
36741: NEG
36742: PUSH
36743: EMPTY
36744: LIST
36745: LIST
36746: PUSH
36747: LD_INT 4
36749: PUSH
36750: LD_INT 1
36752: PUSH
36753: EMPTY
36754: LIST
36755: LIST
36756: PUSH
36757: EMPTY
36758: LIST
36759: LIST
36760: LIST
36761: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
36762: LD_ADDR_VAR 0 25
36766: PUSH
36767: LD_INT 3
36769: PUSH
36770: LD_INT 3
36772: PUSH
36773: EMPTY
36774: LIST
36775: LIST
36776: PUSH
36777: LD_INT 4
36779: PUSH
36780: LD_INT 3
36782: PUSH
36783: EMPTY
36784: LIST
36785: LIST
36786: PUSH
36787: LD_INT 3
36789: PUSH
36790: LD_INT 4
36792: PUSH
36793: EMPTY
36794: LIST
36795: LIST
36796: PUSH
36797: EMPTY
36798: LIST
36799: LIST
36800: LIST
36801: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
36802: LD_ADDR_VAR 0 26
36806: PUSH
36807: LD_INT 0
36809: PUSH
36810: LD_INT 3
36812: PUSH
36813: EMPTY
36814: LIST
36815: LIST
36816: PUSH
36817: LD_INT 1
36819: PUSH
36820: LD_INT 4
36822: PUSH
36823: EMPTY
36824: LIST
36825: LIST
36826: PUSH
36827: LD_INT 1
36829: NEG
36830: PUSH
36831: LD_INT 3
36833: PUSH
36834: EMPTY
36835: LIST
36836: LIST
36837: PUSH
36838: EMPTY
36839: LIST
36840: LIST
36841: LIST
36842: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
36843: LD_ADDR_VAR 0 27
36847: PUSH
36848: LD_INT 3
36850: NEG
36851: PUSH
36852: LD_INT 0
36854: PUSH
36855: EMPTY
36856: LIST
36857: LIST
36858: PUSH
36859: LD_INT 3
36861: NEG
36862: PUSH
36863: LD_INT 1
36865: PUSH
36866: EMPTY
36867: LIST
36868: LIST
36869: PUSH
36870: LD_INT 4
36872: NEG
36873: PUSH
36874: LD_INT 1
36876: NEG
36877: PUSH
36878: EMPTY
36879: LIST
36880: LIST
36881: PUSH
36882: EMPTY
36883: LIST
36884: LIST
36885: LIST
36886: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
36887: LD_ADDR_VAR 0 28
36891: PUSH
36892: LD_INT 3
36894: NEG
36895: PUSH
36896: LD_INT 3
36898: NEG
36899: PUSH
36900: EMPTY
36901: LIST
36902: LIST
36903: PUSH
36904: LD_INT 3
36906: NEG
36907: PUSH
36908: LD_INT 4
36910: NEG
36911: PUSH
36912: EMPTY
36913: LIST
36914: LIST
36915: PUSH
36916: LD_INT 4
36918: NEG
36919: PUSH
36920: LD_INT 3
36922: NEG
36923: PUSH
36924: EMPTY
36925: LIST
36926: LIST
36927: PUSH
36928: EMPTY
36929: LIST
36930: LIST
36931: LIST
36932: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
36933: LD_ADDR_VAR 0 29
36937: PUSH
36938: LD_INT 1
36940: NEG
36941: PUSH
36942: LD_INT 3
36944: NEG
36945: PUSH
36946: EMPTY
36947: LIST
36948: LIST
36949: PUSH
36950: LD_INT 0
36952: PUSH
36953: LD_INT 3
36955: NEG
36956: PUSH
36957: EMPTY
36958: LIST
36959: LIST
36960: PUSH
36961: LD_INT 1
36963: PUSH
36964: LD_INT 2
36966: NEG
36967: PUSH
36968: EMPTY
36969: LIST
36970: LIST
36971: PUSH
36972: LD_INT 1
36974: NEG
36975: PUSH
36976: LD_INT 4
36978: NEG
36979: PUSH
36980: EMPTY
36981: LIST
36982: LIST
36983: PUSH
36984: LD_INT 0
36986: PUSH
36987: LD_INT 4
36989: NEG
36990: PUSH
36991: EMPTY
36992: LIST
36993: LIST
36994: PUSH
36995: LD_INT 1
36997: PUSH
36998: LD_INT 3
37000: NEG
37001: PUSH
37002: EMPTY
37003: LIST
37004: LIST
37005: PUSH
37006: LD_INT 1
37008: NEG
37009: PUSH
37010: LD_INT 5
37012: NEG
37013: PUSH
37014: EMPTY
37015: LIST
37016: LIST
37017: PUSH
37018: LD_INT 0
37020: PUSH
37021: LD_INT 5
37023: NEG
37024: PUSH
37025: EMPTY
37026: LIST
37027: LIST
37028: PUSH
37029: LD_INT 1
37031: PUSH
37032: LD_INT 4
37034: NEG
37035: PUSH
37036: EMPTY
37037: LIST
37038: LIST
37039: PUSH
37040: LD_INT 1
37042: NEG
37043: PUSH
37044: LD_INT 6
37046: NEG
37047: PUSH
37048: EMPTY
37049: LIST
37050: LIST
37051: PUSH
37052: LD_INT 0
37054: PUSH
37055: LD_INT 6
37057: NEG
37058: PUSH
37059: EMPTY
37060: LIST
37061: LIST
37062: PUSH
37063: LD_INT 1
37065: PUSH
37066: LD_INT 5
37068: NEG
37069: PUSH
37070: EMPTY
37071: LIST
37072: LIST
37073: PUSH
37074: EMPTY
37075: LIST
37076: LIST
37077: LIST
37078: LIST
37079: LIST
37080: LIST
37081: LIST
37082: LIST
37083: LIST
37084: LIST
37085: LIST
37086: LIST
37087: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
37088: LD_ADDR_VAR 0 30
37092: PUSH
37093: LD_INT 2
37095: PUSH
37096: LD_INT 1
37098: NEG
37099: PUSH
37100: EMPTY
37101: LIST
37102: LIST
37103: PUSH
37104: LD_INT 3
37106: PUSH
37107: LD_INT 0
37109: PUSH
37110: EMPTY
37111: LIST
37112: LIST
37113: PUSH
37114: LD_INT 3
37116: PUSH
37117: LD_INT 1
37119: PUSH
37120: EMPTY
37121: LIST
37122: LIST
37123: PUSH
37124: LD_INT 3
37126: PUSH
37127: LD_INT 1
37129: NEG
37130: PUSH
37131: EMPTY
37132: LIST
37133: LIST
37134: PUSH
37135: LD_INT 4
37137: PUSH
37138: LD_INT 0
37140: PUSH
37141: EMPTY
37142: LIST
37143: LIST
37144: PUSH
37145: LD_INT 4
37147: PUSH
37148: LD_INT 1
37150: PUSH
37151: EMPTY
37152: LIST
37153: LIST
37154: PUSH
37155: LD_INT 4
37157: PUSH
37158: LD_INT 1
37160: NEG
37161: PUSH
37162: EMPTY
37163: LIST
37164: LIST
37165: PUSH
37166: LD_INT 5
37168: PUSH
37169: LD_INT 0
37171: PUSH
37172: EMPTY
37173: LIST
37174: LIST
37175: PUSH
37176: LD_INT 5
37178: PUSH
37179: LD_INT 1
37181: PUSH
37182: EMPTY
37183: LIST
37184: LIST
37185: PUSH
37186: LD_INT 5
37188: PUSH
37189: LD_INT 1
37191: NEG
37192: PUSH
37193: EMPTY
37194: LIST
37195: LIST
37196: PUSH
37197: LD_INT 6
37199: PUSH
37200: LD_INT 0
37202: PUSH
37203: EMPTY
37204: LIST
37205: LIST
37206: PUSH
37207: LD_INT 6
37209: PUSH
37210: LD_INT 1
37212: PUSH
37213: EMPTY
37214: LIST
37215: LIST
37216: PUSH
37217: EMPTY
37218: LIST
37219: LIST
37220: LIST
37221: LIST
37222: LIST
37223: LIST
37224: LIST
37225: LIST
37226: LIST
37227: LIST
37228: LIST
37229: LIST
37230: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
37231: LD_ADDR_VAR 0 31
37235: PUSH
37236: LD_INT 3
37238: PUSH
37239: LD_INT 2
37241: PUSH
37242: EMPTY
37243: LIST
37244: LIST
37245: PUSH
37246: LD_INT 3
37248: PUSH
37249: LD_INT 3
37251: PUSH
37252: EMPTY
37253: LIST
37254: LIST
37255: PUSH
37256: LD_INT 2
37258: PUSH
37259: LD_INT 3
37261: PUSH
37262: EMPTY
37263: LIST
37264: LIST
37265: PUSH
37266: LD_INT 4
37268: PUSH
37269: LD_INT 3
37271: PUSH
37272: EMPTY
37273: LIST
37274: LIST
37275: PUSH
37276: LD_INT 4
37278: PUSH
37279: LD_INT 4
37281: PUSH
37282: EMPTY
37283: LIST
37284: LIST
37285: PUSH
37286: LD_INT 3
37288: PUSH
37289: LD_INT 4
37291: PUSH
37292: EMPTY
37293: LIST
37294: LIST
37295: PUSH
37296: LD_INT 5
37298: PUSH
37299: LD_INT 4
37301: PUSH
37302: EMPTY
37303: LIST
37304: LIST
37305: PUSH
37306: LD_INT 5
37308: PUSH
37309: LD_INT 5
37311: PUSH
37312: EMPTY
37313: LIST
37314: LIST
37315: PUSH
37316: LD_INT 4
37318: PUSH
37319: LD_INT 5
37321: PUSH
37322: EMPTY
37323: LIST
37324: LIST
37325: PUSH
37326: LD_INT 6
37328: PUSH
37329: LD_INT 5
37331: PUSH
37332: EMPTY
37333: LIST
37334: LIST
37335: PUSH
37336: LD_INT 6
37338: PUSH
37339: LD_INT 6
37341: PUSH
37342: EMPTY
37343: LIST
37344: LIST
37345: PUSH
37346: LD_INT 5
37348: PUSH
37349: LD_INT 6
37351: PUSH
37352: EMPTY
37353: LIST
37354: LIST
37355: PUSH
37356: EMPTY
37357: LIST
37358: LIST
37359: LIST
37360: LIST
37361: LIST
37362: LIST
37363: LIST
37364: LIST
37365: LIST
37366: LIST
37367: LIST
37368: LIST
37369: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
37370: LD_ADDR_VAR 0 32
37374: PUSH
37375: LD_INT 1
37377: PUSH
37378: LD_INT 3
37380: PUSH
37381: EMPTY
37382: LIST
37383: LIST
37384: PUSH
37385: LD_INT 0
37387: PUSH
37388: LD_INT 3
37390: PUSH
37391: EMPTY
37392: LIST
37393: LIST
37394: PUSH
37395: LD_INT 1
37397: NEG
37398: PUSH
37399: LD_INT 2
37401: PUSH
37402: EMPTY
37403: LIST
37404: LIST
37405: PUSH
37406: LD_INT 1
37408: PUSH
37409: LD_INT 4
37411: PUSH
37412: EMPTY
37413: LIST
37414: LIST
37415: PUSH
37416: LD_INT 0
37418: PUSH
37419: LD_INT 4
37421: PUSH
37422: EMPTY
37423: LIST
37424: LIST
37425: PUSH
37426: LD_INT 1
37428: NEG
37429: PUSH
37430: LD_INT 3
37432: PUSH
37433: EMPTY
37434: LIST
37435: LIST
37436: PUSH
37437: LD_INT 1
37439: PUSH
37440: LD_INT 5
37442: PUSH
37443: EMPTY
37444: LIST
37445: LIST
37446: PUSH
37447: LD_INT 0
37449: PUSH
37450: LD_INT 5
37452: PUSH
37453: EMPTY
37454: LIST
37455: LIST
37456: PUSH
37457: LD_INT 1
37459: NEG
37460: PUSH
37461: LD_INT 4
37463: PUSH
37464: EMPTY
37465: LIST
37466: LIST
37467: PUSH
37468: LD_INT 1
37470: PUSH
37471: LD_INT 6
37473: PUSH
37474: EMPTY
37475: LIST
37476: LIST
37477: PUSH
37478: LD_INT 0
37480: PUSH
37481: LD_INT 6
37483: PUSH
37484: EMPTY
37485: LIST
37486: LIST
37487: PUSH
37488: LD_INT 1
37490: NEG
37491: PUSH
37492: LD_INT 5
37494: PUSH
37495: EMPTY
37496: LIST
37497: LIST
37498: PUSH
37499: EMPTY
37500: LIST
37501: LIST
37502: LIST
37503: LIST
37504: LIST
37505: LIST
37506: LIST
37507: LIST
37508: LIST
37509: LIST
37510: LIST
37511: LIST
37512: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
37513: LD_ADDR_VAR 0 33
37517: PUSH
37518: LD_INT 2
37520: NEG
37521: PUSH
37522: LD_INT 1
37524: PUSH
37525: EMPTY
37526: LIST
37527: LIST
37528: PUSH
37529: LD_INT 3
37531: NEG
37532: PUSH
37533: LD_INT 0
37535: PUSH
37536: EMPTY
37537: LIST
37538: LIST
37539: PUSH
37540: LD_INT 3
37542: NEG
37543: PUSH
37544: LD_INT 1
37546: NEG
37547: PUSH
37548: EMPTY
37549: LIST
37550: LIST
37551: PUSH
37552: LD_INT 3
37554: NEG
37555: PUSH
37556: LD_INT 1
37558: PUSH
37559: EMPTY
37560: LIST
37561: LIST
37562: PUSH
37563: LD_INT 4
37565: NEG
37566: PUSH
37567: LD_INT 0
37569: PUSH
37570: EMPTY
37571: LIST
37572: LIST
37573: PUSH
37574: LD_INT 4
37576: NEG
37577: PUSH
37578: LD_INT 1
37580: NEG
37581: PUSH
37582: EMPTY
37583: LIST
37584: LIST
37585: PUSH
37586: LD_INT 4
37588: NEG
37589: PUSH
37590: LD_INT 1
37592: PUSH
37593: EMPTY
37594: LIST
37595: LIST
37596: PUSH
37597: LD_INT 5
37599: NEG
37600: PUSH
37601: LD_INT 0
37603: PUSH
37604: EMPTY
37605: LIST
37606: LIST
37607: PUSH
37608: LD_INT 5
37610: NEG
37611: PUSH
37612: LD_INT 1
37614: NEG
37615: PUSH
37616: EMPTY
37617: LIST
37618: LIST
37619: PUSH
37620: LD_INT 5
37622: NEG
37623: PUSH
37624: LD_INT 1
37626: PUSH
37627: EMPTY
37628: LIST
37629: LIST
37630: PUSH
37631: LD_INT 6
37633: NEG
37634: PUSH
37635: LD_INT 0
37637: PUSH
37638: EMPTY
37639: LIST
37640: LIST
37641: PUSH
37642: LD_INT 6
37644: NEG
37645: PUSH
37646: LD_INT 1
37648: NEG
37649: PUSH
37650: EMPTY
37651: LIST
37652: LIST
37653: PUSH
37654: EMPTY
37655: LIST
37656: LIST
37657: LIST
37658: LIST
37659: LIST
37660: LIST
37661: LIST
37662: LIST
37663: LIST
37664: LIST
37665: LIST
37666: LIST
37667: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
37668: LD_ADDR_VAR 0 34
37672: PUSH
37673: LD_INT 2
37675: NEG
37676: PUSH
37677: LD_INT 3
37679: NEG
37680: PUSH
37681: EMPTY
37682: LIST
37683: LIST
37684: PUSH
37685: LD_INT 3
37687: NEG
37688: PUSH
37689: LD_INT 2
37691: NEG
37692: PUSH
37693: EMPTY
37694: LIST
37695: LIST
37696: PUSH
37697: LD_INT 3
37699: NEG
37700: PUSH
37701: LD_INT 3
37703: NEG
37704: PUSH
37705: EMPTY
37706: LIST
37707: LIST
37708: PUSH
37709: LD_INT 3
37711: NEG
37712: PUSH
37713: LD_INT 4
37715: NEG
37716: PUSH
37717: EMPTY
37718: LIST
37719: LIST
37720: PUSH
37721: LD_INT 4
37723: NEG
37724: PUSH
37725: LD_INT 3
37727: NEG
37728: PUSH
37729: EMPTY
37730: LIST
37731: LIST
37732: PUSH
37733: LD_INT 4
37735: NEG
37736: PUSH
37737: LD_INT 4
37739: NEG
37740: PUSH
37741: EMPTY
37742: LIST
37743: LIST
37744: PUSH
37745: LD_INT 4
37747: NEG
37748: PUSH
37749: LD_INT 5
37751: NEG
37752: PUSH
37753: EMPTY
37754: LIST
37755: LIST
37756: PUSH
37757: LD_INT 5
37759: NEG
37760: PUSH
37761: LD_INT 4
37763: NEG
37764: PUSH
37765: EMPTY
37766: LIST
37767: LIST
37768: PUSH
37769: LD_INT 5
37771: NEG
37772: PUSH
37773: LD_INT 5
37775: NEG
37776: PUSH
37777: EMPTY
37778: LIST
37779: LIST
37780: PUSH
37781: LD_INT 5
37783: NEG
37784: PUSH
37785: LD_INT 6
37787: NEG
37788: PUSH
37789: EMPTY
37790: LIST
37791: LIST
37792: PUSH
37793: LD_INT 6
37795: NEG
37796: PUSH
37797: LD_INT 5
37799: NEG
37800: PUSH
37801: EMPTY
37802: LIST
37803: LIST
37804: PUSH
37805: LD_INT 6
37807: NEG
37808: PUSH
37809: LD_INT 6
37811: NEG
37812: PUSH
37813: EMPTY
37814: LIST
37815: LIST
37816: PUSH
37817: EMPTY
37818: LIST
37819: LIST
37820: LIST
37821: LIST
37822: LIST
37823: LIST
37824: LIST
37825: LIST
37826: LIST
37827: LIST
37828: LIST
37829: LIST
37830: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
37831: LD_ADDR_VAR 0 41
37835: PUSH
37836: LD_INT 0
37838: PUSH
37839: LD_INT 2
37841: NEG
37842: PUSH
37843: EMPTY
37844: LIST
37845: LIST
37846: PUSH
37847: LD_INT 1
37849: NEG
37850: PUSH
37851: LD_INT 3
37853: NEG
37854: PUSH
37855: EMPTY
37856: LIST
37857: LIST
37858: PUSH
37859: LD_INT 1
37861: PUSH
37862: LD_INT 2
37864: NEG
37865: PUSH
37866: EMPTY
37867: LIST
37868: LIST
37869: PUSH
37870: EMPTY
37871: LIST
37872: LIST
37873: LIST
37874: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
37875: LD_ADDR_VAR 0 42
37879: PUSH
37880: LD_INT 2
37882: PUSH
37883: LD_INT 0
37885: PUSH
37886: EMPTY
37887: LIST
37888: LIST
37889: PUSH
37890: LD_INT 2
37892: PUSH
37893: LD_INT 1
37895: NEG
37896: PUSH
37897: EMPTY
37898: LIST
37899: LIST
37900: PUSH
37901: LD_INT 3
37903: PUSH
37904: LD_INT 1
37906: PUSH
37907: EMPTY
37908: LIST
37909: LIST
37910: PUSH
37911: EMPTY
37912: LIST
37913: LIST
37914: LIST
37915: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
37916: LD_ADDR_VAR 0 43
37920: PUSH
37921: LD_INT 2
37923: PUSH
37924: LD_INT 2
37926: PUSH
37927: EMPTY
37928: LIST
37929: LIST
37930: PUSH
37931: LD_INT 3
37933: PUSH
37934: LD_INT 2
37936: PUSH
37937: EMPTY
37938: LIST
37939: LIST
37940: PUSH
37941: LD_INT 2
37943: PUSH
37944: LD_INT 3
37946: PUSH
37947: EMPTY
37948: LIST
37949: LIST
37950: PUSH
37951: EMPTY
37952: LIST
37953: LIST
37954: LIST
37955: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
37956: LD_ADDR_VAR 0 44
37960: PUSH
37961: LD_INT 0
37963: PUSH
37964: LD_INT 2
37966: PUSH
37967: EMPTY
37968: LIST
37969: LIST
37970: PUSH
37971: LD_INT 1
37973: PUSH
37974: LD_INT 3
37976: PUSH
37977: EMPTY
37978: LIST
37979: LIST
37980: PUSH
37981: LD_INT 1
37983: NEG
37984: PUSH
37985: LD_INT 2
37987: PUSH
37988: EMPTY
37989: LIST
37990: LIST
37991: PUSH
37992: EMPTY
37993: LIST
37994: LIST
37995: LIST
37996: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
37997: LD_ADDR_VAR 0 45
38001: PUSH
38002: LD_INT 2
38004: NEG
38005: PUSH
38006: LD_INT 0
38008: PUSH
38009: EMPTY
38010: LIST
38011: LIST
38012: PUSH
38013: LD_INT 2
38015: NEG
38016: PUSH
38017: LD_INT 1
38019: PUSH
38020: EMPTY
38021: LIST
38022: LIST
38023: PUSH
38024: LD_INT 3
38026: NEG
38027: PUSH
38028: LD_INT 1
38030: NEG
38031: PUSH
38032: EMPTY
38033: LIST
38034: LIST
38035: PUSH
38036: EMPTY
38037: LIST
38038: LIST
38039: LIST
38040: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
38041: LD_ADDR_VAR 0 46
38045: PUSH
38046: LD_INT 2
38048: NEG
38049: PUSH
38050: LD_INT 2
38052: NEG
38053: PUSH
38054: EMPTY
38055: LIST
38056: LIST
38057: PUSH
38058: LD_INT 2
38060: NEG
38061: PUSH
38062: LD_INT 3
38064: NEG
38065: PUSH
38066: EMPTY
38067: LIST
38068: LIST
38069: PUSH
38070: LD_INT 3
38072: NEG
38073: PUSH
38074: LD_INT 2
38076: NEG
38077: PUSH
38078: EMPTY
38079: LIST
38080: LIST
38081: PUSH
38082: EMPTY
38083: LIST
38084: LIST
38085: LIST
38086: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
38087: LD_ADDR_VAR 0 47
38091: PUSH
38092: LD_INT 2
38094: NEG
38095: PUSH
38096: LD_INT 3
38098: NEG
38099: PUSH
38100: EMPTY
38101: LIST
38102: LIST
38103: PUSH
38104: LD_INT 1
38106: NEG
38107: PUSH
38108: LD_INT 3
38110: NEG
38111: PUSH
38112: EMPTY
38113: LIST
38114: LIST
38115: PUSH
38116: EMPTY
38117: LIST
38118: LIST
38119: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
38120: LD_ADDR_VAR 0 48
38124: PUSH
38125: LD_INT 1
38127: PUSH
38128: LD_INT 2
38130: NEG
38131: PUSH
38132: EMPTY
38133: LIST
38134: LIST
38135: PUSH
38136: LD_INT 2
38138: PUSH
38139: LD_INT 1
38141: NEG
38142: PUSH
38143: EMPTY
38144: LIST
38145: LIST
38146: PUSH
38147: EMPTY
38148: LIST
38149: LIST
38150: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
38151: LD_ADDR_VAR 0 49
38155: PUSH
38156: LD_INT 3
38158: PUSH
38159: LD_INT 1
38161: PUSH
38162: EMPTY
38163: LIST
38164: LIST
38165: PUSH
38166: LD_INT 3
38168: PUSH
38169: LD_INT 2
38171: PUSH
38172: EMPTY
38173: LIST
38174: LIST
38175: PUSH
38176: EMPTY
38177: LIST
38178: LIST
38179: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
38180: LD_ADDR_VAR 0 50
38184: PUSH
38185: LD_INT 2
38187: PUSH
38188: LD_INT 3
38190: PUSH
38191: EMPTY
38192: LIST
38193: LIST
38194: PUSH
38195: LD_INT 1
38197: PUSH
38198: LD_INT 3
38200: PUSH
38201: EMPTY
38202: LIST
38203: LIST
38204: PUSH
38205: EMPTY
38206: LIST
38207: LIST
38208: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
38209: LD_ADDR_VAR 0 51
38213: PUSH
38214: LD_INT 1
38216: NEG
38217: PUSH
38218: LD_INT 2
38220: PUSH
38221: EMPTY
38222: LIST
38223: LIST
38224: PUSH
38225: LD_INT 2
38227: NEG
38228: PUSH
38229: LD_INT 1
38231: PUSH
38232: EMPTY
38233: LIST
38234: LIST
38235: PUSH
38236: EMPTY
38237: LIST
38238: LIST
38239: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
38240: LD_ADDR_VAR 0 52
38244: PUSH
38245: LD_INT 3
38247: NEG
38248: PUSH
38249: LD_INT 1
38251: NEG
38252: PUSH
38253: EMPTY
38254: LIST
38255: LIST
38256: PUSH
38257: LD_INT 3
38259: NEG
38260: PUSH
38261: LD_INT 2
38263: NEG
38264: PUSH
38265: EMPTY
38266: LIST
38267: LIST
38268: PUSH
38269: EMPTY
38270: LIST
38271: LIST
38272: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
38273: LD_ADDR_VAR 0 53
38277: PUSH
38278: LD_INT 1
38280: NEG
38281: PUSH
38282: LD_INT 3
38284: NEG
38285: PUSH
38286: EMPTY
38287: LIST
38288: LIST
38289: PUSH
38290: LD_INT 0
38292: PUSH
38293: LD_INT 3
38295: NEG
38296: PUSH
38297: EMPTY
38298: LIST
38299: LIST
38300: PUSH
38301: LD_INT 1
38303: PUSH
38304: LD_INT 2
38306: NEG
38307: PUSH
38308: EMPTY
38309: LIST
38310: LIST
38311: PUSH
38312: EMPTY
38313: LIST
38314: LIST
38315: LIST
38316: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
38317: LD_ADDR_VAR 0 54
38321: PUSH
38322: LD_INT 2
38324: PUSH
38325: LD_INT 1
38327: NEG
38328: PUSH
38329: EMPTY
38330: LIST
38331: LIST
38332: PUSH
38333: LD_INT 3
38335: PUSH
38336: LD_INT 0
38338: PUSH
38339: EMPTY
38340: LIST
38341: LIST
38342: PUSH
38343: LD_INT 3
38345: PUSH
38346: LD_INT 1
38348: PUSH
38349: EMPTY
38350: LIST
38351: LIST
38352: PUSH
38353: EMPTY
38354: LIST
38355: LIST
38356: LIST
38357: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
38358: LD_ADDR_VAR 0 55
38362: PUSH
38363: LD_INT 3
38365: PUSH
38366: LD_INT 2
38368: PUSH
38369: EMPTY
38370: LIST
38371: LIST
38372: PUSH
38373: LD_INT 3
38375: PUSH
38376: LD_INT 3
38378: PUSH
38379: EMPTY
38380: LIST
38381: LIST
38382: PUSH
38383: LD_INT 2
38385: PUSH
38386: LD_INT 3
38388: PUSH
38389: EMPTY
38390: LIST
38391: LIST
38392: PUSH
38393: EMPTY
38394: LIST
38395: LIST
38396: LIST
38397: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
38398: LD_ADDR_VAR 0 56
38402: PUSH
38403: LD_INT 1
38405: PUSH
38406: LD_INT 3
38408: PUSH
38409: EMPTY
38410: LIST
38411: LIST
38412: PUSH
38413: LD_INT 0
38415: PUSH
38416: LD_INT 3
38418: PUSH
38419: EMPTY
38420: LIST
38421: LIST
38422: PUSH
38423: LD_INT 1
38425: NEG
38426: PUSH
38427: LD_INT 2
38429: PUSH
38430: EMPTY
38431: LIST
38432: LIST
38433: PUSH
38434: EMPTY
38435: LIST
38436: LIST
38437: LIST
38438: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
38439: LD_ADDR_VAR 0 57
38443: PUSH
38444: LD_INT 2
38446: NEG
38447: PUSH
38448: LD_INT 1
38450: PUSH
38451: EMPTY
38452: LIST
38453: LIST
38454: PUSH
38455: LD_INT 3
38457: NEG
38458: PUSH
38459: LD_INT 0
38461: PUSH
38462: EMPTY
38463: LIST
38464: LIST
38465: PUSH
38466: LD_INT 3
38468: NEG
38469: PUSH
38470: LD_INT 1
38472: NEG
38473: PUSH
38474: EMPTY
38475: LIST
38476: LIST
38477: PUSH
38478: EMPTY
38479: LIST
38480: LIST
38481: LIST
38482: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
38483: LD_ADDR_VAR 0 58
38487: PUSH
38488: LD_INT 2
38490: NEG
38491: PUSH
38492: LD_INT 3
38494: NEG
38495: PUSH
38496: EMPTY
38497: LIST
38498: LIST
38499: PUSH
38500: LD_INT 3
38502: NEG
38503: PUSH
38504: LD_INT 2
38506: NEG
38507: PUSH
38508: EMPTY
38509: LIST
38510: LIST
38511: PUSH
38512: LD_INT 3
38514: NEG
38515: PUSH
38516: LD_INT 3
38518: NEG
38519: PUSH
38520: EMPTY
38521: LIST
38522: LIST
38523: PUSH
38524: EMPTY
38525: LIST
38526: LIST
38527: LIST
38528: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
38529: LD_ADDR_VAR 0 59
38533: PUSH
38534: LD_INT 1
38536: NEG
38537: PUSH
38538: LD_INT 2
38540: NEG
38541: PUSH
38542: EMPTY
38543: LIST
38544: LIST
38545: PUSH
38546: LD_INT 0
38548: PUSH
38549: LD_INT 2
38551: NEG
38552: PUSH
38553: EMPTY
38554: LIST
38555: LIST
38556: PUSH
38557: LD_INT 1
38559: PUSH
38560: LD_INT 1
38562: NEG
38563: PUSH
38564: EMPTY
38565: LIST
38566: LIST
38567: PUSH
38568: EMPTY
38569: LIST
38570: LIST
38571: LIST
38572: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
38573: LD_ADDR_VAR 0 60
38577: PUSH
38578: LD_INT 1
38580: PUSH
38581: LD_INT 1
38583: NEG
38584: PUSH
38585: EMPTY
38586: LIST
38587: LIST
38588: PUSH
38589: LD_INT 2
38591: PUSH
38592: LD_INT 0
38594: PUSH
38595: EMPTY
38596: LIST
38597: LIST
38598: PUSH
38599: LD_INT 2
38601: PUSH
38602: LD_INT 1
38604: PUSH
38605: EMPTY
38606: LIST
38607: LIST
38608: PUSH
38609: EMPTY
38610: LIST
38611: LIST
38612: LIST
38613: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
38614: LD_ADDR_VAR 0 61
38618: PUSH
38619: LD_INT 2
38621: PUSH
38622: LD_INT 1
38624: PUSH
38625: EMPTY
38626: LIST
38627: LIST
38628: PUSH
38629: LD_INT 2
38631: PUSH
38632: LD_INT 2
38634: PUSH
38635: EMPTY
38636: LIST
38637: LIST
38638: PUSH
38639: LD_INT 1
38641: PUSH
38642: LD_INT 2
38644: PUSH
38645: EMPTY
38646: LIST
38647: LIST
38648: PUSH
38649: EMPTY
38650: LIST
38651: LIST
38652: LIST
38653: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
38654: LD_ADDR_VAR 0 62
38658: PUSH
38659: LD_INT 1
38661: PUSH
38662: LD_INT 2
38664: PUSH
38665: EMPTY
38666: LIST
38667: LIST
38668: PUSH
38669: LD_INT 0
38671: PUSH
38672: LD_INT 2
38674: PUSH
38675: EMPTY
38676: LIST
38677: LIST
38678: PUSH
38679: LD_INT 1
38681: NEG
38682: PUSH
38683: LD_INT 1
38685: PUSH
38686: EMPTY
38687: LIST
38688: LIST
38689: PUSH
38690: EMPTY
38691: LIST
38692: LIST
38693: LIST
38694: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
38695: LD_ADDR_VAR 0 63
38699: PUSH
38700: LD_INT 1
38702: NEG
38703: PUSH
38704: LD_INT 1
38706: PUSH
38707: EMPTY
38708: LIST
38709: LIST
38710: PUSH
38711: LD_INT 2
38713: NEG
38714: PUSH
38715: LD_INT 0
38717: PUSH
38718: EMPTY
38719: LIST
38720: LIST
38721: PUSH
38722: LD_INT 2
38724: NEG
38725: PUSH
38726: LD_INT 1
38728: NEG
38729: PUSH
38730: EMPTY
38731: LIST
38732: LIST
38733: PUSH
38734: EMPTY
38735: LIST
38736: LIST
38737: LIST
38738: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38739: LD_ADDR_VAR 0 64
38743: PUSH
38744: LD_INT 1
38746: NEG
38747: PUSH
38748: LD_INT 2
38750: NEG
38751: PUSH
38752: EMPTY
38753: LIST
38754: LIST
38755: PUSH
38756: LD_INT 2
38758: NEG
38759: PUSH
38760: LD_INT 1
38762: NEG
38763: PUSH
38764: EMPTY
38765: LIST
38766: LIST
38767: PUSH
38768: LD_INT 2
38770: NEG
38771: PUSH
38772: LD_INT 2
38774: NEG
38775: PUSH
38776: EMPTY
38777: LIST
38778: LIST
38779: PUSH
38780: EMPTY
38781: LIST
38782: LIST
38783: LIST
38784: ST_TO_ADDR
// end ; 2 :
38785: GO 42051
38787: LD_INT 2
38789: DOUBLE
38790: EQUAL
38791: IFTRUE 38795
38793: GO 42050
38795: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
38796: LD_ADDR_VAR 0 29
38800: PUSH
38801: LD_INT 4
38803: PUSH
38804: LD_INT 0
38806: PUSH
38807: EMPTY
38808: LIST
38809: LIST
38810: PUSH
38811: LD_INT 4
38813: PUSH
38814: LD_INT 1
38816: NEG
38817: PUSH
38818: EMPTY
38819: LIST
38820: LIST
38821: PUSH
38822: LD_INT 5
38824: PUSH
38825: LD_INT 0
38827: PUSH
38828: EMPTY
38829: LIST
38830: LIST
38831: PUSH
38832: LD_INT 5
38834: PUSH
38835: LD_INT 1
38837: PUSH
38838: EMPTY
38839: LIST
38840: LIST
38841: PUSH
38842: LD_INT 4
38844: PUSH
38845: LD_INT 1
38847: PUSH
38848: EMPTY
38849: LIST
38850: LIST
38851: PUSH
38852: LD_INT 3
38854: PUSH
38855: LD_INT 0
38857: PUSH
38858: EMPTY
38859: LIST
38860: LIST
38861: PUSH
38862: LD_INT 3
38864: PUSH
38865: LD_INT 1
38867: NEG
38868: PUSH
38869: EMPTY
38870: LIST
38871: LIST
38872: PUSH
38873: LD_INT 3
38875: PUSH
38876: LD_INT 2
38878: NEG
38879: PUSH
38880: EMPTY
38881: LIST
38882: LIST
38883: PUSH
38884: LD_INT 5
38886: PUSH
38887: LD_INT 2
38889: PUSH
38890: EMPTY
38891: LIST
38892: LIST
38893: PUSH
38894: LD_INT 3
38896: PUSH
38897: LD_INT 3
38899: PUSH
38900: EMPTY
38901: LIST
38902: LIST
38903: PUSH
38904: LD_INT 3
38906: PUSH
38907: LD_INT 2
38909: PUSH
38910: EMPTY
38911: LIST
38912: LIST
38913: PUSH
38914: LD_INT 4
38916: PUSH
38917: LD_INT 3
38919: PUSH
38920: EMPTY
38921: LIST
38922: LIST
38923: PUSH
38924: LD_INT 4
38926: PUSH
38927: LD_INT 4
38929: PUSH
38930: EMPTY
38931: LIST
38932: LIST
38933: PUSH
38934: LD_INT 3
38936: PUSH
38937: LD_INT 4
38939: PUSH
38940: EMPTY
38941: LIST
38942: LIST
38943: PUSH
38944: LD_INT 2
38946: PUSH
38947: LD_INT 3
38949: PUSH
38950: EMPTY
38951: LIST
38952: LIST
38953: PUSH
38954: LD_INT 2
38956: PUSH
38957: LD_INT 2
38959: PUSH
38960: EMPTY
38961: LIST
38962: LIST
38963: PUSH
38964: LD_INT 4
38966: PUSH
38967: LD_INT 2
38969: PUSH
38970: EMPTY
38971: LIST
38972: LIST
38973: PUSH
38974: LD_INT 2
38976: PUSH
38977: LD_INT 4
38979: PUSH
38980: EMPTY
38981: LIST
38982: LIST
38983: PUSH
38984: LD_INT 0
38986: PUSH
38987: LD_INT 4
38989: PUSH
38990: EMPTY
38991: LIST
38992: LIST
38993: PUSH
38994: LD_INT 0
38996: PUSH
38997: LD_INT 3
38999: PUSH
39000: EMPTY
39001: LIST
39002: LIST
39003: PUSH
39004: LD_INT 1
39006: PUSH
39007: LD_INT 4
39009: PUSH
39010: EMPTY
39011: LIST
39012: LIST
39013: PUSH
39014: LD_INT 1
39016: PUSH
39017: LD_INT 5
39019: PUSH
39020: EMPTY
39021: LIST
39022: LIST
39023: PUSH
39024: LD_INT 0
39026: PUSH
39027: LD_INT 5
39029: PUSH
39030: EMPTY
39031: LIST
39032: LIST
39033: PUSH
39034: LD_INT 1
39036: NEG
39037: PUSH
39038: LD_INT 4
39040: PUSH
39041: EMPTY
39042: LIST
39043: LIST
39044: PUSH
39045: LD_INT 1
39047: NEG
39048: PUSH
39049: LD_INT 3
39051: PUSH
39052: EMPTY
39053: LIST
39054: LIST
39055: PUSH
39056: LD_INT 2
39058: PUSH
39059: LD_INT 5
39061: PUSH
39062: EMPTY
39063: LIST
39064: LIST
39065: PUSH
39066: LD_INT 2
39068: NEG
39069: PUSH
39070: LD_INT 3
39072: PUSH
39073: EMPTY
39074: LIST
39075: LIST
39076: PUSH
39077: LD_INT 3
39079: NEG
39080: PUSH
39081: LD_INT 0
39083: PUSH
39084: EMPTY
39085: LIST
39086: LIST
39087: PUSH
39088: LD_INT 3
39090: NEG
39091: PUSH
39092: LD_INT 1
39094: NEG
39095: PUSH
39096: EMPTY
39097: LIST
39098: LIST
39099: PUSH
39100: LD_INT 2
39102: NEG
39103: PUSH
39104: LD_INT 0
39106: PUSH
39107: EMPTY
39108: LIST
39109: LIST
39110: PUSH
39111: LD_INT 2
39113: NEG
39114: PUSH
39115: LD_INT 1
39117: PUSH
39118: EMPTY
39119: LIST
39120: LIST
39121: PUSH
39122: LD_INT 3
39124: NEG
39125: PUSH
39126: LD_INT 1
39128: PUSH
39129: EMPTY
39130: LIST
39131: LIST
39132: PUSH
39133: LD_INT 4
39135: NEG
39136: PUSH
39137: LD_INT 0
39139: PUSH
39140: EMPTY
39141: LIST
39142: LIST
39143: PUSH
39144: LD_INT 4
39146: NEG
39147: PUSH
39148: LD_INT 1
39150: NEG
39151: PUSH
39152: EMPTY
39153: LIST
39154: LIST
39155: PUSH
39156: LD_INT 4
39158: NEG
39159: PUSH
39160: LD_INT 2
39162: NEG
39163: PUSH
39164: EMPTY
39165: LIST
39166: LIST
39167: PUSH
39168: LD_INT 2
39170: NEG
39171: PUSH
39172: LD_INT 2
39174: PUSH
39175: EMPTY
39176: LIST
39177: LIST
39178: PUSH
39179: LD_INT 4
39181: NEG
39182: PUSH
39183: LD_INT 4
39185: NEG
39186: PUSH
39187: EMPTY
39188: LIST
39189: LIST
39190: PUSH
39191: LD_INT 4
39193: NEG
39194: PUSH
39195: LD_INT 5
39197: NEG
39198: PUSH
39199: EMPTY
39200: LIST
39201: LIST
39202: PUSH
39203: LD_INT 3
39205: NEG
39206: PUSH
39207: LD_INT 4
39209: NEG
39210: PUSH
39211: EMPTY
39212: LIST
39213: LIST
39214: PUSH
39215: LD_INT 3
39217: NEG
39218: PUSH
39219: LD_INT 3
39221: NEG
39222: PUSH
39223: EMPTY
39224: LIST
39225: LIST
39226: PUSH
39227: LD_INT 4
39229: NEG
39230: PUSH
39231: LD_INT 3
39233: NEG
39234: PUSH
39235: EMPTY
39236: LIST
39237: LIST
39238: PUSH
39239: LD_INT 5
39241: NEG
39242: PUSH
39243: LD_INT 4
39245: NEG
39246: PUSH
39247: EMPTY
39248: LIST
39249: LIST
39250: PUSH
39251: LD_INT 5
39253: NEG
39254: PUSH
39255: LD_INT 5
39257: NEG
39258: PUSH
39259: EMPTY
39260: LIST
39261: LIST
39262: PUSH
39263: LD_INT 3
39265: NEG
39266: PUSH
39267: LD_INT 5
39269: NEG
39270: PUSH
39271: EMPTY
39272: LIST
39273: LIST
39274: PUSH
39275: LD_INT 5
39277: NEG
39278: PUSH
39279: LD_INT 3
39281: NEG
39282: PUSH
39283: EMPTY
39284: LIST
39285: LIST
39286: PUSH
39287: EMPTY
39288: LIST
39289: LIST
39290: LIST
39291: LIST
39292: LIST
39293: LIST
39294: LIST
39295: LIST
39296: LIST
39297: LIST
39298: LIST
39299: LIST
39300: LIST
39301: LIST
39302: LIST
39303: LIST
39304: LIST
39305: LIST
39306: LIST
39307: LIST
39308: LIST
39309: LIST
39310: LIST
39311: LIST
39312: LIST
39313: LIST
39314: LIST
39315: LIST
39316: LIST
39317: LIST
39318: LIST
39319: LIST
39320: LIST
39321: LIST
39322: LIST
39323: LIST
39324: LIST
39325: LIST
39326: LIST
39327: LIST
39328: LIST
39329: LIST
39330: LIST
39331: LIST
39332: LIST
39333: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
39334: LD_ADDR_VAR 0 30
39338: PUSH
39339: LD_INT 4
39341: PUSH
39342: LD_INT 4
39344: PUSH
39345: EMPTY
39346: LIST
39347: LIST
39348: PUSH
39349: LD_INT 4
39351: PUSH
39352: LD_INT 3
39354: PUSH
39355: EMPTY
39356: LIST
39357: LIST
39358: PUSH
39359: LD_INT 5
39361: PUSH
39362: LD_INT 4
39364: PUSH
39365: EMPTY
39366: LIST
39367: LIST
39368: PUSH
39369: LD_INT 5
39371: PUSH
39372: LD_INT 5
39374: PUSH
39375: EMPTY
39376: LIST
39377: LIST
39378: PUSH
39379: LD_INT 4
39381: PUSH
39382: LD_INT 5
39384: PUSH
39385: EMPTY
39386: LIST
39387: LIST
39388: PUSH
39389: LD_INT 3
39391: PUSH
39392: LD_INT 4
39394: PUSH
39395: EMPTY
39396: LIST
39397: LIST
39398: PUSH
39399: LD_INT 3
39401: PUSH
39402: LD_INT 3
39404: PUSH
39405: EMPTY
39406: LIST
39407: LIST
39408: PUSH
39409: LD_INT 5
39411: PUSH
39412: LD_INT 3
39414: PUSH
39415: EMPTY
39416: LIST
39417: LIST
39418: PUSH
39419: LD_INT 3
39421: PUSH
39422: LD_INT 5
39424: PUSH
39425: EMPTY
39426: LIST
39427: LIST
39428: PUSH
39429: LD_INT 0
39431: PUSH
39432: LD_INT 3
39434: PUSH
39435: EMPTY
39436: LIST
39437: LIST
39438: PUSH
39439: LD_INT 0
39441: PUSH
39442: LD_INT 2
39444: PUSH
39445: EMPTY
39446: LIST
39447: LIST
39448: PUSH
39449: LD_INT 1
39451: PUSH
39452: LD_INT 3
39454: PUSH
39455: EMPTY
39456: LIST
39457: LIST
39458: PUSH
39459: LD_INT 1
39461: PUSH
39462: LD_INT 4
39464: PUSH
39465: EMPTY
39466: LIST
39467: LIST
39468: PUSH
39469: LD_INT 0
39471: PUSH
39472: LD_INT 4
39474: PUSH
39475: EMPTY
39476: LIST
39477: LIST
39478: PUSH
39479: LD_INT 1
39481: NEG
39482: PUSH
39483: LD_INT 3
39485: PUSH
39486: EMPTY
39487: LIST
39488: LIST
39489: PUSH
39490: LD_INT 1
39492: NEG
39493: PUSH
39494: LD_INT 2
39496: PUSH
39497: EMPTY
39498: LIST
39499: LIST
39500: PUSH
39501: LD_INT 2
39503: PUSH
39504: LD_INT 4
39506: PUSH
39507: EMPTY
39508: LIST
39509: LIST
39510: PUSH
39511: LD_INT 2
39513: NEG
39514: PUSH
39515: LD_INT 2
39517: PUSH
39518: EMPTY
39519: LIST
39520: LIST
39521: PUSH
39522: LD_INT 4
39524: NEG
39525: PUSH
39526: LD_INT 0
39528: PUSH
39529: EMPTY
39530: LIST
39531: LIST
39532: PUSH
39533: LD_INT 4
39535: NEG
39536: PUSH
39537: LD_INT 1
39539: NEG
39540: PUSH
39541: EMPTY
39542: LIST
39543: LIST
39544: PUSH
39545: LD_INT 3
39547: NEG
39548: PUSH
39549: LD_INT 0
39551: PUSH
39552: EMPTY
39553: LIST
39554: LIST
39555: PUSH
39556: LD_INT 3
39558: NEG
39559: PUSH
39560: LD_INT 1
39562: PUSH
39563: EMPTY
39564: LIST
39565: LIST
39566: PUSH
39567: LD_INT 4
39569: NEG
39570: PUSH
39571: LD_INT 1
39573: PUSH
39574: EMPTY
39575: LIST
39576: LIST
39577: PUSH
39578: LD_INT 5
39580: NEG
39581: PUSH
39582: LD_INT 0
39584: PUSH
39585: EMPTY
39586: LIST
39587: LIST
39588: PUSH
39589: LD_INT 5
39591: NEG
39592: PUSH
39593: LD_INT 1
39595: NEG
39596: PUSH
39597: EMPTY
39598: LIST
39599: LIST
39600: PUSH
39601: LD_INT 5
39603: NEG
39604: PUSH
39605: LD_INT 2
39607: NEG
39608: PUSH
39609: EMPTY
39610: LIST
39611: LIST
39612: PUSH
39613: LD_INT 3
39615: NEG
39616: PUSH
39617: LD_INT 2
39619: PUSH
39620: EMPTY
39621: LIST
39622: LIST
39623: PUSH
39624: LD_INT 3
39626: NEG
39627: PUSH
39628: LD_INT 3
39630: NEG
39631: PUSH
39632: EMPTY
39633: LIST
39634: LIST
39635: PUSH
39636: LD_INT 3
39638: NEG
39639: PUSH
39640: LD_INT 4
39642: NEG
39643: PUSH
39644: EMPTY
39645: LIST
39646: LIST
39647: PUSH
39648: LD_INT 2
39650: NEG
39651: PUSH
39652: LD_INT 3
39654: NEG
39655: PUSH
39656: EMPTY
39657: LIST
39658: LIST
39659: PUSH
39660: LD_INT 2
39662: NEG
39663: PUSH
39664: LD_INT 2
39666: NEG
39667: PUSH
39668: EMPTY
39669: LIST
39670: LIST
39671: PUSH
39672: LD_INT 3
39674: NEG
39675: PUSH
39676: LD_INT 2
39678: NEG
39679: PUSH
39680: EMPTY
39681: LIST
39682: LIST
39683: PUSH
39684: LD_INT 4
39686: NEG
39687: PUSH
39688: LD_INT 3
39690: NEG
39691: PUSH
39692: EMPTY
39693: LIST
39694: LIST
39695: PUSH
39696: LD_INT 4
39698: NEG
39699: PUSH
39700: LD_INT 4
39702: NEG
39703: PUSH
39704: EMPTY
39705: LIST
39706: LIST
39707: PUSH
39708: LD_INT 2
39710: NEG
39711: PUSH
39712: LD_INT 4
39714: NEG
39715: PUSH
39716: EMPTY
39717: LIST
39718: LIST
39719: PUSH
39720: LD_INT 4
39722: NEG
39723: PUSH
39724: LD_INT 2
39726: NEG
39727: PUSH
39728: EMPTY
39729: LIST
39730: LIST
39731: PUSH
39732: LD_INT 0
39734: PUSH
39735: LD_INT 4
39737: NEG
39738: PUSH
39739: EMPTY
39740: LIST
39741: LIST
39742: PUSH
39743: LD_INT 0
39745: PUSH
39746: LD_INT 5
39748: NEG
39749: PUSH
39750: EMPTY
39751: LIST
39752: LIST
39753: PUSH
39754: LD_INT 1
39756: PUSH
39757: LD_INT 4
39759: NEG
39760: PUSH
39761: EMPTY
39762: LIST
39763: LIST
39764: PUSH
39765: LD_INT 1
39767: PUSH
39768: LD_INT 3
39770: NEG
39771: PUSH
39772: EMPTY
39773: LIST
39774: LIST
39775: PUSH
39776: LD_INT 0
39778: PUSH
39779: LD_INT 3
39781: NEG
39782: PUSH
39783: EMPTY
39784: LIST
39785: LIST
39786: PUSH
39787: LD_INT 1
39789: NEG
39790: PUSH
39791: LD_INT 4
39793: NEG
39794: PUSH
39795: EMPTY
39796: LIST
39797: LIST
39798: PUSH
39799: LD_INT 1
39801: NEG
39802: PUSH
39803: LD_INT 5
39805: NEG
39806: PUSH
39807: EMPTY
39808: LIST
39809: LIST
39810: PUSH
39811: LD_INT 2
39813: PUSH
39814: LD_INT 3
39816: NEG
39817: PUSH
39818: EMPTY
39819: LIST
39820: LIST
39821: PUSH
39822: LD_INT 2
39824: NEG
39825: PUSH
39826: LD_INT 5
39828: NEG
39829: PUSH
39830: EMPTY
39831: LIST
39832: LIST
39833: PUSH
39834: EMPTY
39835: LIST
39836: LIST
39837: LIST
39838: LIST
39839: LIST
39840: LIST
39841: LIST
39842: LIST
39843: LIST
39844: LIST
39845: LIST
39846: LIST
39847: LIST
39848: LIST
39849: LIST
39850: LIST
39851: LIST
39852: LIST
39853: LIST
39854: LIST
39855: LIST
39856: LIST
39857: LIST
39858: LIST
39859: LIST
39860: LIST
39861: LIST
39862: LIST
39863: LIST
39864: LIST
39865: LIST
39866: LIST
39867: LIST
39868: LIST
39869: LIST
39870: LIST
39871: LIST
39872: LIST
39873: LIST
39874: LIST
39875: LIST
39876: LIST
39877: LIST
39878: LIST
39879: LIST
39880: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
39881: LD_ADDR_VAR 0 31
39885: PUSH
39886: LD_INT 0
39888: PUSH
39889: LD_INT 4
39891: PUSH
39892: EMPTY
39893: LIST
39894: LIST
39895: PUSH
39896: LD_INT 0
39898: PUSH
39899: LD_INT 3
39901: PUSH
39902: EMPTY
39903: LIST
39904: LIST
39905: PUSH
39906: LD_INT 1
39908: PUSH
39909: LD_INT 4
39911: PUSH
39912: EMPTY
39913: LIST
39914: LIST
39915: PUSH
39916: LD_INT 1
39918: PUSH
39919: LD_INT 5
39921: PUSH
39922: EMPTY
39923: LIST
39924: LIST
39925: PUSH
39926: LD_INT 0
39928: PUSH
39929: LD_INT 5
39931: PUSH
39932: EMPTY
39933: LIST
39934: LIST
39935: PUSH
39936: LD_INT 1
39938: NEG
39939: PUSH
39940: LD_INT 4
39942: PUSH
39943: EMPTY
39944: LIST
39945: LIST
39946: PUSH
39947: LD_INT 1
39949: NEG
39950: PUSH
39951: LD_INT 3
39953: PUSH
39954: EMPTY
39955: LIST
39956: LIST
39957: PUSH
39958: LD_INT 2
39960: PUSH
39961: LD_INT 5
39963: PUSH
39964: EMPTY
39965: LIST
39966: LIST
39967: PUSH
39968: LD_INT 2
39970: NEG
39971: PUSH
39972: LD_INT 3
39974: PUSH
39975: EMPTY
39976: LIST
39977: LIST
39978: PUSH
39979: LD_INT 3
39981: NEG
39982: PUSH
39983: LD_INT 0
39985: PUSH
39986: EMPTY
39987: LIST
39988: LIST
39989: PUSH
39990: LD_INT 3
39992: NEG
39993: PUSH
39994: LD_INT 1
39996: NEG
39997: PUSH
39998: EMPTY
39999: LIST
40000: LIST
40001: PUSH
40002: LD_INT 2
40004: NEG
40005: PUSH
40006: LD_INT 0
40008: PUSH
40009: EMPTY
40010: LIST
40011: LIST
40012: PUSH
40013: LD_INT 2
40015: NEG
40016: PUSH
40017: LD_INT 1
40019: PUSH
40020: EMPTY
40021: LIST
40022: LIST
40023: PUSH
40024: LD_INT 3
40026: NEG
40027: PUSH
40028: LD_INT 1
40030: PUSH
40031: EMPTY
40032: LIST
40033: LIST
40034: PUSH
40035: LD_INT 4
40037: NEG
40038: PUSH
40039: LD_INT 0
40041: PUSH
40042: EMPTY
40043: LIST
40044: LIST
40045: PUSH
40046: LD_INT 4
40048: NEG
40049: PUSH
40050: LD_INT 1
40052: NEG
40053: PUSH
40054: EMPTY
40055: LIST
40056: LIST
40057: PUSH
40058: LD_INT 4
40060: NEG
40061: PUSH
40062: LD_INT 2
40064: NEG
40065: PUSH
40066: EMPTY
40067: LIST
40068: LIST
40069: PUSH
40070: LD_INT 2
40072: NEG
40073: PUSH
40074: LD_INT 2
40076: PUSH
40077: EMPTY
40078: LIST
40079: LIST
40080: PUSH
40081: LD_INT 4
40083: NEG
40084: PUSH
40085: LD_INT 4
40087: NEG
40088: PUSH
40089: EMPTY
40090: LIST
40091: LIST
40092: PUSH
40093: LD_INT 4
40095: NEG
40096: PUSH
40097: LD_INT 5
40099: NEG
40100: PUSH
40101: EMPTY
40102: LIST
40103: LIST
40104: PUSH
40105: LD_INT 3
40107: NEG
40108: PUSH
40109: LD_INT 4
40111: NEG
40112: PUSH
40113: EMPTY
40114: LIST
40115: LIST
40116: PUSH
40117: LD_INT 3
40119: NEG
40120: PUSH
40121: LD_INT 3
40123: NEG
40124: PUSH
40125: EMPTY
40126: LIST
40127: LIST
40128: PUSH
40129: LD_INT 4
40131: NEG
40132: PUSH
40133: LD_INT 3
40135: NEG
40136: PUSH
40137: EMPTY
40138: LIST
40139: LIST
40140: PUSH
40141: LD_INT 5
40143: NEG
40144: PUSH
40145: LD_INT 4
40147: NEG
40148: PUSH
40149: EMPTY
40150: LIST
40151: LIST
40152: PUSH
40153: LD_INT 5
40155: NEG
40156: PUSH
40157: LD_INT 5
40159: NEG
40160: PUSH
40161: EMPTY
40162: LIST
40163: LIST
40164: PUSH
40165: LD_INT 3
40167: NEG
40168: PUSH
40169: LD_INT 5
40171: NEG
40172: PUSH
40173: EMPTY
40174: LIST
40175: LIST
40176: PUSH
40177: LD_INT 5
40179: NEG
40180: PUSH
40181: LD_INT 3
40183: NEG
40184: PUSH
40185: EMPTY
40186: LIST
40187: LIST
40188: PUSH
40189: LD_INT 0
40191: PUSH
40192: LD_INT 3
40194: NEG
40195: PUSH
40196: EMPTY
40197: LIST
40198: LIST
40199: PUSH
40200: LD_INT 0
40202: PUSH
40203: LD_INT 4
40205: NEG
40206: PUSH
40207: EMPTY
40208: LIST
40209: LIST
40210: PUSH
40211: LD_INT 1
40213: PUSH
40214: LD_INT 3
40216: NEG
40217: PUSH
40218: EMPTY
40219: LIST
40220: LIST
40221: PUSH
40222: LD_INT 1
40224: PUSH
40225: LD_INT 2
40227: NEG
40228: PUSH
40229: EMPTY
40230: LIST
40231: LIST
40232: PUSH
40233: LD_INT 0
40235: PUSH
40236: LD_INT 2
40238: NEG
40239: PUSH
40240: EMPTY
40241: LIST
40242: LIST
40243: PUSH
40244: LD_INT 1
40246: NEG
40247: PUSH
40248: LD_INT 3
40250: NEG
40251: PUSH
40252: EMPTY
40253: LIST
40254: LIST
40255: PUSH
40256: LD_INT 1
40258: NEG
40259: PUSH
40260: LD_INT 4
40262: NEG
40263: PUSH
40264: EMPTY
40265: LIST
40266: LIST
40267: PUSH
40268: LD_INT 2
40270: PUSH
40271: LD_INT 2
40273: NEG
40274: PUSH
40275: EMPTY
40276: LIST
40277: LIST
40278: PUSH
40279: LD_INT 2
40281: NEG
40282: PUSH
40283: LD_INT 4
40285: NEG
40286: PUSH
40287: EMPTY
40288: LIST
40289: LIST
40290: PUSH
40291: LD_INT 4
40293: PUSH
40294: LD_INT 0
40296: PUSH
40297: EMPTY
40298: LIST
40299: LIST
40300: PUSH
40301: LD_INT 4
40303: PUSH
40304: LD_INT 1
40306: NEG
40307: PUSH
40308: EMPTY
40309: LIST
40310: LIST
40311: PUSH
40312: LD_INT 5
40314: PUSH
40315: LD_INT 0
40317: PUSH
40318: EMPTY
40319: LIST
40320: LIST
40321: PUSH
40322: LD_INT 5
40324: PUSH
40325: LD_INT 1
40327: PUSH
40328: EMPTY
40329: LIST
40330: LIST
40331: PUSH
40332: LD_INT 4
40334: PUSH
40335: LD_INT 1
40337: PUSH
40338: EMPTY
40339: LIST
40340: LIST
40341: PUSH
40342: LD_INT 3
40344: PUSH
40345: LD_INT 0
40347: PUSH
40348: EMPTY
40349: LIST
40350: LIST
40351: PUSH
40352: LD_INT 3
40354: PUSH
40355: LD_INT 1
40357: NEG
40358: PUSH
40359: EMPTY
40360: LIST
40361: LIST
40362: PUSH
40363: LD_INT 3
40365: PUSH
40366: LD_INT 2
40368: NEG
40369: PUSH
40370: EMPTY
40371: LIST
40372: LIST
40373: PUSH
40374: LD_INT 5
40376: PUSH
40377: LD_INT 2
40379: PUSH
40380: EMPTY
40381: LIST
40382: LIST
40383: PUSH
40384: EMPTY
40385: LIST
40386: LIST
40387: LIST
40388: LIST
40389: LIST
40390: LIST
40391: LIST
40392: LIST
40393: LIST
40394: LIST
40395: LIST
40396: LIST
40397: LIST
40398: LIST
40399: LIST
40400: LIST
40401: LIST
40402: LIST
40403: LIST
40404: LIST
40405: LIST
40406: LIST
40407: LIST
40408: LIST
40409: LIST
40410: LIST
40411: LIST
40412: LIST
40413: LIST
40414: LIST
40415: LIST
40416: LIST
40417: LIST
40418: LIST
40419: LIST
40420: LIST
40421: LIST
40422: LIST
40423: LIST
40424: LIST
40425: LIST
40426: LIST
40427: LIST
40428: LIST
40429: LIST
40430: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
40431: LD_ADDR_VAR 0 32
40435: PUSH
40436: LD_INT 4
40438: NEG
40439: PUSH
40440: LD_INT 0
40442: PUSH
40443: EMPTY
40444: LIST
40445: LIST
40446: PUSH
40447: LD_INT 4
40449: NEG
40450: PUSH
40451: LD_INT 1
40453: NEG
40454: PUSH
40455: EMPTY
40456: LIST
40457: LIST
40458: PUSH
40459: LD_INT 3
40461: NEG
40462: PUSH
40463: LD_INT 0
40465: PUSH
40466: EMPTY
40467: LIST
40468: LIST
40469: PUSH
40470: LD_INT 3
40472: NEG
40473: PUSH
40474: LD_INT 1
40476: PUSH
40477: EMPTY
40478: LIST
40479: LIST
40480: PUSH
40481: LD_INT 4
40483: NEG
40484: PUSH
40485: LD_INT 1
40487: PUSH
40488: EMPTY
40489: LIST
40490: LIST
40491: PUSH
40492: LD_INT 5
40494: NEG
40495: PUSH
40496: LD_INT 0
40498: PUSH
40499: EMPTY
40500: LIST
40501: LIST
40502: PUSH
40503: LD_INT 5
40505: NEG
40506: PUSH
40507: LD_INT 1
40509: NEG
40510: PUSH
40511: EMPTY
40512: LIST
40513: LIST
40514: PUSH
40515: LD_INT 5
40517: NEG
40518: PUSH
40519: LD_INT 2
40521: NEG
40522: PUSH
40523: EMPTY
40524: LIST
40525: LIST
40526: PUSH
40527: LD_INT 3
40529: NEG
40530: PUSH
40531: LD_INT 2
40533: PUSH
40534: EMPTY
40535: LIST
40536: LIST
40537: PUSH
40538: LD_INT 3
40540: NEG
40541: PUSH
40542: LD_INT 3
40544: NEG
40545: PUSH
40546: EMPTY
40547: LIST
40548: LIST
40549: PUSH
40550: LD_INT 3
40552: NEG
40553: PUSH
40554: LD_INT 4
40556: NEG
40557: PUSH
40558: EMPTY
40559: LIST
40560: LIST
40561: PUSH
40562: LD_INT 2
40564: NEG
40565: PUSH
40566: LD_INT 3
40568: NEG
40569: PUSH
40570: EMPTY
40571: LIST
40572: LIST
40573: PUSH
40574: LD_INT 2
40576: NEG
40577: PUSH
40578: LD_INT 2
40580: NEG
40581: PUSH
40582: EMPTY
40583: LIST
40584: LIST
40585: PUSH
40586: LD_INT 3
40588: NEG
40589: PUSH
40590: LD_INT 2
40592: NEG
40593: PUSH
40594: EMPTY
40595: LIST
40596: LIST
40597: PUSH
40598: LD_INT 4
40600: NEG
40601: PUSH
40602: LD_INT 3
40604: NEG
40605: PUSH
40606: EMPTY
40607: LIST
40608: LIST
40609: PUSH
40610: LD_INT 4
40612: NEG
40613: PUSH
40614: LD_INT 4
40616: NEG
40617: PUSH
40618: EMPTY
40619: LIST
40620: LIST
40621: PUSH
40622: LD_INT 2
40624: NEG
40625: PUSH
40626: LD_INT 4
40628: NEG
40629: PUSH
40630: EMPTY
40631: LIST
40632: LIST
40633: PUSH
40634: LD_INT 4
40636: NEG
40637: PUSH
40638: LD_INT 2
40640: NEG
40641: PUSH
40642: EMPTY
40643: LIST
40644: LIST
40645: PUSH
40646: LD_INT 0
40648: PUSH
40649: LD_INT 4
40651: NEG
40652: PUSH
40653: EMPTY
40654: LIST
40655: LIST
40656: PUSH
40657: LD_INT 0
40659: PUSH
40660: LD_INT 5
40662: NEG
40663: PUSH
40664: EMPTY
40665: LIST
40666: LIST
40667: PUSH
40668: LD_INT 1
40670: PUSH
40671: LD_INT 4
40673: NEG
40674: PUSH
40675: EMPTY
40676: LIST
40677: LIST
40678: PUSH
40679: LD_INT 1
40681: PUSH
40682: LD_INT 3
40684: NEG
40685: PUSH
40686: EMPTY
40687: LIST
40688: LIST
40689: PUSH
40690: LD_INT 0
40692: PUSH
40693: LD_INT 3
40695: NEG
40696: PUSH
40697: EMPTY
40698: LIST
40699: LIST
40700: PUSH
40701: LD_INT 1
40703: NEG
40704: PUSH
40705: LD_INT 4
40707: NEG
40708: PUSH
40709: EMPTY
40710: LIST
40711: LIST
40712: PUSH
40713: LD_INT 1
40715: NEG
40716: PUSH
40717: LD_INT 5
40719: NEG
40720: PUSH
40721: EMPTY
40722: LIST
40723: LIST
40724: PUSH
40725: LD_INT 2
40727: PUSH
40728: LD_INT 3
40730: NEG
40731: PUSH
40732: EMPTY
40733: LIST
40734: LIST
40735: PUSH
40736: LD_INT 2
40738: NEG
40739: PUSH
40740: LD_INT 5
40742: NEG
40743: PUSH
40744: EMPTY
40745: LIST
40746: LIST
40747: PUSH
40748: LD_INT 3
40750: PUSH
40751: LD_INT 0
40753: PUSH
40754: EMPTY
40755: LIST
40756: LIST
40757: PUSH
40758: LD_INT 3
40760: PUSH
40761: LD_INT 1
40763: NEG
40764: PUSH
40765: EMPTY
40766: LIST
40767: LIST
40768: PUSH
40769: LD_INT 4
40771: PUSH
40772: LD_INT 0
40774: PUSH
40775: EMPTY
40776: LIST
40777: LIST
40778: PUSH
40779: LD_INT 4
40781: PUSH
40782: LD_INT 1
40784: PUSH
40785: EMPTY
40786: LIST
40787: LIST
40788: PUSH
40789: LD_INT 3
40791: PUSH
40792: LD_INT 1
40794: PUSH
40795: EMPTY
40796: LIST
40797: LIST
40798: PUSH
40799: LD_INT 2
40801: PUSH
40802: LD_INT 0
40804: PUSH
40805: EMPTY
40806: LIST
40807: LIST
40808: PUSH
40809: LD_INT 2
40811: PUSH
40812: LD_INT 1
40814: NEG
40815: PUSH
40816: EMPTY
40817: LIST
40818: LIST
40819: PUSH
40820: LD_INT 2
40822: PUSH
40823: LD_INT 2
40825: NEG
40826: PUSH
40827: EMPTY
40828: LIST
40829: LIST
40830: PUSH
40831: LD_INT 4
40833: PUSH
40834: LD_INT 2
40836: PUSH
40837: EMPTY
40838: LIST
40839: LIST
40840: PUSH
40841: LD_INT 4
40843: PUSH
40844: LD_INT 4
40846: PUSH
40847: EMPTY
40848: LIST
40849: LIST
40850: PUSH
40851: LD_INT 4
40853: PUSH
40854: LD_INT 3
40856: PUSH
40857: EMPTY
40858: LIST
40859: LIST
40860: PUSH
40861: LD_INT 5
40863: PUSH
40864: LD_INT 4
40866: PUSH
40867: EMPTY
40868: LIST
40869: LIST
40870: PUSH
40871: LD_INT 5
40873: PUSH
40874: LD_INT 5
40876: PUSH
40877: EMPTY
40878: LIST
40879: LIST
40880: PUSH
40881: LD_INT 4
40883: PUSH
40884: LD_INT 5
40886: PUSH
40887: EMPTY
40888: LIST
40889: LIST
40890: PUSH
40891: LD_INT 3
40893: PUSH
40894: LD_INT 4
40896: PUSH
40897: EMPTY
40898: LIST
40899: LIST
40900: PUSH
40901: LD_INT 3
40903: PUSH
40904: LD_INT 3
40906: PUSH
40907: EMPTY
40908: LIST
40909: LIST
40910: PUSH
40911: LD_INT 5
40913: PUSH
40914: LD_INT 3
40916: PUSH
40917: EMPTY
40918: LIST
40919: LIST
40920: PUSH
40921: LD_INT 3
40923: PUSH
40924: LD_INT 5
40926: PUSH
40927: EMPTY
40928: LIST
40929: LIST
40930: PUSH
40931: EMPTY
40932: LIST
40933: LIST
40934: LIST
40935: LIST
40936: LIST
40937: LIST
40938: LIST
40939: LIST
40940: LIST
40941: LIST
40942: LIST
40943: LIST
40944: LIST
40945: LIST
40946: LIST
40947: LIST
40948: LIST
40949: LIST
40950: LIST
40951: LIST
40952: LIST
40953: LIST
40954: LIST
40955: LIST
40956: LIST
40957: LIST
40958: LIST
40959: LIST
40960: LIST
40961: LIST
40962: LIST
40963: LIST
40964: LIST
40965: LIST
40966: LIST
40967: LIST
40968: LIST
40969: LIST
40970: LIST
40971: LIST
40972: LIST
40973: LIST
40974: LIST
40975: LIST
40976: LIST
40977: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
40978: LD_ADDR_VAR 0 33
40982: PUSH
40983: LD_INT 4
40985: NEG
40986: PUSH
40987: LD_INT 4
40989: NEG
40990: PUSH
40991: EMPTY
40992: LIST
40993: LIST
40994: PUSH
40995: LD_INT 4
40997: NEG
40998: PUSH
40999: LD_INT 5
41001: NEG
41002: PUSH
41003: EMPTY
41004: LIST
41005: LIST
41006: PUSH
41007: LD_INT 3
41009: NEG
41010: PUSH
41011: LD_INT 4
41013: NEG
41014: PUSH
41015: EMPTY
41016: LIST
41017: LIST
41018: PUSH
41019: LD_INT 3
41021: NEG
41022: PUSH
41023: LD_INT 3
41025: NEG
41026: PUSH
41027: EMPTY
41028: LIST
41029: LIST
41030: PUSH
41031: LD_INT 4
41033: NEG
41034: PUSH
41035: LD_INT 3
41037: NEG
41038: PUSH
41039: EMPTY
41040: LIST
41041: LIST
41042: PUSH
41043: LD_INT 5
41045: NEG
41046: PUSH
41047: LD_INT 4
41049: NEG
41050: PUSH
41051: EMPTY
41052: LIST
41053: LIST
41054: PUSH
41055: LD_INT 5
41057: NEG
41058: PUSH
41059: LD_INT 5
41061: NEG
41062: PUSH
41063: EMPTY
41064: LIST
41065: LIST
41066: PUSH
41067: LD_INT 3
41069: NEG
41070: PUSH
41071: LD_INT 5
41073: NEG
41074: PUSH
41075: EMPTY
41076: LIST
41077: LIST
41078: PUSH
41079: LD_INT 5
41081: NEG
41082: PUSH
41083: LD_INT 3
41085: NEG
41086: PUSH
41087: EMPTY
41088: LIST
41089: LIST
41090: PUSH
41091: LD_INT 0
41093: PUSH
41094: LD_INT 3
41096: NEG
41097: PUSH
41098: EMPTY
41099: LIST
41100: LIST
41101: PUSH
41102: LD_INT 0
41104: PUSH
41105: LD_INT 4
41107: NEG
41108: PUSH
41109: EMPTY
41110: LIST
41111: LIST
41112: PUSH
41113: LD_INT 1
41115: PUSH
41116: LD_INT 3
41118: NEG
41119: PUSH
41120: EMPTY
41121: LIST
41122: LIST
41123: PUSH
41124: LD_INT 1
41126: PUSH
41127: LD_INT 2
41129: NEG
41130: PUSH
41131: EMPTY
41132: LIST
41133: LIST
41134: PUSH
41135: LD_INT 0
41137: PUSH
41138: LD_INT 2
41140: NEG
41141: PUSH
41142: EMPTY
41143: LIST
41144: LIST
41145: PUSH
41146: LD_INT 1
41148: NEG
41149: PUSH
41150: LD_INT 3
41152: NEG
41153: PUSH
41154: EMPTY
41155: LIST
41156: LIST
41157: PUSH
41158: LD_INT 1
41160: NEG
41161: PUSH
41162: LD_INT 4
41164: NEG
41165: PUSH
41166: EMPTY
41167: LIST
41168: LIST
41169: PUSH
41170: LD_INT 2
41172: PUSH
41173: LD_INT 2
41175: NEG
41176: PUSH
41177: EMPTY
41178: LIST
41179: LIST
41180: PUSH
41181: LD_INT 2
41183: NEG
41184: PUSH
41185: LD_INT 4
41187: NEG
41188: PUSH
41189: EMPTY
41190: LIST
41191: LIST
41192: PUSH
41193: LD_INT 4
41195: PUSH
41196: LD_INT 0
41198: PUSH
41199: EMPTY
41200: LIST
41201: LIST
41202: PUSH
41203: LD_INT 4
41205: PUSH
41206: LD_INT 1
41208: NEG
41209: PUSH
41210: EMPTY
41211: LIST
41212: LIST
41213: PUSH
41214: LD_INT 5
41216: PUSH
41217: LD_INT 0
41219: PUSH
41220: EMPTY
41221: LIST
41222: LIST
41223: PUSH
41224: LD_INT 5
41226: PUSH
41227: LD_INT 1
41229: PUSH
41230: EMPTY
41231: LIST
41232: LIST
41233: PUSH
41234: LD_INT 4
41236: PUSH
41237: LD_INT 1
41239: PUSH
41240: EMPTY
41241: LIST
41242: LIST
41243: PUSH
41244: LD_INT 3
41246: PUSH
41247: LD_INT 0
41249: PUSH
41250: EMPTY
41251: LIST
41252: LIST
41253: PUSH
41254: LD_INT 3
41256: PUSH
41257: LD_INT 1
41259: NEG
41260: PUSH
41261: EMPTY
41262: LIST
41263: LIST
41264: PUSH
41265: LD_INT 3
41267: PUSH
41268: LD_INT 2
41270: NEG
41271: PUSH
41272: EMPTY
41273: LIST
41274: LIST
41275: PUSH
41276: LD_INT 5
41278: PUSH
41279: LD_INT 2
41281: PUSH
41282: EMPTY
41283: LIST
41284: LIST
41285: PUSH
41286: LD_INT 3
41288: PUSH
41289: LD_INT 3
41291: PUSH
41292: EMPTY
41293: LIST
41294: LIST
41295: PUSH
41296: LD_INT 3
41298: PUSH
41299: LD_INT 2
41301: PUSH
41302: EMPTY
41303: LIST
41304: LIST
41305: PUSH
41306: LD_INT 4
41308: PUSH
41309: LD_INT 3
41311: PUSH
41312: EMPTY
41313: LIST
41314: LIST
41315: PUSH
41316: LD_INT 4
41318: PUSH
41319: LD_INT 4
41321: PUSH
41322: EMPTY
41323: LIST
41324: LIST
41325: PUSH
41326: LD_INT 3
41328: PUSH
41329: LD_INT 4
41331: PUSH
41332: EMPTY
41333: LIST
41334: LIST
41335: PUSH
41336: LD_INT 2
41338: PUSH
41339: LD_INT 3
41341: PUSH
41342: EMPTY
41343: LIST
41344: LIST
41345: PUSH
41346: LD_INT 2
41348: PUSH
41349: LD_INT 2
41351: PUSH
41352: EMPTY
41353: LIST
41354: LIST
41355: PUSH
41356: LD_INT 4
41358: PUSH
41359: LD_INT 2
41361: PUSH
41362: EMPTY
41363: LIST
41364: LIST
41365: PUSH
41366: LD_INT 2
41368: PUSH
41369: LD_INT 4
41371: PUSH
41372: EMPTY
41373: LIST
41374: LIST
41375: PUSH
41376: LD_INT 0
41378: PUSH
41379: LD_INT 4
41381: PUSH
41382: EMPTY
41383: LIST
41384: LIST
41385: PUSH
41386: LD_INT 0
41388: PUSH
41389: LD_INT 3
41391: PUSH
41392: EMPTY
41393: LIST
41394: LIST
41395: PUSH
41396: LD_INT 1
41398: PUSH
41399: LD_INT 4
41401: PUSH
41402: EMPTY
41403: LIST
41404: LIST
41405: PUSH
41406: LD_INT 1
41408: PUSH
41409: LD_INT 5
41411: PUSH
41412: EMPTY
41413: LIST
41414: LIST
41415: PUSH
41416: LD_INT 0
41418: PUSH
41419: LD_INT 5
41421: PUSH
41422: EMPTY
41423: LIST
41424: LIST
41425: PUSH
41426: LD_INT 1
41428: NEG
41429: PUSH
41430: LD_INT 4
41432: PUSH
41433: EMPTY
41434: LIST
41435: LIST
41436: PUSH
41437: LD_INT 1
41439: NEG
41440: PUSH
41441: LD_INT 3
41443: PUSH
41444: EMPTY
41445: LIST
41446: LIST
41447: PUSH
41448: LD_INT 2
41450: PUSH
41451: LD_INT 5
41453: PUSH
41454: EMPTY
41455: LIST
41456: LIST
41457: PUSH
41458: LD_INT 2
41460: NEG
41461: PUSH
41462: LD_INT 3
41464: PUSH
41465: EMPTY
41466: LIST
41467: LIST
41468: PUSH
41469: EMPTY
41470: LIST
41471: LIST
41472: LIST
41473: LIST
41474: LIST
41475: LIST
41476: LIST
41477: LIST
41478: LIST
41479: LIST
41480: LIST
41481: LIST
41482: LIST
41483: LIST
41484: LIST
41485: LIST
41486: LIST
41487: LIST
41488: LIST
41489: LIST
41490: LIST
41491: LIST
41492: LIST
41493: LIST
41494: LIST
41495: LIST
41496: LIST
41497: LIST
41498: LIST
41499: LIST
41500: LIST
41501: LIST
41502: LIST
41503: LIST
41504: LIST
41505: LIST
41506: LIST
41507: LIST
41508: LIST
41509: LIST
41510: LIST
41511: LIST
41512: LIST
41513: LIST
41514: LIST
41515: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
41516: LD_ADDR_VAR 0 34
41520: PUSH
41521: LD_INT 0
41523: PUSH
41524: LD_INT 4
41526: NEG
41527: PUSH
41528: EMPTY
41529: LIST
41530: LIST
41531: PUSH
41532: LD_INT 0
41534: PUSH
41535: LD_INT 5
41537: NEG
41538: PUSH
41539: EMPTY
41540: LIST
41541: LIST
41542: PUSH
41543: LD_INT 1
41545: PUSH
41546: LD_INT 4
41548: NEG
41549: PUSH
41550: EMPTY
41551: LIST
41552: LIST
41553: PUSH
41554: LD_INT 1
41556: PUSH
41557: LD_INT 3
41559: NEG
41560: PUSH
41561: EMPTY
41562: LIST
41563: LIST
41564: PUSH
41565: LD_INT 0
41567: PUSH
41568: LD_INT 3
41570: NEG
41571: PUSH
41572: EMPTY
41573: LIST
41574: LIST
41575: PUSH
41576: LD_INT 1
41578: NEG
41579: PUSH
41580: LD_INT 4
41582: NEG
41583: PUSH
41584: EMPTY
41585: LIST
41586: LIST
41587: PUSH
41588: LD_INT 1
41590: NEG
41591: PUSH
41592: LD_INT 5
41594: NEG
41595: PUSH
41596: EMPTY
41597: LIST
41598: LIST
41599: PUSH
41600: LD_INT 2
41602: PUSH
41603: LD_INT 3
41605: NEG
41606: PUSH
41607: EMPTY
41608: LIST
41609: LIST
41610: PUSH
41611: LD_INT 2
41613: NEG
41614: PUSH
41615: LD_INT 5
41617: NEG
41618: PUSH
41619: EMPTY
41620: LIST
41621: LIST
41622: PUSH
41623: LD_INT 3
41625: PUSH
41626: LD_INT 0
41628: PUSH
41629: EMPTY
41630: LIST
41631: LIST
41632: PUSH
41633: LD_INT 3
41635: PUSH
41636: LD_INT 1
41638: NEG
41639: PUSH
41640: EMPTY
41641: LIST
41642: LIST
41643: PUSH
41644: LD_INT 4
41646: PUSH
41647: LD_INT 0
41649: PUSH
41650: EMPTY
41651: LIST
41652: LIST
41653: PUSH
41654: LD_INT 4
41656: PUSH
41657: LD_INT 1
41659: PUSH
41660: EMPTY
41661: LIST
41662: LIST
41663: PUSH
41664: LD_INT 3
41666: PUSH
41667: LD_INT 1
41669: PUSH
41670: EMPTY
41671: LIST
41672: LIST
41673: PUSH
41674: LD_INT 2
41676: PUSH
41677: LD_INT 0
41679: PUSH
41680: EMPTY
41681: LIST
41682: LIST
41683: PUSH
41684: LD_INT 2
41686: PUSH
41687: LD_INT 1
41689: NEG
41690: PUSH
41691: EMPTY
41692: LIST
41693: LIST
41694: PUSH
41695: LD_INT 2
41697: PUSH
41698: LD_INT 2
41700: NEG
41701: PUSH
41702: EMPTY
41703: LIST
41704: LIST
41705: PUSH
41706: LD_INT 4
41708: PUSH
41709: LD_INT 2
41711: PUSH
41712: EMPTY
41713: LIST
41714: LIST
41715: PUSH
41716: LD_INT 4
41718: PUSH
41719: LD_INT 4
41721: PUSH
41722: EMPTY
41723: LIST
41724: LIST
41725: PUSH
41726: LD_INT 4
41728: PUSH
41729: LD_INT 3
41731: PUSH
41732: EMPTY
41733: LIST
41734: LIST
41735: PUSH
41736: LD_INT 5
41738: PUSH
41739: LD_INT 4
41741: PUSH
41742: EMPTY
41743: LIST
41744: LIST
41745: PUSH
41746: LD_INT 5
41748: PUSH
41749: LD_INT 5
41751: PUSH
41752: EMPTY
41753: LIST
41754: LIST
41755: PUSH
41756: LD_INT 4
41758: PUSH
41759: LD_INT 5
41761: PUSH
41762: EMPTY
41763: LIST
41764: LIST
41765: PUSH
41766: LD_INT 3
41768: PUSH
41769: LD_INT 4
41771: PUSH
41772: EMPTY
41773: LIST
41774: LIST
41775: PUSH
41776: LD_INT 3
41778: PUSH
41779: LD_INT 3
41781: PUSH
41782: EMPTY
41783: LIST
41784: LIST
41785: PUSH
41786: LD_INT 5
41788: PUSH
41789: LD_INT 3
41791: PUSH
41792: EMPTY
41793: LIST
41794: LIST
41795: PUSH
41796: LD_INT 3
41798: PUSH
41799: LD_INT 5
41801: PUSH
41802: EMPTY
41803: LIST
41804: LIST
41805: PUSH
41806: LD_INT 0
41808: PUSH
41809: LD_INT 3
41811: PUSH
41812: EMPTY
41813: LIST
41814: LIST
41815: PUSH
41816: LD_INT 0
41818: PUSH
41819: LD_INT 2
41821: PUSH
41822: EMPTY
41823: LIST
41824: LIST
41825: PUSH
41826: LD_INT 1
41828: PUSH
41829: LD_INT 3
41831: PUSH
41832: EMPTY
41833: LIST
41834: LIST
41835: PUSH
41836: LD_INT 1
41838: PUSH
41839: LD_INT 4
41841: PUSH
41842: EMPTY
41843: LIST
41844: LIST
41845: PUSH
41846: LD_INT 0
41848: PUSH
41849: LD_INT 4
41851: PUSH
41852: EMPTY
41853: LIST
41854: LIST
41855: PUSH
41856: LD_INT 1
41858: NEG
41859: PUSH
41860: LD_INT 3
41862: PUSH
41863: EMPTY
41864: LIST
41865: LIST
41866: PUSH
41867: LD_INT 1
41869: NEG
41870: PUSH
41871: LD_INT 2
41873: PUSH
41874: EMPTY
41875: LIST
41876: LIST
41877: PUSH
41878: LD_INT 2
41880: PUSH
41881: LD_INT 4
41883: PUSH
41884: EMPTY
41885: LIST
41886: LIST
41887: PUSH
41888: LD_INT 2
41890: NEG
41891: PUSH
41892: LD_INT 2
41894: PUSH
41895: EMPTY
41896: LIST
41897: LIST
41898: PUSH
41899: LD_INT 4
41901: NEG
41902: PUSH
41903: LD_INT 0
41905: PUSH
41906: EMPTY
41907: LIST
41908: LIST
41909: PUSH
41910: LD_INT 4
41912: NEG
41913: PUSH
41914: LD_INT 1
41916: NEG
41917: PUSH
41918: EMPTY
41919: LIST
41920: LIST
41921: PUSH
41922: LD_INT 3
41924: NEG
41925: PUSH
41926: LD_INT 0
41928: PUSH
41929: EMPTY
41930: LIST
41931: LIST
41932: PUSH
41933: LD_INT 3
41935: NEG
41936: PUSH
41937: LD_INT 1
41939: PUSH
41940: EMPTY
41941: LIST
41942: LIST
41943: PUSH
41944: LD_INT 4
41946: NEG
41947: PUSH
41948: LD_INT 1
41950: PUSH
41951: EMPTY
41952: LIST
41953: LIST
41954: PUSH
41955: LD_INT 5
41957: NEG
41958: PUSH
41959: LD_INT 0
41961: PUSH
41962: EMPTY
41963: LIST
41964: LIST
41965: PUSH
41966: LD_INT 5
41968: NEG
41969: PUSH
41970: LD_INT 1
41972: NEG
41973: PUSH
41974: EMPTY
41975: LIST
41976: LIST
41977: PUSH
41978: LD_INT 5
41980: NEG
41981: PUSH
41982: LD_INT 2
41984: NEG
41985: PUSH
41986: EMPTY
41987: LIST
41988: LIST
41989: PUSH
41990: LD_INT 3
41992: NEG
41993: PUSH
41994: LD_INT 2
41996: PUSH
41997: EMPTY
41998: LIST
41999: LIST
42000: PUSH
42001: EMPTY
42002: LIST
42003: LIST
42004: LIST
42005: LIST
42006: LIST
42007: LIST
42008: LIST
42009: LIST
42010: LIST
42011: LIST
42012: LIST
42013: LIST
42014: LIST
42015: LIST
42016: LIST
42017: LIST
42018: LIST
42019: LIST
42020: LIST
42021: LIST
42022: LIST
42023: LIST
42024: LIST
42025: LIST
42026: LIST
42027: LIST
42028: LIST
42029: LIST
42030: LIST
42031: LIST
42032: LIST
42033: LIST
42034: LIST
42035: LIST
42036: LIST
42037: LIST
42038: LIST
42039: LIST
42040: LIST
42041: LIST
42042: LIST
42043: LIST
42044: LIST
42045: LIST
42046: LIST
42047: ST_TO_ADDR
// end ; end ;
42048: GO 42051
42050: POP
// case btype of b_depot , b_warehouse :
42051: LD_VAR 0 1
42055: PUSH
42056: LD_INT 0
42058: DOUBLE
42059: EQUAL
42060: IFTRUE 42070
42062: LD_INT 1
42064: DOUBLE
42065: EQUAL
42066: IFTRUE 42070
42068: GO 42271
42070: POP
// case nation of nation_american :
42071: LD_VAR 0 5
42075: PUSH
42076: LD_INT 1
42078: DOUBLE
42079: EQUAL
42080: IFTRUE 42084
42082: GO 42140
42084: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
42085: LD_ADDR_VAR 0 9
42089: PUSH
42090: LD_VAR 0 11
42094: PUSH
42095: LD_VAR 0 12
42099: PUSH
42100: LD_VAR 0 13
42104: PUSH
42105: LD_VAR 0 14
42109: PUSH
42110: LD_VAR 0 15
42114: PUSH
42115: LD_VAR 0 16
42119: PUSH
42120: EMPTY
42121: LIST
42122: LIST
42123: LIST
42124: LIST
42125: LIST
42126: LIST
42127: PUSH
42128: LD_VAR 0 4
42132: PUSH
42133: LD_INT 1
42135: PLUS
42136: ARRAY
42137: ST_TO_ADDR
42138: GO 42269
42140: LD_INT 2
42142: DOUBLE
42143: EQUAL
42144: IFTRUE 42148
42146: GO 42204
42148: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
42149: LD_ADDR_VAR 0 9
42153: PUSH
42154: LD_VAR 0 17
42158: PUSH
42159: LD_VAR 0 18
42163: PUSH
42164: LD_VAR 0 19
42168: PUSH
42169: LD_VAR 0 20
42173: PUSH
42174: LD_VAR 0 21
42178: PUSH
42179: LD_VAR 0 22
42183: PUSH
42184: EMPTY
42185: LIST
42186: LIST
42187: LIST
42188: LIST
42189: LIST
42190: LIST
42191: PUSH
42192: LD_VAR 0 4
42196: PUSH
42197: LD_INT 1
42199: PLUS
42200: ARRAY
42201: ST_TO_ADDR
42202: GO 42269
42204: LD_INT 3
42206: DOUBLE
42207: EQUAL
42208: IFTRUE 42212
42210: GO 42268
42212: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
42213: LD_ADDR_VAR 0 9
42217: PUSH
42218: LD_VAR 0 23
42222: PUSH
42223: LD_VAR 0 24
42227: PUSH
42228: LD_VAR 0 25
42232: PUSH
42233: LD_VAR 0 26
42237: PUSH
42238: LD_VAR 0 27
42242: PUSH
42243: LD_VAR 0 28
42247: PUSH
42248: EMPTY
42249: LIST
42250: LIST
42251: LIST
42252: LIST
42253: LIST
42254: LIST
42255: PUSH
42256: LD_VAR 0 4
42260: PUSH
42261: LD_INT 1
42263: PLUS
42264: ARRAY
42265: ST_TO_ADDR
42266: GO 42269
42268: POP
42269: GO 42824
42271: LD_INT 2
42273: DOUBLE
42274: EQUAL
42275: IFTRUE 42285
42277: LD_INT 3
42279: DOUBLE
42280: EQUAL
42281: IFTRUE 42285
42283: GO 42341
42285: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
42286: LD_ADDR_VAR 0 9
42290: PUSH
42291: LD_VAR 0 29
42295: PUSH
42296: LD_VAR 0 30
42300: PUSH
42301: LD_VAR 0 31
42305: PUSH
42306: LD_VAR 0 32
42310: PUSH
42311: LD_VAR 0 33
42315: PUSH
42316: LD_VAR 0 34
42320: PUSH
42321: EMPTY
42322: LIST
42323: LIST
42324: LIST
42325: LIST
42326: LIST
42327: LIST
42328: PUSH
42329: LD_VAR 0 4
42333: PUSH
42334: LD_INT 1
42336: PLUS
42337: ARRAY
42338: ST_TO_ADDR
42339: GO 42824
42341: LD_INT 16
42343: DOUBLE
42344: EQUAL
42345: IFTRUE 42403
42347: LD_INT 17
42349: DOUBLE
42350: EQUAL
42351: IFTRUE 42403
42353: LD_INT 18
42355: DOUBLE
42356: EQUAL
42357: IFTRUE 42403
42359: LD_INT 19
42361: DOUBLE
42362: EQUAL
42363: IFTRUE 42403
42365: LD_INT 22
42367: DOUBLE
42368: EQUAL
42369: IFTRUE 42403
42371: LD_INT 20
42373: DOUBLE
42374: EQUAL
42375: IFTRUE 42403
42377: LD_INT 21
42379: DOUBLE
42380: EQUAL
42381: IFTRUE 42403
42383: LD_INT 23
42385: DOUBLE
42386: EQUAL
42387: IFTRUE 42403
42389: LD_INT 24
42391: DOUBLE
42392: EQUAL
42393: IFTRUE 42403
42395: LD_INT 25
42397: DOUBLE
42398: EQUAL
42399: IFTRUE 42403
42401: GO 42459
42403: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
42404: LD_ADDR_VAR 0 9
42408: PUSH
42409: LD_VAR 0 35
42413: PUSH
42414: LD_VAR 0 36
42418: PUSH
42419: LD_VAR 0 37
42423: PUSH
42424: LD_VAR 0 38
42428: PUSH
42429: LD_VAR 0 39
42433: PUSH
42434: LD_VAR 0 40
42438: PUSH
42439: EMPTY
42440: LIST
42441: LIST
42442: LIST
42443: LIST
42444: LIST
42445: LIST
42446: PUSH
42447: LD_VAR 0 4
42451: PUSH
42452: LD_INT 1
42454: PLUS
42455: ARRAY
42456: ST_TO_ADDR
42457: GO 42824
42459: LD_INT 6
42461: DOUBLE
42462: EQUAL
42463: IFTRUE 42515
42465: LD_INT 7
42467: DOUBLE
42468: EQUAL
42469: IFTRUE 42515
42471: LD_INT 8
42473: DOUBLE
42474: EQUAL
42475: IFTRUE 42515
42477: LD_INT 13
42479: DOUBLE
42480: EQUAL
42481: IFTRUE 42515
42483: LD_INT 12
42485: DOUBLE
42486: EQUAL
42487: IFTRUE 42515
42489: LD_INT 15
42491: DOUBLE
42492: EQUAL
42493: IFTRUE 42515
42495: LD_INT 11
42497: DOUBLE
42498: EQUAL
42499: IFTRUE 42515
42501: LD_INT 14
42503: DOUBLE
42504: EQUAL
42505: IFTRUE 42515
42507: LD_INT 10
42509: DOUBLE
42510: EQUAL
42511: IFTRUE 42515
42513: GO 42571
42515: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
42516: LD_ADDR_VAR 0 9
42520: PUSH
42521: LD_VAR 0 41
42525: PUSH
42526: LD_VAR 0 42
42530: PUSH
42531: LD_VAR 0 43
42535: PUSH
42536: LD_VAR 0 44
42540: PUSH
42541: LD_VAR 0 45
42545: PUSH
42546: LD_VAR 0 46
42550: PUSH
42551: EMPTY
42552: LIST
42553: LIST
42554: LIST
42555: LIST
42556: LIST
42557: LIST
42558: PUSH
42559: LD_VAR 0 4
42563: PUSH
42564: LD_INT 1
42566: PLUS
42567: ARRAY
42568: ST_TO_ADDR
42569: GO 42824
42571: LD_INT 36
42573: DOUBLE
42574: EQUAL
42575: IFTRUE 42579
42577: GO 42635
42579: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
42580: LD_ADDR_VAR 0 9
42584: PUSH
42585: LD_VAR 0 47
42589: PUSH
42590: LD_VAR 0 48
42594: PUSH
42595: LD_VAR 0 49
42599: PUSH
42600: LD_VAR 0 50
42604: PUSH
42605: LD_VAR 0 51
42609: PUSH
42610: LD_VAR 0 52
42614: PUSH
42615: EMPTY
42616: LIST
42617: LIST
42618: LIST
42619: LIST
42620: LIST
42621: LIST
42622: PUSH
42623: LD_VAR 0 4
42627: PUSH
42628: LD_INT 1
42630: PLUS
42631: ARRAY
42632: ST_TO_ADDR
42633: GO 42824
42635: LD_INT 4
42637: DOUBLE
42638: EQUAL
42639: IFTRUE 42661
42641: LD_INT 5
42643: DOUBLE
42644: EQUAL
42645: IFTRUE 42661
42647: LD_INT 34
42649: DOUBLE
42650: EQUAL
42651: IFTRUE 42661
42653: LD_INT 37
42655: DOUBLE
42656: EQUAL
42657: IFTRUE 42661
42659: GO 42717
42661: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
42662: LD_ADDR_VAR 0 9
42666: PUSH
42667: LD_VAR 0 53
42671: PUSH
42672: LD_VAR 0 54
42676: PUSH
42677: LD_VAR 0 55
42681: PUSH
42682: LD_VAR 0 56
42686: PUSH
42687: LD_VAR 0 57
42691: PUSH
42692: LD_VAR 0 58
42696: PUSH
42697: EMPTY
42698: LIST
42699: LIST
42700: LIST
42701: LIST
42702: LIST
42703: LIST
42704: PUSH
42705: LD_VAR 0 4
42709: PUSH
42710: LD_INT 1
42712: PLUS
42713: ARRAY
42714: ST_TO_ADDR
42715: GO 42824
42717: LD_INT 31
42719: DOUBLE
42720: EQUAL
42721: IFTRUE 42767
42723: LD_INT 32
42725: DOUBLE
42726: EQUAL
42727: IFTRUE 42767
42729: LD_INT 33
42731: DOUBLE
42732: EQUAL
42733: IFTRUE 42767
42735: LD_INT 27
42737: DOUBLE
42738: EQUAL
42739: IFTRUE 42767
42741: LD_INT 26
42743: DOUBLE
42744: EQUAL
42745: IFTRUE 42767
42747: LD_INT 28
42749: DOUBLE
42750: EQUAL
42751: IFTRUE 42767
42753: LD_INT 29
42755: DOUBLE
42756: EQUAL
42757: IFTRUE 42767
42759: LD_INT 30
42761: DOUBLE
42762: EQUAL
42763: IFTRUE 42767
42765: GO 42823
42767: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
42768: LD_ADDR_VAR 0 9
42772: PUSH
42773: LD_VAR 0 59
42777: PUSH
42778: LD_VAR 0 60
42782: PUSH
42783: LD_VAR 0 61
42787: PUSH
42788: LD_VAR 0 62
42792: PUSH
42793: LD_VAR 0 63
42797: PUSH
42798: LD_VAR 0 64
42802: PUSH
42803: EMPTY
42804: LIST
42805: LIST
42806: LIST
42807: LIST
42808: LIST
42809: LIST
42810: PUSH
42811: LD_VAR 0 4
42815: PUSH
42816: LD_INT 1
42818: PLUS
42819: ARRAY
42820: ST_TO_ADDR
42821: GO 42824
42823: POP
// temp_list2 = [ ] ;
42824: LD_ADDR_VAR 0 10
42828: PUSH
42829: EMPTY
42830: ST_TO_ADDR
// for i in temp_list do
42831: LD_ADDR_VAR 0 8
42835: PUSH
42836: LD_VAR 0 9
42840: PUSH
42841: FOR_IN
42842: IFFALSE 42894
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
42844: LD_ADDR_VAR 0 10
42848: PUSH
42849: LD_VAR 0 10
42853: PUSH
42854: LD_VAR 0 8
42858: PUSH
42859: LD_INT 1
42861: ARRAY
42862: PUSH
42863: LD_VAR 0 2
42867: PLUS
42868: PUSH
42869: LD_VAR 0 8
42873: PUSH
42874: LD_INT 2
42876: ARRAY
42877: PUSH
42878: LD_VAR 0 3
42882: PLUS
42883: PUSH
42884: EMPTY
42885: LIST
42886: LIST
42887: PUSH
42888: EMPTY
42889: LIST
42890: ADD
42891: ST_TO_ADDR
42892: GO 42841
42894: POP
42895: POP
// result = temp_list2 ;
42896: LD_ADDR_VAR 0 7
42900: PUSH
42901: LD_VAR 0 10
42905: ST_TO_ADDR
// end ;
42906: LD_VAR 0 7
42910: RET
// export function EnemyInRange ( unit , dist ) ; begin
42911: LD_INT 0
42913: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
42914: LD_ADDR_VAR 0 3
42918: PUSH
42919: LD_VAR 0 1
42923: PPUSH
42924: CALL_OW 255
42928: PPUSH
42929: LD_VAR 0 1
42933: PPUSH
42934: CALL_OW 250
42938: PPUSH
42939: LD_VAR 0 1
42943: PPUSH
42944: CALL_OW 251
42948: PPUSH
42949: LD_VAR 0 2
42953: PPUSH
42954: CALL 16168 0 4
42958: PUSH
42959: LD_INT 4
42961: ARRAY
42962: ST_TO_ADDR
// end ;
42963: LD_VAR 0 3
42967: RET
// export function PlayerSeeMe ( unit ) ; begin
42968: LD_INT 0
42970: PPUSH
// result := See ( your_side , unit ) ;
42971: LD_ADDR_VAR 0 2
42975: PUSH
42976: LD_OWVAR 2
42980: PPUSH
42981: LD_VAR 0 1
42985: PPUSH
42986: CALL_OW 292
42990: ST_TO_ADDR
// end ;
42991: LD_VAR 0 2
42995: RET
// export function ReverseDir ( unit ) ; begin
42996: LD_INT 0
42998: PPUSH
// if not unit then
42999: LD_VAR 0 1
43003: NOT
43004: IFFALSE 43008
// exit ;
43006: GO 43031
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
43008: LD_ADDR_VAR 0 2
43012: PUSH
43013: LD_VAR 0 1
43017: PPUSH
43018: CALL_OW 254
43022: PUSH
43023: LD_INT 3
43025: PLUS
43026: PUSH
43027: LD_INT 6
43029: MOD
43030: ST_TO_ADDR
// end ;
43031: LD_VAR 0 2
43035: RET
// export function ReverseArray ( array ) ; var i ; begin
43036: LD_INT 0
43038: PPUSH
43039: PPUSH
// if not array then
43040: LD_VAR 0 1
43044: NOT
43045: IFFALSE 43049
// exit ;
43047: GO 43104
// result := [ ] ;
43049: LD_ADDR_VAR 0 2
43053: PUSH
43054: EMPTY
43055: ST_TO_ADDR
// for i := array downto 1 do
43056: LD_ADDR_VAR 0 3
43060: PUSH
43061: DOUBLE
43062: LD_VAR 0 1
43066: INC
43067: ST_TO_ADDR
43068: LD_INT 1
43070: PUSH
43071: FOR_DOWNTO
43072: IFFALSE 43102
// result := Join ( result , array [ i ] ) ;
43074: LD_ADDR_VAR 0 2
43078: PUSH
43079: LD_VAR 0 2
43083: PPUSH
43084: LD_VAR 0 1
43088: PUSH
43089: LD_VAR 0 3
43093: ARRAY
43094: PPUSH
43095: CALL 47946 0 2
43099: ST_TO_ADDR
43100: GO 43071
43102: POP
43103: POP
// end ;
43104: LD_VAR 0 2
43108: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
43109: LD_INT 0
43111: PPUSH
43112: PPUSH
43113: PPUSH
43114: PPUSH
43115: PPUSH
43116: PPUSH
// if not unit or not hexes then
43117: LD_VAR 0 1
43121: NOT
43122: IFTRUE 43131
43124: PUSH
43125: LD_VAR 0 2
43129: NOT
43130: OR
43131: IFFALSE 43135
// exit ;
43133: GO 43258
// dist := 9999 ;
43135: LD_ADDR_VAR 0 5
43139: PUSH
43140: LD_INT 9999
43142: ST_TO_ADDR
// for i = 1 to hexes do
43143: LD_ADDR_VAR 0 4
43147: PUSH
43148: DOUBLE
43149: LD_INT 1
43151: DEC
43152: ST_TO_ADDR
43153: LD_VAR 0 2
43157: PUSH
43158: FOR_TO
43159: IFFALSE 43246
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
43161: LD_ADDR_VAR 0 6
43165: PUSH
43166: LD_VAR 0 1
43170: PPUSH
43171: LD_VAR 0 2
43175: PUSH
43176: LD_VAR 0 4
43180: ARRAY
43181: PUSH
43182: LD_INT 1
43184: ARRAY
43185: PPUSH
43186: LD_VAR 0 2
43190: PUSH
43191: LD_VAR 0 4
43195: ARRAY
43196: PUSH
43197: LD_INT 2
43199: ARRAY
43200: PPUSH
43201: CALL_OW 297
43205: ST_TO_ADDR
// if tdist < dist then
43206: LD_VAR 0 6
43210: PUSH
43211: LD_VAR 0 5
43215: LESS
43216: IFFALSE 43244
// begin hex := hexes [ i ] ;
43218: LD_ADDR_VAR 0 8
43222: PUSH
43223: LD_VAR 0 2
43227: PUSH
43228: LD_VAR 0 4
43232: ARRAY
43233: ST_TO_ADDR
// dist := tdist ;
43234: LD_ADDR_VAR 0 5
43238: PUSH
43239: LD_VAR 0 6
43243: ST_TO_ADDR
// end ; end ;
43244: GO 43158
43246: POP
43247: POP
// result := hex ;
43248: LD_ADDR_VAR 0 3
43252: PUSH
43253: LD_VAR 0 8
43257: ST_TO_ADDR
// end ;
43258: LD_VAR 0 3
43262: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
43263: LD_INT 0
43265: PPUSH
43266: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
43267: LD_VAR 0 1
43271: NOT
43272: IFTRUE 43311
43274: PUSH
43275: LD_VAR 0 1
43279: PUSH
43280: LD_INT 21
43282: PUSH
43283: LD_INT 2
43285: PUSH
43286: EMPTY
43287: LIST
43288: LIST
43289: PUSH
43290: LD_INT 23
43292: PUSH
43293: LD_INT 2
43295: PUSH
43296: EMPTY
43297: LIST
43298: LIST
43299: PUSH
43300: EMPTY
43301: LIST
43302: LIST
43303: PPUSH
43304: CALL_OW 69
43308: IN
43309: NOT
43310: OR
43311: IFFALSE 43315
// exit ;
43313: GO 43362
// for i = 1 to 3 do
43315: LD_ADDR_VAR 0 3
43319: PUSH
43320: DOUBLE
43321: LD_INT 1
43323: DEC
43324: ST_TO_ADDR
43325: LD_INT 3
43327: PUSH
43328: FOR_TO
43329: IFFALSE 43360
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
43331: LD_VAR 0 1
43335: PPUSH
43336: CALL_OW 250
43340: PPUSH
43341: LD_VAR 0 1
43345: PPUSH
43346: CALL_OW 251
43350: PPUSH
43351: LD_INT 1
43353: PPUSH
43354: CALL_OW 453
43358: GO 43328
43360: POP
43361: POP
// end ;
43362: LD_VAR 0 2
43366: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
43367: LD_INT 0
43369: PPUSH
43370: PPUSH
43371: PPUSH
43372: PPUSH
43373: PPUSH
43374: PPUSH
// if not unit or not enemy_unit then
43375: LD_VAR 0 1
43379: NOT
43380: IFTRUE 43389
43382: PUSH
43383: LD_VAR 0 2
43387: NOT
43388: OR
43389: IFFALSE 43393
// exit ;
43391: GO 43864
// if GetLives ( i ) < 250 then
43393: LD_VAR 0 4
43397: PPUSH
43398: CALL_OW 256
43402: PUSH
43403: LD_INT 250
43405: LESS
43406: IFFALSE 43419
// begin ComAutodestruct ( i ) ;
43408: LD_VAR 0 4
43412: PPUSH
43413: CALL 43263 0 1
// exit ;
43417: GO 43864
// end ; x := GetX ( enemy_unit ) ;
43419: LD_ADDR_VAR 0 7
43423: PUSH
43424: LD_VAR 0 2
43428: PPUSH
43429: CALL_OW 250
43433: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
43434: LD_ADDR_VAR 0 8
43438: PUSH
43439: LD_VAR 0 2
43443: PPUSH
43444: CALL_OW 251
43448: ST_TO_ADDR
// if not x or not y then
43449: LD_VAR 0 7
43453: NOT
43454: IFTRUE 43463
43456: PUSH
43457: LD_VAR 0 8
43461: NOT
43462: OR
43463: IFFALSE 43467
// exit ;
43465: GO 43864
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
43467: LD_ADDR_VAR 0 6
43471: PUSH
43472: LD_VAR 0 7
43476: PPUSH
43477: LD_INT 0
43479: PPUSH
43480: LD_INT 4
43482: PPUSH
43483: CALL_OW 272
43487: PUSH
43488: LD_VAR 0 8
43492: PPUSH
43493: LD_INT 0
43495: PPUSH
43496: LD_INT 4
43498: PPUSH
43499: CALL_OW 273
43503: PUSH
43504: EMPTY
43505: LIST
43506: LIST
43507: PUSH
43508: LD_VAR 0 7
43512: PPUSH
43513: LD_INT 1
43515: PPUSH
43516: LD_INT 4
43518: PPUSH
43519: CALL_OW 272
43523: PUSH
43524: LD_VAR 0 8
43528: PPUSH
43529: LD_INT 1
43531: PPUSH
43532: LD_INT 4
43534: PPUSH
43535: CALL_OW 273
43539: PUSH
43540: EMPTY
43541: LIST
43542: LIST
43543: PUSH
43544: LD_VAR 0 7
43548: PPUSH
43549: LD_INT 2
43551: PPUSH
43552: LD_INT 4
43554: PPUSH
43555: CALL_OW 272
43559: PUSH
43560: LD_VAR 0 8
43564: PPUSH
43565: LD_INT 2
43567: PPUSH
43568: LD_INT 4
43570: PPUSH
43571: CALL_OW 273
43575: PUSH
43576: EMPTY
43577: LIST
43578: LIST
43579: PUSH
43580: LD_VAR 0 7
43584: PPUSH
43585: LD_INT 3
43587: PPUSH
43588: LD_INT 4
43590: PPUSH
43591: CALL_OW 272
43595: PUSH
43596: LD_VAR 0 8
43600: PPUSH
43601: LD_INT 3
43603: PPUSH
43604: LD_INT 4
43606: PPUSH
43607: CALL_OW 273
43611: PUSH
43612: EMPTY
43613: LIST
43614: LIST
43615: PUSH
43616: LD_VAR 0 7
43620: PPUSH
43621: LD_INT 4
43623: PPUSH
43624: LD_INT 4
43626: PPUSH
43627: CALL_OW 272
43631: PUSH
43632: LD_VAR 0 8
43636: PPUSH
43637: LD_INT 4
43639: PPUSH
43640: LD_INT 4
43642: PPUSH
43643: CALL_OW 273
43647: PUSH
43648: EMPTY
43649: LIST
43650: LIST
43651: PUSH
43652: LD_VAR 0 7
43656: PPUSH
43657: LD_INT 5
43659: PPUSH
43660: LD_INT 4
43662: PPUSH
43663: CALL_OW 272
43667: PUSH
43668: LD_VAR 0 8
43672: PPUSH
43673: LD_INT 5
43675: PPUSH
43676: LD_INT 4
43678: PPUSH
43679: CALL_OW 273
43683: PUSH
43684: EMPTY
43685: LIST
43686: LIST
43687: PUSH
43688: EMPTY
43689: LIST
43690: LIST
43691: LIST
43692: LIST
43693: LIST
43694: LIST
43695: ST_TO_ADDR
// for i = tmp downto 1 do
43696: LD_ADDR_VAR 0 4
43700: PUSH
43701: DOUBLE
43702: LD_VAR 0 6
43706: INC
43707: ST_TO_ADDR
43708: LD_INT 1
43710: PUSH
43711: FOR_DOWNTO
43712: IFFALSE 43815
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
43714: LD_VAR 0 6
43718: PUSH
43719: LD_VAR 0 4
43723: ARRAY
43724: PUSH
43725: LD_INT 1
43727: ARRAY
43728: PPUSH
43729: LD_VAR 0 6
43733: PUSH
43734: LD_VAR 0 4
43738: ARRAY
43739: PUSH
43740: LD_INT 2
43742: ARRAY
43743: PPUSH
43744: CALL_OW 488
43748: NOT
43749: IFTRUE 43791
43751: PUSH
43752: LD_VAR 0 6
43756: PUSH
43757: LD_VAR 0 4
43761: ARRAY
43762: PUSH
43763: LD_INT 1
43765: ARRAY
43766: PPUSH
43767: LD_VAR 0 6
43771: PUSH
43772: LD_VAR 0 4
43776: ARRAY
43777: PUSH
43778: LD_INT 2
43780: ARRAY
43781: PPUSH
43782: CALL_OW 428
43786: PUSH
43787: LD_INT 0
43789: NONEQUAL
43790: OR
43791: IFFALSE 43813
// tmp := Delete ( tmp , i ) ;
43793: LD_ADDR_VAR 0 6
43797: PUSH
43798: LD_VAR 0 6
43802: PPUSH
43803: LD_VAR 0 4
43807: PPUSH
43808: CALL_OW 3
43812: ST_TO_ADDR
43813: GO 43711
43815: POP
43816: POP
// j := GetClosestHex ( unit , tmp ) ;
43817: LD_ADDR_VAR 0 5
43821: PUSH
43822: LD_VAR 0 1
43826: PPUSH
43827: LD_VAR 0 6
43831: PPUSH
43832: CALL 43109 0 2
43836: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
43837: LD_VAR 0 1
43841: PPUSH
43842: LD_VAR 0 5
43846: PUSH
43847: LD_INT 1
43849: ARRAY
43850: PPUSH
43851: LD_VAR 0 5
43855: PUSH
43856: LD_INT 2
43858: ARRAY
43859: PPUSH
43860: CALL_OW 111
// end ;
43864: LD_VAR 0 3
43868: RET
// export function PrepareApemanSoldier ( ) ; begin
43869: LD_INT 0
43871: PPUSH
// uc_nation := 0 ;
43872: LD_ADDR_OWVAR 21
43876: PUSH
43877: LD_INT 0
43879: ST_TO_ADDR
// hc_sex := sex_male ;
43880: LD_ADDR_OWVAR 27
43884: PUSH
43885: LD_INT 1
43887: ST_TO_ADDR
// hc_name :=  ;
43888: LD_ADDR_OWVAR 26
43892: PUSH
43893: LD_STRING 
43895: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
43896: LD_ADDR_OWVAR 28
43900: PUSH
43901: LD_INT 15
43903: ST_TO_ADDR
// hc_gallery :=  ;
43904: LD_ADDR_OWVAR 33
43908: PUSH
43909: LD_STRING 
43911: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
43912: LD_ADDR_OWVAR 31
43916: PUSH
43917: LD_INT 0
43919: PPUSH
43920: LD_INT 3
43922: PPUSH
43923: CALL_OW 12
43927: PUSH
43928: LD_INT 0
43930: PPUSH
43931: LD_INT 3
43933: PPUSH
43934: CALL_OW 12
43938: PUSH
43939: LD_INT 0
43941: PUSH
43942: LD_INT 0
43944: PUSH
43945: EMPTY
43946: LIST
43947: LIST
43948: LIST
43949: LIST
43950: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
43951: LD_ADDR_OWVAR 29
43955: PUSH
43956: LD_INT 12
43958: PUSH
43959: LD_INT 12
43961: PUSH
43962: EMPTY
43963: LIST
43964: LIST
43965: ST_TO_ADDR
// end ;
43966: LD_VAR 0 1
43970: RET
// export function PrepareApemanEngineer ( ) ; begin
43971: LD_INT 0
43973: PPUSH
// uc_nation := 0 ;
43974: LD_ADDR_OWVAR 21
43978: PUSH
43979: LD_INT 0
43981: ST_TO_ADDR
// hc_sex := sex_male ;
43982: LD_ADDR_OWVAR 27
43986: PUSH
43987: LD_INT 1
43989: ST_TO_ADDR
// hc_name :=  ;
43990: LD_ADDR_OWVAR 26
43994: PUSH
43995: LD_STRING 
43997: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
43998: LD_ADDR_OWVAR 28
44002: PUSH
44003: LD_INT 16
44005: ST_TO_ADDR
// hc_gallery :=  ;
44006: LD_ADDR_OWVAR 33
44010: PUSH
44011: LD_STRING 
44013: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
44014: LD_ADDR_OWVAR 31
44018: PUSH
44019: LD_INT 0
44021: PPUSH
44022: LD_INT 3
44024: PPUSH
44025: CALL_OW 12
44029: PUSH
44030: LD_INT 0
44032: PPUSH
44033: LD_INT 3
44035: PPUSH
44036: CALL_OW 12
44040: PUSH
44041: LD_INT 0
44043: PUSH
44044: LD_INT 0
44046: PUSH
44047: EMPTY
44048: LIST
44049: LIST
44050: LIST
44051: LIST
44052: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
44053: LD_ADDR_OWVAR 29
44057: PUSH
44058: LD_INT 12
44060: PUSH
44061: LD_INT 12
44063: PUSH
44064: EMPTY
44065: LIST
44066: LIST
44067: ST_TO_ADDR
// end ;
44068: LD_VAR 0 1
44072: RET
// export function PrepareApeman ( agressivity ) ; begin
44073: LD_INT 0
44075: PPUSH
// uc_side := 0 ;
44076: LD_ADDR_OWVAR 20
44080: PUSH
44081: LD_INT 0
44083: ST_TO_ADDR
// uc_nation := 0 ;
44084: LD_ADDR_OWVAR 21
44088: PUSH
44089: LD_INT 0
44091: ST_TO_ADDR
// hc_sex := sex_male ;
44092: LD_ADDR_OWVAR 27
44096: PUSH
44097: LD_INT 1
44099: ST_TO_ADDR
// hc_class := class_apeman ;
44100: LD_ADDR_OWVAR 28
44104: PUSH
44105: LD_INT 12
44107: ST_TO_ADDR
// hc_gallery :=  ;
44108: LD_ADDR_OWVAR 33
44112: PUSH
44113: LD_STRING 
44115: ST_TO_ADDR
// hc_name :=  ;
44116: LD_ADDR_OWVAR 26
44120: PUSH
44121: LD_STRING 
44123: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
44124: LD_ADDR_OWVAR 29
44128: PUSH
44129: LD_INT 12
44131: PUSH
44132: LD_INT 12
44134: PUSH
44135: EMPTY
44136: LIST
44137: LIST
44138: ST_TO_ADDR
// if agressivity = 0 then
44139: LD_VAR 0 1
44143: PUSH
44144: LD_INT 0
44146: EQUAL
44147: IFFALSE 44159
// hc_agressivity := 0 else
44149: LD_ADDR_OWVAR 35
44153: PUSH
44154: LD_INT 0
44156: ST_TO_ADDR
44157: GO 44180
// hc_agressivity := rand ( - agressivity , agressivity ) ;
44159: LD_ADDR_OWVAR 35
44163: PUSH
44164: LD_VAR 0 1
44168: NEG
44169: PPUSH
44170: LD_VAR 0 1
44174: PPUSH
44175: CALL_OW 12
44179: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
44180: LD_ADDR_OWVAR 31
44184: PUSH
44185: LD_INT 0
44187: PPUSH
44188: LD_INT 3
44190: PPUSH
44191: CALL_OW 12
44195: PUSH
44196: LD_INT 0
44198: PPUSH
44199: LD_INT 3
44201: PPUSH
44202: CALL_OW 12
44206: PUSH
44207: LD_INT 0
44209: PUSH
44210: LD_INT 0
44212: PUSH
44213: EMPTY
44214: LIST
44215: LIST
44216: LIST
44217: LIST
44218: ST_TO_ADDR
// end ;
44219: LD_VAR 0 2
44223: RET
// export function PrepareTiger ( agressivity ) ; begin
44224: LD_INT 0
44226: PPUSH
// uc_side := 0 ;
44227: LD_ADDR_OWVAR 20
44231: PUSH
44232: LD_INT 0
44234: ST_TO_ADDR
// uc_nation := 0 ;
44235: LD_ADDR_OWVAR 21
44239: PUSH
44240: LD_INT 0
44242: ST_TO_ADDR
// InitHc ;
44243: CALL_OW 19
// hc_class := class_tiger ;
44247: LD_ADDR_OWVAR 28
44251: PUSH
44252: LD_INT 14
44254: ST_TO_ADDR
// hc_gallery :=  ;
44255: LD_ADDR_OWVAR 33
44259: PUSH
44260: LD_STRING 
44262: ST_TO_ADDR
// hc_name :=  ;
44263: LD_ADDR_OWVAR 26
44267: PUSH
44268: LD_STRING 
44270: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
44271: LD_ADDR_OWVAR 35
44275: PUSH
44276: LD_VAR 0 1
44280: NEG
44281: PPUSH
44282: LD_VAR 0 1
44286: PPUSH
44287: CALL_OW 12
44291: ST_TO_ADDR
// end ;
44292: LD_VAR 0 2
44296: RET
// export function PrepareEnchidna ( ) ; begin
44297: LD_INT 0
44299: PPUSH
// uc_side := 0 ;
44300: LD_ADDR_OWVAR 20
44304: PUSH
44305: LD_INT 0
44307: ST_TO_ADDR
// uc_nation := 0 ;
44308: LD_ADDR_OWVAR 21
44312: PUSH
44313: LD_INT 0
44315: ST_TO_ADDR
// InitHc ;
44316: CALL_OW 19
// hc_class := class_baggie ;
44320: LD_ADDR_OWVAR 28
44324: PUSH
44325: LD_INT 13
44327: ST_TO_ADDR
// hc_gallery :=  ;
44328: LD_ADDR_OWVAR 33
44332: PUSH
44333: LD_STRING 
44335: ST_TO_ADDR
// hc_name :=  ;
44336: LD_ADDR_OWVAR 26
44340: PUSH
44341: LD_STRING 
44343: ST_TO_ADDR
// end ;
44344: LD_VAR 0 1
44348: RET
// export function PrepareFrog ( ) ; begin
44349: LD_INT 0
44351: PPUSH
// uc_side := 0 ;
44352: LD_ADDR_OWVAR 20
44356: PUSH
44357: LD_INT 0
44359: ST_TO_ADDR
// uc_nation := 0 ;
44360: LD_ADDR_OWVAR 21
44364: PUSH
44365: LD_INT 0
44367: ST_TO_ADDR
// InitHc ;
44368: CALL_OW 19
// hc_class := class_frog ;
44372: LD_ADDR_OWVAR 28
44376: PUSH
44377: LD_INT 19
44379: ST_TO_ADDR
// hc_gallery :=  ;
44380: LD_ADDR_OWVAR 33
44384: PUSH
44385: LD_STRING 
44387: ST_TO_ADDR
// hc_name :=  ;
44388: LD_ADDR_OWVAR 26
44392: PUSH
44393: LD_STRING 
44395: ST_TO_ADDR
// end ;
44396: LD_VAR 0 1
44400: RET
// export function PrepareFish ( ) ; begin
44401: LD_INT 0
44403: PPUSH
// uc_side := 0 ;
44404: LD_ADDR_OWVAR 20
44408: PUSH
44409: LD_INT 0
44411: ST_TO_ADDR
// uc_nation := 0 ;
44412: LD_ADDR_OWVAR 21
44416: PUSH
44417: LD_INT 0
44419: ST_TO_ADDR
// InitHc ;
44420: CALL_OW 19
// hc_class := class_fish ;
44424: LD_ADDR_OWVAR 28
44428: PUSH
44429: LD_INT 20
44431: ST_TO_ADDR
// hc_gallery :=  ;
44432: LD_ADDR_OWVAR 33
44436: PUSH
44437: LD_STRING 
44439: ST_TO_ADDR
// hc_name :=  ;
44440: LD_ADDR_OWVAR 26
44444: PUSH
44445: LD_STRING 
44447: ST_TO_ADDR
// end ;
44448: LD_VAR 0 1
44452: RET
// export function PrepareBird ( ) ; begin
44453: LD_INT 0
44455: PPUSH
// uc_side := 0 ;
44456: LD_ADDR_OWVAR 20
44460: PUSH
44461: LD_INT 0
44463: ST_TO_ADDR
// uc_nation := 0 ;
44464: LD_ADDR_OWVAR 21
44468: PUSH
44469: LD_INT 0
44471: ST_TO_ADDR
// InitHc ;
44472: CALL_OW 19
// hc_class := class_phororhacos ;
44476: LD_ADDR_OWVAR 28
44480: PUSH
44481: LD_INT 18
44483: ST_TO_ADDR
// hc_gallery :=  ;
44484: LD_ADDR_OWVAR 33
44488: PUSH
44489: LD_STRING 
44491: ST_TO_ADDR
// hc_name :=  ;
44492: LD_ADDR_OWVAR 26
44496: PUSH
44497: LD_STRING 
44499: ST_TO_ADDR
// end ;
44500: LD_VAR 0 1
44504: RET
// export function PrepareHorse ( ) ; begin
44505: LD_INT 0
44507: PPUSH
// uc_side := 0 ;
44508: LD_ADDR_OWVAR 20
44512: PUSH
44513: LD_INT 0
44515: ST_TO_ADDR
// uc_nation := 0 ;
44516: LD_ADDR_OWVAR 21
44520: PUSH
44521: LD_INT 0
44523: ST_TO_ADDR
// InitHc ;
44524: CALL_OW 19
// hc_class := class_horse ;
44528: LD_ADDR_OWVAR 28
44532: PUSH
44533: LD_INT 21
44535: ST_TO_ADDR
// hc_gallery :=  ;
44536: LD_ADDR_OWVAR 33
44540: PUSH
44541: LD_STRING 
44543: ST_TO_ADDR
// hc_name :=  ;
44544: LD_ADDR_OWVAR 26
44548: PUSH
44549: LD_STRING 
44551: ST_TO_ADDR
// end ;
44552: LD_VAR 0 1
44556: RET
// export function PrepareMastodont ( ) ; begin
44557: LD_INT 0
44559: PPUSH
// uc_side := 0 ;
44560: LD_ADDR_OWVAR 20
44564: PUSH
44565: LD_INT 0
44567: ST_TO_ADDR
// uc_nation := 0 ;
44568: LD_ADDR_OWVAR 21
44572: PUSH
44573: LD_INT 0
44575: ST_TO_ADDR
// vc_chassis := class_mastodont ;
44576: LD_ADDR_OWVAR 37
44580: PUSH
44581: LD_INT 31
44583: ST_TO_ADDR
// vc_control := control_rider ;
44584: LD_ADDR_OWVAR 38
44588: PUSH
44589: LD_INT 4
44591: ST_TO_ADDR
// end ;
44592: LD_VAR 0 1
44596: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
44597: LD_INT 0
44599: PPUSH
44600: PPUSH
44601: PPUSH
// uc_side = 0 ;
44602: LD_ADDR_OWVAR 20
44606: PUSH
44607: LD_INT 0
44609: ST_TO_ADDR
// uc_nation = 0 ;
44610: LD_ADDR_OWVAR 21
44614: PUSH
44615: LD_INT 0
44617: ST_TO_ADDR
// InitHc_All ( ) ;
44618: CALL_OW 584
// InitVc ;
44622: CALL_OW 20
// if mastodonts then
44626: LD_VAR 0 6
44630: IFFALSE 44697
// for i = 1 to mastodonts do
44632: LD_ADDR_VAR 0 11
44636: PUSH
44637: DOUBLE
44638: LD_INT 1
44640: DEC
44641: ST_TO_ADDR
44642: LD_VAR 0 6
44646: PUSH
44647: FOR_TO
44648: IFFALSE 44695
// begin vc_chassis := 31 ;
44650: LD_ADDR_OWVAR 37
44654: PUSH
44655: LD_INT 31
44657: ST_TO_ADDR
// vc_control := control_rider ;
44658: LD_ADDR_OWVAR 38
44662: PUSH
44663: LD_INT 4
44665: ST_TO_ADDR
// animal := CreateVehicle ;
44666: LD_ADDR_VAR 0 12
44670: PUSH
44671: CALL_OW 45
44675: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
44676: LD_VAR 0 12
44680: PPUSH
44681: LD_VAR 0 8
44685: PPUSH
44686: LD_INT 0
44688: PPUSH
44689: CALL 46839 0 3
// end ;
44693: GO 44647
44695: POP
44696: POP
// if horses then
44697: LD_VAR 0 5
44701: IFFALSE 44768
// for i = 1 to horses do
44703: LD_ADDR_VAR 0 11
44707: PUSH
44708: DOUBLE
44709: LD_INT 1
44711: DEC
44712: ST_TO_ADDR
44713: LD_VAR 0 5
44717: PUSH
44718: FOR_TO
44719: IFFALSE 44766
// begin hc_class := 21 ;
44721: LD_ADDR_OWVAR 28
44725: PUSH
44726: LD_INT 21
44728: ST_TO_ADDR
// hc_gallery :=  ;
44729: LD_ADDR_OWVAR 33
44733: PUSH
44734: LD_STRING 
44736: ST_TO_ADDR
// animal := CreateHuman ;
44737: LD_ADDR_VAR 0 12
44741: PUSH
44742: CALL_OW 44
44746: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
44747: LD_VAR 0 12
44751: PPUSH
44752: LD_VAR 0 8
44756: PPUSH
44757: LD_INT 0
44759: PPUSH
44760: CALL 46839 0 3
// end ;
44764: GO 44718
44766: POP
44767: POP
// if birds then
44768: LD_VAR 0 1
44772: IFFALSE 44839
// for i = 1 to birds do
44774: LD_ADDR_VAR 0 11
44778: PUSH
44779: DOUBLE
44780: LD_INT 1
44782: DEC
44783: ST_TO_ADDR
44784: LD_VAR 0 1
44788: PUSH
44789: FOR_TO
44790: IFFALSE 44837
// begin hc_class := 18 ;
44792: LD_ADDR_OWVAR 28
44796: PUSH
44797: LD_INT 18
44799: ST_TO_ADDR
// hc_gallery =  ;
44800: LD_ADDR_OWVAR 33
44804: PUSH
44805: LD_STRING 
44807: ST_TO_ADDR
// animal := CreateHuman ;
44808: LD_ADDR_VAR 0 12
44812: PUSH
44813: CALL_OW 44
44817: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
44818: LD_VAR 0 12
44822: PPUSH
44823: LD_VAR 0 8
44827: PPUSH
44828: LD_INT 0
44830: PPUSH
44831: CALL 46839 0 3
// end ;
44835: GO 44789
44837: POP
44838: POP
// if tigers then
44839: LD_VAR 0 2
44843: IFFALSE 44927
// for i = 1 to tigers do
44845: LD_ADDR_VAR 0 11
44849: PUSH
44850: DOUBLE
44851: LD_INT 1
44853: DEC
44854: ST_TO_ADDR
44855: LD_VAR 0 2
44859: PUSH
44860: FOR_TO
44861: IFFALSE 44925
// begin hc_class = class_tiger ;
44863: LD_ADDR_OWVAR 28
44867: PUSH
44868: LD_INT 14
44870: ST_TO_ADDR
// hc_gallery =  ;
44871: LD_ADDR_OWVAR 33
44875: PUSH
44876: LD_STRING 
44878: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
44879: LD_ADDR_OWVAR 35
44883: PUSH
44884: LD_INT 7
44886: NEG
44887: PPUSH
44888: LD_INT 7
44890: PPUSH
44891: CALL_OW 12
44895: ST_TO_ADDR
// animal := CreateHuman ;
44896: LD_ADDR_VAR 0 12
44900: PUSH
44901: CALL_OW 44
44905: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
44906: LD_VAR 0 12
44910: PPUSH
44911: LD_VAR 0 8
44915: PPUSH
44916: LD_INT 0
44918: PPUSH
44919: CALL 46839 0 3
// end ;
44923: GO 44860
44925: POP
44926: POP
// if apemans then
44927: LD_VAR 0 3
44931: IFFALSE 45054
// for i = 1 to apemans do
44933: LD_ADDR_VAR 0 11
44937: PUSH
44938: DOUBLE
44939: LD_INT 1
44941: DEC
44942: ST_TO_ADDR
44943: LD_VAR 0 3
44947: PUSH
44948: FOR_TO
44949: IFFALSE 45052
// begin hc_class = class_apeman ;
44951: LD_ADDR_OWVAR 28
44955: PUSH
44956: LD_INT 12
44958: ST_TO_ADDR
// hc_gallery =  ;
44959: LD_ADDR_OWVAR 33
44963: PUSH
44964: LD_STRING 
44966: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
44967: LD_ADDR_OWVAR 35
44971: PUSH
44972: LD_INT 2
44974: NEG
44975: PPUSH
44976: LD_INT 2
44978: PPUSH
44979: CALL_OW 12
44983: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
44984: LD_ADDR_OWVAR 31
44988: PUSH
44989: LD_INT 1
44991: PPUSH
44992: LD_INT 3
44994: PPUSH
44995: CALL_OW 12
44999: PUSH
45000: LD_INT 1
45002: PPUSH
45003: LD_INT 3
45005: PPUSH
45006: CALL_OW 12
45010: PUSH
45011: LD_INT 0
45013: PUSH
45014: LD_INT 0
45016: PUSH
45017: EMPTY
45018: LIST
45019: LIST
45020: LIST
45021: LIST
45022: ST_TO_ADDR
// animal := CreateHuman ;
45023: LD_ADDR_VAR 0 12
45027: PUSH
45028: CALL_OW 44
45032: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
45033: LD_VAR 0 12
45037: PPUSH
45038: LD_VAR 0 8
45042: PPUSH
45043: LD_INT 0
45045: PPUSH
45046: CALL 46839 0 3
// end ;
45050: GO 44948
45052: POP
45053: POP
// if enchidnas then
45054: LD_VAR 0 4
45058: IFFALSE 45125
// for i = 1 to enchidnas do
45060: LD_ADDR_VAR 0 11
45064: PUSH
45065: DOUBLE
45066: LD_INT 1
45068: DEC
45069: ST_TO_ADDR
45070: LD_VAR 0 4
45074: PUSH
45075: FOR_TO
45076: IFFALSE 45123
// begin hc_class = 13 ;
45078: LD_ADDR_OWVAR 28
45082: PUSH
45083: LD_INT 13
45085: ST_TO_ADDR
// hc_gallery =  ;
45086: LD_ADDR_OWVAR 33
45090: PUSH
45091: LD_STRING 
45093: ST_TO_ADDR
// animal := CreateHuman ;
45094: LD_ADDR_VAR 0 12
45098: PUSH
45099: CALL_OW 44
45103: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
45104: LD_VAR 0 12
45108: PPUSH
45109: LD_VAR 0 8
45113: PPUSH
45114: LD_INT 0
45116: PPUSH
45117: CALL 46839 0 3
// end ;
45121: GO 45075
45123: POP
45124: POP
// if fishes then
45125: LD_VAR 0 7
45129: IFFALSE 45196
// for i = 1 to fishes do
45131: LD_ADDR_VAR 0 11
45135: PUSH
45136: DOUBLE
45137: LD_INT 1
45139: DEC
45140: ST_TO_ADDR
45141: LD_VAR 0 7
45145: PUSH
45146: FOR_TO
45147: IFFALSE 45194
// begin hc_class = 20 ;
45149: LD_ADDR_OWVAR 28
45153: PUSH
45154: LD_INT 20
45156: ST_TO_ADDR
// hc_gallery =  ;
45157: LD_ADDR_OWVAR 33
45161: PUSH
45162: LD_STRING 
45164: ST_TO_ADDR
// animal := CreateHuman ;
45165: LD_ADDR_VAR 0 12
45169: PUSH
45170: CALL_OW 44
45174: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
45175: LD_VAR 0 12
45179: PPUSH
45180: LD_VAR 0 9
45184: PPUSH
45185: LD_INT 0
45187: PPUSH
45188: CALL 46839 0 3
// end ;
45192: GO 45146
45194: POP
45195: POP
// end ;
45196: LD_VAR 0 10
45200: RET
// export function WantHeal ( sci , unit ) ; begin
45201: LD_INT 0
45203: PPUSH
// if GetTaskList ( sci ) > 0 then
45204: LD_VAR 0 1
45208: PPUSH
45209: CALL_OW 437
45213: PUSH
45214: LD_INT 0
45216: GREATER
45217: IFFALSE 45289
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
45219: LD_VAR 0 1
45223: PPUSH
45224: CALL_OW 437
45228: PUSH
45229: LD_INT 1
45231: ARRAY
45232: PUSH
45233: LD_INT 1
45235: ARRAY
45236: PUSH
45237: LD_STRING l
45239: EQUAL
45240: IFFALSE 45267
45242: PUSH
45243: LD_VAR 0 1
45247: PPUSH
45248: CALL_OW 437
45252: PUSH
45253: LD_INT 1
45255: ARRAY
45256: PUSH
45257: LD_INT 4
45259: ARRAY
45260: PUSH
45261: LD_VAR 0 2
45265: EQUAL
45266: AND
45267: IFFALSE 45279
// result := true else
45269: LD_ADDR_VAR 0 3
45273: PUSH
45274: LD_INT 1
45276: ST_TO_ADDR
45277: GO 45287
// result := false ;
45279: LD_ADDR_VAR 0 3
45283: PUSH
45284: LD_INT 0
45286: ST_TO_ADDR
// end else
45287: GO 45297
// result := false ;
45289: LD_ADDR_VAR 0 3
45293: PUSH
45294: LD_INT 0
45296: ST_TO_ADDR
// end ;
45297: LD_VAR 0 3
45301: RET
// export function HealTarget ( sci ) ; begin
45302: LD_INT 0
45304: PPUSH
// if not sci then
45305: LD_VAR 0 1
45309: NOT
45310: IFFALSE 45314
// exit ;
45312: GO 45379
// result := 0 ;
45314: LD_ADDR_VAR 0 2
45318: PUSH
45319: LD_INT 0
45321: ST_TO_ADDR
// if GetTaskList ( sci ) then
45322: LD_VAR 0 1
45326: PPUSH
45327: CALL_OW 437
45331: IFFALSE 45379
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
45333: LD_VAR 0 1
45337: PPUSH
45338: CALL_OW 437
45342: PUSH
45343: LD_INT 1
45345: ARRAY
45346: PUSH
45347: LD_INT 1
45349: ARRAY
45350: PUSH
45351: LD_STRING l
45353: EQUAL
45354: IFFALSE 45379
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
45356: LD_ADDR_VAR 0 2
45360: PUSH
45361: LD_VAR 0 1
45365: PPUSH
45366: CALL_OW 437
45370: PUSH
45371: LD_INT 1
45373: ARRAY
45374: PUSH
45375: LD_INT 4
45377: ARRAY
45378: ST_TO_ADDR
// end ;
45379: LD_VAR 0 2
45383: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
45384: LD_INT 0
45386: PPUSH
45387: PPUSH
45388: PPUSH
45389: PPUSH
// if not base_units then
45390: LD_VAR 0 1
45394: NOT
45395: IFFALSE 45399
// exit ;
45397: GO 45486
// result := false ;
45399: LD_ADDR_VAR 0 2
45403: PUSH
45404: LD_INT 0
45406: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
45407: LD_ADDR_VAR 0 5
45411: PUSH
45412: LD_VAR 0 1
45416: PPUSH
45417: LD_INT 21
45419: PUSH
45420: LD_INT 3
45422: PUSH
45423: EMPTY
45424: LIST
45425: LIST
45426: PPUSH
45427: CALL_OW 72
45431: ST_TO_ADDR
// if not tmp then
45432: LD_VAR 0 5
45436: NOT
45437: IFFALSE 45441
// exit ;
45439: GO 45486
// for i in tmp do
45441: LD_ADDR_VAR 0 3
45445: PUSH
45446: LD_VAR 0 5
45450: PUSH
45451: FOR_IN
45452: IFFALSE 45484
// begin result := EnemyInRange ( i , 22 ) ;
45454: LD_ADDR_VAR 0 2
45458: PUSH
45459: LD_VAR 0 3
45463: PPUSH
45464: LD_INT 22
45466: PPUSH
45467: CALL 42911 0 2
45471: ST_TO_ADDR
// if result then
45472: LD_VAR 0 2
45476: IFFALSE 45482
// exit ;
45478: POP
45479: POP
45480: GO 45486
// end ;
45482: GO 45451
45484: POP
45485: POP
// end ;
45486: LD_VAR 0 2
45490: RET
// export function FilterByTag ( units , tag ) ; begin
45491: LD_INT 0
45493: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
45494: LD_ADDR_VAR 0 3
45498: PUSH
45499: LD_VAR 0 1
45503: PPUSH
45504: LD_INT 120
45506: PUSH
45507: LD_VAR 0 2
45511: PUSH
45512: EMPTY
45513: LIST
45514: LIST
45515: PPUSH
45516: CALL_OW 72
45520: ST_TO_ADDR
// end ;
45521: LD_VAR 0 3
45525: RET
// export function IsDriver ( un ) ; begin
45526: LD_INT 0
45528: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
45529: LD_ADDR_VAR 0 2
45533: PUSH
45534: LD_VAR 0 1
45538: PUSH
45539: LD_INT 55
45541: PUSH
45542: EMPTY
45543: LIST
45544: PPUSH
45545: CALL_OW 69
45549: IN
45550: ST_TO_ADDR
// end ;
45551: LD_VAR 0 2
45555: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
45556: LD_INT 0
45558: PPUSH
45559: PPUSH
// list := [ ] ;
45560: LD_ADDR_VAR 0 5
45564: PUSH
45565: EMPTY
45566: ST_TO_ADDR
// case d of 0 :
45567: LD_VAR 0 3
45571: PUSH
45572: LD_INT 0
45574: DOUBLE
45575: EQUAL
45576: IFTRUE 45580
45578: GO 45713
45580: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
45581: LD_ADDR_VAR 0 5
45585: PUSH
45586: LD_VAR 0 1
45590: PUSH
45591: LD_INT 4
45593: MINUS
45594: PUSH
45595: LD_VAR 0 2
45599: PUSH
45600: LD_INT 4
45602: MINUS
45603: PUSH
45604: LD_INT 2
45606: PUSH
45607: EMPTY
45608: LIST
45609: LIST
45610: LIST
45611: PUSH
45612: LD_VAR 0 1
45616: PUSH
45617: LD_INT 3
45619: MINUS
45620: PUSH
45621: LD_VAR 0 2
45625: PUSH
45626: LD_INT 1
45628: PUSH
45629: EMPTY
45630: LIST
45631: LIST
45632: LIST
45633: PUSH
45634: LD_VAR 0 1
45638: PUSH
45639: LD_INT 4
45641: PLUS
45642: PUSH
45643: LD_VAR 0 2
45647: PUSH
45648: LD_INT 4
45650: PUSH
45651: EMPTY
45652: LIST
45653: LIST
45654: LIST
45655: PUSH
45656: LD_VAR 0 1
45660: PUSH
45661: LD_INT 3
45663: PLUS
45664: PUSH
45665: LD_VAR 0 2
45669: PUSH
45670: LD_INT 3
45672: PLUS
45673: PUSH
45674: LD_INT 5
45676: PUSH
45677: EMPTY
45678: LIST
45679: LIST
45680: LIST
45681: PUSH
45682: LD_VAR 0 1
45686: PUSH
45687: LD_VAR 0 2
45691: PUSH
45692: LD_INT 4
45694: PLUS
45695: PUSH
45696: LD_INT 0
45698: PUSH
45699: EMPTY
45700: LIST
45701: LIST
45702: LIST
45703: PUSH
45704: EMPTY
45705: LIST
45706: LIST
45707: LIST
45708: LIST
45709: LIST
45710: ST_TO_ADDR
// end ; 1 :
45711: GO 46411
45713: LD_INT 1
45715: DOUBLE
45716: EQUAL
45717: IFTRUE 45721
45719: GO 45854
45721: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
45722: LD_ADDR_VAR 0 5
45726: PUSH
45727: LD_VAR 0 1
45731: PUSH
45732: LD_VAR 0 2
45736: PUSH
45737: LD_INT 4
45739: MINUS
45740: PUSH
45741: LD_INT 3
45743: PUSH
45744: EMPTY
45745: LIST
45746: LIST
45747: LIST
45748: PUSH
45749: LD_VAR 0 1
45753: PUSH
45754: LD_INT 3
45756: MINUS
45757: PUSH
45758: LD_VAR 0 2
45762: PUSH
45763: LD_INT 3
45765: MINUS
45766: PUSH
45767: LD_INT 2
45769: PUSH
45770: EMPTY
45771: LIST
45772: LIST
45773: LIST
45774: PUSH
45775: LD_VAR 0 1
45779: PUSH
45780: LD_INT 4
45782: MINUS
45783: PUSH
45784: LD_VAR 0 2
45788: PUSH
45789: LD_INT 1
45791: PUSH
45792: EMPTY
45793: LIST
45794: LIST
45795: LIST
45796: PUSH
45797: LD_VAR 0 1
45801: PUSH
45802: LD_VAR 0 2
45806: PUSH
45807: LD_INT 3
45809: PLUS
45810: PUSH
45811: LD_INT 0
45813: PUSH
45814: EMPTY
45815: LIST
45816: LIST
45817: LIST
45818: PUSH
45819: LD_VAR 0 1
45823: PUSH
45824: LD_INT 4
45826: PLUS
45827: PUSH
45828: LD_VAR 0 2
45832: PUSH
45833: LD_INT 4
45835: PLUS
45836: PUSH
45837: LD_INT 5
45839: PUSH
45840: EMPTY
45841: LIST
45842: LIST
45843: LIST
45844: PUSH
45845: EMPTY
45846: LIST
45847: LIST
45848: LIST
45849: LIST
45850: LIST
45851: ST_TO_ADDR
// end ; 2 :
45852: GO 46411
45854: LD_INT 2
45856: DOUBLE
45857: EQUAL
45858: IFTRUE 45862
45860: GO 45991
45862: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
45863: LD_ADDR_VAR 0 5
45867: PUSH
45868: LD_VAR 0 1
45872: PUSH
45873: LD_VAR 0 2
45877: PUSH
45878: LD_INT 3
45880: MINUS
45881: PUSH
45882: LD_INT 3
45884: PUSH
45885: EMPTY
45886: LIST
45887: LIST
45888: LIST
45889: PUSH
45890: LD_VAR 0 1
45894: PUSH
45895: LD_INT 4
45897: PLUS
45898: PUSH
45899: LD_VAR 0 2
45903: PUSH
45904: LD_INT 4
45906: PUSH
45907: EMPTY
45908: LIST
45909: LIST
45910: LIST
45911: PUSH
45912: LD_VAR 0 1
45916: PUSH
45917: LD_VAR 0 2
45921: PUSH
45922: LD_INT 4
45924: PLUS
45925: PUSH
45926: LD_INT 0
45928: PUSH
45929: EMPTY
45930: LIST
45931: LIST
45932: LIST
45933: PUSH
45934: LD_VAR 0 1
45938: PUSH
45939: LD_INT 3
45941: MINUS
45942: PUSH
45943: LD_VAR 0 2
45947: PUSH
45948: LD_INT 1
45950: PUSH
45951: EMPTY
45952: LIST
45953: LIST
45954: LIST
45955: PUSH
45956: LD_VAR 0 1
45960: PUSH
45961: LD_INT 4
45963: MINUS
45964: PUSH
45965: LD_VAR 0 2
45969: PUSH
45970: LD_INT 4
45972: MINUS
45973: PUSH
45974: LD_INT 2
45976: PUSH
45977: EMPTY
45978: LIST
45979: LIST
45980: LIST
45981: PUSH
45982: EMPTY
45983: LIST
45984: LIST
45985: LIST
45986: LIST
45987: LIST
45988: ST_TO_ADDR
// end ; 3 :
45989: GO 46411
45991: LD_INT 3
45993: DOUBLE
45994: EQUAL
45995: IFTRUE 45999
45997: GO 46132
45999: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
46000: LD_ADDR_VAR 0 5
46004: PUSH
46005: LD_VAR 0 1
46009: PUSH
46010: LD_INT 3
46012: PLUS
46013: PUSH
46014: LD_VAR 0 2
46018: PUSH
46019: LD_INT 4
46021: PUSH
46022: EMPTY
46023: LIST
46024: LIST
46025: LIST
46026: PUSH
46027: LD_VAR 0 1
46031: PUSH
46032: LD_INT 4
46034: PLUS
46035: PUSH
46036: LD_VAR 0 2
46040: PUSH
46041: LD_INT 4
46043: PLUS
46044: PUSH
46045: LD_INT 5
46047: PUSH
46048: EMPTY
46049: LIST
46050: LIST
46051: LIST
46052: PUSH
46053: LD_VAR 0 1
46057: PUSH
46058: LD_INT 4
46060: MINUS
46061: PUSH
46062: LD_VAR 0 2
46066: PUSH
46067: LD_INT 1
46069: PUSH
46070: EMPTY
46071: LIST
46072: LIST
46073: LIST
46074: PUSH
46075: LD_VAR 0 1
46079: PUSH
46080: LD_VAR 0 2
46084: PUSH
46085: LD_INT 4
46087: MINUS
46088: PUSH
46089: LD_INT 3
46091: PUSH
46092: EMPTY
46093: LIST
46094: LIST
46095: LIST
46096: PUSH
46097: LD_VAR 0 1
46101: PUSH
46102: LD_INT 3
46104: MINUS
46105: PUSH
46106: LD_VAR 0 2
46110: PUSH
46111: LD_INT 3
46113: MINUS
46114: PUSH
46115: LD_INT 2
46117: PUSH
46118: EMPTY
46119: LIST
46120: LIST
46121: LIST
46122: PUSH
46123: EMPTY
46124: LIST
46125: LIST
46126: LIST
46127: LIST
46128: LIST
46129: ST_TO_ADDR
// end ; 4 :
46130: GO 46411
46132: LD_INT 4
46134: DOUBLE
46135: EQUAL
46136: IFTRUE 46140
46138: GO 46273
46140: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
46141: LD_ADDR_VAR 0 5
46145: PUSH
46146: LD_VAR 0 1
46150: PUSH
46151: LD_VAR 0 2
46155: PUSH
46156: LD_INT 4
46158: PLUS
46159: PUSH
46160: LD_INT 0
46162: PUSH
46163: EMPTY
46164: LIST
46165: LIST
46166: LIST
46167: PUSH
46168: LD_VAR 0 1
46172: PUSH
46173: LD_INT 3
46175: PLUS
46176: PUSH
46177: LD_VAR 0 2
46181: PUSH
46182: LD_INT 3
46184: PLUS
46185: PUSH
46186: LD_INT 5
46188: PUSH
46189: EMPTY
46190: LIST
46191: LIST
46192: LIST
46193: PUSH
46194: LD_VAR 0 1
46198: PUSH
46199: LD_INT 4
46201: PLUS
46202: PUSH
46203: LD_VAR 0 2
46207: PUSH
46208: LD_INT 4
46210: PUSH
46211: EMPTY
46212: LIST
46213: LIST
46214: LIST
46215: PUSH
46216: LD_VAR 0 1
46220: PUSH
46221: LD_VAR 0 2
46225: PUSH
46226: LD_INT 3
46228: MINUS
46229: PUSH
46230: LD_INT 3
46232: PUSH
46233: EMPTY
46234: LIST
46235: LIST
46236: LIST
46237: PUSH
46238: LD_VAR 0 1
46242: PUSH
46243: LD_INT 4
46245: MINUS
46246: PUSH
46247: LD_VAR 0 2
46251: PUSH
46252: LD_INT 4
46254: MINUS
46255: PUSH
46256: LD_INT 2
46258: PUSH
46259: EMPTY
46260: LIST
46261: LIST
46262: LIST
46263: PUSH
46264: EMPTY
46265: LIST
46266: LIST
46267: LIST
46268: LIST
46269: LIST
46270: ST_TO_ADDR
// end ; 5 :
46271: GO 46411
46273: LD_INT 5
46275: DOUBLE
46276: EQUAL
46277: IFTRUE 46281
46279: GO 46410
46281: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
46282: LD_ADDR_VAR 0 5
46286: PUSH
46287: LD_VAR 0 1
46291: PUSH
46292: LD_INT 4
46294: MINUS
46295: PUSH
46296: LD_VAR 0 2
46300: PUSH
46301: LD_INT 1
46303: PUSH
46304: EMPTY
46305: LIST
46306: LIST
46307: LIST
46308: PUSH
46309: LD_VAR 0 1
46313: PUSH
46314: LD_VAR 0 2
46318: PUSH
46319: LD_INT 4
46321: MINUS
46322: PUSH
46323: LD_INT 3
46325: PUSH
46326: EMPTY
46327: LIST
46328: LIST
46329: LIST
46330: PUSH
46331: LD_VAR 0 1
46335: PUSH
46336: LD_INT 4
46338: PLUS
46339: PUSH
46340: LD_VAR 0 2
46344: PUSH
46345: LD_INT 4
46347: PLUS
46348: PUSH
46349: LD_INT 5
46351: PUSH
46352: EMPTY
46353: LIST
46354: LIST
46355: LIST
46356: PUSH
46357: LD_VAR 0 1
46361: PUSH
46362: LD_INT 3
46364: PLUS
46365: PUSH
46366: LD_VAR 0 2
46370: PUSH
46371: LD_INT 4
46373: PUSH
46374: EMPTY
46375: LIST
46376: LIST
46377: LIST
46378: PUSH
46379: LD_VAR 0 1
46383: PUSH
46384: LD_VAR 0 2
46388: PUSH
46389: LD_INT 3
46391: PLUS
46392: PUSH
46393: LD_INT 0
46395: PUSH
46396: EMPTY
46397: LIST
46398: LIST
46399: LIST
46400: PUSH
46401: EMPTY
46402: LIST
46403: LIST
46404: LIST
46405: LIST
46406: LIST
46407: ST_TO_ADDR
// end ; end ;
46408: GO 46411
46410: POP
// result := list ;
46411: LD_ADDR_VAR 0 4
46415: PUSH
46416: LD_VAR 0 5
46420: ST_TO_ADDR
// end ;
46421: LD_VAR 0 4
46425: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
46426: LD_INT 0
46428: PPUSH
46429: PPUSH
46430: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
46431: LD_VAR 0 1
46435: NOT
46436: IFTRUE 46464
46438: PUSH
46439: LD_VAR 0 2
46443: PUSH
46444: LD_INT 1
46446: PUSH
46447: LD_INT 2
46449: PUSH
46450: LD_INT 3
46452: PUSH
46453: LD_INT 4
46455: PUSH
46456: EMPTY
46457: LIST
46458: LIST
46459: LIST
46460: LIST
46461: IN
46462: NOT
46463: OR
46464: IFFALSE 46468
// exit ;
46466: GO 46551
// tmp := [ ] ;
46468: LD_ADDR_VAR 0 5
46472: PUSH
46473: EMPTY
46474: ST_TO_ADDR
// for i in units do
46475: LD_ADDR_VAR 0 4
46479: PUSH
46480: LD_VAR 0 1
46484: PUSH
46485: FOR_IN
46486: IFFALSE 46520
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
46488: LD_ADDR_VAR 0 5
46492: PUSH
46493: LD_VAR 0 5
46497: PPUSH
46498: LD_VAR 0 4
46502: PPUSH
46503: LD_VAR 0 2
46507: PPUSH
46508: CALL_OW 259
46512: PPUSH
46513: CALL 47946 0 2
46517: ST_TO_ADDR
46518: GO 46485
46520: POP
46521: POP
// if not tmp then
46522: LD_VAR 0 5
46526: NOT
46527: IFFALSE 46531
// exit ;
46529: GO 46551
// result := SortListByListDesc ( units , tmp ) ;
46531: LD_ADDR_VAR 0 3
46535: PUSH
46536: LD_VAR 0 1
46540: PPUSH
46541: LD_VAR 0 5
46545: PPUSH
46546: CALL_OW 77
46550: ST_TO_ADDR
// end ;
46551: LD_VAR 0 3
46555: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
46556: LD_INT 0
46558: PPUSH
46559: PPUSH
46560: PPUSH
// result := false ;
46561: LD_ADDR_VAR 0 3
46565: PUSH
46566: LD_INT 0
46568: ST_TO_ADDR
// if not building then
46569: LD_VAR 0 2
46573: NOT
46574: IFFALSE 46578
// exit ;
46576: GO 46722
// x := GetX ( building ) ;
46578: LD_ADDR_VAR 0 4
46582: PUSH
46583: LD_VAR 0 2
46587: PPUSH
46588: CALL_OW 250
46592: ST_TO_ADDR
// y := GetY ( building ) ;
46593: LD_ADDR_VAR 0 5
46597: PUSH
46598: LD_VAR 0 2
46602: PPUSH
46603: CALL_OW 251
46607: ST_TO_ADDR
// if not x or not y then
46608: LD_VAR 0 4
46612: NOT
46613: IFTRUE 46622
46615: PUSH
46616: LD_VAR 0 5
46620: NOT
46621: OR
46622: IFFALSE 46626
// exit ;
46624: GO 46722
// if GetTaskList ( unit ) then
46626: LD_VAR 0 1
46630: PPUSH
46631: CALL_OW 437
46635: IFFALSE 46722
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
46637: LD_STRING e
46639: PUSH
46640: LD_VAR 0 1
46644: PPUSH
46645: CALL_OW 437
46649: PUSH
46650: LD_INT 1
46652: ARRAY
46653: PUSH
46654: LD_INT 1
46656: ARRAY
46657: EQUAL
46658: IFFALSE 46685
46660: PUSH
46661: LD_VAR 0 4
46665: PUSH
46666: LD_VAR 0 1
46670: PPUSH
46671: CALL_OW 437
46675: PUSH
46676: LD_INT 1
46678: ARRAY
46679: PUSH
46680: LD_INT 2
46682: ARRAY
46683: EQUAL
46684: AND
46685: IFFALSE 46712
46687: PUSH
46688: LD_VAR 0 5
46692: PUSH
46693: LD_VAR 0 1
46697: PPUSH
46698: CALL_OW 437
46702: PUSH
46703: LD_INT 1
46705: ARRAY
46706: PUSH
46707: LD_INT 3
46709: ARRAY
46710: EQUAL
46711: AND
46712: IFFALSE 46722
// result := true end ;
46714: LD_ADDR_VAR 0 3
46718: PUSH
46719: LD_INT 1
46721: ST_TO_ADDR
// end ;
46722: LD_VAR 0 3
46726: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
46727: LD_INT 0
46729: PPUSH
// result := false ;
46730: LD_ADDR_VAR 0 4
46734: PUSH
46735: LD_INT 0
46737: ST_TO_ADDR
// if GetTaskList ( unit ) then
46738: LD_VAR 0 1
46742: PPUSH
46743: CALL_OW 437
46747: IFFALSE 46834
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
46749: LD_STRING M
46751: PUSH
46752: LD_VAR 0 1
46756: PPUSH
46757: CALL_OW 437
46761: PUSH
46762: LD_INT 1
46764: ARRAY
46765: PUSH
46766: LD_INT 1
46768: ARRAY
46769: EQUAL
46770: IFFALSE 46797
46772: PUSH
46773: LD_VAR 0 2
46777: PUSH
46778: LD_VAR 0 1
46782: PPUSH
46783: CALL_OW 437
46787: PUSH
46788: LD_INT 1
46790: ARRAY
46791: PUSH
46792: LD_INT 2
46794: ARRAY
46795: EQUAL
46796: AND
46797: IFFALSE 46824
46799: PUSH
46800: LD_VAR 0 3
46804: PUSH
46805: LD_VAR 0 1
46809: PPUSH
46810: CALL_OW 437
46814: PUSH
46815: LD_INT 1
46817: ARRAY
46818: PUSH
46819: LD_INT 3
46821: ARRAY
46822: EQUAL
46823: AND
46824: IFFALSE 46834
// result := true ;
46826: LD_ADDR_VAR 0 4
46830: PUSH
46831: LD_INT 1
46833: ST_TO_ADDR
// end ; end ;
46834: LD_VAR 0 4
46838: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
46839: LD_INT 0
46841: PPUSH
46842: PPUSH
46843: PPUSH
46844: PPUSH
// if not unit or not area then
46845: LD_VAR 0 1
46849: NOT
46850: IFTRUE 46859
46852: PUSH
46853: LD_VAR 0 2
46857: NOT
46858: OR
46859: IFFALSE 46863
// exit ;
46861: GO 47039
// tmp := AreaToList ( area , i ) ;
46863: LD_ADDR_VAR 0 6
46867: PUSH
46868: LD_VAR 0 2
46872: PPUSH
46873: LD_VAR 0 5
46877: PPUSH
46878: CALL_OW 517
46882: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
46883: LD_ADDR_VAR 0 5
46887: PUSH
46888: DOUBLE
46889: LD_INT 1
46891: DEC
46892: ST_TO_ADDR
46893: LD_VAR 0 6
46897: PUSH
46898: LD_INT 1
46900: ARRAY
46901: PUSH
46902: FOR_TO
46903: IFFALSE 47037
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
46905: LD_ADDR_VAR 0 7
46909: PUSH
46910: LD_VAR 0 6
46914: PUSH
46915: LD_INT 1
46917: ARRAY
46918: PUSH
46919: LD_VAR 0 5
46923: ARRAY
46924: PUSH
46925: LD_VAR 0 6
46929: PUSH
46930: LD_INT 2
46932: ARRAY
46933: PUSH
46934: LD_VAR 0 5
46938: ARRAY
46939: PUSH
46940: EMPTY
46941: LIST
46942: LIST
46943: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
46944: LD_INT 92
46946: PUSH
46947: LD_VAR 0 7
46951: PUSH
46952: LD_INT 1
46954: ARRAY
46955: PUSH
46956: LD_VAR 0 7
46960: PUSH
46961: LD_INT 2
46963: ARRAY
46964: PUSH
46965: LD_INT 2
46967: PUSH
46968: EMPTY
46969: LIST
46970: LIST
46971: LIST
46972: LIST
46973: PPUSH
46974: CALL_OW 69
46978: PUSH
46979: LD_INT 0
46981: EQUAL
46982: IFFALSE 47035
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
46984: LD_VAR 0 1
46988: PPUSH
46989: LD_VAR 0 7
46993: PUSH
46994: LD_INT 1
46996: ARRAY
46997: PPUSH
46998: LD_VAR 0 7
47002: PUSH
47003: LD_INT 2
47005: ARRAY
47006: PPUSH
47007: LD_VAR 0 3
47011: PPUSH
47012: CALL_OW 48
// result := IsPlaced ( unit ) ;
47016: LD_ADDR_VAR 0 4
47020: PUSH
47021: LD_VAR 0 1
47025: PPUSH
47026: CALL_OW 305
47030: ST_TO_ADDR
// exit ;
47031: POP
47032: POP
47033: GO 47039
// end ; end ;
47035: GO 46902
47037: POP
47038: POP
// end ;
47039: LD_VAR 0 4
47043: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
47044: LD_INT 0
47046: PPUSH
47047: PPUSH
47048: PPUSH
// if not side or side > 8 then
47049: LD_VAR 0 1
47053: NOT
47054: IFTRUE 47066
47056: PUSH
47057: LD_VAR 0 1
47061: PUSH
47062: LD_INT 8
47064: GREATER
47065: OR
47066: IFFALSE 47070
// exit ;
47068: GO 47257
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
47070: LD_ADDR_VAR 0 4
47074: PUSH
47075: LD_INT 22
47077: PUSH
47078: LD_VAR 0 1
47082: PUSH
47083: EMPTY
47084: LIST
47085: LIST
47086: PUSH
47087: LD_INT 21
47089: PUSH
47090: LD_INT 3
47092: PUSH
47093: EMPTY
47094: LIST
47095: LIST
47096: PUSH
47097: EMPTY
47098: LIST
47099: LIST
47100: PPUSH
47101: CALL_OW 69
47105: ST_TO_ADDR
// if not tmp then
47106: LD_VAR 0 4
47110: NOT
47111: IFFALSE 47115
// exit ;
47113: GO 47257
// enable_addtolog := true ;
47115: LD_ADDR_OWVAR 81
47119: PUSH
47120: LD_INT 1
47122: ST_TO_ADDR
// AddToLog ( [ ) ;
47123: LD_STRING [
47125: PPUSH
47126: CALL_OW 561
// for i in tmp do
47130: LD_ADDR_VAR 0 3
47134: PUSH
47135: LD_VAR 0 4
47139: PUSH
47140: FOR_IN
47141: IFFALSE 47248
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
47143: LD_STRING [
47145: PUSH
47146: LD_VAR 0 3
47150: PPUSH
47151: CALL_OW 266
47155: STR
47156: PUSH
47157: LD_STRING , 
47159: STR
47160: PUSH
47161: LD_VAR 0 3
47165: PPUSH
47166: CALL_OW 250
47170: STR
47171: PUSH
47172: LD_STRING , 
47174: STR
47175: PUSH
47176: LD_VAR 0 3
47180: PPUSH
47181: CALL_OW 251
47185: STR
47186: PUSH
47187: LD_STRING , 
47189: STR
47190: PUSH
47191: LD_VAR 0 3
47195: PPUSH
47196: CALL_OW 254
47200: STR
47201: PUSH
47202: LD_STRING , 
47204: STR
47205: PUSH
47206: LD_VAR 0 3
47210: PPUSH
47211: LD_INT 1
47213: PPUSH
47214: CALL_OW 268
47218: STR
47219: PUSH
47220: LD_STRING , 
47222: STR
47223: PUSH
47224: LD_VAR 0 3
47228: PPUSH
47229: LD_INT 2
47231: PPUSH
47232: CALL_OW 268
47236: STR
47237: PUSH
47238: LD_STRING ],
47240: STR
47241: PPUSH
47242: CALL_OW 561
// end ;
47246: GO 47140
47248: POP
47249: POP
// AddToLog ( ]; ) ;
47250: LD_STRING ];
47252: PPUSH
47253: CALL_OW 561
// end ;
47257: LD_VAR 0 2
47261: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
47262: LD_INT 0
47264: PPUSH
47265: PPUSH
47266: PPUSH
47267: PPUSH
47268: PPUSH
// if not area or not rate or not max then
47269: LD_VAR 0 1
47273: NOT
47274: IFTRUE 47283
47276: PUSH
47277: LD_VAR 0 2
47281: NOT
47282: OR
47283: IFTRUE 47292
47285: PUSH
47286: LD_VAR 0 4
47290: NOT
47291: OR
47292: IFFALSE 47296
// exit ;
47294: GO 47485
// while 1 do
47296: LD_INT 1
47298: IFFALSE 47485
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
47300: LD_ADDR_VAR 0 9
47304: PUSH
47305: LD_VAR 0 1
47309: PPUSH
47310: LD_INT 1
47312: PPUSH
47313: CALL_OW 287
47317: PUSH
47318: LD_INT 10
47320: MUL
47321: ST_TO_ADDR
// r := rate / 10 ;
47322: LD_ADDR_VAR 0 7
47326: PUSH
47327: LD_VAR 0 2
47331: PUSH
47332: LD_INT 10
47334: DIVREAL
47335: ST_TO_ADDR
// time := 1 1$00 ;
47336: LD_ADDR_VAR 0 8
47340: PUSH
47341: LD_INT 2100
47343: ST_TO_ADDR
// if amount < min then
47344: LD_VAR 0 9
47348: PUSH
47349: LD_VAR 0 3
47353: LESS
47354: IFFALSE 47372
// r := r * 2 else
47356: LD_ADDR_VAR 0 7
47360: PUSH
47361: LD_VAR 0 7
47365: PUSH
47366: LD_INT 2
47368: MUL
47369: ST_TO_ADDR
47370: GO 47398
// if amount > max then
47372: LD_VAR 0 9
47376: PUSH
47377: LD_VAR 0 4
47381: GREATER
47382: IFFALSE 47398
// r := r / 2 ;
47384: LD_ADDR_VAR 0 7
47388: PUSH
47389: LD_VAR 0 7
47393: PUSH
47394: LD_INT 2
47396: DIVREAL
47397: ST_TO_ADDR
// time := time / r ;
47398: LD_ADDR_VAR 0 8
47402: PUSH
47403: LD_VAR 0 8
47407: PUSH
47408: LD_VAR 0 7
47412: DIVREAL
47413: ST_TO_ADDR
// if time < 0 then
47414: LD_VAR 0 8
47418: PUSH
47419: LD_INT 0
47421: LESS
47422: IFFALSE 47439
// time := time * - 1 ;
47424: LD_ADDR_VAR 0 8
47428: PUSH
47429: LD_VAR 0 8
47433: PUSH
47434: LD_INT 1
47436: NEG
47437: MUL
47438: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
47439: LD_VAR 0 8
47443: PUSH
47444: LD_INT 35
47446: PPUSH
47447: LD_INT 875
47449: PPUSH
47450: CALL_OW 12
47454: PLUS
47455: PPUSH
47456: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
47460: LD_INT 1
47462: PPUSH
47463: LD_INT 5
47465: PPUSH
47466: CALL_OW 12
47470: PPUSH
47471: LD_VAR 0 1
47475: PPUSH
47476: LD_INT 1
47478: PPUSH
47479: CALL_OW 55
// end ;
47483: GO 47296
// end ;
47485: LD_VAR 0 5
47489: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
47490: LD_INT 0
47492: PPUSH
47493: PPUSH
47494: PPUSH
47495: PPUSH
47496: PPUSH
47497: PPUSH
47498: PPUSH
47499: PPUSH
// if not turrets or not factories then
47500: LD_VAR 0 1
47504: NOT
47505: IFTRUE 47514
47507: PUSH
47508: LD_VAR 0 2
47512: NOT
47513: OR
47514: IFFALSE 47518
// exit ;
47516: GO 47825
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
47518: LD_ADDR_VAR 0 10
47522: PUSH
47523: LD_INT 5
47525: PUSH
47526: LD_INT 6
47528: PUSH
47529: EMPTY
47530: LIST
47531: LIST
47532: PUSH
47533: LD_INT 2
47535: PUSH
47536: LD_INT 4
47538: PUSH
47539: EMPTY
47540: LIST
47541: LIST
47542: PUSH
47543: LD_INT 3
47545: PUSH
47546: LD_INT 5
47548: PUSH
47549: EMPTY
47550: LIST
47551: LIST
47552: PUSH
47553: EMPTY
47554: LIST
47555: LIST
47556: LIST
47557: PUSH
47558: LD_INT 24
47560: PUSH
47561: LD_INT 25
47563: PUSH
47564: EMPTY
47565: LIST
47566: LIST
47567: PUSH
47568: LD_INT 23
47570: PUSH
47571: LD_INT 27
47573: PUSH
47574: EMPTY
47575: LIST
47576: LIST
47577: PUSH
47578: EMPTY
47579: LIST
47580: LIST
47581: PUSH
47582: LD_INT 42
47584: PUSH
47585: LD_INT 43
47587: PUSH
47588: EMPTY
47589: LIST
47590: LIST
47591: PUSH
47592: LD_INT 44
47594: PUSH
47595: LD_INT 46
47597: PUSH
47598: EMPTY
47599: LIST
47600: LIST
47601: PUSH
47602: LD_INT 45
47604: PUSH
47605: LD_INT 47
47607: PUSH
47608: EMPTY
47609: LIST
47610: LIST
47611: PUSH
47612: EMPTY
47613: LIST
47614: LIST
47615: LIST
47616: PUSH
47617: EMPTY
47618: LIST
47619: LIST
47620: LIST
47621: ST_TO_ADDR
// result := [ ] ;
47622: LD_ADDR_VAR 0 3
47626: PUSH
47627: EMPTY
47628: ST_TO_ADDR
// for i in turrets do
47629: LD_ADDR_VAR 0 4
47633: PUSH
47634: LD_VAR 0 1
47638: PUSH
47639: FOR_IN
47640: IFFALSE 47823
// begin nat := GetNation ( i ) ;
47642: LD_ADDR_VAR 0 7
47646: PUSH
47647: LD_VAR 0 4
47651: PPUSH
47652: CALL_OW 248
47656: ST_TO_ADDR
// weapon := 0 ;
47657: LD_ADDR_VAR 0 8
47661: PUSH
47662: LD_INT 0
47664: ST_TO_ADDR
// if not nat then
47665: LD_VAR 0 7
47669: NOT
47670: IFFALSE 47674
// continue ;
47672: GO 47639
// for j in list [ nat ] do
47674: LD_ADDR_VAR 0 5
47678: PUSH
47679: LD_VAR 0 10
47683: PUSH
47684: LD_VAR 0 7
47688: ARRAY
47689: PUSH
47690: FOR_IN
47691: IFFALSE 47732
// if GetBWeapon ( i ) = j [ 1 ] then
47693: LD_VAR 0 4
47697: PPUSH
47698: CALL_OW 269
47702: PUSH
47703: LD_VAR 0 5
47707: PUSH
47708: LD_INT 1
47710: ARRAY
47711: EQUAL
47712: IFFALSE 47730
// begin weapon := j [ 2 ] ;
47714: LD_ADDR_VAR 0 8
47718: PUSH
47719: LD_VAR 0 5
47723: PUSH
47724: LD_INT 2
47726: ARRAY
47727: ST_TO_ADDR
// break ;
47728: GO 47732
// end ;
47730: GO 47690
47732: POP
47733: POP
// if not weapon then
47734: LD_VAR 0 8
47738: NOT
47739: IFFALSE 47743
// continue ;
47741: GO 47639
// for k in factories do
47743: LD_ADDR_VAR 0 6
47747: PUSH
47748: LD_VAR 0 2
47752: PUSH
47753: FOR_IN
47754: IFFALSE 47819
// begin weapons := AvailableWeaponList ( k ) ;
47756: LD_ADDR_VAR 0 9
47760: PUSH
47761: LD_VAR 0 6
47765: PPUSH
47766: CALL_OW 478
47770: ST_TO_ADDR
// if not weapons then
47771: LD_VAR 0 9
47775: NOT
47776: IFFALSE 47780
// continue ;
47778: GO 47753
// if weapon in weapons then
47780: LD_VAR 0 8
47784: PUSH
47785: LD_VAR 0 9
47789: IN
47790: IFFALSE 47817
// begin result := [ i , weapon ] ;
47792: LD_ADDR_VAR 0 3
47796: PUSH
47797: LD_VAR 0 4
47801: PUSH
47802: LD_VAR 0 8
47806: PUSH
47807: EMPTY
47808: LIST
47809: LIST
47810: ST_TO_ADDR
// exit ;
47811: POP
47812: POP
47813: POP
47814: POP
47815: GO 47825
// end ; end ;
47817: GO 47753
47819: POP
47820: POP
// end ;
47821: GO 47639
47823: POP
47824: POP
// end ;
47825: LD_VAR 0 3
47829: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
47830: LD_INT 0
47832: PPUSH
// if not side or side > 8 then
47833: LD_VAR 0 3
47837: NOT
47838: IFTRUE 47850
47840: PUSH
47841: LD_VAR 0 3
47845: PUSH
47846: LD_INT 8
47848: GREATER
47849: OR
47850: IFFALSE 47854
// exit ;
47852: GO 47913
// if not range then
47854: LD_VAR 0 4
47858: NOT
47859: IFFALSE 47870
// range := - 12 ;
47861: LD_ADDR_VAR 0 4
47865: PUSH
47866: LD_INT 12
47868: NEG
47869: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
47870: LD_VAR 0 1
47874: PPUSH
47875: LD_VAR 0 2
47879: PPUSH
47880: LD_VAR 0 3
47884: PPUSH
47885: LD_VAR 0 4
47889: PPUSH
47890: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
47894: LD_VAR 0 1
47898: PPUSH
47899: LD_VAR 0 2
47903: PPUSH
47904: LD_VAR 0 3
47908: PPUSH
47909: CALL_OW 331
// end ;
47913: LD_VAR 0 5
47917: RET
// export function Video ( mode ) ; begin
47918: LD_INT 0
47920: PPUSH
// ingame_video = mode ;
47921: LD_ADDR_OWVAR 52
47925: PUSH
47926: LD_VAR 0 1
47930: ST_TO_ADDR
// interface_hidden = mode ;
47931: LD_ADDR_OWVAR 54
47935: PUSH
47936: LD_VAR 0 1
47940: ST_TO_ADDR
// end ;
47941: LD_VAR 0 2
47945: RET
// export function Join ( array , element ) ; begin
47946: LD_INT 0
47948: PPUSH
// result := Replace ( array , array + 1 , element ) ;
47949: LD_ADDR_VAR 0 3
47953: PUSH
47954: LD_VAR 0 1
47958: PPUSH
47959: LD_VAR 0 1
47963: PUSH
47964: LD_INT 1
47966: PLUS
47967: PPUSH
47968: LD_VAR 0 2
47972: PPUSH
47973: CALL_OW 1
47977: ST_TO_ADDR
// end ;
47978: LD_VAR 0 3
47982: RET
// export function JoinUnion ( array , element ) ; begin
47983: LD_INT 0
47985: PPUSH
// result := array union element ;
47986: LD_ADDR_VAR 0 3
47990: PUSH
47991: LD_VAR 0 1
47995: PUSH
47996: LD_VAR 0 2
48000: UNION
48001: ST_TO_ADDR
// end ;
48002: LD_VAR 0 3
48006: RET
// export function GetBehemoths ( side ) ; begin
48007: LD_INT 0
48009: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
48010: LD_ADDR_VAR 0 2
48014: PUSH
48015: LD_INT 22
48017: PUSH
48018: LD_VAR 0 1
48022: PUSH
48023: EMPTY
48024: LIST
48025: LIST
48026: PUSH
48027: LD_INT 31
48029: PUSH
48030: LD_INT 25
48032: PUSH
48033: EMPTY
48034: LIST
48035: LIST
48036: PUSH
48037: EMPTY
48038: LIST
48039: LIST
48040: PPUSH
48041: CALL_OW 69
48045: ST_TO_ADDR
// end ;
48046: LD_VAR 0 2
48050: RET
// export function Shuffle ( array ) ; var i , index ; begin
48051: LD_INT 0
48053: PPUSH
48054: PPUSH
48055: PPUSH
// result := [ ] ;
48056: LD_ADDR_VAR 0 2
48060: PUSH
48061: EMPTY
48062: ST_TO_ADDR
// if not array then
48063: LD_VAR 0 1
48067: NOT
48068: IFFALSE 48072
// exit ;
48070: GO 48171
// Randomize ;
48072: CALL_OW 10
// for i = array downto 1 do
48076: LD_ADDR_VAR 0 3
48080: PUSH
48081: DOUBLE
48082: LD_VAR 0 1
48086: INC
48087: ST_TO_ADDR
48088: LD_INT 1
48090: PUSH
48091: FOR_DOWNTO
48092: IFFALSE 48169
// begin index := rand ( 1 , array ) ;
48094: LD_ADDR_VAR 0 4
48098: PUSH
48099: LD_INT 1
48101: PPUSH
48102: LD_VAR 0 1
48106: PPUSH
48107: CALL_OW 12
48111: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
48112: LD_ADDR_VAR 0 2
48116: PUSH
48117: LD_VAR 0 2
48121: PPUSH
48122: LD_VAR 0 2
48126: PUSH
48127: LD_INT 1
48129: PLUS
48130: PPUSH
48131: LD_VAR 0 1
48135: PUSH
48136: LD_VAR 0 4
48140: ARRAY
48141: PPUSH
48142: CALL_OW 2
48146: ST_TO_ADDR
// array := Delete ( array , index ) ;
48147: LD_ADDR_VAR 0 1
48151: PUSH
48152: LD_VAR 0 1
48156: PPUSH
48157: LD_VAR 0 4
48161: PPUSH
48162: CALL_OW 3
48166: ST_TO_ADDR
// end ;
48167: GO 48091
48169: POP
48170: POP
// end ;
48171: LD_VAR 0 2
48175: RET
// export function GetBaseMaterials ( base ) ; begin
48176: LD_INT 0
48178: PPUSH
// result := [ 0 , 0 , 0 ] ;
48179: LD_ADDR_VAR 0 2
48183: PUSH
48184: LD_INT 0
48186: PUSH
48187: LD_INT 0
48189: PUSH
48190: LD_INT 0
48192: PUSH
48193: EMPTY
48194: LIST
48195: LIST
48196: LIST
48197: ST_TO_ADDR
// if not base then
48198: LD_VAR 0 1
48202: NOT
48203: IFFALSE 48207
// exit ;
48205: GO 48256
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
48207: LD_ADDR_VAR 0 2
48211: PUSH
48212: LD_VAR 0 1
48216: PPUSH
48217: LD_INT 1
48219: PPUSH
48220: CALL_OW 275
48224: PUSH
48225: LD_VAR 0 1
48229: PPUSH
48230: LD_INT 2
48232: PPUSH
48233: CALL_OW 275
48237: PUSH
48238: LD_VAR 0 1
48242: PPUSH
48243: LD_INT 3
48245: PPUSH
48246: CALL_OW 275
48250: PUSH
48251: EMPTY
48252: LIST
48253: LIST
48254: LIST
48255: ST_TO_ADDR
// end ;
48256: LD_VAR 0 2
48260: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
48261: LD_INT 0
48263: PPUSH
48264: PPUSH
// result := array ;
48265: LD_ADDR_VAR 0 3
48269: PUSH
48270: LD_VAR 0 1
48274: ST_TO_ADDR
// if size >= result then
48275: LD_VAR 0 2
48279: PUSH
48280: LD_VAR 0 3
48284: GREATEREQUAL
48285: IFFALSE 48289
// exit ;
48287: GO 48339
// if size then
48289: LD_VAR 0 2
48293: IFFALSE 48339
// for i := array downto size do
48295: LD_ADDR_VAR 0 4
48299: PUSH
48300: DOUBLE
48301: LD_VAR 0 1
48305: INC
48306: ST_TO_ADDR
48307: LD_VAR 0 2
48311: PUSH
48312: FOR_DOWNTO
48313: IFFALSE 48337
// result := Delete ( result , result ) ;
48315: LD_ADDR_VAR 0 3
48319: PUSH
48320: LD_VAR 0 3
48324: PPUSH
48325: LD_VAR 0 3
48329: PPUSH
48330: CALL_OW 3
48334: ST_TO_ADDR
48335: GO 48312
48337: POP
48338: POP
// end ;
48339: LD_VAR 0 3
48343: RET
// export function ComExit ( unit ) ; var tmp ; begin
48344: LD_INT 0
48346: PPUSH
48347: PPUSH
// if not IsInUnit ( unit ) then
48348: LD_VAR 0 1
48352: PPUSH
48353: CALL_OW 310
48357: NOT
48358: IFFALSE 48362
// exit ;
48360: GO 48422
// tmp := IsInUnit ( unit ) ;
48362: LD_ADDR_VAR 0 3
48366: PUSH
48367: LD_VAR 0 1
48371: PPUSH
48372: CALL_OW 310
48376: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
48377: LD_VAR 0 3
48381: PPUSH
48382: CALL_OW 247
48386: PUSH
48387: LD_INT 2
48389: EQUAL
48390: IFFALSE 48403
// ComExitVehicle ( unit ) else
48392: LD_VAR 0 1
48396: PPUSH
48397: CALL_OW 121
48401: GO 48412
// ComExitBuilding ( unit ) ;
48403: LD_VAR 0 1
48407: PPUSH
48408: CALL_OW 122
// result := tmp ;
48412: LD_ADDR_VAR 0 2
48416: PUSH
48417: LD_VAR 0 3
48421: ST_TO_ADDR
// end ;
48422: LD_VAR 0 2
48426: RET
// export function ComExitAll ( units ) ; var i ; begin
48427: LD_INT 0
48429: PPUSH
48430: PPUSH
// if not units then
48431: LD_VAR 0 1
48435: NOT
48436: IFFALSE 48440
// exit ;
48438: GO 48466
// for i in units do
48440: LD_ADDR_VAR 0 3
48444: PUSH
48445: LD_VAR 0 1
48449: PUSH
48450: FOR_IN
48451: IFFALSE 48464
// ComExit ( i ) ;
48453: LD_VAR 0 3
48457: PPUSH
48458: CALL 48344 0 1
48462: GO 48450
48464: POP
48465: POP
// end ;
48466: LD_VAR 0 2
48470: RET
// export function ResetHc ; begin
48471: LD_INT 0
48473: PPUSH
// InitHc ;
48474: CALL_OW 19
// hc_importance := 0 ;
48478: LD_ADDR_OWVAR 32
48482: PUSH
48483: LD_INT 0
48485: ST_TO_ADDR
// end ;
48486: LD_VAR 0 1
48490: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
48491: LD_INT 0
48493: PPUSH
48494: PPUSH
48495: PPUSH
// _x := ( x1 + x2 ) div 2 ;
48496: LD_ADDR_VAR 0 6
48500: PUSH
48501: LD_VAR 0 1
48505: PUSH
48506: LD_VAR 0 3
48510: PLUS
48511: PUSH
48512: LD_INT 2
48514: DIV
48515: ST_TO_ADDR
// if _x < 0 then
48516: LD_VAR 0 6
48520: PUSH
48521: LD_INT 0
48523: LESS
48524: IFFALSE 48541
// _x := _x * - 1 ;
48526: LD_ADDR_VAR 0 6
48530: PUSH
48531: LD_VAR 0 6
48535: PUSH
48536: LD_INT 1
48538: NEG
48539: MUL
48540: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
48541: LD_ADDR_VAR 0 7
48545: PUSH
48546: LD_VAR 0 2
48550: PUSH
48551: LD_VAR 0 4
48555: PLUS
48556: PUSH
48557: LD_INT 2
48559: DIV
48560: ST_TO_ADDR
// if _y < 0 then
48561: LD_VAR 0 7
48565: PUSH
48566: LD_INT 0
48568: LESS
48569: IFFALSE 48586
// _y := _y * - 1 ;
48571: LD_ADDR_VAR 0 7
48575: PUSH
48576: LD_VAR 0 7
48580: PUSH
48581: LD_INT 1
48583: NEG
48584: MUL
48585: ST_TO_ADDR
// result := [ _x , _y ] ;
48586: LD_ADDR_VAR 0 5
48590: PUSH
48591: LD_VAR 0 6
48595: PUSH
48596: LD_VAR 0 7
48600: PUSH
48601: EMPTY
48602: LIST
48603: LIST
48604: ST_TO_ADDR
// end ;
48605: LD_VAR 0 5
48609: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
48610: LD_INT 0
48612: PPUSH
48613: PPUSH
48614: PPUSH
48615: PPUSH
// task := GetTaskList ( unit ) ;
48616: LD_ADDR_VAR 0 7
48620: PUSH
48621: LD_VAR 0 1
48625: PPUSH
48626: CALL_OW 437
48630: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
48631: LD_VAR 0 7
48635: NOT
48636: IFFALSE 48655
48638: PUSH
48639: LD_VAR 0 1
48643: PPUSH
48644: LD_VAR 0 2
48648: PPUSH
48649: CALL_OW 308
48653: NOT
48654: AND
48655: IFFALSE 48659
// exit ;
48657: GO 48777
// if IsInArea ( unit , area ) then
48659: LD_VAR 0 1
48663: PPUSH
48664: LD_VAR 0 2
48668: PPUSH
48669: CALL_OW 308
48673: IFFALSE 48691
// begin ComMoveToArea ( unit , goAway ) ;
48675: LD_VAR 0 1
48679: PPUSH
48680: LD_VAR 0 3
48684: PPUSH
48685: CALL_OW 113
// exit ;
48689: GO 48777
// end ; if task [ 1 ] [ 1 ] <> M then
48691: LD_VAR 0 7
48695: PUSH
48696: LD_INT 1
48698: ARRAY
48699: PUSH
48700: LD_INT 1
48702: ARRAY
48703: PUSH
48704: LD_STRING M
48706: NONEQUAL
48707: IFFALSE 48711
// exit ;
48709: GO 48777
// x := task [ 1 ] [ 2 ] ;
48711: LD_ADDR_VAR 0 5
48715: PUSH
48716: LD_VAR 0 7
48720: PUSH
48721: LD_INT 1
48723: ARRAY
48724: PUSH
48725: LD_INT 2
48727: ARRAY
48728: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
48729: LD_ADDR_VAR 0 6
48733: PUSH
48734: LD_VAR 0 7
48738: PUSH
48739: LD_INT 1
48741: ARRAY
48742: PUSH
48743: LD_INT 3
48745: ARRAY
48746: ST_TO_ADDR
// if InArea ( x , y , area ) then
48747: LD_VAR 0 5
48751: PPUSH
48752: LD_VAR 0 6
48756: PPUSH
48757: LD_VAR 0 2
48761: PPUSH
48762: CALL_OW 309
48766: IFFALSE 48777
// ComStop ( unit ) ;
48768: LD_VAR 0 1
48772: PPUSH
48773: CALL_OW 141
// end ;
48777: LD_VAR 0 4
48781: RET
// export function Abs ( value ) ; begin
48782: LD_INT 0
48784: PPUSH
// result := value ;
48785: LD_ADDR_VAR 0 2
48789: PUSH
48790: LD_VAR 0 1
48794: ST_TO_ADDR
// if value < 0 then
48795: LD_VAR 0 1
48799: PUSH
48800: LD_INT 0
48802: LESS
48803: IFFALSE 48820
// result := value * - 1 ;
48805: LD_ADDR_VAR 0 2
48809: PUSH
48810: LD_VAR 0 1
48814: PUSH
48815: LD_INT 1
48817: NEG
48818: MUL
48819: ST_TO_ADDR
// end ;
48820: LD_VAR 0 2
48824: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
48825: LD_INT 0
48827: PPUSH
48828: PPUSH
48829: PPUSH
48830: PPUSH
48831: PPUSH
48832: PPUSH
48833: PPUSH
48834: PPUSH
// if not unit or not building then
48835: LD_VAR 0 1
48839: NOT
48840: IFTRUE 48849
48842: PUSH
48843: LD_VAR 0 2
48847: NOT
48848: OR
48849: IFFALSE 48853
// exit ;
48851: GO 49081
// x := GetX ( building ) ;
48853: LD_ADDR_VAR 0 4
48857: PUSH
48858: LD_VAR 0 2
48862: PPUSH
48863: CALL_OW 250
48867: ST_TO_ADDR
// y := GetY ( building ) ;
48868: LD_ADDR_VAR 0 6
48872: PUSH
48873: LD_VAR 0 2
48877: PPUSH
48878: CALL_OW 251
48882: ST_TO_ADDR
// d := GetDir ( building ) ;
48883: LD_ADDR_VAR 0 8
48887: PUSH
48888: LD_VAR 0 2
48892: PPUSH
48893: CALL_OW 254
48897: ST_TO_ADDR
// r := 4 ;
48898: LD_ADDR_VAR 0 9
48902: PUSH
48903: LD_INT 4
48905: ST_TO_ADDR
// for i := 1 to 5 do
48906: LD_ADDR_VAR 0 10
48910: PUSH
48911: DOUBLE
48912: LD_INT 1
48914: DEC
48915: ST_TO_ADDR
48916: LD_INT 5
48918: PUSH
48919: FOR_TO
48920: IFFALSE 49079
// begin _x := ShiftX ( x , d , r + i ) ;
48922: LD_ADDR_VAR 0 5
48926: PUSH
48927: LD_VAR 0 4
48931: PPUSH
48932: LD_VAR 0 8
48936: PPUSH
48937: LD_VAR 0 9
48941: PUSH
48942: LD_VAR 0 10
48946: PLUS
48947: PPUSH
48948: CALL_OW 272
48952: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
48953: LD_ADDR_VAR 0 7
48957: PUSH
48958: LD_VAR 0 6
48962: PPUSH
48963: LD_VAR 0 8
48967: PPUSH
48968: LD_VAR 0 9
48972: PUSH
48973: LD_VAR 0 10
48977: PLUS
48978: PPUSH
48979: CALL_OW 273
48983: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
48984: LD_VAR 0 5
48988: PPUSH
48989: LD_VAR 0 7
48993: PPUSH
48994: CALL_OW 488
48998: IFFALSE 49033
49000: PUSH
49001: LD_VAR 0 5
49005: PPUSH
49006: LD_VAR 0 7
49010: PPUSH
49011: CALL_OW 428
49015: PPUSH
49016: CALL_OW 247
49020: PUSH
49021: LD_INT 3
49023: PUSH
49024: LD_INT 2
49026: PUSH
49027: EMPTY
49028: LIST
49029: LIST
49030: IN
49031: NOT
49032: AND
49033: IFFALSE 49077
// begin ComMoveXY ( unit , _x , _y ) ;
49035: LD_VAR 0 1
49039: PPUSH
49040: LD_VAR 0 5
49044: PPUSH
49045: LD_VAR 0 7
49049: PPUSH
49050: CALL_OW 111
// result := [ _x , _y ] ;
49054: LD_ADDR_VAR 0 3
49058: PUSH
49059: LD_VAR 0 5
49063: PUSH
49064: LD_VAR 0 7
49068: PUSH
49069: EMPTY
49070: LIST
49071: LIST
49072: ST_TO_ADDR
// exit ;
49073: POP
49074: POP
49075: GO 49081
// end ; end ;
49077: GO 48919
49079: POP
49080: POP
// end ;
49081: LD_VAR 0 3
49085: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
49086: LD_INT 0
49088: PPUSH
49089: PPUSH
49090: PPUSH
// result := 0 ;
49091: LD_ADDR_VAR 0 3
49095: PUSH
49096: LD_INT 0
49098: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
49099: LD_VAR 0 1
49103: PUSH
49104: LD_INT 0
49106: LESS
49107: IFTRUE 49119
49109: PUSH
49110: LD_VAR 0 1
49114: PUSH
49115: LD_INT 8
49117: GREATER
49118: OR
49119: IFTRUE 49131
49121: PUSH
49122: LD_VAR 0 2
49126: PUSH
49127: LD_INT 0
49129: LESS
49130: OR
49131: IFTRUE 49143
49133: PUSH
49134: LD_VAR 0 2
49138: PUSH
49139: LD_INT 8
49141: GREATER
49142: OR
49143: IFFALSE 49147
// exit ;
49145: GO 49222
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
49147: LD_ADDR_VAR 0 4
49151: PUSH
49152: LD_INT 22
49154: PUSH
49155: LD_VAR 0 2
49159: PUSH
49160: EMPTY
49161: LIST
49162: LIST
49163: PPUSH
49164: CALL_OW 69
49168: PUSH
49169: FOR_IN
49170: IFFALSE 49220
// begin un := UnitShoot ( i ) ;
49172: LD_ADDR_VAR 0 5
49176: PUSH
49177: LD_VAR 0 4
49181: PPUSH
49182: CALL_OW 504
49186: ST_TO_ADDR
// if GetSide ( un ) = side1 then
49187: LD_VAR 0 5
49191: PPUSH
49192: CALL_OW 255
49196: PUSH
49197: LD_VAR 0 1
49201: EQUAL
49202: IFFALSE 49218
// begin result := un ;
49204: LD_ADDR_VAR 0 3
49208: PUSH
49209: LD_VAR 0 5
49213: ST_TO_ADDR
// exit ;
49214: POP
49215: POP
49216: GO 49222
// end ; end ;
49218: GO 49169
49220: POP
49221: POP
// end ;
49222: LD_VAR 0 3
49226: RET
// export function GetCargoBay ( units ) ; begin
49227: LD_INT 0
49229: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
49230: LD_ADDR_VAR 0 2
49234: PUSH
49235: LD_VAR 0 1
49239: PPUSH
49240: LD_INT 2
49242: PUSH
49243: LD_INT 34
49245: PUSH
49246: LD_INT 12
49248: PUSH
49249: EMPTY
49250: LIST
49251: LIST
49252: PUSH
49253: LD_INT 34
49255: PUSH
49256: LD_INT 51
49258: PUSH
49259: EMPTY
49260: LIST
49261: LIST
49262: PUSH
49263: LD_INT 34
49265: PUSH
49266: LD_INT 32
49268: PUSH
49269: EMPTY
49270: LIST
49271: LIST
49272: PUSH
49273: LD_INT 34
49275: PUSH
49276: LD_INT 89
49278: PUSH
49279: EMPTY
49280: LIST
49281: LIST
49282: PUSH
49283: EMPTY
49284: LIST
49285: LIST
49286: LIST
49287: LIST
49288: LIST
49289: PPUSH
49290: CALL_OW 72
49294: ST_TO_ADDR
// end ;
49295: LD_VAR 0 2
49299: RET
// export function Negate ( value ) ; begin
49300: LD_INT 0
49302: PPUSH
// result := not value ;
49303: LD_ADDR_VAR 0 2
49307: PUSH
49308: LD_VAR 0 1
49312: NOT
49313: ST_TO_ADDR
// end ;
49314: LD_VAR 0 2
49318: RET
// export function Inc ( value ) ; begin
49319: LD_INT 0
49321: PPUSH
// result := value + 1 ;
49322: LD_ADDR_VAR 0 2
49326: PUSH
49327: LD_VAR 0 1
49331: PUSH
49332: LD_INT 1
49334: PLUS
49335: ST_TO_ADDR
// end ;
49336: LD_VAR 0 2
49340: RET
// export function Dec ( value ) ; begin
49341: LD_INT 0
49343: PPUSH
// result := value - 1 ;
49344: LD_ADDR_VAR 0 2
49348: PUSH
49349: LD_VAR 0 1
49353: PUSH
49354: LD_INT 1
49356: MINUS
49357: ST_TO_ADDR
// end ;
49358: LD_VAR 0 2
49362: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
49363: LD_INT 0
49365: PPUSH
49366: PPUSH
49367: PPUSH
49368: PPUSH
49369: PPUSH
49370: PPUSH
49371: PPUSH
49372: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
49373: LD_VAR 0 1
49377: PPUSH
49378: LD_VAR 0 2
49382: PPUSH
49383: CALL_OW 488
49387: NOT
49388: IFTRUE 49407
49390: PUSH
49391: LD_VAR 0 3
49395: PPUSH
49396: LD_VAR 0 4
49400: PPUSH
49401: CALL_OW 488
49405: NOT
49406: OR
49407: IFFALSE 49420
// begin result := - 1 ;
49409: LD_ADDR_VAR 0 5
49413: PUSH
49414: LD_INT 1
49416: NEG
49417: ST_TO_ADDR
// exit ;
49418: GO 49655
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
49420: LD_ADDR_VAR 0 12
49424: PUSH
49425: LD_VAR 0 1
49429: PPUSH
49430: LD_VAR 0 2
49434: PPUSH
49435: LD_VAR 0 3
49439: PPUSH
49440: LD_VAR 0 4
49444: PPUSH
49445: CALL 48491 0 4
49449: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
49450: LD_ADDR_VAR 0 11
49454: PUSH
49455: LD_VAR 0 1
49459: PPUSH
49460: LD_VAR 0 2
49464: PPUSH
49465: LD_VAR 0 12
49469: PUSH
49470: LD_INT 1
49472: ARRAY
49473: PPUSH
49474: LD_VAR 0 12
49478: PUSH
49479: LD_INT 2
49481: ARRAY
49482: PPUSH
49483: CALL_OW 298
49487: ST_TO_ADDR
// distance := 9999 ;
49488: LD_ADDR_VAR 0 10
49492: PUSH
49493: LD_INT 9999
49495: ST_TO_ADDR
// for i := 0 to 5 do
49496: LD_ADDR_VAR 0 6
49500: PUSH
49501: DOUBLE
49502: LD_INT 0
49504: DEC
49505: ST_TO_ADDR
49506: LD_INT 5
49508: PUSH
49509: FOR_TO
49510: IFFALSE 49653
// begin _x := ShiftX ( x1 , i , centerDist ) ;
49512: LD_ADDR_VAR 0 7
49516: PUSH
49517: LD_VAR 0 1
49521: PPUSH
49522: LD_VAR 0 6
49526: PPUSH
49527: LD_VAR 0 11
49531: PPUSH
49532: CALL_OW 272
49536: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
49537: LD_ADDR_VAR 0 8
49541: PUSH
49542: LD_VAR 0 2
49546: PPUSH
49547: LD_VAR 0 6
49551: PPUSH
49552: LD_VAR 0 11
49556: PPUSH
49557: CALL_OW 273
49561: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
49562: LD_VAR 0 7
49566: PPUSH
49567: LD_VAR 0 8
49571: PPUSH
49572: CALL_OW 488
49576: NOT
49577: IFFALSE 49581
// continue ;
49579: GO 49509
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
49581: LD_ADDR_VAR 0 9
49585: PUSH
49586: LD_VAR 0 12
49590: PUSH
49591: LD_INT 1
49593: ARRAY
49594: PPUSH
49595: LD_VAR 0 12
49599: PUSH
49600: LD_INT 2
49602: ARRAY
49603: PPUSH
49604: LD_VAR 0 7
49608: PPUSH
49609: LD_VAR 0 8
49613: PPUSH
49614: CALL_OW 298
49618: ST_TO_ADDR
// if tmp < distance then
49619: LD_VAR 0 9
49623: PUSH
49624: LD_VAR 0 10
49628: LESS
49629: IFFALSE 49651
// begin result := i ;
49631: LD_ADDR_VAR 0 5
49635: PUSH
49636: LD_VAR 0 6
49640: ST_TO_ADDR
// distance := tmp ;
49641: LD_ADDR_VAR 0 10
49645: PUSH
49646: LD_VAR 0 9
49650: ST_TO_ADDR
// end ; end ;
49651: GO 49509
49653: POP
49654: POP
// end ;
49655: LD_VAR 0 5
49659: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
49660: LD_INT 0
49662: PPUSH
49663: PPUSH
// if not driver or not IsInUnit ( driver ) then
49664: LD_VAR 0 1
49668: NOT
49669: IFTRUE 49683
49671: PUSH
49672: LD_VAR 0 1
49676: PPUSH
49677: CALL_OW 310
49681: NOT
49682: OR
49683: IFFALSE 49687
// exit ;
49685: GO 49777
// vehicle := IsInUnit ( driver ) ;
49687: LD_ADDR_VAR 0 3
49691: PUSH
49692: LD_VAR 0 1
49696: PPUSH
49697: CALL_OW 310
49701: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
49702: LD_VAR 0 1
49706: PPUSH
49707: LD_STRING \
49709: PUSH
49710: LD_INT 0
49712: PUSH
49713: LD_INT 0
49715: PUSH
49716: LD_INT 0
49718: PUSH
49719: LD_INT 0
49721: PUSH
49722: LD_INT 0
49724: PUSH
49725: LD_INT 0
49727: PUSH
49728: EMPTY
49729: LIST
49730: LIST
49731: LIST
49732: LIST
49733: LIST
49734: LIST
49735: LIST
49736: PUSH
49737: LD_STRING E
49739: PUSH
49740: LD_INT 0
49742: PUSH
49743: LD_INT 0
49745: PUSH
49746: LD_VAR 0 3
49750: PUSH
49751: LD_INT 0
49753: PUSH
49754: LD_INT 0
49756: PUSH
49757: LD_INT 0
49759: PUSH
49760: EMPTY
49761: LIST
49762: LIST
49763: LIST
49764: LIST
49765: LIST
49766: LIST
49767: LIST
49768: PUSH
49769: EMPTY
49770: LIST
49771: LIST
49772: PPUSH
49773: CALL_OW 446
// end ;
49777: LD_VAR 0 2
49781: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
49782: LD_INT 0
49784: PPUSH
49785: PPUSH
// if not driver or not IsInUnit ( driver ) then
49786: LD_VAR 0 1
49790: NOT
49791: IFTRUE 49805
49793: PUSH
49794: LD_VAR 0 1
49798: PPUSH
49799: CALL_OW 310
49803: NOT
49804: OR
49805: IFFALSE 49809
// exit ;
49807: GO 49899
// vehicle := IsInUnit ( driver ) ;
49809: LD_ADDR_VAR 0 3
49813: PUSH
49814: LD_VAR 0 1
49818: PPUSH
49819: CALL_OW 310
49823: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
49824: LD_VAR 0 1
49828: PPUSH
49829: LD_STRING \
49831: PUSH
49832: LD_INT 0
49834: PUSH
49835: LD_INT 0
49837: PUSH
49838: LD_INT 0
49840: PUSH
49841: LD_INT 0
49843: PUSH
49844: LD_INT 0
49846: PUSH
49847: LD_INT 0
49849: PUSH
49850: EMPTY
49851: LIST
49852: LIST
49853: LIST
49854: LIST
49855: LIST
49856: LIST
49857: LIST
49858: PUSH
49859: LD_STRING E
49861: PUSH
49862: LD_INT 0
49864: PUSH
49865: LD_INT 0
49867: PUSH
49868: LD_VAR 0 3
49872: PUSH
49873: LD_INT 0
49875: PUSH
49876: LD_INT 0
49878: PUSH
49879: LD_INT 0
49881: PUSH
49882: EMPTY
49883: LIST
49884: LIST
49885: LIST
49886: LIST
49887: LIST
49888: LIST
49889: LIST
49890: PUSH
49891: EMPTY
49892: LIST
49893: LIST
49894: PPUSH
49895: CALL_OW 447
// end ;
49899: LD_VAR 0 2
49903: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
49904: LD_INT 0
49906: PPUSH
49907: PPUSH
49908: PPUSH
// tmp := [ ] ;
49909: LD_ADDR_VAR 0 5
49913: PUSH
49914: EMPTY
49915: ST_TO_ADDR
// for i in units do
49916: LD_ADDR_VAR 0 4
49920: PUSH
49921: LD_VAR 0 1
49925: PUSH
49926: FOR_IN
49927: IFFALSE 49965
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
49929: LD_ADDR_VAR 0 5
49933: PUSH
49934: LD_VAR 0 5
49938: PPUSH
49939: LD_VAR 0 5
49943: PUSH
49944: LD_INT 1
49946: PLUS
49947: PPUSH
49948: LD_VAR 0 4
49952: PPUSH
49953: CALL_OW 256
49957: PPUSH
49958: CALL_OW 2
49962: ST_TO_ADDR
49963: GO 49926
49965: POP
49966: POP
// if not tmp then
49967: LD_VAR 0 5
49971: NOT
49972: IFFALSE 49976
// exit ;
49974: GO 50024
// if asc then
49976: LD_VAR 0 2
49980: IFFALSE 50004
// result := SortListByListAsc ( units , tmp ) else
49982: LD_ADDR_VAR 0 3
49986: PUSH
49987: LD_VAR 0 1
49991: PPUSH
49992: LD_VAR 0 5
49996: PPUSH
49997: CALL_OW 76
50001: ST_TO_ADDR
50002: GO 50024
// result := SortListByListDesc ( units , tmp ) ;
50004: LD_ADDR_VAR 0 3
50008: PUSH
50009: LD_VAR 0 1
50013: PPUSH
50014: LD_VAR 0 5
50018: PPUSH
50019: CALL_OW 77
50023: ST_TO_ADDR
// end ;
50024: LD_VAR 0 3
50028: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
50029: LD_INT 0
50031: PPUSH
50032: PPUSH
// task := GetTaskList ( mech ) ;
50033: LD_ADDR_VAR 0 4
50037: PUSH
50038: LD_VAR 0 1
50042: PPUSH
50043: CALL_OW 437
50047: ST_TO_ADDR
// if not task then
50048: LD_VAR 0 4
50052: NOT
50053: IFFALSE 50057
// exit ;
50055: GO 50101
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
50057: LD_ADDR_VAR 0 3
50061: PUSH
50062: LD_VAR 0 4
50066: PUSH
50067: LD_INT 1
50069: ARRAY
50070: PUSH
50071: LD_INT 1
50073: ARRAY
50074: PUSH
50075: LD_STRING r
50077: EQUAL
50078: IFFALSE 50100
50080: PUSH
50081: LD_VAR 0 4
50085: PUSH
50086: LD_INT 1
50088: ARRAY
50089: PUSH
50090: LD_INT 4
50092: ARRAY
50093: PUSH
50094: LD_VAR 0 2
50098: EQUAL
50099: AND
50100: ST_TO_ADDR
// end ;
50101: LD_VAR 0 3
50105: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
50106: LD_INT 0
50108: PPUSH
// SetDir ( unit , d ) ;
50109: LD_VAR 0 1
50113: PPUSH
50114: LD_VAR 0 4
50118: PPUSH
50119: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
50123: LD_ADDR_VAR 0 6
50127: PUSH
50128: LD_VAR 0 1
50132: PPUSH
50133: LD_VAR 0 2
50137: PPUSH
50138: LD_VAR 0 3
50142: PPUSH
50143: LD_VAR 0 5
50147: PPUSH
50148: CALL_OW 48
50152: ST_TO_ADDR
// end ;
50153: LD_VAR 0 6
50157: RET
// export function ToNaturalNumber ( number ) ; begin
50158: LD_INT 0
50160: PPUSH
// result := number div 1 ;
50161: LD_ADDR_VAR 0 2
50165: PUSH
50166: LD_VAR 0 1
50170: PUSH
50171: LD_INT 1
50173: DIV
50174: ST_TO_ADDR
// if number < 0 then
50175: LD_VAR 0 1
50179: PUSH
50180: LD_INT 0
50182: LESS
50183: IFFALSE 50193
// result := 0 ;
50185: LD_ADDR_VAR 0 2
50189: PUSH
50190: LD_INT 0
50192: ST_TO_ADDR
// end ;
50193: LD_VAR 0 2
50197: RET
// export function SortByBType ( buildings , asc ) ; var b , tmp ; begin
50198: LD_INT 0
50200: PPUSH
50201: PPUSH
50202: PPUSH
// if not buildings then
50203: LD_VAR 0 1
50207: NOT
50208: IFFALSE 50212
// exit ;
50210: GO 50327
// tmp := [ ] ;
50212: LD_ADDR_VAR 0 5
50216: PUSH
50217: EMPTY
50218: ST_TO_ADDR
// for b in buildings do
50219: LD_ADDR_VAR 0 4
50223: PUSH
50224: LD_VAR 0 1
50228: PUSH
50229: FOR_IN
50230: IFFALSE 50268
// tmp := Replace ( tmp , tmp + 1 , GetBType ( b ) ) ;
50232: LD_ADDR_VAR 0 5
50236: PUSH
50237: LD_VAR 0 5
50241: PPUSH
50242: LD_VAR 0 5
50246: PUSH
50247: LD_INT 1
50249: PLUS
50250: PPUSH
50251: LD_VAR 0 4
50255: PPUSH
50256: CALL_OW 266
50260: PPUSH
50261: CALL_OW 1
50265: ST_TO_ADDR
50266: GO 50229
50268: POP
50269: POP
// if not tmp then
50270: LD_VAR 0 5
50274: NOT
50275: IFFALSE 50279
// exit ;
50277: GO 50327
// if asc then
50279: LD_VAR 0 2
50283: IFFALSE 50307
// result := SortListByListAsc ( buildings , tmp ) else
50285: LD_ADDR_VAR 0 3
50289: PUSH
50290: LD_VAR 0 1
50294: PPUSH
50295: LD_VAR 0 5
50299: PPUSH
50300: CALL_OW 76
50304: ST_TO_ADDR
50305: GO 50327
// result := SortListByListDesc ( buildings , tmp ) ;
50307: LD_ADDR_VAR 0 3
50311: PUSH
50312: LD_VAR 0 1
50316: PPUSH
50317: LD_VAR 0 5
50321: PPUSH
50322: CALL_OW 77
50326: ST_TO_ADDR
// end ;
50327: LD_VAR 0 3
50331: RET
// export function SortByClass ( units , class ) ; var un ; begin
50332: LD_INT 0
50334: PPUSH
50335: PPUSH
// if not units or not class then
50336: LD_VAR 0 1
50340: NOT
50341: IFTRUE 50350
50343: PUSH
50344: LD_VAR 0 2
50348: NOT
50349: OR
50350: IFFALSE 50354
// exit ;
50352: GO 50449
// result := [ ] ;
50354: LD_ADDR_VAR 0 3
50358: PUSH
50359: EMPTY
50360: ST_TO_ADDR
// for un in units do
50361: LD_ADDR_VAR 0 4
50365: PUSH
50366: LD_VAR 0 1
50370: PUSH
50371: FOR_IN
50372: IFFALSE 50447
// if GetClass ( un ) = class then
50374: LD_VAR 0 4
50378: PPUSH
50379: CALL_OW 257
50383: PUSH
50384: LD_VAR 0 2
50388: EQUAL
50389: IFFALSE 50416
// result := Insert ( result , 1 , un ) else
50391: LD_ADDR_VAR 0 3
50395: PUSH
50396: LD_VAR 0 3
50400: PPUSH
50401: LD_INT 1
50403: PPUSH
50404: LD_VAR 0 4
50408: PPUSH
50409: CALL_OW 2
50413: ST_TO_ADDR
50414: GO 50445
// result := Replace ( result , result + 1 , un ) ;
50416: LD_ADDR_VAR 0 3
50420: PUSH
50421: LD_VAR 0 3
50425: PPUSH
50426: LD_VAR 0 3
50430: PUSH
50431: LD_INT 1
50433: PLUS
50434: PPUSH
50435: LD_VAR 0 4
50439: PPUSH
50440: CALL_OW 1
50444: ST_TO_ADDR
50445: GO 50371
50447: POP
50448: POP
// end ;
50449: LD_VAR 0 3
50453: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
50454: LD_INT 0
50456: PPUSH
50457: PPUSH
50458: PPUSH
50459: PPUSH
50460: PPUSH
50461: PPUSH
50462: PPUSH
// result := [ ] ;
50463: LD_ADDR_VAR 0 4
50467: PUSH
50468: EMPTY
50469: ST_TO_ADDR
// if x - r < 0 then
50470: LD_VAR 0 1
50474: PUSH
50475: LD_VAR 0 3
50479: MINUS
50480: PUSH
50481: LD_INT 0
50483: LESS
50484: IFFALSE 50496
// min_x := 0 else
50486: LD_ADDR_VAR 0 8
50490: PUSH
50491: LD_INT 0
50493: ST_TO_ADDR
50494: GO 50512
// min_x := x - r ;
50496: LD_ADDR_VAR 0 8
50500: PUSH
50501: LD_VAR 0 1
50505: PUSH
50506: LD_VAR 0 3
50510: MINUS
50511: ST_TO_ADDR
// if y - r < 0 then
50512: LD_VAR 0 2
50516: PUSH
50517: LD_VAR 0 3
50521: MINUS
50522: PUSH
50523: LD_INT 0
50525: LESS
50526: IFFALSE 50538
// min_y := 0 else
50528: LD_ADDR_VAR 0 7
50532: PUSH
50533: LD_INT 0
50535: ST_TO_ADDR
50536: GO 50554
// min_y := y - r ;
50538: LD_ADDR_VAR 0 7
50542: PUSH
50543: LD_VAR 0 2
50547: PUSH
50548: LD_VAR 0 3
50552: MINUS
50553: ST_TO_ADDR
// max_x := x + r ;
50554: LD_ADDR_VAR 0 9
50558: PUSH
50559: LD_VAR 0 1
50563: PUSH
50564: LD_VAR 0 3
50568: PLUS
50569: ST_TO_ADDR
// max_y := y + r ;
50570: LD_ADDR_VAR 0 10
50574: PUSH
50575: LD_VAR 0 2
50579: PUSH
50580: LD_VAR 0 3
50584: PLUS
50585: ST_TO_ADDR
// for _x = min_x to max_x do
50586: LD_ADDR_VAR 0 5
50590: PUSH
50591: DOUBLE
50592: LD_VAR 0 8
50596: DEC
50597: ST_TO_ADDR
50598: LD_VAR 0 9
50602: PUSH
50603: FOR_TO
50604: IFFALSE 50705
// for _y = min_y to max_y do
50606: LD_ADDR_VAR 0 6
50610: PUSH
50611: DOUBLE
50612: LD_VAR 0 7
50616: DEC
50617: ST_TO_ADDR
50618: LD_VAR 0 10
50622: PUSH
50623: FOR_TO
50624: IFFALSE 50701
// begin if not ValidHex ( _x , _y ) then
50626: LD_VAR 0 5
50630: PPUSH
50631: LD_VAR 0 6
50635: PPUSH
50636: CALL_OW 488
50640: NOT
50641: IFFALSE 50645
// continue ;
50643: GO 50623
// if GetResourceTypeXY ( _x , _y ) then
50645: LD_VAR 0 5
50649: PPUSH
50650: LD_VAR 0 6
50654: PPUSH
50655: CALL_OW 283
50659: IFFALSE 50699
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
50661: LD_ADDR_VAR 0 4
50665: PUSH
50666: LD_VAR 0 4
50670: PPUSH
50671: LD_VAR 0 4
50675: PUSH
50676: LD_INT 1
50678: PLUS
50679: PPUSH
50680: LD_VAR 0 5
50684: PUSH
50685: LD_VAR 0 6
50689: PUSH
50690: EMPTY
50691: LIST
50692: LIST
50693: PPUSH
50694: CALL_OW 1
50698: ST_TO_ADDR
// end ;
50699: GO 50623
50701: POP
50702: POP
50703: GO 50603
50705: POP
50706: POP
// end ;
50707: LD_VAR 0 4
50711: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
50712: LD_INT 0
50714: PPUSH
50715: PPUSH
50716: PPUSH
50717: PPUSH
50718: PPUSH
50719: PPUSH
50720: PPUSH
50721: PPUSH
// if not units then
50722: LD_VAR 0 1
50726: NOT
50727: IFFALSE 50731
// exit ;
50729: GO 51263
// result := UnitFilter ( units , [ f_ok ] ) ;
50731: LD_ADDR_VAR 0 3
50735: PUSH
50736: LD_VAR 0 1
50740: PPUSH
50741: LD_INT 50
50743: PUSH
50744: EMPTY
50745: LIST
50746: PPUSH
50747: CALL_OW 72
50751: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
50752: LD_ADDR_VAR 0 8
50756: PUSH
50757: LD_VAR 0 1
50761: PUSH
50762: LD_INT 1
50764: ARRAY
50765: PPUSH
50766: CALL_OW 255
50770: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
50771: LD_ADDR_VAR 0 10
50775: PUSH
50776: LD_INT 29
50778: PUSH
50779: LD_INT 91
50781: PUSH
50782: LD_INT 49
50784: PUSH
50785: EMPTY
50786: LIST
50787: LIST
50788: LIST
50789: ST_TO_ADDR
// if not result then
50790: LD_VAR 0 3
50794: NOT
50795: IFFALSE 50799
// exit ;
50797: GO 51263
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
50799: LD_ADDR_VAR 0 5
50803: PUSH
50804: LD_INT 81
50806: PUSH
50807: LD_VAR 0 8
50811: PUSH
50812: EMPTY
50813: LIST
50814: LIST
50815: PPUSH
50816: CALL_OW 69
50820: ST_TO_ADDR
// for i in result do
50821: LD_ADDR_VAR 0 4
50825: PUSH
50826: LD_VAR 0 3
50830: PUSH
50831: FOR_IN
50832: IFFALSE 51261
// begin tag := GetTag ( i ) + 1 ;
50834: LD_ADDR_VAR 0 9
50838: PUSH
50839: LD_VAR 0 4
50843: PPUSH
50844: CALL_OW 110
50848: PUSH
50849: LD_INT 1
50851: PLUS
50852: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
50853: LD_ADDR_VAR 0 7
50857: PUSH
50858: LD_VAR 0 4
50862: PPUSH
50863: CALL_OW 250
50867: PPUSH
50868: LD_VAR 0 4
50872: PPUSH
50873: CALL_OW 251
50877: PPUSH
50878: LD_INT 4
50880: PPUSH
50881: CALL 50454 0 3
50885: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
50886: LD_VAR 0 4
50890: PPUSH
50891: CALL_OW 247
50895: PUSH
50896: LD_INT 2
50898: EQUAL
50899: IFFALSE 50911
50901: PUSH
50902: LD_VAR 0 7
50906: PUSH
50907: LD_INT 2
50909: GREATER
50910: AND
50911: IFFALSE 50931
50913: PUSH
50914: LD_VAR 0 4
50918: PPUSH
50919: CALL_OW 264
50923: PUSH
50924: LD_VAR 0 10
50928: IN
50929: NOT
50930: AND
50931: IFFALSE 50970
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
50933: LD_VAR 0 4
50937: PPUSH
50938: LD_VAR 0 7
50942: PUSH
50943: LD_INT 1
50945: ARRAY
50946: PUSH
50947: LD_INT 1
50949: ARRAY
50950: PPUSH
50951: LD_VAR 0 7
50955: PUSH
50956: LD_INT 1
50958: ARRAY
50959: PUSH
50960: LD_INT 2
50962: ARRAY
50963: PPUSH
50964: CALL_OW 116
50968: GO 51259
// if path > tag then
50970: LD_VAR 0 2
50974: PUSH
50975: LD_VAR 0 9
50979: GREATER
50980: IFFALSE 51188
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
50982: LD_ADDR_VAR 0 6
50986: PUSH
50987: LD_VAR 0 5
50991: PPUSH
50992: LD_INT 91
50994: PUSH
50995: LD_VAR 0 4
50999: PUSH
51000: LD_INT 8
51002: PUSH
51003: EMPTY
51004: LIST
51005: LIST
51006: LIST
51007: PPUSH
51008: CALL_OW 72
51012: ST_TO_ADDR
// if nearEnemy then
51013: LD_VAR 0 6
51017: IFFALSE 51086
// begin if GetWeapon ( i ) = ru_time_lapser then
51019: LD_VAR 0 4
51023: PPUSH
51024: CALL_OW 264
51028: PUSH
51029: LD_INT 49
51031: EQUAL
51032: IFFALSE 51060
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
51034: LD_VAR 0 4
51038: PPUSH
51039: LD_VAR 0 6
51043: PPUSH
51044: LD_VAR 0 4
51048: PPUSH
51049: CALL_OW 74
51053: PPUSH
51054: CALL_OW 112
51058: GO 51084
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
51060: LD_VAR 0 4
51064: PPUSH
51065: LD_VAR 0 6
51069: PPUSH
51070: LD_VAR 0 4
51074: PPUSH
51075: CALL_OW 74
51079: PPUSH
51080: CALL 52344 0 2
// end else
51084: GO 51186
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
51086: LD_VAR 0 4
51090: PPUSH
51091: LD_VAR 0 2
51095: PUSH
51096: LD_VAR 0 9
51100: ARRAY
51101: PUSH
51102: LD_INT 1
51104: ARRAY
51105: PPUSH
51106: LD_VAR 0 2
51110: PUSH
51111: LD_VAR 0 9
51115: ARRAY
51116: PUSH
51117: LD_INT 2
51119: ARRAY
51120: PPUSH
51121: CALL_OW 297
51125: PUSH
51126: LD_INT 6
51128: GREATER
51129: IFFALSE 51172
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
51131: LD_VAR 0 4
51135: PPUSH
51136: LD_VAR 0 2
51140: PUSH
51141: LD_VAR 0 9
51145: ARRAY
51146: PUSH
51147: LD_INT 1
51149: ARRAY
51150: PPUSH
51151: LD_VAR 0 2
51155: PUSH
51156: LD_VAR 0 9
51160: ARRAY
51161: PUSH
51162: LD_INT 2
51164: ARRAY
51165: PPUSH
51166: CALL_OW 114
51170: GO 51186
// SetTag ( i , tag ) ;
51172: LD_VAR 0 4
51176: PPUSH
51177: LD_VAR 0 9
51181: PPUSH
51182: CALL_OW 109
// end else
51186: GO 51259
// if enemy then
51188: LD_VAR 0 5
51192: IFFALSE 51259
// begin if GetWeapon ( i ) = ru_time_lapser then
51194: LD_VAR 0 4
51198: PPUSH
51199: CALL_OW 264
51203: PUSH
51204: LD_INT 49
51206: EQUAL
51207: IFFALSE 51235
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
51209: LD_VAR 0 4
51213: PPUSH
51214: LD_VAR 0 5
51218: PPUSH
51219: LD_VAR 0 4
51223: PPUSH
51224: CALL_OW 74
51228: PPUSH
51229: CALL_OW 112
51233: GO 51259
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
51235: LD_VAR 0 4
51239: PPUSH
51240: LD_VAR 0 5
51244: PPUSH
51245: LD_VAR 0 4
51249: PPUSH
51250: CALL_OW 74
51254: PPUSH
51255: CALL 52344 0 2
// end ; end ;
51259: GO 50831
51261: POP
51262: POP
// end ;
51263: LD_VAR 0 3
51267: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
51268: LD_INT 0
51270: PPUSH
51271: PPUSH
51272: PPUSH
// if not unit or IsInUnit ( unit ) then
51273: LD_VAR 0 1
51277: NOT
51278: IFTRUE 51291
51280: PUSH
51281: LD_VAR 0 1
51285: PPUSH
51286: CALL_OW 310
51290: OR
51291: IFFALSE 51295
// exit ;
51293: GO 51386
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
51295: LD_ADDR_VAR 0 4
51299: PUSH
51300: LD_VAR 0 1
51304: PPUSH
51305: CALL_OW 250
51309: PPUSH
51310: LD_VAR 0 2
51314: PPUSH
51315: LD_INT 1
51317: PPUSH
51318: CALL_OW 272
51322: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
51323: LD_ADDR_VAR 0 5
51327: PUSH
51328: LD_VAR 0 1
51332: PPUSH
51333: CALL_OW 251
51337: PPUSH
51338: LD_VAR 0 2
51342: PPUSH
51343: LD_INT 1
51345: PPUSH
51346: CALL_OW 273
51350: ST_TO_ADDR
// if ValidHex ( x , y ) then
51351: LD_VAR 0 4
51355: PPUSH
51356: LD_VAR 0 5
51360: PPUSH
51361: CALL_OW 488
51365: IFFALSE 51386
// ComTurnXY ( unit , x , y ) ;
51367: LD_VAR 0 1
51371: PPUSH
51372: LD_VAR 0 4
51376: PPUSH
51377: LD_VAR 0 5
51381: PPUSH
51382: CALL_OW 118
// end ;
51386: LD_VAR 0 3
51390: RET
// export function SeeUnits ( side , units ) ; var i ; begin
51391: LD_INT 0
51393: PPUSH
51394: PPUSH
// result := false ;
51395: LD_ADDR_VAR 0 3
51399: PUSH
51400: LD_INT 0
51402: ST_TO_ADDR
// if not units then
51403: LD_VAR 0 2
51407: NOT
51408: IFFALSE 51412
// exit ;
51410: GO 51457
// for i in units do
51412: LD_ADDR_VAR 0 4
51416: PUSH
51417: LD_VAR 0 2
51421: PUSH
51422: FOR_IN
51423: IFFALSE 51455
// if See ( side , i ) then
51425: LD_VAR 0 1
51429: PPUSH
51430: LD_VAR 0 4
51434: PPUSH
51435: CALL_OW 292
51439: IFFALSE 51453
// begin result := true ;
51441: LD_ADDR_VAR 0 3
51445: PUSH
51446: LD_INT 1
51448: ST_TO_ADDR
// exit ;
51449: POP
51450: POP
51451: GO 51457
// end ;
51453: GO 51422
51455: POP
51456: POP
// end ;
51457: LD_VAR 0 3
51461: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
51462: LD_INT 0
51464: PPUSH
51465: PPUSH
51466: PPUSH
51467: PPUSH
// if not unit or not points then
51468: LD_VAR 0 1
51472: NOT
51473: IFTRUE 51482
51475: PUSH
51476: LD_VAR 0 2
51480: NOT
51481: OR
51482: IFFALSE 51486
// exit ;
51484: GO 51576
// dist := 99999 ;
51486: LD_ADDR_VAR 0 5
51490: PUSH
51491: LD_INT 99999
51493: ST_TO_ADDR
// for i in points do
51494: LD_ADDR_VAR 0 4
51498: PUSH
51499: LD_VAR 0 2
51503: PUSH
51504: FOR_IN
51505: IFFALSE 51574
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
51507: LD_ADDR_VAR 0 6
51511: PUSH
51512: LD_VAR 0 1
51516: PPUSH
51517: LD_VAR 0 4
51521: PUSH
51522: LD_INT 1
51524: ARRAY
51525: PPUSH
51526: LD_VAR 0 4
51530: PUSH
51531: LD_INT 2
51533: ARRAY
51534: PPUSH
51535: CALL_OW 297
51539: ST_TO_ADDR
// if tmpDist < dist then
51540: LD_VAR 0 6
51544: PUSH
51545: LD_VAR 0 5
51549: LESS
51550: IFFALSE 51572
// begin result := i ;
51552: LD_ADDR_VAR 0 3
51556: PUSH
51557: LD_VAR 0 4
51561: ST_TO_ADDR
// dist := tmpDist ;
51562: LD_ADDR_VAR 0 5
51566: PUSH
51567: LD_VAR 0 6
51571: ST_TO_ADDR
// end ; end ;
51572: GO 51504
51574: POP
51575: POP
// end ;
51576: LD_VAR 0 3
51580: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
51581: LD_INT 0
51583: PPUSH
// uc_side := side ;
51584: LD_ADDR_OWVAR 20
51588: PUSH
51589: LD_VAR 0 1
51593: ST_TO_ADDR
// uc_nation := 3 ;
51594: LD_ADDR_OWVAR 21
51598: PUSH
51599: LD_INT 3
51601: ST_TO_ADDR
// vc_chassis := 25 ;
51602: LD_ADDR_OWVAR 37
51606: PUSH
51607: LD_INT 25
51609: ST_TO_ADDR
// vc_engine := engine_siberite ;
51610: LD_ADDR_OWVAR 39
51614: PUSH
51615: LD_INT 3
51617: ST_TO_ADDR
// vc_control := control_computer ;
51618: LD_ADDR_OWVAR 38
51622: PUSH
51623: LD_INT 3
51625: ST_TO_ADDR
// vc_weapon := 59 ;
51626: LD_ADDR_OWVAR 40
51630: PUSH
51631: LD_INT 59
51633: ST_TO_ADDR
// result := CreateVehicle ;
51634: LD_ADDR_VAR 0 5
51638: PUSH
51639: CALL_OW 45
51643: ST_TO_ADDR
// SetDir ( result , d ) ;
51644: LD_VAR 0 5
51648: PPUSH
51649: LD_VAR 0 4
51653: PPUSH
51654: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
51658: LD_VAR 0 5
51662: PPUSH
51663: LD_VAR 0 2
51667: PPUSH
51668: LD_VAR 0 3
51672: PPUSH
51673: LD_INT 0
51675: PPUSH
51676: CALL_OW 48
// end ;
51680: LD_VAR 0 5
51684: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
51685: LD_INT 0
51687: PPUSH
51688: PPUSH
51689: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
51690: LD_ADDR_VAR 0 2
51694: PUSH
51695: LD_INT 0
51697: PUSH
51698: LD_INT 0
51700: PUSH
51701: LD_INT 0
51703: PUSH
51704: LD_INT 0
51706: PUSH
51707: EMPTY
51708: LIST
51709: LIST
51710: LIST
51711: LIST
51712: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
51713: LD_VAR 0 1
51717: NOT
51718: IFTRUE 51751
51720: PUSH
51721: LD_VAR 0 1
51725: PPUSH
51726: CALL_OW 264
51730: PUSH
51731: LD_INT 12
51733: PUSH
51734: LD_INT 51
51736: PUSH
51737: LD_INT 32
51739: PUSH
51740: LD_INT 89
51742: PUSH
51743: EMPTY
51744: LIST
51745: LIST
51746: LIST
51747: LIST
51748: IN
51749: NOT
51750: OR
51751: IFFALSE 51755
// exit ;
51753: GO 51853
// for i := 1 to 3 do
51755: LD_ADDR_VAR 0 3
51759: PUSH
51760: DOUBLE
51761: LD_INT 1
51763: DEC
51764: ST_TO_ADDR
51765: LD_INT 3
51767: PUSH
51768: FOR_TO
51769: IFFALSE 51851
// begin tmp := GetCargo ( cargo , i ) ;
51771: LD_ADDR_VAR 0 4
51775: PUSH
51776: LD_VAR 0 1
51780: PPUSH
51781: LD_VAR 0 3
51785: PPUSH
51786: CALL_OW 289
51790: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
51791: LD_ADDR_VAR 0 2
51795: PUSH
51796: LD_VAR 0 2
51800: PPUSH
51801: LD_VAR 0 3
51805: PPUSH
51806: LD_VAR 0 4
51810: PPUSH
51811: CALL_OW 1
51815: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
51816: LD_ADDR_VAR 0 2
51820: PUSH
51821: LD_VAR 0 2
51825: PPUSH
51826: LD_INT 4
51828: PPUSH
51829: LD_VAR 0 2
51833: PUSH
51834: LD_INT 4
51836: ARRAY
51837: PUSH
51838: LD_VAR 0 4
51842: PLUS
51843: PPUSH
51844: CALL_OW 1
51848: ST_TO_ADDR
// end ;
51849: GO 51768
51851: POP
51852: POP
// end ;
51853: LD_VAR 0 2
51857: RET
// export function Length ( array ) ; begin
51858: LD_INT 0
51860: PPUSH
// result := array + 0 ;
51861: LD_ADDR_VAR 0 2
51865: PUSH
51866: LD_VAR 0 1
51870: PUSH
51871: LD_INT 0
51873: PLUS
51874: ST_TO_ADDR
// end ;
51875: LD_VAR 0 2
51879: RET
// export function PrepareArray ( array ) ; begin
51880: LD_INT 0
51882: PPUSH
// result := array diff 0 ;
51883: LD_ADDR_VAR 0 2
51887: PUSH
51888: LD_VAR 0 1
51892: PUSH
51893: LD_INT 0
51895: DIFF
51896: ST_TO_ADDR
// if not result [ 1 ] then
51897: LD_VAR 0 2
51901: PUSH
51902: LD_INT 1
51904: ARRAY
51905: NOT
51906: IFFALSE 51926
// result := Delete ( result , 1 ) ;
51908: LD_ADDR_VAR 0 2
51912: PUSH
51913: LD_VAR 0 2
51917: PPUSH
51918: LD_INT 1
51920: PPUSH
51921: CALL_OW 3
51925: ST_TO_ADDR
// end ;
51926: LD_VAR 0 2
51930: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
51931: LD_INT 0
51933: PPUSH
51934: PPUSH
51935: PPUSH
51936: PPUSH
// sibRocketRange := 25 ;
51937: LD_ADDR_VAR 0 6
51941: PUSH
51942: LD_INT 25
51944: ST_TO_ADDR
// result := false ;
51945: LD_ADDR_VAR 0 4
51949: PUSH
51950: LD_INT 0
51952: ST_TO_ADDR
// for i := 0 to 5 do
51953: LD_ADDR_VAR 0 5
51957: PUSH
51958: DOUBLE
51959: LD_INT 0
51961: DEC
51962: ST_TO_ADDR
51963: LD_INT 5
51965: PUSH
51966: FOR_TO
51967: IFFALSE 52034
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
51969: LD_VAR 0 1
51973: PPUSH
51974: LD_VAR 0 5
51978: PPUSH
51979: LD_VAR 0 6
51983: PPUSH
51984: CALL_OW 272
51988: PPUSH
51989: LD_VAR 0 2
51993: PPUSH
51994: LD_VAR 0 5
51998: PPUSH
51999: LD_VAR 0 6
52003: PPUSH
52004: CALL_OW 273
52008: PPUSH
52009: LD_VAR 0 3
52013: PPUSH
52014: CALL_OW 309
52018: IFFALSE 52032
// begin result := true ;
52020: LD_ADDR_VAR 0 4
52024: PUSH
52025: LD_INT 1
52027: ST_TO_ADDR
// exit ;
52028: POP
52029: POP
52030: GO 52036
// end ;
52032: GO 51966
52034: POP
52035: POP
// end ;
52036: LD_VAR 0 4
52040: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
52041: LD_INT 0
52043: PPUSH
52044: PPUSH
52045: PPUSH
// if btype = b_depot then
52046: LD_VAR 0 2
52050: PUSH
52051: LD_INT 0
52053: EQUAL
52054: IFFALSE 52066
// begin result := true ;
52056: LD_ADDR_VAR 0 3
52060: PUSH
52061: LD_INT 1
52063: ST_TO_ADDR
// exit ;
52064: GO 52186
// end ; pom := GetBase ( depot ) ;
52066: LD_ADDR_VAR 0 4
52070: PUSH
52071: LD_VAR 0 1
52075: PPUSH
52076: CALL_OW 274
52080: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
52081: LD_ADDR_VAR 0 5
52085: PUSH
52086: LD_VAR 0 2
52090: PPUSH
52091: LD_VAR 0 1
52095: PPUSH
52096: CALL_OW 248
52100: PPUSH
52101: CALL_OW 450
52105: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
52106: LD_ADDR_VAR 0 3
52110: PUSH
52111: LD_VAR 0 4
52115: PPUSH
52116: LD_INT 1
52118: PPUSH
52119: CALL_OW 275
52123: PUSH
52124: LD_VAR 0 5
52128: PUSH
52129: LD_INT 1
52131: ARRAY
52132: GREATEREQUAL
52133: IFFALSE 52159
52135: PUSH
52136: LD_VAR 0 4
52140: PPUSH
52141: LD_INT 2
52143: PPUSH
52144: CALL_OW 275
52148: PUSH
52149: LD_VAR 0 5
52153: PUSH
52154: LD_INT 2
52156: ARRAY
52157: GREATEREQUAL
52158: AND
52159: IFFALSE 52185
52161: PUSH
52162: LD_VAR 0 4
52166: PPUSH
52167: LD_INT 3
52169: PPUSH
52170: CALL_OW 275
52174: PUSH
52175: LD_VAR 0 5
52179: PUSH
52180: LD_INT 3
52182: ARRAY
52183: GREATEREQUAL
52184: AND
52185: ST_TO_ADDR
// end ;
52186: LD_VAR 0 3
52190: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
52191: LD_INT 0
52193: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
52194: LD_VAR 0 1
52198: PPUSH
52199: LD_VAR 0 2
52203: PPUSH
52204: LD_INT 0
52206: PPUSH
52207: LD_INT 0
52209: PPUSH
52210: LD_INT 1
52212: PPUSH
52213: LD_INT 0
52215: PPUSH
52216: CALL_OW 587
// end ;
52220: LD_VAR 0 3
52224: RET
// export function CenterOnNow ( unit ) ; begin
52225: LD_INT 0
52227: PPUSH
// result := IsInUnit ( unit ) ;
52228: LD_ADDR_VAR 0 2
52232: PUSH
52233: LD_VAR 0 1
52237: PPUSH
52238: CALL_OW 310
52242: ST_TO_ADDR
// if not result then
52243: LD_VAR 0 2
52247: NOT
52248: IFFALSE 52260
// result := unit ;
52250: LD_ADDR_VAR 0 2
52254: PUSH
52255: LD_VAR 0 1
52259: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
52260: LD_VAR 0 1
52264: PPUSH
52265: CALL_OW 87
// end ;
52269: LD_VAR 0 2
52273: RET
// export function ComMoveHex ( unit , hex ) ; begin
52274: LD_INT 0
52276: PPUSH
// if not hex then
52277: LD_VAR 0 2
52281: NOT
52282: IFFALSE 52286
// exit ;
52284: GO 52339
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
52286: LD_VAR 0 2
52290: PUSH
52291: LD_INT 1
52293: ARRAY
52294: PPUSH
52295: LD_VAR 0 2
52299: PUSH
52300: LD_INT 2
52302: ARRAY
52303: PPUSH
52304: CALL_OW 428
52308: IFFALSE 52312
// exit ;
52310: GO 52339
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
52312: LD_VAR 0 1
52316: PPUSH
52317: LD_VAR 0 2
52321: PUSH
52322: LD_INT 1
52324: ARRAY
52325: PPUSH
52326: LD_VAR 0 2
52330: PUSH
52331: LD_INT 2
52333: ARRAY
52334: PPUSH
52335: CALL_OW 111
// end ;
52339: LD_VAR 0 3
52343: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
52344: LD_INT 0
52346: PPUSH
52347: PPUSH
52348: PPUSH
// if not unit or not enemy then
52349: LD_VAR 0 1
52353: NOT
52354: IFTRUE 52363
52356: PUSH
52357: LD_VAR 0 2
52361: NOT
52362: OR
52363: IFFALSE 52367
// exit ;
52365: GO 52493
// x := GetX ( enemy ) ;
52367: LD_ADDR_VAR 0 4
52371: PUSH
52372: LD_VAR 0 2
52376: PPUSH
52377: CALL_OW 250
52381: ST_TO_ADDR
// y := GetY ( enemy ) ;
52382: LD_ADDR_VAR 0 5
52386: PUSH
52387: LD_VAR 0 2
52391: PPUSH
52392: CALL_OW 251
52396: ST_TO_ADDR
// if ValidHex ( x , y ) then
52397: LD_VAR 0 4
52401: PPUSH
52402: LD_VAR 0 5
52406: PPUSH
52407: CALL_OW 488
52411: IFFALSE 52493
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
52413: LD_VAR 0 2
52417: PPUSH
52418: CALL_OW 247
52422: PUSH
52423: LD_INT 3
52425: PUSH
52426: LD_INT 2
52428: PUSH
52429: EMPTY
52430: LIST
52431: LIST
52432: IN
52433: IFTRUE 52456
52435: PUSH
52436: LD_VAR 0 1
52440: PPUSH
52441: CALL_OW 255
52445: PPUSH
52446: LD_VAR 0 2
52450: PPUSH
52451: CALL_OW 292
52455: OR
52456: IFFALSE 52474
// ComAttackUnit ( unit , enemy ) else
52458: LD_VAR 0 1
52462: PPUSH
52463: LD_VAR 0 2
52467: PPUSH
52468: CALL_OW 115
52472: GO 52493
// ComAgressiveMove ( unit , x , y ) ;
52474: LD_VAR 0 1
52478: PPUSH
52479: LD_VAR 0 4
52483: PPUSH
52484: LD_VAR 0 5
52488: PPUSH
52489: CALL_OW 114
// end ;
52493: LD_VAR 0 3
52497: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
52498: LD_INT 0
52500: PPUSH
52501: PPUSH
52502: PPUSH
// list := AreaToList ( area , 0 ) ;
52503: LD_ADDR_VAR 0 5
52507: PUSH
52508: LD_VAR 0 1
52512: PPUSH
52513: LD_INT 0
52515: PPUSH
52516: CALL_OW 517
52520: ST_TO_ADDR
// if not list then
52521: LD_VAR 0 5
52525: NOT
52526: IFFALSE 52530
// exit ;
52528: GO 52660
// if all then
52530: LD_VAR 0 2
52534: IFFALSE 52622
// begin for i := 1 to list [ 1 ] do
52536: LD_ADDR_VAR 0 4
52540: PUSH
52541: DOUBLE
52542: LD_INT 1
52544: DEC
52545: ST_TO_ADDR
52546: LD_VAR 0 5
52550: PUSH
52551: LD_INT 1
52553: ARRAY
52554: PUSH
52555: FOR_TO
52556: IFFALSE 52618
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
52558: LD_ADDR_VAR 0 3
52562: PUSH
52563: LD_VAR 0 3
52567: PPUSH
52568: LD_VAR 0 3
52572: PUSH
52573: LD_INT 1
52575: PLUS
52576: PPUSH
52577: LD_VAR 0 5
52581: PUSH
52582: LD_INT 1
52584: ARRAY
52585: PUSH
52586: LD_VAR 0 4
52590: ARRAY
52591: PUSH
52592: LD_VAR 0 5
52596: PUSH
52597: LD_INT 2
52599: ARRAY
52600: PUSH
52601: LD_VAR 0 4
52605: ARRAY
52606: PUSH
52607: EMPTY
52608: LIST
52609: LIST
52610: PPUSH
52611: CALL_OW 1
52615: ST_TO_ADDR
52616: GO 52555
52618: POP
52619: POP
// exit ;
52620: GO 52660
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
52622: LD_ADDR_VAR 0 3
52626: PUSH
52627: LD_VAR 0 5
52631: PUSH
52632: LD_INT 1
52634: ARRAY
52635: PUSH
52636: LD_INT 1
52638: ARRAY
52639: PUSH
52640: LD_VAR 0 5
52644: PUSH
52645: LD_INT 2
52647: ARRAY
52648: PUSH
52649: LD_INT 1
52651: ARRAY
52652: PUSH
52653: EMPTY
52654: LIST
52655: LIST
52656: PUSH
52657: EMPTY
52658: LIST
52659: ST_TO_ADDR
// end ;
52660: LD_VAR 0 3
52664: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
52665: LD_INT 0
52667: PPUSH
52668: PPUSH
// list := AreaToList ( area , 0 ) ;
52669: LD_ADDR_VAR 0 4
52673: PUSH
52674: LD_VAR 0 1
52678: PPUSH
52679: LD_INT 0
52681: PPUSH
52682: CALL_OW 517
52686: ST_TO_ADDR
// if not list then
52687: LD_VAR 0 4
52691: NOT
52692: IFFALSE 52696
// exit ;
52694: GO 52737
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
52696: LD_ADDR_VAR 0 3
52700: PUSH
52701: LD_VAR 0 4
52705: PUSH
52706: LD_INT 1
52708: ARRAY
52709: PUSH
52710: LD_INT 1
52712: ARRAY
52713: PUSH
52714: LD_VAR 0 4
52718: PUSH
52719: LD_INT 2
52721: ARRAY
52722: PUSH
52723: LD_INT 1
52725: ARRAY
52726: PUSH
52727: LD_VAR 0 2
52731: PUSH
52732: EMPTY
52733: LIST
52734: LIST
52735: LIST
52736: ST_TO_ADDR
// end ;
52737: LD_VAR 0 3
52741: RET
// export function First ( array ) ; begin
52742: LD_INT 0
52744: PPUSH
// if not array then
52745: LD_VAR 0 1
52749: NOT
52750: IFFALSE 52754
// exit ;
52752: GO 52768
// result := array [ 1 ] ;
52754: LD_ADDR_VAR 0 2
52758: PUSH
52759: LD_VAR 0 1
52763: PUSH
52764: LD_INT 1
52766: ARRAY
52767: ST_TO_ADDR
// end ;
52768: LD_VAR 0 2
52772: RET
// export function Last ( array ) ; begin
52773: LD_INT 0
52775: PPUSH
// if not array then
52776: LD_VAR 0 1
52780: NOT
52781: IFFALSE 52785
// exit ;
52783: GO 52801
// result := array [ array ] ;
52785: LD_ADDR_VAR 0 2
52789: PUSH
52790: LD_VAR 0 1
52794: PUSH
52795: LD_VAR 0 1
52799: ARRAY
52800: ST_TO_ADDR
// end ;
52801: LD_VAR 0 2
52805: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
52806: LD_INT 0
52808: PPUSH
52809: PPUSH
// result := [ ] ;
52810: LD_ADDR_VAR 0 5
52814: PUSH
52815: EMPTY
52816: ST_TO_ADDR
// if not array then
52817: LD_VAR 0 1
52821: NOT
52822: IFFALSE 52826
// exit ;
52824: GO 52938
// for i := 1 to array do
52826: LD_ADDR_VAR 0 6
52830: PUSH
52831: DOUBLE
52832: LD_INT 1
52834: DEC
52835: ST_TO_ADDR
52836: LD_VAR 0 1
52840: PUSH
52841: FOR_TO
52842: IFFALSE 52936
// if array [ i ] [ index ] = value then
52844: LD_VAR 0 1
52848: PUSH
52849: LD_VAR 0 6
52853: ARRAY
52854: PUSH
52855: LD_VAR 0 2
52859: ARRAY
52860: PUSH
52861: LD_VAR 0 3
52865: EQUAL
52866: IFFALSE 52934
// begin if indexColumn then
52868: LD_VAR 0 4
52872: IFFALSE 52908
// result := Join ( result , array [ i ] [ indexColumn ] ) else
52874: LD_ADDR_VAR 0 5
52878: PUSH
52879: LD_VAR 0 5
52883: PPUSH
52884: LD_VAR 0 1
52888: PUSH
52889: LD_VAR 0 6
52893: ARRAY
52894: PUSH
52895: LD_VAR 0 4
52899: ARRAY
52900: PPUSH
52901: CALL 47946 0 2
52905: ST_TO_ADDR
52906: GO 52934
// result := Join ( result , array [ i ] ) ;
52908: LD_ADDR_VAR 0 5
52912: PUSH
52913: LD_VAR 0 5
52917: PPUSH
52918: LD_VAR 0 1
52922: PUSH
52923: LD_VAR 0 6
52927: ARRAY
52928: PPUSH
52929: CALL 47946 0 2
52933: ST_TO_ADDR
// end ;
52934: GO 52841
52936: POP
52937: POP
// end ;
52938: LD_VAR 0 5
52942: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
52943: LD_INT 0
52945: PPUSH
// if not vehicles or not parkingPoint then
52946: LD_VAR 0 1
52950: NOT
52951: IFTRUE 52960
52953: PUSH
52954: LD_VAR 0 2
52958: NOT
52959: OR
52960: IFFALSE 52964
// exit ;
52962: GO 53062
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
52964: LD_ADDR_VAR 0 1
52968: PUSH
52969: LD_VAR 0 1
52973: PPUSH
52974: LD_INT 50
52976: PUSH
52977: EMPTY
52978: LIST
52979: PUSH
52980: LD_INT 3
52982: PUSH
52983: LD_INT 92
52985: PUSH
52986: LD_VAR 0 2
52990: PUSH
52991: LD_INT 1
52993: ARRAY
52994: PUSH
52995: LD_VAR 0 2
52999: PUSH
53000: LD_INT 2
53002: ARRAY
53003: PUSH
53004: LD_INT 8
53006: PUSH
53007: EMPTY
53008: LIST
53009: LIST
53010: LIST
53011: LIST
53012: PUSH
53013: EMPTY
53014: LIST
53015: LIST
53016: PUSH
53017: EMPTY
53018: LIST
53019: LIST
53020: PPUSH
53021: CALL_OW 72
53025: ST_TO_ADDR
// if not vehicles then
53026: LD_VAR 0 1
53030: NOT
53031: IFFALSE 53035
// exit ;
53033: GO 53062
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
53035: LD_VAR 0 1
53039: PPUSH
53040: LD_VAR 0 2
53044: PUSH
53045: LD_INT 1
53047: ARRAY
53048: PPUSH
53049: LD_VAR 0 2
53053: PUSH
53054: LD_INT 2
53056: ARRAY
53057: PPUSH
53058: CALL_OW 111
// end ;
53062: LD_VAR 0 3
53066: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
53067: LD_INT 0
53069: PPUSH
53070: PPUSH
53071: PPUSH
// if not side or not area then
53072: LD_VAR 0 1
53076: NOT
53077: IFTRUE 53086
53079: PUSH
53080: LD_VAR 0 2
53084: NOT
53085: OR
53086: IFFALSE 53090
// exit ;
53088: GO 53209
// tmp := AreaToList ( area , 0 ) ;
53090: LD_ADDR_VAR 0 5
53094: PUSH
53095: LD_VAR 0 2
53099: PPUSH
53100: LD_INT 0
53102: PPUSH
53103: CALL_OW 517
53107: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
53108: LD_ADDR_VAR 0 4
53112: PUSH
53113: DOUBLE
53114: LD_INT 1
53116: DEC
53117: ST_TO_ADDR
53118: LD_VAR 0 5
53122: PUSH
53123: LD_INT 1
53125: ARRAY
53126: PUSH
53127: FOR_TO
53128: IFFALSE 53207
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
53130: LD_VAR 0 5
53134: PUSH
53135: LD_INT 1
53137: ARRAY
53138: PUSH
53139: LD_VAR 0 4
53143: ARRAY
53144: PPUSH
53145: LD_VAR 0 5
53149: PUSH
53150: LD_INT 2
53152: ARRAY
53153: PUSH
53154: LD_VAR 0 4
53158: ARRAY
53159: PPUSH
53160: CALL_OW 351
53164: IFFALSE 53205
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
53166: LD_VAR 0 5
53170: PUSH
53171: LD_INT 1
53173: ARRAY
53174: PUSH
53175: LD_VAR 0 4
53179: ARRAY
53180: PPUSH
53181: LD_VAR 0 5
53185: PUSH
53186: LD_INT 2
53188: ARRAY
53189: PUSH
53190: LD_VAR 0 4
53194: ARRAY
53195: PPUSH
53196: LD_VAR 0 1
53200: PPUSH
53201: CALL_OW 244
// end ;
53205: GO 53127
53207: POP
53208: POP
// end ;
53209: LD_VAR 0 3
53213: RET
// export function UniqueArray ( array ) ; var i ; begin
53214: LD_INT 0
53216: PPUSH
53217: PPUSH
// result := [ ] ;
53218: LD_ADDR_VAR 0 2
53222: PUSH
53223: EMPTY
53224: ST_TO_ADDR
// if not array then
53225: LD_VAR 0 1
53229: NOT
53230: IFFALSE 53234
// exit ;
53232: GO 53295
// for i := 1 to array do
53234: LD_ADDR_VAR 0 3
53238: PUSH
53239: DOUBLE
53240: LD_INT 1
53242: DEC
53243: ST_TO_ADDR
53244: LD_VAR 0 1
53248: PUSH
53249: FOR_TO
53250: IFFALSE 53293
// if not array [ i ] in result then
53252: LD_VAR 0 1
53256: PUSH
53257: LD_VAR 0 3
53261: ARRAY
53262: PUSH
53263: LD_VAR 0 2
53267: IN
53268: NOT
53269: IFFALSE 53291
// result := Join ( result , i ) ;
53271: LD_ADDR_VAR 0 2
53275: PUSH
53276: LD_VAR 0 2
53280: PPUSH
53281: LD_VAR 0 3
53285: PPUSH
53286: CALL 47946 0 2
53290: ST_TO_ADDR
53291: GO 53249
53293: POP
53294: POP
// end ; end_of_file
53295: LD_VAR 0 2
53299: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
53300: LD_VAR 0 1
53304: PUSH
53305: LD_INT 200
53307: DOUBLE
53308: GREATEREQUAL
53309: IFFALSE 53317
53311: LD_INT 299
53313: DOUBLE
53314: LESSEQUAL
53315: IFTRUE 53319
53317: GO 53351
53319: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
53320: LD_VAR 0 1
53324: PPUSH
53325: LD_VAR 0 2
53329: PPUSH
53330: LD_VAR 0 3
53334: PPUSH
53335: LD_VAR 0 4
53339: PPUSH
53340: LD_VAR 0 5
53344: PPUSH
53345: CALL 54132 0 5
53349: GO 53428
53351: LD_INT 300
53353: DOUBLE
53354: GREATEREQUAL
53355: IFFALSE 53363
53357: LD_INT 399
53359: DOUBLE
53360: LESSEQUAL
53361: IFTRUE 53365
53363: GO 53427
53365: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
53366: LD_VAR 0 1
53370: PPUSH
53371: LD_VAR 0 2
53375: PPUSH
53376: LD_VAR 0 3
53380: PPUSH
53381: LD_VAR 0 4
53385: PPUSH
53386: LD_VAR 0 5
53390: PPUSH
53391: LD_VAR 0 6
53395: PPUSH
53396: LD_VAR 0 7
53400: PPUSH
53401: LD_VAR 0 8
53405: PPUSH
53406: LD_VAR 0 9
53410: PPUSH
53411: LD_VAR 0 10
53415: PPUSH
53416: LD_VAR 0 11
53420: PPUSH
53421: CALL 61141 0 11
53425: GO 53428
53427: POP
// end ;
53428: PPOPN 11
53430: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
53431: LD_VAR 0 1
53435: PPUSH
53436: LD_VAR 0 2
53440: PPUSH
53441: LD_VAR 0 3
53445: PPUSH
53446: LD_VAR 0 4
53450: PPUSH
53451: LD_VAR 0 5
53455: PPUSH
53456: CALL 53513 0 5
// end ; end_of_file
53460: PPOPN 5
53462: END
// export function SOS_UnitDestroyed ( un ) ; begin
53463: LD_INT 0
53465: PPUSH
// ComRadiation ( un ) ;
53466: LD_VAR 0 1
53470: PPUSH
53471: CALL 54552 0 1
// end ;
53475: LD_VAR 0 2
53479: RET
// export function SOS_UnitKamikazed ( un ) ; begin
53480: LD_INT 0
53482: PPUSH
// ComRadiation ( un ) ;
53483: LD_VAR 0 1
53487: PPUSH
53488: CALL 54552 0 1
// end ;
53492: LD_VAR 0 2
53496: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
53497: LD_INT 0
53499: PPUSH
// end ;
53500: LD_VAR 0 4
53504: RET
// export function SOS_Command ( cmd ) ; begin
53505: LD_INT 0
53507: PPUSH
// end ;
53508: LD_VAR 0 2
53512: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
53513: LD_INT 0
53515: PPUSH
// end ;
53516: LD_VAR 0 6
53520: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , driver , hex ; begin
53521: LD_INT 0
53523: PPUSH
53524: PPUSH
53525: PPUSH
53526: PPUSH
// if not vehicle or not factory then
53527: LD_VAR 0 1
53531: NOT
53532: IFTRUE 53541
53534: PUSH
53535: LD_VAR 0 2
53539: NOT
53540: OR
53541: IFFALSE 53545
// exit ;
53543: GO 54127
// if not factoryWaypoints then
53545: LD_EXP 59
53549: NOT
53550: IFFALSE 53554
// exit ;
53552: GO 54127
// for i := 1 to Count ( factoryWaypoints ) do
53554: LD_ADDR_VAR 0 4
53558: PUSH
53559: DOUBLE
53560: LD_INT 1
53562: DEC
53563: ST_TO_ADDR
53564: LD_EXP 59
53568: PPUSH
53569: CALL 12014 0 1
53573: PUSH
53574: FOR_TO
53575: IFFALSE 54125
// if factoryWaypoints [ i ] [ 2 ] = factory then
53577: LD_EXP 59
53581: PUSH
53582: LD_VAR 0 4
53586: ARRAY
53587: PUSH
53588: LD_INT 2
53590: ARRAY
53591: PUSH
53592: LD_VAR 0 2
53596: EQUAL
53597: IFFALSE 54123
// begin if GetControl ( vehicle ) = control_manual then
53599: LD_VAR 0 1
53603: PPUSH
53604: CALL_OW 263
53608: PUSH
53609: LD_INT 1
53611: EQUAL
53612: IFFALSE 53976
// begin driver := IsDrivenBy ( vehicle ) ;
53614: LD_ADDR_VAR 0 5
53618: PUSH
53619: LD_VAR 0 1
53623: PPUSH
53624: CALL_OW 311
53628: ST_TO_ADDR
// if driver in factoryWaypointsDrivers or vehicle in factoryWaypointsDrivers then
53629: LD_VAR 0 5
53633: PUSH
53634: LD_EXP 60
53638: IN
53639: IFTRUE 53653
53641: PUSH
53642: LD_VAR 0 1
53646: PUSH
53647: LD_EXP 60
53651: IN
53652: OR
53653: IFFALSE 53659
// exit ;
53655: POP
53656: POP
53657: GO 54127
// if not HasTask ( driver ) then
53659: LD_VAR 0 5
53663: PPUSH
53664: CALL_OW 314
53668: NOT
53669: IFFALSE 53974
// begin factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , driver ) ;
53671: LD_ADDR_EXP 60
53675: PUSH
53676: LD_EXP 60
53680: PPUSH
53681: LD_VAR 0 5
53685: PPUSH
53686: CALL 47946 0 2
53690: ST_TO_ADDR
// factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , vehicle ) ;
53691: LD_ADDR_EXP 60
53695: PUSH
53696: LD_EXP 60
53700: PPUSH
53701: LD_VAR 0 1
53705: PPUSH
53706: CALL 47946 0 2
53710: ST_TO_ADDR
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
53711: LD_ADDR_VAR 0 6
53715: PUSH
53716: LD_EXP 59
53720: PUSH
53721: LD_VAR 0 4
53725: ARRAY
53726: PUSH
53727: LD_INT 3
53729: ARRAY
53730: PPUSH
53731: LD_EXP 59
53735: PUSH
53736: LD_VAR 0 4
53740: ARRAY
53741: PUSH
53742: LD_INT 4
53744: ARRAY
53745: PPUSH
53746: CALL_OW 428
53750: ST_TO_ADDR
// if hex then
53751: LD_VAR 0 6
53755: IFFALSE 53773
// ComMoveUnit ( driver , hex ) else
53757: LD_VAR 0 5
53761: PPUSH
53762: LD_VAR 0 6
53766: PPUSH
53767: CALL_OW 112
53771: GO 53857
// if GetDistUnitXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) > 0 then
53773: LD_VAR 0 1
53777: PPUSH
53778: LD_EXP 59
53782: PUSH
53783: LD_VAR 0 4
53787: ARRAY
53788: PUSH
53789: LD_INT 3
53791: ARRAY
53792: PPUSH
53793: LD_EXP 59
53797: PUSH
53798: LD_VAR 0 4
53802: ARRAY
53803: PUSH
53804: LD_INT 4
53806: ARRAY
53807: PPUSH
53808: CALL_OW 297
53812: PUSH
53813: LD_INT 0
53815: GREATER
53816: IFFALSE 53857
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
53818: LD_VAR 0 5
53822: PPUSH
53823: LD_EXP 59
53827: PUSH
53828: LD_VAR 0 4
53832: ARRAY
53833: PUSH
53834: LD_INT 3
53836: ARRAY
53837: PPUSH
53838: LD_EXP 59
53842: PUSH
53843: LD_VAR 0 4
53847: ARRAY
53848: PUSH
53849: LD_INT 4
53851: ARRAY
53852: PPUSH
53853: CALL_OW 111
// AddComExitVehicle ( driver ) ;
53857: LD_VAR 0 5
53861: PPUSH
53862: CALL_OW 181
// if Multiplayer then
53866: LD_OWVAR 4
53870: IFFALSE 53919
// begin repeat wait ( 10 ) ;
53872: LD_INT 10
53874: PPUSH
53875: CALL_OW 67
// until not IsInUnit ( driver ) ;
53879: LD_VAR 0 5
53883: PPUSH
53884: CALL_OW 310
53888: NOT
53889: IFFALSE 53872
// if not HasTask ( driver ) then
53891: LD_VAR 0 5
53895: PPUSH
53896: CALL_OW 314
53900: NOT
53901: IFFALSE 53917
// ComEnterUnit ( driver , factory ) ;
53903: LD_VAR 0 5
53907: PPUSH
53908: LD_VAR 0 2
53912: PPUSH
53913: CALL_OW 120
// end else
53917: GO 53933
// AddComEnterUnit ( driver , factory ) ;
53919: LD_VAR 0 5
53923: PPUSH
53924: LD_VAR 0 2
53928: PPUSH
53929: CALL_OW 180
// wait ( 0 0$1 ) ;
53933: LD_INT 35
53935: PPUSH
53936: CALL_OW 67
// factoryWaypointsDrivers := factoryWaypointsDrivers diff driver ;
53940: LD_ADDR_EXP 60
53944: PUSH
53945: LD_EXP 60
53949: PUSH
53950: LD_VAR 0 5
53954: DIFF
53955: ST_TO_ADDR
// factoryWaypointsDrivers := factoryWaypointsDrivers diff vehicle ;
53956: LD_ADDR_EXP 60
53960: PUSH
53961: LD_EXP 60
53965: PUSH
53966: LD_VAR 0 1
53970: DIFF
53971: ST_TO_ADDR
// break ;
53972: GO 54125
// end ; end else
53974: GO 54123
// if GetControl ( vehicle ) = control_remote then
53976: LD_VAR 0 1
53980: PPUSH
53981: CALL_OW 263
53985: PUSH
53986: LD_INT 2
53988: EQUAL
53989: IFFALSE 54075
// begin wait ( 0 0$2 ) ;
53991: LD_INT 70
53993: PPUSH
53994: CALL_OW 67
// repeat wait ( 10 ) ;
53998: LD_INT 10
54000: PPUSH
54001: CALL_OW 67
// Connect ( vehicle ) ;
54005: LD_VAR 0 1
54009: PPUSH
54010: CALL 18258 0 1
// until IsControledBy ( vehicle ) ;
54014: LD_VAR 0 1
54018: PPUSH
54019: CALL_OW 312
54023: IFFALSE 53998
// wait ( 10 ) ;
54025: LD_INT 10
54027: PPUSH
54028: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
54032: LD_VAR 0 1
54036: PPUSH
54037: LD_EXP 59
54041: PUSH
54042: LD_VAR 0 4
54046: ARRAY
54047: PUSH
54048: LD_INT 3
54050: ARRAY
54051: PPUSH
54052: LD_EXP 59
54056: PUSH
54057: LD_VAR 0 4
54061: ARRAY
54062: PUSH
54063: LD_INT 4
54065: ARRAY
54066: PPUSH
54067: CALL_OW 111
// break ;
54071: GO 54125
// end else
54073: GO 54123
// begin wait ( 0 0$3 ) ;
54075: LD_INT 105
54077: PPUSH
54078: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
54082: LD_VAR 0 1
54086: PPUSH
54087: LD_EXP 59
54091: PUSH
54092: LD_VAR 0 4
54096: ARRAY
54097: PUSH
54098: LD_INT 3
54100: ARRAY
54101: PPUSH
54102: LD_EXP 59
54106: PUSH
54107: LD_VAR 0 4
54111: ARRAY
54112: PUSH
54113: LD_INT 4
54115: ARRAY
54116: PPUSH
54117: CALL_OW 111
// break ;
54121: GO 54125
// end ; end ;
54123: GO 53574
54125: POP
54126: POP
// end ;
54127: LD_VAR 0 3
54131: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
54132: LD_INT 0
54134: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
54135: LD_VAR 0 1
54139: PUSH
54140: LD_INT 250
54142: EQUAL
54143: IFFALSE 54160
54145: PUSH
54146: LD_VAR 0 2
54150: PPUSH
54151: CALL_OW 264
54155: PUSH
54156: LD_INT 81
54158: EQUAL
54159: AND
54160: IFFALSE 54181
// MinerPlaceMine ( unit , x , y ) ;
54162: LD_VAR 0 2
54166: PPUSH
54167: LD_VAR 0 4
54171: PPUSH
54172: LD_VAR 0 5
54176: PPUSH
54177: CALL 57313 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
54181: LD_VAR 0 1
54185: PUSH
54186: LD_INT 251
54188: EQUAL
54189: IFFALSE 54206
54191: PUSH
54192: LD_VAR 0 2
54196: PPUSH
54197: CALL_OW 264
54201: PUSH
54202: LD_INT 81
54204: EQUAL
54205: AND
54206: IFFALSE 54227
// MinerDetonateMine ( unit , x , y ) ;
54208: LD_VAR 0 2
54212: PPUSH
54213: LD_VAR 0 4
54217: PPUSH
54218: LD_VAR 0 5
54222: PPUSH
54223: CALL 57592 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
54227: LD_VAR 0 1
54231: PUSH
54232: LD_INT 252
54234: EQUAL
54235: IFFALSE 54252
54237: PUSH
54238: LD_VAR 0 2
54242: PPUSH
54243: CALL_OW 264
54247: PUSH
54248: LD_INT 81
54250: EQUAL
54251: AND
54252: IFFALSE 54273
// MinerCreateMinefield ( unit , x , y ) ;
54254: LD_VAR 0 2
54258: PPUSH
54259: LD_VAR 0 4
54263: PPUSH
54264: LD_VAR 0 5
54268: PPUSH
54269: CALL 58011 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
54273: LD_VAR 0 1
54277: PUSH
54278: LD_INT 253
54280: EQUAL
54281: IFFALSE 54298
54283: PUSH
54284: LD_VAR 0 2
54288: PPUSH
54289: CALL_OW 257
54293: PUSH
54294: LD_INT 5
54296: EQUAL
54297: AND
54298: IFFALSE 54319
// ComBinocular ( unit , x , y ) ;
54300: LD_VAR 0 2
54304: PPUSH
54305: LD_VAR 0 4
54309: PPUSH
54310: LD_VAR 0 5
54314: PPUSH
54315: CALL 58386 0 3
// if selectedUnit then
54319: LD_VAR 0 3
54323: IFFALSE 54383
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
54325: LD_VAR 0 1
54329: PUSH
54330: LD_INT 254
54332: EQUAL
54333: IFFALSE 54350
54335: PUSH
54336: LD_VAR 0 2
54340: PPUSH
54341: CALL_OW 264
54345: PUSH
54346: LD_INT 99
54348: EQUAL
54349: AND
54350: IFFALSE 54367
54352: PUSH
54353: LD_VAR 0 3
54357: PPUSH
54358: CALL_OW 263
54362: PUSH
54363: LD_INT 3
54365: EQUAL
54366: AND
54367: IFFALSE 54383
// HackDestroyVehicle ( unit , selectedUnit ) ;
54369: LD_VAR 0 2
54373: PPUSH
54374: LD_VAR 0 3
54378: PPUSH
54379: CALL 56673 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
54383: LD_VAR 0 1
54387: PUSH
54388: LD_INT 255
54390: EQUAL
54391: IFFALSE 54415
54393: PUSH
54394: LD_VAR 0 2
54398: PPUSH
54399: CALL_OW 264
54403: PUSH
54404: LD_INT 14
54406: PUSH
54407: LD_INT 53
54409: PUSH
54410: EMPTY
54411: LIST
54412: LIST
54413: IN
54414: AND
54415: IFFALSE 54433
54417: PUSH
54418: LD_VAR 0 4
54422: PPUSH
54423: LD_VAR 0 5
54427: PPUSH
54428: CALL_OW 488
54432: AND
54433: IFFALSE 54457
// CutTreeXYR ( unit , x , y , 12 ) ;
54435: LD_VAR 0 2
54439: PPUSH
54440: LD_VAR 0 4
54444: PPUSH
54445: LD_VAR 0 5
54449: PPUSH
54450: LD_INT 12
54452: PPUSH
54453: CALL 54648 0 4
// if cmd = 256 then
54457: LD_VAR 0 1
54461: PUSH
54462: LD_INT 256
54464: EQUAL
54465: IFFALSE 54486
// SetFactoryWaypoint ( unit , x , y ) ;
54467: LD_VAR 0 2
54471: PPUSH
54472: LD_VAR 0 4
54476: PPUSH
54477: LD_VAR 0 5
54481: PPUSH
54482: CALL 61149 0 3
// if cmd = 257 then
54486: LD_VAR 0 1
54490: PUSH
54491: LD_INT 257
54493: EQUAL
54494: IFFALSE 54515
// SetWarehouseGatheringPoint ( unit , x , y ) ;
54496: LD_VAR 0 2
54500: PPUSH
54501: LD_VAR 0 4
54505: PPUSH
54506: LD_VAR 0 5
54510: PPUSH
54511: CALL 61645 0 3
// if cmd = 258 then
54515: LD_VAR 0 1
54519: PUSH
54520: LD_INT 258
54522: EQUAL
54523: IFFALSE 54547
// BurnTreeXYR ( unit , x , y , 8 ) ;
54525: LD_VAR 0 2
54529: PPUSH
54530: LD_VAR 0 4
54534: PPUSH
54535: LD_VAR 0 5
54539: PPUSH
54540: LD_INT 8
54542: PPUSH
54543: CALL 55048 0 4
// end ;
54547: LD_VAR 0 6
54551: RET
// export function ComRadiation ( un ) ; var eff ; begin
54552: LD_INT 0
54554: PPUSH
54555: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
54556: LD_VAR 0 1
54560: PPUSH
54561: CALL_OW 264
54565: PUSH
54566: LD_INT 91
54568: NONEQUAL
54569: IFFALSE 54573
// exit ;
54571: GO 54643
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
54573: LD_INT 68
54575: PPUSH
54576: LD_VAR 0 1
54580: PPUSH
54581: CALL_OW 255
54585: PPUSH
54586: CALL_OW 321
54590: PUSH
54591: LD_INT 2
54593: EQUAL
54594: IFFALSE 54606
// eff := 50 else
54596: LD_ADDR_VAR 0 3
54600: PUSH
54601: LD_INT 50
54603: ST_TO_ADDR
54604: GO 54614
// eff := 25 ;
54606: LD_ADDR_VAR 0 3
54610: PUSH
54611: LD_INT 25
54613: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
54614: LD_VAR 0 1
54618: PPUSH
54619: CALL_OW 250
54623: PPUSH
54624: LD_VAR 0 1
54628: PPUSH
54629: CALL_OW 251
54633: PPUSH
54634: LD_VAR 0 3
54638: PPUSH
54639: CALL_OW 495
// end ;
54643: LD_VAR 0 2
54647: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
54648: LD_INT 0
54650: PPUSH
54651: PPUSH
54652: PPUSH
54653: PPUSH
54654: PPUSH
54655: PPUSH
54656: PPUSH
54657: PPUSH
54658: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
54659: LD_VAR 0 1
54663: PPUSH
54664: CALL_OW 302
54668: NOT
54669: IFTRUE 54688
54671: PUSH
54672: LD_VAR 0 2
54676: PPUSH
54677: LD_VAR 0 3
54681: PPUSH
54682: CALL_OW 488
54686: NOT
54687: OR
54688: IFTRUE 54697
54690: PUSH
54691: LD_VAR 0 4
54695: NOT
54696: OR
54697: IFFALSE 54701
// exit ;
54699: GO 55043
// list := [ ] ;
54701: LD_ADDR_VAR 0 13
54705: PUSH
54706: EMPTY
54707: ST_TO_ADDR
// if x - r < 0 then
54708: LD_VAR 0 2
54712: PUSH
54713: LD_VAR 0 4
54717: MINUS
54718: PUSH
54719: LD_INT 0
54721: LESS
54722: IFFALSE 54734
// min_x := 0 else
54724: LD_ADDR_VAR 0 7
54728: PUSH
54729: LD_INT 0
54731: ST_TO_ADDR
54732: GO 54750
// min_x := x - r ;
54734: LD_ADDR_VAR 0 7
54738: PUSH
54739: LD_VAR 0 2
54743: PUSH
54744: LD_VAR 0 4
54748: MINUS
54749: ST_TO_ADDR
// if y - r < 0 then
54750: LD_VAR 0 3
54754: PUSH
54755: LD_VAR 0 4
54759: MINUS
54760: PUSH
54761: LD_INT 0
54763: LESS
54764: IFFALSE 54776
// min_y := 0 else
54766: LD_ADDR_VAR 0 8
54770: PUSH
54771: LD_INT 0
54773: ST_TO_ADDR
54774: GO 54792
// min_y := y - r ;
54776: LD_ADDR_VAR 0 8
54780: PUSH
54781: LD_VAR 0 3
54785: PUSH
54786: LD_VAR 0 4
54790: MINUS
54791: ST_TO_ADDR
// max_x := x + r ;
54792: LD_ADDR_VAR 0 9
54796: PUSH
54797: LD_VAR 0 2
54801: PUSH
54802: LD_VAR 0 4
54806: PLUS
54807: ST_TO_ADDR
// max_y := y + r ;
54808: LD_ADDR_VAR 0 10
54812: PUSH
54813: LD_VAR 0 3
54817: PUSH
54818: LD_VAR 0 4
54822: PLUS
54823: ST_TO_ADDR
// for _x = min_x to max_x do
54824: LD_ADDR_VAR 0 11
54828: PUSH
54829: DOUBLE
54830: LD_VAR 0 7
54834: DEC
54835: ST_TO_ADDR
54836: LD_VAR 0 9
54840: PUSH
54841: FOR_TO
54842: IFFALSE 54961
// for _y = min_y to max_y do
54844: LD_ADDR_VAR 0 12
54848: PUSH
54849: DOUBLE
54850: LD_VAR 0 8
54854: DEC
54855: ST_TO_ADDR
54856: LD_VAR 0 10
54860: PUSH
54861: FOR_TO
54862: IFFALSE 54957
// begin if not ValidHex ( _x , _y ) then
54864: LD_VAR 0 11
54868: PPUSH
54869: LD_VAR 0 12
54873: PPUSH
54874: CALL_OW 488
54878: NOT
54879: IFFALSE 54883
// continue ;
54881: GO 54861
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
54883: LD_VAR 0 11
54887: PPUSH
54888: LD_VAR 0 12
54892: PPUSH
54893: CALL_OW 351
54897: IFFALSE 54915
54899: PUSH
54900: LD_VAR 0 11
54904: PPUSH
54905: LD_VAR 0 12
54909: PPUSH
54910: CALL_OW 554
54914: AND
54915: IFFALSE 54955
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
54917: LD_ADDR_VAR 0 13
54921: PUSH
54922: LD_VAR 0 13
54926: PPUSH
54927: LD_VAR 0 13
54931: PUSH
54932: LD_INT 1
54934: PLUS
54935: PPUSH
54936: LD_VAR 0 11
54940: PUSH
54941: LD_VAR 0 12
54945: PUSH
54946: EMPTY
54947: LIST
54948: LIST
54949: PPUSH
54950: CALL_OW 2
54954: ST_TO_ADDR
// end ;
54955: GO 54861
54957: POP
54958: POP
54959: GO 54841
54961: POP
54962: POP
// if not list then
54963: LD_VAR 0 13
54967: NOT
54968: IFFALSE 54972
// exit ;
54970: GO 55043
// for i in list do
54972: LD_ADDR_VAR 0 6
54976: PUSH
54977: LD_VAR 0 13
54981: PUSH
54982: FOR_IN
54983: IFFALSE 55041
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
54985: LD_VAR 0 1
54989: PPUSH
54990: LD_STRING M
54992: PUSH
54993: LD_VAR 0 6
54997: PUSH
54998: LD_INT 1
55000: ARRAY
55001: PUSH
55002: LD_VAR 0 6
55006: PUSH
55007: LD_INT 2
55009: ARRAY
55010: PUSH
55011: LD_INT 0
55013: PUSH
55014: LD_INT 0
55016: PUSH
55017: LD_INT 0
55019: PUSH
55020: LD_INT 0
55022: PUSH
55023: EMPTY
55024: LIST
55025: LIST
55026: LIST
55027: LIST
55028: LIST
55029: LIST
55030: LIST
55031: PUSH
55032: EMPTY
55033: LIST
55034: PPUSH
55035: CALL_OW 447
55039: GO 54982
55041: POP
55042: POP
// end ;
55043: LD_VAR 0 5
55047: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
55048: LD_INT 0
55050: PPUSH
55051: PPUSH
55052: PPUSH
55053: PPUSH
55054: PPUSH
55055: PPUSH
55056: PPUSH
55057: PPUSH
55058: PPUSH
55059: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
55060: LD_VAR 0 1
55064: PPUSH
55065: CALL_OW 302
55069: NOT
55070: IFTRUE 55089
55072: PUSH
55073: LD_VAR 0 2
55077: PPUSH
55078: LD_VAR 0 3
55082: PPUSH
55083: CALL_OW 488
55087: NOT
55088: OR
55089: IFTRUE 55098
55091: PUSH
55092: LD_VAR 0 4
55096: NOT
55097: OR
55098: IFFALSE 55102
// exit ;
55100: GO 55619
// list := [ ] ;
55102: LD_ADDR_VAR 0 13
55106: PUSH
55107: EMPTY
55108: ST_TO_ADDR
// if x - r < 0 then
55109: LD_VAR 0 2
55113: PUSH
55114: LD_VAR 0 4
55118: MINUS
55119: PUSH
55120: LD_INT 0
55122: LESS
55123: IFFALSE 55135
// min_x := 0 else
55125: LD_ADDR_VAR 0 7
55129: PUSH
55130: LD_INT 0
55132: ST_TO_ADDR
55133: GO 55151
// min_x := x - r ;
55135: LD_ADDR_VAR 0 7
55139: PUSH
55140: LD_VAR 0 2
55144: PUSH
55145: LD_VAR 0 4
55149: MINUS
55150: ST_TO_ADDR
// if y - r < 0 then
55151: LD_VAR 0 3
55155: PUSH
55156: LD_VAR 0 4
55160: MINUS
55161: PUSH
55162: LD_INT 0
55164: LESS
55165: IFFALSE 55177
// min_y := 0 else
55167: LD_ADDR_VAR 0 8
55171: PUSH
55172: LD_INT 0
55174: ST_TO_ADDR
55175: GO 55193
// min_y := y - r ;
55177: LD_ADDR_VAR 0 8
55181: PUSH
55182: LD_VAR 0 3
55186: PUSH
55187: LD_VAR 0 4
55191: MINUS
55192: ST_TO_ADDR
// max_x := x + r ;
55193: LD_ADDR_VAR 0 9
55197: PUSH
55198: LD_VAR 0 2
55202: PUSH
55203: LD_VAR 0 4
55207: PLUS
55208: ST_TO_ADDR
// max_y := y + r ;
55209: LD_ADDR_VAR 0 10
55213: PUSH
55214: LD_VAR 0 3
55218: PUSH
55219: LD_VAR 0 4
55223: PLUS
55224: ST_TO_ADDR
// for _x = min_x to max_x do
55225: LD_ADDR_VAR 0 11
55229: PUSH
55230: DOUBLE
55231: LD_VAR 0 7
55235: DEC
55236: ST_TO_ADDR
55237: LD_VAR 0 9
55241: PUSH
55242: FOR_TO
55243: IFFALSE 55362
// for _y = min_y to max_y do
55245: LD_ADDR_VAR 0 12
55249: PUSH
55250: DOUBLE
55251: LD_VAR 0 8
55255: DEC
55256: ST_TO_ADDR
55257: LD_VAR 0 10
55261: PUSH
55262: FOR_TO
55263: IFFALSE 55358
// begin if not ValidHex ( _x , _y ) then
55265: LD_VAR 0 11
55269: PPUSH
55270: LD_VAR 0 12
55274: PPUSH
55275: CALL_OW 488
55279: NOT
55280: IFFALSE 55284
// continue ;
55282: GO 55262
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
55284: LD_VAR 0 11
55288: PPUSH
55289: LD_VAR 0 12
55293: PPUSH
55294: CALL_OW 351
55298: IFFALSE 55316
55300: PUSH
55301: LD_VAR 0 11
55305: PPUSH
55306: LD_VAR 0 12
55310: PPUSH
55311: CALL_OW 554
55315: AND
55316: IFFALSE 55356
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
55318: LD_ADDR_VAR 0 13
55322: PUSH
55323: LD_VAR 0 13
55327: PPUSH
55328: LD_VAR 0 13
55332: PUSH
55333: LD_INT 1
55335: PLUS
55336: PPUSH
55337: LD_VAR 0 11
55341: PUSH
55342: LD_VAR 0 12
55346: PUSH
55347: EMPTY
55348: LIST
55349: LIST
55350: PPUSH
55351: CALL_OW 2
55355: ST_TO_ADDR
// end ;
55356: GO 55262
55358: POP
55359: POP
55360: GO 55242
55362: POP
55363: POP
// if not list then
55364: LD_VAR 0 13
55368: NOT
55369: IFFALSE 55373
// exit ;
55371: GO 55619
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
55373: LD_ADDR_VAR 0 13
55377: PUSH
55378: LD_VAR 0 1
55382: PPUSH
55383: LD_VAR 0 13
55387: PPUSH
55388: LD_INT 1
55390: PPUSH
55391: LD_INT 1
55393: PPUSH
55394: CALL 15386 0 4
55398: ST_TO_ADDR
// ComStop ( flame ) ;
55399: LD_VAR 0 1
55403: PPUSH
55404: CALL_OW 141
// for i in list do
55408: LD_ADDR_VAR 0 6
55412: PUSH
55413: LD_VAR 0 13
55417: PUSH
55418: FOR_IN
55419: IFFALSE 55450
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
55421: LD_VAR 0 1
55425: PPUSH
55426: LD_VAR 0 6
55430: PUSH
55431: LD_INT 1
55433: ARRAY
55434: PPUSH
55435: LD_VAR 0 6
55439: PUSH
55440: LD_INT 2
55442: ARRAY
55443: PPUSH
55444: CALL_OW 176
55448: GO 55418
55450: POP
55451: POP
// repeat wait ( 0 0$1 ) ;
55452: LD_INT 35
55454: PPUSH
55455: CALL_OW 67
// task := GetTaskList ( flame ) ;
55459: LD_ADDR_VAR 0 14
55463: PUSH
55464: LD_VAR 0 1
55468: PPUSH
55469: CALL_OW 437
55473: ST_TO_ADDR
// if not task then
55474: LD_VAR 0 14
55478: NOT
55479: IFFALSE 55483
// exit ;
55481: GO 55619
// if task [ 1 ] [ 1 ] <> | then
55483: LD_VAR 0 14
55487: PUSH
55488: LD_INT 1
55490: ARRAY
55491: PUSH
55492: LD_INT 1
55494: ARRAY
55495: PUSH
55496: LD_STRING |
55498: NONEQUAL
55499: IFFALSE 55503
// exit ;
55501: GO 55619
// _x := task [ 1 ] [ 2 ] ;
55503: LD_ADDR_VAR 0 11
55507: PUSH
55508: LD_VAR 0 14
55512: PUSH
55513: LD_INT 1
55515: ARRAY
55516: PUSH
55517: LD_INT 2
55519: ARRAY
55520: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
55521: LD_ADDR_VAR 0 12
55525: PUSH
55526: LD_VAR 0 14
55530: PUSH
55531: LD_INT 1
55533: ARRAY
55534: PUSH
55535: LD_INT 3
55537: ARRAY
55538: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
55539: LD_VAR 0 11
55543: PPUSH
55544: LD_VAR 0 12
55548: PPUSH
55549: CALL_OW 351
55553: NOT
55554: IFTRUE 55573
55556: PUSH
55557: LD_VAR 0 11
55561: PPUSH
55562: LD_VAR 0 12
55566: PPUSH
55567: CALL_OW 554
55571: NOT
55572: OR
55573: IFFALSE 55607
// begin task := Delete ( task , 1 ) ;
55575: LD_ADDR_VAR 0 14
55579: PUSH
55580: LD_VAR 0 14
55584: PPUSH
55585: LD_INT 1
55587: PPUSH
55588: CALL_OW 3
55592: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
55593: LD_VAR 0 1
55597: PPUSH
55598: LD_VAR 0 14
55602: PPUSH
55603: CALL_OW 446
// end ; until not HasTask ( flame ) ;
55607: LD_VAR 0 1
55611: PPUSH
55612: CALL_OW 314
55616: NOT
55617: IFFALSE 55452
// end ;
55619: LD_VAR 0 5
55623: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
55624: LD_EXP 48
55628: NOT
55629: IFFALSE 55679
55631: GO 55633
55633: DISABLE
// begin initHack := true ;
55634: LD_ADDR_EXP 48
55638: PUSH
55639: LD_INT 1
55641: ST_TO_ADDR
// hackTanks := [ ] ;
55642: LD_ADDR_EXP 49
55646: PUSH
55647: EMPTY
55648: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
55649: LD_ADDR_EXP 50
55653: PUSH
55654: EMPTY
55655: ST_TO_ADDR
// hackLimit := 3 ;
55656: LD_ADDR_EXP 51
55660: PUSH
55661: LD_INT 3
55663: ST_TO_ADDR
// hackDist := 12 ;
55664: LD_ADDR_EXP 52
55668: PUSH
55669: LD_INT 12
55671: ST_TO_ADDR
// hackCounter := [ ] ;
55672: LD_ADDR_EXP 53
55676: PUSH
55677: EMPTY
55678: ST_TO_ADDR
// end ;
55679: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
55680: LD_EXP 48
55684: IFFALSE 55702
55686: PUSH
55687: LD_INT 34
55689: PUSH
55690: LD_INT 99
55692: PUSH
55693: EMPTY
55694: LIST
55695: LIST
55696: PPUSH
55697: CALL_OW 69
55701: AND
55702: IFFALSE 55955
55704: GO 55706
55706: DISABLE
55707: LD_INT 0
55709: PPUSH
55710: PPUSH
// begin enable ;
55711: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
55712: LD_ADDR_VAR 0 1
55716: PUSH
55717: LD_INT 34
55719: PUSH
55720: LD_INT 99
55722: PUSH
55723: EMPTY
55724: LIST
55725: LIST
55726: PPUSH
55727: CALL_OW 69
55731: PUSH
55732: FOR_IN
55733: IFFALSE 55953
// begin if not i in hackTanks then
55735: LD_VAR 0 1
55739: PUSH
55740: LD_EXP 49
55744: IN
55745: NOT
55746: IFFALSE 55829
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
55748: LD_ADDR_EXP 49
55752: PUSH
55753: LD_EXP 49
55757: PPUSH
55758: LD_EXP 49
55762: PUSH
55763: LD_INT 1
55765: PLUS
55766: PPUSH
55767: LD_VAR 0 1
55771: PPUSH
55772: CALL_OW 1
55776: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
55777: LD_ADDR_EXP 50
55781: PUSH
55782: LD_EXP 50
55786: PPUSH
55787: LD_EXP 50
55791: PUSH
55792: LD_INT 1
55794: PLUS
55795: PPUSH
55796: EMPTY
55797: PPUSH
55798: CALL_OW 1
55802: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
55803: LD_ADDR_EXP 53
55807: PUSH
55808: LD_EXP 53
55812: PPUSH
55813: LD_EXP 53
55817: PUSH
55818: LD_INT 1
55820: PLUS
55821: PPUSH
55822: EMPTY
55823: PPUSH
55824: CALL_OW 1
55828: ST_TO_ADDR
// end ; if not IsOk ( i ) then
55829: LD_VAR 0 1
55833: PPUSH
55834: CALL_OW 302
55838: NOT
55839: IFFALSE 55852
// begin HackUnlinkAll ( i ) ;
55841: LD_VAR 0 1
55845: PPUSH
55846: CALL 55958 0 1
// continue ;
55850: GO 55732
// end ; HackCheckCapturedStatus ( i ) ;
55852: LD_VAR 0 1
55856: PPUSH
55857: CALL 56403 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
55861: LD_ADDR_VAR 0 2
55865: PUSH
55866: LD_INT 81
55868: PUSH
55869: LD_VAR 0 1
55873: PPUSH
55874: CALL_OW 255
55878: PUSH
55879: EMPTY
55880: LIST
55881: LIST
55882: PUSH
55883: LD_INT 33
55885: PUSH
55886: LD_INT 3
55888: PUSH
55889: EMPTY
55890: LIST
55891: LIST
55892: PUSH
55893: LD_INT 91
55895: PUSH
55896: LD_VAR 0 1
55900: PUSH
55901: LD_EXP 52
55905: PUSH
55906: EMPTY
55907: LIST
55908: LIST
55909: LIST
55910: PUSH
55911: LD_INT 50
55913: PUSH
55914: EMPTY
55915: LIST
55916: PUSH
55917: EMPTY
55918: LIST
55919: LIST
55920: LIST
55921: LIST
55922: PPUSH
55923: CALL_OW 69
55927: ST_TO_ADDR
// if not tmp then
55928: LD_VAR 0 2
55932: NOT
55933: IFFALSE 55937
// continue ;
55935: GO 55732
// HackLink ( i , tmp ) ;
55937: LD_VAR 0 1
55941: PPUSH
55942: LD_VAR 0 2
55946: PPUSH
55947: CALL 56094 0 2
// end ;
55951: GO 55732
55953: POP
55954: POP
// end ;
55955: PPOPN 2
55957: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
55958: LD_INT 0
55960: PPUSH
55961: PPUSH
55962: PPUSH
// if not hack in hackTanks then
55963: LD_VAR 0 1
55967: PUSH
55968: LD_EXP 49
55972: IN
55973: NOT
55974: IFFALSE 55978
// exit ;
55976: GO 56089
// index := GetElementIndex ( hackTanks , hack ) ;
55978: LD_ADDR_VAR 0 4
55982: PUSH
55983: LD_EXP 49
55987: PPUSH
55988: LD_VAR 0 1
55992: PPUSH
55993: CALL 14681 0 2
55997: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
55998: LD_EXP 50
56002: PUSH
56003: LD_VAR 0 4
56007: ARRAY
56008: IFFALSE 56089
// begin for i in hackTanksCaptured [ index ] do
56010: LD_ADDR_VAR 0 3
56014: PUSH
56015: LD_EXP 50
56019: PUSH
56020: LD_VAR 0 4
56024: ARRAY
56025: PUSH
56026: FOR_IN
56027: IFFALSE 56053
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
56029: LD_VAR 0 3
56033: PUSH
56034: LD_INT 1
56036: ARRAY
56037: PPUSH
56038: LD_VAR 0 3
56042: PUSH
56043: LD_INT 2
56045: ARRAY
56046: PPUSH
56047: CALL_OW 235
56051: GO 56026
56053: POP
56054: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
56055: LD_ADDR_EXP 50
56059: PUSH
56060: LD_EXP 50
56064: PPUSH
56065: LD_VAR 0 4
56069: PPUSH
56070: EMPTY
56071: PPUSH
56072: CALL_OW 1
56076: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
56077: LD_VAR 0 1
56081: PPUSH
56082: LD_INT 0
56084: PPUSH
56085: CALL_OW 505
// end ; end ;
56089: LD_VAR 0 2
56093: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
56094: LD_INT 0
56096: PPUSH
56097: PPUSH
56098: PPUSH
// if not hack in hackTanks or not vehicles then
56099: LD_VAR 0 1
56103: PUSH
56104: LD_EXP 49
56108: IN
56109: NOT
56110: IFTRUE 56119
56112: PUSH
56113: LD_VAR 0 2
56117: NOT
56118: OR
56119: IFFALSE 56123
// exit ;
56121: GO 56398
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
56123: LD_ADDR_VAR 0 2
56127: PUSH
56128: LD_VAR 0 1
56132: PPUSH
56133: LD_VAR 0 2
56137: PPUSH
56138: LD_INT 1
56140: PPUSH
56141: LD_INT 1
56143: PPUSH
56144: CALL 15333 0 4
56148: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
56149: LD_ADDR_VAR 0 5
56153: PUSH
56154: LD_EXP 49
56158: PPUSH
56159: LD_VAR 0 1
56163: PPUSH
56164: CALL 14681 0 2
56168: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
56169: LD_EXP 50
56173: PUSH
56174: LD_VAR 0 5
56178: ARRAY
56179: PUSH
56180: LD_EXP 51
56184: LESS
56185: IFFALSE 56374
// begin for i := 1 to vehicles do
56187: LD_ADDR_VAR 0 4
56191: PUSH
56192: DOUBLE
56193: LD_INT 1
56195: DEC
56196: ST_TO_ADDR
56197: LD_VAR 0 2
56201: PUSH
56202: FOR_TO
56203: IFFALSE 56372
// begin if hackTanksCaptured [ index ] = hackLimit then
56205: LD_EXP 50
56209: PUSH
56210: LD_VAR 0 5
56214: ARRAY
56215: PUSH
56216: LD_EXP 51
56220: EQUAL
56221: IFFALSE 56225
// break ;
56223: GO 56372
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
56225: LD_ADDR_EXP 53
56229: PUSH
56230: LD_EXP 53
56234: PPUSH
56235: LD_VAR 0 5
56239: PPUSH
56240: LD_EXP 53
56244: PUSH
56245: LD_VAR 0 5
56249: ARRAY
56250: PUSH
56251: LD_INT 1
56253: PLUS
56254: PPUSH
56255: CALL_OW 1
56259: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
56260: LD_ADDR_EXP 50
56264: PUSH
56265: LD_EXP 50
56269: PPUSH
56270: LD_VAR 0 5
56274: PUSH
56275: LD_EXP 50
56279: PUSH
56280: LD_VAR 0 5
56284: ARRAY
56285: PUSH
56286: LD_INT 1
56288: PLUS
56289: PUSH
56290: EMPTY
56291: LIST
56292: LIST
56293: PPUSH
56294: LD_VAR 0 2
56298: PUSH
56299: LD_VAR 0 4
56303: ARRAY
56304: PUSH
56305: LD_VAR 0 2
56309: PUSH
56310: LD_VAR 0 4
56314: ARRAY
56315: PPUSH
56316: CALL_OW 255
56320: PUSH
56321: EMPTY
56322: LIST
56323: LIST
56324: PPUSH
56325: CALL 14898 0 3
56329: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
56330: LD_VAR 0 2
56334: PUSH
56335: LD_VAR 0 4
56339: ARRAY
56340: PPUSH
56341: LD_VAR 0 1
56345: PPUSH
56346: CALL_OW 255
56350: PPUSH
56351: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
56355: LD_VAR 0 2
56359: PUSH
56360: LD_VAR 0 4
56364: ARRAY
56365: PPUSH
56366: CALL_OW 141
// end ;
56370: GO 56202
56372: POP
56373: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
56374: LD_VAR 0 1
56378: PPUSH
56379: LD_EXP 50
56383: PUSH
56384: LD_VAR 0 5
56388: ARRAY
56389: PUSH
56390: LD_INT 0
56392: PLUS
56393: PPUSH
56394: CALL_OW 505
// end ;
56398: LD_VAR 0 3
56402: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
56403: LD_INT 0
56405: PPUSH
56406: PPUSH
56407: PPUSH
56408: PPUSH
// if not hack in hackTanks then
56409: LD_VAR 0 1
56413: PUSH
56414: LD_EXP 49
56418: IN
56419: NOT
56420: IFFALSE 56424
// exit ;
56422: GO 56668
// index := GetElementIndex ( hackTanks , hack ) ;
56424: LD_ADDR_VAR 0 4
56428: PUSH
56429: LD_EXP 49
56433: PPUSH
56434: LD_VAR 0 1
56438: PPUSH
56439: CALL 14681 0 2
56443: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
56444: LD_ADDR_VAR 0 3
56448: PUSH
56449: DOUBLE
56450: LD_EXP 50
56454: PUSH
56455: LD_VAR 0 4
56459: ARRAY
56460: INC
56461: ST_TO_ADDR
56462: LD_INT 1
56464: PUSH
56465: FOR_DOWNTO
56466: IFFALSE 56642
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
56468: LD_ADDR_VAR 0 5
56472: PUSH
56473: LD_EXP 50
56477: PUSH
56478: LD_VAR 0 4
56482: ARRAY
56483: PUSH
56484: LD_VAR 0 3
56488: ARRAY
56489: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
56490: LD_VAR 0 5
56494: PUSH
56495: LD_INT 1
56497: ARRAY
56498: PPUSH
56499: CALL_OW 302
56503: NOT
56504: IFTRUE 56532
56506: PUSH
56507: LD_VAR 0 5
56511: PUSH
56512: LD_INT 1
56514: ARRAY
56515: PPUSH
56516: CALL_OW 255
56520: PUSH
56521: LD_VAR 0 1
56525: PPUSH
56526: CALL_OW 255
56530: NONEQUAL
56531: OR
56532: IFFALSE 56640
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
56534: LD_VAR 0 5
56538: PUSH
56539: LD_INT 1
56541: ARRAY
56542: PPUSH
56543: CALL_OW 305
56547: IFFALSE 56575
56549: PUSH
56550: LD_VAR 0 5
56554: PUSH
56555: LD_INT 1
56557: ARRAY
56558: PPUSH
56559: CALL_OW 255
56563: PUSH
56564: LD_VAR 0 1
56568: PPUSH
56569: CALL_OW 255
56573: EQUAL
56574: AND
56575: IFFALSE 56599
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
56577: LD_VAR 0 5
56581: PUSH
56582: LD_INT 1
56584: ARRAY
56585: PPUSH
56586: LD_VAR 0 5
56590: PUSH
56591: LD_INT 2
56593: ARRAY
56594: PPUSH
56595: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
56599: LD_ADDR_EXP 50
56603: PUSH
56604: LD_EXP 50
56608: PPUSH
56609: LD_VAR 0 4
56613: PPUSH
56614: LD_EXP 50
56618: PUSH
56619: LD_VAR 0 4
56623: ARRAY
56624: PPUSH
56625: LD_VAR 0 3
56629: PPUSH
56630: CALL_OW 3
56634: PPUSH
56635: CALL_OW 1
56639: ST_TO_ADDR
// end ; end ;
56640: GO 56465
56642: POP
56643: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
56644: LD_VAR 0 1
56648: PPUSH
56649: LD_EXP 50
56653: PUSH
56654: LD_VAR 0 4
56658: ARRAY
56659: PUSH
56660: LD_INT 0
56662: PLUS
56663: PPUSH
56664: CALL_OW 505
// end ;
56668: LD_VAR 0 2
56672: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
56673: LD_INT 0
56675: PPUSH
56676: PPUSH
56677: PPUSH
56678: PPUSH
// if not hack in hackTanks then
56679: LD_VAR 0 1
56683: PUSH
56684: LD_EXP 49
56688: IN
56689: NOT
56690: IFFALSE 56694
// exit ;
56692: GO 56779
// index := GetElementIndex ( hackTanks , hack ) ;
56694: LD_ADDR_VAR 0 5
56698: PUSH
56699: LD_EXP 49
56703: PPUSH
56704: LD_VAR 0 1
56708: PPUSH
56709: CALL 14681 0 2
56713: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
56714: LD_ADDR_VAR 0 4
56718: PUSH
56719: DOUBLE
56720: LD_INT 1
56722: DEC
56723: ST_TO_ADDR
56724: LD_EXP 50
56728: PUSH
56729: LD_VAR 0 5
56733: ARRAY
56734: PUSH
56735: FOR_TO
56736: IFFALSE 56777
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
56738: LD_EXP 50
56742: PUSH
56743: LD_VAR 0 5
56747: ARRAY
56748: PUSH
56749: LD_VAR 0 4
56753: ARRAY
56754: PUSH
56755: LD_INT 1
56757: ARRAY
56758: PUSH
56759: LD_VAR 0 2
56763: EQUAL
56764: IFFALSE 56775
// KillUnit ( vehicle ) ;
56766: LD_VAR 0 2
56770: PPUSH
56771: CALL_OW 66
56775: GO 56735
56777: POP
56778: POP
// end ;
56779: LD_VAR 0 3
56783: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
56784: LD_EXP 54
56788: NOT
56789: IFFALSE 56824
56791: GO 56793
56793: DISABLE
// begin initMiner := true ;
56794: LD_ADDR_EXP 54
56798: PUSH
56799: LD_INT 1
56801: ST_TO_ADDR
// minersList := [ ] ;
56802: LD_ADDR_EXP 55
56806: PUSH
56807: EMPTY
56808: ST_TO_ADDR
// minerMinesList := [ ] ;
56809: LD_ADDR_EXP 56
56813: PUSH
56814: EMPTY
56815: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
56816: LD_ADDR_EXP 57
56820: PUSH
56821: LD_INT 5
56823: ST_TO_ADDR
// end ;
56824: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
56825: LD_EXP 54
56829: IFFALSE 56847
56831: PUSH
56832: LD_INT 34
56834: PUSH
56835: LD_INT 81
56837: PUSH
56838: EMPTY
56839: LIST
56840: LIST
56841: PPUSH
56842: CALL_OW 69
56846: AND
56847: IFFALSE 57310
56849: GO 56851
56851: DISABLE
56852: LD_INT 0
56854: PPUSH
56855: PPUSH
56856: PPUSH
56857: PPUSH
// begin enable ;
56858: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
56859: LD_ADDR_VAR 0 1
56863: PUSH
56864: LD_INT 34
56866: PUSH
56867: LD_INT 81
56869: PUSH
56870: EMPTY
56871: LIST
56872: LIST
56873: PPUSH
56874: CALL_OW 69
56878: PUSH
56879: FOR_IN
56880: IFFALSE 56952
// begin if not i in minersList then
56882: LD_VAR 0 1
56886: PUSH
56887: LD_EXP 55
56891: IN
56892: NOT
56893: IFFALSE 56950
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
56895: LD_ADDR_EXP 55
56899: PUSH
56900: LD_EXP 55
56904: PPUSH
56905: LD_EXP 55
56909: PUSH
56910: LD_INT 1
56912: PLUS
56913: PPUSH
56914: LD_VAR 0 1
56918: PPUSH
56919: CALL_OW 1
56923: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
56924: LD_ADDR_EXP 56
56928: PUSH
56929: LD_EXP 56
56933: PPUSH
56934: LD_EXP 56
56938: PUSH
56939: LD_INT 1
56941: PLUS
56942: PPUSH
56943: EMPTY
56944: PPUSH
56945: CALL_OW 1
56949: ST_TO_ADDR
// end end ;
56950: GO 56879
56952: POP
56953: POP
// for i := minerMinesList downto 1 do
56954: LD_ADDR_VAR 0 1
56958: PUSH
56959: DOUBLE
56960: LD_EXP 56
56964: INC
56965: ST_TO_ADDR
56966: LD_INT 1
56968: PUSH
56969: FOR_DOWNTO
56970: IFFALSE 57308
// begin if IsLive ( minersList [ i ] ) then
56972: LD_EXP 55
56976: PUSH
56977: LD_VAR 0 1
56981: ARRAY
56982: PPUSH
56983: CALL_OW 300
56987: IFFALSE 57015
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
56989: LD_EXP 55
56993: PUSH
56994: LD_VAR 0 1
56998: ARRAY
56999: PPUSH
57000: LD_EXP 56
57004: PUSH
57005: LD_VAR 0 1
57009: ARRAY
57010: PPUSH
57011: CALL_OW 505
// if not minerMinesList [ i ] then
57015: LD_EXP 56
57019: PUSH
57020: LD_VAR 0 1
57024: ARRAY
57025: NOT
57026: IFFALSE 57030
// continue ;
57028: GO 56969
// for j := minerMinesList [ i ] downto 1 do
57030: LD_ADDR_VAR 0 2
57034: PUSH
57035: DOUBLE
57036: LD_EXP 56
57040: PUSH
57041: LD_VAR 0 1
57045: ARRAY
57046: INC
57047: ST_TO_ADDR
57048: LD_INT 1
57050: PUSH
57051: FOR_DOWNTO
57052: IFFALSE 57304
// begin side := GetSide ( minersList [ i ] ) ;
57054: LD_ADDR_VAR 0 3
57058: PUSH
57059: LD_EXP 55
57063: PUSH
57064: LD_VAR 0 1
57068: ARRAY
57069: PPUSH
57070: CALL_OW 255
57074: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
57075: LD_ADDR_VAR 0 4
57079: PUSH
57080: LD_EXP 56
57084: PUSH
57085: LD_VAR 0 1
57089: ARRAY
57090: PUSH
57091: LD_VAR 0 2
57095: ARRAY
57096: PUSH
57097: LD_INT 1
57099: ARRAY
57100: PPUSH
57101: LD_EXP 56
57105: PUSH
57106: LD_VAR 0 1
57110: ARRAY
57111: PUSH
57112: LD_VAR 0 2
57116: ARRAY
57117: PUSH
57118: LD_INT 2
57120: ARRAY
57121: PPUSH
57122: CALL_OW 428
57126: ST_TO_ADDR
// if not tmp then
57127: LD_VAR 0 4
57131: NOT
57132: IFFALSE 57136
// continue ;
57134: GO 57051
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
57136: LD_VAR 0 4
57140: PUSH
57141: LD_INT 81
57143: PUSH
57144: LD_VAR 0 3
57148: PUSH
57149: EMPTY
57150: LIST
57151: LIST
57152: PPUSH
57153: CALL_OW 69
57157: IN
57158: IFFALSE 57208
57160: PUSH
57161: LD_EXP 56
57165: PUSH
57166: LD_VAR 0 1
57170: ARRAY
57171: PUSH
57172: LD_VAR 0 2
57176: ARRAY
57177: PUSH
57178: LD_INT 1
57180: ARRAY
57181: PPUSH
57182: LD_EXP 56
57186: PUSH
57187: LD_VAR 0 1
57191: ARRAY
57192: PUSH
57193: LD_VAR 0 2
57197: ARRAY
57198: PUSH
57199: LD_INT 2
57201: ARRAY
57202: PPUSH
57203: CALL_OW 458
57207: AND
57208: IFFALSE 57302
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
57210: LD_EXP 56
57214: PUSH
57215: LD_VAR 0 1
57219: ARRAY
57220: PUSH
57221: LD_VAR 0 2
57225: ARRAY
57226: PUSH
57227: LD_INT 1
57229: ARRAY
57230: PPUSH
57231: LD_EXP 56
57235: PUSH
57236: LD_VAR 0 1
57240: ARRAY
57241: PUSH
57242: LD_VAR 0 2
57246: ARRAY
57247: PUSH
57248: LD_INT 2
57250: ARRAY
57251: PPUSH
57252: LD_VAR 0 3
57256: PPUSH
57257: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
57261: LD_ADDR_EXP 56
57265: PUSH
57266: LD_EXP 56
57270: PPUSH
57271: LD_VAR 0 1
57275: PPUSH
57276: LD_EXP 56
57280: PUSH
57281: LD_VAR 0 1
57285: ARRAY
57286: PPUSH
57287: LD_VAR 0 2
57291: PPUSH
57292: CALL_OW 3
57296: PPUSH
57297: CALL_OW 1
57301: ST_TO_ADDR
// end ; end ;
57302: GO 57051
57304: POP
57305: POP
// end ;
57306: GO 56969
57308: POP
57309: POP
// end ;
57310: PPOPN 4
57312: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
57313: LD_INT 0
57315: PPUSH
57316: PPUSH
// result := false ;
57317: LD_ADDR_VAR 0 4
57321: PUSH
57322: LD_INT 0
57324: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
57325: LD_VAR 0 1
57329: PPUSH
57330: CALL_OW 264
57334: PUSH
57335: LD_INT 81
57337: EQUAL
57338: NOT
57339: IFFALSE 57343
// exit ;
57341: GO 57587
// index := GetElementIndex ( minersList , unit ) ;
57343: LD_ADDR_VAR 0 5
57347: PUSH
57348: LD_EXP 55
57352: PPUSH
57353: LD_VAR 0 1
57357: PPUSH
57358: CALL 14681 0 2
57362: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
57363: LD_EXP 56
57367: PUSH
57368: LD_VAR 0 5
57372: ARRAY
57373: PUSH
57374: LD_EXP 57
57378: GREATEREQUAL
57379: IFFALSE 57383
// exit ;
57381: GO 57587
// ComMoveXY ( unit , x , y ) ;
57383: LD_VAR 0 1
57387: PPUSH
57388: LD_VAR 0 2
57392: PPUSH
57393: LD_VAR 0 3
57397: PPUSH
57398: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
57402: LD_INT 35
57404: PPUSH
57405: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
57409: LD_VAR 0 1
57413: PPUSH
57414: LD_VAR 0 2
57418: PPUSH
57419: LD_VAR 0 3
57423: PPUSH
57424: CALL 46727 0 3
57428: NOT
57429: IFFALSE 57442
57431: PUSH
57432: LD_VAR 0 1
57436: PPUSH
57437: CALL_OW 314
57441: AND
57442: IFFALSE 57446
// exit ;
57444: GO 57587
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
57446: LD_VAR 0 2
57450: PPUSH
57451: LD_VAR 0 3
57455: PPUSH
57456: CALL_OW 428
57460: PUSH
57461: LD_VAR 0 1
57465: EQUAL
57466: IFFALSE 57480
57468: PUSH
57469: LD_VAR 0 1
57473: PPUSH
57474: CALL_OW 314
57478: NOT
57479: AND
57480: IFFALSE 57402
// PlaySoundXY ( x , y , PlantMine ) ;
57482: LD_VAR 0 2
57486: PPUSH
57487: LD_VAR 0 3
57491: PPUSH
57492: LD_STRING PlantMine
57494: PPUSH
57495: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
57499: LD_VAR 0 2
57503: PPUSH
57504: LD_VAR 0 3
57508: PPUSH
57509: LD_VAR 0 1
57513: PPUSH
57514: CALL_OW 255
57518: PPUSH
57519: LD_INT 0
57521: PPUSH
57522: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
57526: LD_ADDR_EXP 56
57530: PUSH
57531: LD_EXP 56
57535: PPUSH
57536: LD_VAR 0 5
57540: PUSH
57541: LD_EXP 56
57545: PUSH
57546: LD_VAR 0 5
57550: ARRAY
57551: PUSH
57552: LD_INT 1
57554: PLUS
57555: PUSH
57556: EMPTY
57557: LIST
57558: LIST
57559: PPUSH
57560: LD_VAR 0 2
57564: PUSH
57565: LD_VAR 0 3
57569: PUSH
57570: EMPTY
57571: LIST
57572: LIST
57573: PPUSH
57574: CALL 14898 0 3
57578: ST_TO_ADDR
// result := true ;
57579: LD_ADDR_VAR 0 4
57583: PUSH
57584: LD_INT 1
57586: ST_TO_ADDR
// end ;
57587: LD_VAR 0 4
57591: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
57592: LD_INT 0
57594: PPUSH
57595: PPUSH
57596: PPUSH
// if not unit in minersList then
57597: LD_VAR 0 1
57601: PUSH
57602: LD_EXP 55
57606: IN
57607: NOT
57608: IFFALSE 57612
// exit ;
57610: GO 58006
// index := GetElementIndex ( minersList , unit ) ;
57612: LD_ADDR_VAR 0 6
57616: PUSH
57617: LD_EXP 55
57621: PPUSH
57622: LD_VAR 0 1
57626: PPUSH
57627: CALL 14681 0 2
57631: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
57632: LD_ADDR_VAR 0 5
57636: PUSH
57637: DOUBLE
57638: LD_EXP 56
57642: PUSH
57643: LD_VAR 0 6
57647: ARRAY
57648: INC
57649: ST_TO_ADDR
57650: LD_INT 1
57652: PUSH
57653: FOR_DOWNTO
57654: IFFALSE 57817
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
57656: LD_EXP 56
57660: PUSH
57661: LD_VAR 0 6
57665: ARRAY
57666: PUSH
57667: LD_VAR 0 5
57671: ARRAY
57672: PUSH
57673: LD_INT 1
57675: ARRAY
57676: PUSH
57677: LD_VAR 0 2
57681: EQUAL
57682: IFFALSE 57712
57684: PUSH
57685: LD_EXP 56
57689: PUSH
57690: LD_VAR 0 6
57694: ARRAY
57695: PUSH
57696: LD_VAR 0 5
57700: ARRAY
57701: PUSH
57702: LD_INT 2
57704: ARRAY
57705: PUSH
57706: LD_VAR 0 3
57710: EQUAL
57711: AND
57712: IFFALSE 57815
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
57714: LD_EXP 56
57718: PUSH
57719: LD_VAR 0 6
57723: ARRAY
57724: PUSH
57725: LD_VAR 0 5
57729: ARRAY
57730: PUSH
57731: LD_INT 1
57733: ARRAY
57734: PPUSH
57735: LD_EXP 56
57739: PUSH
57740: LD_VAR 0 6
57744: ARRAY
57745: PUSH
57746: LD_VAR 0 5
57750: ARRAY
57751: PUSH
57752: LD_INT 2
57754: ARRAY
57755: PPUSH
57756: LD_VAR 0 1
57760: PPUSH
57761: CALL_OW 255
57765: PPUSH
57766: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
57770: LD_ADDR_EXP 56
57774: PUSH
57775: LD_EXP 56
57779: PPUSH
57780: LD_VAR 0 6
57784: PPUSH
57785: LD_EXP 56
57789: PUSH
57790: LD_VAR 0 6
57794: ARRAY
57795: PPUSH
57796: LD_VAR 0 5
57800: PPUSH
57801: CALL_OW 3
57805: PPUSH
57806: CALL_OW 1
57810: ST_TO_ADDR
// exit ;
57811: POP
57812: POP
57813: GO 58006
// end ; end ;
57815: GO 57653
57817: POP
57818: POP
// for i := minerMinesList [ index ] downto 1 do
57819: LD_ADDR_VAR 0 5
57823: PUSH
57824: DOUBLE
57825: LD_EXP 56
57829: PUSH
57830: LD_VAR 0 6
57834: ARRAY
57835: INC
57836: ST_TO_ADDR
57837: LD_INT 1
57839: PUSH
57840: FOR_DOWNTO
57841: IFFALSE 58004
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
57843: LD_EXP 56
57847: PUSH
57848: LD_VAR 0 6
57852: ARRAY
57853: PUSH
57854: LD_VAR 0 5
57858: ARRAY
57859: PUSH
57860: LD_INT 1
57862: ARRAY
57863: PPUSH
57864: LD_EXP 56
57868: PUSH
57869: LD_VAR 0 6
57873: ARRAY
57874: PUSH
57875: LD_VAR 0 5
57879: ARRAY
57880: PUSH
57881: LD_INT 2
57883: ARRAY
57884: PPUSH
57885: LD_VAR 0 2
57889: PPUSH
57890: LD_VAR 0 3
57894: PPUSH
57895: CALL_OW 298
57899: PUSH
57900: LD_INT 6
57902: LESS
57903: IFFALSE 58002
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
57905: LD_EXP 56
57909: PUSH
57910: LD_VAR 0 6
57914: ARRAY
57915: PUSH
57916: LD_VAR 0 5
57920: ARRAY
57921: PUSH
57922: LD_INT 1
57924: ARRAY
57925: PPUSH
57926: LD_EXP 56
57930: PUSH
57931: LD_VAR 0 6
57935: ARRAY
57936: PUSH
57937: LD_VAR 0 5
57941: ARRAY
57942: PUSH
57943: LD_INT 2
57945: ARRAY
57946: PPUSH
57947: LD_VAR 0 1
57951: PPUSH
57952: CALL_OW 255
57956: PPUSH
57957: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
57961: LD_ADDR_EXP 56
57965: PUSH
57966: LD_EXP 56
57970: PPUSH
57971: LD_VAR 0 6
57975: PPUSH
57976: LD_EXP 56
57980: PUSH
57981: LD_VAR 0 6
57985: ARRAY
57986: PPUSH
57987: LD_VAR 0 5
57991: PPUSH
57992: CALL_OW 3
57996: PPUSH
57997: CALL_OW 1
58001: ST_TO_ADDR
// end ; end ;
58002: GO 57840
58004: POP
58005: POP
// end ;
58006: LD_VAR 0 4
58010: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
58011: LD_INT 0
58013: PPUSH
58014: PPUSH
58015: PPUSH
58016: PPUSH
58017: PPUSH
58018: PPUSH
58019: PPUSH
58020: PPUSH
58021: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
58022: LD_VAR 0 1
58026: PPUSH
58027: CALL_OW 264
58031: PUSH
58032: LD_INT 81
58034: EQUAL
58035: NOT
58036: IFTRUE 58051
58038: PUSH
58039: LD_VAR 0 1
58043: PUSH
58044: LD_EXP 55
58048: IN
58049: NOT
58050: OR
58051: IFFALSE 58055
// exit ;
58053: GO 58381
// index := GetElementIndex ( minersList , unit ) ;
58055: LD_ADDR_VAR 0 6
58059: PUSH
58060: LD_EXP 55
58064: PPUSH
58065: LD_VAR 0 1
58069: PPUSH
58070: CALL 14681 0 2
58074: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
58075: LD_ADDR_VAR 0 8
58079: PUSH
58080: LD_EXP 57
58084: PUSH
58085: LD_EXP 56
58089: PUSH
58090: LD_VAR 0 6
58094: ARRAY
58095: MINUS
58096: ST_TO_ADDR
// if not minesFreeAmount then
58097: LD_VAR 0 8
58101: NOT
58102: IFFALSE 58106
// exit ;
58104: GO 58381
// tmp := [ ] ;
58106: LD_ADDR_VAR 0 7
58110: PUSH
58111: EMPTY
58112: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
58113: LD_ADDR_VAR 0 5
58117: PUSH
58118: DOUBLE
58119: LD_INT 1
58121: DEC
58122: ST_TO_ADDR
58123: LD_VAR 0 8
58127: PUSH
58128: FOR_TO
58129: IFFALSE 58328
// begin _d := rand ( 0 , 5 ) ;
58131: LD_ADDR_VAR 0 11
58135: PUSH
58136: LD_INT 0
58138: PPUSH
58139: LD_INT 5
58141: PPUSH
58142: CALL_OW 12
58146: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
58147: LD_ADDR_VAR 0 12
58151: PUSH
58152: LD_INT 2
58154: PPUSH
58155: LD_INT 6
58157: PPUSH
58158: CALL_OW 12
58162: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
58163: LD_ADDR_VAR 0 9
58167: PUSH
58168: LD_VAR 0 2
58172: PPUSH
58173: LD_VAR 0 11
58177: PPUSH
58178: LD_VAR 0 12
58182: PPUSH
58183: CALL_OW 272
58187: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
58188: LD_ADDR_VAR 0 10
58192: PUSH
58193: LD_VAR 0 3
58197: PPUSH
58198: LD_VAR 0 11
58202: PPUSH
58203: LD_VAR 0 12
58207: PPUSH
58208: CALL_OW 273
58212: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
58213: LD_VAR 0 9
58217: PPUSH
58218: LD_VAR 0 10
58222: PPUSH
58223: CALL_OW 488
58227: IFFALSE 58251
58229: PUSH
58230: LD_VAR 0 9
58234: PUSH
58235: LD_VAR 0 10
58239: PUSH
58240: EMPTY
58241: LIST
58242: LIST
58243: PUSH
58244: LD_VAR 0 7
58248: IN
58249: NOT
58250: AND
58251: IFFALSE 58270
58253: PUSH
58254: LD_VAR 0 9
58258: PPUSH
58259: LD_VAR 0 10
58263: PPUSH
58264: CALL_OW 458
58268: NOT
58269: AND
58270: IFFALSE 58312
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
58272: LD_ADDR_VAR 0 7
58276: PUSH
58277: LD_VAR 0 7
58281: PPUSH
58282: LD_VAR 0 7
58286: PUSH
58287: LD_INT 1
58289: PLUS
58290: PPUSH
58291: LD_VAR 0 9
58295: PUSH
58296: LD_VAR 0 10
58300: PUSH
58301: EMPTY
58302: LIST
58303: LIST
58304: PPUSH
58305: CALL_OW 1
58309: ST_TO_ADDR
58310: GO 58326
// i := i - 1 ;
58312: LD_ADDR_VAR 0 5
58316: PUSH
58317: LD_VAR 0 5
58321: PUSH
58322: LD_INT 1
58324: MINUS
58325: ST_TO_ADDR
// end ;
58326: GO 58128
58328: POP
58329: POP
// for i in tmp do
58330: LD_ADDR_VAR 0 5
58334: PUSH
58335: LD_VAR 0 7
58339: PUSH
58340: FOR_IN
58341: IFFALSE 58379
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
58343: LD_VAR 0 1
58347: PPUSH
58348: LD_VAR 0 5
58352: PUSH
58353: LD_INT 1
58355: ARRAY
58356: PPUSH
58357: LD_VAR 0 5
58361: PUSH
58362: LD_INT 2
58364: ARRAY
58365: PPUSH
58366: CALL 57313 0 3
58370: NOT
58371: IFFALSE 58377
// exit ;
58373: POP
58374: POP
58375: GO 58381
58377: GO 58340
58379: POP
58380: POP
// end ;
58381: LD_VAR 0 4
58385: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
58386: LD_INT 0
58388: PPUSH
58389: PPUSH
58390: PPUSH
58391: PPUSH
58392: PPUSH
58393: PPUSH
58394: PPUSH
58395: PPUSH
58396: PPUSH
// if GetClass ( unit ) <> class_sniper then
58397: LD_VAR 0 1
58401: PPUSH
58402: CALL_OW 257
58406: PUSH
58407: LD_INT 5
58409: NONEQUAL
58410: IFFALSE 58414
// exit ;
58412: GO 58884
// dist := 8 ;
58414: LD_ADDR_VAR 0 5
58418: PUSH
58419: LD_INT 8
58421: ST_TO_ADDR
// viewRange := 12 ;
58422: LD_ADDR_VAR 0 8
58426: PUSH
58427: LD_INT 12
58429: ST_TO_ADDR
// side := GetSide ( unit ) ;
58430: LD_ADDR_VAR 0 6
58434: PUSH
58435: LD_VAR 0 1
58439: PPUSH
58440: CALL_OW 255
58444: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
58445: LD_INT 61
58447: PPUSH
58448: LD_VAR 0 6
58452: PPUSH
58453: CALL_OW 321
58457: PUSH
58458: LD_INT 2
58460: EQUAL
58461: IFFALSE 58471
// viewRange := 16 ;
58463: LD_ADDR_VAR 0 8
58467: PUSH
58468: LD_INT 16
58470: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
58471: LD_VAR 0 1
58475: PPUSH
58476: LD_VAR 0 2
58480: PPUSH
58481: LD_VAR 0 3
58485: PPUSH
58486: CALL_OW 297
58490: PUSH
58491: LD_VAR 0 5
58495: GREATER
58496: IFFALSE 58575
// begin ComMoveXY ( unit , x , y ) ;
58498: LD_VAR 0 1
58502: PPUSH
58503: LD_VAR 0 2
58507: PPUSH
58508: LD_VAR 0 3
58512: PPUSH
58513: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
58517: LD_INT 35
58519: PPUSH
58520: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
58524: LD_VAR 0 1
58528: PPUSH
58529: LD_VAR 0 2
58533: PPUSH
58534: LD_VAR 0 3
58538: PPUSH
58539: CALL 46727 0 3
58543: NOT
58544: IFFALSE 58548
// exit ;
58546: GO 58884
// until GetDistUnitXY ( unit , x , y ) < dist ;
58548: LD_VAR 0 1
58552: PPUSH
58553: LD_VAR 0 2
58557: PPUSH
58558: LD_VAR 0 3
58562: PPUSH
58563: CALL_OW 297
58567: PUSH
58568: LD_VAR 0 5
58572: LESS
58573: IFFALSE 58517
// end ; ComTurnXY ( unit , x , y ) ;
58575: LD_VAR 0 1
58579: PPUSH
58580: LD_VAR 0 2
58584: PPUSH
58585: LD_VAR 0 3
58589: PPUSH
58590: CALL_OW 118
// repeat if Multiplayer then
58594: LD_OWVAR 4
58598: IFFALSE 58609
// wait ( 35 ) else
58600: LD_INT 35
58602: PPUSH
58603: CALL_OW 67
58607: GO 58616
// wait ( 5 ) ;
58609: LD_INT 5
58611: PPUSH
58612: CALL_OW 67
// _d := GetDir ( unit ) ;
58616: LD_ADDR_VAR 0 11
58620: PUSH
58621: LD_VAR 0 1
58625: PPUSH
58626: CALL_OW 254
58630: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
58631: LD_ADDR_VAR 0 7
58635: PUSH
58636: LD_VAR 0 1
58640: PPUSH
58641: CALL_OW 250
58645: PPUSH
58646: LD_VAR 0 1
58650: PPUSH
58651: CALL_OW 251
58655: PPUSH
58656: LD_VAR 0 2
58660: PPUSH
58661: LD_VAR 0 3
58665: PPUSH
58666: CALL 49363 0 4
58670: ST_TO_ADDR
// until dir = _d ;
58671: LD_VAR 0 7
58675: PUSH
58676: LD_VAR 0 11
58680: EQUAL
58681: IFFALSE 58594
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
58683: LD_ADDR_VAR 0 9
58687: PUSH
58688: LD_VAR 0 1
58692: PPUSH
58693: CALL_OW 250
58697: PPUSH
58698: LD_VAR 0 7
58702: PPUSH
58703: LD_VAR 0 5
58707: PPUSH
58708: CALL_OW 272
58712: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
58713: LD_ADDR_VAR 0 10
58717: PUSH
58718: LD_VAR 0 1
58722: PPUSH
58723: CALL_OW 251
58727: PPUSH
58728: LD_VAR 0 7
58732: PPUSH
58733: LD_VAR 0 5
58737: PPUSH
58738: CALL_OW 273
58742: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
58743: LD_VAR 0 9
58747: PPUSH
58748: LD_VAR 0 10
58752: PPUSH
58753: CALL_OW 488
58757: NOT
58758: IFFALSE 58762
// exit ;
58760: GO 58884
// ComAnimCustom ( unit , 1 ) ;
58762: LD_VAR 0 1
58766: PPUSH
58767: LD_INT 1
58769: PPUSH
58770: CALL_OW 592
// p := 0 ;
58774: LD_ADDR_VAR 0 12
58778: PUSH
58779: LD_INT 0
58781: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
58782: LD_VAR 0 9
58786: PPUSH
58787: LD_VAR 0 10
58791: PPUSH
58792: LD_VAR 0 6
58796: PPUSH
58797: LD_VAR 0 8
58801: PPUSH
58802: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
58806: LD_INT 35
58808: PPUSH
58809: CALL_OW 67
// p := Inc ( p ) ;
58813: LD_ADDR_VAR 0 12
58817: PUSH
58818: LD_VAR 0 12
58822: PPUSH
58823: CALL 49319 0 1
58827: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
58828: LD_VAR 0 12
58832: PUSH
58833: LD_INT 3
58835: EQUAL
58836: IFTRUE 58850
58838: PUSH
58839: LD_VAR 0 1
58843: PPUSH
58844: CALL_OW 302
58848: NOT
58849: OR
58850: IFTRUE 58863
58852: PUSH
58853: LD_VAR 0 1
58857: PPUSH
58858: CALL_OW 301
58862: OR
58863: IFFALSE 58806
// RemoveSeeing ( _x , _y , side ) ;
58865: LD_VAR 0 9
58869: PPUSH
58870: LD_VAR 0 10
58874: PPUSH
58875: LD_VAR 0 6
58879: PPUSH
58880: CALL_OW 331
// end ; end_of_file
58884: LD_VAR 0 4
58888: RET
// export mpKingPoints ; every 0 0$1 trigger mpGameActive marked GameTypeKing do var i , j , tmp ;
58889: LD_EXP 39
58893: IFFALSE 59234
58895: GO 58897
58897: DISABLE
58898: LD_INT 0
58900: PPUSH
58901: PPUSH
58902: PPUSH
// begin mpKingPoints := [ ] ;
58903: LD_ADDR_EXP 58
58907: PUSH
58908: EMPTY
58909: ST_TO_ADDR
// if mpTeamGame then
58910: LD_EXP 11
58914: IFFALSE 58968
// begin for i := 1 to Count ( mpTeams ) do
58916: LD_ADDR_VAR 0 1
58920: PUSH
58921: DOUBLE
58922: LD_INT 1
58924: DEC
58925: ST_TO_ADDR
58926: LD_EXP 10
58930: PPUSH
58931: CALL 12014 0 1
58935: PUSH
58936: FOR_TO
58937: IFFALSE 58964
// mpKingPoints := Replace ( mpKingPoints , i , 0 ) ;
58939: LD_ADDR_EXP 58
58943: PUSH
58944: LD_EXP 58
58948: PPUSH
58949: LD_VAR 0 1
58953: PPUSH
58954: LD_INT 0
58956: PPUSH
58957: CALL_OW 1
58961: ST_TO_ADDR
58962: GO 58936
58964: POP
58965: POP
// end else
58966: GO 59011
// begin for i := 1 to 8 do
58968: LD_ADDR_VAR 0 1
58972: PUSH
58973: DOUBLE
58974: LD_INT 1
58976: DEC
58977: ST_TO_ADDR
58978: LD_INT 8
58980: PUSH
58981: FOR_TO
58982: IFFALSE 59009
// mpKingPoints := Replace ( mpKingPoints , i , 0 ) ;
58984: LD_ADDR_EXP 58
58988: PUSH
58989: LD_EXP 58
58993: PPUSH
58994: LD_VAR 0 1
58998: PPUSH
58999: LD_INT 0
59001: PPUSH
59002: CALL_OW 1
59006: ST_TO_ADDR
59007: GO 58981
59009: POP
59010: POP
// end ; tmp := AreaToList ( kingCamArea , 0 ) ;
59011: LD_ADDR_VAR 0 3
59015: PUSH
59016: LD_EXP 2
59020: PPUSH
59021: LD_INT 0
59023: PPUSH
59024: CALL_OW 517
59028: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
59029: LD_ADDR_VAR 0 1
59033: PUSH
59034: DOUBLE
59035: LD_INT 1
59037: DEC
59038: ST_TO_ADDR
59039: LD_VAR 0 3
59043: PUSH
59044: LD_INT 1
59046: ARRAY
59047: PUSH
59048: FOR_TO
59049: IFFALSE 59116
// for j := 1 to 8 do
59051: LD_ADDR_VAR 0 2
59055: PUSH
59056: DOUBLE
59057: LD_INT 1
59059: DEC
59060: ST_TO_ADDR
59061: LD_INT 8
59063: PUSH
59064: FOR_TO
59065: IFFALSE 59112
// PlaceSeeing ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , j , - 12 ) ;
59067: LD_VAR 0 3
59071: PUSH
59072: LD_INT 1
59074: ARRAY
59075: PUSH
59076: LD_VAR 0 1
59080: ARRAY
59081: PPUSH
59082: LD_VAR 0 3
59086: PUSH
59087: LD_INT 2
59089: ARRAY
59090: PUSH
59091: LD_VAR 0 1
59095: ARRAY
59096: PPUSH
59097: LD_VAR 0 2
59101: PPUSH
59102: LD_INT 12
59104: NEG
59105: PPUSH
59106: CALL_OW 330
59110: GO 59064
59112: POP
59113: POP
59114: GO 59048
59116: POP
59117: POP
// SetAreaMapShow ( mpKingArea , 1 ) ;
59118: LD_EXP 34
59122: PPUSH
59123: LD_INT 1
59125: PPUSH
59126: CALL_OW 424
// UpdateCounter ;
59130: CALL 59740 0 0
// repeat wait ( 0 0$1 ) ;
59134: LD_INT 35
59136: PPUSH
59137: CALL_OW 67
// tmp := FilterUnitsInArea ( mpKingArea , [ [ f_not , [ f_constructed ] ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
59141: LD_ADDR_VAR 0 3
59145: PUSH
59146: LD_EXP 34
59150: PPUSH
59151: LD_INT 3
59153: PUSH
59154: LD_INT 57
59156: PUSH
59157: EMPTY
59158: LIST
59159: PUSH
59160: EMPTY
59161: LIST
59162: LIST
59163: PUSH
59164: LD_INT 50
59166: PUSH
59167: EMPTY
59168: LIST
59169: PUSH
59170: LD_INT 2
59172: PUSH
59173: LD_INT 30
59175: PUSH
59176: LD_INT 0
59178: PUSH
59179: EMPTY
59180: LIST
59181: LIST
59182: PUSH
59183: LD_INT 30
59185: PUSH
59186: LD_INT 1
59188: PUSH
59189: EMPTY
59190: LIST
59191: LIST
59192: PUSH
59193: EMPTY
59194: LIST
59195: LIST
59196: LIST
59197: PUSH
59198: EMPTY
59199: LIST
59200: LIST
59201: LIST
59202: PPUSH
59203: CALL_OW 70
59207: ST_TO_ADDR
// if not tmp then
59208: LD_VAR 0 3
59212: NOT
59213: IFFALSE 59217
// continue ;
59215: GO 59134
// AddPoints ( tmp ) ;
59217: LD_VAR 0 3
59221: PPUSH
59222: CALL 59418 0 1
// UpdateCounter ;
59226: CALL 59740 0 0
// until false ;
59230: LD_INT 0
59232: IFFALSE 59134
// end ;
59234: PPOPN 3
59236: END
// every 0 0$1 trigger mpGameActive and mpEmissions marked GameTypeKing do var i , tmp ;
59237: LD_EXP 39
59241: IFFALSE 59249
59243: PUSH
59244: LD_EXP 37
59248: AND
59249: IFFALSE 59415
59251: GO 59253
59253: DISABLE
59254: LD_INT 0
59256: PPUSH
59257: PPUSH
// begin tmp := AreaToList ( kingCamArea , 0 ) ;
59258: LD_ADDR_VAR 0 2
59262: PUSH
59263: LD_EXP 2
59267: PPUSH
59268: LD_INT 0
59270: PPUSH
59271: CALL_OW 517
59275: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
59276: LD_ADDR_VAR 0 1
59280: PUSH
59281: DOUBLE
59282: LD_INT 1
59284: DEC
59285: ST_TO_ADDR
59286: LD_VAR 0 2
59290: PUSH
59291: LD_INT 1
59293: ARRAY
59294: PUSH
59295: FOR_TO
59296: IFFALSE 59337
// ArtContamination ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 125 ) ;
59298: LD_VAR 0 2
59302: PUSH
59303: LD_INT 1
59305: ARRAY
59306: PUSH
59307: LD_VAR 0 1
59311: ARRAY
59312: PPUSH
59313: LD_VAR 0 2
59317: PUSH
59318: LD_INT 2
59320: ARRAY
59321: PUSH
59322: LD_VAR 0 1
59326: ARRAY
59327: PPUSH
59328: LD_INT 125
59330: PPUSH
59331: CALL_OW 495
59335: GO 59295
59337: POP
59338: POP
// repeat wait ( mpEmissions ) ;
59339: LD_EXP 37
59343: PPUSH
59344: CALL_OW 67
// for i := 1 to tmp [ 1 ] do
59348: LD_ADDR_VAR 0 1
59352: PUSH
59353: DOUBLE
59354: LD_INT 1
59356: DEC
59357: ST_TO_ADDR
59358: LD_VAR 0 2
59362: PUSH
59363: LD_INT 1
59365: ARRAY
59366: PUSH
59367: FOR_TO
59368: IFFALSE 59409
// ArtContamination ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 15 ) ;
59370: LD_VAR 0 2
59374: PUSH
59375: LD_INT 1
59377: ARRAY
59378: PUSH
59379: LD_VAR 0 1
59383: ARRAY
59384: PPUSH
59385: LD_VAR 0 2
59389: PUSH
59390: LD_INT 2
59392: ARRAY
59393: PUSH
59394: LD_VAR 0 1
59398: ARRAY
59399: PPUSH
59400: LD_INT 15
59402: PPUSH
59403: CALL_OW 495
59407: GO 59367
59409: POP
59410: POP
// until false ;
59411: LD_INT 0
59413: IFFALSE 59339
// end ;
59415: PPOPN 2
59417: END
// function AddPoints ( depots ) ; var i , first , team , side ; begin
59418: LD_INT 0
59420: PPUSH
59421: PPUSH
59422: PPUSH
59423: PPUSH
59424: PPUSH
// if mpTeamGame then
59425: LD_EXP 11
59429: IFFALSE 59626
// begin first := depots [ 1 ] ;
59431: LD_ADDR_VAR 0 4
59435: PUSH
59436: LD_VAR 0 1
59440: PUSH
59441: LD_INT 1
59443: ARRAY
59444: ST_TO_ADDR
// side := GetSide ( first ) ;
59445: LD_ADDR_VAR 0 6
59449: PUSH
59450: LD_VAR 0 4
59454: PPUSH
59455: CALL_OW 255
59459: ST_TO_ADDR
// for i := 1 to mpTeams do
59460: LD_ADDR_VAR 0 3
59464: PUSH
59465: DOUBLE
59466: LD_INT 1
59468: DEC
59469: ST_TO_ADDR
59470: LD_EXP 10
59474: PUSH
59475: FOR_TO
59476: IFFALSE 59510
// if side in mpTeams [ i ] then
59478: LD_VAR 0 6
59482: PUSH
59483: LD_EXP 10
59487: PUSH
59488: LD_VAR 0 3
59492: ARRAY
59493: IN
59494: IFFALSE 59508
// begin team := i ;
59496: LD_ADDR_VAR 0 5
59500: PUSH
59501: LD_VAR 0 3
59505: ST_TO_ADDR
// break ;
59506: GO 59510
// end ;
59508: GO 59475
59510: POP
59511: POP
// if not team then
59512: LD_VAR 0 5
59516: NOT
59517: IFFALSE 59521
// exit ;
59519: GO 59735
// if FilterUnitsInArea ( mpKingArea , [ f_enemy , side ] ) then
59521: LD_EXP 34
59525: PPUSH
59526: LD_INT 81
59528: PUSH
59529: LD_VAR 0 6
59533: PUSH
59534: EMPTY
59535: LIST
59536: LIST
59537: PPUSH
59538: CALL_OW 70
59542: IFFALSE 59546
// exit ;
59544: GO 59735
// mpKingPoints := Replace ( mpKingPoints , team , mpKingPoints [ team ] + 1 ) ;
59546: LD_ADDR_EXP 58
59550: PUSH
59551: LD_EXP 58
59555: PPUSH
59556: LD_VAR 0 5
59560: PPUSH
59561: LD_EXP 58
59565: PUSH
59566: LD_VAR 0 5
59570: ARRAY
59571: PUSH
59572: LD_INT 1
59574: PLUS
59575: PPUSH
59576: CALL_OW 1
59580: ST_TO_ADDR
// for i in mpTeams [ team ] do
59581: LD_ADDR_VAR 0 3
59585: PUSH
59586: LD_EXP 10
59590: PUSH
59591: LD_VAR 0 5
59595: ARRAY
59596: PUSH
59597: FOR_IN
59598: IFFALSE 59622
// SetMultiScore ( i , mpKingPoints [ team ] ) ;
59600: LD_VAR 0 3
59604: PPUSH
59605: LD_EXP 58
59609: PUSH
59610: LD_VAR 0 5
59614: ARRAY
59615: PPUSH
59616: CALL_OW 506
59620: GO 59597
59622: POP
59623: POP
// end else
59624: GO 59735
// begin first := depots [ 1 ] ;
59626: LD_ADDR_VAR 0 4
59630: PUSH
59631: LD_VAR 0 1
59635: PUSH
59636: LD_INT 1
59638: ARRAY
59639: ST_TO_ADDR
// side := GetSide ( first ) ;
59640: LD_ADDR_VAR 0 6
59644: PUSH
59645: LD_VAR 0 4
59649: PPUSH
59650: CALL_OW 255
59654: ST_TO_ADDR
// if FilterUnitsInArea ( mpKingArea , [ f_enemy , side ] ) then
59655: LD_EXP 34
59659: PPUSH
59660: LD_INT 81
59662: PUSH
59663: LD_VAR 0 6
59667: PUSH
59668: EMPTY
59669: LIST
59670: LIST
59671: PPUSH
59672: CALL_OW 70
59676: IFFALSE 59680
// exit ;
59678: GO 59735
// mpKingPoints := Replace ( mpKingPoints , side , mpKingPoints [ side ] + 1 ) ;
59680: LD_ADDR_EXP 58
59684: PUSH
59685: LD_EXP 58
59689: PPUSH
59690: LD_VAR 0 6
59694: PPUSH
59695: LD_EXP 58
59699: PUSH
59700: LD_VAR 0 6
59704: ARRAY
59705: PUSH
59706: LD_INT 1
59708: PLUS
59709: PPUSH
59710: CALL_OW 1
59714: ST_TO_ADDR
// SetMultiScore ( side , mpKingPoints [ side ] ) ;
59715: LD_VAR 0 6
59719: PPUSH
59720: LD_EXP 58
59724: PUSH
59725: LD_VAR 0 6
59729: ARRAY
59730: PPUSH
59731: CALL_OW 506
// end ; end ;
59735: LD_VAR 0 2
59739: RET
// function UpdateCounter ; var i ; begin
59740: LD_INT 0
59742: PPUSH
59743: PPUSH
// result := [ ] ;
59744: LD_ADDR_VAR 0 1
59748: PUSH
59749: EMPTY
59750: ST_TO_ADDR
// if mpTeamGame then
59751: LD_EXP 11
59755: IFFALSE 59822
// begin for i := 1 to mpTeams do
59757: LD_ADDR_VAR 0 2
59761: PUSH
59762: DOUBLE
59763: LD_INT 1
59765: DEC
59766: ST_TO_ADDR
59767: LD_EXP 10
59771: PUSH
59772: FOR_TO
59773: IFFALSE 59818
// result := result ^ [ #KingoftheHill-Team , i , mpKingPoints [ i ] , mpPoints ] ;
59775: LD_ADDR_VAR 0 1
59779: PUSH
59780: LD_VAR 0 1
59784: PUSH
59785: LD_STRING #KingoftheHill-Team
59787: PUSH
59788: LD_VAR 0 2
59792: PUSH
59793: LD_EXP 58
59797: PUSH
59798: LD_VAR 0 2
59802: ARRAY
59803: PUSH
59804: LD_EXP 35
59808: PUSH
59809: EMPTY
59810: LIST
59811: LIST
59812: LIST
59813: LIST
59814: ADD
59815: ST_TO_ADDR
59816: GO 59772
59818: POP
59819: POP
// end else
59820: GO 59895
// begin for i := 1 to 8 do
59822: LD_ADDR_VAR 0 2
59826: PUSH
59827: DOUBLE
59828: LD_INT 1
59830: DEC
59831: ST_TO_ADDR
59832: LD_INT 8
59834: PUSH
59835: FOR_TO
59836: IFFALSE 59893
// if mpSidePositions [ i ] then
59838: LD_EXP 7
59842: PUSH
59843: LD_VAR 0 2
59847: ARRAY
59848: IFFALSE 59891
// result := result ^ [ #KingoftheHill-Player , i , mpKingPoints [ i ] , mpPoints ] ;
59850: LD_ADDR_VAR 0 1
59854: PUSH
59855: LD_VAR 0 1
59859: PUSH
59860: LD_STRING #KingoftheHill-Player
59862: PUSH
59863: LD_VAR 0 2
59867: PUSH
59868: LD_EXP 58
59872: PUSH
59873: LD_VAR 0 2
59877: ARRAY
59878: PUSH
59879: LD_EXP 35
59883: PUSH
59884: EMPTY
59885: LIST
59886: LIST
59887: LIST
59888: LIST
59889: ADD
59890: ST_TO_ADDR
59891: GO 59835
59893: POP
59894: POP
// end ; mpDisplayStrings := result ;
59895: LD_ADDR_EXP 38
59899: PUSH
59900: LD_VAR 0 1
59904: ST_TO_ADDR
// end ;
59905: LD_VAR 0 1
59909: RET
// export function HowMuchPointsKing ( side ) ; begin
59910: LD_INT 0
59912: PPUSH
// result := HowMuchPoints ( side ) ;
59913: LD_ADDR_VAR 0 2
59917: PUSH
59918: LD_VAR 0 1
59922: PPUSH
59923: CALL 59933 0 1
59927: ST_TO_ADDR
// end ;
59928: LD_VAR 0 2
59932: RET
// function HowMuchPoints ( side ) ; var i ; begin
59933: LD_INT 0
59935: PPUSH
59936: PPUSH
// if mpTeamGame then
59937: LD_EXP 11
59941: IFFALSE 60010
// begin for i := 1 to Count ( mpTeams ) do
59943: LD_ADDR_VAR 0 3
59947: PUSH
59948: DOUBLE
59949: LD_INT 1
59951: DEC
59952: ST_TO_ADDR
59953: LD_EXP 10
59957: PPUSH
59958: CALL 12014 0 1
59962: PUSH
59963: FOR_TO
59964: IFFALSE 60006
// begin if side in mpTeams [ i ] then
59966: LD_VAR 0 1
59970: PUSH
59971: LD_EXP 10
59975: PUSH
59976: LD_VAR 0 3
59980: ARRAY
59981: IN
59982: IFFALSE 60004
// begin result := mpKingPoints [ i ] ;
59984: LD_ADDR_VAR 0 2
59988: PUSH
59989: LD_EXP 58
59993: PUSH
59994: LD_VAR 0 3
59998: ARRAY
59999: ST_TO_ADDR
// exit ;
60000: POP
60001: POP
60002: GO 60026
// end ; end ;
60004: GO 59963
60006: POP
60007: POP
// end else
60008: GO 60026
// result := mpKingPoints [ side ] ;
60010: LD_ADDR_VAR 0 2
60014: PUSH
60015: LD_EXP 58
60019: PUSH
60020: LD_VAR 0 1
60024: ARRAY
60025: ST_TO_ADDR
// end ;
60026: LD_VAR 0 2
60030: RET
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeKing do var i , canWin ;
60031: LD_EXP 39
60035: IFFALSE 60043
60037: PUSH
60038: CALL 60378 0 0
60042: AND
60043: IFFALSE 60051
60045: PUSH
60046: LD_OWVAR 4
60050: AND
60051: IFFALSE 60301
60053: GO 60055
60055: DISABLE
60056: LD_INT 0
60058: PPUSH
60059: PPUSH
// begin canWin := false ;
60060: LD_ADDR_VAR 0 2
60064: PUSH
60065: LD_INT 0
60067: ST_TO_ADDR
// if not HasPower ( your_side ) then
60068: LD_OWVAR 2
60072: PPUSH
60073: CALL 60420 0 1
60077: NOT
60078: IFFALSE 60089
// begin Multiplayer_Loose_Message ;
60080: CALL_OW 521
// enable ( mpLose ) ;
60084: LD_INT 102
60086: ENABLE_MARKED
// end else
60087: GO 60301
// begin canWin := ( HowMuchPoints ( your_side ) >= mpPoints and HasPower ( your_side ) ) or not EnemiesInGame ;
60089: LD_ADDR_VAR 0 2
60093: PUSH
60094: LD_OWVAR 2
60098: PPUSH
60099: CALL 59933 0 1
60103: PUSH
60104: LD_EXP 35
60108: GREATEREQUAL
60109: IFFALSE 60122
60111: PUSH
60112: LD_OWVAR 2
60116: PPUSH
60117: CALL 60420 0 1
60121: AND
60122: IFTRUE 60131
60124: PUSH
60125: CALL 60304 0 0
60129: NOT
60130: OR
60131: ST_TO_ADDR
// for i := 1 to 8 do
60132: LD_ADDR_VAR 0 1
60136: PUSH
60137: DOUBLE
60138: LD_INT 1
60140: DEC
60141: ST_TO_ADDR
60142: LD_INT 8
60144: PUSH
60145: FOR_TO
60146: IFFALSE 60287
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
60148: LD_EXP 7
60152: PUSH
60153: LD_VAR 0 1
60157: ARRAY
60158: IFFALSE 60171
60160: PUSH
60161: LD_VAR 0 1
60165: PPUSH
60166: CALL_OW 108
60170: AND
60171: IFFALSE 60185
60173: PUSH
60174: LD_VAR 0 1
60178: PUSH
60179: LD_OWVAR 2
60183: NONEQUAL
60184: AND
60185: IFFALSE 60285
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
60187: LD_EXP 8
60191: PUSH
60192: LD_VAR 0 1
60196: ARRAY
60197: NOT
60198: IFTRUE 60246
60200: PUSH
60201: LD_EXP 8
60205: PUSH
60206: LD_VAR 0 1
60210: ARRAY
60211: PUSH
60212: LD_EXP 8
60216: PUSH
60217: LD_OWVAR 2
60221: ARRAY
60222: NONEQUAL
60223: IFFALSE 60245
60225: PUSH
60226: LD_OWVAR 2
60230: PPUSH
60231: LD_VAR 0 1
60235: PPUSH
60236: CALL_OW 81
60240: PUSH
60241: LD_INT 1
60243: NONEQUAL
60244: AND
60245: OR
60246: IFFALSE 60285
// if HowMuchPoints ( i ) >= mpPoints and HasPower ( i ) then
60248: LD_VAR 0 1
60252: PPUSH
60253: CALL 59933 0 1
60257: PUSH
60258: LD_EXP 35
60262: GREATEREQUAL
60263: IFFALSE 60276
60265: PUSH
60266: LD_VAR 0 1
60270: PPUSH
60271: CALL 60420 0 1
60275: AND
60276: IFFALSE 60285
// begin enable ( mpLose ) ;
60278: LD_INT 102
60280: ENABLE_MARKED
// exit ;
60281: POP
60282: POP
60283: GO 60301
// end ;
60285: GO 60145
60287: POP
60288: POP
// if canWin then
60289: LD_VAR 0 2
60293: IFFALSE 60300
// enable ( mpWin ) else
60295: LD_INT 101
60297: ENABLE_MARKED
60298: GO 60301
// enable ;
60300: ENABLE
// end ; end ;
60301: PPOPN 2
60303: END
// function EnemiesInGame ; var i ; begin
60304: LD_INT 0
60306: PPUSH
60307: PPUSH
// result := false ;
60308: LD_ADDR_VAR 0 1
60312: PUSH
60313: LD_INT 0
60315: ST_TO_ADDR
// for i := 1 to 8 do
60316: LD_ADDR_VAR 0 2
60320: PUSH
60321: DOUBLE
60322: LD_INT 1
60324: DEC
60325: ST_TO_ADDR
60326: LD_INT 8
60328: PUSH
60329: FOR_TO
60330: IFFALSE 60371
// if i <> your_side and HasPower ( i ) then
60332: LD_VAR 0 2
60336: PUSH
60337: LD_OWVAR 2
60341: NONEQUAL
60342: IFFALSE 60355
60344: PUSH
60345: LD_VAR 0 2
60349: PPUSH
60350: CALL 60420 0 1
60354: AND
60355: IFFALSE 60369
// begin result := true ;
60357: LD_ADDR_VAR 0 1
60361: PUSH
60362: LD_INT 1
60364: ST_TO_ADDR
// exit ;
60365: POP
60366: POP
60367: GO 60373
// end ;
60369: GO 60329
60371: POP
60372: POP
// end ;
60373: LD_VAR 0 1
60377: RET
// function CanWinLoose ; begin
60378: LD_INT 0
60380: PPUSH
// result := true ;
60381: LD_ADDR_VAR 0 1
60385: PUSH
60386: LD_INT 1
60388: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
60389: CALL_OW 531
60393: IFFALSE 60405
60395: PUSH
60396: CALL_OW 519
60400: PUSH
60401: LD_INT 1
60403: GREATER
60404: AND
60405: IFFALSE 60415
// result := false ;
60407: LD_ADDR_VAR 0 1
60411: PUSH
60412: LD_INT 0
60414: ST_TO_ADDR
// end ;
60415: LD_VAR 0 1
60419: RET
// function HasPower ( i ) ; begin
60420: LD_INT 0
60422: PPUSH
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
60423: LD_ADDR_VAR 0 2
60427: PUSH
60428: LD_INT 22
60430: PUSH
60431: LD_VAR 0 1
60435: PUSH
60436: EMPTY
60437: LIST
60438: LIST
60439: PUSH
60440: LD_INT 2
60442: PUSH
60443: LD_INT 21
60445: PUSH
60446: LD_INT 1
60448: PUSH
60449: EMPTY
60450: LIST
60451: LIST
60452: PUSH
60453: LD_INT 33
60455: PUSH
60456: LD_INT 3
60458: PUSH
60459: EMPTY
60460: LIST
60461: LIST
60462: PUSH
60463: LD_INT 33
60465: PUSH
60466: LD_INT 5
60468: PUSH
60469: EMPTY
60470: LIST
60471: LIST
60472: PUSH
60473: EMPTY
60474: LIST
60475: LIST
60476: LIST
60477: LIST
60478: PUSH
60479: EMPTY
60480: LIST
60481: LIST
60482: PPUSH
60483: CALL_OW 69
60487: ST_TO_ADDR
// end ; end_of_file
60488: LD_VAR 0 2
60492: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin end ;
60493: PPOPN 6
60495: END
// on MapStart ( p ) do begin if mpGameType = GameTypeCoop then
60496: LD_EXP 3
60500: PUSH
60501: LD_INT 4
60503: EQUAL
60504: IFFALSE 60540
// begin ToLua ( setGameDifficulty( & Difficulty & ) ) ;
60506: LD_STRING setGameDifficulty(
60508: PUSH
60509: LD_OWVAR 67
60513: STR
60514: PUSH
60515: LD_STRING )
60517: STR
60518: PPUSH
60519: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
60523: LD_STRING displayDifficulty(
60525: PUSH
60526: LD_OWVAR 67
60530: STR
60531: PUSH
60532: LD_STRING )
60534: STR
60535: PPUSH
60536: CALL_OW 559
// end ; SOS_MapStart ( ) ;
60540: CALL 60569 0 0
// end ; end_of_file
60544: PPOPN 1
60546: END
// every 0 0$1 do
60547: GO 60549
60549: DISABLE
// begin enable ;
60550: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
60551: LD_STRING updateTimer(
60553: PUSH
60554: LD_OWVAR 1
60558: STR
60559: PUSH
60560: LD_STRING );
60562: STR
60563: PPUSH
60564: CALL_OW 559
// end ;
60568: END
// export function SOS_MapStart ( ) ; begin
60569: LD_INT 0
60571: PPUSH
// UpdateFactoryWaypoints ( ) ;
60572: CALL 61503 0 0
// UpdateWarehouseGatheringPoints ( ) ;
60576: CALL 61755 0 0
// ParseMultiDataToLua ( ) ;
60580: CALL 61902 0 0
// ToLua ( setSpecLogoNumber( & 2 & , & 1 & ) ) ;
60584: LD_STRING setSpecLogoNumber(
60586: PUSH
60587: LD_INT 2
60589: STR
60590: PUSH
60591: LD_STRING ,
60593: STR
60594: PUSH
60595: LD_INT 1
60597: STR
60598: PUSH
60599: LD_STRING )
60601: STR
60602: PPUSH
60603: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 3 & , & 2 & ) ) ;
60607: LD_STRING setSpecLogoNumber(
60609: PUSH
60610: LD_INT 3
60612: STR
60613: PUSH
60614: LD_STRING ,
60616: STR
60617: PUSH
60618: LD_INT 2
60620: STR
60621: PUSH
60622: LD_STRING )
60624: STR
60625: PPUSH
60626: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 4 & , & 3 & ) ) ;
60630: LD_STRING setSpecLogoNumber(
60632: PUSH
60633: LD_INT 4
60635: STR
60636: PUSH
60637: LD_STRING ,
60639: STR
60640: PUSH
60641: LD_INT 3
60643: STR
60644: PUSH
60645: LD_STRING )
60647: STR
60648: PPUSH
60649: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 5 & , & 4 & ) ) ;
60653: LD_STRING setSpecLogoNumber(
60655: PUSH
60656: LD_INT 5
60658: STR
60659: PUSH
60660: LD_STRING ,
60662: STR
60663: PUSH
60664: LD_INT 4
60666: STR
60667: PUSH
60668: LD_STRING )
60670: STR
60671: PPUSH
60672: CALL_OW 559
// end ;
60676: LD_VAR 0 1
60680: RET
// export function UpdateSpectatorBar ; var i , j , crates , oil , sib , people , base , bases ; begin
60681: LD_INT 0
60683: PPUSH
60684: PPUSH
60685: PPUSH
60686: PPUSH
60687: PPUSH
60688: PPUSH
60689: PPUSH
60690: PPUSH
60691: PPUSH
// for i := 1 to 8 do
60692: LD_ADDR_VAR 0 2
60696: PUSH
60697: DOUBLE
60698: LD_INT 1
60700: DEC
60701: ST_TO_ADDR
60702: LD_INT 8
60704: PUSH
60705: FOR_TO
60706: IFFALSE 61091
// begin if mpSidePositions [ i ] then
60708: LD_EXP 7
60712: PUSH
60713: LD_VAR 0 2
60717: ARRAY
60718: IFFALSE 61089
// begin people := Count ( FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) ) ;
60720: LD_ADDR_VAR 0 7
60724: PUSH
60725: LD_INT 22
60727: PUSH
60728: LD_VAR 0 2
60732: PUSH
60733: EMPTY
60734: LIST
60735: LIST
60736: PUSH
60737: LD_INT 21
60739: PUSH
60740: LD_INT 1
60742: PUSH
60743: EMPTY
60744: LIST
60745: LIST
60746: PUSH
60747: EMPTY
60748: LIST
60749: LIST
60750: PPUSH
60751: CALL_OW 69
60755: PPUSH
60756: CALL 12014 0 1
60760: ST_TO_ADDR
// bases := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
60761: LD_ADDR_VAR 0 9
60765: PUSH
60766: LD_INT 22
60768: PUSH
60769: LD_VAR 0 2
60773: PUSH
60774: EMPTY
60775: LIST
60776: LIST
60777: PUSH
60778: LD_INT 2
60780: PUSH
60781: LD_INT 30
60783: PUSH
60784: LD_INT 0
60786: PUSH
60787: EMPTY
60788: LIST
60789: LIST
60790: PUSH
60791: LD_INT 30
60793: PUSH
60794: LD_INT 1
60796: PUSH
60797: EMPTY
60798: LIST
60799: LIST
60800: PUSH
60801: EMPTY
60802: LIST
60803: LIST
60804: LIST
60805: PUSH
60806: EMPTY
60807: LIST
60808: LIST
60809: PPUSH
60810: CALL_OW 69
60814: ST_TO_ADDR
// crates := 0 ;
60815: LD_ADDR_VAR 0 4
60819: PUSH
60820: LD_INT 0
60822: ST_TO_ADDR
// oil := 0 ;
60823: LD_ADDR_VAR 0 5
60827: PUSH
60828: LD_INT 0
60830: ST_TO_ADDR
// sib := 0 ;
60831: LD_ADDR_VAR 0 6
60835: PUSH
60836: LD_INT 0
60838: ST_TO_ADDR
// if bases then
60839: LD_VAR 0 9
60843: IFFALSE 60949
// begin for j in bases do
60845: LD_ADDR_VAR 0 3
60849: PUSH
60850: LD_VAR 0 9
60854: PUSH
60855: FOR_IN
60856: IFFALSE 60947
// begin base := GetBase ( j ) ;
60858: LD_ADDR_VAR 0 8
60862: PUSH
60863: LD_VAR 0 3
60867: PPUSH
60868: CALL_OW 274
60872: ST_TO_ADDR
// crates := crates + GetResourceType ( base , mat_cans ) ;
60873: LD_ADDR_VAR 0 4
60877: PUSH
60878: LD_VAR 0 4
60882: PUSH
60883: LD_VAR 0 8
60887: PPUSH
60888: LD_INT 1
60890: PPUSH
60891: CALL_OW 275
60895: PLUS
60896: ST_TO_ADDR
// oil := oil + GetResourceType ( base , mat_oil ) ;
60897: LD_ADDR_VAR 0 5
60901: PUSH
60902: LD_VAR 0 5
60906: PUSH
60907: LD_VAR 0 8
60911: PPUSH
60912: LD_INT 2
60914: PPUSH
60915: CALL_OW 275
60919: PLUS
60920: ST_TO_ADDR
// sib := sib + GetResourceType ( base , mat_siberit ) ;
60921: LD_ADDR_VAR 0 6
60925: PUSH
60926: LD_VAR 0 6
60930: PUSH
60931: LD_VAR 0 8
60935: PPUSH
60936: LD_INT 3
60938: PPUSH
60939: CALL_OW 275
60943: PLUS
60944: ST_TO_ADDR
// end ;
60945: GO 60855
60947: POP
60948: POP
// end ; ToLua ( setSpecText( & i & , & 2 & , & crates & ) ) ;
60949: LD_STRING setSpecText(
60951: PUSH
60952: LD_VAR 0 2
60956: STR
60957: PUSH
60958: LD_STRING ,
60960: STR
60961: PUSH
60962: LD_INT 2
60964: STR
60965: PUSH
60966: LD_STRING ,
60968: STR
60969: PUSH
60970: LD_VAR 0 4
60974: STR
60975: PUSH
60976: LD_STRING )
60978: STR
60979: PPUSH
60980: CALL_OW 559
// ToLua ( setSpecText( & i & , & 3 & , & oil & ) ) ;
60984: LD_STRING setSpecText(
60986: PUSH
60987: LD_VAR 0 2
60991: STR
60992: PUSH
60993: LD_STRING ,
60995: STR
60996: PUSH
60997: LD_INT 3
60999: STR
61000: PUSH
61001: LD_STRING ,
61003: STR
61004: PUSH
61005: LD_VAR 0 5
61009: STR
61010: PUSH
61011: LD_STRING )
61013: STR
61014: PPUSH
61015: CALL_OW 559
// ToLua ( setSpecText( & i & , & 4 & , & sib & ) ) ;
61019: LD_STRING setSpecText(
61021: PUSH
61022: LD_VAR 0 2
61026: STR
61027: PUSH
61028: LD_STRING ,
61030: STR
61031: PUSH
61032: LD_INT 4
61034: STR
61035: PUSH
61036: LD_STRING ,
61038: STR
61039: PUSH
61040: LD_VAR 0 6
61044: STR
61045: PUSH
61046: LD_STRING )
61048: STR
61049: PPUSH
61050: CALL_OW 559
// ToLua ( setSpecText( & i & , & 5 & , & people & ) ) ;
61054: LD_STRING setSpecText(
61056: PUSH
61057: LD_VAR 0 2
61061: STR
61062: PUSH
61063: LD_STRING ,
61065: STR
61066: PUSH
61067: LD_INT 5
61069: STR
61070: PUSH
61071: LD_STRING ,
61073: STR
61074: PUSH
61075: LD_VAR 0 7
61079: STR
61080: PUSH
61081: LD_STRING )
61083: STR
61084: PPUSH
61085: CALL_OW 559
// end ; end ;
61089: GO 60705
61091: POP
61092: POP
// end ;
61093: LD_VAR 0 1
61097: RET
// every 20 + 0 0$5 trigger FilterAllUnits ( [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) do
61098: LD_INT 2
61100: PUSH
61101: LD_INT 30
61103: PUSH
61104: LD_INT 0
61106: PUSH
61107: EMPTY
61108: LIST
61109: LIST
61110: PUSH
61111: LD_INT 30
61113: PUSH
61114: LD_INT 1
61116: PUSH
61117: EMPTY
61118: LIST
61119: LIST
61120: PUSH
61121: EMPTY
61122: LIST
61123: LIST
61124: LIST
61125: PPUSH
61126: CALL_OW 69
61130: IFFALSE 61140
61132: GO 61134
61134: DISABLE
// begin enable ;
61135: ENABLE
// UpdateSpectatorBar ;
61136: CALL 60681 0 0
// end ;
61140: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
61141: LD_INT 0
61143: PPUSH
// end ;
61144: LD_VAR 0 12
61148: RET
// export factoryWaypoints , factoryWaypointsDrivers ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
61149: LD_INT 0
61151: PPUSH
61152: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
61153: LD_VAR 0 1
61157: NOT
61158: IFTRUE 61177
61160: PUSH
61161: LD_VAR 0 2
61165: PPUSH
61166: LD_VAR 0 3
61170: PPUSH
61171: CALL_OW 488
61175: NOT
61176: OR
61177: IFTRUE 61212
61179: PUSH
61180: LD_VAR 0 1
61184: PPUSH
61185: CALL_OW 266
61189: PUSH
61190: LD_INT 3
61192: NONEQUAL
61193: IFFALSE 61211
61195: PUSH
61196: LD_VAR 0 1
61200: PPUSH
61201: CALL_OW 247
61205: PUSH
61206: LD_INT 1
61208: EQUAL
61209: NOT
61210: AND
61211: OR
61212: IFFALSE 61216
// exit ;
61214: GO 61498
// if GetType ( factory ) = unit_human then
61216: LD_VAR 0 1
61220: PPUSH
61221: CALL_OW 247
61225: PUSH
61226: LD_INT 1
61228: EQUAL
61229: IFFALSE 61246
// factory := IsInUnit ( factory ) ;
61231: LD_ADDR_VAR 0 1
61235: PUSH
61236: LD_VAR 0 1
61240: PPUSH
61241: CALL_OW 310
61245: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
61246: LD_VAR 0 1
61250: PPUSH
61251: CALL_OW 266
61255: PUSH
61256: LD_INT 3
61258: NONEQUAL
61259: IFFALSE 61263
// exit ;
61261: GO 61498
// for i := 1 to Count ( factoryWaypoints ) do
61263: LD_ADDR_VAR 0 5
61267: PUSH
61268: DOUBLE
61269: LD_INT 1
61271: DEC
61272: ST_TO_ADDR
61273: LD_EXP 59
61277: PPUSH
61278: CALL 12014 0 1
61282: PUSH
61283: FOR_TO
61284: IFFALSE 61446
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
61286: LD_VAR 0 2
61290: PPUSH
61291: LD_VAR 0 3
61295: PPUSH
61296: CALL_OW 428
61300: PUSH
61301: LD_EXP 59
61305: PUSH
61306: LD_VAR 0 5
61310: ARRAY
61311: PUSH
61312: LD_INT 2
61314: ARRAY
61315: EQUAL
61316: IFFALSE 61348
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
61318: LD_ADDR_EXP 59
61322: PUSH
61323: LD_EXP 59
61327: PPUSH
61328: LD_VAR 0 5
61332: PPUSH
61333: CALL_OW 3
61337: ST_TO_ADDR
// UpdateFactoryWaypoints ;
61338: CALL 61503 0 0
// exit ;
61342: POP
61343: POP
61344: GO 61498
// end else
61346: GO 61444
// if factory = factoryWaypoints [ i ] [ 2 ] then
61348: LD_VAR 0 1
61352: PUSH
61353: LD_EXP 59
61357: PUSH
61358: LD_VAR 0 5
61362: ARRAY
61363: PUSH
61364: LD_INT 2
61366: ARRAY
61367: EQUAL
61368: IFFALSE 61444
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
61370: LD_ADDR_EXP 59
61374: PUSH
61375: LD_EXP 59
61379: PPUSH
61380: LD_VAR 0 5
61384: PPUSH
61385: CALL_OW 3
61389: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
61390: LD_ADDR_EXP 59
61394: PUSH
61395: LD_EXP 59
61399: PPUSH
61400: LD_VAR 0 1
61404: PPUSH
61405: CALL_OW 255
61409: PUSH
61410: LD_VAR 0 1
61414: PUSH
61415: LD_VAR 0 2
61419: PUSH
61420: LD_VAR 0 3
61424: PUSH
61425: EMPTY
61426: LIST
61427: LIST
61428: LIST
61429: LIST
61430: PPUSH
61431: CALL 47946 0 2
61435: ST_TO_ADDR
// UpdateFactoryWaypoints ;
61436: CALL 61503 0 0
// exit ;
61440: POP
61441: POP
61442: GO 61498
// end ; end ;
61444: GO 61283
61446: POP
61447: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
61448: LD_ADDR_EXP 59
61452: PUSH
61453: LD_EXP 59
61457: PPUSH
61458: LD_VAR 0 1
61462: PPUSH
61463: CALL_OW 255
61467: PUSH
61468: LD_VAR 0 1
61472: PUSH
61473: LD_VAR 0 2
61477: PUSH
61478: LD_VAR 0 3
61482: PUSH
61483: EMPTY
61484: LIST
61485: LIST
61486: LIST
61487: LIST
61488: PPUSH
61489: CALL 47946 0 2
61493: ST_TO_ADDR
// UpdateFactoryWaypoints ;
61494: CALL 61503 0 0
// end ;
61498: LD_VAR 0 4
61502: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
61503: LD_INT 0
61505: PPUSH
61506: PPUSH
61507: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
61508: LD_STRING resetFactoryWaypoint();
61510: PPUSH
61511: CALL_OW 559
// if factoryWaypoints then
61515: LD_EXP 59
61519: IFFALSE 61640
// begin list := factoryWaypoints ;
61521: LD_ADDR_VAR 0 3
61525: PUSH
61526: LD_EXP 59
61530: ST_TO_ADDR
// for i := 1 to list do
61531: LD_ADDR_VAR 0 2
61535: PUSH
61536: DOUBLE
61537: LD_INT 1
61539: DEC
61540: ST_TO_ADDR
61541: LD_VAR 0 3
61545: PUSH
61546: FOR_TO
61547: IFFALSE 61638
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
61549: LD_STRING setFactoryWaypointXY(
61551: PUSH
61552: LD_VAR 0 3
61556: PUSH
61557: LD_VAR 0 2
61561: ARRAY
61562: PUSH
61563: LD_INT 1
61565: ARRAY
61566: STR
61567: PUSH
61568: LD_STRING ,
61570: STR
61571: PUSH
61572: LD_VAR 0 3
61576: PUSH
61577: LD_VAR 0 2
61581: ARRAY
61582: PUSH
61583: LD_INT 2
61585: ARRAY
61586: STR
61587: PUSH
61588: LD_STRING ,
61590: STR
61591: PUSH
61592: LD_VAR 0 3
61596: PUSH
61597: LD_VAR 0 2
61601: ARRAY
61602: PUSH
61603: LD_INT 3
61605: ARRAY
61606: STR
61607: PUSH
61608: LD_STRING ,
61610: STR
61611: PUSH
61612: LD_VAR 0 3
61616: PUSH
61617: LD_VAR 0 2
61621: ARRAY
61622: PUSH
61623: LD_INT 4
61625: ARRAY
61626: STR
61627: PUSH
61628: LD_STRING )
61630: STR
61631: PPUSH
61632: CALL_OW 559
61636: GO 61546
61638: POP
61639: POP
// end ; end ;
61640: LD_VAR 0 1
61644: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
61645: LD_INT 0
61647: PPUSH
// if HexInfo ( x , y ) = warehouse then
61648: LD_VAR 0 2
61652: PPUSH
61653: LD_VAR 0 3
61657: PPUSH
61658: CALL_OW 428
61662: PUSH
61663: LD_VAR 0 1
61667: EQUAL
61668: IFFALSE 61695
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
61670: LD_ADDR_EXP 61
61674: PUSH
61675: LD_EXP 61
61679: PPUSH
61680: LD_VAR 0 1
61684: PPUSH
61685: LD_INT 0
61687: PPUSH
61688: CALL_OW 1
61692: ST_TO_ADDR
61693: GO 61746
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
61695: LD_ADDR_EXP 61
61699: PUSH
61700: LD_EXP 61
61704: PPUSH
61705: LD_VAR 0 1
61709: PPUSH
61710: LD_VAR 0 1
61714: PPUSH
61715: CALL_OW 255
61719: PUSH
61720: LD_VAR 0 1
61724: PUSH
61725: LD_VAR 0 2
61729: PUSH
61730: LD_VAR 0 3
61734: PUSH
61735: EMPTY
61736: LIST
61737: LIST
61738: LIST
61739: LIST
61740: PPUSH
61741: CALL_OW 1
61745: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
61746: CALL 61755 0 0
// end ;
61750: LD_VAR 0 4
61754: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
61755: LD_INT 0
61757: PPUSH
61758: PPUSH
61759: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
61760: LD_STRING resetWarehouseGatheringPoints();
61762: PPUSH
61763: CALL_OW 559
// if warehouseGatheringPoints then
61767: LD_EXP 61
61771: IFFALSE 61897
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
61773: LD_ADDR_VAR 0 3
61777: PUSH
61778: LD_EXP 61
61782: PPUSH
61783: CALL 51880 0 1
61787: ST_TO_ADDR
// for i := 1 to list do
61788: LD_ADDR_VAR 0 2
61792: PUSH
61793: DOUBLE
61794: LD_INT 1
61796: DEC
61797: ST_TO_ADDR
61798: LD_VAR 0 3
61802: PUSH
61803: FOR_TO
61804: IFFALSE 61895
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
61806: LD_STRING setWarehouseGatheringPointXY(
61808: PUSH
61809: LD_VAR 0 3
61813: PUSH
61814: LD_VAR 0 2
61818: ARRAY
61819: PUSH
61820: LD_INT 1
61822: ARRAY
61823: STR
61824: PUSH
61825: LD_STRING ,
61827: STR
61828: PUSH
61829: LD_VAR 0 3
61833: PUSH
61834: LD_VAR 0 2
61838: ARRAY
61839: PUSH
61840: LD_INT 2
61842: ARRAY
61843: STR
61844: PUSH
61845: LD_STRING ,
61847: STR
61848: PUSH
61849: LD_VAR 0 3
61853: PUSH
61854: LD_VAR 0 2
61858: ARRAY
61859: PUSH
61860: LD_INT 3
61862: ARRAY
61863: STR
61864: PUSH
61865: LD_STRING ,
61867: STR
61868: PUSH
61869: LD_VAR 0 3
61873: PUSH
61874: LD_VAR 0 2
61878: ARRAY
61879: PUSH
61880: LD_INT 4
61882: ARRAY
61883: STR
61884: PUSH
61885: LD_STRING )
61887: STR
61888: PPUSH
61889: CALL_OW 559
61893: GO 61803
61895: POP
61896: POP
// end ; end ;
61897: LD_VAR 0 1
61901: RET
// function ParseMultiDataToLua ( ) ; var i ; begin
61902: LD_INT 0
61904: PPUSH
61905: PPUSH
// if not mpSidePositions then
61906: LD_EXP 7
61910: NOT
61911: IFFALSE 61915
// exit ;
61913: GO 61986
// result :=  ;
61915: LD_ADDR_VAR 0 1
61919: PUSH
61920: LD_STRING 
61922: ST_TO_ADDR
// for i := 1 to 8 do
61923: LD_ADDR_VAR 0 2
61927: PUSH
61928: DOUBLE
61929: LD_INT 1
61931: DEC
61932: ST_TO_ADDR
61933: LD_INT 8
61935: PUSH
61936: FOR_TO
61937: IFFALSE 61967
// begin result := result & mpSidePositions [ i ] & ; ;
61939: LD_ADDR_VAR 0 1
61943: PUSH
61944: LD_VAR 0 1
61948: PUSH
61949: LD_EXP 7
61953: PUSH
61954: LD_VAR 0 2
61958: ARRAY
61959: STR
61960: PUSH
61961: LD_STRING ;
61963: STR
61964: ST_TO_ADDR
// end ;
61965: GO 61936
61967: POP
61968: POP
// ToLua ( setMultiplayerRealPosition(" & result & "); ) ;
61969: LD_STRING setMultiplayerRealPosition("
61971: PUSH
61972: LD_VAR 0 1
61976: STR
61977: PUSH
61978: LD_STRING ");
61980: STR
61981: PPUSH
61982: CALL_OW 559
// end ;
61986: LD_VAR 0 1
61990: RET
