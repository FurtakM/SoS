// starting begin ResetFog ;
   0: CALL_OW 335
// InitMultiplayer ;
   4: CALL 2528 0 0
// InitMultiplayerSettings ;
   8: CALL 17 0 0
// StartMultiplayer ;
  12: CALL 2904 0 0
// end ; end_of_file
  16: END
// export function InitMultiplayerSettings ; begin
  17: LD_INT 0
  19: PPUSH
// mpGameSettingsKeys := [ 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 0 , 0 , 1 , 0 , 1 , 1 ] ;
  20: LD_ADDR_EXP 4
  24: PUSH
  25: LD_INT 1
  27: PUSH
  28: LD_INT 1
  30: PUSH
  31: LD_INT 1
  33: PUSH
  34: LD_INT 1
  36: PUSH
  37: LD_INT 1
  39: PUSH
  40: LD_INT 1
  42: PUSH
  43: LD_INT 1
  45: PUSH
  46: LD_INT 1
  48: PUSH
  49: LD_INT 1
  51: PUSH
  52: LD_INT 1
  54: PUSH
  55: LD_INT 1
  57: PUSH
  58: LD_INT 1
  60: PUSH
  61: LD_INT 1
  63: PUSH
  64: LD_INT 1
  66: PUSH
  67: LD_INT 1
  69: PUSH
  70: LD_INT 0
  72: PUSH
  73: LD_INT 0
  75: PUSH
  76: LD_INT 1
  78: PUSH
  79: LD_INT 0
  81: PUSH
  82: LD_INT 1
  84: PUSH
  85: LD_INT 1
  87: PUSH
  88: EMPTY
  89: LIST
  90: LIST
  91: LIST
  92: LIST
  93: LIST
  94: LIST
  95: LIST
  96: LIST
  97: LIST
  98: LIST
  99: LIST
 100: LIST
 101: LIST
 102: LIST
 103: LIST
 104: LIST
 105: LIST
 106: LIST
 107: LIST
 108: LIST
 109: LIST
 110: ST_TO_ADDR
// mpGameSettingsValues := [ [ 0 , 1 ] , [ 9 , 12 , 15 , 24 ] , [ 1 , 3 , 5 , 7 ] , [ [ 0 , 0 , 0 ] , [ 100 , 30 , 0 ] , [ 200 , 75 , 10 ] , [ 500 , 150 , 30 ] ] , [ 1 , 2 , 3 , 4 ] , [ 0 , 1 , 2 ] , [ 0 , 1 , 2 ] , [ 250 , 350 , 500 , 1000 , 2000 ] , [ 0 , 2 ] , [ 0 , 5 5$00 , 10 10$00 , 15 15$00 , 20 20$00 , 30 30$00 ] , [ 0 , 1 ] , [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] , [ 0 , 1 ] , [ 0 , 6 6$30 , 3 3$30 ] , [ 0 , 2 , 4 , 6 ] , [ ] , [ ] , [ 0 , 1 , 15 15$0 , 25 25$0 , 30 30$0 , 45 45$0 , 60 60$0 , 90 90$0 , 100 100$0 , 120 120$0 , 180 180$0 ] , [ ] , [ 0 , 1 , 2 , 4 ] , [ 0 , 3 3$0 , 5 5$0 , 8 8$0 , 10 10$0 , 12 12$0 , 15 15$0 , 20 20$0 , 30 30$0 ] ] ;
 111: LD_ADDR_EXP 5
 115: PUSH
 116: LD_INT 0
 118: PUSH
 119: LD_INT 1
 121: PUSH
 122: EMPTY
 123: LIST
 124: LIST
 125: PUSH
 126: LD_INT 9
 128: PUSH
 129: LD_INT 12
 131: PUSH
 132: LD_INT 15
 134: PUSH
 135: LD_INT 24
 137: PUSH
 138: EMPTY
 139: LIST
 140: LIST
 141: LIST
 142: LIST
 143: PUSH
 144: LD_INT 1
 146: PUSH
 147: LD_INT 3
 149: PUSH
 150: LD_INT 5
 152: PUSH
 153: LD_INT 7
 155: PUSH
 156: EMPTY
 157: LIST
 158: LIST
 159: LIST
 160: LIST
 161: PUSH
 162: LD_INT 0
 164: PUSH
 165: LD_INT 0
 167: PUSH
 168: LD_INT 0
 170: PUSH
 171: EMPTY
 172: LIST
 173: LIST
 174: LIST
 175: PUSH
 176: LD_INT 100
 178: PUSH
 179: LD_INT 30
 181: PUSH
 182: LD_INT 0
 184: PUSH
 185: EMPTY
 186: LIST
 187: LIST
 188: LIST
 189: PUSH
 190: LD_INT 200
 192: PUSH
 193: LD_INT 75
 195: PUSH
 196: LD_INT 10
 198: PUSH
 199: EMPTY
 200: LIST
 201: LIST
 202: LIST
 203: PUSH
 204: LD_INT 500
 206: PUSH
 207: LD_INT 150
 209: PUSH
 210: LD_INT 30
 212: PUSH
 213: EMPTY
 214: LIST
 215: LIST
 216: LIST
 217: PUSH
 218: EMPTY
 219: LIST
 220: LIST
 221: LIST
 222: LIST
 223: PUSH
 224: LD_INT 1
 226: PUSH
 227: LD_INT 2
 229: PUSH
 230: LD_INT 3
 232: PUSH
 233: LD_INT 4
 235: PUSH
 236: EMPTY
 237: LIST
 238: LIST
 239: LIST
 240: LIST
 241: PUSH
 242: LD_INT 0
 244: PUSH
 245: LD_INT 1
 247: PUSH
 248: LD_INT 2
 250: PUSH
 251: EMPTY
 252: LIST
 253: LIST
 254: LIST
 255: PUSH
 256: LD_INT 0
 258: PUSH
 259: LD_INT 1
 261: PUSH
 262: LD_INT 2
 264: PUSH
 265: EMPTY
 266: LIST
 267: LIST
 268: LIST
 269: PUSH
 270: LD_INT 250
 272: PUSH
 273: LD_INT 350
 275: PUSH
 276: LD_INT 500
 278: PUSH
 279: LD_INT 1000
 281: PUSH
 282: LD_INT 2000
 284: PUSH
 285: EMPTY
 286: LIST
 287: LIST
 288: LIST
 289: LIST
 290: LIST
 291: PUSH
 292: LD_INT 0
 294: PUSH
 295: LD_INT 2
 297: PUSH
 298: EMPTY
 299: LIST
 300: LIST
 301: PUSH
 302: LD_INT 0
 304: PUSH
 305: LD_INT 10500
 307: PUSH
 308: LD_INT 21000
 310: PUSH
 311: LD_INT 31500
 313: PUSH
 314: LD_INT 42000
 316: PUSH
 317: LD_INT 63000
 319: PUSH
 320: EMPTY
 321: LIST
 322: LIST
 323: LIST
 324: LIST
 325: LIST
 326: LIST
 327: PUSH
 328: LD_INT 0
 330: PUSH
 331: LD_INT 1
 333: PUSH
 334: EMPTY
 335: LIST
 336: LIST
 337: PUSH
 338: LD_INT 1
 340: NEG
 341: PUSH
 342: LD_INT 350
 344: PUSH
 345: LD_INT 700
 347: PUSH
 348: LD_INT 1400
 350: PUSH
 351: LD_INT 0
 353: PUSH
 354: EMPTY
 355: LIST
 356: LIST
 357: LIST
 358: LIST
 359: LIST
 360: PUSH
 361: LD_INT 0
 363: PUSH
 364: LD_INT 1
 366: PUSH
 367: EMPTY
 368: LIST
 369: LIST
 370: PUSH
 371: LD_INT 0
 373: PUSH
 374: LD_INT 13650
 376: PUSH
 377: LD_INT 7350
 379: PUSH
 380: EMPTY
 381: LIST
 382: LIST
 383: LIST
 384: PUSH
 385: LD_INT 0
 387: PUSH
 388: LD_INT 2
 390: PUSH
 391: LD_INT 4
 393: PUSH
 394: LD_INT 6
 396: PUSH
 397: EMPTY
 398: LIST
 399: LIST
 400: LIST
 401: LIST
 402: PUSH
 403: EMPTY
 404: PUSH
 405: EMPTY
 406: PUSH
 407: LD_INT 0
 409: PUSH
 410: LD_INT 1
 412: PUSH
 413: LD_INT 31500
 415: PUSH
 416: LD_INT 52500
 418: PUSH
 419: LD_INT 63000
 421: PUSH
 422: LD_INT 94500
 424: PUSH
 425: LD_INT 126000
 427: PUSH
 428: LD_INT 189000
 430: PUSH
 431: LD_INT 210000
 433: PUSH
 434: LD_INT 252000
 436: PUSH
 437: LD_INT 378000
 439: PUSH
 440: EMPTY
 441: LIST
 442: LIST
 443: LIST
 444: LIST
 445: LIST
 446: LIST
 447: LIST
 448: LIST
 449: LIST
 450: LIST
 451: LIST
 452: PUSH
 453: EMPTY
 454: PUSH
 455: LD_INT 0
 457: PUSH
 458: LD_INT 1
 460: PUSH
 461: LD_INT 2
 463: PUSH
 464: LD_INT 4
 466: PUSH
 467: EMPTY
 468: LIST
 469: LIST
 470: LIST
 471: LIST
 472: PUSH
 473: LD_INT 0
 475: PUSH
 476: LD_INT 6300
 478: PUSH
 479: LD_INT 10500
 481: PUSH
 482: LD_INT 16800
 484: PUSH
 485: LD_INT 21000
 487: PUSH
 488: LD_INT 25200
 490: PUSH
 491: LD_INT 31500
 493: PUSH
 494: LD_INT 42000
 496: PUSH
 497: LD_INT 63000
 499: PUSH
 500: EMPTY
 501: LIST
 502: LIST
 503: LIST
 504: LIST
 505: LIST
 506: LIST
 507: LIST
 508: LIST
 509: LIST
 510: PUSH
 511: EMPTY
 512: LIST
 513: LIST
 514: LIST
 515: LIST
 516: LIST
 517: LIST
 518: LIST
 519: LIST
 520: LIST
 521: LIST
 522: LIST
 523: LIST
 524: LIST
 525: LIST
 526: LIST
 527: LIST
 528: LIST
 529: LIST
 530: LIST
 531: LIST
 532: LIST
 533: ST_TO_ADDR
// mpGameSettings := [ 1 , 15 , 4 , [ 100 , 30 , 0 ] , 3 , 1 , 2 , 250 , 0 , 0 , 1 , 0 0$20 , 1 , 0 0$20 , 3 , 0 , 0 , 15 15$0 , 0 , 0 , 3 3$0 ] ;
 534: LD_ADDR_EXP 6
 538: PUSH
 539: LD_INT 1
 541: PUSH
 542: LD_INT 15
 544: PUSH
 545: LD_INT 4
 547: PUSH
 548: LD_INT 100
 550: PUSH
 551: LD_INT 30
 553: PUSH
 554: LD_INT 0
 556: PUSH
 557: EMPTY
 558: LIST
 559: LIST
 560: LIST
 561: PUSH
 562: LD_INT 3
 564: PUSH
 565: LD_INT 1
 567: PUSH
 568: LD_INT 2
 570: PUSH
 571: LD_INT 250
 573: PUSH
 574: LD_INT 0
 576: PUSH
 577: LD_INT 0
 579: PUSH
 580: LD_INT 1
 582: PUSH
 583: LD_INT 700
 585: PUSH
 586: LD_INT 1
 588: PUSH
 589: LD_INT 700
 591: PUSH
 592: LD_INT 3
 594: PUSH
 595: LD_INT 0
 597: PUSH
 598: LD_INT 0
 600: PUSH
 601: LD_INT 31500
 603: PUSH
 604: LD_INT 0
 606: PUSH
 607: LD_INT 0
 609: PUSH
 610: LD_INT 6300
 612: PUSH
 613: EMPTY
 614: LIST
 615: LIST
 616: LIST
 617: LIST
 618: LIST
 619: LIST
 620: LIST
 621: LIST
 622: LIST
 623: LIST
 624: LIST
 625: LIST
 626: LIST
 627: LIST
 628: LIST
 629: LIST
 630: LIST
 631: LIST
 632: LIST
 633: LIST
 634: LIST
 635: ST_TO_ADDR
// mpGameType := GameTypeNormal ;
 636: LD_ADDR_EXP 3
 640: PUSH
 641: LD_INT 1
 643: ST_TO_ADDR
// your_side := 1 ;
 644: LD_ADDR_OWVAR 2
 648: PUSH
 649: LD_INT 1
 651: ST_TO_ADDR
// mpSidePositions := [ 1 , 2 , 3 , 4 , 0 , 0 , 0 , 0 ] ;
 652: LD_ADDR_EXP 7
 656: PUSH
 657: LD_INT 1
 659: PUSH
 660: LD_INT 2
 662: PUSH
 663: LD_INT 3
 665: PUSH
 666: LD_INT 4
 668: PUSH
 669: LD_INT 0
 671: PUSH
 672: LD_INT 0
 674: PUSH
 675: LD_INT 0
 677: PUSH
 678: LD_INT 0
 680: PUSH
 681: EMPTY
 682: LIST
 683: LIST
 684: LIST
 685: LIST
 686: LIST
 687: LIST
 688: LIST
 689: LIST
 690: ST_TO_ADDR
// mpSideTeams := [ 1 , 1 , 2 , 2 , 0 , 0 , 0 , 0 ] ;
 691: LD_ADDR_EXP 8
 695: PUSH
 696: LD_INT 1
 698: PUSH
 699: LD_INT 1
 701: PUSH
 702: LD_INT 2
 704: PUSH
 705: LD_INT 2
 707: PUSH
 708: LD_INT 0
 710: PUSH
 711: LD_INT 0
 713: PUSH
 714: LD_INT 0
 716: PUSH
 717: LD_INT 0
 719: PUSH
 720: EMPTY
 721: LIST
 722: LIST
 723: LIST
 724: LIST
 725: LIST
 726: LIST
 727: LIST
 728: LIST
 729: ST_TO_ADDR
// mpSideNations := [ 3 , 3 , 3 , 3 , 0 , 0 , 0 , 0 ] ;
 730: LD_ADDR_EXP 9
 734: PUSH
 735: LD_INT 3
 737: PUSH
 738: LD_INT 3
 740: PUSH
 741: LD_INT 3
 743: PUSH
 744: LD_INT 3
 746: PUSH
 747: LD_INT 0
 749: PUSH
 750: LD_INT 0
 752: PUSH
 753: LD_INT 0
 755: PUSH
 756: LD_INT 0
 758: PUSH
 759: EMPTY
 760: LIST
 761: LIST
 762: LIST
 763: LIST
 764: LIST
 765: LIST
 766: LIST
 767: LIST
 768: ST_TO_ADDR
// mpTeams := [ [ 1 , 2 ] , [ 3 , 4 ] ] ;
 769: LD_ADDR_EXP 10
 773: PUSH
 774: LD_INT 1
 776: PUSH
 777: LD_INT 2
 779: PUSH
 780: EMPTY
 781: LIST
 782: LIST
 783: PUSH
 784: LD_INT 3
 786: PUSH
 787: LD_INT 4
 789: PUSH
 790: EMPTY
 791: LIST
 792: LIST
 793: PUSH
 794: EMPTY
 795: LIST
 796: LIST
 797: ST_TO_ADDR
// mpTeamGame := true ;
 798: LD_ADDR_EXP 11
 802: PUSH
 803: LD_INT 1
 805: ST_TO_ADDR
// mpMapSize := [ 100 , 120 ] ;
 806: LD_ADDR_EXP 29
 810: PUSH
 811: LD_INT 100
 813: PUSH
 814: LD_INT 120
 816: PUSH
 817: EMPTY
 818: LIST
 819: LIST
 820: ST_TO_ADDR
// end ;
 821: LD_VAR 0 1
 825: RET
// export kingArea , kingCamArea ; export function GetMultiplayerMapData ( gameType ) ; var i , all , area , hasOil , hasSib , baseLevel , startPos ; begin
 826: LD_INT 0
 828: PPUSH
 829: PPUSH
 830: PPUSH
 831: PPUSH
 832: PPUSH
 833: PPUSH
 834: PPUSH
 835: PPUSH
// mpBuildUpAreas := [ BaseArea1 , BaseArea2 , BaseArea3 , BaseArea4 ] ;
 836: LD_ADDR_EXP 19
 840: PUSH
 841: LD_INT 5
 843: PUSH
 844: LD_INT 7
 846: PUSH
 847: LD_INT 6
 849: PUSH
 850: LD_INT 8
 852: PUSH
 853: EMPTY
 854: LIST
 855: LIST
 856: LIST
 857: LIST
 858: ST_TO_ADDR
// mpMarkedAreas := [ ] union mpBuildUpAreas ;
 859: LD_ADDR_EXP 18
 863: PUSH
 864: EMPTY
 865: PUSH
 866: LD_EXP 19
 870: UNION
 871: ST_TO_ADDR
// if gameType = GameTypeSurvival then
 872: LD_VAR 0 1
 876: PUSH
 877: LD_INT 2
 879: EQUAL
 880: IFFALSE 892
// baseLevel := 1 else
 882: LD_ADDR_VAR 0 8
 886: PUSH
 887: LD_INT 1
 889: ST_TO_ADDR
 890: GO 906
// baseLevel := mpGameSettings [ 1 ] ;
 892: LD_ADDR_VAR 0 8
 896: PUSH
 897: LD_EXP 6
 901: PUSH
 902: LD_INT 1
 904: ARRAY
 905: ST_TO_ADDR
// mpPeopleAmount := mpGameSettings [ 2 ] ;
 906: LD_ADDR_EXP 24
 910: PUSH
 911: LD_EXP 6
 915: PUSH
 916: LD_INT 2
 918: ARRAY
 919: ST_TO_ADDR
// mpPeopleSkill := mpGameSettings [ 3 ] ;
 920: LD_ADDR_EXP 25
 924: PUSH
 925: LD_EXP 6
 929: PUSH
 930: LD_INT 3
 932: ARRAY
 933: ST_TO_ADDR
// mpStartingResources := mpGameSettings [ 4 ] ;
 934: LD_ADDR_EXP 15
 938: PUSH
 939: LD_EXP 6
 943: PUSH
 944: LD_INT 4
 946: ARRAY
 947: ST_TO_ADDR
// mpShipments := mpGameSettings [ 5 ] ;
 948: LD_ADDR_EXP 27
 952: PUSH
 953: LD_EXP 6
 957: PUSH
 958: LD_INT 5
 960: ARRAY
 961: ST_TO_ADDR
// hasOil := mpGameSettings [ 6 ] > 0 ;
 962: LD_ADDR_VAR 0 6
 966: PUSH
 967: LD_EXP 6
 971: PUSH
 972: LD_INT 6
 974: ARRAY
 975: PUSH
 976: LD_INT 0
 978: GREATER
 979: ST_TO_ADDR
// hasSib := mpGameSettings [ 7 ] > 0 ;
 980: LD_ADDR_VAR 0 7
 984: PUSH
 985: LD_EXP 6
 989: PUSH
 990: LD_INT 7
 992: ARRAY
 993: PUSH
 994: LD_INT 0
 996: GREATER
 997: ST_TO_ADDR
// mpKingArea := 0 ;
 998: LD_ADDR_EXP 34
1002: PUSH
1003: LD_INT 0
1005: ST_TO_ADDR
// mpPoints := 0 ;
1006: LD_ADDR_EXP 35
1010: PUSH
1011: LD_INT 0
1013: ST_TO_ADDR
// mpEmissions := 0 ;
1014: LD_ADDR_EXP 37
1018: PUSH
1019: LD_INT 0
1021: ST_TO_ADDR
// kingArea := 0 ;
1022: LD_ADDR_EXP 1
1026: PUSH
1027: LD_INT 0
1029: ST_TO_ADDR
// kingCamArea := 0 ;
1030: LD_ADDR_EXP 2
1034: PUSH
1035: LD_INT 0
1037: ST_TO_ADDR
// if mpGameSettings [ 9 ] then
1038: LD_EXP 6
1042: PUSH
1043: LD_INT 9
1045: ARRAY
1046: IFFALSE 1249
// begin mpVehicles := [ [ [ us_light_wheeled , engine_combustion , control_manual , us_machine_gun ] , [ us_light_wheeled , engine_combustion , control_manual , us_light_gun ] , [ us_heavy_tracked , engine_combustion , control_manual , us_bulldozer , nation_american ] ] , [ [ ar_light_trike , engine_combustion , control_manual , ar_double_machine_gun ] , [ ar_light_trike , engine_combustion , control_manual , ar_light_gun ] , [ us_heavy_tracked , engine_combustion , control_manual , us_bulldozer , nation_american ] ] , [ [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun ] , [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun ] , [ us_heavy_tracked , engine_combustion , control_manual , us_bulldozer , nation_american ] ] ] ;
1048: LD_ADDR_EXP 36
1052: PUSH
1053: LD_INT 1
1055: PUSH
1056: LD_INT 1
1058: PUSH
1059: LD_INT 1
1061: PUSH
1062: LD_INT 2
1064: PUSH
1065: EMPTY
1066: LIST
1067: LIST
1068: LIST
1069: LIST
1070: PUSH
1071: LD_INT 1
1073: PUSH
1074: LD_INT 1
1076: PUSH
1077: LD_INT 1
1079: PUSH
1080: LD_INT 3
1082: PUSH
1083: EMPTY
1084: LIST
1085: LIST
1086: LIST
1087: LIST
1088: PUSH
1089: LD_INT 4
1091: PUSH
1092: LD_INT 1
1094: PUSH
1095: LD_INT 1
1097: PUSH
1098: LD_INT 14
1100: PUSH
1101: LD_INT 1
1103: PUSH
1104: EMPTY
1105: LIST
1106: LIST
1107: LIST
1108: LIST
1109: LIST
1110: PUSH
1111: EMPTY
1112: LIST
1113: LIST
1114: LIST
1115: PUSH
1116: LD_INT 12
1118: PUSH
1119: LD_INT 1
1121: PUSH
1122: LD_INT 1
1124: PUSH
1125: LD_INT 24
1127: PUSH
1128: EMPTY
1129: LIST
1130: LIST
1131: LIST
1132: LIST
1133: PUSH
1134: LD_INT 12
1136: PUSH
1137: LD_INT 1
1139: PUSH
1140: LD_INT 1
1142: PUSH
1143: LD_INT 23
1145: PUSH
1146: EMPTY
1147: LIST
1148: LIST
1149: LIST
1150: LIST
1151: PUSH
1152: LD_INT 4
1154: PUSH
1155: LD_INT 1
1157: PUSH
1158: LD_INT 1
1160: PUSH
1161: LD_INT 14
1163: PUSH
1164: LD_INT 1
1166: PUSH
1167: EMPTY
1168: LIST
1169: LIST
1170: LIST
1171: LIST
1172: LIST
1173: PUSH
1174: EMPTY
1175: LIST
1176: LIST
1177: LIST
1178: PUSH
1179: LD_INT 21
1181: PUSH
1182: LD_INT 1
1184: PUSH
1185: LD_INT 1
1187: PUSH
1188: LD_INT 42
1190: PUSH
1191: EMPTY
1192: LIST
1193: LIST
1194: LIST
1195: LIST
1196: PUSH
1197: LD_INT 21
1199: PUSH
1200: LD_INT 1
1202: PUSH
1203: LD_INT 1
1205: PUSH
1206: LD_INT 42
1208: PUSH
1209: EMPTY
1210: LIST
1211: LIST
1212: LIST
1213: LIST
1214: PUSH
1215: LD_INT 4
1217: PUSH
1218: LD_INT 1
1220: PUSH
1221: LD_INT 1
1223: PUSH
1224: LD_INT 14
1226: PUSH
1227: LD_INT 1
1229: PUSH
1230: EMPTY
1231: LIST
1232: LIST
1233: LIST
1234: LIST
1235: LIST
1236: PUSH
1237: EMPTY
1238: LIST
1239: LIST
1240: LIST
1241: PUSH
1242: EMPTY
1243: LIST
1244: LIST
1245: LIST
1246: ST_TO_ADDR
// end else
1247: GO 1334
// begin mpVehicles := [ [ [ us_heavy_tracked , engine_combustion , control_manual , us_bulldozer , nation_american ] ] , [ [ us_heavy_tracked , engine_combustion , control_manual , us_bulldozer , nation_american ] ] , [ [ us_heavy_tracked , engine_combustion , control_manual , us_bulldozer , nation_american ] ] ] ;
1249: LD_ADDR_EXP 36
1253: PUSH
1254: LD_INT 4
1256: PUSH
1257: LD_INT 1
1259: PUSH
1260: LD_INT 1
1262: PUSH
1263: LD_INT 14
1265: PUSH
1266: LD_INT 1
1268: PUSH
1269: EMPTY
1270: LIST
1271: LIST
1272: LIST
1273: LIST
1274: LIST
1275: PUSH
1276: EMPTY
1277: LIST
1278: PUSH
1279: LD_INT 4
1281: PUSH
1282: LD_INT 1
1284: PUSH
1285: LD_INT 1
1287: PUSH
1288: LD_INT 14
1290: PUSH
1291: LD_INT 1
1293: PUSH
1294: EMPTY
1295: LIST
1296: LIST
1297: LIST
1298: LIST
1299: LIST
1300: PUSH
1301: EMPTY
1302: LIST
1303: PUSH
1304: LD_INT 4
1306: PUSH
1307: LD_INT 1
1309: PUSH
1310: LD_INT 1
1312: PUSH
1313: LD_INT 14
1315: PUSH
1316: LD_INT 1
1318: PUSH
1319: EMPTY
1320: LIST
1321: LIST
1322: LIST
1323: LIST
1324: LIST
1325: PUSH
1326: EMPTY
1327: LIST
1328: PUSH
1329: EMPTY
1330: LIST
1331: LIST
1332: LIST
1333: ST_TO_ADDR
// end ; mpSharedVision := mpGameSettings [ 11 ] ;
1334: LD_ADDR_EXP 16
1338: PUSH
1339: LD_EXP 6
1343: PUSH
1344: LD_INT 11
1346: ARRAY
1347: ST_TO_ADDR
// mpBattleFlag := mpGameSettings [ 12 ] ;
1348: LD_ADDR_EXP 22
1352: PUSH
1353: LD_EXP 6
1357: PUSH
1358: LD_INT 12
1360: ARRAY
1361: ST_TO_ADDR
// mpSibDetection := mpGameSettings [ 13 ] ;
1362: LD_ADDR_EXP 26
1366: PUSH
1367: LD_EXP 6
1371: PUSH
1372: LD_INT 13
1374: ARRAY
1375: ST_TO_ADDR
// mpRespawn := mpGameSettings [ 14 ] ;
1376: LD_ADDR_EXP 33
1380: PUSH
1381: LD_EXP 6
1385: PUSH
1386: LD_INT 14
1388: ARRAY
1389: ST_TO_ADDR
// mpApemans := mpGameSettings [ 15 ] ;
1390: LD_ADDR_EXP 30
1394: PUSH
1395: LD_EXP 6
1399: PUSH
1400: LD_INT 15
1402: ARRAY
1403: ST_TO_ADDR
// mpSibBomb := mpGameSettings [ 18 ] ;
1404: LD_ADDR_EXP 28
1408: PUSH
1409: LD_EXP 6
1413: PUSH
1414: LD_INT 18
1416: ARRAY
1417: ST_TO_ADDR
// mpBuildUpTime := mpGameSettings [ 21 ] ;
1418: LD_ADDR_EXP 20
1422: PUSH
1423: LD_EXP 6
1427: PUSH
1428: LD_INT 21
1430: ARRAY
1431: ST_TO_ADDR
// mpApemansArea := [ ApeArea1 , ApeArea2 , ApeArea3 , ApeArea4 ] ;
1432: LD_ADDR_EXP 31
1436: PUSH
1437: LD_INT 10
1439: PUSH
1440: LD_INT 11
1442: PUSH
1443: LD_INT 12
1445: PUSH
1446: LD_INT 13
1448: PUSH
1449: EMPTY
1450: LIST
1451: LIST
1452: LIST
1453: LIST
1454: ST_TO_ADDR
// startPos := [ GetBuildingFromArea ( DepotArea1 , 2 ) , GetBuildingFromArea ( DepotArea2 , 0 ) , GetBuildingFromArea ( DepotArea3 , 3 ) , GetBuildingFromArea ( DepotArea4 , 5 ) ] ;
1455: LD_ADDR_VAR 0 9
1459: PUSH
1460: LD_INT 14
1462: PPUSH
1463: LD_INT 2
1465: PPUSH
1466: CALL 52701 0 2
1470: PUSH
1471: LD_INT 15
1473: PPUSH
1474: LD_INT 0
1476: PPUSH
1477: CALL 52701 0 2
1481: PUSH
1482: LD_INT 16
1484: PPUSH
1485: LD_INT 3
1487: PPUSH
1488: CALL 52701 0 2
1492: PUSH
1493: LD_INT 17
1495: PPUSH
1496: LD_INT 5
1498: PPUSH
1499: CALL 52701 0 2
1503: PUSH
1504: EMPTY
1505: LIST
1506: LIST
1507: LIST
1508: LIST
1509: ST_TO_ADDR
// for i := 1 to Count ( startPos ) do
1510: LD_ADDR_VAR 0 3
1514: PUSH
1515: DOUBLE
1516: LD_INT 1
1518: DEC
1519: ST_TO_ADDR
1520: LD_VAR 0 9
1524: PPUSH
1525: CALL 12050 0 1
1529: PUSH
1530: FOR_TO
1531: IFFALSE 1635
// mpStartPos := Replace ( mpStartPos , i , [ ShiftX ( startPos [ i ] [ 1 ] , startPos [ i ] [ 3 ] , 10 ) , ShiftY ( startPos [ i ] [ 2 ] , startPos [ i ] [ 3 ] , 10 ) ] ) ;
1533: LD_ADDR_EXP 21
1537: PUSH
1538: LD_EXP 21
1542: PPUSH
1543: LD_VAR 0 3
1547: PPUSH
1548: LD_VAR 0 9
1552: PUSH
1553: LD_VAR 0 3
1557: ARRAY
1558: PUSH
1559: LD_INT 1
1561: ARRAY
1562: PPUSH
1563: LD_VAR 0 9
1567: PUSH
1568: LD_VAR 0 3
1572: ARRAY
1573: PUSH
1574: LD_INT 3
1576: ARRAY
1577: PPUSH
1578: LD_INT 10
1580: PPUSH
1581: CALL_OW 272
1585: PUSH
1586: LD_VAR 0 9
1590: PUSH
1591: LD_VAR 0 3
1595: ARRAY
1596: PUSH
1597: LD_INT 2
1599: ARRAY
1600: PPUSH
1601: LD_VAR 0 9
1605: PUSH
1606: LD_VAR 0 3
1610: ARRAY
1611: PUSH
1612: LD_INT 3
1614: ARRAY
1615: PPUSH
1616: LD_INT 10
1618: PPUSH
1619: CALL_OW 273
1623: PUSH
1624: EMPTY
1625: LIST
1626: LIST
1627: PPUSH
1628: CALL_OW 1
1632: ST_TO_ADDR
1633: GO 1530
1635: POP
1636: POP
// if baseLevel >= 1 then
1637: LD_VAR 0 8
1641: PUSH
1642: LD_INT 1
1644: GREATEREQUAL
1645: IFFALSE 1657
// mpDepots := startPos ;
1647: LD_ADDR_EXP 14
1651: PUSH
1652: LD_VAR 0 9
1656: ST_TO_ADDR
// if hasOil then
1657: LD_VAR 0 6
1661: IFFALSE 1744
// begin all := ( mpGameSettings [ 6 ] = 2 ) ;
1663: LD_ADDR_VAR 0 4
1667: PUSH
1668: LD_EXP 6
1672: PUSH
1673: LD_INT 6
1675: ARRAY
1676: PUSH
1677: LD_INT 2
1679: EQUAL
1680: ST_TO_ADDR
// mpOilDeposits := [ GetSourcesFromArea ( OilArea1 , all ) , GetSourcesFromArea ( OilArea2 , all ) , GetSourcesFromArea ( OilArea3 , all ) , GetSourcesFromArea ( OilArea4 , all ) ] ;
1681: LD_ADDR_EXP 12
1685: PUSH
1686: LD_INT 18
1688: PPUSH
1689: LD_VAR 0 4
1693: PPUSH
1694: CALL 52534 0 2
1698: PUSH
1699: LD_INT 19
1701: PPUSH
1702: LD_VAR 0 4
1706: PPUSH
1707: CALL 52534 0 2
1711: PUSH
1712: LD_INT 20
1714: PPUSH
1715: LD_VAR 0 4
1719: PPUSH
1720: CALL 52534 0 2
1724: PUSH
1725: LD_INT 21
1727: PPUSH
1728: LD_VAR 0 4
1732: PPUSH
1733: CALL 52534 0 2
1737: PUSH
1738: EMPTY
1739: LIST
1740: LIST
1741: LIST
1742: LIST
1743: ST_TO_ADDR
// end ; if hasSib then
1744: LD_VAR 0 7
1748: IFFALSE 1831
// begin all := ( mpGameSettings [ 7 ] = 2 ) ;
1750: LD_ADDR_VAR 0 4
1754: PUSH
1755: LD_EXP 6
1759: PUSH
1760: LD_INT 7
1762: ARRAY
1763: PUSH
1764: LD_INT 2
1766: EQUAL
1767: ST_TO_ADDR
// mpSibDeposits := [ GetSourcesFromArea ( SibArea1 , all ) , GetSourcesFromArea ( SibArea2 , all ) , GetSourcesFromArea ( SibArea3 , all ) , GetSourcesFromArea ( SibArea4 , all ) ] ;
1768: LD_ADDR_EXP 13
1772: PUSH
1773: LD_INT 22
1775: PPUSH
1776: LD_VAR 0 4
1780: PPUSH
1781: CALL 52534 0 2
1785: PUSH
1786: LD_INT 23
1788: PPUSH
1789: LD_VAR 0 4
1793: PPUSH
1794: CALL 52534 0 2
1798: PUSH
1799: LD_INT 24
1801: PPUSH
1802: LD_VAR 0 4
1806: PPUSH
1807: CALL 52534 0 2
1811: PUSH
1812: LD_INT 25
1814: PPUSH
1815: LD_VAR 0 4
1819: PPUSH
1820: CALL 52534 0 2
1824: PUSH
1825: EMPTY
1826: LIST
1827: LIST
1828: LIST
1829: LIST
1830: ST_TO_ADDR
// end ; PlaceTreesToArea ( BigForestArea , [ 21 , 22 , 24 , 21 , 22 , 24 , 38 , 39 ] , rand ( 500 , 570 ) , 50 , 2 ) ;
1831: LD_INT 1
1833: PPUSH
1834: LD_INT 21
1836: PUSH
1837: LD_INT 22
1839: PUSH
1840: LD_INT 24
1842: PUSH
1843: LD_INT 21
1845: PUSH
1846: LD_INT 22
1848: PUSH
1849: LD_INT 24
1851: PUSH
1852: LD_INT 38
1854: PUSH
1855: LD_INT 39
1857: PUSH
1858: EMPTY
1859: LIST
1860: LIST
1861: LIST
1862: LIST
1863: LIST
1864: LIST
1865: LIST
1866: LIST
1867: PPUSH
1868: LD_INT 500
1870: PPUSH
1871: LD_INT 570
1873: PPUSH
1874: CALL_OW 12
1878: PPUSH
1879: LD_INT 50
1881: PPUSH
1882: LD_INT 2
1884: PPUSH
1885: CALL_OW 352
// if baseLevel then
1889: LD_VAR 0 8
1893: IFFALSE 1905
// area := BushForestSmallArea else
1895: LD_ADDR_VAR 0 5
1899: PUSH
1900: LD_INT 4
1902: ST_TO_ADDR
1903: GO 1913
// area := BushForestBigArea ;
1905: LD_ADDR_VAR 0 5
1909: PUSH
1910: LD_INT 3
1912: ST_TO_ADDR
// PlaceTreesToArea ( area , [ 38 , 39 , 37 ] , rand ( 300 , 350 ) , 10 , 3 ) ;
1913: LD_VAR 0 5
1917: PPUSH
1918: LD_INT 38
1920: PUSH
1921: LD_INT 39
1923: PUSH
1924: LD_INT 37
1926: PUSH
1927: EMPTY
1928: LIST
1929: LIST
1930: LIST
1931: PPUSH
1932: LD_INT 300
1934: PPUSH
1935: LD_INT 350
1937: PPUSH
1938: CALL_OW 12
1942: PPUSH
1943: LD_INT 10
1945: PPUSH
1946: LD_INT 3
1948: PPUSH
1949: CALL_OW 352
// PlaceTreesToArea ( BigForestArea , [ 38 , 39 , 37 ] , 80 , 10 , 3 ) ;
1953: LD_INT 1
1955: PPUSH
1956: LD_INT 38
1958: PUSH
1959: LD_INT 39
1961: PUSH
1962: LD_INT 37
1964: PUSH
1965: EMPTY
1966: LIST
1967: LIST
1968: LIST
1969: PPUSH
1970: LD_INT 80
1972: PPUSH
1973: LD_INT 10
1975: PPUSH
1976: LD_INT 3
1978: PPUSH
1979: CALL_OW 352
// end ;
1983: LD_VAR 0 2
1987: RET
// every 0 0$2 marked mpActive do var i , x , tmp , time , areas , normalTime , delayTime , maxTime ;
1988: GO 1990
1990: DISABLE
1991: LD_INT 0
1993: PPUSH
1994: PPUSH
1995: PPUSH
1996: PPUSH
1997: PPUSH
1998: PPUSH
1999: PPUSH
2000: PPUSH
// begin if not mpShipments then
2001: LD_EXP 27
2005: NOT
2006: IFFALSE 2010
// exit ;
2008: GO 2441
// case mpShipments of 1 :
2010: LD_EXP 27
2014: PUSH
2015: LD_INT 1
2017: DOUBLE
2018: EQUAL
2019: IFTRUE 2023
2021: GO 2058
2023: POP
// begin time := 0 0$30 ;
2024: LD_ADDR_VAR 0 4
2028: PUSH
2029: LD_INT 1050
2031: ST_TO_ADDR
// normalTime := 0 0$30 ;
2032: LD_ADDR_VAR 0 6
2036: PUSH
2037: LD_INT 1050
2039: ST_TO_ADDR
// maxTime := 1 1$20 ;
2040: LD_ADDR_VAR 0 8
2044: PUSH
2045: LD_INT 2800
2047: ST_TO_ADDR
// delayTime := 0 0$5 ;
2048: LD_ADDR_VAR 0 7
2052: PUSH
2053: LD_INT 175
2055: ST_TO_ADDR
// end ; 2 :
2056: GO 2188
2058: LD_INT 2
2060: DOUBLE
2061: EQUAL
2062: IFTRUE 2066
2064: GO 2101
2066: POP
// begin time := 0 0$25 ;
2067: LD_ADDR_VAR 0 4
2071: PUSH
2072: LD_INT 875
2074: ST_TO_ADDR
// normalTime := 0 0$25 ;
2075: LD_ADDR_VAR 0 6
2079: PUSH
2080: LD_INT 875
2082: ST_TO_ADDR
// maxTime := 1 1$10 ;
2083: LD_ADDR_VAR 0 8
2087: PUSH
2088: LD_INT 2450
2090: ST_TO_ADDR
// delayTime := 0 0$4 ;
2091: LD_ADDR_VAR 0 7
2095: PUSH
2096: LD_INT 140
2098: ST_TO_ADDR
// end ; 3 :
2099: GO 2188
2101: LD_INT 3
2103: DOUBLE
2104: EQUAL
2105: IFTRUE 2109
2107: GO 2144
2109: POP
// begin time := 0 0$20 ;
2110: LD_ADDR_VAR 0 4
2114: PUSH
2115: LD_INT 700
2117: ST_TO_ADDR
// normalTime := 0 0$20 ;
2118: LD_ADDR_VAR 0 6
2122: PUSH
2123: LD_INT 700
2125: ST_TO_ADDR
// maxTime := 1 1$00 ;
2126: LD_ADDR_VAR 0 8
2130: PUSH
2131: LD_INT 2100
2133: ST_TO_ADDR
// delayTime := 0 0$3 ;
2134: LD_ADDR_VAR 0 7
2138: PUSH
2139: LD_INT 105
2141: ST_TO_ADDR
// end ; 4 :
2142: GO 2188
2144: LD_INT 4
2146: DOUBLE
2147: EQUAL
2148: IFTRUE 2152
2150: GO 2187
2152: POP
// begin time := 0 0$15 ;
2153: LD_ADDR_VAR 0 4
2157: PUSH
2158: LD_INT 525
2160: ST_TO_ADDR
// normalTime := 0 0$15 ;
2161: LD_ADDR_VAR 0 6
2165: PUSH
2166: LD_INT 525
2168: ST_TO_ADDR
// maxTime := 0 0$55 ;
2169: LD_ADDR_VAR 0 8
2173: PUSH
2174: LD_INT 1925
2176: ST_TO_ADDR
// delayTime := 0 0$2 ;
2177: LD_ADDR_VAR 0 7
2181: PUSH
2182: LD_INT 70
2184: ST_TO_ADDR
// end ; end ;
2185: GO 2188
2187: POP
// tmp := [ BaseArea1 , BaseArea2 , BaseArea3 , BaseArea4 ] ;
2188: LD_ADDR_VAR 0 3
2192: PUSH
2193: LD_INT 5
2195: PUSH
2196: LD_INT 7
2198: PUSH
2199: LD_INT 6
2201: PUSH
2202: LD_INT 8
2204: PUSH
2205: EMPTY
2206: LIST
2207: LIST
2208: LIST
2209: LIST
2210: ST_TO_ADDR
// areas := [ Center1 , Center2 , Center3 , Center4 ] ;
2211: LD_ADDR_VAR 0 5
2215: PUSH
2216: LD_INT 26
2218: PUSH
2219: LD_INT 27
2221: PUSH
2222: LD_INT 29
2224: PUSH
2225: LD_INT 28
2227: PUSH
2228: EMPTY
2229: LIST
2230: LIST
2231: LIST
2232: LIST
2233: ST_TO_ADDR
// for i := 1 to 8 do
2234: LD_ADDR_VAR 0 1
2238: PUSH
2239: DOUBLE
2240: LD_INT 1
2242: DEC
2243: ST_TO_ADDR
2244: LD_INT 8
2246: PUSH
2247: FOR_TO
2248: IFFALSE 2295
// begin if not mpSidePositions [ i ] then
2250: LD_EXP 7
2254: PUSH
2255: LD_VAR 0 1
2259: ARRAY
2260: NOT
2261: IFFALSE 2265
// continue ;
2263: GO 2247
// areas := areas ^ tmp [ mpSidePositions [ i ] ] ;
2265: LD_ADDR_VAR 0 5
2269: PUSH
2270: LD_VAR 0 5
2274: PUSH
2275: LD_VAR 0 3
2279: PUSH
2280: LD_EXP 7
2284: PUSH
2285: LD_VAR 0 1
2289: ARRAY
2290: ARRAY
2291: ADD
2292: ST_TO_ADDR
// end ;
2293: GO 2247
2295: POP
2296: POP
// x := 1 ;
2297: LD_ADDR_VAR 0 2
2301: PUSH
2302: LD_INT 1
2304: ST_TO_ADDR
// repeat wait ( time ) ;
2305: LD_VAR 0 4
2309: PPUSH
2310: CALL_OW 67
// x := Inc ( x ) ;
2314: LD_ADDR_VAR 0 2
2318: PUSH
2319: LD_VAR 0 2
2323: PPUSH
2324: CALL 49355 0 1
2328: ST_TO_ADDR
// if x > 5 then
2329: LD_VAR 0 2
2333: PUSH
2334: LD_INT 5
2336: GREATER
2337: IFFALSE 2347
// x := 1 ;
2339: LD_ADDR_VAR 0 2
2343: PUSH
2344: LD_INT 1
2346: ST_TO_ADDR
// for i in areas do
2347: LD_ADDR_VAR 0 1
2351: PUSH
2352: LD_VAR 0 5
2356: PUSH
2357: FOR_IN
2358: IFFALSE 2397
// begin if GetResourceArea ( i , mat_cans ) < 20 then
2360: LD_VAR 0 1
2364: PPUSH
2365: LD_INT 1
2367: PPUSH
2368: CALL_OW 287
2372: PUSH
2373: LD_INT 20
2375: LESS
2376: IFFALSE 2395
// begin CreateCratesArea ( x , i , true ) ;
2378: LD_VAR 0 2
2382: PPUSH
2383: LD_VAR 0 1
2387: PPUSH
2388: LD_INT 1
2390: PPUSH
2391: CALL_OW 55
// end ; end ;
2395: GO 2357
2397: POP
2398: POP
// time := time + delayTime ;
2399: LD_ADDR_VAR 0 4
2403: PUSH
2404: LD_VAR 0 4
2408: PUSH
2409: LD_VAR 0 7
2413: PLUS
2414: ST_TO_ADDR
// if time > maxTime then
2415: LD_VAR 0 4
2419: PUSH
2420: LD_VAR 0 8
2424: GREATER
2425: IFFALSE 2437
// time := normalTime ;
2427: LD_ADDR_VAR 0 4
2431: PUSH
2432: LD_VAR 0 6
2436: ST_TO_ADDR
// until false ;
2437: LD_INT 0
2439: IFFALSE 2305
// end ; end_of_file
2441: PPOPN 8
2443: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
2444: LD_VAR 0 1
2448: PPUSH
2449: CALL 53499 0 1
// Multiplayer_UnitDestroyed ( un ) ;
2453: LD_VAR 0 1
2457: PPUSH
2458: CALL 7676 0 1
// end ;
2462: PPOPN 1
2464: END
// on UnitKamikazed ( un ) do begin SOS_UnitKamikazed ( un ) ;
2465: LD_VAR 0 1
2469: PPUSH
2470: CALL 53516 0 1
// end ;
2474: PPOPN 1
2476: END
// on BuildingComplete ( b ) do Multiplayer_BuildingComplete ( b ) ;
2477: LD_VAR 0 1
2481: PPUSH
2482: CALL 8383 0 1
2486: PPOPN 1
2488: END
// on VehicleConstructed ( vehicle , factory ) do SOS_VehicleConstructed ( vehicle , factory ) ;
2489: LD_VAR 0 1
2493: PPUSH
2494: LD_VAR 0 2
2498: PPUSH
2499: CALL 53557 0 2
2503: PPOPN 2
2505: END
// on BuildingCaptured ( building , oldSide , unit ) do Multiplayer_BuildingCaptured ( building , oldSide , unit ) ; end_of_file
2506: LD_VAR 0 1
2510: PPUSH
2511: LD_VAR 0 2
2515: PPUSH
2516: LD_VAR 0 3
2520: PPUSH
2521: CALL 8436 0 3
2525: PPOPN 3
2527: END
// export mpGameType , mpGameSettingsKeys , mpGameSettingsValues , mpGameSettings , mpSidePositions , mpSideTeams , mpSideNations , mpTeams , mpTeamGame , mpOilDeposits , mpSibDeposits , mpDepots , mpStartingResources , mpSharedVision , mpBuildings , mpMarkedAreas , mpBuildUpAreas , mpBuildUpTime , mpStartPos , mpBattleFlag , mpBattleFlags , mpPeopleAmount , mpPeopleSkill , mpSibDetection , mpShipments , mpSibBomb , mpMapSize , mpApemans , mpApemansArea , mpApePosIndex , mpRespawn , mpKingArea , mpPoints , mpVehicles , mpEmissions , mpDisplayStrings , mpGameActive , mpRespawnPull , mpGlobalOilDeposits , mpGlobalSibDeposits , mpTeleports , mpArtifacts , mpBlockRespThread ; export function InitMultiplayer ; var i ; begin
2528: LD_INT 0
2530: PPUSH
2531: PPUSH
// disable ( mpActive ) ;
2532: LD_INT 100
2534: DISABLE_MARKED
// disable ( mpWin ) ;
2535: LD_INT 101
2537: DISABLE_MARKED
// disable ( mpLose ) ;
2538: LD_INT 102
2540: DISABLE_MARKED
// mpGameType := 0 ;
2541: LD_ADDR_EXP 3
2545: PUSH
2546: LD_INT 0
2548: ST_TO_ADDR
// mpGameSettings := [ ] ;
2549: LD_ADDR_EXP 6
2553: PUSH
2554: EMPTY
2555: ST_TO_ADDR
// mpGameSettingsKeys := [ ] ;
2556: LD_ADDR_EXP 4
2560: PUSH
2561: EMPTY
2562: ST_TO_ADDR
// mpGameSettingsValues := [ ] ;
2563: LD_ADDR_EXP 5
2567: PUSH
2568: EMPTY
2569: ST_TO_ADDR
// mpMapSize := [ 2 , 2 ] ;
2570: LD_ADDR_EXP 29
2574: PUSH
2575: LD_INT 2
2577: PUSH
2578: LD_INT 2
2580: PUSH
2581: EMPTY
2582: LIST
2583: LIST
2584: ST_TO_ADDR
// mpOilDeposits := [ ] ;
2585: LD_ADDR_EXP 12
2589: PUSH
2590: EMPTY
2591: ST_TO_ADDR
// mpSibDeposits := [ ] ;
2592: LD_ADDR_EXP 13
2596: PUSH
2597: EMPTY
2598: ST_TO_ADDR
// mpGlobalOilDeposits := [ ] ;
2599: LD_ADDR_EXP 41
2603: PUSH
2604: EMPTY
2605: ST_TO_ADDR
// mpGlobalSibDeposits := [ ] ;
2606: LD_ADDR_EXP 42
2610: PUSH
2611: EMPTY
2612: ST_TO_ADDR
// mpDepots := [ ] ;
2613: LD_ADDR_EXP 14
2617: PUSH
2618: EMPTY
2619: ST_TO_ADDR
// mpBuildings := [ ] ;
2620: LD_ADDR_EXP 17
2624: PUSH
2625: EMPTY
2626: ST_TO_ADDR
// mpMarkedAreas := [ ] ;
2627: LD_ADDR_EXP 18
2631: PUSH
2632: EMPTY
2633: ST_TO_ADDR
// mpBuildUpAreas := [ ] ;
2634: LD_ADDR_EXP 19
2638: PUSH
2639: EMPTY
2640: ST_TO_ADDR
// mpBuildUpTime := [ ] ;
2641: LD_ADDR_EXP 20
2645: PUSH
2646: EMPTY
2647: ST_TO_ADDR
// mpStartingResources := [ ] ;
2648: LD_ADDR_EXP 15
2652: PUSH
2653: EMPTY
2654: ST_TO_ADDR
// mpStartPos := [ ] ;
2655: LD_ADDR_EXP 21
2659: PUSH
2660: EMPTY
2661: ST_TO_ADDR
// mpBattleFlag := - 1 ;
2662: LD_ADDR_EXP 22
2666: PUSH
2667: LD_INT 1
2669: NEG
2670: ST_TO_ADDR
// mpBattleFlags := [ ] ;
2671: LD_ADDR_EXP 23
2675: PUSH
2676: EMPTY
2677: ST_TO_ADDR
// mpApemans := [ ] ;
2678: LD_ADDR_EXP 30
2682: PUSH
2683: EMPTY
2684: ST_TO_ADDR
// mpApemansArea := [ ] ;
2685: LD_ADDR_EXP 31
2689: PUSH
2690: EMPTY
2691: ST_TO_ADDR
// mpRespawn := [ ] ;
2692: LD_ADDR_EXP 33
2696: PUSH
2697: EMPTY
2698: ST_TO_ADDR
// mpKingArea := 0 ;
2699: LD_ADDR_EXP 34
2703: PUSH
2704: LD_INT 0
2706: ST_TO_ADDR
// mpPoints := [ ] ;
2707: LD_ADDR_EXP 35
2711: PUSH
2712: EMPTY
2713: ST_TO_ADDR
// mpVehicles := 0 ;
2714: LD_ADDR_EXP 36
2718: PUSH
2719: LD_INT 0
2721: ST_TO_ADDR
// mpShipments := 0 ;
2722: LD_ADDR_EXP 27
2726: PUSH
2727: LD_INT 0
2729: ST_TO_ADDR
// mpRespawnPull := [ [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
2730: LD_ADDR_EXP 40
2734: PUSH
2735: EMPTY
2736: PUSH
2737: EMPTY
2738: PUSH
2739: EMPTY
2740: PUSH
2741: EMPTY
2742: PUSH
2743: EMPTY
2744: PUSH
2745: EMPTY
2746: PUSH
2747: EMPTY
2748: PUSH
2749: EMPTY
2750: PUSH
2751: EMPTY
2752: LIST
2753: LIST
2754: LIST
2755: LIST
2756: LIST
2757: LIST
2758: LIST
2759: LIST
2760: ST_TO_ADDR
// mpApePosIndex := [ [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
2761: LD_ADDR_EXP 32
2765: PUSH
2766: EMPTY
2767: PUSH
2768: EMPTY
2769: PUSH
2770: EMPTY
2771: PUSH
2772: EMPTY
2773: PUSH
2774: EMPTY
2775: PUSH
2776: EMPTY
2777: PUSH
2778: EMPTY
2779: PUSH
2780: EMPTY
2781: PUSH
2782: EMPTY
2783: LIST
2784: LIST
2785: LIST
2786: LIST
2787: LIST
2788: LIST
2789: LIST
2790: LIST
2791: ST_TO_ADDR
// mpEmissions := 0 ;
2792: LD_ADDR_EXP 37
2796: PUSH
2797: LD_INT 0
2799: ST_TO_ADDR
// mpTeleports := 0 ;
2800: LD_ADDR_EXP 43
2804: PUSH
2805: LD_INT 0
2807: ST_TO_ADDR
// mpArtifacts := 0 ;
2808: LD_ADDR_EXP 44
2812: PUSH
2813: LD_INT 0
2815: ST_TO_ADDR
// mpPeopleSkill := 3 ;
2816: LD_ADDR_EXP 25
2820: PUSH
2821: LD_INT 3
2823: ST_TO_ADDR
// mpPeopleAmount := 15 ;
2824: LD_ADDR_EXP 24
2828: PUSH
2829: LD_INT 15
2831: ST_TO_ADDR
// mpDisplayStrings := 0 ;
2832: LD_ADDR_EXP 38
2836: PUSH
2837: LD_INT 0
2839: ST_TO_ADDR
// mpGameActive := false ;
2840: LD_ADDR_EXP 39
2844: PUSH
2845: LD_INT 0
2847: ST_TO_ADDR
// mpBlockRespThread := false ;
2848: LD_ADDR_EXP 45
2852: PUSH
2853: LD_INT 0
2855: ST_TO_ADDR
// for i := 1 to 32 do
2856: LD_ADDR_VAR 0 2
2860: PUSH
2861: DOUBLE
2862: LD_INT 1
2864: DEC
2865: ST_TO_ADDR
2866: LD_INT 32
2868: PUSH
2869: FOR_TO
2870: IFFALSE 2897
// mpGameSettings := Replace ( mpGameSettings , i , 0 ) ;
2872: LD_ADDR_EXP 6
2876: PUSH
2877: LD_EXP 6
2881: PPUSH
2882: LD_VAR 0 2
2886: PPUSH
2887: LD_INT 0
2889: PPUSH
2890: CALL_OW 1
2894: ST_TO_ADDR
2895: GO 2869
2897: POP
2898: POP
// end ;
2899: LD_VAR 0 1
2903: RET
// export function StartMultiplayer ; var i , j , b , x , y , side , pos , nation , ape , team , setting , resources , gameTypes ; begin
2904: LD_INT 0
2906: PPUSH
2907: PPUSH
2908: PPUSH
2909: PPUSH
2910: PPUSH
2911: PPUSH
2912: PPUSH
2913: PPUSH
2914: PPUSH
2915: PPUSH
2916: PPUSH
2917: PPUSH
2918: PPUSH
2919: PPUSH
// gameTypes := [ GameTypeNormal , GameTypeSurvival , GameTypeKing , GameTypeFamine ] ;
2920: LD_ADDR_VAR 0 14
2924: PUSH
2925: LD_INT 1
2927: PUSH
2928: LD_INT 2
2930: PUSH
2931: LD_INT 3
2933: PUSH
2934: LD_INT 5
2936: PUSH
2937: EMPTY
2938: LIST
2939: LIST
2940: LIST
2941: LIST
2942: ST_TO_ADDR
// for i in gameTypes do
2943: LD_ADDR_VAR 0 2
2947: PUSH
2948: LD_VAR 0 14
2952: PUSH
2953: FOR_IN
2954: IFFALSE 2963
// disable ( i ) ;
2956: LD_VAR 0 2
2960: DISABLE_MARKED
2961: GO 2953
2963: POP
2964: POP
// if Multiplayer then
2965: LD_OWVAR 4
2969: IFFALSE 3153
// begin mpGameType := mp_game_type ;
2971: LD_ADDR_EXP 3
2975: PUSH
2976: LD_OWVAR 6
2980: ST_TO_ADDR
// your_side := mp_player_side ;
2981: LD_ADDR_OWVAR 2
2985: PUSH
2986: LD_OWVAR 7
2990: ST_TO_ADDR
// mpSidePositions := mp_sides_positions ;
2991: LD_ADDR_EXP 7
2995: PUSH
2996: LD_OWVAR 17
3000: ST_TO_ADDR
// mpSideTeams := mp_sides_teams ;
3001: LD_ADDR_EXP 8
3005: PUSH
3006: LD_OWVAR 15
3010: ST_TO_ADDR
// mpSideNations := mp_sides_nations ;
3011: LD_ADDR_EXP 9
3015: PUSH
3016: LD_OWVAR 16
3020: ST_TO_ADDR
// mpTeams := mp_teams ;
3021: LD_ADDR_EXP 10
3025: PUSH
3026: LD_OWVAR 12
3030: ST_TO_ADDR
// for i := 1 to Count ( mpGameSettingsKeys ) do
3031: LD_ADDR_VAR 0 2
3035: PUSH
3036: DOUBLE
3037: LD_INT 1
3039: DEC
3040: ST_TO_ADDR
3041: LD_EXP 4
3045: PPUSH
3046: CALL 12050 0 1
3050: PUSH
3051: FOR_TO
3052: IFFALSE 3128
// begin setting := mpGameSettingsKeys [ i ] ;
3054: LD_ADDR_VAR 0 12
3058: PUSH
3059: LD_EXP 4
3063: PUSH
3064: LD_VAR 0 2
3068: ARRAY
3069: ST_TO_ADDR
// if setting then
3070: LD_VAR 0 12
3074: IFFALSE 3126
// mpGameSettings := Replace ( mpGameSettings , i , mpGameSettingsValues [ i ] [ GetMultiplayerSetting ( i - 1 ) + 1 ] ) ;
3076: LD_ADDR_EXP 6
3080: PUSH
3081: LD_EXP 6
3085: PPUSH
3086: LD_VAR 0 2
3090: PPUSH
3091: LD_EXP 5
3095: PUSH
3096: LD_VAR 0 2
3100: ARRAY
3101: PUSH
3102: LD_VAR 0 2
3106: PUSH
3107: LD_INT 1
3109: MINUS
3110: PPUSH
3111: CALL_OW 426
3115: PUSH
3116: LD_INT 1
3118: PLUS
3119: ARRAY
3120: PPUSH
3121: CALL_OW 1
3125: ST_TO_ADDR
// end ;
3126: GO 3051
3128: POP
3129: POP
// mpTeamGame := ( mpSideTeams diff [ 0 ] ) > 1 ;
3130: LD_ADDR_EXP 11
3134: PUSH
3135: LD_EXP 8
3139: PUSH
3140: LD_INT 0
3142: PUSH
3143: EMPTY
3144: LIST
3145: DIFF
3146: PUSH
3147: LD_INT 1
3149: GREATER
3150: ST_TO_ADDR
// end else
3151: GO 3153
// begin end ; GetMultiplayerMapData ( mpGameType ) ;
3153: LD_EXP 3
3157: PPUSH
3158: CALL 826 0 1
// if Count ( mpMarkedAreas ) then
3162: LD_EXP 18
3166: PPUSH
3167: CALL 12050 0 1
3171: IFFALSE 3202
// begin for i in mpMarkedAreas do
3173: LD_ADDR_VAR 0 2
3177: PUSH
3178: LD_EXP 18
3182: PUSH
3183: FOR_IN
3184: IFFALSE 3200
// SetAreaMapShow ( i , 0 ) ;
3186: LD_VAR 0 2
3190: PPUSH
3191: LD_INT 0
3193: PPUSH
3194: CALL_OW 424
3198: GO 3183
3200: POP
3201: POP
// end ; for i := 1 to 8 do
3202: LD_ADDR_VAR 0 2
3206: PUSH
3207: DOUBLE
3208: LD_INT 1
3210: DEC
3211: ST_TO_ADDR
3212: LD_INT 8
3214: PUSH
3215: FOR_TO
3216: IFFALSE 4552
// begin if not mpSidePositions [ i ] then
3218: LD_EXP 7
3222: PUSH
3223: LD_VAR 0 2
3227: ARRAY
3228: NOT
3229: IFFALSE 3233
// continue ;
3231: GO 3215
// side := i ;
3233: LD_ADDR_VAR 0 7
3237: PUSH
3238: LD_VAR 0 2
3242: ST_TO_ADDR
// nation := mpSideNations [ i ] ;
3243: LD_ADDR_VAR 0 9
3247: PUSH
3248: LD_EXP 9
3252: PUSH
3253: LD_VAR 0 2
3257: ARRAY
3258: ST_TO_ADDR
// pos := mpSidePositions [ i ] ;
3259: LD_ADDR_VAR 0 8
3263: PUSH
3264: LD_EXP 7
3268: PUSH
3269: LD_VAR 0 2
3273: ARRAY
3274: ST_TO_ADDR
// if Count ( mpOilDeposits ) then
3275: LD_EXP 12
3279: PPUSH
3280: CALL 12050 0 1
3284: IFFALSE 3361
// begin for j in mpOilDeposits [ pos ] do
3286: LD_ADDR_VAR 0 3
3290: PUSH
3291: LD_EXP 12
3295: PUSH
3296: LD_VAR 0 8
3300: ARRAY
3301: PUSH
3302: FOR_IN
3303: IFFALSE 3359
// begin CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_oil ) ;
3305: LD_VAR 0 3
3309: PUSH
3310: LD_INT 1
3312: ARRAY
3313: PPUSH
3314: LD_VAR 0 3
3318: PUSH
3319: LD_INT 2
3321: ARRAY
3322: PPUSH
3323: LD_INT 2
3325: PPUSH
3326: CALL_OW 62
// SetResourceVisibility ( j [ 1 ] , j [ 2 ] , side ) ;
3330: LD_VAR 0 3
3334: PUSH
3335: LD_INT 1
3337: ARRAY
3338: PPUSH
3339: LD_VAR 0 3
3343: PUSH
3344: LD_INT 2
3346: ARRAY
3347: PPUSH
3348: LD_VAR 0 7
3352: PPUSH
3353: CALL_OW 441
// end ;
3357: GO 3302
3359: POP
3360: POP
// end ; if Count ( mpSibDeposits ) then
3361: LD_EXP 13
3365: PPUSH
3366: CALL 12050 0 1
3370: IFFALSE 3447
// begin for j in mpSibDeposits [ pos ] do
3372: LD_ADDR_VAR 0 3
3376: PUSH
3377: LD_EXP 13
3381: PUSH
3382: LD_VAR 0 8
3386: ARRAY
3387: PUSH
3388: FOR_IN
3389: IFFALSE 3445
// begin CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_siberit ) ;
3391: LD_VAR 0 3
3395: PUSH
3396: LD_INT 1
3398: ARRAY
3399: PPUSH
3400: LD_VAR 0 3
3404: PUSH
3405: LD_INT 2
3407: ARRAY
3408: PPUSH
3409: LD_INT 3
3411: PPUSH
3412: CALL_OW 62
// SetResourceVisibility ( j [ 1 ] , j [ 2 ] , side ) ;
3416: LD_VAR 0 3
3420: PUSH
3421: LD_INT 1
3423: ARRAY
3424: PPUSH
3425: LD_VAR 0 3
3429: PUSH
3430: LD_INT 2
3432: ARRAY
3433: PPUSH
3434: LD_VAR 0 7
3438: PPUSH
3439: CALL_OW 441
// end ;
3443: GO 3388
3445: POP
3446: POP
// end ; InitBc ;
3447: CALL_OW 21
// InitUc ;
3451: CALL_OW 18
// uc_side := side ;
3455: LD_ADDR_OWVAR 20
3459: PUSH
3460: LD_VAR 0 7
3464: ST_TO_ADDR
// uc_nation := nation ;
3465: LD_ADDR_OWVAR 21
3469: PUSH
3470: LD_VAR 0 9
3474: ST_TO_ADDR
// if mpBattleFlag > - 1 then
3475: LD_EXP 22
3479: PUSH
3480: LD_INT 1
3482: NEG
3483: GREATER
3484: IFFALSE 3643
// begin x := mpStartPos [ pos ] [ 1 ] ;
3486: LD_ADDR_VAR 0 5
3490: PUSH
3491: LD_EXP 21
3495: PUSH
3496: LD_VAR 0 8
3500: ARRAY
3501: PUSH
3502: LD_INT 1
3504: ARRAY
3505: ST_TO_ADDR
// y := mpStartPos [ pos ] [ 2 ] ;
3506: LD_ADDR_VAR 0 6
3510: PUSH
3511: LD_EXP 21
3515: PUSH
3516: LD_VAR 0 8
3520: ARRAY
3521: PUSH
3522: LD_INT 2
3524: ARRAY
3525: ST_TO_ADDR
// PlaceEnvironment ( x , y , 12 , 2 ) ;
3526: LD_VAR 0 5
3530: PPUSH
3531: LD_VAR 0 6
3535: PPUSH
3536: LD_INT 12
3538: PPUSH
3539: LD_INT 2
3541: PPUSH
3542: CALL_OW 349
// mpBattleFlags := Replace ( mpBattleFlags , side , SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 70 ] , [ bfo_defend_bonus_building , 40 ] , [ bfo_range , 25 ] , [ bfo_height , 100 ] ] ) ) ;
3546: LD_ADDR_EXP 23
3550: PUSH
3551: LD_EXP 23
3555: PPUSH
3556: LD_VAR 0 7
3560: PPUSH
3561: LD_VAR 0 7
3565: PPUSH
3566: LD_VAR 0 5
3570: PPUSH
3571: LD_VAR 0 6
3575: PPUSH
3576: LD_INT 1
3578: PUSH
3579: LD_INT 100
3581: PUSH
3582: EMPTY
3583: LIST
3584: LIST
3585: PUSH
3586: LD_INT 2
3588: PUSH
3589: LD_INT 70
3591: PUSH
3592: EMPTY
3593: LIST
3594: LIST
3595: PUSH
3596: LD_INT 3
3598: PUSH
3599: LD_INT 40
3601: PUSH
3602: EMPTY
3603: LIST
3604: LIST
3605: PUSH
3606: LD_INT 10
3608: PUSH
3609: LD_INT 25
3611: PUSH
3612: EMPTY
3613: LIST
3614: LIST
3615: PUSH
3616: LD_INT 20
3618: PUSH
3619: LD_INT 100
3621: PUSH
3622: EMPTY
3623: LIST
3624: LIST
3625: PUSH
3626: EMPTY
3627: LIST
3628: LIST
3629: LIST
3630: LIST
3631: LIST
3632: PPUSH
3633: CALL_OW 418
3637: PPUSH
3638: CALL_OW 1
3642: ST_TO_ADDR
// end ; if Count ( mpDepots ) then
3643: LD_EXP 14
3647: PPUSH
3648: CALL 12050 0 1
3652: IFFALSE 3836
// begin if mpGameType = GameTypeSurvival then
3654: LD_EXP 3
3658: PUSH
3659: LD_INT 2
3661: EQUAL
3662: IFFALSE 3682
// begin bc_level := 10 ;
3664: LD_ADDR_OWVAR 43
3668: PUSH
3669: LD_INT 10
3671: ST_TO_ADDR
// bc_type := b_warehouse ;
3672: LD_ADDR_OWVAR 42
3676: PUSH
3677: LD_INT 1
3679: ST_TO_ADDR
// end else
3680: GO 3698
// begin bc_level := 0 ;
3682: LD_ADDR_OWVAR 43
3686: PUSH
3687: LD_INT 0
3689: ST_TO_ADDR
// bc_type := b_depot ;
3690: LD_ADDR_OWVAR 42
3694: PUSH
3695: LD_INT 0
3697: ST_TO_ADDR
// end ; b := CreateAndPlaceBuildingXYD ( mpDepots [ pos ] [ 1 ] , mpDepots [ pos ] [ 2 ] , mpDepots [ pos ] [ 3 ] ) ;
3698: LD_ADDR_VAR 0 4
3702: PUSH
3703: LD_EXP 14
3707: PUSH
3708: LD_VAR 0 8
3712: ARRAY
3713: PUSH
3714: LD_INT 1
3716: ARRAY
3717: PPUSH
3718: LD_EXP 14
3722: PUSH
3723: LD_VAR 0 8
3727: ARRAY
3728: PUSH
3729: LD_INT 2
3731: ARRAY
3732: PPUSH
3733: LD_EXP 14
3737: PUSH
3738: LD_VAR 0 8
3742: ARRAY
3743: PUSH
3744: LD_INT 3
3746: ARRAY
3747: PPUSH
3748: CALL_OW 47
3752: ST_TO_ADDR
// SetBName ( b , @ & side ) ;
3753: LD_VAR 0 4
3757: PPUSH
3758: LD_STRING @
3760: PUSH
3761: LD_VAR 0 7
3765: STR
3766: PPUSH
3767: CALL_OW 500
// if Count ( mpStartingResources ) then
3771: LD_EXP 15
3775: PPUSH
3776: CALL 12050 0 1
3780: IFFALSE 3834
// begin for j := 1 to mpStartingResources do
3782: LD_ADDR_VAR 0 3
3786: PUSH
3787: DOUBLE
3788: LD_INT 1
3790: DEC
3791: ST_TO_ADDR
3792: LD_EXP 15
3796: PUSH
3797: FOR_TO
3798: IFFALSE 3832
// SetResourceType ( GetBase ( b ) , j , mpStartingResources [ j ] ) ;
3800: LD_VAR 0 4
3804: PPUSH
3805: CALL_OW 274
3809: PPUSH
3810: LD_VAR 0 3
3814: PPUSH
3815: LD_EXP 15
3819: PUSH
3820: LD_VAR 0 3
3824: ARRAY
3825: PPUSH
3826: CALL_OW 277
3830: GO 3797
3832: POP
3833: POP
// end ; end else
3834: GO 4043
// if Count ( mpStartingResources ) then
3836: LD_EXP 15
3840: PPUSH
3841: CALL 12050 0 1
3845: IFFALSE 4043
// begin x := mpStartPos [ pos ] [ 1 ] ;
3847: LD_ADDR_VAR 0 5
3851: PUSH
3852: LD_EXP 21
3856: PUSH
3857: LD_VAR 0 8
3861: ARRAY
3862: PUSH
3863: LD_INT 1
3865: ARRAY
3866: ST_TO_ADDR
// y := mpStartPos [ pos ] [ 2 ] ;
3867: LD_ADDR_VAR 0 6
3871: PUSH
3872: LD_EXP 21
3876: PUSH
3877: LD_VAR 0 8
3881: ARRAY
3882: PUSH
3883: LD_INT 2
3885: ARRAY
3886: ST_TO_ADDR
// for j := 1 to mpStartingResources do
3887: LD_ADDR_VAR 0 3
3891: PUSH
3892: DOUBLE
3893: LD_INT 1
3895: DEC
3896: ST_TO_ADDR
3897: LD_EXP 15
3901: PUSH
3902: FOR_TO
3903: IFFALSE 4041
// begin resources := mpStartingResources [ j ] ;
3905: LD_ADDR_VAR 0 13
3909: PUSH
3910: LD_EXP 15
3914: PUSH
3915: LD_VAR 0 3
3919: ARRAY
3920: ST_TO_ADDR
// if resources = 0 then
3921: LD_VAR 0 13
3925: PUSH
3926: LD_INT 0
3928: EQUAL
3929: IFFALSE 3933
// continue ;
3931: GO 3902
// repeat if resources >= 50 then
3933: LD_VAR 0 13
3937: PUSH
3938: LD_INT 50
3940: GREATEREQUAL
3941: IFFALSE 3987
// begin CreateResourcesXYR ( j , 5 , x , y , 6 , false ) ;
3943: LD_VAR 0 3
3947: PPUSH
3948: LD_INT 5
3950: PPUSH
3951: LD_VAR 0 5
3955: PPUSH
3956: LD_VAR 0 6
3960: PPUSH
3961: LD_INT 6
3963: PPUSH
3964: LD_INT 0
3966: PPUSH
3967: CALL_OW 60
// resources := resources - 50 ;
3971: LD_ADDR_VAR 0 13
3975: PUSH
3976: LD_VAR 0 13
3980: PUSH
3981: LD_INT 50
3983: MINUS
3984: ST_TO_ADDR
// end else
3985: GO 4029
// begin CreateResourcesXYR ( j , resources div 10 , x , y , 6 , false ) ;
3987: LD_VAR 0 3
3991: PPUSH
3992: LD_VAR 0 13
3996: PUSH
3997: LD_INT 10
3999: DIV
4000: PPUSH
4001: LD_VAR 0 5
4005: PPUSH
4006: LD_VAR 0 6
4010: PPUSH
4011: LD_INT 6
4013: PPUSH
4014: LD_INT 0
4016: PPUSH
4017: CALL_OW 60
// resources := 0 ;
4021: LD_ADDR_VAR 0 13
4025: PUSH
4026: LD_INT 0
4028: ST_TO_ADDR
// end ; until resources <= 0 ;
4029: LD_VAR 0 13
4033: PUSH
4034: LD_INT 0
4036: LESSEQUAL
4037: IFFALSE 3933
// end ;
4039: GO 3902
4041: POP
4042: POP
// end ; if Count ( mpBuildings ) then
4043: LD_EXP 17
4047: PPUSH
4048: CALL 12050 0 1
4052: IFFALSE 4130
// begin for j in mpBuildings [ pos ] do
4054: LD_ADDR_VAR 0 3
4058: PUSH
4059: LD_EXP 17
4063: PUSH
4064: LD_VAR 0 8
4068: ARRAY
4069: PUSH
4070: FOR_IN
4071: IFFALSE 4128
// begin bc_level := 0 ;
4073: LD_ADDR_OWVAR 43
4077: PUSH
4078: LD_INT 0
4080: ST_TO_ADDR
// bc_type := j [ 1 ] ;
4081: LD_ADDR_OWVAR 42
4085: PUSH
4086: LD_VAR 0 3
4090: PUSH
4091: LD_INT 1
4093: ARRAY
4094: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( j [ 2 ] , j [ 3 ] , j [ 4 ] ) ;
4095: LD_VAR 0 3
4099: PUSH
4100: LD_INT 2
4102: ARRAY
4103: PPUSH
4104: LD_VAR 0 3
4108: PUSH
4109: LD_INT 3
4111: ARRAY
4112: PPUSH
4113: LD_VAR 0 3
4117: PUSH
4118: LD_INT 4
4120: ARRAY
4121: PPUSH
4122: CALL_OW 47
// end ;
4126: GO 4070
4128: POP
4129: POP
// end ; if mpSibDetection and GetTech ( tech_sibdet , side ) = state_enabled then
4130: LD_EXP 26
4134: IFFALSE 4154
4136: PUSH
4137: LD_INT 20
4139: PPUSH
4140: LD_VAR 0 7
4144: PPUSH
4145: CALL_OW 321
4149: PUSH
4150: LD_INT 1
4152: EQUAL
4153: AND
4154: IFFALSE 4171
// SetTech ( tech_SibDet , side , state_researched ) ;
4156: LD_INT 20
4158: PPUSH
4159: LD_VAR 0 7
4163: PPUSH
4164: LD_INT 2
4166: PPUSH
4167: CALL_OW 322
// if not mpArtifacts then
4171: LD_EXP 44
4175: NOT
4176: IFFALSE 4193
// SetTech ( tech_artifact , side , state_disabled ) ;
4178: LD_INT 24
4180: PPUSH
4181: LD_VAR 0 7
4185: PPUSH
4186: LD_INT 0
4188: PPUSH
4189: CALL_OW 322
// if mpSibBomb = 1 then
4193: LD_EXP 28
4197: PUSH
4198: LD_INT 1
4200: EQUAL
4201: IFFALSE 4220
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
4203: LD_INT 25
4205: PPUSH
4206: LD_VAR 0 7
4210: PPUSH
4211: LD_INT 1
4213: PPUSH
4214: CALL_OW 322
// end else
4218: GO 4235
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
4220: LD_INT 25
4222: PPUSH
4223: LD_VAR 0 7
4227: PPUSH
4228: LD_INT 0
4230: PPUSH
4231: CALL_OW 322
// end ; if mpVehicles then
4235: LD_EXP 36
4239: IFFALSE 4338
// begin for j in mpPrepareVehicles ( side , nation , mpVehicles ) do
4241: LD_ADDR_VAR 0 3
4245: PUSH
4246: LD_VAR 0 7
4250: PPUSH
4251: LD_VAR 0 9
4255: PPUSH
4256: LD_EXP 36
4260: PPUSH
4261: CALL 5462 0 3
4265: PUSH
4266: FOR_IN
4267: IFFALSE 4336
// begin SetDir ( j , rand ( 0 , 5 ) ) ;
4269: LD_VAR 0 3
4273: PPUSH
4274: LD_INT 0
4276: PPUSH
4277: LD_INT 5
4279: PPUSH
4280: CALL_OW 12
4284: PPUSH
4285: CALL_OW 233
// PlaceUnitXYR ( j , mpStartPos [ pos ] [ 1 ] , mpStartPos [ pos ] [ 2 ] , 12 , false ) ;
4289: LD_VAR 0 3
4293: PPUSH
4294: LD_EXP 21
4298: PUSH
4299: LD_VAR 0 8
4303: ARRAY
4304: PUSH
4305: LD_INT 1
4307: ARRAY
4308: PPUSH
4309: LD_EXP 21
4313: PUSH
4314: LD_VAR 0 8
4318: ARRAY
4319: PUSH
4320: LD_INT 2
4322: ARRAY
4323: PPUSH
4324: LD_INT 12
4326: PPUSH
4327: LD_INT 0
4329: PPUSH
4330: CALL_OW 50
// end ;
4334: GO 4266
4336: POP
4337: POP
// end ; uc_nation := nation ;
4338: LD_ADDR_OWVAR 21
4342: PUSH
4343: LD_VAR 0 9
4347: ST_TO_ADDR
// team := mpPrepareTeam ( side , nation , mpPeopleAmount , mpPeopleSkill ) ;
4348: LD_ADDR_VAR 0 11
4352: PUSH
4353: LD_VAR 0 7
4357: PPUSH
4358: LD_VAR 0 9
4362: PPUSH
4363: LD_EXP 24
4367: PPUSH
4368: LD_EXP 25
4372: PPUSH
4373: CALL 4964 0 4
4377: ST_TO_ADDR
// for j in team do
4378: LD_ADDR_VAR 0 3
4382: PUSH
4383: LD_VAR 0 11
4387: PUSH
4388: FOR_IN
4389: IFFALSE 4438
// PlaceUnitXYR ( j , mpStartPos [ pos ] [ 1 ] , mpStartPos [ pos ] [ 2 ] , 12 , false ) ;
4391: LD_VAR 0 3
4395: PPUSH
4396: LD_EXP 21
4400: PUSH
4401: LD_VAR 0 8
4405: ARRAY
4406: PUSH
4407: LD_INT 1
4409: ARRAY
4410: PPUSH
4411: LD_EXP 21
4415: PUSH
4416: LD_VAR 0 8
4420: ARRAY
4421: PUSH
4422: LD_INT 2
4424: ARRAY
4425: PPUSH
4426: LD_INT 12
4428: PPUSH
4429: LD_INT 0
4431: PPUSH
4432: CALL_OW 50
4436: GO 4388
4438: POP
4439: POP
// if mpApemans then
4440: LD_EXP 30
4444: IFFALSE 4550
// begin for j := 1 to mpApemans do
4446: LD_ADDR_VAR 0 3
4450: PUSH
4451: DOUBLE
4452: LD_INT 1
4454: DEC
4455: ST_TO_ADDR
4456: LD_EXP 30
4460: PUSH
4461: FOR_TO
4462: IFFALSE 4548
// begin PrepareApeman ( - 5 ) ;
4464: LD_INT 5
4466: NEG
4467: PPUSH
4468: CALL 44109 0 1
// ape := CreateHuman ;
4472: LD_ADDR_VAR 0 10
4476: PUSH
4477: CALL_OW 44
4481: ST_TO_ADDR
// mpApePosIndex := Replace ( mpApePosIndex , pos , Join ( mpApePosIndex [ pos ] , ape ) ) ;
4482: LD_ADDR_EXP 32
4486: PUSH
4487: LD_EXP 32
4491: PPUSH
4492: LD_VAR 0 8
4496: PPUSH
4497: LD_EXP 32
4501: PUSH
4502: LD_VAR 0 8
4506: ARRAY
4507: PPUSH
4508: LD_VAR 0 10
4512: PPUSH
4513: CALL 47982 0 2
4517: PPUSH
4518: CALL_OW 1
4522: ST_TO_ADDR
// PlaceUnitArea ( ape , mpApemansArea [ pos ] , false ) ;
4523: LD_VAR 0 10
4527: PPUSH
4528: LD_EXP 31
4532: PUSH
4533: LD_VAR 0 8
4537: ARRAY
4538: PPUSH
4539: LD_INT 0
4541: PPUSH
4542: CALL_OW 49
// end ;
4546: GO 4461
4548: POP
4549: POP
// end ; end ;
4550: GO 3215
4552: POP
4553: POP
// if not mpTeamGame then
4554: LD_EXP 11
4558: NOT
4559: IFFALSE 4657
// begin for i := 1 to 8 do
4561: LD_ADDR_VAR 0 2
4565: PUSH
4566: DOUBLE
4567: LD_INT 1
4569: DEC
4570: ST_TO_ADDR
4571: LD_INT 8
4573: PUSH
4574: FOR_TO
4575: IFFALSE 4653
// for j := 1 to 8 do
4577: LD_ADDR_VAR 0 3
4581: PUSH
4582: DOUBLE
4583: LD_INT 1
4585: DEC
4586: ST_TO_ADDR
4587: LD_INT 8
4589: PUSH
4590: FOR_TO
4591: IFFALSE 4649
// if i <> j then
4593: LD_VAR 0 2
4597: PUSH
4598: LD_VAR 0 3
4602: NONEQUAL
4603: IFFALSE 4627
// SetAttitude ( i , j , att_neutral , true ) else
4605: LD_VAR 0 2
4609: PPUSH
4610: LD_VAR 0 3
4614: PPUSH
4615: LD_INT 0
4617: PPUSH
4618: LD_INT 1
4620: PPUSH
4621: CALL_OW 80
4625: GO 4647
// SetAttitude ( i , j , att_friend , true ) ;
4627: LD_VAR 0 2
4631: PPUSH
4632: LD_VAR 0 3
4636: PPUSH
4637: LD_INT 1
4639: PPUSH
4640: LD_INT 1
4642: PPUSH
4643: CALL_OW 80
4647: GO 4590
4649: POP
4650: POP
4651: GO 4574
4653: POP
4654: POP
// end else
4655: GO 4832
// begin if mpSharedVision then
4657: LD_EXP 16
4661: IFFALSE 4726
// begin for i in mpTeams do
4663: LD_ADDR_VAR 0 2
4667: PUSH
4668: LD_EXP 10
4672: PUSH
4673: FOR_IN
4674: IFFALSE 4724
// for j := 2 to i do
4676: LD_ADDR_VAR 0 3
4680: PUSH
4681: DOUBLE
4682: LD_INT 2
4684: DEC
4685: ST_TO_ADDR
4686: LD_VAR 0 2
4690: PUSH
4691: FOR_TO
4692: IFFALSE 4720
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
4694: LD_VAR 0 2
4698: PUSH
4699: LD_VAR 0 3
4703: ARRAY
4704: PPUSH
4705: LD_VAR 0 2
4709: PUSH
4710: LD_INT 1
4712: ARRAY
4713: PPUSH
4714: CALL_OW 343
4718: GO 4691
4720: POP
4721: POP
4722: GO 4673
4724: POP
4725: POP
// end ; for i := 1 to 8 do
4726: LD_ADDR_VAR 0 2
4730: PUSH
4731: DOUBLE
4732: LD_INT 1
4734: DEC
4735: ST_TO_ADDR
4736: LD_INT 8
4738: PUSH
4739: FOR_TO
4740: IFFALSE 4830
// for j := 1 to 8 do
4742: LD_ADDR_VAR 0 3
4746: PUSH
4747: DOUBLE
4748: LD_INT 1
4750: DEC
4751: ST_TO_ADDR
4752: LD_INT 8
4754: PUSH
4755: FOR_TO
4756: IFFALSE 4826
// if mpSideTeams [ i ] = mpSideTeams [ j ] then
4758: LD_EXP 8
4762: PUSH
4763: LD_VAR 0 2
4767: ARRAY
4768: PUSH
4769: LD_EXP 8
4773: PUSH
4774: LD_VAR 0 3
4778: ARRAY
4779: EQUAL
4780: IFFALSE 4804
// SetAttitude ( i , j , att_friend , true ) else
4782: LD_VAR 0 2
4786: PPUSH
4787: LD_VAR 0 3
4791: PPUSH
4792: LD_INT 1
4794: PPUSH
4795: LD_INT 1
4797: PPUSH
4798: CALL_OW 80
4802: GO 4824
// SetAttitude ( i , j , att_enemy , true ) ;
4804: LD_VAR 0 2
4808: PPUSH
4809: LD_VAR 0 3
4813: PPUSH
4814: LD_INT 2
4816: PPUSH
4817: LD_INT 1
4819: PPUSH
4820: CALL_OW 80
4824: GO 4755
4826: POP
4827: POP
4828: GO 4739
4830: POP
4831: POP
// end ; music_nat := mpSideNations [ your_side ] ;
4832: LD_ADDR_OWVAR 71
4836: PUSH
4837: LD_EXP 9
4841: PUSH
4842: LD_OWVAR 2
4846: ARRAY
4847: ST_TO_ADDR
// if IAmSpec then
4848: CALL_OW 531
4852: IFFALSE 4893
// begin FogOff ( true ) ;
4854: LD_INT 1
4856: PPUSH
4857: CALL_OW 344
// CenterNowOnXY ( mpMapSize [ 1 ] div 2 , mpMapSize [ 2 ] div 2 ) ;
4861: LD_EXP 29
4865: PUSH
4866: LD_INT 1
4868: ARRAY
4869: PUSH
4870: LD_INT 2
4872: DIV
4873: PPUSH
4874: LD_EXP 29
4878: PUSH
4879: LD_INT 2
4881: ARRAY
4882: PUSH
4883: LD_INT 2
4885: DIV
4886: PPUSH
4887: CALL_OW 86
// end else
4891: GO 4939
// begin CenterNowOnXY ( mpStartPos [ mpSidePositions [ your_side ] ] [ 1 ] , mpStartPos [ mpSidePositions [ your_side ] ] [ 2 ] ) ;
4893: LD_EXP 21
4897: PUSH
4898: LD_EXP 7
4902: PUSH
4903: LD_OWVAR 2
4907: ARRAY
4908: ARRAY
4909: PUSH
4910: LD_INT 1
4912: ARRAY
4913: PPUSH
4914: LD_EXP 21
4918: PUSH
4919: LD_EXP 7
4923: PUSH
4924: LD_OWVAR 2
4928: ARRAY
4929: ARRAY
4930: PUSH
4931: LD_INT 2
4933: ARRAY
4934: PPUSH
4935: CALL_OW 86
// end ; BeginBuildUp ;
4939: CALL 5995 0 0
// enable ( mpActive ) ;
4943: LD_INT 100
4945: ENABLE_MARKED
// enable ( mpGameType ) ;
4946: LD_EXP 3
4950: ENABLE_MARKED
// mpGameActive := true ;
4951: LD_ADDR_EXP 39
4955: PUSH
4956: LD_INT 1
4958: ST_TO_ADDR
// end ;
4959: LD_VAR 0 1
4963: RET
// var mpTeamPreset ; function mpPrepareTeam ( side , nation , amount , skill ) ; var i , un , class ; begin
4964: LD_INT 0
4966: PPUSH
4967: PPUSH
4968: PPUSH
4969: PPUSH
// result := [ ] ;
4970: LD_ADDR_VAR 0 5
4974: PUSH
4975: EMPTY
4976: ST_TO_ADDR
// class := class_soldier ;
4977: LD_ADDR_VAR 0 8
4981: PUSH
4982: LD_INT 1
4984: ST_TO_ADDR
// uc_side := side ;
4985: LD_ADDR_OWVAR 20
4989: PUSH
4990: LD_VAR 0 1
4994: ST_TO_ADDR
// uc_nation := nation ;
4995: LD_ADDR_OWVAR 21
4999: PUSH
5000: LD_VAR 0 2
5004: ST_TO_ADDR
// hc_name := mp_sides_players_names [ side ] ;
5005: LD_ADDR_OWVAR 26
5009: PUSH
5010: LD_OWVAR 19
5014: PUSH
5015: LD_VAR 0 1
5019: ARRAY
5020: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , class , skill + 2 ) ;
5021: LD_INT 1
5023: PPUSH
5024: LD_INT 2
5026: PPUSH
5027: CALL_OW 12
5031: PPUSH
5032: LD_VAR 0 8
5036: PPUSH
5037: LD_VAR 0 4
5041: PUSH
5042: LD_INT 2
5044: PLUS
5045: PPUSH
5046: CALL_OW 380
// hc_importance := 105 ;
5050: LD_ADDR_OWVAR 32
5054: PUSH
5055: LD_INT 105
5057: ST_TO_ADDR
// if Multiplayer then
5058: LD_OWVAR 4
5062: IFFALSE 5102
// begin hc_gallery := MULTIAVATARS ;
5064: LD_ADDR_OWVAR 33
5068: PUSH
5069: LD_STRING MULTIAVATARS
5071: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( side ) ;
5072: LD_ADDR_OWVAR 34
5076: PUSH
5077: LD_VAR 0 1
5081: PPUSH
5082: CALL_OW 525
5086: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( side ) ;
5087: LD_ADDR_OWVAR 27
5091: PUSH
5092: LD_VAR 0 1
5096: PPUSH
5097: CALL_OW 526
5101: ST_TO_ADDR
// end ; result := Join ( result , CreateHuman ) ;
5102: LD_ADDR_VAR 0 5
5106: PUSH
5107: LD_VAR 0 5
5111: PPUSH
5112: CALL_OW 44
5116: PPUSH
5117: CALL 47982 0 2
5121: ST_TO_ADDR
// if mpTeamPreset then
5122: LD_LOC 1
5126: IFFALSE 5222
// begin CopySkills ( mpTeamPreset [ 1 ] , result [ result ] ) ;
5128: LD_LOC 1
5132: PUSH
5133: LD_INT 1
5135: ARRAY
5136: PPUSH
5137: LD_VAR 0 5
5141: PUSH
5142: LD_VAR 0 5
5146: ARRAY
5147: PPUSH
5148: CALL_OW 510
// SetAttr ( result [ result ] , attr_stamina , GetAttr ( mpTeamPreset [ 1 ] , attr_stamina ) ) ;
5152: LD_VAR 0 5
5156: PUSH
5157: LD_VAR 0 5
5161: ARRAY
5162: PPUSH
5163: LD_INT 1
5165: PPUSH
5166: LD_LOC 1
5170: PUSH
5171: LD_INT 1
5173: ARRAY
5174: PPUSH
5175: LD_INT 1
5177: PPUSH
5178: CALL_OW 260
5182: PPUSH
5183: CALL_OW 239
// SetAttr ( result [ result ] , attr_speed , GetAttr ( mpTeamPreset [ 1 ] , attr_speed ) ) ;
5187: LD_VAR 0 5
5191: PUSH
5192: LD_VAR 0 5
5196: ARRAY
5197: PPUSH
5198: LD_INT 2
5200: PPUSH
5201: LD_LOC 1
5205: PUSH
5206: LD_INT 1
5208: ARRAY
5209: PPUSH
5210: LD_INT 2
5212: PPUSH
5213: CALL_OW 260
5217: PPUSH
5218: CALL_OW 239
// end ; InitHc_All ( ) ;
5222: CALL_OW 584
// class := 2 ;
5226: LD_ADDR_VAR 0 8
5230: PUSH
5231: LD_INT 2
5233: ST_TO_ADDR
// for i := 1 to ( amount - 1 ) do
5234: LD_ADDR_VAR 0 6
5238: PUSH
5239: DOUBLE
5240: LD_INT 1
5242: DEC
5243: ST_TO_ADDR
5244: LD_VAR 0 3
5248: PUSH
5249: LD_INT 1
5251: MINUS
5252: PUSH
5253: FOR_TO
5254: IFFALSE 5438
// begin PrepareHuman ( false , class , skill ) ;
5256: LD_INT 0
5258: PPUSH
5259: LD_VAR 0 8
5263: PPUSH
5264: LD_VAR 0 4
5268: PPUSH
5269: CALL_OW 380
// un := CreateHuman ;
5273: LD_ADDR_VAR 0 7
5277: PUSH
5278: CALL_OW 44
5282: ST_TO_ADDR
// result := Join ( result , un ) ;
5283: LD_ADDR_VAR 0 5
5287: PUSH
5288: LD_VAR 0 5
5292: PPUSH
5293: LD_VAR 0 7
5297: PPUSH
5298: CALL 47982 0 2
5302: ST_TO_ADDR
// if mpTeamPreset then
5303: LD_LOC 1
5307: IFFALSE 5403
// begin CopySkills ( mpTeamPreset [ i + 1 ] , un ) ;
5309: LD_LOC 1
5313: PUSH
5314: LD_VAR 0 6
5318: PUSH
5319: LD_INT 1
5321: PLUS
5322: ARRAY
5323: PPUSH
5324: LD_VAR 0 7
5328: PPUSH
5329: CALL_OW 510
// SetAttr ( un , attr_stamina , GetAttr ( mpTeamPreset [ i + 1 ] , attr_stamina ) ) ;
5333: LD_VAR 0 7
5337: PPUSH
5338: LD_INT 1
5340: PPUSH
5341: LD_LOC 1
5345: PUSH
5346: LD_VAR 0 6
5350: PUSH
5351: LD_INT 1
5353: PLUS
5354: ARRAY
5355: PPUSH
5356: LD_INT 1
5358: PPUSH
5359: CALL_OW 260
5363: PPUSH
5364: CALL_OW 239
// SetAttr ( un , attr_speed , GetAttr ( mpTeamPreset [ i + 1 ] , attr_speed ) ) ;
5368: LD_VAR 0 7
5372: PPUSH
5373: LD_INT 2
5375: PPUSH
5376: LD_LOC 1
5380: PUSH
5381: LD_VAR 0 6
5385: PUSH
5386: LD_INT 1
5388: PLUS
5389: ARRAY
5390: PPUSH
5391: LD_INT 2
5393: PPUSH
5394: CALL_OW 260
5398: PPUSH
5399: CALL_OW 239
// end ; class := Inc ( class ) ;
5403: LD_ADDR_VAR 0 8
5407: PUSH
5408: LD_VAR 0 8
5412: PPUSH
5413: CALL 49355 0 1
5417: ST_TO_ADDR
// if class = 5 then
5418: LD_VAR 0 8
5422: PUSH
5423: LD_INT 5
5425: EQUAL
5426: IFFALSE 5436
// class := 1 ;
5428: LD_ADDR_VAR 0 8
5432: PUSH
5433: LD_INT 1
5435: ST_TO_ADDR
// end ;
5436: GO 5253
5438: POP
5439: POP
// if not mpTeamPreset then
5440: LD_LOC 1
5444: NOT
5445: IFFALSE 5457
// mpTeamPreset := result ;
5447: LD_ADDR_LOC 1
5451: PUSH
5452: LD_VAR 0 5
5456: ST_TO_ADDR
// end ;
5457: LD_VAR 0 5
5461: RET
// function mpPrepareVehicles ( side , nation , vehicles ) ; var i ; begin
5462: LD_INT 0
5464: PPUSH
5465: PPUSH
// result := [ ] ;
5466: LD_ADDR_VAR 0 4
5470: PUSH
5471: EMPTY
5472: ST_TO_ADDR
// if not vehicles then
5473: LD_VAR 0 3
5477: NOT
5478: IFFALSE 5482
// exit ;
5480: GO 5696
// for i := 1 to vehicles [ nation ] do
5482: LD_ADDR_VAR 0 5
5486: PUSH
5487: DOUBLE
5488: LD_INT 1
5490: DEC
5491: ST_TO_ADDR
5492: LD_VAR 0 3
5496: PUSH
5497: LD_VAR 0 2
5501: ARRAY
5502: PUSH
5503: FOR_TO
5504: IFFALSE 5694
// begin uc_side := side ;
5506: LD_ADDR_OWVAR 20
5510: PUSH
5511: LD_VAR 0 1
5515: ST_TO_ADDR
// if Count ( vehicles [ nation ] [ i ] ) > 4 then
5516: LD_VAR 0 3
5520: PUSH
5521: LD_VAR 0 2
5525: ARRAY
5526: PUSH
5527: LD_VAR 0 5
5531: ARRAY
5532: PPUSH
5533: CALL 12050 0 1
5537: PUSH
5538: LD_INT 4
5540: GREATER
5541: IFFALSE 5571
// uc_nation := vehicles [ nation ] [ i ] [ 5 ] else
5543: LD_ADDR_OWVAR 21
5547: PUSH
5548: LD_VAR 0 3
5552: PUSH
5553: LD_VAR 0 2
5557: ARRAY
5558: PUSH
5559: LD_VAR 0 5
5563: ARRAY
5564: PUSH
5565: LD_INT 5
5567: ARRAY
5568: ST_TO_ADDR
5569: GO 5581
// uc_nation := nation ;
5571: LD_ADDR_OWVAR 21
5575: PUSH
5576: LD_VAR 0 2
5580: ST_TO_ADDR
// PrepareVehicle ( vehicles [ nation ] [ i ] [ 1 ] , vehicles [ nation ] [ i ] [ 2 ] , vehicles [ nation ] [ i ] [ 3 ] , vehicles [ nation ] [ i ] [ 4 ] , 80 ) ;
5581: LD_VAR 0 3
5585: PUSH
5586: LD_VAR 0 2
5590: ARRAY
5591: PUSH
5592: LD_VAR 0 5
5596: ARRAY
5597: PUSH
5598: LD_INT 1
5600: ARRAY
5601: PPUSH
5602: LD_VAR 0 3
5606: PUSH
5607: LD_VAR 0 2
5611: ARRAY
5612: PUSH
5613: LD_VAR 0 5
5617: ARRAY
5618: PUSH
5619: LD_INT 2
5621: ARRAY
5622: PPUSH
5623: LD_VAR 0 3
5627: PUSH
5628: LD_VAR 0 2
5632: ARRAY
5633: PUSH
5634: LD_VAR 0 5
5638: ARRAY
5639: PUSH
5640: LD_INT 3
5642: ARRAY
5643: PPUSH
5644: LD_VAR 0 3
5648: PUSH
5649: LD_VAR 0 2
5653: ARRAY
5654: PUSH
5655: LD_VAR 0 5
5659: ARRAY
5660: PUSH
5661: LD_INT 4
5663: ARRAY
5664: PPUSH
5665: LD_INT 80
5667: PPUSH
5668: CALL 14812 0 5
// result := Join ( result , CreateVehicle ) ;
5672: LD_ADDR_VAR 0 4
5676: PUSH
5677: LD_VAR 0 4
5681: PPUSH
5682: CALL_OW 45
5686: PPUSH
5687: CALL 47982 0 2
5691: ST_TO_ADDR
// end ;
5692: GO 5503
5694: POP
5695: POP
// end ;
5696: LD_VAR 0 4
5700: RET
// function mpUpdateFlags ( strength ) ; var i ; begin
5701: LD_INT 0
5703: PPUSH
5704: PPUSH
// for i in mpBattleFlags do
5705: LD_ADDR_VAR 0 3
5709: PUSH
5710: LD_EXP 23
5714: PUSH
5715: FOR_IN
5716: IFFALSE 5793
// ChangeBattleFlagOptions ( i , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength * 0.7 ] , [ bfo_defend_bonus_building , strength * 0.4 ] , [ bfo_height , strength ] ] ) ;
5718: LD_VAR 0 3
5722: PPUSH
5723: LD_INT 1
5725: PUSH
5726: LD_VAR 0 1
5730: PUSH
5731: EMPTY
5732: LIST
5733: LIST
5734: PUSH
5735: LD_INT 2
5737: PUSH
5738: LD_VAR 0 1
5742: PUSH
5743: LD_REAL  7.00000000000000E-0001
5746: MUL
5747: PUSH
5748: EMPTY
5749: LIST
5750: LIST
5751: PUSH
5752: LD_INT 3
5754: PUSH
5755: LD_VAR 0 1
5759: PUSH
5760: LD_REAL  4.00000000000000E-0001
5763: MUL
5764: PUSH
5765: EMPTY
5766: LIST
5767: LIST
5768: PUSH
5769: LD_INT 20
5771: PUSH
5772: LD_VAR 0 1
5776: PUSH
5777: EMPTY
5778: LIST
5779: LIST
5780: PUSH
5781: EMPTY
5782: LIST
5783: LIST
5784: LIST
5785: LIST
5786: PPUSH
5787: CALL_OW 423
5791: GO 5715
5793: POP
5794: POP
// end ;
5795: LD_VAR 0 2
5799: RET
// every 0 0$1 trigger mpActive do var i , strength ;
5800: LD_INT 100
5802: IFFALSE 5897
5804: GO 5806
5806: DISABLE
5807: LD_INT 0
5809: PPUSH
5810: PPUSH
// begin if mpBattleFlag <= 0 then
5811: LD_EXP 22
5815: PUSH
5816: LD_INT 0
5818: LESSEQUAL
5819: IFFALSE 5823
// exit ;
5821: GO 5897
// strength := 100 ;
5823: LD_ADDR_VAR 0 2
5827: PUSH
5828: LD_INT 100
5830: ST_TO_ADDR
// repeat wait ( mpBattleFlag ) ;
5831: LD_EXP 22
5835: PPUSH
5836: CALL_OW 67
// strength := Dec ( strength ) ;
5840: LD_ADDR_VAR 0 2
5844: PUSH
5845: LD_VAR 0 2
5849: PPUSH
5850: CALL 49377 0 1
5854: ST_TO_ADDR
// mpUpdateFlags ( strength ) ;
5855: LD_VAR 0 2
5859: PPUSH
5860: CALL 5701 0 1
// until not strength ;
5864: LD_VAR 0 2
5868: NOT
5869: IFFALSE 5831
// for i in mpBattleFlags do
5871: LD_ADDR_VAR 0 1
5875: PUSH
5876: LD_EXP 23
5880: PUSH
5881: FOR_IN
5882: IFFALSE 5895
// KillBattleFlag ( i ) ;
5884: LD_VAR 0 1
5888: PPUSH
5889: CALL_OW 419
5893: GO 5881
5895: POP
5896: POP
// end ;
5897: PPOPN 2
5899: END
// every 0 0$1 marked mpActive do var side , tmp ;
5900: GO 5902
5902: DISABLE
5903: LD_INT 0
5905: PPUSH
5906: PPUSH
// begin if mpSibBomb <= 1 then
5907: LD_EXP 28
5911: PUSH
5912: LD_INT 1
5914: LESSEQUAL
5915: IFFALSE 5919
// exit ;
5917: GO 5992
// tmp := mpSibBomb ;
5919: LD_ADDR_VAR 0 2
5923: PUSH
5924: LD_EXP 28
5928: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
5929: LD_INT 35
5931: PPUSH
5932: CALL_OW 67
// tmp := tmp - 0 0$1 ;
5936: LD_ADDR_VAR 0 2
5940: PUSH
5941: LD_VAR 0 2
5945: PUSH
5946: LD_INT 35
5948: MINUS
5949: ST_TO_ADDR
// until not tmp ;
5950: LD_VAR 0 2
5954: NOT
5955: IFFALSE 5929
// for side := 1 to 8 do
5957: LD_ADDR_VAR 0 1
5961: PUSH
5962: DOUBLE
5963: LD_INT 1
5965: DEC
5966: ST_TO_ADDR
5967: LD_INT 8
5969: PUSH
5970: FOR_TO
5971: IFFALSE 5990
// SetTech ( tech_SibFiss , side , state_enabled ) ;
5973: LD_INT 25
5975: PPUSH
5976: LD_VAR 0 1
5980: PPUSH
5981: LD_INT 1
5983: PPUSH
5984: CALL_OW 322
5988: GO 5970
5990: POP
5991: POP
// end ;
5992: PPOPN 2
5994: END
// export mpBuildUpTimeDelay , mpBuildUpTimeActive ; function BeginBuildUp ; var i , j ; begin
5995: LD_INT 0
5997: PPUSH
5998: PPUSH
5999: PPUSH
// mpBuildUpTimeDelay := 0 ;
6000: LD_ADDR_EXP 46
6004: PUSH
6005: LD_INT 0
6007: ST_TO_ADDR
// if not mpBuildUpTime then
6008: LD_EXP 20
6012: NOT
6013: IFFALSE 6017
// exit ;
6015: GO 6206
// mpBuildUpTimeDelay := 4 4$00 + 1 1$00 * mpBuildUpTime ;
6017: LD_ADDR_EXP 46
6021: PUSH
6022: LD_INT 8400
6024: PUSH
6025: LD_INT 2100
6027: PUSH
6028: LD_EXP 20
6032: MUL
6033: PLUS
6034: ST_TO_ADDR
// mpBuildUpTimeActive := true ;
6035: LD_ADDR_EXP 47
6039: PUSH
6040: LD_INT 1
6042: ST_TO_ADDR
// for i := 1 to 8 do
6043: LD_ADDR_VAR 0 2
6047: PUSH
6048: DOUBLE
6049: LD_INT 1
6051: DEC
6052: ST_TO_ADDR
6053: LD_INT 8
6055: PUSH
6056: FOR_TO
6057: IFFALSE 6204
// if mpSidePositions [ i ] then
6059: LD_EXP 7
6063: PUSH
6064: LD_VAR 0 2
6068: ARRAY
6069: IFFALSE 6202
// begin SetAreaMapShow ( mpBuildUpAreas [ mpSidePositions [ i ] ] , 5 ) ;
6071: LD_EXP 19
6075: PUSH
6076: LD_EXP 7
6080: PUSH
6081: LD_VAR 0 2
6085: ARRAY
6086: ARRAY
6087: PPUSH
6088: LD_INT 5
6090: PPUSH
6091: CALL_OW 424
// for j := 1 to 8 do
6095: LD_ADDR_VAR 0 3
6099: PUSH
6100: DOUBLE
6101: LD_INT 1
6103: DEC
6104: ST_TO_ADDR
6105: LD_INT 8
6107: PUSH
6108: FOR_TO
6109: IFFALSE 6200
// if mpSidePositions [ j ] and ( ( mpSideTeams [ i ] <> mpSideTeams [ j ] ) or ( not mpTeamGame ) and ( i <> j ) ) then
6111: LD_EXP 7
6115: PUSH
6116: LD_VAR 0 3
6120: ARRAY
6121: IFFALSE 6170
6123: PUSH
6124: LD_EXP 8
6128: PUSH
6129: LD_VAR 0 2
6133: ARRAY
6134: PUSH
6135: LD_EXP 8
6139: PUSH
6140: LD_VAR 0 3
6144: ARRAY
6145: NONEQUAL
6146: IFTRUE 6169
6148: PUSH
6149: LD_EXP 11
6153: NOT
6154: IFFALSE 6168
6156: PUSH
6157: LD_VAR 0 2
6161: PUSH
6162: LD_VAR 0 3
6166: NONEQUAL
6167: AND
6168: OR
6169: AND
6170: IFFALSE 6198
// HideArea ( j , mpBuildUpAreas [ mpSidePositions [ i ] ] ) ;
6172: LD_VAR 0 3
6176: PPUSH
6177: LD_EXP 19
6181: PUSH
6182: LD_EXP 7
6186: PUSH
6187: LD_VAR 0 2
6191: ARRAY
6192: ARRAY
6193: PPUSH
6194: CALL_OW 333
6198: GO 6108
6200: POP
6201: POP
// end ;
6202: GO 6056
6204: POP
6205: POP
// end ;
6206: LD_VAR 0 1
6210: RET
// function EndBuildUp ; var i , j ; begin
6211: LD_INT 0
6213: PPUSH
6214: PPUSH
6215: PPUSH
// mpBuildUpTimeActive := false ;
6216: LD_ADDR_EXP 47
6220: PUSH
6221: LD_INT 0
6223: ST_TO_ADDR
// for i := 1 to 8 do
6224: LD_ADDR_VAR 0 2
6228: PUSH
6229: DOUBLE
6230: LD_INT 1
6232: DEC
6233: ST_TO_ADDR
6234: LD_INT 8
6236: PUSH
6237: FOR_TO
6238: IFFALSE 6385
// if mpSidePositions [ i ] then
6240: LD_EXP 7
6244: PUSH
6245: LD_VAR 0 2
6249: ARRAY
6250: IFFALSE 6383
// begin SetAreaMapShow ( mpBuildUpAreas [ mpSidePositions [ i ] ] , 0 ) ;
6252: LD_EXP 19
6256: PUSH
6257: LD_EXP 7
6261: PUSH
6262: LD_VAR 0 2
6266: ARRAY
6267: ARRAY
6268: PPUSH
6269: LD_INT 0
6271: PPUSH
6272: CALL_OW 424
// for j := 1 to 8 do
6276: LD_ADDR_VAR 0 3
6280: PUSH
6281: DOUBLE
6282: LD_INT 1
6284: DEC
6285: ST_TO_ADDR
6286: LD_INT 8
6288: PUSH
6289: FOR_TO
6290: IFFALSE 6381
// if mpSidePositions [ j ] and ( ( mpSideTeams [ i ] <> mpSideTeams [ j ] ) or ( not mpTeamGame ) and ( i <> j ) ) then
6292: LD_EXP 7
6296: PUSH
6297: LD_VAR 0 3
6301: ARRAY
6302: IFFALSE 6351
6304: PUSH
6305: LD_EXP 8
6309: PUSH
6310: LD_VAR 0 2
6314: ARRAY
6315: PUSH
6316: LD_EXP 8
6320: PUSH
6321: LD_VAR 0 3
6325: ARRAY
6326: NONEQUAL
6327: IFTRUE 6350
6329: PUSH
6330: LD_EXP 11
6334: NOT
6335: IFFALSE 6349
6337: PUSH
6338: LD_VAR 0 2
6342: PUSH
6343: LD_VAR 0 3
6347: NONEQUAL
6348: AND
6349: OR
6350: AND
6351: IFFALSE 6379
// ShowArea ( j , mpBuildUpAreas [ mpSidePositions [ i ] ] ) ;
6353: LD_VAR 0 3
6357: PPUSH
6358: LD_EXP 19
6362: PUSH
6363: LD_EXP 7
6367: PUSH
6368: LD_VAR 0 2
6372: ARRAY
6373: ARRAY
6374: PPUSH
6375: CALL_OW 334
6379: GO 6289
6381: POP
6382: POP
// end ;
6383: GO 6237
6385: POP
6386: POP
// end ;
6387: LD_VAR 0 1
6391: RET
// every 5 trigger mpBuildUpTimeActive marked mpActive do var i , un ;
6392: LD_EXP 47
6396: IFFALSE 6575
6398: GO 6400
6400: DISABLE
6401: LD_INT 0
6403: PPUSH
6404: PPUSH
// begin for i := 1 to 8 do
6405: LD_ADDR_VAR 0 1
6409: PUSH
6410: DOUBLE
6411: LD_INT 1
6413: DEC
6414: ST_TO_ADDR
6415: LD_INT 8
6417: PUSH
6418: FOR_TO
6419: IFFALSE 6572
// if mpSidePositions [ i ] then
6421: LD_EXP 7
6425: PUSH
6426: LD_VAR 0 1
6430: ARRAY
6431: IFFALSE 6570
// for un in FilterUnitsInArea ( mpBuildUpAreas [ mpSidePositions [ i ] ] , [ [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] , [ f_side , your_side ] ] ) do
6433: LD_ADDR_VAR 0 2
6437: PUSH
6438: LD_EXP 19
6442: PUSH
6443: LD_EXP 7
6447: PUSH
6448: LD_VAR 0 1
6452: ARRAY
6453: ARRAY
6454: PPUSH
6455: LD_INT 2
6457: PUSH
6458: LD_INT 21
6460: PUSH
6461: LD_INT 1
6463: PUSH
6464: EMPTY
6465: LIST
6466: LIST
6467: PUSH
6468: LD_INT 21
6470: PUSH
6471: LD_INT 2
6473: PUSH
6474: EMPTY
6475: LIST
6476: LIST
6477: PUSH
6478: EMPTY
6479: LIST
6480: LIST
6481: LIST
6482: PUSH
6483: LD_INT 22
6485: PUSH
6486: LD_OWVAR 2
6490: PUSH
6491: EMPTY
6492: LIST
6493: LIST
6494: PUSH
6495: EMPTY
6496: LIST
6497: LIST
6498: PPUSH
6499: CALL_OW 70
6503: PUSH
6504: FOR_IN
6505: IFFALSE 6568
// if ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) or ( not mpTeamGame ) and ( i <> your_side ) ) then
6507: LD_EXP 8
6511: PUSH
6512: LD_VAR 0 1
6516: ARRAY
6517: PUSH
6518: LD_EXP 8
6522: PUSH
6523: LD_OWVAR 2
6527: ARRAY
6528: NONEQUAL
6529: IFTRUE 6552
6531: PUSH
6532: LD_EXP 11
6536: NOT
6537: IFFALSE 6551
6539: PUSH
6540: LD_VAR 0 1
6544: PUSH
6545: LD_OWVAR 2
6549: NONEQUAL
6550: AND
6551: OR
6552: IFFALSE 6566
// ComMoveToArea ( un , BuildUpEscape ) ;
6554: LD_VAR 0 2
6558: PPUSH
6559: LD_INT 9
6561: PPUSH
6562: CALL_OW 113
6566: GO 6504
6568: POP
6569: POP
6570: GO 6418
6572: POP
6573: POP
// enable ;
6574: ENABLE
// end ;
6575: PPOPN 2
6577: END
// every 0 0$1 trigger mpBuildUpTime marked mpActive do var tmp ;
6578: LD_EXP 20
6582: IFFALSE 6632
6584: GO 6586
6586: DISABLE
6587: LD_INT 0
6589: PPUSH
// begin tmp := mpBuildUpTime ;
6590: LD_ADDR_VAR 0 1
6594: PUSH
6595: LD_EXP 20
6599: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
6600: LD_INT 35
6602: PPUSH
6603: CALL_OW 67
// tmp := tmp - 0 0$1 ;
6607: LD_ADDR_VAR 0 1
6611: PUSH
6612: LD_VAR 0 1
6616: PUSH
6617: LD_INT 35
6619: MINUS
6620: ST_TO_ADDR
// until not tmp ;
6621: LD_VAR 0 1
6625: NOT
6626: IFFALSE 6600
// EndBuildUp ;
6628: CALL 6211 0 0
// end ;
6632: PPOPN 1
6634: END
// every 0 0$1 trigger mpActive marked mpWin do
6635: LD_INT 100
6637: IFFALSE 6671
6639: GO 6641
6641: DISABLE
// begin if IAmServer then
6642: CALL_OW 518
6646: IFFALSE 6655
// wait ( 0 0$3 ) ;
6648: LD_INT 105
6650: PPUSH
6651: CALL_OW 67
// if Multiplayer then
6655: LD_OWVAR 4
6659: IFFALSE 6667
// YouWinInMultiplayer else
6661: CALL_OW 106
6665: GO 6671
// YouWin ;
6667: CALL_OW 103
// end ;
6671: END
// export function HasPowerByGameType ( gameType , side ) ; begin
6672: LD_INT 0
6674: PPUSH
// result := false ;
6675: LD_ADDR_VAR 0 3
6679: PUSH
6680: LD_INT 0
6682: ST_TO_ADDR
// case gameType of GameTypeNormal , GameTypeFamine :
6683: LD_VAR 0 1
6687: PUSH
6688: LD_INT 1
6690: DOUBLE
6691: EQUAL
6692: IFTRUE 6702
6694: LD_INT 5
6696: DOUBLE
6697: EQUAL
6698: IFTRUE 6702
6700: GO 6775
6702: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) ;
6703: LD_ADDR_VAR 0 3
6707: PUSH
6708: LD_INT 22
6710: PUSH
6711: LD_VAR 0 2
6715: PUSH
6716: EMPTY
6717: LIST
6718: LIST
6719: PUSH
6720: LD_INT 2
6722: PUSH
6723: LD_INT 21
6725: PUSH
6726: LD_INT 1
6728: PUSH
6729: EMPTY
6730: LIST
6731: LIST
6732: PUSH
6733: LD_INT 33
6735: PUSH
6736: LD_INT 3
6738: PUSH
6739: EMPTY
6740: LIST
6741: LIST
6742: PUSH
6743: LD_INT 33
6745: PUSH
6746: LD_INT 5
6748: PUSH
6749: EMPTY
6750: LIST
6751: LIST
6752: PUSH
6753: EMPTY
6754: LIST
6755: LIST
6756: LIST
6757: LIST
6758: PUSH
6759: EMPTY
6760: LIST
6761: LIST
6762: PPUSH
6763: CALL_OW 69
6767: PPUSH
6768: CALL 12050 0 1
6772: ST_TO_ADDR
// end ; GameTypeSurvival :
6773: GO 7014
6775: LD_INT 2
6777: DOUBLE
6778: EQUAL
6779: IFTRUE 6783
6781: GO 6913
6783: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ) and Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) ;
6784: LD_ADDR_VAR 0 3
6788: PUSH
6789: LD_INT 22
6791: PUSH
6792: LD_VAR 0 2
6796: PUSH
6797: EMPTY
6798: LIST
6799: LIST
6800: PUSH
6801: LD_INT 2
6803: PUSH
6804: LD_INT 30
6806: PUSH
6807: LD_INT 0
6809: PUSH
6810: EMPTY
6811: LIST
6812: LIST
6813: PUSH
6814: LD_INT 30
6816: PUSH
6817: LD_INT 1
6819: PUSH
6820: EMPTY
6821: LIST
6822: LIST
6823: PUSH
6824: EMPTY
6825: LIST
6826: LIST
6827: LIST
6828: PUSH
6829: EMPTY
6830: LIST
6831: LIST
6832: PPUSH
6833: CALL_OW 69
6837: PPUSH
6838: CALL 12050 0 1
6842: IFFALSE 6910
6844: PUSH
6845: LD_INT 22
6847: PUSH
6848: LD_VAR 0 2
6852: PUSH
6853: EMPTY
6854: LIST
6855: LIST
6856: PUSH
6857: LD_INT 2
6859: PUSH
6860: LD_INT 21
6862: PUSH
6863: LD_INT 1
6865: PUSH
6866: EMPTY
6867: LIST
6868: LIST
6869: PUSH
6870: LD_INT 33
6872: PUSH
6873: LD_INT 3
6875: PUSH
6876: EMPTY
6877: LIST
6878: LIST
6879: PUSH
6880: LD_INT 33
6882: PUSH
6883: LD_INT 5
6885: PUSH
6886: EMPTY
6887: LIST
6888: LIST
6889: PUSH
6890: EMPTY
6891: LIST
6892: LIST
6893: LIST
6894: LIST
6895: PUSH
6896: EMPTY
6897: LIST
6898: LIST
6899: PPUSH
6900: CALL_OW 69
6904: PPUSH
6905: CALL 12050 0 1
6909: AND
6910: ST_TO_ADDR
// end ; GameTypeKing :
6911: GO 7014
6913: LD_INT 3
6915: DOUBLE
6916: EQUAL
6917: IFTRUE 6921
6919: GO 7013
6921: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) and HowMuchPointsKing ( side ) < mpPoints ;
6922: LD_ADDR_VAR 0 3
6926: PUSH
6927: LD_INT 22
6929: PUSH
6930: LD_VAR 0 2
6934: PUSH
6935: EMPTY
6936: LIST
6937: LIST
6938: PUSH
6939: LD_INT 2
6941: PUSH
6942: LD_INT 21
6944: PUSH
6945: LD_INT 1
6947: PUSH
6948: EMPTY
6949: LIST
6950: LIST
6951: PUSH
6952: LD_INT 33
6954: PUSH
6955: LD_INT 3
6957: PUSH
6958: EMPTY
6959: LIST
6960: LIST
6961: PUSH
6962: LD_INT 33
6964: PUSH
6965: LD_INT 5
6967: PUSH
6968: EMPTY
6969: LIST
6970: LIST
6971: PUSH
6972: EMPTY
6973: LIST
6974: LIST
6975: LIST
6976: LIST
6977: PUSH
6978: EMPTY
6979: LIST
6980: LIST
6981: PPUSH
6982: CALL_OW 69
6986: PPUSH
6987: CALL 12050 0 1
6991: IFFALSE 7010
6993: PUSH
6994: LD_VAR 0 2
6998: PPUSH
6999: CALL 59946 0 1
7003: PUSH
7004: LD_EXP 35
7008: LESS
7009: AND
7010: ST_TO_ADDR
// end ; end ;
7011: GO 7014
7013: POP
// end ;
7014: LD_VAR 0 3
7018: RET
// every 0 0$1 trigger mpActive marked mpLose do var gameIsOn , i ;
7019: LD_INT 100
7021: IFFALSE 7251
7023: GO 7025
7025: DISABLE
7026: LD_INT 0
7028: PPUSH
7029: PPUSH
// begin if Multiplayer then
7030: LD_OWVAR 4
7034: IFFALSE 7042
// SetPlayerSpectator ( ) else
7036: CALL_OW 572
7040: GO 7051
// FogOff ( your_side ) ;
7042: LD_OWVAR 2
7046: PPUSH
7047: CALL_OW 344
// repeat gameIsOn := false ;
7051: LD_ADDR_VAR 0 1
7055: PUSH
7056: LD_INT 0
7058: ST_TO_ADDR
// for i := 1 to 8 do
7059: LD_ADDR_VAR 0 2
7063: PUSH
7064: DOUBLE
7065: LD_INT 1
7067: DEC
7068: ST_TO_ADDR
7069: LD_INT 8
7071: PUSH
7072: FOR_TO
7073: IFFALSE 7203
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
7075: LD_EXP 7
7079: PUSH
7080: LD_VAR 0 2
7084: ARRAY
7085: IFFALSE 7098
7087: PUSH
7088: LD_VAR 0 2
7092: PPUSH
7093: CALL_OW 108
7097: AND
7098: IFFALSE 7112
7100: PUSH
7101: LD_VAR 0 2
7105: PUSH
7106: LD_OWVAR 2
7110: NONEQUAL
7111: AND
7112: IFFALSE 7201
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
7114: LD_EXP 8
7118: PUSH
7119: LD_VAR 0 2
7123: ARRAY
7124: NOT
7125: IFTRUE 7173
7127: PUSH
7128: LD_EXP 8
7132: PUSH
7133: LD_VAR 0 2
7137: ARRAY
7138: PUSH
7139: LD_EXP 8
7143: PUSH
7144: LD_OWVAR 2
7148: ARRAY
7149: NONEQUAL
7150: IFFALSE 7172
7152: PUSH
7153: LD_OWVAR 2
7157: PPUSH
7158: LD_VAR 0 2
7162: PPUSH
7163: CALL_OW 81
7167: PUSH
7168: LD_INT 1
7170: NONEQUAL
7171: AND
7172: OR
7173: IFFALSE 7201
// if HasPowerByGameType ( mpGameType , i ) then
7175: LD_EXP 3
7179: PPUSH
7180: LD_VAR 0 2
7184: PPUSH
7185: CALL 6672 0 2
7189: IFFALSE 7201
// begin gameIsOn := true ;
7191: LD_ADDR_VAR 0 1
7195: PUSH
7196: LD_INT 1
7198: ST_TO_ADDR
// break ;
7199: GO 7203
// end ;
7201: GO 7072
7203: POP
7204: POP
// wait ( 100 ) ;
7205: LD_INT 100
7207: PPUSH
7208: CALL_OW 67
// until not gameIsOn ;
7212: LD_VAR 0 1
7216: NOT
7217: IFFALSE 7051
// if IAmServer then
7219: CALL_OW 518
7223: IFFALSE 7232
// wait ( 0 0$3 ) ;
7225: LD_INT 105
7227: PPUSH
7228: CALL_OW 67
// if Multiplayer then
7232: LD_OWVAR 4
7236: IFFALSE 7244
// YouLostInMultiplayer else
7238: CALL_OW 107
7242: GO 7251
// YouLost (  ) ;
7244: LD_STRING 
7246: PPUSH
7247: CALL_OW 104
// end ;
7251: PPOPN 2
7253: END
// every 0 0$10 trigger mpRespawn marked mpActive do var i , j , tmp , spawn , sides ;
7254: LD_EXP 33
7258: IFFALSE 7642
7260: GO 7262
7262: DISABLE
7263: LD_INT 0
7265: PPUSH
7266: PPUSH
7267: PPUSH
7268: PPUSH
7269: PPUSH
// begin sides := [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 ] ;
7270: LD_ADDR_VAR 0 5
7274: PUSH
7275: LD_INT 1
7277: PUSH
7278: LD_INT 2
7280: PUSH
7281: LD_INT 3
7283: PUSH
7284: LD_INT 4
7286: PUSH
7287: LD_INT 5
7289: PUSH
7290: LD_INT 6
7292: PUSH
7293: LD_INT 7
7295: PUSH
7296: LD_INT 8
7298: PUSH
7299: EMPTY
7300: LIST
7301: LIST
7302: LIST
7303: LIST
7304: LIST
7305: LIST
7306: LIST
7307: LIST
7308: ST_TO_ADDR
// repeat wait ( 0 0$10 ) ;
7309: LD_INT 350
7311: PPUSH
7312: CALL_OW 67
// for i := 1 to 8 do
7316: LD_ADDR_VAR 0 1
7320: PUSH
7321: DOUBLE
7322: LD_INT 1
7324: DEC
7325: ST_TO_ADDR
7326: LD_INT 8
7328: PUSH
7329: FOR_TO
7330: IFFALSE 7612
// begin j := sides [ i ] ;
7332: LD_ADDR_VAR 0 2
7336: PUSH
7337: LD_VAR 0 5
7341: PUSH
7342: LD_VAR 0 1
7346: ARRAY
7347: ST_TO_ADDR
// if Count ( mpRespawnPull [ j ] ) and MultiplayerSideAlive ( j ) and HasPowerByGameType ( mpGameType , j ) then
7348: LD_EXP 40
7352: PUSH
7353: LD_VAR 0 2
7357: ARRAY
7358: PPUSH
7359: CALL 12050 0 1
7363: IFFALSE 7376
7365: PUSH
7366: LD_VAR 0 2
7370: PPUSH
7371: CALL_OW 108
7375: AND
7376: IFFALSE 7394
7378: PUSH
7379: LD_EXP 3
7383: PPUSH
7384: LD_VAR 0 2
7388: PPUSH
7389: CALL 6672 0 2
7393: AND
7394: IFFALSE 7610
// begin wait ( mpRespawn div 2 ) ;
7396: LD_EXP 33
7400: PUSH
7401: LD_INT 2
7403: DIV
7404: PPUSH
7405: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , j ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
7409: LD_ADDR_VAR 0 3
7413: PUSH
7414: LD_INT 22
7416: PUSH
7417: LD_VAR 0 2
7421: PUSH
7422: EMPTY
7423: LIST
7424: LIST
7425: PUSH
7426: LD_INT 50
7428: PUSH
7429: EMPTY
7430: LIST
7431: PUSH
7432: LD_INT 2
7434: PUSH
7435: LD_INT 30
7437: PUSH
7438: LD_INT 0
7440: PUSH
7441: EMPTY
7442: LIST
7443: LIST
7444: PUSH
7445: LD_INT 30
7447: PUSH
7448: LD_INT 1
7450: PUSH
7451: EMPTY
7452: LIST
7453: LIST
7454: PUSH
7455: EMPTY
7456: LIST
7457: LIST
7458: LIST
7459: PUSH
7460: EMPTY
7461: LIST
7462: LIST
7463: LIST
7464: PPUSH
7465: CALL_OW 69
7469: ST_TO_ADDR
// if not tmp or not MultiplayerSideAlive ( j ) or not HasPowerByGameType ( mpGameType , j ) then
7470: LD_VAR 0 3
7474: NOT
7475: IFTRUE 7489
7477: PUSH
7478: LD_VAR 0 2
7482: PPUSH
7483: CALL_OW 108
7487: NOT
7488: OR
7489: IFTRUE 7508
7491: PUSH
7492: LD_EXP 3
7496: PPUSH
7497: LD_VAR 0 2
7501: PPUSH
7502: CALL 6672 0 2
7506: NOT
7507: OR
7508: IFFALSE 7512
// continue ;
7510: GO 7329
// spawn := tmp [ 1 ] ;
7512: LD_ADDR_VAR 0 4
7516: PUSH
7517: LD_VAR 0 3
7521: PUSH
7522: LD_INT 1
7524: ARRAY
7525: ST_TO_ADDR
// PlaceUnitXYR ( mpRespawnPull [ j ] [ 1 ] , GetX ( spawn ) , GetY ( spawn ) , 32 , true ) ;
7526: LD_EXP 40
7530: PUSH
7531: LD_VAR 0 2
7535: ARRAY
7536: PUSH
7537: LD_INT 1
7539: ARRAY
7540: PPUSH
7541: LD_VAR 0 4
7545: PPUSH
7546: CALL_OW 250
7550: PPUSH
7551: LD_VAR 0 4
7555: PPUSH
7556: CALL_OW 251
7560: PPUSH
7561: LD_INT 32
7563: PPUSH
7564: LD_INT 1
7566: PPUSH
7567: CALL_OW 50
// mpRespawnPull := Replace ( mpRespawnPull , j , Delete ( mpRespawnPull [ j ] , 1 ) ) ;
7571: LD_ADDR_EXP 40
7575: PUSH
7576: LD_EXP 40
7580: PPUSH
7581: LD_VAR 0 2
7585: PPUSH
7586: LD_EXP 40
7590: PUSH
7591: LD_VAR 0 2
7595: ARRAY
7596: PPUSH
7597: LD_INT 1
7599: PPUSH
7600: CALL_OW 3
7604: PPUSH
7605: CALL_OW 1
7609: ST_TO_ADDR
// end ; end ;
7610: GO 7329
7612: POP
7613: POP
// sides := Reindex ( sides , 1 , 8 , true ) ;
7614: LD_ADDR_VAR 0 5
7618: PUSH
7619: LD_VAR 0 5
7623: PPUSH
7624: LD_INT 1
7626: PPUSH
7627: LD_INT 8
7629: PPUSH
7630: LD_INT 1
7632: PPUSH
7633: CALL 14342 0 4
7637: ST_TO_ADDR
// until false ;
7638: LD_INT 0
7640: IFFALSE 7309
// end ;
7642: PPOPN 5
7644: END
// every 0 0$1 marked mpActive do
7645: GO 7647
7647: DISABLE
// begin enable ;
7648: ENABLE
// if not mpDisplayStrings then
7649: LD_EXP 38
7653: NOT
7654: IFFALSE 7665
// begin display_strings := [ ] ;
7656: LD_ADDR_OWVAR 47
7660: PUSH
7661: EMPTY
7662: ST_TO_ADDR
// exit ;
7663: GO 7675
// end ; display_strings := mpDisplayStrings ;
7665: LD_ADDR_OWVAR 47
7669: PUSH
7670: LD_EXP 38
7674: ST_TO_ADDR
// end ; end_of_file
7675: END
// export function Multiplayer_UnitDestroyed ( un ) ; var i , ape , tag , class , area , nation , side , tmp ; begin
7676: LD_INT 0
7678: PPUSH
7679: PPUSH
7680: PPUSH
7681: PPUSH
7682: PPUSH
7683: PPUSH
7684: PPUSH
7685: PPUSH
7686: PPUSH
// if GetType ( un ) = unit_vehicle then
7687: LD_VAR 0 1
7691: PPUSH
7692: CALL_OW 247
7696: PUSH
7697: LD_INT 2
7699: EQUAL
7700: IFFALSE 7704
// exit ;
7702: GO 8378
// side := GetSide ( un ) ;
7704: LD_ADDR_VAR 0 9
7708: PUSH
7709: LD_VAR 0 1
7713: PPUSH
7714: CALL_OW 255
7718: ST_TO_ADDR
// if mpGameType = GameTypeSurvival then
7719: LD_EXP 3
7723: PUSH
7724: LD_INT 2
7726: EQUAL
7727: IFFALSE 7821
// if GetBType ( un ) in [ b_depot , b_warehouse ] then
7729: LD_VAR 0 1
7733: PPUSH
7734: CALL_OW 266
7738: PUSH
7739: LD_INT 0
7741: PUSH
7742: LD_INT 1
7744: PUSH
7745: EMPTY
7746: LIST
7747: LIST
7748: IN
7749: IFFALSE 7821
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] ] ] ) do
7751: LD_ADDR_VAR 0 3
7755: PUSH
7756: LD_INT 22
7758: PUSH
7759: LD_VAR 0 9
7763: PUSH
7764: EMPTY
7765: LIST
7766: LIST
7767: PUSH
7768: LD_INT 2
7770: PUSH
7771: LD_INT 21
7773: PUSH
7774: LD_INT 1
7776: PUSH
7777: EMPTY
7778: LIST
7779: LIST
7780: PUSH
7781: LD_INT 33
7783: PUSH
7784: LD_INT 3
7786: PUSH
7787: EMPTY
7788: LIST
7789: LIST
7790: PUSH
7791: EMPTY
7792: LIST
7793: LIST
7794: LIST
7795: PUSH
7796: EMPTY
7797: LIST
7798: LIST
7799: PPUSH
7800: CALL_OW 69
7804: PUSH
7805: FOR_IN
7806: IFFALSE 7819
// KillUnit ( i ) ;
7808: LD_VAR 0 3
7812: PPUSH
7813: CALL_OW 66
7817: GO 7805
7819: POP
7820: POP
// end ; if GetClass ( un ) in [ class_apeman , class_apeman_kamikaze , class_apeman_soldier , class_apeman_engineer ] or GetControl ( un ) = control_apeman then
7821: LD_VAR 0 1
7825: PPUSH
7826: CALL_OW 257
7830: PUSH
7831: LD_INT 12
7833: PUSH
7834: LD_INT 17
7836: PUSH
7837: LD_INT 15
7839: PUSH
7840: LD_INT 16
7842: PUSH
7843: EMPTY
7844: LIST
7845: LIST
7846: LIST
7847: LIST
7848: IN
7849: IFTRUE 7866
7851: PUSH
7852: LD_VAR 0 1
7856: PPUSH
7857: CALL_OW 263
7861: PUSH
7862: LD_INT 5
7864: EQUAL
7865: OR
7866: IFFALSE 8103
// begin tag := 0 ;
7868: LD_ADDR_VAR 0 5
7872: PUSH
7873: LD_INT 0
7875: ST_TO_ADDR
// for i := 1 to 8 do
7876: LD_ADDR_VAR 0 3
7880: PUSH
7881: DOUBLE
7882: LD_INT 1
7884: DEC
7885: ST_TO_ADDR
7886: LD_INT 8
7888: PUSH
7889: FOR_TO
7890: IFFALSE 7924
// if un in mpApePosIndex [ i ] then
7892: LD_VAR 0 1
7896: PUSH
7897: LD_EXP 32
7901: PUSH
7902: LD_VAR 0 3
7906: ARRAY
7907: IN
7908: IFFALSE 7922
// begin tag := i ;
7910: LD_ADDR_VAR 0 5
7914: PUSH
7915: LD_VAR 0 3
7919: ST_TO_ADDR
// break ;
7920: GO 7924
// end ;
7922: GO 7889
7924: POP
7925: POP
// if not tag then
7926: LD_VAR 0 5
7930: NOT
7931: IFFALSE 7935
// exit ;
7933: GO 8378
// area := mpApemansArea [ mpSidePositions [ tag ] ] ;
7935: LD_ADDR_VAR 0 7
7939: PUSH
7940: LD_EXP 31
7944: PUSH
7945: LD_EXP 7
7949: PUSH
7950: LD_VAR 0 5
7954: ARRAY
7955: ARRAY
7956: ST_TO_ADDR
// if not area then
7957: LD_VAR 0 7
7961: NOT
7962: IFFALSE 7966
// exit ;
7964: GO 8378
// wait ( 7 7$00 + ( ( ( un mod 5 ) + 1 ) * 0 0$20 ) ) ;
7966: LD_INT 14700
7968: PUSH
7969: LD_VAR 0 1
7973: PUSH
7974: LD_INT 5
7976: MOD
7977: PUSH
7978: LD_INT 1
7980: PLUS
7981: PUSH
7982: LD_INT 700
7984: MUL
7985: PLUS
7986: PPUSH
7987: CALL_OW 67
// repeat wait ( 10 ) ;
7991: LD_INT 10
7993: PPUSH
7994: CALL_OW 67
// until not mpBlockRespThread ;
7998: LD_EXP 45
8002: NOT
8003: IFFALSE 7991
// mpBlockRespThread := true ;
8005: LD_ADDR_EXP 45
8009: PUSH
8010: LD_INT 1
8012: ST_TO_ADDR
// PrepareApeman ( 0 ) ;
8013: LD_INT 0
8015: PPUSH
8016: CALL 44109 0 1
// ape := CreateHuman ;
8020: LD_ADDR_VAR 0 4
8024: PUSH
8025: CALL_OW 44
8029: ST_TO_ADDR
// mpApePosIndex := Replace ( mpApePosIndex , tag , Join ( mpApePosIndex [ tag ] , ape ) ) ;
8030: LD_ADDR_EXP 32
8034: PUSH
8035: LD_EXP 32
8039: PPUSH
8040: LD_VAR 0 5
8044: PPUSH
8045: LD_EXP 32
8049: PUSH
8050: LD_VAR 0 5
8054: ARRAY
8055: PPUSH
8056: LD_VAR 0 4
8060: PPUSH
8061: CALL 47982 0 2
8065: PPUSH
8066: CALL_OW 1
8070: ST_TO_ADDR
// PlaceUnitArea ( ape , area , false ) ;
8071: LD_VAR 0 4
8075: PPUSH
8076: LD_VAR 0 7
8080: PPUSH
8081: LD_INT 0
8083: PPUSH
8084: CALL_OW 49
// wait ( 10 ) ;
8088: LD_INT 10
8090: PPUSH
8091: CALL_OW 67
// mpBlockRespThread := false ;
8095: LD_ADDR_EXP 45
8099: PUSH
8100: LD_INT 0
8102: ST_TO_ADDR
// end ; if GetType ( un ) = unit_human and GetNation ( un ) > nation_nature then
8103: LD_VAR 0 1
8107: PPUSH
8108: CALL_OW 247
8112: PUSH
8113: LD_INT 1
8115: EQUAL
8116: IFFALSE 8133
8118: PUSH
8119: LD_VAR 0 1
8123: PPUSH
8124: CALL_OW 248
8128: PUSH
8129: LD_INT 0
8131: GREATER
8132: AND
8133: IFFALSE 8378
// begin if not mpRespawn then
8135: LD_EXP 33
8139: NOT
8140: IFFALSE 8144
// exit ;
8142: GO 8378
// if not MultiplayerSideAlive ( side ) and not HasPowerByGameType ( mpGameType , side ) then
8144: LD_VAR 0 9
8148: PPUSH
8149: CALL_OW 108
8153: NOT
8154: IFFALSE 8173
8156: PUSH
8157: LD_EXP 3
8161: PPUSH
8162: LD_VAR 0 9
8166: PPUSH
8167: CALL 6672 0 2
8171: NOT
8172: AND
8173: IFFALSE 8177
// exit ;
8175: GO 8378
// side := GetSide ( un ) ;
8177: LD_ADDR_VAR 0 9
8181: PUSH
8182: LD_VAR 0 1
8186: PPUSH
8187: CALL_OW 255
8191: ST_TO_ADDR
// nation := GetNation ( un ) ;
8192: LD_ADDR_VAR 0 8
8196: PUSH
8197: LD_VAR 0 1
8201: PPUSH
8202: CALL_OW 248
8206: ST_TO_ADDR
// class := GetClass ( un ) ;
8207: LD_ADDR_VAR 0 6
8211: PUSH
8212: LD_VAR 0 1
8216: PPUSH
8217: CALL_OW 257
8221: ST_TO_ADDR
// if class > 4 then
8222: LD_VAR 0 6
8226: PUSH
8227: LD_INT 4
8229: GREATER
8230: IFFALSE 8240
// class := 1 ;
8232: LD_ADDR_VAR 0 6
8236: PUSH
8237: LD_INT 1
8239: ST_TO_ADDR
// repeat wait ( 10 ) ;
8240: LD_INT 10
8242: PPUSH
8243: CALL_OW 67
// until not mpBlockRespThread ;
8247: LD_EXP 45
8251: NOT
8252: IFFALSE 8240
// mpBlockRespThread := true ;
8254: LD_ADDR_EXP 45
8258: PUSH
8259: LD_INT 1
8261: ST_TO_ADDR
// uc_side := side ;
8262: LD_ADDR_OWVAR 20
8266: PUSH
8267: LD_VAR 0 9
8271: ST_TO_ADDR
// uc_nation := nation ;
8272: LD_ADDR_OWVAR 21
8276: PUSH
8277: LD_VAR 0 8
8281: ST_TO_ADDR
// PrepareHuman ( false , class , 2 ) ;
8282: LD_INT 0
8284: PPUSH
8285: LD_VAR 0 6
8289: PPUSH
8290: LD_INT 2
8292: PPUSH
8293: CALL_OW 380
// un := CreateHuman ;
8297: LD_ADDR_VAR 0 1
8301: PUSH
8302: CALL_OW 44
8306: ST_TO_ADDR
// mpRespawnPull := Replace ( mpRespawnPull , side , Replace ( mpRespawnPull [ side ] , mpRespawnPull [ side ] + 1 , un ) ) ;
8307: LD_ADDR_EXP 40
8311: PUSH
8312: LD_EXP 40
8316: PPUSH
8317: LD_VAR 0 9
8321: PPUSH
8322: LD_EXP 40
8326: PUSH
8327: LD_VAR 0 9
8331: ARRAY
8332: PPUSH
8333: LD_EXP 40
8337: PUSH
8338: LD_VAR 0 9
8342: ARRAY
8343: PUSH
8344: LD_INT 1
8346: PLUS
8347: PPUSH
8348: LD_VAR 0 1
8352: PPUSH
8353: CALL_OW 1
8357: PPUSH
8358: CALL_OW 1
8362: ST_TO_ADDR
// wait ( 10 ) ;
8363: LD_INT 10
8365: PPUSH
8366: CALL_OW 67
// mpBlockRespThread := false ;
8370: LD_ADDR_EXP 45
8374: PUSH
8375: LD_INT 0
8377: ST_TO_ADDR
// end ; end ;
8378: LD_VAR 0 2
8382: RET
// export function Multiplayer_BuildingComplete ( building ) ; begin
8383: LD_INT 0
8385: PPUSH
// if GetBType ( building ) in [ b_depot , b_warehouse ] then
8386: LD_VAR 0 1
8390: PPUSH
8391: CALL_OW 266
8395: PUSH
8396: LD_INT 0
8398: PUSH
8399: LD_INT 1
8401: PUSH
8402: EMPTY
8403: LIST
8404: LIST
8405: IN
8406: IFFALSE 8431
// SetBName ( building , @ & GetSide ( building ) ) ;
8408: LD_VAR 0 1
8412: PPUSH
8413: LD_STRING @
8415: PUSH
8416: LD_VAR 0 1
8420: PPUSH
8421: CALL_OW 255
8425: STR
8426: PPUSH
8427: CALL_OW 500
// end ;
8431: LD_VAR 0 2
8435: RET
// export function Multiplayer_BuildingCaptured ( building , oldSide , unit ) ; var i ; begin
8436: LD_INT 0
8438: PPUSH
8439: PPUSH
// if mpGameType = GameTypeSurvival and GetBType ( building ) in [ b_depot , b_warehouse ] then
8440: LD_EXP 3
8444: PUSH
8445: LD_INT 2
8447: EQUAL
8448: IFFALSE 8472
8450: PUSH
8451: LD_VAR 0 1
8455: PPUSH
8456: CALL_OW 266
8460: PUSH
8461: LD_INT 0
8463: PUSH
8464: LD_INT 1
8466: PUSH
8467: EMPTY
8468: LIST
8469: LIST
8470: IN
8471: AND
8472: IFFALSE 8551
// begin SetSide ( building , oldSide ) ;
8474: LD_VAR 0 1
8478: PPUSH
8479: LD_VAR 0 2
8483: PPUSH
8484: CALL_OW 235
// KillUnit ( building ) ;
8488: LD_VAR 0 1
8492: PPUSH
8493: CALL_OW 66
// for i in FilterAllUnits ( [ [ f_side , oldSide ] , [ f_type , unit_human ] ] ) do
8497: LD_ADDR_VAR 0 5
8501: PUSH
8502: LD_INT 22
8504: PUSH
8505: LD_VAR 0 2
8509: PUSH
8510: EMPTY
8511: LIST
8512: LIST
8513: PUSH
8514: LD_INT 21
8516: PUSH
8517: LD_INT 1
8519: PUSH
8520: EMPTY
8521: LIST
8522: LIST
8523: PUSH
8524: EMPTY
8525: LIST
8526: LIST
8527: PPUSH
8528: CALL_OW 69
8532: PUSH
8533: FOR_IN
8534: IFFALSE 8547
// KillUnit ( i ) ;
8536: LD_VAR 0 5
8540: PPUSH
8541: CALL_OW 66
8545: GO 8533
8547: POP
8548: POP
// exit ;
8549: GO 8596
// end ; if GetBType ( building ) in [ b_depot , b_warehouse ] then
8551: LD_VAR 0 1
8555: PPUSH
8556: CALL_OW 266
8560: PUSH
8561: LD_INT 0
8563: PUSH
8564: LD_INT 1
8566: PUSH
8567: EMPTY
8568: LIST
8569: LIST
8570: IN
8571: IFFALSE 8596
// SetBName ( building , @ & GetSide ( building ) ) ;
8573: LD_VAR 0 1
8577: PPUSH
8578: LD_STRING @
8580: PUSH
8581: LD_VAR 0 1
8585: PPUSH
8586: CALL_OW 255
8590: STR
8591: PPUSH
8592: CALL_OW 500
// end ;
8596: LD_VAR 0 4
8600: RET
// export function Multiplayer_OilExtracted ( building , side , base , amount ) ; var i , value ; begin
8601: LD_INT 0
8603: PPUSH
8604: PPUSH
8605: PPUSH
// if mpGameType <> GameTypeFamine then
8606: LD_EXP 3
8610: PUSH
8611: LD_INT 5
8613: NONEQUAL
8614: IFFALSE 8618
// exit ;
8616: GO 8832
// for i := 1 to mpGlobalOilDeposits do
8618: LD_ADDR_VAR 0 6
8622: PUSH
8623: DOUBLE
8624: LD_INT 1
8626: DEC
8627: ST_TO_ADDR
8628: LD_EXP 41
8632: PUSH
8633: FOR_TO
8634: IFFALSE 8830
// begin if HexInfo ( mpGlobalOilDeposits [ i ] [ 1 ] , mpGlobalOilDeposits [ i ] [ 2 ] ) = building then
8636: LD_EXP 41
8640: PUSH
8641: LD_VAR 0 6
8645: ARRAY
8646: PUSH
8647: LD_INT 1
8649: ARRAY
8650: PPUSH
8651: LD_EXP 41
8655: PUSH
8656: LD_VAR 0 6
8660: ARRAY
8661: PUSH
8662: LD_INT 2
8664: ARRAY
8665: PPUSH
8666: CALL_OW 428
8670: PUSH
8671: LD_VAR 0 1
8675: EQUAL
8676: IFFALSE 8828
// begin value := mpGlobalOilDeposits [ i ] [ 3 ] ;
8678: LD_ADDR_VAR 0 7
8682: PUSH
8683: LD_EXP 41
8687: PUSH
8688: LD_VAR 0 6
8692: ARRAY
8693: PUSH
8694: LD_INT 3
8696: ARRAY
8697: ST_TO_ADDR
// value := Dec ( value ) ;
8698: LD_ADDR_VAR 0 7
8702: PUSH
8703: LD_VAR 0 7
8707: PPUSH
8708: CALL 49377 0 1
8712: ST_TO_ADDR
// mpGlobalOilDeposits := Replace ( mpGlobalOilDeposits , i , Replace ( mpGlobalOilDeposits [ i ] , 3 , value ) ) ;
8713: LD_ADDR_EXP 41
8717: PUSH
8718: LD_EXP 41
8722: PPUSH
8723: LD_VAR 0 6
8727: PPUSH
8728: LD_EXP 41
8732: PUSH
8733: LD_VAR 0 6
8737: ARRAY
8738: PPUSH
8739: LD_INT 3
8741: PPUSH
8742: LD_VAR 0 7
8746: PPUSH
8747: CALL_OW 1
8751: PPUSH
8752: CALL_OW 1
8756: ST_TO_ADDR
// SetUnitDisplayNumber ( building , value ) ;
8757: LD_VAR 0 1
8761: PPUSH
8762: LD_VAR 0 7
8766: PPUSH
8767: CALL_OW 505
// if value = 0 then
8771: LD_VAR 0 7
8775: PUSH
8776: LD_INT 0
8778: EQUAL
8779: IFFALSE 8828
// begin RemoveDepositXY ( mpGlobalOilDeposits [ i ] [ 1 ] , mpGlobalOilDeposits [ i ] [ 2 ] ) ;
8781: LD_EXP 41
8785: PUSH
8786: LD_VAR 0 6
8790: ARRAY
8791: PUSH
8792: LD_INT 1
8794: ARRAY
8795: PPUSH
8796: LD_EXP 41
8800: PUSH
8801: LD_VAR 0 6
8805: ARRAY
8806: PUSH
8807: LD_INT 2
8809: ARRAY
8810: PPUSH
8811: CALL_OW 63
// KillUnit ( building ) ;
8815: LD_VAR 0 1
8819: PPUSH
8820: CALL_OW 66
// exit ;
8824: POP
8825: POP
8826: GO 8832
// end ; end ; end ;
8828: GO 8633
8830: POP
8831: POP
// end ;
8832: LD_VAR 0 5
8836: RET
// export function Multiplayer_SibExtracted ( building , side , base , amount ) ; var i , value ; begin
8837: LD_INT 0
8839: PPUSH
8840: PPUSH
8841: PPUSH
// if mpGameType <> GameTypeFamine then
8842: LD_EXP 3
8846: PUSH
8847: LD_INT 5
8849: NONEQUAL
8850: IFFALSE 8854
// exit ;
8852: GO 9068
// for i := 1 to mpGlobalSibDeposits do
8854: LD_ADDR_VAR 0 6
8858: PUSH
8859: DOUBLE
8860: LD_INT 1
8862: DEC
8863: ST_TO_ADDR
8864: LD_EXP 42
8868: PUSH
8869: FOR_TO
8870: IFFALSE 9066
// begin if HexInfo ( mpGlobalSibDeposits [ i ] [ 1 ] , mpGlobalSibDeposits [ i ] [ 2 ] ) = building then
8872: LD_EXP 42
8876: PUSH
8877: LD_VAR 0 6
8881: ARRAY
8882: PUSH
8883: LD_INT 1
8885: ARRAY
8886: PPUSH
8887: LD_EXP 42
8891: PUSH
8892: LD_VAR 0 6
8896: ARRAY
8897: PUSH
8898: LD_INT 2
8900: ARRAY
8901: PPUSH
8902: CALL_OW 428
8906: PUSH
8907: LD_VAR 0 1
8911: EQUAL
8912: IFFALSE 9064
// begin value := mpGlobalSibDeposits [ i ] [ 3 ] ;
8914: LD_ADDR_VAR 0 7
8918: PUSH
8919: LD_EXP 42
8923: PUSH
8924: LD_VAR 0 6
8928: ARRAY
8929: PUSH
8930: LD_INT 3
8932: ARRAY
8933: ST_TO_ADDR
// value := Dec ( value ) ;
8934: LD_ADDR_VAR 0 7
8938: PUSH
8939: LD_VAR 0 7
8943: PPUSH
8944: CALL 49377 0 1
8948: ST_TO_ADDR
// mpGlobalSibDeposits := Replace ( mpGlobalSibDeposits , i , Replace ( mpGlobalSibDeposits [ i ] , 3 , value ) ) ;
8949: LD_ADDR_EXP 42
8953: PUSH
8954: LD_EXP 42
8958: PPUSH
8959: LD_VAR 0 6
8963: PPUSH
8964: LD_EXP 42
8968: PUSH
8969: LD_VAR 0 6
8973: ARRAY
8974: PPUSH
8975: LD_INT 3
8977: PPUSH
8978: LD_VAR 0 7
8982: PPUSH
8983: CALL_OW 1
8987: PPUSH
8988: CALL_OW 1
8992: ST_TO_ADDR
// SetUnitDisplayNumber ( building , value ) ;
8993: LD_VAR 0 1
8997: PPUSH
8998: LD_VAR 0 7
9002: PPUSH
9003: CALL_OW 505
// if value = 0 then
9007: LD_VAR 0 7
9011: PUSH
9012: LD_INT 0
9014: EQUAL
9015: IFFALSE 9064
// begin RemoveDepositXY ( mpGlobalSibDeposits [ i ] [ 1 ] , mpGlobalSibDeposits [ i ] [ 2 ] ) ;
9017: LD_EXP 42
9021: PUSH
9022: LD_VAR 0 6
9026: ARRAY
9027: PUSH
9028: LD_INT 1
9030: ARRAY
9031: PPUSH
9032: LD_EXP 42
9036: PUSH
9037: LD_VAR 0 6
9041: ARRAY
9042: PUSH
9043: LD_INT 2
9045: ARRAY
9046: PPUSH
9047: CALL_OW 63
// KillUnit ( building ) ;
9051: LD_VAR 0 1
9055: PPUSH
9056: CALL_OW 66
// exit ;
9060: POP
9061: POP
9062: GO 9068
// end ; end ; end ;
9064: GO 8869
9066: POP
9067: POP
// end ; end_of_file
9068: LD_VAR 0 5
9072: RET
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeNormal do var i , canWin ;
9073: LD_EXP 39
9077: IFFALSE 9085
9079: PUSH
9080: CALL 9295 0 0
9084: AND
9085: IFFALSE 9093
9087: PUSH
9088: LD_OWVAR 4
9092: AND
9093: IFFALSE 9292
9095: GO 9097
9097: DISABLE
9098: LD_INT 0
9100: PPUSH
9101: PPUSH
// begin canWin := false ;
9102: LD_ADDR_VAR 0 2
9106: PUSH
9107: LD_INT 0
9109: ST_TO_ADDR
// if not HasPower ( your_side ) then
9110: LD_OWVAR 2
9114: PPUSH
9115: CALL 9337 0 1
9119: NOT
9120: IFFALSE 9131
// begin Multiplayer_Loose_Message ;
9122: CALL_OW 521
// enable ( mpLose ) ;
9126: LD_INT 102
9128: ENABLE_MARKED
// end else
9129: GO 9292
// begin canWin := true ;
9131: LD_ADDR_VAR 0 2
9135: PUSH
9136: LD_INT 1
9138: ST_TO_ADDR
// for i := 1 to 8 do
9139: LD_ADDR_VAR 0 1
9143: PUSH
9144: DOUBLE
9145: LD_INT 1
9147: DEC
9148: ST_TO_ADDR
9149: LD_INT 8
9151: PUSH
9152: FOR_TO
9153: IFFALSE 9278
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
9155: LD_EXP 7
9159: PUSH
9160: LD_VAR 0 1
9164: ARRAY
9165: IFFALSE 9178
9167: PUSH
9168: LD_VAR 0 1
9172: PPUSH
9173: CALL_OW 108
9177: AND
9178: IFFALSE 9192
9180: PUSH
9181: LD_VAR 0 1
9185: PUSH
9186: LD_OWVAR 2
9190: NONEQUAL
9191: AND
9192: IFFALSE 9276
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
9194: LD_EXP 8
9198: PUSH
9199: LD_VAR 0 1
9203: ARRAY
9204: NOT
9205: IFTRUE 9253
9207: PUSH
9208: LD_EXP 8
9212: PUSH
9213: LD_VAR 0 1
9217: ARRAY
9218: PUSH
9219: LD_EXP 8
9223: PUSH
9224: LD_OWVAR 2
9228: ARRAY
9229: NONEQUAL
9230: IFFALSE 9252
9232: PUSH
9233: LD_OWVAR 2
9237: PPUSH
9238: LD_VAR 0 1
9242: PPUSH
9243: CALL_OW 81
9247: PUSH
9248: LD_INT 1
9250: NONEQUAL
9251: AND
9252: OR
9253: IFFALSE 9276
// if HasPower ( i ) then
9255: LD_VAR 0 1
9259: PPUSH
9260: CALL 9337 0 1
9264: IFFALSE 9276
// begin canWin := false ;
9266: LD_ADDR_VAR 0 2
9270: PUSH
9271: LD_INT 0
9273: ST_TO_ADDR
// break ;
9274: GO 9278
// end ;
9276: GO 9152
9278: POP
9279: POP
// if canWin then
9280: LD_VAR 0 2
9284: IFFALSE 9291
// enable ( mpWin ) else
9286: LD_INT 101
9288: ENABLE_MARKED
9289: GO 9292
// enable ;
9291: ENABLE
// end ; end ;
9292: PPOPN 2
9294: END
// function CanWinLoose ; begin
9295: LD_INT 0
9297: PPUSH
// result := true ;
9298: LD_ADDR_VAR 0 1
9302: PUSH
9303: LD_INT 1
9305: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
9306: CALL_OW 531
9310: IFFALSE 9322
9312: PUSH
9313: CALL_OW 519
9317: PUSH
9318: LD_INT 1
9320: GREATER
9321: AND
9322: IFFALSE 9332
// result := false ;
9324: LD_ADDR_VAR 0 1
9328: PUSH
9329: LD_INT 0
9331: ST_TO_ADDR
// end ;
9332: LD_VAR 0 1
9336: RET
// function HasPower ( i ) ; begin
9337: LD_INT 0
9339: PPUSH
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
9340: LD_ADDR_VAR 0 2
9344: PUSH
9345: LD_INT 22
9347: PUSH
9348: LD_VAR 0 1
9352: PUSH
9353: EMPTY
9354: LIST
9355: LIST
9356: PUSH
9357: LD_INT 2
9359: PUSH
9360: LD_INT 21
9362: PUSH
9363: LD_INT 1
9365: PUSH
9366: EMPTY
9367: LIST
9368: LIST
9369: PUSH
9370: LD_INT 33
9372: PUSH
9373: LD_INT 3
9375: PUSH
9376: EMPTY
9377: LIST
9378: LIST
9379: PUSH
9380: LD_INT 33
9382: PUSH
9383: LD_INT 5
9385: PUSH
9386: EMPTY
9387: LIST
9388: LIST
9389: PUSH
9390: EMPTY
9391: LIST
9392: LIST
9393: LIST
9394: LIST
9395: PUSH
9396: EMPTY
9397: LIST
9398: LIST
9399: PPUSH
9400: CALL_OW 69
9404: ST_TO_ADDR
// end ; end_of_file
9405: LD_VAR 0 2
9409: RET
// every 0 0$1 trigger mpGameActive marked GameTypeSurvival do var i ;
9410: LD_EXP 39
9414: IFFALSE 9457
9416: GO 9418
9418: DISABLE
9419: LD_INT 0
9421: PPUSH
// begin for i := 1 to 8 do
9422: LD_ADDR_VAR 0 1
9426: PUSH
9427: DOUBLE
9428: LD_INT 1
9430: DEC
9431: ST_TO_ADDR
9432: LD_INT 8
9434: PUSH
9435: FOR_TO
9436: IFFALSE 9455
// SetRestrict ( b_depot , i , state_disabled ) ;
9438: LD_INT 0
9440: PPUSH
9441: LD_VAR 0 1
9445: PPUSH
9446: LD_INT 0
9448: PPUSH
9449: CALL_OW 324
9453: GO 9435
9455: POP
9456: POP
// end ;
9457: PPOPN 1
9459: END
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeSurvival do var i , canWin ;
9460: LD_EXP 39
9464: IFFALSE 9472
9466: PUSH
9467: CALL 9682 0 0
9471: AND
9472: IFFALSE 9480
9474: PUSH
9475: LD_OWVAR 4
9479: AND
9480: IFFALSE 9679
9482: GO 9484
9484: DISABLE
9485: LD_INT 0
9487: PPUSH
9488: PPUSH
// begin canWin := false ;
9489: LD_ADDR_VAR 0 2
9493: PUSH
9494: LD_INT 0
9496: ST_TO_ADDR
// if not HasPower ( your_side ) then
9497: LD_OWVAR 2
9501: PPUSH
9502: CALL 9724 0 1
9506: NOT
9507: IFFALSE 9518
// begin Multiplayer_Loose_Message ;
9509: CALL_OW 521
// enable ( mpLose ) ;
9513: LD_INT 102
9515: ENABLE_MARKED
// end else
9516: GO 9679
// begin canWin := true ;
9518: LD_ADDR_VAR 0 2
9522: PUSH
9523: LD_INT 1
9525: ST_TO_ADDR
// for i := 1 to 8 do
9526: LD_ADDR_VAR 0 1
9530: PUSH
9531: DOUBLE
9532: LD_INT 1
9534: DEC
9535: ST_TO_ADDR
9536: LD_INT 8
9538: PUSH
9539: FOR_TO
9540: IFFALSE 9665
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
9542: LD_EXP 7
9546: PUSH
9547: LD_VAR 0 1
9551: ARRAY
9552: IFFALSE 9565
9554: PUSH
9555: LD_VAR 0 1
9559: PPUSH
9560: CALL_OW 108
9564: AND
9565: IFFALSE 9579
9567: PUSH
9568: LD_VAR 0 1
9572: PUSH
9573: LD_OWVAR 2
9577: NONEQUAL
9578: AND
9579: IFFALSE 9663
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
9581: LD_EXP 8
9585: PUSH
9586: LD_VAR 0 1
9590: ARRAY
9591: NOT
9592: IFTRUE 9640
9594: PUSH
9595: LD_EXP 8
9599: PUSH
9600: LD_VAR 0 1
9604: ARRAY
9605: PUSH
9606: LD_EXP 8
9610: PUSH
9611: LD_OWVAR 2
9615: ARRAY
9616: NONEQUAL
9617: IFFALSE 9639
9619: PUSH
9620: LD_OWVAR 2
9624: PPUSH
9625: LD_VAR 0 1
9629: PPUSH
9630: CALL_OW 81
9634: PUSH
9635: LD_INT 1
9637: NONEQUAL
9638: AND
9639: OR
9640: IFFALSE 9663
// if HasPower ( i ) then
9642: LD_VAR 0 1
9646: PPUSH
9647: CALL 9724 0 1
9651: IFFALSE 9663
// begin canWin := false ;
9653: LD_ADDR_VAR 0 2
9657: PUSH
9658: LD_INT 0
9660: ST_TO_ADDR
// break ;
9661: GO 9665
// end ;
9663: GO 9539
9665: POP
9666: POP
// if canWin then
9667: LD_VAR 0 2
9671: IFFALSE 9678
// enable ( mpWin ) else
9673: LD_INT 101
9675: ENABLE_MARKED
9676: GO 9679
// enable ;
9678: ENABLE
// end ; end ;
9679: PPOPN 2
9681: END
// function CanWinLoose ; begin
9682: LD_INT 0
9684: PPUSH
// result := true ;
9685: LD_ADDR_VAR 0 1
9689: PUSH
9690: LD_INT 1
9692: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
9693: CALL_OW 531
9697: IFFALSE 9709
9699: PUSH
9700: CALL_OW 519
9704: PUSH
9705: LD_INT 1
9707: GREATER
9708: AND
9709: IFFALSE 9719
// result := false ;
9711: LD_ADDR_VAR 0 1
9715: PUSH
9716: LD_INT 0
9718: ST_TO_ADDR
// end ;
9719: LD_VAR 0 1
9723: RET
// function HasPower ( i ) ; begin
9724: LD_INT 0
9726: PPUSH
// if not FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) then
9727: LD_INT 22
9729: PUSH
9730: LD_VAR 0 1
9734: PUSH
9735: EMPTY
9736: LIST
9737: LIST
9738: PUSH
9739: LD_INT 2
9741: PUSH
9742: LD_INT 30
9744: PUSH
9745: LD_INT 0
9747: PUSH
9748: EMPTY
9749: LIST
9750: LIST
9751: PUSH
9752: LD_INT 30
9754: PUSH
9755: LD_INT 1
9757: PUSH
9758: EMPTY
9759: LIST
9760: LIST
9761: PUSH
9762: EMPTY
9763: LIST
9764: LIST
9765: LIST
9766: PUSH
9767: EMPTY
9768: LIST
9769: LIST
9770: PPUSH
9771: CALL_OW 69
9775: NOT
9776: IFFALSE 9780
// exit ;
9778: GO 9845
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
9780: LD_ADDR_VAR 0 2
9784: PUSH
9785: LD_INT 22
9787: PUSH
9788: LD_VAR 0 1
9792: PUSH
9793: EMPTY
9794: LIST
9795: LIST
9796: PUSH
9797: LD_INT 2
9799: PUSH
9800: LD_INT 21
9802: PUSH
9803: LD_INT 1
9805: PUSH
9806: EMPTY
9807: LIST
9808: LIST
9809: PUSH
9810: LD_INT 33
9812: PUSH
9813: LD_INT 3
9815: PUSH
9816: EMPTY
9817: LIST
9818: LIST
9819: PUSH
9820: LD_INT 33
9822: PUSH
9823: LD_INT 5
9825: PUSH
9826: EMPTY
9827: LIST
9828: LIST
9829: PUSH
9830: EMPTY
9831: LIST
9832: LIST
9833: LIST
9834: LIST
9835: PUSH
9836: EMPTY
9837: LIST
9838: LIST
9839: PPUSH
9840: CALL_OW 69
9844: ST_TO_ADDR
// end ; end_of_file
9845: LD_VAR 0 2
9849: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
9850: LD_INT 0
9852: PPUSH
9853: PPUSH
// if exist_mode then
9854: LD_VAR 0 2
9858: IFFALSE 9904
// begin unit := CreateCharacter ( prefix & ident ) ;
9860: LD_ADDR_VAR 0 5
9864: PUSH
9865: LD_VAR 0 3
9869: PUSH
9870: LD_VAR 0 1
9874: STR
9875: PPUSH
9876: CALL_OW 34
9880: ST_TO_ADDR
// if unit then
9881: LD_VAR 0 5
9885: IFFALSE 9902
// DeleteCharacters ( prefix & ident ) ;
9887: LD_VAR 0 3
9891: PUSH
9892: LD_VAR 0 1
9896: STR
9897: PPUSH
9898: CALL_OW 40
// end else
9902: GO 9919
// unit := NewCharacter ( ident ) ;
9904: LD_ADDR_VAR 0 5
9908: PUSH
9909: LD_VAR 0 1
9913: PPUSH
9914: CALL_OW 25
9918: ST_TO_ADDR
// result := unit ;
9919: LD_ADDR_VAR 0 4
9923: PUSH
9924: LD_VAR 0 5
9928: ST_TO_ADDR
// end ;
9929: LD_VAR 0 4
9933: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
9934: LD_INT 0
9936: PPUSH
9937: PPUSH
// if exist_mode then
9938: LD_VAR 0 2
9942: IFFALSE 9967
// unit := CreateCharacter ( prefix & ident ) else
9944: LD_ADDR_VAR 0 5
9948: PUSH
9949: LD_VAR 0 3
9953: PUSH
9954: LD_VAR 0 1
9958: STR
9959: PPUSH
9960: CALL_OW 34
9964: ST_TO_ADDR
9965: GO 9982
// unit := NewCharacter ( ident ) ;
9967: LD_ADDR_VAR 0 5
9971: PUSH
9972: LD_VAR 0 1
9976: PPUSH
9977: CALL_OW 25
9981: ST_TO_ADDR
// result := unit ;
9982: LD_ADDR_VAR 0 4
9986: PUSH
9987: LD_VAR 0 5
9991: ST_TO_ADDR
// end ;
9992: LD_VAR 0 4
9996: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
9997: LD_INT 0
9999: PPUSH
10000: PPUSH
// if not side or not nation then
10001: LD_VAR 0 1
10005: NOT
10006: IFTRUE 10015
10008: PUSH
10009: LD_VAR 0 2
10013: NOT
10014: OR
10015: IFFALSE 10019
// exit ;
10017: GO 10789
// case nation of nation_american :
10019: LD_VAR 0 2
10023: PUSH
10024: LD_INT 1
10026: DOUBLE
10027: EQUAL
10028: IFTRUE 10032
10030: GO 10246
10032: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
10033: LD_ADDR_VAR 0 4
10037: PUSH
10038: LD_INT 35
10040: PUSH
10041: LD_INT 45
10043: PUSH
10044: LD_INT 46
10046: PUSH
10047: LD_INT 47
10049: PUSH
10050: LD_INT 82
10052: PUSH
10053: LD_INT 83
10055: PUSH
10056: LD_INT 84
10058: PUSH
10059: LD_INT 85
10061: PUSH
10062: LD_INT 86
10064: PUSH
10065: LD_INT 1
10067: PUSH
10068: LD_INT 2
10070: PUSH
10071: LD_INT 6
10073: PUSH
10074: LD_INT 15
10076: PUSH
10077: LD_INT 16
10079: PUSH
10080: LD_INT 7
10082: PUSH
10083: LD_INT 12
10085: PUSH
10086: LD_INT 13
10088: PUSH
10089: LD_INT 10
10091: PUSH
10092: LD_INT 14
10094: PUSH
10095: LD_INT 20
10097: PUSH
10098: LD_INT 21
10100: PUSH
10101: LD_INT 22
10103: PUSH
10104: LD_INT 25
10106: PUSH
10107: LD_INT 32
10109: PUSH
10110: LD_INT 27
10112: PUSH
10113: LD_INT 36
10115: PUSH
10116: LD_INT 69
10118: PUSH
10119: LD_INT 39
10121: PUSH
10122: LD_INT 34
10124: PUSH
10125: LD_INT 40
10127: PUSH
10128: LD_INT 48
10130: PUSH
10131: LD_INT 49
10133: PUSH
10134: LD_INT 50
10136: PUSH
10137: LD_INT 51
10139: PUSH
10140: LD_INT 52
10142: PUSH
10143: LD_INT 53
10145: PUSH
10146: LD_INT 54
10148: PUSH
10149: LD_INT 55
10151: PUSH
10152: LD_INT 56
10154: PUSH
10155: LD_INT 57
10157: PUSH
10158: LD_INT 58
10160: PUSH
10161: LD_INT 59
10163: PUSH
10164: LD_INT 60
10166: PUSH
10167: LD_INT 61
10169: PUSH
10170: LD_INT 62
10172: PUSH
10173: LD_INT 80
10175: PUSH
10176: LD_INT 82
10178: PUSH
10179: LD_INT 83
10181: PUSH
10182: LD_INT 84
10184: PUSH
10185: LD_INT 85
10187: PUSH
10188: LD_INT 86
10190: PUSH
10191: EMPTY
10192: LIST
10193: LIST
10194: LIST
10195: LIST
10196: LIST
10197: LIST
10198: LIST
10199: LIST
10200: LIST
10201: LIST
10202: LIST
10203: LIST
10204: LIST
10205: LIST
10206: LIST
10207: LIST
10208: LIST
10209: LIST
10210: LIST
10211: LIST
10212: LIST
10213: LIST
10214: LIST
10215: LIST
10216: LIST
10217: LIST
10218: LIST
10219: LIST
10220: LIST
10221: LIST
10222: LIST
10223: LIST
10224: LIST
10225: LIST
10226: LIST
10227: LIST
10228: LIST
10229: LIST
10230: LIST
10231: LIST
10232: LIST
10233: LIST
10234: LIST
10235: LIST
10236: LIST
10237: LIST
10238: LIST
10239: LIST
10240: LIST
10241: LIST
10242: LIST
10243: ST_TO_ADDR
10244: GO 10711
10246: LD_INT 2
10248: DOUBLE
10249: EQUAL
10250: IFTRUE 10254
10252: GO 10480
10254: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
10255: LD_ADDR_VAR 0 4
10259: PUSH
10260: LD_INT 35
10262: PUSH
10263: LD_INT 45
10265: PUSH
10266: LD_INT 46
10268: PUSH
10269: LD_INT 47
10271: PUSH
10272: LD_INT 82
10274: PUSH
10275: LD_INT 83
10277: PUSH
10278: LD_INT 84
10280: PUSH
10281: LD_INT 85
10283: PUSH
10284: LD_INT 87
10286: PUSH
10287: LD_INT 70
10289: PUSH
10290: LD_INT 1
10292: PUSH
10293: LD_INT 11
10295: PUSH
10296: LD_INT 3
10298: PUSH
10299: LD_INT 4
10301: PUSH
10302: LD_INT 5
10304: PUSH
10305: LD_INT 6
10307: PUSH
10308: LD_INT 15
10310: PUSH
10311: LD_INT 18
10313: PUSH
10314: LD_INT 7
10316: PUSH
10317: LD_INT 17
10319: PUSH
10320: LD_INT 8
10322: PUSH
10323: LD_INT 20
10325: PUSH
10326: LD_INT 21
10328: PUSH
10329: LD_INT 22
10331: PUSH
10332: LD_INT 72
10334: PUSH
10335: LD_INT 26
10337: PUSH
10338: LD_INT 69
10340: PUSH
10341: LD_INT 39
10343: PUSH
10344: LD_INT 40
10346: PUSH
10347: LD_INT 41
10349: PUSH
10350: LD_INT 42
10352: PUSH
10353: LD_INT 43
10355: PUSH
10356: LD_INT 48
10358: PUSH
10359: LD_INT 49
10361: PUSH
10362: LD_INT 50
10364: PUSH
10365: LD_INT 51
10367: PUSH
10368: LD_INT 52
10370: PUSH
10371: LD_INT 53
10373: PUSH
10374: LD_INT 54
10376: PUSH
10377: LD_INT 55
10379: PUSH
10380: LD_INT 56
10382: PUSH
10383: LD_INT 60
10385: PUSH
10386: LD_INT 61
10388: PUSH
10389: LD_INT 62
10391: PUSH
10392: LD_INT 66
10394: PUSH
10395: LD_INT 67
10397: PUSH
10398: LD_INT 68
10400: PUSH
10401: LD_INT 81
10403: PUSH
10404: LD_INT 82
10406: PUSH
10407: LD_INT 83
10409: PUSH
10410: LD_INT 84
10412: PUSH
10413: LD_INT 85
10415: PUSH
10416: LD_INT 87
10418: PUSH
10419: LD_INT 88
10421: PUSH
10422: EMPTY
10423: LIST
10424: LIST
10425: LIST
10426: LIST
10427: LIST
10428: LIST
10429: LIST
10430: LIST
10431: LIST
10432: LIST
10433: LIST
10434: LIST
10435: LIST
10436: LIST
10437: LIST
10438: LIST
10439: LIST
10440: LIST
10441: LIST
10442: LIST
10443: LIST
10444: LIST
10445: LIST
10446: LIST
10447: LIST
10448: LIST
10449: LIST
10450: LIST
10451: LIST
10452: LIST
10453: LIST
10454: LIST
10455: LIST
10456: LIST
10457: LIST
10458: LIST
10459: LIST
10460: LIST
10461: LIST
10462: LIST
10463: LIST
10464: LIST
10465: LIST
10466: LIST
10467: LIST
10468: LIST
10469: LIST
10470: LIST
10471: LIST
10472: LIST
10473: LIST
10474: LIST
10475: LIST
10476: LIST
10477: ST_TO_ADDR
10478: GO 10711
10480: LD_INT 3
10482: DOUBLE
10483: EQUAL
10484: IFTRUE 10488
10486: GO 10710
10488: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
10489: LD_ADDR_VAR 0 4
10493: PUSH
10494: LD_INT 46
10496: PUSH
10497: LD_INT 47
10499: PUSH
10500: LD_INT 1
10502: PUSH
10503: LD_INT 2
10505: PUSH
10506: LD_INT 82
10508: PUSH
10509: LD_INT 83
10511: PUSH
10512: LD_INT 84
10514: PUSH
10515: LD_INT 85
10517: PUSH
10518: LD_INT 86
10520: PUSH
10521: LD_INT 11
10523: PUSH
10524: LD_INT 9
10526: PUSH
10527: LD_INT 20
10529: PUSH
10530: LD_INT 19
10532: PUSH
10533: LD_INT 21
10535: PUSH
10536: LD_INT 24
10538: PUSH
10539: LD_INT 22
10541: PUSH
10542: LD_INT 25
10544: PUSH
10545: LD_INT 28
10547: PUSH
10548: LD_INT 29
10550: PUSH
10551: LD_INT 30
10553: PUSH
10554: LD_INT 31
10556: PUSH
10557: LD_INT 37
10559: PUSH
10560: LD_INT 38
10562: PUSH
10563: LD_INT 32
10565: PUSH
10566: LD_INT 27
10568: PUSH
10569: LD_INT 33
10571: PUSH
10572: LD_INT 69
10574: PUSH
10575: LD_INT 39
10577: PUSH
10578: LD_INT 34
10580: PUSH
10581: LD_INT 40
10583: PUSH
10584: LD_INT 71
10586: PUSH
10587: LD_INT 23
10589: PUSH
10590: LD_INT 44
10592: PUSH
10593: LD_INT 48
10595: PUSH
10596: LD_INT 49
10598: PUSH
10599: LD_INT 50
10601: PUSH
10602: LD_INT 51
10604: PUSH
10605: LD_INT 52
10607: PUSH
10608: LD_INT 53
10610: PUSH
10611: LD_INT 54
10613: PUSH
10614: LD_INT 55
10616: PUSH
10617: LD_INT 56
10619: PUSH
10620: LD_INT 57
10622: PUSH
10623: LD_INT 58
10625: PUSH
10626: LD_INT 59
10628: PUSH
10629: LD_INT 63
10631: PUSH
10632: LD_INT 64
10634: PUSH
10635: LD_INT 65
10637: PUSH
10638: LD_INT 82
10640: PUSH
10641: LD_INT 83
10643: PUSH
10644: LD_INT 84
10646: PUSH
10647: LD_INT 85
10649: PUSH
10650: LD_INT 86
10652: PUSH
10653: EMPTY
10654: LIST
10655: LIST
10656: LIST
10657: LIST
10658: LIST
10659: LIST
10660: LIST
10661: LIST
10662: LIST
10663: LIST
10664: LIST
10665: LIST
10666: LIST
10667: LIST
10668: LIST
10669: LIST
10670: LIST
10671: LIST
10672: LIST
10673: LIST
10674: LIST
10675: LIST
10676: LIST
10677: LIST
10678: LIST
10679: LIST
10680: LIST
10681: LIST
10682: LIST
10683: LIST
10684: LIST
10685: LIST
10686: LIST
10687: LIST
10688: LIST
10689: LIST
10690: LIST
10691: LIST
10692: LIST
10693: LIST
10694: LIST
10695: LIST
10696: LIST
10697: LIST
10698: LIST
10699: LIST
10700: LIST
10701: LIST
10702: LIST
10703: LIST
10704: LIST
10705: LIST
10706: LIST
10707: ST_TO_ADDR
10708: GO 10711
10710: POP
// if state > - 1 and state < 3 then
10711: LD_VAR 0 3
10715: PUSH
10716: LD_INT 1
10718: NEG
10719: GREATER
10720: IFFALSE 10732
10722: PUSH
10723: LD_VAR 0 3
10727: PUSH
10728: LD_INT 3
10730: LESS
10731: AND
10732: IFFALSE 10789
// for i in result do
10734: LD_ADDR_VAR 0 5
10738: PUSH
10739: LD_VAR 0 4
10743: PUSH
10744: FOR_IN
10745: IFFALSE 10787
// if GetTech ( i , side ) <> state then
10747: LD_VAR 0 5
10751: PPUSH
10752: LD_VAR 0 1
10756: PPUSH
10757: CALL_OW 321
10761: PUSH
10762: LD_VAR 0 3
10766: NONEQUAL
10767: IFFALSE 10785
// result := result diff i ;
10769: LD_ADDR_VAR 0 4
10773: PUSH
10774: LD_VAR 0 4
10778: PUSH
10779: LD_VAR 0 5
10783: DIFF
10784: ST_TO_ADDR
10785: GO 10744
10787: POP
10788: POP
// end ;
10789: LD_VAR 0 4
10793: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
10794: LD_INT 0
10796: PPUSH
10797: PPUSH
10798: PPUSH
// result := true ;
10799: LD_ADDR_VAR 0 3
10803: PUSH
10804: LD_INT 1
10806: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
10807: LD_ADDR_VAR 0 5
10811: PUSH
10812: LD_VAR 0 2
10816: PPUSH
10817: CALL_OW 480
10821: ST_TO_ADDR
// if not tmp then
10822: LD_VAR 0 5
10826: NOT
10827: IFFALSE 10831
// exit ;
10829: GO 10880
// for i in tmp do
10831: LD_ADDR_VAR 0 4
10835: PUSH
10836: LD_VAR 0 5
10840: PUSH
10841: FOR_IN
10842: IFFALSE 10878
// if GetTech ( i , side ) <> state_researched then
10844: LD_VAR 0 4
10848: PPUSH
10849: LD_VAR 0 1
10853: PPUSH
10854: CALL_OW 321
10858: PUSH
10859: LD_INT 2
10861: NONEQUAL
10862: IFFALSE 10876
// begin result := false ;
10864: LD_ADDR_VAR 0 3
10868: PUSH
10869: LD_INT 0
10871: ST_TO_ADDR
// exit ;
10872: POP
10873: POP
10874: GO 10880
// end ;
10876: GO 10841
10878: POP
10879: POP
// end ;
10880: LD_VAR 0 3
10884: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
10885: LD_INT 0
10887: PPUSH
10888: PPUSH
10889: PPUSH
10890: PPUSH
10891: PPUSH
10892: PPUSH
10893: PPUSH
10894: PPUSH
10895: PPUSH
10896: PPUSH
10897: PPUSH
10898: PPUSH
10899: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
10900: LD_VAR 0 1
10904: NOT
10905: IFTRUE 10922
10907: PUSH
10908: LD_VAR 0 1
10912: PPUSH
10913: CALL_OW 257
10917: PUSH
10918: LD_INT 9
10920: NONEQUAL
10921: OR
10922: IFFALSE 10926
// exit ;
10924: GO 11505
// side := GetSide ( unit ) ;
10926: LD_ADDR_VAR 0 9
10930: PUSH
10931: LD_VAR 0 1
10935: PPUSH
10936: CALL_OW 255
10940: ST_TO_ADDR
// tech_space := tech_spacanom ;
10941: LD_ADDR_VAR 0 12
10945: PUSH
10946: LD_INT 29
10948: ST_TO_ADDR
// tech_time := tech_taurad ;
10949: LD_ADDR_VAR 0 13
10953: PUSH
10954: LD_INT 28
10956: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
10957: LD_ADDR_VAR 0 11
10961: PUSH
10962: LD_VAR 0 1
10966: PPUSH
10967: CALL_OW 310
10971: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
10972: LD_VAR 0 11
10976: PPUSH
10977: CALL_OW 247
10981: PUSH
10982: LD_INT 2
10984: EQUAL
10985: IFFALSE 10989
// exit ;
10987: GO 11505
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
10989: LD_ADDR_VAR 0 8
10993: PUSH
10994: LD_INT 81
10996: PUSH
10997: LD_VAR 0 9
11001: PUSH
11002: EMPTY
11003: LIST
11004: LIST
11005: PUSH
11006: LD_INT 3
11008: PUSH
11009: LD_INT 21
11011: PUSH
11012: LD_INT 3
11014: PUSH
11015: EMPTY
11016: LIST
11017: LIST
11018: PUSH
11019: EMPTY
11020: LIST
11021: LIST
11022: PUSH
11023: EMPTY
11024: LIST
11025: LIST
11026: PPUSH
11027: CALL_OW 69
11031: ST_TO_ADDR
// if not tmp then
11032: LD_VAR 0 8
11036: NOT
11037: IFFALSE 11041
// exit ;
11039: GO 11505
// if in_unit then
11041: LD_VAR 0 11
11045: IFFALSE 11069
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
11047: LD_ADDR_VAR 0 10
11051: PUSH
11052: LD_VAR 0 8
11056: PPUSH
11057: LD_VAR 0 11
11061: PPUSH
11062: CALL_OW 74
11066: ST_TO_ADDR
11067: GO 11089
// enemy := NearestUnitToUnit ( tmp , unit ) ;
11069: LD_ADDR_VAR 0 10
11073: PUSH
11074: LD_VAR 0 8
11078: PPUSH
11079: LD_VAR 0 1
11083: PPUSH
11084: CALL_OW 74
11088: ST_TO_ADDR
// if not enemy then
11089: LD_VAR 0 10
11093: NOT
11094: IFFALSE 11098
// exit ;
11096: GO 11505
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
11098: LD_VAR 0 11
11102: IFFALSE 11124
11104: PUSH
11105: LD_VAR 0 11
11109: PPUSH
11110: LD_VAR 0 10
11114: PPUSH
11115: CALL_OW 296
11119: PUSH
11120: LD_INT 13
11122: GREATER
11123: AND
11124: IFTRUE 11146
11126: PUSH
11127: LD_VAR 0 1
11131: PPUSH
11132: LD_VAR 0 10
11136: PPUSH
11137: CALL_OW 296
11141: PUSH
11142: LD_INT 12
11144: GREATER
11145: OR
11146: IFFALSE 11150
// exit ;
11148: GO 11505
// missile := [ 1 ] ;
11150: LD_ADDR_VAR 0 14
11154: PUSH
11155: LD_INT 1
11157: PUSH
11158: EMPTY
11159: LIST
11160: ST_TO_ADDR
// if Researched ( side , tech_space ) then
11161: LD_VAR 0 9
11165: PPUSH
11166: LD_VAR 0 12
11170: PPUSH
11171: CALL_OW 325
11175: IFFALSE 11204
// missile := Replace ( missile , missile + 1 , 2 ) ;
11177: LD_ADDR_VAR 0 14
11181: PUSH
11182: LD_VAR 0 14
11186: PPUSH
11187: LD_VAR 0 14
11191: PUSH
11192: LD_INT 1
11194: PLUS
11195: PPUSH
11196: LD_INT 2
11198: PPUSH
11199: CALL_OW 1
11203: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
11204: LD_VAR 0 9
11208: PPUSH
11209: LD_VAR 0 13
11213: PPUSH
11214: CALL_OW 325
11218: IFFALSE 11242
11220: PUSH
11221: LD_VAR 0 10
11225: PPUSH
11226: CALL_OW 255
11230: PPUSH
11231: LD_VAR 0 13
11235: PPUSH
11236: CALL_OW 325
11240: NOT
11241: AND
11242: IFFALSE 11271
// missile := Replace ( missile , missile + 1 , 3 ) ;
11244: LD_ADDR_VAR 0 14
11248: PUSH
11249: LD_VAR 0 14
11253: PPUSH
11254: LD_VAR 0 14
11258: PUSH
11259: LD_INT 1
11261: PLUS
11262: PPUSH
11263: LD_INT 3
11265: PPUSH
11266: CALL_OW 1
11270: ST_TO_ADDR
// if missile < 2 then
11271: LD_VAR 0 14
11275: PUSH
11276: LD_INT 2
11278: LESS
11279: IFFALSE 11283
// exit ;
11281: GO 11505
// x := GetX ( enemy ) ;
11283: LD_ADDR_VAR 0 4
11287: PUSH
11288: LD_VAR 0 10
11292: PPUSH
11293: CALL_OW 250
11297: ST_TO_ADDR
// y := GetY ( enemy ) ;
11298: LD_ADDR_VAR 0 5
11302: PUSH
11303: LD_VAR 0 10
11307: PPUSH
11308: CALL_OW 251
11312: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
11313: LD_ADDR_VAR 0 6
11317: PUSH
11318: LD_VAR 0 4
11322: PUSH
11323: LD_INT 1
11325: NEG
11326: PPUSH
11327: LD_INT 1
11329: PPUSH
11330: CALL_OW 12
11334: PLUS
11335: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
11336: LD_ADDR_VAR 0 7
11340: PUSH
11341: LD_VAR 0 5
11345: PUSH
11346: LD_INT 1
11348: NEG
11349: PPUSH
11350: LD_INT 1
11352: PPUSH
11353: CALL_OW 12
11357: PLUS
11358: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
11359: LD_VAR 0 6
11363: PPUSH
11364: LD_VAR 0 7
11368: PPUSH
11369: CALL_OW 488
11373: NOT
11374: IFFALSE 11396
// begin _x := x ;
11376: LD_ADDR_VAR 0 6
11380: PUSH
11381: LD_VAR 0 4
11385: ST_TO_ADDR
// _y := y ;
11386: LD_ADDR_VAR 0 7
11390: PUSH
11391: LD_VAR 0 5
11395: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
11396: LD_ADDR_VAR 0 3
11400: PUSH
11401: LD_INT 1
11403: PPUSH
11404: LD_VAR 0 14
11408: PPUSH
11409: CALL_OW 12
11413: ST_TO_ADDR
// case i of 1 :
11414: LD_VAR 0 3
11418: PUSH
11419: LD_INT 1
11421: DOUBLE
11422: EQUAL
11423: IFTRUE 11427
11425: GO 11444
11427: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
11428: LD_VAR 0 1
11432: PPUSH
11433: LD_VAR 0 10
11437: PPUSH
11438: CALL_OW 115
11442: GO 11505
11444: LD_INT 2
11446: DOUBLE
11447: EQUAL
11448: IFTRUE 11452
11450: GO 11474
11452: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
11453: LD_VAR 0 1
11457: PPUSH
11458: LD_VAR 0 6
11462: PPUSH
11463: LD_VAR 0 7
11467: PPUSH
11468: CALL_OW 153
11472: GO 11505
11474: LD_INT 3
11476: DOUBLE
11477: EQUAL
11478: IFTRUE 11482
11480: GO 11504
11482: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
11483: LD_VAR 0 1
11487: PPUSH
11488: LD_VAR 0 6
11492: PPUSH
11493: LD_VAR 0 7
11497: PPUSH
11498: CALL_OW 154
11502: GO 11505
11504: POP
// end ;
11505: LD_VAR 0 2
11509: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
11510: LD_INT 0
11512: PPUSH
11513: PPUSH
11514: PPUSH
11515: PPUSH
11516: PPUSH
11517: PPUSH
// if not unit or not building then
11518: LD_VAR 0 1
11522: NOT
11523: IFTRUE 11532
11525: PUSH
11526: LD_VAR 0 2
11530: NOT
11531: OR
11532: IFFALSE 11536
// exit ;
11534: GO 11694
// x := GetX ( building ) ;
11536: LD_ADDR_VAR 0 5
11540: PUSH
11541: LD_VAR 0 2
11545: PPUSH
11546: CALL_OW 250
11550: ST_TO_ADDR
// y := GetY ( building ) ;
11551: LD_ADDR_VAR 0 6
11555: PUSH
11556: LD_VAR 0 2
11560: PPUSH
11561: CALL_OW 251
11565: ST_TO_ADDR
// for i := 0 to 5 do
11566: LD_ADDR_VAR 0 4
11570: PUSH
11571: DOUBLE
11572: LD_INT 0
11574: DEC
11575: ST_TO_ADDR
11576: LD_INT 5
11578: PUSH
11579: FOR_TO
11580: IFFALSE 11692
// begin _x := ShiftX ( x , i , 3 ) ;
11582: LD_ADDR_VAR 0 7
11586: PUSH
11587: LD_VAR 0 5
11591: PPUSH
11592: LD_VAR 0 4
11596: PPUSH
11597: LD_INT 3
11599: PPUSH
11600: CALL_OW 272
11604: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
11605: LD_ADDR_VAR 0 8
11609: PUSH
11610: LD_VAR 0 6
11614: PPUSH
11615: LD_VAR 0 4
11619: PPUSH
11620: LD_INT 3
11622: PPUSH
11623: CALL_OW 273
11627: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
11628: LD_VAR 0 7
11632: PPUSH
11633: LD_VAR 0 8
11637: PPUSH
11638: CALL_OW 488
11642: NOT
11643: IFFALSE 11647
// continue ;
11645: GO 11579
// if HexInfo ( _x , _y ) = 0 then
11647: LD_VAR 0 7
11651: PPUSH
11652: LD_VAR 0 8
11656: PPUSH
11657: CALL_OW 428
11661: PUSH
11662: LD_INT 0
11664: EQUAL
11665: IFFALSE 11690
// begin ComMoveXY ( unit , _x , _y ) ;
11667: LD_VAR 0 1
11671: PPUSH
11672: LD_VAR 0 7
11676: PPUSH
11677: LD_VAR 0 8
11681: PPUSH
11682: CALL_OW 111
// exit ;
11686: POP
11687: POP
11688: GO 11694
// end ; end ;
11690: GO 11579
11692: POP
11693: POP
// end ;
11694: LD_VAR 0 3
11698: RET
// export function ScanBase ( side , base_area ) ; begin
11699: LD_INT 0
11701: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
11702: LD_ADDR_VAR 0 3
11706: PUSH
11707: LD_VAR 0 2
11711: PPUSH
11712: LD_INT 81
11714: PUSH
11715: LD_VAR 0 1
11719: PUSH
11720: EMPTY
11721: LIST
11722: LIST
11723: PPUSH
11724: CALL_OW 70
11728: ST_TO_ADDR
// end ;
11729: LD_VAR 0 3
11733: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
11734: LD_INT 0
11736: PPUSH
11737: PPUSH
11738: PPUSH
11739: PPUSH
// result := false ;
11740: LD_ADDR_VAR 0 2
11744: PUSH
11745: LD_INT 0
11747: ST_TO_ADDR
// side := GetSide ( unit ) ;
11748: LD_ADDR_VAR 0 3
11752: PUSH
11753: LD_VAR 0 1
11757: PPUSH
11758: CALL_OW 255
11762: ST_TO_ADDR
// nat := GetNation ( unit ) ;
11763: LD_ADDR_VAR 0 4
11767: PUSH
11768: LD_VAR 0 1
11772: PPUSH
11773: CALL_OW 248
11777: ST_TO_ADDR
// case nat of 1 :
11778: LD_VAR 0 4
11782: PUSH
11783: LD_INT 1
11785: DOUBLE
11786: EQUAL
11787: IFTRUE 11791
11789: GO 11802
11791: POP
// tech := tech_lassight ; 2 :
11792: LD_ADDR_VAR 0 5
11796: PUSH
11797: LD_INT 12
11799: ST_TO_ADDR
11800: GO 11841
11802: LD_INT 2
11804: DOUBLE
11805: EQUAL
11806: IFTRUE 11810
11808: GO 11821
11810: POP
// tech := tech_mortar ; 3 :
11811: LD_ADDR_VAR 0 5
11815: PUSH
11816: LD_INT 41
11818: ST_TO_ADDR
11819: GO 11841
11821: LD_INT 3
11823: DOUBLE
11824: EQUAL
11825: IFTRUE 11829
11827: GO 11840
11829: POP
// tech := tech_bazooka ; end ;
11830: LD_ADDR_VAR 0 5
11834: PUSH
11835: LD_INT 44
11837: ST_TO_ADDR
11838: GO 11841
11840: POP
// if Researched ( side , tech ) then
11841: LD_VAR 0 3
11845: PPUSH
11846: LD_VAR 0 5
11850: PPUSH
11851: CALL_OW 325
11855: IFFALSE 11882
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
11857: LD_ADDR_VAR 0 2
11861: PUSH
11862: LD_INT 5
11864: PUSH
11865: LD_INT 8
11867: PUSH
11868: LD_INT 9
11870: PUSH
11871: EMPTY
11872: LIST
11873: LIST
11874: LIST
11875: PUSH
11876: LD_VAR 0 4
11880: ARRAY
11881: ST_TO_ADDR
// end ;
11882: LD_VAR 0 2
11886: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
11887: LD_INT 0
11889: PPUSH
11890: PPUSH
11891: PPUSH
// if not mines then
11892: LD_VAR 0 2
11896: NOT
11897: IFFALSE 11901
// exit ;
11899: GO 12045
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
11901: LD_ADDR_VAR 0 5
11905: PUSH
11906: LD_INT 81
11908: PUSH
11909: LD_VAR 0 1
11913: PUSH
11914: EMPTY
11915: LIST
11916: LIST
11917: PUSH
11918: LD_INT 3
11920: PUSH
11921: LD_INT 21
11923: PUSH
11924: LD_INT 3
11926: PUSH
11927: EMPTY
11928: LIST
11929: LIST
11930: PUSH
11931: EMPTY
11932: LIST
11933: LIST
11934: PUSH
11935: EMPTY
11936: LIST
11937: LIST
11938: PPUSH
11939: CALL_OW 69
11943: ST_TO_ADDR
// for i in mines do
11944: LD_ADDR_VAR 0 4
11948: PUSH
11949: LD_VAR 0 2
11953: PUSH
11954: FOR_IN
11955: IFFALSE 12043
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
11957: LD_VAR 0 4
11961: PUSH
11962: LD_INT 1
11964: ARRAY
11965: PPUSH
11966: LD_VAR 0 4
11970: PUSH
11971: LD_INT 2
11973: ARRAY
11974: PPUSH
11975: CALL_OW 458
11979: NOT
11980: IFFALSE 11984
// continue ;
11982: GO 11954
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
11984: LD_VAR 0 4
11988: PUSH
11989: LD_INT 1
11991: ARRAY
11992: PPUSH
11993: LD_VAR 0 4
11997: PUSH
11998: LD_INT 2
12000: ARRAY
12001: PPUSH
12002: CALL_OW 428
12006: PUSH
12007: LD_VAR 0 5
12011: IN
12012: IFFALSE 12041
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
12014: LD_VAR 0 4
12018: PUSH
12019: LD_INT 1
12021: ARRAY
12022: PPUSH
12023: LD_VAR 0 4
12027: PUSH
12028: LD_INT 2
12030: ARRAY
12031: PPUSH
12032: LD_VAR 0 1
12036: PPUSH
12037: CALL_OW 456
// end ;
12041: GO 11954
12043: POP
12044: POP
// end ;
12045: LD_VAR 0 3
12049: RET
// export function Count ( array ) ; begin
12050: LD_INT 0
12052: PPUSH
// result := array + 0 ;
12053: LD_ADDR_VAR 0 2
12057: PUSH
12058: LD_VAR 0 1
12062: PUSH
12063: LD_INT 0
12065: PLUS
12066: ST_TO_ADDR
// end ;
12067: LD_VAR 0 2
12071: RET
// export function IsEmpty ( building ) ; begin
12072: LD_INT 0
12074: PPUSH
// if not building then
12075: LD_VAR 0 1
12079: NOT
12080: IFFALSE 12084
// exit ;
12082: GO 12127
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
12084: LD_ADDR_VAR 0 2
12088: PUSH
12089: LD_VAR 0 1
12093: PUSH
12094: LD_INT 22
12096: PUSH
12097: LD_VAR 0 1
12101: PPUSH
12102: CALL_OW 255
12106: PUSH
12107: EMPTY
12108: LIST
12109: LIST
12110: PUSH
12111: LD_INT 58
12113: PUSH
12114: EMPTY
12115: LIST
12116: PUSH
12117: EMPTY
12118: LIST
12119: LIST
12120: PPUSH
12121: CALL_OW 69
12125: IN
12126: ST_TO_ADDR
// end ;
12127: LD_VAR 0 2
12131: RET
// export function IsNotFull ( building ) ; var places ; begin
12132: LD_INT 0
12134: PPUSH
12135: PPUSH
// if not building then
12136: LD_VAR 0 1
12140: NOT
12141: IFFALSE 12145
// exit ;
12143: GO 12173
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
12145: LD_ADDR_VAR 0 2
12149: PUSH
12150: LD_VAR 0 1
12154: PPUSH
12155: LD_INT 3
12157: PUSH
12158: LD_INT 62
12160: PUSH
12161: EMPTY
12162: LIST
12163: PUSH
12164: EMPTY
12165: LIST
12166: LIST
12167: PPUSH
12168: CALL_OW 72
12172: ST_TO_ADDR
// end ;
12173: LD_VAR 0 2
12177: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
12178: LD_INT 0
12180: PPUSH
12181: PPUSH
12182: PPUSH
12183: PPUSH
// tmp := [ ] ;
12184: LD_ADDR_VAR 0 3
12188: PUSH
12189: EMPTY
12190: ST_TO_ADDR
// list := [ ] ;
12191: LD_ADDR_VAR 0 5
12195: PUSH
12196: EMPTY
12197: ST_TO_ADDR
// for i = 16 to 25 do
12198: LD_ADDR_VAR 0 4
12202: PUSH
12203: DOUBLE
12204: LD_INT 16
12206: DEC
12207: ST_TO_ADDR
12208: LD_INT 25
12210: PUSH
12211: FOR_TO
12212: IFFALSE 12285
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
12214: LD_ADDR_VAR 0 3
12218: PUSH
12219: LD_VAR 0 3
12223: PUSH
12224: LD_INT 22
12226: PUSH
12227: LD_VAR 0 1
12231: PPUSH
12232: CALL_OW 255
12236: PUSH
12237: EMPTY
12238: LIST
12239: LIST
12240: PUSH
12241: LD_INT 91
12243: PUSH
12244: LD_VAR 0 1
12248: PUSH
12249: LD_INT 6
12251: PUSH
12252: EMPTY
12253: LIST
12254: LIST
12255: LIST
12256: PUSH
12257: LD_INT 30
12259: PUSH
12260: LD_VAR 0 4
12264: PUSH
12265: EMPTY
12266: LIST
12267: LIST
12268: PUSH
12269: EMPTY
12270: LIST
12271: LIST
12272: LIST
12273: PUSH
12274: EMPTY
12275: LIST
12276: PPUSH
12277: CALL_OW 69
12281: ADD
12282: ST_TO_ADDR
12283: GO 12211
12285: POP
12286: POP
// for i = 1 to tmp do
12287: LD_ADDR_VAR 0 4
12291: PUSH
12292: DOUBLE
12293: LD_INT 1
12295: DEC
12296: ST_TO_ADDR
12297: LD_VAR 0 3
12301: PUSH
12302: FOR_TO
12303: IFFALSE 12391
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
12305: LD_ADDR_VAR 0 5
12309: PUSH
12310: LD_VAR 0 5
12314: PUSH
12315: LD_VAR 0 3
12319: PUSH
12320: LD_VAR 0 4
12324: ARRAY
12325: PPUSH
12326: CALL_OW 266
12330: PUSH
12331: LD_VAR 0 3
12335: PUSH
12336: LD_VAR 0 4
12340: ARRAY
12341: PPUSH
12342: CALL_OW 250
12346: PUSH
12347: LD_VAR 0 3
12351: PUSH
12352: LD_VAR 0 4
12356: ARRAY
12357: PPUSH
12358: CALL_OW 251
12362: PUSH
12363: LD_VAR 0 3
12367: PUSH
12368: LD_VAR 0 4
12372: ARRAY
12373: PPUSH
12374: CALL_OW 254
12378: PUSH
12379: EMPTY
12380: LIST
12381: LIST
12382: LIST
12383: LIST
12384: PUSH
12385: EMPTY
12386: LIST
12387: ADD
12388: ST_TO_ADDR
12389: GO 12302
12391: POP
12392: POP
// result := list ;
12393: LD_ADDR_VAR 0 2
12397: PUSH
12398: LD_VAR 0 5
12402: ST_TO_ADDR
// end ;
12403: LD_VAR 0 2
12407: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
12408: LD_INT 0
12410: PPUSH
12411: PPUSH
12412: PPUSH
12413: PPUSH
12414: PPUSH
12415: PPUSH
12416: PPUSH
// if not factory then
12417: LD_VAR 0 1
12421: NOT
12422: IFFALSE 12426
// exit ;
12424: GO 13029
// if control = control_apeman then
12426: LD_VAR 0 4
12430: PUSH
12431: LD_INT 5
12433: EQUAL
12434: IFFALSE 12543
// begin tmp := UnitsInside ( factory ) ;
12436: LD_ADDR_VAR 0 8
12440: PUSH
12441: LD_VAR 0 1
12445: PPUSH
12446: CALL_OW 313
12450: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
12451: LD_VAR 0 8
12455: PPUSH
12456: LD_INT 25
12458: PUSH
12459: LD_INT 12
12461: PUSH
12462: EMPTY
12463: LIST
12464: LIST
12465: PPUSH
12466: CALL_OW 72
12470: NOT
12471: IFFALSE 12481
// control := control_manual ;
12473: LD_ADDR_VAR 0 4
12477: PUSH
12478: LD_INT 1
12480: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
12481: LD_ADDR_VAR 0 8
12485: PUSH
12486: LD_VAR 0 1
12490: PPUSH
12491: CALL 12178 0 1
12495: ST_TO_ADDR
// if tmp then
12496: LD_VAR 0 8
12500: IFFALSE 12543
// begin for i in tmp do
12502: LD_ADDR_VAR 0 7
12506: PUSH
12507: LD_VAR 0 8
12511: PUSH
12512: FOR_IN
12513: IFFALSE 12541
// if i [ 1 ] = b_ext_radio then
12515: LD_VAR 0 7
12519: PUSH
12520: LD_INT 1
12522: ARRAY
12523: PUSH
12524: LD_INT 22
12526: EQUAL
12527: IFFALSE 12539
// begin control := control_remote ;
12529: LD_ADDR_VAR 0 4
12533: PUSH
12534: LD_INT 2
12536: ST_TO_ADDR
// break ;
12537: GO 12541
// end ;
12539: GO 12512
12541: POP
12542: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
12543: LD_VAR 0 1
12547: PPUSH
12548: LD_VAR 0 2
12552: PPUSH
12553: LD_VAR 0 3
12557: PPUSH
12558: LD_VAR 0 4
12562: PPUSH
12563: LD_VAR 0 5
12567: PPUSH
12568: CALL_OW 448
12572: IFFALSE 12607
// begin result := [ chassis , engine , control , weapon ] ;
12574: LD_ADDR_VAR 0 6
12578: PUSH
12579: LD_VAR 0 2
12583: PUSH
12584: LD_VAR 0 3
12588: PUSH
12589: LD_VAR 0 4
12593: PUSH
12594: LD_VAR 0 5
12598: PUSH
12599: EMPTY
12600: LIST
12601: LIST
12602: LIST
12603: LIST
12604: ST_TO_ADDR
// exit ;
12605: GO 13029
// end ; _chassis := AvailableChassisList ( factory ) ;
12607: LD_ADDR_VAR 0 9
12611: PUSH
12612: LD_VAR 0 1
12616: PPUSH
12617: CALL_OW 475
12621: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
12622: LD_ADDR_VAR 0 11
12626: PUSH
12627: LD_VAR 0 1
12631: PPUSH
12632: CALL_OW 476
12636: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
12637: LD_ADDR_VAR 0 12
12641: PUSH
12642: LD_VAR 0 1
12646: PPUSH
12647: CALL_OW 477
12651: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
12652: LD_ADDR_VAR 0 10
12656: PUSH
12657: LD_VAR 0 1
12661: PPUSH
12662: CALL_OW 478
12666: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
12667: LD_VAR 0 9
12671: NOT
12672: IFTRUE 12681
12674: PUSH
12675: LD_VAR 0 11
12679: NOT
12680: OR
12681: IFTRUE 12690
12683: PUSH
12684: LD_VAR 0 12
12688: NOT
12689: OR
12690: IFTRUE 12699
12692: PUSH
12693: LD_VAR 0 10
12697: NOT
12698: OR
12699: IFFALSE 12734
// begin result := [ chassis , engine , control , weapon ] ;
12701: LD_ADDR_VAR 0 6
12705: PUSH
12706: LD_VAR 0 2
12710: PUSH
12711: LD_VAR 0 3
12715: PUSH
12716: LD_VAR 0 4
12720: PUSH
12721: LD_VAR 0 5
12725: PUSH
12726: EMPTY
12727: LIST
12728: LIST
12729: LIST
12730: LIST
12731: ST_TO_ADDR
// exit ;
12732: GO 13029
// end ; if not chassis in _chassis then
12734: LD_VAR 0 2
12738: PUSH
12739: LD_VAR 0 9
12743: IN
12744: NOT
12745: IFFALSE 12771
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
12747: LD_ADDR_VAR 0 2
12751: PUSH
12752: LD_VAR 0 9
12756: PUSH
12757: LD_INT 1
12759: PPUSH
12760: LD_VAR 0 9
12764: PPUSH
12765: CALL_OW 12
12769: ARRAY
12770: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
12771: LD_VAR 0 2
12775: PPUSH
12776: LD_VAR 0 3
12780: PPUSH
12781: CALL 13034 0 2
12785: NOT
12786: IFFALSE 12847
// repeat engine := _engine [ 1 ] ;
12788: LD_ADDR_VAR 0 3
12792: PUSH
12793: LD_VAR 0 11
12797: PUSH
12798: LD_INT 1
12800: ARRAY
12801: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
12802: LD_ADDR_VAR 0 11
12806: PUSH
12807: LD_VAR 0 11
12811: PPUSH
12812: LD_INT 1
12814: PPUSH
12815: CALL_OW 3
12819: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
12820: LD_VAR 0 2
12824: PPUSH
12825: LD_VAR 0 3
12829: PPUSH
12830: CALL 13034 0 2
12834: IFTRUE 12845
12836: PUSH
12837: LD_VAR 0 11
12841: PUSH
12842: EMPTY
12843: EQUAL
12844: OR
12845: IFFALSE 12788
// if not control in _control then
12847: LD_VAR 0 4
12851: PUSH
12852: LD_VAR 0 12
12856: IN
12857: NOT
12858: IFFALSE 12884
// control := _control [ rand ( 1 , _control ) ] ;
12860: LD_ADDR_VAR 0 4
12864: PUSH
12865: LD_VAR 0 12
12869: PUSH
12870: LD_INT 1
12872: PPUSH
12873: LD_VAR 0 12
12877: PPUSH
12878: CALL_OW 12
12882: ARRAY
12883: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
12884: LD_VAR 0 2
12888: PPUSH
12889: LD_VAR 0 5
12893: PPUSH
12894: CALL 13256 0 2
12898: NOT
12899: IFFALSE 12960
// repeat weapon := _weapon [ 1 ] ;
12901: LD_ADDR_VAR 0 5
12905: PUSH
12906: LD_VAR 0 10
12910: PUSH
12911: LD_INT 1
12913: ARRAY
12914: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
12915: LD_ADDR_VAR 0 10
12919: PUSH
12920: LD_VAR 0 10
12924: PPUSH
12925: LD_INT 1
12927: PPUSH
12928: CALL_OW 3
12932: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
12933: LD_VAR 0 2
12937: PPUSH
12938: LD_VAR 0 5
12942: PPUSH
12943: CALL 13256 0 2
12947: IFTRUE 12958
12949: PUSH
12950: LD_VAR 0 10
12954: PUSH
12955: EMPTY
12956: EQUAL
12957: OR
12958: IFFALSE 12901
// result := [ ] ;
12960: LD_ADDR_VAR 0 6
12964: PUSH
12965: EMPTY
12966: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
12967: LD_VAR 0 1
12971: PPUSH
12972: LD_VAR 0 2
12976: PPUSH
12977: LD_VAR 0 3
12981: PPUSH
12982: LD_VAR 0 4
12986: PPUSH
12987: LD_VAR 0 5
12991: PPUSH
12992: CALL_OW 448
12996: IFFALSE 13029
// result := [ chassis , engine , control , weapon ] ;
12998: LD_ADDR_VAR 0 6
13002: PUSH
13003: LD_VAR 0 2
13007: PUSH
13008: LD_VAR 0 3
13012: PUSH
13013: LD_VAR 0 4
13017: PUSH
13018: LD_VAR 0 5
13022: PUSH
13023: EMPTY
13024: LIST
13025: LIST
13026: LIST
13027: LIST
13028: ST_TO_ADDR
// end ;
13029: LD_VAR 0 6
13033: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
13034: LD_INT 0
13036: PPUSH
// if not chassis or not engine then
13037: LD_VAR 0 1
13041: NOT
13042: IFTRUE 13051
13044: PUSH
13045: LD_VAR 0 2
13049: NOT
13050: OR
13051: IFFALSE 13055
// exit ;
13053: GO 13251
// case engine of engine_solar :
13055: LD_VAR 0 2
13059: PUSH
13060: LD_INT 2
13062: DOUBLE
13063: EQUAL
13064: IFTRUE 13068
13066: GO 13106
13068: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
13069: LD_ADDR_VAR 0 3
13073: PUSH
13074: LD_INT 11
13076: PUSH
13077: LD_INT 12
13079: PUSH
13080: LD_INT 13
13082: PUSH
13083: LD_INT 14
13085: PUSH
13086: LD_INT 1
13088: PUSH
13089: LD_INT 2
13091: PUSH
13092: LD_INT 3
13094: PUSH
13095: EMPTY
13096: LIST
13097: LIST
13098: LIST
13099: LIST
13100: LIST
13101: LIST
13102: LIST
13103: ST_TO_ADDR
13104: GO 13235
13106: LD_INT 1
13108: DOUBLE
13109: EQUAL
13110: IFTRUE 13114
13112: GO 13176
13114: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
13115: LD_ADDR_VAR 0 3
13119: PUSH
13120: LD_INT 11
13122: PUSH
13123: LD_INT 12
13125: PUSH
13126: LD_INT 13
13128: PUSH
13129: LD_INT 14
13131: PUSH
13132: LD_INT 1
13134: PUSH
13135: LD_INT 2
13137: PUSH
13138: LD_INT 3
13140: PUSH
13141: LD_INT 4
13143: PUSH
13144: LD_INT 5
13146: PUSH
13147: LD_INT 21
13149: PUSH
13150: LD_INT 23
13152: PUSH
13153: LD_INT 22
13155: PUSH
13156: LD_INT 24
13158: PUSH
13159: EMPTY
13160: LIST
13161: LIST
13162: LIST
13163: LIST
13164: LIST
13165: LIST
13166: LIST
13167: LIST
13168: LIST
13169: LIST
13170: LIST
13171: LIST
13172: LIST
13173: ST_TO_ADDR
13174: GO 13235
13176: LD_INT 3
13178: DOUBLE
13179: EQUAL
13180: IFTRUE 13184
13182: GO 13234
13184: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
13185: LD_ADDR_VAR 0 3
13189: PUSH
13190: LD_INT 13
13192: PUSH
13193: LD_INT 14
13195: PUSH
13196: LD_INT 2
13198: PUSH
13199: LD_INT 3
13201: PUSH
13202: LD_INT 4
13204: PUSH
13205: LD_INT 5
13207: PUSH
13208: LD_INT 21
13210: PUSH
13211: LD_INT 22
13213: PUSH
13214: LD_INT 23
13216: PUSH
13217: LD_INT 24
13219: PUSH
13220: EMPTY
13221: LIST
13222: LIST
13223: LIST
13224: LIST
13225: LIST
13226: LIST
13227: LIST
13228: LIST
13229: LIST
13230: LIST
13231: ST_TO_ADDR
13232: GO 13235
13234: POP
// result := ( chassis in result ) ;
13235: LD_ADDR_VAR 0 3
13239: PUSH
13240: LD_VAR 0 1
13244: PUSH
13245: LD_VAR 0 3
13249: IN
13250: ST_TO_ADDR
// end ;
13251: LD_VAR 0 3
13255: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
13256: LD_INT 0
13258: PPUSH
// if not chassis or not weapon then
13259: LD_VAR 0 1
13263: NOT
13264: IFTRUE 13273
13266: PUSH
13267: LD_VAR 0 2
13271: NOT
13272: OR
13273: IFFALSE 13277
// exit ;
13275: GO 14337
// case weapon of us_machine_gun :
13277: LD_VAR 0 2
13281: PUSH
13282: LD_INT 2
13284: DOUBLE
13285: EQUAL
13286: IFTRUE 13290
13288: GO 13320
13290: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
13291: LD_ADDR_VAR 0 3
13295: PUSH
13296: LD_INT 1
13298: PUSH
13299: LD_INT 2
13301: PUSH
13302: LD_INT 3
13304: PUSH
13305: LD_INT 4
13307: PUSH
13308: LD_INT 5
13310: PUSH
13311: EMPTY
13312: LIST
13313: LIST
13314: LIST
13315: LIST
13316: LIST
13317: ST_TO_ADDR
13318: GO 14321
13320: LD_INT 3
13322: DOUBLE
13323: EQUAL
13324: IFTRUE 13328
13326: GO 13358
13328: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
13329: LD_ADDR_VAR 0 3
13333: PUSH
13334: LD_INT 1
13336: PUSH
13337: LD_INT 2
13339: PUSH
13340: LD_INT 3
13342: PUSH
13343: LD_INT 4
13345: PUSH
13346: LD_INT 5
13348: PUSH
13349: EMPTY
13350: LIST
13351: LIST
13352: LIST
13353: LIST
13354: LIST
13355: ST_TO_ADDR
13356: GO 14321
13358: LD_INT 11
13360: DOUBLE
13361: EQUAL
13362: IFTRUE 13366
13364: GO 13396
13366: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
13367: LD_ADDR_VAR 0 3
13371: PUSH
13372: LD_INT 1
13374: PUSH
13375: LD_INT 2
13377: PUSH
13378: LD_INT 3
13380: PUSH
13381: LD_INT 4
13383: PUSH
13384: LD_INT 5
13386: PUSH
13387: EMPTY
13388: LIST
13389: LIST
13390: LIST
13391: LIST
13392: LIST
13393: ST_TO_ADDR
13394: GO 14321
13396: LD_INT 4
13398: DOUBLE
13399: EQUAL
13400: IFTRUE 13404
13402: GO 13430
13404: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
13405: LD_ADDR_VAR 0 3
13409: PUSH
13410: LD_INT 2
13412: PUSH
13413: LD_INT 3
13415: PUSH
13416: LD_INT 4
13418: PUSH
13419: LD_INT 5
13421: PUSH
13422: EMPTY
13423: LIST
13424: LIST
13425: LIST
13426: LIST
13427: ST_TO_ADDR
13428: GO 14321
13430: LD_INT 5
13432: DOUBLE
13433: EQUAL
13434: IFTRUE 13438
13436: GO 13464
13438: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
13439: LD_ADDR_VAR 0 3
13443: PUSH
13444: LD_INT 2
13446: PUSH
13447: LD_INT 3
13449: PUSH
13450: LD_INT 4
13452: PUSH
13453: LD_INT 5
13455: PUSH
13456: EMPTY
13457: LIST
13458: LIST
13459: LIST
13460: LIST
13461: ST_TO_ADDR
13462: GO 14321
13464: LD_INT 9
13466: DOUBLE
13467: EQUAL
13468: IFTRUE 13472
13470: GO 13498
13472: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
13473: LD_ADDR_VAR 0 3
13477: PUSH
13478: LD_INT 2
13480: PUSH
13481: LD_INT 3
13483: PUSH
13484: LD_INT 4
13486: PUSH
13487: LD_INT 5
13489: PUSH
13490: EMPTY
13491: LIST
13492: LIST
13493: LIST
13494: LIST
13495: ST_TO_ADDR
13496: GO 14321
13498: LD_INT 7
13500: DOUBLE
13501: EQUAL
13502: IFTRUE 13506
13504: GO 13532
13506: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
13507: LD_ADDR_VAR 0 3
13511: PUSH
13512: LD_INT 2
13514: PUSH
13515: LD_INT 3
13517: PUSH
13518: LD_INT 4
13520: PUSH
13521: LD_INT 5
13523: PUSH
13524: EMPTY
13525: LIST
13526: LIST
13527: LIST
13528: LIST
13529: ST_TO_ADDR
13530: GO 14321
13532: LD_INT 12
13534: DOUBLE
13535: EQUAL
13536: IFTRUE 13540
13538: GO 13566
13540: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
13541: LD_ADDR_VAR 0 3
13545: PUSH
13546: LD_INT 2
13548: PUSH
13549: LD_INT 3
13551: PUSH
13552: LD_INT 4
13554: PUSH
13555: LD_INT 5
13557: PUSH
13558: EMPTY
13559: LIST
13560: LIST
13561: LIST
13562: LIST
13563: ST_TO_ADDR
13564: GO 14321
13566: LD_INT 13
13568: DOUBLE
13569: EQUAL
13570: IFTRUE 13574
13572: GO 13600
13574: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
13575: LD_ADDR_VAR 0 3
13579: PUSH
13580: LD_INT 2
13582: PUSH
13583: LD_INT 3
13585: PUSH
13586: LD_INT 4
13588: PUSH
13589: LD_INT 5
13591: PUSH
13592: EMPTY
13593: LIST
13594: LIST
13595: LIST
13596: LIST
13597: ST_TO_ADDR
13598: GO 14321
13600: LD_INT 14
13602: DOUBLE
13603: EQUAL
13604: IFTRUE 13608
13606: GO 13626
13608: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
13609: LD_ADDR_VAR 0 3
13613: PUSH
13614: LD_INT 4
13616: PUSH
13617: LD_INT 5
13619: PUSH
13620: EMPTY
13621: LIST
13622: LIST
13623: ST_TO_ADDR
13624: GO 14321
13626: LD_INT 6
13628: DOUBLE
13629: EQUAL
13630: IFTRUE 13634
13632: GO 13652
13634: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
13635: LD_ADDR_VAR 0 3
13639: PUSH
13640: LD_INT 4
13642: PUSH
13643: LD_INT 5
13645: PUSH
13646: EMPTY
13647: LIST
13648: LIST
13649: ST_TO_ADDR
13650: GO 14321
13652: LD_INT 10
13654: DOUBLE
13655: EQUAL
13656: IFTRUE 13660
13658: GO 13678
13660: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
13661: LD_ADDR_VAR 0 3
13665: PUSH
13666: LD_INT 4
13668: PUSH
13669: LD_INT 5
13671: PUSH
13672: EMPTY
13673: LIST
13674: LIST
13675: ST_TO_ADDR
13676: GO 14321
13678: LD_INT 22
13680: DOUBLE
13681: EQUAL
13682: IFTRUE 13686
13684: GO 13712
13686: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
13687: LD_ADDR_VAR 0 3
13691: PUSH
13692: LD_INT 11
13694: PUSH
13695: LD_INT 12
13697: PUSH
13698: LD_INT 13
13700: PUSH
13701: LD_INT 14
13703: PUSH
13704: EMPTY
13705: LIST
13706: LIST
13707: LIST
13708: LIST
13709: ST_TO_ADDR
13710: GO 14321
13712: LD_INT 23
13714: DOUBLE
13715: EQUAL
13716: IFTRUE 13720
13718: GO 13746
13720: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
13721: LD_ADDR_VAR 0 3
13725: PUSH
13726: LD_INT 11
13728: PUSH
13729: LD_INT 12
13731: PUSH
13732: LD_INT 13
13734: PUSH
13735: LD_INT 14
13737: PUSH
13738: EMPTY
13739: LIST
13740: LIST
13741: LIST
13742: LIST
13743: ST_TO_ADDR
13744: GO 14321
13746: LD_INT 24
13748: DOUBLE
13749: EQUAL
13750: IFTRUE 13754
13752: GO 13780
13754: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
13755: LD_ADDR_VAR 0 3
13759: PUSH
13760: LD_INT 11
13762: PUSH
13763: LD_INT 12
13765: PUSH
13766: LD_INT 13
13768: PUSH
13769: LD_INT 14
13771: PUSH
13772: EMPTY
13773: LIST
13774: LIST
13775: LIST
13776: LIST
13777: ST_TO_ADDR
13778: GO 14321
13780: LD_INT 30
13782: DOUBLE
13783: EQUAL
13784: IFTRUE 13788
13786: GO 13814
13788: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
13789: LD_ADDR_VAR 0 3
13793: PUSH
13794: LD_INT 11
13796: PUSH
13797: LD_INT 12
13799: PUSH
13800: LD_INT 13
13802: PUSH
13803: LD_INT 14
13805: PUSH
13806: EMPTY
13807: LIST
13808: LIST
13809: LIST
13810: LIST
13811: ST_TO_ADDR
13812: GO 14321
13814: LD_INT 25
13816: DOUBLE
13817: EQUAL
13818: IFTRUE 13822
13820: GO 13840
13822: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
13823: LD_ADDR_VAR 0 3
13827: PUSH
13828: LD_INT 13
13830: PUSH
13831: LD_INT 14
13833: PUSH
13834: EMPTY
13835: LIST
13836: LIST
13837: ST_TO_ADDR
13838: GO 14321
13840: LD_INT 27
13842: DOUBLE
13843: EQUAL
13844: IFTRUE 13848
13846: GO 13866
13848: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
13849: LD_ADDR_VAR 0 3
13853: PUSH
13854: LD_INT 13
13856: PUSH
13857: LD_INT 14
13859: PUSH
13860: EMPTY
13861: LIST
13862: LIST
13863: ST_TO_ADDR
13864: GO 14321
13866: LD_INT 92
13868: DOUBLE
13869: EQUAL
13870: IFTRUE 13874
13872: GO 13900
13874: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
13875: LD_ADDR_VAR 0 3
13879: PUSH
13880: LD_INT 11
13882: PUSH
13883: LD_INT 12
13885: PUSH
13886: LD_INT 13
13888: PUSH
13889: LD_INT 14
13891: PUSH
13892: EMPTY
13893: LIST
13894: LIST
13895: LIST
13896: LIST
13897: ST_TO_ADDR
13898: GO 14321
13900: LD_INT 28
13902: DOUBLE
13903: EQUAL
13904: IFTRUE 13908
13906: GO 13926
13908: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
13909: LD_ADDR_VAR 0 3
13913: PUSH
13914: LD_INT 13
13916: PUSH
13917: LD_INT 14
13919: PUSH
13920: EMPTY
13921: LIST
13922: LIST
13923: ST_TO_ADDR
13924: GO 14321
13926: LD_INT 29
13928: DOUBLE
13929: EQUAL
13930: IFTRUE 13934
13932: GO 13952
13934: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
13935: LD_ADDR_VAR 0 3
13939: PUSH
13940: LD_INT 13
13942: PUSH
13943: LD_INT 14
13945: PUSH
13946: EMPTY
13947: LIST
13948: LIST
13949: ST_TO_ADDR
13950: GO 14321
13952: LD_INT 31
13954: DOUBLE
13955: EQUAL
13956: IFTRUE 13960
13958: GO 13978
13960: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
13961: LD_ADDR_VAR 0 3
13965: PUSH
13966: LD_INT 13
13968: PUSH
13969: LD_INT 14
13971: PUSH
13972: EMPTY
13973: LIST
13974: LIST
13975: ST_TO_ADDR
13976: GO 14321
13978: LD_INT 26
13980: DOUBLE
13981: EQUAL
13982: IFTRUE 13986
13984: GO 14004
13986: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
13987: LD_ADDR_VAR 0 3
13991: PUSH
13992: LD_INT 13
13994: PUSH
13995: LD_INT 14
13997: PUSH
13998: EMPTY
13999: LIST
14000: LIST
14001: ST_TO_ADDR
14002: GO 14321
14004: LD_INT 42
14006: DOUBLE
14007: EQUAL
14008: IFTRUE 14012
14010: GO 14038
14012: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
14013: LD_ADDR_VAR 0 3
14017: PUSH
14018: LD_INT 21
14020: PUSH
14021: LD_INT 22
14023: PUSH
14024: LD_INT 23
14026: PUSH
14027: LD_INT 24
14029: PUSH
14030: EMPTY
14031: LIST
14032: LIST
14033: LIST
14034: LIST
14035: ST_TO_ADDR
14036: GO 14321
14038: LD_INT 43
14040: DOUBLE
14041: EQUAL
14042: IFTRUE 14046
14044: GO 14072
14046: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
14047: LD_ADDR_VAR 0 3
14051: PUSH
14052: LD_INT 21
14054: PUSH
14055: LD_INT 22
14057: PUSH
14058: LD_INT 23
14060: PUSH
14061: LD_INT 24
14063: PUSH
14064: EMPTY
14065: LIST
14066: LIST
14067: LIST
14068: LIST
14069: ST_TO_ADDR
14070: GO 14321
14072: LD_INT 44
14074: DOUBLE
14075: EQUAL
14076: IFTRUE 14080
14078: GO 14106
14080: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
14081: LD_ADDR_VAR 0 3
14085: PUSH
14086: LD_INT 21
14088: PUSH
14089: LD_INT 22
14091: PUSH
14092: LD_INT 23
14094: PUSH
14095: LD_INT 24
14097: PUSH
14098: EMPTY
14099: LIST
14100: LIST
14101: LIST
14102: LIST
14103: ST_TO_ADDR
14104: GO 14321
14106: LD_INT 45
14108: DOUBLE
14109: EQUAL
14110: IFTRUE 14114
14112: GO 14140
14114: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
14115: LD_ADDR_VAR 0 3
14119: PUSH
14120: LD_INT 21
14122: PUSH
14123: LD_INT 22
14125: PUSH
14126: LD_INT 23
14128: PUSH
14129: LD_INT 24
14131: PUSH
14132: EMPTY
14133: LIST
14134: LIST
14135: LIST
14136: LIST
14137: ST_TO_ADDR
14138: GO 14321
14140: LD_INT 49
14142: DOUBLE
14143: EQUAL
14144: IFTRUE 14148
14146: GO 14174
14148: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
14149: LD_ADDR_VAR 0 3
14153: PUSH
14154: LD_INT 21
14156: PUSH
14157: LD_INT 22
14159: PUSH
14160: LD_INT 23
14162: PUSH
14163: LD_INT 24
14165: PUSH
14166: EMPTY
14167: LIST
14168: LIST
14169: LIST
14170: LIST
14171: ST_TO_ADDR
14172: GO 14321
14174: LD_INT 51
14176: DOUBLE
14177: EQUAL
14178: IFTRUE 14182
14180: GO 14208
14182: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
14183: LD_ADDR_VAR 0 3
14187: PUSH
14188: LD_INT 21
14190: PUSH
14191: LD_INT 22
14193: PUSH
14194: LD_INT 23
14196: PUSH
14197: LD_INT 24
14199: PUSH
14200: EMPTY
14201: LIST
14202: LIST
14203: LIST
14204: LIST
14205: ST_TO_ADDR
14206: GO 14321
14208: LD_INT 52
14210: DOUBLE
14211: EQUAL
14212: IFTRUE 14216
14214: GO 14242
14216: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
14217: LD_ADDR_VAR 0 3
14221: PUSH
14222: LD_INT 21
14224: PUSH
14225: LD_INT 22
14227: PUSH
14228: LD_INT 23
14230: PUSH
14231: LD_INT 24
14233: PUSH
14234: EMPTY
14235: LIST
14236: LIST
14237: LIST
14238: LIST
14239: ST_TO_ADDR
14240: GO 14321
14242: LD_INT 53
14244: DOUBLE
14245: EQUAL
14246: IFTRUE 14250
14248: GO 14268
14250: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
14251: LD_ADDR_VAR 0 3
14255: PUSH
14256: LD_INT 23
14258: PUSH
14259: LD_INT 24
14261: PUSH
14262: EMPTY
14263: LIST
14264: LIST
14265: ST_TO_ADDR
14266: GO 14321
14268: LD_INT 46
14270: DOUBLE
14271: EQUAL
14272: IFTRUE 14276
14274: GO 14294
14276: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
14277: LD_ADDR_VAR 0 3
14281: PUSH
14282: LD_INT 23
14284: PUSH
14285: LD_INT 24
14287: PUSH
14288: EMPTY
14289: LIST
14290: LIST
14291: ST_TO_ADDR
14292: GO 14321
14294: LD_INT 47
14296: DOUBLE
14297: EQUAL
14298: IFTRUE 14302
14300: GO 14320
14302: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
14303: LD_ADDR_VAR 0 3
14307: PUSH
14308: LD_INT 23
14310: PUSH
14311: LD_INT 24
14313: PUSH
14314: EMPTY
14315: LIST
14316: LIST
14317: ST_TO_ADDR
14318: GO 14321
14320: POP
// result := ( chassis in result ) ;
14321: LD_ADDR_VAR 0 3
14325: PUSH
14326: LD_VAR 0 1
14330: PUSH
14331: LD_VAR 0 3
14335: IN
14336: ST_TO_ADDR
// end ;
14337: LD_VAR 0 3
14341: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
14342: LD_INT 0
14344: PPUSH
14345: PPUSH
14346: PPUSH
14347: PPUSH
14348: PPUSH
14349: PPUSH
14350: PPUSH
// result := array ;
14351: LD_ADDR_VAR 0 5
14355: PUSH
14356: LD_VAR 0 1
14360: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
14361: LD_VAR 0 1
14365: NOT
14366: IFTRUE 14375
14368: PUSH
14369: LD_VAR 0 2
14373: NOT
14374: OR
14375: IFTRUE 14384
14377: PUSH
14378: LD_VAR 0 3
14382: NOT
14383: OR
14384: IFTRUE 14398
14386: PUSH
14387: LD_VAR 0 2
14391: PUSH
14392: LD_VAR 0 1
14396: GREATER
14397: OR
14398: IFTRUE 14412
14400: PUSH
14401: LD_VAR 0 3
14405: PUSH
14406: LD_VAR 0 1
14410: GREATER
14411: OR
14412: IFFALSE 14416
// exit ;
14414: GO 14712
// if direction then
14416: LD_VAR 0 4
14420: IFFALSE 14484
// begin d := 1 ;
14422: LD_ADDR_VAR 0 9
14426: PUSH
14427: LD_INT 1
14429: ST_TO_ADDR
// if i_from > i_to then
14430: LD_VAR 0 2
14434: PUSH
14435: LD_VAR 0 3
14439: GREATER
14440: IFFALSE 14466
// length := ( array - i_from ) + i_to else
14442: LD_ADDR_VAR 0 11
14446: PUSH
14447: LD_VAR 0 1
14451: PUSH
14452: LD_VAR 0 2
14456: MINUS
14457: PUSH
14458: LD_VAR 0 3
14462: PLUS
14463: ST_TO_ADDR
14464: GO 14482
// length := i_to - i_from ;
14466: LD_ADDR_VAR 0 11
14470: PUSH
14471: LD_VAR 0 3
14475: PUSH
14476: LD_VAR 0 2
14480: MINUS
14481: ST_TO_ADDR
// end else
14482: GO 14545
// begin d := - 1 ;
14484: LD_ADDR_VAR 0 9
14488: PUSH
14489: LD_INT 1
14491: NEG
14492: ST_TO_ADDR
// if i_from > i_to then
14493: LD_VAR 0 2
14497: PUSH
14498: LD_VAR 0 3
14502: GREATER
14503: IFFALSE 14523
// length := i_from - i_to else
14505: LD_ADDR_VAR 0 11
14509: PUSH
14510: LD_VAR 0 2
14514: PUSH
14515: LD_VAR 0 3
14519: MINUS
14520: ST_TO_ADDR
14521: GO 14545
// length := ( array - i_to ) + i_from ;
14523: LD_ADDR_VAR 0 11
14527: PUSH
14528: LD_VAR 0 1
14532: PUSH
14533: LD_VAR 0 3
14537: MINUS
14538: PUSH
14539: LD_VAR 0 2
14543: PLUS
14544: ST_TO_ADDR
// end ; if not length then
14545: LD_VAR 0 11
14549: NOT
14550: IFFALSE 14554
// exit ;
14552: GO 14712
// tmp := array ;
14554: LD_ADDR_VAR 0 10
14558: PUSH
14559: LD_VAR 0 1
14563: ST_TO_ADDR
// for i = 1 to length do
14564: LD_ADDR_VAR 0 6
14568: PUSH
14569: DOUBLE
14570: LD_INT 1
14572: DEC
14573: ST_TO_ADDR
14574: LD_VAR 0 11
14578: PUSH
14579: FOR_TO
14580: IFFALSE 14700
// begin for j = 1 to array do
14582: LD_ADDR_VAR 0 7
14586: PUSH
14587: DOUBLE
14588: LD_INT 1
14590: DEC
14591: ST_TO_ADDR
14592: LD_VAR 0 1
14596: PUSH
14597: FOR_TO
14598: IFFALSE 14686
// begin k := j + d ;
14600: LD_ADDR_VAR 0 8
14604: PUSH
14605: LD_VAR 0 7
14609: PUSH
14610: LD_VAR 0 9
14614: PLUS
14615: ST_TO_ADDR
// if k > array then
14616: LD_VAR 0 8
14620: PUSH
14621: LD_VAR 0 1
14625: GREATER
14626: IFFALSE 14636
// k := 1 ;
14628: LD_ADDR_VAR 0 8
14632: PUSH
14633: LD_INT 1
14635: ST_TO_ADDR
// if not k then
14636: LD_VAR 0 8
14640: NOT
14641: IFFALSE 14653
// k := array ;
14643: LD_ADDR_VAR 0 8
14647: PUSH
14648: LD_VAR 0 1
14652: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
14653: LD_ADDR_VAR 0 10
14657: PUSH
14658: LD_VAR 0 10
14662: PPUSH
14663: LD_VAR 0 8
14667: PPUSH
14668: LD_VAR 0 1
14672: PUSH
14673: LD_VAR 0 7
14677: ARRAY
14678: PPUSH
14679: CALL_OW 1
14683: ST_TO_ADDR
// end ;
14684: GO 14597
14686: POP
14687: POP
// array := tmp ;
14688: LD_ADDR_VAR 0 1
14692: PUSH
14693: LD_VAR 0 10
14697: ST_TO_ADDR
// end ;
14698: GO 14579
14700: POP
14701: POP
// result := array ;
14702: LD_ADDR_VAR 0 5
14706: PUSH
14707: LD_VAR 0 1
14711: ST_TO_ADDR
// end ;
14712: LD_VAR 0 5
14716: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
14717: LD_INT 0
14719: PPUSH
14720: PPUSH
// result := 0 ;
14721: LD_ADDR_VAR 0 3
14725: PUSH
14726: LD_INT 0
14728: ST_TO_ADDR
// if not array or not value in array then
14729: LD_VAR 0 1
14733: NOT
14734: IFTRUE 14749
14736: PUSH
14737: LD_VAR 0 2
14741: PUSH
14742: LD_VAR 0 1
14746: IN
14747: NOT
14748: OR
14749: IFFALSE 14753
// exit ;
14751: GO 14807
// for i = 1 to array do
14753: LD_ADDR_VAR 0 4
14757: PUSH
14758: DOUBLE
14759: LD_INT 1
14761: DEC
14762: ST_TO_ADDR
14763: LD_VAR 0 1
14767: PUSH
14768: FOR_TO
14769: IFFALSE 14805
// if value = array [ i ] then
14771: LD_VAR 0 2
14775: PUSH
14776: LD_VAR 0 1
14780: PUSH
14781: LD_VAR 0 4
14785: ARRAY
14786: EQUAL
14787: IFFALSE 14803
// begin result := i ;
14789: LD_ADDR_VAR 0 3
14793: PUSH
14794: LD_VAR 0 4
14798: ST_TO_ADDR
// exit ;
14799: POP
14800: POP
14801: GO 14807
// end ;
14803: GO 14768
14805: POP
14806: POP
// end ;
14807: LD_VAR 0 3
14811: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
14812: LD_INT 0
14814: PPUSH
// vc_chassis := chassis ;
14815: LD_ADDR_OWVAR 37
14819: PUSH
14820: LD_VAR 0 1
14824: ST_TO_ADDR
// vc_engine := engine ;
14825: LD_ADDR_OWVAR 39
14829: PUSH
14830: LD_VAR 0 2
14834: ST_TO_ADDR
// vc_control := control ;
14835: LD_ADDR_OWVAR 38
14839: PUSH
14840: LD_VAR 0 3
14844: ST_TO_ADDR
// vc_weapon := weapon ;
14845: LD_ADDR_OWVAR 40
14849: PUSH
14850: LD_VAR 0 4
14854: ST_TO_ADDR
// vc_fuel_battery := fuel ;
14855: LD_ADDR_OWVAR 41
14859: PUSH
14860: LD_VAR 0 5
14864: ST_TO_ADDR
// end ;
14865: LD_VAR 0 6
14869: RET
// export function WantPlant ( unit ) ; var task ; begin
14870: LD_INT 0
14872: PPUSH
14873: PPUSH
// result := false ;
14874: LD_ADDR_VAR 0 2
14878: PUSH
14879: LD_INT 0
14881: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
14882: LD_ADDR_VAR 0 3
14886: PUSH
14887: LD_VAR 0 1
14891: PPUSH
14892: CALL_OW 437
14896: ST_TO_ADDR
// if task then
14897: LD_VAR 0 3
14901: IFFALSE 14929
// if task [ 1 ] [ 1 ] = p then
14903: LD_VAR 0 3
14907: PUSH
14908: LD_INT 1
14910: ARRAY
14911: PUSH
14912: LD_INT 1
14914: ARRAY
14915: PUSH
14916: LD_STRING p
14918: EQUAL
14919: IFFALSE 14929
// result := true ;
14921: LD_ADDR_VAR 0 2
14925: PUSH
14926: LD_INT 1
14928: ST_TO_ADDR
// end ;
14929: LD_VAR 0 2
14933: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
14934: LD_INT 0
14936: PPUSH
14937: PPUSH
14938: PPUSH
14939: PPUSH
// if pos < 1 then
14940: LD_VAR 0 2
14944: PUSH
14945: LD_INT 1
14947: LESS
14948: IFFALSE 14952
// exit ;
14950: GO 15255
// if pos = 1 then
14952: LD_VAR 0 2
14956: PUSH
14957: LD_INT 1
14959: EQUAL
14960: IFFALSE 14993
// result := Replace ( arr , pos [ 1 ] , value ) else
14962: LD_ADDR_VAR 0 4
14966: PUSH
14967: LD_VAR 0 1
14971: PPUSH
14972: LD_VAR 0 2
14976: PUSH
14977: LD_INT 1
14979: ARRAY
14980: PPUSH
14981: LD_VAR 0 3
14985: PPUSH
14986: CALL_OW 1
14990: ST_TO_ADDR
14991: GO 15255
// begin tmp := arr ;
14993: LD_ADDR_VAR 0 6
14997: PUSH
14998: LD_VAR 0 1
15002: ST_TO_ADDR
// s_arr := [ tmp ] ;
15003: LD_ADDR_VAR 0 7
15007: PUSH
15008: LD_VAR 0 6
15012: PUSH
15013: EMPTY
15014: LIST
15015: ST_TO_ADDR
// for i = 1 to pos - 1 do
15016: LD_ADDR_VAR 0 5
15020: PUSH
15021: DOUBLE
15022: LD_INT 1
15024: DEC
15025: ST_TO_ADDR
15026: LD_VAR 0 2
15030: PUSH
15031: LD_INT 1
15033: MINUS
15034: PUSH
15035: FOR_TO
15036: IFFALSE 15081
// begin tmp := tmp [ pos [ i ] ] ;
15038: LD_ADDR_VAR 0 6
15042: PUSH
15043: LD_VAR 0 6
15047: PUSH
15048: LD_VAR 0 2
15052: PUSH
15053: LD_VAR 0 5
15057: ARRAY
15058: ARRAY
15059: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
15060: LD_ADDR_VAR 0 7
15064: PUSH
15065: LD_VAR 0 7
15069: PUSH
15070: LD_VAR 0 6
15074: PUSH
15075: EMPTY
15076: LIST
15077: ADD
15078: ST_TO_ADDR
// end ;
15079: GO 15035
15081: POP
15082: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
15083: LD_ADDR_VAR 0 6
15087: PUSH
15088: LD_VAR 0 6
15092: PPUSH
15093: LD_VAR 0 2
15097: PUSH
15098: LD_VAR 0 2
15102: ARRAY
15103: PPUSH
15104: LD_VAR 0 3
15108: PPUSH
15109: CALL_OW 1
15113: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
15114: LD_ADDR_VAR 0 7
15118: PUSH
15119: LD_VAR 0 7
15123: PPUSH
15124: LD_VAR 0 7
15128: PPUSH
15129: LD_VAR 0 6
15133: PPUSH
15134: CALL_OW 1
15138: ST_TO_ADDR
// for i = s_arr downto 2 do
15139: LD_ADDR_VAR 0 5
15143: PUSH
15144: DOUBLE
15145: LD_VAR 0 7
15149: INC
15150: ST_TO_ADDR
15151: LD_INT 2
15153: PUSH
15154: FOR_DOWNTO
15155: IFFALSE 15239
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
15157: LD_ADDR_VAR 0 6
15161: PUSH
15162: LD_VAR 0 7
15166: PUSH
15167: LD_VAR 0 5
15171: PUSH
15172: LD_INT 1
15174: MINUS
15175: ARRAY
15176: PPUSH
15177: LD_VAR 0 2
15181: PUSH
15182: LD_VAR 0 5
15186: PUSH
15187: LD_INT 1
15189: MINUS
15190: ARRAY
15191: PPUSH
15192: LD_VAR 0 7
15196: PUSH
15197: LD_VAR 0 5
15201: ARRAY
15202: PPUSH
15203: CALL_OW 1
15207: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
15208: LD_ADDR_VAR 0 7
15212: PUSH
15213: LD_VAR 0 7
15217: PPUSH
15218: LD_VAR 0 5
15222: PUSH
15223: LD_INT 1
15225: MINUS
15226: PPUSH
15227: LD_VAR 0 6
15231: PPUSH
15232: CALL_OW 1
15236: ST_TO_ADDR
// end ;
15237: GO 15154
15239: POP
15240: POP
// result := s_arr [ 1 ] ;
15241: LD_ADDR_VAR 0 4
15245: PUSH
15246: LD_VAR 0 7
15250: PUSH
15251: LD_INT 1
15253: ARRAY
15254: ST_TO_ADDR
// end ; end ;
15255: LD_VAR 0 4
15259: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
15260: LD_INT 0
15262: PPUSH
15263: PPUSH
// if not list then
15264: LD_VAR 0 1
15268: NOT
15269: IFFALSE 15273
// exit ;
15271: GO 15364
// i := list [ pos1 ] ;
15273: LD_ADDR_VAR 0 5
15277: PUSH
15278: LD_VAR 0 1
15282: PUSH
15283: LD_VAR 0 2
15287: ARRAY
15288: ST_TO_ADDR
// if not i then
15289: LD_VAR 0 5
15293: NOT
15294: IFFALSE 15298
// exit ;
15296: GO 15364
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
15298: LD_ADDR_VAR 0 1
15302: PUSH
15303: LD_VAR 0 1
15307: PPUSH
15308: LD_VAR 0 2
15312: PPUSH
15313: LD_VAR 0 1
15317: PUSH
15318: LD_VAR 0 3
15322: ARRAY
15323: PPUSH
15324: CALL_OW 1
15328: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
15329: LD_ADDR_VAR 0 1
15333: PUSH
15334: LD_VAR 0 1
15338: PPUSH
15339: LD_VAR 0 3
15343: PPUSH
15344: LD_VAR 0 5
15348: PPUSH
15349: CALL_OW 1
15353: ST_TO_ADDR
// result := list ;
15354: LD_ADDR_VAR 0 4
15358: PUSH
15359: LD_VAR 0 1
15363: ST_TO_ADDR
// end ;
15364: LD_VAR 0 4
15368: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
15369: LD_INT 0
15371: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
15372: LD_ADDR_VAR 0 5
15376: PUSH
15377: LD_VAR 0 1
15381: PPUSH
15382: CALL_OW 250
15386: PPUSH
15387: LD_VAR 0 1
15391: PPUSH
15392: CALL_OW 251
15396: PPUSH
15397: LD_VAR 0 2
15401: PPUSH
15402: LD_VAR 0 3
15406: PPUSH
15407: LD_VAR 0 4
15411: PPUSH
15412: CALL 15794 0 5
15416: ST_TO_ADDR
// end ;
15417: LD_VAR 0 5
15421: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
15422: LD_INT 0
15424: PPUSH
15425: PPUSH
15426: PPUSH
15427: PPUSH
// if not list or not unit then
15428: LD_VAR 0 2
15432: NOT
15433: IFTRUE 15442
15435: PUSH
15436: LD_VAR 0 1
15440: NOT
15441: OR
15442: IFFALSE 15446
// exit ;
15444: GO 15789
// result := [ ] ;
15446: LD_ADDR_VAR 0 5
15450: PUSH
15451: EMPTY
15452: ST_TO_ADDR
// for i in list do
15453: LD_ADDR_VAR 0 6
15457: PUSH
15458: LD_VAR 0 2
15462: PUSH
15463: FOR_IN
15464: IFFALSE 15682
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
15466: LD_ADDR_VAR 0 8
15470: PUSH
15471: LD_VAR 0 1
15475: PPUSH
15476: LD_VAR 0 6
15480: PUSH
15481: LD_INT 1
15483: ARRAY
15484: PPUSH
15485: LD_VAR 0 6
15489: PUSH
15490: LD_INT 2
15492: ARRAY
15493: PPUSH
15494: CALL_OW 297
15498: ST_TO_ADDR
// if not Count ( result ) then
15499: LD_VAR 0 5
15503: PPUSH
15504: CALL 12050 0 1
15508: NOT
15509: IFFALSE 15542
// begin result := Join ( result , [ i , tmp ] ) ;
15511: LD_ADDR_VAR 0 5
15515: PUSH
15516: LD_VAR 0 5
15520: PPUSH
15521: LD_VAR 0 6
15525: PUSH
15526: LD_VAR 0 8
15530: PUSH
15531: EMPTY
15532: LIST
15533: LIST
15534: PPUSH
15535: CALL 47982 0 2
15539: ST_TO_ADDR
// continue ;
15540: GO 15463
// end ; if result [ result ] [ 2 ] <= tmp then
15542: LD_VAR 0 5
15546: PUSH
15547: LD_VAR 0 5
15551: ARRAY
15552: PUSH
15553: LD_INT 2
15555: ARRAY
15556: PUSH
15557: LD_VAR 0 8
15561: LESSEQUAL
15562: IFFALSE 15595
// result := Join ( result , [ i , tmp ] ) else
15564: LD_ADDR_VAR 0 5
15568: PUSH
15569: LD_VAR 0 5
15573: PPUSH
15574: LD_VAR 0 6
15578: PUSH
15579: LD_VAR 0 8
15583: PUSH
15584: EMPTY
15585: LIST
15586: LIST
15587: PPUSH
15588: CALL 47982 0 2
15592: ST_TO_ADDR
15593: GO 15680
// begin for j := 1 to Count ( result ) do
15595: LD_ADDR_VAR 0 7
15599: PUSH
15600: DOUBLE
15601: LD_INT 1
15603: DEC
15604: ST_TO_ADDR
15605: LD_VAR 0 5
15609: PPUSH
15610: CALL 12050 0 1
15614: PUSH
15615: FOR_TO
15616: IFFALSE 15678
// begin if tmp < result [ j ] [ 2 ] then
15618: LD_VAR 0 8
15622: PUSH
15623: LD_VAR 0 5
15627: PUSH
15628: LD_VAR 0 7
15632: ARRAY
15633: PUSH
15634: LD_INT 2
15636: ARRAY
15637: LESS
15638: IFFALSE 15676
// begin result := Insert ( result , j , [ i , tmp ] ) ;
15640: LD_ADDR_VAR 0 5
15644: PUSH
15645: LD_VAR 0 5
15649: PPUSH
15650: LD_VAR 0 7
15654: PPUSH
15655: LD_VAR 0 6
15659: PUSH
15660: LD_VAR 0 8
15664: PUSH
15665: EMPTY
15666: LIST
15667: LIST
15668: PPUSH
15669: CALL_OW 2
15673: ST_TO_ADDR
// break ;
15674: GO 15678
// end ; end ;
15676: GO 15615
15678: POP
15679: POP
// end ; end ;
15680: GO 15463
15682: POP
15683: POP
// if result and not asc then
15684: LD_VAR 0 5
15688: IFFALSE 15697
15690: PUSH
15691: LD_VAR 0 3
15695: NOT
15696: AND
15697: IFFALSE 15714
// result := ReverseArray ( result ) ;
15699: LD_ADDR_VAR 0 5
15703: PUSH
15704: LD_VAR 0 5
15708: PPUSH
15709: CALL 43072 0 1
15713: ST_TO_ADDR
// tmp := [ ] ;
15714: LD_ADDR_VAR 0 8
15718: PUSH
15719: EMPTY
15720: ST_TO_ADDR
// if mode then
15721: LD_VAR 0 4
15725: IFFALSE 15789
// begin for i := 1 to result do
15727: LD_ADDR_VAR 0 6
15731: PUSH
15732: DOUBLE
15733: LD_INT 1
15735: DEC
15736: ST_TO_ADDR
15737: LD_VAR 0 5
15741: PUSH
15742: FOR_TO
15743: IFFALSE 15777
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
15745: LD_ADDR_VAR 0 8
15749: PUSH
15750: LD_VAR 0 8
15754: PPUSH
15755: LD_VAR 0 5
15759: PUSH
15760: LD_VAR 0 6
15764: ARRAY
15765: PUSH
15766: LD_INT 1
15768: ARRAY
15769: PPUSH
15770: CALL 47982 0 2
15774: ST_TO_ADDR
15775: GO 15742
15777: POP
15778: POP
// result := tmp ;
15779: LD_ADDR_VAR 0 5
15783: PUSH
15784: LD_VAR 0 8
15788: ST_TO_ADDR
// end ; end ;
15789: LD_VAR 0 5
15793: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
15794: LD_INT 0
15796: PPUSH
15797: PPUSH
15798: PPUSH
15799: PPUSH
// if not list then
15800: LD_VAR 0 3
15804: NOT
15805: IFFALSE 15809
// exit ;
15807: GO 16199
// result := [ ] ;
15809: LD_ADDR_VAR 0 6
15813: PUSH
15814: EMPTY
15815: ST_TO_ADDR
// for i in list do
15816: LD_ADDR_VAR 0 7
15820: PUSH
15821: LD_VAR 0 3
15825: PUSH
15826: FOR_IN
15827: IFFALSE 16029
// begin tmp := GetDistUnitXY ( i , x , y ) ;
15829: LD_ADDR_VAR 0 9
15833: PUSH
15834: LD_VAR 0 7
15838: PPUSH
15839: LD_VAR 0 1
15843: PPUSH
15844: LD_VAR 0 2
15848: PPUSH
15849: CALL_OW 297
15853: ST_TO_ADDR
// if not result then
15854: LD_VAR 0 6
15858: NOT
15859: IFFALSE 15885
// result := [ [ i , tmp ] ] else
15861: LD_ADDR_VAR 0 6
15865: PUSH
15866: LD_VAR 0 7
15870: PUSH
15871: LD_VAR 0 9
15875: PUSH
15876: EMPTY
15877: LIST
15878: LIST
15879: PUSH
15880: EMPTY
15881: LIST
15882: ST_TO_ADDR
15883: GO 16027
// begin if result [ result ] [ 2 ] <= tmp then
15885: LD_VAR 0 6
15889: PUSH
15890: LD_VAR 0 6
15894: ARRAY
15895: PUSH
15896: LD_INT 2
15898: ARRAY
15899: PUSH
15900: LD_VAR 0 9
15904: LESSEQUAL
15905: IFFALSE 15947
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
15907: LD_ADDR_VAR 0 6
15911: PUSH
15912: LD_VAR 0 6
15916: PPUSH
15917: LD_VAR 0 6
15921: PUSH
15922: LD_INT 1
15924: PLUS
15925: PPUSH
15926: LD_VAR 0 7
15930: PUSH
15931: LD_VAR 0 9
15935: PUSH
15936: EMPTY
15937: LIST
15938: LIST
15939: PPUSH
15940: CALL_OW 2
15944: ST_TO_ADDR
15945: GO 16027
// for j := 1 to result do
15947: LD_ADDR_VAR 0 8
15951: PUSH
15952: DOUBLE
15953: LD_INT 1
15955: DEC
15956: ST_TO_ADDR
15957: LD_VAR 0 6
15961: PUSH
15962: FOR_TO
15963: IFFALSE 16025
// begin if tmp < result [ j ] [ 2 ] then
15965: LD_VAR 0 9
15969: PUSH
15970: LD_VAR 0 6
15974: PUSH
15975: LD_VAR 0 8
15979: ARRAY
15980: PUSH
15981: LD_INT 2
15983: ARRAY
15984: LESS
15985: IFFALSE 16023
// begin result := Insert ( result , j , [ i , tmp ] ) ;
15987: LD_ADDR_VAR 0 6
15991: PUSH
15992: LD_VAR 0 6
15996: PPUSH
15997: LD_VAR 0 8
16001: PPUSH
16002: LD_VAR 0 7
16006: PUSH
16007: LD_VAR 0 9
16011: PUSH
16012: EMPTY
16013: LIST
16014: LIST
16015: PPUSH
16016: CALL_OW 2
16020: ST_TO_ADDR
// break ;
16021: GO 16025
// end ; end ;
16023: GO 15962
16025: POP
16026: POP
// end ; end ;
16027: GO 15826
16029: POP
16030: POP
// if result and not asc then
16031: LD_VAR 0 6
16035: IFFALSE 16044
16037: PUSH
16038: LD_VAR 0 4
16042: NOT
16043: AND
16044: IFFALSE 16119
// begin tmp := result ;
16046: LD_ADDR_VAR 0 9
16050: PUSH
16051: LD_VAR 0 6
16055: ST_TO_ADDR
// for i = tmp downto 1 do
16056: LD_ADDR_VAR 0 7
16060: PUSH
16061: DOUBLE
16062: LD_VAR 0 9
16066: INC
16067: ST_TO_ADDR
16068: LD_INT 1
16070: PUSH
16071: FOR_DOWNTO
16072: IFFALSE 16117
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
16074: LD_ADDR_VAR 0 6
16078: PUSH
16079: LD_VAR 0 6
16083: PPUSH
16084: LD_VAR 0 9
16088: PUSH
16089: LD_VAR 0 7
16093: MINUS
16094: PUSH
16095: LD_INT 1
16097: PLUS
16098: PPUSH
16099: LD_VAR 0 9
16103: PUSH
16104: LD_VAR 0 7
16108: ARRAY
16109: PPUSH
16110: CALL_OW 1
16114: ST_TO_ADDR
16115: GO 16071
16117: POP
16118: POP
// end ; tmp := [ ] ;
16119: LD_ADDR_VAR 0 9
16123: PUSH
16124: EMPTY
16125: ST_TO_ADDR
// if mode then
16126: LD_VAR 0 5
16130: IFFALSE 16199
// begin for i = 1 to result do
16132: LD_ADDR_VAR 0 7
16136: PUSH
16137: DOUBLE
16138: LD_INT 1
16140: DEC
16141: ST_TO_ADDR
16142: LD_VAR 0 6
16146: PUSH
16147: FOR_TO
16148: IFFALSE 16187
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
16150: LD_ADDR_VAR 0 9
16154: PUSH
16155: LD_VAR 0 9
16159: PPUSH
16160: LD_VAR 0 7
16164: PPUSH
16165: LD_VAR 0 6
16169: PUSH
16170: LD_VAR 0 7
16174: ARRAY
16175: PUSH
16176: LD_INT 1
16178: ARRAY
16179: PPUSH
16180: CALL_OW 1
16184: ST_TO_ADDR
16185: GO 16147
16187: POP
16188: POP
// result := tmp ;
16189: LD_ADDR_VAR 0 6
16193: PUSH
16194: LD_VAR 0 9
16198: ST_TO_ADDR
// end ; end ;
16199: LD_VAR 0 6
16203: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
16204: LD_INT 0
16206: PPUSH
16207: PPUSH
16208: PPUSH
16209: PPUSH
16210: PPUSH
16211: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
16212: LD_ADDR_VAR 0 5
16216: PUSH
16217: LD_INT 0
16219: PUSH
16220: LD_INT 0
16222: PUSH
16223: LD_INT 0
16225: PUSH
16226: EMPTY
16227: PUSH
16228: EMPTY
16229: LIST
16230: LIST
16231: LIST
16232: LIST
16233: ST_TO_ADDR
// if not x or not y then
16234: LD_VAR 0 2
16238: NOT
16239: IFTRUE 16248
16241: PUSH
16242: LD_VAR 0 3
16246: NOT
16247: OR
16248: IFFALSE 16252
// exit ;
16250: GO 17908
// if not range then
16252: LD_VAR 0 4
16256: NOT
16257: IFFALSE 16267
// range := 10 ;
16259: LD_ADDR_VAR 0 4
16263: PUSH
16264: LD_INT 10
16266: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
16267: LD_ADDR_VAR 0 8
16271: PUSH
16272: LD_INT 81
16274: PUSH
16275: LD_VAR 0 1
16279: PUSH
16280: EMPTY
16281: LIST
16282: LIST
16283: PUSH
16284: LD_INT 92
16286: PUSH
16287: LD_VAR 0 2
16291: PUSH
16292: LD_VAR 0 3
16296: PUSH
16297: LD_VAR 0 4
16301: PUSH
16302: EMPTY
16303: LIST
16304: LIST
16305: LIST
16306: LIST
16307: PUSH
16308: LD_INT 3
16310: PUSH
16311: LD_INT 21
16313: PUSH
16314: LD_INT 3
16316: PUSH
16317: EMPTY
16318: LIST
16319: LIST
16320: PUSH
16321: EMPTY
16322: LIST
16323: LIST
16324: PUSH
16325: EMPTY
16326: LIST
16327: LIST
16328: LIST
16329: PPUSH
16330: CALL_OW 69
16334: ST_TO_ADDR
// if not tmp then
16335: LD_VAR 0 8
16339: NOT
16340: IFFALSE 16344
// exit ;
16342: GO 17908
// for i in tmp do
16344: LD_ADDR_VAR 0 6
16348: PUSH
16349: LD_VAR 0 8
16353: PUSH
16354: FOR_IN
16355: IFFALSE 17883
// begin points := [ 0 , 0 , 0 ] ;
16357: LD_ADDR_VAR 0 9
16361: PUSH
16362: LD_INT 0
16364: PUSH
16365: LD_INT 0
16367: PUSH
16368: LD_INT 0
16370: PUSH
16371: EMPTY
16372: LIST
16373: LIST
16374: LIST
16375: ST_TO_ADDR
// bpoints := 1 ;
16376: LD_ADDR_VAR 0 10
16380: PUSH
16381: LD_INT 1
16383: ST_TO_ADDR
// case GetType ( i ) of unit_human :
16384: LD_VAR 0 6
16388: PPUSH
16389: CALL_OW 247
16393: PUSH
16394: LD_INT 1
16396: DOUBLE
16397: EQUAL
16398: IFTRUE 16402
16400: GO 16984
16402: POP
// begin if GetClass ( i ) = 1 then
16403: LD_VAR 0 6
16407: PPUSH
16408: CALL_OW 257
16412: PUSH
16413: LD_INT 1
16415: EQUAL
16416: IFFALSE 16437
// points := [ 10 , 5 , 3 ] ;
16418: LD_ADDR_VAR 0 9
16422: PUSH
16423: LD_INT 10
16425: PUSH
16426: LD_INT 5
16428: PUSH
16429: LD_INT 3
16431: PUSH
16432: EMPTY
16433: LIST
16434: LIST
16435: LIST
16436: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
16437: LD_VAR 0 6
16441: PPUSH
16442: CALL_OW 257
16446: PUSH
16447: LD_INT 2
16449: PUSH
16450: LD_INT 3
16452: PUSH
16453: LD_INT 4
16455: PUSH
16456: EMPTY
16457: LIST
16458: LIST
16459: LIST
16460: IN
16461: IFFALSE 16482
// points := [ 3 , 2 , 1 ] ;
16463: LD_ADDR_VAR 0 9
16467: PUSH
16468: LD_INT 3
16470: PUSH
16471: LD_INT 2
16473: PUSH
16474: LD_INT 1
16476: PUSH
16477: EMPTY
16478: LIST
16479: LIST
16480: LIST
16481: ST_TO_ADDR
// if GetClass ( i ) = 5 then
16482: LD_VAR 0 6
16486: PPUSH
16487: CALL_OW 257
16491: PUSH
16492: LD_INT 5
16494: EQUAL
16495: IFFALSE 16516
// points := [ 130 , 5 , 2 ] ;
16497: LD_ADDR_VAR 0 9
16501: PUSH
16502: LD_INT 130
16504: PUSH
16505: LD_INT 5
16507: PUSH
16508: LD_INT 2
16510: PUSH
16511: EMPTY
16512: LIST
16513: LIST
16514: LIST
16515: ST_TO_ADDR
// if GetClass ( i ) = 8 then
16516: LD_VAR 0 6
16520: PPUSH
16521: CALL_OW 257
16525: PUSH
16526: LD_INT 8
16528: EQUAL
16529: IFFALSE 16550
// points := [ 35 , 35 , 30 ] ;
16531: LD_ADDR_VAR 0 9
16535: PUSH
16536: LD_INT 35
16538: PUSH
16539: LD_INT 35
16541: PUSH
16542: LD_INT 30
16544: PUSH
16545: EMPTY
16546: LIST
16547: LIST
16548: LIST
16549: ST_TO_ADDR
// if GetClass ( i ) = 9 then
16550: LD_VAR 0 6
16554: PPUSH
16555: CALL_OW 257
16559: PUSH
16560: LD_INT 9
16562: EQUAL
16563: IFFALSE 16584
// points := [ 20 , 55 , 40 ] ;
16565: LD_ADDR_VAR 0 9
16569: PUSH
16570: LD_INT 20
16572: PUSH
16573: LD_INT 55
16575: PUSH
16576: LD_INT 40
16578: PUSH
16579: EMPTY
16580: LIST
16581: LIST
16582: LIST
16583: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
16584: LD_VAR 0 6
16588: PPUSH
16589: CALL_OW 257
16593: PUSH
16594: LD_INT 12
16596: PUSH
16597: LD_INT 16
16599: PUSH
16600: EMPTY
16601: LIST
16602: LIST
16603: IN
16604: IFFALSE 16625
// points := [ 5 , 3 , 2 ] ;
16606: LD_ADDR_VAR 0 9
16610: PUSH
16611: LD_INT 5
16613: PUSH
16614: LD_INT 3
16616: PUSH
16617: LD_INT 2
16619: PUSH
16620: EMPTY
16621: LIST
16622: LIST
16623: LIST
16624: ST_TO_ADDR
// if GetClass ( i ) = 17 then
16625: LD_VAR 0 6
16629: PPUSH
16630: CALL_OW 257
16634: PUSH
16635: LD_INT 17
16637: EQUAL
16638: IFFALSE 16659
// points := [ 100 , 50 , 75 ] ;
16640: LD_ADDR_VAR 0 9
16644: PUSH
16645: LD_INT 100
16647: PUSH
16648: LD_INT 50
16650: PUSH
16651: LD_INT 75
16653: PUSH
16654: EMPTY
16655: LIST
16656: LIST
16657: LIST
16658: ST_TO_ADDR
// if GetClass ( i ) = 15 then
16659: LD_VAR 0 6
16663: PPUSH
16664: CALL_OW 257
16668: PUSH
16669: LD_INT 15
16671: EQUAL
16672: IFFALSE 16693
// points := [ 10 , 5 , 3 ] ;
16674: LD_ADDR_VAR 0 9
16678: PUSH
16679: LD_INT 10
16681: PUSH
16682: LD_INT 5
16684: PUSH
16685: LD_INT 3
16687: PUSH
16688: EMPTY
16689: LIST
16690: LIST
16691: LIST
16692: ST_TO_ADDR
// if GetClass ( i ) = 14 then
16693: LD_VAR 0 6
16697: PPUSH
16698: CALL_OW 257
16702: PUSH
16703: LD_INT 14
16705: EQUAL
16706: IFFALSE 16727
// points := [ 10 , 0 , 0 ] ;
16708: LD_ADDR_VAR 0 9
16712: PUSH
16713: LD_INT 10
16715: PUSH
16716: LD_INT 0
16718: PUSH
16719: LD_INT 0
16721: PUSH
16722: EMPTY
16723: LIST
16724: LIST
16725: LIST
16726: ST_TO_ADDR
// if GetClass ( i ) = 11 then
16727: LD_VAR 0 6
16731: PPUSH
16732: CALL_OW 257
16736: PUSH
16737: LD_INT 11
16739: EQUAL
16740: IFFALSE 16761
// points := [ 30 , 10 , 5 ] ;
16742: LD_ADDR_VAR 0 9
16746: PUSH
16747: LD_INT 30
16749: PUSH
16750: LD_INT 10
16752: PUSH
16753: LD_INT 5
16755: PUSH
16756: EMPTY
16757: LIST
16758: LIST
16759: LIST
16760: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
16761: LD_VAR 0 1
16765: PPUSH
16766: LD_INT 5
16768: PPUSH
16769: CALL_OW 321
16773: PUSH
16774: LD_INT 2
16776: EQUAL
16777: IFFALSE 16794
// bpoints := bpoints * 1.8 ;
16779: LD_ADDR_VAR 0 10
16783: PUSH
16784: LD_VAR 0 10
16788: PUSH
16789: LD_REAL  1.80000000000000E+0000
16792: MUL
16793: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
16794: LD_VAR 0 6
16798: PPUSH
16799: CALL_OW 257
16803: PUSH
16804: LD_INT 1
16806: PUSH
16807: LD_INT 2
16809: PUSH
16810: LD_INT 3
16812: PUSH
16813: LD_INT 4
16815: PUSH
16816: EMPTY
16817: LIST
16818: LIST
16819: LIST
16820: LIST
16821: IN
16822: IFFALSE 16842
16824: PUSH
16825: LD_VAR 0 1
16829: PPUSH
16830: LD_INT 51
16832: PPUSH
16833: CALL_OW 321
16837: PUSH
16838: LD_INT 2
16840: EQUAL
16841: AND
16842: IFFALSE 16859
// bpoints := bpoints * 1.2 ;
16844: LD_ADDR_VAR 0 10
16848: PUSH
16849: LD_VAR 0 10
16853: PUSH
16854: LD_REAL  1.20000000000000E+0000
16857: MUL
16858: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
16859: LD_VAR 0 6
16863: PPUSH
16864: CALL_OW 257
16868: PUSH
16869: LD_INT 5
16871: PUSH
16872: LD_INT 7
16874: PUSH
16875: LD_INT 9
16877: PUSH
16878: EMPTY
16879: LIST
16880: LIST
16881: LIST
16882: IN
16883: IFFALSE 16903
16885: PUSH
16886: LD_VAR 0 1
16890: PPUSH
16891: LD_INT 52
16893: PPUSH
16894: CALL_OW 321
16898: PUSH
16899: LD_INT 2
16901: EQUAL
16902: AND
16903: IFFALSE 16920
// bpoints := bpoints * 1.5 ;
16905: LD_ADDR_VAR 0 10
16909: PUSH
16910: LD_VAR 0 10
16914: PUSH
16915: LD_REAL  1.50000000000000E+0000
16918: MUL
16919: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
16920: LD_VAR 0 1
16924: PPUSH
16925: LD_INT 66
16927: PPUSH
16928: CALL_OW 321
16932: PUSH
16933: LD_INT 2
16935: EQUAL
16936: IFFALSE 16953
// bpoints := bpoints * 1.1 ;
16938: LD_ADDR_VAR 0 10
16942: PUSH
16943: LD_VAR 0 10
16947: PUSH
16948: LD_REAL  1.10000000000000E+0000
16951: MUL
16952: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
16953: LD_ADDR_VAR 0 10
16957: PUSH
16958: LD_VAR 0 10
16962: PUSH
16963: LD_VAR 0 6
16967: PPUSH
16968: LD_INT 1
16970: PPUSH
16971: CALL_OW 259
16975: PUSH
16976: LD_REAL  1.15000000000000E+0000
16979: MUL
16980: MUL
16981: ST_TO_ADDR
// end ; unit_vehicle :
16982: GO 17812
16984: LD_INT 2
16986: DOUBLE
16987: EQUAL
16988: IFTRUE 16992
16990: GO 17800
16992: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
16993: LD_VAR 0 6
16997: PPUSH
16998: CALL_OW 264
17002: PUSH
17003: LD_INT 2
17005: PUSH
17006: LD_INT 42
17008: PUSH
17009: LD_INT 24
17011: PUSH
17012: EMPTY
17013: LIST
17014: LIST
17015: LIST
17016: IN
17017: IFFALSE 17038
// points := [ 25 , 5 , 3 ] ;
17019: LD_ADDR_VAR 0 9
17023: PUSH
17024: LD_INT 25
17026: PUSH
17027: LD_INT 5
17029: PUSH
17030: LD_INT 3
17032: PUSH
17033: EMPTY
17034: LIST
17035: LIST
17036: LIST
17037: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
17038: LD_VAR 0 6
17042: PPUSH
17043: CALL_OW 264
17047: PUSH
17048: LD_INT 4
17050: PUSH
17051: LD_INT 43
17053: PUSH
17054: LD_INT 25
17056: PUSH
17057: EMPTY
17058: LIST
17059: LIST
17060: LIST
17061: IN
17062: IFFALSE 17083
// points := [ 40 , 15 , 5 ] ;
17064: LD_ADDR_VAR 0 9
17068: PUSH
17069: LD_INT 40
17071: PUSH
17072: LD_INT 15
17074: PUSH
17075: LD_INT 5
17077: PUSH
17078: EMPTY
17079: LIST
17080: LIST
17081: LIST
17082: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
17083: LD_VAR 0 6
17087: PPUSH
17088: CALL_OW 264
17092: PUSH
17093: LD_INT 3
17095: PUSH
17096: LD_INT 23
17098: PUSH
17099: EMPTY
17100: LIST
17101: LIST
17102: IN
17103: IFFALSE 17124
// points := [ 7 , 25 , 8 ] ;
17105: LD_ADDR_VAR 0 9
17109: PUSH
17110: LD_INT 7
17112: PUSH
17113: LD_INT 25
17115: PUSH
17116: LD_INT 8
17118: PUSH
17119: EMPTY
17120: LIST
17121: LIST
17122: LIST
17123: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
17124: LD_VAR 0 6
17128: PPUSH
17129: CALL_OW 264
17133: PUSH
17134: LD_INT 5
17136: PUSH
17137: LD_INT 27
17139: PUSH
17140: LD_INT 44
17142: PUSH
17143: EMPTY
17144: LIST
17145: LIST
17146: LIST
17147: IN
17148: IFFALSE 17169
// points := [ 14 , 50 , 16 ] ;
17150: LD_ADDR_VAR 0 9
17154: PUSH
17155: LD_INT 14
17157: PUSH
17158: LD_INT 50
17160: PUSH
17161: LD_INT 16
17163: PUSH
17164: EMPTY
17165: LIST
17166: LIST
17167: LIST
17168: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
17169: LD_VAR 0 6
17173: PPUSH
17174: CALL_OW 264
17178: PUSH
17179: LD_INT 6
17181: PUSH
17182: LD_INT 46
17184: PUSH
17185: EMPTY
17186: LIST
17187: LIST
17188: IN
17189: IFFALSE 17210
// points := [ 32 , 120 , 70 ] ;
17191: LD_ADDR_VAR 0 9
17195: PUSH
17196: LD_INT 32
17198: PUSH
17199: LD_INT 120
17201: PUSH
17202: LD_INT 70
17204: PUSH
17205: EMPTY
17206: LIST
17207: LIST
17208: LIST
17209: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
17210: LD_VAR 0 6
17214: PPUSH
17215: CALL_OW 264
17219: PUSH
17220: LD_INT 7
17222: PUSH
17223: LD_INT 28
17225: PUSH
17226: LD_INT 45
17228: PUSH
17229: LD_INT 92
17231: PUSH
17232: EMPTY
17233: LIST
17234: LIST
17235: LIST
17236: LIST
17237: IN
17238: IFFALSE 17259
// points := [ 35 , 20 , 45 ] ;
17240: LD_ADDR_VAR 0 9
17244: PUSH
17245: LD_INT 35
17247: PUSH
17248: LD_INT 20
17250: PUSH
17251: LD_INT 45
17253: PUSH
17254: EMPTY
17255: LIST
17256: LIST
17257: LIST
17258: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
17259: LD_VAR 0 6
17263: PPUSH
17264: CALL_OW 264
17268: PUSH
17269: LD_INT 47
17271: PUSH
17272: EMPTY
17273: LIST
17274: IN
17275: IFFALSE 17296
// points := [ 67 , 45 , 75 ] ;
17277: LD_ADDR_VAR 0 9
17281: PUSH
17282: LD_INT 67
17284: PUSH
17285: LD_INT 45
17287: PUSH
17288: LD_INT 75
17290: PUSH
17291: EMPTY
17292: LIST
17293: LIST
17294: LIST
17295: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
17296: LD_VAR 0 6
17300: PPUSH
17301: CALL_OW 264
17305: PUSH
17306: LD_INT 26
17308: PUSH
17309: EMPTY
17310: LIST
17311: IN
17312: IFFALSE 17333
// points := [ 120 , 30 , 80 ] ;
17314: LD_ADDR_VAR 0 9
17318: PUSH
17319: LD_INT 120
17321: PUSH
17322: LD_INT 30
17324: PUSH
17325: LD_INT 80
17327: PUSH
17328: EMPTY
17329: LIST
17330: LIST
17331: LIST
17332: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
17333: LD_VAR 0 6
17337: PPUSH
17338: CALL_OW 264
17342: PUSH
17343: LD_INT 22
17345: PUSH
17346: EMPTY
17347: LIST
17348: IN
17349: IFFALSE 17370
// points := [ 40 , 1 , 1 ] ;
17351: LD_ADDR_VAR 0 9
17355: PUSH
17356: LD_INT 40
17358: PUSH
17359: LD_INT 1
17361: PUSH
17362: LD_INT 1
17364: PUSH
17365: EMPTY
17366: LIST
17367: LIST
17368: LIST
17369: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
17370: LD_VAR 0 6
17374: PPUSH
17375: CALL_OW 264
17379: PUSH
17380: LD_INT 29
17382: PUSH
17383: EMPTY
17384: LIST
17385: IN
17386: IFFALSE 17407
// points := [ 70 , 200 , 400 ] ;
17388: LD_ADDR_VAR 0 9
17392: PUSH
17393: LD_INT 70
17395: PUSH
17396: LD_INT 200
17398: PUSH
17399: LD_INT 400
17401: PUSH
17402: EMPTY
17403: LIST
17404: LIST
17405: LIST
17406: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
17407: LD_VAR 0 6
17411: PPUSH
17412: CALL_OW 264
17416: PUSH
17417: LD_INT 14
17419: PUSH
17420: LD_INT 53
17422: PUSH
17423: EMPTY
17424: LIST
17425: LIST
17426: IN
17427: IFFALSE 17448
// points := [ 40 , 10 , 20 ] ;
17429: LD_ADDR_VAR 0 9
17433: PUSH
17434: LD_INT 40
17436: PUSH
17437: LD_INT 10
17439: PUSH
17440: LD_INT 20
17442: PUSH
17443: EMPTY
17444: LIST
17445: LIST
17446: LIST
17447: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
17448: LD_VAR 0 6
17452: PPUSH
17453: CALL_OW 264
17457: PUSH
17458: LD_INT 9
17460: PUSH
17461: EMPTY
17462: LIST
17463: IN
17464: IFFALSE 17485
// points := [ 5 , 70 , 20 ] ;
17466: LD_ADDR_VAR 0 9
17470: PUSH
17471: LD_INT 5
17473: PUSH
17474: LD_INT 70
17476: PUSH
17477: LD_INT 20
17479: PUSH
17480: EMPTY
17481: LIST
17482: LIST
17483: LIST
17484: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
17485: LD_VAR 0 6
17489: PPUSH
17490: CALL_OW 264
17494: PUSH
17495: LD_INT 10
17497: PUSH
17498: EMPTY
17499: LIST
17500: IN
17501: IFFALSE 17522
// points := [ 35 , 110 , 70 ] ;
17503: LD_ADDR_VAR 0 9
17507: PUSH
17508: LD_INT 35
17510: PUSH
17511: LD_INT 110
17513: PUSH
17514: LD_INT 70
17516: PUSH
17517: EMPTY
17518: LIST
17519: LIST
17520: LIST
17521: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
17522: LD_VAR 0 6
17526: PPUSH
17527: CALL_OW 265
17531: PUSH
17532: LD_INT 25
17534: EQUAL
17535: IFFALSE 17556
// points := [ 80 , 65 , 100 ] ;
17537: LD_ADDR_VAR 0 9
17541: PUSH
17542: LD_INT 80
17544: PUSH
17545: LD_INT 65
17547: PUSH
17548: LD_INT 100
17550: PUSH
17551: EMPTY
17552: LIST
17553: LIST
17554: LIST
17555: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
17556: LD_VAR 0 6
17560: PPUSH
17561: CALL_OW 263
17565: PUSH
17566: LD_INT 1
17568: EQUAL
17569: IFFALSE 17604
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
17571: LD_ADDR_VAR 0 10
17575: PUSH
17576: LD_VAR 0 10
17580: PUSH
17581: LD_VAR 0 6
17585: PPUSH
17586: CALL_OW 311
17590: PPUSH
17591: LD_INT 3
17593: PPUSH
17594: CALL_OW 259
17598: PUSH
17599: LD_INT 4
17601: MUL
17602: MUL
17603: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
17604: LD_VAR 0 6
17608: PPUSH
17609: CALL_OW 263
17613: PUSH
17614: LD_INT 2
17616: EQUAL
17617: IFFALSE 17668
// begin j := IsControledBy ( i ) ;
17619: LD_ADDR_VAR 0 7
17623: PUSH
17624: LD_VAR 0 6
17628: PPUSH
17629: CALL_OW 312
17633: ST_TO_ADDR
// if j then
17634: LD_VAR 0 7
17638: IFFALSE 17668
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
17640: LD_ADDR_VAR 0 10
17644: PUSH
17645: LD_VAR 0 10
17649: PUSH
17650: LD_VAR 0 7
17654: PPUSH
17655: LD_INT 3
17657: PPUSH
17658: CALL_OW 259
17662: PUSH
17663: LD_INT 3
17665: MUL
17666: MUL
17667: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
17668: LD_VAR 0 6
17672: PPUSH
17673: CALL_OW 264
17677: PUSH
17678: LD_INT 5
17680: PUSH
17681: LD_INT 6
17683: PUSH
17684: LD_INT 46
17686: PUSH
17687: LD_INT 44
17689: PUSH
17690: LD_INT 47
17692: PUSH
17693: LD_INT 45
17695: PUSH
17696: LD_INT 28
17698: PUSH
17699: LD_INT 7
17701: PUSH
17702: LD_INT 27
17704: PUSH
17705: LD_INT 29
17707: PUSH
17708: EMPTY
17709: LIST
17710: LIST
17711: LIST
17712: LIST
17713: LIST
17714: LIST
17715: LIST
17716: LIST
17717: LIST
17718: LIST
17719: IN
17720: IFFALSE 17740
17722: PUSH
17723: LD_VAR 0 1
17727: PPUSH
17728: LD_INT 52
17730: PPUSH
17731: CALL_OW 321
17735: PUSH
17736: LD_INT 2
17738: EQUAL
17739: AND
17740: IFFALSE 17757
// bpoints := bpoints * 1.2 ;
17742: LD_ADDR_VAR 0 10
17746: PUSH
17747: LD_VAR 0 10
17751: PUSH
17752: LD_REAL  1.20000000000000E+0000
17755: MUL
17756: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
17757: LD_VAR 0 6
17761: PPUSH
17762: CALL_OW 264
17766: PUSH
17767: LD_INT 6
17769: PUSH
17770: LD_INT 46
17772: PUSH
17773: LD_INT 47
17775: PUSH
17776: EMPTY
17777: LIST
17778: LIST
17779: LIST
17780: IN
17781: IFFALSE 17798
// bpoints := bpoints * 1.2 ;
17783: LD_ADDR_VAR 0 10
17787: PUSH
17788: LD_VAR 0 10
17792: PUSH
17793: LD_REAL  1.20000000000000E+0000
17796: MUL
17797: ST_TO_ADDR
// end ; unit_building :
17798: GO 17812
17800: LD_INT 3
17802: DOUBLE
17803: EQUAL
17804: IFTRUE 17808
17806: GO 17811
17808: POP
// ; end ;
17809: GO 17812
17811: POP
// for j = 1 to 3 do
17812: LD_ADDR_VAR 0 7
17816: PUSH
17817: DOUBLE
17818: LD_INT 1
17820: DEC
17821: ST_TO_ADDR
17822: LD_INT 3
17824: PUSH
17825: FOR_TO
17826: IFFALSE 17879
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
17828: LD_ADDR_VAR 0 5
17832: PUSH
17833: LD_VAR 0 5
17837: PPUSH
17838: LD_VAR 0 7
17842: PPUSH
17843: LD_VAR 0 5
17847: PUSH
17848: LD_VAR 0 7
17852: ARRAY
17853: PUSH
17854: LD_VAR 0 9
17858: PUSH
17859: LD_VAR 0 7
17863: ARRAY
17864: PUSH
17865: LD_VAR 0 10
17869: MUL
17870: PLUS
17871: PPUSH
17872: CALL_OW 1
17876: ST_TO_ADDR
17877: GO 17825
17879: POP
17880: POP
// end ;
17881: GO 16354
17883: POP
17884: POP
// result := Replace ( result , 4 , tmp ) ;
17885: LD_ADDR_VAR 0 5
17889: PUSH
17890: LD_VAR 0 5
17894: PPUSH
17895: LD_INT 4
17897: PPUSH
17898: LD_VAR 0 8
17902: PPUSH
17903: CALL_OW 1
17907: ST_TO_ADDR
// end ;
17908: LD_VAR 0 5
17912: RET
// export function DangerAtRange ( unit , range ) ; begin
17913: LD_INT 0
17915: PPUSH
// if not unit then
17916: LD_VAR 0 1
17920: NOT
17921: IFFALSE 17925
// exit ;
17923: GO 17970
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
17925: LD_ADDR_VAR 0 3
17929: PUSH
17930: LD_VAR 0 1
17934: PPUSH
17935: CALL_OW 255
17939: PPUSH
17940: LD_VAR 0 1
17944: PPUSH
17945: CALL_OW 250
17949: PPUSH
17950: LD_VAR 0 1
17954: PPUSH
17955: CALL_OW 251
17959: PPUSH
17960: LD_VAR 0 2
17964: PPUSH
17965: CALL 16204 0 4
17969: ST_TO_ADDR
// end ;
17970: LD_VAR 0 3
17974: RET
// export function DangerInArea ( side , area ) ; begin
17975: LD_INT 0
17977: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
17978: LD_ADDR_VAR 0 3
17982: PUSH
17983: LD_VAR 0 2
17987: PPUSH
17988: LD_INT 81
17990: PUSH
17991: LD_VAR 0 1
17995: PUSH
17996: EMPTY
17997: LIST
17998: LIST
17999: PPUSH
18000: CALL_OW 70
18004: ST_TO_ADDR
// end ;
18005: LD_VAR 0 3
18009: RET
// export function IsExtension ( b ) ; begin
18010: LD_INT 0
18012: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
18013: LD_ADDR_VAR 0 2
18017: PUSH
18018: LD_VAR 0 1
18022: PUSH
18023: LD_INT 23
18025: PUSH
18026: LD_INT 20
18028: PUSH
18029: LD_INT 22
18031: PUSH
18032: LD_INT 17
18034: PUSH
18035: LD_INT 24
18037: PUSH
18038: LD_INT 21
18040: PUSH
18041: LD_INT 19
18043: PUSH
18044: LD_INT 16
18046: PUSH
18047: LD_INT 25
18049: PUSH
18050: LD_INT 18
18052: PUSH
18053: EMPTY
18054: LIST
18055: LIST
18056: LIST
18057: LIST
18058: LIST
18059: LIST
18060: LIST
18061: LIST
18062: LIST
18063: LIST
18064: IN
18065: ST_TO_ADDR
// end ;
18066: LD_VAR 0 2
18070: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
18071: LD_INT 0
18073: PPUSH
18074: PPUSH
18075: PPUSH
// result := [ ] ;
18076: LD_ADDR_VAR 0 4
18080: PUSH
18081: EMPTY
18082: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
18083: LD_ADDR_VAR 0 5
18087: PUSH
18088: LD_VAR 0 2
18092: PPUSH
18093: LD_INT 21
18095: PUSH
18096: LD_INT 3
18098: PUSH
18099: EMPTY
18100: LIST
18101: LIST
18102: PPUSH
18103: CALL_OW 70
18107: ST_TO_ADDR
// if not tmp then
18108: LD_VAR 0 5
18112: NOT
18113: IFFALSE 18117
// exit ;
18115: GO 18181
// if checkLink then
18117: LD_VAR 0 3
18121: IFFALSE 18171
// begin for i in tmp do
18123: LD_ADDR_VAR 0 6
18127: PUSH
18128: LD_VAR 0 5
18132: PUSH
18133: FOR_IN
18134: IFFALSE 18169
// if GetBase ( i ) <> base then
18136: LD_VAR 0 6
18140: PPUSH
18141: CALL_OW 274
18145: PUSH
18146: LD_VAR 0 1
18150: NONEQUAL
18151: IFFALSE 18167
// ComLinkToBase ( base , i ) ;
18153: LD_VAR 0 1
18157: PPUSH
18158: LD_VAR 0 6
18162: PPUSH
18163: CALL_OW 169
18167: GO 18133
18169: POP
18170: POP
// end ; result := tmp ;
18171: LD_ADDR_VAR 0 4
18175: PUSH
18176: LD_VAR 0 5
18180: ST_TO_ADDR
// end ;
18181: LD_VAR 0 4
18185: RET
// export function ComComplete ( units , b ) ; var i ; begin
18186: LD_INT 0
18188: PPUSH
18189: PPUSH
// if not units then
18190: LD_VAR 0 1
18194: NOT
18195: IFFALSE 18199
// exit ;
18197: GO 18289
// for i in units do
18199: LD_ADDR_VAR 0 4
18203: PUSH
18204: LD_VAR 0 1
18208: PUSH
18209: FOR_IN
18210: IFFALSE 18287
// if BuildingStatus ( b ) = bs_build then
18212: LD_VAR 0 2
18216: PPUSH
18217: CALL_OW 461
18221: PUSH
18222: LD_INT 1
18224: EQUAL
18225: IFFALSE 18285
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
18227: LD_VAR 0 4
18231: PPUSH
18232: LD_STRING h
18234: PUSH
18235: LD_VAR 0 2
18239: PPUSH
18240: CALL_OW 250
18244: PUSH
18245: LD_VAR 0 2
18249: PPUSH
18250: CALL_OW 251
18254: PUSH
18255: LD_VAR 0 2
18259: PUSH
18260: LD_INT 0
18262: PUSH
18263: LD_INT 0
18265: PUSH
18266: LD_INT 0
18268: PUSH
18269: EMPTY
18270: LIST
18271: LIST
18272: LIST
18273: LIST
18274: LIST
18275: LIST
18276: LIST
18277: PUSH
18278: EMPTY
18279: LIST
18280: PPUSH
18281: CALL_OW 446
18285: GO 18209
18287: POP
18288: POP
// end ;
18289: LD_VAR 0 3
18293: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
18294: LD_INT 0
18296: PPUSH
18297: PPUSH
18298: PPUSH
18299: PPUSH
18300: PPUSH
18301: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
18302: LD_VAR 0 1
18306: NOT
18307: IFTRUE 18324
18309: PUSH
18310: LD_VAR 0 1
18314: PPUSH
18315: CALL_OW 263
18319: PUSH
18320: LD_INT 2
18322: NONEQUAL
18323: OR
18324: IFFALSE 18328
// exit ;
18326: GO 18644
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
18328: LD_ADDR_VAR 0 6
18332: PUSH
18333: LD_INT 22
18335: PUSH
18336: LD_VAR 0 1
18340: PPUSH
18341: CALL_OW 255
18345: PUSH
18346: EMPTY
18347: LIST
18348: LIST
18349: PUSH
18350: LD_INT 2
18352: PUSH
18353: LD_INT 30
18355: PUSH
18356: LD_INT 36
18358: PUSH
18359: EMPTY
18360: LIST
18361: LIST
18362: PUSH
18363: LD_INT 34
18365: PUSH
18366: LD_INT 31
18368: PUSH
18369: EMPTY
18370: LIST
18371: LIST
18372: PUSH
18373: EMPTY
18374: LIST
18375: LIST
18376: LIST
18377: PUSH
18378: EMPTY
18379: LIST
18380: LIST
18381: PPUSH
18382: CALL_OW 69
18386: ST_TO_ADDR
// if not tmp then
18387: LD_VAR 0 6
18391: NOT
18392: IFFALSE 18396
// exit ;
18394: GO 18644
// result := [ ] ;
18396: LD_ADDR_VAR 0 2
18400: PUSH
18401: EMPTY
18402: ST_TO_ADDR
// for i in tmp do
18403: LD_ADDR_VAR 0 3
18407: PUSH
18408: LD_VAR 0 6
18412: PUSH
18413: FOR_IN
18414: IFFALSE 18485
// begin t := UnitsInside ( i ) ;
18416: LD_ADDR_VAR 0 4
18420: PUSH
18421: LD_VAR 0 3
18425: PPUSH
18426: CALL_OW 313
18430: ST_TO_ADDR
// if t then
18431: LD_VAR 0 4
18435: IFFALSE 18483
// for j in t do
18437: LD_ADDR_VAR 0 7
18441: PUSH
18442: LD_VAR 0 4
18446: PUSH
18447: FOR_IN
18448: IFFALSE 18481
// result := Replace ( result , result + 1 , j ) ;
18450: LD_ADDR_VAR 0 2
18454: PUSH
18455: LD_VAR 0 2
18459: PPUSH
18460: LD_VAR 0 2
18464: PUSH
18465: LD_INT 1
18467: PLUS
18468: PPUSH
18469: LD_VAR 0 7
18473: PPUSH
18474: CALL_OW 1
18478: ST_TO_ADDR
18479: GO 18447
18481: POP
18482: POP
// end ;
18483: GO 18413
18485: POP
18486: POP
// if not result then
18487: LD_VAR 0 2
18491: NOT
18492: IFFALSE 18496
// exit ;
18494: GO 18644
// mech := result [ 1 ] ;
18496: LD_ADDR_VAR 0 5
18500: PUSH
18501: LD_VAR 0 2
18505: PUSH
18506: LD_INT 1
18508: ARRAY
18509: ST_TO_ADDR
// if result > 1 then
18510: LD_VAR 0 2
18514: PUSH
18515: LD_INT 1
18517: GREATER
18518: IFFALSE 18630
// begin for i = 2 to result do
18520: LD_ADDR_VAR 0 3
18524: PUSH
18525: DOUBLE
18526: LD_INT 2
18528: DEC
18529: ST_TO_ADDR
18530: LD_VAR 0 2
18534: PUSH
18535: FOR_TO
18536: IFFALSE 18628
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
18538: LD_ADDR_VAR 0 4
18542: PUSH
18543: LD_VAR 0 2
18547: PUSH
18548: LD_VAR 0 3
18552: ARRAY
18553: PPUSH
18554: LD_INT 3
18556: PPUSH
18557: CALL_OW 259
18561: PUSH
18562: LD_VAR 0 2
18566: PUSH
18567: LD_VAR 0 3
18571: ARRAY
18572: PPUSH
18573: CALL_OW 432
18577: MINUS
18578: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
18579: LD_VAR 0 4
18583: PUSH
18584: LD_VAR 0 5
18588: PPUSH
18589: LD_INT 3
18591: PPUSH
18592: CALL_OW 259
18596: PUSH
18597: LD_VAR 0 5
18601: PPUSH
18602: CALL_OW 432
18606: MINUS
18607: GREATEREQUAL
18608: IFFALSE 18626
// mech := result [ i ] ;
18610: LD_ADDR_VAR 0 5
18614: PUSH
18615: LD_VAR 0 2
18619: PUSH
18620: LD_VAR 0 3
18624: ARRAY
18625: ST_TO_ADDR
// end ;
18626: GO 18535
18628: POP
18629: POP
// end ; ComLinkTo ( vehicle , mech ) ;
18630: LD_VAR 0 1
18634: PPUSH
18635: LD_VAR 0 5
18639: PPUSH
18640: CALL_OW 135
// end ;
18644: LD_VAR 0 2
18648: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
18649: LD_INT 0
18651: PPUSH
18652: PPUSH
18653: PPUSH
18654: PPUSH
18655: PPUSH
18656: PPUSH
18657: PPUSH
18658: PPUSH
18659: PPUSH
18660: PPUSH
18661: PPUSH
18662: PPUSH
18663: PPUSH
// result := [ ] ;
18664: LD_ADDR_VAR 0 7
18668: PUSH
18669: EMPTY
18670: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
18671: LD_VAR 0 1
18675: PPUSH
18676: CALL_OW 266
18680: PUSH
18681: LD_INT 0
18683: PUSH
18684: LD_INT 1
18686: PUSH
18687: EMPTY
18688: LIST
18689: LIST
18690: IN
18691: NOT
18692: IFFALSE 18696
// exit ;
18694: GO 20336
// if name then
18696: LD_VAR 0 3
18700: IFFALSE 18716
// SetBName ( base_dep , name ) ;
18702: LD_VAR 0 1
18706: PPUSH
18707: LD_VAR 0 3
18711: PPUSH
18712: CALL_OW 500
// base := GetBase ( base_dep ) ;
18716: LD_ADDR_VAR 0 15
18720: PUSH
18721: LD_VAR 0 1
18725: PPUSH
18726: CALL_OW 274
18730: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
18731: LD_ADDR_VAR 0 16
18735: PUSH
18736: LD_VAR 0 1
18740: PPUSH
18741: CALL_OW 255
18745: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
18746: LD_ADDR_VAR 0 17
18750: PUSH
18751: LD_VAR 0 1
18755: PPUSH
18756: CALL_OW 248
18760: ST_TO_ADDR
// if sources then
18761: LD_VAR 0 5
18765: IFFALSE 18812
// for i = 1 to 3 do
18767: LD_ADDR_VAR 0 8
18771: PUSH
18772: DOUBLE
18773: LD_INT 1
18775: DEC
18776: ST_TO_ADDR
18777: LD_INT 3
18779: PUSH
18780: FOR_TO
18781: IFFALSE 18810
// AddResourceType ( base , i , sources [ i ] ) ;
18783: LD_VAR 0 15
18787: PPUSH
18788: LD_VAR 0 8
18792: PPUSH
18793: LD_VAR 0 5
18797: PUSH
18798: LD_VAR 0 8
18802: ARRAY
18803: PPUSH
18804: CALL_OW 276
18808: GO 18780
18810: POP
18811: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
18812: LD_ADDR_VAR 0 18
18816: PUSH
18817: LD_VAR 0 15
18821: PPUSH
18822: LD_VAR 0 2
18826: PPUSH
18827: LD_INT 1
18829: PPUSH
18830: CALL 18071 0 3
18834: ST_TO_ADDR
// InitHc ;
18835: CALL_OW 19
// InitUc ;
18839: CALL_OW 18
// uc_side := side ;
18843: LD_ADDR_OWVAR 20
18847: PUSH
18848: LD_VAR 0 16
18852: ST_TO_ADDR
// uc_nation := nation ;
18853: LD_ADDR_OWVAR 21
18857: PUSH
18858: LD_VAR 0 17
18862: ST_TO_ADDR
// if buildings then
18863: LD_VAR 0 18
18867: IFFALSE 20195
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
18869: LD_ADDR_VAR 0 19
18873: PUSH
18874: LD_VAR 0 18
18878: PPUSH
18879: LD_INT 2
18881: PUSH
18882: LD_INT 30
18884: PUSH
18885: LD_INT 29
18887: PUSH
18888: EMPTY
18889: LIST
18890: LIST
18891: PUSH
18892: LD_INT 30
18894: PUSH
18895: LD_INT 30
18897: PUSH
18898: EMPTY
18899: LIST
18900: LIST
18901: PUSH
18902: EMPTY
18903: LIST
18904: LIST
18905: LIST
18906: PPUSH
18907: CALL_OW 72
18911: ST_TO_ADDR
// if tmp then
18912: LD_VAR 0 19
18916: IFFALSE 18964
// for i in tmp do
18918: LD_ADDR_VAR 0 8
18922: PUSH
18923: LD_VAR 0 19
18927: PUSH
18928: FOR_IN
18929: IFFALSE 18962
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
18931: LD_VAR 0 8
18935: PPUSH
18936: CALL_OW 250
18940: PPUSH
18941: LD_VAR 0 8
18945: PPUSH
18946: CALL_OW 251
18950: PPUSH
18951: LD_VAR 0 16
18955: PPUSH
18956: CALL_OW 441
18960: GO 18928
18962: POP
18963: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
18964: LD_VAR 0 18
18968: PPUSH
18969: LD_INT 2
18971: PUSH
18972: LD_INT 30
18974: PUSH
18975: LD_INT 32
18977: PUSH
18978: EMPTY
18979: LIST
18980: LIST
18981: PUSH
18982: LD_INT 30
18984: PUSH
18985: LD_INT 33
18987: PUSH
18988: EMPTY
18989: LIST
18990: LIST
18991: PUSH
18992: EMPTY
18993: LIST
18994: LIST
18995: LIST
18996: PPUSH
18997: CALL_OW 72
19001: IFFALSE 19089
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
19003: LD_ADDR_VAR 0 8
19007: PUSH
19008: LD_VAR 0 18
19012: PPUSH
19013: LD_INT 2
19015: PUSH
19016: LD_INT 30
19018: PUSH
19019: LD_INT 32
19021: PUSH
19022: EMPTY
19023: LIST
19024: LIST
19025: PUSH
19026: LD_INT 30
19028: PUSH
19029: LD_INT 33
19031: PUSH
19032: EMPTY
19033: LIST
19034: LIST
19035: PUSH
19036: EMPTY
19037: LIST
19038: LIST
19039: LIST
19040: PPUSH
19041: CALL_OW 72
19045: PUSH
19046: FOR_IN
19047: IFFALSE 19087
// begin if not GetBWeapon ( i ) then
19049: LD_VAR 0 8
19053: PPUSH
19054: CALL_OW 269
19058: NOT
19059: IFFALSE 19085
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
19061: LD_VAR 0 8
19065: PPUSH
19066: LD_VAR 0 8
19070: PPUSH
19071: LD_VAR 0 2
19075: PPUSH
19076: CALL 20341 0 2
19080: PPUSH
19081: CALL_OW 431
// end ;
19085: GO 19046
19087: POP
19088: POP
// end ; for i = 1 to personel do
19089: LD_ADDR_VAR 0 8
19093: PUSH
19094: DOUBLE
19095: LD_INT 1
19097: DEC
19098: ST_TO_ADDR
19099: LD_VAR 0 6
19103: PUSH
19104: FOR_TO
19105: IFFALSE 20175
// begin if i > 4 then
19107: LD_VAR 0 8
19111: PUSH
19112: LD_INT 4
19114: GREATER
19115: IFFALSE 19119
// break ;
19117: GO 20175
// case i of 1 :
19119: LD_VAR 0 8
19123: PUSH
19124: LD_INT 1
19126: DOUBLE
19127: EQUAL
19128: IFTRUE 19132
19130: GO 19212
19132: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
19133: LD_ADDR_VAR 0 12
19137: PUSH
19138: LD_VAR 0 18
19142: PPUSH
19143: LD_INT 22
19145: PUSH
19146: LD_VAR 0 16
19150: PUSH
19151: EMPTY
19152: LIST
19153: LIST
19154: PUSH
19155: LD_INT 58
19157: PUSH
19158: EMPTY
19159: LIST
19160: PUSH
19161: LD_INT 2
19163: PUSH
19164: LD_INT 30
19166: PUSH
19167: LD_INT 32
19169: PUSH
19170: EMPTY
19171: LIST
19172: LIST
19173: PUSH
19174: LD_INT 30
19176: PUSH
19177: LD_INT 4
19179: PUSH
19180: EMPTY
19181: LIST
19182: LIST
19183: PUSH
19184: LD_INT 30
19186: PUSH
19187: LD_INT 5
19189: PUSH
19190: EMPTY
19191: LIST
19192: LIST
19193: PUSH
19194: EMPTY
19195: LIST
19196: LIST
19197: LIST
19198: LIST
19199: PUSH
19200: EMPTY
19201: LIST
19202: LIST
19203: LIST
19204: PPUSH
19205: CALL_OW 72
19209: ST_TO_ADDR
19210: GO 19434
19212: LD_INT 2
19214: DOUBLE
19215: EQUAL
19216: IFTRUE 19220
19218: GO 19282
19220: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
19221: LD_ADDR_VAR 0 12
19225: PUSH
19226: LD_VAR 0 18
19230: PPUSH
19231: LD_INT 22
19233: PUSH
19234: LD_VAR 0 16
19238: PUSH
19239: EMPTY
19240: LIST
19241: LIST
19242: PUSH
19243: LD_INT 2
19245: PUSH
19246: LD_INT 30
19248: PUSH
19249: LD_INT 0
19251: PUSH
19252: EMPTY
19253: LIST
19254: LIST
19255: PUSH
19256: LD_INT 30
19258: PUSH
19259: LD_INT 1
19261: PUSH
19262: EMPTY
19263: LIST
19264: LIST
19265: PUSH
19266: EMPTY
19267: LIST
19268: LIST
19269: LIST
19270: PUSH
19271: EMPTY
19272: LIST
19273: LIST
19274: PPUSH
19275: CALL_OW 72
19279: ST_TO_ADDR
19280: GO 19434
19282: LD_INT 3
19284: DOUBLE
19285: EQUAL
19286: IFTRUE 19290
19288: GO 19352
19290: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
19291: LD_ADDR_VAR 0 12
19295: PUSH
19296: LD_VAR 0 18
19300: PPUSH
19301: LD_INT 22
19303: PUSH
19304: LD_VAR 0 16
19308: PUSH
19309: EMPTY
19310: LIST
19311: LIST
19312: PUSH
19313: LD_INT 2
19315: PUSH
19316: LD_INT 30
19318: PUSH
19319: LD_INT 2
19321: PUSH
19322: EMPTY
19323: LIST
19324: LIST
19325: PUSH
19326: LD_INT 30
19328: PUSH
19329: LD_INT 3
19331: PUSH
19332: EMPTY
19333: LIST
19334: LIST
19335: PUSH
19336: EMPTY
19337: LIST
19338: LIST
19339: LIST
19340: PUSH
19341: EMPTY
19342: LIST
19343: LIST
19344: PPUSH
19345: CALL_OW 72
19349: ST_TO_ADDR
19350: GO 19434
19352: LD_INT 4
19354: DOUBLE
19355: EQUAL
19356: IFTRUE 19360
19358: GO 19433
19360: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
19361: LD_ADDR_VAR 0 12
19365: PUSH
19366: LD_VAR 0 18
19370: PPUSH
19371: LD_INT 22
19373: PUSH
19374: LD_VAR 0 16
19378: PUSH
19379: EMPTY
19380: LIST
19381: LIST
19382: PUSH
19383: LD_INT 2
19385: PUSH
19386: LD_INT 30
19388: PUSH
19389: LD_INT 6
19391: PUSH
19392: EMPTY
19393: LIST
19394: LIST
19395: PUSH
19396: LD_INT 30
19398: PUSH
19399: LD_INT 7
19401: PUSH
19402: EMPTY
19403: LIST
19404: LIST
19405: PUSH
19406: LD_INT 30
19408: PUSH
19409: LD_INT 8
19411: PUSH
19412: EMPTY
19413: LIST
19414: LIST
19415: PUSH
19416: EMPTY
19417: LIST
19418: LIST
19419: LIST
19420: LIST
19421: PUSH
19422: EMPTY
19423: LIST
19424: LIST
19425: PPUSH
19426: CALL_OW 72
19430: ST_TO_ADDR
19431: GO 19434
19433: POP
// if i = 1 then
19434: LD_VAR 0 8
19438: PUSH
19439: LD_INT 1
19441: EQUAL
19442: IFFALSE 19553
// begin tmp := [ ] ;
19444: LD_ADDR_VAR 0 19
19448: PUSH
19449: EMPTY
19450: ST_TO_ADDR
// for j in f do
19451: LD_ADDR_VAR 0 9
19455: PUSH
19456: LD_VAR 0 12
19460: PUSH
19461: FOR_IN
19462: IFFALSE 19535
// if GetBType ( j ) = b_bunker then
19464: LD_VAR 0 9
19468: PPUSH
19469: CALL_OW 266
19473: PUSH
19474: LD_INT 32
19476: EQUAL
19477: IFFALSE 19504
// tmp := Insert ( tmp , 1 , j ) else
19479: LD_ADDR_VAR 0 19
19483: PUSH
19484: LD_VAR 0 19
19488: PPUSH
19489: LD_INT 1
19491: PPUSH
19492: LD_VAR 0 9
19496: PPUSH
19497: CALL_OW 2
19501: ST_TO_ADDR
19502: GO 19533
// tmp := Insert ( tmp , tmp + 1 , j ) ;
19504: LD_ADDR_VAR 0 19
19508: PUSH
19509: LD_VAR 0 19
19513: PPUSH
19514: LD_VAR 0 19
19518: PUSH
19519: LD_INT 1
19521: PLUS
19522: PPUSH
19523: LD_VAR 0 9
19527: PPUSH
19528: CALL_OW 2
19532: ST_TO_ADDR
19533: GO 19461
19535: POP
19536: POP
// if tmp then
19537: LD_VAR 0 19
19541: IFFALSE 19553
// f := tmp ;
19543: LD_ADDR_VAR 0 12
19547: PUSH
19548: LD_VAR 0 19
19552: ST_TO_ADDR
// end ; x := personel [ i ] ;
19553: LD_ADDR_VAR 0 13
19557: PUSH
19558: LD_VAR 0 6
19562: PUSH
19563: LD_VAR 0 8
19567: ARRAY
19568: ST_TO_ADDR
// if x = - 1 then
19569: LD_VAR 0 13
19573: PUSH
19574: LD_INT 1
19576: NEG
19577: EQUAL
19578: IFFALSE 19789
// begin for j in f do
19580: LD_ADDR_VAR 0 9
19584: PUSH
19585: LD_VAR 0 12
19589: PUSH
19590: FOR_IN
19591: IFFALSE 19785
// repeat InitHc ;
19593: CALL_OW 19
// if GetBType ( j ) = b_barracks then
19597: LD_VAR 0 9
19601: PPUSH
19602: CALL_OW 266
19606: PUSH
19607: LD_INT 5
19609: EQUAL
19610: IFFALSE 19680
// begin if UnitsInside ( j ) < 3 then
19612: LD_VAR 0 9
19616: PPUSH
19617: CALL_OW 313
19621: PUSH
19622: LD_INT 3
19624: LESS
19625: IFFALSE 19661
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
19627: LD_INT 0
19629: PPUSH
19630: LD_INT 5
19632: PUSH
19633: LD_INT 8
19635: PUSH
19636: LD_INT 9
19638: PUSH
19639: EMPTY
19640: LIST
19641: LIST
19642: LIST
19643: PUSH
19644: LD_VAR 0 17
19648: ARRAY
19649: PPUSH
19650: LD_VAR 0 4
19654: PPUSH
19655: CALL_OW 380
19659: GO 19678
// PrepareHuman ( false , i , skill ) ;
19661: LD_INT 0
19663: PPUSH
19664: LD_VAR 0 8
19668: PPUSH
19669: LD_VAR 0 4
19673: PPUSH
19674: CALL_OW 380
// end else
19678: GO 19697
// PrepareHuman ( false , i , skill ) ;
19680: LD_INT 0
19682: PPUSH
19683: LD_VAR 0 8
19687: PPUSH
19688: LD_VAR 0 4
19692: PPUSH
19693: CALL_OW 380
// un := CreateHuman ;
19697: LD_ADDR_VAR 0 14
19701: PUSH
19702: CALL_OW 44
19706: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
19707: LD_ADDR_VAR 0 7
19711: PUSH
19712: LD_VAR 0 7
19716: PPUSH
19717: LD_INT 1
19719: PPUSH
19720: LD_VAR 0 14
19724: PPUSH
19725: CALL_OW 2
19729: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
19730: LD_VAR 0 14
19734: PPUSH
19735: LD_VAR 0 9
19739: PPUSH
19740: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
19744: LD_VAR 0 9
19748: PPUSH
19749: CALL_OW 313
19753: PUSH
19754: LD_INT 6
19756: EQUAL
19757: IFTRUE 19781
19759: PUSH
19760: LD_VAR 0 9
19764: PPUSH
19765: CALL_OW 266
19769: PUSH
19770: LD_INT 32
19772: PUSH
19773: LD_INT 31
19775: PUSH
19776: EMPTY
19777: LIST
19778: LIST
19779: IN
19780: OR
19781: IFFALSE 19593
19783: GO 19590
19785: POP
19786: POP
// end else
19787: GO 20173
// for j = 1 to x do
19789: LD_ADDR_VAR 0 9
19793: PUSH
19794: DOUBLE
19795: LD_INT 1
19797: DEC
19798: ST_TO_ADDR
19799: LD_VAR 0 13
19803: PUSH
19804: FOR_TO
19805: IFFALSE 20171
// begin InitHc ;
19807: CALL_OW 19
// if not f then
19811: LD_VAR 0 12
19815: NOT
19816: IFFALSE 19905
// begin PrepareHuman ( false , i , skill ) ;
19818: LD_INT 0
19820: PPUSH
19821: LD_VAR 0 8
19825: PPUSH
19826: LD_VAR 0 4
19830: PPUSH
19831: CALL_OW 380
// un := CreateHuman ;
19835: LD_ADDR_VAR 0 14
19839: PUSH
19840: CALL_OW 44
19844: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
19845: LD_ADDR_VAR 0 7
19849: PUSH
19850: LD_VAR 0 7
19854: PPUSH
19855: LD_INT 1
19857: PPUSH
19858: LD_VAR 0 14
19862: PPUSH
19863: CALL_OW 2
19867: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
19868: LD_VAR 0 14
19872: PPUSH
19873: LD_VAR 0 1
19877: PPUSH
19878: CALL_OW 250
19882: PPUSH
19883: LD_VAR 0 1
19887: PPUSH
19888: CALL_OW 251
19892: PPUSH
19893: LD_INT 10
19895: PPUSH
19896: LD_INT 0
19898: PPUSH
19899: CALL_OW 50
// continue ;
19903: GO 19804
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
19905: LD_VAR 0 12
19909: PUSH
19910: LD_INT 1
19912: ARRAY
19913: PPUSH
19914: CALL_OW 313
19918: IFFALSE 19946
19920: PUSH
19921: LD_VAR 0 12
19925: PUSH
19926: LD_INT 1
19928: ARRAY
19929: PPUSH
19930: CALL_OW 266
19934: PUSH
19935: LD_INT 32
19937: PUSH
19938: LD_INT 31
19940: PUSH
19941: EMPTY
19942: LIST
19943: LIST
19944: IN
19945: AND
19946: IFTRUE 19967
19948: PUSH
19949: LD_VAR 0 12
19953: PUSH
19954: LD_INT 1
19956: ARRAY
19957: PPUSH
19958: CALL_OW 313
19962: PUSH
19963: LD_INT 6
19965: EQUAL
19966: OR
19967: IFFALSE 19987
// f := Delete ( f , 1 ) ;
19969: LD_ADDR_VAR 0 12
19973: PUSH
19974: LD_VAR 0 12
19978: PPUSH
19979: LD_INT 1
19981: PPUSH
19982: CALL_OW 3
19986: ST_TO_ADDR
// if not f then
19987: LD_VAR 0 12
19991: NOT
19992: IFFALSE 20010
// begin x := x + 2 ;
19994: LD_ADDR_VAR 0 13
19998: PUSH
19999: LD_VAR 0 13
20003: PUSH
20004: LD_INT 2
20006: PLUS
20007: ST_TO_ADDR
// continue ;
20008: GO 19804
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
20010: LD_VAR 0 12
20014: PUSH
20015: LD_INT 1
20017: ARRAY
20018: PPUSH
20019: CALL_OW 266
20023: PUSH
20024: LD_INT 5
20026: EQUAL
20027: IFFALSE 20101
// begin if UnitsInside ( f [ 1 ] ) < 3 then
20029: LD_VAR 0 12
20033: PUSH
20034: LD_INT 1
20036: ARRAY
20037: PPUSH
20038: CALL_OW 313
20042: PUSH
20043: LD_INT 3
20045: LESS
20046: IFFALSE 20082
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
20048: LD_INT 0
20050: PPUSH
20051: LD_INT 5
20053: PUSH
20054: LD_INT 8
20056: PUSH
20057: LD_INT 9
20059: PUSH
20060: EMPTY
20061: LIST
20062: LIST
20063: LIST
20064: PUSH
20065: LD_VAR 0 17
20069: ARRAY
20070: PPUSH
20071: LD_VAR 0 4
20075: PPUSH
20076: CALL_OW 380
20080: GO 20099
// PrepareHuman ( false , i , skill ) ;
20082: LD_INT 0
20084: PPUSH
20085: LD_VAR 0 8
20089: PPUSH
20090: LD_VAR 0 4
20094: PPUSH
20095: CALL_OW 380
// end else
20099: GO 20118
// PrepareHuman ( false , i , skill ) ;
20101: LD_INT 0
20103: PPUSH
20104: LD_VAR 0 8
20108: PPUSH
20109: LD_VAR 0 4
20113: PPUSH
20114: CALL_OW 380
// un := CreateHuman ;
20118: LD_ADDR_VAR 0 14
20122: PUSH
20123: CALL_OW 44
20127: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
20128: LD_ADDR_VAR 0 7
20132: PUSH
20133: LD_VAR 0 7
20137: PPUSH
20138: LD_INT 1
20140: PPUSH
20141: LD_VAR 0 14
20145: PPUSH
20146: CALL_OW 2
20150: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
20151: LD_VAR 0 14
20155: PPUSH
20156: LD_VAR 0 12
20160: PUSH
20161: LD_INT 1
20163: ARRAY
20164: PPUSH
20165: CALL_OW 52
// end ;
20169: GO 19804
20171: POP
20172: POP
// end ;
20173: GO 19104
20175: POP
20176: POP
// result := result ^ buildings ;
20177: LD_ADDR_VAR 0 7
20181: PUSH
20182: LD_VAR 0 7
20186: PUSH
20187: LD_VAR 0 18
20191: ADD
20192: ST_TO_ADDR
// end else
20193: GO 20336
// begin for i = 1 to personel do
20195: LD_ADDR_VAR 0 8
20199: PUSH
20200: DOUBLE
20201: LD_INT 1
20203: DEC
20204: ST_TO_ADDR
20205: LD_VAR 0 6
20209: PUSH
20210: FOR_TO
20211: IFFALSE 20334
// begin if i > 4 then
20213: LD_VAR 0 8
20217: PUSH
20218: LD_INT 4
20220: GREATER
20221: IFFALSE 20225
// break ;
20223: GO 20334
// x := personel [ i ] ;
20225: LD_ADDR_VAR 0 13
20229: PUSH
20230: LD_VAR 0 6
20234: PUSH
20235: LD_VAR 0 8
20239: ARRAY
20240: ST_TO_ADDR
// if x = - 1 then
20241: LD_VAR 0 13
20245: PUSH
20246: LD_INT 1
20248: NEG
20249: EQUAL
20250: IFFALSE 20254
// continue ;
20252: GO 20210
// PrepareHuman ( false , i , skill ) ;
20254: LD_INT 0
20256: PPUSH
20257: LD_VAR 0 8
20261: PPUSH
20262: LD_VAR 0 4
20266: PPUSH
20267: CALL_OW 380
// un := CreateHuman ;
20271: LD_ADDR_VAR 0 14
20275: PUSH
20276: CALL_OW 44
20280: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
20281: LD_VAR 0 14
20285: PPUSH
20286: LD_VAR 0 1
20290: PPUSH
20291: CALL_OW 250
20295: PPUSH
20296: LD_VAR 0 1
20300: PPUSH
20301: CALL_OW 251
20305: PPUSH
20306: LD_INT 10
20308: PPUSH
20309: LD_INT 0
20311: PPUSH
20312: CALL_OW 50
// result := result ^ un ;
20316: LD_ADDR_VAR 0 7
20320: PUSH
20321: LD_VAR 0 7
20325: PUSH
20326: LD_VAR 0 14
20330: ADD
20331: ST_TO_ADDR
// end ;
20332: GO 20210
20334: POP
20335: POP
// end ; end ;
20336: LD_VAR 0 7
20340: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
20341: LD_INT 0
20343: PPUSH
20344: PPUSH
20345: PPUSH
20346: PPUSH
20347: PPUSH
20348: PPUSH
20349: PPUSH
20350: PPUSH
20351: PPUSH
20352: PPUSH
20353: PPUSH
20354: PPUSH
20355: PPUSH
20356: PPUSH
20357: PPUSH
20358: PPUSH
// result := false ;
20359: LD_ADDR_VAR 0 3
20363: PUSH
20364: LD_INT 0
20366: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
20367: LD_VAR 0 1
20371: NOT
20372: IFTRUE 20397
20374: PUSH
20375: LD_VAR 0 1
20379: PPUSH
20380: CALL_OW 266
20384: PUSH
20385: LD_INT 32
20387: PUSH
20388: LD_INT 33
20390: PUSH
20391: EMPTY
20392: LIST
20393: LIST
20394: IN
20395: NOT
20396: OR
20397: IFFALSE 20401
// exit ;
20399: GO 21536
// nat := GetNation ( tower ) ;
20401: LD_ADDR_VAR 0 12
20405: PUSH
20406: LD_VAR 0 1
20410: PPUSH
20411: CALL_OW 248
20415: ST_TO_ADDR
// side := GetSide ( tower ) ;
20416: LD_ADDR_VAR 0 16
20420: PUSH
20421: LD_VAR 0 1
20425: PPUSH
20426: CALL_OW 255
20430: ST_TO_ADDR
// x := GetX ( tower ) ;
20431: LD_ADDR_VAR 0 10
20435: PUSH
20436: LD_VAR 0 1
20440: PPUSH
20441: CALL_OW 250
20445: ST_TO_ADDR
// y := GetY ( tower ) ;
20446: LD_ADDR_VAR 0 11
20450: PUSH
20451: LD_VAR 0 1
20455: PPUSH
20456: CALL_OW 251
20460: ST_TO_ADDR
// if not x or not y then
20461: LD_VAR 0 10
20465: NOT
20466: IFTRUE 20475
20468: PUSH
20469: LD_VAR 0 11
20473: NOT
20474: OR
20475: IFFALSE 20479
// exit ;
20477: GO 21536
// weapon := 0 ;
20479: LD_ADDR_VAR 0 18
20483: PUSH
20484: LD_INT 0
20486: ST_TO_ADDR
// fac_list := [ ] ;
20487: LD_ADDR_VAR 0 17
20491: PUSH
20492: EMPTY
20493: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
20494: LD_ADDR_VAR 0 6
20498: PUSH
20499: LD_VAR 0 1
20503: PPUSH
20504: CALL_OW 274
20508: PPUSH
20509: LD_VAR 0 2
20513: PPUSH
20514: LD_INT 0
20516: PPUSH
20517: CALL 18071 0 3
20521: PPUSH
20522: LD_INT 30
20524: PUSH
20525: LD_INT 3
20527: PUSH
20528: EMPTY
20529: LIST
20530: LIST
20531: PPUSH
20532: CALL_OW 72
20536: ST_TO_ADDR
// if not factories then
20537: LD_VAR 0 6
20541: NOT
20542: IFFALSE 20546
// exit ;
20544: GO 21536
// for i in factories do
20546: LD_ADDR_VAR 0 8
20550: PUSH
20551: LD_VAR 0 6
20555: PUSH
20556: FOR_IN
20557: IFFALSE 20582
// fac_list := fac_list union AvailableWeaponList ( i ) ;
20559: LD_ADDR_VAR 0 17
20563: PUSH
20564: LD_VAR 0 17
20568: PUSH
20569: LD_VAR 0 8
20573: PPUSH
20574: CALL_OW 478
20578: UNION
20579: ST_TO_ADDR
20580: GO 20556
20582: POP
20583: POP
// if not fac_list then
20584: LD_VAR 0 17
20588: NOT
20589: IFFALSE 20593
// exit ;
20591: GO 21536
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
20593: LD_ADDR_VAR 0 5
20597: PUSH
20598: LD_INT 4
20600: PUSH
20601: LD_INT 5
20603: PUSH
20604: LD_INT 9
20606: PUSH
20607: LD_INT 10
20609: PUSH
20610: LD_INT 6
20612: PUSH
20613: LD_INT 7
20615: PUSH
20616: LD_INT 11
20618: PUSH
20619: EMPTY
20620: LIST
20621: LIST
20622: LIST
20623: LIST
20624: LIST
20625: LIST
20626: LIST
20627: PUSH
20628: LD_INT 27
20630: PUSH
20631: LD_INT 28
20633: PUSH
20634: LD_INT 26
20636: PUSH
20637: LD_INT 30
20639: PUSH
20640: EMPTY
20641: LIST
20642: LIST
20643: LIST
20644: LIST
20645: PUSH
20646: LD_INT 43
20648: PUSH
20649: LD_INT 44
20651: PUSH
20652: LD_INT 46
20654: PUSH
20655: LD_INT 45
20657: PUSH
20658: LD_INT 47
20660: PUSH
20661: LD_INT 49
20663: PUSH
20664: EMPTY
20665: LIST
20666: LIST
20667: LIST
20668: LIST
20669: LIST
20670: LIST
20671: PUSH
20672: EMPTY
20673: LIST
20674: LIST
20675: LIST
20676: PUSH
20677: LD_VAR 0 12
20681: ARRAY
20682: ST_TO_ADDR
// list := list isect fac_list ;
20683: LD_ADDR_VAR 0 5
20687: PUSH
20688: LD_VAR 0 5
20692: PUSH
20693: LD_VAR 0 17
20697: ISECT
20698: ST_TO_ADDR
// if not list then
20699: LD_VAR 0 5
20703: NOT
20704: IFFALSE 20708
// exit ;
20706: GO 21536
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
20708: LD_VAR 0 12
20712: PUSH
20713: LD_INT 3
20715: EQUAL
20716: IFFALSE 20728
20718: PUSH
20719: LD_INT 49
20721: PUSH
20722: LD_VAR 0 5
20726: IN
20727: AND
20728: IFFALSE 20748
20730: PUSH
20731: LD_INT 31
20733: PPUSH
20734: LD_VAR 0 16
20738: PPUSH
20739: CALL_OW 321
20743: PUSH
20744: LD_INT 2
20746: EQUAL
20747: AND
20748: IFFALSE 20808
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
20750: LD_INT 22
20752: PUSH
20753: LD_VAR 0 16
20757: PUSH
20758: EMPTY
20759: LIST
20760: LIST
20761: PUSH
20762: LD_INT 35
20764: PUSH
20765: LD_INT 49
20767: PUSH
20768: EMPTY
20769: LIST
20770: LIST
20771: PUSH
20772: LD_INT 91
20774: PUSH
20775: LD_VAR 0 1
20779: PUSH
20780: LD_INT 10
20782: PUSH
20783: EMPTY
20784: LIST
20785: LIST
20786: LIST
20787: PUSH
20788: EMPTY
20789: LIST
20790: LIST
20791: LIST
20792: PPUSH
20793: CALL_OW 69
20797: NOT
20798: IFFALSE 20808
// weapon := ru_time_lapser ;
20800: LD_ADDR_VAR 0 18
20804: PUSH
20805: LD_INT 49
20807: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
20808: LD_VAR 0 12
20812: PUSH
20813: LD_INT 1
20815: PUSH
20816: LD_INT 2
20818: PUSH
20819: EMPTY
20820: LIST
20821: LIST
20822: IN
20823: IFFALSE 20847
20825: PUSH
20826: LD_INT 11
20828: PUSH
20829: LD_VAR 0 5
20833: IN
20834: IFTRUE 20846
20836: PUSH
20837: LD_INT 30
20839: PUSH
20840: LD_VAR 0 5
20844: IN
20845: OR
20846: AND
20847: IFFALSE 20867
20849: PUSH
20850: LD_INT 6
20852: PPUSH
20853: LD_VAR 0 16
20857: PPUSH
20858: CALL_OW 321
20862: PUSH
20863: LD_INT 2
20865: EQUAL
20866: AND
20867: IFFALSE 21034
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
20869: LD_INT 22
20871: PUSH
20872: LD_VAR 0 16
20876: PUSH
20877: EMPTY
20878: LIST
20879: LIST
20880: PUSH
20881: LD_INT 2
20883: PUSH
20884: LD_INT 35
20886: PUSH
20887: LD_INT 11
20889: PUSH
20890: EMPTY
20891: LIST
20892: LIST
20893: PUSH
20894: LD_INT 35
20896: PUSH
20897: LD_INT 30
20899: PUSH
20900: EMPTY
20901: LIST
20902: LIST
20903: PUSH
20904: EMPTY
20905: LIST
20906: LIST
20907: LIST
20908: PUSH
20909: LD_INT 91
20911: PUSH
20912: LD_VAR 0 1
20916: PUSH
20917: LD_INT 18
20919: PUSH
20920: EMPTY
20921: LIST
20922: LIST
20923: LIST
20924: PUSH
20925: EMPTY
20926: LIST
20927: LIST
20928: LIST
20929: PPUSH
20930: CALL_OW 69
20934: NOT
20935: IFFALSE 21011
20937: PUSH
20938: LD_INT 22
20940: PUSH
20941: LD_VAR 0 16
20945: PUSH
20946: EMPTY
20947: LIST
20948: LIST
20949: PUSH
20950: LD_INT 2
20952: PUSH
20953: LD_INT 30
20955: PUSH
20956: LD_INT 32
20958: PUSH
20959: EMPTY
20960: LIST
20961: LIST
20962: PUSH
20963: LD_INT 30
20965: PUSH
20966: LD_INT 33
20968: PUSH
20969: EMPTY
20970: LIST
20971: LIST
20972: PUSH
20973: EMPTY
20974: LIST
20975: LIST
20976: LIST
20977: PUSH
20978: LD_INT 91
20980: PUSH
20981: LD_VAR 0 1
20985: PUSH
20986: LD_INT 12
20988: PUSH
20989: EMPTY
20990: LIST
20991: LIST
20992: LIST
20993: PUSH
20994: EMPTY
20995: LIST
20996: LIST
20997: LIST
20998: PUSH
20999: EMPTY
21000: LIST
21001: PPUSH
21002: CALL_OW 69
21006: PUSH
21007: LD_INT 2
21009: GREATER
21010: AND
21011: IFFALSE 21034
// weapon := [ us_radar , ar_radar ] [ nat ] ;
21013: LD_ADDR_VAR 0 18
21017: PUSH
21018: LD_INT 11
21020: PUSH
21021: LD_INT 30
21023: PUSH
21024: EMPTY
21025: LIST
21026: LIST
21027: PUSH
21028: LD_VAR 0 12
21032: ARRAY
21033: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
21034: LD_VAR 0 18
21038: NOT
21039: IFFALSE 21059
21041: PUSH
21042: LD_INT 40
21044: PPUSH
21045: LD_VAR 0 16
21049: PPUSH
21050: CALL_OW 321
21054: PUSH
21055: LD_INT 2
21057: EQUAL
21058: AND
21059: IFFALSE 21095
21061: PUSH
21062: LD_INT 7
21064: PUSH
21065: LD_VAR 0 5
21069: IN
21070: IFTRUE 21082
21072: PUSH
21073: LD_INT 28
21075: PUSH
21076: LD_VAR 0 5
21080: IN
21081: OR
21082: IFTRUE 21094
21084: PUSH
21085: LD_INT 45
21087: PUSH
21088: LD_VAR 0 5
21092: IN
21093: OR
21094: AND
21095: IFFALSE 21349
// begin hex := GetHexInfo ( x , y ) ;
21097: LD_ADDR_VAR 0 4
21101: PUSH
21102: LD_VAR 0 10
21106: PPUSH
21107: LD_VAR 0 11
21111: PPUSH
21112: CALL_OW 546
21116: ST_TO_ADDR
// if hex [ 1 ] then
21117: LD_VAR 0 4
21121: PUSH
21122: LD_INT 1
21124: ARRAY
21125: IFFALSE 21129
// exit ;
21127: GO 21536
// height := hex [ 2 ] ;
21129: LD_ADDR_VAR 0 15
21133: PUSH
21134: LD_VAR 0 4
21138: PUSH
21139: LD_INT 2
21141: ARRAY
21142: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
21143: LD_ADDR_VAR 0 14
21147: PUSH
21148: LD_INT 0
21150: PUSH
21151: LD_INT 2
21153: PUSH
21154: LD_INT 3
21156: PUSH
21157: LD_INT 5
21159: PUSH
21160: EMPTY
21161: LIST
21162: LIST
21163: LIST
21164: LIST
21165: ST_TO_ADDR
// for i in tmp do
21166: LD_ADDR_VAR 0 8
21170: PUSH
21171: LD_VAR 0 14
21175: PUSH
21176: FOR_IN
21177: IFFALSE 21347
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
21179: LD_ADDR_VAR 0 9
21183: PUSH
21184: LD_VAR 0 10
21188: PPUSH
21189: LD_VAR 0 8
21193: PPUSH
21194: LD_INT 5
21196: PPUSH
21197: CALL_OW 272
21201: PUSH
21202: LD_VAR 0 11
21206: PPUSH
21207: LD_VAR 0 8
21211: PPUSH
21212: LD_INT 5
21214: PPUSH
21215: CALL_OW 273
21219: PUSH
21220: EMPTY
21221: LIST
21222: LIST
21223: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
21224: LD_VAR 0 9
21228: PUSH
21229: LD_INT 1
21231: ARRAY
21232: PPUSH
21233: LD_VAR 0 9
21237: PUSH
21238: LD_INT 2
21240: ARRAY
21241: PPUSH
21242: CALL_OW 488
21246: IFFALSE 21345
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
21248: LD_ADDR_VAR 0 4
21252: PUSH
21253: LD_VAR 0 9
21257: PUSH
21258: LD_INT 1
21260: ARRAY
21261: PPUSH
21262: LD_VAR 0 9
21266: PUSH
21267: LD_INT 2
21269: ARRAY
21270: PPUSH
21271: CALL_OW 546
21275: ST_TO_ADDR
// if hex [ 1 ] then
21276: LD_VAR 0 4
21280: PUSH
21281: LD_INT 1
21283: ARRAY
21284: IFFALSE 21288
// continue ;
21286: GO 21176
// h := hex [ 2 ] ;
21288: LD_ADDR_VAR 0 13
21292: PUSH
21293: LD_VAR 0 4
21297: PUSH
21298: LD_INT 2
21300: ARRAY
21301: ST_TO_ADDR
// if h + 7 < height then
21302: LD_VAR 0 13
21306: PUSH
21307: LD_INT 7
21309: PLUS
21310: PUSH
21311: LD_VAR 0 15
21315: LESS
21316: IFFALSE 21345
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
21318: LD_ADDR_VAR 0 18
21322: PUSH
21323: LD_INT 7
21325: PUSH
21326: LD_INT 28
21328: PUSH
21329: LD_INT 45
21331: PUSH
21332: EMPTY
21333: LIST
21334: LIST
21335: LIST
21336: PUSH
21337: LD_VAR 0 12
21341: ARRAY
21342: ST_TO_ADDR
// break ;
21343: GO 21347
// end ; end ; end ;
21345: GO 21176
21347: POP
21348: POP
// end ; if not weapon then
21349: LD_VAR 0 18
21353: NOT
21354: IFFALSE 21414
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
21356: LD_ADDR_VAR 0 5
21360: PUSH
21361: LD_VAR 0 5
21365: PUSH
21366: LD_INT 11
21368: PUSH
21369: LD_INT 30
21371: PUSH
21372: LD_INT 49
21374: PUSH
21375: EMPTY
21376: LIST
21377: LIST
21378: LIST
21379: DIFF
21380: ST_TO_ADDR
// if not list then
21381: LD_VAR 0 5
21385: NOT
21386: IFFALSE 21390
// exit ;
21388: GO 21536
// weapon := list [ rand ( 1 , list ) ] ;
21390: LD_ADDR_VAR 0 18
21394: PUSH
21395: LD_VAR 0 5
21399: PUSH
21400: LD_INT 1
21402: PPUSH
21403: LD_VAR 0 5
21407: PPUSH
21408: CALL_OW 12
21412: ARRAY
21413: ST_TO_ADDR
// end ; if weapon then
21414: LD_VAR 0 18
21418: IFFALSE 21536
// begin tmp := CostOfWeapon ( weapon ) ;
21420: LD_ADDR_VAR 0 14
21424: PUSH
21425: LD_VAR 0 18
21429: PPUSH
21430: CALL_OW 451
21434: ST_TO_ADDR
// j := GetBase ( tower ) ;
21435: LD_ADDR_VAR 0 9
21439: PUSH
21440: LD_VAR 0 1
21444: PPUSH
21445: CALL_OW 274
21449: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
21450: LD_VAR 0 9
21454: PPUSH
21455: LD_INT 1
21457: PPUSH
21458: CALL_OW 275
21462: PUSH
21463: LD_VAR 0 14
21467: PUSH
21468: LD_INT 1
21470: ARRAY
21471: GREATEREQUAL
21472: IFFALSE 21498
21474: PUSH
21475: LD_VAR 0 9
21479: PPUSH
21480: LD_INT 2
21482: PPUSH
21483: CALL_OW 275
21487: PUSH
21488: LD_VAR 0 14
21492: PUSH
21493: LD_INT 2
21495: ARRAY
21496: GREATEREQUAL
21497: AND
21498: IFFALSE 21524
21500: PUSH
21501: LD_VAR 0 9
21505: PPUSH
21506: LD_INT 3
21508: PPUSH
21509: CALL_OW 275
21513: PUSH
21514: LD_VAR 0 14
21518: PUSH
21519: LD_INT 3
21521: ARRAY
21522: GREATEREQUAL
21523: AND
21524: IFFALSE 21536
// result := weapon ;
21526: LD_ADDR_VAR 0 3
21530: PUSH
21531: LD_VAR 0 18
21535: ST_TO_ADDR
// end ; end ;
21536: LD_VAR 0 3
21540: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
21541: LD_INT 0
21543: PPUSH
21544: PPUSH
// result := true ;
21545: LD_ADDR_VAR 0 3
21549: PUSH
21550: LD_INT 1
21552: ST_TO_ADDR
// if array1 = array2 then
21553: LD_VAR 0 1
21557: PUSH
21558: LD_VAR 0 2
21562: EQUAL
21563: IFFALSE 21623
// begin for i = 1 to array1 do
21565: LD_ADDR_VAR 0 4
21569: PUSH
21570: DOUBLE
21571: LD_INT 1
21573: DEC
21574: ST_TO_ADDR
21575: LD_VAR 0 1
21579: PUSH
21580: FOR_TO
21581: IFFALSE 21619
// if array1 [ i ] <> array2 [ i ] then
21583: LD_VAR 0 1
21587: PUSH
21588: LD_VAR 0 4
21592: ARRAY
21593: PUSH
21594: LD_VAR 0 2
21598: PUSH
21599: LD_VAR 0 4
21603: ARRAY
21604: NONEQUAL
21605: IFFALSE 21617
// begin result := false ;
21607: LD_ADDR_VAR 0 3
21611: PUSH
21612: LD_INT 0
21614: ST_TO_ADDR
// break ;
21615: GO 21619
// end ;
21617: GO 21580
21619: POP
21620: POP
// end else
21621: GO 21631
// result := false ;
21623: LD_ADDR_VAR 0 3
21627: PUSH
21628: LD_INT 0
21630: ST_TO_ADDR
// end ;
21631: LD_VAR 0 3
21635: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
21636: LD_INT 0
21638: PPUSH
21639: PPUSH
// if not array1 or not array2 then
21640: LD_VAR 0 1
21644: NOT
21645: IFTRUE 21654
21647: PUSH
21648: LD_VAR 0 2
21652: NOT
21653: OR
21654: IFFALSE 21658
// exit ;
21656: GO 21722
// result := true ;
21658: LD_ADDR_VAR 0 3
21662: PUSH
21663: LD_INT 1
21665: ST_TO_ADDR
// for i = 1 to array1 do
21666: LD_ADDR_VAR 0 4
21670: PUSH
21671: DOUBLE
21672: LD_INT 1
21674: DEC
21675: ST_TO_ADDR
21676: LD_VAR 0 1
21680: PUSH
21681: FOR_TO
21682: IFFALSE 21720
// if array1 [ i ] <> array2 [ i ] then
21684: LD_VAR 0 1
21688: PUSH
21689: LD_VAR 0 4
21693: ARRAY
21694: PUSH
21695: LD_VAR 0 2
21699: PUSH
21700: LD_VAR 0 4
21704: ARRAY
21705: NONEQUAL
21706: IFFALSE 21718
// begin result := false ;
21708: LD_ADDR_VAR 0 3
21712: PUSH
21713: LD_INT 0
21715: ST_TO_ADDR
// break ;
21716: GO 21720
// end ;
21718: GO 21681
21720: POP
21721: POP
// end ;
21722: LD_VAR 0 3
21726: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
21727: LD_INT 0
21729: PPUSH
21730: PPUSH
21731: PPUSH
// pom := GetBase ( fac ) ;
21732: LD_ADDR_VAR 0 5
21736: PUSH
21737: LD_VAR 0 1
21741: PPUSH
21742: CALL_OW 274
21746: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
21747: LD_ADDR_VAR 0 4
21751: PUSH
21752: LD_VAR 0 2
21756: PUSH
21757: LD_INT 1
21759: ARRAY
21760: PPUSH
21761: LD_VAR 0 2
21765: PUSH
21766: LD_INT 2
21768: ARRAY
21769: PPUSH
21770: LD_VAR 0 2
21774: PUSH
21775: LD_INT 3
21777: ARRAY
21778: PPUSH
21779: LD_VAR 0 2
21783: PUSH
21784: LD_INT 4
21786: ARRAY
21787: PPUSH
21788: CALL_OW 449
21792: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
21793: LD_ADDR_VAR 0 3
21797: PUSH
21798: LD_VAR 0 5
21802: PPUSH
21803: LD_INT 1
21805: PPUSH
21806: CALL_OW 275
21810: PUSH
21811: LD_VAR 0 4
21815: PUSH
21816: LD_INT 1
21818: ARRAY
21819: GREATEREQUAL
21820: IFFALSE 21846
21822: PUSH
21823: LD_VAR 0 5
21827: PPUSH
21828: LD_INT 2
21830: PPUSH
21831: CALL_OW 275
21835: PUSH
21836: LD_VAR 0 4
21840: PUSH
21841: LD_INT 2
21843: ARRAY
21844: GREATEREQUAL
21845: AND
21846: IFFALSE 21872
21848: PUSH
21849: LD_VAR 0 5
21853: PPUSH
21854: LD_INT 3
21856: PPUSH
21857: CALL_OW 275
21861: PUSH
21862: LD_VAR 0 4
21866: PUSH
21867: LD_INT 3
21869: ARRAY
21870: GREATEREQUAL
21871: AND
21872: ST_TO_ADDR
// end ;
21873: LD_VAR 0 3
21877: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
21878: LD_INT 0
21880: PPUSH
21881: PPUSH
21882: PPUSH
21883: PPUSH
// pom := GetBase ( building ) ;
21884: LD_ADDR_VAR 0 3
21888: PUSH
21889: LD_VAR 0 1
21893: PPUSH
21894: CALL_OW 274
21898: ST_TO_ADDR
// if not pom then
21899: LD_VAR 0 3
21903: NOT
21904: IFFALSE 21908
// exit ;
21906: GO 22082
// btype := GetBType ( building ) ;
21908: LD_ADDR_VAR 0 5
21912: PUSH
21913: LD_VAR 0 1
21917: PPUSH
21918: CALL_OW 266
21922: ST_TO_ADDR
// if btype = b_armoury then
21923: LD_VAR 0 5
21927: PUSH
21928: LD_INT 4
21930: EQUAL
21931: IFFALSE 21941
// btype := b_barracks ;
21933: LD_ADDR_VAR 0 5
21937: PUSH
21938: LD_INT 5
21940: ST_TO_ADDR
// if btype = b_depot then
21941: LD_VAR 0 5
21945: PUSH
21946: LD_INT 0
21948: EQUAL
21949: IFFALSE 21959
// btype := b_warehouse ;
21951: LD_ADDR_VAR 0 5
21955: PUSH
21956: LD_INT 1
21958: ST_TO_ADDR
// if btype = b_workshop then
21959: LD_VAR 0 5
21963: PUSH
21964: LD_INT 2
21966: EQUAL
21967: IFFALSE 21977
// btype := b_factory ;
21969: LD_ADDR_VAR 0 5
21973: PUSH
21974: LD_INT 3
21976: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
21977: LD_ADDR_VAR 0 4
21981: PUSH
21982: LD_VAR 0 5
21986: PPUSH
21987: LD_VAR 0 1
21991: PPUSH
21992: CALL_OW 248
21996: PPUSH
21997: CALL_OW 450
22001: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
22002: LD_ADDR_VAR 0 2
22006: PUSH
22007: LD_VAR 0 3
22011: PPUSH
22012: LD_INT 1
22014: PPUSH
22015: CALL_OW 275
22019: PUSH
22020: LD_VAR 0 4
22024: PUSH
22025: LD_INT 1
22027: ARRAY
22028: GREATEREQUAL
22029: IFFALSE 22055
22031: PUSH
22032: LD_VAR 0 3
22036: PPUSH
22037: LD_INT 2
22039: PPUSH
22040: CALL_OW 275
22044: PUSH
22045: LD_VAR 0 4
22049: PUSH
22050: LD_INT 2
22052: ARRAY
22053: GREATEREQUAL
22054: AND
22055: IFFALSE 22081
22057: PUSH
22058: LD_VAR 0 3
22062: PPUSH
22063: LD_INT 3
22065: PPUSH
22066: CALL_OW 275
22070: PUSH
22071: LD_VAR 0 4
22075: PUSH
22076: LD_INT 3
22078: ARRAY
22079: GREATEREQUAL
22080: AND
22081: ST_TO_ADDR
// end ;
22082: LD_VAR 0 2
22086: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
22087: LD_INT 0
22089: PPUSH
22090: PPUSH
22091: PPUSH
// pom := GetBase ( building ) ;
22092: LD_ADDR_VAR 0 4
22096: PUSH
22097: LD_VAR 0 1
22101: PPUSH
22102: CALL_OW 274
22106: ST_TO_ADDR
// if not pom then
22107: LD_VAR 0 4
22111: NOT
22112: IFFALSE 22116
// exit ;
22114: GO 22221
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
22116: LD_ADDR_VAR 0 5
22120: PUSH
22121: LD_VAR 0 2
22125: PPUSH
22126: LD_VAR 0 1
22130: PPUSH
22131: CALL_OW 248
22135: PPUSH
22136: CALL_OW 450
22140: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
22141: LD_ADDR_VAR 0 3
22145: PUSH
22146: LD_VAR 0 4
22150: PPUSH
22151: LD_INT 1
22153: PPUSH
22154: CALL_OW 275
22158: PUSH
22159: LD_VAR 0 5
22163: PUSH
22164: LD_INT 1
22166: ARRAY
22167: GREATEREQUAL
22168: IFFALSE 22194
22170: PUSH
22171: LD_VAR 0 4
22175: PPUSH
22176: LD_INT 2
22178: PPUSH
22179: CALL_OW 275
22183: PUSH
22184: LD_VAR 0 5
22188: PUSH
22189: LD_INT 2
22191: ARRAY
22192: GREATEREQUAL
22193: AND
22194: IFFALSE 22220
22196: PUSH
22197: LD_VAR 0 4
22201: PPUSH
22202: LD_INT 3
22204: PPUSH
22205: CALL_OW 275
22209: PUSH
22210: LD_VAR 0 5
22214: PUSH
22215: LD_INT 3
22217: ARRAY
22218: GREATEREQUAL
22219: AND
22220: ST_TO_ADDR
// end ;
22221: LD_VAR 0 3
22225: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
22226: LD_INT 0
22228: PPUSH
22229: PPUSH
22230: PPUSH
22231: PPUSH
22232: PPUSH
22233: PPUSH
22234: PPUSH
22235: PPUSH
22236: PPUSH
22237: PPUSH
22238: PPUSH
// result := false ;
22239: LD_ADDR_VAR 0 8
22243: PUSH
22244: LD_INT 0
22246: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
22247: LD_VAR 0 5
22251: NOT
22252: IFTRUE 22261
22254: PUSH
22255: LD_VAR 0 1
22259: NOT
22260: OR
22261: IFTRUE 22270
22263: PUSH
22264: LD_VAR 0 2
22268: NOT
22269: OR
22270: IFTRUE 22279
22272: PUSH
22273: LD_VAR 0 3
22277: NOT
22278: OR
22279: IFFALSE 22283
// exit ;
22281: GO 23109
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
22283: LD_ADDR_VAR 0 14
22287: PUSH
22288: LD_VAR 0 1
22292: PPUSH
22293: LD_VAR 0 2
22297: PPUSH
22298: LD_VAR 0 3
22302: PPUSH
22303: LD_VAR 0 4
22307: PPUSH
22308: LD_VAR 0 5
22312: PUSH
22313: LD_INT 1
22315: ARRAY
22316: PPUSH
22317: CALL_OW 248
22321: PPUSH
22322: LD_INT 0
22324: PPUSH
22325: CALL 24390 0 6
22329: ST_TO_ADDR
// if not hexes then
22330: LD_VAR 0 14
22334: NOT
22335: IFFALSE 22339
// exit ;
22337: GO 23109
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
22339: LD_ADDR_VAR 0 17
22343: PUSH
22344: LD_VAR 0 5
22348: PPUSH
22349: LD_INT 22
22351: PUSH
22352: LD_VAR 0 13
22356: PPUSH
22357: CALL_OW 255
22361: PUSH
22362: EMPTY
22363: LIST
22364: LIST
22365: PUSH
22366: LD_INT 2
22368: PUSH
22369: LD_INT 30
22371: PUSH
22372: LD_INT 0
22374: PUSH
22375: EMPTY
22376: LIST
22377: LIST
22378: PUSH
22379: LD_INT 30
22381: PUSH
22382: LD_INT 1
22384: PUSH
22385: EMPTY
22386: LIST
22387: LIST
22388: PUSH
22389: EMPTY
22390: LIST
22391: LIST
22392: LIST
22393: PUSH
22394: EMPTY
22395: LIST
22396: LIST
22397: PPUSH
22398: CALL_OW 72
22402: ST_TO_ADDR
// for i = 1 to hexes do
22403: LD_ADDR_VAR 0 9
22407: PUSH
22408: DOUBLE
22409: LD_INT 1
22411: DEC
22412: ST_TO_ADDR
22413: LD_VAR 0 14
22417: PUSH
22418: FOR_TO
22419: IFFALSE 23107
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
22421: LD_ADDR_VAR 0 13
22425: PUSH
22426: LD_VAR 0 14
22430: PUSH
22431: LD_VAR 0 9
22435: ARRAY
22436: PUSH
22437: LD_INT 1
22439: ARRAY
22440: PPUSH
22441: LD_VAR 0 14
22445: PUSH
22446: LD_VAR 0 9
22450: ARRAY
22451: PUSH
22452: LD_INT 2
22454: ARRAY
22455: PPUSH
22456: CALL_OW 428
22460: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
22461: LD_VAR 0 14
22465: PUSH
22466: LD_VAR 0 9
22470: ARRAY
22471: PUSH
22472: LD_INT 1
22474: ARRAY
22475: PPUSH
22476: LD_VAR 0 14
22480: PUSH
22481: LD_VAR 0 9
22485: ARRAY
22486: PUSH
22487: LD_INT 2
22489: ARRAY
22490: PPUSH
22491: CALL_OW 351
22495: IFTRUE 22534
22497: PUSH
22498: LD_VAR 0 14
22502: PUSH
22503: LD_VAR 0 9
22507: ARRAY
22508: PUSH
22509: LD_INT 1
22511: ARRAY
22512: PPUSH
22513: LD_VAR 0 14
22517: PUSH
22518: LD_VAR 0 9
22522: ARRAY
22523: PUSH
22524: LD_INT 2
22526: ARRAY
22527: PPUSH
22528: CALL_OW 488
22532: NOT
22533: OR
22534: IFTRUE 22551
22536: PUSH
22537: LD_VAR 0 13
22541: PPUSH
22542: CALL_OW 247
22546: PUSH
22547: LD_INT 3
22549: EQUAL
22550: OR
22551: IFFALSE 22557
// exit ;
22553: POP
22554: POP
22555: GO 23109
// if not tmp then
22557: LD_VAR 0 13
22561: NOT
22562: IFFALSE 22566
// continue ;
22564: GO 22418
// result := true ;
22566: LD_ADDR_VAR 0 8
22570: PUSH
22571: LD_INT 1
22573: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
22574: LD_VAR 0 6
22578: IFFALSE 22595
22580: PUSH
22581: LD_VAR 0 13
22585: PPUSH
22586: CALL_OW 247
22590: PUSH
22591: LD_INT 2
22593: EQUAL
22594: AND
22595: IFFALSE 22612
22597: PUSH
22598: LD_VAR 0 13
22602: PPUSH
22603: CALL_OW 263
22607: PUSH
22608: LD_INT 1
22610: EQUAL
22611: AND
22612: IFFALSE 22776
// begin if IsDrivenBy ( tmp ) then
22614: LD_VAR 0 13
22618: PPUSH
22619: CALL_OW 311
22623: IFFALSE 22627
// continue ;
22625: GO 22418
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
22627: LD_VAR 0 6
22631: PPUSH
22632: LD_INT 3
22634: PUSH
22635: LD_INT 60
22637: PUSH
22638: EMPTY
22639: LIST
22640: PUSH
22641: EMPTY
22642: LIST
22643: LIST
22644: PUSH
22645: LD_INT 3
22647: PUSH
22648: LD_INT 55
22650: PUSH
22651: EMPTY
22652: LIST
22653: PUSH
22654: EMPTY
22655: LIST
22656: LIST
22657: PUSH
22658: EMPTY
22659: LIST
22660: LIST
22661: PPUSH
22662: CALL_OW 72
22666: IFFALSE 22774
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
22668: LD_ADDR_VAR 0 18
22672: PUSH
22673: LD_VAR 0 6
22677: PPUSH
22678: LD_INT 3
22680: PUSH
22681: LD_INT 60
22683: PUSH
22684: EMPTY
22685: LIST
22686: PUSH
22687: EMPTY
22688: LIST
22689: LIST
22690: PUSH
22691: LD_INT 3
22693: PUSH
22694: LD_INT 55
22696: PUSH
22697: EMPTY
22698: LIST
22699: PUSH
22700: EMPTY
22701: LIST
22702: LIST
22703: PUSH
22704: EMPTY
22705: LIST
22706: LIST
22707: PPUSH
22708: CALL_OW 72
22712: PUSH
22713: LD_INT 1
22715: ARRAY
22716: ST_TO_ADDR
// if IsInUnit ( driver ) then
22717: LD_VAR 0 18
22721: PPUSH
22722: CALL_OW 310
22726: IFFALSE 22737
// ComExit ( driver ) ;
22728: LD_VAR 0 18
22732: PPUSH
22733: CALL 48380 0 1
// AddComEnterUnit ( driver , tmp ) ;
22737: LD_VAR 0 18
22741: PPUSH
22742: LD_VAR 0 13
22746: PPUSH
22747: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
22751: LD_VAR 0 18
22755: PPUSH
22756: LD_VAR 0 7
22760: PPUSH
22761: CALL_OW 173
// AddComExitVehicle ( driver ) ;
22765: LD_VAR 0 18
22769: PPUSH
22770: CALL_OW 181
// end ; continue ;
22774: GO 22418
// end ; if not cleaners or not tmp in cleaners then
22776: LD_VAR 0 6
22780: NOT
22781: IFTRUE 22796
22783: PUSH
22784: LD_VAR 0 13
22788: PUSH
22789: LD_VAR 0 6
22793: IN
22794: NOT
22795: OR
22796: IFFALSE 23105
// begin if dep then
22798: LD_VAR 0 17
22802: IFFALSE 22938
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
22804: LD_ADDR_VAR 0 16
22808: PUSH
22809: LD_VAR 0 17
22813: PUSH
22814: LD_INT 1
22816: ARRAY
22817: PPUSH
22818: CALL_OW 250
22822: PPUSH
22823: LD_VAR 0 17
22827: PUSH
22828: LD_INT 1
22830: ARRAY
22831: PPUSH
22832: CALL_OW 254
22836: PPUSH
22837: LD_INT 5
22839: PPUSH
22840: CALL_OW 272
22844: PUSH
22845: LD_VAR 0 17
22849: PUSH
22850: LD_INT 1
22852: ARRAY
22853: PPUSH
22854: CALL_OW 251
22858: PPUSH
22859: LD_VAR 0 17
22863: PUSH
22864: LD_INT 1
22866: ARRAY
22867: PPUSH
22868: CALL_OW 254
22872: PPUSH
22873: LD_INT 5
22875: PPUSH
22876: CALL_OW 273
22880: PUSH
22881: EMPTY
22882: LIST
22883: LIST
22884: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
22885: LD_VAR 0 16
22889: PUSH
22890: LD_INT 1
22892: ARRAY
22893: PPUSH
22894: LD_VAR 0 16
22898: PUSH
22899: LD_INT 2
22901: ARRAY
22902: PPUSH
22903: CALL_OW 488
22907: IFFALSE 22938
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
22909: LD_VAR 0 13
22913: PPUSH
22914: LD_VAR 0 16
22918: PUSH
22919: LD_INT 1
22921: ARRAY
22922: PPUSH
22923: LD_VAR 0 16
22927: PUSH
22928: LD_INT 2
22930: ARRAY
22931: PPUSH
22932: CALL_OW 111
// continue ;
22936: GO 22418
// end ; end ; r := GetDir ( tmp ) ;
22938: LD_ADDR_VAR 0 15
22942: PUSH
22943: LD_VAR 0 13
22947: PPUSH
22948: CALL_OW 254
22952: ST_TO_ADDR
// if r = 5 then
22953: LD_VAR 0 15
22957: PUSH
22958: LD_INT 5
22960: EQUAL
22961: IFFALSE 22971
// r := 0 ;
22963: LD_ADDR_VAR 0 15
22967: PUSH
22968: LD_INT 0
22970: ST_TO_ADDR
// for j = r to 5 do
22971: LD_ADDR_VAR 0 10
22975: PUSH
22976: DOUBLE
22977: LD_VAR 0 15
22981: DEC
22982: ST_TO_ADDR
22983: LD_INT 5
22985: PUSH
22986: FOR_TO
22987: IFFALSE 23103
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
22989: LD_ADDR_VAR 0 11
22993: PUSH
22994: LD_VAR 0 13
22998: PPUSH
22999: CALL_OW 250
23003: PPUSH
23004: LD_VAR 0 10
23008: PPUSH
23009: LD_INT 2
23011: PPUSH
23012: CALL_OW 272
23016: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
23017: LD_ADDR_VAR 0 12
23021: PUSH
23022: LD_VAR 0 13
23026: PPUSH
23027: CALL_OW 251
23031: PPUSH
23032: LD_VAR 0 10
23036: PPUSH
23037: LD_INT 2
23039: PPUSH
23040: CALL_OW 273
23044: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
23045: LD_VAR 0 11
23049: PPUSH
23050: LD_VAR 0 12
23054: PPUSH
23055: CALL_OW 488
23059: IFFALSE 23078
23061: PUSH
23062: LD_VAR 0 11
23066: PPUSH
23067: LD_VAR 0 12
23071: PPUSH
23072: CALL_OW 428
23076: NOT
23077: AND
23078: IFFALSE 23101
// begin ComMoveXY ( tmp , _x , _y ) ;
23080: LD_VAR 0 13
23084: PPUSH
23085: LD_VAR 0 11
23089: PPUSH
23090: LD_VAR 0 12
23094: PPUSH
23095: CALL_OW 111
// break ;
23099: GO 23103
// end ; end ;
23101: GO 22986
23103: POP
23104: POP
// end ; end ;
23105: GO 22418
23107: POP
23108: POP
// end ;
23109: LD_VAR 0 8
23113: RET
// export function BuildingTechInvented ( side , btype ) ; begin
23114: LD_INT 0
23116: PPUSH
// result := true ;
23117: LD_ADDR_VAR 0 3
23121: PUSH
23122: LD_INT 1
23124: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
23125: LD_VAR 0 2
23129: PUSH
23130: LD_INT 24
23132: DOUBLE
23133: EQUAL
23134: IFTRUE 23144
23136: LD_INT 33
23138: DOUBLE
23139: EQUAL
23140: IFTRUE 23144
23142: GO 23169
23144: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
23145: LD_ADDR_VAR 0 3
23149: PUSH
23150: LD_INT 32
23152: PPUSH
23153: LD_VAR 0 1
23157: PPUSH
23158: CALL_OW 321
23162: PUSH
23163: LD_INT 2
23165: EQUAL
23166: ST_TO_ADDR
23167: GO 23485
23169: LD_INT 20
23171: DOUBLE
23172: EQUAL
23173: IFTRUE 23177
23175: GO 23202
23177: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
23178: LD_ADDR_VAR 0 3
23182: PUSH
23183: LD_INT 6
23185: PPUSH
23186: LD_VAR 0 1
23190: PPUSH
23191: CALL_OW 321
23195: PUSH
23196: LD_INT 2
23198: EQUAL
23199: ST_TO_ADDR
23200: GO 23485
23202: LD_INT 22
23204: DOUBLE
23205: EQUAL
23206: IFTRUE 23216
23208: LD_INT 36
23210: DOUBLE
23211: EQUAL
23212: IFTRUE 23216
23214: GO 23241
23216: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
23217: LD_ADDR_VAR 0 3
23221: PUSH
23222: LD_INT 15
23224: PPUSH
23225: LD_VAR 0 1
23229: PPUSH
23230: CALL_OW 321
23234: PUSH
23235: LD_INT 2
23237: EQUAL
23238: ST_TO_ADDR
23239: GO 23485
23241: LD_INT 30
23243: DOUBLE
23244: EQUAL
23245: IFTRUE 23249
23247: GO 23274
23249: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
23250: LD_ADDR_VAR 0 3
23254: PUSH
23255: LD_INT 20
23257: PPUSH
23258: LD_VAR 0 1
23262: PPUSH
23263: CALL_OW 321
23267: PUSH
23268: LD_INT 2
23270: EQUAL
23271: ST_TO_ADDR
23272: GO 23485
23274: LD_INT 28
23276: DOUBLE
23277: EQUAL
23278: IFTRUE 23288
23280: LD_INT 21
23282: DOUBLE
23283: EQUAL
23284: IFTRUE 23288
23286: GO 23313
23288: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
23289: LD_ADDR_VAR 0 3
23293: PUSH
23294: LD_INT 21
23296: PPUSH
23297: LD_VAR 0 1
23301: PPUSH
23302: CALL_OW 321
23306: PUSH
23307: LD_INT 2
23309: EQUAL
23310: ST_TO_ADDR
23311: GO 23485
23313: LD_INT 16
23315: DOUBLE
23316: EQUAL
23317: IFTRUE 23321
23319: GO 23346
23321: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
23322: LD_ADDR_VAR 0 3
23326: PUSH
23327: LD_INT 84
23329: PPUSH
23330: LD_VAR 0 1
23334: PPUSH
23335: CALL_OW 321
23339: PUSH
23340: LD_INT 2
23342: EQUAL
23343: ST_TO_ADDR
23344: GO 23485
23346: LD_INT 19
23348: DOUBLE
23349: EQUAL
23350: IFTRUE 23360
23352: LD_INT 23
23354: DOUBLE
23355: EQUAL
23356: IFTRUE 23360
23358: GO 23385
23360: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
23361: LD_ADDR_VAR 0 3
23365: PUSH
23366: LD_INT 83
23368: PPUSH
23369: LD_VAR 0 1
23373: PPUSH
23374: CALL_OW 321
23378: PUSH
23379: LD_INT 2
23381: EQUAL
23382: ST_TO_ADDR
23383: GO 23485
23385: LD_INT 17
23387: DOUBLE
23388: EQUAL
23389: IFTRUE 23393
23391: GO 23418
23393: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
23394: LD_ADDR_VAR 0 3
23398: PUSH
23399: LD_INT 39
23401: PPUSH
23402: LD_VAR 0 1
23406: PPUSH
23407: CALL_OW 321
23411: PUSH
23412: LD_INT 2
23414: EQUAL
23415: ST_TO_ADDR
23416: GO 23485
23418: LD_INT 18
23420: DOUBLE
23421: EQUAL
23422: IFTRUE 23426
23424: GO 23451
23426: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
23427: LD_ADDR_VAR 0 3
23431: PUSH
23432: LD_INT 40
23434: PPUSH
23435: LD_VAR 0 1
23439: PPUSH
23440: CALL_OW 321
23444: PUSH
23445: LD_INT 2
23447: EQUAL
23448: ST_TO_ADDR
23449: GO 23485
23451: LD_INT 27
23453: DOUBLE
23454: EQUAL
23455: IFTRUE 23459
23457: GO 23484
23459: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
23460: LD_ADDR_VAR 0 3
23464: PUSH
23465: LD_INT 35
23467: PPUSH
23468: LD_VAR 0 1
23472: PPUSH
23473: CALL_OW 321
23477: PUSH
23478: LD_INT 2
23480: EQUAL
23481: ST_TO_ADDR
23482: GO 23485
23484: POP
// end ;
23485: LD_VAR 0 3
23489: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
23490: LD_INT 0
23492: PPUSH
23493: PPUSH
23494: PPUSH
23495: PPUSH
23496: PPUSH
23497: PPUSH
23498: PPUSH
23499: PPUSH
23500: PPUSH
23501: PPUSH
23502: PPUSH
// result := false ;
23503: LD_ADDR_VAR 0 6
23507: PUSH
23508: LD_INT 0
23510: ST_TO_ADDR
// if btype = b_depot then
23511: LD_VAR 0 2
23515: PUSH
23516: LD_INT 0
23518: EQUAL
23519: IFFALSE 23531
// begin result := true ;
23521: LD_ADDR_VAR 0 6
23525: PUSH
23526: LD_INT 1
23528: ST_TO_ADDR
// exit ;
23529: GO 24385
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
23531: LD_VAR 0 1
23535: NOT
23536: IFTRUE 23561
23538: PUSH
23539: LD_VAR 0 1
23543: PPUSH
23544: CALL_OW 266
23548: PUSH
23549: LD_INT 0
23551: PUSH
23552: LD_INT 1
23554: PUSH
23555: EMPTY
23556: LIST
23557: LIST
23558: IN
23559: NOT
23560: OR
23561: IFTRUE 23570
23563: PUSH
23564: LD_VAR 0 2
23568: NOT
23569: OR
23570: IFTRUE 23606
23572: PUSH
23573: LD_VAR 0 5
23577: PUSH
23578: LD_INT 0
23580: PUSH
23581: LD_INT 1
23583: PUSH
23584: LD_INT 2
23586: PUSH
23587: LD_INT 3
23589: PUSH
23590: LD_INT 4
23592: PUSH
23593: LD_INT 5
23595: PUSH
23596: EMPTY
23597: LIST
23598: LIST
23599: LIST
23600: LIST
23601: LIST
23602: LIST
23603: IN
23604: NOT
23605: OR
23606: IFTRUE 23625
23608: PUSH
23609: LD_VAR 0 3
23613: PPUSH
23614: LD_VAR 0 4
23618: PPUSH
23619: CALL_OW 488
23623: NOT
23624: OR
23625: IFFALSE 23629
// exit ;
23627: GO 24385
// side := GetSide ( depot ) ;
23629: LD_ADDR_VAR 0 9
23633: PUSH
23634: LD_VAR 0 1
23638: PPUSH
23639: CALL_OW 255
23643: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
23644: LD_VAR 0 9
23648: PPUSH
23649: LD_VAR 0 2
23653: PPUSH
23654: CALL 23114 0 2
23658: NOT
23659: IFFALSE 23663
// exit ;
23661: GO 24385
// pom := GetBase ( depot ) ;
23663: LD_ADDR_VAR 0 10
23667: PUSH
23668: LD_VAR 0 1
23672: PPUSH
23673: CALL_OW 274
23677: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
23678: LD_ADDR_VAR 0 11
23682: PUSH
23683: LD_VAR 0 2
23687: PPUSH
23688: LD_VAR 0 1
23692: PPUSH
23693: CALL_OW 248
23697: PPUSH
23698: CALL_OW 450
23702: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
23703: LD_VAR 0 10
23707: PPUSH
23708: LD_INT 1
23710: PPUSH
23711: CALL_OW 275
23715: PUSH
23716: LD_VAR 0 11
23720: PUSH
23721: LD_INT 1
23723: ARRAY
23724: GREATEREQUAL
23725: IFFALSE 23751
23727: PUSH
23728: LD_VAR 0 10
23732: PPUSH
23733: LD_INT 2
23735: PPUSH
23736: CALL_OW 275
23740: PUSH
23741: LD_VAR 0 11
23745: PUSH
23746: LD_INT 2
23748: ARRAY
23749: GREATEREQUAL
23750: AND
23751: IFFALSE 23777
23753: PUSH
23754: LD_VAR 0 10
23758: PPUSH
23759: LD_INT 3
23761: PPUSH
23762: CALL_OW 275
23766: PUSH
23767: LD_VAR 0 11
23771: PUSH
23772: LD_INT 3
23774: ARRAY
23775: GREATEREQUAL
23776: AND
23777: NOT
23778: IFFALSE 23782
// exit ;
23780: GO 24385
// if GetBType ( depot ) = b_depot then
23782: LD_VAR 0 1
23786: PPUSH
23787: CALL_OW 266
23791: PUSH
23792: LD_INT 0
23794: EQUAL
23795: IFFALSE 23807
// dist := 28 else
23797: LD_ADDR_VAR 0 14
23801: PUSH
23802: LD_INT 28
23804: ST_TO_ADDR
23805: GO 23815
// dist := 36 ;
23807: LD_ADDR_VAR 0 14
23811: PUSH
23812: LD_INT 36
23814: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
23815: LD_VAR 0 1
23819: PPUSH
23820: LD_VAR 0 3
23824: PPUSH
23825: LD_VAR 0 4
23829: PPUSH
23830: CALL_OW 297
23834: PUSH
23835: LD_VAR 0 14
23839: GREATER
23840: IFFALSE 23844
// exit ;
23842: GO 24385
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
23844: LD_ADDR_VAR 0 12
23848: PUSH
23849: LD_VAR 0 2
23853: PPUSH
23854: LD_VAR 0 3
23858: PPUSH
23859: LD_VAR 0 4
23863: PPUSH
23864: LD_VAR 0 5
23868: PPUSH
23869: LD_VAR 0 1
23873: PPUSH
23874: CALL_OW 248
23878: PPUSH
23879: LD_INT 0
23881: PPUSH
23882: CALL 24390 0 6
23886: ST_TO_ADDR
// if not hexes then
23887: LD_VAR 0 12
23891: NOT
23892: IFFALSE 23896
// exit ;
23894: GO 24385
// hex := GetHexInfo ( x , y ) ;
23896: LD_ADDR_VAR 0 15
23900: PUSH
23901: LD_VAR 0 3
23905: PPUSH
23906: LD_VAR 0 4
23910: PPUSH
23911: CALL_OW 546
23915: ST_TO_ADDR
// if hex [ 1 ] then
23916: LD_VAR 0 15
23920: PUSH
23921: LD_INT 1
23923: ARRAY
23924: IFFALSE 23928
// exit ;
23926: GO 24385
// height := hex [ 2 ] ;
23928: LD_ADDR_VAR 0 13
23932: PUSH
23933: LD_VAR 0 15
23937: PUSH
23938: LD_INT 2
23940: ARRAY
23941: ST_TO_ADDR
// for i = 1 to hexes do
23942: LD_ADDR_VAR 0 7
23946: PUSH
23947: DOUBLE
23948: LD_INT 1
23950: DEC
23951: ST_TO_ADDR
23952: LD_VAR 0 12
23956: PUSH
23957: FOR_TO
23958: IFFALSE 24302
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
23960: LD_VAR 0 12
23964: PUSH
23965: LD_VAR 0 7
23969: ARRAY
23970: PUSH
23971: LD_INT 1
23973: ARRAY
23974: PPUSH
23975: LD_VAR 0 12
23979: PUSH
23980: LD_VAR 0 7
23984: ARRAY
23985: PUSH
23986: LD_INT 2
23988: ARRAY
23989: PPUSH
23990: CALL_OW 488
23994: NOT
23995: IFTRUE 24037
23997: PUSH
23998: LD_VAR 0 12
24002: PUSH
24003: LD_VAR 0 7
24007: ARRAY
24008: PUSH
24009: LD_INT 1
24011: ARRAY
24012: PPUSH
24013: LD_VAR 0 12
24017: PUSH
24018: LD_VAR 0 7
24022: ARRAY
24023: PUSH
24024: LD_INT 2
24026: ARRAY
24027: PPUSH
24028: CALL_OW 428
24032: PUSH
24033: LD_INT 0
24035: GREATER
24036: OR
24037: IFTRUE 24075
24039: PUSH
24040: LD_VAR 0 12
24044: PUSH
24045: LD_VAR 0 7
24049: ARRAY
24050: PUSH
24051: LD_INT 1
24053: ARRAY
24054: PPUSH
24055: LD_VAR 0 12
24059: PUSH
24060: LD_VAR 0 7
24064: ARRAY
24065: PUSH
24066: LD_INT 2
24068: ARRAY
24069: PPUSH
24070: CALL_OW 351
24074: OR
24075: IFFALSE 24081
// exit ;
24077: POP
24078: POP
24079: GO 24385
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
24081: LD_ADDR_VAR 0 8
24085: PUSH
24086: LD_VAR 0 12
24090: PUSH
24091: LD_VAR 0 7
24095: ARRAY
24096: PUSH
24097: LD_INT 1
24099: ARRAY
24100: PPUSH
24101: LD_VAR 0 12
24105: PUSH
24106: LD_VAR 0 7
24110: ARRAY
24111: PUSH
24112: LD_INT 2
24114: ARRAY
24115: PPUSH
24116: CALL_OW 546
24120: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
24121: LD_VAR 0 8
24125: PUSH
24126: LD_INT 1
24128: ARRAY
24129: IFTRUE 24151
24131: PUSH
24132: LD_VAR 0 8
24136: PUSH
24137: LD_INT 2
24139: ARRAY
24140: PUSH
24141: LD_VAR 0 13
24145: PUSH
24146: LD_INT 2
24148: PLUS
24149: GREATER
24150: OR
24151: IFTRUE 24173
24153: PUSH
24154: LD_VAR 0 8
24158: PUSH
24159: LD_INT 2
24161: ARRAY
24162: PUSH
24163: LD_VAR 0 13
24167: PUSH
24168: LD_INT 2
24170: MINUS
24171: LESS
24172: OR
24173: IFTRUE 24241
24175: PUSH
24176: LD_VAR 0 8
24180: PUSH
24181: LD_INT 3
24183: ARRAY
24184: PUSH
24185: LD_INT 0
24187: PUSH
24188: LD_INT 8
24190: PUSH
24191: LD_INT 9
24193: PUSH
24194: LD_INT 10
24196: PUSH
24197: LD_INT 11
24199: PUSH
24200: LD_INT 12
24202: PUSH
24203: LD_INT 13
24205: PUSH
24206: LD_INT 16
24208: PUSH
24209: LD_INT 17
24211: PUSH
24212: LD_INT 18
24214: PUSH
24215: LD_INT 19
24217: PUSH
24218: LD_INT 20
24220: PUSH
24221: LD_INT 21
24223: PUSH
24224: EMPTY
24225: LIST
24226: LIST
24227: LIST
24228: LIST
24229: LIST
24230: LIST
24231: LIST
24232: LIST
24233: LIST
24234: LIST
24235: LIST
24236: LIST
24237: LIST
24238: IN
24239: NOT
24240: OR
24241: IFTRUE 24254
24243: PUSH
24244: LD_VAR 0 8
24248: PUSH
24249: LD_INT 5
24251: ARRAY
24252: NOT
24253: OR
24254: IFTRUE 24294
24256: PUSH
24257: LD_VAR 0 8
24261: PUSH
24262: LD_INT 6
24264: ARRAY
24265: PUSH
24266: LD_INT 1
24268: PUSH
24269: LD_INT 2
24271: PUSH
24272: LD_INT 7
24274: PUSH
24275: LD_INT 9
24277: PUSH
24278: LD_INT 10
24280: PUSH
24281: LD_INT 11
24283: PUSH
24284: EMPTY
24285: LIST
24286: LIST
24287: LIST
24288: LIST
24289: LIST
24290: LIST
24291: IN
24292: NOT
24293: OR
24294: IFFALSE 24300
// exit ;
24296: POP
24297: POP
24298: GO 24385
// end ;
24300: GO 23957
24302: POP
24303: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
24304: LD_VAR 0 9
24308: PPUSH
24309: LD_VAR 0 3
24313: PPUSH
24314: LD_VAR 0 4
24318: PPUSH
24319: LD_INT 20
24321: PPUSH
24322: CALL 16204 0 4
24326: PUSH
24327: LD_INT 4
24329: ARRAY
24330: IFFALSE 24334
// exit ;
24332: GO 24385
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
24334: LD_VAR 0 2
24338: PUSH
24339: LD_INT 29
24341: PUSH
24342: LD_INT 30
24344: PUSH
24345: EMPTY
24346: LIST
24347: LIST
24348: IN
24349: IFFALSE 24373
24351: PUSH
24352: LD_VAR 0 3
24356: PPUSH
24357: LD_VAR 0 4
24361: PPUSH
24362: LD_VAR 0 9
24366: PPUSH
24367: CALL_OW 440
24371: NOT
24372: AND
24373: IFFALSE 24377
// exit ;
24375: GO 24385
// result := true ;
24377: LD_ADDR_VAR 0 6
24381: PUSH
24382: LD_INT 1
24384: ST_TO_ADDR
// end ;
24385: LD_VAR 0 6
24389: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
24390: LD_INT 0
24392: PPUSH
24393: PPUSH
24394: PPUSH
24395: PPUSH
24396: PPUSH
24397: PPUSH
24398: PPUSH
24399: PPUSH
24400: PPUSH
24401: PPUSH
24402: PPUSH
24403: PPUSH
24404: PPUSH
24405: PPUSH
24406: PPUSH
24407: PPUSH
24408: PPUSH
24409: PPUSH
24410: PPUSH
24411: PPUSH
24412: PPUSH
24413: PPUSH
24414: PPUSH
24415: PPUSH
24416: PPUSH
24417: PPUSH
24418: PPUSH
24419: PPUSH
24420: PPUSH
24421: PPUSH
24422: PPUSH
24423: PPUSH
24424: PPUSH
24425: PPUSH
24426: PPUSH
24427: PPUSH
24428: PPUSH
24429: PPUSH
24430: PPUSH
24431: PPUSH
24432: PPUSH
24433: PPUSH
24434: PPUSH
24435: PPUSH
24436: PPUSH
24437: PPUSH
24438: PPUSH
24439: PPUSH
24440: PPUSH
24441: PPUSH
24442: PPUSH
24443: PPUSH
24444: PPUSH
24445: PPUSH
24446: PPUSH
24447: PPUSH
24448: PPUSH
24449: PPUSH
// result = [ ] ;
24450: LD_ADDR_VAR 0 7
24454: PUSH
24455: EMPTY
24456: ST_TO_ADDR
// temp_list = [ ] ;
24457: LD_ADDR_VAR 0 9
24461: PUSH
24462: EMPTY
24463: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
24464: LD_VAR 0 4
24468: PUSH
24469: LD_INT 0
24471: PUSH
24472: LD_INT 1
24474: PUSH
24475: LD_INT 2
24477: PUSH
24478: LD_INT 3
24480: PUSH
24481: LD_INT 4
24483: PUSH
24484: LD_INT 5
24486: PUSH
24487: EMPTY
24488: LIST
24489: LIST
24490: LIST
24491: LIST
24492: LIST
24493: LIST
24494: IN
24495: NOT
24496: IFTRUE 24539
24498: PUSH
24499: LD_VAR 0 1
24503: PUSH
24504: LD_INT 0
24506: PUSH
24507: LD_INT 1
24509: PUSH
24510: EMPTY
24511: LIST
24512: LIST
24513: IN
24514: IFFALSE 24538
24516: PUSH
24517: LD_VAR 0 5
24521: PUSH
24522: LD_INT 1
24524: PUSH
24525: LD_INT 2
24527: PUSH
24528: LD_INT 3
24530: PUSH
24531: EMPTY
24532: LIST
24533: LIST
24534: LIST
24535: IN
24536: NOT
24537: AND
24538: OR
24539: IFFALSE 24543
// exit ;
24541: GO 42942
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
24543: LD_VAR 0 1
24547: PUSH
24548: LD_INT 6
24550: PUSH
24551: LD_INT 7
24553: PUSH
24554: LD_INT 8
24556: PUSH
24557: LD_INT 13
24559: PUSH
24560: LD_INT 12
24562: PUSH
24563: LD_INT 15
24565: PUSH
24566: LD_INT 11
24568: PUSH
24569: LD_INT 14
24571: PUSH
24572: LD_INT 10
24574: PUSH
24575: EMPTY
24576: LIST
24577: LIST
24578: LIST
24579: LIST
24580: LIST
24581: LIST
24582: LIST
24583: LIST
24584: LIST
24585: IN
24586: IFFALSE 24596
// btype = b_lab ;
24588: LD_ADDR_VAR 0 1
24592: PUSH
24593: LD_INT 6
24595: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
24596: LD_VAR 0 6
24600: PUSH
24601: LD_INT 0
24603: PUSH
24604: LD_INT 1
24606: PUSH
24607: LD_INT 2
24609: PUSH
24610: EMPTY
24611: LIST
24612: LIST
24613: LIST
24614: IN
24615: NOT
24616: IFTRUE 24684
24618: PUSH
24619: LD_VAR 0 1
24623: PUSH
24624: LD_INT 0
24626: PUSH
24627: LD_INT 1
24629: PUSH
24630: LD_INT 2
24632: PUSH
24633: LD_INT 3
24635: PUSH
24636: LD_INT 6
24638: PUSH
24639: LD_INT 36
24641: PUSH
24642: LD_INT 4
24644: PUSH
24645: LD_INT 5
24647: PUSH
24648: LD_INT 31
24650: PUSH
24651: LD_INT 32
24653: PUSH
24654: LD_INT 33
24656: PUSH
24657: EMPTY
24658: LIST
24659: LIST
24660: LIST
24661: LIST
24662: LIST
24663: LIST
24664: LIST
24665: LIST
24666: LIST
24667: LIST
24668: LIST
24669: IN
24670: NOT
24671: IFFALSE 24683
24673: PUSH
24674: LD_VAR 0 6
24678: PUSH
24679: LD_INT 1
24681: EQUAL
24682: AND
24683: OR
24684: IFTRUE 24716
24686: PUSH
24687: LD_VAR 0 1
24691: PUSH
24692: LD_INT 2
24694: PUSH
24695: LD_INT 3
24697: PUSH
24698: EMPTY
24699: LIST
24700: LIST
24701: IN
24702: NOT
24703: IFFALSE 24715
24705: PUSH
24706: LD_VAR 0 6
24710: PUSH
24711: LD_INT 2
24713: EQUAL
24714: AND
24715: OR
24716: IFFALSE 24726
// mode = 0 ;
24718: LD_ADDR_VAR 0 6
24722: PUSH
24723: LD_INT 0
24725: ST_TO_ADDR
// case mode of 0 :
24726: LD_VAR 0 6
24730: PUSH
24731: LD_INT 0
24733: DOUBLE
24734: EQUAL
24735: IFTRUE 24739
24737: GO 36192
24739: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
24740: LD_ADDR_VAR 0 11
24744: PUSH
24745: LD_INT 0
24747: PUSH
24748: LD_INT 0
24750: PUSH
24751: EMPTY
24752: LIST
24753: LIST
24754: PUSH
24755: LD_INT 0
24757: PUSH
24758: LD_INT 1
24760: NEG
24761: PUSH
24762: EMPTY
24763: LIST
24764: LIST
24765: PUSH
24766: LD_INT 1
24768: PUSH
24769: LD_INT 0
24771: PUSH
24772: EMPTY
24773: LIST
24774: LIST
24775: PUSH
24776: LD_INT 1
24778: PUSH
24779: LD_INT 1
24781: PUSH
24782: EMPTY
24783: LIST
24784: LIST
24785: PUSH
24786: LD_INT 0
24788: PUSH
24789: LD_INT 1
24791: PUSH
24792: EMPTY
24793: LIST
24794: LIST
24795: PUSH
24796: LD_INT 1
24798: NEG
24799: PUSH
24800: LD_INT 0
24802: PUSH
24803: EMPTY
24804: LIST
24805: LIST
24806: PUSH
24807: LD_INT 1
24809: NEG
24810: PUSH
24811: LD_INT 1
24813: NEG
24814: PUSH
24815: EMPTY
24816: LIST
24817: LIST
24818: PUSH
24819: LD_INT 1
24821: NEG
24822: PUSH
24823: LD_INT 2
24825: NEG
24826: PUSH
24827: EMPTY
24828: LIST
24829: LIST
24830: PUSH
24831: LD_INT 0
24833: PUSH
24834: LD_INT 2
24836: NEG
24837: PUSH
24838: EMPTY
24839: LIST
24840: LIST
24841: PUSH
24842: LD_INT 1
24844: PUSH
24845: LD_INT 1
24847: NEG
24848: PUSH
24849: EMPTY
24850: LIST
24851: LIST
24852: PUSH
24853: LD_INT 1
24855: PUSH
24856: LD_INT 2
24858: PUSH
24859: EMPTY
24860: LIST
24861: LIST
24862: PUSH
24863: LD_INT 0
24865: PUSH
24866: LD_INT 2
24868: PUSH
24869: EMPTY
24870: LIST
24871: LIST
24872: PUSH
24873: LD_INT 1
24875: NEG
24876: PUSH
24877: LD_INT 1
24879: PUSH
24880: EMPTY
24881: LIST
24882: LIST
24883: PUSH
24884: LD_INT 1
24886: PUSH
24887: LD_INT 3
24889: PUSH
24890: EMPTY
24891: LIST
24892: LIST
24893: PUSH
24894: LD_INT 0
24896: PUSH
24897: LD_INT 3
24899: PUSH
24900: EMPTY
24901: LIST
24902: LIST
24903: PUSH
24904: LD_INT 1
24906: NEG
24907: PUSH
24908: LD_INT 2
24910: PUSH
24911: EMPTY
24912: LIST
24913: LIST
24914: PUSH
24915: EMPTY
24916: LIST
24917: LIST
24918: LIST
24919: LIST
24920: LIST
24921: LIST
24922: LIST
24923: LIST
24924: LIST
24925: LIST
24926: LIST
24927: LIST
24928: LIST
24929: LIST
24930: LIST
24931: LIST
24932: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
24933: LD_ADDR_VAR 0 12
24937: PUSH
24938: LD_INT 0
24940: PUSH
24941: LD_INT 0
24943: PUSH
24944: EMPTY
24945: LIST
24946: LIST
24947: PUSH
24948: LD_INT 0
24950: PUSH
24951: LD_INT 1
24953: NEG
24954: PUSH
24955: EMPTY
24956: LIST
24957: LIST
24958: PUSH
24959: LD_INT 1
24961: PUSH
24962: LD_INT 0
24964: PUSH
24965: EMPTY
24966: LIST
24967: LIST
24968: PUSH
24969: LD_INT 1
24971: PUSH
24972: LD_INT 1
24974: PUSH
24975: EMPTY
24976: LIST
24977: LIST
24978: PUSH
24979: LD_INT 0
24981: PUSH
24982: LD_INT 1
24984: PUSH
24985: EMPTY
24986: LIST
24987: LIST
24988: PUSH
24989: LD_INT 1
24991: NEG
24992: PUSH
24993: LD_INT 0
24995: PUSH
24996: EMPTY
24997: LIST
24998: LIST
24999: PUSH
25000: LD_INT 1
25002: NEG
25003: PUSH
25004: LD_INT 1
25006: NEG
25007: PUSH
25008: EMPTY
25009: LIST
25010: LIST
25011: PUSH
25012: LD_INT 1
25014: PUSH
25015: LD_INT 1
25017: NEG
25018: PUSH
25019: EMPTY
25020: LIST
25021: LIST
25022: PUSH
25023: LD_INT 2
25025: PUSH
25026: LD_INT 0
25028: PUSH
25029: EMPTY
25030: LIST
25031: LIST
25032: PUSH
25033: LD_INT 2
25035: PUSH
25036: LD_INT 1
25038: PUSH
25039: EMPTY
25040: LIST
25041: LIST
25042: PUSH
25043: LD_INT 1
25045: NEG
25046: PUSH
25047: LD_INT 1
25049: PUSH
25050: EMPTY
25051: LIST
25052: LIST
25053: PUSH
25054: LD_INT 2
25056: NEG
25057: PUSH
25058: LD_INT 0
25060: PUSH
25061: EMPTY
25062: LIST
25063: LIST
25064: PUSH
25065: LD_INT 2
25067: NEG
25068: PUSH
25069: LD_INT 1
25071: NEG
25072: PUSH
25073: EMPTY
25074: LIST
25075: LIST
25076: PUSH
25077: LD_INT 2
25079: NEG
25080: PUSH
25081: LD_INT 1
25083: PUSH
25084: EMPTY
25085: LIST
25086: LIST
25087: PUSH
25088: LD_INT 3
25090: NEG
25091: PUSH
25092: LD_INT 0
25094: PUSH
25095: EMPTY
25096: LIST
25097: LIST
25098: PUSH
25099: LD_INT 3
25101: NEG
25102: PUSH
25103: LD_INT 1
25105: NEG
25106: PUSH
25107: EMPTY
25108: LIST
25109: LIST
25110: PUSH
25111: EMPTY
25112: LIST
25113: LIST
25114: LIST
25115: LIST
25116: LIST
25117: LIST
25118: LIST
25119: LIST
25120: LIST
25121: LIST
25122: LIST
25123: LIST
25124: LIST
25125: LIST
25126: LIST
25127: LIST
25128: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
25129: LD_ADDR_VAR 0 13
25133: PUSH
25134: LD_INT 0
25136: PUSH
25137: LD_INT 0
25139: PUSH
25140: EMPTY
25141: LIST
25142: LIST
25143: PUSH
25144: LD_INT 0
25146: PUSH
25147: LD_INT 1
25149: NEG
25150: PUSH
25151: EMPTY
25152: LIST
25153: LIST
25154: PUSH
25155: LD_INT 1
25157: PUSH
25158: LD_INT 0
25160: PUSH
25161: EMPTY
25162: LIST
25163: LIST
25164: PUSH
25165: LD_INT 1
25167: PUSH
25168: LD_INT 1
25170: PUSH
25171: EMPTY
25172: LIST
25173: LIST
25174: PUSH
25175: LD_INT 0
25177: PUSH
25178: LD_INT 1
25180: PUSH
25181: EMPTY
25182: LIST
25183: LIST
25184: PUSH
25185: LD_INT 1
25187: NEG
25188: PUSH
25189: LD_INT 0
25191: PUSH
25192: EMPTY
25193: LIST
25194: LIST
25195: PUSH
25196: LD_INT 1
25198: NEG
25199: PUSH
25200: LD_INT 1
25202: NEG
25203: PUSH
25204: EMPTY
25205: LIST
25206: LIST
25207: PUSH
25208: LD_INT 1
25210: NEG
25211: PUSH
25212: LD_INT 2
25214: NEG
25215: PUSH
25216: EMPTY
25217: LIST
25218: LIST
25219: PUSH
25220: LD_INT 2
25222: PUSH
25223: LD_INT 1
25225: PUSH
25226: EMPTY
25227: LIST
25228: LIST
25229: PUSH
25230: LD_INT 2
25232: PUSH
25233: LD_INT 2
25235: PUSH
25236: EMPTY
25237: LIST
25238: LIST
25239: PUSH
25240: LD_INT 1
25242: PUSH
25243: LD_INT 2
25245: PUSH
25246: EMPTY
25247: LIST
25248: LIST
25249: PUSH
25250: LD_INT 2
25252: NEG
25253: PUSH
25254: LD_INT 1
25256: NEG
25257: PUSH
25258: EMPTY
25259: LIST
25260: LIST
25261: PUSH
25262: LD_INT 2
25264: NEG
25265: PUSH
25266: LD_INT 2
25268: NEG
25269: PUSH
25270: EMPTY
25271: LIST
25272: LIST
25273: PUSH
25274: LD_INT 2
25276: NEG
25277: PUSH
25278: LD_INT 3
25280: NEG
25281: PUSH
25282: EMPTY
25283: LIST
25284: LIST
25285: PUSH
25286: LD_INT 3
25288: NEG
25289: PUSH
25290: LD_INT 2
25292: NEG
25293: PUSH
25294: EMPTY
25295: LIST
25296: LIST
25297: PUSH
25298: LD_INT 3
25300: NEG
25301: PUSH
25302: LD_INT 3
25304: NEG
25305: PUSH
25306: EMPTY
25307: LIST
25308: LIST
25309: PUSH
25310: EMPTY
25311: LIST
25312: LIST
25313: LIST
25314: LIST
25315: LIST
25316: LIST
25317: LIST
25318: LIST
25319: LIST
25320: LIST
25321: LIST
25322: LIST
25323: LIST
25324: LIST
25325: LIST
25326: LIST
25327: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
25328: LD_ADDR_VAR 0 14
25332: PUSH
25333: LD_INT 0
25335: PUSH
25336: LD_INT 0
25338: PUSH
25339: EMPTY
25340: LIST
25341: LIST
25342: PUSH
25343: LD_INT 0
25345: PUSH
25346: LD_INT 1
25348: NEG
25349: PUSH
25350: EMPTY
25351: LIST
25352: LIST
25353: PUSH
25354: LD_INT 1
25356: PUSH
25357: LD_INT 0
25359: PUSH
25360: EMPTY
25361: LIST
25362: LIST
25363: PUSH
25364: LD_INT 1
25366: PUSH
25367: LD_INT 1
25369: PUSH
25370: EMPTY
25371: LIST
25372: LIST
25373: PUSH
25374: LD_INT 0
25376: PUSH
25377: LD_INT 1
25379: PUSH
25380: EMPTY
25381: LIST
25382: LIST
25383: PUSH
25384: LD_INT 1
25386: NEG
25387: PUSH
25388: LD_INT 0
25390: PUSH
25391: EMPTY
25392: LIST
25393: LIST
25394: PUSH
25395: LD_INT 1
25397: NEG
25398: PUSH
25399: LD_INT 1
25401: NEG
25402: PUSH
25403: EMPTY
25404: LIST
25405: LIST
25406: PUSH
25407: LD_INT 1
25409: NEG
25410: PUSH
25411: LD_INT 2
25413: NEG
25414: PUSH
25415: EMPTY
25416: LIST
25417: LIST
25418: PUSH
25419: LD_INT 0
25421: PUSH
25422: LD_INT 2
25424: NEG
25425: PUSH
25426: EMPTY
25427: LIST
25428: LIST
25429: PUSH
25430: LD_INT 1
25432: PUSH
25433: LD_INT 1
25435: NEG
25436: PUSH
25437: EMPTY
25438: LIST
25439: LIST
25440: PUSH
25441: LD_INT 1
25443: PUSH
25444: LD_INT 2
25446: PUSH
25447: EMPTY
25448: LIST
25449: LIST
25450: PUSH
25451: LD_INT 0
25453: PUSH
25454: LD_INT 2
25456: PUSH
25457: EMPTY
25458: LIST
25459: LIST
25460: PUSH
25461: LD_INT 1
25463: NEG
25464: PUSH
25465: LD_INT 1
25467: PUSH
25468: EMPTY
25469: LIST
25470: LIST
25471: PUSH
25472: LD_INT 1
25474: NEG
25475: PUSH
25476: LD_INT 3
25478: NEG
25479: PUSH
25480: EMPTY
25481: LIST
25482: LIST
25483: PUSH
25484: LD_INT 0
25486: PUSH
25487: LD_INT 3
25489: NEG
25490: PUSH
25491: EMPTY
25492: LIST
25493: LIST
25494: PUSH
25495: LD_INT 1
25497: PUSH
25498: LD_INT 2
25500: NEG
25501: PUSH
25502: EMPTY
25503: LIST
25504: LIST
25505: PUSH
25506: EMPTY
25507: LIST
25508: LIST
25509: LIST
25510: LIST
25511: LIST
25512: LIST
25513: LIST
25514: LIST
25515: LIST
25516: LIST
25517: LIST
25518: LIST
25519: LIST
25520: LIST
25521: LIST
25522: LIST
25523: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
25524: LD_ADDR_VAR 0 15
25528: PUSH
25529: LD_INT 0
25531: PUSH
25532: LD_INT 0
25534: PUSH
25535: EMPTY
25536: LIST
25537: LIST
25538: PUSH
25539: LD_INT 0
25541: PUSH
25542: LD_INT 1
25544: NEG
25545: PUSH
25546: EMPTY
25547: LIST
25548: LIST
25549: PUSH
25550: LD_INT 1
25552: PUSH
25553: LD_INT 0
25555: PUSH
25556: EMPTY
25557: LIST
25558: LIST
25559: PUSH
25560: LD_INT 1
25562: PUSH
25563: LD_INT 1
25565: PUSH
25566: EMPTY
25567: LIST
25568: LIST
25569: PUSH
25570: LD_INT 0
25572: PUSH
25573: LD_INT 1
25575: PUSH
25576: EMPTY
25577: LIST
25578: LIST
25579: PUSH
25580: LD_INT 1
25582: NEG
25583: PUSH
25584: LD_INT 0
25586: PUSH
25587: EMPTY
25588: LIST
25589: LIST
25590: PUSH
25591: LD_INT 1
25593: NEG
25594: PUSH
25595: LD_INT 1
25597: NEG
25598: PUSH
25599: EMPTY
25600: LIST
25601: LIST
25602: PUSH
25603: LD_INT 1
25605: PUSH
25606: LD_INT 1
25608: NEG
25609: PUSH
25610: EMPTY
25611: LIST
25612: LIST
25613: PUSH
25614: LD_INT 2
25616: PUSH
25617: LD_INT 0
25619: PUSH
25620: EMPTY
25621: LIST
25622: LIST
25623: PUSH
25624: LD_INT 2
25626: PUSH
25627: LD_INT 1
25629: PUSH
25630: EMPTY
25631: LIST
25632: LIST
25633: PUSH
25634: LD_INT 1
25636: NEG
25637: PUSH
25638: LD_INT 1
25640: PUSH
25641: EMPTY
25642: LIST
25643: LIST
25644: PUSH
25645: LD_INT 2
25647: NEG
25648: PUSH
25649: LD_INT 0
25651: PUSH
25652: EMPTY
25653: LIST
25654: LIST
25655: PUSH
25656: LD_INT 2
25658: NEG
25659: PUSH
25660: LD_INT 1
25662: NEG
25663: PUSH
25664: EMPTY
25665: LIST
25666: LIST
25667: PUSH
25668: LD_INT 2
25670: PUSH
25671: LD_INT 1
25673: NEG
25674: PUSH
25675: EMPTY
25676: LIST
25677: LIST
25678: PUSH
25679: LD_INT 3
25681: PUSH
25682: LD_INT 0
25684: PUSH
25685: EMPTY
25686: LIST
25687: LIST
25688: PUSH
25689: LD_INT 3
25691: PUSH
25692: LD_INT 1
25694: PUSH
25695: EMPTY
25696: LIST
25697: LIST
25698: PUSH
25699: EMPTY
25700: LIST
25701: LIST
25702: LIST
25703: LIST
25704: LIST
25705: LIST
25706: LIST
25707: LIST
25708: LIST
25709: LIST
25710: LIST
25711: LIST
25712: LIST
25713: LIST
25714: LIST
25715: LIST
25716: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
25717: LD_ADDR_VAR 0 16
25721: PUSH
25722: LD_INT 0
25724: PUSH
25725: LD_INT 0
25727: PUSH
25728: EMPTY
25729: LIST
25730: LIST
25731: PUSH
25732: LD_INT 0
25734: PUSH
25735: LD_INT 1
25737: NEG
25738: PUSH
25739: EMPTY
25740: LIST
25741: LIST
25742: PUSH
25743: LD_INT 1
25745: PUSH
25746: LD_INT 0
25748: PUSH
25749: EMPTY
25750: LIST
25751: LIST
25752: PUSH
25753: LD_INT 1
25755: PUSH
25756: LD_INT 1
25758: PUSH
25759: EMPTY
25760: LIST
25761: LIST
25762: PUSH
25763: LD_INT 0
25765: PUSH
25766: LD_INT 1
25768: PUSH
25769: EMPTY
25770: LIST
25771: LIST
25772: PUSH
25773: LD_INT 1
25775: NEG
25776: PUSH
25777: LD_INT 0
25779: PUSH
25780: EMPTY
25781: LIST
25782: LIST
25783: PUSH
25784: LD_INT 1
25786: NEG
25787: PUSH
25788: LD_INT 1
25790: NEG
25791: PUSH
25792: EMPTY
25793: LIST
25794: LIST
25795: PUSH
25796: LD_INT 1
25798: NEG
25799: PUSH
25800: LD_INT 2
25802: NEG
25803: PUSH
25804: EMPTY
25805: LIST
25806: LIST
25807: PUSH
25808: LD_INT 2
25810: PUSH
25811: LD_INT 1
25813: PUSH
25814: EMPTY
25815: LIST
25816: LIST
25817: PUSH
25818: LD_INT 2
25820: PUSH
25821: LD_INT 2
25823: PUSH
25824: EMPTY
25825: LIST
25826: LIST
25827: PUSH
25828: LD_INT 1
25830: PUSH
25831: LD_INT 2
25833: PUSH
25834: EMPTY
25835: LIST
25836: LIST
25837: PUSH
25838: LD_INT 2
25840: NEG
25841: PUSH
25842: LD_INT 1
25844: NEG
25845: PUSH
25846: EMPTY
25847: LIST
25848: LIST
25849: PUSH
25850: LD_INT 2
25852: NEG
25853: PUSH
25854: LD_INT 2
25856: NEG
25857: PUSH
25858: EMPTY
25859: LIST
25860: LIST
25861: PUSH
25862: LD_INT 3
25864: PUSH
25865: LD_INT 2
25867: PUSH
25868: EMPTY
25869: LIST
25870: LIST
25871: PUSH
25872: LD_INT 3
25874: PUSH
25875: LD_INT 3
25877: PUSH
25878: EMPTY
25879: LIST
25880: LIST
25881: PUSH
25882: LD_INT 2
25884: PUSH
25885: LD_INT 3
25887: PUSH
25888: EMPTY
25889: LIST
25890: LIST
25891: PUSH
25892: EMPTY
25893: LIST
25894: LIST
25895: LIST
25896: LIST
25897: LIST
25898: LIST
25899: LIST
25900: LIST
25901: LIST
25902: LIST
25903: LIST
25904: LIST
25905: LIST
25906: LIST
25907: LIST
25908: LIST
25909: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25910: LD_ADDR_VAR 0 17
25914: PUSH
25915: LD_INT 0
25917: PUSH
25918: LD_INT 0
25920: PUSH
25921: EMPTY
25922: LIST
25923: LIST
25924: PUSH
25925: LD_INT 0
25927: PUSH
25928: LD_INT 1
25930: NEG
25931: PUSH
25932: EMPTY
25933: LIST
25934: LIST
25935: PUSH
25936: LD_INT 1
25938: PUSH
25939: LD_INT 0
25941: PUSH
25942: EMPTY
25943: LIST
25944: LIST
25945: PUSH
25946: LD_INT 1
25948: PUSH
25949: LD_INT 1
25951: PUSH
25952: EMPTY
25953: LIST
25954: LIST
25955: PUSH
25956: LD_INT 0
25958: PUSH
25959: LD_INT 1
25961: PUSH
25962: EMPTY
25963: LIST
25964: LIST
25965: PUSH
25966: LD_INT 1
25968: NEG
25969: PUSH
25970: LD_INT 0
25972: PUSH
25973: EMPTY
25974: LIST
25975: LIST
25976: PUSH
25977: LD_INT 1
25979: NEG
25980: PUSH
25981: LD_INT 1
25983: NEG
25984: PUSH
25985: EMPTY
25986: LIST
25987: LIST
25988: PUSH
25989: LD_INT 1
25991: NEG
25992: PUSH
25993: LD_INT 2
25995: NEG
25996: PUSH
25997: EMPTY
25998: LIST
25999: LIST
26000: PUSH
26001: LD_INT 0
26003: PUSH
26004: LD_INT 2
26006: NEG
26007: PUSH
26008: EMPTY
26009: LIST
26010: LIST
26011: PUSH
26012: LD_INT 1
26014: PUSH
26015: LD_INT 1
26017: NEG
26018: PUSH
26019: EMPTY
26020: LIST
26021: LIST
26022: PUSH
26023: LD_INT 2
26025: PUSH
26026: LD_INT 0
26028: PUSH
26029: EMPTY
26030: LIST
26031: LIST
26032: PUSH
26033: LD_INT 2
26035: PUSH
26036: LD_INT 1
26038: PUSH
26039: EMPTY
26040: LIST
26041: LIST
26042: PUSH
26043: LD_INT 2
26045: PUSH
26046: LD_INT 2
26048: PUSH
26049: EMPTY
26050: LIST
26051: LIST
26052: PUSH
26053: LD_INT 1
26055: PUSH
26056: LD_INT 2
26058: PUSH
26059: EMPTY
26060: LIST
26061: LIST
26062: PUSH
26063: LD_INT 0
26065: PUSH
26066: LD_INT 2
26068: PUSH
26069: EMPTY
26070: LIST
26071: LIST
26072: PUSH
26073: LD_INT 1
26075: NEG
26076: PUSH
26077: LD_INT 1
26079: PUSH
26080: EMPTY
26081: LIST
26082: LIST
26083: PUSH
26084: LD_INT 2
26086: NEG
26087: PUSH
26088: LD_INT 0
26090: PUSH
26091: EMPTY
26092: LIST
26093: LIST
26094: PUSH
26095: LD_INT 2
26097: NEG
26098: PUSH
26099: LD_INT 1
26101: NEG
26102: PUSH
26103: EMPTY
26104: LIST
26105: LIST
26106: PUSH
26107: LD_INT 2
26109: NEG
26110: PUSH
26111: LD_INT 2
26113: NEG
26114: PUSH
26115: EMPTY
26116: LIST
26117: LIST
26118: PUSH
26119: EMPTY
26120: LIST
26121: LIST
26122: LIST
26123: LIST
26124: LIST
26125: LIST
26126: LIST
26127: LIST
26128: LIST
26129: LIST
26130: LIST
26131: LIST
26132: LIST
26133: LIST
26134: LIST
26135: LIST
26136: LIST
26137: LIST
26138: LIST
26139: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26140: LD_ADDR_VAR 0 18
26144: PUSH
26145: LD_INT 0
26147: PUSH
26148: LD_INT 0
26150: PUSH
26151: EMPTY
26152: LIST
26153: LIST
26154: PUSH
26155: LD_INT 0
26157: PUSH
26158: LD_INT 1
26160: NEG
26161: PUSH
26162: EMPTY
26163: LIST
26164: LIST
26165: PUSH
26166: LD_INT 1
26168: PUSH
26169: LD_INT 0
26171: PUSH
26172: EMPTY
26173: LIST
26174: LIST
26175: PUSH
26176: LD_INT 1
26178: PUSH
26179: LD_INT 1
26181: PUSH
26182: EMPTY
26183: LIST
26184: LIST
26185: PUSH
26186: LD_INT 0
26188: PUSH
26189: LD_INT 1
26191: PUSH
26192: EMPTY
26193: LIST
26194: LIST
26195: PUSH
26196: LD_INT 1
26198: NEG
26199: PUSH
26200: LD_INT 0
26202: PUSH
26203: EMPTY
26204: LIST
26205: LIST
26206: PUSH
26207: LD_INT 1
26209: NEG
26210: PUSH
26211: LD_INT 1
26213: NEG
26214: PUSH
26215: EMPTY
26216: LIST
26217: LIST
26218: PUSH
26219: LD_INT 1
26221: NEG
26222: PUSH
26223: LD_INT 2
26225: NEG
26226: PUSH
26227: EMPTY
26228: LIST
26229: LIST
26230: PUSH
26231: LD_INT 0
26233: PUSH
26234: LD_INT 2
26236: NEG
26237: PUSH
26238: EMPTY
26239: LIST
26240: LIST
26241: PUSH
26242: LD_INT 1
26244: PUSH
26245: LD_INT 1
26247: NEG
26248: PUSH
26249: EMPTY
26250: LIST
26251: LIST
26252: PUSH
26253: LD_INT 2
26255: PUSH
26256: LD_INT 0
26258: PUSH
26259: EMPTY
26260: LIST
26261: LIST
26262: PUSH
26263: LD_INT 2
26265: PUSH
26266: LD_INT 1
26268: PUSH
26269: EMPTY
26270: LIST
26271: LIST
26272: PUSH
26273: LD_INT 2
26275: PUSH
26276: LD_INT 2
26278: PUSH
26279: EMPTY
26280: LIST
26281: LIST
26282: PUSH
26283: LD_INT 1
26285: PUSH
26286: LD_INT 2
26288: PUSH
26289: EMPTY
26290: LIST
26291: LIST
26292: PUSH
26293: LD_INT 0
26295: PUSH
26296: LD_INT 2
26298: PUSH
26299: EMPTY
26300: LIST
26301: LIST
26302: PUSH
26303: LD_INT 1
26305: NEG
26306: PUSH
26307: LD_INT 1
26309: PUSH
26310: EMPTY
26311: LIST
26312: LIST
26313: PUSH
26314: LD_INT 2
26316: NEG
26317: PUSH
26318: LD_INT 0
26320: PUSH
26321: EMPTY
26322: LIST
26323: LIST
26324: PUSH
26325: LD_INT 2
26327: NEG
26328: PUSH
26329: LD_INT 1
26331: NEG
26332: PUSH
26333: EMPTY
26334: LIST
26335: LIST
26336: PUSH
26337: LD_INT 2
26339: NEG
26340: PUSH
26341: LD_INT 2
26343: NEG
26344: PUSH
26345: EMPTY
26346: LIST
26347: LIST
26348: PUSH
26349: EMPTY
26350: LIST
26351: LIST
26352: LIST
26353: LIST
26354: LIST
26355: LIST
26356: LIST
26357: LIST
26358: LIST
26359: LIST
26360: LIST
26361: LIST
26362: LIST
26363: LIST
26364: LIST
26365: LIST
26366: LIST
26367: LIST
26368: LIST
26369: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26370: LD_ADDR_VAR 0 19
26374: PUSH
26375: LD_INT 0
26377: PUSH
26378: LD_INT 0
26380: PUSH
26381: EMPTY
26382: LIST
26383: LIST
26384: PUSH
26385: LD_INT 0
26387: PUSH
26388: LD_INT 1
26390: NEG
26391: PUSH
26392: EMPTY
26393: LIST
26394: LIST
26395: PUSH
26396: LD_INT 1
26398: PUSH
26399: LD_INT 0
26401: PUSH
26402: EMPTY
26403: LIST
26404: LIST
26405: PUSH
26406: LD_INT 1
26408: PUSH
26409: LD_INT 1
26411: PUSH
26412: EMPTY
26413: LIST
26414: LIST
26415: PUSH
26416: LD_INT 0
26418: PUSH
26419: LD_INT 1
26421: PUSH
26422: EMPTY
26423: LIST
26424: LIST
26425: PUSH
26426: LD_INT 1
26428: NEG
26429: PUSH
26430: LD_INT 0
26432: PUSH
26433: EMPTY
26434: LIST
26435: LIST
26436: PUSH
26437: LD_INT 1
26439: NEG
26440: PUSH
26441: LD_INT 1
26443: NEG
26444: PUSH
26445: EMPTY
26446: LIST
26447: LIST
26448: PUSH
26449: LD_INT 1
26451: NEG
26452: PUSH
26453: LD_INT 2
26455: NEG
26456: PUSH
26457: EMPTY
26458: LIST
26459: LIST
26460: PUSH
26461: LD_INT 0
26463: PUSH
26464: LD_INT 2
26466: NEG
26467: PUSH
26468: EMPTY
26469: LIST
26470: LIST
26471: PUSH
26472: LD_INT 1
26474: PUSH
26475: LD_INT 1
26477: NEG
26478: PUSH
26479: EMPTY
26480: LIST
26481: LIST
26482: PUSH
26483: LD_INT 2
26485: PUSH
26486: LD_INT 0
26488: PUSH
26489: EMPTY
26490: LIST
26491: LIST
26492: PUSH
26493: LD_INT 2
26495: PUSH
26496: LD_INT 1
26498: PUSH
26499: EMPTY
26500: LIST
26501: LIST
26502: PUSH
26503: LD_INT 2
26505: PUSH
26506: LD_INT 2
26508: PUSH
26509: EMPTY
26510: LIST
26511: LIST
26512: PUSH
26513: LD_INT 1
26515: PUSH
26516: LD_INT 2
26518: PUSH
26519: EMPTY
26520: LIST
26521: LIST
26522: PUSH
26523: LD_INT 0
26525: PUSH
26526: LD_INT 2
26528: PUSH
26529: EMPTY
26530: LIST
26531: LIST
26532: PUSH
26533: LD_INT 1
26535: NEG
26536: PUSH
26537: LD_INT 1
26539: PUSH
26540: EMPTY
26541: LIST
26542: LIST
26543: PUSH
26544: LD_INT 2
26546: NEG
26547: PUSH
26548: LD_INT 0
26550: PUSH
26551: EMPTY
26552: LIST
26553: LIST
26554: PUSH
26555: LD_INT 2
26557: NEG
26558: PUSH
26559: LD_INT 1
26561: NEG
26562: PUSH
26563: EMPTY
26564: LIST
26565: LIST
26566: PUSH
26567: LD_INT 2
26569: NEG
26570: PUSH
26571: LD_INT 2
26573: NEG
26574: PUSH
26575: EMPTY
26576: LIST
26577: LIST
26578: PUSH
26579: EMPTY
26580: LIST
26581: LIST
26582: LIST
26583: LIST
26584: LIST
26585: LIST
26586: LIST
26587: LIST
26588: LIST
26589: LIST
26590: LIST
26591: LIST
26592: LIST
26593: LIST
26594: LIST
26595: LIST
26596: LIST
26597: LIST
26598: LIST
26599: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26600: LD_ADDR_VAR 0 20
26604: PUSH
26605: LD_INT 0
26607: PUSH
26608: LD_INT 0
26610: PUSH
26611: EMPTY
26612: LIST
26613: LIST
26614: PUSH
26615: LD_INT 0
26617: PUSH
26618: LD_INT 1
26620: NEG
26621: PUSH
26622: EMPTY
26623: LIST
26624: LIST
26625: PUSH
26626: LD_INT 1
26628: PUSH
26629: LD_INT 0
26631: PUSH
26632: EMPTY
26633: LIST
26634: LIST
26635: PUSH
26636: LD_INT 1
26638: PUSH
26639: LD_INT 1
26641: PUSH
26642: EMPTY
26643: LIST
26644: LIST
26645: PUSH
26646: LD_INT 0
26648: PUSH
26649: LD_INT 1
26651: PUSH
26652: EMPTY
26653: LIST
26654: LIST
26655: PUSH
26656: LD_INT 1
26658: NEG
26659: PUSH
26660: LD_INT 0
26662: PUSH
26663: EMPTY
26664: LIST
26665: LIST
26666: PUSH
26667: LD_INT 1
26669: NEG
26670: PUSH
26671: LD_INT 1
26673: NEG
26674: PUSH
26675: EMPTY
26676: LIST
26677: LIST
26678: PUSH
26679: LD_INT 1
26681: NEG
26682: PUSH
26683: LD_INT 2
26685: NEG
26686: PUSH
26687: EMPTY
26688: LIST
26689: LIST
26690: PUSH
26691: LD_INT 0
26693: PUSH
26694: LD_INT 2
26696: NEG
26697: PUSH
26698: EMPTY
26699: LIST
26700: LIST
26701: PUSH
26702: LD_INT 1
26704: PUSH
26705: LD_INT 1
26707: NEG
26708: PUSH
26709: EMPTY
26710: LIST
26711: LIST
26712: PUSH
26713: LD_INT 2
26715: PUSH
26716: LD_INT 0
26718: PUSH
26719: EMPTY
26720: LIST
26721: LIST
26722: PUSH
26723: LD_INT 2
26725: PUSH
26726: LD_INT 1
26728: PUSH
26729: EMPTY
26730: LIST
26731: LIST
26732: PUSH
26733: LD_INT 2
26735: PUSH
26736: LD_INT 2
26738: PUSH
26739: EMPTY
26740: LIST
26741: LIST
26742: PUSH
26743: LD_INT 1
26745: PUSH
26746: LD_INT 2
26748: PUSH
26749: EMPTY
26750: LIST
26751: LIST
26752: PUSH
26753: LD_INT 0
26755: PUSH
26756: LD_INT 2
26758: PUSH
26759: EMPTY
26760: LIST
26761: LIST
26762: PUSH
26763: LD_INT 1
26765: NEG
26766: PUSH
26767: LD_INT 1
26769: PUSH
26770: EMPTY
26771: LIST
26772: LIST
26773: PUSH
26774: LD_INT 2
26776: NEG
26777: PUSH
26778: LD_INT 0
26780: PUSH
26781: EMPTY
26782: LIST
26783: LIST
26784: PUSH
26785: LD_INT 2
26787: NEG
26788: PUSH
26789: LD_INT 1
26791: NEG
26792: PUSH
26793: EMPTY
26794: LIST
26795: LIST
26796: PUSH
26797: LD_INT 2
26799: NEG
26800: PUSH
26801: LD_INT 2
26803: NEG
26804: PUSH
26805: EMPTY
26806: LIST
26807: LIST
26808: PUSH
26809: EMPTY
26810: LIST
26811: LIST
26812: LIST
26813: LIST
26814: LIST
26815: LIST
26816: LIST
26817: LIST
26818: LIST
26819: LIST
26820: LIST
26821: LIST
26822: LIST
26823: LIST
26824: LIST
26825: LIST
26826: LIST
26827: LIST
26828: LIST
26829: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26830: LD_ADDR_VAR 0 21
26834: PUSH
26835: LD_INT 0
26837: PUSH
26838: LD_INT 0
26840: PUSH
26841: EMPTY
26842: LIST
26843: LIST
26844: PUSH
26845: LD_INT 0
26847: PUSH
26848: LD_INT 1
26850: NEG
26851: PUSH
26852: EMPTY
26853: LIST
26854: LIST
26855: PUSH
26856: LD_INT 1
26858: PUSH
26859: LD_INT 0
26861: PUSH
26862: EMPTY
26863: LIST
26864: LIST
26865: PUSH
26866: LD_INT 1
26868: PUSH
26869: LD_INT 1
26871: PUSH
26872: EMPTY
26873: LIST
26874: LIST
26875: PUSH
26876: LD_INT 0
26878: PUSH
26879: LD_INT 1
26881: PUSH
26882: EMPTY
26883: LIST
26884: LIST
26885: PUSH
26886: LD_INT 1
26888: NEG
26889: PUSH
26890: LD_INT 0
26892: PUSH
26893: EMPTY
26894: LIST
26895: LIST
26896: PUSH
26897: LD_INT 1
26899: NEG
26900: PUSH
26901: LD_INT 1
26903: NEG
26904: PUSH
26905: EMPTY
26906: LIST
26907: LIST
26908: PUSH
26909: LD_INT 1
26911: NEG
26912: PUSH
26913: LD_INT 2
26915: NEG
26916: PUSH
26917: EMPTY
26918: LIST
26919: LIST
26920: PUSH
26921: LD_INT 0
26923: PUSH
26924: LD_INT 2
26926: NEG
26927: PUSH
26928: EMPTY
26929: LIST
26930: LIST
26931: PUSH
26932: LD_INT 1
26934: PUSH
26935: LD_INT 1
26937: NEG
26938: PUSH
26939: EMPTY
26940: LIST
26941: LIST
26942: PUSH
26943: LD_INT 2
26945: PUSH
26946: LD_INT 0
26948: PUSH
26949: EMPTY
26950: LIST
26951: LIST
26952: PUSH
26953: LD_INT 2
26955: PUSH
26956: LD_INT 1
26958: PUSH
26959: EMPTY
26960: LIST
26961: LIST
26962: PUSH
26963: LD_INT 2
26965: PUSH
26966: LD_INT 2
26968: PUSH
26969: EMPTY
26970: LIST
26971: LIST
26972: PUSH
26973: LD_INT 1
26975: PUSH
26976: LD_INT 2
26978: PUSH
26979: EMPTY
26980: LIST
26981: LIST
26982: PUSH
26983: LD_INT 0
26985: PUSH
26986: LD_INT 2
26988: PUSH
26989: EMPTY
26990: LIST
26991: LIST
26992: PUSH
26993: LD_INT 1
26995: NEG
26996: PUSH
26997: LD_INT 1
26999: PUSH
27000: EMPTY
27001: LIST
27002: LIST
27003: PUSH
27004: LD_INT 2
27006: NEG
27007: PUSH
27008: LD_INT 0
27010: PUSH
27011: EMPTY
27012: LIST
27013: LIST
27014: PUSH
27015: LD_INT 2
27017: NEG
27018: PUSH
27019: LD_INT 1
27021: NEG
27022: PUSH
27023: EMPTY
27024: LIST
27025: LIST
27026: PUSH
27027: LD_INT 2
27029: NEG
27030: PUSH
27031: LD_INT 2
27033: NEG
27034: PUSH
27035: EMPTY
27036: LIST
27037: LIST
27038: PUSH
27039: EMPTY
27040: LIST
27041: LIST
27042: LIST
27043: LIST
27044: LIST
27045: LIST
27046: LIST
27047: LIST
27048: LIST
27049: LIST
27050: LIST
27051: LIST
27052: LIST
27053: LIST
27054: LIST
27055: LIST
27056: LIST
27057: LIST
27058: LIST
27059: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27060: LD_ADDR_VAR 0 22
27064: PUSH
27065: LD_INT 0
27067: PUSH
27068: LD_INT 0
27070: PUSH
27071: EMPTY
27072: LIST
27073: LIST
27074: PUSH
27075: LD_INT 0
27077: PUSH
27078: LD_INT 1
27080: NEG
27081: PUSH
27082: EMPTY
27083: LIST
27084: LIST
27085: PUSH
27086: LD_INT 1
27088: PUSH
27089: LD_INT 0
27091: PUSH
27092: EMPTY
27093: LIST
27094: LIST
27095: PUSH
27096: LD_INT 1
27098: PUSH
27099: LD_INT 1
27101: PUSH
27102: EMPTY
27103: LIST
27104: LIST
27105: PUSH
27106: LD_INT 0
27108: PUSH
27109: LD_INT 1
27111: PUSH
27112: EMPTY
27113: LIST
27114: LIST
27115: PUSH
27116: LD_INT 1
27118: NEG
27119: PUSH
27120: LD_INT 0
27122: PUSH
27123: EMPTY
27124: LIST
27125: LIST
27126: PUSH
27127: LD_INT 1
27129: NEG
27130: PUSH
27131: LD_INT 1
27133: NEG
27134: PUSH
27135: EMPTY
27136: LIST
27137: LIST
27138: PUSH
27139: LD_INT 1
27141: NEG
27142: PUSH
27143: LD_INT 2
27145: NEG
27146: PUSH
27147: EMPTY
27148: LIST
27149: LIST
27150: PUSH
27151: LD_INT 0
27153: PUSH
27154: LD_INT 2
27156: NEG
27157: PUSH
27158: EMPTY
27159: LIST
27160: LIST
27161: PUSH
27162: LD_INT 1
27164: PUSH
27165: LD_INT 1
27167: NEG
27168: PUSH
27169: EMPTY
27170: LIST
27171: LIST
27172: PUSH
27173: LD_INT 2
27175: PUSH
27176: LD_INT 0
27178: PUSH
27179: EMPTY
27180: LIST
27181: LIST
27182: PUSH
27183: LD_INT 2
27185: PUSH
27186: LD_INT 1
27188: PUSH
27189: EMPTY
27190: LIST
27191: LIST
27192: PUSH
27193: LD_INT 2
27195: PUSH
27196: LD_INT 2
27198: PUSH
27199: EMPTY
27200: LIST
27201: LIST
27202: PUSH
27203: LD_INT 1
27205: PUSH
27206: LD_INT 2
27208: PUSH
27209: EMPTY
27210: LIST
27211: LIST
27212: PUSH
27213: LD_INT 0
27215: PUSH
27216: LD_INT 2
27218: PUSH
27219: EMPTY
27220: LIST
27221: LIST
27222: PUSH
27223: LD_INT 1
27225: NEG
27226: PUSH
27227: LD_INT 1
27229: PUSH
27230: EMPTY
27231: LIST
27232: LIST
27233: PUSH
27234: LD_INT 2
27236: NEG
27237: PUSH
27238: LD_INT 0
27240: PUSH
27241: EMPTY
27242: LIST
27243: LIST
27244: PUSH
27245: LD_INT 2
27247: NEG
27248: PUSH
27249: LD_INT 1
27251: NEG
27252: PUSH
27253: EMPTY
27254: LIST
27255: LIST
27256: PUSH
27257: LD_INT 2
27259: NEG
27260: PUSH
27261: LD_INT 2
27263: NEG
27264: PUSH
27265: EMPTY
27266: LIST
27267: LIST
27268: PUSH
27269: EMPTY
27270: LIST
27271: LIST
27272: LIST
27273: LIST
27274: LIST
27275: LIST
27276: LIST
27277: LIST
27278: LIST
27279: LIST
27280: LIST
27281: LIST
27282: LIST
27283: LIST
27284: LIST
27285: LIST
27286: LIST
27287: LIST
27288: LIST
27289: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
27290: LD_ADDR_VAR 0 23
27294: PUSH
27295: LD_INT 0
27297: PUSH
27298: LD_INT 0
27300: PUSH
27301: EMPTY
27302: LIST
27303: LIST
27304: PUSH
27305: LD_INT 0
27307: PUSH
27308: LD_INT 1
27310: NEG
27311: PUSH
27312: EMPTY
27313: LIST
27314: LIST
27315: PUSH
27316: LD_INT 1
27318: PUSH
27319: LD_INT 0
27321: PUSH
27322: EMPTY
27323: LIST
27324: LIST
27325: PUSH
27326: LD_INT 1
27328: PUSH
27329: LD_INT 1
27331: PUSH
27332: EMPTY
27333: LIST
27334: LIST
27335: PUSH
27336: LD_INT 0
27338: PUSH
27339: LD_INT 1
27341: PUSH
27342: EMPTY
27343: LIST
27344: LIST
27345: PUSH
27346: LD_INT 1
27348: NEG
27349: PUSH
27350: LD_INT 0
27352: PUSH
27353: EMPTY
27354: LIST
27355: LIST
27356: PUSH
27357: LD_INT 1
27359: NEG
27360: PUSH
27361: LD_INT 1
27363: NEG
27364: PUSH
27365: EMPTY
27366: LIST
27367: LIST
27368: PUSH
27369: LD_INT 1
27371: NEG
27372: PUSH
27373: LD_INT 2
27375: NEG
27376: PUSH
27377: EMPTY
27378: LIST
27379: LIST
27380: PUSH
27381: LD_INT 0
27383: PUSH
27384: LD_INT 2
27386: NEG
27387: PUSH
27388: EMPTY
27389: LIST
27390: LIST
27391: PUSH
27392: LD_INT 1
27394: PUSH
27395: LD_INT 1
27397: NEG
27398: PUSH
27399: EMPTY
27400: LIST
27401: LIST
27402: PUSH
27403: LD_INT 2
27405: PUSH
27406: LD_INT 0
27408: PUSH
27409: EMPTY
27410: LIST
27411: LIST
27412: PUSH
27413: LD_INT 2
27415: PUSH
27416: LD_INT 1
27418: PUSH
27419: EMPTY
27420: LIST
27421: LIST
27422: PUSH
27423: LD_INT 2
27425: PUSH
27426: LD_INT 2
27428: PUSH
27429: EMPTY
27430: LIST
27431: LIST
27432: PUSH
27433: LD_INT 1
27435: PUSH
27436: LD_INT 2
27438: PUSH
27439: EMPTY
27440: LIST
27441: LIST
27442: PUSH
27443: LD_INT 0
27445: PUSH
27446: LD_INT 2
27448: PUSH
27449: EMPTY
27450: LIST
27451: LIST
27452: PUSH
27453: LD_INT 1
27455: NEG
27456: PUSH
27457: LD_INT 1
27459: PUSH
27460: EMPTY
27461: LIST
27462: LIST
27463: PUSH
27464: LD_INT 2
27466: NEG
27467: PUSH
27468: LD_INT 0
27470: PUSH
27471: EMPTY
27472: LIST
27473: LIST
27474: PUSH
27475: LD_INT 2
27477: NEG
27478: PUSH
27479: LD_INT 1
27481: NEG
27482: PUSH
27483: EMPTY
27484: LIST
27485: LIST
27486: PUSH
27487: LD_INT 2
27489: NEG
27490: PUSH
27491: LD_INT 2
27493: NEG
27494: PUSH
27495: EMPTY
27496: LIST
27497: LIST
27498: PUSH
27499: LD_INT 2
27501: NEG
27502: PUSH
27503: LD_INT 3
27505: NEG
27506: PUSH
27507: EMPTY
27508: LIST
27509: LIST
27510: PUSH
27511: LD_INT 1
27513: NEG
27514: PUSH
27515: LD_INT 3
27517: NEG
27518: PUSH
27519: EMPTY
27520: LIST
27521: LIST
27522: PUSH
27523: LD_INT 1
27525: PUSH
27526: LD_INT 2
27528: NEG
27529: PUSH
27530: EMPTY
27531: LIST
27532: LIST
27533: PUSH
27534: LD_INT 2
27536: PUSH
27537: LD_INT 1
27539: NEG
27540: PUSH
27541: EMPTY
27542: LIST
27543: LIST
27544: PUSH
27545: EMPTY
27546: LIST
27547: LIST
27548: LIST
27549: LIST
27550: LIST
27551: LIST
27552: LIST
27553: LIST
27554: LIST
27555: LIST
27556: LIST
27557: LIST
27558: LIST
27559: LIST
27560: LIST
27561: LIST
27562: LIST
27563: LIST
27564: LIST
27565: LIST
27566: LIST
27567: LIST
27568: LIST
27569: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
27570: LD_ADDR_VAR 0 24
27574: PUSH
27575: LD_INT 0
27577: PUSH
27578: LD_INT 0
27580: PUSH
27581: EMPTY
27582: LIST
27583: LIST
27584: PUSH
27585: LD_INT 0
27587: PUSH
27588: LD_INT 1
27590: NEG
27591: PUSH
27592: EMPTY
27593: LIST
27594: LIST
27595: PUSH
27596: LD_INT 1
27598: PUSH
27599: LD_INT 0
27601: PUSH
27602: EMPTY
27603: LIST
27604: LIST
27605: PUSH
27606: LD_INT 1
27608: PUSH
27609: LD_INT 1
27611: PUSH
27612: EMPTY
27613: LIST
27614: LIST
27615: PUSH
27616: LD_INT 0
27618: PUSH
27619: LD_INT 1
27621: PUSH
27622: EMPTY
27623: LIST
27624: LIST
27625: PUSH
27626: LD_INT 1
27628: NEG
27629: PUSH
27630: LD_INT 0
27632: PUSH
27633: EMPTY
27634: LIST
27635: LIST
27636: PUSH
27637: LD_INT 1
27639: NEG
27640: PUSH
27641: LD_INT 1
27643: NEG
27644: PUSH
27645: EMPTY
27646: LIST
27647: LIST
27648: PUSH
27649: LD_INT 1
27651: NEG
27652: PUSH
27653: LD_INT 2
27655: NEG
27656: PUSH
27657: EMPTY
27658: LIST
27659: LIST
27660: PUSH
27661: LD_INT 0
27663: PUSH
27664: LD_INT 2
27666: NEG
27667: PUSH
27668: EMPTY
27669: LIST
27670: LIST
27671: PUSH
27672: LD_INT 1
27674: PUSH
27675: LD_INT 1
27677: NEG
27678: PUSH
27679: EMPTY
27680: LIST
27681: LIST
27682: PUSH
27683: LD_INT 2
27685: PUSH
27686: LD_INT 0
27688: PUSH
27689: EMPTY
27690: LIST
27691: LIST
27692: PUSH
27693: LD_INT 2
27695: PUSH
27696: LD_INT 1
27698: PUSH
27699: EMPTY
27700: LIST
27701: LIST
27702: PUSH
27703: LD_INT 2
27705: PUSH
27706: LD_INT 2
27708: PUSH
27709: EMPTY
27710: LIST
27711: LIST
27712: PUSH
27713: LD_INT 1
27715: PUSH
27716: LD_INT 2
27718: PUSH
27719: EMPTY
27720: LIST
27721: LIST
27722: PUSH
27723: LD_INT 0
27725: PUSH
27726: LD_INT 2
27728: PUSH
27729: EMPTY
27730: LIST
27731: LIST
27732: PUSH
27733: LD_INT 1
27735: NEG
27736: PUSH
27737: LD_INT 1
27739: PUSH
27740: EMPTY
27741: LIST
27742: LIST
27743: PUSH
27744: LD_INT 2
27746: NEG
27747: PUSH
27748: LD_INT 0
27750: PUSH
27751: EMPTY
27752: LIST
27753: LIST
27754: PUSH
27755: LD_INT 2
27757: NEG
27758: PUSH
27759: LD_INT 1
27761: NEG
27762: PUSH
27763: EMPTY
27764: LIST
27765: LIST
27766: PUSH
27767: LD_INT 2
27769: NEG
27770: PUSH
27771: LD_INT 2
27773: NEG
27774: PUSH
27775: EMPTY
27776: LIST
27777: LIST
27778: PUSH
27779: LD_INT 1
27781: PUSH
27782: LD_INT 2
27784: NEG
27785: PUSH
27786: EMPTY
27787: LIST
27788: LIST
27789: PUSH
27790: LD_INT 2
27792: PUSH
27793: LD_INT 1
27795: NEG
27796: PUSH
27797: EMPTY
27798: LIST
27799: LIST
27800: PUSH
27801: LD_INT 3
27803: PUSH
27804: LD_INT 1
27806: PUSH
27807: EMPTY
27808: LIST
27809: LIST
27810: PUSH
27811: LD_INT 3
27813: PUSH
27814: LD_INT 2
27816: PUSH
27817: EMPTY
27818: LIST
27819: LIST
27820: PUSH
27821: EMPTY
27822: LIST
27823: LIST
27824: LIST
27825: LIST
27826: LIST
27827: LIST
27828: LIST
27829: LIST
27830: LIST
27831: LIST
27832: LIST
27833: LIST
27834: LIST
27835: LIST
27836: LIST
27837: LIST
27838: LIST
27839: LIST
27840: LIST
27841: LIST
27842: LIST
27843: LIST
27844: LIST
27845: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
27846: LD_ADDR_VAR 0 25
27850: PUSH
27851: LD_INT 0
27853: PUSH
27854: LD_INT 0
27856: PUSH
27857: EMPTY
27858: LIST
27859: LIST
27860: PUSH
27861: LD_INT 0
27863: PUSH
27864: LD_INT 1
27866: NEG
27867: PUSH
27868: EMPTY
27869: LIST
27870: LIST
27871: PUSH
27872: LD_INT 1
27874: PUSH
27875: LD_INT 0
27877: PUSH
27878: EMPTY
27879: LIST
27880: LIST
27881: PUSH
27882: LD_INT 1
27884: PUSH
27885: LD_INT 1
27887: PUSH
27888: EMPTY
27889: LIST
27890: LIST
27891: PUSH
27892: LD_INT 0
27894: PUSH
27895: LD_INT 1
27897: PUSH
27898: EMPTY
27899: LIST
27900: LIST
27901: PUSH
27902: LD_INT 1
27904: NEG
27905: PUSH
27906: LD_INT 0
27908: PUSH
27909: EMPTY
27910: LIST
27911: LIST
27912: PUSH
27913: LD_INT 1
27915: NEG
27916: PUSH
27917: LD_INT 1
27919: NEG
27920: PUSH
27921: EMPTY
27922: LIST
27923: LIST
27924: PUSH
27925: LD_INT 1
27927: NEG
27928: PUSH
27929: LD_INT 2
27931: NEG
27932: PUSH
27933: EMPTY
27934: LIST
27935: LIST
27936: PUSH
27937: LD_INT 0
27939: PUSH
27940: LD_INT 2
27942: NEG
27943: PUSH
27944: EMPTY
27945: LIST
27946: LIST
27947: PUSH
27948: LD_INT 1
27950: PUSH
27951: LD_INT 1
27953: NEG
27954: PUSH
27955: EMPTY
27956: LIST
27957: LIST
27958: PUSH
27959: LD_INT 2
27961: PUSH
27962: LD_INT 0
27964: PUSH
27965: EMPTY
27966: LIST
27967: LIST
27968: PUSH
27969: LD_INT 2
27971: PUSH
27972: LD_INT 1
27974: PUSH
27975: EMPTY
27976: LIST
27977: LIST
27978: PUSH
27979: LD_INT 2
27981: PUSH
27982: LD_INT 2
27984: PUSH
27985: EMPTY
27986: LIST
27987: LIST
27988: PUSH
27989: LD_INT 1
27991: PUSH
27992: LD_INT 2
27994: PUSH
27995: EMPTY
27996: LIST
27997: LIST
27998: PUSH
27999: LD_INT 0
28001: PUSH
28002: LD_INT 2
28004: PUSH
28005: EMPTY
28006: LIST
28007: LIST
28008: PUSH
28009: LD_INT 1
28011: NEG
28012: PUSH
28013: LD_INT 1
28015: PUSH
28016: EMPTY
28017: LIST
28018: LIST
28019: PUSH
28020: LD_INT 2
28022: NEG
28023: PUSH
28024: LD_INT 0
28026: PUSH
28027: EMPTY
28028: LIST
28029: LIST
28030: PUSH
28031: LD_INT 2
28033: NEG
28034: PUSH
28035: LD_INT 1
28037: NEG
28038: PUSH
28039: EMPTY
28040: LIST
28041: LIST
28042: PUSH
28043: LD_INT 2
28045: NEG
28046: PUSH
28047: LD_INT 2
28049: NEG
28050: PUSH
28051: EMPTY
28052: LIST
28053: LIST
28054: PUSH
28055: LD_INT 3
28057: PUSH
28058: LD_INT 1
28060: PUSH
28061: EMPTY
28062: LIST
28063: LIST
28064: PUSH
28065: LD_INT 3
28067: PUSH
28068: LD_INT 2
28070: PUSH
28071: EMPTY
28072: LIST
28073: LIST
28074: PUSH
28075: LD_INT 2
28077: PUSH
28078: LD_INT 3
28080: PUSH
28081: EMPTY
28082: LIST
28083: LIST
28084: PUSH
28085: LD_INT 1
28087: PUSH
28088: LD_INT 3
28090: PUSH
28091: EMPTY
28092: LIST
28093: LIST
28094: PUSH
28095: EMPTY
28096: LIST
28097: LIST
28098: LIST
28099: LIST
28100: LIST
28101: LIST
28102: LIST
28103: LIST
28104: LIST
28105: LIST
28106: LIST
28107: LIST
28108: LIST
28109: LIST
28110: LIST
28111: LIST
28112: LIST
28113: LIST
28114: LIST
28115: LIST
28116: LIST
28117: LIST
28118: LIST
28119: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
28120: LD_ADDR_VAR 0 26
28124: PUSH
28125: LD_INT 0
28127: PUSH
28128: LD_INT 0
28130: PUSH
28131: EMPTY
28132: LIST
28133: LIST
28134: PUSH
28135: LD_INT 0
28137: PUSH
28138: LD_INT 1
28140: NEG
28141: PUSH
28142: EMPTY
28143: LIST
28144: LIST
28145: PUSH
28146: LD_INT 1
28148: PUSH
28149: LD_INT 0
28151: PUSH
28152: EMPTY
28153: LIST
28154: LIST
28155: PUSH
28156: LD_INT 1
28158: PUSH
28159: LD_INT 1
28161: PUSH
28162: EMPTY
28163: LIST
28164: LIST
28165: PUSH
28166: LD_INT 0
28168: PUSH
28169: LD_INT 1
28171: PUSH
28172: EMPTY
28173: LIST
28174: LIST
28175: PUSH
28176: LD_INT 1
28178: NEG
28179: PUSH
28180: LD_INT 0
28182: PUSH
28183: EMPTY
28184: LIST
28185: LIST
28186: PUSH
28187: LD_INT 1
28189: NEG
28190: PUSH
28191: LD_INT 1
28193: NEG
28194: PUSH
28195: EMPTY
28196: LIST
28197: LIST
28198: PUSH
28199: LD_INT 1
28201: NEG
28202: PUSH
28203: LD_INT 2
28205: NEG
28206: PUSH
28207: EMPTY
28208: LIST
28209: LIST
28210: PUSH
28211: LD_INT 0
28213: PUSH
28214: LD_INT 2
28216: NEG
28217: PUSH
28218: EMPTY
28219: LIST
28220: LIST
28221: PUSH
28222: LD_INT 1
28224: PUSH
28225: LD_INT 1
28227: NEG
28228: PUSH
28229: EMPTY
28230: LIST
28231: LIST
28232: PUSH
28233: LD_INT 2
28235: PUSH
28236: LD_INT 0
28238: PUSH
28239: EMPTY
28240: LIST
28241: LIST
28242: PUSH
28243: LD_INT 2
28245: PUSH
28246: LD_INT 1
28248: PUSH
28249: EMPTY
28250: LIST
28251: LIST
28252: PUSH
28253: LD_INT 2
28255: PUSH
28256: LD_INT 2
28258: PUSH
28259: EMPTY
28260: LIST
28261: LIST
28262: PUSH
28263: LD_INT 1
28265: PUSH
28266: LD_INT 2
28268: PUSH
28269: EMPTY
28270: LIST
28271: LIST
28272: PUSH
28273: LD_INT 0
28275: PUSH
28276: LD_INT 2
28278: PUSH
28279: EMPTY
28280: LIST
28281: LIST
28282: PUSH
28283: LD_INT 1
28285: NEG
28286: PUSH
28287: LD_INT 1
28289: PUSH
28290: EMPTY
28291: LIST
28292: LIST
28293: PUSH
28294: LD_INT 2
28296: NEG
28297: PUSH
28298: LD_INT 0
28300: PUSH
28301: EMPTY
28302: LIST
28303: LIST
28304: PUSH
28305: LD_INT 2
28307: NEG
28308: PUSH
28309: LD_INT 1
28311: NEG
28312: PUSH
28313: EMPTY
28314: LIST
28315: LIST
28316: PUSH
28317: LD_INT 2
28319: NEG
28320: PUSH
28321: LD_INT 2
28323: NEG
28324: PUSH
28325: EMPTY
28326: LIST
28327: LIST
28328: PUSH
28329: LD_INT 2
28331: PUSH
28332: LD_INT 3
28334: PUSH
28335: EMPTY
28336: LIST
28337: LIST
28338: PUSH
28339: LD_INT 1
28341: PUSH
28342: LD_INT 3
28344: PUSH
28345: EMPTY
28346: LIST
28347: LIST
28348: PUSH
28349: LD_INT 1
28351: NEG
28352: PUSH
28353: LD_INT 2
28355: PUSH
28356: EMPTY
28357: LIST
28358: LIST
28359: PUSH
28360: LD_INT 2
28362: NEG
28363: PUSH
28364: LD_INT 1
28366: PUSH
28367: EMPTY
28368: LIST
28369: LIST
28370: PUSH
28371: EMPTY
28372: LIST
28373: LIST
28374: LIST
28375: LIST
28376: LIST
28377: LIST
28378: LIST
28379: LIST
28380: LIST
28381: LIST
28382: LIST
28383: LIST
28384: LIST
28385: LIST
28386: LIST
28387: LIST
28388: LIST
28389: LIST
28390: LIST
28391: LIST
28392: LIST
28393: LIST
28394: LIST
28395: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
28396: LD_ADDR_VAR 0 27
28400: PUSH
28401: LD_INT 0
28403: PUSH
28404: LD_INT 0
28406: PUSH
28407: EMPTY
28408: LIST
28409: LIST
28410: PUSH
28411: LD_INT 0
28413: PUSH
28414: LD_INT 1
28416: NEG
28417: PUSH
28418: EMPTY
28419: LIST
28420: LIST
28421: PUSH
28422: LD_INT 1
28424: PUSH
28425: LD_INT 0
28427: PUSH
28428: EMPTY
28429: LIST
28430: LIST
28431: PUSH
28432: LD_INT 1
28434: PUSH
28435: LD_INT 1
28437: PUSH
28438: EMPTY
28439: LIST
28440: LIST
28441: PUSH
28442: LD_INT 0
28444: PUSH
28445: LD_INT 1
28447: PUSH
28448: EMPTY
28449: LIST
28450: LIST
28451: PUSH
28452: LD_INT 1
28454: NEG
28455: PUSH
28456: LD_INT 0
28458: PUSH
28459: EMPTY
28460: LIST
28461: LIST
28462: PUSH
28463: LD_INT 1
28465: NEG
28466: PUSH
28467: LD_INT 1
28469: NEG
28470: PUSH
28471: EMPTY
28472: LIST
28473: LIST
28474: PUSH
28475: LD_INT 1
28477: NEG
28478: PUSH
28479: LD_INT 2
28481: NEG
28482: PUSH
28483: EMPTY
28484: LIST
28485: LIST
28486: PUSH
28487: LD_INT 0
28489: PUSH
28490: LD_INT 2
28492: NEG
28493: PUSH
28494: EMPTY
28495: LIST
28496: LIST
28497: PUSH
28498: LD_INT 1
28500: PUSH
28501: LD_INT 1
28503: NEG
28504: PUSH
28505: EMPTY
28506: LIST
28507: LIST
28508: PUSH
28509: LD_INT 2
28511: PUSH
28512: LD_INT 0
28514: PUSH
28515: EMPTY
28516: LIST
28517: LIST
28518: PUSH
28519: LD_INT 2
28521: PUSH
28522: LD_INT 1
28524: PUSH
28525: EMPTY
28526: LIST
28527: LIST
28528: PUSH
28529: LD_INT 2
28531: PUSH
28532: LD_INT 2
28534: PUSH
28535: EMPTY
28536: LIST
28537: LIST
28538: PUSH
28539: LD_INT 1
28541: PUSH
28542: LD_INT 2
28544: PUSH
28545: EMPTY
28546: LIST
28547: LIST
28548: PUSH
28549: LD_INT 0
28551: PUSH
28552: LD_INT 2
28554: PUSH
28555: EMPTY
28556: LIST
28557: LIST
28558: PUSH
28559: LD_INT 1
28561: NEG
28562: PUSH
28563: LD_INT 1
28565: PUSH
28566: EMPTY
28567: LIST
28568: LIST
28569: PUSH
28570: LD_INT 2
28572: NEG
28573: PUSH
28574: LD_INT 0
28576: PUSH
28577: EMPTY
28578: LIST
28579: LIST
28580: PUSH
28581: LD_INT 2
28583: NEG
28584: PUSH
28585: LD_INT 1
28587: NEG
28588: PUSH
28589: EMPTY
28590: LIST
28591: LIST
28592: PUSH
28593: LD_INT 2
28595: NEG
28596: PUSH
28597: LD_INT 2
28599: NEG
28600: PUSH
28601: EMPTY
28602: LIST
28603: LIST
28604: PUSH
28605: LD_INT 1
28607: NEG
28608: PUSH
28609: LD_INT 2
28611: PUSH
28612: EMPTY
28613: LIST
28614: LIST
28615: PUSH
28616: LD_INT 2
28618: NEG
28619: PUSH
28620: LD_INT 1
28622: PUSH
28623: EMPTY
28624: LIST
28625: LIST
28626: PUSH
28627: LD_INT 3
28629: NEG
28630: PUSH
28631: LD_INT 1
28633: NEG
28634: PUSH
28635: EMPTY
28636: LIST
28637: LIST
28638: PUSH
28639: LD_INT 3
28641: NEG
28642: PUSH
28643: LD_INT 2
28645: NEG
28646: PUSH
28647: EMPTY
28648: LIST
28649: LIST
28650: PUSH
28651: EMPTY
28652: LIST
28653: LIST
28654: LIST
28655: LIST
28656: LIST
28657: LIST
28658: LIST
28659: LIST
28660: LIST
28661: LIST
28662: LIST
28663: LIST
28664: LIST
28665: LIST
28666: LIST
28667: LIST
28668: LIST
28669: LIST
28670: LIST
28671: LIST
28672: LIST
28673: LIST
28674: LIST
28675: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
28676: LD_ADDR_VAR 0 28
28680: PUSH
28681: LD_INT 0
28683: PUSH
28684: LD_INT 0
28686: PUSH
28687: EMPTY
28688: LIST
28689: LIST
28690: PUSH
28691: LD_INT 0
28693: PUSH
28694: LD_INT 1
28696: NEG
28697: PUSH
28698: EMPTY
28699: LIST
28700: LIST
28701: PUSH
28702: LD_INT 1
28704: PUSH
28705: LD_INT 0
28707: PUSH
28708: EMPTY
28709: LIST
28710: LIST
28711: PUSH
28712: LD_INT 1
28714: PUSH
28715: LD_INT 1
28717: PUSH
28718: EMPTY
28719: LIST
28720: LIST
28721: PUSH
28722: LD_INT 0
28724: PUSH
28725: LD_INT 1
28727: PUSH
28728: EMPTY
28729: LIST
28730: LIST
28731: PUSH
28732: LD_INT 1
28734: NEG
28735: PUSH
28736: LD_INT 0
28738: PUSH
28739: EMPTY
28740: LIST
28741: LIST
28742: PUSH
28743: LD_INT 1
28745: NEG
28746: PUSH
28747: LD_INT 1
28749: NEG
28750: PUSH
28751: EMPTY
28752: LIST
28753: LIST
28754: PUSH
28755: LD_INT 1
28757: NEG
28758: PUSH
28759: LD_INT 2
28761: NEG
28762: PUSH
28763: EMPTY
28764: LIST
28765: LIST
28766: PUSH
28767: LD_INT 0
28769: PUSH
28770: LD_INT 2
28772: NEG
28773: PUSH
28774: EMPTY
28775: LIST
28776: LIST
28777: PUSH
28778: LD_INT 1
28780: PUSH
28781: LD_INT 1
28783: NEG
28784: PUSH
28785: EMPTY
28786: LIST
28787: LIST
28788: PUSH
28789: LD_INT 2
28791: PUSH
28792: LD_INT 0
28794: PUSH
28795: EMPTY
28796: LIST
28797: LIST
28798: PUSH
28799: LD_INT 2
28801: PUSH
28802: LD_INT 1
28804: PUSH
28805: EMPTY
28806: LIST
28807: LIST
28808: PUSH
28809: LD_INT 2
28811: PUSH
28812: LD_INT 2
28814: PUSH
28815: EMPTY
28816: LIST
28817: LIST
28818: PUSH
28819: LD_INT 1
28821: PUSH
28822: LD_INT 2
28824: PUSH
28825: EMPTY
28826: LIST
28827: LIST
28828: PUSH
28829: LD_INT 0
28831: PUSH
28832: LD_INT 2
28834: PUSH
28835: EMPTY
28836: LIST
28837: LIST
28838: PUSH
28839: LD_INT 1
28841: NEG
28842: PUSH
28843: LD_INT 1
28845: PUSH
28846: EMPTY
28847: LIST
28848: LIST
28849: PUSH
28850: LD_INT 2
28852: NEG
28853: PUSH
28854: LD_INT 0
28856: PUSH
28857: EMPTY
28858: LIST
28859: LIST
28860: PUSH
28861: LD_INT 2
28863: NEG
28864: PUSH
28865: LD_INT 1
28867: NEG
28868: PUSH
28869: EMPTY
28870: LIST
28871: LIST
28872: PUSH
28873: LD_INT 2
28875: NEG
28876: PUSH
28877: LD_INT 2
28879: NEG
28880: PUSH
28881: EMPTY
28882: LIST
28883: LIST
28884: PUSH
28885: LD_INT 2
28887: NEG
28888: PUSH
28889: LD_INT 3
28891: NEG
28892: PUSH
28893: EMPTY
28894: LIST
28895: LIST
28896: PUSH
28897: LD_INT 1
28899: NEG
28900: PUSH
28901: LD_INT 3
28903: NEG
28904: PUSH
28905: EMPTY
28906: LIST
28907: LIST
28908: PUSH
28909: LD_INT 3
28911: NEG
28912: PUSH
28913: LD_INT 1
28915: NEG
28916: PUSH
28917: EMPTY
28918: LIST
28919: LIST
28920: PUSH
28921: LD_INT 3
28923: NEG
28924: PUSH
28925: LD_INT 2
28927: NEG
28928: PUSH
28929: EMPTY
28930: LIST
28931: LIST
28932: PUSH
28933: EMPTY
28934: LIST
28935: LIST
28936: LIST
28937: LIST
28938: LIST
28939: LIST
28940: LIST
28941: LIST
28942: LIST
28943: LIST
28944: LIST
28945: LIST
28946: LIST
28947: LIST
28948: LIST
28949: LIST
28950: LIST
28951: LIST
28952: LIST
28953: LIST
28954: LIST
28955: LIST
28956: LIST
28957: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
28958: LD_ADDR_VAR 0 29
28962: PUSH
28963: LD_INT 0
28965: PUSH
28966: LD_INT 0
28968: PUSH
28969: EMPTY
28970: LIST
28971: LIST
28972: PUSH
28973: LD_INT 0
28975: PUSH
28976: LD_INT 1
28978: NEG
28979: PUSH
28980: EMPTY
28981: LIST
28982: LIST
28983: PUSH
28984: LD_INT 1
28986: PUSH
28987: LD_INT 0
28989: PUSH
28990: EMPTY
28991: LIST
28992: LIST
28993: PUSH
28994: LD_INT 1
28996: PUSH
28997: LD_INT 1
28999: PUSH
29000: EMPTY
29001: LIST
29002: LIST
29003: PUSH
29004: LD_INT 0
29006: PUSH
29007: LD_INT 1
29009: PUSH
29010: EMPTY
29011: LIST
29012: LIST
29013: PUSH
29014: LD_INT 1
29016: NEG
29017: PUSH
29018: LD_INT 0
29020: PUSH
29021: EMPTY
29022: LIST
29023: LIST
29024: PUSH
29025: LD_INT 1
29027: NEG
29028: PUSH
29029: LD_INT 1
29031: NEG
29032: PUSH
29033: EMPTY
29034: LIST
29035: LIST
29036: PUSH
29037: LD_INT 1
29039: NEG
29040: PUSH
29041: LD_INT 2
29043: NEG
29044: PUSH
29045: EMPTY
29046: LIST
29047: LIST
29048: PUSH
29049: LD_INT 0
29051: PUSH
29052: LD_INT 2
29054: NEG
29055: PUSH
29056: EMPTY
29057: LIST
29058: LIST
29059: PUSH
29060: LD_INT 1
29062: PUSH
29063: LD_INT 1
29065: NEG
29066: PUSH
29067: EMPTY
29068: LIST
29069: LIST
29070: PUSH
29071: LD_INT 2
29073: PUSH
29074: LD_INT 0
29076: PUSH
29077: EMPTY
29078: LIST
29079: LIST
29080: PUSH
29081: LD_INT 2
29083: PUSH
29084: LD_INT 1
29086: PUSH
29087: EMPTY
29088: LIST
29089: LIST
29090: PUSH
29091: LD_INT 1
29093: PUSH
29094: LD_INT 2
29096: PUSH
29097: EMPTY
29098: LIST
29099: LIST
29100: PUSH
29101: LD_INT 0
29103: PUSH
29104: LD_INT 2
29106: PUSH
29107: EMPTY
29108: LIST
29109: LIST
29110: PUSH
29111: LD_INT 1
29113: NEG
29114: PUSH
29115: LD_INT 1
29117: PUSH
29118: EMPTY
29119: LIST
29120: LIST
29121: PUSH
29122: LD_INT 2
29124: NEG
29125: PUSH
29126: LD_INT 1
29128: NEG
29129: PUSH
29130: EMPTY
29131: LIST
29132: LIST
29133: PUSH
29134: LD_INT 2
29136: NEG
29137: PUSH
29138: LD_INT 2
29140: NEG
29141: PUSH
29142: EMPTY
29143: LIST
29144: LIST
29145: PUSH
29146: LD_INT 2
29148: NEG
29149: PUSH
29150: LD_INT 3
29152: NEG
29153: PUSH
29154: EMPTY
29155: LIST
29156: LIST
29157: PUSH
29158: LD_INT 2
29160: PUSH
29161: LD_INT 1
29163: NEG
29164: PUSH
29165: EMPTY
29166: LIST
29167: LIST
29168: PUSH
29169: LD_INT 3
29171: PUSH
29172: LD_INT 1
29174: PUSH
29175: EMPTY
29176: LIST
29177: LIST
29178: PUSH
29179: LD_INT 1
29181: PUSH
29182: LD_INT 3
29184: PUSH
29185: EMPTY
29186: LIST
29187: LIST
29188: PUSH
29189: LD_INT 1
29191: NEG
29192: PUSH
29193: LD_INT 2
29195: PUSH
29196: EMPTY
29197: LIST
29198: LIST
29199: PUSH
29200: LD_INT 3
29202: NEG
29203: PUSH
29204: LD_INT 2
29206: NEG
29207: PUSH
29208: EMPTY
29209: LIST
29210: LIST
29211: PUSH
29212: EMPTY
29213: LIST
29214: LIST
29215: LIST
29216: LIST
29217: LIST
29218: LIST
29219: LIST
29220: LIST
29221: LIST
29222: LIST
29223: LIST
29224: LIST
29225: LIST
29226: LIST
29227: LIST
29228: LIST
29229: LIST
29230: LIST
29231: LIST
29232: LIST
29233: LIST
29234: LIST
29235: LIST
29236: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
29237: LD_ADDR_VAR 0 30
29241: PUSH
29242: LD_INT 0
29244: PUSH
29245: LD_INT 0
29247: PUSH
29248: EMPTY
29249: LIST
29250: LIST
29251: PUSH
29252: LD_INT 0
29254: PUSH
29255: LD_INT 1
29257: NEG
29258: PUSH
29259: EMPTY
29260: LIST
29261: LIST
29262: PUSH
29263: LD_INT 1
29265: PUSH
29266: LD_INT 0
29268: PUSH
29269: EMPTY
29270: LIST
29271: LIST
29272: PUSH
29273: LD_INT 1
29275: PUSH
29276: LD_INT 1
29278: PUSH
29279: EMPTY
29280: LIST
29281: LIST
29282: PUSH
29283: LD_INT 0
29285: PUSH
29286: LD_INT 1
29288: PUSH
29289: EMPTY
29290: LIST
29291: LIST
29292: PUSH
29293: LD_INT 1
29295: NEG
29296: PUSH
29297: LD_INT 0
29299: PUSH
29300: EMPTY
29301: LIST
29302: LIST
29303: PUSH
29304: LD_INT 1
29306: NEG
29307: PUSH
29308: LD_INT 1
29310: NEG
29311: PUSH
29312: EMPTY
29313: LIST
29314: LIST
29315: PUSH
29316: LD_INT 1
29318: NEG
29319: PUSH
29320: LD_INT 2
29322: NEG
29323: PUSH
29324: EMPTY
29325: LIST
29326: LIST
29327: PUSH
29328: LD_INT 0
29330: PUSH
29331: LD_INT 2
29333: NEG
29334: PUSH
29335: EMPTY
29336: LIST
29337: LIST
29338: PUSH
29339: LD_INT 1
29341: PUSH
29342: LD_INT 1
29344: NEG
29345: PUSH
29346: EMPTY
29347: LIST
29348: LIST
29349: PUSH
29350: LD_INT 2
29352: PUSH
29353: LD_INT 0
29355: PUSH
29356: EMPTY
29357: LIST
29358: LIST
29359: PUSH
29360: LD_INT 2
29362: PUSH
29363: LD_INT 1
29365: PUSH
29366: EMPTY
29367: LIST
29368: LIST
29369: PUSH
29370: LD_INT 2
29372: PUSH
29373: LD_INT 2
29375: PUSH
29376: EMPTY
29377: LIST
29378: LIST
29379: PUSH
29380: LD_INT 1
29382: PUSH
29383: LD_INT 2
29385: PUSH
29386: EMPTY
29387: LIST
29388: LIST
29389: PUSH
29390: LD_INT 1
29392: NEG
29393: PUSH
29394: LD_INT 1
29396: PUSH
29397: EMPTY
29398: LIST
29399: LIST
29400: PUSH
29401: LD_INT 2
29403: NEG
29404: PUSH
29405: LD_INT 0
29407: PUSH
29408: EMPTY
29409: LIST
29410: LIST
29411: PUSH
29412: LD_INT 2
29414: NEG
29415: PUSH
29416: LD_INT 1
29418: NEG
29419: PUSH
29420: EMPTY
29421: LIST
29422: LIST
29423: PUSH
29424: LD_INT 1
29426: NEG
29427: PUSH
29428: LD_INT 3
29430: NEG
29431: PUSH
29432: EMPTY
29433: LIST
29434: LIST
29435: PUSH
29436: LD_INT 1
29438: PUSH
29439: LD_INT 2
29441: NEG
29442: PUSH
29443: EMPTY
29444: LIST
29445: LIST
29446: PUSH
29447: LD_INT 3
29449: PUSH
29450: LD_INT 2
29452: PUSH
29453: EMPTY
29454: LIST
29455: LIST
29456: PUSH
29457: LD_INT 2
29459: PUSH
29460: LD_INT 3
29462: PUSH
29463: EMPTY
29464: LIST
29465: LIST
29466: PUSH
29467: LD_INT 2
29469: NEG
29470: PUSH
29471: LD_INT 1
29473: PUSH
29474: EMPTY
29475: LIST
29476: LIST
29477: PUSH
29478: LD_INT 3
29480: NEG
29481: PUSH
29482: LD_INT 1
29484: NEG
29485: PUSH
29486: EMPTY
29487: LIST
29488: LIST
29489: PUSH
29490: EMPTY
29491: LIST
29492: LIST
29493: LIST
29494: LIST
29495: LIST
29496: LIST
29497: LIST
29498: LIST
29499: LIST
29500: LIST
29501: LIST
29502: LIST
29503: LIST
29504: LIST
29505: LIST
29506: LIST
29507: LIST
29508: LIST
29509: LIST
29510: LIST
29511: LIST
29512: LIST
29513: LIST
29514: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
29515: LD_ADDR_VAR 0 31
29519: PUSH
29520: LD_INT 0
29522: PUSH
29523: LD_INT 0
29525: PUSH
29526: EMPTY
29527: LIST
29528: LIST
29529: PUSH
29530: LD_INT 0
29532: PUSH
29533: LD_INT 1
29535: NEG
29536: PUSH
29537: EMPTY
29538: LIST
29539: LIST
29540: PUSH
29541: LD_INT 1
29543: PUSH
29544: LD_INT 0
29546: PUSH
29547: EMPTY
29548: LIST
29549: LIST
29550: PUSH
29551: LD_INT 1
29553: PUSH
29554: LD_INT 1
29556: PUSH
29557: EMPTY
29558: LIST
29559: LIST
29560: PUSH
29561: LD_INT 0
29563: PUSH
29564: LD_INT 1
29566: PUSH
29567: EMPTY
29568: LIST
29569: LIST
29570: PUSH
29571: LD_INT 1
29573: NEG
29574: PUSH
29575: LD_INT 0
29577: PUSH
29578: EMPTY
29579: LIST
29580: LIST
29581: PUSH
29582: LD_INT 1
29584: NEG
29585: PUSH
29586: LD_INT 1
29588: NEG
29589: PUSH
29590: EMPTY
29591: LIST
29592: LIST
29593: PUSH
29594: LD_INT 1
29596: NEG
29597: PUSH
29598: LD_INT 2
29600: NEG
29601: PUSH
29602: EMPTY
29603: LIST
29604: LIST
29605: PUSH
29606: LD_INT 1
29608: PUSH
29609: LD_INT 1
29611: NEG
29612: PUSH
29613: EMPTY
29614: LIST
29615: LIST
29616: PUSH
29617: LD_INT 2
29619: PUSH
29620: LD_INT 0
29622: PUSH
29623: EMPTY
29624: LIST
29625: LIST
29626: PUSH
29627: LD_INT 2
29629: PUSH
29630: LD_INT 1
29632: PUSH
29633: EMPTY
29634: LIST
29635: LIST
29636: PUSH
29637: LD_INT 2
29639: PUSH
29640: LD_INT 2
29642: PUSH
29643: EMPTY
29644: LIST
29645: LIST
29646: PUSH
29647: LD_INT 1
29649: PUSH
29650: LD_INT 2
29652: PUSH
29653: EMPTY
29654: LIST
29655: LIST
29656: PUSH
29657: LD_INT 0
29659: PUSH
29660: LD_INT 2
29662: PUSH
29663: EMPTY
29664: LIST
29665: LIST
29666: PUSH
29667: LD_INT 1
29669: NEG
29670: PUSH
29671: LD_INT 1
29673: PUSH
29674: EMPTY
29675: LIST
29676: LIST
29677: PUSH
29678: LD_INT 2
29680: NEG
29681: PUSH
29682: LD_INT 1
29684: NEG
29685: PUSH
29686: EMPTY
29687: LIST
29688: LIST
29689: PUSH
29690: LD_INT 2
29692: NEG
29693: PUSH
29694: LD_INT 2
29696: NEG
29697: PUSH
29698: EMPTY
29699: LIST
29700: LIST
29701: PUSH
29702: LD_INT 2
29704: NEG
29705: PUSH
29706: LD_INT 3
29708: NEG
29709: PUSH
29710: EMPTY
29711: LIST
29712: LIST
29713: PUSH
29714: LD_INT 2
29716: PUSH
29717: LD_INT 1
29719: NEG
29720: PUSH
29721: EMPTY
29722: LIST
29723: LIST
29724: PUSH
29725: LD_INT 3
29727: PUSH
29728: LD_INT 1
29730: PUSH
29731: EMPTY
29732: LIST
29733: LIST
29734: PUSH
29735: LD_INT 1
29737: PUSH
29738: LD_INT 3
29740: PUSH
29741: EMPTY
29742: LIST
29743: LIST
29744: PUSH
29745: LD_INT 1
29747: NEG
29748: PUSH
29749: LD_INT 2
29751: PUSH
29752: EMPTY
29753: LIST
29754: LIST
29755: PUSH
29756: LD_INT 3
29758: NEG
29759: PUSH
29760: LD_INT 2
29762: NEG
29763: PUSH
29764: EMPTY
29765: LIST
29766: LIST
29767: PUSH
29768: EMPTY
29769: LIST
29770: LIST
29771: LIST
29772: LIST
29773: LIST
29774: LIST
29775: LIST
29776: LIST
29777: LIST
29778: LIST
29779: LIST
29780: LIST
29781: LIST
29782: LIST
29783: LIST
29784: LIST
29785: LIST
29786: LIST
29787: LIST
29788: LIST
29789: LIST
29790: LIST
29791: LIST
29792: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
29793: LD_ADDR_VAR 0 32
29797: PUSH
29798: LD_INT 0
29800: PUSH
29801: LD_INT 0
29803: PUSH
29804: EMPTY
29805: LIST
29806: LIST
29807: PUSH
29808: LD_INT 0
29810: PUSH
29811: LD_INT 1
29813: NEG
29814: PUSH
29815: EMPTY
29816: LIST
29817: LIST
29818: PUSH
29819: LD_INT 1
29821: PUSH
29822: LD_INT 0
29824: PUSH
29825: EMPTY
29826: LIST
29827: LIST
29828: PUSH
29829: LD_INT 1
29831: PUSH
29832: LD_INT 1
29834: PUSH
29835: EMPTY
29836: LIST
29837: LIST
29838: PUSH
29839: LD_INT 0
29841: PUSH
29842: LD_INT 1
29844: PUSH
29845: EMPTY
29846: LIST
29847: LIST
29848: PUSH
29849: LD_INT 1
29851: NEG
29852: PUSH
29853: LD_INT 0
29855: PUSH
29856: EMPTY
29857: LIST
29858: LIST
29859: PUSH
29860: LD_INT 1
29862: NEG
29863: PUSH
29864: LD_INT 1
29866: NEG
29867: PUSH
29868: EMPTY
29869: LIST
29870: LIST
29871: PUSH
29872: LD_INT 1
29874: NEG
29875: PUSH
29876: LD_INT 2
29878: NEG
29879: PUSH
29880: EMPTY
29881: LIST
29882: LIST
29883: PUSH
29884: LD_INT 0
29886: PUSH
29887: LD_INT 2
29889: NEG
29890: PUSH
29891: EMPTY
29892: LIST
29893: LIST
29894: PUSH
29895: LD_INT 1
29897: PUSH
29898: LD_INT 1
29900: NEG
29901: PUSH
29902: EMPTY
29903: LIST
29904: LIST
29905: PUSH
29906: LD_INT 2
29908: PUSH
29909: LD_INT 1
29911: PUSH
29912: EMPTY
29913: LIST
29914: LIST
29915: PUSH
29916: LD_INT 2
29918: PUSH
29919: LD_INT 2
29921: PUSH
29922: EMPTY
29923: LIST
29924: LIST
29925: PUSH
29926: LD_INT 1
29928: PUSH
29929: LD_INT 2
29931: PUSH
29932: EMPTY
29933: LIST
29934: LIST
29935: PUSH
29936: LD_INT 0
29938: PUSH
29939: LD_INT 2
29941: PUSH
29942: EMPTY
29943: LIST
29944: LIST
29945: PUSH
29946: LD_INT 1
29948: NEG
29949: PUSH
29950: LD_INT 1
29952: PUSH
29953: EMPTY
29954: LIST
29955: LIST
29956: PUSH
29957: LD_INT 2
29959: NEG
29960: PUSH
29961: LD_INT 0
29963: PUSH
29964: EMPTY
29965: LIST
29966: LIST
29967: PUSH
29968: LD_INT 2
29970: NEG
29971: PUSH
29972: LD_INT 1
29974: NEG
29975: PUSH
29976: EMPTY
29977: LIST
29978: LIST
29979: PUSH
29980: LD_INT 1
29982: NEG
29983: PUSH
29984: LD_INT 3
29986: NEG
29987: PUSH
29988: EMPTY
29989: LIST
29990: LIST
29991: PUSH
29992: LD_INT 1
29994: PUSH
29995: LD_INT 2
29997: NEG
29998: PUSH
29999: EMPTY
30000: LIST
30001: LIST
30002: PUSH
30003: LD_INT 3
30005: PUSH
30006: LD_INT 2
30008: PUSH
30009: EMPTY
30010: LIST
30011: LIST
30012: PUSH
30013: LD_INT 2
30015: PUSH
30016: LD_INT 3
30018: PUSH
30019: EMPTY
30020: LIST
30021: LIST
30022: PUSH
30023: LD_INT 2
30025: NEG
30026: PUSH
30027: LD_INT 1
30029: PUSH
30030: EMPTY
30031: LIST
30032: LIST
30033: PUSH
30034: LD_INT 3
30036: NEG
30037: PUSH
30038: LD_INT 1
30040: NEG
30041: PUSH
30042: EMPTY
30043: LIST
30044: LIST
30045: PUSH
30046: EMPTY
30047: LIST
30048: LIST
30049: LIST
30050: LIST
30051: LIST
30052: LIST
30053: LIST
30054: LIST
30055: LIST
30056: LIST
30057: LIST
30058: LIST
30059: LIST
30060: LIST
30061: LIST
30062: LIST
30063: LIST
30064: LIST
30065: LIST
30066: LIST
30067: LIST
30068: LIST
30069: LIST
30070: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
30071: LD_ADDR_VAR 0 33
30075: PUSH
30076: LD_INT 0
30078: PUSH
30079: LD_INT 0
30081: PUSH
30082: EMPTY
30083: LIST
30084: LIST
30085: PUSH
30086: LD_INT 0
30088: PUSH
30089: LD_INT 1
30091: NEG
30092: PUSH
30093: EMPTY
30094: LIST
30095: LIST
30096: PUSH
30097: LD_INT 1
30099: PUSH
30100: LD_INT 0
30102: PUSH
30103: EMPTY
30104: LIST
30105: LIST
30106: PUSH
30107: LD_INT 1
30109: PUSH
30110: LD_INT 1
30112: PUSH
30113: EMPTY
30114: LIST
30115: LIST
30116: PUSH
30117: LD_INT 0
30119: PUSH
30120: LD_INT 1
30122: PUSH
30123: EMPTY
30124: LIST
30125: LIST
30126: PUSH
30127: LD_INT 1
30129: NEG
30130: PUSH
30131: LD_INT 0
30133: PUSH
30134: EMPTY
30135: LIST
30136: LIST
30137: PUSH
30138: LD_INT 1
30140: NEG
30141: PUSH
30142: LD_INT 1
30144: NEG
30145: PUSH
30146: EMPTY
30147: LIST
30148: LIST
30149: PUSH
30150: LD_INT 1
30152: NEG
30153: PUSH
30154: LD_INT 2
30156: NEG
30157: PUSH
30158: EMPTY
30159: LIST
30160: LIST
30161: PUSH
30162: LD_INT 1
30164: PUSH
30165: LD_INT 1
30167: NEG
30168: PUSH
30169: EMPTY
30170: LIST
30171: LIST
30172: PUSH
30173: LD_INT 2
30175: PUSH
30176: LD_INT 0
30178: PUSH
30179: EMPTY
30180: LIST
30181: LIST
30182: PUSH
30183: LD_INT 2
30185: PUSH
30186: LD_INT 1
30188: PUSH
30189: EMPTY
30190: LIST
30191: LIST
30192: PUSH
30193: LD_INT 1
30195: PUSH
30196: LD_INT 2
30198: PUSH
30199: EMPTY
30200: LIST
30201: LIST
30202: PUSH
30203: LD_INT 0
30205: PUSH
30206: LD_INT 2
30208: PUSH
30209: EMPTY
30210: LIST
30211: LIST
30212: PUSH
30213: LD_INT 1
30215: NEG
30216: PUSH
30217: LD_INT 1
30219: PUSH
30220: EMPTY
30221: LIST
30222: LIST
30223: PUSH
30224: LD_INT 2
30226: NEG
30227: PUSH
30228: LD_INT 0
30230: PUSH
30231: EMPTY
30232: LIST
30233: LIST
30234: PUSH
30235: LD_INT 2
30237: NEG
30238: PUSH
30239: LD_INT 1
30241: NEG
30242: PUSH
30243: EMPTY
30244: LIST
30245: LIST
30246: PUSH
30247: LD_INT 2
30249: NEG
30250: PUSH
30251: LD_INT 2
30253: NEG
30254: PUSH
30255: EMPTY
30256: LIST
30257: LIST
30258: PUSH
30259: LD_INT 2
30261: NEG
30262: PUSH
30263: LD_INT 3
30265: NEG
30266: PUSH
30267: EMPTY
30268: LIST
30269: LIST
30270: PUSH
30271: LD_INT 2
30273: PUSH
30274: LD_INT 1
30276: NEG
30277: PUSH
30278: EMPTY
30279: LIST
30280: LIST
30281: PUSH
30282: LD_INT 3
30284: PUSH
30285: LD_INT 1
30287: PUSH
30288: EMPTY
30289: LIST
30290: LIST
30291: PUSH
30292: LD_INT 1
30294: PUSH
30295: LD_INT 3
30297: PUSH
30298: EMPTY
30299: LIST
30300: LIST
30301: PUSH
30302: LD_INT 1
30304: NEG
30305: PUSH
30306: LD_INT 2
30308: PUSH
30309: EMPTY
30310: LIST
30311: LIST
30312: PUSH
30313: LD_INT 3
30315: NEG
30316: PUSH
30317: LD_INT 2
30319: NEG
30320: PUSH
30321: EMPTY
30322: LIST
30323: LIST
30324: PUSH
30325: EMPTY
30326: LIST
30327: LIST
30328: LIST
30329: LIST
30330: LIST
30331: LIST
30332: LIST
30333: LIST
30334: LIST
30335: LIST
30336: LIST
30337: LIST
30338: LIST
30339: LIST
30340: LIST
30341: LIST
30342: LIST
30343: LIST
30344: LIST
30345: LIST
30346: LIST
30347: LIST
30348: LIST
30349: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
30350: LD_ADDR_VAR 0 34
30354: PUSH
30355: LD_INT 0
30357: PUSH
30358: LD_INT 0
30360: PUSH
30361: EMPTY
30362: LIST
30363: LIST
30364: PUSH
30365: LD_INT 0
30367: PUSH
30368: LD_INT 1
30370: NEG
30371: PUSH
30372: EMPTY
30373: LIST
30374: LIST
30375: PUSH
30376: LD_INT 1
30378: PUSH
30379: LD_INT 0
30381: PUSH
30382: EMPTY
30383: LIST
30384: LIST
30385: PUSH
30386: LD_INT 1
30388: PUSH
30389: LD_INT 1
30391: PUSH
30392: EMPTY
30393: LIST
30394: LIST
30395: PUSH
30396: LD_INT 0
30398: PUSH
30399: LD_INT 1
30401: PUSH
30402: EMPTY
30403: LIST
30404: LIST
30405: PUSH
30406: LD_INT 1
30408: NEG
30409: PUSH
30410: LD_INT 0
30412: PUSH
30413: EMPTY
30414: LIST
30415: LIST
30416: PUSH
30417: LD_INT 1
30419: NEG
30420: PUSH
30421: LD_INT 1
30423: NEG
30424: PUSH
30425: EMPTY
30426: LIST
30427: LIST
30428: PUSH
30429: LD_INT 1
30431: NEG
30432: PUSH
30433: LD_INT 2
30435: NEG
30436: PUSH
30437: EMPTY
30438: LIST
30439: LIST
30440: PUSH
30441: LD_INT 0
30443: PUSH
30444: LD_INT 2
30446: NEG
30447: PUSH
30448: EMPTY
30449: LIST
30450: LIST
30451: PUSH
30452: LD_INT 1
30454: PUSH
30455: LD_INT 1
30457: NEG
30458: PUSH
30459: EMPTY
30460: LIST
30461: LIST
30462: PUSH
30463: LD_INT 2
30465: PUSH
30466: LD_INT 1
30468: PUSH
30469: EMPTY
30470: LIST
30471: LIST
30472: PUSH
30473: LD_INT 2
30475: PUSH
30476: LD_INT 2
30478: PUSH
30479: EMPTY
30480: LIST
30481: LIST
30482: PUSH
30483: LD_INT 1
30485: PUSH
30486: LD_INT 2
30488: PUSH
30489: EMPTY
30490: LIST
30491: LIST
30492: PUSH
30493: LD_INT 1
30495: NEG
30496: PUSH
30497: LD_INT 1
30499: PUSH
30500: EMPTY
30501: LIST
30502: LIST
30503: PUSH
30504: LD_INT 2
30506: NEG
30507: PUSH
30508: LD_INT 0
30510: PUSH
30511: EMPTY
30512: LIST
30513: LIST
30514: PUSH
30515: LD_INT 2
30517: NEG
30518: PUSH
30519: LD_INT 1
30521: NEG
30522: PUSH
30523: EMPTY
30524: LIST
30525: LIST
30526: PUSH
30527: LD_INT 2
30529: NEG
30530: PUSH
30531: LD_INT 2
30533: NEG
30534: PUSH
30535: EMPTY
30536: LIST
30537: LIST
30538: PUSH
30539: LD_INT 1
30541: NEG
30542: PUSH
30543: LD_INT 3
30545: NEG
30546: PUSH
30547: EMPTY
30548: LIST
30549: LIST
30550: PUSH
30551: LD_INT 1
30553: PUSH
30554: LD_INT 2
30556: NEG
30557: PUSH
30558: EMPTY
30559: LIST
30560: LIST
30561: PUSH
30562: LD_INT 3
30564: PUSH
30565: LD_INT 2
30567: PUSH
30568: EMPTY
30569: LIST
30570: LIST
30571: PUSH
30572: LD_INT 2
30574: PUSH
30575: LD_INT 3
30577: PUSH
30578: EMPTY
30579: LIST
30580: LIST
30581: PUSH
30582: LD_INT 2
30584: NEG
30585: PUSH
30586: LD_INT 1
30588: PUSH
30589: EMPTY
30590: LIST
30591: LIST
30592: PUSH
30593: LD_INT 3
30595: NEG
30596: PUSH
30597: LD_INT 1
30599: NEG
30600: PUSH
30601: EMPTY
30602: LIST
30603: LIST
30604: PUSH
30605: EMPTY
30606: LIST
30607: LIST
30608: LIST
30609: LIST
30610: LIST
30611: LIST
30612: LIST
30613: LIST
30614: LIST
30615: LIST
30616: LIST
30617: LIST
30618: LIST
30619: LIST
30620: LIST
30621: LIST
30622: LIST
30623: LIST
30624: LIST
30625: LIST
30626: LIST
30627: LIST
30628: LIST
30629: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
30630: LD_ADDR_VAR 0 35
30634: PUSH
30635: LD_INT 0
30637: PUSH
30638: LD_INT 0
30640: PUSH
30641: EMPTY
30642: LIST
30643: LIST
30644: PUSH
30645: LD_INT 0
30647: PUSH
30648: LD_INT 1
30650: NEG
30651: PUSH
30652: EMPTY
30653: LIST
30654: LIST
30655: PUSH
30656: LD_INT 1
30658: PUSH
30659: LD_INT 0
30661: PUSH
30662: EMPTY
30663: LIST
30664: LIST
30665: PUSH
30666: LD_INT 1
30668: PUSH
30669: LD_INT 1
30671: PUSH
30672: EMPTY
30673: LIST
30674: LIST
30675: PUSH
30676: LD_INT 0
30678: PUSH
30679: LD_INT 1
30681: PUSH
30682: EMPTY
30683: LIST
30684: LIST
30685: PUSH
30686: LD_INT 1
30688: NEG
30689: PUSH
30690: LD_INT 0
30692: PUSH
30693: EMPTY
30694: LIST
30695: LIST
30696: PUSH
30697: LD_INT 1
30699: NEG
30700: PUSH
30701: LD_INT 1
30703: NEG
30704: PUSH
30705: EMPTY
30706: LIST
30707: LIST
30708: PUSH
30709: LD_INT 2
30711: PUSH
30712: LD_INT 1
30714: PUSH
30715: EMPTY
30716: LIST
30717: LIST
30718: PUSH
30719: LD_INT 2
30721: NEG
30722: PUSH
30723: LD_INT 1
30725: NEG
30726: PUSH
30727: EMPTY
30728: LIST
30729: LIST
30730: PUSH
30731: EMPTY
30732: LIST
30733: LIST
30734: LIST
30735: LIST
30736: LIST
30737: LIST
30738: LIST
30739: LIST
30740: LIST
30741: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
30742: LD_ADDR_VAR 0 36
30746: PUSH
30747: LD_INT 0
30749: PUSH
30750: LD_INT 0
30752: PUSH
30753: EMPTY
30754: LIST
30755: LIST
30756: PUSH
30757: LD_INT 0
30759: PUSH
30760: LD_INT 1
30762: NEG
30763: PUSH
30764: EMPTY
30765: LIST
30766: LIST
30767: PUSH
30768: LD_INT 1
30770: PUSH
30771: LD_INT 0
30773: PUSH
30774: EMPTY
30775: LIST
30776: LIST
30777: PUSH
30778: LD_INT 1
30780: PUSH
30781: LD_INT 1
30783: PUSH
30784: EMPTY
30785: LIST
30786: LIST
30787: PUSH
30788: LD_INT 0
30790: PUSH
30791: LD_INT 1
30793: PUSH
30794: EMPTY
30795: LIST
30796: LIST
30797: PUSH
30798: LD_INT 1
30800: NEG
30801: PUSH
30802: LD_INT 0
30804: PUSH
30805: EMPTY
30806: LIST
30807: LIST
30808: PUSH
30809: LD_INT 1
30811: NEG
30812: PUSH
30813: LD_INT 1
30815: NEG
30816: PUSH
30817: EMPTY
30818: LIST
30819: LIST
30820: PUSH
30821: LD_INT 1
30823: NEG
30824: PUSH
30825: LD_INT 2
30827: NEG
30828: PUSH
30829: EMPTY
30830: LIST
30831: LIST
30832: PUSH
30833: LD_INT 1
30835: PUSH
30836: LD_INT 2
30838: PUSH
30839: EMPTY
30840: LIST
30841: LIST
30842: PUSH
30843: EMPTY
30844: LIST
30845: LIST
30846: LIST
30847: LIST
30848: LIST
30849: LIST
30850: LIST
30851: LIST
30852: LIST
30853: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
30854: LD_ADDR_VAR 0 37
30858: PUSH
30859: LD_INT 0
30861: PUSH
30862: LD_INT 0
30864: PUSH
30865: EMPTY
30866: LIST
30867: LIST
30868: PUSH
30869: LD_INT 0
30871: PUSH
30872: LD_INT 1
30874: NEG
30875: PUSH
30876: EMPTY
30877: LIST
30878: LIST
30879: PUSH
30880: LD_INT 1
30882: PUSH
30883: LD_INT 0
30885: PUSH
30886: EMPTY
30887: LIST
30888: LIST
30889: PUSH
30890: LD_INT 1
30892: PUSH
30893: LD_INT 1
30895: PUSH
30896: EMPTY
30897: LIST
30898: LIST
30899: PUSH
30900: LD_INT 0
30902: PUSH
30903: LD_INT 1
30905: PUSH
30906: EMPTY
30907: LIST
30908: LIST
30909: PUSH
30910: LD_INT 1
30912: NEG
30913: PUSH
30914: LD_INT 0
30916: PUSH
30917: EMPTY
30918: LIST
30919: LIST
30920: PUSH
30921: LD_INT 1
30923: NEG
30924: PUSH
30925: LD_INT 1
30927: NEG
30928: PUSH
30929: EMPTY
30930: LIST
30931: LIST
30932: PUSH
30933: LD_INT 1
30935: PUSH
30936: LD_INT 1
30938: NEG
30939: PUSH
30940: EMPTY
30941: LIST
30942: LIST
30943: PUSH
30944: LD_INT 1
30946: NEG
30947: PUSH
30948: LD_INT 1
30950: PUSH
30951: EMPTY
30952: LIST
30953: LIST
30954: PUSH
30955: EMPTY
30956: LIST
30957: LIST
30958: LIST
30959: LIST
30960: LIST
30961: LIST
30962: LIST
30963: LIST
30964: LIST
30965: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
30966: LD_ADDR_VAR 0 38
30970: PUSH
30971: LD_INT 0
30973: PUSH
30974: LD_INT 0
30976: PUSH
30977: EMPTY
30978: LIST
30979: LIST
30980: PUSH
30981: LD_INT 0
30983: PUSH
30984: LD_INT 1
30986: NEG
30987: PUSH
30988: EMPTY
30989: LIST
30990: LIST
30991: PUSH
30992: LD_INT 1
30994: PUSH
30995: LD_INT 0
30997: PUSH
30998: EMPTY
30999: LIST
31000: LIST
31001: PUSH
31002: LD_INT 1
31004: PUSH
31005: LD_INT 1
31007: PUSH
31008: EMPTY
31009: LIST
31010: LIST
31011: PUSH
31012: LD_INT 0
31014: PUSH
31015: LD_INT 1
31017: PUSH
31018: EMPTY
31019: LIST
31020: LIST
31021: PUSH
31022: LD_INT 1
31024: NEG
31025: PUSH
31026: LD_INT 0
31028: PUSH
31029: EMPTY
31030: LIST
31031: LIST
31032: PUSH
31033: LD_INT 1
31035: NEG
31036: PUSH
31037: LD_INT 1
31039: NEG
31040: PUSH
31041: EMPTY
31042: LIST
31043: LIST
31044: PUSH
31045: LD_INT 2
31047: PUSH
31048: LD_INT 1
31050: PUSH
31051: EMPTY
31052: LIST
31053: LIST
31054: PUSH
31055: LD_INT 2
31057: NEG
31058: PUSH
31059: LD_INT 1
31061: NEG
31062: PUSH
31063: EMPTY
31064: LIST
31065: LIST
31066: PUSH
31067: EMPTY
31068: LIST
31069: LIST
31070: LIST
31071: LIST
31072: LIST
31073: LIST
31074: LIST
31075: LIST
31076: LIST
31077: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
31078: LD_ADDR_VAR 0 39
31082: PUSH
31083: LD_INT 0
31085: PUSH
31086: LD_INT 0
31088: PUSH
31089: EMPTY
31090: LIST
31091: LIST
31092: PUSH
31093: LD_INT 0
31095: PUSH
31096: LD_INT 1
31098: NEG
31099: PUSH
31100: EMPTY
31101: LIST
31102: LIST
31103: PUSH
31104: LD_INT 1
31106: PUSH
31107: LD_INT 0
31109: PUSH
31110: EMPTY
31111: LIST
31112: LIST
31113: PUSH
31114: LD_INT 1
31116: PUSH
31117: LD_INT 1
31119: PUSH
31120: EMPTY
31121: LIST
31122: LIST
31123: PUSH
31124: LD_INT 0
31126: PUSH
31127: LD_INT 1
31129: PUSH
31130: EMPTY
31131: LIST
31132: LIST
31133: PUSH
31134: LD_INT 1
31136: NEG
31137: PUSH
31138: LD_INT 0
31140: PUSH
31141: EMPTY
31142: LIST
31143: LIST
31144: PUSH
31145: LD_INT 1
31147: NEG
31148: PUSH
31149: LD_INT 1
31151: NEG
31152: PUSH
31153: EMPTY
31154: LIST
31155: LIST
31156: PUSH
31157: LD_INT 1
31159: NEG
31160: PUSH
31161: LD_INT 2
31163: NEG
31164: PUSH
31165: EMPTY
31166: LIST
31167: LIST
31168: PUSH
31169: LD_INT 1
31171: PUSH
31172: LD_INT 2
31174: PUSH
31175: EMPTY
31176: LIST
31177: LIST
31178: PUSH
31179: EMPTY
31180: LIST
31181: LIST
31182: LIST
31183: LIST
31184: LIST
31185: LIST
31186: LIST
31187: LIST
31188: LIST
31189: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
31190: LD_ADDR_VAR 0 40
31194: PUSH
31195: LD_INT 0
31197: PUSH
31198: LD_INT 0
31200: PUSH
31201: EMPTY
31202: LIST
31203: LIST
31204: PUSH
31205: LD_INT 0
31207: PUSH
31208: LD_INT 1
31210: NEG
31211: PUSH
31212: EMPTY
31213: LIST
31214: LIST
31215: PUSH
31216: LD_INT 1
31218: PUSH
31219: LD_INT 0
31221: PUSH
31222: EMPTY
31223: LIST
31224: LIST
31225: PUSH
31226: LD_INT 1
31228: PUSH
31229: LD_INT 1
31231: PUSH
31232: EMPTY
31233: LIST
31234: LIST
31235: PUSH
31236: LD_INT 0
31238: PUSH
31239: LD_INT 1
31241: PUSH
31242: EMPTY
31243: LIST
31244: LIST
31245: PUSH
31246: LD_INT 1
31248: NEG
31249: PUSH
31250: LD_INT 0
31252: PUSH
31253: EMPTY
31254: LIST
31255: LIST
31256: PUSH
31257: LD_INT 1
31259: NEG
31260: PUSH
31261: LD_INT 1
31263: NEG
31264: PUSH
31265: EMPTY
31266: LIST
31267: LIST
31268: PUSH
31269: LD_INT 1
31271: PUSH
31272: LD_INT 1
31274: NEG
31275: PUSH
31276: EMPTY
31277: LIST
31278: LIST
31279: PUSH
31280: LD_INT 1
31282: NEG
31283: PUSH
31284: LD_INT 1
31286: PUSH
31287: EMPTY
31288: LIST
31289: LIST
31290: PUSH
31291: EMPTY
31292: LIST
31293: LIST
31294: LIST
31295: LIST
31296: LIST
31297: LIST
31298: LIST
31299: LIST
31300: LIST
31301: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
31302: LD_ADDR_VAR 0 41
31306: PUSH
31307: LD_INT 0
31309: PUSH
31310: LD_INT 0
31312: PUSH
31313: EMPTY
31314: LIST
31315: LIST
31316: PUSH
31317: LD_INT 0
31319: PUSH
31320: LD_INT 1
31322: NEG
31323: PUSH
31324: EMPTY
31325: LIST
31326: LIST
31327: PUSH
31328: LD_INT 1
31330: PUSH
31331: LD_INT 0
31333: PUSH
31334: EMPTY
31335: LIST
31336: LIST
31337: PUSH
31338: LD_INT 1
31340: PUSH
31341: LD_INT 1
31343: PUSH
31344: EMPTY
31345: LIST
31346: LIST
31347: PUSH
31348: LD_INT 0
31350: PUSH
31351: LD_INT 1
31353: PUSH
31354: EMPTY
31355: LIST
31356: LIST
31357: PUSH
31358: LD_INT 1
31360: NEG
31361: PUSH
31362: LD_INT 0
31364: PUSH
31365: EMPTY
31366: LIST
31367: LIST
31368: PUSH
31369: LD_INT 1
31371: NEG
31372: PUSH
31373: LD_INT 1
31375: NEG
31376: PUSH
31377: EMPTY
31378: LIST
31379: LIST
31380: PUSH
31381: LD_INT 1
31383: NEG
31384: PUSH
31385: LD_INT 2
31387: NEG
31388: PUSH
31389: EMPTY
31390: LIST
31391: LIST
31392: PUSH
31393: LD_INT 1
31395: PUSH
31396: LD_INT 1
31398: NEG
31399: PUSH
31400: EMPTY
31401: LIST
31402: LIST
31403: PUSH
31404: LD_INT 2
31406: PUSH
31407: LD_INT 0
31409: PUSH
31410: EMPTY
31411: LIST
31412: LIST
31413: PUSH
31414: LD_INT 2
31416: PUSH
31417: LD_INT 1
31419: PUSH
31420: EMPTY
31421: LIST
31422: LIST
31423: PUSH
31424: LD_INT 2
31426: PUSH
31427: LD_INT 2
31429: PUSH
31430: EMPTY
31431: LIST
31432: LIST
31433: PUSH
31434: LD_INT 1
31436: PUSH
31437: LD_INT 2
31439: PUSH
31440: EMPTY
31441: LIST
31442: LIST
31443: PUSH
31444: LD_INT 1
31446: NEG
31447: PUSH
31448: LD_INT 1
31450: PUSH
31451: EMPTY
31452: LIST
31453: LIST
31454: PUSH
31455: LD_INT 2
31457: NEG
31458: PUSH
31459: LD_INT 0
31461: PUSH
31462: EMPTY
31463: LIST
31464: LIST
31465: PUSH
31466: LD_INT 2
31468: NEG
31469: PUSH
31470: LD_INT 1
31472: NEG
31473: PUSH
31474: EMPTY
31475: LIST
31476: LIST
31477: PUSH
31478: LD_INT 2
31480: NEG
31481: PUSH
31482: LD_INT 2
31484: NEG
31485: PUSH
31486: EMPTY
31487: LIST
31488: LIST
31489: PUSH
31490: LD_INT 2
31492: NEG
31493: PUSH
31494: LD_INT 3
31496: NEG
31497: PUSH
31498: EMPTY
31499: LIST
31500: LIST
31501: PUSH
31502: LD_INT 2
31504: PUSH
31505: LD_INT 1
31507: NEG
31508: PUSH
31509: EMPTY
31510: LIST
31511: LIST
31512: PUSH
31513: LD_INT 3
31515: PUSH
31516: LD_INT 0
31518: PUSH
31519: EMPTY
31520: LIST
31521: LIST
31522: PUSH
31523: LD_INT 3
31525: PUSH
31526: LD_INT 1
31528: PUSH
31529: EMPTY
31530: LIST
31531: LIST
31532: PUSH
31533: LD_INT 3
31535: PUSH
31536: LD_INT 2
31538: PUSH
31539: EMPTY
31540: LIST
31541: LIST
31542: PUSH
31543: LD_INT 3
31545: PUSH
31546: LD_INT 3
31548: PUSH
31549: EMPTY
31550: LIST
31551: LIST
31552: PUSH
31553: LD_INT 2
31555: PUSH
31556: LD_INT 3
31558: PUSH
31559: EMPTY
31560: LIST
31561: LIST
31562: PUSH
31563: LD_INT 2
31565: NEG
31566: PUSH
31567: LD_INT 1
31569: PUSH
31570: EMPTY
31571: LIST
31572: LIST
31573: PUSH
31574: LD_INT 3
31576: NEG
31577: PUSH
31578: LD_INT 0
31580: PUSH
31581: EMPTY
31582: LIST
31583: LIST
31584: PUSH
31585: LD_INT 3
31587: NEG
31588: PUSH
31589: LD_INT 1
31591: NEG
31592: PUSH
31593: EMPTY
31594: LIST
31595: LIST
31596: PUSH
31597: LD_INT 3
31599: NEG
31600: PUSH
31601: LD_INT 2
31603: NEG
31604: PUSH
31605: EMPTY
31606: LIST
31607: LIST
31608: PUSH
31609: LD_INT 3
31611: NEG
31612: PUSH
31613: LD_INT 3
31615: NEG
31616: PUSH
31617: EMPTY
31618: LIST
31619: LIST
31620: PUSH
31621: EMPTY
31622: LIST
31623: LIST
31624: LIST
31625: LIST
31626: LIST
31627: LIST
31628: LIST
31629: LIST
31630: LIST
31631: LIST
31632: LIST
31633: LIST
31634: LIST
31635: LIST
31636: LIST
31637: LIST
31638: LIST
31639: LIST
31640: LIST
31641: LIST
31642: LIST
31643: LIST
31644: LIST
31645: LIST
31646: LIST
31647: LIST
31648: LIST
31649: LIST
31650: LIST
31651: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
31652: LD_ADDR_VAR 0 42
31656: PUSH
31657: LD_INT 0
31659: PUSH
31660: LD_INT 0
31662: PUSH
31663: EMPTY
31664: LIST
31665: LIST
31666: PUSH
31667: LD_INT 0
31669: PUSH
31670: LD_INT 1
31672: NEG
31673: PUSH
31674: EMPTY
31675: LIST
31676: LIST
31677: PUSH
31678: LD_INT 1
31680: PUSH
31681: LD_INT 0
31683: PUSH
31684: EMPTY
31685: LIST
31686: LIST
31687: PUSH
31688: LD_INT 1
31690: PUSH
31691: LD_INT 1
31693: PUSH
31694: EMPTY
31695: LIST
31696: LIST
31697: PUSH
31698: LD_INT 0
31700: PUSH
31701: LD_INT 1
31703: PUSH
31704: EMPTY
31705: LIST
31706: LIST
31707: PUSH
31708: LD_INT 1
31710: NEG
31711: PUSH
31712: LD_INT 0
31714: PUSH
31715: EMPTY
31716: LIST
31717: LIST
31718: PUSH
31719: LD_INT 1
31721: NEG
31722: PUSH
31723: LD_INT 1
31725: NEG
31726: PUSH
31727: EMPTY
31728: LIST
31729: LIST
31730: PUSH
31731: LD_INT 1
31733: NEG
31734: PUSH
31735: LD_INT 2
31737: NEG
31738: PUSH
31739: EMPTY
31740: LIST
31741: LIST
31742: PUSH
31743: LD_INT 0
31745: PUSH
31746: LD_INT 2
31748: NEG
31749: PUSH
31750: EMPTY
31751: LIST
31752: LIST
31753: PUSH
31754: LD_INT 1
31756: PUSH
31757: LD_INT 1
31759: NEG
31760: PUSH
31761: EMPTY
31762: LIST
31763: LIST
31764: PUSH
31765: LD_INT 2
31767: PUSH
31768: LD_INT 1
31770: PUSH
31771: EMPTY
31772: LIST
31773: LIST
31774: PUSH
31775: LD_INT 2
31777: PUSH
31778: LD_INT 2
31780: PUSH
31781: EMPTY
31782: LIST
31783: LIST
31784: PUSH
31785: LD_INT 1
31787: PUSH
31788: LD_INT 2
31790: PUSH
31791: EMPTY
31792: LIST
31793: LIST
31794: PUSH
31795: LD_INT 0
31797: PUSH
31798: LD_INT 2
31800: PUSH
31801: EMPTY
31802: LIST
31803: LIST
31804: PUSH
31805: LD_INT 1
31807: NEG
31808: PUSH
31809: LD_INT 1
31811: PUSH
31812: EMPTY
31813: LIST
31814: LIST
31815: PUSH
31816: LD_INT 2
31818: NEG
31819: PUSH
31820: LD_INT 1
31822: NEG
31823: PUSH
31824: EMPTY
31825: LIST
31826: LIST
31827: PUSH
31828: LD_INT 2
31830: NEG
31831: PUSH
31832: LD_INT 2
31834: NEG
31835: PUSH
31836: EMPTY
31837: LIST
31838: LIST
31839: PUSH
31840: LD_INT 2
31842: NEG
31843: PUSH
31844: LD_INT 3
31846: NEG
31847: PUSH
31848: EMPTY
31849: LIST
31850: LIST
31851: PUSH
31852: LD_INT 1
31854: NEG
31855: PUSH
31856: LD_INT 3
31858: NEG
31859: PUSH
31860: EMPTY
31861: LIST
31862: LIST
31863: PUSH
31864: LD_INT 0
31866: PUSH
31867: LD_INT 3
31869: NEG
31870: PUSH
31871: EMPTY
31872: LIST
31873: LIST
31874: PUSH
31875: LD_INT 1
31877: PUSH
31878: LD_INT 2
31880: NEG
31881: PUSH
31882: EMPTY
31883: LIST
31884: LIST
31885: PUSH
31886: LD_INT 3
31888: PUSH
31889: LD_INT 2
31891: PUSH
31892: EMPTY
31893: LIST
31894: LIST
31895: PUSH
31896: LD_INT 3
31898: PUSH
31899: LD_INT 3
31901: PUSH
31902: EMPTY
31903: LIST
31904: LIST
31905: PUSH
31906: LD_INT 2
31908: PUSH
31909: LD_INT 3
31911: PUSH
31912: EMPTY
31913: LIST
31914: LIST
31915: PUSH
31916: LD_INT 1
31918: PUSH
31919: LD_INT 3
31921: PUSH
31922: EMPTY
31923: LIST
31924: LIST
31925: PUSH
31926: LD_INT 0
31928: PUSH
31929: LD_INT 3
31931: PUSH
31932: EMPTY
31933: LIST
31934: LIST
31935: PUSH
31936: LD_INT 1
31938: NEG
31939: PUSH
31940: LD_INT 2
31942: PUSH
31943: EMPTY
31944: LIST
31945: LIST
31946: PUSH
31947: LD_INT 3
31949: NEG
31950: PUSH
31951: LD_INT 2
31953: NEG
31954: PUSH
31955: EMPTY
31956: LIST
31957: LIST
31958: PUSH
31959: LD_INT 3
31961: NEG
31962: PUSH
31963: LD_INT 3
31965: NEG
31966: PUSH
31967: EMPTY
31968: LIST
31969: LIST
31970: PUSH
31971: EMPTY
31972: LIST
31973: LIST
31974: LIST
31975: LIST
31976: LIST
31977: LIST
31978: LIST
31979: LIST
31980: LIST
31981: LIST
31982: LIST
31983: LIST
31984: LIST
31985: LIST
31986: LIST
31987: LIST
31988: LIST
31989: LIST
31990: LIST
31991: LIST
31992: LIST
31993: LIST
31994: LIST
31995: LIST
31996: LIST
31997: LIST
31998: LIST
31999: LIST
32000: LIST
32001: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
32002: LD_ADDR_VAR 0 43
32006: PUSH
32007: LD_INT 0
32009: PUSH
32010: LD_INT 0
32012: PUSH
32013: EMPTY
32014: LIST
32015: LIST
32016: PUSH
32017: LD_INT 0
32019: PUSH
32020: LD_INT 1
32022: NEG
32023: PUSH
32024: EMPTY
32025: LIST
32026: LIST
32027: PUSH
32028: LD_INT 1
32030: PUSH
32031: LD_INT 0
32033: PUSH
32034: EMPTY
32035: LIST
32036: LIST
32037: PUSH
32038: LD_INT 1
32040: PUSH
32041: LD_INT 1
32043: PUSH
32044: EMPTY
32045: LIST
32046: LIST
32047: PUSH
32048: LD_INT 0
32050: PUSH
32051: LD_INT 1
32053: PUSH
32054: EMPTY
32055: LIST
32056: LIST
32057: PUSH
32058: LD_INT 1
32060: NEG
32061: PUSH
32062: LD_INT 0
32064: PUSH
32065: EMPTY
32066: LIST
32067: LIST
32068: PUSH
32069: LD_INT 1
32071: NEG
32072: PUSH
32073: LD_INT 1
32075: NEG
32076: PUSH
32077: EMPTY
32078: LIST
32079: LIST
32080: PUSH
32081: LD_INT 1
32083: NEG
32084: PUSH
32085: LD_INT 2
32087: NEG
32088: PUSH
32089: EMPTY
32090: LIST
32091: LIST
32092: PUSH
32093: LD_INT 0
32095: PUSH
32096: LD_INT 2
32098: NEG
32099: PUSH
32100: EMPTY
32101: LIST
32102: LIST
32103: PUSH
32104: LD_INT 1
32106: PUSH
32107: LD_INT 1
32109: NEG
32110: PUSH
32111: EMPTY
32112: LIST
32113: LIST
32114: PUSH
32115: LD_INT 2
32117: PUSH
32118: LD_INT 0
32120: PUSH
32121: EMPTY
32122: LIST
32123: LIST
32124: PUSH
32125: LD_INT 2
32127: PUSH
32128: LD_INT 1
32130: PUSH
32131: EMPTY
32132: LIST
32133: LIST
32134: PUSH
32135: LD_INT 1
32137: PUSH
32138: LD_INT 2
32140: PUSH
32141: EMPTY
32142: LIST
32143: LIST
32144: PUSH
32145: LD_INT 0
32147: PUSH
32148: LD_INT 2
32150: PUSH
32151: EMPTY
32152: LIST
32153: LIST
32154: PUSH
32155: LD_INT 1
32157: NEG
32158: PUSH
32159: LD_INT 1
32161: PUSH
32162: EMPTY
32163: LIST
32164: LIST
32165: PUSH
32166: LD_INT 2
32168: NEG
32169: PUSH
32170: LD_INT 0
32172: PUSH
32173: EMPTY
32174: LIST
32175: LIST
32176: PUSH
32177: LD_INT 2
32179: NEG
32180: PUSH
32181: LD_INT 1
32183: NEG
32184: PUSH
32185: EMPTY
32186: LIST
32187: LIST
32188: PUSH
32189: LD_INT 1
32191: NEG
32192: PUSH
32193: LD_INT 3
32195: NEG
32196: PUSH
32197: EMPTY
32198: LIST
32199: LIST
32200: PUSH
32201: LD_INT 0
32203: PUSH
32204: LD_INT 3
32206: NEG
32207: PUSH
32208: EMPTY
32209: LIST
32210: LIST
32211: PUSH
32212: LD_INT 1
32214: PUSH
32215: LD_INT 2
32217: NEG
32218: PUSH
32219: EMPTY
32220: LIST
32221: LIST
32222: PUSH
32223: LD_INT 2
32225: PUSH
32226: LD_INT 1
32228: NEG
32229: PUSH
32230: EMPTY
32231: LIST
32232: LIST
32233: PUSH
32234: LD_INT 3
32236: PUSH
32237: LD_INT 0
32239: PUSH
32240: EMPTY
32241: LIST
32242: LIST
32243: PUSH
32244: LD_INT 3
32246: PUSH
32247: LD_INT 1
32249: PUSH
32250: EMPTY
32251: LIST
32252: LIST
32253: PUSH
32254: LD_INT 1
32256: PUSH
32257: LD_INT 3
32259: PUSH
32260: EMPTY
32261: LIST
32262: LIST
32263: PUSH
32264: LD_INT 0
32266: PUSH
32267: LD_INT 3
32269: PUSH
32270: EMPTY
32271: LIST
32272: LIST
32273: PUSH
32274: LD_INT 1
32276: NEG
32277: PUSH
32278: LD_INT 2
32280: PUSH
32281: EMPTY
32282: LIST
32283: LIST
32284: PUSH
32285: LD_INT 2
32287: NEG
32288: PUSH
32289: LD_INT 1
32291: PUSH
32292: EMPTY
32293: LIST
32294: LIST
32295: PUSH
32296: LD_INT 3
32298: NEG
32299: PUSH
32300: LD_INT 0
32302: PUSH
32303: EMPTY
32304: LIST
32305: LIST
32306: PUSH
32307: LD_INT 3
32309: NEG
32310: PUSH
32311: LD_INT 1
32313: NEG
32314: PUSH
32315: EMPTY
32316: LIST
32317: LIST
32318: PUSH
32319: EMPTY
32320: LIST
32321: LIST
32322: LIST
32323: LIST
32324: LIST
32325: LIST
32326: LIST
32327: LIST
32328: LIST
32329: LIST
32330: LIST
32331: LIST
32332: LIST
32333: LIST
32334: LIST
32335: LIST
32336: LIST
32337: LIST
32338: LIST
32339: LIST
32340: LIST
32341: LIST
32342: LIST
32343: LIST
32344: LIST
32345: LIST
32346: LIST
32347: LIST
32348: LIST
32349: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
32350: LD_ADDR_VAR 0 44
32354: PUSH
32355: LD_INT 0
32357: PUSH
32358: LD_INT 0
32360: PUSH
32361: EMPTY
32362: LIST
32363: LIST
32364: PUSH
32365: LD_INT 0
32367: PUSH
32368: LD_INT 1
32370: NEG
32371: PUSH
32372: EMPTY
32373: LIST
32374: LIST
32375: PUSH
32376: LD_INT 1
32378: PUSH
32379: LD_INT 0
32381: PUSH
32382: EMPTY
32383: LIST
32384: LIST
32385: PUSH
32386: LD_INT 1
32388: PUSH
32389: LD_INT 1
32391: PUSH
32392: EMPTY
32393: LIST
32394: LIST
32395: PUSH
32396: LD_INT 0
32398: PUSH
32399: LD_INT 1
32401: PUSH
32402: EMPTY
32403: LIST
32404: LIST
32405: PUSH
32406: LD_INT 1
32408: NEG
32409: PUSH
32410: LD_INT 0
32412: PUSH
32413: EMPTY
32414: LIST
32415: LIST
32416: PUSH
32417: LD_INT 1
32419: NEG
32420: PUSH
32421: LD_INT 1
32423: NEG
32424: PUSH
32425: EMPTY
32426: LIST
32427: LIST
32428: PUSH
32429: LD_INT 1
32431: NEG
32432: PUSH
32433: LD_INT 2
32435: NEG
32436: PUSH
32437: EMPTY
32438: LIST
32439: LIST
32440: PUSH
32441: LD_INT 1
32443: PUSH
32444: LD_INT 1
32446: NEG
32447: PUSH
32448: EMPTY
32449: LIST
32450: LIST
32451: PUSH
32452: LD_INT 2
32454: PUSH
32455: LD_INT 0
32457: PUSH
32458: EMPTY
32459: LIST
32460: LIST
32461: PUSH
32462: LD_INT 2
32464: PUSH
32465: LD_INT 1
32467: PUSH
32468: EMPTY
32469: LIST
32470: LIST
32471: PUSH
32472: LD_INT 2
32474: PUSH
32475: LD_INT 2
32477: PUSH
32478: EMPTY
32479: LIST
32480: LIST
32481: PUSH
32482: LD_INT 1
32484: PUSH
32485: LD_INT 2
32487: PUSH
32488: EMPTY
32489: LIST
32490: LIST
32491: PUSH
32492: LD_INT 1
32494: NEG
32495: PUSH
32496: LD_INT 1
32498: PUSH
32499: EMPTY
32500: LIST
32501: LIST
32502: PUSH
32503: LD_INT 2
32505: NEG
32506: PUSH
32507: LD_INT 0
32509: PUSH
32510: EMPTY
32511: LIST
32512: LIST
32513: PUSH
32514: LD_INT 2
32516: NEG
32517: PUSH
32518: LD_INT 1
32520: NEG
32521: PUSH
32522: EMPTY
32523: LIST
32524: LIST
32525: PUSH
32526: LD_INT 2
32528: NEG
32529: PUSH
32530: LD_INT 2
32532: NEG
32533: PUSH
32534: EMPTY
32535: LIST
32536: LIST
32537: PUSH
32538: LD_INT 2
32540: NEG
32541: PUSH
32542: LD_INT 3
32544: NEG
32545: PUSH
32546: EMPTY
32547: LIST
32548: LIST
32549: PUSH
32550: LD_INT 2
32552: PUSH
32553: LD_INT 1
32555: NEG
32556: PUSH
32557: EMPTY
32558: LIST
32559: LIST
32560: PUSH
32561: LD_INT 3
32563: PUSH
32564: LD_INT 0
32566: PUSH
32567: EMPTY
32568: LIST
32569: LIST
32570: PUSH
32571: LD_INT 3
32573: PUSH
32574: LD_INT 1
32576: PUSH
32577: EMPTY
32578: LIST
32579: LIST
32580: PUSH
32581: LD_INT 3
32583: PUSH
32584: LD_INT 2
32586: PUSH
32587: EMPTY
32588: LIST
32589: LIST
32590: PUSH
32591: LD_INT 3
32593: PUSH
32594: LD_INT 3
32596: PUSH
32597: EMPTY
32598: LIST
32599: LIST
32600: PUSH
32601: LD_INT 2
32603: PUSH
32604: LD_INT 3
32606: PUSH
32607: EMPTY
32608: LIST
32609: LIST
32610: PUSH
32611: LD_INT 2
32613: NEG
32614: PUSH
32615: LD_INT 1
32617: PUSH
32618: EMPTY
32619: LIST
32620: LIST
32621: PUSH
32622: LD_INT 3
32624: NEG
32625: PUSH
32626: LD_INT 0
32628: PUSH
32629: EMPTY
32630: LIST
32631: LIST
32632: PUSH
32633: LD_INT 3
32635: NEG
32636: PUSH
32637: LD_INT 1
32639: NEG
32640: PUSH
32641: EMPTY
32642: LIST
32643: LIST
32644: PUSH
32645: LD_INT 3
32647: NEG
32648: PUSH
32649: LD_INT 2
32651: NEG
32652: PUSH
32653: EMPTY
32654: LIST
32655: LIST
32656: PUSH
32657: LD_INT 3
32659: NEG
32660: PUSH
32661: LD_INT 3
32663: NEG
32664: PUSH
32665: EMPTY
32666: LIST
32667: LIST
32668: PUSH
32669: EMPTY
32670: LIST
32671: LIST
32672: LIST
32673: LIST
32674: LIST
32675: LIST
32676: LIST
32677: LIST
32678: LIST
32679: LIST
32680: LIST
32681: LIST
32682: LIST
32683: LIST
32684: LIST
32685: LIST
32686: LIST
32687: LIST
32688: LIST
32689: LIST
32690: LIST
32691: LIST
32692: LIST
32693: LIST
32694: LIST
32695: LIST
32696: LIST
32697: LIST
32698: LIST
32699: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
32700: LD_ADDR_VAR 0 45
32704: PUSH
32705: LD_INT 0
32707: PUSH
32708: LD_INT 0
32710: PUSH
32711: EMPTY
32712: LIST
32713: LIST
32714: PUSH
32715: LD_INT 0
32717: PUSH
32718: LD_INT 1
32720: NEG
32721: PUSH
32722: EMPTY
32723: LIST
32724: LIST
32725: PUSH
32726: LD_INT 1
32728: PUSH
32729: LD_INT 0
32731: PUSH
32732: EMPTY
32733: LIST
32734: LIST
32735: PUSH
32736: LD_INT 1
32738: PUSH
32739: LD_INT 1
32741: PUSH
32742: EMPTY
32743: LIST
32744: LIST
32745: PUSH
32746: LD_INT 0
32748: PUSH
32749: LD_INT 1
32751: PUSH
32752: EMPTY
32753: LIST
32754: LIST
32755: PUSH
32756: LD_INT 1
32758: NEG
32759: PUSH
32760: LD_INT 0
32762: PUSH
32763: EMPTY
32764: LIST
32765: LIST
32766: PUSH
32767: LD_INT 1
32769: NEG
32770: PUSH
32771: LD_INT 1
32773: NEG
32774: PUSH
32775: EMPTY
32776: LIST
32777: LIST
32778: PUSH
32779: LD_INT 1
32781: NEG
32782: PUSH
32783: LD_INT 2
32785: NEG
32786: PUSH
32787: EMPTY
32788: LIST
32789: LIST
32790: PUSH
32791: LD_INT 0
32793: PUSH
32794: LD_INT 2
32796: NEG
32797: PUSH
32798: EMPTY
32799: LIST
32800: LIST
32801: PUSH
32802: LD_INT 1
32804: PUSH
32805: LD_INT 1
32807: NEG
32808: PUSH
32809: EMPTY
32810: LIST
32811: LIST
32812: PUSH
32813: LD_INT 2
32815: PUSH
32816: LD_INT 1
32818: PUSH
32819: EMPTY
32820: LIST
32821: LIST
32822: PUSH
32823: LD_INT 2
32825: PUSH
32826: LD_INT 2
32828: PUSH
32829: EMPTY
32830: LIST
32831: LIST
32832: PUSH
32833: LD_INT 1
32835: PUSH
32836: LD_INT 2
32838: PUSH
32839: EMPTY
32840: LIST
32841: LIST
32842: PUSH
32843: LD_INT 0
32845: PUSH
32846: LD_INT 2
32848: PUSH
32849: EMPTY
32850: LIST
32851: LIST
32852: PUSH
32853: LD_INT 1
32855: NEG
32856: PUSH
32857: LD_INT 1
32859: PUSH
32860: EMPTY
32861: LIST
32862: LIST
32863: PUSH
32864: LD_INT 2
32866: NEG
32867: PUSH
32868: LD_INT 1
32870: NEG
32871: PUSH
32872: EMPTY
32873: LIST
32874: LIST
32875: PUSH
32876: LD_INT 2
32878: NEG
32879: PUSH
32880: LD_INT 2
32882: NEG
32883: PUSH
32884: EMPTY
32885: LIST
32886: LIST
32887: PUSH
32888: LD_INT 2
32890: NEG
32891: PUSH
32892: LD_INT 3
32894: NEG
32895: PUSH
32896: EMPTY
32897: LIST
32898: LIST
32899: PUSH
32900: LD_INT 1
32902: NEG
32903: PUSH
32904: LD_INT 3
32906: NEG
32907: PUSH
32908: EMPTY
32909: LIST
32910: LIST
32911: PUSH
32912: LD_INT 0
32914: PUSH
32915: LD_INT 3
32917: NEG
32918: PUSH
32919: EMPTY
32920: LIST
32921: LIST
32922: PUSH
32923: LD_INT 1
32925: PUSH
32926: LD_INT 2
32928: NEG
32929: PUSH
32930: EMPTY
32931: LIST
32932: LIST
32933: PUSH
32934: LD_INT 3
32936: PUSH
32937: LD_INT 2
32939: PUSH
32940: EMPTY
32941: LIST
32942: LIST
32943: PUSH
32944: LD_INT 3
32946: PUSH
32947: LD_INT 3
32949: PUSH
32950: EMPTY
32951: LIST
32952: LIST
32953: PUSH
32954: LD_INT 2
32956: PUSH
32957: LD_INT 3
32959: PUSH
32960: EMPTY
32961: LIST
32962: LIST
32963: PUSH
32964: LD_INT 1
32966: PUSH
32967: LD_INT 3
32969: PUSH
32970: EMPTY
32971: LIST
32972: LIST
32973: PUSH
32974: LD_INT 0
32976: PUSH
32977: LD_INT 3
32979: PUSH
32980: EMPTY
32981: LIST
32982: LIST
32983: PUSH
32984: LD_INT 1
32986: NEG
32987: PUSH
32988: LD_INT 2
32990: PUSH
32991: EMPTY
32992: LIST
32993: LIST
32994: PUSH
32995: LD_INT 3
32997: NEG
32998: PUSH
32999: LD_INT 2
33001: NEG
33002: PUSH
33003: EMPTY
33004: LIST
33005: LIST
33006: PUSH
33007: LD_INT 3
33009: NEG
33010: PUSH
33011: LD_INT 3
33013: NEG
33014: PUSH
33015: EMPTY
33016: LIST
33017: LIST
33018: PUSH
33019: EMPTY
33020: LIST
33021: LIST
33022: LIST
33023: LIST
33024: LIST
33025: LIST
33026: LIST
33027: LIST
33028: LIST
33029: LIST
33030: LIST
33031: LIST
33032: LIST
33033: LIST
33034: LIST
33035: LIST
33036: LIST
33037: LIST
33038: LIST
33039: LIST
33040: LIST
33041: LIST
33042: LIST
33043: LIST
33044: LIST
33045: LIST
33046: LIST
33047: LIST
33048: LIST
33049: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
33050: LD_ADDR_VAR 0 46
33054: PUSH
33055: LD_INT 0
33057: PUSH
33058: LD_INT 0
33060: PUSH
33061: EMPTY
33062: LIST
33063: LIST
33064: PUSH
33065: LD_INT 0
33067: PUSH
33068: LD_INT 1
33070: NEG
33071: PUSH
33072: EMPTY
33073: LIST
33074: LIST
33075: PUSH
33076: LD_INT 1
33078: PUSH
33079: LD_INT 0
33081: PUSH
33082: EMPTY
33083: LIST
33084: LIST
33085: PUSH
33086: LD_INT 1
33088: PUSH
33089: LD_INT 1
33091: PUSH
33092: EMPTY
33093: LIST
33094: LIST
33095: PUSH
33096: LD_INT 0
33098: PUSH
33099: LD_INT 1
33101: PUSH
33102: EMPTY
33103: LIST
33104: LIST
33105: PUSH
33106: LD_INT 1
33108: NEG
33109: PUSH
33110: LD_INT 0
33112: PUSH
33113: EMPTY
33114: LIST
33115: LIST
33116: PUSH
33117: LD_INT 1
33119: NEG
33120: PUSH
33121: LD_INT 1
33123: NEG
33124: PUSH
33125: EMPTY
33126: LIST
33127: LIST
33128: PUSH
33129: LD_INT 1
33131: NEG
33132: PUSH
33133: LD_INT 2
33135: NEG
33136: PUSH
33137: EMPTY
33138: LIST
33139: LIST
33140: PUSH
33141: LD_INT 0
33143: PUSH
33144: LD_INT 2
33146: NEG
33147: PUSH
33148: EMPTY
33149: LIST
33150: LIST
33151: PUSH
33152: LD_INT 1
33154: PUSH
33155: LD_INT 1
33157: NEG
33158: PUSH
33159: EMPTY
33160: LIST
33161: LIST
33162: PUSH
33163: LD_INT 2
33165: PUSH
33166: LD_INT 0
33168: PUSH
33169: EMPTY
33170: LIST
33171: LIST
33172: PUSH
33173: LD_INT 2
33175: PUSH
33176: LD_INT 1
33178: PUSH
33179: EMPTY
33180: LIST
33181: LIST
33182: PUSH
33183: LD_INT 1
33185: PUSH
33186: LD_INT 2
33188: PUSH
33189: EMPTY
33190: LIST
33191: LIST
33192: PUSH
33193: LD_INT 0
33195: PUSH
33196: LD_INT 2
33198: PUSH
33199: EMPTY
33200: LIST
33201: LIST
33202: PUSH
33203: LD_INT 1
33205: NEG
33206: PUSH
33207: LD_INT 1
33209: PUSH
33210: EMPTY
33211: LIST
33212: LIST
33213: PUSH
33214: LD_INT 2
33216: NEG
33217: PUSH
33218: LD_INT 0
33220: PUSH
33221: EMPTY
33222: LIST
33223: LIST
33224: PUSH
33225: LD_INT 2
33227: NEG
33228: PUSH
33229: LD_INT 1
33231: NEG
33232: PUSH
33233: EMPTY
33234: LIST
33235: LIST
33236: PUSH
33237: LD_INT 1
33239: NEG
33240: PUSH
33241: LD_INT 3
33243: NEG
33244: PUSH
33245: EMPTY
33246: LIST
33247: LIST
33248: PUSH
33249: LD_INT 0
33251: PUSH
33252: LD_INT 3
33254: NEG
33255: PUSH
33256: EMPTY
33257: LIST
33258: LIST
33259: PUSH
33260: LD_INT 1
33262: PUSH
33263: LD_INT 2
33265: NEG
33266: PUSH
33267: EMPTY
33268: LIST
33269: LIST
33270: PUSH
33271: LD_INT 2
33273: PUSH
33274: LD_INT 1
33276: NEG
33277: PUSH
33278: EMPTY
33279: LIST
33280: LIST
33281: PUSH
33282: LD_INT 3
33284: PUSH
33285: LD_INT 0
33287: PUSH
33288: EMPTY
33289: LIST
33290: LIST
33291: PUSH
33292: LD_INT 3
33294: PUSH
33295: LD_INT 1
33297: PUSH
33298: EMPTY
33299: LIST
33300: LIST
33301: PUSH
33302: LD_INT 1
33304: PUSH
33305: LD_INT 3
33307: PUSH
33308: EMPTY
33309: LIST
33310: LIST
33311: PUSH
33312: LD_INT 0
33314: PUSH
33315: LD_INT 3
33317: PUSH
33318: EMPTY
33319: LIST
33320: LIST
33321: PUSH
33322: LD_INT 1
33324: NEG
33325: PUSH
33326: LD_INT 2
33328: PUSH
33329: EMPTY
33330: LIST
33331: LIST
33332: PUSH
33333: LD_INT 2
33335: NEG
33336: PUSH
33337: LD_INT 1
33339: PUSH
33340: EMPTY
33341: LIST
33342: LIST
33343: PUSH
33344: LD_INT 3
33346: NEG
33347: PUSH
33348: LD_INT 0
33350: PUSH
33351: EMPTY
33352: LIST
33353: LIST
33354: PUSH
33355: LD_INT 3
33357: NEG
33358: PUSH
33359: LD_INT 1
33361: NEG
33362: PUSH
33363: EMPTY
33364: LIST
33365: LIST
33366: PUSH
33367: EMPTY
33368: LIST
33369: LIST
33370: LIST
33371: LIST
33372: LIST
33373: LIST
33374: LIST
33375: LIST
33376: LIST
33377: LIST
33378: LIST
33379: LIST
33380: LIST
33381: LIST
33382: LIST
33383: LIST
33384: LIST
33385: LIST
33386: LIST
33387: LIST
33388: LIST
33389: LIST
33390: LIST
33391: LIST
33392: LIST
33393: LIST
33394: LIST
33395: LIST
33396: LIST
33397: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33398: LD_ADDR_VAR 0 47
33402: PUSH
33403: LD_INT 0
33405: PUSH
33406: LD_INT 0
33408: PUSH
33409: EMPTY
33410: LIST
33411: LIST
33412: PUSH
33413: LD_INT 0
33415: PUSH
33416: LD_INT 1
33418: NEG
33419: PUSH
33420: EMPTY
33421: LIST
33422: LIST
33423: PUSH
33424: LD_INT 1
33426: PUSH
33427: LD_INT 0
33429: PUSH
33430: EMPTY
33431: LIST
33432: LIST
33433: PUSH
33434: LD_INT 1
33436: PUSH
33437: LD_INT 1
33439: PUSH
33440: EMPTY
33441: LIST
33442: LIST
33443: PUSH
33444: LD_INT 0
33446: PUSH
33447: LD_INT 1
33449: PUSH
33450: EMPTY
33451: LIST
33452: LIST
33453: PUSH
33454: LD_INT 1
33456: NEG
33457: PUSH
33458: LD_INT 0
33460: PUSH
33461: EMPTY
33462: LIST
33463: LIST
33464: PUSH
33465: LD_INT 1
33467: NEG
33468: PUSH
33469: LD_INT 1
33471: NEG
33472: PUSH
33473: EMPTY
33474: LIST
33475: LIST
33476: PUSH
33477: LD_INT 1
33479: NEG
33480: PUSH
33481: LD_INT 2
33483: NEG
33484: PUSH
33485: EMPTY
33486: LIST
33487: LIST
33488: PUSH
33489: LD_INT 0
33491: PUSH
33492: LD_INT 2
33494: NEG
33495: PUSH
33496: EMPTY
33497: LIST
33498: LIST
33499: PUSH
33500: LD_INT 1
33502: PUSH
33503: LD_INT 1
33505: NEG
33506: PUSH
33507: EMPTY
33508: LIST
33509: LIST
33510: PUSH
33511: LD_INT 2
33513: NEG
33514: PUSH
33515: LD_INT 1
33517: NEG
33518: PUSH
33519: EMPTY
33520: LIST
33521: LIST
33522: PUSH
33523: LD_INT 2
33525: NEG
33526: PUSH
33527: LD_INT 2
33529: NEG
33530: PUSH
33531: EMPTY
33532: LIST
33533: LIST
33534: PUSH
33535: EMPTY
33536: LIST
33537: LIST
33538: LIST
33539: LIST
33540: LIST
33541: LIST
33542: LIST
33543: LIST
33544: LIST
33545: LIST
33546: LIST
33547: LIST
33548: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
33549: LD_ADDR_VAR 0 48
33553: PUSH
33554: LD_INT 0
33556: PUSH
33557: LD_INT 0
33559: PUSH
33560: EMPTY
33561: LIST
33562: LIST
33563: PUSH
33564: LD_INT 0
33566: PUSH
33567: LD_INT 1
33569: NEG
33570: PUSH
33571: EMPTY
33572: LIST
33573: LIST
33574: PUSH
33575: LD_INT 1
33577: PUSH
33578: LD_INT 0
33580: PUSH
33581: EMPTY
33582: LIST
33583: LIST
33584: PUSH
33585: LD_INT 1
33587: PUSH
33588: LD_INT 1
33590: PUSH
33591: EMPTY
33592: LIST
33593: LIST
33594: PUSH
33595: LD_INT 0
33597: PUSH
33598: LD_INT 1
33600: PUSH
33601: EMPTY
33602: LIST
33603: LIST
33604: PUSH
33605: LD_INT 1
33607: NEG
33608: PUSH
33609: LD_INT 0
33611: PUSH
33612: EMPTY
33613: LIST
33614: LIST
33615: PUSH
33616: LD_INT 1
33618: NEG
33619: PUSH
33620: LD_INT 1
33622: NEG
33623: PUSH
33624: EMPTY
33625: LIST
33626: LIST
33627: PUSH
33628: LD_INT 1
33630: NEG
33631: PUSH
33632: LD_INT 2
33634: NEG
33635: PUSH
33636: EMPTY
33637: LIST
33638: LIST
33639: PUSH
33640: LD_INT 0
33642: PUSH
33643: LD_INT 2
33645: NEG
33646: PUSH
33647: EMPTY
33648: LIST
33649: LIST
33650: PUSH
33651: LD_INT 1
33653: PUSH
33654: LD_INT 1
33656: NEG
33657: PUSH
33658: EMPTY
33659: LIST
33660: LIST
33661: PUSH
33662: LD_INT 2
33664: PUSH
33665: LD_INT 0
33667: PUSH
33668: EMPTY
33669: LIST
33670: LIST
33671: PUSH
33672: LD_INT 2
33674: PUSH
33675: LD_INT 1
33677: PUSH
33678: EMPTY
33679: LIST
33680: LIST
33681: PUSH
33682: EMPTY
33683: LIST
33684: LIST
33685: LIST
33686: LIST
33687: LIST
33688: LIST
33689: LIST
33690: LIST
33691: LIST
33692: LIST
33693: LIST
33694: LIST
33695: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
33696: LD_ADDR_VAR 0 49
33700: PUSH
33701: LD_INT 0
33703: PUSH
33704: LD_INT 0
33706: PUSH
33707: EMPTY
33708: LIST
33709: LIST
33710: PUSH
33711: LD_INT 0
33713: PUSH
33714: LD_INT 1
33716: NEG
33717: PUSH
33718: EMPTY
33719: LIST
33720: LIST
33721: PUSH
33722: LD_INT 1
33724: PUSH
33725: LD_INT 0
33727: PUSH
33728: EMPTY
33729: LIST
33730: LIST
33731: PUSH
33732: LD_INT 1
33734: PUSH
33735: LD_INT 1
33737: PUSH
33738: EMPTY
33739: LIST
33740: LIST
33741: PUSH
33742: LD_INT 0
33744: PUSH
33745: LD_INT 1
33747: PUSH
33748: EMPTY
33749: LIST
33750: LIST
33751: PUSH
33752: LD_INT 1
33754: NEG
33755: PUSH
33756: LD_INT 0
33758: PUSH
33759: EMPTY
33760: LIST
33761: LIST
33762: PUSH
33763: LD_INT 1
33765: NEG
33766: PUSH
33767: LD_INT 1
33769: NEG
33770: PUSH
33771: EMPTY
33772: LIST
33773: LIST
33774: PUSH
33775: LD_INT 1
33777: PUSH
33778: LD_INT 1
33780: NEG
33781: PUSH
33782: EMPTY
33783: LIST
33784: LIST
33785: PUSH
33786: LD_INT 2
33788: PUSH
33789: LD_INT 0
33791: PUSH
33792: EMPTY
33793: LIST
33794: LIST
33795: PUSH
33796: LD_INT 2
33798: PUSH
33799: LD_INT 1
33801: PUSH
33802: EMPTY
33803: LIST
33804: LIST
33805: PUSH
33806: LD_INT 2
33808: PUSH
33809: LD_INT 2
33811: PUSH
33812: EMPTY
33813: LIST
33814: LIST
33815: PUSH
33816: LD_INT 1
33818: PUSH
33819: LD_INT 2
33821: PUSH
33822: EMPTY
33823: LIST
33824: LIST
33825: PUSH
33826: EMPTY
33827: LIST
33828: LIST
33829: LIST
33830: LIST
33831: LIST
33832: LIST
33833: LIST
33834: LIST
33835: LIST
33836: LIST
33837: LIST
33838: LIST
33839: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
33840: LD_ADDR_VAR 0 50
33844: PUSH
33845: LD_INT 0
33847: PUSH
33848: LD_INT 0
33850: PUSH
33851: EMPTY
33852: LIST
33853: LIST
33854: PUSH
33855: LD_INT 0
33857: PUSH
33858: LD_INT 1
33860: NEG
33861: PUSH
33862: EMPTY
33863: LIST
33864: LIST
33865: PUSH
33866: LD_INT 1
33868: PUSH
33869: LD_INT 0
33871: PUSH
33872: EMPTY
33873: LIST
33874: LIST
33875: PUSH
33876: LD_INT 1
33878: PUSH
33879: LD_INT 1
33881: PUSH
33882: EMPTY
33883: LIST
33884: LIST
33885: PUSH
33886: LD_INT 0
33888: PUSH
33889: LD_INT 1
33891: PUSH
33892: EMPTY
33893: LIST
33894: LIST
33895: PUSH
33896: LD_INT 1
33898: NEG
33899: PUSH
33900: LD_INT 0
33902: PUSH
33903: EMPTY
33904: LIST
33905: LIST
33906: PUSH
33907: LD_INT 1
33909: NEG
33910: PUSH
33911: LD_INT 1
33913: NEG
33914: PUSH
33915: EMPTY
33916: LIST
33917: LIST
33918: PUSH
33919: LD_INT 2
33921: PUSH
33922: LD_INT 1
33924: PUSH
33925: EMPTY
33926: LIST
33927: LIST
33928: PUSH
33929: LD_INT 2
33931: PUSH
33932: LD_INT 2
33934: PUSH
33935: EMPTY
33936: LIST
33937: LIST
33938: PUSH
33939: LD_INT 1
33941: PUSH
33942: LD_INT 2
33944: PUSH
33945: EMPTY
33946: LIST
33947: LIST
33948: PUSH
33949: LD_INT 0
33951: PUSH
33952: LD_INT 2
33954: PUSH
33955: EMPTY
33956: LIST
33957: LIST
33958: PUSH
33959: LD_INT 1
33961: NEG
33962: PUSH
33963: LD_INT 1
33965: PUSH
33966: EMPTY
33967: LIST
33968: LIST
33969: PUSH
33970: EMPTY
33971: LIST
33972: LIST
33973: LIST
33974: LIST
33975: LIST
33976: LIST
33977: LIST
33978: LIST
33979: LIST
33980: LIST
33981: LIST
33982: LIST
33983: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
33984: LD_ADDR_VAR 0 51
33988: PUSH
33989: LD_INT 0
33991: PUSH
33992: LD_INT 0
33994: PUSH
33995: EMPTY
33996: LIST
33997: LIST
33998: PUSH
33999: LD_INT 0
34001: PUSH
34002: LD_INT 1
34004: NEG
34005: PUSH
34006: EMPTY
34007: LIST
34008: LIST
34009: PUSH
34010: LD_INT 1
34012: PUSH
34013: LD_INT 0
34015: PUSH
34016: EMPTY
34017: LIST
34018: LIST
34019: PUSH
34020: LD_INT 1
34022: PUSH
34023: LD_INT 1
34025: PUSH
34026: EMPTY
34027: LIST
34028: LIST
34029: PUSH
34030: LD_INT 0
34032: PUSH
34033: LD_INT 1
34035: PUSH
34036: EMPTY
34037: LIST
34038: LIST
34039: PUSH
34040: LD_INT 1
34042: NEG
34043: PUSH
34044: LD_INT 0
34046: PUSH
34047: EMPTY
34048: LIST
34049: LIST
34050: PUSH
34051: LD_INT 1
34053: NEG
34054: PUSH
34055: LD_INT 1
34057: NEG
34058: PUSH
34059: EMPTY
34060: LIST
34061: LIST
34062: PUSH
34063: LD_INT 1
34065: PUSH
34066: LD_INT 2
34068: PUSH
34069: EMPTY
34070: LIST
34071: LIST
34072: PUSH
34073: LD_INT 0
34075: PUSH
34076: LD_INT 2
34078: PUSH
34079: EMPTY
34080: LIST
34081: LIST
34082: PUSH
34083: LD_INT 1
34085: NEG
34086: PUSH
34087: LD_INT 1
34089: PUSH
34090: EMPTY
34091: LIST
34092: LIST
34093: PUSH
34094: LD_INT 2
34096: NEG
34097: PUSH
34098: LD_INT 0
34100: PUSH
34101: EMPTY
34102: LIST
34103: LIST
34104: PUSH
34105: LD_INT 2
34107: NEG
34108: PUSH
34109: LD_INT 1
34111: NEG
34112: PUSH
34113: EMPTY
34114: LIST
34115: LIST
34116: PUSH
34117: EMPTY
34118: LIST
34119: LIST
34120: LIST
34121: LIST
34122: LIST
34123: LIST
34124: LIST
34125: LIST
34126: LIST
34127: LIST
34128: LIST
34129: LIST
34130: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34131: LD_ADDR_VAR 0 52
34135: PUSH
34136: LD_INT 0
34138: PUSH
34139: LD_INT 0
34141: PUSH
34142: EMPTY
34143: LIST
34144: LIST
34145: PUSH
34146: LD_INT 0
34148: PUSH
34149: LD_INT 1
34151: NEG
34152: PUSH
34153: EMPTY
34154: LIST
34155: LIST
34156: PUSH
34157: LD_INT 1
34159: PUSH
34160: LD_INT 0
34162: PUSH
34163: EMPTY
34164: LIST
34165: LIST
34166: PUSH
34167: LD_INT 1
34169: PUSH
34170: LD_INT 1
34172: PUSH
34173: EMPTY
34174: LIST
34175: LIST
34176: PUSH
34177: LD_INT 0
34179: PUSH
34180: LD_INT 1
34182: PUSH
34183: EMPTY
34184: LIST
34185: LIST
34186: PUSH
34187: LD_INT 1
34189: NEG
34190: PUSH
34191: LD_INT 0
34193: PUSH
34194: EMPTY
34195: LIST
34196: LIST
34197: PUSH
34198: LD_INT 1
34200: NEG
34201: PUSH
34202: LD_INT 1
34204: NEG
34205: PUSH
34206: EMPTY
34207: LIST
34208: LIST
34209: PUSH
34210: LD_INT 1
34212: NEG
34213: PUSH
34214: LD_INT 2
34216: NEG
34217: PUSH
34218: EMPTY
34219: LIST
34220: LIST
34221: PUSH
34222: LD_INT 1
34224: NEG
34225: PUSH
34226: LD_INT 1
34228: PUSH
34229: EMPTY
34230: LIST
34231: LIST
34232: PUSH
34233: LD_INT 2
34235: NEG
34236: PUSH
34237: LD_INT 0
34239: PUSH
34240: EMPTY
34241: LIST
34242: LIST
34243: PUSH
34244: LD_INT 2
34246: NEG
34247: PUSH
34248: LD_INT 1
34250: NEG
34251: PUSH
34252: EMPTY
34253: LIST
34254: LIST
34255: PUSH
34256: LD_INT 2
34258: NEG
34259: PUSH
34260: LD_INT 2
34262: NEG
34263: PUSH
34264: EMPTY
34265: LIST
34266: LIST
34267: PUSH
34268: EMPTY
34269: LIST
34270: LIST
34271: LIST
34272: LIST
34273: LIST
34274: LIST
34275: LIST
34276: LIST
34277: LIST
34278: LIST
34279: LIST
34280: LIST
34281: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34282: LD_ADDR_VAR 0 53
34286: PUSH
34287: LD_INT 0
34289: PUSH
34290: LD_INT 0
34292: PUSH
34293: EMPTY
34294: LIST
34295: LIST
34296: PUSH
34297: LD_INT 0
34299: PUSH
34300: LD_INT 1
34302: NEG
34303: PUSH
34304: EMPTY
34305: LIST
34306: LIST
34307: PUSH
34308: LD_INT 1
34310: PUSH
34311: LD_INT 0
34313: PUSH
34314: EMPTY
34315: LIST
34316: LIST
34317: PUSH
34318: LD_INT 1
34320: PUSH
34321: LD_INT 1
34323: PUSH
34324: EMPTY
34325: LIST
34326: LIST
34327: PUSH
34328: LD_INT 0
34330: PUSH
34331: LD_INT 1
34333: PUSH
34334: EMPTY
34335: LIST
34336: LIST
34337: PUSH
34338: LD_INT 1
34340: NEG
34341: PUSH
34342: LD_INT 0
34344: PUSH
34345: EMPTY
34346: LIST
34347: LIST
34348: PUSH
34349: LD_INT 1
34351: NEG
34352: PUSH
34353: LD_INT 1
34355: NEG
34356: PUSH
34357: EMPTY
34358: LIST
34359: LIST
34360: PUSH
34361: LD_INT 1
34363: NEG
34364: PUSH
34365: LD_INT 2
34367: NEG
34368: PUSH
34369: EMPTY
34370: LIST
34371: LIST
34372: PUSH
34373: LD_INT 0
34375: PUSH
34376: LD_INT 2
34378: NEG
34379: PUSH
34380: EMPTY
34381: LIST
34382: LIST
34383: PUSH
34384: LD_INT 1
34386: PUSH
34387: LD_INT 1
34389: NEG
34390: PUSH
34391: EMPTY
34392: LIST
34393: LIST
34394: PUSH
34395: LD_INT 2
34397: PUSH
34398: LD_INT 0
34400: PUSH
34401: EMPTY
34402: LIST
34403: LIST
34404: PUSH
34405: LD_INT 2
34407: PUSH
34408: LD_INT 1
34410: PUSH
34411: EMPTY
34412: LIST
34413: LIST
34414: PUSH
34415: LD_INT 2
34417: PUSH
34418: LD_INT 2
34420: PUSH
34421: EMPTY
34422: LIST
34423: LIST
34424: PUSH
34425: LD_INT 1
34427: PUSH
34428: LD_INT 2
34430: PUSH
34431: EMPTY
34432: LIST
34433: LIST
34434: PUSH
34435: LD_INT 0
34437: PUSH
34438: LD_INT 2
34440: PUSH
34441: EMPTY
34442: LIST
34443: LIST
34444: PUSH
34445: LD_INT 1
34447: NEG
34448: PUSH
34449: LD_INT 1
34451: PUSH
34452: EMPTY
34453: LIST
34454: LIST
34455: PUSH
34456: LD_INT 2
34458: NEG
34459: PUSH
34460: LD_INT 0
34462: PUSH
34463: EMPTY
34464: LIST
34465: LIST
34466: PUSH
34467: LD_INT 2
34469: NEG
34470: PUSH
34471: LD_INT 1
34473: NEG
34474: PUSH
34475: EMPTY
34476: LIST
34477: LIST
34478: PUSH
34479: LD_INT 2
34481: NEG
34482: PUSH
34483: LD_INT 2
34485: NEG
34486: PUSH
34487: EMPTY
34488: LIST
34489: LIST
34490: PUSH
34491: EMPTY
34492: LIST
34493: LIST
34494: LIST
34495: LIST
34496: LIST
34497: LIST
34498: LIST
34499: LIST
34500: LIST
34501: LIST
34502: LIST
34503: LIST
34504: LIST
34505: LIST
34506: LIST
34507: LIST
34508: LIST
34509: LIST
34510: LIST
34511: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34512: LD_ADDR_VAR 0 54
34516: PUSH
34517: LD_INT 0
34519: PUSH
34520: LD_INT 0
34522: PUSH
34523: EMPTY
34524: LIST
34525: LIST
34526: PUSH
34527: LD_INT 0
34529: PUSH
34530: LD_INT 1
34532: NEG
34533: PUSH
34534: EMPTY
34535: LIST
34536: LIST
34537: PUSH
34538: LD_INT 1
34540: PUSH
34541: LD_INT 0
34543: PUSH
34544: EMPTY
34545: LIST
34546: LIST
34547: PUSH
34548: LD_INT 1
34550: PUSH
34551: LD_INT 1
34553: PUSH
34554: EMPTY
34555: LIST
34556: LIST
34557: PUSH
34558: LD_INT 0
34560: PUSH
34561: LD_INT 1
34563: PUSH
34564: EMPTY
34565: LIST
34566: LIST
34567: PUSH
34568: LD_INT 1
34570: NEG
34571: PUSH
34572: LD_INT 0
34574: PUSH
34575: EMPTY
34576: LIST
34577: LIST
34578: PUSH
34579: LD_INT 1
34581: NEG
34582: PUSH
34583: LD_INT 1
34585: NEG
34586: PUSH
34587: EMPTY
34588: LIST
34589: LIST
34590: PUSH
34591: LD_INT 1
34593: NEG
34594: PUSH
34595: LD_INT 2
34597: NEG
34598: PUSH
34599: EMPTY
34600: LIST
34601: LIST
34602: PUSH
34603: LD_INT 0
34605: PUSH
34606: LD_INT 2
34608: NEG
34609: PUSH
34610: EMPTY
34611: LIST
34612: LIST
34613: PUSH
34614: LD_INT 1
34616: PUSH
34617: LD_INT 1
34619: NEG
34620: PUSH
34621: EMPTY
34622: LIST
34623: LIST
34624: PUSH
34625: LD_INT 2
34627: PUSH
34628: LD_INT 0
34630: PUSH
34631: EMPTY
34632: LIST
34633: LIST
34634: PUSH
34635: LD_INT 2
34637: PUSH
34638: LD_INT 1
34640: PUSH
34641: EMPTY
34642: LIST
34643: LIST
34644: PUSH
34645: LD_INT 2
34647: PUSH
34648: LD_INT 2
34650: PUSH
34651: EMPTY
34652: LIST
34653: LIST
34654: PUSH
34655: LD_INT 1
34657: PUSH
34658: LD_INT 2
34660: PUSH
34661: EMPTY
34662: LIST
34663: LIST
34664: PUSH
34665: LD_INT 0
34667: PUSH
34668: LD_INT 2
34670: PUSH
34671: EMPTY
34672: LIST
34673: LIST
34674: PUSH
34675: LD_INT 1
34677: NEG
34678: PUSH
34679: LD_INT 1
34681: PUSH
34682: EMPTY
34683: LIST
34684: LIST
34685: PUSH
34686: LD_INT 2
34688: NEG
34689: PUSH
34690: LD_INT 0
34692: PUSH
34693: EMPTY
34694: LIST
34695: LIST
34696: PUSH
34697: LD_INT 2
34699: NEG
34700: PUSH
34701: LD_INT 1
34703: NEG
34704: PUSH
34705: EMPTY
34706: LIST
34707: LIST
34708: PUSH
34709: LD_INT 2
34711: NEG
34712: PUSH
34713: LD_INT 2
34715: NEG
34716: PUSH
34717: EMPTY
34718: LIST
34719: LIST
34720: PUSH
34721: EMPTY
34722: LIST
34723: LIST
34724: LIST
34725: LIST
34726: LIST
34727: LIST
34728: LIST
34729: LIST
34730: LIST
34731: LIST
34732: LIST
34733: LIST
34734: LIST
34735: LIST
34736: LIST
34737: LIST
34738: LIST
34739: LIST
34740: LIST
34741: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34742: LD_ADDR_VAR 0 55
34746: PUSH
34747: LD_INT 0
34749: PUSH
34750: LD_INT 0
34752: PUSH
34753: EMPTY
34754: LIST
34755: LIST
34756: PUSH
34757: LD_INT 0
34759: PUSH
34760: LD_INT 1
34762: NEG
34763: PUSH
34764: EMPTY
34765: LIST
34766: LIST
34767: PUSH
34768: LD_INT 1
34770: PUSH
34771: LD_INT 0
34773: PUSH
34774: EMPTY
34775: LIST
34776: LIST
34777: PUSH
34778: LD_INT 1
34780: PUSH
34781: LD_INT 1
34783: PUSH
34784: EMPTY
34785: LIST
34786: LIST
34787: PUSH
34788: LD_INT 0
34790: PUSH
34791: LD_INT 1
34793: PUSH
34794: EMPTY
34795: LIST
34796: LIST
34797: PUSH
34798: LD_INT 1
34800: NEG
34801: PUSH
34802: LD_INT 0
34804: PUSH
34805: EMPTY
34806: LIST
34807: LIST
34808: PUSH
34809: LD_INT 1
34811: NEG
34812: PUSH
34813: LD_INT 1
34815: NEG
34816: PUSH
34817: EMPTY
34818: LIST
34819: LIST
34820: PUSH
34821: LD_INT 1
34823: NEG
34824: PUSH
34825: LD_INT 2
34827: NEG
34828: PUSH
34829: EMPTY
34830: LIST
34831: LIST
34832: PUSH
34833: LD_INT 0
34835: PUSH
34836: LD_INT 2
34838: NEG
34839: PUSH
34840: EMPTY
34841: LIST
34842: LIST
34843: PUSH
34844: LD_INT 1
34846: PUSH
34847: LD_INT 1
34849: NEG
34850: PUSH
34851: EMPTY
34852: LIST
34853: LIST
34854: PUSH
34855: LD_INT 2
34857: PUSH
34858: LD_INT 0
34860: PUSH
34861: EMPTY
34862: LIST
34863: LIST
34864: PUSH
34865: LD_INT 2
34867: PUSH
34868: LD_INT 1
34870: PUSH
34871: EMPTY
34872: LIST
34873: LIST
34874: PUSH
34875: LD_INT 2
34877: PUSH
34878: LD_INT 2
34880: PUSH
34881: EMPTY
34882: LIST
34883: LIST
34884: PUSH
34885: LD_INT 1
34887: PUSH
34888: LD_INT 2
34890: PUSH
34891: EMPTY
34892: LIST
34893: LIST
34894: PUSH
34895: LD_INT 0
34897: PUSH
34898: LD_INT 2
34900: PUSH
34901: EMPTY
34902: LIST
34903: LIST
34904: PUSH
34905: LD_INT 1
34907: NEG
34908: PUSH
34909: LD_INT 1
34911: PUSH
34912: EMPTY
34913: LIST
34914: LIST
34915: PUSH
34916: LD_INT 2
34918: NEG
34919: PUSH
34920: LD_INT 0
34922: PUSH
34923: EMPTY
34924: LIST
34925: LIST
34926: PUSH
34927: LD_INT 2
34929: NEG
34930: PUSH
34931: LD_INT 1
34933: NEG
34934: PUSH
34935: EMPTY
34936: LIST
34937: LIST
34938: PUSH
34939: LD_INT 2
34941: NEG
34942: PUSH
34943: LD_INT 2
34945: NEG
34946: PUSH
34947: EMPTY
34948: LIST
34949: LIST
34950: PUSH
34951: EMPTY
34952: LIST
34953: LIST
34954: LIST
34955: LIST
34956: LIST
34957: LIST
34958: LIST
34959: LIST
34960: LIST
34961: LIST
34962: LIST
34963: LIST
34964: LIST
34965: LIST
34966: LIST
34967: LIST
34968: LIST
34969: LIST
34970: LIST
34971: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34972: LD_ADDR_VAR 0 56
34976: PUSH
34977: LD_INT 0
34979: PUSH
34980: LD_INT 0
34982: PUSH
34983: EMPTY
34984: LIST
34985: LIST
34986: PUSH
34987: LD_INT 0
34989: PUSH
34990: LD_INT 1
34992: NEG
34993: PUSH
34994: EMPTY
34995: LIST
34996: LIST
34997: PUSH
34998: LD_INT 1
35000: PUSH
35001: LD_INT 0
35003: PUSH
35004: EMPTY
35005: LIST
35006: LIST
35007: PUSH
35008: LD_INT 1
35010: PUSH
35011: LD_INT 1
35013: PUSH
35014: EMPTY
35015: LIST
35016: LIST
35017: PUSH
35018: LD_INT 0
35020: PUSH
35021: LD_INT 1
35023: PUSH
35024: EMPTY
35025: LIST
35026: LIST
35027: PUSH
35028: LD_INT 1
35030: NEG
35031: PUSH
35032: LD_INT 0
35034: PUSH
35035: EMPTY
35036: LIST
35037: LIST
35038: PUSH
35039: LD_INT 1
35041: NEG
35042: PUSH
35043: LD_INT 1
35045: NEG
35046: PUSH
35047: EMPTY
35048: LIST
35049: LIST
35050: PUSH
35051: LD_INT 1
35053: NEG
35054: PUSH
35055: LD_INT 2
35057: NEG
35058: PUSH
35059: EMPTY
35060: LIST
35061: LIST
35062: PUSH
35063: LD_INT 0
35065: PUSH
35066: LD_INT 2
35068: NEG
35069: PUSH
35070: EMPTY
35071: LIST
35072: LIST
35073: PUSH
35074: LD_INT 1
35076: PUSH
35077: LD_INT 1
35079: NEG
35080: PUSH
35081: EMPTY
35082: LIST
35083: LIST
35084: PUSH
35085: LD_INT 2
35087: PUSH
35088: LD_INT 0
35090: PUSH
35091: EMPTY
35092: LIST
35093: LIST
35094: PUSH
35095: LD_INT 2
35097: PUSH
35098: LD_INT 1
35100: PUSH
35101: EMPTY
35102: LIST
35103: LIST
35104: PUSH
35105: LD_INT 2
35107: PUSH
35108: LD_INT 2
35110: PUSH
35111: EMPTY
35112: LIST
35113: LIST
35114: PUSH
35115: LD_INT 1
35117: PUSH
35118: LD_INT 2
35120: PUSH
35121: EMPTY
35122: LIST
35123: LIST
35124: PUSH
35125: LD_INT 0
35127: PUSH
35128: LD_INT 2
35130: PUSH
35131: EMPTY
35132: LIST
35133: LIST
35134: PUSH
35135: LD_INT 1
35137: NEG
35138: PUSH
35139: LD_INT 1
35141: PUSH
35142: EMPTY
35143: LIST
35144: LIST
35145: PUSH
35146: LD_INT 2
35148: NEG
35149: PUSH
35150: LD_INT 0
35152: PUSH
35153: EMPTY
35154: LIST
35155: LIST
35156: PUSH
35157: LD_INT 2
35159: NEG
35160: PUSH
35161: LD_INT 1
35163: NEG
35164: PUSH
35165: EMPTY
35166: LIST
35167: LIST
35168: PUSH
35169: LD_INT 2
35171: NEG
35172: PUSH
35173: LD_INT 2
35175: NEG
35176: PUSH
35177: EMPTY
35178: LIST
35179: LIST
35180: PUSH
35181: EMPTY
35182: LIST
35183: LIST
35184: LIST
35185: LIST
35186: LIST
35187: LIST
35188: LIST
35189: LIST
35190: LIST
35191: LIST
35192: LIST
35193: LIST
35194: LIST
35195: LIST
35196: LIST
35197: LIST
35198: LIST
35199: LIST
35200: LIST
35201: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35202: LD_ADDR_VAR 0 57
35206: PUSH
35207: LD_INT 0
35209: PUSH
35210: LD_INT 0
35212: PUSH
35213: EMPTY
35214: LIST
35215: LIST
35216: PUSH
35217: LD_INT 0
35219: PUSH
35220: LD_INT 1
35222: NEG
35223: PUSH
35224: EMPTY
35225: LIST
35226: LIST
35227: PUSH
35228: LD_INT 1
35230: PUSH
35231: LD_INT 0
35233: PUSH
35234: EMPTY
35235: LIST
35236: LIST
35237: PUSH
35238: LD_INT 1
35240: PUSH
35241: LD_INT 1
35243: PUSH
35244: EMPTY
35245: LIST
35246: LIST
35247: PUSH
35248: LD_INT 0
35250: PUSH
35251: LD_INT 1
35253: PUSH
35254: EMPTY
35255: LIST
35256: LIST
35257: PUSH
35258: LD_INT 1
35260: NEG
35261: PUSH
35262: LD_INT 0
35264: PUSH
35265: EMPTY
35266: LIST
35267: LIST
35268: PUSH
35269: LD_INT 1
35271: NEG
35272: PUSH
35273: LD_INT 1
35275: NEG
35276: PUSH
35277: EMPTY
35278: LIST
35279: LIST
35280: PUSH
35281: LD_INT 1
35283: NEG
35284: PUSH
35285: LD_INT 2
35287: NEG
35288: PUSH
35289: EMPTY
35290: LIST
35291: LIST
35292: PUSH
35293: LD_INT 0
35295: PUSH
35296: LD_INT 2
35298: NEG
35299: PUSH
35300: EMPTY
35301: LIST
35302: LIST
35303: PUSH
35304: LD_INT 1
35306: PUSH
35307: LD_INT 1
35309: NEG
35310: PUSH
35311: EMPTY
35312: LIST
35313: LIST
35314: PUSH
35315: LD_INT 2
35317: PUSH
35318: LD_INT 0
35320: PUSH
35321: EMPTY
35322: LIST
35323: LIST
35324: PUSH
35325: LD_INT 2
35327: PUSH
35328: LD_INT 1
35330: PUSH
35331: EMPTY
35332: LIST
35333: LIST
35334: PUSH
35335: LD_INT 2
35337: PUSH
35338: LD_INT 2
35340: PUSH
35341: EMPTY
35342: LIST
35343: LIST
35344: PUSH
35345: LD_INT 1
35347: PUSH
35348: LD_INT 2
35350: PUSH
35351: EMPTY
35352: LIST
35353: LIST
35354: PUSH
35355: LD_INT 0
35357: PUSH
35358: LD_INT 2
35360: PUSH
35361: EMPTY
35362: LIST
35363: LIST
35364: PUSH
35365: LD_INT 1
35367: NEG
35368: PUSH
35369: LD_INT 1
35371: PUSH
35372: EMPTY
35373: LIST
35374: LIST
35375: PUSH
35376: LD_INT 2
35378: NEG
35379: PUSH
35380: LD_INT 0
35382: PUSH
35383: EMPTY
35384: LIST
35385: LIST
35386: PUSH
35387: LD_INT 2
35389: NEG
35390: PUSH
35391: LD_INT 1
35393: NEG
35394: PUSH
35395: EMPTY
35396: LIST
35397: LIST
35398: PUSH
35399: LD_INT 2
35401: NEG
35402: PUSH
35403: LD_INT 2
35405: NEG
35406: PUSH
35407: EMPTY
35408: LIST
35409: LIST
35410: PUSH
35411: EMPTY
35412: LIST
35413: LIST
35414: LIST
35415: LIST
35416: LIST
35417: LIST
35418: LIST
35419: LIST
35420: LIST
35421: LIST
35422: LIST
35423: LIST
35424: LIST
35425: LIST
35426: LIST
35427: LIST
35428: LIST
35429: LIST
35430: LIST
35431: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35432: LD_ADDR_VAR 0 58
35436: PUSH
35437: LD_INT 0
35439: PUSH
35440: LD_INT 0
35442: PUSH
35443: EMPTY
35444: LIST
35445: LIST
35446: PUSH
35447: LD_INT 0
35449: PUSH
35450: LD_INT 1
35452: NEG
35453: PUSH
35454: EMPTY
35455: LIST
35456: LIST
35457: PUSH
35458: LD_INT 1
35460: PUSH
35461: LD_INT 0
35463: PUSH
35464: EMPTY
35465: LIST
35466: LIST
35467: PUSH
35468: LD_INT 1
35470: PUSH
35471: LD_INT 1
35473: PUSH
35474: EMPTY
35475: LIST
35476: LIST
35477: PUSH
35478: LD_INT 0
35480: PUSH
35481: LD_INT 1
35483: PUSH
35484: EMPTY
35485: LIST
35486: LIST
35487: PUSH
35488: LD_INT 1
35490: NEG
35491: PUSH
35492: LD_INT 0
35494: PUSH
35495: EMPTY
35496: LIST
35497: LIST
35498: PUSH
35499: LD_INT 1
35501: NEG
35502: PUSH
35503: LD_INT 1
35505: NEG
35506: PUSH
35507: EMPTY
35508: LIST
35509: LIST
35510: PUSH
35511: LD_INT 1
35513: NEG
35514: PUSH
35515: LD_INT 2
35517: NEG
35518: PUSH
35519: EMPTY
35520: LIST
35521: LIST
35522: PUSH
35523: LD_INT 0
35525: PUSH
35526: LD_INT 2
35528: NEG
35529: PUSH
35530: EMPTY
35531: LIST
35532: LIST
35533: PUSH
35534: LD_INT 1
35536: PUSH
35537: LD_INT 1
35539: NEG
35540: PUSH
35541: EMPTY
35542: LIST
35543: LIST
35544: PUSH
35545: LD_INT 2
35547: PUSH
35548: LD_INT 0
35550: PUSH
35551: EMPTY
35552: LIST
35553: LIST
35554: PUSH
35555: LD_INT 2
35557: PUSH
35558: LD_INT 1
35560: PUSH
35561: EMPTY
35562: LIST
35563: LIST
35564: PUSH
35565: LD_INT 2
35567: PUSH
35568: LD_INT 2
35570: PUSH
35571: EMPTY
35572: LIST
35573: LIST
35574: PUSH
35575: LD_INT 1
35577: PUSH
35578: LD_INT 2
35580: PUSH
35581: EMPTY
35582: LIST
35583: LIST
35584: PUSH
35585: LD_INT 0
35587: PUSH
35588: LD_INT 2
35590: PUSH
35591: EMPTY
35592: LIST
35593: LIST
35594: PUSH
35595: LD_INT 1
35597: NEG
35598: PUSH
35599: LD_INT 1
35601: PUSH
35602: EMPTY
35603: LIST
35604: LIST
35605: PUSH
35606: LD_INT 2
35608: NEG
35609: PUSH
35610: LD_INT 0
35612: PUSH
35613: EMPTY
35614: LIST
35615: LIST
35616: PUSH
35617: LD_INT 2
35619: NEG
35620: PUSH
35621: LD_INT 1
35623: NEG
35624: PUSH
35625: EMPTY
35626: LIST
35627: LIST
35628: PUSH
35629: LD_INT 2
35631: NEG
35632: PUSH
35633: LD_INT 2
35635: NEG
35636: PUSH
35637: EMPTY
35638: LIST
35639: LIST
35640: PUSH
35641: EMPTY
35642: LIST
35643: LIST
35644: LIST
35645: LIST
35646: LIST
35647: LIST
35648: LIST
35649: LIST
35650: LIST
35651: LIST
35652: LIST
35653: LIST
35654: LIST
35655: LIST
35656: LIST
35657: LIST
35658: LIST
35659: LIST
35660: LIST
35661: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
35662: LD_ADDR_VAR 0 59
35666: PUSH
35667: LD_INT 0
35669: PUSH
35670: LD_INT 0
35672: PUSH
35673: EMPTY
35674: LIST
35675: LIST
35676: PUSH
35677: LD_INT 0
35679: PUSH
35680: LD_INT 1
35682: NEG
35683: PUSH
35684: EMPTY
35685: LIST
35686: LIST
35687: PUSH
35688: LD_INT 1
35690: PUSH
35691: LD_INT 0
35693: PUSH
35694: EMPTY
35695: LIST
35696: LIST
35697: PUSH
35698: LD_INT 1
35700: PUSH
35701: LD_INT 1
35703: PUSH
35704: EMPTY
35705: LIST
35706: LIST
35707: PUSH
35708: LD_INT 0
35710: PUSH
35711: LD_INT 1
35713: PUSH
35714: EMPTY
35715: LIST
35716: LIST
35717: PUSH
35718: LD_INT 1
35720: NEG
35721: PUSH
35722: LD_INT 0
35724: PUSH
35725: EMPTY
35726: LIST
35727: LIST
35728: PUSH
35729: LD_INT 1
35731: NEG
35732: PUSH
35733: LD_INT 1
35735: NEG
35736: PUSH
35737: EMPTY
35738: LIST
35739: LIST
35740: PUSH
35741: EMPTY
35742: LIST
35743: LIST
35744: LIST
35745: LIST
35746: LIST
35747: LIST
35748: LIST
35749: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
35750: LD_ADDR_VAR 0 60
35754: PUSH
35755: LD_INT 0
35757: PUSH
35758: LD_INT 0
35760: PUSH
35761: EMPTY
35762: LIST
35763: LIST
35764: PUSH
35765: LD_INT 0
35767: PUSH
35768: LD_INT 1
35770: NEG
35771: PUSH
35772: EMPTY
35773: LIST
35774: LIST
35775: PUSH
35776: LD_INT 1
35778: PUSH
35779: LD_INT 0
35781: PUSH
35782: EMPTY
35783: LIST
35784: LIST
35785: PUSH
35786: LD_INT 1
35788: PUSH
35789: LD_INT 1
35791: PUSH
35792: EMPTY
35793: LIST
35794: LIST
35795: PUSH
35796: LD_INT 0
35798: PUSH
35799: LD_INT 1
35801: PUSH
35802: EMPTY
35803: LIST
35804: LIST
35805: PUSH
35806: LD_INT 1
35808: NEG
35809: PUSH
35810: LD_INT 0
35812: PUSH
35813: EMPTY
35814: LIST
35815: LIST
35816: PUSH
35817: LD_INT 1
35819: NEG
35820: PUSH
35821: LD_INT 1
35823: NEG
35824: PUSH
35825: EMPTY
35826: LIST
35827: LIST
35828: PUSH
35829: EMPTY
35830: LIST
35831: LIST
35832: LIST
35833: LIST
35834: LIST
35835: LIST
35836: LIST
35837: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
35838: LD_ADDR_VAR 0 61
35842: PUSH
35843: LD_INT 0
35845: PUSH
35846: LD_INT 0
35848: PUSH
35849: EMPTY
35850: LIST
35851: LIST
35852: PUSH
35853: LD_INT 0
35855: PUSH
35856: LD_INT 1
35858: NEG
35859: PUSH
35860: EMPTY
35861: LIST
35862: LIST
35863: PUSH
35864: LD_INT 1
35866: PUSH
35867: LD_INT 0
35869: PUSH
35870: EMPTY
35871: LIST
35872: LIST
35873: PUSH
35874: LD_INT 1
35876: PUSH
35877: LD_INT 1
35879: PUSH
35880: EMPTY
35881: LIST
35882: LIST
35883: PUSH
35884: LD_INT 0
35886: PUSH
35887: LD_INT 1
35889: PUSH
35890: EMPTY
35891: LIST
35892: LIST
35893: PUSH
35894: LD_INT 1
35896: NEG
35897: PUSH
35898: LD_INT 0
35900: PUSH
35901: EMPTY
35902: LIST
35903: LIST
35904: PUSH
35905: LD_INT 1
35907: NEG
35908: PUSH
35909: LD_INT 1
35911: NEG
35912: PUSH
35913: EMPTY
35914: LIST
35915: LIST
35916: PUSH
35917: EMPTY
35918: LIST
35919: LIST
35920: LIST
35921: LIST
35922: LIST
35923: LIST
35924: LIST
35925: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
35926: LD_ADDR_VAR 0 62
35930: PUSH
35931: LD_INT 0
35933: PUSH
35934: LD_INT 0
35936: PUSH
35937: EMPTY
35938: LIST
35939: LIST
35940: PUSH
35941: LD_INT 0
35943: PUSH
35944: LD_INT 1
35946: NEG
35947: PUSH
35948: EMPTY
35949: LIST
35950: LIST
35951: PUSH
35952: LD_INT 1
35954: PUSH
35955: LD_INT 0
35957: PUSH
35958: EMPTY
35959: LIST
35960: LIST
35961: PUSH
35962: LD_INT 1
35964: PUSH
35965: LD_INT 1
35967: PUSH
35968: EMPTY
35969: LIST
35970: LIST
35971: PUSH
35972: LD_INT 0
35974: PUSH
35975: LD_INT 1
35977: PUSH
35978: EMPTY
35979: LIST
35980: LIST
35981: PUSH
35982: LD_INT 1
35984: NEG
35985: PUSH
35986: LD_INT 0
35988: PUSH
35989: EMPTY
35990: LIST
35991: LIST
35992: PUSH
35993: LD_INT 1
35995: NEG
35996: PUSH
35997: LD_INT 1
35999: NEG
36000: PUSH
36001: EMPTY
36002: LIST
36003: LIST
36004: PUSH
36005: EMPTY
36006: LIST
36007: LIST
36008: LIST
36009: LIST
36010: LIST
36011: LIST
36012: LIST
36013: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
36014: LD_ADDR_VAR 0 63
36018: PUSH
36019: LD_INT 0
36021: PUSH
36022: LD_INT 0
36024: PUSH
36025: EMPTY
36026: LIST
36027: LIST
36028: PUSH
36029: LD_INT 0
36031: PUSH
36032: LD_INT 1
36034: NEG
36035: PUSH
36036: EMPTY
36037: LIST
36038: LIST
36039: PUSH
36040: LD_INT 1
36042: PUSH
36043: LD_INT 0
36045: PUSH
36046: EMPTY
36047: LIST
36048: LIST
36049: PUSH
36050: LD_INT 1
36052: PUSH
36053: LD_INT 1
36055: PUSH
36056: EMPTY
36057: LIST
36058: LIST
36059: PUSH
36060: LD_INT 0
36062: PUSH
36063: LD_INT 1
36065: PUSH
36066: EMPTY
36067: LIST
36068: LIST
36069: PUSH
36070: LD_INT 1
36072: NEG
36073: PUSH
36074: LD_INT 0
36076: PUSH
36077: EMPTY
36078: LIST
36079: LIST
36080: PUSH
36081: LD_INT 1
36083: NEG
36084: PUSH
36085: LD_INT 1
36087: NEG
36088: PUSH
36089: EMPTY
36090: LIST
36091: LIST
36092: PUSH
36093: EMPTY
36094: LIST
36095: LIST
36096: LIST
36097: LIST
36098: LIST
36099: LIST
36100: LIST
36101: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
36102: LD_ADDR_VAR 0 64
36106: PUSH
36107: LD_INT 0
36109: PUSH
36110: LD_INT 0
36112: PUSH
36113: EMPTY
36114: LIST
36115: LIST
36116: PUSH
36117: LD_INT 0
36119: PUSH
36120: LD_INT 1
36122: NEG
36123: PUSH
36124: EMPTY
36125: LIST
36126: LIST
36127: PUSH
36128: LD_INT 1
36130: PUSH
36131: LD_INT 0
36133: PUSH
36134: EMPTY
36135: LIST
36136: LIST
36137: PUSH
36138: LD_INT 1
36140: PUSH
36141: LD_INT 1
36143: PUSH
36144: EMPTY
36145: LIST
36146: LIST
36147: PUSH
36148: LD_INT 0
36150: PUSH
36151: LD_INT 1
36153: PUSH
36154: EMPTY
36155: LIST
36156: LIST
36157: PUSH
36158: LD_INT 1
36160: NEG
36161: PUSH
36162: LD_INT 0
36164: PUSH
36165: EMPTY
36166: LIST
36167: LIST
36168: PUSH
36169: LD_INT 1
36171: NEG
36172: PUSH
36173: LD_INT 1
36175: NEG
36176: PUSH
36177: EMPTY
36178: LIST
36179: LIST
36180: PUSH
36181: EMPTY
36182: LIST
36183: LIST
36184: LIST
36185: LIST
36186: LIST
36187: LIST
36188: LIST
36189: ST_TO_ADDR
// end ; 1 :
36190: GO 42087
36192: LD_INT 1
36194: DOUBLE
36195: EQUAL
36196: IFTRUE 36200
36198: GO 38823
36200: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
36201: LD_ADDR_VAR 0 11
36205: PUSH
36206: LD_INT 1
36208: NEG
36209: PUSH
36210: LD_INT 3
36212: NEG
36213: PUSH
36214: EMPTY
36215: LIST
36216: LIST
36217: PUSH
36218: LD_INT 0
36220: PUSH
36221: LD_INT 3
36223: NEG
36224: PUSH
36225: EMPTY
36226: LIST
36227: LIST
36228: PUSH
36229: LD_INT 1
36231: PUSH
36232: LD_INT 2
36234: NEG
36235: PUSH
36236: EMPTY
36237: LIST
36238: LIST
36239: PUSH
36240: EMPTY
36241: LIST
36242: LIST
36243: LIST
36244: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
36245: LD_ADDR_VAR 0 12
36249: PUSH
36250: LD_INT 2
36252: PUSH
36253: LD_INT 1
36255: NEG
36256: PUSH
36257: EMPTY
36258: LIST
36259: LIST
36260: PUSH
36261: LD_INT 3
36263: PUSH
36264: LD_INT 0
36266: PUSH
36267: EMPTY
36268: LIST
36269: LIST
36270: PUSH
36271: LD_INT 3
36273: PUSH
36274: LD_INT 1
36276: PUSH
36277: EMPTY
36278: LIST
36279: LIST
36280: PUSH
36281: EMPTY
36282: LIST
36283: LIST
36284: LIST
36285: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
36286: LD_ADDR_VAR 0 13
36290: PUSH
36291: LD_INT 3
36293: PUSH
36294: LD_INT 2
36296: PUSH
36297: EMPTY
36298: LIST
36299: LIST
36300: PUSH
36301: LD_INT 3
36303: PUSH
36304: LD_INT 3
36306: PUSH
36307: EMPTY
36308: LIST
36309: LIST
36310: PUSH
36311: LD_INT 2
36313: PUSH
36314: LD_INT 3
36316: PUSH
36317: EMPTY
36318: LIST
36319: LIST
36320: PUSH
36321: EMPTY
36322: LIST
36323: LIST
36324: LIST
36325: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
36326: LD_ADDR_VAR 0 14
36330: PUSH
36331: LD_INT 1
36333: PUSH
36334: LD_INT 3
36336: PUSH
36337: EMPTY
36338: LIST
36339: LIST
36340: PUSH
36341: LD_INT 0
36343: PUSH
36344: LD_INT 3
36346: PUSH
36347: EMPTY
36348: LIST
36349: LIST
36350: PUSH
36351: LD_INT 1
36353: NEG
36354: PUSH
36355: LD_INT 2
36357: PUSH
36358: EMPTY
36359: LIST
36360: LIST
36361: PUSH
36362: EMPTY
36363: LIST
36364: LIST
36365: LIST
36366: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
36367: LD_ADDR_VAR 0 15
36371: PUSH
36372: LD_INT 2
36374: NEG
36375: PUSH
36376: LD_INT 1
36378: PUSH
36379: EMPTY
36380: LIST
36381: LIST
36382: PUSH
36383: LD_INT 3
36385: NEG
36386: PUSH
36387: LD_INT 0
36389: PUSH
36390: EMPTY
36391: LIST
36392: LIST
36393: PUSH
36394: LD_INT 3
36396: NEG
36397: PUSH
36398: LD_INT 1
36400: NEG
36401: PUSH
36402: EMPTY
36403: LIST
36404: LIST
36405: PUSH
36406: EMPTY
36407: LIST
36408: LIST
36409: LIST
36410: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
36411: LD_ADDR_VAR 0 16
36415: PUSH
36416: LD_INT 2
36418: NEG
36419: PUSH
36420: LD_INT 3
36422: NEG
36423: PUSH
36424: EMPTY
36425: LIST
36426: LIST
36427: PUSH
36428: LD_INT 3
36430: NEG
36431: PUSH
36432: LD_INT 2
36434: NEG
36435: PUSH
36436: EMPTY
36437: LIST
36438: LIST
36439: PUSH
36440: LD_INT 3
36442: NEG
36443: PUSH
36444: LD_INT 3
36446: NEG
36447: PUSH
36448: EMPTY
36449: LIST
36450: LIST
36451: PUSH
36452: EMPTY
36453: LIST
36454: LIST
36455: LIST
36456: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
36457: LD_ADDR_VAR 0 17
36461: PUSH
36462: LD_INT 1
36464: NEG
36465: PUSH
36466: LD_INT 3
36468: NEG
36469: PUSH
36470: EMPTY
36471: LIST
36472: LIST
36473: PUSH
36474: LD_INT 0
36476: PUSH
36477: LD_INT 3
36479: NEG
36480: PUSH
36481: EMPTY
36482: LIST
36483: LIST
36484: PUSH
36485: LD_INT 1
36487: PUSH
36488: LD_INT 2
36490: NEG
36491: PUSH
36492: EMPTY
36493: LIST
36494: LIST
36495: PUSH
36496: EMPTY
36497: LIST
36498: LIST
36499: LIST
36500: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
36501: LD_ADDR_VAR 0 18
36505: PUSH
36506: LD_INT 2
36508: PUSH
36509: LD_INT 1
36511: NEG
36512: PUSH
36513: EMPTY
36514: LIST
36515: LIST
36516: PUSH
36517: LD_INT 3
36519: PUSH
36520: LD_INT 0
36522: PUSH
36523: EMPTY
36524: LIST
36525: LIST
36526: PUSH
36527: LD_INT 3
36529: PUSH
36530: LD_INT 1
36532: PUSH
36533: EMPTY
36534: LIST
36535: LIST
36536: PUSH
36537: EMPTY
36538: LIST
36539: LIST
36540: LIST
36541: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
36542: LD_ADDR_VAR 0 19
36546: PUSH
36547: LD_INT 3
36549: PUSH
36550: LD_INT 2
36552: PUSH
36553: EMPTY
36554: LIST
36555: LIST
36556: PUSH
36557: LD_INT 3
36559: PUSH
36560: LD_INT 3
36562: PUSH
36563: EMPTY
36564: LIST
36565: LIST
36566: PUSH
36567: LD_INT 2
36569: PUSH
36570: LD_INT 3
36572: PUSH
36573: EMPTY
36574: LIST
36575: LIST
36576: PUSH
36577: EMPTY
36578: LIST
36579: LIST
36580: LIST
36581: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
36582: LD_ADDR_VAR 0 20
36586: PUSH
36587: LD_INT 1
36589: PUSH
36590: LD_INT 3
36592: PUSH
36593: EMPTY
36594: LIST
36595: LIST
36596: PUSH
36597: LD_INT 0
36599: PUSH
36600: LD_INT 3
36602: PUSH
36603: EMPTY
36604: LIST
36605: LIST
36606: PUSH
36607: LD_INT 1
36609: NEG
36610: PUSH
36611: LD_INT 2
36613: PUSH
36614: EMPTY
36615: LIST
36616: LIST
36617: PUSH
36618: EMPTY
36619: LIST
36620: LIST
36621: LIST
36622: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
36623: LD_ADDR_VAR 0 21
36627: PUSH
36628: LD_INT 2
36630: NEG
36631: PUSH
36632: LD_INT 1
36634: PUSH
36635: EMPTY
36636: LIST
36637: LIST
36638: PUSH
36639: LD_INT 3
36641: NEG
36642: PUSH
36643: LD_INT 0
36645: PUSH
36646: EMPTY
36647: LIST
36648: LIST
36649: PUSH
36650: LD_INT 3
36652: NEG
36653: PUSH
36654: LD_INT 1
36656: NEG
36657: PUSH
36658: EMPTY
36659: LIST
36660: LIST
36661: PUSH
36662: EMPTY
36663: LIST
36664: LIST
36665: LIST
36666: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
36667: LD_ADDR_VAR 0 22
36671: PUSH
36672: LD_INT 2
36674: NEG
36675: PUSH
36676: LD_INT 3
36678: NEG
36679: PUSH
36680: EMPTY
36681: LIST
36682: LIST
36683: PUSH
36684: LD_INT 3
36686: NEG
36687: PUSH
36688: LD_INT 2
36690: NEG
36691: PUSH
36692: EMPTY
36693: LIST
36694: LIST
36695: PUSH
36696: LD_INT 3
36698: NEG
36699: PUSH
36700: LD_INT 3
36702: NEG
36703: PUSH
36704: EMPTY
36705: LIST
36706: LIST
36707: PUSH
36708: EMPTY
36709: LIST
36710: LIST
36711: LIST
36712: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
36713: LD_ADDR_VAR 0 23
36717: PUSH
36718: LD_INT 0
36720: PUSH
36721: LD_INT 3
36723: NEG
36724: PUSH
36725: EMPTY
36726: LIST
36727: LIST
36728: PUSH
36729: LD_INT 1
36731: NEG
36732: PUSH
36733: LD_INT 4
36735: NEG
36736: PUSH
36737: EMPTY
36738: LIST
36739: LIST
36740: PUSH
36741: LD_INT 1
36743: PUSH
36744: LD_INT 3
36746: NEG
36747: PUSH
36748: EMPTY
36749: LIST
36750: LIST
36751: PUSH
36752: EMPTY
36753: LIST
36754: LIST
36755: LIST
36756: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
36757: LD_ADDR_VAR 0 24
36761: PUSH
36762: LD_INT 3
36764: PUSH
36765: LD_INT 0
36767: PUSH
36768: EMPTY
36769: LIST
36770: LIST
36771: PUSH
36772: LD_INT 3
36774: PUSH
36775: LD_INT 1
36777: NEG
36778: PUSH
36779: EMPTY
36780: LIST
36781: LIST
36782: PUSH
36783: LD_INT 4
36785: PUSH
36786: LD_INT 1
36788: PUSH
36789: EMPTY
36790: LIST
36791: LIST
36792: PUSH
36793: EMPTY
36794: LIST
36795: LIST
36796: LIST
36797: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
36798: LD_ADDR_VAR 0 25
36802: PUSH
36803: LD_INT 3
36805: PUSH
36806: LD_INT 3
36808: PUSH
36809: EMPTY
36810: LIST
36811: LIST
36812: PUSH
36813: LD_INT 4
36815: PUSH
36816: LD_INT 3
36818: PUSH
36819: EMPTY
36820: LIST
36821: LIST
36822: PUSH
36823: LD_INT 3
36825: PUSH
36826: LD_INT 4
36828: PUSH
36829: EMPTY
36830: LIST
36831: LIST
36832: PUSH
36833: EMPTY
36834: LIST
36835: LIST
36836: LIST
36837: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
36838: LD_ADDR_VAR 0 26
36842: PUSH
36843: LD_INT 0
36845: PUSH
36846: LD_INT 3
36848: PUSH
36849: EMPTY
36850: LIST
36851: LIST
36852: PUSH
36853: LD_INT 1
36855: PUSH
36856: LD_INT 4
36858: PUSH
36859: EMPTY
36860: LIST
36861: LIST
36862: PUSH
36863: LD_INT 1
36865: NEG
36866: PUSH
36867: LD_INT 3
36869: PUSH
36870: EMPTY
36871: LIST
36872: LIST
36873: PUSH
36874: EMPTY
36875: LIST
36876: LIST
36877: LIST
36878: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
36879: LD_ADDR_VAR 0 27
36883: PUSH
36884: LD_INT 3
36886: NEG
36887: PUSH
36888: LD_INT 0
36890: PUSH
36891: EMPTY
36892: LIST
36893: LIST
36894: PUSH
36895: LD_INT 3
36897: NEG
36898: PUSH
36899: LD_INT 1
36901: PUSH
36902: EMPTY
36903: LIST
36904: LIST
36905: PUSH
36906: LD_INT 4
36908: NEG
36909: PUSH
36910: LD_INT 1
36912: NEG
36913: PUSH
36914: EMPTY
36915: LIST
36916: LIST
36917: PUSH
36918: EMPTY
36919: LIST
36920: LIST
36921: LIST
36922: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
36923: LD_ADDR_VAR 0 28
36927: PUSH
36928: LD_INT 3
36930: NEG
36931: PUSH
36932: LD_INT 3
36934: NEG
36935: PUSH
36936: EMPTY
36937: LIST
36938: LIST
36939: PUSH
36940: LD_INT 3
36942: NEG
36943: PUSH
36944: LD_INT 4
36946: NEG
36947: PUSH
36948: EMPTY
36949: LIST
36950: LIST
36951: PUSH
36952: LD_INT 4
36954: NEG
36955: PUSH
36956: LD_INT 3
36958: NEG
36959: PUSH
36960: EMPTY
36961: LIST
36962: LIST
36963: PUSH
36964: EMPTY
36965: LIST
36966: LIST
36967: LIST
36968: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
36969: LD_ADDR_VAR 0 29
36973: PUSH
36974: LD_INT 1
36976: NEG
36977: PUSH
36978: LD_INT 3
36980: NEG
36981: PUSH
36982: EMPTY
36983: LIST
36984: LIST
36985: PUSH
36986: LD_INT 0
36988: PUSH
36989: LD_INT 3
36991: NEG
36992: PUSH
36993: EMPTY
36994: LIST
36995: LIST
36996: PUSH
36997: LD_INT 1
36999: PUSH
37000: LD_INT 2
37002: NEG
37003: PUSH
37004: EMPTY
37005: LIST
37006: LIST
37007: PUSH
37008: LD_INT 1
37010: NEG
37011: PUSH
37012: LD_INT 4
37014: NEG
37015: PUSH
37016: EMPTY
37017: LIST
37018: LIST
37019: PUSH
37020: LD_INT 0
37022: PUSH
37023: LD_INT 4
37025: NEG
37026: PUSH
37027: EMPTY
37028: LIST
37029: LIST
37030: PUSH
37031: LD_INT 1
37033: PUSH
37034: LD_INT 3
37036: NEG
37037: PUSH
37038: EMPTY
37039: LIST
37040: LIST
37041: PUSH
37042: LD_INT 1
37044: NEG
37045: PUSH
37046: LD_INT 5
37048: NEG
37049: PUSH
37050: EMPTY
37051: LIST
37052: LIST
37053: PUSH
37054: LD_INT 0
37056: PUSH
37057: LD_INT 5
37059: NEG
37060: PUSH
37061: EMPTY
37062: LIST
37063: LIST
37064: PUSH
37065: LD_INT 1
37067: PUSH
37068: LD_INT 4
37070: NEG
37071: PUSH
37072: EMPTY
37073: LIST
37074: LIST
37075: PUSH
37076: LD_INT 1
37078: NEG
37079: PUSH
37080: LD_INT 6
37082: NEG
37083: PUSH
37084: EMPTY
37085: LIST
37086: LIST
37087: PUSH
37088: LD_INT 0
37090: PUSH
37091: LD_INT 6
37093: NEG
37094: PUSH
37095: EMPTY
37096: LIST
37097: LIST
37098: PUSH
37099: LD_INT 1
37101: PUSH
37102: LD_INT 5
37104: NEG
37105: PUSH
37106: EMPTY
37107: LIST
37108: LIST
37109: PUSH
37110: EMPTY
37111: LIST
37112: LIST
37113: LIST
37114: LIST
37115: LIST
37116: LIST
37117: LIST
37118: LIST
37119: LIST
37120: LIST
37121: LIST
37122: LIST
37123: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
37124: LD_ADDR_VAR 0 30
37128: PUSH
37129: LD_INT 2
37131: PUSH
37132: LD_INT 1
37134: NEG
37135: PUSH
37136: EMPTY
37137: LIST
37138: LIST
37139: PUSH
37140: LD_INT 3
37142: PUSH
37143: LD_INT 0
37145: PUSH
37146: EMPTY
37147: LIST
37148: LIST
37149: PUSH
37150: LD_INT 3
37152: PUSH
37153: LD_INT 1
37155: PUSH
37156: EMPTY
37157: LIST
37158: LIST
37159: PUSH
37160: LD_INT 3
37162: PUSH
37163: LD_INT 1
37165: NEG
37166: PUSH
37167: EMPTY
37168: LIST
37169: LIST
37170: PUSH
37171: LD_INT 4
37173: PUSH
37174: LD_INT 0
37176: PUSH
37177: EMPTY
37178: LIST
37179: LIST
37180: PUSH
37181: LD_INT 4
37183: PUSH
37184: LD_INT 1
37186: PUSH
37187: EMPTY
37188: LIST
37189: LIST
37190: PUSH
37191: LD_INT 4
37193: PUSH
37194: LD_INT 1
37196: NEG
37197: PUSH
37198: EMPTY
37199: LIST
37200: LIST
37201: PUSH
37202: LD_INT 5
37204: PUSH
37205: LD_INT 0
37207: PUSH
37208: EMPTY
37209: LIST
37210: LIST
37211: PUSH
37212: LD_INT 5
37214: PUSH
37215: LD_INT 1
37217: PUSH
37218: EMPTY
37219: LIST
37220: LIST
37221: PUSH
37222: LD_INT 5
37224: PUSH
37225: LD_INT 1
37227: NEG
37228: PUSH
37229: EMPTY
37230: LIST
37231: LIST
37232: PUSH
37233: LD_INT 6
37235: PUSH
37236: LD_INT 0
37238: PUSH
37239: EMPTY
37240: LIST
37241: LIST
37242: PUSH
37243: LD_INT 6
37245: PUSH
37246: LD_INT 1
37248: PUSH
37249: EMPTY
37250: LIST
37251: LIST
37252: PUSH
37253: EMPTY
37254: LIST
37255: LIST
37256: LIST
37257: LIST
37258: LIST
37259: LIST
37260: LIST
37261: LIST
37262: LIST
37263: LIST
37264: LIST
37265: LIST
37266: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
37267: LD_ADDR_VAR 0 31
37271: PUSH
37272: LD_INT 3
37274: PUSH
37275: LD_INT 2
37277: PUSH
37278: EMPTY
37279: LIST
37280: LIST
37281: PUSH
37282: LD_INT 3
37284: PUSH
37285: LD_INT 3
37287: PUSH
37288: EMPTY
37289: LIST
37290: LIST
37291: PUSH
37292: LD_INT 2
37294: PUSH
37295: LD_INT 3
37297: PUSH
37298: EMPTY
37299: LIST
37300: LIST
37301: PUSH
37302: LD_INT 4
37304: PUSH
37305: LD_INT 3
37307: PUSH
37308: EMPTY
37309: LIST
37310: LIST
37311: PUSH
37312: LD_INT 4
37314: PUSH
37315: LD_INT 4
37317: PUSH
37318: EMPTY
37319: LIST
37320: LIST
37321: PUSH
37322: LD_INT 3
37324: PUSH
37325: LD_INT 4
37327: PUSH
37328: EMPTY
37329: LIST
37330: LIST
37331: PUSH
37332: LD_INT 5
37334: PUSH
37335: LD_INT 4
37337: PUSH
37338: EMPTY
37339: LIST
37340: LIST
37341: PUSH
37342: LD_INT 5
37344: PUSH
37345: LD_INT 5
37347: PUSH
37348: EMPTY
37349: LIST
37350: LIST
37351: PUSH
37352: LD_INT 4
37354: PUSH
37355: LD_INT 5
37357: PUSH
37358: EMPTY
37359: LIST
37360: LIST
37361: PUSH
37362: LD_INT 6
37364: PUSH
37365: LD_INT 5
37367: PUSH
37368: EMPTY
37369: LIST
37370: LIST
37371: PUSH
37372: LD_INT 6
37374: PUSH
37375: LD_INT 6
37377: PUSH
37378: EMPTY
37379: LIST
37380: LIST
37381: PUSH
37382: LD_INT 5
37384: PUSH
37385: LD_INT 6
37387: PUSH
37388: EMPTY
37389: LIST
37390: LIST
37391: PUSH
37392: EMPTY
37393: LIST
37394: LIST
37395: LIST
37396: LIST
37397: LIST
37398: LIST
37399: LIST
37400: LIST
37401: LIST
37402: LIST
37403: LIST
37404: LIST
37405: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
37406: LD_ADDR_VAR 0 32
37410: PUSH
37411: LD_INT 1
37413: PUSH
37414: LD_INT 3
37416: PUSH
37417: EMPTY
37418: LIST
37419: LIST
37420: PUSH
37421: LD_INT 0
37423: PUSH
37424: LD_INT 3
37426: PUSH
37427: EMPTY
37428: LIST
37429: LIST
37430: PUSH
37431: LD_INT 1
37433: NEG
37434: PUSH
37435: LD_INT 2
37437: PUSH
37438: EMPTY
37439: LIST
37440: LIST
37441: PUSH
37442: LD_INT 1
37444: PUSH
37445: LD_INT 4
37447: PUSH
37448: EMPTY
37449: LIST
37450: LIST
37451: PUSH
37452: LD_INT 0
37454: PUSH
37455: LD_INT 4
37457: PUSH
37458: EMPTY
37459: LIST
37460: LIST
37461: PUSH
37462: LD_INT 1
37464: NEG
37465: PUSH
37466: LD_INT 3
37468: PUSH
37469: EMPTY
37470: LIST
37471: LIST
37472: PUSH
37473: LD_INT 1
37475: PUSH
37476: LD_INT 5
37478: PUSH
37479: EMPTY
37480: LIST
37481: LIST
37482: PUSH
37483: LD_INT 0
37485: PUSH
37486: LD_INT 5
37488: PUSH
37489: EMPTY
37490: LIST
37491: LIST
37492: PUSH
37493: LD_INT 1
37495: NEG
37496: PUSH
37497: LD_INT 4
37499: PUSH
37500: EMPTY
37501: LIST
37502: LIST
37503: PUSH
37504: LD_INT 1
37506: PUSH
37507: LD_INT 6
37509: PUSH
37510: EMPTY
37511: LIST
37512: LIST
37513: PUSH
37514: LD_INT 0
37516: PUSH
37517: LD_INT 6
37519: PUSH
37520: EMPTY
37521: LIST
37522: LIST
37523: PUSH
37524: LD_INT 1
37526: NEG
37527: PUSH
37528: LD_INT 5
37530: PUSH
37531: EMPTY
37532: LIST
37533: LIST
37534: PUSH
37535: EMPTY
37536: LIST
37537: LIST
37538: LIST
37539: LIST
37540: LIST
37541: LIST
37542: LIST
37543: LIST
37544: LIST
37545: LIST
37546: LIST
37547: LIST
37548: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
37549: LD_ADDR_VAR 0 33
37553: PUSH
37554: LD_INT 2
37556: NEG
37557: PUSH
37558: LD_INT 1
37560: PUSH
37561: EMPTY
37562: LIST
37563: LIST
37564: PUSH
37565: LD_INT 3
37567: NEG
37568: PUSH
37569: LD_INT 0
37571: PUSH
37572: EMPTY
37573: LIST
37574: LIST
37575: PUSH
37576: LD_INT 3
37578: NEG
37579: PUSH
37580: LD_INT 1
37582: NEG
37583: PUSH
37584: EMPTY
37585: LIST
37586: LIST
37587: PUSH
37588: LD_INT 3
37590: NEG
37591: PUSH
37592: LD_INT 1
37594: PUSH
37595: EMPTY
37596: LIST
37597: LIST
37598: PUSH
37599: LD_INT 4
37601: NEG
37602: PUSH
37603: LD_INT 0
37605: PUSH
37606: EMPTY
37607: LIST
37608: LIST
37609: PUSH
37610: LD_INT 4
37612: NEG
37613: PUSH
37614: LD_INT 1
37616: NEG
37617: PUSH
37618: EMPTY
37619: LIST
37620: LIST
37621: PUSH
37622: LD_INT 4
37624: NEG
37625: PUSH
37626: LD_INT 1
37628: PUSH
37629: EMPTY
37630: LIST
37631: LIST
37632: PUSH
37633: LD_INT 5
37635: NEG
37636: PUSH
37637: LD_INT 0
37639: PUSH
37640: EMPTY
37641: LIST
37642: LIST
37643: PUSH
37644: LD_INT 5
37646: NEG
37647: PUSH
37648: LD_INT 1
37650: NEG
37651: PUSH
37652: EMPTY
37653: LIST
37654: LIST
37655: PUSH
37656: LD_INT 5
37658: NEG
37659: PUSH
37660: LD_INT 1
37662: PUSH
37663: EMPTY
37664: LIST
37665: LIST
37666: PUSH
37667: LD_INT 6
37669: NEG
37670: PUSH
37671: LD_INT 0
37673: PUSH
37674: EMPTY
37675: LIST
37676: LIST
37677: PUSH
37678: LD_INT 6
37680: NEG
37681: PUSH
37682: LD_INT 1
37684: NEG
37685: PUSH
37686: EMPTY
37687: LIST
37688: LIST
37689: PUSH
37690: EMPTY
37691: LIST
37692: LIST
37693: LIST
37694: LIST
37695: LIST
37696: LIST
37697: LIST
37698: LIST
37699: LIST
37700: LIST
37701: LIST
37702: LIST
37703: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
37704: LD_ADDR_VAR 0 34
37708: PUSH
37709: LD_INT 2
37711: NEG
37712: PUSH
37713: LD_INT 3
37715: NEG
37716: PUSH
37717: EMPTY
37718: LIST
37719: LIST
37720: PUSH
37721: LD_INT 3
37723: NEG
37724: PUSH
37725: LD_INT 2
37727: NEG
37728: PUSH
37729: EMPTY
37730: LIST
37731: LIST
37732: PUSH
37733: LD_INT 3
37735: NEG
37736: PUSH
37737: LD_INT 3
37739: NEG
37740: PUSH
37741: EMPTY
37742: LIST
37743: LIST
37744: PUSH
37745: LD_INT 3
37747: NEG
37748: PUSH
37749: LD_INT 4
37751: NEG
37752: PUSH
37753: EMPTY
37754: LIST
37755: LIST
37756: PUSH
37757: LD_INT 4
37759: NEG
37760: PUSH
37761: LD_INT 3
37763: NEG
37764: PUSH
37765: EMPTY
37766: LIST
37767: LIST
37768: PUSH
37769: LD_INT 4
37771: NEG
37772: PUSH
37773: LD_INT 4
37775: NEG
37776: PUSH
37777: EMPTY
37778: LIST
37779: LIST
37780: PUSH
37781: LD_INT 4
37783: NEG
37784: PUSH
37785: LD_INT 5
37787: NEG
37788: PUSH
37789: EMPTY
37790: LIST
37791: LIST
37792: PUSH
37793: LD_INT 5
37795: NEG
37796: PUSH
37797: LD_INT 4
37799: NEG
37800: PUSH
37801: EMPTY
37802: LIST
37803: LIST
37804: PUSH
37805: LD_INT 5
37807: NEG
37808: PUSH
37809: LD_INT 5
37811: NEG
37812: PUSH
37813: EMPTY
37814: LIST
37815: LIST
37816: PUSH
37817: LD_INT 5
37819: NEG
37820: PUSH
37821: LD_INT 6
37823: NEG
37824: PUSH
37825: EMPTY
37826: LIST
37827: LIST
37828: PUSH
37829: LD_INT 6
37831: NEG
37832: PUSH
37833: LD_INT 5
37835: NEG
37836: PUSH
37837: EMPTY
37838: LIST
37839: LIST
37840: PUSH
37841: LD_INT 6
37843: NEG
37844: PUSH
37845: LD_INT 6
37847: NEG
37848: PUSH
37849: EMPTY
37850: LIST
37851: LIST
37852: PUSH
37853: EMPTY
37854: LIST
37855: LIST
37856: LIST
37857: LIST
37858: LIST
37859: LIST
37860: LIST
37861: LIST
37862: LIST
37863: LIST
37864: LIST
37865: LIST
37866: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
37867: LD_ADDR_VAR 0 41
37871: PUSH
37872: LD_INT 0
37874: PUSH
37875: LD_INT 2
37877: NEG
37878: PUSH
37879: EMPTY
37880: LIST
37881: LIST
37882: PUSH
37883: LD_INT 1
37885: NEG
37886: PUSH
37887: LD_INT 3
37889: NEG
37890: PUSH
37891: EMPTY
37892: LIST
37893: LIST
37894: PUSH
37895: LD_INT 1
37897: PUSH
37898: LD_INT 2
37900: NEG
37901: PUSH
37902: EMPTY
37903: LIST
37904: LIST
37905: PUSH
37906: EMPTY
37907: LIST
37908: LIST
37909: LIST
37910: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
37911: LD_ADDR_VAR 0 42
37915: PUSH
37916: LD_INT 2
37918: PUSH
37919: LD_INT 0
37921: PUSH
37922: EMPTY
37923: LIST
37924: LIST
37925: PUSH
37926: LD_INT 2
37928: PUSH
37929: LD_INT 1
37931: NEG
37932: PUSH
37933: EMPTY
37934: LIST
37935: LIST
37936: PUSH
37937: LD_INT 3
37939: PUSH
37940: LD_INT 1
37942: PUSH
37943: EMPTY
37944: LIST
37945: LIST
37946: PUSH
37947: EMPTY
37948: LIST
37949: LIST
37950: LIST
37951: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
37952: LD_ADDR_VAR 0 43
37956: PUSH
37957: LD_INT 2
37959: PUSH
37960: LD_INT 2
37962: PUSH
37963: EMPTY
37964: LIST
37965: LIST
37966: PUSH
37967: LD_INT 3
37969: PUSH
37970: LD_INT 2
37972: PUSH
37973: EMPTY
37974: LIST
37975: LIST
37976: PUSH
37977: LD_INT 2
37979: PUSH
37980: LD_INT 3
37982: PUSH
37983: EMPTY
37984: LIST
37985: LIST
37986: PUSH
37987: EMPTY
37988: LIST
37989: LIST
37990: LIST
37991: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
37992: LD_ADDR_VAR 0 44
37996: PUSH
37997: LD_INT 0
37999: PUSH
38000: LD_INT 2
38002: PUSH
38003: EMPTY
38004: LIST
38005: LIST
38006: PUSH
38007: LD_INT 1
38009: PUSH
38010: LD_INT 3
38012: PUSH
38013: EMPTY
38014: LIST
38015: LIST
38016: PUSH
38017: LD_INT 1
38019: NEG
38020: PUSH
38021: LD_INT 2
38023: PUSH
38024: EMPTY
38025: LIST
38026: LIST
38027: PUSH
38028: EMPTY
38029: LIST
38030: LIST
38031: LIST
38032: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
38033: LD_ADDR_VAR 0 45
38037: PUSH
38038: LD_INT 2
38040: NEG
38041: PUSH
38042: LD_INT 0
38044: PUSH
38045: EMPTY
38046: LIST
38047: LIST
38048: PUSH
38049: LD_INT 2
38051: NEG
38052: PUSH
38053: LD_INT 1
38055: PUSH
38056: EMPTY
38057: LIST
38058: LIST
38059: PUSH
38060: LD_INT 3
38062: NEG
38063: PUSH
38064: LD_INT 1
38066: NEG
38067: PUSH
38068: EMPTY
38069: LIST
38070: LIST
38071: PUSH
38072: EMPTY
38073: LIST
38074: LIST
38075: LIST
38076: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
38077: LD_ADDR_VAR 0 46
38081: PUSH
38082: LD_INT 2
38084: NEG
38085: PUSH
38086: LD_INT 2
38088: NEG
38089: PUSH
38090: EMPTY
38091: LIST
38092: LIST
38093: PUSH
38094: LD_INT 2
38096: NEG
38097: PUSH
38098: LD_INT 3
38100: NEG
38101: PUSH
38102: EMPTY
38103: LIST
38104: LIST
38105: PUSH
38106: LD_INT 3
38108: NEG
38109: PUSH
38110: LD_INT 2
38112: NEG
38113: PUSH
38114: EMPTY
38115: LIST
38116: LIST
38117: PUSH
38118: EMPTY
38119: LIST
38120: LIST
38121: LIST
38122: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
38123: LD_ADDR_VAR 0 47
38127: PUSH
38128: LD_INT 2
38130: NEG
38131: PUSH
38132: LD_INT 3
38134: NEG
38135: PUSH
38136: EMPTY
38137: LIST
38138: LIST
38139: PUSH
38140: LD_INT 1
38142: NEG
38143: PUSH
38144: LD_INT 3
38146: NEG
38147: PUSH
38148: EMPTY
38149: LIST
38150: LIST
38151: PUSH
38152: EMPTY
38153: LIST
38154: LIST
38155: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
38156: LD_ADDR_VAR 0 48
38160: PUSH
38161: LD_INT 1
38163: PUSH
38164: LD_INT 2
38166: NEG
38167: PUSH
38168: EMPTY
38169: LIST
38170: LIST
38171: PUSH
38172: LD_INT 2
38174: PUSH
38175: LD_INT 1
38177: NEG
38178: PUSH
38179: EMPTY
38180: LIST
38181: LIST
38182: PUSH
38183: EMPTY
38184: LIST
38185: LIST
38186: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
38187: LD_ADDR_VAR 0 49
38191: PUSH
38192: LD_INT 3
38194: PUSH
38195: LD_INT 1
38197: PUSH
38198: EMPTY
38199: LIST
38200: LIST
38201: PUSH
38202: LD_INT 3
38204: PUSH
38205: LD_INT 2
38207: PUSH
38208: EMPTY
38209: LIST
38210: LIST
38211: PUSH
38212: EMPTY
38213: LIST
38214: LIST
38215: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
38216: LD_ADDR_VAR 0 50
38220: PUSH
38221: LD_INT 2
38223: PUSH
38224: LD_INT 3
38226: PUSH
38227: EMPTY
38228: LIST
38229: LIST
38230: PUSH
38231: LD_INT 1
38233: PUSH
38234: LD_INT 3
38236: PUSH
38237: EMPTY
38238: LIST
38239: LIST
38240: PUSH
38241: EMPTY
38242: LIST
38243: LIST
38244: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
38245: LD_ADDR_VAR 0 51
38249: PUSH
38250: LD_INT 1
38252: NEG
38253: PUSH
38254: LD_INT 2
38256: PUSH
38257: EMPTY
38258: LIST
38259: LIST
38260: PUSH
38261: LD_INT 2
38263: NEG
38264: PUSH
38265: LD_INT 1
38267: PUSH
38268: EMPTY
38269: LIST
38270: LIST
38271: PUSH
38272: EMPTY
38273: LIST
38274: LIST
38275: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
38276: LD_ADDR_VAR 0 52
38280: PUSH
38281: LD_INT 3
38283: NEG
38284: PUSH
38285: LD_INT 1
38287: NEG
38288: PUSH
38289: EMPTY
38290: LIST
38291: LIST
38292: PUSH
38293: LD_INT 3
38295: NEG
38296: PUSH
38297: LD_INT 2
38299: NEG
38300: PUSH
38301: EMPTY
38302: LIST
38303: LIST
38304: PUSH
38305: EMPTY
38306: LIST
38307: LIST
38308: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
38309: LD_ADDR_VAR 0 53
38313: PUSH
38314: LD_INT 1
38316: NEG
38317: PUSH
38318: LD_INT 3
38320: NEG
38321: PUSH
38322: EMPTY
38323: LIST
38324: LIST
38325: PUSH
38326: LD_INT 0
38328: PUSH
38329: LD_INT 3
38331: NEG
38332: PUSH
38333: EMPTY
38334: LIST
38335: LIST
38336: PUSH
38337: LD_INT 1
38339: PUSH
38340: LD_INT 2
38342: NEG
38343: PUSH
38344: EMPTY
38345: LIST
38346: LIST
38347: PUSH
38348: EMPTY
38349: LIST
38350: LIST
38351: LIST
38352: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
38353: LD_ADDR_VAR 0 54
38357: PUSH
38358: LD_INT 2
38360: PUSH
38361: LD_INT 1
38363: NEG
38364: PUSH
38365: EMPTY
38366: LIST
38367: LIST
38368: PUSH
38369: LD_INT 3
38371: PUSH
38372: LD_INT 0
38374: PUSH
38375: EMPTY
38376: LIST
38377: LIST
38378: PUSH
38379: LD_INT 3
38381: PUSH
38382: LD_INT 1
38384: PUSH
38385: EMPTY
38386: LIST
38387: LIST
38388: PUSH
38389: EMPTY
38390: LIST
38391: LIST
38392: LIST
38393: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
38394: LD_ADDR_VAR 0 55
38398: PUSH
38399: LD_INT 3
38401: PUSH
38402: LD_INT 2
38404: PUSH
38405: EMPTY
38406: LIST
38407: LIST
38408: PUSH
38409: LD_INT 3
38411: PUSH
38412: LD_INT 3
38414: PUSH
38415: EMPTY
38416: LIST
38417: LIST
38418: PUSH
38419: LD_INT 2
38421: PUSH
38422: LD_INT 3
38424: PUSH
38425: EMPTY
38426: LIST
38427: LIST
38428: PUSH
38429: EMPTY
38430: LIST
38431: LIST
38432: LIST
38433: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
38434: LD_ADDR_VAR 0 56
38438: PUSH
38439: LD_INT 1
38441: PUSH
38442: LD_INT 3
38444: PUSH
38445: EMPTY
38446: LIST
38447: LIST
38448: PUSH
38449: LD_INT 0
38451: PUSH
38452: LD_INT 3
38454: PUSH
38455: EMPTY
38456: LIST
38457: LIST
38458: PUSH
38459: LD_INT 1
38461: NEG
38462: PUSH
38463: LD_INT 2
38465: PUSH
38466: EMPTY
38467: LIST
38468: LIST
38469: PUSH
38470: EMPTY
38471: LIST
38472: LIST
38473: LIST
38474: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
38475: LD_ADDR_VAR 0 57
38479: PUSH
38480: LD_INT 2
38482: NEG
38483: PUSH
38484: LD_INT 1
38486: PUSH
38487: EMPTY
38488: LIST
38489: LIST
38490: PUSH
38491: LD_INT 3
38493: NEG
38494: PUSH
38495: LD_INT 0
38497: PUSH
38498: EMPTY
38499: LIST
38500: LIST
38501: PUSH
38502: LD_INT 3
38504: NEG
38505: PUSH
38506: LD_INT 1
38508: NEG
38509: PUSH
38510: EMPTY
38511: LIST
38512: LIST
38513: PUSH
38514: EMPTY
38515: LIST
38516: LIST
38517: LIST
38518: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
38519: LD_ADDR_VAR 0 58
38523: PUSH
38524: LD_INT 2
38526: NEG
38527: PUSH
38528: LD_INT 3
38530: NEG
38531: PUSH
38532: EMPTY
38533: LIST
38534: LIST
38535: PUSH
38536: LD_INT 3
38538: NEG
38539: PUSH
38540: LD_INT 2
38542: NEG
38543: PUSH
38544: EMPTY
38545: LIST
38546: LIST
38547: PUSH
38548: LD_INT 3
38550: NEG
38551: PUSH
38552: LD_INT 3
38554: NEG
38555: PUSH
38556: EMPTY
38557: LIST
38558: LIST
38559: PUSH
38560: EMPTY
38561: LIST
38562: LIST
38563: LIST
38564: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
38565: LD_ADDR_VAR 0 59
38569: PUSH
38570: LD_INT 1
38572: NEG
38573: PUSH
38574: LD_INT 2
38576: NEG
38577: PUSH
38578: EMPTY
38579: LIST
38580: LIST
38581: PUSH
38582: LD_INT 0
38584: PUSH
38585: LD_INT 2
38587: NEG
38588: PUSH
38589: EMPTY
38590: LIST
38591: LIST
38592: PUSH
38593: LD_INT 1
38595: PUSH
38596: LD_INT 1
38598: NEG
38599: PUSH
38600: EMPTY
38601: LIST
38602: LIST
38603: PUSH
38604: EMPTY
38605: LIST
38606: LIST
38607: LIST
38608: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
38609: LD_ADDR_VAR 0 60
38613: PUSH
38614: LD_INT 1
38616: PUSH
38617: LD_INT 1
38619: NEG
38620: PUSH
38621: EMPTY
38622: LIST
38623: LIST
38624: PUSH
38625: LD_INT 2
38627: PUSH
38628: LD_INT 0
38630: PUSH
38631: EMPTY
38632: LIST
38633: LIST
38634: PUSH
38635: LD_INT 2
38637: PUSH
38638: LD_INT 1
38640: PUSH
38641: EMPTY
38642: LIST
38643: LIST
38644: PUSH
38645: EMPTY
38646: LIST
38647: LIST
38648: LIST
38649: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
38650: LD_ADDR_VAR 0 61
38654: PUSH
38655: LD_INT 2
38657: PUSH
38658: LD_INT 1
38660: PUSH
38661: EMPTY
38662: LIST
38663: LIST
38664: PUSH
38665: LD_INT 2
38667: PUSH
38668: LD_INT 2
38670: PUSH
38671: EMPTY
38672: LIST
38673: LIST
38674: PUSH
38675: LD_INT 1
38677: PUSH
38678: LD_INT 2
38680: PUSH
38681: EMPTY
38682: LIST
38683: LIST
38684: PUSH
38685: EMPTY
38686: LIST
38687: LIST
38688: LIST
38689: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
38690: LD_ADDR_VAR 0 62
38694: PUSH
38695: LD_INT 1
38697: PUSH
38698: LD_INT 2
38700: PUSH
38701: EMPTY
38702: LIST
38703: LIST
38704: PUSH
38705: LD_INT 0
38707: PUSH
38708: LD_INT 2
38710: PUSH
38711: EMPTY
38712: LIST
38713: LIST
38714: PUSH
38715: LD_INT 1
38717: NEG
38718: PUSH
38719: LD_INT 1
38721: PUSH
38722: EMPTY
38723: LIST
38724: LIST
38725: PUSH
38726: EMPTY
38727: LIST
38728: LIST
38729: LIST
38730: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
38731: LD_ADDR_VAR 0 63
38735: PUSH
38736: LD_INT 1
38738: NEG
38739: PUSH
38740: LD_INT 1
38742: PUSH
38743: EMPTY
38744: LIST
38745: LIST
38746: PUSH
38747: LD_INT 2
38749: NEG
38750: PUSH
38751: LD_INT 0
38753: PUSH
38754: EMPTY
38755: LIST
38756: LIST
38757: PUSH
38758: LD_INT 2
38760: NEG
38761: PUSH
38762: LD_INT 1
38764: NEG
38765: PUSH
38766: EMPTY
38767: LIST
38768: LIST
38769: PUSH
38770: EMPTY
38771: LIST
38772: LIST
38773: LIST
38774: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38775: LD_ADDR_VAR 0 64
38779: PUSH
38780: LD_INT 1
38782: NEG
38783: PUSH
38784: LD_INT 2
38786: NEG
38787: PUSH
38788: EMPTY
38789: LIST
38790: LIST
38791: PUSH
38792: LD_INT 2
38794: NEG
38795: PUSH
38796: LD_INT 1
38798: NEG
38799: PUSH
38800: EMPTY
38801: LIST
38802: LIST
38803: PUSH
38804: LD_INT 2
38806: NEG
38807: PUSH
38808: LD_INT 2
38810: NEG
38811: PUSH
38812: EMPTY
38813: LIST
38814: LIST
38815: PUSH
38816: EMPTY
38817: LIST
38818: LIST
38819: LIST
38820: ST_TO_ADDR
// end ; 2 :
38821: GO 42087
38823: LD_INT 2
38825: DOUBLE
38826: EQUAL
38827: IFTRUE 38831
38829: GO 42086
38831: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
38832: LD_ADDR_VAR 0 29
38836: PUSH
38837: LD_INT 4
38839: PUSH
38840: LD_INT 0
38842: PUSH
38843: EMPTY
38844: LIST
38845: LIST
38846: PUSH
38847: LD_INT 4
38849: PUSH
38850: LD_INT 1
38852: NEG
38853: PUSH
38854: EMPTY
38855: LIST
38856: LIST
38857: PUSH
38858: LD_INT 5
38860: PUSH
38861: LD_INT 0
38863: PUSH
38864: EMPTY
38865: LIST
38866: LIST
38867: PUSH
38868: LD_INT 5
38870: PUSH
38871: LD_INT 1
38873: PUSH
38874: EMPTY
38875: LIST
38876: LIST
38877: PUSH
38878: LD_INT 4
38880: PUSH
38881: LD_INT 1
38883: PUSH
38884: EMPTY
38885: LIST
38886: LIST
38887: PUSH
38888: LD_INT 3
38890: PUSH
38891: LD_INT 0
38893: PUSH
38894: EMPTY
38895: LIST
38896: LIST
38897: PUSH
38898: LD_INT 3
38900: PUSH
38901: LD_INT 1
38903: NEG
38904: PUSH
38905: EMPTY
38906: LIST
38907: LIST
38908: PUSH
38909: LD_INT 3
38911: PUSH
38912: LD_INT 2
38914: NEG
38915: PUSH
38916: EMPTY
38917: LIST
38918: LIST
38919: PUSH
38920: LD_INT 5
38922: PUSH
38923: LD_INT 2
38925: PUSH
38926: EMPTY
38927: LIST
38928: LIST
38929: PUSH
38930: LD_INT 3
38932: PUSH
38933: LD_INT 3
38935: PUSH
38936: EMPTY
38937: LIST
38938: LIST
38939: PUSH
38940: LD_INT 3
38942: PUSH
38943: LD_INT 2
38945: PUSH
38946: EMPTY
38947: LIST
38948: LIST
38949: PUSH
38950: LD_INT 4
38952: PUSH
38953: LD_INT 3
38955: PUSH
38956: EMPTY
38957: LIST
38958: LIST
38959: PUSH
38960: LD_INT 4
38962: PUSH
38963: LD_INT 4
38965: PUSH
38966: EMPTY
38967: LIST
38968: LIST
38969: PUSH
38970: LD_INT 3
38972: PUSH
38973: LD_INT 4
38975: PUSH
38976: EMPTY
38977: LIST
38978: LIST
38979: PUSH
38980: LD_INT 2
38982: PUSH
38983: LD_INT 3
38985: PUSH
38986: EMPTY
38987: LIST
38988: LIST
38989: PUSH
38990: LD_INT 2
38992: PUSH
38993: LD_INT 2
38995: PUSH
38996: EMPTY
38997: LIST
38998: LIST
38999: PUSH
39000: LD_INT 4
39002: PUSH
39003: LD_INT 2
39005: PUSH
39006: EMPTY
39007: LIST
39008: LIST
39009: PUSH
39010: LD_INT 2
39012: PUSH
39013: LD_INT 4
39015: PUSH
39016: EMPTY
39017: LIST
39018: LIST
39019: PUSH
39020: LD_INT 0
39022: PUSH
39023: LD_INT 4
39025: PUSH
39026: EMPTY
39027: LIST
39028: LIST
39029: PUSH
39030: LD_INT 0
39032: PUSH
39033: LD_INT 3
39035: PUSH
39036: EMPTY
39037: LIST
39038: LIST
39039: PUSH
39040: LD_INT 1
39042: PUSH
39043: LD_INT 4
39045: PUSH
39046: EMPTY
39047: LIST
39048: LIST
39049: PUSH
39050: LD_INT 1
39052: PUSH
39053: LD_INT 5
39055: PUSH
39056: EMPTY
39057: LIST
39058: LIST
39059: PUSH
39060: LD_INT 0
39062: PUSH
39063: LD_INT 5
39065: PUSH
39066: EMPTY
39067: LIST
39068: LIST
39069: PUSH
39070: LD_INT 1
39072: NEG
39073: PUSH
39074: LD_INT 4
39076: PUSH
39077: EMPTY
39078: LIST
39079: LIST
39080: PUSH
39081: LD_INT 1
39083: NEG
39084: PUSH
39085: LD_INT 3
39087: PUSH
39088: EMPTY
39089: LIST
39090: LIST
39091: PUSH
39092: LD_INT 2
39094: PUSH
39095: LD_INT 5
39097: PUSH
39098: EMPTY
39099: LIST
39100: LIST
39101: PUSH
39102: LD_INT 2
39104: NEG
39105: PUSH
39106: LD_INT 3
39108: PUSH
39109: EMPTY
39110: LIST
39111: LIST
39112: PUSH
39113: LD_INT 3
39115: NEG
39116: PUSH
39117: LD_INT 0
39119: PUSH
39120: EMPTY
39121: LIST
39122: LIST
39123: PUSH
39124: LD_INT 3
39126: NEG
39127: PUSH
39128: LD_INT 1
39130: NEG
39131: PUSH
39132: EMPTY
39133: LIST
39134: LIST
39135: PUSH
39136: LD_INT 2
39138: NEG
39139: PUSH
39140: LD_INT 0
39142: PUSH
39143: EMPTY
39144: LIST
39145: LIST
39146: PUSH
39147: LD_INT 2
39149: NEG
39150: PUSH
39151: LD_INT 1
39153: PUSH
39154: EMPTY
39155: LIST
39156: LIST
39157: PUSH
39158: LD_INT 3
39160: NEG
39161: PUSH
39162: LD_INT 1
39164: PUSH
39165: EMPTY
39166: LIST
39167: LIST
39168: PUSH
39169: LD_INT 4
39171: NEG
39172: PUSH
39173: LD_INT 0
39175: PUSH
39176: EMPTY
39177: LIST
39178: LIST
39179: PUSH
39180: LD_INT 4
39182: NEG
39183: PUSH
39184: LD_INT 1
39186: NEG
39187: PUSH
39188: EMPTY
39189: LIST
39190: LIST
39191: PUSH
39192: LD_INT 4
39194: NEG
39195: PUSH
39196: LD_INT 2
39198: NEG
39199: PUSH
39200: EMPTY
39201: LIST
39202: LIST
39203: PUSH
39204: LD_INT 2
39206: NEG
39207: PUSH
39208: LD_INT 2
39210: PUSH
39211: EMPTY
39212: LIST
39213: LIST
39214: PUSH
39215: LD_INT 4
39217: NEG
39218: PUSH
39219: LD_INT 4
39221: NEG
39222: PUSH
39223: EMPTY
39224: LIST
39225: LIST
39226: PUSH
39227: LD_INT 4
39229: NEG
39230: PUSH
39231: LD_INT 5
39233: NEG
39234: PUSH
39235: EMPTY
39236: LIST
39237: LIST
39238: PUSH
39239: LD_INT 3
39241: NEG
39242: PUSH
39243: LD_INT 4
39245: NEG
39246: PUSH
39247: EMPTY
39248: LIST
39249: LIST
39250: PUSH
39251: LD_INT 3
39253: NEG
39254: PUSH
39255: LD_INT 3
39257: NEG
39258: PUSH
39259: EMPTY
39260: LIST
39261: LIST
39262: PUSH
39263: LD_INT 4
39265: NEG
39266: PUSH
39267: LD_INT 3
39269: NEG
39270: PUSH
39271: EMPTY
39272: LIST
39273: LIST
39274: PUSH
39275: LD_INT 5
39277: NEG
39278: PUSH
39279: LD_INT 4
39281: NEG
39282: PUSH
39283: EMPTY
39284: LIST
39285: LIST
39286: PUSH
39287: LD_INT 5
39289: NEG
39290: PUSH
39291: LD_INT 5
39293: NEG
39294: PUSH
39295: EMPTY
39296: LIST
39297: LIST
39298: PUSH
39299: LD_INT 3
39301: NEG
39302: PUSH
39303: LD_INT 5
39305: NEG
39306: PUSH
39307: EMPTY
39308: LIST
39309: LIST
39310: PUSH
39311: LD_INT 5
39313: NEG
39314: PUSH
39315: LD_INT 3
39317: NEG
39318: PUSH
39319: EMPTY
39320: LIST
39321: LIST
39322: PUSH
39323: EMPTY
39324: LIST
39325: LIST
39326: LIST
39327: LIST
39328: LIST
39329: LIST
39330: LIST
39331: LIST
39332: LIST
39333: LIST
39334: LIST
39335: LIST
39336: LIST
39337: LIST
39338: LIST
39339: LIST
39340: LIST
39341: LIST
39342: LIST
39343: LIST
39344: LIST
39345: LIST
39346: LIST
39347: LIST
39348: LIST
39349: LIST
39350: LIST
39351: LIST
39352: LIST
39353: LIST
39354: LIST
39355: LIST
39356: LIST
39357: LIST
39358: LIST
39359: LIST
39360: LIST
39361: LIST
39362: LIST
39363: LIST
39364: LIST
39365: LIST
39366: LIST
39367: LIST
39368: LIST
39369: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
39370: LD_ADDR_VAR 0 30
39374: PUSH
39375: LD_INT 4
39377: PUSH
39378: LD_INT 4
39380: PUSH
39381: EMPTY
39382: LIST
39383: LIST
39384: PUSH
39385: LD_INT 4
39387: PUSH
39388: LD_INT 3
39390: PUSH
39391: EMPTY
39392: LIST
39393: LIST
39394: PUSH
39395: LD_INT 5
39397: PUSH
39398: LD_INT 4
39400: PUSH
39401: EMPTY
39402: LIST
39403: LIST
39404: PUSH
39405: LD_INT 5
39407: PUSH
39408: LD_INT 5
39410: PUSH
39411: EMPTY
39412: LIST
39413: LIST
39414: PUSH
39415: LD_INT 4
39417: PUSH
39418: LD_INT 5
39420: PUSH
39421: EMPTY
39422: LIST
39423: LIST
39424: PUSH
39425: LD_INT 3
39427: PUSH
39428: LD_INT 4
39430: PUSH
39431: EMPTY
39432: LIST
39433: LIST
39434: PUSH
39435: LD_INT 3
39437: PUSH
39438: LD_INT 3
39440: PUSH
39441: EMPTY
39442: LIST
39443: LIST
39444: PUSH
39445: LD_INT 5
39447: PUSH
39448: LD_INT 3
39450: PUSH
39451: EMPTY
39452: LIST
39453: LIST
39454: PUSH
39455: LD_INT 3
39457: PUSH
39458: LD_INT 5
39460: PUSH
39461: EMPTY
39462: LIST
39463: LIST
39464: PUSH
39465: LD_INT 0
39467: PUSH
39468: LD_INT 3
39470: PUSH
39471: EMPTY
39472: LIST
39473: LIST
39474: PUSH
39475: LD_INT 0
39477: PUSH
39478: LD_INT 2
39480: PUSH
39481: EMPTY
39482: LIST
39483: LIST
39484: PUSH
39485: LD_INT 1
39487: PUSH
39488: LD_INT 3
39490: PUSH
39491: EMPTY
39492: LIST
39493: LIST
39494: PUSH
39495: LD_INT 1
39497: PUSH
39498: LD_INT 4
39500: PUSH
39501: EMPTY
39502: LIST
39503: LIST
39504: PUSH
39505: LD_INT 0
39507: PUSH
39508: LD_INT 4
39510: PUSH
39511: EMPTY
39512: LIST
39513: LIST
39514: PUSH
39515: LD_INT 1
39517: NEG
39518: PUSH
39519: LD_INT 3
39521: PUSH
39522: EMPTY
39523: LIST
39524: LIST
39525: PUSH
39526: LD_INT 1
39528: NEG
39529: PUSH
39530: LD_INT 2
39532: PUSH
39533: EMPTY
39534: LIST
39535: LIST
39536: PUSH
39537: LD_INT 2
39539: PUSH
39540: LD_INT 4
39542: PUSH
39543: EMPTY
39544: LIST
39545: LIST
39546: PUSH
39547: LD_INT 2
39549: NEG
39550: PUSH
39551: LD_INT 2
39553: PUSH
39554: EMPTY
39555: LIST
39556: LIST
39557: PUSH
39558: LD_INT 4
39560: NEG
39561: PUSH
39562: LD_INT 0
39564: PUSH
39565: EMPTY
39566: LIST
39567: LIST
39568: PUSH
39569: LD_INT 4
39571: NEG
39572: PUSH
39573: LD_INT 1
39575: NEG
39576: PUSH
39577: EMPTY
39578: LIST
39579: LIST
39580: PUSH
39581: LD_INT 3
39583: NEG
39584: PUSH
39585: LD_INT 0
39587: PUSH
39588: EMPTY
39589: LIST
39590: LIST
39591: PUSH
39592: LD_INT 3
39594: NEG
39595: PUSH
39596: LD_INT 1
39598: PUSH
39599: EMPTY
39600: LIST
39601: LIST
39602: PUSH
39603: LD_INT 4
39605: NEG
39606: PUSH
39607: LD_INT 1
39609: PUSH
39610: EMPTY
39611: LIST
39612: LIST
39613: PUSH
39614: LD_INT 5
39616: NEG
39617: PUSH
39618: LD_INT 0
39620: PUSH
39621: EMPTY
39622: LIST
39623: LIST
39624: PUSH
39625: LD_INT 5
39627: NEG
39628: PUSH
39629: LD_INT 1
39631: NEG
39632: PUSH
39633: EMPTY
39634: LIST
39635: LIST
39636: PUSH
39637: LD_INT 5
39639: NEG
39640: PUSH
39641: LD_INT 2
39643: NEG
39644: PUSH
39645: EMPTY
39646: LIST
39647: LIST
39648: PUSH
39649: LD_INT 3
39651: NEG
39652: PUSH
39653: LD_INT 2
39655: PUSH
39656: EMPTY
39657: LIST
39658: LIST
39659: PUSH
39660: LD_INT 3
39662: NEG
39663: PUSH
39664: LD_INT 3
39666: NEG
39667: PUSH
39668: EMPTY
39669: LIST
39670: LIST
39671: PUSH
39672: LD_INT 3
39674: NEG
39675: PUSH
39676: LD_INT 4
39678: NEG
39679: PUSH
39680: EMPTY
39681: LIST
39682: LIST
39683: PUSH
39684: LD_INT 2
39686: NEG
39687: PUSH
39688: LD_INT 3
39690: NEG
39691: PUSH
39692: EMPTY
39693: LIST
39694: LIST
39695: PUSH
39696: LD_INT 2
39698: NEG
39699: PUSH
39700: LD_INT 2
39702: NEG
39703: PUSH
39704: EMPTY
39705: LIST
39706: LIST
39707: PUSH
39708: LD_INT 3
39710: NEG
39711: PUSH
39712: LD_INT 2
39714: NEG
39715: PUSH
39716: EMPTY
39717: LIST
39718: LIST
39719: PUSH
39720: LD_INT 4
39722: NEG
39723: PUSH
39724: LD_INT 3
39726: NEG
39727: PUSH
39728: EMPTY
39729: LIST
39730: LIST
39731: PUSH
39732: LD_INT 4
39734: NEG
39735: PUSH
39736: LD_INT 4
39738: NEG
39739: PUSH
39740: EMPTY
39741: LIST
39742: LIST
39743: PUSH
39744: LD_INT 2
39746: NEG
39747: PUSH
39748: LD_INT 4
39750: NEG
39751: PUSH
39752: EMPTY
39753: LIST
39754: LIST
39755: PUSH
39756: LD_INT 4
39758: NEG
39759: PUSH
39760: LD_INT 2
39762: NEG
39763: PUSH
39764: EMPTY
39765: LIST
39766: LIST
39767: PUSH
39768: LD_INT 0
39770: PUSH
39771: LD_INT 4
39773: NEG
39774: PUSH
39775: EMPTY
39776: LIST
39777: LIST
39778: PUSH
39779: LD_INT 0
39781: PUSH
39782: LD_INT 5
39784: NEG
39785: PUSH
39786: EMPTY
39787: LIST
39788: LIST
39789: PUSH
39790: LD_INT 1
39792: PUSH
39793: LD_INT 4
39795: NEG
39796: PUSH
39797: EMPTY
39798: LIST
39799: LIST
39800: PUSH
39801: LD_INT 1
39803: PUSH
39804: LD_INT 3
39806: NEG
39807: PUSH
39808: EMPTY
39809: LIST
39810: LIST
39811: PUSH
39812: LD_INT 0
39814: PUSH
39815: LD_INT 3
39817: NEG
39818: PUSH
39819: EMPTY
39820: LIST
39821: LIST
39822: PUSH
39823: LD_INT 1
39825: NEG
39826: PUSH
39827: LD_INT 4
39829: NEG
39830: PUSH
39831: EMPTY
39832: LIST
39833: LIST
39834: PUSH
39835: LD_INT 1
39837: NEG
39838: PUSH
39839: LD_INT 5
39841: NEG
39842: PUSH
39843: EMPTY
39844: LIST
39845: LIST
39846: PUSH
39847: LD_INT 2
39849: PUSH
39850: LD_INT 3
39852: NEG
39853: PUSH
39854: EMPTY
39855: LIST
39856: LIST
39857: PUSH
39858: LD_INT 2
39860: NEG
39861: PUSH
39862: LD_INT 5
39864: NEG
39865: PUSH
39866: EMPTY
39867: LIST
39868: LIST
39869: PUSH
39870: EMPTY
39871: LIST
39872: LIST
39873: LIST
39874: LIST
39875: LIST
39876: LIST
39877: LIST
39878: LIST
39879: LIST
39880: LIST
39881: LIST
39882: LIST
39883: LIST
39884: LIST
39885: LIST
39886: LIST
39887: LIST
39888: LIST
39889: LIST
39890: LIST
39891: LIST
39892: LIST
39893: LIST
39894: LIST
39895: LIST
39896: LIST
39897: LIST
39898: LIST
39899: LIST
39900: LIST
39901: LIST
39902: LIST
39903: LIST
39904: LIST
39905: LIST
39906: LIST
39907: LIST
39908: LIST
39909: LIST
39910: LIST
39911: LIST
39912: LIST
39913: LIST
39914: LIST
39915: LIST
39916: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
39917: LD_ADDR_VAR 0 31
39921: PUSH
39922: LD_INT 0
39924: PUSH
39925: LD_INT 4
39927: PUSH
39928: EMPTY
39929: LIST
39930: LIST
39931: PUSH
39932: LD_INT 0
39934: PUSH
39935: LD_INT 3
39937: PUSH
39938: EMPTY
39939: LIST
39940: LIST
39941: PUSH
39942: LD_INT 1
39944: PUSH
39945: LD_INT 4
39947: PUSH
39948: EMPTY
39949: LIST
39950: LIST
39951: PUSH
39952: LD_INT 1
39954: PUSH
39955: LD_INT 5
39957: PUSH
39958: EMPTY
39959: LIST
39960: LIST
39961: PUSH
39962: LD_INT 0
39964: PUSH
39965: LD_INT 5
39967: PUSH
39968: EMPTY
39969: LIST
39970: LIST
39971: PUSH
39972: LD_INT 1
39974: NEG
39975: PUSH
39976: LD_INT 4
39978: PUSH
39979: EMPTY
39980: LIST
39981: LIST
39982: PUSH
39983: LD_INT 1
39985: NEG
39986: PUSH
39987: LD_INT 3
39989: PUSH
39990: EMPTY
39991: LIST
39992: LIST
39993: PUSH
39994: LD_INT 2
39996: PUSH
39997: LD_INT 5
39999: PUSH
40000: EMPTY
40001: LIST
40002: LIST
40003: PUSH
40004: LD_INT 2
40006: NEG
40007: PUSH
40008: LD_INT 3
40010: PUSH
40011: EMPTY
40012: LIST
40013: LIST
40014: PUSH
40015: LD_INT 3
40017: NEG
40018: PUSH
40019: LD_INT 0
40021: PUSH
40022: EMPTY
40023: LIST
40024: LIST
40025: PUSH
40026: LD_INT 3
40028: NEG
40029: PUSH
40030: LD_INT 1
40032: NEG
40033: PUSH
40034: EMPTY
40035: LIST
40036: LIST
40037: PUSH
40038: LD_INT 2
40040: NEG
40041: PUSH
40042: LD_INT 0
40044: PUSH
40045: EMPTY
40046: LIST
40047: LIST
40048: PUSH
40049: LD_INT 2
40051: NEG
40052: PUSH
40053: LD_INT 1
40055: PUSH
40056: EMPTY
40057: LIST
40058: LIST
40059: PUSH
40060: LD_INT 3
40062: NEG
40063: PUSH
40064: LD_INT 1
40066: PUSH
40067: EMPTY
40068: LIST
40069: LIST
40070: PUSH
40071: LD_INT 4
40073: NEG
40074: PUSH
40075: LD_INT 0
40077: PUSH
40078: EMPTY
40079: LIST
40080: LIST
40081: PUSH
40082: LD_INT 4
40084: NEG
40085: PUSH
40086: LD_INT 1
40088: NEG
40089: PUSH
40090: EMPTY
40091: LIST
40092: LIST
40093: PUSH
40094: LD_INT 4
40096: NEG
40097: PUSH
40098: LD_INT 2
40100: NEG
40101: PUSH
40102: EMPTY
40103: LIST
40104: LIST
40105: PUSH
40106: LD_INT 2
40108: NEG
40109: PUSH
40110: LD_INT 2
40112: PUSH
40113: EMPTY
40114: LIST
40115: LIST
40116: PUSH
40117: LD_INT 4
40119: NEG
40120: PUSH
40121: LD_INT 4
40123: NEG
40124: PUSH
40125: EMPTY
40126: LIST
40127: LIST
40128: PUSH
40129: LD_INT 4
40131: NEG
40132: PUSH
40133: LD_INT 5
40135: NEG
40136: PUSH
40137: EMPTY
40138: LIST
40139: LIST
40140: PUSH
40141: LD_INT 3
40143: NEG
40144: PUSH
40145: LD_INT 4
40147: NEG
40148: PUSH
40149: EMPTY
40150: LIST
40151: LIST
40152: PUSH
40153: LD_INT 3
40155: NEG
40156: PUSH
40157: LD_INT 3
40159: NEG
40160: PUSH
40161: EMPTY
40162: LIST
40163: LIST
40164: PUSH
40165: LD_INT 4
40167: NEG
40168: PUSH
40169: LD_INT 3
40171: NEG
40172: PUSH
40173: EMPTY
40174: LIST
40175: LIST
40176: PUSH
40177: LD_INT 5
40179: NEG
40180: PUSH
40181: LD_INT 4
40183: NEG
40184: PUSH
40185: EMPTY
40186: LIST
40187: LIST
40188: PUSH
40189: LD_INT 5
40191: NEG
40192: PUSH
40193: LD_INT 5
40195: NEG
40196: PUSH
40197: EMPTY
40198: LIST
40199: LIST
40200: PUSH
40201: LD_INT 3
40203: NEG
40204: PUSH
40205: LD_INT 5
40207: NEG
40208: PUSH
40209: EMPTY
40210: LIST
40211: LIST
40212: PUSH
40213: LD_INT 5
40215: NEG
40216: PUSH
40217: LD_INT 3
40219: NEG
40220: PUSH
40221: EMPTY
40222: LIST
40223: LIST
40224: PUSH
40225: LD_INT 0
40227: PUSH
40228: LD_INT 3
40230: NEG
40231: PUSH
40232: EMPTY
40233: LIST
40234: LIST
40235: PUSH
40236: LD_INT 0
40238: PUSH
40239: LD_INT 4
40241: NEG
40242: PUSH
40243: EMPTY
40244: LIST
40245: LIST
40246: PUSH
40247: LD_INT 1
40249: PUSH
40250: LD_INT 3
40252: NEG
40253: PUSH
40254: EMPTY
40255: LIST
40256: LIST
40257: PUSH
40258: LD_INT 1
40260: PUSH
40261: LD_INT 2
40263: NEG
40264: PUSH
40265: EMPTY
40266: LIST
40267: LIST
40268: PUSH
40269: LD_INT 0
40271: PUSH
40272: LD_INT 2
40274: NEG
40275: PUSH
40276: EMPTY
40277: LIST
40278: LIST
40279: PUSH
40280: LD_INT 1
40282: NEG
40283: PUSH
40284: LD_INT 3
40286: NEG
40287: PUSH
40288: EMPTY
40289: LIST
40290: LIST
40291: PUSH
40292: LD_INT 1
40294: NEG
40295: PUSH
40296: LD_INT 4
40298: NEG
40299: PUSH
40300: EMPTY
40301: LIST
40302: LIST
40303: PUSH
40304: LD_INT 2
40306: PUSH
40307: LD_INT 2
40309: NEG
40310: PUSH
40311: EMPTY
40312: LIST
40313: LIST
40314: PUSH
40315: LD_INT 2
40317: NEG
40318: PUSH
40319: LD_INT 4
40321: NEG
40322: PUSH
40323: EMPTY
40324: LIST
40325: LIST
40326: PUSH
40327: LD_INT 4
40329: PUSH
40330: LD_INT 0
40332: PUSH
40333: EMPTY
40334: LIST
40335: LIST
40336: PUSH
40337: LD_INT 4
40339: PUSH
40340: LD_INT 1
40342: NEG
40343: PUSH
40344: EMPTY
40345: LIST
40346: LIST
40347: PUSH
40348: LD_INT 5
40350: PUSH
40351: LD_INT 0
40353: PUSH
40354: EMPTY
40355: LIST
40356: LIST
40357: PUSH
40358: LD_INT 5
40360: PUSH
40361: LD_INT 1
40363: PUSH
40364: EMPTY
40365: LIST
40366: LIST
40367: PUSH
40368: LD_INT 4
40370: PUSH
40371: LD_INT 1
40373: PUSH
40374: EMPTY
40375: LIST
40376: LIST
40377: PUSH
40378: LD_INT 3
40380: PUSH
40381: LD_INT 0
40383: PUSH
40384: EMPTY
40385: LIST
40386: LIST
40387: PUSH
40388: LD_INT 3
40390: PUSH
40391: LD_INT 1
40393: NEG
40394: PUSH
40395: EMPTY
40396: LIST
40397: LIST
40398: PUSH
40399: LD_INT 3
40401: PUSH
40402: LD_INT 2
40404: NEG
40405: PUSH
40406: EMPTY
40407: LIST
40408: LIST
40409: PUSH
40410: LD_INT 5
40412: PUSH
40413: LD_INT 2
40415: PUSH
40416: EMPTY
40417: LIST
40418: LIST
40419: PUSH
40420: EMPTY
40421: LIST
40422: LIST
40423: LIST
40424: LIST
40425: LIST
40426: LIST
40427: LIST
40428: LIST
40429: LIST
40430: LIST
40431: LIST
40432: LIST
40433: LIST
40434: LIST
40435: LIST
40436: LIST
40437: LIST
40438: LIST
40439: LIST
40440: LIST
40441: LIST
40442: LIST
40443: LIST
40444: LIST
40445: LIST
40446: LIST
40447: LIST
40448: LIST
40449: LIST
40450: LIST
40451: LIST
40452: LIST
40453: LIST
40454: LIST
40455: LIST
40456: LIST
40457: LIST
40458: LIST
40459: LIST
40460: LIST
40461: LIST
40462: LIST
40463: LIST
40464: LIST
40465: LIST
40466: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
40467: LD_ADDR_VAR 0 32
40471: PUSH
40472: LD_INT 4
40474: NEG
40475: PUSH
40476: LD_INT 0
40478: PUSH
40479: EMPTY
40480: LIST
40481: LIST
40482: PUSH
40483: LD_INT 4
40485: NEG
40486: PUSH
40487: LD_INT 1
40489: NEG
40490: PUSH
40491: EMPTY
40492: LIST
40493: LIST
40494: PUSH
40495: LD_INT 3
40497: NEG
40498: PUSH
40499: LD_INT 0
40501: PUSH
40502: EMPTY
40503: LIST
40504: LIST
40505: PUSH
40506: LD_INT 3
40508: NEG
40509: PUSH
40510: LD_INT 1
40512: PUSH
40513: EMPTY
40514: LIST
40515: LIST
40516: PUSH
40517: LD_INT 4
40519: NEG
40520: PUSH
40521: LD_INT 1
40523: PUSH
40524: EMPTY
40525: LIST
40526: LIST
40527: PUSH
40528: LD_INT 5
40530: NEG
40531: PUSH
40532: LD_INT 0
40534: PUSH
40535: EMPTY
40536: LIST
40537: LIST
40538: PUSH
40539: LD_INT 5
40541: NEG
40542: PUSH
40543: LD_INT 1
40545: NEG
40546: PUSH
40547: EMPTY
40548: LIST
40549: LIST
40550: PUSH
40551: LD_INT 5
40553: NEG
40554: PUSH
40555: LD_INT 2
40557: NEG
40558: PUSH
40559: EMPTY
40560: LIST
40561: LIST
40562: PUSH
40563: LD_INT 3
40565: NEG
40566: PUSH
40567: LD_INT 2
40569: PUSH
40570: EMPTY
40571: LIST
40572: LIST
40573: PUSH
40574: LD_INT 3
40576: NEG
40577: PUSH
40578: LD_INT 3
40580: NEG
40581: PUSH
40582: EMPTY
40583: LIST
40584: LIST
40585: PUSH
40586: LD_INT 3
40588: NEG
40589: PUSH
40590: LD_INT 4
40592: NEG
40593: PUSH
40594: EMPTY
40595: LIST
40596: LIST
40597: PUSH
40598: LD_INT 2
40600: NEG
40601: PUSH
40602: LD_INT 3
40604: NEG
40605: PUSH
40606: EMPTY
40607: LIST
40608: LIST
40609: PUSH
40610: LD_INT 2
40612: NEG
40613: PUSH
40614: LD_INT 2
40616: NEG
40617: PUSH
40618: EMPTY
40619: LIST
40620: LIST
40621: PUSH
40622: LD_INT 3
40624: NEG
40625: PUSH
40626: LD_INT 2
40628: NEG
40629: PUSH
40630: EMPTY
40631: LIST
40632: LIST
40633: PUSH
40634: LD_INT 4
40636: NEG
40637: PUSH
40638: LD_INT 3
40640: NEG
40641: PUSH
40642: EMPTY
40643: LIST
40644: LIST
40645: PUSH
40646: LD_INT 4
40648: NEG
40649: PUSH
40650: LD_INT 4
40652: NEG
40653: PUSH
40654: EMPTY
40655: LIST
40656: LIST
40657: PUSH
40658: LD_INT 2
40660: NEG
40661: PUSH
40662: LD_INT 4
40664: NEG
40665: PUSH
40666: EMPTY
40667: LIST
40668: LIST
40669: PUSH
40670: LD_INT 4
40672: NEG
40673: PUSH
40674: LD_INT 2
40676: NEG
40677: PUSH
40678: EMPTY
40679: LIST
40680: LIST
40681: PUSH
40682: LD_INT 0
40684: PUSH
40685: LD_INT 4
40687: NEG
40688: PUSH
40689: EMPTY
40690: LIST
40691: LIST
40692: PUSH
40693: LD_INT 0
40695: PUSH
40696: LD_INT 5
40698: NEG
40699: PUSH
40700: EMPTY
40701: LIST
40702: LIST
40703: PUSH
40704: LD_INT 1
40706: PUSH
40707: LD_INT 4
40709: NEG
40710: PUSH
40711: EMPTY
40712: LIST
40713: LIST
40714: PUSH
40715: LD_INT 1
40717: PUSH
40718: LD_INT 3
40720: NEG
40721: PUSH
40722: EMPTY
40723: LIST
40724: LIST
40725: PUSH
40726: LD_INT 0
40728: PUSH
40729: LD_INT 3
40731: NEG
40732: PUSH
40733: EMPTY
40734: LIST
40735: LIST
40736: PUSH
40737: LD_INT 1
40739: NEG
40740: PUSH
40741: LD_INT 4
40743: NEG
40744: PUSH
40745: EMPTY
40746: LIST
40747: LIST
40748: PUSH
40749: LD_INT 1
40751: NEG
40752: PUSH
40753: LD_INT 5
40755: NEG
40756: PUSH
40757: EMPTY
40758: LIST
40759: LIST
40760: PUSH
40761: LD_INT 2
40763: PUSH
40764: LD_INT 3
40766: NEG
40767: PUSH
40768: EMPTY
40769: LIST
40770: LIST
40771: PUSH
40772: LD_INT 2
40774: NEG
40775: PUSH
40776: LD_INT 5
40778: NEG
40779: PUSH
40780: EMPTY
40781: LIST
40782: LIST
40783: PUSH
40784: LD_INT 3
40786: PUSH
40787: LD_INT 0
40789: PUSH
40790: EMPTY
40791: LIST
40792: LIST
40793: PUSH
40794: LD_INT 3
40796: PUSH
40797: LD_INT 1
40799: NEG
40800: PUSH
40801: EMPTY
40802: LIST
40803: LIST
40804: PUSH
40805: LD_INT 4
40807: PUSH
40808: LD_INT 0
40810: PUSH
40811: EMPTY
40812: LIST
40813: LIST
40814: PUSH
40815: LD_INT 4
40817: PUSH
40818: LD_INT 1
40820: PUSH
40821: EMPTY
40822: LIST
40823: LIST
40824: PUSH
40825: LD_INT 3
40827: PUSH
40828: LD_INT 1
40830: PUSH
40831: EMPTY
40832: LIST
40833: LIST
40834: PUSH
40835: LD_INT 2
40837: PUSH
40838: LD_INT 0
40840: PUSH
40841: EMPTY
40842: LIST
40843: LIST
40844: PUSH
40845: LD_INT 2
40847: PUSH
40848: LD_INT 1
40850: NEG
40851: PUSH
40852: EMPTY
40853: LIST
40854: LIST
40855: PUSH
40856: LD_INT 2
40858: PUSH
40859: LD_INT 2
40861: NEG
40862: PUSH
40863: EMPTY
40864: LIST
40865: LIST
40866: PUSH
40867: LD_INT 4
40869: PUSH
40870: LD_INT 2
40872: PUSH
40873: EMPTY
40874: LIST
40875: LIST
40876: PUSH
40877: LD_INT 4
40879: PUSH
40880: LD_INT 4
40882: PUSH
40883: EMPTY
40884: LIST
40885: LIST
40886: PUSH
40887: LD_INT 4
40889: PUSH
40890: LD_INT 3
40892: PUSH
40893: EMPTY
40894: LIST
40895: LIST
40896: PUSH
40897: LD_INT 5
40899: PUSH
40900: LD_INT 4
40902: PUSH
40903: EMPTY
40904: LIST
40905: LIST
40906: PUSH
40907: LD_INT 5
40909: PUSH
40910: LD_INT 5
40912: PUSH
40913: EMPTY
40914: LIST
40915: LIST
40916: PUSH
40917: LD_INT 4
40919: PUSH
40920: LD_INT 5
40922: PUSH
40923: EMPTY
40924: LIST
40925: LIST
40926: PUSH
40927: LD_INT 3
40929: PUSH
40930: LD_INT 4
40932: PUSH
40933: EMPTY
40934: LIST
40935: LIST
40936: PUSH
40937: LD_INT 3
40939: PUSH
40940: LD_INT 3
40942: PUSH
40943: EMPTY
40944: LIST
40945: LIST
40946: PUSH
40947: LD_INT 5
40949: PUSH
40950: LD_INT 3
40952: PUSH
40953: EMPTY
40954: LIST
40955: LIST
40956: PUSH
40957: LD_INT 3
40959: PUSH
40960: LD_INT 5
40962: PUSH
40963: EMPTY
40964: LIST
40965: LIST
40966: PUSH
40967: EMPTY
40968: LIST
40969: LIST
40970: LIST
40971: LIST
40972: LIST
40973: LIST
40974: LIST
40975: LIST
40976: LIST
40977: LIST
40978: LIST
40979: LIST
40980: LIST
40981: LIST
40982: LIST
40983: LIST
40984: LIST
40985: LIST
40986: LIST
40987: LIST
40988: LIST
40989: LIST
40990: LIST
40991: LIST
40992: LIST
40993: LIST
40994: LIST
40995: LIST
40996: LIST
40997: LIST
40998: LIST
40999: LIST
41000: LIST
41001: LIST
41002: LIST
41003: LIST
41004: LIST
41005: LIST
41006: LIST
41007: LIST
41008: LIST
41009: LIST
41010: LIST
41011: LIST
41012: LIST
41013: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
41014: LD_ADDR_VAR 0 33
41018: PUSH
41019: LD_INT 4
41021: NEG
41022: PUSH
41023: LD_INT 4
41025: NEG
41026: PUSH
41027: EMPTY
41028: LIST
41029: LIST
41030: PUSH
41031: LD_INT 4
41033: NEG
41034: PUSH
41035: LD_INT 5
41037: NEG
41038: PUSH
41039: EMPTY
41040: LIST
41041: LIST
41042: PUSH
41043: LD_INT 3
41045: NEG
41046: PUSH
41047: LD_INT 4
41049: NEG
41050: PUSH
41051: EMPTY
41052: LIST
41053: LIST
41054: PUSH
41055: LD_INT 3
41057: NEG
41058: PUSH
41059: LD_INT 3
41061: NEG
41062: PUSH
41063: EMPTY
41064: LIST
41065: LIST
41066: PUSH
41067: LD_INT 4
41069: NEG
41070: PUSH
41071: LD_INT 3
41073: NEG
41074: PUSH
41075: EMPTY
41076: LIST
41077: LIST
41078: PUSH
41079: LD_INT 5
41081: NEG
41082: PUSH
41083: LD_INT 4
41085: NEG
41086: PUSH
41087: EMPTY
41088: LIST
41089: LIST
41090: PUSH
41091: LD_INT 5
41093: NEG
41094: PUSH
41095: LD_INT 5
41097: NEG
41098: PUSH
41099: EMPTY
41100: LIST
41101: LIST
41102: PUSH
41103: LD_INT 3
41105: NEG
41106: PUSH
41107: LD_INT 5
41109: NEG
41110: PUSH
41111: EMPTY
41112: LIST
41113: LIST
41114: PUSH
41115: LD_INT 5
41117: NEG
41118: PUSH
41119: LD_INT 3
41121: NEG
41122: PUSH
41123: EMPTY
41124: LIST
41125: LIST
41126: PUSH
41127: LD_INT 0
41129: PUSH
41130: LD_INT 3
41132: NEG
41133: PUSH
41134: EMPTY
41135: LIST
41136: LIST
41137: PUSH
41138: LD_INT 0
41140: PUSH
41141: LD_INT 4
41143: NEG
41144: PUSH
41145: EMPTY
41146: LIST
41147: LIST
41148: PUSH
41149: LD_INT 1
41151: PUSH
41152: LD_INT 3
41154: NEG
41155: PUSH
41156: EMPTY
41157: LIST
41158: LIST
41159: PUSH
41160: LD_INT 1
41162: PUSH
41163: LD_INT 2
41165: NEG
41166: PUSH
41167: EMPTY
41168: LIST
41169: LIST
41170: PUSH
41171: LD_INT 0
41173: PUSH
41174: LD_INT 2
41176: NEG
41177: PUSH
41178: EMPTY
41179: LIST
41180: LIST
41181: PUSH
41182: LD_INT 1
41184: NEG
41185: PUSH
41186: LD_INT 3
41188: NEG
41189: PUSH
41190: EMPTY
41191: LIST
41192: LIST
41193: PUSH
41194: LD_INT 1
41196: NEG
41197: PUSH
41198: LD_INT 4
41200: NEG
41201: PUSH
41202: EMPTY
41203: LIST
41204: LIST
41205: PUSH
41206: LD_INT 2
41208: PUSH
41209: LD_INT 2
41211: NEG
41212: PUSH
41213: EMPTY
41214: LIST
41215: LIST
41216: PUSH
41217: LD_INT 2
41219: NEG
41220: PUSH
41221: LD_INT 4
41223: NEG
41224: PUSH
41225: EMPTY
41226: LIST
41227: LIST
41228: PUSH
41229: LD_INT 4
41231: PUSH
41232: LD_INT 0
41234: PUSH
41235: EMPTY
41236: LIST
41237: LIST
41238: PUSH
41239: LD_INT 4
41241: PUSH
41242: LD_INT 1
41244: NEG
41245: PUSH
41246: EMPTY
41247: LIST
41248: LIST
41249: PUSH
41250: LD_INT 5
41252: PUSH
41253: LD_INT 0
41255: PUSH
41256: EMPTY
41257: LIST
41258: LIST
41259: PUSH
41260: LD_INT 5
41262: PUSH
41263: LD_INT 1
41265: PUSH
41266: EMPTY
41267: LIST
41268: LIST
41269: PUSH
41270: LD_INT 4
41272: PUSH
41273: LD_INT 1
41275: PUSH
41276: EMPTY
41277: LIST
41278: LIST
41279: PUSH
41280: LD_INT 3
41282: PUSH
41283: LD_INT 0
41285: PUSH
41286: EMPTY
41287: LIST
41288: LIST
41289: PUSH
41290: LD_INT 3
41292: PUSH
41293: LD_INT 1
41295: NEG
41296: PUSH
41297: EMPTY
41298: LIST
41299: LIST
41300: PUSH
41301: LD_INT 3
41303: PUSH
41304: LD_INT 2
41306: NEG
41307: PUSH
41308: EMPTY
41309: LIST
41310: LIST
41311: PUSH
41312: LD_INT 5
41314: PUSH
41315: LD_INT 2
41317: PUSH
41318: EMPTY
41319: LIST
41320: LIST
41321: PUSH
41322: LD_INT 3
41324: PUSH
41325: LD_INT 3
41327: PUSH
41328: EMPTY
41329: LIST
41330: LIST
41331: PUSH
41332: LD_INT 3
41334: PUSH
41335: LD_INT 2
41337: PUSH
41338: EMPTY
41339: LIST
41340: LIST
41341: PUSH
41342: LD_INT 4
41344: PUSH
41345: LD_INT 3
41347: PUSH
41348: EMPTY
41349: LIST
41350: LIST
41351: PUSH
41352: LD_INT 4
41354: PUSH
41355: LD_INT 4
41357: PUSH
41358: EMPTY
41359: LIST
41360: LIST
41361: PUSH
41362: LD_INT 3
41364: PUSH
41365: LD_INT 4
41367: PUSH
41368: EMPTY
41369: LIST
41370: LIST
41371: PUSH
41372: LD_INT 2
41374: PUSH
41375: LD_INT 3
41377: PUSH
41378: EMPTY
41379: LIST
41380: LIST
41381: PUSH
41382: LD_INT 2
41384: PUSH
41385: LD_INT 2
41387: PUSH
41388: EMPTY
41389: LIST
41390: LIST
41391: PUSH
41392: LD_INT 4
41394: PUSH
41395: LD_INT 2
41397: PUSH
41398: EMPTY
41399: LIST
41400: LIST
41401: PUSH
41402: LD_INT 2
41404: PUSH
41405: LD_INT 4
41407: PUSH
41408: EMPTY
41409: LIST
41410: LIST
41411: PUSH
41412: LD_INT 0
41414: PUSH
41415: LD_INT 4
41417: PUSH
41418: EMPTY
41419: LIST
41420: LIST
41421: PUSH
41422: LD_INT 0
41424: PUSH
41425: LD_INT 3
41427: PUSH
41428: EMPTY
41429: LIST
41430: LIST
41431: PUSH
41432: LD_INT 1
41434: PUSH
41435: LD_INT 4
41437: PUSH
41438: EMPTY
41439: LIST
41440: LIST
41441: PUSH
41442: LD_INT 1
41444: PUSH
41445: LD_INT 5
41447: PUSH
41448: EMPTY
41449: LIST
41450: LIST
41451: PUSH
41452: LD_INT 0
41454: PUSH
41455: LD_INT 5
41457: PUSH
41458: EMPTY
41459: LIST
41460: LIST
41461: PUSH
41462: LD_INT 1
41464: NEG
41465: PUSH
41466: LD_INT 4
41468: PUSH
41469: EMPTY
41470: LIST
41471: LIST
41472: PUSH
41473: LD_INT 1
41475: NEG
41476: PUSH
41477: LD_INT 3
41479: PUSH
41480: EMPTY
41481: LIST
41482: LIST
41483: PUSH
41484: LD_INT 2
41486: PUSH
41487: LD_INT 5
41489: PUSH
41490: EMPTY
41491: LIST
41492: LIST
41493: PUSH
41494: LD_INT 2
41496: NEG
41497: PUSH
41498: LD_INT 3
41500: PUSH
41501: EMPTY
41502: LIST
41503: LIST
41504: PUSH
41505: EMPTY
41506: LIST
41507: LIST
41508: LIST
41509: LIST
41510: LIST
41511: LIST
41512: LIST
41513: LIST
41514: LIST
41515: LIST
41516: LIST
41517: LIST
41518: LIST
41519: LIST
41520: LIST
41521: LIST
41522: LIST
41523: LIST
41524: LIST
41525: LIST
41526: LIST
41527: LIST
41528: LIST
41529: LIST
41530: LIST
41531: LIST
41532: LIST
41533: LIST
41534: LIST
41535: LIST
41536: LIST
41537: LIST
41538: LIST
41539: LIST
41540: LIST
41541: LIST
41542: LIST
41543: LIST
41544: LIST
41545: LIST
41546: LIST
41547: LIST
41548: LIST
41549: LIST
41550: LIST
41551: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
41552: LD_ADDR_VAR 0 34
41556: PUSH
41557: LD_INT 0
41559: PUSH
41560: LD_INT 4
41562: NEG
41563: PUSH
41564: EMPTY
41565: LIST
41566: LIST
41567: PUSH
41568: LD_INT 0
41570: PUSH
41571: LD_INT 5
41573: NEG
41574: PUSH
41575: EMPTY
41576: LIST
41577: LIST
41578: PUSH
41579: LD_INT 1
41581: PUSH
41582: LD_INT 4
41584: NEG
41585: PUSH
41586: EMPTY
41587: LIST
41588: LIST
41589: PUSH
41590: LD_INT 1
41592: PUSH
41593: LD_INT 3
41595: NEG
41596: PUSH
41597: EMPTY
41598: LIST
41599: LIST
41600: PUSH
41601: LD_INT 0
41603: PUSH
41604: LD_INT 3
41606: NEG
41607: PUSH
41608: EMPTY
41609: LIST
41610: LIST
41611: PUSH
41612: LD_INT 1
41614: NEG
41615: PUSH
41616: LD_INT 4
41618: NEG
41619: PUSH
41620: EMPTY
41621: LIST
41622: LIST
41623: PUSH
41624: LD_INT 1
41626: NEG
41627: PUSH
41628: LD_INT 5
41630: NEG
41631: PUSH
41632: EMPTY
41633: LIST
41634: LIST
41635: PUSH
41636: LD_INT 2
41638: PUSH
41639: LD_INT 3
41641: NEG
41642: PUSH
41643: EMPTY
41644: LIST
41645: LIST
41646: PUSH
41647: LD_INT 2
41649: NEG
41650: PUSH
41651: LD_INT 5
41653: NEG
41654: PUSH
41655: EMPTY
41656: LIST
41657: LIST
41658: PUSH
41659: LD_INT 3
41661: PUSH
41662: LD_INT 0
41664: PUSH
41665: EMPTY
41666: LIST
41667: LIST
41668: PUSH
41669: LD_INT 3
41671: PUSH
41672: LD_INT 1
41674: NEG
41675: PUSH
41676: EMPTY
41677: LIST
41678: LIST
41679: PUSH
41680: LD_INT 4
41682: PUSH
41683: LD_INT 0
41685: PUSH
41686: EMPTY
41687: LIST
41688: LIST
41689: PUSH
41690: LD_INT 4
41692: PUSH
41693: LD_INT 1
41695: PUSH
41696: EMPTY
41697: LIST
41698: LIST
41699: PUSH
41700: LD_INT 3
41702: PUSH
41703: LD_INT 1
41705: PUSH
41706: EMPTY
41707: LIST
41708: LIST
41709: PUSH
41710: LD_INT 2
41712: PUSH
41713: LD_INT 0
41715: PUSH
41716: EMPTY
41717: LIST
41718: LIST
41719: PUSH
41720: LD_INT 2
41722: PUSH
41723: LD_INT 1
41725: NEG
41726: PUSH
41727: EMPTY
41728: LIST
41729: LIST
41730: PUSH
41731: LD_INT 2
41733: PUSH
41734: LD_INT 2
41736: NEG
41737: PUSH
41738: EMPTY
41739: LIST
41740: LIST
41741: PUSH
41742: LD_INT 4
41744: PUSH
41745: LD_INT 2
41747: PUSH
41748: EMPTY
41749: LIST
41750: LIST
41751: PUSH
41752: LD_INT 4
41754: PUSH
41755: LD_INT 4
41757: PUSH
41758: EMPTY
41759: LIST
41760: LIST
41761: PUSH
41762: LD_INT 4
41764: PUSH
41765: LD_INT 3
41767: PUSH
41768: EMPTY
41769: LIST
41770: LIST
41771: PUSH
41772: LD_INT 5
41774: PUSH
41775: LD_INT 4
41777: PUSH
41778: EMPTY
41779: LIST
41780: LIST
41781: PUSH
41782: LD_INT 5
41784: PUSH
41785: LD_INT 5
41787: PUSH
41788: EMPTY
41789: LIST
41790: LIST
41791: PUSH
41792: LD_INT 4
41794: PUSH
41795: LD_INT 5
41797: PUSH
41798: EMPTY
41799: LIST
41800: LIST
41801: PUSH
41802: LD_INT 3
41804: PUSH
41805: LD_INT 4
41807: PUSH
41808: EMPTY
41809: LIST
41810: LIST
41811: PUSH
41812: LD_INT 3
41814: PUSH
41815: LD_INT 3
41817: PUSH
41818: EMPTY
41819: LIST
41820: LIST
41821: PUSH
41822: LD_INT 5
41824: PUSH
41825: LD_INT 3
41827: PUSH
41828: EMPTY
41829: LIST
41830: LIST
41831: PUSH
41832: LD_INT 3
41834: PUSH
41835: LD_INT 5
41837: PUSH
41838: EMPTY
41839: LIST
41840: LIST
41841: PUSH
41842: LD_INT 0
41844: PUSH
41845: LD_INT 3
41847: PUSH
41848: EMPTY
41849: LIST
41850: LIST
41851: PUSH
41852: LD_INT 0
41854: PUSH
41855: LD_INT 2
41857: PUSH
41858: EMPTY
41859: LIST
41860: LIST
41861: PUSH
41862: LD_INT 1
41864: PUSH
41865: LD_INT 3
41867: PUSH
41868: EMPTY
41869: LIST
41870: LIST
41871: PUSH
41872: LD_INT 1
41874: PUSH
41875: LD_INT 4
41877: PUSH
41878: EMPTY
41879: LIST
41880: LIST
41881: PUSH
41882: LD_INT 0
41884: PUSH
41885: LD_INT 4
41887: PUSH
41888: EMPTY
41889: LIST
41890: LIST
41891: PUSH
41892: LD_INT 1
41894: NEG
41895: PUSH
41896: LD_INT 3
41898: PUSH
41899: EMPTY
41900: LIST
41901: LIST
41902: PUSH
41903: LD_INT 1
41905: NEG
41906: PUSH
41907: LD_INT 2
41909: PUSH
41910: EMPTY
41911: LIST
41912: LIST
41913: PUSH
41914: LD_INT 2
41916: PUSH
41917: LD_INT 4
41919: PUSH
41920: EMPTY
41921: LIST
41922: LIST
41923: PUSH
41924: LD_INT 2
41926: NEG
41927: PUSH
41928: LD_INT 2
41930: PUSH
41931: EMPTY
41932: LIST
41933: LIST
41934: PUSH
41935: LD_INT 4
41937: NEG
41938: PUSH
41939: LD_INT 0
41941: PUSH
41942: EMPTY
41943: LIST
41944: LIST
41945: PUSH
41946: LD_INT 4
41948: NEG
41949: PUSH
41950: LD_INT 1
41952: NEG
41953: PUSH
41954: EMPTY
41955: LIST
41956: LIST
41957: PUSH
41958: LD_INT 3
41960: NEG
41961: PUSH
41962: LD_INT 0
41964: PUSH
41965: EMPTY
41966: LIST
41967: LIST
41968: PUSH
41969: LD_INT 3
41971: NEG
41972: PUSH
41973: LD_INT 1
41975: PUSH
41976: EMPTY
41977: LIST
41978: LIST
41979: PUSH
41980: LD_INT 4
41982: NEG
41983: PUSH
41984: LD_INT 1
41986: PUSH
41987: EMPTY
41988: LIST
41989: LIST
41990: PUSH
41991: LD_INT 5
41993: NEG
41994: PUSH
41995: LD_INT 0
41997: PUSH
41998: EMPTY
41999: LIST
42000: LIST
42001: PUSH
42002: LD_INT 5
42004: NEG
42005: PUSH
42006: LD_INT 1
42008: NEG
42009: PUSH
42010: EMPTY
42011: LIST
42012: LIST
42013: PUSH
42014: LD_INT 5
42016: NEG
42017: PUSH
42018: LD_INT 2
42020: NEG
42021: PUSH
42022: EMPTY
42023: LIST
42024: LIST
42025: PUSH
42026: LD_INT 3
42028: NEG
42029: PUSH
42030: LD_INT 2
42032: PUSH
42033: EMPTY
42034: LIST
42035: LIST
42036: PUSH
42037: EMPTY
42038: LIST
42039: LIST
42040: LIST
42041: LIST
42042: LIST
42043: LIST
42044: LIST
42045: LIST
42046: LIST
42047: LIST
42048: LIST
42049: LIST
42050: LIST
42051: LIST
42052: LIST
42053: LIST
42054: LIST
42055: LIST
42056: LIST
42057: LIST
42058: LIST
42059: LIST
42060: LIST
42061: LIST
42062: LIST
42063: LIST
42064: LIST
42065: LIST
42066: LIST
42067: LIST
42068: LIST
42069: LIST
42070: LIST
42071: LIST
42072: LIST
42073: LIST
42074: LIST
42075: LIST
42076: LIST
42077: LIST
42078: LIST
42079: LIST
42080: LIST
42081: LIST
42082: LIST
42083: ST_TO_ADDR
// end ; end ;
42084: GO 42087
42086: POP
// case btype of b_depot , b_warehouse :
42087: LD_VAR 0 1
42091: PUSH
42092: LD_INT 0
42094: DOUBLE
42095: EQUAL
42096: IFTRUE 42106
42098: LD_INT 1
42100: DOUBLE
42101: EQUAL
42102: IFTRUE 42106
42104: GO 42307
42106: POP
// case nation of nation_american :
42107: LD_VAR 0 5
42111: PUSH
42112: LD_INT 1
42114: DOUBLE
42115: EQUAL
42116: IFTRUE 42120
42118: GO 42176
42120: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
42121: LD_ADDR_VAR 0 9
42125: PUSH
42126: LD_VAR 0 11
42130: PUSH
42131: LD_VAR 0 12
42135: PUSH
42136: LD_VAR 0 13
42140: PUSH
42141: LD_VAR 0 14
42145: PUSH
42146: LD_VAR 0 15
42150: PUSH
42151: LD_VAR 0 16
42155: PUSH
42156: EMPTY
42157: LIST
42158: LIST
42159: LIST
42160: LIST
42161: LIST
42162: LIST
42163: PUSH
42164: LD_VAR 0 4
42168: PUSH
42169: LD_INT 1
42171: PLUS
42172: ARRAY
42173: ST_TO_ADDR
42174: GO 42305
42176: LD_INT 2
42178: DOUBLE
42179: EQUAL
42180: IFTRUE 42184
42182: GO 42240
42184: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
42185: LD_ADDR_VAR 0 9
42189: PUSH
42190: LD_VAR 0 17
42194: PUSH
42195: LD_VAR 0 18
42199: PUSH
42200: LD_VAR 0 19
42204: PUSH
42205: LD_VAR 0 20
42209: PUSH
42210: LD_VAR 0 21
42214: PUSH
42215: LD_VAR 0 22
42219: PUSH
42220: EMPTY
42221: LIST
42222: LIST
42223: LIST
42224: LIST
42225: LIST
42226: LIST
42227: PUSH
42228: LD_VAR 0 4
42232: PUSH
42233: LD_INT 1
42235: PLUS
42236: ARRAY
42237: ST_TO_ADDR
42238: GO 42305
42240: LD_INT 3
42242: DOUBLE
42243: EQUAL
42244: IFTRUE 42248
42246: GO 42304
42248: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
42249: LD_ADDR_VAR 0 9
42253: PUSH
42254: LD_VAR 0 23
42258: PUSH
42259: LD_VAR 0 24
42263: PUSH
42264: LD_VAR 0 25
42268: PUSH
42269: LD_VAR 0 26
42273: PUSH
42274: LD_VAR 0 27
42278: PUSH
42279: LD_VAR 0 28
42283: PUSH
42284: EMPTY
42285: LIST
42286: LIST
42287: LIST
42288: LIST
42289: LIST
42290: LIST
42291: PUSH
42292: LD_VAR 0 4
42296: PUSH
42297: LD_INT 1
42299: PLUS
42300: ARRAY
42301: ST_TO_ADDR
42302: GO 42305
42304: POP
42305: GO 42860
42307: LD_INT 2
42309: DOUBLE
42310: EQUAL
42311: IFTRUE 42321
42313: LD_INT 3
42315: DOUBLE
42316: EQUAL
42317: IFTRUE 42321
42319: GO 42377
42321: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
42322: LD_ADDR_VAR 0 9
42326: PUSH
42327: LD_VAR 0 29
42331: PUSH
42332: LD_VAR 0 30
42336: PUSH
42337: LD_VAR 0 31
42341: PUSH
42342: LD_VAR 0 32
42346: PUSH
42347: LD_VAR 0 33
42351: PUSH
42352: LD_VAR 0 34
42356: PUSH
42357: EMPTY
42358: LIST
42359: LIST
42360: LIST
42361: LIST
42362: LIST
42363: LIST
42364: PUSH
42365: LD_VAR 0 4
42369: PUSH
42370: LD_INT 1
42372: PLUS
42373: ARRAY
42374: ST_TO_ADDR
42375: GO 42860
42377: LD_INT 16
42379: DOUBLE
42380: EQUAL
42381: IFTRUE 42439
42383: LD_INT 17
42385: DOUBLE
42386: EQUAL
42387: IFTRUE 42439
42389: LD_INT 18
42391: DOUBLE
42392: EQUAL
42393: IFTRUE 42439
42395: LD_INT 19
42397: DOUBLE
42398: EQUAL
42399: IFTRUE 42439
42401: LD_INT 22
42403: DOUBLE
42404: EQUAL
42405: IFTRUE 42439
42407: LD_INT 20
42409: DOUBLE
42410: EQUAL
42411: IFTRUE 42439
42413: LD_INT 21
42415: DOUBLE
42416: EQUAL
42417: IFTRUE 42439
42419: LD_INT 23
42421: DOUBLE
42422: EQUAL
42423: IFTRUE 42439
42425: LD_INT 24
42427: DOUBLE
42428: EQUAL
42429: IFTRUE 42439
42431: LD_INT 25
42433: DOUBLE
42434: EQUAL
42435: IFTRUE 42439
42437: GO 42495
42439: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
42440: LD_ADDR_VAR 0 9
42444: PUSH
42445: LD_VAR 0 35
42449: PUSH
42450: LD_VAR 0 36
42454: PUSH
42455: LD_VAR 0 37
42459: PUSH
42460: LD_VAR 0 38
42464: PUSH
42465: LD_VAR 0 39
42469: PUSH
42470: LD_VAR 0 40
42474: PUSH
42475: EMPTY
42476: LIST
42477: LIST
42478: LIST
42479: LIST
42480: LIST
42481: LIST
42482: PUSH
42483: LD_VAR 0 4
42487: PUSH
42488: LD_INT 1
42490: PLUS
42491: ARRAY
42492: ST_TO_ADDR
42493: GO 42860
42495: LD_INT 6
42497: DOUBLE
42498: EQUAL
42499: IFTRUE 42551
42501: LD_INT 7
42503: DOUBLE
42504: EQUAL
42505: IFTRUE 42551
42507: LD_INT 8
42509: DOUBLE
42510: EQUAL
42511: IFTRUE 42551
42513: LD_INT 13
42515: DOUBLE
42516: EQUAL
42517: IFTRUE 42551
42519: LD_INT 12
42521: DOUBLE
42522: EQUAL
42523: IFTRUE 42551
42525: LD_INT 15
42527: DOUBLE
42528: EQUAL
42529: IFTRUE 42551
42531: LD_INT 11
42533: DOUBLE
42534: EQUAL
42535: IFTRUE 42551
42537: LD_INT 14
42539: DOUBLE
42540: EQUAL
42541: IFTRUE 42551
42543: LD_INT 10
42545: DOUBLE
42546: EQUAL
42547: IFTRUE 42551
42549: GO 42607
42551: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
42552: LD_ADDR_VAR 0 9
42556: PUSH
42557: LD_VAR 0 41
42561: PUSH
42562: LD_VAR 0 42
42566: PUSH
42567: LD_VAR 0 43
42571: PUSH
42572: LD_VAR 0 44
42576: PUSH
42577: LD_VAR 0 45
42581: PUSH
42582: LD_VAR 0 46
42586: PUSH
42587: EMPTY
42588: LIST
42589: LIST
42590: LIST
42591: LIST
42592: LIST
42593: LIST
42594: PUSH
42595: LD_VAR 0 4
42599: PUSH
42600: LD_INT 1
42602: PLUS
42603: ARRAY
42604: ST_TO_ADDR
42605: GO 42860
42607: LD_INT 36
42609: DOUBLE
42610: EQUAL
42611: IFTRUE 42615
42613: GO 42671
42615: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
42616: LD_ADDR_VAR 0 9
42620: PUSH
42621: LD_VAR 0 47
42625: PUSH
42626: LD_VAR 0 48
42630: PUSH
42631: LD_VAR 0 49
42635: PUSH
42636: LD_VAR 0 50
42640: PUSH
42641: LD_VAR 0 51
42645: PUSH
42646: LD_VAR 0 52
42650: PUSH
42651: EMPTY
42652: LIST
42653: LIST
42654: LIST
42655: LIST
42656: LIST
42657: LIST
42658: PUSH
42659: LD_VAR 0 4
42663: PUSH
42664: LD_INT 1
42666: PLUS
42667: ARRAY
42668: ST_TO_ADDR
42669: GO 42860
42671: LD_INT 4
42673: DOUBLE
42674: EQUAL
42675: IFTRUE 42697
42677: LD_INT 5
42679: DOUBLE
42680: EQUAL
42681: IFTRUE 42697
42683: LD_INT 34
42685: DOUBLE
42686: EQUAL
42687: IFTRUE 42697
42689: LD_INT 37
42691: DOUBLE
42692: EQUAL
42693: IFTRUE 42697
42695: GO 42753
42697: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
42698: LD_ADDR_VAR 0 9
42702: PUSH
42703: LD_VAR 0 53
42707: PUSH
42708: LD_VAR 0 54
42712: PUSH
42713: LD_VAR 0 55
42717: PUSH
42718: LD_VAR 0 56
42722: PUSH
42723: LD_VAR 0 57
42727: PUSH
42728: LD_VAR 0 58
42732: PUSH
42733: EMPTY
42734: LIST
42735: LIST
42736: LIST
42737: LIST
42738: LIST
42739: LIST
42740: PUSH
42741: LD_VAR 0 4
42745: PUSH
42746: LD_INT 1
42748: PLUS
42749: ARRAY
42750: ST_TO_ADDR
42751: GO 42860
42753: LD_INT 31
42755: DOUBLE
42756: EQUAL
42757: IFTRUE 42803
42759: LD_INT 32
42761: DOUBLE
42762: EQUAL
42763: IFTRUE 42803
42765: LD_INT 33
42767: DOUBLE
42768: EQUAL
42769: IFTRUE 42803
42771: LD_INT 27
42773: DOUBLE
42774: EQUAL
42775: IFTRUE 42803
42777: LD_INT 26
42779: DOUBLE
42780: EQUAL
42781: IFTRUE 42803
42783: LD_INT 28
42785: DOUBLE
42786: EQUAL
42787: IFTRUE 42803
42789: LD_INT 29
42791: DOUBLE
42792: EQUAL
42793: IFTRUE 42803
42795: LD_INT 30
42797: DOUBLE
42798: EQUAL
42799: IFTRUE 42803
42801: GO 42859
42803: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
42804: LD_ADDR_VAR 0 9
42808: PUSH
42809: LD_VAR 0 59
42813: PUSH
42814: LD_VAR 0 60
42818: PUSH
42819: LD_VAR 0 61
42823: PUSH
42824: LD_VAR 0 62
42828: PUSH
42829: LD_VAR 0 63
42833: PUSH
42834: LD_VAR 0 64
42838: PUSH
42839: EMPTY
42840: LIST
42841: LIST
42842: LIST
42843: LIST
42844: LIST
42845: LIST
42846: PUSH
42847: LD_VAR 0 4
42851: PUSH
42852: LD_INT 1
42854: PLUS
42855: ARRAY
42856: ST_TO_ADDR
42857: GO 42860
42859: POP
// temp_list2 = [ ] ;
42860: LD_ADDR_VAR 0 10
42864: PUSH
42865: EMPTY
42866: ST_TO_ADDR
// for i in temp_list do
42867: LD_ADDR_VAR 0 8
42871: PUSH
42872: LD_VAR 0 9
42876: PUSH
42877: FOR_IN
42878: IFFALSE 42930
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
42880: LD_ADDR_VAR 0 10
42884: PUSH
42885: LD_VAR 0 10
42889: PUSH
42890: LD_VAR 0 8
42894: PUSH
42895: LD_INT 1
42897: ARRAY
42898: PUSH
42899: LD_VAR 0 2
42903: PLUS
42904: PUSH
42905: LD_VAR 0 8
42909: PUSH
42910: LD_INT 2
42912: ARRAY
42913: PUSH
42914: LD_VAR 0 3
42918: PLUS
42919: PUSH
42920: EMPTY
42921: LIST
42922: LIST
42923: PUSH
42924: EMPTY
42925: LIST
42926: ADD
42927: ST_TO_ADDR
42928: GO 42877
42930: POP
42931: POP
// result = temp_list2 ;
42932: LD_ADDR_VAR 0 7
42936: PUSH
42937: LD_VAR 0 10
42941: ST_TO_ADDR
// end ;
42942: LD_VAR 0 7
42946: RET
// export function EnemyInRange ( unit , dist ) ; begin
42947: LD_INT 0
42949: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
42950: LD_ADDR_VAR 0 3
42954: PUSH
42955: LD_VAR 0 1
42959: PPUSH
42960: CALL_OW 255
42964: PPUSH
42965: LD_VAR 0 1
42969: PPUSH
42970: CALL_OW 250
42974: PPUSH
42975: LD_VAR 0 1
42979: PPUSH
42980: CALL_OW 251
42984: PPUSH
42985: LD_VAR 0 2
42989: PPUSH
42990: CALL 16204 0 4
42994: PUSH
42995: LD_INT 4
42997: ARRAY
42998: ST_TO_ADDR
// end ;
42999: LD_VAR 0 3
43003: RET
// export function PlayerSeeMe ( unit ) ; begin
43004: LD_INT 0
43006: PPUSH
// result := See ( your_side , unit ) ;
43007: LD_ADDR_VAR 0 2
43011: PUSH
43012: LD_OWVAR 2
43016: PPUSH
43017: LD_VAR 0 1
43021: PPUSH
43022: CALL_OW 292
43026: ST_TO_ADDR
// end ;
43027: LD_VAR 0 2
43031: RET
// export function ReverseDir ( unit ) ; begin
43032: LD_INT 0
43034: PPUSH
// if not unit then
43035: LD_VAR 0 1
43039: NOT
43040: IFFALSE 43044
// exit ;
43042: GO 43067
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
43044: LD_ADDR_VAR 0 2
43048: PUSH
43049: LD_VAR 0 1
43053: PPUSH
43054: CALL_OW 254
43058: PUSH
43059: LD_INT 3
43061: PLUS
43062: PUSH
43063: LD_INT 6
43065: MOD
43066: ST_TO_ADDR
// end ;
43067: LD_VAR 0 2
43071: RET
// export function ReverseArray ( array ) ; var i ; begin
43072: LD_INT 0
43074: PPUSH
43075: PPUSH
// if not array then
43076: LD_VAR 0 1
43080: NOT
43081: IFFALSE 43085
// exit ;
43083: GO 43140
// result := [ ] ;
43085: LD_ADDR_VAR 0 2
43089: PUSH
43090: EMPTY
43091: ST_TO_ADDR
// for i := array downto 1 do
43092: LD_ADDR_VAR 0 3
43096: PUSH
43097: DOUBLE
43098: LD_VAR 0 1
43102: INC
43103: ST_TO_ADDR
43104: LD_INT 1
43106: PUSH
43107: FOR_DOWNTO
43108: IFFALSE 43138
// result := Join ( result , array [ i ] ) ;
43110: LD_ADDR_VAR 0 2
43114: PUSH
43115: LD_VAR 0 2
43119: PPUSH
43120: LD_VAR 0 1
43124: PUSH
43125: LD_VAR 0 3
43129: ARRAY
43130: PPUSH
43131: CALL 47982 0 2
43135: ST_TO_ADDR
43136: GO 43107
43138: POP
43139: POP
// end ;
43140: LD_VAR 0 2
43144: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
43145: LD_INT 0
43147: PPUSH
43148: PPUSH
43149: PPUSH
43150: PPUSH
43151: PPUSH
43152: PPUSH
// if not unit or not hexes then
43153: LD_VAR 0 1
43157: NOT
43158: IFTRUE 43167
43160: PUSH
43161: LD_VAR 0 2
43165: NOT
43166: OR
43167: IFFALSE 43171
// exit ;
43169: GO 43294
// dist := 9999 ;
43171: LD_ADDR_VAR 0 5
43175: PUSH
43176: LD_INT 9999
43178: ST_TO_ADDR
// for i = 1 to hexes do
43179: LD_ADDR_VAR 0 4
43183: PUSH
43184: DOUBLE
43185: LD_INT 1
43187: DEC
43188: ST_TO_ADDR
43189: LD_VAR 0 2
43193: PUSH
43194: FOR_TO
43195: IFFALSE 43282
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
43197: LD_ADDR_VAR 0 6
43201: PUSH
43202: LD_VAR 0 1
43206: PPUSH
43207: LD_VAR 0 2
43211: PUSH
43212: LD_VAR 0 4
43216: ARRAY
43217: PUSH
43218: LD_INT 1
43220: ARRAY
43221: PPUSH
43222: LD_VAR 0 2
43226: PUSH
43227: LD_VAR 0 4
43231: ARRAY
43232: PUSH
43233: LD_INT 2
43235: ARRAY
43236: PPUSH
43237: CALL_OW 297
43241: ST_TO_ADDR
// if tdist < dist then
43242: LD_VAR 0 6
43246: PUSH
43247: LD_VAR 0 5
43251: LESS
43252: IFFALSE 43280
// begin hex := hexes [ i ] ;
43254: LD_ADDR_VAR 0 8
43258: PUSH
43259: LD_VAR 0 2
43263: PUSH
43264: LD_VAR 0 4
43268: ARRAY
43269: ST_TO_ADDR
// dist := tdist ;
43270: LD_ADDR_VAR 0 5
43274: PUSH
43275: LD_VAR 0 6
43279: ST_TO_ADDR
// end ; end ;
43280: GO 43194
43282: POP
43283: POP
// result := hex ;
43284: LD_ADDR_VAR 0 3
43288: PUSH
43289: LD_VAR 0 8
43293: ST_TO_ADDR
// end ;
43294: LD_VAR 0 3
43298: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
43299: LD_INT 0
43301: PPUSH
43302: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
43303: LD_VAR 0 1
43307: NOT
43308: IFTRUE 43347
43310: PUSH
43311: LD_VAR 0 1
43315: PUSH
43316: LD_INT 21
43318: PUSH
43319: LD_INT 2
43321: PUSH
43322: EMPTY
43323: LIST
43324: LIST
43325: PUSH
43326: LD_INT 23
43328: PUSH
43329: LD_INT 2
43331: PUSH
43332: EMPTY
43333: LIST
43334: LIST
43335: PUSH
43336: EMPTY
43337: LIST
43338: LIST
43339: PPUSH
43340: CALL_OW 69
43344: IN
43345: NOT
43346: OR
43347: IFFALSE 43351
// exit ;
43349: GO 43398
// for i = 1 to 3 do
43351: LD_ADDR_VAR 0 3
43355: PUSH
43356: DOUBLE
43357: LD_INT 1
43359: DEC
43360: ST_TO_ADDR
43361: LD_INT 3
43363: PUSH
43364: FOR_TO
43365: IFFALSE 43396
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
43367: LD_VAR 0 1
43371: PPUSH
43372: CALL_OW 250
43376: PPUSH
43377: LD_VAR 0 1
43381: PPUSH
43382: CALL_OW 251
43386: PPUSH
43387: LD_INT 1
43389: PPUSH
43390: CALL_OW 453
43394: GO 43364
43396: POP
43397: POP
// end ;
43398: LD_VAR 0 2
43402: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
43403: LD_INT 0
43405: PPUSH
43406: PPUSH
43407: PPUSH
43408: PPUSH
43409: PPUSH
43410: PPUSH
// if not unit or not enemy_unit then
43411: LD_VAR 0 1
43415: NOT
43416: IFTRUE 43425
43418: PUSH
43419: LD_VAR 0 2
43423: NOT
43424: OR
43425: IFFALSE 43429
// exit ;
43427: GO 43900
// if GetLives ( i ) < 250 then
43429: LD_VAR 0 4
43433: PPUSH
43434: CALL_OW 256
43438: PUSH
43439: LD_INT 250
43441: LESS
43442: IFFALSE 43455
// begin ComAutodestruct ( i ) ;
43444: LD_VAR 0 4
43448: PPUSH
43449: CALL 43299 0 1
// exit ;
43453: GO 43900
// end ; x := GetX ( enemy_unit ) ;
43455: LD_ADDR_VAR 0 7
43459: PUSH
43460: LD_VAR 0 2
43464: PPUSH
43465: CALL_OW 250
43469: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
43470: LD_ADDR_VAR 0 8
43474: PUSH
43475: LD_VAR 0 2
43479: PPUSH
43480: CALL_OW 251
43484: ST_TO_ADDR
// if not x or not y then
43485: LD_VAR 0 7
43489: NOT
43490: IFTRUE 43499
43492: PUSH
43493: LD_VAR 0 8
43497: NOT
43498: OR
43499: IFFALSE 43503
// exit ;
43501: GO 43900
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
43503: LD_ADDR_VAR 0 6
43507: PUSH
43508: LD_VAR 0 7
43512: PPUSH
43513: LD_INT 0
43515: PPUSH
43516: LD_INT 4
43518: PPUSH
43519: CALL_OW 272
43523: PUSH
43524: LD_VAR 0 8
43528: PPUSH
43529: LD_INT 0
43531: PPUSH
43532: LD_INT 4
43534: PPUSH
43535: CALL_OW 273
43539: PUSH
43540: EMPTY
43541: LIST
43542: LIST
43543: PUSH
43544: LD_VAR 0 7
43548: PPUSH
43549: LD_INT 1
43551: PPUSH
43552: LD_INT 4
43554: PPUSH
43555: CALL_OW 272
43559: PUSH
43560: LD_VAR 0 8
43564: PPUSH
43565: LD_INT 1
43567: PPUSH
43568: LD_INT 4
43570: PPUSH
43571: CALL_OW 273
43575: PUSH
43576: EMPTY
43577: LIST
43578: LIST
43579: PUSH
43580: LD_VAR 0 7
43584: PPUSH
43585: LD_INT 2
43587: PPUSH
43588: LD_INT 4
43590: PPUSH
43591: CALL_OW 272
43595: PUSH
43596: LD_VAR 0 8
43600: PPUSH
43601: LD_INT 2
43603: PPUSH
43604: LD_INT 4
43606: PPUSH
43607: CALL_OW 273
43611: PUSH
43612: EMPTY
43613: LIST
43614: LIST
43615: PUSH
43616: LD_VAR 0 7
43620: PPUSH
43621: LD_INT 3
43623: PPUSH
43624: LD_INT 4
43626: PPUSH
43627: CALL_OW 272
43631: PUSH
43632: LD_VAR 0 8
43636: PPUSH
43637: LD_INT 3
43639: PPUSH
43640: LD_INT 4
43642: PPUSH
43643: CALL_OW 273
43647: PUSH
43648: EMPTY
43649: LIST
43650: LIST
43651: PUSH
43652: LD_VAR 0 7
43656: PPUSH
43657: LD_INT 4
43659: PPUSH
43660: LD_INT 4
43662: PPUSH
43663: CALL_OW 272
43667: PUSH
43668: LD_VAR 0 8
43672: PPUSH
43673: LD_INT 4
43675: PPUSH
43676: LD_INT 4
43678: PPUSH
43679: CALL_OW 273
43683: PUSH
43684: EMPTY
43685: LIST
43686: LIST
43687: PUSH
43688: LD_VAR 0 7
43692: PPUSH
43693: LD_INT 5
43695: PPUSH
43696: LD_INT 4
43698: PPUSH
43699: CALL_OW 272
43703: PUSH
43704: LD_VAR 0 8
43708: PPUSH
43709: LD_INT 5
43711: PPUSH
43712: LD_INT 4
43714: PPUSH
43715: CALL_OW 273
43719: PUSH
43720: EMPTY
43721: LIST
43722: LIST
43723: PUSH
43724: EMPTY
43725: LIST
43726: LIST
43727: LIST
43728: LIST
43729: LIST
43730: LIST
43731: ST_TO_ADDR
// for i = tmp downto 1 do
43732: LD_ADDR_VAR 0 4
43736: PUSH
43737: DOUBLE
43738: LD_VAR 0 6
43742: INC
43743: ST_TO_ADDR
43744: LD_INT 1
43746: PUSH
43747: FOR_DOWNTO
43748: IFFALSE 43851
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
43750: LD_VAR 0 6
43754: PUSH
43755: LD_VAR 0 4
43759: ARRAY
43760: PUSH
43761: LD_INT 1
43763: ARRAY
43764: PPUSH
43765: LD_VAR 0 6
43769: PUSH
43770: LD_VAR 0 4
43774: ARRAY
43775: PUSH
43776: LD_INT 2
43778: ARRAY
43779: PPUSH
43780: CALL_OW 488
43784: NOT
43785: IFTRUE 43827
43787: PUSH
43788: LD_VAR 0 6
43792: PUSH
43793: LD_VAR 0 4
43797: ARRAY
43798: PUSH
43799: LD_INT 1
43801: ARRAY
43802: PPUSH
43803: LD_VAR 0 6
43807: PUSH
43808: LD_VAR 0 4
43812: ARRAY
43813: PUSH
43814: LD_INT 2
43816: ARRAY
43817: PPUSH
43818: CALL_OW 428
43822: PUSH
43823: LD_INT 0
43825: NONEQUAL
43826: OR
43827: IFFALSE 43849
// tmp := Delete ( tmp , i ) ;
43829: LD_ADDR_VAR 0 6
43833: PUSH
43834: LD_VAR 0 6
43838: PPUSH
43839: LD_VAR 0 4
43843: PPUSH
43844: CALL_OW 3
43848: ST_TO_ADDR
43849: GO 43747
43851: POP
43852: POP
// j := GetClosestHex ( unit , tmp ) ;
43853: LD_ADDR_VAR 0 5
43857: PUSH
43858: LD_VAR 0 1
43862: PPUSH
43863: LD_VAR 0 6
43867: PPUSH
43868: CALL 43145 0 2
43872: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
43873: LD_VAR 0 1
43877: PPUSH
43878: LD_VAR 0 5
43882: PUSH
43883: LD_INT 1
43885: ARRAY
43886: PPUSH
43887: LD_VAR 0 5
43891: PUSH
43892: LD_INT 2
43894: ARRAY
43895: PPUSH
43896: CALL_OW 111
// end ;
43900: LD_VAR 0 3
43904: RET
// export function PrepareApemanSoldier ( ) ; begin
43905: LD_INT 0
43907: PPUSH
// uc_nation := 0 ;
43908: LD_ADDR_OWVAR 21
43912: PUSH
43913: LD_INT 0
43915: ST_TO_ADDR
// hc_sex := sex_male ;
43916: LD_ADDR_OWVAR 27
43920: PUSH
43921: LD_INT 1
43923: ST_TO_ADDR
// hc_name :=  ;
43924: LD_ADDR_OWVAR 26
43928: PUSH
43929: LD_STRING 
43931: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
43932: LD_ADDR_OWVAR 28
43936: PUSH
43937: LD_INT 15
43939: ST_TO_ADDR
// hc_gallery :=  ;
43940: LD_ADDR_OWVAR 33
43944: PUSH
43945: LD_STRING 
43947: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
43948: LD_ADDR_OWVAR 31
43952: PUSH
43953: LD_INT 0
43955: PPUSH
43956: LD_INT 3
43958: PPUSH
43959: CALL_OW 12
43963: PUSH
43964: LD_INT 0
43966: PPUSH
43967: LD_INT 3
43969: PPUSH
43970: CALL_OW 12
43974: PUSH
43975: LD_INT 0
43977: PUSH
43978: LD_INT 0
43980: PUSH
43981: EMPTY
43982: LIST
43983: LIST
43984: LIST
43985: LIST
43986: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
43987: LD_ADDR_OWVAR 29
43991: PUSH
43992: LD_INT 12
43994: PUSH
43995: LD_INT 12
43997: PUSH
43998: EMPTY
43999: LIST
44000: LIST
44001: ST_TO_ADDR
// end ;
44002: LD_VAR 0 1
44006: RET
// export function PrepareApemanEngineer ( ) ; begin
44007: LD_INT 0
44009: PPUSH
// uc_nation := 0 ;
44010: LD_ADDR_OWVAR 21
44014: PUSH
44015: LD_INT 0
44017: ST_TO_ADDR
// hc_sex := sex_male ;
44018: LD_ADDR_OWVAR 27
44022: PUSH
44023: LD_INT 1
44025: ST_TO_ADDR
// hc_name :=  ;
44026: LD_ADDR_OWVAR 26
44030: PUSH
44031: LD_STRING 
44033: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
44034: LD_ADDR_OWVAR 28
44038: PUSH
44039: LD_INT 16
44041: ST_TO_ADDR
// hc_gallery :=  ;
44042: LD_ADDR_OWVAR 33
44046: PUSH
44047: LD_STRING 
44049: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
44050: LD_ADDR_OWVAR 31
44054: PUSH
44055: LD_INT 0
44057: PPUSH
44058: LD_INT 3
44060: PPUSH
44061: CALL_OW 12
44065: PUSH
44066: LD_INT 0
44068: PPUSH
44069: LD_INT 3
44071: PPUSH
44072: CALL_OW 12
44076: PUSH
44077: LD_INT 0
44079: PUSH
44080: LD_INT 0
44082: PUSH
44083: EMPTY
44084: LIST
44085: LIST
44086: LIST
44087: LIST
44088: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
44089: LD_ADDR_OWVAR 29
44093: PUSH
44094: LD_INT 12
44096: PUSH
44097: LD_INT 12
44099: PUSH
44100: EMPTY
44101: LIST
44102: LIST
44103: ST_TO_ADDR
// end ;
44104: LD_VAR 0 1
44108: RET
// export function PrepareApeman ( agressivity ) ; begin
44109: LD_INT 0
44111: PPUSH
// uc_side := 0 ;
44112: LD_ADDR_OWVAR 20
44116: PUSH
44117: LD_INT 0
44119: ST_TO_ADDR
// uc_nation := 0 ;
44120: LD_ADDR_OWVAR 21
44124: PUSH
44125: LD_INT 0
44127: ST_TO_ADDR
// hc_sex := sex_male ;
44128: LD_ADDR_OWVAR 27
44132: PUSH
44133: LD_INT 1
44135: ST_TO_ADDR
// hc_class := class_apeman ;
44136: LD_ADDR_OWVAR 28
44140: PUSH
44141: LD_INT 12
44143: ST_TO_ADDR
// hc_gallery :=  ;
44144: LD_ADDR_OWVAR 33
44148: PUSH
44149: LD_STRING 
44151: ST_TO_ADDR
// hc_name :=  ;
44152: LD_ADDR_OWVAR 26
44156: PUSH
44157: LD_STRING 
44159: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
44160: LD_ADDR_OWVAR 29
44164: PUSH
44165: LD_INT 12
44167: PUSH
44168: LD_INT 12
44170: PUSH
44171: EMPTY
44172: LIST
44173: LIST
44174: ST_TO_ADDR
// if agressivity = 0 then
44175: LD_VAR 0 1
44179: PUSH
44180: LD_INT 0
44182: EQUAL
44183: IFFALSE 44195
// hc_agressivity := 0 else
44185: LD_ADDR_OWVAR 35
44189: PUSH
44190: LD_INT 0
44192: ST_TO_ADDR
44193: GO 44216
// hc_agressivity := rand ( - agressivity , agressivity ) ;
44195: LD_ADDR_OWVAR 35
44199: PUSH
44200: LD_VAR 0 1
44204: NEG
44205: PPUSH
44206: LD_VAR 0 1
44210: PPUSH
44211: CALL_OW 12
44215: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
44216: LD_ADDR_OWVAR 31
44220: PUSH
44221: LD_INT 0
44223: PPUSH
44224: LD_INT 3
44226: PPUSH
44227: CALL_OW 12
44231: PUSH
44232: LD_INT 0
44234: PPUSH
44235: LD_INT 3
44237: PPUSH
44238: CALL_OW 12
44242: PUSH
44243: LD_INT 0
44245: PUSH
44246: LD_INT 0
44248: PUSH
44249: EMPTY
44250: LIST
44251: LIST
44252: LIST
44253: LIST
44254: ST_TO_ADDR
// end ;
44255: LD_VAR 0 2
44259: RET
// export function PrepareTiger ( agressivity ) ; begin
44260: LD_INT 0
44262: PPUSH
// uc_side := 0 ;
44263: LD_ADDR_OWVAR 20
44267: PUSH
44268: LD_INT 0
44270: ST_TO_ADDR
// uc_nation := 0 ;
44271: LD_ADDR_OWVAR 21
44275: PUSH
44276: LD_INT 0
44278: ST_TO_ADDR
// InitHc ;
44279: CALL_OW 19
// hc_class := class_tiger ;
44283: LD_ADDR_OWVAR 28
44287: PUSH
44288: LD_INT 14
44290: ST_TO_ADDR
// hc_gallery :=  ;
44291: LD_ADDR_OWVAR 33
44295: PUSH
44296: LD_STRING 
44298: ST_TO_ADDR
// hc_name :=  ;
44299: LD_ADDR_OWVAR 26
44303: PUSH
44304: LD_STRING 
44306: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
44307: LD_ADDR_OWVAR 35
44311: PUSH
44312: LD_VAR 0 1
44316: NEG
44317: PPUSH
44318: LD_VAR 0 1
44322: PPUSH
44323: CALL_OW 12
44327: ST_TO_ADDR
// end ;
44328: LD_VAR 0 2
44332: RET
// export function PrepareEnchidna ( ) ; begin
44333: LD_INT 0
44335: PPUSH
// uc_side := 0 ;
44336: LD_ADDR_OWVAR 20
44340: PUSH
44341: LD_INT 0
44343: ST_TO_ADDR
// uc_nation := 0 ;
44344: LD_ADDR_OWVAR 21
44348: PUSH
44349: LD_INT 0
44351: ST_TO_ADDR
// InitHc ;
44352: CALL_OW 19
// hc_class := class_baggie ;
44356: LD_ADDR_OWVAR 28
44360: PUSH
44361: LD_INT 13
44363: ST_TO_ADDR
// hc_gallery :=  ;
44364: LD_ADDR_OWVAR 33
44368: PUSH
44369: LD_STRING 
44371: ST_TO_ADDR
// hc_name :=  ;
44372: LD_ADDR_OWVAR 26
44376: PUSH
44377: LD_STRING 
44379: ST_TO_ADDR
// end ;
44380: LD_VAR 0 1
44384: RET
// export function PrepareFrog ( ) ; begin
44385: LD_INT 0
44387: PPUSH
// uc_side := 0 ;
44388: LD_ADDR_OWVAR 20
44392: PUSH
44393: LD_INT 0
44395: ST_TO_ADDR
// uc_nation := 0 ;
44396: LD_ADDR_OWVAR 21
44400: PUSH
44401: LD_INT 0
44403: ST_TO_ADDR
// InitHc ;
44404: CALL_OW 19
// hc_class := class_frog ;
44408: LD_ADDR_OWVAR 28
44412: PUSH
44413: LD_INT 19
44415: ST_TO_ADDR
// hc_gallery :=  ;
44416: LD_ADDR_OWVAR 33
44420: PUSH
44421: LD_STRING 
44423: ST_TO_ADDR
// hc_name :=  ;
44424: LD_ADDR_OWVAR 26
44428: PUSH
44429: LD_STRING 
44431: ST_TO_ADDR
// end ;
44432: LD_VAR 0 1
44436: RET
// export function PrepareFish ( ) ; begin
44437: LD_INT 0
44439: PPUSH
// uc_side := 0 ;
44440: LD_ADDR_OWVAR 20
44444: PUSH
44445: LD_INT 0
44447: ST_TO_ADDR
// uc_nation := 0 ;
44448: LD_ADDR_OWVAR 21
44452: PUSH
44453: LD_INT 0
44455: ST_TO_ADDR
// InitHc ;
44456: CALL_OW 19
// hc_class := class_fish ;
44460: LD_ADDR_OWVAR 28
44464: PUSH
44465: LD_INT 20
44467: ST_TO_ADDR
// hc_gallery :=  ;
44468: LD_ADDR_OWVAR 33
44472: PUSH
44473: LD_STRING 
44475: ST_TO_ADDR
// hc_name :=  ;
44476: LD_ADDR_OWVAR 26
44480: PUSH
44481: LD_STRING 
44483: ST_TO_ADDR
// end ;
44484: LD_VAR 0 1
44488: RET
// export function PrepareBird ( ) ; begin
44489: LD_INT 0
44491: PPUSH
// uc_side := 0 ;
44492: LD_ADDR_OWVAR 20
44496: PUSH
44497: LD_INT 0
44499: ST_TO_ADDR
// uc_nation := 0 ;
44500: LD_ADDR_OWVAR 21
44504: PUSH
44505: LD_INT 0
44507: ST_TO_ADDR
// InitHc ;
44508: CALL_OW 19
// hc_class := class_phororhacos ;
44512: LD_ADDR_OWVAR 28
44516: PUSH
44517: LD_INT 18
44519: ST_TO_ADDR
// hc_gallery :=  ;
44520: LD_ADDR_OWVAR 33
44524: PUSH
44525: LD_STRING 
44527: ST_TO_ADDR
// hc_name :=  ;
44528: LD_ADDR_OWVAR 26
44532: PUSH
44533: LD_STRING 
44535: ST_TO_ADDR
// end ;
44536: LD_VAR 0 1
44540: RET
// export function PrepareHorse ( ) ; begin
44541: LD_INT 0
44543: PPUSH
// uc_side := 0 ;
44544: LD_ADDR_OWVAR 20
44548: PUSH
44549: LD_INT 0
44551: ST_TO_ADDR
// uc_nation := 0 ;
44552: LD_ADDR_OWVAR 21
44556: PUSH
44557: LD_INT 0
44559: ST_TO_ADDR
// InitHc ;
44560: CALL_OW 19
// hc_class := class_horse ;
44564: LD_ADDR_OWVAR 28
44568: PUSH
44569: LD_INT 21
44571: ST_TO_ADDR
// hc_gallery :=  ;
44572: LD_ADDR_OWVAR 33
44576: PUSH
44577: LD_STRING 
44579: ST_TO_ADDR
// hc_name :=  ;
44580: LD_ADDR_OWVAR 26
44584: PUSH
44585: LD_STRING 
44587: ST_TO_ADDR
// end ;
44588: LD_VAR 0 1
44592: RET
// export function PrepareMastodont ( ) ; begin
44593: LD_INT 0
44595: PPUSH
// uc_side := 0 ;
44596: LD_ADDR_OWVAR 20
44600: PUSH
44601: LD_INT 0
44603: ST_TO_ADDR
// uc_nation := 0 ;
44604: LD_ADDR_OWVAR 21
44608: PUSH
44609: LD_INT 0
44611: ST_TO_ADDR
// vc_chassis := class_mastodont ;
44612: LD_ADDR_OWVAR 37
44616: PUSH
44617: LD_INT 31
44619: ST_TO_ADDR
// vc_control := control_rider ;
44620: LD_ADDR_OWVAR 38
44624: PUSH
44625: LD_INT 4
44627: ST_TO_ADDR
// end ;
44628: LD_VAR 0 1
44632: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
44633: LD_INT 0
44635: PPUSH
44636: PPUSH
44637: PPUSH
// uc_side = 0 ;
44638: LD_ADDR_OWVAR 20
44642: PUSH
44643: LD_INT 0
44645: ST_TO_ADDR
// uc_nation = 0 ;
44646: LD_ADDR_OWVAR 21
44650: PUSH
44651: LD_INT 0
44653: ST_TO_ADDR
// InitHc_All ( ) ;
44654: CALL_OW 584
// InitVc ;
44658: CALL_OW 20
// if mastodonts then
44662: LD_VAR 0 6
44666: IFFALSE 44733
// for i = 1 to mastodonts do
44668: LD_ADDR_VAR 0 11
44672: PUSH
44673: DOUBLE
44674: LD_INT 1
44676: DEC
44677: ST_TO_ADDR
44678: LD_VAR 0 6
44682: PUSH
44683: FOR_TO
44684: IFFALSE 44731
// begin vc_chassis := 31 ;
44686: LD_ADDR_OWVAR 37
44690: PUSH
44691: LD_INT 31
44693: ST_TO_ADDR
// vc_control := control_rider ;
44694: LD_ADDR_OWVAR 38
44698: PUSH
44699: LD_INT 4
44701: ST_TO_ADDR
// animal := CreateVehicle ;
44702: LD_ADDR_VAR 0 12
44706: PUSH
44707: CALL_OW 45
44711: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
44712: LD_VAR 0 12
44716: PPUSH
44717: LD_VAR 0 8
44721: PPUSH
44722: LD_INT 0
44724: PPUSH
44725: CALL 46875 0 3
// end ;
44729: GO 44683
44731: POP
44732: POP
// if horses then
44733: LD_VAR 0 5
44737: IFFALSE 44804
// for i = 1 to horses do
44739: LD_ADDR_VAR 0 11
44743: PUSH
44744: DOUBLE
44745: LD_INT 1
44747: DEC
44748: ST_TO_ADDR
44749: LD_VAR 0 5
44753: PUSH
44754: FOR_TO
44755: IFFALSE 44802
// begin hc_class := 21 ;
44757: LD_ADDR_OWVAR 28
44761: PUSH
44762: LD_INT 21
44764: ST_TO_ADDR
// hc_gallery :=  ;
44765: LD_ADDR_OWVAR 33
44769: PUSH
44770: LD_STRING 
44772: ST_TO_ADDR
// animal := CreateHuman ;
44773: LD_ADDR_VAR 0 12
44777: PUSH
44778: CALL_OW 44
44782: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
44783: LD_VAR 0 12
44787: PPUSH
44788: LD_VAR 0 8
44792: PPUSH
44793: LD_INT 0
44795: PPUSH
44796: CALL 46875 0 3
// end ;
44800: GO 44754
44802: POP
44803: POP
// if birds then
44804: LD_VAR 0 1
44808: IFFALSE 44875
// for i = 1 to birds do
44810: LD_ADDR_VAR 0 11
44814: PUSH
44815: DOUBLE
44816: LD_INT 1
44818: DEC
44819: ST_TO_ADDR
44820: LD_VAR 0 1
44824: PUSH
44825: FOR_TO
44826: IFFALSE 44873
// begin hc_class := 18 ;
44828: LD_ADDR_OWVAR 28
44832: PUSH
44833: LD_INT 18
44835: ST_TO_ADDR
// hc_gallery =  ;
44836: LD_ADDR_OWVAR 33
44840: PUSH
44841: LD_STRING 
44843: ST_TO_ADDR
// animal := CreateHuman ;
44844: LD_ADDR_VAR 0 12
44848: PUSH
44849: CALL_OW 44
44853: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
44854: LD_VAR 0 12
44858: PPUSH
44859: LD_VAR 0 8
44863: PPUSH
44864: LD_INT 0
44866: PPUSH
44867: CALL 46875 0 3
// end ;
44871: GO 44825
44873: POP
44874: POP
// if tigers then
44875: LD_VAR 0 2
44879: IFFALSE 44963
// for i = 1 to tigers do
44881: LD_ADDR_VAR 0 11
44885: PUSH
44886: DOUBLE
44887: LD_INT 1
44889: DEC
44890: ST_TO_ADDR
44891: LD_VAR 0 2
44895: PUSH
44896: FOR_TO
44897: IFFALSE 44961
// begin hc_class = class_tiger ;
44899: LD_ADDR_OWVAR 28
44903: PUSH
44904: LD_INT 14
44906: ST_TO_ADDR
// hc_gallery =  ;
44907: LD_ADDR_OWVAR 33
44911: PUSH
44912: LD_STRING 
44914: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
44915: LD_ADDR_OWVAR 35
44919: PUSH
44920: LD_INT 7
44922: NEG
44923: PPUSH
44924: LD_INT 7
44926: PPUSH
44927: CALL_OW 12
44931: ST_TO_ADDR
// animal := CreateHuman ;
44932: LD_ADDR_VAR 0 12
44936: PUSH
44937: CALL_OW 44
44941: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
44942: LD_VAR 0 12
44946: PPUSH
44947: LD_VAR 0 8
44951: PPUSH
44952: LD_INT 0
44954: PPUSH
44955: CALL 46875 0 3
// end ;
44959: GO 44896
44961: POP
44962: POP
// if apemans then
44963: LD_VAR 0 3
44967: IFFALSE 45090
// for i = 1 to apemans do
44969: LD_ADDR_VAR 0 11
44973: PUSH
44974: DOUBLE
44975: LD_INT 1
44977: DEC
44978: ST_TO_ADDR
44979: LD_VAR 0 3
44983: PUSH
44984: FOR_TO
44985: IFFALSE 45088
// begin hc_class = class_apeman ;
44987: LD_ADDR_OWVAR 28
44991: PUSH
44992: LD_INT 12
44994: ST_TO_ADDR
// hc_gallery =  ;
44995: LD_ADDR_OWVAR 33
44999: PUSH
45000: LD_STRING 
45002: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
45003: LD_ADDR_OWVAR 35
45007: PUSH
45008: LD_INT 2
45010: NEG
45011: PPUSH
45012: LD_INT 2
45014: PPUSH
45015: CALL_OW 12
45019: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
45020: LD_ADDR_OWVAR 31
45024: PUSH
45025: LD_INT 1
45027: PPUSH
45028: LD_INT 3
45030: PPUSH
45031: CALL_OW 12
45035: PUSH
45036: LD_INT 1
45038: PPUSH
45039: LD_INT 3
45041: PPUSH
45042: CALL_OW 12
45046: PUSH
45047: LD_INT 0
45049: PUSH
45050: LD_INT 0
45052: PUSH
45053: EMPTY
45054: LIST
45055: LIST
45056: LIST
45057: LIST
45058: ST_TO_ADDR
// animal := CreateHuman ;
45059: LD_ADDR_VAR 0 12
45063: PUSH
45064: CALL_OW 44
45068: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
45069: LD_VAR 0 12
45073: PPUSH
45074: LD_VAR 0 8
45078: PPUSH
45079: LD_INT 0
45081: PPUSH
45082: CALL 46875 0 3
// end ;
45086: GO 44984
45088: POP
45089: POP
// if enchidnas then
45090: LD_VAR 0 4
45094: IFFALSE 45161
// for i = 1 to enchidnas do
45096: LD_ADDR_VAR 0 11
45100: PUSH
45101: DOUBLE
45102: LD_INT 1
45104: DEC
45105: ST_TO_ADDR
45106: LD_VAR 0 4
45110: PUSH
45111: FOR_TO
45112: IFFALSE 45159
// begin hc_class = 13 ;
45114: LD_ADDR_OWVAR 28
45118: PUSH
45119: LD_INT 13
45121: ST_TO_ADDR
// hc_gallery =  ;
45122: LD_ADDR_OWVAR 33
45126: PUSH
45127: LD_STRING 
45129: ST_TO_ADDR
// animal := CreateHuman ;
45130: LD_ADDR_VAR 0 12
45134: PUSH
45135: CALL_OW 44
45139: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
45140: LD_VAR 0 12
45144: PPUSH
45145: LD_VAR 0 8
45149: PPUSH
45150: LD_INT 0
45152: PPUSH
45153: CALL 46875 0 3
// end ;
45157: GO 45111
45159: POP
45160: POP
// if fishes then
45161: LD_VAR 0 7
45165: IFFALSE 45232
// for i = 1 to fishes do
45167: LD_ADDR_VAR 0 11
45171: PUSH
45172: DOUBLE
45173: LD_INT 1
45175: DEC
45176: ST_TO_ADDR
45177: LD_VAR 0 7
45181: PUSH
45182: FOR_TO
45183: IFFALSE 45230
// begin hc_class = 20 ;
45185: LD_ADDR_OWVAR 28
45189: PUSH
45190: LD_INT 20
45192: ST_TO_ADDR
// hc_gallery =  ;
45193: LD_ADDR_OWVAR 33
45197: PUSH
45198: LD_STRING 
45200: ST_TO_ADDR
// animal := CreateHuman ;
45201: LD_ADDR_VAR 0 12
45205: PUSH
45206: CALL_OW 44
45210: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
45211: LD_VAR 0 12
45215: PPUSH
45216: LD_VAR 0 9
45220: PPUSH
45221: LD_INT 0
45223: PPUSH
45224: CALL 46875 0 3
// end ;
45228: GO 45182
45230: POP
45231: POP
// end ;
45232: LD_VAR 0 10
45236: RET
// export function WantHeal ( sci , unit ) ; begin
45237: LD_INT 0
45239: PPUSH
// if GetTaskList ( sci ) > 0 then
45240: LD_VAR 0 1
45244: PPUSH
45245: CALL_OW 437
45249: PUSH
45250: LD_INT 0
45252: GREATER
45253: IFFALSE 45325
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
45255: LD_VAR 0 1
45259: PPUSH
45260: CALL_OW 437
45264: PUSH
45265: LD_INT 1
45267: ARRAY
45268: PUSH
45269: LD_INT 1
45271: ARRAY
45272: PUSH
45273: LD_STRING l
45275: EQUAL
45276: IFFALSE 45303
45278: PUSH
45279: LD_VAR 0 1
45283: PPUSH
45284: CALL_OW 437
45288: PUSH
45289: LD_INT 1
45291: ARRAY
45292: PUSH
45293: LD_INT 4
45295: ARRAY
45296: PUSH
45297: LD_VAR 0 2
45301: EQUAL
45302: AND
45303: IFFALSE 45315
// result := true else
45305: LD_ADDR_VAR 0 3
45309: PUSH
45310: LD_INT 1
45312: ST_TO_ADDR
45313: GO 45323
// result := false ;
45315: LD_ADDR_VAR 0 3
45319: PUSH
45320: LD_INT 0
45322: ST_TO_ADDR
// end else
45323: GO 45333
// result := false ;
45325: LD_ADDR_VAR 0 3
45329: PUSH
45330: LD_INT 0
45332: ST_TO_ADDR
// end ;
45333: LD_VAR 0 3
45337: RET
// export function HealTarget ( sci ) ; begin
45338: LD_INT 0
45340: PPUSH
// if not sci then
45341: LD_VAR 0 1
45345: NOT
45346: IFFALSE 45350
// exit ;
45348: GO 45415
// result := 0 ;
45350: LD_ADDR_VAR 0 2
45354: PUSH
45355: LD_INT 0
45357: ST_TO_ADDR
// if GetTaskList ( sci ) then
45358: LD_VAR 0 1
45362: PPUSH
45363: CALL_OW 437
45367: IFFALSE 45415
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
45369: LD_VAR 0 1
45373: PPUSH
45374: CALL_OW 437
45378: PUSH
45379: LD_INT 1
45381: ARRAY
45382: PUSH
45383: LD_INT 1
45385: ARRAY
45386: PUSH
45387: LD_STRING l
45389: EQUAL
45390: IFFALSE 45415
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
45392: LD_ADDR_VAR 0 2
45396: PUSH
45397: LD_VAR 0 1
45401: PPUSH
45402: CALL_OW 437
45406: PUSH
45407: LD_INT 1
45409: ARRAY
45410: PUSH
45411: LD_INT 4
45413: ARRAY
45414: ST_TO_ADDR
// end ;
45415: LD_VAR 0 2
45419: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
45420: LD_INT 0
45422: PPUSH
45423: PPUSH
45424: PPUSH
45425: PPUSH
// if not base_units then
45426: LD_VAR 0 1
45430: NOT
45431: IFFALSE 45435
// exit ;
45433: GO 45522
// result := false ;
45435: LD_ADDR_VAR 0 2
45439: PUSH
45440: LD_INT 0
45442: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
45443: LD_ADDR_VAR 0 5
45447: PUSH
45448: LD_VAR 0 1
45452: PPUSH
45453: LD_INT 21
45455: PUSH
45456: LD_INT 3
45458: PUSH
45459: EMPTY
45460: LIST
45461: LIST
45462: PPUSH
45463: CALL_OW 72
45467: ST_TO_ADDR
// if not tmp then
45468: LD_VAR 0 5
45472: NOT
45473: IFFALSE 45477
// exit ;
45475: GO 45522
// for i in tmp do
45477: LD_ADDR_VAR 0 3
45481: PUSH
45482: LD_VAR 0 5
45486: PUSH
45487: FOR_IN
45488: IFFALSE 45520
// begin result := EnemyInRange ( i , 22 ) ;
45490: LD_ADDR_VAR 0 2
45494: PUSH
45495: LD_VAR 0 3
45499: PPUSH
45500: LD_INT 22
45502: PPUSH
45503: CALL 42947 0 2
45507: ST_TO_ADDR
// if result then
45508: LD_VAR 0 2
45512: IFFALSE 45518
// exit ;
45514: POP
45515: POP
45516: GO 45522
// end ;
45518: GO 45487
45520: POP
45521: POP
// end ;
45522: LD_VAR 0 2
45526: RET
// export function FilterByTag ( units , tag ) ; begin
45527: LD_INT 0
45529: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
45530: LD_ADDR_VAR 0 3
45534: PUSH
45535: LD_VAR 0 1
45539: PPUSH
45540: LD_INT 120
45542: PUSH
45543: LD_VAR 0 2
45547: PUSH
45548: EMPTY
45549: LIST
45550: LIST
45551: PPUSH
45552: CALL_OW 72
45556: ST_TO_ADDR
// end ;
45557: LD_VAR 0 3
45561: RET
// export function IsDriver ( un ) ; begin
45562: LD_INT 0
45564: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
45565: LD_ADDR_VAR 0 2
45569: PUSH
45570: LD_VAR 0 1
45574: PUSH
45575: LD_INT 55
45577: PUSH
45578: EMPTY
45579: LIST
45580: PPUSH
45581: CALL_OW 69
45585: IN
45586: ST_TO_ADDR
// end ;
45587: LD_VAR 0 2
45591: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
45592: LD_INT 0
45594: PPUSH
45595: PPUSH
// list := [ ] ;
45596: LD_ADDR_VAR 0 5
45600: PUSH
45601: EMPTY
45602: ST_TO_ADDR
// case d of 0 :
45603: LD_VAR 0 3
45607: PUSH
45608: LD_INT 0
45610: DOUBLE
45611: EQUAL
45612: IFTRUE 45616
45614: GO 45749
45616: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
45617: LD_ADDR_VAR 0 5
45621: PUSH
45622: LD_VAR 0 1
45626: PUSH
45627: LD_INT 4
45629: MINUS
45630: PUSH
45631: LD_VAR 0 2
45635: PUSH
45636: LD_INT 4
45638: MINUS
45639: PUSH
45640: LD_INT 2
45642: PUSH
45643: EMPTY
45644: LIST
45645: LIST
45646: LIST
45647: PUSH
45648: LD_VAR 0 1
45652: PUSH
45653: LD_INT 3
45655: MINUS
45656: PUSH
45657: LD_VAR 0 2
45661: PUSH
45662: LD_INT 1
45664: PUSH
45665: EMPTY
45666: LIST
45667: LIST
45668: LIST
45669: PUSH
45670: LD_VAR 0 1
45674: PUSH
45675: LD_INT 4
45677: PLUS
45678: PUSH
45679: LD_VAR 0 2
45683: PUSH
45684: LD_INT 4
45686: PUSH
45687: EMPTY
45688: LIST
45689: LIST
45690: LIST
45691: PUSH
45692: LD_VAR 0 1
45696: PUSH
45697: LD_INT 3
45699: PLUS
45700: PUSH
45701: LD_VAR 0 2
45705: PUSH
45706: LD_INT 3
45708: PLUS
45709: PUSH
45710: LD_INT 5
45712: PUSH
45713: EMPTY
45714: LIST
45715: LIST
45716: LIST
45717: PUSH
45718: LD_VAR 0 1
45722: PUSH
45723: LD_VAR 0 2
45727: PUSH
45728: LD_INT 4
45730: PLUS
45731: PUSH
45732: LD_INT 0
45734: PUSH
45735: EMPTY
45736: LIST
45737: LIST
45738: LIST
45739: PUSH
45740: EMPTY
45741: LIST
45742: LIST
45743: LIST
45744: LIST
45745: LIST
45746: ST_TO_ADDR
// end ; 1 :
45747: GO 46447
45749: LD_INT 1
45751: DOUBLE
45752: EQUAL
45753: IFTRUE 45757
45755: GO 45890
45757: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
45758: LD_ADDR_VAR 0 5
45762: PUSH
45763: LD_VAR 0 1
45767: PUSH
45768: LD_VAR 0 2
45772: PUSH
45773: LD_INT 4
45775: MINUS
45776: PUSH
45777: LD_INT 3
45779: PUSH
45780: EMPTY
45781: LIST
45782: LIST
45783: LIST
45784: PUSH
45785: LD_VAR 0 1
45789: PUSH
45790: LD_INT 3
45792: MINUS
45793: PUSH
45794: LD_VAR 0 2
45798: PUSH
45799: LD_INT 3
45801: MINUS
45802: PUSH
45803: LD_INT 2
45805: PUSH
45806: EMPTY
45807: LIST
45808: LIST
45809: LIST
45810: PUSH
45811: LD_VAR 0 1
45815: PUSH
45816: LD_INT 4
45818: MINUS
45819: PUSH
45820: LD_VAR 0 2
45824: PUSH
45825: LD_INT 1
45827: PUSH
45828: EMPTY
45829: LIST
45830: LIST
45831: LIST
45832: PUSH
45833: LD_VAR 0 1
45837: PUSH
45838: LD_VAR 0 2
45842: PUSH
45843: LD_INT 3
45845: PLUS
45846: PUSH
45847: LD_INT 0
45849: PUSH
45850: EMPTY
45851: LIST
45852: LIST
45853: LIST
45854: PUSH
45855: LD_VAR 0 1
45859: PUSH
45860: LD_INT 4
45862: PLUS
45863: PUSH
45864: LD_VAR 0 2
45868: PUSH
45869: LD_INT 4
45871: PLUS
45872: PUSH
45873: LD_INT 5
45875: PUSH
45876: EMPTY
45877: LIST
45878: LIST
45879: LIST
45880: PUSH
45881: EMPTY
45882: LIST
45883: LIST
45884: LIST
45885: LIST
45886: LIST
45887: ST_TO_ADDR
// end ; 2 :
45888: GO 46447
45890: LD_INT 2
45892: DOUBLE
45893: EQUAL
45894: IFTRUE 45898
45896: GO 46027
45898: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
45899: LD_ADDR_VAR 0 5
45903: PUSH
45904: LD_VAR 0 1
45908: PUSH
45909: LD_VAR 0 2
45913: PUSH
45914: LD_INT 3
45916: MINUS
45917: PUSH
45918: LD_INT 3
45920: PUSH
45921: EMPTY
45922: LIST
45923: LIST
45924: LIST
45925: PUSH
45926: LD_VAR 0 1
45930: PUSH
45931: LD_INT 4
45933: PLUS
45934: PUSH
45935: LD_VAR 0 2
45939: PUSH
45940: LD_INT 4
45942: PUSH
45943: EMPTY
45944: LIST
45945: LIST
45946: LIST
45947: PUSH
45948: LD_VAR 0 1
45952: PUSH
45953: LD_VAR 0 2
45957: PUSH
45958: LD_INT 4
45960: PLUS
45961: PUSH
45962: LD_INT 0
45964: PUSH
45965: EMPTY
45966: LIST
45967: LIST
45968: LIST
45969: PUSH
45970: LD_VAR 0 1
45974: PUSH
45975: LD_INT 3
45977: MINUS
45978: PUSH
45979: LD_VAR 0 2
45983: PUSH
45984: LD_INT 1
45986: PUSH
45987: EMPTY
45988: LIST
45989: LIST
45990: LIST
45991: PUSH
45992: LD_VAR 0 1
45996: PUSH
45997: LD_INT 4
45999: MINUS
46000: PUSH
46001: LD_VAR 0 2
46005: PUSH
46006: LD_INT 4
46008: MINUS
46009: PUSH
46010: LD_INT 2
46012: PUSH
46013: EMPTY
46014: LIST
46015: LIST
46016: LIST
46017: PUSH
46018: EMPTY
46019: LIST
46020: LIST
46021: LIST
46022: LIST
46023: LIST
46024: ST_TO_ADDR
// end ; 3 :
46025: GO 46447
46027: LD_INT 3
46029: DOUBLE
46030: EQUAL
46031: IFTRUE 46035
46033: GO 46168
46035: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
46036: LD_ADDR_VAR 0 5
46040: PUSH
46041: LD_VAR 0 1
46045: PUSH
46046: LD_INT 3
46048: PLUS
46049: PUSH
46050: LD_VAR 0 2
46054: PUSH
46055: LD_INT 4
46057: PUSH
46058: EMPTY
46059: LIST
46060: LIST
46061: LIST
46062: PUSH
46063: LD_VAR 0 1
46067: PUSH
46068: LD_INT 4
46070: PLUS
46071: PUSH
46072: LD_VAR 0 2
46076: PUSH
46077: LD_INT 4
46079: PLUS
46080: PUSH
46081: LD_INT 5
46083: PUSH
46084: EMPTY
46085: LIST
46086: LIST
46087: LIST
46088: PUSH
46089: LD_VAR 0 1
46093: PUSH
46094: LD_INT 4
46096: MINUS
46097: PUSH
46098: LD_VAR 0 2
46102: PUSH
46103: LD_INT 1
46105: PUSH
46106: EMPTY
46107: LIST
46108: LIST
46109: LIST
46110: PUSH
46111: LD_VAR 0 1
46115: PUSH
46116: LD_VAR 0 2
46120: PUSH
46121: LD_INT 4
46123: MINUS
46124: PUSH
46125: LD_INT 3
46127: PUSH
46128: EMPTY
46129: LIST
46130: LIST
46131: LIST
46132: PUSH
46133: LD_VAR 0 1
46137: PUSH
46138: LD_INT 3
46140: MINUS
46141: PUSH
46142: LD_VAR 0 2
46146: PUSH
46147: LD_INT 3
46149: MINUS
46150: PUSH
46151: LD_INT 2
46153: PUSH
46154: EMPTY
46155: LIST
46156: LIST
46157: LIST
46158: PUSH
46159: EMPTY
46160: LIST
46161: LIST
46162: LIST
46163: LIST
46164: LIST
46165: ST_TO_ADDR
// end ; 4 :
46166: GO 46447
46168: LD_INT 4
46170: DOUBLE
46171: EQUAL
46172: IFTRUE 46176
46174: GO 46309
46176: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
46177: LD_ADDR_VAR 0 5
46181: PUSH
46182: LD_VAR 0 1
46186: PUSH
46187: LD_VAR 0 2
46191: PUSH
46192: LD_INT 4
46194: PLUS
46195: PUSH
46196: LD_INT 0
46198: PUSH
46199: EMPTY
46200: LIST
46201: LIST
46202: LIST
46203: PUSH
46204: LD_VAR 0 1
46208: PUSH
46209: LD_INT 3
46211: PLUS
46212: PUSH
46213: LD_VAR 0 2
46217: PUSH
46218: LD_INT 3
46220: PLUS
46221: PUSH
46222: LD_INT 5
46224: PUSH
46225: EMPTY
46226: LIST
46227: LIST
46228: LIST
46229: PUSH
46230: LD_VAR 0 1
46234: PUSH
46235: LD_INT 4
46237: PLUS
46238: PUSH
46239: LD_VAR 0 2
46243: PUSH
46244: LD_INT 4
46246: PUSH
46247: EMPTY
46248: LIST
46249: LIST
46250: LIST
46251: PUSH
46252: LD_VAR 0 1
46256: PUSH
46257: LD_VAR 0 2
46261: PUSH
46262: LD_INT 3
46264: MINUS
46265: PUSH
46266: LD_INT 3
46268: PUSH
46269: EMPTY
46270: LIST
46271: LIST
46272: LIST
46273: PUSH
46274: LD_VAR 0 1
46278: PUSH
46279: LD_INT 4
46281: MINUS
46282: PUSH
46283: LD_VAR 0 2
46287: PUSH
46288: LD_INT 4
46290: MINUS
46291: PUSH
46292: LD_INT 2
46294: PUSH
46295: EMPTY
46296: LIST
46297: LIST
46298: LIST
46299: PUSH
46300: EMPTY
46301: LIST
46302: LIST
46303: LIST
46304: LIST
46305: LIST
46306: ST_TO_ADDR
// end ; 5 :
46307: GO 46447
46309: LD_INT 5
46311: DOUBLE
46312: EQUAL
46313: IFTRUE 46317
46315: GO 46446
46317: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
46318: LD_ADDR_VAR 0 5
46322: PUSH
46323: LD_VAR 0 1
46327: PUSH
46328: LD_INT 4
46330: MINUS
46331: PUSH
46332: LD_VAR 0 2
46336: PUSH
46337: LD_INT 1
46339: PUSH
46340: EMPTY
46341: LIST
46342: LIST
46343: LIST
46344: PUSH
46345: LD_VAR 0 1
46349: PUSH
46350: LD_VAR 0 2
46354: PUSH
46355: LD_INT 4
46357: MINUS
46358: PUSH
46359: LD_INT 3
46361: PUSH
46362: EMPTY
46363: LIST
46364: LIST
46365: LIST
46366: PUSH
46367: LD_VAR 0 1
46371: PUSH
46372: LD_INT 4
46374: PLUS
46375: PUSH
46376: LD_VAR 0 2
46380: PUSH
46381: LD_INT 4
46383: PLUS
46384: PUSH
46385: LD_INT 5
46387: PUSH
46388: EMPTY
46389: LIST
46390: LIST
46391: LIST
46392: PUSH
46393: LD_VAR 0 1
46397: PUSH
46398: LD_INT 3
46400: PLUS
46401: PUSH
46402: LD_VAR 0 2
46406: PUSH
46407: LD_INT 4
46409: PUSH
46410: EMPTY
46411: LIST
46412: LIST
46413: LIST
46414: PUSH
46415: LD_VAR 0 1
46419: PUSH
46420: LD_VAR 0 2
46424: PUSH
46425: LD_INT 3
46427: PLUS
46428: PUSH
46429: LD_INT 0
46431: PUSH
46432: EMPTY
46433: LIST
46434: LIST
46435: LIST
46436: PUSH
46437: EMPTY
46438: LIST
46439: LIST
46440: LIST
46441: LIST
46442: LIST
46443: ST_TO_ADDR
// end ; end ;
46444: GO 46447
46446: POP
// result := list ;
46447: LD_ADDR_VAR 0 4
46451: PUSH
46452: LD_VAR 0 5
46456: ST_TO_ADDR
// end ;
46457: LD_VAR 0 4
46461: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
46462: LD_INT 0
46464: PPUSH
46465: PPUSH
46466: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
46467: LD_VAR 0 1
46471: NOT
46472: IFTRUE 46500
46474: PUSH
46475: LD_VAR 0 2
46479: PUSH
46480: LD_INT 1
46482: PUSH
46483: LD_INT 2
46485: PUSH
46486: LD_INT 3
46488: PUSH
46489: LD_INT 4
46491: PUSH
46492: EMPTY
46493: LIST
46494: LIST
46495: LIST
46496: LIST
46497: IN
46498: NOT
46499: OR
46500: IFFALSE 46504
// exit ;
46502: GO 46587
// tmp := [ ] ;
46504: LD_ADDR_VAR 0 5
46508: PUSH
46509: EMPTY
46510: ST_TO_ADDR
// for i in units do
46511: LD_ADDR_VAR 0 4
46515: PUSH
46516: LD_VAR 0 1
46520: PUSH
46521: FOR_IN
46522: IFFALSE 46556
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
46524: LD_ADDR_VAR 0 5
46528: PUSH
46529: LD_VAR 0 5
46533: PPUSH
46534: LD_VAR 0 4
46538: PPUSH
46539: LD_VAR 0 2
46543: PPUSH
46544: CALL_OW 259
46548: PPUSH
46549: CALL 47982 0 2
46553: ST_TO_ADDR
46554: GO 46521
46556: POP
46557: POP
// if not tmp then
46558: LD_VAR 0 5
46562: NOT
46563: IFFALSE 46567
// exit ;
46565: GO 46587
// result := SortListByListDesc ( units , tmp ) ;
46567: LD_ADDR_VAR 0 3
46571: PUSH
46572: LD_VAR 0 1
46576: PPUSH
46577: LD_VAR 0 5
46581: PPUSH
46582: CALL_OW 77
46586: ST_TO_ADDR
// end ;
46587: LD_VAR 0 3
46591: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
46592: LD_INT 0
46594: PPUSH
46595: PPUSH
46596: PPUSH
// result := false ;
46597: LD_ADDR_VAR 0 3
46601: PUSH
46602: LD_INT 0
46604: ST_TO_ADDR
// if not building then
46605: LD_VAR 0 2
46609: NOT
46610: IFFALSE 46614
// exit ;
46612: GO 46758
// x := GetX ( building ) ;
46614: LD_ADDR_VAR 0 4
46618: PUSH
46619: LD_VAR 0 2
46623: PPUSH
46624: CALL_OW 250
46628: ST_TO_ADDR
// y := GetY ( building ) ;
46629: LD_ADDR_VAR 0 5
46633: PUSH
46634: LD_VAR 0 2
46638: PPUSH
46639: CALL_OW 251
46643: ST_TO_ADDR
// if not x or not y then
46644: LD_VAR 0 4
46648: NOT
46649: IFTRUE 46658
46651: PUSH
46652: LD_VAR 0 5
46656: NOT
46657: OR
46658: IFFALSE 46662
// exit ;
46660: GO 46758
// if GetTaskList ( unit ) then
46662: LD_VAR 0 1
46666: PPUSH
46667: CALL_OW 437
46671: IFFALSE 46758
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
46673: LD_STRING e
46675: PUSH
46676: LD_VAR 0 1
46680: PPUSH
46681: CALL_OW 437
46685: PUSH
46686: LD_INT 1
46688: ARRAY
46689: PUSH
46690: LD_INT 1
46692: ARRAY
46693: EQUAL
46694: IFFALSE 46721
46696: PUSH
46697: LD_VAR 0 4
46701: PUSH
46702: LD_VAR 0 1
46706: PPUSH
46707: CALL_OW 437
46711: PUSH
46712: LD_INT 1
46714: ARRAY
46715: PUSH
46716: LD_INT 2
46718: ARRAY
46719: EQUAL
46720: AND
46721: IFFALSE 46748
46723: PUSH
46724: LD_VAR 0 5
46728: PUSH
46729: LD_VAR 0 1
46733: PPUSH
46734: CALL_OW 437
46738: PUSH
46739: LD_INT 1
46741: ARRAY
46742: PUSH
46743: LD_INT 3
46745: ARRAY
46746: EQUAL
46747: AND
46748: IFFALSE 46758
// result := true end ;
46750: LD_ADDR_VAR 0 3
46754: PUSH
46755: LD_INT 1
46757: ST_TO_ADDR
// end ;
46758: LD_VAR 0 3
46762: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
46763: LD_INT 0
46765: PPUSH
// result := false ;
46766: LD_ADDR_VAR 0 4
46770: PUSH
46771: LD_INT 0
46773: ST_TO_ADDR
// if GetTaskList ( unit ) then
46774: LD_VAR 0 1
46778: PPUSH
46779: CALL_OW 437
46783: IFFALSE 46870
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
46785: LD_STRING M
46787: PUSH
46788: LD_VAR 0 1
46792: PPUSH
46793: CALL_OW 437
46797: PUSH
46798: LD_INT 1
46800: ARRAY
46801: PUSH
46802: LD_INT 1
46804: ARRAY
46805: EQUAL
46806: IFFALSE 46833
46808: PUSH
46809: LD_VAR 0 2
46813: PUSH
46814: LD_VAR 0 1
46818: PPUSH
46819: CALL_OW 437
46823: PUSH
46824: LD_INT 1
46826: ARRAY
46827: PUSH
46828: LD_INT 2
46830: ARRAY
46831: EQUAL
46832: AND
46833: IFFALSE 46860
46835: PUSH
46836: LD_VAR 0 3
46840: PUSH
46841: LD_VAR 0 1
46845: PPUSH
46846: CALL_OW 437
46850: PUSH
46851: LD_INT 1
46853: ARRAY
46854: PUSH
46855: LD_INT 3
46857: ARRAY
46858: EQUAL
46859: AND
46860: IFFALSE 46870
// result := true ;
46862: LD_ADDR_VAR 0 4
46866: PUSH
46867: LD_INT 1
46869: ST_TO_ADDR
// end ; end ;
46870: LD_VAR 0 4
46874: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
46875: LD_INT 0
46877: PPUSH
46878: PPUSH
46879: PPUSH
46880: PPUSH
// if not unit or not area then
46881: LD_VAR 0 1
46885: NOT
46886: IFTRUE 46895
46888: PUSH
46889: LD_VAR 0 2
46893: NOT
46894: OR
46895: IFFALSE 46899
// exit ;
46897: GO 47075
// tmp := AreaToList ( area , i ) ;
46899: LD_ADDR_VAR 0 6
46903: PUSH
46904: LD_VAR 0 2
46908: PPUSH
46909: LD_VAR 0 5
46913: PPUSH
46914: CALL_OW 517
46918: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
46919: LD_ADDR_VAR 0 5
46923: PUSH
46924: DOUBLE
46925: LD_INT 1
46927: DEC
46928: ST_TO_ADDR
46929: LD_VAR 0 6
46933: PUSH
46934: LD_INT 1
46936: ARRAY
46937: PUSH
46938: FOR_TO
46939: IFFALSE 47073
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
46941: LD_ADDR_VAR 0 7
46945: PUSH
46946: LD_VAR 0 6
46950: PUSH
46951: LD_INT 1
46953: ARRAY
46954: PUSH
46955: LD_VAR 0 5
46959: ARRAY
46960: PUSH
46961: LD_VAR 0 6
46965: PUSH
46966: LD_INT 2
46968: ARRAY
46969: PUSH
46970: LD_VAR 0 5
46974: ARRAY
46975: PUSH
46976: EMPTY
46977: LIST
46978: LIST
46979: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
46980: LD_INT 92
46982: PUSH
46983: LD_VAR 0 7
46987: PUSH
46988: LD_INT 1
46990: ARRAY
46991: PUSH
46992: LD_VAR 0 7
46996: PUSH
46997: LD_INT 2
46999: ARRAY
47000: PUSH
47001: LD_INT 2
47003: PUSH
47004: EMPTY
47005: LIST
47006: LIST
47007: LIST
47008: LIST
47009: PPUSH
47010: CALL_OW 69
47014: PUSH
47015: LD_INT 0
47017: EQUAL
47018: IFFALSE 47071
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
47020: LD_VAR 0 1
47024: PPUSH
47025: LD_VAR 0 7
47029: PUSH
47030: LD_INT 1
47032: ARRAY
47033: PPUSH
47034: LD_VAR 0 7
47038: PUSH
47039: LD_INT 2
47041: ARRAY
47042: PPUSH
47043: LD_VAR 0 3
47047: PPUSH
47048: CALL_OW 48
// result := IsPlaced ( unit ) ;
47052: LD_ADDR_VAR 0 4
47056: PUSH
47057: LD_VAR 0 1
47061: PPUSH
47062: CALL_OW 305
47066: ST_TO_ADDR
// exit ;
47067: POP
47068: POP
47069: GO 47075
// end ; end ;
47071: GO 46938
47073: POP
47074: POP
// end ;
47075: LD_VAR 0 4
47079: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
47080: LD_INT 0
47082: PPUSH
47083: PPUSH
47084: PPUSH
// if not side or side > 8 then
47085: LD_VAR 0 1
47089: NOT
47090: IFTRUE 47102
47092: PUSH
47093: LD_VAR 0 1
47097: PUSH
47098: LD_INT 8
47100: GREATER
47101: OR
47102: IFFALSE 47106
// exit ;
47104: GO 47293
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
47106: LD_ADDR_VAR 0 4
47110: PUSH
47111: LD_INT 22
47113: PUSH
47114: LD_VAR 0 1
47118: PUSH
47119: EMPTY
47120: LIST
47121: LIST
47122: PUSH
47123: LD_INT 21
47125: PUSH
47126: LD_INT 3
47128: PUSH
47129: EMPTY
47130: LIST
47131: LIST
47132: PUSH
47133: EMPTY
47134: LIST
47135: LIST
47136: PPUSH
47137: CALL_OW 69
47141: ST_TO_ADDR
// if not tmp then
47142: LD_VAR 0 4
47146: NOT
47147: IFFALSE 47151
// exit ;
47149: GO 47293
// enable_addtolog := true ;
47151: LD_ADDR_OWVAR 81
47155: PUSH
47156: LD_INT 1
47158: ST_TO_ADDR
// AddToLog ( [ ) ;
47159: LD_STRING [
47161: PPUSH
47162: CALL_OW 561
// for i in tmp do
47166: LD_ADDR_VAR 0 3
47170: PUSH
47171: LD_VAR 0 4
47175: PUSH
47176: FOR_IN
47177: IFFALSE 47284
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
47179: LD_STRING [
47181: PUSH
47182: LD_VAR 0 3
47186: PPUSH
47187: CALL_OW 266
47191: STR
47192: PUSH
47193: LD_STRING , 
47195: STR
47196: PUSH
47197: LD_VAR 0 3
47201: PPUSH
47202: CALL_OW 250
47206: STR
47207: PUSH
47208: LD_STRING , 
47210: STR
47211: PUSH
47212: LD_VAR 0 3
47216: PPUSH
47217: CALL_OW 251
47221: STR
47222: PUSH
47223: LD_STRING , 
47225: STR
47226: PUSH
47227: LD_VAR 0 3
47231: PPUSH
47232: CALL_OW 254
47236: STR
47237: PUSH
47238: LD_STRING , 
47240: STR
47241: PUSH
47242: LD_VAR 0 3
47246: PPUSH
47247: LD_INT 1
47249: PPUSH
47250: CALL_OW 268
47254: STR
47255: PUSH
47256: LD_STRING , 
47258: STR
47259: PUSH
47260: LD_VAR 0 3
47264: PPUSH
47265: LD_INT 2
47267: PPUSH
47268: CALL_OW 268
47272: STR
47273: PUSH
47274: LD_STRING ],
47276: STR
47277: PPUSH
47278: CALL_OW 561
// end ;
47282: GO 47176
47284: POP
47285: POP
// AddToLog ( ]; ) ;
47286: LD_STRING ];
47288: PPUSH
47289: CALL_OW 561
// end ;
47293: LD_VAR 0 2
47297: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
47298: LD_INT 0
47300: PPUSH
47301: PPUSH
47302: PPUSH
47303: PPUSH
47304: PPUSH
// if not area or not rate or not max then
47305: LD_VAR 0 1
47309: NOT
47310: IFTRUE 47319
47312: PUSH
47313: LD_VAR 0 2
47317: NOT
47318: OR
47319: IFTRUE 47328
47321: PUSH
47322: LD_VAR 0 4
47326: NOT
47327: OR
47328: IFFALSE 47332
// exit ;
47330: GO 47521
// while 1 do
47332: LD_INT 1
47334: IFFALSE 47521
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
47336: LD_ADDR_VAR 0 9
47340: PUSH
47341: LD_VAR 0 1
47345: PPUSH
47346: LD_INT 1
47348: PPUSH
47349: CALL_OW 287
47353: PUSH
47354: LD_INT 10
47356: MUL
47357: ST_TO_ADDR
// r := rate / 10 ;
47358: LD_ADDR_VAR 0 7
47362: PUSH
47363: LD_VAR 0 2
47367: PUSH
47368: LD_INT 10
47370: DIVREAL
47371: ST_TO_ADDR
// time := 1 1$00 ;
47372: LD_ADDR_VAR 0 8
47376: PUSH
47377: LD_INT 2100
47379: ST_TO_ADDR
// if amount < min then
47380: LD_VAR 0 9
47384: PUSH
47385: LD_VAR 0 3
47389: LESS
47390: IFFALSE 47408
// r := r * 2 else
47392: LD_ADDR_VAR 0 7
47396: PUSH
47397: LD_VAR 0 7
47401: PUSH
47402: LD_INT 2
47404: MUL
47405: ST_TO_ADDR
47406: GO 47434
// if amount > max then
47408: LD_VAR 0 9
47412: PUSH
47413: LD_VAR 0 4
47417: GREATER
47418: IFFALSE 47434
// r := r / 2 ;
47420: LD_ADDR_VAR 0 7
47424: PUSH
47425: LD_VAR 0 7
47429: PUSH
47430: LD_INT 2
47432: DIVREAL
47433: ST_TO_ADDR
// time := time / r ;
47434: LD_ADDR_VAR 0 8
47438: PUSH
47439: LD_VAR 0 8
47443: PUSH
47444: LD_VAR 0 7
47448: DIVREAL
47449: ST_TO_ADDR
// if time < 0 then
47450: LD_VAR 0 8
47454: PUSH
47455: LD_INT 0
47457: LESS
47458: IFFALSE 47475
// time := time * - 1 ;
47460: LD_ADDR_VAR 0 8
47464: PUSH
47465: LD_VAR 0 8
47469: PUSH
47470: LD_INT 1
47472: NEG
47473: MUL
47474: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
47475: LD_VAR 0 8
47479: PUSH
47480: LD_INT 35
47482: PPUSH
47483: LD_INT 875
47485: PPUSH
47486: CALL_OW 12
47490: PLUS
47491: PPUSH
47492: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
47496: LD_INT 1
47498: PPUSH
47499: LD_INT 5
47501: PPUSH
47502: CALL_OW 12
47506: PPUSH
47507: LD_VAR 0 1
47511: PPUSH
47512: LD_INT 1
47514: PPUSH
47515: CALL_OW 55
// end ;
47519: GO 47332
// end ;
47521: LD_VAR 0 5
47525: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
47526: LD_INT 0
47528: PPUSH
47529: PPUSH
47530: PPUSH
47531: PPUSH
47532: PPUSH
47533: PPUSH
47534: PPUSH
47535: PPUSH
// if not turrets or not factories then
47536: LD_VAR 0 1
47540: NOT
47541: IFTRUE 47550
47543: PUSH
47544: LD_VAR 0 2
47548: NOT
47549: OR
47550: IFFALSE 47554
// exit ;
47552: GO 47861
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
47554: LD_ADDR_VAR 0 10
47558: PUSH
47559: LD_INT 5
47561: PUSH
47562: LD_INT 6
47564: PUSH
47565: EMPTY
47566: LIST
47567: LIST
47568: PUSH
47569: LD_INT 2
47571: PUSH
47572: LD_INT 4
47574: PUSH
47575: EMPTY
47576: LIST
47577: LIST
47578: PUSH
47579: LD_INT 3
47581: PUSH
47582: LD_INT 5
47584: PUSH
47585: EMPTY
47586: LIST
47587: LIST
47588: PUSH
47589: EMPTY
47590: LIST
47591: LIST
47592: LIST
47593: PUSH
47594: LD_INT 24
47596: PUSH
47597: LD_INT 25
47599: PUSH
47600: EMPTY
47601: LIST
47602: LIST
47603: PUSH
47604: LD_INT 23
47606: PUSH
47607: LD_INT 27
47609: PUSH
47610: EMPTY
47611: LIST
47612: LIST
47613: PUSH
47614: EMPTY
47615: LIST
47616: LIST
47617: PUSH
47618: LD_INT 42
47620: PUSH
47621: LD_INT 43
47623: PUSH
47624: EMPTY
47625: LIST
47626: LIST
47627: PUSH
47628: LD_INT 44
47630: PUSH
47631: LD_INT 46
47633: PUSH
47634: EMPTY
47635: LIST
47636: LIST
47637: PUSH
47638: LD_INT 45
47640: PUSH
47641: LD_INT 47
47643: PUSH
47644: EMPTY
47645: LIST
47646: LIST
47647: PUSH
47648: EMPTY
47649: LIST
47650: LIST
47651: LIST
47652: PUSH
47653: EMPTY
47654: LIST
47655: LIST
47656: LIST
47657: ST_TO_ADDR
// result := [ ] ;
47658: LD_ADDR_VAR 0 3
47662: PUSH
47663: EMPTY
47664: ST_TO_ADDR
// for i in turrets do
47665: LD_ADDR_VAR 0 4
47669: PUSH
47670: LD_VAR 0 1
47674: PUSH
47675: FOR_IN
47676: IFFALSE 47859
// begin nat := GetNation ( i ) ;
47678: LD_ADDR_VAR 0 7
47682: PUSH
47683: LD_VAR 0 4
47687: PPUSH
47688: CALL_OW 248
47692: ST_TO_ADDR
// weapon := 0 ;
47693: LD_ADDR_VAR 0 8
47697: PUSH
47698: LD_INT 0
47700: ST_TO_ADDR
// if not nat then
47701: LD_VAR 0 7
47705: NOT
47706: IFFALSE 47710
// continue ;
47708: GO 47675
// for j in list [ nat ] do
47710: LD_ADDR_VAR 0 5
47714: PUSH
47715: LD_VAR 0 10
47719: PUSH
47720: LD_VAR 0 7
47724: ARRAY
47725: PUSH
47726: FOR_IN
47727: IFFALSE 47768
// if GetBWeapon ( i ) = j [ 1 ] then
47729: LD_VAR 0 4
47733: PPUSH
47734: CALL_OW 269
47738: PUSH
47739: LD_VAR 0 5
47743: PUSH
47744: LD_INT 1
47746: ARRAY
47747: EQUAL
47748: IFFALSE 47766
// begin weapon := j [ 2 ] ;
47750: LD_ADDR_VAR 0 8
47754: PUSH
47755: LD_VAR 0 5
47759: PUSH
47760: LD_INT 2
47762: ARRAY
47763: ST_TO_ADDR
// break ;
47764: GO 47768
// end ;
47766: GO 47726
47768: POP
47769: POP
// if not weapon then
47770: LD_VAR 0 8
47774: NOT
47775: IFFALSE 47779
// continue ;
47777: GO 47675
// for k in factories do
47779: LD_ADDR_VAR 0 6
47783: PUSH
47784: LD_VAR 0 2
47788: PUSH
47789: FOR_IN
47790: IFFALSE 47855
// begin weapons := AvailableWeaponList ( k ) ;
47792: LD_ADDR_VAR 0 9
47796: PUSH
47797: LD_VAR 0 6
47801: PPUSH
47802: CALL_OW 478
47806: ST_TO_ADDR
// if not weapons then
47807: LD_VAR 0 9
47811: NOT
47812: IFFALSE 47816
// continue ;
47814: GO 47789
// if weapon in weapons then
47816: LD_VAR 0 8
47820: PUSH
47821: LD_VAR 0 9
47825: IN
47826: IFFALSE 47853
// begin result := [ i , weapon ] ;
47828: LD_ADDR_VAR 0 3
47832: PUSH
47833: LD_VAR 0 4
47837: PUSH
47838: LD_VAR 0 8
47842: PUSH
47843: EMPTY
47844: LIST
47845: LIST
47846: ST_TO_ADDR
// exit ;
47847: POP
47848: POP
47849: POP
47850: POP
47851: GO 47861
// end ; end ;
47853: GO 47789
47855: POP
47856: POP
// end ;
47857: GO 47675
47859: POP
47860: POP
// end ;
47861: LD_VAR 0 3
47865: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
47866: LD_INT 0
47868: PPUSH
// if not side or side > 8 then
47869: LD_VAR 0 3
47873: NOT
47874: IFTRUE 47886
47876: PUSH
47877: LD_VAR 0 3
47881: PUSH
47882: LD_INT 8
47884: GREATER
47885: OR
47886: IFFALSE 47890
// exit ;
47888: GO 47949
// if not range then
47890: LD_VAR 0 4
47894: NOT
47895: IFFALSE 47906
// range := - 12 ;
47897: LD_ADDR_VAR 0 4
47901: PUSH
47902: LD_INT 12
47904: NEG
47905: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
47906: LD_VAR 0 1
47910: PPUSH
47911: LD_VAR 0 2
47915: PPUSH
47916: LD_VAR 0 3
47920: PPUSH
47921: LD_VAR 0 4
47925: PPUSH
47926: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
47930: LD_VAR 0 1
47934: PPUSH
47935: LD_VAR 0 2
47939: PPUSH
47940: LD_VAR 0 3
47944: PPUSH
47945: CALL_OW 331
// end ;
47949: LD_VAR 0 5
47953: RET
// export function Video ( mode ) ; begin
47954: LD_INT 0
47956: PPUSH
// ingame_video = mode ;
47957: LD_ADDR_OWVAR 52
47961: PUSH
47962: LD_VAR 0 1
47966: ST_TO_ADDR
// interface_hidden = mode ;
47967: LD_ADDR_OWVAR 54
47971: PUSH
47972: LD_VAR 0 1
47976: ST_TO_ADDR
// end ;
47977: LD_VAR 0 2
47981: RET
// export function Join ( array , element ) ; begin
47982: LD_INT 0
47984: PPUSH
// result := Replace ( array , array + 1 , element ) ;
47985: LD_ADDR_VAR 0 3
47989: PUSH
47990: LD_VAR 0 1
47994: PPUSH
47995: LD_VAR 0 1
47999: PUSH
48000: LD_INT 1
48002: PLUS
48003: PPUSH
48004: LD_VAR 0 2
48008: PPUSH
48009: CALL_OW 1
48013: ST_TO_ADDR
// end ;
48014: LD_VAR 0 3
48018: RET
// export function JoinUnion ( array , element ) ; begin
48019: LD_INT 0
48021: PPUSH
// result := array union element ;
48022: LD_ADDR_VAR 0 3
48026: PUSH
48027: LD_VAR 0 1
48031: PUSH
48032: LD_VAR 0 2
48036: UNION
48037: ST_TO_ADDR
// end ;
48038: LD_VAR 0 3
48042: RET
// export function GetBehemoths ( side ) ; begin
48043: LD_INT 0
48045: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
48046: LD_ADDR_VAR 0 2
48050: PUSH
48051: LD_INT 22
48053: PUSH
48054: LD_VAR 0 1
48058: PUSH
48059: EMPTY
48060: LIST
48061: LIST
48062: PUSH
48063: LD_INT 31
48065: PUSH
48066: LD_INT 25
48068: PUSH
48069: EMPTY
48070: LIST
48071: LIST
48072: PUSH
48073: EMPTY
48074: LIST
48075: LIST
48076: PPUSH
48077: CALL_OW 69
48081: ST_TO_ADDR
// end ;
48082: LD_VAR 0 2
48086: RET
// export function Shuffle ( array ) ; var i , index ; begin
48087: LD_INT 0
48089: PPUSH
48090: PPUSH
48091: PPUSH
// result := [ ] ;
48092: LD_ADDR_VAR 0 2
48096: PUSH
48097: EMPTY
48098: ST_TO_ADDR
// if not array then
48099: LD_VAR 0 1
48103: NOT
48104: IFFALSE 48108
// exit ;
48106: GO 48207
// Randomize ;
48108: CALL_OW 10
// for i = array downto 1 do
48112: LD_ADDR_VAR 0 3
48116: PUSH
48117: DOUBLE
48118: LD_VAR 0 1
48122: INC
48123: ST_TO_ADDR
48124: LD_INT 1
48126: PUSH
48127: FOR_DOWNTO
48128: IFFALSE 48205
// begin index := rand ( 1 , array ) ;
48130: LD_ADDR_VAR 0 4
48134: PUSH
48135: LD_INT 1
48137: PPUSH
48138: LD_VAR 0 1
48142: PPUSH
48143: CALL_OW 12
48147: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
48148: LD_ADDR_VAR 0 2
48152: PUSH
48153: LD_VAR 0 2
48157: PPUSH
48158: LD_VAR 0 2
48162: PUSH
48163: LD_INT 1
48165: PLUS
48166: PPUSH
48167: LD_VAR 0 1
48171: PUSH
48172: LD_VAR 0 4
48176: ARRAY
48177: PPUSH
48178: CALL_OW 2
48182: ST_TO_ADDR
// array := Delete ( array , index ) ;
48183: LD_ADDR_VAR 0 1
48187: PUSH
48188: LD_VAR 0 1
48192: PPUSH
48193: LD_VAR 0 4
48197: PPUSH
48198: CALL_OW 3
48202: ST_TO_ADDR
// end ;
48203: GO 48127
48205: POP
48206: POP
// end ;
48207: LD_VAR 0 2
48211: RET
// export function GetBaseMaterials ( base ) ; begin
48212: LD_INT 0
48214: PPUSH
// result := [ 0 , 0 , 0 ] ;
48215: LD_ADDR_VAR 0 2
48219: PUSH
48220: LD_INT 0
48222: PUSH
48223: LD_INT 0
48225: PUSH
48226: LD_INT 0
48228: PUSH
48229: EMPTY
48230: LIST
48231: LIST
48232: LIST
48233: ST_TO_ADDR
// if not base then
48234: LD_VAR 0 1
48238: NOT
48239: IFFALSE 48243
// exit ;
48241: GO 48292
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
48243: LD_ADDR_VAR 0 2
48247: PUSH
48248: LD_VAR 0 1
48252: PPUSH
48253: LD_INT 1
48255: PPUSH
48256: CALL_OW 275
48260: PUSH
48261: LD_VAR 0 1
48265: PPUSH
48266: LD_INT 2
48268: PPUSH
48269: CALL_OW 275
48273: PUSH
48274: LD_VAR 0 1
48278: PPUSH
48279: LD_INT 3
48281: PPUSH
48282: CALL_OW 275
48286: PUSH
48287: EMPTY
48288: LIST
48289: LIST
48290: LIST
48291: ST_TO_ADDR
// end ;
48292: LD_VAR 0 2
48296: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
48297: LD_INT 0
48299: PPUSH
48300: PPUSH
// result := array ;
48301: LD_ADDR_VAR 0 3
48305: PUSH
48306: LD_VAR 0 1
48310: ST_TO_ADDR
// if size >= result then
48311: LD_VAR 0 2
48315: PUSH
48316: LD_VAR 0 3
48320: GREATEREQUAL
48321: IFFALSE 48325
// exit ;
48323: GO 48375
// if size then
48325: LD_VAR 0 2
48329: IFFALSE 48375
// for i := array downto size do
48331: LD_ADDR_VAR 0 4
48335: PUSH
48336: DOUBLE
48337: LD_VAR 0 1
48341: INC
48342: ST_TO_ADDR
48343: LD_VAR 0 2
48347: PUSH
48348: FOR_DOWNTO
48349: IFFALSE 48373
// result := Delete ( result , result ) ;
48351: LD_ADDR_VAR 0 3
48355: PUSH
48356: LD_VAR 0 3
48360: PPUSH
48361: LD_VAR 0 3
48365: PPUSH
48366: CALL_OW 3
48370: ST_TO_ADDR
48371: GO 48348
48373: POP
48374: POP
// end ;
48375: LD_VAR 0 3
48379: RET
// export function ComExit ( unit ) ; var tmp ; begin
48380: LD_INT 0
48382: PPUSH
48383: PPUSH
// if not IsInUnit ( unit ) then
48384: LD_VAR 0 1
48388: PPUSH
48389: CALL_OW 310
48393: NOT
48394: IFFALSE 48398
// exit ;
48396: GO 48458
// tmp := IsInUnit ( unit ) ;
48398: LD_ADDR_VAR 0 3
48402: PUSH
48403: LD_VAR 0 1
48407: PPUSH
48408: CALL_OW 310
48412: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
48413: LD_VAR 0 3
48417: PPUSH
48418: CALL_OW 247
48422: PUSH
48423: LD_INT 2
48425: EQUAL
48426: IFFALSE 48439
// ComExitVehicle ( unit ) else
48428: LD_VAR 0 1
48432: PPUSH
48433: CALL_OW 121
48437: GO 48448
// ComExitBuilding ( unit ) ;
48439: LD_VAR 0 1
48443: PPUSH
48444: CALL_OW 122
// result := tmp ;
48448: LD_ADDR_VAR 0 2
48452: PUSH
48453: LD_VAR 0 3
48457: ST_TO_ADDR
// end ;
48458: LD_VAR 0 2
48462: RET
// export function ComExitAll ( units ) ; var i ; begin
48463: LD_INT 0
48465: PPUSH
48466: PPUSH
// if not units then
48467: LD_VAR 0 1
48471: NOT
48472: IFFALSE 48476
// exit ;
48474: GO 48502
// for i in units do
48476: LD_ADDR_VAR 0 3
48480: PUSH
48481: LD_VAR 0 1
48485: PUSH
48486: FOR_IN
48487: IFFALSE 48500
// ComExit ( i ) ;
48489: LD_VAR 0 3
48493: PPUSH
48494: CALL 48380 0 1
48498: GO 48486
48500: POP
48501: POP
// end ;
48502: LD_VAR 0 2
48506: RET
// export function ResetHc ; begin
48507: LD_INT 0
48509: PPUSH
// InitHc ;
48510: CALL_OW 19
// hc_importance := 0 ;
48514: LD_ADDR_OWVAR 32
48518: PUSH
48519: LD_INT 0
48521: ST_TO_ADDR
// end ;
48522: LD_VAR 0 1
48526: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
48527: LD_INT 0
48529: PPUSH
48530: PPUSH
48531: PPUSH
// _x := ( x1 + x2 ) div 2 ;
48532: LD_ADDR_VAR 0 6
48536: PUSH
48537: LD_VAR 0 1
48541: PUSH
48542: LD_VAR 0 3
48546: PLUS
48547: PUSH
48548: LD_INT 2
48550: DIV
48551: ST_TO_ADDR
// if _x < 0 then
48552: LD_VAR 0 6
48556: PUSH
48557: LD_INT 0
48559: LESS
48560: IFFALSE 48577
// _x := _x * - 1 ;
48562: LD_ADDR_VAR 0 6
48566: PUSH
48567: LD_VAR 0 6
48571: PUSH
48572: LD_INT 1
48574: NEG
48575: MUL
48576: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
48577: LD_ADDR_VAR 0 7
48581: PUSH
48582: LD_VAR 0 2
48586: PUSH
48587: LD_VAR 0 4
48591: PLUS
48592: PUSH
48593: LD_INT 2
48595: DIV
48596: ST_TO_ADDR
// if _y < 0 then
48597: LD_VAR 0 7
48601: PUSH
48602: LD_INT 0
48604: LESS
48605: IFFALSE 48622
// _y := _y * - 1 ;
48607: LD_ADDR_VAR 0 7
48611: PUSH
48612: LD_VAR 0 7
48616: PUSH
48617: LD_INT 1
48619: NEG
48620: MUL
48621: ST_TO_ADDR
// result := [ _x , _y ] ;
48622: LD_ADDR_VAR 0 5
48626: PUSH
48627: LD_VAR 0 6
48631: PUSH
48632: LD_VAR 0 7
48636: PUSH
48637: EMPTY
48638: LIST
48639: LIST
48640: ST_TO_ADDR
// end ;
48641: LD_VAR 0 5
48645: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
48646: LD_INT 0
48648: PPUSH
48649: PPUSH
48650: PPUSH
48651: PPUSH
// task := GetTaskList ( unit ) ;
48652: LD_ADDR_VAR 0 7
48656: PUSH
48657: LD_VAR 0 1
48661: PPUSH
48662: CALL_OW 437
48666: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
48667: LD_VAR 0 7
48671: NOT
48672: IFFALSE 48691
48674: PUSH
48675: LD_VAR 0 1
48679: PPUSH
48680: LD_VAR 0 2
48684: PPUSH
48685: CALL_OW 308
48689: NOT
48690: AND
48691: IFFALSE 48695
// exit ;
48693: GO 48813
// if IsInArea ( unit , area ) then
48695: LD_VAR 0 1
48699: PPUSH
48700: LD_VAR 0 2
48704: PPUSH
48705: CALL_OW 308
48709: IFFALSE 48727
// begin ComMoveToArea ( unit , goAway ) ;
48711: LD_VAR 0 1
48715: PPUSH
48716: LD_VAR 0 3
48720: PPUSH
48721: CALL_OW 113
// exit ;
48725: GO 48813
// end ; if task [ 1 ] [ 1 ] <> M then
48727: LD_VAR 0 7
48731: PUSH
48732: LD_INT 1
48734: ARRAY
48735: PUSH
48736: LD_INT 1
48738: ARRAY
48739: PUSH
48740: LD_STRING M
48742: NONEQUAL
48743: IFFALSE 48747
// exit ;
48745: GO 48813
// x := task [ 1 ] [ 2 ] ;
48747: LD_ADDR_VAR 0 5
48751: PUSH
48752: LD_VAR 0 7
48756: PUSH
48757: LD_INT 1
48759: ARRAY
48760: PUSH
48761: LD_INT 2
48763: ARRAY
48764: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
48765: LD_ADDR_VAR 0 6
48769: PUSH
48770: LD_VAR 0 7
48774: PUSH
48775: LD_INT 1
48777: ARRAY
48778: PUSH
48779: LD_INT 3
48781: ARRAY
48782: ST_TO_ADDR
// if InArea ( x , y , area ) then
48783: LD_VAR 0 5
48787: PPUSH
48788: LD_VAR 0 6
48792: PPUSH
48793: LD_VAR 0 2
48797: PPUSH
48798: CALL_OW 309
48802: IFFALSE 48813
// ComStop ( unit ) ;
48804: LD_VAR 0 1
48808: PPUSH
48809: CALL_OW 141
// end ;
48813: LD_VAR 0 4
48817: RET
// export function Abs ( value ) ; begin
48818: LD_INT 0
48820: PPUSH
// result := value ;
48821: LD_ADDR_VAR 0 2
48825: PUSH
48826: LD_VAR 0 1
48830: ST_TO_ADDR
// if value < 0 then
48831: LD_VAR 0 1
48835: PUSH
48836: LD_INT 0
48838: LESS
48839: IFFALSE 48856
// result := value * - 1 ;
48841: LD_ADDR_VAR 0 2
48845: PUSH
48846: LD_VAR 0 1
48850: PUSH
48851: LD_INT 1
48853: NEG
48854: MUL
48855: ST_TO_ADDR
// end ;
48856: LD_VAR 0 2
48860: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
48861: LD_INT 0
48863: PPUSH
48864: PPUSH
48865: PPUSH
48866: PPUSH
48867: PPUSH
48868: PPUSH
48869: PPUSH
48870: PPUSH
// if not unit or not building then
48871: LD_VAR 0 1
48875: NOT
48876: IFTRUE 48885
48878: PUSH
48879: LD_VAR 0 2
48883: NOT
48884: OR
48885: IFFALSE 48889
// exit ;
48887: GO 49117
// x := GetX ( building ) ;
48889: LD_ADDR_VAR 0 4
48893: PUSH
48894: LD_VAR 0 2
48898: PPUSH
48899: CALL_OW 250
48903: ST_TO_ADDR
// y := GetY ( building ) ;
48904: LD_ADDR_VAR 0 6
48908: PUSH
48909: LD_VAR 0 2
48913: PPUSH
48914: CALL_OW 251
48918: ST_TO_ADDR
// d := GetDir ( building ) ;
48919: LD_ADDR_VAR 0 8
48923: PUSH
48924: LD_VAR 0 2
48928: PPUSH
48929: CALL_OW 254
48933: ST_TO_ADDR
// r := 4 ;
48934: LD_ADDR_VAR 0 9
48938: PUSH
48939: LD_INT 4
48941: ST_TO_ADDR
// for i := 1 to 5 do
48942: LD_ADDR_VAR 0 10
48946: PUSH
48947: DOUBLE
48948: LD_INT 1
48950: DEC
48951: ST_TO_ADDR
48952: LD_INT 5
48954: PUSH
48955: FOR_TO
48956: IFFALSE 49115
// begin _x := ShiftX ( x , d , r + i ) ;
48958: LD_ADDR_VAR 0 5
48962: PUSH
48963: LD_VAR 0 4
48967: PPUSH
48968: LD_VAR 0 8
48972: PPUSH
48973: LD_VAR 0 9
48977: PUSH
48978: LD_VAR 0 10
48982: PLUS
48983: PPUSH
48984: CALL_OW 272
48988: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
48989: LD_ADDR_VAR 0 7
48993: PUSH
48994: LD_VAR 0 6
48998: PPUSH
48999: LD_VAR 0 8
49003: PPUSH
49004: LD_VAR 0 9
49008: PUSH
49009: LD_VAR 0 10
49013: PLUS
49014: PPUSH
49015: CALL_OW 273
49019: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
49020: LD_VAR 0 5
49024: PPUSH
49025: LD_VAR 0 7
49029: PPUSH
49030: CALL_OW 488
49034: IFFALSE 49069
49036: PUSH
49037: LD_VAR 0 5
49041: PPUSH
49042: LD_VAR 0 7
49046: PPUSH
49047: CALL_OW 428
49051: PPUSH
49052: CALL_OW 247
49056: PUSH
49057: LD_INT 3
49059: PUSH
49060: LD_INT 2
49062: PUSH
49063: EMPTY
49064: LIST
49065: LIST
49066: IN
49067: NOT
49068: AND
49069: IFFALSE 49113
// begin ComMoveXY ( unit , _x , _y ) ;
49071: LD_VAR 0 1
49075: PPUSH
49076: LD_VAR 0 5
49080: PPUSH
49081: LD_VAR 0 7
49085: PPUSH
49086: CALL_OW 111
// result := [ _x , _y ] ;
49090: LD_ADDR_VAR 0 3
49094: PUSH
49095: LD_VAR 0 5
49099: PUSH
49100: LD_VAR 0 7
49104: PUSH
49105: EMPTY
49106: LIST
49107: LIST
49108: ST_TO_ADDR
// exit ;
49109: POP
49110: POP
49111: GO 49117
// end ; end ;
49113: GO 48955
49115: POP
49116: POP
// end ;
49117: LD_VAR 0 3
49121: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
49122: LD_INT 0
49124: PPUSH
49125: PPUSH
49126: PPUSH
// result := 0 ;
49127: LD_ADDR_VAR 0 3
49131: PUSH
49132: LD_INT 0
49134: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
49135: LD_VAR 0 1
49139: PUSH
49140: LD_INT 0
49142: LESS
49143: IFTRUE 49155
49145: PUSH
49146: LD_VAR 0 1
49150: PUSH
49151: LD_INT 8
49153: GREATER
49154: OR
49155: IFTRUE 49167
49157: PUSH
49158: LD_VAR 0 2
49162: PUSH
49163: LD_INT 0
49165: LESS
49166: OR
49167: IFTRUE 49179
49169: PUSH
49170: LD_VAR 0 2
49174: PUSH
49175: LD_INT 8
49177: GREATER
49178: OR
49179: IFFALSE 49183
// exit ;
49181: GO 49258
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
49183: LD_ADDR_VAR 0 4
49187: PUSH
49188: LD_INT 22
49190: PUSH
49191: LD_VAR 0 2
49195: PUSH
49196: EMPTY
49197: LIST
49198: LIST
49199: PPUSH
49200: CALL_OW 69
49204: PUSH
49205: FOR_IN
49206: IFFALSE 49256
// begin un := UnitShoot ( i ) ;
49208: LD_ADDR_VAR 0 5
49212: PUSH
49213: LD_VAR 0 4
49217: PPUSH
49218: CALL_OW 504
49222: ST_TO_ADDR
// if GetSide ( un ) = side1 then
49223: LD_VAR 0 5
49227: PPUSH
49228: CALL_OW 255
49232: PUSH
49233: LD_VAR 0 1
49237: EQUAL
49238: IFFALSE 49254
// begin result := un ;
49240: LD_ADDR_VAR 0 3
49244: PUSH
49245: LD_VAR 0 5
49249: ST_TO_ADDR
// exit ;
49250: POP
49251: POP
49252: GO 49258
// end ; end ;
49254: GO 49205
49256: POP
49257: POP
// end ;
49258: LD_VAR 0 3
49262: RET
// export function GetCargoBay ( units ) ; begin
49263: LD_INT 0
49265: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
49266: LD_ADDR_VAR 0 2
49270: PUSH
49271: LD_VAR 0 1
49275: PPUSH
49276: LD_INT 2
49278: PUSH
49279: LD_INT 34
49281: PUSH
49282: LD_INT 12
49284: PUSH
49285: EMPTY
49286: LIST
49287: LIST
49288: PUSH
49289: LD_INT 34
49291: PUSH
49292: LD_INT 51
49294: PUSH
49295: EMPTY
49296: LIST
49297: LIST
49298: PUSH
49299: LD_INT 34
49301: PUSH
49302: LD_INT 32
49304: PUSH
49305: EMPTY
49306: LIST
49307: LIST
49308: PUSH
49309: LD_INT 34
49311: PUSH
49312: LD_INT 89
49314: PUSH
49315: EMPTY
49316: LIST
49317: LIST
49318: PUSH
49319: EMPTY
49320: LIST
49321: LIST
49322: LIST
49323: LIST
49324: LIST
49325: PPUSH
49326: CALL_OW 72
49330: ST_TO_ADDR
// end ;
49331: LD_VAR 0 2
49335: RET
// export function Negate ( value ) ; begin
49336: LD_INT 0
49338: PPUSH
// result := not value ;
49339: LD_ADDR_VAR 0 2
49343: PUSH
49344: LD_VAR 0 1
49348: NOT
49349: ST_TO_ADDR
// end ;
49350: LD_VAR 0 2
49354: RET
// export function Inc ( value ) ; begin
49355: LD_INT 0
49357: PPUSH
// result := value + 1 ;
49358: LD_ADDR_VAR 0 2
49362: PUSH
49363: LD_VAR 0 1
49367: PUSH
49368: LD_INT 1
49370: PLUS
49371: ST_TO_ADDR
// end ;
49372: LD_VAR 0 2
49376: RET
// export function Dec ( value ) ; begin
49377: LD_INT 0
49379: PPUSH
// result := value - 1 ;
49380: LD_ADDR_VAR 0 2
49384: PUSH
49385: LD_VAR 0 1
49389: PUSH
49390: LD_INT 1
49392: MINUS
49393: ST_TO_ADDR
// end ;
49394: LD_VAR 0 2
49398: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
49399: LD_INT 0
49401: PPUSH
49402: PPUSH
49403: PPUSH
49404: PPUSH
49405: PPUSH
49406: PPUSH
49407: PPUSH
49408: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
49409: LD_VAR 0 1
49413: PPUSH
49414: LD_VAR 0 2
49418: PPUSH
49419: CALL_OW 488
49423: NOT
49424: IFTRUE 49443
49426: PUSH
49427: LD_VAR 0 3
49431: PPUSH
49432: LD_VAR 0 4
49436: PPUSH
49437: CALL_OW 488
49441: NOT
49442: OR
49443: IFFALSE 49456
// begin result := - 1 ;
49445: LD_ADDR_VAR 0 5
49449: PUSH
49450: LD_INT 1
49452: NEG
49453: ST_TO_ADDR
// exit ;
49454: GO 49691
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
49456: LD_ADDR_VAR 0 12
49460: PUSH
49461: LD_VAR 0 1
49465: PPUSH
49466: LD_VAR 0 2
49470: PPUSH
49471: LD_VAR 0 3
49475: PPUSH
49476: LD_VAR 0 4
49480: PPUSH
49481: CALL 48527 0 4
49485: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
49486: LD_ADDR_VAR 0 11
49490: PUSH
49491: LD_VAR 0 1
49495: PPUSH
49496: LD_VAR 0 2
49500: PPUSH
49501: LD_VAR 0 12
49505: PUSH
49506: LD_INT 1
49508: ARRAY
49509: PPUSH
49510: LD_VAR 0 12
49514: PUSH
49515: LD_INT 2
49517: ARRAY
49518: PPUSH
49519: CALL_OW 298
49523: ST_TO_ADDR
// distance := 9999 ;
49524: LD_ADDR_VAR 0 10
49528: PUSH
49529: LD_INT 9999
49531: ST_TO_ADDR
// for i := 0 to 5 do
49532: LD_ADDR_VAR 0 6
49536: PUSH
49537: DOUBLE
49538: LD_INT 0
49540: DEC
49541: ST_TO_ADDR
49542: LD_INT 5
49544: PUSH
49545: FOR_TO
49546: IFFALSE 49689
// begin _x := ShiftX ( x1 , i , centerDist ) ;
49548: LD_ADDR_VAR 0 7
49552: PUSH
49553: LD_VAR 0 1
49557: PPUSH
49558: LD_VAR 0 6
49562: PPUSH
49563: LD_VAR 0 11
49567: PPUSH
49568: CALL_OW 272
49572: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
49573: LD_ADDR_VAR 0 8
49577: PUSH
49578: LD_VAR 0 2
49582: PPUSH
49583: LD_VAR 0 6
49587: PPUSH
49588: LD_VAR 0 11
49592: PPUSH
49593: CALL_OW 273
49597: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
49598: LD_VAR 0 7
49602: PPUSH
49603: LD_VAR 0 8
49607: PPUSH
49608: CALL_OW 488
49612: NOT
49613: IFFALSE 49617
// continue ;
49615: GO 49545
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
49617: LD_ADDR_VAR 0 9
49621: PUSH
49622: LD_VAR 0 12
49626: PUSH
49627: LD_INT 1
49629: ARRAY
49630: PPUSH
49631: LD_VAR 0 12
49635: PUSH
49636: LD_INT 2
49638: ARRAY
49639: PPUSH
49640: LD_VAR 0 7
49644: PPUSH
49645: LD_VAR 0 8
49649: PPUSH
49650: CALL_OW 298
49654: ST_TO_ADDR
// if tmp < distance then
49655: LD_VAR 0 9
49659: PUSH
49660: LD_VAR 0 10
49664: LESS
49665: IFFALSE 49687
// begin result := i ;
49667: LD_ADDR_VAR 0 5
49671: PUSH
49672: LD_VAR 0 6
49676: ST_TO_ADDR
// distance := tmp ;
49677: LD_ADDR_VAR 0 10
49681: PUSH
49682: LD_VAR 0 9
49686: ST_TO_ADDR
// end ; end ;
49687: GO 49545
49689: POP
49690: POP
// end ;
49691: LD_VAR 0 5
49695: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
49696: LD_INT 0
49698: PPUSH
49699: PPUSH
// if not driver or not IsInUnit ( driver ) then
49700: LD_VAR 0 1
49704: NOT
49705: IFTRUE 49719
49707: PUSH
49708: LD_VAR 0 1
49712: PPUSH
49713: CALL_OW 310
49717: NOT
49718: OR
49719: IFFALSE 49723
// exit ;
49721: GO 49813
// vehicle := IsInUnit ( driver ) ;
49723: LD_ADDR_VAR 0 3
49727: PUSH
49728: LD_VAR 0 1
49732: PPUSH
49733: CALL_OW 310
49737: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
49738: LD_VAR 0 1
49742: PPUSH
49743: LD_STRING \
49745: PUSH
49746: LD_INT 0
49748: PUSH
49749: LD_INT 0
49751: PUSH
49752: LD_INT 0
49754: PUSH
49755: LD_INT 0
49757: PUSH
49758: LD_INT 0
49760: PUSH
49761: LD_INT 0
49763: PUSH
49764: EMPTY
49765: LIST
49766: LIST
49767: LIST
49768: LIST
49769: LIST
49770: LIST
49771: LIST
49772: PUSH
49773: LD_STRING E
49775: PUSH
49776: LD_INT 0
49778: PUSH
49779: LD_INT 0
49781: PUSH
49782: LD_VAR 0 3
49786: PUSH
49787: LD_INT 0
49789: PUSH
49790: LD_INT 0
49792: PUSH
49793: LD_INT 0
49795: PUSH
49796: EMPTY
49797: LIST
49798: LIST
49799: LIST
49800: LIST
49801: LIST
49802: LIST
49803: LIST
49804: PUSH
49805: EMPTY
49806: LIST
49807: LIST
49808: PPUSH
49809: CALL_OW 446
// end ;
49813: LD_VAR 0 2
49817: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
49818: LD_INT 0
49820: PPUSH
49821: PPUSH
// if not driver or not IsInUnit ( driver ) then
49822: LD_VAR 0 1
49826: NOT
49827: IFTRUE 49841
49829: PUSH
49830: LD_VAR 0 1
49834: PPUSH
49835: CALL_OW 310
49839: NOT
49840: OR
49841: IFFALSE 49845
// exit ;
49843: GO 49935
// vehicle := IsInUnit ( driver ) ;
49845: LD_ADDR_VAR 0 3
49849: PUSH
49850: LD_VAR 0 1
49854: PPUSH
49855: CALL_OW 310
49859: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
49860: LD_VAR 0 1
49864: PPUSH
49865: LD_STRING \
49867: PUSH
49868: LD_INT 0
49870: PUSH
49871: LD_INT 0
49873: PUSH
49874: LD_INT 0
49876: PUSH
49877: LD_INT 0
49879: PUSH
49880: LD_INT 0
49882: PUSH
49883: LD_INT 0
49885: PUSH
49886: EMPTY
49887: LIST
49888: LIST
49889: LIST
49890: LIST
49891: LIST
49892: LIST
49893: LIST
49894: PUSH
49895: LD_STRING E
49897: PUSH
49898: LD_INT 0
49900: PUSH
49901: LD_INT 0
49903: PUSH
49904: LD_VAR 0 3
49908: PUSH
49909: LD_INT 0
49911: PUSH
49912: LD_INT 0
49914: PUSH
49915: LD_INT 0
49917: PUSH
49918: EMPTY
49919: LIST
49920: LIST
49921: LIST
49922: LIST
49923: LIST
49924: LIST
49925: LIST
49926: PUSH
49927: EMPTY
49928: LIST
49929: LIST
49930: PPUSH
49931: CALL_OW 447
// end ;
49935: LD_VAR 0 2
49939: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
49940: LD_INT 0
49942: PPUSH
49943: PPUSH
49944: PPUSH
// tmp := [ ] ;
49945: LD_ADDR_VAR 0 5
49949: PUSH
49950: EMPTY
49951: ST_TO_ADDR
// for i in units do
49952: LD_ADDR_VAR 0 4
49956: PUSH
49957: LD_VAR 0 1
49961: PUSH
49962: FOR_IN
49963: IFFALSE 50001
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
49965: LD_ADDR_VAR 0 5
49969: PUSH
49970: LD_VAR 0 5
49974: PPUSH
49975: LD_VAR 0 5
49979: PUSH
49980: LD_INT 1
49982: PLUS
49983: PPUSH
49984: LD_VAR 0 4
49988: PPUSH
49989: CALL_OW 256
49993: PPUSH
49994: CALL_OW 2
49998: ST_TO_ADDR
49999: GO 49962
50001: POP
50002: POP
// if not tmp then
50003: LD_VAR 0 5
50007: NOT
50008: IFFALSE 50012
// exit ;
50010: GO 50060
// if asc then
50012: LD_VAR 0 2
50016: IFFALSE 50040
// result := SortListByListAsc ( units , tmp ) else
50018: LD_ADDR_VAR 0 3
50022: PUSH
50023: LD_VAR 0 1
50027: PPUSH
50028: LD_VAR 0 5
50032: PPUSH
50033: CALL_OW 76
50037: ST_TO_ADDR
50038: GO 50060
// result := SortListByListDesc ( units , tmp ) ;
50040: LD_ADDR_VAR 0 3
50044: PUSH
50045: LD_VAR 0 1
50049: PPUSH
50050: LD_VAR 0 5
50054: PPUSH
50055: CALL_OW 77
50059: ST_TO_ADDR
// end ;
50060: LD_VAR 0 3
50064: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
50065: LD_INT 0
50067: PPUSH
50068: PPUSH
// task := GetTaskList ( mech ) ;
50069: LD_ADDR_VAR 0 4
50073: PUSH
50074: LD_VAR 0 1
50078: PPUSH
50079: CALL_OW 437
50083: ST_TO_ADDR
// if not task then
50084: LD_VAR 0 4
50088: NOT
50089: IFFALSE 50093
// exit ;
50091: GO 50137
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
50093: LD_ADDR_VAR 0 3
50097: PUSH
50098: LD_VAR 0 4
50102: PUSH
50103: LD_INT 1
50105: ARRAY
50106: PUSH
50107: LD_INT 1
50109: ARRAY
50110: PUSH
50111: LD_STRING r
50113: EQUAL
50114: IFFALSE 50136
50116: PUSH
50117: LD_VAR 0 4
50121: PUSH
50122: LD_INT 1
50124: ARRAY
50125: PUSH
50126: LD_INT 4
50128: ARRAY
50129: PUSH
50130: LD_VAR 0 2
50134: EQUAL
50135: AND
50136: ST_TO_ADDR
// end ;
50137: LD_VAR 0 3
50141: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
50142: LD_INT 0
50144: PPUSH
// SetDir ( unit , d ) ;
50145: LD_VAR 0 1
50149: PPUSH
50150: LD_VAR 0 4
50154: PPUSH
50155: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
50159: LD_ADDR_VAR 0 6
50163: PUSH
50164: LD_VAR 0 1
50168: PPUSH
50169: LD_VAR 0 2
50173: PPUSH
50174: LD_VAR 0 3
50178: PPUSH
50179: LD_VAR 0 5
50183: PPUSH
50184: CALL_OW 48
50188: ST_TO_ADDR
// end ;
50189: LD_VAR 0 6
50193: RET
// export function ToNaturalNumber ( number ) ; begin
50194: LD_INT 0
50196: PPUSH
// result := number div 1 ;
50197: LD_ADDR_VAR 0 2
50201: PUSH
50202: LD_VAR 0 1
50206: PUSH
50207: LD_INT 1
50209: DIV
50210: ST_TO_ADDR
// if number < 0 then
50211: LD_VAR 0 1
50215: PUSH
50216: LD_INT 0
50218: LESS
50219: IFFALSE 50229
// result := 0 ;
50221: LD_ADDR_VAR 0 2
50225: PUSH
50226: LD_INT 0
50228: ST_TO_ADDR
// end ;
50229: LD_VAR 0 2
50233: RET
// export function SortByBType ( buildings , asc ) ; var b , tmp ; begin
50234: LD_INT 0
50236: PPUSH
50237: PPUSH
50238: PPUSH
// if not buildings then
50239: LD_VAR 0 1
50243: NOT
50244: IFFALSE 50248
// exit ;
50246: GO 50363
// tmp := [ ] ;
50248: LD_ADDR_VAR 0 5
50252: PUSH
50253: EMPTY
50254: ST_TO_ADDR
// for b in buildings do
50255: LD_ADDR_VAR 0 4
50259: PUSH
50260: LD_VAR 0 1
50264: PUSH
50265: FOR_IN
50266: IFFALSE 50304
// tmp := Replace ( tmp , tmp + 1 , GetBType ( b ) ) ;
50268: LD_ADDR_VAR 0 5
50272: PUSH
50273: LD_VAR 0 5
50277: PPUSH
50278: LD_VAR 0 5
50282: PUSH
50283: LD_INT 1
50285: PLUS
50286: PPUSH
50287: LD_VAR 0 4
50291: PPUSH
50292: CALL_OW 266
50296: PPUSH
50297: CALL_OW 1
50301: ST_TO_ADDR
50302: GO 50265
50304: POP
50305: POP
// if not tmp then
50306: LD_VAR 0 5
50310: NOT
50311: IFFALSE 50315
// exit ;
50313: GO 50363
// if asc then
50315: LD_VAR 0 2
50319: IFFALSE 50343
// result := SortListByListAsc ( buildings , tmp ) else
50321: LD_ADDR_VAR 0 3
50325: PUSH
50326: LD_VAR 0 1
50330: PPUSH
50331: LD_VAR 0 5
50335: PPUSH
50336: CALL_OW 76
50340: ST_TO_ADDR
50341: GO 50363
// result := SortListByListDesc ( buildings , tmp ) ;
50343: LD_ADDR_VAR 0 3
50347: PUSH
50348: LD_VAR 0 1
50352: PPUSH
50353: LD_VAR 0 5
50357: PPUSH
50358: CALL_OW 77
50362: ST_TO_ADDR
// end ;
50363: LD_VAR 0 3
50367: RET
// export function SortByClass ( units , class ) ; var un ; begin
50368: LD_INT 0
50370: PPUSH
50371: PPUSH
// if not units or not class then
50372: LD_VAR 0 1
50376: NOT
50377: IFTRUE 50386
50379: PUSH
50380: LD_VAR 0 2
50384: NOT
50385: OR
50386: IFFALSE 50390
// exit ;
50388: GO 50485
// result := [ ] ;
50390: LD_ADDR_VAR 0 3
50394: PUSH
50395: EMPTY
50396: ST_TO_ADDR
// for un in units do
50397: LD_ADDR_VAR 0 4
50401: PUSH
50402: LD_VAR 0 1
50406: PUSH
50407: FOR_IN
50408: IFFALSE 50483
// if GetClass ( un ) = class then
50410: LD_VAR 0 4
50414: PPUSH
50415: CALL_OW 257
50419: PUSH
50420: LD_VAR 0 2
50424: EQUAL
50425: IFFALSE 50452
// result := Insert ( result , 1 , un ) else
50427: LD_ADDR_VAR 0 3
50431: PUSH
50432: LD_VAR 0 3
50436: PPUSH
50437: LD_INT 1
50439: PPUSH
50440: LD_VAR 0 4
50444: PPUSH
50445: CALL_OW 2
50449: ST_TO_ADDR
50450: GO 50481
// result := Replace ( result , result + 1 , un ) ;
50452: LD_ADDR_VAR 0 3
50456: PUSH
50457: LD_VAR 0 3
50461: PPUSH
50462: LD_VAR 0 3
50466: PUSH
50467: LD_INT 1
50469: PLUS
50470: PPUSH
50471: LD_VAR 0 4
50475: PPUSH
50476: CALL_OW 1
50480: ST_TO_ADDR
50481: GO 50407
50483: POP
50484: POP
// end ;
50485: LD_VAR 0 3
50489: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
50490: LD_INT 0
50492: PPUSH
50493: PPUSH
50494: PPUSH
50495: PPUSH
50496: PPUSH
50497: PPUSH
50498: PPUSH
// result := [ ] ;
50499: LD_ADDR_VAR 0 4
50503: PUSH
50504: EMPTY
50505: ST_TO_ADDR
// if x - r < 0 then
50506: LD_VAR 0 1
50510: PUSH
50511: LD_VAR 0 3
50515: MINUS
50516: PUSH
50517: LD_INT 0
50519: LESS
50520: IFFALSE 50532
// min_x := 0 else
50522: LD_ADDR_VAR 0 8
50526: PUSH
50527: LD_INT 0
50529: ST_TO_ADDR
50530: GO 50548
// min_x := x - r ;
50532: LD_ADDR_VAR 0 8
50536: PUSH
50537: LD_VAR 0 1
50541: PUSH
50542: LD_VAR 0 3
50546: MINUS
50547: ST_TO_ADDR
// if y - r < 0 then
50548: LD_VAR 0 2
50552: PUSH
50553: LD_VAR 0 3
50557: MINUS
50558: PUSH
50559: LD_INT 0
50561: LESS
50562: IFFALSE 50574
// min_y := 0 else
50564: LD_ADDR_VAR 0 7
50568: PUSH
50569: LD_INT 0
50571: ST_TO_ADDR
50572: GO 50590
// min_y := y - r ;
50574: LD_ADDR_VAR 0 7
50578: PUSH
50579: LD_VAR 0 2
50583: PUSH
50584: LD_VAR 0 3
50588: MINUS
50589: ST_TO_ADDR
// max_x := x + r ;
50590: LD_ADDR_VAR 0 9
50594: PUSH
50595: LD_VAR 0 1
50599: PUSH
50600: LD_VAR 0 3
50604: PLUS
50605: ST_TO_ADDR
// max_y := y + r ;
50606: LD_ADDR_VAR 0 10
50610: PUSH
50611: LD_VAR 0 2
50615: PUSH
50616: LD_VAR 0 3
50620: PLUS
50621: ST_TO_ADDR
// for _x = min_x to max_x do
50622: LD_ADDR_VAR 0 5
50626: PUSH
50627: DOUBLE
50628: LD_VAR 0 8
50632: DEC
50633: ST_TO_ADDR
50634: LD_VAR 0 9
50638: PUSH
50639: FOR_TO
50640: IFFALSE 50741
// for _y = min_y to max_y do
50642: LD_ADDR_VAR 0 6
50646: PUSH
50647: DOUBLE
50648: LD_VAR 0 7
50652: DEC
50653: ST_TO_ADDR
50654: LD_VAR 0 10
50658: PUSH
50659: FOR_TO
50660: IFFALSE 50737
// begin if not ValidHex ( _x , _y ) then
50662: LD_VAR 0 5
50666: PPUSH
50667: LD_VAR 0 6
50671: PPUSH
50672: CALL_OW 488
50676: NOT
50677: IFFALSE 50681
// continue ;
50679: GO 50659
// if GetResourceTypeXY ( _x , _y ) then
50681: LD_VAR 0 5
50685: PPUSH
50686: LD_VAR 0 6
50690: PPUSH
50691: CALL_OW 283
50695: IFFALSE 50735
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
50697: LD_ADDR_VAR 0 4
50701: PUSH
50702: LD_VAR 0 4
50706: PPUSH
50707: LD_VAR 0 4
50711: PUSH
50712: LD_INT 1
50714: PLUS
50715: PPUSH
50716: LD_VAR 0 5
50720: PUSH
50721: LD_VAR 0 6
50725: PUSH
50726: EMPTY
50727: LIST
50728: LIST
50729: PPUSH
50730: CALL_OW 1
50734: ST_TO_ADDR
// end ;
50735: GO 50659
50737: POP
50738: POP
50739: GO 50639
50741: POP
50742: POP
// end ;
50743: LD_VAR 0 4
50747: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
50748: LD_INT 0
50750: PPUSH
50751: PPUSH
50752: PPUSH
50753: PPUSH
50754: PPUSH
50755: PPUSH
50756: PPUSH
50757: PPUSH
// if not units then
50758: LD_VAR 0 1
50762: NOT
50763: IFFALSE 50767
// exit ;
50765: GO 51299
// result := UnitFilter ( units , [ f_ok ] ) ;
50767: LD_ADDR_VAR 0 3
50771: PUSH
50772: LD_VAR 0 1
50776: PPUSH
50777: LD_INT 50
50779: PUSH
50780: EMPTY
50781: LIST
50782: PPUSH
50783: CALL_OW 72
50787: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
50788: LD_ADDR_VAR 0 8
50792: PUSH
50793: LD_VAR 0 1
50797: PUSH
50798: LD_INT 1
50800: ARRAY
50801: PPUSH
50802: CALL_OW 255
50806: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
50807: LD_ADDR_VAR 0 10
50811: PUSH
50812: LD_INT 29
50814: PUSH
50815: LD_INT 91
50817: PUSH
50818: LD_INT 49
50820: PUSH
50821: EMPTY
50822: LIST
50823: LIST
50824: LIST
50825: ST_TO_ADDR
// if not result then
50826: LD_VAR 0 3
50830: NOT
50831: IFFALSE 50835
// exit ;
50833: GO 51299
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
50835: LD_ADDR_VAR 0 5
50839: PUSH
50840: LD_INT 81
50842: PUSH
50843: LD_VAR 0 8
50847: PUSH
50848: EMPTY
50849: LIST
50850: LIST
50851: PPUSH
50852: CALL_OW 69
50856: ST_TO_ADDR
// for i in result do
50857: LD_ADDR_VAR 0 4
50861: PUSH
50862: LD_VAR 0 3
50866: PUSH
50867: FOR_IN
50868: IFFALSE 51297
// begin tag := GetTag ( i ) + 1 ;
50870: LD_ADDR_VAR 0 9
50874: PUSH
50875: LD_VAR 0 4
50879: PPUSH
50880: CALL_OW 110
50884: PUSH
50885: LD_INT 1
50887: PLUS
50888: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
50889: LD_ADDR_VAR 0 7
50893: PUSH
50894: LD_VAR 0 4
50898: PPUSH
50899: CALL_OW 250
50903: PPUSH
50904: LD_VAR 0 4
50908: PPUSH
50909: CALL_OW 251
50913: PPUSH
50914: LD_INT 4
50916: PPUSH
50917: CALL 50490 0 3
50921: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
50922: LD_VAR 0 4
50926: PPUSH
50927: CALL_OW 247
50931: PUSH
50932: LD_INT 2
50934: EQUAL
50935: IFFALSE 50947
50937: PUSH
50938: LD_VAR 0 7
50942: PUSH
50943: LD_INT 2
50945: GREATER
50946: AND
50947: IFFALSE 50967
50949: PUSH
50950: LD_VAR 0 4
50954: PPUSH
50955: CALL_OW 264
50959: PUSH
50960: LD_VAR 0 10
50964: IN
50965: NOT
50966: AND
50967: IFFALSE 51006
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
50969: LD_VAR 0 4
50973: PPUSH
50974: LD_VAR 0 7
50978: PUSH
50979: LD_INT 1
50981: ARRAY
50982: PUSH
50983: LD_INT 1
50985: ARRAY
50986: PPUSH
50987: LD_VAR 0 7
50991: PUSH
50992: LD_INT 1
50994: ARRAY
50995: PUSH
50996: LD_INT 2
50998: ARRAY
50999: PPUSH
51000: CALL_OW 116
51004: GO 51295
// if path > tag then
51006: LD_VAR 0 2
51010: PUSH
51011: LD_VAR 0 9
51015: GREATER
51016: IFFALSE 51224
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
51018: LD_ADDR_VAR 0 6
51022: PUSH
51023: LD_VAR 0 5
51027: PPUSH
51028: LD_INT 91
51030: PUSH
51031: LD_VAR 0 4
51035: PUSH
51036: LD_INT 8
51038: PUSH
51039: EMPTY
51040: LIST
51041: LIST
51042: LIST
51043: PPUSH
51044: CALL_OW 72
51048: ST_TO_ADDR
// if nearEnemy then
51049: LD_VAR 0 6
51053: IFFALSE 51122
// begin if GetWeapon ( i ) = ru_time_lapser then
51055: LD_VAR 0 4
51059: PPUSH
51060: CALL_OW 264
51064: PUSH
51065: LD_INT 49
51067: EQUAL
51068: IFFALSE 51096
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
51070: LD_VAR 0 4
51074: PPUSH
51075: LD_VAR 0 6
51079: PPUSH
51080: LD_VAR 0 4
51084: PPUSH
51085: CALL_OW 74
51089: PPUSH
51090: CALL_OW 112
51094: GO 51120
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
51096: LD_VAR 0 4
51100: PPUSH
51101: LD_VAR 0 6
51105: PPUSH
51106: LD_VAR 0 4
51110: PPUSH
51111: CALL_OW 74
51115: PPUSH
51116: CALL 52380 0 2
// end else
51120: GO 51222
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
51122: LD_VAR 0 4
51126: PPUSH
51127: LD_VAR 0 2
51131: PUSH
51132: LD_VAR 0 9
51136: ARRAY
51137: PUSH
51138: LD_INT 1
51140: ARRAY
51141: PPUSH
51142: LD_VAR 0 2
51146: PUSH
51147: LD_VAR 0 9
51151: ARRAY
51152: PUSH
51153: LD_INT 2
51155: ARRAY
51156: PPUSH
51157: CALL_OW 297
51161: PUSH
51162: LD_INT 6
51164: GREATER
51165: IFFALSE 51208
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
51167: LD_VAR 0 4
51171: PPUSH
51172: LD_VAR 0 2
51176: PUSH
51177: LD_VAR 0 9
51181: ARRAY
51182: PUSH
51183: LD_INT 1
51185: ARRAY
51186: PPUSH
51187: LD_VAR 0 2
51191: PUSH
51192: LD_VAR 0 9
51196: ARRAY
51197: PUSH
51198: LD_INT 2
51200: ARRAY
51201: PPUSH
51202: CALL_OW 114
51206: GO 51222
// SetTag ( i , tag ) ;
51208: LD_VAR 0 4
51212: PPUSH
51213: LD_VAR 0 9
51217: PPUSH
51218: CALL_OW 109
// end else
51222: GO 51295
// if enemy then
51224: LD_VAR 0 5
51228: IFFALSE 51295
// begin if GetWeapon ( i ) = ru_time_lapser then
51230: LD_VAR 0 4
51234: PPUSH
51235: CALL_OW 264
51239: PUSH
51240: LD_INT 49
51242: EQUAL
51243: IFFALSE 51271
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
51245: LD_VAR 0 4
51249: PPUSH
51250: LD_VAR 0 5
51254: PPUSH
51255: LD_VAR 0 4
51259: PPUSH
51260: CALL_OW 74
51264: PPUSH
51265: CALL_OW 112
51269: GO 51295
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
51271: LD_VAR 0 4
51275: PPUSH
51276: LD_VAR 0 5
51280: PPUSH
51281: LD_VAR 0 4
51285: PPUSH
51286: CALL_OW 74
51290: PPUSH
51291: CALL 52380 0 2
// end ; end ;
51295: GO 50867
51297: POP
51298: POP
// end ;
51299: LD_VAR 0 3
51303: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
51304: LD_INT 0
51306: PPUSH
51307: PPUSH
51308: PPUSH
// if not unit or IsInUnit ( unit ) then
51309: LD_VAR 0 1
51313: NOT
51314: IFTRUE 51327
51316: PUSH
51317: LD_VAR 0 1
51321: PPUSH
51322: CALL_OW 310
51326: OR
51327: IFFALSE 51331
// exit ;
51329: GO 51422
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
51331: LD_ADDR_VAR 0 4
51335: PUSH
51336: LD_VAR 0 1
51340: PPUSH
51341: CALL_OW 250
51345: PPUSH
51346: LD_VAR 0 2
51350: PPUSH
51351: LD_INT 1
51353: PPUSH
51354: CALL_OW 272
51358: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
51359: LD_ADDR_VAR 0 5
51363: PUSH
51364: LD_VAR 0 1
51368: PPUSH
51369: CALL_OW 251
51373: PPUSH
51374: LD_VAR 0 2
51378: PPUSH
51379: LD_INT 1
51381: PPUSH
51382: CALL_OW 273
51386: ST_TO_ADDR
// if ValidHex ( x , y ) then
51387: LD_VAR 0 4
51391: PPUSH
51392: LD_VAR 0 5
51396: PPUSH
51397: CALL_OW 488
51401: IFFALSE 51422
// ComTurnXY ( unit , x , y ) ;
51403: LD_VAR 0 1
51407: PPUSH
51408: LD_VAR 0 4
51412: PPUSH
51413: LD_VAR 0 5
51417: PPUSH
51418: CALL_OW 118
// end ;
51422: LD_VAR 0 3
51426: RET
// export function SeeUnits ( side , units ) ; var i ; begin
51427: LD_INT 0
51429: PPUSH
51430: PPUSH
// result := false ;
51431: LD_ADDR_VAR 0 3
51435: PUSH
51436: LD_INT 0
51438: ST_TO_ADDR
// if not units then
51439: LD_VAR 0 2
51443: NOT
51444: IFFALSE 51448
// exit ;
51446: GO 51493
// for i in units do
51448: LD_ADDR_VAR 0 4
51452: PUSH
51453: LD_VAR 0 2
51457: PUSH
51458: FOR_IN
51459: IFFALSE 51491
// if See ( side , i ) then
51461: LD_VAR 0 1
51465: PPUSH
51466: LD_VAR 0 4
51470: PPUSH
51471: CALL_OW 292
51475: IFFALSE 51489
// begin result := true ;
51477: LD_ADDR_VAR 0 3
51481: PUSH
51482: LD_INT 1
51484: ST_TO_ADDR
// exit ;
51485: POP
51486: POP
51487: GO 51493
// end ;
51489: GO 51458
51491: POP
51492: POP
// end ;
51493: LD_VAR 0 3
51497: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
51498: LD_INT 0
51500: PPUSH
51501: PPUSH
51502: PPUSH
51503: PPUSH
// if not unit or not points then
51504: LD_VAR 0 1
51508: NOT
51509: IFTRUE 51518
51511: PUSH
51512: LD_VAR 0 2
51516: NOT
51517: OR
51518: IFFALSE 51522
// exit ;
51520: GO 51612
// dist := 99999 ;
51522: LD_ADDR_VAR 0 5
51526: PUSH
51527: LD_INT 99999
51529: ST_TO_ADDR
// for i in points do
51530: LD_ADDR_VAR 0 4
51534: PUSH
51535: LD_VAR 0 2
51539: PUSH
51540: FOR_IN
51541: IFFALSE 51610
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
51543: LD_ADDR_VAR 0 6
51547: PUSH
51548: LD_VAR 0 1
51552: PPUSH
51553: LD_VAR 0 4
51557: PUSH
51558: LD_INT 1
51560: ARRAY
51561: PPUSH
51562: LD_VAR 0 4
51566: PUSH
51567: LD_INT 2
51569: ARRAY
51570: PPUSH
51571: CALL_OW 297
51575: ST_TO_ADDR
// if tmpDist < dist then
51576: LD_VAR 0 6
51580: PUSH
51581: LD_VAR 0 5
51585: LESS
51586: IFFALSE 51608
// begin result := i ;
51588: LD_ADDR_VAR 0 3
51592: PUSH
51593: LD_VAR 0 4
51597: ST_TO_ADDR
// dist := tmpDist ;
51598: LD_ADDR_VAR 0 5
51602: PUSH
51603: LD_VAR 0 6
51607: ST_TO_ADDR
// end ; end ;
51608: GO 51540
51610: POP
51611: POP
// end ;
51612: LD_VAR 0 3
51616: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
51617: LD_INT 0
51619: PPUSH
// uc_side := side ;
51620: LD_ADDR_OWVAR 20
51624: PUSH
51625: LD_VAR 0 1
51629: ST_TO_ADDR
// uc_nation := 3 ;
51630: LD_ADDR_OWVAR 21
51634: PUSH
51635: LD_INT 3
51637: ST_TO_ADDR
// vc_chassis := 25 ;
51638: LD_ADDR_OWVAR 37
51642: PUSH
51643: LD_INT 25
51645: ST_TO_ADDR
// vc_engine := engine_siberite ;
51646: LD_ADDR_OWVAR 39
51650: PUSH
51651: LD_INT 3
51653: ST_TO_ADDR
// vc_control := control_computer ;
51654: LD_ADDR_OWVAR 38
51658: PUSH
51659: LD_INT 3
51661: ST_TO_ADDR
// vc_weapon := 59 ;
51662: LD_ADDR_OWVAR 40
51666: PUSH
51667: LD_INT 59
51669: ST_TO_ADDR
// result := CreateVehicle ;
51670: LD_ADDR_VAR 0 5
51674: PUSH
51675: CALL_OW 45
51679: ST_TO_ADDR
// SetDir ( result , d ) ;
51680: LD_VAR 0 5
51684: PPUSH
51685: LD_VAR 0 4
51689: PPUSH
51690: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
51694: LD_VAR 0 5
51698: PPUSH
51699: LD_VAR 0 2
51703: PPUSH
51704: LD_VAR 0 3
51708: PPUSH
51709: LD_INT 0
51711: PPUSH
51712: CALL_OW 48
// end ;
51716: LD_VAR 0 5
51720: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
51721: LD_INT 0
51723: PPUSH
51724: PPUSH
51725: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
51726: LD_ADDR_VAR 0 2
51730: PUSH
51731: LD_INT 0
51733: PUSH
51734: LD_INT 0
51736: PUSH
51737: LD_INT 0
51739: PUSH
51740: LD_INT 0
51742: PUSH
51743: EMPTY
51744: LIST
51745: LIST
51746: LIST
51747: LIST
51748: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
51749: LD_VAR 0 1
51753: NOT
51754: IFTRUE 51787
51756: PUSH
51757: LD_VAR 0 1
51761: PPUSH
51762: CALL_OW 264
51766: PUSH
51767: LD_INT 12
51769: PUSH
51770: LD_INT 51
51772: PUSH
51773: LD_INT 32
51775: PUSH
51776: LD_INT 89
51778: PUSH
51779: EMPTY
51780: LIST
51781: LIST
51782: LIST
51783: LIST
51784: IN
51785: NOT
51786: OR
51787: IFFALSE 51791
// exit ;
51789: GO 51889
// for i := 1 to 3 do
51791: LD_ADDR_VAR 0 3
51795: PUSH
51796: DOUBLE
51797: LD_INT 1
51799: DEC
51800: ST_TO_ADDR
51801: LD_INT 3
51803: PUSH
51804: FOR_TO
51805: IFFALSE 51887
// begin tmp := GetCargo ( cargo , i ) ;
51807: LD_ADDR_VAR 0 4
51811: PUSH
51812: LD_VAR 0 1
51816: PPUSH
51817: LD_VAR 0 3
51821: PPUSH
51822: CALL_OW 289
51826: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
51827: LD_ADDR_VAR 0 2
51831: PUSH
51832: LD_VAR 0 2
51836: PPUSH
51837: LD_VAR 0 3
51841: PPUSH
51842: LD_VAR 0 4
51846: PPUSH
51847: CALL_OW 1
51851: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
51852: LD_ADDR_VAR 0 2
51856: PUSH
51857: LD_VAR 0 2
51861: PPUSH
51862: LD_INT 4
51864: PPUSH
51865: LD_VAR 0 2
51869: PUSH
51870: LD_INT 4
51872: ARRAY
51873: PUSH
51874: LD_VAR 0 4
51878: PLUS
51879: PPUSH
51880: CALL_OW 1
51884: ST_TO_ADDR
// end ;
51885: GO 51804
51887: POP
51888: POP
// end ;
51889: LD_VAR 0 2
51893: RET
// export function Length ( array ) ; begin
51894: LD_INT 0
51896: PPUSH
// result := array + 0 ;
51897: LD_ADDR_VAR 0 2
51901: PUSH
51902: LD_VAR 0 1
51906: PUSH
51907: LD_INT 0
51909: PLUS
51910: ST_TO_ADDR
// end ;
51911: LD_VAR 0 2
51915: RET
// export function PrepareArray ( array ) ; begin
51916: LD_INT 0
51918: PPUSH
// result := array diff 0 ;
51919: LD_ADDR_VAR 0 2
51923: PUSH
51924: LD_VAR 0 1
51928: PUSH
51929: LD_INT 0
51931: DIFF
51932: ST_TO_ADDR
// if not result [ 1 ] then
51933: LD_VAR 0 2
51937: PUSH
51938: LD_INT 1
51940: ARRAY
51941: NOT
51942: IFFALSE 51962
// result := Delete ( result , 1 ) ;
51944: LD_ADDR_VAR 0 2
51948: PUSH
51949: LD_VAR 0 2
51953: PPUSH
51954: LD_INT 1
51956: PPUSH
51957: CALL_OW 3
51961: ST_TO_ADDR
// end ;
51962: LD_VAR 0 2
51966: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
51967: LD_INT 0
51969: PPUSH
51970: PPUSH
51971: PPUSH
51972: PPUSH
// sibRocketRange := 25 ;
51973: LD_ADDR_VAR 0 6
51977: PUSH
51978: LD_INT 25
51980: ST_TO_ADDR
// result := false ;
51981: LD_ADDR_VAR 0 4
51985: PUSH
51986: LD_INT 0
51988: ST_TO_ADDR
// for i := 0 to 5 do
51989: LD_ADDR_VAR 0 5
51993: PUSH
51994: DOUBLE
51995: LD_INT 0
51997: DEC
51998: ST_TO_ADDR
51999: LD_INT 5
52001: PUSH
52002: FOR_TO
52003: IFFALSE 52070
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
52005: LD_VAR 0 1
52009: PPUSH
52010: LD_VAR 0 5
52014: PPUSH
52015: LD_VAR 0 6
52019: PPUSH
52020: CALL_OW 272
52024: PPUSH
52025: LD_VAR 0 2
52029: PPUSH
52030: LD_VAR 0 5
52034: PPUSH
52035: LD_VAR 0 6
52039: PPUSH
52040: CALL_OW 273
52044: PPUSH
52045: LD_VAR 0 3
52049: PPUSH
52050: CALL_OW 309
52054: IFFALSE 52068
// begin result := true ;
52056: LD_ADDR_VAR 0 4
52060: PUSH
52061: LD_INT 1
52063: ST_TO_ADDR
// exit ;
52064: POP
52065: POP
52066: GO 52072
// end ;
52068: GO 52002
52070: POP
52071: POP
// end ;
52072: LD_VAR 0 4
52076: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
52077: LD_INT 0
52079: PPUSH
52080: PPUSH
52081: PPUSH
// if btype = b_depot then
52082: LD_VAR 0 2
52086: PUSH
52087: LD_INT 0
52089: EQUAL
52090: IFFALSE 52102
// begin result := true ;
52092: LD_ADDR_VAR 0 3
52096: PUSH
52097: LD_INT 1
52099: ST_TO_ADDR
// exit ;
52100: GO 52222
// end ; pom := GetBase ( depot ) ;
52102: LD_ADDR_VAR 0 4
52106: PUSH
52107: LD_VAR 0 1
52111: PPUSH
52112: CALL_OW 274
52116: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
52117: LD_ADDR_VAR 0 5
52121: PUSH
52122: LD_VAR 0 2
52126: PPUSH
52127: LD_VAR 0 1
52131: PPUSH
52132: CALL_OW 248
52136: PPUSH
52137: CALL_OW 450
52141: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
52142: LD_ADDR_VAR 0 3
52146: PUSH
52147: LD_VAR 0 4
52151: PPUSH
52152: LD_INT 1
52154: PPUSH
52155: CALL_OW 275
52159: PUSH
52160: LD_VAR 0 5
52164: PUSH
52165: LD_INT 1
52167: ARRAY
52168: GREATEREQUAL
52169: IFFALSE 52195
52171: PUSH
52172: LD_VAR 0 4
52176: PPUSH
52177: LD_INT 2
52179: PPUSH
52180: CALL_OW 275
52184: PUSH
52185: LD_VAR 0 5
52189: PUSH
52190: LD_INT 2
52192: ARRAY
52193: GREATEREQUAL
52194: AND
52195: IFFALSE 52221
52197: PUSH
52198: LD_VAR 0 4
52202: PPUSH
52203: LD_INT 3
52205: PPUSH
52206: CALL_OW 275
52210: PUSH
52211: LD_VAR 0 5
52215: PUSH
52216: LD_INT 3
52218: ARRAY
52219: GREATEREQUAL
52220: AND
52221: ST_TO_ADDR
// end ;
52222: LD_VAR 0 3
52226: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
52227: LD_INT 0
52229: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
52230: LD_VAR 0 1
52234: PPUSH
52235: LD_VAR 0 2
52239: PPUSH
52240: LD_INT 0
52242: PPUSH
52243: LD_INT 0
52245: PPUSH
52246: LD_INT 1
52248: PPUSH
52249: LD_INT 0
52251: PPUSH
52252: CALL_OW 587
// end ;
52256: LD_VAR 0 3
52260: RET
// export function CenterOnNow ( unit ) ; begin
52261: LD_INT 0
52263: PPUSH
// result := IsInUnit ( unit ) ;
52264: LD_ADDR_VAR 0 2
52268: PUSH
52269: LD_VAR 0 1
52273: PPUSH
52274: CALL_OW 310
52278: ST_TO_ADDR
// if not result then
52279: LD_VAR 0 2
52283: NOT
52284: IFFALSE 52296
// result := unit ;
52286: LD_ADDR_VAR 0 2
52290: PUSH
52291: LD_VAR 0 1
52295: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
52296: LD_VAR 0 1
52300: PPUSH
52301: CALL_OW 87
// end ;
52305: LD_VAR 0 2
52309: RET
// export function ComMoveHex ( unit , hex ) ; begin
52310: LD_INT 0
52312: PPUSH
// if not hex then
52313: LD_VAR 0 2
52317: NOT
52318: IFFALSE 52322
// exit ;
52320: GO 52375
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
52322: LD_VAR 0 2
52326: PUSH
52327: LD_INT 1
52329: ARRAY
52330: PPUSH
52331: LD_VAR 0 2
52335: PUSH
52336: LD_INT 2
52338: ARRAY
52339: PPUSH
52340: CALL_OW 428
52344: IFFALSE 52348
// exit ;
52346: GO 52375
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
52348: LD_VAR 0 1
52352: PPUSH
52353: LD_VAR 0 2
52357: PUSH
52358: LD_INT 1
52360: ARRAY
52361: PPUSH
52362: LD_VAR 0 2
52366: PUSH
52367: LD_INT 2
52369: ARRAY
52370: PPUSH
52371: CALL_OW 111
// end ;
52375: LD_VAR 0 3
52379: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
52380: LD_INT 0
52382: PPUSH
52383: PPUSH
52384: PPUSH
// if not unit or not enemy then
52385: LD_VAR 0 1
52389: NOT
52390: IFTRUE 52399
52392: PUSH
52393: LD_VAR 0 2
52397: NOT
52398: OR
52399: IFFALSE 52403
// exit ;
52401: GO 52529
// x := GetX ( enemy ) ;
52403: LD_ADDR_VAR 0 4
52407: PUSH
52408: LD_VAR 0 2
52412: PPUSH
52413: CALL_OW 250
52417: ST_TO_ADDR
// y := GetY ( enemy ) ;
52418: LD_ADDR_VAR 0 5
52422: PUSH
52423: LD_VAR 0 2
52427: PPUSH
52428: CALL_OW 251
52432: ST_TO_ADDR
// if ValidHex ( x , y ) then
52433: LD_VAR 0 4
52437: PPUSH
52438: LD_VAR 0 5
52442: PPUSH
52443: CALL_OW 488
52447: IFFALSE 52529
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
52449: LD_VAR 0 2
52453: PPUSH
52454: CALL_OW 247
52458: PUSH
52459: LD_INT 3
52461: PUSH
52462: LD_INT 2
52464: PUSH
52465: EMPTY
52466: LIST
52467: LIST
52468: IN
52469: IFTRUE 52492
52471: PUSH
52472: LD_VAR 0 1
52476: PPUSH
52477: CALL_OW 255
52481: PPUSH
52482: LD_VAR 0 2
52486: PPUSH
52487: CALL_OW 292
52491: OR
52492: IFFALSE 52510
// ComAttackUnit ( unit , enemy ) else
52494: LD_VAR 0 1
52498: PPUSH
52499: LD_VAR 0 2
52503: PPUSH
52504: CALL_OW 115
52508: GO 52529
// ComAgressiveMove ( unit , x , y ) ;
52510: LD_VAR 0 1
52514: PPUSH
52515: LD_VAR 0 4
52519: PPUSH
52520: LD_VAR 0 5
52524: PPUSH
52525: CALL_OW 114
// end ;
52529: LD_VAR 0 3
52533: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
52534: LD_INT 0
52536: PPUSH
52537: PPUSH
52538: PPUSH
// list := AreaToList ( area , 0 ) ;
52539: LD_ADDR_VAR 0 5
52543: PUSH
52544: LD_VAR 0 1
52548: PPUSH
52549: LD_INT 0
52551: PPUSH
52552: CALL_OW 517
52556: ST_TO_ADDR
// if not list then
52557: LD_VAR 0 5
52561: NOT
52562: IFFALSE 52566
// exit ;
52564: GO 52696
// if all then
52566: LD_VAR 0 2
52570: IFFALSE 52658
// begin for i := 1 to list [ 1 ] do
52572: LD_ADDR_VAR 0 4
52576: PUSH
52577: DOUBLE
52578: LD_INT 1
52580: DEC
52581: ST_TO_ADDR
52582: LD_VAR 0 5
52586: PUSH
52587: LD_INT 1
52589: ARRAY
52590: PUSH
52591: FOR_TO
52592: IFFALSE 52654
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
52594: LD_ADDR_VAR 0 3
52598: PUSH
52599: LD_VAR 0 3
52603: PPUSH
52604: LD_VAR 0 3
52608: PUSH
52609: LD_INT 1
52611: PLUS
52612: PPUSH
52613: LD_VAR 0 5
52617: PUSH
52618: LD_INT 1
52620: ARRAY
52621: PUSH
52622: LD_VAR 0 4
52626: ARRAY
52627: PUSH
52628: LD_VAR 0 5
52632: PUSH
52633: LD_INT 2
52635: ARRAY
52636: PUSH
52637: LD_VAR 0 4
52641: ARRAY
52642: PUSH
52643: EMPTY
52644: LIST
52645: LIST
52646: PPUSH
52647: CALL_OW 1
52651: ST_TO_ADDR
52652: GO 52591
52654: POP
52655: POP
// exit ;
52656: GO 52696
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
52658: LD_ADDR_VAR 0 3
52662: PUSH
52663: LD_VAR 0 5
52667: PUSH
52668: LD_INT 1
52670: ARRAY
52671: PUSH
52672: LD_INT 1
52674: ARRAY
52675: PUSH
52676: LD_VAR 0 5
52680: PUSH
52681: LD_INT 2
52683: ARRAY
52684: PUSH
52685: LD_INT 1
52687: ARRAY
52688: PUSH
52689: EMPTY
52690: LIST
52691: LIST
52692: PUSH
52693: EMPTY
52694: LIST
52695: ST_TO_ADDR
// end ;
52696: LD_VAR 0 3
52700: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
52701: LD_INT 0
52703: PPUSH
52704: PPUSH
// list := AreaToList ( area , 0 ) ;
52705: LD_ADDR_VAR 0 4
52709: PUSH
52710: LD_VAR 0 1
52714: PPUSH
52715: LD_INT 0
52717: PPUSH
52718: CALL_OW 517
52722: ST_TO_ADDR
// if not list then
52723: LD_VAR 0 4
52727: NOT
52728: IFFALSE 52732
// exit ;
52730: GO 52773
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
52732: LD_ADDR_VAR 0 3
52736: PUSH
52737: LD_VAR 0 4
52741: PUSH
52742: LD_INT 1
52744: ARRAY
52745: PUSH
52746: LD_INT 1
52748: ARRAY
52749: PUSH
52750: LD_VAR 0 4
52754: PUSH
52755: LD_INT 2
52757: ARRAY
52758: PUSH
52759: LD_INT 1
52761: ARRAY
52762: PUSH
52763: LD_VAR 0 2
52767: PUSH
52768: EMPTY
52769: LIST
52770: LIST
52771: LIST
52772: ST_TO_ADDR
// end ;
52773: LD_VAR 0 3
52777: RET
// export function First ( array ) ; begin
52778: LD_INT 0
52780: PPUSH
// if not array then
52781: LD_VAR 0 1
52785: NOT
52786: IFFALSE 52790
// exit ;
52788: GO 52804
// result := array [ 1 ] ;
52790: LD_ADDR_VAR 0 2
52794: PUSH
52795: LD_VAR 0 1
52799: PUSH
52800: LD_INT 1
52802: ARRAY
52803: ST_TO_ADDR
// end ;
52804: LD_VAR 0 2
52808: RET
// export function Last ( array ) ; begin
52809: LD_INT 0
52811: PPUSH
// if not array then
52812: LD_VAR 0 1
52816: NOT
52817: IFFALSE 52821
// exit ;
52819: GO 52837
// result := array [ array ] ;
52821: LD_ADDR_VAR 0 2
52825: PUSH
52826: LD_VAR 0 1
52830: PUSH
52831: LD_VAR 0 1
52835: ARRAY
52836: ST_TO_ADDR
// end ;
52837: LD_VAR 0 2
52841: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
52842: LD_INT 0
52844: PPUSH
52845: PPUSH
// result := [ ] ;
52846: LD_ADDR_VAR 0 5
52850: PUSH
52851: EMPTY
52852: ST_TO_ADDR
// if not array then
52853: LD_VAR 0 1
52857: NOT
52858: IFFALSE 52862
// exit ;
52860: GO 52974
// for i := 1 to array do
52862: LD_ADDR_VAR 0 6
52866: PUSH
52867: DOUBLE
52868: LD_INT 1
52870: DEC
52871: ST_TO_ADDR
52872: LD_VAR 0 1
52876: PUSH
52877: FOR_TO
52878: IFFALSE 52972
// if array [ i ] [ index ] = value then
52880: LD_VAR 0 1
52884: PUSH
52885: LD_VAR 0 6
52889: ARRAY
52890: PUSH
52891: LD_VAR 0 2
52895: ARRAY
52896: PUSH
52897: LD_VAR 0 3
52901: EQUAL
52902: IFFALSE 52970
// begin if indexColumn then
52904: LD_VAR 0 4
52908: IFFALSE 52944
// result := Join ( result , array [ i ] [ indexColumn ] ) else
52910: LD_ADDR_VAR 0 5
52914: PUSH
52915: LD_VAR 0 5
52919: PPUSH
52920: LD_VAR 0 1
52924: PUSH
52925: LD_VAR 0 6
52929: ARRAY
52930: PUSH
52931: LD_VAR 0 4
52935: ARRAY
52936: PPUSH
52937: CALL 47982 0 2
52941: ST_TO_ADDR
52942: GO 52970
// result := Join ( result , array [ i ] ) ;
52944: LD_ADDR_VAR 0 5
52948: PUSH
52949: LD_VAR 0 5
52953: PPUSH
52954: LD_VAR 0 1
52958: PUSH
52959: LD_VAR 0 6
52963: ARRAY
52964: PPUSH
52965: CALL 47982 0 2
52969: ST_TO_ADDR
// end ;
52970: GO 52877
52972: POP
52973: POP
// end ;
52974: LD_VAR 0 5
52978: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
52979: LD_INT 0
52981: PPUSH
// if not vehicles or not parkingPoint then
52982: LD_VAR 0 1
52986: NOT
52987: IFTRUE 52996
52989: PUSH
52990: LD_VAR 0 2
52994: NOT
52995: OR
52996: IFFALSE 53000
// exit ;
52998: GO 53098
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
53000: LD_ADDR_VAR 0 1
53004: PUSH
53005: LD_VAR 0 1
53009: PPUSH
53010: LD_INT 50
53012: PUSH
53013: EMPTY
53014: LIST
53015: PUSH
53016: LD_INT 3
53018: PUSH
53019: LD_INT 92
53021: PUSH
53022: LD_VAR 0 2
53026: PUSH
53027: LD_INT 1
53029: ARRAY
53030: PUSH
53031: LD_VAR 0 2
53035: PUSH
53036: LD_INT 2
53038: ARRAY
53039: PUSH
53040: LD_INT 8
53042: PUSH
53043: EMPTY
53044: LIST
53045: LIST
53046: LIST
53047: LIST
53048: PUSH
53049: EMPTY
53050: LIST
53051: LIST
53052: PUSH
53053: EMPTY
53054: LIST
53055: LIST
53056: PPUSH
53057: CALL_OW 72
53061: ST_TO_ADDR
// if not vehicles then
53062: LD_VAR 0 1
53066: NOT
53067: IFFALSE 53071
// exit ;
53069: GO 53098
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
53071: LD_VAR 0 1
53075: PPUSH
53076: LD_VAR 0 2
53080: PUSH
53081: LD_INT 1
53083: ARRAY
53084: PPUSH
53085: LD_VAR 0 2
53089: PUSH
53090: LD_INT 2
53092: ARRAY
53093: PPUSH
53094: CALL_OW 111
// end ;
53098: LD_VAR 0 3
53102: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
53103: LD_INT 0
53105: PPUSH
53106: PPUSH
53107: PPUSH
// if not side or not area then
53108: LD_VAR 0 1
53112: NOT
53113: IFTRUE 53122
53115: PUSH
53116: LD_VAR 0 2
53120: NOT
53121: OR
53122: IFFALSE 53126
// exit ;
53124: GO 53245
// tmp := AreaToList ( area , 0 ) ;
53126: LD_ADDR_VAR 0 5
53130: PUSH
53131: LD_VAR 0 2
53135: PPUSH
53136: LD_INT 0
53138: PPUSH
53139: CALL_OW 517
53143: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
53144: LD_ADDR_VAR 0 4
53148: PUSH
53149: DOUBLE
53150: LD_INT 1
53152: DEC
53153: ST_TO_ADDR
53154: LD_VAR 0 5
53158: PUSH
53159: LD_INT 1
53161: ARRAY
53162: PUSH
53163: FOR_TO
53164: IFFALSE 53243
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
53166: LD_VAR 0 5
53170: PUSH
53171: LD_INT 1
53173: ARRAY
53174: PUSH
53175: LD_VAR 0 4
53179: ARRAY
53180: PPUSH
53181: LD_VAR 0 5
53185: PUSH
53186: LD_INT 2
53188: ARRAY
53189: PUSH
53190: LD_VAR 0 4
53194: ARRAY
53195: PPUSH
53196: CALL_OW 351
53200: IFFALSE 53241
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
53202: LD_VAR 0 5
53206: PUSH
53207: LD_INT 1
53209: ARRAY
53210: PUSH
53211: LD_VAR 0 4
53215: ARRAY
53216: PPUSH
53217: LD_VAR 0 5
53221: PUSH
53222: LD_INT 2
53224: ARRAY
53225: PUSH
53226: LD_VAR 0 4
53230: ARRAY
53231: PPUSH
53232: LD_VAR 0 1
53236: PPUSH
53237: CALL_OW 244
// end ;
53241: GO 53163
53243: POP
53244: POP
// end ;
53245: LD_VAR 0 3
53249: RET
// export function UniqueArray ( array ) ; var i ; begin
53250: LD_INT 0
53252: PPUSH
53253: PPUSH
// result := [ ] ;
53254: LD_ADDR_VAR 0 2
53258: PUSH
53259: EMPTY
53260: ST_TO_ADDR
// if not array then
53261: LD_VAR 0 1
53265: NOT
53266: IFFALSE 53270
// exit ;
53268: GO 53331
// for i := 1 to array do
53270: LD_ADDR_VAR 0 3
53274: PUSH
53275: DOUBLE
53276: LD_INT 1
53278: DEC
53279: ST_TO_ADDR
53280: LD_VAR 0 1
53284: PUSH
53285: FOR_TO
53286: IFFALSE 53329
// if not array [ i ] in result then
53288: LD_VAR 0 1
53292: PUSH
53293: LD_VAR 0 3
53297: ARRAY
53298: PUSH
53299: LD_VAR 0 2
53303: IN
53304: NOT
53305: IFFALSE 53327
// result := Join ( result , i ) ;
53307: LD_ADDR_VAR 0 2
53311: PUSH
53312: LD_VAR 0 2
53316: PPUSH
53317: LD_VAR 0 3
53321: PPUSH
53322: CALL 47982 0 2
53326: ST_TO_ADDR
53327: GO 53285
53329: POP
53330: POP
// end ; end_of_file
53331: LD_VAR 0 2
53335: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
53336: LD_VAR 0 1
53340: PUSH
53341: LD_INT 200
53343: DOUBLE
53344: GREATEREQUAL
53345: IFFALSE 53353
53347: LD_INT 299
53349: DOUBLE
53350: LESSEQUAL
53351: IFTRUE 53355
53353: GO 53387
53355: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
53356: LD_VAR 0 1
53360: PPUSH
53361: LD_VAR 0 2
53365: PPUSH
53366: LD_VAR 0 3
53370: PPUSH
53371: LD_VAR 0 4
53375: PPUSH
53376: LD_VAR 0 5
53380: PPUSH
53381: CALL 54168 0 5
53385: GO 53464
53387: LD_INT 300
53389: DOUBLE
53390: GREATEREQUAL
53391: IFFALSE 53399
53393: LD_INT 399
53395: DOUBLE
53396: LESSEQUAL
53397: IFTRUE 53401
53399: GO 53463
53401: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
53402: LD_VAR 0 1
53406: PPUSH
53407: LD_VAR 0 2
53411: PPUSH
53412: LD_VAR 0 3
53416: PPUSH
53417: LD_VAR 0 4
53421: PPUSH
53422: LD_VAR 0 5
53426: PPUSH
53427: LD_VAR 0 6
53431: PPUSH
53432: LD_VAR 0 7
53436: PPUSH
53437: LD_VAR 0 8
53441: PPUSH
53442: LD_VAR 0 9
53446: PPUSH
53447: LD_VAR 0 10
53451: PPUSH
53452: LD_VAR 0 11
53456: PPUSH
53457: CALL 61254 0 11
53461: GO 53464
53463: POP
// end ;
53464: PPOPN 11
53466: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
53467: LD_VAR 0 1
53471: PPUSH
53472: LD_VAR 0 2
53476: PPUSH
53477: LD_VAR 0 3
53481: PPUSH
53482: LD_VAR 0 4
53486: PPUSH
53487: LD_VAR 0 5
53491: PPUSH
53492: CALL 53549 0 5
// end ; end_of_file
53496: PPOPN 5
53498: END
// export function SOS_UnitDestroyed ( un ) ; begin
53499: LD_INT 0
53501: PPUSH
// ComRadiation ( un ) ;
53502: LD_VAR 0 1
53506: PPUSH
53507: CALL 54588 0 1
// end ;
53511: LD_VAR 0 2
53515: RET
// export function SOS_UnitKamikazed ( un ) ; begin
53516: LD_INT 0
53518: PPUSH
// ComRadiation ( un ) ;
53519: LD_VAR 0 1
53523: PPUSH
53524: CALL 54588 0 1
// end ;
53528: LD_VAR 0 2
53532: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
53533: LD_INT 0
53535: PPUSH
// end ;
53536: LD_VAR 0 4
53540: RET
// export function SOS_Command ( cmd ) ; begin
53541: LD_INT 0
53543: PPUSH
// end ;
53544: LD_VAR 0 2
53548: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
53549: LD_INT 0
53551: PPUSH
// end ;
53552: LD_VAR 0 6
53556: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , driver , hex ; begin
53557: LD_INT 0
53559: PPUSH
53560: PPUSH
53561: PPUSH
53562: PPUSH
// if not vehicle or not factory then
53563: LD_VAR 0 1
53567: NOT
53568: IFTRUE 53577
53570: PUSH
53571: LD_VAR 0 2
53575: NOT
53576: OR
53577: IFFALSE 53581
// exit ;
53579: GO 54163
// if not factoryWaypoints then
53581: LD_EXP 59
53585: NOT
53586: IFFALSE 53590
// exit ;
53588: GO 54163
// for i := 1 to Count ( factoryWaypoints ) do
53590: LD_ADDR_VAR 0 4
53594: PUSH
53595: DOUBLE
53596: LD_INT 1
53598: DEC
53599: ST_TO_ADDR
53600: LD_EXP 59
53604: PPUSH
53605: CALL 12050 0 1
53609: PUSH
53610: FOR_TO
53611: IFFALSE 54161
// if factoryWaypoints [ i ] [ 2 ] = factory then
53613: LD_EXP 59
53617: PUSH
53618: LD_VAR 0 4
53622: ARRAY
53623: PUSH
53624: LD_INT 2
53626: ARRAY
53627: PUSH
53628: LD_VAR 0 2
53632: EQUAL
53633: IFFALSE 54159
// begin if GetControl ( vehicle ) = control_manual then
53635: LD_VAR 0 1
53639: PPUSH
53640: CALL_OW 263
53644: PUSH
53645: LD_INT 1
53647: EQUAL
53648: IFFALSE 54012
// begin driver := IsDrivenBy ( vehicle ) ;
53650: LD_ADDR_VAR 0 5
53654: PUSH
53655: LD_VAR 0 1
53659: PPUSH
53660: CALL_OW 311
53664: ST_TO_ADDR
// if driver in factoryWaypointsDrivers or vehicle in factoryWaypointsDrivers then
53665: LD_VAR 0 5
53669: PUSH
53670: LD_EXP 60
53674: IN
53675: IFTRUE 53689
53677: PUSH
53678: LD_VAR 0 1
53682: PUSH
53683: LD_EXP 60
53687: IN
53688: OR
53689: IFFALSE 53695
// exit ;
53691: POP
53692: POP
53693: GO 54163
// if not HasTask ( driver ) then
53695: LD_VAR 0 5
53699: PPUSH
53700: CALL_OW 314
53704: NOT
53705: IFFALSE 54010
// begin factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , driver ) ;
53707: LD_ADDR_EXP 60
53711: PUSH
53712: LD_EXP 60
53716: PPUSH
53717: LD_VAR 0 5
53721: PPUSH
53722: CALL 47982 0 2
53726: ST_TO_ADDR
// factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , vehicle ) ;
53727: LD_ADDR_EXP 60
53731: PUSH
53732: LD_EXP 60
53736: PPUSH
53737: LD_VAR 0 1
53741: PPUSH
53742: CALL 47982 0 2
53746: ST_TO_ADDR
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
53747: LD_ADDR_VAR 0 6
53751: PUSH
53752: LD_EXP 59
53756: PUSH
53757: LD_VAR 0 4
53761: ARRAY
53762: PUSH
53763: LD_INT 3
53765: ARRAY
53766: PPUSH
53767: LD_EXP 59
53771: PUSH
53772: LD_VAR 0 4
53776: ARRAY
53777: PUSH
53778: LD_INT 4
53780: ARRAY
53781: PPUSH
53782: CALL_OW 428
53786: ST_TO_ADDR
// if hex then
53787: LD_VAR 0 6
53791: IFFALSE 53809
// ComMoveUnit ( driver , hex ) else
53793: LD_VAR 0 5
53797: PPUSH
53798: LD_VAR 0 6
53802: PPUSH
53803: CALL_OW 112
53807: GO 53893
// if GetDistUnitXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) > 0 then
53809: LD_VAR 0 1
53813: PPUSH
53814: LD_EXP 59
53818: PUSH
53819: LD_VAR 0 4
53823: ARRAY
53824: PUSH
53825: LD_INT 3
53827: ARRAY
53828: PPUSH
53829: LD_EXP 59
53833: PUSH
53834: LD_VAR 0 4
53838: ARRAY
53839: PUSH
53840: LD_INT 4
53842: ARRAY
53843: PPUSH
53844: CALL_OW 297
53848: PUSH
53849: LD_INT 0
53851: GREATER
53852: IFFALSE 53893
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
53854: LD_VAR 0 5
53858: PPUSH
53859: LD_EXP 59
53863: PUSH
53864: LD_VAR 0 4
53868: ARRAY
53869: PUSH
53870: LD_INT 3
53872: ARRAY
53873: PPUSH
53874: LD_EXP 59
53878: PUSH
53879: LD_VAR 0 4
53883: ARRAY
53884: PUSH
53885: LD_INT 4
53887: ARRAY
53888: PPUSH
53889: CALL_OW 111
// AddComExitVehicle ( driver ) ;
53893: LD_VAR 0 5
53897: PPUSH
53898: CALL_OW 181
// if Multiplayer then
53902: LD_OWVAR 4
53906: IFFALSE 53955
// begin repeat wait ( 10 ) ;
53908: LD_INT 10
53910: PPUSH
53911: CALL_OW 67
// until not IsInUnit ( driver ) ;
53915: LD_VAR 0 5
53919: PPUSH
53920: CALL_OW 310
53924: NOT
53925: IFFALSE 53908
// if not HasTask ( driver ) then
53927: LD_VAR 0 5
53931: PPUSH
53932: CALL_OW 314
53936: NOT
53937: IFFALSE 53953
// ComEnterUnit ( driver , factory ) ;
53939: LD_VAR 0 5
53943: PPUSH
53944: LD_VAR 0 2
53948: PPUSH
53949: CALL_OW 120
// end else
53953: GO 53969
// AddComEnterUnit ( driver , factory ) ;
53955: LD_VAR 0 5
53959: PPUSH
53960: LD_VAR 0 2
53964: PPUSH
53965: CALL_OW 180
// wait ( 0 0$1 ) ;
53969: LD_INT 35
53971: PPUSH
53972: CALL_OW 67
// factoryWaypointsDrivers := factoryWaypointsDrivers diff driver ;
53976: LD_ADDR_EXP 60
53980: PUSH
53981: LD_EXP 60
53985: PUSH
53986: LD_VAR 0 5
53990: DIFF
53991: ST_TO_ADDR
// factoryWaypointsDrivers := factoryWaypointsDrivers diff vehicle ;
53992: LD_ADDR_EXP 60
53996: PUSH
53997: LD_EXP 60
54001: PUSH
54002: LD_VAR 0 1
54006: DIFF
54007: ST_TO_ADDR
// break ;
54008: GO 54161
// end ; end else
54010: GO 54159
// if GetControl ( vehicle ) = control_remote then
54012: LD_VAR 0 1
54016: PPUSH
54017: CALL_OW 263
54021: PUSH
54022: LD_INT 2
54024: EQUAL
54025: IFFALSE 54111
// begin wait ( 0 0$2 ) ;
54027: LD_INT 70
54029: PPUSH
54030: CALL_OW 67
// repeat wait ( 10 ) ;
54034: LD_INT 10
54036: PPUSH
54037: CALL_OW 67
// Connect ( vehicle ) ;
54041: LD_VAR 0 1
54045: PPUSH
54046: CALL 18294 0 1
// until IsControledBy ( vehicle ) ;
54050: LD_VAR 0 1
54054: PPUSH
54055: CALL_OW 312
54059: IFFALSE 54034
// wait ( 10 ) ;
54061: LD_INT 10
54063: PPUSH
54064: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
54068: LD_VAR 0 1
54072: PPUSH
54073: LD_EXP 59
54077: PUSH
54078: LD_VAR 0 4
54082: ARRAY
54083: PUSH
54084: LD_INT 3
54086: ARRAY
54087: PPUSH
54088: LD_EXP 59
54092: PUSH
54093: LD_VAR 0 4
54097: ARRAY
54098: PUSH
54099: LD_INT 4
54101: ARRAY
54102: PPUSH
54103: CALL_OW 111
// break ;
54107: GO 54161
// end else
54109: GO 54159
// begin wait ( 0 0$3 ) ;
54111: LD_INT 105
54113: PPUSH
54114: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
54118: LD_VAR 0 1
54122: PPUSH
54123: LD_EXP 59
54127: PUSH
54128: LD_VAR 0 4
54132: ARRAY
54133: PUSH
54134: LD_INT 3
54136: ARRAY
54137: PPUSH
54138: LD_EXP 59
54142: PUSH
54143: LD_VAR 0 4
54147: ARRAY
54148: PUSH
54149: LD_INT 4
54151: ARRAY
54152: PPUSH
54153: CALL_OW 111
// break ;
54157: GO 54161
// end ; end ;
54159: GO 53610
54161: POP
54162: POP
// end ;
54163: LD_VAR 0 3
54167: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
54168: LD_INT 0
54170: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
54171: LD_VAR 0 1
54175: PUSH
54176: LD_INT 250
54178: EQUAL
54179: IFFALSE 54196
54181: PUSH
54182: LD_VAR 0 2
54186: PPUSH
54187: CALL_OW 264
54191: PUSH
54192: LD_INT 81
54194: EQUAL
54195: AND
54196: IFFALSE 54217
// MinerPlaceMine ( unit , x , y ) ;
54198: LD_VAR 0 2
54202: PPUSH
54203: LD_VAR 0 4
54207: PPUSH
54208: LD_VAR 0 5
54212: PPUSH
54213: CALL 57349 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
54217: LD_VAR 0 1
54221: PUSH
54222: LD_INT 251
54224: EQUAL
54225: IFFALSE 54242
54227: PUSH
54228: LD_VAR 0 2
54232: PPUSH
54233: CALL_OW 264
54237: PUSH
54238: LD_INT 81
54240: EQUAL
54241: AND
54242: IFFALSE 54263
// MinerDetonateMine ( unit , x , y ) ;
54244: LD_VAR 0 2
54248: PPUSH
54249: LD_VAR 0 4
54253: PPUSH
54254: LD_VAR 0 5
54258: PPUSH
54259: CALL 57628 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
54263: LD_VAR 0 1
54267: PUSH
54268: LD_INT 252
54270: EQUAL
54271: IFFALSE 54288
54273: PUSH
54274: LD_VAR 0 2
54278: PPUSH
54279: CALL_OW 264
54283: PUSH
54284: LD_INT 81
54286: EQUAL
54287: AND
54288: IFFALSE 54309
// MinerCreateMinefield ( unit , x , y ) ;
54290: LD_VAR 0 2
54294: PPUSH
54295: LD_VAR 0 4
54299: PPUSH
54300: LD_VAR 0 5
54304: PPUSH
54305: CALL 58047 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
54309: LD_VAR 0 1
54313: PUSH
54314: LD_INT 253
54316: EQUAL
54317: IFFALSE 54334
54319: PUSH
54320: LD_VAR 0 2
54324: PPUSH
54325: CALL_OW 257
54329: PUSH
54330: LD_INT 5
54332: EQUAL
54333: AND
54334: IFFALSE 54355
// ComBinocular ( unit , x , y ) ;
54336: LD_VAR 0 2
54340: PPUSH
54341: LD_VAR 0 4
54345: PPUSH
54346: LD_VAR 0 5
54350: PPUSH
54351: CALL 58422 0 3
// if selectedUnit then
54355: LD_VAR 0 3
54359: IFFALSE 54419
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
54361: LD_VAR 0 1
54365: PUSH
54366: LD_INT 254
54368: EQUAL
54369: IFFALSE 54386
54371: PUSH
54372: LD_VAR 0 2
54376: PPUSH
54377: CALL_OW 264
54381: PUSH
54382: LD_INT 99
54384: EQUAL
54385: AND
54386: IFFALSE 54403
54388: PUSH
54389: LD_VAR 0 3
54393: PPUSH
54394: CALL_OW 263
54398: PUSH
54399: LD_INT 3
54401: EQUAL
54402: AND
54403: IFFALSE 54419
// HackDestroyVehicle ( unit , selectedUnit ) ;
54405: LD_VAR 0 2
54409: PPUSH
54410: LD_VAR 0 3
54414: PPUSH
54415: CALL 56709 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
54419: LD_VAR 0 1
54423: PUSH
54424: LD_INT 255
54426: EQUAL
54427: IFFALSE 54451
54429: PUSH
54430: LD_VAR 0 2
54434: PPUSH
54435: CALL_OW 264
54439: PUSH
54440: LD_INT 14
54442: PUSH
54443: LD_INT 53
54445: PUSH
54446: EMPTY
54447: LIST
54448: LIST
54449: IN
54450: AND
54451: IFFALSE 54469
54453: PUSH
54454: LD_VAR 0 4
54458: PPUSH
54459: LD_VAR 0 5
54463: PPUSH
54464: CALL_OW 488
54468: AND
54469: IFFALSE 54493
// CutTreeXYR ( unit , x , y , 12 ) ;
54471: LD_VAR 0 2
54475: PPUSH
54476: LD_VAR 0 4
54480: PPUSH
54481: LD_VAR 0 5
54485: PPUSH
54486: LD_INT 12
54488: PPUSH
54489: CALL 54684 0 4
// if cmd = 256 then
54493: LD_VAR 0 1
54497: PUSH
54498: LD_INT 256
54500: EQUAL
54501: IFFALSE 54522
// SetFactoryWaypoint ( unit , x , y ) ;
54503: LD_VAR 0 2
54507: PPUSH
54508: LD_VAR 0 4
54512: PPUSH
54513: LD_VAR 0 5
54517: PPUSH
54518: CALL 61262 0 3
// if cmd = 257 then
54522: LD_VAR 0 1
54526: PUSH
54527: LD_INT 257
54529: EQUAL
54530: IFFALSE 54551
// SetWarehouseGatheringPoint ( unit , x , y ) ;
54532: LD_VAR 0 2
54536: PPUSH
54537: LD_VAR 0 4
54541: PPUSH
54542: LD_VAR 0 5
54546: PPUSH
54547: CALL 61758 0 3
// if cmd = 258 then
54551: LD_VAR 0 1
54555: PUSH
54556: LD_INT 258
54558: EQUAL
54559: IFFALSE 54583
// BurnTreeXYR ( unit , x , y , 8 ) ;
54561: LD_VAR 0 2
54565: PPUSH
54566: LD_VAR 0 4
54570: PPUSH
54571: LD_VAR 0 5
54575: PPUSH
54576: LD_INT 8
54578: PPUSH
54579: CALL 55084 0 4
// end ;
54583: LD_VAR 0 6
54587: RET
// export function ComRadiation ( un ) ; var eff ; begin
54588: LD_INT 0
54590: PPUSH
54591: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
54592: LD_VAR 0 1
54596: PPUSH
54597: CALL_OW 264
54601: PUSH
54602: LD_INT 91
54604: NONEQUAL
54605: IFFALSE 54609
// exit ;
54607: GO 54679
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
54609: LD_INT 68
54611: PPUSH
54612: LD_VAR 0 1
54616: PPUSH
54617: CALL_OW 255
54621: PPUSH
54622: CALL_OW 321
54626: PUSH
54627: LD_INT 2
54629: EQUAL
54630: IFFALSE 54642
// eff := 50 else
54632: LD_ADDR_VAR 0 3
54636: PUSH
54637: LD_INT 50
54639: ST_TO_ADDR
54640: GO 54650
// eff := 25 ;
54642: LD_ADDR_VAR 0 3
54646: PUSH
54647: LD_INT 25
54649: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
54650: LD_VAR 0 1
54654: PPUSH
54655: CALL_OW 250
54659: PPUSH
54660: LD_VAR 0 1
54664: PPUSH
54665: CALL_OW 251
54669: PPUSH
54670: LD_VAR 0 3
54674: PPUSH
54675: CALL_OW 495
// end ;
54679: LD_VAR 0 2
54683: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
54684: LD_INT 0
54686: PPUSH
54687: PPUSH
54688: PPUSH
54689: PPUSH
54690: PPUSH
54691: PPUSH
54692: PPUSH
54693: PPUSH
54694: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
54695: LD_VAR 0 1
54699: PPUSH
54700: CALL_OW 302
54704: NOT
54705: IFTRUE 54724
54707: PUSH
54708: LD_VAR 0 2
54712: PPUSH
54713: LD_VAR 0 3
54717: PPUSH
54718: CALL_OW 488
54722: NOT
54723: OR
54724: IFTRUE 54733
54726: PUSH
54727: LD_VAR 0 4
54731: NOT
54732: OR
54733: IFFALSE 54737
// exit ;
54735: GO 55079
// list := [ ] ;
54737: LD_ADDR_VAR 0 13
54741: PUSH
54742: EMPTY
54743: ST_TO_ADDR
// if x - r < 0 then
54744: LD_VAR 0 2
54748: PUSH
54749: LD_VAR 0 4
54753: MINUS
54754: PUSH
54755: LD_INT 0
54757: LESS
54758: IFFALSE 54770
// min_x := 0 else
54760: LD_ADDR_VAR 0 7
54764: PUSH
54765: LD_INT 0
54767: ST_TO_ADDR
54768: GO 54786
// min_x := x - r ;
54770: LD_ADDR_VAR 0 7
54774: PUSH
54775: LD_VAR 0 2
54779: PUSH
54780: LD_VAR 0 4
54784: MINUS
54785: ST_TO_ADDR
// if y - r < 0 then
54786: LD_VAR 0 3
54790: PUSH
54791: LD_VAR 0 4
54795: MINUS
54796: PUSH
54797: LD_INT 0
54799: LESS
54800: IFFALSE 54812
// min_y := 0 else
54802: LD_ADDR_VAR 0 8
54806: PUSH
54807: LD_INT 0
54809: ST_TO_ADDR
54810: GO 54828
// min_y := y - r ;
54812: LD_ADDR_VAR 0 8
54816: PUSH
54817: LD_VAR 0 3
54821: PUSH
54822: LD_VAR 0 4
54826: MINUS
54827: ST_TO_ADDR
// max_x := x + r ;
54828: LD_ADDR_VAR 0 9
54832: PUSH
54833: LD_VAR 0 2
54837: PUSH
54838: LD_VAR 0 4
54842: PLUS
54843: ST_TO_ADDR
// max_y := y + r ;
54844: LD_ADDR_VAR 0 10
54848: PUSH
54849: LD_VAR 0 3
54853: PUSH
54854: LD_VAR 0 4
54858: PLUS
54859: ST_TO_ADDR
// for _x = min_x to max_x do
54860: LD_ADDR_VAR 0 11
54864: PUSH
54865: DOUBLE
54866: LD_VAR 0 7
54870: DEC
54871: ST_TO_ADDR
54872: LD_VAR 0 9
54876: PUSH
54877: FOR_TO
54878: IFFALSE 54997
// for _y = min_y to max_y do
54880: LD_ADDR_VAR 0 12
54884: PUSH
54885: DOUBLE
54886: LD_VAR 0 8
54890: DEC
54891: ST_TO_ADDR
54892: LD_VAR 0 10
54896: PUSH
54897: FOR_TO
54898: IFFALSE 54993
// begin if not ValidHex ( _x , _y ) then
54900: LD_VAR 0 11
54904: PPUSH
54905: LD_VAR 0 12
54909: PPUSH
54910: CALL_OW 488
54914: NOT
54915: IFFALSE 54919
// continue ;
54917: GO 54897
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
54919: LD_VAR 0 11
54923: PPUSH
54924: LD_VAR 0 12
54928: PPUSH
54929: CALL_OW 351
54933: IFFALSE 54951
54935: PUSH
54936: LD_VAR 0 11
54940: PPUSH
54941: LD_VAR 0 12
54945: PPUSH
54946: CALL_OW 554
54950: AND
54951: IFFALSE 54991
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
54953: LD_ADDR_VAR 0 13
54957: PUSH
54958: LD_VAR 0 13
54962: PPUSH
54963: LD_VAR 0 13
54967: PUSH
54968: LD_INT 1
54970: PLUS
54971: PPUSH
54972: LD_VAR 0 11
54976: PUSH
54977: LD_VAR 0 12
54981: PUSH
54982: EMPTY
54983: LIST
54984: LIST
54985: PPUSH
54986: CALL_OW 2
54990: ST_TO_ADDR
// end ;
54991: GO 54897
54993: POP
54994: POP
54995: GO 54877
54997: POP
54998: POP
// if not list then
54999: LD_VAR 0 13
55003: NOT
55004: IFFALSE 55008
// exit ;
55006: GO 55079
// for i in list do
55008: LD_ADDR_VAR 0 6
55012: PUSH
55013: LD_VAR 0 13
55017: PUSH
55018: FOR_IN
55019: IFFALSE 55077
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
55021: LD_VAR 0 1
55025: PPUSH
55026: LD_STRING M
55028: PUSH
55029: LD_VAR 0 6
55033: PUSH
55034: LD_INT 1
55036: ARRAY
55037: PUSH
55038: LD_VAR 0 6
55042: PUSH
55043: LD_INT 2
55045: ARRAY
55046: PUSH
55047: LD_INT 0
55049: PUSH
55050: LD_INT 0
55052: PUSH
55053: LD_INT 0
55055: PUSH
55056: LD_INT 0
55058: PUSH
55059: EMPTY
55060: LIST
55061: LIST
55062: LIST
55063: LIST
55064: LIST
55065: LIST
55066: LIST
55067: PUSH
55068: EMPTY
55069: LIST
55070: PPUSH
55071: CALL_OW 447
55075: GO 55018
55077: POP
55078: POP
// end ;
55079: LD_VAR 0 5
55083: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
55084: LD_INT 0
55086: PPUSH
55087: PPUSH
55088: PPUSH
55089: PPUSH
55090: PPUSH
55091: PPUSH
55092: PPUSH
55093: PPUSH
55094: PPUSH
55095: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
55096: LD_VAR 0 1
55100: PPUSH
55101: CALL_OW 302
55105: NOT
55106: IFTRUE 55125
55108: PUSH
55109: LD_VAR 0 2
55113: PPUSH
55114: LD_VAR 0 3
55118: PPUSH
55119: CALL_OW 488
55123: NOT
55124: OR
55125: IFTRUE 55134
55127: PUSH
55128: LD_VAR 0 4
55132: NOT
55133: OR
55134: IFFALSE 55138
// exit ;
55136: GO 55655
// list := [ ] ;
55138: LD_ADDR_VAR 0 13
55142: PUSH
55143: EMPTY
55144: ST_TO_ADDR
// if x - r < 0 then
55145: LD_VAR 0 2
55149: PUSH
55150: LD_VAR 0 4
55154: MINUS
55155: PUSH
55156: LD_INT 0
55158: LESS
55159: IFFALSE 55171
// min_x := 0 else
55161: LD_ADDR_VAR 0 7
55165: PUSH
55166: LD_INT 0
55168: ST_TO_ADDR
55169: GO 55187
// min_x := x - r ;
55171: LD_ADDR_VAR 0 7
55175: PUSH
55176: LD_VAR 0 2
55180: PUSH
55181: LD_VAR 0 4
55185: MINUS
55186: ST_TO_ADDR
// if y - r < 0 then
55187: LD_VAR 0 3
55191: PUSH
55192: LD_VAR 0 4
55196: MINUS
55197: PUSH
55198: LD_INT 0
55200: LESS
55201: IFFALSE 55213
// min_y := 0 else
55203: LD_ADDR_VAR 0 8
55207: PUSH
55208: LD_INT 0
55210: ST_TO_ADDR
55211: GO 55229
// min_y := y - r ;
55213: LD_ADDR_VAR 0 8
55217: PUSH
55218: LD_VAR 0 3
55222: PUSH
55223: LD_VAR 0 4
55227: MINUS
55228: ST_TO_ADDR
// max_x := x + r ;
55229: LD_ADDR_VAR 0 9
55233: PUSH
55234: LD_VAR 0 2
55238: PUSH
55239: LD_VAR 0 4
55243: PLUS
55244: ST_TO_ADDR
// max_y := y + r ;
55245: LD_ADDR_VAR 0 10
55249: PUSH
55250: LD_VAR 0 3
55254: PUSH
55255: LD_VAR 0 4
55259: PLUS
55260: ST_TO_ADDR
// for _x = min_x to max_x do
55261: LD_ADDR_VAR 0 11
55265: PUSH
55266: DOUBLE
55267: LD_VAR 0 7
55271: DEC
55272: ST_TO_ADDR
55273: LD_VAR 0 9
55277: PUSH
55278: FOR_TO
55279: IFFALSE 55398
// for _y = min_y to max_y do
55281: LD_ADDR_VAR 0 12
55285: PUSH
55286: DOUBLE
55287: LD_VAR 0 8
55291: DEC
55292: ST_TO_ADDR
55293: LD_VAR 0 10
55297: PUSH
55298: FOR_TO
55299: IFFALSE 55394
// begin if not ValidHex ( _x , _y ) then
55301: LD_VAR 0 11
55305: PPUSH
55306: LD_VAR 0 12
55310: PPUSH
55311: CALL_OW 488
55315: NOT
55316: IFFALSE 55320
// continue ;
55318: GO 55298
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
55320: LD_VAR 0 11
55324: PPUSH
55325: LD_VAR 0 12
55329: PPUSH
55330: CALL_OW 351
55334: IFFALSE 55352
55336: PUSH
55337: LD_VAR 0 11
55341: PPUSH
55342: LD_VAR 0 12
55346: PPUSH
55347: CALL_OW 554
55351: AND
55352: IFFALSE 55392
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
55354: LD_ADDR_VAR 0 13
55358: PUSH
55359: LD_VAR 0 13
55363: PPUSH
55364: LD_VAR 0 13
55368: PUSH
55369: LD_INT 1
55371: PLUS
55372: PPUSH
55373: LD_VAR 0 11
55377: PUSH
55378: LD_VAR 0 12
55382: PUSH
55383: EMPTY
55384: LIST
55385: LIST
55386: PPUSH
55387: CALL_OW 2
55391: ST_TO_ADDR
// end ;
55392: GO 55298
55394: POP
55395: POP
55396: GO 55278
55398: POP
55399: POP
// if not list then
55400: LD_VAR 0 13
55404: NOT
55405: IFFALSE 55409
// exit ;
55407: GO 55655
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
55409: LD_ADDR_VAR 0 13
55413: PUSH
55414: LD_VAR 0 1
55418: PPUSH
55419: LD_VAR 0 13
55423: PPUSH
55424: LD_INT 1
55426: PPUSH
55427: LD_INT 1
55429: PPUSH
55430: CALL 15422 0 4
55434: ST_TO_ADDR
// ComStop ( flame ) ;
55435: LD_VAR 0 1
55439: PPUSH
55440: CALL_OW 141
// for i in list do
55444: LD_ADDR_VAR 0 6
55448: PUSH
55449: LD_VAR 0 13
55453: PUSH
55454: FOR_IN
55455: IFFALSE 55486
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
55457: LD_VAR 0 1
55461: PPUSH
55462: LD_VAR 0 6
55466: PUSH
55467: LD_INT 1
55469: ARRAY
55470: PPUSH
55471: LD_VAR 0 6
55475: PUSH
55476: LD_INT 2
55478: ARRAY
55479: PPUSH
55480: CALL_OW 176
55484: GO 55454
55486: POP
55487: POP
// repeat wait ( 0 0$1 ) ;
55488: LD_INT 35
55490: PPUSH
55491: CALL_OW 67
// task := GetTaskList ( flame ) ;
55495: LD_ADDR_VAR 0 14
55499: PUSH
55500: LD_VAR 0 1
55504: PPUSH
55505: CALL_OW 437
55509: ST_TO_ADDR
// if not task then
55510: LD_VAR 0 14
55514: NOT
55515: IFFALSE 55519
// exit ;
55517: GO 55655
// if task [ 1 ] [ 1 ] <> | then
55519: LD_VAR 0 14
55523: PUSH
55524: LD_INT 1
55526: ARRAY
55527: PUSH
55528: LD_INT 1
55530: ARRAY
55531: PUSH
55532: LD_STRING |
55534: NONEQUAL
55535: IFFALSE 55539
// exit ;
55537: GO 55655
// _x := task [ 1 ] [ 2 ] ;
55539: LD_ADDR_VAR 0 11
55543: PUSH
55544: LD_VAR 0 14
55548: PUSH
55549: LD_INT 1
55551: ARRAY
55552: PUSH
55553: LD_INT 2
55555: ARRAY
55556: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
55557: LD_ADDR_VAR 0 12
55561: PUSH
55562: LD_VAR 0 14
55566: PUSH
55567: LD_INT 1
55569: ARRAY
55570: PUSH
55571: LD_INT 3
55573: ARRAY
55574: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
55575: LD_VAR 0 11
55579: PPUSH
55580: LD_VAR 0 12
55584: PPUSH
55585: CALL_OW 351
55589: NOT
55590: IFTRUE 55609
55592: PUSH
55593: LD_VAR 0 11
55597: PPUSH
55598: LD_VAR 0 12
55602: PPUSH
55603: CALL_OW 554
55607: NOT
55608: OR
55609: IFFALSE 55643
// begin task := Delete ( task , 1 ) ;
55611: LD_ADDR_VAR 0 14
55615: PUSH
55616: LD_VAR 0 14
55620: PPUSH
55621: LD_INT 1
55623: PPUSH
55624: CALL_OW 3
55628: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
55629: LD_VAR 0 1
55633: PPUSH
55634: LD_VAR 0 14
55638: PPUSH
55639: CALL_OW 446
// end ; until not HasTask ( flame ) ;
55643: LD_VAR 0 1
55647: PPUSH
55648: CALL_OW 314
55652: NOT
55653: IFFALSE 55488
// end ;
55655: LD_VAR 0 5
55659: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
55660: LD_EXP 48
55664: NOT
55665: IFFALSE 55715
55667: GO 55669
55669: DISABLE
// begin initHack := true ;
55670: LD_ADDR_EXP 48
55674: PUSH
55675: LD_INT 1
55677: ST_TO_ADDR
// hackTanks := [ ] ;
55678: LD_ADDR_EXP 49
55682: PUSH
55683: EMPTY
55684: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
55685: LD_ADDR_EXP 50
55689: PUSH
55690: EMPTY
55691: ST_TO_ADDR
// hackLimit := 3 ;
55692: LD_ADDR_EXP 51
55696: PUSH
55697: LD_INT 3
55699: ST_TO_ADDR
// hackDist := 12 ;
55700: LD_ADDR_EXP 52
55704: PUSH
55705: LD_INT 12
55707: ST_TO_ADDR
// hackCounter := [ ] ;
55708: LD_ADDR_EXP 53
55712: PUSH
55713: EMPTY
55714: ST_TO_ADDR
// end ;
55715: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
55716: LD_EXP 48
55720: IFFALSE 55738
55722: PUSH
55723: LD_INT 34
55725: PUSH
55726: LD_INT 99
55728: PUSH
55729: EMPTY
55730: LIST
55731: LIST
55732: PPUSH
55733: CALL_OW 69
55737: AND
55738: IFFALSE 55991
55740: GO 55742
55742: DISABLE
55743: LD_INT 0
55745: PPUSH
55746: PPUSH
// begin enable ;
55747: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
55748: LD_ADDR_VAR 0 1
55752: PUSH
55753: LD_INT 34
55755: PUSH
55756: LD_INT 99
55758: PUSH
55759: EMPTY
55760: LIST
55761: LIST
55762: PPUSH
55763: CALL_OW 69
55767: PUSH
55768: FOR_IN
55769: IFFALSE 55989
// begin if not i in hackTanks then
55771: LD_VAR 0 1
55775: PUSH
55776: LD_EXP 49
55780: IN
55781: NOT
55782: IFFALSE 55865
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
55784: LD_ADDR_EXP 49
55788: PUSH
55789: LD_EXP 49
55793: PPUSH
55794: LD_EXP 49
55798: PUSH
55799: LD_INT 1
55801: PLUS
55802: PPUSH
55803: LD_VAR 0 1
55807: PPUSH
55808: CALL_OW 1
55812: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
55813: LD_ADDR_EXP 50
55817: PUSH
55818: LD_EXP 50
55822: PPUSH
55823: LD_EXP 50
55827: PUSH
55828: LD_INT 1
55830: PLUS
55831: PPUSH
55832: EMPTY
55833: PPUSH
55834: CALL_OW 1
55838: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
55839: LD_ADDR_EXP 53
55843: PUSH
55844: LD_EXP 53
55848: PPUSH
55849: LD_EXP 53
55853: PUSH
55854: LD_INT 1
55856: PLUS
55857: PPUSH
55858: EMPTY
55859: PPUSH
55860: CALL_OW 1
55864: ST_TO_ADDR
// end ; if not IsOk ( i ) then
55865: LD_VAR 0 1
55869: PPUSH
55870: CALL_OW 302
55874: NOT
55875: IFFALSE 55888
// begin HackUnlinkAll ( i ) ;
55877: LD_VAR 0 1
55881: PPUSH
55882: CALL 55994 0 1
// continue ;
55886: GO 55768
// end ; HackCheckCapturedStatus ( i ) ;
55888: LD_VAR 0 1
55892: PPUSH
55893: CALL 56439 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
55897: LD_ADDR_VAR 0 2
55901: PUSH
55902: LD_INT 81
55904: PUSH
55905: LD_VAR 0 1
55909: PPUSH
55910: CALL_OW 255
55914: PUSH
55915: EMPTY
55916: LIST
55917: LIST
55918: PUSH
55919: LD_INT 33
55921: PUSH
55922: LD_INT 3
55924: PUSH
55925: EMPTY
55926: LIST
55927: LIST
55928: PUSH
55929: LD_INT 91
55931: PUSH
55932: LD_VAR 0 1
55936: PUSH
55937: LD_EXP 52
55941: PUSH
55942: EMPTY
55943: LIST
55944: LIST
55945: LIST
55946: PUSH
55947: LD_INT 50
55949: PUSH
55950: EMPTY
55951: LIST
55952: PUSH
55953: EMPTY
55954: LIST
55955: LIST
55956: LIST
55957: LIST
55958: PPUSH
55959: CALL_OW 69
55963: ST_TO_ADDR
// if not tmp then
55964: LD_VAR 0 2
55968: NOT
55969: IFFALSE 55973
// continue ;
55971: GO 55768
// HackLink ( i , tmp ) ;
55973: LD_VAR 0 1
55977: PPUSH
55978: LD_VAR 0 2
55982: PPUSH
55983: CALL 56130 0 2
// end ;
55987: GO 55768
55989: POP
55990: POP
// end ;
55991: PPOPN 2
55993: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
55994: LD_INT 0
55996: PPUSH
55997: PPUSH
55998: PPUSH
// if not hack in hackTanks then
55999: LD_VAR 0 1
56003: PUSH
56004: LD_EXP 49
56008: IN
56009: NOT
56010: IFFALSE 56014
// exit ;
56012: GO 56125
// index := GetElementIndex ( hackTanks , hack ) ;
56014: LD_ADDR_VAR 0 4
56018: PUSH
56019: LD_EXP 49
56023: PPUSH
56024: LD_VAR 0 1
56028: PPUSH
56029: CALL 14717 0 2
56033: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
56034: LD_EXP 50
56038: PUSH
56039: LD_VAR 0 4
56043: ARRAY
56044: IFFALSE 56125
// begin for i in hackTanksCaptured [ index ] do
56046: LD_ADDR_VAR 0 3
56050: PUSH
56051: LD_EXP 50
56055: PUSH
56056: LD_VAR 0 4
56060: ARRAY
56061: PUSH
56062: FOR_IN
56063: IFFALSE 56089
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
56065: LD_VAR 0 3
56069: PUSH
56070: LD_INT 1
56072: ARRAY
56073: PPUSH
56074: LD_VAR 0 3
56078: PUSH
56079: LD_INT 2
56081: ARRAY
56082: PPUSH
56083: CALL_OW 235
56087: GO 56062
56089: POP
56090: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
56091: LD_ADDR_EXP 50
56095: PUSH
56096: LD_EXP 50
56100: PPUSH
56101: LD_VAR 0 4
56105: PPUSH
56106: EMPTY
56107: PPUSH
56108: CALL_OW 1
56112: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
56113: LD_VAR 0 1
56117: PPUSH
56118: LD_INT 0
56120: PPUSH
56121: CALL_OW 505
// end ; end ;
56125: LD_VAR 0 2
56129: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
56130: LD_INT 0
56132: PPUSH
56133: PPUSH
56134: PPUSH
// if not hack in hackTanks or not vehicles then
56135: LD_VAR 0 1
56139: PUSH
56140: LD_EXP 49
56144: IN
56145: NOT
56146: IFTRUE 56155
56148: PUSH
56149: LD_VAR 0 2
56153: NOT
56154: OR
56155: IFFALSE 56159
// exit ;
56157: GO 56434
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
56159: LD_ADDR_VAR 0 2
56163: PUSH
56164: LD_VAR 0 1
56168: PPUSH
56169: LD_VAR 0 2
56173: PPUSH
56174: LD_INT 1
56176: PPUSH
56177: LD_INT 1
56179: PPUSH
56180: CALL 15369 0 4
56184: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
56185: LD_ADDR_VAR 0 5
56189: PUSH
56190: LD_EXP 49
56194: PPUSH
56195: LD_VAR 0 1
56199: PPUSH
56200: CALL 14717 0 2
56204: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
56205: LD_EXP 50
56209: PUSH
56210: LD_VAR 0 5
56214: ARRAY
56215: PUSH
56216: LD_EXP 51
56220: LESS
56221: IFFALSE 56410
// begin for i := 1 to vehicles do
56223: LD_ADDR_VAR 0 4
56227: PUSH
56228: DOUBLE
56229: LD_INT 1
56231: DEC
56232: ST_TO_ADDR
56233: LD_VAR 0 2
56237: PUSH
56238: FOR_TO
56239: IFFALSE 56408
// begin if hackTanksCaptured [ index ] = hackLimit then
56241: LD_EXP 50
56245: PUSH
56246: LD_VAR 0 5
56250: ARRAY
56251: PUSH
56252: LD_EXP 51
56256: EQUAL
56257: IFFALSE 56261
// break ;
56259: GO 56408
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
56261: LD_ADDR_EXP 53
56265: PUSH
56266: LD_EXP 53
56270: PPUSH
56271: LD_VAR 0 5
56275: PPUSH
56276: LD_EXP 53
56280: PUSH
56281: LD_VAR 0 5
56285: ARRAY
56286: PUSH
56287: LD_INT 1
56289: PLUS
56290: PPUSH
56291: CALL_OW 1
56295: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
56296: LD_ADDR_EXP 50
56300: PUSH
56301: LD_EXP 50
56305: PPUSH
56306: LD_VAR 0 5
56310: PUSH
56311: LD_EXP 50
56315: PUSH
56316: LD_VAR 0 5
56320: ARRAY
56321: PUSH
56322: LD_INT 1
56324: PLUS
56325: PUSH
56326: EMPTY
56327: LIST
56328: LIST
56329: PPUSH
56330: LD_VAR 0 2
56334: PUSH
56335: LD_VAR 0 4
56339: ARRAY
56340: PUSH
56341: LD_VAR 0 2
56345: PUSH
56346: LD_VAR 0 4
56350: ARRAY
56351: PPUSH
56352: CALL_OW 255
56356: PUSH
56357: EMPTY
56358: LIST
56359: LIST
56360: PPUSH
56361: CALL 14934 0 3
56365: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
56366: LD_VAR 0 2
56370: PUSH
56371: LD_VAR 0 4
56375: ARRAY
56376: PPUSH
56377: LD_VAR 0 1
56381: PPUSH
56382: CALL_OW 255
56386: PPUSH
56387: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
56391: LD_VAR 0 2
56395: PUSH
56396: LD_VAR 0 4
56400: ARRAY
56401: PPUSH
56402: CALL_OW 141
// end ;
56406: GO 56238
56408: POP
56409: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
56410: LD_VAR 0 1
56414: PPUSH
56415: LD_EXP 50
56419: PUSH
56420: LD_VAR 0 5
56424: ARRAY
56425: PUSH
56426: LD_INT 0
56428: PLUS
56429: PPUSH
56430: CALL_OW 505
// end ;
56434: LD_VAR 0 3
56438: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
56439: LD_INT 0
56441: PPUSH
56442: PPUSH
56443: PPUSH
56444: PPUSH
// if not hack in hackTanks then
56445: LD_VAR 0 1
56449: PUSH
56450: LD_EXP 49
56454: IN
56455: NOT
56456: IFFALSE 56460
// exit ;
56458: GO 56704
// index := GetElementIndex ( hackTanks , hack ) ;
56460: LD_ADDR_VAR 0 4
56464: PUSH
56465: LD_EXP 49
56469: PPUSH
56470: LD_VAR 0 1
56474: PPUSH
56475: CALL 14717 0 2
56479: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
56480: LD_ADDR_VAR 0 3
56484: PUSH
56485: DOUBLE
56486: LD_EXP 50
56490: PUSH
56491: LD_VAR 0 4
56495: ARRAY
56496: INC
56497: ST_TO_ADDR
56498: LD_INT 1
56500: PUSH
56501: FOR_DOWNTO
56502: IFFALSE 56678
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
56504: LD_ADDR_VAR 0 5
56508: PUSH
56509: LD_EXP 50
56513: PUSH
56514: LD_VAR 0 4
56518: ARRAY
56519: PUSH
56520: LD_VAR 0 3
56524: ARRAY
56525: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
56526: LD_VAR 0 5
56530: PUSH
56531: LD_INT 1
56533: ARRAY
56534: PPUSH
56535: CALL_OW 302
56539: NOT
56540: IFTRUE 56568
56542: PUSH
56543: LD_VAR 0 5
56547: PUSH
56548: LD_INT 1
56550: ARRAY
56551: PPUSH
56552: CALL_OW 255
56556: PUSH
56557: LD_VAR 0 1
56561: PPUSH
56562: CALL_OW 255
56566: NONEQUAL
56567: OR
56568: IFFALSE 56676
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
56570: LD_VAR 0 5
56574: PUSH
56575: LD_INT 1
56577: ARRAY
56578: PPUSH
56579: CALL_OW 305
56583: IFFALSE 56611
56585: PUSH
56586: LD_VAR 0 5
56590: PUSH
56591: LD_INT 1
56593: ARRAY
56594: PPUSH
56595: CALL_OW 255
56599: PUSH
56600: LD_VAR 0 1
56604: PPUSH
56605: CALL_OW 255
56609: EQUAL
56610: AND
56611: IFFALSE 56635
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
56613: LD_VAR 0 5
56617: PUSH
56618: LD_INT 1
56620: ARRAY
56621: PPUSH
56622: LD_VAR 0 5
56626: PUSH
56627: LD_INT 2
56629: ARRAY
56630: PPUSH
56631: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
56635: LD_ADDR_EXP 50
56639: PUSH
56640: LD_EXP 50
56644: PPUSH
56645: LD_VAR 0 4
56649: PPUSH
56650: LD_EXP 50
56654: PUSH
56655: LD_VAR 0 4
56659: ARRAY
56660: PPUSH
56661: LD_VAR 0 3
56665: PPUSH
56666: CALL_OW 3
56670: PPUSH
56671: CALL_OW 1
56675: ST_TO_ADDR
// end ; end ;
56676: GO 56501
56678: POP
56679: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
56680: LD_VAR 0 1
56684: PPUSH
56685: LD_EXP 50
56689: PUSH
56690: LD_VAR 0 4
56694: ARRAY
56695: PUSH
56696: LD_INT 0
56698: PLUS
56699: PPUSH
56700: CALL_OW 505
// end ;
56704: LD_VAR 0 2
56708: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
56709: LD_INT 0
56711: PPUSH
56712: PPUSH
56713: PPUSH
56714: PPUSH
// if not hack in hackTanks then
56715: LD_VAR 0 1
56719: PUSH
56720: LD_EXP 49
56724: IN
56725: NOT
56726: IFFALSE 56730
// exit ;
56728: GO 56815
// index := GetElementIndex ( hackTanks , hack ) ;
56730: LD_ADDR_VAR 0 5
56734: PUSH
56735: LD_EXP 49
56739: PPUSH
56740: LD_VAR 0 1
56744: PPUSH
56745: CALL 14717 0 2
56749: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
56750: LD_ADDR_VAR 0 4
56754: PUSH
56755: DOUBLE
56756: LD_INT 1
56758: DEC
56759: ST_TO_ADDR
56760: LD_EXP 50
56764: PUSH
56765: LD_VAR 0 5
56769: ARRAY
56770: PUSH
56771: FOR_TO
56772: IFFALSE 56813
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
56774: LD_EXP 50
56778: PUSH
56779: LD_VAR 0 5
56783: ARRAY
56784: PUSH
56785: LD_VAR 0 4
56789: ARRAY
56790: PUSH
56791: LD_INT 1
56793: ARRAY
56794: PUSH
56795: LD_VAR 0 2
56799: EQUAL
56800: IFFALSE 56811
// KillUnit ( vehicle ) ;
56802: LD_VAR 0 2
56806: PPUSH
56807: CALL_OW 66
56811: GO 56771
56813: POP
56814: POP
// end ;
56815: LD_VAR 0 3
56819: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
56820: LD_EXP 54
56824: NOT
56825: IFFALSE 56860
56827: GO 56829
56829: DISABLE
// begin initMiner := true ;
56830: LD_ADDR_EXP 54
56834: PUSH
56835: LD_INT 1
56837: ST_TO_ADDR
// minersList := [ ] ;
56838: LD_ADDR_EXP 55
56842: PUSH
56843: EMPTY
56844: ST_TO_ADDR
// minerMinesList := [ ] ;
56845: LD_ADDR_EXP 56
56849: PUSH
56850: EMPTY
56851: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
56852: LD_ADDR_EXP 57
56856: PUSH
56857: LD_INT 5
56859: ST_TO_ADDR
// end ;
56860: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
56861: LD_EXP 54
56865: IFFALSE 56883
56867: PUSH
56868: LD_INT 34
56870: PUSH
56871: LD_INT 81
56873: PUSH
56874: EMPTY
56875: LIST
56876: LIST
56877: PPUSH
56878: CALL_OW 69
56882: AND
56883: IFFALSE 57346
56885: GO 56887
56887: DISABLE
56888: LD_INT 0
56890: PPUSH
56891: PPUSH
56892: PPUSH
56893: PPUSH
// begin enable ;
56894: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
56895: LD_ADDR_VAR 0 1
56899: PUSH
56900: LD_INT 34
56902: PUSH
56903: LD_INT 81
56905: PUSH
56906: EMPTY
56907: LIST
56908: LIST
56909: PPUSH
56910: CALL_OW 69
56914: PUSH
56915: FOR_IN
56916: IFFALSE 56988
// begin if not i in minersList then
56918: LD_VAR 0 1
56922: PUSH
56923: LD_EXP 55
56927: IN
56928: NOT
56929: IFFALSE 56986
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
56931: LD_ADDR_EXP 55
56935: PUSH
56936: LD_EXP 55
56940: PPUSH
56941: LD_EXP 55
56945: PUSH
56946: LD_INT 1
56948: PLUS
56949: PPUSH
56950: LD_VAR 0 1
56954: PPUSH
56955: CALL_OW 1
56959: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
56960: LD_ADDR_EXP 56
56964: PUSH
56965: LD_EXP 56
56969: PPUSH
56970: LD_EXP 56
56974: PUSH
56975: LD_INT 1
56977: PLUS
56978: PPUSH
56979: EMPTY
56980: PPUSH
56981: CALL_OW 1
56985: ST_TO_ADDR
// end end ;
56986: GO 56915
56988: POP
56989: POP
// for i := minerMinesList downto 1 do
56990: LD_ADDR_VAR 0 1
56994: PUSH
56995: DOUBLE
56996: LD_EXP 56
57000: INC
57001: ST_TO_ADDR
57002: LD_INT 1
57004: PUSH
57005: FOR_DOWNTO
57006: IFFALSE 57344
// begin if IsLive ( minersList [ i ] ) then
57008: LD_EXP 55
57012: PUSH
57013: LD_VAR 0 1
57017: ARRAY
57018: PPUSH
57019: CALL_OW 300
57023: IFFALSE 57051
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
57025: LD_EXP 55
57029: PUSH
57030: LD_VAR 0 1
57034: ARRAY
57035: PPUSH
57036: LD_EXP 56
57040: PUSH
57041: LD_VAR 0 1
57045: ARRAY
57046: PPUSH
57047: CALL_OW 505
// if not minerMinesList [ i ] then
57051: LD_EXP 56
57055: PUSH
57056: LD_VAR 0 1
57060: ARRAY
57061: NOT
57062: IFFALSE 57066
// continue ;
57064: GO 57005
// for j := minerMinesList [ i ] downto 1 do
57066: LD_ADDR_VAR 0 2
57070: PUSH
57071: DOUBLE
57072: LD_EXP 56
57076: PUSH
57077: LD_VAR 0 1
57081: ARRAY
57082: INC
57083: ST_TO_ADDR
57084: LD_INT 1
57086: PUSH
57087: FOR_DOWNTO
57088: IFFALSE 57340
// begin side := GetSide ( minersList [ i ] ) ;
57090: LD_ADDR_VAR 0 3
57094: PUSH
57095: LD_EXP 55
57099: PUSH
57100: LD_VAR 0 1
57104: ARRAY
57105: PPUSH
57106: CALL_OW 255
57110: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
57111: LD_ADDR_VAR 0 4
57115: PUSH
57116: LD_EXP 56
57120: PUSH
57121: LD_VAR 0 1
57125: ARRAY
57126: PUSH
57127: LD_VAR 0 2
57131: ARRAY
57132: PUSH
57133: LD_INT 1
57135: ARRAY
57136: PPUSH
57137: LD_EXP 56
57141: PUSH
57142: LD_VAR 0 1
57146: ARRAY
57147: PUSH
57148: LD_VAR 0 2
57152: ARRAY
57153: PUSH
57154: LD_INT 2
57156: ARRAY
57157: PPUSH
57158: CALL_OW 428
57162: ST_TO_ADDR
// if not tmp then
57163: LD_VAR 0 4
57167: NOT
57168: IFFALSE 57172
// continue ;
57170: GO 57087
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
57172: LD_VAR 0 4
57176: PUSH
57177: LD_INT 81
57179: PUSH
57180: LD_VAR 0 3
57184: PUSH
57185: EMPTY
57186: LIST
57187: LIST
57188: PPUSH
57189: CALL_OW 69
57193: IN
57194: IFFALSE 57244
57196: PUSH
57197: LD_EXP 56
57201: PUSH
57202: LD_VAR 0 1
57206: ARRAY
57207: PUSH
57208: LD_VAR 0 2
57212: ARRAY
57213: PUSH
57214: LD_INT 1
57216: ARRAY
57217: PPUSH
57218: LD_EXP 56
57222: PUSH
57223: LD_VAR 0 1
57227: ARRAY
57228: PUSH
57229: LD_VAR 0 2
57233: ARRAY
57234: PUSH
57235: LD_INT 2
57237: ARRAY
57238: PPUSH
57239: CALL_OW 458
57243: AND
57244: IFFALSE 57338
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
57246: LD_EXP 56
57250: PUSH
57251: LD_VAR 0 1
57255: ARRAY
57256: PUSH
57257: LD_VAR 0 2
57261: ARRAY
57262: PUSH
57263: LD_INT 1
57265: ARRAY
57266: PPUSH
57267: LD_EXP 56
57271: PUSH
57272: LD_VAR 0 1
57276: ARRAY
57277: PUSH
57278: LD_VAR 0 2
57282: ARRAY
57283: PUSH
57284: LD_INT 2
57286: ARRAY
57287: PPUSH
57288: LD_VAR 0 3
57292: PPUSH
57293: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
57297: LD_ADDR_EXP 56
57301: PUSH
57302: LD_EXP 56
57306: PPUSH
57307: LD_VAR 0 1
57311: PPUSH
57312: LD_EXP 56
57316: PUSH
57317: LD_VAR 0 1
57321: ARRAY
57322: PPUSH
57323: LD_VAR 0 2
57327: PPUSH
57328: CALL_OW 3
57332: PPUSH
57333: CALL_OW 1
57337: ST_TO_ADDR
// end ; end ;
57338: GO 57087
57340: POP
57341: POP
// end ;
57342: GO 57005
57344: POP
57345: POP
// end ;
57346: PPOPN 4
57348: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
57349: LD_INT 0
57351: PPUSH
57352: PPUSH
// result := false ;
57353: LD_ADDR_VAR 0 4
57357: PUSH
57358: LD_INT 0
57360: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
57361: LD_VAR 0 1
57365: PPUSH
57366: CALL_OW 264
57370: PUSH
57371: LD_INT 81
57373: EQUAL
57374: NOT
57375: IFFALSE 57379
// exit ;
57377: GO 57623
// index := GetElementIndex ( minersList , unit ) ;
57379: LD_ADDR_VAR 0 5
57383: PUSH
57384: LD_EXP 55
57388: PPUSH
57389: LD_VAR 0 1
57393: PPUSH
57394: CALL 14717 0 2
57398: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
57399: LD_EXP 56
57403: PUSH
57404: LD_VAR 0 5
57408: ARRAY
57409: PUSH
57410: LD_EXP 57
57414: GREATEREQUAL
57415: IFFALSE 57419
// exit ;
57417: GO 57623
// ComMoveXY ( unit , x , y ) ;
57419: LD_VAR 0 1
57423: PPUSH
57424: LD_VAR 0 2
57428: PPUSH
57429: LD_VAR 0 3
57433: PPUSH
57434: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
57438: LD_INT 35
57440: PPUSH
57441: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
57445: LD_VAR 0 1
57449: PPUSH
57450: LD_VAR 0 2
57454: PPUSH
57455: LD_VAR 0 3
57459: PPUSH
57460: CALL 46763 0 3
57464: NOT
57465: IFFALSE 57478
57467: PUSH
57468: LD_VAR 0 1
57472: PPUSH
57473: CALL_OW 314
57477: AND
57478: IFFALSE 57482
// exit ;
57480: GO 57623
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
57482: LD_VAR 0 2
57486: PPUSH
57487: LD_VAR 0 3
57491: PPUSH
57492: CALL_OW 428
57496: PUSH
57497: LD_VAR 0 1
57501: EQUAL
57502: IFFALSE 57516
57504: PUSH
57505: LD_VAR 0 1
57509: PPUSH
57510: CALL_OW 314
57514: NOT
57515: AND
57516: IFFALSE 57438
// PlaySoundXY ( x , y , PlantMine ) ;
57518: LD_VAR 0 2
57522: PPUSH
57523: LD_VAR 0 3
57527: PPUSH
57528: LD_STRING PlantMine
57530: PPUSH
57531: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
57535: LD_VAR 0 2
57539: PPUSH
57540: LD_VAR 0 3
57544: PPUSH
57545: LD_VAR 0 1
57549: PPUSH
57550: CALL_OW 255
57554: PPUSH
57555: LD_INT 0
57557: PPUSH
57558: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
57562: LD_ADDR_EXP 56
57566: PUSH
57567: LD_EXP 56
57571: PPUSH
57572: LD_VAR 0 5
57576: PUSH
57577: LD_EXP 56
57581: PUSH
57582: LD_VAR 0 5
57586: ARRAY
57587: PUSH
57588: LD_INT 1
57590: PLUS
57591: PUSH
57592: EMPTY
57593: LIST
57594: LIST
57595: PPUSH
57596: LD_VAR 0 2
57600: PUSH
57601: LD_VAR 0 3
57605: PUSH
57606: EMPTY
57607: LIST
57608: LIST
57609: PPUSH
57610: CALL 14934 0 3
57614: ST_TO_ADDR
// result := true ;
57615: LD_ADDR_VAR 0 4
57619: PUSH
57620: LD_INT 1
57622: ST_TO_ADDR
// end ;
57623: LD_VAR 0 4
57627: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
57628: LD_INT 0
57630: PPUSH
57631: PPUSH
57632: PPUSH
// if not unit in minersList then
57633: LD_VAR 0 1
57637: PUSH
57638: LD_EXP 55
57642: IN
57643: NOT
57644: IFFALSE 57648
// exit ;
57646: GO 58042
// index := GetElementIndex ( minersList , unit ) ;
57648: LD_ADDR_VAR 0 6
57652: PUSH
57653: LD_EXP 55
57657: PPUSH
57658: LD_VAR 0 1
57662: PPUSH
57663: CALL 14717 0 2
57667: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
57668: LD_ADDR_VAR 0 5
57672: PUSH
57673: DOUBLE
57674: LD_EXP 56
57678: PUSH
57679: LD_VAR 0 6
57683: ARRAY
57684: INC
57685: ST_TO_ADDR
57686: LD_INT 1
57688: PUSH
57689: FOR_DOWNTO
57690: IFFALSE 57853
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
57692: LD_EXP 56
57696: PUSH
57697: LD_VAR 0 6
57701: ARRAY
57702: PUSH
57703: LD_VAR 0 5
57707: ARRAY
57708: PUSH
57709: LD_INT 1
57711: ARRAY
57712: PUSH
57713: LD_VAR 0 2
57717: EQUAL
57718: IFFALSE 57748
57720: PUSH
57721: LD_EXP 56
57725: PUSH
57726: LD_VAR 0 6
57730: ARRAY
57731: PUSH
57732: LD_VAR 0 5
57736: ARRAY
57737: PUSH
57738: LD_INT 2
57740: ARRAY
57741: PUSH
57742: LD_VAR 0 3
57746: EQUAL
57747: AND
57748: IFFALSE 57851
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
57750: LD_EXP 56
57754: PUSH
57755: LD_VAR 0 6
57759: ARRAY
57760: PUSH
57761: LD_VAR 0 5
57765: ARRAY
57766: PUSH
57767: LD_INT 1
57769: ARRAY
57770: PPUSH
57771: LD_EXP 56
57775: PUSH
57776: LD_VAR 0 6
57780: ARRAY
57781: PUSH
57782: LD_VAR 0 5
57786: ARRAY
57787: PUSH
57788: LD_INT 2
57790: ARRAY
57791: PPUSH
57792: LD_VAR 0 1
57796: PPUSH
57797: CALL_OW 255
57801: PPUSH
57802: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
57806: LD_ADDR_EXP 56
57810: PUSH
57811: LD_EXP 56
57815: PPUSH
57816: LD_VAR 0 6
57820: PPUSH
57821: LD_EXP 56
57825: PUSH
57826: LD_VAR 0 6
57830: ARRAY
57831: PPUSH
57832: LD_VAR 0 5
57836: PPUSH
57837: CALL_OW 3
57841: PPUSH
57842: CALL_OW 1
57846: ST_TO_ADDR
// exit ;
57847: POP
57848: POP
57849: GO 58042
// end ; end ;
57851: GO 57689
57853: POP
57854: POP
// for i := minerMinesList [ index ] downto 1 do
57855: LD_ADDR_VAR 0 5
57859: PUSH
57860: DOUBLE
57861: LD_EXP 56
57865: PUSH
57866: LD_VAR 0 6
57870: ARRAY
57871: INC
57872: ST_TO_ADDR
57873: LD_INT 1
57875: PUSH
57876: FOR_DOWNTO
57877: IFFALSE 58040
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
57879: LD_EXP 56
57883: PUSH
57884: LD_VAR 0 6
57888: ARRAY
57889: PUSH
57890: LD_VAR 0 5
57894: ARRAY
57895: PUSH
57896: LD_INT 1
57898: ARRAY
57899: PPUSH
57900: LD_EXP 56
57904: PUSH
57905: LD_VAR 0 6
57909: ARRAY
57910: PUSH
57911: LD_VAR 0 5
57915: ARRAY
57916: PUSH
57917: LD_INT 2
57919: ARRAY
57920: PPUSH
57921: LD_VAR 0 2
57925: PPUSH
57926: LD_VAR 0 3
57930: PPUSH
57931: CALL_OW 298
57935: PUSH
57936: LD_INT 6
57938: LESS
57939: IFFALSE 58038
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
57941: LD_EXP 56
57945: PUSH
57946: LD_VAR 0 6
57950: ARRAY
57951: PUSH
57952: LD_VAR 0 5
57956: ARRAY
57957: PUSH
57958: LD_INT 1
57960: ARRAY
57961: PPUSH
57962: LD_EXP 56
57966: PUSH
57967: LD_VAR 0 6
57971: ARRAY
57972: PUSH
57973: LD_VAR 0 5
57977: ARRAY
57978: PUSH
57979: LD_INT 2
57981: ARRAY
57982: PPUSH
57983: LD_VAR 0 1
57987: PPUSH
57988: CALL_OW 255
57992: PPUSH
57993: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
57997: LD_ADDR_EXP 56
58001: PUSH
58002: LD_EXP 56
58006: PPUSH
58007: LD_VAR 0 6
58011: PPUSH
58012: LD_EXP 56
58016: PUSH
58017: LD_VAR 0 6
58021: ARRAY
58022: PPUSH
58023: LD_VAR 0 5
58027: PPUSH
58028: CALL_OW 3
58032: PPUSH
58033: CALL_OW 1
58037: ST_TO_ADDR
// end ; end ;
58038: GO 57876
58040: POP
58041: POP
// end ;
58042: LD_VAR 0 4
58046: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
58047: LD_INT 0
58049: PPUSH
58050: PPUSH
58051: PPUSH
58052: PPUSH
58053: PPUSH
58054: PPUSH
58055: PPUSH
58056: PPUSH
58057: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
58058: LD_VAR 0 1
58062: PPUSH
58063: CALL_OW 264
58067: PUSH
58068: LD_INT 81
58070: EQUAL
58071: NOT
58072: IFTRUE 58087
58074: PUSH
58075: LD_VAR 0 1
58079: PUSH
58080: LD_EXP 55
58084: IN
58085: NOT
58086: OR
58087: IFFALSE 58091
// exit ;
58089: GO 58417
// index := GetElementIndex ( minersList , unit ) ;
58091: LD_ADDR_VAR 0 6
58095: PUSH
58096: LD_EXP 55
58100: PPUSH
58101: LD_VAR 0 1
58105: PPUSH
58106: CALL 14717 0 2
58110: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
58111: LD_ADDR_VAR 0 8
58115: PUSH
58116: LD_EXP 57
58120: PUSH
58121: LD_EXP 56
58125: PUSH
58126: LD_VAR 0 6
58130: ARRAY
58131: MINUS
58132: ST_TO_ADDR
// if not minesFreeAmount then
58133: LD_VAR 0 8
58137: NOT
58138: IFFALSE 58142
// exit ;
58140: GO 58417
// tmp := [ ] ;
58142: LD_ADDR_VAR 0 7
58146: PUSH
58147: EMPTY
58148: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
58149: LD_ADDR_VAR 0 5
58153: PUSH
58154: DOUBLE
58155: LD_INT 1
58157: DEC
58158: ST_TO_ADDR
58159: LD_VAR 0 8
58163: PUSH
58164: FOR_TO
58165: IFFALSE 58364
// begin _d := rand ( 0 , 5 ) ;
58167: LD_ADDR_VAR 0 11
58171: PUSH
58172: LD_INT 0
58174: PPUSH
58175: LD_INT 5
58177: PPUSH
58178: CALL_OW 12
58182: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
58183: LD_ADDR_VAR 0 12
58187: PUSH
58188: LD_INT 2
58190: PPUSH
58191: LD_INT 6
58193: PPUSH
58194: CALL_OW 12
58198: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
58199: LD_ADDR_VAR 0 9
58203: PUSH
58204: LD_VAR 0 2
58208: PPUSH
58209: LD_VAR 0 11
58213: PPUSH
58214: LD_VAR 0 12
58218: PPUSH
58219: CALL_OW 272
58223: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
58224: LD_ADDR_VAR 0 10
58228: PUSH
58229: LD_VAR 0 3
58233: PPUSH
58234: LD_VAR 0 11
58238: PPUSH
58239: LD_VAR 0 12
58243: PPUSH
58244: CALL_OW 273
58248: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
58249: LD_VAR 0 9
58253: PPUSH
58254: LD_VAR 0 10
58258: PPUSH
58259: CALL_OW 488
58263: IFFALSE 58287
58265: PUSH
58266: LD_VAR 0 9
58270: PUSH
58271: LD_VAR 0 10
58275: PUSH
58276: EMPTY
58277: LIST
58278: LIST
58279: PUSH
58280: LD_VAR 0 7
58284: IN
58285: NOT
58286: AND
58287: IFFALSE 58306
58289: PUSH
58290: LD_VAR 0 9
58294: PPUSH
58295: LD_VAR 0 10
58299: PPUSH
58300: CALL_OW 458
58304: NOT
58305: AND
58306: IFFALSE 58348
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
58308: LD_ADDR_VAR 0 7
58312: PUSH
58313: LD_VAR 0 7
58317: PPUSH
58318: LD_VAR 0 7
58322: PUSH
58323: LD_INT 1
58325: PLUS
58326: PPUSH
58327: LD_VAR 0 9
58331: PUSH
58332: LD_VAR 0 10
58336: PUSH
58337: EMPTY
58338: LIST
58339: LIST
58340: PPUSH
58341: CALL_OW 1
58345: ST_TO_ADDR
58346: GO 58362
// i := i - 1 ;
58348: LD_ADDR_VAR 0 5
58352: PUSH
58353: LD_VAR 0 5
58357: PUSH
58358: LD_INT 1
58360: MINUS
58361: ST_TO_ADDR
// end ;
58362: GO 58164
58364: POP
58365: POP
// for i in tmp do
58366: LD_ADDR_VAR 0 5
58370: PUSH
58371: LD_VAR 0 7
58375: PUSH
58376: FOR_IN
58377: IFFALSE 58415
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
58379: LD_VAR 0 1
58383: PPUSH
58384: LD_VAR 0 5
58388: PUSH
58389: LD_INT 1
58391: ARRAY
58392: PPUSH
58393: LD_VAR 0 5
58397: PUSH
58398: LD_INT 2
58400: ARRAY
58401: PPUSH
58402: CALL 57349 0 3
58406: NOT
58407: IFFALSE 58413
// exit ;
58409: POP
58410: POP
58411: GO 58417
58413: GO 58376
58415: POP
58416: POP
// end ;
58417: LD_VAR 0 4
58421: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
58422: LD_INT 0
58424: PPUSH
58425: PPUSH
58426: PPUSH
58427: PPUSH
58428: PPUSH
58429: PPUSH
58430: PPUSH
58431: PPUSH
58432: PPUSH
// if GetClass ( unit ) <> class_sniper then
58433: LD_VAR 0 1
58437: PPUSH
58438: CALL_OW 257
58442: PUSH
58443: LD_INT 5
58445: NONEQUAL
58446: IFFALSE 58450
// exit ;
58448: GO 58920
// dist := 8 ;
58450: LD_ADDR_VAR 0 5
58454: PUSH
58455: LD_INT 8
58457: ST_TO_ADDR
// viewRange := 12 ;
58458: LD_ADDR_VAR 0 8
58462: PUSH
58463: LD_INT 12
58465: ST_TO_ADDR
// side := GetSide ( unit ) ;
58466: LD_ADDR_VAR 0 6
58470: PUSH
58471: LD_VAR 0 1
58475: PPUSH
58476: CALL_OW 255
58480: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
58481: LD_INT 61
58483: PPUSH
58484: LD_VAR 0 6
58488: PPUSH
58489: CALL_OW 321
58493: PUSH
58494: LD_INT 2
58496: EQUAL
58497: IFFALSE 58507
// viewRange := 16 ;
58499: LD_ADDR_VAR 0 8
58503: PUSH
58504: LD_INT 16
58506: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
58507: LD_VAR 0 1
58511: PPUSH
58512: LD_VAR 0 2
58516: PPUSH
58517: LD_VAR 0 3
58521: PPUSH
58522: CALL_OW 297
58526: PUSH
58527: LD_VAR 0 5
58531: GREATER
58532: IFFALSE 58611
// begin ComMoveXY ( unit , x , y ) ;
58534: LD_VAR 0 1
58538: PPUSH
58539: LD_VAR 0 2
58543: PPUSH
58544: LD_VAR 0 3
58548: PPUSH
58549: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
58553: LD_INT 35
58555: PPUSH
58556: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
58560: LD_VAR 0 1
58564: PPUSH
58565: LD_VAR 0 2
58569: PPUSH
58570: LD_VAR 0 3
58574: PPUSH
58575: CALL 46763 0 3
58579: NOT
58580: IFFALSE 58584
// exit ;
58582: GO 58920
// until GetDistUnitXY ( unit , x , y ) < dist ;
58584: LD_VAR 0 1
58588: PPUSH
58589: LD_VAR 0 2
58593: PPUSH
58594: LD_VAR 0 3
58598: PPUSH
58599: CALL_OW 297
58603: PUSH
58604: LD_VAR 0 5
58608: LESS
58609: IFFALSE 58553
// end ; ComTurnXY ( unit , x , y ) ;
58611: LD_VAR 0 1
58615: PPUSH
58616: LD_VAR 0 2
58620: PPUSH
58621: LD_VAR 0 3
58625: PPUSH
58626: CALL_OW 118
// repeat if Multiplayer then
58630: LD_OWVAR 4
58634: IFFALSE 58645
// wait ( 35 ) else
58636: LD_INT 35
58638: PPUSH
58639: CALL_OW 67
58643: GO 58652
// wait ( 5 ) ;
58645: LD_INT 5
58647: PPUSH
58648: CALL_OW 67
// _d := GetDir ( unit ) ;
58652: LD_ADDR_VAR 0 11
58656: PUSH
58657: LD_VAR 0 1
58661: PPUSH
58662: CALL_OW 254
58666: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
58667: LD_ADDR_VAR 0 7
58671: PUSH
58672: LD_VAR 0 1
58676: PPUSH
58677: CALL_OW 250
58681: PPUSH
58682: LD_VAR 0 1
58686: PPUSH
58687: CALL_OW 251
58691: PPUSH
58692: LD_VAR 0 2
58696: PPUSH
58697: LD_VAR 0 3
58701: PPUSH
58702: CALL 49399 0 4
58706: ST_TO_ADDR
// until dir = _d ;
58707: LD_VAR 0 7
58711: PUSH
58712: LD_VAR 0 11
58716: EQUAL
58717: IFFALSE 58630
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
58719: LD_ADDR_VAR 0 9
58723: PUSH
58724: LD_VAR 0 1
58728: PPUSH
58729: CALL_OW 250
58733: PPUSH
58734: LD_VAR 0 7
58738: PPUSH
58739: LD_VAR 0 5
58743: PPUSH
58744: CALL_OW 272
58748: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
58749: LD_ADDR_VAR 0 10
58753: PUSH
58754: LD_VAR 0 1
58758: PPUSH
58759: CALL_OW 251
58763: PPUSH
58764: LD_VAR 0 7
58768: PPUSH
58769: LD_VAR 0 5
58773: PPUSH
58774: CALL_OW 273
58778: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
58779: LD_VAR 0 9
58783: PPUSH
58784: LD_VAR 0 10
58788: PPUSH
58789: CALL_OW 488
58793: NOT
58794: IFFALSE 58798
// exit ;
58796: GO 58920
// ComAnimCustom ( unit , 1 ) ;
58798: LD_VAR 0 1
58802: PPUSH
58803: LD_INT 1
58805: PPUSH
58806: CALL_OW 592
// p := 0 ;
58810: LD_ADDR_VAR 0 12
58814: PUSH
58815: LD_INT 0
58817: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
58818: LD_VAR 0 9
58822: PPUSH
58823: LD_VAR 0 10
58827: PPUSH
58828: LD_VAR 0 6
58832: PPUSH
58833: LD_VAR 0 8
58837: PPUSH
58838: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
58842: LD_INT 35
58844: PPUSH
58845: CALL_OW 67
// p := Inc ( p ) ;
58849: LD_ADDR_VAR 0 12
58853: PUSH
58854: LD_VAR 0 12
58858: PPUSH
58859: CALL 49355 0 1
58863: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
58864: LD_VAR 0 12
58868: PUSH
58869: LD_INT 3
58871: EQUAL
58872: IFTRUE 58886
58874: PUSH
58875: LD_VAR 0 1
58879: PPUSH
58880: CALL_OW 302
58884: NOT
58885: OR
58886: IFTRUE 58899
58888: PUSH
58889: LD_VAR 0 1
58893: PPUSH
58894: CALL_OW 301
58898: OR
58899: IFFALSE 58842
// RemoveSeeing ( _x , _y , side ) ;
58901: LD_VAR 0 9
58905: PPUSH
58906: LD_VAR 0 10
58910: PPUSH
58911: LD_VAR 0 6
58915: PPUSH
58916: CALL_OW 331
// end ; end_of_file
58920: LD_VAR 0 4
58924: RET
// export mpKingPoints ; every 0 0$1 trigger mpGameActive marked GameTypeKing do var i , j , tmp ;
58925: LD_EXP 39
58929: IFFALSE 59270
58931: GO 58933
58933: DISABLE
58934: LD_INT 0
58936: PPUSH
58937: PPUSH
58938: PPUSH
// begin mpKingPoints := [ ] ;
58939: LD_ADDR_EXP 58
58943: PUSH
58944: EMPTY
58945: ST_TO_ADDR
// if mpTeamGame then
58946: LD_EXP 11
58950: IFFALSE 59004
// begin for i := 1 to Count ( mpTeams ) do
58952: LD_ADDR_VAR 0 1
58956: PUSH
58957: DOUBLE
58958: LD_INT 1
58960: DEC
58961: ST_TO_ADDR
58962: LD_EXP 10
58966: PPUSH
58967: CALL 12050 0 1
58971: PUSH
58972: FOR_TO
58973: IFFALSE 59000
// mpKingPoints := Replace ( mpKingPoints , i , 0 ) ;
58975: LD_ADDR_EXP 58
58979: PUSH
58980: LD_EXP 58
58984: PPUSH
58985: LD_VAR 0 1
58989: PPUSH
58990: LD_INT 0
58992: PPUSH
58993: CALL_OW 1
58997: ST_TO_ADDR
58998: GO 58972
59000: POP
59001: POP
// end else
59002: GO 59047
// begin for i := 1 to 8 do
59004: LD_ADDR_VAR 0 1
59008: PUSH
59009: DOUBLE
59010: LD_INT 1
59012: DEC
59013: ST_TO_ADDR
59014: LD_INT 8
59016: PUSH
59017: FOR_TO
59018: IFFALSE 59045
// mpKingPoints := Replace ( mpKingPoints , i , 0 ) ;
59020: LD_ADDR_EXP 58
59024: PUSH
59025: LD_EXP 58
59029: PPUSH
59030: LD_VAR 0 1
59034: PPUSH
59035: LD_INT 0
59037: PPUSH
59038: CALL_OW 1
59042: ST_TO_ADDR
59043: GO 59017
59045: POP
59046: POP
// end ; tmp := AreaToList ( kingCamArea , 0 ) ;
59047: LD_ADDR_VAR 0 3
59051: PUSH
59052: LD_EXP 2
59056: PPUSH
59057: LD_INT 0
59059: PPUSH
59060: CALL_OW 517
59064: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
59065: LD_ADDR_VAR 0 1
59069: PUSH
59070: DOUBLE
59071: LD_INT 1
59073: DEC
59074: ST_TO_ADDR
59075: LD_VAR 0 3
59079: PUSH
59080: LD_INT 1
59082: ARRAY
59083: PUSH
59084: FOR_TO
59085: IFFALSE 59152
// for j := 1 to 8 do
59087: LD_ADDR_VAR 0 2
59091: PUSH
59092: DOUBLE
59093: LD_INT 1
59095: DEC
59096: ST_TO_ADDR
59097: LD_INT 8
59099: PUSH
59100: FOR_TO
59101: IFFALSE 59148
// PlaceSeeing ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , j , - 12 ) ;
59103: LD_VAR 0 3
59107: PUSH
59108: LD_INT 1
59110: ARRAY
59111: PUSH
59112: LD_VAR 0 1
59116: ARRAY
59117: PPUSH
59118: LD_VAR 0 3
59122: PUSH
59123: LD_INT 2
59125: ARRAY
59126: PUSH
59127: LD_VAR 0 1
59131: ARRAY
59132: PPUSH
59133: LD_VAR 0 2
59137: PPUSH
59138: LD_INT 12
59140: NEG
59141: PPUSH
59142: CALL_OW 330
59146: GO 59100
59148: POP
59149: POP
59150: GO 59084
59152: POP
59153: POP
// SetAreaMapShow ( mpKingArea , 1 ) ;
59154: LD_EXP 34
59158: PPUSH
59159: LD_INT 1
59161: PPUSH
59162: CALL_OW 424
// UpdateCounter ;
59166: CALL 59776 0 0
// repeat wait ( 0 0$1 ) ;
59170: LD_INT 35
59172: PPUSH
59173: CALL_OW 67
// tmp := FilterUnitsInArea ( mpKingArea , [ [ f_not , [ f_constructed ] ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
59177: LD_ADDR_VAR 0 3
59181: PUSH
59182: LD_EXP 34
59186: PPUSH
59187: LD_INT 3
59189: PUSH
59190: LD_INT 57
59192: PUSH
59193: EMPTY
59194: LIST
59195: PUSH
59196: EMPTY
59197: LIST
59198: LIST
59199: PUSH
59200: LD_INT 50
59202: PUSH
59203: EMPTY
59204: LIST
59205: PUSH
59206: LD_INT 2
59208: PUSH
59209: LD_INT 30
59211: PUSH
59212: LD_INT 0
59214: PUSH
59215: EMPTY
59216: LIST
59217: LIST
59218: PUSH
59219: LD_INT 30
59221: PUSH
59222: LD_INT 1
59224: PUSH
59225: EMPTY
59226: LIST
59227: LIST
59228: PUSH
59229: EMPTY
59230: LIST
59231: LIST
59232: LIST
59233: PUSH
59234: EMPTY
59235: LIST
59236: LIST
59237: LIST
59238: PPUSH
59239: CALL_OW 70
59243: ST_TO_ADDR
// if not tmp then
59244: LD_VAR 0 3
59248: NOT
59249: IFFALSE 59253
// continue ;
59251: GO 59170
// AddPoints ( tmp ) ;
59253: LD_VAR 0 3
59257: PPUSH
59258: CALL 59454 0 1
// UpdateCounter ;
59262: CALL 59776 0 0
// until false ;
59266: LD_INT 0
59268: IFFALSE 59170
// end ;
59270: PPOPN 3
59272: END
// every 0 0$1 trigger mpGameActive and mpEmissions marked GameTypeKing do var i , tmp ;
59273: LD_EXP 39
59277: IFFALSE 59285
59279: PUSH
59280: LD_EXP 37
59284: AND
59285: IFFALSE 59451
59287: GO 59289
59289: DISABLE
59290: LD_INT 0
59292: PPUSH
59293: PPUSH
// begin tmp := AreaToList ( kingCamArea , 0 ) ;
59294: LD_ADDR_VAR 0 2
59298: PUSH
59299: LD_EXP 2
59303: PPUSH
59304: LD_INT 0
59306: PPUSH
59307: CALL_OW 517
59311: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
59312: LD_ADDR_VAR 0 1
59316: PUSH
59317: DOUBLE
59318: LD_INT 1
59320: DEC
59321: ST_TO_ADDR
59322: LD_VAR 0 2
59326: PUSH
59327: LD_INT 1
59329: ARRAY
59330: PUSH
59331: FOR_TO
59332: IFFALSE 59373
// ArtContamination ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 125 ) ;
59334: LD_VAR 0 2
59338: PUSH
59339: LD_INT 1
59341: ARRAY
59342: PUSH
59343: LD_VAR 0 1
59347: ARRAY
59348: PPUSH
59349: LD_VAR 0 2
59353: PUSH
59354: LD_INT 2
59356: ARRAY
59357: PUSH
59358: LD_VAR 0 1
59362: ARRAY
59363: PPUSH
59364: LD_INT 125
59366: PPUSH
59367: CALL_OW 495
59371: GO 59331
59373: POP
59374: POP
// repeat wait ( mpEmissions ) ;
59375: LD_EXP 37
59379: PPUSH
59380: CALL_OW 67
// for i := 1 to tmp [ 1 ] do
59384: LD_ADDR_VAR 0 1
59388: PUSH
59389: DOUBLE
59390: LD_INT 1
59392: DEC
59393: ST_TO_ADDR
59394: LD_VAR 0 2
59398: PUSH
59399: LD_INT 1
59401: ARRAY
59402: PUSH
59403: FOR_TO
59404: IFFALSE 59445
// ArtContamination ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 15 ) ;
59406: LD_VAR 0 2
59410: PUSH
59411: LD_INT 1
59413: ARRAY
59414: PUSH
59415: LD_VAR 0 1
59419: ARRAY
59420: PPUSH
59421: LD_VAR 0 2
59425: PUSH
59426: LD_INT 2
59428: ARRAY
59429: PUSH
59430: LD_VAR 0 1
59434: ARRAY
59435: PPUSH
59436: LD_INT 15
59438: PPUSH
59439: CALL_OW 495
59443: GO 59403
59445: POP
59446: POP
// until false ;
59447: LD_INT 0
59449: IFFALSE 59375
// end ;
59451: PPOPN 2
59453: END
// function AddPoints ( depots ) ; var i , first , team , side ; begin
59454: LD_INT 0
59456: PPUSH
59457: PPUSH
59458: PPUSH
59459: PPUSH
59460: PPUSH
// if mpTeamGame then
59461: LD_EXP 11
59465: IFFALSE 59662
// begin first := depots [ 1 ] ;
59467: LD_ADDR_VAR 0 4
59471: PUSH
59472: LD_VAR 0 1
59476: PUSH
59477: LD_INT 1
59479: ARRAY
59480: ST_TO_ADDR
// side := GetSide ( first ) ;
59481: LD_ADDR_VAR 0 6
59485: PUSH
59486: LD_VAR 0 4
59490: PPUSH
59491: CALL_OW 255
59495: ST_TO_ADDR
// for i := 1 to mpTeams do
59496: LD_ADDR_VAR 0 3
59500: PUSH
59501: DOUBLE
59502: LD_INT 1
59504: DEC
59505: ST_TO_ADDR
59506: LD_EXP 10
59510: PUSH
59511: FOR_TO
59512: IFFALSE 59546
// if side in mpTeams [ i ] then
59514: LD_VAR 0 6
59518: PUSH
59519: LD_EXP 10
59523: PUSH
59524: LD_VAR 0 3
59528: ARRAY
59529: IN
59530: IFFALSE 59544
// begin team := i ;
59532: LD_ADDR_VAR 0 5
59536: PUSH
59537: LD_VAR 0 3
59541: ST_TO_ADDR
// break ;
59542: GO 59546
// end ;
59544: GO 59511
59546: POP
59547: POP
// if not team then
59548: LD_VAR 0 5
59552: NOT
59553: IFFALSE 59557
// exit ;
59555: GO 59771
// if FilterUnitsInArea ( mpKingArea , [ f_enemy , side ] ) then
59557: LD_EXP 34
59561: PPUSH
59562: LD_INT 81
59564: PUSH
59565: LD_VAR 0 6
59569: PUSH
59570: EMPTY
59571: LIST
59572: LIST
59573: PPUSH
59574: CALL_OW 70
59578: IFFALSE 59582
// exit ;
59580: GO 59771
// mpKingPoints := Replace ( mpKingPoints , team , mpKingPoints [ team ] + 1 ) ;
59582: LD_ADDR_EXP 58
59586: PUSH
59587: LD_EXP 58
59591: PPUSH
59592: LD_VAR 0 5
59596: PPUSH
59597: LD_EXP 58
59601: PUSH
59602: LD_VAR 0 5
59606: ARRAY
59607: PUSH
59608: LD_INT 1
59610: PLUS
59611: PPUSH
59612: CALL_OW 1
59616: ST_TO_ADDR
// for i in mpTeams [ team ] do
59617: LD_ADDR_VAR 0 3
59621: PUSH
59622: LD_EXP 10
59626: PUSH
59627: LD_VAR 0 5
59631: ARRAY
59632: PUSH
59633: FOR_IN
59634: IFFALSE 59658
// SetMultiScore ( i , mpKingPoints [ team ] ) ;
59636: LD_VAR 0 3
59640: PPUSH
59641: LD_EXP 58
59645: PUSH
59646: LD_VAR 0 5
59650: ARRAY
59651: PPUSH
59652: CALL_OW 506
59656: GO 59633
59658: POP
59659: POP
// end else
59660: GO 59771
// begin first := depots [ 1 ] ;
59662: LD_ADDR_VAR 0 4
59666: PUSH
59667: LD_VAR 0 1
59671: PUSH
59672: LD_INT 1
59674: ARRAY
59675: ST_TO_ADDR
// side := GetSide ( first ) ;
59676: LD_ADDR_VAR 0 6
59680: PUSH
59681: LD_VAR 0 4
59685: PPUSH
59686: CALL_OW 255
59690: ST_TO_ADDR
// if FilterUnitsInArea ( mpKingArea , [ f_enemy , side ] ) then
59691: LD_EXP 34
59695: PPUSH
59696: LD_INT 81
59698: PUSH
59699: LD_VAR 0 6
59703: PUSH
59704: EMPTY
59705: LIST
59706: LIST
59707: PPUSH
59708: CALL_OW 70
59712: IFFALSE 59716
// exit ;
59714: GO 59771
// mpKingPoints := Replace ( mpKingPoints , side , mpKingPoints [ side ] + 1 ) ;
59716: LD_ADDR_EXP 58
59720: PUSH
59721: LD_EXP 58
59725: PPUSH
59726: LD_VAR 0 6
59730: PPUSH
59731: LD_EXP 58
59735: PUSH
59736: LD_VAR 0 6
59740: ARRAY
59741: PUSH
59742: LD_INT 1
59744: PLUS
59745: PPUSH
59746: CALL_OW 1
59750: ST_TO_ADDR
// SetMultiScore ( side , mpKingPoints [ side ] ) ;
59751: LD_VAR 0 6
59755: PPUSH
59756: LD_EXP 58
59760: PUSH
59761: LD_VAR 0 6
59765: ARRAY
59766: PPUSH
59767: CALL_OW 506
// end ; end ;
59771: LD_VAR 0 2
59775: RET
// function UpdateCounter ; var i ; begin
59776: LD_INT 0
59778: PPUSH
59779: PPUSH
// result := [ ] ;
59780: LD_ADDR_VAR 0 1
59784: PUSH
59785: EMPTY
59786: ST_TO_ADDR
// if mpTeamGame then
59787: LD_EXP 11
59791: IFFALSE 59858
// begin for i := 1 to mpTeams do
59793: LD_ADDR_VAR 0 2
59797: PUSH
59798: DOUBLE
59799: LD_INT 1
59801: DEC
59802: ST_TO_ADDR
59803: LD_EXP 10
59807: PUSH
59808: FOR_TO
59809: IFFALSE 59854
// result := result ^ [ #KingoftheHill-Team , i , mpKingPoints [ i ] , mpPoints ] ;
59811: LD_ADDR_VAR 0 1
59815: PUSH
59816: LD_VAR 0 1
59820: PUSH
59821: LD_STRING #KingoftheHill-Team
59823: PUSH
59824: LD_VAR 0 2
59828: PUSH
59829: LD_EXP 58
59833: PUSH
59834: LD_VAR 0 2
59838: ARRAY
59839: PUSH
59840: LD_EXP 35
59844: PUSH
59845: EMPTY
59846: LIST
59847: LIST
59848: LIST
59849: LIST
59850: ADD
59851: ST_TO_ADDR
59852: GO 59808
59854: POP
59855: POP
// end else
59856: GO 59931
// begin for i := 1 to 8 do
59858: LD_ADDR_VAR 0 2
59862: PUSH
59863: DOUBLE
59864: LD_INT 1
59866: DEC
59867: ST_TO_ADDR
59868: LD_INT 8
59870: PUSH
59871: FOR_TO
59872: IFFALSE 59929
// if mpSidePositions [ i ] then
59874: LD_EXP 7
59878: PUSH
59879: LD_VAR 0 2
59883: ARRAY
59884: IFFALSE 59927
// result := result ^ [ #KingoftheHill-Player , i , mpKingPoints [ i ] , mpPoints ] ;
59886: LD_ADDR_VAR 0 1
59890: PUSH
59891: LD_VAR 0 1
59895: PUSH
59896: LD_STRING #KingoftheHill-Player
59898: PUSH
59899: LD_VAR 0 2
59903: PUSH
59904: LD_EXP 58
59908: PUSH
59909: LD_VAR 0 2
59913: ARRAY
59914: PUSH
59915: LD_EXP 35
59919: PUSH
59920: EMPTY
59921: LIST
59922: LIST
59923: LIST
59924: LIST
59925: ADD
59926: ST_TO_ADDR
59927: GO 59871
59929: POP
59930: POP
// end ; mpDisplayStrings := result ;
59931: LD_ADDR_EXP 38
59935: PUSH
59936: LD_VAR 0 1
59940: ST_TO_ADDR
// end ;
59941: LD_VAR 0 1
59945: RET
// export function HowMuchPointsKing ( side ) ; begin
59946: LD_INT 0
59948: PPUSH
// result := HowMuchPoints ( side ) ;
59949: LD_ADDR_VAR 0 2
59953: PUSH
59954: LD_VAR 0 1
59958: PPUSH
59959: CALL 59969 0 1
59963: ST_TO_ADDR
// end ;
59964: LD_VAR 0 2
59968: RET
// function HowMuchPoints ( side ) ; var i ; begin
59969: LD_INT 0
59971: PPUSH
59972: PPUSH
// if mpTeamGame then
59973: LD_EXP 11
59977: IFFALSE 60046
// begin for i := 1 to Count ( mpTeams ) do
59979: LD_ADDR_VAR 0 3
59983: PUSH
59984: DOUBLE
59985: LD_INT 1
59987: DEC
59988: ST_TO_ADDR
59989: LD_EXP 10
59993: PPUSH
59994: CALL 12050 0 1
59998: PUSH
59999: FOR_TO
60000: IFFALSE 60042
// begin if side in mpTeams [ i ] then
60002: LD_VAR 0 1
60006: PUSH
60007: LD_EXP 10
60011: PUSH
60012: LD_VAR 0 3
60016: ARRAY
60017: IN
60018: IFFALSE 60040
// begin result := mpKingPoints [ i ] ;
60020: LD_ADDR_VAR 0 2
60024: PUSH
60025: LD_EXP 58
60029: PUSH
60030: LD_VAR 0 3
60034: ARRAY
60035: ST_TO_ADDR
// exit ;
60036: POP
60037: POP
60038: GO 60062
// end ; end ;
60040: GO 59999
60042: POP
60043: POP
// end else
60044: GO 60062
// result := mpKingPoints [ side ] ;
60046: LD_ADDR_VAR 0 2
60050: PUSH
60051: LD_EXP 58
60055: PUSH
60056: LD_VAR 0 1
60060: ARRAY
60061: ST_TO_ADDR
// end ;
60062: LD_VAR 0 2
60066: RET
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeKing do var i , canWin ;
60067: LD_EXP 39
60071: IFFALSE 60079
60073: PUSH
60074: CALL 60491 0 0
60078: AND
60079: IFFALSE 60087
60081: PUSH
60082: LD_OWVAR 4
60086: AND
60087: IFFALSE 60340
60089: GO 60091
60091: DISABLE
60092: LD_INT 0
60094: PPUSH
60095: PPUSH
// begin canWin := false ;
60096: LD_ADDR_VAR 0 2
60100: PUSH
60101: LD_INT 0
60103: ST_TO_ADDR
// if not HasPower ( your_side ) then
60104: LD_OWVAR 2
60108: PPUSH
60109: CALL 60533 0 1
60113: NOT
60114: IFFALSE 60125
// begin Multiplayer_Loose_Message ;
60116: CALL_OW 521
// enable ( mpLose ) ;
60120: LD_INT 102
60122: ENABLE_MARKED
// end else
60123: GO 60340
// begin if not EnemiesInGame then
60125: CALL 60343 0 0
60129: NOT
60130: IFFALSE 60137
// begin enable ( mpWin ) ;
60132: LD_INT 101
60134: ENABLE_MARKED
// exit ;
60135: GO 60340
// end ; canWin := ( HowMuchPoints ( your_side ) >= mpPoints and HasPower ( your_side ) ) ;
60137: LD_ADDR_VAR 0 2
60141: PUSH
60142: LD_OWVAR 2
60146: PPUSH
60147: CALL 59969 0 1
60151: PUSH
60152: LD_EXP 35
60156: GREATEREQUAL
60157: IFFALSE 60170
60159: PUSH
60160: LD_OWVAR 2
60164: PPUSH
60165: CALL 60533 0 1
60169: AND
60170: ST_TO_ADDR
// for i := 1 to 8 do
60171: LD_ADDR_VAR 0 1
60175: PUSH
60176: DOUBLE
60177: LD_INT 1
60179: DEC
60180: ST_TO_ADDR
60181: LD_INT 8
60183: PUSH
60184: FOR_TO
60185: IFFALSE 60326
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
60187: LD_EXP 7
60191: PUSH
60192: LD_VAR 0 1
60196: ARRAY
60197: IFFALSE 60210
60199: PUSH
60200: LD_VAR 0 1
60204: PPUSH
60205: CALL_OW 108
60209: AND
60210: IFFALSE 60224
60212: PUSH
60213: LD_VAR 0 1
60217: PUSH
60218: LD_OWVAR 2
60222: NONEQUAL
60223: AND
60224: IFFALSE 60324
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
60226: LD_EXP 8
60230: PUSH
60231: LD_VAR 0 1
60235: ARRAY
60236: NOT
60237: IFTRUE 60285
60239: PUSH
60240: LD_EXP 8
60244: PUSH
60245: LD_VAR 0 1
60249: ARRAY
60250: PUSH
60251: LD_EXP 8
60255: PUSH
60256: LD_OWVAR 2
60260: ARRAY
60261: NONEQUAL
60262: IFFALSE 60284
60264: PUSH
60265: LD_OWVAR 2
60269: PPUSH
60270: LD_VAR 0 1
60274: PPUSH
60275: CALL_OW 81
60279: PUSH
60280: LD_INT 1
60282: NONEQUAL
60283: AND
60284: OR
60285: IFFALSE 60324
// if HowMuchPoints ( i ) >= mpPoints and HasPower ( i ) then
60287: LD_VAR 0 1
60291: PPUSH
60292: CALL 59969 0 1
60296: PUSH
60297: LD_EXP 35
60301: GREATEREQUAL
60302: IFFALSE 60315
60304: PUSH
60305: LD_VAR 0 1
60309: PPUSH
60310: CALL 60533 0 1
60314: AND
60315: IFFALSE 60324
// begin enable ( mpLose ) ;
60317: LD_INT 102
60319: ENABLE_MARKED
// exit ;
60320: POP
60321: POP
60322: GO 60340
// end ;
60324: GO 60184
60326: POP
60327: POP
// if canWin then
60328: LD_VAR 0 2
60332: IFFALSE 60339
// enable ( mpWin ) else
60334: LD_INT 101
60336: ENABLE_MARKED
60337: GO 60340
// enable ;
60339: ENABLE
// end ; end ;
60340: PPOPN 2
60342: END
// function EnemiesInGame ; var i ; begin
60343: LD_INT 0
60345: PPUSH
60346: PPUSH
// result := false ;
60347: LD_ADDR_VAR 0 1
60351: PUSH
60352: LD_INT 0
60354: ST_TO_ADDR
// for i := 1 to 8 do
60355: LD_ADDR_VAR 0 2
60359: PUSH
60360: DOUBLE
60361: LD_INT 1
60363: DEC
60364: ST_TO_ADDR
60365: LD_INT 8
60367: PUSH
60368: FOR_TO
60369: IFFALSE 60484
// if i <> your_side and HasPower ( i ) and MultiplayerSideAlive ( i ) then
60371: LD_VAR 0 2
60375: PUSH
60376: LD_OWVAR 2
60380: NONEQUAL
60381: IFFALSE 60394
60383: PUSH
60384: LD_VAR 0 2
60388: PPUSH
60389: CALL 60533 0 1
60393: AND
60394: IFFALSE 60407
60396: PUSH
60397: LD_VAR 0 2
60401: PPUSH
60402: CALL_OW 108
60406: AND
60407: IFFALSE 60482
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
60409: LD_EXP 8
60413: PUSH
60414: LD_VAR 0 2
60418: ARRAY
60419: NOT
60420: IFTRUE 60468
60422: PUSH
60423: LD_EXP 8
60427: PUSH
60428: LD_VAR 0 2
60432: ARRAY
60433: PUSH
60434: LD_EXP 8
60438: PUSH
60439: LD_OWVAR 2
60443: ARRAY
60444: NONEQUAL
60445: IFFALSE 60467
60447: PUSH
60448: LD_OWVAR 2
60452: PPUSH
60453: LD_VAR 0 2
60457: PPUSH
60458: CALL_OW 81
60462: PUSH
60463: LD_INT 1
60465: NONEQUAL
60466: AND
60467: OR
60468: IFFALSE 60482
// begin result := true ;
60470: LD_ADDR_VAR 0 1
60474: PUSH
60475: LD_INT 1
60477: ST_TO_ADDR
// exit ;
60478: POP
60479: POP
60480: GO 60486
// end ;
60482: GO 60368
60484: POP
60485: POP
// end ;
60486: LD_VAR 0 1
60490: RET
// function CanWinLoose ; begin
60491: LD_INT 0
60493: PPUSH
// result := true ;
60494: LD_ADDR_VAR 0 1
60498: PUSH
60499: LD_INT 1
60501: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
60502: CALL_OW 531
60506: IFFALSE 60518
60508: PUSH
60509: CALL_OW 519
60513: PUSH
60514: LD_INT 1
60516: GREATER
60517: AND
60518: IFFALSE 60528
// result := false ;
60520: LD_ADDR_VAR 0 1
60524: PUSH
60525: LD_INT 0
60527: ST_TO_ADDR
// end ;
60528: LD_VAR 0 1
60532: RET
// function HasPower ( i ) ; begin
60533: LD_INT 0
60535: PPUSH
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
60536: LD_ADDR_VAR 0 2
60540: PUSH
60541: LD_INT 22
60543: PUSH
60544: LD_VAR 0 1
60548: PUSH
60549: EMPTY
60550: LIST
60551: LIST
60552: PUSH
60553: LD_INT 2
60555: PUSH
60556: LD_INT 21
60558: PUSH
60559: LD_INT 1
60561: PUSH
60562: EMPTY
60563: LIST
60564: LIST
60565: PUSH
60566: LD_INT 33
60568: PUSH
60569: LD_INT 3
60571: PUSH
60572: EMPTY
60573: LIST
60574: LIST
60575: PUSH
60576: LD_INT 33
60578: PUSH
60579: LD_INT 5
60581: PUSH
60582: EMPTY
60583: LIST
60584: LIST
60585: PUSH
60586: EMPTY
60587: LIST
60588: LIST
60589: LIST
60590: LIST
60591: PUSH
60592: EMPTY
60593: LIST
60594: LIST
60595: PPUSH
60596: CALL_OW 69
60600: ST_TO_ADDR
// end ; end_of_file
60601: LD_VAR 0 2
60605: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin end ;
60606: PPOPN 6
60608: END
// on MapStart ( p ) do begin if mpGameType = GameTypeCoop then
60609: LD_EXP 3
60613: PUSH
60614: LD_INT 4
60616: EQUAL
60617: IFFALSE 60653
// begin ToLua ( setGameDifficulty( & Difficulty & ) ) ;
60619: LD_STRING setGameDifficulty(
60621: PUSH
60622: LD_OWVAR 67
60626: STR
60627: PUSH
60628: LD_STRING )
60630: STR
60631: PPUSH
60632: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
60636: LD_STRING displayDifficulty(
60638: PUSH
60639: LD_OWVAR 67
60643: STR
60644: PUSH
60645: LD_STRING )
60647: STR
60648: PPUSH
60649: CALL_OW 559
// end ; SOS_MapStart ( ) ;
60653: CALL 60682 0 0
// end ; end_of_file
60657: PPOPN 1
60659: END
// every 0 0$1 do
60660: GO 60662
60662: DISABLE
// begin enable ;
60663: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
60664: LD_STRING updateTimer(
60666: PUSH
60667: LD_OWVAR 1
60671: STR
60672: PUSH
60673: LD_STRING );
60675: STR
60676: PPUSH
60677: CALL_OW 559
// end ;
60681: END
// export function SOS_MapStart ( ) ; begin
60682: LD_INT 0
60684: PPUSH
// UpdateFactoryWaypoints ( ) ;
60685: CALL 61616 0 0
// UpdateWarehouseGatheringPoints ( ) ;
60689: CALL 61868 0 0
// ParseMultiDataToLua ( ) ;
60693: CALL 62015 0 0
// ToLua ( setSpecLogoNumber( & 2 & , & 1 & ) ) ;
60697: LD_STRING setSpecLogoNumber(
60699: PUSH
60700: LD_INT 2
60702: STR
60703: PUSH
60704: LD_STRING ,
60706: STR
60707: PUSH
60708: LD_INT 1
60710: STR
60711: PUSH
60712: LD_STRING )
60714: STR
60715: PPUSH
60716: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 3 & , & 2 & ) ) ;
60720: LD_STRING setSpecLogoNumber(
60722: PUSH
60723: LD_INT 3
60725: STR
60726: PUSH
60727: LD_STRING ,
60729: STR
60730: PUSH
60731: LD_INT 2
60733: STR
60734: PUSH
60735: LD_STRING )
60737: STR
60738: PPUSH
60739: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 4 & , & 3 & ) ) ;
60743: LD_STRING setSpecLogoNumber(
60745: PUSH
60746: LD_INT 4
60748: STR
60749: PUSH
60750: LD_STRING ,
60752: STR
60753: PUSH
60754: LD_INT 3
60756: STR
60757: PUSH
60758: LD_STRING )
60760: STR
60761: PPUSH
60762: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 5 & , & 4 & ) ) ;
60766: LD_STRING setSpecLogoNumber(
60768: PUSH
60769: LD_INT 5
60771: STR
60772: PUSH
60773: LD_STRING ,
60775: STR
60776: PUSH
60777: LD_INT 4
60779: STR
60780: PUSH
60781: LD_STRING )
60783: STR
60784: PPUSH
60785: CALL_OW 559
// end ;
60789: LD_VAR 0 1
60793: RET
// export function UpdateSpectatorBar ; var i , j , crates , oil , sib , people , base , bases ; begin
60794: LD_INT 0
60796: PPUSH
60797: PPUSH
60798: PPUSH
60799: PPUSH
60800: PPUSH
60801: PPUSH
60802: PPUSH
60803: PPUSH
60804: PPUSH
// for i := 1 to 8 do
60805: LD_ADDR_VAR 0 2
60809: PUSH
60810: DOUBLE
60811: LD_INT 1
60813: DEC
60814: ST_TO_ADDR
60815: LD_INT 8
60817: PUSH
60818: FOR_TO
60819: IFFALSE 61204
// begin if mpSidePositions [ i ] then
60821: LD_EXP 7
60825: PUSH
60826: LD_VAR 0 2
60830: ARRAY
60831: IFFALSE 61202
// begin people := Count ( FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) ) ;
60833: LD_ADDR_VAR 0 7
60837: PUSH
60838: LD_INT 22
60840: PUSH
60841: LD_VAR 0 2
60845: PUSH
60846: EMPTY
60847: LIST
60848: LIST
60849: PUSH
60850: LD_INT 21
60852: PUSH
60853: LD_INT 1
60855: PUSH
60856: EMPTY
60857: LIST
60858: LIST
60859: PUSH
60860: EMPTY
60861: LIST
60862: LIST
60863: PPUSH
60864: CALL_OW 69
60868: PPUSH
60869: CALL 12050 0 1
60873: ST_TO_ADDR
// bases := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
60874: LD_ADDR_VAR 0 9
60878: PUSH
60879: LD_INT 22
60881: PUSH
60882: LD_VAR 0 2
60886: PUSH
60887: EMPTY
60888: LIST
60889: LIST
60890: PUSH
60891: LD_INT 2
60893: PUSH
60894: LD_INT 30
60896: PUSH
60897: LD_INT 0
60899: PUSH
60900: EMPTY
60901: LIST
60902: LIST
60903: PUSH
60904: LD_INT 30
60906: PUSH
60907: LD_INT 1
60909: PUSH
60910: EMPTY
60911: LIST
60912: LIST
60913: PUSH
60914: EMPTY
60915: LIST
60916: LIST
60917: LIST
60918: PUSH
60919: EMPTY
60920: LIST
60921: LIST
60922: PPUSH
60923: CALL_OW 69
60927: ST_TO_ADDR
// crates := 0 ;
60928: LD_ADDR_VAR 0 4
60932: PUSH
60933: LD_INT 0
60935: ST_TO_ADDR
// oil := 0 ;
60936: LD_ADDR_VAR 0 5
60940: PUSH
60941: LD_INT 0
60943: ST_TO_ADDR
// sib := 0 ;
60944: LD_ADDR_VAR 0 6
60948: PUSH
60949: LD_INT 0
60951: ST_TO_ADDR
// if bases then
60952: LD_VAR 0 9
60956: IFFALSE 61062
// begin for j in bases do
60958: LD_ADDR_VAR 0 3
60962: PUSH
60963: LD_VAR 0 9
60967: PUSH
60968: FOR_IN
60969: IFFALSE 61060
// begin base := GetBase ( j ) ;
60971: LD_ADDR_VAR 0 8
60975: PUSH
60976: LD_VAR 0 3
60980: PPUSH
60981: CALL_OW 274
60985: ST_TO_ADDR
// crates := crates + GetResourceType ( base , mat_cans ) ;
60986: LD_ADDR_VAR 0 4
60990: PUSH
60991: LD_VAR 0 4
60995: PUSH
60996: LD_VAR 0 8
61000: PPUSH
61001: LD_INT 1
61003: PPUSH
61004: CALL_OW 275
61008: PLUS
61009: ST_TO_ADDR
// oil := oil + GetResourceType ( base , mat_oil ) ;
61010: LD_ADDR_VAR 0 5
61014: PUSH
61015: LD_VAR 0 5
61019: PUSH
61020: LD_VAR 0 8
61024: PPUSH
61025: LD_INT 2
61027: PPUSH
61028: CALL_OW 275
61032: PLUS
61033: ST_TO_ADDR
// sib := sib + GetResourceType ( base , mat_siberit ) ;
61034: LD_ADDR_VAR 0 6
61038: PUSH
61039: LD_VAR 0 6
61043: PUSH
61044: LD_VAR 0 8
61048: PPUSH
61049: LD_INT 3
61051: PPUSH
61052: CALL_OW 275
61056: PLUS
61057: ST_TO_ADDR
// end ;
61058: GO 60968
61060: POP
61061: POP
// end ; ToLua ( setSpecText( & i & , & 2 & , & crates & ) ) ;
61062: LD_STRING setSpecText(
61064: PUSH
61065: LD_VAR 0 2
61069: STR
61070: PUSH
61071: LD_STRING ,
61073: STR
61074: PUSH
61075: LD_INT 2
61077: STR
61078: PUSH
61079: LD_STRING ,
61081: STR
61082: PUSH
61083: LD_VAR 0 4
61087: STR
61088: PUSH
61089: LD_STRING )
61091: STR
61092: PPUSH
61093: CALL_OW 559
// ToLua ( setSpecText( & i & , & 3 & , & oil & ) ) ;
61097: LD_STRING setSpecText(
61099: PUSH
61100: LD_VAR 0 2
61104: STR
61105: PUSH
61106: LD_STRING ,
61108: STR
61109: PUSH
61110: LD_INT 3
61112: STR
61113: PUSH
61114: LD_STRING ,
61116: STR
61117: PUSH
61118: LD_VAR 0 5
61122: STR
61123: PUSH
61124: LD_STRING )
61126: STR
61127: PPUSH
61128: CALL_OW 559
// ToLua ( setSpecText( & i & , & 4 & , & sib & ) ) ;
61132: LD_STRING setSpecText(
61134: PUSH
61135: LD_VAR 0 2
61139: STR
61140: PUSH
61141: LD_STRING ,
61143: STR
61144: PUSH
61145: LD_INT 4
61147: STR
61148: PUSH
61149: LD_STRING ,
61151: STR
61152: PUSH
61153: LD_VAR 0 6
61157: STR
61158: PUSH
61159: LD_STRING )
61161: STR
61162: PPUSH
61163: CALL_OW 559
// ToLua ( setSpecText( & i & , & 5 & , & people & ) ) ;
61167: LD_STRING setSpecText(
61169: PUSH
61170: LD_VAR 0 2
61174: STR
61175: PUSH
61176: LD_STRING ,
61178: STR
61179: PUSH
61180: LD_INT 5
61182: STR
61183: PUSH
61184: LD_STRING ,
61186: STR
61187: PUSH
61188: LD_VAR 0 7
61192: STR
61193: PUSH
61194: LD_STRING )
61196: STR
61197: PPUSH
61198: CALL_OW 559
// end ; end ;
61202: GO 60818
61204: POP
61205: POP
// end ;
61206: LD_VAR 0 1
61210: RET
// every 20 + 0 0$5 trigger FilterAllUnits ( [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) do
61211: LD_INT 2
61213: PUSH
61214: LD_INT 30
61216: PUSH
61217: LD_INT 0
61219: PUSH
61220: EMPTY
61221: LIST
61222: LIST
61223: PUSH
61224: LD_INT 30
61226: PUSH
61227: LD_INT 1
61229: PUSH
61230: EMPTY
61231: LIST
61232: LIST
61233: PUSH
61234: EMPTY
61235: LIST
61236: LIST
61237: LIST
61238: PPUSH
61239: CALL_OW 69
61243: IFFALSE 61253
61245: GO 61247
61247: DISABLE
// begin enable ;
61248: ENABLE
// UpdateSpectatorBar ;
61249: CALL 60794 0 0
// end ;
61253: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
61254: LD_INT 0
61256: PPUSH
// end ;
61257: LD_VAR 0 12
61261: RET
// export factoryWaypoints , factoryWaypointsDrivers ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
61262: LD_INT 0
61264: PPUSH
61265: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
61266: LD_VAR 0 1
61270: NOT
61271: IFTRUE 61290
61273: PUSH
61274: LD_VAR 0 2
61278: PPUSH
61279: LD_VAR 0 3
61283: PPUSH
61284: CALL_OW 488
61288: NOT
61289: OR
61290: IFTRUE 61325
61292: PUSH
61293: LD_VAR 0 1
61297: PPUSH
61298: CALL_OW 266
61302: PUSH
61303: LD_INT 3
61305: NONEQUAL
61306: IFFALSE 61324
61308: PUSH
61309: LD_VAR 0 1
61313: PPUSH
61314: CALL_OW 247
61318: PUSH
61319: LD_INT 1
61321: EQUAL
61322: NOT
61323: AND
61324: OR
61325: IFFALSE 61329
// exit ;
61327: GO 61611
// if GetType ( factory ) = unit_human then
61329: LD_VAR 0 1
61333: PPUSH
61334: CALL_OW 247
61338: PUSH
61339: LD_INT 1
61341: EQUAL
61342: IFFALSE 61359
// factory := IsInUnit ( factory ) ;
61344: LD_ADDR_VAR 0 1
61348: PUSH
61349: LD_VAR 0 1
61353: PPUSH
61354: CALL_OW 310
61358: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
61359: LD_VAR 0 1
61363: PPUSH
61364: CALL_OW 266
61368: PUSH
61369: LD_INT 3
61371: NONEQUAL
61372: IFFALSE 61376
// exit ;
61374: GO 61611
// for i := 1 to Count ( factoryWaypoints ) do
61376: LD_ADDR_VAR 0 5
61380: PUSH
61381: DOUBLE
61382: LD_INT 1
61384: DEC
61385: ST_TO_ADDR
61386: LD_EXP 59
61390: PPUSH
61391: CALL 12050 0 1
61395: PUSH
61396: FOR_TO
61397: IFFALSE 61559
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
61399: LD_VAR 0 2
61403: PPUSH
61404: LD_VAR 0 3
61408: PPUSH
61409: CALL_OW 428
61413: PUSH
61414: LD_EXP 59
61418: PUSH
61419: LD_VAR 0 5
61423: ARRAY
61424: PUSH
61425: LD_INT 2
61427: ARRAY
61428: EQUAL
61429: IFFALSE 61461
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
61431: LD_ADDR_EXP 59
61435: PUSH
61436: LD_EXP 59
61440: PPUSH
61441: LD_VAR 0 5
61445: PPUSH
61446: CALL_OW 3
61450: ST_TO_ADDR
// UpdateFactoryWaypoints ;
61451: CALL 61616 0 0
// exit ;
61455: POP
61456: POP
61457: GO 61611
// end else
61459: GO 61557
// if factory = factoryWaypoints [ i ] [ 2 ] then
61461: LD_VAR 0 1
61465: PUSH
61466: LD_EXP 59
61470: PUSH
61471: LD_VAR 0 5
61475: ARRAY
61476: PUSH
61477: LD_INT 2
61479: ARRAY
61480: EQUAL
61481: IFFALSE 61557
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
61483: LD_ADDR_EXP 59
61487: PUSH
61488: LD_EXP 59
61492: PPUSH
61493: LD_VAR 0 5
61497: PPUSH
61498: CALL_OW 3
61502: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
61503: LD_ADDR_EXP 59
61507: PUSH
61508: LD_EXP 59
61512: PPUSH
61513: LD_VAR 0 1
61517: PPUSH
61518: CALL_OW 255
61522: PUSH
61523: LD_VAR 0 1
61527: PUSH
61528: LD_VAR 0 2
61532: PUSH
61533: LD_VAR 0 3
61537: PUSH
61538: EMPTY
61539: LIST
61540: LIST
61541: LIST
61542: LIST
61543: PPUSH
61544: CALL 47982 0 2
61548: ST_TO_ADDR
// UpdateFactoryWaypoints ;
61549: CALL 61616 0 0
// exit ;
61553: POP
61554: POP
61555: GO 61611
// end ; end ;
61557: GO 61396
61559: POP
61560: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
61561: LD_ADDR_EXP 59
61565: PUSH
61566: LD_EXP 59
61570: PPUSH
61571: LD_VAR 0 1
61575: PPUSH
61576: CALL_OW 255
61580: PUSH
61581: LD_VAR 0 1
61585: PUSH
61586: LD_VAR 0 2
61590: PUSH
61591: LD_VAR 0 3
61595: PUSH
61596: EMPTY
61597: LIST
61598: LIST
61599: LIST
61600: LIST
61601: PPUSH
61602: CALL 47982 0 2
61606: ST_TO_ADDR
// UpdateFactoryWaypoints ;
61607: CALL 61616 0 0
// end ;
61611: LD_VAR 0 4
61615: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
61616: LD_INT 0
61618: PPUSH
61619: PPUSH
61620: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
61621: LD_STRING resetFactoryWaypoint();
61623: PPUSH
61624: CALL_OW 559
// if factoryWaypoints then
61628: LD_EXP 59
61632: IFFALSE 61753
// begin list := factoryWaypoints ;
61634: LD_ADDR_VAR 0 3
61638: PUSH
61639: LD_EXP 59
61643: ST_TO_ADDR
// for i := 1 to list do
61644: LD_ADDR_VAR 0 2
61648: PUSH
61649: DOUBLE
61650: LD_INT 1
61652: DEC
61653: ST_TO_ADDR
61654: LD_VAR 0 3
61658: PUSH
61659: FOR_TO
61660: IFFALSE 61751
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
61662: LD_STRING setFactoryWaypointXY(
61664: PUSH
61665: LD_VAR 0 3
61669: PUSH
61670: LD_VAR 0 2
61674: ARRAY
61675: PUSH
61676: LD_INT 1
61678: ARRAY
61679: STR
61680: PUSH
61681: LD_STRING ,
61683: STR
61684: PUSH
61685: LD_VAR 0 3
61689: PUSH
61690: LD_VAR 0 2
61694: ARRAY
61695: PUSH
61696: LD_INT 2
61698: ARRAY
61699: STR
61700: PUSH
61701: LD_STRING ,
61703: STR
61704: PUSH
61705: LD_VAR 0 3
61709: PUSH
61710: LD_VAR 0 2
61714: ARRAY
61715: PUSH
61716: LD_INT 3
61718: ARRAY
61719: STR
61720: PUSH
61721: LD_STRING ,
61723: STR
61724: PUSH
61725: LD_VAR 0 3
61729: PUSH
61730: LD_VAR 0 2
61734: ARRAY
61735: PUSH
61736: LD_INT 4
61738: ARRAY
61739: STR
61740: PUSH
61741: LD_STRING )
61743: STR
61744: PPUSH
61745: CALL_OW 559
61749: GO 61659
61751: POP
61752: POP
// end ; end ;
61753: LD_VAR 0 1
61757: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
61758: LD_INT 0
61760: PPUSH
// if HexInfo ( x , y ) = warehouse then
61761: LD_VAR 0 2
61765: PPUSH
61766: LD_VAR 0 3
61770: PPUSH
61771: CALL_OW 428
61775: PUSH
61776: LD_VAR 0 1
61780: EQUAL
61781: IFFALSE 61808
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
61783: LD_ADDR_EXP 61
61787: PUSH
61788: LD_EXP 61
61792: PPUSH
61793: LD_VAR 0 1
61797: PPUSH
61798: LD_INT 0
61800: PPUSH
61801: CALL_OW 1
61805: ST_TO_ADDR
61806: GO 61859
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
61808: LD_ADDR_EXP 61
61812: PUSH
61813: LD_EXP 61
61817: PPUSH
61818: LD_VAR 0 1
61822: PPUSH
61823: LD_VAR 0 1
61827: PPUSH
61828: CALL_OW 255
61832: PUSH
61833: LD_VAR 0 1
61837: PUSH
61838: LD_VAR 0 2
61842: PUSH
61843: LD_VAR 0 3
61847: PUSH
61848: EMPTY
61849: LIST
61850: LIST
61851: LIST
61852: LIST
61853: PPUSH
61854: CALL_OW 1
61858: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
61859: CALL 61868 0 0
// end ;
61863: LD_VAR 0 4
61867: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
61868: LD_INT 0
61870: PPUSH
61871: PPUSH
61872: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
61873: LD_STRING resetWarehouseGatheringPoints();
61875: PPUSH
61876: CALL_OW 559
// if warehouseGatheringPoints then
61880: LD_EXP 61
61884: IFFALSE 62010
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
61886: LD_ADDR_VAR 0 3
61890: PUSH
61891: LD_EXP 61
61895: PPUSH
61896: CALL 51916 0 1
61900: ST_TO_ADDR
// for i := 1 to list do
61901: LD_ADDR_VAR 0 2
61905: PUSH
61906: DOUBLE
61907: LD_INT 1
61909: DEC
61910: ST_TO_ADDR
61911: LD_VAR 0 3
61915: PUSH
61916: FOR_TO
61917: IFFALSE 62008
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
61919: LD_STRING setWarehouseGatheringPointXY(
61921: PUSH
61922: LD_VAR 0 3
61926: PUSH
61927: LD_VAR 0 2
61931: ARRAY
61932: PUSH
61933: LD_INT 1
61935: ARRAY
61936: STR
61937: PUSH
61938: LD_STRING ,
61940: STR
61941: PUSH
61942: LD_VAR 0 3
61946: PUSH
61947: LD_VAR 0 2
61951: ARRAY
61952: PUSH
61953: LD_INT 2
61955: ARRAY
61956: STR
61957: PUSH
61958: LD_STRING ,
61960: STR
61961: PUSH
61962: LD_VAR 0 3
61966: PUSH
61967: LD_VAR 0 2
61971: ARRAY
61972: PUSH
61973: LD_INT 3
61975: ARRAY
61976: STR
61977: PUSH
61978: LD_STRING ,
61980: STR
61981: PUSH
61982: LD_VAR 0 3
61986: PUSH
61987: LD_VAR 0 2
61991: ARRAY
61992: PUSH
61993: LD_INT 4
61995: ARRAY
61996: STR
61997: PUSH
61998: LD_STRING )
62000: STR
62001: PPUSH
62002: CALL_OW 559
62006: GO 61916
62008: POP
62009: POP
// end ; end ;
62010: LD_VAR 0 1
62014: RET
// function ParseMultiDataToLua ( ) ; var i ; begin
62015: LD_INT 0
62017: PPUSH
62018: PPUSH
// if not mpSidePositions then
62019: LD_EXP 7
62023: NOT
62024: IFFALSE 62028
// exit ;
62026: GO 62099
// result :=  ;
62028: LD_ADDR_VAR 0 1
62032: PUSH
62033: LD_STRING 
62035: ST_TO_ADDR
// for i := 1 to 8 do
62036: LD_ADDR_VAR 0 2
62040: PUSH
62041: DOUBLE
62042: LD_INT 1
62044: DEC
62045: ST_TO_ADDR
62046: LD_INT 8
62048: PUSH
62049: FOR_TO
62050: IFFALSE 62080
// begin result := result & mpSidePositions [ i ] & ; ;
62052: LD_ADDR_VAR 0 1
62056: PUSH
62057: LD_VAR 0 1
62061: PUSH
62062: LD_EXP 7
62066: PUSH
62067: LD_VAR 0 2
62071: ARRAY
62072: STR
62073: PUSH
62074: LD_STRING ;
62076: STR
62077: ST_TO_ADDR
// end ;
62078: GO 62049
62080: POP
62081: POP
// ToLua ( setMultiplayerRealPosition(" & result & "); ) ;
62082: LD_STRING setMultiplayerRealPosition("
62084: PUSH
62085: LD_VAR 0 1
62089: STR
62090: PUSH
62091: LD_STRING ");
62093: STR
62094: PPUSH
62095: CALL_OW 559
// end ;
62099: LD_VAR 0 1
62103: RET
