// starting begin ResetFog ;
   0: CALL_OW 335
// InitMultiplayer ;
   4: CALL 2726 0 0
// InitMultiplayerSettings ;
   8: CALL 17 0 0
// StartMultiplayer ;
  12: CALL 3102 0 0
// end ; end_of_file
  16: END
// export function InitMultiplayerSettings ; begin
  17: LD_INT 0
  19: PPUSH
// mpGameSettingsKeys := [ 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 0 , 0 , 1 , 0 , 0 , 1 ] ;
  20: LD_ADDR_EXP 4
  24: PUSH
  25: LD_INT 1
  27: PUSH
  28: LD_INT 1
  30: PUSH
  31: LD_INT 1
  33: PUSH
  34: LD_INT 1
  36: PUSH
  37: LD_INT 1
  39: PUSH
  40: LD_INT 1
  42: PUSH
  43: LD_INT 1
  45: PUSH
  46: LD_INT 1
  48: PUSH
  49: LD_INT 1
  51: PUSH
  52: LD_INT 1
  54: PUSH
  55: LD_INT 1
  57: PUSH
  58: LD_INT 1
  60: PUSH
  61: LD_INT 1
  63: PUSH
  64: LD_INT 1
  66: PUSH
  67: LD_INT 1
  69: PUSH
  70: LD_INT 0
  72: PUSH
  73: LD_INT 0
  75: PUSH
  76: LD_INT 1
  78: PUSH
  79: LD_INT 0
  81: PUSH
  82: LD_INT 0
  84: PUSH
  85: LD_INT 1
  87: PUSH
  88: EMPTY
  89: LIST
  90: LIST
  91: LIST
  92: LIST
  93: LIST
  94: LIST
  95: LIST
  96: LIST
  97: LIST
  98: LIST
  99: LIST
 100: LIST
 101: LIST
 102: LIST
 103: LIST
 104: LIST
 105: LIST
 106: LIST
 107: LIST
 108: LIST
 109: LIST
 110: ST_TO_ADDR
// mpGameSettingsValues := [ [ 0 , 1 , 2 ] , [ 9 , 12 , 15 , 24 ] , [ 1 , 3 , 5 , 7 ] , [ [ 0 , 0 , 0 ] , [ 100 , 30 , 0 ] , [ 200 , 75 , 10 ] , [ 500 , 150 , 30 ] ] , [ 1 , 2 , 3 , 4 ] , [ 0 , 1 , 2 ] , [ 0 , 1 , 2 ] , [ 250 , 350 , 500 , 1000 , 2000 ] , [ 0 , 2 ] , [ 0 , 5 5$00 , 10 10$00 , 15 15$00 , 20 20$00 , 30 30$00 ] , [ 0 , 1 ] , [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] , [ 0 , 1 ] , [ 0 , 6 6$30 , 3 3$30 ] , [ 0 , 2 , 4 , 6 ] , [ ] , [ ] , [ 0 , 1 , 15 15$0 , 25 25$0 , 30 30$0 , 45 45$0 , 60 60$0 , 90 90$0 , 100 100$0 , 120 120$0 , 180 180$0 ] , [ ] , [ ] , [ 0 , 3 3$0 , 5 5$0 , 8 8$0 , 10 10$0 , 12 12$0 , 15 15$0 , 20 20$0 , 30 30$0 ] ] ;
 111: LD_ADDR_EXP 5
 115: PUSH
 116: LD_INT 0
 118: PUSH
 119: LD_INT 1
 121: PUSH
 122: LD_INT 2
 124: PUSH
 125: EMPTY
 126: LIST
 127: LIST
 128: LIST
 129: PUSH
 130: LD_INT 9
 132: PUSH
 133: LD_INT 12
 135: PUSH
 136: LD_INT 15
 138: PUSH
 139: LD_INT 24
 141: PUSH
 142: EMPTY
 143: LIST
 144: LIST
 145: LIST
 146: LIST
 147: PUSH
 148: LD_INT 1
 150: PUSH
 151: LD_INT 3
 153: PUSH
 154: LD_INT 5
 156: PUSH
 157: LD_INT 7
 159: PUSH
 160: EMPTY
 161: LIST
 162: LIST
 163: LIST
 164: LIST
 165: PUSH
 166: LD_INT 0
 168: PUSH
 169: LD_INT 0
 171: PUSH
 172: LD_INT 0
 174: PUSH
 175: EMPTY
 176: LIST
 177: LIST
 178: LIST
 179: PUSH
 180: LD_INT 100
 182: PUSH
 183: LD_INT 30
 185: PUSH
 186: LD_INT 0
 188: PUSH
 189: EMPTY
 190: LIST
 191: LIST
 192: LIST
 193: PUSH
 194: LD_INT 200
 196: PUSH
 197: LD_INT 75
 199: PUSH
 200: LD_INT 10
 202: PUSH
 203: EMPTY
 204: LIST
 205: LIST
 206: LIST
 207: PUSH
 208: LD_INT 500
 210: PUSH
 211: LD_INT 150
 213: PUSH
 214: LD_INT 30
 216: PUSH
 217: EMPTY
 218: LIST
 219: LIST
 220: LIST
 221: PUSH
 222: EMPTY
 223: LIST
 224: LIST
 225: LIST
 226: LIST
 227: PUSH
 228: LD_INT 1
 230: PUSH
 231: LD_INT 2
 233: PUSH
 234: LD_INT 3
 236: PUSH
 237: LD_INT 4
 239: PUSH
 240: EMPTY
 241: LIST
 242: LIST
 243: LIST
 244: LIST
 245: PUSH
 246: LD_INT 0
 248: PUSH
 249: LD_INT 1
 251: PUSH
 252: LD_INT 2
 254: PUSH
 255: EMPTY
 256: LIST
 257: LIST
 258: LIST
 259: PUSH
 260: LD_INT 0
 262: PUSH
 263: LD_INT 1
 265: PUSH
 266: LD_INT 2
 268: PUSH
 269: EMPTY
 270: LIST
 271: LIST
 272: LIST
 273: PUSH
 274: LD_INT 250
 276: PUSH
 277: LD_INT 350
 279: PUSH
 280: LD_INT 500
 282: PUSH
 283: LD_INT 1000
 285: PUSH
 286: LD_INT 2000
 288: PUSH
 289: EMPTY
 290: LIST
 291: LIST
 292: LIST
 293: LIST
 294: LIST
 295: PUSH
 296: LD_INT 0
 298: PUSH
 299: LD_INT 2
 301: PUSH
 302: EMPTY
 303: LIST
 304: LIST
 305: PUSH
 306: LD_INT 0
 308: PUSH
 309: LD_INT 10500
 311: PUSH
 312: LD_INT 21000
 314: PUSH
 315: LD_INT 31500
 317: PUSH
 318: LD_INT 42000
 320: PUSH
 321: LD_INT 63000
 323: PUSH
 324: EMPTY
 325: LIST
 326: LIST
 327: LIST
 328: LIST
 329: LIST
 330: LIST
 331: PUSH
 332: LD_INT 0
 334: PUSH
 335: LD_INT 1
 337: PUSH
 338: EMPTY
 339: LIST
 340: LIST
 341: PUSH
 342: LD_INT 1
 344: NEG
 345: PUSH
 346: LD_INT 350
 348: PUSH
 349: LD_INT 700
 351: PUSH
 352: LD_INT 1400
 354: PUSH
 355: LD_INT 0
 357: PUSH
 358: EMPTY
 359: LIST
 360: LIST
 361: LIST
 362: LIST
 363: LIST
 364: PUSH
 365: LD_INT 0
 367: PUSH
 368: LD_INT 1
 370: PUSH
 371: EMPTY
 372: LIST
 373: LIST
 374: PUSH
 375: LD_INT 0
 377: PUSH
 378: LD_INT 13650
 380: PUSH
 381: LD_INT 7350
 383: PUSH
 384: EMPTY
 385: LIST
 386: LIST
 387: LIST
 388: PUSH
 389: LD_INT 0
 391: PUSH
 392: LD_INT 2
 394: PUSH
 395: LD_INT 4
 397: PUSH
 398: LD_INT 6
 400: PUSH
 401: EMPTY
 402: LIST
 403: LIST
 404: LIST
 405: LIST
 406: PUSH
 407: EMPTY
 408: PUSH
 409: EMPTY
 410: PUSH
 411: LD_INT 0
 413: PUSH
 414: LD_INT 1
 416: PUSH
 417: LD_INT 31500
 419: PUSH
 420: LD_INT 52500
 422: PUSH
 423: LD_INT 63000
 425: PUSH
 426: LD_INT 94500
 428: PUSH
 429: LD_INT 126000
 431: PUSH
 432: LD_INT 189000
 434: PUSH
 435: LD_INT 210000
 437: PUSH
 438: LD_INT 252000
 440: PUSH
 441: LD_INT 378000
 443: PUSH
 444: EMPTY
 445: LIST
 446: LIST
 447: LIST
 448: LIST
 449: LIST
 450: LIST
 451: LIST
 452: LIST
 453: LIST
 454: LIST
 455: LIST
 456: PUSH
 457: EMPTY
 458: PUSH
 459: EMPTY
 460: PUSH
 461: LD_INT 0
 463: PUSH
 464: LD_INT 6300
 466: PUSH
 467: LD_INT 10500
 469: PUSH
 470: LD_INT 16800
 472: PUSH
 473: LD_INT 21000
 475: PUSH
 476: LD_INT 25200
 478: PUSH
 479: LD_INT 31500
 481: PUSH
 482: LD_INT 42000
 484: PUSH
 485: LD_INT 63000
 487: PUSH
 488: EMPTY
 489: LIST
 490: LIST
 491: LIST
 492: LIST
 493: LIST
 494: LIST
 495: LIST
 496: LIST
 497: LIST
 498: PUSH
 499: EMPTY
 500: LIST
 501: LIST
 502: LIST
 503: LIST
 504: LIST
 505: LIST
 506: LIST
 507: LIST
 508: LIST
 509: LIST
 510: LIST
 511: LIST
 512: LIST
 513: LIST
 514: LIST
 515: LIST
 516: LIST
 517: LIST
 518: LIST
 519: LIST
 520: LIST
 521: ST_TO_ADDR
// mpGameSettings := [ 2 , 15 , 4 , [ 100 , 30 , 0 ] , 3 , 1 , 2 , 250 , 2 , 5 5$00 , 1 , 0 0$20 , 1 , 0 0$20 , 3 , 0 , 0 , 15 15$0 , 0 , 0 , 3 3$0 ] ;
 522: LD_ADDR_EXP 6
 526: PUSH
 527: LD_INT 2
 529: PUSH
 530: LD_INT 15
 532: PUSH
 533: LD_INT 4
 535: PUSH
 536: LD_INT 100
 538: PUSH
 539: LD_INT 30
 541: PUSH
 542: LD_INT 0
 544: PUSH
 545: EMPTY
 546: LIST
 547: LIST
 548: LIST
 549: PUSH
 550: LD_INT 3
 552: PUSH
 553: LD_INT 1
 555: PUSH
 556: LD_INT 2
 558: PUSH
 559: LD_INT 250
 561: PUSH
 562: LD_INT 2
 564: PUSH
 565: LD_INT 10500
 567: PUSH
 568: LD_INT 1
 570: PUSH
 571: LD_INT 700
 573: PUSH
 574: LD_INT 1
 576: PUSH
 577: LD_INT 700
 579: PUSH
 580: LD_INT 3
 582: PUSH
 583: LD_INT 0
 585: PUSH
 586: LD_INT 0
 588: PUSH
 589: LD_INT 31500
 591: PUSH
 592: LD_INT 0
 594: PUSH
 595: LD_INT 0
 597: PUSH
 598: LD_INT 6300
 600: PUSH
 601: EMPTY
 602: LIST
 603: LIST
 604: LIST
 605: LIST
 606: LIST
 607: LIST
 608: LIST
 609: LIST
 610: LIST
 611: LIST
 612: LIST
 613: LIST
 614: LIST
 615: LIST
 616: LIST
 617: LIST
 618: LIST
 619: LIST
 620: LIST
 621: LIST
 622: LIST
 623: ST_TO_ADDR
// mpGameType := GameTypeNormal ;
 624: LD_ADDR_EXP 3
 628: PUSH
 629: LD_INT 1
 631: ST_TO_ADDR
// your_side := 1 ;
 632: LD_ADDR_OWVAR 2
 636: PUSH
 637: LD_INT 1
 639: ST_TO_ADDR
// mpSidePositions := [ 1 , 2 , 3 , 4 , 5 , 6 , 0 , 0 ] ;
 640: LD_ADDR_EXP 7
 644: PUSH
 645: LD_INT 1
 647: PUSH
 648: LD_INT 2
 650: PUSH
 651: LD_INT 3
 653: PUSH
 654: LD_INT 4
 656: PUSH
 657: LD_INT 5
 659: PUSH
 660: LD_INT 6
 662: PUSH
 663: LD_INT 0
 665: PUSH
 666: LD_INT 0
 668: PUSH
 669: EMPTY
 670: LIST
 671: LIST
 672: LIST
 673: LIST
 674: LIST
 675: LIST
 676: LIST
 677: LIST
 678: ST_TO_ADDR
// mpSideTeams := [ 1 , 1 , 1 , 2 , 2 , 2 , 0 , 0 ] ;
 679: LD_ADDR_EXP 8
 683: PUSH
 684: LD_INT 1
 686: PUSH
 687: LD_INT 1
 689: PUSH
 690: LD_INT 1
 692: PUSH
 693: LD_INT 2
 695: PUSH
 696: LD_INT 2
 698: PUSH
 699: LD_INT 2
 701: PUSH
 702: LD_INT 0
 704: PUSH
 705: LD_INT 0
 707: PUSH
 708: EMPTY
 709: LIST
 710: LIST
 711: LIST
 712: LIST
 713: LIST
 714: LIST
 715: LIST
 716: LIST
 717: ST_TO_ADDR
// mpSideNations := [ 1 , 1 , 1 , 2 , 2 , 2 , 0 , 0 ] ;
 718: LD_ADDR_EXP 9
 722: PUSH
 723: LD_INT 1
 725: PUSH
 726: LD_INT 1
 728: PUSH
 729: LD_INT 1
 731: PUSH
 732: LD_INT 2
 734: PUSH
 735: LD_INT 2
 737: PUSH
 738: LD_INT 2
 740: PUSH
 741: LD_INT 0
 743: PUSH
 744: LD_INT 0
 746: PUSH
 747: EMPTY
 748: LIST
 749: LIST
 750: LIST
 751: LIST
 752: LIST
 753: LIST
 754: LIST
 755: LIST
 756: ST_TO_ADDR
// mpTeams := [ [ 1 , 2 , 3 ] , [ 4 , 5 , 6 ] ] ;
 757: LD_ADDR_EXP 10
 761: PUSH
 762: LD_INT 1
 764: PUSH
 765: LD_INT 2
 767: PUSH
 768: LD_INT 3
 770: PUSH
 771: EMPTY
 772: LIST
 773: LIST
 774: LIST
 775: PUSH
 776: LD_INT 4
 778: PUSH
 779: LD_INT 5
 781: PUSH
 782: LD_INT 6
 784: PUSH
 785: EMPTY
 786: LIST
 787: LIST
 788: LIST
 789: PUSH
 790: EMPTY
 791: LIST
 792: LIST
 793: ST_TO_ADDR
// mpTeamGame := true ;
 794: LD_ADDR_EXP 11
 798: PUSH
 799: LD_INT 1
 801: ST_TO_ADDR
// mpMapSize := [ 160 , 120 ] ;
 802: LD_ADDR_EXP 29
 806: PUSH
 807: LD_INT 160
 809: PUSH
 810: LD_INT 120
 812: PUSH
 813: EMPTY
 814: LIST
 815: LIST
 816: ST_TO_ADDR
// end ;
 817: LD_VAR 0 1
 821: RET
// export kingArea , kingCamArea ; export function GetMultiplayerMapData ( gameType ) ; var i , all , hasOil , hasSib , baseLevel , startPos ; begin
 822: LD_INT 0
 824: PPUSH
 825: PPUSH
 826: PPUSH
 827: PPUSH
 828: PPUSH
 829: PPUSH
 830: PPUSH
// mpBuildUpAreas := [ BaseArea1 , BaseArea2 , BaseArea3 , BaseArea4 , BaseArea5 , BaseArea6 ] ;
 831: LD_ADDR_EXP 19
 835: PUSH
 836: LD_INT 1
 838: PUSH
 839: LD_INT 2
 841: PUSH
 842: LD_INT 3
 844: PUSH
 845: LD_INT 4
 847: PUSH
 848: LD_INT 5
 850: PUSH
 851: LD_INT 6
 853: PUSH
 854: EMPTY
 855: LIST
 856: LIST
 857: LIST
 858: LIST
 859: LIST
 860: LIST
 861: ST_TO_ADDR
// mpMarkedAreas := [ Center1 , Center2 ] union mpBuildUpAreas ;
 862: LD_ADDR_EXP 18
 866: PUSH
 867: LD_INT 7
 869: PUSH
 870: LD_INT 8
 872: PUSH
 873: EMPTY
 874: LIST
 875: LIST
 876: PUSH
 877: LD_EXP 19
 881: UNION
 882: ST_TO_ADDR
// if gameType = GameTypeSurvival then
 883: LD_VAR 0 1
 887: PUSH
 888: LD_INT 2
 890: EQUAL
 891: IFFALSE 903
// baseLevel := 1 else
 893: LD_ADDR_VAR 0 7
 897: PUSH
 898: LD_INT 1
 900: ST_TO_ADDR
 901: GO 917
// baseLevel := mpGameSettings [ 1 ] ;
 903: LD_ADDR_VAR 0 7
 907: PUSH
 908: LD_EXP 6
 912: PUSH
 913: LD_INT 1
 915: ARRAY
 916: ST_TO_ADDR
// mpPeopleAmount := mpGameSettings [ 2 ] ;
 917: LD_ADDR_EXP 24
 921: PUSH
 922: LD_EXP 6
 926: PUSH
 927: LD_INT 2
 929: ARRAY
 930: ST_TO_ADDR
// mpPeopleSkill := mpGameSettings [ 3 ] ;
 931: LD_ADDR_EXP 25
 935: PUSH
 936: LD_EXP 6
 940: PUSH
 941: LD_INT 3
 943: ARRAY
 944: ST_TO_ADDR
// mpStartingResources := mpGameSettings [ 4 ] ;
 945: LD_ADDR_EXP 15
 949: PUSH
 950: LD_EXP 6
 954: PUSH
 955: LD_INT 4
 957: ARRAY
 958: ST_TO_ADDR
// mpShipments := mpGameSettings [ 5 ] ;
 959: LD_ADDR_EXP 27
 963: PUSH
 964: LD_EXP 6
 968: PUSH
 969: LD_INT 5
 971: ARRAY
 972: ST_TO_ADDR
// hasOil := mpGameSettings [ 6 ] > 0 ;
 973: LD_ADDR_VAR 0 5
 977: PUSH
 978: LD_EXP 6
 982: PUSH
 983: LD_INT 6
 985: ARRAY
 986: PUSH
 987: LD_INT 0
 989: GREATER
 990: ST_TO_ADDR
// hasSib := mpGameSettings [ 7 ] > 0 ;
 991: LD_ADDR_VAR 0 6
 995: PUSH
 996: LD_EXP 6
1000: PUSH
1001: LD_INT 7
1003: ARRAY
1004: PUSH
1005: LD_INT 0
1007: GREATER
1008: ST_TO_ADDR
// mpKingArea := 0 ;
1009: LD_ADDR_EXP 34
1013: PUSH
1014: LD_INT 0
1016: ST_TO_ADDR
// mpPoints := 0 ;
1017: LD_ADDR_EXP 35
1021: PUSH
1022: LD_INT 0
1024: ST_TO_ADDR
// mpEmissions := 0 ;
1025: LD_ADDR_EXP 37
1029: PUSH
1030: LD_INT 0
1032: ST_TO_ADDR
// kingArea := 0 ;
1033: LD_ADDR_EXP 1
1037: PUSH
1038: LD_INT 0
1040: ST_TO_ADDR
// kingCamArea := 0 ;
1041: LD_ADDR_EXP 2
1045: PUSH
1046: LD_INT 0
1048: ST_TO_ADDR
// if mpGameSettings [ 9 ] then
1049: LD_EXP 6
1053: PUSH
1054: LD_INT 9
1056: ARRAY
1057: IFFALSE 1189
// begin mpVehicles := [ [ [ us_light_wheeled , engine_combustion , control_manual , us_machine_gun ] , [ us_light_wheeled , engine_combustion , control_manual , us_light_gun ] ] , [ [ ar_light_trike , engine_combustion , control_manual , ar_double_machine_gun ] , [ ar_light_trike , engine_combustion , control_manual , ar_light_gun ] ] , [ [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun ] , [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun ] ] ] ;
1059: LD_ADDR_EXP 36
1063: PUSH
1064: LD_INT 1
1066: PUSH
1067: LD_INT 1
1069: PUSH
1070: LD_INT 1
1072: PUSH
1073: LD_INT 2
1075: PUSH
1076: EMPTY
1077: LIST
1078: LIST
1079: LIST
1080: LIST
1081: PUSH
1082: LD_INT 1
1084: PUSH
1085: LD_INT 1
1087: PUSH
1088: LD_INT 1
1090: PUSH
1091: LD_INT 3
1093: PUSH
1094: EMPTY
1095: LIST
1096: LIST
1097: LIST
1098: LIST
1099: PUSH
1100: EMPTY
1101: LIST
1102: LIST
1103: PUSH
1104: LD_INT 12
1106: PUSH
1107: LD_INT 1
1109: PUSH
1110: LD_INT 1
1112: PUSH
1113: LD_INT 24
1115: PUSH
1116: EMPTY
1117: LIST
1118: LIST
1119: LIST
1120: LIST
1121: PUSH
1122: LD_INT 12
1124: PUSH
1125: LD_INT 1
1127: PUSH
1128: LD_INT 1
1130: PUSH
1131: LD_INT 23
1133: PUSH
1134: EMPTY
1135: LIST
1136: LIST
1137: LIST
1138: LIST
1139: PUSH
1140: EMPTY
1141: LIST
1142: LIST
1143: PUSH
1144: LD_INT 21
1146: PUSH
1147: LD_INT 1
1149: PUSH
1150: LD_INT 1
1152: PUSH
1153: LD_INT 42
1155: PUSH
1156: EMPTY
1157: LIST
1158: LIST
1159: LIST
1160: LIST
1161: PUSH
1162: LD_INT 21
1164: PUSH
1165: LD_INT 1
1167: PUSH
1168: LD_INT 1
1170: PUSH
1171: LD_INT 42
1173: PUSH
1174: EMPTY
1175: LIST
1176: LIST
1177: LIST
1178: LIST
1179: PUSH
1180: EMPTY
1181: LIST
1182: LIST
1183: PUSH
1184: EMPTY
1185: LIST
1186: LIST
1187: LIST
1188: ST_TO_ADDR
// end ; mpSharedVision := mpGameSettings [ 11 ] ;
1189: LD_ADDR_EXP 16
1193: PUSH
1194: LD_EXP 6
1198: PUSH
1199: LD_INT 11
1201: ARRAY
1202: ST_TO_ADDR
// mpBattleFlag := mpGameSettings [ 12 ] ;
1203: LD_ADDR_EXP 22
1207: PUSH
1208: LD_EXP 6
1212: PUSH
1213: LD_INT 12
1215: ARRAY
1216: ST_TO_ADDR
// mpSibDetection := mpGameSettings [ 13 ] ;
1217: LD_ADDR_EXP 26
1221: PUSH
1222: LD_EXP 6
1226: PUSH
1227: LD_INT 13
1229: ARRAY
1230: ST_TO_ADDR
// mpRespawn := mpGameSettings [ 14 ] ;
1231: LD_ADDR_EXP 33
1235: PUSH
1236: LD_EXP 6
1240: PUSH
1241: LD_INT 14
1243: ARRAY
1244: ST_TO_ADDR
// mpApemans := mpGameSettings [ 15 ] ;
1245: LD_ADDR_EXP 30
1249: PUSH
1250: LD_EXP 6
1254: PUSH
1255: LD_INT 15
1257: ARRAY
1258: ST_TO_ADDR
// mpSibBomb := mpGameSettings [ 18 ] ;
1259: LD_ADDR_EXP 28
1263: PUSH
1264: LD_EXP 6
1268: PUSH
1269: LD_INT 18
1271: ARRAY
1272: ST_TO_ADDR
// mpBuildUpTime := mpGameSettings [ 21 ] ;
1273: LD_ADDR_EXP 20
1277: PUSH
1278: LD_EXP 6
1282: PUSH
1283: LD_INT 21
1285: ARRAY
1286: ST_TO_ADDR
// mpApemansArea := [ ApeArea1 , ApeArea2 , ApeArea3 , ApeArea4 , ApeArea5 , ApeArea6 ] ;
1287: LD_ADDR_EXP 31
1291: PUSH
1292: LD_INT 9
1294: PUSH
1295: LD_INT 10
1297: PUSH
1298: LD_INT 11
1300: PUSH
1301: LD_INT 12
1303: PUSH
1304: LD_INT 13
1306: PUSH
1307: LD_INT 14
1309: PUSH
1310: EMPTY
1311: LIST
1312: LIST
1313: LIST
1314: LIST
1315: LIST
1316: LIST
1317: ST_TO_ADDR
// startPos := [ GetBuildingFromArea ( DepotArea1 , 1 ) , GetBuildingFromArea ( DepotArea2 , 1 ) , GetBuildingFromArea ( DepotArea3 , 1 ) , GetBuildingFromArea ( DepotArea4 , 4 ) , GetBuildingFromArea ( DepotArea5 , 4 ) , GetBuildingFromArea ( DepotArea6 , 4 ) ] ;
1318: LD_ADDR_VAR 0 8
1322: PUSH
1323: LD_INT 15
1325: PPUSH
1326: LD_INT 1
1328: PPUSH
1329: CALL 52139 0 2
1333: PUSH
1334: LD_INT 16
1336: PPUSH
1337: LD_INT 1
1339: PPUSH
1340: CALL 52139 0 2
1344: PUSH
1345: LD_INT 17
1347: PPUSH
1348: LD_INT 1
1350: PPUSH
1351: CALL 52139 0 2
1355: PUSH
1356: LD_INT 18
1358: PPUSH
1359: LD_INT 4
1361: PPUSH
1362: CALL 52139 0 2
1366: PUSH
1367: LD_INT 19
1369: PPUSH
1370: LD_INT 4
1372: PPUSH
1373: CALL 52139 0 2
1377: PUSH
1378: LD_INT 20
1380: PPUSH
1381: LD_INT 4
1383: PPUSH
1384: CALL 52139 0 2
1388: PUSH
1389: EMPTY
1390: LIST
1391: LIST
1392: LIST
1393: LIST
1394: LIST
1395: LIST
1396: ST_TO_ADDR
// for i := 1 to Count ( startPos ) do
1397: LD_ADDR_VAR 0 3
1401: PUSH
1402: DOUBLE
1403: LD_INT 1
1405: DEC
1406: ST_TO_ADDR
1407: LD_VAR 0 8
1411: PPUSH
1412: CALL 11985 0 1
1416: PUSH
1417: FOR_TO
1418: IFFALSE 1522
// mpStartPos := Replace ( mpStartPos , i , [ ShiftX ( startPos [ i ] [ 1 ] , startPos [ i ] [ 3 ] , 10 ) , ShiftY ( startPos [ i ] [ 2 ] , startPos [ i ] [ 3 ] , 10 ) ] ) ;
1420: LD_ADDR_EXP 21
1424: PUSH
1425: LD_EXP 21
1429: PPUSH
1430: LD_VAR 0 3
1434: PPUSH
1435: LD_VAR 0 8
1439: PUSH
1440: LD_VAR 0 3
1444: ARRAY
1445: PUSH
1446: LD_INT 1
1448: ARRAY
1449: PPUSH
1450: LD_VAR 0 8
1454: PUSH
1455: LD_VAR 0 3
1459: ARRAY
1460: PUSH
1461: LD_INT 3
1463: ARRAY
1464: PPUSH
1465: LD_INT 10
1467: PPUSH
1468: CALL_OW 272
1472: PUSH
1473: LD_VAR 0 8
1477: PUSH
1478: LD_VAR 0 3
1482: ARRAY
1483: PUSH
1484: LD_INT 2
1486: ARRAY
1487: PPUSH
1488: LD_VAR 0 8
1492: PUSH
1493: LD_VAR 0 3
1497: ARRAY
1498: PUSH
1499: LD_INT 3
1501: ARRAY
1502: PPUSH
1503: LD_INT 10
1505: PPUSH
1506: CALL_OW 273
1510: PUSH
1511: EMPTY
1512: LIST
1513: LIST
1514: PPUSH
1515: CALL_OW 1
1519: ST_TO_ADDR
1520: GO 1417
1522: POP
1523: POP
// if hasOil then
1524: LD_VAR 0 5
1528: IFFALSE 1639
// begin all := ( mpGameSettings [ 6 ] = 2 ) ;
1530: LD_ADDR_VAR 0 4
1534: PUSH
1535: LD_EXP 6
1539: PUSH
1540: LD_INT 6
1542: ARRAY
1543: PUSH
1544: LD_INT 2
1546: EQUAL
1547: ST_TO_ADDR
// mpOilDeposits := [ GetSourcesFromArea ( OilArea1 , all ) , GetSourcesFromArea ( OilArea2 , all ) , GetSourcesFromArea ( OilArea3 , all ) , GetSourcesFromArea ( OilArea4 , all ) , GetSourcesFromArea ( OilArea5 , all ) , GetSourcesFromArea ( OilArea6 , all ) ] ;
1548: LD_ADDR_EXP 12
1552: PUSH
1553: LD_INT 21
1555: PPUSH
1556: LD_VAR 0 4
1560: PPUSH
1561: CALL 51972 0 2
1565: PUSH
1566: LD_INT 22
1568: PPUSH
1569: LD_VAR 0 4
1573: PPUSH
1574: CALL 51972 0 2
1578: PUSH
1579: LD_INT 23
1581: PPUSH
1582: LD_VAR 0 4
1586: PPUSH
1587: CALL 51972 0 2
1591: PUSH
1592: LD_INT 24
1594: PPUSH
1595: LD_VAR 0 4
1599: PPUSH
1600: CALL 51972 0 2
1604: PUSH
1605: LD_INT 25
1607: PPUSH
1608: LD_VAR 0 4
1612: PPUSH
1613: CALL 51972 0 2
1617: PUSH
1618: LD_INT 26
1620: PPUSH
1621: LD_VAR 0 4
1625: PPUSH
1626: CALL 51972 0 2
1630: PUSH
1631: EMPTY
1632: LIST
1633: LIST
1634: LIST
1635: LIST
1636: LIST
1637: LIST
1638: ST_TO_ADDR
// end ; if hasSib then
1639: LD_VAR 0 6
1643: IFFALSE 1754
// begin all := ( mpGameSettings [ 7 ] = 2 ) ;
1645: LD_ADDR_VAR 0 4
1649: PUSH
1650: LD_EXP 6
1654: PUSH
1655: LD_INT 7
1657: ARRAY
1658: PUSH
1659: LD_INT 2
1661: EQUAL
1662: ST_TO_ADDR
// mpSibDeposits := [ GetSourcesFromArea ( SibArea1 , all ) , GetSourcesFromArea ( SibArea2 , all ) , GetSourcesFromArea ( SibArea3 , all ) , GetSourcesFromArea ( SibArea4 , all ) , GetSourcesFromArea ( SibArea5 , all ) , GetSourcesFromArea ( SibArea6 , all ) ] ;
1663: LD_ADDR_EXP 13
1667: PUSH
1668: LD_INT 27
1670: PPUSH
1671: LD_VAR 0 4
1675: PPUSH
1676: CALL 51972 0 2
1680: PUSH
1681: LD_INT 28
1683: PPUSH
1684: LD_VAR 0 4
1688: PPUSH
1689: CALL 51972 0 2
1693: PUSH
1694: LD_INT 29
1696: PPUSH
1697: LD_VAR 0 4
1701: PPUSH
1702: CALL 51972 0 2
1706: PUSH
1707: LD_INT 30
1709: PPUSH
1710: LD_VAR 0 4
1714: PPUSH
1715: CALL 51972 0 2
1719: PUSH
1720: LD_INT 31
1722: PPUSH
1723: LD_VAR 0 4
1727: PPUSH
1728: CALL 51972 0 2
1732: PUSH
1733: LD_INT 32
1735: PPUSH
1736: LD_VAR 0 4
1740: PPUSH
1741: CALL 51972 0 2
1745: PUSH
1746: EMPTY
1747: LIST
1748: LIST
1749: LIST
1750: LIST
1751: LIST
1752: LIST
1753: ST_TO_ADDR
// end ; if baseLevel >= 1 then
1754: LD_VAR 0 7
1758: PUSH
1759: LD_INT 1
1761: GREATEREQUAL
1762: IFFALSE 1774
// mpDepots := startPos ;
1764: LD_ADDR_EXP 14
1768: PUSH
1769: LD_VAR 0 8
1773: ST_TO_ADDR
// if baseLevel >= 2 then
1774: LD_VAR 0 7
1778: PUSH
1779: LD_INT 2
1781: GREATEREQUAL
1782: IFFALSE 2097
// begin mpBuildings := [ [ b_breastwork ^ GetBuildingFromArea ( BunArea1a , 4 ) , b_breastwork ^ GetBuildingFromArea ( BunArea1b , 4 ) , b_armoury ^ GetBuildingFromArea ( ArmArea1 , 4 ) ] , [ b_breastwork ^ GetBuildingFromArea ( BunArea2a , 4 ) , b_breastwork ^ GetBuildingFromArea ( BunArea2b , 4 ) , b_armoury ^ GetBuildingFromArea ( ArmArea2 , 4 ) ] , [ b_breastwork ^ GetBuildingFromArea ( BunArea3a , 4 ) , b_breastwork ^ GetBuildingFromArea ( BunArea3b , 4 ) , b_armoury ^ GetBuildingFromArea ( ArmArea3 , 4 ) ] , [ b_breastwork ^ GetBuildingFromArea ( BunArea4a , 1 ) , b_breastwork ^ GetBuildingFromArea ( BunArea4b , 1 ) , b_armoury ^ GetBuildingFromArea ( ArmArea4 , 1 ) ] , [ b_breastwork ^ GetBuildingFromArea ( BunArea5a , 1 ) , b_breastwork ^ GetBuildingFromArea ( BunArea5b , 1 ) , b_armoury ^ GetBuildingFromArea ( ArmArea5 , 1 ) ] , [ b_breastwork ^ GetBuildingFromArea ( BunArea6a , 1 ) , b_breastwork ^ GetBuildingFromArea ( BunArea6b , 1 ) , b_armoury ^ GetBuildingFromArea ( ArmArea6 , 1 ) ] ] ;
1784: LD_ADDR_EXP 17
1788: PUSH
1789: LD_INT 31
1791: PUSH
1792: LD_INT 33
1794: PPUSH
1795: LD_INT 4
1797: PPUSH
1798: CALL 52139 0 2
1802: ADD
1803: PUSH
1804: LD_INT 31
1806: PUSH
1807: LD_INT 34
1809: PPUSH
1810: LD_INT 4
1812: PPUSH
1813: CALL 52139 0 2
1817: ADD
1818: PUSH
1819: LD_INT 4
1821: PUSH
1822: LD_INT 35
1824: PPUSH
1825: LD_INT 4
1827: PPUSH
1828: CALL 52139 0 2
1832: ADD
1833: PUSH
1834: EMPTY
1835: LIST
1836: LIST
1837: LIST
1838: PUSH
1839: LD_INT 31
1841: PUSH
1842: LD_INT 36
1844: PPUSH
1845: LD_INT 4
1847: PPUSH
1848: CALL 52139 0 2
1852: ADD
1853: PUSH
1854: LD_INT 31
1856: PUSH
1857: LD_INT 37
1859: PPUSH
1860: LD_INT 4
1862: PPUSH
1863: CALL 52139 0 2
1867: ADD
1868: PUSH
1869: LD_INT 4
1871: PUSH
1872: LD_INT 38
1874: PPUSH
1875: LD_INT 4
1877: PPUSH
1878: CALL 52139 0 2
1882: ADD
1883: PUSH
1884: EMPTY
1885: LIST
1886: LIST
1887: LIST
1888: PUSH
1889: LD_INT 31
1891: PUSH
1892: LD_INT 39
1894: PPUSH
1895: LD_INT 4
1897: PPUSH
1898: CALL 52139 0 2
1902: ADD
1903: PUSH
1904: LD_INT 31
1906: PUSH
1907: LD_INT 40
1909: PPUSH
1910: LD_INT 4
1912: PPUSH
1913: CALL 52139 0 2
1917: ADD
1918: PUSH
1919: LD_INT 4
1921: PUSH
1922: LD_INT 41
1924: PPUSH
1925: LD_INT 4
1927: PPUSH
1928: CALL 52139 0 2
1932: ADD
1933: PUSH
1934: EMPTY
1935: LIST
1936: LIST
1937: LIST
1938: PUSH
1939: LD_INT 31
1941: PUSH
1942: LD_INT 42
1944: PPUSH
1945: LD_INT 1
1947: PPUSH
1948: CALL 52139 0 2
1952: ADD
1953: PUSH
1954: LD_INT 31
1956: PUSH
1957: LD_INT 43
1959: PPUSH
1960: LD_INT 1
1962: PPUSH
1963: CALL 52139 0 2
1967: ADD
1968: PUSH
1969: LD_INT 4
1971: PUSH
1972: LD_INT 44
1974: PPUSH
1975: LD_INT 1
1977: PPUSH
1978: CALL 52139 0 2
1982: ADD
1983: PUSH
1984: EMPTY
1985: LIST
1986: LIST
1987: LIST
1988: PUSH
1989: LD_INT 31
1991: PUSH
1992: LD_INT 45
1994: PPUSH
1995: LD_INT 1
1997: PPUSH
1998: CALL 52139 0 2
2002: ADD
2003: PUSH
2004: LD_INT 31
2006: PUSH
2007: LD_INT 46
2009: PPUSH
2010: LD_INT 1
2012: PPUSH
2013: CALL 52139 0 2
2017: ADD
2018: PUSH
2019: LD_INT 4
2021: PUSH
2022: LD_INT 47
2024: PPUSH
2025: LD_INT 1
2027: PPUSH
2028: CALL 52139 0 2
2032: ADD
2033: PUSH
2034: EMPTY
2035: LIST
2036: LIST
2037: LIST
2038: PUSH
2039: LD_INT 31
2041: PUSH
2042: LD_INT 48
2044: PPUSH
2045: LD_INT 1
2047: PPUSH
2048: CALL 52139 0 2
2052: ADD
2053: PUSH
2054: LD_INT 31
2056: PUSH
2057: LD_INT 49
2059: PPUSH
2060: LD_INT 1
2062: PPUSH
2063: CALL 52139 0 2
2067: ADD
2068: PUSH
2069: LD_INT 4
2071: PUSH
2072: LD_INT 50
2074: PPUSH
2075: LD_INT 1
2077: PPUSH
2078: CALL 52139 0 2
2082: ADD
2083: PUSH
2084: EMPTY
2085: LIST
2086: LIST
2087: LIST
2088: PUSH
2089: EMPTY
2090: LIST
2091: LIST
2092: LIST
2093: LIST
2094: LIST
2095: LIST
2096: ST_TO_ADDR
// end ; end ;
2097: LD_VAR 0 2
2101: RET
// every 0 0$2 marked mpActive do var i , x , tmp , time , areas , normalTime , delayTime , maxTime ;
2102: GO 2104
2104: DISABLE
2105: LD_INT 0
2107: PPUSH
2108: PPUSH
2109: PPUSH
2110: PPUSH
2111: PPUSH
2112: PPUSH
2113: PPUSH
2114: PPUSH
// begin if not mpShipments then
2115: LD_EXP 27
2119: NOT
2120: IFFALSE 2124
// exit ;
2122: GO 2639
// case mpShipments of 1 :
2124: LD_EXP 27
2128: PUSH
2129: LD_INT 1
2131: DOUBLE
2132: EQUAL
2133: IFTRUE 2137
2135: GO 2172
2137: POP
// begin time := 0 0$30 ;
2138: LD_ADDR_VAR 0 4
2142: PUSH
2143: LD_INT 1050
2145: ST_TO_ADDR
// normalTime := 0 0$30 ;
2146: LD_ADDR_VAR 0 6
2150: PUSH
2151: LD_INT 1050
2153: ST_TO_ADDR
// maxTime := 1 1$20 ;
2154: LD_ADDR_VAR 0 8
2158: PUSH
2159: LD_INT 2800
2161: ST_TO_ADDR
// delayTime := 0 0$5 ;
2162: LD_ADDR_VAR 0 7
2166: PUSH
2167: LD_INT 175
2169: ST_TO_ADDR
// end ; 2 :
2170: GO 2302
2172: LD_INT 2
2174: DOUBLE
2175: EQUAL
2176: IFTRUE 2180
2178: GO 2215
2180: POP
// begin time := 0 0$25 ;
2181: LD_ADDR_VAR 0 4
2185: PUSH
2186: LD_INT 875
2188: ST_TO_ADDR
// normalTime := 0 0$25 ;
2189: LD_ADDR_VAR 0 6
2193: PUSH
2194: LD_INT 875
2196: ST_TO_ADDR
// maxTime := 1 1$10 ;
2197: LD_ADDR_VAR 0 8
2201: PUSH
2202: LD_INT 2450
2204: ST_TO_ADDR
// delayTime := 0 0$4 ;
2205: LD_ADDR_VAR 0 7
2209: PUSH
2210: LD_INT 140
2212: ST_TO_ADDR
// end ; 3 :
2213: GO 2302
2215: LD_INT 3
2217: DOUBLE
2218: EQUAL
2219: IFTRUE 2223
2221: GO 2258
2223: POP
// begin time := 0 0$20 ;
2224: LD_ADDR_VAR 0 4
2228: PUSH
2229: LD_INT 700
2231: ST_TO_ADDR
// normalTime := 0 0$20 ;
2232: LD_ADDR_VAR 0 6
2236: PUSH
2237: LD_INT 700
2239: ST_TO_ADDR
// maxTime := 1 1$00 ;
2240: LD_ADDR_VAR 0 8
2244: PUSH
2245: LD_INT 2100
2247: ST_TO_ADDR
// delayTime := 0 0$3 ;
2248: LD_ADDR_VAR 0 7
2252: PUSH
2253: LD_INT 105
2255: ST_TO_ADDR
// end ; 4 :
2256: GO 2302
2258: LD_INT 4
2260: DOUBLE
2261: EQUAL
2262: IFTRUE 2266
2264: GO 2301
2266: POP
// begin time := 0 0$15 ;
2267: LD_ADDR_VAR 0 4
2271: PUSH
2272: LD_INT 525
2274: ST_TO_ADDR
// normalTime := 0 0$15 ;
2275: LD_ADDR_VAR 0 6
2279: PUSH
2280: LD_INT 525
2282: ST_TO_ADDR
// maxTime := 0 0$55 ;
2283: LD_ADDR_VAR 0 8
2287: PUSH
2288: LD_INT 1925
2290: ST_TO_ADDR
// delayTime := 0 0$2 ;
2291: LD_ADDR_VAR 0 7
2295: PUSH
2296: LD_INT 70
2298: ST_TO_ADDR
// end ; end ;
2299: GO 2302
2301: POP
// tmp := [ BaseArea1 , BaseArea2 , BaseArea3 , BaseArea4 , BaseArea5 , BaseArea6 ] ;
2302: LD_ADDR_VAR 0 3
2306: PUSH
2307: LD_INT 1
2309: PUSH
2310: LD_INT 2
2312: PUSH
2313: LD_INT 3
2315: PUSH
2316: LD_INT 4
2318: PUSH
2319: LD_INT 5
2321: PUSH
2322: LD_INT 6
2324: PUSH
2325: EMPTY
2326: LIST
2327: LIST
2328: LIST
2329: LIST
2330: LIST
2331: LIST
2332: ST_TO_ADDR
// areas := [ Center1 , Center2 ] ;
2333: LD_ADDR_VAR 0 5
2337: PUSH
2338: LD_INT 7
2340: PUSH
2341: LD_INT 8
2343: PUSH
2344: EMPTY
2345: LIST
2346: LIST
2347: ST_TO_ADDR
// for i := 1 to 8 do
2348: LD_ADDR_VAR 0 1
2352: PUSH
2353: DOUBLE
2354: LD_INT 1
2356: DEC
2357: ST_TO_ADDR
2358: LD_INT 8
2360: PUSH
2361: FOR_TO
2362: IFFALSE 2409
// begin if not mpSidePositions [ i ] then
2364: LD_EXP 7
2368: PUSH
2369: LD_VAR 0 1
2373: ARRAY
2374: NOT
2375: IFFALSE 2379
// continue ;
2377: GO 2361
// areas := areas ^ tmp [ mpSidePositions [ i ] ] ;
2379: LD_ADDR_VAR 0 5
2383: PUSH
2384: LD_VAR 0 5
2388: PUSH
2389: LD_VAR 0 3
2393: PUSH
2394: LD_EXP 7
2398: PUSH
2399: LD_VAR 0 1
2403: ARRAY
2404: ARRAY
2405: ADD
2406: ST_TO_ADDR
// end ;
2407: GO 2361
2409: POP
2410: POP
// x := 1 ;
2411: LD_ADDR_VAR 0 2
2415: PUSH
2416: LD_INT 1
2418: ST_TO_ADDR
// repeat wait ( time ) ;
2419: LD_VAR 0 4
2423: PPUSH
2424: CALL_OW 67
// x := Inc ( x ) ;
2428: LD_ADDR_VAR 0 2
2432: PUSH
2433: LD_VAR 0 2
2437: PPUSH
2438: CALL 48955 0 1
2442: ST_TO_ADDR
// if x > 5 then
2443: LD_VAR 0 2
2447: PUSH
2448: LD_INT 5
2450: GREATER
2451: IFFALSE 2461
// x := 1 ;
2453: LD_ADDR_VAR 0 2
2457: PUSH
2458: LD_INT 1
2460: ST_TO_ADDR
// for i in areas do
2461: LD_ADDR_VAR 0 1
2465: PUSH
2466: LD_VAR 0 5
2470: PUSH
2471: FOR_IN
2472: IFFALSE 2511
// begin if GetResourceArea ( i , mat_cans ) < 20 then
2474: LD_VAR 0 1
2478: PPUSH
2479: LD_INT 1
2481: PPUSH
2482: CALL_OW 287
2486: PUSH
2487: LD_INT 20
2489: LESS
2490: IFFALSE 2509
// begin CreateCratesArea ( x , i , true ) ;
2492: LD_VAR 0 2
2496: PPUSH
2497: LD_VAR 0 1
2501: PPUSH
2502: LD_INT 1
2504: PPUSH
2505: CALL_OW 55
// end ; end ;
2509: GO 2471
2511: POP
2512: POP
// if GetResourceArea ( CenterArea , mat_cans ) = 0 then
2513: LD_INT 51
2515: PPUSH
2516: LD_INT 1
2518: PPUSH
2519: CALL_OW 287
2523: PUSH
2524: LD_INT 0
2526: EQUAL
2527: IFFALSE 2566
// begin for i := 1 to 3 do
2529: LD_ADDR_VAR 0 1
2533: PUSH
2534: DOUBLE
2535: LD_INT 1
2537: DEC
2538: ST_TO_ADDR
2539: LD_INT 3
2541: PUSH
2542: FOR_TO
2543: IFFALSE 2562
// CreateCratesArea ( x , CenterArea , true ) ;
2545: LD_VAR 0 2
2549: PPUSH
2550: LD_INT 51
2552: PPUSH
2553: LD_INT 1
2555: PPUSH
2556: CALL_OW 55
2560: GO 2542
2562: POP
2563: POP
// end else
2564: GO 2597
// if GetResourceArea ( CenterArea , mat_cans ) < 30 then
2566: LD_INT 51
2568: PPUSH
2569: LD_INT 1
2571: PPUSH
2572: CALL_OW 287
2576: PUSH
2577: LD_INT 30
2579: LESS
2580: IFFALSE 2597
// CreateCratesArea ( x , CenterArea , true ) ;
2582: LD_VAR 0 2
2586: PPUSH
2587: LD_INT 51
2589: PPUSH
2590: LD_INT 1
2592: PPUSH
2593: CALL_OW 55
// time := time + delayTime ;
2597: LD_ADDR_VAR 0 4
2601: PUSH
2602: LD_VAR 0 4
2606: PUSH
2607: LD_VAR 0 7
2611: PLUS
2612: ST_TO_ADDR
// if time > maxTime then
2613: LD_VAR 0 4
2617: PUSH
2618: LD_VAR 0 8
2622: GREATER
2623: IFFALSE 2635
// time := normalTime ;
2625: LD_ADDR_VAR 0 4
2629: PUSH
2630: LD_VAR 0 6
2634: ST_TO_ADDR
// until false ;
2635: LD_INT 0
2637: IFFALSE 2419
// end ; end_of_file
2639: PPOPN 8
2641: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
2642: LD_VAR 0 1
2646: PPUSH
2647: CALL 52847 0 1
// Multiplayer_UnitDestroyed ( un ) ;
2651: LD_VAR 0 1
2655: PPUSH
2656: CALL 7711 0 1
// end ;
2660: PPOPN 1
2662: END
// on UnitKamikazed ( un ) do begin SOS_UnitKamikazed ( un ) ;
2663: LD_VAR 0 1
2667: PPUSH
2668: CALL 52864 0 1
// end ;
2672: PPOPN 1
2674: END
// on BuildingComplete ( b ) do Multiplayer_BuildingComplete ( b ) ;
2675: LD_VAR 0 1
2679: PPUSH
2680: CALL 8376 0 1
2684: PPOPN 1
2686: END
// on VehicleConstructed ( vehicle , factory ) do SOS_VehicleConstructed ( vehicle , factory ) ;
2687: LD_VAR 0 1
2691: PPUSH
2692: LD_VAR 0 2
2696: PPUSH
2697: CALL 52905 0 2
2701: PPOPN 2
2703: END
// on BuildingCaptured ( building , oldSide , unit ) do Multiplayer_BuildingCaptured ( building , oldSide , unit ) ; end_of_file
2704: LD_VAR 0 1
2708: PPUSH
2709: LD_VAR 0 2
2713: PPUSH
2714: LD_VAR 0 3
2718: PPUSH
2719: CALL 8429 0 3
2723: PPOPN 3
2725: END
// export mpGameType , mpGameSettingsKeys , mpGameSettingsValues , mpGameSettings , mpSidePositions , mpSideTeams , mpSideNations , mpTeams , mpTeamGame , mpOilDeposits , mpSibDeposits , mpDepots , mpStartingResources , mpSharedVision , mpBuildings , mpMarkedAreas , mpBuildUpAreas , mpBuildUpTime , mpStartPos , mpBattleFlag , mpBattleFlags , mpPeopleAmount , mpPeopleSkill , mpSibDetection , mpShipments , mpSibBomb , mpMapSize , mpApemans , mpApemansArea , mpApePosIndex , mpRespawn , mpKingArea , mpPoints , mpVehicles , mpEmissions , mpDisplayStrings , mpGameActive , mpRespawnPull , mpGlobalOilDeposits , mpGlobalSibDeposits , mpTeleports , mpArtifacts , mpBlockRespThread ; export function InitMultiplayer ; var i ; begin
2726: LD_INT 0
2728: PPUSH
2729: PPUSH
// disable ( mpActive ) ;
2730: LD_INT 100
2732: DISABLE_MARKED
// disable ( mpWin ) ;
2733: LD_INT 101
2735: DISABLE_MARKED
// disable ( mpLose ) ;
2736: LD_INT 102
2738: DISABLE_MARKED
// mpGameType := 0 ;
2739: LD_ADDR_EXP 3
2743: PUSH
2744: LD_INT 0
2746: ST_TO_ADDR
// mpGameSettings := [ ] ;
2747: LD_ADDR_EXP 6
2751: PUSH
2752: EMPTY
2753: ST_TO_ADDR
// mpGameSettingsKeys := [ ] ;
2754: LD_ADDR_EXP 4
2758: PUSH
2759: EMPTY
2760: ST_TO_ADDR
// mpGameSettingsValues := [ ] ;
2761: LD_ADDR_EXP 5
2765: PUSH
2766: EMPTY
2767: ST_TO_ADDR
// mpMapSize := [ 2 , 2 ] ;
2768: LD_ADDR_EXP 29
2772: PUSH
2773: LD_INT 2
2775: PUSH
2776: LD_INT 2
2778: PUSH
2779: EMPTY
2780: LIST
2781: LIST
2782: ST_TO_ADDR
// mpOilDeposits := [ ] ;
2783: LD_ADDR_EXP 12
2787: PUSH
2788: EMPTY
2789: ST_TO_ADDR
// mpSibDeposits := [ ] ;
2790: LD_ADDR_EXP 13
2794: PUSH
2795: EMPTY
2796: ST_TO_ADDR
// mpGlobalOilDeposits := [ ] ;
2797: LD_ADDR_EXP 41
2801: PUSH
2802: EMPTY
2803: ST_TO_ADDR
// mpGlobalSibDeposits := [ ] ;
2804: LD_ADDR_EXP 42
2808: PUSH
2809: EMPTY
2810: ST_TO_ADDR
// mpDepots := [ ] ;
2811: LD_ADDR_EXP 14
2815: PUSH
2816: EMPTY
2817: ST_TO_ADDR
// mpBuildings := [ ] ;
2818: LD_ADDR_EXP 17
2822: PUSH
2823: EMPTY
2824: ST_TO_ADDR
// mpMarkedAreas := [ ] ;
2825: LD_ADDR_EXP 18
2829: PUSH
2830: EMPTY
2831: ST_TO_ADDR
// mpBuildUpAreas := [ ] ;
2832: LD_ADDR_EXP 19
2836: PUSH
2837: EMPTY
2838: ST_TO_ADDR
// mpBuildUpTime := [ ] ;
2839: LD_ADDR_EXP 20
2843: PUSH
2844: EMPTY
2845: ST_TO_ADDR
// mpStartingResources := [ ] ;
2846: LD_ADDR_EXP 15
2850: PUSH
2851: EMPTY
2852: ST_TO_ADDR
// mpStartPos := [ ] ;
2853: LD_ADDR_EXP 21
2857: PUSH
2858: EMPTY
2859: ST_TO_ADDR
// mpBattleFlag := - 1 ;
2860: LD_ADDR_EXP 22
2864: PUSH
2865: LD_INT 1
2867: NEG
2868: ST_TO_ADDR
// mpBattleFlags := [ ] ;
2869: LD_ADDR_EXP 23
2873: PUSH
2874: EMPTY
2875: ST_TO_ADDR
// mpApemans := [ ] ;
2876: LD_ADDR_EXP 30
2880: PUSH
2881: EMPTY
2882: ST_TO_ADDR
// mpApemansArea := [ ] ;
2883: LD_ADDR_EXP 31
2887: PUSH
2888: EMPTY
2889: ST_TO_ADDR
// mpRespawn := [ ] ;
2890: LD_ADDR_EXP 33
2894: PUSH
2895: EMPTY
2896: ST_TO_ADDR
// mpKingArea := 0 ;
2897: LD_ADDR_EXP 34
2901: PUSH
2902: LD_INT 0
2904: ST_TO_ADDR
// mpPoints := [ ] ;
2905: LD_ADDR_EXP 35
2909: PUSH
2910: EMPTY
2911: ST_TO_ADDR
// mpVehicles := 0 ;
2912: LD_ADDR_EXP 36
2916: PUSH
2917: LD_INT 0
2919: ST_TO_ADDR
// mpShipments := 0 ;
2920: LD_ADDR_EXP 27
2924: PUSH
2925: LD_INT 0
2927: ST_TO_ADDR
// mpRespawnPull := [ [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
2928: LD_ADDR_EXP 40
2932: PUSH
2933: EMPTY
2934: PUSH
2935: EMPTY
2936: PUSH
2937: EMPTY
2938: PUSH
2939: EMPTY
2940: PUSH
2941: EMPTY
2942: PUSH
2943: EMPTY
2944: PUSH
2945: EMPTY
2946: PUSH
2947: EMPTY
2948: PUSH
2949: EMPTY
2950: LIST
2951: LIST
2952: LIST
2953: LIST
2954: LIST
2955: LIST
2956: LIST
2957: LIST
2958: ST_TO_ADDR
// mpApePosIndex := [ [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
2959: LD_ADDR_EXP 32
2963: PUSH
2964: EMPTY
2965: PUSH
2966: EMPTY
2967: PUSH
2968: EMPTY
2969: PUSH
2970: EMPTY
2971: PUSH
2972: EMPTY
2973: PUSH
2974: EMPTY
2975: PUSH
2976: EMPTY
2977: PUSH
2978: EMPTY
2979: PUSH
2980: EMPTY
2981: LIST
2982: LIST
2983: LIST
2984: LIST
2985: LIST
2986: LIST
2987: LIST
2988: LIST
2989: ST_TO_ADDR
// mpEmissions := 0 ;
2990: LD_ADDR_EXP 37
2994: PUSH
2995: LD_INT 0
2997: ST_TO_ADDR
// mpTeleports := 0 ;
2998: LD_ADDR_EXP 43
3002: PUSH
3003: LD_INT 0
3005: ST_TO_ADDR
// mpArtifacts := 0 ;
3006: LD_ADDR_EXP 44
3010: PUSH
3011: LD_INT 0
3013: ST_TO_ADDR
// mpPeopleSkill := 3 ;
3014: LD_ADDR_EXP 25
3018: PUSH
3019: LD_INT 3
3021: ST_TO_ADDR
// mpPeopleAmount := 15 ;
3022: LD_ADDR_EXP 24
3026: PUSH
3027: LD_INT 15
3029: ST_TO_ADDR
// mpDisplayStrings := 0 ;
3030: LD_ADDR_EXP 38
3034: PUSH
3035: LD_INT 0
3037: ST_TO_ADDR
// mpGameActive := false ;
3038: LD_ADDR_EXP 39
3042: PUSH
3043: LD_INT 0
3045: ST_TO_ADDR
// mpBlockRespThread := false ;
3046: LD_ADDR_EXP 45
3050: PUSH
3051: LD_INT 0
3053: ST_TO_ADDR
// for i := 1 to 32 do
3054: LD_ADDR_VAR 0 2
3058: PUSH
3059: DOUBLE
3060: LD_INT 1
3062: DEC
3063: ST_TO_ADDR
3064: LD_INT 32
3066: PUSH
3067: FOR_TO
3068: IFFALSE 3095
// mpGameSettings := Replace ( mpGameSettings , i , 0 ) ;
3070: LD_ADDR_EXP 6
3074: PUSH
3075: LD_EXP 6
3079: PPUSH
3080: LD_VAR 0 2
3084: PPUSH
3085: LD_INT 0
3087: PPUSH
3088: CALL_OW 1
3092: ST_TO_ADDR
3093: GO 3067
3095: POP
3096: POP
// end ;
3097: LD_VAR 0 1
3101: RET
// export function StartMultiplayer ; var i , j , b , x , y , side , pos , nation , ape , team , setting , resources , gameTypes ; begin
3102: LD_INT 0
3104: PPUSH
3105: PPUSH
3106: PPUSH
3107: PPUSH
3108: PPUSH
3109: PPUSH
3110: PPUSH
3111: PPUSH
3112: PPUSH
3113: PPUSH
3114: PPUSH
3115: PPUSH
3116: PPUSH
3117: PPUSH
// gameTypes := [ GameTypeNormal , GameTypeSurvival , GameTypeKing , GameTypeFamine ] ;
3118: LD_ADDR_VAR 0 14
3122: PUSH
3123: LD_INT 1
3125: PUSH
3126: LD_INT 2
3128: PUSH
3129: LD_INT 3
3131: PUSH
3132: LD_INT 5
3134: PUSH
3135: EMPTY
3136: LIST
3137: LIST
3138: LIST
3139: LIST
3140: ST_TO_ADDR
// for i in gameTypes do
3141: LD_ADDR_VAR 0 2
3145: PUSH
3146: LD_VAR 0 14
3150: PUSH
3151: FOR_IN
3152: IFFALSE 3161
// disable ( i ) ;
3154: LD_VAR 0 2
3158: DISABLE_MARKED
3159: GO 3151
3161: POP
3162: POP
// if Multiplayer then
3163: LD_OWVAR 4
3167: IFFALSE 3351
// begin mpGameType := mp_game_type ;
3169: LD_ADDR_EXP 3
3173: PUSH
3174: LD_OWVAR 6
3178: ST_TO_ADDR
// your_side := mp_player_side ;
3179: LD_ADDR_OWVAR 2
3183: PUSH
3184: LD_OWVAR 7
3188: ST_TO_ADDR
// mpSidePositions := mp_sides_positions ;
3189: LD_ADDR_EXP 7
3193: PUSH
3194: LD_OWVAR 17
3198: ST_TO_ADDR
// mpSideTeams := mp_sides_teams ;
3199: LD_ADDR_EXP 8
3203: PUSH
3204: LD_OWVAR 15
3208: ST_TO_ADDR
// mpSideNations := mp_sides_nations ;
3209: LD_ADDR_EXP 9
3213: PUSH
3214: LD_OWVAR 16
3218: ST_TO_ADDR
// mpTeams := mp_teams ;
3219: LD_ADDR_EXP 10
3223: PUSH
3224: LD_OWVAR 12
3228: ST_TO_ADDR
// for i := 1 to Count ( mpGameSettingsKeys ) do
3229: LD_ADDR_VAR 0 2
3233: PUSH
3234: DOUBLE
3235: LD_INT 1
3237: DEC
3238: ST_TO_ADDR
3239: LD_EXP 4
3243: PPUSH
3244: CALL 11985 0 1
3248: PUSH
3249: FOR_TO
3250: IFFALSE 3326
// begin setting := mpGameSettingsKeys [ i ] ;
3252: LD_ADDR_VAR 0 12
3256: PUSH
3257: LD_EXP 4
3261: PUSH
3262: LD_VAR 0 2
3266: ARRAY
3267: ST_TO_ADDR
// if setting then
3268: LD_VAR 0 12
3272: IFFALSE 3324
// mpGameSettings := Replace ( mpGameSettings , i , mpGameSettingsValues [ i ] [ GetMultiplayerSetting ( i - 1 ) + 1 ] ) ;
3274: LD_ADDR_EXP 6
3278: PUSH
3279: LD_EXP 6
3283: PPUSH
3284: LD_VAR 0 2
3288: PPUSH
3289: LD_EXP 5
3293: PUSH
3294: LD_VAR 0 2
3298: ARRAY
3299: PUSH
3300: LD_VAR 0 2
3304: PUSH
3305: LD_INT 1
3307: MINUS
3308: PPUSH
3309: CALL_OW 426
3313: PUSH
3314: LD_INT 1
3316: PLUS
3317: ARRAY
3318: PPUSH
3319: CALL_OW 1
3323: ST_TO_ADDR
// end ;
3324: GO 3249
3326: POP
3327: POP
// mpTeamGame := ( mpSideTeams diff [ 0 ] ) > 1 ;
3328: LD_ADDR_EXP 11
3332: PUSH
3333: LD_EXP 8
3337: PUSH
3338: LD_INT 0
3340: PUSH
3341: EMPTY
3342: LIST
3343: DIFF
3344: PUSH
3345: LD_INT 1
3347: GREATER
3348: ST_TO_ADDR
// end else
3349: GO 3351
// begin end ; GetMultiplayerMapData ( mpGameType ) ;
3351: LD_EXP 3
3355: PPUSH
3356: CALL 822 0 1
// if Count ( mpMarkedAreas ) then
3360: LD_EXP 18
3364: PPUSH
3365: CALL 11985 0 1
3369: IFFALSE 3400
// begin for i in mpMarkedAreas do
3371: LD_ADDR_VAR 0 2
3375: PUSH
3376: LD_EXP 18
3380: PUSH
3381: FOR_IN
3382: IFFALSE 3398
// SetAreaMapShow ( i , 0 ) ;
3384: LD_VAR 0 2
3388: PPUSH
3389: LD_INT 0
3391: PPUSH
3392: CALL_OW 424
3396: GO 3381
3398: POP
3399: POP
// end ; for i := 1 to 8 do
3400: LD_ADDR_VAR 0 2
3404: PUSH
3405: DOUBLE
3406: LD_INT 1
3408: DEC
3409: ST_TO_ADDR
3410: LD_INT 8
3412: PUSH
3413: FOR_TO
3414: IFFALSE 4678
// begin if not mpSidePositions [ i ] then
3416: LD_EXP 7
3420: PUSH
3421: LD_VAR 0 2
3425: ARRAY
3426: NOT
3427: IFFALSE 3431
// continue ;
3429: GO 3413
// side := i ;
3431: LD_ADDR_VAR 0 7
3435: PUSH
3436: LD_VAR 0 2
3440: ST_TO_ADDR
// nation := mpSideNations [ i ] ;
3441: LD_ADDR_VAR 0 9
3445: PUSH
3446: LD_EXP 9
3450: PUSH
3451: LD_VAR 0 2
3455: ARRAY
3456: ST_TO_ADDR
// pos := mpSidePositions [ i ] ;
3457: LD_ADDR_VAR 0 8
3461: PUSH
3462: LD_EXP 7
3466: PUSH
3467: LD_VAR 0 2
3471: ARRAY
3472: ST_TO_ADDR
// if Count ( mpOilDeposits ) then
3473: LD_EXP 12
3477: PPUSH
3478: CALL 11985 0 1
3482: IFFALSE 3559
// begin for j in mpOilDeposits [ pos ] do
3484: LD_ADDR_VAR 0 3
3488: PUSH
3489: LD_EXP 12
3493: PUSH
3494: LD_VAR 0 8
3498: ARRAY
3499: PUSH
3500: FOR_IN
3501: IFFALSE 3557
// begin CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_oil ) ;
3503: LD_VAR 0 3
3507: PUSH
3508: LD_INT 1
3510: ARRAY
3511: PPUSH
3512: LD_VAR 0 3
3516: PUSH
3517: LD_INT 2
3519: ARRAY
3520: PPUSH
3521: LD_INT 2
3523: PPUSH
3524: CALL_OW 62
// SetResourceVisibility ( j [ 1 ] , j [ 2 ] , side ) ;
3528: LD_VAR 0 3
3532: PUSH
3533: LD_INT 1
3535: ARRAY
3536: PPUSH
3537: LD_VAR 0 3
3541: PUSH
3542: LD_INT 2
3544: ARRAY
3545: PPUSH
3546: LD_VAR 0 7
3550: PPUSH
3551: CALL_OW 441
// end ;
3555: GO 3500
3557: POP
3558: POP
// end ; if Count ( mpSibDeposits ) then
3559: LD_EXP 13
3563: PPUSH
3564: CALL 11985 0 1
3568: IFFALSE 3645
// begin for j in mpSibDeposits [ pos ] do
3570: LD_ADDR_VAR 0 3
3574: PUSH
3575: LD_EXP 13
3579: PUSH
3580: LD_VAR 0 8
3584: ARRAY
3585: PUSH
3586: FOR_IN
3587: IFFALSE 3643
// begin CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_siberit ) ;
3589: LD_VAR 0 3
3593: PUSH
3594: LD_INT 1
3596: ARRAY
3597: PPUSH
3598: LD_VAR 0 3
3602: PUSH
3603: LD_INT 2
3605: ARRAY
3606: PPUSH
3607: LD_INT 3
3609: PPUSH
3610: CALL_OW 62
// SetResourceVisibility ( j [ 1 ] , j [ 2 ] , side ) ;
3614: LD_VAR 0 3
3618: PUSH
3619: LD_INT 1
3621: ARRAY
3622: PPUSH
3623: LD_VAR 0 3
3627: PUSH
3628: LD_INT 2
3630: ARRAY
3631: PPUSH
3632: LD_VAR 0 7
3636: PPUSH
3637: CALL_OW 441
// end ;
3641: GO 3586
3643: POP
3644: POP
// end ; InitBc ;
3645: CALL_OW 21
// InitUc ;
3649: CALL_OW 18
// uc_side := side ;
3653: LD_ADDR_OWVAR 20
3657: PUSH
3658: LD_VAR 0 7
3662: ST_TO_ADDR
// uc_nation := nation ;
3663: LD_ADDR_OWVAR 21
3667: PUSH
3668: LD_VAR 0 9
3672: ST_TO_ADDR
// if Count ( mpDepots ) then
3673: LD_EXP 14
3677: PPUSH
3678: CALL 11985 0 1
3682: IFFALSE 3866
// begin if mpGameType = GameTypeSurvival then
3684: LD_EXP 3
3688: PUSH
3689: LD_INT 2
3691: EQUAL
3692: IFFALSE 3712
// begin bc_level := 10 ;
3694: LD_ADDR_OWVAR 43
3698: PUSH
3699: LD_INT 10
3701: ST_TO_ADDR
// bc_type := b_warehouse ;
3702: LD_ADDR_OWVAR 42
3706: PUSH
3707: LD_INT 1
3709: ST_TO_ADDR
// end else
3710: GO 3728
// begin bc_level := 0 ;
3712: LD_ADDR_OWVAR 43
3716: PUSH
3717: LD_INT 0
3719: ST_TO_ADDR
// bc_type := b_depot ;
3720: LD_ADDR_OWVAR 42
3724: PUSH
3725: LD_INT 0
3727: ST_TO_ADDR
// end ; b := CreateAndPlaceBuildingXYD ( mpDepots [ pos ] [ 1 ] , mpDepots [ pos ] [ 2 ] , mpDepots [ pos ] [ 3 ] ) ;
3728: LD_ADDR_VAR 0 4
3732: PUSH
3733: LD_EXP 14
3737: PUSH
3738: LD_VAR 0 8
3742: ARRAY
3743: PUSH
3744: LD_INT 1
3746: ARRAY
3747: PPUSH
3748: LD_EXP 14
3752: PUSH
3753: LD_VAR 0 8
3757: ARRAY
3758: PUSH
3759: LD_INT 2
3761: ARRAY
3762: PPUSH
3763: LD_EXP 14
3767: PUSH
3768: LD_VAR 0 8
3772: ARRAY
3773: PUSH
3774: LD_INT 3
3776: ARRAY
3777: PPUSH
3778: CALL_OW 47
3782: ST_TO_ADDR
// SetBName ( b , @ & side ) ;
3783: LD_VAR 0 4
3787: PPUSH
3788: LD_STRING @
3790: PUSH
3791: LD_VAR 0 7
3795: STR
3796: PPUSH
3797: CALL_OW 500
// if Count ( mpStartingResources ) then
3801: LD_EXP 15
3805: PPUSH
3806: CALL 11985 0 1
3810: IFFALSE 3864
// begin for j := 1 to mpStartingResources do
3812: LD_ADDR_VAR 0 3
3816: PUSH
3817: DOUBLE
3818: LD_INT 1
3820: DEC
3821: ST_TO_ADDR
3822: LD_EXP 15
3826: PUSH
3827: FOR_TO
3828: IFFALSE 3862
// SetResourceType ( GetBase ( b ) , j , mpStartingResources [ j ] ) ;
3830: LD_VAR 0 4
3834: PPUSH
3835: CALL_OW 274
3839: PPUSH
3840: LD_VAR 0 3
3844: PPUSH
3845: LD_EXP 15
3849: PUSH
3850: LD_VAR 0 3
3854: ARRAY
3855: PPUSH
3856: CALL_OW 277
3860: GO 3827
3862: POP
3863: POP
// end ; end else
3864: GO 4013
// if Count ( mpStartingResources ) then
3866: LD_EXP 15
3870: PPUSH
3871: CALL 11985 0 1
3875: IFFALSE 4013
// begin for j := 1 to mpStartingResources do
3877: LD_ADDR_VAR 0 3
3881: PUSH
3882: DOUBLE
3883: LD_INT 1
3885: DEC
3886: ST_TO_ADDR
3887: LD_EXP 15
3891: PUSH
3892: FOR_TO
3893: IFFALSE 4011
// begin resources := mpStartingResources [ j ] ;
3895: LD_ADDR_VAR 0 13
3899: PUSH
3900: LD_EXP 15
3904: PUSH
3905: LD_VAR 0 3
3909: ARRAY
3910: ST_TO_ADDR
// repeat if resources >= 50 then
3911: LD_VAR 0 13
3915: PUSH
3916: LD_INT 50
3918: GREATEREQUAL
3919: IFFALSE 3965
// begin CreateResourcesXYR ( j , 5 , x , y , 4 , false ) ;
3921: LD_VAR 0 3
3925: PPUSH
3926: LD_INT 5
3928: PPUSH
3929: LD_VAR 0 5
3933: PPUSH
3934: LD_VAR 0 6
3938: PPUSH
3939: LD_INT 4
3941: PPUSH
3942: LD_INT 0
3944: PPUSH
3945: CALL_OW 60
// resources := resources - 50 ;
3949: LD_ADDR_VAR 0 13
3953: PUSH
3954: LD_VAR 0 13
3958: PUSH
3959: LD_INT 50
3961: MINUS
3962: ST_TO_ADDR
// end else
3963: GO 3999
// CreateResourcesXYR ( j , resources div 10 , x , y , 4 , false ) ;
3965: LD_VAR 0 3
3969: PPUSH
3970: LD_VAR 0 13
3974: PUSH
3975: LD_INT 10
3977: DIV
3978: PPUSH
3979: LD_VAR 0 5
3983: PPUSH
3984: LD_VAR 0 6
3988: PPUSH
3989: LD_INT 4
3991: PPUSH
3992: LD_INT 0
3994: PPUSH
3995: CALL_OW 60
// until resources <= 0 ;
3999: LD_VAR 0 13
4003: PUSH
4004: LD_INT 0
4006: LESSEQUAL
4007: IFFALSE 3911
// end ;
4009: GO 3892
4011: POP
4012: POP
// end ; if Count ( mpBuildings ) then
4013: LD_EXP 17
4017: PPUSH
4018: CALL 11985 0 1
4022: IFFALSE 4100
// begin for j in mpBuildings [ pos ] do
4024: LD_ADDR_VAR 0 3
4028: PUSH
4029: LD_EXP 17
4033: PUSH
4034: LD_VAR 0 8
4038: ARRAY
4039: PUSH
4040: FOR_IN
4041: IFFALSE 4098
// begin bc_level := 0 ;
4043: LD_ADDR_OWVAR 43
4047: PUSH
4048: LD_INT 0
4050: ST_TO_ADDR
// bc_type := j [ 1 ] ;
4051: LD_ADDR_OWVAR 42
4055: PUSH
4056: LD_VAR 0 3
4060: PUSH
4061: LD_INT 1
4063: ARRAY
4064: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( j [ 2 ] , j [ 3 ] , j [ 4 ] ) ;
4065: LD_VAR 0 3
4069: PUSH
4070: LD_INT 2
4072: ARRAY
4073: PPUSH
4074: LD_VAR 0 3
4078: PUSH
4079: LD_INT 3
4081: ARRAY
4082: PPUSH
4083: LD_VAR 0 3
4087: PUSH
4088: LD_INT 4
4090: ARRAY
4091: PPUSH
4092: CALL_OW 47
// end ;
4096: GO 4040
4098: POP
4099: POP
// end ; if mpBattleFlag > - 1 then
4100: LD_EXP 22
4104: PUSH
4105: LD_INT 1
4107: NEG
4108: GREATER
4109: IFFALSE 4268
// begin x := mpStartPos [ pos ] [ 1 ] ;
4111: LD_ADDR_VAR 0 5
4115: PUSH
4116: LD_EXP 21
4120: PUSH
4121: LD_VAR 0 8
4125: ARRAY
4126: PUSH
4127: LD_INT 1
4129: ARRAY
4130: ST_TO_ADDR
// y := mpStartPos [ pos ] [ 2 ] ;
4131: LD_ADDR_VAR 0 6
4135: PUSH
4136: LD_EXP 21
4140: PUSH
4141: LD_VAR 0 8
4145: ARRAY
4146: PUSH
4147: LD_INT 2
4149: ARRAY
4150: ST_TO_ADDR
// PlaceEnvironment ( x , y , 12 , 2 ) ;
4151: LD_VAR 0 5
4155: PPUSH
4156: LD_VAR 0 6
4160: PPUSH
4161: LD_INT 12
4163: PPUSH
4164: LD_INT 2
4166: PPUSH
4167: CALL_OW 349
// mpBattleFlags := Replace ( mpBattleFlags , side , SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 70 ] , [ bfo_defend_bonus_building , 40 ] , [ bfo_range , 25 ] , [ bfo_height , 100 ] ] ) ) ;
4171: LD_ADDR_EXP 23
4175: PUSH
4176: LD_EXP 23
4180: PPUSH
4181: LD_VAR 0 7
4185: PPUSH
4186: LD_VAR 0 7
4190: PPUSH
4191: LD_VAR 0 5
4195: PPUSH
4196: LD_VAR 0 6
4200: PPUSH
4201: LD_INT 1
4203: PUSH
4204: LD_INT 100
4206: PUSH
4207: EMPTY
4208: LIST
4209: LIST
4210: PUSH
4211: LD_INT 2
4213: PUSH
4214: LD_INT 70
4216: PUSH
4217: EMPTY
4218: LIST
4219: LIST
4220: PUSH
4221: LD_INT 3
4223: PUSH
4224: LD_INT 40
4226: PUSH
4227: EMPTY
4228: LIST
4229: LIST
4230: PUSH
4231: LD_INT 10
4233: PUSH
4234: LD_INT 25
4236: PUSH
4237: EMPTY
4238: LIST
4239: LIST
4240: PUSH
4241: LD_INT 20
4243: PUSH
4244: LD_INT 100
4246: PUSH
4247: EMPTY
4248: LIST
4249: LIST
4250: PUSH
4251: EMPTY
4252: LIST
4253: LIST
4254: LIST
4255: LIST
4256: LIST
4257: PPUSH
4258: CALL_OW 418
4262: PPUSH
4263: CALL_OW 1
4267: ST_TO_ADDR
// end ; if mpSibDetection and GetTech ( tech_sibdet , side ) = state_enabled then
4268: LD_EXP 26
4272: PUSH
4273: LD_INT 20
4275: PPUSH
4276: LD_VAR 0 7
4280: PPUSH
4281: CALL_OW 321
4285: PUSH
4286: LD_INT 1
4288: EQUAL
4289: AND
4290: IFFALSE 4307
// SetTech ( tech_SibDet , side , state_researched ) ;
4292: LD_INT 20
4294: PPUSH
4295: LD_VAR 0 7
4299: PPUSH
4300: LD_INT 2
4302: PPUSH
4303: CALL_OW 322
// if not mpArtifacts then
4307: LD_EXP 44
4311: NOT
4312: IFFALSE 4329
// SetTech ( tech_artifact , side , state_disabled ) ;
4314: LD_INT 24
4316: PPUSH
4317: LD_VAR 0 7
4321: PPUSH
4322: LD_INT 0
4324: PPUSH
4325: CALL_OW 322
// if mpSibBomb = 1 then
4329: LD_EXP 28
4333: PUSH
4334: LD_INT 1
4336: EQUAL
4337: IFFALSE 4356
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
4339: LD_INT 25
4341: PPUSH
4342: LD_VAR 0 7
4346: PPUSH
4347: LD_INT 1
4349: PPUSH
4350: CALL_OW 322
// end else
4354: GO 4371
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
4356: LD_INT 25
4358: PPUSH
4359: LD_VAR 0 7
4363: PPUSH
4364: LD_INT 0
4366: PPUSH
4367: CALL_OW 322
// end ; if mpVehicles then
4371: LD_EXP 36
4375: IFFALSE 4474
// begin for j in mpPrepareVehicles ( side , nation , mpVehicles ) do
4377: LD_ADDR_VAR 0 3
4381: PUSH
4382: LD_VAR 0 7
4386: PPUSH
4387: LD_VAR 0 9
4391: PPUSH
4392: LD_EXP 36
4396: PPUSH
4397: CALL 5588 0 3
4401: PUSH
4402: FOR_IN
4403: IFFALSE 4472
// begin SetDir ( j , rand ( 0 , 5 ) ) ;
4405: LD_VAR 0 3
4409: PPUSH
4410: LD_INT 0
4412: PPUSH
4413: LD_INT 5
4415: PPUSH
4416: CALL_OW 12
4420: PPUSH
4421: CALL_OW 233
// PlaceUnitXYR ( j , mpStartPos [ pos ] [ 1 ] , mpStartPos [ pos ] [ 2 ] , 12 , false ) ;
4425: LD_VAR 0 3
4429: PPUSH
4430: LD_EXP 21
4434: PUSH
4435: LD_VAR 0 8
4439: ARRAY
4440: PUSH
4441: LD_INT 1
4443: ARRAY
4444: PPUSH
4445: LD_EXP 21
4449: PUSH
4450: LD_VAR 0 8
4454: ARRAY
4455: PUSH
4456: LD_INT 2
4458: ARRAY
4459: PPUSH
4460: LD_INT 12
4462: PPUSH
4463: LD_INT 0
4465: PPUSH
4466: CALL_OW 50
// end ;
4470: GO 4402
4472: POP
4473: POP
// end ; team := mpPrepareTeam ( side , nation , mpPeopleAmount , mpPeopleSkill ) ;
4474: LD_ADDR_VAR 0 11
4478: PUSH
4479: LD_VAR 0 7
4483: PPUSH
4484: LD_VAR 0 9
4488: PPUSH
4489: LD_EXP 24
4493: PPUSH
4494: LD_EXP 25
4498: PPUSH
4499: CALL 5090 0 4
4503: ST_TO_ADDR
// for j in team do
4504: LD_ADDR_VAR 0 3
4508: PUSH
4509: LD_VAR 0 11
4513: PUSH
4514: FOR_IN
4515: IFFALSE 4564
// PlaceUnitXYR ( j , mpStartPos [ pos ] [ 1 ] , mpStartPos [ pos ] [ 2 ] , 12 , false ) ;
4517: LD_VAR 0 3
4521: PPUSH
4522: LD_EXP 21
4526: PUSH
4527: LD_VAR 0 8
4531: ARRAY
4532: PUSH
4533: LD_INT 1
4535: ARRAY
4536: PPUSH
4537: LD_EXP 21
4541: PUSH
4542: LD_VAR 0 8
4546: ARRAY
4547: PUSH
4548: LD_INT 2
4550: ARRAY
4551: PPUSH
4552: LD_INT 12
4554: PPUSH
4555: LD_INT 0
4557: PPUSH
4558: CALL_OW 50
4562: GO 4514
4564: POP
4565: POP
// if mpApemans then
4566: LD_EXP 30
4570: IFFALSE 4676
// begin for j := 1 to mpApemans do
4572: LD_ADDR_VAR 0 3
4576: PUSH
4577: DOUBLE
4578: LD_INT 1
4580: DEC
4581: ST_TO_ADDR
4582: LD_EXP 30
4586: PUSH
4587: FOR_TO
4588: IFFALSE 4674
// begin PrepareApeman ( - 5 ) ;
4590: LD_INT 5
4592: NEG
4593: PPUSH
4594: CALL 43842 0 1
// ape := CreateHuman ;
4598: LD_ADDR_VAR 0 10
4602: PUSH
4603: CALL_OW 44
4607: ST_TO_ADDR
// mpApePosIndex := Replace ( mpApePosIndex , pos , Join ( mpApePosIndex [ pos ] , ape ) ) ;
4608: LD_ADDR_EXP 32
4612: PUSH
4613: LD_EXP 32
4617: PPUSH
4618: LD_VAR 0 8
4622: PPUSH
4623: LD_EXP 32
4627: PUSH
4628: LD_VAR 0 8
4632: ARRAY
4633: PPUSH
4634: LD_VAR 0 10
4638: PPUSH
4639: CALL 47594 0 2
4643: PPUSH
4644: CALL_OW 1
4648: ST_TO_ADDR
// PlaceUnitArea ( ape , mpApemansArea [ pos ] , false ) ;
4649: LD_VAR 0 10
4653: PPUSH
4654: LD_EXP 31
4658: PUSH
4659: LD_VAR 0 8
4663: ARRAY
4664: PPUSH
4665: LD_INT 0
4667: PPUSH
4668: CALL_OW 49
// end ;
4672: GO 4587
4674: POP
4675: POP
// end ; end ;
4676: GO 3413
4678: POP
4679: POP
// if not mpTeamGame then
4680: LD_EXP 11
4684: NOT
4685: IFFALSE 4783
// begin for i := 1 to 8 do
4687: LD_ADDR_VAR 0 2
4691: PUSH
4692: DOUBLE
4693: LD_INT 1
4695: DEC
4696: ST_TO_ADDR
4697: LD_INT 8
4699: PUSH
4700: FOR_TO
4701: IFFALSE 4779
// for j := 1 to 8 do
4703: LD_ADDR_VAR 0 3
4707: PUSH
4708: DOUBLE
4709: LD_INT 1
4711: DEC
4712: ST_TO_ADDR
4713: LD_INT 8
4715: PUSH
4716: FOR_TO
4717: IFFALSE 4775
// if i <> j then
4719: LD_VAR 0 2
4723: PUSH
4724: LD_VAR 0 3
4728: NONEQUAL
4729: IFFALSE 4753
// SetAttitude ( i , j , att_neutral , true ) else
4731: LD_VAR 0 2
4735: PPUSH
4736: LD_VAR 0 3
4740: PPUSH
4741: LD_INT 0
4743: PPUSH
4744: LD_INT 1
4746: PPUSH
4747: CALL_OW 80
4751: GO 4773
// SetAttitude ( i , j , att_friend , true ) ;
4753: LD_VAR 0 2
4757: PPUSH
4758: LD_VAR 0 3
4762: PPUSH
4763: LD_INT 1
4765: PPUSH
4766: LD_INT 1
4768: PPUSH
4769: CALL_OW 80
4773: GO 4716
4775: POP
4776: POP
4777: GO 4700
4779: POP
4780: POP
// end else
4781: GO 4958
// begin if mpSharedVision then
4783: LD_EXP 16
4787: IFFALSE 4852
// begin for i in mpTeams do
4789: LD_ADDR_VAR 0 2
4793: PUSH
4794: LD_EXP 10
4798: PUSH
4799: FOR_IN
4800: IFFALSE 4850
// for j := 2 to i do
4802: LD_ADDR_VAR 0 3
4806: PUSH
4807: DOUBLE
4808: LD_INT 2
4810: DEC
4811: ST_TO_ADDR
4812: LD_VAR 0 2
4816: PUSH
4817: FOR_TO
4818: IFFALSE 4846
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
4820: LD_VAR 0 2
4824: PUSH
4825: LD_VAR 0 3
4829: ARRAY
4830: PPUSH
4831: LD_VAR 0 2
4835: PUSH
4836: LD_INT 1
4838: ARRAY
4839: PPUSH
4840: CALL_OW 343
4844: GO 4817
4846: POP
4847: POP
4848: GO 4799
4850: POP
4851: POP
// end ; for i := 1 to 8 do
4852: LD_ADDR_VAR 0 2
4856: PUSH
4857: DOUBLE
4858: LD_INT 1
4860: DEC
4861: ST_TO_ADDR
4862: LD_INT 8
4864: PUSH
4865: FOR_TO
4866: IFFALSE 4956
// for j := 1 to 8 do
4868: LD_ADDR_VAR 0 3
4872: PUSH
4873: DOUBLE
4874: LD_INT 1
4876: DEC
4877: ST_TO_ADDR
4878: LD_INT 8
4880: PUSH
4881: FOR_TO
4882: IFFALSE 4952
// if mpSideTeams [ i ] = mpSideTeams [ j ] then
4884: LD_EXP 8
4888: PUSH
4889: LD_VAR 0 2
4893: ARRAY
4894: PUSH
4895: LD_EXP 8
4899: PUSH
4900: LD_VAR 0 3
4904: ARRAY
4905: EQUAL
4906: IFFALSE 4930
// SetAttitude ( i , j , att_friend , true ) else
4908: LD_VAR 0 2
4912: PPUSH
4913: LD_VAR 0 3
4917: PPUSH
4918: LD_INT 1
4920: PPUSH
4921: LD_INT 1
4923: PPUSH
4924: CALL_OW 80
4928: GO 4950
// SetAttitude ( i , j , att_enemy , true ) ;
4930: LD_VAR 0 2
4934: PPUSH
4935: LD_VAR 0 3
4939: PPUSH
4940: LD_INT 2
4942: PPUSH
4943: LD_INT 1
4945: PPUSH
4946: CALL_OW 80
4950: GO 4881
4952: POP
4953: POP
4954: GO 4865
4956: POP
4957: POP
// end ; music_nat := mpSideNations [ your_side ] ;
4958: LD_ADDR_OWVAR 71
4962: PUSH
4963: LD_EXP 9
4967: PUSH
4968: LD_OWVAR 2
4972: ARRAY
4973: ST_TO_ADDR
// if IAmSpec then
4974: CALL_OW 531
4978: IFFALSE 5019
// begin FogOff ( true ) ;
4980: LD_INT 1
4982: PPUSH
4983: CALL_OW 344
// CenterNowOnXY ( mpMapSize [ 1 ] div 2 , mpMapSize [ 2 ] div 2 ) ;
4987: LD_EXP 29
4991: PUSH
4992: LD_INT 1
4994: ARRAY
4995: PUSH
4996: LD_INT 2
4998: DIV
4999: PPUSH
5000: LD_EXP 29
5004: PUSH
5005: LD_INT 2
5007: ARRAY
5008: PUSH
5009: LD_INT 2
5011: DIV
5012: PPUSH
5013: CALL_OW 86
// end else
5017: GO 5065
// begin CenterNowOnXY ( mpStartPos [ mpSidePositions [ your_side ] ] [ 1 ] , mpStartPos [ mpSidePositions [ your_side ] ] [ 2 ] ) ;
5019: LD_EXP 21
5023: PUSH
5024: LD_EXP 7
5028: PUSH
5029: LD_OWVAR 2
5033: ARRAY
5034: ARRAY
5035: PUSH
5036: LD_INT 1
5038: ARRAY
5039: PPUSH
5040: LD_EXP 21
5044: PUSH
5045: LD_EXP 7
5049: PUSH
5050: LD_OWVAR 2
5054: ARRAY
5055: ARRAY
5056: PUSH
5057: LD_INT 2
5059: ARRAY
5060: PPUSH
5061: CALL_OW 86
// end ; BeginBuildUp ;
5065: CALL 6066 0 0
// enable ( mpActive ) ;
5069: LD_INT 100
5071: ENABLE_MARKED
// enable ( mpGameType ) ;
5072: LD_EXP 3
5076: ENABLE_MARKED
// mpGameActive := true ;
5077: LD_ADDR_EXP 39
5081: PUSH
5082: LD_INT 1
5084: ST_TO_ADDR
// end ;
5085: LD_VAR 0 1
5089: RET
// var mpTeamPreset ; function mpPrepareTeam ( side , nation , amount , skill ) ; var i , un , class ; begin
5090: LD_INT 0
5092: PPUSH
5093: PPUSH
5094: PPUSH
5095: PPUSH
// result := [ ] ;
5096: LD_ADDR_VAR 0 5
5100: PUSH
5101: EMPTY
5102: ST_TO_ADDR
// class := class_soldier ;
5103: LD_ADDR_VAR 0 8
5107: PUSH
5108: LD_INT 1
5110: ST_TO_ADDR
// uc_side := side ;
5111: LD_ADDR_OWVAR 20
5115: PUSH
5116: LD_VAR 0 1
5120: ST_TO_ADDR
// uc_nation := nation ;
5121: LD_ADDR_OWVAR 21
5125: PUSH
5126: LD_VAR 0 2
5130: ST_TO_ADDR
// hc_name := mp_sides_players_names [ side ] ;
5131: LD_ADDR_OWVAR 26
5135: PUSH
5136: LD_OWVAR 19
5140: PUSH
5141: LD_VAR 0 1
5145: ARRAY
5146: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , class , skill + 2 ) ;
5147: LD_INT 1
5149: PPUSH
5150: LD_INT 2
5152: PPUSH
5153: CALL_OW 12
5157: PPUSH
5158: LD_VAR 0 8
5162: PPUSH
5163: LD_VAR 0 4
5167: PUSH
5168: LD_INT 2
5170: PLUS
5171: PPUSH
5172: CALL_OW 380
// hc_importance := 105 ;
5176: LD_ADDR_OWVAR 32
5180: PUSH
5181: LD_INT 105
5183: ST_TO_ADDR
// if Multiplayer then
5184: LD_OWVAR 4
5188: IFFALSE 5228
// begin hc_gallery := MULTIAVATARS ;
5190: LD_ADDR_OWVAR 33
5194: PUSH
5195: LD_STRING MULTIAVATARS
5197: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( side ) ;
5198: LD_ADDR_OWVAR 34
5202: PUSH
5203: LD_VAR 0 1
5207: PPUSH
5208: CALL_OW 525
5212: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( side ) ;
5213: LD_ADDR_OWVAR 27
5217: PUSH
5218: LD_VAR 0 1
5222: PPUSH
5223: CALL_OW 526
5227: ST_TO_ADDR
// end ; result := Join ( result , CreateHuman ) ;
5228: LD_ADDR_VAR 0 5
5232: PUSH
5233: LD_VAR 0 5
5237: PPUSH
5238: CALL_OW 44
5242: PPUSH
5243: CALL 47594 0 2
5247: ST_TO_ADDR
// if mpTeamPreset then
5248: LD_LOC 1
5252: IFFALSE 5348
// begin CopySkills ( mpTeamPreset [ 1 ] , result [ result ] ) ;
5254: LD_LOC 1
5258: PUSH
5259: LD_INT 1
5261: ARRAY
5262: PPUSH
5263: LD_VAR 0 5
5267: PUSH
5268: LD_VAR 0 5
5272: ARRAY
5273: PPUSH
5274: CALL_OW 510
// SetAttr ( result [ result ] , attr_stamina , GetAttr ( mpTeamPreset [ 1 ] , attr_stamina ) ) ;
5278: LD_VAR 0 5
5282: PUSH
5283: LD_VAR 0 5
5287: ARRAY
5288: PPUSH
5289: LD_INT 1
5291: PPUSH
5292: LD_LOC 1
5296: PUSH
5297: LD_INT 1
5299: ARRAY
5300: PPUSH
5301: LD_INT 1
5303: PPUSH
5304: CALL_OW 260
5308: PPUSH
5309: CALL_OW 239
// SetAttr ( result [ result ] , attr_speed , GetAttr ( mpTeamPreset [ 1 ] , attr_speed ) ) ;
5313: LD_VAR 0 5
5317: PUSH
5318: LD_VAR 0 5
5322: ARRAY
5323: PPUSH
5324: LD_INT 2
5326: PPUSH
5327: LD_LOC 1
5331: PUSH
5332: LD_INT 1
5334: ARRAY
5335: PPUSH
5336: LD_INT 2
5338: PPUSH
5339: CALL_OW 260
5343: PPUSH
5344: CALL_OW 239
// end ; InitHc_All ( ) ;
5348: CALL_OW 584
// class := 2 ;
5352: LD_ADDR_VAR 0 8
5356: PUSH
5357: LD_INT 2
5359: ST_TO_ADDR
// for i := 1 to ( amount - 1 ) do
5360: LD_ADDR_VAR 0 6
5364: PUSH
5365: DOUBLE
5366: LD_INT 1
5368: DEC
5369: ST_TO_ADDR
5370: LD_VAR 0 3
5374: PUSH
5375: LD_INT 1
5377: MINUS
5378: PUSH
5379: FOR_TO
5380: IFFALSE 5564
// begin PrepareHuman ( false , class , skill ) ;
5382: LD_INT 0
5384: PPUSH
5385: LD_VAR 0 8
5389: PPUSH
5390: LD_VAR 0 4
5394: PPUSH
5395: CALL_OW 380
// un := CreateHuman ;
5399: LD_ADDR_VAR 0 7
5403: PUSH
5404: CALL_OW 44
5408: ST_TO_ADDR
// result := Join ( result , un ) ;
5409: LD_ADDR_VAR 0 5
5413: PUSH
5414: LD_VAR 0 5
5418: PPUSH
5419: LD_VAR 0 7
5423: PPUSH
5424: CALL 47594 0 2
5428: ST_TO_ADDR
// if mpTeamPreset then
5429: LD_LOC 1
5433: IFFALSE 5529
// begin CopySkills ( mpTeamPreset [ i + 1 ] , un ) ;
5435: LD_LOC 1
5439: PUSH
5440: LD_VAR 0 6
5444: PUSH
5445: LD_INT 1
5447: PLUS
5448: ARRAY
5449: PPUSH
5450: LD_VAR 0 7
5454: PPUSH
5455: CALL_OW 510
// SetAttr ( un , attr_stamina , GetAttr ( mpTeamPreset [ i + 1 ] , attr_stamina ) ) ;
5459: LD_VAR 0 7
5463: PPUSH
5464: LD_INT 1
5466: PPUSH
5467: LD_LOC 1
5471: PUSH
5472: LD_VAR 0 6
5476: PUSH
5477: LD_INT 1
5479: PLUS
5480: ARRAY
5481: PPUSH
5482: LD_INT 1
5484: PPUSH
5485: CALL_OW 260
5489: PPUSH
5490: CALL_OW 239
// SetAttr ( un , attr_speed , GetAttr ( mpTeamPreset [ i + 1 ] , attr_speed ) ) ;
5494: LD_VAR 0 7
5498: PPUSH
5499: LD_INT 2
5501: PPUSH
5502: LD_LOC 1
5506: PUSH
5507: LD_VAR 0 6
5511: PUSH
5512: LD_INT 1
5514: PLUS
5515: ARRAY
5516: PPUSH
5517: LD_INT 2
5519: PPUSH
5520: CALL_OW 260
5524: PPUSH
5525: CALL_OW 239
// end ; class := Inc ( class ) ;
5529: LD_ADDR_VAR 0 8
5533: PUSH
5534: LD_VAR 0 8
5538: PPUSH
5539: CALL 48955 0 1
5543: ST_TO_ADDR
// if class = 5 then
5544: LD_VAR 0 8
5548: PUSH
5549: LD_INT 5
5551: EQUAL
5552: IFFALSE 5562
// class := 1 ;
5554: LD_ADDR_VAR 0 8
5558: PUSH
5559: LD_INT 1
5561: ST_TO_ADDR
// end ;
5562: GO 5379
5564: POP
5565: POP
// if not mpTeamPreset then
5566: LD_LOC 1
5570: NOT
5571: IFFALSE 5583
// mpTeamPreset := result ;
5573: LD_ADDR_LOC 1
5577: PUSH
5578: LD_VAR 0 5
5582: ST_TO_ADDR
// end ;
5583: LD_VAR 0 5
5587: RET
// function mpPrepareVehicles ( side , nation , vehicles ) ; var i ; begin
5588: LD_INT 0
5590: PPUSH
5591: PPUSH
// result := [ ] ;
5592: LD_ADDR_VAR 0 4
5596: PUSH
5597: EMPTY
5598: ST_TO_ADDR
// if not vehicles then
5599: LD_VAR 0 3
5603: NOT
5604: IFFALSE 5608
// exit ;
5606: GO 5767
// for i := 1 to vehicles [ nation ] do
5608: LD_ADDR_VAR 0 5
5612: PUSH
5613: DOUBLE
5614: LD_INT 1
5616: DEC
5617: ST_TO_ADDR
5618: LD_VAR 0 3
5622: PUSH
5623: LD_VAR 0 2
5627: ARRAY
5628: PUSH
5629: FOR_TO
5630: IFFALSE 5765
// begin uc_side := side ;
5632: LD_ADDR_OWVAR 20
5636: PUSH
5637: LD_VAR 0 1
5641: ST_TO_ADDR
// uc_nation := nation ;
5642: LD_ADDR_OWVAR 21
5646: PUSH
5647: LD_VAR 0 2
5651: ST_TO_ADDR
// PrepareVehicle ( vehicles [ nation ] [ i ] [ 1 ] , vehicles [ nation ] [ i ] [ 2 ] , vehicles [ nation ] [ i ] [ 3 ] , vehicles [ nation ] [ i ] [ 4 ] , 80 ) ;
5652: LD_VAR 0 3
5656: PUSH
5657: LD_VAR 0 2
5661: ARRAY
5662: PUSH
5663: LD_VAR 0 5
5667: ARRAY
5668: PUSH
5669: LD_INT 1
5671: ARRAY
5672: PPUSH
5673: LD_VAR 0 3
5677: PUSH
5678: LD_VAR 0 2
5682: ARRAY
5683: PUSH
5684: LD_VAR 0 5
5688: ARRAY
5689: PUSH
5690: LD_INT 2
5692: ARRAY
5693: PPUSH
5694: LD_VAR 0 3
5698: PUSH
5699: LD_VAR 0 2
5703: ARRAY
5704: PUSH
5705: LD_VAR 0 5
5709: ARRAY
5710: PUSH
5711: LD_INT 3
5713: ARRAY
5714: PPUSH
5715: LD_VAR 0 3
5719: PUSH
5720: LD_VAR 0 2
5724: ARRAY
5725: PUSH
5726: LD_VAR 0 5
5730: ARRAY
5731: PUSH
5732: LD_INT 4
5734: ARRAY
5735: PPUSH
5736: LD_INT 80
5738: PPUSH
5739: CALL 14723 0 5
// result := Join ( result , CreateVehicle ) ;
5743: LD_ADDR_VAR 0 4
5747: PUSH
5748: LD_VAR 0 4
5752: PPUSH
5753: CALL_OW 45
5757: PPUSH
5758: CALL 47594 0 2
5762: ST_TO_ADDR
// end ;
5763: GO 5629
5765: POP
5766: POP
// end ;
5767: LD_VAR 0 4
5771: RET
// function mpUpdateFlags ( strength ) ; var i ; begin
5772: LD_INT 0
5774: PPUSH
5775: PPUSH
// for i in mpBattleFlags do
5776: LD_ADDR_VAR 0 3
5780: PUSH
5781: LD_EXP 23
5785: PUSH
5786: FOR_IN
5787: IFFALSE 5864
// ChangeBattleFlagOptions ( i , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength * 0.7 ] , [ bfo_defend_bonus_building , strength * 0.4 ] , [ bfo_height , strength ] ] ) ;
5789: LD_VAR 0 3
5793: PPUSH
5794: LD_INT 1
5796: PUSH
5797: LD_VAR 0 1
5801: PUSH
5802: EMPTY
5803: LIST
5804: LIST
5805: PUSH
5806: LD_INT 2
5808: PUSH
5809: LD_VAR 0 1
5813: PUSH
5814: LD_REAL  7.00000000000000E-0001
5817: MUL
5818: PUSH
5819: EMPTY
5820: LIST
5821: LIST
5822: PUSH
5823: LD_INT 3
5825: PUSH
5826: LD_VAR 0 1
5830: PUSH
5831: LD_REAL  4.00000000000000E-0001
5834: MUL
5835: PUSH
5836: EMPTY
5837: LIST
5838: LIST
5839: PUSH
5840: LD_INT 20
5842: PUSH
5843: LD_VAR 0 1
5847: PUSH
5848: EMPTY
5849: LIST
5850: LIST
5851: PUSH
5852: EMPTY
5853: LIST
5854: LIST
5855: LIST
5856: LIST
5857: PPUSH
5858: CALL_OW 423
5862: GO 5786
5864: POP
5865: POP
// end ;
5866: LD_VAR 0 2
5870: RET
// every 0 0$1 trigger mpActive do var i , strength ;
5871: LD_INT 100
5873: IFFALSE 5968
5875: GO 5877
5877: DISABLE
5878: LD_INT 0
5880: PPUSH
5881: PPUSH
// begin if mpBattleFlag <= 0 then
5882: LD_EXP 22
5886: PUSH
5887: LD_INT 0
5889: LESSEQUAL
5890: IFFALSE 5894
// exit ;
5892: GO 5968
// strength := 100 ;
5894: LD_ADDR_VAR 0 2
5898: PUSH
5899: LD_INT 100
5901: ST_TO_ADDR
// repeat wait ( mpBattleFlag ) ;
5902: LD_EXP 22
5906: PPUSH
5907: CALL_OW 67
// strength := Dec ( strength ) ;
5911: LD_ADDR_VAR 0 2
5915: PUSH
5916: LD_VAR 0 2
5920: PPUSH
5921: CALL 48977 0 1
5925: ST_TO_ADDR
// mpUpdateFlags ( strength ) ;
5926: LD_VAR 0 2
5930: PPUSH
5931: CALL 5772 0 1
// until not strength ;
5935: LD_VAR 0 2
5939: NOT
5940: IFFALSE 5902
// for i in mpBattleFlags do
5942: LD_ADDR_VAR 0 1
5946: PUSH
5947: LD_EXP 23
5951: PUSH
5952: FOR_IN
5953: IFFALSE 5966
// KillBattleFlag ( i ) ;
5955: LD_VAR 0 1
5959: PPUSH
5960: CALL_OW 419
5964: GO 5952
5966: POP
5967: POP
// end ;
5968: PPOPN 2
5970: END
// every 0 0$1 marked mpActive do var side , tmp ;
5971: GO 5973
5973: DISABLE
5974: LD_INT 0
5976: PPUSH
5977: PPUSH
// begin if mpSibBomb <= 1 then
5978: LD_EXP 28
5982: PUSH
5983: LD_INT 1
5985: LESSEQUAL
5986: IFFALSE 5990
// exit ;
5988: GO 6063
// tmp := mpSibBomb ;
5990: LD_ADDR_VAR 0 2
5994: PUSH
5995: LD_EXP 28
5999: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
6000: LD_INT 35
6002: PPUSH
6003: CALL_OW 67
// tmp := tmp - 0 0$1 ;
6007: LD_ADDR_VAR 0 2
6011: PUSH
6012: LD_VAR 0 2
6016: PUSH
6017: LD_INT 35
6019: MINUS
6020: ST_TO_ADDR
// until not tmp ;
6021: LD_VAR 0 2
6025: NOT
6026: IFFALSE 6000
// for side := 1 to 8 do
6028: LD_ADDR_VAR 0 1
6032: PUSH
6033: DOUBLE
6034: LD_INT 1
6036: DEC
6037: ST_TO_ADDR
6038: LD_INT 8
6040: PUSH
6041: FOR_TO
6042: IFFALSE 6061
// SetTech ( tech_SibFiss , side , state_enabled ) ;
6044: LD_INT 25
6046: PPUSH
6047: LD_VAR 0 1
6051: PPUSH
6052: LD_INT 1
6054: PPUSH
6055: CALL_OW 322
6059: GO 6041
6061: POP
6062: POP
// end ;
6063: PPOPN 2
6065: END
// export mpBuildUpTimeDelay , mpBuildUpTimeActive ; function BeginBuildUp ; var i , j ; begin
6066: LD_INT 0
6068: PPUSH
6069: PPUSH
6070: PPUSH
// mpBuildUpTimeDelay := 0 ;
6071: LD_ADDR_EXP 46
6075: PUSH
6076: LD_INT 0
6078: ST_TO_ADDR
// if not mpBuildUpTime then
6079: LD_EXP 20
6083: NOT
6084: IFFALSE 6088
// exit ;
6086: GO 6271
// mpBuildUpTimeDelay := 4 4$00 + 1 1$00 * mpBuildUpTime ;
6088: LD_ADDR_EXP 46
6092: PUSH
6093: LD_INT 8400
6095: PUSH
6096: LD_INT 2100
6098: PUSH
6099: LD_EXP 20
6103: MUL
6104: PLUS
6105: ST_TO_ADDR
// mpBuildUpTimeActive := true ;
6106: LD_ADDR_EXP 47
6110: PUSH
6111: LD_INT 1
6113: ST_TO_ADDR
// for i := 1 to 8 do
6114: LD_ADDR_VAR 0 2
6118: PUSH
6119: DOUBLE
6120: LD_INT 1
6122: DEC
6123: ST_TO_ADDR
6124: LD_INT 8
6126: PUSH
6127: FOR_TO
6128: IFFALSE 6269
// if mpSidePositions [ i ] then
6130: LD_EXP 7
6134: PUSH
6135: LD_VAR 0 2
6139: ARRAY
6140: IFFALSE 6267
// begin SetAreaMapShow ( mpBuildUpAreas [ mpSidePositions [ i ] ] , 5 ) ;
6142: LD_EXP 19
6146: PUSH
6147: LD_EXP 7
6151: PUSH
6152: LD_VAR 0 2
6156: ARRAY
6157: ARRAY
6158: PPUSH
6159: LD_INT 5
6161: PPUSH
6162: CALL_OW 424
// for j := 1 to 8 do
6166: LD_ADDR_VAR 0 3
6170: PUSH
6171: DOUBLE
6172: LD_INT 1
6174: DEC
6175: ST_TO_ADDR
6176: LD_INT 8
6178: PUSH
6179: FOR_TO
6180: IFFALSE 6265
// if mpSidePositions [ j ] and ( ( mpSideTeams [ i ] <> mpSideTeams [ j ] ) or ( not mpTeamGame ) and ( i <> j ) ) then
6182: LD_EXP 7
6186: PUSH
6187: LD_VAR 0 3
6191: ARRAY
6192: PUSH
6193: LD_EXP 8
6197: PUSH
6198: LD_VAR 0 2
6202: ARRAY
6203: PUSH
6204: LD_EXP 8
6208: PUSH
6209: LD_VAR 0 3
6213: ARRAY
6214: NONEQUAL
6215: PUSH
6216: LD_EXP 11
6220: NOT
6221: PUSH
6222: LD_VAR 0 2
6226: PUSH
6227: LD_VAR 0 3
6231: NONEQUAL
6232: AND
6233: OR
6234: AND
6235: IFFALSE 6263
// HideArea ( j , mpBuildUpAreas [ mpSidePositions [ i ] ] ) ;
6237: LD_VAR 0 3
6241: PPUSH
6242: LD_EXP 19
6246: PUSH
6247: LD_EXP 7
6251: PUSH
6252: LD_VAR 0 2
6256: ARRAY
6257: ARRAY
6258: PPUSH
6259: CALL_OW 333
6263: GO 6179
6265: POP
6266: POP
// end ;
6267: GO 6127
6269: POP
6270: POP
// end ;
6271: LD_VAR 0 1
6275: RET
// function EndBuildUp ; var i , j ; begin
6276: LD_INT 0
6278: PPUSH
6279: PPUSH
6280: PPUSH
// mpBuildUpTimeActive := false ;
6281: LD_ADDR_EXP 47
6285: PUSH
6286: LD_INT 0
6288: ST_TO_ADDR
// for i := 1 to 8 do
6289: LD_ADDR_VAR 0 2
6293: PUSH
6294: DOUBLE
6295: LD_INT 1
6297: DEC
6298: ST_TO_ADDR
6299: LD_INT 8
6301: PUSH
6302: FOR_TO
6303: IFFALSE 6444
// if mpSidePositions [ i ] then
6305: LD_EXP 7
6309: PUSH
6310: LD_VAR 0 2
6314: ARRAY
6315: IFFALSE 6442
// begin SetAreaMapShow ( mpBuildUpAreas [ mpSidePositions [ i ] ] , 0 ) ;
6317: LD_EXP 19
6321: PUSH
6322: LD_EXP 7
6326: PUSH
6327: LD_VAR 0 2
6331: ARRAY
6332: ARRAY
6333: PPUSH
6334: LD_INT 0
6336: PPUSH
6337: CALL_OW 424
// for j := 1 to 8 do
6341: LD_ADDR_VAR 0 3
6345: PUSH
6346: DOUBLE
6347: LD_INT 1
6349: DEC
6350: ST_TO_ADDR
6351: LD_INT 8
6353: PUSH
6354: FOR_TO
6355: IFFALSE 6440
// if mpSidePositions [ j ] and ( ( mpSideTeams [ i ] <> mpSideTeams [ j ] ) or ( not mpTeamGame ) and ( i <> j ) ) then
6357: LD_EXP 7
6361: PUSH
6362: LD_VAR 0 3
6366: ARRAY
6367: PUSH
6368: LD_EXP 8
6372: PUSH
6373: LD_VAR 0 2
6377: ARRAY
6378: PUSH
6379: LD_EXP 8
6383: PUSH
6384: LD_VAR 0 3
6388: ARRAY
6389: NONEQUAL
6390: PUSH
6391: LD_EXP 11
6395: NOT
6396: PUSH
6397: LD_VAR 0 2
6401: PUSH
6402: LD_VAR 0 3
6406: NONEQUAL
6407: AND
6408: OR
6409: AND
6410: IFFALSE 6438
// ShowArea ( j , mpBuildUpAreas [ mpSidePositions [ i ] ] ) ;
6412: LD_VAR 0 3
6416: PPUSH
6417: LD_EXP 19
6421: PUSH
6422: LD_EXP 7
6426: PUSH
6427: LD_VAR 0 2
6431: ARRAY
6432: ARRAY
6433: PPUSH
6434: CALL_OW 334
6438: GO 6354
6440: POP
6441: POP
// end ;
6442: GO 6302
6444: POP
6445: POP
// end ;
6446: LD_VAR 0 1
6450: RET
// every 5 trigger mpBuildUpTimeActive marked mpActive do var i , un ;
6451: LD_EXP 47
6455: IFFALSE 6630
6457: GO 6459
6459: DISABLE
6460: LD_INT 0
6462: PPUSH
6463: PPUSH
// begin for i := 1 to 8 do
6464: LD_ADDR_VAR 0 1
6468: PUSH
6469: DOUBLE
6470: LD_INT 1
6472: DEC
6473: ST_TO_ADDR
6474: LD_INT 8
6476: PUSH
6477: FOR_TO
6478: IFFALSE 6627
// if mpSidePositions [ i ] then
6480: LD_EXP 7
6484: PUSH
6485: LD_VAR 0 1
6489: ARRAY
6490: IFFALSE 6625
// for un in FilterUnitsInArea ( mpBuildUpAreas [ mpSidePositions [ i ] ] , [ [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] , [ f_side , your_side ] ] ) do
6492: LD_ADDR_VAR 0 2
6496: PUSH
6497: LD_EXP 19
6501: PUSH
6502: LD_EXP 7
6506: PUSH
6507: LD_VAR 0 1
6511: ARRAY
6512: ARRAY
6513: PPUSH
6514: LD_INT 2
6516: PUSH
6517: LD_INT 21
6519: PUSH
6520: LD_INT 1
6522: PUSH
6523: EMPTY
6524: LIST
6525: LIST
6526: PUSH
6527: LD_INT 21
6529: PUSH
6530: LD_INT 2
6532: PUSH
6533: EMPTY
6534: LIST
6535: LIST
6536: PUSH
6537: EMPTY
6538: LIST
6539: LIST
6540: LIST
6541: PUSH
6542: LD_INT 22
6544: PUSH
6545: LD_OWVAR 2
6549: PUSH
6550: EMPTY
6551: LIST
6552: LIST
6553: PUSH
6554: EMPTY
6555: LIST
6556: LIST
6557: PPUSH
6558: CALL_OW 70
6562: PUSH
6563: FOR_IN
6564: IFFALSE 6623
// if ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) or ( not mpTeamGame ) and ( i <> your_side ) ) then
6566: LD_EXP 8
6570: PUSH
6571: LD_VAR 0 1
6575: ARRAY
6576: PUSH
6577: LD_EXP 8
6581: PUSH
6582: LD_OWVAR 2
6586: ARRAY
6587: NONEQUAL
6588: PUSH
6589: LD_EXP 11
6593: NOT
6594: PUSH
6595: LD_VAR 0 1
6599: PUSH
6600: LD_OWVAR 2
6604: NONEQUAL
6605: AND
6606: OR
6607: IFFALSE 6621
// ComMoveToArea ( un , BuildUpEscape ) ;
6609: LD_VAR 0 2
6613: PPUSH
6614: LD_INT 52
6616: PPUSH
6617: CALL_OW 113
6621: GO 6563
6623: POP
6624: POP
6625: GO 6477
6627: POP
6628: POP
// enable ;
6629: ENABLE
// end ;
6630: PPOPN 2
6632: END
// every 0 0$1 trigger mpBuildUpTime marked mpActive do var tmp ;
6633: LD_EXP 20
6637: IFFALSE 6687
6639: GO 6641
6641: DISABLE
6642: LD_INT 0
6644: PPUSH
// begin tmp := mpBuildUpTime ;
6645: LD_ADDR_VAR 0 1
6649: PUSH
6650: LD_EXP 20
6654: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
6655: LD_INT 35
6657: PPUSH
6658: CALL_OW 67
// tmp := tmp - 0 0$1 ;
6662: LD_ADDR_VAR 0 1
6666: PUSH
6667: LD_VAR 0 1
6671: PUSH
6672: LD_INT 35
6674: MINUS
6675: ST_TO_ADDR
// until not tmp ;
6676: LD_VAR 0 1
6680: NOT
6681: IFFALSE 6655
// EndBuildUp ;
6683: CALL 6276 0 0
// end ;
6687: PPOPN 1
6689: END
// every 0 0$1 trigger mpActive marked mpWin do
6690: LD_INT 100
6692: IFFALSE 6726
6694: GO 6696
6696: DISABLE
// begin if IAmServer then
6697: CALL_OW 518
6701: IFFALSE 6710
// wait ( 0 0$3 ) ;
6703: LD_INT 105
6705: PPUSH
6706: CALL_OW 67
// if Multiplayer then
6710: LD_OWVAR 4
6714: IFFALSE 6722
// YouWinInMultiplayer else
6716: CALL_OW 106
6720: GO 6726
// YouWin ;
6722: CALL_OW 103
// end ;
6726: END
// export function HasPowerByGameType ( gameType , side ) ; begin
6727: LD_INT 0
6729: PPUSH
// result := false ;
6730: LD_ADDR_VAR 0 3
6734: PUSH
6735: LD_INT 0
6737: ST_TO_ADDR
// case gameType of GameTypeNormal , GameTypeFamine :
6738: LD_VAR 0 1
6742: PUSH
6743: LD_INT 1
6745: DOUBLE
6746: EQUAL
6747: IFTRUE 6757
6749: LD_INT 5
6751: DOUBLE
6752: EQUAL
6753: IFTRUE 6757
6755: GO 6830
6757: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) ;
6758: LD_ADDR_VAR 0 3
6762: PUSH
6763: LD_INT 22
6765: PUSH
6766: LD_VAR 0 2
6770: PUSH
6771: EMPTY
6772: LIST
6773: LIST
6774: PUSH
6775: LD_INT 2
6777: PUSH
6778: LD_INT 21
6780: PUSH
6781: LD_INT 1
6783: PUSH
6784: EMPTY
6785: LIST
6786: LIST
6787: PUSH
6788: LD_INT 33
6790: PUSH
6791: LD_INT 3
6793: PUSH
6794: EMPTY
6795: LIST
6796: LIST
6797: PUSH
6798: LD_INT 33
6800: PUSH
6801: LD_INT 5
6803: PUSH
6804: EMPTY
6805: LIST
6806: LIST
6807: PUSH
6808: EMPTY
6809: LIST
6810: LIST
6811: LIST
6812: LIST
6813: PUSH
6814: EMPTY
6815: LIST
6816: LIST
6817: PPUSH
6818: CALL_OW 69
6822: PPUSH
6823: CALL 11985 0 1
6827: ST_TO_ADDR
// end ; GameTypeSurvival :
6828: GO 7065
6830: LD_INT 2
6832: DOUBLE
6833: EQUAL
6834: IFTRUE 6838
6836: GO 6966
6838: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ) and Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) ;
6839: LD_ADDR_VAR 0 3
6843: PUSH
6844: LD_INT 22
6846: PUSH
6847: LD_VAR 0 2
6851: PUSH
6852: EMPTY
6853: LIST
6854: LIST
6855: PUSH
6856: LD_INT 2
6858: PUSH
6859: LD_INT 30
6861: PUSH
6862: LD_INT 0
6864: PUSH
6865: EMPTY
6866: LIST
6867: LIST
6868: PUSH
6869: LD_INT 30
6871: PUSH
6872: LD_INT 1
6874: PUSH
6875: EMPTY
6876: LIST
6877: LIST
6878: PUSH
6879: EMPTY
6880: LIST
6881: LIST
6882: LIST
6883: PUSH
6884: EMPTY
6885: LIST
6886: LIST
6887: PPUSH
6888: CALL_OW 69
6892: PPUSH
6893: CALL 11985 0 1
6897: PUSH
6898: LD_INT 22
6900: PUSH
6901: LD_VAR 0 2
6905: PUSH
6906: EMPTY
6907: LIST
6908: LIST
6909: PUSH
6910: LD_INT 2
6912: PUSH
6913: LD_INT 21
6915: PUSH
6916: LD_INT 1
6918: PUSH
6919: EMPTY
6920: LIST
6921: LIST
6922: PUSH
6923: LD_INT 33
6925: PUSH
6926: LD_INT 3
6928: PUSH
6929: EMPTY
6930: LIST
6931: LIST
6932: PUSH
6933: LD_INT 33
6935: PUSH
6936: LD_INT 5
6938: PUSH
6939: EMPTY
6940: LIST
6941: LIST
6942: PUSH
6943: EMPTY
6944: LIST
6945: LIST
6946: LIST
6947: LIST
6948: PUSH
6949: EMPTY
6950: LIST
6951: LIST
6952: PPUSH
6953: CALL_OW 69
6957: PPUSH
6958: CALL 11985 0 1
6962: AND
6963: ST_TO_ADDR
// end ; GameTypeKing :
6964: GO 7065
6966: LD_INT 3
6968: DOUBLE
6969: EQUAL
6970: IFTRUE 6974
6972: GO 7064
6974: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) and HowMuchPointsKing ( side ) < mpPoints ;
6975: LD_ADDR_VAR 0 3
6979: PUSH
6980: LD_INT 22
6982: PUSH
6983: LD_VAR 0 2
6987: PUSH
6988: EMPTY
6989: LIST
6990: LIST
6991: PUSH
6992: LD_INT 2
6994: PUSH
6995: LD_INT 21
6997: PUSH
6998: LD_INT 1
7000: PUSH
7001: EMPTY
7002: LIST
7003: LIST
7004: PUSH
7005: LD_INT 33
7007: PUSH
7008: LD_INT 3
7010: PUSH
7011: EMPTY
7012: LIST
7013: LIST
7014: PUSH
7015: LD_INT 33
7017: PUSH
7018: LD_INT 5
7020: PUSH
7021: EMPTY
7022: LIST
7023: LIST
7024: PUSH
7025: EMPTY
7026: LIST
7027: LIST
7028: LIST
7029: LIST
7030: PUSH
7031: EMPTY
7032: LIST
7033: LIST
7034: PPUSH
7035: CALL_OW 69
7039: PPUSH
7040: CALL 11985 0 1
7044: PUSH
7045: LD_VAR 0 2
7049: PPUSH
7050: CALL 59230 0 1
7054: PUSH
7055: LD_EXP 35
7059: LESS
7060: AND
7061: ST_TO_ADDR
// end ; end ;
7062: GO 7065
7064: POP
// end ;
7065: LD_VAR 0 3
7069: RET
// every 0 0$1 trigger mpActive marked mpLose do var gameIsOn , i ;
7070: LD_INT 100
7072: IFFALSE 7294
7074: GO 7076
7076: DISABLE
7077: LD_INT 0
7079: PPUSH
7080: PPUSH
// begin if Multiplayer then
7081: LD_OWVAR 4
7085: IFFALSE 7093
// SetPlayerSpectator ( ) else
7087: CALL_OW 572
7091: GO 7102
// FogOff ( your_side ) ;
7093: LD_OWVAR 2
7097: PPUSH
7098: CALL_OW 344
// repeat gameIsOn := false ;
7102: LD_ADDR_VAR 0 1
7106: PUSH
7107: LD_INT 0
7109: ST_TO_ADDR
// for i := 1 to 8 do
7110: LD_ADDR_VAR 0 2
7114: PUSH
7115: DOUBLE
7116: LD_INT 1
7118: DEC
7119: ST_TO_ADDR
7120: LD_INT 8
7122: PUSH
7123: FOR_TO
7124: IFFALSE 7246
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
7126: LD_EXP 7
7130: PUSH
7131: LD_VAR 0 2
7135: ARRAY
7136: PUSH
7137: LD_VAR 0 2
7141: PPUSH
7142: CALL_OW 108
7146: AND
7147: PUSH
7148: LD_VAR 0 2
7152: PUSH
7153: LD_OWVAR 2
7157: NONEQUAL
7158: AND
7159: IFFALSE 7244
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
7161: LD_EXP 8
7165: PUSH
7166: LD_VAR 0 2
7170: ARRAY
7171: NOT
7172: PUSH
7173: LD_EXP 8
7177: PUSH
7178: LD_VAR 0 2
7182: ARRAY
7183: PUSH
7184: LD_EXP 8
7188: PUSH
7189: LD_OWVAR 2
7193: ARRAY
7194: NONEQUAL
7195: PUSH
7196: LD_OWVAR 2
7200: PPUSH
7201: LD_VAR 0 2
7205: PPUSH
7206: CALL_OW 81
7210: PUSH
7211: LD_INT 1
7213: NONEQUAL
7214: AND
7215: OR
7216: IFFALSE 7244
// if HasPowerByGameType ( mpGameType , i ) then
7218: LD_EXP 3
7222: PPUSH
7223: LD_VAR 0 2
7227: PPUSH
7228: CALL 6727 0 2
7232: IFFALSE 7244
// begin gameIsOn := true ;
7234: LD_ADDR_VAR 0 1
7238: PUSH
7239: LD_INT 1
7241: ST_TO_ADDR
// break ;
7242: GO 7246
// end ;
7244: GO 7123
7246: POP
7247: POP
// wait ( 100 ) ;
7248: LD_INT 100
7250: PPUSH
7251: CALL_OW 67
// until not gameIsOn ;
7255: LD_VAR 0 1
7259: NOT
7260: IFFALSE 7102
// if IAmServer then
7262: CALL_OW 518
7266: IFFALSE 7275
// wait ( 0 0$3 ) ;
7268: LD_INT 105
7270: PPUSH
7271: CALL_OW 67
// if Multiplayer then
7275: LD_OWVAR 4
7279: IFFALSE 7287
// YouLostInMultiplayer else
7281: CALL_OW 107
7285: GO 7294
// YouLost (  ) ;
7287: LD_STRING 
7289: PPUSH
7290: CALL_OW 104
// end ;
7294: PPOPN 2
7296: END
// every 0 0$10 trigger mpRespawn marked mpActive do var i , j , tmp , spawn , sides ;
7297: LD_EXP 33
7301: IFFALSE 7677
7303: GO 7305
7305: DISABLE
7306: LD_INT 0
7308: PPUSH
7309: PPUSH
7310: PPUSH
7311: PPUSH
7312: PPUSH
// begin sides := [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 ] ;
7313: LD_ADDR_VAR 0 5
7317: PUSH
7318: LD_INT 1
7320: PUSH
7321: LD_INT 2
7323: PUSH
7324: LD_INT 3
7326: PUSH
7327: LD_INT 4
7329: PUSH
7330: LD_INT 5
7332: PUSH
7333: LD_INT 6
7335: PUSH
7336: LD_INT 7
7338: PUSH
7339: LD_INT 8
7341: PUSH
7342: EMPTY
7343: LIST
7344: LIST
7345: LIST
7346: LIST
7347: LIST
7348: LIST
7349: LIST
7350: LIST
7351: ST_TO_ADDR
// repeat wait ( 0 0$10 ) ;
7352: LD_INT 350
7354: PPUSH
7355: CALL_OW 67
// for i := 1 to 8 do
7359: LD_ADDR_VAR 0 1
7363: PUSH
7364: DOUBLE
7365: LD_INT 1
7367: DEC
7368: ST_TO_ADDR
7369: LD_INT 8
7371: PUSH
7372: FOR_TO
7373: IFFALSE 7647
// begin j := sides [ i ] ;
7375: LD_ADDR_VAR 0 2
7379: PUSH
7380: LD_VAR 0 5
7384: PUSH
7385: LD_VAR 0 1
7389: ARRAY
7390: ST_TO_ADDR
// if Count ( mpRespawnPull [ j ] ) and MultiplayerSideAlive ( j ) and HasPowerByGameType ( mpGameType , j ) then
7391: LD_EXP 40
7395: PUSH
7396: LD_VAR 0 2
7400: ARRAY
7401: PPUSH
7402: CALL 11985 0 1
7406: PUSH
7407: LD_VAR 0 2
7411: PPUSH
7412: CALL_OW 108
7416: AND
7417: PUSH
7418: LD_EXP 3
7422: PPUSH
7423: LD_VAR 0 2
7427: PPUSH
7428: CALL 6727 0 2
7432: AND
7433: IFFALSE 7645
// begin wait ( mpRespawn div 3 ) ;
7435: LD_EXP 33
7439: PUSH
7440: LD_INT 3
7442: DIV
7443: PPUSH
7444: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , j ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
7448: LD_ADDR_VAR 0 3
7452: PUSH
7453: LD_INT 22
7455: PUSH
7456: LD_VAR 0 2
7460: PUSH
7461: EMPTY
7462: LIST
7463: LIST
7464: PUSH
7465: LD_INT 50
7467: PUSH
7468: EMPTY
7469: LIST
7470: PUSH
7471: LD_INT 2
7473: PUSH
7474: LD_INT 30
7476: PUSH
7477: LD_INT 0
7479: PUSH
7480: EMPTY
7481: LIST
7482: LIST
7483: PUSH
7484: LD_INT 30
7486: PUSH
7487: LD_INT 1
7489: PUSH
7490: EMPTY
7491: LIST
7492: LIST
7493: PUSH
7494: EMPTY
7495: LIST
7496: LIST
7497: LIST
7498: PUSH
7499: EMPTY
7500: LIST
7501: LIST
7502: LIST
7503: PPUSH
7504: CALL_OW 69
7508: ST_TO_ADDR
// if not tmp or not MultiplayerSideAlive ( j ) or not HasPowerByGameType ( mpGameType , j ) then
7509: LD_VAR 0 3
7513: NOT
7514: PUSH
7515: LD_VAR 0 2
7519: PPUSH
7520: CALL_OW 108
7524: NOT
7525: OR
7526: PUSH
7527: LD_EXP 3
7531: PPUSH
7532: LD_VAR 0 2
7536: PPUSH
7537: CALL 6727 0 2
7541: NOT
7542: OR
7543: IFFALSE 7547
// continue ;
7545: GO 7372
// spawn := tmp [ 1 ] ;
7547: LD_ADDR_VAR 0 4
7551: PUSH
7552: LD_VAR 0 3
7556: PUSH
7557: LD_INT 1
7559: ARRAY
7560: ST_TO_ADDR
// PlaceUnitXYR ( mpRespawnPull [ j ] [ 1 ] , GetX ( spawn ) , GetY ( spawn ) , 32 , true ) ;
7561: LD_EXP 40
7565: PUSH
7566: LD_VAR 0 2
7570: ARRAY
7571: PUSH
7572: LD_INT 1
7574: ARRAY
7575: PPUSH
7576: LD_VAR 0 4
7580: PPUSH
7581: CALL_OW 250
7585: PPUSH
7586: LD_VAR 0 4
7590: PPUSH
7591: CALL_OW 251
7595: PPUSH
7596: LD_INT 32
7598: PPUSH
7599: LD_INT 1
7601: PPUSH
7602: CALL_OW 50
// mpRespawnPull := Replace ( mpRespawnPull , j , Delete ( mpRespawnPull [ j ] , 1 ) ) ;
7606: LD_ADDR_EXP 40
7610: PUSH
7611: LD_EXP 40
7615: PPUSH
7616: LD_VAR 0 2
7620: PPUSH
7621: LD_EXP 40
7625: PUSH
7626: LD_VAR 0 2
7630: ARRAY
7631: PPUSH
7632: LD_INT 1
7634: PPUSH
7635: CALL_OW 3
7639: PPUSH
7640: CALL_OW 1
7644: ST_TO_ADDR
// end ; end ;
7645: GO 7372
7647: POP
7648: POP
// sides := Reindex ( sides , 1 , 8 , true ) ;
7649: LD_ADDR_VAR 0 5
7653: PUSH
7654: LD_VAR 0 5
7658: PPUSH
7659: LD_INT 1
7661: PPUSH
7662: LD_INT 8
7664: PPUSH
7665: LD_INT 1
7667: PPUSH
7668: CALL 14263 0 4
7672: ST_TO_ADDR
// until false ;
7673: LD_INT 0
7675: IFFALSE 7352
// end ;
7677: PPOPN 5
7679: END
// every 0 0$1 marked mpActive do
7680: GO 7682
7682: DISABLE
// begin enable ;
7683: ENABLE
// if not mpDisplayStrings then
7684: LD_EXP 38
7688: NOT
7689: IFFALSE 7700
// begin display_strings := [ ] ;
7691: LD_ADDR_OWVAR 47
7695: PUSH
7696: EMPTY
7697: ST_TO_ADDR
// exit ;
7698: GO 7710
// end ; display_strings := mpDisplayStrings ;
7700: LD_ADDR_OWVAR 47
7704: PUSH
7705: LD_EXP 38
7709: ST_TO_ADDR
// end ; end_of_file
7710: END
// export function Multiplayer_UnitDestroyed ( un ) ; var i , ape , tag , class , area , nation , side , tmp ; begin
7711: LD_INT 0
7713: PPUSH
7714: PPUSH
7715: PPUSH
7716: PPUSH
7717: PPUSH
7718: PPUSH
7719: PPUSH
7720: PPUSH
7721: PPUSH
// if GetType ( un ) = unit_vehicle then
7722: LD_VAR 0 1
7726: PPUSH
7727: CALL_OW 247
7731: PUSH
7732: LD_INT 2
7734: EQUAL
7735: IFFALSE 7739
// exit ;
7737: GO 8371
// side := GetSide ( un ) ;
7739: LD_ADDR_VAR 0 9
7743: PUSH
7744: LD_VAR 0 1
7748: PPUSH
7749: CALL_OW 255
7753: ST_TO_ADDR
// if mpGameType = GameTypeSurvival then
7754: LD_EXP 3
7758: PUSH
7759: LD_INT 2
7761: EQUAL
7762: IFFALSE 7838
// if GetBType ( un ) in [ b_depot , b_warehouse ] then
7764: LD_VAR 0 1
7768: PPUSH
7769: CALL_OW 266
7773: PUSH
7774: LD_INT 0
7776: PUSH
7777: LD_INT 1
7779: PUSH
7780: EMPTY
7781: LIST
7782: LIST
7783: IN
7784: IFFALSE 7838
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_human ] ] ) do
7786: LD_ADDR_VAR 0 3
7790: PUSH
7791: LD_INT 22
7793: PUSH
7794: LD_VAR 0 9
7798: PUSH
7799: EMPTY
7800: LIST
7801: LIST
7802: PUSH
7803: LD_INT 21
7805: PUSH
7806: LD_INT 1
7808: PUSH
7809: EMPTY
7810: LIST
7811: LIST
7812: PUSH
7813: EMPTY
7814: LIST
7815: LIST
7816: PPUSH
7817: CALL_OW 69
7821: PUSH
7822: FOR_IN
7823: IFFALSE 7836
// KillUnit ( i ) ;
7825: LD_VAR 0 3
7829: PPUSH
7830: CALL_OW 66
7834: GO 7822
7836: POP
7837: POP
// end ; if GetClass ( un ) in [ class_apeman , class_apeman_kamikaze , class_apeman_soldier , class_apeman_engineer ] or GetControl ( un ) = control_apeman then
7838: LD_VAR 0 1
7842: PPUSH
7843: CALL_OW 257
7847: PUSH
7848: LD_INT 12
7850: PUSH
7851: LD_INT 17
7853: PUSH
7854: LD_INT 15
7856: PUSH
7857: LD_INT 16
7859: PUSH
7860: EMPTY
7861: LIST
7862: LIST
7863: LIST
7864: LIST
7865: IN
7866: PUSH
7867: LD_VAR 0 1
7871: PPUSH
7872: CALL_OW 263
7876: PUSH
7877: LD_INT 5
7879: EQUAL
7880: OR
7881: IFFALSE 8100
// begin tag := 0 ;
7883: LD_ADDR_VAR 0 5
7887: PUSH
7888: LD_INT 0
7890: ST_TO_ADDR
// for i := 1 to 8 do
7891: LD_ADDR_VAR 0 3
7895: PUSH
7896: DOUBLE
7897: LD_INT 1
7899: DEC
7900: ST_TO_ADDR
7901: LD_INT 8
7903: PUSH
7904: FOR_TO
7905: IFFALSE 7939
// if un in mpApePosIndex [ i ] then
7907: LD_VAR 0 1
7911: PUSH
7912: LD_EXP 32
7916: PUSH
7917: LD_VAR 0 3
7921: ARRAY
7922: IN
7923: IFFALSE 7937
// begin tag := i ;
7925: LD_ADDR_VAR 0 5
7929: PUSH
7930: LD_VAR 0 3
7934: ST_TO_ADDR
// break ;
7935: GO 7939
// end ;
7937: GO 7904
7939: POP
7940: POP
// if not tag then
7941: LD_VAR 0 5
7945: NOT
7946: IFFALSE 7950
// exit ;
7948: GO 8371
// area := mpApemansArea [ mpSidePositions [ tag ] ] ;
7950: LD_ADDR_VAR 0 7
7954: PUSH
7955: LD_EXP 31
7959: PUSH
7960: LD_EXP 7
7964: PUSH
7965: LD_VAR 0 5
7969: ARRAY
7970: ARRAY
7971: ST_TO_ADDR
// if not area then
7972: LD_VAR 0 7
7976: NOT
7977: IFFALSE 7981
// exit ;
7979: GO 8371
// wait ( 4 4$00 ) ;
7981: LD_INT 8400
7983: PPUSH
7984: CALL_OW 67
// repeat wait ( 10 ) ;
7988: LD_INT 10
7990: PPUSH
7991: CALL_OW 67
// until not mpBlockRespThread ;
7995: LD_EXP 45
7999: NOT
8000: IFFALSE 7988
// mpBlockRespThread := true ;
8002: LD_ADDR_EXP 45
8006: PUSH
8007: LD_INT 1
8009: ST_TO_ADDR
// PrepareApeman ( 0 ) ;
8010: LD_INT 0
8012: PPUSH
8013: CALL 43842 0 1
// ape := CreateHuman ;
8017: LD_ADDR_VAR 0 4
8021: PUSH
8022: CALL_OW 44
8026: ST_TO_ADDR
// mpApePosIndex := Replace ( mpApePosIndex , tag , Join ( mpApePosIndex [ tag ] , ape ) ) ;
8027: LD_ADDR_EXP 32
8031: PUSH
8032: LD_EXP 32
8036: PPUSH
8037: LD_VAR 0 5
8041: PPUSH
8042: LD_EXP 32
8046: PUSH
8047: LD_VAR 0 5
8051: ARRAY
8052: PPUSH
8053: LD_VAR 0 4
8057: PPUSH
8058: CALL 47594 0 2
8062: PPUSH
8063: CALL_OW 1
8067: ST_TO_ADDR
// PlaceUnitArea ( ape , area , false ) ;
8068: LD_VAR 0 4
8072: PPUSH
8073: LD_VAR 0 7
8077: PPUSH
8078: LD_INT 0
8080: PPUSH
8081: CALL_OW 49
// wait ( 10 ) ;
8085: LD_INT 10
8087: PPUSH
8088: CALL_OW 67
// mpBlockRespThread := false ;
8092: LD_ADDR_EXP 45
8096: PUSH
8097: LD_INT 0
8099: ST_TO_ADDR
// end ; if GetType ( un ) = unit_human and GetNation ( un ) > nation_nature then
8100: LD_VAR 0 1
8104: PPUSH
8105: CALL_OW 247
8109: PUSH
8110: LD_INT 1
8112: EQUAL
8113: PUSH
8114: LD_VAR 0 1
8118: PPUSH
8119: CALL_OW 248
8123: PUSH
8124: LD_INT 0
8126: GREATER
8127: AND
8128: IFFALSE 8371
// begin if not mpRespawn then
8130: LD_EXP 33
8134: NOT
8135: IFFALSE 8139
// exit ;
8137: GO 8371
// if not MultiplayerSideAlive ( side ) and not HasPowerByGameType ( mpGameType , side ) then
8139: LD_VAR 0 9
8143: PPUSH
8144: CALL_OW 108
8148: NOT
8149: PUSH
8150: LD_EXP 3
8154: PPUSH
8155: LD_VAR 0 9
8159: PPUSH
8160: CALL 6727 0 2
8164: NOT
8165: AND
8166: IFFALSE 8170
// exit ;
8168: GO 8371
// side := GetSide ( un ) ;
8170: LD_ADDR_VAR 0 9
8174: PUSH
8175: LD_VAR 0 1
8179: PPUSH
8180: CALL_OW 255
8184: ST_TO_ADDR
// nation := GetNation ( un ) ;
8185: LD_ADDR_VAR 0 8
8189: PUSH
8190: LD_VAR 0 1
8194: PPUSH
8195: CALL_OW 248
8199: ST_TO_ADDR
// class := GetClass ( un ) ;
8200: LD_ADDR_VAR 0 6
8204: PUSH
8205: LD_VAR 0 1
8209: PPUSH
8210: CALL_OW 257
8214: ST_TO_ADDR
// if class > 4 then
8215: LD_VAR 0 6
8219: PUSH
8220: LD_INT 4
8222: GREATER
8223: IFFALSE 8233
// class := 1 ;
8225: LD_ADDR_VAR 0 6
8229: PUSH
8230: LD_INT 1
8232: ST_TO_ADDR
// repeat wait ( 10 ) ;
8233: LD_INT 10
8235: PPUSH
8236: CALL_OW 67
// until not mpBlockRespThread ;
8240: LD_EXP 45
8244: NOT
8245: IFFALSE 8233
// mpBlockRespThread := true ;
8247: LD_ADDR_EXP 45
8251: PUSH
8252: LD_INT 1
8254: ST_TO_ADDR
// uc_side := side ;
8255: LD_ADDR_OWVAR 20
8259: PUSH
8260: LD_VAR 0 9
8264: ST_TO_ADDR
// uc_nation := nation ;
8265: LD_ADDR_OWVAR 21
8269: PUSH
8270: LD_VAR 0 8
8274: ST_TO_ADDR
// PrepareHuman ( false , class , 2 ) ;
8275: LD_INT 0
8277: PPUSH
8278: LD_VAR 0 6
8282: PPUSH
8283: LD_INT 2
8285: PPUSH
8286: CALL_OW 380
// un := CreateHuman ;
8290: LD_ADDR_VAR 0 1
8294: PUSH
8295: CALL_OW 44
8299: ST_TO_ADDR
// mpRespawnPull := Replace ( mpRespawnPull , side , Replace ( mpRespawnPull [ side ] , mpRespawnPull [ side ] + 1 , un ) ) ;
8300: LD_ADDR_EXP 40
8304: PUSH
8305: LD_EXP 40
8309: PPUSH
8310: LD_VAR 0 9
8314: PPUSH
8315: LD_EXP 40
8319: PUSH
8320: LD_VAR 0 9
8324: ARRAY
8325: PPUSH
8326: LD_EXP 40
8330: PUSH
8331: LD_VAR 0 9
8335: ARRAY
8336: PUSH
8337: LD_INT 1
8339: PLUS
8340: PPUSH
8341: LD_VAR 0 1
8345: PPUSH
8346: CALL_OW 1
8350: PPUSH
8351: CALL_OW 1
8355: ST_TO_ADDR
// wait ( 10 ) ;
8356: LD_INT 10
8358: PPUSH
8359: CALL_OW 67
// mpBlockRespThread := false ;
8363: LD_ADDR_EXP 45
8367: PUSH
8368: LD_INT 0
8370: ST_TO_ADDR
// end ; end ;
8371: LD_VAR 0 2
8375: RET
// export function Multiplayer_BuildingComplete ( building ) ; begin
8376: LD_INT 0
8378: PPUSH
// if GetBType ( building ) in [ b_depot , b_warehouse ] then
8379: LD_VAR 0 1
8383: PPUSH
8384: CALL_OW 266
8388: PUSH
8389: LD_INT 0
8391: PUSH
8392: LD_INT 1
8394: PUSH
8395: EMPTY
8396: LIST
8397: LIST
8398: IN
8399: IFFALSE 8424
// SetBName ( building , @ & GetSide ( building ) ) ;
8401: LD_VAR 0 1
8405: PPUSH
8406: LD_STRING @
8408: PUSH
8409: LD_VAR 0 1
8413: PPUSH
8414: CALL_OW 255
8418: STR
8419: PPUSH
8420: CALL_OW 500
// end ;
8424: LD_VAR 0 2
8428: RET
// export function Multiplayer_BuildingCaptured ( building , oldSide , unit ) ; var i ; begin
8429: LD_INT 0
8431: PPUSH
8432: PPUSH
// if mpGameType = GameTypeSurvival and GetBType ( building ) in [ b_depot , b_warehouse ] then
8433: LD_EXP 3
8437: PUSH
8438: LD_INT 2
8440: EQUAL
8441: PUSH
8442: LD_VAR 0 1
8446: PPUSH
8447: CALL_OW 266
8451: PUSH
8452: LD_INT 0
8454: PUSH
8455: LD_INT 1
8457: PUSH
8458: EMPTY
8459: LIST
8460: LIST
8461: IN
8462: AND
8463: IFFALSE 8528
// begin KillUnit ( building ) ;
8465: LD_VAR 0 1
8469: PPUSH
8470: CALL_OW 66
// for i in FilterAllUnits ( [ [ f_side , oldSide ] , [ f_type , unit_human ] ] ) do
8474: LD_ADDR_VAR 0 5
8478: PUSH
8479: LD_INT 22
8481: PUSH
8482: LD_VAR 0 2
8486: PUSH
8487: EMPTY
8488: LIST
8489: LIST
8490: PUSH
8491: LD_INT 21
8493: PUSH
8494: LD_INT 1
8496: PUSH
8497: EMPTY
8498: LIST
8499: LIST
8500: PUSH
8501: EMPTY
8502: LIST
8503: LIST
8504: PPUSH
8505: CALL_OW 69
8509: PUSH
8510: FOR_IN
8511: IFFALSE 8524
// KillUnit ( i ) ;
8513: LD_VAR 0 5
8517: PPUSH
8518: CALL_OW 66
8522: GO 8510
8524: POP
8525: POP
// exit ;
8526: GO 8573
// end ; if GetBType ( building ) in [ b_depot , b_warehouse ] then
8528: LD_VAR 0 1
8532: PPUSH
8533: CALL_OW 266
8537: PUSH
8538: LD_INT 0
8540: PUSH
8541: LD_INT 1
8543: PUSH
8544: EMPTY
8545: LIST
8546: LIST
8547: IN
8548: IFFALSE 8573
// SetBName ( building , @ & GetSide ( building ) ) ;
8550: LD_VAR 0 1
8554: PPUSH
8555: LD_STRING @
8557: PUSH
8558: LD_VAR 0 1
8562: PPUSH
8563: CALL_OW 255
8567: STR
8568: PPUSH
8569: CALL_OW 500
// end ;
8573: LD_VAR 0 4
8577: RET
// export function Multiplayer_OilExtracted ( building , side , base , amount ) ; var i , value ; begin
8578: LD_INT 0
8580: PPUSH
8581: PPUSH
8582: PPUSH
// if mpGameType <> GameTypeFamine then
8583: LD_EXP 3
8587: PUSH
8588: LD_INT 5
8590: NONEQUAL
8591: IFFALSE 8595
// exit ;
8593: GO 8809
// for i := 1 to mpGlobalOilDeposits do
8595: LD_ADDR_VAR 0 6
8599: PUSH
8600: DOUBLE
8601: LD_INT 1
8603: DEC
8604: ST_TO_ADDR
8605: LD_EXP 41
8609: PUSH
8610: FOR_TO
8611: IFFALSE 8807
// begin if HexInfo ( mpGlobalOilDeposits [ i ] [ 1 ] , mpGlobalOilDeposits [ i ] [ 2 ] ) = building then
8613: LD_EXP 41
8617: PUSH
8618: LD_VAR 0 6
8622: ARRAY
8623: PUSH
8624: LD_INT 1
8626: ARRAY
8627: PPUSH
8628: LD_EXP 41
8632: PUSH
8633: LD_VAR 0 6
8637: ARRAY
8638: PUSH
8639: LD_INT 2
8641: ARRAY
8642: PPUSH
8643: CALL_OW 428
8647: PUSH
8648: LD_VAR 0 1
8652: EQUAL
8653: IFFALSE 8805
// begin value := mpGlobalOilDeposits [ i ] [ 3 ] ;
8655: LD_ADDR_VAR 0 7
8659: PUSH
8660: LD_EXP 41
8664: PUSH
8665: LD_VAR 0 6
8669: ARRAY
8670: PUSH
8671: LD_INT 3
8673: ARRAY
8674: ST_TO_ADDR
// value := Dec ( value ) ;
8675: LD_ADDR_VAR 0 7
8679: PUSH
8680: LD_VAR 0 7
8684: PPUSH
8685: CALL 48977 0 1
8689: ST_TO_ADDR
// mpGlobalOilDeposits := Replace ( mpGlobalOilDeposits , i , Replace ( mpGlobalOilDeposits [ i ] , 3 , value ) ) ;
8690: LD_ADDR_EXP 41
8694: PUSH
8695: LD_EXP 41
8699: PPUSH
8700: LD_VAR 0 6
8704: PPUSH
8705: LD_EXP 41
8709: PUSH
8710: LD_VAR 0 6
8714: ARRAY
8715: PPUSH
8716: LD_INT 3
8718: PPUSH
8719: LD_VAR 0 7
8723: PPUSH
8724: CALL_OW 1
8728: PPUSH
8729: CALL_OW 1
8733: ST_TO_ADDR
// SetUnitDisplayNumber ( building , value ) ;
8734: LD_VAR 0 1
8738: PPUSH
8739: LD_VAR 0 7
8743: PPUSH
8744: CALL_OW 505
// if value = 0 then
8748: LD_VAR 0 7
8752: PUSH
8753: LD_INT 0
8755: EQUAL
8756: IFFALSE 8805
// begin RemoveDepositXY ( mpGlobalOilDeposits [ i ] [ 1 ] , mpGlobalOilDeposits [ i ] [ 2 ] ) ;
8758: LD_EXP 41
8762: PUSH
8763: LD_VAR 0 6
8767: ARRAY
8768: PUSH
8769: LD_INT 1
8771: ARRAY
8772: PPUSH
8773: LD_EXP 41
8777: PUSH
8778: LD_VAR 0 6
8782: ARRAY
8783: PUSH
8784: LD_INT 2
8786: ARRAY
8787: PPUSH
8788: CALL_OW 63
// KillUnit ( building ) ;
8792: LD_VAR 0 1
8796: PPUSH
8797: CALL_OW 66
// exit ;
8801: POP
8802: POP
8803: GO 8809
// end ; end ; end ;
8805: GO 8610
8807: POP
8808: POP
// end ;
8809: LD_VAR 0 5
8813: RET
// export function Multiplayer_SibExtracted ( building , side , base , amount ) ; var i , value ; begin
8814: LD_INT 0
8816: PPUSH
8817: PPUSH
8818: PPUSH
// if mpGameType <> GameTypeFamine then
8819: LD_EXP 3
8823: PUSH
8824: LD_INT 5
8826: NONEQUAL
8827: IFFALSE 8831
// exit ;
8829: GO 9045
// for i := 1 to mpGlobalSibDeposits do
8831: LD_ADDR_VAR 0 6
8835: PUSH
8836: DOUBLE
8837: LD_INT 1
8839: DEC
8840: ST_TO_ADDR
8841: LD_EXP 42
8845: PUSH
8846: FOR_TO
8847: IFFALSE 9043
// begin if HexInfo ( mpGlobalSibDeposits [ i ] [ 1 ] , mpGlobalSibDeposits [ i ] [ 2 ] ) = building then
8849: LD_EXP 42
8853: PUSH
8854: LD_VAR 0 6
8858: ARRAY
8859: PUSH
8860: LD_INT 1
8862: ARRAY
8863: PPUSH
8864: LD_EXP 42
8868: PUSH
8869: LD_VAR 0 6
8873: ARRAY
8874: PUSH
8875: LD_INT 2
8877: ARRAY
8878: PPUSH
8879: CALL_OW 428
8883: PUSH
8884: LD_VAR 0 1
8888: EQUAL
8889: IFFALSE 9041
// begin value := mpGlobalSibDeposits [ i ] [ 3 ] ;
8891: LD_ADDR_VAR 0 7
8895: PUSH
8896: LD_EXP 42
8900: PUSH
8901: LD_VAR 0 6
8905: ARRAY
8906: PUSH
8907: LD_INT 3
8909: ARRAY
8910: ST_TO_ADDR
// value := Dec ( value ) ;
8911: LD_ADDR_VAR 0 7
8915: PUSH
8916: LD_VAR 0 7
8920: PPUSH
8921: CALL 48977 0 1
8925: ST_TO_ADDR
// mpGlobalSibDeposits := Replace ( mpGlobalSibDeposits , i , Replace ( mpGlobalSibDeposits [ i ] , 3 , value ) ) ;
8926: LD_ADDR_EXP 42
8930: PUSH
8931: LD_EXP 42
8935: PPUSH
8936: LD_VAR 0 6
8940: PPUSH
8941: LD_EXP 42
8945: PUSH
8946: LD_VAR 0 6
8950: ARRAY
8951: PPUSH
8952: LD_INT 3
8954: PPUSH
8955: LD_VAR 0 7
8959: PPUSH
8960: CALL_OW 1
8964: PPUSH
8965: CALL_OW 1
8969: ST_TO_ADDR
// SetUnitDisplayNumber ( building , value ) ;
8970: LD_VAR 0 1
8974: PPUSH
8975: LD_VAR 0 7
8979: PPUSH
8980: CALL_OW 505
// if value = 0 then
8984: LD_VAR 0 7
8988: PUSH
8989: LD_INT 0
8991: EQUAL
8992: IFFALSE 9041
// begin RemoveDepositXY ( mpGlobalSibDeposits [ i ] [ 1 ] , mpGlobalSibDeposits [ i ] [ 2 ] ) ;
8994: LD_EXP 42
8998: PUSH
8999: LD_VAR 0 6
9003: ARRAY
9004: PUSH
9005: LD_INT 1
9007: ARRAY
9008: PPUSH
9009: LD_EXP 42
9013: PUSH
9014: LD_VAR 0 6
9018: ARRAY
9019: PUSH
9020: LD_INT 2
9022: ARRAY
9023: PPUSH
9024: CALL_OW 63
// KillUnit ( building ) ;
9028: LD_VAR 0 1
9032: PPUSH
9033: CALL_OW 66
// exit ;
9037: POP
9038: POP
9039: GO 9045
// end ; end ; end ;
9041: GO 8846
9043: POP
9044: POP
// end ; end_of_file
9045: LD_VAR 0 5
9049: RET
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeNormal do var i , canWin ;
9050: LD_EXP 39
9054: PUSH
9055: CALL 9260 0 0
9059: AND
9060: PUSH
9061: LD_OWVAR 4
9065: AND
9066: IFFALSE 9257
9068: GO 9070
9070: DISABLE
9071: LD_INT 0
9073: PPUSH
9074: PPUSH
// begin canWin := false ;
9075: LD_ADDR_VAR 0 2
9079: PUSH
9080: LD_INT 0
9082: ST_TO_ADDR
// if not HasPower ( your_side ) then
9083: LD_OWVAR 2
9087: PPUSH
9088: CALL 9300 0 1
9092: NOT
9093: IFFALSE 9104
// begin Multiplayer_Loose_Message ;
9095: CALL_OW 521
// enable ( mpLose ) ;
9099: LD_INT 102
9101: ENABLE_MARKED
// end else
9102: GO 9257
// begin canWin := true ;
9104: LD_ADDR_VAR 0 2
9108: PUSH
9109: LD_INT 1
9111: ST_TO_ADDR
// for i := 1 to 8 do
9112: LD_ADDR_VAR 0 1
9116: PUSH
9117: DOUBLE
9118: LD_INT 1
9120: DEC
9121: ST_TO_ADDR
9122: LD_INT 8
9124: PUSH
9125: FOR_TO
9126: IFFALSE 9243
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
9128: LD_EXP 7
9132: PUSH
9133: LD_VAR 0 1
9137: ARRAY
9138: PUSH
9139: LD_VAR 0 1
9143: PPUSH
9144: CALL_OW 108
9148: AND
9149: PUSH
9150: LD_VAR 0 1
9154: PUSH
9155: LD_OWVAR 2
9159: NONEQUAL
9160: AND
9161: IFFALSE 9241
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
9163: LD_EXP 8
9167: PUSH
9168: LD_VAR 0 1
9172: ARRAY
9173: NOT
9174: PUSH
9175: LD_EXP 8
9179: PUSH
9180: LD_VAR 0 1
9184: ARRAY
9185: PUSH
9186: LD_EXP 8
9190: PUSH
9191: LD_OWVAR 2
9195: ARRAY
9196: NONEQUAL
9197: PUSH
9198: LD_OWVAR 2
9202: PPUSH
9203: LD_VAR 0 1
9207: PPUSH
9208: CALL_OW 81
9212: PUSH
9213: LD_INT 1
9215: NONEQUAL
9216: AND
9217: OR
9218: IFFALSE 9241
// if HasPower ( i ) then
9220: LD_VAR 0 1
9224: PPUSH
9225: CALL 9300 0 1
9229: IFFALSE 9241
// begin canWin := false ;
9231: LD_ADDR_VAR 0 2
9235: PUSH
9236: LD_INT 0
9238: ST_TO_ADDR
// break ;
9239: GO 9243
// end ;
9241: GO 9125
9243: POP
9244: POP
// if canWin then
9245: LD_VAR 0 2
9249: IFFALSE 9256
// enable ( mpWin ) else
9251: LD_INT 101
9253: ENABLE_MARKED
9254: GO 9257
// enable ;
9256: ENABLE
// end ; end ;
9257: PPOPN 2
9259: END
// function CanWinLoose ; begin
9260: LD_INT 0
9262: PPUSH
// result := true ;
9263: LD_ADDR_VAR 0 1
9267: PUSH
9268: LD_INT 1
9270: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
9271: CALL_OW 531
9275: PUSH
9276: CALL_OW 519
9280: PUSH
9281: LD_INT 1
9283: GREATER
9284: AND
9285: IFFALSE 9295
// result := false ;
9287: LD_ADDR_VAR 0 1
9291: PUSH
9292: LD_INT 0
9294: ST_TO_ADDR
// end ;
9295: LD_VAR 0 1
9299: RET
// function HasPower ( i ) ; begin
9300: LD_INT 0
9302: PPUSH
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
9303: LD_ADDR_VAR 0 2
9307: PUSH
9308: LD_INT 22
9310: PUSH
9311: LD_VAR 0 1
9315: PUSH
9316: EMPTY
9317: LIST
9318: LIST
9319: PUSH
9320: LD_INT 2
9322: PUSH
9323: LD_INT 21
9325: PUSH
9326: LD_INT 1
9328: PUSH
9329: EMPTY
9330: LIST
9331: LIST
9332: PUSH
9333: LD_INT 33
9335: PUSH
9336: LD_INT 3
9338: PUSH
9339: EMPTY
9340: LIST
9341: LIST
9342: PUSH
9343: LD_INT 33
9345: PUSH
9346: LD_INT 5
9348: PUSH
9349: EMPTY
9350: LIST
9351: LIST
9352: PUSH
9353: EMPTY
9354: LIST
9355: LIST
9356: LIST
9357: LIST
9358: PUSH
9359: EMPTY
9360: LIST
9361: LIST
9362: PPUSH
9363: CALL_OW 69
9367: ST_TO_ADDR
// end ; end_of_file
9368: LD_VAR 0 2
9372: RET
// every 0 0$1 trigger mpGameActive marked GameTypeSurvival do var i ;
9373: LD_EXP 39
9377: IFFALSE 9420
9379: GO 9381
9381: DISABLE
9382: LD_INT 0
9384: PPUSH
// begin for i := 1 to 8 do
9385: LD_ADDR_VAR 0 1
9389: PUSH
9390: DOUBLE
9391: LD_INT 1
9393: DEC
9394: ST_TO_ADDR
9395: LD_INT 8
9397: PUSH
9398: FOR_TO
9399: IFFALSE 9418
// SetRestrict ( b_depot , i , state_disabled ) ;
9401: LD_INT 0
9403: PPUSH
9404: LD_VAR 0 1
9408: PPUSH
9409: LD_INT 0
9411: PPUSH
9412: CALL_OW 324
9416: GO 9398
9418: POP
9419: POP
// end ;
9420: PPOPN 1
9422: END
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeSurvival do var i , canWin ;
9423: LD_EXP 39
9427: PUSH
9428: CALL 9633 0 0
9432: AND
9433: PUSH
9434: LD_OWVAR 4
9438: AND
9439: IFFALSE 9630
9441: GO 9443
9443: DISABLE
9444: LD_INT 0
9446: PPUSH
9447: PPUSH
// begin canWin := false ;
9448: LD_ADDR_VAR 0 2
9452: PUSH
9453: LD_INT 0
9455: ST_TO_ADDR
// if not HasPower ( your_side ) then
9456: LD_OWVAR 2
9460: PPUSH
9461: CALL 9673 0 1
9465: NOT
9466: IFFALSE 9477
// begin Multiplayer_Loose_Message ;
9468: CALL_OW 521
// enable ( mpLose ) ;
9472: LD_INT 102
9474: ENABLE_MARKED
// end else
9475: GO 9630
// begin canWin := true ;
9477: LD_ADDR_VAR 0 2
9481: PUSH
9482: LD_INT 1
9484: ST_TO_ADDR
// for i := 1 to 8 do
9485: LD_ADDR_VAR 0 1
9489: PUSH
9490: DOUBLE
9491: LD_INT 1
9493: DEC
9494: ST_TO_ADDR
9495: LD_INT 8
9497: PUSH
9498: FOR_TO
9499: IFFALSE 9616
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
9501: LD_EXP 7
9505: PUSH
9506: LD_VAR 0 1
9510: ARRAY
9511: PUSH
9512: LD_VAR 0 1
9516: PPUSH
9517: CALL_OW 108
9521: AND
9522: PUSH
9523: LD_VAR 0 1
9527: PUSH
9528: LD_OWVAR 2
9532: NONEQUAL
9533: AND
9534: IFFALSE 9614
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
9536: LD_EXP 8
9540: PUSH
9541: LD_VAR 0 1
9545: ARRAY
9546: NOT
9547: PUSH
9548: LD_EXP 8
9552: PUSH
9553: LD_VAR 0 1
9557: ARRAY
9558: PUSH
9559: LD_EXP 8
9563: PUSH
9564: LD_OWVAR 2
9568: ARRAY
9569: NONEQUAL
9570: PUSH
9571: LD_OWVAR 2
9575: PPUSH
9576: LD_VAR 0 1
9580: PPUSH
9581: CALL_OW 81
9585: PUSH
9586: LD_INT 1
9588: NONEQUAL
9589: AND
9590: OR
9591: IFFALSE 9614
// if HasPower ( i ) then
9593: LD_VAR 0 1
9597: PPUSH
9598: CALL 9673 0 1
9602: IFFALSE 9614
// begin canWin := false ;
9604: LD_ADDR_VAR 0 2
9608: PUSH
9609: LD_INT 0
9611: ST_TO_ADDR
// break ;
9612: GO 9616
// end ;
9614: GO 9498
9616: POP
9617: POP
// if canWin then
9618: LD_VAR 0 2
9622: IFFALSE 9629
// enable ( mpWin ) else
9624: LD_INT 101
9626: ENABLE_MARKED
9627: GO 9630
// enable ;
9629: ENABLE
// end ; end ;
9630: PPOPN 2
9632: END
// function CanWinLoose ; begin
9633: LD_INT 0
9635: PPUSH
// result := true ;
9636: LD_ADDR_VAR 0 1
9640: PUSH
9641: LD_INT 1
9643: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
9644: CALL_OW 531
9648: PUSH
9649: CALL_OW 519
9653: PUSH
9654: LD_INT 1
9656: GREATER
9657: AND
9658: IFFALSE 9668
// result := false ;
9660: LD_ADDR_VAR 0 1
9664: PUSH
9665: LD_INT 0
9667: ST_TO_ADDR
// end ;
9668: LD_VAR 0 1
9672: RET
// function HasPower ( i ) ; begin
9673: LD_INT 0
9675: PPUSH
// if not FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) then
9676: LD_INT 22
9678: PUSH
9679: LD_VAR 0 1
9683: PUSH
9684: EMPTY
9685: LIST
9686: LIST
9687: PUSH
9688: LD_INT 2
9690: PUSH
9691: LD_INT 30
9693: PUSH
9694: LD_INT 0
9696: PUSH
9697: EMPTY
9698: LIST
9699: LIST
9700: PUSH
9701: LD_INT 30
9703: PUSH
9704: LD_INT 1
9706: PUSH
9707: EMPTY
9708: LIST
9709: LIST
9710: PUSH
9711: EMPTY
9712: LIST
9713: LIST
9714: LIST
9715: PUSH
9716: EMPTY
9717: LIST
9718: LIST
9719: PPUSH
9720: CALL_OW 69
9724: NOT
9725: IFFALSE 9729
// exit ;
9727: GO 9794
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
9729: LD_ADDR_VAR 0 2
9733: PUSH
9734: LD_INT 22
9736: PUSH
9737: LD_VAR 0 1
9741: PUSH
9742: EMPTY
9743: LIST
9744: LIST
9745: PUSH
9746: LD_INT 2
9748: PUSH
9749: LD_INT 21
9751: PUSH
9752: LD_INT 1
9754: PUSH
9755: EMPTY
9756: LIST
9757: LIST
9758: PUSH
9759: LD_INT 33
9761: PUSH
9762: LD_INT 3
9764: PUSH
9765: EMPTY
9766: LIST
9767: LIST
9768: PUSH
9769: LD_INT 33
9771: PUSH
9772: LD_INT 5
9774: PUSH
9775: EMPTY
9776: LIST
9777: LIST
9778: PUSH
9779: EMPTY
9780: LIST
9781: LIST
9782: LIST
9783: LIST
9784: PUSH
9785: EMPTY
9786: LIST
9787: LIST
9788: PPUSH
9789: CALL_OW 69
9793: ST_TO_ADDR
// end ; end_of_file
9794: LD_VAR 0 2
9798: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
9799: LD_INT 0
9801: PPUSH
9802: PPUSH
// if exist_mode then
9803: LD_VAR 0 2
9807: IFFALSE 9853
// begin unit := CreateCharacter ( prefix & ident ) ;
9809: LD_ADDR_VAR 0 5
9813: PUSH
9814: LD_VAR 0 3
9818: PUSH
9819: LD_VAR 0 1
9823: STR
9824: PPUSH
9825: CALL_OW 34
9829: ST_TO_ADDR
// if unit then
9830: LD_VAR 0 5
9834: IFFALSE 9851
// DeleteCharacters ( prefix & ident ) ;
9836: LD_VAR 0 3
9840: PUSH
9841: LD_VAR 0 1
9845: STR
9846: PPUSH
9847: CALL_OW 40
// end else
9851: GO 9868
// unit := NewCharacter ( ident ) ;
9853: LD_ADDR_VAR 0 5
9857: PUSH
9858: LD_VAR 0 1
9862: PPUSH
9863: CALL_OW 25
9867: ST_TO_ADDR
// result := unit ;
9868: LD_ADDR_VAR 0 4
9872: PUSH
9873: LD_VAR 0 5
9877: ST_TO_ADDR
// end ;
9878: LD_VAR 0 4
9882: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
9883: LD_INT 0
9885: PPUSH
9886: PPUSH
// if exist_mode then
9887: LD_VAR 0 2
9891: IFFALSE 9916
// unit := CreateCharacter ( prefix & ident ) else
9893: LD_ADDR_VAR 0 5
9897: PUSH
9898: LD_VAR 0 3
9902: PUSH
9903: LD_VAR 0 1
9907: STR
9908: PPUSH
9909: CALL_OW 34
9913: ST_TO_ADDR
9914: GO 9931
// unit := NewCharacter ( ident ) ;
9916: LD_ADDR_VAR 0 5
9920: PUSH
9921: LD_VAR 0 1
9925: PPUSH
9926: CALL_OW 25
9930: ST_TO_ADDR
// result := unit ;
9931: LD_ADDR_VAR 0 4
9935: PUSH
9936: LD_VAR 0 5
9940: ST_TO_ADDR
// end ;
9941: LD_VAR 0 4
9945: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
9946: LD_INT 0
9948: PPUSH
9949: PPUSH
// if not side or not nation then
9950: LD_VAR 0 1
9954: NOT
9955: PUSH
9956: LD_VAR 0 2
9960: NOT
9961: OR
9962: IFFALSE 9966
// exit ;
9964: GO 10734
// case nation of nation_american :
9966: LD_VAR 0 2
9970: PUSH
9971: LD_INT 1
9973: DOUBLE
9974: EQUAL
9975: IFTRUE 9979
9977: GO 10193
9979: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
9980: LD_ADDR_VAR 0 4
9984: PUSH
9985: LD_INT 35
9987: PUSH
9988: LD_INT 45
9990: PUSH
9991: LD_INT 46
9993: PUSH
9994: LD_INT 47
9996: PUSH
9997: LD_INT 82
9999: PUSH
10000: LD_INT 83
10002: PUSH
10003: LD_INT 84
10005: PUSH
10006: LD_INT 85
10008: PUSH
10009: LD_INT 86
10011: PUSH
10012: LD_INT 1
10014: PUSH
10015: LD_INT 2
10017: PUSH
10018: LD_INT 6
10020: PUSH
10021: LD_INT 15
10023: PUSH
10024: LD_INT 16
10026: PUSH
10027: LD_INT 7
10029: PUSH
10030: LD_INT 12
10032: PUSH
10033: LD_INT 13
10035: PUSH
10036: LD_INT 10
10038: PUSH
10039: LD_INT 14
10041: PUSH
10042: LD_INT 20
10044: PUSH
10045: LD_INT 21
10047: PUSH
10048: LD_INT 22
10050: PUSH
10051: LD_INT 25
10053: PUSH
10054: LD_INT 32
10056: PUSH
10057: LD_INT 27
10059: PUSH
10060: LD_INT 36
10062: PUSH
10063: LD_INT 69
10065: PUSH
10066: LD_INT 39
10068: PUSH
10069: LD_INT 34
10071: PUSH
10072: LD_INT 40
10074: PUSH
10075: LD_INT 48
10077: PUSH
10078: LD_INT 49
10080: PUSH
10081: LD_INT 50
10083: PUSH
10084: LD_INT 51
10086: PUSH
10087: LD_INT 52
10089: PUSH
10090: LD_INT 53
10092: PUSH
10093: LD_INT 54
10095: PUSH
10096: LD_INT 55
10098: PUSH
10099: LD_INT 56
10101: PUSH
10102: LD_INT 57
10104: PUSH
10105: LD_INT 58
10107: PUSH
10108: LD_INT 59
10110: PUSH
10111: LD_INT 60
10113: PUSH
10114: LD_INT 61
10116: PUSH
10117: LD_INT 62
10119: PUSH
10120: LD_INT 80
10122: PUSH
10123: LD_INT 82
10125: PUSH
10126: LD_INT 83
10128: PUSH
10129: LD_INT 84
10131: PUSH
10132: LD_INT 85
10134: PUSH
10135: LD_INT 86
10137: PUSH
10138: EMPTY
10139: LIST
10140: LIST
10141: LIST
10142: LIST
10143: LIST
10144: LIST
10145: LIST
10146: LIST
10147: LIST
10148: LIST
10149: LIST
10150: LIST
10151: LIST
10152: LIST
10153: LIST
10154: LIST
10155: LIST
10156: LIST
10157: LIST
10158: LIST
10159: LIST
10160: LIST
10161: LIST
10162: LIST
10163: LIST
10164: LIST
10165: LIST
10166: LIST
10167: LIST
10168: LIST
10169: LIST
10170: LIST
10171: LIST
10172: LIST
10173: LIST
10174: LIST
10175: LIST
10176: LIST
10177: LIST
10178: LIST
10179: LIST
10180: LIST
10181: LIST
10182: LIST
10183: LIST
10184: LIST
10185: LIST
10186: LIST
10187: LIST
10188: LIST
10189: LIST
10190: ST_TO_ADDR
10191: GO 10658
10193: LD_INT 2
10195: DOUBLE
10196: EQUAL
10197: IFTRUE 10201
10199: GO 10427
10201: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
10202: LD_ADDR_VAR 0 4
10206: PUSH
10207: LD_INT 35
10209: PUSH
10210: LD_INT 45
10212: PUSH
10213: LD_INT 46
10215: PUSH
10216: LD_INT 47
10218: PUSH
10219: LD_INT 82
10221: PUSH
10222: LD_INT 83
10224: PUSH
10225: LD_INT 84
10227: PUSH
10228: LD_INT 85
10230: PUSH
10231: LD_INT 87
10233: PUSH
10234: LD_INT 70
10236: PUSH
10237: LD_INT 1
10239: PUSH
10240: LD_INT 11
10242: PUSH
10243: LD_INT 3
10245: PUSH
10246: LD_INT 4
10248: PUSH
10249: LD_INT 5
10251: PUSH
10252: LD_INT 6
10254: PUSH
10255: LD_INT 15
10257: PUSH
10258: LD_INT 18
10260: PUSH
10261: LD_INT 7
10263: PUSH
10264: LD_INT 17
10266: PUSH
10267: LD_INT 8
10269: PUSH
10270: LD_INT 20
10272: PUSH
10273: LD_INT 21
10275: PUSH
10276: LD_INT 22
10278: PUSH
10279: LD_INT 72
10281: PUSH
10282: LD_INT 26
10284: PUSH
10285: LD_INT 69
10287: PUSH
10288: LD_INT 39
10290: PUSH
10291: LD_INT 40
10293: PUSH
10294: LD_INT 41
10296: PUSH
10297: LD_INT 42
10299: PUSH
10300: LD_INT 43
10302: PUSH
10303: LD_INT 48
10305: PUSH
10306: LD_INT 49
10308: PUSH
10309: LD_INT 50
10311: PUSH
10312: LD_INT 51
10314: PUSH
10315: LD_INT 52
10317: PUSH
10318: LD_INT 53
10320: PUSH
10321: LD_INT 54
10323: PUSH
10324: LD_INT 55
10326: PUSH
10327: LD_INT 56
10329: PUSH
10330: LD_INT 60
10332: PUSH
10333: LD_INT 61
10335: PUSH
10336: LD_INT 62
10338: PUSH
10339: LD_INT 66
10341: PUSH
10342: LD_INT 67
10344: PUSH
10345: LD_INT 68
10347: PUSH
10348: LD_INT 81
10350: PUSH
10351: LD_INT 82
10353: PUSH
10354: LD_INT 83
10356: PUSH
10357: LD_INT 84
10359: PUSH
10360: LD_INT 85
10362: PUSH
10363: LD_INT 87
10365: PUSH
10366: LD_INT 88
10368: PUSH
10369: EMPTY
10370: LIST
10371: LIST
10372: LIST
10373: LIST
10374: LIST
10375: LIST
10376: LIST
10377: LIST
10378: LIST
10379: LIST
10380: LIST
10381: LIST
10382: LIST
10383: LIST
10384: LIST
10385: LIST
10386: LIST
10387: LIST
10388: LIST
10389: LIST
10390: LIST
10391: LIST
10392: LIST
10393: LIST
10394: LIST
10395: LIST
10396: LIST
10397: LIST
10398: LIST
10399: LIST
10400: LIST
10401: LIST
10402: LIST
10403: LIST
10404: LIST
10405: LIST
10406: LIST
10407: LIST
10408: LIST
10409: LIST
10410: LIST
10411: LIST
10412: LIST
10413: LIST
10414: LIST
10415: LIST
10416: LIST
10417: LIST
10418: LIST
10419: LIST
10420: LIST
10421: LIST
10422: LIST
10423: LIST
10424: ST_TO_ADDR
10425: GO 10658
10427: LD_INT 3
10429: DOUBLE
10430: EQUAL
10431: IFTRUE 10435
10433: GO 10657
10435: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
10436: LD_ADDR_VAR 0 4
10440: PUSH
10441: LD_INT 46
10443: PUSH
10444: LD_INT 47
10446: PUSH
10447: LD_INT 1
10449: PUSH
10450: LD_INT 2
10452: PUSH
10453: LD_INT 82
10455: PUSH
10456: LD_INT 83
10458: PUSH
10459: LD_INT 84
10461: PUSH
10462: LD_INT 85
10464: PUSH
10465: LD_INT 86
10467: PUSH
10468: LD_INT 11
10470: PUSH
10471: LD_INT 9
10473: PUSH
10474: LD_INT 20
10476: PUSH
10477: LD_INT 19
10479: PUSH
10480: LD_INT 21
10482: PUSH
10483: LD_INT 24
10485: PUSH
10486: LD_INT 22
10488: PUSH
10489: LD_INT 25
10491: PUSH
10492: LD_INT 28
10494: PUSH
10495: LD_INT 29
10497: PUSH
10498: LD_INT 30
10500: PUSH
10501: LD_INT 31
10503: PUSH
10504: LD_INT 37
10506: PUSH
10507: LD_INT 38
10509: PUSH
10510: LD_INT 32
10512: PUSH
10513: LD_INT 27
10515: PUSH
10516: LD_INT 33
10518: PUSH
10519: LD_INT 69
10521: PUSH
10522: LD_INT 39
10524: PUSH
10525: LD_INT 34
10527: PUSH
10528: LD_INT 40
10530: PUSH
10531: LD_INT 71
10533: PUSH
10534: LD_INT 23
10536: PUSH
10537: LD_INT 44
10539: PUSH
10540: LD_INT 48
10542: PUSH
10543: LD_INT 49
10545: PUSH
10546: LD_INT 50
10548: PUSH
10549: LD_INT 51
10551: PUSH
10552: LD_INT 52
10554: PUSH
10555: LD_INT 53
10557: PUSH
10558: LD_INT 54
10560: PUSH
10561: LD_INT 55
10563: PUSH
10564: LD_INT 56
10566: PUSH
10567: LD_INT 57
10569: PUSH
10570: LD_INT 58
10572: PUSH
10573: LD_INT 59
10575: PUSH
10576: LD_INT 63
10578: PUSH
10579: LD_INT 64
10581: PUSH
10582: LD_INT 65
10584: PUSH
10585: LD_INT 82
10587: PUSH
10588: LD_INT 83
10590: PUSH
10591: LD_INT 84
10593: PUSH
10594: LD_INT 85
10596: PUSH
10597: LD_INT 86
10599: PUSH
10600: EMPTY
10601: LIST
10602: LIST
10603: LIST
10604: LIST
10605: LIST
10606: LIST
10607: LIST
10608: LIST
10609: LIST
10610: LIST
10611: LIST
10612: LIST
10613: LIST
10614: LIST
10615: LIST
10616: LIST
10617: LIST
10618: LIST
10619: LIST
10620: LIST
10621: LIST
10622: LIST
10623: LIST
10624: LIST
10625: LIST
10626: LIST
10627: LIST
10628: LIST
10629: LIST
10630: LIST
10631: LIST
10632: LIST
10633: LIST
10634: LIST
10635: LIST
10636: LIST
10637: LIST
10638: LIST
10639: LIST
10640: LIST
10641: LIST
10642: LIST
10643: LIST
10644: LIST
10645: LIST
10646: LIST
10647: LIST
10648: LIST
10649: LIST
10650: LIST
10651: LIST
10652: LIST
10653: LIST
10654: ST_TO_ADDR
10655: GO 10658
10657: POP
// if state > - 1 and state < 3 then
10658: LD_VAR 0 3
10662: PUSH
10663: LD_INT 1
10665: NEG
10666: GREATER
10667: PUSH
10668: LD_VAR 0 3
10672: PUSH
10673: LD_INT 3
10675: LESS
10676: AND
10677: IFFALSE 10734
// for i in result do
10679: LD_ADDR_VAR 0 5
10683: PUSH
10684: LD_VAR 0 4
10688: PUSH
10689: FOR_IN
10690: IFFALSE 10732
// if GetTech ( i , side ) <> state then
10692: LD_VAR 0 5
10696: PPUSH
10697: LD_VAR 0 1
10701: PPUSH
10702: CALL_OW 321
10706: PUSH
10707: LD_VAR 0 3
10711: NONEQUAL
10712: IFFALSE 10730
// result := result diff i ;
10714: LD_ADDR_VAR 0 4
10718: PUSH
10719: LD_VAR 0 4
10723: PUSH
10724: LD_VAR 0 5
10728: DIFF
10729: ST_TO_ADDR
10730: GO 10689
10732: POP
10733: POP
// end ;
10734: LD_VAR 0 4
10738: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
10739: LD_INT 0
10741: PPUSH
10742: PPUSH
10743: PPUSH
// result := true ;
10744: LD_ADDR_VAR 0 3
10748: PUSH
10749: LD_INT 1
10751: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
10752: LD_ADDR_VAR 0 5
10756: PUSH
10757: LD_VAR 0 2
10761: PPUSH
10762: CALL_OW 480
10766: ST_TO_ADDR
// if not tmp then
10767: LD_VAR 0 5
10771: NOT
10772: IFFALSE 10776
// exit ;
10774: GO 10825
// for i in tmp do
10776: LD_ADDR_VAR 0 4
10780: PUSH
10781: LD_VAR 0 5
10785: PUSH
10786: FOR_IN
10787: IFFALSE 10823
// if GetTech ( i , side ) <> state_researched then
10789: LD_VAR 0 4
10793: PPUSH
10794: LD_VAR 0 1
10798: PPUSH
10799: CALL_OW 321
10803: PUSH
10804: LD_INT 2
10806: NONEQUAL
10807: IFFALSE 10821
// begin result := false ;
10809: LD_ADDR_VAR 0 3
10813: PUSH
10814: LD_INT 0
10816: ST_TO_ADDR
// exit ;
10817: POP
10818: POP
10819: GO 10825
// end ;
10821: GO 10786
10823: POP
10824: POP
// end ;
10825: LD_VAR 0 3
10829: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
10830: LD_INT 0
10832: PPUSH
10833: PPUSH
10834: PPUSH
10835: PPUSH
10836: PPUSH
10837: PPUSH
10838: PPUSH
10839: PPUSH
10840: PPUSH
10841: PPUSH
10842: PPUSH
10843: PPUSH
10844: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
10845: LD_VAR 0 1
10849: NOT
10850: PUSH
10851: LD_VAR 0 1
10855: PPUSH
10856: CALL_OW 257
10860: PUSH
10861: LD_INT 9
10863: NONEQUAL
10864: OR
10865: IFFALSE 10869
// exit ;
10867: GO 11442
// side := GetSide ( unit ) ;
10869: LD_ADDR_VAR 0 9
10873: PUSH
10874: LD_VAR 0 1
10878: PPUSH
10879: CALL_OW 255
10883: ST_TO_ADDR
// tech_space := tech_spacanom ;
10884: LD_ADDR_VAR 0 12
10888: PUSH
10889: LD_INT 29
10891: ST_TO_ADDR
// tech_time := tech_taurad ;
10892: LD_ADDR_VAR 0 13
10896: PUSH
10897: LD_INT 28
10899: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
10900: LD_ADDR_VAR 0 11
10904: PUSH
10905: LD_VAR 0 1
10909: PPUSH
10910: CALL_OW 310
10914: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
10915: LD_VAR 0 11
10919: PPUSH
10920: CALL_OW 247
10924: PUSH
10925: LD_INT 2
10927: EQUAL
10928: IFFALSE 10932
// exit ;
10930: GO 11442
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
10932: LD_ADDR_VAR 0 8
10936: PUSH
10937: LD_INT 81
10939: PUSH
10940: LD_VAR 0 9
10944: PUSH
10945: EMPTY
10946: LIST
10947: LIST
10948: PUSH
10949: LD_INT 3
10951: PUSH
10952: LD_INT 21
10954: PUSH
10955: LD_INT 3
10957: PUSH
10958: EMPTY
10959: LIST
10960: LIST
10961: PUSH
10962: EMPTY
10963: LIST
10964: LIST
10965: PUSH
10966: EMPTY
10967: LIST
10968: LIST
10969: PPUSH
10970: CALL_OW 69
10974: ST_TO_ADDR
// if not tmp then
10975: LD_VAR 0 8
10979: NOT
10980: IFFALSE 10984
// exit ;
10982: GO 11442
// if in_unit then
10984: LD_VAR 0 11
10988: IFFALSE 11012
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
10990: LD_ADDR_VAR 0 10
10994: PUSH
10995: LD_VAR 0 8
10999: PPUSH
11000: LD_VAR 0 11
11004: PPUSH
11005: CALL_OW 74
11009: ST_TO_ADDR
11010: GO 11032
// enemy := NearestUnitToUnit ( tmp , unit ) ;
11012: LD_ADDR_VAR 0 10
11016: PUSH
11017: LD_VAR 0 8
11021: PPUSH
11022: LD_VAR 0 1
11026: PPUSH
11027: CALL_OW 74
11031: ST_TO_ADDR
// if not enemy then
11032: LD_VAR 0 10
11036: NOT
11037: IFFALSE 11041
// exit ;
11039: GO 11442
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
11041: LD_VAR 0 11
11045: PUSH
11046: LD_VAR 0 11
11050: PPUSH
11051: LD_VAR 0 10
11055: PPUSH
11056: CALL_OW 296
11060: PUSH
11061: LD_INT 13
11063: GREATER
11064: AND
11065: PUSH
11066: LD_VAR 0 1
11070: PPUSH
11071: LD_VAR 0 10
11075: PPUSH
11076: CALL_OW 296
11080: PUSH
11081: LD_INT 12
11083: GREATER
11084: OR
11085: IFFALSE 11089
// exit ;
11087: GO 11442
// missile := [ 1 ] ;
11089: LD_ADDR_VAR 0 14
11093: PUSH
11094: LD_INT 1
11096: PUSH
11097: EMPTY
11098: LIST
11099: ST_TO_ADDR
// if Researched ( side , tech_space ) then
11100: LD_VAR 0 9
11104: PPUSH
11105: LD_VAR 0 12
11109: PPUSH
11110: CALL_OW 325
11114: IFFALSE 11143
// missile := Replace ( missile , missile + 1 , 2 ) ;
11116: LD_ADDR_VAR 0 14
11120: PUSH
11121: LD_VAR 0 14
11125: PPUSH
11126: LD_VAR 0 14
11130: PUSH
11131: LD_INT 1
11133: PLUS
11134: PPUSH
11135: LD_INT 2
11137: PPUSH
11138: CALL_OW 1
11142: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
11143: LD_VAR 0 9
11147: PPUSH
11148: LD_VAR 0 13
11152: PPUSH
11153: CALL_OW 325
11157: PUSH
11158: LD_VAR 0 10
11162: PPUSH
11163: CALL_OW 255
11167: PPUSH
11168: LD_VAR 0 13
11172: PPUSH
11173: CALL_OW 325
11177: NOT
11178: AND
11179: IFFALSE 11208
// missile := Replace ( missile , missile + 1 , 3 ) ;
11181: LD_ADDR_VAR 0 14
11185: PUSH
11186: LD_VAR 0 14
11190: PPUSH
11191: LD_VAR 0 14
11195: PUSH
11196: LD_INT 1
11198: PLUS
11199: PPUSH
11200: LD_INT 3
11202: PPUSH
11203: CALL_OW 1
11207: ST_TO_ADDR
// if missile < 2 then
11208: LD_VAR 0 14
11212: PUSH
11213: LD_INT 2
11215: LESS
11216: IFFALSE 11220
// exit ;
11218: GO 11442
// x := GetX ( enemy ) ;
11220: LD_ADDR_VAR 0 4
11224: PUSH
11225: LD_VAR 0 10
11229: PPUSH
11230: CALL_OW 250
11234: ST_TO_ADDR
// y := GetY ( enemy ) ;
11235: LD_ADDR_VAR 0 5
11239: PUSH
11240: LD_VAR 0 10
11244: PPUSH
11245: CALL_OW 251
11249: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
11250: LD_ADDR_VAR 0 6
11254: PUSH
11255: LD_VAR 0 4
11259: PUSH
11260: LD_INT 1
11262: NEG
11263: PPUSH
11264: LD_INT 1
11266: PPUSH
11267: CALL_OW 12
11271: PLUS
11272: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
11273: LD_ADDR_VAR 0 7
11277: PUSH
11278: LD_VAR 0 5
11282: PUSH
11283: LD_INT 1
11285: NEG
11286: PPUSH
11287: LD_INT 1
11289: PPUSH
11290: CALL_OW 12
11294: PLUS
11295: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
11296: LD_VAR 0 6
11300: PPUSH
11301: LD_VAR 0 7
11305: PPUSH
11306: CALL_OW 488
11310: NOT
11311: IFFALSE 11333
// begin _x := x ;
11313: LD_ADDR_VAR 0 6
11317: PUSH
11318: LD_VAR 0 4
11322: ST_TO_ADDR
// _y := y ;
11323: LD_ADDR_VAR 0 7
11327: PUSH
11328: LD_VAR 0 5
11332: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
11333: LD_ADDR_VAR 0 3
11337: PUSH
11338: LD_INT 1
11340: PPUSH
11341: LD_VAR 0 14
11345: PPUSH
11346: CALL_OW 12
11350: ST_TO_ADDR
// case i of 1 :
11351: LD_VAR 0 3
11355: PUSH
11356: LD_INT 1
11358: DOUBLE
11359: EQUAL
11360: IFTRUE 11364
11362: GO 11381
11364: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
11365: LD_VAR 0 1
11369: PPUSH
11370: LD_VAR 0 10
11374: PPUSH
11375: CALL_OW 115
11379: GO 11442
11381: LD_INT 2
11383: DOUBLE
11384: EQUAL
11385: IFTRUE 11389
11387: GO 11411
11389: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
11390: LD_VAR 0 1
11394: PPUSH
11395: LD_VAR 0 6
11399: PPUSH
11400: LD_VAR 0 7
11404: PPUSH
11405: CALL_OW 153
11409: GO 11442
11411: LD_INT 3
11413: DOUBLE
11414: EQUAL
11415: IFTRUE 11419
11417: GO 11441
11419: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
11420: LD_VAR 0 1
11424: PPUSH
11425: LD_VAR 0 6
11429: PPUSH
11430: LD_VAR 0 7
11434: PPUSH
11435: CALL_OW 154
11439: GO 11442
11441: POP
// end ;
11442: LD_VAR 0 2
11446: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
11447: LD_INT 0
11449: PPUSH
11450: PPUSH
11451: PPUSH
11452: PPUSH
11453: PPUSH
11454: PPUSH
// if not unit or not building then
11455: LD_VAR 0 1
11459: NOT
11460: PUSH
11461: LD_VAR 0 2
11465: NOT
11466: OR
11467: IFFALSE 11471
// exit ;
11469: GO 11629
// x := GetX ( building ) ;
11471: LD_ADDR_VAR 0 5
11475: PUSH
11476: LD_VAR 0 2
11480: PPUSH
11481: CALL_OW 250
11485: ST_TO_ADDR
// y := GetY ( building ) ;
11486: LD_ADDR_VAR 0 6
11490: PUSH
11491: LD_VAR 0 2
11495: PPUSH
11496: CALL_OW 251
11500: ST_TO_ADDR
// for i = 0 to 5 do
11501: LD_ADDR_VAR 0 4
11505: PUSH
11506: DOUBLE
11507: LD_INT 0
11509: DEC
11510: ST_TO_ADDR
11511: LD_INT 5
11513: PUSH
11514: FOR_TO
11515: IFFALSE 11627
// begin _x := ShiftX ( x , i , 3 ) ;
11517: LD_ADDR_VAR 0 7
11521: PUSH
11522: LD_VAR 0 5
11526: PPUSH
11527: LD_VAR 0 4
11531: PPUSH
11532: LD_INT 3
11534: PPUSH
11535: CALL_OW 272
11539: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
11540: LD_ADDR_VAR 0 8
11544: PUSH
11545: LD_VAR 0 6
11549: PPUSH
11550: LD_VAR 0 4
11554: PPUSH
11555: LD_INT 3
11557: PPUSH
11558: CALL_OW 273
11562: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
11563: LD_VAR 0 7
11567: PPUSH
11568: LD_VAR 0 8
11572: PPUSH
11573: CALL_OW 488
11577: NOT
11578: IFFALSE 11582
// continue ;
11580: GO 11514
// if HexInfo ( _x , _y ) = 0 then
11582: LD_VAR 0 7
11586: PPUSH
11587: LD_VAR 0 8
11591: PPUSH
11592: CALL_OW 428
11596: PUSH
11597: LD_INT 0
11599: EQUAL
11600: IFFALSE 11625
// begin ComMoveXY ( unit , _x , _y ) ;
11602: LD_VAR 0 1
11606: PPUSH
11607: LD_VAR 0 7
11611: PPUSH
11612: LD_VAR 0 8
11616: PPUSH
11617: CALL_OW 111
// exit ;
11621: POP
11622: POP
11623: GO 11629
// end ; end ;
11625: GO 11514
11627: POP
11628: POP
// end ;
11629: LD_VAR 0 3
11633: RET
// export function ScanBase ( side , base_area ) ; begin
11634: LD_INT 0
11636: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
11637: LD_ADDR_VAR 0 3
11641: PUSH
11642: LD_VAR 0 2
11646: PPUSH
11647: LD_INT 81
11649: PUSH
11650: LD_VAR 0 1
11654: PUSH
11655: EMPTY
11656: LIST
11657: LIST
11658: PPUSH
11659: CALL_OW 70
11663: ST_TO_ADDR
// end ;
11664: LD_VAR 0 3
11668: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
11669: LD_INT 0
11671: PPUSH
11672: PPUSH
11673: PPUSH
11674: PPUSH
// result := false ;
11675: LD_ADDR_VAR 0 2
11679: PUSH
11680: LD_INT 0
11682: ST_TO_ADDR
// side := GetSide ( unit ) ;
11683: LD_ADDR_VAR 0 3
11687: PUSH
11688: LD_VAR 0 1
11692: PPUSH
11693: CALL_OW 255
11697: ST_TO_ADDR
// nat := GetNation ( unit ) ;
11698: LD_ADDR_VAR 0 4
11702: PUSH
11703: LD_VAR 0 1
11707: PPUSH
11708: CALL_OW 248
11712: ST_TO_ADDR
// case nat of 1 :
11713: LD_VAR 0 4
11717: PUSH
11718: LD_INT 1
11720: DOUBLE
11721: EQUAL
11722: IFTRUE 11726
11724: GO 11737
11726: POP
// tech := tech_lassight ; 2 :
11727: LD_ADDR_VAR 0 5
11731: PUSH
11732: LD_INT 12
11734: ST_TO_ADDR
11735: GO 11776
11737: LD_INT 2
11739: DOUBLE
11740: EQUAL
11741: IFTRUE 11745
11743: GO 11756
11745: POP
// tech := tech_mortar ; 3 :
11746: LD_ADDR_VAR 0 5
11750: PUSH
11751: LD_INT 41
11753: ST_TO_ADDR
11754: GO 11776
11756: LD_INT 3
11758: DOUBLE
11759: EQUAL
11760: IFTRUE 11764
11762: GO 11775
11764: POP
// tech := tech_bazooka ; end ;
11765: LD_ADDR_VAR 0 5
11769: PUSH
11770: LD_INT 44
11772: ST_TO_ADDR
11773: GO 11776
11775: POP
// if Researched ( side , tech ) then
11776: LD_VAR 0 3
11780: PPUSH
11781: LD_VAR 0 5
11785: PPUSH
11786: CALL_OW 325
11790: IFFALSE 11817
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
11792: LD_ADDR_VAR 0 2
11796: PUSH
11797: LD_INT 5
11799: PUSH
11800: LD_INT 8
11802: PUSH
11803: LD_INT 9
11805: PUSH
11806: EMPTY
11807: LIST
11808: LIST
11809: LIST
11810: PUSH
11811: LD_VAR 0 4
11815: ARRAY
11816: ST_TO_ADDR
// end ;
11817: LD_VAR 0 2
11821: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
11822: LD_INT 0
11824: PPUSH
11825: PPUSH
11826: PPUSH
// if not mines then
11827: LD_VAR 0 2
11831: NOT
11832: IFFALSE 11836
// exit ;
11834: GO 11980
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
11836: LD_ADDR_VAR 0 5
11840: PUSH
11841: LD_INT 81
11843: PUSH
11844: LD_VAR 0 1
11848: PUSH
11849: EMPTY
11850: LIST
11851: LIST
11852: PUSH
11853: LD_INT 3
11855: PUSH
11856: LD_INT 21
11858: PUSH
11859: LD_INT 3
11861: PUSH
11862: EMPTY
11863: LIST
11864: LIST
11865: PUSH
11866: EMPTY
11867: LIST
11868: LIST
11869: PUSH
11870: EMPTY
11871: LIST
11872: LIST
11873: PPUSH
11874: CALL_OW 69
11878: ST_TO_ADDR
// for i in mines do
11879: LD_ADDR_VAR 0 4
11883: PUSH
11884: LD_VAR 0 2
11888: PUSH
11889: FOR_IN
11890: IFFALSE 11978
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
11892: LD_VAR 0 4
11896: PUSH
11897: LD_INT 1
11899: ARRAY
11900: PPUSH
11901: LD_VAR 0 4
11905: PUSH
11906: LD_INT 2
11908: ARRAY
11909: PPUSH
11910: CALL_OW 458
11914: NOT
11915: IFFALSE 11919
// continue ;
11917: GO 11889
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
11919: LD_VAR 0 4
11923: PUSH
11924: LD_INT 1
11926: ARRAY
11927: PPUSH
11928: LD_VAR 0 4
11932: PUSH
11933: LD_INT 2
11935: ARRAY
11936: PPUSH
11937: CALL_OW 428
11941: PUSH
11942: LD_VAR 0 5
11946: IN
11947: IFFALSE 11976
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
11949: LD_VAR 0 4
11953: PUSH
11954: LD_INT 1
11956: ARRAY
11957: PPUSH
11958: LD_VAR 0 4
11962: PUSH
11963: LD_INT 2
11965: ARRAY
11966: PPUSH
11967: LD_VAR 0 1
11971: PPUSH
11972: CALL_OW 456
// end ;
11976: GO 11889
11978: POP
11979: POP
// end ;
11980: LD_VAR 0 3
11984: RET
// export function Count ( array ) ; begin
11985: LD_INT 0
11987: PPUSH
// result := array + 0 ;
11988: LD_ADDR_VAR 0 2
11992: PUSH
11993: LD_VAR 0 1
11997: PUSH
11998: LD_INT 0
12000: PLUS
12001: ST_TO_ADDR
// end ;
12002: LD_VAR 0 2
12006: RET
// export function IsEmpty ( building ) ; begin
12007: LD_INT 0
12009: PPUSH
// if not building then
12010: LD_VAR 0 1
12014: NOT
12015: IFFALSE 12019
// exit ;
12017: GO 12062
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
12019: LD_ADDR_VAR 0 2
12023: PUSH
12024: LD_VAR 0 1
12028: PUSH
12029: LD_INT 22
12031: PUSH
12032: LD_VAR 0 1
12036: PPUSH
12037: CALL_OW 255
12041: PUSH
12042: EMPTY
12043: LIST
12044: LIST
12045: PUSH
12046: LD_INT 58
12048: PUSH
12049: EMPTY
12050: LIST
12051: PUSH
12052: EMPTY
12053: LIST
12054: LIST
12055: PPUSH
12056: CALL_OW 69
12060: IN
12061: ST_TO_ADDR
// end ;
12062: LD_VAR 0 2
12066: RET
// export function IsNotFull ( building ) ; var places ; begin
12067: LD_INT 0
12069: PPUSH
12070: PPUSH
// if not building then
12071: LD_VAR 0 1
12075: NOT
12076: IFFALSE 12080
// exit ;
12078: GO 12108
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
12080: LD_ADDR_VAR 0 2
12084: PUSH
12085: LD_VAR 0 1
12089: PPUSH
12090: LD_INT 3
12092: PUSH
12093: LD_INT 62
12095: PUSH
12096: EMPTY
12097: LIST
12098: PUSH
12099: EMPTY
12100: LIST
12101: LIST
12102: PPUSH
12103: CALL_OW 72
12107: ST_TO_ADDR
// end ;
12108: LD_VAR 0 2
12112: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
12113: LD_INT 0
12115: PPUSH
12116: PPUSH
12117: PPUSH
12118: PPUSH
// tmp := [ ] ;
12119: LD_ADDR_VAR 0 3
12123: PUSH
12124: EMPTY
12125: ST_TO_ADDR
// list := [ ] ;
12126: LD_ADDR_VAR 0 5
12130: PUSH
12131: EMPTY
12132: ST_TO_ADDR
// for i = 16 to 25 do
12133: LD_ADDR_VAR 0 4
12137: PUSH
12138: DOUBLE
12139: LD_INT 16
12141: DEC
12142: ST_TO_ADDR
12143: LD_INT 25
12145: PUSH
12146: FOR_TO
12147: IFFALSE 12220
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
12149: LD_ADDR_VAR 0 3
12153: PUSH
12154: LD_VAR 0 3
12158: PUSH
12159: LD_INT 22
12161: PUSH
12162: LD_VAR 0 1
12166: PPUSH
12167: CALL_OW 255
12171: PUSH
12172: EMPTY
12173: LIST
12174: LIST
12175: PUSH
12176: LD_INT 91
12178: PUSH
12179: LD_VAR 0 1
12183: PUSH
12184: LD_INT 6
12186: PUSH
12187: EMPTY
12188: LIST
12189: LIST
12190: LIST
12191: PUSH
12192: LD_INT 30
12194: PUSH
12195: LD_VAR 0 4
12199: PUSH
12200: EMPTY
12201: LIST
12202: LIST
12203: PUSH
12204: EMPTY
12205: LIST
12206: LIST
12207: LIST
12208: PUSH
12209: EMPTY
12210: LIST
12211: PPUSH
12212: CALL_OW 69
12216: ADD
12217: ST_TO_ADDR
12218: GO 12146
12220: POP
12221: POP
// for i = 1 to tmp do
12222: LD_ADDR_VAR 0 4
12226: PUSH
12227: DOUBLE
12228: LD_INT 1
12230: DEC
12231: ST_TO_ADDR
12232: LD_VAR 0 3
12236: PUSH
12237: FOR_TO
12238: IFFALSE 12326
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
12240: LD_ADDR_VAR 0 5
12244: PUSH
12245: LD_VAR 0 5
12249: PUSH
12250: LD_VAR 0 3
12254: PUSH
12255: LD_VAR 0 4
12259: ARRAY
12260: PPUSH
12261: CALL_OW 266
12265: PUSH
12266: LD_VAR 0 3
12270: PUSH
12271: LD_VAR 0 4
12275: ARRAY
12276: PPUSH
12277: CALL_OW 250
12281: PUSH
12282: LD_VAR 0 3
12286: PUSH
12287: LD_VAR 0 4
12291: ARRAY
12292: PPUSH
12293: CALL_OW 251
12297: PUSH
12298: LD_VAR 0 3
12302: PUSH
12303: LD_VAR 0 4
12307: ARRAY
12308: PPUSH
12309: CALL_OW 254
12313: PUSH
12314: EMPTY
12315: LIST
12316: LIST
12317: LIST
12318: LIST
12319: PUSH
12320: EMPTY
12321: LIST
12322: ADD
12323: ST_TO_ADDR
12324: GO 12237
12326: POP
12327: POP
// result := list ;
12328: LD_ADDR_VAR 0 2
12332: PUSH
12333: LD_VAR 0 5
12337: ST_TO_ADDR
// end ;
12338: LD_VAR 0 2
12342: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
12343: LD_INT 0
12345: PPUSH
12346: PPUSH
12347: PPUSH
12348: PPUSH
12349: PPUSH
12350: PPUSH
12351: PPUSH
// if not factory then
12352: LD_VAR 0 1
12356: NOT
12357: IFFALSE 12361
// exit ;
12359: GO 12954
// if control = control_apeman then
12361: LD_VAR 0 4
12365: PUSH
12366: LD_INT 5
12368: EQUAL
12369: IFFALSE 12478
// begin tmp := UnitsInside ( factory ) ;
12371: LD_ADDR_VAR 0 8
12375: PUSH
12376: LD_VAR 0 1
12380: PPUSH
12381: CALL_OW 313
12385: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
12386: LD_VAR 0 8
12390: PPUSH
12391: LD_INT 25
12393: PUSH
12394: LD_INT 12
12396: PUSH
12397: EMPTY
12398: LIST
12399: LIST
12400: PPUSH
12401: CALL_OW 72
12405: NOT
12406: IFFALSE 12416
// control := control_manual ;
12408: LD_ADDR_VAR 0 4
12412: PUSH
12413: LD_INT 1
12415: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
12416: LD_ADDR_VAR 0 8
12420: PUSH
12421: LD_VAR 0 1
12425: PPUSH
12426: CALL 12113 0 1
12430: ST_TO_ADDR
// if tmp then
12431: LD_VAR 0 8
12435: IFFALSE 12478
// begin for i in tmp do
12437: LD_ADDR_VAR 0 7
12441: PUSH
12442: LD_VAR 0 8
12446: PUSH
12447: FOR_IN
12448: IFFALSE 12476
// if i [ 1 ] = b_ext_radio then
12450: LD_VAR 0 7
12454: PUSH
12455: LD_INT 1
12457: ARRAY
12458: PUSH
12459: LD_INT 22
12461: EQUAL
12462: IFFALSE 12474
// begin control := control_remote ;
12464: LD_ADDR_VAR 0 4
12468: PUSH
12469: LD_INT 2
12471: ST_TO_ADDR
// break ;
12472: GO 12476
// end ;
12474: GO 12447
12476: POP
12477: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
12478: LD_VAR 0 1
12482: PPUSH
12483: LD_VAR 0 2
12487: PPUSH
12488: LD_VAR 0 3
12492: PPUSH
12493: LD_VAR 0 4
12497: PPUSH
12498: LD_VAR 0 5
12502: PPUSH
12503: CALL_OW 448
12507: IFFALSE 12542
// begin result := [ chassis , engine , control , weapon ] ;
12509: LD_ADDR_VAR 0 6
12513: PUSH
12514: LD_VAR 0 2
12518: PUSH
12519: LD_VAR 0 3
12523: PUSH
12524: LD_VAR 0 4
12528: PUSH
12529: LD_VAR 0 5
12533: PUSH
12534: EMPTY
12535: LIST
12536: LIST
12537: LIST
12538: LIST
12539: ST_TO_ADDR
// exit ;
12540: GO 12954
// end ; _chassis := AvailableChassisList ( factory ) ;
12542: LD_ADDR_VAR 0 9
12546: PUSH
12547: LD_VAR 0 1
12551: PPUSH
12552: CALL_OW 475
12556: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
12557: LD_ADDR_VAR 0 11
12561: PUSH
12562: LD_VAR 0 1
12566: PPUSH
12567: CALL_OW 476
12571: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
12572: LD_ADDR_VAR 0 12
12576: PUSH
12577: LD_VAR 0 1
12581: PPUSH
12582: CALL_OW 477
12586: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
12587: LD_ADDR_VAR 0 10
12591: PUSH
12592: LD_VAR 0 1
12596: PPUSH
12597: CALL_OW 478
12601: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
12602: LD_VAR 0 9
12606: NOT
12607: PUSH
12608: LD_VAR 0 11
12612: NOT
12613: OR
12614: PUSH
12615: LD_VAR 0 12
12619: NOT
12620: OR
12621: PUSH
12622: LD_VAR 0 10
12626: NOT
12627: OR
12628: IFFALSE 12663
// begin result := [ chassis , engine , control , weapon ] ;
12630: LD_ADDR_VAR 0 6
12634: PUSH
12635: LD_VAR 0 2
12639: PUSH
12640: LD_VAR 0 3
12644: PUSH
12645: LD_VAR 0 4
12649: PUSH
12650: LD_VAR 0 5
12654: PUSH
12655: EMPTY
12656: LIST
12657: LIST
12658: LIST
12659: LIST
12660: ST_TO_ADDR
// exit ;
12661: GO 12954
// end ; if not chassis in _chassis then
12663: LD_VAR 0 2
12667: PUSH
12668: LD_VAR 0 9
12672: IN
12673: NOT
12674: IFFALSE 12700
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
12676: LD_ADDR_VAR 0 2
12680: PUSH
12681: LD_VAR 0 9
12685: PUSH
12686: LD_INT 1
12688: PPUSH
12689: LD_VAR 0 9
12693: PPUSH
12694: CALL_OW 12
12698: ARRAY
12699: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
12700: LD_VAR 0 2
12704: PPUSH
12705: LD_VAR 0 3
12709: PPUSH
12710: CALL 12959 0 2
12714: NOT
12715: IFFALSE 12774
// repeat engine := _engine [ 1 ] ;
12717: LD_ADDR_VAR 0 3
12721: PUSH
12722: LD_VAR 0 11
12726: PUSH
12727: LD_INT 1
12729: ARRAY
12730: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
12731: LD_ADDR_VAR 0 11
12735: PUSH
12736: LD_VAR 0 11
12740: PPUSH
12741: LD_INT 1
12743: PPUSH
12744: CALL_OW 3
12748: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
12749: LD_VAR 0 2
12753: PPUSH
12754: LD_VAR 0 3
12758: PPUSH
12759: CALL 12959 0 2
12763: PUSH
12764: LD_VAR 0 11
12768: PUSH
12769: EMPTY
12770: EQUAL
12771: OR
12772: IFFALSE 12717
// if not control in _control then
12774: LD_VAR 0 4
12778: PUSH
12779: LD_VAR 0 12
12783: IN
12784: NOT
12785: IFFALSE 12811
// control := _control [ rand ( 1 , _control ) ] ;
12787: LD_ADDR_VAR 0 4
12791: PUSH
12792: LD_VAR 0 12
12796: PUSH
12797: LD_INT 1
12799: PPUSH
12800: LD_VAR 0 12
12804: PPUSH
12805: CALL_OW 12
12809: ARRAY
12810: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
12811: LD_VAR 0 2
12815: PPUSH
12816: LD_VAR 0 5
12820: PPUSH
12821: CALL 13179 0 2
12825: NOT
12826: IFFALSE 12885
// repeat weapon := _weapon [ 1 ] ;
12828: LD_ADDR_VAR 0 5
12832: PUSH
12833: LD_VAR 0 10
12837: PUSH
12838: LD_INT 1
12840: ARRAY
12841: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
12842: LD_ADDR_VAR 0 10
12846: PUSH
12847: LD_VAR 0 10
12851: PPUSH
12852: LD_INT 1
12854: PPUSH
12855: CALL_OW 3
12859: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
12860: LD_VAR 0 2
12864: PPUSH
12865: LD_VAR 0 5
12869: PPUSH
12870: CALL 13179 0 2
12874: PUSH
12875: LD_VAR 0 10
12879: PUSH
12880: EMPTY
12881: EQUAL
12882: OR
12883: IFFALSE 12828
// result := [ ] ;
12885: LD_ADDR_VAR 0 6
12889: PUSH
12890: EMPTY
12891: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
12892: LD_VAR 0 1
12896: PPUSH
12897: LD_VAR 0 2
12901: PPUSH
12902: LD_VAR 0 3
12906: PPUSH
12907: LD_VAR 0 4
12911: PPUSH
12912: LD_VAR 0 5
12916: PPUSH
12917: CALL_OW 448
12921: IFFALSE 12954
// result := [ chassis , engine , control , weapon ] ;
12923: LD_ADDR_VAR 0 6
12927: PUSH
12928: LD_VAR 0 2
12932: PUSH
12933: LD_VAR 0 3
12937: PUSH
12938: LD_VAR 0 4
12942: PUSH
12943: LD_VAR 0 5
12947: PUSH
12948: EMPTY
12949: LIST
12950: LIST
12951: LIST
12952: LIST
12953: ST_TO_ADDR
// end ;
12954: LD_VAR 0 6
12958: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
12959: LD_INT 0
12961: PPUSH
// if not chassis or not engine then
12962: LD_VAR 0 1
12966: NOT
12967: PUSH
12968: LD_VAR 0 2
12972: NOT
12973: OR
12974: IFFALSE 12978
// exit ;
12976: GO 13174
// case engine of engine_solar :
12978: LD_VAR 0 2
12982: PUSH
12983: LD_INT 2
12985: DOUBLE
12986: EQUAL
12987: IFTRUE 12991
12989: GO 13029
12991: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
12992: LD_ADDR_VAR 0 3
12996: PUSH
12997: LD_INT 11
12999: PUSH
13000: LD_INT 12
13002: PUSH
13003: LD_INT 13
13005: PUSH
13006: LD_INT 14
13008: PUSH
13009: LD_INT 1
13011: PUSH
13012: LD_INT 2
13014: PUSH
13015: LD_INT 3
13017: PUSH
13018: EMPTY
13019: LIST
13020: LIST
13021: LIST
13022: LIST
13023: LIST
13024: LIST
13025: LIST
13026: ST_TO_ADDR
13027: GO 13158
13029: LD_INT 1
13031: DOUBLE
13032: EQUAL
13033: IFTRUE 13037
13035: GO 13099
13037: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
13038: LD_ADDR_VAR 0 3
13042: PUSH
13043: LD_INT 11
13045: PUSH
13046: LD_INT 12
13048: PUSH
13049: LD_INT 13
13051: PUSH
13052: LD_INT 14
13054: PUSH
13055: LD_INT 1
13057: PUSH
13058: LD_INT 2
13060: PUSH
13061: LD_INT 3
13063: PUSH
13064: LD_INT 4
13066: PUSH
13067: LD_INT 5
13069: PUSH
13070: LD_INT 21
13072: PUSH
13073: LD_INT 23
13075: PUSH
13076: LD_INT 22
13078: PUSH
13079: LD_INT 24
13081: PUSH
13082: EMPTY
13083: LIST
13084: LIST
13085: LIST
13086: LIST
13087: LIST
13088: LIST
13089: LIST
13090: LIST
13091: LIST
13092: LIST
13093: LIST
13094: LIST
13095: LIST
13096: ST_TO_ADDR
13097: GO 13158
13099: LD_INT 3
13101: DOUBLE
13102: EQUAL
13103: IFTRUE 13107
13105: GO 13157
13107: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
13108: LD_ADDR_VAR 0 3
13112: PUSH
13113: LD_INT 13
13115: PUSH
13116: LD_INT 14
13118: PUSH
13119: LD_INT 2
13121: PUSH
13122: LD_INT 3
13124: PUSH
13125: LD_INT 4
13127: PUSH
13128: LD_INT 5
13130: PUSH
13131: LD_INT 21
13133: PUSH
13134: LD_INT 22
13136: PUSH
13137: LD_INT 23
13139: PUSH
13140: LD_INT 24
13142: PUSH
13143: EMPTY
13144: LIST
13145: LIST
13146: LIST
13147: LIST
13148: LIST
13149: LIST
13150: LIST
13151: LIST
13152: LIST
13153: LIST
13154: ST_TO_ADDR
13155: GO 13158
13157: POP
// result := ( chassis in result ) ;
13158: LD_ADDR_VAR 0 3
13162: PUSH
13163: LD_VAR 0 1
13167: PUSH
13168: LD_VAR 0 3
13172: IN
13173: ST_TO_ADDR
// end ;
13174: LD_VAR 0 3
13178: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
13179: LD_INT 0
13181: PPUSH
// if not chassis or not weapon then
13182: LD_VAR 0 1
13186: NOT
13187: PUSH
13188: LD_VAR 0 2
13192: NOT
13193: OR
13194: IFFALSE 13198
// exit ;
13196: GO 14258
// case weapon of us_machine_gun :
13198: LD_VAR 0 2
13202: PUSH
13203: LD_INT 2
13205: DOUBLE
13206: EQUAL
13207: IFTRUE 13211
13209: GO 13241
13211: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
13212: LD_ADDR_VAR 0 3
13216: PUSH
13217: LD_INT 1
13219: PUSH
13220: LD_INT 2
13222: PUSH
13223: LD_INT 3
13225: PUSH
13226: LD_INT 4
13228: PUSH
13229: LD_INT 5
13231: PUSH
13232: EMPTY
13233: LIST
13234: LIST
13235: LIST
13236: LIST
13237: LIST
13238: ST_TO_ADDR
13239: GO 14242
13241: LD_INT 3
13243: DOUBLE
13244: EQUAL
13245: IFTRUE 13249
13247: GO 13279
13249: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
13250: LD_ADDR_VAR 0 3
13254: PUSH
13255: LD_INT 1
13257: PUSH
13258: LD_INT 2
13260: PUSH
13261: LD_INT 3
13263: PUSH
13264: LD_INT 4
13266: PUSH
13267: LD_INT 5
13269: PUSH
13270: EMPTY
13271: LIST
13272: LIST
13273: LIST
13274: LIST
13275: LIST
13276: ST_TO_ADDR
13277: GO 14242
13279: LD_INT 11
13281: DOUBLE
13282: EQUAL
13283: IFTRUE 13287
13285: GO 13317
13287: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
13288: LD_ADDR_VAR 0 3
13292: PUSH
13293: LD_INT 1
13295: PUSH
13296: LD_INT 2
13298: PUSH
13299: LD_INT 3
13301: PUSH
13302: LD_INT 4
13304: PUSH
13305: LD_INT 5
13307: PUSH
13308: EMPTY
13309: LIST
13310: LIST
13311: LIST
13312: LIST
13313: LIST
13314: ST_TO_ADDR
13315: GO 14242
13317: LD_INT 4
13319: DOUBLE
13320: EQUAL
13321: IFTRUE 13325
13323: GO 13351
13325: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
13326: LD_ADDR_VAR 0 3
13330: PUSH
13331: LD_INT 2
13333: PUSH
13334: LD_INT 3
13336: PUSH
13337: LD_INT 4
13339: PUSH
13340: LD_INT 5
13342: PUSH
13343: EMPTY
13344: LIST
13345: LIST
13346: LIST
13347: LIST
13348: ST_TO_ADDR
13349: GO 14242
13351: LD_INT 5
13353: DOUBLE
13354: EQUAL
13355: IFTRUE 13359
13357: GO 13385
13359: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
13360: LD_ADDR_VAR 0 3
13364: PUSH
13365: LD_INT 2
13367: PUSH
13368: LD_INT 3
13370: PUSH
13371: LD_INT 4
13373: PUSH
13374: LD_INT 5
13376: PUSH
13377: EMPTY
13378: LIST
13379: LIST
13380: LIST
13381: LIST
13382: ST_TO_ADDR
13383: GO 14242
13385: LD_INT 9
13387: DOUBLE
13388: EQUAL
13389: IFTRUE 13393
13391: GO 13419
13393: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
13394: LD_ADDR_VAR 0 3
13398: PUSH
13399: LD_INT 2
13401: PUSH
13402: LD_INT 3
13404: PUSH
13405: LD_INT 4
13407: PUSH
13408: LD_INT 5
13410: PUSH
13411: EMPTY
13412: LIST
13413: LIST
13414: LIST
13415: LIST
13416: ST_TO_ADDR
13417: GO 14242
13419: LD_INT 7
13421: DOUBLE
13422: EQUAL
13423: IFTRUE 13427
13425: GO 13453
13427: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
13428: LD_ADDR_VAR 0 3
13432: PUSH
13433: LD_INT 2
13435: PUSH
13436: LD_INT 3
13438: PUSH
13439: LD_INT 4
13441: PUSH
13442: LD_INT 5
13444: PUSH
13445: EMPTY
13446: LIST
13447: LIST
13448: LIST
13449: LIST
13450: ST_TO_ADDR
13451: GO 14242
13453: LD_INT 12
13455: DOUBLE
13456: EQUAL
13457: IFTRUE 13461
13459: GO 13487
13461: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
13462: LD_ADDR_VAR 0 3
13466: PUSH
13467: LD_INT 2
13469: PUSH
13470: LD_INT 3
13472: PUSH
13473: LD_INT 4
13475: PUSH
13476: LD_INT 5
13478: PUSH
13479: EMPTY
13480: LIST
13481: LIST
13482: LIST
13483: LIST
13484: ST_TO_ADDR
13485: GO 14242
13487: LD_INT 13
13489: DOUBLE
13490: EQUAL
13491: IFTRUE 13495
13493: GO 13521
13495: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
13496: LD_ADDR_VAR 0 3
13500: PUSH
13501: LD_INT 2
13503: PUSH
13504: LD_INT 3
13506: PUSH
13507: LD_INT 4
13509: PUSH
13510: LD_INT 5
13512: PUSH
13513: EMPTY
13514: LIST
13515: LIST
13516: LIST
13517: LIST
13518: ST_TO_ADDR
13519: GO 14242
13521: LD_INT 14
13523: DOUBLE
13524: EQUAL
13525: IFTRUE 13529
13527: GO 13547
13529: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
13530: LD_ADDR_VAR 0 3
13534: PUSH
13535: LD_INT 4
13537: PUSH
13538: LD_INT 5
13540: PUSH
13541: EMPTY
13542: LIST
13543: LIST
13544: ST_TO_ADDR
13545: GO 14242
13547: LD_INT 6
13549: DOUBLE
13550: EQUAL
13551: IFTRUE 13555
13553: GO 13573
13555: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
13556: LD_ADDR_VAR 0 3
13560: PUSH
13561: LD_INT 4
13563: PUSH
13564: LD_INT 5
13566: PUSH
13567: EMPTY
13568: LIST
13569: LIST
13570: ST_TO_ADDR
13571: GO 14242
13573: LD_INT 10
13575: DOUBLE
13576: EQUAL
13577: IFTRUE 13581
13579: GO 13599
13581: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
13582: LD_ADDR_VAR 0 3
13586: PUSH
13587: LD_INT 4
13589: PUSH
13590: LD_INT 5
13592: PUSH
13593: EMPTY
13594: LIST
13595: LIST
13596: ST_TO_ADDR
13597: GO 14242
13599: LD_INT 22
13601: DOUBLE
13602: EQUAL
13603: IFTRUE 13607
13605: GO 13633
13607: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
13608: LD_ADDR_VAR 0 3
13612: PUSH
13613: LD_INT 11
13615: PUSH
13616: LD_INT 12
13618: PUSH
13619: LD_INT 13
13621: PUSH
13622: LD_INT 14
13624: PUSH
13625: EMPTY
13626: LIST
13627: LIST
13628: LIST
13629: LIST
13630: ST_TO_ADDR
13631: GO 14242
13633: LD_INT 23
13635: DOUBLE
13636: EQUAL
13637: IFTRUE 13641
13639: GO 13667
13641: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
13642: LD_ADDR_VAR 0 3
13646: PUSH
13647: LD_INT 11
13649: PUSH
13650: LD_INT 12
13652: PUSH
13653: LD_INT 13
13655: PUSH
13656: LD_INT 14
13658: PUSH
13659: EMPTY
13660: LIST
13661: LIST
13662: LIST
13663: LIST
13664: ST_TO_ADDR
13665: GO 14242
13667: LD_INT 24
13669: DOUBLE
13670: EQUAL
13671: IFTRUE 13675
13673: GO 13701
13675: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
13676: LD_ADDR_VAR 0 3
13680: PUSH
13681: LD_INT 11
13683: PUSH
13684: LD_INT 12
13686: PUSH
13687: LD_INT 13
13689: PUSH
13690: LD_INT 14
13692: PUSH
13693: EMPTY
13694: LIST
13695: LIST
13696: LIST
13697: LIST
13698: ST_TO_ADDR
13699: GO 14242
13701: LD_INT 30
13703: DOUBLE
13704: EQUAL
13705: IFTRUE 13709
13707: GO 13735
13709: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
13710: LD_ADDR_VAR 0 3
13714: PUSH
13715: LD_INT 11
13717: PUSH
13718: LD_INT 12
13720: PUSH
13721: LD_INT 13
13723: PUSH
13724: LD_INT 14
13726: PUSH
13727: EMPTY
13728: LIST
13729: LIST
13730: LIST
13731: LIST
13732: ST_TO_ADDR
13733: GO 14242
13735: LD_INT 25
13737: DOUBLE
13738: EQUAL
13739: IFTRUE 13743
13741: GO 13761
13743: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
13744: LD_ADDR_VAR 0 3
13748: PUSH
13749: LD_INT 13
13751: PUSH
13752: LD_INT 14
13754: PUSH
13755: EMPTY
13756: LIST
13757: LIST
13758: ST_TO_ADDR
13759: GO 14242
13761: LD_INT 27
13763: DOUBLE
13764: EQUAL
13765: IFTRUE 13769
13767: GO 13787
13769: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
13770: LD_ADDR_VAR 0 3
13774: PUSH
13775: LD_INT 13
13777: PUSH
13778: LD_INT 14
13780: PUSH
13781: EMPTY
13782: LIST
13783: LIST
13784: ST_TO_ADDR
13785: GO 14242
13787: LD_INT 92
13789: DOUBLE
13790: EQUAL
13791: IFTRUE 13795
13793: GO 13821
13795: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
13796: LD_ADDR_VAR 0 3
13800: PUSH
13801: LD_INT 11
13803: PUSH
13804: LD_INT 12
13806: PUSH
13807: LD_INT 13
13809: PUSH
13810: LD_INT 14
13812: PUSH
13813: EMPTY
13814: LIST
13815: LIST
13816: LIST
13817: LIST
13818: ST_TO_ADDR
13819: GO 14242
13821: LD_INT 28
13823: DOUBLE
13824: EQUAL
13825: IFTRUE 13829
13827: GO 13847
13829: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
13830: LD_ADDR_VAR 0 3
13834: PUSH
13835: LD_INT 13
13837: PUSH
13838: LD_INT 14
13840: PUSH
13841: EMPTY
13842: LIST
13843: LIST
13844: ST_TO_ADDR
13845: GO 14242
13847: LD_INT 29
13849: DOUBLE
13850: EQUAL
13851: IFTRUE 13855
13853: GO 13873
13855: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
13856: LD_ADDR_VAR 0 3
13860: PUSH
13861: LD_INT 13
13863: PUSH
13864: LD_INT 14
13866: PUSH
13867: EMPTY
13868: LIST
13869: LIST
13870: ST_TO_ADDR
13871: GO 14242
13873: LD_INT 31
13875: DOUBLE
13876: EQUAL
13877: IFTRUE 13881
13879: GO 13899
13881: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
13882: LD_ADDR_VAR 0 3
13886: PUSH
13887: LD_INT 13
13889: PUSH
13890: LD_INT 14
13892: PUSH
13893: EMPTY
13894: LIST
13895: LIST
13896: ST_TO_ADDR
13897: GO 14242
13899: LD_INT 26
13901: DOUBLE
13902: EQUAL
13903: IFTRUE 13907
13905: GO 13925
13907: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
13908: LD_ADDR_VAR 0 3
13912: PUSH
13913: LD_INT 13
13915: PUSH
13916: LD_INT 14
13918: PUSH
13919: EMPTY
13920: LIST
13921: LIST
13922: ST_TO_ADDR
13923: GO 14242
13925: LD_INT 42
13927: DOUBLE
13928: EQUAL
13929: IFTRUE 13933
13931: GO 13959
13933: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
13934: LD_ADDR_VAR 0 3
13938: PUSH
13939: LD_INT 21
13941: PUSH
13942: LD_INT 22
13944: PUSH
13945: LD_INT 23
13947: PUSH
13948: LD_INT 24
13950: PUSH
13951: EMPTY
13952: LIST
13953: LIST
13954: LIST
13955: LIST
13956: ST_TO_ADDR
13957: GO 14242
13959: LD_INT 43
13961: DOUBLE
13962: EQUAL
13963: IFTRUE 13967
13965: GO 13993
13967: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
13968: LD_ADDR_VAR 0 3
13972: PUSH
13973: LD_INT 21
13975: PUSH
13976: LD_INT 22
13978: PUSH
13979: LD_INT 23
13981: PUSH
13982: LD_INT 24
13984: PUSH
13985: EMPTY
13986: LIST
13987: LIST
13988: LIST
13989: LIST
13990: ST_TO_ADDR
13991: GO 14242
13993: LD_INT 44
13995: DOUBLE
13996: EQUAL
13997: IFTRUE 14001
13999: GO 14027
14001: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
14002: LD_ADDR_VAR 0 3
14006: PUSH
14007: LD_INT 21
14009: PUSH
14010: LD_INT 22
14012: PUSH
14013: LD_INT 23
14015: PUSH
14016: LD_INT 24
14018: PUSH
14019: EMPTY
14020: LIST
14021: LIST
14022: LIST
14023: LIST
14024: ST_TO_ADDR
14025: GO 14242
14027: LD_INT 45
14029: DOUBLE
14030: EQUAL
14031: IFTRUE 14035
14033: GO 14061
14035: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
14036: LD_ADDR_VAR 0 3
14040: PUSH
14041: LD_INT 21
14043: PUSH
14044: LD_INT 22
14046: PUSH
14047: LD_INT 23
14049: PUSH
14050: LD_INT 24
14052: PUSH
14053: EMPTY
14054: LIST
14055: LIST
14056: LIST
14057: LIST
14058: ST_TO_ADDR
14059: GO 14242
14061: LD_INT 49
14063: DOUBLE
14064: EQUAL
14065: IFTRUE 14069
14067: GO 14095
14069: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
14070: LD_ADDR_VAR 0 3
14074: PUSH
14075: LD_INT 21
14077: PUSH
14078: LD_INT 22
14080: PUSH
14081: LD_INT 23
14083: PUSH
14084: LD_INT 24
14086: PUSH
14087: EMPTY
14088: LIST
14089: LIST
14090: LIST
14091: LIST
14092: ST_TO_ADDR
14093: GO 14242
14095: LD_INT 51
14097: DOUBLE
14098: EQUAL
14099: IFTRUE 14103
14101: GO 14129
14103: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
14104: LD_ADDR_VAR 0 3
14108: PUSH
14109: LD_INT 21
14111: PUSH
14112: LD_INT 22
14114: PUSH
14115: LD_INT 23
14117: PUSH
14118: LD_INT 24
14120: PUSH
14121: EMPTY
14122: LIST
14123: LIST
14124: LIST
14125: LIST
14126: ST_TO_ADDR
14127: GO 14242
14129: LD_INT 52
14131: DOUBLE
14132: EQUAL
14133: IFTRUE 14137
14135: GO 14163
14137: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
14138: LD_ADDR_VAR 0 3
14142: PUSH
14143: LD_INT 21
14145: PUSH
14146: LD_INT 22
14148: PUSH
14149: LD_INT 23
14151: PUSH
14152: LD_INT 24
14154: PUSH
14155: EMPTY
14156: LIST
14157: LIST
14158: LIST
14159: LIST
14160: ST_TO_ADDR
14161: GO 14242
14163: LD_INT 53
14165: DOUBLE
14166: EQUAL
14167: IFTRUE 14171
14169: GO 14189
14171: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
14172: LD_ADDR_VAR 0 3
14176: PUSH
14177: LD_INT 23
14179: PUSH
14180: LD_INT 24
14182: PUSH
14183: EMPTY
14184: LIST
14185: LIST
14186: ST_TO_ADDR
14187: GO 14242
14189: LD_INT 46
14191: DOUBLE
14192: EQUAL
14193: IFTRUE 14197
14195: GO 14215
14197: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
14198: LD_ADDR_VAR 0 3
14202: PUSH
14203: LD_INT 23
14205: PUSH
14206: LD_INT 24
14208: PUSH
14209: EMPTY
14210: LIST
14211: LIST
14212: ST_TO_ADDR
14213: GO 14242
14215: LD_INT 47
14217: DOUBLE
14218: EQUAL
14219: IFTRUE 14223
14221: GO 14241
14223: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
14224: LD_ADDR_VAR 0 3
14228: PUSH
14229: LD_INT 23
14231: PUSH
14232: LD_INT 24
14234: PUSH
14235: EMPTY
14236: LIST
14237: LIST
14238: ST_TO_ADDR
14239: GO 14242
14241: POP
// result := ( chassis in result ) ;
14242: LD_ADDR_VAR 0 3
14246: PUSH
14247: LD_VAR 0 1
14251: PUSH
14252: LD_VAR 0 3
14256: IN
14257: ST_TO_ADDR
// end ;
14258: LD_VAR 0 3
14262: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
14263: LD_INT 0
14265: PPUSH
14266: PPUSH
14267: PPUSH
14268: PPUSH
14269: PPUSH
14270: PPUSH
14271: PPUSH
// result := array ;
14272: LD_ADDR_VAR 0 5
14276: PUSH
14277: LD_VAR 0 1
14281: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
14282: LD_VAR 0 1
14286: NOT
14287: PUSH
14288: LD_VAR 0 2
14292: NOT
14293: OR
14294: PUSH
14295: LD_VAR 0 3
14299: NOT
14300: OR
14301: PUSH
14302: LD_VAR 0 2
14306: PUSH
14307: LD_VAR 0 1
14311: GREATER
14312: OR
14313: PUSH
14314: LD_VAR 0 3
14318: PUSH
14319: LD_VAR 0 1
14323: GREATER
14324: OR
14325: IFFALSE 14329
// exit ;
14327: GO 14625
// if direction then
14329: LD_VAR 0 4
14333: IFFALSE 14397
// begin d := 1 ;
14335: LD_ADDR_VAR 0 9
14339: PUSH
14340: LD_INT 1
14342: ST_TO_ADDR
// if i_from > i_to then
14343: LD_VAR 0 2
14347: PUSH
14348: LD_VAR 0 3
14352: GREATER
14353: IFFALSE 14379
// length := ( array - i_from ) + i_to else
14355: LD_ADDR_VAR 0 11
14359: PUSH
14360: LD_VAR 0 1
14364: PUSH
14365: LD_VAR 0 2
14369: MINUS
14370: PUSH
14371: LD_VAR 0 3
14375: PLUS
14376: ST_TO_ADDR
14377: GO 14395
// length := i_to - i_from ;
14379: LD_ADDR_VAR 0 11
14383: PUSH
14384: LD_VAR 0 3
14388: PUSH
14389: LD_VAR 0 2
14393: MINUS
14394: ST_TO_ADDR
// end else
14395: GO 14458
// begin d := - 1 ;
14397: LD_ADDR_VAR 0 9
14401: PUSH
14402: LD_INT 1
14404: NEG
14405: ST_TO_ADDR
// if i_from > i_to then
14406: LD_VAR 0 2
14410: PUSH
14411: LD_VAR 0 3
14415: GREATER
14416: IFFALSE 14436
// length := i_from - i_to else
14418: LD_ADDR_VAR 0 11
14422: PUSH
14423: LD_VAR 0 2
14427: PUSH
14428: LD_VAR 0 3
14432: MINUS
14433: ST_TO_ADDR
14434: GO 14458
// length := ( array - i_to ) + i_from ;
14436: LD_ADDR_VAR 0 11
14440: PUSH
14441: LD_VAR 0 1
14445: PUSH
14446: LD_VAR 0 3
14450: MINUS
14451: PUSH
14452: LD_VAR 0 2
14456: PLUS
14457: ST_TO_ADDR
// end ; if not length then
14458: LD_VAR 0 11
14462: NOT
14463: IFFALSE 14467
// exit ;
14465: GO 14625
// tmp := array ;
14467: LD_ADDR_VAR 0 10
14471: PUSH
14472: LD_VAR 0 1
14476: ST_TO_ADDR
// for i = 1 to length do
14477: LD_ADDR_VAR 0 6
14481: PUSH
14482: DOUBLE
14483: LD_INT 1
14485: DEC
14486: ST_TO_ADDR
14487: LD_VAR 0 11
14491: PUSH
14492: FOR_TO
14493: IFFALSE 14613
// begin for j = 1 to array do
14495: LD_ADDR_VAR 0 7
14499: PUSH
14500: DOUBLE
14501: LD_INT 1
14503: DEC
14504: ST_TO_ADDR
14505: LD_VAR 0 1
14509: PUSH
14510: FOR_TO
14511: IFFALSE 14599
// begin k := j + d ;
14513: LD_ADDR_VAR 0 8
14517: PUSH
14518: LD_VAR 0 7
14522: PUSH
14523: LD_VAR 0 9
14527: PLUS
14528: ST_TO_ADDR
// if k > array then
14529: LD_VAR 0 8
14533: PUSH
14534: LD_VAR 0 1
14538: GREATER
14539: IFFALSE 14549
// k := 1 ;
14541: LD_ADDR_VAR 0 8
14545: PUSH
14546: LD_INT 1
14548: ST_TO_ADDR
// if not k then
14549: LD_VAR 0 8
14553: NOT
14554: IFFALSE 14566
// k := array ;
14556: LD_ADDR_VAR 0 8
14560: PUSH
14561: LD_VAR 0 1
14565: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
14566: LD_ADDR_VAR 0 10
14570: PUSH
14571: LD_VAR 0 10
14575: PPUSH
14576: LD_VAR 0 8
14580: PPUSH
14581: LD_VAR 0 1
14585: PUSH
14586: LD_VAR 0 7
14590: ARRAY
14591: PPUSH
14592: CALL_OW 1
14596: ST_TO_ADDR
// end ;
14597: GO 14510
14599: POP
14600: POP
// array := tmp ;
14601: LD_ADDR_VAR 0 1
14605: PUSH
14606: LD_VAR 0 10
14610: ST_TO_ADDR
// end ;
14611: GO 14492
14613: POP
14614: POP
// result := array ;
14615: LD_ADDR_VAR 0 5
14619: PUSH
14620: LD_VAR 0 1
14624: ST_TO_ADDR
// end ;
14625: LD_VAR 0 5
14629: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
14630: LD_INT 0
14632: PPUSH
14633: PPUSH
// result := 0 ;
14634: LD_ADDR_VAR 0 3
14638: PUSH
14639: LD_INT 0
14641: ST_TO_ADDR
// if not array or not value in array then
14642: LD_VAR 0 1
14646: NOT
14647: PUSH
14648: LD_VAR 0 2
14652: PUSH
14653: LD_VAR 0 1
14657: IN
14658: NOT
14659: OR
14660: IFFALSE 14664
// exit ;
14662: GO 14718
// for i = 1 to array do
14664: LD_ADDR_VAR 0 4
14668: PUSH
14669: DOUBLE
14670: LD_INT 1
14672: DEC
14673: ST_TO_ADDR
14674: LD_VAR 0 1
14678: PUSH
14679: FOR_TO
14680: IFFALSE 14716
// if value = array [ i ] then
14682: LD_VAR 0 2
14686: PUSH
14687: LD_VAR 0 1
14691: PUSH
14692: LD_VAR 0 4
14696: ARRAY
14697: EQUAL
14698: IFFALSE 14714
// begin result := i ;
14700: LD_ADDR_VAR 0 3
14704: PUSH
14705: LD_VAR 0 4
14709: ST_TO_ADDR
// exit ;
14710: POP
14711: POP
14712: GO 14718
// end ;
14714: GO 14679
14716: POP
14717: POP
// end ;
14718: LD_VAR 0 3
14722: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
14723: LD_INT 0
14725: PPUSH
// vc_chassis := chassis ;
14726: LD_ADDR_OWVAR 37
14730: PUSH
14731: LD_VAR 0 1
14735: ST_TO_ADDR
// vc_engine := engine ;
14736: LD_ADDR_OWVAR 39
14740: PUSH
14741: LD_VAR 0 2
14745: ST_TO_ADDR
// vc_control := control ;
14746: LD_ADDR_OWVAR 38
14750: PUSH
14751: LD_VAR 0 3
14755: ST_TO_ADDR
// vc_weapon := weapon ;
14756: LD_ADDR_OWVAR 40
14760: PUSH
14761: LD_VAR 0 4
14765: ST_TO_ADDR
// vc_fuel_battery := fuel ;
14766: LD_ADDR_OWVAR 41
14770: PUSH
14771: LD_VAR 0 5
14775: ST_TO_ADDR
// end ;
14776: LD_VAR 0 6
14780: RET
// export function WantPlant ( unit ) ; var task ; begin
14781: LD_INT 0
14783: PPUSH
14784: PPUSH
// result := false ;
14785: LD_ADDR_VAR 0 2
14789: PUSH
14790: LD_INT 0
14792: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
14793: LD_ADDR_VAR 0 3
14797: PUSH
14798: LD_VAR 0 1
14802: PPUSH
14803: CALL_OW 437
14807: ST_TO_ADDR
// if task then
14808: LD_VAR 0 3
14812: IFFALSE 14840
// if task [ 1 ] [ 1 ] = p then
14814: LD_VAR 0 3
14818: PUSH
14819: LD_INT 1
14821: ARRAY
14822: PUSH
14823: LD_INT 1
14825: ARRAY
14826: PUSH
14827: LD_STRING p
14829: EQUAL
14830: IFFALSE 14840
// result := true ;
14832: LD_ADDR_VAR 0 2
14836: PUSH
14837: LD_INT 1
14839: ST_TO_ADDR
// end ;
14840: LD_VAR 0 2
14844: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
14845: LD_INT 0
14847: PPUSH
14848: PPUSH
14849: PPUSH
14850: PPUSH
// if pos < 1 then
14851: LD_VAR 0 2
14855: PUSH
14856: LD_INT 1
14858: LESS
14859: IFFALSE 14863
// exit ;
14861: GO 15166
// if pos = 1 then
14863: LD_VAR 0 2
14867: PUSH
14868: LD_INT 1
14870: EQUAL
14871: IFFALSE 14904
// result := Replace ( arr , pos [ 1 ] , value ) else
14873: LD_ADDR_VAR 0 4
14877: PUSH
14878: LD_VAR 0 1
14882: PPUSH
14883: LD_VAR 0 2
14887: PUSH
14888: LD_INT 1
14890: ARRAY
14891: PPUSH
14892: LD_VAR 0 3
14896: PPUSH
14897: CALL_OW 1
14901: ST_TO_ADDR
14902: GO 15166
// begin tmp := arr ;
14904: LD_ADDR_VAR 0 6
14908: PUSH
14909: LD_VAR 0 1
14913: ST_TO_ADDR
// s_arr := [ tmp ] ;
14914: LD_ADDR_VAR 0 7
14918: PUSH
14919: LD_VAR 0 6
14923: PUSH
14924: EMPTY
14925: LIST
14926: ST_TO_ADDR
// for i = 1 to pos - 1 do
14927: LD_ADDR_VAR 0 5
14931: PUSH
14932: DOUBLE
14933: LD_INT 1
14935: DEC
14936: ST_TO_ADDR
14937: LD_VAR 0 2
14941: PUSH
14942: LD_INT 1
14944: MINUS
14945: PUSH
14946: FOR_TO
14947: IFFALSE 14992
// begin tmp := tmp [ pos [ i ] ] ;
14949: LD_ADDR_VAR 0 6
14953: PUSH
14954: LD_VAR 0 6
14958: PUSH
14959: LD_VAR 0 2
14963: PUSH
14964: LD_VAR 0 5
14968: ARRAY
14969: ARRAY
14970: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
14971: LD_ADDR_VAR 0 7
14975: PUSH
14976: LD_VAR 0 7
14980: PUSH
14981: LD_VAR 0 6
14985: PUSH
14986: EMPTY
14987: LIST
14988: ADD
14989: ST_TO_ADDR
// end ;
14990: GO 14946
14992: POP
14993: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
14994: LD_ADDR_VAR 0 6
14998: PUSH
14999: LD_VAR 0 6
15003: PPUSH
15004: LD_VAR 0 2
15008: PUSH
15009: LD_VAR 0 2
15013: ARRAY
15014: PPUSH
15015: LD_VAR 0 3
15019: PPUSH
15020: CALL_OW 1
15024: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
15025: LD_ADDR_VAR 0 7
15029: PUSH
15030: LD_VAR 0 7
15034: PPUSH
15035: LD_VAR 0 7
15039: PPUSH
15040: LD_VAR 0 6
15044: PPUSH
15045: CALL_OW 1
15049: ST_TO_ADDR
// for i = s_arr downto 2 do
15050: LD_ADDR_VAR 0 5
15054: PUSH
15055: DOUBLE
15056: LD_VAR 0 7
15060: INC
15061: ST_TO_ADDR
15062: LD_INT 2
15064: PUSH
15065: FOR_DOWNTO
15066: IFFALSE 15150
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
15068: LD_ADDR_VAR 0 6
15072: PUSH
15073: LD_VAR 0 7
15077: PUSH
15078: LD_VAR 0 5
15082: PUSH
15083: LD_INT 1
15085: MINUS
15086: ARRAY
15087: PPUSH
15088: LD_VAR 0 2
15092: PUSH
15093: LD_VAR 0 5
15097: PUSH
15098: LD_INT 1
15100: MINUS
15101: ARRAY
15102: PPUSH
15103: LD_VAR 0 7
15107: PUSH
15108: LD_VAR 0 5
15112: ARRAY
15113: PPUSH
15114: CALL_OW 1
15118: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
15119: LD_ADDR_VAR 0 7
15123: PUSH
15124: LD_VAR 0 7
15128: PPUSH
15129: LD_VAR 0 5
15133: PUSH
15134: LD_INT 1
15136: MINUS
15137: PPUSH
15138: LD_VAR 0 6
15142: PPUSH
15143: CALL_OW 1
15147: ST_TO_ADDR
// end ;
15148: GO 15065
15150: POP
15151: POP
// result := s_arr [ 1 ] ;
15152: LD_ADDR_VAR 0 4
15156: PUSH
15157: LD_VAR 0 7
15161: PUSH
15162: LD_INT 1
15164: ARRAY
15165: ST_TO_ADDR
// end ; end ;
15166: LD_VAR 0 4
15170: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
15171: LD_INT 0
15173: PPUSH
15174: PPUSH
// if not list then
15175: LD_VAR 0 1
15179: NOT
15180: IFFALSE 15184
// exit ;
15182: GO 15275
// i := list [ pos1 ] ;
15184: LD_ADDR_VAR 0 5
15188: PUSH
15189: LD_VAR 0 1
15193: PUSH
15194: LD_VAR 0 2
15198: ARRAY
15199: ST_TO_ADDR
// if not i then
15200: LD_VAR 0 5
15204: NOT
15205: IFFALSE 15209
// exit ;
15207: GO 15275
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
15209: LD_ADDR_VAR 0 1
15213: PUSH
15214: LD_VAR 0 1
15218: PPUSH
15219: LD_VAR 0 2
15223: PPUSH
15224: LD_VAR 0 1
15228: PUSH
15229: LD_VAR 0 3
15233: ARRAY
15234: PPUSH
15235: CALL_OW 1
15239: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
15240: LD_ADDR_VAR 0 1
15244: PUSH
15245: LD_VAR 0 1
15249: PPUSH
15250: LD_VAR 0 3
15254: PPUSH
15255: LD_VAR 0 5
15259: PPUSH
15260: CALL_OW 1
15264: ST_TO_ADDR
// result := list ;
15265: LD_ADDR_VAR 0 4
15269: PUSH
15270: LD_VAR 0 1
15274: ST_TO_ADDR
// end ;
15275: LD_VAR 0 4
15279: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
15280: LD_INT 0
15282: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
15283: LD_ADDR_VAR 0 5
15287: PUSH
15288: LD_VAR 0 1
15292: PPUSH
15293: CALL_OW 250
15297: PPUSH
15298: LD_VAR 0 1
15302: PPUSH
15303: CALL_OW 251
15307: PPUSH
15308: LD_VAR 0 2
15312: PPUSH
15313: LD_VAR 0 3
15317: PPUSH
15318: LD_VAR 0 4
15322: PPUSH
15323: CALL 15701 0 5
15327: ST_TO_ADDR
// end ;
15328: LD_VAR 0 5
15332: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
15333: LD_INT 0
15335: PPUSH
15336: PPUSH
15337: PPUSH
15338: PPUSH
// if not list or not unit then
15339: LD_VAR 0 2
15343: NOT
15344: PUSH
15345: LD_VAR 0 1
15349: NOT
15350: OR
15351: IFFALSE 15355
// exit ;
15353: GO 15696
// result := [ ] ;
15355: LD_ADDR_VAR 0 5
15359: PUSH
15360: EMPTY
15361: ST_TO_ADDR
// for i in list do
15362: LD_ADDR_VAR 0 6
15366: PUSH
15367: LD_VAR 0 2
15371: PUSH
15372: FOR_IN
15373: IFFALSE 15591
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
15375: LD_ADDR_VAR 0 8
15379: PUSH
15380: LD_VAR 0 1
15384: PPUSH
15385: LD_VAR 0 6
15389: PUSH
15390: LD_INT 1
15392: ARRAY
15393: PPUSH
15394: LD_VAR 0 6
15398: PUSH
15399: LD_INT 2
15401: ARRAY
15402: PPUSH
15403: CALL_OW 297
15407: ST_TO_ADDR
// if not Count ( result ) then
15408: LD_VAR 0 5
15412: PPUSH
15413: CALL 11985 0 1
15417: NOT
15418: IFFALSE 15451
// begin result := Join ( result , [ i , tmp ] ) ;
15420: LD_ADDR_VAR 0 5
15424: PUSH
15425: LD_VAR 0 5
15429: PPUSH
15430: LD_VAR 0 6
15434: PUSH
15435: LD_VAR 0 8
15439: PUSH
15440: EMPTY
15441: LIST
15442: LIST
15443: PPUSH
15444: CALL 47594 0 2
15448: ST_TO_ADDR
// continue ;
15449: GO 15372
// end ; if result [ result ] [ 2 ] <= tmp then
15451: LD_VAR 0 5
15455: PUSH
15456: LD_VAR 0 5
15460: ARRAY
15461: PUSH
15462: LD_INT 2
15464: ARRAY
15465: PUSH
15466: LD_VAR 0 8
15470: LESSEQUAL
15471: IFFALSE 15504
// result := Join ( result , [ i , tmp ] ) else
15473: LD_ADDR_VAR 0 5
15477: PUSH
15478: LD_VAR 0 5
15482: PPUSH
15483: LD_VAR 0 6
15487: PUSH
15488: LD_VAR 0 8
15492: PUSH
15493: EMPTY
15494: LIST
15495: LIST
15496: PPUSH
15497: CALL 47594 0 2
15501: ST_TO_ADDR
15502: GO 15589
// begin for j := 1 to Count ( result ) do
15504: LD_ADDR_VAR 0 7
15508: PUSH
15509: DOUBLE
15510: LD_INT 1
15512: DEC
15513: ST_TO_ADDR
15514: LD_VAR 0 5
15518: PPUSH
15519: CALL 11985 0 1
15523: PUSH
15524: FOR_TO
15525: IFFALSE 15587
// begin if tmp < result [ j ] [ 2 ] then
15527: LD_VAR 0 8
15531: PUSH
15532: LD_VAR 0 5
15536: PUSH
15537: LD_VAR 0 7
15541: ARRAY
15542: PUSH
15543: LD_INT 2
15545: ARRAY
15546: LESS
15547: IFFALSE 15585
// begin result := Insert ( result , j , [ i , tmp ] ) ;
15549: LD_ADDR_VAR 0 5
15553: PUSH
15554: LD_VAR 0 5
15558: PPUSH
15559: LD_VAR 0 7
15563: PPUSH
15564: LD_VAR 0 6
15568: PUSH
15569: LD_VAR 0 8
15573: PUSH
15574: EMPTY
15575: LIST
15576: LIST
15577: PPUSH
15578: CALL_OW 2
15582: ST_TO_ADDR
// break ;
15583: GO 15587
// end ; end ;
15585: GO 15524
15587: POP
15588: POP
// end ; end ;
15589: GO 15372
15591: POP
15592: POP
// if result and not asc then
15593: LD_VAR 0 5
15597: PUSH
15598: LD_VAR 0 3
15602: NOT
15603: AND
15604: IFFALSE 15621
// result := ReverseArray ( result ) ;
15606: LD_ADDR_VAR 0 5
15610: PUSH
15611: LD_VAR 0 5
15615: PPUSH
15616: CALL 42861 0 1
15620: ST_TO_ADDR
// tmp := [ ] ;
15621: LD_ADDR_VAR 0 8
15625: PUSH
15626: EMPTY
15627: ST_TO_ADDR
// if mode then
15628: LD_VAR 0 4
15632: IFFALSE 15696
// begin for i := 1 to result do
15634: LD_ADDR_VAR 0 6
15638: PUSH
15639: DOUBLE
15640: LD_INT 1
15642: DEC
15643: ST_TO_ADDR
15644: LD_VAR 0 5
15648: PUSH
15649: FOR_TO
15650: IFFALSE 15684
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
15652: LD_ADDR_VAR 0 8
15656: PUSH
15657: LD_VAR 0 8
15661: PPUSH
15662: LD_VAR 0 5
15666: PUSH
15667: LD_VAR 0 6
15671: ARRAY
15672: PUSH
15673: LD_INT 1
15675: ARRAY
15676: PPUSH
15677: CALL 47594 0 2
15681: ST_TO_ADDR
15682: GO 15649
15684: POP
15685: POP
// result := tmp ;
15686: LD_ADDR_VAR 0 5
15690: PUSH
15691: LD_VAR 0 8
15695: ST_TO_ADDR
// end ; end ;
15696: LD_VAR 0 5
15700: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
15701: LD_INT 0
15703: PPUSH
15704: PPUSH
15705: PPUSH
15706: PPUSH
// if not list then
15707: LD_VAR 0 3
15711: NOT
15712: IFFALSE 15716
// exit ;
15714: GO 16104
// result := [ ] ;
15716: LD_ADDR_VAR 0 6
15720: PUSH
15721: EMPTY
15722: ST_TO_ADDR
// for i in list do
15723: LD_ADDR_VAR 0 7
15727: PUSH
15728: LD_VAR 0 3
15732: PUSH
15733: FOR_IN
15734: IFFALSE 15936
// begin tmp := GetDistUnitXY ( i , x , y ) ;
15736: LD_ADDR_VAR 0 9
15740: PUSH
15741: LD_VAR 0 7
15745: PPUSH
15746: LD_VAR 0 1
15750: PPUSH
15751: LD_VAR 0 2
15755: PPUSH
15756: CALL_OW 297
15760: ST_TO_ADDR
// if not result then
15761: LD_VAR 0 6
15765: NOT
15766: IFFALSE 15792
// result := [ [ i , tmp ] ] else
15768: LD_ADDR_VAR 0 6
15772: PUSH
15773: LD_VAR 0 7
15777: PUSH
15778: LD_VAR 0 9
15782: PUSH
15783: EMPTY
15784: LIST
15785: LIST
15786: PUSH
15787: EMPTY
15788: LIST
15789: ST_TO_ADDR
15790: GO 15934
// begin if result [ result ] [ 2 ] <= tmp then
15792: LD_VAR 0 6
15796: PUSH
15797: LD_VAR 0 6
15801: ARRAY
15802: PUSH
15803: LD_INT 2
15805: ARRAY
15806: PUSH
15807: LD_VAR 0 9
15811: LESSEQUAL
15812: IFFALSE 15854
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
15814: LD_ADDR_VAR 0 6
15818: PUSH
15819: LD_VAR 0 6
15823: PPUSH
15824: LD_VAR 0 6
15828: PUSH
15829: LD_INT 1
15831: PLUS
15832: PPUSH
15833: LD_VAR 0 7
15837: PUSH
15838: LD_VAR 0 9
15842: PUSH
15843: EMPTY
15844: LIST
15845: LIST
15846: PPUSH
15847: CALL_OW 2
15851: ST_TO_ADDR
15852: GO 15934
// for j := 1 to result do
15854: LD_ADDR_VAR 0 8
15858: PUSH
15859: DOUBLE
15860: LD_INT 1
15862: DEC
15863: ST_TO_ADDR
15864: LD_VAR 0 6
15868: PUSH
15869: FOR_TO
15870: IFFALSE 15932
// begin if tmp < result [ j ] [ 2 ] then
15872: LD_VAR 0 9
15876: PUSH
15877: LD_VAR 0 6
15881: PUSH
15882: LD_VAR 0 8
15886: ARRAY
15887: PUSH
15888: LD_INT 2
15890: ARRAY
15891: LESS
15892: IFFALSE 15930
// begin result := Insert ( result , j , [ i , tmp ] ) ;
15894: LD_ADDR_VAR 0 6
15898: PUSH
15899: LD_VAR 0 6
15903: PPUSH
15904: LD_VAR 0 8
15908: PPUSH
15909: LD_VAR 0 7
15913: PUSH
15914: LD_VAR 0 9
15918: PUSH
15919: EMPTY
15920: LIST
15921: LIST
15922: PPUSH
15923: CALL_OW 2
15927: ST_TO_ADDR
// break ;
15928: GO 15932
// end ; end ;
15930: GO 15869
15932: POP
15933: POP
// end ; end ;
15934: GO 15733
15936: POP
15937: POP
// if result and not asc then
15938: LD_VAR 0 6
15942: PUSH
15943: LD_VAR 0 4
15947: NOT
15948: AND
15949: IFFALSE 16024
// begin tmp := result ;
15951: LD_ADDR_VAR 0 9
15955: PUSH
15956: LD_VAR 0 6
15960: ST_TO_ADDR
// for i = tmp downto 1 do
15961: LD_ADDR_VAR 0 7
15965: PUSH
15966: DOUBLE
15967: LD_VAR 0 9
15971: INC
15972: ST_TO_ADDR
15973: LD_INT 1
15975: PUSH
15976: FOR_DOWNTO
15977: IFFALSE 16022
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
15979: LD_ADDR_VAR 0 6
15983: PUSH
15984: LD_VAR 0 6
15988: PPUSH
15989: LD_VAR 0 9
15993: PUSH
15994: LD_VAR 0 7
15998: MINUS
15999: PUSH
16000: LD_INT 1
16002: PLUS
16003: PPUSH
16004: LD_VAR 0 9
16008: PUSH
16009: LD_VAR 0 7
16013: ARRAY
16014: PPUSH
16015: CALL_OW 1
16019: ST_TO_ADDR
16020: GO 15976
16022: POP
16023: POP
// end ; tmp := [ ] ;
16024: LD_ADDR_VAR 0 9
16028: PUSH
16029: EMPTY
16030: ST_TO_ADDR
// if mode then
16031: LD_VAR 0 5
16035: IFFALSE 16104
// begin for i = 1 to result do
16037: LD_ADDR_VAR 0 7
16041: PUSH
16042: DOUBLE
16043: LD_INT 1
16045: DEC
16046: ST_TO_ADDR
16047: LD_VAR 0 6
16051: PUSH
16052: FOR_TO
16053: IFFALSE 16092
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
16055: LD_ADDR_VAR 0 9
16059: PUSH
16060: LD_VAR 0 9
16064: PPUSH
16065: LD_VAR 0 7
16069: PPUSH
16070: LD_VAR 0 6
16074: PUSH
16075: LD_VAR 0 7
16079: ARRAY
16080: PUSH
16081: LD_INT 1
16083: ARRAY
16084: PPUSH
16085: CALL_OW 1
16089: ST_TO_ADDR
16090: GO 16052
16092: POP
16093: POP
// result := tmp ;
16094: LD_ADDR_VAR 0 6
16098: PUSH
16099: LD_VAR 0 9
16103: ST_TO_ADDR
// end ; end ;
16104: LD_VAR 0 6
16108: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
16109: LD_INT 0
16111: PPUSH
16112: PPUSH
16113: PPUSH
16114: PPUSH
16115: PPUSH
16116: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
16117: LD_ADDR_VAR 0 5
16121: PUSH
16122: LD_INT 0
16124: PUSH
16125: LD_INT 0
16127: PUSH
16128: LD_INT 0
16130: PUSH
16131: EMPTY
16132: PUSH
16133: EMPTY
16134: LIST
16135: LIST
16136: LIST
16137: LIST
16138: ST_TO_ADDR
// if not x or not y then
16139: LD_VAR 0 2
16143: NOT
16144: PUSH
16145: LD_VAR 0 3
16149: NOT
16150: OR
16151: IFFALSE 16155
// exit ;
16153: GO 17805
// if not range then
16155: LD_VAR 0 4
16159: NOT
16160: IFFALSE 16170
// range := 10 ;
16162: LD_ADDR_VAR 0 4
16166: PUSH
16167: LD_INT 10
16169: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
16170: LD_ADDR_VAR 0 8
16174: PUSH
16175: LD_INT 81
16177: PUSH
16178: LD_VAR 0 1
16182: PUSH
16183: EMPTY
16184: LIST
16185: LIST
16186: PUSH
16187: LD_INT 92
16189: PUSH
16190: LD_VAR 0 2
16194: PUSH
16195: LD_VAR 0 3
16199: PUSH
16200: LD_VAR 0 4
16204: PUSH
16205: EMPTY
16206: LIST
16207: LIST
16208: LIST
16209: LIST
16210: PUSH
16211: LD_INT 3
16213: PUSH
16214: LD_INT 21
16216: PUSH
16217: LD_INT 3
16219: PUSH
16220: EMPTY
16221: LIST
16222: LIST
16223: PUSH
16224: EMPTY
16225: LIST
16226: LIST
16227: PUSH
16228: EMPTY
16229: LIST
16230: LIST
16231: LIST
16232: PPUSH
16233: CALL_OW 69
16237: ST_TO_ADDR
// if not tmp then
16238: LD_VAR 0 8
16242: NOT
16243: IFFALSE 16247
// exit ;
16245: GO 17805
// for i in tmp do
16247: LD_ADDR_VAR 0 6
16251: PUSH
16252: LD_VAR 0 8
16256: PUSH
16257: FOR_IN
16258: IFFALSE 17780
// begin points := [ 0 , 0 , 0 ] ;
16260: LD_ADDR_VAR 0 9
16264: PUSH
16265: LD_INT 0
16267: PUSH
16268: LD_INT 0
16270: PUSH
16271: LD_INT 0
16273: PUSH
16274: EMPTY
16275: LIST
16276: LIST
16277: LIST
16278: ST_TO_ADDR
// bpoints := 1 ;
16279: LD_ADDR_VAR 0 10
16283: PUSH
16284: LD_INT 1
16286: ST_TO_ADDR
// case GetType ( i ) of unit_human :
16287: LD_VAR 0 6
16291: PPUSH
16292: CALL_OW 247
16296: PUSH
16297: LD_INT 1
16299: DOUBLE
16300: EQUAL
16301: IFTRUE 16305
16303: GO 16883
16305: POP
// begin if GetClass ( i ) = 1 then
16306: LD_VAR 0 6
16310: PPUSH
16311: CALL_OW 257
16315: PUSH
16316: LD_INT 1
16318: EQUAL
16319: IFFALSE 16340
// points := [ 10 , 5 , 3 ] ;
16321: LD_ADDR_VAR 0 9
16325: PUSH
16326: LD_INT 10
16328: PUSH
16329: LD_INT 5
16331: PUSH
16332: LD_INT 3
16334: PUSH
16335: EMPTY
16336: LIST
16337: LIST
16338: LIST
16339: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
16340: LD_VAR 0 6
16344: PPUSH
16345: CALL_OW 257
16349: PUSH
16350: LD_INT 2
16352: PUSH
16353: LD_INT 3
16355: PUSH
16356: LD_INT 4
16358: PUSH
16359: EMPTY
16360: LIST
16361: LIST
16362: LIST
16363: IN
16364: IFFALSE 16385
// points := [ 3 , 2 , 1 ] ;
16366: LD_ADDR_VAR 0 9
16370: PUSH
16371: LD_INT 3
16373: PUSH
16374: LD_INT 2
16376: PUSH
16377: LD_INT 1
16379: PUSH
16380: EMPTY
16381: LIST
16382: LIST
16383: LIST
16384: ST_TO_ADDR
// if GetClass ( i ) = 5 then
16385: LD_VAR 0 6
16389: PPUSH
16390: CALL_OW 257
16394: PUSH
16395: LD_INT 5
16397: EQUAL
16398: IFFALSE 16419
// points := [ 130 , 5 , 2 ] ;
16400: LD_ADDR_VAR 0 9
16404: PUSH
16405: LD_INT 130
16407: PUSH
16408: LD_INT 5
16410: PUSH
16411: LD_INT 2
16413: PUSH
16414: EMPTY
16415: LIST
16416: LIST
16417: LIST
16418: ST_TO_ADDR
// if GetClass ( i ) = 8 then
16419: LD_VAR 0 6
16423: PPUSH
16424: CALL_OW 257
16428: PUSH
16429: LD_INT 8
16431: EQUAL
16432: IFFALSE 16453
// points := [ 35 , 35 , 30 ] ;
16434: LD_ADDR_VAR 0 9
16438: PUSH
16439: LD_INT 35
16441: PUSH
16442: LD_INT 35
16444: PUSH
16445: LD_INT 30
16447: PUSH
16448: EMPTY
16449: LIST
16450: LIST
16451: LIST
16452: ST_TO_ADDR
// if GetClass ( i ) = 9 then
16453: LD_VAR 0 6
16457: PPUSH
16458: CALL_OW 257
16462: PUSH
16463: LD_INT 9
16465: EQUAL
16466: IFFALSE 16487
// points := [ 20 , 55 , 40 ] ;
16468: LD_ADDR_VAR 0 9
16472: PUSH
16473: LD_INT 20
16475: PUSH
16476: LD_INT 55
16478: PUSH
16479: LD_INT 40
16481: PUSH
16482: EMPTY
16483: LIST
16484: LIST
16485: LIST
16486: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
16487: LD_VAR 0 6
16491: PPUSH
16492: CALL_OW 257
16496: PUSH
16497: LD_INT 12
16499: PUSH
16500: LD_INT 16
16502: PUSH
16503: EMPTY
16504: LIST
16505: LIST
16506: IN
16507: IFFALSE 16528
// points := [ 5 , 3 , 2 ] ;
16509: LD_ADDR_VAR 0 9
16513: PUSH
16514: LD_INT 5
16516: PUSH
16517: LD_INT 3
16519: PUSH
16520: LD_INT 2
16522: PUSH
16523: EMPTY
16524: LIST
16525: LIST
16526: LIST
16527: ST_TO_ADDR
// if GetClass ( i ) = 17 then
16528: LD_VAR 0 6
16532: PPUSH
16533: CALL_OW 257
16537: PUSH
16538: LD_INT 17
16540: EQUAL
16541: IFFALSE 16562
// points := [ 100 , 50 , 75 ] ;
16543: LD_ADDR_VAR 0 9
16547: PUSH
16548: LD_INT 100
16550: PUSH
16551: LD_INT 50
16553: PUSH
16554: LD_INT 75
16556: PUSH
16557: EMPTY
16558: LIST
16559: LIST
16560: LIST
16561: ST_TO_ADDR
// if GetClass ( i ) = 15 then
16562: LD_VAR 0 6
16566: PPUSH
16567: CALL_OW 257
16571: PUSH
16572: LD_INT 15
16574: EQUAL
16575: IFFALSE 16596
// points := [ 10 , 5 , 3 ] ;
16577: LD_ADDR_VAR 0 9
16581: PUSH
16582: LD_INT 10
16584: PUSH
16585: LD_INT 5
16587: PUSH
16588: LD_INT 3
16590: PUSH
16591: EMPTY
16592: LIST
16593: LIST
16594: LIST
16595: ST_TO_ADDR
// if GetClass ( i ) = 14 then
16596: LD_VAR 0 6
16600: PPUSH
16601: CALL_OW 257
16605: PUSH
16606: LD_INT 14
16608: EQUAL
16609: IFFALSE 16630
// points := [ 10 , 0 , 0 ] ;
16611: LD_ADDR_VAR 0 9
16615: PUSH
16616: LD_INT 10
16618: PUSH
16619: LD_INT 0
16621: PUSH
16622: LD_INT 0
16624: PUSH
16625: EMPTY
16626: LIST
16627: LIST
16628: LIST
16629: ST_TO_ADDR
// if GetClass ( i ) = 11 then
16630: LD_VAR 0 6
16634: PPUSH
16635: CALL_OW 257
16639: PUSH
16640: LD_INT 11
16642: EQUAL
16643: IFFALSE 16664
// points := [ 30 , 10 , 5 ] ;
16645: LD_ADDR_VAR 0 9
16649: PUSH
16650: LD_INT 30
16652: PUSH
16653: LD_INT 10
16655: PUSH
16656: LD_INT 5
16658: PUSH
16659: EMPTY
16660: LIST
16661: LIST
16662: LIST
16663: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
16664: LD_VAR 0 1
16668: PPUSH
16669: LD_INT 5
16671: PPUSH
16672: CALL_OW 321
16676: PUSH
16677: LD_INT 2
16679: EQUAL
16680: IFFALSE 16697
// bpoints := bpoints * 1.8 ;
16682: LD_ADDR_VAR 0 10
16686: PUSH
16687: LD_VAR 0 10
16691: PUSH
16692: LD_REAL  1.80000000000000E+0000
16695: MUL
16696: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
16697: LD_VAR 0 6
16701: PPUSH
16702: CALL_OW 257
16706: PUSH
16707: LD_INT 1
16709: PUSH
16710: LD_INT 2
16712: PUSH
16713: LD_INT 3
16715: PUSH
16716: LD_INT 4
16718: PUSH
16719: EMPTY
16720: LIST
16721: LIST
16722: LIST
16723: LIST
16724: IN
16725: PUSH
16726: LD_VAR 0 1
16730: PPUSH
16731: LD_INT 51
16733: PPUSH
16734: CALL_OW 321
16738: PUSH
16739: LD_INT 2
16741: EQUAL
16742: AND
16743: IFFALSE 16760
// bpoints := bpoints * 1.2 ;
16745: LD_ADDR_VAR 0 10
16749: PUSH
16750: LD_VAR 0 10
16754: PUSH
16755: LD_REAL  1.20000000000000E+0000
16758: MUL
16759: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
16760: LD_VAR 0 6
16764: PPUSH
16765: CALL_OW 257
16769: PUSH
16770: LD_INT 5
16772: PUSH
16773: LD_INT 7
16775: PUSH
16776: LD_INT 9
16778: PUSH
16779: EMPTY
16780: LIST
16781: LIST
16782: LIST
16783: IN
16784: PUSH
16785: LD_VAR 0 1
16789: PPUSH
16790: LD_INT 52
16792: PPUSH
16793: CALL_OW 321
16797: PUSH
16798: LD_INT 2
16800: EQUAL
16801: AND
16802: IFFALSE 16819
// bpoints := bpoints * 1.5 ;
16804: LD_ADDR_VAR 0 10
16808: PUSH
16809: LD_VAR 0 10
16813: PUSH
16814: LD_REAL  1.50000000000000E+0000
16817: MUL
16818: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
16819: LD_VAR 0 1
16823: PPUSH
16824: LD_INT 66
16826: PPUSH
16827: CALL_OW 321
16831: PUSH
16832: LD_INT 2
16834: EQUAL
16835: IFFALSE 16852
// bpoints := bpoints * 1.1 ;
16837: LD_ADDR_VAR 0 10
16841: PUSH
16842: LD_VAR 0 10
16846: PUSH
16847: LD_REAL  1.10000000000000E+0000
16850: MUL
16851: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
16852: LD_ADDR_VAR 0 10
16856: PUSH
16857: LD_VAR 0 10
16861: PUSH
16862: LD_VAR 0 6
16866: PPUSH
16867: LD_INT 1
16869: PPUSH
16870: CALL_OW 259
16874: PUSH
16875: LD_REAL  1.15000000000000E+0000
16878: MUL
16879: MUL
16880: ST_TO_ADDR
// end ; unit_vehicle :
16881: GO 17709
16883: LD_INT 2
16885: DOUBLE
16886: EQUAL
16887: IFTRUE 16891
16889: GO 17697
16891: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
16892: LD_VAR 0 6
16896: PPUSH
16897: CALL_OW 264
16901: PUSH
16902: LD_INT 2
16904: PUSH
16905: LD_INT 42
16907: PUSH
16908: LD_INT 24
16910: PUSH
16911: EMPTY
16912: LIST
16913: LIST
16914: LIST
16915: IN
16916: IFFALSE 16937
// points := [ 25 , 5 , 3 ] ;
16918: LD_ADDR_VAR 0 9
16922: PUSH
16923: LD_INT 25
16925: PUSH
16926: LD_INT 5
16928: PUSH
16929: LD_INT 3
16931: PUSH
16932: EMPTY
16933: LIST
16934: LIST
16935: LIST
16936: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
16937: LD_VAR 0 6
16941: PPUSH
16942: CALL_OW 264
16946: PUSH
16947: LD_INT 4
16949: PUSH
16950: LD_INT 43
16952: PUSH
16953: LD_INT 25
16955: PUSH
16956: EMPTY
16957: LIST
16958: LIST
16959: LIST
16960: IN
16961: IFFALSE 16982
// points := [ 40 , 15 , 5 ] ;
16963: LD_ADDR_VAR 0 9
16967: PUSH
16968: LD_INT 40
16970: PUSH
16971: LD_INT 15
16973: PUSH
16974: LD_INT 5
16976: PUSH
16977: EMPTY
16978: LIST
16979: LIST
16980: LIST
16981: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
16982: LD_VAR 0 6
16986: PPUSH
16987: CALL_OW 264
16991: PUSH
16992: LD_INT 3
16994: PUSH
16995: LD_INT 23
16997: PUSH
16998: EMPTY
16999: LIST
17000: LIST
17001: IN
17002: IFFALSE 17023
// points := [ 7 , 25 , 8 ] ;
17004: LD_ADDR_VAR 0 9
17008: PUSH
17009: LD_INT 7
17011: PUSH
17012: LD_INT 25
17014: PUSH
17015: LD_INT 8
17017: PUSH
17018: EMPTY
17019: LIST
17020: LIST
17021: LIST
17022: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
17023: LD_VAR 0 6
17027: PPUSH
17028: CALL_OW 264
17032: PUSH
17033: LD_INT 5
17035: PUSH
17036: LD_INT 27
17038: PUSH
17039: LD_INT 44
17041: PUSH
17042: EMPTY
17043: LIST
17044: LIST
17045: LIST
17046: IN
17047: IFFALSE 17068
// points := [ 14 , 50 , 16 ] ;
17049: LD_ADDR_VAR 0 9
17053: PUSH
17054: LD_INT 14
17056: PUSH
17057: LD_INT 50
17059: PUSH
17060: LD_INT 16
17062: PUSH
17063: EMPTY
17064: LIST
17065: LIST
17066: LIST
17067: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
17068: LD_VAR 0 6
17072: PPUSH
17073: CALL_OW 264
17077: PUSH
17078: LD_INT 6
17080: PUSH
17081: LD_INT 46
17083: PUSH
17084: EMPTY
17085: LIST
17086: LIST
17087: IN
17088: IFFALSE 17109
// points := [ 32 , 120 , 70 ] ;
17090: LD_ADDR_VAR 0 9
17094: PUSH
17095: LD_INT 32
17097: PUSH
17098: LD_INT 120
17100: PUSH
17101: LD_INT 70
17103: PUSH
17104: EMPTY
17105: LIST
17106: LIST
17107: LIST
17108: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
17109: LD_VAR 0 6
17113: PPUSH
17114: CALL_OW 264
17118: PUSH
17119: LD_INT 7
17121: PUSH
17122: LD_INT 28
17124: PUSH
17125: LD_INT 45
17127: PUSH
17128: LD_INT 92
17130: PUSH
17131: EMPTY
17132: LIST
17133: LIST
17134: LIST
17135: LIST
17136: IN
17137: IFFALSE 17158
// points := [ 35 , 20 , 45 ] ;
17139: LD_ADDR_VAR 0 9
17143: PUSH
17144: LD_INT 35
17146: PUSH
17147: LD_INT 20
17149: PUSH
17150: LD_INT 45
17152: PUSH
17153: EMPTY
17154: LIST
17155: LIST
17156: LIST
17157: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
17158: LD_VAR 0 6
17162: PPUSH
17163: CALL_OW 264
17167: PUSH
17168: LD_INT 47
17170: PUSH
17171: EMPTY
17172: LIST
17173: IN
17174: IFFALSE 17195
// points := [ 67 , 45 , 75 ] ;
17176: LD_ADDR_VAR 0 9
17180: PUSH
17181: LD_INT 67
17183: PUSH
17184: LD_INT 45
17186: PUSH
17187: LD_INT 75
17189: PUSH
17190: EMPTY
17191: LIST
17192: LIST
17193: LIST
17194: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
17195: LD_VAR 0 6
17199: PPUSH
17200: CALL_OW 264
17204: PUSH
17205: LD_INT 26
17207: PUSH
17208: EMPTY
17209: LIST
17210: IN
17211: IFFALSE 17232
// points := [ 120 , 30 , 80 ] ;
17213: LD_ADDR_VAR 0 9
17217: PUSH
17218: LD_INT 120
17220: PUSH
17221: LD_INT 30
17223: PUSH
17224: LD_INT 80
17226: PUSH
17227: EMPTY
17228: LIST
17229: LIST
17230: LIST
17231: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
17232: LD_VAR 0 6
17236: PPUSH
17237: CALL_OW 264
17241: PUSH
17242: LD_INT 22
17244: PUSH
17245: EMPTY
17246: LIST
17247: IN
17248: IFFALSE 17269
// points := [ 40 , 1 , 1 ] ;
17250: LD_ADDR_VAR 0 9
17254: PUSH
17255: LD_INT 40
17257: PUSH
17258: LD_INT 1
17260: PUSH
17261: LD_INT 1
17263: PUSH
17264: EMPTY
17265: LIST
17266: LIST
17267: LIST
17268: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
17269: LD_VAR 0 6
17273: PPUSH
17274: CALL_OW 264
17278: PUSH
17279: LD_INT 29
17281: PUSH
17282: EMPTY
17283: LIST
17284: IN
17285: IFFALSE 17306
// points := [ 70 , 200 , 400 ] ;
17287: LD_ADDR_VAR 0 9
17291: PUSH
17292: LD_INT 70
17294: PUSH
17295: LD_INT 200
17297: PUSH
17298: LD_INT 400
17300: PUSH
17301: EMPTY
17302: LIST
17303: LIST
17304: LIST
17305: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
17306: LD_VAR 0 6
17310: PPUSH
17311: CALL_OW 264
17315: PUSH
17316: LD_INT 14
17318: PUSH
17319: LD_INT 53
17321: PUSH
17322: EMPTY
17323: LIST
17324: LIST
17325: IN
17326: IFFALSE 17347
// points := [ 40 , 10 , 20 ] ;
17328: LD_ADDR_VAR 0 9
17332: PUSH
17333: LD_INT 40
17335: PUSH
17336: LD_INT 10
17338: PUSH
17339: LD_INT 20
17341: PUSH
17342: EMPTY
17343: LIST
17344: LIST
17345: LIST
17346: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
17347: LD_VAR 0 6
17351: PPUSH
17352: CALL_OW 264
17356: PUSH
17357: LD_INT 9
17359: PUSH
17360: EMPTY
17361: LIST
17362: IN
17363: IFFALSE 17384
// points := [ 5 , 70 , 20 ] ;
17365: LD_ADDR_VAR 0 9
17369: PUSH
17370: LD_INT 5
17372: PUSH
17373: LD_INT 70
17375: PUSH
17376: LD_INT 20
17378: PUSH
17379: EMPTY
17380: LIST
17381: LIST
17382: LIST
17383: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
17384: LD_VAR 0 6
17388: PPUSH
17389: CALL_OW 264
17393: PUSH
17394: LD_INT 10
17396: PUSH
17397: EMPTY
17398: LIST
17399: IN
17400: IFFALSE 17421
// points := [ 35 , 110 , 70 ] ;
17402: LD_ADDR_VAR 0 9
17406: PUSH
17407: LD_INT 35
17409: PUSH
17410: LD_INT 110
17412: PUSH
17413: LD_INT 70
17415: PUSH
17416: EMPTY
17417: LIST
17418: LIST
17419: LIST
17420: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
17421: LD_VAR 0 6
17425: PPUSH
17426: CALL_OW 265
17430: PUSH
17431: LD_INT 25
17433: EQUAL
17434: IFFALSE 17455
// points := [ 80 , 65 , 100 ] ;
17436: LD_ADDR_VAR 0 9
17440: PUSH
17441: LD_INT 80
17443: PUSH
17444: LD_INT 65
17446: PUSH
17447: LD_INT 100
17449: PUSH
17450: EMPTY
17451: LIST
17452: LIST
17453: LIST
17454: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
17455: LD_VAR 0 6
17459: PPUSH
17460: CALL_OW 263
17464: PUSH
17465: LD_INT 1
17467: EQUAL
17468: IFFALSE 17503
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
17470: LD_ADDR_VAR 0 10
17474: PUSH
17475: LD_VAR 0 10
17479: PUSH
17480: LD_VAR 0 6
17484: PPUSH
17485: CALL_OW 311
17489: PPUSH
17490: LD_INT 3
17492: PPUSH
17493: CALL_OW 259
17497: PUSH
17498: LD_INT 4
17500: MUL
17501: MUL
17502: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
17503: LD_VAR 0 6
17507: PPUSH
17508: CALL_OW 263
17512: PUSH
17513: LD_INT 2
17515: EQUAL
17516: IFFALSE 17567
// begin j := IsControledBy ( i ) ;
17518: LD_ADDR_VAR 0 7
17522: PUSH
17523: LD_VAR 0 6
17527: PPUSH
17528: CALL_OW 312
17532: ST_TO_ADDR
// if j then
17533: LD_VAR 0 7
17537: IFFALSE 17567
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
17539: LD_ADDR_VAR 0 10
17543: PUSH
17544: LD_VAR 0 10
17548: PUSH
17549: LD_VAR 0 7
17553: PPUSH
17554: LD_INT 3
17556: PPUSH
17557: CALL_OW 259
17561: PUSH
17562: LD_INT 3
17564: MUL
17565: MUL
17566: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
17567: LD_VAR 0 6
17571: PPUSH
17572: CALL_OW 264
17576: PUSH
17577: LD_INT 5
17579: PUSH
17580: LD_INT 6
17582: PUSH
17583: LD_INT 46
17585: PUSH
17586: LD_INT 44
17588: PUSH
17589: LD_INT 47
17591: PUSH
17592: LD_INT 45
17594: PUSH
17595: LD_INT 28
17597: PUSH
17598: LD_INT 7
17600: PUSH
17601: LD_INT 27
17603: PUSH
17604: LD_INT 29
17606: PUSH
17607: EMPTY
17608: LIST
17609: LIST
17610: LIST
17611: LIST
17612: LIST
17613: LIST
17614: LIST
17615: LIST
17616: LIST
17617: LIST
17618: IN
17619: PUSH
17620: LD_VAR 0 1
17624: PPUSH
17625: LD_INT 52
17627: PPUSH
17628: CALL_OW 321
17632: PUSH
17633: LD_INT 2
17635: EQUAL
17636: AND
17637: IFFALSE 17654
// bpoints := bpoints * 1.2 ;
17639: LD_ADDR_VAR 0 10
17643: PUSH
17644: LD_VAR 0 10
17648: PUSH
17649: LD_REAL  1.20000000000000E+0000
17652: MUL
17653: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
17654: LD_VAR 0 6
17658: PPUSH
17659: CALL_OW 264
17663: PUSH
17664: LD_INT 6
17666: PUSH
17667: LD_INT 46
17669: PUSH
17670: LD_INT 47
17672: PUSH
17673: EMPTY
17674: LIST
17675: LIST
17676: LIST
17677: IN
17678: IFFALSE 17695
// bpoints := bpoints * 1.2 ;
17680: LD_ADDR_VAR 0 10
17684: PUSH
17685: LD_VAR 0 10
17689: PUSH
17690: LD_REAL  1.20000000000000E+0000
17693: MUL
17694: ST_TO_ADDR
// end ; unit_building :
17695: GO 17709
17697: LD_INT 3
17699: DOUBLE
17700: EQUAL
17701: IFTRUE 17705
17703: GO 17708
17705: POP
// ; end ;
17706: GO 17709
17708: POP
// for j = 1 to 3 do
17709: LD_ADDR_VAR 0 7
17713: PUSH
17714: DOUBLE
17715: LD_INT 1
17717: DEC
17718: ST_TO_ADDR
17719: LD_INT 3
17721: PUSH
17722: FOR_TO
17723: IFFALSE 17776
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
17725: LD_ADDR_VAR 0 5
17729: PUSH
17730: LD_VAR 0 5
17734: PPUSH
17735: LD_VAR 0 7
17739: PPUSH
17740: LD_VAR 0 5
17744: PUSH
17745: LD_VAR 0 7
17749: ARRAY
17750: PUSH
17751: LD_VAR 0 9
17755: PUSH
17756: LD_VAR 0 7
17760: ARRAY
17761: PUSH
17762: LD_VAR 0 10
17766: MUL
17767: PLUS
17768: PPUSH
17769: CALL_OW 1
17773: ST_TO_ADDR
17774: GO 17722
17776: POP
17777: POP
// end ;
17778: GO 16257
17780: POP
17781: POP
// result := Replace ( result , 4 , tmp ) ;
17782: LD_ADDR_VAR 0 5
17786: PUSH
17787: LD_VAR 0 5
17791: PPUSH
17792: LD_INT 4
17794: PPUSH
17795: LD_VAR 0 8
17799: PPUSH
17800: CALL_OW 1
17804: ST_TO_ADDR
// end ;
17805: LD_VAR 0 5
17809: RET
// export function DangerAtRange ( unit , range ) ; begin
17810: LD_INT 0
17812: PPUSH
// if not unit then
17813: LD_VAR 0 1
17817: NOT
17818: IFFALSE 17822
// exit ;
17820: GO 17867
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
17822: LD_ADDR_VAR 0 3
17826: PUSH
17827: LD_VAR 0 1
17831: PPUSH
17832: CALL_OW 255
17836: PPUSH
17837: LD_VAR 0 1
17841: PPUSH
17842: CALL_OW 250
17846: PPUSH
17847: LD_VAR 0 1
17851: PPUSH
17852: CALL_OW 251
17856: PPUSH
17857: LD_VAR 0 2
17861: PPUSH
17862: CALL 16109 0 4
17866: ST_TO_ADDR
// end ;
17867: LD_VAR 0 3
17871: RET
// export function DangerInArea ( side , area ) ; begin
17872: LD_INT 0
17874: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
17875: LD_ADDR_VAR 0 3
17879: PUSH
17880: LD_VAR 0 2
17884: PPUSH
17885: LD_INT 81
17887: PUSH
17888: LD_VAR 0 1
17892: PUSH
17893: EMPTY
17894: LIST
17895: LIST
17896: PPUSH
17897: CALL_OW 70
17901: ST_TO_ADDR
// end ;
17902: LD_VAR 0 3
17906: RET
// export function IsExtension ( b ) ; begin
17907: LD_INT 0
17909: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
17910: LD_ADDR_VAR 0 2
17914: PUSH
17915: LD_VAR 0 1
17919: PUSH
17920: LD_INT 23
17922: PUSH
17923: LD_INT 20
17925: PUSH
17926: LD_INT 22
17928: PUSH
17929: LD_INT 17
17931: PUSH
17932: LD_INT 24
17934: PUSH
17935: LD_INT 21
17937: PUSH
17938: LD_INT 19
17940: PUSH
17941: LD_INT 16
17943: PUSH
17944: LD_INT 25
17946: PUSH
17947: LD_INT 18
17949: PUSH
17950: EMPTY
17951: LIST
17952: LIST
17953: LIST
17954: LIST
17955: LIST
17956: LIST
17957: LIST
17958: LIST
17959: LIST
17960: LIST
17961: IN
17962: ST_TO_ADDR
// end ;
17963: LD_VAR 0 2
17967: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
17968: LD_INT 0
17970: PPUSH
17971: PPUSH
17972: PPUSH
// result := [ ] ;
17973: LD_ADDR_VAR 0 4
17977: PUSH
17978: EMPTY
17979: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
17980: LD_ADDR_VAR 0 5
17984: PUSH
17985: LD_VAR 0 2
17989: PPUSH
17990: LD_INT 21
17992: PUSH
17993: LD_INT 3
17995: PUSH
17996: EMPTY
17997: LIST
17998: LIST
17999: PPUSH
18000: CALL_OW 70
18004: ST_TO_ADDR
// if not tmp then
18005: LD_VAR 0 5
18009: NOT
18010: IFFALSE 18014
// exit ;
18012: GO 18078
// if checkLink then
18014: LD_VAR 0 3
18018: IFFALSE 18068
// begin for i in tmp do
18020: LD_ADDR_VAR 0 6
18024: PUSH
18025: LD_VAR 0 5
18029: PUSH
18030: FOR_IN
18031: IFFALSE 18066
// if GetBase ( i ) <> base then
18033: LD_VAR 0 6
18037: PPUSH
18038: CALL_OW 274
18042: PUSH
18043: LD_VAR 0 1
18047: NONEQUAL
18048: IFFALSE 18064
// ComLinkToBase ( base , i ) ;
18050: LD_VAR 0 1
18054: PPUSH
18055: LD_VAR 0 6
18059: PPUSH
18060: CALL_OW 169
18064: GO 18030
18066: POP
18067: POP
// end ; result := tmp ;
18068: LD_ADDR_VAR 0 4
18072: PUSH
18073: LD_VAR 0 5
18077: ST_TO_ADDR
// end ;
18078: LD_VAR 0 4
18082: RET
// export function ComComplete ( units , b ) ; var i ; begin
18083: LD_INT 0
18085: PPUSH
18086: PPUSH
// if not units then
18087: LD_VAR 0 1
18091: NOT
18092: IFFALSE 18096
// exit ;
18094: GO 18186
// for i in units do
18096: LD_ADDR_VAR 0 4
18100: PUSH
18101: LD_VAR 0 1
18105: PUSH
18106: FOR_IN
18107: IFFALSE 18184
// if BuildingStatus ( b ) = bs_build then
18109: LD_VAR 0 2
18113: PPUSH
18114: CALL_OW 461
18118: PUSH
18119: LD_INT 1
18121: EQUAL
18122: IFFALSE 18182
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
18124: LD_VAR 0 4
18128: PPUSH
18129: LD_STRING h
18131: PUSH
18132: LD_VAR 0 2
18136: PPUSH
18137: CALL_OW 250
18141: PUSH
18142: LD_VAR 0 2
18146: PPUSH
18147: CALL_OW 251
18151: PUSH
18152: LD_VAR 0 2
18156: PUSH
18157: LD_INT 0
18159: PUSH
18160: LD_INT 0
18162: PUSH
18163: LD_INT 0
18165: PUSH
18166: EMPTY
18167: LIST
18168: LIST
18169: LIST
18170: LIST
18171: LIST
18172: LIST
18173: LIST
18174: PUSH
18175: EMPTY
18176: LIST
18177: PPUSH
18178: CALL_OW 446
18182: GO 18106
18184: POP
18185: POP
// end ;
18186: LD_VAR 0 3
18190: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
18191: LD_INT 0
18193: PPUSH
18194: PPUSH
18195: PPUSH
18196: PPUSH
18197: PPUSH
18198: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
18199: LD_VAR 0 1
18203: NOT
18204: PUSH
18205: LD_VAR 0 1
18209: PPUSH
18210: CALL_OW 263
18214: PUSH
18215: LD_INT 2
18217: NONEQUAL
18218: OR
18219: IFFALSE 18223
// exit ;
18221: GO 18539
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
18223: LD_ADDR_VAR 0 6
18227: PUSH
18228: LD_INT 22
18230: PUSH
18231: LD_VAR 0 1
18235: PPUSH
18236: CALL_OW 255
18240: PUSH
18241: EMPTY
18242: LIST
18243: LIST
18244: PUSH
18245: LD_INT 2
18247: PUSH
18248: LD_INT 30
18250: PUSH
18251: LD_INT 36
18253: PUSH
18254: EMPTY
18255: LIST
18256: LIST
18257: PUSH
18258: LD_INT 34
18260: PUSH
18261: LD_INT 31
18263: PUSH
18264: EMPTY
18265: LIST
18266: LIST
18267: PUSH
18268: EMPTY
18269: LIST
18270: LIST
18271: LIST
18272: PUSH
18273: EMPTY
18274: LIST
18275: LIST
18276: PPUSH
18277: CALL_OW 69
18281: ST_TO_ADDR
// if not tmp then
18282: LD_VAR 0 6
18286: NOT
18287: IFFALSE 18291
// exit ;
18289: GO 18539
// result := [ ] ;
18291: LD_ADDR_VAR 0 2
18295: PUSH
18296: EMPTY
18297: ST_TO_ADDR
// for i in tmp do
18298: LD_ADDR_VAR 0 3
18302: PUSH
18303: LD_VAR 0 6
18307: PUSH
18308: FOR_IN
18309: IFFALSE 18380
// begin t := UnitsInside ( i ) ;
18311: LD_ADDR_VAR 0 4
18315: PUSH
18316: LD_VAR 0 3
18320: PPUSH
18321: CALL_OW 313
18325: ST_TO_ADDR
// if t then
18326: LD_VAR 0 4
18330: IFFALSE 18378
// for j in t do
18332: LD_ADDR_VAR 0 7
18336: PUSH
18337: LD_VAR 0 4
18341: PUSH
18342: FOR_IN
18343: IFFALSE 18376
// result := Replace ( result , result + 1 , j ) ;
18345: LD_ADDR_VAR 0 2
18349: PUSH
18350: LD_VAR 0 2
18354: PPUSH
18355: LD_VAR 0 2
18359: PUSH
18360: LD_INT 1
18362: PLUS
18363: PPUSH
18364: LD_VAR 0 7
18368: PPUSH
18369: CALL_OW 1
18373: ST_TO_ADDR
18374: GO 18342
18376: POP
18377: POP
// end ;
18378: GO 18308
18380: POP
18381: POP
// if not result then
18382: LD_VAR 0 2
18386: NOT
18387: IFFALSE 18391
// exit ;
18389: GO 18539
// mech := result [ 1 ] ;
18391: LD_ADDR_VAR 0 5
18395: PUSH
18396: LD_VAR 0 2
18400: PUSH
18401: LD_INT 1
18403: ARRAY
18404: ST_TO_ADDR
// if result > 1 then
18405: LD_VAR 0 2
18409: PUSH
18410: LD_INT 1
18412: GREATER
18413: IFFALSE 18525
// begin for i = 2 to result do
18415: LD_ADDR_VAR 0 3
18419: PUSH
18420: DOUBLE
18421: LD_INT 2
18423: DEC
18424: ST_TO_ADDR
18425: LD_VAR 0 2
18429: PUSH
18430: FOR_TO
18431: IFFALSE 18523
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
18433: LD_ADDR_VAR 0 4
18437: PUSH
18438: LD_VAR 0 2
18442: PUSH
18443: LD_VAR 0 3
18447: ARRAY
18448: PPUSH
18449: LD_INT 3
18451: PPUSH
18452: CALL_OW 259
18456: PUSH
18457: LD_VAR 0 2
18461: PUSH
18462: LD_VAR 0 3
18466: ARRAY
18467: PPUSH
18468: CALL_OW 432
18472: MINUS
18473: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
18474: LD_VAR 0 4
18478: PUSH
18479: LD_VAR 0 5
18483: PPUSH
18484: LD_INT 3
18486: PPUSH
18487: CALL_OW 259
18491: PUSH
18492: LD_VAR 0 5
18496: PPUSH
18497: CALL_OW 432
18501: MINUS
18502: GREATEREQUAL
18503: IFFALSE 18521
// mech := result [ i ] ;
18505: LD_ADDR_VAR 0 5
18509: PUSH
18510: LD_VAR 0 2
18514: PUSH
18515: LD_VAR 0 3
18519: ARRAY
18520: ST_TO_ADDR
// end ;
18521: GO 18430
18523: POP
18524: POP
// end ; ComLinkTo ( vehicle , mech ) ;
18525: LD_VAR 0 1
18529: PPUSH
18530: LD_VAR 0 5
18534: PPUSH
18535: CALL_OW 135
// end ;
18539: LD_VAR 0 2
18543: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
18544: LD_INT 0
18546: PPUSH
18547: PPUSH
18548: PPUSH
18549: PPUSH
18550: PPUSH
18551: PPUSH
18552: PPUSH
18553: PPUSH
18554: PPUSH
18555: PPUSH
18556: PPUSH
18557: PPUSH
18558: PPUSH
// result := [ ] ;
18559: LD_ADDR_VAR 0 7
18563: PUSH
18564: EMPTY
18565: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
18566: LD_VAR 0 1
18570: PPUSH
18571: CALL_OW 266
18575: PUSH
18576: LD_INT 0
18578: PUSH
18579: LD_INT 1
18581: PUSH
18582: EMPTY
18583: LIST
18584: LIST
18585: IN
18586: NOT
18587: IFFALSE 18591
// exit ;
18589: GO 20225
// if name then
18591: LD_VAR 0 3
18595: IFFALSE 18611
// SetBName ( base_dep , name ) ;
18597: LD_VAR 0 1
18601: PPUSH
18602: LD_VAR 0 3
18606: PPUSH
18607: CALL_OW 500
// base := GetBase ( base_dep ) ;
18611: LD_ADDR_VAR 0 15
18615: PUSH
18616: LD_VAR 0 1
18620: PPUSH
18621: CALL_OW 274
18625: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
18626: LD_ADDR_VAR 0 16
18630: PUSH
18631: LD_VAR 0 1
18635: PPUSH
18636: CALL_OW 255
18640: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
18641: LD_ADDR_VAR 0 17
18645: PUSH
18646: LD_VAR 0 1
18650: PPUSH
18651: CALL_OW 248
18655: ST_TO_ADDR
// if sources then
18656: LD_VAR 0 5
18660: IFFALSE 18707
// for i = 1 to 3 do
18662: LD_ADDR_VAR 0 8
18666: PUSH
18667: DOUBLE
18668: LD_INT 1
18670: DEC
18671: ST_TO_ADDR
18672: LD_INT 3
18674: PUSH
18675: FOR_TO
18676: IFFALSE 18705
// AddResourceType ( base , i , sources [ i ] ) ;
18678: LD_VAR 0 15
18682: PPUSH
18683: LD_VAR 0 8
18687: PPUSH
18688: LD_VAR 0 5
18692: PUSH
18693: LD_VAR 0 8
18697: ARRAY
18698: PPUSH
18699: CALL_OW 276
18703: GO 18675
18705: POP
18706: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
18707: LD_ADDR_VAR 0 18
18711: PUSH
18712: LD_VAR 0 15
18716: PPUSH
18717: LD_VAR 0 2
18721: PPUSH
18722: LD_INT 1
18724: PPUSH
18725: CALL 17968 0 3
18729: ST_TO_ADDR
// InitHc ;
18730: CALL_OW 19
// InitUc ;
18734: CALL_OW 18
// uc_side := side ;
18738: LD_ADDR_OWVAR 20
18742: PUSH
18743: LD_VAR 0 16
18747: ST_TO_ADDR
// uc_nation := nation ;
18748: LD_ADDR_OWVAR 21
18752: PUSH
18753: LD_VAR 0 17
18757: ST_TO_ADDR
// if buildings then
18758: LD_VAR 0 18
18762: IFFALSE 20084
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
18764: LD_ADDR_VAR 0 19
18768: PUSH
18769: LD_VAR 0 18
18773: PPUSH
18774: LD_INT 2
18776: PUSH
18777: LD_INT 30
18779: PUSH
18780: LD_INT 29
18782: PUSH
18783: EMPTY
18784: LIST
18785: LIST
18786: PUSH
18787: LD_INT 30
18789: PUSH
18790: LD_INT 30
18792: PUSH
18793: EMPTY
18794: LIST
18795: LIST
18796: PUSH
18797: EMPTY
18798: LIST
18799: LIST
18800: LIST
18801: PPUSH
18802: CALL_OW 72
18806: ST_TO_ADDR
// if tmp then
18807: LD_VAR 0 19
18811: IFFALSE 18859
// for i in tmp do
18813: LD_ADDR_VAR 0 8
18817: PUSH
18818: LD_VAR 0 19
18822: PUSH
18823: FOR_IN
18824: IFFALSE 18857
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
18826: LD_VAR 0 8
18830: PPUSH
18831: CALL_OW 250
18835: PPUSH
18836: LD_VAR 0 8
18840: PPUSH
18841: CALL_OW 251
18845: PPUSH
18846: LD_VAR 0 16
18850: PPUSH
18851: CALL_OW 441
18855: GO 18823
18857: POP
18858: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
18859: LD_VAR 0 18
18863: PPUSH
18864: LD_INT 2
18866: PUSH
18867: LD_INT 30
18869: PUSH
18870: LD_INT 32
18872: PUSH
18873: EMPTY
18874: LIST
18875: LIST
18876: PUSH
18877: LD_INT 30
18879: PUSH
18880: LD_INT 33
18882: PUSH
18883: EMPTY
18884: LIST
18885: LIST
18886: PUSH
18887: EMPTY
18888: LIST
18889: LIST
18890: LIST
18891: PPUSH
18892: CALL_OW 72
18896: IFFALSE 18984
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
18898: LD_ADDR_VAR 0 8
18902: PUSH
18903: LD_VAR 0 18
18907: PPUSH
18908: LD_INT 2
18910: PUSH
18911: LD_INT 30
18913: PUSH
18914: LD_INT 32
18916: PUSH
18917: EMPTY
18918: LIST
18919: LIST
18920: PUSH
18921: LD_INT 30
18923: PUSH
18924: LD_INT 33
18926: PUSH
18927: EMPTY
18928: LIST
18929: LIST
18930: PUSH
18931: EMPTY
18932: LIST
18933: LIST
18934: LIST
18935: PPUSH
18936: CALL_OW 72
18940: PUSH
18941: FOR_IN
18942: IFFALSE 18982
// begin if not GetBWeapon ( i ) then
18944: LD_VAR 0 8
18948: PPUSH
18949: CALL_OW 269
18953: NOT
18954: IFFALSE 18980
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
18956: LD_VAR 0 8
18960: PPUSH
18961: LD_VAR 0 8
18965: PPUSH
18966: LD_VAR 0 2
18970: PPUSH
18971: CALL 20230 0 2
18975: PPUSH
18976: CALL_OW 431
// end ;
18980: GO 18941
18982: POP
18983: POP
// end ; for i = 1 to personel do
18984: LD_ADDR_VAR 0 8
18988: PUSH
18989: DOUBLE
18990: LD_INT 1
18992: DEC
18993: ST_TO_ADDR
18994: LD_VAR 0 6
18998: PUSH
18999: FOR_TO
19000: IFFALSE 20064
// begin if i > 4 then
19002: LD_VAR 0 8
19006: PUSH
19007: LD_INT 4
19009: GREATER
19010: IFFALSE 19014
// break ;
19012: GO 20064
// case i of 1 :
19014: LD_VAR 0 8
19018: PUSH
19019: LD_INT 1
19021: DOUBLE
19022: EQUAL
19023: IFTRUE 19027
19025: GO 19107
19027: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
19028: LD_ADDR_VAR 0 12
19032: PUSH
19033: LD_VAR 0 18
19037: PPUSH
19038: LD_INT 22
19040: PUSH
19041: LD_VAR 0 16
19045: PUSH
19046: EMPTY
19047: LIST
19048: LIST
19049: PUSH
19050: LD_INT 58
19052: PUSH
19053: EMPTY
19054: LIST
19055: PUSH
19056: LD_INT 2
19058: PUSH
19059: LD_INT 30
19061: PUSH
19062: LD_INT 32
19064: PUSH
19065: EMPTY
19066: LIST
19067: LIST
19068: PUSH
19069: LD_INT 30
19071: PUSH
19072: LD_INT 4
19074: PUSH
19075: EMPTY
19076: LIST
19077: LIST
19078: PUSH
19079: LD_INT 30
19081: PUSH
19082: LD_INT 5
19084: PUSH
19085: EMPTY
19086: LIST
19087: LIST
19088: PUSH
19089: EMPTY
19090: LIST
19091: LIST
19092: LIST
19093: LIST
19094: PUSH
19095: EMPTY
19096: LIST
19097: LIST
19098: LIST
19099: PPUSH
19100: CALL_OW 72
19104: ST_TO_ADDR
19105: GO 19329
19107: LD_INT 2
19109: DOUBLE
19110: EQUAL
19111: IFTRUE 19115
19113: GO 19177
19115: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
19116: LD_ADDR_VAR 0 12
19120: PUSH
19121: LD_VAR 0 18
19125: PPUSH
19126: LD_INT 22
19128: PUSH
19129: LD_VAR 0 16
19133: PUSH
19134: EMPTY
19135: LIST
19136: LIST
19137: PUSH
19138: LD_INT 2
19140: PUSH
19141: LD_INT 30
19143: PUSH
19144: LD_INT 0
19146: PUSH
19147: EMPTY
19148: LIST
19149: LIST
19150: PUSH
19151: LD_INT 30
19153: PUSH
19154: LD_INT 1
19156: PUSH
19157: EMPTY
19158: LIST
19159: LIST
19160: PUSH
19161: EMPTY
19162: LIST
19163: LIST
19164: LIST
19165: PUSH
19166: EMPTY
19167: LIST
19168: LIST
19169: PPUSH
19170: CALL_OW 72
19174: ST_TO_ADDR
19175: GO 19329
19177: LD_INT 3
19179: DOUBLE
19180: EQUAL
19181: IFTRUE 19185
19183: GO 19247
19185: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
19186: LD_ADDR_VAR 0 12
19190: PUSH
19191: LD_VAR 0 18
19195: PPUSH
19196: LD_INT 22
19198: PUSH
19199: LD_VAR 0 16
19203: PUSH
19204: EMPTY
19205: LIST
19206: LIST
19207: PUSH
19208: LD_INT 2
19210: PUSH
19211: LD_INT 30
19213: PUSH
19214: LD_INT 2
19216: PUSH
19217: EMPTY
19218: LIST
19219: LIST
19220: PUSH
19221: LD_INT 30
19223: PUSH
19224: LD_INT 3
19226: PUSH
19227: EMPTY
19228: LIST
19229: LIST
19230: PUSH
19231: EMPTY
19232: LIST
19233: LIST
19234: LIST
19235: PUSH
19236: EMPTY
19237: LIST
19238: LIST
19239: PPUSH
19240: CALL_OW 72
19244: ST_TO_ADDR
19245: GO 19329
19247: LD_INT 4
19249: DOUBLE
19250: EQUAL
19251: IFTRUE 19255
19253: GO 19328
19255: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
19256: LD_ADDR_VAR 0 12
19260: PUSH
19261: LD_VAR 0 18
19265: PPUSH
19266: LD_INT 22
19268: PUSH
19269: LD_VAR 0 16
19273: PUSH
19274: EMPTY
19275: LIST
19276: LIST
19277: PUSH
19278: LD_INT 2
19280: PUSH
19281: LD_INT 30
19283: PUSH
19284: LD_INT 6
19286: PUSH
19287: EMPTY
19288: LIST
19289: LIST
19290: PUSH
19291: LD_INT 30
19293: PUSH
19294: LD_INT 7
19296: PUSH
19297: EMPTY
19298: LIST
19299: LIST
19300: PUSH
19301: LD_INT 30
19303: PUSH
19304: LD_INT 8
19306: PUSH
19307: EMPTY
19308: LIST
19309: LIST
19310: PUSH
19311: EMPTY
19312: LIST
19313: LIST
19314: LIST
19315: LIST
19316: PUSH
19317: EMPTY
19318: LIST
19319: LIST
19320: PPUSH
19321: CALL_OW 72
19325: ST_TO_ADDR
19326: GO 19329
19328: POP
// if i = 1 then
19329: LD_VAR 0 8
19333: PUSH
19334: LD_INT 1
19336: EQUAL
19337: IFFALSE 19448
// begin tmp := [ ] ;
19339: LD_ADDR_VAR 0 19
19343: PUSH
19344: EMPTY
19345: ST_TO_ADDR
// for j in f do
19346: LD_ADDR_VAR 0 9
19350: PUSH
19351: LD_VAR 0 12
19355: PUSH
19356: FOR_IN
19357: IFFALSE 19430
// if GetBType ( j ) = b_bunker then
19359: LD_VAR 0 9
19363: PPUSH
19364: CALL_OW 266
19368: PUSH
19369: LD_INT 32
19371: EQUAL
19372: IFFALSE 19399
// tmp := Insert ( tmp , 1 , j ) else
19374: LD_ADDR_VAR 0 19
19378: PUSH
19379: LD_VAR 0 19
19383: PPUSH
19384: LD_INT 1
19386: PPUSH
19387: LD_VAR 0 9
19391: PPUSH
19392: CALL_OW 2
19396: ST_TO_ADDR
19397: GO 19428
// tmp := Insert ( tmp , tmp + 1 , j ) ;
19399: LD_ADDR_VAR 0 19
19403: PUSH
19404: LD_VAR 0 19
19408: PPUSH
19409: LD_VAR 0 19
19413: PUSH
19414: LD_INT 1
19416: PLUS
19417: PPUSH
19418: LD_VAR 0 9
19422: PPUSH
19423: CALL_OW 2
19427: ST_TO_ADDR
19428: GO 19356
19430: POP
19431: POP
// if tmp then
19432: LD_VAR 0 19
19436: IFFALSE 19448
// f := tmp ;
19438: LD_ADDR_VAR 0 12
19442: PUSH
19443: LD_VAR 0 19
19447: ST_TO_ADDR
// end ; x := personel [ i ] ;
19448: LD_ADDR_VAR 0 13
19452: PUSH
19453: LD_VAR 0 6
19457: PUSH
19458: LD_VAR 0 8
19462: ARRAY
19463: ST_TO_ADDR
// if x = - 1 then
19464: LD_VAR 0 13
19468: PUSH
19469: LD_INT 1
19471: NEG
19472: EQUAL
19473: IFFALSE 19682
// begin for j in f do
19475: LD_ADDR_VAR 0 9
19479: PUSH
19480: LD_VAR 0 12
19484: PUSH
19485: FOR_IN
19486: IFFALSE 19678
// repeat InitHc ;
19488: CALL_OW 19
// if GetBType ( j ) = b_barracks then
19492: LD_VAR 0 9
19496: PPUSH
19497: CALL_OW 266
19501: PUSH
19502: LD_INT 5
19504: EQUAL
19505: IFFALSE 19575
// begin if UnitsInside ( j ) < 3 then
19507: LD_VAR 0 9
19511: PPUSH
19512: CALL_OW 313
19516: PUSH
19517: LD_INT 3
19519: LESS
19520: IFFALSE 19556
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
19522: LD_INT 0
19524: PPUSH
19525: LD_INT 5
19527: PUSH
19528: LD_INT 8
19530: PUSH
19531: LD_INT 9
19533: PUSH
19534: EMPTY
19535: LIST
19536: LIST
19537: LIST
19538: PUSH
19539: LD_VAR 0 17
19543: ARRAY
19544: PPUSH
19545: LD_VAR 0 4
19549: PPUSH
19550: CALL_OW 380
19554: GO 19573
// PrepareHuman ( false , i , skill ) ;
19556: LD_INT 0
19558: PPUSH
19559: LD_VAR 0 8
19563: PPUSH
19564: LD_VAR 0 4
19568: PPUSH
19569: CALL_OW 380
// end else
19573: GO 19592
// PrepareHuman ( false , i , skill ) ;
19575: LD_INT 0
19577: PPUSH
19578: LD_VAR 0 8
19582: PPUSH
19583: LD_VAR 0 4
19587: PPUSH
19588: CALL_OW 380
// un := CreateHuman ;
19592: LD_ADDR_VAR 0 14
19596: PUSH
19597: CALL_OW 44
19601: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
19602: LD_ADDR_VAR 0 7
19606: PUSH
19607: LD_VAR 0 7
19611: PPUSH
19612: LD_INT 1
19614: PPUSH
19615: LD_VAR 0 14
19619: PPUSH
19620: CALL_OW 2
19624: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
19625: LD_VAR 0 14
19629: PPUSH
19630: LD_VAR 0 9
19634: PPUSH
19635: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
19639: LD_VAR 0 9
19643: PPUSH
19644: CALL_OW 313
19648: PUSH
19649: LD_INT 6
19651: EQUAL
19652: PUSH
19653: LD_VAR 0 9
19657: PPUSH
19658: CALL_OW 266
19662: PUSH
19663: LD_INT 32
19665: PUSH
19666: LD_INT 31
19668: PUSH
19669: EMPTY
19670: LIST
19671: LIST
19672: IN
19673: OR
19674: IFFALSE 19488
19676: GO 19485
19678: POP
19679: POP
// end else
19680: GO 20062
// for j = 1 to x do
19682: LD_ADDR_VAR 0 9
19686: PUSH
19687: DOUBLE
19688: LD_INT 1
19690: DEC
19691: ST_TO_ADDR
19692: LD_VAR 0 13
19696: PUSH
19697: FOR_TO
19698: IFFALSE 20060
// begin InitHc ;
19700: CALL_OW 19
// if not f then
19704: LD_VAR 0 12
19708: NOT
19709: IFFALSE 19798
// begin PrepareHuman ( false , i , skill ) ;
19711: LD_INT 0
19713: PPUSH
19714: LD_VAR 0 8
19718: PPUSH
19719: LD_VAR 0 4
19723: PPUSH
19724: CALL_OW 380
// un := CreateHuman ;
19728: LD_ADDR_VAR 0 14
19732: PUSH
19733: CALL_OW 44
19737: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
19738: LD_ADDR_VAR 0 7
19742: PUSH
19743: LD_VAR 0 7
19747: PPUSH
19748: LD_INT 1
19750: PPUSH
19751: LD_VAR 0 14
19755: PPUSH
19756: CALL_OW 2
19760: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
19761: LD_VAR 0 14
19765: PPUSH
19766: LD_VAR 0 1
19770: PPUSH
19771: CALL_OW 250
19775: PPUSH
19776: LD_VAR 0 1
19780: PPUSH
19781: CALL_OW 251
19785: PPUSH
19786: LD_INT 10
19788: PPUSH
19789: LD_INT 0
19791: PPUSH
19792: CALL_OW 50
// continue ;
19796: GO 19697
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
19798: LD_VAR 0 12
19802: PUSH
19803: LD_INT 1
19805: ARRAY
19806: PPUSH
19807: CALL_OW 313
19811: PUSH
19812: LD_VAR 0 12
19816: PUSH
19817: LD_INT 1
19819: ARRAY
19820: PPUSH
19821: CALL_OW 266
19825: PUSH
19826: LD_INT 32
19828: PUSH
19829: LD_INT 31
19831: PUSH
19832: EMPTY
19833: LIST
19834: LIST
19835: IN
19836: AND
19837: PUSH
19838: LD_VAR 0 12
19842: PUSH
19843: LD_INT 1
19845: ARRAY
19846: PPUSH
19847: CALL_OW 313
19851: PUSH
19852: LD_INT 6
19854: EQUAL
19855: OR
19856: IFFALSE 19876
// f := Delete ( f , 1 ) ;
19858: LD_ADDR_VAR 0 12
19862: PUSH
19863: LD_VAR 0 12
19867: PPUSH
19868: LD_INT 1
19870: PPUSH
19871: CALL_OW 3
19875: ST_TO_ADDR
// if not f then
19876: LD_VAR 0 12
19880: NOT
19881: IFFALSE 19899
// begin x := x + 2 ;
19883: LD_ADDR_VAR 0 13
19887: PUSH
19888: LD_VAR 0 13
19892: PUSH
19893: LD_INT 2
19895: PLUS
19896: ST_TO_ADDR
// continue ;
19897: GO 19697
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
19899: LD_VAR 0 12
19903: PUSH
19904: LD_INT 1
19906: ARRAY
19907: PPUSH
19908: CALL_OW 266
19912: PUSH
19913: LD_INT 5
19915: EQUAL
19916: IFFALSE 19990
// begin if UnitsInside ( f [ 1 ] ) < 3 then
19918: LD_VAR 0 12
19922: PUSH
19923: LD_INT 1
19925: ARRAY
19926: PPUSH
19927: CALL_OW 313
19931: PUSH
19932: LD_INT 3
19934: LESS
19935: IFFALSE 19971
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
19937: LD_INT 0
19939: PPUSH
19940: LD_INT 5
19942: PUSH
19943: LD_INT 8
19945: PUSH
19946: LD_INT 9
19948: PUSH
19949: EMPTY
19950: LIST
19951: LIST
19952: LIST
19953: PUSH
19954: LD_VAR 0 17
19958: ARRAY
19959: PPUSH
19960: LD_VAR 0 4
19964: PPUSH
19965: CALL_OW 380
19969: GO 19988
// PrepareHuman ( false , i , skill ) ;
19971: LD_INT 0
19973: PPUSH
19974: LD_VAR 0 8
19978: PPUSH
19979: LD_VAR 0 4
19983: PPUSH
19984: CALL_OW 380
// end else
19988: GO 20007
// PrepareHuman ( false , i , skill ) ;
19990: LD_INT 0
19992: PPUSH
19993: LD_VAR 0 8
19997: PPUSH
19998: LD_VAR 0 4
20002: PPUSH
20003: CALL_OW 380
// un := CreateHuman ;
20007: LD_ADDR_VAR 0 14
20011: PUSH
20012: CALL_OW 44
20016: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
20017: LD_ADDR_VAR 0 7
20021: PUSH
20022: LD_VAR 0 7
20026: PPUSH
20027: LD_INT 1
20029: PPUSH
20030: LD_VAR 0 14
20034: PPUSH
20035: CALL_OW 2
20039: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
20040: LD_VAR 0 14
20044: PPUSH
20045: LD_VAR 0 12
20049: PUSH
20050: LD_INT 1
20052: ARRAY
20053: PPUSH
20054: CALL_OW 52
// end ;
20058: GO 19697
20060: POP
20061: POP
// end ;
20062: GO 18999
20064: POP
20065: POP
// result := result ^ buildings ;
20066: LD_ADDR_VAR 0 7
20070: PUSH
20071: LD_VAR 0 7
20075: PUSH
20076: LD_VAR 0 18
20080: ADD
20081: ST_TO_ADDR
// end else
20082: GO 20225
// begin for i = 1 to personel do
20084: LD_ADDR_VAR 0 8
20088: PUSH
20089: DOUBLE
20090: LD_INT 1
20092: DEC
20093: ST_TO_ADDR
20094: LD_VAR 0 6
20098: PUSH
20099: FOR_TO
20100: IFFALSE 20223
// begin if i > 4 then
20102: LD_VAR 0 8
20106: PUSH
20107: LD_INT 4
20109: GREATER
20110: IFFALSE 20114
// break ;
20112: GO 20223
// x := personel [ i ] ;
20114: LD_ADDR_VAR 0 13
20118: PUSH
20119: LD_VAR 0 6
20123: PUSH
20124: LD_VAR 0 8
20128: ARRAY
20129: ST_TO_ADDR
// if x = - 1 then
20130: LD_VAR 0 13
20134: PUSH
20135: LD_INT 1
20137: NEG
20138: EQUAL
20139: IFFALSE 20143
// continue ;
20141: GO 20099
// PrepareHuman ( false , i , skill ) ;
20143: LD_INT 0
20145: PPUSH
20146: LD_VAR 0 8
20150: PPUSH
20151: LD_VAR 0 4
20155: PPUSH
20156: CALL_OW 380
// un := CreateHuman ;
20160: LD_ADDR_VAR 0 14
20164: PUSH
20165: CALL_OW 44
20169: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
20170: LD_VAR 0 14
20174: PPUSH
20175: LD_VAR 0 1
20179: PPUSH
20180: CALL_OW 250
20184: PPUSH
20185: LD_VAR 0 1
20189: PPUSH
20190: CALL_OW 251
20194: PPUSH
20195: LD_INT 10
20197: PPUSH
20198: LD_INT 0
20200: PPUSH
20201: CALL_OW 50
// result := result ^ un ;
20205: LD_ADDR_VAR 0 7
20209: PUSH
20210: LD_VAR 0 7
20214: PUSH
20215: LD_VAR 0 14
20219: ADD
20220: ST_TO_ADDR
// end ;
20221: GO 20099
20223: POP
20224: POP
// end ; end ;
20225: LD_VAR 0 7
20229: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
20230: LD_INT 0
20232: PPUSH
20233: PPUSH
20234: PPUSH
20235: PPUSH
20236: PPUSH
20237: PPUSH
20238: PPUSH
20239: PPUSH
20240: PPUSH
20241: PPUSH
20242: PPUSH
20243: PPUSH
20244: PPUSH
20245: PPUSH
20246: PPUSH
20247: PPUSH
// result := false ;
20248: LD_ADDR_VAR 0 3
20252: PUSH
20253: LD_INT 0
20255: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
20256: LD_VAR 0 1
20260: NOT
20261: PUSH
20262: LD_VAR 0 1
20266: PPUSH
20267: CALL_OW 266
20271: PUSH
20272: LD_INT 32
20274: PUSH
20275: LD_INT 33
20277: PUSH
20278: EMPTY
20279: LIST
20280: LIST
20281: IN
20282: NOT
20283: OR
20284: IFFALSE 20288
// exit ;
20286: GO 21397
// nat := GetNation ( tower ) ;
20288: LD_ADDR_VAR 0 12
20292: PUSH
20293: LD_VAR 0 1
20297: PPUSH
20298: CALL_OW 248
20302: ST_TO_ADDR
// side := GetSide ( tower ) ;
20303: LD_ADDR_VAR 0 16
20307: PUSH
20308: LD_VAR 0 1
20312: PPUSH
20313: CALL_OW 255
20317: ST_TO_ADDR
// x := GetX ( tower ) ;
20318: LD_ADDR_VAR 0 10
20322: PUSH
20323: LD_VAR 0 1
20327: PPUSH
20328: CALL_OW 250
20332: ST_TO_ADDR
// y := GetY ( tower ) ;
20333: LD_ADDR_VAR 0 11
20337: PUSH
20338: LD_VAR 0 1
20342: PPUSH
20343: CALL_OW 251
20347: ST_TO_ADDR
// if not x or not y then
20348: LD_VAR 0 10
20352: NOT
20353: PUSH
20354: LD_VAR 0 11
20358: NOT
20359: OR
20360: IFFALSE 20364
// exit ;
20362: GO 21397
// weapon := 0 ;
20364: LD_ADDR_VAR 0 18
20368: PUSH
20369: LD_INT 0
20371: ST_TO_ADDR
// fac_list := [ ] ;
20372: LD_ADDR_VAR 0 17
20376: PUSH
20377: EMPTY
20378: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
20379: LD_ADDR_VAR 0 6
20383: PUSH
20384: LD_VAR 0 1
20388: PPUSH
20389: CALL_OW 274
20393: PPUSH
20394: LD_VAR 0 2
20398: PPUSH
20399: LD_INT 0
20401: PPUSH
20402: CALL 17968 0 3
20406: PPUSH
20407: LD_INT 30
20409: PUSH
20410: LD_INT 3
20412: PUSH
20413: EMPTY
20414: LIST
20415: LIST
20416: PPUSH
20417: CALL_OW 72
20421: ST_TO_ADDR
// if not factories then
20422: LD_VAR 0 6
20426: NOT
20427: IFFALSE 20431
// exit ;
20429: GO 21397
// for i in factories do
20431: LD_ADDR_VAR 0 8
20435: PUSH
20436: LD_VAR 0 6
20440: PUSH
20441: FOR_IN
20442: IFFALSE 20467
// fac_list := fac_list union AvailableWeaponList ( i ) ;
20444: LD_ADDR_VAR 0 17
20448: PUSH
20449: LD_VAR 0 17
20453: PUSH
20454: LD_VAR 0 8
20458: PPUSH
20459: CALL_OW 478
20463: UNION
20464: ST_TO_ADDR
20465: GO 20441
20467: POP
20468: POP
// if not fac_list then
20469: LD_VAR 0 17
20473: NOT
20474: IFFALSE 20478
// exit ;
20476: GO 21397
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
20478: LD_ADDR_VAR 0 5
20482: PUSH
20483: LD_INT 4
20485: PUSH
20486: LD_INT 5
20488: PUSH
20489: LD_INT 9
20491: PUSH
20492: LD_INT 10
20494: PUSH
20495: LD_INT 6
20497: PUSH
20498: LD_INT 7
20500: PUSH
20501: LD_INT 11
20503: PUSH
20504: EMPTY
20505: LIST
20506: LIST
20507: LIST
20508: LIST
20509: LIST
20510: LIST
20511: LIST
20512: PUSH
20513: LD_INT 27
20515: PUSH
20516: LD_INT 28
20518: PUSH
20519: LD_INT 26
20521: PUSH
20522: LD_INT 30
20524: PUSH
20525: EMPTY
20526: LIST
20527: LIST
20528: LIST
20529: LIST
20530: PUSH
20531: LD_INT 43
20533: PUSH
20534: LD_INT 44
20536: PUSH
20537: LD_INT 46
20539: PUSH
20540: LD_INT 45
20542: PUSH
20543: LD_INT 47
20545: PUSH
20546: LD_INT 49
20548: PUSH
20549: EMPTY
20550: LIST
20551: LIST
20552: LIST
20553: LIST
20554: LIST
20555: LIST
20556: PUSH
20557: EMPTY
20558: LIST
20559: LIST
20560: LIST
20561: PUSH
20562: LD_VAR 0 12
20566: ARRAY
20567: ST_TO_ADDR
// list := list isect fac_list ;
20568: LD_ADDR_VAR 0 5
20572: PUSH
20573: LD_VAR 0 5
20577: PUSH
20578: LD_VAR 0 17
20582: ISECT
20583: ST_TO_ADDR
// if not list then
20584: LD_VAR 0 5
20588: NOT
20589: IFFALSE 20593
// exit ;
20591: GO 21397
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
20593: LD_VAR 0 12
20597: PUSH
20598: LD_INT 3
20600: EQUAL
20601: PUSH
20602: LD_INT 49
20604: PUSH
20605: LD_VAR 0 5
20609: IN
20610: AND
20611: PUSH
20612: LD_INT 31
20614: PPUSH
20615: LD_VAR 0 16
20619: PPUSH
20620: CALL_OW 321
20624: PUSH
20625: LD_INT 2
20627: EQUAL
20628: AND
20629: IFFALSE 20689
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
20631: LD_INT 22
20633: PUSH
20634: LD_VAR 0 16
20638: PUSH
20639: EMPTY
20640: LIST
20641: LIST
20642: PUSH
20643: LD_INT 35
20645: PUSH
20646: LD_INT 49
20648: PUSH
20649: EMPTY
20650: LIST
20651: LIST
20652: PUSH
20653: LD_INT 91
20655: PUSH
20656: LD_VAR 0 1
20660: PUSH
20661: LD_INT 10
20663: PUSH
20664: EMPTY
20665: LIST
20666: LIST
20667: LIST
20668: PUSH
20669: EMPTY
20670: LIST
20671: LIST
20672: LIST
20673: PPUSH
20674: CALL_OW 69
20678: NOT
20679: IFFALSE 20689
// weapon := ru_time_lapser ;
20681: LD_ADDR_VAR 0 18
20685: PUSH
20686: LD_INT 49
20688: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
20689: LD_VAR 0 12
20693: PUSH
20694: LD_INT 1
20696: PUSH
20697: LD_INT 2
20699: PUSH
20700: EMPTY
20701: LIST
20702: LIST
20703: IN
20704: PUSH
20705: LD_INT 11
20707: PUSH
20708: LD_VAR 0 5
20712: IN
20713: PUSH
20714: LD_INT 30
20716: PUSH
20717: LD_VAR 0 5
20721: IN
20722: OR
20723: AND
20724: PUSH
20725: LD_INT 6
20727: PPUSH
20728: LD_VAR 0 16
20732: PPUSH
20733: CALL_OW 321
20737: PUSH
20738: LD_INT 2
20740: EQUAL
20741: AND
20742: IFFALSE 20907
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
20744: LD_INT 22
20746: PUSH
20747: LD_VAR 0 16
20751: PUSH
20752: EMPTY
20753: LIST
20754: LIST
20755: PUSH
20756: LD_INT 2
20758: PUSH
20759: LD_INT 35
20761: PUSH
20762: LD_INT 11
20764: PUSH
20765: EMPTY
20766: LIST
20767: LIST
20768: PUSH
20769: LD_INT 35
20771: PUSH
20772: LD_INT 30
20774: PUSH
20775: EMPTY
20776: LIST
20777: LIST
20778: PUSH
20779: EMPTY
20780: LIST
20781: LIST
20782: LIST
20783: PUSH
20784: LD_INT 91
20786: PUSH
20787: LD_VAR 0 1
20791: PUSH
20792: LD_INT 18
20794: PUSH
20795: EMPTY
20796: LIST
20797: LIST
20798: LIST
20799: PUSH
20800: EMPTY
20801: LIST
20802: LIST
20803: LIST
20804: PPUSH
20805: CALL_OW 69
20809: NOT
20810: PUSH
20811: LD_INT 22
20813: PUSH
20814: LD_VAR 0 16
20818: PUSH
20819: EMPTY
20820: LIST
20821: LIST
20822: PUSH
20823: LD_INT 2
20825: PUSH
20826: LD_INT 30
20828: PUSH
20829: LD_INT 32
20831: PUSH
20832: EMPTY
20833: LIST
20834: LIST
20835: PUSH
20836: LD_INT 30
20838: PUSH
20839: LD_INT 33
20841: PUSH
20842: EMPTY
20843: LIST
20844: LIST
20845: PUSH
20846: EMPTY
20847: LIST
20848: LIST
20849: LIST
20850: PUSH
20851: LD_INT 91
20853: PUSH
20854: LD_VAR 0 1
20858: PUSH
20859: LD_INT 12
20861: PUSH
20862: EMPTY
20863: LIST
20864: LIST
20865: LIST
20866: PUSH
20867: EMPTY
20868: LIST
20869: LIST
20870: LIST
20871: PUSH
20872: EMPTY
20873: LIST
20874: PPUSH
20875: CALL_OW 69
20879: PUSH
20880: LD_INT 2
20882: GREATER
20883: AND
20884: IFFALSE 20907
// weapon := [ us_radar , ar_radar ] [ nat ] ;
20886: LD_ADDR_VAR 0 18
20890: PUSH
20891: LD_INT 11
20893: PUSH
20894: LD_INT 30
20896: PUSH
20897: EMPTY
20898: LIST
20899: LIST
20900: PUSH
20901: LD_VAR 0 12
20905: ARRAY
20906: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
20907: LD_VAR 0 18
20911: NOT
20912: PUSH
20913: LD_INT 40
20915: PPUSH
20916: LD_VAR 0 16
20920: PPUSH
20921: CALL_OW 321
20925: PUSH
20926: LD_INT 2
20928: EQUAL
20929: AND
20930: PUSH
20931: LD_INT 7
20933: PUSH
20934: LD_VAR 0 5
20938: IN
20939: PUSH
20940: LD_INT 28
20942: PUSH
20943: LD_VAR 0 5
20947: IN
20948: OR
20949: PUSH
20950: LD_INT 45
20952: PUSH
20953: LD_VAR 0 5
20957: IN
20958: OR
20959: AND
20960: IFFALSE 21214
// begin hex := GetHexInfo ( x , y ) ;
20962: LD_ADDR_VAR 0 4
20966: PUSH
20967: LD_VAR 0 10
20971: PPUSH
20972: LD_VAR 0 11
20976: PPUSH
20977: CALL_OW 546
20981: ST_TO_ADDR
// if hex [ 1 ] then
20982: LD_VAR 0 4
20986: PUSH
20987: LD_INT 1
20989: ARRAY
20990: IFFALSE 20994
// exit ;
20992: GO 21397
// height := hex [ 2 ] ;
20994: LD_ADDR_VAR 0 15
20998: PUSH
20999: LD_VAR 0 4
21003: PUSH
21004: LD_INT 2
21006: ARRAY
21007: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
21008: LD_ADDR_VAR 0 14
21012: PUSH
21013: LD_INT 0
21015: PUSH
21016: LD_INT 2
21018: PUSH
21019: LD_INT 3
21021: PUSH
21022: LD_INT 5
21024: PUSH
21025: EMPTY
21026: LIST
21027: LIST
21028: LIST
21029: LIST
21030: ST_TO_ADDR
// for i in tmp do
21031: LD_ADDR_VAR 0 8
21035: PUSH
21036: LD_VAR 0 14
21040: PUSH
21041: FOR_IN
21042: IFFALSE 21212
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
21044: LD_ADDR_VAR 0 9
21048: PUSH
21049: LD_VAR 0 10
21053: PPUSH
21054: LD_VAR 0 8
21058: PPUSH
21059: LD_INT 5
21061: PPUSH
21062: CALL_OW 272
21066: PUSH
21067: LD_VAR 0 11
21071: PPUSH
21072: LD_VAR 0 8
21076: PPUSH
21077: LD_INT 5
21079: PPUSH
21080: CALL_OW 273
21084: PUSH
21085: EMPTY
21086: LIST
21087: LIST
21088: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
21089: LD_VAR 0 9
21093: PUSH
21094: LD_INT 1
21096: ARRAY
21097: PPUSH
21098: LD_VAR 0 9
21102: PUSH
21103: LD_INT 2
21105: ARRAY
21106: PPUSH
21107: CALL_OW 488
21111: IFFALSE 21210
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
21113: LD_ADDR_VAR 0 4
21117: PUSH
21118: LD_VAR 0 9
21122: PUSH
21123: LD_INT 1
21125: ARRAY
21126: PPUSH
21127: LD_VAR 0 9
21131: PUSH
21132: LD_INT 2
21134: ARRAY
21135: PPUSH
21136: CALL_OW 546
21140: ST_TO_ADDR
// if hex [ 1 ] then
21141: LD_VAR 0 4
21145: PUSH
21146: LD_INT 1
21148: ARRAY
21149: IFFALSE 21153
// continue ;
21151: GO 21041
// h := hex [ 2 ] ;
21153: LD_ADDR_VAR 0 13
21157: PUSH
21158: LD_VAR 0 4
21162: PUSH
21163: LD_INT 2
21165: ARRAY
21166: ST_TO_ADDR
// if h + 7 < height then
21167: LD_VAR 0 13
21171: PUSH
21172: LD_INT 7
21174: PLUS
21175: PUSH
21176: LD_VAR 0 15
21180: LESS
21181: IFFALSE 21210
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
21183: LD_ADDR_VAR 0 18
21187: PUSH
21188: LD_INT 7
21190: PUSH
21191: LD_INT 28
21193: PUSH
21194: LD_INT 45
21196: PUSH
21197: EMPTY
21198: LIST
21199: LIST
21200: LIST
21201: PUSH
21202: LD_VAR 0 12
21206: ARRAY
21207: ST_TO_ADDR
// break ;
21208: GO 21212
// end ; end ; end ;
21210: GO 21041
21212: POP
21213: POP
// end ; if not weapon then
21214: LD_VAR 0 18
21218: NOT
21219: IFFALSE 21279
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
21221: LD_ADDR_VAR 0 5
21225: PUSH
21226: LD_VAR 0 5
21230: PUSH
21231: LD_INT 11
21233: PUSH
21234: LD_INT 30
21236: PUSH
21237: LD_INT 49
21239: PUSH
21240: EMPTY
21241: LIST
21242: LIST
21243: LIST
21244: DIFF
21245: ST_TO_ADDR
// if not list then
21246: LD_VAR 0 5
21250: NOT
21251: IFFALSE 21255
// exit ;
21253: GO 21397
// weapon := list [ rand ( 1 , list ) ] ;
21255: LD_ADDR_VAR 0 18
21259: PUSH
21260: LD_VAR 0 5
21264: PUSH
21265: LD_INT 1
21267: PPUSH
21268: LD_VAR 0 5
21272: PPUSH
21273: CALL_OW 12
21277: ARRAY
21278: ST_TO_ADDR
// end ; if weapon then
21279: LD_VAR 0 18
21283: IFFALSE 21397
// begin tmp := CostOfWeapon ( weapon ) ;
21285: LD_ADDR_VAR 0 14
21289: PUSH
21290: LD_VAR 0 18
21294: PPUSH
21295: CALL_OW 451
21299: ST_TO_ADDR
// j := GetBase ( tower ) ;
21300: LD_ADDR_VAR 0 9
21304: PUSH
21305: LD_VAR 0 1
21309: PPUSH
21310: CALL_OW 274
21314: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
21315: LD_VAR 0 9
21319: PPUSH
21320: LD_INT 1
21322: PPUSH
21323: CALL_OW 275
21327: PUSH
21328: LD_VAR 0 14
21332: PUSH
21333: LD_INT 1
21335: ARRAY
21336: GREATEREQUAL
21337: PUSH
21338: LD_VAR 0 9
21342: PPUSH
21343: LD_INT 2
21345: PPUSH
21346: CALL_OW 275
21350: PUSH
21351: LD_VAR 0 14
21355: PUSH
21356: LD_INT 2
21358: ARRAY
21359: GREATEREQUAL
21360: AND
21361: PUSH
21362: LD_VAR 0 9
21366: PPUSH
21367: LD_INT 3
21369: PPUSH
21370: CALL_OW 275
21374: PUSH
21375: LD_VAR 0 14
21379: PUSH
21380: LD_INT 3
21382: ARRAY
21383: GREATEREQUAL
21384: AND
21385: IFFALSE 21397
// result := weapon ;
21387: LD_ADDR_VAR 0 3
21391: PUSH
21392: LD_VAR 0 18
21396: ST_TO_ADDR
// end ; end ;
21397: LD_VAR 0 3
21401: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
21402: LD_INT 0
21404: PPUSH
21405: PPUSH
// result := true ;
21406: LD_ADDR_VAR 0 3
21410: PUSH
21411: LD_INT 1
21413: ST_TO_ADDR
// if array1 = array2 then
21414: LD_VAR 0 1
21418: PUSH
21419: LD_VAR 0 2
21423: EQUAL
21424: IFFALSE 21484
// begin for i = 1 to array1 do
21426: LD_ADDR_VAR 0 4
21430: PUSH
21431: DOUBLE
21432: LD_INT 1
21434: DEC
21435: ST_TO_ADDR
21436: LD_VAR 0 1
21440: PUSH
21441: FOR_TO
21442: IFFALSE 21480
// if array1 [ i ] <> array2 [ i ] then
21444: LD_VAR 0 1
21448: PUSH
21449: LD_VAR 0 4
21453: ARRAY
21454: PUSH
21455: LD_VAR 0 2
21459: PUSH
21460: LD_VAR 0 4
21464: ARRAY
21465: NONEQUAL
21466: IFFALSE 21478
// begin result := false ;
21468: LD_ADDR_VAR 0 3
21472: PUSH
21473: LD_INT 0
21475: ST_TO_ADDR
// break ;
21476: GO 21480
// end ;
21478: GO 21441
21480: POP
21481: POP
// end else
21482: GO 21492
// result := false ;
21484: LD_ADDR_VAR 0 3
21488: PUSH
21489: LD_INT 0
21491: ST_TO_ADDR
// end ;
21492: LD_VAR 0 3
21496: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
21497: LD_INT 0
21499: PPUSH
21500: PPUSH
// if not array1 or not array2 then
21501: LD_VAR 0 1
21505: NOT
21506: PUSH
21507: LD_VAR 0 2
21511: NOT
21512: OR
21513: IFFALSE 21517
// exit ;
21515: GO 21581
// result := true ;
21517: LD_ADDR_VAR 0 3
21521: PUSH
21522: LD_INT 1
21524: ST_TO_ADDR
// for i = 1 to array1 do
21525: LD_ADDR_VAR 0 4
21529: PUSH
21530: DOUBLE
21531: LD_INT 1
21533: DEC
21534: ST_TO_ADDR
21535: LD_VAR 0 1
21539: PUSH
21540: FOR_TO
21541: IFFALSE 21579
// if array1 [ i ] <> array2 [ i ] then
21543: LD_VAR 0 1
21547: PUSH
21548: LD_VAR 0 4
21552: ARRAY
21553: PUSH
21554: LD_VAR 0 2
21558: PUSH
21559: LD_VAR 0 4
21563: ARRAY
21564: NONEQUAL
21565: IFFALSE 21577
// begin result := false ;
21567: LD_ADDR_VAR 0 3
21571: PUSH
21572: LD_INT 0
21574: ST_TO_ADDR
// break ;
21575: GO 21579
// end ;
21577: GO 21540
21579: POP
21580: POP
// end ;
21581: LD_VAR 0 3
21585: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
21586: LD_INT 0
21588: PPUSH
21589: PPUSH
21590: PPUSH
// pom := GetBase ( fac ) ;
21591: LD_ADDR_VAR 0 5
21595: PUSH
21596: LD_VAR 0 1
21600: PPUSH
21601: CALL_OW 274
21605: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
21606: LD_ADDR_VAR 0 4
21610: PUSH
21611: LD_VAR 0 2
21615: PUSH
21616: LD_INT 1
21618: ARRAY
21619: PPUSH
21620: LD_VAR 0 2
21624: PUSH
21625: LD_INT 2
21627: ARRAY
21628: PPUSH
21629: LD_VAR 0 2
21633: PUSH
21634: LD_INT 3
21636: ARRAY
21637: PPUSH
21638: LD_VAR 0 2
21642: PUSH
21643: LD_INT 4
21645: ARRAY
21646: PPUSH
21647: CALL_OW 449
21651: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
21652: LD_ADDR_VAR 0 3
21656: PUSH
21657: LD_VAR 0 5
21661: PPUSH
21662: LD_INT 1
21664: PPUSH
21665: CALL_OW 275
21669: PUSH
21670: LD_VAR 0 4
21674: PUSH
21675: LD_INT 1
21677: ARRAY
21678: GREATEREQUAL
21679: PUSH
21680: LD_VAR 0 5
21684: PPUSH
21685: LD_INT 2
21687: PPUSH
21688: CALL_OW 275
21692: PUSH
21693: LD_VAR 0 4
21697: PUSH
21698: LD_INT 2
21700: ARRAY
21701: GREATEREQUAL
21702: AND
21703: PUSH
21704: LD_VAR 0 5
21708: PPUSH
21709: LD_INT 3
21711: PPUSH
21712: CALL_OW 275
21716: PUSH
21717: LD_VAR 0 4
21721: PUSH
21722: LD_INT 3
21724: ARRAY
21725: GREATEREQUAL
21726: AND
21727: ST_TO_ADDR
// end ;
21728: LD_VAR 0 3
21732: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
21733: LD_INT 0
21735: PPUSH
21736: PPUSH
21737: PPUSH
21738: PPUSH
// pom := GetBase ( building ) ;
21739: LD_ADDR_VAR 0 3
21743: PUSH
21744: LD_VAR 0 1
21748: PPUSH
21749: CALL_OW 274
21753: ST_TO_ADDR
// if not pom then
21754: LD_VAR 0 3
21758: NOT
21759: IFFALSE 21763
// exit ;
21761: GO 21933
// btype := GetBType ( building ) ;
21763: LD_ADDR_VAR 0 5
21767: PUSH
21768: LD_VAR 0 1
21772: PPUSH
21773: CALL_OW 266
21777: ST_TO_ADDR
// if btype = b_armoury then
21778: LD_VAR 0 5
21782: PUSH
21783: LD_INT 4
21785: EQUAL
21786: IFFALSE 21796
// btype := b_barracks ;
21788: LD_ADDR_VAR 0 5
21792: PUSH
21793: LD_INT 5
21795: ST_TO_ADDR
// if btype = b_depot then
21796: LD_VAR 0 5
21800: PUSH
21801: LD_INT 0
21803: EQUAL
21804: IFFALSE 21814
// btype := b_warehouse ;
21806: LD_ADDR_VAR 0 5
21810: PUSH
21811: LD_INT 1
21813: ST_TO_ADDR
// if btype = b_workshop then
21814: LD_VAR 0 5
21818: PUSH
21819: LD_INT 2
21821: EQUAL
21822: IFFALSE 21832
// btype := b_factory ;
21824: LD_ADDR_VAR 0 5
21828: PUSH
21829: LD_INT 3
21831: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
21832: LD_ADDR_VAR 0 4
21836: PUSH
21837: LD_VAR 0 5
21841: PPUSH
21842: LD_VAR 0 1
21846: PPUSH
21847: CALL_OW 248
21851: PPUSH
21852: CALL_OW 450
21856: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
21857: LD_ADDR_VAR 0 2
21861: PUSH
21862: LD_VAR 0 3
21866: PPUSH
21867: LD_INT 1
21869: PPUSH
21870: CALL_OW 275
21874: PUSH
21875: LD_VAR 0 4
21879: PUSH
21880: LD_INT 1
21882: ARRAY
21883: GREATEREQUAL
21884: PUSH
21885: LD_VAR 0 3
21889: PPUSH
21890: LD_INT 2
21892: PPUSH
21893: CALL_OW 275
21897: PUSH
21898: LD_VAR 0 4
21902: PUSH
21903: LD_INT 2
21905: ARRAY
21906: GREATEREQUAL
21907: AND
21908: PUSH
21909: LD_VAR 0 3
21913: PPUSH
21914: LD_INT 3
21916: PPUSH
21917: CALL_OW 275
21921: PUSH
21922: LD_VAR 0 4
21926: PUSH
21927: LD_INT 3
21929: ARRAY
21930: GREATEREQUAL
21931: AND
21932: ST_TO_ADDR
// end ;
21933: LD_VAR 0 2
21937: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
21938: LD_INT 0
21940: PPUSH
21941: PPUSH
21942: PPUSH
// pom := GetBase ( building ) ;
21943: LD_ADDR_VAR 0 4
21947: PUSH
21948: LD_VAR 0 1
21952: PPUSH
21953: CALL_OW 274
21957: ST_TO_ADDR
// if not pom then
21958: LD_VAR 0 4
21962: NOT
21963: IFFALSE 21967
// exit ;
21965: GO 22068
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
21967: LD_ADDR_VAR 0 5
21971: PUSH
21972: LD_VAR 0 2
21976: PPUSH
21977: LD_VAR 0 1
21981: PPUSH
21982: CALL_OW 248
21986: PPUSH
21987: CALL_OW 450
21991: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
21992: LD_ADDR_VAR 0 3
21996: PUSH
21997: LD_VAR 0 4
22001: PPUSH
22002: LD_INT 1
22004: PPUSH
22005: CALL_OW 275
22009: PUSH
22010: LD_VAR 0 5
22014: PUSH
22015: LD_INT 1
22017: ARRAY
22018: GREATEREQUAL
22019: PUSH
22020: LD_VAR 0 4
22024: PPUSH
22025: LD_INT 2
22027: PPUSH
22028: CALL_OW 275
22032: PUSH
22033: LD_VAR 0 5
22037: PUSH
22038: LD_INT 2
22040: ARRAY
22041: GREATEREQUAL
22042: AND
22043: PUSH
22044: LD_VAR 0 4
22048: PPUSH
22049: LD_INT 3
22051: PPUSH
22052: CALL_OW 275
22056: PUSH
22057: LD_VAR 0 5
22061: PUSH
22062: LD_INT 3
22064: ARRAY
22065: GREATEREQUAL
22066: AND
22067: ST_TO_ADDR
// end ;
22068: LD_VAR 0 3
22072: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
22073: LD_INT 0
22075: PPUSH
22076: PPUSH
22077: PPUSH
22078: PPUSH
22079: PPUSH
22080: PPUSH
22081: PPUSH
22082: PPUSH
22083: PPUSH
22084: PPUSH
22085: PPUSH
// result := false ;
22086: LD_ADDR_VAR 0 8
22090: PUSH
22091: LD_INT 0
22093: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
22094: LD_VAR 0 5
22098: NOT
22099: PUSH
22100: LD_VAR 0 1
22104: NOT
22105: OR
22106: PUSH
22107: LD_VAR 0 2
22111: NOT
22112: OR
22113: PUSH
22114: LD_VAR 0 3
22118: NOT
22119: OR
22120: IFFALSE 22124
// exit ;
22122: GO 22938
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
22124: LD_ADDR_VAR 0 14
22128: PUSH
22129: LD_VAR 0 1
22133: PPUSH
22134: LD_VAR 0 2
22138: PPUSH
22139: LD_VAR 0 3
22143: PPUSH
22144: LD_VAR 0 4
22148: PPUSH
22149: LD_VAR 0 5
22153: PUSH
22154: LD_INT 1
22156: ARRAY
22157: PPUSH
22158: CALL_OW 248
22162: PPUSH
22163: LD_INT 0
22165: PPUSH
22166: CALL 24191 0 6
22170: ST_TO_ADDR
// if not hexes then
22171: LD_VAR 0 14
22175: NOT
22176: IFFALSE 22180
// exit ;
22178: GO 22938
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
22180: LD_ADDR_VAR 0 17
22184: PUSH
22185: LD_VAR 0 5
22189: PPUSH
22190: LD_INT 22
22192: PUSH
22193: LD_VAR 0 13
22197: PPUSH
22198: CALL_OW 255
22202: PUSH
22203: EMPTY
22204: LIST
22205: LIST
22206: PUSH
22207: LD_INT 2
22209: PUSH
22210: LD_INT 30
22212: PUSH
22213: LD_INT 0
22215: PUSH
22216: EMPTY
22217: LIST
22218: LIST
22219: PUSH
22220: LD_INT 30
22222: PUSH
22223: LD_INT 1
22225: PUSH
22226: EMPTY
22227: LIST
22228: LIST
22229: PUSH
22230: EMPTY
22231: LIST
22232: LIST
22233: LIST
22234: PUSH
22235: EMPTY
22236: LIST
22237: LIST
22238: PPUSH
22239: CALL_OW 72
22243: ST_TO_ADDR
// for i = 1 to hexes do
22244: LD_ADDR_VAR 0 9
22248: PUSH
22249: DOUBLE
22250: LD_INT 1
22252: DEC
22253: ST_TO_ADDR
22254: LD_VAR 0 14
22258: PUSH
22259: FOR_TO
22260: IFFALSE 22936
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
22262: LD_ADDR_VAR 0 13
22266: PUSH
22267: LD_VAR 0 14
22271: PUSH
22272: LD_VAR 0 9
22276: ARRAY
22277: PUSH
22278: LD_INT 1
22280: ARRAY
22281: PPUSH
22282: LD_VAR 0 14
22286: PUSH
22287: LD_VAR 0 9
22291: ARRAY
22292: PUSH
22293: LD_INT 2
22295: ARRAY
22296: PPUSH
22297: CALL_OW 428
22301: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
22302: LD_VAR 0 14
22306: PUSH
22307: LD_VAR 0 9
22311: ARRAY
22312: PUSH
22313: LD_INT 1
22315: ARRAY
22316: PPUSH
22317: LD_VAR 0 14
22321: PUSH
22322: LD_VAR 0 9
22326: ARRAY
22327: PUSH
22328: LD_INT 2
22330: ARRAY
22331: PPUSH
22332: CALL_OW 351
22336: PUSH
22337: LD_VAR 0 14
22341: PUSH
22342: LD_VAR 0 9
22346: ARRAY
22347: PUSH
22348: LD_INT 1
22350: ARRAY
22351: PPUSH
22352: LD_VAR 0 14
22356: PUSH
22357: LD_VAR 0 9
22361: ARRAY
22362: PUSH
22363: LD_INT 2
22365: ARRAY
22366: PPUSH
22367: CALL_OW 488
22371: NOT
22372: OR
22373: PUSH
22374: LD_VAR 0 13
22378: PPUSH
22379: CALL_OW 247
22383: PUSH
22384: LD_INT 3
22386: EQUAL
22387: OR
22388: IFFALSE 22394
// exit ;
22390: POP
22391: POP
22392: GO 22938
// if not tmp then
22394: LD_VAR 0 13
22398: NOT
22399: IFFALSE 22403
// continue ;
22401: GO 22259
// result := true ;
22403: LD_ADDR_VAR 0 8
22407: PUSH
22408: LD_INT 1
22410: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
22411: LD_VAR 0 6
22415: PUSH
22416: LD_VAR 0 13
22420: PPUSH
22421: CALL_OW 247
22425: PUSH
22426: LD_INT 2
22428: EQUAL
22429: AND
22430: PUSH
22431: LD_VAR 0 13
22435: PPUSH
22436: CALL_OW 263
22440: PUSH
22441: LD_INT 1
22443: EQUAL
22444: AND
22445: IFFALSE 22609
// begin if IsDrivenBy ( tmp ) then
22447: LD_VAR 0 13
22451: PPUSH
22452: CALL_OW 311
22456: IFFALSE 22460
// continue ;
22458: GO 22259
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
22460: LD_VAR 0 6
22464: PPUSH
22465: LD_INT 3
22467: PUSH
22468: LD_INT 60
22470: PUSH
22471: EMPTY
22472: LIST
22473: PUSH
22474: EMPTY
22475: LIST
22476: LIST
22477: PUSH
22478: LD_INT 3
22480: PUSH
22481: LD_INT 55
22483: PUSH
22484: EMPTY
22485: LIST
22486: PUSH
22487: EMPTY
22488: LIST
22489: LIST
22490: PUSH
22491: EMPTY
22492: LIST
22493: LIST
22494: PPUSH
22495: CALL_OW 72
22499: IFFALSE 22607
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
22501: LD_ADDR_VAR 0 18
22505: PUSH
22506: LD_VAR 0 6
22510: PPUSH
22511: LD_INT 3
22513: PUSH
22514: LD_INT 60
22516: PUSH
22517: EMPTY
22518: LIST
22519: PUSH
22520: EMPTY
22521: LIST
22522: LIST
22523: PUSH
22524: LD_INT 3
22526: PUSH
22527: LD_INT 55
22529: PUSH
22530: EMPTY
22531: LIST
22532: PUSH
22533: EMPTY
22534: LIST
22535: LIST
22536: PUSH
22537: EMPTY
22538: LIST
22539: LIST
22540: PPUSH
22541: CALL_OW 72
22545: PUSH
22546: LD_INT 1
22548: ARRAY
22549: ST_TO_ADDR
// if IsInUnit ( driver ) then
22550: LD_VAR 0 18
22554: PPUSH
22555: CALL_OW 310
22559: IFFALSE 22570
// ComExit ( driver ) ;
22561: LD_VAR 0 18
22565: PPUSH
22566: CALL 47992 0 1
// AddComEnterUnit ( driver , tmp ) ;
22570: LD_VAR 0 18
22574: PPUSH
22575: LD_VAR 0 13
22579: PPUSH
22580: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
22584: LD_VAR 0 18
22588: PPUSH
22589: LD_VAR 0 7
22593: PPUSH
22594: CALL_OW 173
// AddComExitVehicle ( driver ) ;
22598: LD_VAR 0 18
22602: PPUSH
22603: CALL_OW 181
// end ; continue ;
22607: GO 22259
// end ; if not cleaners or not tmp in cleaners then
22609: LD_VAR 0 6
22613: NOT
22614: PUSH
22615: LD_VAR 0 13
22619: PUSH
22620: LD_VAR 0 6
22624: IN
22625: NOT
22626: OR
22627: IFFALSE 22934
// begin if dep then
22629: LD_VAR 0 17
22633: IFFALSE 22769
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
22635: LD_ADDR_VAR 0 16
22639: PUSH
22640: LD_VAR 0 17
22644: PUSH
22645: LD_INT 1
22647: ARRAY
22648: PPUSH
22649: CALL_OW 250
22653: PPUSH
22654: LD_VAR 0 17
22658: PUSH
22659: LD_INT 1
22661: ARRAY
22662: PPUSH
22663: CALL_OW 254
22667: PPUSH
22668: LD_INT 5
22670: PPUSH
22671: CALL_OW 272
22675: PUSH
22676: LD_VAR 0 17
22680: PUSH
22681: LD_INT 1
22683: ARRAY
22684: PPUSH
22685: CALL_OW 251
22689: PPUSH
22690: LD_VAR 0 17
22694: PUSH
22695: LD_INT 1
22697: ARRAY
22698: PPUSH
22699: CALL_OW 254
22703: PPUSH
22704: LD_INT 5
22706: PPUSH
22707: CALL_OW 273
22711: PUSH
22712: EMPTY
22713: LIST
22714: LIST
22715: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
22716: LD_VAR 0 16
22720: PUSH
22721: LD_INT 1
22723: ARRAY
22724: PPUSH
22725: LD_VAR 0 16
22729: PUSH
22730: LD_INT 2
22732: ARRAY
22733: PPUSH
22734: CALL_OW 488
22738: IFFALSE 22769
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
22740: LD_VAR 0 13
22744: PPUSH
22745: LD_VAR 0 16
22749: PUSH
22750: LD_INT 1
22752: ARRAY
22753: PPUSH
22754: LD_VAR 0 16
22758: PUSH
22759: LD_INT 2
22761: ARRAY
22762: PPUSH
22763: CALL_OW 111
// continue ;
22767: GO 22259
// end ; end ; r := GetDir ( tmp ) ;
22769: LD_ADDR_VAR 0 15
22773: PUSH
22774: LD_VAR 0 13
22778: PPUSH
22779: CALL_OW 254
22783: ST_TO_ADDR
// if r = 5 then
22784: LD_VAR 0 15
22788: PUSH
22789: LD_INT 5
22791: EQUAL
22792: IFFALSE 22802
// r := 0 ;
22794: LD_ADDR_VAR 0 15
22798: PUSH
22799: LD_INT 0
22801: ST_TO_ADDR
// for j = r to 5 do
22802: LD_ADDR_VAR 0 10
22806: PUSH
22807: DOUBLE
22808: LD_VAR 0 15
22812: DEC
22813: ST_TO_ADDR
22814: LD_INT 5
22816: PUSH
22817: FOR_TO
22818: IFFALSE 22932
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
22820: LD_ADDR_VAR 0 11
22824: PUSH
22825: LD_VAR 0 13
22829: PPUSH
22830: CALL_OW 250
22834: PPUSH
22835: LD_VAR 0 10
22839: PPUSH
22840: LD_INT 2
22842: PPUSH
22843: CALL_OW 272
22847: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
22848: LD_ADDR_VAR 0 12
22852: PUSH
22853: LD_VAR 0 13
22857: PPUSH
22858: CALL_OW 251
22862: PPUSH
22863: LD_VAR 0 10
22867: PPUSH
22868: LD_INT 2
22870: PPUSH
22871: CALL_OW 273
22875: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
22876: LD_VAR 0 11
22880: PPUSH
22881: LD_VAR 0 12
22885: PPUSH
22886: CALL_OW 488
22890: PUSH
22891: LD_VAR 0 11
22895: PPUSH
22896: LD_VAR 0 12
22900: PPUSH
22901: CALL_OW 428
22905: NOT
22906: AND
22907: IFFALSE 22930
// begin ComMoveXY ( tmp , _x , _y ) ;
22909: LD_VAR 0 13
22913: PPUSH
22914: LD_VAR 0 11
22918: PPUSH
22919: LD_VAR 0 12
22923: PPUSH
22924: CALL_OW 111
// break ;
22928: GO 22932
// end ; end ;
22930: GO 22817
22932: POP
22933: POP
// end ; end ;
22934: GO 22259
22936: POP
22937: POP
// end ;
22938: LD_VAR 0 8
22942: RET
// export function BuildingTechInvented ( side , btype ) ; begin
22943: LD_INT 0
22945: PPUSH
// result := true ;
22946: LD_ADDR_VAR 0 3
22950: PUSH
22951: LD_INT 1
22953: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
22954: LD_VAR 0 2
22958: PUSH
22959: LD_INT 24
22961: DOUBLE
22962: EQUAL
22963: IFTRUE 22973
22965: LD_INT 33
22967: DOUBLE
22968: EQUAL
22969: IFTRUE 22973
22971: GO 22998
22973: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
22974: LD_ADDR_VAR 0 3
22978: PUSH
22979: LD_INT 32
22981: PPUSH
22982: LD_VAR 0 1
22986: PPUSH
22987: CALL_OW 321
22991: PUSH
22992: LD_INT 2
22994: EQUAL
22995: ST_TO_ADDR
22996: GO 23314
22998: LD_INT 20
23000: DOUBLE
23001: EQUAL
23002: IFTRUE 23006
23004: GO 23031
23006: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
23007: LD_ADDR_VAR 0 3
23011: PUSH
23012: LD_INT 6
23014: PPUSH
23015: LD_VAR 0 1
23019: PPUSH
23020: CALL_OW 321
23024: PUSH
23025: LD_INT 2
23027: EQUAL
23028: ST_TO_ADDR
23029: GO 23314
23031: LD_INT 22
23033: DOUBLE
23034: EQUAL
23035: IFTRUE 23045
23037: LD_INT 36
23039: DOUBLE
23040: EQUAL
23041: IFTRUE 23045
23043: GO 23070
23045: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
23046: LD_ADDR_VAR 0 3
23050: PUSH
23051: LD_INT 15
23053: PPUSH
23054: LD_VAR 0 1
23058: PPUSH
23059: CALL_OW 321
23063: PUSH
23064: LD_INT 2
23066: EQUAL
23067: ST_TO_ADDR
23068: GO 23314
23070: LD_INT 30
23072: DOUBLE
23073: EQUAL
23074: IFTRUE 23078
23076: GO 23103
23078: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
23079: LD_ADDR_VAR 0 3
23083: PUSH
23084: LD_INT 20
23086: PPUSH
23087: LD_VAR 0 1
23091: PPUSH
23092: CALL_OW 321
23096: PUSH
23097: LD_INT 2
23099: EQUAL
23100: ST_TO_ADDR
23101: GO 23314
23103: LD_INT 28
23105: DOUBLE
23106: EQUAL
23107: IFTRUE 23117
23109: LD_INT 21
23111: DOUBLE
23112: EQUAL
23113: IFTRUE 23117
23115: GO 23142
23117: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
23118: LD_ADDR_VAR 0 3
23122: PUSH
23123: LD_INT 21
23125: PPUSH
23126: LD_VAR 0 1
23130: PPUSH
23131: CALL_OW 321
23135: PUSH
23136: LD_INT 2
23138: EQUAL
23139: ST_TO_ADDR
23140: GO 23314
23142: LD_INT 16
23144: DOUBLE
23145: EQUAL
23146: IFTRUE 23150
23148: GO 23175
23150: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
23151: LD_ADDR_VAR 0 3
23155: PUSH
23156: LD_INT 84
23158: PPUSH
23159: LD_VAR 0 1
23163: PPUSH
23164: CALL_OW 321
23168: PUSH
23169: LD_INT 2
23171: EQUAL
23172: ST_TO_ADDR
23173: GO 23314
23175: LD_INT 19
23177: DOUBLE
23178: EQUAL
23179: IFTRUE 23189
23181: LD_INT 23
23183: DOUBLE
23184: EQUAL
23185: IFTRUE 23189
23187: GO 23214
23189: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
23190: LD_ADDR_VAR 0 3
23194: PUSH
23195: LD_INT 83
23197: PPUSH
23198: LD_VAR 0 1
23202: PPUSH
23203: CALL_OW 321
23207: PUSH
23208: LD_INT 2
23210: EQUAL
23211: ST_TO_ADDR
23212: GO 23314
23214: LD_INT 17
23216: DOUBLE
23217: EQUAL
23218: IFTRUE 23222
23220: GO 23247
23222: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
23223: LD_ADDR_VAR 0 3
23227: PUSH
23228: LD_INT 39
23230: PPUSH
23231: LD_VAR 0 1
23235: PPUSH
23236: CALL_OW 321
23240: PUSH
23241: LD_INT 2
23243: EQUAL
23244: ST_TO_ADDR
23245: GO 23314
23247: LD_INT 18
23249: DOUBLE
23250: EQUAL
23251: IFTRUE 23255
23253: GO 23280
23255: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
23256: LD_ADDR_VAR 0 3
23260: PUSH
23261: LD_INT 40
23263: PPUSH
23264: LD_VAR 0 1
23268: PPUSH
23269: CALL_OW 321
23273: PUSH
23274: LD_INT 2
23276: EQUAL
23277: ST_TO_ADDR
23278: GO 23314
23280: LD_INT 27
23282: DOUBLE
23283: EQUAL
23284: IFTRUE 23288
23286: GO 23313
23288: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
23289: LD_ADDR_VAR 0 3
23293: PUSH
23294: LD_INT 35
23296: PPUSH
23297: LD_VAR 0 1
23301: PPUSH
23302: CALL_OW 321
23306: PUSH
23307: LD_INT 2
23309: EQUAL
23310: ST_TO_ADDR
23311: GO 23314
23313: POP
// end ;
23314: LD_VAR 0 3
23318: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
23319: LD_INT 0
23321: PPUSH
23322: PPUSH
23323: PPUSH
23324: PPUSH
23325: PPUSH
23326: PPUSH
23327: PPUSH
23328: PPUSH
23329: PPUSH
23330: PPUSH
23331: PPUSH
// result := false ;
23332: LD_ADDR_VAR 0 6
23336: PUSH
23337: LD_INT 0
23339: ST_TO_ADDR
// if btype = b_depot then
23340: LD_VAR 0 2
23344: PUSH
23345: LD_INT 0
23347: EQUAL
23348: IFFALSE 23360
// begin result := true ;
23350: LD_ADDR_VAR 0 6
23354: PUSH
23355: LD_INT 1
23357: ST_TO_ADDR
// exit ;
23358: GO 24186
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
23360: LD_VAR 0 1
23364: NOT
23365: PUSH
23366: LD_VAR 0 1
23370: PPUSH
23371: CALL_OW 266
23375: PUSH
23376: LD_INT 0
23378: PUSH
23379: LD_INT 1
23381: PUSH
23382: EMPTY
23383: LIST
23384: LIST
23385: IN
23386: NOT
23387: OR
23388: PUSH
23389: LD_VAR 0 2
23393: NOT
23394: OR
23395: PUSH
23396: LD_VAR 0 5
23400: PUSH
23401: LD_INT 0
23403: PUSH
23404: LD_INT 1
23406: PUSH
23407: LD_INT 2
23409: PUSH
23410: LD_INT 3
23412: PUSH
23413: LD_INT 4
23415: PUSH
23416: LD_INT 5
23418: PUSH
23419: EMPTY
23420: LIST
23421: LIST
23422: LIST
23423: LIST
23424: LIST
23425: LIST
23426: IN
23427: NOT
23428: OR
23429: PUSH
23430: LD_VAR 0 3
23434: PPUSH
23435: LD_VAR 0 4
23439: PPUSH
23440: CALL_OW 488
23444: NOT
23445: OR
23446: IFFALSE 23450
// exit ;
23448: GO 24186
// side := GetSide ( depot ) ;
23450: LD_ADDR_VAR 0 9
23454: PUSH
23455: LD_VAR 0 1
23459: PPUSH
23460: CALL_OW 255
23464: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
23465: LD_VAR 0 9
23469: PPUSH
23470: LD_VAR 0 2
23474: PPUSH
23475: CALL 22943 0 2
23479: NOT
23480: IFFALSE 23484
// exit ;
23482: GO 24186
// pom := GetBase ( depot ) ;
23484: LD_ADDR_VAR 0 10
23488: PUSH
23489: LD_VAR 0 1
23493: PPUSH
23494: CALL_OW 274
23498: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
23499: LD_ADDR_VAR 0 11
23503: PUSH
23504: LD_VAR 0 2
23508: PPUSH
23509: LD_VAR 0 1
23513: PPUSH
23514: CALL_OW 248
23518: PPUSH
23519: CALL_OW 450
23523: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
23524: LD_VAR 0 10
23528: PPUSH
23529: LD_INT 1
23531: PPUSH
23532: CALL_OW 275
23536: PUSH
23537: LD_VAR 0 11
23541: PUSH
23542: LD_INT 1
23544: ARRAY
23545: GREATEREQUAL
23546: PUSH
23547: LD_VAR 0 10
23551: PPUSH
23552: LD_INT 2
23554: PPUSH
23555: CALL_OW 275
23559: PUSH
23560: LD_VAR 0 11
23564: PUSH
23565: LD_INT 2
23567: ARRAY
23568: GREATEREQUAL
23569: AND
23570: PUSH
23571: LD_VAR 0 10
23575: PPUSH
23576: LD_INT 3
23578: PPUSH
23579: CALL_OW 275
23583: PUSH
23584: LD_VAR 0 11
23588: PUSH
23589: LD_INT 3
23591: ARRAY
23592: GREATEREQUAL
23593: AND
23594: NOT
23595: IFFALSE 23599
// exit ;
23597: GO 24186
// if GetBType ( depot ) = b_depot then
23599: LD_VAR 0 1
23603: PPUSH
23604: CALL_OW 266
23608: PUSH
23609: LD_INT 0
23611: EQUAL
23612: IFFALSE 23624
// dist := 28 else
23614: LD_ADDR_VAR 0 14
23618: PUSH
23619: LD_INT 28
23621: ST_TO_ADDR
23622: GO 23632
// dist := 36 ;
23624: LD_ADDR_VAR 0 14
23628: PUSH
23629: LD_INT 36
23631: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
23632: LD_VAR 0 1
23636: PPUSH
23637: LD_VAR 0 3
23641: PPUSH
23642: LD_VAR 0 4
23646: PPUSH
23647: CALL_OW 297
23651: PUSH
23652: LD_VAR 0 14
23656: GREATER
23657: IFFALSE 23661
// exit ;
23659: GO 24186
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
23661: LD_ADDR_VAR 0 12
23665: PUSH
23666: LD_VAR 0 2
23670: PPUSH
23671: LD_VAR 0 3
23675: PPUSH
23676: LD_VAR 0 4
23680: PPUSH
23681: LD_VAR 0 5
23685: PPUSH
23686: LD_VAR 0 1
23690: PPUSH
23691: CALL_OW 248
23695: PPUSH
23696: LD_INT 0
23698: PPUSH
23699: CALL 24191 0 6
23703: ST_TO_ADDR
// if not hexes then
23704: LD_VAR 0 12
23708: NOT
23709: IFFALSE 23713
// exit ;
23711: GO 24186
// hex := GetHexInfo ( x , y ) ;
23713: LD_ADDR_VAR 0 15
23717: PUSH
23718: LD_VAR 0 3
23722: PPUSH
23723: LD_VAR 0 4
23727: PPUSH
23728: CALL_OW 546
23732: ST_TO_ADDR
// if hex [ 1 ] then
23733: LD_VAR 0 15
23737: PUSH
23738: LD_INT 1
23740: ARRAY
23741: IFFALSE 23745
// exit ;
23743: GO 24186
// height := hex [ 2 ] ;
23745: LD_ADDR_VAR 0 13
23749: PUSH
23750: LD_VAR 0 15
23754: PUSH
23755: LD_INT 2
23757: ARRAY
23758: ST_TO_ADDR
// for i = 1 to hexes do
23759: LD_ADDR_VAR 0 7
23763: PUSH
23764: DOUBLE
23765: LD_INT 1
23767: DEC
23768: ST_TO_ADDR
23769: LD_VAR 0 12
23773: PUSH
23774: FOR_TO
23775: IFFALSE 24105
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
23777: LD_VAR 0 12
23781: PUSH
23782: LD_VAR 0 7
23786: ARRAY
23787: PUSH
23788: LD_INT 1
23790: ARRAY
23791: PPUSH
23792: LD_VAR 0 12
23796: PUSH
23797: LD_VAR 0 7
23801: ARRAY
23802: PUSH
23803: LD_INT 2
23805: ARRAY
23806: PPUSH
23807: CALL_OW 488
23811: NOT
23812: PUSH
23813: LD_VAR 0 12
23817: PUSH
23818: LD_VAR 0 7
23822: ARRAY
23823: PUSH
23824: LD_INT 1
23826: ARRAY
23827: PPUSH
23828: LD_VAR 0 12
23832: PUSH
23833: LD_VAR 0 7
23837: ARRAY
23838: PUSH
23839: LD_INT 2
23841: ARRAY
23842: PPUSH
23843: CALL_OW 428
23847: PUSH
23848: LD_INT 0
23850: GREATER
23851: OR
23852: PUSH
23853: LD_VAR 0 12
23857: PUSH
23858: LD_VAR 0 7
23862: ARRAY
23863: PUSH
23864: LD_INT 1
23866: ARRAY
23867: PPUSH
23868: LD_VAR 0 12
23872: PUSH
23873: LD_VAR 0 7
23877: ARRAY
23878: PUSH
23879: LD_INT 2
23881: ARRAY
23882: PPUSH
23883: CALL_OW 351
23887: OR
23888: IFFALSE 23894
// exit ;
23890: POP
23891: POP
23892: GO 24186
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
23894: LD_ADDR_VAR 0 8
23898: PUSH
23899: LD_VAR 0 12
23903: PUSH
23904: LD_VAR 0 7
23908: ARRAY
23909: PUSH
23910: LD_INT 1
23912: ARRAY
23913: PPUSH
23914: LD_VAR 0 12
23918: PUSH
23919: LD_VAR 0 7
23923: ARRAY
23924: PUSH
23925: LD_INT 2
23927: ARRAY
23928: PPUSH
23929: CALL_OW 546
23933: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
23934: LD_VAR 0 8
23938: PUSH
23939: LD_INT 1
23941: ARRAY
23942: PUSH
23943: LD_VAR 0 8
23947: PUSH
23948: LD_INT 2
23950: ARRAY
23951: PUSH
23952: LD_VAR 0 13
23956: PUSH
23957: LD_INT 2
23959: PLUS
23960: GREATER
23961: OR
23962: PUSH
23963: LD_VAR 0 8
23967: PUSH
23968: LD_INT 2
23970: ARRAY
23971: PUSH
23972: LD_VAR 0 13
23976: PUSH
23977: LD_INT 2
23979: MINUS
23980: LESS
23981: OR
23982: PUSH
23983: LD_VAR 0 8
23987: PUSH
23988: LD_INT 3
23990: ARRAY
23991: PUSH
23992: LD_INT 0
23994: PUSH
23995: LD_INT 8
23997: PUSH
23998: LD_INT 9
24000: PUSH
24001: LD_INT 10
24003: PUSH
24004: LD_INT 11
24006: PUSH
24007: LD_INT 12
24009: PUSH
24010: LD_INT 13
24012: PUSH
24013: LD_INT 16
24015: PUSH
24016: LD_INT 17
24018: PUSH
24019: LD_INT 18
24021: PUSH
24022: LD_INT 19
24024: PUSH
24025: LD_INT 20
24027: PUSH
24028: LD_INT 21
24030: PUSH
24031: EMPTY
24032: LIST
24033: LIST
24034: LIST
24035: LIST
24036: LIST
24037: LIST
24038: LIST
24039: LIST
24040: LIST
24041: LIST
24042: LIST
24043: LIST
24044: LIST
24045: IN
24046: NOT
24047: OR
24048: PUSH
24049: LD_VAR 0 8
24053: PUSH
24054: LD_INT 5
24056: ARRAY
24057: NOT
24058: OR
24059: PUSH
24060: LD_VAR 0 8
24064: PUSH
24065: LD_INT 6
24067: ARRAY
24068: PUSH
24069: LD_INT 1
24071: PUSH
24072: LD_INT 2
24074: PUSH
24075: LD_INT 7
24077: PUSH
24078: LD_INT 9
24080: PUSH
24081: LD_INT 10
24083: PUSH
24084: LD_INT 11
24086: PUSH
24087: EMPTY
24088: LIST
24089: LIST
24090: LIST
24091: LIST
24092: LIST
24093: LIST
24094: IN
24095: NOT
24096: OR
24097: IFFALSE 24103
// exit ;
24099: POP
24100: POP
24101: GO 24186
// end ;
24103: GO 23774
24105: POP
24106: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
24107: LD_VAR 0 9
24111: PPUSH
24112: LD_VAR 0 3
24116: PPUSH
24117: LD_VAR 0 4
24121: PPUSH
24122: LD_INT 20
24124: PPUSH
24125: CALL 16109 0 4
24129: PUSH
24130: LD_INT 4
24132: ARRAY
24133: IFFALSE 24137
// exit ;
24135: GO 24186
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
24137: LD_VAR 0 2
24141: PUSH
24142: LD_INT 29
24144: PUSH
24145: LD_INT 30
24147: PUSH
24148: EMPTY
24149: LIST
24150: LIST
24151: IN
24152: PUSH
24153: LD_VAR 0 3
24157: PPUSH
24158: LD_VAR 0 4
24162: PPUSH
24163: LD_VAR 0 9
24167: PPUSH
24168: CALL_OW 440
24172: NOT
24173: AND
24174: IFFALSE 24178
// exit ;
24176: GO 24186
// result := true ;
24178: LD_ADDR_VAR 0 6
24182: PUSH
24183: LD_INT 1
24185: ST_TO_ADDR
// end ;
24186: LD_VAR 0 6
24190: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
24191: LD_INT 0
24193: PPUSH
24194: PPUSH
24195: PPUSH
24196: PPUSH
24197: PPUSH
24198: PPUSH
24199: PPUSH
24200: PPUSH
24201: PPUSH
24202: PPUSH
24203: PPUSH
24204: PPUSH
24205: PPUSH
24206: PPUSH
24207: PPUSH
24208: PPUSH
24209: PPUSH
24210: PPUSH
24211: PPUSH
24212: PPUSH
24213: PPUSH
24214: PPUSH
24215: PPUSH
24216: PPUSH
24217: PPUSH
24218: PPUSH
24219: PPUSH
24220: PPUSH
24221: PPUSH
24222: PPUSH
24223: PPUSH
24224: PPUSH
24225: PPUSH
24226: PPUSH
24227: PPUSH
24228: PPUSH
24229: PPUSH
24230: PPUSH
24231: PPUSH
24232: PPUSH
24233: PPUSH
24234: PPUSH
24235: PPUSH
24236: PPUSH
24237: PPUSH
24238: PPUSH
24239: PPUSH
24240: PPUSH
24241: PPUSH
24242: PPUSH
24243: PPUSH
24244: PPUSH
24245: PPUSH
24246: PPUSH
24247: PPUSH
24248: PPUSH
24249: PPUSH
24250: PPUSH
// result = [ ] ;
24251: LD_ADDR_VAR 0 7
24255: PUSH
24256: EMPTY
24257: ST_TO_ADDR
// temp_list = [ ] ;
24258: LD_ADDR_VAR 0 9
24262: PUSH
24263: EMPTY
24264: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
24265: LD_VAR 0 4
24269: PUSH
24270: LD_INT 0
24272: PUSH
24273: LD_INT 1
24275: PUSH
24276: LD_INT 2
24278: PUSH
24279: LD_INT 3
24281: PUSH
24282: LD_INT 4
24284: PUSH
24285: LD_INT 5
24287: PUSH
24288: EMPTY
24289: LIST
24290: LIST
24291: LIST
24292: LIST
24293: LIST
24294: LIST
24295: IN
24296: NOT
24297: PUSH
24298: LD_VAR 0 1
24302: PUSH
24303: LD_INT 0
24305: PUSH
24306: LD_INT 1
24308: PUSH
24309: EMPTY
24310: LIST
24311: LIST
24312: IN
24313: PUSH
24314: LD_VAR 0 5
24318: PUSH
24319: LD_INT 1
24321: PUSH
24322: LD_INT 2
24324: PUSH
24325: LD_INT 3
24327: PUSH
24328: EMPTY
24329: LIST
24330: LIST
24331: LIST
24332: IN
24333: NOT
24334: AND
24335: OR
24336: IFFALSE 24340
// exit ;
24338: GO 42731
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
24340: LD_VAR 0 1
24344: PUSH
24345: LD_INT 6
24347: PUSH
24348: LD_INT 7
24350: PUSH
24351: LD_INT 8
24353: PUSH
24354: LD_INT 13
24356: PUSH
24357: LD_INT 12
24359: PUSH
24360: LD_INT 15
24362: PUSH
24363: LD_INT 11
24365: PUSH
24366: LD_INT 14
24368: PUSH
24369: LD_INT 10
24371: PUSH
24372: EMPTY
24373: LIST
24374: LIST
24375: LIST
24376: LIST
24377: LIST
24378: LIST
24379: LIST
24380: LIST
24381: LIST
24382: IN
24383: IFFALSE 24393
// btype = b_lab ;
24385: LD_ADDR_VAR 0 1
24389: PUSH
24390: LD_INT 6
24392: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
24393: LD_VAR 0 6
24397: PUSH
24398: LD_INT 0
24400: PUSH
24401: LD_INT 1
24403: PUSH
24404: LD_INT 2
24406: PUSH
24407: EMPTY
24408: LIST
24409: LIST
24410: LIST
24411: IN
24412: NOT
24413: PUSH
24414: LD_VAR 0 1
24418: PUSH
24419: LD_INT 0
24421: PUSH
24422: LD_INT 1
24424: PUSH
24425: LD_INT 2
24427: PUSH
24428: LD_INT 3
24430: PUSH
24431: LD_INT 6
24433: PUSH
24434: LD_INT 36
24436: PUSH
24437: LD_INT 4
24439: PUSH
24440: LD_INT 5
24442: PUSH
24443: LD_INT 31
24445: PUSH
24446: LD_INT 32
24448: PUSH
24449: LD_INT 33
24451: PUSH
24452: EMPTY
24453: LIST
24454: LIST
24455: LIST
24456: LIST
24457: LIST
24458: LIST
24459: LIST
24460: LIST
24461: LIST
24462: LIST
24463: LIST
24464: IN
24465: NOT
24466: PUSH
24467: LD_VAR 0 6
24471: PUSH
24472: LD_INT 1
24474: EQUAL
24475: AND
24476: OR
24477: PUSH
24478: LD_VAR 0 1
24482: PUSH
24483: LD_INT 2
24485: PUSH
24486: LD_INT 3
24488: PUSH
24489: EMPTY
24490: LIST
24491: LIST
24492: IN
24493: NOT
24494: PUSH
24495: LD_VAR 0 6
24499: PUSH
24500: LD_INT 2
24502: EQUAL
24503: AND
24504: OR
24505: IFFALSE 24515
// mode = 0 ;
24507: LD_ADDR_VAR 0 6
24511: PUSH
24512: LD_INT 0
24514: ST_TO_ADDR
// case mode of 0 :
24515: LD_VAR 0 6
24519: PUSH
24520: LD_INT 0
24522: DOUBLE
24523: EQUAL
24524: IFTRUE 24528
24526: GO 35981
24528: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
24529: LD_ADDR_VAR 0 11
24533: PUSH
24534: LD_INT 0
24536: PUSH
24537: LD_INT 0
24539: PUSH
24540: EMPTY
24541: LIST
24542: LIST
24543: PUSH
24544: LD_INT 0
24546: PUSH
24547: LD_INT 1
24549: NEG
24550: PUSH
24551: EMPTY
24552: LIST
24553: LIST
24554: PUSH
24555: LD_INT 1
24557: PUSH
24558: LD_INT 0
24560: PUSH
24561: EMPTY
24562: LIST
24563: LIST
24564: PUSH
24565: LD_INT 1
24567: PUSH
24568: LD_INT 1
24570: PUSH
24571: EMPTY
24572: LIST
24573: LIST
24574: PUSH
24575: LD_INT 0
24577: PUSH
24578: LD_INT 1
24580: PUSH
24581: EMPTY
24582: LIST
24583: LIST
24584: PUSH
24585: LD_INT 1
24587: NEG
24588: PUSH
24589: LD_INT 0
24591: PUSH
24592: EMPTY
24593: LIST
24594: LIST
24595: PUSH
24596: LD_INT 1
24598: NEG
24599: PUSH
24600: LD_INT 1
24602: NEG
24603: PUSH
24604: EMPTY
24605: LIST
24606: LIST
24607: PUSH
24608: LD_INT 1
24610: NEG
24611: PUSH
24612: LD_INT 2
24614: NEG
24615: PUSH
24616: EMPTY
24617: LIST
24618: LIST
24619: PUSH
24620: LD_INT 0
24622: PUSH
24623: LD_INT 2
24625: NEG
24626: PUSH
24627: EMPTY
24628: LIST
24629: LIST
24630: PUSH
24631: LD_INT 1
24633: PUSH
24634: LD_INT 1
24636: NEG
24637: PUSH
24638: EMPTY
24639: LIST
24640: LIST
24641: PUSH
24642: LD_INT 1
24644: PUSH
24645: LD_INT 2
24647: PUSH
24648: EMPTY
24649: LIST
24650: LIST
24651: PUSH
24652: LD_INT 0
24654: PUSH
24655: LD_INT 2
24657: PUSH
24658: EMPTY
24659: LIST
24660: LIST
24661: PUSH
24662: LD_INT 1
24664: NEG
24665: PUSH
24666: LD_INT 1
24668: PUSH
24669: EMPTY
24670: LIST
24671: LIST
24672: PUSH
24673: LD_INT 1
24675: PUSH
24676: LD_INT 3
24678: PUSH
24679: EMPTY
24680: LIST
24681: LIST
24682: PUSH
24683: LD_INT 0
24685: PUSH
24686: LD_INT 3
24688: PUSH
24689: EMPTY
24690: LIST
24691: LIST
24692: PUSH
24693: LD_INT 1
24695: NEG
24696: PUSH
24697: LD_INT 2
24699: PUSH
24700: EMPTY
24701: LIST
24702: LIST
24703: PUSH
24704: EMPTY
24705: LIST
24706: LIST
24707: LIST
24708: LIST
24709: LIST
24710: LIST
24711: LIST
24712: LIST
24713: LIST
24714: LIST
24715: LIST
24716: LIST
24717: LIST
24718: LIST
24719: LIST
24720: LIST
24721: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
24722: LD_ADDR_VAR 0 12
24726: PUSH
24727: LD_INT 0
24729: PUSH
24730: LD_INT 0
24732: PUSH
24733: EMPTY
24734: LIST
24735: LIST
24736: PUSH
24737: LD_INT 0
24739: PUSH
24740: LD_INT 1
24742: NEG
24743: PUSH
24744: EMPTY
24745: LIST
24746: LIST
24747: PUSH
24748: LD_INT 1
24750: PUSH
24751: LD_INT 0
24753: PUSH
24754: EMPTY
24755: LIST
24756: LIST
24757: PUSH
24758: LD_INT 1
24760: PUSH
24761: LD_INT 1
24763: PUSH
24764: EMPTY
24765: LIST
24766: LIST
24767: PUSH
24768: LD_INT 0
24770: PUSH
24771: LD_INT 1
24773: PUSH
24774: EMPTY
24775: LIST
24776: LIST
24777: PUSH
24778: LD_INT 1
24780: NEG
24781: PUSH
24782: LD_INT 0
24784: PUSH
24785: EMPTY
24786: LIST
24787: LIST
24788: PUSH
24789: LD_INT 1
24791: NEG
24792: PUSH
24793: LD_INT 1
24795: NEG
24796: PUSH
24797: EMPTY
24798: LIST
24799: LIST
24800: PUSH
24801: LD_INT 1
24803: PUSH
24804: LD_INT 1
24806: NEG
24807: PUSH
24808: EMPTY
24809: LIST
24810: LIST
24811: PUSH
24812: LD_INT 2
24814: PUSH
24815: LD_INT 0
24817: PUSH
24818: EMPTY
24819: LIST
24820: LIST
24821: PUSH
24822: LD_INT 2
24824: PUSH
24825: LD_INT 1
24827: PUSH
24828: EMPTY
24829: LIST
24830: LIST
24831: PUSH
24832: LD_INT 1
24834: NEG
24835: PUSH
24836: LD_INT 1
24838: PUSH
24839: EMPTY
24840: LIST
24841: LIST
24842: PUSH
24843: LD_INT 2
24845: NEG
24846: PUSH
24847: LD_INT 0
24849: PUSH
24850: EMPTY
24851: LIST
24852: LIST
24853: PUSH
24854: LD_INT 2
24856: NEG
24857: PUSH
24858: LD_INT 1
24860: NEG
24861: PUSH
24862: EMPTY
24863: LIST
24864: LIST
24865: PUSH
24866: LD_INT 2
24868: NEG
24869: PUSH
24870: LD_INT 1
24872: PUSH
24873: EMPTY
24874: LIST
24875: LIST
24876: PUSH
24877: LD_INT 3
24879: NEG
24880: PUSH
24881: LD_INT 0
24883: PUSH
24884: EMPTY
24885: LIST
24886: LIST
24887: PUSH
24888: LD_INT 3
24890: NEG
24891: PUSH
24892: LD_INT 1
24894: NEG
24895: PUSH
24896: EMPTY
24897: LIST
24898: LIST
24899: PUSH
24900: EMPTY
24901: LIST
24902: LIST
24903: LIST
24904: LIST
24905: LIST
24906: LIST
24907: LIST
24908: LIST
24909: LIST
24910: LIST
24911: LIST
24912: LIST
24913: LIST
24914: LIST
24915: LIST
24916: LIST
24917: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
24918: LD_ADDR_VAR 0 13
24922: PUSH
24923: LD_INT 0
24925: PUSH
24926: LD_INT 0
24928: PUSH
24929: EMPTY
24930: LIST
24931: LIST
24932: PUSH
24933: LD_INT 0
24935: PUSH
24936: LD_INT 1
24938: NEG
24939: PUSH
24940: EMPTY
24941: LIST
24942: LIST
24943: PUSH
24944: LD_INT 1
24946: PUSH
24947: LD_INT 0
24949: PUSH
24950: EMPTY
24951: LIST
24952: LIST
24953: PUSH
24954: LD_INT 1
24956: PUSH
24957: LD_INT 1
24959: PUSH
24960: EMPTY
24961: LIST
24962: LIST
24963: PUSH
24964: LD_INT 0
24966: PUSH
24967: LD_INT 1
24969: PUSH
24970: EMPTY
24971: LIST
24972: LIST
24973: PUSH
24974: LD_INT 1
24976: NEG
24977: PUSH
24978: LD_INT 0
24980: PUSH
24981: EMPTY
24982: LIST
24983: LIST
24984: PUSH
24985: LD_INT 1
24987: NEG
24988: PUSH
24989: LD_INT 1
24991: NEG
24992: PUSH
24993: EMPTY
24994: LIST
24995: LIST
24996: PUSH
24997: LD_INT 1
24999: NEG
25000: PUSH
25001: LD_INT 2
25003: NEG
25004: PUSH
25005: EMPTY
25006: LIST
25007: LIST
25008: PUSH
25009: LD_INT 2
25011: PUSH
25012: LD_INT 1
25014: PUSH
25015: EMPTY
25016: LIST
25017: LIST
25018: PUSH
25019: LD_INT 2
25021: PUSH
25022: LD_INT 2
25024: PUSH
25025: EMPTY
25026: LIST
25027: LIST
25028: PUSH
25029: LD_INT 1
25031: PUSH
25032: LD_INT 2
25034: PUSH
25035: EMPTY
25036: LIST
25037: LIST
25038: PUSH
25039: LD_INT 2
25041: NEG
25042: PUSH
25043: LD_INT 1
25045: NEG
25046: PUSH
25047: EMPTY
25048: LIST
25049: LIST
25050: PUSH
25051: LD_INT 2
25053: NEG
25054: PUSH
25055: LD_INT 2
25057: NEG
25058: PUSH
25059: EMPTY
25060: LIST
25061: LIST
25062: PUSH
25063: LD_INT 2
25065: NEG
25066: PUSH
25067: LD_INT 3
25069: NEG
25070: PUSH
25071: EMPTY
25072: LIST
25073: LIST
25074: PUSH
25075: LD_INT 3
25077: NEG
25078: PUSH
25079: LD_INT 2
25081: NEG
25082: PUSH
25083: EMPTY
25084: LIST
25085: LIST
25086: PUSH
25087: LD_INT 3
25089: NEG
25090: PUSH
25091: LD_INT 3
25093: NEG
25094: PUSH
25095: EMPTY
25096: LIST
25097: LIST
25098: PUSH
25099: EMPTY
25100: LIST
25101: LIST
25102: LIST
25103: LIST
25104: LIST
25105: LIST
25106: LIST
25107: LIST
25108: LIST
25109: LIST
25110: LIST
25111: LIST
25112: LIST
25113: LIST
25114: LIST
25115: LIST
25116: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
25117: LD_ADDR_VAR 0 14
25121: PUSH
25122: LD_INT 0
25124: PUSH
25125: LD_INT 0
25127: PUSH
25128: EMPTY
25129: LIST
25130: LIST
25131: PUSH
25132: LD_INT 0
25134: PUSH
25135: LD_INT 1
25137: NEG
25138: PUSH
25139: EMPTY
25140: LIST
25141: LIST
25142: PUSH
25143: LD_INT 1
25145: PUSH
25146: LD_INT 0
25148: PUSH
25149: EMPTY
25150: LIST
25151: LIST
25152: PUSH
25153: LD_INT 1
25155: PUSH
25156: LD_INT 1
25158: PUSH
25159: EMPTY
25160: LIST
25161: LIST
25162: PUSH
25163: LD_INT 0
25165: PUSH
25166: LD_INT 1
25168: PUSH
25169: EMPTY
25170: LIST
25171: LIST
25172: PUSH
25173: LD_INT 1
25175: NEG
25176: PUSH
25177: LD_INT 0
25179: PUSH
25180: EMPTY
25181: LIST
25182: LIST
25183: PUSH
25184: LD_INT 1
25186: NEG
25187: PUSH
25188: LD_INT 1
25190: NEG
25191: PUSH
25192: EMPTY
25193: LIST
25194: LIST
25195: PUSH
25196: LD_INT 1
25198: NEG
25199: PUSH
25200: LD_INT 2
25202: NEG
25203: PUSH
25204: EMPTY
25205: LIST
25206: LIST
25207: PUSH
25208: LD_INT 0
25210: PUSH
25211: LD_INT 2
25213: NEG
25214: PUSH
25215: EMPTY
25216: LIST
25217: LIST
25218: PUSH
25219: LD_INT 1
25221: PUSH
25222: LD_INT 1
25224: NEG
25225: PUSH
25226: EMPTY
25227: LIST
25228: LIST
25229: PUSH
25230: LD_INT 1
25232: PUSH
25233: LD_INT 2
25235: PUSH
25236: EMPTY
25237: LIST
25238: LIST
25239: PUSH
25240: LD_INT 0
25242: PUSH
25243: LD_INT 2
25245: PUSH
25246: EMPTY
25247: LIST
25248: LIST
25249: PUSH
25250: LD_INT 1
25252: NEG
25253: PUSH
25254: LD_INT 1
25256: PUSH
25257: EMPTY
25258: LIST
25259: LIST
25260: PUSH
25261: LD_INT 1
25263: NEG
25264: PUSH
25265: LD_INT 3
25267: NEG
25268: PUSH
25269: EMPTY
25270: LIST
25271: LIST
25272: PUSH
25273: LD_INT 0
25275: PUSH
25276: LD_INT 3
25278: NEG
25279: PUSH
25280: EMPTY
25281: LIST
25282: LIST
25283: PUSH
25284: LD_INT 1
25286: PUSH
25287: LD_INT 2
25289: NEG
25290: PUSH
25291: EMPTY
25292: LIST
25293: LIST
25294: PUSH
25295: EMPTY
25296: LIST
25297: LIST
25298: LIST
25299: LIST
25300: LIST
25301: LIST
25302: LIST
25303: LIST
25304: LIST
25305: LIST
25306: LIST
25307: LIST
25308: LIST
25309: LIST
25310: LIST
25311: LIST
25312: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
25313: LD_ADDR_VAR 0 15
25317: PUSH
25318: LD_INT 0
25320: PUSH
25321: LD_INT 0
25323: PUSH
25324: EMPTY
25325: LIST
25326: LIST
25327: PUSH
25328: LD_INT 0
25330: PUSH
25331: LD_INT 1
25333: NEG
25334: PUSH
25335: EMPTY
25336: LIST
25337: LIST
25338: PUSH
25339: LD_INT 1
25341: PUSH
25342: LD_INT 0
25344: PUSH
25345: EMPTY
25346: LIST
25347: LIST
25348: PUSH
25349: LD_INT 1
25351: PUSH
25352: LD_INT 1
25354: PUSH
25355: EMPTY
25356: LIST
25357: LIST
25358: PUSH
25359: LD_INT 0
25361: PUSH
25362: LD_INT 1
25364: PUSH
25365: EMPTY
25366: LIST
25367: LIST
25368: PUSH
25369: LD_INT 1
25371: NEG
25372: PUSH
25373: LD_INT 0
25375: PUSH
25376: EMPTY
25377: LIST
25378: LIST
25379: PUSH
25380: LD_INT 1
25382: NEG
25383: PUSH
25384: LD_INT 1
25386: NEG
25387: PUSH
25388: EMPTY
25389: LIST
25390: LIST
25391: PUSH
25392: LD_INT 1
25394: PUSH
25395: LD_INT 1
25397: NEG
25398: PUSH
25399: EMPTY
25400: LIST
25401: LIST
25402: PUSH
25403: LD_INT 2
25405: PUSH
25406: LD_INT 0
25408: PUSH
25409: EMPTY
25410: LIST
25411: LIST
25412: PUSH
25413: LD_INT 2
25415: PUSH
25416: LD_INT 1
25418: PUSH
25419: EMPTY
25420: LIST
25421: LIST
25422: PUSH
25423: LD_INT 1
25425: NEG
25426: PUSH
25427: LD_INT 1
25429: PUSH
25430: EMPTY
25431: LIST
25432: LIST
25433: PUSH
25434: LD_INT 2
25436: NEG
25437: PUSH
25438: LD_INT 0
25440: PUSH
25441: EMPTY
25442: LIST
25443: LIST
25444: PUSH
25445: LD_INT 2
25447: NEG
25448: PUSH
25449: LD_INT 1
25451: NEG
25452: PUSH
25453: EMPTY
25454: LIST
25455: LIST
25456: PUSH
25457: LD_INT 2
25459: PUSH
25460: LD_INT 1
25462: NEG
25463: PUSH
25464: EMPTY
25465: LIST
25466: LIST
25467: PUSH
25468: LD_INT 3
25470: PUSH
25471: LD_INT 0
25473: PUSH
25474: EMPTY
25475: LIST
25476: LIST
25477: PUSH
25478: LD_INT 3
25480: PUSH
25481: LD_INT 1
25483: PUSH
25484: EMPTY
25485: LIST
25486: LIST
25487: PUSH
25488: EMPTY
25489: LIST
25490: LIST
25491: LIST
25492: LIST
25493: LIST
25494: LIST
25495: LIST
25496: LIST
25497: LIST
25498: LIST
25499: LIST
25500: LIST
25501: LIST
25502: LIST
25503: LIST
25504: LIST
25505: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
25506: LD_ADDR_VAR 0 16
25510: PUSH
25511: LD_INT 0
25513: PUSH
25514: LD_INT 0
25516: PUSH
25517: EMPTY
25518: LIST
25519: LIST
25520: PUSH
25521: LD_INT 0
25523: PUSH
25524: LD_INT 1
25526: NEG
25527: PUSH
25528: EMPTY
25529: LIST
25530: LIST
25531: PUSH
25532: LD_INT 1
25534: PUSH
25535: LD_INT 0
25537: PUSH
25538: EMPTY
25539: LIST
25540: LIST
25541: PUSH
25542: LD_INT 1
25544: PUSH
25545: LD_INT 1
25547: PUSH
25548: EMPTY
25549: LIST
25550: LIST
25551: PUSH
25552: LD_INT 0
25554: PUSH
25555: LD_INT 1
25557: PUSH
25558: EMPTY
25559: LIST
25560: LIST
25561: PUSH
25562: LD_INT 1
25564: NEG
25565: PUSH
25566: LD_INT 0
25568: PUSH
25569: EMPTY
25570: LIST
25571: LIST
25572: PUSH
25573: LD_INT 1
25575: NEG
25576: PUSH
25577: LD_INT 1
25579: NEG
25580: PUSH
25581: EMPTY
25582: LIST
25583: LIST
25584: PUSH
25585: LD_INT 1
25587: NEG
25588: PUSH
25589: LD_INT 2
25591: NEG
25592: PUSH
25593: EMPTY
25594: LIST
25595: LIST
25596: PUSH
25597: LD_INT 2
25599: PUSH
25600: LD_INT 1
25602: PUSH
25603: EMPTY
25604: LIST
25605: LIST
25606: PUSH
25607: LD_INT 2
25609: PUSH
25610: LD_INT 2
25612: PUSH
25613: EMPTY
25614: LIST
25615: LIST
25616: PUSH
25617: LD_INT 1
25619: PUSH
25620: LD_INT 2
25622: PUSH
25623: EMPTY
25624: LIST
25625: LIST
25626: PUSH
25627: LD_INT 2
25629: NEG
25630: PUSH
25631: LD_INT 1
25633: NEG
25634: PUSH
25635: EMPTY
25636: LIST
25637: LIST
25638: PUSH
25639: LD_INT 2
25641: NEG
25642: PUSH
25643: LD_INT 2
25645: NEG
25646: PUSH
25647: EMPTY
25648: LIST
25649: LIST
25650: PUSH
25651: LD_INT 3
25653: PUSH
25654: LD_INT 2
25656: PUSH
25657: EMPTY
25658: LIST
25659: LIST
25660: PUSH
25661: LD_INT 3
25663: PUSH
25664: LD_INT 3
25666: PUSH
25667: EMPTY
25668: LIST
25669: LIST
25670: PUSH
25671: LD_INT 2
25673: PUSH
25674: LD_INT 3
25676: PUSH
25677: EMPTY
25678: LIST
25679: LIST
25680: PUSH
25681: EMPTY
25682: LIST
25683: LIST
25684: LIST
25685: LIST
25686: LIST
25687: LIST
25688: LIST
25689: LIST
25690: LIST
25691: LIST
25692: LIST
25693: LIST
25694: LIST
25695: LIST
25696: LIST
25697: LIST
25698: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25699: LD_ADDR_VAR 0 17
25703: PUSH
25704: LD_INT 0
25706: PUSH
25707: LD_INT 0
25709: PUSH
25710: EMPTY
25711: LIST
25712: LIST
25713: PUSH
25714: LD_INT 0
25716: PUSH
25717: LD_INT 1
25719: NEG
25720: PUSH
25721: EMPTY
25722: LIST
25723: LIST
25724: PUSH
25725: LD_INT 1
25727: PUSH
25728: LD_INT 0
25730: PUSH
25731: EMPTY
25732: LIST
25733: LIST
25734: PUSH
25735: LD_INT 1
25737: PUSH
25738: LD_INT 1
25740: PUSH
25741: EMPTY
25742: LIST
25743: LIST
25744: PUSH
25745: LD_INT 0
25747: PUSH
25748: LD_INT 1
25750: PUSH
25751: EMPTY
25752: LIST
25753: LIST
25754: PUSH
25755: LD_INT 1
25757: NEG
25758: PUSH
25759: LD_INT 0
25761: PUSH
25762: EMPTY
25763: LIST
25764: LIST
25765: PUSH
25766: LD_INT 1
25768: NEG
25769: PUSH
25770: LD_INT 1
25772: NEG
25773: PUSH
25774: EMPTY
25775: LIST
25776: LIST
25777: PUSH
25778: LD_INT 1
25780: NEG
25781: PUSH
25782: LD_INT 2
25784: NEG
25785: PUSH
25786: EMPTY
25787: LIST
25788: LIST
25789: PUSH
25790: LD_INT 0
25792: PUSH
25793: LD_INT 2
25795: NEG
25796: PUSH
25797: EMPTY
25798: LIST
25799: LIST
25800: PUSH
25801: LD_INT 1
25803: PUSH
25804: LD_INT 1
25806: NEG
25807: PUSH
25808: EMPTY
25809: LIST
25810: LIST
25811: PUSH
25812: LD_INT 2
25814: PUSH
25815: LD_INT 0
25817: PUSH
25818: EMPTY
25819: LIST
25820: LIST
25821: PUSH
25822: LD_INT 2
25824: PUSH
25825: LD_INT 1
25827: PUSH
25828: EMPTY
25829: LIST
25830: LIST
25831: PUSH
25832: LD_INT 2
25834: PUSH
25835: LD_INT 2
25837: PUSH
25838: EMPTY
25839: LIST
25840: LIST
25841: PUSH
25842: LD_INT 1
25844: PUSH
25845: LD_INT 2
25847: PUSH
25848: EMPTY
25849: LIST
25850: LIST
25851: PUSH
25852: LD_INT 0
25854: PUSH
25855: LD_INT 2
25857: PUSH
25858: EMPTY
25859: LIST
25860: LIST
25861: PUSH
25862: LD_INT 1
25864: NEG
25865: PUSH
25866: LD_INT 1
25868: PUSH
25869: EMPTY
25870: LIST
25871: LIST
25872: PUSH
25873: LD_INT 2
25875: NEG
25876: PUSH
25877: LD_INT 0
25879: PUSH
25880: EMPTY
25881: LIST
25882: LIST
25883: PUSH
25884: LD_INT 2
25886: NEG
25887: PUSH
25888: LD_INT 1
25890: NEG
25891: PUSH
25892: EMPTY
25893: LIST
25894: LIST
25895: PUSH
25896: LD_INT 2
25898: NEG
25899: PUSH
25900: LD_INT 2
25902: NEG
25903: PUSH
25904: EMPTY
25905: LIST
25906: LIST
25907: PUSH
25908: EMPTY
25909: LIST
25910: LIST
25911: LIST
25912: LIST
25913: LIST
25914: LIST
25915: LIST
25916: LIST
25917: LIST
25918: LIST
25919: LIST
25920: LIST
25921: LIST
25922: LIST
25923: LIST
25924: LIST
25925: LIST
25926: LIST
25927: LIST
25928: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25929: LD_ADDR_VAR 0 18
25933: PUSH
25934: LD_INT 0
25936: PUSH
25937: LD_INT 0
25939: PUSH
25940: EMPTY
25941: LIST
25942: LIST
25943: PUSH
25944: LD_INT 0
25946: PUSH
25947: LD_INT 1
25949: NEG
25950: PUSH
25951: EMPTY
25952: LIST
25953: LIST
25954: PUSH
25955: LD_INT 1
25957: PUSH
25958: LD_INT 0
25960: PUSH
25961: EMPTY
25962: LIST
25963: LIST
25964: PUSH
25965: LD_INT 1
25967: PUSH
25968: LD_INT 1
25970: PUSH
25971: EMPTY
25972: LIST
25973: LIST
25974: PUSH
25975: LD_INT 0
25977: PUSH
25978: LD_INT 1
25980: PUSH
25981: EMPTY
25982: LIST
25983: LIST
25984: PUSH
25985: LD_INT 1
25987: NEG
25988: PUSH
25989: LD_INT 0
25991: PUSH
25992: EMPTY
25993: LIST
25994: LIST
25995: PUSH
25996: LD_INT 1
25998: NEG
25999: PUSH
26000: LD_INT 1
26002: NEG
26003: PUSH
26004: EMPTY
26005: LIST
26006: LIST
26007: PUSH
26008: LD_INT 1
26010: NEG
26011: PUSH
26012: LD_INT 2
26014: NEG
26015: PUSH
26016: EMPTY
26017: LIST
26018: LIST
26019: PUSH
26020: LD_INT 0
26022: PUSH
26023: LD_INT 2
26025: NEG
26026: PUSH
26027: EMPTY
26028: LIST
26029: LIST
26030: PUSH
26031: LD_INT 1
26033: PUSH
26034: LD_INT 1
26036: NEG
26037: PUSH
26038: EMPTY
26039: LIST
26040: LIST
26041: PUSH
26042: LD_INT 2
26044: PUSH
26045: LD_INT 0
26047: PUSH
26048: EMPTY
26049: LIST
26050: LIST
26051: PUSH
26052: LD_INT 2
26054: PUSH
26055: LD_INT 1
26057: PUSH
26058: EMPTY
26059: LIST
26060: LIST
26061: PUSH
26062: LD_INT 2
26064: PUSH
26065: LD_INT 2
26067: PUSH
26068: EMPTY
26069: LIST
26070: LIST
26071: PUSH
26072: LD_INT 1
26074: PUSH
26075: LD_INT 2
26077: PUSH
26078: EMPTY
26079: LIST
26080: LIST
26081: PUSH
26082: LD_INT 0
26084: PUSH
26085: LD_INT 2
26087: PUSH
26088: EMPTY
26089: LIST
26090: LIST
26091: PUSH
26092: LD_INT 1
26094: NEG
26095: PUSH
26096: LD_INT 1
26098: PUSH
26099: EMPTY
26100: LIST
26101: LIST
26102: PUSH
26103: LD_INT 2
26105: NEG
26106: PUSH
26107: LD_INT 0
26109: PUSH
26110: EMPTY
26111: LIST
26112: LIST
26113: PUSH
26114: LD_INT 2
26116: NEG
26117: PUSH
26118: LD_INT 1
26120: NEG
26121: PUSH
26122: EMPTY
26123: LIST
26124: LIST
26125: PUSH
26126: LD_INT 2
26128: NEG
26129: PUSH
26130: LD_INT 2
26132: NEG
26133: PUSH
26134: EMPTY
26135: LIST
26136: LIST
26137: PUSH
26138: EMPTY
26139: LIST
26140: LIST
26141: LIST
26142: LIST
26143: LIST
26144: LIST
26145: LIST
26146: LIST
26147: LIST
26148: LIST
26149: LIST
26150: LIST
26151: LIST
26152: LIST
26153: LIST
26154: LIST
26155: LIST
26156: LIST
26157: LIST
26158: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26159: LD_ADDR_VAR 0 19
26163: PUSH
26164: LD_INT 0
26166: PUSH
26167: LD_INT 0
26169: PUSH
26170: EMPTY
26171: LIST
26172: LIST
26173: PUSH
26174: LD_INT 0
26176: PUSH
26177: LD_INT 1
26179: NEG
26180: PUSH
26181: EMPTY
26182: LIST
26183: LIST
26184: PUSH
26185: LD_INT 1
26187: PUSH
26188: LD_INT 0
26190: PUSH
26191: EMPTY
26192: LIST
26193: LIST
26194: PUSH
26195: LD_INT 1
26197: PUSH
26198: LD_INT 1
26200: PUSH
26201: EMPTY
26202: LIST
26203: LIST
26204: PUSH
26205: LD_INT 0
26207: PUSH
26208: LD_INT 1
26210: PUSH
26211: EMPTY
26212: LIST
26213: LIST
26214: PUSH
26215: LD_INT 1
26217: NEG
26218: PUSH
26219: LD_INT 0
26221: PUSH
26222: EMPTY
26223: LIST
26224: LIST
26225: PUSH
26226: LD_INT 1
26228: NEG
26229: PUSH
26230: LD_INT 1
26232: NEG
26233: PUSH
26234: EMPTY
26235: LIST
26236: LIST
26237: PUSH
26238: LD_INT 1
26240: NEG
26241: PUSH
26242: LD_INT 2
26244: NEG
26245: PUSH
26246: EMPTY
26247: LIST
26248: LIST
26249: PUSH
26250: LD_INT 0
26252: PUSH
26253: LD_INT 2
26255: NEG
26256: PUSH
26257: EMPTY
26258: LIST
26259: LIST
26260: PUSH
26261: LD_INT 1
26263: PUSH
26264: LD_INT 1
26266: NEG
26267: PUSH
26268: EMPTY
26269: LIST
26270: LIST
26271: PUSH
26272: LD_INT 2
26274: PUSH
26275: LD_INT 0
26277: PUSH
26278: EMPTY
26279: LIST
26280: LIST
26281: PUSH
26282: LD_INT 2
26284: PUSH
26285: LD_INT 1
26287: PUSH
26288: EMPTY
26289: LIST
26290: LIST
26291: PUSH
26292: LD_INT 2
26294: PUSH
26295: LD_INT 2
26297: PUSH
26298: EMPTY
26299: LIST
26300: LIST
26301: PUSH
26302: LD_INT 1
26304: PUSH
26305: LD_INT 2
26307: PUSH
26308: EMPTY
26309: LIST
26310: LIST
26311: PUSH
26312: LD_INT 0
26314: PUSH
26315: LD_INT 2
26317: PUSH
26318: EMPTY
26319: LIST
26320: LIST
26321: PUSH
26322: LD_INT 1
26324: NEG
26325: PUSH
26326: LD_INT 1
26328: PUSH
26329: EMPTY
26330: LIST
26331: LIST
26332: PUSH
26333: LD_INT 2
26335: NEG
26336: PUSH
26337: LD_INT 0
26339: PUSH
26340: EMPTY
26341: LIST
26342: LIST
26343: PUSH
26344: LD_INT 2
26346: NEG
26347: PUSH
26348: LD_INT 1
26350: NEG
26351: PUSH
26352: EMPTY
26353: LIST
26354: LIST
26355: PUSH
26356: LD_INT 2
26358: NEG
26359: PUSH
26360: LD_INT 2
26362: NEG
26363: PUSH
26364: EMPTY
26365: LIST
26366: LIST
26367: PUSH
26368: EMPTY
26369: LIST
26370: LIST
26371: LIST
26372: LIST
26373: LIST
26374: LIST
26375: LIST
26376: LIST
26377: LIST
26378: LIST
26379: LIST
26380: LIST
26381: LIST
26382: LIST
26383: LIST
26384: LIST
26385: LIST
26386: LIST
26387: LIST
26388: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26389: LD_ADDR_VAR 0 20
26393: PUSH
26394: LD_INT 0
26396: PUSH
26397: LD_INT 0
26399: PUSH
26400: EMPTY
26401: LIST
26402: LIST
26403: PUSH
26404: LD_INT 0
26406: PUSH
26407: LD_INT 1
26409: NEG
26410: PUSH
26411: EMPTY
26412: LIST
26413: LIST
26414: PUSH
26415: LD_INT 1
26417: PUSH
26418: LD_INT 0
26420: PUSH
26421: EMPTY
26422: LIST
26423: LIST
26424: PUSH
26425: LD_INT 1
26427: PUSH
26428: LD_INT 1
26430: PUSH
26431: EMPTY
26432: LIST
26433: LIST
26434: PUSH
26435: LD_INT 0
26437: PUSH
26438: LD_INT 1
26440: PUSH
26441: EMPTY
26442: LIST
26443: LIST
26444: PUSH
26445: LD_INT 1
26447: NEG
26448: PUSH
26449: LD_INT 0
26451: PUSH
26452: EMPTY
26453: LIST
26454: LIST
26455: PUSH
26456: LD_INT 1
26458: NEG
26459: PUSH
26460: LD_INT 1
26462: NEG
26463: PUSH
26464: EMPTY
26465: LIST
26466: LIST
26467: PUSH
26468: LD_INT 1
26470: NEG
26471: PUSH
26472: LD_INT 2
26474: NEG
26475: PUSH
26476: EMPTY
26477: LIST
26478: LIST
26479: PUSH
26480: LD_INT 0
26482: PUSH
26483: LD_INT 2
26485: NEG
26486: PUSH
26487: EMPTY
26488: LIST
26489: LIST
26490: PUSH
26491: LD_INT 1
26493: PUSH
26494: LD_INT 1
26496: NEG
26497: PUSH
26498: EMPTY
26499: LIST
26500: LIST
26501: PUSH
26502: LD_INT 2
26504: PUSH
26505: LD_INT 0
26507: PUSH
26508: EMPTY
26509: LIST
26510: LIST
26511: PUSH
26512: LD_INT 2
26514: PUSH
26515: LD_INT 1
26517: PUSH
26518: EMPTY
26519: LIST
26520: LIST
26521: PUSH
26522: LD_INT 2
26524: PUSH
26525: LD_INT 2
26527: PUSH
26528: EMPTY
26529: LIST
26530: LIST
26531: PUSH
26532: LD_INT 1
26534: PUSH
26535: LD_INT 2
26537: PUSH
26538: EMPTY
26539: LIST
26540: LIST
26541: PUSH
26542: LD_INT 0
26544: PUSH
26545: LD_INT 2
26547: PUSH
26548: EMPTY
26549: LIST
26550: LIST
26551: PUSH
26552: LD_INT 1
26554: NEG
26555: PUSH
26556: LD_INT 1
26558: PUSH
26559: EMPTY
26560: LIST
26561: LIST
26562: PUSH
26563: LD_INT 2
26565: NEG
26566: PUSH
26567: LD_INT 0
26569: PUSH
26570: EMPTY
26571: LIST
26572: LIST
26573: PUSH
26574: LD_INT 2
26576: NEG
26577: PUSH
26578: LD_INT 1
26580: NEG
26581: PUSH
26582: EMPTY
26583: LIST
26584: LIST
26585: PUSH
26586: LD_INT 2
26588: NEG
26589: PUSH
26590: LD_INT 2
26592: NEG
26593: PUSH
26594: EMPTY
26595: LIST
26596: LIST
26597: PUSH
26598: EMPTY
26599: LIST
26600: LIST
26601: LIST
26602: LIST
26603: LIST
26604: LIST
26605: LIST
26606: LIST
26607: LIST
26608: LIST
26609: LIST
26610: LIST
26611: LIST
26612: LIST
26613: LIST
26614: LIST
26615: LIST
26616: LIST
26617: LIST
26618: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26619: LD_ADDR_VAR 0 21
26623: PUSH
26624: LD_INT 0
26626: PUSH
26627: LD_INT 0
26629: PUSH
26630: EMPTY
26631: LIST
26632: LIST
26633: PUSH
26634: LD_INT 0
26636: PUSH
26637: LD_INT 1
26639: NEG
26640: PUSH
26641: EMPTY
26642: LIST
26643: LIST
26644: PUSH
26645: LD_INT 1
26647: PUSH
26648: LD_INT 0
26650: PUSH
26651: EMPTY
26652: LIST
26653: LIST
26654: PUSH
26655: LD_INT 1
26657: PUSH
26658: LD_INT 1
26660: PUSH
26661: EMPTY
26662: LIST
26663: LIST
26664: PUSH
26665: LD_INT 0
26667: PUSH
26668: LD_INT 1
26670: PUSH
26671: EMPTY
26672: LIST
26673: LIST
26674: PUSH
26675: LD_INT 1
26677: NEG
26678: PUSH
26679: LD_INT 0
26681: PUSH
26682: EMPTY
26683: LIST
26684: LIST
26685: PUSH
26686: LD_INT 1
26688: NEG
26689: PUSH
26690: LD_INT 1
26692: NEG
26693: PUSH
26694: EMPTY
26695: LIST
26696: LIST
26697: PUSH
26698: LD_INT 1
26700: NEG
26701: PUSH
26702: LD_INT 2
26704: NEG
26705: PUSH
26706: EMPTY
26707: LIST
26708: LIST
26709: PUSH
26710: LD_INT 0
26712: PUSH
26713: LD_INT 2
26715: NEG
26716: PUSH
26717: EMPTY
26718: LIST
26719: LIST
26720: PUSH
26721: LD_INT 1
26723: PUSH
26724: LD_INT 1
26726: NEG
26727: PUSH
26728: EMPTY
26729: LIST
26730: LIST
26731: PUSH
26732: LD_INT 2
26734: PUSH
26735: LD_INT 0
26737: PUSH
26738: EMPTY
26739: LIST
26740: LIST
26741: PUSH
26742: LD_INT 2
26744: PUSH
26745: LD_INT 1
26747: PUSH
26748: EMPTY
26749: LIST
26750: LIST
26751: PUSH
26752: LD_INT 2
26754: PUSH
26755: LD_INT 2
26757: PUSH
26758: EMPTY
26759: LIST
26760: LIST
26761: PUSH
26762: LD_INT 1
26764: PUSH
26765: LD_INT 2
26767: PUSH
26768: EMPTY
26769: LIST
26770: LIST
26771: PUSH
26772: LD_INT 0
26774: PUSH
26775: LD_INT 2
26777: PUSH
26778: EMPTY
26779: LIST
26780: LIST
26781: PUSH
26782: LD_INT 1
26784: NEG
26785: PUSH
26786: LD_INT 1
26788: PUSH
26789: EMPTY
26790: LIST
26791: LIST
26792: PUSH
26793: LD_INT 2
26795: NEG
26796: PUSH
26797: LD_INT 0
26799: PUSH
26800: EMPTY
26801: LIST
26802: LIST
26803: PUSH
26804: LD_INT 2
26806: NEG
26807: PUSH
26808: LD_INT 1
26810: NEG
26811: PUSH
26812: EMPTY
26813: LIST
26814: LIST
26815: PUSH
26816: LD_INT 2
26818: NEG
26819: PUSH
26820: LD_INT 2
26822: NEG
26823: PUSH
26824: EMPTY
26825: LIST
26826: LIST
26827: PUSH
26828: EMPTY
26829: LIST
26830: LIST
26831: LIST
26832: LIST
26833: LIST
26834: LIST
26835: LIST
26836: LIST
26837: LIST
26838: LIST
26839: LIST
26840: LIST
26841: LIST
26842: LIST
26843: LIST
26844: LIST
26845: LIST
26846: LIST
26847: LIST
26848: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26849: LD_ADDR_VAR 0 22
26853: PUSH
26854: LD_INT 0
26856: PUSH
26857: LD_INT 0
26859: PUSH
26860: EMPTY
26861: LIST
26862: LIST
26863: PUSH
26864: LD_INT 0
26866: PUSH
26867: LD_INT 1
26869: NEG
26870: PUSH
26871: EMPTY
26872: LIST
26873: LIST
26874: PUSH
26875: LD_INT 1
26877: PUSH
26878: LD_INT 0
26880: PUSH
26881: EMPTY
26882: LIST
26883: LIST
26884: PUSH
26885: LD_INT 1
26887: PUSH
26888: LD_INT 1
26890: PUSH
26891: EMPTY
26892: LIST
26893: LIST
26894: PUSH
26895: LD_INT 0
26897: PUSH
26898: LD_INT 1
26900: PUSH
26901: EMPTY
26902: LIST
26903: LIST
26904: PUSH
26905: LD_INT 1
26907: NEG
26908: PUSH
26909: LD_INT 0
26911: PUSH
26912: EMPTY
26913: LIST
26914: LIST
26915: PUSH
26916: LD_INT 1
26918: NEG
26919: PUSH
26920: LD_INT 1
26922: NEG
26923: PUSH
26924: EMPTY
26925: LIST
26926: LIST
26927: PUSH
26928: LD_INT 1
26930: NEG
26931: PUSH
26932: LD_INT 2
26934: NEG
26935: PUSH
26936: EMPTY
26937: LIST
26938: LIST
26939: PUSH
26940: LD_INT 0
26942: PUSH
26943: LD_INT 2
26945: NEG
26946: PUSH
26947: EMPTY
26948: LIST
26949: LIST
26950: PUSH
26951: LD_INT 1
26953: PUSH
26954: LD_INT 1
26956: NEG
26957: PUSH
26958: EMPTY
26959: LIST
26960: LIST
26961: PUSH
26962: LD_INT 2
26964: PUSH
26965: LD_INT 0
26967: PUSH
26968: EMPTY
26969: LIST
26970: LIST
26971: PUSH
26972: LD_INT 2
26974: PUSH
26975: LD_INT 1
26977: PUSH
26978: EMPTY
26979: LIST
26980: LIST
26981: PUSH
26982: LD_INT 2
26984: PUSH
26985: LD_INT 2
26987: PUSH
26988: EMPTY
26989: LIST
26990: LIST
26991: PUSH
26992: LD_INT 1
26994: PUSH
26995: LD_INT 2
26997: PUSH
26998: EMPTY
26999: LIST
27000: LIST
27001: PUSH
27002: LD_INT 0
27004: PUSH
27005: LD_INT 2
27007: PUSH
27008: EMPTY
27009: LIST
27010: LIST
27011: PUSH
27012: LD_INT 1
27014: NEG
27015: PUSH
27016: LD_INT 1
27018: PUSH
27019: EMPTY
27020: LIST
27021: LIST
27022: PUSH
27023: LD_INT 2
27025: NEG
27026: PUSH
27027: LD_INT 0
27029: PUSH
27030: EMPTY
27031: LIST
27032: LIST
27033: PUSH
27034: LD_INT 2
27036: NEG
27037: PUSH
27038: LD_INT 1
27040: NEG
27041: PUSH
27042: EMPTY
27043: LIST
27044: LIST
27045: PUSH
27046: LD_INT 2
27048: NEG
27049: PUSH
27050: LD_INT 2
27052: NEG
27053: PUSH
27054: EMPTY
27055: LIST
27056: LIST
27057: PUSH
27058: EMPTY
27059: LIST
27060: LIST
27061: LIST
27062: LIST
27063: LIST
27064: LIST
27065: LIST
27066: LIST
27067: LIST
27068: LIST
27069: LIST
27070: LIST
27071: LIST
27072: LIST
27073: LIST
27074: LIST
27075: LIST
27076: LIST
27077: LIST
27078: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
27079: LD_ADDR_VAR 0 23
27083: PUSH
27084: LD_INT 0
27086: PUSH
27087: LD_INT 0
27089: PUSH
27090: EMPTY
27091: LIST
27092: LIST
27093: PUSH
27094: LD_INT 0
27096: PUSH
27097: LD_INT 1
27099: NEG
27100: PUSH
27101: EMPTY
27102: LIST
27103: LIST
27104: PUSH
27105: LD_INT 1
27107: PUSH
27108: LD_INT 0
27110: PUSH
27111: EMPTY
27112: LIST
27113: LIST
27114: PUSH
27115: LD_INT 1
27117: PUSH
27118: LD_INT 1
27120: PUSH
27121: EMPTY
27122: LIST
27123: LIST
27124: PUSH
27125: LD_INT 0
27127: PUSH
27128: LD_INT 1
27130: PUSH
27131: EMPTY
27132: LIST
27133: LIST
27134: PUSH
27135: LD_INT 1
27137: NEG
27138: PUSH
27139: LD_INT 0
27141: PUSH
27142: EMPTY
27143: LIST
27144: LIST
27145: PUSH
27146: LD_INT 1
27148: NEG
27149: PUSH
27150: LD_INT 1
27152: NEG
27153: PUSH
27154: EMPTY
27155: LIST
27156: LIST
27157: PUSH
27158: LD_INT 1
27160: NEG
27161: PUSH
27162: LD_INT 2
27164: NEG
27165: PUSH
27166: EMPTY
27167: LIST
27168: LIST
27169: PUSH
27170: LD_INT 0
27172: PUSH
27173: LD_INT 2
27175: NEG
27176: PUSH
27177: EMPTY
27178: LIST
27179: LIST
27180: PUSH
27181: LD_INT 1
27183: PUSH
27184: LD_INT 1
27186: NEG
27187: PUSH
27188: EMPTY
27189: LIST
27190: LIST
27191: PUSH
27192: LD_INT 2
27194: PUSH
27195: LD_INT 0
27197: PUSH
27198: EMPTY
27199: LIST
27200: LIST
27201: PUSH
27202: LD_INT 2
27204: PUSH
27205: LD_INT 1
27207: PUSH
27208: EMPTY
27209: LIST
27210: LIST
27211: PUSH
27212: LD_INT 2
27214: PUSH
27215: LD_INT 2
27217: PUSH
27218: EMPTY
27219: LIST
27220: LIST
27221: PUSH
27222: LD_INT 1
27224: PUSH
27225: LD_INT 2
27227: PUSH
27228: EMPTY
27229: LIST
27230: LIST
27231: PUSH
27232: LD_INT 0
27234: PUSH
27235: LD_INT 2
27237: PUSH
27238: EMPTY
27239: LIST
27240: LIST
27241: PUSH
27242: LD_INT 1
27244: NEG
27245: PUSH
27246: LD_INT 1
27248: PUSH
27249: EMPTY
27250: LIST
27251: LIST
27252: PUSH
27253: LD_INT 2
27255: NEG
27256: PUSH
27257: LD_INT 0
27259: PUSH
27260: EMPTY
27261: LIST
27262: LIST
27263: PUSH
27264: LD_INT 2
27266: NEG
27267: PUSH
27268: LD_INT 1
27270: NEG
27271: PUSH
27272: EMPTY
27273: LIST
27274: LIST
27275: PUSH
27276: LD_INT 2
27278: NEG
27279: PUSH
27280: LD_INT 2
27282: NEG
27283: PUSH
27284: EMPTY
27285: LIST
27286: LIST
27287: PUSH
27288: LD_INT 2
27290: NEG
27291: PUSH
27292: LD_INT 3
27294: NEG
27295: PUSH
27296: EMPTY
27297: LIST
27298: LIST
27299: PUSH
27300: LD_INT 1
27302: NEG
27303: PUSH
27304: LD_INT 3
27306: NEG
27307: PUSH
27308: EMPTY
27309: LIST
27310: LIST
27311: PUSH
27312: LD_INT 1
27314: PUSH
27315: LD_INT 2
27317: NEG
27318: PUSH
27319: EMPTY
27320: LIST
27321: LIST
27322: PUSH
27323: LD_INT 2
27325: PUSH
27326: LD_INT 1
27328: NEG
27329: PUSH
27330: EMPTY
27331: LIST
27332: LIST
27333: PUSH
27334: EMPTY
27335: LIST
27336: LIST
27337: LIST
27338: LIST
27339: LIST
27340: LIST
27341: LIST
27342: LIST
27343: LIST
27344: LIST
27345: LIST
27346: LIST
27347: LIST
27348: LIST
27349: LIST
27350: LIST
27351: LIST
27352: LIST
27353: LIST
27354: LIST
27355: LIST
27356: LIST
27357: LIST
27358: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
27359: LD_ADDR_VAR 0 24
27363: PUSH
27364: LD_INT 0
27366: PUSH
27367: LD_INT 0
27369: PUSH
27370: EMPTY
27371: LIST
27372: LIST
27373: PUSH
27374: LD_INT 0
27376: PUSH
27377: LD_INT 1
27379: NEG
27380: PUSH
27381: EMPTY
27382: LIST
27383: LIST
27384: PUSH
27385: LD_INT 1
27387: PUSH
27388: LD_INT 0
27390: PUSH
27391: EMPTY
27392: LIST
27393: LIST
27394: PUSH
27395: LD_INT 1
27397: PUSH
27398: LD_INT 1
27400: PUSH
27401: EMPTY
27402: LIST
27403: LIST
27404: PUSH
27405: LD_INT 0
27407: PUSH
27408: LD_INT 1
27410: PUSH
27411: EMPTY
27412: LIST
27413: LIST
27414: PUSH
27415: LD_INT 1
27417: NEG
27418: PUSH
27419: LD_INT 0
27421: PUSH
27422: EMPTY
27423: LIST
27424: LIST
27425: PUSH
27426: LD_INT 1
27428: NEG
27429: PUSH
27430: LD_INT 1
27432: NEG
27433: PUSH
27434: EMPTY
27435: LIST
27436: LIST
27437: PUSH
27438: LD_INT 1
27440: NEG
27441: PUSH
27442: LD_INT 2
27444: NEG
27445: PUSH
27446: EMPTY
27447: LIST
27448: LIST
27449: PUSH
27450: LD_INT 0
27452: PUSH
27453: LD_INT 2
27455: NEG
27456: PUSH
27457: EMPTY
27458: LIST
27459: LIST
27460: PUSH
27461: LD_INT 1
27463: PUSH
27464: LD_INT 1
27466: NEG
27467: PUSH
27468: EMPTY
27469: LIST
27470: LIST
27471: PUSH
27472: LD_INT 2
27474: PUSH
27475: LD_INT 0
27477: PUSH
27478: EMPTY
27479: LIST
27480: LIST
27481: PUSH
27482: LD_INT 2
27484: PUSH
27485: LD_INT 1
27487: PUSH
27488: EMPTY
27489: LIST
27490: LIST
27491: PUSH
27492: LD_INT 2
27494: PUSH
27495: LD_INT 2
27497: PUSH
27498: EMPTY
27499: LIST
27500: LIST
27501: PUSH
27502: LD_INT 1
27504: PUSH
27505: LD_INT 2
27507: PUSH
27508: EMPTY
27509: LIST
27510: LIST
27511: PUSH
27512: LD_INT 0
27514: PUSH
27515: LD_INT 2
27517: PUSH
27518: EMPTY
27519: LIST
27520: LIST
27521: PUSH
27522: LD_INT 1
27524: NEG
27525: PUSH
27526: LD_INT 1
27528: PUSH
27529: EMPTY
27530: LIST
27531: LIST
27532: PUSH
27533: LD_INT 2
27535: NEG
27536: PUSH
27537: LD_INT 0
27539: PUSH
27540: EMPTY
27541: LIST
27542: LIST
27543: PUSH
27544: LD_INT 2
27546: NEG
27547: PUSH
27548: LD_INT 1
27550: NEG
27551: PUSH
27552: EMPTY
27553: LIST
27554: LIST
27555: PUSH
27556: LD_INT 2
27558: NEG
27559: PUSH
27560: LD_INT 2
27562: NEG
27563: PUSH
27564: EMPTY
27565: LIST
27566: LIST
27567: PUSH
27568: LD_INT 1
27570: PUSH
27571: LD_INT 2
27573: NEG
27574: PUSH
27575: EMPTY
27576: LIST
27577: LIST
27578: PUSH
27579: LD_INT 2
27581: PUSH
27582: LD_INT 1
27584: NEG
27585: PUSH
27586: EMPTY
27587: LIST
27588: LIST
27589: PUSH
27590: LD_INT 3
27592: PUSH
27593: LD_INT 1
27595: PUSH
27596: EMPTY
27597: LIST
27598: LIST
27599: PUSH
27600: LD_INT 3
27602: PUSH
27603: LD_INT 2
27605: PUSH
27606: EMPTY
27607: LIST
27608: LIST
27609: PUSH
27610: EMPTY
27611: LIST
27612: LIST
27613: LIST
27614: LIST
27615: LIST
27616: LIST
27617: LIST
27618: LIST
27619: LIST
27620: LIST
27621: LIST
27622: LIST
27623: LIST
27624: LIST
27625: LIST
27626: LIST
27627: LIST
27628: LIST
27629: LIST
27630: LIST
27631: LIST
27632: LIST
27633: LIST
27634: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
27635: LD_ADDR_VAR 0 25
27639: PUSH
27640: LD_INT 0
27642: PUSH
27643: LD_INT 0
27645: PUSH
27646: EMPTY
27647: LIST
27648: LIST
27649: PUSH
27650: LD_INT 0
27652: PUSH
27653: LD_INT 1
27655: NEG
27656: PUSH
27657: EMPTY
27658: LIST
27659: LIST
27660: PUSH
27661: LD_INT 1
27663: PUSH
27664: LD_INT 0
27666: PUSH
27667: EMPTY
27668: LIST
27669: LIST
27670: PUSH
27671: LD_INT 1
27673: PUSH
27674: LD_INT 1
27676: PUSH
27677: EMPTY
27678: LIST
27679: LIST
27680: PUSH
27681: LD_INT 0
27683: PUSH
27684: LD_INT 1
27686: PUSH
27687: EMPTY
27688: LIST
27689: LIST
27690: PUSH
27691: LD_INT 1
27693: NEG
27694: PUSH
27695: LD_INT 0
27697: PUSH
27698: EMPTY
27699: LIST
27700: LIST
27701: PUSH
27702: LD_INT 1
27704: NEG
27705: PUSH
27706: LD_INT 1
27708: NEG
27709: PUSH
27710: EMPTY
27711: LIST
27712: LIST
27713: PUSH
27714: LD_INT 1
27716: NEG
27717: PUSH
27718: LD_INT 2
27720: NEG
27721: PUSH
27722: EMPTY
27723: LIST
27724: LIST
27725: PUSH
27726: LD_INT 0
27728: PUSH
27729: LD_INT 2
27731: NEG
27732: PUSH
27733: EMPTY
27734: LIST
27735: LIST
27736: PUSH
27737: LD_INT 1
27739: PUSH
27740: LD_INT 1
27742: NEG
27743: PUSH
27744: EMPTY
27745: LIST
27746: LIST
27747: PUSH
27748: LD_INT 2
27750: PUSH
27751: LD_INT 0
27753: PUSH
27754: EMPTY
27755: LIST
27756: LIST
27757: PUSH
27758: LD_INT 2
27760: PUSH
27761: LD_INT 1
27763: PUSH
27764: EMPTY
27765: LIST
27766: LIST
27767: PUSH
27768: LD_INT 2
27770: PUSH
27771: LD_INT 2
27773: PUSH
27774: EMPTY
27775: LIST
27776: LIST
27777: PUSH
27778: LD_INT 1
27780: PUSH
27781: LD_INT 2
27783: PUSH
27784: EMPTY
27785: LIST
27786: LIST
27787: PUSH
27788: LD_INT 0
27790: PUSH
27791: LD_INT 2
27793: PUSH
27794: EMPTY
27795: LIST
27796: LIST
27797: PUSH
27798: LD_INT 1
27800: NEG
27801: PUSH
27802: LD_INT 1
27804: PUSH
27805: EMPTY
27806: LIST
27807: LIST
27808: PUSH
27809: LD_INT 2
27811: NEG
27812: PUSH
27813: LD_INT 0
27815: PUSH
27816: EMPTY
27817: LIST
27818: LIST
27819: PUSH
27820: LD_INT 2
27822: NEG
27823: PUSH
27824: LD_INT 1
27826: NEG
27827: PUSH
27828: EMPTY
27829: LIST
27830: LIST
27831: PUSH
27832: LD_INT 2
27834: NEG
27835: PUSH
27836: LD_INT 2
27838: NEG
27839: PUSH
27840: EMPTY
27841: LIST
27842: LIST
27843: PUSH
27844: LD_INT 3
27846: PUSH
27847: LD_INT 1
27849: PUSH
27850: EMPTY
27851: LIST
27852: LIST
27853: PUSH
27854: LD_INT 3
27856: PUSH
27857: LD_INT 2
27859: PUSH
27860: EMPTY
27861: LIST
27862: LIST
27863: PUSH
27864: LD_INT 2
27866: PUSH
27867: LD_INT 3
27869: PUSH
27870: EMPTY
27871: LIST
27872: LIST
27873: PUSH
27874: LD_INT 1
27876: PUSH
27877: LD_INT 3
27879: PUSH
27880: EMPTY
27881: LIST
27882: LIST
27883: PUSH
27884: EMPTY
27885: LIST
27886: LIST
27887: LIST
27888: LIST
27889: LIST
27890: LIST
27891: LIST
27892: LIST
27893: LIST
27894: LIST
27895: LIST
27896: LIST
27897: LIST
27898: LIST
27899: LIST
27900: LIST
27901: LIST
27902: LIST
27903: LIST
27904: LIST
27905: LIST
27906: LIST
27907: LIST
27908: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
27909: LD_ADDR_VAR 0 26
27913: PUSH
27914: LD_INT 0
27916: PUSH
27917: LD_INT 0
27919: PUSH
27920: EMPTY
27921: LIST
27922: LIST
27923: PUSH
27924: LD_INT 0
27926: PUSH
27927: LD_INT 1
27929: NEG
27930: PUSH
27931: EMPTY
27932: LIST
27933: LIST
27934: PUSH
27935: LD_INT 1
27937: PUSH
27938: LD_INT 0
27940: PUSH
27941: EMPTY
27942: LIST
27943: LIST
27944: PUSH
27945: LD_INT 1
27947: PUSH
27948: LD_INT 1
27950: PUSH
27951: EMPTY
27952: LIST
27953: LIST
27954: PUSH
27955: LD_INT 0
27957: PUSH
27958: LD_INT 1
27960: PUSH
27961: EMPTY
27962: LIST
27963: LIST
27964: PUSH
27965: LD_INT 1
27967: NEG
27968: PUSH
27969: LD_INT 0
27971: PUSH
27972: EMPTY
27973: LIST
27974: LIST
27975: PUSH
27976: LD_INT 1
27978: NEG
27979: PUSH
27980: LD_INT 1
27982: NEG
27983: PUSH
27984: EMPTY
27985: LIST
27986: LIST
27987: PUSH
27988: LD_INT 1
27990: NEG
27991: PUSH
27992: LD_INT 2
27994: NEG
27995: PUSH
27996: EMPTY
27997: LIST
27998: LIST
27999: PUSH
28000: LD_INT 0
28002: PUSH
28003: LD_INT 2
28005: NEG
28006: PUSH
28007: EMPTY
28008: LIST
28009: LIST
28010: PUSH
28011: LD_INT 1
28013: PUSH
28014: LD_INT 1
28016: NEG
28017: PUSH
28018: EMPTY
28019: LIST
28020: LIST
28021: PUSH
28022: LD_INT 2
28024: PUSH
28025: LD_INT 0
28027: PUSH
28028: EMPTY
28029: LIST
28030: LIST
28031: PUSH
28032: LD_INT 2
28034: PUSH
28035: LD_INT 1
28037: PUSH
28038: EMPTY
28039: LIST
28040: LIST
28041: PUSH
28042: LD_INT 2
28044: PUSH
28045: LD_INT 2
28047: PUSH
28048: EMPTY
28049: LIST
28050: LIST
28051: PUSH
28052: LD_INT 1
28054: PUSH
28055: LD_INT 2
28057: PUSH
28058: EMPTY
28059: LIST
28060: LIST
28061: PUSH
28062: LD_INT 0
28064: PUSH
28065: LD_INT 2
28067: PUSH
28068: EMPTY
28069: LIST
28070: LIST
28071: PUSH
28072: LD_INT 1
28074: NEG
28075: PUSH
28076: LD_INT 1
28078: PUSH
28079: EMPTY
28080: LIST
28081: LIST
28082: PUSH
28083: LD_INT 2
28085: NEG
28086: PUSH
28087: LD_INT 0
28089: PUSH
28090: EMPTY
28091: LIST
28092: LIST
28093: PUSH
28094: LD_INT 2
28096: NEG
28097: PUSH
28098: LD_INT 1
28100: NEG
28101: PUSH
28102: EMPTY
28103: LIST
28104: LIST
28105: PUSH
28106: LD_INT 2
28108: NEG
28109: PUSH
28110: LD_INT 2
28112: NEG
28113: PUSH
28114: EMPTY
28115: LIST
28116: LIST
28117: PUSH
28118: LD_INT 2
28120: PUSH
28121: LD_INT 3
28123: PUSH
28124: EMPTY
28125: LIST
28126: LIST
28127: PUSH
28128: LD_INT 1
28130: PUSH
28131: LD_INT 3
28133: PUSH
28134: EMPTY
28135: LIST
28136: LIST
28137: PUSH
28138: LD_INT 1
28140: NEG
28141: PUSH
28142: LD_INT 2
28144: PUSH
28145: EMPTY
28146: LIST
28147: LIST
28148: PUSH
28149: LD_INT 2
28151: NEG
28152: PUSH
28153: LD_INT 1
28155: PUSH
28156: EMPTY
28157: LIST
28158: LIST
28159: PUSH
28160: EMPTY
28161: LIST
28162: LIST
28163: LIST
28164: LIST
28165: LIST
28166: LIST
28167: LIST
28168: LIST
28169: LIST
28170: LIST
28171: LIST
28172: LIST
28173: LIST
28174: LIST
28175: LIST
28176: LIST
28177: LIST
28178: LIST
28179: LIST
28180: LIST
28181: LIST
28182: LIST
28183: LIST
28184: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
28185: LD_ADDR_VAR 0 27
28189: PUSH
28190: LD_INT 0
28192: PUSH
28193: LD_INT 0
28195: PUSH
28196: EMPTY
28197: LIST
28198: LIST
28199: PUSH
28200: LD_INT 0
28202: PUSH
28203: LD_INT 1
28205: NEG
28206: PUSH
28207: EMPTY
28208: LIST
28209: LIST
28210: PUSH
28211: LD_INT 1
28213: PUSH
28214: LD_INT 0
28216: PUSH
28217: EMPTY
28218: LIST
28219: LIST
28220: PUSH
28221: LD_INT 1
28223: PUSH
28224: LD_INT 1
28226: PUSH
28227: EMPTY
28228: LIST
28229: LIST
28230: PUSH
28231: LD_INT 0
28233: PUSH
28234: LD_INT 1
28236: PUSH
28237: EMPTY
28238: LIST
28239: LIST
28240: PUSH
28241: LD_INT 1
28243: NEG
28244: PUSH
28245: LD_INT 0
28247: PUSH
28248: EMPTY
28249: LIST
28250: LIST
28251: PUSH
28252: LD_INT 1
28254: NEG
28255: PUSH
28256: LD_INT 1
28258: NEG
28259: PUSH
28260: EMPTY
28261: LIST
28262: LIST
28263: PUSH
28264: LD_INT 1
28266: NEG
28267: PUSH
28268: LD_INT 2
28270: NEG
28271: PUSH
28272: EMPTY
28273: LIST
28274: LIST
28275: PUSH
28276: LD_INT 0
28278: PUSH
28279: LD_INT 2
28281: NEG
28282: PUSH
28283: EMPTY
28284: LIST
28285: LIST
28286: PUSH
28287: LD_INT 1
28289: PUSH
28290: LD_INT 1
28292: NEG
28293: PUSH
28294: EMPTY
28295: LIST
28296: LIST
28297: PUSH
28298: LD_INT 2
28300: PUSH
28301: LD_INT 0
28303: PUSH
28304: EMPTY
28305: LIST
28306: LIST
28307: PUSH
28308: LD_INT 2
28310: PUSH
28311: LD_INT 1
28313: PUSH
28314: EMPTY
28315: LIST
28316: LIST
28317: PUSH
28318: LD_INT 2
28320: PUSH
28321: LD_INT 2
28323: PUSH
28324: EMPTY
28325: LIST
28326: LIST
28327: PUSH
28328: LD_INT 1
28330: PUSH
28331: LD_INT 2
28333: PUSH
28334: EMPTY
28335: LIST
28336: LIST
28337: PUSH
28338: LD_INT 0
28340: PUSH
28341: LD_INT 2
28343: PUSH
28344: EMPTY
28345: LIST
28346: LIST
28347: PUSH
28348: LD_INT 1
28350: NEG
28351: PUSH
28352: LD_INT 1
28354: PUSH
28355: EMPTY
28356: LIST
28357: LIST
28358: PUSH
28359: LD_INT 2
28361: NEG
28362: PUSH
28363: LD_INT 0
28365: PUSH
28366: EMPTY
28367: LIST
28368: LIST
28369: PUSH
28370: LD_INT 2
28372: NEG
28373: PUSH
28374: LD_INT 1
28376: NEG
28377: PUSH
28378: EMPTY
28379: LIST
28380: LIST
28381: PUSH
28382: LD_INT 2
28384: NEG
28385: PUSH
28386: LD_INT 2
28388: NEG
28389: PUSH
28390: EMPTY
28391: LIST
28392: LIST
28393: PUSH
28394: LD_INT 1
28396: NEG
28397: PUSH
28398: LD_INT 2
28400: PUSH
28401: EMPTY
28402: LIST
28403: LIST
28404: PUSH
28405: LD_INT 2
28407: NEG
28408: PUSH
28409: LD_INT 1
28411: PUSH
28412: EMPTY
28413: LIST
28414: LIST
28415: PUSH
28416: LD_INT 3
28418: NEG
28419: PUSH
28420: LD_INT 1
28422: NEG
28423: PUSH
28424: EMPTY
28425: LIST
28426: LIST
28427: PUSH
28428: LD_INT 3
28430: NEG
28431: PUSH
28432: LD_INT 2
28434: NEG
28435: PUSH
28436: EMPTY
28437: LIST
28438: LIST
28439: PUSH
28440: EMPTY
28441: LIST
28442: LIST
28443: LIST
28444: LIST
28445: LIST
28446: LIST
28447: LIST
28448: LIST
28449: LIST
28450: LIST
28451: LIST
28452: LIST
28453: LIST
28454: LIST
28455: LIST
28456: LIST
28457: LIST
28458: LIST
28459: LIST
28460: LIST
28461: LIST
28462: LIST
28463: LIST
28464: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
28465: LD_ADDR_VAR 0 28
28469: PUSH
28470: LD_INT 0
28472: PUSH
28473: LD_INT 0
28475: PUSH
28476: EMPTY
28477: LIST
28478: LIST
28479: PUSH
28480: LD_INT 0
28482: PUSH
28483: LD_INT 1
28485: NEG
28486: PUSH
28487: EMPTY
28488: LIST
28489: LIST
28490: PUSH
28491: LD_INT 1
28493: PUSH
28494: LD_INT 0
28496: PUSH
28497: EMPTY
28498: LIST
28499: LIST
28500: PUSH
28501: LD_INT 1
28503: PUSH
28504: LD_INT 1
28506: PUSH
28507: EMPTY
28508: LIST
28509: LIST
28510: PUSH
28511: LD_INT 0
28513: PUSH
28514: LD_INT 1
28516: PUSH
28517: EMPTY
28518: LIST
28519: LIST
28520: PUSH
28521: LD_INT 1
28523: NEG
28524: PUSH
28525: LD_INT 0
28527: PUSH
28528: EMPTY
28529: LIST
28530: LIST
28531: PUSH
28532: LD_INT 1
28534: NEG
28535: PUSH
28536: LD_INT 1
28538: NEG
28539: PUSH
28540: EMPTY
28541: LIST
28542: LIST
28543: PUSH
28544: LD_INT 1
28546: NEG
28547: PUSH
28548: LD_INT 2
28550: NEG
28551: PUSH
28552: EMPTY
28553: LIST
28554: LIST
28555: PUSH
28556: LD_INT 0
28558: PUSH
28559: LD_INT 2
28561: NEG
28562: PUSH
28563: EMPTY
28564: LIST
28565: LIST
28566: PUSH
28567: LD_INT 1
28569: PUSH
28570: LD_INT 1
28572: NEG
28573: PUSH
28574: EMPTY
28575: LIST
28576: LIST
28577: PUSH
28578: LD_INT 2
28580: PUSH
28581: LD_INT 0
28583: PUSH
28584: EMPTY
28585: LIST
28586: LIST
28587: PUSH
28588: LD_INT 2
28590: PUSH
28591: LD_INT 1
28593: PUSH
28594: EMPTY
28595: LIST
28596: LIST
28597: PUSH
28598: LD_INT 2
28600: PUSH
28601: LD_INT 2
28603: PUSH
28604: EMPTY
28605: LIST
28606: LIST
28607: PUSH
28608: LD_INT 1
28610: PUSH
28611: LD_INT 2
28613: PUSH
28614: EMPTY
28615: LIST
28616: LIST
28617: PUSH
28618: LD_INT 0
28620: PUSH
28621: LD_INT 2
28623: PUSH
28624: EMPTY
28625: LIST
28626: LIST
28627: PUSH
28628: LD_INT 1
28630: NEG
28631: PUSH
28632: LD_INT 1
28634: PUSH
28635: EMPTY
28636: LIST
28637: LIST
28638: PUSH
28639: LD_INT 2
28641: NEG
28642: PUSH
28643: LD_INT 0
28645: PUSH
28646: EMPTY
28647: LIST
28648: LIST
28649: PUSH
28650: LD_INT 2
28652: NEG
28653: PUSH
28654: LD_INT 1
28656: NEG
28657: PUSH
28658: EMPTY
28659: LIST
28660: LIST
28661: PUSH
28662: LD_INT 2
28664: NEG
28665: PUSH
28666: LD_INT 2
28668: NEG
28669: PUSH
28670: EMPTY
28671: LIST
28672: LIST
28673: PUSH
28674: LD_INT 2
28676: NEG
28677: PUSH
28678: LD_INT 3
28680: NEG
28681: PUSH
28682: EMPTY
28683: LIST
28684: LIST
28685: PUSH
28686: LD_INT 1
28688: NEG
28689: PUSH
28690: LD_INT 3
28692: NEG
28693: PUSH
28694: EMPTY
28695: LIST
28696: LIST
28697: PUSH
28698: LD_INT 3
28700: NEG
28701: PUSH
28702: LD_INT 1
28704: NEG
28705: PUSH
28706: EMPTY
28707: LIST
28708: LIST
28709: PUSH
28710: LD_INT 3
28712: NEG
28713: PUSH
28714: LD_INT 2
28716: NEG
28717: PUSH
28718: EMPTY
28719: LIST
28720: LIST
28721: PUSH
28722: EMPTY
28723: LIST
28724: LIST
28725: LIST
28726: LIST
28727: LIST
28728: LIST
28729: LIST
28730: LIST
28731: LIST
28732: LIST
28733: LIST
28734: LIST
28735: LIST
28736: LIST
28737: LIST
28738: LIST
28739: LIST
28740: LIST
28741: LIST
28742: LIST
28743: LIST
28744: LIST
28745: LIST
28746: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
28747: LD_ADDR_VAR 0 29
28751: PUSH
28752: LD_INT 0
28754: PUSH
28755: LD_INT 0
28757: PUSH
28758: EMPTY
28759: LIST
28760: LIST
28761: PUSH
28762: LD_INT 0
28764: PUSH
28765: LD_INT 1
28767: NEG
28768: PUSH
28769: EMPTY
28770: LIST
28771: LIST
28772: PUSH
28773: LD_INT 1
28775: PUSH
28776: LD_INT 0
28778: PUSH
28779: EMPTY
28780: LIST
28781: LIST
28782: PUSH
28783: LD_INT 1
28785: PUSH
28786: LD_INT 1
28788: PUSH
28789: EMPTY
28790: LIST
28791: LIST
28792: PUSH
28793: LD_INT 0
28795: PUSH
28796: LD_INT 1
28798: PUSH
28799: EMPTY
28800: LIST
28801: LIST
28802: PUSH
28803: LD_INT 1
28805: NEG
28806: PUSH
28807: LD_INT 0
28809: PUSH
28810: EMPTY
28811: LIST
28812: LIST
28813: PUSH
28814: LD_INT 1
28816: NEG
28817: PUSH
28818: LD_INT 1
28820: NEG
28821: PUSH
28822: EMPTY
28823: LIST
28824: LIST
28825: PUSH
28826: LD_INT 1
28828: NEG
28829: PUSH
28830: LD_INT 2
28832: NEG
28833: PUSH
28834: EMPTY
28835: LIST
28836: LIST
28837: PUSH
28838: LD_INT 0
28840: PUSH
28841: LD_INT 2
28843: NEG
28844: PUSH
28845: EMPTY
28846: LIST
28847: LIST
28848: PUSH
28849: LD_INT 1
28851: PUSH
28852: LD_INT 1
28854: NEG
28855: PUSH
28856: EMPTY
28857: LIST
28858: LIST
28859: PUSH
28860: LD_INT 2
28862: PUSH
28863: LD_INT 0
28865: PUSH
28866: EMPTY
28867: LIST
28868: LIST
28869: PUSH
28870: LD_INT 2
28872: PUSH
28873: LD_INT 1
28875: PUSH
28876: EMPTY
28877: LIST
28878: LIST
28879: PUSH
28880: LD_INT 1
28882: PUSH
28883: LD_INT 2
28885: PUSH
28886: EMPTY
28887: LIST
28888: LIST
28889: PUSH
28890: LD_INT 0
28892: PUSH
28893: LD_INT 2
28895: PUSH
28896: EMPTY
28897: LIST
28898: LIST
28899: PUSH
28900: LD_INT 1
28902: NEG
28903: PUSH
28904: LD_INT 1
28906: PUSH
28907: EMPTY
28908: LIST
28909: LIST
28910: PUSH
28911: LD_INT 2
28913: NEG
28914: PUSH
28915: LD_INT 1
28917: NEG
28918: PUSH
28919: EMPTY
28920: LIST
28921: LIST
28922: PUSH
28923: LD_INT 2
28925: NEG
28926: PUSH
28927: LD_INT 2
28929: NEG
28930: PUSH
28931: EMPTY
28932: LIST
28933: LIST
28934: PUSH
28935: LD_INT 2
28937: NEG
28938: PUSH
28939: LD_INT 3
28941: NEG
28942: PUSH
28943: EMPTY
28944: LIST
28945: LIST
28946: PUSH
28947: LD_INT 2
28949: PUSH
28950: LD_INT 1
28952: NEG
28953: PUSH
28954: EMPTY
28955: LIST
28956: LIST
28957: PUSH
28958: LD_INT 3
28960: PUSH
28961: LD_INT 1
28963: PUSH
28964: EMPTY
28965: LIST
28966: LIST
28967: PUSH
28968: LD_INT 1
28970: PUSH
28971: LD_INT 3
28973: PUSH
28974: EMPTY
28975: LIST
28976: LIST
28977: PUSH
28978: LD_INT 1
28980: NEG
28981: PUSH
28982: LD_INT 2
28984: PUSH
28985: EMPTY
28986: LIST
28987: LIST
28988: PUSH
28989: LD_INT 3
28991: NEG
28992: PUSH
28993: LD_INT 2
28995: NEG
28996: PUSH
28997: EMPTY
28998: LIST
28999: LIST
29000: PUSH
29001: EMPTY
29002: LIST
29003: LIST
29004: LIST
29005: LIST
29006: LIST
29007: LIST
29008: LIST
29009: LIST
29010: LIST
29011: LIST
29012: LIST
29013: LIST
29014: LIST
29015: LIST
29016: LIST
29017: LIST
29018: LIST
29019: LIST
29020: LIST
29021: LIST
29022: LIST
29023: LIST
29024: LIST
29025: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
29026: LD_ADDR_VAR 0 30
29030: PUSH
29031: LD_INT 0
29033: PUSH
29034: LD_INT 0
29036: PUSH
29037: EMPTY
29038: LIST
29039: LIST
29040: PUSH
29041: LD_INT 0
29043: PUSH
29044: LD_INT 1
29046: NEG
29047: PUSH
29048: EMPTY
29049: LIST
29050: LIST
29051: PUSH
29052: LD_INT 1
29054: PUSH
29055: LD_INT 0
29057: PUSH
29058: EMPTY
29059: LIST
29060: LIST
29061: PUSH
29062: LD_INT 1
29064: PUSH
29065: LD_INT 1
29067: PUSH
29068: EMPTY
29069: LIST
29070: LIST
29071: PUSH
29072: LD_INT 0
29074: PUSH
29075: LD_INT 1
29077: PUSH
29078: EMPTY
29079: LIST
29080: LIST
29081: PUSH
29082: LD_INT 1
29084: NEG
29085: PUSH
29086: LD_INT 0
29088: PUSH
29089: EMPTY
29090: LIST
29091: LIST
29092: PUSH
29093: LD_INT 1
29095: NEG
29096: PUSH
29097: LD_INT 1
29099: NEG
29100: PUSH
29101: EMPTY
29102: LIST
29103: LIST
29104: PUSH
29105: LD_INT 1
29107: NEG
29108: PUSH
29109: LD_INT 2
29111: NEG
29112: PUSH
29113: EMPTY
29114: LIST
29115: LIST
29116: PUSH
29117: LD_INT 0
29119: PUSH
29120: LD_INT 2
29122: NEG
29123: PUSH
29124: EMPTY
29125: LIST
29126: LIST
29127: PUSH
29128: LD_INT 1
29130: PUSH
29131: LD_INT 1
29133: NEG
29134: PUSH
29135: EMPTY
29136: LIST
29137: LIST
29138: PUSH
29139: LD_INT 2
29141: PUSH
29142: LD_INT 0
29144: PUSH
29145: EMPTY
29146: LIST
29147: LIST
29148: PUSH
29149: LD_INT 2
29151: PUSH
29152: LD_INT 1
29154: PUSH
29155: EMPTY
29156: LIST
29157: LIST
29158: PUSH
29159: LD_INT 2
29161: PUSH
29162: LD_INT 2
29164: PUSH
29165: EMPTY
29166: LIST
29167: LIST
29168: PUSH
29169: LD_INT 1
29171: PUSH
29172: LD_INT 2
29174: PUSH
29175: EMPTY
29176: LIST
29177: LIST
29178: PUSH
29179: LD_INT 1
29181: NEG
29182: PUSH
29183: LD_INT 1
29185: PUSH
29186: EMPTY
29187: LIST
29188: LIST
29189: PUSH
29190: LD_INT 2
29192: NEG
29193: PUSH
29194: LD_INT 0
29196: PUSH
29197: EMPTY
29198: LIST
29199: LIST
29200: PUSH
29201: LD_INT 2
29203: NEG
29204: PUSH
29205: LD_INT 1
29207: NEG
29208: PUSH
29209: EMPTY
29210: LIST
29211: LIST
29212: PUSH
29213: LD_INT 1
29215: NEG
29216: PUSH
29217: LD_INT 3
29219: NEG
29220: PUSH
29221: EMPTY
29222: LIST
29223: LIST
29224: PUSH
29225: LD_INT 1
29227: PUSH
29228: LD_INT 2
29230: NEG
29231: PUSH
29232: EMPTY
29233: LIST
29234: LIST
29235: PUSH
29236: LD_INT 3
29238: PUSH
29239: LD_INT 2
29241: PUSH
29242: EMPTY
29243: LIST
29244: LIST
29245: PUSH
29246: LD_INT 2
29248: PUSH
29249: LD_INT 3
29251: PUSH
29252: EMPTY
29253: LIST
29254: LIST
29255: PUSH
29256: LD_INT 2
29258: NEG
29259: PUSH
29260: LD_INT 1
29262: PUSH
29263: EMPTY
29264: LIST
29265: LIST
29266: PUSH
29267: LD_INT 3
29269: NEG
29270: PUSH
29271: LD_INT 1
29273: NEG
29274: PUSH
29275: EMPTY
29276: LIST
29277: LIST
29278: PUSH
29279: EMPTY
29280: LIST
29281: LIST
29282: LIST
29283: LIST
29284: LIST
29285: LIST
29286: LIST
29287: LIST
29288: LIST
29289: LIST
29290: LIST
29291: LIST
29292: LIST
29293: LIST
29294: LIST
29295: LIST
29296: LIST
29297: LIST
29298: LIST
29299: LIST
29300: LIST
29301: LIST
29302: LIST
29303: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
29304: LD_ADDR_VAR 0 31
29308: PUSH
29309: LD_INT 0
29311: PUSH
29312: LD_INT 0
29314: PUSH
29315: EMPTY
29316: LIST
29317: LIST
29318: PUSH
29319: LD_INT 0
29321: PUSH
29322: LD_INT 1
29324: NEG
29325: PUSH
29326: EMPTY
29327: LIST
29328: LIST
29329: PUSH
29330: LD_INT 1
29332: PUSH
29333: LD_INT 0
29335: PUSH
29336: EMPTY
29337: LIST
29338: LIST
29339: PUSH
29340: LD_INT 1
29342: PUSH
29343: LD_INT 1
29345: PUSH
29346: EMPTY
29347: LIST
29348: LIST
29349: PUSH
29350: LD_INT 0
29352: PUSH
29353: LD_INT 1
29355: PUSH
29356: EMPTY
29357: LIST
29358: LIST
29359: PUSH
29360: LD_INT 1
29362: NEG
29363: PUSH
29364: LD_INT 0
29366: PUSH
29367: EMPTY
29368: LIST
29369: LIST
29370: PUSH
29371: LD_INT 1
29373: NEG
29374: PUSH
29375: LD_INT 1
29377: NEG
29378: PUSH
29379: EMPTY
29380: LIST
29381: LIST
29382: PUSH
29383: LD_INT 1
29385: NEG
29386: PUSH
29387: LD_INT 2
29389: NEG
29390: PUSH
29391: EMPTY
29392: LIST
29393: LIST
29394: PUSH
29395: LD_INT 1
29397: PUSH
29398: LD_INT 1
29400: NEG
29401: PUSH
29402: EMPTY
29403: LIST
29404: LIST
29405: PUSH
29406: LD_INT 2
29408: PUSH
29409: LD_INT 0
29411: PUSH
29412: EMPTY
29413: LIST
29414: LIST
29415: PUSH
29416: LD_INT 2
29418: PUSH
29419: LD_INT 1
29421: PUSH
29422: EMPTY
29423: LIST
29424: LIST
29425: PUSH
29426: LD_INT 2
29428: PUSH
29429: LD_INT 2
29431: PUSH
29432: EMPTY
29433: LIST
29434: LIST
29435: PUSH
29436: LD_INT 1
29438: PUSH
29439: LD_INT 2
29441: PUSH
29442: EMPTY
29443: LIST
29444: LIST
29445: PUSH
29446: LD_INT 0
29448: PUSH
29449: LD_INT 2
29451: PUSH
29452: EMPTY
29453: LIST
29454: LIST
29455: PUSH
29456: LD_INT 1
29458: NEG
29459: PUSH
29460: LD_INT 1
29462: PUSH
29463: EMPTY
29464: LIST
29465: LIST
29466: PUSH
29467: LD_INT 2
29469: NEG
29470: PUSH
29471: LD_INT 1
29473: NEG
29474: PUSH
29475: EMPTY
29476: LIST
29477: LIST
29478: PUSH
29479: LD_INT 2
29481: NEG
29482: PUSH
29483: LD_INT 2
29485: NEG
29486: PUSH
29487: EMPTY
29488: LIST
29489: LIST
29490: PUSH
29491: LD_INT 2
29493: NEG
29494: PUSH
29495: LD_INT 3
29497: NEG
29498: PUSH
29499: EMPTY
29500: LIST
29501: LIST
29502: PUSH
29503: LD_INT 2
29505: PUSH
29506: LD_INT 1
29508: NEG
29509: PUSH
29510: EMPTY
29511: LIST
29512: LIST
29513: PUSH
29514: LD_INT 3
29516: PUSH
29517: LD_INT 1
29519: PUSH
29520: EMPTY
29521: LIST
29522: LIST
29523: PUSH
29524: LD_INT 1
29526: PUSH
29527: LD_INT 3
29529: PUSH
29530: EMPTY
29531: LIST
29532: LIST
29533: PUSH
29534: LD_INT 1
29536: NEG
29537: PUSH
29538: LD_INT 2
29540: PUSH
29541: EMPTY
29542: LIST
29543: LIST
29544: PUSH
29545: LD_INT 3
29547: NEG
29548: PUSH
29549: LD_INT 2
29551: NEG
29552: PUSH
29553: EMPTY
29554: LIST
29555: LIST
29556: PUSH
29557: EMPTY
29558: LIST
29559: LIST
29560: LIST
29561: LIST
29562: LIST
29563: LIST
29564: LIST
29565: LIST
29566: LIST
29567: LIST
29568: LIST
29569: LIST
29570: LIST
29571: LIST
29572: LIST
29573: LIST
29574: LIST
29575: LIST
29576: LIST
29577: LIST
29578: LIST
29579: LIST
29580: LIST
29581: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
29582: LD_ADDR_VAR 0 32
29586: PUSH
29587: LD_INT 0
29589: PUSH
29590: LD_INT 0
29592: PUSH
29593: EMPTY
29594: LIST
29595: LIST
29596: PUSH
29597: LD_INT 0
29599: PUSH
29600: LD_INT 1
29602: NEG
29603: PUSH
29604: EMPTY
29605: LIST
29606: LIST
29607: PUSH
29608: LD_INT 1
29610: PUSH
29611: LD_INT 0
29613: PUSH
29614: EMPTY
29615: LIST
29616: LIST
29617: PUSH
29618: LD_INT 1
29620: PUSH
29621: LD_INT 1
29623: PUSH
29624: EMPTY
29625: LIST
29626: LIST
29627: PUSH
29628: LD_INT 0
29630: PUSH
29631: LD_INT 1
29633: PUSH
29634: EMPTY
29635: LIST
29636: LIST
29637: PUSH
29638: LD_INT 1
29640: NEG
29641: PUSH
29642: LD_INT 0
29644: PUSH
29645: EMPTY
29646: LIST
29647: LIST
29648: PUSH
29649: LD_INT 1
29651: NEG
29652: PUSH
29653: LD_INT 1
29655: NEG
29656: PUSH
29657: EMPTY
29658: LIST
29659: LIST
29660: PUSH
29661: LD_INT 1
29663: NEG
29664: PUSH
29665: LD_INT 2
29667: NEG
29668: PUSH
29669: EMPTY
29670: LIST
29671: LIST
29672: PUSH
29673: LD_INT 0
29675: PUSH
29676: LD_INT 2
29678: NEG
29679: PUSH
29680: EMPTY
29681: LIST
29682: LIST
29683: PUSH
29684: LD_INT 1
29686: PUSH
29687: LD_INT 1
29689: NEG
29690: PUSH
29691: EMPTY
29692: LIST
29693: LIST
29694: PUSH
29695: LD_INT 2
29697: PUSH
29698: LD_INT 1
29700: PUSH
29701: EMPTY
29702: LIST
29703: LIST
29704: PUSH
29705: LD_INT 2
29707: PUSH
29708: LD_INT 2
29710: PUSH
29711: EMPTY
29712: LIST
29713: LIST
29714: PUSH
29715: LD_INT 1
29717: PUSH
29718: LD_INT 2
29720: PUSH
29721: EMPTY
29722: LIST
29723: LIST
29724: PUSH
29725: LD_INT 0
29727: PUSH
29728: LD_INT 2
29730: PUSH
29731: EMPTY
29732: LIST
29733: LIST
29734: PUSH
29735: LD_INT 1
29737: NEG
29738: PUSH
29739: LD_INT 1
29741: PUSH
29742: EMPTY
29743: LIST
29744: LIST
29745: PUSH
29746: LD_INT 2
29748: NEG
29749: PUSH
29750: LD_INT 0
29752: PUSH
29753: EMPTY
29754: LIST
29755: LIST
29756: PUSH
29757: LD_INT 2
29759: NEG
29760: PUSH
29761: LD_INT 1
29763: NEG
29764: PUSH
29765: EMPTY
29766: LIST
29767: LIST
29768: PUSH
29769: LD_INT 1
29771: NEG
29772: PUSH
29773: LD_INT 3
29775: NEG
29776: PUSH
29777: EMPTY
29778: LIST
29779: LIST
29780: PUSH
29781: LD_INT 1
29783: PUSH
29784: LD_INT 2
29786: NEG
29787: PUSH
29788: EMPTY
29789: LIST
29790: LIST
29791: PUSH
29792: LD_INT 3
29794: PUSH
29795: LD_INT 2
29797: PUSH
29798: EMPTY
29799: LIST
29800: LIST
29801: PUSH
29802: LD_INT 2
29804: PUSH
29805: LD_INT 3
29807: PUSH
29808: EMPTY
29809: LIST
29810: LIST
29811: PUSH
29812: LD_INT 2
29814: NEG
29815: PUSH
29816: LD_INT 1
29818: PUSH
29819: EMPTY
29820: LIST
29821: LIST
29822: PUSH
29823: LD_INT 3
29825: NEG
29826: PUSH
29827: LD_INT 1
29829: NEG
29830: PUSH
29831: EMPTY
29832: LIST
29833: LIST
29834: PUSH
29835: EMPTY
29836: LIST
29837: LIST
29838: LIST
29839: LIST
29840: LIST
29841: LIST
29842: LIST
29843: LIST
29844: LIST
29845: LIST
29846: LIST
29847: LIST
29848: LIST
29849: LIST
29850: LIST
29851: LIST
29852: LIST
29853: LIST
29854: LIST
29855: LIST
29856: LIST
29857: LIST
29858: LIST
29859: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
29860: LD_ADDR_VAR 0 33
29864: PUSH
29865: LD_INT 0
29867: PUSH
29868: LD_INT 0
29870: PUSH
29871: EMPTY
29872: LIST
29873: LIST
29874: PUSH
29875: LD_INT 0
29877: PUSH
29878: LD_INT 1
29880: NEG
29881: PUSH
29882: EMPTY
29883: LIST
29884: LIST
29885: PUSH
29886: LD_INT 1
29888: PUSH
29889: LD_INT 0
29891: PUSH
29892: EMPTY
29893: LIST
29894: LIST
29895: PUSH
29896: LD_INT 1
29898: PUSH
29899: LD_INT 1
29901: PUSH
29902: EMPTY
29903: LIST
29904: LIST
29905: PUSH
29906: LD_INT 0
29908: PUSH
29909: LD_INT 1
29911: PUSH
29912: EMPTY
29913: LIST
29914: LIST
29915: PUSH
29916: LD_INT 1
29918: NEG
29919: PUSH
29920: LD_INT 0
29922: PUSH
29923: EMPTY
29924: LIST
29925: LIST
29926: PUSH
29927: LD_INT 1
29929: NEG
29930: PUSH
29931: LD_INT 1
29933: NEG
29934: PUSH
29935: EMPTY
29936: LIST
29937: LIST
29938: PUSH
29939: LD_INT 1
29941: NEG
29942: PUSH
29943: LD_INT 2
29945: NEG
29946: PUSH
29947: EMPTY
29948: LIST
29949: LIST
29950: PUSH
29951: LD_INT 1
29953: PUSH
29954: LD_INT 1
29956: NEG
29957: PUSH
29958: EMPTY
29959: LIST
29960: LIST
29961: PUSH
29962: LD_INT 2
29964: PUSH
29965: LD_INT 0
29967: PUSH
29968: EMPTY
29969: LIST
29970: LIST
29971: PUSH
29972: LD_INT 2
29974: PUSH
29975: LD_INT 1
29977: PUSH
29978: EMPTY
29979: LIST
29980: LIST
29981: PUSH
29982: LD_INT 1
29984: PUSH
29985: LD_INT 2
29987: PUSH
29988: EMPTY
29989: LIST
29990: LIST
29991: PUSH
29992: LD_INT 0
29994: PUSH
29995: LD_INT 2
29997: PUSH
29998: EMPTY
29999: LIST
30000: LIST
30001: PUSH
30002: LD_INT 1
30004: NEG
30005: PUSH
30006: LD_INT 1
30008: PUSH
30009: EMPTY
30010: LIST
30011: LIST
30012: PUSH
30013: LD_INT 2
30015: NEG
30016: PUSH
30017: LD_INT 0
30019: PUSH
30020: EMPTY
30021: LIST
30022: LIST
30023: PUSH
30024: LD_INT 2
30026: NEG
30027: PUSH
30028: LD_INT 1
30030: NEG
30031: PUSH
30032: EMPTY
30033: LIST
30034: LIST
30035: PUSH
30036: LD_INT 2
30038: NEG
30039: PUSH
30040: LD_INT 2
30042: NEG
30043: PUSH
30044: EMPTY
30045: LIST
30046: LIST
30047: PUSH
30048: LD_INT 2
30050: NEG
30051: PUSH
30052: LD_INT 3
30054: NEG
30055: PUSH
30056: EMPTY
30057: LIST
30058: LIST
30059: PUSH
30060: LD_INT 2
30062: PUSH
30063: LD_INT 1
30065: NEG
30066: PUSH
30067: EMPTY
30068: LIST
30069: LIST
30070: PUSH
30071: LD_INT 3
30073: PUSH
30074: LD_INT 1
30076: PUSH
30077: EMPTY
30078: LIST
30079: LIST
30080: PUSH
30081: LD_INT 1
30083: PUSH
30084: LD_INT 3
30086: PUSH
30087: EMPTY
30088: LIST
30089: LIST
30090: PUSH
30091: LD_INT 1
30093: NEG
30094: PUSH
30095: LD_INT 2
30097: PUSH
30098: EMPTY
30099: LIST
30100: LIST
30101: PUSH
30102: LD_INT 3
30104: NEG
30105: PUSH
30106: LD_INT 2
30108: NEG
30109: PUSH
30110: EMPTY
30111: LIST
30112: LIST
30113: PUSH
30114: EMPTY
30115: LIST
30116: LIST
30117: LIST
30118: LIST
30119: LIST
30120: LIST
30121: LIST
30122: LIST
30123: LIST
30124: LIST
30125: LIST
30126: LIST
30127: LIST
30128: LIST
30129: LIST
30130: LIST
30131: LIST
30132: LIST
30133: LIST
30134: LIST
30135: LIST
30136: LIST
30137: LIST
30138: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
30139: LD_ADDR_VAR 0 34
30143: PUSH
30144: LD_INT 0
30146: PUSH
30147: LD_INT 0
30149: PUSH
30150: EMPTY
30151: LIST
30152: LIST
30153: PUSH
30154: LD_INT 0
30156: PUSH
30157: LD_INT 1
30159: NEG
30160: PUSH
30161: EMPTY
30162: LIST
30163: LIST
30164: PUSH
30165: LD_INT 1
30167: PUSH
30168: LD_INT 0
30170: PUSH
30171: EMPTY
30172: LIST
30173: LIST
30174: PUSH
30175: LD_INT 1
30177: PUSH
30178: LD_INT 1
30180: PUSH
30181: EMPTY
30182: LIST
30183: LIST
30184: PUSH
30185: LD_INT 0
30187: PUSH
30188: LD_INT 1
30190: PUSH
30191: EMPTY
30192: LIST
30193: LIST
30194: PUSH
30195: LD_INT 1
30197: NEG
30198: PUSH
30199: LD_INT 0
30201: PUSH
30202: EMPTY
30203: LIST
30204: LIST
30205: PUSH
30206: LD_INT 1
30208: NEG
30209: PUSH
30210: LD_INT 1
30212: NEG
30213: PUSH
30214: EMPTY
30215: LIST
30216: LIST
30217: PUSH
30218: LD_INT 1
30220: NEG
30221: PUSH
30222: LD_INT 2
30224: NEG
30225: PUSH
30226: EMPTY
30227: LIST
30228: LIST
30229: PUSH
30230: LD_INT 0
30232: PUSH
30233: LD_INT 2
30235: NEG
30236: PUSH
30237: EMPTY
30238: LIST
30239: LIST
30240: PUSH
30241: LD_INT 1
30243: PUSH
30244: LD_INT 1
30246: NEG
30247: PUSH
30248: EMPTY
30249: LIST
30250: LIST
30251: PUSH
30252: LD_INT 2
30254: PUSH
30255: LD_INT 1
30257: PUSH
30258: EMPTY
30259: LIST
30260: LIST
30261: PUSH
30262: LD_INT 2
30264: PUSH
30265: LD_INT 2
30267: PUSH
30268: EMPTY
30269: LIST
30270: LIST
30271: PUSH
30272: LD_INT 1
30274: PUSH
30275: LD_INT 2
30277: PUSH
30278: EMPTY
30279: LIST
30280: LIST
30281: PUSH
30282: LD_INT 1
30284: NEG
30285: PUSH
30286: LD_INT 1
30288: PUSH
30289: EMPTY
30290: LIST
30291: LIST
30292: PUSH
30293: LD_INT 2
30295: NEG
30296: PUSH
30297: LD_INT 0
30299: PUSH
30300: EMPTY
30301: LIST
30302: LIST
30303: PUSH
30304: LD_INT 2
30306: NEG
30307: PUSH
30308: LD_INT 1
30310: NEG
30311: PUSH
30312: EMPTY
30313: LIST
30314: LIST
30315: PUSH
30316: LD_INT 2
30318: NEG
30319: PUSH
30320: LD_INT 2
30322: NEG
30323: PUSH
30324: EMPTY
30325: LIST
30326: LIST
30327: PUSH
30328: LD_INT 1
30330: NEG
30331: PUSH
30332: LD_INT 3
30334: NEG
30335: PUSH
30336: EMPTY
30337: LIST
30338: LIST
30339: PUSH
30340: LD_INT 1
30342: PUSH
30343: LD_INT 2
30345: NEG
30346: PUSH
30347: EMPTY
30348: LIST
30349: LIST
30350: PUSH
30351: LD_INT 3
30353: PUSH
30354: LD_INT 2
30356: PUSH
30357: EMPTY
30358: LIST
30359: LIST
30360: PUSH
30361: LD_INT 2
30363: PUSH
30364: LD_INT 3
30366: PUSH
30367: EMPTY
30368: LIST
30369: LIST
30370: PUSH
30371: LD_INT 2
30373: NEG
30374: PUSH
30375: LD_INT 1
30377: PUSH
30378: EMPTY
30379: LIST
30380: LIST
30381: PUSH
30382: LD_INT 3
30384: NEG
30385: PUSH
30386: LD_INT 1
30388: NEG
30389: PUSH
30390: EMPTY
30391: LIST
30392: LIST
30393: PUSH
30394: EMPTY
30395: LIST
30396: LIST
30397: LIST
30398: LIST
30399: LIST
30400: LIST
30401: LIST
30402: LIST
30403: LIST
30404: LIST
30405: LIST
30406: LIST
30407: LIST
30408: LIST
30409: LIST
30410: LIST
30411: LIST
30412: LIST
30413: LIST
30414: LIST
30415: LIST
30416: LIST
30417: LIST
30418: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
30419: LD_ADDR_VAR 0 35
30423: PUSH
30424: LD_INT 0
30426: PUSH
30427: LD_INT 0
30429: PUSH
30430: EMPTY
30431: LIST
30432: LIST
30433: PUSH
30434: LD_INT 0
30436: PUSH
30437: LD_INT 1
30439: NEG
30440: PUSH
30441: EMPTY
30442: LIST
30443: LIST
30444: PUSH
30445: LD_INT 1
30447: PUSH
30448: LD_INT 0
30450: PUSH
30451: EMPTY
30452: LIST
30453: LIST
30454: PUSH
30455: LD_INT 1
30457: PUSH
30458: LD_INT 1
30460: PUSH
30461: EMPTY
30462: LIST
30463: LIST
30464: PUSH
30465: LD_INT 0
30467: PUSH
30468: LD_INT 1
30470: PUSH
30471: EMPTY
30472: LIST
30473: LIST
30474: PUSH
30475: LD_INT 1
30477: NEG
30478: PUSH
30479: LD_INT 0
30481: PUSH
30482: EMPTY
30483: LIST
30484: LIST
30485: PUSH
30486: LD_INT 1
30488: NEG
30489: PUSH
30490: LD_INT 1
30492: NEG
30493: PUSH
30494: EMPTY
30495: LIST
30496: LIST
30497: PUSH
30498: LD_INT 2
30500: PUSH
30501: LD_INT 1
30503: PUSH
30504: EMPTY
30505: LIST
30506: LIST
30507: PUSH
30508: LD_INT 2
30510: NEG
30511: PUSH
30512: LD_INT 1
30514: NEG
30515: PUSH
30516: EMPTY
30517: LIST
30518: LIST
30519: PUSH
30520: EMPTY
30521: LIST
30522: LIST
30523: LIST
30524: LIST
30525: LIST
30526: LIST
30527: LIST
30528: LIST
30529: LIST
30530: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
30531: LD_ADDR_VAR 0 36
30535: PUSH
30536: LD_INT 0
30538: PUSH
30539: LD_INT 0
30541: PUSH
30542: EMPTY
30543: LIST
30544: LIST
30545: PUSH
30546: LD_INT 0
30548: PUSH
30549: LD_INT 1
30551: NEG
30552: PUSH
30553: EMPTY
30554: LIST
30555: LIST
30556: PUSH
30557: LD_INT 1
30559: PUSH
30560: LD_INT 0
30562: PUSH
30563: EMPTY
30564: LIST
30565: LIST
30566: PUSH
30567: LD_INT 1
30569: PUSH
30570: LD_INT 1
30572: PUSH
30573: EMPTY
30574: LIST
30575: LIST
30576: PUSH
30577: LD_INT 0
30579: PUSH
30580: LD_INT 1
30582: PUSH
30583: EMPTY
30584: LIST
30585: LIST
30586: PUSH
30587: LD_INT 1
30589: NEG
30590: PUSH
30591: LD_INT 0
30593: PUSH
30594: EMPTY
30595: LIST
30596: LIST
30597: PUSH
30598: LD_INT 1
30600: NEG
30601: PUSH
30602: LD_INT 1
30604: NEG
30605: PUSH
30606: EMPTY
30607: LIST
30608: LIST
30609: PUSH
30610: LD_INT 1
30612: NEG
30613: PUSH
30614: LD_INT 2
30616: NEG
30617: PUSH
30618: EMPTY
30619: LIST
30620: LIST
30621: PUSH
30622: LD_INT 1
30624: PUSH
30625: LD_INT 2
30627: PUSH
30628: EMPTY
30629: LIST
30630: LIST
30631: PUSH
30632: EMPTY
30633: LIST
30634: LIST
30635: LIST
30636: LIST
30637: LIST
30638: LIST
30639: LIST
30640: LIST
30641: LIST
30642: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
30643: LD_ADDR_VAR 0 37
30647: PUSH
30648: LD_INT 0
30650: PUSH
30651: LD_INT 0
30653: PUSH
30654: EMPTY
30655: LIST
30656: LIST
30657: PUSH
30658: LD_INT 0
30660: PUSH
30661: LD_INT 1
30663: NEG
30664: PUSH
30665: EMPTY
30666: LIST
30667: LIST
30668: PUSH
30669: LD_INT 1
30671: PUSH
30672: LD_INT 0
30674: PUSH
30675: EMPTY
30676: LIST
30677: LIST
30678: PUSH
30679: LD_INT 1
30681: PUSH
30682: LD_INT 1
30684: PUSH
30685: EMPTY
30686: LIST
30687: LIST
30688: PUSH
30689: LD_INT 0
30691: PUSH
30692: LD_INT 1
30694: PUSH
30695: EMPTY
30696: LIST
30697: LIST
30698: PUSH
30699: LD_INT 1
30701: NEG
30702: PUSH
30703: LD_INT 0
30705: PUSH
30706: EMPTY
30707: LIST
30708: LIST
30709: PUSH
30710: LD_INT 1
30712: NEG
30713: PUSH
30714: LD_INT 1
30716: NEG
30717: PUSH
30718: EMPTY
30719: LIST
30720: LIST
30721: PUSH
30722: LD_INT 1
30724: PUSH
30725: LD_INT 1
30727: NEG
30728: PUSH
30729: EMPTY
30730: LIST
30731: LIST
30732: PUSH
30733: LD_INT 1
30735: NEG
30736: PUSH
30737: LD_INT 1
30739: PUSH
30740: EMPTY
30741: LIST
30742: LIST
30743: PUSH
30744: EMPTY
30745: LIST
30746: LIST
30747: LIST
30748: LIST
30749: LIST
30750: LIST
30751: LIST
30752: LIST
30753: LIST
30754: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
30755: LD_ADDR_VAR 0 38
30759: PUSH
30760: LD_INT 0
30762: PUSH
30763: LD_INT 0
30765: PUSH
30766: EMPTY
30767: LIST
30768: LIST
30769: PUSH
30770: LD_INT 0
30772: PUSH
30773: LD_INT 1
30775: NEG
30776: PUSH
30777: EMPTY
30778: LIST
30779: LIST
30780: PUSH
30781: LD_INT 1
30783: PUSH
30784: LD_INT 0
30786: PUSH
30787: EMPTY
30788: LIST
30789: LIST
30790: PUSH
30791: LD_INT 1
30793: PUSH
30794: LD_INT 1
30796: PUSH
30797: EMPTY
30798: LIST
30799: LIST
30800: PUSH
30801: LD_INT 0
30803: PUSH
30804: LD_INT 1
30806: PUSH
30807: EMPTY
30808: LIST
30809: LIST
30810: PUSH
30811: LD_INT 1
30813: NEG
30814: PUSH
30815: LD_INT 0
30817: PUSH
30818: EMPTY
30819: LIST
30820: LIST
30821: PUSH
30822: LD_INT 1
30824: NEG
30825: PUSH
30826: LD_INT 1
30828: NEG
30829: PUSH
30830: EMPTY
30831: LIST
30832: LIST
30833: PUSH
30834: LD_INT 2
30836: PUSH
30837: LD_INT 1
30839: PUSH
30840: EMPTY
30841: LIST
30842: LIST
30843: PUSH
30844: LD_INT 2
30846: NEG
30847: PUSH
30848: LD_INT 1
30850: NEG
30851: PUSH
30852: EMPTY
30853: LIST
30854: LIST
30855: PUSH
30856: EMPTY
30857: LIST
30858: LIST
30859: LIST
30860: LIST
30861: LIST
30862: LIST
30863: LIST
30864: LIST
30865: LIST
30866: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
30867: LD_ADDR_VAR 0 39
30871: PUSH
30872: LD_INT 0
30874: PUSH
30875: LD_INT 0
30877: PUSH
30878: EMPTY
30879: LIST
30880: LIST
30881: PUSH
30882: LD_INT 0
30884: PUSH
30885: LD_INT 1
30887: NEG
30888: PUSH
30889: EMPTY
30890: LIST
30891: LIST
30892: PUSH
30893: LD_INT 1
30895: PUSH
30896: LD_INT 0
30898: PUSH
30899: EMPTY
30900: LIST
30901: LIST
30902: PUSH
30903: LD_INT 1
30905: PUSH
30906: LD_INT 1
30908: PUSH
30909: EMPTY
30910: LIST
30911: LIST
30912: PUSH
30913: LD_INT 0
30915: PUSH
30916: LD_INT 1
30918: PUSH
30919: EMPTY
30920: LIST
30921: LIST
30922: PUSH
30923: LD_INT 1
30925: NEG
30926: PUSH
30927: LD_INT 0
30929: PUSH
30930: EMPTY
30931: LIST
30932: LIST
30933: PUSH
30934: LD_INT 1
30936: NEG
30937: PUSH
30938: LD_INT 1
30940: NEG
30941: PUSH
30942: EMPTY
30943: LIST
30944: LIST
30945: PUSH
30946: LD_INT 1
30948: NEG
30949: PUSH
30950: LD_INT 2
30952: NEG
30953: PUSH
30954: EMPTY
30955: LIST
30956: LIST
30957: PUSH
30958: LD_INT 1
30960: PUSH
30961: LD_INT 2
30963: PUSH
30964: EMPTY
30965: LIST
30966: LIST
30967: PUSH
30968: EMPTY
30969: LIST
30970: LIST
30971: LIST
30972: LIST
30973: LIST
30974: LIST
30975: LIST
30976: LIST
30977: LIST
30978: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
30979: LD_ADDR_VAR 0 40
30983: PUSH
30984: LD_INT 0
30986: PUSH
30987: LD_INT 0
30989: PUSH
30990: EMPTY
30991: LIST
30992: LIST
30993: PUSH
30994: LD_INT 0
30996: PUSH
30997: LD_INT 1
30999: NEG
31000: PUSH
31001: EMPTY
31002: LIST
31003: LIST
31004: PUSH
31005: LD_INT 1
31007: PUSH
31008: LD_INT 0
31010: PUSH
31011: EMPTY
31012: LIST
31013: LIST
31014: PUSH
31015: LD_INT 1
31017: PUSH
31018: LD_INT 1
31020: PUSH
31021: EMPTY
31022: LIST
31023: LIST
31024: PUSH
31025: LD_INT 0
31027: PUSH
31028: LD_INT 1
31030: PUSH
31031: EMPTY
31032: LIST
31033: LIST
31034: PUSH
31035: LD_INT 1
31037: NEG
31038: PUSH
31039: LD_INT 0
31041: PUSH
31042: EMPTY
31043: LIST
31044: LIST
31045: PUSH
31046: LD_INT 1
31048: NEG
31049: PUSH
31050: LD_INT 1
31052: NEG
31053: PUSH
31054: EMPTY
31055: LIST
31056: LIST
31057: PUSH
31058: LD_INT 1
31060: PUSH
31061: LD_INT 1
31063: NEG
31064: PUSH
31065: EMPTY
31066: LIST
31067: LIST
31068: PUSH
31069: LD_INT 1
31071: NEG
31072: PUSH
31073: LD_INT 1
31075: PUSH
31076: EMPTY
31077: LIST
31078: LIST
31079: PUSH
31080: EMPTY
31081: LIST
31082: LIST
31083: LIST
31084: LIST
31085: LIST
31086: LIST
31087: LIST
31088: LIST
31089: LIST
31090: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
31091: LD_ADDR_VAR 0 41
31095: PUSH
31096: LD_INT 0
31098: PUSH
31099: LD_INT 0
31101: PUSH
31102: EMPTY
31103: LIST
31104: LIST
31105: PUSH
31106: LD_INT 0
31108: PUSH
31109: LD_INT 1
31111: NEG
31112: PUSH
31113: EMPTY
31114: LIST
31115: LIST
31116: PUSH
31117: LD_INT 1
31119: PUSH
31120: LD_INT 0
31122: PUSH
31123: EMPTY
31124: LIST
31125: LIST
31126: PUSH
31127: LD_INT 1
31129: PUSH
31130: LD_INT 1
31132: PUSH
31133: EMPTY
31134: LIST
31135: LIST
31136: PUSH
31137: LD_INT 0
31139: PUSH
31140: LD_INT 1
31142: PUSH
31143: EMPTY
31144: LIST
31145: LIST
31146: PUSH
31147: LD_INT 1
31149: NEG
31150: PUSH
31151: LD_INT 0
31153: PUSH
31154: EMPTY
31155: LIST
31156: LIST
31157: PUSH
31158: LD_INT 1
31160: NEG
31161: PUSH
31162: LD_INT 1
31164: NEG
31165: PUSH
31166: EMPTY
31167: LIST
31168: LIST
31169: PUSH
31170: LD_INT 1
31172: NEG
31173: PUSH
31174: LD_INT 2
31176: NEG
31177: PUSH
31178: EMPTY
31179: LIST
31180: LIST
31181: PUSH
31182: LD_INT 1
31184: PUSH
31185: LD_INT 1
31187: NEG
31188: PUSH
31189: EMPTY
31190: LIST
31191: LIST
31192: PUSH
31193: LD_INT 2
31195: PUSH
31196: LD_INT 0
31198: PUSH
31199: EMPTY
31200: LIST
31201: LIST
31202: PUSH
31203: LD_INT 2
31205: PUSH
31206: LD_INT 1
31208: PUSH
31209: EMPTY
31210: LIST
31211: LIST
31212: PUSH
31213: LD_INT 2
31215: PUSH
31216: LD_INT 2
31218: PUSH
31219: EMPTY
31220: LIST
31221: LIST
31222: PUSH
31223: LD_INT 1
31225: PUSH
31226: LD_INT 2
31228: PUSH
31229: EMPTY
31230: LIST
31231: LIST
31232: PUSH
31233: LD_INT 1
31235: NEG
31236: PUSH
31237: LD_INT 1
31239: PUSH
31240: EMPTY
31241: LIST
31242: LIST
31243: PUSH
31244: LD_INT 2
31246: NEG
31247: PUSH
31248: LD_INT 0
31250: PUSH
31251: EMPTY
31252: LIST
31253: LIST
31254: PUSH
31255: LD_INT 2
31257: NEG
31258: PUSH
31259: LD_INT 1
31261: NEG
31262: PUSH
31263: EMPTY
31264: LIST
31265: LIST
31266: PUSH
31267: LD_INT 2
31269: NEG
31270: PUSH
31271: LD_INT 2
31273: NEG
31274: PUSH
31275: EMPTY
31276: LIST
31277: LIST
31278: PUSH
31279: LD_INT 2
31281: NEG
31282: PUSH
31283: LD_INT 3
31285: NEG
31286: PUSH
31287: EMPTY
31288: LIST
31289: LIST
31290: PUSH
31291: LD_INT 2
31293: PUSH
31294: LD_INT 1
31296: NEG
31297: PUSH
31298: EMPTY
31299: LIST
31300: LIST
31301: PUSH
31302: LD_INT 3
31304: PUSH
31305: LD_INT 0
31307: PUSH
31308: EMPTY
31309: LIST
31310: LIST
31311: PUSH
31312: LD_INT 3
31314: PUSH
31315: LD_INT 1
31317: PUSH
31318: EMPTY
31319: LIST
31320: LIST
31321: PUSH
31322: LD_INT 3
31324: PUSH
31325: LD_INT 2
31327: PUSH
31328: EMPTY
31329: LIST
31330: LIST
31331: PUSH
31332: LD_INT 3
31334: PUSH
31335: LD_INT 3
31337: PUSH
31338: EMPTY
31339: LIST
31340: LIST
31341: PUSH
31342: LD_INT 2
31344: PUSH
31345: LD_INT 3
31347: PUSH
31348: EMPTY
31349: LIST
31350: LIST
31351: PUSH
31352: LD_INT 2
31354: NEG
31355: PUSH
31356: LD_INT 1
31358: PUSH
31359: EMPTY
31360: LIST
31361: LIST
31362: PUSH
31363: LD_INT 3
31365: NEG
31366: PUSH
31367: LD_INT 0
31369: PUSH
31370: EMPTY
31371: LIST
31372: LIST
31373: PUSH
31374: LD_INT 3
31376: NEG
31377: PUSH
31378: LD_INT 1
31380: NEG
31381: PUSH
31382: EMPTY
31383: LIST
31384: LIST
31385: PUSH
31386: LD_INT 3
31388: NEG
31389: PUSH
31390: LD_INT 2
31392: NEG
31393: PUSH
31394: EMPTY
31395: LIST
31396: LIST
31397: PUSH
31398: LD_INT 3
31400: NEG
31401: PUSH
31402: LD_INT 3
31404: NEG
31405: PUSH
31406: EMPTY
31407: LIST
31408: LIST
31409: PUSH
31410: EMPTY
31411: LIST
31412: LIST
31413: LIST
31414: LIST
31415: LIST
31416: LIST
31417: LIST
31418: LIST
31419: LIST
31420: LIST
31421: LIST
31422: LIST
31423: LIST
31424: LIST
31425: LIST
31426: LIST
31427: LIST
31428: LIST
31429: LIST
31430: LIST
31431: LIST
31432: LIST
31433: LIST
31434: LIST
31435: LIST
31436: LIST
31437: LIST
31438: LIST
31439: LIST
31440: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
31441: LD_ADDR_VAR 0 42
31445: PUSH
31446: LD_INT 0
31448: PUSH
31449: LD_INT 0
31451: PUSH
31452: EMPTY
31453: LIST
31454: LIST
31455: PUSH
31456: LD_INT 0
31458: PUSH
31459: LD_INT 1
31461: NEG
31462: PUSH
31463: EMPTY
31464: LIST
31465: LIST
31466: PUSH
31467: LD_INT 1
31469: PUSH
31470: LD_INT 0
31472: PUSH
31473: EMPTY
31474: LIST
31475: LIST
31476: PUSH
31477: LD_INT 1
31479: PUSH
31480: LD_INT 1
31482: PUSH
31483: EMPTY
31484: LIST
31485: LIST
31486: PUSH
31487: LD_INT 0
31489: PUSH
31490: LD_INT 1
31492: PUSH
31493: EMPTY
31494: LIST
31495: LIST
31496: PUSH
31497: LD_INT 1
31499: NEG
31500: PUSH
31501: LD_INT 0
31503: PUSH
31504: EMPTY
31505: LIST
31506: LIST
31507: PUSH
31508: LD_INT 1
31510: NEG
31511: PUSH
31512: LD_INT 1
31514: NEG
31515: PUSH
31516: EMPTY
31517: LIST
31518: LIST
31519: PUSH
31520: LD_INT 1
31522: NEG
31523: PUSH
31524: LD_INT 2
31526: NEG
31527: PUSH
31528: EMPTY
31529: LIST
31530: LIST
31531: PUSH
31532: LD_INT 0
31534: PUSH
31535: LD_INT 2
31537: NEG
31538: PUSH
31539: EMPTY
31540: LIST
31541: LIST
31542: PUSH
31543: LD_INT 1
31545: PUSH
31546: LD_INT 1
31548: NEG
31549: PUSH
31550: EMPTY
31551: LIST
31552: LIST
31553: PUSH
31554: LD_INT 2
31556: PUSH
31557: LD_INT 1
31559: PUSH
31560: EMPTY
31561: LIST
31562: LIST
31563: PUSH
31564: LD_INT 2
31566: PUSH
31567: LD_INT 2
31569: PUSH
31570: EMPTY
31571: LIST
31572: LIST
31573: PUSH
31574: LD_INT 1
31576: PUSH
31577: LD_INT 2
31579: PUSH
31580: EMPTY
31581: LIST
31582: LIST
31583: PUSH
31584: LD_INT 0
31586: PUSH
31587: LD_INT 2
31589: PUSH
31590: EMPTY
31591: LIST
31592: LIST
31593: PUSH
31594: LD_INT 1
31596: NEG
31597: PUSH
31598: LD_INT 1
31600: PUSH
31601: EMPTY
31602: LIST
31603: LIST
31604: PUSH
31605: LD_INT 2
31607: NEG
31608: PUSH
31609: LD_INT 1
31611: NEG
31612: PUSH
31613: EMPTY
31614: LIST
31615: LIST
31616: PUSH
31617: LD_INT 2
31619: NEG
31620: PUSH
31621: LD_INT 2
31623: NEG
31624: PUSH
31625: EMPTY
31626: LIST
31627: LIST
31628: PUSH
31629: LD_INT 2
31631: NEG
31632: PUSH
31633: LD_INT 3
31635: NEG
31636: PUSH
31637: EMPTY
31638: LIST
31639: LIST
31640: PUSH
31641: LD_INT 1
31643: NEG
31644: PUSH
31645: LD_INT 3
31647: NEG
31648: PUSH
31649: EMPTY
31650: LIST
31651: LIST
31652: PUSH
31653: LD_INT 0
31655: PUSH
31656: LD_INT 3
31658: NEG
31659: PUSH
31660: EMPTY
31661: LIST
31662: LIST
31663: PUSH
31664: LD_INT 1
31666: PUSH
31667: LD_INT 2
31669: NEG
31670: PUSH
31671: EMPTY
31672: LIST
31673: LIST
31674: PUSH
31675: LD_INT 3
31677: PUSH
31678: LD_INT 2
31680: PUSH
31681: EMPTY
31682: LIST
31683: LIST
31684: PUSH
31685: LD_INT 3
31687: PUSH
31688: LD_INT 3
31690: PUSH
31691: EMPTY
31692: LIST
31693: LIST
31694: PUSH
31695: LD_INT 2
31697: PUSH
31698: LD_INT 3
31700: PUSH
31701: EMPTY
31702: LIST
31703: LIST
31704: PUSH
31705: LD_INT 1
31707: PUSH
31708: LD_INT 3
31710: PUSH
31711: EMPTY
31712: LIST
31713: LIST
31714: PUSH
31715: LD_INT 0
31717: PUSH
31718: LD_INT 3
31720: PUSH
31721: EMPTY
31722: LIST
31723: LIST
31724: PUSH
31725: LD_INT 1
31727: NEG
31728: PUSH
31729: LD_INT 2
31731: PUSH
31732: EMPTY
31733: LIST
31734: LIST
31735: PUSH
31736: LD_INT 3
31738: NEG
31739: PUSH
31740: LD_INT 2
31742: NEG
31743: PUSH
31744: EMPTY
31745: LIST
31746: LIST
31747: PUSH
31748: LD_INT 3
31750: NEG
31751: PUSH
31752: LD_INT 3
31754: NEG
31755: PUSH
31756: EMPTY
31757: LIST
31758: LIST
31759: PUSH
31760: EMPTY
31761: LIST
31762: LIST
31763: LIST
31764: LIST
31765: LIST
31766: LIST
31767: LIST
31768: LIST
31769: LIST
31770: LIST
31771: LIST
31772: LIST
31773: LIST
31774: LIST
31775: LIST
31776: LIST
31777: LIST
31778: LIST
31779: LIST
31780: LIST
31781: LIST
31782: LIST
31783: LIST
31784: LIST
31785: LIST
31786: LIST
31787: LIST
31788: LIST
31789: LIST
31790: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
31791: LD_ADDR_VAR 0 43
31795: PUSH
31796: LD_INT 0
31798: PUSH
31799: LD_INT 0
31801: PUSH
31802: EMPTY
31803: LIST
31804: LIST
31805: PUSH
31806: LD_INT 0
31808: PUSH
31809: LD_INT 1
31811: NEG
31812: PUSH
31813: EMPTY
31814: LIST
31815: LIST
31816: PUSH
31817: LD_INT 1
31819: PUSH
31820: LD_INT 0
31822: PUSH
31823: EMPTY
31824: LIST
31825: LIST
31826: PUSH
31827: LD_INT 1
31829: PUSH
31830: LD_INT 1
31832: PUSH
31833: EMPTY
31834: LIST
31835: LIST
31836: PUSH
31837: LD_INT 0
31839: PUSH
31840: LD_INT 1
31842: PUSH
31843: EMPTY
31844: LIST
31845: LIST
31846: PUSH
31847: LD_INT 1
31849: NEG
31850: PUSH
31851: LD_INT 0
31853: PUSH
31854: EMPTY
31855: LIST
31856: LIST
31857: PUSH
31858: LD_INT 1
31860: NEG
31861: PUSH
31862: LD_INT 1
31864: NEG
31865: PUSH
31866: EMPTY
31867: LIST
31868: LIST
31869: PUSH
31870: LD_INT 1
31872: NEG
31873: PUSH
31874: LD_INT 2
31876: NEG
31877: PUSH
31878: EMPTY
31879: LIST
31880: LIST
31881: PUSH
31882: LD_INT 0
31884: PUSH
31885: LD_INT 2
31887: NEG
31888: PUSH
31889: EMPTY
31890: LIST
31891: LIST
31892: PUSH
31893: LD_INT 1
31895: PUSH
31896: LD_INT 1
31898: NEG
31899: PUSH
31900: EMPTY
31901: LIST
31902: LIST
31903: PUSH
31904: LD_INT 2
31906: PUSH
31907: LD_INT 0
31909: PUSH
31910: EMPTY
31911: LIST
31912: LIST
31913: PUSH
31914: LD_INT 2
31916: PUSH
31917: LD_INT 1
31919: PUSH
31920: EMPTY
31921: LIST
31922: LIST
31923: PUSH
31924: LD_INT 1
31926: PUSH
31927: LD_INT 2
31929: PUSH
31930: EMPTY
31931: LIST
31932: LIST
31933: PUSH
31934: LD_INT 0
31936: PUSH
31937: LD_INT 2
31939: PUSH
31940: EMPTY
31941: LIST
31942: LIST
31943: PUSH
31944: LD_INT 1
31946: NEG
31947: PUSH
31948: LD_INT 1
31950: PUSH
31951: EMPTY
31952: LIST
31953: LIST
31954: PUSH
31955: LD_INT 2
31957: NEG
31958: PUSH
31959: LD_INT 0
31961: PUSH
31962: EMPTY
31963: LIST
31964: LIST
31965: PUSH
31966: LD_INT 2
31968: NEG
31969: PUSH
31970: LD_INT 1
31972: NEG
31973: PUSH
31974: EMPTY
31975: LIST
31976: LIST
31977: PUSH
31978: LD_INT 1
31980: NEG
31981: PUSH
31982: LD_INT 3
31984: NEG
31985: PUSH
31986: EMPTY
31987: LIST
31988: LIST
31989: PUSH
31990: LD_INT 0
31992: PUSH
31993: LD_INT 3
31995: NEG
31996: PUSH
31997: EMPTY
31998: LIST
31999: LIST
32000: PUSH
32001: LD_INT 1
32003: PUSH
32004: LD_INT 2
32006: NEG
32007: PUSH
32008: EMPTY
32009: LIST
32010: LIST
32011: PUSH
32012: LD_INT 2
32014: PUSH
32015: LD_INT 1
32017: NEG
32018: PUSH
32019: EMPTY
32020: LIST
32021: LIST
32022: PUSH
32023: LD_INT 3
32025: PUSH
32026: LD_INT 0
32028: PUSH
32029: EMPTY
32030: LIST
32031: LIST
32032: PUSH
32033: LD_INT 3
32035: PUSH
32036: LD_INT 1
32038: PUSH
32039: EMPTY
32040: LIST
32041: LIST
32042: PUSH
32043: LD_INT 1
32045: PUSH
32046: LD_INT 3
32048: PUSH
32049: EMPTY
32050: LIST
32051: LIST
32052: PUSH
32053: LD_INT 0
32055: PUSH
32056: LD_INT 3
32058: PUSH
32059: EMPTY
32060: LIST
32061: LIST
32062: PUSH
32063: LD_INT 1
32065: NEG
32066: PUSH
32067: LD_INT 2
32069: PUSH
32070: EMPTY
32071: LIST
32072: LIST
32073: PUSH
32074: LD_INT 2
32076: NEG
32077: PUSH
32078: LD_INT 1
32080: PUSH
32081: EMPTY
32082: LIST
32083: LIST
32084: PUSH
32085: LD_INT 3
32087: NEG
32088: PUSH
32089: LD_INT 0
32091: PUSH
32092: EMPTY
32093: LIST
32094: LIST
32095: PUSH
32096: LD_INT 3
32098: NEG
32099: PUSH
32100: LD_INT 1
32102: NEG
32103: PUSH
32104: EMPTY
32105: LIST
32106: LIST
32107: PUSH
32108: EMPTY
32109: LIST
32110: LIST
32111: LIST
32112: LIST
32113: LIST
32114: LIST
32115: LIST
32116: LIST
32117: LIST
32118: LIST
32119: LIST
32120: LIST
32121: LIST
32122: LIST
32123: LIST
32124: LIST
32125: LIST
32126: LIST
32127: LIST
32128: LIST
32129: LIST
32130: LIST
32131: LIST
32132: LIST
32133: LIST
32134: LIST
32135: LIST
32136: LIST
32137: LIST
32138: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
32139: LD_ADDR_VAR 0 44
32143: PUSH
32144: LD_INT 0
32146: PUSH
32147: LD_INT 0
32149: PUSH
32150: EMPTY
32151: LIST
32152: LIST
32153: PUSH
32154: LD_INT 0
32156: PUSH
32157: LD_INT 1
32159: NEG
32160: PUSH
32161: EMPTY
32162: LIST
32163: LIST
32164: PUSH
32165: LD_INT 1
32167: PUSH
32168: LD_INT 0
32170: PUSH
32171: EMPTY
32172: LIST
32173: LIST
32174: PUSH
32175: LD_INT 1
32177: PUSH
32178: LD_INT 1
32180: PUSH
32181: EMPTY
32182: LIST
32183: LIST
32184: PUSH
32185: LD_INT 0
32187: PUSH
32188: LD_INT 1
32190: PUSH
32191: EMPTY
32192: LIST
32193: LIST
32194: PUSH
32195: LD_INT 1
32197: NEG
32198: PUSH
32199: LD_INT 0
32201: PUSH
32202: EMPTY
32203: LIST
32204: LIST
32205: PUSH
32206: LD_INT 1
32208: NEG
32209: PUSH
32210: LD_INT 1
32212: NEG
32213: PUSH
32214: EMPTY
32215: LIST
32216: LIST
32217: PUSH
32218: LD_INT 1
32220: NEG
32221: PUSH
32222: LD_INT 2
32224: NEG
32225: PUSH
32226: EMPTY
32227: LIST
32228: LIST
32229: PUSH
32230: LD_INT 1
32232: PUSH
32233: LD_INT 1
32235: NEG
32236: PUSH
32237: EMPTY
32238: LIST
32239: LIST
32240: PUSH
32241: LD_INT 2
32243: PUSH
32244: LD_INT 0
32246: PUSH
32247: EMPTY
32248: LIST
32249: LIST
32250: PUSH
32251: LD_INT 2
32253: PUSH
32254: LD_INT 1
32256: PUSH
32257: EMPTY
32258: LIST
32259: LIST
32260: PUSH
32261: LD_INT 2
32263: PUSH
32264: LD_INT 2
32266: PUSH
32267: EMPTY
32268: LIST
32269: LIST
32270: PUSH
32271: LD_INT 1
32273: PUSH
32274: LD_INT 2
32276: PUSH
32277: EMPTY
32278: LIST
32279: LIST
32280: PUSH
32281: LD_INT 1
32283: NEG
32284: PUSH
32285: LD_INT 1
32287: PUSH
32288: EMPTY
32289: LIST
32290: LIST
32291: PUSH
32292: LD_INT 2
32294: NEG
32295: PUSH
32296: LD_INT 0
32298: PUSH
32299: EMPTY
32300: LIST
32301: LIST
32302: PUSH
32303: LD_INT 2
32305: NEG
32306: PUSH
32307: LD_INT 1
32309: NEG
32310: PUSH
32311: EMPTY
32312: LIST
32313: LIST
32314: PUSH
32315: LD_INT 2
32317: NEG
32318: PUSH
32319: LD_INT 2
32321: NEG
32322: PUSH
32323: EMPTY
32324: LIST
32325: LIST
32326: PUSH
32327: LD_INT 2
32329: NEG
32330: PUSH
32331: LD_INT 3
32333: NEG
32334: PUSH
32335: EMPTY
32336: LIST
32337: LIST
32338: PUSH
32339: LD_INT 2
32341: PUSH
32342: LD_INT 1
32344: NEG
32345: PUSH
32346: EMPTY
32347: LIST
32348: LIST
32349: PUSH
32350: LD_INT 3
32352: PUSH
32353: LD_INT 0
32355: PUSH
32356: EMPTY
32357: LIST
32358: LIST
32359: PUSH
32360: LD_INT 3
32362: PUSH
32363: LD_INT 1
32365: PUSH
32366: EMPTY
32367: LIST
32368: LIST
32369: PUSH
32370: LD_INT 3
32372: PUSH
32373: LD_INT 2
32375: PUSH
32376: EMPTY
32377: LIST
32378: LIST
32379: PUSH
32380: LD_INT 3
32382: PUSH
32383: LD_INT 3
32385: PUSH
32386: EMPTY
32387: LIST
32388: LIST
32389: PUSH
32390: LD_INT 2
32392: PUSH
32393: LD_INT 3
32395: PUSH
32396: EMPTY
32397: LIST
32398: LIST
32399: PUSH
32400: LD_INT 2
32402: NEG
32403: PUSH
32404: LD_INT 1
32406: PUSH
32407: EMPTY
32408: LIST
32409: LIST
32410: PUSH
32411: LD_INT 3
32413: NEG
32414: PUSH
32415: LD_INT 0
32417: PUSH
32418: EMPTY
32419: LIST
32420: LIST
32421: PUSH
32422: LD_INT 3
32424: NEG
32425: PUSH
32426: LD_INT 1
32428: NEG
32429: PUSH
32430: EMPTY
32431: LIST
32432: LIST
32433: PUSH
32434: LD_INT 3
32436: NEG
32437: PUSH
32438: LD_INT 2
32440: NEG
32441: PUSH
32442: EMPTY
32443: LIST
32444: LIST
32445: PUSH
32446: LD_INT 3
32448: NEG
32449: PUSH
32450: LD_INT 3
32452: NEG
32453: PUSH
32454: EMPTY
32455: LIST
32456: LIST
32457: PUSH
32458: EMPTY
32459: LIST
32460: LIST
32461: LIST
32462: LIST
32463: LIST
32464: LIST
32465: LIST
32466: LIST
32467: LIST
32468: LIST
32469: LIST
32470: LIST
32471: LIST
32472: LIST
32473: LIST
32474: LIST
32475: LIST
32476: LIST
32477: LIST
32478: LIST
32479: LIST
32480: LIST
32481: LIST
32482: LIST
32483: LIST
32484: LIST
32485: LIST
32486: LIST
32487: LIST
32488: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
32489: LD_ADDR_VAR 0 45
32493: PUSH
32494: LD_INT 0
32496: PUSH
32497: LD_INT 0
32499: PUSH
32500: EMPTY
32501: LIST
32502: LIST
32503: PUSH
32504: LD_INT 0
32506: PUSH
32507: LD_INT 1
32509: NEG
32510: PUSH
32511: EMPTY
32512: LIST
32513: LIST
32514: PUSH
32515: LD_INT 1
32517: PUSH
32518: LD_INT 0
32520: PUSH
32521: EMPTY
32522: LIST
32523: LIST
32524: PUSH
32525: LD_INT 1
32527: PUSH
32528: LD_INT 1
32530: PUSH
32531: EMPTY
32532: LIST
32533: LIST
32534: PUSH
32535: LD_INT 0
32537: PUSH
32538: LD_INT 1
32540: PUSH
32541: EMPTY
32542: LIST
32543: LIST
32544: PUSH
32545: LD_INT 1
32547: NEG
32548: PUSH
32549: LD_INT 0
32551: PUSH
32552: EMPTY
32553: LIST
32554: LIST
32555: PUSH
32556: LD_INT 1
32558: NEG
32559: PUSH
32560: LD_INT 1
32562: NEG
32563: PUSH
32564: EMPTY
32565: LIST
32566: LIST
32567: PUSH
32568: LD_INT 1
32570: NEG
32571: PUSH
32572: LD_INT 2
32574: NEG
32575: PUSH
32576: EMPTY
32577: LIST
32578: LIST
32579: PUSH
32580: LD_INT 0
32582: PUSH
32583: LD_INT 2
32585: NEG
32586: PUSH
32587: EMPTY
32588: LIST
32589: LIST
32590: PUSH
32591: LD_INT 1
32593: PUSH
32594: LD_INT 1
32596: NEG
32597: PUSH
32598: EMPTY
32599: LIST
32600: LIST
32601: PUSH
32602: LD_INT 2
32604: PUSH
32605: LD_INT 1
32607: PUSH
32608: EMPTY
32609: LIST
32610: LIST
32611: PUSH
32612: LD_INT 2
32614: PUSH
32615: LD_INT 2
32617: PUSH
32618: EMPTY
32619: LIST
32620: LIST
32621: PUSH
32622: LD_INT 1
32624: PUSH
32625: LD_INT 2
32627: PUSH
32628: EMPTY
32629: LIST
32630: LIST
32631: PUSH
32632: LD_INT 0
32634: PUSH
32635: LD_INT 2
32637: PUSH
32638: EMPTY
32639: LIST
32640: LIST
32641: PUSH
32642: LD_INT 1
32644: NEG
32645: PUSH
32646: LD_INT 1
32648: PUSH
32649: EMPTY
32650: LIST
32651: LIST
32652: PUSH
32653: LD_INT 2
32655: NEG
32656: PUSH
32657: LD_INT 1
32659: NEG
32660: PUSH
32661: EMPTY
32662: LIST
32663: LIST
32664: PUSH
32665: LD_INT 2
32667: NEG
32668: PUSH
32669: LD_INT 2
32671: NEG
32672: PUSH
32673: EMPTY
32674: LIST
32675: LIST
32676: PUSH
32677: LD_INT 2
32679: NEG
32680: PUSH
32681: LD_INT 3
32683: NEG
32684: PUSH
32685: EMPTY
32686: LIST
32687: LIST
32688: PUSH
32689: LD_INT 1
32691: NEG
32692: PUSH
32693: LD_INT 3
32695: NEG
32696: PUSH
32697: EMPTY
32698: LIST
32699: LIST
32700: PUSH
32701: LD_INT 0
32703: PUSH
32704: LD_INT 3
32706: NEG
32707: PUSH
32708: EMPTY
32709: LIST
32710: LIST
32711: PUSH
32712: LD_INT 1
32714: PUSH
32715: LD_INT 2
32717: NEG
32718: PUSH
32719: EMPTY
32720: LIST
32721: LIST
32722: PUSH
32723: LD_INT 3
32725: PUSH
32726: LD_INT 2
32728: PUSH
32729: EMPTY
32730: LIST
32731: LIST
32732: PUSH
32733: LD_INT 3
32735: PUSH
32736: LD_INT 3
32738: PUSH
32739: EMPTY
32740: LIST
32741: LIST
32742: PUSH
32743: LD_INT 2
32745: PUSH
32746: LD_INT 3
32748: PUSH
32749: EMPTY
32750: LIST
32751: LIST
32752: PUSH
32753: LD_INT 1
32755: PUSH
32756: LD_INT 3
32758: PUSH
32759: EMPTY
32760: LIST
32761: LIST
32762: PUSH
32763: LD_INT 0
32765: PUSH
32766: LD_INT 3
32768: PUSH
32769: EMPTY
32770: LIST
32771: LIST
32772: PUSH
32773: LD_INT 1
32775: NEG
32776: PUSH
32777: LD_INT 2
32779: PUSH
32780: EMPTY
32781: LIST
32782: LIST
32783: PUSH
32784: LD_INT 3
32786: NEG
32787: PUSH
32788: LD_INT 2
32790: NEG
32791: PUSH
32792: EMPTY
32793: LIST
32794: LIST
32795: PUSH
32796: LD_INT 3
32798: NEG
32799: PUSH
32800: LD_INT 3
32802: NEG
32803: PUSH
32804: EMPTY
32805: LIST
32806: LIST
32807: PUSH
32808: EMPTY
32809: LIST
32810: LIST
32811: LIST
32812: LIST
32813: LIST
32814: LIST
32815: LIST
32816: LIST
32817: LIST
32818: LIST
32819: LIST
32820: LIST
32821: LIST
32822: LIST
32823: LIST
32824: LIST
32825: LIST
32826: LIST
32827: LIST
32828: LIST
32829: LIST
32830: LIST
32831: LIST
32832: LIST
32833: LIST
32834: LIST
32835: LIST
32836: LIST
32837: LIST
32838: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
32839: LD_ADDR_VAR 0 46
32843: PUSH
32844: LD_INT 0
32846: PUSH
32847: LD_INT 0
32849: PUSH
32850: EMPTY
32851: LIST
32852: LIST
32853: PUSH
32854: LD_INT 0
32856: PUSH
32857: LD_INT 1
32859: NEG
32860: PUSH
32861: EMPTY
32862: LIST
32863: LIST
32864: PUSH
32865: LD_INT 1
32867: PUSH
32868: LD_INT 0
32870: PUSH
32871: EMPTY
32872: LIST
32873: LIST
32874: PUSH
32875: LD_INT 1
32877: PUSH
32878: LD_INT 1
32880: PUSH
32881: EMPTY
32882: LIST
32883: LIST
32884: PUSH
32885: LD_INT 0
32887: PUSH
32888: LD_INT 1
32890: PUSH
32891: EMPTY
32892: LIST
32893: LIST
32894: PUSH
32895: LD_INT 1
32897: NEG
32898: PUSH
32899: LD_INT 0
32901: PUSH
32902: EMPTY
32903: LIST
32904: LIST
32905: PUSH
32906: LD_INT 1
32908: NEG
32909: PUSH
32910: LD_INT 1
32912: NEG
32913: PUSH
32914: EMPTY
32915: LIST
32916: LIST
32917: PUSH
32918: LD_INT 1
32920: NEG
32921: PUSH
32922: LD_INT 2
32924: NEG
32925: PUSH
32926: EMPTY
32927: LIST
32928: LIST
32929: PUSH
32930: LD_INT 0
32932: PUSH
32933: LD_INT 2
32935: NEG
32936: PUSH
32937: EMPTY
32938: LIST
32939: LIST
32940: PUSH
32941: LD_INT 1
32943: PUSH
32944: LD_INT 1
32946: NEG
32947: PUSH
32948: EMPTY
32949: LIST
32950: LIST
32951: PUSH
32952: LD_INT 2
32954: PUSH
32955: LD_INT 0
32957: PUSH
32958: EMPTY
32959: LIST
32960: LIST
32961: PUSH
32962: LD_INT 2
32964: PUSH
32965: LD_INT 1
32967: PUSH
32968: EMPTY
32969: LIST
32970: LIST
32971: PUSH
32972: LD_INT 1
32974: PUSH
32975: LD_INT 2
32977: PUSH
32978: EMPTY
32979: LIST
32980: LIST
32981: PUSH
32982: LD_INT 0
32984: PUSH
32985: LD_INT 2
32987: PUSH
32988: EMPTY
32989: LIST
32990: LIST
32991: PUSH
32992: LD_INT 1
32994: NEG
32995: PUSH
32996: LD_INT 1
32998: PUSH
32999: EMPTY
33000: LIST
33001: LIST
33002: PUSH
33003: LD_INT 2
33005: NEG
33006: PUSH
33007: LD_INT 0
33009: PUSH
33010: EMPTY
33011: LIST
33012: LIST
33013: PUSH
33014: LD_INT 2
33016: NEG
33017: PUSH
33018: LD_INT 1
33020: NEG
33021: PUSH
33022: EMPTY
33023: LIST
33024: LIST
33025: PUSH
33026: LD_INT 1
33028: NEG
33029: PUSH
33030: LD_INT 3
33032: NEG
33033: PUSH
33034: EMPTY
33035: LIST
33036: LIST
33037: PUSH
33038: LD_INT 0
33040: PUSH
33041: LD_INT 3
33043: NEG
33044: PUSH
33045: EMPTY
33046: LIST
33047: LIST
33048: PUSH
33049: LD_INT 1
33051: PUSH
33052: LD_INT 2
33054: NEG
33055: PUSH
33056: EMPTY
33057: LIST
33058: LIST
33059: PUSH
33060: LD_INT 2
33062: PUSH
33063: LD_INT 1
33065: NEG
33066: PUSH
33067: EMPTY
33068: LIST
33069: LIST
33070: PUSH
33071: LD_INT 3
33073: PUSH
33074: LD_INT 0
33076: PUSH
33077: EMPTY
33078: LIST
33079: LIST
33080: PUSH
33081: LD_INT 3
33083: PUSH
33084: LD_INT 1
33086: PUSH
33087: EMPTY
33088: LIST
33089: LIST
33090: PUSH
33091: LD_INT 1
33093: PUSH
33094: LD_INT 3
33096: PUSH
33097: EMPTY
33098: LIST
33099: LIST
33100: PUSH
33101: LD_INT 0
33103: PUSH
33104: LD_INT 3
33106: PUSH
33107: EMPTY
33108: LIST
33109: LIST
33110: PUSH
33111: LD_INT 1
33113: NEG
33114: PUSH
33115: LD_INT 2
33117: PUSH
33118: EMPTY
33119: LIST
33120: LIST
33121: PUSH
33122: LD_INT 2
33124: NEG
33125: PUSH
33126: LD_INT 1
33128: PUSH
33129: EMPTY
33130: LIST
33131: LIST
33132: PUSH
33133: LD_INT 3
33135: NEG
33136: PUSH
33137: LD_INT 0
33139: PUSH
33140: EMPTY
33141: LIST
33142: LIST
33143: PUSH
33144: LD_INT 3
33146: NEG
33147: PUSH
33148: LD_INT 1
33150: NEG
33151: PUSH
33152: EMPTY
33153: LIST
33154: LIST
33155: PUSH
33156: EMPTY
33157: LIST
33158: LIST
33159: LIST
33160: LIST
33161: LIST
33162: LIST
33163: LIST
33164: LIST
33165: LIST
33166: LIST
33167: LIST
33168: LIST
33169: LIST
33170: LIST
33171: LIST
33172: LIST
33173: LIST
33174: LIST
33175: LIST
33176: LIST
33177: LIST
33178: LIST
33179: LIST
33180: LIST
33181: LIST
33182: LIST
33183: LIST
33184: LIST
33185: LIST
33186: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33187: LD_ADDR_VAR 0 47
33191: PUSH
33192: LD_INT 0
33194: PUSH
33195: LD_INT 0
33197: PUSH
33198: EMPTY
33199: LIST
33200: LIST
33201: PUSH
33202: LD_INT 0
33204: PUSH
33205: LD_INT 1
33207: NEG
33208: PUSH
33209: EMPTY
33210: LIST
33211: LIST
33212: PUSH
33213: LD_INT 1
33215: PUSH
33216: LD_INT 0
33218: PUSH
33219: EMPTY
33220: LIST
33221: LIST
33222: PUSH
33223: LD_INT 1
33225: PUSH
33226: LD_INT 1
33228: PUSH
33229: EMPTY
33230: LIST
33231: LIST
33232: PUSH
33233: LD_INT 0
33235: PUSH
33236: LD_INT 1
33238: PUSH
33239: EMPTY
33240: LIST
33241: LIST
33242: PUSH
33243: LD_INT 1
33245: NEG
33246: PUSH
33247: LD_INT 0
33249: PUSH
33250: EMPTY
33251: LIST
33252: LIST
33253: PUSH
33254: LD_INT 1
33256: NEG
33257: PUSH
33258: LD_INT 1
33260: NEG
33261: PUSH
33262: EMPTY
33263: LIST
33264: LIST
33265: PUSH
33266: LD_INT 1
33268: NEG
33269: PUSH
33270: LD_INT 2
33272: NEG
33273: PUSH
33274: EMPTY
33275: LIST
33276: LIST
33277: PUSH
33278: LD_INT 0
33280: PUSH
33281: LD_INT 2
33283: NEG
33284: PUSH
33285: EMPTY
33286: LIST
33287: LIST
33288: PUSH
33289: LD_INT 1
33291: PUSH
33292: LD_INT 1
33294: NEG
33295: PUSH
33296: EMPTY
33297: LIST
33298: LIST
33299: PUSH
33300: LD_INT 2
33302: NEG
33303: PUSH
33304: LD_INT 1
33306: NEG
33307: PUSH
33308: EMPTY
33309: LIST
33310: LIST
33311: PUSH
33312: LD_INT 2
33314: NEG
33315: PUSH
33316: LD_INT 2
33318: NEG
33319: PUSH
33320: EMPTY
33321: LIST
33322: LIST
33323: PUSH
33324: EMPTY
33325: LIST
33326: LIST
33327: LIST
33328: LIST
33329: LIST
33330: LIST
33331: LIST
33332: LIST
33333: LIST
33334: LIST
33335: LIST
33336: LIST
33337: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
33338: LD_ADDR_VAR 0 48
33342: PUSH
33343: LD_INT 0
33345: PUSH
33346: LD_INT 0
33348: PUSH
33349: EMPTY
33350: LIST
33351: LIST
33352: PUSH
33353: LD_INT 0
33355: PUSH
33356: LD_INT 1
33358: NEG
33359: PUSH
33360: EMPTY
33361: LIST
33362: LIST
33363: PUSH
33364: LD_INT 1
33366: PUSH
33367: LD_INT 0
33369: PUSH
33370: EMPTY
33371: LIST
33372: LIST
33373: PUSH
33374: LD_INT 1
33376: PUSH
33377: LD_INT 1
33379: PUSH
33380: EMPTY
33381: LIST
33382: LIST
33383: PUSH
33384: LD_INT 0
33386: PUSH
33387: LD_INT 1
33389: PUSH
33390: EMPTY
33391: LIST
33392: LIST
33393: PUSH
33394: LD_INT 1
33396: NEG
33397: PUSH
33398: LD_INT 0
33400: PUSH
33401: EMPTY
33402: LIST
33403: LIST
33404: PUSH
33405: LD_INT 1
33407: NEG
33408: PUSH
33409: LD_INT 1
33411: NEG
33412: PUSH
33413: EMPTY
33414: LIST
33415: LIST
33416: PUSH
33417: LD_INT 1
33419: NEG
33420: PUSH
33421: LD_INT 2
33423: NEG
33424: PUSH
33425: EMPTY
33426: LIST
33427: LIST
33428: PUSH
33429: LD_INT 0
33431: PUSH
33432: LD_INT 2
33434: NEG
33435: PUSH
33436: EMPTY
33437: LIST
33438: LIST
33439: PUSH
33440: LD_INT 1
33442: PUSH
33443: LD_INT 1
33445: NEG
33446: PUSH
33447: EMPTY
33448: LIST
33449: LIST
33450: PUSH
33451: LD_INT 2
33453: PUSH
33454: LD_INT 0
33456: PUSH
33457: EMPTY
33458: LIST
33459: LIST
33460: PUSH
33461: LD_INT 2
33463: PUSH
33464: LD_INT 1
33466: PUSH
33467: EMPTY
33468: LIST
33469: LIST
33470: PUSH
33471: EMPTY
33472: LIST
33473: LIST
33474: LIST
33475: LIST
33476: LIST
33477: LIST
33478: LIST
33479: LIST
33480: LIST
33481: LIST
33482: LIST
33483: LIST
33484: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
33485: LD_ADDR_VAR 0 49
33489: PUSH
33490: LD_INT 0
33492: PUSH
33493: LD_INT 0
33495: PUSH
33496: EMPTY
33497: LIST
33498: LIST
33499: PUSH
33500: LD_INT 0
33502: PUSH
33503: LD_INT 1
33505: NEG
33506: PUSH
33507: EMPTY
33508: LIST
33509: LIST
33510: PUSH
33511: LD_INT 1
33513: PUSH
33514: LD_INT 0
33516: PUSH
33517: EMPTY
33518: LIST
33519: LIST
33520: PUSH
33521: LD_INT 1
33523: PUSH
33524: LD_INT 1
33526: PUSH
33527: EMPTY
33528: LIST
33529: LIST
33530: PUSH
33531: LD_INT 0
33533: PUSH
33534: LD_INT 1
33536: PUSH
33537: EMPTY
33538: LIST
33539: LIST
33540: PUSH
33541: LD_INT 1
33543: NEG
33544: PUSH
33545: LD_INT 0
33547: PUSH
33548: EMPTY
33549: LIST
33550: LIST
33551: PUSH
33552: LD_INT 1
33554: NEG
33555: PUSH
33556: LD_INT 1
33558: NEG
33559: PUSH
33560: EMPTY
33561: LIST
33562: LIST
33563: PUSH
33564: LD_INT 1
33566: PUSH
33567: LD_INT 1
33569: NEG
33570: PUSH
33571: EMPTY
33572: LIST
33573: LIST
33574: PUSH
33575: LD_INT 2
33577: PUSH
33578: LD_INT 0
33580: PUSH
33581: EMPTY
33582: LIST
33583: LIST
33584: PUSH
33585: LD_INT 2
33587: PUSH
33588: LD_INT 1
33590: PUSH
33591: EMPTY
33592: LIST
33593: LIST
33594: PUSH
33595: LD_INT 2
33597: PUSH
33598: LD_INT 2
33600: PUSH
33601: EMPTY
33602: LIST
33603: LIST
33604: PUSH
33605: LD_INT 1
33607: PUSH
33608: LD_INT 2
33610: PUSH
33611: EMPTY
33612: LIST
33613: LIST
33614: PUSH
33615: EMPTY
33616: LIST
33617: LIST
33618: LIST
33619: LIST
33620: LIST
33621: LIST
33622: LIST
33623: LIST
33624: LIST
33625: LIST
33626: LIST
33627: LIST
33628: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
33629: LD_ADDR_VAR 0 50
33633: PUSH
33634: LD_INT 0
33636: PUSH
33637: LD_INT 0
33639: PUSH
33640: EMPTY
33641: LIST
33642: LIST
33643: PUSH
33644: LD_INT 0
33646: PUSH
33647: LD_INT 1
33649: NEG
33650: PUSH
33651: EMPTY
33652: LIST
33653: LIST
33654: PUSH
33655: LD_INT 1
33657: PUSH
33658: LD_INT 0
33660: PUSH
33661: EMPTY
33662: LIST
33663: LIST
33664: PUSH
33665: LD_INT 1
33667: PUSH
33668: LD_INT 1
33670: PUSH
33671: EMPTY
33672: LIST
33673: LIST
33674: PUSH
33675: LD_INT 0
33677: PUSH
33678: LD_INT 1
33680: PUSH
33681: EMPTY
33682: LIST
33683: LIST
33684: PUSH
33685: LD_INT 1
33687: NEG
33688: PUSH
33689: LD_INT 0
33691: PUSH
33692: EMPTY
33693: LIST
33694: LIST
33695: PUSH
33696: LD_INT 1
33698: NEG
33699: PUSH
33700: LD_INT 1
33702: NEG
33703: PUSH
33704: EMPTY
33705: LIST
33706: LIST
33707: PUSH
33708: LD_INT 2
33710: PUSH
33711: LD_INT 1
33713: PUSH
33714: EMPTY
33715: LIST
33716: LIST
33717: PUSH
33718: LD_INT 2
33720: PUSH
33721: LD_INT 2
33723: PUSH
33724: EMPTY
33725: LIST
33726: LIST
33727: PUSH
33728: LD_INT 1
33730: PUSH
33731: LD_INT 2
33733: PUSH
33734: EMPTY
33735: LIST
33736: LIST
33737: PUSH
33738: LD_INT 0
33740: PUSH
33741: LD_INT 2
33743: PUSH
33744: EMPTY
33745: LIST
33746: LIST
33747: PUSH
33748: LD_INT 1
33750: NEG
33751: PUSH
33752: LD_INT 1
33754: PUSH
33755: EMPTY
33756: LIST
33757: LIST
33758: PUSH
33759: EMPTY
33760: LIST
33761: LIST
33762: LIST
33763: LIST
33764: LIST
33765: LIST
33766: LIST
33767: LIST
33768: LIST
33769: LIST
33770: LIST
33771: LIST
33772: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
33773: LD_ADDR_VAR 0 51
33777: PUSH
33778: LD_INT 0
33780: PUSH
33781: LD_INT 0
33783: PUSH
33784: EMPTY
33785: LIST
33786: LIST
33787: PUSH
33788: LD_INT 0
33790: PUSH
33791: LD_INT 1
33793: NEG
33794: PUSH
33795: EMPTY
33796: LIST
33797: LIST
33798: PUSH
33799: LD_INT 1
33801: PUSH
33802: LD_INT 0
33804: PUSH
33805: EMPTY
33806: LIST
33807: LIST
33808: PUSH
33809: LD_INT 1
33811: PUSH
33812: LD_INT 1
33814: PUSH
33815: EMPTY
33816: LIST
33817: LIST
33818: PUSH
33819: LD_INT 0
33821: PUSH
33822: LD_INT 1
33824: PUSH
33825: EMPTY
33826: LIST
33827: LIST
33828: PUSH
33829: LD_INT 1
33831: NEG
33832: PUSH
33833: LD_INT 0
33835: PUSH
33836: EMPTY
33837: LIST
33838: LIST
33839: PUSH
33840: LD_INT 1
33842: NEG
33843: PUSH
33844: LD_INT 1
33846: NEG
33847: PUSH
33848: EMPTY
33849: LIST
33850: LIST
33851: PUSH
33852: LD_INT 1
33854: PUSH
33855: LD_INT 2
33857: PUSH
33858: EMPTY
33859: LIST
33860: LIST
33861: PUSH
33862: LD_INT 0
33864: PUSH
33865: LD_INT 2
33867: PUSH
33868: EMPTY
33869: LIST
33870: LIST
33871: PUSH
33872: LD_INT 1
33874: NEG
33875: PUSH
33876: LD_INT 1
33878: PUSH
33879: EMPTY
33880: LIST
33881: LIST
33882: PUSH
33883: LD_INT 2
33885: NEG
33886: PUSH
33887: LD_INT 0
33889: PUSH
33890: EMPTY
33891: LIST
33892: LIST
33893: PUSH
33894: LD_INT 2
33896: NEG
33897: PUSH
33898: LD_INT 1
33900: NEG
33901: PUSH
33902: EMPTY
33903: LIST
33904: LIST
33905: PUSH
33906: EMPTY
33907: LIST
33908: LIST
33909: LIST
33910: LIST
33911: LIST
33912: LIST
33913: LIST
33914: LIST
33915: LIST
33916: LIST
33917: LIST
33918: LIST
33919: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33920: LD_ADDR_VAR 0 52
33924: PUSH
33925: LD_INT 0
33927: PUSH
33928: LD_INT 0
33930: PUSH
33931: EMPTY
33932: LIST
33933: LIST
33934: PUSH
33935: LD_INT 0
33937: PUSH
33938: LD_INT 1
33940: NEG
33941: PUSH
33942: EMPTY
33943: LIST
33944: LIST
33945: PUSH
33946: LD_INT 1
33948: PUSH
33949: LD_INT 0
33951: PUSH
33952: EMPTY
33953: LIST
33954: LIST
33955: PUSH
33956: LD_INT 1
33958: PUSH
33959: LD_INT 1
33961: PUSH
33962: EMPTY
33963: LIST
33964: LIST
33965: PUSH
33966: LD_INT 0
33968: PUSH
33969: LD_INT 1
33971: PUSH
33972: EMPTY
33973: LIST
33974: LIST
33975: PUSH
33976: LD_INT 1
33978: NEG
33979: PUSH
33980: LD_INT 0
33982: PUSH
33983: EMPTY
33984: LIST
33985: LIST
33986: PUSH
33987: LD_INT 1
33989: NEG
33990: PUSH
33991: LD_INT 1
33993: NEG
33994: PUSH
33995: EMPTY
33996: LIST
33997: LIST
33998: PUSH
33999: LD_INT 1
34001: NEG
34002: PUSH
34003: LD_INT 2
34005: NEG
34006: PUSH
34007: EMPTY
34008: LIST
34009: LIST
34010: PUSH
34011: LD_INT 1
34013: NEG
34014: PUSH
34015: LD_INT 1
34017: PUSH
34018: EMPTY
34019: LIST
34020: LIST
34021: PUSH
34022: LD_INT 2
34024: NEG
34025: PUSH
34026: LD_INT 0
34028: PUSH
34029: EMPTY
34030: LIST
34031: LIST
34032: PUSH
34033: LD_INT 2
34035: NEG
34036: PUSH
34037: LD_INT 1
34039: NEG
34040: PUSH
34041: EMPTY
34042: LIST
34043: LIST
34044: PUSH
34045: LD_INT 2
34047: NEG
34048: PUSH
34049: LD_INT 2
34051: NEG
34052: PUSH
34053: EMPTY
34054: LIST
34055: LIST
34056: PUSH
34057: EMPTY
34058: LIST
34059: LIST
34060: LIST
34061: LIST
34062: LIST
34063: LIST
34064: LIST
34065: LIST
34066: LIST
34067: LIST
34068: LIST
34069: LIST
34070: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34071: LD_ADDR_VAR 0 53
34075: PUSH
34076: LD_INT 0
34078: PUSH
34079: LD_INT 0
34081: PUSH
34082: EMPTY
34083: LIST
34084: LIST
34085: PUSH
34086: LD_INT 0
34088: PUSH
34089: LD_INT 1
34091: NEG
34092: PUSH
34093: EMPTY
34094: LIST
34095: LIST
34096: PUSH
34097: LD_INT 1
34099: PUSH
34100: LD_INT 0
34102: PUSH
34103: EMPTY
34104: LIST
34105: LIST
34106: PUSH
34107: LD_INT 1
34109: PUSH
34110: LD_INT 1
34112: PUSH
34113: EMPTY
34114: LIST
34115: LIST
34116: PUSH
34117: LD_INT 0
34119: PUSH
34120: LD_INT 1
34122: PUSH
34123: EMPTY
34124: LIST
34125: LIST
34126: PUSH
34127: LD_INT 1
34129: NEG
34130: PUSH
34131: LD_INT 0
34133: PUSH
34134: EMPTY
34135: LIST
34136: LIST
34137: PUSH
34138: LD_INT 1
34140: NEG
34141: PUSH
34142: LD_INT 1
34144: NEG
34145: PUSH
34146: EMPTY
34147: LIST
34148: LIST
34149: PUSH
34150: LD_INT 1
34152: NEG
34153: PUSH
34154: LD_INT 2
34156: NEG
34157: PUSH
34158: EMPTY
34159: LIST
34160: LIST
34161: PUSH
34162: LD_INT 0
34164: PUSH
34165: LD_INT 2
34167: NEG
34168: PUSH
34169: EMPTY
34170: LIST
34171: LIST
34172: PUSH
34173: LD_INT 1
34175: PUSH
34176: LD_INT 1
34178: NEG
34179: PUSH
34180: EMPTY
34181: LIST
34182: LIST
34183: PUSH
34184: LD_INT 2
34186: PUSH
34187: LD_INT 0
34189: PUSH
34190: EMPTY
34191: LIST
34192: LIST
34193: PUSH
34194: LD_INT 2
34196: PUSH
34197: LD_INT 1
34199: PUSH
34200: EMPTY
34201: LIST
34202: LIST
34203: PUSH
34204: LD_INT 2
34206: PUSH
34207: LD_INT 2
34209: PUSH
34210: EMPTY
34211: LIST
34212: LIST
34213: PUSH
34214: LD_INT 1
34216: PUSH
34217: LD_INT 2
34219: PUSH
34220: EMPTY
34221: LIST
34222: LIST
34223: PUSH
34224: LD_INT 0
34226: PUSH
34227: LD_INT 2
34229: PUSH
34230: EMPTY
34231: LIST
34232: LIST
34233: PUSH
34234: LD_INT 1
34236: NEG
34237: PUSH
34238: LD_INT 1
34240: PUSH
34241: EMPTY
34242: LIST
34243: LIST
34244: PUSH
34245: LD_INT 2
34247: NEG
34248: PUSH
34249: LD_INT 0
34251: PUSH
34252: EMPTY
34253: LIST
34254: LIST
34255: PUSH
34256: LD_INT 2
34258: NEG
34259: PUSH
34260: LD_INT 1
34262: NEG
34263: PUSH
34264: EMPTY
34265: LIST
34266: LIST
34267: PUSH
34268: LD_INT 2
34270: NEG
34271: PUSH
34272: LD_INT 2
34274: NEG
34275: PUSH
34276: EMPTY
34277: LIST
34278: LIST
34279: PUSH
34280: EMPTY
34281: LIST
34282: LIST
34283: LIST
34284: LIST
34285: LIST
34286: LIST
34287: LIST
34288: LIST
34289: LIST
34290: LIST
34291: LIST
34292: LIST
34293: LIST
34294: LIST
34295: LIST
34296: LIST
34297: LIST
34298: LIST
34299: LIST
34300: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34301: LD_ADDR_VAR 0 54
34305: PUSH
34306: LD_INT 0
34308: PUSH
34309: LD_INT 0
34311: PUSH
34312: EMPTY
34313: LIST
34314: LIST
34315: PUSH
34316: LD_INT 0
34318: PUSH
34319: LD_INT 1
34321: NEG
34322: PUSH
34323: EMPTY
34324: LIST
34325: LIST
34326: PUSH
34327: LD_INT 1
34329: PUSH
34330: LD_INT 0
34332: PUSH
34333: EMPTY
34334: LIST
34335: LIST
34336: PUSH
34337: LD_INT 1
34339: PUSH
34340: LD_INT 1
34342: PUSH
34343: EMPTY
34344: LIST
34345: LIST
34346: PUSH
34347: LD_INT 0
34349: PUSH
34350: LD_INT 1
34352: PUSH
34353: EMPTY
34354: LIST
34355: LIST
34356: PUSH
34357: LD_INT 1
34359: NEG
34360: PUSH
34361: LD_INT 0
34363: PUSH
34364: EMPTY
34365: LIST
34366: LIST
34367: PUSH
34368: LD_INT 1
34370: NEG
34371: PUSH
34372: LD_INT 1
34374: NEG
34375: PUSH
34376: EMPTY
34377: LIST
34378: LIST
34379: PUSH
34380: LD_INT 1
34382: NEG
34383: PUSH
34384: LD_INT 2
34386: NEG
34387: PUSH
34388: EMPTY
34389: LIST
34390: LIST
34391: PUSH
34392: LD_INT 0
34394: PUSH
34395: LD_INT 2
34397: NEG
34398: PUSH
34399: EMPTY
34400: LIST
34401: LIST
34402: PUSH
34403: LD_INT 1
34405: PUSH
34406: LD_INT 1
34408: NEG
34409: PUSH
34410: EMPTY
34411: LIST
34412: LIST
34413: PUSH
34414: LD_INT 2
34416: PUSH
34417: LD_INT 0
34419: PUSH
34420: EMPTY
34421: LIST
34422: LIST
34423: PUSH
34424: LD_INT 2
34426: PUSH
34427: LD_INT 1
34429: PUSH
34430: EMPTY
34431: LIST
34432: LIST
34433: PUSH
34434: LD_INT 2
34436: PUSH
34437: LD_INT 2
34439: PUSH
34440: EMPTY
34441: LIST
34442: LIST
34443: PUSH
34444: LD_INT 1
34446: PUSH
34447: LD_INT 2
34449: PUSH
34450: EMPTY
34451: LIST
34452: LIST
34453: PUSH
34454: LD_INT 0
34456: PUSH
34457: LD_INT 2
34459: PUSH
34460: EMPTY
34461: LIST
34462: LIST
34463: PUSH
34464: LD_INT 1
34466: NEG
34467: PUSH
34468: LD_INT 1
34470: PUSH
34471: EMPTY
34472: LIST
34473: LIST
34474: PUSH
34475: LD_INT 2
34477: NEG
34478: PUSH
34479: LD_INT 0
34481: PUSH
34482: EMPTY
34483: LIST
34484: LIST
34485: PUSH
34486: LD_INT 2
34488: NEG
34489: PUSH
34490: LD_INT 1
34492: NEG
34493: PUSH
34494: EMPTY
34495: LIST
34496: LIST
34497: PUSH
34498: LD_INT 2
34500: NEG
34501: PUSH
34502: LD_INT 2
34504: NEG
34505: PUSH
34506: EMPTY
34507: LIST
34508: LIST
34509: PUSH
34510: EMPTY
34511: LIST
34512: LIST
34513: LIST
34514: LIST
34515: LIST
34516: LIST
34517: LIST
34518: LIST
34519: LIST
34520: LIST
34521: LIST
34522: LIST
34523: LIST
34524: LIST
34525: LIST
34526: LIST
34527: LIST
34528: LIST
34529: LIST
34530: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34531: LD_ADDR_VAR 0 55
34535: PUSH
34536: LD_INT 0
34538: PUSH
34539: LD_INT 0
34541: PUSH
34542: EMPTY
34543: LIST
34544: LIST
34545: PUSH
34546: LD_INT 0
34548: PUSH
34549: LD_INT 1
34551: NEG
34552: PUSH
34553: EMPTY
34554: LIST
34555: LIST
34556: PUSH
34557: LD_INT 1
34559: PUSH
34560: LD_INT 0
34562: PUSH
34563: EMPTY
34564: LIST
34565: LIST
34566: PUSH
34567: LD_INT 1
34569: PUSH
34570: LD_INT 1
34572: PUSH
34573: EMPTY
34574: LIST
34575: LIST
34576: PUSH
34577: LD_INT 0
34579: PUSH
34580: LD_INT 1
34582: PUSH
34583: EMPTY
34584: LIST
34585: LIST
34586: PUSH
34587: LD_INT 1
34589: NEG
34590: PUSH
34591: LD_INT 0
34593: PUSH
34594: EMPTY
34595: LIST
34596: LIST
34597: PUSH
34598: LD_INT 1
34600: NEG
34601: PUSH
34602: LD_INT 1
34604: NEG
34605: PUSH
34606: EMPTY
34607: LIST
34608: LIST
34609: PUSH
34610: LD_INT 1
34612: NEG
34613: PUSH
34614: LD_INT 2
34616: NEG
34617: PUSH
34618: EMPTY
34619: LIST
34620: LIST
34621: PUSH
34622: LD_INT 0
34624: PUSH
34625: LD_INT 2
34627: NEG
34628: PUSH
34629: EMPTY
34630: LIST
34631: LIST
34632: PUSH
34633: LD_INT 1
34635: PUSH
34636: LD_INT 1
34638: NEG
34639: PUSH
34640: EMPTY
34641: LIST
34642: LIST
34643: PUSH
34644: LD_INT 2
34646: PUSH
34647: LD_INT 0
34649: PUSH
34650: EMPTY
34651: LIST
34652: LIST
34653: PUSH
34654: LD_INT 2
34656: PUSH
34657: LD_INT 1
34659: PUSH
34660: EMPTY
34661: LIST
34662: LIST
34663: PUSH
34664: LD_INT 2
34666: PUSH
34667: LD_INT 2
34669: PUSH
34670: EMPTY
34671: LIST
34672: LIST
34673: PUSH
34674: LD_INT 1
34676: PUSH
34677: LD_INT 2
34679: PUSH
34680: EMPTY
34681: LIST
34682: LIST
34683: PUSH
34684: LD_INT 0
34686: PUSH
34687: LD_INT 2
34689: PUSH
34690: EMPTY
34691: LIST
34692: LIST
34693: PUSH
34694: LD_INT 1
34696: NEG
34697: PUSH
34698: LD_INT 1
34700: PUSH
34701: EMPTY
34702: LIST
34703: LIST
34704: PUSH
34705: LD_INT 2
34707: NEG
34708: PUSH
34709: LD_INT 0
34711: PUSH
34712: EMPTY
34713: LIST
34714: LIST
34715: PUSH
34716: LD_INT 2
34718: NEG
34719: PUSH
34720: LD_INT 1
34722: NEG
34723: PUSH
34724: EMPTY
34725: LIST
34726: LIST
34727: PUSH
34728: LD_INT 2
34730: NEG
34731: PUSH
34732: LD_INT 2
34734: NEG
34735: PUSH
34736: EMPTY
34737: LIST
34738: LIST
34739: PUSH
34740: EMPTY
34741: LIST
34742: LIST
34743: LIST
34744: LIST
34745: LIST
34746: LIST
34747: LIST
34748: LIST
34749: LIST
34750: LIST
34751: LIST
34752: LIST
34753: LIST
34754: LIST
34755: LIST
34756: LIST
34757: LIST
34758: LIST
34759: LIST
34760: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34761: LD_ADDR_VAR 0 56
34765: PUSH
34766: LD_INT 0
34768: PUSH
34769: LD_INT 0
34771: PUSH
34772: EMPTY
34773: LIST
34774: LIST
34775: PUSH
34776: LD_INT 0
34778: PUSH
34779: LD_INT 1
34781: NEG
34782: PUSH
34783: EMPTY
34784: LIST
34785: LIST
34786: PUSH
34787: LD_INT 1
34789: PUSH
34790: LD_INT 0
34792: PUSH
34793: EMPTY
34794: LIST
34795: LIST
34796: PUSH
34797: LD_INT 1
34799: PUSH
34800: LD_INT 1
34802: PUSH
34803: EMPTY
34804: LIST
34805: LIST
34806: PUSH
34807: LD_INT 0
34809: PUSH
34810: LD_INT 1
34812: PUSH
34813: EMPTY
34814: LIST
34815: LIST
34816: PUSH
34817: LD_INT 1
34819: NEG
34820: PUSH
34821: LD_INT 0
34823: PUSH
34824: EMPTY
34825: LIST
34826: LIST
34827: PUSH
34828: LD_INT 1
34830: NEG
34831: PUSH
34832: LD_INT 1
34834: NEG
34835: PUSH
34836: EMPTY
34837: LIST
34838: LIST
34839: PUSH
34840: LD_INT 1
34842: NEG
34843: PUSH
34844: LD_INT 2
34846: NEG
34847: PUSH
34848: EMPTY
34849: LIST
34850: LIST
34851: PUSH
34852: LD_INT 0
34854: PUSH
34855: LD_INT 2
34857: NEG
34858: PUSH
34859: EMPTY
34860: LIST
34861: LIST
34862: PUSH
34863: LD_INT 1
34865: PUSH
34866: LD_INT 1
34868: NEG
34869: PUSH
34870: EMPTY
34871: LIST
34872: LIST
34873: PUSH
34874: LD_INT 2
34876: PUSH
34877: LD_INT 0
34879: PUSH
34880: EMPTY
34881: LIST
34882: LIST
34883: PUSH
34884: LD_INT 2
34886: PUSH
34887: LD_INT 1
34889: PUSH
34890: EMPTY
34891: LIST
34892: LIST
34893: PUSH
34894: LD_INT 2
34896: PUSH
34897: LD_INT 2
34899: PUSH
34900: EMPTY
34901: LIST
34902: LIST
34903: PUSH
34904: LD_INT 1
34906: PUSH
34907: LD_INT 2
34909: PUSH
34910: EMPTY
34911: LIST
34912: LIST
34913: PUSH
34914: LD_INT 0
34916: PUSH
34917: LD_INT 2
34919: PUSH
34920: EMPTY
34921: LIST
34922: LIST
34923: PUSH
34924: LD_INT 1
34926: NEG
34927: PUSH
34928: LD_INT 1
34930: PUSH
34931: EMPTY
34932: LIST
34933: LIST
34934: PUSH
34935: LD_INT 2
34937: NEG
34938: PUSH
34939: LD_INT 0
34941: PUSH
34942: EMPTY
34943: LIST
34944: LIST
34945: PUSH
34946: LD_INT 2
34948: NEG
34949: PUSH
34950: LD_INT 1
34952: NEG
34953: PUSH
34954: EMPTY
34955: LIST
34956: LIST
34957: PUSH
34958: LD_INT 2
34960: NEG
34961: PUSH
34962: LD_INT 2
34964: NEG
34965: PUSH
34966: EMPTY
34967: LIST
34968: LIST
34969: PUSH
34970: EMPTY
34971: LIST
34972: LIST
34973: LIST
34974: LIST
34975: LIST
34976: LIST
34977: LIST
34978: LIST
34979: LIST
34980: LIST
34981: LIST
34982: LIST
34983: LIST
34984: LIST
34985: LIST
34986: LIST
34987: LIST
34988: LIST
34989: LIST
34990: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34991: LD_ADDR_VAR 0 57
34995: PUSH
34996: LD_INT 0
34998: PUSH
34999: LD_INT 0
35001: PUSH
35002: EMPTY
35003: LIST
35004: LIST
35005: PUSH
35006: LD_INT 0
35008: PUSH
35009: LD_INT 1
35011: NEG
35012: PUSH
35013: EMPTY
35014: LIST
35015: LIST
35016: PUSH
35017: LD_INT 1
35019: PUSH
35020: LD_INT 0
35022: PUSH
35023: EMPTY
35024: LIST
35025: LIST
35026: PUSH
35027: LD_INT 1
35029: PUSH
35030: LD_INT 1
35032: PUSH
35033: EMPTY
35034: LIST
35035: LIST
35036: PUSH
35037: LD_INT 0
35039: PUSH
35040: LD_INT 1
35042: PUSH
35043: EMPTY
35044: LIST
35045: LIST
35046: PUSH
35047: LD_INT 1
35049: NEG
35050: PUSH
35051: LD_INT 0
35053: PUSH
35054: EMPTY
35055: LIST
35056: LIST
35057: PUSH
35058: LD_INT 1
35060: NEG
35061: PUSH
35062: LD_INT 1
35064: NEG
35065: PUSH
35066: EMPTY
35067: LIST
35068: LIST
35069: PUSH
35070: LD_INT 1
35072: NEG
35073: PUSH
35074: LD_INT 2
35076: NEG
35077: PUSH
35078: EMPTY
35079: LIST
35080: LIST
35081: PUSH
35082: LD_INT 0
35084: PUSH
35085: LD_INT 2
35087: NEG
35088: PUSH
35089: EMPTY
35090: LIST
35091: LIST
35092: PUSH
35093: LD_INT 1
35095: PUSH
35096: LD_INT 1
35098: NEG
35099: PUSH
35100: EMPTY
35101: LIST
35102: LIST
35103: PUSH
35104: LD_INT 2
35106: PUSH
35107: LD_INT 0
35109: PUSH
35110: EMPTY
35111: LIST
35112: LIST
35113: PUSH
35114: LD_INT 2
35116: PUSH
35117: LD_INT 1
35119: PUSH
35120: EMPTY
35121: LIST
35122: LIST
35123: PUSH
35124: LD_INT 2
35126: PUSH
35127: LD_INT 2
35129: PUSH
35130: EMPTY
35131: LIST
35132: LIST
35133: PUSH
35134: LD_INT 1
35136: PUSH
35137: LD_INT 2
35139: PUSH
35140: EMPTY
35141: LIST
35142: LIST
35143: PUSH
35144: LD_INT 0
35146: PUSH
35147: LD_INT 2
35149: PUSH
35150: EMPTY
35151: LIST
35152: LIST
35153: PUSH
35154: LD_INT 1
35156: NEG
35157: PUSH
35158: LD_INT 1
35160: PUSH
35161: EMPTY
35162: LIST
35163: LIST
35164: PUSH
35165: LD_INT 2
35167: NEG
35168: PUSH
35169: LD_INT 0
35171: PUSH
35172: EMPTY
35173: LIST
35174: LIST
35175: PUSH
35176: LD_INT 2
35178: NEG
35179: PUSH
35180: LD_INT 1
35182: NEG
35183: PUSH
35184: EMPTY
35185: LIST
35186: LIST
35187: PUSH
35188: LD_INT 2
35190: NEG
35191: PUSH
35192: LD_INT 2
35194: NEG
35195: PUSH
35196: EMPTY
35197: LIST
35198: LIST
35199: PUSH
35200: EMPTY
35201: LIST
35202: LIST
35203: LIST
35204: LIST
35205: LIST
35206: LIST
35207: LIST
35208: LIST
35209: LIST
35210: LIST
35211: LIST
35212: LIST
35213: LIST
35214: LIST
35215: LIST
35216: LIST
35217: LIST
35218: LIST
35219: LIST
35220: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35221: LD_ADDR_VAR 0 58
35225: PUSH
35226: LD_INT 0
35228: PUSH
35229: LD_INT 0
35231: PUSH
35232: EMPTY
35233: LIST
35234: LIST
35235: PUSH
35236: LD_INT 0
35238: PUSH
35239: LD_INT 1
35241: NEG
35242: PUSH
35243: EMPTY
35244: LIST
35245: LIST
35246: PUSH
35247: LD_INT 1
35249: PUSH
35250: LD_INT 0
35252: PUSH
35253: EMPTY
35254: LIST
35255: LIST
35256: PUSH
35257: LD_INT 1
35259: PUSH
35260: LD_INT 1
35262: PUSH
35263: EMPTY
35264: LIST
35265: LIST
35266: PUSH
35267: LD_INT 0
35269: PUSH
35270: LD_INT 1
35272: PUSH
35273: EMPTY
35274: LIST
35275: LIST
35276: PUSH
35277: LD_INT 1
35279: NEG
35280: PUSH
35281: LD_INT 0
35283: PUSH
35284: EMPTY
35285: LIST
35286: LIST
35287: PUSH
35288: LD_INT 1
35290: NEG
35291: PUSH
35292: LD_INT 1
35294: NEG
35295: PUSH
35296: EMPTY
35297: LIST
35298: LIST
35299: PUSH
35300: LD_INT 1
35302: NEG
35303: PUSH
35304: LD_INT 2
35306: NEG
35307: PUSH
35308: EMPTY
35309: LIST
35310: LIST
35311: PUSH
35312: LD_INT 0
35314: PUSH
35315: LD_INT 2
35317: NEG
35318: PUSH
35319: EMPTY
35320: LIST
35321: LIST
35322: PUSH
35323: LD_INT 1
35325: PUSH
35326: LD_INT 1
35328: NEG
35329: PUSH
35330: EMPTY
35331: LIST
35332: LIST
35333: PUSH
35334: LD_INT 2
35336: PUSH
35337: LD_INT 0
35339: PUSH
35340: EMPTY
35341: LIST
35342: LIST
35343: PUSH
35344: LD_INT 2
35346: PUSH
35347: LD_INT 1
35349: PUSH
35350: EMPTY
35351: LIST
35352: LIST
35353: PUSH
35354: LD_INT 2
35356: PUSH
35357: LD_INT 2
35359: PUSH
35360: EMPTY
35361: LIST
35362: LIST
35363: PUSH
35364: LD_INT 1
35366: PUSH
35367: LD_INT 2
35369: PUSH
35370: EMPTY
35371: LIST
35372: LIST
35373: PUSH
35374: LD_INT 0
35376: PUSH
35377: LD_INT 2
35379: PUSH
35380: EMPTY
35381: LIST
35382: LIST
35383: PUSH
35384: LD_INT 1
35386: NEG
35387: PUSH
35388: LD_INT 1
35390: PUSH
35391: EMPTY
35392: LIST
35393: LIST
35394: PUSH
35395: LD_INT 2
35397: NEG
35398: PUSH
35399: LD_INT 0
35401: PUSH
35402: EMPTY
35403: LIST
35404: LIST
35405: PUSH
35406: LD_INT 2
35408: NEG
35409: PUSH
35410: LD_INT 1
35412: NEG
35413: PUSH
35414: EMPTY
35415: LIST
35416: LIST
35417: PUSH
35418: LD_INT 2
35420: NEG
35421: PUSH
35422: LD_INT 2
35424: NEG
35425: PUSH
35426: EMPTY
35427: LIST
35428: LIST
35429: PUSH
35430: EMPTY
35431: LIST
35432: LIST
35433: LIST
35434: LIST
35435: LIST
35436: LIST
35437: LIST
35438: LIST
35439: LIST
35440: LIST
35441: LIST
35442: LIST
35443: LIST
35444: LIST
35445: LIST
35446: LIST
35447: LIST
35448: LIST
35449: LIST
35450: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
35451: LD_ADDR_VAR 0 59
35455: PUSH
35456: LD_INT 0
35458: PUSH
35459: LD_INT 0
35461: PUSH
35462: EMPTY
35463: LIST
35464: LIST
35465: PUSH
35466: LD_INT 0
35468: PUSH
35469: LD_INT 1
35471: NEG
35472: PUSH
35473: EMPTY
35474: LIST
35475: LIST
35476: PUSH
35477: LD_INT 1
35479: PUSH
35480: LD_INT 0
35482: PUSH
35483: EMPTY
35484: LIST
35485: LIST
35486: PUSH
35487: LD_INT 1
35489: PUSH
35490: LD_INT 1
35492: PUSH
35493: EMPTY
35494: LIST
35495: LIST
35496: PUSH
35497: LD_INT 0
35499: PUSH
35500: LD_INT 1
35502: PUSH
35503: EMPTY
35504: LIST
35505: LIST
35506: PUSH
35507: LD_INT 1
35509: NEG
35510: PUSH
35511: LD_INT 0
35513: PUSH
35514: EMPTY
35515: LIST
35516: LIST
35517: PUSH
35518: LD_INT 1
35520: NEG
35521: PUSH
35522: LD_INT 1
35524: NEG
35525: PUSH
35526: EMPTY
35527: LIST
35528: LIST
35529: PUSH
35530: EMPTY
35531: LIST
35532: LIST
35533: LIST
35534: LIST
35535: LIST
35536: LIST
35537: LIST
35538: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
35539: LD_ADDR_VAR 0 60
35543: PUSH
35544: LD_INT 0
35546: PUSH
35547: LD_INT 0
35549: PUSH
35550: EMPTY
35551: LIST
35552: LIST
35553: PUSH
35554: LD_INT 0
35556: PUSH
35557: LD_INT 1
35559: NEG
35560: PUSH
35561: EMPTY
35562: LIST
35563: LIST
35564: PUSH
35565: LD_INT 1
35567: PUSH
35568: LD_INT 0
35570: PUSH
35571: EMPTY
35572: LIST
35573: LIST
35574: PUSH
35575: LD_INT 1
35577: PUSH
35578: LD_INT 1
35580: PUSH
35581: EMPTY
35582: LIST
35583: LIST
35584: PUSH
35585: LD_INT 0
35587: PUSH
35588: LD_INT 1
35590: PUSH
35591: EMPTY
35592: LIST
35593: LIST
35594: PUSH
35595: LD_INT 1
35597: NEG
35598: PUSH
35599: LD_INT 0
35601: PUSH
35602: EMPTY
35603: LIST
35604: LIST
35605: PUSH
35606: LD_INT 1
35608: NEG
35609: PUSH
35610: LD_INT 1
35612: NEG
35613: PUSH
35614: EMPTY
35615: LIST
35616: LIST
35617: PUSH
35618: EMPTY
35619: LIST
35620: LIST
35621: LIST
35622: LIST
35623: LIST
35624: LIST
35625: LIST
35626: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
35627: LD_ADDR_VAR 0 61
35631: PUSH
35632: LD_INT 0
35634: PUSH
35635: LD_INT 0
35637: PUSH
35638: EMPTY
35639: LIST
35640: LIST
35641: PUSH
35642: LD_INT 0
35644: PUSH
35645: LD_INT 1
35647: NEG
35648: PUSH
35649: EMPTY
35650: LIST
35651: LIST
35652: PUSH
35653: LD_INT 1
35655: PUSH
35656: LD_INT 0
35658: PUSH
35659: EMPTY
35660: LIST
35661: LIST
35662: PUSH
35663: LD_INT 1
35665: PUSH
35666: LD_INT 1
35668: PUSH
35669: EMPTY
35670: LIST
35671: LIST
35672: PUSH
35673: LD_INT 0
35675: PUSH
35676: LD_INT 1
35678: PUSH
35679: EMPTY
35680: LIST
35681: LIST
35682: PUSH
35683: LD_INT 1
35685: NEG
35686: PUSH
35687: LD_INT 0
35689: PUSH
35690: EMPTY
35691: LIST
35692: LIST
35693: PUSH
35694: LD_INT 1
35696: NEG
35697: PUSH
35698: LD_INT 1
35700: NEG
35701: PUSH
35702: EMPTY
35703: LIST
35704: LIST
35705: PUSH
35706: EMPTY
35707: LIST
35708: LIST
35709: LIST
35710: LIST
35711: LIST
35712: LIST
35713: LIST
35714: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
35715: LD_ADDR_VAR 0 62
35719: PUSH
35720: LD_INT 0
35722: PUSH
35723: LD_INT 0
35725: PUSH
35726: EMPTY
35727: LIST
35728: LIST
35729: PUSH
35730: LD_INT 0
35732: PUSH
35733: LD_INT 1
35735: NEG
35736: PUSH
35737: EMPTY
35738: LIST
35739: LIST
35740: PUSH
35741: LD_INT 1
35743: PUSH
35744: LD_INT 0
35746: PUSH
35747: EMPTY
35748: LIST
35749: LIST
35750: PUSH
35751: LD_INT 1
35753: PUSH
35754: LD_INT 1
35756: PUSH
35757: EMPTY
35758: LIST
35759: LIST
35760: PUSH
35761: LD_INT 0
35763: PUSH
35764: LD_INT 1
35766: PUSH
35767: EMPTY
35768: LIST
35769: LIST
35770: PUSH
35771: LD_INT 1
35773: NEG
35774: PUSH
35775: LD_INT 0
35777: PUSH
35778: EMPTY
35779: LIST
35780: LIST
35781: PUSH
35782: LD_INT 1
35784: NEG
35785: PUSH
35786: LD_INT 1
35788: NEG
35789: PUSH
35790: EMPTY
35791: LIST
35792: LIST
35793: PUSH
35794: EMPTY
35795: LIST
35796: LIST
35797: LIST
35798: LIST
35799: LIST
35800: LIST
35801: LIST
35802: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
35803: LD_ADDR_VAR 0 63
35807: PUSH
35808: LD_INT 0
35810: PUSH
35811: LD_INT 0
35813: PUSH
35814: EMPTY
35815: LIST
35816: LIST
35817: PUSH
35818: LD_INT 0
35820: PUSH
35821: LD_INT 1
35823: NEG
35824: PUSH
35825: EMPTY
35826: LIST
35827: LIST
35828: PUSH
35829: LD_INT 1
35831: PUSH
35832: LD_INT 0
35834: PUSH
35835: EMPTY
35836: LIST
35837: LIST
35838: PUSH
35839: LD_INT 1
35841: PUSH
35842: LD_INT 1
35844: PUSH
35845: EMPTY
35846: LIST
35847: LIST
35848: PUSH
35849: LD_INT 0
35851: PUSH
35852: LD_INT 1
35854: PUSH
35855: EMPTY
35856: LIST
35857: LIST
35858: PUSH
35859: LD_INT 1
35861: NEG
35862: PUSH
35863: LD_INT 0
35865: PUSH
35866: EMPTY
35867: LIST
35868: LIST
35869: PUSH
35870: LD_INT 1
35872: NEG
35873: PUSH
35874: LD_INT 1
35876: NEG
35877: PUSH
35878: EMPTY
35879: LIST
35880: LIST
35881: PUSH
35882: EMPTY
35883: LIST
35884: LIST
35885: LIST
35886: LIST
35887: LIST
35888: LIST
35889: LIST
35890: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
35891: LD_ADDR_VAR 0 64
35895: PUSH
35896: LD_INT 0
35898: PUSH
35899: LD_INT 0
35901: PUSH
35902: EMPTY
35903: LIST
35904: LIST
35905: PUSH
35906: LD_INT 0
35908: PUSH
35909: LD_INT 1
35911: NEG
35912: PUSH
35913: EMPTY
35914: LIST
35915: LIST
35916: PUSH
35917: LD_INT 1
35919: PUSH
35920: LD_INT 0
35922: PUSH
35923: EMPTY
35924: LIST
35925: LIST
35926: PUSH
35927: LD_INT 1
35929: PUSH
35930: LD_INT 1
35932: PUSH
35933: EMPTY
35934: LIST
35935: LIST
35936: PUSH
35937: LD_INT 0
35939: PUSH
35940: LD_INT 1
35942: PUSH
35943: EMPTY
35944: LIST
35945: LIST
35946: PUSH
35947: LD_INT 1
35949: NEG
35950: PUSH
35951: LD_INT 0
35953: PUSH
35954: EMPTY
35955: LIST
35956: LIST
35957: PUSH
35958: LD_INT 1
35960: NEG
35961: PUSH
35962: LD_INT 1
35964: NEG
35965: PUSH
35966: EMPTY
35967: LIST
35968: LIST
35969: PUSH
35970: EMPTY
35971: LIST
35972: LIST
35973: LIST
35974: LIST
35975: LIST
35976: LIST
35977: LIST
35978: ST_TO_ADDR
// end ; 1 :
35979: GO 41876
35981: LD_INT 1
35983: DOUBLE
35984: EQUAL
35985: IFTRUE 35989
35987: GO 38612
35989: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
35990: LD_ADDR_VAR 0 11
35994: PUSH
35995: LD_INT 1
35997: NEG
35998: PUSH
35999: LD_INT 3
36001: NEG
36002: PUSH
36003: EMPTY
36004: LIST
36005: LIST
36006: PUSH
36007: LD_INT 0
36009: PUSH
36010: LD_INT 3
36012: NEG
36013: PUSH
36014: EMPTY
36015: LIST
36016: LIST
36017: PUSH
36018: LD_INT 1
36020: PUSH
36021: LD_INT 2
36023: NEG
36024: PUSH
36025: EMPTY
36026: LIST
36027: LIST
36028: PUSH
36029: EMPTY
36030: LIST
36031: LIST
36032: LIST
36033: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
36034: LD_ADDR_VAR 0 12
36038: PUSH
36039: LD_INT 2
36041: PUSH
36042: LD_INT 1
36044: NEG
36045: PUSH
36046: EMPTY
36047: LIST
36048: LIST
36049: PUSH
36050: LD_INT 3
36052: PUSH
36053: LD_INT 0
36055: PUSH
36056: EMPTY
36057: LIST
36058: LIST
36059: PUSH
36060: LD_INT 3
36062: PUSH
36063: LD_INT 1
36065: PUSH
36066: EMPTY
36067: LIST
36068: LIST
36069: PUSH
36070: EMPTY
36071: LIST
36072: LIST
36073: LIST
36074: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
36075: LD_ADDR_VAR 0 13
36079: PUSH
36080: LD_INT 3
36082: PUSH
36083: LD_INT 2
36085: PUSH
36086: EMPTY
36087: LIST
36088: LIST
36089: PUSH
36090: LD_INT 3
36092: PUSH
36093: LD_INT 3
36095: PUSH
36096: EMPTY
36097: LIST
36098: LIST
36099: PUSH
36100: LD_INT 2
36102: PUSH
36103: LD_INT 3
36105: PUSH
36106: EMPTY
36107: LIST
36108: LIST
36109: PUSH
36110: EMPTY
36111: LIST
36112: LIST
36113: LIST
36114: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
36115: LD_ADDR_VAR 0 14
36119: PUSH
36120: LD_INT 1
36122: PUSH
36123: LD_INT 3
36125: PUSH
36126: EMPTY
36127: LIST
36128: LIST
36129: PUSH
36130: LD_INT 0
36132: PUSH
36133: LD_INT 3
36135: PUSH
36136: EMPTY
36137: LIST
36138: LIST
36139: PUSH
36140: LD_INT 1
36142: NEG
36143: PUSH
36144: LD_INT 2
36146: PUSH
36147: EMPTY
36148: LIST
36149: LIST
36150: PUSH
36151: EMPTY
36152: LIST
36153: LIST
36154: LIST
36155: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
36156: LD_ADDR_VAR 0 15
36160: PUSH
36161: LD_INT 2
36163: NEG
36164: PUSH
36165: LD_INT 1
36167: PUSH
36168: EMPTY
36169: LIST
36170: LIST
36171: PUSH
36172: LD_INT 3
36174: NEG
36175: PUSH
36176: LD_INT 0
36178: PUSH
36179: EMPTY
36180: LIST
36181: LIST
36182: PUSH
36183: LD_INT 3
36185: NEG
36186: PUSH
36187: LD_INT 1
36189: NEG
36190: PUSH
36191: EMPTY
36192: LIST
36193: LIST
36194: PUSH
36195: EMPTY
36196: LIST
36197: LIST
36198: LIST
36199: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
36200: LD_ADDR_VAR 0 16
36204: PUSH
36205: LD_INT 2
36207: NEG
36208: PUSH
36209: LD_INT 3
36211: NEG
36212: PUSH
36213: EMPTY
36214: LIST
36215: LIST
36216: PUSH
36217: LD_INT 3
36219: NEG
36220: PUSH
36221: LD_INT 2
36223: NEG
36224: PUSH
36225: EMPTY
36226: LIST
36227: LIST
36228: PUSH
36229: LD_INT 3
36231: NEG
36232: PUSH
36233: LD_INT 3
36235: NEG
36236: PUSH
36237: EMPTY
36238: LIST
36239: LIST
36240: PUSH
36241: EMPTY
36242: LIST
36243: LIST
36244: LIST
36245: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
36246: LD_ADDR_VAR 0 17
36250: PUSH
36251: LD_INT 1
36253: NEG
36254: PUSH
36255: LD_INT 3
36257: NEG
36258: PUSH
36259: EMPTY
36260: LIST
36261: LIST
36262: PUSH
36263: LD_INT 0
36265: PUSH
36266: LD_INT 3
36268: NEG
36269: PUSH
36270: EMPTY
36271: LIST
36272: LIST
36273: PUSH
36274: LD_INT 1
36276: PUSH
36277: LD_INT 2
36279: NEG
36280: PUSH
36281: EMPTY
36282: LIST
36283: LIST
36284: PUSH
36285: EMPTY
36286: LIST
36287: LIST
36288: LIST
36289: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
36290: LD_ADDR_VAR 0 18
36294: PUSH
36295: LD_INT 2
36297: PUSH
36298: LD_INT 1
36300: NEG
36301: PUSH
36302: EMPTY
36303: LIST
36304: LIST
36305: PUSH
36306: LD_INT 3
36308: PUSH
36309: LD_INT 0
36311: PUSH
36312: EMPTY
36313: LIST
36314: LIST
36315: PUSH
36316: LD_INT 3
36318: PUSH
36319: LD_INT 1
36321: PUSH
36322: EMPTY
36323: LIST
36324: LIST
36325: PUSH
36326: EMPTY
36327: LIST
36328: LIST
36329: LIST
36330: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
36331: LD_ADDR_VAR 0 19
36335: PUSH
36336: LD_INT 3
36338: PUSH
36339: LD_INT 2
36341: PUSH
36342: EMPTY
36343: LIST
36344: LIST
36345: PUSH
36346: LD_INT 3
36348: PUSH
36349: LD_INT 3
36351: PUSH
36352: EMPTY
36353: LIST
36354: LIST
36355: PUSH
36356: LD_INT 2
36358: PUSH
36359: LD_INT 3
36361: PUSH
36362: EMPTY
36363: LIST
36364: LIST
36365: PUSH
36366: EMPTY
36367: LIST
36368: LIST
36369: LIST
36370: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
36371: LD_ADDR_VAR 0 20
36375: PUSH
36376: LD_INT 1
36378: PUSH
36379: LD_INT 3
36381: PUSH
36382: EMPTY
36383: LIST
36384: LIST
36385: PUSH
36386: LD_INT 0
36388: PUSH
36389: LD_INT 3
36391: PUSH
36392: EMPTY
36393: LIST
36394: LIST
36395: PUSH
36396: LD_INT 1
36398: NEG
36399: PUSH
36400: LD_INT 2
36402: PUSH
36403: EMPTY
36404: LIST
36405: LIST
36406: PUSH
36407: EMPTY
36408: LIST
36409: LIST
36410: LIST
36411: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
36412: LD_ADDR_VAR 0 21
36416: PUSH
36417: LD_INT 2
36419: NEG
36420: PUSH
36421: LD_INT 1
36423: PUSH
36424: EMPTY
36425: LIST
36426: LIST
36427: PUSH
36428: LD_INT 3
36430: NEG
36431: PUSH
36432: LD_INT 0
36434: PUSH
36435: EMPTY
36436: LIST
36437: LIST
36438: PUSH
36439: LD_INT 3
36441: NEG
36442: PUSH
36443: LD_INT 1
36445: NEG
36446: PUSH
36447: EMPTY
36448: LIST
36449: LIST
36450: PUSH
36451: EMPTY
36452: LIST
36453: LIST
36454: LIST
36455: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
36456: LD_ADDR_VAR 0 22
36460: PUSH
36461: LD_INT 2
36463: NEG
36464: PUSH
36465: LD_INT 3
36467: NEG
36468: PUSH
36469: EMPTY
36470: LIST
36471: LIST
36472: PUSH
36473: LD_INT 3
36475: NEG
36476: PUSH
36477: LD_INT 2
36479: NEG
36480: PUSH
36481: EMPTY
36482: LIST
36483: LIST
36484: PUSH
36485: LD_INT 3
36487: NEG
36488: PUSH
36489: LD_INT 3
36491: NEG
36492: PUSH
36493: EMPTY
36494: LIST
36495: LIST
36496: PUSH
36497: EMPTY
36498: LIST
36499: LIST
36500: LIST
36501: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
36502: LD_ADDR_VAR 0 23
36506: PUSH
36507: LD_INT 0
36509: PUSH
36510: LD_INT 3
36512: NEG
36513: PUSH
36514: EMPTY
36515: LIST
36516: LIST
36517: PUSH
36518: LD_INT 1
36520: NEG
36521: PUSH
36522: LD_INT 4
36524: NEG
36525: PUSH
36526: EMPTY
36527: LIST
36528: LIST
36529: PUSH
36530: LD_INT 1
36532: PUSH
36533: LD_INT 3
36535: NEG
36536: PUSH
36537: EMPTY
36538: LIST
36539: LIST
36540: PUSH
36541: EMPTY
36542: LIST
36543: LIST
36544: LIST
36545: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
36546: LD_ADDR_VAR 0 24
36550: PUSH
36551: LD_INT 3
36553: PUSH
36554: LD_INT 0
36556: PUSH
36557: EMPTY
36558: LIST
36559: LIST
36560: PUSH
36561: LD_INT 3
36563: PUSH
36564: LD_INT 1
36566: NEG
36567: PUSH
36568: EMPTY
36569: LIST
36570: LIST
36571: PUSH
36572: LD_INT 4
36574: PUSH
36575: LD_INT 1
36577: PUSH
36578: EMPTY
36579: LIST
36580: LIST
36581: PUSH
36582: EMPTY
36583: LIST
36584: LIST
36585: LIST
36586: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
36587: LD_ADDR_VAR 0 25
36591: PUSH
36592: LD_INT 3
36594: PUSH
36595: LD_INT 3
36597: PUSH
36598: EMPTY
36599: LIST
36600: LIST
36601: PUSH
36602: LD_INT 4
36604: PUSH
36605: LD_INT 3
36607: PUSH
36608: EMPTY
36609: LIST
36610: LIST
36611: PUSH
36612: LD_INT 3
36614: PUSH
36615: LD_INT 4
36617: PUSH
36618: EMPTY
36619: LIST
36620: LIST
36621: PUSH
36622: EMPTY
36623: LIST
36624: LIST
36625: LIST
36626: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
36627: LD_ADDR_VAR 0 26
36631: PUSH
36632: LD_INT 0
36634: PUSH
36635: LD_INT 3
36637: PUSH
36638: EMPTY
36639: LIST
36640: LIST
36641: PUSH
36642: LD_INT 1
36644: PUSH
36645: LD_INT 4
36647: PUSH
36648: EMPTY
36649: LIST
36650: LIST
36651: PUSH
36652: LD_INT 1
36654: NEG
36655: PUSH
36656: LD_INT 3
36658: PUSH
36659: EMPTY
36660: LIST
36661: LIST
36662: PUSH
36663: EMPTY
36664: LIST
36665: LIST
36666: LIST
36667: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
36668: LD_ADDR_VAR 0 27
36672: PUSH
36673: LD_INT 3
36675: NEG
36676: PUSH
36677: LD_INT 0
36679: PUSH
36680: EMPTY
36681: LIST
36682: LIST
36683: PUSH
36684: LD_INT 3
36686: NEG
36687: PUSH
36688: LD_INT 1
36690: PUSH
36691: EMPTY
36692: LIST
36693: LIST
36694: PUSH
36695: LD_INT 4
36697: NEG
36698: PUSH
36699: LD_INT 1
36701: NEG
36702: PUSH
36703: EMPTY
36704: LIST
36705: LIST
36706: PUSH
36707: EMPTY
36708: LIST
36709: LIST
36710: LIST
36711: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
36712: LD_ADDR_VAR 0 28
36716: PUSH
36717: LD_INT 3
36719: NEG
36720: PUSH
36721: LD_INT 3
36723: NEG
36724: PUSH
36725: EMPTY
36726: LIST
36727: LIST
36728: PUSH
36729: LD_INT 3
36731: NEG
36732: PUSH
36733: LD_INT 4
36735: NEG
36736: PUSH
36737: EMPTY
36738: LIST
36739: LIST
36740: PUSH
36741: LD_INT 4
36743: NEG
36744: PUSH
36745: LD_INT 3
36747: NEG
36748: PUSH
36749: EMPTY
36750: LIST
36751: LIST
36752: PUSH
36753: EMPTY
36754: LIST
36755: LIST
36756: LIST
36757: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
36758: LD_ADDR_VAR 0 29
36762: PUSH
36763: LD_INT 1
36765: NEG
36766: PUSH
36767: LD_INT 3
36769: NEG
36770: PUSH
36771: EMPTY
36772: LIST
36773: LIST
36774: PUSH
36775: LD_INT 0
36777: PUSH
36778: LD_INT 3
36780: NEG
36781: PUSH
36782: EMPTY
36783: LIST
36784: LIST
36785: PUSH
36786: LD_INT 1
36788: PUSH
36789: LD_INT 2
36791: NEG
36792: PUSH
36793: EMPTY
36794: LIST
36795: LIST
36796: PUSH
36797: LD_INT 1
36799: NEG
36800: PUSH
36801: LD_INT 4
36803: NEG
36804: PUSH
36805: EMPTY
36806: LIST
36807: LIST
36808: PUSH
36809: LD_INT 0
36811: PUSH
36812: LD_INT 4
36814: NEG
36815: PUSH
36816: EMPTY
36817: LIST
36818: LIST
36819: PUSH
36820: LD_INT 1
36822: PUSH
36823: LD_INT 3
36825: NEG
36826: PUSH
36827: EMPTY
36828: LIST
36829: LIST
36830: PUSH
36831: LD_INT 1
36833: NEG
36834: PUSH
36835: LD_INT 5
36837: NEG
36838: PUSH
36839: EMPTY
36840: LIST
36841: LIST
36842: PUSH
36843: LD_INT 0
36845: PUSH
36846: LD_INT 5
36848: NEG
36849: PUSH
36850: EMPTY
36851: LIST
36852: LIST
36853: PUSH
36854: LD_INT 1
36856: PUSH
36857: LD_INT 4
36859: NEG
36860: PUSH
36861: EMPTY
36862: LIST
36863: LIST
36864: PUSH
36865: LD_INT 1
36867: NEG
36868: PUSH
36869: LD_INT 6
36871: NEG
36872: PUSH
36873: EMPTY
36874: LIST
36875: LIST
36876: PUSH
36877: LD_INT 0
36879: PUSH
36880: LD_INT 6
36882: NEG
36883: PUSH
36884: EMPTY
36885: LIST
36886: LIST
36887: PUSH
36888: LD_INT 1
36890: PUSH
36891: LD_INT 5
36893: NEG
36894: PUSH
36895: EMPTY
36896: LIST
36897: LIST
36898: PUSH
36899: EMPTY
36900: LIST
36901: LIST
36902: LIST
36903: LIST
36904: LIST
36905: LIST
36906: LIST
36907: LIST
36908: LIST
36909: LIST
36910: LIST
36911: LIST
36912: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
36913: LD_ADDR_VAR 0 30
36917: PUSH
36918: LD_INT 2
36920: PUSH
36921: LD_INT 1
36923: NEG
36924: PUSH
36925: EMPTY
36926: LIST
36927: LIST
36928: PUSH
36929: LD_INT 3
36931: PUSH
36932: LD_INT 0
36934: PUSH
36935: EMPTY
36936: LIST
36937: LIST
36938: PUSH
36939: LD_INT 3
36941: PUSH
36942: LD_INT 1
36944: PUSH
36945: EMPTY
36946: LIST
36947: LIST
36948: PUSH
36949: LD_INT 3
36951: PUSH
36952: LD_INT 1
36954: NEG
36955: PUSH
36956: EMPTY
36957: LIST
36958: LIST
36959: PUSH
36960: LD_INT 4
36962: PUSH
36963: LD_INT 0
36965: PUSH
36966: EMPTY
36967: LIST
36968: LIST
36969: PUSH
36970: LD_INT 4
36972: PUSH
36973: LD_INT 1
36975: PUSH
36976: EMPTY
36977: LIST
36978: LIST
36979: PUSH
36980: LD_INT 4
36982: PUSH
36983: LD_INT 1
36985: NEG
36986: PUSH
36987: EMPTY
36988: LIST
36989: LIST
36990: PUSH
36991: LD_INT 5
36993: PUSH
36994: LD_INT 0
36996: PUSH
36997: EMPTY
36998: LIST
36999: LIST
37000: PUSH
37001: LD_INT 5
37003: PUSH
37004: LD_INT 1
37006: PUSH
37007: EMPTY
37008: LIST
37009: LIST
37010: PUSH
37011: LD_INT 5
37013: PUSH
37014: LD_INT 1
37016: NEG
37017: PUSH
37018: EMPTY
37019: LIST
37020: LIST
37021: PUSH
37022: LD_INT 6
37024: PUSH
37025: LD_INT 0
37027: PUSH
37028: EMPTY
37029: LIST
37030: LIST
37031: PUSH
37032: LD_INT 6
37034: PUSH
37035: LD_INT 1
37037: PUSH
37038: EMPTY
37039: LIST
37040: LIST
37041: PUSH
37042: EMPTY
37043: LIST
37044: LIST
37045: LIST
37046: LIST
37047: LIST
37048: LIST
37049: LIST
37050: LIST
37051: LIST
37052: LIST
37053: LIST
37054: LIST
37055: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
37056: LD_ADDR_VAR 0 31
37060: PUSH
37061: LD_INT 3
37063: PUSH
37064: LD_INT 2
37066: PUSH
37067: EMPTY
37068: LIST
37069: LIST
37070: PUSH
37071: LD_INT 3
37073: PUSH
37074: LD_INT 3
37076: PUSH
37077: EMPTY
37078: LIST
37079: LIST
37080: PUSH
37081: LD_INT 2
37083: PUSH
37084: LD_INT 3
37086: PUSH
37087: EMPTY
37088: LIST
37089: LIST
37090: PUSH
37091: LD_INT 4
37093: PUSH
37094: LD_INT 3
37096: PUSH
37097: EMPTY
37098: LIST
37099: LIST
37100: PUSH
37101: LD_INT 4
37103: PUSH
37104: LD_INT 4
37106: PUSH
37107: EMPTY
37108: LIST
37109: LIST
37110: PUSH
37111: LD_INT 3
37113: PUSH
37114: LD_INT 4
37116: PUSH
37117: EMPTY
37118: LIST
37119: LIST
37120: PUSH
37121: LD_INT 5
37123: PUSH
37124: LD_INT 4
37126: PUSH
37127: EMPTY
37128: LIST
37129: LIST
37130: PUSH
37131: LD_INT 5
37133: PUSH
37134: LD_INT 5
37136: PUSH
37137: EMPTY
37138: LIST
37139: LIST
37140: PUSH
37141: LD_INT 4
37143: PUSH
37144: LD_INT 5
37146: PUSH
37147: EMPTY
37148: LIST
37149: LIST
37150: PUSH
37151: LD_INT 6
37153: PUSH
37154: LD_INT 5
37156: PUSH
37157: EMPTY
37158: LIST
37159: LIST
37160: PUSH
37161: LD_INT 6
37163: PUSH
37164: LD_INT 6
37166: PUSH
37167: EMPTY
37168: LIST
37169: LIST
37170: PUSH
37171: LD_INT 5
37173: PUSH
37174: LD_INT 6
37176: PUSH
37177: EMPTY
37178: LIST
37179: LIST
37180: PUSH
37181: EMPTY
37182: LIST
37183: LIST
37184: LIST
37185: LIST
37186: LIST
37187: LIST
37188: LIST
37189: LIST
37190: LIST
37191: LIST
37192: LIST
37193: LIST
37194: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
37195: LD_ADDR_VAR 0 32
37199: PUSH
37200: LD_INT 1
37202: PUSH
37203: LD_INT 3
37205: PUSH
37206: EMPTY
37207: LIST
37208: LIST
37209: PUSH
37210: LD_INT 0
37212: PUSH
37213: LD_INT 3
37215: PUSH
37216: EMPTY
37217: LIST
37218: LIST
37219: PUSH
37220: LD_INT 1
37222: NEG
37223: PUSH
37224: LD_INT 2
37226: PUSH
37227: EMPTY
37228: LIST
37229: LIST
37230: PUSH
37231: LD_INT 1
37233: PUSH
37234: LD_INT 4
37236: PUSH
37237: EMPTY
37238: LIST
37239: LIST
37240: PUSH
37241: LD_INT 0
37243: PUSH
37244: LD_INT 4
37246: PUSH
37247: EMPTY
37248: LIST
37249: LIST
37250: PUSH
37251: LD_INT 1
37253: NEG
37254: PUSH
37255: LD_INT 3
37257: PUSH
37258: EMPTY
37259: LIST
37260: LIST
37261: PUSH
37262: LD_INT 1
37264: PUSH
37265: LD_INT 5
37267: PUSH
37268: EMPTY
37269: LIST
37270: LIST
37271: PUSH
37272: LD_INT 0
37274: PUSH
37275: LD_INT 5
37277: PUSH
37278: EMPTY
37279: LIST
37280: LIST
37281: PUSH
37282: LD_INT 1
37284: NEG
37285: PUSH
37286: LD_INT 4
37288: PUSH
37289: EMPTY
37290: LIST
37291: LIST
37292: PUSH
37293: LD_INT 1
37295: PUSH
37296: LD_INT 6
37298: PUSH
37299: EMPTY
37300: LIST
37301: LIST
37302: PUSH
37303: LD_INT 0
37305: PUSH
37306: LD_INT 6
37308: PUSH
37309: EMPTY
37310: LIST
37311: LIST
37312: PUSH
37313: LD_INT 1
37315: NEG
37316: PUSH
37317: LD_INT 5
37319: PUSH
37320: EMPTY
37321: LIST
37322: LIST
37323: PUSH
37324: EMPTY
37325: LIST
37326: LIST
37327: LIST
37328: LIST
37329: LIST
37330: LIST
37331: LIST
37332: LIST
37333: LIST
37334: LIST
37335: LIST
37336: LIST
37337: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
37338: LD_ADDR_VAR 0 33
37342: PUSH
37343: LD_INT 2
37345: NEG
37346: PUSH
37347: LD_INT 1
37349: PUSH
37350: EMPTY
37351: LIST
37352: LIST
37353: PUSH
37354: LD_INT 3
37356: NEG
37357: PUSH
37358: LD_INT 0
37360: PUSH
37361: EMPTY
37362: LIST
37363: LIST
37364: PUSH
37365: LD_INT 3
37367: NEG
37368: PUSH
37369: LD_INT 1
37371: NEG
37372: PUSH
37373: EMPTY
37374: LIST
37375: LIST
37376: PUSH
37377: LD_INT 3
37379: NEG
37380: PUSH
37381: LD_INT 1
37383: PUSH
37384: EMPTY
37385: LIST
37386: LIST
37387: PUSH
37388: LD_INT 4
37390: NEG
37391: PUSH
37392: LD_INT 0
37394: PUSH
37395: EMPTY
37396: LIST
37397: LIST
37398: PUSH
37399: LD_INT 4
37401: NEG
37402: PUSH
37403: LD_INT 1
37405: NEG
37406: PUSH
37407: EMPTY
37408: LIST
37409: LIST
37410: PUSH
37411: LD_INT 4
37413: NEG
37414: PUSH
37415: LD_INT 1
37417: PUSH
37418: EMPTY
37419: LIST
37420: LIST
37421: PUSH
37422: LD_INT 5
37424: NEG
37425: PUSH
37426: LD_INT 0
37428: PUSH
37429: EMPTY
37430: LIST
37431: LIST
37432: PUSH
37433: LD_INT 5
37435: NEG
37436: PUSH
37437: LD_INT 1
37439: NEG
37440: PUSH
37441: EMPTY
37442: LIST
37443: LIST
37444: PUSH
37445: LD_INT 5
37447: NEG
37448: PUSH
37449: LD_INT 1
37451: PUSH
37452: EMPTY
37453: LIST
37454: LIST
37455: PUSH
37456: LD_INT 6
37458: NEG
37459: PUSH
37460: LD_INT 0
37462: PUSH
37463: EMPTY
37464: LIST
37465: LIST
37466: PUSH
37467: LD_INT 6
37469: NEG
37470: PUSH
37471: LD_INT 1
37473: NEG
37474: PUSH
37475: EMPTY
37476: LIST
37477: LIST
37478: PUSH
37479: EMPTY
37480: LIST
37481: LIST
37482: LIST
37483: LIST
37484: LIST
37485: LIST
37486: LIST
37487: LIST
37488: LIST
37489: LIST
37490: LIST
37491: LIST
37492: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
37493: LD_ADDR_VAR 0 34
37497: PUSH
37498: LD_INT 2
37500: NEG
37501: PUSH
37502: LD_INT 3
37504: NEG
37505: PUSH
37506: EMPTY
37507: LIST
37508: LIST
37509: PUSH
37510: LD_INT 3
37512: NEG
37513: PUSH
37514: LD_INT 2
37516: NEG
37517: PUSH
37518: EMPTY
37519: LIST
37520: LIST
37521: PUSH
37522: LD_INT 3
37524: NEG
37525: PUSH
37526: LD_INT 3
37528: NEG
37529: PUSH
37530: EMPTY
37531: LIST
37532: LIST
37533: PUSH
37534: LD_INT 3
37536: NEG
37537: PUSH
37538: LD_INT 4
37540: NEG
37541: PUSH
37542: EMPTY
37543: LIST
37544: LIST
37545: PUSH
37546: LD_INT 4
37548: NEG
37549: PUSH
37550: LD_INT 3
37552: NEG
37553: PUSH
37554: EMPTY
37555: LIST
37556: LIST
37557: PUSH
37558: LD_INT 4
37560: NEG
37561: PUSH
37562: LD_INT 4
37564: NEG
37565: PUSH
37566: EMPTY
37567: LIST
37568: LIST
37569: PUSH
37570: LD_INT 4
37572: NEG
37573: PUSH
37574: LD_INT 5
37576: NEG
37577: PUSH
37578: EMPTY
37579: LIST
37580: LIST
37581: PUSH
37582: LD_INT 5
37584: NEG
37585: PUSH
37586: LD_INT 4
37588: NEG
37589: PUSH
37590: EMPTY
37591: LIST
37592: LIST
37593: PUSH
37594: LD_INT 5
37596: NEG
37597: PUSH
37598: LD_INT 5
37600: NEG
37601: PUSH
37602: EMPTY
37603: LIST
37604: LIST
37605: PUSH
37606: LD_INT 5
37608: NEG
37609: PUSH
37610: LD_INT 6
37612: NEG
37613: PUSH
37614: EMPTY
37615: LIST
37616: LIST
37617: PUSH
37618: LD_INT 6
37620: NEG
37621: PUSH
37622: LD_INT 5
37624: NEG
37625: PUSH
37626: EMPTY
37627: LIST
37628: LIST
37629: PUSH
37630: LD_INT 6
37632: NEG
37633: PUSH
37634: LD_INT 6
37636: NEG
37637: PUSH
37638: EMPTY
37639: LIST
37640: LIST
37641: PUSH
37642: EMPTY
37643: LIST
37644: LIST
37645: LIST
37646: LIST
37647: LIST
37648: LIST
37649: LIST
37650: LIST
37651: LIST
37652: LIST
37653: LIST
37654: LIST
37655: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
37656: LD_ADDR_VAR 0 41
37660: PUSH
37661: LD_INT 0
37663: PUSH
37664: LD_INT 2
37666: NEG
37667: PUSH
37668: EMPTY
37669: LIST
37670: LIST
37671: PUSH
37672: LD_INT 1
37674: NEG
37675: PUSH
37676: LD_INT 3
37678: NEG
37679: PUSH
37680: EMPTY
37681: LIST
37682: LIST
37683: PUSH
37684: LD_INT 1
37686: PUSH
37687: LD_INT 2
37689: NEG
37690: PUSH
37691: EMPTY
37692: LIST
37693: LIST
37694: PUSH
37695: EMPTY
37696: LIST
37697: LIST
37698: LIST
37699: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
37700: LD_ADDR_VAR 0 42
37704: PUSH
37705: LD_INT 2
37707: PUSH
37708: LD_INT 0
37710: PUSH
37711: EMPTY
37712: LIST
37713: LIST
37714: PUSH
37715: LD_INT 2
37717: PUSH
37718: LD_INT 1
37720: NEG
37721: PUSH
37722: EMPTY
37723: LIST
37724: LIST
37725: PUSH
37726: LD_INT 3
37728: PUSH
37729: LD_INT 1
37731: PUSH
37732: EMPTY
37733: LIST
37734: LIST
37735: PUSH
37736: EMPTY
37737: LIST
37738: LIST
37739: LIST
37740: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
37741: LD_ADDR_VAR 0 43
37745: PUSH
37746: LD_INT 2
37748: PUSH
37749: LD_INT 2
37751: PUSH
37752: EMPTY
37753: LIST
37754: LIST
37755: PUSH
37756: LD_INT 3
37758: PUSH
37759: LD_INT 2
37761: PUSH
37762: EMPTY
37763: LIST
37764: LIST
37765: PUSH
37766: LD_INT 2
37768: PUSH
37769: LD_INT 3
37771: PUSH
37772: EMPTY
37773: LIST
37774: LIST
37775: PUSH
37776: EMPTY
37777: LIST
37778: LIST
37779: LIST
37780: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
37781: LD_ADDR_VAR 0 44
37785: PUSH
37786: LD_INT 0
37788: PUSH
37789: LD_INT 2
37791: PUSH
37792: EMPTY
37793: LIST
37794: LIST
37795: PUSH
37796: LD_INT 1
37798: PUSH
37799: LD_INT 3
37801: PUSH
37802: EMPTY
37803: LIST
37804: LIST
37805: PUSH
37806: LD_INT 1
37808: NEG
37809: PUSH
37810: LD_INT 2
37812: PUSH
37813: EMPTY
37814: LIST
37815: LIST
37816: PUSH
37817: EMPTY
37818: LIST
37819: LIST
37820: LIST
37821: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
37822: LD_ADDR_VAR 0 45
37826: PUSH
37827: LD_INT 2
37829: NEG
37830: PUSH
37831: LD_INT 0
37833: PUSH
37834: EMPTY
37835: LIST
37836: LIST
37837: PUSH
37838: LD_INT 2
37840: NEG
37841: PUSH
37842: LD_INT 1
37844: PUSH
37845: EMPTY
37846: LIST
37847: LIST
37848: PUSH
37849: LD_INT 3
37851: NEG
37852: PUSH
37853: LD_INT 1
37855: NEG
37856: PUSH
37857: EMPTY
37858: LIST
37859: LIST
37860: PUSH
37861: EMPTY
37862: LIST
37863: LIST
37864: LIST
37865: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
37866: LD_ADDR_VAR 0 46
37870: PUSH
37871: LD_INT 2
37873: NEG
37874: PUSH
37875: LD_INT 2
37877: NEG
37878: PUSH
37879: EMPTY
37880: LIST
37881: LIST
37882: PUSH
37883: LD_INT 2
37885: NEG
37886: PUSH
37887: LD_INT 3
37889: NEG
37890: PUSH
37891: EMPTY
37892: LIST
37893: LIST
37894: PUSH
37895: LD_INT 3
37897: NEG
37898: PUSH
37899: LD_INT 2
37901: NEG
37902: PUSH
37903: EMPTY
37904: LIST
37905: LIST
37906: PUSH
37907: EMPTY
37908: LIST
37909: LIST
37910: LIST
37911: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
37912: LD_ADDR_VAR 0 47
37916: PUSH
37917: LD_INT 2
37919: NEG
37920: PUSH
37921: LD_INT 3
37923: NEG
37924: PUSH
37925: EMPTY
37926: LIST
37927: LIST
37928: PUSH
37929: LD_INT 1
37931: NEG
37932: PUSH
37933: LD_INT 3
37935: NEG
37936: PUSH
37937: EMPTY
37938: LIST
37939: LIST
37940: PUSH
37941: EMPTY
37942: LIST
37943: LIST
37944: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
37945: LD_ADDR_VAR 0 48
37949: PUSH
37950: LD_INT 1
37952: PUSH
37953: LD_INT 2
37955: NEG
37956: PUSH
37957: EMPTY
37958: LIST
37959: LIST
37960: PUSH
37961: LD_INT 2
37963: PUSH
37964: LD_INT 1
37966: NEG
37967: PUSH
37968: EMPTY
37969: LIST
37970: LIST
37971: PUSH
37972: EMPTY
37973: LIST
37974: LIST
37975: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
37976: LD_ADDR_VAR 0 49
37980: PUSH
37981: LD_INT 3
37983: PUSH
37984: LD_INT 1
37986: PUSH
37987: EMPTY
37988: LIST
37989: LIST
37990: PUSH
37991: LD_INT 3
37993: PUSH
37994: LD_INT 2
37996: PUSH
37997: EMPTY
37998: LIST
37999: LIST
38000: PUSH
38001: EMPTY
38002: LIST
38003: LIST
38004: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
38005: LD_ADDR_VAR 0 50
38009: PUSH
38010: LD_INT 2
38012: PUSH
38013: LD_INT 3
38015: PUSH
38016: EMPTY
38017: LIST
38018: LIST
38019: PUSH
38020: LD_INT 1
38022: PUSH
38023: LD_INT 3
38025: PUSH
38026: EMPTY
38027: LIST
38028: LIST
38029: PUSH
38030: EMPTY
38031: LIST
38032: LIST
38033: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
38034: LD_ADDR_VAR 0 51
38038: PUSH
38039: LD_INT 1
38041: NEG
38042: PUSH
38043: LD_INT 2
38045: PUSH
38046: EMPTY
38047: LIST
38048: LIST
38049: PUSH
38050: LD_INT 2
38052: NEG
38053: PUSH
38054: LD_INT 1
38056: PUSH
38057: EMPTY
38058: LIST
38059: LIST
38060: PUSH
38061: EMPTY
38062: LIST
38063: LIST
38064: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
38065: LD_ADDR_VAR 0 52
38069: PUSH
38070: LD_INT 3
38072: NEG
38073: PUSH
38074: LD_INT 1
38076: NEG
38077: PUSH
38078: EMPTY
38079: LIST
38080: LIST
38081: PUSH
38082: LD_INT 3
38084: NEG
38085: PUSH
38086: LD_INT 2
38088: NEG
38089: PUSH
38090: EMPTY
38091: LIST
38092: LIST
38093: PUSH
38094: EMPTY
38095: LIST
38096: LIST
38097: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
38098: LD_ADDR_VAR 0 53
38102: PUSH
38103: LD_INT 1
38105: NEG
38106: PUSH
38107: LD_INT 3
38109: NEG
38110: PUSH
38111: EMPTY
38112: LIST
38113: LIST
38114: PUSH
38115: LD_INT 0
38117: PUSH
38118: LD_INT 3
38120: NEG
38121: PUSH
38122: EMPTY
38123: LIST
38124: LIST
38125: PUSH
38126: LD_INT 1
38128: PUSH
38129: LD_INT 2
38131: NEG
38132: PUSH
38133: EMPTY
38134: LIST
38135: LIST
38136: PUSH
38137: EMPTY
38138: LIST
38139: LIST
38140: LIST
38141: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
38142: LD_ADDR_VAR 0 54
38146: PUSH
38147: LD_INT 2
38149: PUSH
38150: LD_INT 1
38152: NEG
38153: PUSH
38154: EMPTY
38155: LIST
38156: LIST
38157: PUSH
38158: LD_INT 3
38160: PUSH
38161: LD_INT 0
38163: PUSH
38164: EMPTY
38165: LIST
38166: LIST
38167: PUSH
38168: LD_INT 3
38170: PUSH
38171: LD_INT 1
38173: PUSH
38174: EMPTY
38175: LIST
38176: LIST
38177: PUSH
38178: EMPTY
38179: LIST
38180: LIST
38181: LIST
38182: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
38183: LD_ADDR_VAR 0 55
38187: PUSH
38188: LD_INT 3
38190: PUSH
38191: LD_INT 2
38193: PUSH
38194: EMPTY
38195: LIST
38196: LIST
38197: PUSH
38198: LD_INT 3
38200: PUSH
38201: LD_INT 3
38203: PUSH
38204: EMPTY
38205: LIST
38206: LIST
38207: PUSH
38208: LD_INT 2
38210: PUSH
38211: LD_INT 3
38213: PUSH
38214: EMPTY
38215: LIST
38216: LIST
38217: PUSH
38218: EMPTY
38219: LIST
38220: LIST
38221: LIST
38222: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
38223: LD_ADDR_VAR 0 56
38227: PUSH
38228: LD_INT 1
38230: PUSH
38231: LD_INT 3
38233: PUSH
38234: EMPTY
38235: LIST
38236: LIST
38237: PUSH
38238: LD_INT 0
38240: PUSH
38241: LD_INT 3
38243: PUSH
38244: EMPTY
38245: LIST
38246: LIST
38247: PUSH
38248: LD_INT 1
38250: NEG
38251: PUSH
38252: LD_INT 2
38254: PUSH
38255: EMPTY
38256: LIST
38257: LIST
38258: PUSH
38259: EMPTY
38260: LIST
38261: LIST
38262: LIST
38263: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
38264: LD_ADDR_VAR 0 57
38268: PUSH
38269: LD_INT 2
38271: NEG
38272: PUSH
38273: LD_INT 1
38275: PUSH
38276: EMPTY
38277: LIST
38278: LIST
38279: PUSH
38280: LD_INT 3
38282: NEG
38283: PUSH
38284: LD_INT 0
38286: PUSH
38287: EMPTY
38288: LIST
38289: LIST
38290: PUSH
38291: LD_INT 3
38293: NEG
38294: PUSH
38295: LD_INT 1
38297: NEG
38298: PUSH
38299: EMPTY
38300: LIST
38301: LIST
38302: PUSH
38303: EMPTY
38304: LIST
38305: LIST
38306: LIST
38307: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
38308: LD_ADDR_VAR 0 58
38312: PUSH
38313: LD_INT 2
38315: NEG
38316: PUSH
38317: LD_INT 3
38319: NEG
38320: PUSH
38321: EMPTY
38322: LIST
38323: LIST
38324: PUSH
38325: LD_INT 3
38327: NEG
38328: PUSH
38329: LD_INT 2
38331: NEG
38332: PUSH
38333: EMPTY
38334: LIST
38335: LIST
38336: PUSH
38337: LD_INT 3
38339: NEG
38340: PUSH
38341: LD_INT 3
38343: NEG
38344: PUSH
38345: EMPTY
38346: LIST
38347: LIST
38348: PUSH
38349: EMPTY
38350: LIST
38351: LIST
38352: LIST
38353: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
38354: LD_ADDR_VAR 0 59
38358: PUSH
38359: LD_INT 1
38361: NEG
38362: PUSH
38363: LD_INT 2
38365: NEG
38366: PUSH
38367: EMPTY
38368: LIST
38369: LIST
38370: PUSH
38371: LD_INT 0
38373: PUSH
38374: LD_INT 2
38376: NEG
38377: PUSH
38378: EMPTY
38379: LIST
38380: LIST
38381: PUSH
38382: LD_INT 1
38384: PUSH
38385: LD_INT 1
38387: NEG
38388: PUSH
38389: EMPTY
38390: LIST
38391: LIST
38392: PUSH
38393: EMPTY
38394: LIST
38395: LIST
38396: LIST
38397: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
38398: LD_ADDR_VAR 0 60
38402: PUSH
38403: LD_INT 1
38405: PUSH
38406: LD_INT 1
38408: NEG
38409: PUSH
38410: EMPTY
38411: LIST
38412: LIST
38413: PUSH
38414: LD_INT 2
38416: PUSH
38417: LD_INT 0
38419: PUSH
38420: EMPTY
38421: LIST
38422: LIST
38423: PUSH
38424: LD_INT 2
38426: PUSH
38427: LD_INT 1
38429: PUSH
38430: EMPTY
38431: LIST
38432: LIST
38433: PUSH
38434: EMPTY
38435: LIST
38436: LIST
38437: LIST
38438: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
38439: LD_ADDR_VAR 0 61
38443: PUSH
38444: LD_INT 2
38446: PUSH
38447: LD_INT 1
38449: PUSH
38450: EMPTY
38451: LIST
38452: LIST
38453: PUSH
38454: LD_INT 2
38456: PUSH
38457: LD_INT 2
38459: PUSH
38460: EMPTY
38461: LIST
38462: LIST
38463: PUSH
38464: LD_INT 1
38466: PUSH
38467: LD_INT 2
38469: PUSH
38470: EMPTY
38471: LIST
38472: LIST
38473: PUSH
38474: EMPTY
38475: LIST
38476: LIST
38477: LIST
38478: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
38479: LD_ADDR_VAR 0 62
38483: PUSH
38484: LD_INT 1
38486: PUSH
38487: LD_INT 2
38489: PUSH
38490: EMPTY
38491: LIST
38492: LIST
38493: PUSH
38494: LD_INT 0
38496: PUSH
38497: LD_INT 2
38499: PUSH
38500: EMPTY
38501: LIST
38502: LIST
38503: PUSH
38504: LD_INT 1
38506: NEG
38507: PUSH
38508: LD_INT 1
38510: PUSH
38511: EMPTY
38512: LIST
38513: LIST
38514: PUSH
38515: EMPTY
38516: LIST
38517: LIST
38518: LIST
38519: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
38520: LD_ADDR_VAR 0 63
38524: PUSH
38525: LD_INT 1
38527: NEG
38528: PUSH
38529: LD_INT 1
38531: PUSH
38532: EMPTY
38533: LIST
38534: LIST
38535: PUSH
38536: LD_INT 2
38538: NEG
38539: PUSH
38540: LD_INT 0
38542: PUSH
38543: EMPTY
38544: LIST
38545: LIST
38546: PUSH
38547: LD_INT 2
38549: NEG
38550: PUSH
38551: LD_INT 1
38553: NEG
38554: PUSH
38555: EMPTY
38556: LIST
38557: LIST
38558: PUSH
38559: EMPTY
38560: LIST
38561: LIST
38562: LIST
38563: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38564: LD_ADDR_VAR 0 64
38568: PUSH
38569: LD_INT 1
38571: NEG
38572: PUSH
38573: LD_INT 2
38575: NEG
38576: PUSH
38577: EMPTY
38578: LIST
38579: LIST
38580: PUSH
38581: LD_INT 2
38583: NEG
38584: PUSH
38585: LD_INT 1
38587: NEG
38588: PUSH
38589: EMPTY
38590: LIST
38591: LIST
38592: PUSH
38593: LD_INT 2
38595: NEG
38596: PUSH
38597: LD_INT 2
38599: NEG
38600: PUSH
38601: EMPTY
38602: LIST
38603: LIST
38604: PUSH
38605: EMPTY
38606: LIST
38607: LIST
38608: LIST
38609: ST_TO_ADDR
// end ; 2 :
38610: GO 41876
38612: LD_INT 2
38614: DOUBLE
38615: EQUAL
38616: IFTRUE 38620
38618: GO 41875
38620: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
38621: LD_ADDR_VAR 0 29
38625: PUSH
38626: LD_INT 4
38628: PUSH
38629: LD_INT 0
38631: PUSH
38632: EMPTY
38633: LIST
38634: LIST
38635: PUSH
38636: LD_INT 4
38638: PUSH
38639: LD_INT 1
38641: NEG
38642: PUSH
38643: EMPTY
38644: LIST
38645: LIST
38646: PUSH
38647: LD_INT 5
38649: PUSH
38650: LD_INT 0
38652: PUSH
38653: EMPTY
38654: LIST
38655: LIST
38656: PUSH
38657: LD_INT 5
38659: PUSH
38660: LD_INT 1
38662: PUSH
38663: EMPTY
38664: LIST
38665: LIST
38666: PUSH
38667: LD_INT 4
38669: PUSH
38670: LD_INT 1
38672: PUSH
38673: EMPTY
38674: LIST
38675: LIST
38676: PUSH
38677: LD_INT 3
38679: PUSH
38680: LD_INT 0
38682: PUSH
38683: EMPTY
38684: LIST
38685: LIST
38686: PUSH
38687: LD_INT 3
38689: PUSH
38690: LD_INT 1
38692: NEG
38693: PUSH
38694: EMPTY
38695: LIST
38696: LIST
38697: PUSH
38698: LD_INT 3
38700: PUSH
38701: LD_INT 2
38703: NEG
38704: PUSH
38705: EMPTY
38706: LIST
38707: LIST
38708: PUSH
38709: LD_INT 5
38711: PUSH
38712: LD_INT 2
38714: PUSH
38715: EMPTY
38716: LIST
38717: LIST
38718: PUSH
38719: LD_INT 3
38721: PUSH
38722: LD_INT 3
38724: PUSH
38725: EMPTY
38726: LIST
38727: LIST
38728: PUSH
38729: LD_INT 3
38731: PUSH
38732: LD_INT 2
38734: PUSH
38735: EMPTY
38736: LIST
38737: LIST
38738: PUSH
38739: LD_INT 4
38741: PUSH
38742: LD_INT 3
38744: PUSH
38745: EMPTY
38746: LIST
38747: LIST
38748: PUSH
38749: LD_INT 4
38751: PUSH
38752: LD_INT 4
38754: PUSH
38755: EMPTY
38756: LIST
38757: LIST
38758: PUSH
38759: LD_INT 3
38761: PUSH
38762: LD_INT 4
38764: PUSH
38765: EMPTY
38766: LIST
38767: LIST
38768: PUSH
38769: LD_INT 2
38771: PUSH
38772: LD_INT 3
38774: PUSH
38775: EMPTY
38776: LIST
38777: LIST
38778: PUSH
38779: LD_INT 2
38781: PUSH
38782: LD_INT 2
38784: PUSH
38785: EMPTY
38786: LIST
38787: LIST
38788: PUSH
38789: LD_INT 4
38791: PUSH
38792: LD_INT 2
38794: PUSH
38795: EMPTY
38796: LIST
38797: LIST
38798: PUSH
38799: LD_INT 2
38801: PUSH
38802: LD_INT 4
38804: PUSH
38805: EMPTY
38806: LIST
38807: LIST
38808: PUSH
38809: LD_INT 0
38811: PUSH
38812: LD_INT 4
38814: PUSH
38815: EMPTY
38816: LIST
38817: LIST
38818: PUSH
38819: LD_INT 0
38821: PUSH
38822: LD_INT 3
38824: PUSH
38825: EMPTY
38826: LIST
38827: LIST
38828: PUSH
38829: LD_INT 1
38831: PUSH
38832: LD_INT 4
38834: PUSH
38835: EMPTY
38836: LIST
38837: LIST
38838: PUSH
38839: LD_INT 1
38841: PUSH
38842: LD_INT 5
38844: PUSH
38845: EMPTY
38846: LIST
38847: LIST
38848: PUSH
38849: LD_INT 0
38851: PUSH
38852: LD_INT 5
38854: PUSH
38855: EMPTY
38856: LIST
38857: LIST
38858: PUSH
38859: LD_INT 1
38861: NEG
38862: PUSH
38863: LD_INT 4
38865: PUSH
38866: EMPTY
38867: LIST
38868: LIST
38869: PUSH
38870: LD_INT 1
38872: NEG
38873: PUSH
38874: LD_INT 3
38876: PUSH
38877: EMPTY
38878: LIST
38879: LIST
38880: PUSH
38881: LD_INT 2
38883: PUSH
38884: LD_INT 5
38886: PUSH
38887: EMPTY
38888: LIST
38889: LIST
38890: PUSH
38891: LD_INT 2
38893: NEG
38894: PUSH
38895: LD_INT 3
38897: PUSH
38898: EMPTY
38899: LIST
38900: LIST
38901: PUSH
38902: LD_INT 3
38904: NEG
38905: PUSH
38906: LD_INT 0
38908: PUSH
38909: EMPTY
38910: LIST
38911: LIST
38912: PUSH
38913: LD_INT 3
38915: NEG
38916: PUSH
38917: LD_INT 1
38919: NEG
38920: PUSH
38921: EMPTY
38922: LIST
38923: LIST
38924: PUSH
38925: LD_INT 2
38927: NEG
38928: PUSH
38929: LD_INT 0
38931: PUSH
38932: EMPTY
38933: LIST
38934: LIST
38935: PUSH
38936: LD_INT 2
38938: NEG
38939: PUSH
38940: LD_INT 1
38942: PUSH
38943: EMPTY
38944: LIST
38945: LIST
38946: PUSH
38947: LD_INT 3
38949: NEG
38950: PUSH
38951: LD_INT 1
38953: PUSH
38954: EMPTY
38955: LIST
38956: LIST
38957: PUSH
38958: LD_INT 4
38960: NEG
38961: PUSH
38962: LD_INT 0
38964: PUSH
38965: EMPTY
38966: LIST
38967: LIST
38968: PUSH
38969: LD_INT 4
38971: NEG
38972: PUSH
38973: LD_INT 1
38975: NEG
38976: PUSH
38977: EMPTY
38978: LIST
38979: LIST
38980: PUSH
38981: LD_INT 4
38983: NEG
38984: PUSH
38985: LD_INT 2
38987: NEG
38988: PUSH
38989: EMPTY
38990: LIST
38991: LIST
38992: PUSH
38993: LD_INT 2
38995: NEG
38996: PUSH
38997: LD_INT 2
38999: PUSH
39000: EMPTY
39001: LIST
39002: LIST
39003: PUSH
39004: LD_INT 4
39006: NEG
39007: PUSH
39008: LD_INT 4
39010: NEG
39011: PUSH
39012: EMPTY
39013: LIST
39014: LIST
39015: PUSH
39016: LD_INT 4
39018: NEG
39019: PUSH
39020: LD_INT 5
39022: NEG
39023: PUSH
39024: EMPTY
39025: LIST
39026: LIST
39027: PUSH
39028: LD_INT 3
39030: NEG
39031: PUSH
39032: LD_INT 4
39034: NEG
39035: PUSH
39036: EMPTY
39037: LIST
39038: LIST
39039: PUSH
39040: LD_INT 3
39042: NEG
39043: PUSH
39044: LD_INT 3
39046: NEG
39047: PUSH
39048: EMPTY
39049: LIST
39050: LIST
39051: PUSH
39052: LD_INT 4
39054: NEG
39055: PUSH
39056: LD_INT 3
39058: NEG
39059: PUSH
39060: EMPTY
39061: LIST
39062: LIST
39063: PUSH
39064: LD_INT 5
39066: NEG
39067: PUSH
39068: LD_INT 4
39070: NEG
39071: PUSH
39072: EMPTY
39073: LIST
39074: LIST
39075: PUSH
39076: LD_INT 5
39078: NEG
39079: PUSH
39080: LD_INT 5
39082: NEG
39083: PUSH
39084: EMPTY
39085: LIST
39086: LIST
39087: PUSH
39088: LD_INT 3
39090: NEG
39091: PUSH
39092: LD_INT 5
39094: NEG
39095: PUSH
39096: EMPTY
39097: LIST
39098: LIST
39099: PUSH
39100: LD_INT 5
39102: NEG
39103: PUSH
39104: LD_INT 3
39106: NEG
39107: PUSH
39108: EMPTY
39109: LIST
39110: LIST
39111: PUSH
39112: EMPTY
39113: LIST
39114: LIST
39115: LIST
39116: LIST
39117: LIST
39118: LIST
39119: LIST
39120: LIST
39121: LIST
39122: LIST
39123: LIST
39124: LIST
39125: LIST
39126: LIST
39127: LIST
39128: LIST
39129: LIST
39130: LIST
39131: LIST
39132: LIST
39133: LIST
39134: LIST
39135: LIST
39136: LIST
39137: LIST
39138: LIST
39139: LIST
39140: LIST
39141: LIST
39142: LIST
39143: LIST
39144: LIST
39145: LIST
39146: LIST
39147: LIST
39148: LIST
39149: LIST
39150: LIST
39151: LIST
39152: LIST
39153: LIST
39154: LIST
39155: LIST
39156: LIST
39157: LIST
39158: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
39159: LD_ADDR_VAR 0 30
39163: PUSH
39164: LD_INT 4
39166: PUSH
39167: LD_INT 4
39169: PUSH
39170: EMPTY
39171: LIST
39172: LIST
39173: PUSH
39174: LD_INT 4
39176: PUSH
39177: LD_INT 3
39179: PUSH
39180: EMPTY
39181: LIST
39182: LIST
39183: PUSH
39184: LD_INT 5
39186: PUSH
39187: LD_INT 4
39189: PUSH
39190: EMPTY
39191: LIST
39192: LIST
39193: PUSH
39194: LD_INT 5
39196: PUSH
39197: LD_INT 5
39199: PUSH
39200: EMPTY
39201: LIST
39202: LIST
39203: PUSH
39204: LD_INT 4
39206: PUSH
39207: LD_INT 5
39209: PUSH
39210: EMPTY
39211: LIST
39212: LIST
39213: PUSH
39214: LD_INT 3
39216: PUSH
39217: LD_INT 4
39219: PUSH
39220: EMPTY
39221: LIST
39222: LIST
39223: PUSH
39224: LD_INT 3
39226: PUSH
39227: LD_INT 3
39229: PUSH
39230: EMPTY
39231: LIST
39232: LIST
39233: PUSH
39234: LD_INT 5
39236: PUSH
39237: LD_INT 3
39239: PUSH
39240: EMPTY
39241: LIST
39242: LIST
39243: PUSH
39244: LD_INT 3
39246: PUSH
39247: LD_INT 5
39249: PUSH
39250: EMPTY
39251: LIST
39252: LIST
39253: PUSH
39254: LD_INT 0
39256: PUSH
39257: LD_INT 3
39259: PUSH
39260: EMPTY
39261: LIST
39262: LIST
39263: PUSH
39264: LD_INT 0
39266: PUSH
39267: LD_INT 2
39269: PUSH
39270: EMPTY
39271: LIST
39272: LIST
39273: PUSH
39274: LD_INT 1
39276: PUSH
39277: LD_INT 3
39279: PUSH
39280: EMPTY
39281: LIST
39282: LIST
39283: PUSH
39284: LD_INT 1
39286: PUSH
39287: LD_INT 4
39289: PUSH
39290: EMPTY
39291: LIST
39292: LIST
39293: PUSH
39294: LD_INT 0
39296: PUSH
39297: LD_INT 4
39299: PUSH
39300: EMPTY
39301: LIST
39302: LIST
39303: PUSH
39304: LD_INT 1
39306: NEG
39307: PUSH
39308: LD_INT 3
39310: PUSH
39311: EMPTY
39312: LIST
39313: LIST
39314: PUSH
39315: LD_INT 1
39317: NEG
39318: PUSH
39319: LD_INT 2
39321: PUSH
39322: EMPTY
39323: LIST
39324: LIST
39325: PUSH
39326: LD_INT 2
39328: PUSH
39329: LD_INT 4
39331: PUSH
39332: EMPTY
39333: LIST
39334: LIST
39335: PUSH
39336: LD_INT 2
39338: NEG
39339: PUSH
39340: LD_INT 2
39342: PUSH
39343: EMPTY
39344: LIST
39345: LIST
39346: PUSH
39347: LD_INT 4
39349: NEG
39350: PUSH
39351: LD_INT 0
39353: PUSH
39354: EMPTY
39355: LIST
39356: LIST
39357: PUSH
39358: LD_INT 4
39360: NEG
39361: PUSH
39362: LD_INT 1
39364: NEG
39365: PUSH
39366: EMPTY
39367: LIST
39368: LIST
39369: PUSH
39370: LD_INT 3
39372: NEG
39373: PUSH
39374: LD_INT 0
39376: PUSH
39377: EMPTY
39378: LIST
39379: LIST
39380: PUSH
39381: LD_INT 3
39383: NEG
39384: PUSH
39385: LD_INT 1
39387: PUSH
39388: EMPTY
39389: LIST
39390: LIST
39391: PUSH
39392: LD_INT 4
39394: NEG
39395: PUSH
39396: LD_INT 1
39398: PUSH
39399: EMPTY
39400: LIST
39401: LIST
39402: PUSH
39403: LD_INT 5
39405: NEG
39406: PUSH
39407: LD_INT 0
39409: PUSH
39410: EMPTY
39411: LIST
39412: LIST
39413: PUSH
39414: LD_INT 5
39416: NEG
39417: PUSH
39418: LD_INT 1
39420: NEG
39421: PUSH
39422: EMPTY
39423: LIST
39424: LIST
39425: PUSH
39426: LD_INT 5
39428: NEG
39429: PUSH
39430: LD_INT 2
39432: NEG
39433: PUSH
39434: EMPTY
39435: LIST
39436: LIST
39437: PUSH
39438: LD_INT 3
39440: NEG
39441: PUSH
39442: LD_INT 2
39444: PUSH
39445: EMPTY
39446: LIST
39447: LIST
39448: PUSH
39449: LD_INT 3
39451: NEG
39452: PUSH
39453: LD_INT 3
39455: NEG
39456: PUSH
39457: EMPTY
39458: LIST
39459: LIST
39460: PUSH
39461: LD_INT 3
39463: NEG
39464: PUSH
39465: LD_INT 4
39467: NEG
39468: PUSH
39469: EMPTY
39470: LIST
39471: LIST
39472: PUSH
39473: LD_INT 2
39475: NEG
39476: PUSH
39477: LD_INT 3
39479: NEG
39480: PUSH
39481: EMPTY
39482: LIST
39483: LIST
39484: PUSH
39485: LD_INT 2
39487: NEG
39488: PUSH
39489: LD_INT 2
39491: NEG
39492: PUSH
39493: EMPTY
39494: LIST
39495: LIST
39496: PUSH
39497: LD_INT 3
39499: NEG
39500: PUSH
39501: LD_INT 2
39503: NEG
39504: PUSH
39505: EMPTY
39506: LIST
39507: LIST
39508: PUSH
39509: LD_INT 4
39511: NEG
39512: PUSH
39513: LD_INT 3
39515: NEG
39516: PUSH
39517: EMPTY
39518: LIST
39519: LIST
39520: PUSH
39521: LD_INT 4
39523: NEG
39524: PUSH
39525: LD_INT 4
39527: NEG
39528: PUSH
39529: EMPTY
39530: LIST
39531: LIST
39532: PUSH
39533: LD_INT 2
39535: NEG
39536: PUSH
39537: LD_INT 4
39539: NEG
39540: PUSH
39541: EMPTY
39542: LIST
39543: LIST
39544: PUSH
39545: LD_INT 4
39547: NEG
39548: PUSH
39549: LD_INT 2
39551: NEG
39552: PUSH
39553: EMPTY
39554: LIST
39555: LIST
39556: PUSH
39557: LD_INT 0
39559: PUSH
39560: LD_INT 4
39562: NEG
39563: PUSH
39564: EMPTY
39565: LIST
39566: LIST
39567: PUSH
39568: LD_INT 0
39570: PUSH
39571: LD_INT 5
39573: NEG
39574: PUSH
39575: EMPTY
39576: LIST
39577: LIST
39578: PUSH
39579: LD_INT 1
39581: PUSH
39582: LD_INT 4
39584: NEG
39585: PUSH
39586: EMPTY
39587: LIST
39588: LIST
39589: PUSH
39590: LD_INT 1
39592: PUSH
39593: LD_INT 3
39595: NEG
39596: PUSH
39597: EMPTY
39598: LIST
39599: LIST
39600: PUSH
39601: LD_INT 0
39603: PUSH
39604: LD_INT 3
39606: NEG
39607: PUSH
39608: EMPTY
39609: LIST
39610: LIST
39611: PUSH
39612: LD_INT 1
39614: NEG
39615: PUSH
39616: LD_INT 4
39618: NEG
39619: PUSH
39620: EMPTY
39621: LIST
39622: LIST
39623: PUSH
39624: LD_INT 1
39626: NEG
39627: PUSH
39628: LD_INT 5
39630: NEG
39631: PUSH
39632: EMPTY
39633: LIST
39634: LIST
39635: PUSH
39636: LD_INT 2
39638: PUSH
39639: LD_INT 3
39641: NEG
39642: PUSH
39643: EMPTY
39644: LIST
39645: LIST
39646: PUSH
39647: LD_INT 2
39649: NEG
39650: PUSH
39651: LD_INT 5
39653: NEG
39654: PUSH
39655: EMPTY
39656: LIST
39657: LIST
39658: PUSH
39659: EMPTY
39660: LIST
39661: LIST
39662: LIST
39663: LIST
39664: LIST
39665: LIST
39666: LIST
39667: LIST
39668: LIST
39669: LIST
39670: LIST
39671: LIST
39672: LIST
39673: LIST
39674: LIST
39675: LIST
39676: LIST
39677: LIST
39678: LIST
39679: LIST
39680: LIST
39681: LIST
39682: LIST
39683: LIST
39684: LIST
39685: LIST
39686: LIST
39687: LIST
39688: LIST
39689: LIST
39690: LIST
39691: LIST
39692: LIST
39693: LIST
39694: LIST
39695: LIST
39696: LIST
39697: LIST
39698: LIST
39699: LIST
39700: LIST
39701: LIST
39702: LIST
39703: LIST
39704: LIST
39705: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
39706: LD_ADDR_VAR 0 31
39710: PUSH
39711: LD_INT 0
39713: PUSH
39714: LD_INT 4
39716: PUSH
39717: EMPTY
39718: LIST
39719: LIST
39720: PUSH
39721: LD_INT 0
39723: PUSH
39724: LD_INT 3
39726: PUSH
39727: EMPTY
39728: LIST
39729: LIST
39730: PUSH
39731: LD_INT 1
39733: PUSH
39734: LD_INT 4
39736: PUSH
39737: EMPTY
39738: LIST
39739: LIST
39740: PUSH
39741: LD_INT 1
39743: PUSH
39744: LD_INT 5
39746: PUSH
39747: EMPTY
39748: LIST
39749: LIST
39750: PUSH
39751: LD_INT 0
39753: PUSH
39754: LD_INT 5
39756: PUSH
39757: EMPTY
39758: LIST
39759: LIST
39760: PUSH
39761: LD_INT 1
39763: NEG
39764: PUSH
39765: LD_INT 4
39767: PUSH
39768: EMPTY
39769: LIST
39770: LIST
39771: PUSH
39772: LD_INT 1
39774: NEG
39775: PUSH
39776: LD_INT 3
39778: PUSH
39779: EMPTY
39780: LIST
39781: LIST
39782: PUSH
39783: LD_INT 2
39785: PUSH
39786: LD_INT 5
39788: PUSH
39789: EMPTY
39790: LIST
39791: LIST
39792: PUSH
39793: LD_INT 2
39795: NEG
39796: PUSH
39797: LD_INT 3
39799: PUSH
39800: EMPTY
39801: LIST
39802: LIST
39803: PUSH
39804: LD_INT 3
39806: NEG
39807: PUSH
39808: LD_INT 0
39810: PUSH
39811: EMPTY
39812: LIST
39813: LIST
39814: PUSH
39815: LD_INT 3
39817: NEG
39818: PUSH
39819: LD_INT 1
39821: NEG
39822: PUSH
39823: EMPTY
39824: LIST
39825: LIST
39826: PUSH
39827: LD_INT 2
39829: NEG
39830: PUSH
39831: LD_INT 0
39833: PUSH
39834: EMPTY
39835: LIST
39836: LIST
39837: PUSH
39838: LD_INT 2
39840: NEG
39841: PUSH
39842: LD_INT 1
39844: PUSH
39845: EMPTY
39846: LIST
39847: LIST
39848: PUSH
39849: LD_INT 3
39851: NEG
39852: PUSH
39853: LD_INT 1
39855: PUSH
39856: EMPTY
39857: LIST
39858: LIST
39859: PUSH
39860: LD_INT 4
39862: NEG
39863: PUSH
39864: LD_INT 0
39866: PUSH
39867: EMPTY
39868: LIST
39869: LIST
39870: PUSH
39871: LD_INT 4
39873: NEG
39874: PUSH
39875: LD_INT 1
39877: NEG
39878: PUSH
39879: EMPTY
39880: LIST
39881: LIST
39882: PUSH
39883: LD_INT 4
39885: NEG
39886: PUSH
39887: LD_INT 2
39889: NEG
39890: PUSH
39891: EMPTY
39892: LIST
39893: LIST
39894: PUSH
39895: LD_INT 2
39897: NEG
39898: PUSH
39899: LD_INT 2
39901: PUSH
39902: EMPTY
39903: LIST
39904: LIST
39905: PUSH
39906: LD_INT 4
39908: NEG
39909: PUSH
39910: LD_INT 4
39912: NEG
39913: PUSH
39914: EMPTY
39915: LIST
39916: LIST
39917: PUSH
39918: LD_INT 4
39920: NEG
39921: PUSH
39922: LD_INT 5
39924: NEG
39925: PUSH
39926: EMPTY
39927: LIST
39928: LIST
39929: PUSH
39930: LD_INT 3
39932: NEG
39933: PUSH
39934: LD_INT 4
39936: NEG
39937: PUSH
39938: EMPTY
39939: LIST
39940: LIST
39941: PUSH
39942: LD_INT 3
39944: NEG
39945: PUSH
39946: LD_INT 3
39948: NEG
39949: PUSH
39950: EMPTY
39951: LIST
39952: LIST
39953: PUSH
39954: LD_INT 4
39956: NEG
39957: PUSH
39958: LD_INT 3
39960: NEG
39961: PUSH
39962: EMPTY
39963: LIST
39964: LIST
39965: PUSH
39966: LD_INT 5
39968: NEG
39969: PUSH
39970: LD_INT 4
39972: NEG
39973: PUSH
39974: EMPTY
39975: LIST
39976: LIST
39977: PUSH
39978: LD_INT 5
39980: NEG
39981: PUSH
39982: LD_INT 5
39984: NEG
39985: PUSH
39986: EMPTY
39987: LIST
39988: LIST
39989: PUSH
39990: LD_INT 3
39992: NEG
39993: PUSH
39994: LD_INT 5
39996: NEG
39997: PUSH
39998: EMPTY
39999: LIST
40000: LIST
40001: PUSH
40002: LD_INT 5
40004: NEG
40005: PUSH
40006: LD_INT 3
40008: NEG
40009: PUSH
40010: EMPTY
40011: LIST
40012: LIST
40013: PUSH
40014: LD_INT 0
40016: PUSH
40017: LD_INT 3
40019: NEG
40020: PUSH
40021: EMPTY
40022: LIST
40023: LIST
40024: PUSH
40025: LD_INT 0
40027: PUSH
40028: LD_INT 4
40030: NEG
40031: PUSH
40032: EMPTY
40033: LIST
40034: LIST
40035: PUSH
40036: LD_INT 1
40038: PUSH
40039: LD_INT 3
40041: NEG
40042: PUSH
40043: EMPTY
40044: LIST
40045: LIST
40046: PUSH
40047: LD_INT 1
40049: PUSH
40050: LD_INT 2
40052: NEG
40053: PUSH
40054: EMPTY
40055: LIST
40056: LIST
40057: PUSH
40058: LD_INT 0
40060: PUSH
40061: LD_INT 2
40063: NEG
40064: PUSH
40065: EMPTY
40066: LIST
40067: LIST
40068: PUSH
40069: LD_INT 1
40071: NEG
40072: PUSH
40073: LD_INT 3
40075: NEG
40076: PUSH
40077: EMPTY
40078: LIST
40079: LIST
40080: PUSH
40081: LD_INT 1
40083: NEG
40084: PUSH
40085: LD_INT 4
40087: NEG
40088: PUSH
40089: EMPTY
40090: LIST
40091: LIST
40092: PUSH
40093: LD_INT 2
40095: PUSH
40096: LD_INT 2
40098: NEG
40099: PUSH
40100: EMPTY
40101: LIST
40102: LIST
40103: PUSH
40104: LD_INT 2
40106: NEG
40107: PUSH
40108: LD_INT 4
40110: NEG
40111: PUSH
40112: EMPTY
40113: LIST
40114: LIST
40115: PUSH
40116: LD_INT 4
40118: PUSH
40119: LD_INT 0
40121: PUSH
40122: EMPTY
40123: LIST
40124: LIST
40125: PUSH
40126: LD_INT 4
40128: PUSH
40129: LD_INT 1
40131: NEG
40132: PUSH
40133: EMPTY
40134: LIST
40135: LIST
40136: PUSH
40137: LD_INT 5
40139: PUSH
40140: LD_INT 0
40142: PUSH
40143: EMPTY
40144: LIST
40145: LIST
40146: PUSH
40147: LD_INT 5
40149: PUSH
40150: LD_INT 1
40152: PUSH
40153: EMPTY
40154: LIST
40155: LIST
40156: PUSH
40157: LD_INT 4
40159: PUSH
40160: LD_INT 1
40162: PUSH
40163: EMPTY
40164: LIST
40165: LIST
40166: PUSH
40167: LD_INT 3
40169: PUSH
40170: LD_INT 0
40172: PUSH
40173: EMPTY
40174: LIST
40175: LIST
40176: PUSH
40177: LD_INT 3
40179: PUSH
40180: LD_INT 1
40182: NEG
40183: PUSH
40184: EMPTY
40185: LIST
40186: LIST
40187: PUSH
40188: LD_INT 3
40190: PUSH
40191: LD_INT 2
40193: NEG
40194: PUSH
40195: EMPTY
40196: LIST
40197: LIST
40198: PUSH
40199: LD_INT 5
40201: PUSH
40202: LD_INT 2
40204: PUSH
40205: EMPTY
40206: LIST
40207: LIST
40208: PUSH
40209: EMPTY
40210: LIST
40211: LIST
40212: LIST
40213: LIST
40214: LIST
40215: LIST
40216: LIST
40217: LIST
40218: LIST
40219: LIST
40220: LIST
40221: LIST
40222: LIST
40223: LIST
40224: LIST
40225: LIST
40226: LIST
40227: LIST
40228: LIST
40229: LIST
40230: LIST
40231: LIST
40232: LIST
40233: LIST
40234: LIST
40235: LIST
40236: LIST
40237: LIST
40238: LIST
40239: LIST
40240: LIST
40241: LIST
40242: LIST
40243: LIST
40244: LIST
40245: LIST
40246: LIST
40247: LIST
40248: LIST
40249: LIST
40250: LIST
40251: LIST
40252: LIST
40253: LIST
40254: LIST
40255: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
40256: LD_ADDR_VAR 0 32
40260: PUSH
40261: LD_INT 4
40263: NEG
40264: PUSH
40265: LD_INT 0
40267: PUSH
40268: EMPTY
40269: LIST
40270: LIST
40271: PUSH
40272: LD_INT 4
40274: NEG
40275: PUSH
40276: LD_INT 1
40278: NEG
40279: PUSH
40280: EMPTY
40281: LIST
40282: LIST
40283: PUSH
40284: LD_INT 3
40286: NEG
40287: PUSH
40288: LD_INT 0
40290: PUSH
40291: EMPTY
40292: LIST
40293: LIST
40294: PUSH
40295: LD_INT 3
40297: NEG
40298: PUSH
40299: LD_INT 1
40301: PUSH
40302: EMPTY
40303: LIST
40304: LIST
40305: PUSH
40306: LD_INT 4
40308: NEG
40309: PUSH
40310: LD_INT 1
40312: PUSH
40313: EMPTY
40314: LIST
40315: LIST
40316: PUSH
40317: LD_INT 5
40319: NEG
40320: PUSH
40321: LD_INT 0
40323: PUSH
40324: EMPTY
40325: LIST
40326: LIST
40327: PUSH
40328: LD_INT 5
40330: NEG
40331: PUSH
40332: LD_INT 1
40334: NEG
40335: PUSH
40336: EMPTY
40337: LIST
40338: LIST
40339: PUSH
40340: LD_INT 5
40342: NEG
40343: PUSH
40344: LD_INT 2
40346: NEG
40347: PUSH
40348: EMPTY
40349: LIST
40350: LIST
40351: PUSH
40352: LD_INT 3
40354: NEG
40355: PUSH
40356: LD_INT 2
40358: PUSH
40359: EMPTY
40360: LIST
40361: LIST
40362: PUSH
40363: LD_INT 3
40365: NEG
40366: PUSH
40367: LD_INT 3
40369: NEG
40370: PUSH
40371: EMPTY
40372: LIST
40373: LIST
40374: PUSH
40375: LD_INT 3
40377: NEG
40378: PUSH
40379: LD_INT 4
40381: NEG
40382: PUSH
40383: EMPTY
40384: LIST
40385: LIST
40386: PUSH
40387: LD_INT 2
40389: NEG
40390: PUSH
40391: LD_INT 3
40393: NEG
40394: PUSH
40395: EMPTY
40396: LIST
40397: LIST
40398: PUSH
40399: LD_INT 2
40401: NEG
40402: PUSH
40403: LD_INT 2
40405: NEG
40406: PUSH
40407: EMPTY
40408: LIST
40409: LIST
40410: PUSH
40411: LD_INT 3
40413: NEG
40414: PUSH
40415: LD_INT 2
40417: NEG
40418: PUSH
40419: EMPTY
40420: LIST
40421: LIST
40422: PUSH
40423: LD_INT 4
40425: NEG
40426: PUSH
40427: LD_INT 3
40429: NEG
40430: PUSH
40431: EMPTY
40432: LIST
40433: LIST
40434: PUSH
40435: LD_INT 4
40437: NEG
40438: PUSH
40439: LD_INT 4
40441: NEG
40442: PUSH
40443: EMPTY
40444: LIST
40445: LIST
40446: PUSH
40447: LD_INT 2
40449: NEG
40450: PUSH
40451: LD_INT 4
40453: NEG
40454: PUSH
40455: EMPTY
40456: LIST
40457: LIST
40458: PUSH
40459: LD_INT 4
40461: NEG
40462: PUSH
40463: LD_INT 2
40465: NEG
40466: PUSH
40467: EMPTY
40468: LIST
40469: LIST
40470: PUSH
40471: LD_INT 0
40473: PUSH
40474: LD_INT 4
40476: NEG
40477: PUSH
40478: EMPTY
40479: LIST
40480: LIST
40481: PUSH
40482: LD_INT 0
40484: PUSH
40485: LD_INT 5
40487: NEG
40488: PUSH
40489: EMPTY
40490: LIST
40491: LIST
40492: PUSH
40493: LD_INT 1
40495: PUSH
40496: LD_INT 4
40498: NEG
40499: PUSH
40500: EMPTY
40501: LIST
40502: LIST
40503: PUSH
40504: LD_INT 1
40506: PUSH
40507: LD_INT 3
40509: NEG
40510: PUSH
40511: EMPTY
40512: LIST
40513: LIST
40514: PUSH
40515: LD_INT 0
40517: PUSH
40518: LD_INT 3
40520: NEG
40521: PUSH
40522: EMPTY
40523: LIST
40524: LIST
40525: PUSH
40526: LD_INT 1
40528: NEG
40529: PUSH
40530: LD_INT 4
40532: NEG
40533: PUSH
40534: EMPTY
40535: LIST
40536: LIST
40537: PUSH
40538: LD_INT 1
40540: NEG
40541: PUSH
40542: LD_INT 5
40544: NEG
40545: PUSH
40546: EMPTY
40547: LIST
40548: LIST
40549: PUSH
40550: LD_INT 2
40552: PUSH
40553: LD_INT 3
40555: NEG
40556: PUSH
40557: EMPTY
40558: LIST
40559: LIST
40560: PUSH
40561: LD_INT 2
40563: NEG
40564: PUSH
40565: LD_INT 5
40567: NEG
40568: PUSH
40569: EMPTY
40570: LIST
40571: LIST
40572: PUSH
40573: LD_INT 3
40575: PUSH
40576: LD_INT 0
40578: PUSH
40579: EMPTY
40580: LIST
40581: LIST
40582: PUSH
40583: LD_INT 3
40585: PUSH
40586: LD_INT 1
40588: NEG
40589: PUSH
40590: EMPTY
40591: LIST
40592: LIST
40593: PUSH
40594: LD_INT 4
40596: PUSH
40597: LD_INT 0
40599: PUSH
40600: EMPTY
40601: LIST
40602: LIST
40603: PUSH
40604: LD_INT 4
40606: PUSH
40607: LD_INT 1
40609: PUSH
40610: EMPTY
40611: LIST
40612: LIST
40613: PUSH
40614: LD_INT 3
40616: PUSH
40617: LD_INT 1
40619: PUSH
40620: EMPTY
40621: LIST
40622: LIST
40623: PUSH
40624: LD_INT 2
40626: PUSH
40627: LD_INT 0
40629: PUSH
40630: EMPTY
40631: LIST
40632: LIST
40633: PUSH
40634: LD_INT 2
40636: PUSH
40637: LD_INT 1
40639: NEG
40640: PUSH
40641: EMPTY
40642: LIST
40643: LIST
40644: PUSH
40645: LD_INT 2
40647: PUSH
40648: LD_INT 2
40650: NEG
40651: PUSH
40652: EMPTY
40653: LIST
40654: LIST
40655: PUSH
40656: LD_INT 4
40658: PUSH
40659: LD_INT 2
40661: PUSH
40662: EMPTY
40663: LIST
40664: LIST
40665: PUSH
40666: LD_INT 4
40668: PUSH
40669: LD_INT 4
40671: PUSH
40672: EMPTY
40673: LIST
40674: LIST
40675: PUSH
40676: LD_INT 4
40678: PUSH
40679: LD_INT 3
40681: PUSH
40682: EMPTY
40683: LIST
40684: LIST
40685: PUSH
40686: LD_INT 5
40688: PUSH
40689: LD_INT 4
40691: PUSH
40692: EMPTY
40693: LIST
40694: LIST
40695: PUSH
40696: LD_INT 5
40698: PUSH
40699: LD_INT 5
40701: PUSH
40702: EMPTY
40703: LIST
40704: LIST
40705: PUSH
40706: LD_INT 4
40708: PUSH
40709: LD_INT 5
40711: PUSH
40712: EMPTY
40713: LIST
40714: LIST
40715: PUSH
40716: LD_INT 3
40718: PUSH
40719: LD_INT 4
40721: PUSH
40722: EMPTY
40723: LIST
40724: LIST
40725: PUSH
40726: LD_INT 3
40728: PUSH
40729: LD_INT 3
40731: PUSH
40732: EMPTY
40733: LIST
40734: LIST
40735: PUSH
40736: LD_INT 5
40738: PUSH
40739: LD_INT 3
40741: PUSH
40742: EMPTY
40743: LIST
40744: LIST
40745: PUSH
40746: LD_INT 3
40748: PUSH
40749: LD_INT 5
40751: PUSH
40752: EMPTY
40753: LIST
40754: LIST
40755: PUSH
40756: EMPTY
40757: LIST
40758: LIST
40759: LIST
40760: LIST
40761: LIST
40762: LIST
40763: LIST
40764: LIST
40765: LIST
40766: LIST
40767: LIST
40768: LIST
40769: LIST
40770: LIST
40771: LIST
40772: LIST
40773: LIST
40774: LIST
40775: LIST
40776: LIST
40777: LIST
40778: LIST
40779: LIST
40780: LIST
40781: LIST
40782: LIST
40783: LIST
40784: LIST
40785: LIST
40786: LIST
40787: LIST
40788: LIST
40789: LIST
40790: LIST
40791: LIST
40792: LIST
40793: LIST
40794: LIST
40795: LIST
40796: LIST
40797: LIST
40798: LIST
40799: LIST
40800: LIST
40801: LIST
40802: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
40803: LD_ADDR_VAR 0 33
40807: PUSH
40808: LD_INT 4
40810: NEG
40811: PUSH
40812: LD_INT 4
40814: NEG
40815: PUSH
40816: EMPTY
40817: LIST
40818: LIST
40819: PUSH
40820: LD_INT 4
40822: NEG
40823: PUSH
40824: LD_INT 5
40826: NEG
40827: PUSH
40828: EMPTY
40829: LIST
40830: LIST
40831: PUSH
40832: LD_INT 3
40834: NEG
40835: PUSH
40836: LD_INT 4
40838: NEG
40839: PUSH
40840: EMPTY
40841: LIST
40842: LIST
40843: PUSH
40844: LD_INT 3
40846: NEG
40847: PUSH
40848: LD_INT 3
40850: NEG
40851: PUSH
40852: EMPTY
40853: LIST
40854: LIST
40855: PUSH
40856: LD_INT 4
40858: NEG
40859: PUSH
40860: LD_INT 3
40862: NEG
40863: PUSH
40864: EMPTY
40865: LIST
40866: LIST
40867: PUSH
40868: LD_INT 5
40870: NEG
40871: PUSH
40872: LD_INT 4
40874: NEG
40875: PUSH
40876: EMPTY
40877: LIST
40878: LIST
40879: PUSH
40880: LD_INT 5
40882: NEG
40883: PUSH
40884: LD_INT 5
40886: NEG
40887: PUSH
40888: EMPTY
40889: LIST
40890: LIST
40891: PUSH
40892: LD_INT 3
40894: NEG
40895: PUSH
40896: LD_INT 5
40898: NEG
40899: PUSH
40900: EMPTY
40901: LIST
40902: LIST
40903: PUSH
40904: LD_INT 5
40906: NEG
40907: PUSH
40908: LD_INT 3
40910: NEG
40911: PUSH
40912: EMPTY
40913: LIST
40914: LIST
40915: PUSH
40916: LD_INT 0
40918: PUSH
40919: LD_INT 3
40921: NEG
40922: PUSH
40923: EMPTY
40924: LIST
40925: LIST
40926: PUSH
40927: LD_INT 0
40929: PUSH
40930: LD_INT 4
40932: NEG
40933: PUSH
40934: EMPTY
40935: LIST
40936: LIST
40937: PUSH
40938: LD_INT 1
40940: PUSH
40941: LD_INT 3
40943: NEG
40944: PUSH
40945: EMPTY
40946: LIST
40947: LIST
40948: PUSH
40949: LD_INT 1
40951: PUSH
40952: LD_INT 2
40954: NEG
40955: PUSH
40956: EMPTY
40957: LIST
40958: LIST
40959: PUSH
40960: LD_INT 0
40962: PUSH
40963: LD_INT 2
40965: NEG
40966: PUSH
40967: EMPTY
40968: LIST
40969: LIST
40970: PUSH
40971: LD_INT 1
40973: NEG
40974: PUSH
40975: LD_INT 3
40977: NEG
40978: PUSH
40979: EMPTY
40980: LIST
40981: LIST
40982: PUSH
40983: LD_INT 1
40985: NEG
40986: PUSH
40987: LD_INT 4
40989: NEG
40990: PUSH
40991: EMPTY
40992: LIST
40993: LIST
40994: PUSH
40995: LD_INT 2
40997: PUSH
40998: LD_INT 2
41000: NEG
41001: PUSH
41002: EMPTY
41003: LIST
41004: LIST
41005: PUSH
41006: LD_INT 2
41008: NEG
41009: PUSH
41010: LD_INT 4
41012: NEG
41013: PUSH
41014: EMPTY
41015: LIST
41016: LIST
41017: PUSH
41018: LD_INT 4
41020: PUSH
41021: LD_INT 0
41023: PUSH
41024: EMPTY
41025: LIST
41026: LIST
41027: PUSH
41028: LD_INT 4
41030: PUSH
41031: LD_INT 1
41033: NEG
41034: PUSH
41035: EMPTY
41036: LIST
41037: LIST
41038: PUSH
41039: LD_INT 5
41041: PUSH
41042: LD_INT 0
41044: PUSH
41045: EMPTY
41046: LIST
41047: LIST
41048: PUSH
41049: LD_INT 5
41051: PUSH
41052: LD_INT 1
41054: PUSH
41055: EMPTY
41056: LIST
41057: LIST
41058: PUSH
41059: LD_INT 4
41061: PUSH
41062: LD_INT 1
41064: PUSH
41065: EMPTY
41066: LIST
41067: LIST
41068: PUSH
41069: LD_INT 3
41071: PUSH
41072: LD_INT 0
41074: PUSH
41075: EMPTY
41076: LIST
41077: LIST
41078: PUSH
41079: LD_INT 3
41081: PUSH
41082: LD_INT 1
41084: NEG
41085: PUSH
41086: EMPTY
41087: LIST
41088: LIST
41089: PUSH
41090: LD_INT 3
41092: PUSH
41093: LD_INT 2
41095: NEG
41096: PUSH
41097: EMPTY
41098: LIST
41099: LIST
41100: PUSH
41101: LD_INT 5
41103: PUSH
41104: LD_INT 2
41106: PUSH
41107: EMPTY
41108: LIST
41109: LIST
41110: PUSH
41111: LD_INT 3
41113: PUSH
41114: LD_INT 3
41116: PUSH
41117: EMPTY
41118: LIST
41119: LIST
41120: PUSH
41121: LD_INT 3
41123: PUSH
41124: LD_INT 2
41126: PUSH
41127: EMPTY
41128: LIST
41129: LIST
41130: PUSH
41131: LD_INT 4
41133: PUSH
41134: LD_INT 3
41136: PUSH
41137: EMPTY
41138: LIST
41139: LIST
41140: PUSH
41141: LD_INT 4
41143: PUSH
41144: LD_INT 4
41146: PUSH
41147: EMPTY
41148: LIST
41149: LIST
41150: PUSH
41151: LD_INT 3
41153: PUSH
41154: LD_INT 4
41156: PUSH
41157: EMPTY
41158: LIST
41159: LIST
41160: PUSH
41161: LD_INT 2
41163: PUSH
41164: LD_INT 3
41166: PUSH
41167: EMPTY
41168: LIST
41169: LIST
41170: PUSH
41171: LD_INT 2
41173: PUSH
41174: LD_INT 2
41176: PUSH
41177: EMPTY
41178: LIST
41179: LIST
41180: PUSH
41181: LD_INT 4
41183: PUSH
41184: LD_INT 2
41186: PUSH
41187: EMPTY
41188: LIST
41189: LIST
41190: PUSH
41191: LD_INT 2
41193: PUSH
41194: LD_INT 4
41196: PUSH
41197: EMPTY
41198: LIST
41199: LIST
41200: PUSH
41201: LD_INT 0
41203: PUSH
41204: LD_INT 4
41206: PUSH
41207: EMPTY
41208: LIST
41209: LIST
41210: PUSH
41211: LD_INT 0
41213: PUSH
41214: LD_INT 3
41216: PUSH
41217: EMPTY
41218: LIST
41219: LIST
41220: PUSH
41221: LD_INT 1
41223: PUSH
41224: LD_INT 4
41226: PUSH
41227: EMPTY
41228: LIST
41229: LIST
41230: PUSH
41231: LD_INT 1
41233: PUSH
41234: LD_INT 5
41236: PUSH
41237: EMPTY
41238: LIST
41239: LIST
41240: PUSH
41241: LD_INT 0
41243: PUSH
41244: LD_INT 5
41246: PUSH
41247: EMPTY
41248: LIST
41249: LIST
41250: PUSH
41251: LD_INT 1
41253: NEG
41254: PUSH
41255: LD_INT 4
41257: PUSH
41258: EMPTY
41259: LIST
41260: LIST
41261: PUSH
41262: LD_INT 1
41264: NEG
41265: PUSH
41266: LD_INT 3
41268: PUSH
41269: EMPTY
41270: LIST
41271: LIST
41272: PUSH
41273: LD_INT 2
41275: PUSH
41276: LD_INT 5
41278: PUSH
41279: EMPTY
41280: LIST
41281: LIST
41282: PUSH
41283: LD_INT 2
41285: NEG
41286: PUSH
41287: LD_INT 3
41289: PUSH
41290: EMPTY
41291: LIST
41292: LIST
41293: PUSH
41294: EMPTY
41295: LIST
41296: LIST
41297: LIST
41298: LIST
41299: LIST
41300: LIST
41301: LIST
41302: LIST
41303: LIST
41304: LIST
41305: LIST
41306: LIST
41307: LIST
41308: LIST
41309: LIST
41310: LIST
41311: LIST
41312: LIST
41313: LIST
41314: LIST
41315: LIST
41316: LIST
41317: LIST
41318: LIST
41319: LIST
41320: LIST
41321: LIST
41322: LIST
41323: LIST
41324: LIST
41325: LIST
41326: LIST
41327: LIST
41328: LIST
41329: LIST
41330: LIST
41331: LIST
41332: LIST
41333: LIST
41334: LIST
41335: LIST
41336: LIST
41337: LIST
41338: LIST
41339: LIST
41340: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
41341: LD_ADDR_VAR 0 34
41345: PUSH
41346: LD_INT 0
41348: PUSH
41349: LD_INT 4
41351: NEG
41352: PUSH
41353: EMPTY
41354: LIST
41355: LIST
41356: PUSH
41357: LD_INT 0
41359: PUSH
41360: LD_INT 5
41362: NEG
41363: PUSH
41364: EMPTY
41365: LIST
41366: LIST
41367: PUSH
41368: LD_INT 1
41370: PUSH
41371: LD_INT 4
41373: NEG
41374: PUSH
41375: EMPTY
41376: LIST
41377: LIST
41378: PUSH
41379: LD_INT 1
41381: PUSH
41382: LD_INT 3
41384: NEG
41385: PUSH
41386: EMPTY
41387: LIST
41388: LIST
41389: PUSH
41390: LD_INT 0
41392: PUSH
41393: LD_INT 3
41395: NEG
41396: PUSH
41397: EMPTY
41398: LIST
41399: LIST
41400: PUSH
41401: LD_INT 1
41403: NEG
41404: PUSH
41405: LD_INT 4
41407: NEG
41408: PUSH
41409: EMPTY
41410: LIST
41411: LIST
41412: PUSH
41413: LD_INT 1
41415: NEG
41416: PUSH
41417: LD_INT 5
41419: NEG
41420: PUSH
41421: EMPTY
41422: LIST
41423: LIST
41424: PUSH
41425: LD_INT 2
41427: PUSH
41428: LD_INT 3
41430: NEG
41431: PUSH
41432: EMPTY
41433: LIST
41434: LIST
41435: PUSH
41436: LD_INT 2
41438: NEG
41439: PUSH
41440: LD_INT 5
41442: NEG
41443: PUSH
41444: EMPTY
41445: LIST
41446: LIST
41447: PUSH
41448: LD_INT 3
41450: PUSH
41451: LD_INT 0
41453: PUSH
41454: EMPTY
41455: LIST
41456: LIST
41457: PUSH
41458: LD_INT 3
41460: PUSH
41461: LD_INT 1
41463: NEG
41464: PUSH
41465: EMPTY
41466: LIST
41467: LIST
41468: PUSH
41469: LD_INT 4
41471: PUSH
41472: LD_INT 0
41474: PUSH
41475: EMPTY
41476: LIST
41477: LIST
41478: PUSH
41479: LD_INT 4
41481: PUSH
41482: LD_INT 1
41484: PUSH
41485: EMPTY
41486: LIST
41487: LIST
41488: PUSH
41489: LD_INT 3
41491: PUSH
41492: LD_INT 1
41494: PUSH
41495: EMPTY
41496: LIST
41497: LIST
41498: PUSH
41499: LD_INT 2
41501: PUSH
41502: LD_INT 0
41504: PUSH
41505: EMPTY
41506: LIST
41507: LIST
41508: PUSH
41509: LD_INT 2
41511: PUSH
41512: LD_INT 1
41514: NEG
41515: PUSH
41516: EMPTY
41517: LIST
41518: LIST
41519: PUSH
41520: LD_INT 2
41522: PUSH
41523: LD_INT 2
41525: NEG
41526: PUSH
41527: EMPTY
41528: LIST
41529: LIST
41530: PUSH
41531: LD_INT 4
41533: PUSH
41534: LD_INT 2
41536: PUSH
41537: EMPTY
41538: LIST
41539: LIST
41540: PUSH
41541: LD_INT 4
41543: PUSH
41544: LD_INT 4
41546: PUSH
41547: EMPTY
41548: LIST
41549: LIST
41550: PUSH
41551: LD_INT 4
41553: PUSH
41554: LD_INT 3
41556: PUSH
41557: EMPTY
41558: LIST
41559: LIST
41560: PUSH
41561: LD_INT 5
41563: PUSH
41564: LD_INT 4
41566: PUSH
41567: EMPTY
41568: LIST
41569: LIST
41570: PUSH
41571: LD_INT 5
41573: PUSH
41574: LD_INT 5
41576: PUSH
41577: EMPTY
41578: LIST
41579: LIST
41580: PUSH
41581: LD_INT 4
41583: PUSH
41584: LD_INT 5
41586: PUSH
41587: EMPTY
41588: LIST
41589: LIST
41590: PUSH
41591: LD_INT 3
41593: PUSH
41594: LD_INT 4
41596: PUSH
41597: EMPTY
41598: LIST
41599: LIST
41600: PUSH
41601: LD_INT 3
41603: PUSH
41604: LD_INT 3
41606: PUSH
41607: EMPTY
41608: LIST
41609: LIST
41610: PUSH
41611: LD_INT 5
41613: PUSH
41614: LD_INT 3
41616: PUSH
41617: EMPTY
41618: LIST
41619: LIST
41620: PUSH
41621: LD_INT 3
41623: PUSH
41624: LD_INT 5
41626: PUSH
41627: EMPTY
41628: LIST
41629: LIST
41630: PUSH
41631: LD_INT 0
41633: PUSH
41634: LD_INT 3
41636: PUSH
41637: EMPTY
41638: LIST
41639: LIST
41640: PUSH
41641: LD_INT 0
41643: PUSH
41644: LD_INT 2
41646: PUSH
41647: EMPTY
41648: LIST
41649: LIST
41650: PUSH
41651: LD_INT 1
41653: PUSH
41654: LD_INT 3
41656: PUSH
41657: EMPTY
41658: LIST
41659: LIST
41660: PUSH
41661: LD_INT 1
41663: PUSH
41664: LD_INT 4
41666: PUSH
41667: EMPTY
41668: LIST
41669: LIST
41670: PUSH
41671: LD_INT 0
41673: PUSH
41674: LD_INT 4
41676: PUSH
41677: EMPTY
41678: LIST
41679: LIST
41680: PUSH
41681: LD_INT 1
41683: NEG
41684: PUSH
41685: LD_INT 3
41687: PUSH
41688: EMPTY
41689: LIST
41690: LIST
41691: PUSH
41692: LD_INT 1
41694: NEG
41695: PUSH
41696: LD_INT 2
41698: PUSH
41699: EMPTY
41700: LIST
41701: LIST
41702: PUSH
41703: LD_INT 2
41705: PUSH
41706: LD_INT 4
41708: PUSH
41709: EMPTY
41710: LIST
41711: LIST
41712: PUSH
41713: LD_INT 2
41715: NEG
41716: PUSH
41717: LD_INT 2
41719: PUSH
41720: EMPTY
41721: LIST
41722: LIST
41723: PUSH
41724: LD_INT 4
41726: NEG
41727: PUSH
41728: LD_INT 0
41730: PUSH
41731: EMPTY
41732: LIST
41733: LIST
41734: PUSH
41735: LD_INT 4
41737: NEG
41738: PUSH
41739: LD_INT 1
41741: NEG
41742: PUSH
41743: EMPTY
41744: LIST
41745: LIST
41746: PUSH
41747: LD_INT 3
41749: NEG
41750: PUSH
41751: LD_INT 0
41753: PUSH
41754: EMPTY
41755: LIST
41756: LIST
41757: PUSH
41758: LD_INT 3
41760: NEG
41761: PUSH
41762: LD_INT 1
41764: PUSH
41765: EMPTY
41766: LIST
41767: LIST
41768: PUSH
41769: LD_INT 4
41771: NEG
41772: PUSH
41773: LD_INT 1
41775: PUSH
41776: EMPTY
41777: LIST
41778: LIST
41779: PUSH
41780: LD_INT 5
41782: NEG
41783: PUSH
41784: LD_INT 0
41786: PUSH
41787: EMPTY
41788: LIST
41789: LIST
41790: PUSH
41791: LD_INT 5
41793: NEG
41794: PUSH
41795: LD_INT 1
41797: NEG
41798: PUSH
41799: EMPTY
41800: LIST
41801: LIST
41802: PUSH
41803: LD_INT 5
41805: NEG
41806: PUSH
41807: LD_INT 2
41809: NEG
41810: PUSH
41811: EMPTY
41812: LIST
41813: LIST
41814: PUSH
41815: LD_INT 3
41817: NEG
41818: PUSH
41819: LD_INT 2
41821: PUSH
41822: EMPTY
41823: LIST
41824: LIST
41825: PUSH
41826: EMPTY
41827: LIST
41828: LIST
41829: LIST
41830: LIST
41831: LIST
41832: LIST
41833: LIST
41834: LIST
41835: LIST
41836: LIST
41837: LIST
41838: LIST
41839: LIST
41840: LIST
41841: LIST
41842: LIST
41843: LIST
41844: LIST
41845: LIST
41846: LIST
41847: LIST
41848: LIST
41849: LIST
41850: LIST
41851: LIST
41852: LIST
41853: LIST
41854: LIST
41855: LIST
41856: LIST
41857: LIST
41858: LIST
41859: LIST
41860: LIST
41861: LIST
41862: LIST
41863: LIST
41864: LIST
41865: LIST
41866: LIST
41867: LIST
41868: LIST
41869: LIST
41870: LIST
41871: LIST
41872: ST_TO_ADDR
// end ; end ;
41873: GO 41876
41875: POP
// case btype of b_depot , b_warehouse :
41876: LD_VAR 0 1
41880: PUSH
41881: LD_INT 0
41883: DOUBLE
41884: EQUAL
41885: IFTRUE 41895
41887: LD_INT 1
41889: DOUBLE
41890: EQUAL
41891: IFTRUE 41895
41893: GO 42096
41895: POP
// case nation of nation_american :
41896: LD_VAR 0 5
41900: PUSH
41901: LD_INT 1
41903: DOUBLE
41904: EQUAL
41905: IFTRUE 41909
41907: GO 41965
41909: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
41910: LD_ADDR_VAR 0 9
41914: PUSH
41915: LD_VAR 0 11
41919: PUSH
41920: LD_VAR 0 12
41924: PUSH
41925: LD_VAR 0 13
41929: PUSH
41930: LD_VAR 0 14
41934: PUSH
41935: LD_VAR 0 15
41939: PUSH
41940: LD_VAR 0 16
41944: PUSH
41945: EMPTY
41946: LIST
41947: LIST
41948: LIST
41949: LIST
41950: LIST
41951: LIST
41952: PUSH
41953: LD_VAR 0 4
41957: PUSH
41958: LD_INT 1
41960: PLUS
41961: ARRAY
41962: ST_TO_ADDR
41963: GO 42094
41965: LD_INT 2
41967: DOUBLE
41968: EQUAL
41969: IFTRUE 41973
41971: GO 42029
41973: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
41974: LD_ADDR_VAR 0 9
41978: PUSH
41979: LD_VAR 0 17
41983: PUSH
41984: LD_VAR 0 18
41988: PUSH
41989: LD_VAR 0 19
41993: PUSH
41994: LD_VAR 0 20
41998: PUSH
41999: LD_VAR 0 21
42003: PUSH
42004: LD_VAR 0 22
42008: PUSH
42009: EMPTY
42010: LIST
42011: LIST
42012: LIST
42013: LIST
42014: LIST
42015: LIST
42016: PUSH
42017: LD_VAR 0 4
42021: PUSH
42022: LD_INT 1
42024: PLUS
42025: ARRAY
42026: ST_TO_ADDR
42027: GO 42094
42029: LD_INT 3
42031: DOUBLE
42032: EQUAL
42033: IFTRUE 42037
42035: GO 42093
42037: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
42038: LD_ADDR_VAR 0 9
42042: PUSH
42043: LD_VAR 0 23
42047: PUSH
42048: LD_VAR 0 24
42052: PUSH
42053: LD_VAR 0 25
42057: PUSH
42058: LD_VAR 0 26
42062: PUSH
42063: LD_VAR 0 27
42067: PUSH
42068: LD_VAR 0 28
42072: PUSH
42073: EMPTY
42074: LIST
42075: LIST
42076: LIST
42077: LIST
42078: LIST
42079: LIST
42080: PUSH
42081: LD_VAR 0 4
42085: PUSH
42086: LD_INT 1
42088: PLUS
42089: ARRAY
42090: ST_TO_ADDR
42091: GO 42094
42093: POP
42094: GO 42649
42096: LD_INT 2
42098: DOUBLE
42099: EQUAL
42100: IFTRUE 42110
42102: LD_INT 3
42104: DOUBLE
42105: EQUAL
42106: IFTRUE 42110
42108: GO 42166
42110: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
42111: LD_ADDR_VAR 0 9
42115: PUSH
42116: LD_VAR 0 29
42120: PUSH
42121: LD_VAR 0 30
42125: PUSH
42126: LD_VAR 0 31
42130: PUSH
42131: LD_VAR 0 32
42135: PUSH
42136: LD_VAR 0 33
42140: PUSH
42141: LD_VAR 0 34
42145: PUSH
42146: EMPTY
42147: LIST
42148: LIST
42149: LIST
42150: LIST
42151: LIST
42152: LIST
42153: PUSH
42154: LD_VAR 0 4
42158: PUSH
42159: LD_INT 1
42161: PLUS
42162: ARRAY
42163: ST_TO_ADDR
42164: GO 42649
42166: LD_INT 16
42168: DOUBLE
42169: EQUAL
42170: IFTRUE 42228
42172: LD_INT 17
42174: DOUBLE
42175: EQUAL
42176: IFTRUE 42228
42178: LD_INT 18
42180: DOUBLE
42181: EQUAL
42182: IFTRUE 42228
42184: LD_INT 19
42186: DOUBLE
42187: EQUAL
42188: IFTRUE 42228
42190: LD_INT 22
42192: DOUBLE
42193: EQUAL
42194: IFTRUE 42228
42196: LD_INT 20
42198: DOUBLE
42199: EQUAL
42200: IFTRUE 42228
42202: LD_INT 21
42204: DOUBLE
42205: EQUAL
42206: IFTRUE 42228
42208: LD_INT 23
42210: DOUBLE
42211: EQUAL
42212: IFTRUE 42228
42214: LD_INT 24
42216: DOUBLE
42217: EQUAL
42218: IFTRUE 42228
42220: LD_INT 25
42222: DOUBLE
42223: EQUAL
42224: IFTRUE 42228
42226: GO 42284
42228: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
42229: LD_ADDR_VAR 0 9
42233: PUSH
42234: LD_VAR 0 35
42238: PUSH
42239: LD_VAR 0 36
42243: PUSH
42244: LD_VAR 0 37
42248: PUSH
42249: LD_VAR 0 38
42253: PUSH
42254: LD_VAR 0 39
42258: PUSH
42259: LD_VAR 0 40
42263: PUSH
42264: EMPTY
42265: LIST
42266: LIST
42267: LIST
42268: LIST
42269: LIST
42270: LIST
42271: PUSH
42272: LD_VAR 0 4
42276: PUSH
42277: LD_INT 1
42279: PLUS
42280: ARRAY
42281: ST_TO_ADDR
42282: GO 42649
42284: LD_INT 6
42286: DOUBLE
42287: EQUAL
42288: IFTRUE 42340
42290: LD_INT 7
42292: DOUBLE
42293: EQUAL
42294: IFTRUE 42340
42296: LD_INT 8
42298: DOUBLE
42299: EQUAL
42300: IFTRUE 42340
42302: LD_INT 13
42304: DOUBLE
42305: EQUAL
42306: IFTRUE 42340
42308: LD_INT 12
42310: DOUBLE
42311: EQUAL
42312: IFTRUE 42340
42314: LD_INT 15
42316: DOUBLE
42317: EQUAL
42318: IFTRUE 42340
42320: LD_INT 11
42322: DOUBLE
42323: EQUAL
42324: IFTRUE 42340
42326: LD_INT 14
42328: DOUBLE
42329: EQUAL
42330: IFTRUE 42340
42332: LD_INT 10
42334: DOUBLE
42335: EQUAL
42336: IFTRUE 42340
42338: GO 42396
42340: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
42341: LD_ADDR_VAR 0 9
42345: PUSH
42346: LD_VAR 0 41
42350: PUSH
42351: LD_VAR 0 42
42355: PUSH
42356: LD_VAR 0 43
42360: PUSH
42361: LD_VAR 0 44
42365: PUSH
42366: LD_VAR 0 45
42370: PUSH
42371: LD_VAR 0 46
42375: PUSH
42376: EMPTY
42377: LIST
42378: LIST
42379: LIST
42380: LIST
42381: LIST
42382: LIST
42383: PUSH
42384: LD_VAR 0 4
42388: PUSH
42389: LD_INT 1
42391: PLUS
42392: ARRAY
42393: ST_TO_ADDR
42394: GO 42649
42396: LD_INT 36
42398: DOUBLE
42399: EQUAL
42400: IFTRUE 42404
42402: GO 42460
42404: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
42405: LD_ADDR_VAR 0 9
42409: PUSH
42410: LD_VAR 0 47
42414: PUSH
42415: LD_VAR 0 48
42419: PUSH
42420: LD_VAR 0 49
42424: PUSH
42425: LD_VAR 0 50
42429: PUSH
42430: LD_VAR 0 51
42434: PUSH
42435: LD_VAR 0 52
42439: PUSH
42440: EMPTY
42441: LIST
42442: LIST
42443: LIST
42444: LIST
42445: LIST
42446: LIST
42447: PUSH
42448: LD_VAR 0 4
42452: PUSH
42453: LD_INT 1
42455: PLUS
42456: ARRAY
42457: ST_TO_ADDR
42458: GO 42649
42460: LD_INT 4
42462: DOUBLE
42463: EQUAL
42464: IFTRUE 42486
42466: LD_INT 5
42468: DOUBLE
42469: EQUAL
42470: IFTRUE 42486
42472: LD_INT 34
42474: DOUBLE
42475: EQUAL
42476: IFTRUE 42486
42478: LD_INT 37
42480: DOUBLE
42481: EQUAL
42482: IFTRUE 42486
42484: GO 42542
42486: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
42487: LD_ADDR_VAR 0 9
42491: PUSH
42492: LD_VAR 0 53
42496: PUSH
42497: LD_VAR 0 54
42501: PUSH
42502: LD_VAR 0 55
42506: PUSH
42507: LD_VAR 0 56
42511: PUSH
42512: LD_VAR 0 57
42516: PUSH
42517: LD_VAR 0 58
42521: PUSH
42522: EMPTY
42523: LIST
42524: LIST
42525: LIST
42526: LIST
42527: LIST
42528: LIST
42529: PUSH
42530: LD_VAR 0 4
42534: PUSH
42535: LD_INT 1
42537: PLUS
42538: ARRAY
42539: ST_TO_ADDR
42540: GO 42649
42542: LD_INT 31
42544: DOUBLE
42545: EQUAL
42546: IFTRUE 42592
42548: LD_INT 32
42550: DOUBLE
42551: EQUAL
42552: IFTRUE 42592
42554: LD_INT 33
42556: DOUBLE
42557: EQUAL
42558: IFTRUE 42592
42560: LD_INT 27
42562: DOUBLE
42563: EQUAL
42564: IFTRUE 42592
42566: LD_INT 26
42568: DOUBLE
42569: EQUAL
42570: IFTRUE 42592
42572: LD_INT 28
42574: DOUBLE
42575: EQUAL
42576: IFTRUE 42592
42578: LD_INT 29
42580: DOUBLE
42581: EQUAL
42582: IFTRUE 42592
42584: LD_INT 30
42586: DOUBLE
42587: EQUAL
42588: IFTRUE 42592
42590: GO 42648
42592: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
42593: LD_ADDR_VAR 0 9
42597: PUSH
42598: LD_VAR 0 59
42602: PUSH
42603: LD_VAR 0 60
42607: PUSH
42608: LD_VAR 0 61
42612: PUSH
42613: LD_VAR 0 62
42617: PUSH
42618: LD_VAR 0 63
42622: PUSH
42623: LD_VAR 0 64
42627: PUSH
42628: EMPTY
42629: LIST
42630: LIST
42631: LIST
42632: LIST
42633: LIST
42634: LIST
42635: PUSH
42636: LD_VAR 0 4
42640: PUSH
42641: LD_INT 1
42643: PLUS
42644: ARRAY
42645: ST_TO_ADDR
42646: GO 42649
42648: POP
// temp_list2 = [ ] ;
42649: LD_ADDR_VAR 0 10
42653: PUSH
42654: EMPTY
42655: ST_TO_ADDR
// for i in temp_list do
42656: LD_ADDR_VAR 0 8
42660: PUSH
42661: LD_VAR 0 9
42665: PUSH
42666: FOR_IN
42667: IFFALSE 42719
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
42669: LD_ADDR_VAR 0 10
42673: PUSH
42674: LD_VAR 0 10
42678: PUSH
42679: LD_VAR 0 8
42683: PUSH
42684: LD_INT 1
42686: ARRAY
42687: PUSH
42688: LD_VAR 0 2
42692: PLUS
42693: PUSH
42694: LD_VAR 0 8
42698: PUSH
42699: LD_INT 2
42701: ARRAY
42702: PUSH
42703: LD_VAR 0 3
42707: PLUS
42708: PUSH
42709: EMPTY
42710: LIST
42711: LIST
42712: PUSH
42713: EMPTY
42714: LIST
42715: ADD
42716: ST_TO_ADDR
42717: GO 42666
42719: POP
42720: POP
// result = temp_list2 ;
42721: LD_ADDR_VAR 0 7
42725: PUSH
42726: LD_VAR 0 10
42730: ST_TO_ADDR
// end ;
42731: LD_VAR 0 7
42735: RET
// export function EnemyInRange ( unit , dist ) ; begin
42736: LD_INT 0
42738: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
42739: LD_ADDR_VAR 0 3
42743: PUSH
42744: LD_VAR 0 1
42748: PPUSH
42749: CALL_OW 255
42753: PPUSH
42754: LD_VAR 0 1
42758: PPUSH
42759: CALL_OW 250
42763: PPUSH
42764: LD_VAR 0 1
42768: PPUSH
42769: CALL_OW 251
42773: PPUSH
42774: LD_VAR 0 2
42778: PPUSH
42779: CALL 16109 0 4
42783: PUSH
42784: LD_INT 4
42786: ARRAY
42787: ST_TO_ADDR
// end ;
42788: LD_VAR 0 3
42792: RET
// export function PlayerSeeMe ( unit ) ; begin
42793: LD_INT 0
42795: PPUSH
// result := See ( your_side , unit ) ;
42796: LD_ADDR_VAR 0 2
42800: PUSH
42801: LD_OWVAR 2
42805: PPUSH
42806: LD_VAR 0 1
42810: PPUSH
42811: CALL_OW 292
42815: ST_TO_ADDR
// end ;
42816: LD_VAR 0 2
42820: RET
// export function ReverseDir ( unit ) ; begin
42821: LD_INT 0
42823: PPUSH
// if not unit then
42824: LD_VAR 0 1
42828: NOT
42829: IFFALSE 42833
// exit ;
42831: GO 42856
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
42833: LD_ADDR_VAR 0 2
42837: PUSH
42838: LD_VAR 0 1
42842: PPUSH
42843: CALL_OW 254
42847: PUSH
42848: LD_INT 3
42850: PLUS
42851: PUSH
42852: LD_INT 6
42854: MOD
42855: ST_TO_ADDR
// end ;
42856: LD_VAR 0 2
42860: RET
// export function ReverseArray ( array ) ; var i ; begin
42861: LD_INT 0
42863: PPUSH
42864: PPUSH
// if not array then
42865: LD_VAR 0 1
42869: NOT
42870: IFFALSE 42874
// exit ;
42872: GO 42929
// result := [ ] ;
42874: LD_ADDR_VAR 0 2
42878: PUSH
42879: EMPTY
42880: ST_TO_ADDR
// for i := array downto 1 do
42881: LD_ADDR_VAR 0 3
42885: PUSH
42886: DOUBLE
42887: LD_VAR 0 1
42891: INC
42892: ST_TO_ADDR
42893: LD_INT 1
42895: PUSH
42896: FOR_DOWNTO
42897: IFFALSE 42927
// result := Join ( result , array [ i ] ) ;
42899: LD_ADDR_VAR 0 2
42903: PUSH
42904: LD_VAR 0 2
42908: PPUSH
42909: LD_VAR 0 1
42913: PUSH
42914: LD_VAR 0 3
42918: ARRAY
42919: PPUSH
42920: CALL 47594 0 2
42924: ST_TO_ADDR
42925: GO 42896
42927: POP
42928: POP
// end ;
42929: LD_VAR 0 2
42933: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
42934: LD_INT 0
42936: PPUSH
42937: PPUSH
42938: PPUSH
42939: PPUSH
42940: PPUSH
42941: PPUSH
// if not unit or not hexes then
42942: LD_VAR 0 1
42946: NOT
42947: PUSH
42948: LD_VAR 0 2
42952: NOT
42953: OR
42954: IFFALSE 42958
// exit ;
42956: GO 43081
// dist := 9999 ;
42958: LD_ADDR_VAR 0 5
42962: PUSH
42963: LD_INT 9999
42965: ST_TO_ADDR
// for i = 1 to hexes do
42966: LD_ADDR_VAR 0 4
42970: PUSH
42971: DOUBLE
42972: LD_INT 1
42974: DEC
42975: ST_TO_ADDR
42976: LD_VAR 0 2
42980: PUSH
42981: FOR_TO
42982: IFFALSE 43069
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
42984: LD_ADDR_VAR 0 6
42988: PUSH
42989: LD_VAR 0 1
42993: PPUSH
42994: LD_VAR 0 2
42998: PUSH
42999: LD_VAR 0 4
43003: ARRAY
43004: PUSH
43005: LD_INT 1
43007: ARRAY
43008: PPUSH
43009: LD_VAR 0 2
43013: PUSH
43014: LD_VAR 0 4
43018: ARRAY
43019: PUSH
43020: LD_INT 2
43022: ARRAY
43023: PPUSH
43024: CALL_OW 297
43028: ST_TO_ADDR
// if tdist < dist then
43029: LD_VAR 0 6
43033: PUSH
43034: LD_VAR 0 5
43038: LESS
43039: IFFALSE 43067
// begin hex := hexes [ i ] ;
43041: LD_ADDR_VAR 0 8
43045: PUSH
43046: LD_VAR 0 2
43050: PUSH
43051: LD_VAR 0 4
43055: ARRAY
43056: ST_TO_ADDR
// dist := tdist ;
43057: LD_ADDR_VAR 0 5
43061: PUSH
43062: LD_VAR 0 6
43066: ST_TO_ADDR
// end ; end ;
43067: GO 42981
43069: POP
43070: POP
// result := hex ;
43071: LD_ADDR_VAR 0 3
43075: PUSH
43076: LD_VAR 0 8
43080: ST_TO_ADDR
// end ;
43081: LD_VAR 0 3
43085: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
43086: LD_INT 0
43088: PPUSH
43089: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
43090: LD_VAR 0 1
43094: NOT
43095: PUSH
43096: LD_VAR 0 1
43100: PUSH
43101: LD_INT 21
43103: PUSH
43104: LD_INT 2
43106: PUSH
43107: EMPTY
43108: LIST
43109: LIST
43110: PUSH
43111: LD_INT 23
43113: PUSH
43114: LD_INT 2
43116: PUSH
43117: EMPTY
43118: LIST
43119: LIST
43120: PUSH
43121: EMPTY
43122: LIST
43123: LIST
43124: PPUSH
43125: CALL_OW 69
43129: IN
43130: NOT
43131: OR
43132: IFFALSE 43136
// exit ;
43134: GO 43183
// for i = 1 to 3 do
43136: LD_ADDR_VAR 0 3
43140: PUSH
43141: DOUBLE
43142: LD_INT 1
43144: DEC
43145: ST_TO_ADDR
43146: LD_INT 3
43148: PUSH
43149: FOR_TO
43150: IFFALSE 43181
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
43152: LD_VAR 0 1
43156: PPUSH
43157: CALL_OW 250
43161: PPUSH
43162: LD_VAR 0 1
43166: PPUSH
43167: CALL_OW 251
43171: PPUSH
43172: LD_INT 1
43174: PPUSH
43175: CALL_OW 453
43179: GO 43149
43181: POP
43182: POP
// end ;
43183: LD_VAR 0 2
43187: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
43188: LD_INT 0
43190: PPUSH
43191: PPUSH
43192: PPUSH
43193: PPUSH
43194: PPUSH
43195: PPUSH
// if not unit or not enemy_unit then
43196: LD_VAR 0 1
43200: NOT
43201: PUSH
43202: LD_VAR 0 2
43206: NOT
43207: OR
43208: IFFALSE 43212
// exit ;
43210: GO 43679
// if GetLives ( i ) < 250 then
43212: LD_VAR 0 4
43216: PPUSH
43217: CALL_OW 256
43221: PUSH
43222: LD_INT 250
43224: LESS
43225: IFFALSE 43238
// begin ComAutodestruct ( i ) ;
43227: LD_VAR 0 4
43231: PPUSH
43232: CALL 43086 0 1
// exit ;
43236: GO 43679
// end ; x := GetX ( enemy_unit ) ;
43238: LD_ADDR_VAR 0 7
43242: PUSH
43243: LD_VAR 0 2
43247: PPUSH
43248: CALL_OW 250
43252: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
43253: LD_ADDR_VAR 0 8
43257: PUSH
43258: LD_VAR 0 2
43262: PPUSH
43263: CALL_OW 251
43267: ST_TO_ADDR
// if not x or not y then
43268: LD_VAR 0 7
43272: NOT
43273: PUSH
43274: LD_VAR 0 8
43278: NOT
43279: OR
43280: IFFALSE 43284
// exit ;
43282: GO 43679
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
43284: LD_ADDR_VAR 0 6
43288: PUSH
43289: LD_VAR 0 7
43293: PPUSH
43294: LD_INT 0
43296: PPUSH
43297: LD_INT 4
43299: PPUSH
43300: CALL_OW 272
43304: PUSH
43305: LD_VAR 0 8
43309: PPUSH
43310: LD_INT 0
43312: PPUSH
43313: LD_INT 4
43315: PPUSH
43316: CALL_OW 273
43320: PUSH
43321: EMPTY
43322: LIST
43323: LIST
43324: PUSH
43325: LD_VAR 0 7
43329: PPUSH
43330: LD_INT 1
43332: PPUSH
43333: LD_INT 4
43335: PPUSH
43336: CALL_OW 272
43340: PUSH
43341: LD_VAR 0 8
43345: PPUSH
43346: LD_INT 1
43348: PPUSH
43349: LD_INT 4
43351: PPUSH
43352: CALL_OW 273
43356: PUSH
43357: EMPTY
43358: LIST
43359: LIST
43360: PUSH
43361: LD_VAR 0 7
43365: PPUSH
43366: LD_INT 2
43368: PPUSH
43369: LD_INT 4
43371: PPUSH
43372: CALL_OW 272
43376: PUSH
43377: LD_VAR 0 8
43381: PPUSH
43382: LD_INT 2
43384: PPUSH
43385: LD_INT 4
43387: PPUSH
43388: CALL_OW 273
43392: PUSH
43393: EMPTY
43394: LIST
43395: LIST
43396: PUSH
43397: LD_VAR 0 7
43401: PPUSH
43402: LD_INT 3
43404: PPUSH
43405: LD_INT 4
43407: PPUSH
43408: CALL_OW 272
43412: PUSH
43413: LD_VAR 0 8
43417: PPUSH
43418: LD_INT 3
43420: PPUSH
43421: LD_INT 4
43423: PPUSH
43424: CALL_OW 273
43428: PUSH
43429: EMPTY
43430: LIST
43431: LIST
43432: PUSH
43433: LD_VAR 0 7
43437: PPUSH
43438: LD_INT 4
43440: PPUSH
43441: LD_INT 4
43443: PPUSH
43444: CALL_OW 272
43448: PUSH
43449: LD_VAR 0 8
43453: PPUSH
43454: LD_INT 4
43456: PPUSH
43457: LD_INT 4
43459: PPUSH
43460: CALL_OW 273
43464: PUSH
43465: EMPTY
43466: LIST
43467: LIST
43468: PUSH
43469: LD_VAR 0 7
43473: PPUSH
43474: LD_INT 5
43476: PPUSH
43477: LD_INT 4
43479: PPUSH
43480: CALL_OW 272
43484: PUSH
43485: LD_VAR 0 8
43489: PPUSH
43490: LD_INT 5
43492: PPUSH
43493: LD_INT 4
43495: PPUSH
43496: CALL_OW 273
43500: PUSH
43501: EMPTY
43502: LIST
43503: LIST
43504: PUSH
43505: EMPTY
43506: LIST
43507: LIST
43508: LIST
43509: LIST
43510: LIST
43511: LIST
43512: ST_TO_ADDR
// for i = tmp downto 1 do
43513: LD_ADDR_VAR 0 4
43517: PUSH
43518: DOUBLE
43519: LD_VAR 0 6
43523: INC
43524: ST_TO_ADDR
43525: LD_INT 1
43527: PUSH
43528: FOR_DOWNTO
43529: IFFALSE 43630
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
43531: LD_VAR 0 6
43535: PUSH
43536: LD_VAR 0 4
43540: ARRAY
43541: PUSH
43542: LD_INT 1
43544: ARRAY
43545: PPUSH
43546: LD_VAR 0 6
43550: PUSH
43551: LD_VAR 0 4
43555: ARRAY
43556: PUSH
43557: LD_INT 2
43559: ARRAY
43560: PPUSH
43561: CALL_OW 488
43565: NOT
43566: PUSH
43567: LD_VAR 0 6
43571: PUSH
43572: LD_VAR 0 4
43576: ARRAY
43577: PUSH
43578: LD_INT 1
43580: ARRAY
43581: PPUSH
43582: LD_VAR 0 6
43586: PUSH
43587: LD_VAR 0 4
43591: ARRAY
43592: PUSH
43593: LD_INT 2
43595: ARRAY
43596: PPUSH
43597: CALL_OW 428
43601: PUSH
43602: LD_INT 0
43604: NONEQUAL
43605: OR
43606: IFFALSE 43628
// tmp := Delete ( tmp , i ) ;
43608: LD_ADDR_VAR 0 6
43612: PUSH
43613: LD_VAR 0 6
43617: PPUSH
43618: LD_VAR 0 4
43622: PPUSH
43623: CALL_OW 3
43627: ST_TO_ADDR
43628: GO 43528
43630: POP
43631: POP
// j := GetClosestHex ( unit , tmp ) ;
43632: LD_ADDR_VAR 0 5
43636: PUSH
43637: LD_VAR 0 1
43641: PPUSH
43642: LD_VAR 0 6
43646: PPUSH
43647: CALL 42934 0 2
43651: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
43652: LD_VAR 0 1
43656: PPUSH
43657: LD_VAR 0 5
43661: PUSH
43662: LD_INT 1
43664: ARRAY
43665: PPUSH
43666: LD_VAR 0 5
43670: PUSH
43671: LD_INT 2
43673: ARRAY
43674: PPUSH
43675: CALL_OW 111
// end ;
43679: LD_VAR 0 3
43683: RET
// export function PrepareApemanSoldier ( ) ; begin
43684: LD_INT 0
43686: PPUSH
// uc_nation := 0 ;
43687: LD_ADDR_OWVAR 21
43691: PUSH
43692: LD_INT 0
43694: ST_TO_ADDR
// hc_sex := sex_male ;
43695: LD_ADDR_OWVAR 27
43699: PUSH
43700: LD_INT 1
43702: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
43703: LD_ADDR_OWVAR 28
43707: PUSH
43708: LD_INT 15
43710: ST_TO_ADDR
// hc_gallery :=  ;
43711: LD_ADDR_OWVAR 33
43715: PUSH
43716: LD_STRING 
43718: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
43719: LD_ADDR_OWVAR 31
43723: PUSH
43724: LD_INT 0
43726: PPUSH
43727: LD_INT 3
43729: PPUSH
43730: CALL_OW 12
43734: PUSH
43735: LD_INT 0
43737: PPUSH
43738: LD_INT 3
43740: PPUSH
43741: CALL_OW 12
43745: PUSH
43746: LD_INT 0
43748: PUSH
43749: LD_INT 0
43751: PUSH
43752: EMPTY
43753: LIST
43754: LIST
43755: LIST
43756: LIST
43757: ST_TO_ADDR
// end ;
43758: LD_VAR 0 1
43762: RET
// export function PrepareApemanEngineer ( ) ; begin
43763: LD_INT 0
43765: PPUSH
// uc_nation := 0 ;
43766: LD_ADDR_OWVAR 21
43770: PUSH
43771: LD_INT 0
43773: ST_TO_ADDR
// hc_sex := sex_male ;
43774: LD_ADDR_OWVAR 27
43778: PUSH
43779: LD_INT 1
43781: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
43782: LD_ADDR_OWVAR 28
43786: PUSH
43787: LD_INT 16
43789: ST_TO_ADDR
// hc_gallery :=  ;
43790: LD_ADDR_OWVAR 33
43794: PUSH
43795: LD_STRING 
43797: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
43798: LD_ADDR_OWVAR 31
43802: PUSH
43803: LD_INT 0
43805: PPUSH
43806: LD_INT 3
43808: PPUSH
43809: CALL_OW 12
43813: PUSH
43814: LD_INT 0
43816: PPUSH
43817: LD_INT 3
43819: PPUSH
43820: CALL_OW 12
43824: PUSH
43825: LD_INT 0
43827: PUSH
43828: LD_INT 0
43830: PUSH
43831: EMPTY
43832: LIST
43833: LIST
43834: LIST
43835: LIST
43836: ST_TO_ADDR
// end ;
43837: LD_VAR 0 1
43841: RET
// export function PrepareApeman ( agressivity ) ; begin
43842: LD_INT 0
43844: PPUSH
// uc_side := 0 ;
43845: LD_ADDR_OWVAR 20
43849: PUSH
43850: LD_INT 0
43852: ST_TO_ADDR
// uc_nation := 0 ;
43853: LD_ADDR_OWVAR 21
43857: PUSH
43858: LD_INT 0
43860: ST_TO_ADDR
// hc_sex := sex_male ;
43861: LD_ADDR_OWVAR 27
43865: PUSH
43866: LD_INT 1
43868: ST_TO_ADDR
// hc_class := class_apeman ;
43869: LD_ADDR_OWVAR 28
43873: PUSH
43874: LD_INT 12
43876: ST_TO_ADDR
// hc_gallery :=  ;
43877: LD_ADDR_OWVAR 33
43881: PUSH
43882: LD_STRING 
43884: ST_TO_ADDR
// if agressivity = 0 then
43885: LD_VAR 0 1
43889: PUSH
43890: LD_INT 0
43892: EQUAL
43893: IFFALSE 43905
// hc_agressivity := 0 else
43895: LD_ADDR_OWVAR 35
43899: PUSH
43900: LD_INT 0
43902: ST_TO_ADDR
43903: GO 43926
// hc_agressivity := rand ( - agressivity , agressivity ) ;
43905: LD_ADDR_OWVAR 35
43909: PUSH
43910: LD_VAR 0 1
43914: NEG
43915: PPUSH
43916: LD_VAR 0 1
43920: PPUSH
43921: CALL_OW 12
43925: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
43926: LD_ADDR_OWVAR 31
43930: PUSH
43931: LD_INT 0
43933: PPUSH
43934: LD_INT 3
43936: PPUSH
43937: CALL_OW 12
43941: PUSH
43942: LD_INT 0
43944: PPUSH
43945: LD_INT 3
43947: PPUSH
43948: CALL_OW 12
43952: PUSH
43953: LD_INT 0
43955: PUSH
43956: LD_INT 0
43958: PUSH
43959: EMPTY
43960: LIST
43961: LIST
43962: LIST
43963: LIST
43964: ST_TO_ADDR
// end ;
43965: LD_VAR 0 2
43969: RET
// export function PrepareTiger ( agressivity ) ; begin
43970: LD_INT 0
43972: PPUSH
// uc_side := 0 ;
43973: LD_ADDR_OWVAR 20
43977: PUSH
43978: LD_INT 0
43980: ST_TO_ADDR
// uc_nation := 0 ;
43981: LD_ADDR_OWVAR 21
43985: PUSH
43986: LD_INT 0
43988: ST_TO_ADDR
// hc_class := class_tiger ;
43989: LD_ADDR_OWVAR 28
43993: PUSH
43994: LD_INT 14
43996: ST_TO_ADDR
// hc_gallery :=  ;
43997: LD_ADDR_OWVAR 33
44001: PUSH
44002: LD_STRING 
44004: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
44005: LD_ADDR_OWVAR 35
44009: PUSH
44010: LD_VAR 0 1
44014: NEG
44015: PPUSH
44016: LD_VAR 0 1
44020: PPUSH
44021: CALL_OW 12
44025: ST_TO_ADDR
// end ;
44026: LD_VAR 0 2
44030: RET
// export function PrepareEnchidna ( ) ; begin
44031: LD_INT 0
44033: PPUSH
// uc_side := 0 ;
44034: LD_ADDR_OWVAR 20
44038: PUSH
44039: LD_INT 0
44041: ST_TO_ADDR
// uc_nation := 0 ;
44042: LD_ADDR_OWVAR 21
44046: PUSH
44047: LD_INT 0
44049: ST_TO_ADDR
// hc_class := class_baggie ;
44050: LD_ADDR_OWVAR 28
44054: PUSH
44055: LD_INT 13
44057: ST_TO_ADDR
// hc_gallery :=  ;
44058: LD_ADDR_OWVAR 33
44062: PUSH
44063: LD_STRING 
44065: ST_TO_ADDR
// end ;
44066: LD_VAR 0 1
44070: RET
// export function PrepareFrog ( ) ; begin
44071: LD_INT 0
44073: PPUSH
// uc_side := 0 ;
44074: LD_ADDR_OWVAR 20
44078: PUSH
44079: LD_INT 0
44081: ST_TO_ADDR
// uc_nation := 0 ;
44082: LD_ADDR_OWVAR 21
44086: PUSH
44087: LD_INT 0
44089: ST_TO_ADDR
// hc_class := class_frog ;
44090: LD_ADDR_OWVAR 28
44094: PUSH
44095: LD_INT 19
44097: ST_TO_ADDR
// hc_gallery :=  ;
44098: LD_ADDR_OWVAR 33
44102: PUSH
44103: LD_STRING 
44105: ST_TO_ADDR
// end ;
44106: LD_VAR 0 1
44110: RET
// export function PrepareFish ( ) ; begin
44111: LD_INT 0
44113: PPUSH
// uc_side := 0 ;
44114: LD_ADDR_OWVAR 20
44118: PUSH
44119: LD_INT 0
44121: ST_TO_ADDR
// uc_nation := 0 ;
44122: LD_ADDR_OWVAR 21
44126: PUSH
44127: LD_INT 0
44129: ST_TO_ADDR
// hc_class := class_fish ;
44130: LD_ADDR_OWVAR 28
44134: PUSH
44135: LD_INT 20
44137: ST_TO_ADDR
// hc_gallery :=  ;
44138: LD_ADDR_OWVAR 33
44142: PUSH
44143: LD_STRING 
44145: ST_TO_ADDR
// end ;
44146: LD_VAR 0 1
44150: RET
// export function PrepareBird ( ) ; begin
44151: LD_INT 0
44153: PPUSH
// uc_side := 0 ;
44154: LD_ADDR_OWVAR 20
44158: PUSH
44159: LD_INT 0
44161: ST_TO_ADDR
// uc_nation := 0 ;
44162: LD_ADDR_OWVAR 21
44166: PUSH
44167: LD_INT 0
44169: ST_TO_ADDR
// hc_class := class_phororhacos ;
44170: LD_ADDR_OWVAR 28
44174: PUSH
44175: LD_INT 18
44177: ST_TO_ADDR
// hc_gallery :=  ;
44178: LD_ADDR_OWVAR 33
44182: PUSH
44183: LD_STRING 
44185: ST_TO_ADDR
// end ;
44186: LD_VAR 0 1
44190: RET
// export function PrepareHorse ( ) ; begin
44191: LD_INT 0
44193: PPUSH
// uc_side := 0 ;
44194: LD_ADDR_OWVAR 20
44198: PUSH
44199: LD_INT 0
44201: ST_TO_ADDR
// uc_nation := 0 ;
44202: LD_ADDR_OWVAR 21
44206: PUSH
44207: LD_INT 0
44209: ST_TO_ADDR
// hc_class := class_horse ;
44210: LD_ADDR_OWVAR 28
44214: PUSH
44215: LD_INT 21
44217: ST_TO_ADDR
// hc_gallery :=  ;
44218: LD_ADDR_OWVAR 33
44222: PUSH
44223: LD_STRING 
44225: ST_TO_ADDR
// end ;
44226: LD_VAR 0 1
44230: RET
// export function PrepareMastodont ( ) ; begin
44231: LD_INT 0
44233: PPUSH
// uc_side := 0 ;
44234: LD_ADDR_OWVAR 20
44238: PUSH
44239: LD_INT 0
44241: ST_TO_ADDR
// uc_nation := 0 ;
44242: LD_ADDR_OWVAR 21
44246: PUSH
44247: LD_INT 0
44249: ST_TO_ADDR
// vc_chassis := class_mastodont ;
44250: LD_ADDR_OWVAR 37
44254: PUSH
44255: LD_INT 31
44257: ST_TO_ADDR
// vc_control := control_rider ;
44258: LD_ADDR_OWVAR 38
44262: PUSH
44263: LD_INT 4
44265: ST_TO_ADDR
// end ;
44266: LD_VAR 0 1
44270: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
44271: LD_INT 0
44273: PPUSH
44274: PPUSH
44275: PPUSH
// uc_side = 0 ;
44276: LD_ADDR_OWVAR 20
44280: PUSH
44281: LD_INT 0
44283: ST_TO_ADDR
// uc_nation = 0 ;
44284: LD_ADDR_OWVAR 21
44288: PUSH
44289: LD_INT 0
44291: ST_TO_ADDR
// InitHc_All ( ) ;
44292: CALL_OW 584
// InitVc ;
44296: CALL_OW 20
// if mastodonts then
44300: LD_VAR 0 6
44304: IFFALSE 44371
// for i = 1 to mastodonts do
44306: LD_ADDR_VAR 0 11
44310: PUSH
44311: DOUBLE
44312: LD_INT 1
44314: DEC
44315: ST_TO_ADDR
44316: LD_VAR 0 6
44320: PUSH
44321: FOR_TO
44322: IFFALSE 44369
// begin vc_chassis := 31 ;
44324: LD_ADDR_OWVAR 37
44328: PUSH
44329: LD_INT 31
44331: ST_TO_ADDR
// vc_control := control_rider ;
44332: LD_ADDR_OWVAR 38
44336: PUSH
44337: LD_INT 4
44339: ST_TO_ADDR
// animal := CreateVehicle ;
44340: LD_ADDR_VAR 0 12
44344: PUSH
44345: CALL_OW 45
44349: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
44350: LD_VAR 0 12
44354: PPUSH
44355: LD_VAR 0 8
44359: PPUSH
44360: LD_INT 0
44362: PPUSH
44363: CALL 46499 0 3
// end ;
44367: GO 44321
44369: POP
44370: POP
// if horses then
44371: LD_VAR 0 5
44375: IFFALSE 44442
// for i = 1 to horses do
44377: LD_ADDR_VAR 0 11
44381: PUSH
44382: DOUBLE
44383: LD_INT 1
44385: DEC
44386: ST_TO_ADDR
44387: LD_VAR 0 5
44391: PUSH
44392: FOR_TO
44393: IFFALSE 44440
// begin hc_class := 21 ;
44395: LD_ADDR_OWVAR 28
44399: PUSH
44400: LD_INT 21
44402: ST_TO_ADDR
// hc_gallery :=  ;
44403: LD_ADDR_OWVAR 33
44407: PUSH
44408: LD_STRING 
44410: ST_TO_ADDR
// animal := CreateHuman ;
44411: LD_ADDR_VAR 0 12
44415: PUSH
44416: CALL_OW 44
44420: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
44421: LD_VAR 0 12
44425: PPUSH
44426: LD_VAR 0 8
44430: PPUSH
44431: LD_INT 0
44433: PPUSH
44434: CALL 46499 0 3
// end ;
44438: GO 44392
44440: POP
44441: POP
// if birds then
44442: LD_VAR 0 1
44446: IFFALSE 44513
// for i = 1 to birds do
44448: LD_ADDR_VAR 0 11
44452: PUSH
44453: DOUBLE
44454: LD_INT 1
44456: DEC
44457: ST_TO_ADDR
44458: LD_VAR 0 1
44462: PUSH
44463: FOR_TO
44464: IFFALSE 44511
// begin hc_class := 18 ;
44466: LD_ADDR_OWVAR 28
44470: PUSH
44471: LD_INT 18
44473: ST_TO_ADDR
// hc_gallery =  ;
44474: LD_ADDR_OWVAR 33
44478: PUSH
44479: LD_STRING 
44481: ST_TO_ADDR
// animal := CreateHuman ;
44482: LD_ADDR_VAR 0 12
44486: PUSH
44487: CALL_OW 44
44491: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
44492: LD_VAR 0 12
44496: PPUSH
44497: LD_VAR 0 8
44501: PPUSH
44502: LD_INT 0
44504: PPUSH
44505: CALL 46499 0 3
// end ;
44509: GO 44463
44511: POP
44512: POP
// if tigers then
44513: LD_VAR 0 2
44517: IFFALSE 44601
// for i = 1 to tigers do
44519: LD_ADDR_VAR 0 11
44523: PUSH
44524: DOUBLE
44525: LD_INT 1
44527: DEC
44528: ST_TO_ADDR
44529: LD_VAR 0 2
44533: PUSH
44534: FOR_TO
44535: IFFALSE 44599
// begin hc_class = class_tiger ;
44537: LD_ADDR_OWVAR 28
44541: PUSH
44542: LD_INT 14
44544: ST_TO_ADDR
// hc_gallery =  ;
44545: LD_ADDR_OWVAR 33
44549: PUSH
44550: LD_STRING 
44552: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
44553: LD_ADDR_OWVAR 35
44557: PUSH
44558: LD_INT 7
44560: NEG
44561: PPUSH
44562: LD_INT 7
44564: PPUSH
44565: CALL_OW 12
44569: ST_TO_ADDR
// animal := CreateHuman ;
44570: LD_ADDR_VAR 0 12
44574: PUSH
44575: CALL_OW 44
44579: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
44580: LD_VAR 0 12
44584: PPUSH
44585: LD_VAR 0 8
44589: PPUSH
44590: LD_INT 0
44592: PPUSH
44593: CALL 46499 0 3
// end ;
44597: GO 44534
44599: POP
44600: POP
// if apemans then
44601: LD_VAR 0 3
44605: IFFALSE 44728
// for i = 1 to apemans do
44607: LD_ADDR_VAR 0 11
44611: PUSH
44612: DOUBLE
44613: LD_INT 1
44615: DEC
44616: ST_TO_ADDR
44617: LD_VAR 0 3
44621: PUSH
44622: FOR_TO
44623: IFFALSE 44726
// begin hc_class = class_apeman ;
44625: LD_ADDR_OWVAR 28
44629: PUSH
44630: LD_INT 12
44632: ST_TO_ADDR
// hc_gallery =  ;
44633: LD_ADDR_OWVAR 33
44637: PUSH
44638: LD_STRING 
44640: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
44641: LD_ADDR_OWVAR 35
44645: PUSH
44646: LD_INT 2
44648: NEG
44649: PPUSH
44650: LD_INT 2
44652: PPUSH
44653: CALL_OW 12
44657: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
44658: LD_ADDR_OWVAR 31
44662: PUSH
44663: LD_INT 1
44665: PPUSH
44666: LD_INT 3
44668: PPUSH
44669: CALL_OW 12
44673: PUSH
44674: LD_INT 1
44676: PPUSH
44677: LD_INT 3
44679: PPUSH
44680: CALL_OW 12
44684: PUSH
44685: LD_INT 0
44687: PUSH
44688: LD_INT 0
44690: PUSH
44691: EMPTY
44692: LIST
44693: LIST
44694: LIST
44695: LIST
44696: ST_TO_ADDR
// animal := CreateHuman ;
44697: LD_ADDR_VAR 0 12
44701: PUSH
44702: CALL_OW 44
44706: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
44707: LD_VAR 0 12
44711: PPUSH
44712: LD_VAR 0 8
44716: PPUSH
44717: LD_INT 0
44719: PPUSH
44720: CALL 46499 0 3
// end ;
44724: GO 44622
44726: POP
44727: POP
// if enchidnas then
44728: LD_VAR 0 4
44732: IFFALSE 44799
// for i = 1 to enchidnas do
44734: LD_ADDR_VAR 0 11
44738: PUSH
44739: DOUBLE
44740: LD_INT 1
44742: DEC
44743: ST_TO_ADDR
44744: LD_VAR 0 4
44748: PUSH
44749: FOR_TO
44750: IFFALSE 44797
// begin hc_class = 13 ;
44752: LD_ADDR_OWVAR 28
44756: PUSH
44757: LD_INT 13
44759: ST_TO_ADDR
// hc_gallery =  ;
44760: LD_ADDR_OWVAR 33
44764: PUSH
44765: LD_STRING 
44767: ST_TO_ADDR
// animal := CreateHuman ;
44768: LD_ADDR_VAR 0 12
44772: PUSH
44773: CALL_OW 44
44777: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
44778: LD_VAR 0 12
44782: PPUSH
44783: LD_VAR 0 8
44787: PPUSH
44788: LD_INT 0
44790: PPUSH
44791: CALL 46499 0 3
// end ;
44795: GO 44749
44797: POP
44798: POP
// if fishes then
44799: LD_VAR 0 7
44803: IFFALSE 44870
// for i = 1 to fishes do
44805: LD_ADDR_VAR 0 11
44809: PUSH
44810: DOUBLE
44811: LD_INT 1
44813: DEC
44814: ST_TO_ADDR
44815: LD_VAR 0 7
44819: PUSH
44820: FOR_TO
44821: IFFALSE 44868
// begin hc_class = 20 ;
44823: LD_ADDR_OWVAR 28
44827: PUSH
44828: LD_INT 20
44830: ST_TO_ADDR
// hc_gallery =  ;
44831: LD_ADDR_OWVAR 33
44835: PUSH
44836: LD_STRING 
44838: ST_TO_ADDR
// animal := CreateHuman ;
44839: LD_ADDR_VAR 0 12
44843: PUSH
44844: CALL_OW 44
44848: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
44849: LD_VAR 0 12
44853: PPUSH
44854: LD_VAR 0 9
44858: PPUSH
44859: LD_INT 0
44861: PPUSH
44862: CALL 46499 0 3
// end ;
44866: GO 44820
44868: POP
44869: POP
// end ;
44870: LD_VAR 0 10
44874: RET
// export function WantHeal ( sci , unit ) ; begin
44875: LD_INT 0
44877: PPUSH
// if GetTaskList ( sci ) > 0 then
44878: LD_VAR 0 1
44882: PPUSH
44883: CALL_OW 437
44887: PUSH
44888: LD_INT 0
44890: GREATER
44891: IFFALSE 44961
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
44893: LD_VAR 0 1
44897: PPUSH
44898: CALL_OW 437
44902: PUSH
44903: LD_INT 1
44905: ARRAY
44906: PUSH
44907: LD_INT 1
44909: ARRAY
44910: PUSH
44911: LD_STRING l
44913: EQUAL
44914: PUSH
44915: LD_VAR 0 1
44919: PPUSH
44920: CALL_OW 437
44924: PUSH
44925: LD_INT 1
44927: ARRAY
44928: PUSH
44929: LD_INT 4
44931: ARRAY
44932: PUSH
44933: LD_VAR 0 2
44937: EQUAL
44938: AND
44939: IFFALSE 44951
// result := true else
44941: LD_ADDR_VAR 0 3
44945: PUSH
44946: LD_INT 1
44948: ST_TO_ADDR
44949: GO 44959
// result := false ;
44951: LD_ADDR_VAR 0 3
44955: PUSH
44956: LD_INT 0
44958: ST_TO_ADDR
// end else
44959: GO 44969
// result := false ;
44961: LD_ADDR_VAR 0 3
44965: PUSH
44966: LD_INT 0
44968: ST_TO_ADDR
// end ;
44969: LD_VAR 0 3
44973: RET
// export function HealTarget ( sci ) ; begin
44974: LD_INT 0
44976: PPUSH
// if not sci then
44977: LD_VAR 0 1
44981: NOT
44982: IFFALSE 44986
// exit ;
44984: GO 45051
// result := 0 ;
44986: LD_ADDR_VAR 0 2
44990: PUSH
44991: LD_INT 0
44993: ST_TO_ADDR
// if GetTaskList ( sci ) then
44994: LD_VAR 0 1
44998: PPUSH
44999: CALL_OW 437
45003: IFFALSE 45051
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
45005: LD_VAR 0 1
45009: PPUSH
45010: CALL_OW 437
45014: PUSH
45015: LD_INT 1
45017: ARRAY
45018: PUSH
45019: LD_INT 1
45021: ARRAY
45022: PUSH
45023: LD_STRING l
45025: EQUAL
45026: IFFALSE 45051
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
45028: LD_ADDR_VAR 0 2
45032: PUSH
45033: LD_VAR 0 1
45037: PPUSH
45038: CALL_OW 437
45042: PUSH
45043: LD_INT 1
45045: ARRAY
45046: PUSH
45047: LD_INT 4
45049: ARRAY
45050: ST_TO_ADDR
// end ;
45051: LD_VAR 0 2
45055: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
45056: LD_INT 0
45058: PPUSH
45059: PPUSH
45060: PPUSH
45061: PPUSH
// if not base_units then
45062: LD_VAR 0 1
45066: NOT
45067: IFFALSE 45071
// exit ;
45069: GO 45158
// result := false ;
45071: LD_ADDR_VAR 0 2
45075: PUSH
45076: LD_INT 0
45078: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
45079: LD_ADDR_VAR 0 5
45083: PUSH
45084: LD_VAR 0 1
45088: PPUSH
45089: LD_INT 21
45091: PUSH
45092: LD_INT 3
45094: PUSH
45095: EMPTY
45096: LIST
45097: LIST
45098: PPUSH
45099: CALL_OW 72
45103: ST_TO_ADDR
// if not tmp then
45104: LD_VAR 0 5
45108: NOT
45109: IFFALSE 45113
// exit ;
45111: GO 45158
// for i in tmp do
45113: LD_ADDR_VAR 0 3
45117: PUSH
45118: LD_VAR 0 5
45122: PUSH
45123: FOR_IN
45124: IFFALSE 45156
// begin result := EnemyInRange ( i , 22 ) ;
45126: LD_ADDR_VAR 0 2
45130: PUSH
45131: LD_VAR 0 3
45135: PPUSH
45136: LD_INT 22
45138: PPUSH
45139: CALL 42736 0 2
45143: ST_TO_ADDR
// if result then
45144: LD_VAR 0 2
45148: IFFALSE 45154
// exit ;
45150: POP
45151: POP
45152: GO 45158
// end ;
45154: GO 45123
45156: POP
45157: POP
// end ;
45158: LD_VAR 0 2
45162: RET
// export function FilterByTag ( units , tag ) ; begin
45163: LD_INT 0
45165: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
45166: LD_ADDR_VAR 0 3
45170: PUSH
45171: LD_VAR 0 1
45175: PPUSH
45176: LD_INT 120
45178: PUSH
45179: LD_VAR 0 2
45183: PUSH
45184: EMPTY
45185: LIST
45186: LIST
45187: PPUSH
45188: CALL_OW 72
45192: ST_TO_ADDR
// end ;
45193: LD_VAR 0 3
45197: RET
// export function IsDriver ( un ) ; begin
45198: LD_INT 0
45200: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
45201: LD_ADDR_VAR 0 2
45205: PUSH
45206: LD_VAR 0 1
45210: PUSH
45211: LD_INT 55
45213: PUSH
45214: EMPTY
45215: LIST
45216: PPUSH
45217: CALL_OW 69
45221: IN
45222: ST_TO_ADDR
// end ;
45223: LD_VAR 0 2
45227: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
45228: LD_INT 0
45230: PPUSH
45231: PPUSH
// list := [ ] ;
45232: LD_ADDR_VAR 0 5
45236: PUSH
45237: EMPTY
45238: ST_TO_ADDR
// case d of 0 :
45239: LD_VAR 0 3
45243: PUSH
45244: LD_INT 0
45246: DOUBLE
45247: EQUAL
45248: IFTRUE 45252
45250: GO 45385
45252: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
45253: LD_ADDR_VAR 0 5
45257: PUSH
45258: LD_VAR 0 1
45262: PUSH
45263: LD_INT 4
45265: MINUS
45266: PUSH
45267: LD_VAR 0 2
45271: PUSH
45272: LD_INT 4
45274: MINUS
45275: PUSH
45276: LD_INT 2
45278: PUSH
45279: EMPTY
45280: LIST
45281: LIST
45282: LIST
45283: PUSH
45284: LD_VAR 0 1
45288: PUSH
45289: LD_INT 3
45291: MINUS
45292: PUSH
45293: LD_VAR 0 2
45297: PUSH
45298: LD_INT 1
45300: PUSH
45301: EMPTY
45302: LIST
45303: LIST
45304: LIST
45305: PUSH
45306: LD_VAR 0 1
45310: PUSH
45311: LD_INT 4
45313: PLUS
45314: PUSH
45315: LD_VAR 0 2
45319: PUSH
45320: LD_INT 4
45322: PUSH
45323: EMPTY
45324: LIST
45325: LIST
45326: LIST
45327: PUSH
45328: LD_VAR 0 1
45332: PUSH
45333: LD_INT 3
45335: PLUS
45336: PUSH
45337: LD_VAR 0 2
45341: PUSH
45342: LD_INT 3
45344: PLUS
45345: PUSH
45346: LD_INT 5
45348: PUSH
45349: EMPTY
45350: LIST
45351: LIST
45352: LIST
45353: PUSH
45354: LD_VAR 0 1
45358: PUSH
45359: LD_VAR 0 2
45363: PUSH
45364: LD_INT 4
45366: PLUS
45367: PUSH
45368: LD_INT 0
45370: PUSH
45371: EMPTY
45372: LIST
45373: LIST
45374: LIST
45375: PUSH
45376: EMPTY
45377: LIST
45378: LIST
45379: LIST
45380: LIST
45381: LIST
45382: ST_TO_ADDR
// end ; 1 :
45383: GO 46083
45385: LD_INT 1
45387: DOUBLE
45388: EQUAL
45389: IFTRUE 45393
45391: GO 45526
45393: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
45394: LD_ADDR_VAR 0 5
45398: PUSH
45399: LD_VAR 0 1
45403: PUSH
45404: LD_VAR 0 2
45408: PUSH
45409: LD_INT 4
45411: MINUS
45412: PUSH
45413: LD_INT 3
45415: PUSH
45416: EMPTY
45417: LIST
45418: LIST
45419: LIST
45420: PUSH
45421: LD_VAR 0 1
45425: PUSH
45426: LD_INT 3
45428: MINUS
45429: PUSH
45430: LD_VAR 0 2
45434: PUSH
45435: LD_INT 3
45437: MINUS
45438: PUSH
45439: LD_INT 2
45441: PUSH
45442: EMPTY
45443: LIST
45444: LIST
45445: LIST
45446: PUSH
45447: LD_VAR 0 1
45451: PUSH
45452: LD_INT 4
45454: MINUS
45455: PUSH
45456: LD_VAR 0 2
45460: PUSH
45461: LD_INT 1
45463: PUSH
45464: EMPTY
45465: LIST
45466: LIST
45467: LIST
45468: PUSH
45469: LD_VAR 0 1
45473: PUSH
45474: LD_VAR 0 2
45478: PUSH
45479: LD_INT 3
45481: PLUS
45482: PUSH
45483: LD_INT 0
45485: PUSH
45486: EMPTY
45487: LIST
45488: LIST
45489: LIST
45490: PUSH
45491: LD_VAR 0 1
45495: PUSH
45496: LD_INT 4
45498: PLUS
45499: PUSH
45500: LD_VAR 0 2
45504: PUSH
45505: LD_INT 4
45507: PLUS
45508: PUSH
45509: LD_INT 5
45511: PUSH
45512: EMPTY
45513: LIST
45514: LIST
45515: LIST
45516: PUSH
45517: EMPTY
45518: LIST
45519: LIST
45520: LIST
45521: LIST
45522: LIST
45523: ST_TO_ADDR
// end ; 2 :
45524: GO 46083
45526: LD_INT 2
45528: DOUBLE
45529: EQUAL
45530: IFTRUE 45534
45532: GO 45663
45534: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
45535: LD_ADDR_VAR 0 5
45539: PUSH
45540: LD_VAR 0 1
45544: PUSH
45545: LD_VAR 0 2
45549: PUSH
45550: LD_INT 3
45552: MINUS
45553: PUSH
45554: LD_INT 3
45556: PUSH
45557: EMPTY
45558: LIST
45559: LIST
45560: LIST
45561: PUSH
45562: LD_VAR 0 1
45566: PUSH
45567: LD_INT 4
45569: PLUS
45570: PUSH
45571: LD_VAR 0 2
45575: PUSH
45576: LD_INT 4
45578: PUSH
45579: EMPTY
45580: LIST
45581: LIST
45582: LIST
45583: PUSH
45584: LD_VAR 0 1
45588: PUSH
45589: LD_VAR 0 2
45593: PUSH
45594: LD_INT 4
45596: PLUS
45597: PUSH
45598: LD_INT 0
45600: PUSH
45601: EMPTY
45602: LIST
45603: LIST
45604: LIST
45605: PUSH
45606: LD_VAR 0 1
45610: PUSH
45611: LD_INT 3
45613: MINUS
45614: PUSH
45615: LD_VAR 0 2
45619: PUSH
45620: LD_INT 1
45622: PUSH
45623: EMPTY
45624: LIST
45625: LIST
45626: LIST
45627: PUSH
45628: LD_VAR 0 1
45632: PUSH
45633: LD_INT 4
45635: MINUS
45636: PUSH
45637: LD_VAR 0 2
45641: PUSH
45642: LD_INT 4
45644: MINUS
45645: PUSH
45646: LD_INT 2
45648: PUSH
45649: EMPTY
45650: LIST
45651: LIST
45652: LIST
45653: PUSH
45654: EMPTY
45655: LIST
45656: LIST
45657: LIST
45658: LIST
45659: LIST
45660: ST_TO_ADDR
// end ; 3 :
45661: GO 46083
45663: LD_INT 3
45665: DOUBLE
45666: EQUAL
45667: IFTRUE 45671
45669: GO 45804
45671: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
45672: LD_ADDR_VAR 0 5
45676: PUSH
45677: LD_VAR 0 1
45681: PUSH
45682: LD_INT 3
45684: PLUS
45685: PUSH
45686: LD_VAR 0 2
45690: PUSH
45691: LD_INT 4
45693: PUSH
45694: EMPTY
45695: LIST
45696: LIST
45697: LIST
45698: PUSH
45699: LD_VAR 0 1
45703: PUSH
45704: LD_INT 4
45706: PLUS
45707: PUSH
45708: LD_VAR 0 2
45712: PUSH
45713: LD_INT 4
45715: PLUS
45716: PUSH
45717: LD_INT 5
45719: PUSH
45720: EMPTY
45721: LIST
45722: LIST
45723: LIST
45724: PUSH
45725: LD_VAR 0 1
45729: PUSH
45730: LD_INT 4
45732: MINUS
45733: PUSH
45734: LD_VAR 0 2
45738: PUSH
45739: LD_INT 1
45741: PUSH
45742: EMPTY
45743: LIST
45744: LIST
45745: LIST
45746: PUSH
45747: LD_VAR 0 1
45751: PUSH
45752: LD_VAR 0 2
45756: PUSH
45757: LD_INT 4
45759: MINUS
45760: PUSH
45761: LD_INT 3
45763: PUSH
45764: EMPTY
45765: LIST
45766: LIST
45767: LIST
45768: PUSH
45769: LD_VAR 0 1
45773: PUSH
45774: LD_INT 3
45776: MINUS
45777: PUSH
45778: LD_VAR 0 2
45782: PUSH
45783: LD_INT 3
45785: MINUS
45786: PUSH
45787: LD_INT 2
45789: PUSH
45790: EMPTY
45791: LIST
45792: LIST
45793: LIST
45794: PUSH
45795: EMPTY
45796: LIST
45797: LIST
45798: LIST
45799: LIST
45800: LIST
45801: ST_TO_ADDR
// end ; 4 :
45802: GO 46083
45804: LD_INT 4
45806: DOUBLE
45807: EQUAL
45808: IFTRUE 45812
45810: GO 45945
45812: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
45813: LD_ADDR_VAR 0 5
45817: PUSH
45818: LD_VAR 0 1
45822: PUSH
45823: LD_VAR 0 2
45827: PUSH
45828: LD_INT 4
45830: PLUS
45831: PUSH
45832: LD_INT 0
45834: PUSH
45835: EMPTY
45836: LIST
45837: LIST
45838: LIST
45839: PUSH
45840: LD_VAR 0 1
45844: PUSH
45845: LD_INT 3
45847: PLUS
45848: PUSH
45849: LD_VAR 0 2
45853: PUSH
45854: LD_INT 3
45856: PLUS
45857: PUSH
45858: LD_INT 5
45860: PUSH
45861: EMPTY
45862: LIST
45863: LIST
45864: LIST
45865: PUSH
45866: LD_VAR 0 1
45870: PUSH
45871: LD_INT 4
45873: PLUS
45874: PUSH
45875: LD_VAR 0 2
45879: PUSH
45880: LD_INT 4
45882: PUSH
45883: EMPTY
45884: LIST
45885: LIST
45886: LIST
45887: PUSH
45888: LD_VAR 0 1
45892: PUSH
45893: LD_VAR 0 2
45897: PUSH
45898: LD_INT 3
45900: MINUS
45901: PUSH
45902: LD_INT 3
45904: PUSH
45905: EMPTY
45906: LIST
45907: LIST
45908: LIST
45909: PUSH
45910: LD_VAR 0 1
45914: PUSH
45915: LD_INT 4
45917: MINUS
45918: PUSH
45919: LD_VAR 0 2
45923: PUSH
45924: LD_INT 4
45926: MINUS
45927: PUSH
45928: LD_INT 2
45930: PUSH
45931: EMPTY
45932: LIST
45933: LIST
45934: LIST
45935: PUSH
45936: EMPTY
45937: LIST
45938: LIST
45939: LIST
45940: LIST
45941: LIST
45942: ST_TO_ADDR
// end ; 5 :
45943: GO 46083
45945: LD_INT 5
45947: DOUBLE
45948: EQUAL
45949: IFTRUE 45953
45951: GO 46082
45953: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
45954: LD_ADDR_VAR 0 5
45958: PUSH
45959: LD_VAR 0 1
45963: PUSH
45964: LD_INT 4
45966: MINUS
45967: PUSH
45968: LD_VAR 0 2
45972: PUSH
45973: LD_INT 1
45975: PUSH
45976: EMPTY
45977: LIST
45978: LIST
45979: LIST
45980: PUSH
45981: LD_VAR 0 1
45985: PUSH
45986: LD_VAR 0 2
45990: PUSH
45991: LD_INT 4
45993: MINUS
45994: PUSH
45995: LD_INT 3
45997: PUSH
45998: EMPTY
45999: LIST
46000: LIST
46001: LIST
46002: PUSH
46003: LD_VAR 0 1
46007: PUSH
46008: LD_INT 4
46010: PLUS
46011: PUSH
46012: LD_VAR 0 2
46016: PUSH
46017: LD_INT 4
46019: PLUS
46020: PUSH
46021: LD_INT 5
46023: PUSH
46024: EMPTY
46025: LIST
46026: LIST
46027: LIST
46028: PUSH
46029: LD_VAR 0 1
46033: PUSH
46034: LD_INT 3
46036: PLUS
46037: PUSH
46038: LD_VAR 0 2
46042: PUSH
46043: LD_INT 4
46045: PUSH
46046: EMPTY
46047: LIST
46048: LIST
46049: LIST
46050: PUSH
46051: LD_VAR 0 1
46055: PUSH
46056: LD_VAR 0 2
46060: PUSH
46061: LD_INT 3
46063: PLUS
46064: PUSH
46065: LD_INT 0
46067: PUSH
46068: EMPTY
46069: LIST
46070: LIST
46071: LIST
46072: PUSH
46073: EMPTY
46074: LIST
46075: LIST
46076: LIST
46077: LIST
46078: LIST
46079: ST_TO_ADDR
// end ; end ;
46080: GO 46083
46082: POP
// result := list ;
46083: LD_ADDR_VAR 0 4
46087: PUSH
46088: LD_VAR 0 5
46092: ST_TO_ADDR
// end ;
46093: LD_VAR 0 4
46097: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
46098: LD_INT 0
46100: PPUSH
46101: PPUSH
46102: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
46103: LD_VAR 0 1
46107: NOT
46108: PUSH
46109: LD_VAR 0 2
46113: PUSH
46114: LD_INT 1
46116: PUSH
46117: LD_INT 2
46119: PUSH
46120: LD_INT 3
46122: PUSH
46123: LD_INT 4
46125: PUSH
46126: EMPTY
46127: LIST
46128: LIST
46129: LIST
46130: LIST
46131: IN
46132: NOT
46133: OR
46134: IFFALSE 46138
// exit ;
46136: GO 46221
// tmp := [ ] ;
46138: LD_ADDR_VAR 0 5
46142: PUSH
46143: EMPTY
46144: ST_TO_ADDR
// for i in units do
46145: LD_ADDR_VAR 0 4
46149: PUSH
46150: LD_VAR 0 1
46154: PUSH
46155: FOR_IN
46156: IFFALSE 46190
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
46158: LD_ADDR_VAR 0 5
46162: PUSH
46163: LD_VAR 0 5
46167: PPUSH
46168: LD_VAR 0 4
46172: PPUSH
46173: LD_VAR 0 2
46177: PPUSH
46178: CALL_OW 259
46182: PPUSH
46183: CALL 47594 0 2
46187: ST_TO_ADDR
46188: GO 46155
46190: POP
46191: POP
// if not tmp then
46192: LD_VAR 0 5
46196: NOT
46197: IFFALSE 46201
// exit ;
46199: GO 46221
// result := SortListByListDesc ( units , tmp ) ;
46201: LD_ADDR_VAR 0 3
46205: PUSH
46206: LD_VAR 0 1
46210: PPUSH
46211: LD_VAR 0 5
46215: PPUSH
46216: CALL_OW 77
46220: ST_TO_ADDR
// end ;
46221: LD_VAR 0 3
46225: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
46226: LD_INT 0
46228: PPUSH
46229: PPUSH
46230: PPUSH
// result := false ;
46231: LD_ADDR_VAR 0 3
46235: PUSH
46236: LD_INT 0
46238: ST_TO_ADDR
// if not building then
46239: LD_VAR 0 2
46243: NOT
46244: IFFALSE 46248
// exit ;
46246: GO 46386
// x := GetX ( building ) ;
46248: LD_ADDR_VAR 0 4
46252: PUSH
46253: LD_VAR 0 2
46257: PPUSH
46258: CALL_OW 250
46262: ST_TO_ADDR
// y := GetY ( building ) ;
46263: LD_ADDR_VAR 0 5
46267: PUSH
46268: LD_VAR 0 2
46272: PPUSH
46273: CALL_OW 251
46277: ST_TO_ADDR
// if not x or not y then
46278: LD_VAR 0 4
46282: NOT
46283: PUSH
46284: LD_VAR 0 5
46288: NOT
46289: OR
46290: IFFALSE 46294
// exit ;
46292: GO 46386
// if GetTaskList ( unit ) then
46294: LD_VAR 0 1
46298: PPUSH
46299: CALL_OW 437
46303: IFFALSE 46386
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
46305: LD_STRING e
46307: PUSH
46308: LD_VAR 0 1
46312: PPUSH
46313: CALL_OW 437
46317: PUSH
46318: LD_INT 1
46320: ARRAY
46321: PUSH
46322: LD_INT 1
46324: ARRAY
46325: EQUAL
46326: PUSH
46327: LD_VAR 0 4
46331: PUSH
46332: LD_VAR 0 1
46336: PPUSH
46337: CALL_OW 437
46341: PUSH
46342: LD_INT 1
46344: ARRAY
46345: PUSH
46346: LD_INT 2
46348: ARRAY
46349: EQUAL
46350: AND
46351: PUSH
46352: LD_VAR 0 5
46356: PUSH
46357: LD_VAR 0 1
46361: PPUSH
46362: CALL_OW 437
46366: PUSH
46367: LD_INT 1
46369: ARRAY
46370: PUSH
46371: LD_INT 3
46373: ARRAY
46374: EQUAL
46375: AND
46376: IFFALSE 46386
// result := true end ;
46378: LD_ADDR_VAR 0 3
46382: PUSH
46383: LD_INT 1
46385: ST_TO_ADDR
// end ;
46386: LD_VAR 0 3
46390: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
46391: LD_INT 0
46393: PPUSH
// result := false ;
46394: LD_ADDR_VAR 0 4
46398: PUSH
46399: LD_INT 0
46401: ST_TO_ADDR
// if GetTaskList ( unit ) then
46402: LD_VAR 0 1
46406: PPUSH
46407: CALL_OW 437
46411: IFFALSE 46494
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
46413: LD_STRING M
46415: PUSH
46416: LD_VAR 0 1
46420: PPUSH
46421: CALL_OW 437
46425: PUSH
46426: LD_INT 1
46428: ARRAY
46429: PUSH
46430: LD_INT 1
46432: ARRAY
46433: EQUAL
46434: PUSH
46435: LD_VAR 0 2
46439: PUSH
46440: LD_VAR 0 1
46444: PPUSH
46445: CALL_OW 437
46449: PUSH
46450: LD_INT 1
46452: ARRAY
46453: PUSH
46454: LD_INT 2
46456: ARRAY
46457: EQUAL
46458: AND
46459: PUSH
46460: LD_VAR 0 3
46464: PUSH
46465: LD_VAR 0 1
46469: PPUSH
46470: CALL_OW 437
46474: PUSH
46475: LD_INT 1
46477: ARRAY
46478: PUSH
46479: LD_INT 3
46481: ARRAY
46482: EQUAL
46483: AND
46484: IFFALSE 46494
// result := true ;
46486: LD_ADDR_VAR 0 4
46490: PUSH
46491: LD_INT 1
46493: ST_TO_ADDR
// end ; end ;
46494: LD_VAR 0 4
46498: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
46499: LD_INT 0
46501: PPUSH
46502: PPUSH
46503: PPUSH
46504: PPUSH
// if not unit or not area then
46505: LD_VAR 0 1
46509: NOT
46510: PUSH
46511: LD_VAR 0 2
46515: NOT
46516: OR
46517: IFFALSE 46521
// exit ;
46519: GO 46697
// tmp := AreaToList ( area , i ) ;
46521: LD_ADDR_VAR 0 6
46525: PUSH
46526: LD_VAR 0 2
46530: PPUSH
46531: LD_VAR 0 5
46535: PPUSH
46536: CALL_OW 517
46540: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
46541: LD_ADDR_VAR 0 5
46545: PUSH
46546: DOUBLE
46547: LD_INT 1
46549: DEC
46550: ST_TO_ADDR
46551: LD_VAR 0 6
46555: PUSH
46556: LD_INT 1
46558: ARRAY
46559: PUSH
46560: FOR_TO
46561: IFFALSE 46695
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
46563: LD_ADDR_VAR 0 7
46567: PUSH
46568: LD_VAR 0 6
46572: PUSH
46573: LD_INT 1
46575: ARRAY
46576: PUSH
46577: LD_VAR 0 5
46581: ARRAY
46582: PUSH
46583: LD_VAR 0 6
46587: PUSH
46588: LD_INT 2
46590: ARRAY
46591: PUSH
46592: LD_VAR 0 5
46596: ARRAY
46597: PUSH
46598: EMPTY
46599: LIST
46600: LIST
46601: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
46602: LD_INT 92
46604: PUSH
46605: LD_VAR 0 7
46609: PUSH
46610: LD_INT 1
46612: ARRAY
46613: PUSH
46614: LD_VAR 0 7
46618: PUSH
46619: LD_INT 2
46621: ARRAY
46622: PUSH
46623: LD_INT 2
46625: PUSH
46626: EMPTY
46627: LIST
46628: LIST
46629: LIST
46630: LIST
46631: PPUSH
46632: CALL_OW 69
46636: PUSH
46637: LD_INT 0
46639: EQUAL
46640: IFFALSE 46693
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
46642: LD_VAR 0 1
46646: PPUSH
46647: LD_VAR 0 7
46651: PUSH
46652: LD_INT 1
46654: ARRAY
46655: PPUSH
46656: LD_VAR 0 7
46660: PUSH
46661: LD_INT 2
46663: ARRAY
46664: PPUSH
46665: LD_VAR 0 3
46669: PPUSH
46670: CALL_OW 48
// result := IsPlaced ( unit ) ;
46674: LD_ADDR_VAR 0 4
46678: PUSH
46679: LD_VAR 0 1
46683: PPUSH
46684: CALL_OW 305
46688: ST_TO_ADDR
// exit ;
46689: POP
46690: POP
46691: GO 46697
// end ; end ;
46693: GO 46560
46695: POP
46696: POP
// end ;
46697: LD_VAR 0 4
46701: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
46702: LD_INT 0
46704: PPUSH
46705: PPUSH
46706: PPUSH
// if not side or side > 8 then
46707: LD_VAR 0 1
46711: NOT
46712: PUSH
46713: LD_VAR 0 1
46717: PUSH
46718: LD_INT 8
46720: GREATER
46721: OR
46722: IFFALSE 46726
// exit ;
46724: GO 46913
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
46726: LD_ADDR_VAR 0 4
46730: PUSH
46731: LD_INT 22
46733: PUSH
46734: LD_VAR 0 1
46738: PUSH
46739: EMPTY
46740: LIST
46741: LIST
46742: PUSH
46743: LD_INT 21
46745: PUSH
46746: LD_INT 3
46748: PUSH
46749: EMPTY
46750: LIST
46751: LIST
46752: PUSH
46753: EMPTY
46754: LIST
46755: LIST
46756: PPUSH
46757: CALL_OW 69
46761: ST_TO_ADDR
// if not tmp then
46762: LD_VAR 0 4
46766: NOT
46767: IFFALSE 46771
// exit ;
46769: GO 46913
// enable_addtolog := true ;
46771: LD_ADDR_OWVAR 81
46775: PUSH
46776: LD_INT 1
46778: ST_TO_ADDR
// AddToLog ( [ ) ;
46779: LD_STRING [
46781: PPUSH
46782: CALL_OW 561
// for i in tmp do
46786: LD_ADDR_VAR 0 3
46790: PUSH
46791: LD_VAR 0 4
46795: PUSH
46796: FOR_IN
46797: IFFALSE 46904
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
46799: LD_STRING [
46801: PUSH
46802: LD_VAR 0 3
46806: PPUSH
46807: CALL_OW 266
46811: STR
46812: PUSH
46813: LD_STRING , 
46815: STR
46816: PUSH
46817: LD_VAR 0 3
46821: PPUSH
46822: CALL_OW 250
46826: STR
46827: PUSH
46828: LD_STRING , 
46830: STR
46831: PUSH
46832: LD_VAR 0 3
46836: PPUSH
46837: CALL_OW 251
46841: STR
46842: PUSH
46843: LD_STRING , 
46845: STR
46846: PUSH
46847: LD_VAR 0 3
46851: PPUSH
46852: CALL_OW 254
46856: STR
46857: PUSH
46858: LD_STRING , 
46860: STR
46861: PUSH
46862: LD_VAR 0 3
46866: PPUSH
46867: LD_INT 1
46869: PPUSH
46870: CALL_OW 268
46874: STR
46875: PUSH
46876: LD_STRING , 
46878: STR
46879: PUSH
46880: LD_VAR 0 3
46884: PPUSH
46885: LD_INT 2
46887: PPUSH
46888: CALL_OW 268
46892: STR
46893: PUSH
46894: LD_STRING ],
46896: STR
46897: PPUSH
46898: CALL_OW 561
// end ;
46902: GO 46796
46904: POP
46905: POP
// AddToLog ( ]; ) ;
46906: LD_STRING ];
46908: PPUSH
46909: CALL_OW 561
// end ;
46913: LD_VAR 0 2
46917: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
46918: LD_INT 0
46920: PPUSH
46921: PPUSH
46922: PPUSH
46923: PPUSH
46924: PPUSH
// if not area or not rate or not max then
46925: LD_VAR 0 1
46929: NOT
46930: PUSH
46931: LD_VAR 0 2
46935: NOT
46936: OR
46937: PUSH
46938: LD_VAR 0 4
46942: NOT
46943: OR
46944: IFFALSE 46948
// exit ;
46946: GO 47137
// while 1 do
46948: LD_INT 1
46950: IFFALSE 47137
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
46952: LD_ADDR_VAR 0 9
46956: PUSH
46957: LD_VAR 0 1
46961: PPUSH
46962: LD_INT 1
46964: PPUSH
46965: CALL_OW 287
46969: PUSH
46970: LD_INT 10
46972: MUL
46973: ST_TO_ADDR
// r := rate / 10 ;
46974: LD_ADDR_VAR 0 7
46978: PUSH
46979: LD_VAR 0 2
46983: PUSH
46984: LD_INT 10
46986: DIVREAL
46987: ST_TO_ADDR
// time := 1 1$00 ;
46988: LD_ADDR_VAR 0 8
46992: PUSH
46993: LD_INT 2100
46995: ST_TO_ADDR
// if amount < min then
46996: LD_VAR 0 9
47000: PUSH
47001: LD_VAR 0 3
47005: LESS
47006: IFFALSE 47024
// r := r * 2 else
47008: LD_ADDR_VAR 0 7
47012: PUSH
47013: LD_VAR 0 7
47017: PUSH
47018: LD_INT 2
47020: MUL
47021: ST_TO_ADDR
47022: GO 47050
// if amount > max then
47024: LD_VAR 0 9
47028: PUSH
47029: LD_VAR 0 4
47033: GREATER
47034: IFFALSE 47050
// r := r / 2 ;
47036: LD_ADDR_VAR 0 7
47040: PUSH
47041: LD_VAR 0 7
47045: PUSH
47046: LD_INT 2
47048: DIVREAL
47049: ST_TO_ADDR
// time := time / r ;
47050: LD_ADDR_VAR 0 8
47054: PUSH
47055: LD_VAR 0 8
47059: PUSH
47060: LD_VAR 0 7
47064: DIVREAL
47065: ST_TO_ADDR
// if time < 0 then
47066: LD_VAR 0 8
47070: PUSH
47071: LD_INT 0
47073: LESS
47074: IFFALSE 47091
// time := time * - 1 ;
47076: LD_ADDR_VAR 0 8
47080: PUSH
47081: LD_VAR 0 8
47085: PUSH
47086: LD_INT 1
47088: NEG
47089: MUL
47090: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
47091: LD_VAR 0 8
47095: PUSH
47096: LD_INT 35
47098: PPUSH
47099: LD_INT 875
47101: PPUSH
47102: CALL_OW 12
47106: PLUS
47107: PPUSH
47108: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
47112: LD_INT 1
47114: PPUSH
47115: LD_INT 5
47117: PPUSH
47118: CALL_OW 12
47122: PPUSH
47123: LD_VAR 0 1
47127: PPUSH
47128: LD_INT 1
47130: PPUSH
47131: CALL_OW 55
// end ;
47135: GO 46948
// end ;
47137: LD_VAR 0 5
47141: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
47142: LD_INT 0
47144: PPUSH
47145: PPUSH
47146: PPUSH
47147: PPUSH
47148: PPUSH
47149: PPUSH
47150: PPUSH
47151: PPUSH
// if not turrets or not factories then
47152: LD_VAR 0 1
47156: NOT
47157: PUSH
47158: LD_VAR 0 2
47162: NOT
47163: OR
47164: IFFALSE 47168
// exit ;
47166: GO 47475
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
47168: LD_ADDR_VAR 0 10
47172: PUSH
47173: LD_INT 5
47175: PUSH
47176: LD_INT 6
47178: PUSH
47179: EMPTY
47180: LIST
47181: LIST
47182: PUSH
47183: LD_INT 2
47185: PUSH
47186: LD_INT 4
47188: PUSH
47189: EMPTY
47190: LIST
47191: LIST
47192: PUSH
47193: LD_INT 3
47195: PUSH
47196: LD_INT 5
47198: PUSH
47199: EMPTY
47200: LIST
47201: LIST
47202: PUSH
47203: EMPTY
47204: LIST
47205: LIST
47206: LIST
47207: PUSH
47208: LD_INT 24
47210: PUSH
47211: LD_INT 25
47213: PUSH
47214: EMPTY
47215: LIST
47216: LIST
47217: PUSH
47218: LD_INT 23
47220: PUSH
47221: LD_INT 27
47223: PUSH
47224: EMPTY
47225: LIST
47226: LIST
47227: PUSH
47228: EMPTY
47229: LIST
47230: LIST
47231: PUSH
47232: LD_INT 42
47234: PUSH
47235: LD_INT 43
47237: PUSH
47238: EMPTY
47239: LIST
47240: LIST
47241: PUSH
47242: LD_INT 44
47244: PUSH
47245: LD_INT 46
47247: PUSH
47248: EMPTY
47249: LIST
47250: LIST
47251: PUSH
47252: LD_INT 45
47254: PUSH
47255: LD_INT 47
47257: PUSH
47258: EMPTY
47259: LIST
47260: LIST
47261: PUSH
47262: EMPTY
47263: LIST
47264: LIST
47265: LIST
47266: PUSH
47267: EMPTY
47268: LIST
47269: LIST
47270: LIST
47271: ST_TO_ADDR
// result := [ ] ;
47272: LD_ADDR_VAR 0 3
47276: PUSH
47277: EMPTY
47278: ST_TO_ADDR
// for i in turrets do
47279: LD_ADDR_VAR 0 4
47283: PUSH
47284: LD_VAR 0 1
47288: PUSH
47289: FOR_IN
47290: IFFALSE 47473
// begin nat := GetNation ( i ) ;
47292: LD_ADDR_VAR 0 7
47296: PUSH
47297: LD_VAR 0 4
47301: PPUSH
47302: CALL_OW 248
47306: ST_TO_ADDR
// weapon := 0 ;
47307: LD_ADDR_VAR 0 8
47311: PUSH
47312: LD_INT 0
47314: ST_TO_ADDR
// if not nat then
47315: LD_VAR 0 7
47319: NOT
47320: IFFALSE 47324
// continue ;
47322: GO 47289
// for j in list [ nat ] do
47324: LD_ADDR_VAR 0 5
47328: PUSH
47329: LD_VAR 0 10
47333: PUSH
47334: LD_VAR 0 7
47338: ARRAY
47339: PUSH
47340: FOR_IN
47341: IFFALSE 47382
// if GetBWeapon ( i ) = j [ 1 ] then
47343: LD_VAR 0 4
47347: PPUSH
47348: CALL_OW 269
47352: PUSH
47353: LD_VAR 0 5
47357: PUSH
47358: LD_INT 1
47360: ARRAY
47361: EQUAL
47362: IFFALSE 47380
// begin weapon := j [ 2 ] ;
47364: LD_ADDR_VAR 0 8
47368: PUSH
47369: LD_VAR 0 5
47373: PUSH
47374: LD_INT 2
47376: ARRAY
47377: ST_TO_ADDR
// break ;
47378: GO 47382
// end ;
47380: GO 47340
47382: POP
47383: POP
// if not weapon then
47384: LD_VAR 0 8
47388: NOT
47389: IFFALSE 47393
// continue ;
47391: GO 47289
// for k in factories do
47393: LD_ADDR_VAR 0 6
47397: PUSH
47398: LD_VAR 0 2
47402: PUSH
47403: FOR_IN
47404: IFFALSE 47469
// begin weapons := AvailableWeaponList ( k ) ;
47406: LD_ADDR_VAR 0 9
47410: PUSH
47411: LD_VAR 0 6
47415: PPUSH
47416: CALL_OW 478
47420: ST_TO_ADDR
// if not weapons then
47421: LD_VAR 0 9
47425: NOT
47426: IFFALSE 47430
// continue ;
47428: GO 47403
// if weapon in weapons then
47430: LD_VAR 0 8
47434: PUSH
47435: LD_VAR 0 9
47439: IN
47440: IFFALSE 47467
// begin result := [ i , weapon ] ;
47442: LD_ADDR_VAR 0 3
47446: PUSH
47447: LD_VAR 0 4
47451: PUSH
47452: LD_VAR 0 8
47456: PUSH
47457: EMPTY
47458: LIST
47459: LIST
47460: ST_TO_ADDR
// exit ;
47461: POP
47462: POP
47463: POP
47464: POP
47465: GO 47475
// end ; end ;
47467: GO 47403
47469: POP
47470: POP
// end ;
47471: GO 47289
47473: POP
47474: POP
// end ;
47475: LD_VAR 0 3
47479: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
47480: LD_INT 0
47482: PPUSH
// if not side or side > 8 then
47483: LD_VAR 0 3
47487: NOT
47488: PUSH
47489: LD_VAR 0 3
47493: PUSH
47494: LD_INT 8
47496: GREATER
47497: OR
47498: IFFALSE 47502
// exit ;
47500: GO 47561
// if not range then
47502: LD_VAR 0 4
47506: NOT
47507: IFFALSE 47518
// range := - 12 ;
47509: LD_ADDR_VAR 0 4
47513: PUSH
47514: LD_INT 12
47516: NEG
47517: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
47518: LD_VAR 0 1
47522: PPUSH
47523: LD_VAR 0 2
47527: PPUSH
47528: LD_VAR 0 3
47532: PPUSH
47533: LD_VAR 0 4
47537: PPUSH
47538: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
47542: LD_VAR 0 1
47546: PPUSH
47547: LD_VAR 0 2
47551: PPUSH
47552: LD_VAR 0 3
47556: PPUSH
47557: CALL_OW 331
// end ;
47561: LD_VAR 0 5
47565: RET
// export function Video ( mode ) ; begin
47566: LD_INT 0
47568: PPUSH
// ingame_video = mode ;
47569: LD_ADDR_OWVAR 52
47573: PUSH
47574: LD_VAR 0 1
47578: ST_TO_ADDR
// interface_hidden = mode ;
47579: LD_ADDR_OWVAR 54
47583: PUSH
47584: LD_VAR 0 1
47588: ST_TO_ADDR
// end ;
47589: LD_VAR 0 2
47593: RET
// export function Join ( array , element ) ; begin
47594: LD_INT 0
47596: PPUSH
// result := Replace ( array , array + 1 , element ) ;
47597: LD_ADDR_VAR 0 3
47601: PUSH
47602: LD_VAR 0 1
47606: PPUSH
47607: LD_VAR 0 1
47611: PUSH
47612: LD_INT 1
47614: PLUS
47615: PPUSH
47616: LD_VAR 0 2
47620: PPUSH
47621: CALL_OW 1
47625: ST_TO_ADDR
// end ;
47626: LD_VAR 0 3
47630: RET
// export function JoinUnion ( array , element ) ; begin
47631: LD_INT 0
47633: PPUSH
// result := array union element ;
47634: LD_ADDR_VAR 0 3
47638: PUSH
47639: LD_VAR 0 1
47643: PUSH
47644: LD_VAR 0 2
47648: UNION
47649: ST_TO_ADDR
// end ;
47650: LD_VAR 0 3
47654: RET
// export function GetBehemoths ( side ) ; begin
47655: LD_INT 0
47657: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
47658: LD_ADDR_VAR 0 2
47662: PUSH
47663: LD_INT 22
47665: PUSH
47666: LD_VAR 0 1
47670: PUSH
47671: EMPTY
47672: LIST
47673: LIST
47674: PUSH
47675: LD_INT 31
47677: PUSH
47678: LD_INT 25
47680: PUSH
47681: EMPTY
47682: LIST
47683: LIST
47684: PUSH
47685: EMPTY
47686: LIST
47687: LIST
47688: PPUSH
47689: CALL_OW 69
47693: ST_TO_ADDR
// end ;
47694: LD_VAR 0 2
47698: RET
// export function Shuffle ( array ) ; var i , index ; begin
47699: LD_INT 0
47701: PPUSH
47702: PPUSH
47703: PPUSH
// result := [ ] ;
47704: LD_ADDR_VAR 0 2
47708: PUSH
47709: EMPTY
47710: ST_TO_ADDR
// if not array then
47711: LD_VAR 0 1
47715: NOT
47716: IFFALSE 47720
// exit ;
47718: GO 47819
// Randomize ;
47720: CALL_OW 10
// for i = array downto 1 do
47724: LD_ADDR_VAR 0 3
47728: PUSH
47729: DOUBLE
47730: LD_VAR 0 1
47734: INC
47735: ST_TO_ADDR
47736: LD_INT 1
47738: PUSH
47739: FOR_DOWNTO
47740: IFFALSE 47817
// begin index := rand ( 1 , array ) ;
47742: LD_ADDR_VAR 0 4
47746: PUSH
47747: LD_INT 1
47749: PPUSH
47750: LD_VAR 0 1
47754: PPUSH
47755: CALL_OW 12
47759: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
47760: LD_ADDR_VAR 0 2
47764: PUSH
47765: LD_VAR 0 2
47769: PPUSH
47770: LD_VAR 0 2
47774: PUSH
47775: LD_INT 1
47777: PLUS
47778: PPUSH
47779: LD_VAR 0 1
47783: PUSH
47784: LD_VAR 0 4
47788: ARRAY
47789: PPUSH
47790: CALL_OW 2
47794: ST_TO_ADDR
// array := Delete ( array , index ) ;
47795: LD_ADDR_VAR 0 1
47799: PUSH
47800: LD_VAR 0 1
47804: PPUSH
47805: LD_VAR 0 4
47809: PPUSH
47810: CALL_OW 3
47814: ST_TO_ADDR
// end ;
47815: GO 47739
47817: POP
47818: POP
// end ;
47819: LD_VAR 0 2
47823: RET
// export function GetBaseMaterials ( base ) ; begin
47824: LD_INT 0
47826: PPUSH
// result := [ 0 , 0 , 0 ] ;
47827: LD_ADDR_VAR 0 2
47831: PUSH
47832: LD_INT 0
47834: PUSH
47835: LD_INT 0
47837: PUSH
47838: LD_INT 0
47840: PUSH
47841: EMPTY
47842: LIST
47843: LIST
47844: LIST
47845: ST_TO_ADDR
// if not base then
47846: LD_VAR 0 1
47850: NOT
47851: IFFALSE 47855
// exit ;
47853: GO 47904
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
47855: LD_ADDR_VAR 0 2
47859: PUSH
47860: LD_VAR 0 1
47864: PPUSH
47865: LD_INT 1
47867: PPUSH
47868: CALL_OW 275
47872: PUSH
47873: LD_VAR 0 1
47877: PPUSH
47878: LD_INT 2
47880: PPUSH
47881: CALL_OW 275
47885: PUSH
47886: LD_VAR 0 1
47890: PPUSH
47891: LD_INT 3
47893: PPUSH
47894: CALL_OW 275
47898: PUSH
47899: EMPTY
47900: LIST
47901: LIST
47902: LIST
47903: ST_TO_ADDR
// end ;
47904: LD_VAR 0 2
47908: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
47909: LD_INT 0
47911: PPUSH
47912: PPUSH
// result := array ;
47913: LD_ADDR_VAR 0 3
47917: PUSH
47918: LD_VAR 0 1
47922: ST_TO_ADDR
// if size >= result then
47923: LD_VAR 0 2
47927: PUSH
47928: LD_VAR 0 3
47932: GREATEREQUAL
47933: IFFALSE 47937
// exit ;
47935: GO 47987
// if size then
47937: LD_VAR 0 2
47941: IFFALSE 47987
// for i := array downto size do
47943: LD_ADDR_VAR 0 4
47947: PUSH
47948: DOUBLE
47949: LD_VAR 0 1
47953: INC
47954: ST_TO_ADDR
47955: LD_VAR 0 2
47959: PUSH
47960: FOR_DOWNTO
47961: IFFALSE 47985
// result := Delete ( result , result ) ;
47963: LD_ADDR_VAR 0 3
47967: PUSH
47968: LD_VAR 0 3
47972: PPUSH
47973: LD_VAR 0 3
47977: PPUSH
47978: CALL_OW 3
47982: ST_TO_ADDR
47983: GO 47960
47985: POP
47986: POP
// end ;
47987: LD_VAR 0 3
47991: RET
// export function ComExit ( unit ) ; var tmp ; begin
47992: LD_INT 0
47994: PPUSH
47995: PPUSH
// if not IsInUnit ( unit ) then
47996: LD_VAR 0 1
48000: PPUSH
48001: CALL_OW 310
48005: NOT
48006: IFFALSE 48010
// exit ;
48008: GO 48070
// tmp := IsInUnit ( unit ) ;
48010: LD_ADDR_VAR 0 3
48014: PUSH
48015: LD_VAR 0 1
48019: PPUSH
48020: CALL_OW 310
48024: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
48025: LD_VAR 0 3
48029: PPUSH
48030: CALL_OW 247
48034: PUSH
48035: LD_INT 2
48037: EQUAL
48038: IFFALSE 48051
// ComExitVehicle ( unit ) else
48040: LD_VAR 0 1
48044: PPUSH
48045: CALL_OW 121
48049: GO 48060
// ComExitBuilding ( unit ) ;
48051: LD_VAR 0 1
48055: PPUSH
48056: CALL_OW 122
// result := tmp ;
48060: LD_ADDR_VAR 0 2
48064: PUSH
48065: LD_VAR 0 3
48069: ST_TO_ADDR
// end ;
48070: LD_VAR 0 2
48074: RET
// export function ComExitAll ( units ) ; var i ; begin
48075: LD_INT 0
48077: PPUSH
48078: PPUSH
// if not units then
48079: LD_VAR 0 1
48083: NOT
48084: IFFALSE 48088
// exit ;
48086: GO 48114
// for i in units do
48088: LD_ADDR_VAR 0 3
48092: PUSH
48093: LD_VAR 0 1
48097: PUSH
48098: FOR_IN
48099: IFFALSE 48112
// ComExit ( i ) ;
48101: LD_VAR 0 3
48105: PPUSH
48106: CALL 47992 0 1
48110: GO 48098
48112: POP
48113: POP
// end ;
48114: LD_VAR 0 2
48118: RET
// export function ResetHc ; begin
48119: LD_INT 0
48121: PPUSH
// InitHc ;
48122: CALL_OW 19
// hc_importance := 0 ;
48126: LD_ADDR_OWVAR 32
48130: PUSH
48131: LD_INT 0
48133: ST_TO_ADDR
// end ;
48134: LD_VAR 0 1
48138: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
48139: LD_INT 0
48141: PPUSH
48142: PPUSH
48143: PPUSH
// _x := ( x1 + x2 ) div 2 ;
48144: LD_ADDR_VAR 0 6
48148: PUSH
48149: LD_VAR 0 1
48153: PUSH
48154: LD_VAR 0 3
48158: PLUS
48159: PUSH
48160: LD_INT 2
48162: DIV
48163: ST_TO_ADDR
// if _x < 0 then
48164: LD_VAR 0 6
48168: PUSH
48169: LD_INT 0
48171: LESS
48172: IFFALSE 48189
// _x := _x * - 1 ;
48174: LD_ADDR_VAR 0 6
48178: PUSH
48179: LD_VAR 0 6
48183: PUSH
48184: LD_INT 1
48186: NEG
48187: MUL
48188: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
48189: LD_ADDR_VAR 0 7
48193: PUSH
48194: LD_VAR 0 2
48198: PUSH
48199: LD_VAR 0 4
48203: PLUS
48204: PUSH
48205: LD_INT 2
48207: DIV
48208: ST_TO_ADDR
// if _y < 0 then
48209: LD_VAR 0 7
48213: PUSH
48214: LD_INT 0
48216: LESS
48217: IFFALSE 48234
// _y := _y * - 1 ;
48219: LD_ADDR_VAR 0 7
48223: PUSH
48224: LD_VAR 0 7
48228: PUSH
48229: LD_INT 1
48231: NEG
48232: MUL
48233: ST_TO_ADDR
// result := [ _x , _y ] ;
48234: LD_ADDR_VAR 0 5
48238: PUSH
48239: LD_VAR 0 6
48243: PUSH
48244: LD_VAR 0 7
48248: PUSH
48249: EMPTY
48250: LIST
48251: LIST
48252: ST_TO_ADDR
// end ;
48253: LD_VAR 0 5
48257: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
48258: LD_INT 0
48260: PPUSH
48261: PPUSH
48262: PPUSH
48263: PPUSH
// task := GetTaskList ( unit ) ;
48264: LD_ADDR_VAR 0 7
48268: PUSH
48269: LD_VAR 0 1
48273: PPUSH
48274: CALL_OW 437
48278: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
48279: LD_VAR 0 7
48283: NOT
48284: PUSH
48285: LD_VAR 0 1
48289: PPUSH
48290: LD_VAR 0 2
48294: PPUSH
48295: CALL_OW 308
48299: NOT
48300: AND
48301: IFFALSE 48305
// exit ;
48303: GO 48423
// if IsInArea ( unit , area ) then
48305: LD_VAR 0 1
48309: PPUSH
48310: LD_VAR 0 2
48314: PPUSH
48315: CALL_OW 308
48319: IFFALSE 48337
// begin ComMoveToArea ( unit , goAway ) ;
48321: LD_VAR 0 1
48325: PPUSH
48326: LD_VAR 0 3
48330: PPUSH
48331: CALL_OW 113
// exit ;
48335: GO 48423
// end ; if task [ 1 ] [ 1 ] <> M then
48337: LD_VAR 0 7
48341: PUSH
48342: LD_INT 1
48344: ARRAY
48345: PUSH
48346: LD_INT 1
48348: ARRAY
48349: PUSH
48350: LD_STRING M
48352: NONEQUAL
48353: IFFALSE 48357
// exit ;
48355: GO 48423
// x := task [ 1 ] [ 2 ] ;
48357: LD_ADDR_VAR 0 5
48361: PUSH
48362: LD_VAR 0 7
48366: PUSH
48367: LD_INT 1
48369: ARRAY
48370: PUSH
48371: LD_INT 2
48373: ARRAY
48374: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
48375: LD_ADDR_VAR 0 6
48379: PUSH
48380: LD_VAR 0 7
48384: PUSH
48385: LD_INT 1
48387: ARRAY
48388: PUSH
48389: LD_INT 3
48391: ARRAY
48392: ST_TO_ADDR
// if InArea ( x , y , area ) then
48393: LD_VAR 0 5
48397: PPUSH
48398: LD_VAR 0 6
48402: PPUSH
48403: LD_VAR 0 2
48407: PPUSH
48408: CALL_OW 309
48412: IFFALSE 48423
// ComStop ( unit ) ;
48414: LD_VAR 0 1
48418: PPUSH
48419: CALL_OW 141
// end ;
48423: LD_VAR 0 4
48427: RET
// export function Abs ( value ) ; begin
48428: LD_INT 0
48430: PPUSH
// result := value ;
48431: LD_ADDR_VAR 0 2
48435: PUSH
48436: LD_VAR 0 1
48440: ST_TO_ADDR
// if value < 0 then
48441: LD_VAR 0 1
48445: PUSH
48446: LD_INT 0
48448: LESS
48449: IFFALSE 48466
// result := value * - 1 ;
48451: LD_ADDR_VAR 0 2
48455: PUSH
48456: LD_VAR 0 1
48460: PUSH
48461: LD_INT 1
48463: NEG
48464: MUL
48465: ST_TO_ADDR
// end ;
48466: LD_VAR 0 2
48470: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
48471: LD_INT 0
48473: PPUSH
48474: PPUSH
48475: PPUSH
48476: PPUSH
48477: PPUSH
48478: PPUSH
48479: PPUSH
48480: PPUSH
// if not unit or not building then
48481: LD_VAR 0 1
48485: NOT
48486: PUSH
48487: LD_VAR 0 2
48491: NOT
48492: OR
48493: IFFALSE 48497
// exit ;
48495: GO 48723
// x := GetX ( building ) ;
48497: LD_ADDR_VAR 0 4
48501: PUSH
48502: LD_VAR 0 2
48506: PPUSH
48507: CALL_OW 250
48511: ST_TO_ADDR
// y := GetY ( building ) ;
48512: LD_ADDR_VAR 0 6
48516: PUSH
48517: LD_VAR 0 2
48521: PPUSH
48522: CALL_OW 251
48526: ST_TO_ADDR
// d := GetDir ( building ) ;
48527: LD_ADDR_VAR 0 8
48531: PUSH
48532: LD_VAR 0 2
48536: PPUSH
48537: CALL_OW 254
48541: ST_TO_ADDR
// r := 4 ;
48542: LD_ADDR_VAR 0 9
48546: PUSH
48547: LD_INT 4
48549: ST_TO_ADDR
// for i := 1 to 5 do
48550: LD_ADDR_VAR 0 10
48554: PUSH
48555: DOUBLE
48556: LD_INT 1
48558: DEC
48559: ST_TO_ADDR
48560: LD_INT 5
48562: PUSH
48563: FOR_TO
48564: IFFALSE 48721
// begin _x := ShiftX ( x , d , r + i ) ;
48566: LD_ADDR_VAR 0 5
48570: PUSH
48571: LD_VAR 0 4
48575: PPUSH
48576: LD_VAR 0 8
48580: PPUSH
48581: LD_VAR 0 9
48585: PUSH
48586: LD_VAR 0 10
48590: PLUS
48591: PPUSH
48592: CALL_OW 272
48596: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
48597: LD_ADDR_VAR 0 7
48601: PUSH
48602: LD_VAR 0 6
48606: PPUSH
48607: LD_VAR 0 8
48611: PPUSH
48612: LD_VAR 0 9
48616: PUSH
48617: LD_VAR 0 10
48621: PLUS
48622: PPUSH
48623: CALL_OW 273
48627: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
48628: LD_VAR 0 5
48632: PPUSH
48633: LD_VAR 0 7
48637: PPUSH
48638: CALL_OW 488
48642: PUSH
48643: LD_VAR 0 5
48647: PPUSH
48648: LD_VAR 0 7
48652: PPUSH
48653: CALL_OW 428
48657: PPUSH
48658: CALL_OW 247
48662: PUSH
48663: LD_INT 3
48665: PUSH
48666: LD_INT 2
48668: PUSH
48669: EMPTY
48670: LIST
48671: LIST
48672: IN
48673: NOT
48674: AND
48675: IFFALSE 48719
// begin ComMoveXY ( unit , _x , _y ) ;
48677: LD_VAR 0 1
48681: PPUSH
48682: LD_VAR 0 5
48686: PPUSH
48687: LD_VAR 0 7
48691: PPUSH
48692: CALL_OW 111
// result := [ _x , _y ] ;
48696: LD_ADDR_VAR 0 3
48700: PUSH
48701: LD_VAR 0 5
48705: PUSH
48706: LD_VAR 0 7
48710: PUSH
48711: EMPTY
48712: LIST
48713: LIST
48714: ST_TO_ADDR
// exit ;
48715: POP
48716: POP
48717: GO 48723
// end ; end ;
48719: GO 48563
48721: POP
48722: POP
// end ;
48723: LD_VAR 0 3
48727: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
48728: LD_INT 0
48730: PPUSH
48731: PPUSH
48732: PPUSH
// result := 0 ;
48733: LD_ADDR_VAR 0 3
48737: PUSH
48738: LD_INT 0
48740: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
48741: LD_VAR 0 1
48745: PUSH
48746: LD_INT 0
48748: LESS
48749: PUSH
48750: LD_VAR 0 1
48754: PUSH
48755: LD_INT 8
48757: GREATER
48758: OR
48759: PUSH
48760: LD_VAR 0 2
48764: PUSH
48765: LD_INT 0
48767: LESS
48768: OR
48769: PUSH
48770: LD_VAR 0 2
48774: PUSH
48775: LD_INT 8
48777: GREATER
48778: OR
48779: IFFALSE 48783
// exit ;
48781: GO 48858
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
48783: LD_ADDR_VAR 0 4
48787: PUSH
48788: LD_INT 22
48790: PUSH
48791: LD_VAR 0 2
48795: PUSH
48796: EMPTY
48797: LIST
48798: LIST
48799: PPUSH
48800: CALL_OW 69
48804: PUSH
48805: FOR_IN
48806: IFFALSE 48856
// begin un := UnitShoot ( i ) ;
48808: LD_ADDR_VAR 0 5
48812: PUSH
48813: LD_VAR 0 4
48817: PPUSH
48818: CALL_OW 504
48822: ST_TO_ADDR
// if GetSide ( un ) = side1 then
48823: LD_VAR 0 5
48827: PPUSH
48828: CALL_OW 255
48832: PUSH
48833: LD_VAR 0 1
48837: EQUAL
48838: IFFALSE 48854
// begin result := un ;
48840: LD_ADDR_VAR 0 3
48844: PUSH
48845: LD_VAR 0 5
48849: ST_TO_ADDR
// exit ;
48850: POP
48851: POP
48852: GO 48858
// end ; end ;
48854: GO 48805
48856: POP
48857: POP
// end ;
48858: LD_VAR 0 3
48862: RET
// export function GetCargoBay ( units ) ; begin
48863: LD_INT 0
48865: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
48866: LD_ADDR_VAR 0 2
48870: PUSH
48871: LD_VAR 0 1
48875: PPUSH
48876: LD_INT 2
48878: PUSH
48879: LD_INT 34
48881: PUSH
48882: LD_INT 12
48884: PUSH
48885: EMPTY
48886: LIST
48887: LIST
48888: PUSH
48889: LD_INT 34
48891: PUSH
48892: LD_INT 51
48894: PUSH
48895: EMPTY
48896: LIST
48897: LIST
48898: PUSH
48899: LD_INT 34
48901: PUSH
48902: LD_INT 32
48904: PUSH
48905: EMPTY
48906: LIST
48907: LIST
48908: PUSH
48909: LD_INT 34
48911: PUSH
48912: LD_INT 89
48914: PUSH
48915: EMPTY
48916: LIST
48917: LIST
48918: PUSH
48919: EMPTY
48920: LIST
48921: LIST
48922: LIST
48923: LIST
48924: LIST
48925: PPUSH
48926: CALL_OW 72
48930: ST_TO_ADDR
// end ;
48931: LD_VAR 0 2
48935: RET
// export function Negate ( value ) ; begin
48936: LD_INT 0
48938: PPUSH
// result := not value ;
48939: LD_ADDR_VAR 0 2
48943: PUSH
48944: LD_VAR 0 1
48948: NOT
48949: ST_TO_ADDR
// end ;
48950: LD_VAR 0 2
48954: RET
// export function Inc ( value ) ; begin
48955: LD_INT 0
48957: PPUSH
// result := value + 1 ;
48958: LD_ADDR_VAR 0 2
48962: PUSH
48963: LD_VAR 0 1
48967: PUSH
48968: LD_INT 1
48970: PLUS
48971: ST_TO_ADDR
// end ;
48972: LD_VAR 0 2
48976: RET
// export function Dec ( value ) ; begin
48977: LD_INT 0
48979: PPUSH
// result := value - 1 ;
48980: LD_ADDR_VAR 0 2
48984: PUSH
48985: LD_VAR 0 1
48989: PUSH
48990: LD_INT 1
48992: MINUS
48993: ST_TO_ADDR
// end ;
48994: LD_VAR 0 2
48998: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
48999: LD_INT 0
49001: PPUSH
49002: PPUSH
49003: PPUSH
49004: PPUSH
49005: PPUSH
49006: PPUSH
49007: PPUSH
49008: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
49009: LD_VAR 0 1
49013: PPUSH
49014: LD_VAR 0 2
49018: PPUSH
49019: CALL_OW 488
49023: NOT
49024: PUSH
49025: LD_VAR 0 3
49029: PPUSH
49030: LD_VAR 0 4
49034: PPUSH
49035: CALL_OW 488
49039: NOT
49040: OR
49041: IFFALSE 49054
// begin result := - 1 ;
49043: LD_ADDR_VAR 0 5
49047: PUSH
49048: LD_INT 1
49050: NEG
49051: ST_TO_ADDR
// exit ;
49052: GO 49289
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
49054: LD_ADDR_VAR 0 12
49058: PUSH
49059: LD_VAR 0 1
49063: PPUSH
49064: LD_VAR 0 2
49068: PPUSH
49069: LD_VAR 0 3
49073: PPUSH
49074: LD_VAR 0 4
49078: PPUSH
49079: CALL 48139 0 4
49083: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
49084: LD_ADDR_VAR 0 11
49088: PUSH
49089: LD_VAR 0 1
49093: PPUSH
49094: LD_VAR 0 2
49098: PPUSH
49099: LD_VAR 0 12
49103: PUSH
49104: LD_INT 1
49106: ARRAY
49107: PPUSH
49108: LD_VAR 0 12
49112: PUSH
49113: LD_INT 2
49115: ARRAY
49116: PPUSH
49117: CALL_OW 298
49121: ST_TO_ADDR
// distance := 9999 ;
49122: LD_ADDR_VAR 0 10
49126: PUSH
49127: LD_INT 9999
49129: ST_TO_ADDR
// for i := 0 to 5 do
49130: LD_ADDR_VAR 0 6
49134: PUSH
49135: DOUBLE
49136: LD_INT 0
49138: DEC
49139: ST_TO_ADDR
49140: LD_INT 5
49142: PUSH
49143: FOR_TO
49144: IFFALSE 49287
// begin _x := ShiftX ( x1 , i , centerDist ) ;
49146: LD_ADDR_VAR 0 7
49150: PUSH
49151: LD_VAR 0 1
49155: PPUSH
49156: LD_VAR 0 6
49160: PPUSH
49161: LD_VAR 0 11
49165: PPUSH
49166: CALL_OW 272
49170: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
49171: LD_ADDR_VAR 0 8
49175: PUSH
49176: LD_VAR 0 2
49180: PPUSH
49181: LD_VAR 0 6
49185: PPUSH
49186: LD_VAR 0 11
49190: PPUSH
49191: CALL_OW 273
49195: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
49196: LD_VAR 0 7
49200: PPUSH
49201: LD_VAR 0 8
49205: PPUSH
49206: CALL_OW 488
49210: NOT
49211: IFFALSE 49215
// continue ;
49213: GO 49143
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
49215: LD_ADDR_VAR 0 9
49219: PUSH
49220: LD_VAR 0 12
49224: PUSH
49225: LD_INT 1
49227: ARRAY
49228: PPUSH
49229: LD_VAR 0 12
49233: PUSH
49234: LD_INT 2
49236: ARRAY
49237: PPUSH
49238: LD_VAR 0 7
49242: PPUSH
49243: LD_VAR 0 8
49247: PPUSH
49248: CALL_OW 298
49252: ST_TO_ADDR
// if tmp < distance then
49253: LD_VAR 0 9
49257: PUSH
49258: LD_VAR 0 10
49262: LESS
49263: IFFALSE 49285
// begin result := i ;
49265: LD_ADDR_VAR 0 5
49269: PUSH
49270: LD_VAR 0 6
49274: ST_TO_ADDR
// distance := tmp ;
49275: LD_ADDR_VAR 0 10
49279: PUSH
49280: LD_VAR 0 9
49284: ST_TO_ADDR
// end ; end ;
49285: GO 49143
49287: POP
49288: POP
// end ;
49289: LD_VAR 0 5
49293: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
49294: LD_INT 0
49296: PPUSH
49297: PPUSH
// if not driver or not IsInUnit ( driver ) then
49298: LD_VAR 0 1
49302: NOT
49303: PUSH
49304: LD_VAR 0 1
49308: PPUSH
49309: CALL_OW 310
49313: NOT
49314: OR
49315: IFFALSE 49319
// exit ;
49317: GO 49409
// vehicle := IsInUnit ( driver ) ;
49319: LD_ADDR_VAR 0 3
49323: PUSH
49324: LD_VAR 0 1
49328: PPUSH
49329: CALL_OW 310
49333: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
49334: LD_VAR 0 1
49338: PPUSH
49339: LD_STRING \
49341: PUSH
49342: LD_INT 0
49344: PUSH
49345: LD_INT 0
49347: PUSH
49348: LD_INT 0
49350: PUSH
49351: LD_INT 0
49353: PUSH
49354: LD_INT 0
49356: PUSH
49357: LD_INT 0
49359: PUSH
49360: EMPTY
49361: LIST
49362: LIST
49363: LIST
49364: LIST
49365: LIST
49366: LIST
49367: LIST
49368: PUSH
49369: LD_STRING E
49371: PUSH
49372: LD_INT 0
49374: PUSH
49375: LD_INT 0
49377: PUSH
49378: LD_VAR 0 3
49382: PUSH
49383: LD_INT 0
49385: PUSH
49386: LD_INT 0
49388: PUSH
49389: LD_INT 0
49391: PUSH
49392: EMPTY
49393: LIST
49394: LIST
49395: LIST
49396: LIST
49397: LIST
49398: LIST
49399: LIST
49400: PUSH
49401: EMPTY
49402: LIST
49403: LIST
49404: PPUSH
49405: CALL_OW 446
// end ;
49409: LD_VAR 0 2
49413: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
49414: LD_INT 0
49416: PPUSH
49417: PPUSH
// if not driver or not IsInUnit ( driver ) then
49418: LD_VAR 0 1
49422: NOT
49423: PUSH
49424: LD_VAR 0 1
49428: PPUSH
49429: CALL_OW 310
49433: NOT
49434: OR
49435: IFFALSE 49439
// exit ;
49437: GO 49529
// vehicle := IsInUnit ( driver ) ;
49439: LD_ADDR_VAR 0 3
49443: PUSH
49444: LD_VAR 0 1
49448: PPUSH
49449: CALL_OW 310
49453: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
49454: LD_VAR 0 1
49458: PPUSH
49459: LD_STRING \
49461: PUSH
49462: LD_INT 0
49464: PUSH
49465: LD_INT 0
49467: PUSH
49468: LD_INT 0
49470: PUSH
49471: LD_INT 0
49473: PUSH
49474: LD_INT 0
49476: PUSH
49477: LD_INT 0
49479: PUSH
49480: EMPTY
49481: LIST
49482: LIST
49483: LIST
49484: LIST
49485: LIST
49486: LIST
49487: LIST
49488: PUSH
49489: LD_STRING E
49491: PUSH
49492: LD_INT 0
49494: PUSH
49495: LD_INT 0
49497: PUSH
49498: LD_VAR 0 3
49502: PUSH
49503: LD_INT 0
49505: PUSH
49506: LD_INT 0
49508: PUSH
49509: LD_INT 0
49511: PUSH
49512: EMPTY
49513: LIST
49514: LIST
49515: LIST
49516: LIST
49517: LIST
49518: LIST
49519: LIST
49520: PUSH
49521: EMPTY
49522: LIST
49523: LIST
49524: PPUSH
49525: CALL_OW 447
// end ;
49529: LD_VAR 0 2
49533: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
49534: LD_INT 0
49536: PPUSH
49537: PPUSH
49538: PPUSH
// tmp := [ ] ;
49539: LD_ADDR_VAR 0 5
49543: PUSH
49544: EMPTY
49545: ST_TO_ADDR
// for i in units do
49546: LD_ADDR_VAR 0 4
49550: PUSH
49551: LD_VAR 0 1
49555: PUSH
49556: FOR_IN
49557: IFFALSE 49595
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
49559: LD_ADDR_VAR 0 5
49563: PUSH
49564: LD_VAR 0 5
49568: PPUSH
49569: LD_VAR 0 5
49573: PUSH
49574: LD_INT 1
49576: PLUS
49577: PPUSH
49578: LD_VAR 0 4
49582: PPUSH
49583: CALL_OW 256
49587: PPUSH
49588: CALL_OW 2
49592: ST_TO_ADDR
49593: GO 49556
49595: POP
49596: POP
// if not tmp then
49597: LD_VAR 0 5
49601: NOT
49602: IFFALSE 49606
// exit ;
49604: GO 49654
// if asc then
49606: LD_VAR 0 2
49610: IFFALSE 49634
// result := SortListByListAsc ( units , tmp ) else
49612: LD_ADDR_VAR 0 3
49616: PUSH
49617: LD_VAR 0 1
49621: PPUSH
49622: LD_VAR 0 5
49626: PPUSH
49627: CALL_OW 76
49631: ST_TO_ADDR
49632: GO 49654
// result := SortListByListDesc ( units , tmp ) ;
49634: LD_ADDR_VAR 0 3
49638: PUSH
49639: LD_VAR 0 1
49643: PPUSH
49644: LD_VAR 0 5
49648: PPUSH
49649: CALL_OW 77
49653: ST_TO_ADDR
// end ;
49654: LD_VAR 0 3
49658: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
49659: LD_INT 0
49661: PPUSH
49662: PPUSH
// task := GetTaskList ( mech ) ;
49663: LD_ADDR_VAR 0 4
49667: PUSH
49668: LD_VAR 0 1
49672: PPUSH
49673: CALL_OW 437
49677: ST_TO_ADDR
// if not task then
49678: LD_VAR 0 4
49682: NOT
49683: IFFALSE 49687
// exit ;
49685: GO 49729
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
49687: LD_ADDR_VAR 0 3
49691: PUSH
49692: LD_VAR 0 4
49696: PUSH
49697: LD_INT 1
49699: ARRAY
49700: PUSH
49701: LD_INT 1
49703: ARRAY
49704: PUSH
49705: LD_STRING r
49707: EQUAL
49708: PUSH
49709: LD_VAR 0 4
49713: PUSH
49714: LD_INT 1
49716: ARRAY
49717: PUSH
49718: LD_INT 4
49720: ARRAY
49721: PUSH
49722: LD_VAR 0 2
49726: EQUAL
49727: AND
49728: ST_TO_ADDR
// end ;
49729: LD_VAR 0 3
49733: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
49734: LD_INT 0
49736: PPUSH
// SetDir ( unit , d ) ;
49737: LD_VAR 0 1
49741: PPUSH
49742: LD_VAR 0 4
49746: PPUSH
49747: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
49751: LD_ADDR_VAR 0 6
49755: PUSH
49756: LD_VAR 0 1
49760: PPUSH
49761: LD_VAR 0 2
49765: PPUSH
49766: LD_VAR 0 3
49770: PPUSH
49771: LD_VAR 0 5
49775: PPUSH
49776: CALL_OW 48
49780: ST_TO_ADDR
// end ;
49781: LD_VAR 0 6
49785: RET
// export function ToNaturalNumber ( number ) ; begin
49786: LD_INT 0
49788: PPUSH
// result := number div 1 ;
49789: LD_ADDR_VAR 0 2
49793: PUSH
49794: LD_VAR 0 1
49798: PUSH
49799: LD_INT 1
49801: DIV
49802: ST_TO_ADDR
// if number < 0 then
49803: LD_VAR 0 1
49807: PUSH
49808: LD_INT 0
49810: LESS
49811: IFFALSE 49821
// result := 0 ;
49813: LD_ADDR_VAR 0 2
49817: PUSH
49818: LD_INT 0
49820: ST_TO_ADDR
// end ;
49821: LD_VAR 0 2
49825: RET
// export function SortByClass ( units , class ) ; var un ; begin
49826: LD_INT 0
49828: PPUSH
49829: PPUSH
// if not units or not class then
49830: LD_VAR 0 1
49834: NOT
49835: PUSH
49836: LD_VAR 0 2
49840: NOT
49841: OR
49842: IFFALSE 49846
// exit ;
49844: GO 49941
// result := [ ] ;
49846: LD_ADDR_VAR 0 3
49850: PUSH
49851: EMPTY
49852: ST_TO_ADDR
// for un in units do
49853: LD_ADDR_VAR 0 4
49857: PUSH
49858: LD_VAR 0 1
49862: PUSH
49863: FOR_IN
49864: IFFALSE 49939
// if GetClass ( un ) = class then
49866: LD_VAR 0 4
49870: PPUSH
49871: CALL_OW 257
49875: PUSH
49876: LD_VAR 0 2
49880: EQUAL
49881: IFFALSE 49908
// result := Insert ( result , 1 , un ) else
49883: LD_ADDR_VAR 0 3
49887: PUSH
49888: LD_VAR 0 3
49892: PPUSH
49893: LD_INT 1
49895: PPUSH
49896: LD_VAR 0 4
49900: PPUSH
49901: CALL_OW 2
49905: ST_TO_ADDR
49906: GO 49937
// result := Replace ( result , result + 1 , un ) ;
49908: LD_ADDR_VAR 0 3
49912: PUSH
49913: LD_VAR 0 3
49917: PPUSH
49918: LD_VAR 0 3
49922: PUSH
49923: LD_INT 1
49925: PLUS
49926: PPUSH
49927: LD_VAR 0 4
49931: PPUSH
49932: CALL_OW 1
49936: ST_TO_ADDR
49937: GO 49863
49939: POP
49940: POP
// end ;
49941: LD_VAR 0 3
49945: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
49946: LD_INT 0
49948: PPUSH
49949: PPUSH
49950: PPUSH
49951: PPUSH
49952: PPUSH
49953: PPUSH
49954: PPUSH
// result := [ ] ;
49955: LD_ADDR_VAR 0 4
49959: PUSH
49960: EMPTY
49961: ST_TO_ADDR
// if x - r < 0 then
49962: LD_VAR 0 1
49966: PUSH
49967: LD_VAR 0 3
49971: MINUS
49972: PUSH
49973: LD_INT 0
49975: LESS
49976: IFFALSE 49988
// min_x := 0 else
49978: LD_ADDR_VAR 0 8
49982: PUSH
49983: LD_INT 0
49985: ST_TO_ADDR
49986: GO 50004
// min_x := x - r ;
49988: LD_ADDR_VAR 0 8
49992: PUSH
49993: LD_VAR 0 1
49997: PUSH
49998: LD_VAR 0 3
50002: MINUS
50003: ST_TO_ADDR
// if y - r < 0 then
50004: LD_VAR 0 2
50008: PUSH
50009: LD_VAR 0 3
50013: MINUS
50014: PUSH
50015: LD_INT 0
50017: LESS
50018: IFFALSE 50030
// min_y := 0 else
50020: LD_ADDR_VAR 0 7
50024: PUSH
50025: LD_INT 0
50027: ST_TO_ADDR
50028: GO 50046
// min_y := y - r ;
50030: LD_ADDR_VAR 0 7
50034: PUSH
50035: LD_VAR 0 2
50039: PUSH
50040: LD_VAR 0 3
50044: MINUS
50045: ST_TO_ADDR
// max_x := x + r ;
50046: LD_ADDR_VAR 0 9
50050: PUSH
50051: LD_VAR 0 1
50055: PUSH
50056: LD_VAR 0 3
50060: PLUS
50061: ST_TO_ADDR
// max_y := y + r ;
50062: LD_ADDR_VAR 0 10
50066: PUSH
50067: LD_VAR 0 2
50071: PUSH
50072: LD_VAR 0 3
50076: PLUS
50077: ST_TO_ADDR
// for _x = min_x to max_x do
50078: LD_ADDR_VAR 0 5
50082: PUSH
50083: DOUBLE
50084: LD_VAR 0 8
50088: DEC
50089: ST_TO_ADDR
50090: LD_VAR 0 9
50094: PUSH
50095: FOR_TO
50096: IFFALSE 50197
// for _y = min_y to max_y do
50098: LD_ADDR_VAR 0 6
50102: PUSH
50103: DOUBLE
50104: LD_VAR 0 7
50108: DEC
50109: ST_TO_ADDR
50110: LD_VAR 0 10
50114: PUSH
50115: FOR_TO
50116: IFFALSE 50193
// begin if not ValidHex ( _x , _y ) then
50118: LD_VAR 0 5
50122: PPUSH
50123: LD_VAR 0 6
50127: PPUSH
50128: CALL_OW 488
50132: NOT
50133: IFFALSE 50137
// continue ;
50135: GO 50115
// if GetResourceTypeXY ( _x , _y ) then
50137: LD_VAR 0 5
50141: PPUSH
50142: LD_VAR 0 6
50146: PPUSH
50147: CALL_OW 283
50151: IFFALSE 50191
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
50153: LD_ADDR_VAR 0 4
50157: PUSH
50158: LD_VAR 0 4
50162: PPUSH
50163: LD_VAR 0 4
50167: PUSH
50168: LD_INT 1
50170: PLUS
50171: PPUSH
50172: LD_VAR 0 5
50176: PUSH
50177: LD_VAR 0 6
50181: PUSH
50182: EMPTY
50183: LIST
50184: LIST
50185: PPUSH
50186: CALL_OW 1
50190: ST_TO_ADDR
// end ;
50191: GO 50115
50193: POP
50194: POP
50195: GO 50095
50197: POP
50198: POP
// end ;
50199: LD_VAR 0 4
50203: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
50204: LD_INT 0
50206: PPUSH
50207: PPUSH
50208: PPUSH
50209: PPUSH
50210: PPUSH
50211: PPUSH
50212: PPUSH
50213: PPUSH
// if not units then
50214: LD_VAR 0 1
50218: NOT
50219: IFFALSE 50223
// exit ;
50221: GO 50751
// result := UnitFilter ( units , [ f_ok ] ) ;
50223: LD_ADDR_VAR 0 3
50227: PUSH
50228: LD_VAR 0 1
50232: PPUSH
50233: LD_INT 50
50235: PUSH
50236: EMPTY
50237: LIST
50238: PPUSH
50239: CALL_OW 72
50243: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
50244: LD_ADDR_VAR 0 8
50248: PUSH
50249: LD_VAR 0 1
50253: PUSH
50254: LD_INT 1
50256: ARRAY
50257: PPUSH
50258: CALL_OW 255
50262: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
50263: LD_ADDR_VAR 0 10
50267: PUSH
50268: LD_INT 29
50270: PUSH
50271: LD_INT 91
50273: PUSH
50274: LD_INT 49
50276: PUSH
50277: EMPTY
50278: LIST
50279: LIST
50280: LIST
50281: ST_TO_ADDR
// if not result then
50282: LD_VAR 0 3
50286: NOT
50287: IFFALSE 50291
// exit ;
50289: GO 50751
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
50291: LD_ADDR_VAR 0 5
50295: PUSH
50296: LD_INT 81
50298: PUSH
50299: LD_VAR 0 8
50303: PUSH
50304: EMPTY
50305: LIST
50306: LIST
50307: PPUSH
50308: CALL_OW 69
50312: ST_TO_ADDR
// for i in result do
50313: LD_ADDR_VAR 0 4
50317: PUSH
50318: LD_VAR 0 3
50322: PUSH
50323: FOR_IN
50324: IFFALSE 50749
// begin tag := GetTag ( i ) + 1 ;
50326: LD_ADDR_VAR 0 9
50330: PUSH
50331: LD_VAR 0 4
50335: PPUSH
50336: CALL_OW 110
50340: PUSH
50341: LD_INT 1
50343: PLUS
50344: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
50345: LD_ADDR_VAR 0 7
50349: PUSH
50350: LD_VAR 0 4
50354: PPUSH
50355: CALL_OW 250
50359: PPUSH
50360: LD_VAR 0 4
50364: PPUSH
50365: CALL_OW 251
50369: PPUSH
50370: LD_INT 4
50372: PPUSH
50373: CALL 49946 0 3
50377: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
50378: LD_VAR 0 4
50382: PPUSH
50383: CALL_OW 247
50387: PUSH
50388: LD_INT 2
50390: EQUAL
50391: PUSH
50392: LD_VAR 0 7
50396: PUSH
50397: LD_INT 2
50399: GREATER
50400: AND
50401: PUSH
50402: LD_VAR 0 4
50406: PPUSH
50407: CALL_OW 264
50411: PUSH
50412: LD_VAR 0 10
50416: IN
50417: NOT
50418: AND
50419: IFFALSE 50458
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
50421: LD_VAR 0 4
50425: PPUSH
50426: LD_VAR 0 7
50430: PUSH
50431: LD_INT 1
50433: ARRAY
50434: PUSH
50435: LD_INT 1
50437: ARRAY
50438: PPUSH
50439: LD_VAR 0 7
50443: PUSH
50444: LD_INT 1
50446: ARRAY
50447: PUSH
50448: LD_INT 2
50450: ARRAY
50451: PPUSH
50452: CALL_OW 116
50456: GO 50747
// if path > tag then
50458: LD_VAR 0 2
50462: PUSH
50463: LD_VAR 0 9
50467: GREATER
50468: IFFALSE 50676
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
50470: LD_ADDR_VAR 0 6
50474: PUSH
50475: LD_VAR 0 5
50479: PPUSH
50480: LD_INT 91
50482: PUSH
50483: LD_VAR 0 4
50487: PUSH
50488: LD_INT 8
50490: PUSH
50491: EMPTY
50492: LIST
50493: LIST
50494: LIST
50495: PPUSH
50496: CALL_OW 72
50500: ST_TO_ADDR
// if nearEnemy then
50501: LD_VAR 0 6
50505: IFFALSE 50574
// begin if GetWeapon ( i ) = ru_time_lapser then
50507: LD_VAR 0 4
50511: PPUSH
50512: CALL_OW 264
50516: PUSH
50517: LD_INT 49
50519: EQUAL
50520: IFFALSE 50548
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
50522: LD_VAR 0 4
50526: PPUSH
50527: LD_VAR 0 6
50531: PPUSH
50532: LD_VAR 0 4
50536: PPUSH
50537: CALL_OW 74
50541: PPUSH
50542: CALL_OW 112
50546: GO 50572
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
50548: LD_VAR 0 4
50552: PPUSH
50553: LD_VAR 0 6
50557: PPUSH
50558: LD_VAR 0 4
50562: PPUSH
50563: CALL_OW 74
50567: PPUSH
50568: CALL 51822 0 2
// end else
50572: GO 50674
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
50574: LD_VAR 0 4
50578: PPUSH
50579: LD_VAR 0 2
50583: PUSH
50584: LD_VAR 0 9
50588: ARRAY
50589: PUSH
50590: LD_INT 1
50592: ARRAY
50593: PPUSH
50594: LD_VAR 0 2
50598: PUSH
50599: LD_VAR 0 9
50603: ARRAY
50604: PUSH
50605: LD_INT 2
50607: ARRAY
50608: PPUSH
50609: CALL_OW 297
50613: PUSH
50614: LD_INT 6
50616: GREATER
50617: IFFALSE 50660
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
50619: LD_VAR 0 4
50623: PPUSH
50624: LD_VAR 0 2
50628: PUSH
50629: LD_VAR 0 9
50633: ARRAY
50634: PUSH
50635: LD_INT 1
50637: ARRAY
50638: PPUSH
50639: LD_VAR 0 2
50643: PUSH
50644: LD_VAR 0 9
50648: ARRAY
50649: PUSH
50650: LD_INT 2
50652: ARRAY
50653: PPUSH
50654: CALL_OW 114
50658: GO 50674
// SetTag ( i , tag ) ;
50660: LD_VAR 0 4
50664: PPUSH
50665: LD_VAR 0 9
50669: PPUSH
50670: CALL_OW 109
// end else
50674: GO 50747
// if enemy then
50676: LD_VAR 0 5
50680: IFFALSE 50747
// begin if GetWeapon ( i ) = ru_time_lapser then
50682: LD_VAR 0 4
50686: PPUSH
50687: CALL_OW 264
50691: PUSH
50692: LD_INT 49
50694: EQUAL
50695: IFFALSE 50723
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
50697: LD_VAR 0 4
50701: PPUSH
50702: LD_VAR 0 5
50706: PPUSH
50707: LD_VAR 0 4
50711: PPUSH
50712: CALL_OW 74
50716: PPUSH
50717: CALL_OW 112
50721: GO 50747
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
50723: LD_VAR 0 4
50727: PPUSH
50728: LD_VAR 0 5
50732: PPUSH
50733: LD_VAR 0 4
50737: PPUSH
50738: CALL_OW 74
50742: PPUSH
50743: CALL 51822 0 2
// end ; end ;
50747: GO 50323
50749: POP
50750: POP
// end ;
50751: LD_VAR 0 3
50755: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
50756: LD_INT 0
50758: PPUSH
50759: PPUSH
50760: PPUSH
// if not unit or IsInUnit ( unit ) then
50761: LD_VAR 0 1
50765: NOT
50766: PUSH
50767: LD_VAR 0 1
50771: PPUSH
50772: CALL_OW 310
50776: OR
50777: IFFALSE 50781
// exit ;
50779: GO 50872
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
50781: LD_ADDR_VAR 0 4
50785: PUSH
50786: LD_VAR 0 1
50790: PPUSH
50791: CALL_OW 250
50795: PPUSH
50796: LD_VAR 0 2
50800: PPUSH
50801: LD_INT 1
50803: PPUSH
50804: CALL_OW 272
50808: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
50809: LD_ADDR_VAR 0 5
50813: PUSH
50814: LD_VAR 0 1
50818: PPUSH
50819: CALL_OW 251
50823: PPUSH
50824: LD_VAR 0 2
50828: PPUSH
50829: LD_INT 1
50831: PPUSH
50832: CALL_OW 273
50836: ST_TO_ADDR
// if ValidHex ( x , y ) then
50837: LD_VAR 0 4
50841: PPUSH
50842: LD_VAR 0 5
50846: PPUSH
50847: CALL_OW 488
50851: IFFALSE 50872
// ComTurnXY ( unit , x , y ) ;
50853: LD_VAR 0 1
50857: PPUSH
50858: LD_VAR 0 4
50862: PPUSH
50863: LD_VAR 0 5
50867: PPUSH
50868: CALL_OW 118
// end ;
50872: LD_VAR 0 3
50876: RET
// export function SeeUnits ( side , units ) ; var i ; begin
50877: LD_INT 0
50879: PPUSH
50880: PPUSH
// result := false ;
50881: LD_ADDR_VAR 0 3
50885: PUSH
50886: LD_INT 0
50888: ST_TO_ADDR
// if not units then
50889: LD_VAR 0 2
50893: NOT
50894: IFFALSE 50898
// exit ;
50896: GO 50943
// for i in units do
50898: LD_ADDR_VAR 0 4
50902: PUSH
50903: LD_VAR 0 2
50907: PUSH
50908: FOR_IN
50909: IFFALSE 50941
// if See ( side , i ) then
50911: LD_VAR 0 1
50915: PPUSH
50916: LD_VAR 0 4
50920: PPUSH
50921: CALL_OW 292
50925: IFFALSE 50939
// begin result := true ;
50927: LD_ADDR_VAR 0 3
50931: PUSH
50932: LD_INT 1
50934: ST_TO_ADDR
// exit ;
50935: POP
50936: POP
50937: GO 50943
// end ;
50939: GO 50908
50941: POP
50942: POP
// end ;
50943: LD_VAR 0 3
50947: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
50948: LD_INT 0
50950: PPUSH
50951: PPUSH
50952: PPUSH
50953: PPUSH
// if not unit or not points then
50954: LD_VAR 0 1
50958: NOT
50959: PUSH
50960: LD_VAR 0 2
50964: NOT
50965: OR
50966: IFFALSE 50970
// exit ;
50968: GO 51060
// dist := 99999 ;
50970: LD_ADDR_VAR 0 5
50974: PUSH
50975: LD_INT 99999
50977: ST_TO_ADDR
// for i in points do
50978: LD_ADDR_VAR 0 4
50982: PUSH
50983: LD_VAR 0 2
50987: PUSH
50988: FOR_IN
50989: IFFALSE 51058
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
50991: LD_ADDR_VAR 0 6
50995: PUSH
50996: LD_VAR 0 1
51000: PPUSH
51001: LD_VAR 0 4
51005: PUSH
51006: LD_INT 1
51008: ARRAY
51009: PPUSH
51010: LD_VAR 0 4
51014: PUSH
51015: LD_INT 2
51017: ARRAY
51018: PPUSH
51019: CALL_OW 297
51023: ST_TO_ADDR
// if tmpDist < dist then
51024: LD_VAR 0 6
51028: PUSH
51029: LD_VAR 0 5
51033: LESS
51034: IFFALSE 51056
// begin result := i ;
51036: LD_ADDR_VAR 0 3
51040: PUSH
51041: LD_VAR 0 4
51045: ST_TO_ADDR
// dist := tmpDist ;
51046: LD_ADDR_VAR 0 5
51050: PUSH
51051: LD_VAR 0 6
51055: ST_TO_ADDR
// end ; end ;
51056: GO 50988
51058: POP
51059: POP
// end ;
51060: LD_VAR 0 3
51064: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
51065: LD_INT 0
51067: PPUSH
// uc_side := side ;
51068: LD_ADDR_OWVAR 20
51072: PUSH
51073: LD_VAR 0 1
51077: ST_TO_ADDR
// uc_nation := 3 ;
51078: LD_ADDR_OWVAR 21
51082: PUSH
51083: LD_INT 3
51085: ST_TO_ADDR
// vc_chassis := 25 ;
51086: LD_ADDR_OWVAR 37
51090: PUSH
51091: LD_INT 25
51093: ST_TO_ADDR
// vc_engine := engine_siberite ;
51094: LD_ADDR_OWVAR 39
51098: PUSH
51099: LD_INT 3
51101: ST_TO_ADDR
// vc_control := control_computer ;
51102: LD_ADDR_OWVAR 38
51106: PUSH
51107: LD_INT 3
51109: ST_TO_ADDR
// vc_weapon := 59 ;
51110: LD_ADDR_OWVAR 40
51114: PUSH
51115: LD_INT 59
51117: ST_TO_ADDR
// result := CreateVehicle ;
51118: LD_ADDR_VAR 0 5
51122: PUSH
51123: CALL_OW 45
51127: ST_TO_ADDR
// SetDir ( result , d ) ;
51128: LD_VAR 0 5
51132: PPUSH
51133: LD_VAR 0 4
51137: PPUSH
51138: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
51142: LD_VAR 0 5
51146: PPUSH
51147: LD_VAR 0 2
51151: PPUSH
51152: LD_VAR 0 3
51156: PPUSH
51157: LD_INT 0
51159: PPUSH
51160: CALL_OW 48
// end ;
51164: LD_VAR 0 5
51168: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
51169: LD_INT 0
51171: PPUSH
51172: PPUSH
51173: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
51174: LD_ADDR_VAR 0 2
51178: PUSH
51179: LD_INT 0
51181: PUSH
51182: LD_INT 0
51184: PUSH
51185: LD_INT 0
51187: PUSH
51188: LD_INT 0
51190: PUSH
51191: EMPTY
51192: LIST
51193: LIST
51194: LIST
51195: LIST
51196: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
51197: LD_VAR 0 1
51201: NOT
51202: PUSH
51203: LD_VAR 0 1
51207: PPUSH
51208: CALL_OW 264
51212: PUSH
51213: LD_INT 12
51215: PUSH
51216: LD_INT 51
51218: PUSH
51219: LD_INT 32
51221: PUSH
51222: LD_INT 89
51224: PUSH
51225: EMPTY
51226: LIST
51227: LIST
51228: LIST
51229: LIST
51230: IN
51231: NOT
51232: OR
51233: IFFALSE 51237
// exit ;
51235: GO 51335
// for i := 1 to 3 do
51237: LD_ADDR_VAR 0 3
51241: PUSH
51242: DOUBLE
51243: LD_INT 1
51245: DEC
51246: ST_TO_ADDR
51247: LD_INT 3
51249: PUSH
51250: FOR_TO
51251: IFFALSE 51333
// begin tmp := GetCargo ( cargo , i ) ;
51253: LD_ADDR_VAR 0 4
51257: PUSH
51258: LD_VAR 0 1
51262: PPUSH
51263: LD_VAR 0 3
51267: PPUSH
51268: CALL_OW 289
51272: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
51273: LD_ADDR_VAR 0 2
51277: PUSH
51278: LD_VAR 0 2
51282: PPUSH
51283: LD_VAR 0 3
51287: PPUSH
51288: LD_VAR 0 4
51292: PPUSH
51293: CALL_OW 1
51297: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
51298: LD_ADDR_VAR 0 2
51302: PUSH
51303: LD_VAR 0 2
51307: PPUSH
51308: LD_INT 4
51310: PPUSH
51311: LD_VAR 0 2
51315: PUSH
51316: LD_INT 4
51318: ARRAY
51319: PUSH
51320: LD_VAR 0 4
51324: PLUS
51325: PPUSH
51326: CALL_OW 1
51330: ST_TO_ADDR
// end ;
51331: GO 51250
51333: POP
51334: POP
// end ;
51335: LD_VAR 0 2
51339: RET
// export function Length ( array ) ; begin
51340: LD_INT 0
51342: PPUSH
// result := array + 0 ;
51343: LD_ADDR_VAR 0 2
51347: PUSH
51348: LD_VAR 0 1
51352: PUSH
51353: LD_INT 0
51355: PLUS
51356: ST_TO_ADDR
// end ;
51357: LD_VAR 0 2
51361: RET
// export function PrepareArray ( array ) ; begin
51362: LD_INT 0
51364: PPUSH
// result := array diff 0 ;
51365: LD_ADDR_VAR 0 2
51369: PUSH
51370: LD_VAR 0 1
51374: PUSH
51375: LD_INT 0
51377: DIFF
51378: ST_TO_ADDR
// if not result [ 1 ] then
51379: LD_VAR 0 2
51383: PUSH
51384: LD_INT 1
51386: ARRAY
51387: NOT
51388: IFFALSE 51408
// result := Delete ( result , 1 ) ;
51390: LD_ADDR_VAR 0 2
51394: PUSH
51395: LD_VAR 0 2
51399: PPUSH
51400: LD_INT 1
51402: PPUSH
51403: CALL_OW 3
51407: ST_TO_ADDR
// end ;
51408: LD_VAR 0 2
51412: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
51413: LD_INT 0
51415: PPUSH
51416: PPUSH
51417: PPUSH
51418: PPUSH
// sibRocketRange := 25 ;
51419: LD_ADDR_VAR 0 6
51423: PUSH
51424: LD_INT 25
51426: ST_TO_ADDR
// result := false ;
51427: LD_ADDR_VAR 0 4
51431: PUSH
51432: LD_INT 0
51434: ST_TO_ADDR
// for i := 0 to 5 do
51435: LD_ADDR_VAR 0 5
51439: PUSH
51440: DOUBLE
51441: LD_INT 0
51443: DEC
51444: ST_TO_ADDR
51445: LD_INT 5
51447: PUSH
51448: FOR_TO
51449: IFFALSE 51516
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
51451: LD_VAR 0 1
51455: PPUSH
51456: LD_VAR 0 5
51460: PPUSH
51461: LD_VAR 0 6
51465: PPUSH
51466: CALL_OW 272
51470: PPUSH
51471: LD_VAR 0 2
51475: PPUSH
51476: LD_VAR 0 5
51480: PPUSH
51481: LD_VAR 0 6
51485: PPUSH
51486: CALL_OW 273
51490: PPUSH
51491: LD_VAR 0 3
51495: PPUSH
51496: CALL_OW 309
51500: IFFALSE 51514
// begin result := true ;
51502: LD_ADDR_VAR 0 4
51506: PUSH
51507: LD_INT 1
51509: ST_TO_ADDR
// exit ;
51510: POP
51511: POP
51512: GO 51518
// end ;
51514: GO 51448
51516: POP
51517: POP
// end ;
51518: LD_VAR 0 4
51522: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
51523: LD_INT 0
51525: PPUSH
51526: PPUSH
51527: PPUSH
// if btype = b_depot then
51528: LD_VAR 0 2
51532: PUSH
51533: LD_INT 0
51535: EQUAL
51536: IFFALSE 51548
// begin result := true ;
51538: LD_ADDR_VAR 0 3
51542: PUSH
51543: LD_INT 1
51545: ST_TO_ADDR
// exit ;
51546: GO 51664
// end ; pom := GetBase ( depot ) ;
51548: LD_ADDR_VAR 0 4
51552: PUSH
51553: LD_VAR 0 1
51557: PPUSH
51558: CALL_OW 274
51562: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
51563: LD_ADDR_VAR 0 5
51567: PUSH
51568: LD_VAR 0 2
51572: PPUSH
51573: LD_VAR 0 1
51577: PPUSH
51578: CALL_OW 248
51582: PPUSH
51583: CALL_OW 450
51587: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
51588: LD_ADDR_VAR 0 3
51592: PUSH
51593: LD_VAR 0 4
51597: PPUSH
51598: LD_INT 1
51600: PPUSH
51601: CALL_OW 275
51605: PUSH
51606: LD_VAR 0 5
51610: PUSH
51611: LD_INT 1
51613: ARRAY
51614: GREATEREQUAL
51615: PUSH
51616: LD_VAR 0 4
51620: PPUSH
51621: LD_INT 2
51623: PPUSH
51624: CALL_OW 275
51628: PUSH
51629: LD_VAR 0 5
51633: PUSH
51634: LD_INT 2
51636: ARRAY
51637: GREATEREQUAL
51638: AND
51639: PUSH
51640: LD_VAR 0 4
51644: PPUSH
51645: LD_INT 3
51647: PPUSH
51648: CALL_OW 275
51652: PUSH
51653: LD_VAR 0 5
51657: PUSH
51658: LD_INT 3
51660: ARRAY
51661: GREATEREQUAL
51662: AND
51663: ST_TO_ADDR
// end ;
51664: LD_VAR 0 3
51668: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
51669: LD_INT 0
51671: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
51672: LD_VAR 0 1
51676: PPUSH
51677: LD_VAR 0 2
51681: PPUSH
51682: LD_INT 0
51684: PPUSH
51685: LD_INT 0
51687: PPUSH
51688: LD_INT 1
51690: PPUSH
51691: LD_INT 0
51693: PPUSH
51694: CALL_OW 587
// end ;
51698: LD_VAR 0 3
51702: RET
// export function CenterOnNow ( unit ) ; begin
51703: LD_INT 0
51705: PPUSH
// result := IsInUnit ( unit ) ;
51706: LD_ADDR_VAR 0 2
51710: PUSH
51711: LD_VAR 0 1
51715: PPUSH
51716: CALL_OW 310
51720: ST_TO_ADDR
// if not result then
51721: LD_VAR 0 2
51725: NOT
51726: IFFALSE 51738
// result := unit ;
51728: LD_ADDR_VAR 0 2
51732: PUSH
51733: LD_VAR 0 1
51737: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
51738: LD_VAR 0 1
51742: PPUSH
51743: CALL_OW 87
// end ;
51747: LD_VAR 0 2
51751: RET
// export function ComMoveHex ( unit , hex ) ; begin
51752: LD_INT 0
51754: PPUSH
// if not hex then
51755: LD_VAR 0 2
51759: NOT
51760: IFFALSE 51764
// exit ;
51762: GO 51817
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
51764: LD_VAR 0 2
51768: PUSH
51769: LD_INT 1
51771: ARRAY
51772: PPUSH
51773: LD_VAR 0 2
51777: PUSH
51778: LD_INT 2
51780: ARRAY
51781: PPUSH
51782: CALL_OW 428
51786: IFFALSE 51790
// exit ;
51788: GO 51817
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
51790: LD_VAR 0 1
51794: PPUSH
51795: LD_VAR 0 2
51799: PUSH
51800: LD_INT 1
51802: ARRAY
51803: PPUSH
51804: LD_VAR 0 2
51808: PUSH
51809: LD_INT 2
51811: ARRAY
51812: PPUSH
51813: CALL_OW 111
// end ;
51817: LD_VAR 0 3
51821: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
51822: LD_INT 0
51824: PPUSH
51825: PPUSH
51826: PPUSH
// if not unit or not enemy then
51827: LD_VAR 0 1
51831: NOT
51832: PUSH
51833: LD_VAR 0 2
51837: NOT
51838: OR
51839: IFFALSE 51843
// exit ;
51841: GO 51967
// x := GetX ( enemy ) ;
51843: LD_ADDR_VAR 0 4
51847: PUSH
51848: LD_VAR 0 2
51852: PPUSH
51853: CALL_OW 250
51857: ST_TO_ADDR
// y := GetY ( enemy ) ;
51858: LD_ADDR_VAR 0 5
51862: PUSH
51863: LD_VAR 0 2
51867: PPUSH
51868: CALL_OW 251
51872: ST_TO_ADDR
// if ValidHex ( x , y ) then
51873: LD_VAR 0 4
51877: PPUSH
51878: LD_VAR 0 5
51882: PPUSH
51883: CALL_OW 488
51887: IFFALSE 51967
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
51889: LD_VAR 0 2
51893: PPUSH
51894: CALL_OW 247
51898: PUSH
51899: LD_INT 3
51901: PUSH
51902: LD_INT 2
51904: PUSH
51905: EMPTY
51906: LIST
51907: LIST
51908: IN
51909: PUSH
51910: LD_VAR 0 1
51914: PPUSH
51915: CALL_OW 255
51919: PPUSH
51920: LD_VAR 0 2
51924: PPUSH
51925: CALL_OW 292
51929: OR
51930: IFFALSE 51948
// ComAttackUnit ( unit , enemy ) else
51932: LD_VAR 0 1
51936: PPUSH
51937: LD_VAR 0 2
51941: PPUSH
51942: CALL_OW 115
51946: GO 51967
// ComAgressiveMove ( unit , x , y ) ;
51948: LD_VAR 0 1
51952: PPUSH
51953: LD_VAR 0 4
51957: PPUSH
51958: LD_VAR 0 5
51962: PPUSH
51963: CALL_OW 114
// end ;
51967: LD_VAR 0 3
51971: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
51972: LD_INT 0
51974: PPUSH
51975: PPUSH
51976: PPUSH
// list := AreaToList ( area , 0 ) ;
51977: LD_ADDR_VAR 0 5
51981: PUSH
51982: LD_VAR 0 1
51986: PPUSH
51987: LD_INT 0
51989: PPUSH
51990: CALL_OW 517
51994: ST_TO_ADDR
// if not list then
51995: LD_VAR 0 5
51999: NOT
52000: IFFALSE 52004
// exit ;
52002: GO 52134
// if all then
52004: LD_VAR 0 2
52008: IFFALSE 52096
// begin for i := 1 to list [ 1 ] do
52010: LD_ADDR_VAR 0 4
52014: PUSH
52015: DOUBLE
52016: LD_INT 1
52018: DEC
52019: ST_TO_ADDR
52020: LD_VAR 0 5
52024: PUSH
52025: LD_INT 1
52027: ARRAY
52028: PUSH
52029: FOR_TO
52030: IFFALSE 52092
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
52032: LD_ADDR_VAR 0 3
52036: PUSH
52037: LD_VAR 0 3
52041: PPUSH
52042: LD_VAR 0 3
52046: PUSH
52047: LD_INT 1
52049: PLUS
52050: PPUSH
52051: LD_VAR 0 5
52055: PUSH
52056: LD_INT 1
52058: ARRAY
52059: PUSH
52060: LD_VAR 0 4
52064: ARRAY
52065: PUSH
52066: LD_VAR 0 5
52070: PUSH
52071: LD_INT 2
52073: ARRAY
52074: PUSH
52075: LD_VAR 0 4
52079: ARRAY
52080: PUSH
52081: EMPTY
52082: LIST
52083: LIST
52084: PPUSH
52085: CALL_OW 1
52089: ST_TO_ADDR
52090: GO 52029
52092: POP
52093: POP
// exit ;
52094: GO 52134
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
52096: LD_ADDR_VAR 0 3
52100: PUSH
52101: LD_VAR 0 5
52105: PUSH
52106: LD_INT 1
52108: ARRAY
52109: PUSH
52110: LD_INT 1
52112: ARRAY
52113: PUSH
52114: LD_VAR 0 5
52118: PUSH
52119: LD_INT 2
52121: ARRAY
52122: PUSH
52123: LD_INT 1
52125: ARRAY
52126: PUSH
52127: EMPTY
52128: LIST
52129: LIST
52130: PUSH
52131: EMPTY
52132: LIST
52133: ST_TO_ADDR
// end ;
52134: LD_VAR 0 3
52138: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
52139: LD_INT 0
52141: PPUSH
52142: PPUSH
// list := AreaToList ( area , 0 ) ;
52143: LD_ADDR_VAR 0 4
52147: PUSH
52148: LD_VAR 0 1
52152: PPUSH
52153: LD_INT 0
52155: PPUSH
52156: CALL_OW 517
52160: ST_TO_ADDR
// if not list then
52161: LD_VAR 0 4
52165: NOT
52166: IFFALSE 52170
// exit ;
52168: GO 52211
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
52170: LD_ADDR_VAR 0 3
52174: PUSH
52175: LD_VAR 0 4
52179: PUSH
52180: LD_INT 1
52182: ARRAY
52183: PUSH
52184: LD_INT 1
52186: ARRAY
52187: PUSH
52188: LD_VAR 0 4
52192: PUSH
52193: LD_INT 2
52195: ARRAY
52196: PUSH
52197: LD_INT 1
52199: ARRAY
52200: PUSH
52201: LD_VAR 0 2
52205: PUSH
52206: EMPTY
52207: LIST
52208: LIST
52209: LIST
52210: ST_TO_ADDR
// end ;
52211: LD_VAR 0 3
52215: RET
// export function First ( array ) ; begin
52216: LD_INT 0
52218: PPUSH
// if not array then
52219: LD_VAR 0 1
52223: NOT
52224: IFFALSE 52228
// exit ;
52226: GO 52242
// result := array [ 1 ] ;
52228: LD_ADDR_VAR 0 2
52232: PUSH
52233: LD_VAR 0 1
52237: PUSH
52238: LD_INT 1
52240: ARRAY
52241: ST_TO_ADDR
// end ;
52242: LD_VAR 0 2
52246: RET
// export function Last ( array ) ; begin
52247: LD_INT 0
52249: PPUSH
// if not array then
52250: LD_VAR 0 1
52254: NOT
52255: IFFALSE 52259
// exit ;
52257: GO 52275
// result := array [ array ] ;
52259: LD_ADDR_VAR 0 2
52263: PUSH
52264: LD_VAR 0 1
52268: PUSH
52269: LD_VAR 0 1
52273: ARRAY
52274: ST_TO_ADDR
// end ;
52275: LD_VAR 0 2
52279: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
52280: LD_INT 0
52282: PPUSH
52283: PPUSH
// result := [ ] ;
52284: LD_ADDR_VAR 0 5
52288: PUSH
52289: EMPTY
52290: ST_TO_ADDR
// if not array then
52291: LD_VAR 0 1
52295: NOT
52296: IFFALSE 52300
// exit ;
52298: GO 52412
// for i := 1 to array do
52300: LD_ADDR_VAR 0 6
52304: PUSH
52305: DOUBLE
52306: LD_INT 1
52308: DEC
52309: ST_TO_ADDR
52310: LD_VAR 0 1
52314: PUSH
52315: FOR_TO
52316: IFFALSE 52410
// if array [ i ] [ index ] = value then
52318: LD_VAR 0 1
52322: PUSH
52323: LD_VAR 0 6
52327: ARRAY
52328: PUSH
52329: LD_VAR 0 2
52333: ARRAY
52334: PUSH
52335: LD_VAR 0 3
52339: EQUAL
52340: IFFALSE 52408
// begin if indexColumn then
52342: LD_VAR 0 4
52346: IFFALSE 52382
// result := Join ( result , array [ i ] [ indexColumn ] ) else
52348: LD_ADDR_VAR 0 5
52352: PUSH
52353: LD_VAR 0 5
52357: PPUSH
52358: LD_VAR 0 1
52362: PUSH
52363: LD_VAR 0 6
52367: ARRAY
52368: PUSH
52369: LD_VAR 0 4
52373: ARRAY
52374: PPUSH
52375: CALL 47594 0 2
52379: ST_TO_ADDR
52380: GO 52408
// result := Join ( result , array [ i ] ) ;
52382: LD_ADDR_VAR 0 5
52386: PUSH
52387: LD_VAR 0 5
52391: PPUSH
52392: LD_VAR 0 1
52396: PUSH
52397: LD_VAR 0 6
52401: ARRAY
52402: PPUSH
52403: CALL 47594 0 2
52407: ST_TO_ADDR
// end ;
52408: GO 52315
52410: POP
52411: POP
// end ;
52412: LD_VAR 0 5
52416: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
52417: LD_INT 0
52419: PPUSH
// if not vehicles or not parkingPoint then
52420: LD_VAR 0 1
52424: NOT
52425: PUSH
52426: LD_VAR 0 2
52430: NOT
52431: OR
52432: IFFALSE 52436
// exit ;
52434: GO 52534
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
52436: LD_ADDR_VAR 0 1
52440: PUSH
52441: LD_VAR 0 1
52445: PPUSH
52446: LD_INT 50
52448: PUSH
52449: EMPTY
52450: LIST
52451: PUSH
52452: LD_INT 3
52454: PUSH
52455: LD_INT 92
52457: PUSH
52458: LD_VAR 0 2
52462: PUSH
52463: LD_INT 1
52465: ARRAY
52466: PUSH
52467: LD_VAR 0 2
52471: PUSH
52472: LD_INT 2
52474: ARRAY
52475: PUSH
52476: LD_INT 8
52478: PUSH
52479: EMPTY
52480: LIST
52481: LIST
52482: LIST
52483: LIST
52484: PUSH
52485: EMPTY
52486: LIST
52487: LIST
52488: PUSH
52489: EMPTY
52490: LIST
52491: LIST
52492: PPUSH
52493: CALL_OW 72
52497: ST_TO_ADDR
// if not vehicles then
52498: LD_VAR 0 1
52502: NOT
52503: IFFALSE 52507
// exit ;
52505: GO 52534
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
52507: LD_VAR 0 1
52511: PPUSH
52512: LD_VAR 0 2
52516: PUSH
52517: LD_INT 1
52519: ARRAY
52520: PPUSH
52521: LD_VAR 0 2
52525: PUSH
52526: LD_INT 2
52528: ARRAY
52529: PPUSH
52530: CALL_OW 111
// end ;
52534: LD_VAR 0 3
52538: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
52539: LD_INT 0
52541: PPUSH
52542: PPUSH
52543: PPUSH
// if not side or not area then
52544: LD_VAR 0 1
52548: NOT
52549: PUSH
52550: LD_VAR 0 2
52554: NOT
52555: OR
52556: IFFALSE 52560
// exit ;
52558: GO 52679
// tmp := AreaToList ( area , 0 ) ;
52560: LD_ADDR_VAR 0 5
52564: PUSH
52565: LD_VAR 0 2
52569: PPUSH
52570: LD_INT 0
52572: PPUSH
52573: CALL_OW 517
52577: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
52578: LD_ADDR_VAR 0 4
52582: PUSH
52583: DOUBLE
52584: LD_INT 1
52586: DEC
52587: ST_TO_ADDR
52588: LD_VAR 0 5
52592: PUSH
52593: LD_INT 1
52595: ARRAY
52596: PUSH
52597: FOR_TO
52598: IFFALSE 52677
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
52600: LD_VAR 0 5
52604: PUSH
52605: LD_INT 1
52607: ARRAY
52608: PUSH
52609: LD_VAR 0 4
52613: ARRAY
52614: PPUSH
52615: LD_VAR 0 5
52619: PUSH
52620: LD_INT 2
52622: ARRAY
52623: PUSH
52624: LD_VAR 0 4
52628: ARRAY
52629: PPUSH
52630: CALL_OW 351
52634: IFFALSE 52675
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
52636: LD_VAR 0 5
52640: PUSH
52641: LD_INT 1
52643: ARRAY
52644: PUSH
52645: LD_VAR 0 4
52649: ARRAY
52650: PPUSH
52651: LD_VAR 0 5
52655: PUSH
52656: LD_INT 2
52658: ARRAY
52659: PUSH
52660: LD_VAR 0 4
52664: ARRAY
52665: PPUSH
52666: LD_VAR 0 1
52670: PPUSH
52671: CALL_OW 244
// end ;
52675: GO 52597
52677: POP
52678: POP
// end ; end_of_file
52679: LD_VAR 0 3
52683: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
52684: LD_VAR 0 1
52688: PUSH
52689: LD_INT 200
52691: DOUBLE
52692: GREATEREQUAL
52693: IFFALSE 52701
52695: LD_INT 299
52697: DOUBLE
52698: LESSEQUAL
52699: IFTRUE 52703
52701: GO 52735
52703: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
52704: LD_VAR 0 1
52708: PPUSH
52709: LD_VAR 0 2
52713: PPUSH
52714: LD_VAR 0 3
52718: PPUSH
52719: LD_VAR 0 4
52723: PPUSH
52724: LD_VAR 0 5
52728: PPUSH
52729: CALL 53512 0 5
52733: GO 52812
52735: LD_INT 300
52737: DOUBLE
52738: GREATEREQUAL
52739: IFFALSE 52747
52741: LD_INT 399
52743: DOUBLE
52744: LESSEQUAL
52745: IFTRUE 52749
52747: GO 52811
52749: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
52750: LD_VAR 0 1
52754: PPUSH
52755: LD_VAR 0 2
52759: PPUSH
52760: LD_VAR 0 3
52764: PPUSH
52765: LD_VAR 0 4
52769: PPUSH
52770: LD_VAR 0 5
52774: PPUSH
52775: LD_VAR 0 6
52779: PPUSH
52780: LD_VAR 0 7
52784: PPUSH
52785: LD_VAR 0 8
52789: PPUSH
52790: LD_VAR 0 9
52794: PPUSH
52795: LD_VAR 0 10
52799: PPUSH
52800: LD_VAR 0 11
52804: PPUSH
52805: CALL 60439 0 11
52809: GO 52812
52811: POP
// end ;
52812: PPOPN 11
52814: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
52815: LD_VAR 0 1
52819: PPUSH
52820: LD_VAR 0 2
52824: PPUSH
52825: LD_VAR 0 3
52829: PPUSH
52830: LD_VAR 0 4
52834: PPUSH
52835: LD_VAR 0 5
52839: PPUSH
52840: CALL 52897 0 5
// end ; end_of_file
52844: PPOPN 5
52846: END
// export function SOS_UnitDestroyed ( un ) ; begin
52847: LD_INT 0
52849: PPUSH
// ComRadiation ( un ) ;
52850: LD_VAR 0 1
52854: PPUSH
52855: CALL 53916 0 1
// end ;
52859: LD_VAR 0 2
52863: RET
// export function SOS_UnitKamikazed ( un ) ; begin
52864: LD_INT 0
52866: PPUSH
// ComRadiation ( un ) ;
52867: LD_VAR 0 1
52871: PPUSH
52872: CALL 53916 0 1
// end ;
52876: LD_VAR 0 2
52880: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
52881: LD_INT 0
52883: PPUSH
// end ;
52884: LD_VAR 0 4
52888: RET
// export function SOS_Command ( cmd ) ; begin
52889: LD_INT 0
52891: PPUSH
// end ;
52892: LD_VAR 0 2
52896: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
52897: LD_INT 0
52899: PPUSH
// end ;
52900: LD_VAR 0 6
52904: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , driver , hex ; begin
52905: LD_INT 0
52907: PPUSH
52908: PPUSH
52909: PPUSH
52910: PPUSH
// if not vehicle or not factory then
52911: LD_VAR 0 1
52915: NOT
52916: PUSH
52917: LD_VAR 0 2
52921: NOT
52922: OR
52923: IFFALSE 52927
// exit ;
52925: GO 53507
// if not factoryWaypoints then
52927: LD_EXP 59
52931: NOT
52932: IFFALSE 52936
// exit ;
52934: GO 53507
// for i := 1 to Count ( factoryWaypoints ) do
52936: LD_ADDR_VAR 0 4
52940: PUSH
52941: DOUBLE
52942: LD_INT 1
52944: DEC
52945: ST_TO_ADDR
52946: LD_EXP 59
52950: PPUSH
52951: CALL 11985 0 1
52955: PUSH
52956: FOR_TO
52957: IFFALSE 53505
// if factoryWaypoints [ i ] [ 2 ] = factory then
52959: LD_EXP 59
52963: PUSH
52964: LD_VAR 0 4
52968: ARRAY
52969: PUSH
52970: LD_INT 2
52972: ARRAY
52973: PUSH
52974: LD_VAR 0 2
52978: EQUAL
52979: IFFALSE 53503
// begin if GetControl ( vehicle ) = control_manual then
52981: LD_VAR 0 1
52985: PPUSH
52986: CALL_OW 263
52990: PUSH
52991: LD_INT 1
52993: EQUAL
52994: IFFALSE 53356
// begin driver := IsDrivenBy ( vehicle ) ;
52996: LD_ADDR_VAR 0 5
53000: PUSH
53001: LD_VAR 0 1
53005: PPUSH
53006: CALL_OW 311
53010: ST_TO_ADDR
// if driver in factoryWaypointsDrivers or vehicle in factoryWaypointsDrivers then
53011: LD_VAR 0 5
53015: PUSH
53016: LD_EXP 60
53020: IN
53021: PUSH
53022: LD_VAR 0 1
53026: PUSH
53027: LD_EXP 60
53031: IN
53032: OR
53033: IFFALSE 53039
// exit ;
53035: POP
53036: POP
53037: GO 53507
// if not HasTask ( driver ) then
53039: LD_VAR 0 5
53043: PPUSH
53044: CALL_OW 314
53048: NOT
53049: IFFALSE 53354
// begin factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , driver ) ;
53051: LD_ADDR_EXP 60
53055: PUSH
53056: LD_EXP 60
53060: PPUSH
53061: LD_VAR 0 5
53065: PPUSH
53066: CALL 47594 0 2
53070: ST_TO_ADDR
// factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , vehicle ) ;
53071: LD_ADDR_EXP 60
53075: PUSH
53076: LD_EXP 60
53080: PPUSH
53081: LD_VAR 0 1
53085: PPUSH
53086: CALL 47594 0 2
53090: ST_TO_ADDR
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
53091: LD_ADDR_VAR 0 6
53095: PUSH
53096: LD_EXP 59
53100: PUSH
53101: LD_VAR 0 4
53105: ARRAY
53106: PUSH
53107: LD_INT 3
53109: ARRAY
53110: PPUSH
53111: LD_EXP 59
53115: PUSH
53116: LD_VAR 0 4
53120: ARRAY
53121: PUSH
53122: LD_INT 4
53124: ARRAY
53125: PPUSH
53126: CALL_OW 428
53130: ST_TO_ADDR
// if hex then
53131: LD_VAR 0 6
53135: IFFALSE 53153
// ComMoveUnit ( driver , hex ) else
53137: LD_VAR 0 5
53141: PPUSH
53142: LD_VAR 0 6
53146: PPUSH
53147: CALL_OW 112
53151: GO 53237
// if GetDistUnitXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) > 0 then
53153: LD_VAR 0 1
53157: PPUSH
53158: LD_EXP 59
53162: PUSH
53163: LD_VAR 0 4
53167: ARRAY
53168: PUSH
53169: LD_INT 3
53171: ARRAY
53172: PPUSH
53173: LD_EXP 59
53177: PUSH
53178: LD_VAR 0 4
53182: ARRAY
53183: PUSH
53184: LD_INT 4
53186: ARRAY
53187: PPUSH
53188: CALL_OW 297
53192: PUSH
53193: LD_INT 0
53195: GREATER
53196: IFFALSE 53237
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
53198: LD_VAR 0 5
53202: PPUSH
53203: LD_EXP 59
53207: PUSH
53208: LD_VAR 0 4
53212: ARRAY
53213: PUSH
53214: LD_INT 3
53216: ARRAY
53217: PPUSH
53218: LD_EXP 59
53222: PUSH
53223: LD_VAR 0 4
53227: ARRAY
53228: PUSH
53229: LD_INT 4
53231: ARRAY
53232: PPUSH
53233: CALL_OW 111
// AddComExitVehicle ( driver ) ;
53237: LD_VAR 0 5
53241: PPUSH
53242: CALL_OW 181
// if Multiplayer then
53246: LD_OWVAR 4
53250: IFFALSE 53299
// begin repeat wait ( 10 ) ;
53252: LD_INT 10
53254: PPUSH
53255: CALL_OW 67
// until not IsInUnit ( driver ) ;
53259: LD_VAR 0 5
53263: PPUSH
53264: CALL_OW 310
53268: NOT
53269: IFFALSE 53252
// if not HasTask ( driver ) then
53271: LD_VAR 0 5
53275: PPUSH
53276: CALL_OW 314
53280: NOT
53281: IFFALSE 53297
// ComEnterUnit ( driver , factory ) ;
53283: LD_VAR 0 5
53287: PPUSH
53288: LD_VAR 0 2
53292: PPUSH
53293: CALL_OW 120
// end else
53297: GO 53313
// AddComEnterUnit ( driver , factory ) ;
53299: LD_VAR 0 5
53303: PPUSH
53304: LD_VAR 0 2
53308: PPUSH
53309: CALL_OW 180
// wait ( 0 0$1 ) ;
53313: LD_INT 35
53315: PPUSH
53316: CALL_OW 67
// factoryWaypointsDrivers := factoryWaypointsDrivers diff driver ;
53320: LD_ADDR_EXP 60
53324: PUSH
53325: LD_EXP 60
53329: PUSH
53330: LD_VAR 0 5
53334: DIFF
53335: ST_TO_ADDR
// factoryWaypointsDrivers := factoryWaypointsDrivers diff vehicle ;
53336: LD_ADDR_EXP 60
53340: PUSH
53341: LD_EXP 60
53345: PUSH
53346: LD_VAR 0 1
53350: DIFF
53351: ST_TO_ADDR
// break ;
53352: GO 53505
// end ; end else
53354: GO 53503
// if GetControl ( vehicle ) = control_remote then
53356: LD_VAR 0 1
53360: PPUSH
53361: CALL_OW 263
53365: PUSH
53366: LD_INT 2
53368: EQUAL
53369: IFFALSE 53455
// begin wait ( 0 0$2 ) ;
53371: LD_INT 70
53373: PPUSH
53374: CALL_OW 67
// repeat wait ( 10 ) ;
53378: LD_INT 10
53380: PPUSH
53381: CALL_OW 67
// Connect ( vehicle ) ;
53385: LD_VAR 0 1
53389: PPUSH
53390: CALL 18191 0 1
// until IsControledBy ( vehicle ) ;
53394: LD_VAR 0 1
53398: PPUSH
53399: CALL_OW 312
53403: IFFALSE 53378
// wait ( 10 ) ;
53405: LD_INT 10
53407: PPUSH
53408: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
53412: LD_VAR 0 1
53416: PPUSH
53417: LD_EXP 59
53421: PUSH
53422: LD_VAR 0 4
53426: ARRAY
53427: PUSH
53428: LD_INT 3
53430: ARRAY
53431: PPUSH
53432: LD_EXP 59
53436: PUSH
53437: LD_VAR 0 4
53441: ARRAY
53442: PUSH
53443: LD_INT 4
53445: ARRAY
53446: PPUSH
53447: CALL_OW 111
// break ;
53451: GO 53505
// end else
53453: GO 53503
// begin wait ( 0 0$3 ) ;
53455: LD_INT 105
53457: PPUSH
53458: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
53462: LD_VAR 0 1
53466: PPUSH
53467: LD_EXP 59
53471: PUSH
53472: LD_VAR 0 4
53476: ARRAY
53477: PUSH
53478: LD_INT 3
53480: ARRAY
53481: PPUSH
53482: LD_EXP 59
53486: PUSH
53487: LD_VAR 0 4
53491: ARRAY
53492: PUSH
53493: LD_INT 4
53495: ARRAY
53496: PPUSH
53497: CALL_OW 111
// break ;
53501: GO 53505
// end ; end ;
53503: GO 52956
53505: POP
53506: POP
// end ;
53507: LD_VAR 0 3
53511: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
53512: LD_INT 0
53514: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
53515: LD_VAR 0 1
53519: PUSH
53520: LD_INT 250
53522: EQUAL
53523: PUSH
53524: LD_VAR 0 2
53528: PPUSH
53529: CALL_OW 264
53533: PUSH
53534: LD_INT 81
53536: EQUAL
53537: AND
53538: IFFALSE 53559
// MinerPlaceMine ( unit , x , y ) ;
53540: LD_VAR 0 2
53544: PPUSH
53545: LD_VAR 0 4
53549: PPUSH
53550: LD_VAR 0 5
53554: PPUSH
53555: CALL 56651 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
53559: LD_VAR 0 1
53563: PUSH
53564: LD_INT 251
53566: EQUAL
53567: PUSH
53568: LD_VAR 0 2
53572: PPUSH
53573: CALL_OW 264
53577: PUSH
53578: LD_INT 81
53580: EQUAL
53581: AND
53582: IFFALSE 53603
// MinerDetonateMine ( unit , x , y ) ;
53584: LD_VAR 0 2
53588: PPUSH
53589: LD_VAR 0 4
53593: PPUSH
53594: LD_VAR 0 5
53598: PPUSH
53599: CALL 56926 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
53603: LD_VAR 0 1
53607: PUSH
53608: LD_INT 252
53610: EQUAL
53611: PUSH
53612: LD_VAR 0 2
53616: PPUSH
53617: CALL_OW 264
53621: PUSH
53622: LD_INT 81
53624: EQUAL
53625: AND
53626: IFFALSE 53647
// MinerCreateMinefield ( unit , x , y ) ;
53628: LD_VAR 0 2
53632: PPUSH
53633: LD_VAR 0 4
53637: PPUSH
53638: LD_VAR 0 5
53642: PPUSH
53643: CALL 57343 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
53647: LD_VAR 0 1
53651: PUSH
53652: LD_INT 253
53654: EQUAL
53655: PUSH
53656: LD_VAR 0 2
53660: PPUSH
53661: CALL_OW 257
53665: PUSH
53666: LD_INT 5
53668: EQUAL
53669: AND
53670: IFFALSE 53691
// ComBinocular ( unit , x , y ) ;
53672: LD_VAR 0 2
53676: PPUSH
53677: LD_VAR 0 4
53681: PPUSH
53682: LD_VAR 0 5
53686: PPUSH
53687: CALL 57712 0 3
// if selectedUnit then
53691: LD_VAR 0 3
53695: IFFALSE 53751
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
53697: LD_VAR 0 1
53701: PUSH
53702: LD_INT 254
53704: EQUAL
53705: PUSH
53706: LD_VAR 0 2
53710: PPUSH
53711: CALL_OW 264
53715: PUSH
53716: LD_INT 99
53718: EQUAL
53719: AND
53720: PUSH
53721: LD_VAR 0 3
53725: PPUSH
53726: CALL_OW 263
53730: PUSH
53731: LD_INT 3
53733: EQUAL
53734: AND
53735: IFFALSE 53751
// HackDestroyVehicle ( unit , selectedUnit ) ;
53737: LD_VAR 0 2
53741: PPUSH
53742: LD_VAR 0 3
53746: PPUSH
53747: CALL 56015 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
53751: LD_VAR 0 1
53755: PUSH
53756: LD_INT 255
53758: EQUAL
53759: PUSH
53760: LD_VAR 0 2
53764: PPUSH
53765: CALL_OW 264
53769: PUSH
53770: LD_INT 14
53772: PUSH
53773: LD_INT 53
53775: PUSH
53776: EMPTY
53777: LIST
53778: LIST
53779: IN
53780: AND
53781: PUSH
53782: LD_VAR 0 4
53786: PPUSH
53787: LD_VAR 0 5
53791: PPUSH
53792: CALL_OW 488
53796: AND
53797: IFFALSE 53821
// CutTreeXYR ( unit , x , y , 12 ) ;
53799: LD_VAR 0 2
53803: PPUSH
53804: LD_VAR 0 4
53808: PPUSH
53809: LD_VAR 0 5
53813: PPUSH
53814: LD_INT 12
53816: PPUSH
53817: CALL 54012 0 4
// if cmd = 256 then
53821: LD_VAR 0 1
53825: PUSH
53826: LD_INT 256
53828: EQUAL
53829: IFFALSE 53850
// SetFactoryWaypoint ( unit , x , y ) ;
53831: LD_VAR 0 2
53835: PPUSH
53836: LD_VAR 0 4
53840: PPUSH
53841: LD_VAR 0 5
53845: PPUSH
53846: CALL 60447 0 3
// if cmd = 257 then
53850: LD_VAR 0 1
53854: PUSH
53855: LD_INT 257
53857: EQUAL
53858: IFFALSE 53879
// SetWarehouseGatheringPoint ( unit , x , y ) ;
53860: LD_VAR 0 2
53864: PPUSH
53865: LD_VAR 0 4
53869: PPUSH
53870: LD_VAR 0 5
53874: PPUSH
53875: CALL 60937 0 3
// if cmd = 258 then
53879: LD_VAR 0 1
53883: PUSH
53884: LD_INT 258
53886: EQUAL
53887: IFFALSE 53911
// BurnTreeXYR ( unit , x , y , 8 ) ;
53889: LD_VAR 0 2
53893: PPUSH
53894: LD_VAR 0 4
53898: PPUSH
53899: LD_VAR 0 5
53903: PPUSH
53904: LD_INT 8
53906: PPUSH
53907: CALL 54406 0 4
// end ;
53911: LD_VAR 0 6
53915: RET
// export function ComRadiation ( un ) ; var eff ; begin
53916: LD_INT 0
53918: PPUSH
53919: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
53920: LD_VAR 0 1
53924: PPUSH
53925: CALL_OW 264
53929: PUSH
53930: LD_INT 91
53932: NONEQUAL
53933: IFFALSE 53937
// exit ;
53935: GO 54007
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
53937: LD_INT 68
53939: PPUSH
53940: LD_VAR 0 1
53944: PPUSH
53945: CALL_OW 255
53949: PPUSH
53950: CALL_OW 321
53954: PUSH
53955: LD_INT 2
53957: EQUAL
53958: IFFALSE 53970
// eff := 50 else
53960: LD_ADDR_VAR 0 3
53964: PUSH
53965: LD_INT 50
53967: ST_TO_ADDR
53968: GO 53978
// eff := 25 ;
53970: LD_ADDR_VAR 0 3
53974: PUSH
53975: LD_INT 25
53977: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
53978: LD_VAR 0 1
53982: PPUSH
53983: CALL_OW 250
53987: PPUSH
53988: LD_VAR 0 1
53992: PPUSH
53993: CALL_OW 251
53997: PPUSH
53998: LD_VAR 0 3
54002: PPUSH
54003: CALL_OW 495
// end ;
54007: LD_VAR 0 2
54011: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
54012: LD_INT 0
54014: PPUSH
54015: PPUSH
54016: PPUSH
54017: PPUSH
54018: PPUSH
54019: PPUSH
54020: PPUSH
54021: PPUSH
54022: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
54023: LD_VAR 0 1
54027: PPUSH
54028: CALL_OW 302
54032: NOT
54033: PUSH
54034: LD_VAR 0 2
54038: PPUSH
54039: LD_VAR 0 3
54043: PPUSH
54044: CALL_OW 488
54048: NOT
54049: OR
54050: PUSH
54051: LD_VAR 0 4
54055: NOT
54056: OR
54057: IFFALSE 54061
// exit ;
54059: GO 54401
// list := [ ] ;
54061: LD_ADDR_VAR 0 13
54065: PUSH
54066: EMPTY
54067: ST_TO_ADDR
// if x - r < 0 then
54068: LD_VAR 0 2
54072: PUSH
54073: LD_VAR 0 4
54077: MINUS
54078: PUSH
54079: LD_INT 0
54081: LESS
54082: IFFALSE 54094
// min_x := 0 else
54084: LD_ADDR_VAR 0 7
54088: PUSH
54089: LD_INT 0
54091: ST_TO_ADDR
54092: GO 54110
// min_x := x - r ;
54094: LD_ADDR_VAR 0 7
54098: PUSH
54099: LD_VAR 0 2
54103: PUSH
54104: LD_VAR 0 4
54108: MINUS
54109: ST_TO_ADDR
// if y - r < 0 then
54110: LD_VAR 0 3
54114: PUSH
54115: LD_VAR 0 4
54119: MINUS
54120: PUSH
54121: LD_INT 0
54123: LESS
54124: IFFALSE 54136
// min_y := 0 else
54126: LD_ADDR_VAR 0 8
54130: PUSH
54131: LD_INT 0
54133: ST_TO_ADDR
54134: GO 54152
// min_y := y - r ;
54136: LD_ADDR_VAR 0 8
54140: PUSH
54141: LD_VAR 0 3
54145: PUSH
54146: LD_VAR 0 4
54150: MINUS
54151: ST_TO_ADDR
// max_x := x + r ;
54152: LD_ADDR_VAR 0 9
54156: PUSH
54157: LD_VAR 0 2
54161: PUSH
54162: LD_VAR 0 4
54166: PLUS
54167: ST_TO_ADDR
// max_y := y + r ;
54168: LD_ADDR_VAR 0 10
54172: PUSH
54173: LD_VAR 0 3
54177: PUSH
54178: LD_VAR 0 4
54182: PLUS
54183: ST_TO_ADDR
// for _x = min_x to max_x do
54184: LD_ADDR_VAR 0 11
54188: PUSH
54189: DOUBLE
54190: LD_VAR 0 7
54194: DEC
54195: ST_TO_ADDR
54196: LD_VAR 0 9
54200: PUSH
54201: FOR_TO
54202: IFFALSE 54319
// for _y = min_y to max_y do
54204: LD_ADDR_VAR 0 12
54208: PUSH
54209: DOUBLE
54210: LD_VAR 0 8
54214: DEC
54215: ST_TO_ADDR
54216: LD_VAR 0 10
54220: PUSH
54221: FOR_TO
54222: IFFALSE 54315
// begin if not ValidHex ( _x , _y ) then
54224: LD_VAR 0 11
54228: PPUSH
54229: LD_VAR 0 12
54233: PPUSH
54234: CALL_OW 488
54238: NOT
54239: IFFALSE 54243
// continue ;
54241: GO 54221
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
54243: LD_VAR 0 11
54247: PPUSH
54248: LD_VAR 0 12
54252: PPUSH
54253: CALL_OW 351
54257: PUSH
54258: LD_VAR 0 11
54262: PPUSH
54263: LD_VAR 0 12
54267: PPUSH
54268: CALL_OW 554
54272: AND
54273: IFFALSE 54313
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
54275: LD_ADDR_VAR 0 13
54279: PUSH
54280: LD_VAR 0 13
54284: PPUSH
54285: LD_VAR 0 13
54289: PUSH
54290: LD_INT 1
54292: PLUS
54293: PPUSH
54294: LD_VAR 0 11
54298: PUSH
54299: LD_VAR 0 12
54303: PUSH
54304: EMPTY
54305: LIST
54306: LIST
54307: PPUSH
54308: CALL_OW 2
54312: ST_TO_ADDR
// end ;
54313: GO 54221
54315: POP
54316: POP
54317: GO 54201
54319: POP
54320: POP
// if not list then
54321: LD_VAR 0 13
54325: NOT
54326: IFFALSE 54330
// exit ;
54328: GO 54401
// for i in list do
54330: LD_ADDR_VAR 0 6
54334: PUSH
54335: LD_VAR 0 13
54339: PUSH
54340: FOR_IN
54341: IFFALSE 54399
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
54343: LD_VAR 0 1
54347: PPUSH
54348: LD_STRING M
54350: PUSH
54351: LD_VAR 0 6
54355: PUSH
54356: LD_INT 1
54358: ARRAY
54359: PUSH
54360: LD_VAR 0 6
54364: PUSH
54365: LD_INT 2
54367: ARRAY
54368: PUSH
54369: LD_INT 0
54371: PUSH
54372: LD_INT 0
54374: PUSH
54375: LD_INT 0
54377: PUSH
54378: LD_INT 0
54380: PUSH
54381: EMPTY
54382: LIST
54383: LIST
54384: LIST
54385: LIST
54386: LIST
54387: LIST
54388: LIST
54389: PUSH
54390: EMPTY
54391: LIST
54392: PPUSH
54393: CALL_OW 447
54397: GO 54340
54399: POP
54400: POP
// end ;
54401: LD_VAR 0 5
54405: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
54406: LD_INT 0
54408: PPUSH
54409: PPUSH
54410: PPUSH
54411: PPUSH
54412: PPUSH
54413: PPUSH
54414: PPUSH
54415: PPUSH
54416: PPUSH
54417: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
54418: LD_VAR 0 1
54422: PPUSH
54423: CALL_OW 302
54427: NOT
54428: PUSH
54429: LD_VAR 0 2
54433: PPUSH
54434: LD_VAR 0 3
54438: PPUSH
54439: CALL_OW 488
54443: NOT
54444: OR
54445: PUSH
54446: LD_VAR 0 4
54450: NOT
54451: OR
54452: IFFALSE 54456
// exit ;
54454: GO 54969
// list := [ ] ;
54456: LD_ADDR_VAR 0 13
54460: PUSH
54461: EMPTY
54462: ST_TO_ADDR
// if x - r < 0 then
54463: LD_VAR 0 2
54467: PUSH
54468: LD_VAR 0 4
54472: MINUS
54473: PUSH
54474: LD_INT 0
54476: LESS
54477: IFFALSE 54489
// min_x := 0 else
54479: LD_ADDR_VAR 0 7
54483: PUSH
54484: LD_INT 0
54486: ST_TO_ADDR
54487: GO 54505
// min_x := x - r ;
54489: LD_ADDR_VAR 0 7
54493: PUSH
54494: LD_VAR 0 2
54498: PUSH
54499: LD_VAR 0 4
54503: MINUS
54504: ST_TO_ADDR
// if y - r < 0 then
54505: LD_VAR 0 3
54509: PUSH
54510: LD_VAR 0 4
54514: MINUS
54515: PUSH
54516: LD_INT 0
54518: LESS
54519: IFFALSE 54531
// min_y := 0 else
54521: LD_ADDR_VAR 0 8
54525: PUSH
54526: LD_INT 0
54528: ST_TO_ADDR
54529: GO 54547
// min_y := y - r ;
54531: LD_ADDR_VAR 0 8
54535: PUSH
54536: LD_VAR 0 3
54540: PUSH
54541: LD_VAR 0 4
54545: MINUS
54546: ST_TO_ADDR
// max_x := x + r ;
54547: LD_ADDR_VAR 0 9
54551: PUSH
54552: LD_VAR 0 2
54556: PUSH
54557: LD_VAR 0 4
54561: PLUS
54562: ST_TO_ADDR
// max_y := y + r ;
54563: LD_ADDR_VAR 0 10
54567: PUSH
54568: LD_VAR 0 3
54572: PUSH
54573: LD_VAR 0 4
54577: PLUS
54578: ST_TO_ADDR
// for _x = min_x to max_x do
54579: LD_ADDR_VAR 0 11
54583: PUSH
54584: DOUBLE
54585: LD_VAR 0 7
54589: DEC
54590: ST_TO_ADDR
54591: LD_VAR 0 9
54595: PUSH
54596: FOR_TO
54597: IFFALSE 54714
// for _y = min_y to max_y do
54599: LD_ADDR_VAR 0 12
54603: PUSH
54604: DOUBLE
54605: LD_VAR 0 8
54609: DEC
54610: ST_TO_ADDR
54611: LD_VAR 0 10
54615: PUSH
54616: FOR_TO
54617: IFFALSE 54710
// begin if not ValidHex ( _x , _y ) then
54619: LD_VAR 0 11
54623: PPUSH
54624: LD_VAR 0 12
54628: PPUSH
54629: CALL_OW 488
54633: NOT
54634: IFFALSE 54638
// continue ;
54636: GO 54616
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
54638: LD_VAR 0 11
54642: PPUSH
54643: LD_VAR 0 12
54647: PPUSH
54648: CALL_OW 351
54652: PUSH
54653: LD_VAR 0 11
54657: PPUSH
54658: LD_VAR 0 12
54662: PPUSH
54663: CALL_OW 554
54667: AND
54668: IFFALSE 54708
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
54670: LD_ADDR_VAR 0 13
54674: PUSH
54675: LD_VAR 0 13
54679: PPUSH
54680: LD_VAR 0 13
54684: PUSH
54685: LD_INT 1
54687: PLUS
54688: PPUSH
54689: LD_VAR 0 11
54693: PUSH
54694: LD_VAR 0 12
54698: PUSH
54699: EMPTY
54700: LIST
54701: LIST
54702: PPUSH
54703: CALL_OW 2
54707: ST_TO_ADDR
// end ;
54708: GO 54616
54710: POP
54711: POP
54712: GO 54596
54714: POP
54715: POP
// if not list then
54716: LD_VAR 0 13
54720: NOT
54721: IFFALSE 54725
// exit ;
54723: GO 54969
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
54725: LD_ADDR_VAR 0 13
54729: PUSH
54730: LD_VAR 0 1
54734: PPUSH
54735: LD_VAR 0 13
54739: PPUSH
54740: LD_INT 1
54742: PPUSH
54743: LD_INT 1
54745: PPUSH
54746: CALL 15333 0 4
54750: ST_TO_ADDR
// ComStop ( flame ) ;
54751: LD_VAR 0 1
54755: PPUSH
54756: CALL_OW 141
// for i in list do
54760: LD_ADDR_VAR 0 6
54764: PUSH
54765: LD_VAR 0 13
54769: PUSH
54770: FOR_IN
54771: IFFALSE 54802
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
54773: LD_VAR 0 1
54777: PPUSH
54778: LD_VAR 0 6
54782: PUSH
54783: LD_INT 1
54785: ARRAY
54786: PPUSH
54787: LD_VAR 0 6
54791: PUSH
54792: LD_INT 2
54794: ARRAY
54795: PPUSH
54796: CALL_OW 176
54800: GO 54770
54802: POP
54803: POP
// repeat wait ( 0 0$1 ) ;
54804: LD_INT 35
54806: PPUSH
54807: CALL_OW 67
// task := GetTaskList ( flame ) ;
54811: LD_ADDR_VAR 0 14
54815: PUSH
54816: LD_VAR 0 1
54820: PPUSH
54821: CALL_OW 437
54825: ST_TO_ADDR
// if not task then
54826: LD_VAR 0 14
54830: NOT
54831: IFFALSE 54835
// exit ;
54833: GO 54969
// if task [ 1 ] [ 1 ] <> | then
54835: LD_VAR 0 14
54839: PUSH
54840: LD_INT 1
54842: ARRAY
54843: PUSH
54844: LD_INT 1
54846: ARRAY
54847: PUSH
54848: LD_STRING |
54850: NONEQUAL
54851: IFFALSE 54855
// exit ;
54853: GO 54969
// _x := task [ 1 ] [ 2 ] ;
54855: LD_ADDR_VAR 0 11
54859: PUSH
54860: LD_VAR 0 14
54864: PUSH
54865: LD_INT 1
54867: ARRAY
54868: PUSH
54869: LD_INT 2
54871: ARRAY
54872: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
54873: LD_ADDR_VAR 0 12
54877: PUSH
54878: LD_VAR 0 14
54882: PUSH
54883: LD_INT 1
54885: ARRAY
54886: PUSH
54887: LD_INT 3
54889: ARRAY
54890: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
54891: LD_VAR 0 11
54895: PPUSH
54896: LD_VAR 0 12
54900: PPUSH
54901: CALL_OW 351
54905: NOT
54906: PUSH
54907: LD_VAR 0 11
54911: PPUSH
54912: LD_VAR 0 12
54916: PPUSH
54917: CALL_OW 554
54921: NOT
54922: OR
54923: IFFALSE 54957
// begin task := Delete ( task , 1 ) ;
54925: LD_ADDR_VAR 0 14
54929: PUSH
54930: LD_VAR 0 14
54934: PPUSH
54935: LD_INT 1
54937: PPUSH
54938: CALL_OW 3
54942: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
54943: LD_VAR 0 1
54947: PPUSH
54948: LD_VAR 0 14
54952: PPUSH
54953: CALL_OW 446
// end ; until not HasTask ( flame ) ;
54957: LD_VAR 0 1
54961: PPUSH
54962: CALL_OW 314
54966: NOT
54967: IFFALSE 54804
// end ;
54969: LD_VAR 0 5
54973: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
54974: LD_EXP 48
54978: NOT
54979: IFFALSE 55029
54981: GO 54983
54983: DISABLE
// begin initHack := true ;
54984: LD_ADDR_EXP 48
54988: PUSH
54989: LD_INT 1
54991: ST_TO_ADDR
// hackTanks := [ ] ;
54992: LD_ADDR_EXP 49
54996: PUSH
54997: EMPTY
54998: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
54999: LD_ADDR_EXP 50
55003: PUSH
55004: EMPTY
55005: ST_TO_ADDR
// hackLimit := 3 ;
55006: LD_ADDR_EXP 51
55010: PUSH
55011: LD_INT 3
55013: ST_TO_ADDR
// hackDist := 12 ;
55014: LD_ADDR_EXP 52
55018: PUSH
55019: LD_INT 12
55021: ST_TO_ADDR
// hackCounter := [ ] ;
55022: LD_ADDR_EXP 53
55026: PUSH
55027: EMPTY
55028: ST_TO_ADDR
// end ;
55029: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
55030: LD_EXP 48
55034: PUSH
55035: LD_INT 34
55037: PUSH
55038: LD_INT 99
55040: PUSH
55041: EMPTY
55042: LIST
55043: LIST
55044: PPUSH
55045: CALL_OW 69
55049: AND
55050: IFFALSE 55303
55052: GO 55054
55054: DISABLE
55055: LD_INT 0
55057: PPUSH
55058: PPUSH
// begin enable ;
55059: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
55060: LD_ADDR_VAR 0 1
55064: PUSH
55065: LD_INT 34
55067: PUSH
55068: LD_INT 99
55070: PUSH
55071: EMPTY
55072: LIST
55073: LIST
55074: PPUSH
55075: CALL_OW 69
55079: PUSH
55080: FOR_IN
55081: IFFALSE 55301
// begin if not i in hackTanks then
55083: LD_VAR 0 1
55087: PUSH
55088: LD_EXP 49
55092: IN
55093: NOT
55094: IFFALSE 55177
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
55096: LD_ADDR_EXP 49
55100: PUSH
55101: LD_EXP 49
55105: PPUSH
55106: LD_EXP 49
55110: PUSH
55111: LD_INT 1
55113: PLUS
55114: PPUSH
55115: LD_VAR 0 1
55119: PPUSH
55120: CALL_OW 1
55124: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
55125: LD_ADDR_EXP 50
55129: PUSH
55130: LD_EXP 50
55134: PPUSH
55135: LD_EXP 50
55139: PUSH
55140: LD_INT 1
55142: PLUS
55143: PPUSH
55144: EMPTY
55145: PPUSH
55146: CALL_OW 1
55150: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
55151: LD_ADDR_EXP 53
55155: PUSH
55156: LD_EXP 53
55160: PPUSH
55161: LD_EXP 53
55165: PUSH
55166: LD_INT 1
55168: PLUS
55169: PPUSH
55170: EMPTY
55171: PPUSH
55172: CALL_OW 1
55176: ST_TO_ADDR
// end ; if not IsOk ( i ) then
55177: LD_VAR 0 1
55181: PPUSH
55182: CALL_OW 302
55186: NOT
55187: IFFALSE 55200
// begin HackUnlinkAll ( i ) ;
55189: LD_VAR 0 1
55193: PPUSH
55194: CALL 55306 0 1
// continue ;
55198: GO 55080
// end ; HackCheckCapturedStatus ( i ) ;
55200: LD_VAR 0 1
55204: PPUSH
55205: CALL 55749 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
55209: LD_ADDR_VAR 0 2
55213: PUSH
55214: LD_INT 81
55216: PUSH
55217: LD_VAR 0 1
55221: PPUSH
55222: CALL_OW 255
55226: PUSH
55227: EMPTY
55228: LIST
55229: LIST
55230: PUSH
55231: LD_INT 33
55233: PUSH
55234: LD_INT 3
55236: PUSH
55237: EMPTY
55238: LIST
55239: LIST
55240: PUSH
55241: LD_INT 91
55243: PUSH
55244: LD_VAR 0 1
55248: PUSH
55249: LD_EXP 52
55253: PUSH
55254: EMPTY
55255: LIST
55256: LIST
55257: LIST
55258: PUSH
55259: LD_INT 50
55261: PUSH
55262: EMPTY
55263: LIST
55264: PUSH
55265: EMPTY
55266: LIST
55267: LIST
55268: LIST
55269: LIST
55270: PPUSH
55271: CALL_OW 69
55275: ST_TO_ADDR
// if not tmp then
55276: LD_VAR 0 2
55280: NOT
55281: IFFALSE 55285
// continue ;
55283: GO 55080
// HackLink ( i , tmp ) ;
55285: LD_VAR 0 1
55289: PPUSH
55290: LD_VAR 0 2
55294: PPUSH
55295: CALL 55442 0 2
// end ;
55299: GO 55080
55301: POP
55302: POP
// end ;
55303: PPOPN 2
55305: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
55306: LD_INT 0
55308: PPUSH
55309: PPUSH
55310: PPUSH
// if not hack in hackTanks then
55311: LD_VAR 0 1
55315: PUSH
55316: LD_EXP 49
55320: IN
55321: NOT
55322: IFFALSE 55326
// exit ;
55324: GO 55437
// index := GetElementIndex ( hackTanks , hack ) ;
55326: LD_ADDR_VAR 0 4
55330: PUSH
55331: LD_EXP 49
55335: PPUSH
55336: LD_VAR 0 1
55340: PPUSH
55341: CALL 14630 0 2
55345: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
55346: LD_EXP 50
55350: PUSH
55351: LD_VAR 0 4
55355: ARRAY
55356: IFFALSE 55437
// begin for i in hackTanksCaptured [ index ] do
55358: LD_ADDR_VAR 0 3
55362: PUSH
55363: LD_EXP 50
55367: PUSH
55368: LD_VAR 0 4
55372: ARRAY
55373: PUSH
55374: FOR_IN
55375: IFFALSE 55401
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
55377: LD_VAR 0 3
55381: PUSH
55382: LD_INT 1
55384: ARRAY
55385: PPUSH
55386: LD_VAR 0 3
55390: PUSH
55391: LD_INT 2
55393: ARRAY
55394: PPUSH
55395: CALL_OW 235
55399: GO 55374
55401: POP
55402: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
55403: LD_ADDR_EXP 50
55407: PUSH
55408: LD_EXP 50
55412: PPUSH
55413: LD_VAR 0 4
55417: PPUSH
55418: EMPTY
55419: PPUSH
55420: CALL_OW 1
55424: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
55425: LD_VAR 0 1
55429: PPUSH
55430: LD_INT 0
55432: PPUSH
55433: CALL_OW 505
// end ; end ;
55437: LD_VAR 0 2
55441: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
55442: LD_INT 0
55444: PPUSH
55445: PPUSH
55446: PPUSH
// if not hack in hackTanks or not vehicles then
55447: LD_VAR 0 1
55451: PUSH
55452: LD_EXP 49
55456: IN
55457: NOT
55458: PUSH
55459: LD_VAR 0 2
55463: NOT
55464: OR
55465: IFFALSE 55469
// exit ;
55467: GO 55744
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
55469: LD_ADDR_VAR 0 2
55473: PUSH
55474: LD_VAR 0 1
55478: PPUSH
55479: LD_VAR 0 2
55483: PPUSH
55484: LD_INT 1
55486: PPUSH
55487: LD_INT 1
55489: PPUSH
55490: CALL 15280 0 4
55494: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
55495: LD_ADDR_VAR 0 5
55499: PUSH
55500: LD_EXP 49
55504: PPUSH
55505: LD_VAR 0 1
55509: PPUSH
55510: CALL 14630 0 2
55514: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
55515: LD_EXP 50
55519: PUSH
55520: LD_VAR 0 5
55524: ARRAY
55525: PUSH
55526: LD_EXP 51
55530: LESS
55531: IFFALSE 55720
// begin for i := 1 to vehicles do
55533: LD_ADDR_VAR 0 4
55537: PUSH
55538: DOUBLE
55539: LD_INT 1
55541: DEC
55542: ST_TO_ADDR
55543: LD_VAR 0 2
55547: PUSH
55548: FOR_TO
55549: IFFALSE 55718
// begin if hackTanksCaptured [ index ] = hackLimit then
55551: LD_EXP 50
55555: PUSH
55556: LD_VAR 0 5
55560: ARRAY
55561: PUSH
55562: LD_EXP 51
55566: EQUAL
55567: IFFALSE 55571
// break ;
55569: GO 55718
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
55571: LD_ADDR_EXP 53
55575: PUSH
55576: LD_EXP 53
55580: PPUSH
55581: LD_VAR 0 5
55585: PPUSH
55586: LD_EXP 53
55590: PUSH
55591: LD_VAR 0 5
55595: ARRAY
55596: PUSH
55597: LD_INT 1
55599: PLUS
55600: PPUSH
55601: CALL_OW 1
55605: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
55606: LD_ADDR_EXP 50
55610: PUSH
55611: LD_EXP 50
55615: PPUSH
55616: LD_VAR 0 5
55620: PUSH
55621: LD_EXP 50
55625: PUSH
55626: LD_VAR 0 5
55630: ARRAY
55631: PUSH
55632: LD_INT 1
55634: PLUS
55635: PUSH
55636: EMPTY
55637: LIST
55638: LIST
55639: PPUSH
55640: LD_VAR 0 2
55644: PUSH
55645: LD_VAR 0 4
55649: ARRAY
55650: PUSH
55651: LD_VAR 0 2
55655: PUSH
55656: LD_VAR 0 4
55660: ARRAY
55661: PPUSH
55662: CALL_OW 255
55666: PUSH
55667: EMPTY
55668: LIST
55669: LIST
55670: PPUSH
55671: CALL 14845 0 3
55675: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
55676: LD_VAR 0 2
55680: PUSH
55681: LD_VAR 0 4
55685: ARRAY
55686: PPUSH
55687: LD_VAR 0 1
55691: PPUSH
55692: CALL_OW 255
55696: PPUSH
55697: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
55701: LD_VAR 0 2
55705: PUSH
55706: LD_VAR 0 4
55710: ARRAY
55711: PPUSH
55712: CALL_OW 141
// end ;
55716: GO 55548
55718: POP
55719: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
55720: LD_VAR 0 1
55724: PPUSH
55725: LD_EXP 50
55729: PUSH
55730: LD_VAR 0 5
55734: ARRAY
55735: PUSH
55736: LD_INT 0
55738: PLUS
55739: PPUSH
55740: CALL_OW 505
// end ;
55744: LD_VAR 0 3
55748: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
55749: LD_INT 0
55751: PPUSH
55752: PPUSH
55753: PPUSH
55754: PPUSH
// if not hack in hackTanks then
55755: LD_VAR 0 1
55759: PUSH
55760: LD_EXP 49
55764: IN
55765: NOT
55766: IFFALSE 55770
// exit ;
55768: GO 56010
// index := GetElementIndex ( hackTanks , hack ) ;
55770: LD_ADDR_VAR 0 4
55774: PUSH
55775: LD_EXP 49
55779: PPUSH
55780: LD_VAR 0 1
55784: PPUSH
55785: CALL 14630 0 2
55789: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
55790: LD_ADDR_VAR 0 3
55794: PUSH
55795: DOUBLE
55796: LD_EXP 50
55800: PUSH
55801: LD_VAR 0 4
55805: ARRAY
55806: INC
55807: ST_TO_ADDR
55808: LD_INT 1
55810: PUSH
55811: FOR_DOWNTO
55812: IFFALSE 55984
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
55814: LD_ADDR_VAR 0 5
55818: PUSH
55819: LD_EXP 50
55823: PUSH
55824: LD_VAR 0 4
55828: ARRAY
55829: PUSH
55830: LD_VAR 0 3
55834: ARRAY
55835: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
55836: LD_VAR 0 5
55840: PUSH
55841: LD_INT 1
55843: ARRAY
55844: PPUSH
55845: CALL_OW 302
55849: NOT
55850: PUSH
55851: LD_VAR 0 5
55855: PUSH
55856: LD_INT 1
55858: ARRAY
55859: PPUSH
55860: CALL_OW 255
55864: PUSH
55865: LD_VAR 0 1
55869: PPUSH
55870: CALL_OW 255
55874: NONEQUAL
55875: OR
55876: IFFALSE 55982
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
55878: LD_VAR 0 5
55882: PUSH
55883: LD_INT 1
55885: ARRAY
55886: PPUSH
55887: CALL_OW 305
55891: PUSH
55892: LD_VAR 0 5
55896: PUSH
55897: LD_INT 1
55899: ARRAY
55900: PPUSH
55901: CALL_OW 255
55905: PUSH
55906: LD_VAR 0 1
55910: PPUSH
55911: CALL_OW 255
55915: EQUAL
55916: AND
55917: IFFALSE 55941
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
55919: LD_VAR 0 5
55923: PUSH
55924: LD_INT 1
55926: ARRAY
55927: PPUSH
55928: LD_VAR 0 5
55932: PUSH
55933: LD_INT 2
55935: ARRAY
55936: PPUSH
55937: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
55941: LD_ADDR_EXP 50
55945: PUSH
55946: LD_EXP 50
55950: PPUSH
55951: LD_VAR 0 4
55955: PPUSH
55956: LD_EXP 50
55960: PUSH
55961: LD_VAR 0 4
55965: ARRAY
55966: PPUSH
55967: LD_VAR 0 3
55971: PPUSH
55972: CALL_OW 3
55976: PPUSH
55977: CALL_OW 1
55981: ST_TO_ADDR
// end ; end ;
55982: GO 55811
55984: POP
55985: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
55986: LD_VAR 0 1
55990: PPUSH
55991: LD_EXP 50
55995: PUSH
55996: LD_VAR 0 4
56000: ARRAY
56001: PUSH
56002: LD_INT 0
56004: PLUS
56005: PPUSH
56006: CALL_OW 505
// end ;
56010: LD_VAR 0 2
56014: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
56015: LD_INT 0
56017: PPUSH
56018: PPUSH
56019: PPUSH
56020: PPUSH
// if not hack in hackTanks then
56021: LD_VAR 0 1
56025: PUSH
56026: LD_EXP 49
56030: IN
56031: NOT
56032: IFFALSE 56036
// exit ;
56034: GO 56121
// index := GetElementIndex ( hackTanks , hack ) ;
56036: LD_ADDR_VAR 0 5
56040: PUSH
56041: LD_EXP 49
56045: PPUSH
56046: LD_VAR 0 1
56050: PPUSH
56051: CALL 14630 0 2
56055: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
56056: LD_ADDR_VAR 0 4
56060: PUSH
56061: DOUBLE
56062: LD_INT 1
56064: DEC
56065: ST_TO_ADDR
56066: LD_EXP 50
56070: PUSH
56071: LD_VAR 0 5
56075: ARRAY
56076: PUSH
56077: FOR_TO
56078: IFFALSE 56119
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
56080: LD_EXP 50
56084: PUSH
56085: LD_VAR 0 5
56089: ARRAY
56090: PUSH
56091: LD_VAR 0 4
56095: ARRAY
56096: PUSH
56097: LD_INT 1
56099: ARRAY
56100: PUSH
56101: LD_VAR 0 2
56105: EQUAL
56106: IFFALSE 56117
// KillUnit ( vehicle ) ;
56108: LD_VAR 0 2
56112: PPUSH
56113: CALL_OW 66
56117: GO 56077
56119: POP
56120: POP
// end ;
56121: LD_VAR 0 3
56125: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
56126: LD_EXP 54
56130: NOT
56131: IFFALSE 56166
56133: GO 56135
56135: DISABLE
// begin initMiner := true ;
56136: LD_ADDR_EXP 54
56140: PUSH
56141: LD_INT 1
56143: ST_TO_ADDR
// minersList := [ ] ;
56144: LD_ADDR_EXP 55
56148: PUSH
56149: EMPTY
56150: ST_TO_ADDR
// minerMinesList := [ ] ;
56151: LD_ADDR_EXP 56
56155: PUSH
56156: EMPTY
56157: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
56158: LD_ADDR_EXP 57
56162: PUSH
56163: LD_INT 5
56165: ST_TO_ADDR
// end ;
56166: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
56167: LD_EXP 54
56171: PUSH
56172: LD_INT 34
56174: PUSH
56175: LD_INT 81
56177: PUSH
56178: EMPTY
56179: LIST
56180: LIST
56181: PPUSH
56182: CALL_OW 69
56186: AND
56187: IFFALSE 56648
56189: GO 56191
56191: DISABLE
56192: LD_INT 0
56194: PPUSH
56195: PPUSH
56196: PPUSH
56197: PPUSH
// begin enable ;
56198: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
56199: LD_ADDR_VAR 0 1
56203: PUSH
56204: LD_INT 34
56206: PUSH
56207: LD_INT 81
56209: PUSH
56210: EMPTY
56211: LIST
56212: LIST
56213: PPUSH
56214: CALL_OW 69
56218: PUSH
56219: FOR_IN
56220: IFFALSE 56292
// begin if not i in minersList then
56222: LD_VAR 0 1
56226: PUSH
56227: LD_EXP 55
56231: IN
56232: NOT
56233: IFFALSE 56290
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
56235: LD_ADDR_EXP 55
56239: PUSH
56240: LD_EXP 55
56244: PPUSH
56245: LD_EXP 55
56249: PUSH
56250: LD_INT 1
56252: PLUS
56253: PPUSH
56254: LD_VAR 0 1
56258: PPUSH
56259: CALL_OW 1
56263: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
56264: LD_ADDR_EXP 56
56268: PUSH
56269: LD_EXP 56
56273: PPUSH
56274: LD_EXP 56
56278: PUSH
56279: LD_INT 1
56281: PLUS
56282: PPUSH
56283: EMPTY
56284: PPUSH
56285: CALL_OW 1
56289: ST_TO_ADDR
// end end ;
56290: GO 56219
56292: POP
56293: POP
// for i := minerMinesList downto 1 do
56294: LD_ADDR_VAR 0 1
56298: PUSH
56299: DOUBLE
56300: LD_EXP 56
56304: INC
56305: ST_TO_ADDR
56306: LD_INT 1
56308: PUSH
56309: FOR_DOWNTO
56310: IFFALSE 56646
// begin if IsLive ( minersList [ i ] ) then
56312: LD_EXP 55
56316: PUSH
56317: LD_VAR 0 1
56321: ARRAY
56322: PPUSH
56323: CALL_OW 300
56327: IFFALSE 56355
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
56329: LD_EXP 55
56333: PUSH
56334: LD_VAR 0 1
56338: ARRAY
56339: PPUSH
56340: LD_EXP 56
56344: PUSH
56345: LD_VAR 0 1
56349: ARRAY
56350: PPUSH
56351: CALL_OW 505
// if not minerMinesList [ i ] then
56355: LD_EXP 56
56359: PUSH
56360: LD_VAR 0 1
56364: ARRAY
56365: NOT
56366: IFFALSE 56370
// continue ;
56368: GO 56309
// for j := minerMinesList [ i ] downto 1 do
56370: LD_ADDR_VAR 0 2
56374: PUSH
56375: DOUBLE
56376: LD_EXP 56
56380: PUSH
56381: LD_VAR 0 1
56385: ARRAY
56386: INC
56387: ST_TO_ADDR
56388: LD_INT 1
56390: PUSH
56391: FOR_DOWNTO
56392: IFFALSE 56642
// begin side := GetSide ( minersList [ i ] ) ;
56394: LD_ADDR_VAR 0 3
56398: PUSH
56399: LD_EXP 55
56403: PUSH
56404: LD_VAR 0 1
56408: ARRAY
56409: PPUSH
56410: CALL_OW 255
56414: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
56415: LD_ADDR_VAR 0 4
56419: PUSH
56420: LD_EXP 56
56424: PUSH
56425: LD_VAR 0 1
56429: ARRAY
56430: PUSH
56431: LD_VAR 0 2
56435: ARRAY
56436: PUSH
56437: LD_INT 1
56439: ARRAY
56440: PPUSH
56441: LD_EXP 56
56445: PUSH
56446: LD_VAR 0 1
56450: ARRAY
56451: PUSH
56452: LD_VAR 0 2
56456: ARRAY
56457: PUSH
56458: LD_INT 2
56460: ARRAY
56461: PPUSH
56462: CALL_OW 428
56466: ST_TO_ADDR
// if not tmp then
56467: LD_VAR 0 4
56471: NOT
56472: IFFALSE 56476
// continue ;
56474: GO 56391
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
56476: LD_VAR 0 4
56480: PUSH
56481: LD_INT 81
56483: PUSH
56484: LD_VAR 0 3
56488: PUSH
56489: EMPTY
56490: LIST
56491: LIST
56492: PPUSH
56493: CALL_OW 69
56497: IN
56498: PUSH
56499: LD_EXP 56
56503: PUSH
56504: LD_VAR 0 1
56508: ARRAY
56509: PUSH
56510: LD_VAR 0 2
56514: ARRAY
56515: PUSH
56516: LD_INT 1
56518: ARRAY
56519: PPUSH
56520: LD_EXP 56
56524: PUSH
56525: LD_VAR 0 1
56529: ARRAY
56530: PUSH
56531: LD_VAR 0 2
56535: ARRAY
56536: PUSH
56537: LD_INT 2
56539: ARRAY
56540: PPUSH
56541: CALL_OW 458
56545: AND
56546: IFFALSE 56640
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
56548: LD_EXP 56
56552: PUSH
56553: LD_VAR 0 1
56557: ARRAY
56558: PUSH
56559: LD_VAR 0 2
56563: ARRAY
56564: PUSH
56565: LD_INT 1
56567: ARRAY
56568: PPUSH
56569: LD_EXP 56
56573: PUSH
56574: LD_VAR 0 1
56578: ARRAY
56579: PUSH
56580: LD_VAR 0 2
56584: ARRAY
56585: PUSH
56586: LD_INT 2
56588: ARRAY
56589: PPUSH
56590: LD_VAR 0 3
56594: PPUSH
56595: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
56599: LD_ADDR_EXP 56
56603: PUSH
56604: LD_EXP 56
56608: PPUSH
56609: LD_VAR 0 1
56613: PPUSH
56614: LD_EXP 56
56618: PUSH
56619: LD_VAR 0 1
56623: ARRAY
56624: PPUSH
56625: LD_VAR 0 2
56629: PPUSH
56630: CALL_OW 3
56634: PPUSH
56635: CALL_OW 1
56639: ST_TO_ADDR
// end ; end ;
56640: GO 56391
56642: POP
56643: POP
// end ;
56644: GO 56309
56646: POP
56647: POP
// end ;
56648: PPOPN 4
56650: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
56651: LD_INT 0
56653: PPUSH
56654: PPUSH
// result := false ;
56655: LD_ADDR_VAR 0 4
56659: PUSH
56660: LD_INT 0
56662: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
56663: LD_VAR 0 1
56667: PPUSH
56668: CALL_OW 264
56672: PUSH
56673: LD_INT 81
56675: EQUAL
56676: NOT
56677: IFFALSE 56681
// exit ;
56679: GO 56921
// index := GetElementIndex ( minersList , unit ) ;
56681: LD_ADDR_VAR 0 5
56685: PUSH
56686: LD_EXP 55
56690: PPUSH
56691: LD_VAR 0 1
56695: PPUSH
56696: CALL 14630 0 2
56700: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
56701: LD_EXP 56
56705: PUSH
56706: LD_VAR 0 5
56710: ARRAY
56711: PUSH
56712: LD_EXP 57
56716: GREATEREQUAL
56717: IFFALSE 56721
// exit ;
56719: GO 56921
// ComMoveXY ( unit , x , y ) ;
56721: LD_VAR 0 1
56725: PPUSH
56726: LD_VAR 0 2
56730: PPUSH
56731: LD_VAR 0 3
56735: PPUSH
56736: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
56740: LD_INT 35
56742: PPUSH
56743: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
56747: LD_VAR 0 1
56751: PPUSH
56752: LD_VAR 0 2
56756: PPUSH
56757: LD_VAR 0 3
56761: PPUSH
56762: CALL 46391 0 3
56766: NOT
56767: PUSH
56768: LD_VAR 0 1
56772: PPUSH
56773: CALL_OW 314
56777: AND
56778: IFFALSE 56782
// exit ;
56780: GO 56921
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
56782: LD_VAR 0 2
56786: PPUSH
56787: LD_VAR 0 3
56791: PPUSH
56792: CALL_OW 428
56796: PUSH
56797: LD_VAR 0 1
56801: EQUAL
56802: PUSH
56803: LD_VAR 0 1
56807: PPUSH
56808: CALL_OW 314
56812: NOT
56813: AND
56814: IFFALSE 56740
// PlaySoundXY ( x , y , PlantMine ) ;
56816: LD_VAR 0 2
56820: PPUSH
56821: LD_VAR 0 3
56825: PPUSH
56826: LD_STRING PlantMine
56828: PPUSH
56829: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
56833: LD_VAR 0 2
56837: PPUSH
56838: LD_VAR 0 3
56842: PPUSH
56843: LD_VAR 0 1
56847: PPUSH
56848: CALL_OW 255
56852: PPUSH
56853: LD_INT 0
56855: PPUSH
56856: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
56860: LD_ADDR_EXP 56
56864: PUSH
56865: LD_EXP 56
56869: PPUSH
56870: LD_VAR 0 5
56874: PUSH
56875: LD_EXP 56
56879: PUSH
56880: LD_VAR 0 5
56884: ARRAY
56885: PUSH
56886: LD_INT 1
56888: PLUS
56889: PUSH
56890: EMPTY
56891: LIST
56892: LIST
56893: PPUSH
56894: LD_VAR 0 2
56898: PUSH
56899: LD_VAR 0 3
56903: PUSH
56904: EMPTY
56905: LIST
56906: LIST
56907: PPUSH
56908: CALL 14845 0 3
56912: ST_TO_ADDR
// result := true ;
56913: LD_ADDR_VAR 0 4
56917: PUSH
56918: LD_INT 1
56920: ST_TO_ADDR
// end ;
56921: LD_VAR 0 4
56925: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
56926: LD_INT 0
56928: PPUSH
56929: PPUSH
56930: PPUSH
// if not unit in minersList then
56931: LD_VAR 0 1
56935: PUSH
56936: LD_EXP 55
56940: IN
56941: NOT
56942: IFFALSE 56946
// exit ;
56944: GO 57338
// index := GetElementIndex ( minersList , unit ) ;
56946: LD_ADDR_VAR 0 6
56950: PUSH
56951: LD_EXP 55
56955: PPUSH
56956: LD_VAR 0 1
56960: PPUSH
56961: CALL 14630 0 2
56965: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
56966: LD_ADDR_VAR 0 5
56970: PUSH
56971: DOUBLE
56972: LD_EXP 56
56976: PUSH
56977: LD_VAR 0 6
56981: ARRAY
56982: INC
56983: ST_TO_ADDR
56984: LD_INT 1
56986: PUSH
56987: FOR_DOWNTO
56988: IFFALSE 57149
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
56990: LD_EXP 56
56994: PUSH
56995: LD_VAR 0 6
56999: ARRAY
57000: PUSH
57001: LD_VAR 0 5
57005: ARRAY
57006: PUSH
57007: LD_INT 1
57009: ARRAY
57010: PUSH
57011: LD_VAR 0 2
57015: EQUAL
57016: PUSH
57017: LD_EXP 56
57021: PUSH
57022: LD_VAR 0 6
57026: ARRAY
57027: PUSH
57028: LD_VAR 0 5
57032: ARRAY
57033: PUSH
57034: LD_INT 2
57036: ARRAY
57037: PUSH
57038: LD_VAR 0 3
57042: EQUAL
57043: AND
57044: IFFALSE 57147
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
57046: LD_EXP 56
57050: PUSH
57051: LD_VAR 0 6
57055: ARRAY
57056: PUSH
57057: LD_VAR 0 5
57061: ARRAY
57062: PUSH
57063: LD_INT 1
57065: ARRAY
57066: PPUSH
57067: LD_EXP 56
57071: PUSH
57072: LD_VAR 0 6
57076: ARRAY
57077: PUSH
57078: LD_VAR 0 5
57082: ARRAY
57083: PUSH
57084: LD_INT 2
57086: ARRAY
57087: PPUSH
57088: LD_VAR 0 1
57092: PPUSH
57093: CALL_OW 255
57097: PPUSH
57098: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
57102: LD_ADDR_EXP 56
57106: PUSH
57107: LD_EXP 56
57111: PPUSH
57112: LD_VAR 0 6
57116: PPUSH
57117: LD_EXP 56
57121: PUSH
57122: LD_VAR 0 6
57126: ARRAY
57127: PPUSH
57128: LD_VAR 0 5
57132: PPUSH
57133: CALL_OW 3
57137: PPUSH
57138: CALL_OW 1
57142: ST_TO_ADDR
// exit ;
57143: POP
57144: POP
57145: GO 57338
// end ; end ;
57147: GO 56987
57149: POP
57150: POP
// for i := minerMinesList [ index ] downto 1 do
57151: LD_ADDR_VAR 0 5
57155: PUSH
57156: DOUBLE
57157: LD_EXP 56
57161: PUSH
57162: LD_VAR 0 6
57166: ARRAY
57167: INC
57168: ST_TO_ADDR
57169: LD_INT 1
57171: PUSH
57172: FOR_DOWNTO
57173: IFFALSE 57336
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
57175: LD_EXP 56
57179: PUSH
57180: LD_VAR 0 6
57184: ARRAY
57185: PUSH
57186: LD_VAR 0 5
57190: ARRAY
57191: PUSH
57192: LD_INT 1
57194: ARRAY
57195: PPUSH
57196: LD_EXP 56
57200: PUSH
57201: LD_VAR 0 6
57205: ARRAY
57206: PUSH
57207: LD_VAR 0 5
57211: ARRAY
57212: PUSH
57213: LD_INT 2
57215: ARRAY
57216: PPUSH
57217: LD_VAR 0 2
57221: PPUSH
57222: LD_VAR 0 3
57226: PPUSH
57227: CALL_OW 298
57231: PUSH
57232: LD_INT 6
57234: LESS
57235: IFFALSE 57334
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
57237: LD_EXP 56
57241: PUSH
57242: LD_VAR 0 6
57246: ARRAY
57247: PUSH
57248: LD_VAR 0 5
57252: ARRAY
57253: PUSH
57254: LD_INT 1
57256: ARRAY
57257: PPUSH
57258: LD_EXP 56
57262: PUSH
57263: LD_VAR 0 6
57267: ARRAY
57268: PUSH
57269: LD_VAR 0 5
57273: ARRAY
57274: PUSH
57275: LD_INT 2
57277: ARRAY
57278: PPUSH
57279: LD_VAR 0 1
57283: PPUSH
57284: CALL_OW 255
57288: PPUSH
57289: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
57293: LD_ADDR_EXP 56
57297: PUSH
57298: LD_EXP 56
57302: PPUSH
57303: LD_VAR 0 6
57307: PPUSH
57308: LD_EXP 56
57312: PUSH
57313: LD_VAR 0 6
57317: ARRAY
57318: PPUSH
57319: LD_VAR 0 5
57323: PPUSH
57324: CALL_OW 3
57328: PPUSH
57329: CALL_OW 1
57333: ST_TO_ADDR
// end ; end ;
57334: GO 57172
57336: POP
57337: POP
// end ;
57338: LD_VAR 0 4
57342: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
57343: LD_INT 0
57345: PPUSH
57346: PPUSH
57347: PPUSH
57348: PPUSH
57349: PPUSH
57350: PPUSH
57351: PPUSH
57352: PPUSH
57353: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
57354: LD_VAR 0 1
57358: PPUSH
57359: CALL_OW 264
57363: PUSH
57364: LD_INT 81
57366: EQUAL
57367: NOT
57368: PUSH
57369: LD_VAR 0 1
57373: PUSH
57374: LD_EXP 55
57378: IN
57379: NOT
57380: OR
57381: IFFALSE 57385
// exit ;
57383: GO 57707
// index := GetElementIndex ( minersList , unit ) ;
57385: LD_ADDR_VAR 0 6
57389: PUSH
57390: LD_EXP 55
57394: PPUSH
57395: LD_VAR 0 1
57399: PPUSH
57400: CALL 14630 0 2
57404: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
57405: LD_ADDR_VAR 0 8
57409: PUSH
57410: LD_EXP 57
57414: PUSH
57415: LD_EXP 56
57419: PUSH
57420: LD_VAR 0 6
57424: ARRAY
57425: MINUS
57426: ST_TO_ADDR
// if not minesFreeAmount then
57427: LD_VAR 0 8
57431: NOT
57432: IFFALSE 57436
// exit ;
57434: GO 57707
// tmp := [ ] ;
57436: LD_ADDR_VAR 0 7
57440: PUSH
57441: EMPTY
57442: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
57443: LD_ADDR_VAR 0 5
57447: PUSH
57448: DOUBLE
57449: LD_INT 1
57451: DEC
57452: ST_TO_ADDR
57453: LD_VAR 0 8
57457: PUSH
57458: FOR_TO
57459: IFFALSE 57654
// begin _d := rand ( 0 , 5 ) ;
57461: LD_ADDR_VAR 0 11
57465: PUSH
57466: LD_INT 0
57468: PPUSH
57469: LD_INT 5
57471: PPUSH
57472: CALL_OW 12
57476: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
57477: LD_ADDR_VAR 0 12
57481: PUSH
57482: LD_INT 2
57484: PPUSH
57485: LD_INT 6
57487: PPUSH
57488: CALL_OW 12
57492: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
57493: LD_ADDR_VAR 0 9
57497: PUSH
57498: LD_VAR 0 2
57502: PPUSH
57503: LD_VAR 0 11
57507: PPUSH
57508: LD_VAR 0 12
57512: PPUSH
57513: CALL_OW 272
57517: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
57518: LD_ADDR_VAR 0 10
57522: PUSH
57523: LD_VAR 0 3
57527: PPUSH
57528: LD_VAR 0 11
57532: PPUSH
57533: LD_VAR 0 12
57537: PPUSH
57538: CALL_OW 273
57542: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
57543: LD_VAR 0 9
57547: PPUSH
57548: LD_VAR 0 10
57552: PPUSH
57553: CALL_OW 488
57557: PUSH
57558: LD_VAR 0 9
57562: PUSH
57563: LD_VAR 0 10
57567: PUSH
57568: EMPTY
57569: LIST
57570: LIST
57571: PUSH
57572: LD_VAR 0 7
57576: IN
57577: NOT
57578: AND
57579: PUSH
57580: LD_VAR 0 9
57584: PPUSH
57585: LD_VAR 0 10
57589: PPUSH
57590: CALL_OW 458
57594: NOT
57595: AND
57596: IFFALSE 57638
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
57598: LD_ADDR_VAR 0 7
57602: PUSH
57603: LD_VAR 0 7
57607: PPUSH
57608: LD_VAR 0 7
57612: PUSH
57613: LD_INT 1
57615: PLUS
57616: PPUSH
57617: LD_VAR 0 9
57621: PUSH
57622: LD_VAR 0 10
57626: PUSH
57627: EMPTY
57628: LIST
57629: LIST
57630: PPUSH
57631: CALL_OW 1
57635: ST_TO_ADDR
57636: GO 57652
// i := i - 1 ;
57638: LD_ADDR_VAR 0 5
57642: PUSH
57643: LD_VAR 0 5
57647: PUSH
57648: LD_INT 1
57650: MINUS
57651: ST_TO_ADDR
// end ;
57652: GO 57458
57654: POP
57655: POP
// for i in tmp do
57656: LD_ADDR_VAR 0 5
57660: PUSH
57661: LD_VAR 0 7
57665: PUSH
57666: FOR_IN
57667: IFFALSE 57705
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
57669: LD_VAR 0 1
57673: PPUSH
57674: LD_VAR 0 5
57678: PUSH
57679: LD_INT 1
57681: ARRAY
57682: PPUSH
57683: LD_VAR 0 5
57687: PUSH
57688: LD_INT 2
57690: ARRAY
57691: PPUSH
57692: CALL 56651 0 3
57696: NOT
57697: IFFALSE 57703
// exit ;
57699: POP
57700: POP
57701: GO 57707
57703: GO 57666
57705: POP
57706: POP
// end ;
57707: LD_VAR 0 4
57711: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
57712: LD_INT 0
57714: PPUSH
57715: PPUSH
57716: PPUSH
57717: PPUSH
57718: PPUSH
57719: PPUSH
57720: PPUSH
57721: PPUSH
57722: PPUSH
// if GetClass ( unit ) <> class_sniper then
57723: LD_VAR 0 1
57727: PPUSH
57728: CALL_OW 257
57732: PUSH
57733: LD_INT 5
57735: NONEQUAL
57736: IFFALSE 57740
// exit ;
57738: GO 58206
// dist := 8 ;
57740: LD_ADDR_VAR 0 5
57744: PUSH
57745: LD_INT 8
57747: ST_TO_ADDR
// viewRange := 12 ;
57748: LD_ADDR_VAR 0 8
57752: PUSH
57753: LD_INT 12
57755: ST_TO_ADDR
// side := GetSide ( unit ) ;
57756: LD_ADDR_VAR 0 6
57760: PUSH
57761: LD_VAR 0 1
57765: PPUSH
57766: CALL_OW 255
57770: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
57771: LD_INT 61
57773: PPUSH
57774: LD_VAR 0 6
57778: PPUSH
57779: CALL_OW 321
57783: PUSH
57784: LD_INT 2
57786: EQUAL
57787: IFFALSE 57797
// viewRange := 16 ;
57789: LD_ADDR_VAR 0 8
57793: PUSH
57794: LD_INT 16
57796: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
57797: LD_VAR 0 1
57801: PPUSH
57802: LD_VAR 0 2
57806: PPUSH
57807: LD_VAR 0 3
57811: PPUSH
57812: CALL_OW 297
57816: PUSH
57817: LD_VAR 0 5
57821: GREATER
57822: IFFALSE 57901
// begin ComMoveXY ( unit , x , y ) ;
57824: LD_VAR 0 1
57828: PPUSH
57829: LD_VAR 0 2
57833: PPUSH
57834: LD_VAR 0 3
57838: PPUSH
57839: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
57843: LD_INT 35
57845: PPUSH
57846: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
57850: LD_VAR 0 1
57854: PPUSH
57855: LD_VAR 0 2
57859: PPUSH
57860: LD_VAR 0 3
57864: PPUSH
57865: CALL 46391 0 3
57869: NOT
57870: IFFALSE 57874
// exit ;
57872: GO 58206
// until GetDistUnitXY ( unit , x , y ) < dist ;
57874: LD_VAR 0 1
57878: PPUSH
57879: LD_VAR 0 2
57883: PPUSH
57884: LD_VAR 0 3
57888: PPUSH
57889: CALL_OW 297
57893: PUSH
57894: LD_VAR 0 5
57898: LESS
57899: IFFALSE 57843
// end ; ComTurnXY ( unit , x , y ) ;
57901: LD_VAR 0 1
57905: PPUSH
57906: LD_VAR 0 2
57910: PPUSH
57911: LD_VAR 0 3
57915: PPUSH
57916: CALL_OW 118
// repeat if Multiplayer then
57920: LD_OWVAR 4
57924: IFFALSE 57935
// wait ( 35 ) else
57926: LD_INT 35
57928: PPUSH
57929: CALL_OW 67
57933: GO 57942
// wait ( 5 ) ;
57935: LD_INT 5
57937: PPUSH
57938: CALL_OW 67
// _d := GetDir ( unit ) ;
57942: LD_ADDR_VAR 0 11
57946: PUSH
57947: LD_VAR 0 1
57951: PPUSH
57952: CALL_OW 254
57956: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
57957: LD_ADDR_VAR 0 7
57961: PUSH
57962: LD_VAR 0 1
57966: PPUSH
57967: CALL_OW 250
57971: PPUSH
57972: LD_VAR 0 1
57976: PPUSH
57977: CALL_OW 251
57981: PPUSH
57982: LD_VAR 0 2
57986: PPUSH
57987: LD_VAR 0 3
57991: PPUSH
57992: CALL 48999 0 4
57996: ST_TO_ADDR
// until dir = _d ;
57997: LD_VAR 0 7
58001: PUSH
58002: LD_VAR 0 11
58006: EQUAL
58007: IFFALSE 57920
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
58009: LD_ADDR_VAR 0 9
58013: PUSH
58014: LD_VAR 0 1
58018: PPUSH
58019: CALL_OW 250
58023: PPUSH
58024: LD_VAR 0 7
58028: PPUSH
58029: LD_VAR 0 5
58033: PPUSH
58034: CALL_OW 272
58038: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
58039: LD_ADDR_VAR 0 10
58043: PUSH
58044: LD_VAR 0 1
58048: PPUSH
58049: CALL_OW 251
58053: PPUSH
58054: LD_VAR 0 7
58058: PPUSH
58059: LD_VAR 0 5
58063: PPUSH
58064: CALL_OW 273
58068: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
58069: LD_VAR 0 9
58073: PPUSH
58074: LD_VAR 0 10
58078: PPUSH
58079: CALL_OW 488
58083: NOT
58084: IFFALSE 58088
// exit ;
58086: GO 58206
// ComAnimCustom ( unit , 1 ) ;
58088: LD_VAR 0 1
58092: PPUSH
58093: LD_INT 1
58095: PPUSH
58096: CALL_OW 592
// p := 0 ;
58100: LD_ADDR_VAR 0 12
58104: PUSH
58105: LD_INT 0
58107: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
58108: LD_VAR 0 9
58112: PPUSH
58113: LD_VAR 0 10
58117: PPUSH
58118: LD_VAR 0 6
58122: PPUSH
58123: LD_VAR 0 8
58127: PPUSH
58128: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
58132: LD_INT 35
58134: PPUSH
58135: CALL_OW 67
// p := Inc ( p ) ;
58139: LD_ADDR_VAR 0 12
58143: PUSH
58144: LD_VAR 0 12
58148: PPUSH
58149: CALL 48955 0 1
58153: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
58154: LD_VAR 0 12
58158: PUSH
58159: LD_INT 3
58161: EQUAL
58162: PUSH
58163: LD_VAR 0 1
58167: PPUSH
58168: CALL_OW 302
58172: NOT
58173: OR
58174: PUSH
58175: LD_VAR 0 1
58179: PPUSH
58180: CALL_OW 301
58184: OR
58185: IFFALSE 58132
// RemoveSeeing ( _x , _y , side ) ;
58187: LD_VAR 0 9
58191: PPUSH
58192: LD_VAR 0 10
58196: PPUSH
58197: LD_VAR 0 6
58201: PPUSH
58202: CALL_OW 331
// end ; end_of_file
58206: LD_VAR 0 4
58210: RET
// export mpKingPoints ; every 0 0$1 trigger mpGameActive marked GameTypeKing do var i , j , tmp ;
58211: LD_EXP 39
58215: IFFALSE 58556
58217: GO 58219
58219: DISABLE
58220: LD_INT 0
58222: PPUSH
58223: PPUSH
58224: PPUSH
// begin mpKingPoints := [ ] ;
58225: LD_ADDR_EXP 58
58229: PUSH
58230: EMPTY
58231: ST_TO_ADDR
// if mpTeamGame then
58232: LD_EXP 11
58236: IFFALSE 58290
// begin for i := 1 to Count ( mpTeams ) do
58238: LD_ADDR_VAR 0 1
58242: PUSH
58243: DOUBLE
58244: LD_INT 1
58246: DEC
58247: ST_TO_ADDR
58248: LD_EXP 10
58252: PPUSH
58253: CALL 11985 0 1
58257: PUSH
58258: FOR_TO
58259: IFFALSE 58286
// mpKingPoints := Replace ( mpKingPoints , i , 0 ) ;
58261: LD_ADDR_EXP 58
58265: PUSH
58266: LD_EXP 58
58270: PPUSH
58271: LD_VAR 0 1
58275: PPUSH
58276: LD_INT 0
58278: PPUSH
58279: CALL_OW 1
58283: ST_TO_ADDR
58284: GO 58258
58286: POP
58287: POP
// end else
58288: GO 58333
// begin for i := 1 to 8 do
58290: LD_ADDR_VAR 0 1
58294: PUSH
58295: DOUBLE
58296: LD_INT 1
58298: DEC
58299: ST_TO_ADDR
58300: LD_INT 8
58302: PUSH
58303: FOR_TO
58304: IFFALSE 58331
// mpKingPoints := Replace ( mpKingPoints , i , 0 ) ;
58306: LD_ADDR_EXP 58
58310: PUSH
58311: LD_EXP 58
58315: PPUSH
58316: LD_VAR 0 1
58320: PPUSH
58321: LD_INT 0
58323: PPUSH
58324: CALL_OW 1
58328: ST_TO_ADDR
58329: GO 58303
58331: POP
58332: POP
// end ; tmp := AreaToList ( kingCamArea , 0 ) ;
58333: LD_ADDR_VAR 0 3
58337: PUSH
58338: LD_EXP 2
58342: PPUSH
58343: LD_INT 0
58345: PPUSH
58346: CALL_OW 517
58350: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
58351: LD_ADDR_VAR 0 1
58355: PUSH
58356: DOUBLE
58357: LD_INT 1
58359: DEC
58360: ST_TO_ADDR
58361: LD_VAR 0 3
58365: PUSH
58366: LD_INT 1
58368: ARRAY
58369: PUSH
58370: FOR_TO
58371: IFFALSE 58438
// for j := 1 to 8 do
58373: LD_ADDR_VAR 0 2
58377: PUSH
58378: DOUBLE
58379: LD_INT 1
58381: DEC
58382: ST_TO_ADDR
58383: LD_INT 8
58385: PUSH
58386: FOR_TO
58387: IFFALSE 58434
// PlaceSeeing ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , j , - 12 ) ;
58389: LD_VAR 0 3
58393: PUSH
58394: LD_INT 1
58396: ARRAY
58397: PUSH
58398: LD_VAR 0 1
58402: ARRAY
58403: PPUSH
58404: LD_VAR 0 3
58408: PUSH
58409: LD_INT 2
58411: ARRAY
58412: PUSH
58413: LD_VAR 0 1
58417: ARRAY
58418: PPUSH
58419: LD_VAR 0 2
58423: PPUSH
58424: LD_INT 12
58426: NEG
58427: PPUSH
58428: CALL_OW 330
58432: GO 58386
58434: POP
58435: POP
58436: GO 58370
58438: POP
58439: POP
// SetAreaMapShow ( mpKingArea , 1 ) ;
58440: LD_EXP 34
58444: PPUSH
58445: LD_INT 1
58447: PPUSH
58448: CALL_OW 424
// UpdateCounter ;
58452: CALL 59060 0 0
// repeat wait ( 0 0$1 ) ;
58456: LD_INT 35
58458: PPUSH
58459: CALL_OW 67
// tmp := FilterUnitsInArea ( mpKingArea , [ [ f_not , [ f_constructed ] ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
58463: LD_ADDR_VAR 0 3
58467: PUSH
58468: LD_EXP 34
58472: PPUSH
58473: LD_INT 3
58475: PUSH
58476: LD_INT 57
58478: PUSH
58479: EMPTY
58480: LIST
58481: PUSH
58482: EMPTY
58483: LIST
58484: LIST
58485: PUSH
58486: LD_INT 50
58488: PUSH
58489: EMPTY
58490: LIST
58491: PUSH
58492: LD_INT 2
58494: PUSH
58495: LD_INT 30
58497: PUSH
58498: LD_INT 0
58500: PUSH
58501: EMPTY
58502: LIST
58503: LIST
58504: PUSH
58505: LD_INT 30
58507: PUSH
58508: LD_INT 1
58510: PUSH
58511: EMPTY
58512: LIST
58513: LIST
58514: PUSH
58515: EMPTY
58516: LIST
58517: LIST
58518: LIST
58519: PUSH
58520: EMPTY
58521: LIST
58522: LIST
58523: LIST
58524: PPUSH
58525: CALL_OW 70
58529: ST_TO_ADDR
// if not tmp then
58530: LD_VAR 0 3
58534: NOT
58535: IFFALSE 58539
// continue ;
58537: GO 58456
// AddPoints ( tmp ) ;
58539: LD_VAR 0 3
58543: PPUSH
58544: CALL 58738 0 1
// UpdateCounter ;
58548: CALL 59060 0 0
// until false ;
58552: LD_INT 0
58554: IFFALSE 58456
// end ;
58556: PPOPN 3
58558: END
// every 0 0$1 trigger mpGameActive and mpEmissions marked GameTypeKing do var i , tmp ;
58559: LD_EXP 39
58563: PUSH
58564: LD_EXP 37
58568: AND
58569: IFFALSE 58735
58571: GO 58573
58573: DISABLE
58574: LD_INT 0
58576: PPUSH
58577: PPUSH
// begin tmp := AreaToList ( kingCamArea , 0 ) ;
58578: LD_ADDR_VAR 0 2
58582: PUSH
58583: LD_EXP 2
58587: PPUSH
58588: LD_INT 0
58590: PPUSH
58591: CALL_OW 517
58595: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
58596: LD_ADDR_VAR 0 1
58600: PUSH
58601: DOUBLE
58602: LD_INT 1
58604: DEC
58605: ST_TO_ADDR
58606: LD_VAR 0 2
58610: PUSH
58611: LD_INT 1
58613: ARRAY
58614: PUSH
58615: FOR_TO
58616: IFFALSE 58657
// ArtContamination ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 125 ) ;
58618: LD_VAR 0 2
58622: PUSH
58623: LD_INT 1
58625: ARRAY
58626: PUSH
58627: LD_VAR 0 1
58631: ARRAY
58632: PPUSH
58633: LD_VAR 0 2
58637: PUSH
58638: LD_INT 2
58640: ARRAY
58641: PUSH
58642: LD_VAR 0 1
58646: ARRAY
58647: PPUSH
58648: LD_INT 125
58650: PPUSH
58651: CALL_OW 495
58655: GO 58615
58657: POP
58658: POP
// repeat wait ( mpEmissions ) ;
58659: LD_EXP 37
58663: PPUSH
58664: CALL_OW 67
// for i := 1 to tmp [ 1 ] do
58668: LD_ADDR_VAR 0 1
58672: PUSH
58673: DOUBLE
58674: LD_INT 1
58676: DEC
58677: ST_TO_ADDR
58678: LD_VAR 0 2
58682: PUSH
58683: LD_INT 1
58685: ARRAY
58686: PUSH
58687: FOR_TO
58688: IFFALSE 58729
// ArtContamination ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 15 ) ;
58690: LD_VAR 0 2
58694: PUSH
58695: LD_INT 1
58697: ARRAY
58698: PUSH
58699: LD_VAR 0 1
58703: ARRAY
58704: PPUSH
58705: LD_VAR 0 2
58709: PUSH
58710: LD_INT 2
58712: ARRAY
58713: PUSH
58714: LD_VAR 0 1
58718: ARRAY
58719: PPUSH
58720: LD_INT 15
58722: PPUSH
58723: CALL_OW 495
58727: GO 58687
58729: POP
58730: POP
// until false ;
58731: LD_INT 0
58733: IFFALSE 58659
// end ;
58735: PPOPN 2
58737: END
// function AddPoints ( depots ) ; var i , first , team , side ; begin
58738: LD_INT 0
58740: PPUSH
58741: PPUSH
58742: PPUSH
58743: PPUSH
58744: PPUSH
// if mpTeamGame then
58745: LD_EXP 11
58749: IFFALSE 58946
// begin first := depots [ 1 ] ;
58751: LD_ADDR_VAR 0 4
58755: PUSH
58756: LD_VAR 0 1
58760: PUSH
58761: LD_INT 1
58763: ARRAY
58764: ST_TO_ADDR
// side := GetSide ( first ) ;
58765: LD_ADDR_VAR 0 6
58769: PUSH
58770: LD_VAR 0 4
58774: PPUSH
58775: CALL_OW 255
58779: ST_TO_ADDR
// for i := 1 to mpTeams do
58780: LD_ADDR_VAR 0 3
58784: PUSH
58785: DOUBLE
58786: LD_INT 1
58788: DEC
58789: ST_TO_ADDR
58790: LD_EXP 10
58794: PUSH
58795: FOR_TO
58796: IFFALSE 58830
// if side in mpTeams [ i ] then
58798: LD_VAR 0 6
58802: PUSH
58803: LD_EXP 10
58807: PUSH
58808: LD_VAR 0 3
58812: ARRAY
58813: IN
58814: IFFALSE 58828
// begin team := i ;
58816: LD_ADDR_VAR 0 5
58820: PUSH
58821: LD_VAR 0 3
58825: ST_TO_ADDR
// break ;
58826: GO 58830
// end ;
58828: GO 58795
58830: POP
58831: POP
// if not team then
58832: LD_VAR 0 5
58836: NOT
58837: IFFALSE 58841
// exit ;
58839: GO 59055
// if FilterUnitsInArea ( mpKingArea , [ f_enemy , side ] ) then
58841: LD_EXP 34
58845: PPUSH
58846: LD_INT 81
58848: PUSH
58849: LD_VAR 0 6
58853: PUSH
58854: EMPTY
58855: LIST
58856: LIST
58857: PPUSH
58858: CALL_OW 70
58862: IFFALSE 58866
// exit ;
58864: GO 59055
// mpKingPoints := Replace ( mpKingPoints , team , mpKingPoints [ team ] + 1 ) ;
58866: LD_ADDR_EXP 58
58870: PUSH
58871: LD_EXP 58
58875: PPUSH
58876: LD_VAR 0 5
58880: PPUSH
58881: LD_EXP 58
58885: PUSH
58886: LD_VAR 0 5
58890: ARRAY
58891: PUSH
58892: LD_INT 1
58894: PLUS
58895: PPUSH
58896: CALL_OW 1
58900: ST_TO_ADDR
// for i in mpTeams [ team ] do
58901: LD_ADDR_VAR 0 3
58905: PUSH
58906: LD_EXP 10
58910: PUSH
58911: LD_VAR 0 5
58915: ARRAY
58916: PUSH
58917: FOR_IN
58918: IFFALSE 58942
// SetMultiScore ( i , mpKingPoints [ team ] ) ;
58920: LD_VAR 0 3
58924: PPUSH
58925: LD_EXP 58
58929: PUSH
58930: LD_VAR 0 5
58934: ARRAY
58935: PPUSH
58936: CALL_OW 506
58940: GO 58917
58942: POP
58943: POP
// end else
58944: GO 59055
// begin first := depots [ 1 ] ;
58946: LD_ADDR_VAR 0 4
58950: PUSH
58951: LD_VAR 0 1
58955: PUSH
58956: LD_INT 1
58958: ARRAY
58959: ST_TO_ADDR
// side := GetSide ( first ) ;
58960: LD_ADDR_VAR 0 6
58964: PUSH
58965: LD_VAR 0 4
58969: PPUSH
58970: CALL_OW 255
58974: ST_TO_ADDR
// if FilterUnitsInArea ( mpKingArea , [ f_enemy , side ] ) then
58975: LD_EXP 34
58979: PPUSH
58980: LD_INT 81
58982: PUSH
58983: LD_VAR 0 6
58987: PUSH
58988: EMPTY
58989: LIST
58990: LIST
58991: PPUSH
58992: CALL_OW 70
58996: IFFALSE 59000
// exit ;
58998: GO 59055
// mpKingPoints := Replace ( mpKingPoints , side , mpKingPoints [ side ] + 1 ) ;
59000: LD_ADDR_EXP 58
59004: PUSH
59005: LD_EXP 58
59009: PPUSH
59010: LD_VAR 0 6
59014: PPUSH
59015: LD_EXP 58
59019: PUSH
59020: LD_VAR 0 6
59024: ARRAY
59025: PUSH
59026: LD_INT 1
59028: PLUS
59029: PPUSH
59030: CALL_OW 1
59034: ST_TO_ADDR
// SetMultiScore ( side , mpKingPoints [ side ] ) ;
59035: LD_VAR 0 6
59039: PPUSH
59040: LD_EXP 58
59044: PUSH
59045: LD_VAR 0 6
59049: ARRAY
59050: PPUSH
59051: CALL_OW 506
// end ; end ;
59055: LD_VAR 0 2
59059: RET
// function UpdateCounter ; var i ; begin
59060: LD_INT 0
59062: PPUSH
59063: PPUSH
// result := [ ] ;
59064: LD_ADDR_VAR 0 1
59068: PUSH
59069: EMPTY
59070: ST_TO_ADDR
// if mpTeamGame then
59071: LD_EXP 11
59075: IFFALSE 59142
// begin for i := 1 to mpTeams do
59077: LD_ADDR_VAR 0 2
59081: PUSH
59082: DOUBLE
59083: LD_INT 1
59085: DEC
59086: ST_TO_ADDR
59087: LD_EXP 10
59091: PUSH
59092: FOR_TO
59093: IFFALSE 59138
// result := result ^ [ #KingoftheHill-Team , i , mpKingPoints [ i ] , mpPoints ] ;
59095: LD_ADDR_VAR 0 1
59099: PUSH
59100: LD_VAR 0 1
59104: PUSH
59105: LD_STRING #KingoftheHill-Team
59107: PUSH
59108: LD_VAR 0 2
59112: PUSH
59113: LD_EXP 58
59117: PUSH
59118: LD_VAR 0 2
59122: ARRAY
59123: PUSH
59124: LD_EXP 35
59128: PUSH
59129: EMPTY
59130: LIST
59131: LIST
59132: LIST
59133: LIST
59134: ADD
59135: ST_TO_ADDR
59136: GO 59092
59138: POP
59139: POP
// end else
59140: GO 59215
// begin for i := 1 to 8 do
59142: LD_ADDR_VAR 0 2
59146: PUSH
59147: DOUBLE
59148: LD_INT 1
59150: DEC
59151: ST_TO_ADDR
59152: LD_INT 8
59154: PUSH
59155: FOR_TO
59156: IFFALSE 59213
// if mpSidePositions [ i ] then
59158: LD_EXP 7
59162: PUSH
59163: LD_VAR 0 2
59167: ARRAY
59168: IFFALSE 59211
// result := result ^ [ #KingoftheHill-Player , i , mpKingPoints [ i ] , mpPoints ] ;
59170: LD_ADDR_VAR 0 1
59174: PUSH
59175: LD_VAR 0 1
59179: PUSH
59180: LD_STRING #KingoftheHill-Player
59182: PUSH
59183: LD_VAR 0 2
59187: PUSH
59188: LD_EXP 58
59192: PUSH
59193: LD_VAR 0 2
59197: ARRAY
59198: PUSH
59199: LD_EXP 35
59203: PUSH
59204: EMPTY
59205: LIST
59206: LIST
59207: LIST
59208: LIST
59209: ADD
59210: ST_TO_ADDR
59211: GO 59155
59213: POP
59214: POP
// end ; mpDisplayStrings := result ;
59215: LD_ADDR_EXP 38
59219: PUSH
59220: LD_VAR 0 1
59224: ST_TO_ADDR
// end ;
59225: LD_VAR 0 1
59229: RET
// export function HowMuchPointsKing ( side ) ; begin
59230: LD_INT 0
59232: PPUSH
// result := HowMuchPoints ( side ) ;
59233: LD_ADDR_VAR 0 2
59237: PUSH
59238: LD_VAR 0 1
59242: PPUSH
59243: CALL 59253 0 1
59247: ST_TO_ADDR
// end ;
59248: LD_VAR 0 2
59252: RET
// function HowMuchPoints ( side ) ; var i ; begin
59253: LD_INT 0
59255: PPUSH
59256: PPUSH
// if mpTeamGame then
59257: LD_EXP 11
59261: IFFALSE 59330
// begin for i := 1 to Count ( mpTeams ) do
59263: LD_ADDR_VAR 0 3
59267: PUSH
59268: DOUBLE
59269: LD_INT 1
59271: DEC
59272: ST_TO_ADDR
59273: LD_EXP 10
59277: PPUSH
59278: CALL 11985 0 1
59282: PUSH
59283: FOR_TO
59284: IFFALSE 59326
// begin if side in mpTeams [ i ] then
59286: LD_VAR 0 1
59290: PUSH
59291: LD_EXP 10
59295: PUSH
59296: LD_VAR 0 3
59300: ARRAY
59301: IN
59302: IFFALSE 59324
// begin result := mpKingPoints [ i ] ;
59304: LD_ADDR_VAR 0 2
59308: PUSH
59309: LD_EXP 58
59313: PUSH
59314: LD_VAR 0 3
59318: ARRAY
59319: ST_TO_ADDR
// exit ;
59320: POP
59321: POP
59322: GO 59346
// end ; end ;
59324: GO 59283
59326: POP
59327: POP
// end else
59328: GO 59346
// result := mpKingPoints [ side ] ;
59330: LD_ADDR_VAR 0 2
59334: PUSH
59335: LD_EXP 58
59339: PUSH
59340: LD_VAR 0 1
59344: ARRAY
59345: ST_TO_ADDR
// end ;
59346: LD_VAR 0 2
59350: RET
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeKing do var i , canWin ;
59351: LD_EXP 39
59355: PUSH
59356: CALL 59678 0 0
59360: AND
59361: PUSH
59362: LD_OWVAR 4
59366: AND
59367: IFFALSE 59603
59369: GO 59371
59371: DISABLE
59372: LD_INT 0
59374: PPUSH
59375: PPUSH
// begin canWin := false ;
59376: LD_ADDR_VAR 0 2
59380: PUSH
59381: LD_INT 0
59383: ST_TO_ADDR
// if not HasPower ( your_side ) then
59384: LD_OWVAR 2
59388: PPUSH
59389: CALL 59718 0 1
59393: NOT
59394: IFFALSE 59405
// begin Multiplayer_Loose_Message ;
59396: CALL_OW 521
// enable ( mpLose ) ;
59400: LD_INT 102
59402: ENABLE_MARKED
// end else
59403: GO 59603
// begin canWin := ( HowMuchPoints ( your_side ) >= mpPoints and HasPower ( your_side ) ) or not EnemiesInGame ;
59405: LD_ADDR_VAR 0 2
59409: PUSH
59410: LD_OWVAR 2
59414: PPUSH
59415: CALL 59253 0 1
59419: PUSH
59420: LD_EXP 35
59424: GREATEREQUAL
59425: PUSH
59426: LD_OWVAR 2
59430: PPUSH
59431: CALL 59718 0 1
59435: AND
59436: PUSH
59437: CALL 59606 0 0
59441: NOT
59442: OR
59443: ST_TO_ADDR
// for i := 1 to 8 do
59444: LD_ADDR_VAR 0 1
59448: PUSH
59449: DOUBLE
59450: LD_INT 1
59452: DEC
59453: ST_TO_ADDR
59454: LD_INT 8
59456: PUSH
59457: FOR_TO
59458: IFFALSE 59589
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
59460: LD_EXP 7
59464: PUSH
59465: LD_VAR 0 1
59469: ARRAY
59470: PUSH
59471: LD_VAR 0 1
59475: PPUSH
59476: CALL_OW 108
59480: AND
59481: PUSH
59482: LD_VAR 0 1
59486: PUSH
59487: LD_OWVAR 2
59491: NONEQUAL
59492: AND
59493: IFFALSE 59587
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
59495: LD_EXP 8
59499: PUSH
59500: LD_VAR 0 1
59504: ARRAY
59505: NOT
59506: PUSH
59507: LD_EXP 8
59511: PUSH
59512: LD_VAR 0 1
59516: ARRAY
59517: PUSH
59518: LD_EXP 8
59522: PUSH
59523: LD_OWVAR 2
59527: ARRAY
59528: NONEQUAL
59529: PUSH
59530: LD_OWVAR 2
59534: PPUSH
59535: LD_VAR 0 1
59539: PPUSH
59540: CALL_OW 81
59544: PUSH
59545: LD_INT 1
59547: NONEQUAL
59548: AND
59549: OR
59550: IFFALSE 59587
// if HowMuchPoints ( i ) >= mpPoints and HasPower ( i ) then
59552: LD_VAR 0 1
59556: PPUSH
59557: CALL 59253 0 1
59561: PUSH
59562: LD_EXP 35
59566: GREATEREQUAL
59567: PUSH
59568: LD_VAR 0 1
59572: PPUSH
59573: CALL 59718 0 1
59577: AND
59578: IFFALSE 59587
// begin enable ( mpLose ) ;
59580: LD_INT 102
59582: ENABLE_MARKED
// exit ;
59583: POP
59584: POP
59585: GO 59603
// end ;
59587: GO 59457
59589: POP
59590: POP
// if canWin then
59591: LD_VAR 0 2
59595: IFFALSE 59602
// enable ( mpWin ) else
59597: LD_INT 101
59599: ENABLE_MARKED
59600: GO 59603
// enable ;
59602: ENABLE
// end ; end ;
59603: PPOPN 2
59605: END
// function EnemiesInGame ; var i ; begin
59606: LD_INT 0
59608: PPUSH
59609: PPUSH
// result := false ;
59610: LD_ADDR_VAR 0 1
59614: PUSH
59615: LD_INT 0
59617: ST_TO_ADDR
// for i := 1 to 8 do
59618: LD_ADDR_VAR 0 2
59622: PUSH
59623: DOUBLE
59624: LD_INT 1
59626: DEC
59627: ST_TO_ADDR
59628: LD_INT 8
59630: PUSH
59631: FOR_TO
59632: IFFALSE 59671
// if i <> your_side and HasPower ( i ) then
59634: LD_VAR 0 2
59638: PUSH
59639: LD_OWVAR 2
59643: NONEQUAL
59644: PUSH
59645: LD_VAR 0 2
59649: PPUSH
59650: CALL 59718 0 1
59654: AND
59655: IFFALSE 59669
// begin result := true ;
59657: LD_ADDR_VAR 0 1
59661: PUSH
59662: LD_INT 1
59664: ST_TO_ADDR
// exit ;
59665: POP
59666: POP
59667: GO 59673
// end ;
59669: GO 59631
59671: POP
59672: POP
// end ;
59673: LD_VAR 0 1
59677: RET
// function CanWinLoose ; begin
59678: LD_INT 0
59680: PPUSH
// result := true ;
59681: LD_ADDR_VAR 0 1
59685: PUSH
59686: LD_INT 1
59688: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
59689: CALL_OW 531
59693: PUSH
59694: CALL_OW 519
59698: PUSH
59699: LD_INT 1
59701: GREATER
59702: AND
59703: IFFALSE 59713
// result := false ;
59705: LD_ADDR_VAR 0 1
59709: PUSH
59710: LD_INT 0
59712: ST_TO_ADDR
// end ;
59713: LD_VAR 0 1
59717: RET
// function HasPower ( i ) ; begin
59718: LD_INT 0
59720: PPUSH
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
59721: LD_ADDR_VAR 0 2
59725: PUSH
59726: LD_INT 22
59728: PUSH
59729: LD_VAR 0 1
59733: PUSH
59734: EMPTY
59735: LIST
59736: LIST
59737: PUSH
59738: LD_INT 2
59740: PUSH
59741: LD_INT 21
59743: PUSH
59744: LD_INT 1
59746: PUSH
59747: EMPTY
59748: LIST
59749: LIST
59750: PUSH
59751: LD_INT 33
59753: PUSH
59754: LD_INT 3
59756: PUSH
59757: EMPTY
59758: LIST
59759: LIST
59760: PUSH
59761: LD_INT 33
59763: PUSH
59764: LD_INT 5
59766: PUSH
59767: EMPTY
59768: LIST
59769: LIST
59770: PUSH
59771: EMPTY
59772: LIST
59773: LIST
59774: LIST
59775: LIST
59776: PUSH
59777: EMPTY
59778: LIST
59779: LIST
59780: PPUSH
59781: CALL_OW 69
59785: ST_TO_ADDR
// end ; end_of_file
59786: LD_VAR 0 2
59790: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin end ;
59791: PPOPN 6
59793: END
// on MapStart ( p ) do begin if mpGameType = GameTypeCoop then
59794: LD_EXP 3
59798: PUSH
59799: LD_INT 4
59801: EQUAL
59802: IFFALSE 59838
// begin ToLua ( setGameDifficulty( & Difficulty & ) ) ;
59804: LD_STRING setGameDifficulty(
59806: PUSH
59807: LD_OWVAR 67
59811: STR
59812: PUSH
59813: LD_STRING )
59815: STR
59816: PPUSH
59817: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
59821: LD_STRING displayDifficulty(
59823: PUSH
59824: LD_OWVAR 67
59828: STR
59829: PUSH
59830: LD_STRING )
59832: STR
59833: PPUSH
59834: CALL_OW 559
// end ; SOS_MapStart ( ) ;
59838: CALL 59867 0 0
// end ; end_of_file
59842: PPOPN 1
59844: END
// every 0 0$1 do
59845: GO 59847
59847: DISABLE
// begin enable ;
59848: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
59849: LD_STRING updateTimer(
59851: PUSH
59852: LD_OWVAR 1
59856: STR
59857: PUSH
59858: LD_STRING );
59860: STR
59861: PPUSH
59862: CALL_OW 559
// end ;
59866: END
// export function SOS_MapStart ( ) ; begin
59867: LD_INT 0
59869: PPUSH
// UpdateFactoryWaypoints ( ) ;
59870: CALL 60795 0 0
// UpdateWarehouseGatheringPoints ( ) ;
59874: CALL 61047 0 0
// ParseMultiDataToLua ( ) ;
59878: CALL 61194 0 0
// ToLua ( setSpecLogoNumber( & 2 & , & 1 & ) ) ;
59882: LD_STRING setSpecLogoNumber(
59884: PUSH
59885: LD_INT 2
59887: STR
59888: PUSH
59889: LD_STRING ,
59891: STR
59892: PUSH
59893: LD_INT 1
59895: STR
59896: PUSH
59897: LD_STRING )
59899: STR
59900: PPUSH
59901: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 3 & , & 2 & ) ) ;
59905: LD_STRING setSpecLogoNumber(
59907: PUSH
59908: LD_INT 3
59910: STR
59911: PUSH
59912: LD_STRING ,
59914: STR
59915: PUSH
59916: LD_INT 2
59918: STR
59919: PUSH
59920: LD_STRING )
59922: STR
59923: PPUSH
59924: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 4 & , & 3 & ) ) ;
59928: LD_STRING setSpecLogoNumber(
59930: PUSH
59931: LD_INT 4
59933: STR
59934: PUSH
59935: LD_STRING ,
59937: STR
59938: PUSH
59939: LD_INT 3
59941: STR
59942: PUSH
59943: LD_STRING )
59945: STR
59946: PPUSH
59947: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 5 & , & 4 & ) ) ;
59951: LD_STRING setSpecLogoNumber(
59953: PUSH
59954: LD_INT 5
59956: STR
59957: PUSH
59958: LD_STRING ,
59960: STR
59961: PUSH
59962: LD_INT 4
59964: STR
59965: PUSH
59966: LD_STRING )
59968: STR
59969: PPUSH
59970: CALL_OW 559
// end ;
59974: LD_VAR 0 1
59978: RET
// export function UpdateSpectatorBar ; var i , j , crates , oil , sib , people , base , bases ; begin
59979: LD_INT 0
59981: PPUSH
59982: PPUSH
59983: PPUSH
59984: PPUSH
59985: PPUSH
59986: PPUSH
59987: PPUSH
59988: PPUSH
59989: PPUSH
// for i := 1 to 8 do
59990: LD_ADDR_VAR 0 2
59994: PUSH
59995: DOUBLE
59996: LD_INT 1
59998: DEC
59999: ST_TO_ADDR
60000: LD_INT 8
60002: PUSH
60003: FOR_TO
60004: IFFALSE 60389
// begin if mpSidePositions [ i ] then
60006: LD_EXP 7
60010: PUSH
60011: LD_VAR 0 2
60015: ARRAY
60016: IFFALSE 60387
// begin people := Count ( FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) ) ;
60018: LD_ADDR_VAR 0 7
60022: PUSH
60023: LD_INT 22
60025: PUSH
60026: LD_VAR 0 2
60030: PUSH
60031: EMPTY
60032: LIST
60033: LIST
60034: PUSH
60035: LD_INT 21
60037: PUSH
60038: LD_INT 1
60040: PUSH
60041: EMPTY
60042: LIST
60043: LIST
60044: PUSH
60045: EMPTY
60046: LIST
60047: LIST
60048: PPUSH
60049: CALL_OW 69
60053: PPUSH
60054: CALL 11985 0 1
60058: ST_TO_ADDR
// bases := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
60059: LD_ADDR_VAR 0 9
60063: PUSH
60064: LD_INT 22
60066: PUSH
60067: LD_VAR 0 2
60071: PUSH
60072: EMPTY
60073: LIST
60074: LIST
60075: PUSH
60076: LD_INT 2
60078: PUSH
60079: LD_INT 30
60081: PUSH
60082: LD_INT 0
60084: PUSH
60085: EMPTY
60086: LIST
60087: LIST
60088: PUSH
60089: LD_INT 30
60091: PUSH
60092: LD_INT 1
60094: PUSH
60095: EMPTY
60096: LIST
60097: LIST
60098: PUSH
60099: EMPTY
60100: LIST
60101: LIST
60102: LIST
60103: PUSH
60104: EMPTY
60105: LIST
60106: LIST
60107: PPUSH
60108: CALL_OW 69
60112: ST_TO_ADDR
// crates := 0 ;
60113: LD_ADDR_VAR 0 4
60117: PUSH
60118: LD_INT 0
60120: ST_TO_ADDR
// oil := 0 ;
60121: LD_ADDR_VAR 0 5
60125: PUSH
60126: LD_INT 0
60128: ST_TO_ADDR
// sib := 0 ;
60129: LD_ADDR_VAR 0 6
60133: PUSH
60134: LD_INT 0
60136: ST_TO_ADDR
// if bases then
60137: LD_VAR 0 9
60141: IFFALSE 60247
// begin for j in bases do
60143: LD_ADDR_VAR 0 3
60147: PUSH
60148: LD_VAR 0 9
60152: PUSH
60153: FOR_IN
60154: IFFALSE 60245
// begin base := GetBase ( j ) ;
60156: LD_ADDR_VAR 0 8
60160: PUSH
60161: LD_VAR 0 3
60165: PPUSH
60166: CALL_OW 274
60170: ST_TO_ADDR
// crates := crates + GetResourceType ( base , mat_cans ) ;
60171: LD_ADDR_VAR 0 4
60175: PUSH
60176: LD_VAR 0 4
60180: PUSH
60181: LD_VAR 0 8
60185: PPUSH
60186: LD_INT 1
60188: PPUSH
60189: CALL_OW 275
60193: PLUS
60194: ST_TO_ADDR
// oil := oil + GetResourceType ( base , mat_oil ) ;
60195: LD_ADDR_VAR 0 5
60199: PUSH
60200: LD_VAR 0 5
60204: PUSH
60205: LD_VAR 0 8
60209: PPUSH
60210: LD_INT 2
60212: PPUSH
60213: CALL_OW 275
60217: PLUS
60218: ST_TO_ADDR
// sib := sib + GetResourceType ( base , mat_siberit ) ;
60219: LD_ADDR_VAR 0 6
60223: PUSH
60224: LD_VAR 0 6
60228: PUSH
60229: LD_VAR 0 8
60233: PPUSH
60234: LD_INT 3
60236: PPUSH
60237: CALL_OW 275
60241: PLUS
60242: ST_TO_ADDR
// end ;
60243: GO 60153
60245: POP
60246: POP
// end ; ToLua ( setSpecText( & i & , & 2 & , & crates & ) ) ;
60247: LD_STRING setSpecText(
60249: PUSH
60250: LD_VAR 0 2
60254: STR
60255: PUSH
60256: LD_STRING ,
60258: STR
60259: PUSH
60260: LD_INT 2
60262: STR
60263: PUSH
60264: LD_STRING ,
60266: STR
60267: PUSH
60268: LD_VAR 0 4
60272: STR
60273: PUSH
60274: LD_STRING )
60276: STR
60277: PPUSH
60278: CALL_OW 559
// ToLua ( setSpecText( & i & , & 3 & , & oil & ) ) ;
60282: LD_STRING setSpecText(
60284: PUSH
60285: LD_VAR 0 2
60289: STR
60290: PUSH
60291: LD_STRING ,
60293: STR
60294: PUSH
60295: LD_INT 3
60297: STR
60298: PUSH
60299: LD_STRING ,
60301: STR
60302: PUSH
60303: LD_VAR 0 5
60307: STR
60308: PUSH
60309: LD_STRING )
60311: STR
60312: PPUSH
60313: CALL_OW 559
// ToLua ( setSpecText( & i & , & 4 & , & sib & ) ) ;
60317: LD_STRING setSpecText(
60319: PUSH
60320: LD_VAR 0 2
60324: STR
60325: PUSH
60326: LD_STRING ,
60328: STR
60329: PUSH
60330: LD_INT 4
60332: STR
60333: PUSH
60334: LD_STRING ,
60336: STR
60337: PUSH
60338: LD_VAR 0 6
60342: STR
60343: PUSH
60344: LD_STRING )
60346: STR
60347: PPUSH
60348: CALL_OW 559
// ToLua ( setSpecText( & i & , & 5 & , & people & ) ) ;
60352: LD_STRING setSpecText(
60354: PUSH
60355: LD_VAR 0 2
60359: STR
60360: PUSH
60361: LD_STRING ,
60363: STR
60364: PUSH
60365: LD_INT 5
60367: STR
60368: PUSH
60369: LD_STRING ,
60371: STR
60372: PUSH
60373: LD_VAR 0 7
60377: STR
60378: PUSH
60379: LD_STRING )
60381: STR
60382: PPUSH
60383: CALL_OW 559
// end ; end ;
60387: GO 60003
60389: POP
60390: POP
// end ;
60391: LD_VAR 0 1
60395: RET
// every 20 + 0 0$5 trigger FilterAllUnits ( [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) do
60396: LD_INT 2
60398: PUSH
60399: LD_INT 30
60401: PUSH
60402: LD_INT 0
60404: PUSH
60405: EMPTY
60406: LIST
60407: LIST
60408: PUSH
60409: LD_INT 30
60411: PUSH
60412: LD_INT 1
60414: PUSH
60415: EMPTY
60416: LIST
60417: LIST
60418: PUSH
60419: EMPTY
60420: LIST
60421: LIST
60422: LIST
60423: PPUSH
60424: CALL_OW 69
60428: IFFALSE 60438
60430: GO 60432
60432: DISABLE
// begin enable ;
60433: ENABLE
// UpdateSpectatorBar ;
60434: CALL 59979 0 0
// end ;
60438: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
60439: LD_INT 0
60441: PPUSH
// end ;
60442: LD_VAR 0 12
60446: RET
// export factoryWaypoints , factoryWaypointsDrivers ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
60447: LD_INT 0
60449: PPUSH
60450: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
60451: LD_VAR 0 1
60455: NOT
60456: PUSH
60457: LD_VAR 0 2
60461: PPUSH
60462: LD_VAR 0 3
60466: PPUSH
60467: CALL_OW 488
60471: NOT
60472: OR
60473: PUSH
60474: LD_VAR 0 1
60478: PPUSH
60479: CALL_OW 266
60483: PUSH
60484: LD_INT 3
60486: NONEQUAL
60487: PUSH
60488: LD_VAR 0 1
60492: PPUSH
60493: CALL_OW 247
60497: PUSH
60498: LD_INT 1
60500: EQUAL
60501: NOT
60502: AND
60503: OR
60504: IFFALSE 60508
// exit ;
60506: GO 60790
// if GetType ( factory ) = unit_human then
60508: LD_VAR 0 1
60512: PPUSH
60513: CALL_OW 247
60517: PUSH
60518: LD_INT 1
60520: EQUAL
60521: IFFALSE 60538
// factory := IsInUnit ( factory ) ;
60523: LD_ADDR_VAR 0 1
60527: PUSH
60528: LD_VAR 0 1
60532: PPUSH
60533: CALL_OW 310
60537: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
60538: LD_VAR 0 1
60542: PPUSH
60543: CALL_OW 266
60547: PUSH
60548: LD_INT 3
60550: NONEQUAL
60551: IFFALSE 60555
// exit ;
60553: GO 60790
// for i := 1 to Count ( factoryWaypoints ) do
60555: LD_ADDR_VAR 0 5
60559: PUSH
60560: DOUBLE
60561: LD_INT 1
60563: DEC
60564: ST_TO_ADDR
60565: LD_EXP 59
60569: PPUSH
60570: CALL 11985 0 1
60574: PUSH
60575: FOR_TO
60576: IFFALSE 60738
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
60578: LD_VAR 0 2
60582: PPUSH
60583: LD_VAR 0 3
60587: PPUSH
60588: CALL_OW 428
60592: PUSH
60593: LD_EXP 59
60597: PUSH
60598: LD_VAR 0 5
60602: ARRAY
60603: PUSH
60604: LD_INT 2
60606: ARRAY
60607: EQUAL
60608: IFFALSE 60640
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
60610: LD_ADDR_EXP 59
60614: PUSH
60615: LD_EXP 59
60619: PPUSH
60620: LD_VAR 0 5
60624: PPUSH
60625: CALL_OW 3
60629: ST_TO_ADDR
// UpdateFactoryWaypoints ;
60630: CALL 60795 0 0
// exit ;
60634: POP
60635: POP
60636: GO 60790
// end else
60638: GO 60736
// if factory = factoryWaypoints [ i ] [ 2 ] then
60640: LD_VAR 0 1
60644: PUSH
60645: LD_EXP 59
60649: PUSH
60650: LD_VAR 0 5
60654: ARRAY
60655: PUSH
60656: LD_INT 2
60658: ARRAY
60659: EQUAL
60660: IFFALSE 60736
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
60662: LD_ADDR_EXP 59
60666: PUSH
60667: LD_EXP 59
60671: PPUSH
60672: LD_VAR 0 5
60676: PPUSH
60677: CALL_OW 3
60681: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
60682: LD_ADDR_EXP 59
60686: PUSH
60687: LD_EXP 59
60691: PPUSH
60692: LD_VAR 0 1
60696: PPUSH
60697: CALL_OW 255
60701: PUSH
60702: LD_VAR 0 1
60706: PUSH
60707: LD_VAR 0 2
60711: PUSH
60712: LD_VAR 0 3
60716: PUSH
60717: EMPTY
60718: LIST
60719: LIST
60720: LIST
60721: LIST
60722: PPUSH
60723: CALL 47594 0 2
60727: ST_TO_ADDR
// UpdateFactoryWaypoints ;
60728: CALL 60795 0 0
// exit ;
60732: POP
60733: POP
60734: GO 60790
// end ; end ;
60736: GO 60575
60738: POP
60739: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
60740: LD_ADDR_EXP 59
60744: PUSH
60745: LD_EXP 59
60749: PPUSH
60750: LD_VAR 0 1
60754: PPUSH
60755: CALL_OW 255
60759: PUSH
60760: LD_VAR 0 1
60764: PUSH
60765: LD_VAR 0 2
60769: PUSH
60770: LD_VAR 0 3
60774: PUSH
60775: EMPTY
60776: LIST
60777: LIST
60778: LIST
60779: LIST
60780: PPUSH
60781: CALL 47594 0 2
60785: ST_TO_ADDR
// UpdateFactoryWaypoints ;
60786: CALL 60795 0 0
// end ;
60790: LD_VAR 0 4
60794: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
60795: LD_INT 0
60797: PPUSH
60798: PPUSH
60799: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
60800: LD_STRING resetFactoryWaypoint();
60802: PPUSH
60803: CALL_OW 559
// if factoryWaypoints then
60807: LD_EXP 59
60811: IFFALSE 60932
// begin list := factoryWaypoints ;
60813: LD_ADDR_VAR 0 3
60817: PUSH
60818: LD_EXP 59
60822: ST_TO_ADDR
// for i := 1 to list do
60823: LD_ADDR_VAR 0 2
60827: PUSH
60828: DOUBLE
60829: LD_INT 1
60831: DEC
60832: ST_TO_ADDR
60833: LD_VAR 0 3
60837: PUSH
60838: FOR_TO
60839: IFFALSE 60930
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
60841: LD_STRING setFactoryWaypointXY(
60843: PUSH
60844: LD_VAR 0 3
60848: PUSH
60849: LD_VAR 0 2
60853: ARRAY
60854: PUSH
60855: LD_INT 1
60857: ARRAY
60858: STR
60859: PUSH
60860: LD_STRING ,
60862: STR
60863: PUSH
60864: LD_VAR 0 3
60868: PUSH
60869: LD_VAR 0 2
60873: ARRAY
60874: PUSH
60875: LD_INT 2
60877: ARRAY
60878: STR
60879: PUSH
60880: LD_STRING ,
60882: STR
60883: PUSH
60884: LD_VAR 0 3
60888: PUSH
60889: LD_VAR 0 2
60893: ARRAY
60894: PUSH
60895: LD_INT 3
60897: ARRAY
60898: STR
60899: PUSH
60900: LD_STRING ,
60902: STR
60903: PUSH
60904: LD_VAR 0 3
60908: PUSH
60909: LD_VAR 0 2
60913: ARRAY
60914: PUSH
60915: LD_INT 4
60917: ARRAY
60918: STR
60919: PUSH
60920: LD_STRING )
60922: STR
60923: PPUSH
60924: CALL_OW 559
60928: GO 60838
60930: POP
60931: POP
// end ; end ;
60932: LD_VAR 0 1
60936: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
60937: LD_INT 0
60939: PPUSH
// if HexInfo ( x , y ) = warehouse then
60940: LD_VAR 0 2
60944: PPUSH
60945: LD_VAR 0 3
60949: PPUSH
60950: CALL_OW 428
60954: PUSH
60955: LD_VAR 0 1
60959: EQUAL
60960: IFFALSE 60987
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
60962: LD_ADDR_EXP 61
60966: PUSH
60967: LD_EXP 61
60971: PPUSH
60972: LD_VAR 0 1
60976: PPUSH
60977: LD_INT 0
60979: PPUSH
60980: CALL_OW 1
60984: ST_TO_ADDR
60985: GO 61038
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
60987: LD_ADDR_EXP 61
60991: PUSH
60992: LD_EXP 61
60996: PPUSH
60997: LD_VAR 0 1
61001: PPUSH
61002: LD_VAR 0 1
61006: PPUSH
61007: CALL_OW 255
61011: PUSH
61012: LD_VAR 0 1
61016: PUSH
61017: LD_VAR 0 2
61021: PUSH
61022: LD_VAR 0 3
61026: PUSH
61027: EMPTY
61028: LIST
61029: LIST
61030: LIST
61031: LIST
61032: PPUSH
61033: CALL_OW 1
61037: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
61038: CALL 61047 0 0
// end ;
61042: LD_VAR 0 4
61046: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
61047: LD_INT 0
61049: PPUSH
61050: PPUSH
61051: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
61052: LD_STRING resetWarehouseGatheringPoints();
61054: PPUSH
61055: CALL_OW 559
// if warehouseGatheringPoints then
61059: LD_EXP 61
61063: IFFALSE 61189
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
61065: LD_ADDR_VAR 0 3
61069: PUSH
61070: LD_EXP 61
61074: PPUSH
61075: CALL 51362 0 1
61079: ST_TO_ADDR
// for i := 1 to list do
61080: LD_ADDR_VAR 0 2
61084: PUSH
61085: DOUBLE
61086: LD_INT 1
61088: DEC
61089: ST_TO_ADDR
61090: LD_VAR 0 3
61094: PUSH
61095: FOR_TO
61096: IFFALSE 61187
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
61098: LD_STRING setWarehouseGatheringPointXY(
61100: PUSH
61101: LD_VAR 0 3
61105: PUSH
61106: LD_VAR 0 2
61110: ARRAY
61111: PUSH
61112: LD_INT 1
61114: ARRAY
61115: STR
61116: PUSH
61117: LD_STRING ,
61119: STR
61120: PUSH
61121: LD_VAR 0 3
61125: PUSH
61126: LD_VAR 0 2
61130: ARRAY
61131: PUSH
61132: LD_INT 2
61134: ARRAY
61135: STR
61136: PUSH
61137: LD_STRING ,
61139: STR
61140: PUSH
61141: LD_VAR 0 3
61145: PUSH
61146: LD_VAR 0 2
61150: ARRAY
61151: PUSH
61152: LD_INT 3
61154: ARRAY
61155: STR
61156: PUSH
61157: LD_STRING ,
61159: STR
61160: PUSH
61161: LD_VAR 0 3
61165: PUSH
61166: LD_VAR 0 2
61170: ARRAY
61171: PUSH
61172: LD_INT 4
61174: ARRAY
61175: STR
61176: PUSH
61177: LD_STRING )
61179: STR
61180: PPUSH
61181: CALL_OW 559
61185: GO 61095
61187: POP
61188: POP
// end ; end ;
61189: LD_VAR 0 1
61193: RET
// function ParseMultiDataToLua ( ) ; var i ; begin
61194: LD_INT 0
61196: PPUSH
61197: PPUSH
// if not mpSidePositions then
61198: LD_EXP 7
61202: NOT
61203: IFFALSE 61207
// exit ;
61205: GO 61278
// result :=  ;
61207: LD_ADDR_VAR 0 1
61211: PUSH
61212: LD_STRING 
61214: ST_TO_ADDR
// for i := 1 to 8 do
61215: LD_ADDR_VAR 0 2
61219: PUSH
61220: DOUBLE
61221: LD_INT 1
61223: DEC
61224: ST_TO_ADDR
61225: LD_INT 8
61227: PUSH
61228: FOR_TO
61229: IFFALSE 61259
// begin result := result & mpSidePositions [ i ] & ; ;
61231: LD_ADDR_VAR 0 1
61235: PUSH
61236: LD_VAR 0 1
61240: PUSH
61241: LD_EXP 7
61245: PUSH
61246: LD_VAR 0 2
61250: ARRAY
61251: STR
61252: PUSH
61253: LD_STRING ;
61255: STR
61256: ST_TO_ADDR
// end ;
61257: GO 61228
61259: POP
61260: POP
// ToLua ( setMultiplayerRealPosition(" & result & "); ) ;
61261: LD_STRING setMultiplayerRealPosition("
61263: PUSH
61264: LD_VAR 0 1
61268: STR
61269: PUSH
61270: LD_STRING ");
61272: STR
61273: PPUSH
61274: CALL_OW 559
// end ;
61278: LD_VAR 0 1
61282: RET
