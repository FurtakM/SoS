// starting begin ResetFog ;
   0: CALL_OW 335
// InitMultiplayer ;
   4: CALL 2726 0 0
// InitMultiplayerSettings ;
   8: CALL 17 0 0
// StartMultiplayer ;
  12: CALL 3102 0 0
// end ; end_of_file
  16: END
// export function InitMultiplayerSettings ; begin
  17: LD_INT 0
  19: PPUSH
// mpGameSettingsKeys := [ 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 0 , 0 , 1 , 0 , 0 , 1 ] ;
  20: LD_ADDR_EXP 4
  24: PUSH
  25: LD_INT 1
  27: PUSH
  28: LD_INT 1
  30: PUSH
  31: LD_INT 1
  33: PUSH
  34: LD_INT 1
  36: PUSH
  37: LD_INT 1
  39: PUSH
  40: LD_INT 1
  42: PUSH
  43: LD_INT 1
  45: PUSH
  46: LD_INT 1
  48: PUSH
  49: LD_INT 1
  51: PUSH
  52: LD_INT 1
  54: PUSH
  55: LD_INT 1
  57: PUSH
  58: LD_INT 1
  60: PUSH
  61: LD_INT 1
  63: PUSH
  64: LD_INT 1
  66: PUSH
  67: LD_INT 1
  69: PUSH
  70: LD_INT 0
  72: PUSH
  73: LD_INT 0
  75: PUSH
  76: LD_INT 1
  78: PUSH
  79: LD_INT 0
  81: PUSH
  82: LD_INT 0
  84: PUSH
  85: LD_INT 1
  87: PUSH
  88: EMPTY
  89: LIST
  90: LIST
  91: LIST
  92: LIST
  93: LIST
  94: LIST
  95: LIST
  96: LIST
  97: LIST
  98: LIST
  99: LIST
 100: LIST
 101: LIST
 102: LIST
 103: LIST
 104: LIST
 105: LIST
 106: LIST
 107: LIST
 108: LIST
 109: LIST
 110: ST_TO_ADDR
// mpGameSettingsValues := [ [ 0 , 1 , 2 ] , [ 9 , 12 , 15 , 24 ] , [ 1 , 3 , 5 , 7 ] , [ [ 0 , 0 , 0 ] , [ 100 , 30 , 0 ] , [ 200 , 75 , 10 ] , [ 500 , 150 , 30 ] ] , [ 1 , 2 , 3 , 4 ] , [ 0 , 1 , 2 ] , [ 0 , 1 , 2 ] , [ 250 , 350 , 500 , 1000 , 2000 ] , [ 0 , 2 ] , [ 0 , 5 5$00 , 10 10$00 , 15 15$00 , 20 20$00 , 30 30$00 ] , [ 0 , 1 ] , [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] , [ 0 , 1 ] , [ 0 , 6 6$30 , 3 3$30 ] , [ 0 , 2 , 4 , 6 ] , [ ] , [ ] , [ 0 , 1 , 15 15$0 , 25 25$0 , 30 30$0 , 45 45$0 , 60 60$0 , 90 90$0 , 100 100$0 , 120 120$0 , 180 180$0 ] , [ ] , [ ] , [ 0 , 3 3$0 , 5 5$0 , 8 8$0 , 10 10$0 , 12 12$0 , 15 15$0 , 20 20$0 , 30 30$0 ] ] ;
 111: LD_ADDR_EXP 5
 115: PUSH
 116: LD_INT 0
 118: PUSH
 119: LD_INT 1
 121: PUSH
 122: LD_INT 2
 124: PUSH
 125: EMPTY
 126: LIST
 127: LIST
 128: LIST
 129: PUSH
 130: LD_INT 9
 132: PUSH
 133: LD_INT 12
 135: PUSH
 136: LD_INT 15
 138: PUSH
 139: LD_INT 24
 141: PUSH
 142: EMPTY
 143: LIST
 144: LIST
 145: LIST
 146: LIST
 147: PUSH
 148: LD_INT 1
 150: PUSH
 151: LD_INT 3
 153: PUSH
 154: LD_INT 5
 156: PUSH
 157: LD_INT 7
 159: PUSH
 160: EMPTY
 161: LIST
 162: LIST
 163: LIST
 164: LIST
 165: PUSH
 166: LD_INT 0
 168: PUSH
 169: LD_INT 0
 171: PUSH
 172: LD_INT 0
 174: PUSH
 175: EMPTY
 176: LIST
 177: LIST
 178: LIST
 179: PUSH
 180: LD_INT 100
 182: PUSH
 183: LD_INT 30
 185: PUSH
 186: LD_INT 0
 188: PUSH
 189: EMPTY
 190: LIST
 191: LIST
 192: LIST
 193: PUSH
 194: LD_INT 200
 196: PUSH
 197: LD_INT 75
 199: PUSH
 200: LD_INT 10
 202: PUSH
 203: EMPTY
 204: LIST
 205: LIST
 206: LIST
 207: PUSH
 208: LD_INT 500
 210: PUSH
 211: LD_INT 150
 213: PUSH
 214: LD_INT 30
 216: PUSH
 217: EMPTY
 218: LIST
 219: LIST
 220: LIST
 221: PUSH
 222: EMPTY
 223: LIST
 224: LIST
 225: LIST
 226: LIST
 227: PUSH
 228: LD_INT 1
 230: PUSH
 231: LD_INT 2
 233: PUSH
 234: LD_INT 3
 236: PUSH
 237: LD_INT 4
 239: PUSH
 240: EMPTY
 241: LIST
 242: LIST
 243: LIST
 244: LIST
 245: PUSH
 246: LD_INT 0
 248: PUSH
 249: LD_INT 1
 251: PUSH
 252: LD_INT 2
 254: PUSH
 255: EMPTY
 256: LIST
 257: LIST
 258: LIST
 259: PUSH
 260: LD_INT 0
 262: PUSH
 263: LD_INT 1
 265: PUSH
 266: LD_INT 2
 268: PUSH
 269: EMPTY
 270: LIST
 271: LIST
 272: LIST
 273: PUSH
 274: LD_INT 250
 276: PUSH
 277: LD_INT 350
 279: PUSH
 280: LD_INT 500
 282: PUSH
 283: LD_INT 1000
 285: PUSH
 286: LD_INT 2000
 288: PUSH
 289: EMPTY
 290: LIST
 291: LIST
 292: LIST
 293: LIST
 294: LIST
 295: PUSH
 296: LD_INT 0
 298: PUSH
 299: LD_INT 2
 301: PUSH
 302: EMPTY
 303: LIST
 304: LIST
 305: PUSH
 306: LD_INT 0
 308: PUSH
 309: LD_INT 10500
 311: PUSH
 312: LD_INT 21000
 314: PUSH
 315: LD_INT 31500
 317: PUSH
 318: LD_INT 42000
 320: PUSH
 321: LD_INT 63000
 323: PUSH
 324: EMPTY
 325: LIST
 326: LIST
 327: LIST
 328: LIST
 329: LIST
 330: LIST
 331: PUSH
 332: LD_INT 0
 334: PUSH
 335: LD_INT 1
 337: PUSH
 338: EMPTY
 339: LIST
 340: LIST
 341: PUSH
 342: LD_INT 1
 344: NEG
 345: PUSH
 346: LD_INT 350
 348: PUSH
 349: LD_INT 700
 351: PUSH
 352: LD_INT 1400
 354: PUSH
 355: LD_INT 0
 357: PUSH
 358: EMPTY
 359: LIST
 360: LIST
 361: LIST
 362: LIST
 363: LIST
 364: PUSH
 365: LD_INT 0
 367: PUSH
 368: LD_INT 1
 370: PUSH
 371: EMPTY
 372: LIST
 373: LIST
 374: PUSH
 375: LD_INT 0
 377: PUSH
 378: LD_INT 13650
 380: PUSH
 381: LD_INT 7350
 383: PUSH
 384: EMPTY
 385: LIST
 386: LIST
 387: LIST
 388: PUSH
 389: LD_INT 0
 391: PUSH
 392: LD_INT 2
 394: PUSH
 395: LD_INT 4
 397: PUSH
 398: LD_INT 6
 400: PUSH
 401: EMPTY
 402: LIST
 403: LIST
 404: LIST
 405: LIST
 406: PUSH
 407: EMPTY
 408: PUSH
 409: EMPTY
 410: PUSH
 411: LD_INT 0
 413: PUSH
 414: LD_INT 1
 416: PUSH
 417: LD_INT 31500
 419: PUSH
 420: LD_INT 52500
 422: PUSH
 423: LD_INT 63000
 425: PUSH
 426: LD_INT 94500
 428: PUSH
 429: LD_INT 126000
 431: PUSH
 432: LD_INT 189000
 434: PUSH
 435: LD_INT 210000
 437: PUSH
 438: LD_INT 252000
 440: PUSH
 441: LD_INT 378000
 443: PUSH
 444: EMPTY
 445: LIST
 446: LIST
 447: LIST
 448: LIST
 449: LIST
 450: LIST
 451: LIST
 452: LIST
 453: LIST
 454: LIST
 455: LIST
 456: PUSH
 457: EMPTY
 458: PUSH
 459: EMPTY
 460: PUSH
 461: LD_INT 0
 463: PUSH
 464: LD_INT 6300
 466: PUSH
 467: LD_INT 10500
 469: PUSH
 470: LD_INT 16800
 472: PUSH
 473: LD_INT 21000
 475: PUSH
 476: LD_INT 25200
 478: PUSH
 479: LD_INT 31500
 481: PUSH
 482: LD_INT 42000
 484: PUSH
 485: LD_INT 63000
 487: PUSH
 488: EMPTY
 489: LIST
 490: LIST
 491: LIST
 492: LIST
 493: LIST
 494: LIST
 495: LIST
 496: LIST
 497: LIST
 498: PUSH
 499: EMPTY
 500: LIST
 501: LIST
 502: LIST
 503: LIST
 504: LIST
 505: LIST
 506: LIST
 507: LIST
 508: LIST
 509: LIST
 510: LIST
 511: LIST
 512: LIST
 513: LIST
 514: LIST
 515: LIST
 516: LIST
 517: LIST
 518: LIST
 519: LIST
 520: LIST
 521: ST_TO_ADDR
// mpGameSettings := [ 2 , 15 , 4 , [ 100 , 30 , 0 ] , 3 , 1 , 2 , 250 , 2 , 5 5$00 , 1 , 0 0$20 , 1 , 0 0$20 , 3 , 0 , 0 , 15 15$0 , 0 , 0 , 3 3$0 ] ;
 522: LD_ADDR_EXP 6
 526: PUSH
 527: LD_INT 2
 529: PUSH
 530: LD_INT 15
 532: PUSH
 533: LD_INT 4
 535: PUSH
 536: LD_INT 100
 538: PUSH
 539: LD_INT 30
 541: PUSH
 542: LD_INT 0
 544: PUSH
 545: EMPTY
 546: LIST
 547: LIST
 548: LIST
 549: PUSH
 550: LD_INT 3
 552: PUSH
 553: LD_INT 1
 555: PUSH
 556: LD_INT 2
 558: PUSH
 559: LD_INT 250
 561: PUSH
 562: LD_INT 2
 564: PUSH
 565: LD_INT 10500
 567: PUSH
 568: LD_INT 1
 570: PUSH
 571: LD_INT 700
 573: PUSH
 574: LD_INT 1
 576: PUSH
 577: LD_INT 700
 579: PUSH
 580: LD_INT 3
 582: PUSH
 583: LD_INT 0
 585: PUSH
 586: LD_INT 0
 588: PUSH
 589: LD_INT 31500
 591: PUSH
 592: LD_INT 0
 594: PUSH
 595: LD_INT 0
 597: PUSH
 598: LD_INT 6300
 600: PUSH
 601: EMPTY
 602: LIST
 603: LIST
 604: LIST
 605: LIST
 606: LIST
 607: LIST
 608: LIST
 609: LIST
 610: LIST
 611: LIST
 612: LIST
 613: LIST
 614: LIST
 615: LIST
 616: LIST
 617: LIST
 618: LIST
 619: LIST
 620: LIST
 621: LIST
 622: LIST
 623: ST_TO_ADDR
// mpGameType := GameTypeNormal ;
 624: LD_ADDR_EXP 3
 628: PUSH
 629: LD_INT 1
 631: ST_TO_ADDR
// your_side := 1 ;
 632: LD_ADDR_OWVAR 2
 636: PUSH
 637: LD_INT 1
 639: ST_TO_ADDR
// mpSidePositions := [ 1 , 2 , 3 , 4 , 5 , 6 , 0 , 0 ] ;
 640: LD_ADDR_EXP 7
 644: PUSH
 645: LD_INT 1
 647: PUSH
 648: LD_INT 2
 650: PUSH
 651: LD_INT 3
 653: PUSH
 654: LD_INT 4
 656: PUSH
 657: LD_INT 5
 659: PUSH
 660: LD_INT 6
 662: PUSH
 663: LD_INT 0
 665: PUSH
 666: LD_INT 0
 668: PUSH
 669: EMPTY
 670: LIST
 671: LIST
 672: LIST
 673: LIST
 674: LIST
 675: LIST
 676: LIST
 677: LIST
 678: ST_TO_ADDR
// mpSideTeams := [ 1 , 1 , 1 , 2 , 2 , 2 , 0 , 0 ] ;
 679: LD_ADDR_EXP 8
 683: PUSH
 684: LD_INT 1
 686: PUSH
 687: LD_INT 1
 689: PUSH
 690: LD_INT 1
 692: PUSH
 693: LD_INT 2
 695: PUSH
 696: LD_INT 2
 698: PUSH
 699: LD_INT 2
 701: PUSH
 702: LD_INT 0
 704: PUSH
 705: LD_INT 0
 707: PUSH
 708: EMPTY
 709: LIST
 710: LIST
 711: LIST
 712: LIST
 713: LIST
 714: LIST
 715: LIST
 716: LIST
 717: ST_TO_ADDR
// mpSideNations := [ 1 , 1 , 1 , 2 , 2 , 2 , 0 , 0 ] ;
 718: LD_ADDR_EXP 9
 722: PUSH
 723: LD_INT 1
 725: PUSH
 726: LD_INT 1
 728: PUSH
 729: LD_INT 1
 731: PUSH
 732: LD_INT 2
 734: PUSH
 735: LD_INT 2
 737: PUSH
 738: LD_INT 2
 740: PUSH
 741: LD_INT 0
 743: PUSH
 744: LD_INT 0
 746: PUSH
 747: EMPTY
 748: LIST
 749: LIST
 750: LIST
 751: LIST
 752: LIST
 753: LIST
 754: LIST
 755: LIST
 756: ST_TO_ADDR
// mpTeams := [ [ 1 , 2 , 3 ] , [ 4 , 5 , 6 ] ] ;
 757: LD_ADDR_EXP 10
 761: PUSH
 762: LD_INT 1
 764: PUSH
 765: LD_INT 2
 767: PUSH
 768: LD_INT 3
 770: PUSH
 771: EMPTY
 772: LIST
 773: LIST
 774: LIST
 775: PUSH
 776: LD_INT 4
 778: PUSH
 779: LD_INT 5
 781: PUSH
 782: LD_INT 6
 784: PUSH
 785: EMPTY
 786: LIST
 787: LIST
 788: LIST
 789: PUSH
 790: EMPTY
 791: LIST
 792: LIST
 793: ST_TO_ADDR
// mpTeamGame := true ;
 794: LD_ADDR_EXP 11
 798: PUSH
 799: LD_INT 1
 801: ST_TO_ADDR
// mpMapSize := [ 160 , 120 ] ;
 802: LD_ADDR_EXP 29
 806: PUSH
 807: LD_INT 160
 809: PUSH
 810: LD_INT 120
 812: PUSH
 813: EMPTY
 814: LIST
 815: LIST
 816: ST_TO_ADDR
// end ;
 817: LD_VAR 0 1
 821: RET
// export kingArea , kingCamArea ; export function GetMultiplayerMapData ( gameType ) ; var i , all , hasOil , hasSib , baseLevel , startPos ; begin
 822: LD_INT 0
 824: PPUSH
 825: PPUSH
 826: PPUSH
 827: PPUSH
 828: PPUSH
 829: PPUSH
 830: PPUSH
// mpBuildUpAreas := [ BaseArea1 , BaseArea2 , BaseArea3 , BaseArea4 , BaseArea5 , BaseArea6 ] ;
 831: LD_ADDR_EXP 19
 835: PUSH
 836: LD_INT 1
 838: PUSH
 839: LD_INT 2
 841: PUSH
 842: LD_INT 3
 844: PUSH
 845: LD_INT 4
 847: PUSH
 848: LD_INT 5
 850: PUSH
 851: LD_INT 6
 853: PUSH
 854: EMPTY
 855: LIST
 856: LIST
 857: LIST
 858: LIST
 859: LIST
 860: LIST
 861: ST_TO_ADDR
// mpMarkedAreas := [ Center1 , Center2 ] union mpBuildUpAreas ;
 862: LD_ADDR_EXP 18
 866: PUSH
 867: LD_INT 7
 869: PUSH
 870: LD_INT 8
 872: PUSH
 873: EMPTY
 874: LIST
 875: LIST
 876: PUSH
 877: LD_EXP 19
 881: UNION
 882: ST_TO_ADDR
// if gameType = GameTypeSurvival then
 883: LD_VAR 0 1
 887: PUSH
 888: LD_INT 2
 890: EQUAL
 891: IFFALSE 903
// baseLevel := 1 else
 893: LD_ADDR_VAR 0 7
 897: PUSH
 898: LD_INT 1
 900: ST_TO_ADDR
 901: GO 917
// baseLevel := mpGameSettings [ 1 ] ;
 903: LD_ADDR_VAR 0 7
 907: PUSH
 908: LD_EXP 6
 912: PUSH
 913: LD_INT 1
 915: ARRAY
 916: ST_TO_ADDR
// mpPeopleAmount := mpGameSettings [ 2 ] ;
 917: LD_ADDR_EXP 24
 921: PUSH
 922: LD_EXP 6
 926: PUSH
 927: LD_INT 2
 929: ARRAY
 930: ST_TO_ADDR
// mpPeopleSkill := mpGameSettings [ 3 ] ;
 931: LD_ADDR_EXP 25
 935: PUSH
 936: LD_EXP 6
 940: PUSH
 941: LD_INT 3
 943: ARRAY
 944: ST_TO_ADDR
// mpStartingResources := mpGameSettings [ 4 ] ;
 945: LD_ADDR_EXP 15
 949: PUSH
 950: LD_EXP 6
 954: PUSH
 955: LD_INT 4
 957: ARRAY
 958: ST_TO_ADDR
// mpShipments := mpGameSettings [ 5 ] ;
 959: LD_ADDR_EXP 27
 963: PUSH
 964: LD_EXP 6
 968: PUSH
 969: LD_INT 5
 971: ARRAY
 972: ST_TO_ADDR
// hasOil := mpGameSettings [ 6 ] > 0 ;
 973: LD_ADDR_VAR 0 5
 977: PUSH
 978: LD_EXP 6
 982: PUSH
 983: LD_INT 6
 985: ARRAY
 986: PUSH
 987: LD_INT 0
 989: GREATER
 990: ST_TO_ADDR
// hasSib := mpGameSettings [ 7 ] > 0 ;
 991: LD_ADDR_VAR 0 6
 995: PUSH
 996: LD_EXP 6
1000: PUSH
1001: LD_INT 7
1003: ARRAY
1004: PUSH
1005: LD_INT 0
1007: GREATER
1008: ST_TO_ADDR
// mpKingArea := 0 ;
1009: LD_ADDR_EXP 34
1013: PUSH
1014: LD_INT 0
1016: ST_TO_ADDR
// mpPoints := 0 ;
1017: LD_ADDR_EXP 35
1021: PUSH
1022: LD_INT 0
1024: ST_TO_ADDR
// mpEmissions := 0 ;
1025: LD_ADDR_EXP 37
1029: PUSH
1030: LD_INT 0
1032: ST_TO_ADDR
// kingArea := 0 ;
1033: LD_ADDR_EXP 1
1037: PUSH
1038: LD_INT 0
1040: ST_TO_ADDR
// kingCamArea := 0 ;
1041: LD_ADDR_EXP 2
1045: PUSH
1046: LD_INT 0
1048: ST_TO_ADDR
// if mpGameSettings [ 9 ] then
1049: LD_EXP 6
1053: PUSH
1054: LD_INT 9
1056: ARRAY
1057: IFFALSE 1189
// begin mpVehicles := [ [ [ us_light_wheeled , engine_combustion , control_manual , us_machine_gun ] , [ us_light_wheeled , engine_combustion , control_manual , us_light_gun ] ] , [ [ ar_light_trike , engine_combustion , control_manual , ar_double_machine_gun ] , [ ar_light_trike , engine_combustion , control_manual , ar_light_gun ] ] , [ [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun ] , [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun ] ] ] ;
1059: LD_ADDR_EXP 36
1063: PUSH
1064: LD_INT 1
1066: PUSH
1067: LD_INT 1
1069: PUSH
1070: LD_INT 1
1072: PUSH
1073: LD_INT 2
1075: PUSH
1076: EMPTY
1077: LIST
1078: LIST
1079: LIST
1080: LIST
1081: PUSH
1082: LD_INT 1
1084: PUSH
1085: LD_INT 1
1087: PUSH
1088: LD_INT 1
1090: PUSH
1091: LD_INT 3
1093: PUSH
1094: EMPTY
1095: LIST
1096: LIST
1097: LIST
1098: LIST
1099: PUSH
1100: EMPTY
1101: LIST
1102: LIST
1103: PUSH
1104: LD_INT 12
1106: PUSH
1107: LD_INT 1
1109: PUSH
1110: LD_INT 1
1112: PUSH
1113: LD_INT 24
1115: PUSH
1116: EMPTY
1117: LIST
1118: LIST
1119: LIST
1120: LIST
1121: PUSH
1122: LD_INT 12
1124: PUSH
1125: LD_INT 1
1127: PUSH
1128: LD_INT 1
1130: PUSH
1131: LD_INT 23
1133: PUSH
1134: EMPTY
1135: LIST
1136: LIST
1137: LIST
1138: LIST
1139: PUSH
1140: EMPTY
1141: LIST
1142: LIST
1143: PUSH
1144: LD_INT 21
1146: PUSH
1147: LD_INT 1
1149: PUSH
1150: LD_INT 1
1152: PUSH
1153: LD_INT 42
1155: PUSH
1156: EMPTY
1157: LIST
1158: LIST
1159: LIST
1160: LIST
1161: PUSH
1162: LD_INT 21
1164: PUSH
1165: LD_INT 1
1167: PUSH
1168: LD_INT 1
1170: PUSH
1171: LD_INT 42
1173: PUSH
1174: EMPTY
1175: LIST
1176: LIST
1177: LIST
1178: LIST
1179: PUSH
1180: EMPTY
1181: LIST
1182: LIST
1183: PUSH
1184: EMPTY
1185: LIST
1186: LIST
1187: LIST
1188: ST_TO_ADDR
// end ; mpSharedVision := mpGameSettings [ 11 ] ;
1189: LD_ADDR_EXP 16
1193: PUSH
1194: LD_EXP 6
1198: PUSH
1199: LD_INT 11
1201: ARRAY
1202: ST_TO_ADDR
// mpBattleFlag := mpGameSettings [ 12 ] ;
1203: LD_ADDR_EXP 22
1207: PUSH
1208: LD_EXP 6
1212: PUSH
1213: LD_INT 12
1215: ARRAY
1216: ST_TO_ADDR
// mpSibDetection := mpGameSettings [ 13 ] ;
1217: LD_ADDR_EXP 26
1221: PUSH
1222: LD_EXP 6
1226: PUSH
1227: LD_INT 13
1229: ARRAY
1230: ST_TO_ADDR
// mpRespawn := mpGameSettings [ 14 ] ;
1231: LD_ADDR_EXP 33
1235: PUSH
1236: LD_EXP 6
1240: PUSH
1241: LD_INT 14
1243: ARRAY
1244: ST_TO_ADDR
// mpApemans := mpGameSettings [ 15 ] ;
1245: LD_ADDR_EXP 30
1249: PUSH
1250: LD_EXP 6
1254: PUSH
1255: LD_INT 15
1257: ARRAY
1258: ST_TO_ADDR
// mpSibBomb := mpGameSettings [ 18 ] ;
1259: LD_ADDR_EXP 28
1263: PUSH
1264: LD_EXP 6
1268: PUSH
1269: LD_INT 18
1271: ARRAY
1272: ST_TO_ADDR
// mpBuildUpTime := mpGameSettings [ 21 ] ;
1273: LD_ADDR_EXP 20
1277: PUSH
1278: LD_EXP 6
1282: PUSH
1283: LD_INT 21
1285: ARRAY
1286: ST_TO_ADDR
// mpApemansArea := [ ApeArea1 , ApeArea2 , ApeArea3 , ApeArea4 , ApeArea5 , ApeArea6 ] ;
1287: LD_ADDR_EXP 31
1291: PUSH
1292: LD_INT 9
1294: PUSH
1295: LD_INT 10
1297: PUSH
1298: LD_INT 11
1300: PUSH
1301: LD_INT 12
1303: PUSH
1304: LD_INT 13
1306: PUSH
1307: LD_INT 14
1309: PUSH
1310: EMPTY
1311: LIST
1312: LIST
1313: LIST
1314: LIST
1315: LIST
1316: LIST
1317: ST_TO_ADDR
// startPos := [ GetBuildingFromArea ( DepotArea1 , 1 ) , GetBuildingFromArea ( DepotArea2 , 1 ) , GetBuildingFromArea ( DepotArea3 , 1 ) , GetBuildingFromArea ( DepotArea4 , 4 ) , GetBuildingFromArea ( DepotArea5 , 4 ) , GetBuildingFromArea ( DepotArea6 , 4 ) ] ;
1318: LD_ADDR_VAR 0 8
1322: PUSH
1323: LD_INT 15
1325: PPUSH
1326: LD_INT 1
1328: PPUSH
1329: CALL 52863 0 2
1333: PUSH
1334: LD_INT 16
1336: PPUSH
1337: LD_INT 1
1339: PPUSH
1340: CALL 52863 0 2
1344: PUSH
1345: LD_INT 17
1347: PPUSH
1348: LD_INT 1
1350: PPUSH
1351: CALL 52863 0 2
1355: PUSH
1356: LD_INT 18
1358: PPUSH
1359: LD_INT 4
1361: PPUSH
1362: CALL 52863 0 2
1366: PUSH
1367: LD_INT 19
1369: PPUSH
1370: LD_INT 4
1372: PPUSH
1373: CALL 52863 0 2
1377: PUSH
1378: LD_INT 20
1380: PPUSH
1381: LD_INT 4
1383: PPUSH
1384: CALL 52863 0 2
1388: PUSH
1389: EMPTY
1390: LIST
1391: LIST
1392: LIST
1393: LIST
1394: LIST
1395: LIST
1396: ST_TO_ADDR
// for i := 1 to Count ( startPos ) do
1397: LD_ADDR_VAR 0 3
1401: PUSH
1402: DOUBLE
1403: LD_INT 1
1405: DEC
1406: ST_TO_ADDR
1407: LD_VAR 0 8
1411: PPUSH
1412: CALL 12212 0 1
1416: PUSH
1417: FOR_TO
1418: IFFALSE 1522
// mpStartPos := Replace ( mpStartPos , i , [ ShiftX ( startPos [ i ] [ 1 ] , startPos [ i ] [ 3 ] , 10 ) , ShiftY ( startPos [ i ] [ 2 ] , startPos [ i ] [ 3 ] , 10 ) ] ) ;
1420: LD_ADDR_EXP 21
1424: PUSH
1425: LD_EXP 21
1429: PPUSH
1430: LD_VAR 0 3
1434: PPUSH
1435: LD_VAR 0 8
1439: PUSH
1440: LD_VAR 0 3
1444: ARRAY
1445: PUSH
1446: LD_INT 1
1448: ARRAY
1449: PPUSH
1450: LD_VAR 0 8
1454: PUSH
1455: LD_VAR 0 3
1459: ARRAY
1460: PUSH
1461: LD_INT 3
1463: ARRAY
1464: PPUSH
1465: LD_INT 10
1467: PPUSH
1468: CALL_OW 272
1472: PUSH
1473: LD_VAR 0 8
1477: PUSH
1478: LD_VAR 0 3
1482: ARRAY
1483: PUSH
1484: LD_INT 2
1486: ARRAY
1487: PPUSH
1488: LD_VAR 0 8
1492: PUSH
1493: LD_VAR 0 3
1497: ARRAY
1498: PUSH
1499: LD_INT 3
1501: ARRAY
1502: PPUSH
1503: LD_INT 10
1505: PPUSH
1506: CALL_OW 273
1510: PUSH
1511: EMPTY
1512: LIST
1513: LIST
1514: PPUSH
1515: CALL_OW 1
1519: ST_TO_ADDR
1520: GO 1417
1522: POP
1523: POP
// if hasOil then
1524: LD_VAR 0 5
1528: IFFALSE 1639
// begin all := ( mpGameSettings [ 6 ] = 2 ) ;
1530: LD_ADDR_VAR 0 4
1534: PUSH
1535: LD_EXP 6
1539: PUSH
1540: LD_INT 6
1542: ARRAY
1543: PUSH
1544: LD_INT 2
1546: EQUAL
1547: ST_TO_ADDR
// mpOilDeposits := [ GetSourcesFromArea ( OilArea1 , all ) , GetSourcesFromArea ( OilArea2 , all ) , GetSourcesFromArea ( OilArea3 , all ) , GetSourcesFromArea ( OilArea4 , all ) , GetSourcesFromArea ( OilArea5 , all ) , GetSourcesFromArea ( OilArea6 , all ) ] ;
1548: LD_ADDR_EXP 12
1552: PUSH
1553: LD_INT 21
1555: PPUSH
1556: LD_VAR 0 4
1560: PPUSH
1561: CALL 52696 0 2
1565: PUSH
1566: LD_INT 22
1568: PPUSH
1569: LD_VAR 0 4
1573: PPUSH
1574: CALL 52696 0 2
1578: PUSH
1579: LD_INT 23
1581: PPUSH
1582: LD_VAR 0 4
1586: PPUSH
1587: CALL 52696 0 2
1591: PUSH
1592: LD_INT 24
1594: PPUSH
1595: LD_VAR 0 4
1599: PPUSH
1600: CALL 52696 0 2
1604: PUSH
1605: LD_INT 25
1607: PPUSH
1608: LD_VAR 0 4
1612: PPUSH
1613: CALL 52696 0 2
1617: PUSH
1618: LD_INT 26
1620: PPUSH
1621: LD_VAR 0 4
1625: PPUSH
1626: CALL 52696 0 2
1630: PUSH
1631: EMPTY
1632: LIST
1633: LIST
1634: LIST
1635: LIST
1636: LIST
1637: LIST
1638: ST_TO_ADDR
// end ; if hasSib then
1639: LD_VAR 0 6
1643: IFFALSE 1754
// begin all := ( mpGameSettings [ 7 ] = 2 ) ;
1645: LD_ADDR_VAR 0 4
1649: PUSH
1650: LD_EXP 6
1654: PUSH
1655: LD_INT 7
1657: ARRAY
1658: PUSH
1659: LD_INT 2
1661: EQUAL
1662: ST_TO_ADDR
// mpSibDeposits := [ GetSourcesFromArea ( SibArea1 , all ) , GetSourcesFromArea ( SibArea2 , all ) , GetSourcesFromArea ( SibArea3 , all ) , GetSourcesFromArea ( SibArea4 , all ) , GetSourcesFromArea ( SibArea5 , all ) , GetSourcesFromArea ( SibArea6 , all ) ] ;
1663: LD_ADDR_EXP 13
1667: PUSH
1668: LD_INT 27
1670: PPUSH
1671: LD_VAR 0 4
1675: PPUSH
1676: CALL 52696 0 2
1680: PUSH
1681: LD_INT 28
1683: PPUSH
1684: LD_VAR 0 4
1688: PPUSH
1689: CALL 52696 0 2
1693: PUSH
1694: LD_INT 29
1696: PPUSH
1697: LD_VAR 0 4
1701: PPUSH
1702: CALL 52696 0 2
1706: PUSH
1707: LD_INT 30
1709: PPUSH
1710: LD_VAR 0 4
1714: PPUSH
1715: CALL 52696 0 2
1719: PUSH
1720: LD_INT 31
1722: PPUSH
1723: LD_VAR 0 4
1727: PPUSH
1728: CALL 52696 0 2
1732: PUSH
1733: LD_INT 32
1735: PPUSH
1736: LD_VAR 0 4
1740: PPUSH
1741: CALL 52696 0 2
1745: PUSH
1746: EMPTY
1747: LIST
1748: LIST
1749: LIST
1750: LIST
1751: LIST
1752: LIST
1753: ST_TO_ADDR
// end ; if baseLevel >= 1 then
1754: LD_VAR 0 7
1758: PUSH
1759: LD_INT 1
1761: GREATEREQUAL
1762: IFFALSE 1774
// mpDepots := startPos ;
1764: LD_ADDR_EXP 14
1768: PUSH
1769: LD_VAR 0 8
1773: ST_TO_ADDR
// if baseLevel >= 2 then
1774: LD_VAR 0 7
1778: PUSH
1779: LD_INT 2
1781: GREATEREQUAL
1782: IFFALSE 2097
// begin mpBuildings := [ [ b_breastwork ^ GetBuildingFromArea ( BunArea1a , 4 ) , b_breastwork ^ GetBuildingFromArea ( BunArea1b , 4 ) , b_armoury ^ GetBuildingFromArea ( ArmArea1 , 4 ) ] , [ b_breastwork ^ GetBuildingFromArea ( BunArea2a , 4 ) , b_breastwork ^ GetBuildingFromArea ( BunArea2b , 4 ) , b_armoury ^ GetBuildingFromArea ( ArmArea2 , 4 ) ] , [ b_breastwork ^ GetBuildingFromArea ( BunArea3a , 4 ) , b_breastwork ^ GetBuildingFromArea ( BunArea3b , 4 ) , b_armoury ^ GetBuildingFromArea ( ArmArea3 , 4 ) ] , [ b_breastwork ^ GetBuildingFromArea ( BunArea4a , 1 ) , b_breastwork ^ GetBuildingFromArea ( BunArea4b , 1 ) , b_armoury ^ GetBuildingFromArea ( ArmArea4 , 1 ) ] , [ b_breastwork ^ GetBuildingFromArea ( BunArea5a , 1 ) , b_breastwork ^ GetBuildingFromArea ( BunArea5b , 1 ) , b_armoury ^ GetBuildingFromArea ( ArmArea5 , 1 ) ] , [ b_breastwork ^ GetBuildingFromArea ( BunArea6a , 1 ) , b_breastwork ^ GetBuildingFromArea ( BunArea6b , 1 ) , b_armoury ^ GetBuildingFromArea ( ArmArea6 , 1 ) ] ] ;
1784: LD_ADDR_EXP 17
1788: PUSH
1789: LD_INT 31
1791: PUSH
1792: LD_INT 33
1794: PPUSH
1795: LD_INT 4
1797: PPUSH
1798: CALL 52863 0 2
1802: ADD
1803: PUSH
1804: LD_INT 31
1806: PUSH
1807: LD_INT 34
1809: PPUSH
1810: LD_INT 4
1812: PPUSH
1813: CALL 52863 0 2
1817: ADD
1818: PUSH
1819: LD_INT 4
1821: PUSH
1822: LD_INT 35
1824: PPUSH
1825: LD_INT 4
1827: PPUSH
1828: CALL 52863 0 2
1832: ADD
1833: PUSH
1834: EMPTY
1835: LIST
1836: LIST
1837: LIST
1838: PUSH
1839: LD_INT 31
1841: PUSH
1842: LD_INT 36
1844: PPUSH
1845: LD_INT 4
1847: PPUSH
1848: CALL 52863 0 2
1852: ADD
1853: PUSH
1854: LD_INT 31
1856: PUSH
1857: LD_INT 37
1859: PPUSH
1860: LD_INT 4
1862: PPUSH
1863: CALL 52863 0 2
1867: ADD
1868: PUSH
1869: LD_INT 4
1871: PUSH
1872: LD_INT 38
1874: PPUSH
1875: LD_INT 4
1877: PPUSH
1878: CALL 52863 0 2
1882: ADD
1883: PUSH
1884: EMPTY
1885: LIST
1886: LIST
1887: LIST
1888: PUSH
1889: LD_INT 31
1891: PUSH
1892: LD_INT 39
1894: PPUSH
1895: LD_INT 4
1897: PPUSH
1898: CALL 52863 0 2
1902: ADD
1903: PUSH
1904: LD_INT 31
1906: PUSH
1907: LD_INT 40
1909: PPUSH
1910: LD_INT 4
1912: PPUSH
1913: CALL 52863 0 2
1917: ADD
1918: PUSH
1919: LD_INT 4
1921: PUSH
1922: LD_INT 41
1924: PPUSH
1925: LD_INT 4
1927: PPUSH
1928: CALL 52863 0 2
1932: ADD
1933: PUSH
1934: EMPTY
1935: LIST
1936: LIST
1937: LIST
1938: PUSH
1939: LD_INT 31
1941: PUSH
1942: LD_INT 42
1944: PPUSH
1945: LD_INT 1
1947: PPUSH
1948: CALL 52863 0 2
1952: ADD
1953: PUSH
1954: LD_INT 31
1956: PUSH
1957: LD_INT 43
1959: PPUSH
1960: LD_INT 1
1962: PPUSH
1963: CALL 52863 0 2
1967: ADD
1968: PUSH
1969: LD_INT 4
1971: PUSH
1972: LD_INT 44
1974: PPUSH
1975: LD_INT 1
1977: PPUSH
1978: CALL 52863 0 2
1982: ADD
1983: PUSH
1984: EMPTY
1985: LIST
1986: LIST
1987: LIST
1988: PUSH
1989: LD_INT 31
1991: PUSH
1992: LD_INT 45
1994: PPUSH
1995: LD_INT 1
1997: PPUSH
1998: CALL 52863 0 2
2002: ADD
2003: PUSH
2004: LD_INT 31
2006: PUSH
2007: LD_INT 46
2009: PPUSH
2010: LD_INT 1
2012: PPUSH
2013: CALL 52863 0 2
2017: ADD
2018: PUSH
2019: LD_INT 4
2021: PUSH
2022: LD_INT 47
2024: PPUSH
2025: LD_INT 1
2027: PPUSH
2028: CALL 52863 0 2
2032: ADD
2033: PUSH
2034: EMPTY
2035: LIST
2036: LIST
2037: LIST
2038: PUSH
2039: LD_INT 31
2041: PUSH
2042: LD_INT 48
2044: PPUSH
2045: LD_INT 1
2047: PPUSH
2048: CALL 52863 0 2
2052: ADD
2053: PUSH
2054: LD_INT 31
2056: PUSH
2057: LD_INT 49
2059: PPUSH
2060: LD_INT 1
2062: PPUSH
2063: CALL 52863 0 2
2067: ADD
2068: PUSH
2069: LD_INT 4
2071: PUSH
2072: LD_INT 50
2074: PPUSH
2075: LD_INT 1
2077: PPUSH
2078: CALL 52863 0 2
2082: ADD
2083: PUSH
2084: EMPTY
2085: LIST
2086: LIST
2087: LIST
2088: PUSH
2089: EMPTY
2090: LIST
2091: LIST
2092: LIST
2093: LIST
2094: LIST
2095: LIST
2096: ST_TO_ADDR
// end ; end ;
2097: LD_VAR 0 2
2101: RET
// every 0 0$2 marked mpActive do var i , x , tmp , time , areas , normalTime , delayTime , maxTime ;
2102: GO 2104
2104: DISABLE
2105: LD_INT 0
2107: PPUSH
2108: PPUSH
2109: PPUSH
2110: PPUSH
2111: PPUSH
2112: PPUSH
2113: PPUSH
2114: PPUSH
// begin if not mpShipments then
2115: LD_EXP 27
2119: NOT
2120: IFFALSE 2124
// exit ;
2122: GO 2639
// case mpShipments of 1 :
2124: LD_EXP 27
2128: PUSH
2129: LD_INT 1
2131: DOUBLE
2132: EQUAL
2133: IFTRUE 2137
2135: GO 2172
2137: POP
// begin time := 0 0$30 ;
2138: LD_ADDR_VAR 0 4
2142: PUSH
2143: LD_INT 1050
2145: ST_TO_ADDR
// normalTime := 0 0$30 ;
2146: LD_ADDR_VAR 0 6
2150: PUSH
2151: LD_INT 1050
2153: ST_TO_ADDR
// maxTime := 1 1$20 ;
2154: LD_ADDR_VAR 0 8
2158: PUSH
2159: LD_INT 2800
2161: ST_TO_ADDR
// delayTime := 0 0$5 ;
2162: LD_ADDR_VAR 0 7
2166: PUSH
2167: LD_INT 175
2169: ST_TO_ADDR
// end ; 2 :
2170: GO 2302
2172: LD_INT 2
2174: DOUBLE
2175: EQUAL
2176: IFTRUE 2180
2178: GO 2215
2180: POP
// begin time := 0 0$25 ;
2181: LD_ADDR_VAR 0 4
2185: PUSH
2186: LD_INT 875
2188: ST_TO_ADDR
// normalTime := 0 0$25 ;
2189: LD_ADDR_VAR 0 6
2193: PUSH
2194: LD_INT 875
2196: ST_TO_ADDR
// maxTime := 1 1$10 ;
2197: LD_ADDR_VAR 0 8
2201: PUSH
2202: LD_INT 2450
2204: ST_TO_ADDR
// delayTime := 0 0$4 ;
2205: LD_ADDR_VAR 0 7
2209: PUSH
2210: LD_INT 140
2212: ST_TO_ADDR
// end ; 3 :
2213: GO 2302
2215: LD_INT 3
2217: DOUBLE
2218: EQUAL
2219: IFTRUE 2223
2221: GO 2258
2223: POP
// begin time := 0 0$20 ;
2224: LD_ADDR_VAR 0 4
2228: PUSH
2229: LD_INT 700
2231: ST_TO_ADDR
// normalTime := 0 0$20 ;
2232: LD_ADDR_VAR 0 6
2236: PUSH
2237: LD_INT 700
2239: ST_TO_ADDR
// maxTime := 1 1$00 ;
2240: LD_ADDR_VAR 0 8
2244: PUSH
2245: LD_INT 2100
2247: ST_TO_ADDR
// delayTime := 0 0$3 ;
2248: LD_ADDR_VAR 0 7
2252: PUSH
2253: LD_INT 105
2255: ST_TO_ADDR
// end ; 4 :
2256: GO 2302
2258: LD_INT 4
2260: DOUBLE
2261: EQUAL
2262: IFTRUE 2266
2264: GO 2301
2266: POP
// begin time := 0 0$15 ;
2267: LD_ADDR_VAR 0 4
2271: PUSH
2272: LD_INT 525
2274: ST_TO_ADDR
// normalTime := 0 0$15 ;
2275: LD_ADDR_VAR 0 6
2279: PUSH
2280: LD_INT 525
2282: ST_TO_ADDR
// maxTime := 0 0$55 ;
2283: LD_ADDR_VAR 0 8
2287: PUSH
2288: LD_INT 1925
2290: ST_TO_ADDR
// delayTime := 0 0$2 ;
2291: LD_ADDR_VAR 0 7
2295: PUSH
2296: LD_INT 70
2298: ST_TO_ADDR
// end ; end ;
2299: GO 2302
2301: POP
// tmp := [ BaseArea1 , BaseArea2 , BaseArea3 , BaseArea4 , BaseArea5 , BaseArea6 ] ;
2302: LD_ADDR_VAR 0 3
2306: PUSH
2307: LD_INT 1
2309: PUSH
2310: LD_INT 2
2312: PUSH
2313: LD_INT 3
2315: PUSH
2316: LD_INT 4
2318: PUSH
2319: LD_INT 5
2321: PUSH
2322: LD_INT 6
2324: PUSH
2325: EMPTY
2326: LIST
2327: LIST
2328: LIST
2329: LIST
2330: LIST
2331: LIST
2332: ST_TO_ADDR
// areas := [ Center1 , Center2 ] ;
2333: LD_ADDR_VAR 0 5
2337: PUSH
2338: LD_INT 7
2340: PUSH
2341: LD_INT 8
2343: PUSH
2344: EMPTY
2345: LIST
2346: LIST
2347: ST_TO_ADDR
// for i := 1 to 8 do
2348: LD_ADDR_VAR 0 1
2352: PUSH
2353: DOUBLE
2354: LD_INT 1
2356: DEC
2357: ST_TO_ADDR
2358: LD_INT 8
2360: PUSH
2361: FOR_TO
2362: IFFALSE 2409
// begin if not mpSidePositions [ i ] then
2364: LD_EXP 7
2368: PUSH
2369: LD_VAR 0 1
2373: ARRAY
2374: NOT
2375: IFFALSE 2379
// continue ;
2377: GO 2361
// areas := areas ^ tmp [ mpSidePositions [ i ] ] ;
2379: LD_ADDR_VAR 0 5
2383: PUSH
2384: LD_VAR 0 5
2388: PUSH
2389: LD_VAR 0 3
2393: PUSH
2394: LD_EXP 7
2398: PUSH
2399: LD_VAR 0 1
2403: ARRAY
2404: ARRAY
2405: ADD
2406: ST_TO_ADDR
// end ;
2407: GO 2361
2409: POP
2410: POP
// x := 1 ;
2411: LD_ADDR_VAR 0 2
2415: PUSH
2416: LD_INT 1
2418: ST_TO_ADDR
// repeat wait ( time ) ;
2419: LD_VAR 0 4
2423: PPUSH
2424: CALL_OW 67
// x := Inc ( x ) ;
2428: LD_ADDR_VAR 0 2
2432: PUSH
2433: LD_VAR 0 2
2437: PPUSH
2438: CALL 49517 0 1
2442: ST_TO_ADDR
// if x > 5 then
2443: LD_VAR 0 2
2447: PUSH
2448: LD_INT 5
2450: GREATER
2451: IFFALSE 2461
// x := 1 ;
2453: LD_ADDR_VAR 0 2
2457: PUSH
2458: LD_INT 1
2460: ST_TO_ADDR
// for i in areas do
2461: LD_ADDR_VAR 0 1
2465: PUSH
2466: LD_VAR 0 5
2470: PUSH
2471: FOR_IN
2472: IFFALSE 2511
// begin if GetResourceArea ( i , mat_cans ) < 20 then
2474: LD_VAR 0 1
2478: PPUSH
2479: LD_INT 1
2481: PPUSH
2482: CALL_OW 287
2486: PUSH
2487: LD_INT 20
2489: LESS
2490: IFFALSE 2509
// begin CreateCratesArea ( x , i , true ) ;
2492: LD_VAR 0 2
2496: PPUSH
2497: LD_VAR 0 1
2501: PPUSH
2502: LD_INT 1
2504: PPUSH
2505: CALL_OW 55
// end ; end ;
2509: GO 2471
2511: POP
2512: POP
// if GetResourceArea ( CenterArea , mat_cans ) = 0 then
2513: LD_INT 51
2515: PPUSH
2516: LD_INT 1
2518: PPUSH
2519: CALL_OW 287
2523: PUSH
2524: LD_INT 0
2526: EQUAL
2527: IFFALSE 2566
// begin for i := 1 to 3 do
2529: LD_ADDR_VAR 0 1
2533: PUSH
2534: DOUBLE
2535: LD_INT 1
2537: DEC
2538: ST_TO_ADDR
2539: LD_INT 3
2541: PUSH
2542: FOR_TO
2543: IFFALSE 2562
// CreateCratesArea ( x , CenterArea , true ) ;
2545: LD_VAR 0 2
2549: PPUSH
2550: LD_INT 51
2552: PPUSH
2553: LD_INT 1
2555: PPUSH
2556: CALL_OW 55
2560: GO 2542
2562: POP
2563: POP
// end else
2564: GO 2597
// if GetResourceArea ( CenterArea , mat_cans ) < 30 then
2566: LD_INT 51
2568: PPUSH
2569: LD_INT 1
2571: PPUSH
2572: CALL_OW 287
2576: PUSH
2577: LD_INT 30
2579: LESS
2580: IFFALSE 2597
// CreateCratesArea ( x , CenterArea , true ) ;
2582: LD_VAR 0 2
2586: PPUSH
2587: LD_INT 51
2589: PPUSH
2590: LD_INT 1
2592: PPUSH
2593: CALL_OW 55
// time := time + delayTime ;
2597: LD_ADDR_VAR 0 4
2601: PUSH
2602: LD_VAR 0 4
2606: PUSH
2607: LD_VAR 0 7
2611: PLUS
2612: ST_TO_ADDR
// if time > maxTime then
2613: LD_VAR 0 4
2617: PUSH
2618: LD_VAR 0 8
2622: GREATER
2623: IFFALSE 2635
// time := normalTime ;
2625: LD_ADDR_VAR 0 4
2629: PUSH
2630: LD_VAR 0 6
2634: ST_TO_ADDR
// until false ;
2635: LD_INT 0
2637: IFFALSE 2419
// end ; end_of_file
2639: PPOPN 8
2641: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
2642: LD_VAR 0 1
2646: PPUSH
2647: CALL 53661 0 1
// Multiplayer_UnitDestroyed ( un ) ;
2651: LD_VAR 0 1
2655: PPUSH
2656: CALL 7874 0 1
// end ;
2660: PPOPN 1
2662: END
// on UnitKamikazed ( un ) do begin SOS_UnitKamikazed ( un ) ;
2663: LD_VAR 0 1
2667: PPUSH
2668: CALL 53678 0 1
// end ;
2672: PPOPN 1
2674: END
// on BuildingComplete ( b ) do Multiplayer_BuildingComplete ( b ) ;
2675: LD_VAR 0 1
2679: PPUSH
2680: CALL 8545 0 1
2684: PPOPN 1
2686: END
// on VehicleConstructed ( vehicle , factory ) do SOS_VehicleConstructed ( vehicle , factory ) ;
2687: LD_VAR 0 1
2691: PPUSH
2692: LD_VAR 0 2
2696: PPUSH
2697: CALL 53719 0 2
2701: PPOPN 2
2703: END
// on BuildingCaptured ( building , oldSide , unit ) do Multiplayer_BuildingCaptured ( building , oldSide , unit ) ; end_of_file
2704: LD_VAR 0 1
2708: PPUSH
2709: LD_VAR 0 2
2713: PPUSH
2714: LD_VAR 0 3
2718: PPUSH
2719: CALL 8598 0 3
2723: PPOPN 3
2725: END
// export mpGameType , mpGameSettingsKeys , mpGameSettingsValues , mpGameSettings , mpSidePositions , mpSideTeams , mpSideNations , mpTeams , mpTeamGame , mpOilDeposits , mpSibDeposits , mpDepots , mpStartingResources , mpSharedVision , mpBuildings , mpMarkedAreas , mpBuildUpAreas , mpBuildUpTime , mpStartPos , mpBattleFlag , mpBattleFlags , mpPeopleAmount , mpPeopleSkill , mpSibDetection , mpShipments , mpSibBomb , mpMapSize , mpApemans , mpApemansArea , mpApePosIndex , mpRespawn , mpKingArea , mpPoints , mpVehicles , mpEmissions , mpDisplayStrings , mpGameActive , mpRespawnPull , mpGlobalOilDeposits , mpGlobalSibDeposits , mpTeleports , mpArtifacts , mpBlockRespThread ; export function InitMultiplayer ; var i ; begin
2726: LD_INT 0
2728: PPUSH
2729: PPUSH
// disable ( mpActive ) ;
2730: LD_INT 100
2732: DISABLE_MARKED
// disable ( mpWin ) ;
2733: LD_INT 101
2735: DISABLE_MARKED
// disable ( mpLose ) ;
2736: LD_INT 102
2738: DISABLE_MARKED
// mpGameType := 0 ;
2739: LD_ADDR_EXP 3
2743: PUSH
2744: LD_INT 0
2746: ST_TO_ADDR
// mpGameSettings := [ ] ;
2747: LD_ADDR_EXP 6
2751: PUSH
2752: EMPTY
2753: ST_TO_ADDR
// mpGameSettingsKeys := [ ] ;
2754: LD_ADDR_EXP 4
2758: PUSH
2759: EMPTY
2760: ST_TO_ADDR
// mpGameSettingsValues := [ ] ;
2761: LD_ADDR_EXP 5
2765: PUSH
2766: EMPTY
2767: ST_TO_ADDR
// mpMapSize := [ 2 , 2 ] ;
2768: LD_ADDR_EXP 29
2772: PUSH
2773: LD_INT 2
2775: PUSH
2776: LD_INT 2
2778: PUSH
2779: EMPTY
2780: LIST
2781: LIST
2782: ST_TO_ADDR
// mpOilDeposits := [ ] ;
2783: LD_ADDR_EXP 12
2787: PUSH
2788: EMPTY
2789: ST_TO_ADDR
// mpSibDeposits := [ ] ;
2790: LD_ADDR_EXP 13
2794: PUSH
2795: EMPTY
2796: ST_TO_ADDR
// mpGlobalOilDeposits := [ ] ;
2797: LD_ADDR_EXP 41
2801: PUSH
2802: EMPTY
2803: ST_TO_ADDR
// mpGlobalSibDeposits := [ ] ;
2804: LD_ADDR_EXP 42
2808: PUSH
2809: EMPTY
2810: ST_TO_ADDR
// mpDepots := [ ] ;
2811: LD_ADDR_EXP 14
2815: PUSH
2816: EMPTY
2817: ST_TO_ADDR
// mpBuildings := [ ] ;
2818: LD_ADDR_EXP 17
2822: PUSH
2823: EMPTY
2824: ST_TO_ADDR
// mpMarkedAreas := [ ] ;
2825: LD_ADDR_EXP 18
2829: PUSH
2830: EMPTY
2831: ST_TO_ADDR
// mpBuildUpAreas := [ ] ;
2832: LD_ADDR_EXP 19
2836: PUSH
2837: EMPTY
2838: ST_TO_ADDR
// mpBuildUpTime := [ ] ;
2839: LD_ADDR_EXP 20
2843: PUSH
2844: EMPTY
2845: ST_TO_ADDR
// mpStartingResources := [ ] ;
2846: LD_ADDR_EXP 15
2850: PUSH
2851: EMPTY
2852: ST_TO_ADDR
// mpStartPos := [ ] ;
2853: LD_ADDR_EXP 21
2857: PUSH
2858: EMPTY
2859: ST_TO_ADDR
// mpBattleFlag := - 1 ;
2860: LD_ADDR_EXP 22
2864: PUSH
2865: LD_INT 1
2867: NEG
2868: ST_TO_ADDR
// mpBattleFlags := [ ] ;
2869: LD_ADDR_EXP 23
2873: PUSH
2874: EMPTY
2875: ST_TO_ADDR
// mpApemans := [ ] ;
2876: LD_ADDR_EXP 30
2880: PUSH
2881: EMPTY
2882: ST_TO_ADDR
// mpApemansArea := [ ] ;
2883: LD_ADDR_EXP 31
2887: PUSH
2888: EMPTY
2889: ST_TO_ADDR
// mpRespawn := [ ] ;
2890: LD_ADDR_EXP 33
2894: PUSH
2895: EMPTY
2896: ST_TO_ADDR
// mpKingArea := 0 ;
2897: LD_ADDR_EXP 34
2901: PUSH
2902: LD_INT 0
2904: ST_TO_ADDR
// mpPoints := [ ] ;
2905: LD_ADDR_EXP 35
2909: PUSH
2910: EMPTY
2911: ST_TO_ADDR
// mpVehicles := 0 ;
2912: LD_ADDR_EXP 36
2916: PUSH
2917: LD_INT 0
2919: ST_TO_ADDR
// mpShipments := 0 ;
2920: LD_ADDR_EXP 27
2924: PUSH
2925: LD_INT 0
2927: ST_TO_ADDR
// mpRespawnPull := [ [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
2928: LD_ADDR_EXP 40
2932: PUSH
2933: EMPTY
2934: PUSH
2935: EMPTY
2936: PUSH
2937: EMPTY
2938: PUSH
2939: EMPTY
2940: PUSH
2941: EMPTY
2942: PUSH
2943: EMPTY
2944: PUSH
2945: EMPTY
2946: PUSH
2947: EMPTY
2948: PUSH
2949: EMPTY
2950: LIST
2951: LIST
2952: LIST
2953: LIST
2954: LIST
2955: LIST
2956: LIST
2957: LIST
2958: ST_TO_ADDR
// mpApePosIndex := [ [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
2959: LD_ADDR_EXP 32
2963: PUSH
2964: EMPTY
2965: PUSH
2966: EMPTY
2967: PUSH
2968: EMPTY
2969: PUSH
2970: EMPTY
2971: PUSH
2972: EMPTY
2973: PUSH
2974: EMPTY
2975: PUSH
2976: EMPTY
2977: PUSH
2978: EMPTY
2979: PUSH
2980: EMPTY
2981: LIST
2982: LIST
2983: LIST
2984: LIST
2985: LIST
2986: LIST
2987: LIST
2988: LIST
2989: ST_TO_ADDR
// mpEmissions := 0 ;
2990: LD_ADDR_EXP 37
2994: PUSH
2995: LD_INT 0
2997: ST_TO_ADDR
// mpTeleports := 0 ;
2998: LD_ADDR_EXP 43
3002: PUSH
3003: LD_INT 0
3005: ST_TO_ADDR
// mpArtifacts := 0 ;
3006: LD_ADDR_EXP 44
3010: PUSH
3011: LD_INT 0
3013: ST_TO_ADDR
// mpPeopleSkill := 3 ;
3014: LD_ADDR_EXP 25
3018: PUSH
3019: LD_INT 3
3021: ST_TO_ADDR
// mpPeopleAmount := 15 ;
3022: LD_ADDR_EXP 24
3026: PUSH
3027: LD_INT 15
3029: ST_TO_ADDR
// mpDisplayStrings := 0 ;
3030: LD_ADDR_EXP 38
3034: PUSH
3035: LD_INT 0
3037: ST_TO_ADDR
// mpGameActive := false ;
3038: LD_ADDR_EXP 39
3042: PUSH
3043: LD_INT 0
3045: ST_TO_ADDR
// mpBlockRespThread := false ;
3046: LD_ADDR_EXP 45
3050: PUSH
3051: LD_INT 0
3053: ST_TO_ADDR
// for i := 1 to 32 do
3054: LD_ADDR_VAR 0 2
3058: PUSH
3059: DOUBLE
3060: LD_INT 1
3062: DEC
3063: ST_TO_ADDR
3064: LD_INT 32
3066: PUSH
3067: FOR_TO
3068: IFFALSE 3095
// mpGameSettings := Replace ( mpGameSettings , i , 0 ) ;
3070: LD_ADDR_EXP 6
3074: PUSH
3075: LD_EXP 6
3079: PPUSH
3080: LD_VAR 0 2
3084: PPUSH
3085: LD_INT 0
3087: PPUSH
3088: CALL_OW 1
3092: ST_TO_ADDR
3093: GO 3067
3095: POP
3096: POP
// end ;
3097: LD_VAR 0 1
3101: RET
// export function StartMultiplayer ; var i , j , b , x , y , side , pos , nation , ape , team , setting , resources , gameTypes ; begin
3102: LD_INT 0
3104: PPUSH
3105: PPUSH
3106: PPUSH
3107: PPUSH
3108: PPUSH
3109: PPUSH
3110: PPUSH
3111: PPUSH
3112: PPUSH
3113: PPUSH
3114: PPUSH
3115: PPUSH
3116: PPUSH
3117: PPUSH
// gameTypes := [ GameTypeNormal , GameTypeSurvival , GameTypeKing , GameTypeFamine ] ;
3118: LD_ADDR_VAR 0 14
3122: PUSH
3123: LD_INT 1
3125: PUSH
3126: LD_INT 2
3128: PUSH
3129: LD_INT 3
3131: PUSH
3132: LD_INT 5
3134: PUSH
3135: EMPTY
3136: LIST
3137: LIST
3138: LIST
3139: LIST
3140: ST_TO_ADDR
// for i in gameTypes do
3141: LD_ADDR_VAR 0 2
3145: PUSH
3146: LD_VAR 0 14
3150: PUSH
3151: FOR_IN
3152: IFFALSE 3161
// disable ( i ) ;
3154: LD_VAR 0 2
3158: DISABLE_MARKED
3159: GO 3151
3161: POP
3162: POP
// if Multiplayer then
3163: LD_OWVAR 4
3167: IFFALSE 3351
// begin mpGameType := mp_game_type ;
3169: LD_ADDR_EXP 3
3173: PUSH
3174: LD_OWVAR 6
3178: ST_TO_ADDR
// your_side := mp_player_side ;
3179: LD_ADDR_OWVAR 2
3183: PUSH
3184: LD_OWVAR 7
3188: ST_TO_ADDR
// mpSidePositions := mp_sides_positions ;
3189: LD_ADDR_EXP 7
3193: PUSH
3194: LD_OWVAR 17
3198: ST_TO_ADDR
// mpSideTeams := mp_sides_teams ;
3199: LD_ADDR_EXP 8
3203: PUSH
3204: LD_OWVAR 15
3208: ST_TO_ADDR
// mpSideNations := mp_sides_nations ;
3209: LD_ADDR_EXP 9
3213: PUSH
3214: LD_OWVAR 16
3218: ST_TO_ADDR
// mpTeams := mp_teams ;
3219: LD_ADDR_EXP 10
3223: PUSH
3224: LD_OWVAR 12
3228: ST_TO_ADDR
// for i := 1 to Count ( mpGameSettingsKeys ) do
3229: LD_ADDR_VAR 0 2
3233: PUSH
3234: DOUBLE
3235: LD_INT 1
3237: DEC
3238: ST_TO_ADDR
3239: LD_EXP 4
3243: PPUSH
3244: CALL 12212 0 1
3248: PUSH
3249: FOR_TO
3250: IFFALSE 3326
// begin setting := mpGameSettingsKeys [ i ] ;
3252: LD_ADDR_VAR 0 12
3256: PUSH
3257: LD_EXP 4
3261: PUSH
3262: LD_VAR 0 2
3266: ARRAY
3267: ST_TO_ADDR
// if setting then
3268: LD_VAR 0 12
3272: IFFALSE 3324
// mpGameSettings := Replace ( mpGameSettings , i , mpGameSettingsValues [ i ] [ GetMultiplayerSetting ( i - 1 ) + 1 ] ) ;
3274: LD_ADDR_EXP 6
3278: PUSH
3279: LD_EXP 6
3283: PPUSH
3284: LD_VAR 0 2
3288: PPUSH
3289: LD_EXP 5
3293: PUSH
3294: LD_VAR 0 2
3298: ARRAY
3299: PUSH
3300: LD_VAR 0 2
3304: PUSH
3305: LD_INT 1
3307: MINUS
3308: PPUSH
3309: CALL_OW 426
3313: PUSH
3314: LD_INT 1
3316: PLUS
3317: ARRAY
3318: PPUSH
3319: CALL_OW 1
3323: ST_TO_ADDR
// end ;
3324: GO 3249
3326: POP
3327: POP
// mpTeamGame := ( mpSideTeams diff [ 0 ] ) > 1 ;
3328: LD_ADDR_EXP 11
3332: PUSH
3333: LD_EXP 8
3337: PUSH
3338: LD_INT 0
3340: PUSH
3341: EMPTY
3342: LIST
3343: DIFF
3344: PUSH
3345: LD_INT 1
3347: GREATER
3348: ST_TO_ADDR
// end else
3349: GO 3351
// begin end ; GetMultiplayerMapData ( mpGameType ) ;
3351: LD_EXP 3
3355: PPUSH
3356: CALL 822 0 1
// if Count ( mpMarkedAreas ) then
3360: LD_EXP 18
3364: PPUSH
3365: CALL 12212 0 1
3369: IFFALSE 3400
// begin for i in mpMarkedAreas do
3371: LD_ADDR_VAR 0 2
3375: PUSH
3376: LD_EXP 18
3380: PUSH
3381: FOR_IN
3382: IFFALSE 3398
// SetAreaMapShow ( i , 0 ) ;
3384: LD_VAR 0 2
3388: PPUSH
3389: LD_INT 0
3391: PPUSH
3392: CALL_OW 424
3396: GO 3381
3398: POP
3399: POP
// end ; for i := 1 to 8 do
3400: LD_ADDR_VAR 0 2
3404: PUSH
3405: DOUBLE
3406: LD_INT 1
3408: DEC
3409: ST_TO_ADDR
3410: LD_INT 8
3412: PUSH
3413: FOR_TO
3414: IFFALSE 4750
// begin if not mpSidePositions [ i ] then
3416: LD_EXP 7
3420: PUSH
3421: LD_VAR 0 2
3425: ARRAY
3426: NOT
3427: IFFALSE 3431
// continue ;
3429: GO 3413
// side := i ;
3431: LD_ADDR_VAR 0 7
3435: PUSH
3436: LD_VAR 0 2
3440: ST_TO_ADDR
// nation := mpSideNations [ i ] ;
3441: LD_ADDR_VAR 0 9
3445: PUSH
3446: LD_EXP 9
3450: PUSH
3451: LD_VAR 0 2
3455: ARRAY
3456: ST_TO_ADDR
// pos := mpSidePositions [ i ] ;
3457: LD_ADDR_VAR 0 8
3461: PUSH
3462: LD_EXP 7
3466: PUSH
3467: LD_VAR 0 2
3471: ARRAY
3472: ST_TO_ADDR
// if Count ( mpOilDeposits ) then
3473: LD_EXP 12
3477: PPUSH
3478: CALL 12212 0 1
3482: IFFALSE 3559
// begin for j in mpOilDeposits [ pos ] do
3484: LD_ADDR_VAR 0 3
3488: PUSH
3489: LD_EXP 12
3493: PUSH
3494: LD_VAR 0 8
3498: ARRAY
3499: PUSH
3500: FOR_IN
3501: IFFALSE 3557
// begin CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_oil ) ;
3503: LD_VAR 0 3
3507: PUSH
3508: LD_INT 1
3510: ARRAY
3511: PPUSH
3512: LD_VAR 0 3
3516: PUSH
3517: LD_INT 2
3519: ARRAY
3520: PPUSH
3521: LD_INT 2
3523: PPUSH
3524: CALL_OW 62
// SetResourceVisibility ( j [ 1 ] , j [ 2 ] , side ) ;
3528: LD_VAR 0 3
3532: PUSH
3533: LD_INT 1
3535: ARRAY
3536: PPUSH
3537: LD_VAR 0 3
3541: PUSH
3542: LD_INT 2
3544: ARRAY
3545: PPUSH
3546: LD_VAR 0 7
3550: PPUSH
3551: CALL_OW 441
// end ;
3555: GO 3500
3557: POP
3558: POP
// end ; if Count ( mpSibDeposits ) then
3559: LD_EXP 13
3563: PPUSH
3564: CALL 12212 0 1
3568: IFFALSE 3645
// begin for j in mpSibDeposits [ pos ] do
3570: LD_ADDR_VAR 0 3
3574: PUSH
3575: LD_EXP 13
3579: PUSH
3580: LD_VAR 0 8
3584: ARRAY
3585: PUSH
3586: FOR_IN
3587: IFFALSE 3643
// begin CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_siberit ) ;
3589: LD_VAR 0 3
3593: PUSH
3594: LD_INT 1
3596: ARRAY
3597: PPUSH
3598: LD_VAR 0 3
3602: PUSH
3603: LD_INT 2
3605: ARRAY
3606: PPUSH
3607: LD_INT 3
3609: PPUSH
3610: CALL_OW 62
// SetResourceVisibility ( j [ 1 ] , j [ 2 ] , side ) ;
3614: LD_VAR 0 3
3618: PUSH
3619: LD_INT 1
3621: ARRAY
3622: PPUSH
3623: LD_VAR 0 3
3627: PUSH
3628: LD_INT 2
3630: ARRAY
3631: PPUSH
3632: LD_VAR 0 7
3636: PPUSH
3637: CALL_OW 441
// end ;
3641: GO 3586
3643: POP
3644: POP
// end ; InitBc ;
3645: CALL_OW 21
// InitUc ;
3649: CALL_OW 18
// uc_side := side ;
3653: LD_ADDR_OWVAR 20
3657: PUSH
3658: LD_VAR 0 7
3662: ST_TO_ADDR
// uc_nation := nation ;
3663: LD_ADDR_OWVAR 21
3667: PUSH
3668: LD_VAR 0 9
3672: ST_TO_ADDR
// if mpBattleFlag > - 1 then
3673: LD_EXP 22
3677: PUSH
3678: LD_INT 1
3680: NEG
3681: GREATER
3682: IFFALSE 3841
// begin x := mpStartPos [ pos ] [ 1 ] ;
3684: LD_ADDR_VAR 0 5
3688: PUSH
3689: LD_EXP 21
3693: PUSH
3694: LD_VAR 0 8
3698: ARRAY
3699: PUSH
3700: LD_INT 1
3702: ARRAY
3703: ST_TO_ADDR
// y := mpStartPos [ pos ] [ 2 ] ;
3704: LD_ADDR_VAR 0 6
3708: PUSH
3709: LD_EXP 21
3713: PUSH
3714: LD_VAR 0 8
3718: ARRAY
3719: PUSH
3720: LD_INT 2
3722: ARRAY
3723: ST_TO_ADDR
// PlaceEnvironment ( x , y , 12 , 2 ) ;
3724: LD_VAR 0 5
3728: PPUSH
3729: LD_VAR 0 6
3733: PPUSH
3734: LD_INT 12
3736: PPUSH
3737: LD_INT 2
3739: PPUSH
3740: CALL_OW 349
// mpBattleFlags := Replace ( mpBattleFlags , side , SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 70 ] , [ bfo_defend_bonus_building , 40 ] , [ bfo_range , 25 ] , [ bfo_height , 100 ] ] ) ) ;
3744: LD_ADDR_EXP 23
3748: PUSH
3749: LD_EXP 23
3753: PPUSH
3754: LD_VAR 0 7
3758: PPUSH
3759: LD_VAR 0 7
3763: PPUSH
3764: LD_VAR 0 5
3768: PPUSH
3769: LD_VAR 0 6
3773: PPUSH
3774: LD_INT 1
3776: PUSH
3777: LD_INT 100
3779: PUSH
3780: EMPTY
3781: LIST
3782: LIST
3783: PUSH
3784: LD_INT 2
3786: PUSH
3787: LD_INT 70
3789: PUSH
3790: EMPTY
3791: LIST
3792: LIST
3793: PUSH
3794: LD_INT 3
3796: PUSH
3797: LD_INT 40
3799: PUSH
3800: EMPTY
3801: LIST
3802: LIST
3803: PUSH
3804: LD_INT 10
3806: PUSH
3807: LD_INT 25
3809: PUSH
3810: EMPTY
3811: LIST
3812: LIST
3813: PUSH
3814: LD_INT 20
3816: PUSH
3817: LD_INT 100
3819: PUSH
3820: EMPTY
3821: LIST
3822: LIST
3823: PUSH
3824: EMPTY
3825: LIST
3826: LIST
3827: LIST
3828: LIST
3829: LIST
3830: PPUSH
3831: CALL_OW 418
3835: PPUSH
3836: CALL_OW 1
3840: ST_TO_ADDR
// end ; if Count ( mpDepots ) then
3841: LD_EXP 14
3845: PPUSH
3846: CALL 12212 0 1
3850: IFFALSE 4034
// begin if mpGameType = GameTypeSurvival then
3852: LD_EXP 3
3856: PUSH
3857: LD_INT 2
3859: EQUAL
3860: IFFALSE 3880
// begin bc_level := 10 ;
3862: LD_ADDR_OWVAR 43
3866: PUSH
3867: LD_INT 10
3869: ST_TO_ADDR
// bc_type := b_warehouse ;
3870: LD_ADDR_OWVAR 42
3874: PUSH
3875: LD_INT 1
3877: ST_TO_ADDR
// end else
3878: GO 3896
// begin bc_level := 0 ;
3880: LD_ADDR_OWVAR 43
3884: PUSH
3885: LD_INT 0
3887: ST_TO_ADDR
// bc_type := b_depot ;
3888: LD_ADDR_OWVAR 42
3892: PUSH
3893: LD_INT 0
3895: ST_TO_ADDR
// end ; b := CreateAndPlaceBuildingXYD ( mpDepots [ pos ] [ 1 ] , mpDepots [ pos ] [ 2 ] , mpDepots [ pos ] [ 3 ] ) ;
3896: LD_ADDR_VAR 0 4
3900: PUSH
3901: LD_EXP 14
3905: PUSH
3906: LD_VAR 0 8
3910: ARRAY
3911: PUSH
3912: LD_INT 1
3914: ARRAY
3915: PPUSH
3916: LD_EXP 14
3920: PUSH
3921: LD_VAR 0 8
3925: ARRAY
3926: PUSH
3927: LD_INT 2
3929: ARRAY
3930: PPUSH
3931: LD_EXP 14
3935: PUSH
3936: LD_VAR 0 8
3940: ARRAY
3941: PUSH
3942: LD_INT 3
3944: ARRAY
3945: PPUSH
3946: CALL_OW 47
3950: ST_TO_ADDR
// SetBName ( b , @ & side ) ;
3951: LD_VAR 0 4
3955: PPUSH
3956: LD_STRING @
3958: PUSH
3959: LD_VAR 0 7
3963: STR
3964: PPUSH
3965: CALL_OW 500
// if Count ( mpStartingResources ) then
3969: LD_EXP 15
3973: PPUSH
3974: CALL 12212 0 1
3978: IFFALSE 4032
// begin for j := 1 to mpStartingResources do
3980: LD_ADDR_VAR 0 3
3984: PUSH
3985: DOUBLE
3986: LD_INT 1
3988: DEC
3989: ST_TO_ADDR
3990: LD_EXP 15
3994: PUSH
3995: FOR_TO
3996: IFFALSE 4030
// SetResourceType ( GetBase ( b ) , j , mpStartingResources [ j ] ) ;
3998: LD_VAR 0 4
4002: PPUSH
4003: CALL_OW 274
4007: PPUSH
4008: LD_VAR 0 3
4012: PPUSH
4013: LD_EXP 15
4017: PUSH
4018: LD_VAR 0 3
4022: ARRAY
4023: PPUSH
4024: CALL_OW 277
4028: GO 3995
4030: POP
4031: POP
// end ; end else
4032: GO 4241
// if Count ( mpStartingResources ) then
4034: LD_EXP 15
4038: PPUSH
4039: CALL 12212 0 1
4043: IFFALSE 4241
// begin x := mpStartPos [ pos ] [ 1 ] ;
4045: LD_ADDR_VAR 0 5
4049: PUSH
4050: LD_EXP 21
4054: PUSH
4055: LD_VAR 0 8
4059: ARRAY
4060: PUSH
4061: LD_INT 1
4063: ARRAY
4064: ST_TO_ADDR
// y := mpStartPos [ pos ] [ 2 ] ;
4065: LD_ADDR_VAR 0 6
4069: PUSH
4070: LD_EXP 21
4074: PUSH
4075: LD_VAR 0 8
4079: ARRAY
4080: PUSH
4081: LD_INT 2
4083: ARRAY
4084: ST_TO_ADDR
// for j := 1 to mpStartingResources do
4085: LD_ADDR_VAR 0 3
4089: PUSH
4090: DOUBLE
4091: LD_INT 1
4093: DEC
4094: ST_TO_ADDR
4095: LD_EXP 15
4099: PUSH
4100: FOR_TO
4101: IFFALSE 4239
// begin resources := mpStartingResources [ j ] ;
4103: LD_ADDR_VAR 0 13
4107: PUSH
4108: LD_EXP 15
4112: PUSH
4113: LD_VAR 0 3
4117: ARRAY
4118: ST_TO_ADDR
// if resources = 0 then
4119: LD_VAR 0 13
4123: PUSH
4124: LD_INT 0
4126: EQUAL
4127: IFFALSE 4131
// continue ;
4129: GO 4100
// repeat if resources >= 50 then
4131: LD_VAR 0 13
4135: PUSH
4136: LD_INT 50
4138: GREATEREQUAL
4139: IFFALSE 4185
// begin CreateResourcesXYR ( j , 5 , x , y , 6 , false ) ;
4141: LD_VAR 0 3
4145: PPUSH
4146: LD_INT 5
4148: PPUSH
4149: LD_VAR 0 5
4153: PPUSH
4154: LD_VAR 0 6
4158: PPUSH
4159: LD_INT 6
4161: PPUSH
4162: LD_INT 0
4164: PPUSH
4165: CALL_OW 60
// resources := resources - 50 ;
4169: LD_ADDR_VAR 0 13
4173: PUSH
4174: LD_VAR 0 13
4178: PUSH
4179: LD_INT 50
4181: MINUS
4182: ST_TO_ADDR
// end else
4183: GO 4227
// begin CreateResourcesXYR ( j , resources div 10 , x , y , 6 , false ) ;
4185: LD_VAR 0 3
4189: PPUSH
4190: LD_VAR 0 13
4194: PUSH
4195: LD_INT 10
4197: DIV
4198: PPUSH
4199: LD_VAR 0 5
4203: PPUSH
4204: LD_VAR 0 6
4208: PPUSH
4209: LD_INT 6
4211: PPUSH
4212: LD_INT 0
4214: PPUSH
4215: CALL_OW 60
// resources := 0 ;
4219: LD_ADDR_VAR 0 13
4223: PUSH
4224: LD_INT 0
4226: ST_TO_ADDR
// end ; until resources <= 0 ;
4227: LD_VAR 0 13
4231: PUSH
4232: LD_INT 0
4234: LESSEQUAL
4235: IFFALSE 4131
// end ;
4237: GO 4100
4239: POP
4240: POP
// end ; if Count ( mpBuildings ) then
4241: LD_EXP 17
4245: PPUSH
4246: CALL 12212 0 1
4250: IFFALSE 4328
// begin for j in mpBuildings [ pos ] do
4252: LD_ADDR_VAR 0 3
4256: PUSH
4257: LD_EXP 17
4261: PUSH
4262: LD_VAR 0 8
4266: ARRAY
4267: PUSH
4268: FOR_IN
4269: IFFALSE 4326
// begin bc_level := 0 ;
4271: LD_ADDR_OWVAR 43
4275: PUSH
4276: LD_INT 0
4278: ST_TO_ADDR
// bc_type := j [ 1 ] ;
4279: LD_ADDR_OWVAR 42
4283: PUSH
4284: LD_VAR 0 3
4288: PUSH
4289: LD_INT 1
4291: ARRAY
4292: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( j [ 2 ] , j [ 3 ] , j [ 4 ] ) ;
4293: LD_VAR 0 3
4297: PUSH
4298: LD_INT 2
4300: ARRAY
4301: PPUSH
4302: LD_VAR 0 3
4306: PUSH
4307: LD_INT 3
4309: ARRAY
4310: PPUSH
4311: LD_VAR 0 3
4315: PUSH
4316: LD_INT 4
4318: ARRAY
4319: PPUSH
4320: CALL_OW 47
// end ;
4324: GO 4268
4326: POP
4327: POP
// end ; if mpSibDetection and GetTech ( tech_sibdet , side ) = state_enabled then
4328: LD_EXP 26
4332: IFFALSE 4352
4334: PUSH
4335: LD_INT 20
4337: PPUSH
4338: LD_VAR 0 7
4342: PPUSH
4343: CALL_OW 321
4347: PUSH
4348: LD_INT 1
4350: EQUAL
4351: AND
4352: IFFALSE 4369
// SetTech ( tech_SibDet , side , state_researched ) ;
4354: LD_INT 20
4356: PPUSH
4357: LD_VAR 0 7
4361: PPUSH
4362: LD_INT 2
4364: PPUSH
4365: CALL_OW 322
// if not mpArtifacts then
4369: LD_EXP 44
4373: NOT
4374: IFFALSE 4391
// SetTech ( tech_artifact , side , state_disabled ) ;
4376: LD_INT 24
4378: PPUSH
4379: LD_VAR 0 7
4383: PPUSH
4384: LD_INT 0
4386: PPUSH
4387: CALL_OW 322
// if mpSibBomb = 1 then
4391: LD_EXP 28
4395: PUSH
4396: LD_INT 1
4398: EQUAL
4399: IFFALSE 4418
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
4401: LD_INT 25
4403: PPUSH
4404: LD_VAR 0 7
4408: PPUSH
4409: LD_INT 1
4411: PPUSH
4412: CALL_OW 322
// end else
4416: GO 4433
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
4418: LD_INT 25
4420: PPUSH
4421: LD_VAR 0 7
4425: PPUSH
4426: LD_INT 0
4428: PPUSH
4429: CALL_OW 322
// end ; if mpVehicles then
4433: LD_EXP 36
4437: IFFALSE 4536
// begin for j in mpPrepareVehicles ( side , nation , mpVehicles ) do
4439: LD_ADDR_VAR 0 3
4443: PUSH
4444: LD_VAR 0 7
4448: PPUSH
4449: LD_VAR 0 9
4453: PPUSH
4454: LD_EXP 36
4458: PPUSH
4459: CALL 5660 0 3
4463: PUSH
4464: FOR_IN
4465: IFFALSE 4534
// begin SetDir ( j , rand ( 0 , 5 ) ) ;
4467: LD_VAR 0 3
4471: PPUSH
4472: LD_INT 0
4474: PPUSH
4475: LD_INT 5
4477: PPUSH
4478: CALL_OW 12
4482: PPUSH
4483: CALL_OW 233
// PlaceUnitXYR ( j , mpStartPos [ pos ] [ 1 ] , mpStartPos [ pos ] [ 2 ] , 12 , false ) ;
4487: LD_VAR 0 3
4491: PPUSH
4492: LD_EXP 21
4496: PUSH
4497: LD_VAR 0 8
4501: ARRAY
4502: PUSH
4503: LD_INT 1
4505: ARRAY
4506: PPUSH
4507: LD_EXP 21
4511: PUSH
4512: LD_VAR 0 8
4516: ARRAY
4517: PUSH
4518: LD_INT 2
4520: ARRAY
4521: PPUSH
4522: LD_INT 12
4524: PPUSH
4525: LD_INT 0
4527: PPUSH
4528: CALL_OW 50
// end ;
4532: GO 4464
4534: POP
4535: POP
// end ; uc_nation := nation ;
4536: LD_ADDR_OWVAR 21
4540: PUSH
4541: LD_VAR 0 9
4545: ST_TO_ADDR
// team := mpPrepareTeam ( side , nation , mpPeopleAmount , mpPeopleSkill ) ;
4546: LD_ADDR_VAR 0 11
4550: PUSH
4551: LD_VAR 0 7
4555: PPUSH
4556: LD_VAR 0 9
4560: PPUSH
4561: LD_EXP 24
4565: PPUSH
4566: LD_EXP 25
4570: PPUSH
4571: CALL 5162 0 4
4575: ST_TO_ADDR
// for j in team do
4576: LD_ADDR_VAR 0 3
4580: PUSH
4581: LD_VAR 0 11
4585: PUSH
4586: FOR_IN
4587: IFFALSE 4636
// PlaceUnitXYR ( j , mpStartPos [ pos ] [ 1 ] , mpStartPos [ pos ] [ 2 ] , 12 , false ) ;
4589: LD_VAR 0 3
4593: PPUSH
4594: LD_EXP 21
4598: PUSH
4599: LD_VAR 0 8
4603: ARRAY
4604: PUSH
4605: LD_INT 1
4607: ARRAY
4608: PPUSH
4609: LD_EXP 21
4613: PUSH
4614: LD_VAR 0 8
4618: ARRAY
4619: PUSH
4620: LD_INT 2
4622: ARRAY
4623: PPUSH
4624: LD_INT 12
4626: PPUSH
4627: LD_INT 0
4629: PPUSH
4630: CALL_OW 50
4634: GO 4586
4636: POP
4637: POP
// if mpApemans then
4638: LD_EXP 30
4642: IFFALSE 4748
// begin for j := 1 to mpApemans do
4644: LD_ADDR_VAR 0 3
4648: PUSH
4649: DOUBLE
4650: LD_INT 1
4652: DEC
4653: ST_TO_ADDR
4654: LD_EXP 30
4658: PUSH
4659: FOR_TO
4660: IFFALSE 4746
// begin PrepareApeman ( - 5 ) ;
4662: LD_INT 5
4664: NEG
4665: PPUSH
4666: CALL 44271 0 1
// ape := CreateHuman ;
4670: LD_ADDR_VAR 0 10
4674: PUSH
4675: CALL_OW 44
4679: ST_TO_ADDR
// mpApePosIndex := Replace ( mpApePosIndex , pos , Join ( mpApePosIndex [ pos ] , ape ) ) ;
4680: LD_ADDR_EXP 32
4684: PUSH
4685: LD_EXP 32
4689: PPUSH
4690: LD_VAR 0 8
4694: PPUSH
4695: LD_EXP 32
4699: PUSH
4700: LD_VAR 0 8
4704: ARRAY
4705: PPUSH
4706: LD_VAR 0 10
4710: PPUSH
4711: CALL 48144 0 2
4715: PPUSH
4716: CALL_OW 1
4720: ST_TO_ADDR
// PlaceUnitArea ( ape , mpApemansArea [ pos ] , false ) ;
4721: LD_VAR 0 10
4725: PPUSH
4726: LD_EXP 31
4730: PUSH
4731: LD_VAR 0 8
4735: ARRAY
4736: PPUSH
4737: LD_INT 0
4739: PPUSH
4740: CALL_OW 49
// end ;
4744: GO 4659
4746: POP
4747: POP
// end ; end ;
4748: GO 3413
4750: POP
4751: POP
// if not mpTeamGame then
4752: LD_EXP 11
4756: NOT
4757: IFFALSE 4855
// begin for i := 1 to 8 do
4759: LD_ADDR_VAR 0 2
4763: PUSH
4764: DOUBLE
4765: LD_INT 1
4767: DEC
4768: ST_TO_ADDR
4769: LD_INT 8
4771: PUSH
4772: FOR_TO
4773: IFFALSE 4851
// for j := 1 to 8 do
4775: LD_ADDR_VAR 0 3
4779: PUSH
4780: DOUBLE
4781: LD_INT 1
4783: DEC
4784: ST_TO_ADDR
4785: LD_INT 8
4787: PUSH
4788: FOR_TO
4789: IFFALSE 4847
// if i <> j then
4791: LD_VAR 0 2
4795: PUSH
4796: LD_VAR 0 3
4800: NONEQUAL
4801: IFFALSE 4825
// SetAttitude ( i , j , att_neutral , true ) else
4803: LD_VAR 0 2
4807: PPUSH
4808: LD_VAR 0 3
4812: PPUSH
4813: LD_INT 0
4815: PPUSH
4816: LD_INT 1
4818: PPUSH
4819: CALL_OW 80
4823: GO 4845
// SetAttitude ( i , j , att_friend , true ) ;
4825: LD_VAR 0 2
4829: PPUSH
4830: LD_VAR 0 3
4834: PPUSH
4835: LD_INT 1
4837: PPUSH
4838: LD_INT 1
4840: PPUSH
4841: CALL_OW 80
4845: GO 4788
4847: POP
4848: POP
4849: GO 4772
4851: POP
4852: POP
// end else
4853: GO 5030
// begin if mpSharedVision then
4855: LD_EXP 16
4859: IFFALSE 4924
// begin for i in mpTeams do
4861: LD_ADDR_VAR 0 2
4865: PUSH
4866: LD_EXP 10
4870: PUSH
4871: FOR_IN
4872: IFFALSE 4922
// for j := 2 to i do
4874: LD_ADDR_VAR 0 3
4878: PUSH
4879: DOUBLE
4880: LD_INT 2
4882: DEC
4883: ST_TO_ADDR
4884: LD_VAR 0 2
4888: PUSH
4889: FOR_TO
4890: IFFALSE 4918
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
4892: LD_VAR 0 2
4896: PUSH
4897: LD_VAR 0 3
4901: ARRAY
4902: PPUSH
4903: LD_VAR 0 2
4907: PUSH
4908: LD_INT 1
4910: ARRAY
4911: PPUSH
4912: CALL_OW 343
4916: GO 4889
4918: POP
4919: POP
4920: GO 4871
4922: POP
4923: POP
// end ; for i := 1 to 8 do
4924: LD_ADDR_VAR 0 2
4928: PUSH
4929: DOUBLE
4930: LD_INT 1
4932: DEC
4933: ST_TO_ADDR
4934: LD_INT 8
4936: PUSH
4937: FOR_TO
4938: IFFALSE 5028
// for j := 1 to 8 do
4940: LD_ADDR_VAR 0 3
4944: PUSH
4945: DOUBLE
4946: LD_INT 1
4948: DEC
4949: ST_TO_ADDR
4950: LD_INT 8
4952: PUSH
4953: FOR_TO
4954: IFFALSE 5024
// if mpSideTeams [ i ] = mpSideTeams [ j ] then
4956: LD_EXP 8
4960: PUSH
4961: LD_VAR 0 2
4965: ARRAY
4966: PUSH
4967: LD_EXP 8
4971: PUSH
4972: LD_VAR 0 3
4976: ARRAY
4977: EQUAL
4978: IFFALSE 5002
// SetAttitude ( i , j , att_friend , true ) else
4980: LD_VAR 0 2
4984: PPUSH
4985: LD_VAR 0 3
4989: PPUSH
4990: LD_INT 1
4992: PPUSH
4993: LD_INT 1
4995: PPUSH
4996: CALL_OW 80
5000: GO 5022
// SetAttitude ( i , j , att_enemy , true ) ;
5002: LD_VAR 0 2
5006: PPUSH
5007: LD_VAR 0 3
5011: PPUSH
5012: LD_INT 2
5014: PPUSH
5015: LD_INT 1
5017: PPUSH
5018: CALL_OW 80
5022: GO 4953
5024: POP
5025: POP
5026: GO 4937
5028: POP
5029: POP
// end ; music_nat := mpSideNations [ your_side ] ;
5030: LD_ADDR_OWVAR 71
5034: PUSH
5035: LD_EXP 9
5039: PUSH
5040: LD_OWVAR 2
5044: ARRAY
5045: ST_TO_ADDR
// if IAmSpec then
5046: CALL_OW 531
5050: IFFALSE 5091
// begin FogOff ( true ) ;
5052: LD_INT 1
5054: PPUSH
5055: CALL_OW 344
// CenterNowOnXY ( mpMapSize [ 1 ] div 2 , mpMapSize [ 2 ] div 2 ) ;
5059: LD_EXP 29
5063: PUSH
5064: LD_INT 1
5066: ARRAY
5067: PUSH
5068: LD_INT 2
5070: DIV
5071: PPUSH
5072: LD_EXP 29
5076: PUSH
5077: LD_INT 2
5079: ARRAY
5080: PUSH
5081: LD_INT 2
5083: DIV
5084: PPUSH
5085: CALL_OW 86
// end else
5089: GO 5137
// begin CenterNowOnXY ( mpStartPos [ mpSidePositions [ your_side ] ] [ 1 ] , mpStartPos [ mpSidePositions [ your_side ] ] [ 2 ] ) ;
5091: LD_EXP 21
5095: PUSH
5096: LD_EXP 7
5100: PUSH
5101: LD_OWVAR 2
5105: ARRAY
5106: ARRAY
5107: PUSH
5108: LD_INT 1
5110: ARRAY
5111: PPUSH
5112: LD_EXP 21
5116: PUSH
5117: LD_EXP 7
5121: PUSH
5122: LD_OWVAR 2
5126: ARRAY
5127: ARRAY
5128: PUSH
5129: LD_INT 2
5131: ARRAY
5132: PPUSH
5133: CALL_OW 86
// end ; BeginBuildUp ;
5137: CALL 6193 0 0
// enable ( mpActive ) ;
5141: LD_INT 100
5143: ENABLE_MARKED
// enable ( mpGameType ) ;
5144: LD_EXP 3
5148: ENABLE_MARKED
// mpGameActive := true ;
5149: LD_ADDR_EXP 39
5153: PUSH
5154: LD_INT 1
5156: ST_TO_ADDR
// end ;
5157: LD_VAR 0 1
5161: RET
// var mpTeamPreset ; function mpPrepareTeam ( side , nation , amount , skill ) ; var i , un , class ; begin
5162: LD_INT 0
5164: PPUSH
5165: PPUSH
5166: PPUSH
5167: PPUSH
// result := [ ] ;
5168: LD_ADDR_VAR 0 5
5172: PUSH
5173: EMPTY
5174: ST_TO_ADDR
// class := class_soldier ;
5175: LD_ADDR_VAR 0 8
5179: PUSH
5180: LD_INT 1
5182: ST_TO_ADDR
// uc_side := side ;
5183: LD_ADDR_OWVAR 20
5187: PUSH
5188: LD_VAR 0 1
5192: ST_TO_ADDR
// uc_nation := nation ;
5193: LD_ADDR_OWVAR 21
5197: PUSH
5198: LD_VAR 0 2
5202: ST_TO_ADDR
// hc_name := mp_sides_players_names [ side ] ;
5203: LD_ADDR_OWVAR 26
5207: PUSH
5208: LD_OWVAR 19
5212: PUSH
5213: LD_VAR 0 1
5217: ARRAY
5218: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , class , skill + 2 ) ;
5219: LD_INT 1
5221: PPUSH
5222: LD_INT 2
5224: PPUSH
5225: CALL_OW 12
5229: PPUSH
5230: LD_VAR 0 8
5234: PPUSH
5235: LD_VAR 0 4
5239: PUSH
5240: LD_INT 2
5242: PLUS
5243: PPUSH
5244: CALL_OW 380
// hc_importance := 105 ;
5248: LD_ADDR_OWVAR 32
5252: PUSH
5253: LD_INT 105
5255: ST_TO_ADDR
// if Multiplayer then
5256: LD_OWVAR 4
5260: IFFALSE 5300
// begin hc_gallery := MULTIAVATARS ;
5262: LD_ADDR_OWVAR 33
5266: PUSH
5267: LD_STRING MULTIAVATARS
5269: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( side ) ;
5270: LD_ADDR_OWVAR 34
5274: PUSH
5275: LD_VAR 0 1
5279: PPUSH
5280: CALL_OW 525
5284: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( side ) ;
5285: LD_ADDR_OWVAR 27
5289: PUSH
5290: LD_VAR 0 1
5294: PPUSH
5295: CALL_OW 526
5299: ST_TO_ADDR
// end ; result := Join ( result , CreateHuman ) ;
5300: LD_ADDR_VAR 0 5
5304: PUSH
5305: LD_VAR 0 5
5309: PPUSH
5310: CALL_OW 44
5314: PPUSH
5315: CALL 48144 0 2
5319: ST_TO_ADDR
// if mpTeamPreset then
5320: LD_LOC 1
5324: IFFALSE 5420
// begin CopySkills ( mpTeamPreset [ 1 ] , result [ result ] ) ;
5326: LD_LOC 1
5330: PUSH
5331: LD_INT 1
5333: ARRAY
5334: PPUSH
5335: LD_VAR 0 5
5339: PUSH
5340: LD_VAR 0 5
5344: ARRAY
5345: PPUSH
5346: CALL_OW 510
// SetAttr ( result [ result ] , attr_stamina , GetAttr ( mpTeamPreset [ 1 ] , attr_stamina ) ) ;
5350: LD_VAR 0 5
5354: PUSH
5355: LD_VAR 0 5
5359: ARRAY
5360: PPUSH
5361: LD_INT 1
5363: PPUSH
5364: LD_LOC 1
5368: PUSH
5369: LD_INT 1
5371: ARRAY
5372: PPUSH
5373: LD_INT 1
5375: PPUSH
5376: CALL_OW 260
5380: PPUSH
5381: CALL_OW 239
// SetAttr ( result [ result ] , attr_speed , GetAttr ( mpTeamPreset [ 1 ] , attr_speed ) ) ;
5385: LD_VAR 0 5
5389: PUSH
5390: LD_VAR 0 5
5394: ARRAY
5395: PPUSH
5396: LD_INT 2
5398: PPUSH
5399: LD_LOC 1
5403: PUSH
5404: LD_INT 1
5406: ARRAY
5407: PPUSH
5408: LD_INT 2
5410: PPUSH
5411: CALL_OW 260
5415: PPUSH
5416: CALL_OW 239
// end ; InitHc_All ( ) ;
5420: CALL_OW 584
// class := 2 ;
5424: LD_ADDR_VAR 0 8
5428: PUSH
5429: LD_INT 2
5431: ST_TO_ADDR
// for i := 1 to ( amount - 1 ) do
5432: LD_ADDR_VAR 0 6
5436: PUSH
5437: DOUBLE
5438: LD_INT 1
5440: DEC
5441: ST_TO_ADDR
5442: LD_VAR 0 3
5446: PUSH
5447: LD_INT 1
5449: MINUS
5450: PUSH
5451: FOR_TO
5452: IFFALSE 5636
// begin PrepareHuman ( false , class , skill ) ;
5454: LD_INT 0
5456: PPUSH
5457: LD_VAR 0 8
5461: PPUSH
5462: LD_VAR 0 4
5466: PPUSH
5467: CALL_OW 380
// un := CreateHuman ;
5471: LD_ADDR_VAR 0 7
5475: PUSH
5476: CALL_OW 44
5480: ST_TO_ADDR
// result := Join ( result , un ) ;
5481: LD_ADDR_VAR 0 5
5485: PUSH
5486: LD_VAR 0 5
5490: PPUSH
5491: LD_VAR 0 7
5495: PPUSH
5496: CALL 48144 0 2
5500: ST_TO_ADDR
// if mpTeamPreset then
5501: LD_LOC 1
5505: IFFALSE 5601
// begin CopySkills ( mpTeamPreset [ i + 1 ] , un ) ;
5507: LD_LOC 1
5511: PUSH
5512: LD_VAR 0 6
5516: PUSH
5517: LD_INT 1
5519: PLUS
5520: ARRAY
5521: PPUSH
5522: LD_VAR 0 7
5526: PPUSH
5527: CALL_OW 510
// SetAttr ( un , attr_stamina , GetAttr ( mpTeamPreset [ i + 1 ] , attr_stamina ) ) ;
5531: LD_VAR 0 7
5535: PPUSH
5536: LD_INT 1
5538: PPUSH
5539: LD_LOC 1
5543: PUSH
5544: LD_VAR 0 6
5548: PUSH
5549: LD_INT 1
5551: PLUS
5552: ARRAY
5553: PPUSH
5554: LD_INT 1
5556: PPUSH
5557: CALL_OW 260
5561: PPUSH
5562: CALL_OW 239
// SetAttr ( un , attr_speed , GetAttr ( mpTeamPreset [ i + 1 ] , attr_speed ) ) ;
5566: LD_VAR 0 7
5570: PPUSH
5571: LD_INT 2
5573: PPUSH
5574: LD_LOC 1
5578: PUSH
5579: LD_VAR 0 6
5583: PUSH
5584: LD_INT 1
5586: PLUS
5587: ARRAY
5588: PPUSH
5589: LD_INT 2
5591: PPUSH
5592: CALL_OW 260
5596: PPUSH
5597: CALL_OW 239
// end ; class := Inc ( class ) ;
5601: LD_ADDR_VAR 0 8
5605: PUSH
5606: LD_VAR 0 8
5610: PPUSH
5611: CALL 49517 0 1
5615: ST_TO_ADDR
// if class = 5 then
5616: LD_VAR 0 8
5620: PUSH
5621: LD_INT 5
5623: EQUAL
5624: IFFALSE 5634
// class := 1 ;
5626: LD_ADDR_VAR 0 8
5630: PUSH
5631: LD_INT 1
5633: ST_TO_ADDR
// end ;
5634: GO 5451
5636: POP
5637: POP
// if not mpTeamPreset then
5638: LD_LOC 1
5642: NOT
5643: IFFALSE 5655
// mpTeamPreset := result ;
5645: LD_ADDR_LOC 1
5649: PUSH
5650: LD_VAR 0 5
5654: ST_TO_ADDR
// end ;
5655: LD_VAR 0 5
5659: RET
// function mpPrepareVehicles ( side , nation , vehicles ) ; var i ; begin
5660: LD_INT 0
5662: PPUSH
5663: PPUSH
// result := [ ] ;
5664: LD_ADDR_VAR 0 4
5668: PUSH
5669: EMPTY
5670: ST_TO_ADDR
// if not vehicles then
5671: LD_VAR 0 3
5675: NOT
5676: IFFALSE 5680
// exit ;
5678: GO 5894
// for i := 1 to vehicles [ nation ] do
5680: LD_ADDR_VAR 0 5
5684: PUSH
5685: DOUBLE
5686: LD_INT 1
5688: DEC
5689: ST_TO_ADDR
5690: LD_VAR 0 3
5694: PUSH
5695: LD_VAR 0 2
5699: ARRAY
5700: PUSH
5701: FOR_TO
5702: IFFALSE 5892
// begin uc_side := side ;
5704: LD_ADDR_OWVAR 20
5708: PUSH
5709: LD_VAR 0 1
5713: ST_TO_ADDR
// if Count ( vehicles [ nation ] [ i ] ) > 4 then
5714: LD_VAR 0 3
5718: PUSH
5719: LD_VAR 0 2
5723: ARRAY
5724: PUSH
5725: LD_VAR 0 5
5729: ARRAY
5730: PPUSH
5731: CALL 12212 0 1
5735: PUSH
5736: LD_INT 4
5738: GREATER
5739: IFFALSE 5769
// uc_nation := vehicles [ nation ] [ i ] [ 5 ] else
5741: LD_ADDR_OWVAR 21
5745: PUSH
5746: LD_VAR 0 3
5750: PUSH
5751: LD_VAR 0 2
5755: ARRAY
5756: PUSH
5757: LD_VAR 0 5
5761: ARRAY
5762: PUSH
5763: LD_INT 5
5765: ARRAY
5766: ST_TO_ADDR
5767: GO 5779
// uc_nation := nation ;
5769: LD_ADDR_OWVAR 21
5773: PUSH
5774: LD_VAR 0 2
5778: ST_TO_ADDR
// PrepareVehicle ( vehicles [ nation ] [ i ] [ 1 ] , vehicles [ nation ] [ i ] [ 2 ] , vehicles [ nation ] [ i ] [ 3 ] , vehicles [ nation ] [ i ] [ 4 ] , 80 ) ;
5779: LD_VAR 0 3
5783: PUSH
5784: LD_VAR 0 2
5788: ARRAY
5789: PUSH
5790: LD_VAR 0 5
5794: ARRAY
5795: PUSH
5796: LD_INT 1
5798: ARRAY
5799: PPUSH
5800: LD_VAR 0 3
5804: PUSH
5805: LD_VAR 0 2
5809: ARRAY
5810: PUSH
5811: LD_VAR 0 5
5815: ARRAY
5816: PUSH
5817: LD_INT 2
5819: ARRAY
5820: PPUSH
5821: LD_VAR 0 3
5825: PUSH
5826: LD_VAR 0 2
5830: ARRAY
5831: PUSH
5832: LD_VAR 0 5
5836: ARRAY
5837: PUSH
5838: LD_INT 3
5840: ARRAY
5841: PPUSH
5842: LD_VAR 0 3
5846: PUSH
5847: LD_VAR 0 2
5851: ARRAY
5852: PUSH
5853: LD_VAR 0 5
5857: ARRAY
5858: PUSH
5859: LD_INT 4
5861: ARRAY
5862: PPUSH
5863: LD_INT 80
5865: PPUSH
5866: CALL 14974 0 5
// result := Join ( result , CreateVehicle ) ;
5870: LD_ADDR_VAR 0 4
5874: PUSH
5875: LD_VAR 0 4
5879: PPUSH
5880: CALL_OW 45
5884: PPUSH
5885: CALL 48144 0 2
5889: ST_TO_ADDR
// end ;
5890: GO 5701
5892: POP
5893: POP
// end ;
5894: LD_VAR 0 4
5898: RET
// function mpUpdateFlags ( strength ) ; var i ; begin
5899: LD_INT 0
5901: PPUSH
5902: PPUSH
// for i in mpBattleFlags do
5903: LD_ADDR_VAR 0 3
5907: PUSH
5908: LD_EXP 23
5912: PUSH
5913: FOR_IN
5914: IFFALSE 5991
// ChangeBattleFlagOptions ( i , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength * 0.7 ] , [ bfo_defend_bonus_building , strength * 0.4 ] , [ bfo_height , strength ] ] ) ;
5916: LD_VAR 0 3
5920: PPUSH
5921: LD_INT 1
5923: PUSH
5924: LD_VAR 0 1
5928: PUSH
5929: EMPTY
5930: LIST
5931: LIST
5932: PUSH
5933: LD_INT 2
5935: PUSH
5936: LD_VAR 0 1
5940: PUSH
5941: LD_REAL  7.00000000000000E-0001
5944: MUL
5945: PUSH
5946: EMPTY
5947: LIST
5948: LIST
5949: PUSH
5950: LD_INT 3
5952: PUSH
5953: LD_VAR 0 1
5957: PUSH
5958: LD_REAL  4.00000000000000E-0001
5961: MUL
5962: PUSH
5963: EMPTY
5964: LIST
5965: LIST
5966: PUSH
5967: LD_INT 20
5969: PUSH
5970: LD_VAR 0 1
5974: PUSH
5975: EMPTY
5976: LIST
5977: LIST
5978: PUSH
5979: EMPTY
5980: LIST
5981: LIST
5982: LIST
5983: LIST
5984: PPUSH
5985: CALL_OW 423
5989: GO 5913
5991: POP
5992: POP
// end ;
5993: LD_VAR 0 2
5997: RET
// every 0 0$1 trigger mpActive do var i , strength ;
5998: LD_INT 100
6000: IFFALSE 6095
6002: GO 6004
6004: DISABLE
6005: LD_INT 0
6007: PPUSH
6008: PPUSH
// begin if mpBattleFlag <= 0 then
6009: LD_EXP 22
6013: PUSH
6014: LD_INT 0
6016: LESSEQUAL
6017: IFFALSE 6021
// exit ;
6019: GO 6095
// strength := 100 ;
6021: LD_ADDR_VAR 0 2
6025: PUSH
6026: LD_INT 100
6028: ST_TO_ADDR
// repeat wait ( mpBattleFlag ) ;
6029: LD_EXP 22
6033: PPUSH
6034: CALL_OW 67
// strength := Dec ( strength ) ;
6038: LD_ADDR_VAR 0 2
6042: PUSH
6043: LD_VAR 0 2
6047: PPUSH
6048: CALL 49539 0 1
6052: ST_TO_ADDR
// mpUpdateFlags ( strength ) ;
6053: LD_VAR 0 2
6057: PPUSH
6058: CALL 5899 0 1
// until not strength ;
6062: LD_VAR 0 2
6066: NOT
6067: IFFALSE 6029
// for i in mpBattleFlags do
6069: LD_ADDR_VAR 0 1
6073: PUSH
6074: LD_EXP 23
6078: PUSH
6079: FOR_IN
6080: IFFALSE 6093
// KillBattleFlag ( i ) ;
6082: LD_VAR 0 1
6086: PPUSH
6087: CALL_OW 419
6091: GO 6079
6093: POP
6094: POP
// end ;
6095: PPOPN 2
6097: END
// every 0 0$1 marked mpActive do var side , tmp ;
6098: GO 6100
6100: DISABLE
6101: LD_INT 0
6103: PPUSH
6104: PPUSH
// begin if mpSibBomb <= 1 then
6105: LD_EXP 28
6109: PUSH
6110: LD_INT 1
6112: LESSEQUAL
6113: IFFALSE 6117
// exit ;
6115: GO 6190
// tmp := mpSibBomb ;
6117: LD_ADDR_VAR 0 2
6121: PUSH
6122: LD_EXP 28
6126: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
6127: LD_INT 35
6129: PPUSH
6130: CALL_OW 67
// tmp := tmp - 0 0$1 ;
6134: LD_ADDR_VAR 0 2
6138: PUSH
6139: LD_VAR 0 2
6143: PUSH
6144: LD_INT 35
6146: MINUS
6147: ST_TO_ADDR
// until not tmp ;
6148: LD_VAR 0 2
6152: NOT
6153: IFFALSE 6127
// for side := 1 to 8 do
6155: LD_ADDR_VAR 0 1
6159: PUSH
6160: DOUBLE
6161: LD_INT 1
6163: DEC
6164: ST_TO_ADDR
6165: LD_INT 8
6167: PUSH
6168: FOR_TO
6169: IFFALSE 6188
// SetTech ( tech_SibFiss , side , state_enabled ) ;
6171: LD_INT 25
6173: PPUSH
6174: LD_VAR 0 1
6178: PPUSH
6179: LD_INT 1
6181: PPUSH
6182: CALL_OW 322
6186: GO 6168
6188: POP
6189: POP
// end ;
6190: PPOPN 2
6192: END
// export mpBuildUpTimeDelay , mpBuildUpTimeActive ; function BeginBuildUp ; var i , j ; begin
6193: LD_INT 0
6195: PPUSH
6196: PPUSH
6197: PPUSH
// mpBuildUpTimeDelay := 0 ;
6198: LD_ADDR_EXP 46
6202: PUSH
6203: LD_INT 0
6205: ST_TO_ADDR
// if not mpBuildUpTime then
6206: LD_EXP 20
6210: NOT
6211: IFFALSE 6215
// exit ;
6213: GO 6404
// mpBuildUpTimeDelay := 4 4$00 + 1 1$00 * mpBuildUpTime ;
6215: LD_ADDR_EXP 46
6219: PUSH
6220: LD_INT 8400
6222: PUSH
6223: LD_INT 2100
6225: PUSH
6226: LD_EXP 20
6230: MUL
6231: PLUS
6232: ST_TO_ADDR
// mpBuildUpTimeActive := true ;
6233: LD_ADDR_EXP 47
6237: PUSH
6238: LD_INT 1
6240: ST_TO_ADDR
// for i := 1 to 8 do
6241: LD_ADDR_VAR 0 2
6245: PUSH
6246: DOUBLE
6247: LD_INT 1
6249: DEC
6250: ST_TO_ADDR
6251: LD_INT 8
6253: PUSH
6254: FOR_TO
6255: IFFALSE 6402
// if mpSidePositions [ i ] then
6257: LD_EXP 7
6261: PUSH
6262: LD_VAR 0 2
6266: ARRAY
6267: IFFALSE 6400
// begin SetAreaMapShow ( mpBuildUpAreas [ mpSidePositions [ i ] ] , 5 ) ;
6269: LD_EXP 19
6273: PUSH
6274: LD_EXP 7
6278: PUSH
6279: LD_VAR 0 2
6283: ARRAY
6284: ARRAY
6285: PPUSH
6286: LD_INT 5
6288: PPUSH
6289: CALL_OW 424
// for j := 1 to 8 do
6293: LD_ADDR_VAR 0 3
6297: PUSH
6298: DOUBLE
6299: LD_INT 1
6301: DEC
6302: ST_TO_ADDR
6303: LD_INT 8
6305: PUSH
6306: FOR_TO
6307: IFFALSE 6398
// if mpSidePositions [ j ] and ( ( mpSideTeams [ i ] <> mpSideTeams [ j ] ) or ( not mpTeamGame ) and ( i <> j ) ) then
6309: LD_EXP 7
6313: PUSH
6314: LD_VAR 0 3
6318: ARRAY
6319: IFFALSE 6368
6321: PUSH
6322: LD_EXP 8
6326: PUSH
6327: LD_VAR 0 2
6331: ARRAY
6332: PUSH
6333: LD_EXP 8
6337: PUSH
6338: LD_VAR 0 3
6342: ARRAY
6343: NONEQUAL
6344: IFTRUE 6367
6346: PUSH
6347: LD_EXP 11
6351: NOT
6352: IFFALSE 6366
6354: PUSH
6355: LD_VAR 0 2
6359: PUSH
6360: LD_VAR 0 3
6364: NONEQUAL
6365: AND
6366: OR
6367: AND
6368: IFFALSE 6396
// HideArea ( j , mpBuildUpAreas [ mpSidePositions [ i ] ] ) ;
6370: LD_VAR 0 3
6374: PPUSH
6375: LD_EXP 19
6379: PUSH
6380: LD_EXP 7
6384: PUSH
6385: LD_VAR 0 2
6389: ARRAY
6390: ARRAY
6391: PPUSH
6392: CALL_OW 333
6396: GO 6306
6398: POP
6399: POP
// end ;
6400: GO 6254
6402: POP
6403: POP
// end ;
6404: LD_VAR 0 1
6408: RET
// function EndBuildUp ; var i , j ; begin
6409: LD_INT 0
6411: PPUSH
6412: PPUSH
6413: PPUSH
// mpBuildUpTimeActive := false ;
6414: LD_ADDR_EXP 47
6418: PUSH
6419: LD_INT 0
6421: ST_TO_ADDR
// for i := 1 to 8 do
6422: LD_ADDR_VAR 0 2
6426: PUSH
6427: DOUBLE
6428: LD_INT 1
6430: DEC
6431: ST_TO_ADDR
6432: LD_INT 8
6434: PUSH
6435: FOR_TO
6436: IFFALSE 6583
// if mpSidePositions [ i ] then
6438: LD_EXP 7
6442: PUSH
6443: LD_VAR 0 2
6447: ARRAY
6448: IFFALSE 6581
// begin SetAreaMapShow ( mpBuildUpAreas [ mpSidePositions [ i ] ] , 0 ) ;
6450: LD_EXP 19
6454: PUSH
6455: LD_EXP 7
6459: PUSH
6460: LD_VAR 0 2
6464: ARRAY
6465: ARRAY
6466: PPUSH
6467: LD_INT 0
6469: PPUSH
6470: CALL_OW 424
// for j := 1 to 8 do
6474: LD_ADDR_VAR 0 3
6478: PUSH
6479: DOUBLE
6480: LD_INT 1
6482: DEC
6483: ST_TO_ADDR
6484: LD_INT 8
6486: PUSH
6487: FOR_TO
6488: IFFALSE 6579
// if mpSidePositions [ j ] and ( ( mpSideTeams [ i ] <> mpSideTeams [ j ] ) or ( not mpTeamGame ) and ( i <> j ) ) then
6490: LD_EXP 7
6494: PUSH
6495: LD_VAR 0 3
6499: ARRAY
6500: IFFALSE 6549
6502: PUSH
6503: LD_EXP 8
6507: PUSH
6508: LD_VAR 0 2
6512: ARRAY
6513: PUSH
6514: LD_EXP 8
6518: PUSH
6519: LD_VAR 0 3
6523: ARRAY
6524: NONEQUAL
6525: IFTRUE 6548
6527: PUSH
6528: LD_EXP 11
6532: NOT
6533: IFFALSE 6547
6535: PUSH
6536: LD_VAR 0 2
6540: PUSH
6541: LD_VAR 0 3
6545: NONEQUAL
6546: AND
6547: OR
6548: AND
6549: IFFALSE 6577
// ShowArea ( j , mpBuildUpAreas [ mpSidePositions [ i ] ] ) ;
6551: LD_VAR 0 3
6555: PPUSH
6556: LD_EXP 19
6560: PUSH
6561: LD_EXP 7
6565: PUSH
6566: LD_VAR 0 2
6570: ARRAY
6571: ARRAY
6572: PPUSH
6573: CALL_OW 334
6577: GO 6487
6579: POP
6580: POP
// end ;
6581: GO 6435
6583: POP
6584: POP
// end ;
6585: LD_VAR 0 1
6589: RET
// every 5 trigger mpBuildUpTimeActive marked mpActive do var i , un ;
6590: LD_EXP 47
6594: IFFALSE 6773
6596: GO 6598
6598: DISABLE
6599: LD_INT 0
6601: PPUSH
6602: PPUSH
// begin for i := 1 to 8 do
6603: LD_ADDR_VAR 0 1
6607: PUSH
6608: DOUBLE
6609: LD_INT 1
6611: DEC
6612: ST_TO_ADDR
6613: LD_INT 8
6615: PUSH
6616: FOR_TO
6617: IFFALSE 6770
// if mpSidePositions [ i ] then
6619: LD_EXP 7
6623: PUSH
6624: LD_VAR 0 1
6628: ARRAY
6629: IFFALSE 6768
// for un in FilterUnitsInArea ( mpBuildUpAreas [ mpSidePositions [ i ] ] , [ [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] , [ f_side , your_side ] ] ) do
6631: LD_ADDR_VAR 0 2
6635: PUSH
6636: LD_EXP 19
6640: PUSH
6641: LD_EXP 7
6645: PUSH
6646: LD_VAR 0 1
6650: ARRAY
6651: ARRAY
6652: PPUSH
6653: LD_INT 2
6655: PUSH
6656: LD_INT 21
6658: PUSH
6659: LD_INT 1
6661: PUSH
6662: EMPTY
6663: LIST
6664: LIST
6665: PUSH
6666: LD_INT 21
6668: PUSH
6669: LD_INT 2
6671: PUSH
6672: EMPTY
6673: LIST
6674: LIST
6675: PUSH
6676: EMPTY
6677: LIST
6678: LIST
6679: LIST
6680: PUSH
6681: LD_INT 22
6683: PUSH
6684: LD_OWVAR 2
6688: PUSH
6689: EMPTY
6690: LIST
6691: LIST
6692: PUSH
6693: EMPTY
6694: LIST
6695: LIST
6696: PPUSH
6697: CALL_OW 70
6701: PUSH
6702: FOR_IN
6703: IFFALSE 6766
// if ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) or ( not mpTeamGame ) and ( i <> your_side ) ) then
6705: LD_EXP 8
6709: PUSH
6710: LD_VAR 0 1
6714: ARRAY
6715: PUSH
6716: LD_EXP 8
6720: PUSH
6721: LD_OWVAR 2
6725: ARRAY
6726: NONEQUAL
6727: IFTRUE 6750
6729: PUSH
6730: LD_EXP 11
6734: NOT
6735: IFFALSE 6749
6737: PUSH
6738: LD_VAR 0 1
6742: PUSH
6743: LD_OWVAR 2
6747: NONEQUAL
6748: AND
6749: OR
6750: IFFALSE 6764
// ComMoveToArea ( un , BuildUpEscape ) ;
6752: LD_VAR 0 2
6756: PPUSH
6757: LD_INT 52
6759: PPUSH
6760: CALL_OW 113
6764: GO 6702
6766: POP
6767: POP
6768: GO 6616
6770: POP
6771: POP
// enable ;
6772: ENABLE
// end ;
6773: PPOPN 2
6775: END
// every 0 0$1 trigger mpBuildUpTime marked mpActive do var tmp ;
6776: LD_EXP 20
6780: IFFALSE 6830
6782: GO 6784
6784: DISABLE
6785: LD_INT 0
6787: PPUSH
// begin tmp := mpBuildUpTime ;
6788: LD_ADDR_VAR 0 1
6792: PUSH
6793: LD_EXP 20
6797: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
6798: LD_INT 35
6800: PPUSH
6801: CALL_OW 67
// tmp := tmp - 0 0$1 ;
6805: LD_ADDR_VAR 0 1
6809: PUSH
6810: LD_VAR 0 1
6814: PUSH
6815: LD_INT 35
6817: MINUS
6818: ST_TO_ADDR
// until not tmp ;
6819: LD_VAR 0 1
6823: NOT
6824: IFFALSE 6798
// EndBuildUp ;
6826: CALL 6409 0 0
// end ;
6830: PPOPN 1
6832: END
// every 0 0$1 trigger mpActive marked mpWin do
6833: LD_INT 100
6835: IFFALSE 6869
6837: GO 6839
6839: DISABLE
// begin if IAmServer then
6840: CALL_OW 518
6844: IFFALSE 6853
// wait ( 0 0$3 ) ;
6846: LD_INT 105
6848: PPUSH
6849: CALL_OW 67
// if Multiplayer then
6853: LD_OWVAR 4
6857: IFFALSE 6865
// YouWinInMultiplayer else
6859: CALL_OW 106
6863: GO 6869
// YouWin ;
6865: CALL_OW 103
// end ;
6869: END
// export function HasPowerByGameType ( gameType , side ) ; begin
6870: LD_INT 0
6872: PPUSH
// result := false ;
6873: LD_ADDR_VAR 0 3
6877: PUSH
6878: LD_INT 0
6880: ST_TO_ADDR
// case gameType of GameTypeNormal , GameTypeFamine :
6881: LD_VAR 0 1
6885: PUSH
6886: LD_INT 1
6888: DOUBLE
6889: EQUAL
6890: IFTRUE 6900
6892: LD_INT 5
6894: DOUBLE
6895: EQUAL
6896: IFTRUE 6900
6898: GO 6973
6900: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) ;
6901: LD_ADDR_VAR 0 3
6905: PUSH
6906: LD_INT 22
6908: PUSH
6909: LD_VAR 0 2
6913: PUSH
6914: EMPTY
6915: LIST
6916: LIST
6917: PUSH
6918: LD_INT 2
6920: PUSH
6921: LD_INT 21
6923: PUSH
6924: LD_INT 1
6926: PUSH
6927: EMPTY
6928: LIST
6929: LIST
6930: PUSH
6931: LD_INT 33
6933: PUSH
6934: LD_INT 3
6936: PUSH
6937: EMPTY
6938: LIST
6939: LIST
6940: PUSH
6941: LD_INT 33
6943: PUSH
6944: LD_INT 5
6946: PUSH
6947: EMPTY
6948: LIST
6949: LIST
6950: PUSH
6951: EMPTY
6952: LIST
6953: LIST
6954: LIST
6955: LIST
6956: PUSH
6957: EMPTY
6958: LIST
6959: LIST
6960: PPUSH
6961: CALL_OW 69
6965: PPUSH
6966: CALL 12212 0 1
6970: ST_TO_ADDR
// end ; GameTypeSurvival :
6971: GO 7212
6973: LD_INT 2
6975: DOUBLE
6976: EQUAL
6977: IFTRUE 6981
6979: GO 7111
6981: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ) and Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) ;
6982: LD_ADDR_VAR 0 3
6986: PUSH
6987: LD_INT 22
6989: PUSH
6990: LD_VAR 0 2
6994: PUSH
6995: EMPTY
6996: LIST
6997: LIST
6998: PUSH
6999: LD_INT 2
7001: PUSH
7002: LD_INT 30
7004: PUSH
7005: LD_INT 0
7007: PUSH
7008: EMPTY
7009: LIST
7010: LIST
7011: PUSH
7012: LD_INT 30
7014: PUSH
7015: LD_INT 1
7017: PUSH
7018: EMPTY
7019: LIST
7020: LIST
7021: PUSH
7022: EMPTY
7023: LIST
7024: LIST
7025: LIST
7026: PUSH
7027: EMPTY
7028: LIST
7029: LIST
7030: PPUSH
7031: CALL_OW 69
7035: PPUSH
7036: CALL 12212 0 1
7040: IFFALSE 7108
7042: PUSH
7043: LD_INT 22
7045: PUSH
7046: LD_VAR 0 2
7050: PUSH
7051: EMPTY
7052: LIST
7053: LIST
7054: PUSH
7055: LD_INT 2
7057: PUSH
7058: LD_INT 21
7060: PUSH
7061: LD_INT 1
7063: PUSH
7064: EMPTY
7065: LIST
7066: LIST
7067: PUSH
7068: LD_INT 33
7070: PUSH
7071: LD_INT 3
7073: PUSH
7074: EMPTY
7075: LIST
7076: LIST
7077: PUSH
7078: LD_INT 33
7080: PUSH
7081: LD_INT 5
7083: PUSH
7084: EMPTY
7085: LIST
7086: LIST
7087: PUSH
7088: EMPTY
7089: LIST
7090: LIST
7091: LIST
7092: LIST
7093: PUSH
7094: EMPTY
7095: LIST
7096: LIST
7097: PPUSH
7098: CALL_OW 69
7102: PPUSH
7103: CALL 12212 0 1
7107: AND
7108: ST_TO_ADDR
// end ; GameTypeKing :
7109: GO 7212
7111: LD_INT 3
7113: DOUBLE
7114: EQUAL
7115: IFTRUE 7119
7117: GO 7211
7119: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) and HowMuchPointsKing ( side ) < mpPoints ;
7120: LD_ADDR_VAR 0 3
7124: PUSH
7125: LD_INT 22
7127: PUSH
7128: LD_VAR 0 2
7132: PUSH
7133: EMPTY
7134: LIST
7135: LIST
7136: PUSH
7137: LD_INT 2
7139: PUSH
7140: LD_INT 21
7142: PUSH
7143: LD_INT 1
7145: PUSH
7146: EMPTY
7147: LIST
7148: LIST
7149: PUSH
7150: LD_INT 33
7152: PUSH
7153: LD_INT 3
7155: PUSH
7156: EMPTY
7157: LIST
7158: LIST
7159: PUSH
7160: LD_INT 33
7162: PUSH
7163: LD_INT 5
7165: PUSH
7166: EMPTY
7167: LIST
7168: LIST
7169: PUSH
7170: EMPTY
7171: LIST
7172: LIST
7173: LIST
7174: LIST
7175: PUSH
7176: EMPTY
7177: LIST
7178: LIST
7179: PPUSH
7180: CALL_OW 69
7184: PPUSH
7185: CALL 12212 0 1
7189: IFFALSE 7208
7191: PUSH
7192: LD_VAR 0 2
7196: PPUSH
7197: CALL 60108 0 1
7201: PUSH
7202: LD_EXP 35
7206: LESS
7207: AND
7208: ST_TO_ADDR
// end ; end ;
7209: GO 7212
7211: POP
// end ;
7212: LD_VAR 0 3
7216: RET
// every 0 0$1 trigger mpActive marked mpLose do var gameIsOn , i ;
7217: LD_INT 100
7219: IFFALSE 7449
7221: GO 7223
7223: DISABLE
7224: LD_INT 0
7226: PPUSH
7227: PPUSH
// begin if Multiplayer then
7228: LD_OWVAR 4
7232: IFFALSE 7240
// SetPlayerSpectator ( ) else
7234: CALL_OW 572
7238: GO 7249
// FogOff ( your_side ) ;
7240: LD_OWVAR 2
7244: PPUSH
7245: CALL_OW 344
// repeat gameIsOn := false ;
7249: LD_ADDR_VAR 0 1
7253: PUSH
7254: LD_INT 0
7256: ST_TO_ADDR
// for i := 1 to 8 do
7257: LD_ADDR_VAR 0 2
7261: PUSH
7262: DOUBLE
7263: LD_INT 1
7265: DEC
7266: ST_TO_ADDR
7267: LD_INT 8
7269: PUSH
7270: FOR_TO
7271: IFFALSE 7401
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
7273: LD_EXP 7
7277: PUSH
7278: LD_VAR 0 2
7282: ARRAY
7283: IFFALSE 7296
7285: PUSH
7286: LD_VAR 0 2
7290: PPUSH
7291: CALL_OW 108
7295: AND
7296: IFFALSE 7310
7298: PUSH
7299: LD_VAR 0 2
7303: PUSH
7304: LD_OWVAR 2
7308: NONEQUAL
7309: AND
7310: IFFALSE 7399
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
7312: LD_EXP 8
7316: PUSH
7317: LD_VAR 0 2
7321: ARRAY
7322: NOT
7323: IFTRUE 7371
7325: PUSH
7326: LD_EXP 8
7330: PUSH
7331: LD_VAR 0 2
7335: ARRAY
7336: PUSH
7337: LD_EXP 8
7341: PUSH
7342: LD_OWVAR 2
7346: ARRAY
7347: NONEQUAL
7348: IFFALSE 7370
7350: PUSH
7351: LD_OWVAR 2
7355: PPUSH
7356: LD_VAR 0 2
7360: PPUSH
7361: CALL_OW 81
7365: PUSH
7366: LD_INT 1
7368: NONEQUAL
7369: AND
7370: OR
7371: IFFALSE 7399
// if HasPowerByGameType ( mpGameType , i ) then
7373: LD_EXP 3
7377: PPUSH
7378: LD_VAR 0 2
7382: PPUSH
7383: CALL 6870 0 2
7387: IFFALSE 7399
// begin gameIsOn := true ;
7389: LD_ADDR_VAR 0 1
7393: PUSH
7394: LD_INT 1
7396: ST_TO_ADDR
// break ;
7397: GO 7401
// end ;
7399: GO 7270
7401: POP
7402: POP
// wait ( 100 ) ;
7403: LD_INT 100
7405: PPUSH
7406: CALL_OW 67
// until not gameIsOn ;
7410: LD_VAR 0 1
7414: NOT
7415: IFFALSE 7249
// if IAmServer then
7417: CALL_OW 518
7421: IFFALSE 7430
// wait ( 0 0$3 ) ;
7423: LD_INT 105
7425: PPUSH
7426: CALL_OW 67
// if Multiplayer then
7430: LD_OWVAR 4
7434: IFFALSE 7442
// YouLostInMultiplayer else
7436: CALL_OW 107
7440: GO 7449
// YouLost (  ) ;
7442: LD_STRING 
7444: PPUSH
7445: CALL_OW 104
// end ;
7449: PPOPN 2
7451: END
// every 0 0$10 trigger mpRespawn marked mpActive do var i , j , tmp , spawn , sides ;
7452: LD_EXP 33
7456: IFFALSE 7840
7458: GO 7460
7460: DISABLE
7461: LD_INT 0
7463: PPUSH
7464: PPUSH
7465: PPUSH
7466: PPUSH
7467: PPUSH
// begin sides := [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 ] ;
7468: LD_ADDR_VAR 0 5
7472: PUSH
7473: LD_INT 1
7475: PUSH
7476: LD_INT 2
7478: PUSH
7479: LD_INT 3
7481: PUSH
7482: LD_INT 4
7484: PUSH
7485: LD_INT 5
7487: PUSH
7488: LD_INT 6
7490: PUSH
7491: LD_INT 7
7493: PUSH
7494: LD_INT 8
7496: PUSH
7497: EMPTY
7498: LIST
7499: LIST
7500: LIST
7501: LIST
7502: LIST
7503: LIST
7504: LIST
7505: LIST
7506: ST_TO_ADDR
// repeat wait ( 0 0$10 ) ;
7507: LD_INT 350
7509: PPUSH
7510: CALL_OW 67
// for i := 1 to 8 do
7514: LD_ADDR_VAR 0 1
7518: PUSH
7519: DOUBLE
7520: LD_INT 1
7522: DEC
7523: ST_TO_ADDR
7524: LD_INT 8
7526: PUSH
7527: FOR_TO
7528: IFFALSE 7810
// begin j := sides [ i ] ;
7530: LD_ADDR_VAR 0 2
7534: PUSH
7535: LD_VAR 0 5
7539: PUSH
7540: LD_VAR 0 1
7544: ARRAY
7545: ST_TO_ADDR
// if Count ( mpRespawnPull [ j ] ) and MultiplayerSideAlive ( j ) and HasPowerByGameType ( mpGameType , j ) then
7546: LD_EXP 40
7550: PUSH
7551: LD_VAR 0 2
7555: ARRAY
7556: PPUSH
7557: CALL 12212 0 1
7561: IFFALSE 7574
7563: PUSH
7564: LD_VAR 0 2
7568: PPUSH
7569: CALL_OW 108
7573: AND
7574: IFFALSE 7592
7576: PUSH
7577: LD_EXP 3
7581: PPUSH
7582: LD_VAR 0 2
7586: PPUSH
7587: CALL 6870 0 2
7591: AND
7592: IFFALSE 7808
// begin wait ( mpRespawn div 3 ) ;
7594: LD_EXP 33
7598: PUSH
7599: LD_INT 3
7601: DIV
7602: PPUSH
7603: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , j ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
7607: LD_ADDR_VAR 0 3
7611: PUSH
7612: LD_INT 22
7614: PUSH
7615: LD_VAR 0 2
7619: PUSH
7620: EMPTY
7621: LIST
7622: LIST
7623: PUSH
7624: LD_INT 50
7626: PUSH
7627: EMPTY
7628: LIST
7629: PUSH
7630: LD_INT 2
7632: PUSH
7633: LD_INT 30
7635: PUSH
7636: LD_INT 0
7638: PUSH
7639: EMPTY
7640: LIST
7641: LIST
7642: PUSH
7643: LD_INT 30
7645: PUSH
7646: LD_INT 1
7648: PUSH
7649: EMPTY
7650: LIST
7651: LIST
7652: PUSH
7653: EMPTY
7654: LIST
7655: LIST
7656: LIST
7657: PUSH
7658: EMPTY
7659: LIST
7660: LIST
7661: LIST
7662: PPUSH
7663: CALL_OW 69
7667: ST_TO_ADDR
// if not tmp or not MultiplayerSideAlive ( j ) or not HasPowerByGameType ( mpGameType , j ) then
7668: LD_VAR 0 3
7672: NOT
7673: IFTRUE 7687
7675: PUSH
7676: LD_VAR 0 2
7680: PPUSH
7681: CALL_OW 108
7685: NOT
7686: OR
7687: IFTRUE 7706
7689: PUSH
7690: LD_EXP 3
7694: PPUSH
7695: LD_VAR 0 2
7699: PPUSH
7700: CALL 6870 0 2
7704: NOT
7705: OR
7706: IFFALSE 7710
// continue ;
7708: GO 7527
// spawn := tmp [ 1 ] ;
7710: LD_ADDR_VAR 0 4
7714: PUSH
7715: LD_VAR 0 3
7719: PUSH
7720: LD_INT 1
7722: ARRAY
7723: ST_TO_ADDR
// PlaceUnitXYR ( mpRespawnPull [ j ] [ 1 ] , GetX ( spawn ) , GetY ( spawn ) , 32 , true ) ;
7724: LD_EXP 40
7728: PUSH
7729: LD_VAR 0 2
7733: ARRAY
7734: PUSH
7735: LD_INT 1
7737: ARRAY
7738: PPUSH
7739: LD_VAR 0 4
7743: PPUSH
7744: CALL_OW 250
7748: PPUSH
7749: LD_VAR 0 4
7753: PPUSH
7754: CALL_OW 251
7758: PPUSH
7759: LD_INT 32
7761: PPUSH
7762: LD_INT 1
7764: PPUSH
7765: CALL_OW 50
// mpRespawnPull := Replace ( mpRespawnPull , j , Delete ( mpRespawnPull [ j ] , 1 ) ) ;
7769: LD_ADDR_EXP 40
7773: PUSH
7774: LD_EXP 40
7778: PPUSH
7779: LD_VAR 0 2
7783: PPUSH
7784: LD_EXP 40
7788: PUSH
7789: LD_VAR 0 2
7793: ARRAY
7794: PPUSH
7795: LD_INT 1
7797: PPUSH
7798: CALL_OW 3
7802: PPUSH
7803: CALL_OW 1
7807: ST_TO_ADDR
// end ; end ;
7808: GO 7527
7810: POP
7811: POP
// sides := Reindex ( sides , 1 , 8 , true ) ;
7812: LD_ADDR_VAR 0 5
7816: PUSH
7817: LD_VAR 0 5
7821: PPUSH
7822: LD_INT 1
7824: PPUSH
7825: LD_INT 8
7827: PPUSH
7828: LD_INT 1
7830: PPUSH
7831: CALL 14504 0 4
7835: ST_TO_ADDR
// until false ;
7836: LD_INT 0
7838: IFFALSE 7507
// end ;
7840: PPOPN 5
7842: END
// every 0 0$1 marked mpActive do
7843: GO 7845
7845: DISABLE
// begin enable ;
7846: ENABLE
// if not mpDisplayStrings then
7847: LD_EXP 38
7851: NOT
7852: IFFALSE 7863
// begin display_strings := [ ] ;
7854: LD_ADDR_OWVAR 47
7858: PUSH
7859: EMPTY
7860: ST_TO_ADDR
// exit ;
7861: GO 7873
// end ; display_strings := mpDisplayStrings ;
7863: LD_ADDR_OWVAR 47
7867: PUSH
7868: LD_EXP 38
7872: ST_TO_ADDR
// end ; end_of_file
7873: END
// export function Multiplayer_UnitDestroyed ( un ) ; var i , ape , tag , class , area , nation , side , tmp ; begin
7874: LD_INT 0
7876: PPUSH
7877: PPUSH
7878: PPUSH
7879: PPUSH
7880: PPUSH
7881: PPUSH
7882: PPUSH
7883: PPUSH
7884: PPUSH
// if GetType ( un ) = unit_vehicle then
7885: LD_VAR 0 1
7889: PPUSH
7890: CALL_OW 247
7894: PUSH
7895: LD_INT 2
7897: EQUAL
7898: IFFALSE 7902
// exit ;
7900: GO 8540
// side := GetSide ( un ) ;
7902: LD_ADDR_VAR 0 9
7906: PUSH
7907: LD_VAR 0 1
7911: PPUSH
7912: CALL_OW 255
7916: ST_TO_ADDR
// if mpGameType = GameTypeSurvival then
7917: LD_EXP 3
7921: PUSH
7922: LD_INT 2
7924: EQUAL
7925: IFFALSE 8001
// if GetBType ( un ) in [ b_depot , b_warehouse ] then
7927: LD_VAR 0 1
7931: PPUSH
7932: CALL_OW 266
7936: PUSH
7937: LD_INT 0
7939: PUSH
7940: LD_INT 1
7942: PUSH
7943: EMPTY
7944: LIST
7945: LIST
7946: IN
7947: IFFALSE 8001
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_human ] ] ) do
7949: LD_ADDR_VAR 0 3
7953: PUSH
7954: LD_INT 22
7956: PUSH
7957: LD_VAR 0 9
7961: PUSH
7962: EMPTY
7963: LIST
7964: LIST
7965: PUSH
7966: LD_INT 21
7968: PUSH
7969: LD_INT 1
7971: PUSH
7972: EMPTY
7973: LIST
7974: LIST
7975: PUSH
7976: EMPTY
7977: LIST
7978: LIST
7979: PPUSH
7980: CALL_OW 69
7984: PUSH
7985: FOR_IN
7986: IFFALSE 7999
// KillUnit ( i ) ;
7988: LD_VAR 0 3
7992: PPUSH
7993: CALL_OW 66
7997: GO 7985
7999: POP
8000: POP
// end ; if GetClass ( un ) in [ class_apeman , class_apeman_kamikaze , class_apeman_soldier , class_apeman_engineer ] or GetControl ( un ) = control_apeman then
8001: LD_VAR 0 1
8005: PPUSH
8006: CALL_OW 257
8010: PUSH
8011: LD_INT 12
8013: PUSH
8014: LD_INT 17
8016: PUSH
8017: LD_INT 15
8019: PUSH
8020: LD_INT 16
8022: PUSH
8023: EMPTY
8024: LIST
8025: LIST
8026: LIST
8027: LIST
8028: IN
8029: IFTRUE 8046
8031: PUSH
8032: LD_VAR 0 1
8036: PPUSH
8037: CALL_OW 263
8041: PUSH
8042: LD_INT 5
8044: EQUAL
8045: OR
8046: IFFALSE 8265
// begin tag := 0 ;
8048: LD_ADDR_VAR 0 5
8052: PUSH
8053: LD_INT 0
8055: ST_TO_ADDR
// for i := 1 to 8 do
8056: LD_ADDR_VAR 0 3
8060: PUSH
8061: DOUBLE
8062: LD_INT 1
8064: DEC
8065: ST_TO_ADDR
8066: LD_INT 8
8068: PUSH
8069: FOR_TO
8070: IFFALSE 8104
// if un in mpApePosIndex [ i ] then
8072: LD_VAR 0 1
8076: PUSH
8077: LD_EXP 32
8081: PUSH
8082: LD_VAR 0 3
8086: ARRAY
8087: IN
8088: IFFALSE 8102
// begin tag := i ;
8090: LD_ADDR_VAR 0 5
8094: PUSH
8095: LD_VAR 0 3
8099: ST_TO_ADDR
// break ;
8100: GO 8104
// end ;
8102: GO 8069
8104: POP
8105: POP
// if not tag then
8106: LD_VAR 0 5
8110: NOT
8111: IFFALSE 8115
// exit ;
8113: GO 8540
// area := mpApemansArea [ mpSidePositions [ tag ] ] ;
8115: LD_ADDR_VAR 0 7
8119: PUSH
8120: LD_EXP 31
8124: PUSH
8125: LD_EXP 7
8129: PUSH
8130: LD_VAR 0 5
8134: ARRAY
8135: ARRAY
8136: ST_TO_ADDR
// if not area then
8137: LD_VAR 0 7
8141: NOT
8142: IFFALSE 8146
// exit ;
8144: GO 8540
// wait ( 4 4$00 ) ;
8146: LD_INT 8400
8148: PPUSH
8149: CALL_OW 67
// repeat wait ( 10 ) ;
8153: LD_INT 10
8155: PPUSH
8156: CALL_OW 67
// until not mpBlockRespThread ;
8160: LD_EXP 45
8164: NOT
8165: IFFALSE 8153
// mpBlockRespThread := true ;
8167: LD_ADDR_EXP 45
8171: PUSH
8172: LD_INT 1
8174: ST_TO_ADDR
// PrepareApeman ( 0 ) ;
8175: LD_INT 0
8177: PPUSH
8178: CALL 44271 0 1
// ape := CreateHuman ;
8182: LD_ADDR_VAR 0 4
8186: PUSH
8187: CALL_OW 44
8191: ST_TO_ADDR
// mpApePosIndex := Replace ( mpApePosIndex , tag , Join ( mpApePosIndex [ tag ] , ape ) ) ;
8192: LD_ADDR_EXP 32
8196: PUSH
8197: LD_EXP 32
8201: PPUSH
8202: LD_VAR 0 5
8206: PPUSH
8207: LD_EXP 32
8211: PUSH
8212: LD_VAR 0 5
8216: ARRAY
8217: PPUSH
8218: LD_VAR 0 4
8222: PPUSH
8223: CALL 48144 0 2
8227: PPUSH
8228: CALL_OW 1
8232: ST_TO_ADDR
// PlaceUnitArea ( ape , area , false ) ;
8233: LD_VAR 0 4
8237: PPUSH
8238: LD_VAR 0 7
8242: PPUSH
8243: LD_INT 0
8245: PPUSH
8246: CALL_OW 49
// wait ( 10 ) ;
8250: LD_INT 10
8252: PPUSH
8253: CALL_OW 67
// mpBlockRespThread := false ;
8257: LD_ADDR_EXP 45
8261: PUSH
8262: LD_INT 0
8264: ST_TO_ADDR
// end ; if GetType ( un ) = unit_human and GetNation ( un ) > nation_nature then
8265: LD_VAR 0 1
8269: PPUSH
8270: CALL_OW 247
8274: PUSH
8275: LD_INT 1
8277: EQUAL
8278: IFFALSE 8295
8280: PUSH
8281: LD_VAR 0 1
8285: PPUSH
8286: CALL_OW 248
8290: PUSH
8291: LD_INT 0
8293: GREATER
8294: AND
8295: IFFALSE 8540
// begin if not mpRespawn then
8297: LD_EXP 33
8301: NOT
8302: IFFALSE 8306
// exit ;
8304: GO 8540
// if not MultiplayerSideAlive ( side ) and not HasPowerByGameType ( mpGameType , side ) then
8306: LD_VAR 0 9
8310: PPUSH
8311: CALL_OW 108
8315: NOT
8316: IFFALSE 8335
8318: PUSH
8319: LD_EXP 3
8323: PPUSH
8324: LD_VAR 0 9
8328: PPUSH
8329: CALL 6870 0 2
8333: NOT
8334: AND
8335: IFFALSE 8339
// exit ;
8337: GO 8540
// side := GetSide ( un ) ;
8339: LD_ADDR_VAR 0 9
8343: PUSH
8344: LD_VAR 0 1
8348: PPUSH
8349: CALL_OW 255
8353: ST_TO_ADDR
// nation := GetNation ( un ) ;
8354: LD_ADDR_VAR 0 8
8358: PUSH
8359: LD_VAR 0 1
8363: PPUSH
8364: CALL_OW 248
8368: ST_TO_ADDR
// class := GetClass ( un ) ;
8369: LD_ADDR_VAR 0 6
8373: PUSH
8374: LD_VAR 0 1
8378: PPUSH
8379: CALL_OW 257
8383: ST_TO_ADDR
// if class > 4 then
8384: LD_VAR 0 6
8388: PUSH
8389: LD_INT 4
8391: GREATER
8392: IFFALSE 8402
// class := 1 ;
8394: LD_ADDR_VAR 0 6
8398: PUSH
8399: LD_INT 1
8401: ST_TO_ADDR
// repeat wait ( 10 ) ;
8402: LD_INT 10
8404: PPUSH
8405: CALL_OW 67
// until not mpBlockRespThread ;
8409: LD_EXP 45
8413: NOT
8414: IFFALSE 8402
// mpBlockRespThread := true ;
8416: LD_ADDR_EXP 45
8420: PUSH
8421: LD_INT 1
8423: ST_TO_ADDR
// uc_side := side ;
8424: LD_ADDR_OWVAR 20
8428: PUSH
8429: LD_VAR 0 9
8433: ST_TO_ADDR
// uc_nation := nation ;
8434: LD_ADDR_OWVAR 21
8438: PUSH
8439: LD_VAR 0 8
8443: ST_TO_ADDR
// PrepareHuman ( false , class , 2 ) ;
8444: LD_INT 0
8446: PPUSH
8447: LD_VAR 0 6
8451: PPUSH
8452: LD_INT 2
8454: PPUSH
8455: CALL_OW 380
// un := CreateHuman ;
8459: LD_ADDR_VAR 0 1
8463: PUSH
8464: CALL_OW 44
8468: ST_TO_ADDR
// mpRespawnPull := Replace ( mpRespawnPull , side , Replace ( mpRespawnPull [ side ] , mpRespawnPull [ side ] + 1 , un ) ) ;
8469: LD_ADDR_EXP 40
8473: PUSH
8474: LD_EXP 40
8478: PPUSH
8479: LD_VAR 0 9
8483: PPUSH
8484: LD_EXP 40
8488: PUSH
8489: LD_VAR 0 9
8493: ARRAY
8494: PPUSH
8495: LD_EXP 40
8499: PUSH
8500: LD_VAR 0 9
8504: ARRAY
8505: PUSH
8506: LD_INT 1
8508: PLUS
8509: PPUSH
8510: LD_VAR 0 1
8514: PPUSH
8515: CALL_OW 1
8519: PPUSH
8520: CALL_OW 1
8524: ST_TO_ADDR
// wait ( 10 ) ;
8525: LD_INT 10
8527: PPUSH
8528: CALL_OW 67
// mpBlockRespThread := false ;
8532: LD_ADDR_EXP 45
8536: PUSH
8537: LD_INT 0
8539: ST_TO_ADDR
// end ; end ;
8540: LD_VAR 0 2
8544: RET
// export function Multiplayer_BuildingComplete ( building ) ; begin
8545: LD_INT 0
8547: PPUSH
// if GetBType ( building ) in [ b_depot , b_warehouse ] then
8548: LD_VAR 0 1
8552: PPUSH
8553: CALL_OW 266
8557: PUSH
8558: LD_INT 0
8560: PUSH
8561: LD_INT 1
8563: PUSH
8564: EMPTY
8565: LIST
8566: LIST
8567: IN
8568: IFFALSE 8593
// SetBName ( building , @ & GetSide ( building ) ) ;
8570: LD_VAR 0 1
8574: PPUSH
8575: LD_STRING @
8577: PUSH
8578: LD_VAR 0 1
8582: PPUSH
8583: CALL_OW 255
8587: STR
8588: PPUSH
8589: CALL_OW 500
// end ;
8593: LD_VAR 0 2
8597: RET
// export function Multiplayer_BuildingCaptured ( building , oldSide , unit ) ; var i ; begin
8598: LD_INT 0
8600: PPUSH
8601: PPUSH
// if mpGameType = GameTypeSurvival and GetBType ( building ) in [ b_depot , b_warehouse ] then
8602: LD_EXP 3
8606: PUSH
8607: LD_INT 2
8609: EQUAL
8610: IFFALSE 8634
8612: PUSH
8613: LD_VAR 0 1
8617: PPUSH
8618: CALL_OW 266
8622: PUSH
8623: LD_INT 0
8625: PUSH
8626: LD_INT 1
8628: PUSH
8629: EMPTY
8630: LIST
8631: LIST
8632: IN
8633: AND
8634: IFFALSE 8713
// begin SetSide ( building , oldSide ) ;
8636: LD_VAR 0 1
8640: PPUSH
8641: LD_VAR 0 2
8645: PPUSH
8646: CALL_OW 235
// KillUnit ( building ) ;
8650: LD_VAR 0 1
8654: PPUSH
8655: CALL_OW 66
// for i in FilterAllUnits ( [ [ f_side , oldSide ] , [ f_type , unit_human ] ] ) do
8659: LD_ADDR_VAR 0 5
8663: PUSH
8664: LD_INT 22
8666: PUSH
8667: LD_VAR 0 2
8671: PUSH
8672: EMPTY
8673: LIST
8674: LIST
8675: PUSH
8676: LD_INT 21
8678: PUSH
8679: LD_INT 1
8681: PUSH
8682: EMPTY
8683: LIST
8684: LIST
8685: PUSH
8686: EMPTY
8687: LIST
8688: LIST
8689: PPUSH
8690: CALL_OW 69
8694: PUSH
8695: FOR_IN
8696: IFFALSE 8709
// KillUnit ( i ) ;
8698: LD_VAR 0 5
8702: PPUSH
8703: CALL_OW 66
8707: GO 8695
8709: POP
8710: POP
// exit ;
8711: GO 8758
// end ; if GetBType ( building ) in [ b_depot , b_warehouse ] then
8713: LD_VAR 0 1
8717: PPUSH
8718: CALL_OW 266
8722: PUSH
8723: LD_INT 0
8725: PUSH
8726: LD_INT 1
8728: PUSH
8729: EMPTY
8730: LIST
8731: LIST
8732: IN
8733: IFFALSE 8758
// SetBName ( building , @ & GetSide ( building ) ) ;
8735: LD_VAR 0 1
8739: PPUSH
8740: LD_STRING @
8742: PUSH
8743: LD_VAR 0 1
8747: PPUSH
8748: CALL_OW 255
8752: STR
8753: PPUSH
8754: CALL_OW 500
// end ;
8758: LD_VAR 0 4
8762: RET
// export function Multiplayer_OilExtracted ( building , side , base , amount ) ; var i , value ; begin
8763: LD_INT 0
8765: PPUSH
8766: PPUSH
8767: PPUSH
// if mpGameType <> GameTypeFamine then
8768: LD_EXP 3
8772: PUSH
8773: LD_INT 5
8775: NONEQUAL
8776: IFFALSE 8780
// exit ;
8778: GO 8994
// for i := 1 to mpGlobalOilDeposits do
8780: LD_ADDR_VAR 0 6
8784: PUSH
8785: DOUBLE
8786: LD_INT 1
8788: DEC
8789: ST_TO_ADDR
8790: LD_EXP 41
8794: PUSH
8795: FOR_TO
8796: IFFALSE 8992
// begin if HexInfo ( mpGlobalOilDeposits [ i ] [ 1 ] , mpGlobalOilDeposits [ i ] [ 2 ] ) = building then
8798: LD_EXP 41
8802: PUSH
8803: LD_VAR 0 6
8807: ARRAY
8808: PUSH
8809: LD_INT 1
8811: ARRAY
8812: PPUSH
8813: LD_EXP 41
8817: PUSH
8818: LD_VAR 0 6
8822: ARRAY
8823: PUSH
8824: LD_INT 2
8826: ARRAY
8827: PPUSH
8828: CALL_OW 428
8832: PUSH
8833: LD_VAR 0 1
8837: EQUAL
8838: IFFALSE 8990
// begin value := mpGlobalOilDeposits [ i ] [ 3 ] ;
8840: LD_ADDR_VAR 0 7
8844: PUSH
8845: LD_EXP 41
8849: PUSH
8850: LD_VAR 0 6
8854: ARRAY
8855: PUSH
8856: LD_INT 3
8858: ARRAY
8859: ST_TO_ADDR
// value := Dec ( value ) ;
8860: LD_ADDR_VAR 0 7
8864: PUSH
8865: LD_VAR 0 7
8869: PPUSH
8870: CALL 49539 0 1
8874: ST_TO_ADDR
// mpGlobalOilDeposits := Replace ( mpGlobalOilDeposits , i , Replace ( mpGlobalOilDeposits [ i ] , 3 , value ) ) ;
8875: LD_ADDR_EXP 41
8879: PUSH
8880: LD_EXP 41
8884: PPUSH
8885: LD_VAR 0 6
8889: PPUSH
8890: LD_EXP 41
8894: PUSH
8895: LD_VAR 0 6
8899: ARRAY
8900: PPUSH
8901: LD_INT 3
8903: PPUSH
8904: LD_VAR 0 7
8908: PPUSH
8909: CALL_OW 1
8913: PPUSH
8914: CALL_OW 1
8918: ST_TO_ADDR
// SetUnitDisplayNumber ( building , value ) ;
8919: LD_VAR 0 1
8923: PPUSH
8924: LD_VAR 0 7
8928: PPUSH
8929: CALL_OW 505
// if value = 0 then
8933: LD_VAR 0 7
8937: PUSH
8938: LD_INT 0
8940: EQUAL
8941: IFFALSE 8990
// begin RemoveDepositXY ( mpGlobalOilDeposits [ i ] [ 1 ] , mpGlobalOilDeposits [ i ] [ 2 ] ) ;
8943: LD_EXP 41
8947: PUSH
8948: LD_VAR 0 6
8952: ARRAY
8953: PUSH
8954: LD_INT 1
8956: ARRAY
8957: PPUSH
8958: LD_EXP 41
8962: PUSH
8963: LD_VAR 0 6
8967: ARRAY
8968: PUSH
8969: LD_INT 2
8971: ARRAY
8972: PPUSH
8973: CALL_OW 63
// KillUnit ( building ) ;
8977: LD_VAR 0 1
8981: PPUSH
8982: CALL_OW 66
// exit ;
8986: POP
8987: POP
8988: GO 8994
// end ; end ; end ;
8990: GO 8795
8992: POP
8993: POP
// end ;
8994: LD_VAR 0 5
8998: RET
// export function Multiplayer_SibExtracted ( building , side , base , amount ) ; var i , value ; begin
8999: LD_INT 0
9001: PPUSH
9002: PPUSH
9003: PPUSH
// if mpGameType <> GameTypeFamine then
9004: LD_EXP 3
9008: PUSH
9009: LD_INT 5
9011: NONEQUAL
9012: IFFALSE 9016
// exit ;
9014: GO 9230
// for i := 1 to mpGlobalSibDeposits do
9016: LD_ADDR_VAR 0 6
9020: PUSH
9021: DOUBLE
9022: LD_INT 1
9024: DEC
9025: ST_TO_ADDR
9026: LD_EXP 42
9030: PUSH
9031: FOR_TO
9032: IFFALSE 9228
// begin if HexInfo ( mpGlobalSibDeposits [ i ] [ 1 ] , mpGlobalSibDeposits [ i ] [ 2 ] ) = building then
9034: LD_EXP 42
9038: PUSH
9039: LD_VAR 0 6
9043: ARRAY
9044: PUSH
9045: LD_INT 1
9047: ARRAY
9048: PPUSH
9049: LD_EXP 42
9053: PUSH
9054: LD_VAR 0 6
9058: ARRAY
9059: PUSH
9060: LD_INT 2
9062: ARRAY
9063: PPUSH
9064: CALL_OW 428
9068: PUSH
9069: LD_VAR 0 1
9073: EQUAL
9074: IFFALSE 9226
// begin value := mpGlobalSibDeposits [ i ] [ 3 ] ;
9076: LD_ADDR_VAR 0 7
9080: PUSH
9081: LD_EXP 42
9085: PUSH
9086: LD_VAR 0 6
9090: ARRAY
9091: PUSH
9092: LD_INT 3
9094: ARRAY
9095: ST_TO_ADDR
// value := Dec ( value ) ;
9096: LD_ADDR_VAR 0 7
9100: PUSH
9101: LD_VAR 0 7
9105: PPUSH
9106: CALL 49539 0 1
9110: ST_TO_ADDR
// mpGlobalSibDeposits := Replace ( mpGlobalSibDeposits , i , Replace ( mpGlobalSibDeposits [ i ] , 3 , value ) ) ;
9111: LD_ADDR_EXP 42
9115: PUSH
9116: LD_EXP 42
9120: PPUSH
9121: LD_VAR 0 6
9125: PPUSH
9126: LD_EXP 42
9130: PUSH
9131: LD_VAR 0 6
9135: ARRAY
9136: PPUSH
9137: LD_INT 3
9139: PPUSH
9140: LD_VAR 0 7
9144: PPUSH
9145: CALL_OW 1
9149: PPUSH
9150: CALL_OW 1
9154: ST_TO_ADDR
// SetUnitDisplayNumber ( building , value ) ;
9155: LD_VAR 0 1
9159: PPUSH
9160: LD_VAR 0 7
9164: PPUSH
9165: CALL_OW 505
// if value = 0 then
9169: LD_VAR 0 7
9173: PUSH
9174: LD_INT 0
9176: EQUAL
9177: IFFALSE 9226
// begin RemoveDepositXY ( mpGlobalSibDeposits [ i ] [ 1 ] , mpGlobalSibDeposits [ i ] [ 2 ] ) ;
9179: LD_EXP 42
9183: PUSH
9184: LD_VAR 0 6
9188: ARRAY
9189: PUSH
9190: LD_INT 1
9192: ARRAY
9193: PPUSH
9194: LD_EXP 42
9198: PUSH
9199: LD_VAR 0 6
9203: ARRAY
9204: PUSH
9205: LD_INT 2
9207: ARRAY
9208: PPUSH
9209: CALL_OW 63
// KillUnit ( building ) ;
9213: LD_VAR 0 1
9217: PPUSH
9218: CALL_OW 66
// exit ;
9222: POP
9223: POP
9224: GO 9230
// end ; end ; end ;
9226: GO 9031
9228: POP
9229: POP
// end ; end_of_file
9230: LD_VAR 0 5
9234: RET
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeNormal do var i , canWin ;
9235: LD_EXP 39
9239: IFFALSE 9247
9241: PUSH
9242: CALL 9457 0 0
9246: AND
9247: IFFALSE 9255
9249: PUSH
9250: LD_OWVAR 4
9254: AND
9255: IFFALSE 9454
9257: GO 9259
9259: DISABLE
9260: LD_INT 0
9262: PPUSH
9263: PPUSH
// begin canWin := false ;
9264: LD_ADDR_VAR 0 2
9268: PUSH
9269: LD_INT 0
9271: ST_TO_ADDR
// if not HasPower ( your_side ) then
9272: LD_OWVAR 2
9276: PPUSH
9277: CALL 9499 0 1
9281: NOT
9282: IFFALSE 9293
// begin Multiplayer_Loose_Message ;
9284: CALL_OW 521
// enable ( mpLose ) ;
9288: LD_INT 102
9290: ENABLE_MARKED
// end else
9291: GO 9454
// begin canWin := true ;
9293: LD_ADDR_VAR 0 2
9297: PUSH
9298: LD_INT 1
9300: ST_TO_ADDR
// for i := 1 to 8 do
9301: LD_ADDR_VAR 0 1
9305: PUSH
9306: DOUBLE
9307: LD_INT 1
9309: DEC
9310: ST_TO_ADDR
9311: LD_INT 8
9313: PUSH
9314: FOR_TO
9315: IFFALSE 9440
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
9317: LD_EXP 7
9321: PUSH
9322: LD_VAR 0 1
9326: ARRAY
9327: IFFALSE 9340
9329: PUSH
9330: LD_VAR 0 1
9334: PPUSH
9335: CALL_OW 108
9339: AND
9340: IFFALSE 9354
9342: PUSH
9343: LD_VAR 0 1
9347: PUSH
9348: LD_OWVAR 2
9352: NONEQUAL
9353: AND
9354: IFFALSE 9438
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
9356: LD_EXP 8
9360: PUSH
9361: LD_VAR 0 1
9365: ARRAY
9366: NOT
9367: IFTRUE 9415
9369: PUSH
9370: LD_EXP 8
9374: PUSH
9375: LD_VAR 0 1
9379: ARRAY
9380: PUSH
9381: LD_EXP 8
9385: PUSH
9386: LD_OWVAR 2
9390: ARRAY
9391: NONEQUAL
9392: IFFALSE 9414
9394: PUSH
9395: LD_OWVAR 2
9399: PPUSH
9400: LD_VAR 0 1
9404: PPUSH
9405: CALL_OW 81
9409: PUSH
9410: LD_INT 1
9412: NONEQUAL
9413: AND
9414: OR
9415: IFFALSE 9438
// if HasPower ( i ) then
9417: LD_VAR 0 1
9421: PPUSH
9422: CALL 9499 0 1
9426: IFFALSE 9438
// begin canWin := false ;
9428: LD_ADDR_VAR 0 2
9432: PUSH
9433: LD_INT 0
9435: ST_TO_ADDR
// break ;
9436: GO 9440
// end ;
9438: GO 9314
9440: POP
9441: POP
// if canWin then
9442: LD_VAR 0 2
9446: IFFALSE 9453
// enable ( mpWin ) else
9448: LD_INT 101
9450: ENABLE_MARKED
9451: GO 9454
// enable ;
9453: ENABLE
// end ; end ;
9454: PPOPN 2
9456: END
// function CanWinLoose ; begin
9457: LD_INT 0
9459: PPUSH
// result := true ;
9460: LD_ADDR_VAR 0 1
9464: PUSH
9465: LD_INT 1
9467: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
9468: CALL_OW 531
9472: IFFALSE 9484
9474: PUSH
9475: CALL_OW 519
9479: PUSH
9480: LD_INT 1
9482: GREATER
9483: AND
9484: IFFALSE 9494
// result := false ;
9486: LD_ADDR_VAR 0 1
9490: PUSH
9491: LD_INT 0
9493: ST_TO_ADDR
// end ;
9494: LD_VAR 0 1
9498: RET
// function HasPower ( i ) ; begin
9499: LD_INT 0
9501: PPUSH
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
9502: LD_ADDR_VAR 0 2
9506: PUSH
9507: LD_INT 22
9509: PUSH
9510: LD_VAR 0 1
9514: PUSH
9515: EMPTY
9516: LIST
9517: LIST
9518: PUSH
9519: LD_INT 2
9521: PUSH
9522: LD_INT 21
9524: PUSH
9525: LD_INT 1
9527: PUSH
9528: EMPTY
9529: LIST
9530: LIST
9531: PUSH
9532: LD_INT 33
9534: PUSH
9535: LD_INT 3
9537: PUSH
9538: EMPTY
9539: LIST
9540: LIST
9541: PUSH
9542: LD_INT 33
9544: PUSH
9545: LD_INT 5
9547: PUSH
9548: EMPTY
9549: LIST
9550: LIST
9551: PUSH
9552: EMPTY
9553: LIST
9554: LIST
9555: LIST
9556: LIST
9557: PUSH
9558: EMPTY
9559: LIST
9560: LIST
9561: PPUSH
9562: CALL_OW 69
9566: ST_TO_ADDR
// end ; end_of_file
9567: LD_VAR 0 2
9571: RET
// every 0 0$1 trigger mpGameActive marked GameTypeSurvival do var i ;
9572: LD_EXP 39
9576: IFFALSE 9619
9578: GO 9580
9580: DISABLE
9581: LD_INT 0
9583: PPUSH
// begin for i := 1 to 8 do
9584: LD_ADDR_VAR 0 1
9588: PUSH
9589: DOUBLE
9590: LD_INT 1
9592: DEC
9593: ST_TO_ADDR
9594: LD_INT 8
9596: PUSH
9597: FOR_TO
9598: IFFALSE 9617
// SetRestrict ( b_depot , i , state_disabled ) ;
9600: LD_INT 0
9602: PPUSH
9603: LD_VAR 0 1
9607: PPUSH
9608: LD_INT 0
9610: PPUSH
9611: CALL_OW 324
9615: GO 9597
9617: POP
9618: POP
// end ;
9619: PPOPN 1
9621: END
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeSurvival do var i , canWin ;
9622: LD_EXP 39
9626: IFFALSE 9634
9628: PUSH
9629: CALL 9844 0 0
9633: AND
9634: IFFALSE 9642
9636: PUSH
9637: LD_OWVAR 4
9641: AND
9642: IFFALSE 9841
9644: GO 9646
9646: DISABLE
9647: LD_INT 0
9649: PPUSH
9650: PPUSH
// begin canWin := false ;
9651: LD_ADDR_VAR 0 2
9655: PUSH
9656: LD_INT 0
9658: ST_TO_ADDR
// if not HasPower ( your_side ) then
9659: LD_OWVAR 2
9663: PPUSH
9664: CALL 9886 0 1
9668: NOT
9669: IFFALSE 9680
// begin Multiplayer_Loose_Message ;
9671: CALL_OW 521
// enable ( mpLose ) ;
9675: LD_INT 102
9677: ENABLE_MARKED
// end else
9678: GO 9841
// begin canWin := true ;
9680: LD_ADDR_VAR 0 2
9684: PUSH
9685: LD_INT 1
9687: ST_TO_ADDR
// for i := 1 to 8 do
9688: LD_ADDR_VAR 0 1
9692: PUSH
9693: DOUBLE
9694: LD_INT 1
9696: DEC
9697: ST_TO_ADDR
9698: LD_INT 8
9700: PUSH
9701: FOR_TO
9702: IFFALSE 9827
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
9704: LD_EXP 7
9708: PUSH
9709: LD_VAR 0 1
9713: ARRAY
9714: IFFALSE 9727
9716: PUSH
9717: LD_VAR 0 1
9721: PPUSH
9722: CALL_OW 108
9726: AND
9727: IFFALSE 9741
9729: PUSH
9730: LD_VAR 0 1
9734: PUSH
9735: LD_OWVAR 2
9739: NONEQUAL
9740: AND
9741: IFFALSE 9825
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
9743: LD_EXP 8
9747: PUSH
9748: LD_VAR 0 1
9752: ARRAY
9753: NOT
9754: IFTRUE 9802
9756: PUSH
9757: LD_EXP 8
9761: PUSH
9762: LD_VAR 0 1
9766: ARRAY
9767: PUSH
9768: LD_EXP 8
9772: PUSH
9773: LD_OWVAR 2
9777: ARRAY
9778: NONEQUAL
9779: IFFALSE 9801
9781: PUSH
9782: LD_OWVAR 2
9786: PPUSH
9787: LD_VAR 0 1
9791: PPUSH
9792: CALL_OW 81
9796: PUSH
9797: LD_INT 1
9799: NONEQUAL
9800: AND
9801: OR
9802: IFFALSE 9825
// if HasPower ( i ) then
9804: LD_VAR 0 1
9808: PPUSH
9809: CALL 9886 0 1
9813: IFFALSE 9825
// begin canWin := false ;
9815: LD_ADDR_VAR 0 2
9819: PUSH
9820: LD_INT 0
9822: ST_TO_ADDR
// break ;
9823: GO 9827
// end ;
9825: GO 9701
9827: POP
9828: POP
// if canWin then
9829: LD_VAR 0 2
9833: IFFALSE 9840
// enable ( mpWin ) else
9835: LD_INT 101
9837: ENABLE_MARKED
9838: GO 9841
// enable ;
9840: ENABLE
// end ; end ;
9841: PPOPN 2
9843: END
// function CanWinLoose ; begin
9844: LD_INT 0
9846: PPUSH
// result := true ;
9847: LD_ADDR_VAR 0 1
9851: PUSH
9852: LD_INT 1
9854: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
9855: CALL_OW 531
9859: IFFALSE 9871
9861: PUSH
9862: CALL_OW 519
9866: PUSH
9867: LD_INT 1
9869: GREATER
9870: AND
9871: IFFALSE 9881
// result := false ;
9873: LD_ADDR_VAR 0 1
9877: PUSH
9878: LD_INT 0
9880: ST_TO_ADDR
// end ;
9881: LD_VAR 0 1
9885: RET
// function HasPower ( i ) ; begin
9886: LD_INT 0
9888: PPUSH
// if not FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) then
9889: LD_INT 22
9891: PUSH
9892: LD_VAR 0 1
9896: PUSH
9897: EMPTY
9898: LIST
9899: LIST
9900: PUSH
9901: LD_INT 2
9903: PUSH
9904: LD_INT 30
9906: PUSH
9907: LD_INT 0
9909: PUSH
9910: EMPTY
9911: LIST
9912: LIST
9913: PUSH
9914: LD_INT 30
9916: PUSH
9917: LD_INT 1
9919: PUSH
9920: EMPTY
9921: LIST
9922: LIST
9923: PUSH
9924: EMPTY
9925: LIST
9926: LIST
9927: LIST
9928: PUSH
9929: EMPTY
9930: LIST
9931: LIST
9932: PPUSH
9933: CALL_OW 69
9937: NOT
9938: IFFALSE 9942
// exit ;
9940: GO 10007
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
9942: LD_ADDR_VAR 0 2
9946: PUSH
9947: LD_INT 22
9949: PUSH
9950: LD_VAR 0 1
9954: PUSH
9955: EMPTY
9956: LIST
9957: LIST
9958: PUSH
9959: LD_INT 2
9961: PUSH
9962: LD_INT 21
9964: PUSH
9965: LD_INT 1
9967: PUSH
9968: EMPTY
9969: LIST
9970: LIST
9971: PUSH
9972: LD_INT 33
9974: PUSH
9975: LD_INT 3
9977: PUSH
9978: EMPTY
9979: LIST
9980: LIST
9981: PUSH
9982: LD_INT 33
9984: PUSH
9985: LD_INT 5
9987: PUSH
9988: EMPTY
9989: LIST
9990: LIST
9991: PUSH
9992: EMPTY
9993: LIST
9994: LIST
9995: LIST
9996: LIST
9997: PUSH
9998: EMPTY
9999: LIST
10000: LIST
10001: PPUSH
10002: CALL_OW 69
10006: ST_TO_ADDR
// end ; end_of_file
10007: LD_VAR 0 2
10011: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
10012: LD_INT 0
10014: PPUSH
10015: PPUSH
// if exist_mode then
10016: LD_VAR 0 2
10020: IFFALSE 10066
// begin unit := CreateCharacter ( prefix & ident ) ;
10022: LD_ADDR_VAR 0 5
10026: PUSH
10027: LD_VAR 0 3
10031: PUSH
10032: LD_VAR 0 1
10036: STR
10037: PPUSH
10038: CALL_OW 34
10042: ST_TO_ADDR
// if unit then
10043: LD_VAR 0 5
10047: IFFALSE 10064
// DeleteCharacters ( prefix & ident ) ;
10049: LD_VAR 0 3
10053: PUSH
10054: LD_VAR 0 1
10058: STR
10059: PPUSH
10060: CALL_OW 40
// end else
10064: GO 10081
// unit := NewCharacter ( ident ) ;
10066: LD_ADDR_VAR 0 5
10070: PUSH
10071: LD_VAR 0 1
10075: PPUSH
10076: CALL_OW 25
10080: ST_TO_ADDR
// result := unit ;
10081: LD_ADDR_VAR 0 4
10085: PUSH
10086: LD_VAR 0 5
10090: ST_TO_ADDR
// end ;
10091: LD_VAR 0 4
10095: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
10096: LD_INT 0
10098: PPUSH
10099: PPUSH
// if exist_mode then
10100: LD_VAR 0 2
10104: IFFALSE 10129
// unit := CreateCharacter ( prefix & ident ) else
10106: LD_ADDR_VAR 0 5
10110: PUSH
10111: LD_VAR 0 3
10115: PUSH
10116: LD_VAR 0 1
10120: STR
10121: PPUSH
10122: CALL_OW 34
10126: ST_TO_ADDR
10127: GO 10144
// unit := NewCharacter ( ident ) ;
10129: LD_ADDR_VAR 0 5
10133: PUSH
10134: LD_VAR 0 1
10138: PPUSH
10139: CALL_OW 25
10143: ST_TO_ADDR
// result := unit ;
10144: LD_ADDR_VAR 0 4
10148: PUSH
10149: LD_VAR 0 5
10153: ST_TO_ADDR
// end ;
10154: LD_VAR 0 4
10158: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
10159: LD_INT 0
10161: PPUSH
10162: PPUSH
// if not side or not nation then
10163: LD_VAR 0 1
10167: NOT
10168: IFTRUE 10177
10170: PUSH
10171: LD_VAR 0 2
10175: NOT
10176: OR
10177: IFFALSE 10181
// exit ;
10179: GO 10951
// case nation of nation_american :
10181: LD_VAR 0 2
10185: PUSH
10186: LD_INT 1
10188: DOUBLE
10189: EQUAL
10190: IFTRUE 10194
10192: GO 10408
10194: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
10195: LD_ADDR_VAR 0 4
10199: PUSH
10200: LD_INT 35
10202: PUSH
10203: LD_INT 45
10205: PUSH
10206: LD_INT 46
10208: PUSH
10209: LD_INT 47
10211: PUSH
10212: LD_INT 82
10214: PUSH
10215: LD_INT 83
10217: PUSH
10218: LD_INT 84
10220: PUSH
10221: LD_INT 85
10223: PUSH
10224: LD_INT 86
10226: PUSH
10227: LD_INT 1
10229: PUSH
10230: LD_INT 2
10232: PUSH
10233: LD_INT 6
10235: PUSH
10236: LD_INT 15
10238: PUSH
10239: LD_INT 16
10241: PUSH
10242: LD_INT 7
10244: PUSH
10245: LD_INT 12
10247: PUSH
10248: LD_INT 13
10250: PUSH
10251: LD_INT 10
10253: PUSH
10254: LD_INT 14
10256: PUSH
10257: LD_INT 20
10259: PUSH
10260: LD_INT 21
10262: PUSH
10263: LD_INT 22
10265: PUSH
10266: LD_INT 25
10268: PUSH
10269: LD_INT 32
10271: PUSH
10272: LD_INT 27
10274: PUSH
10275: LD_INT 36
10277: PUSH
10278: LD_INT 69
10280: PUSH
10281: LD_INT 39
10283: PUSH
10284: LD_INT 34
10286: PUSH
10287: LD_INT 40
10289: PUSH
10290: LD_INT 48
10292: PUSH
10293: LD_INT 49
10295: PUSH
10296: LD_INT 50
10298: PUSH
10299: LD_INT 51
10301: PUSH
10302: LD_INT 52
10304: PUSH
10305: LD_INT 53
10307: PUSH
10308: LD_INT 54
10310: PUSH
10311: LD_INT 55
10313: PUSH
10314: LD_INT 56
10316: PUSH
10317: LD_INT 57
10319: PUSH
10320: LD_INT 58
10322: PUSH
10323: LD_INT 59
10325: PUSH
10326: LD_INT 60
10328: PUSH
10329: LD_INT 61
10331: PUSH
10332: LD_INT 62
10334: PUSH
10335: LD_INT 80
10337: PUSH
10338: LD_INT 82
10340: PUSH
10341: LD_INT 83
10343: PUSH
10344: LD_INT 84
10346: PUSH
10347: LD_INT 85
10349: PUSH
10350: LD_INT 86
10352: PUSH
10353: EMPTY
10354: LIST
10355: LIST
10356: LIST
10357: LIST
10358: LIST
10359: LIST
10360: LIST
10361: LIST
10362: LIST
10363: LIST
10364: LIST
10365: LIST
10366: LIST
10367: LIST
10368: LIST
10369: LIST
10370: LIST
10371: LIST
10372: LIST
10373: LIST
10374: LIST
10375: LIST
10376: LIST
10377: LIST
10378: LIST
10379: LIST
10380: LIST
10381: LIST
10382: LIST
10383: LIST
10384: LIST
10385: LIST
10386: LIST
10387: LIST
10388: LIST
10389: LIST
10390: LIST
10391: LIST
10392: LIST
10393: LIST
10394: LIST
10395: LIST
10396: LIST
10397: LIST
10398: LIST
10399: LIST
10400: LIST
10401: LIST
10402: LIST
10403: LIST
10404: LIST
10405: ST_TO_ADDR
10406: GO 10873
10408: LD_INT 2
10410: DOUBLE
10411: EQUAL
10412: IFTRUE 10416
10414: GO 10642
10416: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
10417: LD_ADDR_VAR 0 4
10421: PUSH
10422: LD_INT 35
10424: PUSH
10425: LD_INT 45
10427: PUSH
10428: LD_INT 46
10430: PUSH
10431: LD_INT 47
10433: PUSH
10434: LD_INT 82
10436: PUSH
10437: LD_INT 83
10439: PUSH
10440: LD_INT 84
10442: PUSH
10443: LD_INT 85
10445: PUSH
10446: LD_INT 87
10448: PUSH
10449: LD_INT 70
10451: PUSH
10452: LD_INT 1
10454: PUSH
10455: LD_INT 11
10457: PUSH
10458: LD_INT 3
10460: PUSH
10461: LD_INT 4
10463: PUSH
10464: LD_INT 5
10466: PUSH
10467: LD_INT 6
10469: PUSH
10470: LD_INT 15
10472: PUSH
10473: LD_INT 18
10475: PUSH
10476: LD_INT 7
10478: PUSH
10479: LD_INT 17
10481: PUSH
10482: LD_INT 8
10484: PUSH
10485: LD_INT 20
10487: PUSH
10488: LD_INT 21
10490: PUSH
10491: LD_INT 22
10493: PUSH
10494: LD_INT 72
10496: PUSH
10497: LD_INT 26
10499: PUSH
10500: LD_INT 69
10502: PUSH
10503: LD_INT 39
10505: PUSH
10506: LD_INT 40
10508: PUSH
10509: LD_INT 41
10511: PUSH
10512: LD_INT 42
10514: PUSH
10515: LD_INT 43
10517: PUSH
10518: LD_INT 48
10520: PUSH
10521: LD_INT 49
10523: PUSH
10524: LD_INT 50
10526: PUSH
10527: LD_INT 51
10529: PUSH
10530: LD_INT 52
10532: PUSH
10533: LD_INT 53
10535: PUSH
10536: LD_INT 54
10538: PUSH
10539: LD_INT 55
10541: PUSH
10542: LD_INT 56
10544: PUSH
10545: LD_INT 60
10547: PUSH
10548: LD_INT 61
10550: PUSH
10551: LD_INT 62
10553: PUSH
10554: LD_INT 66
10556: PUSH
10557: LD_INT 67
10559: PUSH
10560: LD_INT 68
10562: PUSH
10563: LD_INT 81
10565: PUSH
10566: LD_INT 82
10568: PUSH
10569: LD_INT 83
10571: PUSH
10572: LD_INT 84
10574: PUSH
10575: LD_INT 85
10577: PUSH
10578: LD_INT 87
10580: PUSH
10581: LD_INT 88
10583: PUSH
10584: EMPTY
10585: LIST
10586: LIST
10587: LIST
10588: LIST
10589: LIST
10590: LIST
10591: LIST
10592: LIST
10593: LIST
10594: LIST
10595: LIST
10596: LIST
10597: LIST
10598: LIST
10599: LIST
10600: LIST
10601: LIST
10602: LIST
10603: LIST
10604: LIST
10605: LIST
10606: LIST
10607: LIST
10608: LIST
10609: LIST
10610: LIST
10611: LIST
10612: LIST
10613: LIST
10614: LIST
10615: LIST
10616: LIST
10617: LIST
10618: LIST
10619: LIST
10620: LIST
10621: LIST
10622: LIST
10623: LIST
10624: LIST
10625: LIST
10626: LIST
10627: LIST
10628: LIST
10629: LIST
10630: LIST
10631: LIST
10632: LIST
10633: LIST
10634: LIST
10635: LIST
10636: LIST
10637: LIST
10638: LIST
10639: ST_TO_ADDR
10640: GO 10873
10642: LD_INT 3
10644: DOUBLE
10645: EQUAL
10646: IFTRUE 10650
10648: GO 10872
10650: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
10651: LD_ADDR_VAR 0 4
10655: PUSH
10656: LD_INT 46
10658: PUSH
10659: LD_INT 47
10661: PUSH
10662: LD_INT 1
10664: PUSH
10665: LD_INT 2
10667: PUSH
10668: LD_INT 82
10670: PUSH
10671: LD_INT 83
10673: PUSH
10674: LD_INT 84
10676: PUSH
10677: LD_INT 85
10679: PUSH
10680: LD_INT 86
10682: PUSH
10683: LD_INT 11
10685: PUSH
10686: LD_INT 9
10688: PUSH
10689: LD_INT 20
10691: PUSH
10692: LD_INT 19
10694: PUSH
10695: LD_INT 21
10697: PUSH
10698: LD_INT 24
10700: PUSH
10701: LD_INT 22
10703: PUSH
10704: LD_INT 25
10706: PUSH
10707: LD_INT 28
10709: PUSH
10710: LD_INT 29
10712: PUSH
10713: LD_INT 30
10715: PUSH
10716: LD_INT 31
10718: PUSH
10719: LD_INT 37
10721: PUSH
10722: LD_INT 38
10724: PUSH
10725: LD_INT 32
10727: PUSH
10728: LD_INT 27
10730: PUSH
10731: LD_INT 33
10733: PUSH
10734: LD_INT 69
10736: PUSH
10737: LD_INT 39
10739: PUSH
10740: LD_INT 34
10742: PUSH
10743: LD_INT 40
10745: PUSH
10746: LD_INT 71
10748: PUSH
10749: LD_INT 23
10751: PUSH
10752: LD_INT 44
10754: PUSH
10755: LD_INT 48
10757: PUSH
10758: LD_INT 49
10760: PUSH
10761: LD_INT 50
10763: PUSH
10764: LD_INT 51
10766: PUSH
10767: LD_INT 52
10769: PUSH
10770: LD_INT 53
10772: PUSH
10773: LD_INT 54
10775: PUSH
10776: LD_INT 55
10778: PUSH
10779: LD_INT 56
10781: PUSH
10782: LD_INT 57
10784: PUSH
10785: LD_INT 58
10787: PUSH
10788: LD_INT 59
10790: PUSH
10791: LD_INT 63
10793: PUSH
10794: LD_INT 64
10796: PUSH
10797: LD_INT 65
10799: PUSH
10800: LD_INT 82
10802: PUSH
10803: LD_INT 83
10805: PUSH
10806: LD_INT 84
10808: PUSH
10809: LD_INT 85
10811: PUSH
10812: LD_INT 86
10814: PUSH
10815: EMPTY
10816: LIST
10817: LIST
10818: LIST
10819: LIST
10820: LIST
10821: LIST
10822: LIST
10823: LIST
10824: LIST
10825: LIST
10826: LIST
10827: LIST
10828: LIST
10829: LIST
10830: LIST
10831: LIST
10832: LIST
10833: LIST
10834: LIST
10835: LIST
10836: LIST
10837: LIST
10838: LIST
10839: LIST
10840: LIST
10841: LIST
10842: LIST
10843: LIST
10844: LIST
10845: LIST
10846: LIST
10847: LIST
10848: LIST
10849: LIST
10850: LIST
10851: LIST
10852: LIST
10853: LIST
10854: LIST
10855: LIST
10856: LIST
10857: LIST
10858: LIST
10859: LIST
10860: LIST
10861: LIST
10862: LIST
10863: LIST
10864: LIST
10865: LIST
10866: LIST
10867: LIST
10868: LIST
10869: ST_TO_ADDR
10870: GO 10873
10872: POP
// if state > - 1 and state < 3 then
10873: LD_VAR 0 3
10877: PUSH
10878: LD_INT 1
10880: NEG
10881: GREATER
10882: IFFALSE 10894
10884: PUSH
10885: LD_VAR 0 3
10889: PUSH
10890: LD_INT 3
10892: LESS
10893: AND
10894: IFFALSE 10951
// for i in result do
10896: LD_ADDR_VAR 0 5
10900: PUSH
10901: LD_VAR 0 4
10905: PUSH
10906: FOR_IN
10907: IFFALSE 10949
// if GetTech ( i , side ) <> state then
10909: LD_VAR 0 5
10913: PPUSH
10914: LD_VAR 0 1
10918: PPUSH
10919: CALL_OW 321
10923: PUSH
10924: LD_VAR 0 3
10928: NONEQUAL
10929: IFFALSE 10947
// result := result diff i ;
10931: LD_ADDR_VAR 0 4
10935: PUSH
10936: LD_VAR 0 4
10940: PUSH
10941: LD_VAR 0 5
10945: DIFF
10946: ST_TO_ADDR
10947: GO 10906
10949: POP
10950: POP
// end ;
10951: LD_VAR 0 4
10955: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
10956: LD_INT 0
10958: PPUSH
10959: PPUSH
10960: PPUSH
// result := true ;
10961: LD_ADDR_VAR 0 3
10965: PUSH
10966: LD_INT 1
10968: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
10969: LD_ADDR_VAR 0 5
10973: PUSH
10974: LD_VAR 0 2
10978: PPUSH
10979: CALL_OW 480
10983: ST_TO_ADDR
// if not tmp then
10984: LD_VAR 0 5
10988: NOT
10989: IFFALSE 10993
// exit ;
10991: GO 11042
// for i in tmp do
10993: LD_ADDR_VAR 0 4
10997: PUSH
10998: LD_VAR 0 5
11002: PUSH
11003: FOR_IN
11004: IFFALSE 11040
// if GetTech ( i , side ) <> state_researched then
11006: LD_VAR 0 4
11010: PPUSH
11011: LD_VAR 0 1
11015: PPUSH
11016: CALL_OW 321
11020: PUSH
11021: LD_INT 2
11023: NONEQUAL
11024: IFFALSE 11038
// begin result := false ;
11026: LD_ADDR_VAR 0 3
11030: PUSH
11031: LD_INT 0
11033: ST_TO_ADDR
// exit ;
11034: POP
11035: POP
11036: GO 11042
// end ;
11038: GO 11003
11040: POP
11041: POP
// end ;
11042: LD_VAR 0 3
11046: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
11047: LD_INT 0
11049: PPUSH
11050: PPUSH
11051: PPUSH
11052: PPUSH
11053: PPUSH
11054: PPUSH
11055: PPUSH
11056: PPUSH
11057: PPUSH
11058: PPUSH
11059: PPUSH
11060: PPUSH
11061: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
11062: LD_VAR 0 1
11066: NOT
11067: IFTRUE 11084
11069: PUSH
11070: LD_VAR 0 1
11074: PPUSH
11075: CALL_OW 257
11079: PUSH
11080: LD_INT 9
11082: NONEQUAL
11083: OR
11084: IFFALSE 11088
// exit ;
11086: GO 11667
// side := GetSide ( unit ) ;
11088: LD_ADDR_VAR 0 9
11092: PUSH
11093: LD_VAR 0 1
11097: PPUSH
11098: CALL_OW 255
11102: ST_TO_ADDR
// tech_space := tech_spacanom ;
11103: LD_ADDR_VAR 0 12
11107: PUSH
11108: LD_INT 29
11110: ST_TO_ADDR
// tech_time := tech_taurad ;
11111: LD_ADDR_VAR 0 13
11115: PUSH
11116: LD_INT 28
11118: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
11119: LD_ADDR_VAR 0 11
11123: PUSH
11124: LD_VAR 0 1
11128: PPUSH
11129: CALL_OW 310
11133: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
11134: LD_VAR 0 11
11138: PPUSH
11139: CALL_OW 247
11143: PUSH
11144: LD_INT 2
11146: EQUAL
11147: IFFALSE 11151
// exit ;
11149: GO 11667
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
11151: LD_ADDR_VAR 0 8
11155: PUSH
11156: LD_INT 81
11158: PUSH
11159: LD_VAR 0 9
11163: PUSH
11164: EMPTY
11165: LIST
11166: LIST
11167: PUSH
11168: LD_INT 3
11170: PUSH
11171: LD_INT 21
11173: PUSH
11174: LD_INT 3
11176: PUSH
11177: EMPTY
11178: LIST
11179: LIST
11180: PUSH
11181: EMPTY
11182: LIST
11183: LIST
11184: PUSH
11185: EMPTY
11186: LIST
11187: LIST
11188: PPUSH
11189: CALL_OW 69
11193: ST_TO_ADDR
// if not tmp then
11194: LD_VAR 0 8
11198: NOT
11199: IFFALSE 11203
// exit ;
11201: GO 11667
// if in_unit then
11203: LD_VAR 0 11
11207: IFFALSE 11231
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
11209: LD_ADDR_VAR 0 10
11213: PUSH
11214: LD_VAR 0 8
11218: PPUSH
11219: LD_VAR 0 11
11223: PPUSH
11224: CALL_OW 74
11228: ST_TO_ADDR
11229: GO 11251
// enemy := NearestUnitToUnit ( tmp , unit ) ;
11231: LD_ADDR_VAR 0 10
11235: PUSH
11236: LD_VAR 0 8
11240: PPUSH
11241: LD_VAR 0 1
11245: PPUSH
11246: CALL_OW 74
11250: ST_TO_ADDR
// if not enemy then
11251: LD_VAR 0 10
11255: NOT
11256: IFFALSE 11260
// exit ;
11258: GO 11667
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
11260: LD_VAR 0 11
11264: IFFALSE 11286
11266: PUSH
11267: LD_VAR 0 11
11271: PPUSH
11272: LD_VAR 0 10
11276: PPUSH
11277: CALL_OW 296
11281: PUSH
11282: LD_INT 13
11284: GREATER
11285: AND
11286: IFTRUE 11308
11288: PUSH
11289: LD_VAR 0 1
11293: PPUSH
11294: LD_VAR 0 10
11298: PPUSH
11299: CALL_OW 296
11303: PUSH
11304: LD_INT 12
11306: GREATER
11307: OR
11308: IFFALSE 11312
// exit ;
11310: GO 11667
// missile := [ 1 ] ;
11312: LD_ADDR_VAR 0 14
11316: PUSH
11317: LD_INT 1
11319: PUSH
11320: EMPTY
11321: LIST
11322: ST_TO_ADDR
// if Researched ( side , tech_space ) then
11323: LD_VAR 0 9
11327: PPUSH
11328: LD_VAR 0 12
11332: PPUSH
11333: CALL_OW 325
11337: IFFALSE 11366
// missile := Replace ( missile , missile + 1 , 2 ) ;
11339: LD_ADDR_VAR 0 14
11343: PUSH
11344: LD_VAR 0 14
11348: PPUSH
11349: LD_VAR 0 14
11353: PUSH
11354: LD_INT 1
11356: PLUS
11357: PPUSH
11358: LD_INT 2
11360: PPUSH
11361: CALL_OW 1
11365: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
11366: LD_VAR 0 9
11370: PPUSH
11371: LD_VAR 0 13
11375: PPUSH
11376: CALL_OW 325
11380: IFFALSE 11404
11382: PUSH
11383: LD_VAR 0 10
11387: PPUSH
11388: CALL_OW 255
11392: PPUSH
11393: LD_VAR 0 13
11397: PPUSH
11398: CALL_OW 325
11402: NOT
11403: AND
11404: IFFALSE 11433
// missile := Replace ( missile , missile + 1 , 3 ) ;
11406: LD_ADDR_VAR 0 14
11410: PUSH
11411: LD_VAR 0 14
11415: PPUSH
11416: LD_VAR 0 14
11420: PUSH
11421: LD_INT 1
11423: PLUS
11424: PPUSH
11425: LD_INT 3
11427: PPUSH
11428: CALL_OW 1
11432: ST_TO_ADDR
// if missile < 2 then
11433: LD_VAR 0 14
11437: PUSH
11438: LD_INT 2
11440: LESS
11441: IFFALSE 11445
// exit ;
11443: GO 11667
// x := GetX ( enemy ) ;
11445: LD_ADDR_VAR 0 4
11449: PUSH
11450: LD_VAR 0 10
11454: PPUSH
11455: CALL_OW 250
11459: ST_TO_ADDR
// y := GetY ( enemy ) ;
11460: LD_ADDR_VAR 0 5
11464: PUSH
11465: LD_VAR 0 10
11469: PPUSH
11470: CALL_OW 251
11474: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
11475: LD_ADDR_VAR 0 6
11479: PUSH
11480: LD_VAR 0 4
11484: PUSH
11485: LD_INT 1
11487: NEG
11488: PPUSH
11489: LD_INT 1
11491: PPUSH
11492: CALL_OW 12
11496: PLUS
11497: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
11498: LD_ADDR_VAR 0 7
11502: PUSH
11503: LD_VAR 0 5
11507: PUSH
11508: LD_INT 1
11510: NEG
11511: PPUSH
11512: LD_INT 1
11514: PPUSH
11515: CALL_OW 12
11519: PLUS
11520: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
11521: LD_VAR 0 6
11525: PPUSH
11526: LD_VAR 0 7
11530: PPUSH
11531: CALL_OW 488
11535: NOT
11536: IFFALSE 11558
// begin _x := x ;
11538: LD_ADDR_VAR 0 6
11542: PUSH
11543: LD_VAR 0 4
11547: ST_TO_ADDR
// _y := y ;
11548: LD_ADDR_VAR 0 7
11552: PUSH
11553: LD_VAR 0 5
11557: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
11558: LD_ADDR_VAR 0 3
11562: PUSH
11563: LD_INT 1
11565: PPUSH
11566: LD_VAR 0 14
11570: PPUSH
11571: CALL_OW 12
11575: ST_TO_ADDR
// case i of 1 :
11576: LD_VAR 0 3
11580: PUSH
11581: LD_INT 1
11583: DOUBLE
11584: EQUAL
11585: IFTRUE 11589
11587: GO 11606
11589: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
11590: LD_VAR 0 1
11594: PPUSH
11595: LD_VAR 0 10
11599: PPUSH
11600: CALL_OW 115
11604: GO 11667
11606: LD_INT 2
11608: DOUBLE
11609: EQUAL
11610: IFTRUE 11614
11612: GO 11636
11614: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
11615: LD_VAR 0 1
11619: PPUSH
11620: LD_VAR 0 6
11624: PPUSH
11625: LD_VAR 0 7
11629: PPUSH
11630: CALL_OW 153
11634: GO 11667
11636: LD_INT 3
11638: DOUBLE
11639: EQUAL
11640: IFTRUE 11644
11642: GO 11666
11644: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
11645: LD_VAR 0 1
11649: PPUSH
11650: LD_VAR 0 6
11654: PPUSH
11655: LD_VAR 0 7
11659: PPUSH
11660: CALL_OW 154
11664: GO 11667
11666: POP
// end ;
11667: LD_VAR 0 2
11671: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
11672: LD_INT 0
11674: PPUSH
11675: PPUSH
11676: PPUSH
11677: PPUSH
11678: PPUSH
11679: PPUSH
// if not unit or not building then
11680: LD_VAR 0 1
11684: NOT
11685: IFTRUE 11694
11687: PUSH
11688: LD_VAR 0 2
11692: NOT
11693: OR
11694: IFFALSE 11698
// exit ;
11696: GO 11856
// x := GetX ( building ) ;
11698: LD_ADDR_VAR 0 5
11702: PUSH
11703: LD_VAR 0 2
11707: PPUSH
11708: CALL_OW 250
11712: ST_TO_ADDR
// y := GetY ( building ) ;
11713: LD_ADDR_VAR 0 6
11717: PUSH
11718: LD_VAR 0 2
11722: PPUSH
11723: CALL_OW 251
11727: ST_TO_ADDR
// for i := 0 to 5 do
11728: LD_ADDR_VAR 0 4
11732: PUSH
11733: DOUBLE
11734: LD_INT 0
11736: DEC
11737: ST_TO_ADDR
11738: LD_INT 5
11740: PUSH
11741: FOR_TO
11742: IFFALSE 11854
// begin _x := ShiftX ( x , i , 3 ) ;
11744: LD_ADDR_VAR 0 7
11748: PUSH
11749: LD_VAR 0 5
11753: PPUSH
11754: LD_VAR 0 4
11758: PPUSH
11759: LD_INT 3
11761: PPUSH
11762: CALL_OW 272
11766: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
11767: LD_ADDR_VAR 0 8
11771: PUSH
11772: LD_VAR 0 6
11776: PPUSH
11777: LD_VAR 0 4
11781: PPUSH
11782: LD_INT 3
11784: PPUSH
11785: CALL_OW 273
11789: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
11790: LD_VAR 0 7
11794: PPUSH
11795: LD_VAR 0 8
11799: PPUSH
11800: CALL_OW 488
11804: NOT
11805: IFFALSE 11809
// continue ;
11807: GO 11741
// if HexInfo ( _x , _y ) = 0 then
11809: LD_VAR 0 7
11813: PPUSH
11814: LD_VAR 0 8
11818: PPUSH
11819: CALL_OW 428
11823: PUSH
11824: LD_INT 0
11826: EQUAL
11827: IFFALSE 11852
// begin ComMoveXY ( unit , _x , _y ) ;
11829: LD_VAR 0 1
11833: PPUSH
11834: LD_VAR 0 7
11838: PPUSH
11839: LD_VAR 0 8
11843: PPUSH
11844: CALL_OW 111
// exit ;
11848: POP
11849: POP
11850: GO 11856
// end ; end ;
11852: GO 11741
11854: POP
11855: POP
// end ;
11856: LD_VAR 0 3
11860: RET
// export function ScanBase ( side , base_area ) ; begin
11861: LD_INT 0
11863: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
11864: LD_ADDR_VAR 0 3
11868: PUSH
11869: LD_VAR 0 2
11873: PPUSH
11874: LD_INT 81
11876: PUSH
11877: LD_VAR 0 1
11881: PUSH
11882: EMPTY
11883: LIST
11884: LIST
11885: PPUSH
11886: CALL_OW 70
11890: ST_TO_ADDR
// end ;
11891: LD_VAR 0 3
11895: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
11896: LD_INT 0
11898: PPUSH
11899: PPUSH
11900: PPUSH
11901: PPUSH
// result := false ;
11902: LD_ADDR_VAR 0 2
11906: PUSH
11907: LD_INT 0
11909: ST_TO_ADDR
// side := GetSide ( unit ) ;
11910: LD_ADDR_VAR 0 3
11914: PUSH
11915: LD_VAR 0 1
11919: PPUSH
11920: CALL_OW 255
11924: ST_TO_ADDR
// nat := GetNation ( unit ) ;
11925: LD_ADDR_VAR 0 4
11929: PUSH
11930: LD_VAR 0 1
11934: PPUSH
11935: CALL_OW 248
11939: ST_TO_ADDR
// case nat of 1 :
11940: LD_VAR 0 4
11944: PUSH
11945: LD_INT 1
11947: DOUBLE
11948: EQUAL
11949: IFTRUE 11953
11951: GO 11964
11953: POP
// tech := tech_lassight ; 2 :
11954: LD_ADDR_VAR 0 5
11958: PUSH
11959: LD_INT 12
11961: ST_TO_ADDR
11962: GO 12003
11964: LD_INT 2
11966: DOUBLE
11967: EQUAL
11968: IFTRUE 11972
11970: GO 11983
11972: POP
// tech := tech_mortar ; 3 :
11973: LD_ADDR_VAR 0 5
11977: PUSH
11978: LD_INT 41
11980: ST_TO_ADDR
11981: GO 12003
11983: LD_INT 3
11985: DOUBLE
11986: EQUAL
11987: IFTRUE 11991
11989: GO 12002
11991: POP
// tech := tech_bazooka ; end ;
11992: LD_ADDR_VAR 0 5
11996: PUSH
11997: LD_INT 44
11999: ST_TO_ADDR
12000: GO 12003
12002: POP
// if Researched ( side , tech ) then
12003: LD_VAR 0 3
12007: PPUSH
12008: LD_VAR 0 5
12012: PPUSH
12013: CALL_OW 325
12017: IFFALSE 12044
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
12019: LD_ADDR_VAR 0 2
12023: PUSH
12024: LD_INT 5
12026: PUSH
12027: LD_INT 8
12029: PUSH
12030: LD_INT 9
12032: PUSH
12033: EMPTY
12034: LIST
12035: LIST
12036: LIST
12037: PUSH
12038: LD_VAR 0 4
12042: ARRAY
12043: ST_TO_ADDR
// end ;
12044: LD_VAR 0 2
12048: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
12049: LD_INT 0
12051: PPUSH
12052: PPUSH
12053: PPUSH
// if not mines then
12054: LD_VAR 0 2
12058: NOT
12059: IFFALSE 12063
// exit ;
12061: GO 12207
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
12063: LD_ADDR_VAR 0 5
12067: PUSH
12068: LD_INT 81
12070: PUSH
12071: LD_VAR 0 1
12075: PUSH
12076: EMPTY
12077: LIST
12078: LIST
12079: PUSH
12080: LD_INT 3
12082: PUSH
12083: LD_INT 21
12085: PUSH
12086: LD_INT 3
12088: PUSH
12089: EMPTY
12090: LIST
12091: LIST
12092: PUSH
12093: EMPTY
12094: LIST
12095: LIST
12096: PUSH
12097: EMPTY
12098: LIST
12099: LIST
12100: PPUSH
12101: CALL_OW 69
12105: ST_TO_ADDR
// for i in mines do
12106: LD_ADDR_VAR 0 4
12110: PUSH
12111: LD_VAR 0 2
12115: PUSH
12116: FOR_IN
12117: IFFALSE 12205
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
12119: LD_VAR 0 4
12123: PUSH
12124: LD_INT 1
12126: ARRAY
12127: PPUSH
12128: LD_VAR 0 4
12132: PUSH
12133: LD_INT 2
12135: ARRAY
12136: PPUSH
12137: CALL_OW 458
12141: NOT
12142: IFFALSE 12146
// continue ;
12144: GO 12116
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
12146: LD_VAR 0 4
12150: PUSH
12151: LD_INT 1
12153: ARRAY
12154: PPUSH
12155: LD_VAR 0 4
12159: PUSH
12160: LD_INT 2
12162: ARRAY
12163: PPUSH
12164: CALL_OW 428
12168: PUSH
12169: LD_VAR 0 5
12173: IN
12174: IFFALSE 12203
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
12176: LD_VAR 0 4
12180: PUSH
12181: LD_INT 1
12183: ARRAY
12184: PPUSH
12185: LD_VAR 0 4
12189: PUSH
12190: LD_INT 2
12192: ARRAY
12193: PPUSH
12194: LD_VAR 0 1
12198: PPUSH
12199: CALL_OW 456
// end ;
12203: GO 12116
12205: POP
12206: POP
// end ;
12207: LD_VAR 0 3
12211: RET
// export function Count ( array ) ; begin
12212: LD_INT 0
12214: PPUSH
// result := array + 0 ;
12215: LD_ADDR_VAR 0 2
12219: PUSH
12220: LD_VAR 0 1
12224: PUSH
12225: LD_INT 0
12227: PLUS
12228: ST_TO_ADDR
// end ;
12229: LD_VAR 0 2
12233: RET
// export function IsEmpty ( building ) ; begin
12234: LD_INT 0
12236: PPUSH
// if not building then
12237: LD_VAR 0 1
12241: NOT
12242: IFFALSE 12246
// exit ;
12244: GO 12289
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
12246: LD_ADDR_VAR 0 2
12250: PUSH
12251: LD_VAR 0 1
12255: PUSH
12256: LD_INT 22
12258: PUSH
12259: LD_VAR 0 1
12263: PPUSH
12264: CALL_OW 255
12268: PUSH
12269: EMPTY
12270: LIST
12271: LIST
12272: PUSH
12273: LD_INT 58
12275: PUSH
12276: EMPTY
12277: LIST
12278: PUSH
12279: EMPTY
12280: LIST
12281: LIST
12282: PPUSH
12283: CALL_OW 69
12287: IN
12288: ST_TO_ADDR
// end ;
12289: LD_VAR 0 2
12293: RET
// export function IsNotFull ( building ) ; var places ; begin
12294: LD_INT 0
12296: PPUSH
12297: PPUSH
// if not building then
12298: LD_VAR 0 1
12302: NOT
12303: IFFALSE 12307
// exit ;
12305: GO 12335
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
12307: LD_ADDR_VAR 0 2
12311: PUSH
12312: LD_VAR 0 1
12316: PPUSH
12317: LD_INT 3
12319: PUSH
12320: LD_INT 62
12322: PUSH
12323: EMPTY
12324: LIST
12325: PUSH
12326: EMPTY
12327: LIST
12328: LIST
12329: PPUSH
12330: CALL_OW 72
12334: ST_TO_ADDR
// end ;
12335: LD_VAR 0 2
12339: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
12340: LD_INT 0
12342: PPUSH
12343: PPUSH
12344: PPUSH
12345: PPUSH
// tmp := [ ] ;
12346: LD_ADDR_VAR 0 3
12350: PUSH
12351: EMPTY
12352: ST_TO_ADDR
// list := [ ] ;
12353: LD_ADDR_VAR 0 5
12357: PUSH
12358: EMPTY
12359: ST_TO_ADDR
// for i = 16 to 25 do
12360: LD_ADDR_VAR 0 4
12364: PUSH
12365: DOUBLE
12366: LD_INT 16
12368: DEC
12369: ST_TO_ADDR
12370: LD_INT 25
12372: PUSH
12373: FOR_TO
12374: IFFALSE 12447
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
12376: LD_ADDR_VAR 0 3
12380: PUSH
12381: LD_VAR 0 3
12385: PUSH
12386: LD_INT 22
12388: PUSH
12389: LD_VAR 0 1
12393: PPUSH
12394: CALL_OW 255
12398: PUSH
12399: EMPTY
12400: LIST
12401: LIST
12402: PUSH
12403: LD_INT 91
12405: PUSH
12406: LD_VAR 0 1
12410: PUSH
12411: LD_INT 6
12413: PUSH
12414: EMPTY
12415: LIST
12416: LIST
12417: LIST
12418: PUSH
12419: LD_INT 30
12421: PUSH
12422: LD_VAR 0 4
12426: PUSH
12427: EMPTY
12428: LIST
12429: LIST
12430: PUSH
12431: EMPTY
12432: LIST
12433: LIST
12434: LIST
12435: PUSH
12436: EMPTY
12437: LIST
12438: PPUSH
12439: CALL_OW 69
12443: ADD
12444: ST_TO_ADDR
12445: GO 12373
12447: POP
12448: POP
// for i = 1 to tmp do
12449: LD_ADDR_VAR 0 4
12453: PUSH
12454: DOUBLE
12455: LD_INT 1
12457: DEC
12458: ST_TO_ADDR
12459: LD_VAR 0 3
12463: PUSH
12464: FOR_TO
12465: IFFALSE 12553
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
12467: LD_ADDR_VAR 0 5
12471: PUSH
12472: LD_VAR 0 5
12476: PUSH
12477: LD_VAR 0 3
12481: PUSH
12482: LD_VAR 0 4
12486: ARRAY
12487: PPUSH
12488: CALL_OW 266
12492: PUSH
12493: LD_VAR 0 3
12497: PUSH
12498: LD_VAR 0 4
12502: ARRAY
12503: PPUSH
12504: CALL_OW 250
12508: PUSH
12509: LD_VAR 0 3
12513: PUSH
12514: LD_VAR 0 4
12518: ARRAY
12519: PPUSH
12520: CALL_OW 251
12524: PUSH
12525: LD_VAR 0 3
12529: PUSH
12530: LD_VAR 0 4
12534: ARRAY
12535: PPUSH
12536: CALL_OW 254
12540: PUSH
12541: EMPTY
12542: LIST
12543: LIST
12544: LIST
12545: LIST
12546: PUSH
12547: EMPTY
12548: LIST
12549: ADD
12550: ST_TO_ADDR
12551: GO 12464
12553: POP
12554: POP
// result := list ;
12555: LD_ADDR_VAR 0 2
12559: PUSH
12560: LD_VAR 0 5
12564: ST_TO_ADDR
// end ;
12565: LD_VAR 0 2
12569: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
12570: LD_INT 0
12572: PPUSH
12573: PPUSH
12574: PPUSH
12575: PPUSH
12576: PPUSH
12577: PPUSH
12578: PPUSH
// if not factory then
12579: LD_VAR 0 1
12583: NOT
12584: IFFALSE 12588
// exit ;
12586: GO 13191
// if control = control_apeman then
12588: LD_VAR 0 4
12592: PUSH
12593: LD_INT 5
12595: EQUAL
12596: IFFALSE 12705
// begin tmp := UnitsInside ( factory ) ;
12598: LD_ADDR_VAR 0 8
12602: PUSH
12603: LD_VAR 0 1
12607: PPUSH
12608: CALL_OW 313
12612: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
12613: LD_VAR 0 8
12617: PPUSH
12618: LD_INT 25
12620: PUSH
12621: LD_INT 12
12623: PUSH
12624: EMPTY
12625: LIST
12626: LIST
12627: PPUSH
12628: CALL_OW 72
12632: NOT
12633: IFFALSE 12643
// control := control_manual ;
12635: LD_ADDR_VAR 0 4
12639: PUSH
12640: LD_INT 1
12642: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
12643: LD_ADDR_VAR 0 8
12647: PUSH
12648: LD_VAR 0 1
12652: PPUSH
12653: CALL 12340 0 1
12657: ST_TO_ADDR
// if tmp then
12658: LD_VAR 0 8
12662: IFFALSE 12705
// begin for i in tmp do
12664: LD_ADDR_VAR 0 7
12668: PUSH
12669: LD_VAR 0 8
12673: PUSH
12674: FOR_IN
12675: IFFALSE 12703
// if i [ 1 ] = b_ext_radio then
12677: LD_VAR 0 7
12681: PUSH
12682: LD_INT 1
12684: ARRAY
12685: PUSH
12686: LD_INT 22
12688: EQUAL
12689: IFFALSE 12701
// begin control := control_remote ;
12691: LD_ADDR_VAR 0 4
12695: PUSH
12696: LD_INT 2
12698: ST_TO_ADDR
// break ;
12699: GO 12703
// end ;
12701: GO 12674
12703: POP
12704: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
12705: LD_VAR 0 1
12709: PPUSH
12710: LD_VAR 0 2
12714: PPUSH
12715: LD_VAR 0 3
12719: PPUSH
12720: LD_VAR 0 4
12724: PPUSH
12725: LD_VAR 0 5
12729: PPUSH
12730: CALL_OW 448
12734: IFFALSE 12769
// begin result := [ chassis , engine , control , weapon ] ;
12736: LD_ADDR_VAR 0 6
12740: PUSH
12741: LD_VAR 0 2
12745: PUSH
12746: LD_VAR 0 3
12750: PUSH
12751: LD_VAR 0 4
12755: PUSH
12756: LD_VAR 0 5
12760: PUSH
12761: EMPTY
12762: LIST
12763: LIST
12764: LIST
12765: LIST
12766: ST_TO_ADDR
// exit ;
12767: GO 13191
// end ; _chassis := AvailableChassisList ( factory ) ;
12769: LD_ADDR_VAR 0 9
12773: PUSH
12774: LD_VAR 0 1
12778: PPUSH
12779: CALL_OW 475
12783: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
12784: LD_ADDR_VAR 0 11
12788: PUSH
12789: LD_VAR 0 1
12793: PPUSH
12794: CALL_OW 476
12798: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
12799: LD_ADDR_VAR 0 12
12803: PUSH
12804: LD_VAR 0 1
12808: PPUSH
12809: CALL_OW 477
12813: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
12814: LD_ADDR_VAR 0 10
12818: PUSH
12819: LD_VAR 0 1
12823: PPUSH
12824: CALL_OW 478
12828: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
12829: LD_VAR 0 9
12833: NOT
12834: IFTRUE 12843
12836: PUSH
12837: LD_VAR 0 11
12841: NOT
12842: OR
12843: IFTRUE 12852
12845: PUSH
12846: LD_VAR 0 12
12850: NOT
12851: OR
12852: IFTRUE 12861
12854: PUSH
12855: LD_VAR 0 10
12859: NOT
12860: OR
12861: IFFALSE 12896
// begin result := [ chassis , engine , control , weapon ] ;
12863: LD_ADDR_VAR 0 6
12867: PUSH
12868: LD_VAR 0 2
12872: PUSH
12873: LD_VAR 0 3
12877: PUSH
12878: LD_VAR 0 4
12882: PUSH
12883: LD_VAR 0 5
12887: PUSH
12888: EMPTY
12889: LIST
12890: LIST
12891: LIST
12892: LIST
12893: ST_TO_ADDR
// exit ;
12894: GO 13191
// end ; if not chassis in _chassis then
12896: LD_VAR 0 2
12900: PUSH
12901: LD_VAR 0 9
12905: IN
12906: NOT
12907: IFFALSE 12933
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
12909: LD_ADDR_VAR 0 2
12913: PUSH
12914: LD_VAR 0 9
12918: PUSH
12919: LD_INT 1
12921: PPUSH
12922: LD_VAR 0 9
12926: PPUSH
12927: CALL_OW 12
12931: ARRAY
12932: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
12933: LD_VAR 0 2
12937: PPUSH
12938: LD_VAR 0 3
12942: PPUSH
12943: CALL 13196 0 2
12947: NOT
12948: IFFALSE 13009
// repeat engine := _engine [ 1 ] ;
12950: LD_ADDR_VAR 0 3
12954: PUSH
12955: LD_VAR 0 11
12959: PUSH
12960: LD_INT 1
12962: ARRAY
12963: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
12964: LD_ADDR_VAR 0 11
12968: PUSH
12969: LD_VAR 0 11
12973: PPUSH
12974: LD_INT 1
12976: PPUSH
12977: CALL_OW 3
12981: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
12982: LD_VAR 0 2
12986: PPUSH
12987: LD_VAR 0 3
12991: PPUSH
12992: CALL 13196 0 2
12996: IFTRUE 13007
12998: PUSH
12999: LD_VAR 0 11
13003: PUSH
13004: EMPTY
13005: EQUAL
13006: OR
13007: IFFALSE 12950
// if not control in _control then
13009: LD_VAR 0 4
13013: PUSH
13014: LD_VAR 0 12
13018: IN
13019: NOT
13020: IFFALSE 13046
// control := _control [ rand ( 1 , _control ) ] ;
13022: LD_ADDR_VAR 0 4
13026: PUSH
13027: LD_VAR 0 12
13031: PUSH
13032: LD_INT 1
13034: PPUSH
13035: LD_VAR 0 12
13039: PPUSH
13040: CALL_OW 12
13044: ARRAY
13045: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
13046: LD_VAR 0 2
13050: PPUSH
13051: LD_VAR 0 5
13055: PPUSH
13056: CALL 13418 0 2
13060: NOT
13061: IFFALSE 13122
// repeat weapon := _weapon [ 1 ] ;
13063: LD_ADDR_VAR 0 5
13067: PUSH
13068: LD_VAR 0 10
13072: PUSH
13073: LD_INT 1
13075: ARRAY
13076: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
13077: LD_ADDR_VAR 0 10
13081: PUSH
13082: LD_VAR 0 10
13086: PPUSH
13087: LD_INT 1
13089: PPUSH
13090: CALL_OW 3
13094: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
13095: LD_VAR 0 2
13099: PPUSH
13100: LD_VAR 0 5
13104: PPUSH
13105: CALL 13418 0 2
13109: IFTRUE 13120
13111: PUSH
13112: LD_VAR 0 10
13116: PUSH
13117: EMPTY
13118: EQUAL
13119: OR
13120: IFFALSE 13063
// result := [ ] ;
13122: LD_ADDR_VAR 0 6
13126: PUSH
13127: EMPTY
13128: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
13129: LD_VAR 0 1
13133: PPUSH
13134: LD_VAR 0 2
13138: PPUSH
13139: LD_VAR 0 3
13143: PPUSH
13144: LD_VAR 0 4
13148: PPUSH
13149: LD_VAR 0 5
13153: PPUSH
13154: CALL_OW 448
13158: IFFALSE 13191
// result := [ chassis , engine , control , weapon ] ;
13160: LD_ADDR_VAR 0 6
13164: PUSH
13165: LD_VAR 0 2
13169: PUSH
13170: LD_VAR 0 3
13174: PUSH
13175: LD_VAR 0 4
13179: PUSH
13180: LD_VAR 0 5
13184: PUSH
13185: EMPTY
13186: LIST
13187: LIST
13188: LIST
13189: LIST
13190: ST_TO_ADDR
// end ;
13191: LD_VAR 0 6
13195: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
13196: LD_INT 0
13198: PPUSH
// if not chassis or not engine then
13199: LD_VAR 0 1
13203: NOT
13204: IFTRUE 13213
13206: PUSH
13207: LD_VAR 0 2
13211: NOT
13212: OR
13213: IFFALSE 13217
// exit ;
13215: GO 13413
// case engine of engine_solar :
13217: LD_VAR 0 2
13221: PUSH
13222: LD_INT 2
13224: DOUBLE
13225: EQUAL
13226: IFTRUE 13230
13228: GO 13268
13230: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
13231: LD_ADDR_VAR 0 3
13235: PUSH
13236: LD_INT 11
13238: PUSH
13239: LD_INT 12
13241: PUSH
13242: LD_INT 13
13244: PUSH
13245: LD_INT 14
13247: PUSH
13248: LD_INT 1
13250: PUSH
13251: LD_INT 2
13253: PUSH
13254: LD_INT 3
13256: PUSH
13257: EMPTY
13258: LIST
13259: LIST
13260: LIST
13261: LIST
13262: LIST
13263: LIST
13264: LIST
13265: ST_TO_ADDR
13266: GO 13397
13268: LD_INT 1
13270: DOUBLE
13271: EQUAL
13272: IFTRUE 13276
13274: GO 13338
13276: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
13277: LD_ADDR_VAR 0 3
13281: PUSH
13282: LD_INT 11
13284: PUSH
13285: LD_INT 12
13287: PUSH
13288: LD_INT 13
13290: PUSH
13291: LD_INT 14
13293: PUSH
13294: LD_INT 1
13296: PUSH
13297: LD_INT 2
13299: PUSH
13300: LD_INT 3
13302: PUSH
13303: LD_INT 4
13305: PUSH
13306: LD_INT 5
13308: PUSH
13309: LD_INT 21
13311: PUSH
13312: LD_INT 23
13314: PUSH
13315: LD_INT 22
13317: PUSH
13318: LD_INT 24
13320: PUSH
13321: EMPTY
13322: LIST
13323: LIST
13324: LIST
13325: LIST
13326: LIST
13327: LIST
13328: LIST
13329: LIST
13330: LIST
13331: LIST
13332: LIST
13333: LIST
13334: LIST
13335: ST_TO_ADDR
13336: GO 13397
13338: LD_INT 3
13340: DOUBLE
13341: EQUAL
13342: IFTRUE 13346
13344: GO 13396
13346: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
13347: LD_ADDR_VAR 0 3
13351: PUSH
13352: LD_INT 13
13354: PUSH
13355: LD_INT 14
13357: PUSH
13358: LD_INT 2
13360: PUSH
13361: LD_INT 3
13363: PUSH
13364: LD_INT 4
13366: PUSH
13367: LD_INT 5
13369: PUSH
13370: LD_INT 21
13372: PUSH
13373: LD_INT 22
13375: PUSH
13376: LD_INT 23
13378: PUSH
13379: LD_INT 24
13381: PUSH
13382: EMPTY
13383: LIST
13384: LIST
13385: LIST
13386: LIST
13387: LIST
13388: LIST
13389: LIST
13390: LIST
13391: LIST
13392: LIST
13393: ST_TO_ADDR
13394: GO 13397
13396: POP
// result := ( chassis in result ) ;
13397: LD_ADDR_VAR 0 3
13401: PUSH
13402: LD_VAR 0 1
13406: PUSH
13407: LD_VAR 0 3
13411: IN
13412: ST_TO_ADDR
// end ;
13413: LD_VAR 0 3
13417: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
13418: LD_INT 0
13420: PPUSH
// if not chassis or not weapon then
13421: LD_VAR 0 1
13425: NOT
13426: IFTRUE 13435
13428: PUSH
13429: LD_VAR 0 2
13433: NOT
13434: OR
13435: IFFALSE 13439
// exit ;
13437: GO 14499
// case weapon of us_machine_gun :
13439: LD_VAR 0 2
13443: PUSH
13444: LD_INT 2
13446: DOUBLE
13447: EQUAL
13448: IFTRUE 13452
13450: GO 13482
13452: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
13453: LD_ADDR_VAR 0 3
13457: PUSH
13458: LD_INT 1
13460: PUSH
13461: LD_INT 2
13463: PUSH
13464: LD_INT 3
13466: PUSH
13467: LD_INT 4
13469: PUSH
13470: LD_INT 5
13472: PUSH
13473: EMPTY
13474: LIST
13475: LIST
13476: LIST
13477: LIST
13478: LIST
13479: ST_TO_ADDR
13480: GO 14483
13482: LD_INT 3
13484: DOUBLE
13485: EQUAL
13486: IFTRUE 13490
13488: GO 13520
13490: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
13491: LD_ADDR_VAR 0 3
13495: PUSH
13496: LD_INT 1
13498: PUSH
13499: LD_INT 2
13501: PUSH
13502: LD_INT 3
13504: PUSH
13505: LD_INT 4
13507: PUSH
13508: LD_INT 5
13510: PUSH
13511: EMPTY
13512: LIST
13513: LIST
13514: LIST
13515: LIST
13516: LIST
13517: ST_TO_ADDR
13518: GO 14483
13520: LD_INT 11
13522: DOUBLE
13523: EQUAL
13524: IFTRUE 13528
13526: GO 13558
13528: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
13529: LD_ADDR_VAR 0 3
13533: PUSH
13534: LD_INT 1
13536: PUSH
13537: LD_INT 2
13539: PUSH
13540: LD_INT 3
13542: PUSH
13543: LD_INT 4
13545: PUSH
13546: LD_INT 5
13548: PUSH
13549: EMPTY
13550: LIST
13551: LIST
13552: LIST
13553: LIST
13554: LIST
13555: ST_TO_ADDR
13556: GO 14483
13558: LD_INT 4
13560: DOUBLE
13561: EQUAL
13562: IFTRUE 13566
13564: GO 13592
13566: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
13567: LD_ADDR_VAR 0 3
13571: PUSH
13572: LD_INT 2
13574: PUSH
13575: LD_INT 3
13577: PUSH
13578: LD_INT 4
13580: PUSH
13581: LD_INT 5
13583: PUSH
13584: EMPTY
13585: LIST
13586: LIST
13587: LIST
13588: LIST
13589: ST_TO_ADDR
13590: GO 14483
13592: LD_INT 5
13594: DOUBLE
13595: EQUAL
13596: IFTRUE 13600
13598: GO 13626
13600: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
13601: LD_ADDR_VAR 0 3
13605: PUSH
13606: LD_INT 2
13608: PUSH
13609: LD_INT 3
13611: PUSH
13612: LD_INT 4
13614: PUSH
13615: LD_INT 5
13617: PUSH
13618: EMPTY
13619: LIST
13620: LIST
13621: LIST
13622: LIST
13623: ST_TO_ADDR
13624: GO 14483
13626: LD_INT 9
13628: DOUBLE
13629: EQUAL
13630: IFTRUE 13634
13632: GO 13660
13634: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
13635: LD_ADDR_VAR 0 3
13639: PUSH
13640: LD_INT 2
13642: PUSH
13643: LD_INT 3
13645: PUSH
13646: LD_INT 4
13648: PUSH
13649: LD_INT 5
13651: PUSH
13652: EMPTY
13653: LIST
13654: LIST
13655: LIST
13656: LIST
13657: ST_TO_ADDR
13658: GO 14483
13660: LD_INT 7
13662: DOUBLE
13663: EQUAL
13664: IFTRUE 13668
13666: GO 13694
13668: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
13669: LD_ADDR_VAR 0 3
13673: PUSH
13674: LD_INT 2
13676: PUSH
13677: LD_INT 3
13679: PUSH
13680: LD_INT 4
13682: PUSH
13683: LD_INT 5
13685: PUSH
13686: EMPTY
13687: LIST
13688: LIST
13689: LIST
13690: LIST
13691: ST_TO_ADDR
13692: GO 14483
13694: LD_INT 12
13696: DOUBLE
13697: EQUAL
13698: IFTRUE 13702
13700: GO 13728
13702: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
13703: LD_ADDR_VAR 0 3
13707: PUSH
13708: LD_INT 2
13710: PUSH
13711: LD_INT 3
13713: PUSH
13714: LD_INT 4
13716: PUSH
13717: LD_INT 5
13719: PUSH
13720: EMPTY
13721: LIST
13722: LIST
13723: LIST
13724: LIST
13725: ST_TO_ADDR
13726: GO 14483
13728: LD_INT 13
13730: DOUBLE
13731: EQUAL
13732: IFTRUE 13736
13734: GO 13762
13736: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
13737: LD_ADDR_VAR 0 3
13741: PUSH
13742: LD_INT 2
13744: PUSH
13745: LD_INT 3
13747: PUSH
13748: LD_INT 4
13750: PUSH
13751: LD_INT 5
13753: PUSH
13754: EMPTY
13755: LIST
13756: LIST
13757: LIST
13758: LIST
13759: ST_TO_ADDR
13760: GO 14483
13762: LD_INT 14
13764: DOUBLE
13765: EQUAL
13766: IFTRUE 13770
13768: GO 13788
13770: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
13771: LD_ADDR_VAR 0 3
13775: PUSH
13776: LD_INT 4
13778: PUSH
13779: LD_INT 5
13781: PUSH
13782: EMPTY
13783: LIST
13784: LIST
13785: ST_TO_ADDR
13786: GO 14483
13788: LD_INT 6
13790: DOUBLE
13791: EQUAL
13792: IFTRUE 13796
13794: GO 13814
13796: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
13797: LD_ADDR_VAR 0 3
13801: PUSH
13802: LD_INT 4
13804: PUSH
13805: LD_INT 5
13807: PUSH
13808: EMPTY
13809: LIST
13810: LIST
13811: ST_TO_ADDR
13812: GO 14483
13814: LD_INT 10
13816: DOUBLE
13817: EQUAL
13818: IFTRUE 13822
13820: GO 13840
13822: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
13823: LD_ADDR_VAR 0 3
13827: PUSH
13828: LD_INT 4
13830: PUSH
13831: LD_INT 5
13833: PUSH
13834: EMPTY
13835: LIST
13836: LIST
13837: ST_TO_ADDR
13838: GO 14483
13840: LD_INT 22
13842: DOUBLE
13843: EQUAL
13844: IFTRUE 13848
13846: GO 13874
13848: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
13849: LD_ADDR_VAR 0 3
13853: PUSH
13854: LD_INT 11
13856: PUSH
13857: LD_INT 12
13859: PUSH
13860: LD_INT 13
13862: PUSH
13863: LD_INT 14
13865: PUSH
13866: EMPTY
13867: LIST
13868: LIST
13869: LIST
13870: LIST
13871: ST_TO_ADDR
13872: GO 14483
13874: LD_INT 23
13876: DOUBLE
13877: EQUAL
13878: IFTRUE 13882
13880: GO 13908
13882: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
13883: LD_ADDR_VAR 0 3
13887: PUSH
13888: LD_INT 11
13890: PUSH
13891: LD_INT 12
13893: PUSH
13894: LD_INT 13
13896: PUSH
13897: LD_INT 14
13899: PUSH
13900: EMPTY
13901: LIST
13902: LIST
13903: LIST
13904: LIST
13905: ST_TO_ADDR
13906: GO 14483
13908: LD_INT 24
13910: DOUBLE
13911: EQUAL
13912: IFTRUE 13916
13914: GO 13942
13916: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
13917: LD_ADDR_VAR 0 3
13921: PUSH
13922: LD_INT 11
13924: PUSH
13925: LD_INT 12
13927: PUSH
13928: LD_INT 13
13930: PUSH
13931: LD_INT 14
13933: PUSH
13934: EMPTY
13935: LIST
13936: LIST
13937: LIST
13938: LIST
13939: ST_TO_ADDR
13940: GO 14483
13942: LD_INT 30
13944: DOUBLE
13945: EQUAL
13946: IFTRUE 13950
13948: GO 13976
13950: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
13951: LD_ADDR_VAR 0 3
13955: PUSH
13956: LD_INT 11
13958: PUSH
13959: LD_INT 12
13961: PUSH
13962: LD_INT 13
13964: PUSH
13965: LD_INT 14
13967: PUSH
13968: EMPTY
13969: LIST
13970: LIST
13971: LIST
13972: LIST
13973: ST_TO_ADDR
13974: GO 14483
13976: LD_INT 25
13978: DOUBLE
13979: EQUAL
13980: IFTRUE 13984
13982: GO 14002
13984: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
13985: LD_ADDR_VAR 0 3
13989: PUSH
13990: LD_INT 13
13992: PUSH
13993: LD_INT 14
13995: PUSH
13996: EMPTY
13997: LIST
13998: LIST
13999: ST_TO_ADDR
14000: GO 14483
14002: LD_INT 27
14004: DOUBLE
14005: EQUAL
14006: IFTRUE 14010
14008: GO 14028
14010: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
14011: LD_ADDR_VAR 0 3
14015: PUSH
14016: LD_INT 13
14018: PUSH
14019: LD_INT 14
14021: PUSH
14022: EMPTY
14023: LIST
14024: LIST
14025: ST_TO_ADDR
14026: GO 14483
14028: LD_INT 92
14030: DOUBLE
14031: EQUAL
14032: IFTRUE 14036
14034: GO 14062
14036: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
14037: LD_ADDR_VAR 0 3
14041: PUSH
14042: LD_INT 11
14044: PUSH
14045: LD_INT 12
14047: PUSH
14048: LD_INT 13
14050: PUSH
14051: LD_INT 14
14053: PUSH
14054: EMPTY
14055: LIST
14056: LIST
14057: LIST
14058: LIST
14059: ST_TO_ADDR
14060: GO 14483
14062: LD_INT 28
14064: DOUBLE
14065: EQUAL
14066: IFTRUE 14070
14068: GO 14088
14070: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
14071: LD_ADDR_VAR 0 3
14075: PUSH
14076: LD_INT 13
14078: PUSH
14079: LD_INT 14
14081: PUSH
14082: EMPTY
14083: LIST
14084: LIST
14085: ST_TO_ADDR
14086: GO 14483
14088: LD_INT 29
14090: DOUBLE
14091: EQUAL
14092: IFTRUE 14096
14094: GO 14114
14096: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
14097: LD_ADDR_VAR 0 3
14101: PUSH
14102: LD_INT 13
14104: PUSH
14105: LD_INT 14
14107: PUSH
14108: EMPTY
14109: LIST
14110: LIST
14111: ST_TO_ADDR
14112: GO 14483
14114: LD_INT 31
14116: DOUBLE
14117: EQUAL
14118: IFTRUE 14122
14120: GO 14140
14122: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
14123: LD_ADDR_VAR 0 3
14127: PUSH
14128: LD_INT 13
14130: PUSH
14131: LD_INT 14
14133: PUSH
14134: EMPTY
14135: LIST
14136: LIST
14137: ST_TO_ADDR
14138: GO 14483
14140: LD_INT 26
14142: DOUBLE
14143: EQUAL
14144: IFTRUE 14148
14146: GO 14166
14148: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
14149: LD_ADDR_VAR 0 3
14153: PUSH
14154: LD_INT 13
14156: PUSH
14157: LD_INT 14
14159: PUSH
14160: EMPTY
14161: LIST
14162: LIST
14163: ST_TO_ADDR
14164: GO 14483
14166: LD_INT 42
14168: DOUBLE
14169: EQUAL
14170: IFTRUE 14174
14172: GO 14200
14174: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
14175: LD_ADDR_VAR 0 3
14179: PUSH
14180: LD_INT 21
14182: PUSH
14183: LD_INT 22
14185: PUSH
14186: LD_INT 23
14188: PUSH
14189: LD_INT 24
14191: PUSH
14192: EMPTY
14193: LIST
14194: LIST
14195: LIST
14196: LIST
14197: ST_TO_ADDR
14198: GO 14483
14200: LD_INT 43
14202: DOUBLE
14203: EQUAL
14204: IFTRUE 14208
14206: GO 14234
14208: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
14209: LD_ADDR_VAR 0 3
14213: PUSH
14214: LD_INT 21
14216: PUSH
14217: LD_INT 22
14219: PUSH
14220: LD_INT 23
14222: PUSH
14223: LD_INT 24
14225: PUSH
14226: EMPTY
14227: LIST
14228: LIST
14229: LIST
14230: LIST
14231: ST_TO_ADDR
14232: GO 14483
14234: LD_INT 44
14236: DOUBLE
14237: EQUAL
14238: IFTRUE 14242
14240: GO 14268
14242: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
14243: LD_ADDR_VAR 0 3
14247: PUSH
14248: LD_INT 21
14250: PUSH
14251: LD_INT 22
14253: PUSH
14254: LD_INT 23
14256: PUSH
14257: LD_INT 24
14259: PUSH
14260: EMPTY
14261: LIST
14262: LIST
14263: LIST
14264: LIST
14265: ST_TO_ADDR
14266: GO 14483
14268: LD_INT 45
14270: DOUBLE
14271: EQUAL
14272: IFTRUE 14276
14274: GO 14302
14276: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
14277: LD_ADDR_VAR 0 3
14281: PUSH
14282: LD_INT 21
14284: PUSH
14285: LD_INT 22
14287: PUSH
14288: LD_INT 23
14290: PUSH
14291: LD_INT 24
14293: PUSH
14294: EMPTY
14295: LIST
14296: LIST
14297: LIST
14298: LIST
14299: ST_TO_ADDR
14300: GO 14483
14302: LD_INT 49
14304: DOUBLE
14305: EQUAL
14306: IFTRUE 14310
14308: GO 14336
14310: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
14311: LD_ADDR_VAR 0 3
14315: PUSH
14316: LD_INT 21
14318: PUSH
14319: LD_INT 22
14321: PUSH
14322: LD_INT 23
14324: PUSH
14325: LD_INT 24
14327: PUSH
14328: EMPTY
14329: LIST
14330: LIST
14331: LIST
14332: LIST
14333: ST_TO_ADDR
14334: GO 14483
14336: LD_INT 51
14338: DOUBLE
14339: EQUAL
14340: IFTRUE 14344
14342: GO 14370
14344: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
14345: LD_ADDR_VAR 0 3
14349: PUSH
14350: LD_INT 21
14352: PUSH
14353: LD_INT 22
14355: PUSH
14356: LD_INT 23
14358: PUSH
14359: LD_INT 24
14361: PUSH
14362: EMPTY
14363: LIST
14364: LIST
14365: LIST
14366: LIST
14367: ST_TO_ADDR
14368: GO 14483
14370: LD_INT 52
14372: DOUBLE
14373: EQUAL
14374: IFTRUE 14378
14376: GO 14404
14378: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
14379: LD_ADDR_VAR 0 3
14383: PUSH
14384: LD_INT 21
14386: PUSH
14387: LD_INT 22
14389: PUSH
14390: LD_INT 23
14392: PUSH
14393: LD_INT 24
14395: PUSH
14396: EMPTY
14397: LIST
14398: LIST
14399: LIST
14400: LIST
14401: ST_TO_ADDR
14402: GO 14483
14404: LD_INT 53
14406: DOUBLE
14407: EQUAL
14408: IFTRUE 14412
14410: GO 14430
14412: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
14413: LD_ADDR_VAR 0 3
14417: PUSH
14418: LD_INT 23
14420: PUSH
14421: LD_INT 24
14423: PUSH
14424: EMPTY
14425: LIST
14426: LIST
14427: ST_TO_ADDR
14428: GO 14483
14430: LD_INT 46
14432: DOUBLE
14433: EQUAL
14434: IFTRUE 14438
14436: GO 14456
14438: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
14439: LD_ADDR_VAR 0 3
14443: PUSH
14444: LD_INT 23
14446: PUSH
14447: LD_INT 24
14449: PUSH
14450: EMPTY
14451: LIST
14452: LIST
14453: ST_TO_ADDR
14454: GO 14483
14456: LD_INT 47
14458: DOUBLE
14459: EQUAL
14460: IFTRUE 14464
14462: GO 14482
14464: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
14465: LD_ADDR_VAR 0 3
14469: PUSH
14470: LD_INT 23
14472: PUSH
14473: LD_INT 24
14475: PUSH
14476: EMPTY
14477: LIST
14478: LIST
14479: ST_TO_ADDR
14480: GO 14483
14482: POP
// result := ( chassis in result ) ;
14483: LD_ADDR_VAR 0 3
14487: PUSH
14488: LD_VAR 0 1
14492: PUSH
14493: LD_VAR 0 3
14497: IN
14498: ST_TO_ADDR
// end ;
14499: LD_VAR 0 3
14503: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
14504: LD_INT 0
14506: PPUSH
14507: PPUSH
14508: PPUSH
14509: PPUSH
14510: PPUSH
14511: PPUSH
14512: PPUSH
// result := array ;
14513: LD_ADDR_VAR 0 5
14517: PUSH
14518: LD_VAR 0 1
14522: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
14523: LD_VAR 0 1
14527: NOT
14528: IFTRUE 14537
14530: PUSH
14531: LD_VAR 0 2
14535: NOT
14536: OR
14537: IFTRUE 14546
14539: PUSH
14540: LD_VAR 0 3
14544: NOT
14545: OR
14546: IFTRUE 14560
14548: PUSH
14549: LD_VAR 0 2
14553: PUSH
14554: LD_VAR 0 1
14558: GREATER
14559: OR
14560: IFTRUE 14574
14562: PUSH
14563: LD_VAR 0 3
14567: PUSH
14568: LD_VAR 0 1
14572: GREATER
14573: OR
14574: IFFALSE 14578
// exit ;
14576: GO 14874
// if direction then
14578: LD_VAR 0 4
14582: IFFALSE 14646
// begin d := 1 ;
14584: LD_ADDR_VAR 0 9
14588: PUSH
14589: LD_INT 1
14591: ST_TO_ADDR
// if i_from > i_to then
14592: LD_VAR 0 2
14596: PUSH
14597: LD_VAR 0 3
14601: GREATER
14602: IFFALSE 14628
// length := ( array - i_from ) + i_to else
14604: LD_ADDR_VAR 0 11
14608: PUSH
14609: LD_VAR 0 1
14613: PUSH
14614: LD_VAR 0 2
14618: MINUS
14619: PUSH
14620: LD_VAR 0 3
14624: PLUS
14625: ST_TO_ADDR
14626: GO 14644
// length := i_to - i_from ;
14628: LD_ADDR_VAR 0 11
14632: PUSH
14633: LD_VAR 0 3
14637: PUSH
14638: LD_VAR 0 2
14642: MINUS
14643: ST_TO_ADDR
// end else
14644: GO 14707
// begin d := - 1 ;
14646: LD_ADDR_VAR 0 9
14650: PUSH
14651: LD_INT 1
14653: NEG
14654: ST_TO_ADDR
// if i_from > i_to then
14655: LD_VAR 0 2
14659: PUSH
14660: LD_VAR 0 3
14664: GREATER
14665: IFFALSE 14685
// length := i_from - i_to else
14667: LD_ADDR_VAR 0 11
14671: PUSH
14672: LD_VAR 0 2
14676: PUSH
14677: LD_VAR 0 3
14681: MINUS
14682: ST_TO_ADDR
14683: GO 14707
// length := ( array - i_to ) + i_from ;
14685: LD_ADDR_VAR 0 11
14689: PUSH
14690: LD_VAR 0 1
14694: PUSH
14695: LD_VAR 0 3
14699: MINUS
14700: PUSH
14701: LD_VAR 0 2
14705: PLUS
14706: ST_TO_ADDR
// end ; if not length then
14707: LD_VAR 0 11
14711: NOT
14712: IFFALSE 14716
// exit ;
14714: GO 14874
// tmp := array ;
14716: LD_ADDR_VAR 0 10
14720: PUSH
14721: LD_VAR 0 1
14725: ST_TO_ADDR
// for i = 1 to length do
14726: LD_ADDR_VAR 0 6
14730: PUSH
14731: DOUBLE
14732: LD_INT 1
14734: DEC
14735: ST_TO_ADDR
14736: LD_VAR 0 11
14740: PUSH
14741: FOR_TO
14742: IFFALSE 14862
// begin for j = 1 to array do
14744: LD_ADDR_VAR 0 7
14748: PUSH
14749: DOUBLE
14750: LD_INT 1
14752: DEC
14753: ST_TO_ADDR
14754: LD_VAR 0 1
14758: PUSH
14759: FOR_TO
14760: IFFALSE 14848
// begin k := j + d ;
14762: LD_ADDR_VAR 0 8
14766: PUSH
14767: LD_VAR 0 7
14771: PUSH
14772: LD_VAR 0 9
14776: PLUS
14777: ST_TO_ADDR
// if k > array then
14778: LD_VAR 0 8
14782: PUSH
14783: LD_VAR 0 1
14787: GREATER
14788: IFFALSE 14798
// k := 1 ;
14790: LD_ADDR_VAR 0 8
14794: PUSH
14795: LD_INT 1
14797: ST_TO_ADDR
// if not k then
14798: LD_VAR 0 8
14802: NOT
14803: IFFALSE 14815
// k := array ;
14805: LD_ADDR_VAR 0 8
14809: PUSH
14810: LD_VAR 0 1
14814: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
14815: LD_ADDR_VAR 0 10
14819: PUSH
14820: LD_VAR 0 10
14824: PPUSH
14825: LD_VAR 0 8
14829: PPUSH
14830: LD_VAR 0 1
14834: PUSH
14835: LD_VAR 0 7
14839: ARRAY
14840: PPUSH
14841: CALL_OW 1
14845: ST_TO_ADDR
// end ;
14846: GO 14759
14848: POP
14849: POP
// array := tmp ;
14850: LD_ADDR_VAR 0 1
14854: PUSH
14855: LD_VAR 0 10
14859: ST_TO_ADDR
// end ;
14860: GO 14741
14862: POP
14863: POP
// result := array ;
14864: LD_ADDR_VAR 0 5
14868: PUSH
14869: LD_VAR 0 1
14873: ST_TO_ADDR
// end ;
14874: LD_VAR 0 5
14878: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
14879: LD_INT 0
14881: PPUSH
14882: PPUSH
// result := 0 ;
14883: LD_ADDR_VAR 0 3
14887: PUSH
14888: LD_INT 0
14890: ST_TO_ADDR
// if not array or not value in array then
14891: LD_VAR 0 1
14895: NOT
14896: IFTRUE 14911
14898: PUSH
14899: LD_VAR 0 2
14903: PUSH
14904: LD_VAR 0 1
14908: IN
14909: NOT
14910: OR
14911: IFFALSE 14915
// exit ;
14913: GO 14969
// for i = 1 to array do
14915: LD_ADDR_VAR 0 4
14919: PUSH
14920: DOUBLE
14921: LD_INT 1
14923: DEC
14924: ST_TO_ADDR
14925: LD_VAR 0 1
14929: PUSH
14930: FOR_TO
14931: IFFALSE 14967
// if value = array [ i ] then
14933: LD_VAR 0 2
14937: PUSH
14938: LD_VAR 0 1
14942: PUSH
14943: LD_VAR 0 4
14947: ARRAY
14948: EQUAL
14949: IFFALSE 14965
// begin result := i ;
14951: LD_ADDR_VAR 0 3
14955: PUSH
14956: LD_VAR 0 4
14960: ST_TO_ADDR
// exit ;
14961: POP
14962: POP
14963: GO 14969
// end ;
14965: GO 14930
14967: POP
14968: POP
// end ;
14969: LD_VAR 0 3
14973: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
14974: LD_INT 0
14976: PPUSH
// vc_chassis := chassis ;
14977: LD_ADDR_OWVAR 37
14981: PUSH
14982: LD_VAR 0 1
14986: ST_TO_ADDR
// vc_engine := engine ;
14987: LD_ADDR_OWVAR 39
14991: PUSH
14992: LD_VAR 0 2
14996: ST_TO_ADDR
// vc_control := control ;
14997: LD_ADDR_OWVAR 38
15001: PUSH
15002: LD_VAR 0 3
15006: ST_TO_ADDR
// vc_weapon := weapon ;
15007: LD_ADDR_OWVAR 40
15011: PUSH
15012: LD_VAR 0 4
15016: ST_TO_ADDR
// vc_fuel_battery := fuel ;
15017: LD_ADDR_OWVAR 41
15021: PUSH
15022: LD_VAR 0 5
15026: ST_TO_ADDR
// end ;
15027: LD_VAR 0 6
15031: RET
// export function WantPlant ( unit ) ; var task ; begin
15032: LD_INT 0
15034: PPUSH
15035: PPUSH
// result := false ;
15036: LD_ADDR_VAR 0 2
15040: PUSH
15041: LD_INT 0
15043: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
15044: LD_ADDR_VAR 0 3
15048: PUSH
15049: LD_VAR 0 1
15053: PPUSH
15054: CALL_OW 437
15058: ST_TO_ADDR
// if task then
15059: LD_VAR 0 3
15063: IFFALSE 15091
// if task [ 1 ] [ 1 ] = p then
15065: LD_VAR 0 3
15069: PUSH
15070: LD_INT 1
15072: ARRAY
15073: PUSH
15074: LD_INT 1
15076: ARRAY
15077: PUSH
15078: LD_STRING p
15080: EQUAL
15081: IFFALSE 15091
// result := true ;
15083: LD_ADDR_VAR 0 2
15087: PUSH
15088: LD_INT 1
15090: ST_TO_ADDR
// end ;
15091: LD_VAR 0 2
15095: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
15096: LD_INT 0
15098: PPUSH
15099: PPUSH
15100: PPUSH
15101: PPUSH
// if pos < 1 then
15102: LD_VAR 0 2
15106: PUSH
15107: LD_INT 1
15109: LESS
15110: IFFALSE 15114
// exit ;
15112: GO 15417
// if pos = 1 then
15114: LD_VAR 0 2
15118: PUSH
15119: LD_INT 1
15121: EQUAL
15122: IFFALSE 15155
// result := Replace ( arr , pos [ 1 ] , value ) else
15124: LD_ADDR_VAR 0 4
15128: PUSH
15129: LD_VAR 0 1
15133: PPUSH
15134: LD_VAR 0 2
15138: PUSH
15139: LD_INT 1
15141: ARRAY
15142: PPUSH
15143: LD_VAR 0 3
15147: PPUSH
15148: CALL_OW 1
15152: ST_TO_ADDR
15153: GO 15417
// begin tmp := arr ;
15155: LD_ADDR_VAR 0 6
15159: PUSH
15160: LD_VAR 0 1
15164: ST_TO_ADDR
// s_arr := [ tmp ] ;
15165: LD_ADDR_VAR 0 7
15169: PUSH
15170: LD_VAR 0 6
15174: PUSH
15175: EMPTY
15176: LIST
15177: ST_TO_ADDR
// for i = 1 to pos - 1 do
15178: LD_ADDR_VAR 0 5
15182: PUSH
15183: DOUBLE
15184: LD_INT 1
15186: DEC
15187: ST_TO_ADDR
15188: LD_VAR 0 2
15192: PUSH
15193: LD_INT 1
15195: MINUS
15196: PUSH
15197: FOR_TO
15198: IFFALSE 15243
// begin tmp := tmp [ pos [ i ] ] ;
15200: LD_ADDR_VAR 0 6
15204: PUSH
15205: LD_VAR 0 6
15209: PUSH
15210: LD_VAR 0 2
15214: PUSH
15215: LD_VAR 0 5
15219: ARRAY
15220: ARRAY
15221: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
15222: LD_ADDR_VAR 0 7
15226: PUSH
15227: LD_VAR 0 7
15231: PUSH
15232: LD_VAR 0 6
15236: PUSH
15237: EMPTY
15238: LIST
15239: ADD
15240: ST_TO_ADDR
// end ;
15241: GO 15197
15243: POP
15244: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
15245: LD_ADDR_VAR 0 6
15249: PUSH
15250: LD_VAR 0 6
15254: PPUSH
15255: LD_VAR 0 2
15259: PUSH
15260: LD_VAR 0 2
15264: ARRAY
15265: PPUSH
15266: LD_VAR 0 3
15270: PPUSH
15271: CALL_OW 1
15275: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
15276: LD_ADDR_VAR 0 7
15280: PUSH
15281: LD_VAR 0 7
15285: PPUSH
15286: LD_VAR 0 7
15290: PPUSH
15291: LD_VAR 0 6
15295: PPUSH
15296: CALL_OW 1
15300: ST_TO_ADDR
// for i = s_arr downto 2 do
15301: LD_ADDR_VAR 0 5
15305: PUSH
15306: DOUBLE
15307: LD_VAR 0 7
15311: INC
15312: ST_TO_ADDR
15313: LD_INT 2
15315: PUSH
15316: FOR_DOWNTO
15317: IFFALSE 15401
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
15319: LD_ADDR_VAR 0 6
15323: PUSH
15324: LD_VAR 0 7
15328: PUSH
15329: LD_VAR 0 5
15333: PUSH
15334: LD_INT 1
15336: MINUS
15337: ARRAY
15338: PPUSH
15339: LD_VAR 0 2
15343: PUSH
15344: LD_VAR 0 5
15348: PUSH
15349: LD_INT 1
15351: MINUS
15352: ARRAY
15353: PPUSH
15354: LD_VAR 0 7
15358: PUSH
15359: LD_VAR 0 5
15363: ARRAY
15364: PPUSH
15365: CALL_OW 1
15369: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
15370: LD_ADDR_VAR 0 7
15374: PUSH
15375: LD_VAR 0 7
15379: PPUSH
15380: LD_VAR 0 5
15384: PUSH
15385: LD_INT 1
15387: MINUS
15388: PPUSH
15389: LD_VAR 0 6
15393: PPUSH
15394: CALL_OW 1
15398: ST_TO_ADDR
// end ;
15399: GO 15316
15401: POP
15402: POP
// result := s_arr [ 1 ] ;
15403: LD_ADDR_VAR 0 4
15407: PUSH
15408: LD_VAR 0 7
15412: PUSH
15413: LD_INT 1
15415: ARRAY
15416: ST_TO_ADDR
// end ; end ;
15417: LD_VAR 0 4
15421: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
15422: LD_INT 0
15424: PPUSH
15425: PPUSH
// if not list then
15426: LD_VAR 0 1
15430: NOT
15431: IFFALSE 15435
// exit ;
15433: GO 15526
// i := list [ pos1 ] ;
15435: LD_ADDR_VAR 0 5
15439: PUSH
15440: LD_VAR 0 1
15444: PUSH
15445: LD_VAR 0 2
15449: ARRAY
15450: ST_TO_ADDR
// if not i then
15451: LD_VAR 0 5
15455: NOT
15456: IFFALSE 15460
// exit ;
15458: GO 15526
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
15460: LD_ADDR_VAR 0 1
15464: PUSH
15465: LD_VAR 0 1
15469: PPUSH
15470: LD_VAR 0 2
15474: PPUSH
15475: LD_VAR 0 1
15479: PUSH
15480: LD_VAR 0 3
15484: ARRAY
15485: PPUSH
15486: CALL_OW 1
15490: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
15491: LD_ADDR_VAR 0 1
15495: PUSH
15496: LD_VAR 0 1
15500: PPUSH
15501: LD_VAR 0 3
15505: PPUSH
15506: LD_VAR 0 5
15510: PPUSH
15511: CALL_OW 1
15515: ST_TO_ADDR
// result := list ;
15516: LD_ADDR_VAR 0 4
15520: PUSH
15521: LD_VAR 0 1
15525: ST_TO_ADDR
// end ;
15526: LD_VAR 0 4
15530: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
15531: LD_INT 0
15533: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
15534: LD_ADDR_VAR 0 5
15538: PUSH
15539: LD_VAR 0 1
15543: PPUSH
15544: CALL_OW 250
15548: PPUSH
15549: LD_VAR 0 1
15553: PPUSH
15554: CALL_OW 251
15558: PPUSH
15559: LD_VAR 0 2
15563: PPUSH
15564: LD_VAR 0 3
15568: PPUSH
15569: LD_VAR 0 4
15573: PPUSH
15574: CALL 15956 0 5
15578: ST_TO_ADDR
// end ;
15579: LD_VAR 0 5
15583: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
15584: LD_INT 0
15586: PPUSH
15587: PPUSH
15588: PPUSH
15589: PPUSH
// if not list or not unit then
15590: LD_VAR 0 2
15594: NOT
15595: IFTRUE 15604
15597: PUSH
15598: LD_VAR 0 1
15602: NOT
15603: OR
15604: IFFALSE 15608
// exit ;
15606: GO 15951
// result := [ ] ;
15608: LD_ADDR_VAR 0 5
15612: PUSH
15613: EMPTY
15614: ST_TO_ADDR
// for i in list do
15615: LD_ADDR_VAR 0 6
15619: PUSH
15620: LD_VAR 0 2
15624: PUSH
15625: FOR_IN
15626: IFFALSE 15844
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
15628: LD_ADDR_VAR 0 8
15632: PUSH
15633: LD_VAR 0 1
15637: PPUSH
15638: LD_VAR 0 6
15642: PUSH
15643: LD_INT 1
15645: ARRAY
15646: PPUSH
15647: LD_VAR 0 6
15651: PUSH
15652: LD_INT 2
15654: ARRAY
15655: PPUSH
15656: CALL_OW 297
15660: ST_TO_ADDR
// if not Count ( result ) then
15661: LD_VAR 0 5
15665: PPUSH
15666: CALL 12212 0 1
15670: NOT
15671: IFFALSE 15704
// begin result := Join ( result , [ i , tmp ] ) ;
15673: LD_ADDR_VAR 0 5
15677: PUSH
15678: LD_VAR 0 5
15682: PPUSH
15683: LD_VAR 0 6
15687: PUSH
15688: LD_VAR 0 8
15692: PUSH
15693: EMPTY
15694: LIST
15695: LIST
15696: PPUSH
15697: CALL 48144 0 2
15701: ST_TO_ADDR
// continue ;
15702: GO 15625
// end ; if result [ result ] [ 2 ] <= tmp then
15704: LD_VAR 0 5
15708: PUSH
15709: LD_VAR 0 5
15713: ARRAY
15714: PUSH
15715: LD_INT 2
15717: ARRAY
15718: PUSH
15719: LD_VAR 0 8
15723: LESSEQUAL
15724: IFFALSE 15757
// result := Join ( result , [ i , tmp ] ) else
15726: LD_ADDR_VAR 0 5
15730: PUSH
15731: LD_VAR 0 5
15735: PPUSH
15736: LD_VAR 0 6
15740: PUSH
15741: LD_VAR 0 8
15745: PUSH
15746: EMPTY
15747: LIST
15748: LIST
15749: PPUSH
15750: CALL 48144 0 2
15754: ST_TO_ADDR
15755: GO 15842
// begin for j := 1 to Count ( result ) do
15757: LD_ADDR_VAR 0 7
15761: PUSH
15762: DOUBLE
15763: LD_INT 1
15765: DEC
15766: ST_TO_ADDR
15767: LD_VAR 0 5
15771: PPUSH
15772: CALL 12212 0 1
15776: PUSH
15777: FOR_TO
15778: IFFALSE 15840
// begin if tmp < result [ j ] [ 2 ] then
15780: LD_VAR 0 8
15784: PUSH
15785: LD_VAR 0 5
15789: PUSH
15790: LD_VAR 0 7
15794: ARRAY
15795: PUSH
15796: LD_INT 2
15798: ARRAY
15799: LESS
15800: IFFALSE 15838
// begin result := Insert ( result , j , [ i , tmp ] ) ;
15802: LD_ADDR_VAR 0 5
15806: PUSH
15807: LD_VAR 0 5
15811: PPUSH
15812: LD_VAR 0 7
15816: PPUSH
15817: LD_VAR 0 6
15821: PUSH
15822: LD_VAR 0 8
15826: PUSH
15827: EMPTY
15828: LIST
15829: LIST
15830: PPUSH
15831: CALL_OW 2
15835: ST_TO_ADDR
// break ;
15836: GO 15840
// end ; end ;
15838: GO 15777
15840: POP
15841: POP
// end ; end ;
15842: GO 15625
15844: POP
15845: POP
// if result and not asc then
15846: LD_VAR 0 5
15850: IFFALSE 15859
15852: PUSH
15853: LD_VAR 0 3
15857: NOT
15858: AND
15859: IFFALSE 15876
// result := ReverseArray ( result ) ;
15861: LD_ADDR_VAR 0 5
15865: PUSH
15866: LD_VAR 0 5
15870: PPUSH
15871: CALL 43234 0 1
15875: ST_TO_ADDR
// tmp := [ ] ;
15876: LD_ADDR_VAR 0 8
15880: PUSH
15881: EMPTY
15882: ST_TO_ADDR
// if mode then
15883: LD_VAR 0 4
15887: IFFALSE 15951
// begin for i := 1 to result do
15889: LD_ADDR_VAR 0 6
15893: PUSH
15894: DOUBLE
15895: LD_INT 1
15897: DEC
15898: ST_TO_ADDR
15899: LD_VAR 0 5
15903: PUSH
15904: FOR_TO
15905: IFFALSE 15939
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
15907: LD_ADDR_VAR 0 8
15911: PUSH
15912: LD_VAR 0 8
15916: PPUSH
15917: LD_VAR 0 5
15921: PUSH
15922: LD_VAR 0 6
15926: ARRAY
15927: PUSH
15928: LD_INT 1
15930: ARRAY
15931: PPUSH
15932: CALL 48144 0 2
15936: ST_TO_ADDR
15937: GO 15904
15939: POP
15940: POP
// result := tmp ;
15941: LD_ADDR_VAR 0 5
15945: PUSH
15946: LD_VAR 0 8
15950: ST_TO_ADDR
// end ; end ;
15951: LD_VAR 0 5
15955: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
15956: LD_INT 0
15958: PPUSH
15959: PPUSH
15960: PPUSH
15961: PPUSH
// if not list then
15962: LD_VAR 0 3
15966: NOT
15967: IFFALSE 15971
// exit ;
15969: GO 16361
// result := [ ] ;
15971: LD_ADDR_VAR 0 6
15975: PUSH
15976: EMPTY
15977: ST_TO_ADDR
// for i in list do
15978: LD_ADDR_VAR 0 7
15982: PUSH
15983: LD_VAR 0 3
15987: PUSH
15988: FOR_IN
15989: IFFALSE 16191
// begin tmp := GetDistUnitXY ( i , x , y ) ;
15991: LD_ADDR_VAR 0 9
15995: PUSH
15996: LD_VAR 0 7
16000: PPUSH
16001: LD_VAR 0 1
16005: PPUSH
16006: LD_VAR 0 2
16010: PPUSH
16011: CALL_OW 297
16015: ST_TO_ADDR
// if not result then
16016: LD_VAR 0 6
16020: NOT
16021: IFFALSE 16047
// result := [ [ i , tmp ] ] else
16023: LD_ADDR_VAR 0 6
16027: PUSH
16028: LD_VAR 0 7
16032: PUSH
16033: LD_VAR 0 9
16037: PUSH
16038: EMPTY
16039: LIST
16040: LIST
16041: PUSH
16042: EMPTY
16043: LIST
16044: ST_TO_ADDR
16045: GO 16189
// begin if result [ result ] [ 2 ] <= tmp then
16047: LD_VAR 0 6
16051: PUSH
16052: LD_VAR 0 6
16056: ARRAY
16057: PUSH
16058: LD_INT 2
16060: ARRAY
16061: PUSH
16062: LD_VAR 0 9
16066: LESSEQUAL
16067: IFFALSE 16109
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
16069: LD_ADDR_VAR 0 6
16073: PUSH
16074: LD_VAR 0 6
16078: PPUSH
16079: LD_VAR 0 6
16083: PUSH
16084: LD_INT 1
16086: PLUS
16087: PPUSH
16088: LD_VAR 0 7
16092: PUSH
16093: LD_VAR 0 9
16097: PUSH
16098: EMPTY
16099: LIST
16100: LIST
16101: PPUSH
16102: CALL_OW 2
16106: ST_TO_ADDR
16107: GO 16189
// for j := 1 to result do
16109: LD_ADDR_VAR 0 8
16113: PUSH
16114: DOUBLE
16115: LD_INT 1
16117: DEC
16118: ST_TO_ADDR
16119: LD_VAR 0 6
16123: PUSH
16124: FOR_TO
16125: IFFALSE 16187
// begin if tmp < result [ j ] [ 2 ] then
16127: LD_VAR 0 9
16131: PUSH
16132: LD_VAR 0 6
16136: PUSH
16137: LD_VAR 0 8
16141: ARRAY
16142: PUSH
16143: LD_INT 2
16145: ARRAY
16146: LESS
16147: IFFALSE 16185
// begin result := Insert ( result , j , [ i , tmp ] ) ;
16149: LD_ADDR_VAR 0 6
16153: PUSH
16154: LD_VAR 0 6
16158: PPUSH
16159: LD_VAR 0 8
16163: PPUSH
16164: LD_VAR 0 7
16168: PUSH
16169: LD_VAR 0 9
16173: PUSH
16174: EMPTY
16175: LIST
16176: LIST
16177: PPUSH
16178: CALL_OW 2
16182: ST_TO_ADDR
// break ;
16183: GO 16187
// end ; end ;
16185: GO 16124
16187: POP
16188: POP
// end ; end ;
16189: GO 15988
16191: POP
16192: POP
// if result and not asc then
16193: LD_VAR 0 6
16197: IFFALSE 16206
16199: PUSH
16200: LD_VAR 0 4
16204: NOT
16205: AND
16206: IFFALSE 16281
// begin tmp := result ;
16208: LD_ADDR_VAR 0 9
16212: PUSH
16213: LD_VAR 0 6
16217: ST_TO_ADDR
// for i = tmp downto 1 do
16218: LD_ADDR_VAR 0 7
16222: PUSH
16223: DOUBLE
16224: LD_VAR 0 9
16228: INC
16229: ST_TO_ADDR
16230: LD_INT 1
16232: PUSH
16233: FOR_DOWNTO
16234: IFFALSE 16279
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
16236: LD_ADDR_VAR 0 6
16240: PUSH
16241: LD_VAR 0 6
16245: PPUSH
16246: LD_VAR 0 9
16250: PUSH
16251: LD_VAR 0 7
16255: MINUS
16256: PUSH
16257: LD_INT 1
16259: PLUS
16260: PPUSH
16261: LD_VAR 0 9
16265: PUSH
16266: LD_VAR 0 7
16270: ARRAY
16271: PPUSH
16272: CALL_OW 1
16276: ST_TO_ADDR
16277: GO 16233
16279: POP
16280: POP
// end ; tmp := [ ] ;
16281: LD_ADDR_VAR 0 9
16285: PUSH
16286: EMPTY
16287: ST_TO_ADDR
// if mode then
16288: LD_VAR 0 5
16292: IFFALSE 16361
// begin for i = 1 to result do
16294: LD_ADDR_VAR 0 7
16298: PUSH
16299: DOUBLE
16300: LD_INT 1
16302: DEC
16303: ST_TO_ADDR
16304: LD_VAR 0 6
16308: PUSH
16309: FOR_TO
16310: IFFALSE 16349
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
16312: LD_ADDR_VAR 0 9
16316: PUSH
16317: LD_VAR 0 9
16321: PPUSH
16322: LD_VAR 0 7
16326: PPUSH
16327: LD_VAR 0 6
16331: PUSH
16332: LD_VAR 0 7
16336: ARRAY
16337: PUSH
16338: LD_INT 1
16340: ARRAY
16341: PPUSH
16342: CALL_OW 1
16346: ST_TO_ADDR
16347: GO 16309
16349: POP
16350: POP
// result := tmp ;
16351: LD_ADDR_VAR 0 6
16355: PUSH
16356: LD_VAR 0 9
16360: ST_TO_ADDR
// end ; end ;
16361: LD_VAR 0 6
16365: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
16366: LD_INT 0
16368: PPUSH
16369: PPUSH
16370: PPUSH
16371: PPUSH
16372: PPUSH
16373: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
16374: LD_ADDR_VAR 0 5
16378: PUSH
16379: LD_INT 0
16381: PUSH
16382: LD_INT 0
16384: PUSH
16385: LD_INT 0
16387: PUSH
16388: EMPTY
16389: PUSH
16390: EMPTY
16391: LIST
16392: LIST
16393: LIST
16394: LIST
16395: ST_TO_ADDR
// if not x or not y then
16396: LD_VAR 0 2
16400: NOT
16401: IFTRUE 16410
16403: PUSH
16404: LD_VAR 0 3
16408: NOT
16409: OR
16410: IFFALSE 16414
// exit ;
16412: GO 18070
// if not range then
16414: LD_VAR 0 4
16418: NOT
16419: IFFALSE 16429
// range := 10 ;
16421: LD_ADDR_VAR 0 4
16425: PUSH
16426: LD_INT 10
16428: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
16429: LD_ADDR_VAR 0 8
16433: PUSH
16434: LD_INT 81
16436: PUSH
16437: LD_VAR 0 1
16441: PUSH
16442: EMPTY
16443: LIST
16444: LIST
16445: PUSH
16446: LD_INT 92
16448: PUSH
16449: LD_VAR 0 2
16453: PUSH
16454: LD_VAR 0 3
16458: PUSH
16459: LD_VAR 0 4
16463: PUSH
16464: EMPTY
16465: LIST
16466: LIST
16467: LIST
16468: LIST
16469: PUSH
16470: LD_INT 3
16472: PUSH
16473: LD_INT 21
16475: PUSH
16476: LD_INT 3
16478: PUSH
16479: EMPTY
16480: LIST
16481: LIST
16482: PUSH
16483: EMPTY
16484: LIST
16485: LIST
16486: PUSH
16487: EMPTY
16488: LIST
16489: LIST
16490: LIST
16491: PPUSH
16492: CALL_OW 69
16496: ST_TO_ADDR
// if not tmp then
16497: LD_VAR 0 8
16501: NOT
16502: IFFALSE 16506
// exit ;
16504: GO 18070
// for i in tmp do
16506: LD_ADDR_VAR 0 6
16510: PUSH
16511: LD_VAR 0 8
16515: PUSH
16516: FOR_IN
16517: IFFALSE 18045
// begin points := [ 0 , 0 , 0 ] ;
16519: LD_ADDR_VAR 0 9
16523: PUSH
16524: LD_INT 0
16526: PUSH
16527: LD_INT 0
16529: PUSH
16530: LD_INT 0
16532: PUSH
16533: EMPTY
16534: LIST
16535: LIST
16536: LIST
16537: ST_TO_ADDR
// bpoints := 1 ;
16538: LD_ADDR_VAR 0 10
16542: PUSH
16543: LD_INT 1
16545: ST_TO_ADDR
// case GetType ( i ) of unit_human :
16546: LD_VAR 0 6
16550: PPUSH
16551: CALL_OW 247
16555: PUSH
16556: LD_INT 1
16558: DOUBLE
16559: EQUAL
16560: IFTRUE 16564
16562: GO 17146
16564: POP
// begin if GetClass ( i ) = 1 then
16565: LD_VAR 0 6
16569: PPUSH
16570: CALL_OW 257
16574: PUSH
16575: LD_INT 1
16577: EQUAL
16578: IFFALSE 16599
// points := [ 10 , 5 , 3 ] ;
16580: LD_ADDR_VAR 0 9
16584: PUSH
16585: LD_INT 10
16587: PUSH
16588: LD_INT 5
16590: PUSH
16591: LD_INT 3
16593: PUSH
16594: EMPTY
16595: LIST
16596: LIST
16597: LIST
16598: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
16599: LD_VAR 0 6
16603: PPUSH
16604: CALL_OW 257
16608: PUSH
16609: LD_INT 2
16611: PUSH
16612: LD_INT 3
16614: PUSH
16615: LD_INT 4
16617: PUSH
16618: EMPTY
16619: LIST
16620: LIST
16621: LIST
16622: IN
16623: IFFALSE 16644
// points := [ 3 , 2 , 1 ] ;
16625: LD_ADDR_VAR 0 9
16629: PUSH
16630: LD_INT 3
16632: PUSH
16633: LD_INT 2
16635: PUSH
16636: LD_INT 1
16638: PUSH
16639: EMPTY
16640: LIST
16641: LIST
16642: LIST
16643: ST_TO_ADDR
// if GetClass ( i ) = 5 then
16644: LD_VAR 0 6
16648: PPUSH
16649: CALL_OW 257
16653: PUSH
16654: LD_INT 5
16656: EQUAL
16657: IFFALSE 16678
// points := [ 130 , 5 , 2 ] ;
16659: LD_ADDR_VAR 0 9
16663: PUSH
16664: LD_INT 130
16666: PUSH
16667: LD_INT 5
16669: PUSH
16670: LD_INT 2
16672: PUSH
16673: EMPTY
16674: LIST
16675: LIST
16676: LIST
16677: ST_TO_ADDR
// if GetClass ( i ) = 8 then
16678: LD_VAR 0 6
16682: PPUSH
16683: CALL_OW 257
16687: PUSH
16688: LD_INT 8
16690: EQUAL
16691: IFFALSE 16712
// points := [ 35 , 35 , 30 ] ;
16693: LD_ADDR_VAR 0 9
16697: PUSH
16698: LD_INT 35
16700: PUSH
16701: LD_INT 35
16703: PUSH
16704: LD_INT 30
16706: PUSH
16707: EMPTY
16708: LIST
16709: LIST
16710: LIST
16711: ST_TO_ADDR
// if GetClass ( i ) = 9 then
16712: LD_VAR 0 6
16716: PPUSH
16717: CALL_OW 257
16721: PUSH
16722: LD_INT 9
16724: EQUAL
16725: IFFALSE 16746
// points := [ 20 , 55 , 40 ] ;
16727: LD_ADDR_VAR 0 9
16731: PUSH
16732: LD_INT 20
16734: PUSH
16735: LD_INT 55
16737: PUSH
16738: LD_INT 40
16740: PUSH
16741: EMPTY
16742: LIST
16743: LIST
16744: LIST
16745: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
16746: LD_VAR 0 6
16750: PPUSH
16751: CALL_OW 257
16755: PUSH
16756: LD_INT 12
16758: PUSH
16759: LD_INT 16
16761: PUSH
16762: EMPTY
16763: LIST
16764: LIST
16765: IN
16766: IFFALSE 16787
// points := [ 5 , 3 , 2 ] ;
16768: LD_ADDR_VAR 0 9
16772: PUSH
16773: LD_INT 5
16775: PUSH
16776: LD_INT 3
16778: PUSH
16779: LD_INT 2
16781: PUSH
16782: EMPTY
16783: LIST
16784: LIST
16785: LIST
16786: ST_TO_ADDR
// if GetClass ( i ) = 17 then
16787: LD_VAR 0 6
16791: PPUSH
16792: CALL_OW 257
16796: PUSH
16797: LD_INT 17
16799: EQUAL
16800: IFFALSE 16821
// points := [ 100 , 50 , 75 ] ;
16802: LD_ADDR_VAR 0 9
16806: PUSH
16807: LD_INT 100
16809: PUSH
16810: LD_INT 50
16812: PUSH
16813: LD_INT 75
16815: PUSH
16816: EMPTY
16817: LIST
16818: LIST
16819: LIST
16820: ST_TO_ADDR
// if GetClass ( i ) = 15 then
16821: LD_VAR 0 6
16825: PPUSH
16826: CALL_OW 257
16830: PUSH
16831: LD_INT 15
16833: EQUAL
16834: IFFALSE 16855
// points := [ 10 , 5 , 3 ] ;
16836: LD_ADDR_VAR 0 9
16840: PUSH
16841: LD_INT 10
16843: PUSH
16844: LD_INT 5
16846: PUSH
16847: LD_INT 3
16849: PUSH
16850: EMPTY
16851: LIST
16852: LIST
16853: LIST
16854: ST_TO_ADDR
// if GetClass ( i ) = 14 then
16855: LD_VAR 0 6
16859: PPUSH
16860: CALL_OW 257
16864: PUSH
16865: LD_INT 14
16867: EQUAL
16868: IFFALSE 16889
// points := [ 10 , 0 , 0 ] ;
16870: LD_ADDR_VAR 0 9
16874: PUSH
16875: LD_INT 10
16877: PUSH
16878: LD_INT 0
16880: PUSH
16881: LD_INT 0
16883: PUSH
16884: EMPTY
16885: LIST
16886: LIST
16887: LIST
16888: ST_TO_ADDR
// if GetClass ( i ) = 11 then
16889: LD_VAR 0 6
16893: PPUSH
16894: CALL_OW 257
16898: PUSH
16899: LD_INT 11
16901: EQUAL
16902: IFFALSE 16923
// points := [ 30 , 10 , 5 ] ;
16904: LD_ADDR_VAR 0 9
16908: PUSH
16909: LD_INT 30
16911: PUSH
16912: LD_INT 10
16914: PUSH
16915: LD_INT 5
16917: PUSH
16918: EMPTY
16919: LIST
16920: LIST
16921: LIST
16922: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
16923: LD_VAR 0 1
16927: PPUSH
16928: LD_INT 5
16930: PPUSH
16931: CALL_OW 321
16935: PUSH
16936: LD_INT 2
16938: EQUAL
16939: IFFALSE 16956
// bpoints := bpoints * 1.8 ;
16941: LD_ADDR_VAR 0 10
16945: PUSH
16946: LD_VAR 0 10
16950: PUSH
16951: LD_REAL  1.80000000000000E+0000
16954: MUL
16955: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
16956: LD_VAR 0 6
16960: PPUSH
16961: CALL_OW 257
16965: PUSH
16966: LD_INT 1
16968: PUSH
16969: LD_INT 2
16971: PUSH
16972: LD_INT 3
16974: PUSH
16975: LD_INT 4
16977: PUSH
16978: EMPTY
16979: LIST
16980: LIST
16981: LIST
16982: LIST
16983: IN
16984: IFFALSE 17004
16986: PUSH
16987: LD_VAR 0 1
16991: PPUSH
16992: LD_INT 51
16994: PPUSH
16995: CALL_OW 321
16999: PUSH
17000: LD_INT 2
17002: EQUAL
17003: AND
17004: IFFALSE 17021
// bpoints := bpoints * 1.2 ;
17006: LD_ADDR_VAR 0 10
17010: PUSH
17011: LD_VAR 0 10
17015: PUSH
17016: LD_REAL  1.20000000000000E+0000
17019: MUL
17020: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
17021: LD_VAR 0 6
17025: PPUSH
17026: CALL_OW 257
17030: PUSH
17031: LD_INT 5
17033: PUSH
17034: LD_INT 7
17036: PUSH
17037: LD_INT 9
17039: PUSH
17040: EMPTY
17041: LIST
17042: LIST
17043: LIST
17044: IN
17045: IFFALSE 17065
17047: PUSH
17048: LD_VAR 0 1
17052: PPUSH
17053: LD_INT 52
17055: PPUSH
17056: CALL_OW 321
17060: PUSH
17061: LD_INT 2
17063: EQUAL
17064: AND
17065: IFFALSE 17082
// bpoints := bpoints * 1.5 ;
17067: LD_ADDR_VAR 0 10
17071: PUSH
17072: LD_VAR 0 10
17076: PUSH
17077: LD_REAL  1.50000000000000E+0000
17080: MUL
17081: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
17082: LD_VAR 0 1
17086: PPUSH
17087: LD_INT 66
17089: PPUSH
17090: CALL_OW 321
17094: PUSH
17095: LD_INT 2
17097: EQUAL
17098: IFFALSE 17115
// bpoints := bpoints * 1.1 ;
17100: LD_ADDR_VAR 0 10
17104: PUSH
17105: LD_VAR 0 10
17109: PUSH
17110: LD_REAL  1.10000000000000E+0000
17113: MUL
17114: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
17115: LD_ADDR_VAR 0 10
17119: PUSH
17120: LD_VAR 0 10
17124: PUSH
17125: LD_VAR 0 6
17129: PPUSH
17130: LD_INT 1
17132: PPUSH
17133: CALL_OW 259
17137: PUSH
17138: LD_REAL  1.15000000000000E+0000
17141: MUL
17142: MUL
17143: ST_TO_ADDR
// end ; unit_vehicle :
17144: GO 17974
17146: LD_INT 2
17148: DOUBLE
17149: EQUAL
17150: IFTRUE 17154
17152: GO 17962
17154: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
17155: LD_VAR 0 6
17159: PPUSH
17160: CALL_OW 264
17164: PUSH
17165: LD_INT 2
17167: PUSH
17168: LD_INT 42
17170: PUSH
17171: LD_INT 24
17173: PUSH
17174: EMPTY
17175: LIST
17176: LIST
17177: LIST
17178: IN
17179: IFFALSE 17200
// points := [ 25 , 5 , 3 ] ;
17181: LD_ADDR_VAR 0 9
17185: PUSH
17186: LD_INT 25
17188: PUSH
17189: LD_INT 5
17191: PUSH
17192: LD_INT 3
17194: PUSH
17195: EMPTY
17196: LIST
17197: LIST
17198: LIST
17199: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
17200: LD_VAR 0 6
17204: PPUSH
17205: CALL_OW 264
17209: PUSH
17210: LD_INT 4
17212: PUSH
17213: LD_INT 43
17215: PUSH
17216: LD_INT 25
17218: PUSH
17219: EMPTY
17220: LIST
17221: LIST
17222: LIST
17223: IN
17224: IFFALSE 17245
// points := [ 40 , 15 , 5 ] ;
17226: LD_ADDR_VAR 0 9
17230: PUSH
17231: LD_INT 40
17233: PUSH
17234: LD_INT 15
17236: PUSH
17237: LD_INT 5
17239: PUSH
17240: EMPTY
17241: LIST
17242: LIST
17243: LIST
17244: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
17245: LD_VAR 0 6
17249: PPUSH
17250: CALL_OW 264
17254: PUSH
17255: LD_INT 3
17257: PUSH
17258: LD_INT 23
17260: PUSH
17261: EMPTY
17262: LIST
17263: LIST
17264: IN
17265: IFFALSE 17286
// points := [ 7 , 25 , 8 ] ;
17267: LD_ADDR_VAR 0 9
17271: PUSH
17272: LD_INT 7
17274: PUSH
17275: LD_INT 25
17277: PUSH
17278: LD_INT 8
17280: PUSH
17281: EMPTY
17282: LIST
17283: LIST
17284: LIST
17285: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
17286: LD_VAR 0 6
17290: PPUSH
17291: CALL_OW 264
17295: PUSH
17296: LD_INT 5
17298: PUSH
17299: LD_INT 27
17301: PUSH
17302: LD_INT 44
17304: PUSH
17305: EMPTY
17306: LIST
17307: LIST
17308: LIST
17309: IN
17310: IFFALSE 17331
// points := [ 14 , 50 , 16 ] ;
17312: LD_ADDR_VAR 0 9
17316: PUSH
17317: LD_INT 14
17319: PUSH
17320: LD_INT 50
17322: PUSH
17323: LD_INT 16
17325: PUSH
17326: EMPTY
17327: LIST
17328: LIST
17329: LIST
17330: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
17331: LD_VAR 0 6
17335: PPUSH
17336: CALL_OW 264
17340: PUSH
17341: LD_INT 6
17343: PUSH
17344: LD_INT 46
17346: PUSH
17347: EMPTY
17348: LIST
17349: LIST
17350: IN
17351: IFFALSE 17372
// points := [ 32 , 120 , 70 ] ;
17353: LD_ADDR_VAR 0 9
17357: PUSH
17358: LD_INT 32
17360: PUSH
17361: LD_INT 120
17363: PUSH
17364: LD_INT 70
17366: PUSH
17367: EMPTY
17368: LIST
17369: LIST
17370: LIST
17371: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
17372: LD_VAR 0 6
17376: PPUSH
17377: CALL_OW 264
17381: PUSH
17382: LD_INT 7
17384: PUSH
17385: LD_INT 28
17387: PUSH
17388: LD_INT 45
17390: PUSH
17391: LD_INT 92
17393: PUSH
17394: EMPTY
17395: LIST
17396: LIST
17397: LIST
17398: LIST
17399: IN
17400: IFFALSE 17421
// points := [ 35 , 20 , 45 ] ;
17402: LD_ADDR_VAR 0 9
17406: PUSH
17407: LD_INT 35
17409: PUSH
17410: LD_INT 20
17412: PUSH
17413: LD_INT 45
17415: PUSH
17416: EMPTY
17417: LIST
17418: LIST
17419: LIST
17420: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
17421: LD_VAR 0 6
17425: PPUSH
17426: CALL_OW 264
17430: PUSH
17431: LD_INT 47
17433: PUSH
17434: EMPTY
17435: LIST
17436: IN
17437: IFFALSE 17458
// points := [ 67 , 45 , 75 ] ;
17439: LD_ADDR_VAR 0 9
17443: PUSH
17444: LD_INT 67
17446: PUSH
17447: LD_INT 45
17449: PUSH
17450: LD_INT 75
17452: PUSH
17453: EMPTY
17454: LIST
17455: LIST
17456: LIST
17457: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
17458: LD_VAR 0 6
17462: PPUSH
17463: CALL_OW 264
17467: PUSH
17468: LD_INT 26
17470: PUSH
17471: EMPTY
17472: LIST
17473: IN
17474: IFFALSE 17495
// points := [ 120 , 30 , 80 ] ;
17476: LD_ADDR_VAR 0 9
17480: PUSH
17481: LD_INT 120
17483: PUSH
17484: LD_INT 30
17486: PUSH
17487: LD_INT 80
17489: PUSH
17490: EMPTY
17491: LIST
17492: LIST
17493: LIST
17494: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
17495: LD_VAR 0 6
17499: PPUSH
17500: CALL_OW 264
17504: PUSH
17505: LD_INT 22
17507: PUSH
17508: EMPTY
17509: LIST
17510: IN
17511: IFFALSE 17532
// points := [ 40 , 1 , 1 ] ;
17513: LD_ADDR_VAR 0 9
17517: PUSH
17518: LD_INT 40
17520: PUSH
17521: LD_INT 1
17523: PUSH
17524: LD_INT 1
17526: PUSH
17527: EMPTY
17528: LIST
17529: LIST
17530: LIST
17531: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
17532: LD_VAR 0 6
17536: PPUSH
17537: CALL_OW 264
17541: PUSH
17542: LD_INT 29
17544: PUSH
17545: EMPTY
17546: LIST
17547: IN
17548: IFFALSE 17569
// points := [ 70 , 200 , 400 ] ;
17550: LD_ADDR_VAR 0 9
17554: PUSH
17555: LD_INT 70
17557: PUSH
17558: LD_INT 200
17560: PUSH
17561: LD_INT 400
17563: PUSH
17564: EMPTY
17565: LIST
17566: LIST
17567: LIST
17568: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
17569: LD_VAR 0 6
17573: PPUSH
17574: CALL_OW 264
17578: PUSH
17579: LD_INT 14
17581: PUSH
17582: LD_INT 53
17584: PUSH
17585: EMPTY
17586: LIST
17587: LIST
17588: IN
17589: IFFALSE 17610
// points := [ 40 , 10 , 20 ] ;
17591: LD_ADDR_VAR 0 9
17595: PUSH
17596: LD_INT 40
17598: PUSH
17599: LD_INT 10
17601: PUSH
17602: LD_INT 20
17604: PUSH
17605: EMPTY
17606: LIST
17607: LIST
17608: LIST
17609: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
17610: LD_VAR 0 6
17614: PPUSH
17615: CALL_OW 264
17619: PUSH
17620: LD_INT 9
17622: PUSH
17623: EMPTY
17624: LIST
17625: IN
17626: IFFALSE 17647
// points := [ 5 , 70 , 20 ] ;
17628: LD_ADDR_VAR 0 9
17632: PUSH
17633: LD_INT 5
17635: PUSH
17636: LD_INT 70
17638: PUSH
17639: LD_INT 20
17641: PUSH
17642: EMPTY
17643: LIST
17644: LIST
17645: LIST
17646: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
17647: LD_VAR 0 6
17651: PPUSH
17652: CALL_OW 264
17656: PUSH
17657: LD_INT 10
17659: PUSH
17660: EMPTY
17661: LIST
17662: IN
17663: IFFALSE 17684
// points := [ 35 , 110 , 70 ] ;
17665: LD_ADDR_VAR 0 9
17669: PUSH
17670: LD_INT 35
17672: PUSH
17673: LD_INT 110
17675: PUSH
17676: LD_INT 70
17678: PUSH
17679: EMPTY
17680: LIST
17681: LIST
17682: LIST
17683: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
17684: LD_VAR 0 6
17688: PPUSH
17689: CALL_OW 265
17693: PUSH
17694: LD_INT 25
17696: EQUAL
17697: IFFALSE 17718
// points := [ 80 , 65 , 100 ] ;
17699: LD_ADDR_VAR 0 9
17703: PUSH
17704: LD_INT 80
17706: PUSH
17707: LD_INT 65
17709: PUSH
17710: LD_INT 100
17712: PUSH
17713: EMPTY
17714: LIST
17715: LIST
17716: LIST
17717: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
17718: LD_VAR 0 6
17722: PPUSH
17723: CALL_OW 263
17727: PUSH
17728: LD_INT 1
17730: EQUAL
17731: IFFALSE 17766
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
17733: LD_ADDR_VAR 0 10
17737: PUSH
17738: LD_VAR 0 10
17742: PUSH
17743: LD_VAR 0 6
17747: PPUSH
17748: CALL_OW 311
17752: PPUSH
17753: LD_INT 3
17755: PPUSH
17756: CALL_OW 259
17760: PUSH
17761: LD_INT 4
17763: MUL
17764: MUL
17765: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
17766: LD_VAR 0 6
17770: PPUSH
17771: CALL_OW 263
17775: PUSH
17776: LD_INT 2
17778: EQUAL
17779: IFFALSE 17830
// begin j := IsControledBy ( i ) ;
17781: LD_ADDR_VAR 0 7
17785: PUSH
17786: LD_VAR 0 6
17790: PPUSH
17791: CALL_OW 312
17795: ST_TO_ADDR
// if j then
17796: LD_VAR 0 7
17800: IFFALSE 17830
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
17802: LD_ADDR_VAR 0 10
17806: PUSH
17807: LD_VAR 0 10
17811: PUSH
17812: LD_VAR 0 7
17816: PPUSH
17817: LD_INT 3
17819: PPUSH
17820: CALL_OW 259
17824: PUSH
17825: LD_INT 3
17827: MUL
17828: MUL
17829: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
17830: LD_VAR 0 6
17834: PPUSH
17835: CALL_OW 264
17839: PUSH
17840: LD_INT 5
17842: PUSH
17843: LD_INT 6
17845: PUSH
17846: LD_INT 46
17848: PUSH
17849: LD_INT 44
17851: PUSH
17852: LD_INT 47
17854: PUSH
17855: LD_INT 45
17857: PUSH
17858: LD_INT 28
17860: PUSH
17861: LD_INT 7
17863: PUSH
17864: LD_INT 27
17866: PUSH
17867: LD_INT 29
17869: PUSH
17870: EMPTY
17871: LIST
17872: LIST
17873: LIST
17874: LIST
17875: LIST
17876: LIST
17877: LIST
17878: LIST
17879: LIST
17880: LIST
17881: IN
17882: IFFALSE 17902
17884: PUSH
17885: LD_VAR 0 1
17889: PPUSH
17890: LD_INT 52
17892: PPUSH
17893: CALL_OW 321
17897: PUSH
17898: LD_INT 2
17900: EQUAL
17901: AND
17902: IFFALSE 17919
// bpoints := bpoints * 1.2 ;
17904: LD_ADDR_VAR 0 10
17908: PUSH
17909: LD_VAR 0 10
17913: PUSH
17914: LD_REAL  1.20000000000000E+0000
17917: MUL
17918: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
17919: LD_VAR 0 6
17923: PPUSH
17924: CALL_OW 264
17928: PUSH
17929: LD_INT 6
17931: PUSH
17932: LD_INT 46
17934: PUSH
17935: LD_INT 47
17937: PUSH
17938: EMPTY
17939: LIST
17940: LIST
17941: LIST
17942: IN
17943: IFFALSE 17960
// bpoints := bpoints * 1.2 ;
17945: LD_ADDR_VAR 0 10
17949: PUSH
17950: LD_VAR 0 10
17954: PUSH
17955: LD_REAL  1.20000000000000E+0000
17958: MUL
17959: ST_TO_ADDR
// end ; unit_building :
17960: GO 17974
17962: LD_INT 3
17964: DOUBLE
17965: EQUAL
17966: IFTRUE 17970
17968: GO 17973
17970: POP
// ; end ;
17971: GO 17974
17973: POP
// for j = 1 to 3 do
17974: LD_ADDR_VAR 0 7
17978: PUSH
17979: DOUBLE
17980: LD_INT 1
17982: DEC
17983: ST_TO_ADDR
17984: LD_INT 3
17986: PUSH
17987: FOR_TO
17988: IFFALSE 18041
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
17990: LD_ADDR_VAR 0 5
17994: PUSH
17995: LD_VAR 0 5
17999: PPUSH
18000: LD_VAR 0 7
18004: PPUSH
18005: LD_VAR 0 5
18009: PUSH
18010: LD_VAR 0 7
18014: ARRAY
18015: PUSH
18016: LD_VAR 0 9
18020: PUSH
18021: LD_VAR 0 7
18025: ARRAY
18026: PUSH
18027: LD_VAR 0 10
18031: MUL
18032: PLUS
18033: PPUSH
18034: CALL_OW 1
18038: ST_TO_ADDR
18039: GO 17987
18041: POP
18042: POP
// end ;
18043: GO 16516
18045: POP
18046: POP
// result := Replace ( result , 4 , tmp ) ;
18047: LD_ADDR_VAR 0 5
18051: PUSH
18052: LD_VAR 0 5
18056: PPUSH
18057: LD_INT 4
18059: PPUSH
18060: LD_VAR 0 8
18064: PPUSH
18065: CALL_OW 1
18069: ST_TO_ADDR
// end ;
18070: LD_VAR 0 5
18074: RET
// export function DangerAtRange ( unit , range ) ; begin
18075: LD_INT 0
18077: PPUSH
// if not unit then
18078: LD_VAR 0 1
18082: NOT
18083: IFFALSE 18087
// exit ;
18085: GO 18132
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
18087: LD_ADDR_VAR 0 3
18091: PUSH
18092: LD_VAR 0 1
18096: PPUSH
18097: CALL_OW 255
18101: PPUSH
18102: LD_VAR 0 1
18106: PPUSH
18107: CALL_OW 250
18111: PPUSH
18112: LD_VAR 0 1
18116: PPUSH
18117: CALL_OW 251
18121: PPUSH
18122: LD_VAR 0 2
18126: PPUSH
18127: CALL 16366 0 4
18131: ST_TO_ADDR
// end ;
18132: LD_VAR 0 3
18136: RET
// export function DangerInArea ( side , area ) ; begin
18137: LD_INT 0
18139: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
18140: LD_ADDR_VAR 0 3
18144: PUSH
18145: LD_VAR 0 2
18149: PPUSH
18150: LD_INT 81
18152: PUSH
18153: LD_VAR 0 1
18157: PUSH
18158: EMPTY
18159: LIST
18160: LIST
18161: PPUSH
18162: CALL_OW 70
18166: ST_TO_ADDR
// end ;
18167: LD_VAR 0 3
18171: RET
// export function IsExtension ( b ) ; begin
18172: LD_INT 0
18174: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
18175: LD_ADDR_VAR 0 2
18179: PUSH
18180: LD_VAR 0 1
18184: PUSH
18185: LD_INT 23
18187: PUSH
18188: LD_INT 20
18190: PUSH
18191: LD_INT 22
18193: PUSH
18194: LD_INT 17
18196: PUSH
18197: LD_INT 24
18199: PUSH
18200: LD_INT 21
18202: PUSH
18203: LD_INT 19
18205: PUSH
18206: LD_INT 16
18208: PUSH
18209: LD_INT 25
18211: PUSH
18212: LD_INT 18
18214: PUSH
18215: EMPTY
18216: LIST
18217: LIST
18218: LIST
18219: LIST
18220: LIST
18221: LIST
18222: LIST
18223: LIST
18224: LIST
18225: LIST
18226: IN
18227: ST_TO_ADDR
// end ;
18228: LD_VAR 0 2
18232: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
18233: LD_INT 0
18235: PPUSH
18236: PPUSH
18237: PPUSH
// result := [ ] ;
18238: LD_ADDR_VAR 0 4
18242: PUSH
18243: EMPTY
18244: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
18245: LD_ADDR_VAR 0 5
18249: PUSH
18250: LD_VAR 0 2
18254: PPUSH
18255: LD_INT 21
18257: PUSH
18258: LD_INT 3
18260: PUSH
18261: EMPTY
18262: LIST
18263: LIST
18264: PPUSH
18265: CALL_OW 70
18269: ST_TO_ADDR
// if not tmp then
18270: LD_VAR 0 5
18274: NOT
18275: IFFALSE 18279
// exit ;
18277: GO 18343
// if checkLink then
18279: LD_VAR 0 3
18283: IFFALSE 18333
// begin for i in tmp do
18285: LD_ADDR_VAR 0 6
18289: PUSH
18290: LD_VAR 0 5
18294: PUSH
18295: FOR_IN
18296: IFFALSE 18331
// if GetBase ( i ) <> base then
18298: LD_VAR 0 6
18302: PPUSH
18303: CALL_OW 274
18307: PUSH
18308: LD_VAR 0 1
18312: NONEQUAL
18313: IFFALSE 18329
// ComLinkToBase ( base , i ) ;
18315: LD_VAR 0 1
18319: PPUSH
18320: LD_VAR 0 6
18324: PPUSH
18325: CALL_OW 169
18329: GO 18295
18331: POP
18332: POP
// end ; result := tmp ;
18333: LD_ADDR_VAR 0 4
18337: PUSH
18338: LD_VAR 0 5
18342: ST_TO_ADDR
// end ;
18343: LD_VAR 0 4
18347: RET
// export function ComComplete ( units , b ) ; var i ; begin
18348: LD_INT 0
18350: PPUSH
18351: PPUSH
// if not units then
18352: LD_VAR 0 1
18356: NOT
18357: IFFALSE 18361
// exit ;
18359: GO 18451
// for i in units do
18361: LD_ADDR_VAR 0 4
18365: PUSH
18366: LD_VAR 0 1
18370: PUSH
18371: FOR_IN
18372: IFFALSE 18449
// if BuildingStatus ( b ) = bs_build then
18374: LD_VAR 0 2
18378: PPUSH
18379: CALL_OW 461
18383: PUSH
18384: LD_INT 1
18386: EQUAL
18387: IFFALSE 18447
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
18389: LD_VAR 0 4
18393: PPUSH
18394: LD_STRING h
18396: PUSH
18397: LD_VAR 0 2
18401: PPUSH
18402: CALL_OW 250
18406: PUSH
18407: LD_VAR 0 2
18411: PPUSH
18412: CALL_OW 251
18416: PUSH
18417: LD_VAR 0 2
18421: PUSH
18422: LD_INT 0
18424: PUSH
18425: LD_INT 0
18427: PUSH
18428: LD_INT 0
18430: PUSH
18431: EMPTY
18432: LIST
18433: LIST
18434: LIST
18435: LIST
18436: LIST
18437: LIST
18438: LIST
18439: PUSH
18440: EMPTY
18441: LIST
18442: PPUSH
18443: CALL_OW 446
18447: GO 18371
18449: POP
18450: POP
// end ;
18451: LD_VAR 0 3
18455: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
18456: LD_INT 0
18458: PPUSH
18459: PPUSH
18460: PPUSH
18461: PPUSH
18462: PPUSH
18463: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
18464: LD_VAR 0 1
18468: NOT
18469: IFTRUE 18486
18471: PUSH
18472: LD_VAR 0 1
18476: PPUSH
18477: CALL_OW 263
18481: PUSH
18482: LD_INT 2
18484: NONEQUAL
18485: OR
18486: IFFALSE 18490
// exit ;
18488: GO 18806
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
18490: LD_ADDR_VAR 0 6
18494: PUSH
18495: LD_INT 22
18497: PUSH
18498: LD_VAR 0 1
18502: PPUSH
18503: CALL_OW 255
18507: PUSH
18508: EMPTY
18509: LIST
18510: LIST
18511: PUSH
18512: LD_INT 2
18514: PUSH
18515: LD_INT 30
18517: PUSH
18518: LD_INT 36
18520: PUSH
18521: EMPTY
18522: LIST
18523: LIST
18524: PUSH
18525: LD_INT 34
18527: PUSH
18528: LD_INT 31
18530: PUSH
18531: EMPTY
18532: LIST
18533: LIST
18534: PUSH
18535: EMPTY
18536: LIST
18537: LIST
18538: LIST
18539: PUSH
18540: EMPTY
18541: LIST
18542: LIST
18543: PPUSH
18544: CALL_OW 69
18548: ST_TO_ADDR
// if not tmp then
18549: LD_VAR 0 6
18553: NOT
18554: IFFALSE 18558
// exit ;
18556: GO 18806
// result := [ ] ;
18558: LD_ADDR_VAR 0 2
18562: PUSH
18563: EMPTY
18564: ST_TO_ADDR
// for i in tmp do
18565: LD_ADDR_VAR 0 3
18569: PUSH
18570: LD_VAR 0 6
18574: PUSH
18575: FOR_IN
18576: IFFALSE 18647
// begin t := UnitsInside ( i ) ;
18578: LD_ADDR_VAR 0 4
18582: PUSH
18583: LD_VAR 0 3
18587: PPUSH
18588: CALL_OW 313
18592: ST_TO_ADDR
// if t then
18593: LD_VAR 0 4
18597: IFFALSE 18645
// for j in t do
18599: LD_ADDR_VAR 0 7
18603: PUSH
18604: LD_VAR 0 4
18608: PUSH
18609: FOR_IN
18610: IFFALSE 18643
// result := Replace ( result , result + 1 , j ) ;
18612: LD_ADDR_VAR 0 2
18616: PUSH
18617: LD_VAR 0 2
18621: PPUSH
18622: LD_VAR 0 2
18626: PUSH
18627: LD_INT 1
18629: PLUS
18630: PPUSH
18631: LD_VAR 0 7
18635: PPUSH
18636: CALL_OW 1
18640: ST_TO_ADDR
18641: GO 18609
18643: POP
18644: POP
// end ;
18645: GO 18575
18647: POP
18648: POP
// if not result then
18649: LD_VAR 0 2
18653: NOT
18654: IFFALSE 18658
// exit ;
18656: GO 18806
// mech := result [ 1 ] ;
18658: LD_ADDR_VAR 0 5
18662: PUSH
18663: LD_VAR 0 2
18667: PUSH
18668: LD_INT 1
18670: ARRAY
18671: ST_TO_ADDR
// if result > 1 then
18672: LD_VAR 0 2
18676: PUSH
18677: LD_INT 1
18679: GREATER
18680: IFFALSE 18792
// begin for i = 2 to result do
18682: LD_ADDR_VAR 0 3
18686: PUSH
18687: DOUBLE
18688: LD_INT 2
18690: DEC
18691: ST_TO_ADDR
18692: LD_VAR 0 2
18696: PUSH
18697: FOR_TO
18698: IFFALSE 18790
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
18700: LD_ADDR_VAR 0 4
18704: PUSH
18705: LD_VAR 0 2
18709: PUSH
18710: LD_VAR 0 3
18714: ARRAY
18715: PPUSH
18716: LD_INT 3
18718: PPUSH
18719: CALL_OW 259
18723: PUSH
18724: LD_VAR 0 2
18728: PUSH
18729: LD_VAR 0 3
18733: ARRAY
18734: PPUSH
18735: CALL_OW 432
18739: MINUS
18740: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
18741: LD_VAR 0 4
18745: PUSH
18746: LD_VAR 0 5
18750: PPUSH
18751: LD_INT 3
18753: PPUSH
18754: CALL_OW 259
18758: PUSH
18759: LD_VAR 0 5
18763: PPUSH
18764: CALL_OW 432
18768: MINUS
18769: GREATEREQUAL
18770: IFFALSE 18788
// mech := result [ i ] ;
18772: LD_ADDR_VAR 0 5
18776: PUSH
18777: LD_VAR 0 2
18781: PUSH
18782: LD_VAR 0 3
18786: ARRAY
18787: ST_TO_ADDR
// end ;
18788: GO 18697
18790: POP
18791: POP
// end ; ComLinkTo ( vehicle , mech ) ;
18792: LD_VAR 0 1
18796: PPUSH
18797: LD_VAR 0 5
18801: PPUSH
18802: CALL_OW 135
// end ;
18806: LD_VAR 0 2
18810: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
18811: LD_INT 0
18813: PPUSH
18814: PPUSH
18815: PPUSH
18816: PPUSH
18817: PPUSH
18818: PPUSH
18819: PPUSH
18820: PPUSH
18821: PPUSH
18822: PPUSH
18823: PPUSH
18824: PPUSH
18825: PPUSH
// result := [ ] ;
18826: LD_ADDR_VAR 0 7
18830: PUSH
18831: EMPTY
18832: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
18833: LD_VAR 0 1
18837: PPUSH
18838: CALL_OW 266
18842: PUSH
18843: LD_INT 0
18845: PUSH
18846: LD_INT 1
18848: PUSH
18849: EMPTY
18850: LIST
18851: LIST
18852: IN
18853: NOT
18854: IFFALSE 18858
// exit ;
18856: GO 20498
// if name then
18858: LD_VAR 0 3
18862: IFFALSE 18878
// SetBName ( base_dep , name ) ;
18864: LD_VAR 0 1
18868: PPUSH
18869: LD_VAR 0 3
18873: PPUSH
18874: CALL_OW 500
// base := GetBase ( base_dep ) ;
18878: LD_ADDR_VAR 0 15
18882: PUSH
18883: LD_VAR 0 1
18887: PPUSH
18888: CALL_OW 274
18892: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
18893: LD_ADDR_VAR 0 16
18897: PUSH
18898: LD_VAR 0 1
18902: PPUSH
18903: CALL_OW 255
18907: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
18908: LD_ADDR_VAR 0 17
18912: PUSH
18913: LD_VAR 0 1
18917: PPUSH
18918: CALL_OW 248
18922: ST_TO_ADDR
// if sources then
18923: LD_VAR 0 5
18927: IFFALSE 18974
// for i = 1 to 3 do
18929: LD_ADDR_VAR 0 8
18933: PUSH
18934: DOUBLE
18935: LD_INT 1
18937: DEC
18938: ST_TO_ADDR
18939: LD_INT 3
18941: PUSH
18942: FOR_TO
18943: IFFALSE 18972
// AddResourceType ( base , i , sources [ i ] ) ;
18945: LD_VAR 0 15
18949: PPUSH
18950: LD_VAR 0 8
18954: PPUSH
18955: LD_VAR 0 5
18959: PUSH
18960: LD_VAR 0 8
18964: ARRAY
18965: PPUSH
18966: CALL_OW 276
18970: GO 18942
18972: POP
18973: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
18974: LD_ADDR_VAR 0 18
18978: PUSH
18979: LD_VAR 0 15
18983: PPUSH
18984: LD_VAR 0 2
18988: PPUSH
18989: LD_INT 1
18991: PPUSH
18992: CALL 18233 0 3
18996: ST_TO_ADDR
// InitHc ;
18997: CALL_OW 19
// InitUc ;
19001: CALL_OW 18
// uc_side := side ;
19005: LD_ADDR_OWVAR 20
19009: PUSH
19010: LD_VAR 0 16
19014: ST_TO_ADDR
// uc_nation := nation ;
19015: LD_ADDR_OWVAR 21
19019: PUSH
19020: LD_VAR 0 17
19024: ST_TO_ADDR
// if buildings then
19025: LD_VAR 0 18
19029: IFFALSE 20357
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
19031: LD_ADDR_VAR 0 19
19035: PUSH
19036: LD_VAR 0 18
19040: PPUSH
19041: LD_INT 2
19043: PUSH
19044: LD_INT 30
19046: PUSH
19047: LD_INT 29
19049: PUSH
19050: EMPTY
19051: LIST
19052: LIST
19053: PUSH
19054: LD_INT 30
19056: PUSH
19057: LD_INT 30
19059: PUSH
19060: EMPTY
19061: LIST
19062: LIST
19063: PUSH
19064: EMPTY
19065: LIST
19066: LIST
19067: LIST
19068: PPUSH
19069: CALL_OW 72
19073: ST_TO_ADDR
// if tmp then
19074: LD_VAR 0 19
19078: IFFALSE 19126
// for i in tmp do
19080: LD_ADDR_VAR 0 8
19084: PUSH
19085: LD_VAR 0 19
19089: PUSH
19090: FOR_IN
19091: IFFALSE 19124
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
19093: LD_VAR 0 8
19097: PPUSH
19098: CALL_OW 250
19102: PPUSH
19103: LD_VAR 0 8
19107: PPUSH
19108: CALL_OW 251
19112: PPUSH
19113: LD_VAR 0 16
19117: PPUSH
19118: CALL_OW 441
19122: GO 19090
19124: POP
19125: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
19126: LD_VAR 0 18
19130: PPUSH
19131: LD_INT 2
19133: PUSH
19134: LD_INT 30
19136: PUSH
19137: LD_INT 32
19139: PUSH
19140: EMPTY
19141: LIST
19142: LIST
19143: PUSH
19144: LD_INT 30
19146: PUSH
19147: LD_INT 33
19149: PUSH
19150: EMPTY
19151: LIST
19152: LIST
19153: PUSH
19154: EMPTY
19155: LIST
19156: LIST
19157: LIST
19158: PPUSH
19159: CALL_OW 72
19163: IFFALSE 19251
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
19165: LD_ADDR_VAR 0 8
19169: PUSH
19170: LD_VAR 0 18
19174: PPUSH
19175: LD_INT 2
19177: PUSH
19178: LD_INT 30
19180: PUSH
19181: LD_INT 32
19183: PUSH
19184: EMPTY
19185: LIST
19186: LIST
19187: PUSH
19188: LD_INT 30
19190: PUSH
19191: LD_INT 33
19193: PUSH
19194: EMPTY
19195: LIST
19196: LIST
19197: PUSH
19198: EMPTY
19199: LIST
19200: LIST
19201: LIST
19202: PPUSH
19203: CALL_OW 72
19207: PUSH
19208: FOR_IN
19209: IFFALSE 19249
// begin if not GetBWeapon ( i ) then
19211: LD_VAR 0 8
19215: PPUSH
19216: CALL_OW 269
19220: NOT
19221: IFFALSE 19247
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
19223: LD_VAR 0 8
19227: PPUSH
19228: LD_VAR 0 8
19232: PPUSH
19233: LD_VAR 0 2
19237: PPUSH
19238: CALL 20503 0 2
19242: PPUSH
19243: CALL_OW 431
// end ;
19247: GO 19208
19249: POP
19250: POP
// end ; for i = 1 to personel do
19251: LD_ADDR_VAR 0 8
19255: PUSH
19256: DOUBLE
19257: LD_INT 1
19259: DEC
19260: ST_TO_ADDR
19261: LD_VAR 0 6
19265: PUSH
19266: FOR_TO
19267: IFFALSE 20337
// begin if i > 4 then
19269: LD_VAR 0 8
19273: PUSH
19274: LD_INT 4
19276: GREATER
19277: IFFALSE 19281
// break ;
19279: GO 20337
// case i of 1 :
19281: LD_VAR 0 8
19285: PUSH
19286: LD_INT 1
19288: DOUBLE
19289: EQUAL
19290: IFTRUE 19294
19292: GO 19374
19294: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
19295: LD_ADDR_VAR 0 12
19299: PUSH
19300: LD_VAR 0 18
19304: PPUSH
19305: LD_INT 22
19307: PUSH
19308: LD_VAR 0 16
19312: PUSH
19313: EMPTY
19314: LIST
19315: LIST
19316: PUSH
19317: LD_INT 58
19319: PUSH
19320: EMPTY
19321: LIST
19322: PUSH
19323: LD_INT 2
19325: PUSH
19326: LD_INT 30
19328: PUSH
19329: LD_INT 32
19331: PUSH
19332: EMPTY
19333: LIST
19334: LIST
19335: PUSH
19336: LD_INT 30
19338: PUSH
19339: LD_INT 4
19341: PUSH
19342: EMPTY
19343: LIST
19344: LIST
19345: PUSH
19346: LD_INT 30
19348: PUSH
19349: LD_INT 5
19351: PUSH
19352: EMPTY
19353: LIST
19354: LIST
19355: PUSH
19356: EMPTY
19357: LIST
19358: LIST
19359: LIST
19360: LIST
19361: PUSH
19362: EMPTY
19363: LIST
19364: LIST
19365: LIST
19366: PPUSH
19367: CALL_OW 72
19371: ST_TO_ADDR
19372: GO 19596
19374: LD_INT 2
19376: DOUBLE
19377: EQUAL
19378: IFTRUE 19382
19380: GO 19444
19382: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
19383: LD_ADDR_VAR 0 12
19387: PUSH
19388: LD_VAR 0 18
19392: PPUSH
19393: LD_INT 22
19395: PUSH
19396: LD_VAR 0 16
19400: PUSH
19401: EMPTY
19402: LIST
19403: LIST
19404: PUSH
19405: LD_INT 2
19407: PUSH
19408: LD_INT 30
19410: PUSH
19411: LD_INT 0
19413: PUSH
19414: EMPTY
19415: LIST
19416: LIST
19417: PUSH
19418: LD_INT 30
19420: PUSH
19421: LD_INT 1
19423: PUSH
19424: EMPTY
19425: LIST
19426: LIST
19427: PUSH
19428: EMPTY
19429: LIST
19430: LIST
19431: LIST
19432: PUSH
19433: EMPTY
19434: LIST
19435: LIST
19436: PPUSH
19437: CALL_OW 72
19441: ST_TO_ADDR
19442: GO 19596
19444: LD_INT 3
19446: DOUBLE
19447: EQUAL
19448: IFTRUE 19452
19450: GO 19514
19452: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
19453: LD_ADDR_VAR 0 12
19457: PUSH
19458: LD_VAR 0 18
19462: PPUSH
19463: LD_INT 22
19465: PUSH
19466: LD_VAR 0 16
19470: PUSH
19471: EMPTY
19472: LIST
19473: LIST
19474: PUSH
19475: LD_INT 2
19477: PUSH
19478: LD_INT 30
19480: PUSH
19481: LD_INT 2
19483: PUSH
19484: EMPTY
19485: LIST
19486: LIST
19487: PUSH
19488: LD_INT 30
19490: PUSH
19491: LD_INT 3
19493: PUSH
19494: EMPTY
19495: LIST
19496: LIST
19497: PUSH
19498: EMPTY
19499: LIST
19500: LIST
19501: LIST
19502: PUSH
19503: EMPTY
19504: LIST
19505: LIST
19506: PPUSH
19507: CALL_OW 72
19511: ST_TO_ADDR
19512: GO 19596
19514: LD_INT 4
19516: DOUBLE
19517: EQUAL
19518: IFTRUE 19522
19520: GO 19595
19522: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
19523: LD_ADDR_VAR 0 12
19527: PUSH
19528: LD_VAR 0 18
19532: PPUSH
19533: LD_INT 22
19535: PUSH
19536: LD_VAR 0 16
19540: PUSH
19541: EMPTY
19542: LIST
19543: LIST
19544: PUSH
19545: LD_INT 2
19547: PUSH
19548: LD_INT 30
19550: PUSH
19551: LD_INT 6
19553: PUSH
19554: EMPTY
19555: LIST
19556: LIST
19557: PUSH
19558: LD_INT 30
19560: PUSH
19561: LD_INT 7
19563: PUSH
19564: EMPTY
19565: LIST
19566: LIST
19567: PUSH
19568: LD_INT 30
19570: PUSH
19571: LD_INT 8
19573: PUSH
19574: EMPTY
19575: LIST
19576: LIST
19577: PUSH
19578: EMPTY
19579: LIST
19580: LIST
19581: LIST
19582: LIST
19583: PUSH
19584: EMPTY
19585: LIST
19586: LIST
19587: PPUSH
19588: CALL_OW 72
19592: ST_TO_ADDR
19593: GO 19596
19595: POP
// if i = 1 then
19596: LD_VAR 0 8
19600: PUSH
19601: LD_INT 1
19603: EQUAL
19604: IFFALSE 19715
// begin tmp := [ ] ;
19606: LD_ADDR_VAR 0 19
19610: PUSH
19611: EMPTY
19612: ST_TO_ADDR
// for j in f do
19613: LD_ADDR_VAR 0 9
19617: PUSH
19618: LD_VAR 0 12
19622: PUSH
19623: FOR_IN
19624: IFFALSE 19697
// if GetBType ( j ) = b_bunker then
19626: LD_VAR 0 9
19630: PPUSH
19631: CALL_OW 266
19635: PUSH
19636: LD_INT 32
19638: EQUAL
19639: IFFALSE 19666
// tmp := Insert ( tmp , 1 , j ) else
19641: LD_ADDR_VAR 0 19
19645: PUSH
19646: LD_VAR 0 19
19650: PPUSH
19651: LD_INT 1
19653: PPUSH
19654: LD_VAR 0 9
19658: PPUSH
19659: CALL_OW 2
19663: ST_TO_ADDR
19664: GO 19695
// tmp := Insert ( tmp , tmp + 1 , j ) ;
19666: LD_ADDR_VAR 0 19
19670: PUSH
19671: LD_VAR 0 19
19675: PPUSH
19676: LD_VAR 0 19
19680: PUSH
19681: LD_INT 1
19683: PLUS
19684: PPUSH
19685: LD_VAR 0 9
19689: PPUSH
19690: CALL_OW 2
19694: ST_TO_ADDR
19695: GO 19623
19697: POP
19698: POP
// if tmp then
19699: LD_VAR 0 19
19703: IFFALSE 19715
// f := tmp ;
19705: LD_ADDR_VAR 0 12
19709: PUSH
19710: LD_VAR 0 19
19714: ST_TO_ADDR
// end ; x := personel [ i ] ;
19715: LD_ADDR_VAR 0 13
19719: PUSH
19720: LD_VAR 0 6
19724: PUSH
19725: LD_VAR 0 8
19729: ARRAY
19730: ST_TO_ADDR
// if x = - 1 then
19731: LD_VAR 0 13
19735: PUSH
19736: LD_INT 1
19738: NEG
19739: EQUAL
19740: IFFALSE 19951
// begin for j in f do
19742: LD_ADDR_VAR 0 9
19746: PUSH
19747: LD_VAR 0 12
19751: PUSH
19752: FOR_IN
19753: IFFALSE 19947
// repeat InitHc ;
19755: CALL_OW 19
// if GetBType ( j ) = b_barracks then
19759: LD_VAR 0 9
19763: PPUSH
19764: CALL_OW 266
19768: PUSH
19769: LD_INT 5
19771: EQUAL
19772: IFFALSE 19842
// begin if UnitsInside ( j ) < 3 then
19774: LD_VAR 0 9
19778: PPUSH
19779: CALL_OW 313
19783: PUSH
19784: LD_INT 3
19786: LESS
19787: IFFALSE 19823
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
19789: LD_INT 0
19791: PPUSH
19792: LD_INT 5
19794: PUSH
19795: LD_INT 8
19797: PUSH
19798: LD_INT 9
19800: PUSH
19801: EMPTY
19802: LIST
19803: LIST
19804: LIST
19805: PUSH
19806: LD_VAR 0 17
19810: ARRAY
19811: PPUSH
19812: LD_VAR 0 4
19816: PPUSH
19817: CALL_OW 380
19821: GO 19840
// PrepareHuman ( false , i , skill ) ;
19823: LD_INT 0
19825: PPUSH
19826: LD_VAR 0 8
19830: PPUSH
19831: LD_VAR 0 4
19835: PPUSH
19836: CALL_OW 380
// end else
19840: GO 19859
// PrepareHuman ( false , i , skill ) ;
19842: LD_INT 0
19844: PPUSH
19845: LD_VAR 0 8
19849: PPUSH
19850: LD_VAR 0 4
19854: PPUSH
19855: CALL_OW 380
// un := CreateHuman ;
19859: LD_ADDR_VAR 0 14
19863: PUSH
19864: CALL_OW 44
19868: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
19869: LD_ADDR_VAR 0 7
19873: PUSH
19874: LD_VAR 0 7
19878: PPUSH
19879: LD_INT 1
19881: PPUSH
19882: LD_VAR 0 14
19886: PPUSH
19887: CALL_OW 2
19891: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
19892: LD_VAR 0 14
19896: PPUSH
19897: LD_VAR 0 9
19901: PPUSH
19902: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
19906: LD_VAR 0 9
19910: PPUSH
19911: CALL_OW 313
19915: PUSH
19916: LD_INT 6
19918: EQUAL
19919: IFTRUE 19943
19921: PUSH
19922: LD_VAR 0 9
19926: PPUSH
19927: CALL_OW 266
19931: PUSH
19932: LD_INT 32
19934: PUSH
19935: LD_INT 31
19937: PUSH
19938: EMPTY
19939: LIST
19940: LIST
19941: IN
19942: OR
19943: IFFALSE 19755
19945: GO 19752
19947: POP
19948: POP
// end else
19949: GO 20335
// for j = 1 to x do
19951: LD_ADDR_VAR 0 9
19955: PUSH
19956: DOUBLE
19957: LD_INT 1
19959: DEC
19960: ST_TO_ADDR
19961: LD_VAR 0 13
19965: PUSH
19966: FOR_TO
19967: IFFALSE 20333
// begin InitHc ;
19969: CALL_OW 19
// if not f then
19973: LD_VAR 0 12
19977: NOT
19978: IFFALSE 20067
// begin PrepareHuman ( false , i , skill ) ;
19980: LD_INT 0
19982: PPUSH
19983: LD_VAR 0 8
19987: PPUSH
19988: LD_VAR 0 4
19992: PPUSH
19993: CALL_OW 380
// un := CreateHuman ;
19997: LD_ADDR_VAR 0 14
20001: PUSH
20002: CALL_OW 44
20006: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
20007: LD_ADDR_VAR 0 7
20011: PUSH
20012: LD_VAR 0 7
20016: PPUSH
20017: LD_INT 1
20019: PPUSH
20020: LD_VAR 0 14
20024: PPUSH
20025: CALL_OW 2
20029: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
20030: LD_VAR 0 14
20034: PPUSH
20035: LD_VAR 0 1
20039: PPUSH
20040: CALL_OW 250
20044: PPUSH
20045: LD_VAR 0 1
20049: PPUSH
20050: CALL_OW 251
20054: PPUSH
20055: LD_INT 10
20057: PPUSH
20058: LD_INT 0
20060: PPUSH
20061: CALL_OW 50
// continue ;
20065: GO 19966
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
20067: LD_VAR 0 12
20071: PUSH
20072: LD_INT 1
20074: ARRAY
20075: PPUSH
20076: CALL_OW 313
20080: IFFALSE 20108
20082: PUSH
20083: LD_VAR 0 12
20087: PUSH
20088: LD_INT 1
20090: ARRAY
20091: PPUSH
20092: CALL_OW 266
20096: PUSH
20097: LD_INT 32
20099: PUSH
20100: LD_INT 31
20102: PUSH
20103: EMPTY
20104: LIST
20105: LIST
20106: IN
20107: AND
20108: IFTRUE 20129
20110: PUSH
20111: LD_VAR 0 12
20115: PUSH
20116: LD_INT 1
20118: ARRAY
20119: PPUSH
20120: CALL_OW 313
20124: PUSH
20125: LD_INT 6
20127: EQUAL
20128: OR
20129: IFFALSE 20149
// f := Delete ( f , 1 ) ;
20131: LD_ADDR_VAR 0 12
20135: PUSH
20136: LD_VAR 0 12
20140: PPUSH
20141: LD_INT 1
20143: PPUSH
20144: CALL_OW 3
20148: ST_TO_ADDR
// if not f then
20149: LD_VAR 0 12
20153: NOT
20154: IFFALSE 20172
// begin x := x + 2 ;
20156: LD_ADDR_VAR 0 13
20160: PUSH
20161: LD_VAR 0 13
20165: PUSH
20166: LD_INT 2
20168: PLUS
20169: ST_TO_ADDR
// continue ;
20170: GO 19966
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
20172: LD_VAR 0 12
20176: PUSH
20177: LD_INT 1
20179: ARRAY
20180: PPUSH
20181: CALL_OW 266
20185: PUSH
20186: LD_INT 5
20188: EQUAL
20189: IFFALSE 20263
// begin if UnitsInside ( f [ 1 ] ) < 3 then
20191: LD_VAR 0 12
20195: PUSH
20196: LD_INT 1
20198: ARRAY
20199: PPUSH
20200: CALL_OW 313
20204: PUSH
20205: LD_INT 3
20207: LESS
20208: IFFALSE 20244
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
20210: LD_INT 0
20212: PPUSH
20213: LD_INT 5
20215: PUSH
20216: LD_INT 8
20218: PUSH
20219: LD_INT 9
20221: PUSH
20222: EMPTY
20223: LIST
20224: LIST
20225: LIST
20226: PUSH
20227: LD_VAR 0 17
20231: ARRAY
20232: PPUSH
20233: LD_VAR 0 4
20237: PPUSH
20238: CALL_OW 380
20242: GO 20261
// PrepareHuman ( false , i , skill ) ;
20244: LD_INT 0
20246: PPUSH
20247: LD_VAR 0 8
20251: PPUSH
20252: LD_VAR 0 4
20256: PPUSH
20257: CALL_OW 380
// end else
20261: GO 20280
// PrepareHuman ( false , i , skill ) ;
20263: LD_INT 0
20265: PPUSH
20266: LD_VAR 0 8
20270: PPUSH
20271: LD_VAR 0 4
20275: PPUSH
20276: CALL_OW 380
// un := CreateHuman ;
20280: LD_ADDR_VAR 0 14
20284: PUSH
20285: CALL_OW 44
20289: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
20290: LD_ADDR_VAR 0 7
20294: PUSH
20295: LD_VAR 0 7
20299: PPUSH
20300: LD_INT 1
20302: PPUSH
20303: LD_VAR 0 14
20307: PPUSH
20308: CALL_OW 2
20312: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
20313: LD_VAR 0 14
20317: PPUSH
20318: LD_VAR 0 12
20322: PUSH
20323: LD_INT 1
20325: ARRAY
20326: PPUSH
20327: CALL_OW 52
// end ;
20331: GO 19966
20333: POP
20334: POP
// end ;
20335: GO 19266
20337: POP
20338: POP
// result := result ^ buildings ;
20339: LD_ADDR_VAR 0 7
20343: PUSH
20344: LD_VAR 0 7
20348: PUSH
20349: LD_VAR 0 18
20353: ADD
20354: ST_TO_ADDR
// end else
20355: GO 20498
// begin for i = 1 to personel do
20357: LD_ADDR_VAR 0 8
20361: PUSH
20362: DOUBLE
20363: LD_INT 1
20365: DEC
20366: ST_TO_ADDR
20367: LD_VAR 0 6
20371: PUSH
20372: FOR_TO
20373: IFFALSE 20496
// begin if i > 4 then
20375: LD_VAR 0 8
20379: PUSH
20380: LD_INT 4
20382: GREATER
20383: IFFALSE 20387
// break ;
20385: GO 20496
// x := personel [ i ] ;
20387: LD_ADDR_VAR 0 13
20391: PUSH
20392: LD_VAR 0 6
20396: PUSH
20397: LD_VAR 0 8
20401: ARRAY
20402: ST_TO_ADDR
// if x = - 1 then
20403: LD_VAR 0 13
20407: PUSH
20408: LD_INT 1
20410: NEG
20411: EQUAL
20412: IFFALSE 20416
// continue ;
20414: GO 20372
// PrepareHuman ( false , i , skill ) ;
20416: LD_INT 0
20418: PPUSH
20419: LD_VAR 0 8
20423: PPUSH
20424: LD_VAR 0 4
20428: PPUSH
20429: CALL_OW 380
// un := CreateHuman ;
20433: LD_ADDR_VAR 0 14
20437: PUSH
20438: CALL_OW 44
20442: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
20443: LD_VAR 0 14
20447: PPUSH
20448: LD_VAR 0 1
20452: PPUSH
20453: CALL_OW 250
20457: PPUSH
20458: LD_VAR 0 1
20462: PPUSH
20463: CALL_OW 251
20467: PPUSH
20468: LD_INT 10
20470: PPUSH
20471: LD_INT 0
20473: PPUSH
20474: CALL_OW 50
// result := result ^ un ;
20478: LD_ADDR_VAR 0 7
20482: PUSH
20483: LD_VAR 0 7
20487: PUSH
20488: LD_VAR 0 14
20492: ADD
20493: ST_TO_ADDR
// end ;
20494: GO 20372
20496: POP
20497: POP
// end ; end ;
20498: LD_VAR 0 7
20502: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
20503: LD_INT 0
20505: PPUSH
20506: PPUSH
20507: PPUSH
20508: PPUSH
20509: PPUSH
20510: PPUSH
20511: PPUSH
20512: PPUSH
20513: PPUSH
20514: PPUSH
20515: PPUSH
20516: PPUSH
20517: PPUSH
20518: PPUSH
20519: PPUSH
20520: PPUSH
// result := false ;
20521: LD_ADDR_VAR 0 3
20525: PUSH
20526: LD_INT 0
20528: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
20529: LD_VAR 0 1
20533: NOT
20534: IFTRUE 20559
20536: PUSH
20537: LD_VAR 0 1
20541: PPUSH
20542: CALL_OW 266
20546: PUSH
20547: LD_INT 32
20549: PUSH
20550: LD_INT 33
20552: PUSH
20553: EMPTY
20554: LIST
20555: LIST
20556: IN
20557: NOT
20558: OR
20559: IFFALSE 20563
// exit ;
20561: GO 21698
// nat := GetNation ( tower ) ;
20563: LD_ADDR_VAR 0 12
20567: PUSH
20568: LD_VAR 0 1
20572: PPUSH
20573: CALL_OW 248
20577: ST_TO_ADDR
// side := GetSide ( tower ) ;
20578: LD_ADDR_VAR 0 16
20582: PUSH
20583: LD_VAR 0 1
20587: PPUSH
20588: CALL_OW 255
20592: ST_TO_ADDR
// x := GetX ( tower ) ;
20593: LD_ADDR_VAR 0 10
20597: PUSH
20598: LD_VAR 0 1
20602: PPUSH
20603: CALL_OW 250
20607: ST_TO_ADDR
// y := GetY ( tower ) ;
20608: LD_ADDR_VAR 0 11
20612: PUSH
20613: LD_VAR 0 1
20617: PPUSH
20618: CALL_OW 251
20622: ST_TO_ADDR
// if not x or not y then
20623: LD_VAR 0 10
20627: NOT
20628: IFTRUE 20637
20630: PUSH
20631: LD_VAR 0 11
20635: NOT
20636: OR
20637: IFFALSE 20641
// exit ;
20639: GO 21698
// weapon := 0 ;
20641: LD_ADDR_VAR 0 18
20645: PUSH
20646: LD_INT 0
20648: ST_TO_ADDR
// fac_list := [ ] ;
20649: LD_ADDR_VAR 0 17
20653: PUSH
20654: EMPTY
20655: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
20656: LD_ADDR_VAR 0 6
20660: PUSH
20661: LD_VAR 0 1
20665: PPUSH
20666: CALL_OW 274
20670: PPUSH
20671: LD_VAR 0 2
20675: PPUSH
20676: LD_INT 0
20678: PPUSH
20679: CALL 18233 0 3
20683: PPUSH
20684: LD_INT 30
20686: PUSH
20687: LD_INT 3
20689: PUSH
20690: EMPTY
20691: LIST
20692: LIST
20693: PPUSH
20694: CALL_OW 72
20698: ST_TO_ADDR
// if not factories then
20699: LD_VAR 0 6
20703: NOT
20704: IFFALSE 20708
// exit ;
20706: GO 21698
// for i in factories do
20708: LD_ADDR_VAR 0 8
20712: PUSH
20713: LD_VAR 0 6
20717: PUSH
20718: FOR_IN
20719: IFFALSE 20744
// fac_list := fac_list union AvailableWeaponList ( i ) ;
20721: LD_ADDR_VAR 0 17
20725: PUSH
20726: LD_VAR 0 17
20730: PUSH
20731: LD_VAR 0 8
20735: PPUSH
20736: CALL_OW 478
20740: UNION
20741: ST_TO_ADDR
20742: GO 20718
20744: POP
20745: POP
// if not fac_list then
20746: LD_VAR 0 17
20750: NOT
20751: IFFALSE 20755
// exit ;
20753: GO 21698
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
20755: LD_ADDR_VAR 0 5
20759: PUSH
20760: LD_INT 4
20762: PUSH
20763: LD_INT 5
20765: PUSH
20766: LD_INT 9
20768: PUSH
20769: LD_INT 10
20771: PUSH
20772: LD_INT 6
20774: PUSH
20775: LD_INT 7
20777: PUSH
20778: LD_INT 11
20780: PUSH
20781: EMPTY
20782: LIST
20783: LIST
20784: LIST
20785: LIST
20786: LIST
20787: LIST
20788: LIST
20789: PUSH
20790: LD_INT 27
20792: PUSH
20793: LD_INT 28
20795: PUSH
20796: LD_INT 26
20798: PUSH
20799: LD_INT 30
20801: PUSH
20802: EMPTY
20803: LIST
20804: LIST
20805: LIST
20806: LIST
20807: PUSH
20808: LD_INT 43
20810: PUSH
20811: LD_INT 44
20813: PUSH
20814: LD_INT 46
20816: PUSH
20817: LD_INT 45
20819: PUSH
20820: LD_INT 47
20822: PUSH
20823: LD_INT 49
20825: PUSH
20826: EMPTY
20827: LIST
20828: LIST
20829: LIST
20830: LIST
20831: LIST
20832: LIST
20833: PUSH
20834: EMPTY
20835: LIST
20836: LIST
20837: LIST
20838: PUSH
20839: LD_VAR 0 12
20843: ARRAY
20844: ST_TO_ADDR
// list := list isect fac_list ;
20845: LD_ADDR_VAR 0 5
20849: PUSH
20850: LD_VAR 0 5
20854: PUSH
20855: LD_VAR 0 17
20859: ISECT
20860: ST_TO_ADDR
// if not list then
20861: LD_VAR 0 5
20865: NOT
20866: IFFALSE 20870
// exit ;
20868: GO 21698
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
20870: LD_VAR 0 12
20874: PUSH
20875: LD_INT 3
20877: EQUAL
20878: IFFALSE 20890
20880: PUSH
20881: LD_INT 49
20883: PUSH
20884: LD_VAR 0 5
20888: IN
20889: AND
20890: IFFALSE 20910
20892: PUSH
20893: LD_INT 31
20895: PPUSH
20896: LD_VAR 0 16
20900: PPUSH
20901: CALL_OW 321
20905: PUSH
20906: LD_INT 2
20908: EQUAL
20909: AND
20910: IFFALSE 20970
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
20912: LD_INT 22
20914: PUSH
20915: LD_VAR 0 16
20919: PUSH
20920: EMPTY
20921: LIST
20922: LIST
20923: PUSH
20924: LD_INT 35
20926: PUSH
20927: LD_INT 49
20929: PUSH
20930: EMPTY
20931: LIST
20932: LIST
20933: PUSH
20934: LD_INT 91
20936: PUSH
20937: LD_VAR 0 1
20941: PUSH
20942: LD_INT 10
20944: PUSH
20945: EMPTY
20946: LIST
20947: LIST
20948: LIST
20949: PUSH
20950: EMPTY
20951: LIST
20952: LIST
20953: LIST
20954: PPUSH
20955: CALL_OW 69
20959: NOT
20960: IFFALSE 20970
// weapon := ru_time_lapser ;
20962: LD_ADDR_VAR 0 18
20966: PUSH
20967: LD_INT 49
20969: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
20970: LD_VAR 0 12
20974: PUSH
20975: LD_INT 1
20977: PUSH
20978: LD_INT 2
20980: PUSH
20981: EMPTY
20982: LIST
20983: LIST
20984: IN
20985: IFFALSE 21009
20987: PUSH
20988: LD_INT 11
20990: PUSH
20991: LD_VAR 0 5
20995: IN
20996: IFTRUE 21008
20998: PUSH
20999: LD_INT 30
21001: PUSH
21002: LD_VAR 0 5
21006: IN
21007: OR
21008: AND
21009: IFFALSE 21029
21011: PUSH
21012: LD_INT 6
21014: PPUSH
21015: LD_VAR 0 16
21019: PPUSH
21020: CALL_OW 321
21024: PUSH
21025: LD_INT 2
21027: EQUAL
21028: AND
21029: IFFALSE 21196
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
21031: LD_INT 22
21033: PUSH
21034: LD_VAR 0 16
21038: PUSH
21039: EMPTY
21040: LIST
21041: LIST
21042: PUSH
21043: LD_INT 2
21045: PUSH
21046: LD_INT 35
21048: PUSH
21049: LD_INT 11
21051: PUSH
21052: EMPTY
21053: LIST
21054: LIST
21055: PUSH
21056: LD_INT 35
21058: PUSH
21059: LD_INT 30
21061: PUSH
21062: EMPTY
21063: LIST
21064: LIST
21065: PUSH
21066: EMPTY
21067: LIST
21068: LIST
21069: LIST
21070: PUSH
21071: LD_INT 91
21073: PUSH
21074: LD_VAR 0 1
21078: PUSH
21079: LD_INT 18
21081: PUSH
21082: EMPTY
21083: LIST
21084: LIST
21085: LIST
21086: PUSH
21087: EMPTY
21088: LIST
21089: LIST
21090: LIST
21091: PPUSH
21092: CALL_OW 69
21096: NOT
21097: IFFALSE 21173
21099: PUSH
21100: LD_INT 22
21102: PUSH
21103: LD_VAR 0 16
21107: PUSH
21108: EMPTY
21109: LIST
21110: LIST
21111: PUSH
21112: LD_INT 2
21114: PUSH
21115: LD_INT 30
21117: PUSH
21118: LD_INT 32
21120: PUSH
21121: EMPTY
21122: LIST
21123: LIST
21124: PUSH
21125: LD_INT 30
21127: PUSH
21128: LD_INT 33
21130: PUSH
21131: EMPTY
21132: LIST
21133: LIST
21134: PUSH
21135: EMPTY
21136: LIST
21137: LIST
21138: LIST
21139: PUSH
21140: LD_INT 91
21142: PUSH
21143: LD_VAR 0 1
21147: PUSH
21148: LD_INT 12
21150: PUSH
21151: EMPTY
21152: LIST
21153: LIST
21154: LIST
21155: PUSH
21156: EMPTY
21157: LIST
21158: LIST
21159: LIST
21160: PUSH
21161: EMPTY
21162: LIST
21163: PPUSH
21164: CALL_OW 69
21168: PUSH
21169: LD_INT 2
21171: GREATER
21172: AND
21173: IFFALSE 21196
// weapon := [ us_radar , ar_radar ] [ nat ] ;
21175: LD_ADDR_VAR 0 18
21179: PUSH
21180: LD_INT 11
21182: PUSH
21183: LD_INT 30
21185: PUSH
21186: EMPTY
21187: LIST
21188: LIST
21189: PUSH
21190: LD_VAR 0 12
21194: ARRAY
21195: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
21196: LD_VAR 0 18
21200: NOT
21201: IFFALSE 21221
21203: PUSH
21204: LD_INT 40
21206: PPUSH
21207: LD_VAR 0 16
21211: PPUSH
21212: CALL_OW 321
21216: PUSH
21217: LD_INT 2
21219: EQUAL
21220: AND
21221: IFFALSE 21257
21223: PUSH
21224: LD_INT 7
21226: PUSH
21227: LD_VAR 0 5
21231: IN
21232: IFTRUE 21244
21234: PUSH
21235: LD_INT 28
21237: PUSH
21238: LD_VAR 0 5
21242: IN
21243: OR
21244: IFTRUE 21256
21246: PUSH
21247: LD_INT 45
21249: PUSH
21250: LD_VAR 0 5
21254: IN
21255: OR
21256: AND
21257: IFFALSE 21511
// begin hex := GetHexInfo ( x , y ) ;
21259: LD_ADDR_VAR 0 4
21263: PUSH
21264: LD_VAR 0 10
21268: PPUSH
21269: LD_VAR 0 11
21273: PPUSH
21274: CALL_OW 546
21278: ST_TO_ADDR
// if hex [ 1 ] then
21279: LD_VAR 0 4
21283: PUSH
21284: LD_INT 1
21286: ARRAY
21287: IFFALSE 21291
// exit ;
21289: GO 21698
// height := hex [ 2 ] ;
21291: LD_ADDR_VAR 0 15
21295: PUSH
21296: LD_VAR 0 4
21300: PUSH
21301: LD_INT 2
21303: ARRAY
21304: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
21305: LD_ADDR_VAR 0 14
21309: PUSH
21310: LD_INT 0
21312: PUSH
21313: LD_INT 2
21315: PUSH
21316: LD_INT 3
21318: PUSH
21319: LD_INT 5
21321: PUSH
21322: EMPTY
21323: LIST
21324: LIST
21325: LIST
21326: LIST
21327: ST_TO_ADDR
// for i in tmp do
21328: LD_ADDR_VAR 0 8
21332: PUSH
21333: LD_VAR 0 14
21337: PUSH
21338: FOR_IN
21339: IFFALSE 21509
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
21341: LD_ADDR_VAR 0 9
21345: PUSH
21346: LD_VAR 0 10
21350: PPUSH
21351: LD_VAR 0 8
21355: PPUSH
21356: LD_INT 5
21358: PPUSH
21359: CALL_OW 272
21363: PUSH
21364: LD_VAR 0 11
21368: PPUSH
21369: LD_VAR 0 8
21373: PPUSH
21374: LD_INT 5
21376: PPUSH
21377: CALL_OW 273
21381: PUSH
21382: EMPTY
21383: LIST
21384: LIST
21385: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
21386: LD_VAR 0 9
21390: PUSH
21391: LD_INT 1
21393: ARRAY
21394: PPUSH
21395: LD_VAR 0 9
21399: PUSH
21400: LD_INT 2
21402: ARRAY
21403: PPUSH
21404: CALL_OW 488
21408: IFFALSE 21507
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
21410: LD_ADDR_VAR 0 4
21414: PUSH
21415: LD_VAR 0 9
21419: PUSH
21420: LD_INT 1
21422: ARRAY
21423: PPUSH
21424: LD_VAR 0 9
21428: PUSH
21429: LD_INT 2
21431: ARRAY
21432: PPUSH
21433: CALL_OW 546
21437: ST_TO_ADDR
// if hex [ 1 ] then
21438: LD_VAR 0 4
21442: PUSH
21443: LD_INT 1
21445: ARRAY
21446: IFFALSE 21450
// continue ;
21448: GO 21338
// h := hex [ 2 ] ;
21450: LD_ADDR_VAR 0 13
21454: PUSH
21455: LD_VAR 0 4
21459: PUSH
21460: LD_INT 2
21462: ARRAY
21463: ST_TO_ADDR
// if h + 7 < height then
21464: LD_VAR 0 13
21468: PUSH
21469: LD_INT 7
21471: PLUS
21472: PUSH
21473: LD_VAR 0 15
21477: LESS
21478: IFFALSE 21507
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
21480: LD_ADDR_VAR 0 18
21484: PUSH
21485: LD_INT 7
21487: PUSH
21488: LD_INT 28
21490: PUSH
21491: LD_INT 45
21493: PUSH
21494: EMPTY
21495: LIST
21496: LIST
21497: LIST
21498: PUSH
21499: LD_VAR 0 12
21503: ARRAY
21504: ST_TO_ADDR
// break ;
21505: GO 21509
// end ; end ; end ;
21507: GO 21338
21509: POP
21510: POP
// end ; if not weapon then
21511: LD_VAR 0 18
21515: NOT
21516: IFFALSE 21576
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
21518: LD_ADDR_VAR 0 5
21522: PUSH
21523: LD_VAR 0 5
21527: PUSH
21528: LD_INT 11
21530: PUSH
21531: LD_INT 30
21533: PUSH
21534: LD_INT 49
21536: PUSH
21537: EMPTY
21538: LIST
21539: LIST
21540: LIST
21541: DIFF
21542: ST_TO_ADDR
// if not list then
21543: LD_VAR 0 5
21547: NOT
21548: IFFALSE 21552
// exit ;
21550: GO 21698
// weapon := list [ rand ( 1 , list ) ] ;
21552: LD_ADDR_VAR 0 18
21556: PUSH
21557: LD_VAR 0 5
21561: PUSH
21562: LD_INT 1
21564: PPUSH
21565: LD_VAR 0 5
21569: PPUSH
21570: CALL_OW 12
21574: ARRAY
21575: ST_TO_ADDR
// end ; if weapon then
21576: LD_VAR 0 18
21580: IFFALSE 21698
// begin tmp := CostOfWeapon ( weapon ) ;
21582: LD_ADDR_VAR 0 14
21586: PUSH
21587: LD_VAR 0 18
21591: PPUSH
21592: CALL_OW 451
21596: ST_TO_ADDR
// j := GetBase ( tower ) ;
21597: LD_ADDR_VAR 0 9
21601: PUSH
21602: LD_VAR 0 1
21606: PPUSH
21607: CALL_OW 274
21611: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
21612: LD_VAR 0 9
21616: PPUSH
21617: LD_INT 1
21619: PPUSH
21620: CALL_OW 275
21624: PUSH
21625: LD_VAR 0 14
21629: PUSH
21630: LD_INT 1
21632: ARRAY
21633: GREATEREQUAL
21634: IFFALSE 21660
21636: PUSH
21637: LD_VAR 0 9
21641: PPUSH
21642: LD_INT 2
21644: PPUSH
21645: CALL_OW 275
21649: PUSH
21650: LD_VAR 0 14
21654: PUSH
21655: LD_INT 2
21657: ARRAY
21658: GREATEREQUAL
21659: AND
21660: IFFALSE 21686
21662: PUSH
21663: LD_VAR 0 9
21667: PPUSH
21668: LD_INT 3
21670: PPUSH
21671: CALL_OW 275
21675: PUSH
21676: LD_VAR 0 14
21680: PUSH
21681: LD_INT 3
21683: ARRAY
21684: GREATEREQUAL
21685: AND
21686: IFFALSE 21698
// result := weapon ;
21688: LD_ADDR_VAR 0 3
21692: PUSH
21693: LD_VAR 0 18
21697: ST_TO_ADDR
// end ; end ;
21698: LD_VAR 0 3
21702: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
21703: LD_INT 0
21705: PPUSH
21706: PPUSH
// result := true ;
21707: LD_ADDR_VAR 0 3
21711: PUSH
21712: LD_INT 1
21714: ST_TO_ADDR
// if array1 = array2 then
21715: LD_VAR 0 1
21719: PUSH
21720: LD_VAR 0 2
21724: EQUAL
21725: IFFALSE 21785
// begin for i = 1 to array1 do
21727: LD_ADDR_VAR 0 4
21731: PUSH
21732: DOUBLE
21733: LD_INT 1
21735: DEC
21736: ST_TO_ADDR
21737: LD_VAR 0 1
21741: PUSH
21742: FOR_TO
21743: IFFALSE 21781
// if array1 [ i ] <> array2 [ i ] then
21745: LD_VAR 0 1
21749: PUSH
21750: LD_VAR 0 4
21754: ARRAY
21755: PUSH
21756: LD_VAR 0 2
21760: PUSH
21761: LD_VAR 0 4
21765: ARRAY
21766: NONEQUAL
21767: IFFALSE 21779
// begin result := false ;
21769: LD_ADDR_VAR 0 3
21773: PUSH
21774: LD_INT 0
21776: ST_TO_ADDR
// break ;
21777: GO 21781
// end ;
21779: GO 21742
21781: POP
21782: POP
// end else
21783: GO 21793
// result := false ;
21785: LD_ADDR_VAR 0 3
21789: PUSH
21790: LD_INT 0
21792: ST_TO_ADDR
// end ;
21793: LD_VAR 0 3
21797: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
21798: LD_INT 0
21800: PPUSH
21801: PPUSH
// if not array1 or not array2 then
21802: LD_VAR 0 1
21806: NOT
21807: IFTRUE 21816
21809: PUSH
21810: LD_VAR 0 2
21814: NOT
21815: OR
21816: IFFALSE 21820
// exit ;
21818: GO 21884
// result := true ;
21820: LD_ADDR_VAR 0 3
21824: PUSH
21825: LD_INT 1
21827: ST_TO_ADDR
// for i = 1 to array1 do
21828: LD_ADDR_VAR 0 4
21832: PUSH
21833: DOUBLE
21834: LD_INT 1
21836: DEC
21837: ST_TO_ADDR
21838: LD_VAR 0 1
21842: PUSH
21843: FOR_TO
21844: IFFALSE 21882
// if array1 [ i ] <> array2 [ i ] then
21846: LD_VAR 0 1
21850: PUSH
21851: LD_VAR 0 4
21855: ARRAY
21856: PUSH
21857: LD_VAR 0 2
21861: PUSH
21862: LD_VAR 0 4
21866: ARRAY
21867: NONEQUAL
21868: IFFALSE 21880
// begin result := false ;
21870: LD_ADDR_VAR 0 3
21874: PUSH
21875: LD_INT 0
21877: ST_TO_ADDR
// break ;
21878: GO 21882
// end ;
21880: GO 21843
21882: POP
21883: POP
// end ;
21884: LD_VAR 0 3
21888: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
21889: LD_INT 0
21891: PPUSH
21892: PPUSH
21893: PPUSH
// pom := GetBase ( fac ) ;
21894: LD_ADDR_VAR 0 5
21898: PUSH
21899: LD_VAR 0 1
21903: PPUSH
21904: CALL_OW 274
21908: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
21909: LD_ADDR_VAR 0 4
21913: PUSH
21914: LD_VAR 0 2
21918: PUSH
21919: LD_INT 1
21921: ARRAY
21922: PPUSH
21923: LD_VAR 0 2
21927: PUSH
21928: LD_INT 2
21930: ARRAY
21931: PPUSH
21932: LD_VAR 0 2
21936: PUSH
21937: LD_INT 3
21939: ARRAY
21940: PPUSH
21941: LD_VAR 0 2
21945: PUSH
21946: LD_INT 4
21948: ARRAY
21949: PPUSH
21950: CALL_OW 449
21954: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
21955: LD_ADDR_VAR 0 3
21959: PUSH
21960: LD_VAR 0 5
21964: PPUSH
21965: LD_INT 1
21967: PPUSH
21968: CALL_OW 275
21972: PUSH
21973: LD_VAR 0 4
21977: PUSH
21978: LD_INT 1
21980: ARRAY
21981: GREATEREQUAL
21982: IFFALSE 22008
21984: PUSH
21985: LD_VAR 0 5
21989: PPUSH
21990: LD_INT 2
21992: PPUSH
21993: CALL_OW 275
21997: PUSH
21998: LD_VAR 0 4
22002: PUSH
22003: LD_INT 2
22005: ARRAY
22006: GREATEREQUAL
22007: AND
22008: IFFALSE 22034
22010: PUSH
22011: LD_VAR 0 5
22015: PPUSH
22016: LD_INT 3
22018: PPUSH
22019: CALL_OW 275
22023: PUSH
22024: LD_VAR 0 4
22028: PUSH
22029: LD_INT 3
22031: ARRAY
22032: GREATEREQUAL
22033: AND
22034: ST_TO_ADDR
// end ;
22035: LD_VAR 0 3
22039: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
22040: LD_INT 0
22042: PPUSH
22043: PPUSH
22044: PPUSH
22045: PPUSH
// pom := GetBase ( building ) ;
22046: LD_ADDR_VAR 0 3
22050: PUSH
22051: LD_VAR 0 1
22055: PPUSH
22056: CALL_OW 274
22060: ST_TO_ADDR
// if not pom then
22061: LD_VAR 0 3
22065: NOT
22066: IFFALSE 22070
// exit ;
22068: GO 22244
// btype := GetBType ( building ) ;
22070: LD_ADDR_VAR 0 5
22074: PUSH
22075: LD_VAR 0 1
22079: PPUSH
22080: CALL_OW 266
22084: ST_TO_ADDR
// if btype = b_armoury then
22085: LD_VAR 0 5
22089: PUSH
22090: LD_INT 4
22092: EQUAL
22093: IFFALSE 22103
// btype := b_barracks ;
22095: LD_ADDR_VAR 0 5
22099: PUSH
22100: LD_INT 5
22102: ST_TO_ADDR
// if btype = b_depot then
22103: LD_VAR 0 5
22107: PUSH
22108: LD_INT 0
22110: EQUAL
22111: IFFALSE 22121
// btype := b_warehouse ;
22113: LD_ADDR_VAR 0 5
22117: PUSH
22118: LD_INT 1
22120: ST_TO_ADDR
// if btype = b_workshop then
22121: LD_VAR 0 5
22125: PUSH
22126: LD_INT 2
22128: EQUAL
22129: IFFALSE 22139
// btype := b_factory ;
22131: LD_ADDR_VAR 0 5
22135: PUSH
22136: LD_INT 3
22138: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
22139: LD_ADDR_VAR 0 4
22143: PUSH
22144: LD_VAR 0 5
22148: PPUSH
22149: LD_VAR 0 1
22153: PPUSH
22154: CALL_OW 248
22158: PPUSH
22159: CALL_OW 450
22163: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
22164: LD_ADDR_VAR 0 2
22168: PUSH
22169: LD_VAR 0 3
22173: PPUSH
22174: LD_INT 1
22176: PPUSH
22177: CALL_OW 275
22181: PUSH
22182: LD_VAR 0 4
22186: PUSH
22187: LD_INT 1
22189: ARRAY
22190: GREATEREQUAL
22191: IFFALSE 22217
22193: PUSH
22194: LD_VAR 0 3
22198: PPUSH
22199: LD_INT 2
22201: PPUSH
22202: CALL_OW 275
22206: PUSH
22207: LD_VAR 0 4
22211: PUSH
22212: LD_INT 2
22214: ARRAY
22215: GREATEREQUAL
22216: AND
22217: IFFALSE 22243
22219: PUSH
22220: LD_VAR 0 3
22224: PPUSH
22225: LD_INT 3
22227: PPUSH
22228: CALL_OW 275
22232: PUSH
22233: LD_VAR 0 4
22237: PUSH
22238: LD_INT 3
22240: ARRAY
22241: GREATEREQUAL
22242: AND
22243: ST_TO_ADDR
// end ;
22244: LD_VAR 0 2
22248: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
22249: LD_INT 0
22251: PPUSH
22252: PPUSH
22253: PPUSH
// pom := GetBase ( building ) ;
22254: LD_ADDR_VAR 0 4
22258: PUSH
22259: LD_VAR 0 1
22263: PPUSH
22264: CALL_OW 274
22268: ST_TO_ADDR
// if not pom then
22269: LD_VAR 0 4
22273: NOT
22274: IFFALSE 22278
// exit ;
22276: GO 22383
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
22278: LD_ADDR_VAR 0 5
22282: PUSH
22283: LD_VAR 0 2
22287: PPUSH
22288: LD_VAR 0 1
22292: PPUSH
22293: CALL_OW 248
22297: PPUSH
22298: CALL_OW 450
22302: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
22303: LD_ADDR_VAR 0 3
22307: PUSH
22308: LD_VAR 0 4
22312: PPUSH
22313: LD_INT 1
22315: PPUSH
22316: CALL_OW 275
22320: PUSH
22321: LD_VAR 0 5
22325: PUSH
22326: LD_INT 1
22328: ARRAY
22329: GREATEREQUAL
22330: IFFALSE 22356
22332: PUSH
22333: LD_VAR 0 4
22337: PPUSH
22338: LD_INT 2
22340: PPUSH
22341: CALL_OW 275
22345: PUSH
22346: LD_VAR 0 5
22350: PUSH
22351: LD_INT 2
22353: ARRAY
22354: GREATEREQUAL
22355: AND
22356: IFFALSE 22382
22358: PUSH
22359: LD_VAR 0 4
22363: PPUSH
22364: LD_INT 3
22366: PPUSH
22367: CALL_OW 275
22371: PUSH
22372: LD_VAR 0 5
22376: PUSH
22377: LD_INT 3
22379: ARRAY
22380: GREATEREQUAL
22381: AND
22382: ST_TO_ADDR
// end ;
22383: LD_VAR 0 3
22387: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
22388: LD_INT 0
22390: PPUSH
22391: PPUSH
22392: PPUSH
22393: PPUSH
22394: PPUSH
22395: PPUSH
22396: PPUSH
22397: PPUSH
22398: PPUSH
22399: PPUSH
22400: PPUSH
// result := false ;
22401: LD_ADDR_VAR 0 8
22405: PUSH
22406: LD_INT 0
22408: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
22409: LD_VAR 0 5
22413: NOT
22414: IFTRUE 22423
22416: PUSH
22417: LD_VAR 0 1
22421: NOT
22422: OR
22423: IFTRUE 22432
22425: PUSH
22426: LD_VAR 0 2
22430: NOT
22431: OR
22432: IFTRUE 22441
22434: PUSH
22435: LD_VAR 0 3
22439: NOT
22440: OR
22441: IFFALSE 22445
// exit ;
22443: GO 23271
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
22445: LD_ADDR_VAR 0 14
22449: PUSH
22450: LD_VAR 0 1
22454: PPUSH
22455: LD_VAR 0 2
22459: PPUSH
22460: LD_VAR 0 3
22464: PPUSH
22465: LD_VAR 0 4
22469: PPUSH
22470: LD_VAR 0 5
22474: PUSH
22475: LD_INT 1
22477: ARRAY
22478: PPUSH
22479: CALL_OW 248
22483: PPUSH
22484: LD_INT 0
22486: PPUSH
22487: CALL 24552 0 6
22491: ST_TO_ADDR
// if not hexes then
22492: LD_VAR 0 14
22496: NOT
22497: IFFALSE 22501
// exit ;
22499: GO 23271
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
22501: LD_ADDR_VAR 0 17
22505: PUSH
22506: LD_VAR 0 5
22510: PPUSH
22511: LD_INT 22
22513: PUSH
22514: LD_VAR 0 13
22518: PPUSH
22519: CALL_OW 255
22523: PUSH
22524: EMPTY
22525: LIST
22526: LIST
22527: PUSH
22528: LD_INT 2
22530: PUSH
22531: LD_INT 30
22533: PUSH
22534: LD_INT 0
22536: PUSH
22537: EMPTY
22538: LIST
22539: LIST
22540: PUSH
22541: LD_INT 30
22543: PUSH
22544: LD_INT 1
22546: PUSH
22547: EMPTY
22548: LIST
22549: LIST
22550: PUSH
22551: EMPTY
22552: LIST
22553: LIST
22554: LIST
22555: PUSH
22556: EMPTY
22557: LIST
22558: LIST
22559: PPUSH
22560: CALL_OW 72
22564: ST_TO_ADDR
// for i = 1 to hexes do
22565: LD_ADDR_VAR 0 9
22569: PUSH
22570: DOUBLE
22571: LD_INT 1
22573: DEC
22574: ST_TO_ADDR
22575: LD_VAR 0 14
22579: PUSH
22580: FOR_TO
22581: IFFALSE 23269
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
22583: LD_ADDR_VAR 0 13
22587: PUSH
22588: LD_VAR 0 14
22592: PUSH
22593: LD_VAR 0 9
22597: ARRAY
22598: PUSH
22599: LD_INT 1
22601: ARRAY
22602: PPUSH
22603: LD_VAR 0 14
22607: PUSH
22608: LD_VAR 0 9
22612: ARRAY
22613: PUSH
22614: LD_INT 2
22616: ARRAY
22617: PPUSH
22618: CALL_OW 428
22622: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
22623: LD_VAR 0 14
22627: PUSH
22628: LD_VAR 0 9
22632: ARRAY
22633: PUSH
22634: LD_INT 1
22636: ARRAY
22637: PPUSH
22638: LD_VAR 0 14
22642: PUSH
22643: LD_VAR 0 9
22647: ARRAY
22648: PUSH
22649: LD_INT 2
22651: ARRAY
22652: PPUSH
22653: CALL_OW 351
22657: IFTRUE 22696
22659: PUSH
22660: LD_VAR 0 14
22664: PUSH
22665: LD_VAR 0 9
22669: ARRAY
22670: PUSH
22671: LD_INT 1
22673: ARRAY
22674: PPUSH
22675: LD_VAR 0 14
22679: PUSH
22680: LD_VAR 0 9
22684: ARRAY
22685: PUSH
22686: LD_INT 2
22688: ARRAY
22689: PPUSH
22690: CALL_OW 488
22694: NOT
22695: OR
22696: IFTRUE 22713
22698: PUSH
22699: LD_VAR 0 13
22703: PPUSH
22704: CALL_OW 247
22708: PUSH
22709: LD_INT 3
22711: EQUAL
22712: OR
22713: IFFALSE 22719
// exit ;
22715: POP
22716: POP
22717: GO 23271
// if not tmp then
22719: LD_VAR 0 13
22723: NOT
22724: IFFALSE 22728
// continue ;
22726: GO 22580
// result := true ;
22728: LD_ADDR_VAR 0 8
22732: PUSH
22733: LD_INT 1
22735: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
22736: LD_VAR 0 6
22740: IFFALSE 22757
22742: PUSH
22743: LD_VAR 0 13
22747: PPUSH
22748: CALL_OW 247
22752: PUSH
22753: LD_INT 2
22755: EQUAL
22756: AND
22757: IFFALSE 22774
22759: PUSH
22760: LD_VAR 0 13
22764: PPUSH
22765: CALL_OW 263
22769: PUSH
22770: LD_INT 1
22772: EQUAL
22773: AND
22774: IFFALSE 22938
// begin if IsDrivenBy ( tmp ) then
22776: LD_VAR 0 13
22780: PPUSH
22781: CALL_OW 311
22785: IFFALSE 22789
// continue ;
22787: GO 22580
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
22789: LD_VAR 0 6
22793: PPUSH
22794: LD_INT 3
22796: PUSH
22797: LD_INT 60
22799: PUSH
22800: EMPTY
22801: LIST
22802: PUSH
22803: EMPTY
22804: LIST
22805: LIST
22806: PUSH
22807: LD_INT 3
22809: PUSH
22810: LD_INT 55
22812: PUSH
22813: EMPTY
22814: LIST
22815: PUSH
22816: EMPTY
22817: LIST
22818: LIST
22819: PUSH
22820: EMPTY
22821: LIST
22822: LIST
22823: PPUSH
22824: CALL_OW 72
22828: IFFALSE 22936
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
22830: LD_ADDR_VAR 0 18
22834: PUSH
22835: LD_VAR 0 6
22839: PPUSH
22840: LD_INT 3
22842: PUSH
22843: LD_INT 60
22845: PUSH
22846: EMPTY
22847: LIST
22848: PUSH
22849: EMPTY
22850: LIST
22851: LIST
22852: PUSH
22853: LD_INT 3
22855: PUSH
22856: LD_INT 55
22858: PUSH
22859: EMPTY
22860: LIST
22861: PUSH
22862: EMPTY
22863: LIST
22864: LIST
22865: PUSH
22866: EMPTY
22867: LIST
22868: LIST
22869: PPUSH
22870: CALL_OW 72
22874: PUSH
22875: LD_INT 1
22877: ARRAY
22878: ST_TO_ADDR
// if IsInUnit ( driver ) then
22879: LD_VAR 0 18
22883: PPUSH
22884: CALL_OW 310
22888: IFFALSE 22899
// ComExit ( driver ) ;
22890: LD_VAR 0 18
22894: PPUSH
22895: CALL 48542 0 1
// AddComEnterUnit ( driver , tmp ) ;
22899: LD_VAR 0 18
22903: PPUSH
22904: LD_VAR 0 13
22908: PPUSH
22909: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
22913: LD_VAR 0 18
22917: PPUSH
22918: LD_VAR 0 7
22922: PPUSH
22923: CALL_OW 173
// AddComExitVehicle ( driver ) ;
22927: LD_VAR 0 18
22931: PPUSH
22932: CALL_OW 181
// end ; continue ;
22936: GO 22580
// end ; if not cleaners or not tmp in cleaners then
22938: LD_VAR 0 6
22942: NOT
22943: IFTRUE 22958
22945: PUSH
22946: LD_VAR 0 13
22950: PUSH
22951: LD_VAR 0 6
22955: IN
22956: NOT
22957: OR
22958: IFFALSE 23267
// begin if dep then
22960: LD_VAR 0 17
22964: IFFALSE 23100
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
22966: LD_ADDR_VAR 0 16
22970: PUSH
22971: LD_VAR 0 17
22975: PUSH
22976: LD_INT 1
22978: ARRAY
22979: PPUSH
22980: CALL_OW 250
22984: PPUSH
22985: LD_VAR 0 17
22989: PUSH
22990: LD_INT 1
22992: ARRAY
22993: PPUSH
22994: CALL_OW 254
22998: PPUSH
22999: LD_INT 5
23001: PPUSH
23002: CALL_OW 272
23006: PUSH
23007: LD_VAR 0 17
23011: PUSH
23012: LD_INT 1
23014: ARRAY
23015: PPUSH
23016: CALL_OW 251
23020: PPUSH
23021: LD_VAR 0 17
23025: PUSH
23026: LD_INT 1
23028: ARRAY
23029: PPUSH
23030: CALL_OW 254
23034: PPUSH
23035: LD_INT 5
23037: PPUSH
23038: CALL_OW 273
23042: PUSH
23043: EMPTY
23044: LIST
23045: LIST
23046: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
23047: LD_VAR 0 16
23051: PUSH
23052: LD_INT 1
23054: ARRAY
23055: PPUSH
23056: LD_VAR 0 16
23060: PUSH
23061: LD_INT 2
23063: ARRAY
23064: PPUSH
23065: CALL_OW 488
23069: IFFALSE 23100
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
23071: LD_VAR 0 13
23075: PPUSH
23076: LD_VAR 0 16
23080: PUSH
23081: LD_INT 1
23083: ARRAY
23084: PPUSH
23085: LD_VAR 0 16
23089: PUSH
23090: LD_INT 2
23092: ARRAY
23093: PPUSH
23094: CALL_OW 111
// continue ;
23098: GO 22580
// end ; end ; r := GetDir ( tmp ) ;
23100: LD_ADDR_VAR 0 15
23104: PUSH
23105: LD_VAR 0 13
23109: PPUSH
23110: CALL_OW 254
23114: ST_TO_ADDR
// if r = 5 then
23115: LD_VAR 0 15
23119: PUSH
23120: LD_INT 5
23122: EQUAL
23123: IFFALSE 23133
// r := 0 ;
23125: LD_ADDR_VAR 0 15
23129: PUSH
23130: LD_INT 0
23132: ST_TO_ADDR
// for j = r to 5 do
23133: LD_ADDR_VAR 0 10
23137: PUSH
23138: DOUBLE
23139: LD_VAR 0 15
23143: DEC
23144: ST_TO_ADDR
23145: LD_INT 5
23147: PUSH
23148: FOR_TO
23149: IFFALSE 23265
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
23151: LD_ADDR_VAR 0 11
23155: PUSH
23156: LD_VAR 0 13
23160: PPUSH
23161: CALL_OW 250
23165: PPUSH
23166: LD_VAR 0 10
23170: PPUSH
23171: LD_INT 2
23173: PPUSH
23174: CALL_OW 272
23178: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
23179: LD_ADDR_VAR 0 12
23183: PUSH
23184: LD_VAR 0 13
23188: PPUSH
23189: CALL_OW 251
23193: PPUSH
23194: LD_VAR 0 10
23198: PPUSH
23199: LD_INT 2
23201: PPUSH
23202: CALL_OW 273
23206: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
23207: LD_VAR 0 11
23211: PPUSH
23212: LD_VAR 0 12
23216: PPUSH
23217: CALL_OW 488
23221: IFFALSE 23240
23223: PUSH
23224: LD_VAR 0 11
23228: PPUSH
23229: LD_VAR 0 12
23233: PPUSH
23234: CALL_OW 428
23238: NOT
23239: AND
23240: IFFALSE 23263
// begin ComMoveXY ( tmp , _x , _y ) ;
23242: LD_VAR 0 13
23246: PPUSH
23247: LD_VAR 0 11
23251: PPUSH
23252: LD_VAR 0 12
23256: PPUSH
23257: CALL_OW 111
// break ;
23261: GO 23265
// end ; end ;
23263: GO 23148
23265: POP
23266: POP
// end ; end ;
23267: GO 22580
23269: POP
23270: POP
// end ;
23271: LD_VAR 0 8
23275: RET
// export function BuildingTechInvented ( side , btype ) ; begin
23276: LD_INT 0
23278: PPUSH
// result := true ;
23279: LD_ADDR_VAR 0 3
23283: PUSH
23284: LD_INT 1
23286: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
23287: LD_VAR 0 2
23291: PUSH
23292: LD_INT 24
23294: DOUBLE
23295: EQUAL
23296: IFTRUE 23306
23298: LD_INT 33
23300: DOUBLE
23301: EQUAL
23302: IFTRUE 23306
23304: GO 23331
23306: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
23307: LD_ADDR_VAR 0 3
23311: PUSH
23312: LD_INT 32
23314: PPUSH
23315: LD_VAR 0 1
23319: PPUSH
23320: CALL_OW 321
23324: PUSH
23325: LD_INT 2
23327: EQUAL
23328: ST_TO_ADDR
23329: GO 23647
23331: LD_INT 20
23333: DOUBLE
23334: EQUAL
23335: IFTRUE 23339
23337: GO 23364
23339: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
23340: LD_ADDR_VAR 0 3
23344: PUSH
23345: LD_INT 6
23347: PPUSH
23348: LD_VAR 0 1
23352: PPUSH
23353: CALL_OW 321
23357: PUSH
23358: LD_INT 2
23360: EQUAL
23361: ST_TO_ADDR
23362: GO 23647
23364: LD_INT 22
23366: DOUBLE
23367: EQUAL
23368: IFTRUE 23378
23370: LD_INT 36
23372: DOUBLE
23373: EQUAL
23374: IFTRUE 23378
23376: GO 23403
23378: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
23379: LD_ADDR_VAR 0 3
23383: PUSH
23384: LD_INT 15
23386: PPUSH
23387: LD_VAR 0 1
23391: PPUSH
23392: CALL_OW 321
23396: PUSH
23397: LD_INT 2
23399: EQUAL
23400: ST_TO_ADDR
23401: GO 23647
23403: LD_INT 30
23405: DOUBLE
23406: EQUAL
23407: IFTRUE 23411
23409: GO 23436
23411: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
23412: LD_ADDR_VAR 0 3
23416: PUSH
23417: LD_INT 20
23419: PPUSH
23420: LD_VAR 0 1
23424: PPUSH
23425: CALL_OW 321
23429: PUSH
23430: LD_INT 2
23432: EQUAL
23433: ST_TO_ADDR
23434: GO 23647
23436: LD_INT 28
23438: DOUBLE
23439: EQUAL
23440: IFTRUE 23450
23442: LD_INT 21
23444: DOUBLE
23445: EQUAL
23446: IFTRUE 23450
23448: GO 23475
23450: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
23451: LD_ADDR_VAR 0 3
23455: PUSH
23456: LD_INT 21
23458: PPUSH
23459: LD_VAR 0 1
23463: PPUSH
23464: CALL_OW 321
23468: PUSH
23469: LD_INT 2
23471: EQUAL
23472: ST_TO_ADDR
23473: GO 23647
23475: LD_INT 16
23477: DOUBLE
23478: EQUAL
23479: IFTRUE 23483
23481: GO 23508
23483: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
23484: LD_ADDR_VAR 0 3
23488: PUSH
23489: LD_INT 84
23491: PPUSH
23492: LD_VAR 0 1
23496: PPUSH
23497: CALL_OW 321
23501: PUSH
23502: LD_INT 2
23504: EQUAL
23505: ST_TO_ADDR
23506: GO 23647
23508: LD_INT 19
23510: DOUBLE
23511: EQUAL
23512: IFTRUE 23522
23514: LD_INT 23
23516: DOUBLE
23517: EQUAL
23518: IFTRUE 23522
23520: GO 23547
23522: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
23523: LD_ADDR_VAR 0 3
23527: PUSH
23528: LD_INT 83
23530: PPUSH
23531: LD_VAR 0 1
23535: PPUSH
23536: CALL_OW 321
23540: PUSH
23541: LD_INT 2
23543: EQUAL
23544: ST_TO_ADDR
23545: GO 23647
23547: LD_INT 17
23549: DOUBLE
23550: EQUAL
23551: IFTRUE 23555
23553: GO 23580
23555: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
23556: LD_ADDR_VAR 0 3
23560: PUSH
23561: LD_INT 39
23563: PPUSH
23564: LD_VAR 0 1
23568: PPUSH
23569: CALL_OW 321
23573: PUSH
23574: LD_INT 2
23576: EQUAL
23577: ST_TO_ADDR
23578: GO 23647
23580: LD_INT 18
23582: DOUBLE
23583: EQUAL
23584: IFTRUE 23588
23586: GO 23613
23588: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
23589: LD_ADDR_VAR 0 3
23593: PUSH
23594: LD_INT 40
23596: PPUSH
23597: LD_VAR 0 1
23601: PPUSH
23602: CALL_OW 321
23606: PUSH
23607: LD_INT 2
23609: EQUAL
23610: ST_TO_ADDR
23611: GO 23647
23613: LD_INT 27
23615: DOUBLE
23616: EQUAL
23617: IFTRUE 23621
23619: GO 23646
23621: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
23622: LD_ADDR_VAR 0 3
23626: PUSH
23627: LD_INT 35
23629: PPUSH
23630: LD_VAR 0 1
23634: PPUSH
23635: CALL_OW 321
23639: PUSH
23640: LD_INT 2
23642: EQUAL
23643: ST_TO_ADDR
23644: GO 23647
23646: POP
// end ;
23647: LD_VAR 0 3
23651: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
23652: LD_INT 0
23654: PPUSH
23655: PPUSH
23656: PPUSH
23657: PPUSH
23658: PPUSH
23659: PPUSH
23660: PPUSH
23661: PPUSH
23662: PPUSH
23663: PPUSH
23664: PPUSH
// result := false ;
23665: LD_ADDR_VAR 0 6
23669: PUSH
23670: LD_INT 0
23672: ST_TO_ADDR
// if btype = b_depot then
23673: LD_VAR 0 2
23677: PUSH
23678: LD_INT 0
23680: EQUAL
23681: IFFALSE 23693
// begin result := true ;
23683: LD_ADDR_VAR 0 6
23687: PUSH
23688: LD_INT 1
23690: ST_TO_ADDR
// exit ;
23691: GO 24547
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
23693: LD_VAR 0 1
23697: NOT
23698: IFTRUE 23723
23700: PUSH
23701: LD_VAR 0 1
23705: PPUSH
23706: CALL_OW 266
23710: PUSH
23711: LD_INT 0
23713: PUSH
23714: LD_INT 1
23716: PUSH
23717: EMPTY
23718: LIST
23719: LIST
23720: IN
23721: NOT
23722: OR
23723: IFTRUE 23732
23725: PUSH
23726: LD_VAR 0 2
23730: NOT
23731: OR
23732: IFTRUE 23768
23734: PUSH
23735: LD_VAR 0 5
23739: PUSH
23740: LD_INT 0
23742: PUSH
23743: LD_INT 1
23745: PUSH
23746: LD_INT 2
23748: PUSH
23749: LD_INT 3
23751: PUSH
23752: LD_INT 4
23754: PUSH
23755: LD_INT 5
23757: PUSH
23758: EMPTY
23759: LIST
23760: LIST
23761: LIST
23762: LIST
23763: LIST
23764: LIST
23765: IN
23766: NOT
23767: OR
23768: IFTRUE 23787
23770: PUSH
23771: LD_VAR 0 3
23775: PPUSH
23776: LD_VAR 0 4
23780: PPUSH
23781: CALL_OW 488
23785: NOT
23786: OR
23787: IFFALSE 23791
// exit ;
23789: GO 24547
// side := GetSide ( depot ) ;
23791: LD_ADDR_VAR 0 9
23795: PUSH
23796: LD_VAR 0 1
23800: PPUSH
23801: CALL_OW 255
23805: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
23806: LD_VAR 0 9
23810: PPUSH
23811: LD_VAR 0 2
23815: PPUSH
23816: CALL 23276 0 2
23820: NOT
23821: IFFALSE 23825
// exit ;
23823: GO 24547
// pom := GetBase ( depot ) ;
23825: LD_ADDR_VAR 0 10
23829: PUSH
23830: LD_VAR 0 1
23834: PPUSH
23835: CALL_OW 274
23839: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
23840: LD_ADDR_VAR 0 11
23844: PUSH
23845: LD_VAR 0 2
23849: PPUSH
23850: LD_VAR 0 1
23854: PPUSH
23855: CALL_OW 248
23859: PPUSH
23860: CALL_OW 450
23864: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
23865: LD_VAR 0 10
23869: PPUSH
23870: LD_INT 1
23872: PPUSH
23873: CALL_OW 275
23877: PUSH
23878: LD_VAR 0 11
23882: PUSH
23883: LD_INT 1
23885: ARRAY
23886: GREATEREQUAL
23887: IFFALSE 23913
23889: PUSH
23890: LD_VAR 0 10
23894: PPUSH
23895: LD_INT 2
23897: PPUSH
23898: CALL_OW 275
23902: PUSH
23903: LD_VAR 0 11
23907: PUSH
23908: LD_INT 2
23910: ARRAY
23911: GREATEREQUAL
23912: AND
23913: IFFALSE 23939
23915: PUSH
23916: LD_VAR 0 10
23920: PPUSH
23921: LD_INT 3
23923: PPUSH
23924: CALL_OW 275
23928: PUSH
23929: LD_VAR 0 11
23933: PUSH
23934: LD_INT 3
23936: ARRAY
23937: GREATEREQUAL
23938: AND
23939: NOT
23940: IFFALSE 23944
// exit ;
23942: GO 24547
// if GetBType ( depot ) = b_depot then
23944: LD_VAR 0 1
23948: PPUSH
23949: CALL_OW 266
23953: PUSH
23954: LD_INT 0
23956: EQUAL
23957: IFFALSE 23969
// dist := 28 else
23959: LD_ADDR_VAR 0 14
23963: PUSH
23964: LD_INT 28
23966: ST_TO_ADDR
23967: GO 23977
// dist := 36 ;
23969: LD_ADDR_VAR 0 14
23973: PUSH
23974: LD_INT 36
23976: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
23977: LD_VAR 0 1
23981: PPUSH
23982: LD_VAR 0 3
23986: PPUSH
23987: LD_VAR 0 4
23991: PPUSH
23992: CALL_OW 297
23996: PUSH
23997: LD_VAR 0 14
24001: GREATER
24002: IFFALSE 24006
// exit ;
24004: GO 24547
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
24006: LD_ADDR_VAR 0 12
24010: PUSH
24011: LD_VAR 0 2
24015: PPUSH
24016: LD_VAR 0 3
24020: PPUSH
24021: LD_VAR 0 4
24025: PPUSH
24026: LD_VAR 0 5
24030: PPUSH
24031: LD_VAR 0 1
24035: PPUSH
24036: CALL_OW 248
24040: PPUSH
24041: LD_INT 0
24043: PPUSH
24044: CALL 24552 0 6
24048: ST_TO_ADDR
// if not hexes then
24049: LD_VAR 0 12
24053: NOT
24054: IFFALSE 24058
// exit ;
24056: GO 24547
// hex := GetHexInfo ( x , y ) ;
24058: LD_ADDR_VAR 0 15
24062: PUSH
24063: LD_VAR 0 3
24067: PPUSH
24068: LD_VAR 0 4
24072: PPUSH
24073: CALL_OW 546
24077: ST_TO_ADDR
// if hex [ 1 ] then
24078: LD_VAR 0 15
24082: PUSH
24083: LD_INT 1
24085: ARRAY
24086: IFFALSE 24090
// exit ;
24088: GO 24547
// height := hex [ 2 ] ;
24090: LD_ADDR_VAR 0 13
24094: PUSH
24095: LD_VAR 0 15
24099: PUSH
24100: LD_INT 2
24102: ARRAY
24103: ST_TO_ADDR
// for i = 1 to hexes do
24104: LD_ADDR_VAR 0 7
24108: PUSH
24109: DOUBLE
24110: LD_INT 1
24112: DEC
24113: ST_TO_ADDR
24114: LD_VAR 0 12
24118: PUSH
24119: FOR_TO
24120: IFFALSE 24464
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
24122: LD_VAR 0 12
24126: PUSH
24127: LD_VAR 0 7
24131: ARRAY
24132: PUSH
24133: LD_INT 1
24135: ARRAY
24136: PPUSH
24137: LD_VAR 0 12
24141: PUSH
24142: LD_VAR 0 7
24146: ARRAY
24147: PUSH
24148: LD_INT 2
24150: ARRAY
24151: PPUSH
24152: CALL_OW 488
24156: NOT
24157: IFTRUE 24199
24159: PUSH
24160: LD_VAR 0 12
24164: PUSH
24165: LD_VAR 0 7
24169: ARRAY
24170: PUSH
24171: LD_INT 1
24173: ARRAY
24174: PPUSH
24175: LD_VAR 0 12
24179: PUSH
24180: LD_VAR 0 7
24184: ARRAY
24185: PUSH
24186: LD_INT 2
24188: ARRAY
24189: PPUSH
24190: CALL_OW 428
24194: PUSH
24195: LD_INT 0
24197: GREATER
24198: OR
24199: IFTRUE 24237
24201: PUSH
24202: LD_VAR 0 12
24206: PUSH
24207: LD_VAR 0 7
24211: ARRAY
24212: PUSH
24213: LD_INT 1
24215: ARRAY
24216: PPUSH
24217: LD_VAR 0 12
24221: PUSH
24222: LD_VAR 0 7
24226: ARRAY
24227: PUSH
24228: LD_INT 2
24230: ARRAY
24231: PPUSH
24232: CALL_OW 351
24236: OR
24237: IFFALSE 24243
// exit ;
24239: POP
24240: POP
24241: GO 24547
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
24243: LD_ADDR_VAR 0 8
24247: PUSH
24248: LD_VAR 0 12
24252: PUSH
24253: LD_VAR 0 7
24257: ARRAY
24258: PUSH
24259: LD_INT 1
24261: ARRAY
24262: PPUSH
24263: LD_VAR 0 12
24267: PUSH
24268: LD_VAR 0 7
24272: ARRAY
24273: PUSH
24274: LD_INT 2
24276: ARRAY
24277: PPUSH
24278: CALL_OW 546
24282: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
24283: LD_VAR 0 8
24287: PUSH
24288: LD_INT 1
24290: ARRAY
24291: IFTRUE 24313
24293: PUSH
24294: LD_VAR 0 8
24298: PUSH
24299: LD_INT 2
24301: ARRAY
24302: PUSH
24303: LD_VAR 0 13
24307: PUSH
24308: LD_INT 2
24310: PLUS
24311: GREATER
24312: OR
24313: IFTRUE 24335
24315: PUSH
24316: LD_VAR 0 8
24320: PUSH
24321: LD_INT 2
24323: ARRAY
24324: PUSH
24325: LD_VAR 0 13
24329: PUSH
24330: LD_INT 2
24332: MINUS
24333: LESS
24334: OR
24335: IFTRUE 24403
24337: PUSH
24338: LD_VAR 0 8
24342: PUSH
24343: LD_INT 3
24345: ARRAY
24346: PUSH
24347: LD_INT 0
24349: PUSH
24350: LD_INT 8
24352: PUSH
24353: LD_INT 9
24355: PUSH
24356: LD_INT 10
24358: PUSH
24359: LD_INT 11
24361: PUSH
24362: LD_INT 12
24364: PUSH
24365: LD_INT 13
24367: PUSH
24368: LD_INT 16
24370: PUSH
24371: LD_INT 17
24373: PUSH
24374: LD_INT 18
24376: PUSH
24377: LD_INT 19
24379: PUSH
24380: LD_INT 20
24382: PUSH
24383: LD_INT 21
24385: PUSH
24386: EMPTY
24387: LIST
24388: LIST
24389: LIST
24390: LIST
24391: LIST
24392: LIST
24393: LIST
24394: LIST
24395: LIST
24396: LIST
24397: LIST
24398: LIST
24399: LIST
24400: IN
24401: NOT
24402: OR
24403: IFTRUE 24416
24405: PUSH
24406: LD_VAR 0 8
24410: PUSH
24411: LD_INT 5
24413: ARRAY
24414: NOT
24415: OR
24416: IFTRUE 24456
24418: PUSH
24419: LD_VAR 0 8
24423: PUSH
24424: LD_INT 6
24426: ARRAY
24427: PUSH
24428: LD_INT 1
24430: PUSH
24431: LD_INT 2
24433: PUSH
24434: LD_INT 7
24436: PUSH
24437: LD_INT 9
24439: PUSH
24440: LD_INT 10
24442: PUSH
24443: LD_INT 11
24445: PUSH
24446: EMPTY
24447: LIST
24448: LIST
24449: LIST
24450: LIST
24451: LIST
24452: LIST
24453: IN
24454: NOT
24455: OR
24456: IFFALSE 24462
// exit ;
24458: POP
24459: POP
24460: GO 24547
// end ;
24462: GO 24119
24464: POP
24465: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
24466: LD_VAR 0 9
24470: PPUSH
24471: LD_VAR 0 3
24475: PPUSH
24476: LD_VAR 0 4
24480: PPUSH
24481: LD_INT 20
24483: PPUSH
24484: CALL 16366 0 4
24488: PUSH
24489: LD_INT 4
24491: ARRAY
24492: IFFALSE 24496
// exit ;
24494: GO 24547
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
24496: LD_VAR 0 2
24500: PUSH
24501: LD_INT 29
24503: PUSH
24504: LD_INT 30
24506: PUSH
24507: EMPTY
24508: LIST
24509: LIST
24510: IN
24511: IFFALSE 24535
24513: PUSH
24514: LD_VAR 0 3
24518: PPUSH
24519: LD_VAR 0 4
24523: PPUSH
24524: LD_VAR 0 9
24528: PPUSH
24529: CALL_OW 440
24533: NOT
24534: AND
24535: IFFALSE 24539
// exit ;
24537: GO 24547
// result := true ;
24539: LD_ADDR_VAR 0 6
24543: PUSH
24544: LD_INT 1
24546: ST_TO_ADDR
// end ;
24547: LD_VAR 0 6
24551: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
24552: LD_INT 0
24554: PPUSH
24555: PPUSH
24556: PPUSH
24557: PPUSH
24558: PPUSH
24559: PPUSH
24560: PPUSH
24561: PPUSH
24562: PPUSH
24563: PPUSH
24564: PPUSH
24565: PPUSH
24566: PPUSH
24567: PPUSH
24568: PPUSH
24569: PPUSH
24570: PPUSH
24571: PPUSH
24572: PPUSH
24573: PPUSH
24574: PPUSH
24575: PPUSH
24576: PPUSH
24577: PPUSH
24578: PPUSH
24579: PPUSH
24580: PPUSH
24581: PPUSH
24582: PPUSH
24583: PPUSH
24584: PPUSH
24585: PPUSH
24586: PPUSH
24587: PPUSH
24588: PPUSH
24589: PPUSH
24590: PPUSH
24591: PPUSH
24592: PPUSH
24593: PPUSH
24594: PPUSH
24595: PPUSH
24596: PPUSH
24597: PPUSH
24598: PPUSH
24599: PPUSH
24600: PPUSH
24601: PPUSH
24602: PPUSH
24603: PPUSH
24604: PPUSH
24605: PPUSH
24606: PPUSH
24607: PPUSH
24608: PPUSH
24609: PPUSH
24610: PPUSH
24611: PPUSH
// result = [ ] ;
24612: LD_ADDR_VAR 0 7
24616: PUSH
24617: EMPTY
24618: ST_TO_ADDR
// temp_list = [ ] ;
24619: LD_ADDR_VAR 0 9
24623: PUSH
24624: EMPTY
24625: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
24626: LD_VAR 0 4
24630: PUSH
24631: LD_INT 0
24633: PUSH
24634: LD_INT 1
24636: PUSH
24637: LD_INT 2
24639: PUSH
24640: LD_INT 3
24642: PUSH
24643: LD_INT 4
24645: PUSH
24646: LD_INT 5
24648: PUSH
24649: EMPTY
24650: LIST
24651: LIST
24652: LIST
24653: LIST
24654: LIST
24655: LIST
24656: IN
24657: NOT
24658: IFTRUE 24701
24660: PUSH
24661: LD_VAR 0 1
24665: PUSH
24666: LD_INT 0
24668: PUSH
24669: LD_INT 1
24671: PUSH
24672: EMPTY
24673: LIST
24674: LIST
24675: IN
24676: IFFALSE 24700
24678: PUSH
24679: LD_VAR 0 5
24683: PUSH
24684: LD_INT 1
24686: PUSH
24687: LD_INT 2
24689: PUSH
24690: LD_INT 3
24692: PUSH
24693: EMPTY
24694: LIST
24695: LIST
24696: LIST
24697: IN
24698: NOT
24699: AND
24700: OR
24701: IFFALSE 24705
// exit ;
24703: GO 43104
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
24705: LD_VAR 0 1
24709: PUSH
24710: LD_INT 6
24712: PUSH
24713: LD_INT 7
24715: PUSH
24716: LD_INT 8
24718: PUSH
24719: LD_INT 13
24721: PUSH
24722: LD_INT 12
24724: PUSH
24725: LD_INT 15
24727: PUSH
24728: LD_INT 11
24730: PUSH
24731: LD_INT 14
24733: PUSH
24734: LD_INT 10
24736: PUSH
24737: EMPTY
24738: LIST
24739: LIST
24740: LIST
24741: LIST
24742: LIST
24743: LIST
24744: LIST
24745: LIST
24746: LIST
24747: IN
24748: IFFALSE 24758
// btype = b_lab ;
24750: LD_ADDR_VAR 0 1
24754: PUSH
24755: LD_INT 6
24757: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
24758: LD_VAR 0 6
24762: PUSH
24763: LD_INT 0
24765: PUSH
24766: LD_INT 1
24768: PUSH
24769: LD_INT 2
24771: PUSH
24772: EMPTY
24773: LIST
24774: LIST
24775: LIST
24776: IN
24777: NOT
24778: IFTRUE 24846
24780: PUSH
24781: LD_VAR 0 1
24785: PUSH
24786: LD_INT 0
24788: PUSH
24789: LD_INT 1
24791: PUSH
24792: LD_INT 2
24794: PUSH
24795: LD_INT 3
24797: PUSH
24798: LD_INT 6
24800: PUSH
24801: LD_INT 36
24803: PUSH
24804: LD_INT 4
24806: PUSH
24807: LD_INT 5
24809: PUSH
24810: LD_INT 31
24812: PUSH
24813: LD_INT 32
24815: PUSH
24816: LD_INT 33
24818: PUSH
24819: EMPTY
24820: LIST
24821: LIST
24822: LIST
24823: LIST
24824: LIST
24825: LIST
24826: LIST
24827: LIST
24828: LIST
24829: LIST
24830: LIST
24831: IN
24832: NOT
24833: IFFALSE 24845
24835: PUSH
24836: LD_VAR 0 6
24840: PUSH
24841: LD_INT 1
24843: EQUAL
24844: AND
24845: OR
24846: IFTRUE 24878
24848: PUSH
24849: LD_VAR 0 1
24853: PUSH
24854: LD_INT 2
24856: PUSH
24857: LD_INT 3
24859: PUSH
24860: EMPTY
24861: LIST
24862: LIST
24863: IN
24864: NOT
24865: IFFALSE 24877
24867: PUSH
24868: LD_VAR 0 6
24872: PUSH
24873: LD_INT 2
24875: EQUAL
24876: AND
24877: OR
24878: IFFALSE 24888
// mode = 0 ;
24880: LD_ADDR_VAR 0 6
24884: PUSH
24885: LD_INT 0
24887: ST_TO_ADDR
// case mode of 0 :
24888: LD_VAR 0 6
24892: PUSH
24893: LD_INT 0
24895: DOUBLE
24896: EQUAL
24897: IFTRUE 24901
24899: GO 36354
24901: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
24902: LD_ADDR_VAR 0 11
24906: PUSH
24907: LD_INT 0
24909: PUSH
24910: LD_INT 0
24912: PUSH
24913: EMPTY
24914: LIST
24915: LIST
24916: PUSH
24917: LD_INT 0
24919: PUSH
24920: LD_INT 1
24922: NEG
24923: PUSH
24924: EMPTY
24925: LIST
24926: LIST
24927: PUSH
24928: LD_INT 1
24930: PUSH
24931: LD_INT 0
24933: PUSH
24934: EMPTY
24935: LIST
24936: LIST
24937: PUSH
24938: LD_INT 1
24940: PUSH
24941: LD_INT 1
24943: PUSH
24944: EMPTY
24945: LIST
24946: LIST
24947: PUSH
24948: LD_INT 0
24950: PUSH
24951: LD_INT 1
24953: PUSH
24954: EMPTY
24955: LIST
24956: LIST
24957: PUSH
24958: LD_INT 1
24960: NEG
24961: PUSH
24962: LD_INT 0
24964: PUSH
24965: EMPTY
24966: LIST
24967: LIST
24968: PUSH
24969: LD_INT 1
24971: NEG
24972: PUSH
24973: LD_INT 1
24975: NEG
24976: PUSH
24977: EMPTY
24978: LIST
24979: LIST
24980: PUSH
24981: LD_INT 1
24983: NEG
24984: PUSH
24985: LD_INT 2
24987: NEG
24988: PUSH
24989: EMPTY
24990: LIST
24991: LIST
24992: PUSH
24993: LD_INT 0
24995: PUSH
24996: LD_INT 2
24998: NEG
24999: PUSH
25000: EMPTY
25001: LIST
25002: LIST
25003: PUSH
25004: LD_INT 1
25006: PUSH
25007: LD_INT 1
25009: NEG
25010: PUSH
25011: EMPTY
25012: LIST
25013: LIST
25014: PUSH
25015: LD_INT 1
25017: PUSH
25018: LD_INT 2
25020: PUSH
25021: EMPTY
25022: LIST
25023: LIST
25024: PUSH
25025: LD_INT 0
25027: PUSH
25028: LD_INT 2
25030: PUSH
25031: EMPTY
25032: LIST
25033: LIST
25034: PUSH
25035: LD_INT 1
25037: NEG
25038: PUSH
25039: LD_INT 1
25041: PUSH
25042: EMPTY
25043: LIST
25044: LIST
25045: PUSH
25046: LD_INT 1
25048: PUSH
25049: LD_INT 3
25051: PUSH
25052: EMPTY
25053: LIST
25054: LIST
25055: PUSH
25056: LD_INT 0
25058: PUSH
25059: LD_INT 3
25061: PUSH
25062: EMPTY
25063: LIST
25064: LIST
25065: PUSH
25066: LD_INT 1
25068: NEG
25069: PUSH
25070: LD_INT 2
25072: PUSH
25073: EMPTY
25074: LIST
25075: LIST
25076: PUSH
25077: EMPTY
25078: LIST
25079: LIST
25080: LIST
25081: LIST
25082: LIST
25083: LIST
25084: LIST
25085: LIST
25086: LIST
25087: LIST
25088: LIST
25089: LIST
25090: LIST
25091: LIST
25092: LIST
25093: LIST
25094: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
25095: LD_ADDR_VAR 0 12
25099: PUSH
25100: LD_INT 0
25102: PUSH
25103: LD_INT 0
25105: PUSH
25106: EMPTY
25107: LIST
25108: LIST
25109: PUSH
25110: LD_INT 0
25112: PUSH
25113: LD_INT 1
25115: NEG
25116: PUSH
25117: EMPTY
25118: LIST
25119: LIST
25120: PUSH
25121: LD_INT 1
25123: PUSH
25124: LD_INT 0
25126: PUSH
25127: EMPTY
25128: LIST
25129: LIST
25130: PUSH
25131: LD_INT 1
25133: PUSH
25134: LD_INT 1
25136: PUSH
25137: EMPTY
25138: LIST
25139: LIST
25140: PUSH
25141: LD_INT 0
25143: PUSH
25144: LD_INT 1
25146: PUSH
25147: EMPTY
25148: LIST
25149: LIST
25150: PUSH
25151: LD_INT 1
25153: NEG
25154: PUSH
25155: LD_INT 0
25157: PUSH
25158: EMPTY
25159: LIST
25160: LIST
25161: PUSH
25162: LD_INT 1
25164: NEG
25165: PUSH
25166: LD_INT 1
25168: NEG
25169: PUSH
25170: EMPTY
25171: LIST
25172: LIST
25173: PUSH
25174: LD_INT 1
25176: PUSH
25177: LD_INT 1
25179: NEG
25180: PUSH
25181: EMPTY
25182: LIST
25183: LIST
25184: PUSH
25185: LD_INT 2
25187: PUSH
25188: LD_INT 0
25190: PUSH
25191: EMPTY
25192: LIST
25193: LIST
25194: PUSH
25195: LD_INT 2
25197: PUSH
25198: LD_INT 1
25200: PUSH
25201: EMPTY
25202: LIST
25203: LIST
25204: PUSH
25205: LD_INT 1
25207: NEG
25208: PUSH
25209: LD_INT 1
25211: PUSH
25212: EMPTY
25213: LIST
25214: LIST
25215: PUSH
25216: LD_INT 2
25218: NEG
25219: PUSH
25220: LD_INT 0
25222: PUSH
25223: EMPTY
25224: LIST
25225: LIST
25226: PUSH
25227: LD_INT 2
25229: NEG
25230: PUSH
25231: LD_INT 1
25233: NEG
25234: PUSH
25235: EMPTY
25236: LIST
25237: LIST
25238: PUSH
25239: LD_INT 2
25241: NEG
25242: PUSH
25243: LD_INT 1
25245: PUSH
25246: EMPTY
25247: LIST
25248: LIST
25249: PUSH
25250: LD_INT 3
25252: NEG
25253: PUSH
25254: LD_INT 0
25256: PUSH
25257: EMPTY
25258: LIST
25259: LIST
25260: PUSH
25261: LD_INT 3
25263: NEG
25264: PUSH
25265: LD_INT 1
25267: NEG
25268: PUSH
25269: EMPTY
25270: LIST
25271: LIST
25272: PUSH
25273: EMPTY
25274: LIST
25275: LIST
25276: LIST
25277: LIST
25278: LIST
25279: LIST
25280: LIST
25281: LIST
25282: LIST
25283: LIST
25284: LIST
25285: LIST
25286: LIST
25287: LIST
25288: LIST
25289: LIST
25290: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
25291: LD_ADDR_VAR 0 13
25295: PUSH
25296: LD_INT 0
25298: PUSH
25299: LD_INT 0
25301: PUSH
25302: EMPTY
25303: LIST
25304: LIST
25305: PUSH
25306: LD_INT 0
25308: PUSH
25309: LD_INT 1
25311: NEG
25312: PUSH
25313: EMPTY
25314: LIST
25315: LIST
25316: PUSH
25317: LD_INT 1
25319: PUSH
25320: LD_INT 0
25322: PUSH
25323: EMPTY
25324: LIST
25325: LIST
25326: PUSH
25327: LD_INT 1
25329: PUSH
25330: LD_INT 1
25332: PUSH
25333: EMPTY
25334: LIST
25335: LIST
25336: PUSH
25337: LD_INT 0
25339: PUSH
25340: LD_INT 1
25342: PUSH
25343: EMPTY
25344: LIST
25345: LIST
25346: PUSH
25347: LD_INT 1
25349: NEG
25350: PUSH
25351: LD_INT 0
25353: PUSH
25354: EMPTY
25355: LIST
25356: LIST
25357: PUSH
25358: LD_INT 1
25360: NEG
25361: PUSH
25362: LD_INT 1
25364: NEG
25365: PUSH
25366: EMPTY
25367: LIST
25368: LIST
25369: PUSH
25370: LD_INT 1
25372: NEG
25373: PUSH
25374: LD_INT 2
25376: NEG
25377: PUSH
25378: EMPTY
25379: LIST
25380: LIST
25381: PUSH
25382: LD_INT 2
25384: PUSH
25385: LD_INT 1
25387: PUSH
25388: EMPTY
25389: LIST
25390: LIST
25391: PUSH
25392: LD_INT 2
25394: PUSH
25395: LD_INT 2
25397: PUSH
25398: EMPTY
25399: LIST
25400: LIST
25401: PUSH
25402: LD_INT 1
25404: PUSH
25405: LD_INT 2
25407: PUSH
25408: EMPTY
25409: LIST
25410: LIST
25411: PUSH
25412: LD_INT 2
25414: NEG
25415: PUSH
25416: LD_INT 1
25418: NEG
25419: PUSH
25420: EMPTY
25421: LIST
25422: LIST
25423: PUSH
25424: LD_INT 2
25426: NEG
25427: PUSH
25428: LD_INT 2
25430: NEG
25431: PUSH
25432: EMPTY
25433: LIST
25434: LIST
25435: PUSH
25436: LD_INT 2
25438: NEG
25439: PUSH
25440: LD_INT 3
25442: NEG
25443: PUSH
25444: EMPTY
25445: LIST
25446: LIST
25447: PUSH
25448: LD_INT 3
25450: NEG
25451: PUSH
25452: LD_INT 2
25454: NEG
25455: PUSH
25456: EMPTY
25457: LIST
25458: LIST
25459: PUSH
25460: LD_INT 3
25462: NEG
25463: PUSH
25464: LD_INT 3
25466: NEG
25467: PUSH
25468: EMPTY
25469: LIST
25470: LIST
25471: PUSH
25472: EMPTY
25473: LIST
25474: LIST
25475: LIST
25476: LIST
25477: LIST
25478: LIST
25479: LIST
25480: LIST
25481: LIST
25482: LIST
25483: LIST
25484: LIST
25485: LIST
25486: LIST
25487: LIST
25488: LIST
25489: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
25490: LD_ADDR_VAR 0 14
25494: PUSH
25495: LD_INT 0
25497: PUSH
25498: LD_INT 0
25500: PUSH
25501: EMPTY
25502: LIST
25503: LIST
25504: PUSH
25505: LD_INT 0
25507: PUSH
25508: LD_INT 1
25510: NEG
25511: PUSH
25512: EMPTY
25513: LIST
25514: LIST
25515: PUSH
25516: LD_INT 1
25518: PUSH
25519: LD_INT 0
25521: PUSH
25522: EMPTY
25523: LIST
25524: LIST
25525: PUSH
25526: LD_INT 1
25528: PUSH
25529: LD_INT 1
25531: PUSH
25532: EMPTY
25533: LIST
25534: LIST
25535: PUSH
25536: LD_INT 0
25538: PUSH
25539: LD_INT 1
25541: PUSH
25542: EMPTY
25543: LIST
25544: LIST
25545: PUSH
25546: LD_INT 1
25548: NEG
25549: PUSH
25550: LD_INT 0
25552: PUSH
25553: EMPTY
25554: LIST
25555: LIST
25556: PUSH
25557: LD_INT 1
25559: NEG
25560: PUSH
25561: LD_INT 1
25563: NEG
25564: PUSH
25565: EMPTY
25566: LIST
25567: LIST
25568: PUSH
25569: LD_INT 1
25571: NEG
25572: PUSH
25573: LD_INT 2
25575: NEG
25576: PUSH
25577: EMPTY
25578: LIST
25579: LIST
25580: PUSH
25581: LD_INT 0
25583: PUSH
25584: LD_INT 2
25586: NEG
25587: PUSH
25588: EMPTY
25589: LIST
25590: LIST
25591: PUSH
25592: LD_INT 1
25594: PUSH
25595: LD_INT 1
25597: NEG
25598: PUSH
25599: EMPTY
25600: LIST
25601: LIST
25602: PUSH
25603: LD_INT 1
25605: PUSH
25606: LD_INT 2
25608: PUSH
25609: EMPTY
25610: LIST
25611: LIST
25612: PUSH
25613: LD_INT 0
25615: PUSH
25616: LD_INT 2
25618: PUSH
25619: EMPTY
25620: LIST
25621: LIST
25622: PUSH
25623: LD_INT 1
25625: NEG
25626: PUSH
25627: LD_INT 1
25629: PUSH
25630: EMPTY
25631: LIST
25632: LIST
25633: PUSH
25634: LD_INT 1
25636: NEG
25637: PUSH
25638: LD_INT 3
25640: NEG
25641: PUSH
25642: EMPTY
25643: LIST
25644: LIST
25645: PUSH
25646: LD_INT 0
25648: PUSH
25649: LD_INT 3
25651: NEG
25652: PUSH
25653: EMPTY
25654: LIST
25655: LIST
25656: PUSH
25657: LD_INT 1
25659: PUSH
25660: LD_INT 2
25662: NEG
25663: PUSH
25664: EMPTY
25665: LIST
25666: LIST
25667: PUSH
25668: EMPTY
25669: LIST
25670: LIST
25671: LIST
25672: LIST
25673: LIST
25674: LIST
25675: LIST
25676: LIST
25677: LIST
25678: LIST
25679: LIST
25680: LIST
25681: LIST
25682: LIST
25683: LIST
25684: LIST
25685: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
25686: LD_ADDR_VAR 0 15
25690: PUSH
25691: LD_INT 0
25693: PUSH
25694: LD_INT 0
25696: PUSH
25697: EMPTY
25698: LIST
25699: LIST
25700: PUSH
25701: LD_INT 0
25703: PUSH
25704: LD_INT 1
25706: NEG
25707: PUSH
25708: EMPTY
25709: LIST
25710: LIST
25711: PUSH
25712: LD_INT 1
25714: PUSH
25715: LD_INT 0
25717: PUSH
25718: EMPTY
25719: LIST
25720: LIST
25721: PUSH
25722: LD_INT 1
25724: PUSH
25725: LD_INT 1
25727: PUSH
25728: EMPTY
25729: LIST
25730: LIST
25731: PUSH
25732: LD_INT 0
25734: PUSH
25735: LD_INT 1
25737: PUSH
25738: EMPTY
25739: LIST
25740: LIST
25741: PUSH
25742: LD_INT 1
25744: NEG
25745: PUSH
25746: LD_INT 0
25748: PUSH
25749: EMPTY
25750: LIST
25751: LIST
25752: PUSH
25753: LD_INT 1
25755: NEG
25756: PUSH
25757: LD_INT 1
25759: NEG
25760: PUSH
25761: EMPTY
25762: LIST
25763: LIST
25764: PUSH
25765: LD_INT 1
25767: PUSH
25768: LD_INT 1
25770: NEG
25771: PUSH
25772: EMPTY
25773: LIST
25774: LIST
25775: PUSH
25776: LD_INT 2
25778: PUSH
25779: LD_INT 0
25781: PUSH
25782: EMPTY
25783: LIST
25784: LIST
25785: PUSH
25786: LD_INT 2
25788: PUSH
25789: LD_INT 1
25791: PUSH
25792: EMPTY
25793: LIST
25794: LIST
25795: PUSH
25796: LD_INT 1
25798: NEG
25799: PUSH
25800: LD_INT 1
25802: PUSH
25803: EMPTY
25804: LIST
25805: LIST
25806: PUSH
25807: LD_INT 2
25809: NEG
25810: PUSH
25811: LD_INT 0
25813: PUSH
25814: EMPTY
25815: LIST
25816: LIST
25817: PUSH
25818: LD_INT 2
25820: NEG
25821: PUSH
25822: LD_INT 1
25824: NEG
25825: PUSH
25826: EMPTY
25827: LIST
25828: LIST
25829: PUSH
25830: LD_INT 2
25832: PUSH
25833: LD_INT 1
25835: NEG
25836: PUSH
25837: EMPTY
25838: LIST
25839: LIST
25840: PUSH
25841: LD_INT 3
25843: PUSH
25844: LD_INT 0
25846: PUSH
25847: EMPTY
25848: LIST
25849: LIST
25850: PUSH
25851: LD_INT 3
25853: PUSH
25854: LD_INT 1
25856: PUSH
25857: EMPTY
25858: LIST
25859: LIST
25860: PUSH
25861: EMPTY
25862: LIST
25863: LIST
25864: LIST
25865: LIST
25866: LIST
25867: LIST
25868: LIST
25869: LIST
25870: LIST
25871: LIST
25872: LIST
25873: LIST
25874: LIST
25875: LIST
25876: LIST
25877: LIST
25878: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
25879: LD_ADDR_VAR 0 16
25883: PUSH
25884: LD_INT 0
25886: PUSH
25887: LD_INT 0
25889: PUSH
25890: EMPTY
25891: LIST
25892: LIST
25893: PUSH
25894: LD_INT 0
25896: PUSH
25897: LD_INT 1
25899: NEG
25900: PUSH
25901: EMPTY
25902: LIST
25903: LIST
25904: PUSH
25905: LD_INT 1
25907: PUSH
25908: LD_INT 0
25910: PUSH
25911: EMPTY
25912: LIST
25913: LIST
25914: PUSH
25915: LD_INT 1
25917: PUSH
25918: LD_INT 1
25920: PUSH
25921: EMPTY
25922: LIST
25923: LIST
25924: PUSH
25925: LD_INT 0
25927: PUSH
25928: LD_INT 1
25930: PUSH
25931: EMPTY
25932: LIST
25933: LIST
25934: PUSH
25935: LD_INT 1
25937: NEG
25938: PUSH
25939: LD_INT 0
25941: PUSH
25942: EMPTY
25943: LIST
25944: LIST
25945: PUSH
25946: LD_INT 1
25948: NEG
25949: PUSH
25950: LD_INT 1
25952: NEG
25953: PUSH
25954: EMPTY
25955: LIST
25956: LIST
25957: PUSH
25958: LD_INT 1
25960: NEG
25961: PUSH
25962: LD_INT 2
25964: NEG
25965: PUSH
25966: EMPTY
25967: LIST
25968: LIST
25969: PUSH
25970: LD_INT 2
25972: PUSH
25973: LD_INT 1
25975: PUSH
25976: EMPTY
25977: LIST
25978: LIST
25979: PUSH
25980: LD_INT 2
25982: PUSH
25983: LD_INT 2
25985: PUSH
25986: EMPTY
25987: LIST
25988: LIST
25989: PUSH
25990: LD_INT 1
25992: PUSH
25993: LD_INT 2
25995: PUSH
25996: EMPTY
25997: LIST
25998: LIST
25999: PUSH
26000: LD_INT 2
26002: NEG
26003: PUSH
26004: LD_INT 1
26006: NEG
26007: PUSH
26008: EMPTY
26009: LIST
26010: LIST
26011: PUSH
26012: LD_INT 2
26014: NEG
26015: PUSH
26016: LD_INT 2
26018: NEG
26019: PUSH
26020: EMPTY
26021: LIST
26022: LIST
26023: PUSH
26024: LD_INT 3
26026: PUSH
26027: LD_INT 2
26029: PUSH
26030: EMPTY
26031: LIST
26032: LIST
26033: PUSH
26034: LD_INT 3
26036: PUSH
26037: LD_INT 3
26039: PUSH
26040: EMPTY
26041: LIST
26042: LIST
26043: PUSH
26044: LD_INT 2
26046: PUSH
26047: LD_INT 3
26049: PUSH
26050: EMPTY
26051: LIST
26052: LIST
26053: PUSH
26054: EMPTY
26055: LIST
26056: LIST
26057: LIST
26058: LIST
26059: LIST
26060: LIST
26061: LIST
26062: LIST
26063: LIST
26064: LIST
26065: LIST
26066: LIST
26067: LIST
26068: LIST
26069: LIST
26070: LIST
26071: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26072: LD_ADDR_VAR 0 17
26076: PUSH
26077: LD_INT 0
26079: PUSH
26080: LD_INT 0
26082: PUSH
26083: EMPTY
26084: LIST
26085: LIST
26086: PUSH
26087: LD_INT 0
26089: PUSH
26090: LD_INT 1
26092: NEG
26093: PUSH
26094: EMPTY
26095: LIST
26096: LIST
26097: PUSH
26098: LD_INT 1
26100: PUSH
26101: LD_INT 0
26103: PUSH
26104: EMPTY
26105: LIST
26106: LIST
26107: PUSH
26108: LD_INT 1
26110: PUSH
26111: LD_INT 1
26113: PUSH
26114: EMPTY
26115: LIST
26116: LIST
26117: PUSH
26118: LD_INT 0
26120: PUSH
26121: LD_INT 1
26123: PUSH
26124: EMPTY
26125: LIST
26126: LIST
26127: PUSH
26128: LD_INT 1
26130: NEG
26131: PUSH
26132: LD_INT 0
26134: PUSH
26135: EMPTY
26136: LIST
26137: LIST
26138: PUSH
26139: LD_INT 1
26141: NEG
26142: PUSH
26143: LD_INT 1
26145: NEG
26146: PUSH
26147: EMPTY
26148: LIST
26149: LIST
26150: PUSH
26151: LD_INT 1
26153: NEG
26154: PUSH
26155: LD_INT 2
26157: NEG
26158: PUSH
26159: EMPTY
26160: LIST
26161: LIST
26162: PUSH
26163: LD_INT 0
26165: PUSH
26166: LD_INT 2
26168: NEG
26169: PUSH
26170: EMPTY
26171: LIST
26172: LIST
26173: PUSH
26174: LD_INT 1
26176: PUSH
26177: LD_INT 1
26179: NEG
26180: PUSH
26181: EMPTY
26182: LIST
26183: LIST
26184: PUSH
26185: LD_INT 2
26187: PUSH
26188: LD_INT 0
26190: PUSH
26191: EMPTY
26192: LIST
26193: LIST
26194: PUSH
26195: LD_INT 2
26197: PUSH
26198: LD_INT 1
26200: PUSH
26201: EMPTY
26202: LIST
26203: LIST
26204: PUSH
26205: LD_INT 2
26207: PUSH
26208: LD_INT 2
26210: PUSH
26211: EMPTY
26212: LIST
26213: LIST
26214: PUSH
26215: LD_INT 1
26217: PUSH
26218: LD_INT 2
26220: PUSH
26221: EMPTY
26222: LIST
26223: LIST
26224: PUSH
26225: LD_INT 0
26227: PUSH
26228: LD_INT 2
26230: PUSH
26231: EMPTY
26232: LIST
26233: LIST
26234: PUSH
26235: LD_INT 1
26237: NEG
26238: PUSH
26239: LD_INT 1
26241: PUSH
26242: EMPTY
26243: LIST
26244: LIST
26245: PUSH
26246: LD_INT 2
26248: NEG
26249: PUSH
26250: LD_INT 0
26252: PUSH
26253: EMPTY
26254: LIST
26255: LIST
26256: PUSH
26257: LD_INT 2
26259: NEG
26260: PUSH
26261: LD_INT 1
26263: NEG
26264: PUSH
26265: EMPTY
26266: LIST
26267: LIST
26268: PUSH
26269: LD_INT 2
26271: NEG
26272: PUSH
26273: LD_INT 2
26275: NEG
26276: PUSH
26277: EMPTY
26278: LIST
26279: LIST
26280: PUSH
26281: EMPTY
26282: LIST
26283: LIST
26284: LIST
26285: LIST
26286: LIST
26287: LIST
26288: LIST
26289: LIST
26290: LIST
26291: LIST
26292: LIST
26293: LIST
26294: LIST
26295: LIST
26296: LIST
26297: LIST
26298: LIST
26299: LIST
26300: LIST
26301: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26302: LD_ADDR_VAR 0 18
26306: PUSH
26307: LD_INT 0
26309: PUSH
26310: LD_INT 0
26312: PUSH
26313: EMPTY
26314: LIST
26315: LIST
26316: PUSH
26317: LD_INT 0
26319: PUSH
26320: LD_INT 1
26322: NEG
26323: PUSH
26324: EMPTY
26325: LIST
26326: LIST
26327: PUSH
26328: LD_INT 1
26330: PUSH
26331: LD_INT 0
26333: PUSH
26334: EMPTY
26335: LIST
26336: LIST
26337: PUSH
26338: LD_INT 1
26340: PUSH
26341: LD_INT 1
26343: PUSH
26344: EMPTY
26345: LIST
26346: LIST
26347: PUSH
26348: LD_INT 0
26350: PUSH
26351: LD_INT 1
26353: PUSH
26354: EMPTY
26355: LIST
26356: LIST
26357: PUSH
26358: LD_INT 1
26360: NEG
26361: PUSH
26362: LD_INT 0
26364: PUSH
26365: EMPTY
26366: LIST
26367: LIST
26368: PUSH
26369: LD_INT 1
26371: NEG
26372: PUSH
26373: LD_INT 1
26375: NEG
26376: PUSH
26377: EMPTY
26378: LIST
26379: LIST
26380: PUSH
26381: LD_INT 1
26383: NEG
26384: PUSH
26385: LD_INT 2
26387: NEG
26388: PUSH
26389: EMPTY
26390: LIST
26391: LIST
26392: PUSH
26393: LD_INT 0
26395: PUSH
26396: LD_INT 2
26398: NEG
26399: PUSH
26400: EMPTY
26401: LIST
26402: LIST
26403: PUSH
26404: LD_INT 1
26406: PUSH
26407: LD_INT 1
26409: NEG
26410: PUSH
26411: EMPTY
26412: LIST
26413: LIST
26414: PUSH
26415: LD_INT 2
26417: PUSH
26418: LD_INT 0
26420: PUSH
26421: EMPTY
26422: LIST
26423: LIST
26424: PUSH
26425: LD_INT 2
26427: PUSH
26428: LD_INT 1
26430: PUSH
26431: EMPTY
26432: LIST
26433: LIST
26434: PUSH
26435: LD_INT 2
26437: PUSH
26438: LD_INT 2
26440: PUSH
26441: EMPTY
26442: LIST
26443: LIST
26444: PUSH
26445: LD_INT 1
26447: PUSH
26448: LD_INT 2
26450: PUSH
26451: EMPTY
26452: LIST
26453: LIST
26454: PUSH
26455: LD_INT 0
26457: PUSH
26458: LD_INT 2
26460: PUSH
26461: EMPTY
26462: LIST
26463: LIST
26464: PUSH
26465: LD_INT 1
26467: NEG
26468: PUSH
26469: LD_INT 1
26471: PUSH
26472: EMPTY
26473: LIST
26474: LIST
26475: PUSH
26476: LD_INT 2
26478: NEG
26479: PUSH
26480: LD_INT 0
26482: PUSH
26483: EMPTY
26484: LIST
26485: LIST
26486: PUSH
26487: LD_INT 2
26489: NEG
26490: PUSH
26491: LD_INT 1
26493: NEG
26494: PUSH
26495: EMPTY
26496: LIST
26497: LIST
26498: PUSH
26499: LD_INT 2
26501: NEG
26502: PUSH
26503: LD_INT 2
26505: NEG
26506: PUSH
26507: EMPTY
26508: LIST
26509: LIST
26510: PUSH
26511: EMPTY
26512: LIST
26513: LIST
26514: LIST
26515: LIST
26516: LIST
26517: LIST
26518: LIST
26519: LIST
26520: LIST
26521: LIST
26522: LIST
26523: LIST
26524: LIST
26525: LIST
26526: LIST
26527: LIST
26528: LIST
26529: LIST
26530: LIST
26531: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26532: LD_ADDR_VAR 0 19
26536: PUSH
26537: LD_INT 0
26539: PUSH
26540: LD_INT 0
26542: PUSH
26543: EMPTY
26544: LIST
26545: LIST
26546: PUSH
26547: LD_INT 0
26549: PUSH
26550: LD_INT 1
26552: NEG
26553: PUSH
26554: EMPTY
26555: LIST
26556: LIST
26557: PUSH
26558: LD_INT 1
26560: PUSH
26561: LD_INT 0
26563: PUSH
26564: EMPTY
26565: LIST
26566: LIST
26567: PUSH
26568: LD_INT 1
26570: PUSH
26571: LD_INT 1
26573: PUSH
26574: EMPTY
26575: LIST
26576: LIST
26577: PUSH
26578: LD_INT 0
26580: PUSH
26581: LD_INT 1
26583: PUSH
26584: EMPTY
26585: LIST
26586: LIST
26587: PUSH
26588: LD_INT 1
26590: NEG
26591: PUSH
26592: LD_INT 0
26594: PUSH
26595: EMPTY
26596: LIST
26597: LIST
26598: PUSH
26599: LD_INT 1
26601: NEG
26602: PUSH
26603: LD_INT 1
26605: NEG
26606: PUSH
26607: EMPTY
26608: LIST
26609: LIST
26610: PUSH
26611: LD_INT 1
26613: NEG
26614: PUSH
26615: LD_INT 2
26617: NEG
26618: PUSH
26619: EMPTY
26620: LIST
26621: LIST
26622: PUSH
26623: LD_INT 0
26625: PUSH
26626: LD_INT 2
26628: NEG
26629: PUSH
26630: EMPTY
26631: LIST
26632: LIST
26633: PUSH
26634: LD_INT 1
26636: PUSH
26637: LD_INT 1
26639: NEG
26640: PUSH
26641: EMPTY
26642: LIST
26643: LIST
26644: PUSH
26645: LD_INT 2
26647: PUSH
26648: LD_INT 0
26650: PUSH
26651: EMPTY
26652: LIST
26653: LIST
26654: PUSH
26655: LD_INT 2
26657: PUSH
26658: LD_INT 1
26660: PUSH
26661: EMPTY
26662: LIST
26663: LIST
26664: PUSH
26665: LD_INT 2
26667: PUSH
26668: LD_INT 2
26670: PUSH
26671: EMPTY
26672: LIST
26673: LIST
26674: PUSH
26675: LD_INT 1
26677: PUSH
26678: LD_INT 2
26680: PUSH
26681: EMPTY
26682: LIST
26683: LIST
26684: PUSH
26685: LD_INT 0
26687: PUSH
26688: LD_INT 2
26690: PUSH
26691: EMPTY
26692: LIST
26693: LIST
26694: PUSH
26695: LD_INT 1
26697: NEG
26698: PUSH
26699: LD_INT 1
26701: PUSH
26702: EMPTY
26703: LIST
26704: LIST
26705: PUSH
26706: LD_INT 2
26708: NEG
26709: PUSH
26710: LD_INT 0
26712: PUSH
26713: EMPTY
26714: LIST
26715: LIST
26716: PUSH
26717: LD_INT 2
26719: NEG
26720: PUSH
26721: LD_INT 1
26723: NEG
26724: PUSH
26725: EMPTY
26726: LIST
26727: LIST
26728: PUSH
26729: LD_INT 2
26731: NEG
26732: PUSH
26733: LD_INT 2
26735: NEG
26736: PUSH
26737: EMPTY
26738: LIST
26739: LIST
26740: PUSH
26741: EMPTY
26742: LIST
26743: LIST
26744: LIST
26745: LIST
26746: LIST
26747: LIST
26748: LIST
26749: LIST
26750: LIST
26751: LIST
26752: LIST
26753: LIST
26754: LIST
26755: LIST
26756: LIST
26757: LIST
26758: LIST
26759: LIST
26760: LIST
26761: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26762: LD_ADDR_VAR 0 20
26766: PUSH
26767: LD_INT 0
26769: PUSH
26770: LD_INT 0
26772: PUSH
26773: EMPTY
26774: LIST
26775: LIST
26776: PUSH
26777: LD_INT 0
26779: PUSH
26780: LD_INT 1
26782: NEG
26783: PUSH
26784: EMPTY
26785: LIST
26786: LIST
26787: PUSH
26788: LD_INT 1
26790: PUSH
26791: LD_INT 0
26793: PUSH
26794: EMPTY
26795: LIST
26796: LIST
26797: PUSH
26798: LD_INT 1
26800: PUSH
26801: LD_INT 1
26803: PUSH
26804: EMPTY
26805: LIST
26806: LIST
26807: PUSH
26808: LD_INT 0
26810: PUSH
26811: LD_INT 1
26813: PUSH
26814: EMPTY
26815: LIST
26816: LIST
26817: PUSH
26818: LD_INT 1
26820: NEG
26821: PUSH
26822: LD_INT 0
26824: PUSH
26825: EMPTY
26826: LIST
26827: LIST
26828: PUSH
26829: LD_INT 1
26831: NEG
26832: PUSH
26833: LD_INT 1
26835: NEG
26836: PUSH
26837: EMPTY
26838: LIST
26839: LIST
26840: PUSH
26841: LD_INT 1
26843: NEG
26844: PUSH
26845: LD_INT 2
26847: NEG
26848: PUSH
26849: EMPTY
26850: LIST
26851: LIST
26852: PUSH
26853: LD_INT 0
26855: PUSH
26856: LD_INT 2
26858: NEG
26859: PUSH
26860: EMPTY
26861: LIST
26862: LIST
26863: PUSH
26864: LD_INT 1
26866: PUSH
26867: LD_INT 1
26869: NEG
26870: PUSH
26871: EMPTY
26872: LIST
26873: LIST
26874: PUSH
26875: LD_INT 2
26877: PUSH
26878: LD_INT 0
26880: PUSH
26881: EMPTY
26882: LIST
26883: LIST
26884: PUSH
26885: LD_INT 2
26887: PUSH
26888: LD_INT 1
26890: PUSH
26891: EMPTY
26892: LIST
26893: LIST
26894: PUSH
26895: LD_INT 2
26897: PUSH
26898: LD_INT 2
26900: PUSH
26901: EMPTY
26902: LIST
26903: LIST
26904: PUSH
26905: LD_INT 1
26907: PUSH
26908: LD_INT 2
26910: PUSH
26911: EMPTY
26912: LIST
26913: LIST
26914: PUSH
26915: LD_INT 0
26917: PUSH
26918: LD_INT 2
26920: PUSH
26921: EMPTY
26922: LIST
26923: LIST
26924: PUSH
26925: LD_INT 1
26927: NEG
26928: PUSH
26929: LD_INT 1
26931: PUSH
26932: EMPTY
26933: LIST
26934: LIST
26935: PUSH
26936: LD_INT 2
26938: NEG
26939: PUSH
26940: LD_INT 0
26942: PUSH
26943: EMPTY
26944: LIST
26945: LIST
26946: PUSH
26947: LD_INT 2
26949: NEG
26950: PUSH
26951: LD_INT 1
26953: NEG
26954: PUSH
26955: EMPTY
26956: LIST
26957: LIST
26958: PUSH
26959: LD_INT 2
26961: NEG
26962: PUSH
26963: LD_INT 2
26965: NEG
26966: PUSH
26967: EMPTY
26968: LIST
26969: LIST
26970: PUSH
26971: EMPTY
26972: LIST
26973: LIST
26974: LIST
26975: LIST
26976: LIST
26977: LIST
26978: LIST
26979: LIST
26980: LIST
26981: LIST
26982: LIST
26983: LIST
26984: LIST
26985: LIST
26986: LIST
26987: LIST
26988: LIST
26989: LIST
26990: LIST
26991: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26992: LD_ADDR_VAR 0 21
26996: PUSH
26997: LD_INT 0
26999: PUSH
27000: LD_INT 0
27002: PUSH
27003: EMPTY
27004: LIST
27005: LIST
27006: PUSH
27007: LD_INT 0
27009: PUSH
27010: LD_INT 1
27012: NEG
27013: PUSH
27014: EMPTY
27015: LIST
27016: LIST
27017: PUSH
27018: LD_INT 1
27020: PUSH
27021: LD_INT 0
27023: PUSH
27024: EMPTY
27025: LIST
27026: LIST
27027: PUSH
27028: LD_INT 1
27030: PUSH
27031: LD_INT 1
27033: PUSH
27034: EMPTY
27035: LIST
27036: LIST
27037: PUSH
27038: LD_INT 0
27040: PUSH
27041: LD_INT 1
27043: PUSH
27044: EMPTY
27045: LIST
27046: LIST
27047: PUSH
27048: LD_INT 1
27050: NEG
27051: PUSH
27052: LD_INT 0
27054: PUSH
27055: EMPTY
27056: LIST
27057: LIST
27058: PUSH
27059: LD_INT 1
27061: NEG
27062: PUSH
27063: LD_INT 1
27065: NEG
27066: PUSH
27067: EMPTY
27068: LIST
27069: LIST
27070: PUSH
27071: LD_INT 1
27073: NEG
27074: PUSH
27075: LD_INT 2
27077: NEG
27078: PUSH
27079: EMPTY
27080: LIST
27081: LIST
27082: PUSH
27083: LD_INT 0
27085: PUSH
27086: LD_INT 2
27088: NEG
27089: PUSH
27090: EMPTY
27091: LIST
27092: LIST
27093: PUSH
27094: LD_INT 1
27096: PUSH
27097: LD_INT 1
27099: NEG
27100: PUSH
27101: EMPTY
27102: LIST
27103: LIST
27104: PUSH
27105: LD_INT 2
27107: PUSH
27108: LD_INT 0
27110: PUSH
27111: EMPTY
27112: LIST
27113: LIST
27114: PUSH
27115: LD_INT 2
27117: PUSH
27118: LD_INT 1
27120: PUSH
27121: EMPTY
27122: LIST
27123: LIST
27124: PUSH
27125: LD_INT 2
27127: PUSH
27128: LD_INT 2
27130: PUSH
27131: EMPTY
27132: LIST
27133: LIST
27134: PUSH
27135: LD_INT 1
27137: PUSH
27138: LD_INT 2
27140: PUSH
27141: EMPTY
27142: LIST
27143: LIST
27144: PUSH
27145: LD_INT 0
27147: PUSH
27148: LD_INT 2
27150: PUSH
27151: EMPTY
27152: LIST
27153: LIST
27154: PUSH
27155: LD_INT 1
27157: NEG
27158: PUSH
27159: LD_INT 1
27161: PUSH
27162: EMPTY
27163: LIST
27164: LIST
27165: PUSH
27166: LD_INT 2
27168: NEG
27169: PUSH
27170: LD_INT 0
27172: PUSH
27173: EMPTY
27174: LIST
27175: LIST
27176: PUSH
27177: LD_INT 2
27179: NEG
27180: PUSH
27181: LD_INT 1
27183: NEG
27184: PUSH
27185: EMPTY
27186: LIST
27187: LIST
27188: PUSH
27189: LD_INT 2
27191: NEG
27192: PUSH
27193: LD_INT 2
27195: NEG
27196: PUSH
27197: EMPTY
27198: LIST
27199: LIST
27200: PUSH
27201: EMPTY
27202: LIST
27203: LIST
27204: LIST
27205: LIST
27206: LIST
27207: LIST
27208: LIST
27209: LIST
27210: LIST
27211: LIST
27212: LIST
27213: LIST
27214: LIST
27215: LIST
27216: LIST
27217: LIST
27218: LIST
27219: LIST
27220: LIST
27221: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27222: LD_ADDR_VAR 0 22
27226: PUSH
27227: LD_INT 0
27229: PUSH
27230: LD_INT 0
27232: PUSH
27233: EMPTY
27234: LIST
27235: LIST
27236: PUSH
27237: LD_INT 0
27239: PUSH
27240: LD_INT 1
27242: NEG
27243: PUSH
27244: EMPTY
27245: LIST
27246: LIST
27247: PUSH
27248: LD_INT 1
27250: PUSH
27251: LD_INT 0
27253: PUSH
27254: EMPTY
27255: LIST
27256: LIST
27257: PUSH
27258: LD_INT 1
27260: PUSH
27261: LD_INT 1
27263: PUSH
27264: EMPTY
27265: LIST
27266: LIST
27267: PUSH
27268: LD_INT 0
27270: PUSH
27271: LD_INT 1
27273: PUSH
27274: EMPTY
27275: LIST
27276: LIST
27277: PUSH
27278: LD_INT 1
27280: NEG
27281: PUSH
27282: LD_INT 0
27284: PUSH
27285: EMPTY
27286: LIST
27287: LIST
27288: PUSH
27289: LD_INT 1
27291: NEG
27292: PUSH
27293: LD_INT 1
27295: NEG
27296: PUSH
27297: EMPTY
27298: LIST
27299: LIST
27300: PUSH
27301: LD_INT 1
27303: NEG
27304: PUSH
27305: LD_INT 2
27307: NEG
27308: PUSH
27309: EMPTY
27310: LIST
27311: LIST
27312: PUSH
27313: LD_INT 0
27315: PUSH
27316: LD_INT 2
27318: NEG
27319: PUSH
27320: EMPTY
27321: LIST
27322: LIST
27323: PUSH
27324: LD_INT 1
27326: PUSH
27327: LD_INT 1
27329: NEG
27330: PUSH
27331: EMPTY
27332: LIST
27333: LIST
27334: PUSH
27335: LD_INT 2
27337: PUSH
27338: LD_INT 0
27340: PUSH
27341: EMPTY
27342: LIST
27343: LIST
27344: PUSH
27345: LD_INT 2
27347: PUSH
27348: LD_INT 1
27350: PUSH
27351: EMPTY
27352: LIST
27353: LIST
27354: PUSH
27355: LD_INT 2
27357: PUSH
27358: LD_INT 2
27360: PUSH
27361: EMPTY
27362: LIST
27363: LIST
27364: PUSH
27365: LD_INT 1
27367: PUSH
27368: LD_INT 2
27370: PUSH
27371: EMPTY
27372: LIST
27373: LIST
27374: PUSH
27375: LD_INT 0
27377: PUSH
27378: LD_INT 2
27380: PUSH
27381: EMPTY
27382: LIST
27383: LIST
27384: PUSH
27385: LD_INT 1
27387: NEG
27388: PUSH
27389: LD_INT 1
27391: PUSH
27392: EMPTY
27393: LIST
27394: LIST
27395: PUSH
27396: LD_INT 2
27398: NEG
27399: PUSH
27400: LD_INT 0
27402: PUSH
27403: EMPTY
27404: LIST
27405: LIST
27406: PUSH
27407: LD_INT 2
27409: NEG
27410: PUSH
27411: LD_INT 1
27413: NEG
27414: PUSH
27415: EMPTY
27416: LIST
27417: LIST
27418: PUSH
27419: LD_INT 2
27421: NEG
27422: PUSH
27423: LD_INT 2
27425: NEG
27426: PUSH
27427: EMPTY
27428: LIST
27429: LIST
27430: PUSH
27431: EMPTY
27432: LIST
27433: LIST
27434: LIST
27435: LIST
27436: LIST
27437: LIST
27438: LIST
27439: LIST
27440: LIST
27441: LIST
27442: LIST
27443: LIST
27444: LIST
27445: LIST
27446: LIST
27447: LIST
27448: LIST
27449: LIST
27450: LIST
27451: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
27452: LD_ADDR_VAR 0 23
27456: PUSH
27457: LD_INT 0
27459: PUSH
27460: LD_INT 0
27462: PUSH
27463: EMPTY
27464: LIST
27465: LIST
27466: PUSH
27467: LD_INT 0
27469: PUSH
27470: LD_INT 1
27472: NEG
27473: PUSH
27474: EMPTY
27475: LIST
27476: LIST
27477: PUSH
27478: LD_INT 1
27480: PUSH
27481: LD_INT 0
27483: PUSH
27484: EMPTY
27485: LIST
27486: LIST
27487: PUSH
27488: LD_INT 1
27490: PUSH
27491: LD_INT 1
27493: PUSH
27494: EMPTY
27495: LIST
27496: LIST
27497: PUSH
27498: LD_INT 0
27500: PUSH
27501: LD_INT 1
27503: PUSH
27504: EMPTY
27505: LIST
27506: LIST
27507: PUSH
27508: LD_INT 1
27510: NEG
27511: PUSH
27512: LD_INT 0
27514: PUSH
27515: EMPTY
27516: LIST
27517: LIST
27518: PUSH
27519: LD_INT 1
27521: NEG
27522: PUSH
27523: LD_INT 1
27525: NEG
27526: PUSH
27527: EMPTY
27528: LIST
27529: LIST
27530: PUSH
27531: LD_INT 1
27533: NEG
27534: PUSH
27535: LD_INT 2
27537: NEG
27538: PUSH
27539: EMPTY
27540: LIST
27541: LIST
27542: PUSH
27543: LD_INT 0
27545: PUSH
27546: LD_INT 2
27548: NEG
27549: PUSH
27550: EMPTY
27551: LIST
27552: LIST
27553: PUSH
27554: LD_INT 1
27556: PUSH
27557: LD_INT 1
27559: NEG
27560: PUSH
27561: EMPTY
27562: LIST
27563: LIST
27564: PUSH
27565: LD_INT 2
27567: PUSH
27568: LD_INT 0
27570: PUSH
27571: EMPTY
27572: LIST
27573: LIST
27574: PUSH
27575: LD_INT 2
27577: PUSH
27578: LD_INT 1
27580: PUSH
27581: EMPTY
27582: LIST
27583: LIST
27584: PUSH
27585: LD_INT 2
27587: PUSH
27588: LD_INT 2
27590: PUSH
27591: EMPTY
27592: LIST
27593: LIST
27594: PUSH
27595: LD_INT 1
27597: PUSH
27598: LD_INT 2
27600: PUSH
27601: EMPTY
27602: LIST
27603: LIST
27604: PUSH
27605: LD_INT 0
27607: PUSH
27608: LD_INT 2
27610: PUSH
27611: EMPTY
27612: LIST
27613: LIST
27614: PUSH
27615: LD_INT 1
27617: NEG
27618: PUSH
27619: LD_INT 1
27621: PUSH
27622: EMPTY
27623: LIST
27624: LIST
27625: PUSH
27626: LD_INT 2
27628: NEG
27629: PUSH
27630: LD_INT 0
27632: PUSH
27633: EMPTY
27634: LIST
27635: LIST
27636: PUSH
27637: LD_INT 2
27639: NEG
27640: PUSH
27641: LD_INT 1
27643: NEG
27644: PUSH
27645: EMPTY
27646: LIST
27647: LIST
27648: PUSH
27649: LD_INT 2
27651: NEG
27652: PUSH
27653: LD_INT 2
27655: NEG
27656: PUSH
27657: EMPTY
27658: LIST
27659: LIST
27660: PUSH
27661: LD_INT 2
27663: NEG
27664: PUSH
27665: LD_INT 3
27667: NEG
27668: PUSH
27669: EMPTY
27670: LIST
27671: LIST
27672: PUSH
27673: LD_INT 1
27675: NEG
27676: PUSH
27677: LD_INT 3
27679: NEG
27680: PUSH
27681: EMPTY
27682: LIST
27683: LIST
27684: PUSH
27685: LD_INT 1
27687: PUSH
27688: LD_INT 2
27690: NEG
27691: PUSH
27692: EMPTY
27693: LIST
27694: LIST
27695: PUSH
27696: LD_INT 2
27698: PUSH
27699: LD_INT 1
27701: NEG
27702: PUSH
27703: EMPTY
27704: LIST
27705: LIST
27706: PUSH
27707: EMPTY
27708: LIST
27709: LIST
27710: LIST
27711: LIST
27712: LIST
27713: LIST
27714: LIST
27715: LIST
27716: LIST
27717: LIST
27718: LIST
27719: LIST
27720: LIST
27721: LIST
27722: LIST
27723: LIST
27724: LIST
27725: LIST
27726: LIST
27727: LIST
27728: LIST
27729: LIST
27730: LIST
27731: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
27732: LD_ADDR_VAR 0 24
27736: PUSH
27737: LD_INT 0
27739: PUSH
27740: LD_INT 0
27742: PUSH
27743: EMPTY
27744: LIST
27745: LIST
27746: PUSH
27747: LD_INT 0
27749: PUSH
27750: LD_INT 1
27752: NEG
27753: PUSH
27754: EMPTY
27755: LIST
27756: LIST
27757: PUSH
27758: LD_INT 1
27760: PUSH
27761: LD_INT 0
27763: PUSH
27764: EMPTY
27765: LIST
27766: LIST
27767: PUSH
27768: LD_INT 1
27770: PUSH
27771: LD_INT 1
27773: PUSH
27774: EMPTY
27775: LIST
27776: LIST
27777: PUSH
27778: LD_INT 0
27780: PUSH
27781: LD_INT 1
27783: PUSH
27784: EMPTY
27785: LIST
27786: LIST
27787: PUSH
27788: LD_INT 1
27790: NEG
27791: PUSH
27792: LD_INT 0
27794: PUSH
27795: EMPTY
27796: LIST
27797: LIST
27798: PUSH
27799: LD_INT 1
27801: NEG
27802: PUSH
27803: LD_INT 1
27805: NEG
27806: PUSH
27807: EMPTY
27808: LIST
27809: LIST
27810: PUSH
27811: LD_INT 1
27813: NEG
27814: PUSH
27815: LD_INT 2
27817: NEG
27818: PUSH
27819: EMPTY
27820: LIST
27821: LIST
27822: PUSH
27823: LD_INT 0
27825: PUSH
27826: LD_INT 2
27828: NEG
27829: PUSH
27830: EMPTY
27831: LIST
27832: LIST
27833: PUSH
27834: LD_INT 1
27836: PUSH
27837: LD_INT 1
27839: NEG
27840: PUSH
27841: EMPTY
27842: LIST
27843: LIST
27844: PUSH
27845: LD_INT 2
27847: PUSH
27848: LD_INT 0
27850: PUSH
27851: EMPTY
27852: LIST
27853: LIST
27854: PUSH
27855: LD_INT 2
27857: PUSH
27858: LD_INT 1
27860: PUSH
27861: EMPTY
27862: LIST
27863: LIST
27864: PUSH
27865: LD_INT 2
27867: PUSH
27868: LD_INT 2
27870: PUSH
27871: EMPTY
27872: LIST
27873: LIST
27874: PUSH
27875: LD_INT 1
27877: PUSH
27878: LD_INT 2
27880: PUSH
27881: EMPTY
27882: LIST
27883: LIST
27884: PUSH
27885: LD_INT 0
27887: PUSH
27888: LD_INT 2
27890: PUSH
27891: EMPTY
27892: LIST
27893: LIST
27894: PUSH
27895: LD_INT 1
27897: NEG
27898: PUSH
27899: LD_INT 1
27901: PUSH
27902: EMPTY
27903: LIST
27904: LIST
27905: PUSH
27906: LD_INT 2
27908: NEG
27909: PUSH
27910: LD_INT 0
27912: PUSH
27913: EMPTY
27914: LIST
27915: LIST
27916: PUSH
27917: LD_INT 2
27919: NEG
27920: PUSH
27921: LD_INT 1
27923: NEG
27924: PUSH
27925: EMPTY
27926: LIST
27927: LIST
27928: PUSH
27929: LD_INT 2
27931: NEG
27932: PUSH
27933: LD_INT 2
27935: NEG
27936: PUSH
27937: EMPTY
27938: LIST
27939: LIST
27940: PUSH
27941: LD_INT 1
27943: PUSH
27944: LD_INT 2
27946: NEG
27947: PUSH
27948: EMPTY
27949: LIST
27950: LIST
27951: PUSH
27952: LD_INT 2
27954: PUSH
27955: LD_INT 1
27957: NEG
27958: PUSH
27959: EMPTY
27960: LIST
27961: LIST
27962: PUSH
27963: LD_INT 3
27965: PUSH
27966: LD_INT 1
27968: PUSH
27969: EMPTY
27970: LIST
27971: LIST
27972: PUSH
27973: LD_INT 3
27975: PUSH
27976: LD_INT 2
27978: PUSH
27979: EMPTY
27980: LIST
27981: LIST
27982: PUSH
27983: EMPTY
27984: LIST
27985: LIST
27986: LIST
27987: LIST
27988: LIST
27989: LIST
27990: LIST
27991: LIST
27992: LIST
27993: LIST
27994: LIST
27995: LIST
27996: LIST
27997: LIST
27998: LIST
27999: LIST
28000: LIST
28001: LIST
28002: LIST
28003: LIST
28004: LIST
28005: LIST
28006: LIST
28007: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
28008: LD_ADDR_VAR 0 25
28012: PUSH
28013: LD_INT 0
28015: PUSH
28016: LD_INT 0
28018: PUSH
28019: EMPTY
28020: LIST
28021: LIST
28022: PUSH
28023: LD_INT 0
28025: PUSH
28026: LD_INT 1
28028: NEG
28029: PUSH
28030: EMPTY
28031: LIST
28032: LIST
28033: PUSH
28034: LD_INT 1
28036: PUSH
28037: LD_INT 0
28039: PUSH
28040: EMPTY
28041: LIST
28042: LIST
28043: PUSH
28044: LD_INT 1
28046: PUSH
28047: LD_INT 1
28049: PUSH
28050: EMPTY
28051: LIST
28052: LIST
28053: PUSH
28054: LD_INT 0
28056: PUSH
28057: LD_INT 1
28059: PUSH
28060: EMPTY
28061: LIST
28062: LIST
28063: PUSH
28064: LD_INT 1
28066: NEG
28067: PUSH
28068: LD_INT 0
28070: PUSH
28071: EMPTY
28072: LIST
28073: LIST
28074: PUSH
28075: LD_INT 1
28077: NEG
28078: PUSH
28079: LD_INT 1
28081: NEG
28082: PUSH
28083: EMPTY
28084: LIST
28085: LIST
28086: PUSH
28087: LD_INT 1
28089: NEG
28090: PUSH
28091: LD_INT 2
28093: NEG
28094: PUSH
28095: EMPTY
28096: LIST
28097: LIST
28098: PUSH
28099: LD_INT 0
28101: PUSH
28102: LD_INT 2
28104: NEG
28105: PUSH
28106: EMPTY
28107: LIST
28108: LIST
28109: PUSH
28110: LD_INT 1
28112: PUSH
28113: LD_INT 1
28115: NEG
28116: PUSH
28117: EMPTY
28118: LIST
28119: LIST
28120: PUSH
28121: LD_INT 2
28123: PUSH
28124: LD_INT 0
28126: PUSH
28127: EMPTY
28128: LIST
28129: LIST
28130: PUSH
28131: LD_INT 2
28133: PUSH
28134: LD_INT 1
28136: PUSH
28137: EMPTY
28138: LIST
28139: LIST
28140: PUSH
28141: LD_INT 2
28143: PUSH
28144: LD_INT 2
28146: PUSH
28147: EMPTY
28148: LIST
28149: LIST
28150: PUSH
28151: LD_INT 1
28153: PUSH
28154: LD_INT 2
28156: PUSH
28157: EMPTY
28158: LIST
28159: LIST
28160: PUSH
28161: LD_INT 0
28163: PUSH
28164: LD_INT 2
28166: PUSH
28167: EMPTY
28168: LIST
28169: LIST
28170: PUSH
28171: LD_INT 1
28173: NEG
28174: PUSH
28175: LD_INT 1
28177: PUSH
28178: EMPTY
28179: LIST
28180: LIST
28181: PUSH
28182: LD_INT 2
28184: NEG
28185: PUSH
28186: LD_INT 0
28188: PUSH
28189: EMPTY
28190: LIST
28191: LIST
28192: PUSH
28193: LD_INT 2
28195: NEG
28196: PUSH
28197: LD_INT 1
28199: NEG
28200: PUSH
28201: EMPTY
28202: LIST
28203: LIST
28204: PUSH
28205: LD_INT 2
28207: NEG
28208: PUSH
28209: LD_INT 2
28211: NEG
28212: PUSH
28213: EMPTY
28214: LIST
28215: LIST
28216: PUSH
28217: LD_INT 3
28219: PUSH
28220: LD_INT 1
28222: PUSH
28223: EMPTY
28224: LIST
28225: LIST
28226: PUSH
28227: LD_INT 3
28229: PUSH
28230: LD_INT 2
28232: PUSH
28233: EMPTY
28234: LIST
28235: LIST
28236: PUSH
28237: LD_INT 2
28239: PUSH
28240: LD_INT 3
28242: PUSH
28243: EMPTY
28244: LIST
28245: LIST
28246: PUSH
28247: LD_INT 1
28249: PUSH
28250: LD_INT 3
28252: PUSH
28253: EMPTY
28254: LIST
28255: LIST
28256: PUSH
28257: EMPTY
28258: LIST
28259: LIST
28260: LIST
28261: LIST
28262: LIST
28263: LIST
28264: LIST
28265: LIST
28266: LIST
28267: LIST
28268: LIST
28269: LIST
28270: LIST
28271: LIST
28272: LIST
28273: LIST
28274: LIST
28275: LIST
28276: LIST
28277: LIST
28278: LIST
28279: LIST
28280: LIST
28281: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
28282: LD_ADDR_VAR 0 26
28286: PUSH
28287: LD_INT 0
28289: PUSH
28290: LD_INT 0
28292: PUSH
28293: EMPTY
28294: LIST
28295: LIST
28296: PUSH
28297: LD_INT 0
28299: PUSH
28300: LD_INT 1
28302: NEG
28303: PUSH
28304: EMPTY
28305: LIST
28306: LIST
28307: PUSH
28308: LD_INT 1
28310: PUSH
28311: LD_INT 0
28313: PUSH
28314: EMPTY
28315: LIST
28316: LIST
28317: PUSH
28318: LD_INT 1
28320: PUSH
28321: LD_INT 1
28323: PUSH
28324: EMPTY
28325: LIST
28326: LIST
28327: PUSH
28328: LD_INT 0
28330: PUSH
28331: LD_INT 1
28333: PUSH
28334: EMPTY
28335: LIST
28336: LIST
28337: PUSH
28338: LD_INT 1
28340: NEG
28341: PUSH
28342: LD_INT 0
28344: PUSH
28345: EMPTY
28346: LIST
28347: LIST
28348: PUSH
28349: LD_INT 1
28351: NEG
28352: PUSH
28353: LD_INT 1
28355: NEG
28356: PUSH
28357: EMPTY
28358: LIST
28359: LIST
28360: PUSH
28361: LD_INT 1
28363: NEG
28364: PUSH
28365: LD_INT 2
28367: NEG
28368: PUSH
28369: EMPTY
28370: LIST
28371: LIST
28372: PUSH
28373: LD_INT 0
28375: PUSH
28376: LD_INT 2
28378: NEG
28379: PUSH
28380: EMPTY
28381: LIST
28382: LIST
28383: PUSH
28384: LD_INT 1
28386: PUSH
28387: LD_INT 1
28389: NEG
28390: PUSH
28391: EMPTY
28392: LIST
28393: LIST
28394: PUSH
28395: LD_INT 2
28397: PUSH
28398: LD_INT 0
28400: PUSH
28401: EMPTY
28402: LIST
28403: LIST
28404: PUSH
28405: LD_INT 2
28407: PUSH
28408: LD_INT 1
28410: PUSH
28411: EMPTY
28412: LIST
28413: LIST
28414: PUSH
28415: LD_INT 2
28417: PUSH
28418: LD_INT 2
28420: PUSH
28421: EMPTY
28422: LIST
28423: LIST
28424: PUSH
28425: LD_INT 1
28427: PUSH
28428: LD_INT 2
28430: PUSH
28431: EMPTY
28432: LIST
28433: LIST
28434: PUSH
28435: LD_INT 0
28437: PUSH
28438: LD_INT 2
28440: PUSH
28441: EMPTY
28442: LIST
28443: LIST
28444: PUSH
28445: LD_INT 1
28447: NEG
28448: PUSH
28449: LD_INT 1
28451: PUSH
28452: EMPTY
28453: LIST
28454: LIST
28455: PUSH
28456: LD_INT 2
28458: NEG
28459: PUSH
28460: LD_INT 0
28462: PUSH
28463: EMPTY
28464: LIST
28465: LIST
28466: PUSH
28467: LD_INT 2
28469: NEG
28470: PUSH
28471: LD_INT 1
28473: NEG
28474: PUSH
28475: EMPTY
28476: LIST
28477: LIST
28478: PUSH
28479: LD_INT 2
28481: NEG
28482: PUSH
28483: LD_INT 2
28485: NEG
28486: PUSH
28487: EMPTY
28488: LIST
28489: LIST
28490: PUSH
28491: LD_INT 2
28493: PUSH
28494: LD_INT 3
28496: PUSH
28497: EMPTY
28498: LIST
28499: LIST
28500: PUSH
28501: LD_INT 1
28503: PUSH
28504: LD_INT 3
28506: PUSH
28507: EMPTY
28508: LIST
28509: LIST
28510: PUSH
28511: LD_INT 1
28513: NEG
28514: PUSH
28515: LD_INT 2
28517: PUSH
28518: EMPTY
28519: LIST
28520: LIST
28521: PUSH
28522: LD_INT 2
28524: NEG
28525: PUSH
28526: LD_INT 1
28528: PUSH
28529: EMPTY
28530: LIST
28531: LIST
28532: PUSH
28533: EMPTY
28534: LIST
28535: LIST
28536: LIST
28537: LIST
28538: LIST
28539: LIST
28540: LIST
28541: LIST
28542: LIST
28543: LIST
28544: LIST
28545: LIST
28546: LIST
28547: LIST
28548: LIST
28549: LIST
28550: LIST
28551: LIST
28552: LIST
28553: LIST
28554: LIST
28555: LIST
28556: LIST
28557: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
28558: LD_ADDR_VAR 0 27
28562: PUSH
28563: LD_INT 0
28565: PUSH
28566: LD_INT 0
28568: PUSH
28569: EMPTY
28570: LIST
28571: LIST
28572: PUSH
28573: LD_INT 0
28575: PUSH
28576: LD_INT 1
28578: NEG
28579: PUSH
28580: EMPTY
28581: LIST
28582: LIST
28583: PUSH
28584: LD_INT 1
28586: PUSH
28587: LD_INT 0
28589: PUSH
28590: EMPTY
28591: LIST
28592: LIST
28593: PUSH
28594: LD_INT 1
28596: PUSH
28597: LD_INT 1
28599: PUSH
28600: EMPTY
28601: LIST
28602: LIST
28603: PUSH
28604: LD_INT 0
28606: PUSH
28607: LD_INT 1
28609: PUSH
28610: EMPTY
28611: LIST
28612: LIST
28613: PUSH
28614: LD_INT 1
28616: NEG
28617: PUSH
28618: LD_INT 0
28620: PUSH
28621: EMPTY
28622: LIST
28623: LIST
28624: PUSH
28625: LD_INT 1
28627: NEG
28628: PUSH
28629: LD_INT 1
28631: NEG
28632: PUSH
28633: EMPTY
28634: LIST
28635: LIST
28636: PUSH
28637: LD_INT 1
28639: NEG
28640: PUSH
28641: LD_INT 2
28643: NEG
28644: PUSH
28645: EMPTY
28646: LIST
28647: LIST
28648: PUSH
28649: LD_INT 0
28651: PUSH
28652: LD_INT 2
28654: NEG
28655: PUSH
28656: EMPTY
28657: LIST
28658: LIST
28659: PUSH
28660: LD_INT 1
28662: PUSH
28663: LD_INT 1
28665: NEG
28666: PUSH
28667: EMPTY
28668: LIST
28669: LIST
28670: PUSH
28671: LD_INT 2
28673: PUSH
28674: LD_INT 0
28676: PUSH
28677: EMPTY
28678: LIST
28679: LIST
28680: PUSH
28681: LD_INT 2
28683: PUSH
28684: LD_INT 1
28686: PUSH
28687: EMPTY
28688: LIST
28689: LIST
28690: PUSH
28691: LD_INT 2
28693: PUSH
28694: LD_INT 2
28696: PUSH
28697: EMPTY
28698: LIST
28699: LIST
28700: PUSH
28701: LD_INT 1
28703: PUSH
28704: LD_INT 2
28706: PUSH
28707: EMPTY
28708: LIST
28709: LIST
28710: PUSH
28711: LD_INT 0
28713: PUSH
28714: LD_INT 2
28716: PUSH
28717: EMPTY
28718: LIST
28719: LIST
28720: PUSH
28721: LD_INT 1
28723: NEG
28724: PUSH
28725: LD_INT 1
28727: PUSH
28728: EMPTY
28729: LIST
28730: LIST
28731: PUSH
28732: LD_INT 2
28734: NEG
28735: PUSH
28736: LD_INT 0
28738: PUSH
28739: EMPTY
28740: LIST
28741: LIST
28742: PUSH
28743: LD_INT 2
28745: NEG
28746: PUSH
28747: LD_INT 1
28749: NEG
28750: PUSH
28751: EMPTY
28752: LIST
28753: LIST
28754: PUSH
28755: LD_INT 2
28757: NEG
28758: PUSH
28759: LD_INT 2
28761: NEG
28762: PUSH
28763: EMPTY
28764: LIST
28765: LIST
28766: PUSH
28767: LD_INT 1
28769: NEG
28770: PUSH
28771: LD_INT 2
28773: PUSH
28774: EMPTY
28775: LIST
28776: LIST
28777: PUSH
28778: LD_INT 2
28780: NEG
28781: PUSH
28782: LD_INT 1
28784: PUSH
28785: EMPTY
28786: LIST
28787: LIST
28788: PUSH
28789: LD_INT 3
28791: NEG
28792: PUSH
28793: LD_INT 1
28795: NEG
28796: PUSH
28797: EMPTY
28798: LIST
28799: LIST
28800: PUSH
28801: LD_INT 3
28803: NEG
28804: PUSH
28805: LD_INT 2
28807: NEG
28808: PUSH
28809: EMPTY
28810: LIST
28811: LIST
28812: PUSH
28813: EMPTY
28814: LIST
28815: LIST
28816: LIST
28817: LIST
28818: LIST
28819: LIST
28820: LIST
28821: LIST
28822: LIST
28823: LIST
28824: LIST
28825: LIST
28826: LIST
28827: LIST
28828: LIST
28829: LIST
28830: LIST
28831: LIST
28832: LIST
28833: LIST
28834: LIST
28835: LIST
28836: LIST
28837: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
28838: LD_ADDR_VAR 0 28
28842: PUSH
28843: LD_INT 0
28845: PUSH
28846: LD_INT 0
28848: PUSH
28849: EMPTY
28850: LIST
28851: LIST
28852: PUSH
28853: LD_INT 0
28855: PUSH
28856: LD_INT 1
28858: NEG
28859: PUSH
28860: EMPTY
28861: LIST
28862: LIST
28863: PUSH
28864: LD_INT 1
28866: PUSH
28867: LD_INT 0
28869: PUSH
28870: EMPTY
28871: LIST
28872: LIST
28873: PUSH
28874: LD_INT 1
28876: PUSH
28877: LD_INT 1
28879: PUSH
28880: EMPTY
28881: LIST
28882: LIST
28883: PUSH
28884: LD_INT 0
28886: PUSH
28887: LD_INT 1
28889: PUSH
28890: EMPTY
28891: LIST
28892: LIST
28893: PUSH
28894: LD_INT 1
28896: NEG
28897: PUSH
28898: LD_INT 0
28900: PUSH
28901: EMPTY
28902: LIST
28903: LIST
28904: PUSH
28905: LD_INT 1
28907: NEG
28908: PUSH
28909: LD_INT 1
28911: NEG
28912: PUSH
28913: EMPTY
28914: LIST
28915: LIST
28916: PUSH
28917: LD_INT 1
28919: NEG
28920: PUSH
28921: LD_INT 2
28923: NEG
28924: PUSH
28925: EMPTY
28926: LIST
28927: LIST
28928: PUSH
28929: LD_INT 0
28931: PUSH
28932: LD_INT 2
28934: NEG
28935: PUSH
28936: EMPTY
28937: LIST
28938: LIST
28939: PUSH
28940: LD_INT 1
28942: PUSH
28943: LD_INT 1
28945: NEG
28946: PUSH
28947: EMPTY
28948: LIST
28949: LIST
28950: PUSH
28951: LD_INT 2
28953: PUSH
28954: LD_INT 0
28956: PUSH
28957: EMPTY
28958: LIST
28959: LIST
28960: PUSH
28961: LD_INT 2
28963: PUSH
28964: LD_INT 1
28966: PUSH
28967: EMPTY
28968: LIST
28969: LIST
28970: PUSH
28971: LD_INT 2
28973: PUSH
28974: LD_INT 2
28976: PUSH
28977: EMPTY
28978: LIST
28979: LIST
28980: PUSH
28981: LD_INT 1
28983: PUSH
28984: LD_INT 2
28986: PUSH
28987: EMPTY
28988: LIST
28989: LIST
28990: PUSH
28991: LD_INT 0
28993: PUSH
28994: LD_INT 2
28996: PUSH
28997: EMPTY
28998: LIST
28999: LIST
29000: PUSH
29001: LD_INT 1
29003: NEG
29004: PUSH
29005: LD_INT 1
29007: PUSH
29008: EMPTY
29009: LIST
29010: LIST
29011: PUSH
29012: LD_INT 2
29014: NEG
29015: PUSH
29016: LD_INT 0
29018: PUSH
29019: EMPTY
29020: LIST
29021: LIST
29022: PUSH
29023: LD_INT 2
29025: NEG
29026: PUSH
29027: LD_INT 1
29029: NEG
29030: PUSH
29031: EMPTY
29032: LIST
29033: LIST
29034: PUSH
29035: LD_INT 2
29037: NEG
29038: PUSH
29039: LD_INT 2
29041: NEG
29042: PUSH
29043: EMPTY
29044: LIST
29045: LIST
29046: PUSH
29047: LD_INT 2
29049: NEG
29050: PUSH
29051: LD_INT 3
29053: NEG
29054: PUSH
29055: EMPTY
29056: LIST
29057: LIST
29058: PUSH
29059: LD_INT 1
29061: NEG
29062: PUSH
29063: LD_INT 3
29065: NEG
29066: PUSH
29067: EMPTY
29068: LIST
29069: LIST
29070: PUSH
29071: LD_INT 3
29073: NEG
29074: PUSH
29075: LD_INT 1
29077: NEG
29078: PUSH
29079: EMPTY
29080: LIST
29081: LIST
29082: PUSH
29083: LD_INT 3
29085: NEG
29086: PUSH
29087: LD_INT 2
29089: NEG
29090: PUSH
29091: EMPTY
29092: LIST
29093: LIST
29094: PUSH
29095: EMPTY
29096: LIST
29097: LIST
29098: LIST
29099: LIST
29100: LIST
29101: LIST
29102: LIST
29103: LIST
29104: LIST
29105: LIST
29106: LIST
29107: LIST
29108: LIST
29109: LIST
29110: LIST
29111: LIST
29112: LIST
29113: LIST
29114: LIST
29115: LIST
29116: LIST
29117: LIST
29118: LIST
29119: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
29120: LD_ADDR_VAR 0 29
29124: PUSH
29125: LD_INT 0
29127: PUSH
29128: LD_INT 0
29130: PUSH
29131: EMPTY
29132: LIST
29133: LIST
29134: PUSH
29135: LD_INT 0
29137: PUSH
29138: LD_INT 1
29140: NEG
29141: PUSH
29142: EMPTY
29143: LIST
29144: LIST
29145: PUSH
29146: LD_INT 1
29148: PUSH
29149: LD_INT 0
29151: PUSH
29152: EMPTY
29153: LIST
29154: LIST
29155: PUSH
29156: LD_INT 1
29158: PUSH
29159: LD_INT 1
29161: PUSH
29162: EMPTY
29163: LIST
29164: LIST
29165: PUSH
29166: LD_INT 0
29168: PUSH
29169: LD_INT 1
29171: PUSH
29172: EMPTY
29173: LIST
29174: LIST
29175: PUSH
29176: LD_INT 1
29178: NEG
29179: PUSH
29180: LD_INT 0
29182: PUSH
29183: EMPTY
29184: LIST
29185: LIST
29186: PUSH
29187: LD_INT 1
29189: NEG
29190: PUSH
29191: LD_INT 1
29193: NEG
29194: PUSH
29195: EMPTY
29196: LIST
29197: LIST
29198: PUSH
29199: LD_INT 1
29201: NEG
29202: PUSH
29203: LD_INT 2
29205: NEG
29206: PUSH
29207: EMPTY
29208: LIST
29209: LIST
29210: PUSH
29211: LD_INT 0
29213: PUSH
29214: LD_INT 2
29216: NEG
29217: PUSH
29218: EMPTY
29219: LIST
29220: LIST
29221: PUSH
29222: LD_INT 1
29224: PUSH
29225: LD_INT 1
29227: NEG
29228: PUSH
29229: EMPTY
29230: LIST
29231: LIST
29232: PUSH
29233: LD_INT 2
29235: PUSH
29236: LD_INT 0
29238: PUSH
29239: EMPTY
29240: LIST
29241: LIST
29242: PUSH
29243: LD_INT 2
29245: PUSH
29246: LD_INT 1
29248: PUSH
29249: EMPTY
29250: LIST
29251: LIST
29252: PUSH
29253: LD_INT 1
29255: PUSH
29256: LD_INT 2
29258: PUSH
29259: EMPTY
29260: LIST
29261: LIST
29262: PUSH
29263: LD_INT 0
29265: PUSH
29266: LD_INT 2
29268: PUSH
29269: EMPTY
29270: LIST
29271: LIST
29272: PUSH
29273: LD_INT 1
29275: NEG
29276: PUSH
29277: LD_INT 1
29279: PUSH
29280: EMPTY
29281: LIST
29282: LIST
29283: PUSH
29284: LD_INT 2
29286: NEG
29287: PUSH
29288: LD_INT 1
29290: NEG
29291: PUSH
29292: EMPTY
29293: LIST
29294: LIST
29295: PUSH
29296: LD_INT 2
29298: NEG
29299: PUSH
29300: LD_INT 2
29302: NEG
29303: PUSH
29304: EMPTY
29305: LIST
29306: LIST
29307: PUSH
29308: LD_INT 2
29310: NEG
29311: PUSH
29312: LD_INT 3
29314: NEG
29315: PUSH
29316: EMPTY
29317: LIST
29318: LIST
29319: PUSH
29320: LD_INT 2
29322: PUSH
29323: LD_INT 1
29325: NEG
29326: PUSH
29327: EMPTY
29328: LIST
29329: LIST
29330: PUSH
29331: LD_INT 3
29333: PUSH
29334: LD_INT 1
29336: PUSH
29337: EMPTY
29338: LIST
29339: LIST
29340: PUSH
29341: LD_INT 1
29343: PUSH
29344: LD_INT 3
29346: PUSH
29347: EMPTY
29348: LIST
29349: LIST
29350: PUSH
29351: LD_INT 1
29353: NEG
29354: PUSH
29355: LD_INT 2
29357: PUSH
29358: EMPTY
29359: LIST
29360: LIST
29361: PUSH
29362: LD_INT 3
29364: NEG
29365: PUSH
29366: LD_INT 2
29368: NEG
29369: PUSH
29370: EMPTY
29371: LIST
29372: LIST
29373: PUSH
29374: EMPTY
29375: LIST
29376: LIST
29377: LIST
29378: LIST
29379: LIST
29380: LIST
29381: LIST
29382: LIST
29383: LIST
29384: LIST
29385: LIST
29386: LIST
29387: LIST
29388: LIST
29389: LIST
29390: LIST
29391: LIST
29392: LIST
29393: LIST
29394: LIST
29395: LIST
29396: LIST
29397: LIST
29398: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
29399: LD_ADDR_VAR 0 30
29403: PUSH
29404: LD_INT 0
29406: PUSH
29407: LD_INT 0
29409: PUSH
29410: EMPTY
29411: LIST
29412: LIST
29413: PUSH
29414: LD_INT 0
29416: PUSH
29417: LD_INT 1
29419: NEG
29420: PUSH
29421: EMPTY
29422: LIST
29423: LIST
29424: PUSH
29425: LD_INT 1
29427: PUSH
29428: LD_INT 0
29430: PUSH
29431: EMPTY
29432: LIST
29433: LIST
29434: PUSH
29435: LD_INT 1
29437: PUSH
29438: LD_INT 1
29440: PUSH
29441: EMPTY
29442: LIST
29443: LIST
29444: PUSH
29445: LD_INT 0
29447: PUSH
29448: LD_INT 1
29450: PUSH
29451: EMPTY
29452: LIST
29453: LIST
29454: PUSH
29455: LD_INT 1
29457: NEG
29458: PUSH
29459: LD_INT 0
29461: PUSH
29462: EMPTY
29463: LIST
29464: LIST
29465: PUSH
29466: LD_INT 1
29468: NEG
29469: PUSH
29470: LD_INT 1
29472: NEG
29473: PUSH
29474: EMPTY
29475: LIST
29476: LIST
29477: PUSH
29478: LD_INT 1
29480: NEG
29481: PUSH
29482: LD_INT 2
29484: NEG
29485: PUSH
29486: EMPTY
29487: LIST
29488: LIST
29489: PUSH
29490: LD_INT 0
29492: PUSH
29493: LD_INT 2
29495: NEG
29496: PUSH
29497: EMPTY
29498: LIST
29499: LIST
29500: PUSH
29501: LD_INT 1
29503: PUSH
29504: LD_INT 1
29506: NEG
29507: PUSH
29508: EMPTY
29509: LIST
29510: LIST
29511: PUSH
29512: LD_INT 2
29514: PUSH
29515: LD_INT 0
29517: PUSH
29518: EMPTY
29519: LIST
29520: LIST
29521: PUSH
29522: LD_INT 2
29524: PUSH
29525: LD_INT 1
29527: PUSH
29528: EMPTY
29529: LIST
29530: LIST
29531: PUSH
29532: LD_INT 2
29534: PUSH
29535: LD_INT 2
29537: PUSH
29538: EMPTY
29539: LIST
29540: LIST
29541: PUSH
29542: LD_INT 1
29544: PUSH
29545: LD_INT 2
29547: PUSH
29548: EMPTY
29549: LIST
29550: LIST
29551: PUSH
29552: LD_INT 1
29554: NEG
29555: PUSH
29556: LD_INT 1
29558: PUSH
29559: EMPTY
29560: LIST
29561: LIST
29562: PUSH
29563: LD_INT 2
29565: NEG
29566: PUSH
29567: LD_INT 0
29569: PUSH
29570: EMPTY
29571: LIST
29572: LIST
29573: PUSH
29574: LD_INT 2
29576: NEG
29577: PUSH
29578: LD_INT 1
29580: NEG
29581: PUSH
29582: EMPTY
29583: LIST
29584: LIST
29585: PUSH
29586: LD_INT 1
29588: NEG
29589: PUSH
29590: LD_INT 3
29592: NEG
29593: PUSH
29594: EMPTY
29595: LIST
29596: LIST
29597: PUSH
29598: LD_INT 1
29600: PUSH
29601: LD_INT 2
29603: NEG
29604: PUSH
29605: EMPTY
29606: LIST
29607: LIST
29608: PUSH
29609: LD_INT 3
29611: PUSH
29612: LD_INT 2
29614: PUSH
29615: EMPTY
29616: LIST
29617: LIST
29618: PUSH
29619: LD_INT 2
29621: PUSH
29622: LD_INT 3
29624: PUSH
29625: EMPTY
29626: LIST
29627: LIST
29628: PUSH
29629: LD_INT 2
29631: NEG
29632: PUSH
29633: LD_INT 1
29635: PUSH
29636: EMPTY
29637: LIST
29638: LIST
29639: PUSH
29640: LD_INT 3
29642: NEG
29643: PUSH
29644: LD_INT 1
29646: NEG
29647: PUSH
29648: EMPTY
29649: LIST
29650: LIST
29651: PUSH
29652: EMPTY
29653: LIST
29654: LIST
29655: LIST
29656: LIST
29657: LIST
29658: LIST
29659: LIST
29660: LIST
29661: LIST
29662: LIST
29663: LIST
29664: LIST
29665: LIST
29666: LIST
29667: LIST
29668: LIST
29669: LIST
29670: LIST
29671: LIST
29672: LIST
29673: LIST
29674: LIST
29675: LIST
29676: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
29677: LD_ADDR_VAR 0 31
29681: PUSH
29682: LD_INT 0
29684: PUSH
29685: LD_INT 0
29687: PUSH
29688: EMPTY
29689: LIST
29690: LIST
29691: PUSH
29692: LD_INT 0
29694: PUSH
29695: LD_INT 1
29697: NEG
29698: PUSH
29699: EMPTY
29700: LIST
29701: LIST
29702: PUSH
29703: LD_INT 1
29705: PUSH
29706: LD_INT 0
29708: PUSH
29709: EMPTY
29710: LIST
29711: LIST
29712: PUSH
29713: LD_INT 1
29715: PUSH
29716: LD_INT 1
29718: PUSH
29719: EMPTY
29720: LIST
29721: LIST
29722: PUSH
29723: LD_INT 0
29725: PUSH
29726: LD_INT 1
29728: PUSH
29729: EMPTY
29730: LIST
29731: LIST
29732: PUSH
29733: LD_INT 1
29735: NEG
29736: PUSH
29737: LD_INT 0
29739: PUSH
29740: EMPTY
29741: LIST
29742: LIST
29743: PUSH
29744: LD_INT 1
29746: NEG
29747: PUSH
29748: LD_INT 1
29750: NEG
29751: PUSH
29752: EMPTY
29753: LIST
29754: LIST
29755: PUSH
29756: LD_INT 1
29758: NEG
29759: PUSH
29760: LD_INT 2
29762: NEG
29763: PUSH
29764: EMPTY
29765: LIST
29766: LIST
29767: PUSH
29768: LD_INT 1
29770: PUSH
29771: LD_INT 1
29773: NEG
29774: PUSH
29775: EMPTY
29776: LIST
29777: LIST
29778: PUSH
29779: LD_INT 2
29781: PUSH
29782: LD_INT 0
29784: PUSH
29785: EMPTY
29786: LIST
29787: LIST
29788: PUSH
29789: LD_INT 2
29791: PUSH
29792: LD_INT 1
29794: PUSH
29795: EMPTY
29796: LIST
29797: LIST
29798: PUSH
29799: LD_INT 2
29801: PUSH
29802: LD_INT 2
29804: PUSH
29805: EMPTY
29806: LIST
29807: LIST
29808: PUSH
29809: LD_INT 1
29811: PUSH
29812: LD_INT 2
29814: PUSH
29815: EMPTY
29816: LIST
29817: LIST
29818: PUSH
29819: LD_INT 0
29821: PUSH
29822: LD_INT 2
29824: PUSH
29825: EMPTY
29826: LIST
29827: LIST
29828: PUSH
29829: LD_INT 1
29831: NEG
29832: PUSH
29833: LD_INT 1
29835: PUSH
29836: EMPTY
29837: LIST
29838: LIST
29839: PUSH
29840: LD_INT 2
29842: NEG
29843: PUSH
29844: LD_INT 1
29846: NEG
29847: PUSH
29848: EMPTY
29849: LIST
29850: LIST
29851: PUSH
29852: LD_INT 2
29854: NEG
29855: PUSH
29856: LD_INT 2
29858: NEG
29859: PUSH
29860: EMPTY
29861: LIST
29862: LIST
29863: PUSH
29864: LD_INT 2
29866: NEG
29867: PUSH
29868: LD_INT 3
29870: NEG
29871: PUSH
29872: EMPTY
29873: LIST
29874: LIST
29875: PUSH
29876: LD_INT 2
29878: PUSH
29879: LD_INT 1
29881: NEG
29882: PUSH
29883: EMPTY
29884: LIST
29885: LIST
29886: PUSH
29887: LD_INT 3
29889: PUSH
29890: LD_INT 1
29892: PUSH
29893: EMPTY
29894: LIST
29895: LIST
29896: PUSH
29897: LD_INT 1
29899: PUSH
29900: LD_INT 3
29902: PUSH
29903: EMPTY
29904: LIST
29905: LIST
29906: PUSH
29907: LD_INT 1
29909: NEG
29910: PUSH
29911: LD_INT 2
29913: PUSH
29914: EMPTY
29915: LIST
29916: LIST
29917: PUSH
29918: LD_INT 3
29920: NEG
29921: PUSH
29922: LD_INT 2
29924: NEG
29925: PUSH
29926: EMPTY
29927: LIST
29928: LIST
29929: PUSH
29930: EMPTY
29931: LIST
29932: LIST
29933: LIST
29934: LIST
29935: LIST
29936: LIST
29937: LIST
29938: LIST
29939: LIST
29940: LIST
29941: LIST
29942: LIST
29943: LIST
29944: LIST
29945: LIST
29946: LIST
29947: LIST
29948: LIST
29949: LIST
29950: LIST
29951: LIST
29952: LIST
29953: LIST
29954: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
29955: LD_ADDR_VAR 0 32
29959: PUSH
29960: LD_INT 0
29962: PUSH
29963: LD_INT 0
29965: PUSH
29966: EMPTY
29967: LIST
29968: LIST
29969: PUSH
29970: LD_INT 0
29972: PUSH
29973: LD_INT 1
29975: NEG
29976: PUSH
29977: EMPTY
29978: LIST
29979: LIST
29980: PUSH
29981: LD_INT 1
29983: PUSH
29984: LD_INT 0
29986: PUSH
29987: EMPTY
29988: LIST
29989: LIST
29990: PUSH
29991: LD_INT 1
29993: PUSH
29994: LD_INT 1
29996: PUSH
29997: EMPTY
29998: LIST
29999: LIST
30000: PUSH
30001: LD_INT 0
30003: PUSH
30004: LD_INT 1
30006: PUSH
30007: EMPTY
30008: LIST
30009: LIST
30010: PUSH
30011: LD_INT 1
30013: NEG
30014: PUSH
30015: LD_INT 0
30017: PUSH
30018: EMPTY
30019: LIST
30020: LIST
30021: PUSH
30022: LD_INT 1
30024: NEG
30025: PUSH
30026: LD_INT 1
30028: NEG
30029: PUSH
30030: EMPTY
30031: LIST
30032: LIST
30033: PUSH
30034: LD_INT 1
30036: NEG
30037: PUSH
30038: LD_INT 2
30040: NEG
30041: PUSH
30042: EMPTY
30043: LIST
30044: LIST
30045: PUSH
30046: LD_INT 0
30048: PUSH
30049: LD_INT 2
30051: NEG
30052: PUSH
30053: EMPTY
30054: LIST
30055: LIST
30056: PUSH
30057: LD_INT 1
30059: PUSH
30060: LD_INT 1
30062: NEG
30063: PUSH
30064: EMPTY
30065: LIST
30066: LIST
30067: PUSH
30068: LD_INT 2
30070: PUSH
30071: LD_INT 1
30073: PUSH
30074: EMPTY
30075: LIST
30076: LIST
30077: PUSH
30078: LD_INT 2
30080: PUSH
30081: LD_INT 2
30083: PUSH
30084: EMPTY
30085: LIST
30086: LIST
30087: PUSH
30088: LD_INT 1
30090: PUSH
30091: LD_INT 2
30093: PUSH
30094: EMPTY
30095: LIST
30096: LIST
30097: PUSH
30098: LD_INT 0
30100: PUSH
30101: LD_INT 2
30103: PUSH
30104: EMPTY
30105: LIST
30106: LIST
30107: PUSH
30108: LD_INT 1
30110: NEG
30111: PUSH
30112: LD_INT 1
30114: PUSH
30115: EMPTY
30116: LIST
30117: LIST
30118: PUSH
30119: LD_INT 2
30121: NEG
30122: PUSH
30123: LD_INT 0
30125: PUSH
30126: EMPTY
30127: LIST
30128: LIST
30129: PUSH
30130: LD_INT 2
30132: NEG
30133: PUSH
30134: LD_INT 1
30136: NEG
30137: PUSH
30138: EMPTY
30139: LIST
30140: LIST
30141: PUSH
30142: LD_INT 1
30144: NEG
30145: PUSH
30146: LD_INT 3
30148: NEG
30149: PUSH
30150: EMPTY
30151: LIST
30152: LIST
30153: PUSH
30154: LD_INT 1
30156: PUSH
30157: LD_INT 2
30159: NEG
30160: PUSH
30161: EMPTY
30162: LIST
30163: LIST
30164: PUSH
30165: LD_INT 3
30167: PUSH
30168: LD_INT 2
30170: PUSH
30171: EMPTY
30172: LIST
30173: LIST
30174: PUSH
30175: LD_INT 2
30177: PUSH
30178: LD_INT 3
30180: PUSH
30181: EMPTY
30182: LIST
30183: LIST
30184: PUSH
30185: LD_INT 2
30187: NEG
30188: PUSH
30189: LD_INT 1
30191: PUSH
30192: EMPTY
30193: LIST
30194: LIST
30195: PUSH
30196: LD_INT 3
30198: NEG
30199: PUSH
30200: LD_INT 1
30202: NEG
30203: PUSH
30204: EMPTY
30205: LIST
30206: LIST
30207: PUSH
30208: EMPTY
30209: LIST
30210: LIST
30211: LIST
30212: LIST
30213: LIST
30214: LIST
30215: LIST
30216: LIST
30217: LIST
30218: LIST
30219: LIST
30220: LIST
30221: LIST
30222: LIST
30223: LIST
30224: LIST
30225: LIST
30226: LIST
30227: LIST
30228: LIST
30229: LIST
30230: LIST
30231: LIST
30232: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
30233: LD_ADDR_VAR 0 33
30237: PUSH
30238: LD_INT 0
30240: PUSH
30241: LD_INT 0
30243: PUSH
30244: EMPTY
30245: LIST
30246: LIST
30247: PUSH
30248: LD_INT 0
30250: PUSH
30251: LD_INT 1
30253: NEG
30254: PUSH
30255: EMPTY
30256: LIST
30257: LIST
30258: PUSH
30259: LD_INT 1
30261: PUSH
30262: LD_INT 0
30264: PUSH
30265: EMPTY
30266: LIST
30267: LIST
30268: PUSH
30269: LD_INT 1
30271: PUSH
30272: LD_INT 1
30274: PUSH
30275: EMPTY
30276: LIST
30277: LIST
30278: PUSH
30279: LD_INT 0
30281: PUSH
30282: LD_INT 1
30284: PUSH
30285: EMPTY
30286: LIST
30287: LIST
30288: PUSH
30289: LD_INT 1
30291: NEG
30292: PUSH
30293: LD_INT 0
30295: PUSH
30296: EMPTY
30297: LIST
30298: LIST
30299: PUSH
30300: LD_INT 1
30302: NEG
30303: PUSH
30304: LD_INT 1
30306: NEG
30307: PUSH
30308: EMPTY
30309: LIST
30310: LIST
30311: PUSH
30312: LD_INT 1
30314: NEG
30315: PUSH
30316: LD_INT 2
30318: NEG
30319: PUSH
30320: EMPTY
30321: LIST
30322: LIST
30323: PUSH
30324: LD_INT 1
30326: PUSH
30327: LD_INT 1
30329: NEG
30330: PUSH
30331: EMPTY
30332: LIST
30333: LIST
30334: PUSH
30335: LD_INT 2
30337: PUSH
30338: LD_INT 0
30340: PUSH
30341: EMPTY
30342: LIST
30343: LIST
30344: PUSH
30345: LD_INT 2
30347: PUSH
30348: LD_INT 1
30350: PUSH
30351: EMPTY
30352: LIST
30353: LIST
30354: PUSH
30355: LD_INT 1
30357: PUSH
30358: LD_INT 2
30360: PUSH
30361: EMPTY
30362: LIST
30363: LIST
30364: PUSH
30365: LD_INT 0
30367: PUSH
30368: LD_INT 2
30370: PUSH
30371: EMPTY
30372: LIST
30373: LIST
30374: PUSH
30375: LD_INT 1
30377: NEG
30378: PUSH
30379: LD_INT 1
30381: PUSH
30382: EMPTY
30383: LIST
30384: LIST
30385: PUSH
30386: LD_INT 2
30388: NEG
30389: PUSH
30390: LD_INT 0
30392: PUSH
30393: EMPTY
30394: LIST
30395: LIST
30396: PUSH
30397: LD_INT 2
30399: NEG
30400: PUSH
30401: LD_INT 1
30403: NEG
30404: PUSH
30405: EMPTY
30406: LIST
30407: LIST
30408: PUSH
30409: LD_INT 2
30411: NEG
30412: PUSH
30413: LD_INT 2
30415: NEG
30416: PUSH
30417: EMPTY
30418: LIST
30419: LIST
30420: PUSH
30421: LD_INT 2
30423: NEG
30424: PUSH
30425: LD_INT 3
30427: NEG
30428: PUSH
30429: EMPTY
30430: LIST
30431: LIST
30432: PUSH
30433: LD_INT 2
30435: PUSH
30436: LD_INT 1
30438: NEG
30439: PUSH
30440: EMPTY
30441: LIST
30442: LIST
30443: PUSH
30444: LD_INT 3
30446: PUSH
30447: LD_INT 1
30449: PUSH
30450: EMPTY
30451: LIST
30452: LIST
30453: PUSH
30454: LD_INT 1
30456: PUSH
30457: LD_INT 3
30459: PUSH
30460: EMPTY
30461: LIST
30462: LIST
30463: PUSH
30464: LD_INT 1
30466: NEG
30467: PUSH
30468: LD_INT 2
30470: PUSH
30471: EMPTY
30472: LIST
30473: LIST
30474: PUSH
30475: LD_INT 3
30477: NEG
30478: PUSH
30479: LD_INT 2
30481: NEG
30482: PUSH
30483: EMPTY
30484: LIST
30485: LIST
30486: PUSH
30487: EMPTY
30488: LIST
30489: LIST
30490: LIST
30491: LIST
30492: LIST
30493: LIST
30494: LIST
30495: LIST
30496: LIST
30497: LIST
30498: LIST
30499: LIST
30500: LIST
30501: LIST
30502: LIST
30503: LIST
30504: LIST
30505: LIST
30506: LIST
30507: LIST
30508: LIST
30509: LIST
30510: LIST
30511: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
30512: LD_ADDR_VAR 0 34
30516: PUSH
30517: LD_INT 0
30519: PUSH
30520: LD_INT 0
30522: PUSH
30523: EMPTY
30524: LIST
30525: LIST
30526: PUSH
30527: LD_INT 0
30529: PUSH
30530: LD_INT 1
30532: NEG
30533: PUSH
30534: EMPTY
30535: LIST
30536: LIST
30537: PUSH
30538: LD_INT 1
30540: PUSH
30541: LD_INT 0
30543: PUSH
30544: EMPTY
30545: LIST
30546: LIST
30547: PUSH
30548: LD_INT 1
30550: PUSH
30551: LD_INT 1
30553: PUSH
30554: EMPTY
30555: LIST
30556: LIST
30557: PUSH
30558: LD_INT 0
30560: PUSH
30561: LD_INT 1
30563: PUSH
30564: EMPTY
30565: LIST
30566: LIST
30567: PUSH
30568: LD_INT 1
30570: NEG
30571: PUSH
30572: LD_INT 0
30574: PUSH
30575: EMPTY
30576: LIST
30577: LIST
30578: PUSH
30579: LD_INT 1
30581: NEG
30582: PUSH
30583: LD_INT 1
30585: NEG
30586: PUSH
30587: EMPTY
30588: LIST
30589: LIST
30590: PUSH
30591: LD_INT 1
30593: NEG
30594: PUSH
30595: LD_INT 2
30597: NEG
30598: PUSH
30599: EMPTY
30600: LIST
30601: LIST
30602: PUSH
30603: LD_INT 0
30605: PUSH
30606: LD_INT 2
30608: NEG
30609: PUSH
30610: EMPTY
30611: LIST
30612: LIST
30613: PUSH
30614: LD_INT 1
30616: PUSH
30617: LD_INT 1
30619: NEG
30620: PUSH
30621: EMPTY
30622: LIST
30623: LIST
30624: PUSH
30625: LD_INT 2
30627: PUSH
30628: LD_INT 1
30630: PUSH
30631: EMPTY
30632: LIST
30633: LIST
30634: PUSH
30635: LD_INT 2
30637: PUSH
30638: LD_INT 2
30640: PUSH
30641: EMPTY
30642: LIST
30643: LIST
30644: PUSH
30645: LD_INT 1
30647: PUSH
30648: LD_INT 2
30650: PUSH
30651: EMPTY
30652: LIST
30653: LIST
30654: PUSH
30655: LD_INT 1
30657: NEG
30658: PUSH
30659: LD_INT 1
30661: PUSH
30662: EMPTY
30663: LIST
30664: LIST
30665: PUSH
30666: LD_INT 2
30668: NEG
30669: PUSH
30670: LD_INT 0
30672: PUSH
30673: EMPTY
30674: LIST
30675: LIST
30676: PUSH
30677: LD_INT 2
30679: NEG
30680: PUSH
30681: LD_INT 1
30683: NEG
30684: PUSH
30685: EMPTY
30686: LIST
30687: LIST
30688: PUSH
30689: LD_INT 2
30691: NEG
30692: PUSH
30693: LD_INT 2
30695: NEG
30696: PUSH
30697: EMPTY
30698: LIST
30699: LIST
30700: PUSH
30701: LD_INT 1
30703: NEG
30704: PUSH
30705: LD_INT 3
30707: NEG
30708: PUSH
30709: EMPTY
30710: LIST
30711: LIST
30712: PUSH
30713: LD_INT 1
30715: PUSH
30716: LD_INT 2
30718: NEG
30719: PUSH
30720: EMPTY
30721: LIST
30722: LIST
30723: PUSH
30724: LD_INT 3
30726: PUSH
30727: LD_INT 2
30729: PUSH
30730: EMPTY
30731: LIST
30732: LIST
30733: PUSH
30734: LD_INT 2
30736: PUSH
30737: LD_INT 3
30739: PUSH
30740: EMPTY
30741: LIST
30742: LIST
30743: PUSH
30744: LD_INT 2
30746: NEG
30747: PUSH
30748: LD_INT 1
30750: PUSH
30751: EMPTY
30752: LIST
30753: LIST
30754: PUSH
30755: LD_INT 3
30757: NEG
30758: PUSH
30759: LD_INT 1
30761: NEG
30762: PUSH
30763: EMPTY
30764: LIST
30765: LIST
30766: PUSH
30767: EMPTY
30768: LIST
30769: LIST
30770: LIST
30771: LIST
30772: LIST
30773: LIST
30774: LIST
30775: LIST
30776: LIST
30777: LIST
30778: LIST
30779: LIST
30780: LIST
30781: LIST
30782: LIST
30783: LIST
30784: LIST
30785: LIST
30786: LIST
30787: LIST
30788: LIST
30789: LIST
30790: LIST
30791: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
30792: LD_ADDR_VAR 0 35
30796: PUSH
30797: LD_INT 0
30799: PUSH
30800: LD_INT 0
30802: PUSH
30803: EMPTY
30804: LIST
30805: LIST
30806: PUSH
30807: LD_INT 0
30809: PUSH
30810: LD_INT 1
30812: NEG
30813: PUSH
30814: EMPTY
30815: LIST
30816: LIST
30817: PUSH
30818: LD_INT 1
30820: PUSH
30821: LD_INT 0
30823: PUSH
30824: EMPTY
30825: LIST
30826: LIST
30827: PUSH
30828: LD_INT 1
30830: PUSH
30831: LD_INT 1
30833: PUSH
30834: EMPTY
30835: LIST
30836: LIST
30837: PUSH
30838: LD_INT 0
30840: PUSH
30841: LD_INT 1
30843: PUSH
30844: EMPTY
30845: LIST
30846: LIST
30847: PUSH
30848: LD_INT 1
30850: NEG
30851: PUSH
30852: LD_INT 0
30854: PUSH
30855: EMPTY
30856: LIST
30857: LIST
30858: PUSH
30859: LD_INT 1
30861: NEG
30862: PUSH
30863: LD_INT 1
30865: NEG
30866: PUSH
30867: EMPTY
30868: LIST
30869: LIST
30870: PUSH
30871: LD_INT 2
30873: PUSH
30874: LD_INT 1
30876: PUSH
30877: EMPTY
30878: LIST
30879: LIST
30880: PUSH
30881: LD_INT 2
30883: NEG
30884: PUSH
30885: LD_INT 1
30887: NEG
30888: PUSH
30889: EMPTY
30890: LIST
30891: LIST
30892: PUSH
30893: EMPTY
30894: LIST
30895: LIST
30896: LIST
30897: LIST
30898: LIST
30899: LIST
30900: LIST
30901: LIST
30902: LIST
30903: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
30904: LD_ADDR_VAR 0 36
30908: PUSH
30909: LD_INT 0
30911: PUSH
30912: LD_INT 0
30914: PUSH
30915: EMPTY
30916: LIST
30917: LIST
30918: PUSH
30919: LD_INT 0
30921: PUSH
30922: LD_INT 1
30924: NEG
30925: PUSH
30926: EMPTY
30927: LIST
30928: LIST
30929: PUSH
30930: LD_INT 1
30932: PUSH
30933: LD_INT 0
30935: PUSH
30936: EMPTY
30937: LIST
30938: LIST
30939: PUSH
30940: LD_INT 1
30942: PUSH
30943: LD_INT 1
30945: PUSH
30946: EMPTY
30947: LIST
30948: LIST
30949: PUSH
30950: LD_INT 0
30952: PUSH
30953: LD_INT 1
30955: PUSH
30956: EMPTY
30957: LIST
30958: LIST
30959: PUSH
30960: LD_INT 1
30962: NEG
30963: PUSH
30964: LD_INT 0
30966: PUSH
30967: EMPTY
30968: LIST
30969: LIST
30970: PUSH
30971: LD_INT 1
30973: NEG
30974: PUSH
30975: LD_INT 1
30977: NEG
30978: PUSH
30979: EMPTY
30980: LIST
30981: LIST
30982: PUSH
30983: LD_INT 1
30985: NEG
30986: PUSH
30987: LD_INT 2
30989: NEG
30990: PUSH
30991: EMPTY
30992: LIST
30993: LIST
30994: PUSH
30995: LD_INT 1
30997: PUSH
30998: LD_INT 2
31000: PUSH
31001: EMPTY
31002: LIST
31003: LIST
31004: PUSH
31005: EMPTY
31006: LIST
31007: LIST
31008: LIST
31009: LIST
31010: LIST
31011: LIST
31012: LIST
31013: LIST
31014: LIST
31015: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
31016: LD_ADDR_VAR 0 37
31020: PUSH
31021: LD_INT 0
31023: PUSH
31024: LD_INT 0
31026: PUSH
31027: EMPTY
31028: LIST
31029: LIST
31030: PUSH
31031: LD_INT 0
31033: PUSH
31034: LD_INT 1
31036: NEG
31037: PUSH
31038: EMPTY
31039: LIST
31040: LIST
31041: PUSH
31042: LD_INT 1
31044: PUSH
31045: LD_INT 0
31047: PUSH
31048: EMPTY
31049: LIST
31050: LIST
31051: PUSH
31052: LD_INT 1
31054: PUSH
31055: LD_INT 1
31057: PUSH
31058: EMPTY
31059: LIST
31060: LIST
31061: PUSH
31062: LD_INT 0
31064: PUSH
31065: LD_INT 1
31067: PUSH
31068: EMPTY
31069: LIST
31070: LIST
31071: PUSH
31072: LD_INT 1
31074: NEG
31075: PUSH
31076: LD_INT 0
31078: PUSH
31079: EMPTY
31080: LIST
31081: LIST
31082: PUSH
31083: LD_INT 1
31085: NEG
31086: PUSH
31087: LD_INT 1
31089: NEG
31090: PUSH
31091: EMPTY
31092: LIST
31093: LIST
31094: PUSH
31095: LD_INT 1
31097: PUSH
31098: LD_INT 1
31100: NEG
31101: PUSH
31102: EMPTY
31103: LIST
31104: LIST
31105: PUSH
31106: LD_INT 1
31108: NEG
31109: PUSH
31110: LD_INT 1
31112: PUSH
31113: EMPTY
31114: LIST
31115: LIST
31116: PUSH
31117: EMPTY
31118: LIST
31119: LIST
31120: LIST
31121: LIST
31122: LIST
31123: LIST
31124: LIST
31125: LIST
31126: LIST
31127: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
31128: LD_ADDR_VAR 0 38
31132: PUSH
31133: LD_INT 0
31135: PUSH
31136: LD_INT 0
31138: PUSH
31139: EMPTY
31140: LIST
31141: LIST
31142: PUSH
31143: LD_INT 0
31145: PUSH
31146: LD_INT 1
31148: NEG
31149: PUSH
31150: EMPTY
31151: LIST
31152: LIST
31153: PUSH
31154: LD_INT 1
31156: PUSH
31157: LD_INT 0
31159: PUSH
31160: EMPTY
31161: LIST
31162: LIST
31163: PUSH
31164: LD_INT 1
31166: PUSH
31167: LD_INT 1
31169: PUSH
31170: EMPTY
31171: LIST
31172: LIST
31173: PUSH
31174: LD_INT 0
31176: PUSH
31177: LD_INT 1
31179: PUSH
31180: EMPTY
31181: LIST
31182: LIST
31183: PUSH
31184: LD_INT 1
31186: NEG
31187: PUSH
31188: LD_INT 0
31190: PUSH
31191: EMPTY
31192: LIST
31193: LIST
31194: PUSH
31195: LD_INT 1
31197: NEG
31198: PUSH
31199: LD_INT 1
31201: NEG
31202: PUSH
31203: EMPTY
31204: LIST
31205: LIST
31206: PUSH
31207: LD_INT 2
31209: PUSH
31210: LD_INT 1
31212: PUSH
31213: EMPTY
31214: LIST
31215: LIST
31216: PUSH
31217: LD_INT 2
31219: NEG
31220: PUSH
31221: LD_INT 1
31223: NEG
31224: PUSH
31225: EMPTY
31226: LIST
31227: LIST
31228: PUSH
31229: EMPTY
31230: LIST
31231: LIST
31232: LIST
31233: LIST
31234: LIST
31235: LIST
31236: LIST
31237: LIST
31238: LIST
31239: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
31240: LD_ADDR_VAR 0 39
31244: PUSH
31245: LD_INT 0
31247: PUSH
31248: LD_INT 0
31250: PUSH
31251: EMPTY
31252: LIST
31253: LIST
31254: PUSH
31255: LD_INT 0
31257: PUSH
31258: LD_INT 1
31260: NEG
31261: PUSH
31262: EMPTY
31263: LIST
31264: LIST
31265: PUSH
31266: LD_INT 1
31268: PUSH
31269: LD_INT 0
31271: PUSH
31272: EMPTY
31273: LIST
31274: LIST
31275: PUSH
31276: LD_INT 1
31278: PUSH
31279: LD_INT 1
31281: PUSH
31282: EMPTY
31283: LIST
31284: LIST
31285: PUSH
31286: LD_INT 0
31288: PUSH
31289: LD_INT 1
31291: PUSH
31292: EMPTY
31293: LIST
31294: LIST
31295: PUSH
31296: LD_INT 1
31298: NEG
31299: PUSH
31300: LD_INT 0
31302: PUSH
31303: EMPTY
31304: LIST
31305: LIST
31306: PUSH
31307: LD_INT 1
31309: NEG
31310: PUSH
31311: LD_INT 1
31313: NEG
31314: PUSH
31315: EMPTY
31316: LIST
31317: LIST
31318: PUSH
31319: LD_INT 1
31321: NEG
31322: PUSH
31323: LD_INT 2
31325: NEG
31326: PUSH
31327: EMPTY
31328: LIST
31329: LIST
31330: PUSH
31331: LD_INT 1
31333: PUSH
31334: LD_INT 2
31336: PUSH
31337: EMPTY
31338: LIST
31339: LIST
31340: PUSH
31341: EMPTY
31342: LIST
31343: LIST
31344: LIST
31345: LIST
31346: LIST
31347: LIST
31348: LIST
31349: LIST
31350: LIST
31351: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
31352: LD_ADDR_VAR 0 40
31356: PUSH
31357: LD_INT 0
31359: PUSH
31360: LD_INT 0
31362: PUSH
31363: EMPTY
31364: LIST
31365: LIST
31366: PUSH
31367: LD_INT 0
31369: PUSH
31370: LD_INT 1
31372: NEG
31373: PUSH
31374: EMPTY
31375: LIST
31376: LIST
31377: PUSH
31378: LD_INT 1
31380: PUSH
31381: LD_INT 0
31383: PUSH
31384: EMPTY
31385: LIST
31386: LIST
31387: PUSH
31388: LD_INT 1
31390: PUSH
31391: LD_INT 1
31393: PUSH
31394: EMPTY
31395: LIST
31396: LIST
31397: PUSH
31398: LD_INT 0
31400: PUSH
31401: LD_INT 1
31403: PUSH
31404: EMPTY
31405: LIST
31406: LIST
31407: PUSH
31408: LD_INT 1
31410: NEG
31411: PUSH
31412: LD_INT 0
31414: PUSH
31415: EMPTY
31416: LIST
31417: LIST
31418: PUSH
31419: LD_INT 1
31421: NEG
31422: PUSH
31423: LD_INT 1
31425: NEG
31426: PUSH
31427: EMPTY
31428: LIST
31429: LIST
31430: PUSH
31431: LD_INT 1
31433: PUSH
31434: LD_INT 1
31436: NEG
31437: PUSH
31438: EMPTY
31439: LIST
31440: LIST
31441: PUSH
31442: LD_INT 1
31444: NEG
31445: PUSH
31446: LD_INT 1
31448: PUSH
31449: EMPTY
31450: LIST
31451: LIST
31452: PUSH
31453: EMPTY
31454: LIST
31455: LIST
31456: LIST
31457: LIST
31458: LIST
31459: LIST
31460: LIST
31461: LIST
31462: LIST
31463: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
31464: LD_ADDR_VAR 0 41
31468: PUSH
31469: LD_INT 0
31471: PUSH
31472: LD_INT 0
31474: PUSH
31475: EMPTY
31476: LIST
31477: LIST
31478: PUSH
31479: LD_INT 0
31481: PUSH
31482: LD_INT 1
31484: NEG
31485: PUSH
31486: EMPTY
31487: LIST
31488: LIST
31489: PUSH
31490: LD_INT 1
31492: PUSH
31493: LD_INT 0
31495: PUSH
31496: EMPTY
31497: LIST
31498: LIST
31499: PUSH
31500: LD_INT 1
31502: PUSH
31503: LD_INT 1
31505: PUSH
31506: EMPTY
31507: LIST
31508: LIST
31509: PUSH
31510: LD_INT 0
31512: PUSH
31513: LD_INT 1
31515: PUSH
31516: EMPTY
31517: LIST
31518: LIST
31519: PUSH
31520: LD_INT 1
31522: NEG
31523: PUSH
31524: LD_INT 0
31526: PUSH
31527: EMPTY
31528: LIST
31529: LIST
31530: PUSH
31531: LD_INT 1
31533: NEG
31534: PUSH
31535: LD_INT 1
31537: NEG
31538: PUSH
31539: EMPTY
31540: LIST
31541: LIST
31542: PUSH
31543: LD_INT 1
31545: NEG
31546: PUSH
31547: LD_INT 2
31549: NEG
31550: PUSH
31551: EMPTY
31552: LIST
31553: LIST
31554: PUSH
31555: LD_INT 1
31557: PUSH
31558: LD_INT 1
31560: NEG
31561: PUSH
31562: EMPTY
31563: LIST
31564: LIST
31565: PUSH
31566: LD_INT 2
31568: PUSH
31569: LD_INT 0
31571: PUSH
31572: EMPTY
31573: LIST
31574: LIST
31575: PUSH
31576: LD_INT 2
31578: PUSH
31579: LD_INT 1
31581: PUSH
31582: EMPTY
31583: LIST
31584: LIST
31585: PUSH
31586: LD_INT 2
31588: PUSH
31589: LD_INT 2
31591: PUSH
31592: EMPTY
31593: LIST
31594: LIST
31595: PUSH
31596: LD_INT 1
31598: PUSH
31599: LD_INT 2
31601: PUSH
31602: EMPTY
31603: LIST
31604: LIST
31605: PUSH
31606: LD_INT 1
31608: NEG
31609: PUSH
31610: LD_INT 1
31612: PUSH
31613: EMPTY
31614: LIST
31615: LIST
31616: PUSH
31617: LD_INT 2
31619: NEG
31620: PUSH
31621: LD_INT 0
31623: PUSH
31624: EMPTY
31625: LIST
31626: LIST
31627: PUSH
31628: LD_INT 2
31630: NEG
31631: PUSH
31632: LD_INT 1
31634: NEG
31635: PUSH
31636: EMPTY
31637: LIST
31638: LIST
31639: PUSH
31640: LD_INT 2
31642: NEG
31643: PUSH
31644: LD_INT 2
31646: NEG
31647: PUSH
31648: EMPTY
31649: LIST
31650: LIST
31651: PUSH
31652: LD_INT 2
31654: NEG
31655: PUSH
31656: LD_INT 3
31658: NEG
31659: PUSH
31660: EMPTY
31661: LIST
31662: LIST
31663: PUSH
31664: LD_INT 2
31666: PUSH
31667: LD_INT 1
31669: NEG
31670: PUSH
31671: EMPTY
31672: LIST
31673: LIST
31674: PUSH
31675: LD_INT 3
31677: PUSH
31678: LD_INT 0
31680: PUSH
31681: EMPTY
31682: LIST
31683: LIST
31684: PUSH
31685: LD_INT 3
31687: PUSH
31688: LD_INT 1
31690: PUSH
31691: EMPTY
31692: LIST
31693: LIST
31694: PUSH
31695: LD_INT 3
31697: PUSH
31698: LD_INT 2
31700: PUSH
31701: EMPTY
31702: LIST
31703: LIST
31704: PUSH
31705: LD_INT 3
31707: PUSH
31708: LD_INT 3
31710: PUSH
31711: EMPTY
31712: LIST
31713: LIST
31714: PUSH
31715: LD_INT 2
31717: PUSH
31718: LD_INT 3
31720: PUSH
31721: EMPTY
31722: LIST
31723: LIST
31724: PUSH
31725: LD_INT 2
31727: NEG
31728: PUSH
31729: LD_INT 1
31731: PUSH
31732: EMPTY
31733: LIST
31734: LIST
31735: PUSH
31736: LD_INT 3
31738: NEG
31739: PUSH
31740: LD_INT 0
31742: PUSH
31743: EMPTY
31744: LIST
31745: LIST
31746: PUSH
31747: LD_INT 3
31749: NEG
31750: PUSH
31751: LD_INT 1
31753: NEG
31754: PUSH
31755: EMPTY
31756: LIST
31757: LIST
31758: PUSH
31759: LD_INT 3
31761: NEG
31762: PUSH
31763: LD_INT 2
31765: NEG
31766: PUSH
31767: EMPTY
31768: LIST
31769: LIST
31770: PUSH
31771: LD_INT 3
31773: NEG
31774: PUSH
31775: LD_INT 3
31777: NEG
31778: PUSH
31779: EMPTY
31780: LIST
31781: LIST
31782: PUSH
31783: EMPTY
31784: LIST
31785: LIST
31786: LIST
31787: LIST
31788: LIST
31789: LIST
31790: LIST
31791: LIST
31792: LIST
31793: LIST
31794: LIST
31795: LIST
31796: LIST
31797: LIST
31798: LIST
31799: LIST
31800: LIST
31801: LIST
31802: LIST
31803: LIST
31804: LIST
31805: LIST
31806: LIST
31807: LIST
31808: LIST
31809: LIST
31810: LIST
31811: LIST
31812: LIST
31813: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
31814: LD_ADDR_VAR 0 42
31818: PUSH
31819: LD_INT 0
31821: PUSH
31822: LD_INT 0
31824: PUSH
31825: EMPTY
31826: LIST
31827: LIST
31828: PUSH
31829: LD_INT 0
31831: PUSH
31832: LD_INT 1
31834: NEG
31835: PUSH
31836: EMPTY
31837: LIST
31838: LIST
31839: PUSH
31840: LD_INT 1
31842: PUSH
31843: LD_INT 0
31845: PUSH
31846: EMPTY
31847: LIST
31848: LIST
31849: PUSH
31850: LD_INT 1
31852: PUSH
31853: LD_INT 1
31855: PUSH
31856: EMPTY
31857: LIST
31858: LIST
31859: PUSH
31860: LD_INT 0
31862: PUSH
31863: LD_INT 1
31865: PUSH
31866: EMPTY
31867: LIST
31868: LIST
31869: PUSH
31870: LD_INT 1
31872: NEG
31873: PUSH
31874: LD_INT 0
31876: PUSH
31877: EMPTY
31878: LIST
31879: LIST
31880: PUSH
31881: LD_INT 1
31883: NEG
31884: PUSH
31885: LD_INT 1
31887: NEG
31888: PUSH
31889: EMPTY
31890: LIST
31891: LIST
31892: PUSH
31893: LD_INT 1
31895: NEG
31896: PUSH
31897: LD_INT 2
31899: NEG
31900: PUSH
31901: EMPTY
31902: LIST
31903: LIST
31904: PUSH
31905: LD_INT 0
31907: PUSH
31908: LD_INT 2
31910: NEG
31911: PUSH
31912: EMPTY
31913: LIST
31914: LIST
31915: PUSH
31916: LD_INT 1
31918: PUSH
31919: LD_INT 1
31921: NEG
31922: PUSH
31923: EMPTY
31924: LIST
31925: LIST
31926: PUSH
31927: LD_INT 2
31929: PUSH
31930: LD_INT 1
31932: PUSH
31933: EMPTY
31934: LIST
31935: LIST
31936: PUSH
31937: LD_INT 2
31939: PUSH
31940: LD_INT 2
31942: PUSH
31943: EMPTY
31944: LIST
31945: LIST
31946: PUSH
31947: LD_INT 1
31949: PUSH
31950: LD_INT 2
31952: PUSH
31953: EMPTY
31954: LIST
31955: LIST
31956: PUSH
31957: LD_INT 0
31959: PUSH
31960: LD_INT 2
31962: PUSH
31963: EMPTY
31964: LIST
31965: LIST
31966: PUSH
31967: LD_INT 1
31969: NEG
31970: PUSH
31971: LD_INT 1
31973: PUSH
31974: EMPTY
31975: LIST
31976: LIST
31977: PUSH
31978: LD_INT 2
31980: NEG
31981: PUSH
31982: LD_INT 1
31984: NEG
31985: PUSH
31986: EMPTY
31987: LIST
31988: LIST
31989: PUSH
31990: LD_INT 2
31992: NEG
31993: PUSH
31994: LD_INT 2
31996: NEG
31997: PUSH
31998: EMPTY
31999: LIST
32000: LIST
32001: PUSH
32002: LD_INT 2
32004: NEG
32005: PUSH
32006: LD_INT 3
32008: NEG
32009: PUSH
32010: EMPTY
32011: LIST
32012: LIST
32013: PUSH
32014: LD_INT 1
32016: NEG
32017: PUSH
32018: LD_INT 3
32020: NEG
32021: PUSH
32022: EMPTY
32023: LIST
32024: LIST
32025: PUSH
32026: LD_INT 0
32028: PUSH
32029: LD_INT 3
32031: NEG
32032: PUSH
32033: EMPTY
32034: LIST
32035: LIST
32036: PUSH
32037: LD_INT 1
32039: PUSH
32040: LD_INT 2
32042: NEG
32043: PUSH
32044: EMPTY
32045: LIST
32046: LIST
32047: PUSH
32048: LD_INT 3
32050: PUSH
32051: LD_INT 2
32053: PUSH
32054: EMPTY
32055: LIST
32056: LIST
32057: PUSH
32058: LD_INT 3
32060: PUSH
32061: LD_INT 3
32063: PUSH
32064: EMPTY
32065: LIST
32066: LIST
32067: PUSH
32068: LD_INT 2
32070: PUSH
32071: LD_INT 3
32073: PUSH
32074: EMPTY
32075: LIST
32076: LIST
32077: PUSH
32078: LD_INT 1
32080: PUSH
32081: LD_INT 3
32083: PUSH
32084: EMPTY
32085: LIST
32086: LIST
32087: PUSH
32088: LD_INT 0
32090: PUSH
32091: LD_INT 3
32093: PUSH
32094: EMPTY
32095: LIST
32096: LIST
32097: PUSH
32098: LD_INT 1
32100: NEG
32101: PUSH
32102: LD_INT 2
32104: PUSH
32105: EMPTY
32106: LIST
32107: LIST
32108: PUSH
32109: LD_INT 3
32111: NEG
32112: PUSH
32113: LD_INT 2
32115: NEG
32116: PUSH
32117: EMPTY
32118: LIST
32119: LIST
32120: PUSH
32121: LD_INT 3
32123: NEG
32124: PUSH
32125: LD_INT 3
32127: NEG
32128: PUSH
32129: EMPTY
32130: LIST
32131: LIST
32132: PUSH
32133: EMPTY
32134: LIST
32135: LIST
32136: LIST
32137: LIST
32138: LIST
32139: LIST
32140: LIST
32141: LIST
32142: LIST
32143: LIST
32144: LIST
32145: LIST
32146: LIST
32147: LIST
32148: LIST
32149: LIST
32150: LIST
32151: LIST
32152: LIST
32153: LIST
32154: LIST
32155: LIST
32156: LIST
32157: LIST
32158: LIST
32159: LIST
32160: LIST
32161: LIST
32162: LIST
32163: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
32164: LD_ADDR_VAR 0 43
32168: PUSH
32169: LD_INT 0
32171: PUSH
32172: LD_INT 0
32174: PUSH
32175: EMPTY
32176: LIST
32177: LIST
32178: PUSH
32179: LD_INT 0
32181: PUSH
32182: LD_INT 1
32184: NEG
32185: PUSH
32186: EMPTY
32187: LIST
32188: LIST
32189: PUSH
32190: LD_INT 1
32192: PUSH
32193: LD_INT 0
32195: PUSH
32196: EMPTY
32197: LIST
32198: LIST
32199: PUSH
32200: LD_INT 1
32202: PUSH
32203: LD_INT 1
32205: PUSH
32206: EMPTY
32207: LIST
32208: LIST
32209: PUSH
32210: LD_INT 0
32212: PUSH
32213: LD_INT 1
32215: PUSH
32216: EMPTY
32217: LIST
32218: LIST
32219: PUSH
32220: LD_INT 1
32222: NEG
32223: PUSH
32224: LD_INT 0
32226: PUSH
32227: EMPTY
32228: LIST
32229: LIST
32230: PUSH
32231: LD_INT 1
32233: NEG
32234: PUSH
32235: LD_INT 1
32237: NEG
32238: PUSH
32239: EMPTY
32240: LIST
32241: LIST
32242: PUSH
32243: LD_INT 1
32245: NEG
32246: PUSH
32247: LD_INT 2
32249: NEG
32250: PUSH
32251: EMPTY
32252: LIST
32253: LIST
32254: PUSH
32255: LD_INT 0
32257: PUSH
32258: LD_INT 2
32260: NEG
32261: PUSH
32262: EMPTY
32263: LIST
32264: LIST
32265: PUSH
32266: LD_INT 1
32268: PUSH
32269: LD_INT 1
32271: NEG
32272: PUSH
32273: EMPTY
32274: LIST
32275: LIST
32276: PUSH
32277: LD_INT 2
32279: PUSH
32280: LD_INT 0
32282: PUSH
32283: EMPTY
32284: LIST
32285: LIST
32286: PUSH
32287: LD_INT 2
32289: PUSH
32290: LD_INT 1
32292: PUSH
32293: EMPTY
32294: LIST
32295: LIST
32296: PUSH
32297: LD_INT 1
32299: PUSH
32300: LD_INT 2
32302: PUSH
32303: EMPTY
32304: LIST
32305: LIST
32306: PUSH
32307: LD_INT 0
32309: PUSH
32310: LD_INT 2
32312: PUSH
32313: EMPTY
32314: LIST
32315: LIST
32316: PUSH
32317: LD_INT 1
32319: NEG
32320: PUSH
32321: LD_INT 1
32323: PUSH
32324: EMPTY
32325: LIST
32326: LIST
32327: PUSH
32328: LD_INT 2
32330: NEG
32331: PUSH
32332: LD_INT 0
32334: PUSH
32335: EMPTY
32336: LIST
32337: LIST
32338: PUSH
32339: LD_INT 2
32341: NEG
32342: PUSH
32343: LD_INT 1
32345: NEG
32346: PUSH
32347: EMPTY
32348: LIST
32349: LIST
32350: PUSH
32351: LD_INT 1
32353: NEG
32354: PUSH
32355: LD_INT 3
32357: NEG
32358: PUSH
32359: EMPTY
32360: LIST
32361: LIST
32362: PUSH
32363: LD_INT 0
32365: PUSH
32366: LD_INT 3
32368: NEG
32369: PUSH
32370: EMPTY
32371: LIST
32372: LIST
32373: PUSH
32374: LD_INT 1
32376: PUSH
32377: LD_INT 2
32379: NEG
32380: PUSH
32381: EMPTY
32382: LIST
32383: LIST
32384: PUSH
32385: LD_INT 2
32387: PUSH
32388: LD_INT 1
32390: NEG
32391: PUSH
32392: EMPTY
32393: LIST
32394: LIST
32395: PUSH
32396: LD_INT 3
32398: PUSH
32399: LD_INT 0
32401: PUSH
32402: EMPTY
32403: LIST
32404: LIST
32405: PUSH
32406: LD_INT 3
32408: PUSH
32409: LD_INT 1
32411: PUSH
32412: EMPTY
32413: LIST
32414: LIST
32415: PUSH
32416: LD_INT 1
32418: PUSH
32419: LD_INT 3
32421: PUSH
32422: EMPTY
32423: LIST
32424: LIST
32425: PUSH
32426: LD_INT 0
32428: PUSH
32429: LD_INT 3
32431: PUSH
32432: EMPTY
32433: LIST
32434: LIST
32435: PUSH
32436: LD_INT 1
32438: NEG
32439: PUSH
32440: LD_INT 2
32442: PUSH
32443: EMPTY
32444: LIST
32445: LIST
32446: PUSH
32447: LD_INT 2
32449: NEG
32450: PUSH
32451: LD_INT 1
32453: PUSH
32454: EMPTY
32455: LIST
32456: LIST
32457: PUSH
32458: LD_INT 3
32460: NEG
32461: PUSH
32462: LD_INT 0
32464: PUSH
32465: EMPTY
32466: LIST
32467: LIST
32468: PUSH
32469: LD_INT 3
32471: NEG
32472: PUSH
32473: LD_INT 1
32475: NEG
32476: PUSH
32477: EMPTY
32478: LIST
32479: LIST
32480: PUSH
32481: EMPTY
32482: LIST
32483: LIST
32484: LIST
32485: LIST
32486: LIST
32487: LIST
32488: LIST
32489: LIST
32490: LIST
32491: LIST
32492: LIST
32493: LIST
32494: LIST
32495: LIST
32496: LIST
32497: LIST
32498: LIST
32499: LIST
32500: LIST
32501: LIST
32502: LIST
32503: LIST
32504: LIST
32505: LIST
32506: LIST
32507: LIST
32508: LIST
32509: LIST
32510: LIST
32511: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
32512: LD_ADDR_VAR 0 44
32516: PUSH
32517: LD_INT 0
32519: PUSH
32520: LD_INT 0
32522: PUSH
32523: EMPTY
32524: LIST
32525: LIST
32526: PUSH
32527: LD_INT 0
32529: PUSH
32530: LD_INT 1
32532: NEG
32533: PUSH
32534: EMPTY
32535: LIST
32536: LIST
32537: PUSH
32538: LD_INT 1
32540: PUSH
32541: LD_INT 0
32543: PUSH
32544: EMPTY
32545: LIST
32546: LIST
32547: PUSH
32548: LD_INT 1
32550: PUSH
32551: LD_INT 1
32553: PUSH
32554: EMPTY
32555: LIST
32556: LIST
32557: PUSH
32558: LD_INT 0
32560: PUSH
32561: LD_INT 1
32563: PUSH
32564: EMPTY
32565: LIST
32566: LIST
32567: PUSH
32568: LD_INT 1
32570: NEG
32571: PUSH
32572: LD_INT 0
32574: PUSH
32575: EMPTY
32576: LIST
32577: LIST
32578: PUSH
32579: LD_INT 1
32581: NEG
32582: PUSH
32583: LD_INT 1
32585: NEG
32586: PUSH
32587: EMPTY
32588: LIST
32589: LIST
32590: PUSH
32591: LD_INT 1
32593: NEG
32594: PUSH
32595: LD_INT 2
32597: NEG
32598: PUSH
32599: EMPTY
32600: LIST
32601: LIST
32602: PUSH
32603: LD_INT 1
32605: PUSH
32606: LD_INT 1
32608: NEG
32609: PUSH
32610: EMPTY
32611: LIST
32612: LIST
32613: PUSH
32614: LD_INT 2
32616: PUSH
32617: LD_INT 0
32619: PUSH
32620: EMPTY
32621: LIST
32622: LIST
32623: PUSH
32624: LD_INT 2
32626: PUSH
32627: LD_INT 1
32629: PUSH
32630: EMPTY
32631: LIST
32632: LIST
32633: PUSH
32634: LD_INT 2
32636: PUSH
32637: LD_INT 2
32639: PUSH
32640: EMPTY
32641: LIST
32642: LIST
32643: PUSH
32644: LD_INT 1
32646: PUSH
32647: LD_INT 2
32649: PUSH
32650: EMPTY
32651: LIST
32652: LIST
32653: PUSH
32654: LD_INT 1
32656: NEG
32657: PUSH
32658: LD_INT 1
32660: PUSH
32661: EMPTY
32662: LIST
32663: LIST
32664: PUSH
32665: LD_INT 2
32667: NEG
32668: PUSH
32669: LD_INT 0
32671: PUSH
32672: EMPTY
32673: LIST
32674: LIST
32675: PUSH
32676: LD_INT 2
32678: NEG
32679: PUSH
32680: LD_INT 1
32682: NEG
32683: PUSH
32684: EMPTY
32685: LIST
32686: LIST
32687: PUSH
32688: LD_INT 2
32690: NEG
32691: PUSH
32692: LD_INT 2
32694: NEG
32695: PUSH
32696: EMPTY
32697: LIST
32698: LIST
32699: PUSH
32700: LD_INT 2
32702: NEG
32703: PUSH
32704: LD_INT 3
32706: NEG
32707: PUSH
32708: EMPTY
32709: LIST
32710: LIST
32711: PUSH
32712: LD_INT 2
32714: PUSH
32715: LD_INT 1
32717: NEG
32718: PUSH
32719: EMPTY
32720: LIST
32721: LIST
32722: PUSH
32723: LD_INT 3
32725: PUSH
32726: LD_INT 0
32728: PUSH
32729: EMPTY
32730: LIST
32731: LIST
32732: PUSH
32733: LD_INT 3
32735: PUSH
32736: LD_INT 1
32738: PUSH
32739: EMPTY
32740: LIST
32741: LIST
32742: PUSH
32743: LD_INT 3
32745: PUSH
32746: LD_INT 2
32748: PUSH
32749: EMPTY
32750: LIST
32751: LIST
32752: PUSH
32753: LD_INT 3
32755: PUSH
32756: LD_INT 3
32758: PUSH
32759: EMPTY
32760: LIST
32761: LIST
32762: PUSH
32763: LD_INT 2
32765: PUSH
32766: LD_INT 3
32768: PUSH
32769: EMPTY
32770: LIST
32771: LIST
32772: PUSH
32773: LD_INT 2
32775: NEG
32776: PUSH
32777: LD_INT 1
32779: PUSH
32780: EMPTY
32781: LIST
32782: LIST
32783: PUSH
32784: LD_INT 3
32786: NEG
32787: PUSH
32788: LD_INT 0
32790: PUSH
32791: EMPTY
32792: LIST
32793: LIST
32794: PUSH
32795: LD_INT 3
32797: NEG
32798: PUSH
32799: LD_INT 1
32801: NEG
32802: PUSH
32803: EMPTY
32804: LIST
32805: LIST
32806: PUSH
32807: LD_INT 3
32809: NEG
32810: PUSH
32811: LD_INT 2
32813: NEG
32814: PUSH
32815: EMPTY
32816: LIST
32817: LIST
32818: PUSH
32819: LD_INT 3
32821: NEG
32822: PUSH
32823: LD_INT 3
32825: NEG
32826: PUSH
32827: EMPTY
32828: LIST
32829: LIST
32830: PUSH
32831: EMPTY
32832: LIST
32833: LIST
32834: LIST
32835: LIST
32836: LIST
32837: LIST
32838: LIST
32839: LIST
32840: LIST
32841: LIST
32842: LIST
32843: LIST
32844: LIST
32845: LIST
32846: LIST
32847: LIST
32848: LIST
32849: LIST
32850: LIST
32851: LIST
32852: LIST
32853: LIST
32854: LIST
32855: LIST
32856: LIST
32857: LIST
32858: LIST
32859: LIST
32860: LIST
32861: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
32862: LD_ADDR_VAR 0 45
32866: PUSH
32867: LD_INT 0
32869: PUSH
32870: LD_INT 0
32872: PUSH
32873: EMPTY
32874: LIST
32875: LIST
32876: PUSH
32877: LD_INT 0
32879: PUSH
32880: LD_INT 1
32882: NEG
32883: PUSH
32884: EMPTY
32885: LIST
32886: LIST
32887: PUSH
32888: LD_INT 1
32890: PUSH
32891: LD_INT 0
32893: PUSH
32894: EMPTY
32895: LIST
32896: LIST
32897: PUSH
32898: LD_INT 1
32900: PUSH
32901: LD_INT 1
32903: PUSH
32904: EMPTY
32905: LIST
32906: LIST
32907: PUSH
32908: LD_INT 0
32910: PUSH
32911: LD_INT 1
32913: PUSH
32914: EMPTY
32915: LIST
32916: LIST
32917: PUSH
32918: LD_INT 1
32920: NEG
32921: PUSH
32922: LD_INT 0
32924: PUSH
32925: EMPTY
32926: LIST
32927: LIST
32928: PUSH
32929: LD_INT 1
32931: NEG
32932: PUSH
32933: LD_INT 1
32935: NEG
32936: PUSH
32937: EMPTY
32938: LIST
32939: LIST
32940: PUSH
32941: LD_INT 1
32943: NEG
32944: PUSH
32945: LD_INT 2
32947: NEG
32948: PUSH
32949: EMPTY
32950: LIST
32951: LIST
32952: PUSH
32953: LD_INT 0
32955: PUSH
32956: LD_INT 2
32958: NEG
32959: PUSH
32960: EMPTY
32961: LIST
32962: LIST
32963: PUSH
32964: LD_INT 1
32966: PUSH
32967: LD_INT 1
32969: NEG
32970: PUSH
32971: EMPTY
32972: LIST
32973: LIST
32974: PUSH
32975: LD_INT 2
32977: PUSH
32978: LD_INT 1
32980: PUSH
32981: EMPTY
32982: LIST
32983: LIST
32984: PUSH
32985: LD_INT 2
32987: PUSH
32988: LD_INT 2
32990: PUSH
32991: EMPTY
32992: LIST
32993: LIST
32994: PUSH
32995: LD_INT 1
32997: PUSH
32998: LD_INT 2
33000: PUSH
33001: EMPTY
33002: LIST
33003: LIST
33004: PUSH
33005: LD_INT 0
33007: PUSH
33008: LD_INT 2
33010: PUSH
33011: EMPTY
33012: LIST
33013: LIST
33014: PUSH
33015: LD_INT 1
33017: NEG
33018: PUSH
33019: LD_INT 1
33021: PUSH
33022: EMPTY
33023: LIST
33024: LIST
33025: PUSH
33026: LD_INT 2
33028: NEG
33029: PUSH
33030: LD_INT 1
33032: NEG
33033: PUSH
33034: EMPTY
33035: LIST
33036: LIST
33037: PUSH
33038: LD_INT 2
33040: NEG
33041: PUSH
33042: LD_INT 2
33044: NEG
33045: PUSH
33046: EMPTY
33047: LIST
33048: LIST
33049: PUSH
33050: LD_INT 2
33052: NEG
33053: PUSH
33054: LD_INT 3
33056: NEG
33057: PUSH
33058: EMPTY
33059: LIST
33060: LIST
33061: PUSH
33062: LD_INT 1
33064: NEG
33065: PUSH
33066: LD_INT 3
33068: NEG
33069: PUSH
33070: EMPTY
33071: LIST
33072: LIST
33073: PUSH
33074: LD_INT 0
33076: PUSH
33077: LD_INT 3
33079: NEG
33080: PUSH
33081: EMPTY
33082: LIST
33083: LIST
33084: PUSH
33085: LD_INT 1
33087: PUSH
33088: LD_INT 2
33090: NEG
33091: PUSH
33092: EMPTY
33093: LIST
33094: LIST
33095: PUSH
33096: LD_INT 3
33098: PUSH
33099: LD_INT 2
33101: PUSH
33102: EMPTY
33103: LIST
33104: LIST
33105: PUSH
33106: LD_INT 3
33108: PUSH
33109: LD_INT 3
33111: PUSH
33112: EMPTY
33113: LIST
33114: LIST
33115: PUSH
33116: LD_INT 2
33118: PUSH
33119: LD_INT 3
33121: PUSH
33122: EMPTY
33123: LIST
33124: LIST
33125: PUSH
33126: LD_INT 1
33128: PUSH
33129: LD_INT 3
33131: PUSH
33132: EMPTY
33133: LIST
33134: LIST
33135: PUSH
33136: LD_INT 0
33138: PUSH
33139: LD_INT 3
33141: PUSH
33142: EMPTY
33143: LIST
33144: LIST
33145: PUSH
33146: LD_INT 1
33148: NEG
33149: PUSH
33150: LD_INT 2
33152: PUSH
33153: EMPTY
33154: LIST
33155: LIST
33156: PUSH
33157: LD_INT 3
33159: NEG
33160: PUSH
33161: LD_INT 2
33163: NEG
33164: PUSH
33165: EMPTY
33166: LIST
33167: LIST
33168: PUSH
33169: LD_INT 3
33171: NEG
33172: PUSH
33173: LD_INT 3
33175: NEG
33176: PUSH
33177: EMPTY
33178: LIST
33179: LIST
33180: PUSH
33181: EMPTY
33182: LIST
33183: LIST
33184: LIST
33185: LIST
33186: LIST
33187: LIST
33188: LIST
33189: LIST
33190: LIST
33191: LIST
33192: LIST
33193: LIST
33194: LIST
33195: LIST
33196: LIST
33197: LIST
33198: LIST
33199: LIST
33200: LIST
33201: LIST
33202: LIST
33203: LIST
33204: LIST
33205: LIST
33206: LIST
33207: LIST
33208: LIST
33209: LIST
33210: LIST
33211: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
33212: LD_ADDR_VAR 0 46
33216: PUSH
33217: LD_INT 0
33219: PUSH
33220: LD_INT 0
33222: PUSH
33223: EMPTY
33224: LIST
33225: LIST
33226: PUSH
33227: LD_INT 0
33229: PUSH
33230: LD_INT 1
33232: NEG
33233: PUSH
33234: EMPTY
33235: LIST
33236: LIST
33237: PUSH
33238: LD_INT 1
33240: PUSH
33241: LD_INT 0
33243: PUSH
33244: EMPTY
33245: LIST
33246: LIST
33247: PUSH
33248: LD_INT 1
33250: PUSH
33251: LD_INT 1
33253: PUSH
33254: EMPTY
33255: LIST
33256: LIST
33257: PUSH
33258: LD_INT 0
33260: PUSH
33261: LD_INT 1
33263: PUSH
33264: EMPTY
33265: LIST
33266: LIST
33267: PUSH
33268: LD_INT 1
33270: NEG
33271: PUSH
33272: LD_INT 0
33274: PUSH
33275: EMPTY
33276: LIST
33277: LIST
33278: PUSH
33279: LD_INT 1
33281: NEG
33282: PUSH
33283: LD_INT 1
33285: NEG
33286: PUSH
33287: EMPTY
33288: LIST
33289: LIST
33290: PUSH
33291: LD_INT 1
33293: NEG
33294: PUSH
33295: LD_INT 2
33297: NEG
33298: PUSH
33299: EMPTY
33300: LIST
33301: LIST
33302: PUSH
33303: LD_INT 0
33305: PUSH
33306: LD_INT 2
33308: NEG
33309: PUSH
33310: EMPTY
33311: LIST
33312: LIST
33313: PUSH
33314: LD_INT 1
33316: PUSH
33317: LD_INT 1
33319: NEG
33320: PUSH
33321: EMPTY
33322: LIST
33323: LIST
33324: PUSH
33325: LD_INT 2
33327: PUSH
33328: LD_INT 0
33330: PUSH
33331: EMPTY
33332: LIST
33333: LIST
33334: PUSH
33335: LD_INT 2
33337: PUSH
33338: LD_INT 1
33340: PUSH
33341: EMPTY
33342: LIST
33343: LIST
33344: PUSH
33345: LD_INT 1
33347: PUSH
33348: LD_INT 2
33350: PUSH
33351: EMPTY
33352: LIST
33353: LIST
33354: PUSH
33355: LD_INT 0
33357: PUSH
33358: LD_INT 2
33360: PUSH
33361: EMPTY
33362: LIST
33363: LIST
33364: PUSH
33365: LD_INT 1
33367: NEG
33368: PUSH
33369: LD_INT 1
33371: PUSH
33372: EMPTY
33373: LIST
33374: LIST
33375: PUSH
33376: LD_INT 2
33378: NEG
33379: PUSH
33380: LD_INT 0
33382: PUSH
33383: EMPTY
33384: LIST
33385: LIST
33386: PUSH
33387: LD_INT 2
33389: NEG
33390: PUSH
33391: LD_INT 1
33393: NEG
33394: PUSH
33395: EMPTY
33396: LIST
33397: LIST
33398: PUSH
33399: LD_INT 1
33401: NEG
33402: PUSH
33403: LD_INT 3
33405: NEG
33406: PUSH
33407: EMPTY
33408: LIST
33409: LIST
33410: PUSH
33411: LD_INT 0
33413: PUSH
33414: LD_INT 3
33416: NEG
33417: PUSH
33418: EMPTY
33419: LIST
33420: LIST
33421: PUSH
33422: LD_INT 1
33424: PUSH
33425: LD_INT 2
33427: NEG
33428: PUSH
33429: EMPTY
33430: LIST
33431: LIST
33432: PUSH
33433: LD_INT 2
33435: PUSH
33436: LD_INT 1
33438: NEG
33439: PUSH
33440: EMPTY
33441: LIST
33442: LIST
33443: PUSH
33444: LD_INT 3
33446: PUSH
33447: LD_INT 0
33449: PUSH
33450: EMPTY
33451: LIST
33452: LIST
33453: PUSH
33454: LD_INT 3
33456: PUSH
33457: LD_INT 1
33459: PUSH
33460: EMPTY
33461: LIST
33462: LIST
33463: PUSH
33464: LD_INT 1
33466: PUSH
33467: LD_INT 3
33469: PUSH
33470: EMPTY
33471: LIST
33472: LIST
33473: PUSH
33474: LD_INT 0
33476: PUSH
33477: LD_INT 3
33479: PUSH
33480: EMPTY
33481: LIST
33482: LIST
33483: PUSH
33484: LD_INT 1
33486: NEG
33487: PUSH
33488: LD_INT 2
33490: PUSH
33491: EMPTY
33492: LIST
33493: LIST
33494: PUSH
33495: LD_INT 2
33497: NEG
33498: PUSH
33499: LD_INT 1
33501: PUSH
33502: EMPTY
33503: LIST
33504: LIST
33505: PUSH
33506: LD_INT 3
33508: NEG
33509: PUSH
33510: LD_INT 0
33512: PUSH
33513: EMPTY
33514: LIST
33515: LIST
33516: PUSH
33517: LD_INT 3
33519: NEG
33520: PUSH
33521: LD_INT 1
33523: NEG
33524: PUSH
33525: EMPTY
33526: LIST
33527: LIST
33528: PUSH
33529: EMPTY
33530: LIST
33531: LIST
33532: LIST
33533: LIST
33534: LIST
33535: LIST
33536: LIST
33537: LIST
33538: LIST
33539: LIST
33540: LIST
33541: LIST
33542: LIST
33543: LIST
33544: LIST
33545: LIST
33546: LIST
33547: LIST
33548: LIST
33549: LIST
33550: LIST
33551: LIST
33552: LIST
33553: LIST
33554: LIST
33555: LIST
33556: LIST
33557: LIST
33558: LIST
33559: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33560: LD_ADDR_VAR 0 47
33564: PUSH
33565: LD_INT 0
33567: PUSH
33568: LD_INT 0
33570: PUSH
33571: EMPTY
33572: LIST
33573: LIST
33574: PUSH
33575: LD_INT 0
33577: PUSH
33578: LD_INT 1
33580: NEG
33581: PUSH
33582: EMPTY
33583: LIST
33584: LIST
33585: PUSH
33586: LD_INT 1
33588: PUSH
33589: LD_INT 0
33591: PUSH
33592: EMPTY
33593: LIST
33594: LIST
33595: PUSH
33596: LD_INT 1
33598: PUSH
33599: LD_INT 1
33601: PUSH
33602: EMPTY
33603: LIST
33604: LIST
33605: PUSH
33606: LD_INT 0
33608: PUSH
33609: LD_INT 1
33611: PUSH
33612: EMPTY
33613: LIST
33614: LIST
33615: PUSH
33616: LD_INT 1
33618: NEG
33619: PUSH
33620: LD_INT 0
33622: PUSH
33623: EMPTY
33624: LIST
33625: LIST
33626: PUSH
33627: LD_INT 1
33629: NEG
33630: PUSH
33631: LD_INT 1
33633: NEG
33634: PUSH
33635: EMPTY
33636: LIST
33637: LIST
33638: PUSH
33639: LD_INT 1
33641: NEG
33642: PUSH
33643: LD_INT 2
33645: NEG
33646: PUSH
33647: EMPTY
33648: LIST
33649: LIST
33650: PUSH
33651: LD_INT 0
33653: PUSH
33654: LD_INT 2
33656: NEG
33657: PUSH
33658: EMPTY
33659: LIST
33660: LIST
33661: PUSH
33662: LD_INT 1
33664: PUSH
33665: LD_INT 1
33667: NEG
33668: PUSH
33669: EMPTY
33670: LIST
33671: LIST
33672: PUSH
33673: LD_INT 2
33675: NEG
33676: PUSH
33677: LD_INT 1
33679: NEG
33680: PUSH
33681: EMPTY
33682: LIST
33683: LIST
33684: PUSH
33685: LD_INT 2
33687: NEG
33688: PUSH
33689: LD_INT 2
33691: NEG
33692: PUSH
33693: EMPTY
33694: LIST
33695: LIST
33696: PUSH
33697: EMPTY
33698: LIST
33699: LIST
33700: LIST
33701: LIST
33702: LIST
33703: LIST
33704: LIST
33705: LIST
33706: LIST
33707: LIST
33708: LIST
33709: LIST
33710: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
33711: LD_ADDR_VAR 0 48
33715: PUSH
33716: LD_INT 0
33718: PUSH
33719: LD_INT 0
33721: PUSH
33722: EMPTY
33723: LIST
33724: LIST
33725: PUSH
33726: LD_INT 0
33728: PUSH
33729: LD_INT 1
33731: NEG
33732: PUSH
33733: EMPTY
33734: LIST
33735: LIST
33736: PUSH
33737: LD_INT 1
33739: PUSH
33740: LD_INT 0
33742: PUSH
33743: EMPTY
33744: LIST
33745: LIST
33746: PUSH
33747: LD_INT 1
33749: PUSH
33750: LD_INT 1
33752: PUSH
33753: EMPTY
33754: LIST
33755: LIST
33756: PUSH
33757: LD_INT 0
33759: PUSH
33760: LD_INT 1
33762: PUSH
33763: EMPTY
33764: LIST
33765: LIST
33766: PUSH
33767: LD_INT 1
33769: NEG
33770: PUSH
33771: LD_INT 0
33773: PUSH
33774: EMPTY
33775: LIST
33776: LIST
33777: PUSH
33778: LD_INT 1
33780: NEG
33781: PUSH
33782: LD_INT 1
33784: NEG
33785: PUSH
33786: EMPTY
33787: LIST
33788: LIST
33789: PUSH
33790: LD_INT 1
33792: NEG
33793: PUSH
33794: LD_INT 2
33796: NEG
33797: PUSH
33798: EMPTY
33799: LIST
33800: LIST
33801: PUSH
33802: LD_INT 0
33804: PUSH
33805: LD_INT 2
33807: NEG
33808: PUSH
33809: EMPTY
33810: LIST
33811: LIST
33812: PUSH
33813: LD_INT 1
33815: PUSH
33816: LD_INT 1
33818: NEG
33819: PUSH
33820: EMPTY
33821: LIST
33822: LIST
33823: PUSH
33824: LD_INT 2
33826: PUSH
33827: LD_INT 0
33829: PUSH
33830: EMPTY
33831: LIST
33832: LIST
33833: PUSH
33834: LD_INT 2
33836: PUSH
33837: LD_INT 1
33839: PUSH
33840: EMPTY
33841: LIST
33842: LIST
33843: PUSH
33844: EMPTY
33845: LIST
33846: LIST
33847: LIST
33848: LIST
33849: LIST
33850: LIST
33851: LIST
33852: LIST
33853: LIST
33854: LIST
33855: LIST
33856: LIST
33857: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
33858: LD_ADDR_VAR 0 49
33862: PUSH
33863: LD_INT 0
33865: PUSH
33866: LD_INT 0
33868: PUSH
33869: EMPTY
33870: LIST
33871: LIST
33872: PUSH
33873: LD_INT 0
33875: PUSH
33876: LD_INT 1
33878: NEG
33879: PUSH
33880: EMPTY
33881: LIST
33882: LIST
33883: PUSH
33884: LD_INT 1
33886: PUSH
33887: LD_INT 0
33889: PUSH
33890: EMPTY
33891: LIST
33892: LIST
33893: PUSH
33894: LD_INT 1
33896: PUSH
33897: LD_INT 1
33899: PUSH
33900: EMPTY
33901: LIST
33902: LIST
33903: PUSH
33904: LD_INT 0
33906: PUSH
33907: LD_INT 1
33909: PUSH
33910: EMPTY
33911: LIST
33912: LIST
33913: PUSH
33914: LD_INT 1
33916: NEG
33917: PUSH
33918: LD_INT 0
33920: PUSH
33921: EMPTY
33922: LIST
33923: LIST
33924: PUSH
33925: LD_INT 1
33927: NEG
33928: PUSH
33929: LD_INT 1
33931: NEG
33932: PUSH
33933: EMPTY
33934: LIST
33935: LIST
33936: PUSH
33937: LD_INT 1
33939: PUSH
33940: LD_INT 1
33942: NEG
33943: PUSH
33944: EMPTY
33945: LIST
33946: LIST
33947: PUSH
33948: LD_INT 2
33950: PUSH
33951: LD_INT 0
33953: PUSH
33954: EMPTY
33955: LIST
33956: LIST
33957: PUSH
33958: LD_INT 2
33960: PUSH
33961: LD_INT 1
33963: PUSH
33964: EMPTY
33965: LIST
33966: LIST
33967: PUSH
33968: LD_INT 2
33970: PUSH
33971: LD_INT 2
33973: PUSH
33974: EMPTY
33975: LIST
33976: LIST
33977: PUSH
33978: LD_INT 1
33980: PUSH
33981: LD_INT 2
33983: PUSH
33984: EMPTY
33985: LIST
33986: LIST
33987: PUSH
33988: EMPTY
33989: LIST
33990: LIST
33991: LIST
33992: LIST
33993: LIST
33994: LIST
33995: LIST
33996: LIST
33997: LIST
33998: LIST
33999: LIST
34000: LIST
34001: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
34002: LD_ADDR_VAR 0 50
34006: PUSH
34007: LD_INT 0
34009: PUSH
34010: LD_INT 0
34012: PUSH
34013: EMPTY
34014: LIST
34015: LIST
34016: PUSH
34017: LD_INT 0
34019: PUSH
34020: LD_INT 1
34022: NEG
34023: PUSH
34024: EMPTY
34025: LIST
34026: LIST
34027: PUSH
34028: LD_INT 1
34030: PUSH
34031: LD_INT 0
34033: PUSH
34034: EMPTY
34035: LIST
34036: LIST
34037: PUSH
34038: LD_INT 1
34040: PUSH
34041: LD_INT 1
34043: PUSH
34044: EMPTY
34045: LIST
34046: LIST
34047: PUSH
34048: LD_INT 0
34050: PUSH
34051: LD_INT 1
34053: PUSH
34054: EMPTY
34055: LIST
34056: LIST
34057: PUSH
34058: LD_INT 1
34060: NEG
34061: PUSH
34062: LD_INT 0
34064: PUSH
34065: EMPTY
34066: LIST
34067: LIST
34068: PUSH
34069: LD_INT 1
34071: NEG
34072: PUSH
34073: LD_INT 1
34075: NEG
34076: PUSH
34077: EMPTY
34078: LIST
34079: LIST
34080: PUSH
34081: LD_INT 2
34083: PUSH
34084: LD_INT 1
34086: PUSH
34087: EMPTY
34088: LIST
34089: LIST
34090: PUSH
34091: LD_INT 2
34093: PUSH
34094: LD_INT 2
34096: PUSH
34097: EMPTY
34098: LIST
34099: LIST
34100: PUSH
34101: LD_INT 1
34103: PUSH
34104: LD_INT 2
34106: PUSH
34107: EMPTY
34108: LIST
34109: LIST
34110: PUSH
34111: LD_INT 0
34113: PUSH
34114: LD_INT 2
34116: PUSH
34117: EMPTY
34118: LIST
34119: LIST
34120: PUSH
34121: LD_INT 1
34123: NEG
34124: PUSH
34125: LD_INT 1
34127: PUSH
34128: EMPTY
34129: LIST
34130: LIST
34131: PUSH
34132: EMPTY
34133: LIST
34134: LIST
34135: LIST
34136: LIST
34137: LIST
34138: LIST
34139: LIST
34140: LIST
34141: LIST
34142: LIST
34143: LIST
34144: LIST
34145: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
34146: LD_ADDR_VAR 0 51
34150: PUSH
34151: LD_INT 0
34153: PUSH
34154: LD_INT 0
34156: PUSH
34157: EMPTY
34158: LIST
34159: LIST
34160: PUSH
34161: LD_INT 0
34163: PUSH
34164: LD_INT 1
34166: NEG
34167: PUSH
34168: EMPTY
34169: LIST
34170: LIST
34171: PUSH
34172: LD_INT 1
34174: PUSH
34175: LD_INT 0
34177: PUSH
34178: EMPTY
34179: LIST
34180: LIST
34181: PUSH
34182: LD_INT 1
34184: PUSH
34185: LD_INT 1
34187: PUSH
34188: EMPTY
34189: LIST
34190: LIST
34191: PUSH
34192: LD_INT 0
34194: PUSH
34195: LD_INT 1
34197: PUSH
34198: EMPTY
34199: LIST
34200: LIST
34201: PUSH
34202: LD_INT 1
34204: NEG
34205: PUSH
34206: LD_INT 0
34208: PUSH
34209: EMPTY
34210: LIST
34211: LIST
34212: PUSH
34213: LD_INT 1
34215: NEG
34216: PUSH
34217: LD_INT 1
34219: NEG
34220: PUSH
34221: EMPTY
34222: LIST
34223: LIST
34224: PUSH
34225: LD_INT 1
34227: PUSH
34228: LD_INT 2
34230: PUSH
34231: EMPTY
34232: LIST
34233: LIST
34234: PUSH
34235: LD_INT 0
34237: PUSH
34238: LD_INT 2
34240: PUSH
34241: EMPTY
34242: LIST
34243: LIST
34244: PUSH
34245: LD_INT 1
34247: NEG
34248: PUSH
34249: LD_INT 1
34251: PUSH
34252: EMPTY
34253: LIST
34254: LIST
34255: PUSH
34256: LD_INT 2
34258: NEG
34259: PUSH
34260: LD_INT 0
34262: PUSH
34263: EMPTY
34264: LIST
34265: LIST
34266: PUSH
34267: LD_INT 2
34269: NEG
34270: PUSH
34271: LD_INT 1
34273: NEG
34274: PUSH
34275: EMPTY
34276: LIST
34277: LIST
34278: PUSH
34279: EMPTY
34280: LIST
34281: LIST
34282: LIST
34283: LIST
34284: LIST
34285: LIST
34286: LIST
34287: LIST
34288: LIST
34289: LIST
34290: LIST
34291: LIST
34292: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34293: LD_ADDR_VAR 0 52
34297: PUSH
34298: LD_INT 0
34300: PUSH
34301: LD_INT 0
34303: PUSH
34304: EMPTY
34305: LIST
34306: LIST
34307: PUSH
34308: LD_INT 0
34310: PUSH
34311: LD_INT 1
34313: NEG
34314: PUSH
34315: EMPTY
34316: LIST
34317: LIST
34318: PUSH
34319: LD_INT 1
34321: PUSH
34322: LD_INT 0
34324: PUSH
34325: EMPTY
34326: LIST
34327: LIST
34328: PUSH
34329: LD_INT 1
34331: PUSH
34332: LD_INT 1
34334: PUSH
34335: EMPTY
34336: LIST
34337: LIST
34338: PUSH
34339: LD_INT 0
34341: PUSH
34342: LD_INT 1
34344: PUSH
34345: EMPTY
34346: LIST
34347: LIST
34348: PUSH
34349: LD_INT 1
34351: NEG
34352: PUSH
34353: LD_INT 0
34355: PUSH
34356: EMPTY
34357: LIST
34358: LIST
34359: PUSH
34360: LD_INT 1
34362: NEG
34363: PUSH
34364: LD_INT 1
34366: NEG
34367: PUSH
34368: EMPTY
34369: LIST
34370: LIST
34371: PUSH
34372: LD_INT 1
34374: NEG
34375: PUSH
34376: LD_INT 2
34378: NEG
34379: PUSH
34380: EMPTY
34381: LIST
34382: LIST
34383: PUSH
34384: LD_INT 1
34386: NEG
34387: PUSH
34388: LD_INT 1
34390: PUSH
34391: EMPTY
34392: LIST
34393: LIST
34394: PUSH
34395: LD_INT 2
34397: NEG
34398: PUSH
34399: LD_INT 0
34401: PUSH
34402: EMPTY
34403: LIST
34404: LIST
34405: PUSH
34406: LD_INT 2
34408: NEG
34409: PUSH
34410: LD_INT 1
34412: NEG
34413: PUSH
34414: EMPTY
34415: LIST
34416: LIST
34417: PUSH
34418: LD_INT 2
34420: NEG
34421: PUSH
34422: LD_INT 2
34424: NEG
34425: PUSH
34426: EMPTY
34427: LIST
34428: LIST
34429: PUSH
34430: EMPTY
34431: LIST
34432: LIST
34433: LIST
34434: LIST
34435: LIST
34436: LIST
34437: LIST
34438: LIST
34439: LIST
34440: LIST
34441: LIST
34442: LIST
34443: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34444: LD_ADDR_VAR 0 53
34448: PUSH
34449: LD_INT 0
34451: PUSH
34452: LD_INT 0
34454: PUSH
34455: EMPTY
34456: LIST
34457: LIST
34458: PUSH
34459: LD_INT 0
34461: PUSH
34462: LD_INT 1
34464: NEG
34465: PUSH
34466: EMPTY
34467: LIST
34468: LIST
34469: PUSH
34470: LD_INT 1
34472: PUSH
34473: LD_INT 0
34475: PUSH
34476: EMPTY
34477: LIST
34478: LIST
34479: PUSH
34480: LD_INT 1
34482: PUSH
34483: LD_INT 1
34485: PUSH
34486: EMPTY
34487: LIST
34488: LIST
34489: PUSH
34490: LD_INT 0
34492: PUSH
34493: LD_INT 1
34495: PUSH
34496: EMPTY
34497: LIST
34498: LIST
34499: PUSH
34500: LD_INT 1
34502: NEG
34503: PUSH
34504: LD_INT 0
34506: PUSH
34507: EMPTY
34508: LIST
34509: LIST
34510: PUSH
34511: LD_INT 1
34513: NEG
34514: PUSH
34515: LD_INT 1
34517: NEG
34518: PUSH
34519: EMPTY
34520: LIST
34521: LIST
34522: PUSH
34523: LD_INT 1
34525: NEG
34526: PUSH
34527: LD_INT 2
34529: NEG
34530: PUSH
34531: EMPTY
34532: LIST
34533: LIST
34534: PUSH
34535: LD_INT 0
34537: PUSH
34538: LD_INT 2
34540: NEG
34541: PUSH
34542: EMPTY
34543: LIST
34544: LIST
34545: PUSH
34546: LD_INT 1
34548: PUSH
34549: LD_INT 1
34551: NEG
34552: PUSH
34553: EMPTY
34554: LIST
34555: LIST
34556: PUSH
34557: LD_INT 2
34559: PUSH
34560: LD_INT 0
34562: PUSH
34563: EMPTY
34564: LIST
34565: LIST
34566: PUSH
34567: LD_INT 2
34569: PUSH
34570: LD_INT 1
34572: PUSH
34573: EMPTY
34574: LIST
34575: LIST
34576: PUSH
34577: LD_INT 2
34579: PUSH
34580: LD_INT 2
34582: PUSH
34583: EMPTY
34584: LIST
34585: LIST
34586: PUSH
34587: LD_INT 1
34589: PUSH
34590: LD_INT 2
34592: PUSH
34593: EMPTY
34594: LIST
34595: LIST
34596: PUSH
34597: LD_INT 0
34599: PUSH
34600: LD_INT 2
34602: PUSH
34603: EMPTY
34604: LIST
34605: LIST
34606: PUSH
34607: LD_INT 1
34609: NEG
34610: PUSH
34611: LD_INT 1
34613: PUSH
34614: EMPTY
34615: LIST
34616: LIST
34617: PUSH
34618: LD_INT 2
34620: NEG
34621: PUSH
34622: LD_INT 0
34624: PUSH
34625: EMPTY
34626: LIST
34627: LIST
34628: PUSH
34629: LD_INT 2
34631: NEG
34632: PUSH
34633: LD_INT 1
34635: NEG
34636: PUSH
34637: EMPTY
34638: LIST
34639: LIST
34640: PUSH
34641: LD_INT 2
34643: NEG
34644: PUSH
34645: LD_INT 2
34647: NEG
34648: PUSH
34649: EMPTY
34650: LIST
34651: LIST
34652: PUSH
34653: EMPTY
34654: LIST
34655: LIST
34656: LIST
34657: LIST
34658: LIST
34659: LIST
34660: LIST
34661: LIST
34662: LIST
34663: LIST
34664: LIST
34665: LIST
34666: LIST
34667: LIST
34668: LIST
34669: LIST
34670: LIST
34671: LIST
34672: LIST
34673: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34674: LD_ADDR_VAR 0 54
34678: PUSH
34679: LD_INT 0
34681: PUSH
34682: LD_INT 0
34684: PUSH
34685: EMPTY
34686: LIST
34687: LIST
34688: PUSH
34689: LD_INT 0
34691: PUSH
34692: LD_INT 1
34694: NEG
34695: PUSH
34696: EMPTY
34697: LIST
34698: LIST
34699: PUSH
34700: LD_INT 1
34702: PUSH
34703: LD_INT 0
34705: PUSH
34706: EMPTY
34707: LIST
34708: LIST
34709: PUSH
34710: LD_INT 1
34712: PUSH
34713: LD_INT 1
34715: PUSH
34716: EMPTY
34717: LIST
34718: LIST
34719: PUSH
34720: LD_INT 0
34722: PUSH
34723: LD_INT 1
34725: PUSH
34726: EMPTY
34727: LIST
34728: LIST
34729: PUSH
34730: LD_INT 1
34732: NEG
34733: PUSH
34734: LD_INT 0
34736: PUSH
34737: EMPTY
34738: LIST
34739: LIST
34740: PUSH
34741: LD_INT 1
34743: NEG
34744: PUSH
34745: LD_INT 1
34747: NEG
34748: PUSH
34749: EMPTY
34750: LIST
34751: LIST
34752: PUSH
34753: LD_INT 1
34755: NEG
34756: PUSH
34757: LD_INT 2
34759: NEG
34760: PUSH
34761: EMPTY
34762: LIST
34763: LIST
34764: PUSH
34765: LD_INT 0
34767: PUSH
34768: LD_INT 2
34770: NEG
34771: PUSH
34772: EMPTY
34773: LIST
34774: LIST
34775: PUSH
34776: LD_INT 1
34778: PUSH
34779: LD_INT 1
34781: NEG
34782: PUSH
34783: EMPTY
34784: LIST
34785: LIST
34786: PUSH
34787: LD_INT 2
34789: PUSH
34790: LD_INT 0
34792: PUSH
34793: EMPTY
34794: LIST
34795: LIST
34796: PUSH
34797: LD_INT 2
34799: PUSH
34800: LD_INT 1
34802: PUSH
34803: EMPTY
34804: LIST
34805: LIST
34806: PUSH
34807: LD_INT 2
34809: PUSH
34810: LD_INT 2
34812: PUSH
34813: EMPTY
34814: LIST
34815: LIST
34816: PUSH
34817: LD_INT 1
34819: PUSH
34820: LD_INT 2
34822: PUSH
34823: EMPTY
34824: LIST
34825: LIST
34826: PUSH
34827: LD_INT 0
34829: PUSH
34830: LD_INT 2
34832: PUSH
34833: EMPTY
34834: LIST
34835: LIST
34836: PUSH
34837: LD_INT 1
34839: NEG
34840: PUSH
34841: LD_INT 1
34843: PUSH
34844: EMPTY
34845: LIST
34846: LIST
34847: PUSH
34848: LD_INT 2
34850: NEG
34851: PUSH
34852: LD_INT 0
34854: PUSH
34855: EMPTY
34856: LIST
34857: LIST
34858: PUSH
34859: LD_INT 2
34861: NEG
34862: PUSH
34863: LD_INT 1
34865: NEG
34866: PUSH
34867: EMPTY
34868: LIST
34869: LIST
34870: PUSH
34871: LD_INT 2
34873: NEG
34874: PUSH
34875: LD_INT 2
34877: NEG
34878: PUSH
34879: EMPTY
34880: LIST
34881: LIST
34882: PUSH
34883: EMPTY
34884: LIST
34885: LIST
34886: LIST
34887: LIST
34888: LIST
34889: LIST
34890: LIST
34891: LIST
34892: LIST
34893: LIST
34894: LIST
34895: LIST
34896: LIST
34897: LIST
34898: LIST
34899: LIST
34900: LIST
34901: LIST
34902: LIST
34903: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34904: LD_ADDR_VAR 0 55
34908: PUSH
34909: LD_INT 0
34911: PUSH
34912: LD_INT 0
34914: PUSH
34915: EMPTY
34916: LIST
34917: LIST
34918: PUSH
34919: LD_INT 0
34921: PUSH
34922: LD_INT 1
34924: NEG
34925: PUSH
34926: EMPTY
34927: LIST
34928: LIST
34929: PUSH
34930: LD_INT 1
34932: PUSH
34933: LD_INT 0
34935: PUSH
34936: EMPTY
34937: LIST
34938: LIST
34939: PUSH
34940: LD_INT 1
34942: PUSH
34943: LD_INT 1
34945: PUSH
34946: EMPTY
34947: LIST
34948: LIST
34949: PUSH
34950: LD_INT 0
34952: PUSH
34953: LD_INT 1
34955: PUSH
34956: EMPTY
34957: LIST
34958: LIST
34959: PUSH
34960: LD_INT 1
34962: NEG
34963: PUSH
34964: LD_INT 0
34966: PUSH
34967: EMPTY
34968: LIST
34969: LIST
34970: PUSH
34971: LD_INT 1
34973: NEG
34974: PUSH
34975: LD_INT 1
34977: NEG
34978: PUSH
34979: EMPTY
34980: LIST
34981: LIST
34982: PUSH
34983: LD_INT 1
34985: NEG
34986: PUSH
34987: LD_INT 2
34989: NEG
34990: PUSH
34991: EMPTY
34992: LIST
34993: LIST
34994: PUSH
34995: LD_INT 0
34997: PUSH
34998: LD_INT 2
35000: NEG
35001: PUSH
35002: EMPTY
35003: LIST
35004: LIST
35005: PUSH
35006: LD_INT 1
35008: PUSH
35009: LD_INT 1
35011: NEG
35012: PUSH
35013: EMPTY
35014: LIST
35015: LIST
35016: PUSH
35017: LD_INT 2
35019: PUSH
35020: LD_INT 0
35022: PUSH
35023: EMPTY
35024: LIST
35025: LIST
35026: PUSH
35027: LD_INT 2
35029: PUSH
35030: LD_INT 1
35032: PUSH
35033: EMPTY
35034: LIST
35035: LIST
35036: PUSH
35037: LD_INT 2
35039: PUSH
35040: LD_INT 2
35042: PUSH
35043: EMPTY
35044: LIST
35045: LIST
35046: PUSH
35047: LD_INT 1
35049: PUSH
35050: LD_INT 2
35052: PUSH
35053: EMPTY
35054: LIST
35055: LIST
35056: PUSH
35057: LD_INT 0
35059: PUSH
35060: LD_INT 2
35062: PUSH
35063: EMPTY
35064: LIST
35065: LIST
35066: PUSH
35067: LD_INT 1
35069: NEG
35070: PUSH
35071: LD_INT 1
35073: PUSH
35074: EMPTY
35075: LIST
35076: LIST
35077: PUSH
35078: LD_INT 2
35080: NEG
35081: PUSH
35082: LD_INT 0
35084: PUSH
35085: EMPTY
35086: LIST
35087: LIST
35088: PUSH
35089: LD_INT 2
35091: NEG
35092: PUSH
35093: LD_INT 1
35095: NEG
35096: PUSH
35097: EMPTY
35098: LIST
35099: LIST
35100: PUSH
35101: LD_INT 2
35103: NEG
35104: PUSH
35105: LD_INT 2
35107: NEG
35108: PUSH
35109: EMPTY
35110: LIST
35111: LIST
35112: PUSH
35113: EMPTY
35114: LIST
35115: LIST
35116: LIST
35117: LIST
35118: LIST
35119: LIST
35120: LIST
35121: LIST
35122: LIST
35123: LIST
35124: LIST
35125: LIST
35126: LIST
35127: LIST
35128: LIST
35129: LIST
35130: LIST
35131: LIST
35132: LIST
35133: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35134: LD_ADDR_VAR 0 56
35138: PUSH
35139: LD_INT 0
35141: PUSH
35142: LD_INT 0
35144: PUSH
35145: EMPTY
35146: LIST
35147: LIST
35148: PUSH
35149: LD_INT 0
35151: PUSH
35152: LD_INT 1
35154: NEG
35155: PUSH
35156: EMPTY
35157: LIST
35158: LIST
35159: PUSH
35160: LD_INT 1
35162: PUSH
35163: LD_INT 0
35165: PUSH
35166: EMPTY
35167: LIST
35168: LIST
35169: PUSH
35170: LD_INT 1
35172: PUSH
35173: LD_INT 1
35175: PUSH
35176: EMPTY
35177: LIST
35178: LIST
35179: PUSH
35180: LD_INT 0
35182: PUSH
35183: LD_INT 1
35185: PUSH
35186: EMPTY
35187: LIST
35188: LIST
35189: PUSH
35190: LD_INT 1
35192: NEG
35193: PUSH
35194: LD_INT 0
35196: PUSH
35197: EMPTY
35198: LIST
35199: LIST
35200: PUSH
35201: LD_INT 1
35203: NEG
35204: PUSH
35205: LD_INT 1
35207: NEG
35208: PUSH
35209: EMPTY
35210: LIST
35211: LIST
35212: PUSH
35213: LD_INT 1
35215: NEG
35216: PUSH
35217: LD_INT 2
35219: NEG
35220: PUSH
35221: EMPTY
35222: LIST
35223: LIST
35224: PUSH
35225: LD_INT 0
35227: PUSH
35228: LD_INT 2
35230: NEG
35231: PUSH
35232: EMPTY
35233: LIST
35234: LIST
35235: PUSH
35236: LD_INT 1
35238: PUSH
35239: LD_INT 1
35241: NEG
35242: PUSH
35243: EMPTY
35244: LIST
35245: LIST
35246: PUSH
35247: LD_INT 2
35249: PUSH
35250: LD_INT 0
35252: PUSH
35253: EMPTY
35254: LIST
35255: LIST
35256: PUSH
35257: LD_INT 2
35259: PUSH
35260: LD_INT 1
35262: PUSH
35263: EMPTY
35264: LIST
35265: LIST
35266: PUSH
35267: LD_INT 2
35269: PUSH
35270: LD_INT 2
35272: PUSH
35273: EMPTY
35274: LIST
35275: LIST
35276: PUSH
35277: LD_INT 1
35279: PUSH
35280: LD_INT 2
35282: PUSH
35283: EMPTY
35284: LIST
35285: LIST
35286: PUSH
35287: LD_INT 0
35289: PUSH
35290: LD_INT 2
35292: PUSH
35293: EMPTY
35294: LIST
35295: LIST
35296: PUSH
35297: LD_INT 1
35299: NEG
35300: PUSH
35301: LD_INT 1
35303: PUSH
35304: EMPTY
35305: LIST
35306: LIST
35307: PUSH
35308: LD_INT 2
35310: NEG
35311: PUSH
35312: LD_INT 0
35314: PUSH
35315: EMPTY
35316: LIST
35317: LIST
35318: PUSH
35319: LD_INT 2
35321: NEG
35322: PUSH
35323: LD_INT 1
35325: NEG
35326: PUSH
35327: EMPTY
35328: LIST
35329: LIST
35330: PUSH
35331: LD_INT 2
35333: NEG
35334: PUSH
35335: LD_INT 2
35337: NEG
35338: PUSH
35339: EMPTY
35340: LIST
35341: LIST
35342: PUSH
35343: EMPTY
35344: LIST
35345: LIST
35346: LIST
35347: LIST
35348: LIST
35349: LIST
35350: LIST
35351: LIST
35352: LIST
35353: LIST
35354: LIST
35355: LIST
35356: LIST
35357: LIST
35358: LIST
35359: LIST
35360: LIST
35361: LIST
35362: LIST
35363: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35364: LD_ADDR_VAR 0 57
35368: PUSH
35369: LD_INT 0
35371: PUSH
35372: LD_INT 0
35374: PUSH
35375: EMPTY
35376: LIST
35377: LIST
35378: PUSH
35379: LD_INT 0
35381: PUSH
35382: LD_INT 1
35384: NEG
35385: PUSH
35386: EMPTY
35387: LIST
35388: LIST
35389: PUSH
35390: LD_INT 1
35392: PUSH
35393: LD_INT 0
35395: PUSH
35396: EMPTY
35397: LIST
35398: LIST
35399: PUSH
35400: LD_INT 1
35402: PUSH
35403: LD_INT 1
35405: PUSH
35406: EMPTY
35407: LIST
35408: LIST
35409: PUSH
35410: LD_INT 0
35412: PUSH
35413: LD_INT 1
35415: PUSH
35416: EMPTY
35417: LIST
35418: LIST
35419: PUSH
35420: LD_INT 1
35422: NEG
35423: PUSH
35424: LD_INT 0
35426: PUSH
35427: EMPTY
35428: LIST
35429: LIST
35430: PUSH
35431: LD_INT 1
35433: NEG
35434: PUSH
35435: LD_INT 1
35437: NEG
35438: PUSH
35439: EMPTY
35440: LIST
35441: LIST
35442: PUSH
35443: LD_INT 1
35445: NEG
35446: PUSH
35447: LD_INT 2
35449: NEG
35450: PUSH
35451: EMPTY
35452: LIST
35453: LIST
35454: PUSH
35455: LD_INT 0
35457: PUSH
35458: LD_INT 2
35460: NEG
35461: PUSH
35462: EMPTY
35463: LIST
35464: LIST
35465: PUSH
35466: LD_INT 1
35468: PUSH
35469: LD_INT 1
35471: NEG
35472: PUSH
35473: EMPTY
35474: LIST
35475: LIST
35476: PUSH
35477: LD_INT 2
35479: PUSH
35480: LD_INT 0
35482: PUSH
35483: EMPTY
35484: LIST
35485: LIST
35486: PUSH
35487: LD_INT 2
35489: PUSH
35490: LD_INT 1
35492: PUSH
35493: EMPTY
35494: LIST
35495: LIST
35496: PUSH
35497: LD_INT 2
35499: PUSH
35500: LD_INT 2
35502: PUSH
35503: EMPTY
35504: LIST
35505: LIST
35506: PUSH
35507: LD_INT 1
35509: PUSH
35510: LD_INT 2
35512: PUSH
35513: EMPTY
35514: LIST
35515: LIST
35516: PUSH
35517: LD_INT 0
35519: PUSH
35520: LD_INT 2
35522: PUSH
35523: EMPTY
35524: LIST
35525: LIST
35526: PUSH
35527: LD_INT 1
35529: NEG
35530: PUSH
35531: LD_INT 1
35533: PUSH
35534: EMPTY
35535: LIST
35536: LIST
35537: PUSH
35538: LD_INT 2
35540: NEG
35541: PUSH
35542: LD_INT 0
35544: PUSH
35545: EMPTY
35546: LIST
35547: LIST
35548: PUSH
35549: LD_INT 2
35551: NEG
35552: PUSH
35553: LD_INT 1
35555: NEG
35556: PUSH
35557: EMPTY
35558: LIST
35559: LIST
35560: PUSH
35561: LD_INT 2
35563: NEG
35564: PUSH
35565: LD_INT 2
35567: NEG
35568: PUSH
35569: EMPTY
35570: LIST
35571: LIST
35572: PUSH
35573: EMPTY
35574: LIST
35575: LIST
35576: LIST
35577: LIST
35578: LIST
35579: LIST
35580: LIST
35581: LIST
35582: LIST
35583: LIST
35584: LIST
35585: LIST
35586: LIST
35587: LIST
35588: LIST
35589: LIST
35590: LIST
35591: LIST
35592: LIST
35593: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35594: LD_ADDR_VAR 0 58
35598: PUSH
35599: LD_INT 0
35601: PUSH
35602: LD_INT 0
35604: PUSH
35605: EMPTY
35606: LIST
35607: LIST
35608: PUSH
35609: LD_INT 0
35611: PUSH
35612: LD_INT 1
35614: NEG
35615: PUSH
35616: EMPTY
35617: LIST
35618: LIST
35619: PUSH
35620: LD_INT 1
35622: PUSH
35623: LD_INT 0
35625: PUSH
35626: EMPTY
35627: LIST
35628: LIST
35629: PUSH
35630: LD_INT 1
35632: PUSH
35633: LD_INT 1
35635: PUSH
35636: EMPTY
35637: LIST
35638: LIST
35639: PUSH
35640: LD_INT 0
35642: PUSH
35643: LD_INT 1
35645: PUSH
35646: EMPTY
35647: LIST
35648: LIST
35649: PUSH
35650: LD_INT 1
35652: NEG
35653: PUSH
35654: LD_INT 0
35656: PUSH
35657: EMPTY
35658: LIST
35659: LIST
35660: PUSH
35661: LD_INT 1
35663: NEG
35664: PUSH
35665: LD_INT 1
35667: NEG
35668: PUSH
35669: EMPTY
35670: LIST
35671: LIST
35672: PUSH
35673: LD_INT 1
35675: NEG
35676: PUSH
35677: LD_INT 2
35679: NEG
35680: PUSH
35681: EMPTY
35682: LIST
35683: LIST
35684: PUSH
35685: LD_INT 0
35687: PUSH
35688: LD_INT 2
35690: NEG
35691: PUSH
35692: EMPTY
35693: LIST
35694: LIST
35695: PUSH
35696: LD_INT 1
35698: PUSH
35699: LD_INT 1
35701: NEG
35702: PUSH
35703: EMPTY
35704: LIST
35705: LIST
35706: PUSH
35707: LD_INT 2
35709: PUSH
35710: LD_INT 0
35712: PUSH
35713: EMPTY
35714: LIST
35715: LIST
35716: PUSH
35717: LD_INT 2
35719: PUSH
35720: LD_INT 1
35722: PUSH
35723: EMPTY
35724: LIST
35725: LIST
35726: PUSH
35727: LD_INT 2
35729: PUSH
35730: LD_INT 2
35732: PUSH
35733: EMPTY
35734: LIST
35735: LIST
35736: PUSH
35737: LD_INT 1
35739: PUSH
35740: LD_INT 2
35742: PUSH
35743: EMPTY
35744: LIST
35745: LIST
35746: PUSH
35747: LD_INT 0
35749: PUSH
35750: LD_INT 2
35752: PUSH
35753: EMPTY
35754: LIST
35755: LIST
35756: PUSH
35757: LD_INT 1
35759: NEG
35760: PUSH
35761: LD_INT 1
35763: PUSH
35764: EMPTY
35765: LIST
35766: LIST
35767: PUSH
35768: LD_INT 2
35770: NEG
35771: PUSH
35772: LD_INT 0
35774: PUSH
35775: EMPTY
35776: LIST
35777: LIST
35778: PUSH
35779: LD_INT 2
35781: NEG
35782: PUSH
35783: LD_INT 1
35785: NEG
35786: PUSH
35787: EMPTY
35788: LIST
35789: LIST
35790: PUSH
35791: LD_INT 2
35793: NEG
35794: PUSH
35795: LD_INT 2
35797: NEG
35798: PUSH
35799: EMPTY
35800: LIST
35801: LIST
35802: PUSH
35803: EMPTY
35804: LIST
35805: LIST
35806: LIST
35807: LIST
35808: LIST
35809: LIST
35810: LIST
35811: LIST
35812: LIST
35813: LIST
35814: LIST
35815: LIST
35816: LIST
35817: LIST
35818: LIST
35819: LIST
35820: LIST
35821: LIST
35822: LIST
35823: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
35824: LD_ADDR_VAR 0 59
35828: PUSH
35829: LD_INT 0
35831: PUSH
35832: LD_INT 0
35834: PUSH
35835: EMPTY
35836: LIST
35837: LIST
35838: PUSH
35839: LD_INT 0
35841: PUSH
35842: LD_INT 1
35844: NEG
35845: PUSH
35846: EMPTY
35847: LIST
35848: LIST
35849: PUSH
35850: LD_INT 1
35852: PUSH
35853: LD_INT 0
35855: PUSH
35856: EMPTY
35857: LIST
35858: LIST
35859: PUSH
35860: LD_INT 1
35862: PUSH
35863: LD_INT 1
35865: PUSH
35866: EMPTY
35867: LIST
35868: LIST
35869: PUSH
35870: LD_INT 0
35872: PUSH
35873: LD_INT 1
35875: PUSH
35876: EMPTY
35877: LIST
35878: LIST
35879: PUSH
35880: LD_INT 1
35882: NEG
35883: PUSH
35884: LD_INT 0
35886: PUSH
35887: EMPTY
35888: LIST
35889: LIST
35890: PUSH
35891: LD_INT 1
35893: NEG
35894: PUSH
35895: LD_INT 1
35897: NEG
35898: PUSH
35899: EMPTY
35900: LIST
35901: LIST
35902: PUSH
35903: EMPTY
35904: LIST
35905: LIST
35906: LIST
35907: LIST
35908: LIST
35909: LIST
35910: LIST
35911: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
35912: LD_ADDR_VAR 0 60
35916: PUSH
35917: LD_INT 0
35919: PUSH
35920: LD_INT 0
35922: PUSH
35923: EMPTY
35924: LIST
35925: LIST
35926: PUSH
35927: LD_INT 0
35929: PUSH
35930: LD_INT 1
35932: NEG
35933: PUSH
35934: EMPTY
35935: LIST
35936: LIST
35937: PUSH
35938: LD_INT 1
35940: PUSH
35941: LD_INT 0
35943: PUSH
35944: EMPTY
35945: LIST
35946: LIST
35947: PUSH
35948: LD_INT 1
35950: PUSH
35951: LD_INT 1
35953: PUSH
35954: EMPTY
35955: LIST
35956: LIST
35957: PUSH
35958: LD_INT 0
35960: PUSH
35961: LD_INT 1
35963: PUSH
35964: EMPTY
35965: LIST
35966: LIST
35967: PUSH
35968: LD_INT 1
35970: NEG
35971: PUSH
35972: LD_INT 0
35974: PUSH
35975: EMPTY
35976: LIST
35977: LIST
35978: PUSH
35979: LD_INT 1
35981: NEG
35982: PUSH
35983: LD_INT 1
35985: NEG
35986: PUSH
35987: EMPTY
35988: LIST
35989: LIST
35990: PUSH
35991: EMPTY
35992: LIST
35993: LIST
35994: LIST
35995: LIST
35996: LIST
35997: LIST
35998: LIST
35999: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
36000: LD_ADDR_VAR 0 61
36004: PUSH
36005: LD_INT 0
36007: PUSH
36008: LD_INT 0
36010: PUSH
36011: EMPTY
36012: LIST
36013: LIST
36014: PUSH
36015: LD_INT 0
36017: PUSH
36018: LD_INT 1
36020: NEG
36021: PUSH
36022: EMPTY
36023: LIST
36024: LIST
36025: PUSH
36026: LD_INT 1
36028: PUSH
36029: LD_INT 0
36031: PUSH
36032: EMPTY
36033: LIST
36034: LIST
36035: PUSH
36036: LD_INT 1
36038: PUSH
36039: LD_INT 1
36041: PUSH
36042: EMPTY
36043: LIST
36044: LIST
36045: PUSH
36046: LD_INT 0
36048: PUSH
36049: LD_INT 1
36051: PUSH
36052: EMPTY
36053: LIST
36054: LIST
36055: PUSH
36056: LD_INT 1
36058: NEG
36059: PUSH
36060: LD_INT 0
36062: PUSH
36063: EMPTY
36064: LIST
36065: LIST
36066: PUSH
36067: LD_INT 1
36069: NEG
36070: PUSH
36071: LD_INT 1
36073: NEG
36074: PUSH
36075: EMPTY
36076: LIST
36077: LIST
36078: PUSH
36079: EMPTY
36080: LIST
36081: LIST
36082: LIST
36083: LIST
36084: LIST
36085: LIST
36086: LIST
36087: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
36088: LD_ADDR_VAR 0 62
36092: PUSH
36093: LD_INT 0
36095: PUSH
36096: LD_INT 0
36098: PUSH
36099: EMPTY
36100: LIST
36101: LIST
36102: PUSH
36103: LD_INT 0
36105: PUSH
36106: LD_INT 1
36108: NEG
36109: PUSH
36110: EMPTY
36111: LIST
36112: LIST
36113: PUSH
36114: LD_INT 1
36116: PUSH
36117: LD_INT 0
36119: PUSH
36120: EMPTY
36121: LIST
36122: LIST
36123: PUSH
36124: LD_INT 1
36126: PUSH
36127: LD_INT 1
36129: PUSH
36130: EMPTY
36131: LIST
36132: LIST
36133: PUSH
36134: LD_INT 0
36136: PUSH
36137: LD_INT 1
36139: PUSH
36140: EMPTY
36141: LIST
36142: LIST
36143: PUSH
36144: LD_INT 1
36146: NEG
36147: PUSH
36148: LD_INT 0
36150: PUSH
36151: EMPTY
36152: LIST
36153: LIST
36154: PUSH
36155: LD_INT 1
36157: NEG
36158: PUSH
36159: LD_INT 1
36161: NEG
36162: PUSH
36163: EMPTY
36164: LIST
36165: LIST
36166: PUSH
36167: EMPTY
36168: LIST
36169: LIST
36170: LIST
36171: LIST
36172: LIST
36173: LIST
36174: LIST
36175: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
36176: LD_ADDR_VAR 0 63
36180: PUSH
36181: LD_INT 0
36183: PUSH
36184: LD_INT 0
36186: PUSH
36187: EMPTY
36188: LIST
36189: LIST
36190: PUSH
36191: LD_INT 0
36193: PUSH
36194: LD_INT 1
36196: NEG
36197: PUSH
36198: EMPTY
36199: LIST
36200: LIST
36201: PUSH
36202: LD_INT 1
36204: PUSH
36205: LD_INT 0
36207: PUSH
36208: EMPTY
36209: LIST
36210: LIST
36211: PUSH
36212: LD_INT 1
36214: PUSH
36215: LD_INT 1
36217: PUSH
36218: EMPTY
36219: LIST
36220: LIST
36221: PUSH
36222: LD_INT 0
36224: PUSH
36225: LD_INT 1
36227: PUSH
36228: EMPTY
36229: LIST
36230: LIST
36231: PUSH
36232: LD_INT 1
36234: NEG
36235: PUSH
36236: LD_INT 0
36238: PUSH
36239: EMPTY
36240: LIST
36241: LIST
36242: PUSH
36243: LD_INT 1
36245: NEG
36246: PUSH
36247: LD_INT 1
36249: NEG
36250: PUSH
36251: EMPTY
36252: LIST
36253: LIST
36254: PUSH
36255: EMPTY
36256: LIST
36257: LIST
36258: LIST
36259: LIST
36260: LIST
36261: LIST
36262: LIST
36263: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
36264: LD_ADDR_VAR 0 64
36268: PUSH
36269: LD_INT 0
36271: PUSH
36272: LD_INT 0
36274: PUSH
36275: EMPTY
36276: LIST
36277: LIST
36278: PUSH
36279: LD_INT 0
36281: PUSH
36282: LD_INT 1
36284: NEG
36285: PUSH
36286: EMPTY
36287: LIST
36288: LIST
36289: PUSH
36290: LD_INT 1
36292: PUSH
36293: LD_INT 0
36295: PUSH
36296: EMPTY
36297: LIST
36298: LIST
36299: PUSH
36300: LD_INT 1
36302: PUSH
36303: LD_INT 1
36305: PUSH
36306: EMPTY
36307: LIST
36308: LIST
36309: PUSH
36310: LD_INT 0
36312: PUSH
36313: LD_INT 1
36315: PUSH
36316: EMPTY
36317: LIST
36318: LIST
36319: PUSH
36320: LD_INT 1
36322: NEG
36323: PUSH
36324: LD_INT 0
36326: PUSH
36327: EMPTY
36328: LIST
36329: LIST
36330: PUSH
36331: LD_INT 1
36333: NEG
36334: PUSH
36335: LD_INT 1
36337: NEG
36338: PUSH
36339: EMPTY
36340: LIST
36341: LIST
36342: PUSH
36343: EMPTY
36344: LIST
36345: LIST
36346: LIST
36347: LIST
36348: LIST
36349: LIST
36350: LIST
36351: ST_TO_ADDR
// end ; 1 :
36352: GO 42249
36354: LD_INT 1
36356: DOUBLE
36357: EQUAL
36358: IFTRUE 36362
36360: GO 38985
36362: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
36363: LD_ADDR_VAR 0 11
36367: PUSH
36368: LD_INT 1
36370: NEG
36371: PUSH
36372: LD_INT 3
36374: NEG
36375: PUSH
36376: EMPTY
36377: LIST
36378: LIST
36379: PUSH
36380: LD_INT 0
36382: PUSH
36383: LD_INT 3
36385: NEG
36386: PUSH
36387: EMPTY
36388: LIST
36389: LIST
36390: PUSH
36391: LD_INT 1
36393: PUSH
36394: LD_INT 2
36396: NEG
36397: PUSH
36398: EMPTY
36399: LIST
36400: LIST
36401: PUSH
36402: EMPTY
36403: LIST
36404: LIST
36405: LIST
36406: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
36407: LD_ADDR_VAR 0 12
36411: PUSH
36412: LD_INT 2
36414: PUSH
36415: LD_INT 1
36417: NEG
36418: PUSH
36419: EMPTY
36420: LIST
36421: LIST
36422: PUSH
36423: LD_INT 3
36425: PUSH
36426: LD_INT 0
36428: PUSH
36429: EMPTY
36430: LIST
36431: LIST
36432: PUSH
36433: LD_INT 3
36435: PUSH
36436: LD_INT 1
36438: PUSH
36439: EMPTY
36440: LIST
36441: LIST
36442: PUSH
36443: EMPTY
36444: LIST
36445: LIST
36446: LIST
36447: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
36448: LD_ADDR_VAR 0 13
36452: PUSH
36453: LD_INT 3
36455: PUSH
36456: LD_INT 2
36458: PUSH
36459: EMPTY
36460: LIST
36461: LIST
36462: PUSH
36463: LD_INT 3
36465: PUSH
36466: LD_INT 3
36468: PUSH
36469: EMPTY
36470: LIST
36471: LIST
36472: PUSH
36473: LD_INT 2
36475: PUSH
36476: LD_INT 3
36478: PUSH
36479: EMPTY
36480: LIST
36481: LIST
36482: PUSH
36483: EMPTY
36484: LIST
36485: LIST
36486: LIST
36487: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
36488: LD_ADDR_VAR 0 14
36492: PUSH
36493: LD_INT 1
36495: PUSH
36496: LD_INT 3
36498: PUSH
36499: EMPTY
36500: LIST
36501: LIST
36502: PUSH
36503: LD_INT 0
36505: PUSH
36506: LD_INT 3
36508: PUSH
36509: EMPTY
36510: LIST
36511: LIST
36512: PUSH
36513: LD_INT 1
36515: NEG
36516: PUSH
36517: LD_INT 2
36519: PUSH
36520: EMPTY
36521: LIST
36522: LIST
36523: PUSH
36524: EMPTY
36525: LIST
36526: LIST
36527: LIST
36528: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
36529: LD_ADDR_VAR 0 15
36533: PUSH
36534: LD_INT 2
36536: NEG
36537: PUSH
36538: LD_INT 1
36540: PUSH
36541: EMPTY
36542: LIST
36543: LIST
36544: PUSH
36545: LD_INT 3
36547: NEG
36548: PUSH
36549: LD_INT 0
36551: PUSH
36552: EMPTY
36553: LIST
36554: LIST
36555: PUSH
36556: LD_INT 3
36558: NEG
36559: PUSH
36560: LD_INT 1
36562: NEG
36563: PUSH
36564: EMPTY
36565: LIST
36566: LIST
36567: PUSH
36568: EMPTY
36569: LIST
36570: LIST
36571: LIST
36572: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
36573: LD_ADDR_VAR 0 16
36577: PUSH
36578: LD_INT 2
36580: NEG
36581: PUSH
36582: LD_INT 3
36584: NEG
36585: PUSH
36586: EMPTY
36587: LIST
36588: LIST
36589: PUSH
36590: LD_INT 3
36592: NEG
36593: PUSH
36594: LD_INT 2
36596: NEG
36597: PUSH
36598: EMPTY
36599: LIST
36600: LIST
36601: PUSH
36602: LD_INT 3
36604: NEG
36605: PUSH
36606: LD_INT 3
36608: NEG
36609: PUSH
36610: EMPTY
36611: LIST
36612: LIST
36613: PUSH
36614: EMPTY
36615: LIST
36616: LIST
36617: LIST
36618: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
36619: LD_ADDR_VAR 0 17
36623: PUSH
36624: LD_INT 1
36626: NEG
36627: PUSH
36628: LD_INT 3
36630: NEG
36631: PUSH
36632: EMPTY
36633: LIST
36634: LIST
36635: PUSH
36636: LD_INT 0
36638: PUSH
36639: LD_INT 3
36641: NEG
36642: PUSH
36643: EMPTY
36644: LIST
36645: LIST
36646: PUSH
36647: LD_INT 1
36649: PUSH
36650: LD_INT 2
36652: NEG
36653: PUSH
36654: EMPTY
36655: LIST
36656: LIST
36657: PUSH
36658: EMPTY
36659: LIST
36660: LIST
36661: LIST
36662: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
36663: LD_ADDR_VAR 0 18
36667: PUSH
36668: LD_INT 2
36670: PUSH
36671: LD_INT 1
36673: NEG
36674: PUSH
36675: EMPTY
36676: LIST
36677: LIST
36678: PUSH
36679: LD_INT 3
36681: PUSH
36682: LD_INT 0
36684: PUSH
36685: EMPTY
36686: LIST
36687: LIST
36688: PUSH
36689: LD_INT 3
36691: PUSH
36692: LD_INT 1
36694: PUSH
36695: EMPTY
36696: LIST
36697: LIST
36698: PUSH
36699: EMPTY
36700: LIST
36701: LIST
36702: LIST
36703: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
36704: LD_ADDR_VAR 0 19
36708: PUSH
36709: LD_INT 3
36711: PUSH
36712: LD_INT 2
36714: PUSH
36715: EMPTY
36716: LIST
36717: LIST
36718: PUSH
36719: LD_INT 3
36721: PUSH
36722: LD_INT 3
36724: PUSH
36725: EMPTY
36726: LIST
36727: LIST
36728: PUSH
36729: LD_INT 2
36731: PUSH
36732: LD_INT 3
36734: PUSH
36735: EMPTY
36736: LIST
36737: LIST
36738: PUSH
36739: EMPTY
36740: LIST
36741: LIST
36742: LIST
36743: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
36744: LD_ADDR_VAR 0 20
36748: PUSH
36749: LD_INT 1
36751: PUSH
36752: LD_INT 3
36754: PUSH
36755: EMPTY
36756: LIST
36757: LIST
36758: PUSH
36759: LD_INT 0
36761: PUSH
36762: LD_INT 3
36764: PUSH
36765: EMPTY
36766: LIST
36767: LIST
36768: PUSH
36769: LD_INT 1
36771: NEG
36772: PUSH
36773: LD_INT 2
36775: PUSH
36776: EMPTY
36777: LIST
36778: LIST
36779: PUSH
36780: EMPTY
36781: LIST
36782: LIST
36783: LIST
36784: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
36785: LD_ADDR_VAR 0 21
36789: PUSH
36790: LD_INT 2
36792: NEG
36793: PUSH
36794: LD_INT 1
36796: PUSH
36797: EMPTY
36798: LIST
36799: LIST
36800: PUSH
36801: LD_INT 3
36803: NEG
36804: PUSH
36805: LD_INT 0
36807: PUSH
36808: EMPTY
36809: LIST
36810: LIST
36811: PUSH
36812: LD_INT 3
36814: NEG
36815: PUSH
36816: LD_INT 1
36818: NEG
36819: PUSH
36820: EMPTY
36821: LIST
36822: LIST
36823: PUSH
36824: EMPTY
36825: LIST
36826: LIST
36827: LIST
36828: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
36829: LD_ADDR_VAR 0 22
36833: PUSH
36834: LD_INT 2
36836: NEG
36837: PUSH
36838: LD_INT 3
36840: NEG
36841: PUSH
36842: EMPTY
36843: LIST
36844: LIST
36845: PUSH
36846: LD_INT 3
36848: NEG
36849: PUSH
36850: LD_INT 2
36852: NEG
36853: PUSH
36854: EMPTY
36855: LIST
36856: LIST
36857: PUSH
36858: LD_INT 3
36860: NEG
36861: PUSH
36862: LD_INT 3
36864: NEG
36865: PUSH
36866: EMPTY
36867: LIST
36868: LIST
36869: PUSH
36870: EMPTY
36871: LIST
36872: LIST
36873: LIST
36874: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
36875: LD_ADDR_VAR 0 23
36879: PUSH
36880: LD_INT 0
36882: PUSH
36883: LD_INT 3
36885: NEG
36886: PUSH
36887: EMPTY
36888: LIST
36889: LIST
36890: PUSH
36891: LD_INT 1
36893: NEG
36894: PUSH
36895: LD_INT 4
36897: NEG
36898: PUSH
36899: EMPTY
36900: LIST
36901: LIST
36902: PUSH
36903: LD_INT 1
36905: PUSH
36906: LD_INT 3
36908: NEG
36909: PUSH
36910: EMPTY
36911: LIST
36912: LIST
36913: PUSH
36914: EMPTY
36915: LIST
36916: LIST
36917: LIST
36918: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
36919: LD_ADDR_VAR 0 24
36923: PUSH
36924: LD_INT 3
36926: PUSH
36927: LD_INT 0
36929: PUSH
36930: EMPTY
36931: LIST
36932: LIST
36933: PUSH
36934: LD_INT 3
36936: PUSH
36937: LD_INT 1
36939: NEG
36940: PUSH
36941: EMPTY
36942: LIST
36943: LIST
36944: PUSH
36945: LD_INT 4
36947: PUSH
36948: LD_INT 1
36950: PUSH
36951: EMPTY
36952: LIST
36953: LIST
36954: PUSH
36955: EMPTY
36956: LIST
36957: LIST
36958: LIST
36959: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
36960: LD_ADDR_VAR 0 25
36964: PUSH
36965: LD_INT 3
36967: PUSH
36968: LD_INT 3
36970: PUSH
36971: EMPTY
36972: LIST
36973: LIST
36974: PUSH
36975: LD_INT 4
36977: PUSH
36978: LD_INT 3
36980: PUSH
36981: EMPTY
36982: LIST
36983: LIST
36984: PUSH
36985: LD_INT 3
36987: PUSH
36988: LD_INT 4
36990: PUSH
36991: EMPTY
36992: LIST
36993: LIST
36994: PUSH
36995: EMPTY
36996: LIST
36997: LIST
36998: LIST
36999: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
37000: LD_ADDR_VAR 0 26
37004: PUSH
37005: LD_INT 0
37007: PUSH
37008: LD_INT 3
37010: PUSH
37011: EMPTY
37012: LIST
37013: LIST
37014: PUSH
37015: LD_INT 1
37017: PUSH
37018: LD_INT 4
37020: PUSH
37021: EMPTY
37022: LIST
37023: LIST
37024: PUSH
37025: LD_INT 1
37027: NEG
37028: PUSH
37029: LD_INT 3
37031: PUSH
37032: EMPTY
37033: LIST
37034: LIST
37035: PUSH
37036: EMPTY
37037: LIST
37038: LIST
37039: LIST
37040: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
37041: LD_ADDR_VAR 0 27
37045: PUSH
37046: LD_INT 3
37048: NEG
37049: PUSH
37050: LD_INT 0
37052: PUSH
37053: EMPTY
37054: LIST
37055: LIST
37056: PUSH
37057: LD_INT 3
37059: NEG
37060: PUSH
37061: LD_INT 1
37063: PUSH
37064: EMPTY
37065: LIST
37066: LIST
37067: PUSH
37068: LD_INT 4
37070: NEG
37071: PUSH
37072: LD_INT 1
37074: NEG
37075: PUSH
37076: EMPTY
37077: LIST
37078: LIST
37079: PUSH
37080: EMPTY
37081: LIST
37082: LIST
37083: LIST
37084: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
37085: LD_ADDR_VAR 0 28
37089: PUSH
37090: LD_INT 3
37092: NEG
37093: PUSH
37094: LD_INT 3
37096: NEG
37097: PUSH
37098: EMPTY
37099: LIST
37100: LIST
37101: PUSH
37102: LD_INT 3
37104: NEG
37105: PUSH
37106: LD_INT 4
37108: NEG
37109: PUSH
37110: EMPTY
37111: LIST
37112: LIST
37113: PUSH
37114: LD_INT 4
37116: NEG
37117: PUSH
37118: LD_INT 3
37120: NEG
37121: PUSH
37122: EMPTY
37123: LIST
37124: LIST
37125: PUSH
37126: EMPTY
37127: LIST
37128: LIST
37129: LIST
37130: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
37131: LD_ADDR_VAR 0 29
37135: PUSH
37136: LD_INT 1
37138: NEG
37139: PUSH
37140: LD_INT 3
37142: NEG
37143: PUSH
37144: EMPTY
37145: LIST
37146: LIST
37147: PUSH
37148: LD_INT 0
37150: PUSH
37151: LD_INT 3
37153: NEG
37154: PUSH
37155: EMPTY
37156: LIST
37157: LIST
37158: PUSH
37159: LD_INT 1
37161: PUSH
37162: LD_INT 2
37164: NEG
37165: PUSH
37166: EMPTY
37167: LIST
37168: LIST
37169: PUSH
37170: LD_INT 1
37172: NEG
37173: PUSH
37174: LD_INT 4
37176: NEG
37177: PUSH
37178: EMPTY
37179: LIST
37180: LIST
37181: PUSH
37182: LD_INT 0
37184: PUSH
37185: LD_INT 4
37187: NEG
37188: PUSH
37189: EMPTY
37190: LIST
37191: LIST
37192: PUSH
37193: LD_INT 1
37195: PUSH
37196: LD_INT 3
37198: NEG
37199: PUSH
37200: EMPTY
37201: LIST
37202: LIST
37203: PUSH
37204: LD_INT 1
37206: NEG
37207: PUSH
37208: LD_INT 5
37210: NEG
37211: PUSH
37212: EMPTY
37213: LIST
37214: LIST
37215: PUSH
37216: LD_INT 0
37218: PUSH
37219: LD_INT 5
37221: NEG
37222: PUSH
37223: EMPTY
37224: LIST
37225: LIST
37226: PUSH
37227: LD_INT 1
37229: PUSH
37230: LD_INT 4
37232: NEG
37233: PUSH
37234: EMPTY
37235: LIST
37236: LIST
37237: PUSH
37238: LD_INT 1
37240: NEG
37241: PUSH
37242: LD_INT 6
37244: NEG
37245: PUSH
37246: EMPTY
37247: LIST
37248: LIST
37249: PUSH
37250: LD_INT 0
37252: PUSH
37253: LD_INT 6
37255: NEG
37256: PUSH
37257: EMPTY
37258: LIST
37259: LIST
37260: PUSH
37261: LD_INT 1
37263: PUSH
37264: LD_INT 5
37266: NEG
37267: PUSH
37268: EMPTY
37269: LIST
37270: LIST
37271: PUSH
37272: EMPTY
37273: LIST
37274: LIST
37275: LIST
37276: LIST
37277: LIST
37278: LIST
37279: LIST
37280: LIST
37281: LIST
37282: LIST
37283: LIST
37284: LIST
37285: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
37286: LD_ADDR_VAR 0 30
37290: PUSH
37291: LD_INT 2
37293: PUSH
37294: LD_INT 1
37296: NEG
37297: PUSH
37298: EMPTY
37299: LIST
37300: LIST
37301: PUSH
37302: LD_INT 3
37304: PUSH
37305: LD_INT 0
37307: PUSH
37308: EMPTY
37309: LIST
37310: LIST
37311: PUSH
37312: LD_INT 3
37314: PUSH
37315: LD_INT 1
37317: PUSH
37318: EMPTY
37319: LIST
37320: LIST
37321: PUSH
37322: LD_INT 3
37324: PUSH
37325: LD_INT 1
37327: NEG
37328: PUSH
37329: EMPTY
37330: LIST
37331: LIST
37332: PUSH
37333: LD_INT 4
37335: PUSH
37336: LD_INT 0
37338: PUSH
37339: EMPTY
37340: LIST
37341: LIST
37342: PUSH
37343: LD_INT 4
37345: PUSH
37346: LD_INT 1
37348: PUSH
37349: EMPTY
37350: LIST
37351: LIST
37352: PUSH
37353: LD_INT 4
37355: PUSH
37356: LD_INT 1
37358: NEG
37359: PUSH
37360: EMPTY
37361: LIST
37362: LIST
37363: PUSH
37364: LD_INT 5
37366: PUSH
37367: LD_INT 0
37369: PUSH
37370: EMPTY
37371: LIST
37372: LIST
37373: PUSH
37374: LD_INT 5
37376: PUSH
37377: LD_INT 1
37379: PUSH
37380: EMPTY
37381: LIST
37382: LIST
37383: PUSH
37384: LD_INT 5
37386: PUSH
37387: LD_INT 1
37389: NEG
37390: PUSH
37391: EMPTY
37392: LIST
37393: LIST
37394: PUSH
37395: LD_INT 6
37397: PUSH
37398: LD_INT 0
37400: PUSH
37401: EMPTY
37402: LIST
37403: LIST
37404: PUSH
37405: LD_INT 6
37407: PUSH
37408: LD_INT 1
37410: PUSH
37411: EMPTY
37412: LIST
37413: LIST
37414: PUSH
37415: EMPTY
37416: LIST
37417: LIST
37418: LIST
37419: LIST
37420: LIST
37421: LIST
37422: LIST
37423: LIST
37424: LIST
37425: LIST
37426: LIST
37427: LIST
37428: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
37429: LD_ADDR_VAR 0 31
37433: PUSH
37434: LD_INT 3
37436: PUSH
37437: LD_INT 2
37439: PUSH
37440: EMPTY
37441: LIST
37442: LIST
37443: PUSH
37444: LD_INT 3
37446: PUSH
37447: LD_INT 3
37449: PUSH
37450: EMPTY
37451: LIST
37452: LIST
37453: PUSH
37454: LD_INT 2
37456: PUSH
37457: LD_INT 3
37459: PUSH
37460: EMPTY
37461: LIST
37462: LIST
37463: PUSH
37464: LD_INT 4
37466: PUSH
37467: LD_INT 3
37469: PUSH
37470: EMPTY
37471: LIST
37472: LIST
37473: PUSH
37474: LD_INT 4
37476: PUSH
37477: LD_INT 4
37479: PUSH
37480: EMPTY
37481: LIST
37482: LIST
37483: PUSH
37484: LD_INT 3
37486: PUSH
37487: LD_INT 4
37489: PUSH
37490: EMPTY
37491: LIST
37492: LIST
37493: PUSH
37494: LD_INT 5
37496: PUSH
37497: LD_INT 4
37499: PUSH
37500: EMPTY
37501: LIST
37502: LIST
37503: PUSH
37504: LD_INT 5
37506: PUSH
37507: LD_INT 5
37509: PUSH
37510: EMPTY
37511: LIST
37512: LIST
37513: PUSH
37514: LD_INT 4
37516: PUSH
37517: LD_INT 5
37519: PUSH
37520: EMPTY
37521: LIST
37522: LIST
37523: PUSH
37524: LD_INT 6
37526: PUSH
37527: LD_INT 5
37529: PUSH
37530: EMPTY
37531: LIST
37532: LIST
37533: PUSH
37534: LD_INT 6
37536: PUSH
37537: LD_INT 6
37539: PUSH
37540: EMPTY
37541: LIST
37542: LIST
37543: PUSH
37544: LD_INT 5
37546: PUSH
37547: LD_INT 6
37549: PUSH
37550: EMPTY
37551: LIST
37552: LIST
37553: PUSH
37554: EMPTY
37555: LIST
37556: LIST
37557: LIST
37558: LIST
37559: LIST
37560: LIST
37561: LIST
37562: LIST
37563: LIST
37564: LIST
37565: LIST
37566: LIST
37567: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
37568: LD_ADDR_VAR 0 32
37572: PUSH
37573: LD_INT 1
37575: PUSH
37576: LD_INT 3
37578: PUSH
37579: EMPTY
37580: LIST
37581: LIST
37582: PUSH
37583: LD_INT 0
37585: PUSH
37586: LD_INT 3
37588: PUSH
37589: EMPTY
37590: LIST
37591: LIST
37592: PUSH
37593: LD_INT 1
37595: NEG
37596: PUSH
37597: LD_INT 2
37599: PUSH
37600: EMPTY
37601: LIST
37602: LIST
37603: PUSH
37604: LD_INT 1
37606: PUSH
37607: LD_INT 4
37609: PUSH
37610: EMPTY
37611: LIST
37612: LIST
37613: PUSH
37614: LD_INT 0
37616: PUSH
37617: LD_INT 4
37619: PUSH
37620: EMPTY
37621: LIST
37622: LIST
37623: PUSH
37624: LD_INT 1
37626: NEG
37627: PUSH
37628: LD_INT 3
37630: PUSH
37631: EMPTY
37632: LIST
37633: LIST
37634: PUSH
37635: LD_INT 1
37637: PUSH
37638: LD_INT 5
37640: PUSH
37641: EMPTY
37642: LIST
37643: LIST
37644: PUSH
37645: LD_INT 0
37647: PUSH
37648: LD_INT 5
37650: PUSH
37651: EMPTY
37652: LIST
37653: LIST
37654: PUSH
37655: LD_INT 1
37657: NEG
37658: PUSH
37659: LD_INT 4
37661: PUSH
37662: EMPTY
37663: LIST
37664: LIST
37665: PUSH
37666: LD_INT 1
37668: PUSH
37669: LD_INT 6
37671: PUSH
37672: EMPTY
37673: LIST
37674: LIST
37675: PUSH
37676: LD_INT 0
37678: PUSH
37679: LD_INT 6
37681: PUSH
37682: EMPTY
37683: LIST
37684: LIST
37685: PUSH
37686: LD_INT 1
37688: NEG
37689: PUSH
37690: LD_INT 5
37692: PUSH
37693: EMPTY
37694: LIST
37695: LIST
37696: PUSH
37697: EMPTY
37698: LIST
37699: LIST
37700: LIST
37701: LIST
37702: LIST
37703: LIST
37704: LIST
37705: LIST
37706: LIST
37707: LIST
37708: LIST
37709: LIST
37710: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
37711: LD_ADDR_VAR 0 33
37715: PUSH
37716: LD_INT 2
37718: NEG
37719: PUSH
37720: LD_INT 1
37722: PUSH
37723: EMPTY
37724: LIST
37725: LIST
37726: PUSH
37727: LD_INT 3
37729: NEG
37730: PUSH
37731: LD_INT 0
37733: PUSH
37734: EMPTY
37735: LIST
37736: LIST
37737: PUSH
37738: LD_INT 3
37740: NEG
37741: PUSH
37742: LD_INT 1
37744: NEG
37745: PUSH
37746: EMPTY
37747: LIST
37748: LIST
37749: PUSH
37750: LD_INT 3
37752: NEG
37753: PUSH
37754: LD_INT 1
37756: PUSH
37757: EMPTY
37758: LIST
37759: LIST
37760: PUSH
37761: LD_INT 4
37763: NEG
37764: PUSH
37765: LD_INT 0
37767: PUSH
37768: EMPTY
37769: LIST
37770: LIST
37771: PUSH
37772: LD_INT 4
37774: NEG
37775: PUSH
37776: LD_INT 1
37778: NEG
37779: PUSH
37780: EMPTY
37781: LIST
37782: LIST
37783: PUSH
37784: LD_INT 4
37786: NEG
37787: PUSH
37788: LD_INT 1
37790: PUSH
37791: EMPTY
37792: LIST
37793: LIST
37794: PUSH
37795: LD_INT 5
37797: NEG
37798: PUSH
37799: LD_INT 0
37801: PUSH
37802: EMPTY
37803: LIST
37804: LIST
37805: PUSH
37806: LD_INT 5
37808: NEG
37809: PUSH
37810: LD_INT 1
37812: NEG
37813: PUSH
37814: EMPTY
37815: LIST
37816: LIST
37817: PUSH
37818: LD_INT 5
37820: NEG
37821: PUSH
37822: LD_INT 1
37824: PUSH
37825: EMPTY
37826: LIST
37827: LIST
37828: PUSH
37829: LD_INT 6
37831: NEG
37832: PUSH
37833: LD_INT 0
37835: PUSH
37836: EMPTY
37837: LIST
37838: LIST
37839: PUSH
37840: LD_INT 6
37842: NEG
37843: PUSH
37844: LD_INT 1
37846: NEG
37847: PUSH
37848: EMPTY
37849: LIST
37850: LIST
37851: PUSH
37852: EMPTY
37853: LIST
37854: LIST
37855: LIST
37856: LIST
37857: LIST
37858: LIST
37859: LIST
37860: LIST
37861: LIST
37862: LIST
37863: LIST
37864: LIST
37865: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
37866: LD_ADDR_VAR 0 34
37870: PUSH
37871: LD_INT 2
37873: NEG
37874: PUSH
37875: LD_INT 3
37877: NEG
37878: PUSH
37879: EMPTY
37880: LIST
37881: LIST
37882: PUSH
37883: LD_INT 3
37885: NEG
37886: PUSH
37887: LD_INT 2
37889: NEG
37890: PUSH
37891: EMPTY
37892: LIST
37893: LIST
37894: PUSH
37895: LD_INT 3
37897: NEG
37898: PUSH
37899: LD_INT 3
37901: NEG
37902: PUSH
37903: EMPTY
37904: LIST
37905: LIST
37906: PUSH
37907: LD_INT 3
37909: NEG
37910: PUSH
37911: LD_INT 4
37913: NEG
37914: PUSH
37915: EMPTY
37916: LIST
37917: LIST
37918: PUSH
37919: LD_INT 4
37921: NEG
37922: PUSH
37923: LD_INT 3
37925: NEG
37926: PUSH
37927: EMPTY
37928: LIST
37929: LIST
37930: PUSH
37931: LD_INT 4
37933: NEG
37934: PUSH
37935: LD_INT 4
37937: NEG
37938: PUSH
37939: EMPTY
37940: LIST
37941: LIST
37942: PUSH
37943: LD_INT 4
37945: NEG
37946: PUSH
37947: LD_INT 5
37949: NEG
37950: PUSH
37951: EMPTY
37952: LIST
37953: LIST
37954: PUSH
37955: LD_INT 5
37957: NEG
37958: PUSH
37959: LD_INT 4
37961: NEG
37962: PUSH
37963: EMPTY
37964: LIST
37965: LIST
37966: PUSH
37967: LD_INT 5
37969: NEG
37970: PUSH
37971: LD_INT 5
37973: NEG
37974: PUSH
37975: EMPTY
37976: LIST
37977: LIST
37978: PUSH
37979: LD_INT 5
37981: NEG
37982: PUSH
37983: LD_INT 6
37985: NEG
37986: PUSH
37987: EMPTY
37988: LIST
37989: LIST
37990: PUSH
37991: LD_INT 6
37993: NEG
37994: PUSH
37995: LD_INT 5
37997: NEG
37998: PUSH
37999: EMPTY
38000: LIST
38001: LIST
38002: PUSH
38003: LD_INT 6
38005: NEG
38006: PUSH
38007: LD_INT 6
38009: NEG
38010: PUSH
38011: EMPTY
38012: LIST
38013: LIST
38014: PUSH
38015: EMPTY
38016: LIST
38017: LIST
38018: LIST
38019: LIST
38020: LIST
38021: LIST
38022: LIST
38023: LIST
38024: LIST
38025: LIST
38026: LIST
38027: LIST
38028: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
38029: LD_ADDR_VAR 0 41
38033: PUSH
38034: LD_INT 0
38036: PUSH
38037: LD_INT 2
38039: NEG
38040: PUSH
38041: EMPTY
38042: LIST
38043: LIST
38044: PUSH
38045: LD_INT 1
38047: NEG
38048: PUSH
38049: LD_INT 3
38051: NEG
38052: PUSH
38053: EMPTY
38054: LIST
38055: LIST
38056: PUSH
38057: LD_INT 1
38059: PUSH
38060: LD_INT 2
38062: NEG
38063: PUSH
38064: EMPTY
38065: LIST
38066: LIST
38067: PUSH
38068: EMPTY
38069: LIST
38070: LIST
38071: LIST
38072: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
38073: LD_ADDR_VAR 0 42
38077: PUSH
38078: LD_INT 2
38080: PUSH
38081: LD_INT 0
38083: PUSH
38084: EMPTY
38085: LIST
38086: LIST
38087: PUSH
38088: LD_INT 2
38090: PUSH
38091: LD_INT 1
38093: NEG
38094: PUSH
38095: EMPTY
38096: LIST
38097: LIST
38098: PUSH
38099: LD_INT 3
38101: PUSH
38102: LD_INT 1
38104: PUSH
38105: EMPTY
38106: LIST
38107: LIST
38108: PUSH
38109: EMPTY
38110: LIST
38111: LIST
38112: LIST
38113: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
38114: LD_ADDR_VAR 0 43
38118: PUSH
38119: LD_INT 2
38121: PUSH
38122: LD_INT 2
38124: PUSH
38125: EMPTY
38126: LIST
38127: LIST
38128: PUSH
38129: LD_INT 3
38131: PUSH
38132: LD_INT 2
38134: PUSH
38135: EMPTY
38136: LIST
38137: LIST
38138: PUSH
38139: LD_INT 2
38141: PUSH
38142: LD_INT 3
38144: PUSH
38145: EMPTY
38146: LIST
38147: LIST
38148: PUSH
38149: EMPTY
38150: LIST
38151: LIST
38152: LIST
38153: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
38154: LD_ADDR_VAR 0 44
38158: PUSH
38159: LD_INT 0
38161: PUSH
38162: LD_INT 2
38164: PUSH
38165: EMPTY
38166: LIST
38167: LIST
38168: PUSH
38169: LD_INT 1
38171: PUSH
38172: LD_INT 3
38174: PUSH
38175: EMPTY
38176: LIST
38177: LIST
38178: PUSH
38179: LD_INT 1
38181: NEG
38182: PUSH
38183: LD_INT 2
38185: PUSH
38186: EMPTY
38187: LIST
38188: LIST
38189: PUSH
38190: EMPTY
38191: LIST
38192: LIST
38193: LIST
38194: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
38195: LD_ADDR_VAR 0 45
38199: PUSH
38200: LD_INT 2
38202: NEG
38203: PUSH
38204: LD_INT 0
38206: PUSH
38207: EMPTY
38208: LIST
38209: LIST
38210: PUSH
38211: LD_INT 2
38213: NEG
38214: PUSH
38215: LD_INT 1
38217: PUSH
38218: EMPTY
38219: LIST
38220: LIST
38221: PUSH
38222: LD_INT 3
38224: NEG
38225: PUSH
38226: LD_INT 1
38228: NEG
38229: PUSH
38230: EMPTY
38231: LIST
38232: LIST
38233: PUSH
38234: EMPTY
38235: LIST
38236: LIST
38237: LIST
38238: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
38239: LD_ADDR_VAR 0 46
38243: PUSH
38244: LD_INT 2
38246: NEG
38247: PUSH
38248: LD_INT 2
38250: NEG
38251: PUSH
38252: EMPTY
38253: LIST
38254: LIST
38255: PUSH
38256: LD_INT 2
38258: NEG
38259: PUSH
38260: LD_INT 3
38262: NEG
38263: PUSH
38264: EMPTY
38265: LIST
38266: LIST
38267: PUSH
38268: LD_INT 3
38270: NEG
38271: PUSH
38272: LD_INT 2
38274: NEG
38275: PUSH
38276: EMPTY
38277: LIST
38278: LIST
38279: PUSH
38280: EMPTY
38281: LIST
38282: LIST
38283: LIST
38284: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
38285: LD_ADDR_VAR 0 47
38289: PUSH
38290: LD_INT 2
38292: NEG
38293: PUSH
38294: LD_INT 3
38296: NEG
38297: PUSH
38298: EMPTY
38299: LIST
38300: LIST
38301: PUSH
38302: LD_INT 1
38304: NEG
38305: PUSH
38306: LD_INT 3
38308: NEG
38309: PUSH
38310: EMPTY
38311: LIST
38312: LIST
38313: PUSH
38314: EMPTY
38315: LIST
38316: LIST
38317: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
38318: LD_ADDR_VAR 0 48
38322: PUSH
38323: LD_INT 1
38325: PUSH
38326: LD_INT 2
38328: NEG
38329: PUSH
38330: EMPTY
38331: LIST
38332: LIST
38333: PUSH
38334: LD_INT 2
38336: PUSH
38337: LD_INT 1
38339: NEG
38340: PUSH
38341: EMPTY
38342: LIST
38343: LIST
38344: PUSH
38345: EMPTY
38346: LIST
38347: LIST
38348: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
38349: LD_ADDR_VAR 0 49
38353: PUSH
38354: LD_INT 3
38356: PUSH
38357: LD_INT 1
38359: PUSH
38360: EMPTY
38361: LIST
38362: LIST
38363: PUSH
38364: LD_INT 3
38366: PUSH
38367: LD_INT 2
38369: PUSH
38370: EMPTY
38371: LIST
38372: LIST
38373: PUSH
38374: EMPTY
38375: LIST
38376: LIST
38377: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
38378: LD_ADDR_VAR 0 50
38382: PUSH
38383: LD_INT 2
38385: PUSH
38386: LD_INT 3
38388: PUSH
38389: EMPTY
38390: LIST
38391: LIST
38392: PUSH
38393: LD_INT 1
38395: PUSH
38396: LD_INT 3
38398: PUSH
38399: EMPTY
38400: LIST
38401: LIST
38402: PUSH
38403: EMPTY
38404: LIST
38405: LIST
38406: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
38407: LD_ADDR_VAR 0 51
38411: PUSH
38412: LD_INT 1
38414: NEG
38415: PUSH
38416: LD_INT 2
38418: PUSH
38419: EMPTY
38420: LIST
38421: LIST
38422: PUSH
38423: LD_INT 2
38425: NEG
38426: PUSH
38427: LD_INT 1
38429: PUSH
38430: EMPTY
38431: LIST
38432: LIST
38433: PUSH
38434: EMPTY
38435: LIST
38436: LIST
38437: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
38438: LD_ADDR_VAR 0 52
38442: PUSH
38443: LD_INT 3
38445: NEG
38446: PUSH
38447: LD_INT 1
38449: NEG
38450: PUSH
38451: EMPTY
38452: LIST
38453: LIST
38454: PUSH
38455: LD_INT 3
38457: NEG
38458: PUSH
38459: LD_INT 2
38461: NEG
38462: PUSH
38463: EMPTY
38464: LIST
38465: LIST
38466: PUSH
38467: EMPTY
38468: LIST
38469: LIST
38470: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
38471: LD_ADDR_VAR 0 53
38475: PUSH
38476: LD_INT 1
38478: NEG
38479: PUSH
38480: LD_INT 3
38482: NEG
38483: PUSH
38484: EMPTY
38485: LIST
38486: LIST
38487: PUSH
38488: LD_INT 0
38490: PUSH
38491: LD_INT 3
38493: NEG
38494: PUSH
38495: EMPTY
38496: LIST
38497: LIST
38498: PUSH
38499: LD_INT 1
38501: PUSH
38502: LD_INT 2
38504: NEG
38505: PUSH
38506: EMPTY
38507: LIST
38508: LIST
38509: PUSH
38510: EMPTY
38511: LIST
38512: LIST
38513: LIST
38514: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
38515: LD_ADDR_VAR 0 54
38519: PUSH
38520: LD_INT 2
38522: PUSH
38523: LD_INT 1
38525: NEG
38526: PUSH
38527: EMPTY
38528: LIST
38529: LIST
38530: PUSH
38531: LD_INT 3
38533: PUSH
38534: LD_INT 0
38536: PUSH
38537: EMPTY
38538: LIST
38539: LIST
38540: PUSH
38541: LD_INT 3
38543: PUSH
38544: LD_INT 1
38546: PUSH
38547: EMPTY
38548: LIST
38549: LIST
38550: PUSH
38551: EMPTY
38552: LIST
38553: LIST
38554: LIST
38555: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
38556: LD_ADDR_VAR 0 55
38560: PUSH
38561: LD_INT 3
38563: PUSH
38564: LD_INT 2
38566: PUSH
38567: EMPTY
38568: LIST
38569: LIST
38570: PUSH
38571: LD_INT 3
38573: PUSH
38574: LD_INT 3
38576: PUSH
38577: EMPTY
38578: LIST
38579: LIST
38580: PUSH
38581: LD_INT 2
38583: PUSH
38584: LD_INT 3
38586: PUSH
38587: EMPTY
38588: LIST
38589: LIST
38590: PUSH
38591: EMPTY
38592: LIST
38593: LIST
38594: LIST
38595: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
38596: LD_ADDR_VAR 0 56
38600: PUSH
38601: LD_INT 1
38603: PUSH
38604: LD_INT 3
38606: PUSH
38607: EMPTY
38608: LIST
38609: LIST
38610: PUSH
38611: LD_INT 0
38613: PUSH
38614: LD_INT 3
38616: PUSH
38617: EMPTY
38618: LIST
38619: LIST
38620: PUSH
38621: LD_INT 1
38623: NEG
38624: PUSH
38625: LD_INT 2
38627: PUSH
38628: EMPTY
38629: LIST
38630: LIST
38631: PUSH
38632: EMPTY
38633: LIST
38634: LIST
38635: LIST
38636: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
38637: LD_ADDR_VAR 0 57
38641: PUSH
38642: LD_INT 2
38644: NEG
38645: PUSH
38646: LD_INT 1
38648: PUSH
38649: EMPTY
38650: LIST
38651: LIST
38652: PUSH
38653: LD_INT 3
38655: NEG
38656: PUSH
38657: LD_INT 0
38659: PUSH
38660: EMPTY
38661: LIST
38662: LIST
38663: PUSH
38664: LD_INT 3
38666: NEG
38667: PUSH
38668: LD_INT 1
38670: NEG
38671: PUSH
38672: EMPTY
38673: LIST
38674: LIST
38675: PUSH
38676: EMPTY
38677: LIST
38678: LIST
38679: LIST
38680: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
38681: LD_ADDR_VAR 0 58
38685: PUSH
38686: LD_INT 2
38688: NEG
38689: PUSH
38690: LD_INT 3
38692: NEG
38693: PUSH
38694: EMPTY
38695: LIST
38696: LIST
38697: PUSH
38698: LD_INT 3
38700: NEG
38701: PUSH
38702: LD_INT 2
38704: NEG
38705: PUSH
38706: EMPTY
38707: LIST
38708: LIST
38709: PUSH
38710: LD_INT 3
38712: NEG
38713: PUSH
38714: LD_INT 3
38716: NEG
38717: PUSH
38718: EMPTY
38719: LIST
38720: LIST
38721: PUSH
38722: EMPTY
38723: LIST
38724: LIST
38725: LIST
38726: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
38727: LD_ADDR_VAR 0 59
38731: PUSH
38732: LD_INT 1
38734: NEG
38735: PUSH
38736: LD_INT 2
38738: NEG
38739: PUSH
38740: EMPTY
38741: LIST
38742: LIST
38743: PUSH
38744: LD_INT 0
38746: PUSH
38747: LD_INT 2
38749: NEG
38750: PUSH
38751: EMPTY
38752: LIST
38753: LIST
38754: PUSH
38755: LD_INT 1
38757: PUSH
38758: LD_INT 1
38760: NEG
38761: PUSH
38762: EMPTY
38763: LIST
38764: LIST
38765: PUSH
38766: EMPTY
38767: LIST
38768: LIST
38769: LIST
38770: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
38771: LD_ADDR_VAR 0 60
38775: PUSH
38776: LD_INT 1
38778: PUSH
38779: LD_INT 1
38781: NEG
38782: PUSH
38783: EMPTY
38784: LIST
38785: LIST
38786: PUSH
38787: LD_INT 2
38789: PUSH
38790: LD_INT 0
38792: PUSH
38793: EMPTY
38794: LIST
38795: LIST
38796: PUSH
38797: LD_INT 2
38799: PUSH
38800: LD_INT 1
38802: PUSH
38803: EMPTY
38804: LIST
38805: LIST
38806: PUSH
38807: EMPTY
38808: LIST
38809: LIST
38810: LIST
38811: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
38812: LD_ADDR_VAR 0 61
38816: PUSH
38817: LD_INT 2
38819: PUSH
38820: LD_INT 1
38822: PUSH
38823: EMPTY
38824: LIST
38825: LIST
38826: PUSH
38827: LD_INT 2
38829: PUSH
38830: LD_INT 2
38832: PUSH
38833: EMPTY
38834: LIST
38835: LIST
38836: PUSH
38837: LD_INT 1
38839: PUSH
38840: LD_INT 2
38842: PUSH
38843: EMPTY
38844: LIST
38845: LIST
38846: PUSH
38847: EMPTY
38848: LIST
38849: LIST
38850: LIST
38851: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
38852: LD_ADDR_VAR 0 62
38856: PUSH
38857: LD_INT 1
38859: PUSH
38860: LD_INT 2
38862: PUSH
38863: EMPTY
38864: LIST
38865: LIST
38866: PUSH
38867: LD_INT 0
38869: PUSH
38870: LD_INT 2
38872: PUSH
38873: EMPTY
38874: LIST
38875: LIST
38876: PUSH
38877: LD_INT 1
38879: NEG
38880: PUSH
38881: LD_INT 1
38883: PUSH
38884: EMPTY
38885: LIST
38886: LIST
38887: PUSH
38888: EMPTY
38889: LIST
38890: LIST
38891: LIST
38892: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
38893: LD_ADDR_VAR 0 63
38897: PUSH
38898: LD_INT 1
38900: NEG
38901: PUSH
38902: LD_INT 1
38904: PUSH
38905: EMPTY
38906: LIST
38907: LIST
38908: PUSH
38909: LD_INT 2
38911: NEG
38912: PUSH
38913: LD_INT 0
38915: PUSH
38916: EMPTY
38917: LIST
38918: LIST
38919: PUSH
38920: LD_INT 2
38922: NEG
38923: PUSH
38924: LD_INT 1
38926: NEG
38927: PUSH
38928: EMPTY
38929: LIST
38930: LIST
38931: PUSH
38932: EMPTY
38933: LIST
38934: LIST
38935: LIST
38936: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38937: LD_ADDR_VAR 0 64
38941: PUSH
38942: LD_INT 1
38944: NEG
38945: PUSH
38946: LD_INT 2
38948: NEG
38949: PUSH
38950: EMPTY
38951: LIST
38952: LIST
38953: PUSH
38954: LD_INT 2
38956: NEG
38957: PUSH
38958: LD_INT 1
38960: NEG
38961: PUSH
38962: EMPTY
38963: LIST
38964: LIST
38965: PUSH
38966: LD_INT 2
38968: NEG
38969: PUSH
38970: LD_INT 2
38972: NEG
38973: PUSH
38974: EMPTY
38975: LIST
38976: LIST
38977: PUSH
38978: EMPTY
38979: LIST
38980: LIST
38981: LIST
38982: ST_TO_ADDR
// end ; 2 :
38983: GO 42249
38985: LD_INT 2
38987: DOUBLE
38988: EQUAL
38989: IFTRUE 38993
38991: GO 42248
38993: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
38994: LD_ADDR_VAR 0 29
38998: PUSH
38999: LD_INT 4
39001: PUSH
39002: LD_INT 0
39004: PUSH
39005: EMPTY
39006: LIST
39007: LIST
39008: PUSH
39009: LD_INT 4
39011: PUSH
39012: LD_INT 1
39014: NEG
39015: PUSH
39016: EMPTY
39017: LIST
39018: LIST
39019: PUSH
39020: LD_INT 5
39022: PUSH
39023: LD_INT 0
39025: PUSH
39026: EMPTY
39027: LIST
39028: LIST
39029: PUSH
39030: LD_INT 5
39032: PUSH
39033: LD_INT 1
39035: PUSH
39036: EMPTY
39037: LIST
39038: LIST
39039: PUSH
39040: LD_INT 4
39042: PUSH
39043: LD_INT 1
39045: PUSH
39046: EMPTY
39047: LIST
39048: LIST
39049: PUSH
39050: LD_INT 3
39052: PUSH
39053: LD_INT 0
39055: PUSH
39056: EMPTY
39057: LIST
39058: LIST
39059: PUSH
39060: LD_INT 3
39062: PUSH
39063: LD_INT 1
39065: NEG
39066: PUSH
39067: EMPTY
39068: LIST
39069: LIST
39070: PUSH
39071: LD_INT 3
39073: PUSH
39074: LD_INT 2
39076: NEG
39077: PUSH
39078: EMPTY
39079: LIST
39080: LIST
39081: PUSH
39082: LD_INT 5
39084: PUSH
39085: LD_INT 2
39087: PUSH
39088: EMPTY
39089: LIST
39090: LIST
39091: PUSH
39092: LD_INT 3
39094: PUSH
39095: LD_INT 3
39097: PUSH
39098: EMPTY
39099: LIST
39100: LIST
39101: PUSH
39102: LD_INT 3
39104: PUSH
39105: LD_INT 2
39107: PUSH
39108: EMPTY
39109: LIST
39110: LIST
39111: PUSH
39112: LD_INT 4
39114: PUSH
39115: LD_INT 3
39117: PUSH
39118: EMPTY
39119: LIST
39120: LIST
39121: PUSH
39122: LD_INT 4
39124: PUSH
39125: LD_INT 4
39127: PUSH
39128: EMPTY
39129: LIST
39130: LIST
39131: PUSH
39132: LD_INT 3
39134: PUSH
39135: LD_INT 4
39137: PUSH
39138: EMPTY
39139: LIST
39140: LIST
39141: PUSH
39142: LD_INT 2
39144: PUSH
39145: LD_INT 3
39147: PUSH
39148: EMPTY
39149: LIST
39150: LIST
39151: PUSH
39152: LD_INT 2
39154: PUSH
39155: LD_INT 2
39157: PUSH
39158: EMPTY
39159: LIST
39160: LIST
39161: PUSH
39162: LD_INT 4
39164: PUSH
39165: LD_INT 2
39167: PUSH
39168: EMPTY
39169: LIST
39170: LIST
39171: PUSH
39172: LD_INT 2
39174: PUSH
39175: LD_INT 4
39177: PUSH
39178: EMPTY
39179: LIST
39180: LIST
39181: PUSH
39182: LD_INT 0
39184: PUSH
39185: LD_INT 4
39187: PUSH
39188: EMPTY
39189: LIST
39190: LIST
39191: PUSH
39192: LD_INT 0
39194: PUSH
39195: LD_INT 3
39197: PUSH
39198: EMPTY
39199: LIST
39200: LIST
39201: PUSH
39202: LD_INT 1
39204: PUSH
39205: LD_INT 4
39207: PUSH
39208: EMPTY
39209: LIST
39210: LIST
39211: PUSH
39212: LD_INT 1
39214: PUSH
39215: LD_INT 5
39217: PUSH
39218: EMPTY
39219: LIST
39220: LIST
39221: PUSH
39222: LD_INT 0
39224: PUSH
39225: LD_INT 5
39227: PUSH
39228: EMPTY
39229: LIST
39230: LIST
39231: PUSH
39232: LD_INT 1
39234: NEG
39235: PUSH
39236: LD_INT 4
39238: PUSH
39239: EMPTY
39240: LIST
39241: LIST
39242: PUSH
39243: LD_INT 1
39245: NEG
39246: PUSH
39247: LD_INT 3
39249: PUSH
39250: EMPTY
39251: LIST
39252: LIST
39253: PUSH
39254: LD_INT 2
39256: PUSH
39257: LD_INT 5
39259: PUSH
39260: EMPTY
39261: LIST
39262: LIST
39263: PUSH
39264: LD_INT 2
39266: NEG
39267: PUSH
39268: LD_INT 3
39270: PUSH
39271: EMPTY
39272: LIST
39273: LIST
39274: PUSH
39275: LD_INT 3
39277: NEG
39278: PUSH
39279: LD_INT 0
39281: PUSH
39282: EMPTY
39283: LIST
39284: LIST
39285: PUSH
39286: LD_INT 3
39288: NEG
39289: PUSH
39290: LD_INT 1
39292: NEG
39293: PUSH
39294: EMPTY
39295: LIST
39296: LIST
39297: PUSH
39298: LD_INT 2
39300: NEG
39301: PUSH
39302: LD_INT 0
39304: PUSH
39305: EMPTY
39306: LIST
39307: LIST
39308: PUSH
39309: LD_INT 2
39311: NEG
39312: PUSH
39313: LD_INT 1
39315: PUSH
39316: EMPTY
39317: LIST
39318: LIST
39319: PUSH
39320: LD_INT 3
39322: NEG
39323: PUSH
39324: LD_INT 1
39326: PUSH
39327: EMPTY
39328: LIST
39329: LIST
39330: PUSH
39331: LD_INT 4
39333: NEG
39334: PUSH
39335: LD_INT 0
39337: PUSH
39338: EMPTY
39339: LIST
39340: LIST
39341: PUSH
39342: LD_INT 4
39344: NEG
39345: PUSH
39346: LD_INT 1
39348: NEG
39349: PUSH
39350: EMPTY
39351: LIST
39352: LIST
39353: PUSH
39354: LD_INT 4
39356: NEG
39357: PUSH
39358: LD_INT 2
39360: NEG
39361: PUSH
39362: EMPTY
39363: LIST
39364: LIST
39365: PUSH
39366: LD_INT 2
39368: NEG
39369: PUSH
39370: LD_INT 2
39372: PUSH
39373: EMPTY
39374: LIST
39375: LIST
39376: PUSH
39377: LD_INT 4
39379: NEG
39380: PUSH
39381: LD_INT 4
39383: NEG
39384: PUSH
39385: EMPTY
39386: LIST
39387: LIST
39388: PUSH
39389: LD_INT 4
39391: NEG
39392: PUSH
39393: LD_INT 5
39395: NEG
39396: PUSH
39397: EMPTY
39398: LIST
39399: LIST
39400: PUSH
39401: LD_INT 3
39403: NEG
39404: PUSH
39405: LD_INT 4
39407: NEG
39408: PUSH
39409: EMPTY
39410: LIST
39411: LIST
39412: PUSH
39413: LD_INT 3
39415: NEG
39416: PUSH
39417: LD_INT 3
39419: NEG
39420: PUSH
39421: EMPTY
39422: LIST
39423: LIST
39424: PUSH
39425: LD_INT 4
39427: NEG
39428: PUSH
39429: LD_INT 3
39431: NEG
39432: PUSH
39433: EMPTY
39434: LIST
39435: LIST
39436: PUSH
39437: LD_INT 5
39439: NEG
39440: PUSH
39441: LD_INT 4
39443: NEG
39444: PUSH
39445: EMPTY
39446: LIST
39447: LIST
39448: PUSH
39449: LD_INT 5
39451: NEG
39452: PUSH
39453: LD_INT 5
39455: NEG
39456: PUSH
39457: EMPTY
39458: LIST
39459: LIST
39460: PUSH
39461: LD_INT 3
39463: NEG
39464: PUSH
39465: LD_INT 5
39467: NEG
39468: PUSH
39469: EMPTY
39470: LIST
39471: LIST
39472: PUSH
39473: LD_INT 5
39475: NEG
39476: PUSH
39477: LD_INT 3
39479: NEG
39480: PUSH
39481: EMPTY
39482: LIST
39483: LIST
39484: PUSH
39485: EMPTY
39486: LIST
39487: LIST
39488: LIST
39489: LIST
39490: LIST
39491: LIST
39492: LIST
39493: LIST
39494: LIST
39495: LIST
39496: LIST
39497: LIST
39498: LIST
39499: LIST
39500: LIST
39501: LIST
39502: LIST
39503: LIST
39504: LIST
39505: LIST
39506: LIST
39507: LIST
39508: LIST
39509: LIST
39510: LIST
39511: LIST
39512: LIST
39513: LIST
39514: LIST
39515: LIST
39516: LIST
39517: LIST
39518: LIST
39519: LIST
39520: LIST
39521: LIST
39522: LIST
39523: LIST
39524: LIST
39525: LIST
39526: LIST
39527: LIST
39528: LIST
39529: LIST
39530: LIST
39531: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
39532: LD_ADDR_VAR 0 30
39536: PUSH
39537: LD_INT 4
39539: PUSH
39540: LD_INT 4
39542: PUSH
39543: EMPTY
39544: LIST
39545: LIST
39546: PUSH
39547: LD_INT 4
39549: PUSH
39550: LD_INT 3
39552: PUSH
39553: EMPTY
39554: LIST
39555: LIST
39556: PUSH
39557: LD_INT 5
39559: PUSH
39560: LD_INT 4
39562: PUSH
39563: EMPTY
39564: LIST
39565: LIST
39566: PUSH
39567: LD_INT 5
39569: PUSH
39570: LD_INT 5
39572: PUSH
39573: EMPTY
39574: LIST
39575: LIST
39576: PUSH
39577: LD_INT 4
39579: PUSH
39580: LD_INT 5
39582: PUSH
39583: EMPTY
39584: LIST
39585: LIST
39586: PUSH
39587: LD_INT 3
39589: PUSH
39590: LD_INT 4
39592: PUSH
39593: EMPTY
39594: LIST
39595: LIST
39596: PUSH
39597: LD_INT 3
39599: PUSH
39600: LD_INT 3
39602: PUSH
39603: EMPTY
39604: LIST
39605: LIST
39606: PUSH
39607: LD_INT 5
39609: PUSH
39610: LD_INT 3
39612: PUSH
39613: EMPTY
39614: LIST
39615: LIST
39616: PUSH
39617: LD_INT 3
39619: PUSH
39620: LD_INT 5
39622: PUSH
39623: EMPTY
39624: LIST
39625: LIST
39626: PUSH
39627: LD_INT 0
39629: PUSH
39630: LD_INT 3
39632: PUSH
39633: EMPTY
39634: LIST
39635: LIST
39636: PUSH
39637: LD_INT 0
39639: PUSH
39640: LD_INT 2
39642: PUSH
39643: EMPTY
39644: LIST
39645: LIST
39646: PUSH
39647: LD_INT 1
39649: PUSH
39650: LD_INT 3
39652: PUSH
39653: EMPTY
39654: LIST
39655: LIST
39656: PUSH
39657: LD_INT 1
39659: PUSH
39660: LD_INT 4
39662: PUSH
39663: EMPTY
39664: LIST
39665: LIST
39666: PUSH
39667: LD_INT 0
39669: PUSH
39670: LD_INT 4
39672: PUSH
39673: EMPTY
39674: LIST
39675: LIST
39676: PUSH
39677: LD_INT 1
39679: NEG
39680: PUSH
39681: LD_INT 3
39683: PUSH
39684: EMPTY
39685: LIST
39686: LIST
39687: PUSH
39688: LD_INT 1
39690: NEG
39691: PUSH
39692: LD_INT 2
39694: PUSH
39695: EMPTY
39696: LIST
39697: LIST
39698: PUSH
39699: LD_INT 2
39701: PUSH
39702: LD_INT 4
39704: PUSH
39705: EMPTY
39706: LIST
39707: LIST
39708: PUSH
39709: LD_INT 2
39711: NEG
39712: PUSH
39713: LD_INT 2
39715: PUSH
39716: EMPTY
39717: LIST
39718: LIST
39719: PUSH
39720: LD_INT 4
39722: NEG
39723: PUSH
39724: LD_INT 0
39726: PUSH
39727: EMPTY
39728: LIST
39729: LIST
39730: PUSH
39731: LD_INT 4
39733: NEG
39734: PUSH
39735: LD_INT 1
39737: NEG
39738: PUSH
39739: EMPTY
39740: LIST
39741: LIST
39742: PUSH
39743: LD_INT 3
39745: NEG
39746: PUSH
39747: LD_INT 0
39749: PUSH
39750: EMPTY
39751: LIST
39752: LIST
39753: PUSH
39754: LD_INT 3
39756: NEG
39757: PUSH
39758: LD_INT 1
39760: PUSH
39761: EMPTY
39762: LIST
39763: LIST
39764: PUSH
39765: LD_INT 4
39767: NEG
39768: PUSH
39769: LD_INT 1
39771: PUSH
39772: EMPTY
39773: LIST
39774: LIST
39775: PUSH
39776: LD_INT 5
39778: NEG
39779: PUSH
39780: LD_INT 0
39782: PUSH
39783: EMPTY
39784: LIST
39785: LIST
39786: PUSH
39787: LD_INT 5
39789: NEG
39790: PUSH
39791: LD_INT 1
39793: NEG
39794: PUSH
39795: EMPTY
39796: LIST
39797: LIST
39798: PUSH
39799: LD_INT 5
39801: NEG
39802: PUSH
39803: LD_INT 2
39805: NEG
39806: PUSH
39807: EMPTY
39808: LIST
39809: LIST
39810: PUSH
39811: LD_INT 3
39813: NEG
39814: PUSH
39815: LD_INT 2
39817: PUSH
39818: EMPTY
39819: LIST
39820: LIST
39821: PUSH
39822: LD_INT 3
39824: NEG
39825: PUSH
39826: LD_INT 3
39828: NEG
39829: PUSH
39830: EMPTY
39831: LIST
39832: LIST
39833: PUSH
39834: LD_INT 3
39836: NEG
39837: PUSH
39838: LD_INT 4
39840: NEG
39841: PUSH
39842: EMPTY
39843: LIST
39844: LIST
39845: PUSH
39846: LD_INT 2
39848: NEG
39849: PUSH
39850: LD_INT 3
39852: NEG
39853: PUSH
39854: EMPTY
39855: LIST
39856: LIST
39857: PUSH
39858: LD_INT 2
39860: NEG
39861: PUSH
39862: LD_INT 2
39864: NEG
39865: PUSH
39866: EMPTY
39867: LIST
39868: LIST
39869: PUSH
39870: LD_INT 3
39872: NEG
39873: PUSH
39874: LD_INT 2
39876: NEG
39877: PUSH
39878: EMPTY
39879: LIST
39880: LIST
39881: PUSH
39882: LD_INT 4
39884: NEG
39885: PUSH
39886: LD_INT 3
39888: NEG
39889: PUSH
39890: EMPTY
39891: LIST
39892: LIST
39893: PUSH
39894: LD_INT 4
39896: NEG
39897: PUSH
39898: LD_INT 4
39900: NEG
39901: PUSH
39902: EMPTY
39903: LIST
39904: LIST
39905: PUSH
39906: LD_INT 2
39908: NEG
39909: PUSH
39910: LD_INT 4
39912: NEG
39913: PUSH
39914: EMPTY
39915: LIST
39916: LIST
39917: PUSH
39918: LD_INT 4
39920: NEG
39921: PUSH
39922: LD_INT 2
39924: NEG
39925: PUSH
39926: EMPTY
39927: LIST
39928: LIST
39929: PUSH
39930: LD_INT 0
39932: PUSH
39933: LD_INT 4
39935: NEG
39936: PUSH
39937: EMPTY
39938: LIST
39939: LIST
39940: PUSH
39941: LD_INT 0
39943: PUSH
39944: LD_INT 5
39946: NEG
39947: PUSH
39948: EMPTY
39949: LIST
39950: LIST
39951: PUSH
39952: LD_INT 1
39954: PUSH
39955: LD_INT 4
39957: NEG
39958: PUSH
39959: EMPTY
39960: LIST
39961: LIST
39962: PUSH
39963: LD_INT 1
39965: PUSH
39966: LD_INT 3
39968: NEG
39969: PUSH
39970: EMPTY
39971: LIST
39972: LIST
39973: PUSH
39974: LD_INT 0
39976: PUSH
39977: LD_INT 3
39979: NEG
39980: PUSH
39981: EMPTY
39982: LIST
39983: LIST
39984: PUSH
39985: LD_INT 1
39987: NEG
39988: PUSH
39989: LD_INT 4
39991: NEG
39992: PUSH
39993: EMPTY
39994: LIST
39995: LIST
39996: PUSH
39997: LD_INT 1
39999: NEG
40000: PUSH
40001: LD_INT 5
40003: NEG
40004: PUSH
40005: EMPTY
40006: LIST
40007: LIST
40008: PUSH
40009: LD_INT 2
40011: PUSH
40012: LD_INT 3
40014: NEG
40015: PUSH
40016: EMPTY
40017: LIST
40018: LIST
40019: PUSH
40020: LD_INT 2
40022: NEG
40023: PUSH
40024: LD_INT 5
40026: NEG
40027: PUSH
40028: EMPTY
40029: LIST
40030: LIST
40031: PUSH
40032: EMPTY
40033: LIST
40034: LIST
40035: LIST
40036: LIST
40037: LIST
40038: LIST
40039: LIST
40040: LIST
40041: LIST
40042: LIST
40043: LIST
40044: LIST
40045: LIST
40046: LIST
40047: LIST
40048: LIST
40049: LIST
40050: LIST
40051: LIST
40052: LIST
40053: LIST
40054: LIST
40055: LIST
40056: LIST
40057: LIST
40058: LIST
40059: LIST
40060: LIST
40061: LIST
40062: LIST
40063: LIST
40064: LIST
40065: LIST
40066: LIST
40067: LIST
40068: LIST
40069: LIST
40070: LIST
40071: LIST
40072: LIST
40073: LIST
40074: LIST
40075: LIST
40076: LIST
40077: LIST
40078: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
40079: LD_ADDR_VAR 0 31
40083: PUSH
40084: LD_INT 0
40086: PUSH
40087: LD_INT 4
40089: PUSH
40090: EMPTY
40091: LIST
40092: LIST
40093: PUSH
40094: LD_INT 0
40096: PUSH
40097: LD_INT 3
40099: PUSH
40100: EMPTY
40101: LIST
40102: LIST
40103: PUSH
40104: LD_INT 1
40106: PUSH
40107: LD_INT 4
40109: PUSH
40110: EMPTY
40111: LIST
40112: LIST
40113: PUSH
40114: LD_INT 1
40116: PUSH
40117: LD_INT 5
40119: PUSH
40120: EMPTY
40121: LIST
40122: LIST
40123: PUSH
40124: LD_INT 0
40126: PUSH
40127: LD_INT 5
40129: PUSH
40130: EMPTY
40131: LIST
40132: LIST
40133: PUSH
40134: LD_INT 1
40136: NEG
40137: PUSH
40138: LD_INT 4
40140: PUSH
40141: EMPTY
40142: LIST
40143: LIST
40144: PUSH
40145: LD_INT 1
40147: NEG
40148: PUSH
40149: LD_INT 3
40151: PUSH
40152: EMPTY
40153: LIST
40154: LIST
40155: PUSH
40156: LD_INT 2
40158: PUSH
40159: LD_INT 5
40161: PUSH
40162: EMPTY
40163: LIST
40164: LIST
40165: PUSH
40166: LD_INT 2
40168: NEG
40169: PUSH
40170: LD_INT 3
40172: PUSH
40173: EMPTY
40174: LIST
40175: LIST
40176: PUSH
40177: LD_INT 3
40179: NEG
40180: PUSH
40181: LD_INT 0
40183: PUSH
40184: EMPTY
40185: LIST
40186: LIST
40187: PUSH
40188: LD_INT 3
40190: NEG
40191: PUSH
40192: LD_INT 1
40194: NEG
40195: PUSH
40196: EMPTY
40197: LIST
40198: LIST
40199: PUSH
40200: LD_INT 2
40202: NEG
40203: PUSH
40204: LD_INT 0
40206: PUSH
40207: EMPTY
40208: LIST
40209: LIST
40210: PUSH
40211: LD_INT 2
40213: NEG
40214: PUSH
40215: LD_INT 1
40217: PUSH
40218: EMPTY
40219: LIST
40220: LIST
40221: PUSH
40222: LD_INT 3
40224: NEG
40225: PUSH
40226: LD_INT 1
40228: PUSH
40229: EMPTY
40230: LIST
40231: LIST
40232: PUSH
40233: LD_INT 4
40235: NEG
40236: PUSH
40237: LD_INT 0
40239: PUSH
40240: EMPTY
40241: LIST
40242: LIST
40243: PUSH
40244: LD_INT 4
40246: NEG
40247: PUSH
40248: LD_INT 1
40250: NEG
40251: PUSH
40252: EMPTY
40253: LIST
40254: LIST
40255: PUSH
40256: LD_INT 4
40258: NEG
40259: PUSH
40260: LD_INT 2
40262: NEG
40263: PUSH
40264: EMPTY
40265: LIST
40266: LIST
40267: PUSH
40268: LD_INT 2
40270: NEG
40271: PUSH
40272: LD_INT 2
40274: PUSH
40275: EMPTY
40276: LIST
40277: LIST
40278: PUSH
40279: LD_INT 4
40281: NEG
40282: PUSH
40283: LD_INT 4
40285: NEG
40286: PUSH
40287: EMPTY
40288: LIST
40289: LIST
40290: PUSH
40291: LD_INT 4
40293: NEG
40294: PUSH
40295: LD_INT 5
40297: NEG
40298: PUSH
40299: EMPTY
40300: LIST
40301: LIST
40302: PUSH
40303: LD_INT 3
40305: NEG
40306: PUSH
40307: LD_INT 4
40309: NEG
40310: PUSH
40311: EMPTY
40312: LIST
40313: LIST
40314: PUSH
40315: LD_INT 3
40317: NEG
40318: PUSH
40319: LD_INT 3
40321: NEG
40322: PUSH
40323: EMPTY
40324: LIST
40325: LIST
40326: PUSH
40327: LD_INT 4
40329: NEG
40330: PUSH
40331: LD_INT 3
40333: NEG
40334: PUSH
40335: EMPTY
40336: LIST
40337: LIST
40338: PUSH
40339: LD_INT 5
40341: NEG
40342: PUSH
40343: LD_INT 4
40345: NEG
40346: PUSH
40347: EMPTY
40348: LIST
40349: LIST
40350: PUSH
40351: LD_INT 5
40353: NEG
40354: PUSH
40355: LD_INT 5
40357: NEG
40358: PUSH
40359: EMPTY
40360: LIST
40361: LIST
40362: PUSH
40363: LD_INT 3
40365: NEG
40366: PUSH
40367: LD_INT 5
40369: NEG
40370: PUSH
40371: EMPTY
40372: LIST
40373: LIST
40374: PUSH
40375: LD_INT 5
40377: NEG
40378: PUSH
40379: LD_INT 3
40381: NEG
40382: PUSH
40383: EMPTY
40384: LIST
40385: LIST
40386: PUSH
40387: LD_INT 0
40389: PUSH
40390: LD_INT 3
40392: NEG
40393: PUSH
40394: EMPTY
40395: LIST
40396: LIST
40397: PUSH
40398: LD_INT 0
40400: PUSH
40401: LD_INT 4
40403: NEG
40404: PUSH
40405: EMPTY
40406: LIST
40407: LIST
40408: PUSH
40409: LD_INT 1
40411: PUSH
40412: LD_INT 3
40414: NEG
40415: PUSH
40416: EMPTY
40417: LIST
40418: LIST
40419: PUSH
40420: LD_INT 1
40422: PUSH
40423: LD_INT 2
40425: NEG
40426: PUSH
40427: EMPTY
40428: LIST
40429: LIST
40430: PUSH
40431: LD_INT 0
40433: PUSH
40434: LD_INT 2
40436: NEG
40437: PUSH
40438: EMPTY
40439: LIST
40440: LIST
40441: PUSH
40442: LD_INT 1
40444: NEG
40445: PUSH
40446: LD_INT 3
40448: NEG
40449: PUSH
40450: EMPTY
40451: LIST
40452: LIST
40453: PUSH
40454: LD_INT 1
40456: NEG
40457: PUSH
40458: LD_INT 4
40460: NEG
40461: PUSH
40462: EMPTY
40463: LIST
40464: LIST
40465: PUSH
40466: LD_INT 2
40468: PUSH
40469: LD_INT 2
40471: NEG
40472: PUSH
40473: EMPTY
40474: LIST
40475: LIST
40476: PUSH
40477: LD_INT 2
40479: NEG
40480: PUSH
40481: LD_INT 4
40483: NEG
40484: PUSH
40485: EMPTY
40486: LIST
40487: LIST
40488: PUSH
40489: LD_INT 4
40491: PUSH
40492: LD_INT 0
40494: PUSH
40495: EMPTY
40496: LIST
40497: LIST
40498: PUSH
40499: LD_INT 4
40501: PUSH
40502: LD_INT 1
40504: NEG
40505: PUSH
40506: EMPTY
40507: LIST
40508: LIST
40509: PUSH
40510: LD_INT 5
40512: PUSH
40513: LD_INT 0
40515: PUSH
40516: EMPTY
40517: LIST
40518: LIST
40519: PUSH
40520: LD_INT 5
40522: PUSH
40523: LD_INT 1
40525: PUSH
40526: EMPTY
40527: LIST
40528: LIST
40529: PUSH
40530: LD_INT 4
40532: PUSH
40533: LD_INT 1
40535: PUSH
40536: EMPTY
40537: LIST
40538: LIST
40539: PUSH
40540: LD_INT 3
40542: PUSH
40543: LD_INT 0
40545: PUSH
40546: EMPTY
40547: LIST
40548: LIST
40549: PUSH
40550: LD_INT 3
40552: PUSH
40553: LD_INT 1
40555: NEG
40556: PUSH
40557: EMPTY
40558: LIST
40559: LIST
40560: PUSH
40561: LD_INT 3
40563: PUSH
40564: LD_INT 2
40566: NEG
40567: PUSH
40568: EMPTY
40569: LIST
40570: LIST
40571: PUSH
40572: LD_INT 5
40574: PUSH
40575: LD_INT 2
40577: PUSH
40578: EMPTY
40579: LIST
40580: LIST
40581: PUSH
40582: EMPTY
40583: LIST
40584: LIST
40585: LIST
40586: LIST
40587: LIST
40588: LIST
40589: LIST
40590: LIST
40591: LIST
40592: LIST
40593: LIST
40594: LIST
40595: LIST
40596: LIST
40597: LIST
40598: LIST
40599: LIST
40600: LIST
40601: LIST
40602: LIST
40603: LIST
40604: LIST
40605: LIST
40606: LIST
40607: LIST
40608: LIST
40609: LIST
40610: LIST
40611: LIST
40612: LIST
40613: LIST
40614: LIST
40615: LIST
40616: LIST
40617: LIST
40618: LIST
40619: LIST
40620: LIST
40621: LIST
40622: LIST
40623: LIST
40624: LIST
40625: LIST
40626: LIST
40627: LIST
40628: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
40629: LD_ADDR_VAR 0 32
40633: PUSH
40634: LD_INT 4
40636: NEG
40637: PUSH
40638: LD_INT 0
40640: PUSH
40641: EMPTY
40642: LIST
40643: LIST
40644: PUSH
40645: LD_INT 4
40647: NEG
40648: PUSH
40649: LD_INT 1
40651: NEG
40652: PUSH
40653: EMPTY
40654: LIST
40655: LIST
40656: PUSH
40657: LD_INT 3
40659: NEG
40660: PUSH
40661: LD_INT 0
40663: PUSH
40664: EMPTY
40665: LIST
40666: LIST
40667: PUSH
40668: LD_INT 3
40670: NEG
40671: PUSH
40672: LD_INT 1
40674: PUSH
40675: EMPTY
40676: LIST
40677: LIST
40678: PUSH
40679: LD_INT 4
40681: NEG
40682: PUSH
40683: LD_INT 1
40685: PUSH
40686: EMPTY
40687: LIST
40688: LIST
40689: PUSH
40690: LD_INT 5
40692: NEG
40693: PUSH
40694: LD_INT 0
40696: PUSH
40697: EMPTY
40698: LIST
40699: LIST
40700: PUSH
40701: LD_INT 5
40703: NEG
40704: PUSH
40705: LD_INT 1
40707: NEG
40708: PUSH
40709: EMPTY
40710: LIST
40711: LIST
40712: PUSH
40713: LD_INT 5
40715: NEG
40716: PUSH
40717: LD_INT 2
40719: NEG
40720: PUSH
40721: EMPTY
40722: LIST
40723: LIST
40724: PUSH
40725: LD_INT 3
40727: NEG
40728: PUSH
40729: LD_INT 2
40731: PUSH
40732: EMPTY
40733: LIST
40734: LIST
40735: PUSH
40736: LD_INT 3
40738: NEG
40739: PUSH
40740: LD_INT 3
40742: NEG
40743: PUSH
40744: EMPTY
40745: LIST
40746: LIST
40747: PUSH
40748: LD_INT 3
40750: NEG
40751: PUSH
40752: LD_INT 4
40754: NEG
40755: PUSH
40756: EMPTY
40757: LIST
40758: LIST
40759: PUSH
40760: LD_INT 2
40762: NEG
40763: PUSH
40764: LD_INT 3
40766: NEG
40767: PUSH
40768: EMPTY
40769: LIST
40770: LIST
40771: PUSH
40772: LD_INT 2
40774: NEG
40775: PUSH
40776: LD_INT 2
40778: NEG
40779: PUSH
40780: EMPTY
40781: LIST
40782: LIST
40783: PUSH
40784: LD_INT 3
40786: NEG
40787: PUSH
40788: LD_INT 2
40790: NEG
40791: PUSH
40792: EMPTY
40793: LIST
40794: LIST
40795: PUSH
40796: LD_INT 4
40798: NEG
40799: PUSH
40800: LD_INT 3
40802: NEG
40803: PUSH
40804: EMPTY
40805: LIST
40806: LIST
40807: PUSH
40808: LD_INT 4
40810: NEG
40811: PUSH
40812: LD_INT 4
40814: NEG
40815: PUSH
40816: EMPTY
40817: LIST
40818: LIST
40819: PUSH
40820: LD_INT 2
40822: NEG
40823: PUSH
40824: LD_INT 4
40826: NEG
40827: PUSH
40828: EMPTY
40829: LIST
40830: LIST
40831: PUSH
40832: LD_INT 4
40834: NEG
40835: PUSH
40836: LD_INT 2
40838: NEG
40839: PUSH
40840: EMPTY
40841: LIST
40842: LIST
40843: PUSH
40844: LD_INT 0
40846: PUSH
40847: LD_INT 4
40849: NEG
40850: PUSH
40851: EMPTY
40852: LIST
40853: LIST
40854: PUSH
40855: LD_INT 0
40857: PUSH
40858: LD_INT 5
40860: NEG
40861: PUSH
40862: EMPTY
40863: LIST
40864: LIST
40865: PUSH
40866: LD_INT 1
40868: PUSH
40869: LD_INT 4
40871: NEG
40872: PUSH
40873: EMPTY
40874: LIST
40875: LIST
40876: PUSH
40877: LD_INT 1
40879: PUSH
40880: LD_INT 3
40882: NEG
40883: PUSH
40884: EMPTY
40885: LIST
40886: LIST
40887: PUSH
40888: LD_INT 0
40890: PUSH
40891: LD_INT 3
40893: NEG
40894: PUSH
40895: EMPTY
40896: LIST
40897: LIST
40898: PUSH
40899: LD_INT 1
40901: NEG
40902: PUSH
40903: LD_INT 4
40905: NEG
40906: PUSH
40907: EMPTY
40908: LIST
40909: LIST
40910: PUSH
40911: LD_INT 1
40913: NEG
40914: PUSH
40915: LD_INT 5
40917: NEG
40918: PUSH
40919: EMPTY
40920: LIST
40921: LIST
40922: PUSH
40923: LD_INT 2
40925: PUSH
40926: LD_INT 3
40928: NEG
40929: PUSH
40930: EMPTY
40931: LIST
40932: LIST
40933: PUSH
40934: LD_INT 2
40936: NEG
40937: PUSH
40938: LD_INT 5
40940: NEG
40941: PUSH
40942: EMPTY
40943: LIST
40944: LIST
40945: PUSH
40946: LD_INT 3
40948: PUSH
40949: LD_INT 0
40951: PUSH
40952: EMPTY
40953: LIST
40954: LIST
40955: PUSH
40956: LD_INT 3
40958: PUSH
40959: LD_INT 1
40961: NEG
40962: PUSH
40963: EMPTY
40964: LIST
40965: LIST
40966: PUSH
40967: LD_INT 4
40969: PUSH
40970: LD_INT 0
40972: PUSH
40973: EMPTY
40974: LIST
40975: LIST
40976: PUSH
40977: LD_INT 4
40979: PUSH
40980: LD_INT 1
40982: PUSH
40983: EMPTY
40984: LIST
40985: LIST
40986: PUSH
40987: LD_INT 3
40989: PUSH
40990: LD_INT 1
40992: PUSH
40993: EMPTY
40994: LIST
40995: LIST
40996: PUSH
40997: LD_INT 2
40999: PUSH
41000: LD_INT 0
41002: PUSH
41003: EMPTY
41004: LIST
41005: LIST
41006: PUSH
41007: LD_INT 2
41009: PUSH
41010: LD_INT 1
41012: NEG
41013: PUSH
41014: EMPTY
41015: LIST
41016: LIST
41017: PUSH
41018: LD_INT 2
41020: PUSH
41021: LD_INT 2
41023: NEG
41024: PUSH
41025: EMPTY
41026: LIST
41027: LIST
41028: PUSH
41029: LD_INT 4
41031: PUSH
41032: LD_INT 2
41034: PUSH
41035: EMPTY
41036: LIST
41037: LIST
41038: PUSH
41039: LD_INT 4
41041: PUSH
41042: LD_INT 4
41044: PUSH
41045: EMPTY
41046: LIST
41047: LIST
41048: PUSH
41049: LD_INT 4
41051: PUSH
41052: LD_INT 3
41054: PUSH
41055: EMPTY
41056: LIST
41057: LIST
41058: PUSH
41059: LD_INT 5
41061: PUSH
41062: LD_INT 4
41064: PUSH
41065: EMPTY
41066: LIST
41067: LIST
41068: PUSH
41069: LD_INT 5
41071: PUSH
41072: LD_INT 5
41074: PUSH
41075: EMPTY
41076: LIST
41077: LIST
41078: PUSH
41079: LD_INT 4
41081: PUSH
41082: LD_INT 5
41084: PUSH
41085: EMPTY
41086: LIST
41087: LIST
41088: PUSH
41089: LD_INT 3
41091: PUSH
41092: LD_INT 4
41094: PUSH
41095: EMPTY
41096: LIST
41097: LIST
41098: PUSH
41099: LD_INT 3
41101: PUSH
41102: LD_INT 3
41104: PUSH
41105: EMPTY
41106: LIST
41107: LIST
41108: PUSH
41109: LD_INT 5
41111: PUSH
41112: LD_INT 3
41114: PUSH
41115: EMPTY
41116: LIST
41117: LIST
41118: PUSH
41119: LD_INT 3
41121: PUSH
41122: LD_INT 5
41124: PUSH
41125: EMPTY
41126: LIST
41127: LIST
41128: PUSH
41129: EMPTY
41130: LIST
41131: LIST
41132: LIST
41133: LIST
41134: LIST
41135: LIST
41136: LIST
41137: LIST
41138: LIST
41139: LIST
41140: LIST
41141: LIST
41142: LIST
41143: LIST
41144: LIST
41145: LIST
41146: LIST
41147: LIST
41148: LIST
41149: LIST
41150: LIST
41151: LIST
41152: LIST
41153: LIST
41154: LIST
41155: LIST
41156: LIST
41157: LIST
41158: LIST
41159: LIST
41160: LIST
41161: LIST
41162: LIST
41163: LIST
41164: LIST
41165: LIST
41166: LIST
41167: LIST
41168: LIST
41169: LIST
41170: LIST
41171: LIST
41172: LIST
41173: LIST
41174: LIST
41175: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
41176: LD_ADDR_VAR 0 33
41180: PUSH
41181: LD_INT 4
41183: NEG
41184: PUSH
41185: LD_INT 4
41187: NEG
41188: PUSH
41189: EMPTY
41190: LIST
41191: LIST
41192: PUSH
41193: LD_INT 4
41195: NEG
41196: PUSH
41197: LD_INT 5
41199: NEG
41200: PUSH
41201: EMPTY
41202: LIST
41203: LIST
41204: PUSH
41205: LD_INT 3
41207: NEG
41208: PUSH
41209: LD_INT 4
41211: NEG
41212: PUSH
41213: EMPTY
41214: LIST
41215: LIST
41216: PUSH
41217: LD_INT 3
41219: NEG
41220: PUSH
41221: LD_INT 3
41223: NEG
41224: PUSH
41225: EMPTY
41226: LIST
41227: LIST
41228: PUSH
41229: LD_INT 4
41231: NEG
41232: PUSH
41233: LD_INT 3
41235: NEG
41236: PUSH
41237: EMPTY
41238: LIST
41239: LIST
41240: PUSH
41241: LD_INT 5
41243: NEG
41244: PUSH
41245: LD_INT 4
41247: NEG
41248: PUSH
41249: EMPTY
41250: LIST
41251: LIST
41252: PUSH
41253: LD_INT 5
41255: NEG
41256: PUSH
41257: LD_INT 5
41259: NEG
41260: PUSH
41261: EMPTY
41262: LIST
41263: LIST
41264: PUSH
41265: LD_INT 3
41267: NEG
41268: PUSH
41269: LD_INT 5
41271: NEG
41272: PUSH
41273: EMPTY
41274: LIST
41275: LIST
41276: PUSH
41277: LD_INT 5
41279: NEG
41280: PUSH
41281: LD_INT 3
41283: NEG
41284: PUSH
41285: EMPTY
41286: LIST
41287: LIST
41288: PUSH
41289: LD_INT 0
41291: PUSH
41292: LD_INT 3
41294: NEG
41295: PUSH
41296: EMPTY
41297: LIST
41298: LIST
41299: PUSH
41300: LD_INT 0
41302: PUSH
41303: LD_INT 4
41305: NEG
41306: PUSH
41307: EMPTY
41308: LIST
41309: LIST
41310: PUSH
41311: LD_INT 1
41313: PUSH
41314: LD_INT 3
41316: NEG
41317: PUSH
41318: EMPTY
41319: LIST
41320: LIST
41321: PUSH
41322: LD_INT 1
41324: PUSH
41325: LD_INT 2
41327: NEG
41328: PUSH
41329: EMPTY
41330: LIST
41331: LIST
41332: PUSH
41333: LD_INT 0
41335: PUSH
41336: LD_INT 2
41338: NEG
41339: PUSH
41340: EMPTY
41341: LIST
41342: LIST
41343: PUSH
41344: LD_INT 1
41346: NEG
41347: PUSH
41348: LD_INT 3
41350: NEG
41351: PUSH
41352: EMPTY
41353: LIST
41354: LIST
41355: PUSH
41356: LD_INT 1
41358: NEG
41359: PUSH
41360: LD_INT 4
41362: NEG
41363: PUSH
41364: EMPTY
41365: LIST
41366: LIST
41367: PUSH
41368: LD_INT 2
41370: PUSH
41371: LD_INT 2
41373: NEG
41374: PUSH
41375: EMPTY
41376: LIST
41377: LIST
41378: PUSH
41379: LD_INT 2
41381: NEG
41382: PUSH
41383: LD_INT 4
41385: NEG
41386: PUSH
41387: EMPTY
41388: LIST
41389: LIST
41390: PUSH
41391: LD_INT 4
41393: PUSH
41394: LD_INT 0
41396: PUSH
41397: EMPTY
41398: LIST
41399: LIST
41400: PUSH
41401: LD_INT 4
41403: PUSH
41404: LD_INT 1
41406: NEG
41407: PUSH
41408: EMPTY
41409: LIST
41410: LIST
41411: PUSH
41412: LD_INT 5
41414: PUSH
41415: LD_INT 0
41417: PUSH
41418: EMPTY
41419: LIST
41420: LIST
41421: PUSH
41422: LD_INT 5
41424: PUSH
41425: LD_INT 1
41427: PUSH
41428: EMPTY
41429: LIST
41430: LIST
41431: PUSH
41432: LD_INT 4
41434: PUSH
41435: LD_INT 1
41437: PUSH
41438: EMPTY
41439: LIST
41440: LIST
41441: PUSH
41442: LD_INT 3
41444: PUSH
41445: LD_INT 0
41447: PUSH
41448: EMPTY
41449: LIST
41450: LIST
41451: PUSH
41452: LD_INT 3
41454: PUSH
41455: LD_INT 1
41457: NEG
41458: PUSH
41459: EMPTY
41460: LIST
41461: LIST
41462: PUSH
41463: LD_INT 3
41465: PUSH
41466: LD_INT 2
41468: NEG
41469: PUSH
41470: EMPTY
41471: LIST
41472: LIST
41473: PUSH
41474: LD_INT 5
41476: PUSH
41477: LD_INT 2
41479: PUSH
41480: EMPTY
41481: LIST
41482: LIST
41483: PUSH
41484: LD_INT 3
41486: PUSH
41487: LD_INT 3
41489: PUSH
41490: EMPTY
41491: LIST
41492: LIST
41493: PUSH
41494: LD_INT 3
41496: PUSH
41497: LD_INT 2
41499: PUSH
41500: EMPTY
41501: LIST
41502: LIST
41503: PUSH
41504: LD_INT 4
41506: PUSH
41507: LD_INT 3
41509: PUSH
41510: EMPTY
41511: LIST
41512: LIST
41513: PUSH
41514: LD_INT 4
41516: PUSH
41517: LD_INT 4
41519: PUSH
41520: EMPTY
41521: LIST
41522: LIST
41523: PUSH
41524: LD_INT 3
41526: PUSH
41527: LD_INT 4
41529: PUSH
41530: EMPTY
41531: LIST
41532: LIST
41533: PUSH
41534: LD_INT 2
41536: PUSH
41537: LD_INT 3
41539: PUSH
41540: EMPTY
41541: LIST
41542: LIST
41543: PUSH
41544: LD_INT 2
41546: PUSH
41547: LD_INT 2
41549: PUSH
41550: EMPTY
41551: LIST
41552: LIST
41553: PUSH
41554: LD_INT 4
41556: PUSH
41557: LD_INT 2
41559: PUSH
41560: EMPTY
41561: LIST
41562: LIST
41563: PUSH
41564: LD_INT 2
41566: PUSH
41567: LD_INT 4
41569: PUSH
41570: EMPTY
41571: LIST
41572: LIST
41573: PUSH
41574: LD_INT 0
41576: PUSH
41577: LD_INT 4
41579: PUSH
41580: EMPTY
41581: LIST
41582: LIST
41583: PUSH
41584: LD_INT 0
41586: PUSH
41587: LD_INT 3
41589: PUSH
41590: EMPTY
41591: LIST
41592: LIST
41593: PUSH
41594: LD_INT 1
41596: PUSH
41597: LD_INT 4
41599: PUSH
41600: EMPTY
41601: LIST
41602: LIST
41603: PUSH
41604: LD_INT 1
41606: PUSH
41607: LD_INT 5
41609: PUSH
41610: EMPTY
41611: LIST
41612: LIST
41613: PUSH
41614: LD_INT 0
41616: PUSH
41617: LD_INT 5
41619: PUSH
41620: EMPTY
41621: LIST
41622: LIST
41623: PUSH
41624: LD_INT 1
41626: NEG
41627: PUSH
41628: LD_INT 4
41630: PUSH
41631: EMPTY
41632: LIST
41633: LIST
41634: PUSH
41635: LD_INT 1
41637: NEG
41638: PUSH
41639: LD_INT 3
41641: PUSH
41642: EMPTY
41643: LIST
41644: LIST
41645: PUSH
41646: LD_INT 2
41648: PUSH
41649: LD_INT 5
41651: PUSH
41652: EMPTY
41653: LIST
41654: LIST
41655: PUSH
41656: LD_INT 2
41658: NEG
41659: PUSH
41660: LD_INT 3
41662: PUSH
41663: EMPTY
41664: LIST
41665: LIST
41666: PUSH
41667: EMPTY
41668: LIST
41669: LIST
41670: LIST
41671: LIST
41672: LIST
41673: LIST
41674: LIST
41675: LIST
41676: LIST
41677: LIST
41678: LIST
41679: LIST
41680: LIST
41681: LIST
41682: LIST
41683: LIST
41684: LIST
41685: LIST
41686: LIST
41687: LIST
41688: LIST
41689: LIST
41690: LIST
41691: LIST
41692: LIST
41693: LIST
41694: LIST
41695: LIST
41696: LIST
41697: LIST
41698: LIST
41699: LIST
41700: LIST
41701: LIST
41702: LIST
41703: LIST
41704: LIST
41705: LIST
41706: LIST
41707: LIST
41708: LIST
41709: LIST
41710: LIST
41711: LIST
41712: LIST
41713: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
41714: LD_ADDR_VAR 0 34
41718: PUSH
41719: LD_INT 0
41721: PUSH
41722: LD_INT 4
41724: NEG
41725: PUSH
41726: EMPTY
41727: LIST
41728: LIST
41729: PUSH
41730: LD_INT 0
41732: PUSH
41733: LD_INT 5
41735: NEG
41736: PUSH
41737: EMPTY
41738: LIST
41739: LIST
41740: PUSH
41741: LD_INT 1
41743: PUSH
41744: LD_INT 4
41746: NEG
41747: PUSH
41748: EMPTY
41749: LIST
41750: LIST
41751: PUSH
41752: LD_INT 1
41754: PUSH
41755: LD_INT 3
41757: NEG
41758: PUSH
41759: EMPTY
41760: LIST
41761: LIST
41762: PUSH
41763: LD_INT 0
41765: PUSH
41766: LD_INT 3
41768: NEG
41769: PUSH
41770: EMPTY
41771: LIST
41772: LIST
41773: PUSH
41774: LD_INT 1
41776: NEG
41777: PUSH
41778: LD_INT 4
41780: NEG
41781: PUSH
41782: EMPTY
41783: LIST
41784: LIST
41785: PUSH
41786: LD_INT 1
41788: NEG
41789: PUSH
41790: LD_INT 5
41792: NEG
41793: PUSH
41794: EMPTY
41795: LIST
41796: LIST
41797: PUSH
41798: LD_INT 2
41800: PUSH
41801: LD_INT 3
41803: NEG
41804: PUSH
41805: EMPTY
41806: LIST
41807: LIST
41808: PUSH
41809: LD_INT 2
41811: NEG
41812: PUSH
41813: LD_INT 5
41815: NEG
41816: PUSH
41817: EMPTY
41818: LIST
41819: LIST
41820: PUSH
41821: LD_INT 3
41823: PUSH
41824: LD_INT 0
41826: PUSH
41827: EMPTY
41828: LIST
41829: LIST
41830: PUSH
41831: LD_INT 3
41833: PUSH
41834: LD_INT 1
41836: NEG
41837: PUSH
41838: EMPTY
41839: LIST
41840: LIST
41841: PUSH
41842: LD_INT 4
41844: PUSH
41845: LD_INT 0
41847: PUSH
41848: EMPTY
41849: LIST
41850: LIST
41851: PUSH
41852: LD_INT 4
41854: PUSH
41855: LD_INT 1
41857: PUSH
41858: EMPTY
41859: LIST
41860: LIST
41861: PUSH
41862: LD_INT 3
41864: PUSH
41865: LD_INT 1
41867: PUSH
41868: EMPTY
41869: LIST
41870: LIST
41871: PUSH
41872: LD_INT 2
41874: PUSH
41875: LD_INT 0
41877: PUSH
41878: EMPTY
41879: LIST
41880: LIST
41881: PUSH
41882: LD_INT 2
41884: PUSH
41885: LD_INT 1
41887: NEG
41888: PUSH
41889: EMPTY
41890: LIST
41891: LIST
41892: PUSH
41893: LD_INT 2
41895: PUSH
41896: LD_INT 2
41898: NEG
41899: PUSH
41900: EMPTY
41901: LIST
41902: LIST
41903: PUSH
41904: LD_INT 4
41906: PUSH
41907: LD_INT 2
41909: PUSH
41910: EMPTY
41911: LIST
41912: LIST
41913: PUSH
41914: LD_INT 4
41916: PUSH
41917: LD_INT 4
41919: PUSH
41920: EMPTY
41921: LIST
41922: LIST
41923: PUSH
41924: LD_INT 4
41926: PUSH
41927: LD_INT 3
41929: PUSH
41930: EMPTY
41931: LIST
41932: LIST
41933: PUSH
41934: LD_INT 5
41936: PUSH
41937: LD_INT 4
41939: PUSH
41940: EMPTY
41941: LIST
41942: LIST
41943: PUSH
41944: LD_INT 5
41946: PUSH
41947: LD_INT 5
41949: PUSH
41950: EMPTY
41951: LIST
41952: LIST
41953: PUSH
41954: LD_INT 4
41956: PUSH
41957: LD_INT 5
41959: PUSH
41960: EMPTY
41961: LIST
41962: LIST
41963: PUSH
41964: LD_INT 3
41966: PUSH
41967: LD_INT 4
41969: PUSH
41970: EMPTY
41971: LIST
41972: LIST
41973: PUSH
41974: LD_INT 3
41976: PUSH
41977: LD_INT 3
41979: PUSH
41980: EMPTY
41981: LIST
41982: LIST
41983: PUSH
41984: LD_INT 5
41986: PUSH
41987: LD_INT 3
41989: PUSH
41990: EMPTY
41991: LIST
41992: LIST
41993: PUSH
41994: LD_INT 3
41996: PUSH
41997: LD_INT 5
41999: PUSH
42000: EMPTY
42001: LIST
42002: LIST
42003: PUSH
42004: LD_INT 0
42006: PUSH
42007: LD_INT 3
42009: PUSH
42010: EMPTY
42011: LIST
42012: LIST
42013: PUSH
42014: LD_INT 0
42016: PUSH
42017: LD_INT 2
42019: PUSH
42020: EMPTY
42021: LIST
42022: LIST
42023: PUSH
42024: LD_INT 1
42026: PUSH
42027: LD_INT 3
42029: PUSH
42030: EMPTY
42031: LIST
42032: LIST
42033: PUSH
42034: LD_INT 1
42036: PUSH
42037: LD_INT 4
42039: PUSH
42040: EMPTY
42041: LIST
42042: LIST
42043: PUSH
42044: LD_INT 0
42046: PUSH
42047: LD_INT 4
42049: PUSH
42050: EMPTY
42051: LIST
42052: LIST
42053: PUSH
42054: LD_INT 1
42056: NEG
42057: PUSH
42058: LD_INT 3
42060: PUSH
42061: EMPTY
42062: LIST
42063: LIST
42064: PUSH
42065: LD_INT 1
42067: NEG
42068: PUSH
42069: LD_INT 2
42071: PUSH
42072: EMPTY
42073: LIST
42074: LIST
42075: PUSH
42076: LD_INT 2
42078: PUSH
42079: LD_INT 4
42081: PUSH
42082: EMPTY
42083: LIST
42084: LIST
42085: PUSH
42086: LD_INT 2
42088: NEG
42089: PUSH
42090: LD_INT 2
42092: PUSH
42093: EMPTY
42094: LIST
42095: LIST
42096: PUSH
42097: LD_INT 4
42099: NEG
42100: PUSH
42101: LD_INT 0
42103: PUSH
42104: EMPTY
42105: LIST
42106: LIST
42107: PUSH
42108: LD_INT 4
42110: NEG
42111: PUSH
42112: LD_INT 1
42114: NEG
42115: PUSH
42116: EMPTY
42117: LIST
42118: LIST
42119: PUSH
42120: LD_INT 3
42122: NEG
42123: PUSH
42124: LD_INT 0
42126: PUSH
42127: EMPTY
42128: LIST
42129: LIST
42130: PUSH
42131: LD_INT 3
42133: NEG
42134: PUSH
42135: LD_INT 1
42137: PUSH
42138: EMPTY
42139: LIST
42140: LIST
42141: PUSH
42142: LD_INT 4
42144: NEG
42145: PUSH
42146: LD_INT 1
42148: PUSH
42149: EMPTY
42150: LIST
42151: LIST
42152: PUSH
42153: LD_INT 5
42155: NEG
42156: PUSH
42157: LD_INT 0
42159: PUSH
42160: EMPTY
42161: LIST
42162: LIST
42163: PUSH
42164: LD_INT 5
42166: NEG
42167: PUSH
42168: LD_INT 1
42170: NEG
42171: PUSH
42172: EMPTY
42173: LIST
42174: LIST
42175: PUSH
42176: LD_INT 5
42178: NEG
42179: PUSH
42180: LD_INT 2
42182: NEG
42183: PUSH
42184: EMPTY
42185: LIST
42186: LIST
42187: PUSH
42188: LD_INT 3
42190: NEG
42191: PUSH
42192: LD_INT 2
42194: PUSH
42195: EMPTY
42196: LIST
42197: LIST
42198: PUSH
42199: EMPTY
42200: LIST
42201: LIST
42202: LIST
42203: LIST
42204: LIST
42205: LIST
42206: LIST
42207: LIST
42208: LIST
42209: LIST
42210: LIST
42211: LIST
42212: LIST
42213: LIST
42214: LIST
42215: LIST
42216: LIST
42217: LIST
42218: LIST
42219: LIST
42220: LIST
42221: LIST
42222: LIST
42223: LIST
42224: LIST
42225: LIST
42226: LIST
42227: LIST
42228: LIST
42229: LIST
42230: LIST
42231: LIST
42232: LIST
42233: LIST
42234: LIST
42235: LIST
42236: LIST
42237: LIST
42238: LIST
42239: LIST
42240: LIST
42241: LIST
42242: LIST
42243: LIST
42244: LIST
42245: ST_TO_ADDR
// end ; end ;
42246: GO 42249
42248: POP
// case btype of b_depot , b_warehouse :
42249: LD_VAR 0 1
42253: PUSH
42254: LD_INT 0
42256: DOUBLE
42257: EQUAL
42258: IFTRUE 42268
42260: LD_INT 1
42262: DOUBLE
42263: EQUAL
42264: IFTRUE 42268
42266: GO 42469
42268: POP
// case nation of nation_american :
42269: LD_VAR 0 5
42273: PUSH
42274: LD_INT 1
42276: DOUBLE
42277: EQUAL
42278: IFTRUE 42282
42280: GO 42338
42282: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
42283: LD_ADDR_VAR 0 9
42287: PUSH
42288: LD_VAR 0 11
42292: PUSH
42293: LD_VAR 0 12
42297: PUSH
42298: LD_VAR 0 13
42302: PUSH
42303: LD_VAR 0 14
42307: PUSH
42308: LD_VAR 0 15
42312: PUSH
42313: LD_VAR 0 16
42317: PUSH
42318: EMPTY
42319: LIST
42320: LIST
42321: LIST
42322: LIST
42323: LIST
42324: LIST
42325: PUSH
42326: LD_VAR 0 4
42330: PUSH
42331: LD_INT 1
42333: PLUS
42334: ARRAY
42335: ST_TO_ADDR
42336: GO 42467
42338: LD_INT 2
42340: DOUBLE
42341: EQUAL
42342: IFTRUE 42346
42344: GO 42402
42346: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
42347: LD_ADDR_VAR 0 9
42351: PUSH
42352: LD_VAR 0 17
42356: PUSH
42357: LD_VAR 0 18
42361: PUSH
42362: LD_VAR 0 19
42366: PUSH
42367: LD_VAR 0 20
42371: PUSH
42372: LD_VAR 0 21
42376: PUSH
42377: LD_VAR 0 22
42381: PUSH
42382: EMPTY
42383: LIST
42384: LIST
42385: LIST
42386: LIST
42387: LIST
42388: LIST
42389: PUSH
42390: LD_VAR 0 4
42394: PUSH
42395: LD_INT 1
42397: PLUS
42398: ARRAY
42399: ST_TO_ADDR
42400: GO 42467
42402: LD_INT 3
42404: DOUBLE
42405: EQUAL
42406: IFTRUE 42410
42408: GO 42466
42410: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
42411: LD_ADDR_VAR 0 9
42415: PUSH
42416: LD_VAR 0 23
42420: PUSH
42421: LD_VAR 0 24
42425: PUSH
42426: LD_VAR 0 25
42430: PUSH
42431: LD_VAR 0 26
42435: PUSH
42436: LD_VAR 0 27
42440: PUSH
42441: LD_VAR 0 28
42445: PUSH
42446: EMPTY
42447: LIST
42448: LIST
42449: LIST
42450: LIST
42451: LIST
42452: LIST
42453: PUSH
42454: LD_VAR 0 4
42458: PUSH
42459: LD_INT 1
42461: PLUS
42462: ARRAY
42463: ST_TO_ADDR
42464: GO 42467
42466: POP
42467: GO 43022
42469: LD_INT 2
42471: DOUBLE
42472: EQUAL
42473: IFTRUE 42483
42475: LD_INT 3
42477: DOUBLE
42478: EQUAL
42479: IFTRUE 42483
42481: GO 42539
42483: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
42484: LD_ADDR_VAR 0 9
42488: PUSH
42489: LD_VAR 0 29
42493: PUSH
42494: LD_VAR 0 30
42498: PUSH
42499: LD_VAR 0 31
42503: PUSH
42504: LD_VAR 0 32
42508: PUSH
42509: LD_VAR 0 33
42513: PUSH
42514: LD_VAR 0 34
42518: PUSH
42519: EMPTY
42520: LIST
42521: LIST
42522: LIST
42523: LIST
42524: LIST
42525: LIST
42526: PUSH
42527: LD_VAR 0 4
42531: PUSH
42532: LD_INT 1
42534: PLUS
42535: ARRAY
42536: ST_TO_ADDR
42537: GO 43022
42539: LD_INT 16
42541: DOUBLE
42542: EQUAL
42543: IFTRUE 42601
42545: LD_INT 17
42547: DOUBLE
42548: EQUAL
42549: IFTRUE 42601
42551: LD_INT 18
42553: DOUBLE
42554: EQUAL
42555: IFTRUE 42601
42557: LD_INT 19
42559: DOUBLE
42560: EQUAL
42561: IFTRUE 42601
42563: LD_INT 22
42565: DOUBLE
42566: EQUAL
42567: IFTRUE 42601
42569: LD_INT 20
42571: DOUBLE
42572: EQUAL
42573: IFTRUE 42601
42575: LD_INT 21
42577: DOUBLE
42578: EQUAL
42579: IFTRUE 42601
42581: LD_INT 23
42583: DOUBLE
42584: EQUAL
42585: IFTRUE 42601
42587: LD_INT 24
42589: DOUBLE
42590: EQUAL
42591: IFTRUE 42601
42593: LD_INT 25
42595: DOUBLE
42596: EQUAL
42597: IFTRUE 42601
42599: GO 42657
42601: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
42602: LD_ADDR_VAR 0 9
42606: PUSH
42607: LD_VAR 0 35
42611: PUSH
42612: LD_VAR 0 36
42616: PUSH
42617: LD_VAR 0 37
42621: PUSH
42622: LD_VAR 0 38
42626: PUSH
42627: LD_VAR 0 39
42631: PUSH
42632: LD_VAR 0 40
42636: PUSH
42637: EMPTY
42638: LIST
42639: LIST
42640: LIST
42641: LIST
42642: LIST
42643: LIST
42644: PUSH
42645: LD_VAR 0 4
42649: PUSH
42650: LD_INT 1
42652: PLUS
42653: ARRAY
42654: ST_TO_ADDR
42655: GO 43022
42657: LD_INT 6
42659: DOUBLE
42660: EQUAL
42661: IFTRUE 42713
42663: LD_INT 7
42665: DOUBLE
42666: EQUAL
42667: IFTRUE 42713
42669: LD_INT 8
42671: DOUBLE
42672: EQUAL
42673: IFTRUE 42713
42675: LD_INT 13
42677: DOUBLE
42678: EQUAL
42679: IFTRUE 42713
42681: LD_INT 12
42683: DOUBLE
42684: EQUAL
42685: IFTRUE 42713
42687: LD_INT 15
42689: DOUBLE
42690: EQUAL
42691: IFTRUE 42713
42693: LD_INT 11
42695: DOUBLE
42696: EQUAL
42697: IFTRUE 42713
42699: LD_INT 14
42701: DOUBLE
42702: EQUAL
42703: IFTRUE 42713
42705: LD_INT 10
42707: DOUBLE
42708: EQUAL
42709: IFTRUE 42713
42711: GO 42769
42713: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
42714: LD_ADDR_VAR 0 9
42718: PUSH
42719: LD_VAR 0 41
42723: PUSH
42724: LD_VAR 0 42
42728: PUSH
42729: LD_VAR 0 43
42733: PUSH
42734: LD_VAR 0 44
42738: PUSH
42739: LD_VAR 0 45
42743: PUSH
42744: LD_VAR 0 46
42748: PUSH
42749: EMPTY
42750: LIST
42751: LIST
42752: LIST
42753: LIST
42754: LIST
42755: LIST
42756: PUSH
42757: LD_VAR 0 4
42761: PUSH
42762: LD_INT 1
42764: PLUS
42765: ARRAY
42766: ST_TO_ADDR
42767: GO 43022
42769: LD_INT 36
42771: DOUBLE
42772: EQUAL
42773: IFTRUE 42777
42775: GO 42833
42777: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
42778: LD_ADDR_VAR 0 9
42782: PUSH
42783: LD_VAR 0 47
42787: PUSH
42788: LD_VAR 0 48
42792: PUSH
42793: LD_VAR 0 49
42797: PUSH
42798: LD_VAR 0 50
42802: PUSH
42803: LD_VAR 0 51
42807: PUSH
42808: LD_VAR 0 52
42812: PUSH
42813: EMPTY
42814: LIST
42815: LIST
42816: LIST
42817: LIST
42818: LIST
42819: LIST
42820: PUSH
42821: LD_VAR 0 4
42825: PUSH
42826: LD_INT 1
42828: PLUS
42829: ARRAY
42830: ST_TO_ADDR
42831: GO 43022
42833: LD_INT 4
42835: DOUBLE
42836: EQUAL
42837: IFTRUE 42859
42839: LD_INT 5
42841: DOUBLE
42842: EQUAL
42843: IFTRUE 42859
42845: LD_INT 34
42847: DOUBLE
42848: EQUAL
42849: IFTRUE 42859
42851: LD_INT 37
42853: DOUBLE
42854: EQUAL
42855: IFTRUE 42859
42857: GO 42915
42859: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
42860: LD_ADDR_VAR 0 9
42864: PUSH
42865: LD_VAR 0 53
42869: PUSH
42870: LD_VAR 0 54
42874: PUSH
42875: LD_VAR 0 55
42879: PUSH
42880: LD_VAR 0 56
42884: PUSH
42885: LD_VAR 0 57
42889: PUSH
42890: LD_VAR 0 58
42894: PUSH
42895: EMPTY
42896: LIST
42897: LIST
42898: LIST
42899: LIST
42900: LIST
42901: LIST
42902: PUSH
42903: LD_VAR 0 4
42907: PUSH
42908: LD_INT 1
42910: PLUS
42911: ARRAY
42912: ST_TO_ADDR
42913: GO 43022
42915: LD_INT 31
42917: DOUBLE
42918: EQUAL
42919: IFTRUE 42965
42921: LD_INT 32
42923: DOUBLE
42924: EQUAL
42925: IFTRUE 42965
42927: LD_INT 33
42929: DOUBLE
42930: EQUAL
42931: IFTRUE 42965
42933: LD_INT 27
42935: DOUBLE
42936: EQUAL
42937: IFTRUE 42965
42939: LD_INT 26
42941: DOUBLE
42942: EQUAL
42943: IFTRUE 42965
42945: LD_INT 28
42947: DOUBLE
42948: EQUAL
42949: IFTRUE 42965
42951: LD_INT 29
42953: DOUBLE
42954: EQUAL
42955: IFTRUE 42965
42957: LD_INT 30
42959: DOUBLE
42960: EQUAL
42961: IFTRUE 42965
42963: GO 43021
42965: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
42966: LD_ADDR_VAR 0 9
42970: PUSH
42971: LD_VAR 0 59
42975: PUSH
42976: LD_VAR 0 60
42980: PUSH
42981: LD_VAR 0 61
42985: PUSH
42986: LD_VAR 0 62
42990: PUSH
42991: LD_VAR 0 63
42995: PUSH
42996: LD_VAR 0 64
43000: PUSH
43001: EMPTY
43002: LIST
43003: LIST
43004: LIST
43005: LIST
43006: LIST
43007: LIST
43008: PUSH
43009: LD_VAR 0 4
43013: PUSH
43014: LD_INT 1
43016: PLUS
43017: ARRAY
43018: ST_TO_ADDR
43019: GO 43022
43021: POP
// temp_list2 = [ ] ;
43022: LD_ADDR_VAR 0 10
43026: PUSH
43027: EMPTY
43028: ST_TO_ADDR
// for i in temp_list do
43029: LD_ADDR_VAR 0 8
43033: PUSH
43034: LD_VAR 0 9
43038: PUSH
43039: FOR_IN
43040: IFFALSE 43092
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
43042: LD_ADDR_VAR 0 10
43046: PUSH
43047: LD_VAR 0 10
43051: PUSH
43052: LD_VAR 0 8
43056: PUSH
43057: LD_INT 1
43059: ARRAY
43060: PUSH
43061: LD_VAR 0 2
43065: PLUS
43066: PUSH
43067: LD_VAR 0 8
43071: PUSH
43072: LD_INT 2
43074: ARRAY
43075: PUSH
43076: LD_VAR 0 3
43080: PLUS
43081: PUSH
43082: EMPTY
43083: LIST
43084: LIST
43085: PUSH
43086: EMPTY
43087: LIST
43088: ADD
43089: ST_TO_ADDR
43090: GO 43039
43092: POP
43093: POP
// result = temp_list2 ;
43094: LD_ADDR_VAR 0 7
43098: PUSH
43099: LD_VAR 0 10
43103: ST_TO_ADDR
// end ;
43104: LD_VAR 0 7
43108: RET
// export function EnemyInRange ( unit , dist ) ; begin
43109: LD_INT 0
43111: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
43112: LD_ADDR_VAR 0 3
43116: PUSH
43117: LD_VAR 0 1
43121: PPUSH
43122: CALL_OW 255
43126: PPUSH
43127: LD_VAR 0 1
43131: PPUSH
43132: CALL_OW 250
43136: PPUSH
43137: LD_VAR 0 1
43141: PPUSH
43142: CALL_OW 251
43146: PPUSH
43147: LD_VAR 0 2
43151: PPUSH
43152: CALL 16366 0 4
43156: PUSH
43157: LD_INT 4
43159: ARRAY
43160: ST_TO_ADDR
// end ;
43161: LD_VAR 0 3
43165: RET
// export function PlayerSeeMe ( unit ) ; begin
43166: LD_INT 0
43168: PPUSH
// result := See ( your_side , unit ) ;
43169: LD_ADDR_VAR 0 2
43173: PUSH
43174: LD_OWVAR 2
43178: PPUSH
43179: LD_VAR 0 1
43183: PPUSH
43184: CALL_OW 292
43188: ST_TO_ADDR
// end ;
43189: LD_VAR 0 2
43193: RET
// export function ReverseDir ( unit ) ; begin
43194: LD_INT 0
43196: PPUSH
// if not unit then
43197: LD_VAR 0 1
43201: NOT
43202: IFFALSE 43206
// exit ;
43204: GO 43229
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
43206: LD_ADDR_VAR 0 2
43210: PUSH
43211: LD_VAR 0 1
43215: PPUSH
43216: CALL_OW 254
43220: PUSH
43221: LD_INT 3
43223: PLUS
43224: PUSH
43225: LD_INT 6
43227: MOD
43228: ST_TO_ADDR
// end ;
43229: LD_VAR 0 2
43233: RET
// export function ReverseArray ( array ) ; var i ; begin
43234: LD_INT 0
43236: PPUSH
43237: PPUSH
// if not array then
43238: LD_VAR 0 1
43242: NOT
43243: IFFALSE 43247
// exit ;
43245: GO 43302
// result := [ ] ;
43247: LD_ADDR_VAR 0 2
43251: PUSH
43252: EMPTY
43253: ST_TO_ADDR
// for i := array downto 1 do
43254: LD_ADDR_VAR 0 3
43258: PUSH
43259: DOUBLE
43260: LD_VAR 0 1
43264: INC
43265: ST_TO_ADDR
43266: LD_INT 1
43268: PUSH
43269: FOR_DOWNTO
43270: IFFALSE 43300
// result := Join ( result , array [ i ] ) ;
43272: LD_ADDR_VAR 0 2
43276: PUSH
43277: LD_VAR 0 2
43281: PPUSH
43282: LD_VAR 0 1
43286: PUSH
43287: LD_VAR 0 3
43291: ARRAY
43292: PPUSH
43293: CALL 48144 0 2
43297: ST_TO_ADDR
43298: GO 43269
43300: POP
43301: POP
// end ;
43302: LD_VAR 0 2
43306: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
43307: LD_INT 0
43309: PPUSH
43310: PPUSH
43311: PPUSH
43312: PPUSH
43313: PPUSH
43314: PPUSH
// if not unit or not hexes then
43315: LD_VAR 0 1
43319: NOT
43320: IFTRUE 43329
43322: PUSH
43323: LD_VAR 0 2
43327: NOT
43328: OR
43329: IFFALSE 43333
// exit ;
43331: GO 43456
// dist := 9999 ;
43333: LD_ADDR_VAR 0 5
43337: PUSH
43338: LD_INT 9999
43340: ST_TO_ADDR
// for i = 1 to hexes do
43341: LD_ADDR_VAR 0 4
43345: PUSH
43346: DOUBLE
43347: LD_INT 1
43349: DEC
43350: ST_TO_ADDR
43351: LD_VAR 0 2
43355: PUSH
43356: FOR_TO
43357: IFFALSE 43444
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
43359: LD_ADDR_VAR 0 6
43363: PUSH
43364: LD_VAR 0 1
43368: PPUSH
43369: LD_VAR 0 2
43373: PUSH
43374: LD_VAR 0 4
43378: ARRAY
43379: PUSH
43380: LD_INT 1
43382: ARRAY
43383: PPUSH
43384: LD_VAR 0 2
43388: PUSH
43389: LD_VAR 0 4
43393: ARRAY
43394: PUSH
43395: LD_INT 2
43397: ARRAY
43398: PPUSH
43399: CALL_OW 297
43403: ST_TO_ADDR
// if tdist < dist then
43404: LD_VAR 0 6
43408: PUSH
43409: LD_VAR 0 5
43413: LESS
43414: IFFALSE 43442
// begin hex := hexes [ i ] ;
43416: LD_ADDR_VAR 0 8
43420: PUSH
43421: LD_VAR 0 2
43425: PUSH
43426: LD_VAR 0 4
43430: ARRAY
43431: ST_TO_ADDR
// dist := tdist ;
43432: LD_ADDR_VAR 0 5
43436: PUSH
43437: LD_VAR 0 6
43441: ST_TO_ADDR
// end ; end ;
43442: GO 43356
43444: POP
43445: POP
// result := hex ;
43446: LD_ADDR_VAR 0 3
43450: PUSH
43451: LD_VAR 0 8
43455: ST_TO_ADDR
// end ;
43456: LD_VAR 0 3
43460: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
43461: LD_INT 0
43463: PPUSH
43464: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
43465: LD_VAR 0 1
43469: NOT
43470: IFTRUE 43509
43472: PUSH
43473: LD_VAR 0 1
43477: PUSH
43478: LD_INT 21
43480: PUSH
43481: LD_INT 2
43483: PUSH
43484: EMPTY
43485: LIST
43486: LIST
43487: PUSH
43488: LD_INT 23
43490: PUSH
43491: LD_INT 2
43493: PUSH
43494: EMPTY
43495: LIST
43496: LIST
43497: PUSH
43498: EMPTY
43499: LIST
43500: LIST
43501: PPUSH
43502: CALL_OW 69
43506: IN
43507: NOT
43508: OR
43509: IFFALSE 43513
// exit ;
43511: GO 43560
// for i = 1 to 3 do
43513: LD_ADDR_VAR 0 3
43517: PUSH
43518: DOUBLE
43519: LD_INT 1
43521: DEC
43522: ST_TO_ADDR
43523: LD_INT 3
43525: PUSH
43526: FOR_TO
43527: IFFALSE 43558
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
43529: LD_VAR 0 1
43533: PPUSH
43534: CALL_OW 250
43538: PPUSH
43539: LD_VAR 0 1
43543: PPUSH
43544: CALL_OW 251
43548: PPUSH
43549: LD_INT 1
43551: PPUSH
43552: CALL_OW 453
43556: GO 43526
43558: POP
43559: POP
// end ;
43560: LD_VAR 0 2
43564: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
43565: LD_INT 0
43567: PPUSH
43568: PPUSH
43569: PPUSH
43570: PPUSH
43571: PPUSH
43572: PPUSH
// if not unit or not enemy_unit then
43573: LD_VAR 0 1
43577: NOT
43578: IFTRUE 43587
43580: PUSH
43581: LD_VAR 0 2
43585: NOT
43586: OR
43587: IFFALSE 43591
// exit ;
43589: GO 44062
// if GetLives ( i ) < 250 then
43591: LD_VAR 0 4
43595: PPUSH
43596: CALL_OW 256
43600: PUSH
43601: LD_INT 250
43603: LESS
43604: IFFALSE 43617
// begin ComAutodestruct ( i ) ;
43606: LD_VAR 0 4
43610: PPUSH
43611: CALL 43461 0 1
// exit ;
43615: GO 44062
// end ; x := GetX ( enemy_unit ) ;
43617: LD_ADDR_VAR 0 7
43621: PUSH
43622: LD_VAR 0 2
43626: PPUSH
43627: CALL_OW 250
43631: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
43632: LD_ADDR_VAR 0 8
43636: PUSH
43637: LD_VAR 0 2
43641: PPUSH
43642: CALL_OW 251
43646: ST_TO_ADDR
// if not x or not y then
43647: LD_VAR 0 7
43651: NOT
43652: IFTRUE 43661
43654: PUSH
43655: LD_VAR 0 8
43659: NOT
43660: OR
43661: IFFALSE 43665
// exit ;
43663: GO 44062
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
43665: LD_ADDR_VAR 0 6
43669: PUSH
43670: LD_VAR 0 7
43674: PPUSH
43675: LD_INT 0
43677: PPUSH
43678: LD_INT 4
43680: PPUSH
43681: CALL_OW 272
43685: PUSH
43686: LD_VAR 0 8
43690: PPUSH
43691: LD_INT 0
43693: PPUSH
43694: LD_INT 4
43696: PPUSH
43697: CALL_OW 273
43701: PUSH
43702: EMPTY
43703: LIST
43704: LIST
43705: PUSH
43706: LD_VAR 0 7
43710: PPUSH
43711: LD_INT 1
43713: PPUSH
43714: LD_INT 4
43716: PPUSH
43717: CALL_OW 272
43721: PUSH
43722: LD_VAR 0 8
43726: PPUSH
43727: LD_INT 1
43729: PPUSH
43730: LD_INT 4
43732: PPUSH
43733: CALL_OW 273
43737: PUSH
43738: EMPTY
43739: LIST
43740: LIST
43741: PUSH
43742: LD_VAR 0 7
43746: PPUSH
43747: LD_INT 2
43749: PPUSH
43750: LD_INT 4
43752: PPUSH
43753: CALL_OW 272
43757: PUSH
43758: LD_VAR 0 8
43762: PPUSH
43763: LD_INT 2
43765: PPUSH
43766: LD_INT 4
43768: PPUSH
43769: CALL_OW 273
43773: PUSH
43774: EMPTY
43775: LIST
43776: LIST
43777: PUSH
43778: LD_VAR 0 7
43782: PPUSH
43783: LD_INT 3
43785: PPUSH
43786: LD_INT 4
43788: PPUSH
43789: CALL_OW 272
43793: PUSH
43794: LD_VAR 0 8
43798: PPUSH
43799: LD_INT 3
43801: PPUSH
43802: LD_INT 4
43804: PPUSH
43805: CALL_OW 273
43809: PUSH
43810: EMPTY
43811: LIST
43812: LIST
43813: PUSH
43814: LD_VAR 0 7
43818: PPUSH
43819: LD_INT 4
43821: PPUSH
43822: LD_INT 4
43824: PPUSH
43825: CALL_OW 272
43829: PUSH
43830: LD_VAR 0 8
43834: PPUSH
43835: LD_INT 4
43837: PPUSH
43838: LD_INT 4
43840: PPUSH
43841: CALL_OW 273
43845: PUSH
43846: EMPTY
43847: LIST
43848: LIST
43849: PUSH
43850: LD_VAR 0 7
43854: PPUSH
43855: LD_INT 5
43857: PPUSH
43858: LD_INT 4
43860: PPUSH
43861: CALL_OW 272
43865: PUSH
43866: LD_VAR 0 8
43870: PPUSH
43871: LD_INT 5
43873: PPUSH
43874: LD_INT 4
43876: PPUSH
43877: CALL_OW 273
43881: PUSH
43882: EMPTY
43883: LIST
43884: LIST
43885: PUSH
43886: EMPTY
43887: LIST
43888: LIST
43889: LIST
43890: LIST
43891: LIST
43892: LIST
43893: ST_TO_ADDR
// for i = tmp downto 1 do
43894: LD_ADDR_VAR 0 4
43898: PUSH
43899: DOUBLE
43900: LD_VAR 0 6
43904: INC
43905: ST_TO_ADDR
43906: LD_INT 1
43908: PUSH
43909: FOR_DOWNTO
43910: IFFALSE 44013
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
43912: LD_VAR 0 6
43916: PUSH
43917: LD_VAR 0 4
43921: ARRAY
43922: PUSH
43923: LD_INT 1
43925: ARRAY
43926: PPUSH
43927: LD_VAR 0 6
43931: PUSH
43932: LD_VAR 0 4
43936: ARRAY
43937: PUSH
43938: LD_INT 2
43940: ARRAY
43941: PPUSH
43942: CALL_OW 488
43946: NOT
43947: IFTRUE 43989
43949: PUSH
43950: LD_VAR 0 6
43954: PUSH
43955: LD_VAR 0 4
43959: ARRAY
43960: PUSH
43961: LD_INT 1
43963: ARRAY
43964: PPUSH
43965: LD_VAR 0 6
43969: PUSH
43970: LD_VAR 0 4
43974: ARRAY
43975: PUSH
43976: LD_INT 2
43978: ARRAY
43979: PPUSH
43980: CALL_OW 428
43984: PUSH
43985: LD_INT 0
43987: NONEQUAL
43988: OR
43989: IFFALSE 44011
// tmp := Delete ( tmp , i ) ;
43991: LD_ADDR_VAR 0 6
43995: PUSH
43996: LD_VAR 0 6
44000: PPUSH
44001: LD_VAR 0 4
44005: PPUSH
44006: CALL_OW 3
44010: ST_TO_ADDR
44011: GO 43909
44013: POP
44014: POP
// j := GetClosestHex ( unit , tmp ) ;
44015: LD_ADDR_VAR 0 5
44019: PUSH
44020: LD_VAR 0 1
44024: PPUSH
44025: LD_VAR 0 6
44029: PPUSH
44030: CALL 43307 0 2
44034: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
44035: LD_VAR 0 1
44039: PPUSH
44040: LD_VAR 0 5
44044: PUSH
44045: LD_INT 1
44047: ARRAY
44048: PPUSH
44049: LD_VAR 0 5
44053: PUSH
44054: LD_INT 2
44056: ARRAY
44057: PPUSH
44058: CALL_OW 111
// end ;
44062: LD_VAR 0 3
44066: RET
// export function PrepareApemanSoldier ( ) ; begin
44067: LD_INT 0
44069: PPUSH
// uc_nation := 0 ;
44070: LD_ADDR_OWVAR 21
44074: PUSH
44075: LD_INT 0
44077: ST_TO_ADDR
// hc_sex := sex_male ;
44078: LD_ADDR_OWVAR 27
44082: PUSH
44083: LD_INT 1
44085: ST_TO_ADDR
// hc_name :=  ;
44086: LD_ADDR_OWVAR 26
44090: PUSH
44091: LD_STRING 
44093: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
44094: LD_ADDR_OWVAR 28
44098: PUSH
44099: LD_INT 15
44101: ST_TO_ADDR
// hc_gallery :=  ;
44102: LD_ADDR_OWVAR 33
44106: PUSH
44107: LD_STRING 
44109: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
44110: LD_ADDR_OWVAR 31
44114: PUSH
44115: LD_INT 0
44117: PPUSH
44118: LD_INT 3
44120: PPUSH
44121: CALL_OW 12
44125: PUSH
44126: LD_INT 0
44128: PPUSH
44129: LD_INT 3
44131: PPUSH
44132: CALL_OW 12
44136: PUSH
44137: LD_INT 0
44139: PUSH
44140: LD_INT 0
44142: PUSH
44143: EMPTY
44144: LIST
44145: LIST
44146: LIST
44147: LIST
44148: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
44149: LD_ADDR_OWVAR 29
44153: PUSH
44154: LD_INT 12
44156: PUSH
44157: LD_INT 12
44159: PUSH
44160: EMPTY
44161: LIST
44162: LIST
44163: ST_TO_ADDR
// end ;
44164: LD_VAR 0 1
44168: RET
// export function PrepareApemanEngineer ( ) ; begin
44169: LD_INT 0
44171: PPUSH
// uc_nation := 0 ;
44172: LD_ADDR_OWVAR 21
44176: PUSH
44177: LD_INT 0
44179: ST_TO_ADDR
// hc_sex := sex_male ;
44180: LD_ADDR_OWVAR 27
44184: PUSH
44185: LD_INT 1
44187: ST_TO_ADDR
// hc_name :=  ;
44188: LD_ADDR_OWVAR 26
44192: PUSH
44193: LD_STRING 
44195: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
44196: LD_ADDR_OWVAR 28
44200: PUSH
44201: LD_INT 16
44203: ST_TO_ADDR
// hc_gallery :=  ;
44204: LD_ADDR_OWVAR 33
44208: PUSH
44209: LD_STRING 
44211: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
44212: LD_ADDR_OWVAR 31
44216: PUSH
44217: LD_INT 0
44219: PPUSH
44220: LD_INT 3
44222: PPUSH
44223: CALL_OW 12
44227: PUSH
44228: LD_INT 0
44230: PPUSH
44231: LD_INT 3
44233: PPUSH
44234: CALL_OW 12
44238: PUSH
44239: LD_INT 0
44241: PUSH
44242: LD_INT 0
44244: PUSH
44245: EMPTY
44246: LIST
44247: LIST
44248: LIST
44249: LIST
44250: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
44251: LD_ADDR_OWVAR 29
44255: PUSH
44256: LD_INT 12
44258: PUSH
44259: LD_INT 12
44261: PUSH
44262: EMPTY
44263: LIST
44264: LIST
44265: ST_TO_ADDR
// end ;
44266: LD_VAR 0 1
44270: RET
// export function PrepareApeman ( agressivity ) ; begin
44271: LD_INT 0
44273: PPUSH
// uc_side := 0 ;
44274: LD_ADDR_OWVAR 20
44278: PUSH
44279: LD_INT 0
44281: ST_TO_ADDR
// uc_nation := 0 ;
44282: LD_ADDR_OWVAR 21
44286: PUSH
44287: LD_INT 0
44289: ST_TO_ADDR
// hc_sex := sex_male ;
44290: LD_ADDR_OWVAR 27
44294: PUSH
44295: LD_INT 1
44297: ST_TO_ADDR
// hc_class := class_apeman ;
44298: LD_ADDR_OWVAR 28
44302: PUSH
44303: LD_INT 12
44305: ST_TO_ADDR
// hc_gallery :=  ;
44306: LD_ADDR_OWVAR 33
44310: PUSH
44311: LD_STRING 
44313: ST_TO_ADDR
// hc_name :=  ;
44314: LD_ADDR_OWVAR 26
44318: PUSH
44319: LD_STRING 
44321: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
44322: LD_ADDR_OWVAR 29
44326: PUSH
44327: LD_INT 12
44329: PUSH
44330: LD_INT 12
44332: PUSH
44333: EMPTY
44334: LIST
44335: LIST
44336: ST_TO_ADDR
// if agressivity = 0 then
44337: LD_VAR 0 1
44341: PUSH
44342: LD_INT 0
44344: EQUAL
44345: IFFALSE 44357
// hc_agressivity := 0 else
44347: LD_ADDR_OWVAR 35
44351: PUSH
44352: LD_INT 0
44354: ST_TO_ADDR
44355: GO 44378
// hc_agressivity := rand ( - agressivity , agressivity ) ;
44357: LD_ADDR_OWVAR 35
44361: PUSH
44362: LD_VAR 0 1
44366: NEG
44367: PPUSH
44368: LD_VAR 0 1
44372: PPUSH
44373: CALL_OW 12
44377: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
44378: LD_ADDR_OWVAR 31
44382: PUSH
44383: LD_INT 0
44385: PPUSH
44386: LD_INT 3
44388: PPUSH
44389: CALL_OW 12
44393: PUSH
44394: LD_INT 0
44396: PPUSH
44397: LD_INT 3
44399: PPUSH
44400: CALL_OW 12
44404: PUSH
44405: LD_INT 0
44407: PUSH
44408: LD_INT 0
44410: PUSH
44411: EMPTY
44412: LIST
44413: LIST
44414: LIST
44415: LIST
44416: ST_TO_ADDR
// end ;
44417: LD_VAR 0 2
44421: RET
// export function PrepareTiger ( agressivity ) ; begin
44422: LD_INT 0
44424: PPUSH
// uc_side := 0 ;
44425: LD_ADDR_OWVAR 20
44429: PUSH
44430: LD_INT 0
44432: ST_TO_ADDR
// uc_nation := 0 ;
44433: LD_ADDR_OWVAR 21
44437: PUSH
44438: LD_INT 0
44440: ST_TO_ADDR
// InitHc ;
44441: CALL_OW 19
// hc_class := class_tiger ;
44445: LD_ADDR_OWVAR 28
44449: PUSH
44450: LD_INT 14
44452: ST_TO_ADDR
// hc_gallery :=  ;
44453: LD_ADDR_OWVAR 33
44457: PUSH
44458: LD_STRING 
44460: ST_TO_ADDR
// hc_name :=  ;
44461: LD_ADDR_OWVAR 26
44465: PUSH
44466: LD_STRING 
44468: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
44469: LD_ADDR_OWVAR 35
44473: PUSH
44474: LD_VAR 0 1
44478: NEG
44479: PPUSH
44480: LD_VAR 0 1
44484: PPUSH
44485: CALL_OW 12
44489: ST_TO_ADDR
// end ;
44490: LD_VAR 0 2
44494: RET
// export function PrepareEnchidna ( ) ; begin
44495: LD_INT 0
44497: PPUSH
// uc_side := 0 ;
44498: LD_ADDR_OWVAR 20
44502: PUSH
44503: LD_INT 0
44505: ST_TO_ADDR
// uc_nation := 0 ;
44506: LD_ADDR_OWVAR 21
44510: PUSH
44511: LD_INT 0
44513: ST_TO_ADDR
// InitHc ;
44514: CALL_OW 19
// hc_class := class_baggie ;
44518: LD_ADDR_OWVAR 28
44522: PUSH
44523: LD_INT 13
44525: ST_TO_ADDR
// hc_gallery :=  ;
44526: LD_ADDR_OWVAR 33
44530: PUSH
44531: LD_STRING 
44533: ST_TO_ADDR
// hc_name :=  ;
44534: LD_ADDR_OWVAR 26
44538: PUSH
44539: LD_STRING 
44541: ST_TO_ADDR
// end ;
44542: LD_VAR 0 1
44546: RET
// export function PrepareFrog ( ) ; begin
44547: LD_INT 0
44549: PPUSH
// uc_side := 0 ;
44550: LD_ADDR_OWVAR 20
44554: PUSH
44555: LD_INT 0
44557: ST_TO_ADDR
// uc_nation := 0 ;
44558: LD_ADDR_OWVAR 21
44562: PUSH
44563: LD_INT 0
44565: ST_TO_ADDR
// InitHc ;
44566: CALL_OW 19
// hc_class := class_frog ;
44570: LD_ADDR_OWVAR 28
44574: PUSH
44575: LD_INT 19
44577: ST_TO_ADDR
// hc_gallery :=  ;
44578: LD_ADDR_OWVAR 33
44582: PUSH
44583: LD_STRING 
44585: ST_TO_ADDR
// hc_name :=  ;
44586: LD_ADDR_OWVAR 26
44590: PUSH
44591: LD_STRING 
44593: ST_TO_ADDR
// end ;
44594: LD_VAR 0 1
44598: RET
// export function PrepareFish ( ) ; begin
44599: LD_INT 0
44601: PPUSH
// uc_side := 0 ;
44602: LD_ADDR_OWVAR 20
44606: PUSH
44607: LD_INT 0
44609: ST_TO_ADDR
// uc_nation := 0 ;
44610: LD_ADDR_OWVAR 21
44614: PUSH
44615: LD_INT 0
44617: ST_TO_ADDR
// InitHc ;
44618: CALL_OW 19
// hc_class := class_fish ;
44622: LD_ADDR_OWVAR 28
44626: PUSH
44627: LD_INT 20
44629: ST_TO_ADDR
// hc_gallery :=  ;
44630: LD_ADDR_OWVAR 33
44634: PUSH
44635: LD_STRING 
44637: ST_TO_ADDR
// hc_name :=  ;
44638: LD_ADDR_OWVAR 26
44642: PUSH
44643: LD_STRING 
44645: ST_TO_ADDR
// end ;
44646: LD_VAR 0 1
44650: RET
// export function PrepareBird ( ) ; begin
44651: LD_INT 0
44653: PPUSH
// uc_side := 0 ;
44654: LD_ADDR_OWVAR 20
44658: PUSH
44659: LD_INT 0
44661: ST_TO_ADDR
// uc_nation := 0 ;
44662: LD_ADDR_OWVAR 21
44666: PUSH
44667: LD_INT 0
44669: ST_TO_ADDR
// InitHc ;
44670: CALL_OW 19
// hc_class := class_phororhacos ;
44674: LD_ADDR_OWVAR 28
44678: PUSH
44679: LD_INT 18
44681: ST_TO_ADDR
// hc_gallery :=  ;
44682: LD_ADDR_OWVAR 33
44686: PUSH
44687: LD_STRING 
44689: ST_TO_ADDR
// hc_name :=  ;
44690: LD_ADDR_OWVAR 26
44694: PUSH
44695: LD_STRING 
44697: ST_TO_ADDR
// end ;
44698: LD_VAR 0 1
44702: RET
// export function PrepareHorse ( ) ; begin
44703: LD_INT 0
44705: PPUSH
// uc_side := 0 ;
44706: LD_ADDR_OWVAR 20
44710: PUSH
44711: LD_INT 0
44713: ST_TO_ADDR
// uc_nation := 0 ;
44714: LD_ADDR_OWVAR 21
44718: PUSH
44719: LD_INT 0
44721: ST_TO_ADDR
// InitHc ;
44722: CALL_OW 19
// hc_class := class_horse ;
44726: LD_ADDR_OWVAR 28
44730: PUSH
44731: LD_INT 21
44733: ST_TO_ADDR
// hc_gallery :=  ;
44734: LD_ADDR_OWVAR 33
44738: PUSH
44739: LD_STRING 
44741: ST_TO_ADDR
// hc_name :=  ;
44742: LD_ADDR_OWVAR 26
44746: PUSH
44747: LD_STRING 
44749: ST_TO_ADDR
// end ;
44750: LD_VAR 0 1
44754: RET
// export function PrepareMastodont ( ) ; begin
44755: LD_INT 0
44757: PPUSH
// uc_side := 0 ;
44758: LD_ADDR_OWVAR 20
44762: PUSH
44763: LD_INT 0
44765: ST_TO_ADDR
// uc_nation := 0 ;
44766: LD_ADDR_OWVAR 21
44770: PUSH
44771: LD_INT 0
44773: ST_TO_ADDR
// vc_chassis := class_mastodont ;
44774: LD_ADDR_OWVAR 37
44778: PUSH
44779: LD_INT 31
44781: ST_TO_ADDR
// vc_control := control_rider ;
44782: LD_ADDR_OWVAR 38
44786: PUSH
44787: LD_INT 4
44789: ST_TO_ADDR
// end ;
44790: LD_VAR 0 1
44794: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
44795: LD_INT 0
44797: PPUSH
44798: PPUSH
44799: PPUSH
// uc_side = 0 ;
44800: LD_ADDR_OWVAR 20
44804: PUSH
44805: LD_INT 0
44807: ST_TO_ADDR
// uc_nation = 0 ;
44808: LD_ADDR_OWVAR 21
44812: PUSH
44813: LD_INT 0
44815: ST_TO_ADDR
// InitHc_All ( ) ;
44816: CALL_OW 584
// InitVc ;
44820: CALL_OW 20
// if mastodonts then
44824: LD_VAR 0 6
44828: IFFALSE 44895
// for i = 1 to mastodonts do
44830: LD_ADDR_VAR 0 11
44834: PUSH
44835: DOUBLE
44836: LD_INT 1
44838: DEC
44839: ST_TO_ADDR
44840: LD_VAR 0 6
44844: PUSH
44845: FOR_TO
44846: IFFALSE 44893
// begin vc_chassis := 31 ;
44848: LD_ADDR_OWVAR 37
44852: PUSH
44853: LD_INT 31
44855: ST_TO_ADDR
// vc_control := control_rider ;
44856: LD_ADDR_OWVAR 38
44860: PUSH
44861: LD_INT 4
44863: ST_TO_ADDR
// animal := CreateVehicle ;
44864: LD_ADDR_VAR 0 12
44868: PUSH
44869: CALL_OW 45
44873: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
44874: LD_VAR 0 12
44878: PPUSH
44879: LD_VAR 0 8
44883: PPUSH
44884: LD_INT 0
44886: PPUSH
44887: CALL 47037 0 3
// end ;
44891: GO 44845
44893: POP
44894: POP
// if horses then
44895: LD_VAR 0 5
44899: IFFALSE 44966
// for i = 1 to horses do
44901: LD_ADDR_VAR 0 11
44905: PUSH
44906: DOUBLE
44907: LD_INT 1
44909: DEC
44910: ST_TO_ADDR
44911: LD_VAR 0 5
44915: PUSH
44916: FOR_TO
44917: IFFALSE 44964
// begin hc_class := 21 ;
44919: LD_ADDR_OWVAR 28
44923: PUSH
44924: LD_INT 21
44926: ST_TO_ADDR
// hc_gallery :=  ;
44927: LD_ADDR_OWVAR 33
44931: PUSH
44932: LD_STRING 
44934: ST_TO_ADDR
// animal := CreateHuman ;
44935: LD_ADDR_VAR 0 12
44939: PUSH
44940: CALL_OW 44
44944: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
44945: LD_VAR 0 12
44949: PPUSH
44950: LD_VAR 0 8
44954: PPUSH
44955: LD_INT 0
44957: PPUSH
44958: CALL 47037 0 3
// end ;
44962: GO 44916
44964: POP
44965: POP
// if birds then
44966: LD_VAR 0 1
44970: IFFALSE 45037
// for i = 1 to birds do
44972: LD_ADDR_VAR 0 11
44976: PUSH
44977: DOUBLE
44978: LD_INT 1
44980: DEC
44981: ST_TO_ADDR
44982: LD_VAR 0 1
44986: PUSH
44987: FOR_TO
44988: IFFALSE 45035
// begin hc_class := 18 ;
44990: LD_ADDR_OWVAR 28
44994: PUSH
44995: LD_INT 18
44997: ST_TO_ADDR
// hc_gallery =  ;
44998: LD_ADDR_OWVAR 33
45002: PUSH
45003: LD_STRING 
45005: ST_TO_ADDR
// animal := CreateHuman ;
45006: LD_ADDR_VAR 0 12
45010: PUSH
45011: CALL_OW 44
45015: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
45016: LD_VAR 0 12
45020: PPUSH
45021: LD_VAR 0 8
45025: PPUSH
45026: LD_INT 0
45028: PPUSH
45029: CALL 47037 0 3
// end ;
45033: GO 44987
45035: POP
45036: POP
// if tigers then
45037: LD_VAR 0 2
45041: IFFALSE 45125
// for i = 1 to tigers do
45043: LD_ADDR_VAR 0 11
45047: PUSH
45048: DOUBLE
45049: LD_INT 1
45051: DEC
45052: ST_TO_ADDR
45053: LD_VAR 0 2
45057: PUSH
45058: FOR_TO
45059: IFFALSE 45123
// begin hc_class = class_tiger ;
45061: LD_ADDR_OWVAR 28
45065: PUSH
45066: LD_INT 14
45068: ST_TO_ADDR
// hc_gallery =  ;
45069: LD_ADDR_OWVAR 33
45073: PUSH
45074: LD_STRING 
45076: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
45077: LD_ADDR_OWVAR 35
45081: PUSH
45082: LD_INT 7
45084: NEG
45085: PPUSH
45086: LD_INT 7
45088: PPUSH
45089: CALL_OW 12
45093: ST_TO_ADDR
// animal := CreateHuman ;
45094: LD_ADDR_VAR 0 12
45098: PUSH
45099: CALL_OW 44
45103: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
45104: LD_VAR 0 12
45108: PPUSH
45109: LD_VAR 0 8
45113: PPUSH
45114: LD_INT 0
45116: PPUSH
45117: CALL 47037 0 3
// end ;
45121: GO 45058
45123: POP
45124: POP
// if apemans then
45125: LD_VAR 0 3
45129: IFFALSE 45252
// for i = 1 to apemans do
45131: LD_ADDR_VAR 0 11
45135: PUSH
45136: DOUBLE
45137: LD_INT 1
45139: DEC
45140: ST_TO_ADDR
45141: LD_VAR 0 3
45145: PUSH
45146: FOR_TO
45147: IFFALSE 45250
// begin hc_class = class_apeman ;
45149: LD_ADDR_OWVAR 28
45153: PUSH
45154: LD_INT 12
45156: ST_TO_ADDR
// hc_gallery =  ;
45157: LD_ADDR_OWVAR 33
45161: PUSH
45162: LD_STRING 
45164: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
45165: LD_ADDR_OWVAR 35
45169: PUSH
45170: LD_INT 2
45172: NEG
45173: PPUSH
45174: LD_INT 2
45176: PPUSH
45177: CALL_OW 12
45181: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
45182: LD_ADDR_OWVAR 31
45186: PUSH
45187: LD_INT 1
45189: PPUSH
45190: LD_INT 3
45192: PPUSH
45193: CALL_OW 12
45197: PUSH
45198: LD_INT 1
45200: PPUSH
45201: LD_INT 3
45203: PPUSH
45204: CALL_OW 12
45208: PUSH
45209: LD_INT 0
45211: PUSH
45212: LD_INT 0
45214: PUSH
45215: EMPTY
45216: LIST
45217: LIST
45218: LIST
45219: LIST
45220: ST_TO_ADDR
// animal := CreateHuman ;
45221: LD_ADDR_VAR 0 12
45225: PUSH
45226: CALL_OW 44
45230: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
45231: LD_VAR 0 12
45235: PPUSH
45236: LD_VAR 0 8
45240: PPUSH
45241: LD_INT 0
45243: PPUSH
45244: CALL 47037 0 3
// end ;
45248: GO 45146
45250: POP
45251: POP
// if enchidnas then
45252: LD_VAR 0 4
45256: IFFALSE 45323
// for i = 1 to enchidnas do
45258: LD_ADDR_VAR 0 11
45262: PUSH
45263: DOUBLE
45264: LD_INT 1
45266: DEC
45267: ST_TO_ADDR
45268: LD_VAR 0 4
45272: PUSH
45273: FOR_TO
45274: IFFALSE 45321
// begin hc_class = 13 ;
45276: LD_ADDR_OWVAR 28
45280: PUSH
45281: LD_INT 13
45283: ST_TO_ADDR
// hc_gallery =  ;
45284: LD_ADDR_OWVAR 33
45288: PUSH
45289: LD_STRING 
45291: ST_TO_ADDR
// animal := CreateHuman ;
45292: LD_ADDR_VAR 0 12
45296: PUSH
45297: CALL_OW 44
45301: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
45302: LD_VAR 0 12
45306: PPUSH
45307: LD_VAR 0 8
45311: PPUSH
45312: LD_INT 0
45314: PPUSH
45315: CALL 47037 0 3
// end ;
45319: GO 45273
45321: POP
45322: POP
// if fishes then
45323: LD_VAR 0 7
45327: IFFALSE 45394
// for i = 1 to fishes do
45329: LD_ADDR_VAR 0 11
45333: PUSH
45334: DOUBLE
45335: LD_INT 1
45337: DEC
45338: ST_TO_ADDR
45339: LD_VAR 0 7
45343: PUSH
45344: FOR_TO
45345: IFFALSE 45392
// begin hc_class = 20 ;
45347: LD_ADDR_OWVAR 28
45351: PUSH
45352: LD_INT 20
45354: ST_TO_ADDR
// hc_gallery =  ;
45355: LD_ADDR_OWVAR 33
45359: PUSH
45360: LD_STRING 
45362: ST_TO_ADDR
// animal := CreateHuman ;
45363: LD_ADDR_VAR 0 12
45367: PUSH
45368: CALL_OW 44
45372: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
45373: LD_VAR 0 12
45377: PPUSH
45378: LD_VAR 0 9
45382: PPUSH
45383: LD_INT 0
45385: PPUSH
45386: CALL 47037 0 3
// end ;
45390: GO 45344
45392: POP
45393: POP
// end ;
45394: LD_VAR 0 10
45398: RET
// export function WantHeal ( sci , unit ) ; begin
45399: LD_INT 0
45401: PPUSH
// if GetTaskList ( sci ) > 0 then
45402: LD_VAR 0 1
45406: PPUSH
45407: CALL_OW 437
45411: PUSH
45412: LD_INT 0
45414: GREATER
45415: IFFALSE 45487
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
45417: LD_VAR 0 1
45421: PPUSH
45422: CALL_OW 437
45426: PUSH
45427: LD_INT 1
45429: ARRAY
45430: PUSH
45431: LD_INT 1
45433: ARRAY
45434: PUSH
45435: LD_STRING l
45437: EQUAL
45438: IFFALSE 45465
45440: PUSH
45441: LD_VAR 0 1
45445: PPUSH
45446: CALL_OW 437
45450: PUSH
45451: LD_INT 1
45453: ARRAY
45454: PUSH
45455: LD_INT 4
45457: ARRAY
45458: PUSH
45459: LD_VAR 0 2
45463: EQUAL
45464: AND
45465: IFFALSE 45477
// result := true else
45467: LD_ADDR_VAR 0 3
45471: PUSH
45472: LD_INT 1
45474: ST_TO_ADDR
45475: GO 45485
// result := false ;
45477: LD_ADDR_VAR 0 3
45481: PUSH
45482: LD_INT 0
45484: ST_TO_ADDR
// end else
45485: GO 45495
// result := false ;
45487: LD_ADDR_VAR 0 3
45491: PUSH
45492: LD_INT 0
45494: ST_TO_ADDR
// end ;
45495: LD_VAR 0 3
45499: RET
// export function HealTarget ( sci ) ; begin
45500: LD_INT 0
45502: PPUSH
// if not sci then
45503: LD_VAR 0 1
45507: NOT
45508: IFFALSE 45512
// exit ;
45510: GO 45577
// result := 0 ;
45512: LD_ADDR_VAR 0 2
45516: PUSH
45517: LD_INT 0
45519: ST_TO_ADDR
// if GetTaskList ( sci ) then
45520: LD_VAR 0 1
45524: PPUSH
45525: CALL_OW 437
45529: IFFALSE 45577
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
45531: LD_VAR 0 1
45535: PPUSH
45536: CALL_OW 437
45540: PUSH
45541: LD_INT 1
45543: ARRAY
45544: PUSH
45545: LD_INT 1
45547: ARRAY
45548: PUSH
45549: LD_STRING l
45551: EQUAL
45552: IFFALSE 45577
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
45554: LD_ADDR_VAR 0 2
45558: PUSH
45559: LD_VAR 0 1
45563: PPUSH
45564: CALL_OW 437
45568: PUSH
45569: LD_INT 1
45571: ARRAY
45572: PUSH
45573: LD_INT 4
45575: ARRAY
45576: ST_TO_ADDR
// end ;
45577: LD_VAR 0 2
45581: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
45582: LD_INT 0
45584: PPUSH
45585: PPUSH
45586: PPUSH
45587: PPUSH
// if not base_units then
45588: LD_VAR 0 1
45592: NOT
45593: IFFALSE 45597
// exit ;
45595: GO 45684
// result := false ;
45597: LD_ADDR_VAR 0 2
45601: PUSH
45602: LD_INT 0
45604: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
45605: LD_ADDR_VAR 0 5
45609: PUSH
45610: LD_VAR 0 1
45614: PPUSH
45615: LD_INT 21
45617: PUSH
45618: LD_INT 3
45620: PUSH
45621: EMPTY
45622: LIST
45623: LIST
45624: PPUSH
45625: CALL_OW 72
45629: ST_TO_ADDR
// if not tmp then
45630: LD_VAR 0 5
45634: NOT
45635: IFFALSE 45639
// exit ;
45637: GO 45684
// for i in tmp do
45639: LD_ADDR_VAR 0 3
45643: PUSH
45644: LD_VAR 0 5
45648: PUSH
45649: FOR_IN
45650: IFFALSE 45682
// begin result := EnemyInRange ( i , 22 ) ;
45652: LD_ADDR_VAR 0 2
45656: PUSH
45657: LD_VAR 0 3
45661: PPUSH
45662: LD_INT 22
45664: PPUSH
45665: CALL 43109 0 2
45669: ST_TO_ADDR
// if result then
45670: LD_VAR 0 2
45674: IFFALSE 45680
// exit ;
45676: POP
45677: POP
45678: GO 45684
// end ;
45680: GO 45649
45682: POP
45683: POP
// end ;
45684: LD_VAR 0 2
45688: RET
// export function FilterByTag ( units , tag ) ; begin
45689: LD_INT 0
45691: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
45692: LD_ADDR_VAR 0 3
45696: PUSH
45697: LD_VAR 0 1
45701: PPUSH
45702: LD_INT 120
45704: PUSH
45705: LD_VAR 0 2
45709: PUSH
45710: EMPTY
45711: LIST
45712: LIST
45713: PPUSH
45714: CALL_OW 72
45718: ST_TO_ADDR
// end ;
45719: LD_VAR 0 3
45723: RET
// export function IsDriver ( un ) ; begin
45724: LD_INT 0
45726: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
45727: LD_ADDR_VAR 0 2
45731: PUSH
45732: LD_VAR 0 1
45736: PUSH
45737: LD_INT 55
45739: PUSH
45740: EMPTY
45741: LIST
45742: PPUSH
45743: CALL_OW 69
45747: IN
45748: ST_TO_ADDR
// end ;
45749: LD_VAR 0 2
45753: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
45754: LD_INT 0
45756: PPUSH
45757: PPUSH
// list := [ ] ;
45758: LD_ADDR_VAR 0 5
45762: PUSH
45763: EMPTY
45764: ST_TO_ADDR
// case d of 0 :
45765: LD_VAR 0 3
45769: PUSH
45770: LD_INT 0
45772: DOUBLE
45773: EQUAL
45774: IFTRUE 45778
45776: GO 45911
45778: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
45779: LD_ADDR_VAR 0 5
45783: PUSH
45784: LD_VAR 0 1
45788: PUSH
45789: LD_INT 4
45791: MINUS
45792: PUSH
45793: LD_VAR 0 2
45797: PUSH
45798: LD_INT 4
45800: MINUS
45801: PUSH
45802: LD_INT 2
45804: PUSH
45805: EMPTY
45806: LIST
45807: LIST
45808: LIST
45809: PUSH
45810: LD_VAR 0 1
45814: PUSH
45815: LD_INT 3
45817: MINUS
45818: PUSH
45819: LD_VAR 0 2
45823: PUSH
45824: LD_INT 1
45826: PUSH
45827: EMPTY
45828: LIST
45829: LIST
45830: LIST
45831: PUSH
45832: LD_VAR 0 1
45836: PUSH
45837: LD_INT 4
45839: PLUS
45840: PUSH
45841: LD_VAR 0 2
45845: PUSH
45846: LD_INT 4
45848: PUSH
45849: EMPTY
45850: LIST
45851: LIST
45852: LIST
45853: PUSH
45854: LD_VAR 0 1
45858: PUSH
45859: LD_INT 3
45861: PLUS
45862: PUSH
45863: LD_VAR 0 2
45867: PUSH
45868: LD_INT 3
45870: PLUS
45871: PUSH
45872: LD_INT 5
45874: PUSH
45875: EMPTY
45876: LIST
45877: LIST
45878: LIST
45879: PUSH
45880: LD_VAR 0 1
45884: PUSH
45885: LD_VAR 0 2
45889: PUSH
45890: LD_INT 4
45892: PLUS
45893: PUSH
45894: LD_INT 0
45896: PUSH
45897: EMPTY
45898: LIST
45899: LIST
45900: LIST
45901: PUSH
45902: EMPTY
45903: LIST
45904: LIST
45905: LIST
45906: LIST
45907: LIST
45908: ST_TO_ADDR
// end ; 1 :
45909: GO 46609
45911: LD_INT 1
45913: DOUBLE
45914: EQUAL
45915: IFTRUE 45919
45917: GO 46052
45919: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
45920: LD_ADDR_VAR 0 5
45924: PUSH
45925: LD_VAR 0 1
45929: PUSH
45930: LD_VAR 0 2
45934: PUSH
45935: LD_INT 4
45937: MINUS
45938: PUSH
45939: LD_INT 3
45941: PUSH
45942: EMPTY
45943: LIST
45944: LIST
45945: LIST
45946: PUSH
45947: LD_VAR 0 1
45951: PUSH
45952: LD_INT 3
45954: MINUS
45955: PUSH
45956: LD_VAR 0 2
45960: PUSH
45961: LD_INT 3
45963: MINUS
45964: PUSH
45965: LD_INT 2
45967: PUSH
45968: EMPTY
45969: LIST
45970: LIST
45971: LIST
45972: PUSH
45973: LD_VAR 0 1
45977: PUSH
45978: LD_INT 4
45980: MINUS
45981: PUSH
45982: LD_VAR 0 2
45986: PUSH
45987: LD_INT 1
45989: PUSH
45990: EMPTY
45991: LIST
45992: LIST
45993: LIST
45994: PUSH
45995: LD_VAR 0 1
45999: PUSH
46000: LD_VAR 0 2
46004: PUSH
46005: LD_INT 3
46007: PLUS
46008: PUSH
46009: LD_INT 0
46011: PUSH
46012: EMPTY
46013: LIST
46014: LIST
46015: LIST
46016: PUSH
46017: LD_VAR 0 1
46021: PUSH
46022: LD_INT 4
46024: PLUS
46025: PUSH
46026: LD_VAR 0 2
46030: PUSH
46031: LD_INT 4
46033: PLUS
46034: PUSH
46035: LD_INT 5
46037: PUSH
46038: EMPTY
46039: LIST
46040: LIST
46041: LIST
46042: PUSH
46043: EMPTY
46044: LIST
46045: LIST
46046: LIST
46047: LIST
46048: LIST
46049: ST_TO_ADDR
// end ; 2 :
46050: GO 46609
46052: LD_INT 2
46054: DOUBLE
46055: EQUAL
46056: IFTRUE 46060
46058: GO 46189
46060: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
46061: LD_ADDR_VAR 0 5
46065: PUSH
46066: LD_VAR 0 1
46070: PUSH
46071: LD_VAR 0 2
46075: PUSH
46076: LD_INT 3
46078: MINUS
46079: PUSH
46080: LD_INT 3
46082: PUSH
46083: EMPTY
46084: LIST
46085: LIST
46086: LIST
46087: PUSH
46088: LD_VAR 0 1
46092: PUSH
46093: LD_INT 4
46095: PLUS
46096: PUSH
46097: LD_VAR 0 2
46101: PUSH
46102: LD_INT 4
46104: PUSH
46105: EMPTY
46106: LIST
46107: LIST
46108: LIST
46109: PUSH
46110: LD_VAR 0 1
46114: PUSH
46115: LD_VAR 0 2
46119: PUSH
46120: LD_INT 4
46122: PLUS
46123: PUSH
46124: LD_INT 0
46126: PUSH
46127: EMPTY
46128: LIST
46129: LIST
46130: LIST
46131: PUSH
46132: LD_VAR 0 1
46136: PUSH
46137: LD_INT 3
46139: MINUS
46140: PUSH
46141: LD_VAR 0 2
46145: PUSH
46146: LD_INT 1
46148: PUSH
46149: EMPTY
46150: LIST
46151: LIST
46152: LIST
46153: PUSH
46154: LD_VAR 0 1
46158: PUSH
46159: LD_INT 4
46161: MINUS
46162: PUSH
46163: LD_VAR 0 2
46167: PUSH
46168: LD_INT 4
46170: MINUS
46171: PUSH
46172: LD_INT 2
46174: PUSH
46175: EMPTY
46176: LIST
46177: LIST
46178: LIST
46179: PUSH
46180: EMPTY
46181: LIST
46182: LIST
46183: LIST
46184: LIST
46185: LIST
46186: ST_TO_ADDR
// end ; 3 :
46187: GO 46609
46189: LD_INT 3
46191: DOUBLE
46192: EQUAL
46193: IFTRUE 46197
46195: GO 46330
46197: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
46198: LD_ADDR_VAR 0 5
46202: PUSH
46203: LD_VAR 0 1
46207: PUSH
46208: LD_INT 3
46210: PLUS
46211: PUSH
46212: LD_VAR 0 2
46216: PUSH
46217: LD_INT 4
46219: PUSH
46220: EMPTY
46221: LIST
46222: LIST
46223: LIST
46224: PUSH
46225: LD_VAR 0 1
46229: PUSH
46230: LD_INT 4
46232: PLUS
46233: PUSH
46234: LD_VAR 0 2
46238: PUSH
46239: LD_INT 4
46241: PLUS
46242: PUSH
46243: LD_INT 5
46245: PUSH
46246: EMPTY
46247: LIST
46248: LIST
46249: LIST
46250: PUSH
46251: LD_VAR 0 1
46255: PUSH
46256: LD_INT 4
46258: MINUS
46259: PUSH
46260: LD_VAR 0 2
46264: PUSH
46265: LD_INT 1
46267: PUSH
46268: EMPTY
46269: LIST
46270: LIST
46271: LIST
46272: PUSH
46273: LD_VAR 0 1
46277: PUSH
46278: LD_VAR 0 2
46282: PUSH
46283: LD_INT 4
46285: MINUS
46286: PUSH
46287: LD_INT 3
46289: PUSH
46290: EMPTY
46291: LIST
46292: LIST
46293: LIST
46294: PUSH
46295: LD_VAR 0 1
46299: PUSH
46300: LD_INT 3
46302: MINUS
46303: PUSH
46304: LD_VAR 0 2
46308: PUSH
46309: LD_INT 3
46311: MINUS
46312: PUSH
46313: LD_INT 2
46315: PUSH
46316: EMPTY
46317: LIST
46318: LIST
46319: LIST
46320: PUSH
46321: EMPTY
46322: LIST
46323: LIST
46324: LIST
46325: LIST
46326: LIST
46327: ST_TO_ADDR
// end ; 4 :
46328: GO 46609
46330: LD_INT 4
46332: DOUBLE
46333: EQUAL
46334: IFTRUE 46338
46336: GO 46471
46338: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
46339: LD_ADDR_VAR 0 5
46343: PUSH
46344: LD_VAR 0 1
46348: PUSH
46349: LD_VAR 0 2
46353: PUSH
46354: LD_INT 4
46356: PLUS
46357: PUSH
46358: LD_INT 0
46360: PUSH
46361: EMPTY
46362: LIST
46363: LIST
46364: LIST
46365: PUSH
46366: LD_VAR 0 1
46370: PUSH
46371: LD_INT 3
46373: PLUS
46374: PUSH
46375: LD_VAR 0 2
46379: PUSH
46380: LD_INT 3
46382: PLUS
46383: PUSH
46384: LD_INT 5
46386: PUSH
46387: EMPTY
46388: LIST
46389: LIST
46390: LIST
46391: PUSH
46392: LD_VAR 0 1
46396: PUSH
46397: LD_INT 4
46399: PLUS
46400: PUSH
46401: LD_VAR 0 2
46405: PUSH
46406: LD_INT 4
46408: PUSH
46409: EMPTY
46410: LIST
46411: LIST
46412: LIST
46413: PUSH
46414: LD_VAR 0 1
46418: PUSH
46419: LD_VAR 0 2
46423: PUSH
46424: LD_INT 3
46426: MINUS
46427: PUSH
46428: LD_INT 3
46430: PUSH
46431: EMPTY
46432: LIST
46433: LIST
46434: LIST
46435: PUSH
46436: LD_VAR 0 1
46440: PUSH
46441: LD_INT 4
46443: MINUS
46444: PUSH
46445: LD_VAR 0 2
46449: PUSH
46450: LD_INT 4
46452: MINUS
46453: PUSH
46454: LD_INT 2
46456: PUSH
46457: EMPTY
46458: LIST
46459: LIST
46460: LIST
46461: PUSH
46462: EMPTY
46463: LIST
46464: LIST
46465: LIST
46466: LIST
46467: LIST
46468: ST_TO_ADDR
// end ; 5 :
46469: GO 46609
46471: LD_INT 5
46473: DOUBLE
46474: EQUAL
46475: IFTRUE 46479
46477: GO 46608
46479: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
46480: LD_ADDR_VAR 0 5
46484: PUSH
46485: LD_VAR 0 1
46489: PUSH
46490: LD_INT 4
46492: MINUS
46493: PUSH
46494: LD_VAR 0 2
46498: PUSH
46499: LD_INT 1
46501: PUSH
46502: EMPTY
46503: LIST
46504: LIST
46505: LIST
46506: PUSH
46507: LD_VAR 0 1
46511: PUSH
46512: LD_VAR 0 2
46516: PUSH
46517: LD_INT 4
46519: MINUS
46520: PUSH
46521: LD_INT 3
46523: PUSH
46524: EMPTY
46525: LIST
46526: LIST
46527: LIST
46528: PUSH
46529: LD_VAR 0 1
46533: PUSH
46534: LD_INT 4
46536: PLUS
46537: PUSH
46538: LD_VAR 0 2
46542: PUSH
46543: LD_INT 4
46545: PLUS
46546: PUSH
46547: LD_INT 5
46549: PUSH
46550: EMPTY
46551: LIST
46552: LIST
46553: LIST
46554: PUSH
46555: LD_VAR 0 1
46559: PUSH
46560: LD_INT 3
46562: PLUS
46563: PUSH
46564: LD_VAR 0 2
46568: PUSH
46569: LD_INT 4
46571: PUSH
46572: EMPTY
46573: LIST
46574: LIST
46575: LIST
46576: PUSH
46577: LD_VAR 0 1
46581: PUSH
46582: LD_VAR 0 2
46586: PUSH
46587: LD_INT 3
46589: PLUS
46590: PUSH
46591: LD_INT 0
46593: PUSH
46594: EMPTY
46595: LIST
46596: LIST
46597: LIST
46598: PUSH
46599: EMPTY
46600: LIST
46601: LIST
46602: LIST
46603: LIST
46604: LIST
46605: ST_TO_ADDR
// end ; end ;
46606: GO 46609
46608: POP
// result := list ;
46609: LD_ADDR_VAR 0 4
46613: PUSH
46614: LD_VAR 0 5
46618: ST_TO_ADDR
// end ;
46619: LD_VAR 0 4
46623: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
46624: LD_INT 0
46626: PPUSH
46627: PPUSH
46628: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
46629: LD_VAR 0 1
46633: NOT
46634: IFTRUE 46662
46636: PUSH
46637: LD_VAR 0 2
46641: PUSH
46642: LD_INT 1
46644: PUSH
46645: LD_INT 2
46647: PUSH
46648: LD_INT 3
46650: PUSH
46651: LD_INT 4
46653: PUSH
46654: EMPTY
46655: LIST
46656: LIST
46657: LIST
46658: LIST
46659: IN
46660: NOT
46661: OR
46662: IFFALSE 46666
// exit ;
46664: GO 46749
// tmp := [ ] ;
46666: LD_ADDR_VAR 0 5
46670: PUSH
46671: EMPTY
46672: ST_TO_ADDR
// for i in units do
46673: LD_ADDR_VAR 0 4
46677: PUSH
46678: LD_VAR 0 1
46682: PUSH
46683: FOR_IN
46684: IFFALSE 46718
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
46686: LD_ADDR_VAR 0 5
46690: PUSH
46691: LD_VAR 0 5
46695: PPUSH
46696: LD_VAR 0 4
46700: PPUSH
46701: LD_VAR 0 2
46705: PPUSH
46706: CALL_OW 259
46710: PPUSH
46711: CALL 48144 0 2
46715: ST_TO_ADDR
46716: GO 46683
46718: POP
46719: POP
// if not tmp then
46720: LD_VAR 0 5
46724: NOT
46725: IFFALSE 46729
// exit ;
46727: GO 46749
// result := SortListByListDesc ( units , tmp ) ;
46729: LD_ADDR_VAR 0 3
46733: PUSH
46734: LD_VAR 0 1
46738: PPUSH
46739: LD_VAR 0 5
46743: PPUSH
46744: CALL_OW 77
46748: ST_TO_ADDR
// end ;
46749: LD_VAR 0 3
46753: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
46754: LD_INT 0
46756: PPUSH
46757: PPUSH
46758: PPUSH
// result := false ;
46759: LD_ADDR_VAR 0 3
46763: PUSH
46764: LD_INT 0
46766: ST_TO_ADDR
// if not building then
46767: LD_VAR 0 2
46771: NOT
46772: IFFALSE 46776
// exit ;
46774: GO 46920
// x := GetX ( building ) ;
46776: LD_ADDR_VAR 0 4
46780: PUSH
46781: LD_VAR 0 2
46785: PPUSH
46786: CALL_OW 250
46790: ST_TO_ADDR
// y := GetY ( building ) ;
46791: LD_ADDR_VAR 0 5
46795: PUSH
46796: LD_VAR 0 2
46800: PPUSH
46801: CALL_OW 251
46805: ST_TO_ADDR
// if not x or not y then
46806: LD_VAR 0 4
46810: NOT
46811: IFTRUE 46820
46813: PUSH
46814: LD_VAR 0 5
46818: NOT
46819: OR
46820: IFFALSE 46824
// exit ;
46822: GO 46920
// if GetTaskList ( unit ) then
46824: LD_VAR 0 1
46828: PPUSH
46829: CALL_OW 437
46833: IFFALSE 46920
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
46835: LD_STRING e
46837: PUSH
46838: LD_VAR 0 1
46842: PPUSH
46843: CALL_OW 437
46847: PUSH
46848: LD_INT 1
46850: ARRAY
46851: PUSH
46852: LD_INT 1
46854: ARRAY
46855: EQUAL
46856: IFFALSE 46883
46858: PUSH
46859: LD_VAR 0 4
46863: PUSH
46864: LD_VAR 0 1
46868: PPUSH
46869: CALL_OW 437
46873: PUSH
46874: LD_INT 1
46876: ARRAY
46877: PUSH
46878: LD_INT 2
46880: ARRAY
46881: EQUAL
46882: AND
46883: IFFALSE 46910
46885: PUSH
46886: LD_VAR 0 5
46890: PUSH
46891: LD_VAR 0 1
46895: PPUSH
46896: CALL_OW 437
46900: PUSH
46901: LD_INT 1
46903: ARRAY
46904: PUSH
46905: LD_INT 3
46907: ARRAY
46908: EQUAL
46909: AND
46910: IFFALSE 46920
// result := true end ;
46912: LD_ADDR_VAR 0 3
46916: PUSH
46917: LD_INT 1
46919: ST_TO_ADDR
// end ;
46920: LD_VAR 0 3
46924: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
46925: LD_INT 0
46927: PPUSH
// result := false ;
46928: LD_ADDR_VAR 0 4
46932: PUSH
46933: LD_INT 0
46935: ST_TO_ADDR
// if GetTaskList ( unit ) then
46936: LD_VAR 0 1
46940: PPUSH
46941: CALL_OW 437
46945: IFFALSE 47032
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
46947: LD_STRING M
46949: PUSH
46950: LD_VAR 0 1
46954: PPUSH
46955: CALL_OW 437
46959: PUSH
46960: LD_INT 1
46962: ARRAY
46963: PUSH
46964: LD_INT 1
46966: ARRAY
46967: EQUAL
46968: IFFALSE 46995
46970: PUSH
46971: LD_VAR 0 2
46975: PUSH
46976: LD_VAR 0 1
46980: PPUSH
46981: CALL_OW 437
46985: PUSH
46986: LD_INT 1
46988: ARRAY
46989: PUSH
46990: LD_INT 2
46992: ARRAY
46993: EQUAL
46994: AND
46995: IFFALSE 47022
46997: PUSH
46998: LD_VAR 0 3
47002: PUSH
47003: LD_VAR 0 1
47007: PPUSH
47008: CALL_OW 437
47012: PUSH
47013: LD_INT 1
47015: ARRAY
47016: PUSH
47017: LD_INT 3
47019: ARRAY
47020: EQUAL
47021: AND
47022: IFFALSE 47032
// result := true ;
47024: LD_ADDR_VAR 0 4
47028: PUSH
47029: LD_INT 1
47031: ST_TO_ADDR
// end ; end ;
47032: LD_VAR 0 4
47036: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
47037: LD_INT 0
47039: PPUSH
47040: PPUSH
47041: PPUSH
47042: PPUSH
// if not unit or not area then
47043: LD_VAR 0 1
47047: NOT
47048: IFTRUE 47057
47050: PUSH
47051: LD_VAR 0 2
47055: NOT
47056: OR
47057: IFFALSE 47061
// exit ;
47059: GO 47237
// tmp := AreaToList ( area , i ) ;
47061: LD_ADDR_VAR 0 6
47065: PUSH
47066: LD_VAR 0 2
47070: PPUSH
47071: LD_VAR 0 5
47075: PPUSH
47076: CALL_OW 517
47080: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
47081: LD_ADDR_VAR 0 5
47085: PUSH
47086: DOUBLE
47087: LD_INT 1
47089: DEC
47090: ST_TO_ADDR
47091: LD_VAR 0 6
47095: PUSH
47096: LD_INT 1
47098: ARRAY
47099: PUSH
47100: FOR_TO
47101: IFFALSE 47235
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
47103: LD_ADDR_VAR 0 7
47107: PUSH
47108: LD_VAR 0 6
47112: PUSH
47113: LD_INT 1
47115: ARRAY
47116: PUSH
47117: LD_VAR 0 5
47121: ARRAY
47122: PUSH
47123: LD_VAR 0 6
47127: PUSH
47128: LD_INT 2
47130: ARRAY
47131: PUSH
47132: LD_VAR 0 5
47136: ARRAY
47137: PUSH
47138: EMPTY
47139: LIST
47140: LIST
47141: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
47142: LD_INT 92
47144: PUSH
47145: LD_VAR 0 7
47149: PUSH
47150: LD_INT 1
47152: ARRAY
47153: PUSH
47154: LD_VAR 0 7
47158: PUSH
47159: LD_INT 2
47161: ARRAY
47162: PUSH
47163: LD_INT 2
47165: PUSH
47166: EMPTY
47167: LIST
47168: LIST
47169: LIST
47170: LIST
47171: PPUSH
47172: CALL_OW 69
47176: PUSH
47177: LD_INT 0
47179: EQUAL
47180: IFFALSE 47233
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
47182: LD_VAR 0 1
47186: PPUSH
47187: LD_VAR 0 7
47191: PUSH
47192: LD_INT 1
47194: ARRAY
47195: PPUSH
47196: LD_VAR 0 7
47200: PUSH
47201: LD_INT 2
47203: ARRAY
47204: PPUSH
47205: LD_VAR 0 3
47209: PPUSH
47210: CALL_OW 48
// result := IsPlaced ( unit ) ;
47214: LD_ADDR_VAR 0 4
47218: PUSH
47219: LD_VAR 0 1
47223: PPUSH
47224: CALL_OW 305
47228: ST_TO_ADDR
// exit ;
47229: POP
47230: POP
47231: GO 47237
// end ; end ;
47233: GO 47100
47235: POP
47236: POP
// end ;
47237: LD_VAR 0 4
47241: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
47242: LD_INT 0
47244: PPUSH
47245: PPUSH
47246: PPUSH
// if not side or side > 8 then
47247: LD_VAR 0 1
47251: NOT
47252: IFTRUE 47264
47254: PUSH
47255: LD_VAR 0 1
47259: PUSH
47260: LD_INT 8
47262: GREATER
47263: OR
47264: IFFALSE 47268
// exit ;
47266: GO 47455
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
47268: LD_ADDR_VAR 0 4
47272: PUSH
47273: LD_INT 22
47275: PUSH
47276: LD_VAR 0 1
47280: PUSH
47281: EMPTY
47282: LIST
47283: LIST
47284: PUSH
47285: LD_INT 21
47287: PUSH
47288: LD_INT 3
47290: PUSH
47291: EMPTY
47292: LIST
47293: LIST
47294: PUSH
47295: EMPTY
47296: LIST
47297: LIST
47298: PPUSH
47299: CALL_OW 69
47303: ST_TO_ADDR
// if not tmp then
47304: LD_VAR 0 4
47308: NOT
47309: IFFALSE 47313
// exit ;
47311: GO 47455
// enable_addtolog := true ;
47313: LD_ADDR_OWVAR 81
47317: PUSH
47318: LD_INT 1
47320: ST_TO_ADDR
// AddToLog ( [ ) ;
47321: LD_STRING [
47323: PPUSH
47324: CALL_OW 561
// for i in tmp do
47328: LD_ADDR_VAR 0 3
47332: PUSH
47333: LD_VAR 0 4
47337: PUSH
47338: FOR_IN
47339: IFFALSE 47446
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
47341: LD_STRING [
47343: PUSH
47344: LD_VAR 0 3
47348: PPUSH
47349: CALL_OW 266
47353: STR
47354: PUSH
47355: LD_STRING , 
47357: STR
47358: PUSH
47359: LD_VAR 0 3
47363: PPUSH
47364: CALL_OW 250
47368: STR
47369: PUSH
47370: LD_STRING , 
47372: STR
47373: PUSH
47374: LD_VAR 0 3
47378: PPUSH
47379: CALL_OW 251
47383: STR
47384: PUSH
47385: LD_STRING , 
47387: STR
47388: PUSH
47389: LD_VAR 0 3
47393: PPUSH
47394: CALL_OW 254
47398: STR
47399: PUSH
47400: LD_STRING , 
47402: STR
47403: PUSH
47404: LD_VAR 0 3
47408: PPUSH
47409: LD_INT 1
47411: PPUSH
47412: CALL_OW 268
47416: STR
47417: PUSH
47418: LD_STRING , 
47420: STR
47421: PUSH
47422: LD_VAR 0 3
47426: PPUSH
47427: LD_INT 2
47429: PPUSH
47430: CALL_OW 268
47434: STR
47435: PUSH
47436: LD_STRING ],
47438: STR
47439: PPUSH
47440: CALL_OW 561
// end ;
47444: GO 47338
47446: POP
47447: POP
// AddToLog ( ]; ) ;
47448: LD_STRING ];
47450: PPUSH
47451: CALL_OW 561
// end ;
47455: LD_VAR 0 2
47459: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
47460: LD_INT 0
47462: PPUSH
47463: PPUSH
47464: PPUSH
47465: PPUSH
47466: PPUSH
// if not area or not rate or not max then
47467: LD_VAR 0 1
47471: NOT
47472: IFTRUE 47481
47474: PUSH
47475: LD_VAR 0 2
47479: NOT
47480: OR
47481: IFTRUE 47490
47483: PUSH
47484: LD_VAR 0 4
47488: NOT
47489: OR
47490: IFFALSE 47494
// exit ;
47492: GO 47683
// while 1 do
47494: LD_INT 1
47496: IFFALSE 47683
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
47498: LD_ADDR_VAR 0 9
47502: PUSH
47503: LD_VAR 0 1
47507: PPUSH
47508: LD_INT 1
47510: PPUSH
47511: CALL_OW 287
47515: PUSH
47516: LD_INT 10
47518: MUL
47519: ST_TO_ADDR
// r := rate / 10 ;
47520: LD_ADDR_VAR 0 7
47524: PUSH
47525: LD_VAR 0 2
47529: PUSH
47530: LD_INT 10
47532: DIVREAL
47533: ST_TO_ADDR
// time := 1 1$00 ;
47534: LD_ADDR_VAR 0 8
47538: PUSH
47539: LD_INT 2100
47541: ST_TO_ADDR
// if amount < min then
47542: LD_VAR 0 9
47546: PUSH
47547: LD_VAR 0 3
47551: LESS
47552: IFFALSE 47570
// r := r * 2 else
47554: LD_ADDR_VAR 0 7
47558: PUSH
47559: LD_VAR 0 7
47563: PUSH
47564: LD_INT 2
47566: MUL
47567: ST_TO_ADDR
47568: GO 47596
// if amount > max then
47570: LD_VAR 0 9
47574: PUSH
47575: LD_VAR 0 4
47579: GREATER
47580: IFFALSE 47596
// r := r / 2 ;
47582: LD_ADDR_VAR 0 7
47586: PUSH
47587: LD_VAR 0 7
47591: PUSH
47592: LD_INT 2
47594: DIVREAL
47595: ST_TO_ADDR
// time := time / r ;
47596: LD_ADDR_VAR 0 8
47600: PUSH
47601: LD_VAR 0 8
47605: PUSH
47606: LD_VAR 0 7
47610: DIVREAL
47611: ST_TO_ADDR
// if time < 0 then
47612: LD_VAR 0 8
47616: PUSH
47617: LD_INT 0
47619: LESS
47620: IFFALSE 47637
// time := time * - 1 ;
47622: LD_ADDR_VAR 0 8
47626: PUSH
47627: LD_VAR 0 8
47631: PUSH
47632: LD_INT 1
47634: NEG
47635: MUL
47636: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
47637: LD_VAR 0 8
47641: PUSH
47642: LD_INT 35
47644: PPUSH
47645: LD_INT 875
47647: PPUSH
47648: CALL_OW 12
47652: PLUS
47653: PPUSH
47654: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
47658: LD_INT 1
47660: PPUSH
47661: LD_INT 5
47663: PPUSH
47664: CALL_OW 12
47668: PPUSH
47669: LD_VAR 0 1
47673: PPUSH
47674: LD_INT 1
47676: PPUSH
47677: CALL_OW 55
// end ;
47681: GO 47494
// end ;
47683: LD_VAR 0 5
47687: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
47688: LD_INT 0
47690: PPUSH
47691: PPUSH
47692: PPUSH
47693: PPUSH
47694: PPUSH
47695: PPUSH
47696: PPUSH
47697: PPUSH
// if not turrets or not factories then
47698: LD_VAR 0 1
47702: NOT
47703: IFTRUE 47712
47705: PUSH
47706: LD_VAR 0 2
47710: NOT
47711: OR
47712: IFFALSE 47716
// exit ;
47714: GO 48023
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
47716: LD_ADDR_VAR 0 10
47720: PUSH
47721: LD_INT 5
47723: PUSH
47724: LD_INT 6
47726: PUSH
47727: EMPTY
47728: LIST
47729: LIST
47730: PUSH
47731: LD_INT 2
47733: PUSH
47734: LD_INT 4
47736: PUSH
47737: EMPTY
47738: LIST
47739: LIST
47740: PUSH
47741: LD_INT 3
47743: PUSH
47744: LD_INT 5
47746: PUSH
47747: EMPTY
47748: LIST
47749: LIST
47750: PUSH
47751: EMPTY
47752: LIST
47753: LIST
47754: LIST
47755: PUSH
47756: LD_INT 24
47758: PUSH
47759: LD_INT 25
47761: PUSH
47762: EMPTY
47763: LIST
47764: LIST
47765: PUSH
47766: LD_INT 23
47768: PUSH
47769: LD_INT 27
47771: PUSH
47772: EMPTY
47773: LIST
47774: LIST
47775: PUSH
47776: EMPTY
47777: LIST
47778: LIST
47779: PUSH
47780: LD_INT 42
47782: PUSH
47783: LD_INT 43
47785: PUSH
47786: EMPTY
47787: LIST
47788: LIST
47789: PUSH
47790: LD_INT 44
47792: PUSH
47793: LD_INT 46
47795: PUSH
47796: EMPTY
47797: LIST
47798: LIST
47799: PUSH
47800: LD_INT 45
47802: PUSH
47803: LD_INT 47
47805: PUSH
47806: EMPTY
47807: LIST
47808: LIST
47809: PUSH
47810: EMPTY
47811: LIST
47812: LIST
47813: LIST
47814: PUSH
47815: EMPTY
47816: LIST
47817: LIST
47818: LIST
47819: ST_TO_ADDR
// result := [ ] ;
47820: LD_ADDR_VAR 0 3
47824: PUSH
47825: EMPTY
47826: ST_TO_ADDR
// for i in turrets do
47827: LD_ADDR_VAR 0 4
47831: PUSH
47832: LD_VAR 0 1
47836: PUSH
47837: FOR_IN
47838: IFFALSE 48021
// begin nat := GetNation ( i ) ;
47840: LD_ADDR_VAR 0 7
47844: PUSH
47845: LD_VAR 0 4
47849: PPUSH
47850: CALL_OW 248
47854: ST_TO_ADDR
// weapon := 0 ;
47855: LD_ADDR_VAR 0 8
47859: PUSH
47860: LD_INT 0
47862: ST_TO_ADDR
// if not nat then
47863: LD_VAR 0 7
47867: NOT
47868: IFFALSE 47872
// continue ;
47870: GO 47837
// for j in list [ nat ] do
47872: LD_ADDR_VAR 0 5
47876: PUSH
47877: LD_VAR 0 10
47881: PUSH
47882: LD_VAR 0 7
47886: ARRAY
47887: PUSH
47888: FOR_IN
47889: IFFALSE 47930
// if GetBWeapon ( i ) = j [ 1 ] then
47891: LD_VAR 0 4
47895: PPUSH
47896: CALL_OW 269
47900: PUSH
47901: LD_VAR 0 5
47905: PUSH
47906: LD_INT 1
47908: ARRAY
47909: EQUAL
47910: IFFALSE 47928
// begin weapon := j [ 2 ] ;
47912: LD_ADDR_VAR 0 8
47916: PUSH
47917: LD_VAR 0 5
47921: PUSH
47922: LD_INT 2
47924: ARRAY
47925: ST_TO_ADDR
// break ;
47926: GO 47930
// end ;
47928: GO 47888
47930: POP
47931: POP
// if not weapon then
47932: LD_VAR 0 8
47936: NOT
47937: IFFALSE 47941
// continue ;
47939: GO 47837
// for k in factories do
47941: LD_ADDR_VAR 0 6
47945: PUSH
47946: LD_VAR 0 2
47950: PUSH
47951: FOR_IN
47952: IFFALSE 48017
// begin weapons := AvailableWeaponList ( k ) ;
47954: LD_ADDR_VAR 0 9
47958: PUSH
47959: LD_VAR 0 6
47963: PPUSH
47964: CALL_OW 478
47968: ST_TO_ADDR
// if not weapons then
47969: LD_VAR 0 9
47973: NOT
47974: IFFALSE 47978
// continue ;
47976: GO 47951
// if weapon in weapons then
47978: LD_VAR 0 8
47982: PUSH
47983: LD_VAR 0 9
47987: IN
47988: IFFALSE 48015
// begin result := [ i , weapon ] ;
47990: LD_ADDR_VAR 0 3
47994: PUSH
47995: LD_VAR 0 4
47999: PUSH
48000: LD_VAR 0 8
48004: PUSH
48005: EMPTY
48006: LIST
48007: LIST
48008: ST_TO_ADDR
// exit ;
48009: POP
48010: POP
48011: POP
48012: POP
48013: GO 48023
// end ; end ;
48015: GO 47951
48017: POP
48018: POP
// end ;
48019: GO 47837
48021: POP
48022: POP
// end ;
48023: LD_VAR 0 3
48027: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
48028: LD_INT 0
48030: PPUSH
// if not side or side > 8 then
48031: LD_VAR 0 3
48035: NOT
48036: IFTRUE 48048
48038: PUSH
48039: LD_VAR 0 3
48043: PUSH
48044: LD_INT 8
48046: GREATER
48047: OR
48048: IFFALSE 48052
// exit ;
48050: GO 48111
// if not range then
48052: LD_VAR 0 4
48056: NOT
48057: IFFALSE 48068
// range := - 12 ;
48059: LD_ADDR_VAR 0 4
48063: PUSH
48064: LD_INT 12
48066: NEG
48067: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
48068: LD_VAR 0 1
48072: PPUSH
48073: LD_VAR 0 2
48077: PPUSH
48078: LD_VAR 0 3
48082: PPUSH
48083: LD_VAR 0 4
48087: PPUSH
48088: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
48092: LD_VAR 0 1
48096: PPUSH
48097: LD_VAR 0 2
48101: PPUSH
48102: LD_VAR 0 3
48106: PPUSH
48107: CALL_OW 331
// end ;
48111: LD_VAR 0 5
48115: RET
// export function Video ( mode ) ; begin
48116: LD_INT 0
48118: PPUSH
// ingame_video = mode ;
48119: LD_ADDR_OWVAR 52
48123: PUSH
48124: LD_VAR 0 1
48128: ST_TO_ADDR
// interface_hidden = mode ;
48129: LD_ADDR_OWVAR 54
48133: PUSH
48134: LD_VAR 0 1
48138: ST_TO_ADDR
// end ;
48139: LD_VAR 0 2
48143: RET
// export function Join ( array , element ) ; begin
48144: LD_INT 0
48146: PPUSH
// result := Replace ( array , array + 1 , element ) ;
48147: LD_ADDR_VAR 0 3
48151: PUSH
48152: LD_VAR 0 1
48156: PPUSH
48157: LD_VAR 0 1
48161: PUSH
48162: LD_INT 1
48164: PLUS
48165: PPUSH
48166: LD_VAR 0 2
48170: PPUSH
48171: CALL_OW 1
48175: ST_TO_ADDR
// end ;
48176: LD_VAR 0 3
48180: RET
// export function JoinUnion ( array , element ) ; begin
48181: LD_INT 0
48183: PPUSH
// result := array union element ;
48184: LD_ADDR_VAR 0 3
48188: PUSH
48189: LD_VAR 0 1
48193: PUSH
48194: LD_VAR 0 2
48198: UNION
48199: ST_TO_ADDR
// end ;
48200: LD_VAR 0 3
48204: RET
// export function GetBehemoths ( side ) ; begin
48205: LD_INT 0
48207: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
48208: LD_ADDR_VAR 0 2
48212: PUSH
48213: LD_INT 22
48215: PUSH
48216: LD_VAR 0 1
48220: PUSH
48221: EMPTY
48222: LIST
48223: LIST
48224: PUSH
48225: LD_INT 31
48227: PUSH
48228: LD_INT 25
48230: PUSH
48231: EMPTY
48232: LIST
48233: LIST
48234: PUSH
48235: EMPTY
48236: LIST
48237: LIST
48238: PPUSH
48239: CALL_OW 69
48243: ST_TO_ADDR
// end ;
48244: LD_VAR 0 2
48248: RET
// export function Shuffle ( array ) ; var i , index ; begin
48249: LD_INT 0
48251: PPUSH
48252: PPUSH
48253: PPUSH
// result := [ ] ;
48254: LD_ADDR_VAR 0 2
48258: PUSH
48259: EMPTY
48260: ST_TO_ADDR
// if not array then
48261: LD_VAR 0 1
48265: NOT
48266: IFFALSE 48270
// exit ;
48268: GO 48369
// Randomize ;
48270: CALL_OW 10
// for i = array downto 1 do
48274: LD_ADDR_VAR 0 3
48278: PUSH
48279: DOUBLE
48280: LD_VAR 0 1
48284: INC
48285: ST_TO_ADDR
48286: LD_INT 1
48288: PUSH
48289: FOR_DOWNTO
48290: IFFALSE 48367
// begin index := rand ( 1 , array ) ;
48292: LD_ADDR_VAR 0 4
48296: PUSH
48297: LD_INT 1
48299: PPUSH
48300: LD_VAR 0 1
48304: PPUSH
48305: CALL_OW 12
48309: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
48310: LD_ADDR_VAR 0 2
48314: PUSH
48315: LD_VAR 0 2
48319: PPUSH
48320: LD_VAR 0 2
48324: PUSH
48325: LD_INT 1
48327: PLUS
48328: PPUSH
48329: LD_VAR 0 1
48333: PUSH
48334: LD_VAR 0 4
48338: ARRAY
48339: PPUSH
48340: CALL_OW 2
48344: ST_TO_ADDR
// array := Delete ( array , index ) ;
48345: LD_ADDR_VAR 0 1
48349: PUSH
48350: LD_VAR 0 1
48354: PPUSH
48355: LD_VAR 0 4
48359: PPUSH
48360: CALL_OW 3
48364: ST_TO_ADDR
// end ;
48365: GO 48289
48367: POP
48368: POP
// end ;
48369: LD_VAR 0 2
48373: RET
// export function GetBaseMaterials ( base ) ; begin
48374: LD_INT 0
48376: PPUSH
// result := [ 0 , 0 , 0 ] ;
48377: LD_ADDR_VAR 0 2
48381: PUSH
48382: LD_INT 0
48384: PUSH
48385: LD_INT 0
48387: PUSH
48388: LD_INT 0
48390: PUSH
48391: EMPTY
48392: LIST
48393: LIST
48394: LIST
48395: ST_TO_ADDR
// if not base then
48396: LD_VAR 0 1
48400: NOT
48401: IFFALSE 48405
// exit ;
48403: GO 48454
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
48405: LD_ADDR_VAR 0 2
48409: PUSH
48410: LD_VAR 0 1
48414: PPUSH
48415: LD_INT 1
48417: PPUSH
48418: CALL_OW 275
48422: PUSH
48423: LD_VAR 0 1
48427: PPUSH
48428: LD_INT 2
48430: PPUSH
48431: CALL_OW 275
48435: PUSH
48436: LD_VAR 0 1
48440: PPUSH
48441: LD_INT 3
48443: PPUSH
48444: CALL_OW 275
48448: PUSH
48449: EMPTY
48450: LIST
48451: LIST
48452: LIST
48453: ST_TO_ADDR
// end ;
48454: LD_VAR 0 2
48458: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
48459: LD_INT 0
48461: PPUSH
48462: PPUSH
// result := array ;
48463: LD_ADDR_VAR 0 3
48467: PUSH
48468: LD_VAR 0 1
48472: ST_TO_ADDR
// if size >= result then
48473: LD_VAR 0 2
48477: PUSH
48478: LD_VAR 0 3
48482: GREATEREQUAL
48483: IFFALSE 48487
// exit ;
48485: GO 48537
// if size then
48487: LD_VAR 0 2
48491: IFFALSE 48537
// for i := array downto size do
48493: LD_ADDR_VAR 0 4
48497: PUSH
48498: DOUBLE
48499: LD_VAR 0 1
48503: INC
48504: ST_TO_ADDR
48505: LD_VAR 0 2
48509: PUSH
48510: FOR_DOWNTO
48511: IFFALSE 48535
// result := Delete ( result , result ) ;
48513: LD_ADDR_VAR 0 3
48517: PUSH
48518: LD_VAR 0 3
48522: PPUSH
48523: LD_VAR 0 3
48527: PPUSH
48528: CALL_OW 3
48532: ST_TO_ADDR
48533: GO 48510
48535: POP
48536: POP
// end ;
48537: LD_VAR 0 3
48541: RET
// export function ComExit ( unit ) ; var tmp ; begin
48542: LD_INT 0
48544: PPUSH
48545: PPUSH
// if not IsInUnit ( unit ) then
48546: LD_VAR 0 1
48550: PPUSH
48551: CALL_OW 310
48555: NOT
48556: IFFALSE 48560
// exit ;
48558: GO 48620
// tmp := IsInUnit ( unit ) ;
48560: LD_ADDR_VAR 0 3
48564: PUSH
48565: LD_VAR 0 1
48569: PPUSH
48570: CALL_OW 310
48574: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
48575: LD_VAR 0 3
48579: PPUSH
48580: CALL_OW 247
48584: PUSH
48585: LD_INT 2
48587: EQUAL
48588: IFFALSE 48601
// ComExitVehicle ( unit ) else
48590: LD_VAR 0 1
48594: PPUSH
48595: CALL_OW 121
48599: GO 48610
// ComExitBuilding ( unit ) ;
48601: LD_VAR 0 1
48605: PPUSH
48606: CALL_OW 122
// result := tmp ;
48610: LD_ADDR_VAR 0 2
48614: PUSH
48615: LD_VAR 0 3
48619: ST_TO_ADDR
// end ;
48620: LD_VAR 0 2
48624: RET
// export function ComExitAll ( units ) ; var i ; begin
48625: LD_INT 0
48627: PPUSH
48628: PPUSH
// if not units then
48629: LD_VAR 0 1
48633: NOT
48634: IFFALSE 48638
// exit ;
48636: GO 48664
// for i in units do
48638: LD_ADDR_VAR 0 3
48642: PUSH
48643: LD_VAR 0 1
48647: PUSH
48648: FOR_IN
48649: IFFALSE 48662
// ComExit ( i ) ;
48651: LD_VAR 0 3
48655: PPUSH
48656: CALL 48542 0 1
48660: GO 48648
48662: POP
48663: POP
// end ;
48664: LD_VAR 0 2
48668: RET
// export function ResetHc ; begin
48669: LD_INT 0
48671: PPUSH
// InitHc ;
48672: CALL_OW 19
// hc_importance := 0 ;
48676: LD_ADDR_OWVAR 32
48680: PUSH
48681: LD_INT 0
48683: ST_TO_ADDR
// end ;
48684: LD_VAR 0 1
48688: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
48689: LD_INT 0
48691: PPUSH
48692: PPUSH
48693: PPUSH
// _x := ( x1 + x2 ) div 2 ;
48694: LD_ADDR_VAR 0 6
48698: PUSH
48699: LD_VAR 0 1
48703: PUSH
48704: LD_VAR 0 3
48708: PLUS
48709: PUSH
48710: LD_INT 2
48712: DIV
48713: ST_TO_ADDR
// if _x < 0 then
48714: LD_VAR 0 6
48718: PUSH
48719: LD_INT 0
48721: LESS
48722: IFFALSE 48739
// _x := _x * - 1 ;
48724: LD_ADDR_VAR 0 6
48728: PUSH
48729: LD_VAR 0 6
48733: PUSH
48734: LD_INT 1
48736: NEG
48737: MUL
48738: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
48739: LD_ADDR_VAR 0 7
48743: PUSH
48744: LD_VAR 0 2
48748: PUSH
48749: LD_VAR 0 4
48753: PLUS
48754: PUSH
48755: LD_INT 2
48757: DIV
48758: ST_TO_ADDR
// if _y < 0 then
48759: LD_VAR 0 7
48763: PUSH
48764: LD_INT 0
48766: LESS
48767: IFFALSE 48784
// _y := _y * - 1 ;
48769: LD_ADDR_VAR 0 7
48773: PUSH
48774: LD_VAR 0 7
48778: PUSH
48779: LD_INT 1
48781: NEG
48782: MUL
48783: ST_TO_ADDR
// result := [ _x , _y ] ;
48784: LD_ADDR_VAR 0 5
48788: PUSH
48789: LD_VAR 0 6
48793: PUSH
48794: LD_VAR 0 7
48798: PUSH
48799: EMPTY
48800: LIST
48801: LIST
48802: ST_TO_ADDR
// end ;
48803: LD_VAR 0 5
48807: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
48808: LD_INT 0
48810: PPUSH
48811: PPUSH
48812: PPUSH
48813: PPUSH
// task := GetTaskList ( unit ) ;
48814: LD_ADDR_VAR 0 7
48818: PUSH
48819: LD_VAR 0 1
48823: PPUSH
48824: CALL_OW 437
48828: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
48829: LD_VAR 0 7
48833: NOT
48834: IFFALSE 48853
48836: PUSH
48837: LD_VAR 0 1
48841: PPUSH
48842: LD_VAR 0 2
48846: PPUSH
48847: CALL_OW 308
48851: NOT
48852: AND
48853: IFFALSE 48857
// exit ;
48855: GO 48975
// if IsInArea ( unit , area ) then
48857: LD_VAR 0 1
48861: PPUSH
48862: LD_VAR 0 2
48866: PPUSH
48867: CALL_OW 308
48871: IFFALSE 48889
// begin ComMoveToArea ( unit , goAway ) ;
48873: LD_VAR 0 1
48877: PPUSH
48878: LD_VAR 0 3
48882: PPUSH
48883: CALL_OW 113
// exit ;
48887: GO 48975
// end ; if task [ 1 ] [ 1 ] <> M then
48889: LD_VAR 0 7
48893: PUSH
48894: LD_INT 1
48896: ARRAY
48897: PUSH
48898: LD_INT 1
48900: ARRAY
48901: PUSH
48902: LD_STRING M
48904: NONEQUAL
48905: IFFALSE 48909
// exit ;
48907: GO 48975
// x := task [ 1 ] [ 2 ] ;
48909: LD_ADDR_VAR 0 5
48913: PUSH
48914: LD_VAR 0 7
48918: PUSH
48919: LD_INT 1
48921: ARRAY
48922: PUSH
48923: LD_INT 2
48925: ARRAY
48926: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
48927: LD_ADDR_VAR 0 6
48931: PUSH
48932: LD_VAR 0 7
48936: PUSH
48937: LD_INT 1
48939: ARRAY
48940: PUSH
48941: LD_INT 3
48943: ARRAY
48944: ST_TO_ADDR
// if InArea ( x , y , area ) then
48945: LD_VAR 0 5
48949: PPUSH
48950: LD_VAR 0 6
48954: PPUSH
48955: LD_VAR 0 2
48959: PPUSH
48960: CALL_OW 309
48964: IFFALSE 48975
// ComStop ( unit ) ;
48966: LD_VAR 0 1
48970: PPUSH
48971: CALL_OW 141
// end ;
48975: LD_VAR 0 4
48979: RET
// export function Abs ( value ) ; begin
48980: LD_INT 0
48982: PPUSH
// result := value ;
48983: LD_ADDR_VAR 0 2
48987: PUSH
48988: LD_VAR 0 1
48992: ST_TO_ADDR
// if value < 0 then
48993: LD_VAR 0 1
48997: PUSH
48998: LD_INT 0
49000: LESS
49001: IFFALSE 49018
// result := value * - 1 ;
49003: LD_ADDR_VAR 0 2
49007: PUSH
49008: LD_VAR 0 1
49012: PUSH
49013: LD_INT 1
49015: NEG
49016: MUL
49017: ST_TO_ADDR
// end ;
49018: LD_VAR 0 2
49022: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
49023: LD_INT 0
49025: PPUSH
49026: PPUSH
49027: PPUSH
49028: PPUSH
49029: PPUSH
49030: PPUSH
49031: PPUSH
49032: PPUSH
// if not unit or not building then
49033: LD_VAR 0 1
49037: NOT
49038: IFTRUE 49047
49040: PUSH
49041: LD_VAR 0 2
49045: NOT
49046: OR
49047: IFFALSE 49051
// exit ;
49049: GO 49279
// x := GetX ( building ) ;
49051: LD_ADDR_VAR 0 4
49055: PUSH
49056: LD_VAR 0 2
49060: PPUSH
49061: CALL_OW 250
49065: ST_TO_ADDR
// y := GetY ( building ) ;
49066: LD_ADDR_VAR 0 6
49070: PUSH
49071: LD_VAR 0 2
49075: PPUSH
49076: CALL_OW 251
49080: ST_TO_ADDR
// d := GetDir ( building ) ;
49081: LD_ADDR_VAR 0 8
49085: PUSH
49086: LD_VAR 0 2
49090: PPUSH
49091: CALL_OW 254
49095: ST_TO_ADDR
// r := 4 ;
49096: LD_ADDR_VAR 0 9
49100: PUSH
49101: LD_INT 4
49103: ST_TO_ADDR
// for i := 1 to 5 do
49104: LD_ADDR_VAR 0 10
49108: PUSH
49109: DOUBLE
49110: LD_INT 1
49112: DEC
49113: ST_TO_ADDR
49114: LD_INT 5
49116: PUSH
49117: FOR_TO
49118: IFFALSE 49277
// begin _x := ShiftX ( x , d , r + i ) ;
49120: LD_ADDR_VAR 0 5
49124: PUSH
49125: LD_VAR 0 4
49129: PPUSH
49130: LD_VAR 0 8
49134: PPUSH
49135: LD_VAR 0 9
49139: PUSH
49140: LD_VAR 0 10
49144: PLUS
49145: PPUSH
49146: CALL_OW 272
49150: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
49151: LD_ADDR_VAR 0 7
49155: PUSH
49156: LD_VAR 0 6
49160: PPUSH
49161: LD_VAR 0 8
49165: PPUSH
49166: LD_VAR 0 9
49170: PUSH
49171: LD_VAR 0 10
49175: PLUS
49176: PPUSH
49177: CALL_OW 273
49181: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
49182: LD_VAR 0 5
49186: PPUSH
49187: LD_VAR 0 7
49191: PPUSH
49192: CALL_OW 488
49196: IFFALSE 49231
49198: PUSH
49199: LD_VAR 0 5
49203: PPUSH
49204: LD_VAR 0 7
49208: PPUSH
49209: CALL_OW 428
49213: PPUSH
49214: CALL_OW 247
49218: PUSH
49219: LD_INT 3
49221: PUSH
49222: LD_INT 2
49224: PUSH
49225: EMPTY
49226: LIST
49227: LIST
49228: IN
49229: NOT
49230: AND
49231: IFFALSE 49275
// begin ComMoveXY ( unit , _x , _y ) ;
49233: LD_VAR 0 1
49237: PPUSH
49238: LD_VAR 0 5
49242: PPUSH
49243: LD_VAR 0 7
49247: PPUSH
49248: CALL_OW 111
// result := [ _x , _y ] ;
49252: LD_ADDR_VAR 0 3
49256: PUSH
49257: LD_VAR 0 5
49261: PUSH
49262: LD_VAR 0 7
49266: PUSH
49267: EMPTY
49268: LIST
49269: LIST
49270: ST_TO_ADDR
// exit ;
49271: POP
49272: POP
49273: GO 49279
// end ; end ;
49275: GO 49117
49277: POP
49278: POP
// end ;
49279: LD_VAR 0 3
49283: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
49284: LD_INT 0
49286: PPUSH
49287: PPUSH
49288: PPUSH
// result := 0 ;
49289: LD_ADDR_VAR 0 3
49293: PUSH
49294: LD_INT 0
49296: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
49297: LD_VAR 0 1
49301: PUSH
49302: LD_INT 0
49304: LESS
49305: IFTRUE 49317
49307: PUSH
49308: LD_VAR 0 1
49312: PUSH
49313: LD_INT 8
49315: GREATER
49316: OR
49317: IFTRUE 49329
49319: PUSH
49320: LD_VAR 0 2
49324: PUSH
49325: LD_INT 0
49327: LESS
49328: OR
49329: IFTRUE 49341
49331: PUSH
49332: LD_VAR 0 2
49336: PUSH
49337: LD_INT 8
49339: GREATER
49340: OR
49341: IFFALSE 49345
// exit ;
49343: GO 49420
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
49345: LD_ADDR_VAR 0 4
49349: PUSH
49350: LD_INT 22
49352: PUSH
49353: LD_VAR 0 2
49357: PUSH
49358: EMPTY
49359: LIST
49360: LIST
49361: PPUSH
49362: CALL_OW 69
49366: PUSH
49367: FOR_IN
49368: IFFALSE 49418
// begin un := UnitShoot ( i ) ;
49370: LD_ADDR_VAR 0 5
49374: PUSH
49375: LD_VAR 0 4
49379: PPUSH
49380: CALL_OW 504
49384: ST_TO_ADDR
// if GetSide ( un ) = side1 then
49385: LD_VAR 0 5
49389: PPUSH
49390: CALL_OW 255
49394: PUSH
49395: LD_VAR 0 1
49399: EQUAL
49400: IFFALSE 49416
// begin result := un ;
49402: LD_ADDR_VAR 0 3
49406: PUSH
49407: LD_VAR 0 5
49411: ST_TO_ADDR
// exit ;
49412: POP
49413: POP
49414: GO 49420
// end ; end ;
49416: GO 49367
49418: POP
49419: POP
// end ;
49420: LD_VAR 0 3
49424: RET
// export function GetCargoBay ( units ) ; begin
49425: LD_INT 0
49427: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
49428: LD_ADDR_VAR 0 2
49432: PUSH
49433: LD_VAR 0 1
49437: PPUSH
49438: LD_INT 2
49440: PUSH
49441: LD_INT 34
49443: PUSH
49444: LD_INT 12
49446: PUSH
49447: EMPTY
49448: LIST
49449: LIST
49450: PUSH
49451: LD_INT 34
49453: PUSH
49454: LD_INT 51
49456: PUSH
49457: EMPTY
49458: LIST
49459: LIST
49460: PUSH
49461: LD_INT 34
49463: PUSH
49464: LD_INT 32
49466: PUSH
49467: EMPTY
49468: LIST
49469: LIST
49470: PUSH
49471: LD_INT 34
49473: PUSH
49474: LD_INT 89
49476: PUSH
49477: EMPTY
49478: LIST
49479: LIST
49480: PUSH
49481: EMPTY
49482: LIST
49483: LIST
49484: LIST
49485: LIST
49486: LIST
49487: PPUSH
49488: CALL_OW 72
49492: ST_TO_ADDR
// end ;
49493: LD_VAR 0 2
49497: RET
// export function Negate ( value ) ; begin
49498: LD_INT 0
49500: PPUSH
// result := not value ;
49501: LD_ADDR_VAR 0 2
49505: PUSH
49506: LD_VAR 0 1
49510: NOT
49511: ST_TO_ADDR
// end ;
49512: LD_VAR 0 2
49516: RET
// export function Inc ( value ) ; begin
49517: LD_INT 0
49519: PPUSH
// result := value + 1 ;
49520: LD_ADDR_VAR 0 2
49524: PUSH
49525: LD_VAR 0 1
49529: PUSH
49530: LD_INT 1
49532: PLUS
49533: ST_TO_ADDR
// end ;
49534: LD_VAR 0 2
49538: RET
// export function Dec ( value ) ; begin
49539: LD_INT 0
49541: PPUSH
// result := value - 1 ;
49542: LD_ADDR_VAR 0 2
49546: PUSH
49547: LD_VAR 0 1
49551: PUSH
49552: LD_INT 1
49554: MINUS
49555: ST_TO_ADDR
// end ;
49556: LD_VAR 0 2
49560: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
49561: LD_INT 0
49563: PPUSH
49564: PPUSH
49565: PPUSH
49566: PPUSH
49567: PPUSH
49568: PPUSH
49569: PPUSH
49570: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
49571: LD_VAR 0 1
49575: PPUSH
49576: LD_VAR 0 2
49580: PPUSH
49581: CALL_OW 488
49585: NOT
49586: IFTRUE 49605
49588: PUSH
49589: LD_VAR 0 3
49593: PPUSH
49594: LD_VAR 0 4
49598: PPUSH
49599: CALL_OW 488
49603: NOT
49604: OR
49605: IFFALSE 49618
// begin result := - 1 ;
49607: LD_ADDR_VAR 0 5
49611: PUSH
49612: LD_INT 1
49614: NEG
49615: ST_TO_ADDR
// exit ;
49616: GO 49853
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
49618: LD_ADDR_VAR 0 12
49622: PUSH
49623: LD_VAR 0 1
49627: PPUSH
49628: LD_VAR 0 2
49632: PPUSH
49633: LD_VAR 0 3
49637: PPUSH
49638: LD_VAR 0 4
49642: PPUSH
49643: CALL 48689 0 4
49647: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
49648: LD_ADDR_VAR 0 11
49652: PUSH
49653: LD_VAR 0 1
49657: PPUSH
49658: LD_VAR 0 2
49662: PPUSH
49663: LD_VAR 0 12
49667: PUSH
49668: LD_INT 1
49670: ARRAY
49671: PPUSH
49672: LD_VAR 0 12
49676: PUSH
49677: LD_INT 2
49679: ARRAY
49680: PPUSH
49681: CALL_OW 298
49685: ST_TO_ADDR
// distance := 9999 ;
49686: LD_ADDR_VAR 0 10
49690: PUSH
49691: LD_INT 9999
49693: ST_TO_ADDR
// for i := 0 to 5 do
49694: LD_ADDR_VAR 0 6
49698: PUSH
49699: DOUBLE
49700: LD_INT 0
49702: DEC
49703: ST_TO_ADDR
49704: LD_INT 5
49706: PUSH
49707: FOR_TO
49708: IFFALSE 49851
// begin _x := ShiftX ( x1 , i , centerDist ) ;
49710: LD_ADDR_VAR 0 7
49714: PUSH
49715: LD_VAR 0 1
49719: PPUSH
49720: LD_VAR 0 6
49724: PPUSH
49725: LD_VAR 0 11
49729: PPUSH
49730: CALL_OW 272
49734: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
49735: LD_ADDR_VAR 0 8
49739: PUSH
49740: LD_VAR 0 2
49744: PPUSH
49745: LD_VAR 0 6
49749: PPUSH
49750: LD_VAR 0 11
49754: PPUSH
49755: CALL_OW 273
49759: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
49760: LD_VAR 0 7
49764: PPUSH
49765: LD_VAR 0 8
49769: PPUSH
49770: CALL_OW 488
49774: NOT
49775: IFFALSE 49779
// continue ;
49777: GO 49707
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
49779: LD_ADDR_VAR 0 9
49783: PUSH
49784: LD_VAR 0 12
49788: PUSH
49789: LD_INT 1
49791: ARRAY
49792: PPUSH
49793: LD_VAR 0 12
49797: PUSH
49798: LD_INT 2
49800: ARRAY
49801: PPUSH
49802: LD_VAR 0 7
49806: PPUSH
49807: LD_VAR 0 8
49811: PPUSH
49812: CALL_OW 298
49816: ST_TO_ADDR
// if tmp < distance then
49817: LD_VAR 0 9
49821: PUSH
49822: LD_VAR 0 10
49826: LESS
49827: IFFALSE 49849
// begin result := i ;
49829: LD_ADDR_VAR 0 5
49833: PUSH
49834: LD_VAR 0 6
49838: ST_TO_ADDR
// distance := tmp ;
49839: LD_ADDR_VAR 0 10
49843: PUSH
49844: LD_VAR 0 9
49848: ST_TO_ADDR
// end ; end ;
49849: GO 49707
49851: POP
49852: POP
// end ;
49853: LD_VAR 0 5
49857: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
49858: LD_INT 0
49860: PPUSH
49861: PPUSH
// if not driver or not IsInUnit ( driver ) then
49862: LD_VAR 0 1
49866: NOT
49867: IFTRUE 49881
49869: PUSH
49870: LD_VAR 0 1
49874: PPUSH
49875: CALL_OW 310
49879: NOT
49880: OR
49881: IFFALSE 49885
// exit ;
49883: GO 49975
// vehicle := IsInUnit ( driver ) ;
49885: LD_ADDR_VAR 0 3
49889: PUSH
49890: LD_VAR 0 1
49894: PPUSH
49895: CALL_OW 310
49899: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
49900: LD_VAR 0 1
49904: PPUSH
49905: LD_STRING \
49907: PUSH
49908: LD_INT 0
49910: PUSH
49911: LD_INT 0
49913: PUSH
49914: LD_INT 0
49916: PUSH
49917: LD_INT 0
49919: PUSH
49920: LD_INT 0
49922: PUSH
49923: LD_INT 0
49925: PUSH
49926: EMPTY
49927: LIST
49928: LIST
49929: LIST
49930: LIST
49931: LIST
49932: LIST
49933: LIST
49934: PUSH
49935: LD_STRING E
49937: PUSH
49938: LD_INT 0
49940: PUSH
49941: LD_INT 0
49943: PUSH
49944: LD_VAR 0 3
49948: PUSH
49949: LD_INT 0
49951: PUSH
49952: LD_INT 0
49954: PUSH
49955: LD_INT 0
49957: PUSH
49958: EMPTY
49959: LIST
49960: LIST
49961: LIST
49962: LIST
49963: LIST
49964: LIST
49965: LIST
49966: PUSH
49967: EMPTY
49968: LIST
49969: LIST
49970: PPUSH
49971: CALL_OW 446
// end ;
49975: LD_VAR 0 2
49979: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
49980: LD_INT 0
49982: PPUSH
49983: PPUSH
// if not driver or not IsInUnit ( driver ) then
49984: LD_VAR 0 1
49988: NOT
49989: IFTRUE 50003
49991: PUSH
49992: LD_VAR 0 1
49996: PPUSH
49997: CALL_OW 310
50001: NOT
50002: OR
50003: IFFALSE 50007
// exit ;
50005: GO 50097
// vehicle := IsInUnit ( driver ) ;
50007: LD_ADDR_VAR 0 3
50011: PUSH
50012: LD_VAR 0 1
50016: PPUSH
50017: CALL_OW 310
50021: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
50022: LD_VAR 0 1
50026: PPUSH
50027: LD_STRING \
50029: PUSH
50030: LD_INT 0
50032: PUSH
50033: LD_INT 0
50035: PUSH
50036: LD_INT 0
50038: PUSH
50039: LD_INT 0
50041: PUSH
50042: LD_INT 0
50044: PUSH
50045: LD_INT 0
50047: PUSH
50048: EMPTY
50049: LIST
50050: LIST
50051: LIST
50052: LIST
50053: LIST
50054: LIST
50055: LIST
50056: PUSH
50057: LD_STRING E
50059: PUSH
50060: LD_INT 0
50062: PUSH
50063: LD_INT 0
50065: PUSH
50066: LD_VAR 0 3
50070: PUSH
50071: LD_INT 0
50073: PUSH
50074: LD_INT 0
50076: PUSH
50077: LD_INT 0
50079: PUSH
50080: EMPTY
50081: LIST
50082: LIST
50083: LIST
50084: LIST
50085: LIST
50086: LIST
50087: LIST
50088: PUSH
50089: EMPTY
50090: LIST
50091: LIST
50092: PPUSH
50093: CALL_OW 447
// end ;
50097: LD_VAR 0 2
50101: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
50102: LD_INT 0
50104: PPUSH
50105: PPUSH
50106: PPUSH
// tmp := [ ] ;
50107: LD_ADDR_VAR 0 5
50111: PUSH
50112: EMPTY
50113: ST_TO_ADDR
// for i in units do
50114: LD_ADDR_VAR 0 4
50118: PUSH
50119: LD_VAR 0 1
50123: PUSH
50124: FOR_IN
50125: IFFALSE 50163
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
50127: LD_ADDR_VAR 0 5
50131: PUSH
50132: LD_VAR 0 5
50136: PPUSH
50137: LD_VAR 0 5
50141: PUSH
50142: LD_INT 1
50144: PLUS
50145: PPUSH
50146: LD_VAR 0 4
50150: PPUSH
50151: CALL_OW 256
50155: PPUSH
50156: CALL_OW 2
50160: ST_TO_ADDR
50161: GO 50124
50163: POP
50164: POP
// if not tmp then
50165: LD_VAR 0 5
50169: NOT
50170: IFFALSE 50174
// exit ;
50172: GO 50222
// if asc then
50174: LD_VAR 0 2
50178: IFFALSE 50202
// result := SortListByListAsc ( units , tmp ) else
50180: LD_ADDR_VAR 0 3
50184: PUSH
50185: LD_VAR 0 1
50189: PPUSH
50190: LD_VAR 0 5
50194: PPUSH
50195: CALL_OW 76
50199: ST_TO_ADDR
50200: GO 50222
// result := SortListByListDesc ( units , tmp ) ;
50202: LD_ADDR_VAR 0 3
50206: PUSH
50207: LD_VAR 0 1
50211: PPUSH
50212: LD_VAR 0 5
50216: PPUSH
50217: CALL_OW 77
50221: ST_TO_ADDR
// end ;
50222: LD_VAR 0 3
50226: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
50227: LD_INT 0
50229: PPUSH
50230: PPUSH
// task := GetTaskList ( mech ) ;
50231: LD_ADDR_VAR 0 4
50235: PUSH
50236: LD_VAR 0 1
50240: PPUSH
50241: CALL_OW 437
50245: ST_TO_ADDR
// if not task then
50246: LD_VAR 0 4
50250: NOT
50251: IFFALSE 50255
// exit ;
50253: GO 50299
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
50255: LD_ADDR_VAR 0 3
50259: PUSH
50260: LD_VAR 0 4
50264: PUSH
50265: LD_INT 1
50267: ARRAY
50268: PUSH
50269: LD_INT 1
50271: ARRAY
50272: PUSH
50273: LD_STRING r
50275: EQUAL
50276: IFFALSE 50298
50278: PUSH
50279: LD_VAR 0 4
50283: PUSH
50284: LD_INT 1
50286: ARRAY
50287: PUSH
50288: LD_INT 4
50290: ARRAY
50291: PUSH
50292: LD_VAR 0 2
50296: EQUAL
50297: AND
50298: ST_TO_ADDR
// end ;
50299: LD_VAR 0 3
50303: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
50304: LD_INT 0
50306: PPUSH
// SetDir ( unit , d ) ;
50307: LD_VAR 0 1
50311: PPUSH
50312: LD_VAR 0 4
50316: PPUSH
50317: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
50321: LD_ADDR_VAR 0 6
50325: PUSH
50326: LD_VAR 0 1
50330: PPUSH
50331: LD_VAR 0 2
50335: PPUSH
50336: LD_VAR 0 3
50340: PPUSH
50341: LD_VAR 0 5
50345: PPUSH
50346: CALL_OW 48
50350: ST_TO_ADDR
// end ;
50351: LD_VAR 0 6
50355: RET
// export function ToNaturalNumber ( number ) ; begin
50356: LD_INT 0
50358: PPUSH
// result := number div 1 ;
50359: LD_ADDR_VAR 0 2
50363: PUSH
50364: LD_VAR 0 1
50368: PUSH
50369: LD_INT 1
50371: DIV
50372: ST_TO_ADDR
// if number < 0 then
50373: LD_VAR 0 1
50377: PUSH
50378: LD_INT 0
50380: LESS
50381: IFFALSE 50391
// result := 0 ;
50383: LD_ADDR_VAR 0 2
50387: PUSH
50388: LD_INT 0
50390: ST_TO_ADDR
// end ;
50391: LD_VAR 0 2
50395: RET
// export function SortByBType ( buildings , asc ) ; var b , tmp ; begin
50396: LD_INT 0
50398: PPUSH
50399: PPUSH
50400: PPUSH
// if not buildings then
50401: LD_VAR 0 1
50405: NOT
50406: IFFALSE 50410
// exit ;
50408: GO 50525
// tmp := [ ] ;
50410: LD_ADDR_VAR 0 5
50414: PUSH
50415: EMPTY
50416: ST_TO_ADDR
// for b in buildings do
50417: LD_ADDR_VAR 0 4
50421: PUSH
50422: LD_VAR 0 1
50426: PUSH
50427: FOR_IN
50428: IFFALSE 50466
// tmp := Replace ( tmp , tmp + 1 , GetBType ( b ) ) ;
50430: LD_ADDR_VAR 0 5
50434: PUSH
50435: LD_VAR 0 5
50439: PPUSH
50440: LD_VAR 0 5
50444: PUSH
50445: LD_INT 1
50447: PLUS
50448: PPUSH
50449: LD_VAR 0 4
50453: PPUSH
50454: CALL_OW 266
50458: PPUSH
50459: CALL_OW 1
50463: ST_TO_ADDR
50464: GO 50427
50466: POP
50467: POP
// if not tmp then
50468: LD_VAR 0 5
50472: NOT
50473: IFFALSE 50477
// exit ;
50475: GO 50525
// if asc then
50477: LD_VAR 0 2
50481: IFFALSE 50505
// result := SortListByListAsc ( buildings , tmp ) else
50483: LD_ADDR_VAR 0 3
50487: PUSH
50488: LD_VAR 0 1
50492: PPUSH
50493: LD_VAR 0 5
50497: PPUSH
50498: CALL_OW 76
50502: ST_TO_ADDR
50503: GO 50525
// result := SortListByListDesc ( buildings , tmp ) ;
50505: LD_ADDR_VAR 0 3
50509: PUSH
50510: LD_VAR 0 1
50514: PPUSH
50515: LD_VAR 0 5
50519: PPUSH
50520: CALL_OW 77
50524: ST_TO_ADDR
// end ;
50525: LD_VAR 0 3
50529: RET
// export function SortByClass ( units , class ) ; var un ; begin
50530: LD_INT 0
50532: PPUSH
50533: PPUSH
// if not units or not class then
50534: LD_VAR 0 1
50538: NOT
50539: IFTRUE 50548
50541: PUSH
50542: LD_VAR 0 2
50546: NOT
50547: OR
50548: IFFALSE 50552
// exit ;
50550: GO 50647
// result := [ ] ;
50552: LD_ADDR_VAR 0 3
50556: PUSH
50557: EMPTY
50558: ST_TO_ADDR
// for un in units do
50559: LD_ADDR_VAR 0 4
50563: PUSH
50564: LD_VAR 0 1
50568: PUSH
50569: FOR_IN
50570: IFFALSE 50645
// if GetClass ( un ) = class then
50572: LD_VAR 0 4
50576: PPUSH
50577: CALL_OW 257
50581: PUSH
50582: LD_VAR 0 2
50586: EQUAL
50587: IFFALSE 50614
// result := Insert ( result , 1 , un ) else
50589: LD_ADDR_VAR 0 3
50593: PUSH
50594: LD_VAR 0 3
50598: PPUSH
50599: LD_INT 1
50601: PPUSH
50602: LD_VAR 0 4
50606: PPUSH
50607: CALL_OW 2
50611: ST_TO_ADDR
50612: GO 50643
// result := Replace ( result , result + 1 , un ) ;
50614: LD_ADDR_VAR 0 3
50618: PUSH
50619: LD_VAR 0 3
50623: PPUSH
50624: LD_VAR 0 3
50628: PUSH
50629: LD_INT 1
50631: PLUS
50632: PPUSH
50633: LD_VAR 0 4
50637: PPUSH
50638: CALL_OW 1
50642: ST_TO_ADDR
50643: GO 50569
50645: POP
50646: POP
// end ;
50647: LD_VAR 0 3
50651: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
50652: LD_INT 0
50654: PPUSH
50655: PPUSH
50656: PPUSH
50657: PPUSH
50658: PPUSH
50659: PPUSH
50660: PPUSH
// result := [ ] ;
50661: LD_ADDR_VAR 0 4
50665: PUSH
50666: EMPTY
50667: ST_TO_ADDR
// if x - r < 0 then
50668: LD_VAR 0 1
50672: PUSH
50673: LD_VAR 0 3
50677: MINUS
50678: PUSH
50679: LD_INT 0
50681: LESS
50682: IFFALSE 50694
// min_x := 0 else
50684: LD_ADDR_VAR 0 8
50688: PUSH
50689: LD_INT 0
50691: ST_TO_ADDR
50692: GO 50710
// min_x := x - r ;
50694: LD_ADDR_VAR 0 8
50698: PUSH
50699: LD_VAR 0 1
50703: PUSH
50704: LD_VAR 0 3
50708: MINUS
50709: ST_TO_ADDR
// if y - r < 0 then
50710: LD_VAR 0 2
50714: PUSH
50715: LD_VAR 0 3
50719: MINUS
50720: PUSH
50721: LD_INT 0
50723: LESS
50724: IFFALSE 50736
// min_y := 0 else
50726: LD_ADDR_VAR 0 7
50730: PUSH
50731: LD_INT 0
50733: ST_TO_ADDR
50734: GO 50752
// min_y := y - r ;
50736: LD_ADDR_VAR 0 7
50740: PUSH
50741: LD_VAR 0 2
50745: PUSH
50746: LD_VAR 0 3
50750: MINUS
50751: ST_TO_ADDR
// max_x := x + r ;
50752: LD_ADDR_VAR 0 9
50756: PUSH
50757: LD_VAR 0 1
50761: PUSH
50762: LD_VAR 0 3
50766: PLUS
50767: ST_TO_ADDR
// max_y := y + r ;
50768: LD_ADDR_VAR 0 10
50772: PUSH
50773: LD_VAR 0 2
50777: PUSH
50778: LD_VAR 0 3
50782: PLUS
50783: ST_TO_ADDR
// for _x = min_x to max_x do
50784: LD_ADDR_VAR 0 5
50788: PUSH
50789: DOUBLE
50790: LD_VAR 0 8
50794: DEC
50795: ST_TO_ADDR
50796: LD_VAR 0 9
50800: PUSH
50801: FOR_TO
50802: IFFALSE 50903
// for _y = min_y to max_y do
50804: LD_ADDR_VAR 0 6
50808: PUSH
50809: DOUBLE
50810: LD_VAR 0 7
50814: DEC
50815: ST_TO_ADDR
50816: LD_VAR 0 10
50820: PUSH
50821: FOR_TO
50822: IFFALSE 50899
// begin if not ValidHex ( _x , _y ) then
50824: LD_VAR 0 5
50828: PPUSH
50829: LD_VAR 0 6
50833: PPUSH
50834: CALL_OW 488
50838: NOT
50839: IFFALSE 50843
// continue ;
50841: GO 50821
// if GetResourceTypeXY ( _x , _y ) then
50843: LD_VAR 0 5
50847: PPUSH
50848: LD_VAR 0 6
50852: PPUSH
50853: CALL_OW 283
50857: IFFALSE 50897
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
50859: LD_ADDR_VAR 0 4
50863: PUSH
50864: LD_VAR 0 4
50868: PPUSH
50869: LD_VAR 0 4
50873: PUSH
50874: LD_INT 1
50876: PLUS
50877: PPUSH
50878: LD_VAR 0 5
50882: PUSH
50883: LD_VAR 0 6
50887: PUSH
50888: EMPTY
50889: LIST
50890: LIST
50891: PPUSH
50892: CALL_OW 1
50896: ST_TO_ADDR
// end ;
50897: GO 50821
50899: POP
50900: POP
50901: GO 50801
50903: POP
50904: POP
// end ;
50905: LD_VAR 0 4
50909: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
50910: LD_INT 0
50912: PPUSH
50913: PPUSH
50914: PPUSH
50915: PPUSH
50916: PPUSH
50917: PPUSH
50918: PPUSH
50919: PPUSH
// if not units then
50920: LD_VAR 0 1
50924: NOT
50925: IFFALSE 50929
// exit ;
50927: GO 51461
// result := UnitFilter ( units , [ f_ok ] ) ;
50929: LD_ADDR_VAR 0 3
50933: PUSH
50934: LD_VAR 0 1
50938: PPUSH
50939: LD_INT 50
50941: PUSH
50942: EMPTY
50943: LIST
50944: PPUSH
50945: CALL_OW 72
50949: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
50950: LD_ADDR_VAR 0 8
50954: PUSH
50955: LD_VAR 0 1
50959: PUSH
50960: LD_INT 1
50962: ARRAY
50963: PPUSH
50964: CALL_OW 255
50968: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
50969: LD_ADDR_VAR 0 10
50973: PUSH
50974: LD_INT 29
50976: PUSH
50977: LD_INT 91
50979: PUSH
50980: LD_INT 49
50982: PUSH
50983: EMPTY
50984: LIST
50985: LIST
50986: LIST
50987: ST_TO_ADDR
// if not result then
50988: LD_VAR 0 3
50992: NOT
50993: IFFALSE 50997
// exit ;
50995: GO 51461
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
50997: LD_ADDR_VAR 0 5
51001: PUSH
51002: LD_INT 81
51004: PUSH
51005: LD_VAR 0 8
51009: PUSH
51010: EMPTY
51011: LIST
51012: LIST
51013: PPUSH
51014: CALL_OW 69
51018: ST_TO_ADDR
// for i in result do
51019: LD_ADDR_VAR 0 4
51023: PUSH
51024: LD_VAR 0 3
51028: PUSH
51029: FOR_IN
51030: IFFALSE 51459
// begin tag := GetTag ( i ) + 1 ;
51032: LD_ADDR_VAR 0 9
51036: PUSH
51037: LD_VAR 0 4
51041: PPUSH
51042: CALL_OW 110
51046: PUSH
51047: LD_INT 1
51049: PLUS
51050: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
51051: LD_ADDR_VAR 0 7
51055: PUSH
51056: LD_VAR 0 4
51060: PPUSH
51061: CALL_OW 250
51065: PPUSH
51066: LD_VAR 0 4
51070: PPUSH
51071: CALL_OW 251
51075: PPUSH
51076: LD_INT 4
51078: PPUSH
51079: CALL 50652 0 3
51083: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
51084: LD_VAR 0 4
51088: PPUSH
51089: CALL_OW 247
51093: PUSH
51094: LD_INT 2
51096: EQUAL
51097: IFFALSE 51109
51099: PUSH
51100: LD_VAR 0 7
51104: PUSH
51105: LD_INT 2
51107: GREATER
51108: AND
51109: IFFALSE 51129
51111: PUSH
51112: LD_VAR 0 4
51116: PPUSH
51117: CALL_OW 264
51121: PUSH
51122: LD_VAR 0 10
51126: IN
51127: NOT
51128: AND
51129: IFFALSE 51168
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
51131: LD_VAR 0 4
51135: PPUSH
51136: LD_VAR 0 7
51140: PUSH
51141: LD_INT 1
51143: ARRAY
51144: PUSH
51145: LD_INT 1
51147: ARRAY
51148: PPUSH
51149: LD_VAR 0 7
51153: PUSH
51154: LD_INT 1
51156: ARRAY
51157: PUSH
51158: LD_INT 2
51160: ARRAY
51161: PPUSH
51162: CALL_OW 116
51166: GO 51457
// if path > tag then
51168: LD_VAR 0 2
51172: PUSH
51173: LD_VAR 0 9
51177: GREATER
51178: IFFALSE 51386
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
51180: LD_ADDR_VAR 0 6
51184: PUSH
51185: LD_VAR 0 5
51189: PPUSH
51190: LD_INT 91
51192: PUSH
51193: LD_VAR 0 4
51197: PUSH
51198: LD_INT 8
51200: PUSH
51201: EMPTY
51202: LIST
51203: LIST
51204: LIST
51205: PPUSH
51206: CALL_OW 72
51210: ST_TO_ADDR
// if nearEnemy then
51211: LD_VAR 0 6
51215: IFFALSE 51284
// begin if GetWeapon ( i ) = ru_time_lapser then
51217: LD_VAR 0 4
51221: PPUSH
51222: CALL_OW 264
51226: PUSH
51227: LD_INT 49
51229: EQUAL
51230: IFFALSE 51258
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
51232: LD_VAR 0 4
51236: PPUSH
51237: LD_VAR 0 6
51241: PPUSH
51242: LD_VAR 0 4
51246: PPUSH
51247: CALL_OW 74
51251: PPUSH
51252: CALL_OW 112
51256: GO 51282
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
51258: LD_VAR 0 4
51262: PPUSH
51263: LD_VAR 0 6
51267: PPUSH
51268: LD_VAR 0 4
51272: PPUSH
51273: CALL_OW 74
51277: PPUSH
51278: CALL 52542 0 2
// end else
51282: GO 51384
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
51284: LD_VAR 0 4
51288: PPUSH
51289: LD_VAR 0 2
51293: PUSH
51294: LD_VAR 0 9
51298: ARRAY
51299: PUSH
51300: LD_INT 1
51302: ARRAY
51303: PPUSH
51304: LD_VAR 0 2
51308: PUSH
51309: LD_VAR 0 9
51313: ARRAY
51314: PUSH
51315: LD_INT 2
51317: ARRAY
51318: PPUSH
51319: CALL_OW 297
51323: PUSH
51324: LD_INT 6
51326: GREATER
51327: IFFALSE 51370
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
51329: LD_VAR 0 4
51333: PPUSH
51334: LD_VAR 0 2
51338: PUSH
51339: LD_VAR 0 9
51343: ARRAY
51344: PUSH
51345: LD_INT 1
51347: ARRAY
51348: PPUSH
51349: LD_VAR 0 2
51353: PUSH
51354: LD_VAR 0 9
51358: ARRAY
51359: PUSH
51360: LD_INT 2
51362: ARRAY
51363: PPUSH
51364: CALL_OW 114
51368: GO 51384
// SetTag ( i , tag ) ;
51370: LD_VAR 0 4
51374: PPUSH
51375: LD_VAR 0 9
51379: PPUSH
51380: CALL_OW 109
// end else
51384: GO 51457
// if enemy then
51386: LD_VAR 0 5
51390: IFFALSE 51457
// begin if GetWeapon ( i ) = ru_time_lapser then
51392: LD_VAR 0 4
51396: PPUSH
51397: CALL_OW 264
51401: PUSH
51402: LD_INT 49
51404: EQUAL
51405: IFFALSE 51433
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
51407: LD_VAR 0 4
51411: PPUSH
51412: LD_VAR 0 5
51416: PPUSH
51417: LD_VAR 0 4
51421: PPUSH
51422: CALL_OW 74
51426: PPUSH
51427: CALL_OW 112
51431: GO 51457
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
51433: LD_VAR 0 4
51437: PPUSH
51438: LD_VAR 0 5
51442: PPUSH
51443: LD_VAR 0 4
51447: PPUSH
51448: CALL_OW 74
51452: PPUSH
51453: CALL 52542 0 2
// end ; end ;
51457: GO 51029
51459: POP
51460: POP
// end ;
51461: LD_VAR 0 3
51465: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
51466: LD_INT 0
51468: PPUSH
51469: PPUSH
51470: PPUSH
// if not unit or IsInUnit ( unit ) then
51471: LD_VAR 0 1
51475: NOT
51476: IFTRUE 51489
51478: PUSH
51479: LD_VAR 0 1
51483: PPUSH
51484: CALL_OW 310
51488: OR
51489: IFFALSE 51493
// exit ;
51491: GO 51584
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
51493: LD_ADDR_VAR 0 4
51497: PUSH
51498: LD_VAR 0 1
51502: PPUSH
51503: CALL_OW 250
51507: PPUSH
51508: LD_VAR 0 2
51512: PPUSH
51513: LD_INT 1
51515: PPUSH
51516: CALL_OW 272
51520: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
51521: LD_ADDR_VAR 0 5
51525: PUSH
51526: LD_VAR 0 1
51530: PPUSH
51531: CALL_OW 251
51535: PPUSH
51536: LD_VAR 0 2
51540: PPUSH
51541: LD_INT 1
51543: PPUSH
51544: CALL_OW 273
51548: ST_TO_ADDR
// if ValidHex ( x , y ) then
51549: LD_VAR 0 4
51553: PPUSH
51554: LD_VAR 0 5
51558: PPUSH
51559: CALL_OW 488
51563: IFFALSE 51584
// ComTurnXY ( unit , x , y ) ;
51565: LD_VAR 0 1
51569: PPUSH
51570: LD_VAR 0 4
51574: PPUSH
51575: LD_VAR 0 5
51579: PPUSH
51580: CALL_OW 118
// end ;
51584: LD_VAR 0 3
51588: RET
// export function SeeUnits ( side , units ) ; var i ; begin
51589: LD_INT 0
51591: PPUSH
51592: PPUSH
// result := false ;
51593: LD_ADDR_VAR 0 3
51597: PUSH
51598: LD_INT 0
51600: ST_TO_ADDR
// if not units then
51601: LD_VAR 0 2
51605: NOT
51606: IFFALSE 51610
// exit ;
51608: GO 51655
// for i in units do
51610: LD_ADDR_VAR 0 4
51614: PUSH
51615: LD_VAR 0 2
51619: PUSH
51620: FOR_IN
51621: IFFALSE 51653
// if See ( side , i ) then
51623: LD_VAR 0 1
51627: PPUSH
51628: LD_VAR 0 4
51632: PPUSH
51633: CALL_OW 292
51637: IFFALSE 51651
// begin result := true ;
51639: LD_ADDR_VAR 0 3
51643: PUSH
51644: LD_INT 1
51646: ST_TO_ADDR
// exit ;
51647: POP
51648: POP
51649: GO 51655
// end ;
51651: GO 51620
51653: POP
51654: POP
// end ;
51655: LD_VAR 0 3
51659: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
51660: LD_INT 0
51662: PPUSH
51663: PPUSH
51664: PPUSH
51665: PPUSH
// if not unit or not points then
51666: LD_VAR 0 1
51670: NOT
51671: IFTRUE 51680
51673: PUSH
51674: LD_VAR 0 2
51678: NOT
51679: OR
51680: IFFALSE 51684
// exit ;
51682: GO 51774
// dist := 99999 ;
51684: LD_ADDR_VAR 0 5
51688: PUSH
51689: LD_INT 99999
51691: ST_TO_ADDR
// for i in points do
51692: LD_ADDR_VAR 0 4
51696: PUSH
51697: LD_VAR 0 2
51701: PUSH
51702: FOR_IN
51703: IFFALSE 51772
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
51705: LD_ADDR_VAR 0 6
51709: PUSH
51710: LD_VAR 0 1
51714: PPUSH
51715: LD_VAR 0 4
51719: PUSH
51720: LD_INT 1
51722: ARRAY
51723: PPUSH
51724: LD_VAR 0 4
51728: PUSH
51729: LD_INT 2
51731: ARRAY
51732: PPUSH
51733: CALL_OW 297
51737: ST_TO_ADDR
// if tmpDist < dist then
51738: LD_VAR 0 6
51742: PUSH
51743: LD_VAR 0 5
51747: LESS
51748: IFFALSE 51770
// begin result := i ;
51750: LD_ADDR_VAR 0 3
51754: PUSH
51755: LD_VAR 0 4
51759: ST_TO_ADDR
// dist := tmpDist ;
51760: LD_ADDR_VAR 0 5
51764: PUSH
51765: LD_VAR 0 6
51769: ST_TO_ADDR
// end ; end ;
51770: GO 51702
51772: POP
51773: POP
// end ;
51774: LD_VAR 0 3
51778: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
51779: LD_INT 0
51781: PPUSH
// uc_side := side ;
51782: LD_ADDR_OWVAR 20
51786: PUSH
51787: LD_VAR 0 1
51791: ST_TO_ADDR
// uc_nation := 3 ;
51792: LD_ADDR_OWVAR 21
51796: PUSH
51797: LD_INT 3
51799: ST_TO_ADDR
// vc_chassis := 25 ;
51800: LD_ADDR_OWVAR 37
51804: PUSH
51805: LD_INT 25
51807: ST_TO_ADDR
// vc_engine := engine_siberite ;
51808: LD_ADDR_OWVAR 39
51812: PUSH
51813: LD_INT 3
51815: ST_TO_ADDR
// vc_control := control_computer ;
51816: LD_ADDR_OWVAR 38
51820: PUSH
51821: LD_INT 3
51823: ST_TO_ADDR
// vc_weapon := 59 ;
51824: LD_ADDR_OWVAR 40
51828: PUSH
51829: LD_INT 59
51831: ST_TO_ADDR
// result := CreateVehicle ;
51832: LD_ADDR_VAR 0 5
51836: PUSH
51837: CALL_OW 45
51841: ST_TO_ADDR
// SetDir ( result , d ) ;
51842: LD_VAR 0 5
51846: PPUSH
51847: LD_VAR 0 4
51851: PPUSH
51852: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
51856: LD_VAR 0 5
51860: PPUSH
51861: LD_VAR 0 2
51865: PPUSH
51866: LD_VAR 0 3
51870: PPUSH
51871: LD_INT 0
51873: PPUSH
51874: CALL_OW 48
// end ;
51878: LD_VAR 0 5
51882: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
51883: LD_INT 0
51885: PPUSH
51886: PPUSH
51887: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
51888: LD_ADDR_VAR 0 2
51892: PUSH
51893: LD_INT 0
51895: PUSH
51896: LD_INT 0
51898: PUSH
51899: LD_INT 0
51901: PUSH
51902: LD_INT 0
51904: PUSH
51905: EMPTY
51906: LIST
51907: LIST
51908: LIST
51909: LIST
51910: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
51911: LD_VAR 0 1
51915: NOT
51916: IFTRUE 51949
51918: PUSH
51919: LD_VAR 0 1
51923: PPUSH
51924: CALL_OW 264
51928: PUSH
51929: LD_INT 12
51931: PUSH
51932: LD_INT 51
51934: PUSH
51935: LD_INT 32
51937: PUSH
51938: LD_INT 89
51940: PUSH
51941: EMPTY
51942: LIST
51943: LIST
51944: LIST
51945: LIST
51946: IN
51947: NOT
51948: OR
51949: IFFALSE 51953
// exit ;
51951: GO 52051
// for i := 1 to 3 do
51953: LD_ADDR_VAR 0 3
51957: PUSH
51958: DOUBLE
51959: LD_INT 1
51961: DEC
51962: ST_TO_ADDR
51963: LD_INT 3
51965: PUSH
51966: FOR_TO
51967: IFFALSE 52049
// begin tmp := GetCargo ( cargo , i ) ;
51969: LD_ADDR_VAR 0 4
51973: PUSH
51974: LD_VAR 0 1
51978: PPUSH
51979: LD_VAR 0 3
51983: PPUSH
51984: CALL_OW 289
51988: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
51989: LD_ADDR_VAR 0 2
51993: PUSH
51994: LD_VAR 0 2
51998: PPUSH
51999: LD_VAR 0 3
52003: PPUSH
52004: LD_VAR 0 4
52008: PPUSH
52009: CALL_OW 1
52013: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
52014: LD_ADDR_VAR 0 2
52018: PUSH
52019: LD_VAR 0 2
52023: PPUSH
52024: LD_INT 4
52026: PPUSH
52027: LD_VAR 0 2
52031: PUSH
52032: LD_INT 4
52034: ARRAY
52035: PUSH
52036: LD_VAR 0 4
52040: PLUS
52041: PPUSH
52042: CALL_OW 1
52046: ST_TO_ADDR
// end ;
52047: GO 51966
52049: POP
52050: POP
// end ;
52051: LD_VAR 0 2
52055: RET
// export function Length ( array ) ; begin
52056: LD_INT 0
52058: PPUSH
// result := array + 0 ;
52059: LD_ADDR_VAR 0 2
52063: PUSH
52064: LD_VAR 0 1
52068: PUSH
52069: LD_INT 0
52071: PLUS
52072: ST_TO_ADDR
// end ;
52073: LD_VAR 0 2
52077: RET
// export function PrepareArray ( array ) ; begin
52078: LD_INT 0
52080: PPUSH
// result := array diff 0 ;
52081: LD_ADDR_VAR 0 2
52085: PUSH
52086: LD_VAR 0 1
52090: PUSH
52091: LD_INT 0
52093: DIFF
52094: ST_TO_ADDR
// if not result [ 1 ] then
52095: LD_VAR 0 2
52099: PUSH
52100: LD_INT 1
52102: ARRAY
52103: NOT
52104: IFFALSE 52124
// result := Delete ( result , 1 ) ;
52106: LD_ADDR_VAR 0 2
52110: PUSH
52111: LD_VAR 0 2
52115: PPUSH
52116: LD_INT 1
52118: PPUSH
52119: CALL_OW 3
52123: ST_TO_ADDR
// end ;
52124: LD_VAR 0 2
52128: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
52129: LD_INT 0
52131: PPUSH
52132: PPUSH
52133: PPUSH
52134: PPUSH
// sibRocketRange := 25 ;
52135: LD_ADDR_VAR 0 6
52139: PUSH
52140: LD_INT 25
52142: ST_TO_ADDR
// result := false ;
52143: LD_ADDR_VAR 0 4
52147: PUSH
52148: LD_INT 0
52150: ST_TO_ADDR
// for i := 0 to 5 do
52151: LD_ADDR_VAR 0 5
52155: PUSH
52156: DOUBLE
52157: LD_INT 0
52159: DEC
52160: ST_TO_ADDR
52161: LD_INT 5
52163: PUSH
52164: FOR_TO
52165: IFFALSE 52232
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
52167: LD_VAR 0 1
52171: PPUSH
52172: LD_VAR 0 5
52176: PPUSH
52177: LD_VAR 0 6
52181: PPUSH
52182: CALL_OW 272
52186: PPUSH
52187: LD_VAR 0 2
52191: PPUSH
52192: LD_VAR 0 5
52196: PPUSH
52197: LD_VAR 0 6
52201: PPUSH
52202: CALL_OW 273
52206: PPUSH
52207: LD_VAR 0 3
52211: PPUSH
52212: CALL_OW 309
52216: IFFALSE 52230
// begin result := true ;
52218: LD_ADDR_VAR 0 4
52222: PUSH
52223: LD_INT 1
52225: ST_TO_ADDR
// exit ;
52226: POP
52227: POP
52228: GO 52234
// end ;
52230: GO 52164
52232: POP
52233: POP
// end ;
52234: LD_VAR 0 4
52238: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
52239: LD_INT 0
52241: PPUSH
52242: PPUSH
52243: PPUSH
// if btype = b_depot then
52244: LD_VAR 0 2
52248: PUSH
52249: LD_INT 0
52251: EQUAL
52252: IFFALSE 52264
// begin result := true ;
52254: LD_ADDR_VAR 0 3
52258: PUSH
52259: LD_INT 1
52261: ST_TO_ADDR
// exit ;
52262: GO 52384
// end ; pom := GetBase ( depot ) ;
52264: LD_ADDR_VAR 0 4
52268: PUSH
52269: LD_VAR 0 1
52273: PPUSH
52274: CALL_OW 274
52278: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
52279: LD_ADDR_VAR 0 5
52283: PUSH
52284: LD_VAR 0 2
52288: PPUSH
52289: LD_VAR 0 1
52293: PPUSH
52294: CALL_OW 248
52298: PPUSH
52299: CALL_OW 450
52303: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
52304: LD_ADDR_VAR 0 3
52308: PUSH
52309: LD_VAR 0 4
52313: PPUSH
52314: LD_INT 1
52316: PPUSH
52317: CALL_OW 275
52321: PUSH
52322: LD_VAR 0 5
52326: PUSH
52327: LD_INT 1
52329: ARRAY
52330: GREATEREQUAL
52331: IFFALSE 52357
52333: PUSH
52334: LD_VAR 0 4
52338: PPUSH
52339: LD_INT 2
52341: PPUSH
52342: CALL_OW 275
52346: PUSH
52347: LD_VAR 0 5
52351: PUSH
52352: LD_INT 2
52354: ARRAY
52355: GREATEREQUAL
52356: AND
52357: IFFALSE 52383
52359: PUSH
52360: LD_VAR 0 4
52364: PPUSH
52365: LD_INT 3
52367: PPUSH
52368: CALL_OW 275
52372: PUSH
52373: LD_VAR 0 5
52377: PUSH
52378: LD_INT 3
52380: ARRAY
52381: GREATEREQUAL
52382: AND
52383: ST_TO_ADDR
// end ;
52384: LD_VAR 0 3
52388: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
52389: LD_INT 0
52391: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
52392: LD_VAR 0 1
52396: PPUSH
52397: LD_VAR 0 2
52401: PPUSH
52402: LD_INT 0
52404: PPUSH
52405: LD_INT 0
52407: PPUSH
52408: LD_INT 1
52410: PPUSH
52411: LD_INT 0
52413: PPUSH
52414: CALL_OW 587
// end ;
52418: LD_VAR 0 3
52422: RET
// export function CenterOnNow ( unit ) ; begin
52423: LD_INT 0
52425: PPUSH
// result := IsInUnit ( unit ) ;
52426: LD_ADDR_VAR 0 2
52430: PUSH
52431: LD_VAR 0 1
52435: PPUSH
52436: CALL_OW 310
52440: ST_TO_ADDR
// if not result then
52441: LD_VAR 0 2
52445: NOT
52446: IFFALSE 52458
// result := unit ;
52448: LD_ADDR_VAR 0 2
52452: PUSH
52453: LD_VAR 0 1
52457: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
52458: LD_VAR 0 1
52462: PPUSH
52463: CALL_OW 87
// end ;
52467: LD_VAR 0 2
52471: RET
// export function ComMoveHex ( unit , hex ) ; begin
52472: LD_INT 0
52474: PPUSH
// if not hex then
52475: LD_VAR 0 2
52479: NOT
52480: IFFALSE 52484
// exit ;
52482: GO 52537
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
52484: LD_VAR 0 2
52488: PUSH
52489: LD_INT 1
52491: ARRAY
52492: PPUSH
52493: LD_VAR 0 2
52497: PUSH
52498: LD_INT 2
52500: ARRAY
52501: PPUSH
52502: CALL_OW 428
52506: IFFALSE 52510
// exit ;
52508: GO 52537
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
52510: LD_VAR 0 1
52514: PPUSH
52515: LD_VAR 0 2
52519: PUSH
52520: LD_INT 1
52522: ARRAY
52523: PPUSH
52524: LD_VAR 0 2
52528: PUSH
52529: LD_INT 2
52531: ARRAY
52532: PPUSH
52533: CALL_OW 111
// end ;
52537: LD_VAR 0 3
52541: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
52542: LD_INT 0
52544: PPUSH
52545: PPUSH
52546: PPUSH
// if not unit or not enemy then
52547: LD_VAR 0 1
52551: NOT
52552: IFTRUE 52561
52554: PUSH
52555: LD_VAR 0 2
52559: NOT
52560: OR
52561: IFFALSE 52565
// exit ;
52563: GO 52691
// x := GetX ( enemy ) ;
52565: LD_ADDR_VAR 0 4
52569: PUSH
52570: LD_VAR 0 2
52574: PPUSH
52575: CALL_OW 250
52579: ST_TO_ADDR
// y := GetY ( enemy ) ;
52580: LD_ADDR_VAR 0 5
52584: PUSH
52585: LD_VAR 0 2
52589: PPUSH
52590: CALL_OW 251
52594: ST_TO_ADDR
// if ValidHex ( x , y ) then
52595: LD_VAR 0 4
52599: PPUSH
52600: LD_VAR 0 5
52604: PPUSH
52605: CALL_OW 488
52609: IFFALSE 52691
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
52611: LD_VAR 0 2
52615: PPUSH
52616: CALL_OW 247
52620: PUSH
52621: LD_INT 3
52623: PUSH
52624: LD_INT 2
52626: PUSH
52627: EMPTY
52628: LIST
52629: LIST
52630: IN
52631: IFTRUE 52654
52633: PUSH
52634: LD_VAR 0 1
52638: PPUSH
52639: CALL_OW 255
52643: PPUSH
52644: LD_VAR 0 2
52648: PPUSH
52649: CALL_OW 292
52653: OR
52654: IFFALSE 52672
// ComAttackUnit ( unit , enemy ) else
52656: LD_VAR 0 1
52660: PPUSH
52661: LD_VAR 0 2
52665: PPUSH
52666: CALL_OW 115
52670: GO 52691
// ComAgressiveMove ( unit , x , y ) ;
52672: LD_VAR 0 1
52676: PPUSH
52677: LD_VAR 0 4
52681: PPUSH
52682: LD_VAR 0 5
52686: PPUSH
52687: CALL_OW 114
// end ;
52691: LD_VAR 0 3
52695: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
52696: LD_INT 0
52698: PPUSH
52699: PPUSH
52700: PPUSH
// list := AreaToList ( area , 0 ) ;
52701: LD_ADDR_VAR 0 5
52705: PUSH
52706: LD_VAR 0 1
52710: PPUSH
52711: LD_INT 0
52713: PPUSH
52714: CALL_OW 517
52718: ST_TO_ADDR
// if not list then
52719: LD_VAR 0 5
52723: NOT
52724: IFFALSE 52728
// exit ;
52726: GO 52858
// if all then
52728: LD_VAR 0 2
52732: IFFALSE 52820
// begin for i := 1 to list [ 1 ] do
52734: LD_ADDR_VAR 0 4
52738: PUSH
52739: DOUBLE
52740: LD_INT 1
52742: DEC
52743: ST_TO_ADDR
52744: LD_VAR 0 5
52748: PUSH
52749: LD_INT 1
52751: ARRAY
52752: PUSH
52753: FOR_TO
52754: IFFALSE 52816
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
52756: LD_ADDR_VAR 0 3
52760: PUSH
52761: LD_VAR 0 3
52765: PPUSH
52766: LD_VAR 0 3
52770: PUSH
52771: LD_INT 1
52773: PLUS
52774: PPUSH
52775: LD_VAR 0 5
52779: PUSH
52780: LD_INT 1
52782: ARRAY
52783: PUSH
52784: LD_VAR 0 4
52788: ARRAY
52789: PUSH
52790: LD_VAR 0 5
52794: PUSH
52795: LD_INT 2
52797: ARRAY
52798: PUSH
52799: LD_VAR 0 4
52803: ARRAY
52804: PUSH
52805: EMPTY
52806: LIST
52807: LIST
52808: PPUSH
52809: CALL_OW 1
52813: ST_TO_ADDR
52814: GO 52753
52816: POP
52817: POP
// exit ;
52818: GO 52858
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
52820: LD_ADDR_VAR 0 3
52824: PUSH
52825: LD_VAR 0 5
52829: PUSH
52830: LD_INT 1
52832: ARRAY
52833: PUSH
52834: LD_INT 1
52836: ARRAY
52837: PUSH
52838: LD_VAR 0 5
52842: PUSH
52843: LD_INT 2
52845: ARRAY
52846: PUSH
52847: LD_INT 1
52849: ARRAY
52850: PUSH
52851: EMPTY
52852: LIST
52853: LIST
52854: PUSH
52855: EMPTY
52856: LIST
52857: ST_TO_ADDR
// end ;
52858: LD_VAR 0 3
52862: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
52863: LD_INT 0
52865: PPUSH
52866: PPUSH
// list := AreaToList ( area , 0 ) ;
52867: LD_ADDR_VAR 0 4
52871: PUSH
52872: LD_VAR 0 1
52876: PPUSH
52877: LD_INT 0
52879: PPUSH
52880: CALL_OW 517
52884: ST_TO_ADDR
// if not list then
52885: LD_VAR 0 4
52889: NOT
52890: IFFALSE 52894
// exit ;
52892: GO 52935
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
52894: LD_ADDR_VAR 0 3
52898: PUSH
52899: LD_VAR 0 4
52903: PUSH
52904: LD_INT 1
52906: ARRAY
52907: PUSH
52908: LD_INT 1
52910: ARRAY
52911: PUSH
52912: LD_VAR 0 4
52916: PUSH
52917: LD_INT 2
52919: ARRAY
52920: PUSH
52921: LD_INT 1
52923: ARRAY
52924: PUSH
52925: LD_VAR 0 2
52929: PUSH
52930: EMPTY
52931: LIST
52932: LIST
52933: LIST
52934: ST_TO_ADDR
// end ;
52935: LD_VAR 0 3
52939: RET
// export function First ( array ) ; begin
52940: LD_INT 0
52942: PPUSH
// if not array then
52943: LD_VAR 0 1
52947: NOT
52948: IFFALSE 52952
// exit ;
52950: GO 52966
// result := array [ 1 ] ;
52952: LD_ADDR_VAR 0 2
52956: PUSH
52957: LD_VAR 0 1
52961: PUSH
52962: LD_INT 1
52964: ARRAY
52965: ST_TO_ADDR
// end ;
52966: LD_VAR 0 2
52970: RET
// export function Last ( array ) ; begin
52971: LD_INT 0
52973: PPUSH
// if not array then
52974: LD_VAR 0 1
52978: NOT
52979: IFFALSE 52983
// exit ;
52981: GO 52999
// result := array [ array ] ;
52983: LD_ADDR_VAR 0 2
52987: PUSH
52988: LD_VAR 0 1
52992: PUSH
52993: LD_VAR 0 1
52997: ARRAY
52998: ST_TO_ADDR
// end ;
52999: LD_VAR 0 2
53003: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
53004: LD_INT 0
53006: PPUSH
53007: PPUSH
// result := [ ] ;
53008: LD_ADDR_VAR 0 5
53012: PUSH
53013: EMPTY
53014: ST_TO_ADDR
// if not array then
53015: LD_VAR 0 1
53019: NOT
53020: IFFALSE 53024
// exit ;
53022: GO 53136
// for i := 1 to array do
53024: LD_ADDR_VAR 0 6
53028: PUSH
53029: DOUBLE
53030: LD_INT 1
53032: DEC
53033: ST_TO_ADDR
53034: LD_VAR 0 1
53038: PUSH
53039: FOR_TO
53040: IFFALSE 53134
// if array [ i ] [ index ] = value then
53042: LD_VAR 0 1
53046: PUSH
53047: LD_VAR 0 6
53051: ARRAY
53052: PUSH
53053: LD_VAR 0 2
53057: ARRAY
53058: PUSH
53059: LD_VAR 0 3
53063: EQUAL
53064: IFFALSE 53132
// begin if indexColumn then
53066: LD_VAR 0 4
53070: IFFALSE 53106
// result := Join ( result , array [ i ] [ indexColumn ] ) else
53072: LD_ADDR_VAR 0 5
53076: PUSH
53077: LD_VAR 0 5
53081: PPUSH
53082: LD_VAR 0 1
53086: PUSH
53087: LD_VAR 0 6
53091: ARRAY
53092: PUSH
53093: LD_VAR 0 4
53097: ARRAY
53098: PPUSH
53099: CALL 48144 0 2
53103: ST_TO_ADDR
53104: GO 53132
// result := Join ( result , array [ i ] ) ;
53106: LD_ADDR_VAR 0 5
53110: PUSH
53111: LD_VAR 0 5
53115: PPUSH
53116: LD_VAR 0 1
53120: PUSH
53121: LD_VAR 0 6
53125: ARRAY
53126: PPUSH
53127: CALL 48144 0 2
53131: ST_TO_ADDR
// end ;
53132: GO 53039
53134: POP
53135: POP
// end ;
53136: LD_VAR 0 5
53140: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
53141: LD_INT 0
53143: PPUSH
// if not vehicles or not parkingPoint then
53144: LD_VAR 0 1
53148: NOT
53149: IFTRUE 53158
53151: PUSH
53152: LD_VAR 0 2
53156: NOT
53157: OR
53158: IFFALSE 53162
// exit ;
53160: GO 53260
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
53162: LD_ADDR_VAR 0 1
53166: PUSH
53167: LD_VAR 0 1
53171: PPUSH
53172: LD_INT 50
53174: PUSH
53175: EMPTY
53176: LIST
53177: PUSH
53178: LD_INT 3
53180: PUSH
53181: LD_INT 92
53183: PUSH
53184: LD_VAR 0 2
53188: PUSH
53189: LD_INT 1
53191: ARRAY
53192: PUSH
53193: LD_VAR 0 2
53197: PUSH
53198: LD_INT 2
53200: ARRAY
53201: PUSH
53202: LD_INT 8
53204: PUSH
53205: EMPTY
53206: LIST
53207: LIST
53208: LIST
53209: LIST
53210: PUSH
53211: EMPTY
53212: LIST
53213: LIST
53214: PUSH
53215: EMPTY
53216: LIST
53217: LIST
53218: PPUSH
53219: CALL_OW 72
53223: ST_TO_ADDR
// if not vehicles then
53224: LD_VAR 0 1
53228: NOT
53229: IFFALSE 53233
// exit ;
53231: GO 53260
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
53233: LD_VAR 0 1
53237: PPUSH
53238: LD_VAR 0 2
53242: PUSH
53243: LD_INT 1
53245: ARRAY
53246: PPUSH
53247: LD_VAR 0 2
53251: PUSH
53252: LD_INT 2
53254: ARRAY
53255: PPUSH
53256: CALL_OW 111
// end ;
53260: LD_VAR 0 3
53264: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
53265: LD_INT 0
53267: PPUSH
53268: PPUSH
53269: PPUSH
// if not side or not area then
53270: LD_VAR 0 1
53274: NOT
53275: IFTRUE 53284
53277: PUSH
53278: LD_VAR 0 2
53282: NOT
53283: OR
53284: IFFALSE 53288
// exit ;
53286: GO 53407
// tmp := AreaToList ( area , 0 ) ;
53288: LD_ADDR_VAR 0 5
53292: PUSH
53293: LD_VAR 0 2
53297: PPUSH
53298: LD_INT 0
53300: PPUSH
53301: CALL_OW 517
53305: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
53306: LD_ADDR_VAR 0 4
53310: PUSH
53311: DOUBLE
53312: LD_INT 1
53314: DEC
53315: ST_TO_ADDR
53316: LD_VAR 0 5
53320: PUSH
53321: LD_INT 1
53323: ARRAY
53324: PUSH
53325: FOR_TO
53326: IFFALSE 53405
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
53328: LD_VAR 0 5
53332: PUSH
53333: LD_INT 1
53335: ARRAY
53336: PUSH
53337: LD_VAR 0 4
53341: ARRAY
53342: PPUSH
53343: LD_VAR 0 5
53347: PUSH
53348: LD_INT 2
53350: ARRAY
53351: PUSH
53352: LD_VAR 0 4
53356: ARRAY
53357: PPUSH
53358: CALL_OW 351
53362: IFFALSE 53403
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
53364: LD_VAR 0 5
53368: PUSH
53369: LD_INT 1
53371: ARRAY
53372: PUSH
53373: LD_VAR 0 4
53377: ARRAY
53378: PPUSH
53379: LD_VAR 0 5
53383: PUSH
53384: LD_INT 2
53386: ARRAY
53387: PUSH
53388: LD_VAR 0 4
53392: ARRAY
53393: PPUSH
53394: LD_VAR 0 1
53398: PPUSH
53399: CALL_OW 244
// end ;
53403: GO 53325
53405: POP
53406: POP
// end ;
53407: LD_VAR 0 3
53411: RET
// export function UniqueArray ( array ) ; var i ; begin
53412: LD_INT 0
53414: PPUSH
53415: PPUSH
// result := [ ] ;
53416: LD_ADDR_VAR 0 2
53420: PUSH
53421: EMPTY
53422: ST_TO_ADDR
// if not array then
53423: LD_VAR 0 1
53427: NOT
53428: IFFALSE 53432
// exit ;
53430: GO 53493
// for i := 1 to array do
53432: LD_ADDR_VAR 0 3
53436: PUSH
53437: DOUBLE
53438: LD_INT 1
53440: DEC
53441: ST_TO_ADDR
53442: LD_VAR 0 1
53446: PUSH
53447: FOR_TO
53448: IFFALSE 53491
// if not array [ i ] in result then
53450: LD_VAR 0 1
53454: PUSH
53455: LD_VAR 0 3
53459: ARRAY
53460: PUSH
53461: LD_VAR 0 2
53465: IN
53466: NOT
53467: IFFALSE 53489
// result := Join ( result , i ) ;
53469: LD_ADDR_VAR 0 2
53473: PUSH
53474: LD_VAR 0 2
53478: PPUSH
53479: LD_VAR 0 3
53483: PPUSH
53484: CALL 48144 0 2
53488: ST_TO_ADDR
53489: GO 53447
53491: POP
53492: POP
// end ; end_of_file
53493: LD_VAR 0 2
53497: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
53498: LD_VAR 0 1
53502: PUSH
53503: LD_INT 200
53505: DOUBLE
53506: GREATEREQUAL
53507: IFFALSE 53515
53509: LD_INT 299
53511: DOUBLE
53512: LESSEQUAL
53513: IFTRUE 53517
53515: GO 53549
53517: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
53518: LD_VAR 0 1
53522: PPUSH
53523: LD_VAR 0 2
53527: PPUSH
53528: LD_VAR 0 3
53532: PPUSH
53533: LD_VAR 0 4
53537: PPUSH
53538: LD_VAR 0 5
53542: PPUSH
53543: CALL 54330 0 5
53547: GO 53626
53549: LD_INT 300
53551: DOUBLE
53552: GREATEREQUAL
53553: IFFALSE 53561
53555: LD_INT 399
53557: DOUBLE
53558: LESSEQUAL
53559: IFTRUE 53563
53561: GO 53625
53563: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
53564: LD_VAR 0 1
53568: PPUSH
53569: LD_VAR 0 2
53573: PPUSH
53574: LD_VAR 0 3
53578: PPUSH
53579: LD_VAR 0 4
53583: PPUSH
53584: LD_VAR 0 5
53588: PPUSH
53589: LD_VAR 0 6
53593: PPUSH
53594: LD_VAR 0 7
53598: PPUSH
53599: LD_VAR 0 8
53603: PPUSH
53604: LD_VAR 0 9
53608: PPUSH
53609: LD_VAR 0 10
53613: PPUSH
53614: LD_VAR 0 11
53618: PPUSH
53619: CALL 61339 0 11
53623: GO 53626
53625: POP
// end ;
53626: PPOPN 11
53628: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
53629: LD_VAR 0 1
53633: PPUSH
53634: LD_VAR 0 2
53638: PPUSH
53639: LD_VAR 0 3
53643: PPUSH
53644: LD_VAR 0 4
53648: PPUSH
53649: LD_VAR 0 5
53653: PPUSH
53654: CALL 53711 0 5
// end ; end_of_file
53658: PPOPN 5
53660: END
// export function SOS_UnitDestroyed ( un ) ; begin
53661: LD_INT 0
53663: PPUSH
// ComRadiation ( un ) ;
53664: LD_VAR 0 1
53668: PPUSH
53669: CALL 54750 0 1
// end ;
53673: LD_VAR 0 2
53677: RET
// export function SOS_UnitKamikazed ( un ) ; begin
53678: LD_INT 0
53680: PPUSH
// ComRadiation ( un ) ;
53681: LD_VAR 0 1
53685: PPUSH
53686: CALL 54750 0 1
// end ;
53690: LD_VAR 0 2
53694: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
53695: LD_INT 0
53697: PPUSH
// end ;
53698: LD_VAR 0 4
53702: RET
// export function SOS_Command ( cmd ) ; begin
53703: LD_INT 0
53705: PPUSH
// end ;
53706: LD_VAR 0 2
53710: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
53711: LD_INT 0
53713: PPUSH
// end ;
53714: LD_VAR 0 6
53718: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , driver , hex ; begin
53719: LD_INT 0
53721: PPUSH
53722: PPUSH
53723: PPUSH
53724: PPUSH
// if not vehicle or not factory then
53725: LD_VAR 0 1
53729: NOT
53730: IFTRUE 53739
53732: PUSH
53733: LD_VAR 0 2
53737: NOT
53738: OR
53739: IFFALSE 53743
// exit ;
53741: GO 54325
// if not factoryWaypoints then
53743: LD_EXP 59
53747: NOT
53748: IFFALSE 53752
// exit ;
53750: GO 54325
// for i := 1 to Count ( factoryWaypoints ) do
53752: LD_ADDR_VAR 0 4
53756: PUSH
53757: DOUBLE
53758: LD_INT 1
53760: DEC
53761: ST_TO_ADDR
53762: LD_EXP 59
53766: PPUSH
53767: CALL 12212 0 1
53771: PUSH
53772: FOR_TO
53773: IFFALSE 54323
// if factoryWaypoints [ i ] [ 2 ] = factory then
53775: LD_EXP 59
53779: PUSH
53780: LD_VAR 0 4
53784: ARRAY
53785: PUSH
53786: LD_INT 2
53788: ARRAY
53789: PUSH
53790: LD_VAR 0 2
53794: EQUAL
53795: IFFALSE 54321
// begin if GetControl ( vehicle ) = control_manual then
53797: LD_VAR 0 1
53801: PPUSH
53802: CALL_OW 263
53806: PUSH
53807: LD_INT 1
53809: EQUAL
53810: IFFALSE 54174
// begin driver := IsDrivenBy ( vehicle ) ;
53812: LD_ADDR_VAR 0 5
53816: PUSH
53817: LD_VAR 0 1
53821: PPUSH
53822: CALL_OW 311
53826: ST_TO_ADDR
// if driver in factoryWaypointsDrivers or vehicle in factoryWaypointsDrivers then
53827: LD_VAR 0 5
53831: PUSH
53832: LD_EXP 60
53836: IN
53837: IFTRUE 53851
53839: PUSH
53840: LD_VAR 0 1
53844: PUSH
53845: LD_EXP 60
53849: IN
53850: OR
53851: IFFALSE 53857
// exit ;
53853: POP
53854: POP
53855: GO 54325
// if not HasTask ( driver ) then
53857: LD_VAR 0 5
53861: PPUSH
53862: CALL_OW 314
53866: NOT
53867: IFFALSE 54172
// begin factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , driver ) ;
53869: LD_ADDR_EXP 60
53873: PUSH
53874: LD_EXP 60
53878: PPUSH
53879: LD_VAR 0 5
53883: PPUSH
53884: CALL 48144 0 2
53888: ST_TO_ADDR
// factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , vehicle ) ;
53889: LD_ADDR_EXP 60
53893: PUSH
53894: LD_EXP 60
53898: PPUSH
53899: LD_VAR 0 1
53903: PPUSH
53904: CALL 48144 0 2
53908: ST_TO_ADDR
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
53909: LD_ADDR_VAR 0 6
53913: PUSH
53914: LD_EXP 59
53918: PUSH
53919: LD_VAR 0 4
53923: ARRAY
53924: PUSH
53925: LD_INT 3
53927: ARRAY
53928: PPUSH
53929: LD_EXP 59
53933: PUSH
53934: LD_VAR 0 4
53938: ARRAY
53939: PUSH
53940: LD_INT 4
53942: ARRAY
53943: PPUSH
53944: CALL_OW 428
53948: ST_TO_ADDR
// if hex then
53949: LD_VAR 0 6
53953: IFFALSE 53971
// ComMoveUnit ( driver , hex ) else
53955: LD_VAR 0 5
53959: PPUSH
53960: LD_VAR 0 6
53964: PPUSH
53965: CALL_OW 112
53969: GO 54055
// if GetDistUnitXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) > 0 then
53971: LD_VAR 0 1
53975: PPUSH
53976: LD_EXP 59
53980: PUSH
53981: LD_VAR 0 4
53985: ARRAY
53986: PUSH
53987: LD_INT 3
53989: ARRAY
53990: PPUSH
53991: LD_EXP 59
53995: PUSH
53996: LD_VAR 0 4
54000: ARRAY
54001: PUSH
54002: LD_INT 4
54004: ARRAY
54005: PPUSH
54006: CALL_OW 297
54010: PUSH
54011: LD_INT 0
54013: GREATER
54014: IFFALSE 54055
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
54016: LD_VAR 0 5
54020: PPUSH
54021: LD_EXP 59
54025: PUSH
54026: LD_VAR 0 4
54030: ARRAY
54031: PUSH
54032: LD_INT 3
54034: ARRAY
54035: PPUSH
54036: LD_EXP 59
54040: PUSH
54041: LD_VAR 0 4
54045: ARRAY
54046: PUSH
54047: LD_INT 4
54049: ARRAY
54050: PPUSH
54051: CALL_OW 111
// AddComExitVehicle ( driver ) ;
54055: LD_VAR 0 5
54059: PPUSH
54060: CALL_OW 181
// if Multiplayer then
54064: LD_OWVAR 4
54068: IFFALSE 54117
// begin repeat wait ( 10 ) ;
54070: LD_INT 10
54072: PPUSH
54073: CALL_OW 67
// until not IsInUnit ( driver ) ;
54077: LD_VAR 0 5
54081: PPUSH
54082: CALL_OW 310
54086: NOT
54087: IFFALSE 54070
// if not HasTask ( driver ) then
54089: LD_VAR 0 5
54093: PPUSH
54094: CALL_OW 314
54098: NOT
54099: IFFALSE 54115
// ComEnterUnit ( driver , factory ) ;
54101: LD_VAR 0 5
54105: PPUSH
54106: LD_VAR 0 2
54110: PPUSH
54111: CALL_OW 120
// end else
54115: GO 54131
// AddComEnterUnit ( driver , factory ) ;
54117: LD_VAR 0 5
54121: PPUSH
54122: LD_VAR 0 2
54126: PPUSH
54127: CALL_OW 180
// wait ( 0 0$1 ) ;
54131: LD_INT 35
54133: PPUSH
54134: CALL_OW 67
// factoryWaypointsDrivers := factoryWaypointsDrivers diff driver ;
54138: LD_ADDR_EXP 60
54142: PUSH
54143: LD_EXP 60
54147: PUSH
54148: LD_VAR 0 5
54152: DIFF
54153: ST_TO_ADDR
// factoryWaypointsDrivers := factoryWaypointsDrivers diff vehicle ;
54154: LD_ADDR_EXP 60
54158: PUSH
54159: LD_EXP 60
54163: PUSH
54164: LD_VAR 0 1
54168: DIFF
54169: ST_TO_ADDR
// break ;
54170: GO 54323
// end ; end else
54172: GO 54321
// if GetControl ( vehicle ) = control_remote then
54174: LD_VAR 0 1
54178: PPUSH
54179: CALL_OW 263
54183: PUSH
54184: LD_INT 2
54186: EQUAL
54187: IFFALSE 54273
// begin wait ( 0 0$2 ) ;
54189: LD_INT 70
54191: PPUSH
54192: CALL_OW 67
// repeat wait ( 10 ) ;
54196: LD_INT 10
54198: PPUSH
54199: CALL_OW 67
// Connect ( vehicle ) ;
54203: LD_VAR 0 1
54207: PPUSH
54208: CALL 18456 0 1
// until IsControledBy ( vehicle ) ;
54212: LD_VAR 0 1
54216: PPUSH
54217: CALL_OW 312
54221: IFFALSE 54196
// wait ( 10 ) ;
54223: LD_INT 10
54225: PPUSH
54226: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
54230: LD_VAR 0 1
54234: PPUSH
54235: LD_EXP 59
54239: PUSH
54240: LD_VAR 0 4
54244: ARRAY
54245: PUSH
54246: LD_INT 3
54248: ARRAY
54249: PPUSH
54250: LD_EXP 59
54254: PUSH
54255: LD_VAR 0 4
54259: ARRAY
54260: PUSH
54261: LD_INT 4
54263: ARRAY
54264: PPUSH
54265: CALL_OW 111
// break ;
54269: GO 54323
// end else
54271: GO 54321
// begin wait ( 0 0$3 ) ;
54273: LD_INT 105
54275: PPUSH
54276: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
54280: LD_VAR 0 1
54284: PPUSH
54285: LD_EXP 59
54289: PUSH
54290: LD_VAR 0 4
54294: ARRAY
54295: PUSH
54296: LD_INT 3
54298: ARRAY
54299: PPUSH
54300: LD_EXP 59
54304: PUSH
54305: LD_VAR 0 4
54309: ARRAY
54310: PUSH
54311: LD_INT 4
54313: ARRAY
54314: PPUSH
54315: CALL_OW 111
// break ;
54319: GO 54323
// end ; end ;
54321: GO 53772
54323: POP
54324: POP
// end ;
54325: LD_VAR 0 3
54329: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
54330: LD_INT 0
54332: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
54333: LD_VAR 0 1
54337: PUSH
54338: LD_INT 250
54340: EQUAL
54341: IFFALSE 54358
54343: PUSH
54344: LD_VAR 0 2
54348: PPUSH
54349: CALL_OW 264
54353: PUSH
54354: LD_INT 81
54356: EQUAL
54357: AND
54358: IFFALSE 54379
// MinerPlaceMine ( unit , x , y ) ;
54360: LD_VAR 0 2
54364: PPUSH
54365: LD_VAR 0 4
54369: PPUSH
54370: LD_VAR 0 5
54374: PPUSH
54375: CALL 57511 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
54379: LD_VAR 0 1
54383: PUSH
54384: LD_INT 251
54386: EQUAL
54387: IFFALSE 54404
54389: PUSH
54390: LD_VAR 0 2
54394: PPUSH
54395: CALL_OW 264
54399: PUSH
54400: LD_INT 81
54402: EQUAL
54403: AND
54404: IFFALSE 54425
// MinerDetonateMine ( unit , x , y ) ;
54406: LD_VAR 0 2
54410: PPUSH
54411: LD_VAR 0 4
54415: PPUSH
54416: LD_VAR 0 5
54420: PPUSH
54421: CALL 57790 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
54425: LD_VAR 0 1
54429: PUSH
54430: LD_INT 252
54432: EQUAL
54433: IFFALSE 54450
54435: PUSH
54436: LD_VAR 0 2
54440: PPUSH
54441: CALL_OW 264
54445: PUSH
54446: LD_INT 81
54448: EQUAL
54449: AND
54450: IFFALSE 54471
// MinerCreateMinefield ( unit , x , y ) ;
54452: LD_VAR 0 2
54456: PPUSH
54457: LD_VAR 0 4
54461: PPUSH
54462: LD_VAR 0 5
54466: PPUSH
54467: CALL 58209 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
54471: LD_VAR 0 1
54475: PUSH
54476: LD_INT 253
54478: EQUAL
54479: IFFALSE 54496
54481: PUSH
54482: LD_VAR 0 2
54486: PPUSH
54487: CALL_OW 257
54491: PUSH
54492: LD_INT 5
54494: EQUAL
54495: AND
54496: IFFALSE 54517
// ComBinocular ( unit , x , y ) ;
54498: LD_VAR 0 2
54502: PPUSH
54503: LD_VAR 0 4
54507: PPUSH
54508: LD_VAR 0 5
54512: PPUSH
54513: CALL 58584 0 3
// if selectedUnit then
54517: LD_VAR 0 3
54521: IFFALSE 54581
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
54523: LD_VAR 0 1
54527: PUSH
54528: LD_INT 254
54530: EQUAL
54531: IFFALSE 54548
54533: PUSH
54534: LD_VAR 0 2
54538: PPUSH
54539: CALL_OW 264
54543: PUSH
54544: LD_INT 99
54546: EQUAL
54547: AND
54548: IFFALSE 54565
54550: PUSH
54551: LD_VAR 0 3
54555: PPUSH
54556: CALL_OW 263
54560: PUSH
54561: LD_INT 3
54563: EQUAL
54564: AND
54565: IFFALSE 54581
// HackDestroyVehicle ( unit , selectedUnit ) ;
54567: LD_VAR 0 2
54571: PPUSH
54572: LD_VAR 0 3
54576: PPUSH
54577: CALL 56871 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
54581: LD_VAR 0 1
54585: PUSH
54586: LD_INT 255
54588: EQUAL
54589: IFFALSE 54613
54591: PUSH
54592: LD_VAR 0 2
54596: PPUSH
54597: CALL_OW 264
54601: PUSH
54602: LD_INT 14
54604: PUSH
54605: LD_INT 53
54607: PUSH
54608: EMPTY
54609: LIST
54610: LIST
54611: IN
54612: AND
54613: IFFALSE 54631
54615: PUSH
54616: LD_VAR 0 4
54620: PPUSH
54621: LD_VAR 0 5
54625: PPUSH
54626: CALL_OW 488
54630: AND
54631: IFFALSE 54655
// CutTreeXYR ( unit , x , y , 12 ) ;
54633: LD_VAR 0 2
54637: PPUSH
54638: LD_VAR 0 4
54642: PPUSH
54643: LD_VAR 0 5
54647: PPUSH
54648: LD_INT 12
54650: PPUSH
54651: CALL 54846 0 4
// if cmd = 256 then
54655: LD_VAR 0 1
54659: PUSH
54660: LD_INT 256
54662: EQUAL
54663: IFFALSE 54684
// SetFactoryWaypoint ( unit , x , y ) ;
54665: LD_VAR 0 2
54669: PPUSH
54670: LD_VAR 0 4
54674: PPUSH
54675: LD_VAR 0 5
54679: PPUSH
54680: CALL 61347 0 3
// if cmd = 257 then
54684: LD_VAR 0 1
54688: PUSH
54689: LD_INT 257
54691: EQUAL
54692: IFFALSE 54713
// SetWarehouseGatheringPoint ( unit , x , y ) ;
54694: LD_VAR 0 2
54698: PPUSH
54699: LD_VAR 0 4
54703: PPUSH
54704: LD_VAR 0 5
54708: PPUSH
54709: CALL 61843 0 3
// if cmd = 258 then
54713: LD_VAR 0 1
54717: PUSH
54718: LD_INT 258
54720: EQUAL
54721: IFFALSE 54745
// BurnTreeXYR ( unit , x , y , 8 ) ;
54723: LD_VAR 0 2
54727: PPUSH
54728: LD_VAR 0 4
54732: PPUSH
54733: LD_VAR 0 5
54737: PPUSH
54738: LD_INT 8
54740: PPUSH
54741: CALL 55246 0 4
// end ;
54745: LD_VAR 0 6
54749: RET
// export function ComRadiation ( un ) ; var eff ; begin
54750: LD_INT 0
54752: PPUSH
54753: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
54754: LD_VAR 0 1
54758: PPUSH
54759: CALL_OW 264
54763: PUSH
54764: LD_INT 91
54766: NONEQUAL
54767: IFFALSE 54771
// exit ;
54769: GO 54841
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
54771: LD_INT 68
54773: PPUSH
54774: LD_VAR 0 1
54778: PPUSH
54779: CALL_OW 255
54783: PPUSH
54784: CALL_OW 321
54788: PUSH
54789: LD_INT 2
54791: EQUAL
54792: IFFALSE 54804
// eff := 50 else
54794: LD_ADDR_VAR 0 3
54798: PUSH
54799: LD_INT 50
54801: ST_TO_ADDR
54802: GO 54812
// eff := 25 ;
54804: LD_ADDR_VAR 0 3
54808: PUSH
54809: LD_INT 25
54811: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
54812: LD_VAR 0 1
54816: PPUSH
54817: CALL_OW 250
54821: PPUSH
54822: LD_VAR 0 1
54826: PPUSH
54827: CALL_OW 251
54831: PPUSH
54832: LD_VAR 0 3
54836: PPUSH
54837: CALL_OW 495
// end ;
54841: LD_VAR 0 2
54845: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
54846: LD_INT 0
54848: PPUSH
54849: PPUSH
54850: PPUSH
54851: PPUSH
54852: PPUSH
54853: PPUSH
54854: PPUSH
54855: PPUSH
54856: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
54857: LD_VAR 0 1
54861: PPUSH
54862: CALL_OW 302
54866: NOT
54867: IFTRUE 54886
54869: PUSH
54870: LD_VAR 0 2
54874: PPUSH
54875: LD_VAR 0 3
54879: PPUSH
54880: CALL_OW 488
54884: NOT
54885: OR
54886: IFTRUE 54895
54888: PUSH
54889: LD_VAR 0 4
54893: NOT
54894: OR
54895: IFFALSE 54899
// exit ;
54897: GO 55241
// list := [ ] ;
54899: LD_ADDR_VAR 0 13
54903: PUSH
54904: EMPTY
54905: ST_TO_ADDR
// if x - r < 0 then
54906: LD_VAR 0 2
54910: PUSH
54911: LD_VAR 0 4
54915: MINUS
54916: PUSH
54917: LD_INT 0
54919: LESS
54920: IFFALSE 54932
// min_x := 0 else
54922: LD_ADDR_VAR 0 7
54926: PUSH
54927: LD_INT 0
54929: ST_TO_ADDR
54930: GO 54948
// min_x := x - r ;
54932: LD_ADDR_VAR 0 7
54936: PUSH
54937: LD_VAR 0 2
54941: PUSH
54942: LD_VAR 0 4
54946: MINUS
54947: ST_TO_ADDR
// if y - r < 0 then
54948: LD_VAR 0 3
54952: PUSH
54953: LD_VAR 0 4
54957: MINUS
54958: PUSH
54959: LD_INT 0
54961: LESS
54962: IFFALSE 54974
// min_y := 0 else
54964: LD_ADDR_VAR 0 8
54968: PUSH
54969: LD_INT 0
54971: ST_TO_ADDR
54972: GO 54990
// min_y := y - r ;
54974: LD_ADDR_VAR 0 8
54978: PUSH
54979: LD_VAR 0 3
54983: PUSH
54984: LD_VAR 0 4
54988: MINUS
54989: ST_TO_ADDR
// max_x := x + r ;
54990: LD_ADDR_VAR 0 9
54994: PUSH
54995: LD_VAR 0 2
54999: PUSH
55000: LD_VAR 0 4
55004: PLUS
55005: ST_TO_ADDR
// max_y := y + r ;
55006: LD_ADDR_VAR 0 10
55010: PUSH
55011: LD_VAR 0 3
55015: PUSH
55016: LD_VAR 0 4
55020: PLUS
55021: ST_TO_ADDR
// for _x = min_x to max_x do
55022: LD_ADDR_VAR 0 11
55026: PUSH
55027: DOUBLE
55028: LD_VAR 0 7
55032: DEC
55033: ST_TO_ADDR
55034: LD_VAR 0 9
55038: PUSH
55039: FOR_TO
55040: IFFALSE 55159
// for _y = min_y to max_y do
55042: LD_ADDR_VAR 0 12
55046: PUSH
55047: DOUBLE
55048: LD_VAR 0 8
55052: DEC
55053: ST_TO_ADDR
55054: LD_VAR 0 10
55058: PUSH
55059: FOR_TO
55060: IFFALSE 55155
// begin if not ValidHex ( _x , _y ) then
55062: LD_VAR 0 11
55066: PPUSH
55067: LD_VAR 0 12
55071: PPUSH
55072: CALL_OW 488
55076: NOT
55077: IFFALSE 55081
// continue ;
55079: GO 55059
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
55081: LD_VAR 0 11
55085: PPUSH
55086: LD_VAR 0 12
55090: PPUSH
55091: CALL_OW 351
55095: IFFALSE 55113
55097: PUSH
55098: LD_VAR 0 11
55102: PPUSH
55103: LD_VAR 0 12
55107: PPUSH
55108: CALL_OW 554
55112: AND
55113: IFFALSE 55153
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
55115: LD_ADDR_VAR 0 13
55119: PUSH
55120: LD_VAR 0 13
55124: PPUSH
55125: LD_VAR 0 13
55129: PUSH
55130: LD_INT 1
55132: PLUS
55133: PPUSH
55134: LD_VAR 0 11
55138: PUSH
55139: LD_VAR 0 12
55143: PUSH
55144: EMPTY
55145: LIST
55146: LIST
55147: PPUSH
55148: CALL_OW 2
55152: ST_TO_ADDR
// end ;
55153: GO 55059
55155: POP
55156: POP
55157: GO 55039
55159: POP
55160: POP
// if not list then
55161: LD_VAR 0 13
55165: NOT
55166: IFFALSE 55170
// exit ;
55168: GO 55241
// for i in list do
55170: LD_ADDR_VAR 0 6
55174: PUSH
55175: LD_VAR 0 13
55179: PUSH
55180: FOR_IN
55181: IFFALSE 55239
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
55183: LD_VAR 0 1
55187: PPUSH
55188: LD_STRING M
55190: PUSH
55191: LD_VAR 0 6
55195: PUSH
55196: LD_INT 1
55198: ARRAY
55199: PUSH
55200: LD_VAR 0 6
55204: PUSH
55205: LD_INT 2
55207: ARRAY
55208: PUSH
55209: LD_INT 0
55211: PUSH
55212: LD_INT 0
55214: PUSH
55215: LD_INT 0
55217: PUSH
55218: LD_INT 0
55220: PUSH
55221: EMPTY
55222: LIST
55223: LIST
55224: LIST
55225: LIST
55226: LIST
55227: LIST
55228: LIST
55229: PUSH
55230: EMPTY
55231: LIST
55232: PPUSH
55233: CALL_OW 447
55237: GO 55180
55239: POP
55240: POP
// end ;
55241: LD_VAR 0 5
55245: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
55246: LD_INT 0
55248: PPUSH
55249: PPUSH
55250: PPUSH
55251: PPUSH
55252: PPUSH
55253: PPUSH
55254: PPUSH
55255: PPUSH
55256: PPUSH
55257: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
55258: LD_VAR 0 1
55262: PPUSH
55263: CALL_OW 302
55267: NOT
55268: IFTRUE 55287
55270: PUSH
55271: LD_VAR 0 2
55275: PPUSH
55276: LD_VAR 0 3
55280: PPUSH
55281: CALL_OW 488
55285: NOT
55286: OR
55287: IFTRUE 55296
55289: PUSH
55290: LD_VAR 0 4
55294: NOT
55295: OR
55296: IFFALSE 55300
// exit ;
55298: GO 55817
// list := [ ] ;
55300: LD_ADDR_VAR 0 13
55304: PUSH
55305: EMPTY
55306: ST_TO_ADDR
// if x - r < 0 then
55307: LD_VAR 0 2
55311: PUSH
55312: LD_VAR 0 4
55316: MINUS
55317: PUSH
55318: LD_INT 0
55320: LESS
55321: IFFALSE 55333
// min_x := 0 else
55323: LD_ADDR_VAR 0 7
55327: PUSH
55328: LD_INT 0
55330: ST_TO_ADDR
55331: GO 55349
// min_x := x - r ;
55333: LD_ADDR_VAR 0 7
55337: PUSH
55338: LD_VAR 0 2
55342: PUSH
55343: LD_VAR 0 4
55347: MINUS
55348: ST_TO_ADDR
// if y - r < 0 then
55349: LD_VAR 0 3
55353: PUSH
55354: LD_VAR 0 4
55358: MINUS
55359: PUSH
55360: LD_INT 0
55362: LESS
55363: IFFALSE 55375
// min_y := 0 else
55365: LD_ADDR_VAR 0 8
55369: PUSH
55370: LD_INT 0
55372: ST_TO_ADDR
55373: GO 55391
// min_y := y - r ;
55375: LD_ADDR_VAR 0 8
55379: PUSH
55380: LD_VAR 0 3
55384: PUSH
55385: LD_VAR 0 4
55389: MINUS
55390: ST_TO_ADDR
// max_x := x + r ;
55391: LD_ADDR_VAR 0 9
55395: PUSH
55396: LD_VAR 0 2
55400: PUSH
55401: LD_VAR 0 4
55405: PLUS
55406: ST_TO_ADDR
// max_y := y + r ;
55407: LD_ADDR_VAR 0 10
55411: PUSH
55412: LD_VAR 0 3
55416: PUSH
55417: LD_VAR 0 4
55421: PLUS
55422: ST_TO_ADDR
// for _x = min_x to max_x do
55423: LD_ADDR_VAR 0 11
55427: PUSH
55428: DOUBLE
55429: LD_VAR 0 7
55433: DEC
55434: ST_TO_ADDR
55435: LD_VAR 0 9
55439: PUSH
55440: FOR_TO
55441: IFFALSE 55560
// for _y = min_y to max_y do
55443: LD_ADDR_VAR 0 12
55447: PUSH
55448: DOUBLE
55449: LD_VAR 0 8
55453: DEC
55454: ST_TO_ADDR
55455: LD_VAR 0 10
55459: PUSH
55460: FOR_TO
55461: IFFALSE 55556
// begin if not ValidHex ( _x , _y ) then
55463: LD_VAR 0 11
55467: PPUSH
55468: LD_VAR 0 12
55472: PPUSH
55473: CALL_OW 488
55477: NOT
55478: IFFALSE 55482
// continue ;
55480: GO 55460
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
55482: LD_VAR 0 11
55486: PPUSH
55487: LD_VAR 0 12
55491: PPUSH
55492: CALL_OW 351
55496: IFFALSE 55514
55498: PUSH
55499: LD_VAR 0 11
55503: PPUSH
55504: LD_VAR 0 12
55508: PPUSH
55509: CALL_OW 554
55513: AND
55514: IFFALSE 55554
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
55516: LD_ADDR_VAR 0 13
55520: PUSH
55521: LD_VAR 0 13
55525: PPUSH
55526: LD_VAR 0 13
55530: PUSH
55531: LD_INT 1
55533: PLUS
55534: PPUSH
55535: LD_VAR 0 11
55539: PUSH
55540: LD_VAR 0 12
55544: PUSH
55545: EMPTY
55546: LIST
55547: LIST
55548: PPUSH
55549: CALL_OW 2
55553: ST_TO_ADDR
// end ;
55554: GO 55460
55556: POP
55557: POP
55558: GO 55440
55560: POP
55561: POP
// if not list then
55562: LD_VAR 0 13
55566: NOT
55567: IFFALSE 55571
// exit ;
55569: GO 55817
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
55571: LD_ADDR_VAR 0 13
55575: PUSH
55576: LD_VAR 0 1
55580: PPUSH
55581: LD_VAR 0 13
55585: PPUSH
55586: LD_INT 1
55588: PPUSH
55589: LD_INT 1
55591: PPUSH
55592: CALL 15584 0 4
55596: ST_TO_ADDR
// ComStop ( flame ) ;
55597: LD_VAR 0 1
55601: PPUSH
55602: CALL_OW 141
// for i in list do
55606: LD_ADDR_VAR 0 6
55610: PUSH
55611: LD_VAR 0 13
55615: PUSH
55616: FOR_IN
55617: IFFALSE 55648
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
55619: LD_VAR 0 1
55623: PPUSH
55624: LD_VAR 0 6
55628: PUSH
55629: LD_INT 1
55631: ARRAY
55632: PPUSH
55633: LD_VAR 0 6
55637: PUSH
55638: LD_INT 2
55640: ARRAY
55641: PPUSH
55642: CALL_OW 176
55646: GO 55616
55648: POP
55649: POP
// repeat wait ( 0 0$1 ) ;
55650: LD_INT 35
55652: PPUSH
55653: CALL_OW 67
// task := GetTaskList ( flame ) ;
55657: LD_ADDR_VAR 0 14
55661: PUSH
55662: LD_VAR 0 1
55666: PPUSH
55667: CALL_OW 437
55671: ST_TO_ADDR
// if not task then
55672: LD_VAR 0 14
55676: NOT
55677: IFFALSE 55681
// exit ;
55679: GO 55817
// if task [ 1 ] [ 1 ] <> | then
55681: LD_VAR 0 14
55685: PUSH
55686: LD_INT 1
55688: ARRAY
55689: PUSH
55690: LD_INT 1
55692: ARRAY
55693: PUSH
55694: LD_STRING |
55696: NONEQUAL
55697: IFFALSE 55701
// exit ;
55699: GO 55817
// _x := task [ 1 ] [ 2 ] ;
55701: LD_ADDR_VAR 0 11
55705: PUSH
55706: LD_VAR 0 14
55710: PUSH
55711: LD_INT 1
55713: ARRAY
55714: PUSH
55715: LD_INT 2
55717: ARRAY
55718: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
55719: LD_ADDR_VAR 0 12
55723: PUSH
55724: LD_VAR 0 14
55728: PUSH
55729: LD_INT 1
55731: ARRAY
55732: PUSH
55733: LD_INT 3
55735: ARRAY
55736: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
55737: LD_VAR 0 11
55741: PPUSH
55742: LD_VAR 0 12
55746: PPUSH
55747: CALL_OW 351
55751: NOT
55752: IFTRUE 55771
55754: PUSH
55755: LD_VAR 0 11
55759: PPUSH
55760: LD_VAR 0 12
55764: PPUSH
55765: CALL_OW 554
55769: NOT
55770: OR
55771: IFFALSE 55805
// begin task := Delete ( task , 1 ) ;
55773: LD_ADDR_VAR 0 14
55777: PUSH
55778: LD_VAR 0 14
55782: PPUSH
55783: LD_INT 1
55785: PPUSH
55786: CALL_OW 3
55790: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
55791: LD_VAR 0 1
55795: PPUSH
55796: LD_VAR 0 14
55800: PPUSH
55801: CALL_OW 446
// end ; until not HasTask ( flame ) ;
55805: LD_VAR 0 1
55809: PPUSH
55810: CALL_OW 314
55814: NOT
55815: IFFALSE 55650
// end ;
55817: LD_VAR 0 5
55821: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
55822: LD_EXP 48
55826: NOT
55827: IFFALSE 55877
55829: GO 55831
55831: DISABLE
// begin initHack := true ;
55832: LD_ADDR_EXP 48
55836: PUSH
55837: LD_INT 1
55839: ST_TO_ADDR
// hackTanks := [ ] ;
55840: LD_ADDR_EXP 49
55844: PUSH
55845: EMPTY
55846: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
55847: LD_ADDR_EXP 50
55851: PUSH
55852: EMPTY
55853: ST_TO_ADDR
// hackLimit := 3 ;
55854: LD_ADDR_EXP 51
55858: PUSH
55859: LD_INT 3
55861: ST_TO_ADDR
// hackDist := 12 ;
55862: LD_ADDR_EXP 52
55866: PUSH
55867: LD_INT 12
55869: ST_TO_ADDR
// hackCounter := [ ] ;
55870: LD_ADDR_EXP 53
55874: PUSH
55875: EMPTY
55876: ST_TO_ADDR
// end ;
55877: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
55878: LD_EXP 48
55882: IFFALSE 55900
55884: PUSH
55885: LD_INT 34
55887: PUSH
55888: LD_INT 99
55890: PUSH
55891: EMPTY
55892: LIST
55893: LIST
55894: PPUSH
55895: CALL_OW 69
55899: AND
55900: IFFALSE 56153
55902: GO 55904
55904: DISABLE
55905: LD_INT 0
55907: PPUSH
55908: PPUSH
// begin enable ;
55909: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
55910: LD_ADDR_VAR 0 1
55914: PUSH
55915: LD_INT 34
55917: PUSH
55918: LD_INT 99
55920: PUSH
55921: EMPTY
55922: LIST
55923: LIST
55924: PPUSH
55925: CALL_OW 69
55929: PUSH
55930: FOR_IN
55931: IFFALSE 56151
// begin if not i in hackTanks then
55933: LD_VAR 0 1
55937: PUSH
55938: LD_EXP 49
55942: IN
55943: NOT
55944: IFFALSE 56027
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
55946: LD_ADDR_EXP 49
55950: PUSH
55951: LD_EXP 49
55955: PPUSH
55956: LD_EXP 49
55960: PUSH
55961: LD_INT 1
55963: PLUS
55964: PPUSH
55965: LD_VAR 0 1
55969: PPUSH
55970: CALL_OW 1
55974: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
55975: LD_ADDR_EXP 50
55979: PUSH
55980: LD_EXP 50
55984: PPUSH
55985: LD_EXP 50
55989: PUSH
55990: LD_INT 1
55992: PLUS
55993: PPUSH
55994: EMPTY
55995: PPUSH
55996: CALL_OW 1
56000: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
56001: LD_ADDR_EXP 53
56005: PUSH
56006: LD_EXP 53
56010: PPUSH
56011: LD_EXP 53
56015: PUSH
56016: LD_INT 1
56018: PLUS
56019: PPUSH
56020: EMPTY
56021: PPUSH
56022: CALL_OW 1
56026: ST_TO_ADDR
// end ; if not IsOk ( i ) then
56027: LD_VAR 0 1
56031: PPUSH
56032: CALL_OW 302
56036: NOT
56037: IFFALSE 56050
// begin HackUnlinkAll ( i ) ;
56039: LD_VAR 0 1
56043: PPUSH
56044: CALL 56156 0 1
// continue ;
56048: GO 55930
// end ; HackCheckCapturedStatus ( i ) ;
56050: LD_VAR 0 1
56054: PPUSH
56055: CALL 56601 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
56059: LD_ADDR_VAR 0 2
56063: PUSH
56064: LD_INT 81
56066: PUSH
56067: LD_VAR 0 1
56071: PPUSH
56072: CALL_OW 255
56076: PUSH
56077: EMPTY
56078: LIST
56079: LIST
56080: PUSH
56081: LD_INT 33
56083: PUSH
56084: LD_INT 3
56086: PUSH
56087: EMPTY
56088: LIST
56089: LIST
56090: PUSH
56091: LD_INT 91
56093: PUSH
56094: LD_VAR 0 1
56098: PUSH
56099: LD_EXP 52
56103: PUSH
56104: EMPTY
56105: LIST
56106: LIST
56107: LIST
56108: PUSH
56109: LD_INT 50
56111: PUSH
56112: EMPTY
56113: LIST
56114: PUSH
56115: EMPTY
56116: LIST
56117: LIST
56118: LIST
56119: LIST
56120: PPUSH
56121: CALL_OW 69
56125: ST_TO_ADDR
// if not tmp then
56126: LD_VAR 0 2
56130: NOT
56131: IFFALSE 56135
// continue ;
56133: GO 55930
// HackLink ( i , tmp ) ;
56135: LD_VAR 0 1
56139: PPUSH
56140: LD_VAR 0 2
56144: PPUSH
56145: CALL 56292 0 2
// end ;
56149: GO 55930
56151: POP
56152: POP
// end ;
56153: PPOPN 2
56155: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
56156: LD_INT 0
56158: PPUSH
56159: PPUSH
56160: PPUSH
// if not hack in hackTanks then
56161: LD_VAR 0 1
56165: PUSH
56166: LD_EXP 49
56170: IN
56171: NOT
56172: IFFALSE 56176
// exit ;
56174: GO 56287
// index := GetElementIndex ( hackTanks , hack ) ;
56176: LD_ADDR_VAR 0 4
56180: PUSH
56181: LD_EXP 49
56185: PPUSH
56186: LD_VAR 0 1
56190: PPUSH
56191: CALL 14879 0 2
56195: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
56196: LD_EXP 50
56200: PUSH
56201: LD_VAR 0 4
56205: ARRAY
56206: IFFALSE 56287
// begin for i in hackTanksCaptured [ index ] do
56208: LD_ADDR_VAR 0 3
56212: PUSH
56213: LD_EXP 50
56217: PUSH
56218: LD_VAR 0 4
56222: ARRAY
56223: PUSH
56224: FOR_IN
56225: IFFALSE 56251
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
56227: LD_VAR 0 3
56231: PUSH
56232: LD_INT 1
56234: ARRAY
56235: PPUSH
56236: LD_VAR 0 3
56240: PUSH
56241: LD_INT 2
56243: ARRAY
56244: PPUSH
56245: CALL_OW 235
56249: GO 56224
56251: POP
56252: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
56253: LD_ADDR_EXP 50
56257: PUSH
56258: LD_EXP 50
56262: PPUSH
56263: LD_VAR 0 4
56267: PPUSH
56268: EMPTY
56269: PPUSH
56270: CALL_OW 1
56274: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
56275: LD_VAR 0 1
56279: PPUSH
56280: LD_INT 0
56282: PPUSH
56283: CALL_OW 505
// end ; end ;
56287: LD_VAR 0 2
56291: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
56292: LD_INT 0
56294: PPUSH
56295: PPUSH
56296: PPUSH
// if not hack in hackTanks or not vehicles then
56297: LD_VAR 0 1
56301: PUSH
56302: LD_EXP 49
56306: IN
56307: NOT
56308: IFTRUE 56317
56310: PUSH
56311: LD_VAR 0 2
56315: NOT
56316: OR
56317: IFFALSE 56321
// exit ;
56319: GO 56596
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
56321: LD_ADDR_VAR 0 2
56325: PUSH
56326: LD_VAR 0 1
56330: PPUSH
56331: LD_VAR 0 2
56335: PPUSH
56336: LD_INT 1
56338: PPUSH
56339: LD_INT 1
56341: PPUSH
56342: CALL 15531 0 4
56346: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
56347: LD_ADDR_VAR 0 5
56351: PUSH
56352: LD_EXP 49
56356: PPUSH
56357: LD_VAR 0 1
56361: PPUSH
56362: CALL 14879 0 2
56366: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
56367: LD_EXP 50
56371: PUSH
56372: LD_VAR 0 5
56376: ARRAY
56377: PUSH
56378: LD_EXP 51
56382: LESS
56383: IFFALSE 56572
// begin for i := 1 to vehicles do
56385: LD_ADDR_VAR 0 4
56389: PUSH
56390: DOUBLE
56391: LD_INT 1
56393: DEC
56394: ST_TO_ADDR
56395: LD_VAR 0 2
56399: PUSH
56400: FOR_TO
56401: IFFALSE 56570
// begin if hackTanksCaptured [ index ] = hackLimit then
56403: LD_EXP 50
56407: PUSH
56408: LD_VAR 0 5
56412: ARRAY
56413: PUSH
56414: LD_EXP 51
56418: EQUAL
56419: IFFALSE 56423
// break ;
56421: GO 56570
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
56423: LD_ADDR_EXP 53
56427: PUSH
56428: LD_EXP 53
56432: PPUSH
56433: LD_VAR 0 5
56437: PPUSH
56438: LD_EXP 53
56442: PUSH
56443: LD_VAR 0 5
56447: ARRAY
56448: PUSH
56449: LD_INT 1
56451: PLUS
56452: PPUSH
56453: CALL_OW 1
56457: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
56458: LD_ADDR_EXP 50
56462: PUSH
56463: LD_EXP 50
56467: PPUSH
56468: LD_VAR 0 5
56472: PUSH
56473: LD_EXP 50
56477: PUSH
56478: LD_VAR 0 5
56482: ARRAY
56483: PUSH
56484: LD_INT 1
56486: PLUS
56487: PUSH
56488: EMPTY
56489: LIST
56490: LIST
56491: PPUSH
56492: LD_VAR 0 2
56496: PUSH
56497: LD_VAR 0 4
56501: ARRAY
56502: PUSH
56503: LD_VAR 0 2
56507: PUSH
56508: LD_VAR 0 4
56512: ARRAY
56513: PPUSH
56514: CALL_OW 255
56518: PUSH
56519: EMPTY
56520: LIST
56521: LIST
56522: PPUSH
56523: CALL 15096 0 3
56527: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
56528: LD_VAR 0 2
56532: PUSH
56533: LD_VAR 0 4
56537: ARRAY
56538: PPUSH
56539: LD_VAR 0 1
56543: PPUSH
56544: CALL_OW 255
56548: PPUSH
56549: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
56553: LD_VAR 0 2
56557: PUSH
56558: LD_VAR 0 4
56562: ARRAY
56563: PPUSH
56564: CALL_OW 141
// end ;
56568: GO 56400
56570: POP
56571: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
56572: LD_VAR 0 1
56576: PPUSH
56577: LD_EXP 50
56581: PUSH
56582: LD_VAR 0 5
56586: ARRAY
56587: PUSH
56588: LD_INT 0
56590: PLUS
56591: PPUSH
56592: CALL_OW 505
// end ;
56596: LD_VAR 0 3
56600: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
56601: LD_INT 0
56603: PPUSH
56604: PPUSH
56605: PPUSH
56606: PPUSH
// if not hack in hackTanks then
56607: LD_VAR 0 1
56611: PUSH
56612: LD_EXP 49
56616: IN
56617: NOT
56618: IFFALSE 56622
// exit ;
56620: GO 56866
// index := GetElementIndex ( hackTanks , hack ) ;
56622: LD_ADDR_VAR 0 4
56626: PUSH
56627: LD_EXP 49
56631: PPUSH
56632: LD_VAR 0 1
56636: PPUSH
56637: CALL 14879 0 2
56641: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
56642: LD_ADDR_VAR 0 3
56646: PUSH
56647: DOUBLE
56648: LD_EXP 50
56652: PUSH
56653: LD_VAR 0 4
56657: ARRAY
56658: INC
56659: ST_TO_ADDR
56660: LD_INT 1
56662: PUSH
56663: FOR_DOWNTO
56664: IFFALSE 56840
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
56666: LD_ADDR_VAR 0 5
56670: PUSH
56671: LD_EXP 50
56675: PUSH
56676: LD_VAR 0 4
56680: ARRAY
56681: PUSH
56682: LD_VAR 0 3
56686: ARRAY
56687: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
56688: LD_VAR 0 5
56692: PUSH
56693: LD_INT 1
56695: ARRAY
56696: PPUSH
56697: CALL_OW 302
56701: NOT
56702: IFTRUE 56730
56704: PUSH
56705: LD_VAR 0 5
56709: PUSH
56710: LD_INT 1
56712: ARRAY
56713: PPUSH
56714: CALL_OW 255
56718: PUSH
56719: LD_VAR 0 1
56723: PPUSH
56724: CALL_OW 255
56728: NONEQUAL
56729: OR
56730: IFFALSE 56838
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
56732: LD_VAR 0 5
56736: PUSH
56737: LD_INT 1
56739: ARRAY
56740: PPUSH
56741: CALL_OW 305
56745: IFFALSE 56773
56747: PUSH
56748: LD_VAR 0 5
56752: PUSH
56753: LD_INT 1
56755: ARRAY
56756: PPUSH
56757: CALL_OW 255
56761: PUSH
56762: LD_VAR 0 1
56766: PPUSH
56767: CALL_OW 255
56771: EQUAL
56772: AND
56773: IFFALSE 56797
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
56775: LD_VAR 0 5
56779: PUSH
56780: LD_INT 1
56782: ARRAY
56783: PPUSH
56784: LD_VAR 0 5
56788: PUSH
56789: LD_INT 2
56791: ARRAY
56792: PPUSH
56793: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
56797: LD_ADDR_EXP 50
56801: PUSH
56802: LD_EXP 50
56806: PPUSH
56807: LD_VAR 0 4
56811: PPUSH
56812: LD_EXP 50
56816: PUSH
56817: LD_VAR 0 4
56821: ARRAY
56822: PPUSH
56823: LD_VAR 0 3
56827: PPUSH
56828: CALL_OW 3
56832: PPUSH
56833: CALL_OW 1
56837: ST_TO_ADDR
// end ; end ;
56838: GO 56663
56840: POP
56841: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
56842: LD_VAR 0 1
56846: PPUSH
56847: LD_EXP 50
56851: PUSH
56852: LD_VAR 0 4
56856: ARRAY
56857: PUSH
56858: LD_INT 0
56860: PLUS
56861: PPUSH
56862: CALL_OW 505
// end ;
56866: LD_VAR 0 2
56870: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
56871: LD_INT 0
56873: PPUSH
56874: PPUSH
56875: PPUSH
56876: PPUSH
// if not hack in hackTanks then
56877: LD_VAR 0 1
56881: PUSH
56882: LD_EXP 49
56886: IN
56887: NOT
56888: IFFALSE 56892
// exit ;
56890: GO 56977
// index := GetElementIndex ( hackTanks , hack ) ;
56892: LD_ADDR_VAR 0 5
56896: PUSH
56897: LD_EXP 49
56901: PPUSH
56902: LD_VAR 0 1
56906: PPUSH
56907: CALL 14879 0 2
56911: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
56912: LD_ADDR_VAR 0 4
56916: PUSH
56917: DOUBLE
56918: LD_INT 1
56920: DEC
56921: ST_TO_ADDR
56922: LD_EXP 50
56926: PUSH
56927: LD_VAR 0 5
56931: ARRAY
56932: PUSH
56933: FOR_TO
56934: IFFALSE 56975
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
56936: LD_EXP 50
56940: PUSH
56941: LD_VAR 0 5
56945: ARRAY
56946: PUSH
56947: LD_VAR 0 4
56951: ARRAY
56952: PUSH
56953: LD_INT 1
56955: ARRAY
56956: PUSH
56957: LD_VAR 0 2
56961: EQUAL
56962: IFFALSE 56973
// KillUnit ( vehicle ) ;
56964: LD_VAR 0 2
56968: PPUSH
56969: CALL_OW 66
56973: GO 56933
56975: POP
56976: POP
// end ;
56977: LD_VAR 0 3
56981: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
56982: LD_EXP 54
56986: NOT
56987: IFFALSE 57022
56989: GO 56991
56991: DISABLE
// begin initMiner := true ;
56992: LD_ADDR_EXP 54
56996: PUSH
56997: LD_INT 1
56999: ST_TO_ADDR
// minersList := [ ] ;
57000: LD_ADDR_EXP 55
57004: PUSH
57005: EMPTY
57006: ST_TO_ADDR
// minerMinesList := [ ] ;
57007: LD_ADDR_EXP 56
57011: PUSH
57012: EMPTY
57013: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
57014: LD_ADDR_EXP 57
57018: PUSH
57019: LD_INT 5
57021: ST_TO_ADDR
// end ;
57022: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
57023: LD_EXP 54
57027: IFFALSE 57045
57029: PUSH
57030: LD_INT 34
57032: PUSH
57033: LD_INT 81
57035: PUSH
57036: EMPTY
57037: LIST
57038: LIST
57039: PPUSH
57040: CALL_OW 69
57044: AND
57045: IFFALSE 57508
57047: GO 57049
57049: DISABLE
57050: LD_INT 0
57052: PPUSH
57053: PPUSH
57054: PPUSH
57055: PPUSH
// begin enable ;
57056: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
57057: LD_ADDR_VAR 0 1
57061: PUSH
57062: LD_INT 34
57064: PUSH
57065: LD_INT 81
57067: PUSH
57068: EMPTY
57069: LIST
57070: LIST
57071: PPUSH
57072: CALL_OW 69
57076: PUSH
57077: FOR_IN
57078: IFFALSE 57150
// begin if not i in minersList then
57080: LD_VAR 0 1
57084: PUSH
57085: LD_EXP 55
57089: IN
57090: NOT
57091: IFFALSE 57148
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
57093: LD_ADDR_EXP 55
57097: PUSH
57098: LD_EXP 55
57102: PPUSH
57103: LD_EXP 55
57107: PUSH
57108: LD_INT 1
57110: PLUS
57111: PPUSH
57112: LD_VAR 0 1
57116: PPUSH
57117: CALL_OW 1
57121: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
57122: LD_ADDR_EXP 56
57126: PUSH
57127: LD_EXP 56
57131: PPUSH
57132: LD_EXP 56
57136: PUSH
57137: LD_INT 1
57139: PLUS
57140: PPUSH
57141: EMPTY
57142: PPUSH
57143: CALL_OW 1
57147: ST_TO_ADDR
// end end ;
57148: GO 57077
57150: POP
57151: POP
// for i := minerMinesList downto 1 do
57152: LD_ADDR_VAR 0 1
57156: PUSH
57157: DOUBLE
57158: LD_EXP 56
57162: INC
57163: ST_TO_ADDR
57164: LD_INT 1
57166: PUSH
57167: FOR_DOWNTO
57168: IFFALSE 57506
// begin if IsLive ( minersList [ i ] ) then
57170: LD_EXP 55
57174: PUSH
57175: LD_VAR 0 1
57179: ARRAY
57180: PPUSH
57181: CALL_OW 300
57185: IFFALSE 57213
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
57187: LD_EXP 55
57191: PUSH
57192: LD_VAR 0 1
57196: ARRAY
57197: PPUSH
57198: LD_EXP 56
57202: PUSH
57203: LD_VAR 0 1
57207: ARRAY
57208: PPUSH
57209: CALL_OW 505
// if not minerMinesList [ i ] then
57213: LD_EXP 56
57217: PUSH
57218: LD_VAR 0 1
57222: ARRAY
57223: NOT
57224: IFFALSE 57228
// continue ;
57226: GO 57167
// for j := minerMinesList [ i ] downto 1 do
57228: LD_ADDR_VAR 0 2
57232: PUSH
57233: DOUBLE
57234: LD_EXP 56
57238: PUSH
57239: LD_VAR 0 1
57243: ARRAY
57244: INC
57245: ST_TO_ADDR
57246: LD_INT 1
57248: PUSH
57249: FOR_DOWNTO
57250: IFFALSE 57502
// begin side := GetSide ( minersList [ i ] ) ;
57252: LD_ADDR_VAR 0 3
57256: PUSH
57257: LD_EXP 55
57261: PUSH
57262: LD_VAR 0 1
57266: ARRAY
57267: PPUSH
57268: CALL_OW 255
57272: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
57273: LD_ADDR_VAR 0 4
57277: PUSH
57278: LD_EXP 56
57282: PUSH
57283: LD_VAR 0 1
57287: ARRAY
57288: PUSH
57289: LD_VAR 0 2
57293: ARRAY
57294: PUSH
57295: LD_INT 1
57297: ARRAY
57298: PPUSH
57299: LD_EXP 56
57303: PUSH
57304: LD_VAR 0 1
57308: ARRAY
57309: PUSH
57310: LD_VAR 0 2
57314: ARRAY
57315: PUSH
57316: LD_INT 2
57318: ARRAY
57319: PPUSH
57320: CALL_OW 428
57324: ST_TO_ADDR
// if not tmp then
57325: LD_VAR 0 4
57329: NOT
57330: IFFALSE 57334
// continue ;
57332: GO 57249
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
57334: LD_VAR 0 4
57338: PUSH
57339: LD_INT 81
57341: PUSH
57342: LD_VAR 0 3
57346: PUSH
57347: EMPTY
57348: LIST
57349: LIST
57350: PPUSH
57351: CALL_OW 69
57355: IN
57356: IFFALSE 57406
57358: PUSH
57359: LD_EXP 56
57363: PUSH
57364: LD_VAR 0 1
57368: ARRAY
57369: PUSH
57370: LD_VAR 0 2
57374: ARRAY
57375: PUSH
57376: LD_INT 1
57378: ARRAY
57379: PPUSH
57380: LD_EXP 56
57384: PUSH
57385: LD_VAR 0 1
57389: ARRAY
57390: PUSH
57391: LD_VAR 0 2
57395: ARRAY
57396: PUSH
57397: LD_INT 2
57399: ARRAY
57400: PPUSH
57401: CALL_OW 458
57405: AND
57406: IFFALSE 57500
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
57408: LD_EXP 56
57412: PUSH
57413: LD_VAR 0 1
57417: ARRAY
57418: PUSH
57419: LD_VAR 0 2
57423: ARRAY
57424: PUSH
57425: LD_INT 1
57427: ARRAY
57428: PPUSH
57429: LD_EXP 56
57433: PUSH
57434: LD_VAR 0 1
57438: ARRAY
57439: PUSH
57440: LD_VAR 0 2
57444: ARRAY
57445: PUSH
57446: LD_INT 2
57448: ARRAY
57449: PPUSH
57450: LD_VAR 0 3
57454: PPUSH
57455: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
57459: LD_ADDR_EXP 56
57463: PUSH
57464: LD_EXP 56
57468: PPUSH
57469: LD_VAR 0 1
57473: PPUSH
57474: LD_EXP 56
57478: PUSH
57479: LD_VAR 0 1
57483: ARRAY
57484: PPUSH
57485: LD_VAR 0 2
57489: PPUSH
57490: CALL_OW 3
57494: PPUSH
57495: CALL_OW 1
57499: ST_TO_ADDR
// end ; end ;
57500: GO 57249
57502: POP
57503: POP
// end ;
57504: GO 57167
57506: POP
57507: POP
// end ;
57508: PPOPN 4
57510: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
57511: LD_INT 0
57513: PPUSH
57514: PPUSH
// result := false ;
57515: LD_ADDR_VAR 0 4
57519: PUSH
57520: LD_INT 0
57522: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
57523: LD_VAR 0 1
57527: PPUSH
57528: CALL_OW 264
57532: PUSH
57533: LD_INT 81
57535: EQUAL
57536: NOT
57537: IFFALSE 57541
// exit ;
57539: GO 57785
// index := GetElementIndex ( minersList , unit ) ;
57541: LD_ADDR_VAR 0 5
57545: PUSH
57546: LD_EXP 55
57550: PPUSH
57551: LD_VAR 0 1
57555: PPUSH
57556: CALL 14879 0 2
57560: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
57561: LD_EXP 56
57565: PUSH
57566: LD_VAR 0 5
57570: ARRAY
57571: PUSH
57572: LD_EXP 57
57576: GREATEREQUAL
57577: IFFALSE 57581
// exit ;
57579: GO 57785
// ComMoveXY ( unit , x , y ) ;
57581: LD_VAR 0 1
57585: PPUSH
57586: LD_VAR 0 2
57590: PPUSH
57591: LD_VAR 0 3
57595: PPUSH
57596: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
57600: LD_INT 35
57602: PPUSH
57603: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
57607: LD_VAR 0 1
57611: PPUSH
57612: LD_VAR 0 2
57616: PPUSH
57617: LD_VAR 0 3
57621: PPUSH
57622: CALL 46925 0 3
57626: NOT
57627: IFFALSE 57640
57629: PUSH
57630: LD_VAR 0 1
57634: PPUSH
57635: CALL_OW 314
57639: AND
57640: IFFALSE 57644
// exit ;
57642: GO 57785
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
57644: LD_VAR 0 2
57648: PPUSH
57649: LD_VAR 0 3
57653: PPUSH
57654: CALL_OW 428
57658: PUSH
57659: LD_VAR 0 1
57663: EQUAL
57664: IFFALSE 57678
57666: PUSH
57667: LD_VAR 0 1
57671: PPUSH
57672: CALL_OW 314
57676: NOT
57677: AND
57678: IFFALSE 57600
// PlaySoundXY ( x , y , PlantMine ) ;
57680: LD_VAR 0 2
57684: PPUSH
57685: LD_VAR 0 3
57689: PPUSH
57690: LD_STRING PlantMine
57692: PPUSH
57693: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
57697: LD_VAR 0 2
57701: PPUSH
57702: LD_VAR 0 3
57706: PPUSH
57707: LD_VAR 0 1
57711: PPUSH
57712: CALL_OW 255
57716: PPUSH
57717: LD_INT 0
57719: PPUSH
57720: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
57724: LD_ADDR_EXP 56
57728: PUSH
57729: LD_EXP 56
57733: PPUSH
57734: LD_VAR 0 5
57738: PUSH
57739: LD_EXP 56
57743: PUSH
57744: LD_VAR 0 5
57748: ARRAY
57749: PUSH
57750: LD_INT 1
57752: PLUS
57753: PUSH
57754: EMPTY
57755: LIST
57756: LIST
57757: PPUSH
57758: LD_VAR 0 2
57762: PUSH
57763: LD_VAR 0 3
57767: PUSH
57768: EMPTY
57769: LIST
57770: LIST
57771: PPUSH
57772: CALL 15096 0 3
57776: ST_TO_ADDR
// result := true ;
57777: LD_ADDR_VAR 0 4
57781: PUSH
57782: LD_INT 1
57784: ST_TO_ADDR
// end ;
57785: LD_VAR 0 4
57789: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
57790: LD_INT 0
57792: PPUSH
57793: PPUSH
57794: PPUSH
// if not unit in minersList then
57795: LD_VAR 0 1
57799: PUSH
57800: LD_EXP 55
57804: IN
57805: NOT
57806: IFFALSE 57810
// exit ;
57808: GO 58204
// index := GetElementIndex ( minersList , unit ) ;
57810: LD_ADDR_VAR 0 6
57814: PUSH
57815: LD_EXP 55
57819: PPUSH
57820: LD_VAR 0 1
57824: PPUSH
57825: CALL 14879 0 2
57829: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
57830: LD_ADDR_VAR 0 5
57834: PUSH
57835: DOUBLE
57836: LD_EXP 56
57840: PUSH
57841: LD_VAR 0 6
57845: ARRAY
57846: INC
57847: ST_TO_ADDR
57848: LD_INT 1
57850: PUSH
57851: FOR_DOWNTO
57852: IFFALSE 58015
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
57854: LD_EXP 56
57858: PUSH
57859: LD_VAR 0 6
57863: ARRAY
57864: PUSH
57865: LD_VAR 0 5
57869: ARRAY
57870: PUSH
57871: LD_INT 1
57873: ARRAY
57874: PUSH
57875: LD_VAR 0 2
57879: EQUAL
57880: IFFALSE 57910
57882: PUSH
57883: LD_EXP 56
57887: PUSH
57888: LD_VAR 0 6
57892: ARRAY
57893: PUSH
57894: LD_VAR 0 5
57898: ARRAY
57899: PUSH
57900: LD_INT 2
57902: ARRAY
57903: PUSH
57904: LD_VAR 0 3
57908: EQUAL
57909: AND
57910: IFFALSE 58013
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
57912: LD_EXP 56
57916: PUSH
57917: LD_VAR 0 6
57921: ARRAY
57922: PUSH
57923: LD_VAR 0 5
57927: ARRAY
57928: PUSH
57929: LD_INT 1
57931: ARRAY
57932: PPUSH
57933: LD_EXP 56
57937: PUSH
57938: LD_VAR 0 6
57942: ARRAY
57943: PUSH
57944: LD_VAR 0 5
57948: ARRAY
57949: PUSH
57950: LD_INT 2
57952: ARRAY
57953: PPUSH
57954: LD_VAR 0 1
57958: PPUSH
57959: CALL_OW 255
57963: PPUSH
57964: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
57968: LD_ADDR_EXP 56
57972: PUSH
57973: LD_EXP 56
57977: PPUSH
57978: LD_VAR 0 6
57982: PPUSH
57983: LD_EXP 56
57987: PUSH
57988: LD_VAR 0 6
57992: ARRAY
57993: PPUSH
57994: LD_VAR 0 5
57998: PPUSH
57999: CALL_OW 3
58003: PPUSH
58004: CALL_OW 1
58008: ST_TO_ADDR
// exit ;
58009: POP
58010: POP
58011: GO 58204
// end ; end ;
58013: GO 57851
58015: POP
58016: POP
// for i := minerMinesList [ index ] downto 1 do
58017: LD_ADDR_VAR 0 5
58021: PUSH
58022: DOUBLE
58023: LD_EXP 56
58027: PUSH
58028: LD_VAR 0 6
58032: ARRAY
58033: INC
58034: ST_TO_ADDR
58035: LD_INT 1
58037: PUSH
58038: FOR_DOWNTO
58039: IFFALSE 58202
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
58041: LD_EXP 56
58045: PUSH
58046: LD_VAR 0 6
58050: ARRAY
58051: PUSH
58052: LD_VAR 0 5
58056: ARRAY
58057: PUSH
58058: LD_INT 1
58060: ARRAY
58061: PPUSH
58062: LD_EXP 56
58066: PUSH
58067: LD_VAR 0 6
58071: ARRAY
58072: PUSH
58073: LD_VAR 0 5
58077: ARRAY
58078: PUSH
58079: LD_INT 2
58081: ARRAY
58082: PPUSH
58083: LD_VAR 0 2
58087: PPUSH
58088: LD_VAR 0 3
58092: PPUSH
58093: CALL_OW 298
58097: PUSH
58098: LD_INT 6
58100: LESS
58101: IFFALSE 58200
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
58103: LD_EXP 56
58107: PUSH
58108: LD_VAR 0 6
58112: ARRAY
58113: PUSH
58114: LD_VAR 0 5
58118: ARRAY
58119: PUSH
58120: LD_INT 1
58122: ARRAY
58123: PPUSH
58124: LD_EXP 56
58128: PUSH
58129: LD_VAR 0 6
58133: ARRAY
58134: PUSH
58135: LD_VAR 0 5
58139: ARRAY
58140: PUSH
58141: LD_INT 2
58143: ARRAY
58144: PPUSH
58145: LD_VAR 0 1
58149: PPUSH
58150: CALL_OW 255
58154: PPUSH
58155: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
58159: LD_ADDR_EXP 56
58163: PUSH
58164: LD_EXP 56
58168: PPUSH
58169: LD_VAR 0 6
58173: PPUSH
58174: LD_EXP 56
58178: PUSH
58179: LD_VAR 0 6
58183: ARRAY
58184: PPUSH
58185: LD_VAR 0 5
58189: PPUSH
58190: CALL_OW 3
58194: PPUSH
58195: CALL_OW 1
58199: ST_TO_ADDR
// end ; end ;
58200: GO 58038
58202: POP
58203: POP
// end ;
58204: LD_VAR 0 4
58208: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
58209: LD_INT 0
58211: PPUSH
58212: PPUSH
58213: PPUSH
58214: PPUSH
58215: PPUSH
58216: PPUSH
58217: PPUSH
58218: PPUSH
58219: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
58220: LD_VAR 0 1
58224: PPUSH
58225: CALL_OW 264
58229: PUSH
58230: LD_INT 81
58232: EQUAL
58233: NOT
58234: IFTRUE 58249
58236: PUSH
58237: LD_VAR 0 1
58241: PUSH
58242: LD_EXP 55
58246: IN
58247: NOT
58248: OR
58249: IFFALSE 58253
// exit ;
58251: GO 58579
// index := GetElementIndex ( minersList , unit ) ;
58253: LD_ADDR_VAR 0 6
58257: PUSH
58258: LD_EXP 55
58262: PPUSH
58263: LD_VAR 0 1
58267: PPUSH
58268: CALL 14879 0 2
58272: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
58273: LD_ADDR_VAR 0 8
58277: PUSH
58278: LD_EXP 57
58282: PUSH
58283: LD_EXP 56
58287: PUSH
58288: LD_VAR 0 6
58292: ARRAY
58293: MINUS
58294: ST_TO_ADDR
// if not minesFreeAmount then
58295: LD_VAR 0 8
58299: NOT
58300: IFFALSE 58304
// exit ;
58302: GO 58579
// tmp := [ ] ;
58304: LD_ADDR_VAR 0 7
58308: PUSH
58309: EMPTY
58310: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
58311: LD_ADDR_VAR 0 5
58315: PUSH
58316: DOUBLE
58317: LD_INT 1
58319: DEC
58320: ST_TO_ADDR
58321: LD_VAR 0 8
58325: PUSH
58326: FOR_TO
58327: IFFALSE 58526
// begin _d := rand ( 0 , 5 ) ;
58329: LD_ADDR_VAR 0 11
58333: PUSH
58334: LD_INT 0
58336: PPUSH
58337: LD_INT 5
58339: PPUSH
58340: CALL_OW 12
58344: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
58345: LD_ADDR_VAR 0 12
58349: PUSH
58350: LD_INT 2
58352: PPUSH
58353: LD_INT 6
58355: PPUSH
58356: CALL_OW 12
58360: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
58361: LD_ADDR_VAR 0 9
58365: PUSH
58366: LD_VAR 0 2
58370: PPUSH
58371: LD_VAR 0 11
58375: PPUSH
58376: LD_VAR 0 12
58380: PPUSH
58381: CALL_OW 272
58385: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
58386: LD_ADDR_VAR 0 10
58390: PUSH
58391: LD_VAR 0 3
58395: PPUSH
58396: LD_VAR 0 11
58400: PPUSH
58401: LD_VAR 0 12
58405: PPUSH
58406: CALL_OW 273
58410: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
58411: LD_VAR 0 9
58415: PPUSH
58416: LD_VAR 0 10
58420: PPUSH
58421: CALL_OW 488
58425: IFFALSE 58449
58427: PUSH
58428: LD_VAR 0 9
58432: PUSH
58433: LD_VAR 0 10
58437: PUSH
58438: EMPTY
58439: LIST
58440: LIST
58441: PUSH
58442: LD_VAR 0 7
58446: IN
58447: NOT
58448: AND
58449: IFFALSE 58468
58451: PUSH
58452: LD_VAR 0 9
58456: PPUSH
58457: LD_VAR 0 10
58461: PPUSH
58462: CALL_OW 458
58466: NOT
58467: AND
58468: IFFALSE 58510
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
58470: LD_ADDR_VAR 0 7
58474: PUSH
58475: LD_VAR 0 7
58479: PPUSH
58480: LD_VAR 0 7
58484: PUSH
58485: LD_INT 1
58487: PLUS
58488: PPUSH
58489: LD_VAR 0 9
58493: PUSH
58494: LD_VAR 0 10
58498: PUSH
58499: EMPTY
58500: LIST
58501: LIST
58502: PPUSH
58503: CALL_OW 1
58507: ST_TO_ADDR
58508: GO 58524
// i := i - 1 ;
58510: LD_ADDR_VAR 0 5
58514: PUSH
58515: LD_VAR 0 5
58519: PUSH
58520: LD_INT 1
58522: MINUS
58523: ST_TO_ADDR
// end ;
58524: GO 58326
58526: POP
58527: POP
// for i in tmp do
58528: LD_ADDR_VAR 0 5
58532: PUSH
58533: LD_VAR 0 7
58537: PUSH
58538: FOR_IN
58539: IFFALSE 58577
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
58541: LD_VAR 0 1
58545: PPUSH
58546: LD_VAR 0 5
58550: PUSH
58551: LD_INT 1
58553: ARRAY
58554: PPUSH
58555: LD_VAR 0 5
58559: PUSH
58560: LD_INT 2
58562: ARRAY
58563: PPUSH
58564: CALL 57511 0 3
58568: NOT
58569: IFFALSE 58575
// exit ;
58571: POP
58572: POP
58573: GO 58579
58575: GO 58538
58577: POP
58578: POP
// end ;
58579: LD_VAR 0 4
58583: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
58584: LD_INT 0
58586: PPUSH
58587: PPUSH
58588: PPUSH
58589: PPUSH
58590: PPUSH
58591: PPUSH
58592: PPUSH
58593: PPUSH
58594: PPUSH
// if GetClass ( unit ) <> class_sniper then
58595: LD_VAR 0 1
58599: PPUSH
58600: CALL_OW 257
58604: PUSH
58605: LD_INT 5
58607: NONEQUAL
58608: IFFALSE 58612
// exit ;
58610: GO 59082
// dist := 8 ;
58612: LD_ADDR_VAR 0 5
58616: PUSH
58617: LD_INT 8
58619: ST_TO_ADDR
// viewRange := 12 ;
58620: LD_ADDR_VAR 0 8
58624: PUSH
58625: LD_INT 12
58627: ST_TO_ADDR
// side := GetSide ( unit ) ;
58628: LD_ADDR_VAR 0 6
58632: PUSH
58633: LD_VAR 0 1
58637: PPUSH
58638: CALL_OW 255
58642: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
58643: LD_INT 61
58645: PPUSH
58646: LD_VAR 0 6
58650: PPUSH
58651: CALL_OW 321
58655: PUSH
58656: LD_INT 2
58658: EQUAL
58659: IFFALSE 58669
// viewRange := 16 ;
58661: LD_ADDR_VAR 0 8
58665: PUSH
58666: LD_INT 16
58668: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
58669: LD_VAR 0 1
58673: PPUSH
58674: LD_VAR 0 2
58678: PPUSH
58679: LD_VAR 0 3
58683: PPUSH
58684: CALL_OW 297
58688: PUSH
58689: LD_VAR 0 5
58693: GREATER
58694: IFFALSE 58773
// begin ComMoveXY ( unit , x , y ) ;
58696: LD_VAR 0 1
58700: PPUSH
58701: LD_VAR 0 2
58705: PPUSH
58706: LD_VAR 0 3
58710: PPUSH
58711: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
58715: LD_INT 35
58717: PPUSH
58718: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
58722: LD_VAR 0 1
58726: PPUSH
58727: LD_VAR 0 2
58731: PPUSH
58732: LD_VAR 0 3
58736: PPUSH
58737: CALL 46925 0 3
58741: NOT
58742: IFFALSE 58746
// exit ;
58744: GO 59082
// until GetDistUnitXY ( unit , x , y ) < dist ;
58746: LD_VAR 0 1
58750: PPUSH
58751: LD_VAR 0 2
58755: PPUSH
58756: LD_VAR 0 3
58760: PPUSH
58761: CALL_OW 297
58765: PUSH
58766: LD_VAR 0 5
58770: LESS
58771: IFFALSE 58715
// end ; ComTurnXY ( unit , x , y ) ;
58773: LD_VAR 0 1
58777: PPUSH
58778: LD_VAR 0 2
58782: PPUSH
58783: LD_VAR 0 3
58787: PPUSH
58788: CALL_OW 118
// repeat if Multiplayer then
58792: LD_OWVAR 4
58796: IFFALSE 58807
// wait ( 35 ) else
58798: LD_INT 35
58800: PPUSH
58801: CALL_OW 67
58805: GO 58814
// wait ( 5 ) ;
58807: LD_INT 5
58809: PPUSH
58810: CALL_OW 67
// _d := GetDir ( unit ) ;
58814: LD_ADDR_VAR 0 11
58818: PUSH
58819: LD_VAR 0 1
58823: PPUSH
58824: CALL_OW 254
58828: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
58829: LD_ADDR_VAR 0 7
58833: PUSH
58834: LD_VAR 0 1
58838: PPUSH
58839: CALL_OW 250
58843: PPUSH
58844: LD_VAR 0 1
58848: PPUSH
58849: CALL_OW 251
58853: PPUSH
58854: LD_VAR 0 2
58858: PPUSH
58859: LD_VAR 0 3
58863: PPUSH
58864: CALL 49561 0 4
58868: ST_TO_ADDR
// until dir = _d ;
58869: LD_VAR 0 7
58873: PUSH
58874: LD_VAR 0 11
58878: EQUAL
58879: IFFALSE 58792
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
58881: LD_ADDR_VAR 0 9
58885: PUSH
58886: LD_VAR 0 1
58890: PPUSH
58891: CALL_OW 250
58895: PPUSH
58896: LD_VAR 0 7
58900: PPUSH
58901: LD_VAR 0 5
58905: PPUSH
58906: CALL_OW 272
58910: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
58911: LD_ADDR_VAR 0 10
58915: PUSH
58916: LD_VAR 0 1
58920: PPUSH
58921: CALL_OW 251
58925: PPUSH
58926: LD_VAR 0 7
58930: PPUSH
58931: LD_VAR 0 5
58935: PPUSH
58936: CALL_OW 273
58940: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
58941: LD_VAR 0 9
58945: PPUSH
58946: LD_VAR 0 10
58950: PPUSH
58951: CALL_OW 488
58955: NOT
58956: IFFALSE 58960
// exit ;
58958: GO 59082
// ComAnimCustom ( unit , 1 ) ;
58960: LD_VAR 0 1
58964: PPUSH
58965: LD_INT 1
58967: PPUSH
58968: CALL_OW 592
// p := 0 ;
58972: LD_ADDR_VAR 0 12
58976: PUSH
58977: LD_INT 0
58979: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
58980: LD_VAR 0 9
58984: PPUSH
58985: LD_VAR 0 10
58989: PPUSH
58990: LD_VAR 0 6
58994: PPUSH
58995: LD_VAR 0 8
58999: PPUSH
59000: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
59004: LD_INT 35
59006: PPUSH
59007: CALL_OW 67
// p := Inc ( p ) ;
59011: LD_ADDR_VAR 0 12
59015: PUSH
59016: LD_VAR 0 12
59020: PPUSH
59021: CALL 49517 0 1
59025: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
59026: LD_VAR 0 12
59030: PUSH
59031: LD_INT 3
59033: EQUAL
59034: IFTRUE 59048
59036: PUSH
59037: LD_VAR 0 1
59041: PPUSH
59042: CALL_OW 302
59046: NOT
59047: OR
59048: IFTRUE 59061
59050: PUSH
59051: LD_VAR 0 1
59055: PPUSH
59056: CALL_OW 301
59060: OR
59061: IFFALSE 59004
// RemoveSeeing ( _x , _y , side ) ;
59063: LD_VAR 0 9
59067: PPUSH
59068: LD_VAR 0 10
59072: PPUSH
59073: LD_VAR 0 6
59077: PPUSH
59078: CALL_OW 331
// end ; end_of_file
59082: LD_VAR 0 4
59086: RET
// export mpKingPoints ; every 0 0$1 trigger mpGameActive marked GameTypeKing do var i , j , tmp ;
59087: LD_EXP 39
59091: IFFALSE 59432
59093: GO 59095
59095: DISABLE
59096: LD_INT 0
59098: PPUSH
59099: PPUSH
59100: PPUSH
// begin mpKingPoints := [ ] ;
59101: LD_ADDR_EXP 58
59105: PUSH
59106: EMPTY
59107: ST_TO_ADDR
// if mpTeamGame then
59108: LD_EXP 11
59112: IFFALSE 59166
// begin for i := 1 to Count ( mpTeams ) do
59114: LD_ADDR_VAR 0 1
59118: PUSH
59119: DOUBLE
59120: LD_INT 1
59122: DEC
59123: ST_TO_ADDR
59124: LD_EXP 10
59128: PPUSH
59129: CALL 12212 0 1
59133: PUSH
59134: FOR_TO
59135: IFFALSE 59162
// mpKingPoints := Replace ( mpKingPoints , i , 0 ) ;
59137: LD_ADDR_EXP 58
59141: PUSH
59142: LD_EXP 58
59146: PPUSH
59147: LD_VAR 0 1
59151: PPUSH
59152: LD_INT 0
59154: PPUSH
59155: CALL_OW 1
59159: ST_TO_ADDR
59160: GO 59134
59162: POP
59163: POP
// end else
59164: GO 59209
// begin for i := 1 to 8 do
59166: LD_ADDR_VAR 0 1
59170: PUSH
59171: DOUBLE
59172: LD_INT 1
59174: DEC
59175: ST_TO_ADDR
59176: LD_INT 8
59178: PUSH
59179: FOR_TO
59180: IFFALSE 59207
// mpKingPoints := Replace ( mpKingPoints , i , 0 ) ;
59182: LD_ADDR_EXP 58
59186: PUSH
59187: LD_EXP 58
59191: PPUSH
59192: LD_VAR 0 1
59196: PPUSH
59197: LD_INT 0
59199: PPUSH
59200: CALL_OW 1
59204: ST_TO_ADDR
59205: GO 59179
59207: POP
59208: POP
// end ; tmp := AreaToList ( kingCamArea , 0 ) ;
59209: LD_ADDR_VAR 0 3
59213: PUSH
59214: LD_EXP 2
59218: PPUSH
59219: LD_INT 0
59221: PPUSH
59222: CALL_OW 517
59226: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
59227: LD_ADDR_VAR 0 1
59231: PUSH
59232: DOUBLE
59233: LD_INT 1
59235: DEC
59236: ST_TO_ADDR
59237: LD_VAR 0 3
59241: PUSH
59242: LD_INT 1
59244: ARRAY
59245: PUSH
59246: FOR_TO
59247: IFFALSE 59314
// for j := 1 to 8 do
59249: LD_ADDR_VAR 0 2
59253: PUSH
59254: DOUBLE
59255: LD_INT 1
59257: DEC
59258: ST_TO_ADDR
59259: LD_INT 8
59261: PUSH
59262: FOR_TO
59263: IFFALSE 59310
// PlaceSeeing ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , j , - 12 ) ;
59265: LD_VAR 0 3
59269: PUSH
59270: LD_INT 1
59272: ARRAY
59273: PUSH
59274: LD_VAR 0 1
59278: ARRAY
59279: PPUSH
59280: LD_VAR 0 3
59284: PUSH
59285: LD_INT 2
59287: ARRAY
59288: PUSH
59289: LD_VAR 0 1
59293: ARRAY
59294: PPUSH
59295: LD_VAR 0 2
59299: PPUSH
59300: LD_INT 12
59302: NEG
59303: PPUSH
59304: CALL_OW 330
59308: GO 59262
59310: POP
59311: POP
59312: GO 59246
59314: POP
59315: POP
// SetAreaMapShow ( mpKingArea , 1 ) ;
59316: LD_EXP 34
59320: PPUSH
59321: LD_INT 1
59323: PPUSH
59324: CALL_OW 424
// UpdateCounter ;
59328: CALL 59938 0 0
// repeat wait ( 0 0$1 ) ;
59332: LD_INT 35
59334: PPUSH
59335: CALL_OW 67
// tmp := FilterUnitsInArea ( mpKingArea , [ [ f_not , [ f_constructed ] ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
59339: LD_ADDR_VAR 0 3
59343: PUSH
59344: LD_EXP 34
59348: PPUSH
59349: LD_INT 3
59351: PUSH
59352: LD_INT 57
59354: PUSH
59355: EMPTY
59356: LIST
59357: PUSH
59358: EMPTY
59359: LIST
59360: LIST
59361: PUSH
59362: LD_INT 50
59364: PUSH
59365: EMPTY
59366: LIST
59367: PUSH
59368: LD_INT 2
59370: PUSH
59371: LD_INT 30
59373: PUSH
59374: LD_INT 0
59376: PUSH
59377: EMPTY
59378: LIST
59379: LIST
59380: PUSH
59381: LD_INT 30
59383: PUSH
59384: LD_INT 1
59386: PUSH
59387: EMPTY
59388: LIST
59389: LIST
59390: PUSH
59391: EMPTY
59392: LIST
59393: LIST
59394: LIST
59395: PUSH
59396: EMPTY
59397: LIST
59398: LIST
59399: LIST
59400: PPUSH
59401: CALL_OW 70
59405: ST_TO_ADDR
// if not tmp then
59406: LD_VAR 0 3
59410: NOT
59411: IFFALSE 59415
// continue ;
59413: GO 59332
// AddPoints ( tmp ) ;
59415: LD_VAR 0 3
59419: PPUSH
59420: CALL 59616 0 1
// UpdateCounter ;
59424: CALL 59938 0 0
// until false ;
59428: LD_INT 0
59430: IFFALSE 59332
// end ;
59432: PPOPN 3
59434: END
// every 0 0$1 trigger mpGameActive and mpEmissions marked GameTypeKing do var i , tmp ;
59435: LD_EXP 39
59439: IFFALSE 59447
59441: PUSH
59442: LD_EXP 37
59446: AND
59447: IFFALSE 59613
59449: GO 59451
59451: DISABLE
59452: LD_INT 0
59454: PPUSH
59455: PPUSH
// begin tmp := AreaToList ( kingCamArea , 0 ) ;
59456: LD_ADDR_VAR 0 2
59460: PUSH
59461: LD_EXP 2
59465: PPUSH
59466: LD_INT 0
59468: PPUSH
59469: CALL_OW 517
59473: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
59474: LD_ADDR_VAR 0 1
59478: PUSH
59479: DOUBLE
59480: LD_INT 1
59482: DEC
59483: ST_TO_ADDR
59484: LD_VAR 0 2
59488: PUSH
59489: LD_INT 1
59491: ARRAY
59492: PUSH
59493: FOR_TO
59494: IFFALSE 59535
// ArtContamination ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 125 ) ;
59496: LD_VAR 0 2
59500: PUSH
59501: LD_INT 1
59503: ARRAY
59504: PUSH
59505: LD_VAR 0 1
59509: ARRAY
59510: PPUSH
59511: LD_VAR 0 2
59515: PUSH
59516: LD_INT 2
59518: ARRAY
59519: PUSH
59520: LD_VAR 0 1
59524: ARRAY
59525: PPUSH
59526: LD_INT 125
59528: PPUSH
59529: CALL_OW 495
59533: GO 59493
59535: POP
59536: POP
// repeat wait ( mpEmissions ) ;
59537: LD_EXP 37
59541: PPUSH
59542: CALL_OW 67
// for i := 1 to tmp [ 1 ] do
59546: LD_ADDR_VAR 0 1
59550: PUSH
59551: DOUBLE
59552: LD_INT 1
59554: DEC
59555: ST_TO_ADDR
59556: LD_VAR 0 2
59560: PUSH
59561: LD_INT 1
59563: ARRAY
59564: PUSH
59565: FOR_TO
59566: IFFALSE 59607
// ArtContamination ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 15 ) ;
59568: LD_VAR 0 2
59572: PUSH
59573: LD_INT 1
59575: ARRAY
59576: PUSH
59577: LD_VAR 0 1
59581: ARRAY
59582: PPUSH
59583: LD_VAR 0 2
59587: PUSH
59588: LD_INT 2
59590: ARRAY
59591: PUSH
59592: LD_VAR 0 1
59596: ARRAY
59597: PPUSH
59598: LD_INT 15
59600: PPUSH
59601: CALL_OW 495
59605: GO 59565
59607: POP
59608: POP
// until false ;
59609: LD_INT 0
59611: IFFALSE 59537
// end ;
59613: PPOPN 2
59615: END
// function AddPoints ( depots ) ; var i , first , team , side ; begin
59616: LD_INT 0
59618: PPUSH
59619: PPUSH
59620: PPUSH
59621: PPUSH
59622: PPUSH
// if mpTeamGame then
59623: LD_EXP 11
59627: IFFALSE 59824
// begin first := depots [ 1 ] ;
59629: LD_ADDR_VAR 0 4
59633: PUSH
59634: LD_VAR 0 1
59638: PUSH
59639: LD_INT 1
59641: ARRAY
59642: ST_TO_ADDR
// side := GetSide ( first ) ;
59643: LD_ADDR_VAR 0 6
59647: PUSH
59648: LD_VAR 0 4
59652: PPUSH
59653: CALL_OW 255
59657: ST_TO_ADDR
// for i := 1 to mpTeams do
59658: LD_ADDR_VAR 0 3
59662: PUSH
59663: DOUBLE
59664: LD_INT 1
59666: DEC
59667: ST_TO_ADDR
59668: LD_EXP 10
59672: PUSH
59673: FOR_TO
59674: IFFALSE 59708
// if side in mpTeams [ i ] then
59676: LD_VAR 0 6
59680: PUSH
59681: LD_EXP 10
59685: PUSH
59686: LD_VAR 0 3
59690: ARRAY
59691: IN
59692: IFFALSE 59706
// begin team := i ;
59694: LD_ADDR_VAR 0 5
59698: PUSH
59699: LD_VAR 0 3
59703: ST_TO_ADDR
// break ;
59704: GO 59708
// end ;
59706: GO 59673
59708: POP
59709: POP
// if not team then
59710: LD_VAR 0 5
59714: NOT
59715: IFFALSE 59719
// exit ;
59717: GO 59933
// if FilterUnitsInArea ( mpKingArea , [ f_enemy , side ] ) then
59719: LD_EXP 34
59723: PPUSH
59724: LD_INT 81
59726: PUSH
59727: LD_VAR 0 6
59731: PUSH
59732: EMPTY
59733: LIST
59734: LIST
59735: PPUSH
59736: CALL_OW 70
59740: IFFALSE 59744
// exit ;
59742: GO 59933
// mpKingPoints := Replace ( mpKingPoints , team , mpKingPoints [ team ] + 1 ) ;
59744: LD_ADDR_EXP 58
59748: PUSH
59749: LD_EXP 58
59753: PPUSH
59754: LD_VAR 0 5
59758: PPUSH
59759: LD_EXP 58
59763: PUSH
59764: LD_VAR 0 5
59768: ARRAY
59769: PUSH
59770: LD_INT 1
59772: PLUS
59773: PPUSH
59774: CALL_OW 1
59778: ST_TO_ADDR
// for i in mpTeams [ team ] do
59779: LD_ADDR_VAR 0 3
59783: PUSH
59784: LD_EXP 10
59788: PUSH
59789: LD_VAR 0 5
59793: ARRAY
59794: PUSH
59795: FOR_IN
59796: IFFALSE 59820
// SetMultiScore ( i , mpKingPoints [ team ] ) ;
59798: LD_VAR 0 3
59802: PPUSH
59803: LD_EXP 58
59807: PUSH
59808: LD_VAR 0 5
59812: ARRAY
59813: PPUSH
59814: CALL_OW 506
59818: GO 59795
59820: POP
59821: POP
// end else
59822: GO 59933
// begin first := depots [ 1 ] ;
59824: LD_ADDR_VAR 0 4
59828: PUSH
59829: LD_VAR 0 1
59833: PUSH
59834: LD_INT 1
59836: ARRAY
59837: ST_TO_ADDR
// side := GetSide ( first ) ;
59838: LD_ADDR_VAR 0 6
59842: PUSH
59843: LD_VAR 0 4
59847: PPUSH
59848: CALL_OW 255
59852: ST_TO_ADDR
// if FilterUnitsInArea ( mpKingArea , [ f_enemy , side ] ) then
59853: LD_EXP 34
59857: PPUSH
59858: LD_INT 81
59860: PUSH
59861: LD_VAR 0 6
59865: PUSH
59866: EMPTY
59867: LIST
59868: LIST
59869: PPUSH
59870: CALL_OW 70
59874: IFFALSE 59878
// exit ;
59876: GO 59933
// mpKingPoints := Replace ( mpKingPoints , side , mpKingPoints [ side ] + 1 ) ;
59878: LD_ADDR_EXP 58
59882: PUSH
59883: LD_EXP 58
59887: PPUSH
59888: LD_VAR 0 6
59892: PPUSH
59893: LD_EXP 58
59897: PUSH
59898: LD_VAR 0 6
59902: ARRAY
59903: PUSH
59904: LD_INT 1
59906: PLUS
59907: PPUSH
59908: CALL_OW 1
59912: ST_TO_ADDR
// SetMultiScore ( side , mpKingPoints [ side ] ) ;
59913: LD_VAR 0 6
59917: PPUSH
59918: LD_EXP 58
59922: PUSH
59923: LD_VAR 0 6
59927: ARRAY
59928: PPUSH
59929: CALL_OW 506
// end ; end ;
59933: LD_VAR 0 2
59937: RET
// function UpdateCounter ; var i ; begin
59938: LD_INT 0
59940: PPUSH
59941: PPUSH
// result := [ ] ;
59942: LD_ADDR_VAR 0 1
59946: PUSH
59947: EMPTY
59948: ST_TO_ADDR
// if mpTeamGame then
59949: LD_EXP 11
59953: IFFALSE 60020
// begin for i := 1 to mpTeams do
59955: LD_ADDR_VAR 0 2
59959: PUSH
59960: DOUBLE
59961: LD_INT 1
59963: DEC
59964: ST_TO_ADDR
59965: LD_EXP 10
59969: PUSH
59970: FOR_TO
59971: IFFALSE 60016
// result := result ^ [ #KingoftheHill-Team , i , mpKingPoints [ i ] , mpPoints ] ;
59973: LD_ADDR_VAR 0 1
59977: PUSH
59978: LD_VAR 0 1
59982: PUSH
59983: LD_STRING #KingoftheHill-Team
59985: PUSH
59986: LD_VAR 0 2
59990: PUSH
59991: LD_EXP 58
59995: PUSH
59996: LD_VAR 0 2
60000: ARRAY
60001: PUSH
60002: LD_EXP 35
60006: PUSH
60007: EMPTY
60008: LIST
60009: LIST
60010: LIST
60011: LIST
60012: ADD
60013: ST_TO_ADDR
60014: GO 59970
60016: POP
60017: POP
// end else
60018: GO 60093
// begin for i := 1 to 8 do
60020: LD_ADDR_VAR 0 2
60024: PUSH
60025: DOUBLE
60026: LD_INT 1
60028: DEC
60029: ST_TO_ADDR
60030: LD_INT 8
60032: PUSH
60033: FOR_TO
60034: IFFALSE 60091
// if mpSidePositions [ i ] then
60036: LD_EXP 7
60040: PUSH
60041: LD_VAR 0 2
60045: ARRAY
60046: IFFALSE 60089
// result := result ^ [ #KingoftheHill-Player , i , mpKingPoints [ i ] , mpPoints ] ;
60048: LD_ADDR_VAR 0 1
60052: PUSH
60053: LD_VAR 0 1
60057: PUSH
60058: LD_STRING #KingoftheHill-Player
60060: PUSH
60061: LD_VAR 0 2
60065: PUSH
60066: LD_EXP 58
60070: PUSH
60071: LD_VAR 0 2
60075: ARRAY
60076: PUSH
60077: LD_EXP 35
60081: PUSH
60082: EMPTY
60083: LIST
60084: LIST
60085: LIST
60086: LIST
60087: ADD
60088: ST_TO_ADDR
60089: GO 60033
60091: POP
60092: POP
// end ; mpDisplayStrings := result ;
60093: LD_ADDR_EXP 38
60097: PUSH
60098: LD_VAR 0 1
60102: ST_TO_ADDR
// end ;
60103: LD_VAR 0 1
60107: RET
// export function HowMuchPointsKing ( side ) ; begin
60108: LD_INT 0
60110: PPUSH
// result := HowMuchPoints ( side ) ;
60111: LD_ADDR_VAR 0 2
60115: PUSH
60116: LD_VAR 0 1
60120: PPUSH
60121: CALL 60131 0 1
60125: ST_TO_ADDR
// end ;
60126: LD_VAR 0 2
60130: RET
// function HowMuchPoints ( side ) ; var i ; begin
60131: LD_INT 0
60133: PPUSH
60134: PPUSH
// if mpTeamGame then
60135: LD_EXP 11
60139: IFFALSE 60208
// begin for i := 1 to Count ( mpTeams ) do
60141: LD_ADDR_VAR 0 3
60145: PUSH
60146: DOUBLE
60147: LD_INT 1
60149: DEC
60150: ST_TO_ADDR
60151: LD_EXP 10
60155: PPUSH
60156: CALL 12212 0 1
60160: PUSH
60161: FOR_TO
60162: IFFALSE 60204
// begin if side in mpTeams [ i ] then
60164: LD_VAR 0 1
60168: PUSH
60169: LD_EXP 10
60173: PUSH
60174: LD_VAR 0 3
60178: ARRAY
60179: IN
60180: IFFALSE 60202
// begin result := mpKingPoints [ i ] ;
60182: LD_ADDR_VAR 0 2
60186: PUSH
60187: LD_EXP 58
60191: PUSH
60192: LD_VAR 0 3
60196: ARRAY
60197: ST_TO_ADDR
// exit ;
60198: POP
60199: POP
60200: GO 60224
// end ; end ;
60202: GO 60161
60204: POP
60205: POP
// end else
60206: GO 60224
// result := mpKingPoints [ side ] ;
60208: LD_ADDR_VAR 0 2
60212: PUSH
60213: LD_EXP 58
60217: PUSH
60218: LD_VAR 0 1
60222: ARRAY
60223: ST_TO_ADDR
// end ;
60224: LD_VAR 0 2
60228: RET
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeKing do var i , canWin ;
60229: LD_EXP 39
60233: IFFALSE 60241
60235: PUSH
60236: CALL 60576 0 0
60240: AND
60241: IFFALSE 60249
60243: PUSH
60244: LD_OWVAR 4
60248: AND
60249: IFFALSE 60499
60251: GO 60253
60253: DISABLE
60254: LD_INT 0
60256: PPUSH
60257: PPUSH
// begin canWin := false ;
60258: LD_ADDR_VAR 0 2
60262: PUSH
60263: LD_INT 0
60265: ST_TO_ADDR
// if not HasPower ( your_side ) then
60266: LD_OWVAR 2
60270: PPUSH
60271: CALL 60618 0 1
60275: NOT
60276: IFFALSE 60287
// begin Multiplayer_Loose_Message ;
60278: CALL_OW 521
// enable ( mpLose ) ;
60282: LD_INT 102
60284: ENABLE_MARKED
// end else
60285: GO 60499
// begin canWin := ( HowMuchPoints ( your_side ) >= mpPoints and HasPower ( your_side ) ) or not EnemiesInGame ;
60287: LD_ADDR_VAR 0 2
60291: PUSH
60292: LD_OWVAR 2
60296: PPUSH
60297: CALL 60131 0 1
60301: PUSH
60302: LD_EXP 35
60306: GREATEREQUAL
60307: IFFALSE 60320
60309: PUSH
60310: LD_OWVAR 2
60314: PPUSH
60315: CALL 60618 0 1
60319: AND
60320: IFTRUE 60329
60322: PUSH
60323: CALL 60502 0 0
60327: NOT
60328: OR
60329: ST_TO_ADDR
// for i := 1 to 8 do
60330: LD_ADDR_VAR 0 1
60334: PUSH
60335: DOUBLE
60336: LD_INT 1
60338: DEC
60339: ST_TO_ADDR
60340: LD_INT 8
60342: PUSH
60343: FOR_TO
60344: IFFALSE 60485
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
60346: LD_EXP 7
60350: PUSH
60351: LD_VAR 0 1
60355: ARRAY
60356: IFFALSE 60369
60358: PUSH
60359: LD_VAR 0 1
60363: PPUSH
60364: CALL_OW 108
60368: AND
60369: IFFALSE 60383
60371: PUSH
60372: LD_VAR 0 1
60376: PUSH
60377: LD_OWVAR 2
60381: NONEQUAL
60382: AND
60383: IFFALSE 60483
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
60385: LD_EXP 8
60389: PUSH
60390: LD_VAR 0 1
60394: ARRAY
60395: NOT
60396: IFTRUE 60444
60398: PUSH
60399: LD_EXP 8
60403: PUSH
60404: LD_VAR 0 1
60408: ARRAY
60409: PUSH
60410: LD_EXP 8
60414: PUSH
60415: LD_OWVAR 2
60419: ARRAY
60420: NONEQUAL
60421: IFFALSE 60443
60423: PUSH
60424: LD_OWVAR 2
60428: PPUSH
60429: LD_VAR 0 1
60433: PPUSH
60434: CALL_OW 81
60438: PUSH
60439: LD_INT 1
60441: NONEQUAL
60442: AND
60443: OR
60444: IFFALSE 60483
// if HowMuchPoints ( i ) >= mpPoints and HasPower ( i ) then
60446: LD_VAR 0 1
60450: PPUSH
60451: CALL 60131 0 1
60455: PUSH
60456: LD_EXP 35
60460: GREATEREQUAL
60461: IFFALSE 60474
60463: PUSH
60464: LD_VAR 0 1
60468: PPUSH
60469: CALL 60618 0 1
60473: AND
60474: IFFALSE 60483
// begin enable ( mpLose ) ;
60476: LD_INT 102
60478: ENABLE_MARKED
// exit ;
60479: POP
60480: POP
60481: GO 60499
// end ;
60483: GO 60343
60485: POP
60486: POP
// if canWin then
60487: LD_VAR 0 2
60491: IFFALSE 60498
// enable ( mpWin ) else
60493: LD_INT 101
60495: ENABLE_MARKED
60496: GO 60499
// enable ;
60498: ENABLE
// end ; end ;
60499: PPOPN 2
60501: END
// function EnemiesInGame ; var i ; begin
60502: LD_INT 0
60504: PPUSH
60505: PPUSH
// result := false ;
60506: LD_ADDR_VAR 0 1
60510: PUSH
60511: LD_INT 0
60513: ST_TO_ADDR
// for i := 1 to 8 do
60514: LD_ADDR_VAR 0 2
60518: PUSH
60519: DOUBLE
60520: LD_INT 1
60522: DEC
60523: ST_TO_ADDR
60524: LD_INT 8
60526: PUSH
60527: FOR_TO
60528: IFFALSE 60569
// if i <> your_side and HasPower ( i ) then
60530: LD_VAR 0 2
60534: PUSH
60535: LD_OWVAR 2
60539: NONEQUAL
60540: IFFALSE 60553
60542: PUSH
60543: LD_VAR 0 2
60547: PPUSH
60548: CALL 60618 0 1
60552: AND
60553: IFFALSE 60567
// begin result := true ;
60555: LD_ADDR_VAR 0 1
60559: PUSH
60560: LD_INT 1
60562: ST_TO_ADDR
// exit ;
60563: POP
60564: POP
60565: GO 60571
// end ;
60567: GO 60527
60569: POP
60570: POP
// end ;
60571: LD_VAR 0 1
60575: RET
// function CanWinLoose ; begin
60576: LD_INT 0
60578: PPUSH
// result := true ;
60579: LD_ADDR_VAR 0 1
60583: PUSH
60584: LD_INT 1
60586: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
60587: CALL_OW 531
60591: IFFALSE 60603
60593: PUSH
60594: CALL_OW 519
60598: PUSH
60599: LD_INT 1
60601: GREATER
60602: AND
60603: IFFALSE 60613
// result := false ;
60605: LD_ADDR_VAR 0 1
60609: PUSH
60610: LD_INT 0
60612: ST_TO_ADDR
// end ;
60613: LD_VAR 0 1
60617: RET
// function HasPower ( i ) ; begin
60618: LD_INT 0
60620: PPUSH
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
60621: LD_ADDR_VAR 0 2
60625: PUSH
60626: LD_INT 22
60628: PUSH
60629: LD_VAR 0 1
60633: PUSH
60634: EMPTY
60635: LIST
60636: LIST
60637: PUSH
60638: LD_INT 2
60640: PUSH
60641: LD_INT 21
60643: PUSH
60644: LD_INT 1
60646: PUSH
60647: EMPTY
60648: LIST
60649: LIST
60650: PUSH
60651: LD_INT 33
60653: PUSH
60654: LD_INT 3
60656: PUSH
60657: EMPTY
60658: LIST
60659: LIST
60660: PUSH
60661: LD_INT 33
60663: PUSH
60664: LD_INT 5
60666: PUSH
60667: EMPTY
60668: LIST
60669: LIST
60670: PUSH
60671: EMPTY
60672: LIST
60673: LIST
60674: LIST
60675: LIST
60676: PUSH
60677: EMPTY
60678: LIST
60679: LIST
60680: PPUSH
60681: CALL_OW 69
60685: ST_TO_ADDR
// end ; end_of_file
60686: LD_VAR 0 2
60690: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin end ;
60691: PPOPN 6
60693: END
// on MapStart ( p ) do begin if mpGameType = GameTypeCoop then
60694: LD_EXP 3
60698: PUSH
60699: LD_INT 4
60701: EQUAL
60702: IFFALSE 60738
// begin ToLua ( setGameDifficulty( & Difficulty & ) ) ;
60704: LD_STRING setGameDifficulty(
60706: PUSH
60707: LD_OWVAR 67
60711: STR
60712: PUSH
60713: LD_STRING )
60715: STR
60716: PPUSH
60717: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
60721: LD_STRING displayDifficulty(
60723: PUSH
60724: LD_OWVAR 67
60728: STR
60729: PUSH
60730: LD_STRING )
60732: STR
60733: PPUSH
60734: CALL_OW 559
// end ; SOS_MapStart ( ) ;
60738: CALL 60767 0 0
// end ; end_of_file
60742: PPOPN 1
60744: END
// every 0 0$1 do
60745: GO 60747
60747: DISABLE
// begin enable ;
60748: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
60749: LD_STRING updateTimer(
60751: PUSH
60752: LD_OWVAR 1
60756: STR
60757: PUSH
60758: LD_STRING );
60760: STR
60761: PPUSH
60762: CALL_OW 559
// end ;
60766: END
// export function SOS_MapStart ( ) ; begin
60767: LD_INT 0
60769: PPUSH
// UpdateFactoryWaypoints ( ) ;
60770: CALL 61701 0 0
// UpdateWarehouseGatheringPoints ( ) ;
60774: CALL 61953 0 0
// ParseMultiDataToLua ( ) ;
60778: CALL 62100 0 0
// ToLua ( setSpecLogoNumber( & 2 & , & 1 & ) ) ;
60782: LD_STRING setSpecLogoNumber(
60784: PUSH
60785: LD_INT 2
60787: STR
60788: PUSH
60789: LD_STRING ,
60791: STR
60792: PUSH
60793: LD_INT 1
60795: STR
60796: PUSH
60797: LD_STRING )
60799: STR
60800: PPUSH
60801: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 3 & , & 2 & ) ) ;
60805: LD_STRING setSpecLogoNumber(
60807: PUSH
60808: LD_INT 3
60810: STR
60811: PUSH
60812: LD_STRING ,
60814: STR
60815: PUSH
60816: LD_INT 2
60818: STR
60819: PUSH
60820: LD_STRING )
60822: STR
60823: PPUSH
60824: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 4 & , & 3 & ) ) ;
60828: LD_STRING setSpecLogoNumber(
60830: PUSH
60831: LD_INT 4
60833: STR
60834: PUSH
60835: LD_STRING ,
60837: STR
60838: PUSH
60839: LD_INT 3
60841: STR
60842: PUSH
60843: LD_STRING )
60845: STR
60846: PPUSH
60847: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 5 & , & 4 & ) ) ;
60851: LD_STRING setSpecLogoNumber(
60853: PUSH
60854: LD_INT 5
60856: STR
60857: PUSH
60858: LD_STRING ,
60860: STR
60861: PUSH
60862: LD_INT 4
60864: STR
60865: PUSH
60866: LD_STRING )
60868: STR
60869: PPUSH
60870: CALL_OW 559
// end ;
60874: LD_VAR 0 1
60878: RET
// export function UpdateSpectatorBar ; var i , j , crates , oil , sib , people , base , bases ; begin
60879: LD_INT 0
60881: PPUSH
60882: PPUSH
60883: PPUSH
60884: PPUSH
60885: PPUSH
60886: PPUSH
60887: PPUSH
60888: PPUSH
60889: PPUSH
// for i := 1 to 8 do
60890: LD_ADDR_VAR 0 2
60894: PUSH
60895: DOUBLE
60896: LD_INT 1
60898: DEC
60899: ST_TO_ADDR
60900: LD_INT 8
60902: PUSH
60903: FOR_TO
60904: IFFALSE 61289
// begin if mpSidePositions [ i ] then
60906: LD_EXP 7
60910: PUSH
60911: LD_VAR 0 2
60915: ARRAY
60916: IFFALSE 61287
// begin people := Count ( FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) ) ;
60918: LD_ADDR_VAR 0 7
60922: PUSH
60923: LD_INT 22
60925: PUSH
60926: LD_VAR 0 2
60930: PUSH
60931: EMPTY
60932: LIST
60933: LIST
60934: PUSH
60935: LD_INT 21
60937: PUSH
60938: LD_INT 1
60940: PUSH
60941: EMPTY
60942: LIST
60943: LIST
60944: PUSH
60945: EMPTY
60946: LIST
60947: LIST
60948: PPUSH
60949: CALL_OW 69
60953: PPUSH
60954: CALL 12212 0 1
60958: ST_TO_ADDR
// bases := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
60959: LD_ADDR_VAR 0 9
60963: PUSH
60964: LD_INT 22
60966: PUSH
60967: LD_VAR 0 2
60971: PUSH
60972: EMPTY
60973: LIST
60974: LIST
60975: PUSH
60976: LD_INT 2
60978: PUSH
60979: LD_INT 30
60981: PUSH
60982: LD_INT 0
60984: PUSH
60985: EMPTY
60986: LIST
60987: LIST
60988: PUSH
60989: LD_INT 30
60991: PUSH
60992: LD_INT 1
60994: PUSH
60995: EMPTY
60996: LIST
60997: LIST
60998: PUSH
60999: EMPTY
61000: LIST
61001: LIST
61002: LIST
61003: PUSH
61004: EMPTY
61005: LIST
61006: LIST
61007: PPUSH
61008: CALL_OW 69
61012: ST_TO_ADDR
// crates := 0 ;
61013: LD_ADDR_VAR 0 4
61017: PUSH
61018: LD_INT 0
61020: ST_TO_ADDR
// oil := 0 ;
61021: LD_ADDR_VAR 0 5
61025: PUSH
61026: LD_INT 0
61028: ST_TO_ADDR
// sib := 0 ;
61029: LD_ADDR_VAR 0 6
61033: PUSH
61034: LD_INT 0
61036: ST_TO_ADDR
// if bases then
61037: LD_VAR 0 9
61041: IFFALSE 61147
// begin for j in bases do
61043: LD_ADDR_VAR 0 3
61047: PUSH
61048: LD_VAR 0 9
61052: PUSH
61053: FOR_IN
61054: IFFALSE 61145
// begin base := GetBase ( j ) ;
61056: LD_ADDR_VAR 0 8
61060: PUSH
61061: LD_VAR 0 3
61065: PPUSH
61066: CALL_OW 274
61070: ST_TO_ADDR
// crates := crates + GetResourceType ( base , mat_cans ) ;
61071: LD_ADDR_VAR 0 4
61075: PUSH
61076: LD_VAR 0 4
61080: PUSH
61081: LD_VAR 0 8
61085: PPUSH
61086: LD_INT 1
61088: PPUSH
61089: CALL_OW 275
61093: PLUS
61094: ST_TO_ADDR
// oil := oil + GetResourceType ( base , mat_oil ) ;
61095: LD_ADDR_VAR 0 5
61099: PUSH
61100: LD_VAR 0 5
61104: PUSH
61105: LD_VAR 0 8
61109: PPUSH
61110: LD_INT 2
61112: PPUSH
61113: CALL_OW 275
61117: PLUS
61118: ST_TO_ADDR
// sib := sib + GetResourceType ( base , mat_siberit ) ;
61119: LD_ADDR_VAR 0 6
61123: PUSH
61124: LD_VAR 0 6
61128: PUSH
61129: LD_VAR 0 8
61133: PPUSH
61134: LD_INT 3
61136: PPUSH
61137: CALL_OW 275
61141: PLUS
61142: ST_TO_ADDR
// end ;
61143: GO 61053
61145: POP
61146: POP
// end ; ToLua ( setSpecText( & i & , & 2 & , & crates & ) ) ;
61147: LD_STRING setSpecText(
61149: PUSH
61150: LD_VAR 0 2
61154: STR
61155: PUSH
61156: LD_STRING ,
61158: STR
61159: PUSH
61160: LD_INT 2
61162: STR
61163: PUSH
61164: LD_STRING ,
61166: STR
61167: PUSH
61168: LD_VAR 0 4
61172: STR
61173: PUSH
61174: LD_STRING )
61176: STR
61177: PPUSH
61178: CALL_OW 559
// ToLua ( setSpecText( & i & , & 3 & , & oil & ) ) ;
61182: LD_STRING setSpecText(
61184: PUSH
61185: LD_VAR 0 2
61189: STR
61190: PUSH
61191: LD_STRING ,
61193: STR
61194: PUSH
61195: LD_INT 3
61197: STR
61198: PUSH
61199: LD_STRING ,
61201: STR
61202: PUSH
61203: LD_VAR 0 5
61207: STR
61208: PUSH
61209: LD_STRING )
61211: STR
61212: PPUSH
61213: CALL_OW 559
// ToLua ( setSpecText( & i & , & 4 & , & sib & ) ) ;
61217: LD_STRING setSpecText(
61219: PUSH
61220: LD_VAR 0 2
61224: STR
61225: PUSH
61226: LD_STRING ,
61228: STR
61229: PUSH
61230: LD_INT 4
61232: STR
61233: PUSH
61234: LD_STRING ,
61236: STR
61237: PUSH
61238: LD_VAR 0 6
61242: STR
61243: PUSH
61244: LD_STRING )
61246: STR
61247: PPUSH
61248: CALL_OW 559
// ToLua ( setSpecText( & i & , & 5 & , & people & ) ) ;
61252: LD_STRING setSpecText(
61254: PUSH
61255: LD_VAR 0 2
61259: STR
61260: PUSH
61261: LD_STRING ,
61263: STR
61264: PUSH
61265: LD_INT 5
61267: STR
61268: PUSH
61269: LD_STRING ,
61271: STR
61272: PUSH
61273: LD_VAR 0 7
61277: STR
61278: PUSH
61279: LD_STRING )
61281: STR
61282: PPUSH
61283: CALL_OW 559
// end ; end ;
61287: GO 60903
61289: POP
61290: POP
// end ;
61291: LD_VAR 0 1
61295: RET
// every 20 + 0 0$5 trigger FilterAllUnits ( [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) do
61296: LD_INT 2
61298: PUSH
61299: LD_INT 30
61301: PUSH
61302: LD_INT 0
61304: PUSH
61305: EMPTY
61306: LIST
61307: LIST
61308: PUSH
61309: LD_INT 30
61311: PUSH
61312: LD_INT 1
61314: PUSH
61315: EMPTY
61316: LIST
61317: LIST
61318: PUSH
61319: EMPTY
61320: LIST
61321: LIST
61322: LIST
61323: PPUSH
61324: CALL_OW 69
61328: IFFALSE 61338
61330: GO 61332
61332: DISABLE
// begin enable ;
61333: ENABLE
// UpdateSpectatorBar ;
61334: CALL 60879 0 0
// end ;
61338: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
61339: LD_INT 0
61341: PPUSH
// end ;
61342: LD_VAR 0 12
61346: RET
// export factoryWaypoints , factoryWaypointsDrivers ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
61347: LD_INT 0
61349: PPUSH
61350: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
61351: LD_VAR 0 1
61355: NOT
61356: IFTRUE 61375
61358: PUSH
61359: LD_VAR 0 2
61363: PPUSH
61364: LD_VAR 0 3
61368: PPUSH
61369: CALL_OW 488
61373: NOT
61374: OR
61375: IFTRUE 61410
61377: PUSH
61378: LD_VAR 0 1
61382: PPUSH
61383: CALL_OW 266
61387: PUSH
61388: LD_INT 3
61390: NONEQUAL
61391: IFFALSE 61409
61393: PUSH
61394: LD_VAR 0 1
61398: PPUSH
61399: CALL_OW 247
61403: PUSH
61404: LD_INT 1
61406: EQUAL
61407: NOT
61408: AND
61409: OR
61410: IFFALSE 61414
// exit ;
61412: GO 61696
// if GetType ( factory ) = unit_human then
61414: LD_VAR 0 1
61418: PPUSH
61419: CALL_OW 247
61423: PUSH
61424: LD_INT 1
61426: EQUAL
61427: IFFALSE 61444
// factory := IsInUnit ( factory ) ;
61429: LD_ADDR_VAR 0 1
61433: PUSH
61434: LD_VAR 0 1
61438: PPUSH
61439: CALL_OW 310
61443: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
61444: LD_VAR 0 1
61448: PPUSH
61449: CALL_OW 266
61453: PUSH
61454: LD_INT 3
61456: NONEQUAL
61457: IFFALSE 61461
// exit ;
61459: GO 61696
// for i := 1 to Count ( factoryWaypoints ) do
61461: LD_ADDR_VAR 0 5
61465: PUSH
61466: DOUBLE
61467: LD_INT 1
61469: DEC
61470: ST_TO_ADDR
61471: LD_EXP 59
61475: PPUSH
61476: CALL 12212 0 1
61480: PUSH
61481: FOR_TO
61482: IFFALSE 61644
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
61484: LD_VAR 0 2
61488: PPUSH
61489: LD_VAR 0 3
61493: PPUSH
61494: CALL_OW 428
61498: PUSH
61499: LD_EXP 59
61503: PUSH
61504: LD_VAR 0 5
61508: ARRAY
61509: PUSH
61510: LD_INT 2
61512: ARRAY
61513: EQUAL
61514: IFFALSE 61546
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
61516: LD_ADDR_EXP 59
61520: PUSH
61521: LD_EXP 59
61525: PPUSH
61526: LD_VAR 0 5
61530: PPUSH
61531: CALL_OW 3
61535: ST_TO_ADDR
// UpdateFactoryWaypoints ;
61536: CALL 61701 0 0
// exit ;
61540: POP
61541: POP
61542: GO 61696
// end else
61544: GO 61642
// if factory = factoryWaypoints [ i ] [ 2 ] then
61546: LD_VAR 0 1
61550: PUSH
61551: LD_EXP 59
61555: PUSH
61556: LD_VAR 0 5
61560: ARRAY
61561: PUSH
61562: LD_INT 2
61564: ARRAY
61565: EQUAL
61566: IFFALSE 61642
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
61568: LD_ADDR_EXP 59
61572: PUSH
61573: LD_EXP 59
61577: PPUSH
61578: LD_VAR 0 5
61582: PPUSH
61583: CALL_OW 3
61587: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
61588: LD_ADDR_EXP 59
61592: PUSH
61593: LD_EXP 59
61597: PPUSH
61598: LD_VAR 0 1
61602: PPUSH
61603: CALL_OW 255
61607: PUSH
61608: LD_VAR 0 1
61612: PUSH
61613: LD_VAR 0 2
61617: PUSH
61618: LD_VAR 0 3
61622: PUSH
61623: EMPTY
61624: LIST
61625: LIST
61626: LIST
61627: LIST
61628: PPUSH
61629: CALL 48144 0 2
61633: ST_TO_ADDR
// UpdateFactoryWaypoints ;
61634: CALL 61701 0 0
// exit ;
61638: POP
61639: POP
61640: GO 61696
// end ; end ;
61642: GO 61481
61644: POP
61645: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
61646: LD_ADDR_EXP 59
61650: PUSH
61651: LD_EXP 59
61655: PPUSH
61656: LD_VAR 0 1
61660: PPUSH
61661: CALL_OW 255
61665: PUSH
61666: LD_VAR 0 1
61670: PUSH
61671: LD_VAR 0 2
61675: PUSH
61676: LD_VAR 0 3
61680: PUSH
61681: EMPTY
61682: LIST
61683: LIST
61684: LIST
61685: LIST
61686: PPUSH
61687: CALL 48144 0 2
61691: ST_TO_ADDR
// UpdateFactoryWaypoints ;
61692: CALL 61701 0 0
// end ;
61696: LD_VAR 0 4
61700: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
61701: LD_INT 0
61703: PPUSH
61704: PPUSH
61705: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
61706: LD_STRING resetFactoryWaypoint();
61708: PPUSH
61709: CALL_OW 559
// if factoryWaypoints then
61713: LD_EXP 59
61717: IFFALSE 61838
// begin list := factoryWaypoints ;
61719: LD_ADDR_VAR 0 3
61723: PUSH
61724: LD_EXP 59
61728: ST_TO_ADDR
// for i := 1 to list do
61729: LD_ADDR_VAR 0 2
61733: PUSH
61734: DOUBLE
61735: LD_INT 1
61737: DEC
61738: ST_TO_ADDR
61739: LD_VAR 0 3
61743: PUSH
61744: FOR_TO
61745: IFFALSE 61836
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
61747: LD_STRING setFactoryWaypointXY(
61749: PUSH
61750: LD_VAR 0 3
61754: PUSH
61755: LD_VAR 0 2
61759: ARRAY
61760: PUSH
61761: LD_INT 1
61763: ARRAY
61764: STR
61765: PUSH
61766: LD_STRING ,
61768: STR
61769: PUSH
61770: LD_VAR 0 3
61774: PUSH
61775: LD_VAR 0 2
61779: ARRAY
61780: PUSH
61781: LD_INT 2
61783: ARRAY
61784: STR
61785: PUSH
61786: LD_STRING ,
61788: STR
61789: PUSH
61790: LD_VAR 0 3
61794: PUSH
61795: LD_VAR 0 2
61799: ARRAY
61800: PUSH
61801: LD_INT 3
61803: ARRAY
61804: STR
61805: PUSH
61806: LD_STRING ,
61808: STR
61809: PUSH
61810: LD_VAR 0 3
61814: PUSH
61815: LD_VAR 0 2
61819: ARRAY
61820: PUSH
61821: LD_INT 4
61823: ARRAY
61824: STR
61825: PUSH
61826: LD_STRING )
61828: STR
61829: PPUSH
61830: CALL_OW 559
61834: GO 61744
61836: POP
61837: POP
// end ; end ;
61838: LD_VAR 0 1
61842: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
61843: LD_INT 0
61845: PPUSH
// if HexInfo ( x , y ) = warehouse then
61846: LD_VAR 0 2
61850: PPUSH
61851: LD_VAR 0 3
61855: PPUSH
61856: CALL_OW 428
61860: PUSH
61861: LD_VAR 0 1
61865: EQUAL
61866: IFFALSE 61893
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
61868: LD_ADDR_EXP 61
61872: PUSH
61873: LD_EXP 61
61877: PPUSH
61878: LD_VAR 0 1
61882: PPUSH
61883: LD_INT 0
61885: PPUSH
61886: CALL_OW 1
61890: ST_TO_ADDR
61891: GO 61944
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
61893: LD_ADDR_EXP 61
61897: PUSH
61898: LD_EXP 61
61902: PPUSH
61903: LD_VAR 0 1
61907: PPUSH
61908: LD_VAR 0 1
61912: PPUSH
61913: CALL_OW 255
61917: PUSH
61918: LD_VAR 0 1
61922: PUSH
61923: LD_VAR 0 2
61927: PUSH
61928: LD_VAR 0 3
61932: PUSH
61933: EMPTY
61934: LIST
61935: LIST
61936: LIST
61937: LIST
61938: PPUSH
61939: CALL_OW 1
61943: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
61944: CALL 61953 0 0
// end ;
61948: LD_VAR 0 4
61952: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
61953: LD_INT 0
61955: PPUSH
61956: PPUSH
61957: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
61958: LD_STRING resetWarehouseGatheringPoints();
61960: PPUSH
61961: CALL_OW 559
// if warehouseGatheringPoints then
61965: LD_EXP 61
61969: IFFALSE 62095
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
61971: LD_ADDR_VAR 0 3
61975: PUSH
61976: LD_EXP 61
61980: PPUSH
61981: CALL 52078 0 1
61985: ST_TO_ADDR
// for i := 1 to list do
61986: LD_ADDR_VAR 0 2
61990: PUSH
61991: DOUBLE
61992: LD_INT 1
61994: DEC
61995: ST_TO_ADDR
61996: LD_VAR 0 3
62000: PUSH
62001: FOR_TO
62002: IFFALSE 62093
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
62004: LD_STRING setWarehouseGatheringPointXY(
62006: PUSH
62007: LD_VAR 0 3
62011: PUSH
62012: LD_VAR 0 2
62016: ARRAY
62017: PUSH
62018: LD_INT 1
62020: ARRAY
62021: STR
62022: PUSH
62023: LD_STRING ,
62025: STR
62026: PUSH
62027: LD_VAR 0 3
62031: PUSH
62032: LD_VAR 0 2
62036: ARRAY
62037: PUSH
62038: LD_INT 2
62040: ARRAY
62041: STR
62042: PUSH
62043: LD_STRING ,
62045: STR
62046: PUSH
62047: LD_VAR 0 3
62051: PUSH
62052: LD_VAR 0 2
62056: ARRAY
62057: PUSH
62058: LD_INT 3
62060: ARRAY
62061: STR
62062: PUSH
62063: LD_STRING ,
62065: STR
62066: PUSH
62067: LD_VAR 0 3
62071: PUSH
62072: LD_VAR 0 2
62076: ARRAY
62077: PUSH
62078: LD_INT 4
62080: ARRAY
62081: STR
62082: PUSH
62083: LD_STRING )
62085: STR
62086: PPUSH
62087: CALL_OW 559
62091: GO 62001
62093: POP
62094: POP
// end ; end ;
62095: LD_VAR 0 1
62099: RET
// function ParseMultiDataToLua ( ) ; var i ; begin
62100: LD_INT 0
62102: PPUSH
62103: PPUSH
// if not mpSidePositions then
62104: LD_EXP 7
62108: NOT
62109: IFFALSE 62113
// exit ;
62111: GO 62184
// result :=  ;
62113: LD_ADDR_VAR 0 1
62117: PUSH
62118: LD_STRING 
62120: ST_TO_ADDR
// for i := 1 to 8 do
62121: LD_ADDR_VAR 0 2
62125: PUSH
62126: DOUBLE
62127: LD_INT 1
62129: DEC
62130: ST_TO_ADDR
62131: LD_INT 8
62133: PUSH
62134: FOR_TO
62135: IFFALSE 62165
// begin result := result & mpSidePositions [ i ] & ; ;
62137: LD_ADDR_VAR 0 1
62141: PUSH
62142: LD_VAR 0 1
62146: PUSH
62147: LD_EXP 7
62151: PUSH
62152: LD_VAR 0 2
62156: ARRAY
62157: STR
62158: PUSH
62159: LD_STRING ;
62161: STR
62162: ST_TO_ADDR
// end ;
62163: GO 62134
62165: POP
62166: POP
// ToLua ( setMultiplayerRealPosition(" & result & "); ) ;
62167: LD_STRING setMultiplayerRealPosition("
62169: PUSH
62170: LD_VAR 0 1
62174: STR
62175: PUSH
62176: LD_STRING ");
62178: STR
62179: PPUSH
62180: CALL_OW 559
// end ;
62184: LD_VAR 0 1
62188: RET
