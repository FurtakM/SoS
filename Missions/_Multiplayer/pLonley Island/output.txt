// starting begin ResetFog ;
   0: CALL_OW 335
// InitMultiplayer ;
   4: CALL 6566 0 0
// InitMultiplayerSettings ;
   8: CALL 17 0 0
// StartMultiplayer ;
  12: CALL 6942 0 0
// end ; end_of_file
  16: END
// export function InitMultiplayerSettings ; begin
  17: LD_INT 0
  19: PPUSH
// mpGameSettingsKeys := [ 0 , 1 , 1 , 0 , 1 , 0 , 0 , 0 , 1 , 0 , 1 , 0 , 1 , 1 , 1 , 1 , 0 , 1 , 1 , 1 , 1 ] ;
  20: LD_ADDR_EXP 13
  24: PUSH
  25: LD_INT 0
  27: PUSH
  28: LD_INT 1
  30: PUSH
  31: LD_INT 1
  33: PUSH
  34: LD_INT 0
  36: PUSH
  37: LD_INT 1
  39: PUSH
  40: LD_INT 0
  42: PUSH
  43: LD_INT 0
  45: PUSH
  46: LD_INT 0
  48: PUSH
  49: LD_INT 1
  51: PUSH
  52: LD_INT 0
  54: PUSH
  55: LD_INT 1
  57: PUSH
  58: LD_INT 0
  60: PUSH
  61: LD_INT 1
  63: PUSH
  64: LD_INT 1
  66: PUSH
  67: LD_INT 1
  69: PUSH
  70: LD_INT 1
  72: PUSH
  73: LD_INT 0
  75: PUSH
  76: LD_INT 1
  78: PUSH
  79: LD_INT 1
  81: PUSH
  82: LD_INT 1
  84: PUSH
  85: LD_INT 1
  87: PUSH
  88: EMPTY
  89: LIST
  90: LIST
  91: LIST
  92: LIST
  93: LIST
  94: LIST
  95: LIST
  96: LIST
  97: LIST
  98: LIST
  99: LIST
 100: LIST
 101: LIST
 102: LIST
 103: LIST
 104: LIST
 105: LIST
 106: LIST
 107: LIST
 108: LIST
 109: LIST
 110: ST_TO_ADDR
// mpGameSettingsValues := [ [ 0 , 1 , 2 ] , [ 9 , 12 , 15 , 24 ] , [ 1 , 3 , 5 , 7 ] , [ [ 0 , 0 , 0 ] , [ 100 , 30 , 0 ] , [ 200 , 75 , 10 ] , [ 500 , 150 , 30 ] ] , [ 1 , 2 , 3 , 4 ] , [ 0 , 1 , 2 ] , [ 0 , 1 , 2 ] , [ 250 , 350 , 500 , 1000 , 2000 ] , [ 0 , 1 ] , [ 0 , 5 5$00 , 10 10$00 , 15 15$00 , 20 20$00 , 30 30$00 ] , [ 0 , 1 ] , [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] , [ 0 , 1 ] , [ 0 , 6 6$30 , 3 3$30 ] , [ 0 , 2 , 4 , 6 ] , [ 30 , 50 , 100 ] , [ ] , [ 0 , 1 , 15 15$0 , 25 25$0 , 30 30$0 , 45 45$0 , 60 60$0 , 90 90$0 , 100 100$0 , 120 120$0 , 180 180$0 ] , [ 0 , 1 ] , [ 0 , 1 ] , [ 0 , 3 3$0 , 5 5$0 , 8 8$0 , 10 10$0 , 12 12$0 , 15 15$0 , 20 20$0 , 30 30$0 ] , ] ;
 111: LD_ADDR_EXP 14
 115: PUSH
 116: LD_INT 0
 118: PUSH
 119: LD_INT 1
 121: PUSH
 122: LD_INT 2
 124: PUSH
 125: EMPTY
 126: LIST
 127: LIST
 128: LIST
 129: PUSH
 130: LD_INT 9
 132: PUSH
 133: LD_INT 12
 135: PUSH
 136: LD_INT 15
 138: PUSH
 139: LD_INT 24
 141: PUSH
 142: EMPTY
 143: LIST
 144: LIST
 145: LIST
 146: LIST
 147: PUSH
 148: LD_INT 1
 150: PUSH
 151: LD_INT 3
 153: PUSH
 154: LD_INT 5
 156: PUSH
 157: LD_INT 7
 159: PUSH
 160: EMPTY
 161: LIST
 162: LIST
 163: LIST
 164: LIST
 165: PUSH
 166: LD_INT 0
 168: PUSH
 169: LD_INT 0
 171: PUSH
 172: LD_INT 0
 174: PUSH
 175: EMPTY
 176: LIST
 177: LIST
 178: LIST
 179: PUSH
 180: LD_INT 100
 182: PUSH
 183: LD_INT 30
 185: PUSH
 186: LD_INT 0
 188: PUSH
 189: EMPTY
 190: LIST
 191: LIST
 192: LIST
 193: PUSH
 194: LD_INT 200
 196: PUSH
 197: LD_INT 75
 199: PUSH
 200: LD_INT 10
 202: PUSH
 203: EMPTY
 204: LIST
 205: LIST
 206: LIST
 207: PUSH
 208: LD_INT 500
 210: PUSH
 211: LD_INT 150
 213: PUSH
 214: LD_INT 30
 216: PUSH
 217: EMPTY
 218: LIST
 219: LIST
 220: LIST
 221: PUSH
 222: EMPTY
 223: LIST
 224: LIST
 225: LIST
 226: LIST
 227: PUSH
 228: LD_INT 1
 230: PUSH
 231: LD_INT 2
 233: PUSH
 234: LD_INT 3
 236: PUSH
 237: LD_INT 4
 239: PUSH
 240: EMPTY
 241: LIST
 242: LIST
 243: LIST
 244: LIST
 245: PUSH
 246: LD_INT 0
 248: PUSH
 249: LD_INT 1
 251: PUSH
 252: LD_INT 2
 254: PUSH
 255: EMPTY
 256: LIST
 257: LIST
 258: LIST
 259: PUSH
 260: LD_INT 0
 262: PUSH
 263: LD_INT 1
 265: PUSH
 266: LD_INT 2
 268: PUSH
 269: EMPTY
 270: LIST
 271: LIST
 272: LIST
 273: PUSH
 274: LD_INT 250
 276: PUSH
 277: LD_INT 350
 279: PUSH
 280: LD_INT 500
 282: PUSH
 283: LD_INT 1000
 285: PUSH
 286: LD_INT 2000
 288: PUSH
 289: EMPTY
 290: LIST
 291: LIST
 292: LIST
 293: LIST
 294: LIST
 295: PUSH
 296: LD_INT 0
 298: PUSH
 299: LD_INT 1
 301: PUSH
 302: EMPTY
 303: LIST
 304: LIST
 305: PUSH
 306: LD_INT 0
 308: PUSH
 309: LD_INT 10500
 311: PUSH
 312: LD_INT 21000
 314: PUSH
 315: LD_INT 31500
 317: PUSH
 318: LD_INT 42000
 320: PUSH
 321: LD_INT 63000
 323: PUSH
 324: EMPTY
 325: LIST
 326: LIST
 327: LIST
 328: LIST
 329: LIST
 330: LIST
 331: PUSH
 332: LD_INT 0
 334: PUSH
 335: LD_INT 1
 337: PUSH
 338: EMPTY
 339: LIST
 340: LIST
 341: PUSH
 342: LD_INT 1
 344: NEG
 345: PUSH
 346: LD_INT 350
 348: PUSH
 349: LD_INT 700
 351: PUSH
 352: LD_INT 1400
 354: PUSH
 355: LD_INT 0
 357: PUSH
 358: EMPTY
 359: LIST
 360: LIST
 361: LIST
 362: LIST
 363: LIST
 364: PUSH
 365: LD_INT 0
 367: PUSH
 368: LD_INT 1
 370: PUSH
 371: EMPTY
 372: LIST
 373: LIST
 374: PUSH
 375: LD_INT 0
 377: PUSH
 378: LD_INT 13650
 380: PUSH
 381: LD_INT 7350
 383: PUSH
 384: EMPTY
 385: LIST
 386: LIST
 387: LIST
 388: PUSH
 389: LD_INT 0
 391: PUSH
 392: LD_INT 2
 394: PUSH
 395: LD_INT 4
 397: PUSH
 398: LD_INT 6
 400: PUSH
 401: EMPTY
 402: LIST
 403: LIST
 404: LIST
 405: LIST
 406: PUSH
 407: LD_INT 30
 409: PUSH
 410: LD_INT 50
 412: PUSH
 413: LD_INT 100
 415: PUSH
 416: EMPTY
 417: LIST
 418: LIST
 419: LIST
 420: PUSH
 421: EMPTY
 422: PUSH
 423: LD_INT 0
 425: PUSH
 426: LD_INT 1
 428: PUSH
 429: LD_INT 31500
 431: PUSH
 432: LD_INT 52500
 434: PUSH
 435: LD_INT 63000
 437: PUSH
 438: LD_INT 94500
 440: PUSH
 441: LD_INT 126000
 443: PUSH
 444: LD_INT 189000
 446: PUSH
 447: LD_INT 210000
 449: PUSH
 450: LD_INT 252000
 452: PUSH
 453: LD_INT 378000
 455: PUSH
 456: EMPTY
 457: LIST
 458: LIST
 459: LIST
 460: LIST
 461: LIST
 462: LIST
 463: LIST
 464: LIST
 465: LIST
 466: LIST
 467: LIST
 468: PUSH
 469: LD_INT 0
 471: PUSH
 472: LD_INT 1
 474: PUSH
 475: EMPTY
 476: LIST
 477: LIST
 478: PUSH
 479: LD_INT 0
 481: PUSH
 482: LD_INT 1
 484: PUSH
 485: EMPTY
 486: LIST
 487: LIST
 488: PUSH
 489: LD_INT 0
 491: PUSH
 492: LD_INT 6300
 494: PUSH
 495: LD_INT 10500
 497: PUSH
 498: LD_INT 16800
 500: PUSH
 501: LD_INT 21000
 503: PUSH
 504: LD_INT 25200
 506: PUSH
 507: LD_INT 31500
 509: PUSH
 510: LD_INT 42000
 512: PUSH
 513: LD_INT 63000
 515: PUSH
 516: EMPTY
 517: LIST
 518: LIST
 519: LIST
 520: LIST
 521: LIST
 522: LIST
 523: LIST
 524: LIST
 525: LIST
 526: PUSH
 527: EMPTY
 528: LIST
 529: LIST
 530: LIST
 531: LIST
 532: LIST
 533: LIST
 534: LIST
 535: LIST
 536: LIST
 537: LIST
 538: LIST
 539: LIST
 540: LIST
 541: LIST
 542: LIST
 543: LIST
 544: LIST
 545: LIST
 546: LIST
 547: LIST
 548: LIST
 549: ST_TO_ADDR
// mpGameSettings := [ 0 , 15 , 4 , [ 0 , 0 , 0 ] , 3 , 0 , 0 , 0 , 1 , 0 , 1 , 0 0$20 , 1 , 0 0$20 , 3 , 30 , 0 , 15 15$0 , 1 , 1 , 0 ] ;
 550: LD_ADDR_EXP 15
 554: PUSH
 555: LD_INT 0
 557: PUSH
 558: LD_INT 15
 560: PUSH
 561: LD_INT 4
 563: PUSH
 564: LD_INT 0
 566: PUSH
 567: LD_INT 0
 569: PUSH
 570: LD_INT 0
 572: PUSH
 573: EMPTY
 574: LIST
 575: LIST
 576: LIST
 577: PUSH
 578: LD_INT 3
 580: PUSH
 581: LD_INT 0
 583: PUSH
 584: LD_INT 0
 586: PUSH
 587: LD_INT 0
 589: PUSH
 590: LD_INT 1
 592: PUSH
 593: LD_INT 0
 595: PUSH
 596: LD_INT 1
 598: PUSH
 599: LD_INT 700
 601: PUSH
 602: LD_INT 1
 604: PUSH
 605: LD_INT 700
 607: PUSH
 608: LD_INT 3
 610: PUSH
 611: LD_INT 30
 613: PUSH
 614: LD_INT 0
 616: PUSH
 617: LD_INT 31500
 619: PUSH
 620: LD_INT 1
 622: PUSH
 623: LD_INT 1
 625: PUSH
 626: LD_INT 0
 628: PUSH
 629: EMPTY
 630: LIST
 631: LIST
 632: LIST
 633: LIST
 634: LIST
 635: LIST
 636: LIST
 637: LIST
 638: LIST
 639: LIST
 640: LIST
 641: LIST
 642: LIST
 643: LIST
 644: LIST
 645: LIST
 646: LIST
 647: LIST
 648: LIST
 649: LIST
 650: LIST
 651: ST_TO_ADDR
// mpGameType := GameTypeFamine ;
 652: LD_ADDR_EXP 12
 656: PUSH
 657: LD_INT 5
 659: ST_TO_ADDR
// your_side := 1 ;
 660: LD_ADDR_OWVAR 2
 664: PUSH
 665: LD_INT 1
 667: ST_TO_ADDR
// mpSidePositions := [ 1 , 2 , 0 , 0 , 0 , 6 , 7 , 0 ] ;
 668: LD_ADDR_EXP 16
 672: PUSH
 673: LD_INT 1
 675: PUSH
 676: LD_INT 2
 678: PUSH
 679: LD_INT 0
 681: PUSH
 682: LD_INT 0
 684: PUSH
 685: LD_INT 0
 687: PUSH
 688: LD_INT 6
 690: PUSH
 691: LD_INT 7
 693: PUSH
 694: LD_INT 0
 696: PUSH
 697: EMPTY
 698: LIST
 699: LIST
 700: LIST
 701: LIST
 702: LIST
 703: LIST
 704: LIST
 705: LIST
 706: ST_TO_ADDR
// mpSideTeams := [ 1 , 2 , 0 , 0 , 0 , 2 , 2 , 0 ] ;
 707: LD_ADDR_EXP 17
 711: PUSH
 712: LD_INT 1
 714: PUSH
 715: LD_INT 2
 717: PUSH
 718: LD_INT 0
 720: PUSH
 721: LD_INT 0
 723: PUSH
 724: LD_INT 0
 726: PUSH
 727: LD_INT 2
 729: PUSH
 730: LD_INT 2
 732: PUSH
 733: LD_INT 0
 735: PUSH
 736: EMPTY
 737: LIST
 738: LIST
 739: LIST
 740: LIST
 741: LIST
 742: LIST
 743: LIST
 744: LIST
 745: ST_TO_ADDR
// mpSideNations := [ 1 , 2 , 0 , 0 , 0 , 3 , 1 , 0 ] ;
 746: LD_ADDR_EXP 18
 750: PUSH
 751: LD_INT 1
 753: PUSH
 754: LD_INT 2
 756: PUSH
 757: LD_INT 0
 759: PUSH
 760: LD_INT 0
 762: PUSH
 763: LD_INT 0
 765: PUSH
 766: LD_INT 3
 768: PUSH
 769: LD_INT 1
 771: PUSH
 772: LD_INT 0
 774: PUSH
 775: EMPTY
 776: LIST
 777: LIST
 778: LIST
 779: LIST
 780: LIST
 781: LIST
 782: LIST
 783: LIST
 784: ST_TO_ADDR
// mpTeams := [ [ 1 , 2 ] , [ 6 , 7 ] ] ;
 785: LD_ADDR_EXP 19
 789: PUSH
 790: LD_INT 1
 792: PUSH
 793: LD_INT 2
 795: PUSH
 796: EMPTY
 797: LIST
 798: LIST
 799: PUSH
 800: LD_INT 6
 802: PUSH
 803: LD_INT 7
 805: PUSH
 806: EMPTY
 807: LIST
 808: LIST
 809: PUSH
 810: EMPTY
 811: LIST
 812: LIST
 813: ST_TO_ADDR
// mpTeamGame := false ;
 814: LD_ADDR_EXP 20
 818: PUSH
 819: LD_INT 0
 821: ST_TO_ADDR
// mpMapSize := [ 240 , 270 ] ;
 822: LD_ADDR_EXP 38
 826: PUSH
 827: LD_INT 240
 829: PUSH
 830: LD_INT 270
 832: PUSH
 833: EMPTY
 834: LIST
 835: LIST
 836: ST_TO_ADDR
// end ;
 837: LD_VAR 0 1
 841: RET
// export BuildUpEscape , kingCamArea ; export function GetMultiplayerMapData ( gameType ) ; var i , t , all , depositsValue , startPos ; begin
 842: LD_INT 0
 844: PPUSH
 845: PPUSH
 846: PPUSH
 847: PPUSH
 848: PPUSH
 849: PPUSH
// BuildUpEscape := 0 ;
 850: LD_ADDR_EXP 1
 854: PUSH
 855: LD_INT 0
 857: ST_TO_ADDR
// kingCamArea := 0 ;
 858: LD_ADDR_EXP 2
 862: PUSH
 863: LD_INT 0
 865: ST_TO_ADDR
// mpPeopleAmount := mpGameSettings [ 2 ] ;
 866: LD_ADDR_EXP 33
 870: PUSH
 871: LD_EXP 15
 875: PUSH
 876: LD_INT 2
 878: ARRAY
 879: ST_TO_ADDR
// mpPeopleSkill := mpGameSettings [ 3 ] ;
 880: LD_ADDR_EXP 34
 884: PUSH
 885: LD_EXP 15
 889: PUSH
 890: LD_INT 3
 892: ARRAY
 893: ST_TO_ADDR
// mpShipments := mpGameSettings [ 5 ] ;
 894: LD_ADDR_EXP 36
 898: PUSH
 899: LD_EXP 15
 903: PUSH
 904: LD_INT 5
 906: ARRAY
 907: ST_TO_ADDR
// if mpGameSettings [ 9 ] then
 908: LD_EXP 15
 912: PUSH
 913: LD_INT 9
 915: ARRAY
 916: IFFALSE 1105
// begin mpVehicles := [ [ [ us_light_wheeled , engine_combustion , control_manual , us_machine_gun ] , [ us_light_wheeled , engine_combustion , control_manual , us_light_gun ] , [ us_medium_wheeled , engine_combustion , control_manual , us_cargo_bay ] ] , [ [ ar_light_trike , engine_combustion , control_manual , ar_double_machine_gun ] , [ ar_light_trike , engine_combustion , control_manual , ar_light_gun ] , [ ar_medium_trike , engine_combustion , control_manual , ar_cargo_bay ] ] , [ [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun ] , [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun ] , [ ru_medium_wheeled , engine_combustion , control_manual , ru_cargo_bay ] ] ] ;
 918: LD_ADDR_EXP 45
 922: PUSH
 923: LD_INT 1
 925: PUSH
 926: LD_INT 1
 928: PUSH
 929: LD_INT 1
 931: PUSH
 932: LD_INT 2
 934: PUSH
 935: EMPTY
 936: LIST
 937: LIST
 938: LIST
 939: LIST
 940: PUSH
 941: LD_INT 1
 943: PUSH
 944: LD_INT 1
 946: PUSH
 947: LD_INT 1
 949: PUSH
 950: LD_INT 3
 952: PUSH
 953: EMPTY
 954: LIST
 955: LIST
 956: LIST
 957: LIST
 958: PUSH
 959: LD_INT 2
 961: PUSH
 962: LD_INT 1
 964: PUSH
 965: LD_INT 1
 967: PUSH
 968: LD_INT 12
 970: PUSH
 971: EMPTY
 972: LIST
 973: LIST
 974: LIST
 975: LIST
 976: PUSH
 977: EMPTY
 978: LIST
 979: LIST
 980: LIST
 981: PUSH
 982: LD_INT 12
 984: PUSH
 985: LD_INT 1
 987: PUSH
 988: LD_INT 1
 990: PUSH
 991: LD_INT 24
 993: PUSH
 994: EMPTY
 995: LIST
 996: LIST
 997: LIST
 998: LIST
 999: PUSH
1000: LD_INT 12
1002: PUSH
1003: LD_INT 1
1005: PUSH
1006: LD_INT 1
1008: PUSH
1009: LD_INT 23
1011: PUSH
1012: EMPTY
1013: LIST
1014: LIST
1015: LIST
1016: LIST
1017: PUSH
1018: LD_INT 13
1020: PUSH
1021: LD_INT 1
1023: PUSH
1024: LD_INT 1
1026: PUSH
1027: LD_INT 32
1029: PUSH
1030: EMPTY
1031: LIST
1032: LIST
1033: LIST
1034: LIST
1035: PUSH
1036: EMPTY
1037: LIST
1038: LIST
1039: LIST
1040: PUSH
1041: LD_INT 21
1043: PUSH
1044: LD_INT 1
1046: PUSH
1047: LD_INT 1
1049: PUSH
1050: LD_INT 42
1052: PUSH
1053: EMPTY
1054: LIST
1055: LIST
1056: LIST
1057: LIST
1058: PUSH
1059: LD_INT 21
1061: PUSH
1062: LD_INT 1
1064: PUSH
1065: LD_INT 1
1067: PUSH
1068: LD_INT 42
1070: PUSH
1071: EMPTY
1072: LIST
1073: LIST
1074: LIST
1075: LIST
1076: PUSH
1077: LD_INT 21
1079: PUSH
1080: LD_INT 1
1082: PUSH
1083: LD_INT 1
1085: PUSH
1086: LD_INT 51
1088: PUSH
1089: EMPTY
1090: LIST
1091: LIST
1092: LIST
1093: LIST
1094: PUSH
1095: EMPTY
1096: LIST
1097: LIST
1098: LIST
1099: PUSH
1100: EMPTY
1101: LIST
1102: LIST
1103: LIST
1104: ST_TO_ADDR
// end ; mpSharedVision := mpGameSettings [ 11 ] ;
1105: LD_ADDR_EXP 25
1109: PUSH
1110: LD_EXP 15
1114: PUSH
1115: LD_INT 11
1117: ARRAY
1118: ST_TO_ADDR
// mpSibDetection := mpGameSettings [ 13 ] ;
1119: LD_ADDR_EXP 35
1123: PUSH
1124: LD_EXP 15
1128: PUSH
1129: LD_INT 13
1131: ARRAY
1132: ST_TO_ADDR
// mpRespawn := mpGameSettings [ 14 ] ;
1133: LD_ADDR_EXP 42
1137: PUSH
1138: LD_EXP 15
1142: PUSH
1143: LD_INT 14
1145: ARRAY
1146: ST_TO_ADDR
// mpApemans := mpGameSettings [ 15 ] ;
1147: LD_ADDR_EXP 39
1151: PUSH
1152: LD_EXP 15
1156: PUSH
1157: LD_INT 15
1159: ARRAY
1160: ST_TO_ADDR
// depositsValue := mpGameSettings [ 16 ] ;
1161: LD_ADDR_VAR 0 6
1165: PUSH
1166: LD_EXP 15
1170: PUSH
1171: LD_INT 16
1173: ARRAY
1174: ST_TO_ADDR
// mpSibBomb := mpGameSettings [ 18 ] ;
1175: LD_ADDR_EXP 37
1179: PUSH
1180: LD_EXP 15
1184: PUSH
1185: LD_INT 18
1187: ARRAY
1188: ST_TO_ADDR
// mpArtifacts := mpGameSettings [ 19 ] ;
1189: LD_ADDR_EXP 53
1193: PUSH
1194: LD_EXP 15
1198: PUSH
1199: LD_INT 19
1201: ARRAY
1202: ST_TO_ADDR
// mpTeleports := mpGameSettings [ 20 ] ;
1203: LD_ADDR_EXP 52
1207: PUSH
1208: LD_EXP 15
1212: PUSH
1213: LD_INT 20
1215: ARRAY
1216: ST_TO_ADDR
// mpApemansArea := [ Base1ApeArea , Base2ApeArea , Base3ApeArea , Base4ApeArea , Base5ApeArea , Base6ApeArea , Base7ApeArea , Base8ApeArea ] ;
1217: LD_ADDR_EXP 40
1221: PUSH
1222: LD_INT 7
1224: PUSH
1225: LD_INT 8
1227: PUSH
1228: LD_INT 9
1230: PUSH
1231: LD_INT 10
1233: PUSH
1234: LD_INT 11
1236: PUSH
1237: LD_INT 12
1239: PUSH
1240: LD_INT 13
1242: PUSH
1243: LD_INT 14
1245: PUSH
1246: EMPTY
1247: LIST
1248: LIST
1249: LIST
1250: LIST
1251: LIST
1252: LIST
1253: LIST
1254: LIST
1255: ST_TO_ADDR
// startPos := [ GetBuildingFromArea ( depotArea1 , 0 ) , GetBuildingFromArea ( depotArea2 , 1 ) , GetBuildingFromArea ( depotArea3 , 1 ) , GetBuildingFromArea ( depotArea4 , 2 ) , GetBuildingFromArea ( depotArea5 , 3 ) , GetBuildingFromArea ( depotArea6 , 4 ) , GetBuildingFromArea ( depotArea7 , 4 ) , GetBuildingFromArea ( depotArea8 , 5 ) ] ;
1256: LD_ADDR_VAR 0 7
1260: PUSH
1261: LD_INT 15
1263: PPUSH
1264: LD_INT 0
1266: PPUSH
1267: CALL 63777 0 2
1271: PUSH
1272: LD_INT 16
1274: PPUSH
1275: LD_INT 1
1277: PPUSH
1278: CALL 63777 0 2
1282: PUSH
1283: LD_INT 17
1285: PPUSH
1286: LD_INT 1
1288: PPUSH
1289: CALL 63777 0 2
1293: PUSH
1294: LD_INT 18
1296: PPUSH
1297: LD_INT 2
1299: PPUSH
1300: CALL 63777 0 2
1304: PUSH
1305: LD_INT 19
1307: PPUSH
1308: LD_INT 3
1310: PPUSH
1311: CALL 63777 0 2
1315: PUSH
1316: LD_INT 20
1318: PPUSH
1319: LD_INT 4
1321: PPUSH
1322: CALL 63777 0 2
1326: PUSH
1327: LD_INT 21
1329: PPUSH
1330: LD_INT 4
1332: PPUSH
1333: CALL 63777 0 2
1337: PUSH
1338: LD_INT 22
1340: PPUSH
1341: LD_INT 5
1343: PPUSH
1344: CALL 63777 0 2
1348: PUSH
1349: EMPTY
1350: LIST
1351: LIST
1352: LIST
1353: LIST
1354: LIST
1355: LIST
1356: LIST
1357: LIST
1358: ST_TO_ADDR
// for i := 1 to Count ( startPos ) do
1359: LD_ADDR_VAR 0 3
1363: PUSH
1364: DOUBLE
1365: LD_INT 1
1367: DEC
1368: ST_TO_ADDR
1369: LD_VAR 0 7
1373: PPUSH
1374: CALL 23623 0 1
1378: PUSH
1379: FOR_TO
1380: IFFALSE 1484
// mpStartPos := Replace ( mpStartPos , i , [ ShiftX ( startPos [ i ] [ 1 ] , startPos [ i ] [ 3 ] , 10 ) , ShiftY ( startPos [ i ] [ 2 ] , startPos [ i ] [ 3 ] , 10 ) ] ) ;
1382: LD_ADDR_EXP 30
1386: PUSH
1387: LD_EXP 30
1391: PPUSH
1392: LD_VAR 0 3
1396: PPUSH
1397: LD_VAR 0 7
1401: PUSH
1402: LD_VAR 0 3
1406: ARRAY
1407: PUSH
1408: LD_INT 1
1410: ARRAY
1411: PPUSH
1412: LD_VAR 0 7
1416: PUSH
1417: LD_VAR 0 3
1421: ARRAY
1422: PUSH
1423: LD_INT 3
1425: ARRAY
1426: PPUSH
1427: LD_INT 10
1429: PPUSH
1430: CALL_OW 272
1434: PUSH
1435: LD_VAR 0 7
1439: PUSH
1440: LD_VAR 0 3
1444: ARRAY
1445: PUSH
1446: LD_INT 2
1448: ARRAY
1449: PPUSH
1450: LD_VAR 0 7
1454: PUSH
1455: LD_VAR 0 3
1459: ARRAY
1460: PUSH
1461: LD_INT 3
1463: ARRAY
1464: PPUSH
1465: LD_INT 10
1467: PPUSH
1468: CALL_OW 273
1472: PUSH
1473: EMPTY
1474: LIST
1475: LIST
1476: PPUSH
1477: CALL_OW 1
1481: ST_TO_ADDR
1482: GO 1379
1484: POP
1485: POP
// if mpGameType = GameTypeFamine then
1486: LD_EXP 12
1490: PUSH
1491: LD_INT 5
1493: EQUAL
1494: IFFALSE 1604
// begin FamineDeposits ( [ oilBasicArea , oilMediumArea , oilHardArea ] , [ 3 * depositsValue , 5 * depositsValue , 15 * depositsValue ] , mat_oil ) ;
1496: LD_INT 44
1498: PUSH
1499: LD_INT 46
1501: PUSH
1502: LD_INT 48
1504: PUSH
1505: EMPTY
1506: LIST
1507: LIST
1508: LIST
1509: PPUSH
1510: LD_INT 3
1512: PUSH
1513: LD_VAR 0 6
1517: MUL
1518: PUSH
1519: LD_INT 5
1521: PUSH
1522: LD_VAR 0 6
1526: MUL
1527: PUSH
1528: LD_INT 15
1530: PUSH
1531: LD_VAR 0 6
1535: MUL
1536: PUSH
1537: EMPTY
1538: LIST
1539: LIST
1540: LIST
1541: PPUSH
1542: LD_INT 2
1544: PPUSH
1545: CALL 64645 0 3
// FamineDeposits ( [ sibBasicArea , sibMediumArea , sibHardArea ] , [ 1 * depositsValue , 2.5 * depositsValue , 7.5 * depositsValue ] , mat_siberit ) ;
1549: LD_INT 45
1551: PUSH
1552: LD_INT 47
1554: PUSH
1555: LD_INT 49
1557: PUSH
1558: EMPTY
1559: LIST
1560: LIST
1561: LIST
1562: PPUSH
1563: LD_INT 1
1565: PUSH
1566: LD_VAR 0 6
1570: MUL
1571: PUSH
1572: LD_REAL  2.50000000000000E+0000
1575: PUSH
1576: LD_VAR 0 6
1580: MUL
1581: PUSH
1582: LD_REAL  7.50000000000000E+0000
1585: PUSH
1586: LD_VAR 0 6
1590: MUL
1591: PUSH
1592: EMPTY
1593: LIST
1594: LIST
1595: LIST
1596: PPUSH
1597: LD_INT 3
1599: PPUSH
1600: CALL 64645 0 3
// end ; if mpArtifacts then
1604: LD_EXP 53
1608: IFFALSE 1614
// InitArtifact ;
1610: CALL 2804 0 0
// for i := 1 to 8 do
1614: LD_ADDR_VAR 0 3
1618: PUSH
1619: DOUBLE
1620: LD_INT 1
1622: DEC
1623: ST_TO_ADDR
1624: LD_INT 8
1626: PUSH
1627: FOR_TO
1628: IFFALSE 1671
// for t in [ tech_SolEng , tech_SolPow ] do
1630: LD_ADDR_VAR 0 4
1634: PUSH
1635: LD_INT 45
1637: PUSH
1638: LD_INT 35
1640: PUSH
1641: EMPTY
1642: LIST
1643: LIST
1644: PUSH
1645: FOR_IN
1646: IFFALSE 1667
// SetTech ( t , i , state_disabled ) ;
1648: LD_VAR 0 4
1652: PPUSH
1653: LD_VAR 0 3
1657: PPUSH
1658: LD_INT 0
1660: PPUSH
1661: CALL_OW 322
1665: GO 1645
1667: POP
1668: POP
1669: GO 1627
1671: POP
1672: POP
// end ;
1673: LD_VAR 0 2
1677: RET
// every 0 0$2 marked mpActive do var i , j , x , phase , additionalSpawnPhase , f , tmp , areas , areasPhase , time , normalTime , delayTime , maxTime ;
1678: GO 1680
1680: DISABLE
1681: LD_INT 0
1683: PPUSH
1684: PPUSH
1685: PPUSH
1686: PPUSH
1687: PPUSH
1688: PPUSH
1689: PPUSH
1690: PPUSH
1691: PPUSH
1692: PPUSH
1693: PPUSH
1694: PPUSH
1695: PPUSH
// begin if not mpShipments then
1696: LD_EXP 36
1700: NOT
1701: IFFALSE 1705
// exit ;
1703: GO 2462
// case mpShipments of 1 :
1705: LD_EXP 36
1709: PUSH
1710: LD_INT 1
1712: DOUBLE
1713: EQUAL
1714: IFTRUE 1718
1716: GO 1761
1718: POP
// begin time := 0 0$30 ;
1719: LD_ADDR_VAR 0 10
1723: PUSH
1724: LD_INT 1050
1726: ST_TO_ADDR
// normalTime := 0 0$30 ;
1727: LD_ADDR_VAR 0 11
1731: PUSH
1732: LD_INT 1050
1734: ST_TO_ADDR
// maxTime := 1 1$20 ;
1735: LD_ADDR_VAR 0 13
1739: PUSH
1740: LD_INT 2800
1742: ST_TO_ADDR
// delayTime := 0 0$5 ;
1743: LD_ADDR_VAR 0 12
1747: PUSH
1748: LD_INT 175
1750: ST_TO_ADDR
// additionalSpawnPhase := 10 ;
1751: LD_ADDR_VAR 0 5
1755: PUSH
1756: LD_INT 10
1758: ST_TO_ADDR
// end ; 2 :
1759: GO 1915
1761: LD_INT 2
1763: DOUBLE
1764: EQUAL
1765: IFTRUE 1769
1767: GO 1812
1769: POP
// begin time := 0 0$25 ;
1770: LD_ADDR_VAR 0 10
1774: PUSH
1775: LD_INT 875
1777: ST_TO_ADDR
// normalTime := 0 0$25 ;
1778: LD_ADDR_VAR 0 11
1782: PUSH
1783: LD_INT 875
1785: ST_TO_ADDR
// maxTime := 1 1$10 ;
1786: LD_ADDR_VAR 0 13
1790: PUSH
1791: LD_INT 2450
1793: ST_TO_ADDR
// delayTime := 0 0$4 ;
1794: LD_ADDR_VAR 0 12
1798: PUSH
1799: LD_INT 140
1801: ST_TO_ADDR
// additionalSpawnPhase := 8 ;
1802: LD_ADDR_VAR 0 5
1806: PUSH
1807: LD_INT 8
1809: ST_TO_ADDR
// end ; 3 :
1810: GO 1915
1812: LD_INT 3
1814: DOUBLE
1815: EQUAL
1816: IFTRUE 1820
1818: GO 1863
1820: POP
// begin time := 0 0$20 ;
1821: LD_ADDR_VAR 0 10
1825: PUSH
1826: LD_INT 700
1828: ST_TO_ADDR
// normalTime := 0 0$20 ;
1829: LD_ADDR_VAR 0 11
1833: PUSH
1834: LD_INT 700
1836: ST_TO_ADDR
// maxTime := 1 1$00 ;
1837: LD_ADDR_VAR 0 13
1841: PUSH
1842: LD_INT 2100
1844: ST_TO_ADDR
// delayTime := 0 0$3 ;
1845: LD_ADDR_VAR 0 12
1849: PUSH
1850: LD_INT 105
1852: ST_TO_ADDR
// additionalSpawnPhase := 6 ;
1853: LD_ADDR_VAR 0 5
1857: PUSH
1858: LD_INT 6
1860: ST_TO_ADDR
// end ; 4 :
1861: GO 1915
1863: LD_INT 4
1865: DOUBLE
1866: EQUAL
1867: IFTRUE 1871
1869: GO 1914
1871: POP
// begin time := 0 0$15 ;
1872: LD_ADDR_VAR 0 10
1876: PUSH
1877: LD_INT 525
1879: ST_TO_ADDR
// normalTime := 0 0$15 ;
1880: LD_ADDR_VAR 0 11
1884: PUSH
1885: LD_INT 525
1887: ST_TO_ADDR
// maxTime := 0 0$55 ;
1888: LD_ADDR_VAR 0 13
1892: PUSH
1893: LD_INT 1925
1895: ST_TO_ADDR
// delayTime := 0 0$2 ;
1896: LD_ADDR_VAR 0 12
1900: PUSH
1901: LD_INT 70
1903: ST_TO_ADDR
// additionalSpawnPhase := 5 ;
1904: LD_ADDR_VAR 0 5
1908: PUSH
1909: LD_INT 5
1911: ST_TO_ADDR
// end ; end ;
1912: GO 1915
1914: POP
// areas := [ IslandArea1 , IslandArea2 ] ;
1915: LD_ADDR_VAR 0 8
1919: PUSH
1920: LD_INT 23
1922: PUSH
1923: LD_INT 24
1925: PUSH
1926: EMPTY
1927: LIST
1928: LIST
1929: ST_TO_ADDR
// areasPhase := [ [ ] , [ ] ] ;
1930: LD_ADDR_VAR 0 9
1934: PUSH
1935: EMPTY
1936: PUSH
1937: EMPTY
1938: PUSH
1939: EMPTY
1940: LIST
1941: LIST
1942: ST_TO_ADDR
// tmp := [ [ CR1Phase1 , CR2Phase1 , CR3Phase1 , CR4Phase1 , CR5Phase1 , CR6Phase1 , CR7Phase1 , CR8Phase1 ] , [ CR1Phase2 , CR2Phase2 , CR3Phase2 , CR4Phase2 , CR5Phase2 , CR6Phase2 , CR7Phase2 , CR8Phase2 ] ] ;
1943: LD_ADDR_VAR 0 7
1947: PUSH
1948: LD_INT 28
1950: PUSH
1951: LD_INT 29
1953: PUSH
1954: LD_INT 30
1956: PUSH
1957: LD_INT 31
1959: PUSH
1960: LD_INT 32
1962: PUSH
1963: LD_INT 33
1965: PUSH
1966: LD_INT 34
1968: PUSH
1969: LD_INT 35
1971: PUSH
1972: EMPTY
1973: LIST
1974: LIST
1975: LIST
1976: LIST
1977: LIST
1978: LIST
1979: LIST
1980: LIST
1981: PUSH
1982: LD_INT 36
1984: PUSH
1985: LD_INT 37
1987: PUSH
1988: LD_INT 38
1990: PUSH
1991: LD_INT 39
1993: PUSH
1994: LD_INT 40
1996: PUSH
1997: LD_INT 41
1999: PUSH
2000: LD_INT 42
2002: PUSH
2003: LD_INT 43
2005: PUSH
2006: EMPTY
2007: LIST
2008: LIST
2009: LIST
2010: LIST
2011: LIST
2012: LIST
2013: LIST
2014: LIST
2015: PUSH
2016: EMPTY
2017: LIST
2018: LIST
2019: ST_TO_ADDR
// for i := 1 to 8 do
2020: LD_ADDR_VAR 0 1
2024: PUSH
2025: DOUBLE
2026: LD_INT 1
2028: DEC
2029: ST_TO_ADDR
2030: LD_INT 8
2032: PUSH
2033: FOR_TO
2034: IFFALSE 2147
// begin if not mpSidePositions [ i ] then
2036: LD_EXP 16
2040: PUSH
2041: LD_VAR 0 1
2045: ARRAY
2046: NOT
2047: IFFALSE 2051
// continue ;
2049: GO 2033
// for j := 1 to 2 do
2051: LD_ADDR_VAR 0 2
2055: PUSH
2056: DOUBLE
2057: LD_INT 1
2059: DEC
2060: ST_TO_ADDR
2061: LD_INT 2
2063: PUSH
2064: FOR_TO
2065: IFFALSE 2143
// areasPhase := Replace ( areasPhase , j , Replace ( areasPhase [ j ] , areasPhase [ j ] + 1 , tmp [ j ] [ mpSidePositions [ i ] ] ) ) ;
2067: LD_ADDR_VAR 0 9
2071: PUSH
2072: LD_VAR 0 9
2076: PPUSH
2077: LD_VAR 0 2
2081: PPUSH
2082: LD_VAR 0 9
2086: PUSH
2087: LD_VAR 0 2
2091: ARRAY
2092: PPUSH
2093: LD_VAR 0 9
2097: PUSH
2098: LD_VAR 0 2
2102: ARRAY
2103: PUSH
2104: LD_INT 1
2106: PLUS
2107: PPUSH
2108: LD_VAR 0 7
2112: PUSH
2113: LD_VAR 0 2
2117: ARRAY
2118: PUSH
2119: LD_EXP 16
2123: PUSH
2124: LD_VAR 0 1
2128: ARRAY
2129: ARRAY
2130: PPUSH
2131: CALL_OW 1
2135: PPUSH
2136: CALL_OW 1
2140: ST_TO_ADDR
2141: GO 2064
2143: POP
2144: POP
// end ;
2145: GO 2033
2147: POP
2148: POP
// x := 1 ;
2149: LD_ADDR_VAR 0 3
2153: PUSH
2154: LD_INT 1
2156: ST_TO_ADDR
// phase := 1 ;
2157: LD_ADDR_VAR 0 4
2161: PUSH
2162: LD_INT 1
2164: ST_TO_ADDR
// repeat wait ( time ) ;
2165: LD_VAR 0 10
2169: PPUSH
2170: CALL_OW 67
// x := Inc ( x ) ;
2174: LD_ADDR_VAR 0 3
2178: PUSH
2179: LD_VAR 0 3
2183: PPUSH
2184: CALL 60593 0 1
2188: ST_TO_ADDR
// f := Inc ( f ) ;
2189: LD_ADDR_VAR 0 6
2193: PUSH
2194: LD_VAR 0 6
2198: PPUSH
2199: CALL 60593 0 1
2203: ST_TO_ADDR
// if x > 5 then
2204: LD_VAR 0 3
2208: PUSH
2209: LD_INT 5
2211: GREATER
2212: IFFALSE 2222
// x := 1 ;
2214: LD_ADDR_VAR 0 3
2218: PUSH
2219: LD_INT 1
2221: ST_TO_ADDR
// if f mod 20 = 0 then
2222: LD_VAR 0 6
2226: PUSH
2227: LD_INT 20
2229: MOD
2230: PUSH
2231: LD_INT 0
2233: EQUAL
2234: IFFALSE 2251
// phase := Inc ( phase ) ;
2236: LD_ADDR_VAR 0 4
2240: PUSH
2241: LD_VAR 0 4
2245: PPUSH
2246: CALL 60593 0 1
2250: ST_TO_ADDR
// if f mod additionalSpawnPhase = 0 then
2251: LD_VAR 0 6
2255: PUSH
2256: LD_VAR 0 5
2260: MOD
2261: PUSH
2262: LD_INT 0
2264: EQUAL
2265: IFFALSE 2282
// CreateCratesArea ( x , worldCratesArea , true ) ;
2267: LD_VAR 0 3
2271: PPUSH
2272: LD_INT 61
2274: PPUSH
2275: LD_INT 1
2277: PPUSH
2278: CALL_OW 55
// if phase > 2 then
2282: LD_VAR 0 4
2286: PUSH
2287: LD_INT 2
2289: GREATER
2290: IFFALSE 2300
// phase := 1 ;
2292: LD_ADDR_VAR 0 4
2296: PUSH
2297: LD_INT 1
2299: ST_TO_ADDR
// for i in areas do
2300: LD_ADDR_VAR 0 1
2304: PUSH
2305: LD_VAR 0 8
2309: PUSH
2310: FOR_IN
2311: IFFALSE 2360
// begin if GetResourceArea ( i , mat_cans ) < 15 and phase = 2 then
2313: LD_VAR 0 1
2317: PPUSH
2318: LD_INT 1
2320: PPUSH
2321: CALL_OW 287
2325: PUSH
2326: LD_INT 15
2328: LESS
2329: PUSH
2330: LD_VAR 0 4
2334: PUSH
2335: LD_INT 2
2337: EQUAL
2338: AND
2339: IFFALSE 2358
// begin CreateCratesArea ( x , i , true ) ;
2341: LD_VAR 0 3
2345: PPUSH
2346: LD_VAR 0 1
2350: PPUSH
2351: LD_INT 1
2353: PPUSH
2354: CALL_OW 55
// end ; end ;
2358: GO 2310
2360: POP
2361: POP
// for i in areasPhase [ phase ] do
2362: LD_ADDR_VAR 0 1
2366: PUSH
2367: LD_VAR 0 9
2371: PUSH
2372: LD_VAR 0 4
2376: ARRAY
2377: PUSH
2378: FOR_IN
2379: IFFALSE 2418
// begin if GetResourceArea ( i , mat_cans ) < 25 then
2381: LD_VAR 0 1
2385: PPUSH
2386: LD_INT 1
2388: PPUSH
2389: CALL_OW 287
2393: PUSH
2394: LD_INT 25
2396: LESS
2397: IFFALSE 2416
// begin CreateCratesArea ( x , i , true ) ;
2399: LD_VAR 0 3
2403: PPUSH
2404: LD_VAR 0 1
2408: PPUSH
2409: LD_INT 1
2411: PPUSH
2412: CALL_OW 55
// end ; end ;
2416: GO 2378
2418: POP
2419: POP
// time := time + delayTime ;
2420: LD_ADDR_VAR 0 10
2424: PUSH
2425: LD_VAR 0 10
2429: PUSH
2430: LD_VAR 0 12
2434: PLUS
2435: ST_TO_ADDR
// if time > maxTime then
2436: LD_VAR 0 10
2440: PUSH
2441: LD_VAR 0 13
2445: GREATER
2446: IFFALSE 2458
// time := normalTime ;
2448: LD_ADDR_VAR 0 10
2452: PUSH
2453: LD_VAR 0 11
2457: ST_TO_ADDR
// until false ;
2458: LD_INT 0
2460: IFFALSE 2165
// end ;
2462: PPOPN 13
2464: END
// every 0 0$2 trigger mpTeleports do var i , tmp ;
2465: LD_EXP 52
2469: IFFALSE 2663
2471: GO 2473
2473: DISABLE
2474: LD_INT 0
2476: PPUSH
2477: PPUSH
// begin enable ;
2478: ENABLE
// tmp := [ [ T1TeleportArea , T4TeleportExitArea ] , [ T2TeleportArea , T3TeleportExitArea ] , [ T3TeleportArea , T2TeleportExitArea ] , [ T4TeleportArea , T1TeleportExitArea ] , [ T5TeleportArea , T6TeleportExitArea ] , [ T6TeleportArea , T5TeleportExitArea ] , [ T7TeleportArea , IslandArea1 ] , [ T8TeleportArea , IslandArea1 ] , [ T9TeleportArea , IslandArea1 ] , [ T10TeleportArea , IslandArea1 ] ] ;
2479: LD_ADDR_VAR 0 2
2483: PUSH
2484: LD_INT 1
2486: PUSH
2487: LD_INT 53
2489: PUSH
2490: EMPTY
2491: LIST
2492: LIST
2493: PUSH
2494: LD_INT 2
2496: PUSH
2497: LD_INT 52
2499: PUSH
2500: EMPTY
2501: LIST
2502: LIST
2503: PUSH
2504: LD_INT 3
2506: PUSH
2507: LD_INT 51
2509: PUSH
2510: EMPTY
2511: LIST
2512: LIST
2513: PUSH
2514: LD_INT 4
2516: PUSH
2517: LD_INT 50
2519: PUSH
2520: EMPTY
2521: LIST
2522: LIST
2523: PUSH
2524: LD_INT 5
2526: PUSH
2527: LD_INT 55
2529: PUSH
2530: EMPTY
2531: LIST
2532: LIST
2533: PUSH
2534: LD_INT 6
2536: PUSH
2537: LD_INT 54
2539: PUSH
2540: EMPTY
2541: LIST
2542: LIST
2543: PUSH
2544: LD_INT 57
2546: PUSH
2547: LD_INT 23
2549: PUSH
2550: EMPTY
2551: LIST
2552: LIST
2553: PUSH
2554: LD_INT 58
2556: PUSH
2557: LD_INT 23
2559: PUSH
2560: EMPTY
2561: LIST
2562: LIST
2563: PUSH
2564: LD_INT 59
2566: PUSH
2567: LD_INT 23
2569: PUSH
2570: EMPTY
2571: LIST
2572: LIST
2573: PUSH
2574: LD_INT 60
2576: PUSH
2577: LD_INT 23
2579: PUSH
2580: EMPTY
2581: LIST
2582: LIST
2583: PUSH
2584: EMPTY
2585: LIST
2586: LIST
2587: LIST
2588: LIST
2589: LIST
2590: LIST
2591: LIST
2592: LIST
2593: LIST
2594: LIST
2595: ST_TO_ADDR
// for i in tmp do
2596: LD_ADDR_VAR 0 1
2600: PUSH
2601: LD_VAR 0 2
2605: PUSH
2606: FOR_IN
2607: IFFALSE 2661
// CheckBuildUpArea ( i [ 1 ] , i [ 2 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) ;
2609: LD_VAR 0 1
2613: PUSH
2614: LD_INT 1
2616: ARRAY
2617: PPUSH
2618: LD_VAR 0 1
2622: PUSH
2623: LD_INT 2
2625: ARRAY
2626: PPUSH
2627: LD_INT 2
2629: PUSH
2630: LD_INT 21
2632: PUSH
2633: LD_INT 1
2635: PUSH
2636: EMPTY
2637: LIST
2638: LIST
2639: PUSH
2640: LD_INT 21
2642: PUSH
2643: LD_INT 2
2645: PUSH
2646: EMPTY
2647: LIST
2648: LIST
2649: PUSH
2650: EMPTY
2651: LIST
2652: LIST
2653: LIST
2654: PPUSH
2655: CALL_OW 513
2659: GO 2606
2661: POP
2662: POP
// end ; end_of_file
2663: PPOPN 2
2665: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
2666: LD_VAR 0 1
2670: PPUSH
2671: CALL 16073 0 1
// Multiplayer_UnitDestroyed ( un ) ;
2675: LD_VAR 0 1
2679: PPUSH
2680: CALL 11553 0 1
// end ;
2684: PPOPN 1
2686: END
// on UnitKamikazed ( un ) do begin SOS_UnitKamikazed ( un ) ;
2687: LD_VAR 0 1
2691: PPUSH
2692: CALL 16090 0 1
// end ;
2696: PPOPN 1
2698: END
// on BuildingComplete ( b ) do Multiplayer_BuildingComplete ( b ) ;
2699: LD_VAR 0 1
2703: PPUSH
2704: CALL 12218 0 1
2708: PPOPN 1
2710: END
// on VehicleConstructed ( vehicle , factory ) do SOS_VehicleConstructed ( vehicle , factory ) ;
2711: LD_VAR 0 1
2715: PPUSH
2716: LD_VAR 0 2
2720: PPUSH
2721: CALL 16131 0 2
2725: PPOPN 2
2727: END
// on BuildingCaptured ( building , oldSide , unit ) do Multiplayer_BuildingCaptured ( building , oldSide , unit ) ;
2728: LD_VAR 0 1
2732: PPUSH
2733: LD_VAR 0 2
2737: PPUSH
2738: LD_VAR 0 3
2742: PPUSH
2743: CALL 12271 0 3
2747: PPOPN 3
2749: END
// on OilExtracted ( building , side , base , amount ) do Multiplayer_OilExtracted ( building , side , base , amount ) ;
2750: LD_VAR 0 1
2754: PPUSH
2755: LD_VAR 0 2
2759: PPUSH
2760: LD_VAR 0 3
2764: PPUSH
2765: LD_VAR 0 4
2769: PPUSH
2770: CALL 12420 0 4
2774: PPOPN 4
2776: END
// on SibExtracted ( building , side , base , amount ) do Multiplayer_SibExtracted ( building , side , base , amount ) ; end_of_file
2777: LD_VAR 0 1
2781: PPUSH
2782: LD_VAR 0 2
2786: PPUSH
2787: LD_VAR 0 3
2791: PPUSH
2792: LD_VAR 0 4
2796: PPUSH
2797: CALL 12656 0 4
2801: PPOPN 4
2803: END
// export artifactsPos , artifactsRecharge , artifactsSibCost , artifactsResearched , artifactsReady ; export artifactsResDifficulty , artifactsResProgress , artifactsButtons , artifactsLabsWorking ; export function InitArtifact ; var i ; begin
2804: LD_INT 0
2806: PPUSH
2807: PPUSH
// for i := 1 to 8 do
2808: LD_ADDR_VAR 0 2
2812: PUSH
2813: DOUBLE
2814: LD_INT 1
2816: DEC
2817: ST_TO_ADDR
2818: LD_INT 8
2820: PUSH
2821: FOR_TO
2822: IFFALSE 2838
// SetArtifactRes ( i , true ) ;
2824: LD_VAR 0 2
2828: PPUSH
2829: LD_INT 1
2831: PPUSH
2832: CALL_OW 467
2836: GO 2821
2838: POP
2839: POP
// CreateResourcesArea ( mat_artifact , 3 , ArtifactArea1 , false ) ;
2840: LD_INT 4
2842: PPUSH
2843: LD_INT 3
2845: PPUSH
2846: LD_INT 25
2848: PPUSH
2849: LD_INT 0
2851: PPUSH
2852: CALL_OW 59
// CreateResourcesArea ( mat_artifact , 4 , ArtifactArea2 , false ) ;
2856: LD_INT 4
2858: PPUSH
2859: LD_INT 4
2861: PPUSH
2862: LD_INT 26
2864: PPUSH
2865: LD_INT 0
2867: PPUSH
2868: CALL_OW 59
// CreateResourcesArea ( mat_artifact , 5 , ArtifactArea3 , false ) ;
2872: LD_INT 4
2874: PPUSH
2875: LD_INT 5
2877: PPUSH
2878: LD_INT 27
2880: PPUSH
2881: LD_INT 0
2883: PPUSH
2884: CALL_OW 59
// artifactsPos := [ [ ] , [ ] , [ ] ] ;
2888: LD_ADDR_EXP 3
2892: PUSH
2893: EMPTY
2894: PUSH
2895: EMPTY
2896: PUSH
2897: EMPTY
2898: PUSH
2899: EMPTY
2900: LIST
2901: LIST
2902: LIST
2903: ST_TO_ADDR
// artifactsRecharge := [ 0 0$30 , 1 1$20 , 5 5$00 ] ;
2904: LD_ADDR_EXP 4
2908: PUSH
2909: LD_INT 1050
2911: PUSH
2912: LD_INT 2800
2914: PUSH
2915: LD_INT 10500
2917: PUSH
2918: EMPTY
2919: LIST
2920: LIST
2921: LIST
2922: ST_TO_ADDR
// artifactsSibCost := [ 10 , 35 , 100 ] ;
2923: LD_ADDR_EXP 5
2927: PUSH
2928: LD_INT 10
2930: PUSH
2931: LD_INT 35
2933: PUSH
2934: LD_INT 100
2936: PUSH
2937: EMPTY
2938: LIST
2939: LIST
2940: LIST
2941: ST_TO_ADDR
// artifactsResDifficulty := [ 300 , 500 , 800 ] ;
2942: LD_ADDR_EXP 8
2946: PUSH
2947: LD_INT 300
2949: PUSH
2950: LD_INT 500
2952: PUSH
2953: LD_INT 800
2955: PUSH
2956: EMPTY
2957: LIST
2958: LIST
2959: LIST
2960: ST_TO_ADDR
// artifactsLabsWorking := [ [ ] , [ ] , [ ] ] ;
2961: LD_ADDR_EXP 11
2965: PUSH
2966: EMPTY
2967: PUSH
2968: EMPTY
2969: PUSH
2970: EMPTY
2971: PUSH
2972: EMPTY
2973: LIST
2974: LIST
2975: LIST
2976: ST_TO_ADDR
// artifactsResearched := [ [ 0 , 0 , 0 ] , [ 0 , 0 , 0 ] , [ 0 , 0 , 0 ] , [ 0 , 0 , 0 ] , [ 0 , 0 , 0 ] , [ 0 , 0 , 0 ] , [ 0 , 0 , 0 ] , [ 0 , 0 , 0 ] ] ;
2977: LD_ADDR_EXP 6
2981: PUSH
2982: LD_INT 0
2984: PUSH
2985: LD_INT 0
2987: PUSH
2988: LD_INT 0
2990: PUSH
2991: EMPTY
2992: LIST
2993: LIST
2994: LIST
2995: PUSH
2996: LD_INT 0
2998: PUSH
2999: LD_INT 0
3001: PUSH
3002: LD_INT 0
3004: PUSH
3005: EMPTY
3006: LIST
3007: LIST
3008: LIST
3009: PUSH
3010: LD_INT 0
3012: PUSH
3013: LD_INT 0
3015: PUSH
3016: LD_INT 0
3018: PUSH
3019: EMPTY
3020: LIST
3021: LIST
3022: LIST
3023: PUSH
3024: LD_INT 0
3026: PUSH
3027: LD_INT 0
3029: PUSH
3030: LD_INT 0
3032: PUSH
3033: EMPTY
3034: LIST
3035: LIST
3036: LIST
3037: PUSH
3038: LD_INT 0
3040: PUSH
3041: LD_INT 0
3043: PUSH
3044: LD_INT 0
3046: PUSH
3047: EMPTY
3048: LIST
3049: LIST
3050: LIST
3051: PUSH
3052: LD_INT 0
3054: PUSH
3055: LD_INT 0
3057: PUSH
3058: LD_INT 0
3060: PUSH
3061: EMPTY
3062: LIST
3063: LIST
3064: LIST
3065: PUSH
3066: LD_INT 0
3068: PUSH
3069: LD_INT 0
3071: PUSH
3072: LD_INT 0
3074: PUSH
3075: EMPTY
3076: LIST
3077: LIST
3078: LIST
3079: PUSH
3080: LD_INT 0
3082: PUSH
3083: LD_INT 0
3085: PUSH
3086: LD_INT 0
3088: PUSH
3089: EMPTY
3090: LIST
3091: LIST
3092: LIST
3093: PUSH
3094: EMPTY
3095: LIST
3096: LIST
3097: LIST
3098: LIST
3099: LIST
3100: LIST
3101: LIST
3102: LIST
3103: ST_TO_ADDR
// artifactsResProgress := [ [ 0 , 0 , 0 ] , [ 0 , 0 , 0 ] , [ 0 , 0 , 0 ] , [ 0 , 0 , 0 ] , [ 0 , 0 , 0 ] , [ 0 , 0 , 0 ] , [ 0 , 0 , 0 ] , [ 0 , 0 , 0 ] ] ;
3104: LD_ADDR_EXP 9
3108: PUSH
3109: LD_INT 0
3111: PUSH
3112: LD_INT 0
3114: PUSH
3115: LD_INT 0
3117: PUSH
3118: EMPTY
3119: LIST
3120: LIST
3121: LIST
3122: PUSH
3123: LD_INT 0
3125: PUSH
3126: LD_INT 0
3128: PUSH
3129: LD_INT 0
3131: PUSH
3132: EMPTY
3133: LIST
3134: LIST
3135: LIST
3136: PUSH
3137: LD_INT 0
3139: PUSH
3140: LD_INT 0
3142: PUSH
3143: LD_INT 0
3145: PUSH
3146: EMPTY
3147: LIST
3148: LIST
3149: LIST
3150: PUSH
3151: LD_INT 0
3153: PUSH
3154: LD_INT 0
3156: PUSH
3157: LD_INT 0
3159: PUSH
3160: EMPTY
3161: LIST
3162: LIST
3163: LIST
3164: PUSH
3165: LD_INT 0
3167: PUSH
3168: LD_INT 0
3170: PUSH
3171: LD_INT 0
3173: PUSH
3174: EMPTY
3175: LIST
3176: LIST
3177: LIST
3178: PUSH
3179: LD_INT 0
3181: PUSH
3182: LD_INT 0
3184: PUSH
3185: LD_INT 0
3187: PUSH
3188: EMPTY
3189: LIST
3190: LIST
3191: LIST
3192: PUSH
3193: LD_INT 0
3195: PUSH
3196: LD_INT 0
3198: PUSH
3199: LD_INT 0
3201: PUSH
3202: EMPTY
3203: LIST
3204: LIST
3205: LIST
3206: PUSH
3207: LD_INT 0
3209: PUSH
3210: LD_INT 0
3212: PUSH
3213: LD_INT 0
3215: PUSH
3216: EMPTY
3217: LIST
3218: LIST
3219: LIST
3220: PUSH
3221: EMPTY
3222: LIST
3223: LIST
3224: LIST
3225: LIST
3226: LIST
3227: LIST
3228: LIST
3229: LIST
3230: ST_TO_ADDR
// artifactsReady := [ [ 0 , 0 , 0 ] , [ 0 , 0 , 0 ] , [ 0 , 0 , 0 ] , [ 0 , 0 , 0 ] , [ 0 , 0 , 0 ] , [ 0 , 0 , 0 ] , [ 0 , 0 , 0 ] , [ 0 , 0 , 0 ] ] ;
3231: LD_ADDR_EXP 7
3235: PUSH
3236: LD_INT 0
3238: PUSH
3239: LD_INT 0
3241: PUSH
3242: LD_INT 0
3244: PUSH
3245: EMPTY
3246: LIST
3247: LIST
3248: LIST
3249: PUSH
3250: LD_INT 0
3252: PUSH
3253: LD_INT 0
3255: PUSH
3256: LD_INT 0
3258: PUSH
3259: EMPTY
3260: LIST
3261: LIST
3262: LIST
3263: PUSH
3264: LD_INT 0
3266: PUSH
3267: LD_INT 0
3269: PUSH
3270: LD_INT 0
3272: PUSH
3273: EMPTY
3274: LIST
3275: LIST
3276: LIST
3277: PUSH
3278: LD_INT 0
3280: PUSH
3281: LD_INT 0
3283: PUSH
3284: LD_INT 0
3286: PUSH
3287: EMPTY
3288: LIST
3289: LIST
3290: LIST
3291: PUSH
3292: LD_INT 0
3294: PUSH
3295: LD_INT 0
3297: PUSH
3298: LD_INT 0
3300: PUSH
3301: EMPTY
3302: LIST
3303: LIST
3304: LIST
3305: PUSH
3306: LD_INT 0
3308: PUSH
3309: LD_INT 0
3311: PUSH
3312: LD_INT 0
3314: PUSH
3315: EMPTY
3316: LIST
3317: LIST
3318: LIST
3319: PUSH
3320: LD_INT 0
3322: PUSH
3323: LD_INT 0
3325: PUSH
3326: LD_INT 0
3328: PUSH
3329: EMPTY
3330: LIST
3331: LIST
3332: LIST
3333: PUSH
3334: LD_INT 0
3336: PUSH
3337: LD_INT 0
3339: PUSH
3340: LD_INT 0
3342: PUSH
3343: EMPTY
3344: LIST
3345: LIST
3346: LIST
3347: PUSH
3348: EMPTY
3349: LIST
3350: LIST
3351: LIST
3352: LIST
3353: LIST
3354: LIST
3355: LIST
3356: LIST
3357: ST_TO_ADDR
// artifactsButtons := [ [ art_use_eye , art_place , art_exp_left ] , [ art_use_sibexplosion , art_unit , art_exp_mid ] , [ art_use_atom , art_place , art_exp_right ] ] ;
3358: LD_ADDR_EXP 10
3362: PUSH
3363: LD_INT 4
3365: PUSH
3366: LD_INT 3
3368: PUSH
3369: LD_INT 1
3371: PUSH
3372: EMPTY
3373: LIST
3374: LIST
3375: LIST
3376: PUSH
3377: LD_INT 5
3379: PUSH
3380: LD_INT 4
3382: PUSH
3383: LD_INT 2
3385: PUSH
3386: EMPTY
3387: LIST
3388: LIST
3389: LIST
3390: PUSH
3391: LD_INT 7
3393: PUSH
3394: LD_INT 3
3396: PUSH
3397: LD_INT 3
3399: PUSH
3400: EMPTY
3401: LIST
3402: LIST
3403: LIST
3404: PUSH
3405: EMPTY
3406: LIST
3407: LIST
3408: LIST
3409: ST_TO_ADDR
// end ;
3410: LD_VAR 0 1
3414: RET
// function TeleportArtefact ( number , area ) ; var i , hex , tmp , cargo ; begin
3415: LD_INT 0
3417: PPUSH
3418: PPUSH
3419: PPUSH
3420: PPUSH
3421: PPUSH
// if not number in [ 3 , 4 , 5 ] then
3422: LD_VAR 0 1
3426: PUSH
3427: LD_INT 3
3429: PUSH
3430: LD_INT 4
3432: PUSH
3433: LD_INT 5
3435: PUSH
3436: EMPTY
3437: LIST
3438: LIST
3439: LIST
3440: IN
3441: NOT
3442: IFFALSE 3446
// exit ;
3444: GO 3860
// hex := FindArtifact ( number ) ;
3446: LD_ADDR_VAR 0 5
3450: PUSH
3451: LD_VAR 0 1
3455: PPUSH
3456: CALL_OW 469
3460: ST_TO_ADDR
// if hex then
3461: LD_VAR 0 5
3465: IFFALSE 3736
// begin if InArea ( hex [ 1 ] , hex [ 2 ] , area ) then
3467: LD_VAR 0 5
3471: PUSH
3472: LD_INT 1
3474: ARRAY
3475: PPUSH
3476: LD_VAR 0 5
3480: PUSH
3481: LD_INT 2
3483: ARRAY
3484: PPUSH
3485: LD_VAR 0 2
3489: PPUSH
3490: CALL_OW 309
3494: IFFALSE 3498
// exit ;
3496: GO 3860
// if artifactsLabsWorking [ number - 2 ] then
3498: LD_EXP 11
3502: PUSH
3503: LD_VAR 0 1
3507: PUSH
3508: LD_INT 2
3510: MINUS
3511: ARRAY
3512: IFFALSE 3617
// begin for i in artifactsLabsWorking [ number - 2 ] do
3514: LD_ADDR_VAR 0 4
3518: PUSH
3519: LD_EXP 11
3523: PUSH
3524: LD_VAR 0 1
3528: PUSH
3529: LD_INT 2
3531: MINUS
3532: ARRAY
3533: PUSH
3534: FOR_IN
3535: IFFALSE 3589
// begin SetArtifactUse ( GetSide ( i ) , artifactsButtons [ number - 2 ] [ 3 ] , art_no , i ) ;
3537: LD_VAR 0 4
3541: PPUSH
3542: CALL_OW 255
3546: PPUSH
3547: LD_EXP 10
3551: PUSH
3552: LD_VAR 0 1
3556: PUSH
3557: LD_INT 2
3559: MINUS
3560: ARRAY
3561: PUSH
3562: LD_INT 3
3564: ARRAY
3565: PPUSH
3566: LD_INT 0
3568: PPUSH
3569: LD_VAR 0 4
3573: PPUSH
3574: CALL_OW 468
// ComCancel ( i ) ;
3578: LD_VAR 0 4
3582: PPUSH
3583: CALL_OW 127
// end ;
3587: GO 3534
3589: POP
3590: POP
// artifactsLabsWorking := Replace ( artifactsLabsWorking , number - 2 , [ ] ) ;
3591: LD_ADDR_EXP 11
3595: PUSH
3596: LD_EXP 11
3600: PPUSH
3601: LD_VAR 0 1
3605: PUSH
3606: LD_INT 2
3608: MINUS
3609: PPUSH
3610: EMPTY
3611: PPUSH
3612: CALL_OW 1
3616: ST_TO_ADDR
// end ; tmp := FilterUnitsInArea ( area , [ f_placed ] ) ;
3617: LD_ADDR_VAR 0 6
3621: PUSH
3622: LD_VAR 0 2
3626: PPUSH
3627: LD_INT 52
3629: PUSH
3630: EMPTY
3631: LIST
3632: PPUSH
3633: CALL_OW 70
3637: ST_TO_ADDR
// if tmp then
3638: LD_VAR 0 6
3642: IFFALSE 3670
// for i in tmp do
3644: LD_ADDR_VAR 0 4
3648: PUSH
3649: LD_VAR 0 6
3653: PUSH
3654: FOR_IN
3655: IFFALSE 3668
// DestroyUnit ( i ) ;
3657: LD_VAR 0 4
3661: PPUSH
3662: CALL_OW 65
3666: GO 3654
3668: POP
3669: POP
// MoveAreaXY ( artifactTeleportArea , hex [ 1 ] , hex [ 2 ] ) ;
3670: LD_INT 56
3672: PPUSH
3673: LD_VAR 0 5
3677: PUSH
3678: LD_INT 1
3680: ARRAY
3681: PPUSH
3682: LD_VAR 0 5
3686: PUSH
3687: LD_INT 2
3689: ARRAY
3690: PPUSH
3691: CALL_OW 425
// EffectTeleport ( hex [ 1 ] , hex [ 2 ] ) ;
3695: LD_VAR 0 5
3699: PUSH
3700: LD_INT 1
3702: ARRAY
3703: PPUSH
3704: LD_VAR 0 5
3708: PUSH
3709: LD_INT 2
3711: ARRAY
3712: PPUSH
3713: CALL_OW 494
// wait ( 30 ) ;
3717: LD_INT 30
3719: PPUSH
3720: CALL_OW 67
// EraseResourceArea ( artifactTeleportArea , mat_artefact ) ;
3724: LD_INT 56
3726: PPUSH
3727: LD_INT 4
3729: PPUSH
3730: CALL_OW 286
// end else
3734: GO 3840
// begin cargo := FilterAllUnits ( [ [ f_tag , number ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
3736: LD_ADDR_VAR 0 7
3740: PUSH
3741: LD_INT 120
3743: PUSH
3744: LD_VAR 0 1
3748: PUSH
3749: EMPTY
3750: LIST
3751: LIST
3752: PUSH
3753: LD_INT 2
3755: PUSH
3756: LD_INT 34
3758: PUSH
3759: LD_INT 12
3761: PUSH
3762: EMPTY
3763: LIST
3764: LIST
3765: PUSH
3766: LD_INT 34
3768: PUSH
3769: LD_INT 32
3771: PUSH
3772: EMPTY
3773: LIST
3774: LIST
3775: PUSH
3776: LD_INT 34
3778: PUSH
3779: LD_INT 51
3781: PUSH
3782: EMPTY
3783: LIST
3784: LIST
3785: PUSH
3786: LD_INT 34
3788: PUSH
3789: LD_INT 89
3791: PUSH
3792: EMPTY
3793: LIST
3794: LIST
3795: PUSH
3796: EMPTY
3797: LIST
3798: LIST
3799: LIST
3800: LIST
3801: LIST
3802: PUSH
3803: EMPTY
3804: LIST
3805: LIST
3806: PPUSH
3807: CALL_OW 69
3811: ST_TO_ADDR
// if not cargo then
3812: LD_VAR 0 7
3816: NOT
3817: IFFALSE 3821
// exit ;
3819: GO 3860
// SetCargo ( cargo [ 1 ] , mat_artifact , 0 ) ;
3821: LD_VAR 0 7
3825: PUSH
3826: LD_INT 1
3828: ARRAY
3829: PPUSH
3830: LD_INT 4
3832: PPUSH
3833: LD_INT 0
3835: PPUSH
3836: CALL_OW 290
// end ; CreateResourcesArea ( mat_artifact , number , area , false ) ;
3840: LD_INT 4
3842: PPUSH
3843: LD_VAR 0 1
3847: PPUSH
3848: LD_VAR 0 2
3852: PPUSH
3853: LD_INT 0
3855: PPUSH
3856: CALL_OW 59
// end ;
3860: LD_VAR 0 3
3864: RET
// every 8 8$30 trigger mpArtifacts do
3865: LD_EXP 53
3869: IFFALSE 3885
3871: GO 3873
3873: DISABLE
// begin enable ;
3874: ENABLE
// TeleportArtefact ( 3 , ArtifactArea1 ) ;
3875: LD_INT 3
3877: PPUSH
3878: LD_INT 25
3880: PPUSH
3881: CALL 3415 0 2
// end ;
3885: END
// every 6 6$10 trigger mpArtifacts do
3886: LD_EXP 53
3890: IFFALSE 3906
3892: GO 3894
3894: DISABLE
// begin enable ;
3895: ENABLE
// TeleportArtefact ( 4 , ArtifactArea2 ) ;
3896: LD_INT 4
3898: PPUSH
3899: LD_INT 26
3901: PPUSH
3902: CALL 3415 0 2
// end ;
3906: END
// every 4 4$10 trigger mpArtifacts do
3907: LD_EXP 53
3911: IFFALSE 3927
3913: GO 3915
3915: DISABLE
// begin enable ;
3916: ENABLE
// TeleportArtefact ( 5 , ArtifactArea3 ) ;
3917: LD_INT 5
3919: PPUSH
3920: LD_INT 27
3922: PPUSH
3923: CALL 3415 0 2
// end ;
3927: END
// every 0 0$1 trigger mpArtifacts do var i , pos , j , side , labs , nearestLab ;
3928: LD_EXP 53
3932: IFFALSE 4828
3934: GO 3936
3936: DISABLE
3937: LD_INT 0
3939: PPUSH
3940: PPUSH
3941: PPUSH
3942: PPUSH
3943: PPUSH
3944: PPUSH
// begin enable ;
3945: ENABLE
// for i := 1 to 3 do
3946: LD_ADDR_VAR 0 1
3950: PUSH
3951: DOUBLE
3952: LD_INT 1
3954: DEC
3955: ST_TO_ADDR
3956: LD_INT 3
3958: PUSH
3959: FOR_TO
3960: IFFALSE 4826
// begin pos := FindArtifact ( i + 2 ) ;
3962: LD_ADDR_VAR 0 2
3966: PUSH
3967: LD_VAR 0 1
3971: PUSH
3972: LD_INT 2
3974: PLUS
3975: PPUSH
3976: CALL_OW 469
3980: ST_TO_ADDR
// artifactsPos := Replace ( artifactsPos , i , pos ) ;
3981: LD_ADDR_EXP 3
3985: PUSH
3986: LD_EXP 3
3990: PPUSH
3991: LD_VAR 0 1
3995: PPUSH
3996: LD_VAR 0 2
4000: PPUSH
4001: CALL_OW 1
4005: ST_TO_ADDR
// labs := FilterAllUnits ( [ f_lab , b_lab_siberium ] ) ;
4006: LD_ADDR_VAR 0 5
4010: PUSH
4011: LD_INT 63
4013: PUSH
4014: LD_INT 11
4016: PUSH
4017: EMPTY
4018: LIST
4019: LIST
4020: PPUSH
4021: CALL_OW 69
4025: ST_TO_ADDR
// if not labs then
4026: LD_VAR 0 5
4030: NOT
4031: IFFALSE 4037
// exit ;
4033: POP
4034: POP
4035: GO 4828
// if pos then
4037: LD_VAR 0 2
4041: IFFALSE 4664
// begin if not labs then
4043: LD_VAR 0 5
4047: NOT
4048: IFFALSE 4052
// continue ;
4050: GO 3959
// nearestLab := NearestUnitToXY ( labs , artifactsPos [ i ] [ 1 ] , artifactsPos [ i ] [ 2 ] ) ;
4052: LD_ADDR_VAR 0 6
4056: PUSH
4057: LD_VAR 0 5
4061: PPUSH
4062: LD_EXP 3
4066: PUSH
4067: LD_VAR 0 1
4071: ARRAY
4072: PUSH
4073: LD_INT 1
4075: ARRAY
4076: PPUSH
4077: LD_EXP 3
4081: PUSH
4082: LD_VAR 0 1
4086: ARRAY
4087: PUSH
4088: LD_INT 2
4090: ARRAY
4091: PPUSH
4092: CALL_OW 73
4096: ST_TO_ADDR
// if not nearestLab then
4097: LD_VAR 0 6
4101: NOT
4102: IFFALSE 4202
// begin for j in labs do
4104: LD_ADDR_VAR 0 3
4108: PUSH
4109: LD_VAR 0 5
4113: PUSH
4114: FOR_IN
4115: IFFALSE 4198
// begin side := GetSide ( j ) ;
4117: LD_ADDR_VAR 0 4
4121: PUSH
4122: LD_VAR 0 3
4126: PPUSH
4127: CALL_OW 255
4131: ST_TO_ADDR
// SetArtifactUse ( side , artifactsButtons [ i ] [ 3 ] , art_no , j ) ;
4132: LD_VAR 0 4
4136: PPUSH
4137: LD_EXP 10
4141: PUSH
4142: LD_VAR 0 1
4146: ARRAY
4147: PUSH
4148: LD_INT 3
4150: ARRAY
4151: PPUSH
4152: LD_INT 0
4154: PPUSH
4155: LD_VAR 0 3
4159: PPUSH
4160: CALL_OW 468
// SetArtifactUse ( side , artifactsButtons [ i ] [ 1 ] , art_no , j ) ;
4164: LD_VAR 0 4
4168: PPUSH
4169: LD_EXP 10
4173: PUSH
4174: LD_VAR 0 1
4178: ARRAY
4179: PUSH
4180: LD_INT 1
4182: ARRAY
4183: PPUSH
4184: LD_INT 0
4186: PPUSH
4187: LD_VAR 0 3
4191: PPUSH
4192: CALL_OW 468
// end ;
4196: GO 4114
4198: POP
4199: POP
// continue ;
4200: GO 3959
// end ; if GetDistUnitXY ( nearestLab , artifactsPos [ i ] [ 1 ] , artifactsPos [ i ] [ 2 ] ) < 8 and GetTech ( tech_artifact , GetSide ( nearestLab ) ) = state_researched then
4202: LD_VAR 0 6
4206: PPUSH
4207: LD_EXP 3
4211: PUSH
4212: LD_VAR 0 1
4216: ARRAY
4217: PUSH
4218: LD_INT 1
4220: ARRAY
4221: PPUSH
4222: LD_EXP 3
4226: PUSH
4227: LD_VAR 0 1
4231: ARRAY
4232: PUSH
4233: LD_INT 2
4235: ARRAY
4236: PPUSH
4237: CALL_OW 297
4241: PUSH
4242: LD_INT 8
4244: LESS
4245: PUSH
4246: LD_INT 24
4248: PPUSH
4249: LD_VAR 0 6
4253: PPUSH
4254: CALL_OW 255
4258: PPUSH
4259: CALL_OW 321
4263: PUSH
4264: LD_INT 2
4266: EQUAL
4267: AND
4268: IFFALSE 4500
// begin side := GetSide ( nearestLab ) ;
4270: LD_ADDR_VAR 0 4
4274: PUSH
4275: LD_VAR 0 6
4279: PPUSH
4280: CALL_OW 255
4284: ST_TO_ADDR
// if not artifactsResearched [ side ] [ i ] then
4285: LD_EXP 6
4289: PUSH
4290: LD_VAR 0 4
4294: ARRAY
4295: PUSH
4296: LD_VAR 0 1
4300: ARRAY
4301: NOT
4302: IFFALSE 4387
// begin if BuildingStatus ( nearestLab ) = bs_idle then
4304: LD_VAR 0 6
4308: PPUSH
4309: CALL_OW 461
4313: PUSH
4314: LD_INT 2
4316: EQUAL
4317: IFFALSE 4353
// SetArtifactUse ( side , artifactsButtons [ i ] [ 3 ] , art_instant , nearestLab ) else
4319: LD_VAR 0 4
4323: PPUSH
4324: LD_EXP 10
4328: PUSH
4329: LD_VAR 0 1
4333: ARRAY
4334: PUSH
4335: LD_INT 3
4337: ARRAY
4338: PPUSH
4339: LD_INT 2
4341: PPUSH
4342: LD_VAR 0 6
4346: PPUSH
4347: CALL_OW 468
4351: GO 4385
// SetArtifactUse ( side , artifactsButtons [ i ] [ 3 ] , art_gray , nearestLab ) ;
4353: LD_VAR 0 4
4357: PPUSH
4358: LD_EXP 10
4362: PUSH
4363: LD_VAR 0 1
4367: ARRAY
4368: PUSH
4369: LD_INT 3
4371: ARRAY
4372: PPUSH
4373: LD_INT 1
4375: PPUSH
4376: LD_VAR 0 6
4380: PPUSH
4381: CALL_OW 468
// end else
4385: GO 4498
// begin if BuildingStatus ( nearestLab ) = bs_idle and artifactsReady [ side ] [ i ] then
4387: LD_VAR 0 6
4391: PPUSH
4392: CALL_OW 461
4396: PUSH
4397: LD_INT 2
4399: EQUAL
4400: PUSH
4401: LD_EXP 7
4405: PUSH
4406: LD_VAR 0 4
4410: ARRAY
4411: PUSH
4412: LD_VAR 0 1
4416: ARRAY
4417: AND
4418: IFFALSE 4466
// SetArtifactUse ( side , artifactsButtons [ i ] [ 1 ] , artifactsButtons [ i ] [ 2 ] , nearestLab ) else
4420: LD_VAR 0 4
4424: PPUSH
4425: LD_EXP 10
4429: PUSH
4430: LD_VAR 0 1
4434: ARRAY
4435: PUSH
4436: LD_INT 1
4438: ARRAY
4439: PPUSH
4440: LD_EXP 10
4444: PUSH
4445: LD_VAR 0 1
4449: ARRAY
4450: PUSH
4451: LD_INT 2
4453: ARRAY
4454: PPUSH
4455: LD_VAR 0 6
4459: PPUSH
4460: CALL_OW 468
4464: GO 4498
// SetArtifactUse ( side , artifactsButtons [ i ] [ 1 ] , art_gray , nearestLab ) end ;
4466: LD_VAR 0 4
4470: PPUSH
4471: LD_EXP 10
4475: PUSH
4476: LD_VAR 0 1
4480: ARRAY
4481: PUSH
4482: LD_INT 1
4484: ARRAY
4485: PPUSH
4486: LD_INT 1
4488: PPUSH
4489: LD_VAR 0 6
4493: PPUSH
4494: CALL_OW 468
// end else
4498: GO 4662
// begin for j in labs do
4500: LD_ADDR_VAR 0 3
4504: PUSH
4505: LD_VAR 0 5
4509: PUSH
4510: FOR_IN
4511: IFFALSE 4660
// begin if GetDistUnitXY ( j , artifactsPos [ i ] [ 1 ] , artifactsPos [ i ] [ 2 ] ) >= 8 then
4513: LD_VAR 0 3
4517: PPUSH
4518: LD_EXP 3
4522: PUSH
4523: LD_VAR 0 1
4527: ARRAY
4528: PUSH
4529: LD_INT 1
4531: ARRAY
4532: PPUSH
4533: LD_EXP 3
4537: PUSH
4538: LD_VAR 0 1
4542: ARRAY
4543: PUSH
4544: LD_INT 2
4546: ARRAY
4547: PPUSH
4548: CALL_OW 297
4552: PUSH
4553: LD_INT 8
4555: GREATEREQUAL
4556: IFFALSE 4658
// begin side := GetSide ( j ) ;
4558: LD_ADDR_VAR 0 4
4562: PUSH
4563: LD_VAR 0 3
4567: PPUSH
4568: CALL_OW 255
4572: ST_TO_ADDR
// if not artifactsResearched [ side ] [ i ] then
4573: LD_EXP 6
4577: PUSH
4578: LD_VAR 0 4
4582: ARRAY
4583: PUSH
4584: LD_VAR 0 1
4588: ARRAY
4589: NOT
4590: IFFALSE 4626
// SetArtifactUse ( side , artifactsButtons [ i ] [ 3 ] , art_no , j ) else
4592: LD_VAR 0 4
4596: PPUSH
4597: LD_EXP 10
4601: PUSH
4602: LD_VAR 0 1
4606: ARRAY
4607: PUSH
4608: LD_INT 3
4610: ARRAY
4611: PPUSH
4612: LD_INT 0
4614: PPUSH
4615: LD_VAR 0 3
4619: PPUSH
4620: CALL_OW 468
4624: GO 4658
// SetArtifactUse ( side , artifactsButtons [ i ] [ 1 ] , art_no , j ) ;
4626: LD_VAR 0 4
4630: PPUSH
4631: LD_EXP 10
4635: PUSH
4636: LD_VAR 0 1
4640: ARRAY
4641: PUSH
4642: LD_INT 1
4644: ARRAY
4645: PPUSH
4646: LD_INT 0
4648: PPUSH
4649: LD_VAR 0 3
4653: PPUSH
4654: CALL_OW 468
// end ; end ;
4658: GO 4510
4660: POP
4661: POP
// end ; end else
4662: GO 4824
// begin for j in labs do
4664: LD_ADDR_VAR 0 3
4668: PUSH
4669: LD_VAR 0 5
4673: PUSH
4674: FOR_IN
4675: IFFALSE 4822
// begin side := GetSide ( j ) ;
4677: LD_ADDR_VAR 0 4
4681: PUSH
4682: LD_VAR 0 3
4686: PPUSH
4687: CALL_OW 255
4691: ST_TO_ADDR
// SetArtifactUse ( side , artifactsButtons [ i ] [ 3 ] , art_no , j ) ;
4692: LD_VAR 0 4
4696: PPUSH
4697: LD_EXP 10
4701: PUSH
4702: LD_VAR 0 1
4706: ARRAY
4707: PUSH
4708: LD_INT 3
4710: ARRAY
4711: PPUSH
4712: LD_INT 0
4714: PPUSH
4715: LD_VAR 0 3
4719: PPUSH
4720: CALL_OW 468
// SetArtifactUse ( side , artifactsButtons [ i ] [ 1 ] , art_no , j ) ;
4724: LD_VAR 0 4
4728: PPUSH
4729: LD_EXP 10
4733: PUSH
4734: LD_VAR 0 1
4738: ARRAY
4739: PUSH
4740: LD_INT 1
4742: ARRAY
4743: PPUSH
4744: LD_INT 0
4746: PPUSH
4747: LD_VAR 0 3
4751: PPUSH
4752: CALL_OW 468
// if j in artifactsLabsWorking [ i ] then
4756: LD_VAR 0 3
4760: PUSH
4761: LD_EXP 11
4765: PUSH
4766: LD_VAR 0 1
4770: ARRAY
4771: IN
4772: IFFALSE 4820
// begin artifactsLabsWorking := Replace ( artifactsLabsWorking , i , artifactsLabsWorking [ i ] diff j ) ;
4774: LD_ADDR_EXP 11
4778: PUSH
4779: LD_EXP 11
4783: PPUSH
4784: LD_VAR 0 1
4788: PPUSH
4789: LD_EXP 11
4793: PUSH
4794: LD_VAR 0 1
4798: ARRAY
4799: PUSH
4800: LD_VAR 0 3
4804: DIFF
4805: PPUSH
4806: CALL_OW 1
4810: ST_TO_ADDR
// ComCancel ( j ) ;
4811: LD_VAR 0 3
4815: PPUSH
4816: CALL_OW 127
// end ; end ;
4820: GO 4674
4822: POP
4823: POP
// end ; end ;
4824: GO 3959
4826: POP
4827: POP
// end ;
4828: PPOPN 6
4830: END
// on ArtifactUsed ( side , icon , x , y ) do var i , labs , lab , base , time ;
4831: LD_INT 0
4833: PPUSH
4834: PPUSH
4835: PPUSH
4836: PPUSH
4837: PPUSH
// begin labs := FilterAllUnits ( [ [ f_side , side ] , [ f_lab , b_lab_siberium ] ] ) ;
4838: LD_ADDR_VAR 0 6
4842: PUSH
4843: LD_INT 22
4845: PUSH
4846: LD_VAR 0 1
4850: PUSH
4851: EMPTY
4852: LIST
4853: LIST
4854: PUSH
4855: LD_INT 63
4857: PUSH
4858: LD_INT 11
4860: PUSH
4861: EMPTY
4862: LIST
4863: LIST
4864: PUSH
4865: EMPTY
4866: LIST
4867: LIST
4868: PPUSH
4869: CALL_OW 69
4873: ST_TO_ADDR
// for i := 1 to 3 do
4874: LD_ADDR_VAR 0 5
4878: PUSH
4879: DOUBLE
4880: LD_INT 1
4882: DEC
4883: ST_TO_ADDR
4884: LD_INT 3
4886: PUSH
4887: FOR_TO
4888: IFFALSE 5118
// begin if icon = artifactsButtons [ i ] [ 3 ] then
4890: LD_VAR 0 2
4894: PUSH
4895: LD_EXP 10
4899: PUSH
4900: LD_VAR 0 5
4904: ARRAY
4905: PUSH
4906: LD_INT 3
4908: ARRAY
4909: EQUAL
4910: IFFALSE 5116
// begin lab := NearestUnitToXY ( labs , artifactsPos [ i ] [ 1 ] , artifactsPos [ i ] [ 2 ] ) ;
4912: LD_ADDR_VAR 0 7
4916: PUSH
4917: LD_VAR 0 6
4921: PPUSH
4922: LD_EXP 3
4926: PUSH
4927: LD_VAR 0 5
4931: ARRAY
4932: PUSH
4933: LD_INT 1
4935: ARRAY
4936: PPUSH
4937: LD_EXP 3
4941: PUSH
4942: LD_VAR 0 5
4946: ARRAY
4947: PUSH
4948: LD_INT 2
4950: ARRAY
4951: PPUSH
4952: CALL_OW 73
4956: ST_TO_ADDR
// if not lab then
4957: LD_VAR 0 7
4961: NOT
4962: IFFALSE 4966
// continue ;
4964: GO 4887
// SetSpecResearch ( lab , artifactsResDifficulty [ i ] , true ) ;
4966: LD_VAR 0 7
4970: PPUSH
4971: LD_EXP 8
4975: PUSH
4976: LD_VAR 0 5
4980: ARRAY
4981: PPUSH
4982: LD_INT 1
4984: PPUSH
4985: CALL_OW 486
// SetTag ( lab , i ) ;
4989: LD_VAR 0 7
4993: PPUSH
4994: LD_VAR 0 5
4998: PPUSH
4999: CALL_OW 109
// if artifactsResProgress [ side ] [ i ] then
5003: LD_EXP 9
5007: PUSH
5008: LD_VAR 0 1
5012: ARRAY
5013: PUSH
5014: LD_VAR 0 5
5018: ARRAY
5019: IFFALSE 5047
// SetWorkingProgress ( lab , artifactsResProgress [ side ] [ i ] ) ;
5021: LD_VAR 0 7
5025: PPUSH
5026: LD_EXP 9
5030: PUSH
5031: LD_VAR 0 1
5035: ARRAY
5036: PUSH
5037: LD_VAR 0 5
5041: ARRAY
5042: PPUSH
5043: CALL_OW 329
// artifactsLabsWorking := Replace ( artifactsLabsWorking , i , artifactsLabsWorking [ i ] union lab ) ;
5047: LD_ADDR_EXP 11
5051: PUSH
5052: LD_EXP 11
5056: PPUSH
5057: LD_VAR 0 5
5061: PPUSH
5062: LD_EXP 11
5066: PUSH
5067: LD_VAR 0 5
5071: ARRAY
5072: PUSH
5073: LD_VAR 0 7
5077: UNION
5078: PPUSH
5079: CALL_OW 1
5083: ST_TO_ADDR
// SetArtifactUse ( side , artifactsButtons [ i ] [ 3 ] , art_no , lab ) ;
5084: LD_VAR 0 1
5088: PPUSH
5089: LD_EXP 10
5093: PUSH
5094: LD_VAR 0 5
5098: ARRAY
5099: PUSH
5100: LD_INT 3
5102: ARRAY
5103: PPUSH
5104: LD_INT 0
5106: PPUSH
5107: LD_VAR 0 7
5111: PPUSH
5112: CALL_OW 468
// end ; end ;
5116: GO 4887
5118: POP
5119: POP
// if icon = artifactsButtons [ 1 ] [ 1 ] then
5120: LD_VAR 0 2
5124: PUSH
5125: LD_EXP 10
5129: PUSH
5130: LD_INT 1
5132: ARRAY
5133: PUSH
5134: LD_INT 1
5136: ARRAY
5137: EQUAL
5138: IFFALSE 5409
// begin lab := NearestUnitToXY ( labs , artifactsPos [ 1 ] [ 1 ] , artifactsPos [ 1 ] [ 2 ] ) ;
5140: LD_ADDR_VAR 0 7
5144: PUSH
5145: LD_VAR 0 6
5149: PPUSH
5150: LD_EXP 3
5154: PUSH
5155: LD_INT 1
5157: ARRAY
5158: PUSH
5159: LD_INT 1
5161: ARRAY
5162: PPUSH
5163: LD_EXP 3
5167: PUSH
5168: LD_INT 1
5170: ARRAY
5171: PUSH
5172: LD_INT 2
5174: ARRAY
5175: PPUSH
5176: CALL_OW 73
5180: ST_TO_ADDR
// base := GetBase ( lab ) ;
5181: LD_ADDR_VAR 0 8
5185: PUSH
5186: LD_VAR 0 7
5190: PPUSH
5191: CALL_OW 274
5195: ST_TO_ADDR
// if GetBaseMaterials ( GetBase ( lab ) ) [ 3 ] < artifactsSibCost [ 1 ] then
5196: LD_VAR 0 7
5200: PPUSH
5201: CALL_OW 274
5205: PPUSH
5206: CALL 59462 0 1
5210: PUSH
5211: LD_INT 3
5213: ARRAY
5214: PUSH
5215: LD_EXP 5
5219: PUSH
5220: LD_INT 1
5222: ARRAY
5223: LESS
5224: IFFALSE 5228
// begin exit ;
5226: GO 6173
// end ; SetResourceType ( base , mat_siberit , ( GetResourceType ( base , mat_siberit ) - artifactsSibCost [ 1 ] ) ) ;
5228: LD_VAR 0 8
5232: PPUSH
5233: LD_INT 3
5235: PPUSH
5236: LD_VAR 0 8
5240: PPUSH
5241: LD_INT 3
5243: PPUSH
5244: CALL_OW 275
5248: PUSH
5249: LD_EXP 5
5253: PUSH
5254: LD_INT 1
5256: ARRAY
5257: MINUS
5258: PPUSH
5259: CALL_OW 277
// artifactsReady := Replace ( artifactsReady , side , Replace ( artifactsReady [ side ] , 1 , false ) ) ;
5263: LD_ADDR_EXP 7
5267: PUSH
5268: LD_EXP 7
5272: PPUSH
5273: LD_VAR 0 1
5277: PPUSH
5278: LD_EXP 7
5282: PUSH
5283: LD_VAR 0 1
5287: ARRAY
5288: PPUSH
5289: LD_INT 1
5291: PPUSH
5292: LD_INT 0
5294: PPUSH
5295: CALL_OW 1
5299: PPUSH
5300: CALL_OW 1
5304: ST_TO_ADDR
// PlaceSeeing ( x , y , side , - 12 ) ;
5305: LD_VAR 0 3
5309: PPUSH
5310: LD_VAR 0 4
5314: PPUSH
5315: LD_VAR 0 1
5319: PPUSH
5320: LD_INT 12
5322: NEG
5323: PPUSH
5324: CALL_OW 330
// wait ( 0 0$30 ) ;
5328: LD_INT 1050
5330: PPUSH
5331: CALL_OW 67
// RemoveSeeing ( x , y , side ) ;
5335: LD_VAR 0 3
5339: PPUSH
5340: LD_VAR 0 4
5344: PPUSH
5345: LD_VAR 0 1
5349: PPUSH
5350: CALL_OW 331
// wait ( artifactsRecharge [ 1 ] ) ;
5354: LD_EXP 4
5358: PUSH
5359: LD_INT 1
5361: ARRAY
5362: PPUSH
5363: CALL_OW 67
// artifactsReady := Replace ( artifactsReady , side , Replace ( artifactsReady [ side ] , 1 , true ) ) ;
5367: LD_ADDR_EXP 7
5371: PUSH
5372: LD_EXP 7
5376: PPUSH
5377: LD_VAR 0 1
5381: PPUSH
5382: LD_EXP 7
5386: PUSH
5387: LD_VAR 0 1
5391: ARRAY
5392: PPUSH
5393: LD_INT 1
5395: PPUSH
5396: LD_INT 1
5398: PPUSH
5399: CALL_OW 1
5403: PPUSH
5404: CALL_OW 1
5408: ST_TO_ADDR
// end ; if icon = artifactsButtons [ 2 ] [ 1 ] then
5409: LD_VAR 0 2
5413: PUSH
5414: LD_EXP 10
5418: PUSH
5419: LD_INT 2
5421: ARRAY
5422: PUSH
5423: LD_INT 1
5425: ARRAY
5426: EQUAL
5427: IFFALSE 5921
// begin lab := NearestUnitToXY ( labs , artifactsPos [ 2 ] [ 1 ] , artifactsPos [ 2 ] [ 2 ] ) ;
5429: LD_ADDR_VAR 0 7
5433: PUSH
5434: LD_VAR 0 6
5438: PPUSH
5439: LD_EXP 3
5443: PUSH
5444: LD_INT 2
5446: ARRAY
5447: PUSH
5448: LD_INT 1
5450: ARRAY
5451: PPUSH
5452: LD_EXP 3
5456: PUSH
5457: LD_INT 2
5459: ARRAY
5460: PUSH
5461: LD_INT 2
5463: ARRAY
5464: PPUSH
5465: CALL_OW 73
5469: ST_TO_ADDR
// base := GetBase ( lab ) ;
5470: LD_ADDR_VAR 0 8
5474: PUSH
5475: LD_VAR 0 7
5479: PPUSH
5480: CALL_OW 274
5484: ST_TO_ADDR
// if not x in FilterAllUnits ( [ [ f_enemy , side ] , [ f_or , [ f_engine , engine_siberite ] , [ f_btype , b_siberite_power ] , [ f_btype , b_siberite_mine ] , [ f_bweapon , ru_time_lapser ] , [ f_weapon , ru_time_lapser ] , [ f_weapon , us_double_laser ] , [ f_bweapon , us_double_laser ] , [ f_weapon , ar_bio_bomb ] , [ f_weapon , ar_selfpropelled_bomb ] , [ f_btype , b_ext_siberium ] , [ f_weapon , us_siberium_rocket ] , [ f_weapon , ru_siberium_rocket ] , [ f_chassis , ru_behemoth ] , [ f_bweapon , us_siberium_rocket ] , [ f_bweapon , ru_siberium_rocket ] ] ] ) then
5485: LD_VAR 0 3
5489: PUSH
5490: LD_INT 81
5492: PUSH
5493: LD_VAR 0 1
5497: PUSH
5498: EMPTY
5499: LIST
5500: LIST
5501: PUSH
5502: LD_INT 2
5504: PUSH
5505: LD_INT 32
5507: PUSH
5508: LD_INT 3
5510: PUSH
5511: EMPTY
5512: LIST
5513: LIST
5514: PUSH
5515: LD_INT 30
5517: PUSH
5518: LD_INT 28
5520: PUSH
5521: EMPTY
5522: LIST
5523: LIST
5524: PUSH
5525: LD_INT 30
5527: PUSH
5528: LD_INT 30
5530: PUSH
5531: EMPTY
5532: LIST
5533: LIST
5534: PUSH
5535: LD_INT 35
5537: PUSH
5538: LD_INT 49
5540: PUSH
5541: EMPTY
5542: LIST
5543: LIST
5544: PUSH
5545: LD_INT 34
5547: PUSH
5548: LD_INT 49
5550: PUSH
5551: EMPTY
5552: LIST
5553: LIST
5554: PUSH
5555: LD_INT 34
5557: PUSH
5558: LD_INT 10
5560: PUSH
5561: EMPTY
5562: LIST
5563: LIST
5564: PUSH
5565: LD_INT 35
5567: PUSH
5568: LD_INT 10
5570: PUSH
5571: EMPTY
5572: LIST
5573: LIST
5574: PUSH
5575: LD_INT 34
5577: PUSH
5578: LD_INT 91
5580: PUSH
5581: EMPTY
5582: LIST
5583: LIST
5584: PUSH
5585: LD_INT 34
5587: PUSH
5588: LD_INT 29
5590: PUSH
5591: EMPTY
5592: LIST
5593: LIST
5594: PUSH
5595: LD_INT 30
5597: PUSH
5598: LD_INT 21
5600: PUSH
5601: EMPTY
5602: LIST
5603: LIST
5604: PUSH
5605: LD_INT 34
5607: PUSH
5608: LD_INT 8
5610: PUSH
5611: EMPTY
5612: LIST
5613: LIST
5614: PUSH
5615: LD_INT 34
5617: PUSH
5618: LD_INT 48
5620: PUSH
5621: EMPTY
5622: LIST
5623: LIST
5624: PUSH
5625: LD_INT 31
5627: PUSH
5628: LD_INT 25
5630: PUSH
5631: EMPTY
5632: LIST
5633: LIST
5634: PUSH
5635: LD_INT 35
5637: PUSH
5638: LD_INT 8
5640: PUSH
5641: EMPTY
5642: LIST
5643: LIST
5644: PUSH
5645: LD_INT 35
5647: PUSH
5648: LD_INT 48
5650: PUSH
5651: EMPTY
5652: LIST
5653: LIST
5654: PUSH
5655: EMPTY
5656: LIST
5657: LIST
5658: LIST
5659: LIST
5660: LIST
5661: LIST
5662: LIST
5663: LIST
5664: LIST
5665: LIST
5666: LIST
5667: LIST
5668: LIST
5669: LIST
5670: LIST
5671: LIST
5672: PUSH
5673: EMPTY
5674: LIST
5675: LIST
5676: PPUSH
5677: CALL_OW 69
5681: IN
5682: NOT
5683: IFFALSE 5687
// exit ;
5685: GO 6173
// if GetBaseMaterials ( GetBase ( lab ) ) [ 3 ] < artifactsSibCost [ 2 ] then
5687: LD_VAR 0 7
5691: PPUSH
5692: CALL_OW 274
5696: PPUSH
5697: CALL 59462 0 1
5701: PUSH
5702: LD_INT 3
5704: ARRAY
5705: PUSH
5706: LD_EXP 5
5710: PUSH
5711: LD_INT 2
5713: ARRAY
5714: LESS
5715: IFFALSE 5719
// begin exit ;
5717: GO 6173
// end ; SetResourceType ( base , mat_siberit , ( GetResourceType ( base , mat_siberit ) - artifactsSibCost [ 2 ] ) ) ;
5719: LD_VAR 0 8
5723: PPUSH
5724: LD_INT 3
5726: PPUSH
5727: LD_VAR 0 8
5731: PPUSH
5732: LD_INT 3
5734: PPUSH
5735: CALL_OW 275
5739: PUSH
5740: LD_EXP 5
5744: PUSH
5745: LD_INT 2
5747: ARRAY
5748: MINUS
5749: PPUSH
5750: CALL_OW 277
// artifactsReady := Replace ( artifactsReady , side , Replace ( artifactsReady [ side ] , 2 , false ) ) ;
5754: LD_ADDR_EXP 7
5758: PUSH
5759: LD_EXP 7
5763: PPUSH
5764: LD_VAR 0 1
5768: PPUSH
5769: LD_EXP 7
5773: PUSH
5774: LD_VAR 0 1
5778: ARRAY
5779: PPUSH
5780: LD_INT 2
5782: PPUSH
5783: LD_INT 0
5785: PPUSH
5786: CALL_OW 1
5790: PPUSH
5791: CALL_OW 1
5795: ST_TO_ADDR
// KillUnit ( x ) ;
5796: LD_VAR 0 3
5800: PPUSH
5801: CALL_OW 66
// if GetWeapon ( x ) in [ us_siberium_rocket , ru_siberium_rocket ] or GetBWeapon ( x ) in [ us_siberium_rocket , ru_siberium_rocket ] then
5805: LD_VAR 0 3
5809: PPUSH
5810: CALL_OW 264
5814: PUSH
5815: LD_INT 8
5817: PUSH
5818: LD_INT 48
5820: PUSH
5821: EMPTY
5822: LIST
5823: LIST
5824: IN
5825: PUSH
5826: LD_VAR 0 3
5830: PPUSH
5831: CALL_OW 269
5835: PUSH
5836: LD_INT 8
5838: PUSH
5839: LD_INT 48
5841: PUSH
5842: EMPTY
5843: LIST
5844: LIST
5845: IN
5846: OR
5847: IFFALSE 5866
// begin ArtContamination ( x , y , 50 ) ;
5849: LD_VAR 0 3
5853: PPUSH
5854: LD_VAR 0 4
5858: PPUSH
5859: LD_INT 50
5861: PPUSH
5862: CALL_OW 495
// end ; wait ( artifactsRecharge [ 2 ] ) ;
5866: LD_EXP 4
5870: PUSH
5871: LD_INT 2
5873: ARRAY
5874: PPUSH
5875: CALL_OW 67
// artifactsReady := Replace ( artifactsReady , side , Replace ( artifactsReady [ side ] , 2 , true ) ) ;
5879: LD_ADDR_EXP 7
5883: PUSH
5884: LD_EXP 7
5888: PPUSH
5889: LD_VAR 0 1
5893: PPUSH
5894: LD_EXP 7
5898: PUSH
5899: LD_VAR 0 1
5903: ARRAY
5904: PPUSH
5905: LD_INT 2
5907: PPUSH
5908: LD_INT 1
5910: PPUSH
5911: CALL_OW 1
5915: PPUSH
5916: CALL_OW 1
5920: ST_TO_ADDR
// end ; if icon = artifactsButtons [ 3 ] [ 1 ] then
5921: LD_VAR 0 2
5925: PUSH
5926: LD_EXP 10
5930: PUSH
5931: LD_INT 3
5933: ARRAY
5934: PUSH
5935: LD_INT 1
5937: ARRAY
5938: EQUAL
5939: IFFALSE 6173
// begin lab := NearestUnitToXY ( labs , artifactsPos [ 3 ] [ 1 ] , artifactsPos [ 3 ] [ 2 ] ) ;
5941: LD_ADDR_VAR 0 7
5945: PUSH
5946: LD_VAR 0 6
5950: PPUSH
5951: LD_EXP 3
5955: PUSH
5956: LD_INT 3
5958: ARRAY
5959: PUSH
5960: LD_INT 1
5962: ARRAY
5963: PPUSH
5964: LD_EXP 3
5968: PUSH
5969: LD_INT 3
5971: ARRAY
5972: PUSH
5973: LD_INT 2
5975: ARRAY
5976: PPUSH
5977: CALL_OW 73
5981: ST_TO_ADDR
// base := GetBase ( lab ) ;
5982: LD_ADDR_VAR 0 8
5986: PUSH
5987: LD_VAR 0 7
5991: PPUSH
5992: CALL_OW 274
5996: ST_TO_ADDR
// if GetBaseMaterials ( base ) [ 3 ] < artifactsSibCost [ 3 ] then
5997: LD_VAR 0 8
6001: PPUSH
6002: CALL 59462 0 1
6006: PUSH
6007: LD_INT 3
6009: ARRAY
6010: PUSH
6011: LD_EXP 5
6015: PUSH
6016: LD_INT 3
6018: ARRAY
6019: LESS
6020: IFFALSE 6024
// begin exit ;
6022: GO 6173
// end ; SetResourceType ( base , mat_siberit , ( GetResourceType ( base , mat_siberit ) - artifactsSibCost [ 3 ] ) ) ;
6024: LD_VAR 0 8
6028: PPUSH
6029: LD_INT 3
6031: PPUSH
6032: LD_VAR 0 8
6036: PPUSH
6037: LD_INT 3
6039: PPUSH
6040: CALL_OW 275
6044: PUSH
6045: LD_EXP 5
6049: PUSH
6050: LD_INT 3
6052: ARRAY
6053: MINUS
6054: PPUSH
6055: CALL_OW 277
// artifactsReady := Replace ( artifactsReady , side , Replace ( artifactsReady [ side ] , 3 , false ) ) ;
6059: LD_ADDR_EXP 7
6063: PUSH
6064: LD_EXP 7
6068: PPUSH
6069: LD_VAR 0 1
6073: PPUSH
6074: LD_EXP 7
6078: PUSH
6079: LD_VAR 0 1
6083: ARRAY
6084: PPUSH
6085: LD_INT 3
6087: PPUSH
6088: LD_INT 0
6090: PPUSH
6091: CALL_OW 1
6095: PPUSH
6096: CALL_OW 1
6100: ST_TO_ADDR
// ArtContamination ( x , y , 50 ) ;
6101: LD_VAR 0 3
6105: PPUSH
6106: LD_VAR 0 4
6110: PPUSH
6111: LD_INT 50
6113: PPUSH
6114: CALL_OW 495
// wait ( artifactsRecharge [ 3 ] ) ;
6118: LD_EXP 4
6122: PUSH
6123: LD_INT 3
6125: ARRAY
6126: PPUSH
6127: CALL_OW 67
// artifactsReady := Replace ( artifactsReady , side , Replace ( artifactsReady [ side ] , 3 , true ) ) ;
6131: LD_ADDR_EXP 7
6135: PUSH
6136: LD_EXP 7
6140: PPUSH
6141: LD_VAR 0 1
6145: PPUSH
6146: LD_EXP 7
6150: PUSH
6151: LD_VAR 0 1
6155: ARRAY
6156: PPUSH
6157: LD_INT 3
6159: PPUSH
6160: LD_INT 1
6162: PPUSH
6163: CALL_OW 1
6167: PPUSH
6168: CALL_OW 1
6172: ST_TO_ADDR
// end ; end ;
6173: PPOPN 9
6175: END
// on SpecResearchCancel ( lab , progress ) do var side , tag ;
6176: LD_INT 0
6178: PPUSH
6179: PPUSH
// begin tag := GetTag ( lab ) ;
6180: LD_ADDR_VAR 0 4
6184: PUSH
6185: LD_VAR 0 1
6189: PPUSH
6190: CALL_OW 110
6194: ST_TO_ADDR
// side := GetSide ( lab ) ;
6195: LD_ADDR_VAR 0 3
6199: PUSH
6200: LD_VAR 0 1
6204: PPUSH
6205: CALL_OW 255
6209: ST_TO_ADDR
// SetArtifactUse ( side , artifactsButtons [ tag ] [ 3 ] , art_instant , lab ) ;
6210: LD_VAR 0 3
6214: PPUSH
6215: LD_EXP 10
6219: PUSH
6220: LD_VAR 0 4
6224: ARRAY
6225: PUSH
6226: LD_INT 3
6228: ARRAY
6229: PPUSH
6230: LD_INT 2
6232: PPUSH
6233: LD_VAR 0 1
6237: PPUSH
6238: CALL_OW 468
// artifactsResProgress := Replace ( artifactsResProgress , side , Replace ( artifactsResProgress [ side ] , tag , progress ) ) ;
6242: LD_ADDR_EXP 9
6246: PUSH
6247: LD_EXP 9
6251: PPUSH
6252: LD_VAR 0 3
6256: PPUSH
6257: LD_EXP 9
6261: PUSH
6262: LD_VAR 0 3
6266: ARRAY
6267: PPUSH
6268: LD_VAR 0 4
6272: PPUSH
6273: LD_VAR 0 2
6277: PPUSH
6278: CALL_OW 1
6282: PPUSH
6283: CALL_OW 1
6287: ST_TO_ADDR
// artifactsLabsWorking := Replace ( artifactsLabsWorking , tag , artifactsLabsWorking [ tag ] diff lab ) ;
6288: LD_ADDR_EXP 11
6292: PUSH
6293: LD_EXP 11
6297: PPUSH
6298: LD_VAR 0 4
6302: PPUSH
6303: LD_EXP 11
6307: PUSH
6308: LD_VAR 0 4
6312: ARRAY
6313: PUSH
6314: LD_VAR 0 1
6318: DIFF
6319: PPUSH
6320: CALL_OW 1
6324: ST_TO_ADDR
// SetTag ( lab , 0 ) ;
6325: LD_VAR 0 1
6329: PPUSH
6330: LD_INT 0
6332: PPUSH
6333: CALL_OW 109
// end ;
6337: PPOPN 4
6339: END
// on SpecResearchComplete ( lab ) do var side , tag ;
6340: LD_INT 0
6342: PPUSH
6343: PPUSH
// begin tag := GetTag ( lab ) ;
6344: LD_ADDR_VAR 0 3
6348: PUSH
6349: LD_VAR 0 1
6353: PPUSH
6354: CALL_OW 110
6358: ST_TO_ADDR
// side := GetSide ( lab ) ;
6359: LD_ADDR_VAR 0 2
6363: PUSH
6364: LD_VAR 0 1
6368: PPUSH
6369: CALL_OW 255
6373: ST_TO_ADDR
// SetArtifactUse ( side , artifactsButtons [ tag ] [ 3 ] , art_no , lab ) ;
6374: LD_VAR 0 2
6378: PPUSH
6379: LD_EXP 10
6383: PUSH
6384: LD_VAR 0 3
6388: ARRAY
6389: PUSH
6390: LD_INT 3
6392: ARRAY
6393: PPUSH
6394: LD_INT 0
6396: PPUSH
6397: LD_VAR 0 1
6401: PPUSH
6402: CALL_OW 468
// artifactsResearched := Replace ( artifactsResearched , side , Replace ( artifactsResearched [ side ] , tag , 1 ) ) ;
6406: LD_ADDR_EXP 6
6410: PUSH
6411: LD_EXP 6
6415: PPUSH
6416: LD_VAR 0 2
6420: PPUSH
6421: LD_EXP 6
6425: PUSH
6426: LD_VAR 0 2
6430: ARRAY
6431: PPUSH
6432: LD_VAR 0 3
6436: PPUSH
6437: LD_INT 1
6439: PPUSH
6440: CALL_OW 1
6444: PPUSH
6445: CALL_OW 1
6449: ST_TO_ADDR
// artifactsReady := Replace ( artifactsReady , side , Replace ( artifactsReady [ side ] , tag , 1 ) ) ;
6450: LD_ADDR_EXP 7
6454: PUSH
6455: LD_EXP 7
6459: PPUSH
6460: LD_VAR 0 2
6464: PPUSH
6465: LD_EXP 7
6469: PUSH
6470: LD_VAR 0 2
6474: ARRAY
6475: PPUSH
6476: LD_VAR 0 3
6480: PPUSH
6481: LD_INT 1
6483: PPUSH
6484: CALL_OW 1
6488: PPUSH
6489: CALL_OW 1
6493: ST_TO_ADDR
// artifactsLabsWorking := Replace ( artifactsLabsWorking , tag , artifactsLabsWorking [ tag ] diff lab ) ;
6494: LD_ADDR_EXP 11
6498: PUSH
6499: LD_EXP 11
6503: PPUSH
6504: LD_VAR 0 3
6508: PPUSH
6509: LD_EXP 11
6513: PUSH
6514: LD_VAR 0 3
6518: ARRAY
6519: PUSH
6520: LD_VAR 0 1
6524: DIFF
6525: PPUSH
6526: CALL_OW 1
6530: ST_TO_ADDR
// end ;
6531: PPOPN 3
6533: END
// on ArtifactLoaded ( cargo , artifact ) do begin SetTag ( cargo , artifact ) ;
6534: LD_VAR 0 1
6538: PPUSH
6539: LD_VAR 0 2
6543: PPUSH
6544: CALL_OW 109
// end ;
6548: PPOPN 2
6550: END
// on ArtifactUnloaded ( cargo , artifact ) do begin SetTag ( cargo , 0 ) ;
6551: LD_VAR 0 1
6555: PPUSH
6556: LD_INT 0
6558: PPUSH
6559: CALL_OW 109
// end ; end_of_file end_of_file
6563: PPOPN 2
6565: END
// export mpGameType , mpGameSettingsKeys , mpGameSettingsValues , mpGameSettings , mpSidePositions , mpSideTeams , mpSideNations , mpTeams , mpTeamGame , mpOilDeposits , mpSibDeposits , mpDepots , mpStartingResources , mpSharedVision , mpBuildings , mpMarkedAreas , mpBuildUpAreas , mpBuildUpTime , mpStartPos , mpBattleFlag , mpBattleFlags , mpPeopleAmount , mpPeopleSkill , mpSibDetection , mpShipments , mpSibBomb , mpMapSize , mpApemans , mpApemansArea , mpApePosIndex , mpRespawn , mpKingArea , mpPoints , mpVehicles , mpEmissions , mpDisplayStrings , mpGameActive , mpRespawnPull , mpGlobalOilDeposits , mpGlobalSibDeposits , mpTeleports , mpArtifacts , mpBlockRespThread ; export function InitMultiplayer ; var i ; begin
6566: LD_INT 0
6568: PPUSH
6569: PPUSH
// disable ( mpActive ) ;
6570: LD_INT 100
6572: DISABLE_MARKED
// disable ( mpWin ) ;
6573: LD_INT 101
6575: DISABLE_MARKED
// disable ( mpLose ) ;
6576: LD_INT 102
6578: DISABLE_MARKED
// mpGameType := 0 ;
6579: LD_ADDR_EXP 12
6583: PUSH
6584: LD_INT 0
6586: ST_TO_ADDR
// mpGameSettings := [ ] ;
6587: LD_ADDR_EXP 15
6591: PUSH
6592: EMPTY
6593: ST_TO_ADDR
// mpGameSettingsKeys := [ ] ;
6594: LD_ADDR_EXP 13
6598: PUSH
6599: EMPTY
6600: ST_TO_ADDR
// mpGameSettingsValues := [ ] ;
6601: LD_ADDR_EXP 14
6605: PUSH
6606: EMPTY
6607: ST_TO_ADDR
// mpMapSize := [ 2 , 2 ] ;
6608: LD_ADDR_EXP 38
6612: PUSH
6613: LD_INT 2
6615: PUSH
6616: LD_INT 2
6618: PUSH
6619: EMPTY
6620: LIST
6621: LIST
6622: ST_TO_ADDR
// mpOilDeposits := [ ] ;
6623: LD_ADDR_EXP 21
6627: PUSH
6628: EMPTY
6629: ST_TO_ADDR
// mpSibDeposits := [ ] ;
6630: LD_ADDR_EXP 22
6634: PUSH
6635: EMPTY
6636: ST_TO_ADDR
// mpGlobalOilDeposits := [ ] ;
6637: LD_ADDR_EXP 50
6641: PUSH
6642: EMPTY
6643: ST_TO_ADDR
// mpGlobalSibDeposits := [ ] ;
6644: LD_ADDR_EXP 51
6648: PUSH
6649: EMPTY
6650: ST_TO_ADDR
// mpDepots := [ ] ;
6651: LD_ADDR_EXP 23
6655: PUSH
6656: EMPTY
6657: ST_TO_ADDR
// mpBuildings := [ ] ;
6658: LD_ADDR_EXP 26
6662: PUSH
6663: EMPTY
6664: ST_TO_ADDR
// mpMarkedAreas := [ ] ;
6665: LD_ADDR_EXP 27
6669: PUSH
6670: EMPTY
6671: ST_TO_ADDR
// mpBuildUpAreas := [ ] ;
6672: LD_ADDR_EXP 28
6676: PUSH
6677: EMPTY
6678: ST_TO_ADDR
// mpBuildUpTime := [ ] ;
6679: LD_ADDR_EXP 29
6683: PUSH
6684: EMPTY
6685: ST_TO_ADDR
// mpStartingResources := [ ] ;
6686: LD_ADDR_EXP 24
6690: PUSH
6691: EMPTY
6692: ST_TO_ADDR
// mpStartPos := [ ] ;
6693: LD_ADDR_EXP 30
6697: PUSH
6698: EMPTY
6699: ST_TO_ADDR
// mpBattleFlag := - 1 ;
6700: LD_ADDR_EXP 31
6704: PUSH
6705: LD_INT 1
6707: NEG
6708: ST_TO_ADDR
// mpBattleFlags := [ ] ;
6709: LD_ADDR_EXP 32
6713: PUSH
6714: EMPTY
6715: ST_TO_ADDR
// mpApemans := [ ] ;
6716: LD_ADDR_EXP 39
6720: PUSH
6721: EMPTY
6722: ST_TO_ADDR
// mpApemansArea := [ ] ;
6723: LD_ADDR_EXP 40
6727: PUSH
6728: EMPTY
6729: ST_TO_ADDR
// mpRespawn := [ ] ;
6730: LD_ADDR_EXP 42
6734: PUSH
6735: EMPTY
6736: ST_TO_ADDR
// mpKingArea := 0 ;
6737: LD_ADDR_EXP 43
6741: PUSH
6742: LD_INT 0
6744: ST_TO_ADDR
// mpPoints := [ ] ;
6745: LD_ADDR_EXP 44
6749: PUSH
6750: EMPTY
6751: ST_TO_ADDR
// mpVehicles := 0 ;
6752: LD_ADDR_EXP 45
6756: PUSH
6757: LD_INT 0
6759: ST_TO_ADDR
// mpShipments := 0 ;
6760: LD_ADDR_EXP 36
6764: PUSH
6765: LD_INT 0
6767: ST_TO_ADDR
// mpRespawnPull := [ [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
6768: LD_ADDR_EXP 49
6772: PUSH
6773: EMPTY
6774: PUSH
6775: EMPTY
6776: PUSH
6777: EMPTY
6778: PUSH
6779: EMPTY
6780: PUSH
6781: EMPTY
6782: PUSH
6783: EMPTY
6784: PUSH
6785: EMPTY
6786: PUSH
6787: EMPTY
6788: PUSH
6789: EMPTY
6790: LIST
6791: LIST
6792: LIST
6793: LIST
6794: LIST
6795: LIST
6796: LIST
6797: LIST
6798: ST_TO_ADDR
// mpApePosIndex := [ [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
6799: LD_ADDR_EXP 41
6803: PUSH
6804: EMPTY
6805: PUSH
6806: EMPTY
6807: PUSH
6808: EMPTY
6809: PUSH
6810: EMPTY
6811: PUSH
6812: EMPTY
6813: PUSH
6814: EMPTY
6815: PUSH
6816: EMPTY
6817: PUSH
6818: EMPTY
6819: PUSH
6820: EMPTY
6821: LIST
6822: LIST
6823: LIST
6824: LIST
6825: LIST
6826: LIST
6827: LIST
6828: LIST
6829: ST_TO_ADDR
// mpEmissions := 0 ;
6830: LD_ADDR_EXP 46
6834: PUSH
6835: LD_INT 0
6837: ST_TO_ADDR
// mpTeleports := 0 ;
6838: LD_ADDR_EXP 52
6842: PUSH
6843: LD_INT 0
6845: ST_TO_ADDR
// mpArtifacts := 0 ;
6846: LD_ADDR_EXP 53
6850: PUSH
6851: LD_INT 0
6853: ST_TO_ADDR
// mpPeopleSkill := 3 ;
6854: LD_ADDR_EXP 34
6858: PUSH
6859: LD_INT 3
6861: ST_TO_ADDR
// mpPeopleAmount := 15 ;
6862: LD_ADDR_EXP 33
6866: PUSH
6867: LD_INT 15
6869: ST_TO_ADDR
// mpDisplayStrings := 0 ;
6870: LD_ADDR_EXP 47
6874: PUSH
6875: LD_INT 0
6877: ST_TO_ADDR
// mpGameActive := false ;
6878: LD_ADDR_EXP 48
6882: PUSH
6883: LD_INT 0
6885: ST_TO_ADDR
// mpBlockRespThread := false ;
6886: LD_ADDR_EXP 54
6890: PUSH
6891: LD_INT 0
6893: ST_TO_ADDR
// for i := 1 to 32 do
6894: LD_ADDR_VAR 0 2
6898: PUSH
6899: DOUBLE
6900: LD_INT 1
6902: DEC
6903: ST_TO_ADDR
6904: LD_INT 32
6906: PUSH
6907: FOR_TO
6908: IFFALSE 6935
// mpGameSettings := Replace ( mpGameSettings , i , 0 ) ;
6910: LD_ADDR_EXP 15
6914: PUSH
6915: LD_EXP 15
6919: PPUSH
6920: LD_VAR 0 2
6924: PPUSH
6925: LD_INT 0
6927: PPUSH
6928: CALL_OW 1
6932: ST_TO_ADDR
6933: GO 6907
6935: POP
6936: POP
// end ;
6937: LD_VAR 0 1
6941: RET
// export function StartMultiplayer ; var i , j , b , x , y , side , pos , nation , ape , team , setting , resources , gameTypes ; begin
6942: LD_INT 0
6944: PPUSH
6945: PPUSH
6946: PPUSH
6947: PPUSH
6948: PPUSH
6949: PPUSH
6950: PPUSH
6951: PPUSH
6952: PPUSH
6953: PPUSH
6954: PPUSH
6955: PPUSH
6956: PPUSH
6957: PPUSH
// gameTypes := [ GameTypeNormal , GameTypeSurvival , GameTypeKing , GameTypeFamine ] ;
6958: LD_ADDR_VAR 0 14
6962: PUSH
6963: LD_INT 1
6965: PUSH
6966: LD_INT 2
6968: PUSH
6969: LD_INT 3
6971: PUSH
6972: LD_INT 5
6974: PUSH
6975: EMPTY
6976: LIST
6977: LIST
6978: LIST
6979: LIST
6980: ST_TO_ADDR
// for i in gameTypes do
6981: LD_ADDR_VAR 0 2
6985: PUSH
6986: LD_VAR 0 14
6990: PUSH
6991: FOR_IN
6992: IFFALSE 7001
// disable ( i ) ;
6994: LD_VAR 0 2
6998: DISABLE_MARKED
6999: GO 6991
7001: POP
7002: POP
// if Multiplayer then
7003: LD_OWVAR 4
7007: IFFALSE 7191
// begin mpGameType := mp_game_type ;
7009: LD_ADDR_EXP 12
7013: PUSH
7014: LD_OWVAR 6
7018: ST_TO_ADDR
// your_side := mp_player_side ;
7019: LD_ADDR_OWVAR 2
7023: PUSH
7024: LD_OWVAR 7
7028: ST_TO_ADDR
// mpSidePositions := mp_sides_positions ;
7029: LD_ADDR_EXP 16
7033: PUSH
7034: LD_OWVAR 17
7038: ST_TO_ADDR
// mpSideTeams := mp_sides_teams ;
7039: LD_ADDR_EXP 17
7043: PUSH
7044: LD_OWVAR 15
7048: ST_TO_ADDR
// mpSideNations := mp_sides_nations ;
7049: LD_ADDR_EXP 18
7053: PUSH
7054: LD_OWVAR 16
7058: ST_TO_ADDR
// mpTeams := mp_teams ;
7059: LD_ADDR_EXP 19
7063: PUSH
7064: LD_OWVAR 12
7068: ST_TO_ADDR
// for i := 1 to Count ( mpGameSettingsKeys ) do
7069: LD_ADDR_VAR 0 2
7073: PUSH
7074: DOUBLE
7075: LD_INT 1
7077: DEC
7078: ST_TO_ADDR
7079: LD_EXP 13
7083: PPUSH
7084: CALL 23623 0 1
7088: PUSH
7089: FOR_TO
7090: IFFALSE 7166
// begin setting := mpGameSettingsKeys [ i ] ;
7092: LD_ADDR_VAR 0 12
7096: PUSH
7097: LD_EXP 13
7101: PUSH
7102: LD_VAR 0 2
7106: ARRAY
7107: ST_TO_ADDR
// if setting then
7108: LD_VAR 0 12
7112: IFFALSE 7164
// mpGameSettings := Replace ( mpGameSettings , i , mpGameSettingsValues [ i ] [ GetMultiplayerSetting ( i - 1 ) + 1 ] ) ;
7114: LD_ADDR_EXP 15
7118: PUSH
7119: LD_EXP 15
7123: PPUSH
7124: LD_VAR 0 2
7128: PPUSH
7129: LD_EXP 14
7133: PUSH
7134: LD_VAR 0 2
7138: ARRAY
7139: PUSH
7140: LD_VAR 0 2
7144: PUSH
7145: LD_INT 1
7147: MINUS
7148: PPUSH
7149: CALL_OW 426
7153: PUSH
7154: LD_INT 1
7156: PLUS
7157: ARRAY
7158: PPUSH
7159: CALL_OW 1
7163: ST_TO_ADDR
// end ;
7164: GO 7089
7166: POP
7167: POP
// mpTeamGame := ( mpSideTeams diff [ 0 ] ) > 1 ;
7168: LD_ADDR_EXP 20
7172: PUSH
7173: LD_EXP 17
7177: PUSH
7178: LD_INT 0
7180: PUSH
7181: EMPTY
7182: LIST
7183: DIFF
7184: PUSH
7185: LD_INT 1
7187: GREATER
7188: ST_TO_ADDR
// end else
7189: GO 7191
// begin end ; GetMultiplayerMapData ( mpGameType ) ;
7191: LD_EXP 12
7195: PPUSH
7196: CALL 842 0 1
// if Count ( mpMarkedAreas ) then
7200: LD_EXP 27
7204: PPUSH
7205: CALL 23623 0 1
7209: IFFALSE 7240
// begin for i in mpMarkedAreas do
7211: LD_ADDR_VAR 0 2
7215: PUSH
7216: LD_EXP 27
7220: PUSH
7221: FOR_IN
7222: IFFALSE 7238
// SetAreaMapShow ( i , 0 ) ;
7224: LD_VAR 0 2
7228: PPUSH
7229: LD_INT 0
7231: PPUSH
7232: CALL_OW 424
7236: GO 7221
7238: POP
7239: POP
// end ; for i := 1 to 8 do
7240: LD_ADDR_VAR 0 2
7244: PUSH
7245: DOUBLE
7246: LD_INT 1
7248: DEC
7249: ST_TO_ADDR
7250: LD_INT 8
7252: PUSH
7253: FOR_TO
7254: IFFALSE 8518
// begin if not mpSidePositions [ i ] then
7256: LD_EXP 16
7260: PUSH
7261: LD_VAR 0 2
7265: ARRAY
7266: NOT
7267: IFFALSE 7271
// continue ;
7269: GO 7253
// side := i ;
7271: LD_ADDR_VAR 0 7
7275: PUSH
7276: LD_VAR 0 2
7280: ST_TO_ADDR
// nation := mpSideNations [ i ] ;
7281: LD_ADDR_VAR 0 9
7285: PUSH
7286: LD_EXP 18
7290: PUSH
7291: LD_VAR 0 2
7295: ARRAY
7296: ST_TO_ADDR
// pos := mpSidePositions [ i ] ;
7297: LD_ADDR_VAR 0 8
7301: PUSH
7302: LD_EXP 16
7306: PUSH
7307: LD_VAR 0 2
7311: ARRAY
7312: ST_TO_ADDR
// if Count ( mpOilDeposits ) then
7313: LD_EXP 21
7317: PPUSH
7318: CALL 23623 0 1
7322: IFFALSE 7399
// begin for j in mpOilDeposits [ pos ] do
7324: LD_ADDR_VAR 0 3
7328: PUSH
7329: LD_EXP 21
7333: PUSH
7334: LD_VAR 0 8
7338: ARRAY
7339: PUSH
7340: FOR_IN
7341: IFFALSE 7397
// begin CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_oil ) ;
7343: LD_VAR 0 3
7347: PUSH
7348: LD_INT 1
7350: ARRAY
7351: PPUSH
7352: LD_VAR 0 3
7356: PUSH
7357: LD_INT 2
7359: ARRAY
7360: PPUSH
7361: LD_INT 2
7363: PPUSH
7364: CALL_OW 62
// SetResourceVisibility ( j [ 1 ] , j [ 2 ] , side ) ;
7368: LD_VAR 0 3
7372: PUSH
7373: LD_INT 1
7375: ARRAY
7376: PPUSH
7377: LD_VAR 0 3
7381: PUSH
7382: LD_INT 2
7384: ARRAY
7385: PPUSH
7386: LD_VAR 0 7
7390: PPUSH
7391: CALL_OW 441
// end ;
7395: GO 7340
7397: POP
7398: POP
// end ; if Count ( mpSibDeposits ) then
7399: LD_EXP 22
7403: PPUSH
7404: CALL 23623 0 1
7408: IFFALSE 7485
// begin for j in mpSibDeposits [ pos ] do
7410: LD_ADDR_VAR 0 3
7414: PUSH
7415: LD_EXP 22
7419: PUSH
7420: LD_VAR 0 8
7424: ARRAY
7425: PUSH
7426: FOR_IN
7427: IFFALSE 7483
// begin CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_siberit ) ;
7429: LD_VAR 0 3
7433: PUSH
7434: LD_INT 1
7436: ARRAY
7437: PPUSH
7438: LD_VAR 0 3
7442: PUSH
7443: LD_INT 2
7445: ARRAY
7446: PPUSH
7447: LD_INT 3
7449: PPUSH
7450: CALL_OW 62
// SetResourceVisibility ( j [ 1 ] , j [ 2 ] , side ) ;
7454: LD_VAR 0 3
7458: PUSH
7459: LD_INT 1
7461: ARRAY
7462: PPUSH
7463: LD_VAR 0 3
7467: PUSH
7468: LD_INT 2
7470: ARRAY
7471: PPUSH
7472: LD_VAR 0 7
7476: PPUSH
7477: CALL_OW 441
// end ;
7481: GO 7426
7483: POP
7484: POP
// end ; InitBc ;
7485: CALL_OW 21
// InitUc ;
7489: CALL_OW 18
// uc_side := side ;
7493: LD_ADDR_OWVAR 20
7497: PUSH
7498: LD_VAR 0 7
7502: ST_TO_ADDR
// uc_nation := nation ;
7503: LD_ADDR_OWVAR 21
7507: PUSH
7508: LD_VAR 0 9
7512: ST_TO_ADDR
// if Count ( mpDepots ) then
7513: LD_EXP 23
7517: PPUSH
7518: CALL 23623 0 1
7522: IFFALSE 7706
// begin if mpGameType = GameTypeSurvival then
7524: LD_EXP 12
7528: PUSH
7529: LD_INT 2
7531: EQUAL
7532: IFFALSE 7552
// begin bc_level := 10 ;
7534: LD_ADDR_OWVAR 43
7538: PUSH
7539: LD_INT 10
7541: ST_TO_ADDR
// bc_type := b_warehouse ;
7542: LD_ADDR_OWVAR 42
7546: PUSH
7547: LD_INT 1
7549: ST_TO_ADDR
// end else
7550: GO 7568
// begin bc_level := 0 ;
7552: LD_ADDR_OWVAR 43
7556: PUSH
7557: LD_INT 0
7559: ST_TO_ADDR
// bc_type := b_depot ;
7560: LD_ADDR_OWVAR 42
7564: PUSH
7565: LD_INT 0
7567: ST_TO_ADDR
// end ; b := CreateAndPlaceBuildingXYD ( mpDepots [ pos ] [ 1 ] , mpDepots [ pos ] [ 2 ] , mpDepots [ pos ] [ 3 ] ) ;
7568: LD_ADDR_VAR 0 4
7572: PUSH
7573: LD_EXP 23
7577: PUSH
7578: LD_VAR 0 8
7582: ARRAY
7583: PUSH
7584: LD_INT 1
7586: ARRAY
7587: PPUSH
7588: LD_EXP 23
7592: PUSH
7593: LD_VAR 0 8
7597: ARRAY
7598: PUSH
7599: LD_INT 2
7601: ARRAY
7602: PPUSH
7603: LD_EXP 23
7607: PUSH
7608: LD_VAR 0 8
7612: ARRAY
7613: PUSH
7614: LD_INT 3
7616: ARRAY
7617: PPUSH
7618: CALL_OW 47
7622: ST_TO_ADDR
// SetBName ( b , @ & side ) ;
7623: LD_VAR 0 4
7627: PPUSH
7628: LD_STRING @
7630: PUSH
7631: LD_VAR 0 7
7635: STR
7636: PPUSH
7637: CALL_OW 500
// if Count ( mpStartingResources ) then
7641: LD_EXP 24
7645: PPUSH
7646: CALL 23623 0 1
7650: IFFALSE 7704
// begin for j := 1 to mpStartingResources do
7652: LD_ADDR_VAR 0 3
7656: PUSH
7657: DOUBLE
7658: LD_INT 1
7660: DEC
7661: ST_TO_ADDR
7662: LD_EXP 24
7666: PUSH
7667: FOR_TO
7668: IFFALSE 7702
// SetResourceType ( GetBase ( b ) , j , mpStartingResources [ j ] ) ;
7670: LD_VAR 0 4
7674: PPUSH
7675: CALL_OW 274
7679: PPUSH
7680: LD_VAR 0 3
7684: PPUSH
7685: LD_EXP 24
7689: PUSH
7690: LD_VAR 0 3
7694: ARRAY
7695: PPUSH
7696: CALL_OW 277
7700: GO 7667
7702: POP
7703: POP
// end ; end else
7704: GO 7853
// if Count ( mpStartingResources ) then
7706: LD_EXP 24
7710: PPUSH
7711: CALL 23623 0 1
7715: IFFALSE 7853
// begin for j := 1 to mpStartingResources do
7717: LD_ADDR_VAR 0 3
7721: PUSH
7722: DOUBLE
7723: LD_INT 1
7725: DEC
7726: ST_TO_ADDR
7727: LD_EXP 24
7731: PUSH
7732: FOR_TO
7733: IFFALSE 7851
// begin resources := mpStartingResources [ j ] ;
7735: LD_ADDR_VAR 0 13
7739: PUSH
7740: LD_EXP 24
7744: PUSH
7745: LD_VAR 0 3
7749: ARRAY
7750: ST_TO_ADDR
// repeat if resources >= 50 then
7751: LD_VAR 0 13
7755: PUSH
7756: LD_INT 50
7758: GREATEREQUAL
7759: IFFALSE 7805
// begin CreateResourcesXYR ( j , 5 , x , y , 4 , false ) ;
7761: LD_VAR 0 3
7765: PPUSH
7766: LD_INT 5
7768: PPUSH
7769: LD_VAR 0 5
7773: PPUSH
7774: LD_VAR 0 6
7778: PPUSH
7779: LD_INT 4
7781: PPUSH
7782: LD_INT 0
7784: PPUSH
7785: CALL_OW 60
// resources := resources - 50 ;
7789: LD_ADDR_VAR 0 13
7793: PUSH
7794: LD_VAR 0 13
7798: PUSH
7799: LD_INT 50
7801: MINUS
7802: ST_TO_ADDR
// end else
7803: GO 7839
// CreateResourcesXYR ( j , resources div 10 , x , y , 4 , false ) ;
7805: LD_VAR 0 3
7809: PPUSH
7810: LD_VAR 0 13
7814: PUSH
7815: LD_INT 10
7817: DIV
7818: PPUSH
7819: LD_VAR 0 5
7823: PPUSH
7824: LD_VAR 0 6
7828: PPUSH
7829: LD_INT 4
7831: PPUSH
7832: LD_INT 0
7834: PPUSH
7835: CALL_OW 60
// until resources <= 0 ;
7839: LD_VAR 0 13
7843: PUSH
7844: LD_INT 0
7846: LESSEQUAL
7847: IFFALSE 7751
// end ;
7849: GO 7732
7851: POP
7852: POP
// end ; if Count ( mpBuildings ) then
7853: LD_EXP 26
7857: PPUSH
7858: CALL 23623 0 1
7862: IFFALSE 7940
// begin for j in mpBuildings [ pos ] do
7864: LD_ADDR_VAR 0 3
7868: PUSH
7869: LD_EXP 26
7873: PUSH
7874: LD_VAR 0 8
7878: ARRAY
7879: PUSH
7880: FOR_IN
7881: IFFALSE 7938
// begin bc_level := 0 ;
7883: LD_ADDR_OWVAR 43
7887: PUSH
7888: LD_INT 0
7890: ST_TO_ADDR
// bc_type := j [ 1 ] ;
7891: LD_ADDR_OWVAR 42
7895: PUSH
7896: LD_VAR 0 3
7900: PUSH
7901: LD_INT 1
7903: ARRAY
7904: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( j [ 2 ] , j [ 3 ] , j [ 4 ] ) ;
7905: LD_VAR 0 3
7909: PUSH
7910: LD_INT 2
7912: ARRAY
7913: PPUSH
7914: LD_VAR 0 3
7918: PUSH
7919: LD_INT 3
7921: ARRAY
7922: PPUSH
7923: LD_VAR 0 3
7927: PUSH
7928: LD_INT 4
7930: ARRAY
7931: PPUSH
7932: CALL_OW 47
// end ;
7936: GO 7880
7938: POP
7939: POP
// end ; if mpBattleFlag > - 1 then
7940: LD_EXP 31
7944: PUSH
7945: LD_INT 1
7947: NEG
7948: GREATER
7949: IFFALSE 8108
// begin x := mpStartPos [ pos ] [ 1 ] ;
7951: LD_ADDR_VAR 0 5
7955: PUSH
7956: LD_EXP 30
7960: PUSH
7961: LD_VAR 0 8
7965: ARRAY
7966: PUSH
7967: LD_INT 1
7969: ARRAY
7970: ST_TO_ADDR
// y := mpStartPos [ pos ] [ 2 ] ;
7971: LD_ADDR_VAR 0 6
7975: PUSH
7976: LD_EXP 30
7980: PUSH
7981: LD_VAR 0 8
7985: ARRAY
7986: PUSH
7987: LD_INT 2
7989: ARRAY
7990: ST_TO_ADDR
// PlaceEnvironment ( x , y , 12 , 2 ) ;
7991: LD_VAR 0 5
7995: PPUSH
7996: LD_VAR 0 6
8000: PPUSH
8001: LD_INT 12
8003: PPUSH
8004: LD_INT 2
8006: PPUSH
8007: CALL_OW 349
// mpBattleFlags := Replace ( mpBattleFlags , side , SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 70 ] , [ bfo_defend_bonus_building , 40 ] , [ bfo_range , 25 ] , [ bfo_height , 100 ] ] ) ) ;
8011: LD_ADDR_EXP 32
8015: PUSH
8016: LD_EXP 32
8020: PPUSH
8021: LD_VAR 0 7
8025: PPUSH
8026: LD_VAR 0 7
8030: PPUSH
8031: LD_VAR 0 5
8035: PPUSH
8036: LD_VAR 0 6
8040: PPUSH
8041: LD_INT 1
8043: PUSH
8044: LD_INT 100
8046: PUSH
8047: EMPTY
8048: LIST
8049: LIST
8050: PUSH
8051: LD_INT 2
8053: PUSH
8054: LD_INT 70
8056: PUSH
8057: EMPTY
8058: LIST
8059: LIST
8060: PUSH
8061: LD_INT 3
8063: PUSH
8064: LD_INT 40
8066: PUSH
8067: EMPTY
8068: LIST
8069: LIST
8070: PUSH
8071: LD_INT 10
8073: PUSH
8074: LD_INT 25
8076: PUSH
8077: EMPTY
8078: LIST
8079: LIST
8080: PUSH
8081: LD_INT 20
8083: PUSH
8084: LD_INT 100
8086: PUSH
8087: EMPTY
8088: LIST
8089: LIST
8090: PUSH
8091: EMPTY
8092: LIST
8093: LIST
8094: LIST
8095: LIST
8096: LIST
8097: PPUSH
8098: CALL_OW 418
8102: PPUSH
8103: CALL_OW 1
8107: ST_TO_ADDR
// end ; if mpSibDetection and GetTech ( tech_sibdet , side ) = state_enabled then
8108: LD_EXP 35
8112: PUSH
8113: LD_INT 20
8115: PPUSH
8116: LD_VAR 0 7
8120: PPUSH
8121: CALL_OW 321
8125: PUSH
8126: LD_INT 1
8128: EQUAL
8129: AND
8130: IFFALSE 8147
// SetTech ( tech_SibDet , side , state_researched ) ;
8132: LD_INT 20
8134: PPUSH
8135: LD_VAR 0 7
8139: PPUSH
8140: LD_INT 2
8142: PPUSH
8143: CALL_OW 322
// if not mpArtifacts then
8147: LD_EXP 53
8151: NOT
8152: IFFALSE 8169
// SetTech ( tech_artifact , side , state_disabled ) ;
8154: LD_INT 24
8156: PPUSH
8157: LD_VAR 0 7
8161: PPUSH
8162: LD_INT 0
8164: PPUSH
8165: CALL_OW 322
// if mpSibBomb = 1 then
8169: LD_EXP 37
8173: PUSH
8174: LD_INT 1
8176: EQUAL
8177: IFFALSE 8196
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
8179: LD_INT 25
8181: PPUSH
8182: LD_VAR 0 7
8186: PPUSH
8187: LD_INT 1
8189: PPUSH
8190: CALL_OW 322
// end else
8194: GO 8211
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
8196: LD_INT 25
8198: PPUSH
8199: LD_VAR 0 7
8203: PPUSH
8204: LD_INT 0
8206: PPUSH
8207: CALL_OW 322
// end ; if mpVehicles then
8211: LD_EXP 45
8215: IFFALSE 8314
// begin for j in mpPrepareVehicles ( side , nation , mpVehicles ) do
8217: LD_ADDR_VAR 0 3
8221: PUSH
8222: LD_VAR 0 7
8226: PPUSH
8227: LD_VAR 0 9
8231: PPUSH
8232: LD_EXP 45
8236: PPUSH
8237: CALL 9428 0 3
8241: PUSH
8242: FOR_IN
8243: IFFALSE 8312
// begin SetDir ( j , rand ( 0 , 5 ) ) ;
8245: LD_VAR 0 3
8249: PPUSH
8250: LD_INT 0
8252: PPUSH
8253: LD_INT 5
8255: PPUSH
8256: CALL_OW 12
8260: PPUSH
8261: CALL_OW 233
// PlaceUnitXYR ( j , mpStartPos [ pos ] [ 1 ] , mpStartPos [ pos ] [ 2 ] , 12 , false ) ;
8265: LD_VAR 0 3
8269: PPUSH
8270: LD_EXP 30
8274: PUSH
8275: LD_VAR 0 8
8279: ARRAY
8280: PUSH
8281: LD_INT 1
8283: ARRAY
8284: PPUSH
8285: LD_EXP 30
8289: PUSH
8290: LD_VAR 0 8
8294: ARRAY
8295: PUSH
8296: LD_INT 2
8298: ARRAY
8299: PPUSH
8300: LD_INT 12
8302: PPUSH
8303: LD_INT 0
8305: PPUSH
8306: CALL_OW 50
// end ;
8310: GO 8242
8312: POP
8313: POP
// end ; team := mpPrepareTeam ( side , nation , mpPeopleAmount , mpPeopleSkill ) ;
8314: LD_ADDR_VAR 0 11
8318: PUSH
8319: LD_VAR 0 7
8323: PPUSH
8324: LD_VAR 0 9
8328: PPUSH
8329: LD_EXP 33
8333: PPUSH
8334: LD_EXP 34
8338: PPUSH
8339: CALL 8930 0 4
8343: ST_TO_ADDR
// for j in team do
8344: LD_ADDR_VAR 0 3
8348: PUSH
8349: LD_VAR 0 11
8353: PUSH
8354: FOR_IN
8355: IFFALSE 8404
// PlaceUnitXYR ( j , mpStartPos [ pos ] [ 1 ] , mpStartPos [ pos ] [ 2 ] , 12 , false ) ;
8357: LD_VAR 0 3
8361: PPUSH
8362: LD_EXP 30
8366: PUSH
8367: LD_VAR 0 8
8371: ARRAY
8372: PUSH
8373: LD_INT 1
8375: ARRAY
8376: PPUSH
8377: LD_EXP 30
8381: PUSH
8382: LD_VAR 0 8
8386: ARRAY
8387: PUSH
8388: LD_INT 2
8390: ARRAY
8391: PPUSH
8392: LD_INT 12
8394: PPUSH
8395: LD_INT 0
8397: PPUSH
8398: CALL_OW 50
8402: GO 8354
8404: POP
8405: POP
// if mpApemans then
8406: LD_EXP 39
8410: IFFALSE 8516
// begin for j := 1 to mpApemans do
8412: LD_ADDR_VAR 0 3
8416: PUSH
8417: DOUBLE
8418: LD_INT 1
8420: DEC
8421: ST_TO_ADDR
8422: LD_EXP 39
8426: PUSH
8427: FOR_TO
8428: IFFALSE 8514
// begin PrepareApeman ( - 5 ) ;
8430: LD_INT 5
8432: NEG
8433: PPUSH
8434: CALL 55480 0 1
// ape := CreateHuman ;
8438: LD_ADDR_VAR 0 10
8442: PUSH
8443: CALL_OW 44
8447: ST_TO_ADDR
// mpApePosIndex := Replace ( mpApePosIndex , pos , Join ( mpApePosIndex [ pos ] , ape ) ) ;
8448: LD_ADDR_EXP 41
8452: PUSH
8453: LD_EXP 41
8457: PPUSH
8458: LD_VAR 0 8
8462: PPUSH
8463: LD_EXP 41
8467: PUSH
8468: LD_VAR 0 8
8472: ARRAY
8473: PPUSH
8474: LD_VAR 0 10
8478: PPUSH
8479: CALL 59232 0 2
8483: PPUSH
8484: CALL_OW 1
8488: ST_TO_ADDR
// PlaceUnitArea ( ape , mpApemansArea [ pos ] , false ) ;
8489: LD_VAR 0 10
8493: PPUSH
8494: LD_EXP 40
8498: PUSH
8499: LD_VAR 0 8
8503: ARRAY
8504: PPUSH
8505: LD_INT 0
8507: PPUSH
8508: CALL_OW 49
// end ;
8512: GO 8427
8514: POP
8515: POP
// end ; end ;
8516: GO 7253
8518: POP
8519: POP
// if not mpTeamGame then
8520: LD_EXP 20
8524: NOT
8525: IFFALSE 8623
// begin for i := 1 to 8 do
8527: LD_ADDR_VAR 0 2
8531: PUSH
8532: DOUBLE
8533: LD_INT 1
8535: DEC
8536: ST_TO_ADDR
8537: LD_INT 8
8539: PUSH
8540: FOR_TO
8541: IFFALSE 8619
// for j := 1 to 8 do
8543: LD_ADDR_VAR 0 3
8547: PUSH
8548: DOUBLE
8549: LD_INT 1
8551: DEC
8552: ST_TO_ADDR
8553: LD_INT 8
8555: PUSH
8556: FOR_TO
8557: IFFALSE 8615
// if i <> j then
8559: LD_VAR 0 2
8563: PUSH
8564: LD_VAR 0 3
8568: NONEQUAL
8569: IFFALSE 8593
// SetAttitude ( i , j , att_neutral , true ) else
8571: LD_VAR 0 2
8575: PPUSH
8576: LD_VAR 0 3
8580: PPUSH
8581: LD_INT 0
8583: PPUSH
8584: LD_INT 1
8586: PPUSH
8587: CALL_OW 80
8591: GO 8613
// SetAttitude ( i , j , att_friend , true ) ;
8593: LD_VAR 0 2
8597: PPUSH
8598: LD_VAR 0 3
8602: PPUSH
8603: LD_INT 1
8605: PPUSH
8606: LD_INT 1
8608: PPUSH
8609: CALL_OW 80
8613: GO 8556
8615: POP
8616: POP
8617: GO 8540
8619: POP
8620: POP
// end else
8621: GO 8798
// begin if mpSharedVision then
8623: LD_EXP 25
8627: IFFALSE 8692
// begin for i in mpTeams do
8629: LD_ADDR_VAR 0 2
8633: PUSH
8634: LD_EXP 19
8638: PUSH
8639: FOR_IN
8640: IFFALSE 8690
// for j := 2 to i do
8642: LD_ADDR_VAR 0 3
8646: PUSH
8647: DOUBLE
8648: LD_INT 2
8650: DEC
8651: ST_TO_ADDR
8652: LD_VAR 0 2
8656: PUSH
8657: FOR_TO
8658: IFFALSE 8686
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
8660: LD_VAR 0 2
8664: PUSH
8665: LD_VAR 0 3
8669: ARRAY
8670: PPUSH
8671: LD_VAR 0 2
8675: PUSH
8676: LD_INT 1
8678: ARRAY
8679: PPUSH
8680: CALL_OW 343
8684: GO 8657
8686: POP
8687: POP
8688: GO 8639
8690: POP
8691: POP
// end ; for i := 1 to 8 do
8692: LD_ADDR_VAR 0 2
8696: PUSH
8697: DOUBLE
8698: LD_INT 1
8700: DEC
8701: ST_TO_ADDR
8702: LD_INT 8
8704: PUSH
8705: FOR_TO
8706: IFFALSE 8796
// for j := 1 to 8 do
8708: LD_ADDR_VAR 0 3
8712: PUSH
8713: DOUBLE
8714: LD_INT 1
8716: DEC
8717: ST_TO_ADDR
8718: LD_INT 8
8720: PUSH
8721: FOR_TO
8722: IFFALSE 8792
// if mpSideTeams [ i ] = mpSideTeams [ j ] then
8724: LD_EXP 17
8728: PUSH
8729: LD_VAR 0 2
8733: ARRAY
8734: PUSH
8735: LD_EXP 17
8739: PUSH
8740: LD_VAR 0 3
8744: ARRAY
8745: EQUAL
8746: IFFALSE 8770
// SetAttitude ( i , j , att_friend , true ) else
8748: LD_VAR 0 2
8752: PPUSH
8753: LD_VAR 0 3
8757: PPUSH
8758: LD_INT 1
8760: PPUSH
8761: LD_INT 1
8763: PPUSH
8764: CALL_OW 80
8768: GO 8790
// SetAttitude ( i , j , att_enemy , true ) ;
8770: LD_VAR 0 2
8774: PPUSH
8775: LD_VAR 0 3
8779: PPUSH
8780: LD_INT 2
8782: PPUSH
8783: LD_INT 1
8785: PPUSH
8786: CALL_OW 80
8790: GO 8721
8792: POP
8793: POP
8794: GO 8705
8796: POP
8797: POP
// end ; music_nat := mpSideNations [ your_side ] ;
8798: LD_ADDR_OWVAR 71
8802: PUSH
8803: LD_EXP 18
8807: PUSH
8808: LD_OWVAR 2
8812: ARRAY
8813: ST_TO_ADDR
// if IAmSpec then
8814: CALL_OW 531
8818: IFFALSE 8859
// begin FogOff ( true ) ;
8820: LD_INT 1
8822: PPUSH
8823: CALL_OW 344
// CenterNowOnXY ( mpMapSize [ 1 ] div 2 , mpMapSize [ 2 ] div 2 ) ;
8827: LD_EXP 38
8831: PUSH
8832: LD_INT 1
8834: ARRAY
8835: PUSH
8836: LD_INT 2
8838: DIV
8839: PPUSH
8840: LD_EXP 38
8844: PUSH
8845: LD_INT 2
8847: ARRAY
8848: PUSH
8849: LD_INT 2
8851: DIV
8852: PPUSH
8853: CALL_OW 86
// end else
8857: GO 8905
// begin CenterNowOnXY ( mpStartPos [ mpSidePositions [ your_side ] ] [ 1 ] , mpStartPos [ mpSidePositions [ your_side ] ] [ 2 ] ) ;
8859: LD_EXP 30
8863: PUSH
8864: LD_EXP 16
8868: PUSH
8869: LD_OWVAR 2
8873: ARRAY
8874: ARRAY
8875: PUSH
8876: LD_INT 1
8878: ARRAY
8879: PPUSH
8880: LD_EXP 30
8884: PUSH
8885: LD_EXP 16
8889: PUSH
8890: LD_OWVAR 2
8894: ARRAY
8895: ARRAY
8896: PUSH
8897: LD_INT 2
8899: ARRAY
8900: PPUSH
8901: CALL_OW 86
// end ; BeginBuildUp ;
8905: CALL 9906 0 0
// enable ( mpActive ) ;
8909: LD_INT 100
8911: ENABLE_MARKED
// enable ( mpGameType ) ;
8912: LD_EXP 12
8916: ENABLE_MARKED
// mpGameActive := true ;
8917: LD_ADDR_EXP 48
8921: PUSH
8922: LD_INT 1
8924: ST_TO_ADDR
// end ;
8925: LD_VAR 0 1
8929: RET
// var mpTeamPreset ; function mpPrepareTeam ( side , nation , amount , skill ) ; var i , un , class ; begin
8930: LD_INT 0
8932: PPUSH
8933: PPUSH
8934: PPUSH
8935: PPUSH
// result := [ ] ;
8936: LD_ADDR_VAR 0 5
8940: PUSH
8941: EMPTY
8942: ST_TO_ADDR
// class := class_soldier ;
8943: LD_ADDR_VAR 0 8
8947: PUSH
8948: LD_INT 1
8950: ST_TO_ADDR
// uc_side := side ;
8951: LD_ADDR_OWVAR 20
8955: PUSH
8956: LD_VAR 0 1
8960: ST_TO_ADDR
// uc_nation := nation ;
8961: LD_ADDR_OWVAR 21
8965: PUSH
8966: LD_VAR 0 2
8970: ST_TO_ADDR
// hc_name := mp_sides_players_names [ side ] ;
8971: LD_ADDR_OWVAR 26
8975: PUSH
8976: LD_OWVAR 19
8980: PUSH
8981: LD_VAR 0 1
8985: ARRAY
8986: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , class , skill + 2 ) ;
8987: LD_INT 1
8989: PPUSH
8990: LD_INT 2
8992: PPUSH
8993: CALL_OW 12
8997: PPUSH
8998: LD_VAR 0 8
9002: PPUSH
9003: LD_VAR 0 4
9007: PUSH
9008: LD_INT 2
9010: PLUS
9011: PPUSH
9012: CALL_OW 380
// hc_importance := 105 ;
9016: LD_ADDR_OWVAR 32
9020: PUSH
9021: LD_INT 105
9023: ST_TO_ADDR
// if Multiplayer then
9024: LD_OWVAR 4
9028: IFFALSE 9068
// begin hc_gallery := MULTIAVATARS ;
9030: LD_ADDR_OWVAR 33
9034: PUSH
9035: LD_STRING MULTIAVATARS
9037: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( side ) ;
9038: LD_ADDR_OWVAR 34
9042: PUSH
9043: LD_VAR 0 1
9047: PPUSH
9048: CALL_OW 525
9052: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( side ) ;
9053: LD_ADDR_OWVAR 27
9057: PUSH
9058: LD_VAR 0 1
9062: PPUSH
9063: CALL_OW 526
9067: ST_TO_ADDR
// end ; result := Join ( result , CreateHuman ) ;
9068: LD_ADDR_VAR 0 5
9072: PUSH
9073: LD_VAR 0 5
9077: PPUSH
9078: CALL_OW 44
9082: PPUSH
9083: CALL 59232 0 2
9087: ST_TO_ADDR
// if mpTeamPreset then
9088: LD_LOC 1
9092: IFFALSE 9188
// begin CopySkills ( mpTeamPreset [ 1 ] , result [ result ] ) ;
9094: LD_LOC 1
9098: PUSH
9099: LD_INT 1
9101: ARRAY
9102: PPUSH
9103: LD_VAR 0 5
9107: PUSH
9108: LD_VAR 0 5
9112: ARRAY
9113: PPUSH
9114: CALL_OW 510
// SetAttr ( result [ result ] , attr_stamina , GetAttr ( mpTeamPreset [ 1 ] , attr_stamina ) ) ;
9118: LD_VAR 0 5
9122: PUSH
9123: LD_VAR 0 5
9127: ARRAY
9128: PPUSH
9129: LD_INT 1
9131: PPUSH
9132: LD_LOC 1
9136: PUSH
9137: LD_INT 1
9139: ARRAY
9140: PPUSH
9141: LD_INT 1
9143: PPUSH
9144: CALL_OW 260
9148: PPUSH
9149: CALL_OW 239
// SetAttr ( result [ result ] , attr_speed , GetAttr ( mpTeamPreset [ 1 ] , attr_speed ) ) ;
9153: LD_VAR 0 5
9157: PUSH
9158: LD_VAR 0 5
9162: ARRAY
9163: PPUSH
9164: LD_INT 2
9166: PPUSH
9167: LD_LOC 1
9171: PUSH
9172: LD_INT 1
9174: ARRAY
9175: PPUSH
9176: LD_INT 2
9178: PPUSH
9179: CALL_OW 260
9183: PPUSH
9184: CALL_OW 239
// end ; InitHc_All ( ) ;
9188: CALL_OW 584
// class := 2 ;
9192: LD_ADDR_VAR 0 8
9196: PUSH
9197: LD_INT 2
9199: ST_TO_ADDR
// for i := 1 to ( amount - 1 ) do
9200: LD_ADDR_VAR 0 6
9204: PUSH
9205: DOUBLE
9206: LD_INT 1
9208: DEC
9209: ST_TO_ADDR
9210: LD_VAR 0 3
9214: PUSH
9215: LD_INT 1
9217: MINUS
9218: PUSH
9219: FOR_TO
9220: IFFALSE 9404
// begin PrepareHuman ( false , class , skill ) ;
9222: LD_INT 0
9224: PPUSH
9225: LD_VAR 0 8
9229: PPUSH
9230: LD_VAR 0 4
9234: PPUSH
9235: CALL_OW 380
// un := CreateHuman ;
9239: LD_ADDR_VAR 0 7
9243: PUSH
9244: CALL_OW 44
9248: ST_TO_ADDR
// result := Join ( result , un ) ;
9249: LD_ADDR_VAR 0 5
9253: PUSH
9254: LD_VAR 0 5
9258: PPUSH
9259: LD_VAR 0 7
9263: PPUSH
9264: CALL 59232 0 2
9268: ST_TO_ADDR
// if mpTeamPreset then
9269: LD_LOC 1
9273: IFFALSE 9369
// begin CopySkills ( mpTeamPreset [ i + 1 ] , un ) ;
9275: LD_LOC 1
9279: PUSH
9280: LD_VAR 0 6
9284: PUSH
9285: LD_INT 1
9287: PLUS
9288: ARRAY
9289: PPUSH
9290: LD_VAR 0 7
9294: PPUSH
9295: CALL_OW 510
// SetAttr ( un , attr_stamina , GetAttr ( mpTeamPreset [ i + 1 ] , attr_stamina ) ) ;
9299: LD_VAR 0 7
9303: PPUSH
9304: LD_INT 1
9306: PPUSH
9307: LD_LOC 1
9311: PUSH
9312: LD_VAR 0 6
9316: PUSH
9317: LD_INT 1
9319: PLUS
9320: ARRAY
9321: PPUSH
9322: LD_INT 1
9324: PPUSH
9325: CALL_OW 260
9329: PPUSH
9330: CALL_OW 239
// SetAttr ( un , attr_speed , GetAttr ( mpTeamPreset [ i + 1 ] , attr_speed ) ) ;
9334: LD_VAR 0 7
9338: PPUSH
9339: LD_INT 2
9341: PPUSH
9342: LD_LOC 1
9346: PUSH
9347: LD_VAR 0 6
9351: PUSH
9352: LD_INT 1
9354: PLUS
9355: ARRAY
9356: PPUSH
9357: LD_INT 2
9359: PPUSH
9360: CALL_OW 260
9364: PPUSH
9365: CALL_OW 239
// end ; class := Inc ( class ) ;
9369: LD_ADDR_VAR 0 8
9373: PUSH
9374: LD_VAR 0 8
9378: PPUSH
9379: CALL 60593 0 1
9383: ST_TO_ADDR
// if class = 5 then
9384: LD_VAR 0 8
9388: PUSH
9389: LD_INT 5
9391: EQUAL
9392: IFFALSE 9402
// class := 1 ;
9394: LD_ADDR_VAR 0 8
9398: PUSH
9399: LD_INT 1
9401: ST_TO_ADDR
// end ;
9402: GO 9219
9404: POP
9405: POP
// if not mpTeamPreset then
9406: LD_LOC 1
9410: NOT
9411: IFFALSE 9423
// mpTeamPreset := result ;
9413: LD_ADDR_LOC 1
9417: PUSH
9418: LD_VAR 0 5
9422: ST_TO_ADDR
// end ;
9423: LD_VAR 0 5
9427: RET
// function mpPrepareVehicles ( side , nation , vehicles ) ; var i ; begin
9428: LD_INT 0
9430: PPUSH
9431: PPUSH
// result := [ ] ;
9432: LD_ADDR_VAR 0 4
9436: PUSH
9437: EMPTY
9438: ST_TO_ADDR
// if not vehicles then
9439: LD_VAR 0 3
9443: NOT
9444: IFFALSE 9448
// exit ;
9446: GO 9607
// for i := 1 to vehicles [ nation ] do
9448: LD_ADDR_VAR 0 5
9452: PUSH
9453: DOUBLE
9454: LD_INT 1
9456: DEC
9457: ST_TO_ADDR
9458: LD_VAR 0 3
9462: PUSH
9463: LD_VAR 0 2
9467: ARRAY
9468: PUSH
9469: FOR_TO
9470: IFFALSE 9605
// begin uc_side := side ;
9472: LD_ADDR_OWVAR 20
9476: PUSH
9477: LD_VAR 0 1
9481: ST_TO_ADDR
// uc_nation := nation ;
9482: LD_ADDR_OWVAR 21
9486: PUSH
9487: LD_VAR 0 2
9491: ST_TO_ADDR
// PrepareVehicle ( vehicles [ nation ] [ i ] [ 1 ] , vehicles [ nation ] [ i ] [ 2 ] , vehicles [ nation ] [ i ] [ 3 ] , vehicles [ nation ] [ i ] [ 4 ] , 80 ) ;
9492: LD_VAR 0 3
9496: PUSH
9497: LD_VAR 0 2
9501: ARRAY
9502: PUSH
9503: LD_VAR 0 5
9507: ARRAY
9508: PUSH
9509: LD_INT 1
9511: ARRAY
9512: PPUSH
9513: LD_VAR 0 3
9517: PUSH
9518: LD_VAR 0 2
9522: ARRAY
9523: PUSH
9524: LD_VAR 0 5
9528: ARRAY
9529: PUSH
9530: LD_INT 2
9532: ARRAY
9533: PPUSH
9534: LD_VAR 0 3
9538: PUSH
9539: LD_VAR 0 2
9543: ARRAY
9544: PUSH
9545: LD_VAR 0 5
9549: ARRAY
9550: PUSH
9551: LD_INT 3
9553: ARRAY
9554: PPUSH
9555: LD_VAR 0 3
9559: PUSH
9560: LD_VAR 0 2
9564: ARRAY
9565: PUSH
9566: LD_VAR 0 5
9570: ARRAY
9571: PUSH
9572: LD_INT 4
9574: ARRAY
9575: PPUSH
9576: LD_INT 80
9578: PPUSH
9579: CALL 26361 0 5
// result := Join ( result , CreateVehicle ) ;
9583: LD_ADDR_VAR 0 4
9587: PUSH
9588: LD_VAR 0 4
9592: PPUSH
9593: CALL_OW 45
9597: PPUSH
9598: CALL 59232 0 2
9602: ST_TO_ADDR
// end ;
9603: GO 9469
9605: POP
9606: POP
// end ;
9607: LD_VAR 0 4
9611: RET
// function mpUpdateFlags ( strength ) ; var i ; begin
9612: LD_INT 0
9614: PPUSH
9615: PPUSH
// for i in mpBattleFlags do
9616: LD_ADDR_VAR 0 3
9620: PUSH
9621: LD_EXP 32
9625: PUSH
9626: FOR_IN
9627: IFFALSE 9704
// ChangeBattleFlagOptions ( i , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength * 0.7 ] , [ bfo_defend_bonus_building , strength * 0.4 ] , [ bfo_height , strength ] ] ) ;
9629: LD_VAR 0 3
9633: PPUSH
9634: LD_INT 1
9636: PUSH
9637: LD_VAR 0 1
9641: PUSH
9642: EMPTY
9643: LIST
9644: LIST
9645: PUSH
9646: LD_INT 2
9648: PUSH
9649: LD_VAR 0 1
9653: PUSH
9654: LD_REAL  7.00000000000000E-0001
9657: MUL
9658: PUSH
9659: EMPTY
9660: LIST
9661: LIST
9662: PUSH
9663: LD_INT 3
9665: PUSH
9666: LD_VAR 0 1
9670: PUSH
9671: LD_REAL  4.00000000000000E-0001
9674: MUL
9675: PUSH
9676: EMPTY
9677: LIST
9678: LIST
9679: PUSH
9680: LD_INT 20
9682: PUSH
9683: LD_VAR 0 1
9687: PUSH
9688: EMPTY
9689: LIST
9690: LIST
9691: PUSH
9692: EMPTY
9693: LIST
9694: LIST
9695: LIST
9696: LIST
9697: PPUSH
9698: CALL_OW 423
9702: GO 9626
9704: POP
9705: POP
// end ;
9706: LD_VAR 0 2
9710: RET
// every 0 0$1 trigger mpActive do var i , strength ;
9711: LD_INT 100
9713: IFFALSE 9808
9715: GO 9717
9717: DISABLE
9718: LD_INT 0
9720: PPUSH
9721: PPUSH
// begin if mpBattleFlag <= 0 then
9722: LD_EXP 31
9726: PUSH
9727: LD_INT 0
9729: LESSEQUAL
9730: IFFALSE 9734
// exit ;
9732: GO 9808
// strength := 100 ;
9734: LD_ADDR_VAR 0 2
9738: PUSH
9739: LD_INT 100
9741: ST_TO_ADDR
// repeat wait ( mpBattleFlag ) ;
9742: LD_EXP 31
9746: PPUSH
9747: CALL_OW 67
// strength := Dec ( strength ) ;
9751: LD_ADDR_VAR 0 2
9755: PUSH
9756: LD_VAR 0 2
9760: PPUSH
9761: CALL 60615 0 1
9765: ST_TO_ADDR
// mpUpdateFlags ( strength ) ;
9766: LD_VAR 0 2
9770: PPUSH
9771: CALL 9612 0 1
// until not strength ;
9775: LD_VAR 0 2
9779: NOT
9780: IFFALSE 9742
// for i in mpBattleFlags do
9782: LD_ADDR_VAR 0 1
9786: PUSH
9787: LD_EXP 32
9791: PUSH
9792: FOR_IN
9793: IFFALSE 9806
// KillBattleFlag ( i ) ;
9795: LD_VAR 0 1
9799: PPUSH
9800: CALL_OW 419
9804: GO 9792
9806: POP
9807: POP
// end ;
9808: PPOPN 2
9810: END
// every 0 0$1 marked mpActive do var side , tmp ;
9811: GO 9813
9813: DISABLE
9814: LD_INT 0
9816: PPUSH
9817: PPUSH
// begin if mpSibBomb <= 1 then
9818: LD_EXP 37
9822: PUSH
9823: LD_INT 1
9825: LESSEQUAL
9826: IFFALSE 9830
// exit ;
9828: GO 9903
// tmp := mpSibBomb ;
9830: LD_ADDR_VAR 0 2
9834: PUSH
9835: LD_EXP 37
9839: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
9840: LD_INT 35
9842: PPUSH
9843: CALL_OW 67
// tmp := tmp - 0 0$1 ;
9847: LD_ADDR_VAR 0 2
9851: PUSH
9852: LD_VAR 0 2
9856: PUSH
9857: LD_INT 35
9859: MINUS
9860: ST_TO_ADDR
// until not tmp ;
9861: LD_VAR 0 2
9865: NOT
9866: IFFALSE 9840
// for side := 1 to 8 do
9868: LD_ADDR_VAR 0 1
9872: PUSH
9873: DOUBLE
9874: LD_INT 1
9876: DEC
9877: ST_TO_ADDR
9878: LD_INT 8
9880: PUSH
9881: FOR_TO
9882: IFFALSE 9901
// SetTech ( tech_SibFiss , side , state_enabled ) ;
9884: LD_INT 25
9886: PPUSH
9887: LD_VAR 0 1
9891: PPUSH
9892: LD_INT 1
9894: PPUSH
9895: CALL_OW 322
9899: GO 9881
9901: POP
9902: POP
// end ;
9903: PPOPN 2
9905: END
// export mpBuildUpTimeDelay , mpBuildUpTimeActive ; function BeginBuildUp ; var i , j ; begin
9906: LD_INT 0
9908: PPUSH
9909: PPUSH
9910: PPUSH
// mpBuildUpTimeDelay := 0 ;
9911: LD_ADDR_EXP 55
9915: PUSH
9916: LD_INT 0
9918: ST_TO_ADDR
// if not mpBuildUpTime then
9919: LD_EXP 29
9923: NOT
9924: IFFALSE 9928
// exit ;
9926: GO 10111
// mpBuildUpTimeDelay := 4 4$00 + 1 1$00 * mpBuildUpTime ;
9928: LD_ADDR_EXP 55
9932: PUSH
9933: LD_INT 8400
9935: PUSH
9936: LD_INT 2100
9938: PUSH
9939: LD_EXP 29
9943: MUL
9944: PLUS
9945: ST_TO_ADDR
// mpBuildUpTimeActive := true ;
9946: LD_ADDR_EXP 56
9950: PUSH
9951: LD_INT 1
9953: ST_TO_ADDR
// for i := 1 to 8 do
9954: LD_ADDR_VAR 0 2
9958: PUSH
9959: DOUBLE
9960: LD_INT 1
9962: DEC
9963: ST_TO_ADDR
9964: LD_INT 8
9966: PUSH
9967: FOR_TO
9968: IFFALSE 10109
// if mpSidePositions [ i ] then
9970: LD_EXP 16
9974: PUSH
9975: LD_VAR 0 2
9979: ARRAY
9980: IFFALSE 10107
// begin SetAreaMapShow ( mpBuildUpAreas [ mpSidePositions [ i ] ] , 5 ) ;
9982: LD_EXP 28
9986: PUSH
9987: LD_EXP 16
9991: PUSH
9992: LD_VAR 0 2
9996: ARRAY
9997: ARRAY
9998: PPUSH
9999: LD_INT 5
10001: PPUSH
10002: CALL_OW 424
// for j := 1 to 8 do
10006: LD_ADDR_VAR 0 3
10010: PUSH
10011: DOUBLE
10012: LD_INT 1
10014: DEC
10015: ST_TO_ADDR
10016: LD_INT 8
10018: PUSH
10019: FOR_TO
10020: IFFALSE 10105
// if mpSidePositions [ j ] and ( ( mpSideTeams [ i ] <> mpSideTeams [ j ] ) or ( not mpTeamGame ) and ( i <> j ) ) then
10022: LD_EXP 16
10026: PUSH
10027: LD_VAR 0 3
10031: ARRAY
10032: PUSH
10033: LD_EXP 17
10037: PUSH
10038: LD_VAR 0 2
10042: ARRAY
10043: PUSH
10044: LD_EXP 17
10048: PUSH
10049: LD_VAR 0 3
10053: ARRAY
10054: NONEQUAL
10055: PUSH
10056: LD_EXP 20
10060: NOT
10061: PUSH
10062: LD_VAR 0 2
10066: PUSH
10067: LD_VAR 0 3
10071: NONEQUAL
10072: AND
10073: OR
10074: AND
10075: IFFALSE 10103
// HideArea ( j , mpBuildUpAreas [ mpSidePositions [ i ] ] ) ;
10077: LD_VAR 0 3
10081: PPUSH
10082: LD_EXP 28
10086: PUSH
10087: LD_EXP 16
10091: PUSH
10092: LD_VAR 0 2
10096: ARRAY
10097: ARRAY
10098: PPUSH
10099: CALL_OW 333
10103: GO 10019
10105: POP
10106: POP
// end ;
10107: GO 9967
10109: POP
10110: POP
// end ;
10111: LD_VAR 0 1
10115: RET
// function EndBuildUp ; var i , j ; begin
10116: LD_INT 0
10118: PPUSH
10119: PPUSH
10120: PPUSH
// mpBuildUpTimeActive := false ;
10121: LD_ADDR_EXP 56
10125: PUSH
10126: LD_INT 0
10128: ST_TO_ADDR
// for i := 1 to 8 do
10129: LD_ADDR_VAR 0 2
10133: PUSH
10134: DOUBLE
10135: LD_INT 1
10137: DEC
10138: ST_TO_ADDR
10139: LD_INT 8
10141: PUSH
10142: FOR_TO
10143: IFFALSE 10284
// if mpSidePositions [ i ] then
10145: LD_EXP 16
10149: PUSH
10150: LD_VAR 0 2
10154: ARRAY
10155: IFFALSE 10282
// begin SetAreaMapShow ( mpBuildUpAreas [ mpSidePositions [ i ] ] , 0 ) ;
10157: LD_EXP 28
10161: PUSH
10162: LD_EXP 16
10166: PUSH
10167: LD_VAR 0 2
10171: ARRAY
10172: ARRAY
10173: PPUSH
10174: LD_INT 0
10176: PPUSH
10177: CALL_OW 424
// for j := 1 to 8 do
10181: LD_ADDR_VAR 0 3
10185: PUSH
10186: DOUBLE
10187: LD_INT 1
10189: DEC
10190: ST_TO_ADDR
10191: LD_INT 8
10193: PUSH
10194: FOR_TO
10195: IFFALSE 10280
// if mpSidePositions [ j ] and ( ( mpSideTeams [ i ] <> mpSideTeams [ j ] ) or ( not mpTeamGame ) and ( i <> j ) ) then
10197: LD_EXP 16
10201: PUSH
10202: LD_VAR 0 3
10206: ARRAY
10207: PUSH
10208: LD_EXP 17
10212: PUSH
10213: LD_VAR 0 2
10217: ARRAY
10218: PUSH
10219: LD_EXP 17
10223: PUSH
10224: LD_VAR 0 3
10228: ARRAY
10229: NONEQUAL
10230: PUSH
10231: LD_EXP 20
10235: NOT
10236: PUSH
10237: LD_VAR 0 2
10241: PUSH
10242: LD_VAR 0 3
10246: NONEQUAL
10247: AND
10248: OR
10249: AND
10250: IFFALSE 10278
// ShowArea ( j , mpBuildUpAreas [ mpSidePositions [ i ] ] ) ;
10252: LD_VAR 0 3
10256: PPUSH
10257: LD_EXP 28
10261: PUSH
10262: LD_EXP 16
10266: PUSH
10267: LD_VAR 0 2
10271: ARRAY
10272: ARRAY
10273: PPUSH
10274: CALL_OW 334
10278: GO 10194
10280: POP
10281: POP
// end ;
10282: GO 10142
10284: POP
10285: POP
// end ;
10286: LD_VAR 0 1
10290: RET
// every 5 trigger mpBuildUpTimeActive marked mpActive do var i , un ;
10291: LD_EXP 56
10295: IFFALSE 10472
10297: GO 10299
10299: DISABLE
10300: LD_INT 0
10302: PPUSH
10303: PPUSH
// begin for i := 1 to 8 do
10304: LD_ADDR_VAR 0 1
10308: PUSH
10309: DOUBLE
10310: LD_INT 1
10312: DEC
10313: ST_TO_ADDR
10314: LD_INT 8
10316: PUSH
10317: FOR_TO
10318: IFFALSE 10469
// if mpSidePositions [ i ] then
10320: LD_EXP 16
10324: PUSH
10325: LD_VAR 0 1
10329: ARRAY
10330: IFFALSE 10467
// for un in FilterUnitsInArea ( mpBuildUpAreas [ mpSidePositions [ i ] ] , [ [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] , [ f_side , your_side ] ] ) do
10332: LD_ADDR_VAR 0 2
10336: PUSH
10337: LD_EXP 28
10341: PUSH
10342: LD_EXP 16
10346: PUSH
10347: LD_VAR 0 1
10351: ARRAY
10352: ARRAY
10353: PPUSH
10354: LD_INT 2
10356: PUSH
10357: LD_INT 21
10359: PUSH
10360: LD_INT 1
10362: PUSH
10363: EMPTY
10364: LIST
10365: LIST
10366: PUSH
10367: LD_INT 21
10369: PUSH
10370: LD_INT 2
10372: PUSH
10373: EMPTY
10374: LIST
10375: LIST
10376: PUSH
10377: EMPTY
10378: LIST
10379: LIST
10380: LIST
10381: PUSH
10382: LD_INT 22
10384: PUSH
10385: LD_OWVAR 2
10389: PUSH
10390: EMPTY
10391: LIST
10392: LIST
10393: PUSH
10394: EMPTY
10395: LIST
10396: LIST
10397: PPUSH
10398: CALL_OW 70
10402: PUSH
10403: FOR_IN
10404: IFFALSE 10465
// if ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) or ( not mpTeamGame ) and ( i <> your_side ) ) then
10406: LD_EXP 17
10410: PUSH
10411: LD_VAR 0 1
10415: ARRAY
10416: PUSH
10417: LD_EXP 17
10421: PUSH
10422: LD_OWVAR 2
10426: ARRAY
10427: NONEQUAL
10428: PUSH
10429: LD_EXP 20
10433: NOT
10434: PUSH
10435: LD_VAR 0 1
10439: PUSH
10440: LD_OWVAR 2
10444: NONEQUAL
10445: AND
10446: OR
10447: IFFALSE 10463
// ComMoveToArea ( un , BuildUpEscape ) ;
10449: LD_VAR 0 2
10453: PPUSH
10454: LD_EXP 1
10458: PPUSH
10459: CALL_OW 113
10463: GO 10403
10465: POP
10466: POP
10467: GO 10317
10469: POP
10470: POP
// enable ;
10471: ENABLE
// end ;
10472: PPOPN 2
10474: END
// every 0 0$1 trigger mpBuildUpTime marked mpActive do var tmp ;
10475: LD_EXP 29
10479: IFFALSE 10529
10481: GO 10483
10483: DISABLE
10484: LD_INT 0
10486: PPUSH
// begin tmp := mpBuildUpTime ;
10487: LD_ADDR_VAR 0 1
10491: PUSH
10492: LD_EXP 29
10496: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
10497: LD_INT 35
10499: PPUSH
10500: CALL_OW 67
// tmp := tmp - 0 0$1 ;
10504: LD_ADDR_VAR 0 1
10508: PUSH
10509: LD_VAR 0 1
10513: PUSH
10514: LD_INT 35
10516: MINUS
10517: ST_TO_ADDR
// until not tmp ;
10518: LD_VAR 0 1
10522: NOT
10523: IFFALSE 10497
// EndBuildUp ;
10525: CALL 10116 0 0
// end ;
10529: PPOPN 1
10531: END
// every 0 0$1 trigger mpActive marked mpWin do
10532: LD_INT 100
10534: IFFALSE 10568
10536: GO 10538
10538: DISABLE
// begin if IAmServer then
10539: CALL_OW 518
10543: IFFALSE 10552
// wait ( 0 0$3 ) ;
10545: LD_INT 105
10547: PPUSH
10548: CALL_OW 67
// if Multiplayer then
10552: LD_OWVAR 4
10556: IFFALSE 10564
// YouWinInMultiplayer else
10558: CALL_OW 106
10562: GO 10568
// YouWin ;
10564: CALL_OW 103
// end ;
10568: END
// export function HasPowerByGameType ( gameType , side ) ; begin
10569: LD_INT 0
10571: PPUSH
// result := false ;
10572: LD_ADDR_VAR 0 3
10576: PUSH
10577: LD_INT 0
10579: ST_TO_ADDR
// case gameType of GameTypeNormal , GameTypeFamine :
10580: LD_VAR 0 1
10584: PUSH
10585: LD_INT 1
10587: DOUBLE
10588: EQUAL
10589: IFTRUE 10599
10591: LD_INT 5
10593: DOUBLE
10594: EQUAL
10595: IFTRUE 10599
10597: GO 10672
10599: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) ;
10600: LD_ADDR_VAR 0 3
10604: PUSH
10605: LD_INT 22
10607: PUSH
10608: LD_VAR 0 2
10612: PUSH
10613: EMPTY
10614: LIST
10615: LIST
10616: PUSH
10617: LD_INT 2
10619: PUSH
10620: LD_INT 21
10622: PUSH
10623: LD_INT 1
10625: PUSH
10626: EMPTY
10627: LIST
10628: LIST
10629: PUSH
10630: LD_INT 33
10632: PUSH
10633: LD_INT 3
10635: PUSH
10636: EMPTY
10637: LIST
10638: LIST
10639: PUSH
10640: LD_INT 33
10642: PUSH
10643: LD_INT 5
10645: PUSH
10646: EMPTY
10647: LIST
10648: LIST
10649: PUSH
10650: EMPTY
10651: LIST
10652: LIST
10653: LIST
10654: LIST
10655: PUSH
10656: EMPTY
10657: LIST
10658: LIST
10659: PPUSH
10660: CALL_OW 69
10664: PPUSH
10665: CALL 23623 0 1
10669: ST_TO_ADDR
// end ; GameTypeSurvival :
10670: GO 10907
10672: LD_INT 2
10674: DOUBLE
10675: EQUAL
10676: IFTRUE 10680
10678: GO 10808
10680: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ) and Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) ;
10681: LD_ADDR_VAR 0 3
10685: PUSH
10686: LD_INT 22
10688: PUSH
10689: LD_VAR 0 2
10693: PUSH
10694: EMPTY
10695: LIST
10696: LIST
10697: PUSH
10698: LD_INT 2
10700: PUSH
10701: LD_INT 30
10703: PUSH
10704: LD_INT 0
10706: PUSH
10707: EMPTY
10708: LIST
10709: LIST
10710: PUSH
10711: LD_INT 30
10713: PUSH
10714: LD_INT 1
10716: PUSH
10717: EMPTY
10718: LIST
10719: LIST
10720: PUSH
10721: EMPTY
10722: LIST
10723: LIST
10724: LIST
10725: PUSH
10726: EMPTY
10727: LIST
10728: LIST
10729: PPUSH
10730: CALL_OW 69
10734: PPUSH
10735: CALL 23623 0 1
10739: PUSH
10740: LD_INT 22
10742: PUSH
10743: LD_VAR 0 2
10747: PUSH
10748: EMPTY
10749: LIST
10750: LIST
10751: PUSH
10752: LD_INT 2
10754: PUSH
10755: LD_INT 21
10757: PUSH
10758: LD_INT 1
10760: PUSH
10761: EMPTY
10762: LIST
10763: LIST
10764: PUSH
10765: LD_INT 33
10767: PUSH
10768: LD_INT 3
10770: PUSH
10771: EMPTY
10772: LIST
10773: LIST
10774: PUSH
10775: LD_INT 33
10777: PUSH
10778: LD_INT 5
10780: PUSH
10781: EMPTY
10782: LIST
10783: LIST
10784: PUSH
10785: EMPTY
10786: LIST
10787: LIST
10788: LIST
10789: LIST
10790: PUSH
10791: EMPTY
10792: LIST
10793: LIST
10794: PPUSH
10795: CALL_OW 69
10799: PPUSH
10800: CALL 23623 0 1
10804: AND
10805: ST_TO_ADDR
// end ; GameTypeKing :
10806: GO 10907
10808: LD_INT 3
10810: DOUBLE
10811: EQUAL
10812: IFTRUE 10816
10814: GO 10906
10816: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) and HowMuchPointsKing ( side ) < mpPoints ;
10817: LD_ADDR_VAR 0 3
10821: PUSH
10822: LD_INT 22
10824: PUSH
10825: LD_VAR 0 2
10829: PUSH
10830: EMPTY
10831: LIST
10832: LIST
10833: PUSH
10834: LD_INT 2
10836: PUSH
10837: LD_INT 21
10839: PUSH
10840: LD_INT 1
10842: PUSH
10843: EMPTY
10844: LIST
10845: LIST
10846: PUSH
10847: LD_INT 33
10849: PUSH
10850: LD_INT 3
10852: PUSH
10853: EMPTY
10854: LIST
10855: LIST
10856: PUSH
10857: LD_INT 33
10859: PUSH
10860: LD_INT 5
10862: PUSH
10863: EMPTY
10864: LIST
10865: LIST
10866: PUSH
10867: EMPTY
10868: LIST
10869: LIST
10870: LIST
10871: LIST
10872: PUSH
10873: EMPTY
10874: LIST
10875: LIST
10876: PPUSH
10877: CALL_OW 69
10881: PPUSH
10882: CALL 23623 0 1
10886: PUSH
10887: LD_VAR 0 2
10891: PPUSH
10892: CALL 13911 0 1
10896: PUSH
10897: LD_EXP 44
10901: LESS
10902: AND
10903: ST_TO_ADDR
// end ; end ;
10904: GO 10907
10906: POP
// end ;
10907: LD_VAR 0 3
10911: RET
// every 0 0$1 trigger mpActive marked mpLose do var gameIsOn , i ;
10912: LD_INT 100
10914: IFFALSE 11136
10916: GO 10918
10918: DISABLE
10919: LD_INT 0
10921: PPUSH
10922: PPUSH
// begin if Multiplayer then
10923: LD_OWVAR 4
10927: IFFALSE 10935
// SetPlayerSpectator ( ) else
10929: CALL_OW 572
10933: GO 10944
// FogOff ( your_side ) ;
10935: LD_OWVAR 2
10939: PPUSH
10940: CALL_OW 344
// repeat gameIsOn := false ;
10944: LD_ADDR_VAR 0 1
10948: PUSH
10949: LD_INT 0
10951: ST_TO_ADDR
// for i := 1 to 8 do
10952: LD_ADDR_VAR 0 2
10956: PUSH
10957: DOUBLE
10958: LD_INT 1
10960: DEC
10961: ST_TO_ADDR
10962: LD_INT 8
10964: PUSH
10965: FOR_TO
10966: IFFALSE 11088
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
10968: LD_EXP 16
10972: PUSH
10973: LD_VAR 0 2
10977: ARRAY
10978: PUSH
10979: LD_VAR 0 2
10983: PPUSH
10984: CALL_OW 108
10988: AND
10989: PUSH
10990: LD_VAR 0 2
10994: PUSH
10995: LD_OWVAR 2
10999: NONEQUAL
11000: AND
11001: IFFALSE 11086
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
11003: LD_EXP 17
11007: PUSH
11008: LD_VAR 0 2
11012: ARRAY
11013: NOT
11014: PUSH
11015: LD_EXP 17
11019: PUSH
11020: LD_VAR 0 2
11024: ARRAY
11025: PUSH
11026: LD_EXP 17
11030: PUSH
11031: LD_OWVAR 2
11035: ARRAY
11036: NONEQUAL
11037: PUSH
11038: LD_OWVAR 2
11042: PPUSH
11043: LD_VAR 0 2
11047: PPUSH
11048: CALL_OW 81
11052: PUSH
11053: LD_INT 1
11055: NONEQUAL
11056: AND
11057: OR
11058: IFFALSE 11086
// if HasPowerByGameType ( mpGameType , i ) then
11060: LD_EXP 12
11064: PPUSH
11065: LD_VAR 0 2
11069: PPUSH
11070: CALL 10569 0 2
11074: IFFALSE 11086
// begin gameIsOn := true ;
11076: LD_ADDR_VAR 0 1
11080: PUSH
11081: LD_INT 1
11083: ST_TO_ADDR
// break ;
11084: GO 11088
// end ;
11086: GO 10965
11088: POP
11089: POP
// wait ( 100 ) ;
11090: LD_INT 100
11092: PPUSH
11093: CALL_OW 67
// until not gameIsOn ;
11097: LD_VAR 0 1
11101: NOT
11102: IFFALSE 10944
// if IAmServer then
11104: CALL_OW 518
11108: IFFALSE 11117
// wait ( 0 0$3 ) ;
11110: LD_INT 105
11112: PPUSH
11113: CALL_OW 67
// if Multiplayer then
11117: LD_OWVAR 4
11121: IFFALSE 11129
// YouLostInMultiplayer else
11123: CALL_OW 107
11127: GO 11136
// YouLost (  ) ;
11129: LD_STRING 
11131: PPUSH
11132: CALL_OW 104
// end ;
11136: PPOPN 2
11138: END
// every 0 0$10 trigger mpRespawn marked mpActive do var i , j , tmp , spawn , sides ;
11139: LD_EXP 42
11143: IFFALSE 11519
11145: GO 11147
11147: DISABLE
11148: LD_INT 0
11150: PPUSH
11151: PPUSH
11152: PPUSH
11153: PPUSH
11154: PPUSH
// begin sides := [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 ] ;
11155: LD_ADDR_VAR 0 5
11159: PUSH
11160: LD_INT 1
11162: PUSH
11163: LD_INT 2
11165: PUSH
11166: LD_INT 3
11168: PUSH
11169: LD_INT 4
11171: PUSH
11172: LD_INT 5
11174: PUSH
11175: LD_INT 6
11177: PUSH
11178: LD_INT 7
11180: PUSH
11181: LD_INT 8
11183: PUSH
11184: EMPTY
11185: LIST
11186: LIST
11187: LIST
11188: LIST
11189: LIST
11190: LIST
11191: LIST
11192: LIST
11193: ST_TO_ADDR
// repeat wait ( 0 0$10 ) ;
11194: LD_INT 350
11196: PPUSH
11197: CALL_OW 67
// for i := 1 to 8 do
11201: LD_ADDR_VAR 0 1
11205: PUSH
11206: DOUBLE
11207: LD_INT 1
11209: DEC
11210: ST_TO_ADDR
11211: LD_INT 8
11213: PUSH
11214: FOR_TO
11215: IFFALSE 11489
// begin j := sides [ i ] ;
11217: LD_ADDR_VAR 0 2
11221: PUSH
11222: LD_VAR 0 5
11226: PUSH
11227: LD_VAR 0 1
11231: ARRAY
11232: ST_TO_ADDR
// if Count ( mpRespawnPull [ j ] ) and MultiplayerSideAlive ( j ) and HasPowerByGameType ( mpGameType , j ) then
11233: LD_EXP 49
11237: PUSH
11238: LD_VAR 0 2
11242: ARRAY
11243: PPUSH
11244: CALL 23623 0 1
11248: PUSH
11249: LD_VAR 0 2
11253: PPUSH
11254: CALL_OW 108
11258: AND
11259: PUSH
11260: LD_EXP 12
11264: PPUSH
11265: LD_VAR 0 2
11269: PPUSH
11270: CALL 10569 0 2
11274: AND
11275: IFFALSE 11487
// begin wait ( mpRespawn div 3 ) ;
11277: LD_EXP 42
11281: PUSH
11282: LD_INT 3
11284: DIV
11285: PPUSH
11286: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , j ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
11290: LD_ADDR_VAR 0 3
11294: PUSH
11295: LD_INT 22
11297: PUSH
11298: LD_VAR 0 2
11302: PUSH
11303: EMPTY
11304: LIST
11305: LIST
11306: PUSH
11307: LD_INT 50
11309: PUSH
11310: EMPTY
11311: LIST
11312: PUSH
11313: LD_INT 2
11315: PUSH
11316: LD_INT 30
11318: PUSH
11319: LD_INT 0
11321: PUSH
11322: EMPTY
11323: LIST
11324: LIST
11325: PUSH
11326: LD_INT 30
11328: PUSH
11329: LD_INT 1
11331: PUSH
11332: EMPTY
11333: LIST
11334: LIST
11335: PUSH
11336: EMPTY
11337: LIST
11338: LIST
11339: LIST
11340: PUSH
11341: EMPTY
11342: LIST
11343: LIST
11344: LIST
11345: PPUSH
11346: CALL_OW 69
11350: ST_TO_ADDR
// if not tmp or not MultiplayerSideAlive ( j ) or not HasPowerByGameType ( mpGameType , j ) then
11351: LD_VAR 0 3
11355: NOT
11356: PUSH
11357: LD_VAR 0 2
11361: PPUSH
11362: CALL_OW 108
11366: NOT
11367: OR
11368: PUSH
11369: LD_EXP 12
11373: PPUSH
11374: LD_VAR 0 2
11378: PPUSH
11379: CALL 10569 0 2
11383: NOT
11384: OR
11385: IFFALSE 11389
// continue ;
11387: GO 11214
// spawn := tmp [ 1 ] ;
11389: LD_ADDR_VAR 0 4
11393: PUSH
11394: LD_VAR 0 3
11398: PUSH
11399: LD_INT 1
11401: ARRAY
11402: ST_TO_ADDR
// PlaceUnitXYR ( mpRespawnPull [ j ] [ 1 ] , GetX ( spawn ) , GetY ( spawn ) , 32 , true ) ;
11403: LD_EXP 49
11407: PUSH
11408: LD_VAR 0 2
11412: ARRAY
11413: PUSH
11414: LD_INT 1
11416: ARRAY
11417: PPUSH
11418: LD_VAR 0 4
11422: PPUSH
11423: CALL_OW 250
11427: PPUSH
11428: LD_VAR 0 4
11432: PPUSH
11433: CALL_OW 251
11437: PPUSH
11438: LD_INT 32
11440: PPUSH
11441: LD_INT 1
11443: PPUSH
11444: CALL_OW 50
// mpRespawnPull := Replace ( mpRespawnPull , j , Delete ( mpRespawnPull [ j ] , 1 ) ) ;
11448: LD_ADDR_EXP 49
11452: PUSH
11453: LD_EXP 49
11457: PPUSH
11458: LD_VAR 0 2
11462: PPUSH
11463: LD_EXP 49
11467: PUSH
11468: LD_VAR 0 2
11472: ARRAY
11473: PPUSH
11474: LD_INT 1
11476: PPUSH
11477: CALL_OW 3
11481: PPUSH
11482: CALL_OW 1
11486: ST_TO_ADDR
// end ; end ;
11487: GO 11214
11489: POP
11490: POP
// sides := Reindex ( sides , 1 , 8 , true ) ;
11491: LD_ADDR_VAR 0 5
11495: PUSH
11496: LD_VAR 0 5
11500: PPUSH
11501: LD_INT 1
11503: PPUSH
11504: LD_INT 8
11506: PPUSH
11507: LD_INT 1
11509: PPUSH
11510: CALL 25901 0 4
11514: ST_TO_ADDR
// until false ;
11515: LD_INT 0
11517: IFFALSE 11194
// end ;
11519: PPOPN 5
11521: END
// every 0 0$1 marked mpActive do
11522: GO 11524
11524: DISABLE
// begin enable ;
11525: ENABLE
// if not mpDisplayStrings then
11526: LD_EXP 47
11530: NOT
11531: IFFALSE 11542
// begin display_strings := [ ] ;
11533: LD_ADDR_OWVAR 47
11537: PUSH
11538: EMPTY
11539: ST_TO_ADDR
// exit ;
11540: GO 11552
// end ; display_strings := mpDisplayStrings ;
11542: LD_ADDR_OWVAR 47
11546: PUSH
11547: LD_EXP 47
11551: ST_TO_ADDR
// end ; end_of_file
11552: END
// export function Multiplayer_UnitDestroyed ( un ) ; var i , ape , tag , class , area , nation , side , tmp ; begin
11553: LD_INT 0
11555: PPUSH
11556: PPUSH
11557: PPUSH
11558: PPUSH
11559: PPUSH
11560: PPUSH
11561: PPUSH
11562: PPUSH
11563: PPUSH
// if GetType ( un ) = unit_vehicle then
11564: LD_VAR 0 1
11568: PPUSH
11569: CALL_OW 247
11573: PUSH
11574: LD_INT 2
11576: EQUAL
11577: IFFALSE 11581
// exit ;
11579: GO 12213
// side := GetSide ( un ) ;
11581: LD_ADDR_VAR 0 9
11585: PUSH
11586: LD_VAR 0 1
11590: PPUSH
11591: CALL_OW 255
11595: ST_TO_ADDR
// if mpGameType = GameTypeSurvival then
11596: LD_EXP 12
11600: PUSH
11601: LD_INT 2
11603: EQUAL
11604: IFFALSE 11680
// if GetBType ( un ) in [ b_depot , b_warehouse ] then
11606: LD_VAR 0 1
11610: PPUSH
11611: CALL_OW 266
11615: PUSH
11616: LD_INT 0
11618: PUSH
11619: LD_INT 1
11621: PUSH
11622: EMPTY
11623: LIST
11624: LIST
11625: IN
11626: IFFALSE 11680
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_human ] ] ) do
11628: LD_ADDR_VAR 0 3
11632: PUSH
11633: LD_INT 22
11635: PUSH
11636: LD_VAR 0 9
11640: PUSH
11641: EMPTY
11642: LIST
11643: LIST
11644: PUSH
11645: LD_INT 21
11647: PUSH
11648: LD_INT 1
11650: PUSH
11651: EMPTY
11652: LIST
11653: LIST
11654: PUSH
11655: EMPTY
11656: LIST
11657: LIST
11658: PPUSH
11659: CALL_OW 69
11663: PUSH
11664: FOR_IN
11665: IFFALSE 11678
// KillUnit ( i ) ;
11667: LD_VAR 0 3
11671: PPUSH
11672: CALL_OW 66
11676: GO 11664
11678: POP
11679: POP
// end ; if GetClass ( un ) in [ class_apeman , class_apeman_kamikaze , class_apeman_soldier , class_apeman_engineer ] or GetControl ( un ) = control_apeman then
11680: LD_VAR 0 1
11684: PPUSH
11685: CALL_OW 257
11689: PUSH
11690: LD_INT 12
11692: PUSH
11693: LD_INT 17
11695: PUSH
11696: LD_INT 15
11698: PUSH
11699: LD_INT 16
11701: PUSH
11702: EMPTY
11703: LIST
11704: LIST
11705: LIST
11706: LIST
11707: IN
11708: PUSH
11709: LD_VAR 0 1
11713: PPUSH
11714: CALL_OW 263
11718: PUSH
11719: LD_INT 5
11721: EQUAL
11722: OR
11723: IFFALSE 11942
// begin tag := 0 ;
11725: LD_ADDR_VAR 0 5
11729: PUSH
11730: LD_INT 0
11732: ST_TO_ADDR
// for i := 1 to 8 do
11733: LD_ADDR_VAR 0 3
11737: PUSH
11738: DOUBLE
11739: LD_INT 1
11741: DEC
11742: ST_TO_ADDR
11743: LD_INT 8
11745: PUSH
11746: FOR_TO
11747: IFFALSE 11781
// if un in mpApePosIndex [ i ] then
11749: LD_VAR 0 1
11753: PUSH
11754: LD_EXP 41
11758: PUSH
11759: LD_VAR 0 3
11763: ARRAY
11764: IN
11765: IFFALSE 11779
// begin tag := i ;
11767: LD_ADDR_VAR 0 5
11771: PUSH
11772: LD_VAR 0 3
11776: ST_TO_ADDR
// break ;
11777: GO 11781
// end ;
11779: GO 11746
11781: POP
11782: POP
// if not tag then
11783: LD_VAR 0 5
11787: NOT
11788: IFFALSE 11792
// exit ;
11790: GO 12213
// area := mpApemansArea [ mpSidePositions [ tag ] ] ;
11792: LD_ADDR_VAR 0 7
11796: PUSH
11797: LD_EXP 40
11801: PUSH
11802: LD_EXP 16
11806: PUSH
11807: LD_VAR 0 5
11811: ARRAY
11812: ARRAY
11813: ST_TO_ADDR
// if not area then
11814: LD_VAR 0 7
11818: NOT
11819: IFFALSE 11823
// exit ;
11821: GO 12213
// wait ( 4 4$00 ) ;
11823: LD_INT 8400
11825: PPUSH
11826: CALL_OW 67
// repeat wait ( 10 ) ;
11830: LD_INT 10
11832: PPUSH
11833: CALL_OW 67
// until not mpBlockRespThread ;
11837: LD_EXP 54
11841: NOT
11842: IFFALSE 11830
// mpBlockRespThread := true ;
11844: LD_ADDR_EXP 54
11848: PUSH
11849: LD_INT 1
11851: ST_TO_ADDR
// PrepareApeman ( 0 ) ;
11852: LD_INT 0
11854: PPUSH
11855: CALL 55480 0 1
// ape := CreateHuman ;
11859: LD_ADDR_VAR 0 4
11863: PUSH
11864: CALL_OW 44
11868: ST_TO_ADDR
// mpApePosIndex := Replace ( mpApePosIndex , tag , Join ( mpApePosIndex [ tag ] , ape ) ) ;
11869: LD_ADDR_EXP 41
11873: PUSH
11874: LD_EXP 41
11878: PPUSH
11879: LD_VAR 0 5
11883: PPUSH
11884: LD_EXP 41
11888: PUSH
11889: LD_VAR 0 5
11893: ARRAY
11894: PPUSH
11895: LD_VAR 0 4
11899: PPUSH
11900: CALL 59232 0 2
11904: PPUSH
11905: CALL_OW 1
11909: ST_TO_ADDR
// PlaceUnitArea ( ape , area , false ) ;
11910: LD_VAR 0 4
11914: PPUSH
11915: LD_VAR 0 7
11919: PPUSH
11920: LD_INT 0
11922: PPUSH
11923: CALL_OW 49
// wait ( 10 ) ;
11927: LD_INT 10
11929: PPUSH
11930: CALL_OW 67
// mpBlockRespThread := false ;
11934: LD_ADDR_EXP 54
11938: PUSH
11939: LD_INT 0
11941: ST_TO_ADDR
// end ; if GetType ( un ) = unit_human and GetNation ( un ) > nation_nature then
11942: LD_VAR 0 1
11946: PPUSH
11947: CALL_OW 247
11951: PUSH
11952: LD_INT 1
11954: EQUAL
11955: PUSH
11956: LD_VAR 0 1
11960: PPUSH
11961: CALL_OW 248
11965: PUSH
11966: LD_INT 0
11968: GREATER
11969: AND
11970: IFFALSE 12213
// begin if not mpRespawn then
11972: LD_EXP 42
11976: NOT
11977: IFFALSE 11981
// exit ;
11979: GO 12213
// if not MultiplayerSideAlive ( side ) and not HasPowerByGameType ( mpGameType , side ) then
11981: LD_VAR 0 9
11985: PPUSH
11986: CALL_OW 108
11990: NOT
11991: PUSH
11992: LD_EXP 12
11996: PPUSH
11997: LD_VAR 0 9
12001: PPUSH
12002: CALL 10569 0 2
12006: NOT
12007: AND
12008: IFFALSE 12012
// exit ;
12010: GO 12213
// side := GetSide ( un ) ;
12012: LD_ADDR_VAR 0 9
12016: PUSH
12017: LD_VAR 0 1
12021: PPUSH
12022: CALL_OW 255
12026: ST_TO_ADDR
// nation := GetNation ( un ) ;
12027: LD_ADDR_VAR 0 8
12031: PUSH
12032: LD_VAR 0 1
12036: PPUSH
12037: CALL_OW 248
12041: ST_TO_ADDR
// class := GetClass ( un ) ;
12042: LD_ADDR_VAR 0 6
12046: PUSH
12047: LD_VAR 0 1
12051: PPUSH
12052: CALL_OW 257
12056: ST_TO_ADDR
// if class > 4 then
12057: LD_VAR 0 6
12061: PUSH
12062: LD_INT 4
12064: GREATER
12065: IFFALSE 12075
// class := 1 ;
12067: LD_ADDR_VAR 0 6
12071: PUSH
12072: LD_INT 1
12074: ST_TO_ADDR
// repeat wait ( 10 ) ;
12075: LD_INT 10
12077: PPUSH
12078: CALL_OW 67
// until not mpBlockRespThread ;
12082: LD_EXP 54
12086: NOT
12087: IFFALSE 12075
// mpBlockRespThread := true ;
12089: LD_ADDR_EXP 54
12093: PUSH
12094: LD_INT 1
12096: ST_TO_ADDR
// uc_side := side ;
12097: LD_ADDR_OWVAR 20
12101: PUSH
12102: LD_VAR 0 9
12106: ST_TO_ADDR
// uc_nation := nation ;
12107: LD_ADDR_OWVAR 21
12111: PUSH
12112: LD_VAR 0 8
12116: ST_TO_ADDR
// PrepareHuman ( false , class , 2 ) ;
12117: LD_INT 0
12119: PPUSH
12120: LD_VAR 0 6
12124: PPUSH
12125: LD_INT 2
12127: PPUSH
12128: CALL_OW 380
// un := CreateHuman ;
12132: LD_ADDR_VAR 0 1
12136: PUSH
12137: CALL_OW 44
12141: ST_TO_ADDR
// mpRespawnPull := Replace ( mpRespawnPull , side , Replace ( mpRespawnPull [ side ] , mpRespawnPull [ side ] + 1 , un ) ) ;
12142: LD_ADDR_EXP 49
12146: PUSH
12147: LD_EXP 49
12151: PPUSH
12152: LD_VAR 0 9
12156: PPUSH
12157: LD_EXP 49
12161: PUSH
12162: LD_VAR 0 9
12166: ARRAY
12167: PPUSH
12168: LD_EXP 49
12172: PUSH
12173: LD_VAR 0 9
12177: ARRAY
12178: PUSH
12179: LD_INT 1
12181: PLUS
12182: PPUSH
12183: LD_VAR 0 1
12187: PPUSH
12188: CALL_OW 1
12192: PPUSH
12193: CALL_OW 1
12197: ST_TO_ADDR
// wait ( 10 ) ;
12198: LD_INT 10
12200: PPUSH
12201: CALL_OW 67
// mpBlockRespThread := false ;
12205: LD_ADDR_EXP 54
12209: PUSH
12210: LD_INT 0
12212: ST_TO_ADDR
// end ; end ;
12213: LD_VAR 0 2
12217: RET
// export function Multiplayer_BuildingComplete ( building ) ; begin
12218: LD_INT 0
12220: PPUSH
// if GetBType ( building ) in [ b_depot , b_warehouse ] then
12221: LD_VAR 0 1
12225: PPUSH
12226: CALL_OW 266
12230: PUSH
12231: LD_INT 0
12233: PUSH
12234: LD_INT 1
12236: PUSH
12237: EMPTY
12238: LIST
12239: LIST
12240: IN
12241: IFFALSE 12266
// SetBName ( building , @ & GetSide ( building ) ) ;
12243: LD_VAR 0 1
12247: PPUSH
12248: LD_STRING @
12250: PUSH
12251: LD_VAR 0 1
12255: PPUSH
12256: CALL_OW 255
12260: STR
12261: PPUSH
12262: CALL_OW 500
// end ;
12266: LD_VAR 0 2
12270: RET
// export function Multiplayer_BuildingCaptured ( building , oldSide , unit ) ; var i ; begin
12271: LD_INT 0
12273: PPUSH
12274: PPUSH
// if mpGameType = GameTypeSurvival and GetBType ( building ) in [ b_depot , b_warehouse ] then
12275: LD_EXP 12
12279: PUSH
12280: LD_INT 2
12282: EQUAL
12283: PUSH
12284: LD_VAR 0 1
12288: PPUSH
12289: CALL_OW 266
12293: PUSH
12294: LD_INT 0
12296: PUSH
12297: LD_INT 1
12299: PUSH
12300: EMPTY
12301: LIST
12302: LIST
12303: IN
12304: AND
12305: IFFALSE 12370
// begin KillUnit ( building ) ;
12307: LD_VAR 0 1
12311: PPUSH
12312: CALL_OW 66
// for i in FilterAllUnits ( [ [ f_side , oldSide ] , [ f_type , unit_human ] ] ) do
12316: LD_ADDR_VAR 0 5
12320: PUSH
12321: LD_INT 22
12323: PUSH
12324: LD_VAR 0 2
12328: PUSH
12329: EMPTY
12330: LIST
12331: LIST
12332: PUSH
12333: LD_INT 21
12335: PUSH
12336: LD_INT 1
12338: PUSH
12339: EMPTY
12340: LIST
12341: LIST
12342: PUSH
12343: EMPTY
12344: LIST
12345: LIST
12346: PPUSH
12347: CALL_OW 69
12351: PUSH
12352: FOR_IN
12353: IFFALSE 12366
// KillUnit ( i ) ;
12355: LD_VAR 0 5
12359: PPUSH
12360: CALL_OW 66
12364: GO 12352
12366: POP
12367: POP
// exit ;
12368: GO 12415
// end ; if GetBType ( building ) in [ b_depot , b_warehouse ] then
12370: LD_VAR 0 1
12374: PPUSH
12375: CALL_OW 266
12379: PUSH
12380: LD_INT 0
12382: PUSH
12383: LD_INT 1
12385: PUSH
12386: EMPTY
12387: LIST
12388: LIST
12389: IN
12390: IFFALSE 12415
// SetBName ( building , @ & GetSide ( building ) ) ;
12392: LD_VAR 0 1
12396: PPUSH
12397: LD_STRING @
12399: PUSH
12400: LD_VAR 0 1
12404: PPUSH
12405: CALL_OW 255
12409: STR
12410: PPUSH
12411: CALL_OW 500
// end ;
12415: LD_VAR 0 4
12419: RET
// export function Multiplayer_OilExtracted ( building , side , base , amount ) ; var i , value ; begin
12420: LD_INT 0
12422: PPUSH
12423: PPUSH
12424: PPUSH
// if mpGameType <> GameTypeFamine then
12425: LD_EXP 12
12429: PUSH
12430: LD_INT 5
12432: NONEQUAL
12433: IFFALSE 12437
// exit ;
12435: GO 12651
// for i := 1 to mpGlobalOilDeposits do
12437: LD_ADDR_VAR 0 6
12441: PUSH
12442: DOUBLE
12443: LD_INT 1
12445: DEC
12446: ST_TO_ADDR
12447: LD_EXP 50
12451: PUSH
12452: FOR_TO
12453: IFFALSE 12649
// begin if HexInfo ( mpGlobalOilDeposits [ i ] [ 1 ] , mpGlobalOilDeposits [ i ] [ 2 ] ) = building then
12455: LD_EXP 50
12459: PUSH
12460: LD_VAR 0 6
12464: ARRAY
12465: PUSH
12466: LD_INT 1
12468: ARRAY
12469: PPUSH
12470: LD_EXP 50
12474: PUSH
12475: LD_VAR 0 6
12479: ARRAY
12480: PUSH
12481: LD_INT 2
12483: ARRAY
12484: PPUSH
12485: CALL_OW 428
12489: PUSH
12490: LD_VAR 0 1
12494: EQUAL
12495: IFFALSE 12647
// begin value := mpGlobalOilDeposits [ i ] [ 3 ] ;
12497: LD_ADDR_VAR 0 7
12501: PUSH
12502: LD_EXP 50
12506: PUSH
12507: LD_VAR 0 6
12511: ARRAY
12512: PUSH
12513: LD_INT 3
12515: ARRAY
12516: ST_TO_ADDR
// value := Dec ( value ) ;
12517: LD_ADDR_VAR 0 7
12521: PUSH
12522: LD_VAR 0 7
12526: PPUSH
12527: CALL 60615 0 1
12531: ST_TO_ADDR
// mpGlobalOilDeposits := Replace ( mpGlobalOilDeposits , i , Replace ( mpGlobalOilDeposits [ i ] , 3 , value ) ) ;
12532: LD_ADDR_EXP 50
12536: PUSH
12537: LD_EXP 50
12541: PPUSH
12542: LD_VAR 0 6
12546: PPUSH
12547: LD_EXP 50
12551: PUSH
12552: LD_VAR 0 6
12556: ARRAY
12557: PPUSH
12558: LD_INT 3
12560: PPUSH
12561: LD_VAR 0 7
12565: PPUSH
12566: CALL_OW 1
12570: PPUSH
12571: CALL_OW 1
12575: ST_TO_ADDR
// SetUnitDisplayNumber ( building , value ) ;
12576: LD_VAR 0 1
12580: PPUSH
12581: LD_VAR 0 7
12585: PPUSH
12586: CALL_OW 505
// if value = 0 then
12590: LD_VAR 0 7
12594: PUSH
12595: LD_INT 0
12597: EQUAL
12598: IFFALSE 12647
// begin RemoveDepositXY ( mpGlobalOilDeposits [ i ] [ 1 ] , mpGlobalOilDeposits [ i ] [ 2 ] ) ;
12600: LD_EXP 50
12604: PUSH
12605: LD_VAR 0 6
12609: ARRAY
12610: PUSH
12611: LD_INT 1
12613: ARRAY
12614: PPUSH
12615: LD_EXP 50
12619: PUSH
12620: LD_VAR 0 6
12624: ARRAY
12625: PUSH
12626: LD_INT 2
12628: ARRAY
12629: PPUSH
12630: CALL_OW 63
// KillUnit ( building ) ;
12634: LD_VAR 0 1
12638: PPUSH
12639: CALL_OW 66
// exit ;
12643: POP
12644: POP
12645: GO 12651
// end ; end ; end ;
12647: GO 12452
12649: POP
12650: POP
// end ;
12651: LD_VAR 0 5
12655: RET
// export function Multiplayer_SibExtracted ( building , side , base , amount ) ; var i , value ; begin
12656: LD_INT 0
12658: PPUSH
12659: PPUSH
12660: PPUSH
// if mpGameType <> GameTypeFamine then
12661: LD_EXP 12
12665: PUSH
12666: LD_INT 5
12668: NONEQUAL
12669: IFFALSE 12673
// exit ;
12671: GO 12887
// for i := 1 to mpGlobalSibDeposits do
12673: LD_ADDR_VAR 0 6
12677: PUSH
12678: DOUBLE
12679: LD_INT 1
12681: DEC
12682: ST_TO_ADDR
12683: LD_EXP 51
12687: PUSH
12688: FOR_TO
12689: IFFALSE 12885
// begin if HexInfo ( mpGlobalSibDeposits [ i ] [ 1 ] , mpGlobalSibDeposits [ i ] [ 2 ] ) = building then
12691: LD_EXP 51
12695: PUSH
12696: LD_VAR 0 6
12700: ARRAY
12701: PUSH
12702: LD_INT 1
12704: ARRAY
12705: PPUSH
12706: LD_EXP 51
12710: PUSH
12711: LD_VAR 0 6
12715: ARRAY
12716: PUSH
12717: LD_INT 2
12719: ARRAY
12720: PPUSH
12721: CALL_OW 428
12725: PUSH
12726: LD_VAR 0 1
12730: EQUAL
12731: IFFALSE 12883
// begin value := mpGlobalSibDeposits [ i ] [ 3 ] ;
12733: LD_ADDR_VAR 0 7
12737: PUSH
12738: LD_EXP 51
12742: PUSH
12743: LD_VAR 0 6
12747: ARRAY
12748: PUSH
12749: LD_INT 3
12751: ARRAY
12752: ST_TO_ADDR
// value := Dec ( value ) ;
12753: LD_ADDR_VAR 0 7
12757: PUSH
12758: LD_VAR 0 7
12762: PPUSH
12763: CALL 60615 0 1
12767: ST_TO_ADDR
// mpGlobalSibDeposits := Replace ( mpGlobalSibDeposits , i , Replace ( mpGlobalSibDeposits [ i ] , 3 , value ) ) ;
12768: LD_ADDR_EXP 51
12772: PUSH
12773: LD_EXP 51
12777: PPUSH
12778: LD_VAR 0 6
12782: PPUSH
12783: LD_EXP 51
12787: PUSH
12788: LD_VAR 0 6
12792: ARRAY
12793: PPUSH
12794: LD_INT 3
12796: PPUSH
12797: LD_VAR 0 7
12801: PPUSH
12802: CALL_OW 1
12806: PPUSH
12807: CALL_OW 1
12811: ST_TO_ADDR
// SetUnitDisplayNumber ( building , value ) ;
12812: LD_VAR 0 1
12816: PPUSH
12817: LD_VAR 0 7
12821: PPUSH
12822: CALL_OW 505
// if value = 0 then
12826: LD_VAR 0 7
12830: PUSH
12831: LD_INT 0
12833: EQUAL
12834: IFFALSE 12883
// begin RemoveDepositXY ( mpGlobalSibDeposits [ i ] [ 1 ] , mpGlobalSibDeposits [ i ] [ 2 ] ) ;
12836: LD_EXP 51
12840: PUSH
12841: LD_VAR 0 6
12845: ARRAY
12846: PUSH
12847: LD_INT 1
12849: ARRAY
12850: PPUSH
12851: LD_EXP 51
12855: PUSH
12856: LD_VAR 0 6
12860: ARRAY
12861: PUSH
12862: LD_INT 2
12864: ARRAY
12865: PPUSH
12866: CALL_OW 63
// KillUnit ( building ) ;
12870: LD_VAR 0 1
12874: PPUSH
12875: CALL_OW 66
// exit ;
12879: POP
12880: POP
12881: GO 12887
// end ; end ; end ;
12883: GO 12688
12885: POP
12886: POP
// end ; end_of_file
12887: LD_VAR 0 5
12891: RET
// export mpKingPoints ; every 0 0$1 trigger mpGameActive marked GameTypeKing do var i , j , tmp ;
12892: LD_EXP 48
12896: IFFALSE 13237
12898: GO 12900
12900: DISABLE
12901: LD_INT 0
12903: PPUSH
12904: PPUSH
12905: PPUSH
// begin mpKingPoints := [ ] ;
12906: LD_ADDR_EXP 57
12910: PUSH
12911: EMPTY
12912: ST_TO_ADDR
// if mpTeamGame then
12913: LD_EXP 20
12917: IFFALSE 12971
// begin for i := 1 to Count ( mpTeams ) do
12919: LD_ADDR_VAR 0 1
12923: PUSH
12924: DOUBLE
12925: LD_INT 1
12927: DEC
12928: ST_TO_ADDR
12929: LD_EXP 19
12933: PPUSH
12934: CALL 23623 0 1
12938: PUSH
12939: FOR_TO
12940: IFFALSE 12967
// mpKingPoints := Replace ( mpKingPoints , i , 0 ) ;
12942: LD_ADDR_EXP 57
12946: PUSH
12947: LD_EXP 57
12951: PPUSH
12952: LD_VAR 0 1
12956: PPUSH
12957: LD_INT 0
12959: PPUSH
12960: CALL_OW 1
12964: ST_TO_ADDR
12965: GO 12939
12967: POP
12968: POP
// end else
12969: GO 13014
// begin for i := 1 to 8 do
12971: LD_ADDR_VAR 0 1
12975: PUSH
12976: DOUBLE
12977: LD_INT 1
12979: DEC
12980: ST_TO_ADDR
12981: LD_INT 8
12983: PUSH
12984: FOR_TO
12985: IFFALSE 13012
// mpKingPoints := Replace ( mpKingPoints , i , 0 ) ;
12987: LD_ADDR_EXP 57
12991: PUSH
12992: LD_EXP 57
12996: PPUSH
12997: LD_VAR 0 1
13001: PPUSH
13002: LD_INT 0
13004: PPUSH
13005: CALL_OW 1
13009: ST_TO_ADDR
13010: GO 12984
13012: POP
13013: POP
// end ; tmp := AreaToList ( kingCamArea , 0 ) ;
13014: LD_ADDR_VAR 0 3
13018: PUSH
13019: LD_EXP 2
13023: PPUSH
13024: LD_INT 0
13026: PPUSH
13027: CALL_OW 517
13031: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
13032: LD_ADDR_VAR 0 1
13036: PUSH
13037: DOUBLE
13038: LD_INT 1
13040: DEC
13041: ST_TO_ADDR
13042: LD_VAR 0 3
13046: PUSH
13047: LD_INT 1
13049: ARRAY
13050: PUSH
13051: FOR_TO
13052: IFFALSE 13119
// for j := 1 to 8 do
13054: LD_ADDR_VAR 0 2
13058: PUSH
13059: DOUBLE
13060: LD_INT 1
13062: DEC
13063: ST_TO_ADDR
13064: LD_INT 8
13066: PUSH
13067: FOR_TO
13068: IFFALSE 13115
// PlaceSeeing ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , j , - 12 ) ;
13070: LD_VAR 0 3
13074: PUSH
13075: LD_INT 1
13077: ARRAY
13078: PUSH
13079: LD_VAR 0 1
13083: ARRAY
13084: PPUSH
13085: LD_VAR 0 3
13089: PUSH
13090: LD_INT 2
13092: ARRAY
13093: PUSH
13094: LD_VAR 0 1
13098: ARRAY
13099: PPUSH
13100: LD_VAR 0 2
13104: PPUSH
13105: LD_INT 12
13107: NEG
13108: PPUSH
13109: CALL_OW 330
13113: GO 13067
13115: POP
13116: POP
13117: GO 13051
13119: POP
13120: POP
// SetAreaMapShow ( mpKingArea , 1 ) ;
13121: LD_EXP 43
13125: PPUSH
13126: LD_INT 1
13128: PPUSH
13129: CALL_OW 424
// UpdateCounter ;
13133: CALL 13741 0 0
// repeat wait ( 0 0$1 ) ;
13137: LD_INT 35
13139: PPUSH
13140: CALL_OW 67
// tmp := FilterUnitsInArea ( mpKingArea , [ [ f_not , [ f_constructed ] ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
13144: LD_ADDR_VAR 0 3
13148: PUSH
13149: LD_EXP 43
13153: PPUSH
13154: LD_INT 3
13156: PUSH
13157: LD_INT 57
13159: PUSH
13160: EMPTY
13161: LIST
13162: PUSH
13163: EMPTY
13164: LIST
13165: LIST
13166: PUSH
13167: LD_INT 50
13169: PUSH
13170: EMPTY
13171: LIST
13172: PUSH
13173: LD_INT 2
13175: PUSH
13176: LD_INT 30
13178: PUSH
13179: LD_INT 0
13181: PUSH
13182: EMPTY
13183: LIST
13184: LIST
13185: PUSH
13186: LD_INT 30
13188: PUSH
13189: LD_INT 1
13191: PUSH
13192: EMPTY
13193: LIST
13194: LIST
13195: PUSH
13196: EMPTY
13197: LIST
13198: LIST
13199: LIST
13200: PUSH
13201: EMPTY
13202: LIST
13203: LIST
13204: LIST
13205: PPUSH
13206: CALL_OW 70
13210: ST_TO_ADDR
// if not tmp then
13211: LD_VAR 0 3
13215: NOT
13216: IFFALSE 13220
// continue ;
13218: GO 13137
// AddPoints ( tmp ) ;
13220: LD_VAR 0 3
13224: PPUSH
13225: CALL 13419 0 1
// UpdateCounter ;
13229: CALL 13741 0 0
// until false ;
13233: LD_INT 0
13235: IFFALSE 13137
// end ;
13237: PPOPN 3
13239: END
// every 0 0$1 trigger mpGameActive and mpEmissions marked GameTypeKing do var i , tmp ;
13240: LD_EXP 48
13244: PUSH
13245: LD_EXP 46
13249: AND
13250: IFFALSE 13416
13252: GO 13254
13254: DISABLE
13255: LD_INT 0
13257: PPUSH
13258: PPUSH
// begin tmp := AreaToList ( kingCamArea , 0 ) ;
13259: LD_ADDR_VAR 0 2
13263: PUSH
13264: LD_EXP 2
13268: PPUSH
13269: LD_INT 0
13271: PPUSH
13272: CALL_OW 517
13276: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
13277: LD_ADDR_VAR 0 1
13281: PUSH
13282: DOUBLE
13283: LD_INT 1
13285: DEC
13286: ST_TO_ADDR
13287: LD_VAR 0 2
13291: PUSH
13292: LD_INT 1
13294: ARRAY
13295: PUSH
13296: FOR_TO
13297: IFFALSE 13338
// ArtContamination ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 125 ) ;
13299: LD_VAR 0 2
13303: PUSH
13304: LD_INT 1
13306: ARRAY
13307: PUSH
13308: LD_VAR 0 1
13312: ARRAY
13313: PPUSH
13314: LD_VAR 0 2
13318: PUSH
13319: LD_INT 2
13321: ARRAY
13322: PUSH
13323: LD_VAR 0 1
13327: ARRAY
13328: PPUSH
13329: LD_INT 125
13331: PPUSH
13332: CALL_OW 495
13336: GO 13296
13338: POP
13339: POP
// repeat wait ( mpEmissions ) ;
13340: LD_EXP 46
13344: PPUSH
13345: CALL_OW 67
// for i := 1 to tmp [ 1 ] do
13349: LD_ADDR_VAR 0 1
13353: PUSH
13354: DOUBLE
13355: LD_INT 1
13357: DEC
13358: ST_TO_ADDR
13359: LD_VAR 0 2
13363: PUSH
13364: LD_INT 1
13366: ARRAY
13367: PUSH
13368: FOR_TO
13369: IFFALSE 13410
// ArtContamination ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 15 ) ;
13371: LD_VAR 0 2
13375: PUSH
13376: LD_INT 1
13378: ARRAY
13379: PUSH
13380: LD_VAR 0 1
13384: ARRAY
13385: PPUSH
13386: LD_VAR 0 2
13390: PUSH
13391: LD_INT 2
13393: ARRAY
13394: PUSH
13395: LD_VAR 0 1
13399: ARRAY
13400: PPUSH
13401: LD_INT 15
13403: PPUSH
13404: CALL_OW 495
13408: GO 13368
13410: POP
13411: POP
// until false ;
13412: LD_INT 0
13414: IFFALSE 13340
// end ;
13416: PPOPN 2
13418: END
// function AddPoints ( depots ) ; var i , first , team , side ; begin
13419: LD_INT 0
13421: PPUSH
13422: PPUSH
13423: PPUSH
13424: PPUSH
13425: PPUSH
// if mpTeamGame then
13426: LD_EXP 20
13430: IFFALSE 13627
// begin first := depots [ 1 ] ;
13432: LD_ADDR_VAR 0 4
13436: PUSH
13437: LD_VAR 0 1
13441: PUSH
13442: LD_INT 1
13444: ARRAY
13445: ST_TO_ADDR
// side := GetSide ( first ) ;
13446: LD_ADDR_VAR 0 6
13450: PUSH
13451: LD_VAR 0 4
13455: PPUSH
13456: CALL_OW 255
13460: ST_TO_ADDR
// for i := 1 to mpTeams do
13461: LD_ADDR_VAR 0 3
13465: PUSH
13466: DOUBLE
13467: LD_INT 1
13469: DEC
13470: ST_TO_ADDR
13471: LD_EXP 19
13475: PUSH
13476: FOR_TO
13477: IFFALSE 13511
// if side in mpTeams [ i ] then
13479: LD_VAR 0 6
13483: PUSH
13484: LD_EXP 19
13488: PUSH
13489: LD_VAR 0 3
13493: ARRAY
13494: IN
13495: IFFALSE 13509
// begin team := i ;
13497: LD_ADDR_VAR 0 5
13501: PUSH
13502: LD_VAR 0 3
13506: ST_TO_ADDR
// break ;
13507: GO 13511
// end ;
13509: GO 13476
13511: POP
13512: POP
// if not team then
13513: LD_VAR 0 5
13517: NOT
13518: IFFALSE 13522
// exit ;
13520: GO 13736
// if FilterUnitsInArea ( mpKingArea , [ f_enemy , side ] ) then
13522: LD_EXP 43
13526: PPUSH
13527: LD_INT 81
13529: PUSH
13530: LD_VAR 0 6
13534: PUSH
13535: EMPTY
13536: LIST
13537: LIST
13538: PPUSH
13539: CALL_OW 70
13543: IFFALSE 13547
// exit ;
13545: GO 13736
// mpKingPoints := Replace ( mpKingPoints , team , mpKingPoints [ team ] + 1 ) ;
13547: LD_ADDR_EXP 57
13551: PUSH
13552: LD_EXP 57
13556: PPUSH
13557: LD_VAR 0 5
13561: PPUSH
13562: LD_EXP 57
13566: PUSH
13567: LD_VAR 0 5
13571: ARRAY
13572: PUSH
13573: LD_INT 1
13575: PLUS
13576: PPUSH
13577: CALL_OW 1
13581: ST_TO_ADDR
// for i in mpTeams [ team ] do
13582: LD_ADDR_VAR 0 3
13586: PUSH
13587: LD_EXP 19
13591: PUSH
13592: LD_VAR 0 5
13596: ARRAY
13597: PUSH
13598: FOR_IN
13599: IFFALSE 13623
// SetMultiScore ( i , mpKingPoints [ team ] ) ;
13601: LD_VAR 0 3
13605: PPUSH
13606: LD_EXP 57
13610: PUSH
13611: LD_VAR 0 5
13615: ARRAY
13616: PPUSH
13617: CALL_OW 506
13621: GO 13598
13623: POP
13624: POP
// end else
13625: GO 13736
// begin first := depots [ 1 ] ;
13627: LD_ADDR_VAR 0 4
13631: PUSH
13632: LD_VAR 0 1
13636: PUSH
13637: LD_INT 1
13639: ARRAY
13640: ST_TO_ADDR
// side := GetSide ( first ) ;
13641: LD_ADDR_VAR 0 6
13645: PUSH
13646: LD_VAR 0 4
13650: PPUSH
13651: CALL_OW 255
13655: ST_TO_ADDR
// if FilterUnitsInArea ( mpKingArea , [ f_enemy , side ] ) then
13656: LD_EXP 43
13660: PPUSH
13661: LD_INT 81
13663: PUSH
13664: LD_VAR 0 6
13668: PUSH
13669: EMPTY
13670: LIST
13671: LIST
13672: PPUSH
13673: CALL_OW 70
13677: IFFALSE 13681
// exit ;
13679: GO 13736
// mpKingPoints := Replace ( mpKingPoints , side , mpKingPoints [ side ] + 1 ) ;
13681: LD_ADDR_EXP 57
13685: PUSH
13686: LD_EXP 57
13690: PPUSH
13691: LD_VAR 0 6
13695: PPUSH
13696: LD_EXP 57
13700: PUSH
13701: LD_VAR 0 6
13705: ARRAY
13706: PUSH
13707: LD_INT 1
13709: PLUS
13710: PPUSH
13711: CALL_OW 1
13715: ST_TO_ADDR
// SetMultiScore ( side , mpKingPoints [ side ] ) ;
13716: LD_VAR 0 6
13720: PPUSH
13721: LD_EXP 57
13725: PUSH
13726: LD_VAR 0 6
13730: ARRAY
13731: PPUSH
13732: CALL_OW 506
// end ; end ;
13736: LD_VAR 0 2
13740: RET
// function UpdateCounter ; var i ; begin
13741: LD_INT 0
13743: PPUSH
13744: PPUSH
// result := [ ] ;
13745: LD_ADDR_VAR 0 1
13749: PUSH
13750: EMPTY
13751: ST_TO_ADDR
// if mpTeamGame then
13752: LD_EXP 20
13756: IFFALSE 13823
// begin for i := 1 to mpTeams do
13758: LD_ADDR_VAR 0 2
13762: PUSH
13763: DOUBLE
13764: LD_INT 1
13766: DEC
13767: ST_TO_ADDR
13768: LD_EXP 19
13772: PUSH
13773: FOR_TO
13774: IFFALSE 13819
// result := result ^ [ #KingoftheHill-Team , i , mpKingPoints [ i ] , mpPoints ] ;
13776: LD_ADDR_VAR 0 1
13780: PUSH
13781: LD_VAR 0 1
13785: PUSH
13786: LD_STRING #KingoftheHill-Team
13788: PUSH
13789: LD_VAR 0 2
13793: PUSH
13794: LD_EXP 57
13798: PUSH
13799: LD_VAR 0 2
13803: ARRAY
13804: PUSH
13805: LD_EXP 44
13809: PUSH
13810: EMPTY
13811: LIST
13812: LIST
13813: LIST
13814: LIST
13815: ADD
13816: ST_TO_ADDR
13817: GO 13773
13819: POP
13820: POP
// end else
13821: GO 13896
// begin for i := 1 to 8 do
13823: LD_ADDR_VAR 0 2
13827: PUSH
13828: DOUBLE
13829: LD_INT 1
13831: DEC
13832: ST_TO_ADDR
13833: LD_INT 8
13835: PUSH
13836: FOR_TO
13837: IFFALSE 13894
// if mpSidePositions [ i ] then
13839: LD_EXP 16
13843: PUSH
13844: LD_VAR 0 2
13848: ARRAY
13849: IFFALSE 13892
// result := result ^ [ #KingoftheHill-Player , i , mpKingPoints [ i ] , mpPoints ] ;
13851: LD_ADDR_VAR 0 1
13855: PUSH
13856: LD_VAR 0 1
13860: PUSH
13861: LD_STRING #KingoftheHill-Player
13863: PUSH
13864: LD_VAR 0 2
13868: PUSH
13869: LD_EXP 57
13873: PUSH
13874: LD_VAR 0 2
13878: ARRAY
13879: PUSH
13880: LD_EXP 44
13884: PUSH
13885: EMPTY
13886: LIST
13887: LIST
13888: LIST
13889: LIST
13890: ADD
13891: ST_TO_ADDR
13892: GO 13836
13894: POP
13895: POP
// end ; mpDisplayStrings := result ;
13896: LD_ADDR_EXP 47
13900: PUSH
13901: LD_VAR 0 1
13905: ST_TO_ADDR
// end ;
13906: LD_VAR 0 1
13910: RET
// export function HowMuchPointsKing ( side ) ; begin
13911: LD_INT 0
13913: PPUSH
// result := HowMuchPoints ( side ) ;
13914: LD_ADDR_VAR 0 2
13918: PUSH
13919: LD_VAR 0 1
13923: PPUSH
13924: CALL 13934 0 1
13928: ST_TO_ADDR
// end ;
13929: LD_VAR 0 2
13933: RET
// function HowMuchPoints ( side ) ; var i ; begin
13934: LD_INT 0
13936: PPUSH
13937: PPUSH
// if mpTeamGame then
13938: LD_EXP 20
13942: IFFALSE 14011
// begin for i := 1 to Count ( mpTeams ) do
13944: LD_ADDR_VAR 0 3
13948: PUSH
13949: DOUBLE
13950: LD_INT 1
13952: DEC
13953: ST_TO_ADDR
13954: LD_EXP 19
13958: PPUSH
13959: CALL 23623 0 1
13963: PUSH
13964: FOR_TO
13965: IFFALSE 14007
// begin if side in mpTeams [ i ] then
13967: LD_VAR 0 1
13971: PUSH
13972: LD_EXP 19
13976: PUSH
13977: LD_VAR 0 3
13981: ARRAY
13982: IN
13983: IFFALSE 14005
// begin result := mpKingPoints [ i ] ;
13985: LD_ADDR_VAR 0 2
13989: PUSH
13990: LD_EXP 57
13994: PUSH
13995: LD_VAR 0 3
13999: ARRAY
14000: ST_TO_ADDR
// exit ;
14001: POP
14002: POP
14003: GO 14027
// end ; end ;
14005: GO 13964
14007: POP
14008: POP
// end else
14009: GO 14027
// result := mpKingPoints [ side ] ;
14011: LD_ADDR_VAR 0 2
14015: PUSH
14016: LD_EXP 57
14020: PUSH
14021: LD_VAR 0 1
14025: ARRAY
14026: ST_TO_ADDR
// end ;
14027: LD_VAR 0 2
14031: RET
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeKing do var i , canWin ;
14032: LD_EXP 48
14036: PUSH
14037: CALL 14359 0 0
14041: AND
14042: PUSH
14043: LD_OWVAR 4
14047: AND
14048: IFFALSE 14284
14050: GO 14052
14052: DISABLE
14053: LD_INT 0
14055: PPUSH
14056: PPUSH
// begin canWin := false ;
14057: LD_ADDR_VAR 0 2
14061: PUSH
14062: LD_INT 0
14064: ST_TO_ADDR
// if not HasPower ( your_side ) then
14065: LD_OWVAR 2
14069: PPUSH
14070: CALL 14399 0 1
14074: NOT
14075: IFFALSE 14086
// begin Multiplayer_Loose_Message ;
14077: CALL_OW 521
// enable ( mpLose ) ;
14081: LD_INT 102
14083: ENABLE_MARKED
// end else
14084: GO 14284
// begin canWin := ( HowMuchPoints ( your_side ) >= mpPoints and HasPower ( your_side ) ) or not EnemiesInGame ;
14086: LD_ADDR_VAR 0 2
14090: PUSH
14091: LD_OWVAR 2
14095: PPUSH
14096: CALL 13934 0 1
14100: PUSH
14101: LD_EXP 44
14105: GREATEREQUAL
14106: PUSH
14107: LD_OWVAR 2
14111: PPUSH
14112: CALL 14399 0 1
14116: AND
14117: PUSH
14118: CALL 14287 0 0
14122: NOT
14123: OR
14124: ST_TO_ADDR
// for i := 1 to 8 do
14125: LD_ADDR_VAR 0 1
14129: PUSH
14130: DOUBLE
14131: LD_INT 1
14133: DEC
14134: ST_TO_ADDR
14135: LD_INT 8
14137: PUSH
14138: FOR_TO
14139: IFFALSE 14270
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
14141: LD_EXP 16
14145: PUSH
14146: LD_VAR 0 1
14150: ARRAY
14151: PUSH
14152: LD_VAR 0 1
14156: PPUSH
14157: CALL_OW 108
14161: AND
14162: PUSH
14163: LD_VAR 0 1
14167: PUSH
14168: LD_OWVAR 2
14172: NONEQUAL
14173: AND
14174: IFFALSE 14268
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
14176: LD_EXP 17
14180: PUSH
14181: LD_VAR 0 1
14185: ARRAY
14186: NOT
14187: PUSH
14188: LD_EXP 17
14192: PUSH
14193: LD_VAR 0 1
14197: ARRAY
14198: PUSH
14199: LD_EXP 17
14203: PUSH
14204: LD_OWVAR 2
14208: ARRAY
14209: NONEQUAL
14210: PUSH
14211: LD_OWVAR 2
14215: PPUSH
14216: LD_VAR 0 1
14220: PPUSH
14221: CALL_OW 81
14225: PUSH
14226: LD_INT 1
14228: NONEQUAL
14229: AND
14230: OR
14231: IFFALSE 14268
// if HowMuchPoints ( i ) >= mpPoints and HasPower ( i ) then
14233: LD_VAR 0 1
14237: PPUSH
14238: CALL 13934 0 1
14242: PUSH
14243: LD_EXP 44
14247: GREATEREQUAL
14248: PUSH
14249: LD_VAR 0 1
14253: PPUSH
14254: CALL 14399 0 1
14258: AND
14259: IFFALSE 14268
// begin enable ( mpLose ) ;
14261: LD_INT 102
14263: ENABLE_MARKED
// exit ;
14264: POP
14265: POP
14266: GO 14284
// end ;
14268: GO 14138
14270: POP
14271: POP
// if canWin then
14272: LD_VAR 0 2
14276: IFFALSE 14283
// enable ( mpWin ) else
14278: LD_INT 101
14280: ENABLE_MARKED
14281: GO 14284
// enable ;
14283: ENABLE
// end ; end ;
14284: PPOPN 2
14286: END
// function EnemiesInGame ; var i ; begin
14287: LD_INT 0
14289: PPUSH
14290: PPUSH
// result := false ;
14291: LD_ADDR_VAR 0 1
14295: PUSH
14296: LD_INT 0
14298: ST_TO_ADDR
// for i := 1 to 8 do
14299: LD_ADDR_VAR 0 2
14303: PUSH
14304: DOUBLE
14305: LD_INT 1
14307: DEC
14308: ST_TO_ADDR
14309: LD_INT 8
14311: PUSH
14312: FOR_TO
14313: IFFALSE 14352
// if i <> your_side and HasPower ( i ) then
14315: LD_VAR 0 2
14319: PUSH
14320: LD_OWVAR 2
14324: NONEQUAL
14325: PUSH
14326: LD_VAR 0 2
14330: PPUSH
14331: CALL 14399 0 1
14335: AND
14336: IFFALSE 14350
// begin result := true ;
14338: LD_ADDR_VAR 0 1
14342: PUSH
14343: LD_INT 1
14345: ST_TO_ADDR
// exit ;
14346: POP
14347: POP
14348: GO 14354
// end ;
14350: GO 14312
14352: POP
14353: POP
// end ;
14354: LD_VAR 0 1
14358: RET
// function CanWinLoose ; begin
14359: LD_INT 0
14361: PPUSH
// result := true ;
14362: LD_ADDR_VAR 0 1
14366: PUSH
14367: LD_INT 1
14369: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
14370: CALL_OW 531
14374: PUSH
14375: CALL_OW 519
14379: PUSH
14380: LD_INT 1
14382: GREATER
14383: AND
14384: IFFALSE 14394
// result := false ;
14386: LD_ADDR_VAR 0 1
14390: PUSH
14391: LD_INT 0
14393: ST_TO_ADDR
// end ;
14394: LD_VAR 0 1
14398: RET
// function HasPower ( i ) ; begin
14399: LD_INT 0
14401: PPUSH
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
14402: LD_ADDR_VAR 0 2
14406: PUSH
14407: LD_INT 22
14409: PUSH
14410: LD_VAR 0 1
14414: PUSH
14415: EMPTY
14416: LIST
14417: LIST
14418: PUSH
14419: LD_INT 2
14421: PUSH
14422: LD_INT 21
14424: PUSH
14425: LD_INT 1
14427: PUSH
14428: EMPTY
14429: LIST
14430: LIST
14431: PUSH
14432: LD_INT 33
14434: PUSH
14435: LD_INT 3
14437: PUSH
14438: EMPTY
14439: LIST
14440: LIST
14441: PUSH
14442: LD_INT 33
14444: PUSH
14445: LD_INT 5
14447: PUSH
14448: EMPTY
14449: LIST
14450: LIST
14451: PUSH
14452: EMPTY
14453: LIST
14454: LIST
14455: LIST
14456: LIST
14457: PUSH
14458: EMPTY
14459: LIST
14460: LIST
14461: PPUSH
14462: CALL_OW 69
14466: ST_TO_ADDR
// end ; end_of_file
14467: LD_VAR 0 2
14471: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
14472: LD_VAR 0 1
14476: PUSH
14477: LD_INT 200
14479: DOUBLE
14480: GREATEREQUAL
14481: IFFALSE 14489
14483: LD_INT 299
14485: DOUBLE
14486: LESSEQUAL
14487: IFTRUE 14491
14489: GO 14523
14491: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
14492: LD_VAR 0 1
14496: PPUSH
14497: LD_VAR 0 2
14501: PPUSH
14502: LD_VAR 0 3
14506: PPUSH
14507: LD_VAR 0 4
14511: PPUSH
14512: LD_VAR 0 5
14516: PPUSH
14517: CALL 16738 0 5
14521: GO 14600
14523: LD_INT 300
14525: DOUBLE
14526: GREATEREQUAL
14527: IFFALSE 14535
14529: LD_INT 399
14531: DOUBLE
14532: LESSEQUAL
14533: IFTRUE 14537
14535: GO 14599
14537: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
14538: LD_VAR 0 1
14542: PPUSH
14543: LD_VAR 0 2
14547: PPUSH
14548: LD_VAR 0 3
14552: PPUSH
14553: LD_VAR 0 4
14557: PPUSH
14558: LD_VAR 0 5
14562: PPUSH
14563: LD_VAR 0 6
14567: PPUSH
14568: LD_VAR 0 7
14572: PPUSH
14573: LD_VAR 0 8
14577: PPUSH
14578: LD_VAR 0 9
14582: PPUSH
14583: LD_VAR 0 10
14587: PPUSH
14588: LD_VAR 0 11
14592: PPUSH
14593: CALL 15229 0 11
14597: GO 14600
14599: POP
// end ;
14600: PPOPN 11
14602: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
14603: LD_VAR 0 1
14607: PPUSH
14608: LD_VAR 0 2
14612: PPUSH
14613: LD_VAR 0 3
14617: PPUSH
14618: LD_VAR 0 4
14622: PPUSH
14623: LD_VAR 0 5
14627: PPUSH
14628: CALL 16123 0 5
// end ; end_of_file
14632: PPOPN 5
14634: END
// every 0 0$1 do
14635: GO 14637
14637: DISABLE
// begin enable ;
14638: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
14639: LD_STRING updateTimer(
14641: PUSH
14642: LD_OWVAR 1
14646: STR
14647: PUSH
14648: LD_STRING );
14650: STR
14651: PPUSH
14652: CALL_OW 559
// end ;
14656: END
// export function SOS_MapStart ( ) ; begin
14657: LD_INT 0
14659: PPUSH
// UpdateFactoryWaypoints ( ) ;
14660: CALL 15585 0 0
// UpdateWarehouseGatheringPoints ( ) ;
14664: CALL 15837 0 0
// ParseMultiDataToLua ( ) ;
14668: CALL 15984 0 0
// ToLua ( setSpecLogoNumber( & 2 & , & 1 & ) ) ;
14672: LD_STRING setSpecLogoNumber(
14674: PUSH
14675: LD_INT 2
14677: STR
14678: PUSH
14679: LD_STRING ,
14681: STR
14682: PUSH
14683: LD_INT 1
14685: STR
14686: PUSH
14687: LD_STRING )
14689: STR
14690: PPUSH
14691: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 3 & , & 2 & ) ) ;
14695: LD_STRING setSpecLogoNumber(
14697: PUSH
14698: LD_INT 3
14700: STR
14701: PUSH
14702: LD_STRING ,
14704: STR
14705: PUSH
14706: LD_INT 2
14708: STR
14709: PUSH
14710: LD_STRING )
14712: STR
14713: PPUSH
14714: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 4 & , & 3 & ) ) ;
14718: LD_STRING setSpecLogoNumber(
14720: PUSH
14721: LD_INT 4
14723: STR
14724: PUSH
14725: LD_STRING ,
14727: STR
14728: PUSH
14729: LD_INT 3
14731: STR
14732: PUSH
14733: LD_STRING )
14735: STR
14736: PPUSH
14737: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 5 & , & 4 & ) ) ;
14741: LD_STRING setSpecLogoNumber(
14743: PUSH
14744: LD_INT 5
14746: STR
14747: PUSH
14748: LD_STRING ,
14750: STR
14751: PUSH
14752: LD_INT 4
14754: STR
14755: PUSH
14756: LD_STRING )
14758: STR
14759: PPUSH
14760: CALL_OW 559
// end ;
14764: LD_VAR 0 1
14768: RET
// export function UpdateSpectatorBar ; var i , j , crates , oil , sib , people , base , bases ; begin
14769: LD_INT 0
14771: PPUSH
14772: PPUSH
14773: PPUSH
14774: PPUSH
14775: PPUSH
14776: PPUSH
14777: PPUSH
14778: PPUSH
14779: PPUSH
// for i := 1 to 8 do
14780: LD_ADDR_VAR 0 2
14784: PUSH
14785: DOUBLE
14786: LD_INT 1
14788: DEC
14789: ST_TO_ADDR
14790: LD_INT 8
14792: PUSH
14793: FOR_TO
14794: IFFALSE 15179
// begin if mpSidePositions [ i ] then
14796: LD_EXP 16
14800: PUSH
14801: LD_VAR 0 2
14805: ARRAY
14806: IFFALSE 15177
// begin people := Count ( FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) ) ;
14808: LD_ADDR_VAR 0 7
14812: PUSH
14813: LD_INT 22
14815: PUSH
14816: LD_VAR 0 2
14820: PUSH
14821: EMPTY
14822: LIST
14823: LIST
14824: PUSH
14825: LD_INT 21
14827: PUSH
14828: LD_INT 1
14830: PUSH
14831: EMPTY
14832: LIST
14833: LIST
14834: PUSH
14835: EMPTY
14836: LIST
14837: LIST
14838: PPUSH
14839: CALL_OW 69
14843: PPUSH
14844: CALL 23623 0 1
14848: ST_TO_ADDR
// bases := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
14849: LD_ADDR_VAR 0 9
14853: PUSH
14854: LD_INT 22
14856: PUSH
14857: LD_VAR 0 2
14861: PUSH
14862: EMPTY
14863: LIST
14864: LIST
14865: PUSH
14866: LD_INT 2
14868: PUSH
14869: LD_INT 30
14871: PUSH
14872: LD_INT 0
14874: PUSH
14875: EMPTY
14876: LIST
14877: LIST
14878: PUSH
14879: LD_INT 30
14881: PUSH
14882: LD_INT 1
14884: PUSH
14885: EMPTY
14886: LIST
14887: LIST
14888: PUSH
14889: EMPTY
14890: LIST
14891: LIST
14892: LIST
14893: PUSH
14894: EMPTY
14895: LIST
14896: LIST
14897: PPUSH
14898: CALL_OW 69
14902: ST_TO_ADDR
// crates := 0 ;
14903: LD_ADDR_VAR 0 4
14907: PUSH
14908: LD_INT 0
14910: ST_TO_ADDR
// oil := 0 ;
14911: LD_ADDR_VAR 0 5
14915: PUSH
14916: LD_INT 0
14918: ST_TO_ADDR
// sib := 0 ;
14919: LD_ADDR_VAR 0 6
14923: PUSH
14924: LD_INT 0
14926: ST_TO_ADDR
// if bases then
14927: LD_VAR 0 9
14931: IFFALSE 15037
// begin for j in bases do
14933: LD_ADDR_VAR 0 3
14937: PUSH
14938: LD_VAR 0 9
14942: PUSH
14943: FOR_IN
14944: IFFALSE 15035
// begin base := GetBase ( j ) ;
14946: LD_ADDR_VAR 0 8
14950: PUSH
14951: LD_VAR 0 3
14955: PPUSH
14956: CALL_OW 274
14960: ST_TO_ADDR
// crates := crates + GetResourceType ( base , mat_cans ) ;
14961: LD_ADDR_VAR 0 4
14965: PUSH
14966: LD_VAR 0 4
14970: PUSH
14971: LD_VAR 0 8
14975: PPUSH
14976: LD_INT 1
14978: PPUSH
14979: CALL_OW 275
14983: PLUS
14984: ST_TO_ADDR
// oil := oil + GetResourceType ( base , mat_oil ) ;
14985: LD_ADDR_VAR 0 5
14989: PUSH
14990: LD_VAR 0 5
14994: PUSH
14995: LD_VAR 0 8
14999: PPUSH
15000: LD_INT 2
15002: PPUSH
15003: CALL_OW 275
15007: PLUS
15008: ST_TO_ADDR
// sib := sib + GetResourceType ( base , mat_siberit ) ;
15009: LD_ADDR_VAR 0 6
15013: PUSH
15014: LD_VAR 0 6
15018: PUSH
15019: LD_VAR 0 8
15023: PPUSH
15024: LD_INT 3
15026: PPUSH
15027: CALL_OW 275
15031: PLUS
15032: ST_TO_ADDR
// end ;
15033: GO 14943
15035: POP
15036: POP
// end ; ToLua ( setSpecText( & i & , & 2 & , & crates & ) ) ;
15037: LD_STRING setSpecText(
15039: PUSH
15040: LD_VAR 0 2
15044: STR
15045: PUSH
15046: LD_STRING ,
15048: STR
15049: PUSH
15050: LD_INT 2
15052: STR
15053: PUSH
15054: LD_STRING ,
15056: STR
15057: PUSH
15058: LD_VAR 0 4
15062: STR
15063: PUSH
15064: LD_STRING )
15066: STR
15067: PPUSH
15068: CALL_OW 559
// ToLua ( setSpecText( & i & , & 3 & , & oil & ) ) ;
15072: LD_STRING setSpecText(
15074: PUSH
15075: LD_VAR 0 2
15079: STR
15080: PUSH
15081: LD_STRING ,
15083: STR
15084: PUSH
15085: LD_INT 3
15087: STR
15088: PUSH
15089: LD_STRING ,
15091: STR
15092: PUSH
15093: LD_VAR 0 5
15097: STR
15098: PUSH
15099: LD_STRING )
15101: STR
15102: PPUSH
15103: CALL_OW 559
// ToLua ( setSpecText( & i & , & 4 & , & sib & ) ) ;
15107: LD_STRING setSpecText(
15109: PUSH
15110: LD_VAR 0 2
15114: STR
15115: PUSH
15116: LD_STRING ,
15118: STR
15119: PUSH
15120: LD_INT 4
15122: STR
15123: PUSH
15124: LD_STRING ,
15126: STR
15127: PUSH
15128: LD_VAR 0 6
15132: STR
15133: PUSH
15134: LD_STRING )
15136: STR
15137: PPUSH
15138: CALL_OW 559
// ToLua ( setSpecText( & i & , & 5 & , & people & ) ) ;
15142: LD_STRING setSpecText(
15144: PUSH
15145: LD_VAR 0 2
15149: STR
15150: PUSH
15151: LD_STRING ,
15153: STR
15154: PUSH
15155: LD_INT 5
15157: STR
15158: PUSH
15159: LD_STRING ,
15161: STR
15162: PUSH
15163: LD_VAR 0 7
15167: STR
15168: PUSH
15169: LD_STRING )
15171: STR
15172: PPUSH
15173: CALL_OW 559
// end ; end ;
15177: GO 14793
15179: POP
15180: POP
// end ;
15181: LD_VAR 0 1
15185: RET
// every 20 + 0 0$5 trigger FilterAllUnits ( [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) do
15186: LD_INT 2
15188: PUSH
15189: LD_INT 30
15191: PUSH
15192: LD_INT 0
15194: PUSH
15195: EMPTY
15196: LIST
15197: LIST
15198: PUSH
15199: LD_INT 30
15201: PUSH
15202: LD_INT 1
15204: PUSH
15205: EMPTY
15206: LIST
15207: LIST
15208: PUSH
15209: EMPTY
15210: LIST
15211: LIST
15212: LIST
15213: PPUSH
15214: CALL_OW 69
15218: IFFALSE 15228
15220: GO 15222
15222: DISABLE
// begin enable ;
15223: ENABLE
// UpdateSpectatorBar ;
15224: CALL 14769 0 0
// end ;
15228: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
15229: LD_INT 0
15231: PPUSH
// end ;
15232: LD_VAR 0 12
15236: RET
// export factoryWaypoints , factoryWaypointsDrivers ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
15237: LD_INT 0
15239: PPUSH
15240: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
15241: LD_VAR 0 1
15245: NOT
15246: PUSH
15247: LD_VAR 0 2
15251: PPUSH
15252: LD_VAR 0 3
15256: PPUSH
15257: CALL_OW 488
15261: NOT
15262: OR
15263: PUSH
15264: LD_VAR 0 1
15268: PPUSH
15269: CALL_OW 266
15273: PUSH
15274: LD_INT 3
15276: NONEQUAL
15277: PUSH
15278: LD_VAR 0 1
15282: PPUSH
15283: CALL_OW 247
15287: PUSH
15288: LD_INT 1
15290: EQUAL
15291: NOT
15292: AND
15293: OR
15294: IFFALSE 15298
// exit ;
15296: GO 15580
// if GetType ( factory ) = unit_human then
15298: LD_VAR 0 1
15302: PPUSH
15303: CALL_OW 247
15307: PUSH
15308: LD_INT 1
15310: EQUAL
15311: IFFALSE 15328
// factory := IsInUnit ( factory ) ;
15313: LD_ADDR_VAR 0 1
15317: PUSH
15318: LD_VAR 0 1
15322: PPUSH
15323: CALL_OW 310
15327: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
15328: LD_VAR 0 1
15332: PPUSH
15333: CALL_OW 266
15337: PUSH
15338: LD_INT 3
15340: NONEQUAL
15341: IFFALSE 15345
// exit ;
15343: GO 15580
// for i := 1 to Count ( factoryWaypoints ) do
15345: LD_ADDR_VAR 0 5
15349: PUSH
15350: DOUBLE
15351: LD_INT 1
15353: DEC
15354: ST_TO_ADDR
15355: LD_EXP 58
15359: PPUSH
15360: CALL 23623 0 1
15364: PUSH
15365: FOR_TO
15366: IFFALSE 15528
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
15368: LD_VAR 0 2
15372: PPUSH
15373: LD_VAR 0 3
15377: PPUSH
15378: CALL_OW 428
15382: PUSH
15383: LD_EXP 58
15387: PUSH
15388: LD_VAR 0 5
15392: ARRAY
15393: PUSH
15394: LD_INT 2
15396: ARRAY
15397: EQUAL
15398: IFFALSE 15430
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
15400: LD_ADDR_EXP 58
15404: PUSH
15405: LD_EXP 58
15409: PPUSH
15410: LD_VAR 0 5
15414: PPUSH
15415: CALL_OW 3
15419: ST_TO_ADDR
// UpdateFactoryWaypoints ;
15420: CALL 15585 0 0
// exit ;
15424: POP
15425: POP
15426: GO 15580
// end else
15428: GO 15526
// if factory = factoryWaypoints [ i ] [ 2 ] then
15430: LD_VAR 0 1
15434: PUSH
15435: LD_EXP 58
15439: PUSH
15440: LD_VAR 0 5
15444: ARRAY
15445: PUSH
15446: LD_INT 2
15448: ARRAY
15449: EQUAL
15450: IFFALSE 15526
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
15452: LD_ADDR_EXP 58
15456: PUSH
15457: LD_EXP 58
15461: PPUSH
15462: LD_VAR 0 5
15466: PPUSH
15467: CALL_OW 3
15471: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
15472: LD_ADDR_EXP 58
15476: PUSH
15477: LD_EXP 58
15481: PPUSH
15482: LD_VAR 0 1
15486: PPUSH
15487: CALL_OW 255
15491: PUSH
15492: LD_VAR 0 1
15496: PUSH
15497: LD_VAR 0 2
15501: PUSH
15502: LD_VAR 0 3
15506: PUSH
15507: EMPTY
15508: LIST
15509: LIST
15510: LIST
15511: LIST
15512: PPUSH
15513: CALL 59232 0 2
15517: ST_TO_ADDR
// UpdateFactoryWaypoints ;
15518: CALL 15585 0 0
// exit ;
15522: POP
15523: POP
15524: GO 15580
// end ; end ;
15526: GO 15365
15528: POP
15529: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
15530: LD_ADDR_EXP 58
15534: PUSH
15535: LD_EXP 58
15539: PPUSH
15540: LD_VAR 0 1
15544: PPUSH
15545: CALL_OW 255
15549: PUSH
15550: LD_VAR 0 1
15554: PUSH
15555: LD_VAR 0 2
15559: PUSH
15560: LD_VAR 0 3
15564: PUSH
15565: EMPTY
15566: LIST
15567: LIST
15568: LIST
15569: LIST
15570: PPUSH
15571: CALL 59232 0 2
15575: ST_TO_ADDR
// UpdateFactoryWaypoints ;
15576: CALL 15585 0 0
// end ;
15580: LD_VAR 0 4
15584: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
15585: LD_INT 0
15587: PPUSH
15588: PPUSH
15589: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
15590: LD_STRING resetFactoryWaypoint();
15592: PPUSH
15593: CALL_OW 559
// if factoryWaypoints then
15597: LD_EXP 58
15601: IFFALSE 15722
// begin list := factoryWaypoints ;
15603: LD_ADDR_VAR 0 3
15607: PUSH
15608: LD_EXP 58
15612: ST_TO_ADDR
// for i := 1 to list do
15613: LD_ADDR_VAR 0 2
15617: PUSH
15618: DOUBLE
15619: LD_INT 1
15621: DEC
15622: ST_TO_ADDR
15623: LD_VAR 0 3
15627: PUSH
15628: FOR_TO
15629: IFFALSE 15720
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
15631: LD_STRING setFactoryWaypointXY(
15633: PUSH
15634: LD_VAR 0 3
15638: PUSH
15639: LD_VAR 0 2
15643: ARRAY
15644: PUSH
15645: LD_INT 1
15647: ARRAY
15648: STR
15649: PUSH
15650: LD_STRING ,
15652: STR
15653: PUSH
15654: LD_VAR 0 3
15658: PUSH
15659: LD_VAR 0 2
15663: ARRAY
15664: PUSH
15665: LD_INT 2
15667: ARRAY
15668: STR
15669: PUSH
15670: LD_STRING ,
15672: STR
15673: PUSH
15674: LD_VAR 0 3
15678: PUSH
15679: LD_VAR 0 2
15683: ARRAY
15684: PUSH
15685: LD_INT 3
15687: ARRAY
15688: STR
15689: PUSH
15690: LD_STRING ,
15692: STR
15693: PUSH
15694: LD_VAR 0 3
15698: PUSH
15699: LD_VAR 0 2
15703: ARRAY
15704: PUSH
15705: LD_INT 4
15707: ARRAY
15708: STR
15709: PUSH
15710: LD_STRING )
15712: STR
15713: PPUSH
15714: CALL_OW 559
15718: GO 15628
15720: POP
15721: POP
// end ; end ;
15722: LD_VAR 0 1
15726: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
15727: LD_INT 0
15729: PPUSH
// if HexInfo ( x , y ) = warehouse then
15730: LD_VAR 0 2
15734: PPUSH
15735: LD_VAR 0 3
15739: PPUSH
15740: CALL_OW 428
15744: PUSH
15745: LD_VAR 0 1
15749: EQUAL
15750: IFFALSE 15777
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
15752: LD_ADDR_EXP 60
15756: PUSH
15757: LD_EXP 60
15761: PPUSH
15762: LD_VAR 0 1
15766: PPUSH
15767: LD_INT 0
15769: PPUSH
15770: CALL_OW 1
15774: ST_TO_ADDR
15775: GO 15828
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
15777: LD_ADDR_EXP 60
15781: PUSH
15782: LD_EXP 60
15786: PPUSH
15787: LD_VAR 0 1
15791: PPUSH
15792: LD_VAR 0 1
15796: PPUSH
15797: CALL_OW 255
15801: PUSH
15802: LD_VAR 0 1
15806: PUSH
15807: LD_VAR 0 2
15811: PUSH
15812: LD_VAR 0 3
15816: PUSH
15817: EMPTY
15818: LIST
15819: LIST
15820: LIST
15821: LIST
15822: PPUSH
15823: CALL_OW 1
15827: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
15828: CALL 15837 0 0
// end ;
15832: LD_VAR 0 4
15836: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
15837: LD_INT 0
15839: PPUSH
15840: PPUSH
15841: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
15842: LD_STRING resetWarehouseGatheringPoints();
15844: PPUSH
15845: CALL_OW 559
// if warehouseGatheringPoints then
15849: LD_EXP 60
15853: IFFALSE 15979
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
15855: LD_ADDR_VAR 0 3
15859: PUSH
15860: LD_EXP 60
15864: PPUSH
15865: CALL 63000 0 1
15869: ST_TO_ADDR
// for i := 1 to list do
15870: LD_ADDR_VAR 0 2
15874: PUSH
15875: DOUBLE
15876: LD_INT 1
15878: DEC
15879: ST_TO_ADDR
15880: LD_VAR 0 3
15884: PUSH
15885: FOR_TO
15886: IFFALSE 15977
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
15888: LD_STRING setWarehouseGatheringPointXY(
15890: PUSH
15891: LD_VAR 0 3
15895: PUSH
15896: LD_VAR 0 2
15900: ARRAY
15901: PUSH
15902: LD_INT 1
15904: ARRAY
15905: STR
15906: PUSH
15907: LD_STRING ,
15909: STR
15910: PUSH
15911: LD_VAR 0 3
15915: PUSH
15916: LD_VAR 0 2
15920: ARRAY
15921: PUSH
15922: LD_INT 2
15924: ARRAY
15925: STR
15926: PUSH
15927: LD_STRING ,
15929: STR
15930: PUSH
15931: LD_VAR 0 3
15935: PUSH
15936: LD_VAR 0 2
15940: ARRAY
15941: PUSH
15942: LD_INT 3
15944: ARRAY
15945: STR
15946: PUSH
15947: LD_STRING ,
15949: STR
15950: PUSH
15951: LD_VAR 0 3
15955: PUSH
15956: LD_VAR 0 2
15960: ARRAY
15961: PUSH
15962: LD_INT 4
15964: ARRAY
15965: STR
15966: PUSH
15967: LD_STRING )
15969: STR
15970: PPUSH
15971: CALL_OW 559
15975: GO 15885
15977: POP
15978: POP
// end ; end ;
15979: LD_VAR 0 1
15983: RET
// function ParseMultiDataToLua ( ) ; var i ; begin
15984: LD_INT 0
15986: PPUSH
15987: PPUSH
// if not mpSidePositions then
15988: LD_EXP 16
15992: NOT
15993: IFFALSE 15997
// exit ;
15995: GO 16068
// result :=  ;
15997: LD_ADDR_VAR 0 1
16001: PUSH
16002: LD_STRING 
16004: ST_TO_ADDR
// for i := 1 to 8 do
16005: LD_ADDR_VAR 0 2
16009: PUSH
16010: DOUBLE
16011: LD_INT 1
16013: DEC
16014: ST_TO_ADDR
16015: LD_INT 8
16017: PUSH
16018: FOR_TO
16019: IFFALSE 16049
// begin result := result & mpSidePositions [ i ] & ; ;
16021: LD_ADDR_VAR 0 1
16025: PUSH
16026: LD_VAR 0 1
16030: PUSH
16031: LD_EXP 16
16035: PUSH
16036: LD_VAR 0 2
16040: ARRAY
16041: STR
16042: PUSH
16043: LD_STRING ;
16045: STR
16046: ST_TO_ADDR
// end ;
16047: GO 16018
16049: POP
16050: POP
// ToLua ( setMultiplayerRealPosition(" & result & "); ) ;
16051: LD_STRING setMultiplayerRealPosition("
16053: PUSH
16054: LD_VAR 0 1
16058: STR
16059: PUSH
16060: LD_STRING ");
16062: STR
16063: PPUSH
16064: CALL_OW 559
// end ; end_of_file
16068: LD_VAR 0 1
16072: RET
// export function SOS_UnitDestroyed ( un ) ; begin
16073: LD_INT 0
16075: PPUSH
// ComRadiation ( un ) ;
16076: LD_VAR 0 1
16080: PPUSH
16081: CALL 17142 0 1
// end ;
16085: LD_VAR 0 2
16089: RET
// export function SOS_UnitKamikazed ( un ) ; begin
16090: LD_INT 0
16092: PPUSH
// ComRadiation ( un ) ;
16093: LD_VAR 0 1
16097: PPUSH
16098: CALL 17142 0 1
// end ;
16102: LD_VAR 0 2
16106: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
16107: LD_INT 0
16109: PPUSH
// end ;
16110: LD_VAR 0 4
16114: RET
// export function SOS_Command ( cmd ) ; begin
16115: LD_INT 0
16117: PPUSH
// end ;
16118: LD_VAR 0 2
16122: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
16123: LD_INT 0
16125: PPUSH
// end ;
16126: LD_VAR 0 6
16130: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , driver , hex ; begin
16131: LD_INT 0
16133: PPUSH
16134: PPUSH
16135: PPUSH
16136: PPUSH
// if not vehicle or not factory then
16137: LD_VAR 0 1
16141: NOT
16142: PUSH
16143: LD_VAR 0 2
16147: NOT
16148: OR
16149: IFFALSE 16153
// exit ;
16151: GO 16733
// if not factoryWaypoints then
16153: LD_EXP 58
16157: NOT
16158: IFFALSE 16162
// exit ;
16160: GO 16733
// for i := 1 to Count ( factoryWaypoints ) do
16162: LD_ADDR_VAR 0 4
16166: PUSH
16167: DOUBLE
16168: LD_INT 1
16170: DEC
16171: ST_TO_ADDR
16172: LD_EXP 58
16176: PPUSH
16177: CALL 23623 0 1
16181: PUSH
16182: FOR_TO
16183: IFFALSE 16731
// if factoryWaypoints [ i ] [ 2 ] = factory then
16185: LD_EXP 58
16189: PUSH
16190: LD_VAR 0 4
16194: ARRAY
16195: PUSH
16196: LD_INT 2
16198: ARRAY
16199: PUSH
16200: LD_VAR 0 2
16204: EQUAL
16205: IFFALSE 16729
// begin if GetControl ( vehicle ) = control_manual then
16207: LD_VAR 0 1
16211: PPUSH
16212: CALL_OW 263
16216: PUSH
16217: LD_INT 1
16219: EQUAL
16220: IFFALSE 16582
// begin driver := IsDrivenBy ( vehicle ) ;
16222: LD_ADDR_VAR 0 5
16226: PUSH
16227: LD_VAR 0 1
16231: PPUSH
16232: CALL_OW 311
16236: ST_TO_ADDR
// if driver in factoryWaypointsDrivers or vehicle in factoryWaypointsDrivers then
16237: LD_VAR 0 5
16241: PUSH
16242: LD_EXP 59
16246: IN
16247: PUSH
16248: LD_VAR 0 1
16252: PUSH
16253: LD_EXP 59
16257: IN
16258: OR
16259: IFFALSE 16265
// exit ;
16261: POP
16262: POP
16263: GO 16733
// if not HasTask ( driver ) then
16265: LD_VAR 0 5
16269: PPUSH
16270: CALL_OW 314
16274: NOT
16275: IFFALSE 16580
// begin factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , driver ) ;
16277: LD_ADDR_EXP 59
16281: PUSH
16282: LD_EXP 59
16286: PPUSH
16287: LD_VAR 0 5
16291: PPUSH
16292: CALL 59232 0 2
16296: ST_TO_ADDR
// factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , vehicle ) ;
16297: LD_ADDR_EXP 59
16301: PUSH
16302: LD_EXP 59
16306: PPUSH
16307: LD_VAR 0 1
16311: PPUSH
16312: CALL 59232 0 2
16316: ST_TO_ADDR
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
16317: LD_ADDR_VAR 0 6
16321: PUSH
16322: LD_EXP 58
16326: PUSH
16327: LD_VAR 0 4
16331: ARRAY
16332: PUSH
16333: LD_INT 3
16335: ARRAY
16336: PPUSH
16337: LD_EXP 58
16341: PUSH
16342: LD_VAR 0 4
16346: ARRAY
16347: PUSH
16348: LD_INT 4
16350: ARRAY
16351: PPUSH
16352: CALL_OW 428
16356: ST_TO_ADDR
// if hex then
16357: LD_VAR 0 6
16361: IFFALSE 16379
// ComMoveUnit ( driver , hex ) else
16363: LD_VAR 0 5
16367: PPUSH
16368: LD_VAR 0 6
16372: PPUSH
16373: CALL_OW 112
16377: GO 16463
// if GetDistUnitXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) > 0 then
16379: LD_VAR 0 1
16383: PPUSH
16384: LD_EXP 58
16388: PUSH
16389: LD_VAR 0 4
16393: ARRAY
16394: PUSH
16395: LD_INT 3
16397: ARRAY
16398: PPUSH
16399: LD_EXP 58
16403: PUSH
16404: LD_VAR 0 4
16408: ARRAY
16409: PUSH
16410: LD_INT 4
16412: ARRAY
16413: PPUSH
16414: CALL_OW 297
16418: PUSH
16419: LD_INT 0
16421: GREATER
16422: IFFALSE 16463
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
16424: LD_VAR 0 5
16428: PPUSH
16429: LD_EXP 58
16433: PUSH
16434: LD_VAR 0 4
16438: ARRAY
16439: PUSH
16440: LD_INT 3
16442: ARRAY
16443: PPUSH
16444: LD_EXP 58
16448: PUSH
16449: LD_VAR 0 4
16453: ARRAY
16454: PUSH
16455: LD_INT 4
16457: ARRAY
16458: PPUSH
16459: CALL_OW 111
// AddComExitVehicle ( driver ) ;
16463: LD_VAR 0 5
16467: PPUSH
16468: CALL_OW 181
// if Multiplayer then
16472: LD_OWVAR 4
16476: IFFALSE 16525
// begin repeat wait ( 10 ) ;
16478: LD_INT 10
16480: PPUSH
16481: CALL_OW 67
// until not IsInUnit ( driver ) ;
16485: LD_VAR 0 5
16489: PPUSH
16490: CALL_OW 310
16494: NOT
16495: IFFALSE 16478
// if not HasTask ( driver ) then
16497: LD_VAR 0 5
16501: PPUSH
16502: CALL_OW 314
16506: NOT
16507: IFFALSE 16523
// ComEnterUnit ( driver , factory ) ;
16509: LD_VAR 0 5
16513: PPUSH
16514: LD_VAR 0 2
16518: PPUSH
16519: CALL_OW 120
// end else
16523: GO 16539
// AddComEnterUnit ( driver , factory ) ;
16525: LD_VAR 0 5
16529: PPUSH
16530: LD_VAR 0 2
16534: PPUSH
16535: CALL_OW 180
// wait ( 0 0$1 ) ;
16539: LD_INT 35
16541: PPUSH
16542: CALL_OW 67
// factoryWaypointsDrivers := factoryWaypointsDrivers diff driver ;
16546: LD_ADDR_EXP 59
16550: PUSH
16551: LD_EXP 59
16555: PUSH
16556: LD_VAR 0 5
16560: DIFF
16561: ST_TO_ADDR
// factoryWaypointsDrivers := factoryWaypointsDrivers diff vehicle ;
16562: LD_ADDR_EXP 59
16566: PUSH
16567: LD_EXP 59
16571: PUSH
16572: LD_VAR 0 1
16576: DIFF
16577: ST_TO_ADDR
// break ;
16578: GO 16731
// end ; end else
16580: GO 16729
// if GetControl ( vehicle ) = control_remote then
16582: LD_VAR 0 1
16586: PPUSH
16587: CALL_OW 263
16591: PUSH
16592: LD_INT 2
16594: EQUAL
16595: IFFALSE 16681
// begin wait ( 0 0$2 ) ;
16597: LD_INT 70
16599: PPUSH
16600: CALL_OW 67
// repeat wait ( 10 ) ;
16604: LD_INT 10
16606: PPUSH
16607: CALL_OW 67
// Connect ( vehicle ) ;
16611: LD_VAR 0 1
16615: PPUSH
16616: CALL 29829 0 1
// until IsControledBy ( vehicle ) ;
16620: LD_VAR 0 1
16624: PPUSH
16625: CALL_OW 312
16629: IFFALSE 16604
// wait ( 10 ) ;
16631: LD_INT 10
16633: PPUSH
16634: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
16638: LD_VAR 0 1
16642: PPUSH
16643: LD_EXP 58
16647: PUSH
16648: LD_VAR 0 4
16652: ARRAY
16653: PUSH
16654: LD_INT 3
16656: ARRAY
16657: PPUSH
16658: LD_EXP 58
16662: PUSH
16663: LD_VAR 0 4
16667: ARRAY
16668: PUSH
16669: LD_INT 4
16671: ARRAY
16672: PPUSH
16673: CALL_OW 111
// break ;
16677: GO 16731
// end else
16679: GO 16729
// begin wait ( 0 0$3 ) ;
16681: LD_INT 105
16683: PPUSH
16684: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
16688: LD_VAR 0 1
16692: PPUSH
16693: LD_EXP 58
16697: PUSH
16698: LD_VAR 0 4
16702: ARRAY
16703: PUSH
16704: LD_INT 3
16706: ARRAY
16707: PPUSH
16708: LD_EXP 58
16712: PUSH
16713: LD_VAR 0 4
16717: ARRAY
16718: PUSH
16719: LD_INT 4
16721: ARRAY
16722: PPUSH
16723: CALL_OW 111
// break ;
16727: GO 16731
// end ; end ;
16729: GO 16182
16731: POP
16732: POP
// end ;
16733: LD_VAR 0 3
16737: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
16738: LD_INT 0
16740: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
16741: LD_VAR 0 1
16745: PUSH
16746: LD_INT 250
16748: EQUAL
16749: PUSH
16750: LD_VAR 0 2
16754: PPUSH
16755: CALL_OW 264
16759: PUSH
16760: LD_INT 81
16762: EQUAL
16763: AND
16764: IFFALSE 16785
// MinerPlaceMine ( unit , x , y ) ;
16766: LD_VAR 0 2
16770: PPUSH
16771: LD_VAR 0 4
16775: PPUSH
16776: LD_VAR 0 5
16780: PPUSH
16781: CALL 19877 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
16785: LD_VAR 0 1
16789: PUSH
16790: LD_INT 251
16792: EQUAL
16793: PUSH
16794: LD_VAR 0 2
16798: PPUSH
16799: CALL_OW 264
16803: PUSH
16804: LD_INT 81
16806: EQUAL
16807: AND
16808: IFFALSE 16829
// MinerDetonateMine ( unit , x , y ) ;
16810: LD_VAR 0 2
16814: PPUSH
16815: LD_VAR 0 4
16819: PPUSH
16820: LD_VAR 0 5
16824: PPUSH
16825: CALL 20152 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
16829: LD_VAR 0 1
16833: PUSH
16834: LD_INT 252
16836: EQUAL
16837: PUSH
16838: LD_VAR 0 2
16842: PPUSH
16843: CALL_OW 264
16847: PUSH
16848: LD_INT 81
16850: EQUAL
16851: AND
16852: IFFALSE 16873
// MinerCreateMinefield ( unit , x , y ) ;
16854: LD_VAR 0 2
16858: PPUSH
16859: LD_VAR 0 4
16863: PPUSH
16864: LD_VAR 0 5
16868: PPUSH
16869: CALL 20569 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
16873: LD_VAR 0 1
16877: PUSH
16878: LD_INT 253
16880: EQUAL
16881: PUSH
16882: LD_VAR 0 2
16886: PPUSH
16887: CALL_OW 257
16891: PUSH
16892: LD_INT 5
16894: EQUAL
16895: AND
16896: IFFALSE 16917
// ComBinocular ( unit , x , y ) ;
16898: LD_VAR 0 2
16902: PPUSH
16903: LD_VAR 0 4
16907: PPUSH
16908: LD_VAR 0 5
16912: PPUSH
16913: CALL 20938 0 3
// if selectedUnit then
16917: LD_VAR 0 3
16921: IFFALSE 16977
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
16923: LD_VAR 0 1
16927: PUSH
16928: LD_INT 254
16930: EQUAL
16931: PUSH
16932: LD_VAR 0 2
16936: PPUSH
16937: CALL_OW 264
16941: PUSH
16942: LD_INT 99
16944: EQUAL
16945: AND
16946: PUSH
16947: LD_VAR 0 3
16951: PPUSH
16952: CALL_OW 263
16956: PUSH
16957: LD_INT 3
16959: EQUAL
16960: AND
16961: IFFALSE 16977
// HackDestroyVehicle ( unit , selectedUnit ) ;
16963: LD_VAR 0 2
16967: PPUSH
16968: LD_VAR 0 3
16972: PPUSH
16973: CALL 19241 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
16977: LD_VAR 0 1
16981: PUSH
16982: LD_INT 255
16984: EQUAL
16985: PUSH
16986: LD_VAR 0 2
16990: PPUSH
16991: CALL_OW 264
16995: PUSH
16996: LD_INT 14
16998: PUSH
16999: LD_INT 53
17001: PUSH
17002: EMPTY
17003: LIST
17004: LIST
17005: IN
17006: AND
17007: PUSH
17008: LD_VAR 0 4
17012: PPUSH
17013: LD_VAR 0 5
17017: PPUSH
17018: CALL_OW 488
17022: AND
17023: IFFALSE 17047
// CutTreeXYR ( unit , x , y , 12 ) ;
17025: LD_VAR 0 2
17029: PPUSH
17030: LD_VAR 0 4
17034: PPUSH
17035: LD_VAR 0 5
17039: PPUSH
17040: LD_INT 12
17042: PPUSH
17043: CALL 17238 0 4
// if cmd = 256 then
17047: LD_VAR 0 1
17051: PUSH
17052: LD_INT 256
17054: EQUAL
17055: IFFALSE 17076
// SetFactoryWaypoint ( unit , x , y ) ;
17057: LD_VAR 0 2
17061: PPUSH
17062: LD_VAR 0 4
17066: PPUSH
17067: LD_VAR 0 5
17071: PPUSH
17072: CALL 15237 0 3
// if cmd = 257 then
17076: LD_VAR 0 1
17080: PUSH
17081: LD_INT 257
17083: EQUAL
17084: IFFALSE 17105
// SetWarehouseGatheringPoint ( unit , x , y ) ;
17086: LD_VAR 0 2
17090: PPUSH
17091: LD_VAR 0 4
17095: PPUSH
17096: LD_VAR 0 5
17100: PPUSH
17101: CALL 15727 0 3
// if cmd = 258 then
17105: LD_VAR 0 1
17109: PUSH
17110: LD_INT 258
17112: EQUAL
17113: IFFALSE 17137
// BurnTreeXYR ( unit , x , y , 8 ) ;
17115: LD_VAR 0 2
17119: PPUSH
17120: LD_VAR 0 4
17124: PPUSH
17125: LD_VAR 0 5
17129: PPUSH
17130: LD_INT 8
17132: PPUSH
17133: CALL 17632 0 4
// end ;
17137: LD_VAR 0 6
17141: RET
// export function ComRadiation ( un ) ; var eff ; begin
17142: LD_INT 0
17144: PPUSH
17145: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
17146: LD_VAR 0 1
17150: PPUSH
17151: CALL_OW 264
17155: PUSH
17156: LD_INT 91
17158: NONEQUAL
17159: IFFALSE 17163
// exit ;
17161: GO 17233
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
17163: LD_INT 68
17165: PPUSH
17166: LD_VAR 0 1
17170: PPUSH
17171: CALL_OW 255
17175: PPUSH
17176: CALL_OW 321
17180: PUSH
17181: LD_INT 2
17183: EQUAL
17184: IFFALSE 17196
// eff := 50 else
17186: LD_ADDR_VAR 0 3
17190: PUSH
17191: LD_INT 50
17193: ST_TO_ADDR
17194: GO 17204
// eff := 25 ;
17196: LD_ADDR_VAR 0 3
17200: PUSH
17201: LD_INT 25
17203: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
17204: LD_VAR 0 1
17208: PPUSH
17209: CALL_OW 250
17213: PPUSH
17214: LD_VAR 0 1
17218: PPUSH
17219: CALL_OW 251
17223: PPUSH
17224: LD_VAR 0 3
17228: PPUSH
17229: CALL_OW 495
// end ;
17233: LD_VAR 0 2
17237: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
17238: LD_INT 0
17240: PPUSH
17241: PPUSH
17242: PPUSH
17243: PPUSH
17244: PPUSH
17245: PPUSH
17246: PPUSH
17247: PPUSH
17248: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
17249: LD_VAR 0 1
17253: PPUSH
17254: CALL_OW 302
17258: NOT
17259: PUSH
17260: LD_VAR 0 2
17264: PPUSH
17265: LD_VAR 0 3
17269: PPUSH
17270: CALL_OW 488
17274: NOT
17275: OR
17276: PUSH
17277: LD_VAR 0 4
17281: NOT
17282: OR
17283: IFFALSE 17287
// exit ;
17285: GO 17627
// list := [ ] ;
17287: LD_ADDR_VAR 0 13
17291: PUSH
17292: EMPTY
17293: ST_TO_ADDR
// if x - r < 0 then
17294: LD_VAR 0 2
17298: PUSH
17299: LD_VAR 0 4
17303: MINUS
17304: PUSH
17305: LD_INT 0
17307: LESS
17308: IFFALSE 17320
// min_x := 0 else
17310: LD_ADDR_VAR 0 7
17314: PUSH
17315: LD_INT 0
17317: ST_TO_ADDR
17318: GO 17336
// min_x := x - r ;
17320: LD_ADDR_VAR 0 7
17324: PUSH
17325: LD_VAR 0 2
17329: PUSH
17330: LD_VAR 0 4
17334: MINUS
17335: ST_TO_ADDR
// if y - r < 0 then
17336: LD_VAR 0 3
17340: PUSH
17341: LD_VAR 0 4
17345: MINUS
17346: PUSH
17347: LD_INT 0
17349: LESS
17350: IFFALSE 17362
// min_y := 0 else
17352: LD_ADDR_VAR 0 8
17356: PUSH
17357: LD_INT 0
17359: ST_TO_ADDR
17360: GO 17378
// min_y := y - r ;
17362: LD_ADDR_VAR 0 8
17366: PUSH
17367: LD_VAR 0 3
17371: PUSH
17372: LD_VAR 0 4
17376: MINUS
17377: ST_TO_ADDR
// max_x := x + r ;
17378: LD_ADDR_VAR 0 9
17382: PUSH
17383: LD_VAR 0 2
17387: PUSH
17388: LD_VAR 0 4
17392: PLUS
17393: ST_TO_ADDR
// max_y := y + r ;
17394: LD_ADDR_VAR 0 10
17398: PUSH
17399: LD_VAR 0 3
17403: PUSH
17404: LD_VAR 0 4
17408: PLUS
17409: ST_TO_ADDR
// for _x = min_x to max_x do
17410: LD_ADDR_VAR 0 11
17414: PUSH
17415: DOUBLE
17416: LD_VAR 0 7
17420: DEC
17421: ST_TO_ADDR
17422: LD_VAR 0 9
17426: PUSH
17427: FOR_TO
17428: IFFALSE 17545
// for _y = min_y to max_y do
17430: LD_ADDR_VAR 0 12
17434: PUSH
17435: DOUBLE
17436: LD_VAR 0 8
17440: DEC
17441: ST_TO_ADDR
17442: LD_VAR 0 10
17446: PUSH
17447: FOR_TO
17448: IFFALSE 17541
// begin if not ValidHex ( _x , _y ) then
17450: LD_VAR 0 11
17454: PPUSH
17455: LD_VAR 0 12
17459: PPUSH
17460: CALL_OW 488
17464: NOT
17465: IFFALSE 17469
// continue ;
17467: GO 17447
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
17469: LD_VAR 0 11
17473: PPUSH
17474: LD_VAR 0 12
17478: PPUSH
17479: CALL_OW 351
17483: PUSH
17484: LD_VAR 0 11
17488: PPUSH
17489: LD_VAR 0 12
17493: PPUSH
17494: CALL_OW 554
17498: AND
17499: IFFALSE 17539
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
17501: LD_ADDR_VAR 0 13
17505: PUSH
17506: LD_VAR 0 13
17510: PPUSH
17511: LD_VAR 0 13
17515: PUSH
17516: LD_INT 1
17518: PLUS
17519: PPUSH
17520: LD_VAR 0 11
17524: PUSH
17525: LD_VAR 0 12
17529: PUSH
17530: EMPTY
17531: LIST
17532: LIST
17533: PPUSH
17534: CALL_OW 2
17538: ST_TO_ADDR
// end ;
17539: GO 17447
17541: POP
17542: POP
17543: GO 17427
17545: POP
17546: POP
// if not list then
17547: LD_VAR 0 13
17551: NOT
17552: IFFALSE 17556
// exit ;
17554: GO 17627
// for i in list do
17556: LD_ADDR_VAR 0 6
17560: PUSH
17561: LD_VAR 0 13
17565: PUSH
17566: FOR_IN
17567: IFFALSE 17625
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
17569: LD_VAR 0 1
17573: PPUSH
17574: LD_STRING M
17576: PUSH
17577: LD_VAR 0 6
17581: PUSH
17582: LD_INT 1
17584: ARRAY
17585: PUSH
17586: LD_VAR 0 6
17590: PUSH
17591: LD_INT 2
17593: ARRAY
17594: PUSH
17595: LD_INT 0
17597: PUSH
17598: LD_INT 0
17600: PUSH
17601: LD_INT 0
17603: PUSH
17604: LD_INT 0
17606: PUSH
17607: EMPTY
17608: LIST
17609: LIST
17610: LIST
17611: LIST
17612: LIST
17613: LIST
17614: LIST
17615: PUSH
17616: EMPTY
17617: LIST
17618: PPUSH
17619: CALL_OW 447
17623: GO 17566
17625: POP
17626: POP
// end ;
17627: LD_VAR 0 5
17631: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
17632: LD_INT 0
17634: PPUSH
17635: PPUSH
17636: PPUSH
17637: PPUSH
17638: PPUSH
17639: PPUSH
17640: PPUSH
17641: PPUSH
17642: PPUSH
17643: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
17644: LD_VAR 0 1
17648: PPUSH
17649: CALL_OW 302
17653: NOT
17654: PUSH
17655: LD_VAR 0 2
17659: PPUSH
17660: LD_VAR 0 3
17664: PPUSH
17665: CALL_OW 488
17669: NOT
17670: OR
17671: PUSH
17672: LD_VAR 0 4
17676: NOT
17677: OR
17678: IFFALSE 17682
// exit ;
17680: GO 18195
// list := [ ] ;
17682: LD_ADDR_VAR 0 13
17686: PUSH
17687: EMPTY
17688: ST_TO_ADDR
// if x - r < 0 then
17689: LD_VAR 0 2
17693: PUSH
17694: LD_VAR 0 4
17698: MINUS
17699: PUSH
17700: LD_INT 0
17702: LESS
17703: IFFALSE 17715
// min_x := 0 else
17705: LD_ADDR_VAR 0 7
17709: PUSH
17710: LD_INT 0
17712: ST_TO_ADDR
17713: GO 17731
// min_x := x - r ;
17715: LD_ADDR_VAR 0 7
17719: PUSH
17720: LD_VAR 0 2
17724: PUSH
17725: LD_VAR 0 4
17729: MINUS
17730: ST_TO_ADDR
// if y - r < 0 then
17731: LD_VAR 0 3
17735: PUSH
17736: LD_VAR 0 4
17740: MINUS
17741: PUSH
17742: LD_INT 0
17744: LESS
17745: IFFALSE 17757
// min_y := 0 else
17747: LD_ADDR_VAR 0 8
17751: PUSH
17752: LD_INT 0
17754: ST_TO_ADDR
17755: GO 17773
// min_y := y - r ;
17757: LD_ADDR_VAR 0 8
17761: PUSH
17762: LD_VAR 0 3
17766: PUSH
17767: LD_VAR 0 4
17771: MINUS
17772: ST_TO_ADDR
// max_x := x + r ;
17773: LD_ADDR_VAR 0 9
17777: PUSH
17778: LD_VAR 0 2
17782: PUSH
17783: LD_VAR 0 4
17787: PLUS
17788: ST_TO_ADDR
// max_y := y + r ;
17789: LD_ADDR_VAR 0 10
17793: PUSH
17794: LD_VAR 0 3
17798: PUSH
17799: LD_VAR 0 4
17803: PLUS
17804: ST_TO_ADDR
// for _x = min_x to max_x do
17805: LD_ADDR_VAR 0 11
17809: PUSH
17810: DOUBLE
17811: LD_VAR 0 7
17815: DEC
17816: ST_TO_ADDR
17817: LD_VAR 0 9
17821: PUSH
17822: FOR_TO
17823: IFFALSE 17940
// for _y = min_y to max_y do
17825: LD_ADDR_VAR 0 12
17829: PUSH
17830: DOUBLE
17831: LD_VAR 0 8
17835: DEC
17836: ST_TO_ADDR
17837: LD_VAR 0 10
17841: PUSH
17842: FOR_TO
17843: IFFALSE 17936
// begin if not ValidHex ( _x , _y ) then
17845: LD_VAR 0 11
17849: PPUSH
17850: LD_VAR 0 12
17854: PPUSH
17855: CALL_OW 488
17859: NOT
17860: IFFALSE 17864
// continue ;
17862: GO 17842
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
17864: LD_VAR 0 11
17868: PPUSH
17869: LD_VAR 0 12
17873: PPUSH
17874: CALL_OW 351
17878: PUSH
17879: LD_VAR 0 11
17883: PPUSH
17884: LD_VAR 0 12
17888: PPUSH
17889: CALL_OW 554
17893: AND
17894: IFFALSE 17934
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
17896: LD_ADDR_VAR 0 13
17900: PUSH
17901: LD_VAR 0 13
17905: PPUSH
17906: LD_VAR 0 13
17910: PUSH
17911: LD_INT 1
17913: PLUS
17914: PPUSH
17915: LD_VAR 0 11
17919: PUSH
17920: LD_VAR 0 12
17924: PUSH
17925: EMPTY
17926: LIST
17927: LIST
17928: PPUSH
17929: CALL_OW 2
17933: ST_TO_ADDR
// end ;
17934: GO 17842
17936: POP
17937: POP
17938: GO 17822
17940: POP
17941: POP
// if not list then
17942: LD_VAR 0 13
17946: NOT
17947: IFFALSE 17951
// exit ;
17949: GO 18195
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
17951: LD_ADDR_VAR 0 13
17955: PUSH
17956: LD_VAR 0 1
17960: PPUSH
17961: LD_VAR 0 13
17965: PPUSH
17966: LD_INT 1
17968: PPUSH
17969: LD_INT 1
17971: PPUSH
17972: CALL 26971 0 4
17976: ST_TO_ADDR
// ComStop ( flame ) ;
17977: LD_VAR 0 1
17981: PPUSH
17982: CALL_OW 141
// for i in list do
17986: LD_ADDR_VAR 0 6
17990: PUSH
17991: LD_VAR 0 13
17995: PUSH
17996: FOR_IN
17997: IFFALSE 18028
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
17999: LD_VAR 0 1
18003: PPUSH
18004: LD_VAR 0 6
18008: PUSH
18009: LD_INT 1
18011: ARRAY
18012: PPUSH
18013: LD_VAR 0 6
18017: PUSH
18018: LD_INT 2
18020: ARRAY
18021: PPUSH
18022: CALL_OW 176
18026: GO 17996
18028: POP
18029: POP
// repeat wait ( 0 0$1 ) ;
18030: LD_INT 35
18032: PPUSH
18033: CALL_OW 67
// task := GetTaskList ( flame ) ;
18037: LD_ADDR_VAR 0 14
18041: PUSH
18042: LD_VAR 0 1
18046: PPUSH
18047: CALL_OW 437
18051: ST_TO_ADDR
// if not task then
18052: LD_VAR 0 14
18056: NOT
18057: IFFALSE 18061
// exit ;
18059: GO 18195
// if task [ 1 ] [ 1 ] <> | then
18061: LD_VAR 0 14
18065: PUSH
18066: LD_INT 1
18068: ARRAY
18069: PUSH
18070: LD_INT 1
18072: ARRAY
18073: PUSH
18074: LD_STRING |
18076: NONEQUAL
18077: IFFALSE 18081
// exit ;
18079: GO 18195
// _x := task [ 1 ] [ 2 ] ;
18081: LD_ADDR_VAR 0 11
18085: PUSH
18086: LD_VAR 0 14
18090: PUSH
18091: LD_INT 1
18093: ARRAY
18094: PUSH
18095: LD_INT 2
18097: ARRAY
18098: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
18099: LD_ADDR_VAR 0 12
18103: PUSH
18104: LD_VAR 0 14
18108: PUSH
18109: LD_INT 1
18111: ARRAY
18112: PUSH
18113: LD_INT 3
18115: ARRAY
18116: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
18117: LD_VAR 0 11
18121: PPUSH
18122: LD_VAR 0 12
18126: PPUSH
18127: CALL_OW 351
18131: NOT
18132: PUSH
18133: LD_VAR 0 11
18137: PPUSH
18138: LD_VAR 0 12
18142: PPUSH
18143: CALL_OW 554
18147: NOT
18148: OR
18149: IFFALSE 18183
// begin task := Delete ( task , 1 ) ;
18151: LD_ADDR_VAR 0 14
18155: PUSH
18156: LD_VAR 0 14
18160: PPUSH
18161: LD_INT 1
18163: PPUSH
18164: CALL_OW 3
18168: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
18169: LD_VAR 0 1
18173: PPUSH
18174: LD_VAR 0 14
18178: PPUSH
18179: CALL_OW 446
// end ; until not HasTask ( flame ) ;
18183: LD_VAR 0 1
18187: PPUSH
18188: CALL_OW 314
18192: NOT
18193: IFFALSE 18030
// end ;
18195: LD_VAR 0 5
18199: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
18200: LD_EXP 62
18204: NOT
18205: IFFALSE 18255
18207: GO 18209
18209: DISABLE
// begin initHack := true ;
18210: LD_ADDR_EXP 62
18214: PUSH
18215: LD_INT 1
18217: ST_TO_ADDR
// hackTanks := [ ] ;
18218: LD_ADDR_EXP 63
18222: PUSH
18223: EMPTY
18224: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
18225: LD_ADDR_EXP 64
18229: PUSH
18230: EMPTY
18231: ST_TO_ADDR
// hackLimit := 3 ;
18232: LD_ADDR_EXP 65
18236: PUSH
18237: LD_INT 3
18239: ST_TO_ADDR
// hackDist := 12 ;
18240: LD_ADDR_EXP 66
18244: PUSH
18245: LD_INT 12
18247: ST_TO_ADDR
// hackCounter := [ ] ;
18248: LD_ADDR_EXP 67
18252: PUSH
18253: EMPTY
18254: ST_TO_ADDR
// end ;
18255: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
18256: LD_EXP 62
18260: PUSH
18261: LD_INT 34
18263: PUSH
18264: LD_INT 99
18266: PUSH
18267: EMPTY
18268: LIST
18269: LIST
18270: PPUSH
18271: CALL_OW 69
18275: AND
18276: IFFALSE 18529
18278: GO 18280
18280: DISABLE
18281: LD_INT 0
18283: PPUSH
18284: PPUSH
// begin enable ;
18285: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
18286: LD_ADDR_VAR 0 1
18290: PUSH
18291: LD_INT 34
18293: PUSH
18294: LD_INT 99
18296: PUSH
18297: EMPTY
18298: LIST
18299: LIST
18300: PPUSH
18301: CALL_OW 69
18305: PUSH
18306: FOR_IN
18307: IFFALSE 18527
// begin if not i in hackTanks then
18309: LD_VAR 0 1
18313: PUSH
18314: LD_EXP 63
18318: IN
18319: NOT
18320: IFFALSE 18403
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
18322: LD_ADDR_EXP 63
18326: PUSH
18327: LD_EXP 63
18331: PPUSH
18332: LD_EXP 63
18336: PUSH
18337: LD_INT 1
18339: PLUS
18340: PPUSH
18341: LD_VAR 0 1
18345: PPUSH
18346: CALL_OW 1
18350: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
18351: LD_ADDR_EXP 64
18355: PUSH
18356: LD_EXP 64
18360: PPUSH
18361: LD_EXP 64
18365: PUSH
18366: LD_INT 1
18368: PLUS
18369: PPUSH
18370: EMPTY
18371: PPUSH
18372: CALL_OW 1
18376: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
18377: LD_ADDR_EXP 67
18381: PUSH
18382: LD_EXP 67
18386: PPUSH
18387: LD_EXP 67
18391: PUSH
18392: LD_INT 1
18394: PLUS
18395: PPUSH
18396: EMPTY
18397: PPUSH
18398: CALL_OW 1
18402: ST_TO_ADDR
// end ; if not IsOk ( i ) then
18403: LD_VAR 0 1
18407: PPUSH
18408: CALL_OW 302
18412: NOT
18413: IFFALSE 18426
// begin HackUnlinkAll ( i ) ;
18415: LD_VAR 0 1
18419: PPUSH
18420: CALL 18532 0 1
// continue ;
18424: GO 18306
// end ; HackCheckCapturedStatus ( i ) ;
18426: LD_VAR 0 1
18430: PPUSH
18431: CALL 18975 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
18435: LD_ADDR_VAR 0 2
18439: PUSH
18440: LD_INT 81
18442: PUSH
18443: LD_VAR 0 1
18447: PPUSH
18448: CALL_OW 255
18452: PUSH
18453: EMPTY
18454: LIST
18455: LIST
18456: PUSH
18457: LD_INT 33
18459: PUSH
18460: LD_INT 3
18462: PUSH
18463: EMPTY
18464: LIST
18465: LIST
18466: PUSH
18467: LD_INT 91
18469: PUSH
18470: LD_VAR 0 1
18474: PUSH
18475: LD_EXP 66
18479: PUSH
18480: EMPTY
18481: LIST
18482: LIST
18483: LIST
18484: PUSH
18485: LD_INT 50
18487: PUSH
18488: EMPTY
18489: LIST
18490: PUSH
18491: EMPTY
18492: LIST
18493: LIST
18494: LIST
18495: LIST
18496: PPUSH
18497: CALL_OW 69
18501: ST_TO_ADDR
// if not tmp then
18502: LD_VAR 0 2
18506: NOT
18507: IFFALSE 18511
// continue ;
18509: GO 18306
// HackLink ( i , tmp ) ;
18511: LD_VAR 0 1
18515: PPUSH
18516: LD_VAR 0 2
18520: PPUSH
18521: CALL 18668 0 2
// end ;
18525: GO 18306
18527: POP
18528: POP
// end ;
18529: PPOPN 2
18531: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
18532: LD_INT 0
18534: PPUSH
18535: PPUSH
18536: PPUSH
// if not hack in hackTanks then
18537: LD_VAR 0 1
18541: PUSH
18542: LD_EXP 63
18546: IN
18547: NOT
18548: IFFALSE 18552
// exit ;
18550: GO 18663
// index := GetElementIndex ( hackTanks , hack ) ;
18552: LD_ADDR_VAR 0 4
18556: PUSH
18557: LD_EXP 63
18561: PPUSH
18562: LD_VAR 0 1
18566: PPUSH
18567: CALL 26268 0 2
18571: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
18572: LD_EXP 64
18576: PUSH
18577: LD_VAR 0 4
18581: ARRAY
18582: IFFALSE 18663
// begin for i in hackTanksCaptured [ index ] do
18584: LD_ADDR_VAR 0 3
18588: PUSH
18589: LD_EXP 64
18593: PUSH
18594: LD_VAR 0 4
18598: ARRAY
18599: PUSH
18600: FOR_IN
18601: IFFALSE 18627
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
18603: LD_VAR 0 3
18607: PUSH
18608: LD_INT 1
18610: ARRAY
18611: PPUSH
18612: LD_VAR 0 3
18616: PUSH
18617: LD_INT 2
18619: ARRAY
18620: PPUSH
18621: CALL_OW 235
18625: GO 18600
18627: POP
18628: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
18629: LD_ADDR_EXP 64
18633: PUSH
18634: LD_EXP 64
18638: PPUSH
18639: LD_VAR 0 4
18643: PPUSH
18644: EMPTY
18645: PPUSH
18646: CALL_OW 1
18650: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
18651: LD_VAR 0 1
18655: PPUSH
18656: LD_INT 0
18658: PPUSH
18659: CALL_OW 505
// end ; end ;
18663: LD_VAR 0 2
18667: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
18668: LD_INT 0
18670: PPUSH
18671: PPUSH
18672: PPUSH
// if not hack in hackTanks or not vehicles then
18673: LD_VAR 0 1
18677: PUSH
18678: LD_EXP 63
18682: IN
18683: NOT
18684: PUSH
18685: LD_VAR 0 2
18689: NOT
18690: OR
18691: IFFALSE 18695
// exit ;
18693: GO 18970
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
18695: LD_ADDR_VAR 0 2
18699: PUSH
18700: LD_VAR 0 1
18704: PPUSH
18705: LD_VAR 0 2
18709: PPUSH
18710: LD_INT 1
18712: PPUSH
18713: LD_INT 1
18715: PPUSH
18716: CALL 26918 0 4
18720: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
18721: LD_ADDR_VAR 0 5
18725: PUSH
18726: LD_EXP 63
18730: PPUSH
18731: LD_VAR 0 1
18735: PPUSH
18736: CALL 26268 0 2
18740: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
18741: LD_EXP 64
18745: PUSH
18746: LD_VAR 0 5
18750: ARRAY
18751: PUSH
18752: LD_EXP 65
18756: LESS
18757: IFFALSE 18946
// begin for i := 1 to vehicles do
18759: LD_ADDR_VAR 0 4
18763: PUSH
18764: DOUBLE
18765: LD_INT 1
18767: DEC
18768: ST_TO_ADDR
18769: LD_VAR 0 2
18773: PUSH
18774: FOR_TO
18775: IFFALSE 18944
// begin if hackTanksCaptured [ index ] = hackLimit then
18777: LD_EXP 64
18781: PUSH
18782: LD_VAR 0 5
18786: ARRAY
18787: PUSH
18788: LD_EXP 65
18792: EQUAL
18793: IFFALSE 18797
// break ;
18795: GO 18944
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
18797: LD_ADDR_EXP 67
18801: PUSH
18802: LD_EXP 67
18806: PPUSH
18807: LD_VAR 0 5
18811: PPUSH
18812: LD_EXP 67
18816: PUSH
18817: LD_VAR 0 5
18821: ARRAY
18822: PUSH
18823: LD_INT 1
18825: PLUS
18826: PPUSH
18827: CALL_OW 1
18831: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
18832: LD_ADDR_EXP 64
18836: PUSH
18837: LD_EXP 64
18841: PPUSH
18842: LD_VAR 0 5
18846: PUSH
18847: LD_EXP 64
18851: PUSH
18852: LD_VAR 0 5
18856: ARRAY
18857: PUSH
18858: LD_INT 1
18860: PLUS
18861: PUSH
18862: EMPTY
18863: LIST
18864: LIST
18865: PPUSH
18866: LD_VAR 0 2
18870: PUSH
18871: LD_VAR 0 4
18875: ARRAY
18876: PUSH
18877: LD_VAR 0 2
18881: PUSH
18882: LD_VAR 0 4
18886: ARRAY
18887: PPUSH
18888: CALL_OW 255
18892: PUSH
18893: EMPTY
18894: LIST
18895: LIST
18896: PPUSH
18897: CALL 26483 0 3
18901: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
18902: LD_VAR 0 2
18906: PUSH
18907: LD_VAR 0 4
18911: ARRAY
18912: PPUSH
18913: LD_VAR 0 1
18917: PPUSH
18918: CALL_OW 255
18922: PPUSH
18923: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
18927: LD_VAR 0 2
18931: PUSH
18932: LD_VAR 0 4
18936: ARRAY
18937: PPUSH
18938: CALL_OW 141
// end ;
18942: GO 18774
18944: POP
18945: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
18946: LD_VAR 0 1
18950: PPUSH
18951: LD_EXP 64
18955: PUSH
18956: LD_VAR 0 5
18960: ARRAY
18961: PUSH
18962: LD_INT 0
18964: PLUS
18965: PPUSH
18966: CALL_OW 505
// end ;
18970: LD_VAR 0 3
18974: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
18975: LD_INT 0
18977: PPUSH
18978: PPUSH
18979: PPUSH
18980: PPUSH
// if not hack in hackTanks then
18981: LD_VAR 0 1
18985: PUSH
18986: LD_EXP 63
18990: IN
18991: NOT
18992: IFFALSE 18996
// exit ;
18994: GO 19236
// index := GetElementIndex ( hackTanks , hack ) ;
18996: LD_ADDR_VAR 0 4
19000: PUSH
19001: LD_EXP 63
19005: PPUSH
19006: LD_VAR 0 1
19010: PPUSH
19011: CALL 26268 0 2
19015: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
19016: LD_ADDR_VAR 0 3
19020: PUSH
19021: DOUBLE
19022: LD_EXP 64
19026: PUSH
19027: LD_VAR 0 4
19031: ARRAY
19032: INC
19033: ST_TO_ADDR
19034: LD_INT 1
19036: PUSH
19037: FOR_DOWNTO
19038: IFFALSE 19210
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
19040: LD_ADDR_VAR 0 5
19044: PUSH
19045: LD_EXP 64
19049: PUSH
19050: LD_VAR 0 4
19054: ARRAY
19055: PUSH
19056: LD_VAR 0 3
19060: ARRAY
19061: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
19062: LD_VAR 0 5
19066: PUSH
19067: LD_INT 1
19069: ARRAY
19070: PPUSH
19071: CALL_OW 302
19075: NOT
19076: PUSH
19077: LD_VAR 0 5
19081: PUSH
19082: LD_INT 1
19084: ARRAY
19085: PPUSH
19086: CALL_OW 255
19090: PUSH
19091: LD_VAR 0 1
19095: PPUSH
19096: CALL_OW 255
19100: NONEQUAL
19101: OR
19102: IFFALSE 19208
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
19104: LD_VAR 0 5
19108: PUSH
19109: LD_INT 1
19111: ARRAY
19112: PPUSH
19113: CALL_OW 305
19117: PUSH
19118: LD_VAR 0 5
19122: PUSH
19123: LD_INT 1
19125: ARRAY
19126: PPUSH
19127: CALL_OW 255
19131: PUSH
19132: LD_VAR 0 1
19136: PPUSH
19137: CALL_OW 255
19141: EQUAL
19142: AND
19143: IFFALSE 19167
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
19145: LD_VAR 0 5
19149: PUSH
19150: LD_INT 1
19152: ARRAY
19153: PPUSH
19154: LD_VAR 0 5
19158: PUSH
19159: LD_INT 2
19161: ARRAY
19162: PPUSH
19163: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
19167: LD_ADDR_EXP 64
19171: PUSH
19172: LD_EXP 64
19176: PPUSH
19177: LD_VAR 0 4
19181: PPUSH
19182: LD_EXP 64
19186: PUSH
19187: LD_VAR 0 4
19191: ARRAY
19192: PPUSH
19193: LD_VAR 0 3
19197: PPUSH
19198: CALL_OW 3
19202: PPUSH
19203: CALL_OW 1
19207: ST_TO_ADDR
// end ; end ;
19208: GO 19037
19210: POP
19211: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
19212: LD_VAR 0 1
19216: PPUSH
19217: LD_EXP 64
19221: PUSH
19222: LD_VAR 0 4
19226: ARRAY
19227: PUSH
19228: LD_INT 0
19230: PLUS
19231: PPUSH
19232: CALL_OW 505
// end ;
19236: LD_VAR 0 2
19240: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
19241: LD_INT 0
19243: PPUSH
19244: PPUSH
19245: PPUSH
19246: PPUSH
// if not hack in hackTanks then
19247: LD_VAR 0 1
19251: PUSH
19252: LD_EXP 63
19256: IN
19257: NOT
19258: IFFALSE 19262
// exit ;
19260: GO 19347
// index := GetElementIndex ( hackTanks , hack ) ;
19262: LD_ADDR_VAR 0 5
19266: PUSH
19267: LD_EXP 63
19271: PPUSH
19272: LD_VAR 0 1
19276: PPUSH
19277: CALL 26268 0 2
19281: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
19282: LD_ADDR_VAR 0 4
19286: PUSH
19287: DOUBLE
19288: LD_INT 1
19290: DEC
19291: ST_TO_ADDR
19292: LD_EXP 64
19296: PUSH
19297: LD_VAR 0 5
19301: ARRAY
19302: PUSH
19303: FOR_TO
19304: IFFALSE 19345
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
19306: LD_EXP 64
19310: PUSH
19311: LD_VAR 0 5
19315: ARRAY
19316: PUSH
19317: LD_VAR 0 4
19321: ARRAY
19322: PUSH
19323: LD_INT 1
19325: ARRAY
19326: PUSH
19327: LD_VAR 0 2
19331: EQUAL
19332: IFFALSE 19343
// KillUnit ( vehicle ) ;
19334: LD_VAR 0 2
19338: PPUSH
19339: CALL_OW 66
19343: GO 19303
19345: POP
19346: POP
// end ;
19347: LD_VAR 0 3
19351: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
19352: LD_EXP 68
19356: NOT
19357: IFFALSE 19392
19359: GO 19361
19361: DISABLE
// begin initMiner := true ;
19362: LD_ADDR_EXP 68
19366: PUSH
19367: LD_INT 1
19369: ST_TO_ADDR
// minersList := [ ] ;
19370: LD_ADDR_EXP 69
19374: PUSH
19375: EMPTY
19376: ST_TO_ADDR
// minerMinesList := [ ] ;
19377: LD_ADDR_EXP 70
19381: PUSH
19382: EMPTY
19383: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
19384: LD_ADDR_EXP 71
19388: PUSH
19389: LD_INT 5
19391: ST_TO_ADDR
// end ;
19392: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
19393: LD_EXP 68
19397: PUSH
19398: LD_INT 34
19400: PUSH
19401: LD_INT 81
19403: PUSH
19404: EMPTY
19405: LIST
19406: LIST
19407: PPUSH
19408: CALL_OW 69
19412: AND
19413: IFFALSE 19874
19415: GO 19417
19417: DISABLE
19418: LD_INT 0
19420: PPUSH
19421: PPUSH
19422: PPUSH
19423: PPUSH
// begin enable ;
19424: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
19425: LD_ADDR_VAR 0 1
19429: PUSH
19430: LD_INT 34
19432: PUSH
19433: LD_INT 81
19435: PUSH
19436: EMPTY
19437: LIST
19438: LIST
19439: PPUSH
19440: CALL_OW 69
19444: PUSH
19445: FOR_IN
19446: IFFALSE 19518
// begin if not i in minersList then
19448: LD_VAR 0 1
19452: PUSH
19453: LD_EXP 69
19457: IN
19458: NOT
19459: IFFALSE 19516
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
19461: LD_ADDR_EXP 69
19465: PUSH
19466: LD_EXP 69
19470: PPUSH
19471: LD_EXP 69
19475: PUSH
19476: LD_INT 1
19478: PLUS
19479: PPUSH
19480: LD_VAR 0 1
19484: PPUSH
19485: CALL_OW 1
19489: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
19490: LD_ADDR_EXP 70
19494: PUSH
19495: LD_EXP 70
19499: PPUSH
19500: LD_EXP 70
19504: PUSH
19505: LD_INT 1
19507: PLUS
19508: PPUSH
19509: EMPTY
19510: PPUSH
19511: CALL_OW 1
19515: ST_TO_ADDR
// end end ;
19516: GO 19445
19518: POP
19519: POP
// for i := minerMinesList downto 1 do
19520: LD_ADDR_VAR 0 1
19524: PUSH
19525: DOUBLE
19526: LD_EXP 70
19530: INC
19531: ST_TO_ADDR
19532: LD_INT 1
19534: PUSH
19535: FOR_DOWNTO
19536: IFFALSE 19872
// begin if IsLive ( minersList [ i ] ) then
19538: LD_EXP 69
19542: PUSH
19543: LD_VAR 0 1
19547: ARRAY
19548: PPUSH
19549: CALL_OW 300
19553: IFFALSE 19581
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
19555: LD_EXP 69
19559: PUSH
19560: LD_VAR 0 1
19564: ARRAY
19565: PPUSH
19566: LD_EXP 70
19570: PUSH
19571: LD_VAR 0 1
19575: ARRAY
19576: PPUSH
19577: CALL_OW 505
// if not minerMinesList [ i ] then
19581: LD_EXP 70
19585: PUSH
19586: LD_VAR 0 1
19590: ARRAY
19591: NOT
19592: IFFALSE 19596
// continue ;
19594: GO 19535
// for j := minerMinesList [ i ] downto 1 do
19596: LD_ADDR_VAR 0 2
19600: PUSH
19601: DOUBLE
19602: LD_EXP 70
19606: PUSH
19607: LD_VAR 0 1
19611: ARRAY
19612: INC
19613: ST_TO_ADDR
19614: LD_INT 1
19616: PUSH
19617: FOR_DOWNTO
19618: IFFALSE 19868
// begin side := GetSide ( minersList [ i ] ) ;
19620: LD_ADDR_VAR 0 3
19624: PUSH
19625: LD_EXP 69
19629: PUSH
19630: LD_VAR 0 1
19634: ARRAY
19635: PPUSH
19636: CALL_OW 255
19640: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
19641: LD_ADDR_VAR 0 4
19645: PUSH
19646: LD_EXP 70
19650: PUSH
19651: LD_VAR 0 1
19655: ARRAY
19656: PUSH
19657: LD_VAR 0 2
19661: ARRAY
19662: PUSH
19663: LD_INT 1
19665: ARRAY
19666: PPUSH
19667: LD_EXP 70
19671: PUSH
19672: LD_VAR 0 1
19676: ARRAY
19677: PUSH
19678: LD_VAR 0 2
19682: ARRAY
19683: PUSH
19684: LD_INT 2
19686: ARRAY
19687: PPUSH
19688: CALL_OW 428
19692: ST_TO_ADDR
// if not tmp then
19693: LD_VAR 0 4
19697: NOT
19698: IFFALSE 19702
// continue ;
19700: GO 19617
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
19702: LD_VAR 0 4
19706: PUSH
19707: LD_INT 81
19709: PUSH
19710: LD_VAR 0 3
19714: PUSH
19715: EMPTY
19716: LIST
19717: LIST
19718: PPUSH
19719: CALL_OW 69
19723: IN
19724: PUSH
19725: LD_EXP 70
19729: PUSH
19730: LD_VAR 0 1
19734: ARRAY
19735: PUSH
19736: LD_VAR 0 2
19740: ARRAY
19741: PUSH
19742: LD_INT 1
19744: ARRAY
19745: PPUSH
19746: LD_EXP 70
19750: PUSH
19751: LD_VAR 0 1
19755: ARRAY
19756: PUSH
19757: LD_VAR 0 2
19761: ARRAY
19762: PUSH
19763: LD_INT 2
19765: ARRAY
19766: PPUSH
19767: CALL_OW 458
19771: AND
19772: IFFALSE 19866
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
19774: LD_EXP 70
19778: PUSH
19779: LD_VAR 0 1
19783: ARRAY
19784: PUSH
19785: LD_VAR 0 2
19789: ARRAY
19790: PUSH
19791: LD_INT 1
19793: ARRAY
19794: PPUSH
19795: LD_EXP 70
19799: PUSH
19800: LD_VAR 0 1
19804: ARRAY
19805: PUSH
19806: LD_VAR 0 2
19810: ARRAY
19811: PUSH
19812: LD_INT 2
19814: ARRAY
19815: PPUSH
19816: LD_VAR 0 3
19820: PPUSH
19821: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
19825: LD_ADDR_EXP 70
19829: PUSH
19830: LD_EXP 70
19834: PPUSH
19835: LD_VAR 0 1
19839: PPUSH
19840: LD_EXP 70
19844: PUSH
19845: LD_VAR 0 1
19849: ARRAY
19850: PPUSH
19851: LD_VAR 0 2
19855: PPUSH
19856: CALL_OW 3
19860: PPUSH
19861: CALL_OW 1
19865: ST_TO_ADDR
// end ; end ;
19866: GO 19617
19868: POP
19869: POP
// end ;
19870: GO 19535
19872: POP
19873: POP
// end ;
19874: PPOPN 4
19876: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
19877: LD_INT 0
19879: PPUSH
19880: PPUSH
// result := false ;
19881: LD_ADDR_VAR 0 4
19885: PUSH
19886: LD_INT 0
19888: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
19889: LD_VAR 0 1
19893: PPUSH
19894: CALL_OW 264
19898: PUSH
19899: LD_INT 81
19901: EQUAL
19902: NOT
19903: IFFALSE 19907
// exit ;
19905: GO 20147
// index := GetElementIndex ( minersList , unit ) ;
19907: LD_ADDR_VAR 0 5
19911: PUSH
19912: LD_EXP 69
19916: PPUSH
19917: LD_VAR 0 1
19921: PPUSH
19922: CALL 26268 0 2
19926: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
19927: LD_EXP 70
19931: PUSH
19932: LD_VAR 0 5
19936: ARRAY
19937: PUSH
19938: LD_EXP 71
19942: GREATEREQUAL
19943: IFFALSE 19947
// exit ;
19945: GO 20147
// ComMoveXY ( unit , x , y ) ;
19947: LD_VAR 0 1
19951: PPUSH
19952: LD_VAR 0 2
19956: PPUSH
19957: LD_VAR 0 3
19961: PPUSH
19962: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
19966: LD_INT 35
19968: PPUSH
19969: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
19973: LD_VAR 0 1
19977: PPUSH
19978: LD_VAR 0 2
19982: PPUSH
19983: LD_VAR 0 3
19987: PPUSH
19988: CALL 58029 0 3
19992: NOT
19993: PUSH
19994: LD_VAR 0 1
19998: PPUSH
19999: CALL_OW 314
20003: AND
20004: IFFALSE 20008
// exit ;
20006: GO 20147
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
20008: LD_VAR 0 2
20012: PPUSH
20013: LD_VAR 0 3
20017: PPUSH
20018: CALL_OW 428
20022: PUSH
20023: LD_VAR 0 1
20027: EQUAL
20028: PUSH
20029: LD_VAR 0 1
20033: PPUSH
20034: CALL_OW 314
20038: NOT
20039: AND
20040: IFFALSE 19966
// PlaySoundXY ( x , y , PlantMine ) ;
20042: LD_VAR 0 2
20046: PPUSH
20047: LD_VAR 0 3
20051: PPUSH
20052: LD_STRING PlantMine
20054: PPUSH
20055: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
20059: LD_VAR 0 2
20063: PPUSH
20064: LD_VAR 0 3
20068: PPUSH
20069: LD_VAR 0 1
20073: PPUSH
20074: CALL_OW 255
20078: PPUSH
20079: LD_INT 0
20081: PPUSH
20082: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
20086: LD_ADDR_EXP 70
20090: PUSH
20091: LD_EXP 70
20095: PPUSH
20096: LD_VAR 0 5
20100: PUSH
20101: LD_EXP 70
20105: PUSH
20106: LD_VAR 0 5
20110: ARRAY
20111: PUSH
20112: LD_INT 1
20114: PLUS
20115: PUSH
20116: EMPTY
20117: LIST
20118: LIST
20119: PPUSH
20120: LD_VAR 0 2
20124: PUSH
20125: LD_VAR 0 3
20129: PUSH
20130: EMPTY
20131: LIST
20132: LIST
20133: PPUSH
20134: CALL 26483 0 3
20138: ST_TO_ADDR
// result := true ;
20139: LD_ADDR_VAR 0 4
20143: PUSH
20144: LD_INT 1
20146: ST_TO_ADDR
// end ;
20147: LD_VAR 0 4
20151: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
20152: LD_INT 0
20154: PPUSH
20155: PPUSH
20156: PPUSH
// if not unit in minersList then
20157: LD_VAR 0 1
20161: PUSH
20162: LD_EXP 69
20166: IN
20167: NOT
20168: IFFALSE 20172
// exit ;
20170: GO 20564
// index := GetElementIndex ( minersList , unit ) ;
20172: LD_ADDR_VAR 0 6
20176: PUSH
20177: LD_EXP 69
20181: PPUSH
20182: LD_VAR 0 1
20186: PPUSH
20187: CALL 26268 0 2
20191: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
20192: LD_ADDR_VAR 0 5
20196: PUSH
20197: DOUBLE
20198: LD_EXP 70
20202: PUSH
20203: LD_VAR 0 6
20207: ARRAY
20208: INC
20209: ST_TO_ADDR
20210: LD_INT 1
20212: PUSH
20213: FOR_DOWNTO
20214: IFFALSE 20375
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
20216: LD_EXP 70
20220: PUSH
20221: LD_VAR 0 6
20225: ARRAY
20226: PUSH
20227: LD_VAR 0 5
20231: ARRAY
20232: PUSH
20233: LD_INT 1
20235: ARRAY
20236: PUSH
20237: LD_VAR 0 2
20241: EQUAL
20242: PUSH
20243: LD_EXP 70
20247: PUSH
20248: LD_VAR 0 6
20252: ARRAY
20253: PUSH
20254: LD_VAR 0 5
20258: ARRAY
20259: PUSH
20260: LD_INT 2
20262: ARRAY
20263: PUSH
20264: LD_VAR 0 3
20268: EQUAL
20269: AND
20270: IFFALSE 20373
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
20272: LD_EXP 70
20276: PUSH
20277: LD_VAR 0 6
20281: ARRAY
20282: PUSH
20283: LD_VAR 0 5
20287: ARRAY
20288: PUSH
20289: LD_INT 1
20291: ARRAY
20292: PPUSH
20293: LD_EXP 70
20297: PUSH
20298: LD_VAR 0 6
20302: ARRAY
20303: PUSH
20304: LD_VAR 0 5
20308: ARRAY
20309: PUSH
20310: LD_INT 2
20312: ARRAY
20313: PPUSH
20314: LD_VAR 0 1
20318: PPUSH
20319: CALL_OW 255
20323: PPUSH
20324: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
20328: LD_ADDR_EXP 70
20332: PUSH
20333: LD_EXP 70
20337: PPUSH
20338: LD_VAR 0 6
20342: PPUSH
20343: LD_EXP 70
20347: PUSH
20348: LD_VAR 0 6
20352: ARRAY
20353: PPUSH
20354: LD_VAR 0 5
20358: PPUSH
20359: CALL_OW 3
20363: PPUSH
20364: CALL_OW 1
20368: ST_TO_ADDR
// exit ;
20369: POP
20370: POP
20371: GO 20564
// end ; end ;
20373: GO 20213
20375: POP
20376: POP
// for i := minerMinesList [ index ] downto 1 do
20377: LD_ADDR_VAR 0 5
20381: PUSH
20382: DOUBLE
20383: LD_EXP 70
20387: PUSH
20388: LD_VAR 0 6
20392: ARRAY
20393: INC
20394: ST_TO_ADDR
20395: LD_INT 1
20397: PUSH
20398: FOR_DOWNTO
20399: IFFALSE 20562
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
20401: LD_EXP 70
20405: PUSH
20406: LD_VAR 0 6
20410: ARRAY
20411: PUSH
20412: LD_VAR 0 5
20416: ARRAY
20417: PUSH
20418: LD_INT 1
20420: ARRAY
20421: PPUSH
20422: LD_EXP 70
20426: PUSH
20427: LD_VAR 0 6
20431: ARRAY
20432: PUSH
20433: LD_VAR 0 5
20437: ARRAY
20438: PUSH
20439: LD_INT 2
20441: ARRAY
20442: PPUSH
20443: LD_VAR 0 2
20447: PPUSH
20448: LD_VAR 0 3
20452: PPUSH
20453: CALL_OW 298
20457: PUSH
20458: LD_INT 6
20460: LESS
20461: IFFALSE 20560
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
20463: LD_EXP 70
20467: PUSH
20468: LD_VAR 0 6
20472: ARRAY
20473: PUSH
20474: LD_VAR 0 5
20478: ARRAY
20479: PUSH
20480: LD_INT 1
20482: ARRAY
20483: PPUSH
20484: LD_EXP 70
20488: PUSH
20489: LD_VAR 0 6
20493: ARRAY
20494: PUSH
20495: LD_VAR 0 5
20499: ARRAY
20500: PUSH
20501: LD_INT 2
20503: ARRAY
20504: PPUSH
20505: LD_VAR 0 1
20509: PPUSH
20510: CALL_OW 255
20514: PPUSH
20515: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
20519: LD_ADDR_EXP 70
20523: PUSH
20524: LD_EXP 70
20528: PPUSH
20529: LD_VAR 0 6
20533: PPUSH
20534: LD_EXP 70
20538: PUSH
20539: LD_VAR 0 6
20543: ARRAY
20544: PPUSH
20545: LD_VAR 0 5
20549: PPUSH
20550: CALL_OW 3
20554: PPUSH
20555: CALL_OW 1
20559: ST_TO_ADDR
// end ; end ;
20560: GO 20398
20562: POP
20563: POP
// end ;
20564: LD_VAR 0 4
20568: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
20569: LD_INT 0
20571: PPUSH
20572: PPUSH
20573: PPUSH
20574: PPUSH
20575: PPUSH
20576: PPUSH
20577: PPUSH
20578: PPUSH
20579: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
20580: LD_VAR 0 1
20584: PPUSH
20585: CALL_OW 264
20589: PUSH
20590: LD_INT 81
20592: EQUAL
20593: NOT
20594: PUSH
20595: LD_VAR 0 1
20599: PUSH
20600: LD_EXP 69
20604: IN
20605: NOT
20606: OR
20607: IFFALSE 20611
// exit ;
20609: GO 20933
// index := GetElementIndex ( minersList , unit ) ;
20611: LD_ADDR_VAR 0 6
20615: PUSH
20616: LD_EXP 69
20620: PPUSH
20621: LD_VAR 0 1
20625: PPUSH
20626: CALL 26268 0 2
20630: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
20631: LD_ADDR_VAR 0 8
20635: PUSH
20636: LD_EXP 71
20640: PUSH
20641: LD_EXP 70
20645: PUSH
20646: LD_VAR 0 6
20650: ARRAY
20651: MINUS
20652: ST_TO_ADDR
// if not minesFreeAmount then
20653: LD_VAR 0 8
20657: NOT
20658: IFFALSE 20662
// exit ;
20660: GO 20933
// tmp := [ ] ;
20662: LD_ADDR_VAR 0 7
20666: PUSH
20667: EMPTY
20668: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
20669: LD_ADDR_VAR 0 5
20673: PUSH
20674: DOUBLE
20675: LD_INT 1
20677: DEC
20678: ST_TO_ADDR
20679: LD_VAR 0 8
20683: PUSH
20684: FOR_TO
20685: IFFALSE 20880
// begin _d := rand ( 0 , 5 ) ;
20687: LD_ADDR_VAR 0 11
20691: PUSH
20692: LD_INT 0
20694: PPUSH
20695: LD_INT 5
20697: PPUSH
20698: CALL_OW 12
20702: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
20703: LD_ADDR_VAR 0 12
20707: PUSH
20708: LD_INT 2
20710: PPUSH
20711: LD_INT 6
20713: PPUSH
20714: CALL_OW 12
20718: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
20719: LD_ADDR_VAR 0 9
20723: PUSH
20724: LD_VAR 0 2
20728: PPUSH
20729: LD_VAR 0 11
20733: PPUSH
20734: LD_VAR 0 12
20738: PPUSH
20739: CALL_OW 272
20743: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
20744: LD_ADDR_VAR 0 10
20748: PUSH
20749: LD_VAR 0 3
20753: PPUSH
20754: LD_VAR 0 11
20758: PPUSH
20759: LD_VAR 0 12
20763: PPUSH
20764: CALL_OW 273
20768: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
20769: LD_VAR 0 9
20773: PPUSH
20774: LD_VAR 0 10
20778: PPUSH
20779: CALL_OW 488
20783: PUSH
20784: LD_VAR 0 9
20788: PUSH
20789: LD_VAR 0 10
20793: PUSH
20794: EMPTY
20795: LIST
20796: LIST
20797: PUSH
20798: LD_VAR 0 7
20802: IN
20803: NOT
20804: AND
20805: PUSH
20806: LD_VAR 0 9
20810: PPUSH
20811: LD_VAR 0 10
20815: PPUSH
20816: CALL_OW 458
20820: NOT
20821: AND
20822: IFFALSE 20864
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
20824: LD_ADDR_VAR 0 7
20828: PUSH
20829: LD_VAR 0 7
20833: PPUSH
20834: LD_VAR 0 7
20838: PUSH
20839: LD_INT 1
20841: PLUS
20842: PPUSH
20843: LD_VAR 0 9
20847: PUSH
20848: LD_VAR 0 10
20852: PUSH
20853: EMPTY
20854: LIST
20855: LIST
20856: PPUSH
20857: CALL_OW 1
20861: ST_TO_ADDR
20862: GO 20878
// i := i - 1 ;
20864: LD_ADDR_VAR 0 5
20868: PUSH
20869: LD_VAR 0 5
20873: PUSH
20874: LD_INT 1
20876: MINUS
20877: ST_TO_ADDR
// end ;
20878: GO 20684
20880: POP
20881: POP
// for i in tmp do
20882: LD_ADDR_VAR 0 5
20886: PUSH
20887: LD_VAR 0 7
20891: PUSH
20892: FOR_IN
20893: IFFALSE 20931
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
20895: LD_VAR 0 1
20899: PPUSH
20900: LD_VAR 0 5
20904: PUSH
20905: LD_INT 1
20907: ARRAY
20908: PPUSH
20909: LD_VAR 0 5
20913: PUSH
20914: LD_INT 2
20916: ARRAY
20917: PPUSH
20918: CALL 19877 0 3
20922: NOT
20923: IFFALSE 20929
// exit ;
20925: POP
20926: POP
20927: GO 20933
20929: GO 20892
20931: POP
20932: POP
// end ;
20933: LD_VAR 0 4
20937: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
20938: LD_INT 0
20940: PPUSH
20941: PPUSH
20942: PPUSH
20943: PPUSH
20944: PPUSH
20945: PPUSH
20946: PPUSH
20947: PPUSH
20948: PPUSH
// if GetClass ( unit ) <> class_sniper then
20949: LD_VAR 0 1
20953: PPUSH
20954: CALL_OW 257
20958: PUSH
20959: LD_INT 5
20961: NONEQUAL
20962: IFFALSE 20966
// exit ;
20964: GO 21432
// dist := 8 ;
20966: LD_ADDR_VAR 0 5
20970: PUSH
20971: LD_INT 8
20973: ST_TO_ADDR
// viewRange := 12 ;
20974: LD_ADDR_VAR 0 8
20978: PUSH
20979: LD_INT 12
20981: ST_TO_ADDR
// side := GetSide ( unit ) ;
20982: LD_ADDR_VAR 0 6
20986: PUSH
20987: LD_VAR 0 1
20991: PPUSH
20992: CALL_OW 255
20996: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
20997: LD_INT 61
20999: PPUSH
21000: LD_VAR 0 6
21004: PPUSH
21005: CALL_OW 321
21009: PUSH
21010: LD_INT 2
21012: EQUAL
21013: IFFALSE 21023
// viewRange := 16 ;
21015: LD_ADDR_VAR 0 8
21019: PUSH
21020: LD_INT 16
21022: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
21023: LD_VAR 0 1
21027: PPUSH
21028: LD_VAR 0 2
21032: PPUSH
21033: LD_VAR 0 3
21037: PPUSH
21038: CALL_OW 297
21042: PUSH
21043: LD_VAR 0 5
21047: GREATER
21048: IFFALSE 21127
// begin ComMoveXY ( unit , x , y ) ;
21050: LD_VAR 0 1
21054: PPUSH
21055: LD_VAR 0 2
21059: PPUSH
21060: LD_VAR 0 3
21064: PPUSH
21065: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
21069: LD_INT 35
21071: PPUSH
21072: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
21076: LD_VAR 0 1
21080: PPUSH
21081: LD_VAR 0 2
21085: PPUSH
21086: LD_VAR 0 3
21090: PPUSH
21091: CALL 58029 0 3
21095: NOT
21096: IFFALSE 21100
// exit ;
21098: GO 21432
// until GetDistUnitXY ( unit , x , y ) < dist ;
21100: LD_VAR 0 1
21104: PPUSH
21105: LD_VAR 0 2
21109: PPUSH
21110: LD_VAR 0 3
21114: PPUSH
21115: CALL_OW 297
21119: PUSH
21120: LD_VAR 0 5
21124: LESS
21125: IFFALSE 21069
// end ; ComTurnXY ( unit , x , y ) ;
21127: LD_VAR 0 1
21131: PPUSH
21132: LD_VAR 0 2
21136: PPUSH
21137: LD_VAR 0 3
21141: PPUSH
21142: CALL_OW 118
// repeat if Multiplayer then
21146: LD_OWVAR 4
21150: IFFALSE 21161
// wait ( 35 ) else
21152: LD_INT 35
21154: PPUSH
21155: CALL_OW 67
21159: GO 21168
// wait ( 5 ) ;
21161: LD_INT 5
21163: PPUSH
21164: CALL_OW 67
// _d := GetDir ( unit ) ;
21168: LD_ADDR_VAR 0 11
21172: PUSH
21173: LD_VAR 0 1
21177: PPUSH
21178: CALL_OW 254
21182: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
21183: LD_ADDR_VAR 0 7
21187: PUSH
21188: LD_VAR 0 1
21192: PPUSH
21193: CALL_OW 250
21197: PPUSH
21198: LD_VAR 0 1
21202: PPUSH
21203: CALL_OW 251
21207: PPUSH
21208: LD_VAR 0 2
21212: PPUSH
21213: LD_VAR 0 3
21217: PPUSH
21218: CALL 60637 0 4
21222: ST_TO_ADDR
// until dir = _d ;
21223: LD_VAR 0 7
21227: PUSH
21228: LD_VAR 0 11
21232: EQUAL
21233: IFFALSE 21146
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
21235: LD_ADDR_VAR 0 9
21239: PUSH
21240: LD_VAR 0 1
21244: PPUSH
21245: CALL_OW 250
21249: PPUSH
21250: LD_VAR 0 7
21254: PPUSH
21255: LD_VAR 0 5
21259: PPUSH
21260: CALL_OW 272
21264: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
21265: LD_ADDR_VAR 0 10
21269: PUSH
21270: LD_VAR 0 1
21274: PPUSH
21275: CALL_OW 251
21279: PPUSH
21280: LD_VAR 0 7
21284: PPUSH
21285: LD_VAR 0 5
21289: PPUSH
21290: CALL_OW 273
21294: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
21295: LD_VAR 0 9
21299: PPUSH
21300: LD_VAR 0 10
21304: PPUSH
21305: CALL_OW 488
21309: NOT
21310: IFFALSE 21314
// exit ;
21312: GO 21432
// ComAnimCustom ( unit , 1 ) ;
21314: LD_VAR 0 1
21318: PPUSH
21319: LD_INT 1
21321: PPUSH
21322: CALL_OW 592
// p := 0 ;
21326: LD_ADDR_VAR 0 12
21330: PUSH
21331: LD_INT 0
21333: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
21334: LD_VAR 0 9
21338: PPUSH
21339: LD_VAR 0 10
21343: PPUSH
21344: LD_VAR 0 6
21348: PPUSH
21349: LD_VAR 0 8
21353: PPUSH
21354: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
21358: LD_INT 35
21360: PPUSH
21361: CALL_OW 67
// p := Inc ( p ) ;
21365: LD_ADDR_VAR 0 12
21369: PUSH
21370: LD_VAR 0 12
21374: PPUSH
21375: CALL 60593 0 1
21379: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
21380: LD_VAR 0 12
21384: PUSH
21385: LD_INT 3
21387: EQUAL
21388: PUSH
21389: LD_VAR 0 1
21393: PPUSH
21394: CALL_OW 302
21398: NOT
21399: OR
21400: PUSH
21401: LD_VAR 0 1
21405: PPUSH
21406: CALL_OW 301
21410: OR
21411: IFFALSE 21358
// RemoveSeeing ( _x , _y , side ) ;
21413: LD_VAR 0 9
21417: PPUSH
21418: LD_VAR 0 10
21422: PPUSH
21423: LD_VAR 0 6
21427: PPUSH
21428: CALL_OW 331
// end ; end_of_file
21432: LD_VAR 0 4
21436: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
21437: LD_INT 0
21439: PPUSH
21440: PPUSH
// if exist_mode then
21441: LD_VAR 0 2
21445: IFFALSE 21491
// begin unit := CreateCharacter ( prefix & ident ) ;
21447: LD_ADDR_VAR 0 5
21451: PUSH
21452: LD_VAR 0 3
21456: PUSH
21457: LD_VAR 0 1
21461: STR
21462: PPUSH
21463: CALL_OW 34
21467: ST_TO_ADDR
// if unit then
21468: LD_VAR 0 5
21472: IFFALSE 21489
// DeleteCharacters ( prefix & ident ) ;
21474: LD_VAR 0 3
21478: PUSH
21479: LD_VAR 0 1
21483: STR
21484: PPUSH
21485: CALL_OW 40
// end else
21489: GO 21506
// unit := NewCharacter ( ident ) ;
21491: LD_ADDR_VAR 0 5
21495: PUSH
21496: LD_VAR 0 1
21500: PPUSH
21501: CALL_OW 25
21505: ST_TO_ADDR
// result := unit ;
21506: LD_ADDR_VAR 0 4
21510: PUSH
21511: LD_VAR 0 5
21515: ST_TO_ADDR
// end ;
21516: LD_VAR 0 4
21520: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
21521: LD_INT 0
21523: PPUSH
21524: PPUSH
// if exist_mode then
21525: LD_VAR 0 2
21529: IFFALSE 21554
// unit := CreateCharacter ( prefix & ident ) else
21531: LD_ADDR_VAR 0 5
21535: PUSH
21536: LD_VAR 0 3
21540: PUSH
21541: LD_VAR 0 1
21545: STR
21546: PPUSH
21547: CALL_OW 34
21551: ST_TO_ADDR
21552: GO 21569
// unit := NewCharacter ( ident ) ;
21554: LD_ADDR_VAR 0 5
21558: PUSH
21559: LD_VAR 0 1
21563: PPUSH
21564: CALL_OW 25
21568: ST_TO_ADDR
// result := unit ;
21569: LD_ADDR_VAR 0 4
21573: PUSH
21574: LD_VAR 0 5
21578: ST_TO_ADDR
// end ;
21579: LD_VAR 0 4
21583: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
21584: LD_INT 0
21586: PPUSH
21587: PPUSH
// if not side or not nation then
21588: LD_VAR 0 1
21592: NOT
21593: PUSH
21594: LD_VAR 0 2
21598: NOT
21599: OR
21600: IFFALSE 21604
// exit ;
21602: GO 22372
// case nation of nation_american :
21604: LD_VAR 0 2
21608: PUSH
21609: LD_INT 1
21611: DOUBLE
21612: EQUAL
21613: IFTRUE 21617
21615: GO 21831
21617: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
21618: LD_ADDR_VAR 0 4
21622: PUSH
21623: LD_INT 35
21625: PUSH
21626: LD_INT 45
21628: PUSH
21629: LD_INT 46
21631: PUSH
21632: LD_INT 47
21634: PUSH
21635: LD_INT 82
21637: PUSH
21638: LD_INT 83
21640: PUSH
21641: LD_INT 84
21643: PUSH
21644: LD_INT 85
21646: PUSH
21647: LD_INT 86
21649: PUSH
21650: LD_INT 1
21652: PUSH
21653: LD_INT 2
21655: PUSH
21656: LD_INT 6
21658: PUSH
21659: LD_INT 15
21661: PUSH
21662: LD_INT 16
21664: PUSH
21665: LD_INT 7
21667: PUSH
21668: LD_INT 12
21670: PUSH
21671: LD_INT 13
21673: PUSH
21674: LD_INT 10
21676: PUSH
21677: LD_INT 14
21679: PUSH
21680: LD_INT 20
21682: PUSH
21683: LD_INT 21
21685: PUSH
21686: LD_INT 22
21688: PUSH
21689: LD_INT 25
21691: PUSH
21692: LD_INT 32
21694: PUSH
21695: LD_INT 27
21697: PUSH
21698: LD_INT 36
21700: PUSH
21701: LD_INT 69
21703: PUSH
21704: LD_INT 39
21706: PUSH
21707: LD_INT 34
21709: PUSH
21710: LD_INT 40
21712: PUSH
21713: LD_INT 48
21715: PUSH
21716: LD_INT 49
21718: PUSH
21719: LD_INT 50
21721: PUSH
21722: LD_INT 51
21724: PUSH
21725: LD_INT 52
21727: PUSH
21728: LD_INT 53
21730: PUSH
21731: LD_INT 54
21733: PUSH
21734: LD_INT 55
21736: PUSH
21737: LD_INT 56
21739: PUSH
21740: LD_INT 57
21742: PUSH
21743: LD_INT 58
21745: PUSH
21746: LD_INT 59
21748: PUSH
21749: LD_INT 60
21751: PUSH
21752: LD_INT 61
21754: PUSH
21755: LD_INT 62
21757: PUSH
21758: LD_INT 80
21760: PUSH
21761: LD_INT 82
21763: PUSH
21764: LD_INT 83
21766: PUSH
21767: LD_INT 84
21769: PUSH
21770: LD_INT 85
21772: PUSH
21773: LD_INT 86
21775: PUSH
21776: EMPTY
21777: LIST
21778: LIST
21779: LIST
21780: LIST
21781: LIST
21782: LIST
21783: LIST
21784: LIST
21785: LIST
21786: LIST
21787: LIST
21788: LIST
21789: LIST
21790: LIST
21791: LIST
21792: LIST
21793: LIST
21794: LIST
21795: LIST
21796: LIST
21797: LIST
21798: LIST
21799: LIST
21800: LIST
21801: LIST
21802: LIST
21803: LIST
21804: LIST
21805: LIST
21806: LIST
21807: LIST
21808: LIST
21809: LIST
21810: LIST
21811: LIST
21812: LIST
21813: LIST
21814: LIST
21815: LIST
21816: LIST
21817: LIST
21818: LIST
21819: LIST
21820: LIST
21821: LIST
21822: LIST
21823: LIST
21824: LIST
21825: LIST
21826: LIST
21827: LIST
21828: ST_TO_ADDR
21829: GO 22296
21831: LD_INT 2
21833: DOUBLE
21834: EQUAL
21835: IFTRUE 21839
21837: GO 22065
21839: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
21840: LD_ADDR_VAR 0 4
21844: PUSH
21845: LD_INT 35
21847: PUSH
21848: LD_INT 45
21850: PUSH
21851: LD_INT 46
21853: PUSH
21854: LD_INT 47
21856: PUSH
21857: LD_INT 82
21859: PUSH
21860: LD_INT 83
21862: PUSH
21863: LD_INT 84
21865: PUSH
21866: LD_INT 85
21868: PUSH
21869: LD_INT 87
21871: PUSH
21872: LD_INT 70
21874: PUSH
21875: LD_INT 1
21877: PUSH
21878: LD_INT 11
21880: PUSH
21881: LD_INT 3
21883: PUSH
21884: LD_INT 4
21886: PUSH
21887: LD_INT 5
21889: PUSH
21890: LD_INT 6
21892: PUSH
21893: LD_INT 15
21895: PUSH
21896: LD_INT 18
21898: PUSH
21899: LD_INT 7
21901: PUSH
21902: LD_INT 17
21904: PUSH
21905: LD_INT 8
21907: PUSH
21908: LD_INT 20
21910: PUSH
21911: LD_INT 21
21913: PUSH
21914: LD_INT 22
21916: PUSH
21917: LD_INT 72
21919: PUSH
21920: LD_INT 26
21922: PUSH
21923: LD_INT 69
21925: PUSH
21926: LD_INT 39
21928: PUSH
21929: LD_INT 40
21931: PUSH
21932: LD_INT 41
21934: PUSH
21935: LD_INT 42
21937: PUSH
21938: LD_INT 43
21940: PUSH
21941: LD_INT 48
21943: PUSH
21944: LD_INT 49
21946: PUSH
21947: LD_INT 50
21949: PUSH
21950: LD_INT 51
21952: PUSH
21953: LD_INT 52
21955: PUSH
21956: LD_INT 53
21958: PUSH
21959: LD_INT 54
21961: PUSH
21962: LD_INT 55
21964: PUSH
21965: LD_INT 56
21967: PUSH
21968: LD_INT 60
21970: PUSH
21971: LD_INT 61
21973: PUSH
21974: LD_INT 62
21976: PUSH
21977: LD_INT 66
21979: PUSH
21980: LD_INT 67
21982: PUSH
21983: LD_INT 68
21985: PUSH
21986: LD_INT 81
21988: PUSH
21989: LD_INT 82
21991: PUSH
21992: LD_INT 83
21994: PUSH
21995: LD_INT 84
21997: PUSH
21998: LD_INT 85
22000: PUSH
22001: LD_INT 87
22003: PUSH
22004: LD_INT 88
22006: PUSH
22007: EMPTY
22008: LIST
22009: LIST
22010: LIST
22011: LIST
22012: LIST
22013: LIST
22014: LIST
22015: LIST
22016: LIST
22017: LIST
22018: LIST
22019: LIST
22020: LIST
22021: LIST
22022: LIST
22023: LIST
22024: LIST
22025: LIST
22026: LIST
22027: LIST
22028: LIST
22029: LIST
22030: LIST
22031: LIST
22032: LIST
22033: LIST
22034: LIST
22035: LIST
22036: LIST
22037: LIST
22038: LIST
22039: LIST
22040: LIST
22041: LIST
22042: LIST
22043: LIST
22044: LIST
22045: LIST
22046: LIST
22047: LIST
22048: LIST
22049: LIST
22050: LIST
22051: LIST
22052: LIST
22053: LIST
22054: LIST
22055: LIST
22056: LIST
22057: LIST
22058: LIST
22059: LIST
22060: LIST
22061: LIST
22062: ST_TO_ADDR
22063: GO 22296
22065: LD_INT 3
22067: DOUBLE
22068: EQUAL
22069: IFTRUE 22073
22071: GO 22295
22073: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
22074: LD_ADDR_VAR 0 4
22078: PUSH
22079: LD_INT 46
22081: PUSH
22082: LD_INT 47
22084: PUSH
22085: LD_INT 1
22087: PUSH
22088: LD_INT 2
22090: PUSH
22091: LD_INT 82
22093: PUSH
22094: LD_INT 83
22096: PUSH
22097: LD_INT 84
22099: PUSH
22100: LD_INT 85
22102: PUSH
22103: LD_INT 86
22105: PUSH
22106: LD_INT 11
22108: PUSH
22109: LD_INT 9
22111: PUSH
22112: LD_INT 20
22114: PUSH
22115: LD_INT 19
22117: PUSH
22118: LD_INT 21
22120: PUSH
22121: LD_INT 24
22123: PUSH
22124: LD_INT 22
22126: PUSH
22127: LD_INT 25
22129: PUSH
22130: LD_INT 28
22132: PUSH
22133: LD_INT 29
22135: PUSH
22136: LD_INT 30
22138: PUSH
22139: LD_INT 31
22141: PUSH
22142: LD_INT 37
22144: PUSH
22145: LD_INT 38
22147: PUSH
22148: LD_INT 32
22150: PUSH
22151: LD_INT 27
22153: PUSH
22154: LD_INT 33
22156: PUSH
22157: LD_INT 69
22159: PUSH
22160: LD_INT 39
22162: PUSH
22163: LD_INT 34
22165: PUSH
22166: LD_INT 40
22168: PUSH
22169: LD_INT 71
22171: PUSH
22172: LD_INT 23
22174: PUSH
22175: LD_INT 44
22177: PUSH
22178: LD_INT 48
22180: PUSH
22181: LD_INT 49
22183: PUSH
22184: LD_INT 50
22186: PUSH
22187: LD_INT 51
22189: PUSH
22190: LD_INT 52
22192: PUSH
22193: LD_INT 53
22195: PUSH
22196: LD_INT 54
22198: PUSH
22199: LD_INT 55
22201: PUSH
22202: LD_INT 56
22204: PUSH
22205: LD_INT 57
22207: PUSH
22208: LD_INT 58
22210: PUSH
22211: LD_INT 59
22213: PUSH
22214: LD_INT 63
22216: PUSH
22217: LD_INT 64
22219: PUSH
22220: LD_INT 65
22222: PUSH
22223: LD_INT 82
22225: PUSH
22226: LD_INT 83
22228: PUSH
22229: LD_INT 84
22231: PUSH
22232: LD_INT 85
22234: PUSH
22235: LD_INT 86
22237: PUSH
22238: EMPTY
22239: LIST
22240: LIST
22241: LIST
22242: LIST
22243: LIST
22244: LIST
22245: LIST
22246: LIST
22247: LIST
22248: LIST
22249: LIST
22250: LIST
22251: LIST
22252: LIST
22253: LIST
22254: LIST
22255: LIST
22256: LIST
22257: LIST
22258: LIST
22259: LIST
22260: LIST
22261: LIST
22262: LIST
22263: LIST
22264: LIST
22265: LIST
22266: LIST
22267: LIST
22268: LIST
22269: LIST
22270: LIST
22271: LIST
22272: LIST
22273: LIST
22274: LIST
22275: LIST
22276: LIST
22277: LIST
22278: LIST
22279: LIST
22280: LIST
22281: LIST
22282: LIST
22283: LIST
22284: LIST
22285: LIST
22286: LIST
22287: LIST
22288: LIST
22289: LIST
22290: LIST
22291: LIST
22292: ST_TO_ADDR
22293: GO 22296
22295: POP
// if state > - 1 and state < 3 then
22296: LD_VAR 0 3
22300: PUSH
22301: LD_INT 1
22303: NEG
22304: GREATER
22305: PUSH
22306: LD_VAR 0 3
22310: PUSH
22311: LD_INT 3
22313: LESS
22314: AND
22315: IFFALSE 22372
// for i in result do
22317: LD_ADDR_VAR 0 5
22321: PUSH
22322: LD_VAR 0 4
22326: PUSH
22327: FOR_IN
22328: IFFALSE 22370
// if GetTech ( i , side ) <> state then
22330: LD_VAR 0 5
22334: PPUSH
22335: LD_VAR 0 1
22339: PPUSH
22340: CALL_OW 321
22344: PUSH
22345: LD_VAR 0 3
22349: NONEQUAL
22350: IFFALSE 22368
// result := result diff i ;
22352: LD_ADDR_VAR 0 4
22356: PUSH
22357: LD_VAR 0 4
22361: PUSH
22362: LD_VAR 0 5
22366: DIFF
22367: ST_TO_ADDR
22368: GO 22327
22370: POP
22371: POP
// end ;
22372: LD_VAR 0 4
22376: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
22377: LD_INT 0
22379: PPUSH
22380: PPUSH
22381: PPUSH
// result := true ;
22382: LD_ADDR_VAR 0 3
22386: PUSH
22387: LD_INT 1
22389: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
22390: LD_ADDR_VAR 0 5
22394: PUSH
22395: LD_VAR 0 2
22399: PPUSH
22400: CALL_OW 480
22404: ST_TO_ADDR
// if not tmp then
22405: LD_VAR 0 5
22409: NOT
22410: IFFALSE 22414
// exit ;
22412: GO 22463
// for i in tmp do
22414: LD_ADDR_VAR 0 4
22418: PUSH
22419: LD_VAR 0 5
22423: PUSH
22424: FOR_IN
22425: IFFALSE 22461
// if GetTech ( i , side ) <> state_researched then
22427: LD_VAR 0 4
22431: PPUSH
22432: LD_VAR 0 1
22436: PPUSH
22437: CALL_OW 321
22441: PUSH
22442: LD_INT 2
22444: NONEQUAL
22445: IFFALSE 22459
// begin result := false ;
22447: LD_ADDR_VAR 0 3
22451: PUSH
22452: LD_INT 0
22454: ST_TO_ADDR
// exit ;
22455: POP
22456: POP
22457: GO 22463
// end ;
22459: GO 22424
22461: POP
22462: POP
// end ;
22463: LD_VAR 0 3
22467: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
22468: LD_INT 0
22470: PPUSH
22471: PPUSH
22472: PPUSH
22473: PPUSH
22474: PPUSH
22475: PPUSH
22476: PPUSH
22477: PPUSH
22478: PPUSH
22479: PPUSH
22480: PPUSH
22481: PPUSH
22482: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
22483: LD_VAR 0 1
22487: NOT
22488: PUSH
22489: LD_VAR 0 1
22493: PPUSH
22494: CALL_OW 257
22498: PUSH
22499: LD_INT 9
22501: NONEQUAL
22502: OR
22503: IFFALSE 22507
// exit ;
22505: GO 23080
// side := GetSide ( unit ) ;
22507: LD_ADDR_VAR 0 9
22511: PUSH
22512: LD_VAR 0 1
22516: PPUSH
22517: CALL_OW 255
22521: ST_TO_ADDR
// tech_space := tech_spacanom ;
22522: LD_ADDR_VAR 0 12
22526: PUSH
22527: LD_INT 29
22529: ST_TO_ADDR
// tech_time := tech_taurad ;
22530: LD_ADDR_VAR 0 13
22534: PUSH
22535: LD_INT 28
22537: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
22538: LD_ADDR_VAR 0 11
22542: PUSH
22543: LD_VAR 0 1
22547: PPUSH
22548: CALL_OW 310
22552: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
22553: LD_VAR 0 11
22557: PPUSH
22558: CALL_OW 247
22562: PUSH
22563: LD_INT 2
22565: EQUAL
22566: IFFALSE 22570
// exit ;
22568: GO 23080
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
22570: LD_ADDR_VAR 0 8
22574: PUSH
22575: LD_INT 81
22577: PUSH
22578: LD_VAR 0 9
22582: PUSH
22583: EMPTY
22584: LIST
22585: LIST
22586: PUSH
22587: LD_INT 3
22589: PUSH
22590: LD_INT 21
22592: PUSH
22593: LD_INT 3
22595: PUSH
22596: EMPTY
22597: LIST
22598: LIST
22599: PUSH
22600: EMPTY
22601: LIST
22602: LIST
22603: PUSH
22604: EMPTY
22605: LIST
22606: LIST
22607: PPUSH
22608: CALL_OW 69
22612: ST_TO_ADDR
// if not tmp then
22613: LD_VAR 0 8
22617: NOT
22618: IFFALSE 22622
// exit ;
22620: GO 23080
// if in_unit then
22622: LD_VAR 0 11
22626: IFFALSE 22650
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
22628: LD_ADDR_VAR 0 10
22632: PUSH
22633: LD_VAR 0 8
22637: PPUSH
22638: LD_VAR 0 11
22642: PPUSH
22643: CALL_OW 74
22647: ST_TO_ADDR
22648: GO 22670
// enemy := NearestUnitToUnit ( tmp , unit ) ;
22650: LD_ADDR_VAR 0 10
22654: PUSH
22655: LD_VAR 0 8
22659: PPUSH
22660: LD_VAR 0 1
22664: PPUSH
22665: CALL_OW 74
22669: ST_TO_ADDR
// if not enemy then
22670: LD_VAR 0 10
22674: NOT
22675: IFFALSE 22679
// exit ;
22677: GO 23080
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
22679: LD_VAR 0 11
22683: PUSH
22684: LD_VAR 0 11
22688: PPUSH
22689: LD_VAR 0 10
22693: PPUSH
22694: CALL_OW 296
22698: PUSH
22699: LD_INT 13
22701: GREATER
22702: AND
22703: PUSH
22704: LD_VAR 0 1
22708: PPUSH
22709: LD_VAR 0 10
22713: PPUSH
22714: CALL_OW 296
22718: PUSH
22719: LD_INT 12
22721: GREATER
22722: OR
22723: IFFALSE 22727
// exit ;
22725: GO 23080
// missile := [ 1 ] ;
22727: LD_ADDR_VAR 0 14
22731: PUSH
22732: LD_INT 1
22734: PUSH
22735: EMPTY
22736: LIST
22737: ST_TO_ADDR
// if Researched ( side , tech_space ) then
22738: LD_VAR 0 9
22742: PPUSH
22743: LD_VAR 0 12
22747: PPUSH
22748: CALL_OW 325
22752: IFFALSE 22781
// missile := Replace ( missile , missile + 1 , 2 ) ;
22754: LD_ADDR_VAR 0 14
22758: PUSH
22759: LD_VAR 0 14
22763: PPUSH
22764: LD_VAR 0 14
22768: PUSH
22769: LD_INT 1
22771: PLUS
22772: PPUSH
22773: LD_INT 2
22775: PPUSH
22776: CALL_OW 1
22780: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
22781: LD_VAR 0 9
22785: PPUSH
22786: LD_VAR 0 13
22790: PPUSH
22791: CALL_OW 325
22795: PUSH
22796: LD_VAR 0 10
22800: PPUSH
22801: CALL_OW 255
22805: PPUSH
22806: LD_VAR 0 13
22810: PPUSH
22811: CALL_OW 325
22815: NOT
22816: AND
22817: IFFALSE 22846
// missile := Replace ( missile , missile + 1 , 3 ) ;
22819: LD_ADDR_VAR 0 14
22823: PUSH
22824: LD_VAR 0 14
22828: PPUSH
22829: LD_VAR 0 14
22833: PUSH
22834: LD_INT 1
22836: PLUS
22837: PPUSH
22838: LD_INT 3
22840: PPUSH
22841: CALL_OW 1
22845: ST_TO_ADDR
// if missile < 2 then
22846: LD_VAR 0 14
22850: PUSH
22851: LD_INT 2
22853: LESS
22854: IFFALSE 22858
// exit ;
22856: GO 23080
// x := GetX ( enemy ) ;
22858: LD_ADDR_VAR 0 4
22862: PUSH
22863: LD_VAR 0 10
22867: PPUSH
22868: CALL_OW 250
22872: ST_TO_ADDR
// y := GetY ( enemy ) ;
22873: LD_ADDR_VAR 0 5
22877: PUSH
22878: LD_VAR 0 10
22882: PPUSH
22883: CALL_OW 251
22887: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
22888: LD_ADDR_VAR 0 6
22892: PUSH
22893: LD_VAR 0 4
22897: PUSH
22898: LD_INT 1
22900: NEG
22901: PPUSH
22902: LD_INT 1
22904: PPUSH
22905: CALL_OW 12
22909: PLUS
22910: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
22911: LD_ADDR_VAR 0 7
22915: PUSH
22916: LD_VAR 0 5
22920: PUSH
22921: LD_INT 1
22923: NEG
22924: PPUSH
22925: LD_INT 1
22927: PPUSH
22928: CALL_OW 12
22932: PLUS
22933: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
22934: LD_VAR 0 6
22938: PPUSH
22939: LD_VAR 0 7
22943: PPUSH
22944: CALL_OW 488
22948: NOT
22949: IFFALSE 22971
// begin _x := x ;
22951: LD_ADDR_VAR 0 6
22955: PUSH
22956: LD_VAR 0 4
22960: ST_TO_ADDR
// _y := y ;
22961: LD_ADDR_VAR 0 7
22965: PUSH
22966: LD_VAR 0 5
22970: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
22971: LD_ADDR_VAR 0 3
22975: PUSH
22976: LD_INT 1
22978: PPUSH
22979: LD_VAR 0 14
22983: PPUSH
22984: CALL_OW 12
22988: ST_TO_ADDR
// case i of 1 :
22989: LD_VAR 0 3
22993: PUSH
22994: LD_INT 1
22996: DOUBLE
22997: EQUAL
22998: IFTRUE 23002
23000: GO 23019
23002: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
23003: LD_VAR 0 1
23007: PPUSH
23008: LD_VAR 0 10
23012: PPUSH
23013: CALL_OW 115
23017: GO 23080
23019: LD_INT 2
23021: DOUBLE
23022: EQUAL
23023: IFTRUE 23027
23025: GO 23049
23027: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
23028: LD_VAR 0 1
23032: PPUSH
23033: LD_VAR 0 6
23037: PPUSH
23038: LD_VAR 0 7
23042: PPUSH
23043: CALL_OW 153
23047: GO 23080
23049: LD_INT 3
23051: DOUBLE
23052: EQUAL
23053: IFTRUE 23057
23055: GO 23079
23057: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
23058: LD_VAR 0 1
23062: PPUSH
23063: LD_VAR 0 6
23067: PPUSH
23068: LD_VAR 0 7
23072: PPUSH
23073: CALL_OW 154
23077: GO 23080
23079: POP
// end ;
23080: LD_VAR 0 2
23084: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
23085: LD_INT 0
23087: PPUSH
23088: PPUSH
23089: PPUSH
23090: PPUSH
23091: PPUSH
23092: PPUSH
// if not unit or not building then
23093: LD_VAR 0 1
23097: NOT
23098: PUSH
23099: LD_VAR 0 2
23103: NOT
23104: OR
23105: IFFALSE 23109
// exit ;
23107: GO 23267
// x := GetX ( building ) ;
23109: LD_ADDR_VAR 0 5
23113: PUSH
23114: LD_VAR 0 2
23118: PPUSH
23119: CALL_OW 250
23123: ST_TO_ADDR
// y := GetY ( building ) ;
23124: LD_ADDR_VAR 0 6
23128: PUSH
23129: LD_VAR 0 2
23133: PPUSH
23134: CALL_OW 251
23138: ST_TO_ADDR
// for i = 0 to 5 do
23139: LD_ADDR_VAR 0 4
23143: PUSH
23144: DOUBLE
23145: LD_INT 0
23147: DEC
23148: ST_TO_ADDR
23149: LD_INT 5
23151: PUSH
23152: FOR_TO
23153: IFFALSE 23265
// begin _x := ShiftX ( x , i , 3 ) ;
23155: LD_ADDR_VAR 0 7
23159: PUSH
23160: LD_VAR 0 5
23164: PPUSH
23165: LD_VAR 0 4
23169: PPUSH
23170: LD_INT 3
23172: PPUSH
23173: CALL_OW 272
23177: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
23178: LD_ADDR_VAR 0 8
23182: PUSH
23183: LD_VAR 0 6
23187: PPUSH
23188: LD_VAR 0 4
23192: PPUSH
23193: LD_INT 3
23195: PPUSH
23196: CALL_OW 273
23200: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
23201: LD_VAR 0 7
23205: PPUSH
23206: LD_VAR 0 8
23210: PPUSH
23211: CALL_OW 488
23215: NOT
23216: IFFALSE 23220
// continue ;
23218: GO 23152
// if HexInfo ( _x , _y ) = 0 then
23220: LD_VAR 0 7
23224: PPUSH
23225: LD_VAR 0 8
23229: PPUSH
23230: CALL_OW 428
23234: PUSH
23235: LD_INT 0
23237: EQUAL
23238: IFFALSE 23263
// begin ComMoveXY ( unit , _x , _y ) ;
23240: LD_VAR 0 1
23244: PPUSH
23245: LD_VAR 0 7
23249: PPUSH
23250: LD_VAR 0 8
23254: PPUSH
23255: CALL_OW 111
// exit ;
23259: POP
23260: POP
23261: GO 23267
// end ; end ;
23263: GO 23152
23265: POP
23266: POP
// end ;
23267: LD_VAR 0 3
23271: RET
// export function ScanBase ( side , base_area ) ; begin
23272: LD_INT 0
23274: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
23275: LD_ADDR_VAR 0 3
23279: PUSH
23280: LD_VAR 0 2
23284: PPUSH
23285: LD_INT 81
23287: PUSH
23288: LD_VAR 0 1
23292: PUSH
23293: EMPTY
23294: LIST
23295: LIST
23296: PPUSH
23297: CALL_OW 70
23301: ST_TO_ADDR
// end ;
23302: LD_VAR 0 3
23306: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
23307: LD_INT 0
23309: PPUSH
23310: PPUSH
23311: PPUSH
23312: PPUSH
// result := false ;
23313: LD_ADDR_VAR 0 2
23317: PUSH
23318: LD_INT 0
23320: ST_TO_ADDR
// side := GetSide ( unit ) ;
23321: LD_ADDR_VAR 0 3
23325: PUSH
23326: LD_VAR 0 1
23330: PPUSH
23331: CALL_OW 255
23335: ST_TO_ADDR
// nat := GetNation ( unit ) ;
23336: LD_ADDR_VAR 0 4
23340: PUSH
23341: LD_VAR 0 1
23345: PPUSH
23346: CALL_OW 248
23350: ST_TO_ADDR
// case nat of 1 :
23351: LD_VAR 0 4
23355: PUSH
23356: LD_INT 1
23358: DOUBLE
23359: EQUAL
23360: IFTRUE 23364
23362: GO 23375
23364: POP
// tech := tech_lassight ; 2 :
23365: LD_ADDR_VAR 0 5
23369: PUSH
23370: LD_INT 12
23372: ST_TO_ADDR
23373: GO 23414
23375: LD_INT 2
23377: DOUBLE
23378: EQUAL
23379: IFTRUE 23383
23381: GO 23394
23383: POP
// tech := tech_mortar ; 3 :
23384: LD_ADDR_VAR 0 5
23388: PUSH
23389: LD_INT 41
23391: ST_TO_ADDR
23392: GO 23414
23394: LD_INT 3
23396: DOUBLE
23397: EQUAL
23398: IFTRUE 23402
23400: GO 23413
23402: POP
// tech := tech_bazooka ; end ;
23403: LD_ADDR_VAR 0 5
23407: PUSH
23408: LD_INT 44
23410: ST_TO_ADDR
23411: GO 23414
23413: POP
// if Researched ( side , tech ) then
23414: LD_VAR 0 3
23418: PPUSH
23419: LD_VAR 0 5
23423: PPUSH
23424: CALL_OW 325
23428: IFFALSE 23455
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
23430: LD_ADDR_VAR 0 2
23434: PUSH
23435: LD_INT 5
23437: PUSH
23438: LD_INT 8
23440: PUSH
23441: LD_INT 9
23443: PUSH
23444: EMPTY
23445: LIST
23446: LIST
23447: LIST
23448: PUSH
23449: LD_VAR 0 4
23453: ARRAY
23454: ST_TO_ADDR
// end ;
23455: LD_VAR 0 2
23459: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
23460: LD_INT 0
23462: PPUSH
23463: PPUSH
23464: PPUSH
// if not mines then
23465: LD_VAR 0 2
23469: NOT
23470: IFFALSE 23474
// exit ;
23472: GO 23618
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
23474: LD_ADDR_VAR 0 5
23478: PUSH
23479: LD_INT 81
23481: PUSH
23482: LD_VAR 0 1
23486: PUSH
23487: EMPTY
23488: LIST
23489: LIST
23490: PUSH
23491: LD_INT 3
23493: PUSH
23494: LD_INT 21
23496: PUSH
23497: LD_INT 3
23499: PUSH
23500: EMPTY
23501: LIST
23502: LIST
23503: PUSH
23504: EMPTY
23505: LIST
23506: LIST
23507: PUSH
23508: EMPTY
23509: LIST
23510: LIST
23511: PPUSH
23512: CALL_OW 69
23516: ST_TO_ADDR
// for i in mines do
23517: LD_ADDR_VAR 0 4
23521: PUSH
23522: LD_VAR 0 2
23526: PUSH
23527: FOR_IN
23528: IFFALSE 23616
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
23530: LD_VAR 0 4
23534: PUSH
23535: LD_INT 1
23537: ARRAY
23538: PPUSH
23539: LD_VAR 0 4
23543: PUSH
23544: LD_INT 2
23546: ARRAY
23547: PPUSH
23548: CALL_OW 458
23552: NOT
23553: IFFALSE 23557
// continue ;
23555: GO 23527
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
23557: LD_VAR 0 4
23561: PUSH
23562: LD_INT 1
23564: ARRAY
23565: PPUSH
23566: LD_VAR 0 4
23570: PUSH
23571: LD_INT 2
23573: ARRAY
23574: PPUSH
23575: CALL_OW 428
23579: PUSH
23580: LD_VAR 0 5
23584: IN
23585: IFFALSE 23614
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
23587: LD_VAR 0 4
23591: PUSH
23592: LD_INT 1
23594: ARRAY
23595: PPUSH
23596: LD_VAR 0 4
23600: PUSH
23601: LD_INT 2
23603: ARRAY
23604: PPUSH
23605: LD_VAR 0 1
23609: PPUSH
23610: CALL_OW 456
// end ;
23614: GO 23527
23616: POP
23617: POP
// end ;
23618: LD_VAR 0 3
23622: RET
// export function Count ( array ) ; begin
23623: LD_INT 0
23625: PPUSH
// result := array + 0 ;
23626: LD_ADDR_VAR 0 2
23630: PUSH
23631: LD_VAR 0 1
23635: PUSH
23636: LD_INT 0
23638: PLUS
23639: ST_TO_ADDR
// end ;
23640: LD_VAR 0 2
23644: RET
// export function IsEmpty ( building ) ; begin
23645: LD_INT 0
23647: PPUSH
// if not building then
23648: LD_VAR 0 1
23652: NOT
23653: IFFALSE 23657
// exit ;
23655: GO 23700
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
23657: LD_ADDR_VAR 0 2
23661: PUSH
23662: LD_VAR 0 1
23666: PUSH
23667: LD_INT 22
23669: PUSH
23670: LD_VAR 0 1
23674: PPUSH
23675: CALL_OW 255
23679: PUSH
23680: EMPTY
23681: LIST
23682: LIST
23683: PUSH
23684: LD_INT 58
23686: PUSH
23687: EMPTY
23688: LIST
23689: PUSH
23690: EMPTY
23691: LIST
23692: LIST
23693: PPUSH
23694: CALL_OW 69
23698: IN
23699: ST_TO_ADDR
// end ;
23700: LD_VAR 0 2
23704: RET
// export function IsNotFull ( building ) ; var places ; begin
23705: LD_INT 0
23707: PPUSH
23708: PPUSH
// if not building then
23709: LD_VAR 0 1
23713: NOT
23714: IFFALSE 23718
// exit ;
23716: GO 23746
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
23718: LD_ADDR_VAR 0 2
23722: PUSH
23723: LD_VAR 0 1
23727: PPUSH
23728: LD_INT 3
23730: PUSH
23731: LD_INT 62
23733: PUSH
23734: EMPTY
23735: LIST
23736: PUSH
23737: EMPTY
23738: LIST
23739: LIST
23740: PPUSH
23741: CALL_OW 72
23745: ST_TO_ADDR
// end ;
23746: LD_VAR 0 2
23750: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
23751: LD_INT 0
23753: PPUSH
23754: PPUSH
23755: PPUSH
23756: PPUSH
// tmp := [ ] ;
23757: LD_ADDR_VAR 0 3
23761: PUSH
23762: EMPTY
23763: ST_TO_ADDR
// list := [ ] ;
23764: LD_ADDR_VAR 0 5
23768: PUSH
23769: EMPTY
23770: ST_TO_ADDR
// for i = 16 to 25 do
23771: LD_ADDR_VAR 0 4
23775: PUSH
23776: DOUBLE
23777: LD_INT 16
23779: DEC
23780: ST_TO_ADDR
23781: LD_INT 25
23783: PUSH
23784: FOR_TO
23785: IFFALSE 23858
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
23787: LD_ADDR_VAR 0 3
23791: PUSH
23792: LD_VAR 0 3
23796: PUSH
23797: LD_INT 22
23799: PUSH
23800: LD_VAR 0 1
23804: PPUSH
23805: CALL_OW 255
23809: PUSH
23810: EMPTY
23811: LIST
23812: LIST
23813: PUSH
23814: LD_INT 91
23816: PUSH
23817: LD_VAR 0 1
23821: PUSH
23822: LD_INT 6
23824: PUSH
23825: EMPTY
23826: LIST
23827: LIST
23828: LIST
23829: PUSH
23830: LD_INT 30
23832: PUSH
23833: LD_VAR 0 4
23837: PUSH
23838: EMPTY
23839: LIST
23840: LIST
23841: PUSH
23842: EMPTY
23843: LIST
23844: LIST
23845: LIST
23846: PUSH
23847: EMPTY
23848: LIST
23849: PPUSH
23850: CALL_OW 69
23854: ADD
23855: ST_TO_ADDR
23856: GO 23784
23858: POP
23859: POP
// for i = 1 to tmp do
23860: LD_ADDR_VAR 0 4
23864: PUSH
23865: DOUBLE
23866: LD_INT 1
23868: DEC
23869: ST_TO_ADDR
23870: LD_VAR 0 3
23874: PUSH
23875: FOR_TO
23876: IFFALSE 23964
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
23878: LD_ADDR_VAR 0 5
23882: PUSH
23883: LD_VAR 0 5
23887: PUSH
23888: LD_VAR 0 3
23892: PUSH
23893: LD_VAR 0 4
23897: ARRAY
23898: PPUSH
23899: CALL_OW 266
23903: PUSH
23904: LD_VAR 0 3
23908: PUSH
23909: LD_VAR 0 4
23913: ARRAY
23914: PPUSH
23915: CALL_OW 250
23919: PUSH
23920: LD_VAR 0 3
23924: PUSH
23925: LD_VAR 0 4
23929: ARRAY
23930: PPUSH
23931: CALL_OW 251
23935: PUSH
23936: LD_VAR 0 3
23940: PUSH
23941: LD_VAR 0 4
23945: ARRAY
23946: PPUSH
23947: CALL_OW 254
23951: PUSH
23952: EMPTY
23953: LIST
23954: LIST
23955: LIST
23956: LIST
23957: PUSH
23958: EMPTY
23959: LIST
23960: ADD
23961: ST_TO_ADDR
23962: GO 23875
23964: POP
23965: POP
// result := list ;
23966: LD_ADDR_VAR 0 2
23970: PUSH
23971: LD_VAR 0 5
23975: ST_TO_ADDR
// end ;
23976: LD_VAR 0 2
23980: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
23981: LD_INT 0
23983: PPUSH
23984: PPUSH
23985: PPUSH
23986: PPUSH
23987: PPUSH
23988: PPUSH
23989: PPUSH
// if not factory then
23990: LD_VAR 0 1
23994: NOT
23995: IFFALSE 23999
// exit ;
23997: GO 24592
// if control = control_apeman then
23999: LD_VAR 0 4
24003: PUSH
24004: LD_INT 5
24006: EQUAL
24007: IFFALSE 24116
// begin tmp := UnitsInside ( factory ) ;
24009: LD_ADDR_VAR 0 8
24013: PUSH
24014: LD_VAR 0 1
24018: PPUSH
24019: CALL_OW 313
24023: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
24024: LD_VAR 0 8
24028: PPUSH
24029: LD_INT 25
24031: PUSH
24032: LD_INT 12
24034: PUSH
24035: EMPTY
24036: LIST
24037: LIST
24038: PPUSH
24039: CALL_OW 72
24043: NOT
24044: IFFALSE 24054
// control := control_manual ;
24046: LD_ADDR_VAR 0 4
24050: PUSH
24051: LD_INT 1
24053: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
24054: LD_ADDR_VAR 0 8
24058: PUSH
24059: LD_VAR 0 1
24063: PPUSH
24064: CALL 23751 0 1
24068: ST_TO_ADDR
// if tmp then
24069: LD_VAR 0 8
24073: IFFALSE 24116
// begin for i in tmp do
24075: LD_ADDR_VAR 0 7
24079: PUSH
24080: LD_VAR 0 8
24084: PUSH
24085: FOR_IN
24086: IFFALSE 24114
// if i [ 1 ] = b_ext_radio then
24088: LD_VAR 0 7
24092: PUSH
24093: LD_INT 1
24095: ARRAY
24096: PUSH
24097: LD_INT 22
24099: EQUAL
24100: IFFALSE 24112
// begin control := control_remote ;
24102: LD_ADDR_VAR 0 4
24106: PUSH
24107: LD_INT 2
24109: ST_TO_ADDR
// break ;
24110: GO 24114
// end ;
24112: GO 24085
24114: POP
24115: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
24116: LD_VAR 0 1
24120: PPUSH
24121: LD_VAR 0 2
24125: PPUSH
24126: LD_VAR 0 3
24130: PPUSH
24131: LD_VAR 0 4
24135: PPUSH
24136: LD_VAR 0 5
24140: PPUSH
24141: CALL_OW 448
24145: IFFALSE 24180
// begin result := [ chassis , engine , control , weapon ] ;
24147: LD_ADDR_VAR 0 6
24151: PUSH
24152: LD_VAR 0 2
24156: PUSH
24157: LD_VAR 0 3
24161: PUSH
24162: LD_VAR 0 4
24166: PUSH
24167: LD_VAR 0 5
24171: PUSH
24172: EMPTY
24173: LIST
24174: LIST
24175: LIST
24176: LIST
24177: ST_TO_ADDR
// exit ;
24178: GO 24592
// end ; _chassis := AvailableChassisList ( factory ) ;
24180: LD_ADDR_VAR 0 9
24184: PUSH
24185: LD_VAR 0 1
24189: PPUSH
24190: CALL_OW 475
24194: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
24195: LD_ADDR_VAR 0 11
24199: PUSH
24200: LD_VAR 0 1
24204: PPUSH
24205: CALL_OW 476
24209: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
24210: LD_ADDR_VAR 0 12
24214: PUSH
24215: LD_VAR 0 1
24219: PPUSH
24220: CALL_OW 477
24224: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
24225: LD_ADDR_VAR 0 10
24229: PUSH
24230: LD_VAR 0 1
24234: PPUSH
24235: CALL_OW 478
24239: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
24240: LD_VAR 0 9
24244: NOT
24245: PUSH
24246: LD_VAR 0 11
24250: NOT
24251: OR
24252: PUSH
24253: LD_VAR 0 12
24257: NOT
24258: OR
24259: PUSH
24260: LD_VAR 0 10
24264: NOT
24265: OR
24266: IFFALSE 24301
// begin result := [ chassis , engine , control , weapon ] ;
24268: LD_ADDR_VAR 0 6
24272: PUSH
24273: LD_VAR 0 2
24277: PUSH
24278: LD_VAR 0 3
24282: PUSH
24283: LD_VAR 0 4
24287: PUSH
24288: LD_VAR 0 5
24292: PUSH
24293: EMPTY
24294: LIST
24295: LIST
24296: LIST
24297: LIST
24298: ST_TO_ADDR
// exit ;
24299: GO 24592
// end ; if not chassis in _chassis then
24301: LD_VAR 0 2
24305: PUSH
24306: LD_VAR 0 9
24310: IN
24311: NOT
24312: IFFALSE 24338
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
24314: LD_ADDR_VAR 0 2
24318: PUSH
24319: LD_VAR 0 9
24323: PUSH
24324: LD_INT 1
24326: PPUSH
24327: LD_VAR 0 9
24331: PPUSH
24332: CALL_OW 12
24336: ARRAY
24337: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
24338: LD_VAR 0 2
24342: PPUSH
24343: LD_VAR 0 3
24347: PPUSH
24348: CALL 24597 0 2
24352: NOT
24353: IFFALSE 24412
// repeat engine := _engine [ 1 ] ;
24355: LD_ADDR_VAR 0 3
24359: PUSH
24360: LD_VAR 0 11
24364: PUSH
24365: LD_INT 1
24367: ARRAY
24368: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
24369: LD_ADDR_VAR 0 11
24373: PUSH
24374: LD_VAR 0 11
24378: PPUSH
24379: LD_INT 1
24381: PPUSH
24382: CALL_OW 3
24386: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
24387: LD_VAR 0 2
24391: PPUSH
24392: LD_VAR 0 3
24396: PPUSH
24397: CALL 24597 0 2
24401: PUSH
24402: LD_VAR 0 11
24406: PUSH
24407: EMPTY
24408: EQUAL
24409: OR
24410: IFFALSE 24355
// if not control in _control then
24412: LD_VAR 0 4
24416: PUSH
24417: LD_VAR 0 12
24421: IN
24422: NOT
24423: IFFALSE 24449
// control := _control [ rand ( 1 , _control ) ] ;
24425: LD_ADDR_VAR 0 4
24429: PUSH
24430: LD_VAR 0 12
24434: PUSH
24435: LD_INT 1
24437: PPUSH
24438: LD_VAR 0 12
24442: PPUSH
24443: CALL_OW 12
24447: ARRAY
24448: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
24449: LD_VAR 0 2
24453: PPUSH
24454: LD_VAR 0 5
24458: PPUSH
24459: CALL 24817 0 2
24463: NOT
24464: IFFALSE 24523
// repeat weapon := _weapon [ 1 ] ;
24466: LD_ADDR_VAR 0 5
24470: PUSH
24471: LD_VAR 0 10
24475: PUSH
24476: LD_INT 1
24478: ARRAY
24479: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
24480: LD_ADDR_VAR 0 10
24484: PUSH
24485: LD_VAR 0 10
24489: PPUSH
24490: LD_INT 1
24492: PPUSH
24493: CALL_OW 3
24497: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
24498: LD_VAR 0 2
24502: PPUSH
24503: LD_VAR 0 5
24507: PPUSH
24508: CALL 24817 0 2
24512: PUSH
24513: LD_VAR 0 10
24517: PUSH
24518: EMPTY
24519: EQUAL
24520: OR
24521: IFFALSE 24466
// result := [ ] ;
24523: LD_ADDR_VAR 0 6
24527: PUSH
24528: EMPTY
24529: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
24530: LD_VAR 0 1
24534: PPUSH
24535: LD_VAR 0 2
24539: PPUSH
24540: LD_VAR 0 3
24544: PPUSH
24545: LD_VAR 0 4
24549: PPUSH
24550: LD_VAR 0 5
24554: PPUSH
24555: CALL_OW 448
24559: IFFALSE 24592
// result := [ chassis , engine , control , weapon ] ;
24561: LD_ADDR_VAR 0 6
24565: PUSH
24566: LD_VAR 0 2
24570: PUSH
24571: LD_VAR 0 3
24575: PUSH
24576: LD_VAR 0 4
24580: PUSH
24581: LD_VAR 0 5
24585: PUSH
24586: EMPTY
24587: LIST
24588: LIST
24589: LIST
24590: LIST
24591: ST_TO_ADDR
// end ;
24592: LD_VAR 0 6
24596: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
24597: LD_INT 0
24599: PPUSH
// if not chassis or not engine then
24600: LD_VAR 0 1
24604: NOT
24605: PUSH
24606: LD_VAR 0 2
24610: NOT
24611: OR
24612: IFFALSE 24616
// exit ;
24614: GO 24812
// case engine of engine_solar :
24616: LD_VAR 0 2
24620: PUSH
24621: LD_INT 2
24623: DOUBLE
24624: EQUAL
24625: IFTRUE 24629
24627: GO 24667
24629: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
24630: LD_ADDR_VAR 0 3
24634: PUSH
24635: LD_INT 11
24637: PUSH
24638: LD_INT 12
24640: PUSH
24641: LD_INT 13
24643: PUSH
24644: LD_INT 14
24646: PUSH
24647: LD_INT 1
24649: PUSH
24650: LD_INT 2
24652: PUSH
24653: LD_INT 3
24655: PUSH
24656: EMPTY
24657: LIST
24658: LIST
24659: LIST
24660: LIST
24661: LIST
24662: LIST
24663: LIST
24664: ST_TO_ADDR
24665: GO 24796
24667: LD_INT 1
24669: DOUBLE
24670: EQUAL
24671: IFTRUE 24675
24673: GO 24737
24675: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
24676: LD_ADDR_VAR 0 3
24680: PUSH
24681: LD_INT 11
24683: PUSH
24684: LD_INT 12
24686: PUSH
24687: LD_INT 13
24689: PUSH
24690: LD_INT 14
24692: PUSH
24693: LD_INT 1
24695: PUSH
24696: LD_INT 2
24698: PUSH
24699: LD_INT 3
24701: PUSH
24702: LD_INT 4
24704: PUSH
24705: LD_INT 5
24707: PUSH
24708: LD_INT 21
24710: PUSH
24711: LD_INT 23
24713: PUSH
24714: LD_INT 22
24716: PUSH
24717: LD_INT 24
24719: PUSH
24720: EMPTY
24721: LIST
24722: LIST
24723: LIST
24724: LIST
24725: LIST
24726: LIST
24727: LIST
24728: LIST
24729: LIST
24730: LIST
24731: LIST
24732: LIST
24733: LIST
24734: ST_TO_ADDR
24735: GO 24796
24737: LD_INT 3
24739: DOUBLE
24740: EQUAL
24741: IFTRUE 24745
24743: GO 24795
24745: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
24746: LD_ADDR_VAR 0 3
24750: PUSH
24751: LD_INT 13
24753: PUSH
24754: LD_INT 14
24756: PUSH
24757: LD_INT 2
24759: PUSH
24760: LD_INT 3
24762: PUSH
24763: LD_INT 4
24765: PUSH
24766: LD_INT 5
24768: PUSH
24769: LD_INT 21
24771: PUSH
24772: LD_INT 22
24774: PUSH
24775: LD_INT 23
24777: PUSH
24778: LD_INT 24
24780: PUSH
24781: EMPTY
24782: LIST
24783: LIST
24784: LIST
24785: LIST
24786: LIST
24787: LIST
24788: LIST
24789: LIST
24790: LIST
24791: LIST
24792: ST_TO_ADDR
24793: GO 24796
24795: POP
// result := ( chassis in result ) ;
24796: LD_ADDR_VAR 0 3
24800: PUSH
24801: LD_VAR 0 1
24805: PUSH
24806: LD_VAR 0 3
24810: IN
24811: ST_TO_ADDR
// end ;
24812: LD_VAR 0 3
24816: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
24817: LD_INT 0
24819: PPUSH
// if not chassis or not weapon then
24820: LD_VAR 0 1
24824: NOT
24825: PUSH
24826: LD_VAR 0 2
24830: NOT
24831: OR
24832: IFFALSE 24836
// exit ;
24834: GO 25896
// case weapon of us_machine_gun :
24836: LD_VAR 0 2
24840: PUSH
24841: LD_INT 2
24843: DOUBLE
24844: EQUAL
24845: IFTRUE 24849
24847: GO 24879
24849: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
24850: LD_ADDR_VAR 0 3
24854: PUSH
24855: LD_INT 1
24857: PUSH
24858: LD_INT 2
24860: PUSH
24861: LD_INT 3
24863: PUSH
24864: LD_INT 4
24866: PUSH
24867: LD_INT 5
24869: PUSH
24870: EMPTY
24871: LIST
24872: LIST
24873: LIST
24874: LIST
24875: LIST
24876: ST_TO_ADDR
24877: GO 25880
24879: LD_INT 3
24881: DOUBLE
24882: EQUAL
24883: IFTRUE 24887
24885: GO 24917
24887: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
24888: LD_ADDR_VAR 0 3
24892: PUSH
24893: LD_INT 1
24895: PUSH
24896: LD_INT 2
24898: PUSH
24899: LD_INT 3
24901: PUSH
24902: LD_INT 4
24904: PUSH
24905: LD_INT 5
24907: PUSH
24908: EMPTY
24909: LIST
24910: LIST
24911: LIST
24912: LIST
24913: LIST
24914: ST_TO_ADDR
24915: GO 25880
24917: LD_INT 11
24919: DOUBLE
24920: EQUAL
24921: IFTRUE 24925
24923: GO 24955
24925: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
24926: LD_ADDR_VAR 0 3
24930: PUSH
24931: LD_INT 1
24933: PUSH
24934: LD_INT 2
24936: PUSH
24937: LD_INT 3
24939: PUSH
24940: LD_INT 4
24942: PUSH
24943: LD_INT 5
24945: PUSH
24946: EMPTY
24947: LIST
24948: LIST
24949: LIST
24950: LIST
24951: LIST
24952: ST_TO_ADDR
24953: GO 25880
24955: LD_INT 4
24957: DOUBLE
24958: EQUAL
24959: IFTRUE 24963
24961: GO 24989
24963: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
24964: LD_ADDR_VAR 0 3
24968: PUSH
24969: LD_INT 2
24971: PUSH
24972: LD_INT 3
24974: PUSH
24975: LD_INT 4
24977: PUSH
24978: LD_INT 5
24980: PUSH
24981: EMPTY
24982: LIST
24983: LIST
24984: LIST
24985: LIST
24986: ST_TO_ADDR
24987: GO 25880
24989: LD_INT 5
24991: DOUBLE
24992: EQUAL
24993: IFTRUE 24997
24995: GO 25023
24997: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
24998: LD_ADDR_VAR 0 3
25002: PUSH
25003: LD_INT 2
25005: PUSH
25006: LD_INT 3
25008: PUSH
25009: LD_INT 4
25011: PUSH
25012: LD_INT 5
25014: PUSH
25015: EMPTY
25016: LIST
25017: LIST
25018: LIST
25019: LIST
25020: ST_TO_ADDR
25021: GO 25880
25023: LD_INT 9
25025: DOUBLE
25026: EQUAL
25027: IFTRUE 25031
25029: GO 25057
25031: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
25032: LD_ADDR_VAR 0 3
25036: PUSH
25037: LD_INT 2
25039: PUSH
25040: LD_INT 3
25042: PUSH
25043: LD_INT 4
25045: PUSH
25046: LD_INT 5
25048: PUSH
25049: EMPTY
25050: LIST
25051: LIST
25052: LIST
25053: LIST
25054: ST_TO_ADDR
25055: GO 25880
25057: LD_INT 7
25059: DOUBLE
25060: EQUAL
25061: IFTRUE 25065
25063: GO 25091
25065: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
25066: LD_ADDR_VAR 0 3
25070: PUSH
25071: LD_INT 2
25073: PUSH
25074: LD_INT 3
25076: PUSH
25077: LD_INT 4
25079: PUSH
25080: LD_INT 5
25082: PUSH
25083: EMPTY
25084: LIST
25085: LIST
25086: LIST
25087: LIST
25088: ST_TO_ADDR
25089: GO 25880
25091: LD_INT 12
25093: DOUBLE
25094: EQUAL
25095: IFTRUE 25099
25097: GO 25125
25099: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
25100: LD_ADDR_VAR 0 3
25104: PUSH
25105: LD_INT 2
25107: PUSH
25108: LD_INT 3
25110: PUSH
25111: LD_INT 4
25113: PUSH
25114: LD_INT 5
25116: PUSH
25117: EMPTY
25118: LIST
25119: LIST
25120: LIST
25121: LIST
25122: ST_TO_ADDR
25123: GO 25880
25125: LD_INT 13
25127: DOUBLE
25128: EQUAL
25129: IFTRUE 25133
25131: GO 25159
25133: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
25134: LD_ADDR_VAR 0 3
25138: PUSH
25139: LD_INT 2
25141: PUSH
25142: LD_INT 3
25144: PUSH
25145: LD_INT 4
25147: PUSH
25148: LD_INT 5
25150: PUSH
25151: EMPTY
25152: LIST
25153: LIST
25154: LIST
25155: LIST
25156: ST_TO_ADDR
25157: GO 25880
25159: LD_INT 14
25161: DOUBLE
25162: EQUAL
25163: IFTRUE 25167
25165: GO 25185
25167: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
25168: LD_ADDR_VAR 0 3
25172: PUSH
25173: LD_INT 4
25175: PUSH
25176: LD_INT 5
25178: PUSH
25179: EMPTY
25180: LIST
25181: LIST
25182: ST_TO_ADDR
25183: GO 25880
25185: LD_INT 6
25187: DOUBLE
25188: EQUAL
25189: IFTRUE 25193
25191: GO 25211
25193: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
25194: LD_ADDR_VAR 0 3
25198: PUSH
25199: LD_INT 4
25201: PUSH
25202: LD_INT 5
25204: PUSH
25205: EMPTY
25206: LIST
25207: LIST
25208: ST_TO_ADDR
25209: GO 25880
25211: LD_INT 10
25213: DOUBLE
25214: EQUAL
25215: IFTRUE 25219
25217: GO 25237
25219: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
25220: LD_ADDR_VAR 0 3
25224: PUSH
25225: LD_INT 4
25227: PUSH
25228: LD_INT 5
25230: PUSH
25231: EMPTY
25232: LIST
25233: LIST
25234: ST_TO_ADDR
25235: GO 25880
25237: LD_INT 22
25239: DOUBLE
25240: EQUAL
25241: IFTRUE 25245
25243: GO 25271
25245: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
25246: LD_ADDR_VAR 0 3
25250: PUSH
25251: LD_INT 11
25253: PUSH
25254: LD_INT 12
25256: PUSH
25257: LD_INT 13
25259: PUSH
25260: LD_INT 14
25262: PUSH
25263: EMPTY
25264: LIST
25265: LIST
25266: LIST
25267: LIST
25268: ST_TO_ADDR
25269: GO 25880
25271: LD_INT 23
25273: DOUBLE
25274: EQUAL
25275: IFTRUE 25279
25277: GO 25305
25279: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
25280: LD_ADDR_VAR 0 3
25284: PUSH
25285: LD_INT 11
25287: PUSH
25288: LD_INT 12
25290: PUSH
25291: LD_INT 13
25293: PUSH
25294: LD_INT 14
25296: PUSH
25297: EMPTY
25298: LIST
25299: LIST
25300: LIST
25301: LIST
25302: ST_TO_ADDR
25303: GO 25880
25305: LD_INT 24
25307: DOUBLE
25308: EQUAL
25309: IFTRUE 25313
25311: GO 25339
25313: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
25314: LD_ADDR_VAR 0 3
25318: PUSH
25319: LD_INT 11
25321: PUSH
25322: LD_INT 12
25324: PUSH
25325: LD_INT 13
25327: PUSH
25328: LD_INT 14
25330: PUSH
25331: EMPTY
25332: LIST
25333: LIST
25334: LIST
25335: LIST
25336: ST_TO_ADDR
25337: GO 25880
25339: LD_INT 30
25341: DOUBLE
25342: EQUAL
25343: IFTRUE 25347
25345: GO 25373
25347: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
25348: LD_ADDR_VAR 0 3
25352: PUSH
25353: LD_INT 11
25355: PUSH
25356: LD_INT 12
25358: PUSH
25359: LD_INT 13
25361: PUSH
25362: LD_INT 14
25364: PUSH
25365: EMPTY
25366: LIST
25367: LIST
25368: LIST
25369: LIST
25370: ST_TO_ADDR
25371: GO 25880
25373: LD_INT 25
25375: DOUBLE
25376: EQUAL
25377: IFTRUE 25381
25379: GO 25399
25381: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
25382: LD_ADDR_VAR 0 3
25386: PUSH
25387: LD_INT 13
25389: PUSH
25390: LD_INT 14
25392: PUSH
25393: EMPTY
25394: LIST
25395: LIST
25396: ST_TO_ADDR
25397: GO 25880
25399: LD_INT 27
25401: DOUBLE
25402: EQUAL
25403: IFTRUE 25407
25405: GO 25425
25407: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
25408: LD_ADDR_VAR 0 3
25412: PUSH
25413: LD_INT 13
25415: PUSH
25416: LD_INT 14
25418: PUSH
25419: EMPTY
25420: LIST
25421: LIST
25422: ST_TO_ADDR
25423: GO 25880
25425: LD_INT 92
25427: DOUBLE
25428: EQUAL
25429: IFTRUE 25433
25431: GO 25459
25433: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
25434: LD_ADDR_VAR 0 3
25438: PUSH
25439: LD_INT 11
25441: PUSH
25442: LD_INT 12
25444: PUSH
25445: LD_INT 13
25447: PUSH
25448: LD_INT 14
25450: PUSH
25451: EMPTY
25452: LIST
25453: LIST
25454: LIST
25455: LIST
25456: ST_TO_ADDR
25457: GO 25880
25459: LD_INT 28
25461: DOUBLE
25462: EQUAL
25463: IFTRUE 25467
25465: GO 25485
25467: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
25468: LD_ADDR_VAR 0 3
25472: PUSH
25473: LD_INT 13
25475: PUSH
25476: LD_INT 14
25478: PUSH
25479: EMPTY
25480: LIST
25481: LIST
25482: ST_TO_ADDR
25483: GO 25880
25485: LD_INT 29
25487: DOUBLE
25488: EQUAL
25489: IFTRUE 25493
25491: GO 25511
25493: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
25494: LD_ADDR_VAR 0 3
25498: PUSH
25499: LD_INT 13
25501: PUSH
25502: LD_INT 14
25504: PUSH
25505: EMPTY
25506: LIST
25507: LIST
25508: ST_TO_ADDR
25509: GO 25880
25511: LD_INT 31
25513: DOUBLE
25514: EQUAL
25515: IFTRUE 25519
25517: GO 25537
25519: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
25520: LD_ADDR_VAR 0 3
25524: PUSH
25525: LD_INT 13
25527: PUSH
25528: LD_INT 14
25530: PUSH
25531: EMPTY
25532: LIST
25533: LIST
25534: ST_TO_ADDR
25535: GO 25880
25537: LD_INT 26
25539: DOUBLE
25540: EQUAL
25541: IFTRUE 25545
25543: GO 25563
25545: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
25546: LD_ADDR_VAR 0 3
25550: PUSH
25551: LD_INT 13
25553: PUSH
25554: LD_INT 14
25556: PUSH
25557: EMPTY
25558: LIST
25559: LIST
25560: ST_TO_ADDR
25561: GO 25880
25563: LD_INT 42
25565: DOUBLE
25566: EQUAL
25567: IFTRUE 25571
25569: GO 25597
25571: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
25572: LD_ADDR_VAR 0 3
25576: PUSH
25577: LD_INT 21
25579: PUSH
25580: LD_INT 22
25582: PUSH
25583: LD_INT 23
25585: PUSH
25586: LD_INT 24
25588: PUSH
25589: EMPTY
25590: LIST
25591: LIST
25592: LIST
25593: LIST
25594: ST_TO_ADDR
25595: GO 25880
25597: LD_INT 43
25599: DOUBLE
25600: EQUAL
25601: IFTRUE 25605
25603: GO 25631
25605: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
25606: LD_ADDR_VAR 0 3
25610: PUSH
25611: LD_INT 21
25613: PUSH
25614: LD_INT 22
25616: PUSH
25617: LD_INT 23
25619: PUSH
25620: LD_INT 24
25622: PUSH
25623: EMPTY
25624: LIST
25625: LIST
25626: LIST
25627: LIST
25628: ST_TO_ADDR
25629: GO 25880
25631: LD_INT 44
25633: DOUBLE
25634: EQUAL
25635: IFTRUE 25639
25637: GO 25665
25639: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
25640: LD_ADDR_VAR 0 3
25644: PUSH
25645: LD_INT 21
25647: PUSH
25648: LD_INT 22
25650: PUSH
25651: LD_INT 23
25653: PUSH
25654: LD_INT 24
25656: PUSH
25657: EMPTY
25658: LIST
25659: LIST
25660: LIST
25661: LIST
25662: ST_TO_ADDR
25663: GO 25880
25665: LD_INT 45
25667: DOUBLE
25668: EQUAL
25669: IFTRUE 25673
25671: GO 25699
25673: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
25674: LD_ADDR_VAR 0 3
25678: PUSH
25679: LD_INT 21
25681: PUSH
25682: LD_INT 22
25684: PUSH
25685: LD_INT 23
25687: PUSH
25688: LD_INT 24
25690: PUSH
25691: EMPTY
25692: LIST
25693: LIST
25694: LIST
25695: LIST
25696: ST_TO_ADDR
25697: GO 25880
25699: LD_INT 49
25701: DOUBLE
25702: EQUAL
25703: IFTRUE 25707
25705: GO 25733
25707: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
25708: LD_ADDR_VAR 0 3
25712: PUSH
25713: LD_INT 21
25715: PUSH
25716: LD_INT 22
25718: PUSH
25719: LD_INT 23
25721: PUSH
25722: LD_INT 24
25724: PUSH
25725: EMPTY
25726: LIST
25727: LIST
25728: LIST
25729: LIST
25730: ST_TO_ADDR
25731: GO 25880
25733: LD_INT 51
25735: DOUBLE
25736: EQUAL
25737: IFTRUE 25741
25739: GO 25767
25741: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
25742: LD_ADDR_VAR 0 3
25746: PUSH
25747: LD_INT 21
25749: PUSH
25750: LD_INT 22
25752: PUSH
25753: LD_INT 23
25755: PUSH
25756: LD_INT 24
25758: PUSH
25759: EMPTY
25760: LIST
25761: LIST
25762: LIST
25763: LIST
25764: ST_TO_ADDR
25765: GO 25880
25767: LD_INT 52
25769: DOUBLE
25770: EQUAL
25771: IFTRUE 25775
25773: GO 25801
25775: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
25776: LD_ADDR_VAR 0 3
25780: PUSH
25781: LD_INT 21
25783: PUSH
25784: LD_INT 22
25786: PUSH
25787: LD_INT 23
25789: PUSH
25790: LD_INT 24
25792: PUSH
25793: EMPTY
25794: LIST
25795: LIST
25796: LIST
25797: LIST
25798: ST_TO_ADDR
25799: GO 25880
25801: LD_INT 53
25803: DOUBLE
25804: EQUAL
25805: IFTRUE 25809
25807: GO 25827
25809: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
25810: LD_ADDR_VAR 0 3
25814: PUSH
25815: LD_INT 23
25817: PUSH
25818: LD_INT 24
25820: PUSH
25821: EMPTY
25822: LIST
25823: LIST
25824: ST_TO_ADDR
25825: GO 25880
25827: LD_INT 46
25829: DOUBLE
25830: EQUAL
25831: IFTRUE 25835
25833: GO 25853
25835: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
25836: LD_ADDR_VAR 0 3
25840: PUSH
25841: LD_INT 23
25843: PUSH
25844: LD_INT 24
25846: PUSH
25847: EMPTY
25848: LIST
25849: LIST
25850: ST_TO_ADDR
25851: GO 25880
25853: LD_INT 47
25855: DOUBLE
25856: EQUAL
25857: IFTRUE 25861
25859: GO 25879
25861: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
25862: LD_ADDR_VAR 0 3
25866: PUSH
25867: LD_INT 23
25869: PUSH
25870: LD_INT 24
25872: PUSH
25873: EMPTY
25874: LIST
25875: LIST
25876: ST_TO_ADDR
25877: GO 25880
25879: POP
// result := ( chassis in result ) ;
25880: LD_ADDR_VAR 0 3
25884: PUSH
25885: LD_VAR 0 1
25889: PUSH
25890: LD_VAR 0 3
25894: IN
25895: ST_TO_ADDR
// end ;
25896: LD_VAR 0 3
25900: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
25901: LD_INT 0
25903: PPUSH
25904: PPUSH
25905: PPUSH
25906: PPUSH
25907: PPUSH
25908: PPUSH
25909: PPUSH
// result := array ;
25910: LD_ADDR_VAR 0 5
25914: PUSH
25915: LD_VAR 0 1
25919: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
25920: LD_VAR 0 1
25924: NOT
25925: PUSH
25926: LD_VAR 0 2
25930: NOT
25931: OR
25932: PUSH
25933: LD_VAR 0 3
25937: NOT
25938: OR
25939: PUSH
25940: LD_VAR 0 2
25944: PUSH
25945: LD_VAR 0 1
25949: GREATER
25950: OR
25951: PUSH
25952: LD_VAR 0 3
25956: PUSH
25957: LD_VAR 0 1
25961: GREATER
25962: OR
25963: IFFALSE 25967
// exit ;
25965: GO 26263
// if direction then
25967: LD_VAR 0 4
25971: IFFALSE 26035
// begin d := 1 ;
25973: LD_ADDR_VAR 0 9
25977: PUSH
25978: LD_INT 1
25980: ST_TO_ADDR
// if i_from > i_to then
25981: LD_VAR 0 2
25985: PUSH
25986: LD_VAR 0 3
25990: GREATER
25991: IFFALSE 26017
// length := ( array - i_from ) + i_to else
25993: LD_ADDR_VAR 0 11
25997: PUSH
25998: LD_VAR 0 1
26002: PUSH
26003: LD_VAR 0 2
26007: MINUS
26008: PUSH
26009: LD_VAR 0 3
26013: PLUS
26014: ST_TO_ADDR
26015: GO 26033
// length := i_to - i_from ;
26017: LD_ADDR_VAR 0 11
26021: PUSH
26022: LD_VAR 0 3
26026: PUSH
26027: LD_VAR 0 2
26031: MINUS
26032: ST_TO_ADDR
// end else
26033: GO 26096
// begin d := - 1 ;
26035: LD_ADDR_VAR 0 9
26039: PUSH
26040: LD_INT 1
26042: NEG
26043: ST_TO_ADDR
// if i_from > i_to then
26044: LD_VAR 0 2
26048: PUSH
26049: LD_VAR 0 3
26053: GREATER
26054: IFFALSE 26074
// length := i_from - i_to else
26056: LD_ADDR_VAR 0 11
26060: PUSH
26061: LD_VAR 0 2
26065: PUSH
26066: LD_VAR 0 3
26070: MINUS
26071: ST_TO_ADDR
26072: GO 26096
// length := ( array - i_to ) + i_from ;
26074: LD_ADDR_VAR 0 11
26078: PUSH
26079: LD_VAR 0 1
26083: PUSH
26084: LD_VAR 0 3
26088: MINUS
26089: PUSH
26090: LD_VAR 0 2
26094: PLUS
26095: ST_TO_ADDR
// end ; if not length then
26096: LD_VAR 0 11
26100: NOT
26101: IFFALSE 26105
// exit ;
26103: GO 26263
// tmp := array ;
26105: LD_ADDR_VAR 0 10
26109: PUSH
26110: LD_VAR 0 1
26114: ST_TO_ADDR
// for i = 1 to length do
26115: LD_ADDR_VAR 0 6
26119: PUSH
26120: DOUBLE
26121: LD_INT 1
26123: DEC
26124: ST_TO_ADDR
26125: LD_VAR 0 11
26129: PUSH
26130: FOR_TO
26131: IFFALSE 26251
// begin for j = 1 to array do
26133: LD_ADDR_VAR 0 7
26137: PUSH
26138: DOUBLE
26139: LD_INT 1
26141: DEC
26142: ST_TO_ADDR
26143: LD_VAR 0 1
26147: PUSH
26148: FOR_TO
26149: IFFALSE 26237
// begin k := j + d ;
26151: LD_ADDR_VAR 0 8
26155: PUSH
26156: LD_VAR 0 7
26160: PUSH
26161: LD_VAR 0 9
26165: PLUS
26166: ST_TO_ADDR
// if k > array then
26167: LD_VAR 0 8
26171: PUSH
26172: LD_VAR 0 1
26176: GREATER
26177: IFFALSE 26187
// k := 1 ;
26179: LD_ADDR_VAR 0 8
26183: PUSH
26184: LD_INT 1
26186: ST_TO_ADDR
// if not k then
26187: LD_VAR 0 8
26191: NOT
26192: IFFALSE 26204
// k := array ;
26194: LD_ADDR_VAR 0 8
26198: PUSH
26199: LD_VAR 0 1
26203: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
26204: LD_ADDR_VAR 0 10
26208: PUSH
26209: LD_VAR 0 10
26213: PPUSH
26214: LD_VAR 0 8
26218: PPUSH
26219: LD_VAR 0 1
26223: PUSH
26224: LD_VAR 0 7
26228: ARRAY
26229: PPUSH
26230: CALL_OW 1
26234: ST_TO_ADDR
// end ;
26235: GO 26148
26237: POP
26238: POP
// array := tmp ;
26239: LD_ADDR_VAR 0 1
26243: PUSH
26244: LD_VAR 0 10
26248: ST_TO_ADDR
// end ;
26249: GO 26130
26251: POP
26252: POP
// result := array ;
26253: LD_ADDR_VAR 0 5
26257: PUSH
26258: LD_VAR 0 1
26262: ST_TO_ADDR
// end ;
26263: LD_VAR 0 5
26267: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
26268: LD_INT 0
26270: PPUSH
26271: PPUSH
// result := 0 ;
26272: LD_ADDR_VAR 0 3
26276: PUSH
26277: LD_INT 0
26279: ST_TO_ADDR
// if not array or not value in array then
26280: LD_VAR 0 1
26284: NOT
26285: PUSH
26286: LD_VAR 0 2
26290: PUSH
26291: LD_VAR 0 1
26295: IN
26296: NOT
26297: OR
26298: IFFALSE 26302
// exit ;
26300: GO 26356
// for i = 1 to array do
26302: LD_ADDR_VAR 0 4
26306: PUSH
26307: DOUBLE
26308: LD_INT 1
26310: DEC
26311: ST_TO_ADDR
26312: LD_VAR 0 1
26316: PUSH
26317: FOR_TO
26318: IFFALSE 26354
// if value = array [ i ] then
26320: LD_VAR 0 2
26324: PUSH
26325: LD_VAR 0 1
26329: PUSH
26330: LD_VAR 0 4
26334: ARRAY
26335: EQUAL
26336: IFFALSE 26352
// begin result := i ;
26338: LD_ADDR_VAR 0 3
26342: PUSH
26343: LD_VAR 0 4
26347: ST_TO_ADDR
// exit ;
26348: POP
26349: POP
26350: GO 26356
// end ;
26352: GO 26317
26354: POP
26355: POP
// end ;
26356: LD_VAR 0 3
26360: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
26361: LD_INT 0
26363: PPUSH
// vc_chassis := chassis ;
26364: LD_ADDR_OWVAR 37
26368: PUSH
26369: LD_VAR 0 1
26373: ST_TO_ADDR
// vc_engine := engine ;
26374: LD_ADDR_OWVAR 39
26378: PUSH
26379: LD_VAR 0 2
26383: ST_TO_ADDR
// vc_control := control ;
26384: LD_ADDR_OWVAR 38
26388: PUSH
26389: LD_VAR 0 3
26393: ST_TO_ADDR
// vc_weapon := weapon ;
26394: LD_ADDR_OWVAR 40
26398: PUSH
26399: LD_VAR 0 4
26403: ST_TO_ADDR
// vc_fuel_battery := fuel ;
26404: LD_ADDR_OWVAR 41
26408: PUSH
26409: LD_VAR 0 5
26413: ST_TO_ADDR
// end ;
26414: LD_VAR 0 6
26418: RET
// export function WantPlant ( unit ) ; var task ; begin
26419: LD_INT 0
26421: PPUSH
26422: PPUSH
// result := false ;
26423: LD_ADDR_VAR 0 2
26427: PUSH
26428: LD_INT 0
26430: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
26431: LD_ADDR_VAR 0 3
26435: PUSH
26436: LD_VAR 0 1
26440: PPUSH
26441: CALL_OW 437
26445: ST_TO_ADDR
// if task then
26446: LD_VAR 0 3
26450: IFFALSE 26478
// if task [ 1 ] [ 1 ] = p then
26452: LD_VAR 0 3
26456: PUSH
26457: LD_INT 1
26459: ARRAY
26460: PUSH
26461: LD_INT 1
26463: ARRAY
26464: PUSH
26465: LD_STRING p
26467: EQUAL
26468: IFFALSE 26478
// result := true ;
26470: LD_ADDR_VAR 0 2
26474: PUSH
26475: LD_INT 1
26477: ST_TO_ADDR
// end ;
26478: LD_VAR 0 2
26482: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
26483: LD_INT 0
26485: PPUSH
26486: PPUSH
26487: PPUSH
26488: PPUSH
// if pos < 1 then
26489: LD_VAR 0 2
26493: PUSH
26494: LD_INT 1
26496: LESS
26497: IFFALSE 26501
// exit ;
26499: GO 26804
// if pos = 1 then
26501: LD_VAR 0 2
26505: PUSH
26506: LD_INT 1
26508: EQUAL
26509: IFFALSE 26542
// result := Replace ( arr , pos [ 1 ] , value ) else
26511: LD_ADDR_VAR 0 4
26515: PUSH
26516: LD_VAR 0 1
26520: PPUSH
26521: LD_VAR 0 2
26525: PUSH
26526: LD_INT 1
26528: ARRAY
26529: PPUSH
26530: LD_VAR 0 3
26534: PPUSH
26535: CALL_OW 1
26539: ST_TO_ADDR
26540: GO 26804
// begin tmp := arr ;
26542: LD_ADDR_VAR 0 6
26546: PUSH
26547: LD_VAR 0 1
26551: ST_TO_ADDR
// s_arr := [ tmp ] ;
26552: LD_ADDR_VAR 0 7
26556: PUSH
26557: LD_VAR 0 6
26561: PUSH
26562: EMPTY
26563: LIST
26564: ST_TO_ADDR
// for i = 1 to pos - 1 do
26565: LD_ADDR_VAR 0 5
26569: PUSH
26570: DOUBLE
26571: LD_INT 1
26573: DEC
26574: ST_TO_ADDR
26575: LD_VAR 0 2
26579: PUSH
26580: LD_INT 1
26582: MINUS
26583: PUSH
26584: FOR_TO
26585: IFFALSE 26630
// begin tmp := tmp [ pos [ i ] ] ;
26587: LD_ADDR_VAR 0 6
26591: PUSH
26592: LD_VAR 0 6
26596: PUSH
26597: LD_VAR 0 2
26601: PUSH
26602: LD_VAR 0 5
26606: ARRAY
26607: ARRAY
26608: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
26609: LD_ADDR_VAR 0 7
26613: PUSH
26614: LD_VAR 0 7
26618: PUSH
26619: LD_VAR 0 6
26623: PUSH
26624: EMPTY
26625: LIST
26626: ADD
26627: ST_TO_ADDR
// end ;
26628: GO 26584
26630: POP
26631: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
26632: LD_ADDR_VAR 0 6
26636: PUSH
26637: LD_VAR 0 6
26641: PPUSH
26642: LD_VAR 0 2
26646: PUSH
26647: LD_VAR 0 2
26651: ARRAY
26652: PPUSH
26653: LD_VAR 0 3
26657: PPUSH
26658: CALL_OW 1
26662: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
26663: LD_ADDR_VAR 0 7
26667: PUSH
26668: LD_VAR 0 7
26672: PPUSH
26673: LD_VAR 0 7
26677: PPUSH
26678: LD_VAR 0 6
26682: PPUSH
26683: CALL_OW 1
26687: ST_TO_ADDR
// for i = s_arr downto 2 do
26688: LD_ADDR_VAR 0 5
26692: PUSH
26693: DOUBLE
26694: LD_VAR 0 7
26698: INC
26699: ST_TO_ADDR
26700: LD_INT 2
26702: PUSH
26703: FOR_DOWNTO
26704: IFFALSE 26788
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
26706: LD_ADDR_VAR 0 6
26710: PUSH
26711: LD_VAR 0 7
26715: PUSH
26716: LD_VAR 0 5
26720: PUSH
26721: LD_INT 1
26723: MINUS
26724: ARRAY
26725: PPUSH
26726: LD_VAR 0 2
26730: PUSH
26731: LD_VAR 0 5
26735: PUSH
26736: LD_INT 1
26738: MINUS
26739: ARRAY
26740: PPUSH
26741: LD_VAR 0 7
26745: PUSH
26746: LD_VAR 0 5
26750: ARRAY
26751: PPUSH
26752: CALL_OW 1
26756: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
26757: LD_ADDR_VAR 0 7
26761: PUSH
26762: LD_VAR 0 7
26766: PPUSH
26767: LD_VAR 0 5
26771: PUSH
26772: LD_INT 1
26774: MINUS
26775: PPUSH
26776: LD_VAR 0 6
26780: PPUSH
26781: CALL_OW 1
26785: ST_TO_ADDR
// end ;
26786: GO 26703
26788: POP
26789: POP
// result := s_arr [ 1 ] ;
26790: LD_ADDR_VAR 0 4
26794: PUSH
26795: LD_VAR 0 7
26799: PUSH
26800: LD_INT 1
26802: ARRAY
26803: ST_TO_ADDR
// end ; end ;
26804: LD_VAR 0 4
26808: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
26809: LD_INT 0
26811: PPUSH
26812: PPUSH
// if not list then
26813: LD_VAR 0 1
26817: NOT
26818: IFFALSE 26822
// exit ;
26820: GO 26913
// i := list [ pos1 ] ;
26822: LD_ADDR_VAR 0 5
26826: PUSH
26827: LD_VAR 0 1
26831: PUSH
26832: LD_VAR 0 2
26836: ARRAY
26837: ST_TO_ADDR
// if not i then
26838: LD_VAR 0 5
26842: NOT
26843: IFFALSE 26847
// exit ;
26845: GO 26913
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
26847: LD_ADDR_VAR 0 1
26851: PUSH
26852: LD_VAR 0 1
26856: PPUSH
26857: LD_VAR 0 2
26861: PPUSH
26862: LD_VAR 0 1
26866: PUSH
26867: LD_VAR 0 3
26871: ARRAY
26872: PPUSH
26873: CALL_OW 1
26877: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
26878: LD_ADDR_VAR 0 1
26882: PUSH
26883: LD_VAR 0 1
26887: PPUSH
26888: LD_VAR 0 3
26892: PPUSH
26893: LD_VAR 0 5
26897: PPUSH
26898: CALL_OW 1
26902: ST_TO_ADDR
// result := list ;
26903: LD_ADDR_VAR 0 4
26907: PUSH
26908: LD_VAR 0 1
26912: ST_TO_ADDR
// end ;
26913: LD_VAR 0 4
26917: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
26918: LD_INT 0
26920: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
26921: LD_ADDR_VAR 0 5
26925: PUSH
26926: LD_VAR 0 1
26930: PPUSH
26931: CALL_OW 250
26935: PPUSH
26936: LD_VAR 0 1
26940: PPUSH
26941: CALL_OW 251
26945: PPUSH
26946: LD_VAR 0 2
26950: PPUSH
26951: LD_VAR 0 3
26955: PPUSH
26956: LD_VAR 0 4
26960: PPUSH
26961: CALL 27339 0 5
26965: ST_TO_ADDR
// end ;
26966: LD_VAR 0 5
26970: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
26971: LD_INT 0
26973: PPUSH
26974: PPUSH
26975: PPUSH
26976: PPUSH
// if not list or not unit then
26977: LD_VAR 0 2
26981: NOT
26982: PUSH
26983: LD_VAR 0 1
26987: NOT
26988: OR
26989: IFFALSE 26993
// exit ;
26991: GO 27334
// result := [ ] ;
26993: LD_ADDR_VAR 0 5
26997: PUSH
26998: EMPTY
26999: ST_TO_ADDR
// for i in list do
27000: LD_ADDR_VAR 0 6
27004: PUSH
27005: LD_VAR 0 2
27009: PUSH
27010: FOR_IN
27011: IFFALSE 27229
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
27013: LD_ADDR_VAR 0 8
27017: PUSH
27018: LD_VAR 0 1
27022: PPUSH
27023: LD_VAR 0 6
27027: PUSH
27028: LD_INT 1
27030: ARRAY
27031: PPUSH
27032: LD_VAR 0 6
27036: PUSH
27037: LD_INT 2
27039: ARRAY
27040: PPUSH
27041: CALL_OW 297
27045: ST_TO_ADDR
// if not Count ( result ) then
27046: LD_VAR 0 5
27050: PPUSH
27051: CALL 23623 0 1
27055: NOT
27056: IFFALSE 27089
// begin result := Join ( result , [ i , tmp ] ) ;
27058: LD_ADDR_VAR 0 5
27062: PUSH
27063: LD_VAR 0 5
27067: PPUSH
27068: LD_VAR 0 6
27072: PUSH
27073: LD_VAR 0 8
27077: PUSH
27078: EMPTY
27079: LIST
27080: LIST
27081: PPUSH
27082: CALL 59232 0 2
27086: ST_TO_ADDR
// continue ;
27087: GO 27010
// end ; if result [ result ] [ 2 ] <= tmp then
27089: LD_VAR 0 5
27093: PUSH
27094: LD_VAR 0 5
27098: ARRAY
27099: PUSH
27100: LD_INT 2
27102: ARRAY
27103: PUSH
27104: LD_VAR 0 8
27108: LESSEQUAL
27109: IFFALSE 27142
// result := Join ( result , [ i , tmp ] ) else
27111: LD_ADDR_VAR 0 5
27115: PUSH
27116: LD_VAR 0 5
27120: PPUSH
27121: LD_VAR 0 6
27125: PUSH
27126: LD_VAR 0 8
27130: PUSH
27131: EMPTY
27132: LIST
27133: LIST
27134: PPUSH
27135: CALL 59232 0 2
27139: ST_TO_ADDR
27140: GO 27227
// begin for j := 1 to Count ( result ) do
27142: LD_ADDR_VAR 0 7
27146: PUSH
27147: DOUBLE
27148: LD_INT 1
27150: DEC
27151: ST_TO_ADDR
27152: LD_VAR 0 5
27156: PPUSH
27157: CALL 23623 0 1
27161: PUSH
27162: FOR_TO
27163: IFFALSE 27225
// begin if tmp < result [ j ] [ 2 ] then
27165: LD_VAR 0 8
27169: PUSH
27170: LD_VAR 0 5
27174: PUSH
27175: LD_VAR 0 7
27179: ARRAY
27180: PUSH
27181: LD_INT 2
27183: ARRAY
27184: LESS
27185: IFFALSE 27223
// begin result := Insert ( result , j , [ i , tmp ] ) ;
27187: LD_ADDR_VAR 0 5
27191: PUSH
27192: LD_VAR 0 5
27196: PPUSH
27197: LD_VAR 0 7
27201: PPUSH
27202: LD_VAR 0 6
27206: PUSH
27207: LD_VAR 0 8
27211: PUSH
27212: EMPTY
27213: LIST
27214: LIST
27215: PPUSH
27216: CALL_OW 2
27220: ST_TO_ADDR
// break ;
27221: GO 27225
// end ; end ;
27223: GO 27162
27225: POP
27226: POP
// end ; end ;
27227: GO 27010
27229: POP
27230: POP
// if result and not asc then
27231: LD_VAR 0 5
27235: PUSH
27236: LD_VAR 0 3
27240: NOT
27241: AND
27242: IFFALSE 27259
// result := ReverseArray ( result ) ;
27244: LD_ADDR_VAR 0 5
27248: PUSH
27249: LD_VAR 0 5
27253: PPUSH
27254: CALL 54499 0 1
27258: ST_TO_ADDR
// tmp := [ ] ;
27259: LD_ADDR_VAR 0 8
27263: PUSH
27264: EMPTY
27265: ST_TO_ADDR
// if mode then
27266: LD_VAR 0 4
27270: IFFALSE 27334
// begin for i := 1 to result do
27272: LD_ADDR_VAR 0 6
27276: PUSH
27277: DOUBLE
27278: LD_INT 1
27280: DEC
27281: ST_TO_ADDR
27282: LD_VAR 0 5
27286: PUSH
27287: FOR_TO
27288: IFFALSE 27322
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
27290: LD_ADDR_VAR 0 8
27294: PUSH
27295: LD_VAR 0 8
27299: PPUSH
27300: LD_VAR 0 5
27304: PUSH
27305: LD_VAR 0 6
27309: ARRAY
27310: PUSH
27311: LD_INT 1
27313: ARRAY
27314: PPUSH
27315: CALL 59232 0 2
27319: ST_TO_ADDR
27320: GO 27287
27322: POP
27323: POP
// result := tmp ;
27324: LD_ADDR_VAR 0 5
27328: PUSH
27329: LD_VAR 0 8
27333: ST_TO_ADDR
// end ; end ;
27334: LD_VAR 0 5
27338: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
27339: LD_INT 0
27341: PPUSH
27342: PPUSH
27343: PPUSH
27344: PPUSH
// if not list then
27345: LD_VAR 0 3
27349: NOT
27350: IFFALSE 27354
// exit ;
27352: GO 27742
// result := [ ] ;
27354: LD_ADDR_VAR 0 6
27358: PUSH
27359: EMPTY
27360: ST_TO_ADDR
// for i in list do
27361: LD_ADDR_VAR 0 7
27365: PUSH
27366: LD_VAR 0 3
27370: PUSH
27371: FOR_IN
27372: IFFALSE 27574
// begin tmp := GetDistUnitXY ( i , x , y ) ;
27374: LD_ADDR_VAR 0 9
27378: PUSH
27379: LD_VAR 0 7
27383: PPUSH
27384: LD_VAR 0 1
27388: PPUSH
27389: LD_VAR 0 2
27393: PPUSH
27394: CALL_OW 297
27398: ST_TO_ADDR
// if not result then
27399: LD_VAR 0 6
27403: NOT
27404: IFFALSE 27430
// result := [ [ i , tmp ] ] else
27406: LD_ADDR_VAR 0 6
27410: PUSH
27411: LD_VAR 0 7
27415: PUSH
27416: LD_VAR 0 9
27420: PUSH
27421: EMPTY
27422: LIST
27423: LIST
27424: PUSH
27425: EMPTY
27426: LIST
27427: ST_TO_ADDR
27428: GO 27572
// begin if result [ result ] [ 2 ] <= tmp then
27430: LD_VAR 0 6
27434: PUSH
27435: LD_VAR 0 6
27439: ARRAY
27440: PUSH
27441: LD_INT 2
27443: ARRAY
27444: PUSH
27445: LD_VAR 0 9
27449: LESSEQUAL
27450: IFFALSE 27492
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
27452: LD_ADDR_VAR 0 6
27456: PUSH
27457: LD_VAR 0 6
27461: PPUSH
27462: LD_VAR 0 6
27466: PUSH
27467: LD_INT 1
27469: PLUS
27470: PPUSH
27471: LD_VAR 0 7
27475: PUSH
27476: LD_VAR 0 9
27480: PUSH
27481: EMPTY
27482: LIST
27483: LIST
27484: PPUSH
27485: CALL_OW 2
27489: ST_TO_ADDR
27490: GO 27572
// for j := 1 to result do
27492: LD_ADDR_VAR 0 8
27496: PUSH
27497: DOUBLE
27498: LD_INT 1
27500: DEC
27501: ST_TO_ADDR
27502: LD_VAR 0 6
27506: PUSH
27507: FOR_TO
27508: IFFALSE 27570
// begin if tmp < result [ j ] [ 2 ] then
27510: LD_VAR 0 9
27514: PUSH
27515: LD_VAR 0 6
27519: PUSH
27520: LD_VAR 0 8
27524: ARRAY
27525: PUSH
27526: LD_INT 2
27528: ARRAY
27529: LESS
27530: IFFALSE 27568
// begin result := Insert ( result , j , [ i , tmp ] ) ;
27532: LD_ADDR_VAR 0 6
27536: PUSH
27537: LD_VAR 0 6
27541: PPUSH
27542: LD_VAR 0 8
27546: PPUSH
27547: LD_VAR 0 7
27551: PUSH
27552: LD_VAR 0 9
27556: PUSH
27557: EMPTY
27558: LIST
27559: LIST
27560: PPUSH
27561: CALL_OW 2
27565: ST_TO_ADDR
// break ;
27566: GO 27570
// end ; end ;
27568: GO 27507
27570: POP
27571: POP
// end ; end ;
27572: GO 27371
27574: POP
27575: POP
// if result and not asc then
27576: LD_VAR 0 6
27580: PUSH
27581: LD_VAR 0 4
27585: NOT
27586: AND
27587: IFFALSE 27662
// begin tmp := result ;
27589: LD_ADDR_VAR 0 9
27593: PUSH
27594: LD_VAR 0 6
27598: ST_TO_ADDR
// for i = tmp downto 1 do
27599: LD_ADDR_VAR 0 7
27603: PUSH
27604: DOUBLE
27605: LD_VAR 0 9
27609: INC
27610: ST_TO_ADDR
27611: LD_INT 1
27613: PUSH
27614: FOR_DOWNTO
27615: IFFALSE 27660
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
27617: LD_ADDR_VAR 0 6
27621: PUSH
27622: LD_VAR 0 6
27626: PPUSH
27627: LD_VAR 0 9
27631: PUSH
27632: LD_VAR 0 7
27636: MINUS
27637: PUSH
27638: LD_INT 1
27640: PLUS
27641: PPUSH
27642: LD_VAR 0 9
27646: PUSH
27647: LD_VAR 0 7
27651: ARRAY
27652: PPUSH
27653: CALL_OW 1
27657: ST_TO_ADDR
27658: GO 27614
27660: POP
27661: POP
// end ; tmp := [ ] ;
27662: LD_ADDR_VAR 0 9
27666: PUSH
27667: EMPTY
27668: ST_TO_ADDR
// if mode then
27669: LD_VAR 0 5
27673: IFFALSE 27742
// begin for i = 1 to result do
27675: LD_ADDR_VAR 0 7
27679: PUSH
27680: DOUBLE
27681: LD_INT 1
27683: DEC
27684: ST_TO_ADDR
27685: LD_VAR 0 6
27689: PUSH
27690: FOR_TO
27691: IFFALSE 27730
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
27693: LD_ADDR_VAR 0 9
27697: PUSH
27698: LD_VAR 0 9
27702: PPUSH
27703: LD_VAR 0 7
27707: PPUSH
27708: LD_VAR 0 6
27712: PUSH
27713: LD_VAR 0 7
27717: ARRAY
27718: PUSH
27719: LD_INT 1
27721: ARRAY
27722: PPUSH
27723: CALL_OW 1
27727: ST_TO_ADDR
27728: GO 27690
27730: POP
27731: POP
// result := tmp ;
27732: LD_ADDR_VAR 0 6
27736: PUSH
27737: LD_VAR 0 9
27741: ST_TO_ADDR
// end ; end ;
27742: LD_VAR 0 6
27746: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
27747: LD_INT 0
27749: PPUSH
27750: PPUSH
27751: PPUSH
27752: PPUSH
27753: PPUSH
27754: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
27755: LD_ADDR_VAR 0 5
27759: PUSH
27760: LD_INT 0
27762: PUSH
27763: LD_INT 0
27765: PUSH
27766: LD_INT 0
27768: PUSH
27769: EMPTY
27770: PUSH
27771: EMPTY
27772: LIST
27773: LIST
27774: LIST
27775: LIST
27776: ST_TO_ADDR
// if not x or not y then
27777: LD_VAR 0 2
27781: NOT
27782: PUSH
27783: LD_VAR 0 3
27787: NOT
27788: OR
27789: IFFALSE 27793
// exit ;
27791: GO 29443
// if not range then
27793: LD_VAR 0 4
27797: NOT
27798: IFFALSE 27808
// range := 10 ;
27800: LD_ADDR_VAR 0 4
27804: PUSH
27805: LD_INT 10
27807: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
27808: LD_ADDR_VAR 0 8
27812: PUSH
27813: LD_INT 81
27815: PUSH
27816: LD_VAR 0 1
27820: PUSH
27821: EMPTY
27822: LIST
27823: LIST
27824: PUSH
27825: LD_INT 92
27827: PUSH
27828: LD_VAR 0 2
27832: PUSH
27833: LD_VAR 0 3
27837: PUSH
27838: LD_VAR 0 4
27842: PUSH
27843: EMPTY
27844: LIST
27845: LIST
27846: LIST
27847: LIST
27848: PUSH
27849: LD_INT 3
27851: PUSH
27852: LD_INT 21
27854: PUSH
27855: LD_INT 3
27857: PUSH
27858: EMPTY
27859: LIST
27860: LIST
27861: PUSH
27862: EMPTY
27863: LIST
27864: LIST
27865: PUSH
27866: EMPTY
27867: LIST
27868: LIST
27869: LIST
27870: PPUSH
27871: CALL_OW 69
27875: ST_TO_ADDR
// if not tmp then
27876: LD_VAR 0 8
27880: NOT
27881: IFFALSE 27885
// exit ;
27883: GO 29443
// for i in tmp do
27885: LD_ADDR_VAR 0 6
27889: PUSH
27890: LD_VAR 0 8
27894: PUSH
27895: FOR_IN
27896: IFFALSE 29418
// begin points := [ 0 , 0 , 0 ] ;
27898: LD_ADDR_VAR 0 9
27902: PUSH
27903: LD_INT 0
27905: PUSH
27906: LD_INT 0
27908: PUSH
27909: LD_INT 0
27911: PUSH
27912: EMPTY
27913: LIST
27914: LIST
27915: LIST
27916: ST_TO_ADDR
// bpoints := 1 ;
27917: LD_ADDR_VAR 0 10
27921: PUSH
27922: LD_INT 1
27924: ST_TO_ADDR
// case GetType ( i ) of unit_human :
27925: LD_VAR 0 6
27929: PPUSH
27930: CALL_OW 247
27934: PUSH
27935: LD_INT 1
27937: DOUBLE
27938: EQUAL
27939: IFTRUE 27943
27941: GO 28521
27943: POP
// begin if GetClass ( i ) = 1 then
27944: LD_VAR 0 6
27948: PPUSH
27949: CALL_OW 257
27953: PUSH
27954: LD_INT 1
27956: EQUAL
27957: IFFALSE 27978
// points := [ 10 , 5 , 3 ] ;
27959: LD_ADDR_VAR 0 9
27963: PUSH
27964: LD_INT 10
27966: PUSH
27967: LD_INT 5
27969: PUSH
27970: LD_INT 3
27972: PUSH
27973: EMPTY
27974: LIST
27975: LIST
27976: LIST
27977: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
27978: LD_VAR 0 6
27982: PPUSH
27983: CALL_OW 257
27987: PUSH
27988: LD_INT 2
27990: PUSH
27991: LD_INT 3
27993: PUSH
27994: LD_INT 4
27996: PUSH
27997: EMPTY
27998: LIST
27999: LIST
28000: LIST
28001: IN
28002: IFFALSE 28023
// points := [ 3 , 2 , 1 ] ;
28004: LD_ADDR_VAR 0 9
28008: PUSH
28009: LD_INT 3
28011: PUSH
28012: LD_INT 2
28014: PUSH
28015: LD_INT 1
28017: PUSH
28018: EMPTY
28019: LIST
28020: LIST
28021: LIST
28022: ST_TO_ADDR
// if GetClass ( i ) = 5 then
28023: LD_VAR 0 6
28027: PPUSH
28028: CALL_OW 257
28032: PUSH
28033: LD_INT 5
28035: EQUAL
28036: IFFALSE 28057
// points := [ 130 , 5 , 2 ] ;
28038: LD_ADDR_VAR 0 9
28042: PUSH
28043: LD_INT 130
28045: PUSH
28046: LD_INT 5
28048: PUSH
28049: LD_INT 2
28051: PUSH
28052: EMPTY
28053: LIST
28054: LIST
28055: LIST
28056: ST_TO_ADDR
// if GetClass ( i ) = 8 then
28057: LD_VAR 0 6
28061: PPUSH
28062: CALL_OW 257
28066: PUSH
28067: LD_INT 8
28069: EQUAL
28070: IFFALSE 28091
// points := [ 35 , 35 , 30 ] ;
28072: LD_ADDR_VAR 0 9
28076: PUSH
28077: LD_INT 35
28079: PUSH
28080: LD_INT 35
28082: PUSH
28083: LD_INT 30
28085: PUSH
28086: EMPTY
28087: LIST
28088: LIST
28089: LIST
28090: ST_TO_ADDR
// if GetClass ( i ) = 9 then
28091: LD_VAR 0 6
28095: PPUSH
28096: CALL_OW 257
28100: PUSH
28101: LD_INT 9
28103: EQUAL
28104: IFFALSE 28125
// points := [ 20 , 55 , 40 ] ;
28106: LD_ADDR_VAR 0 9
28110: PUSH
28111: LD_INT 20
28113: PUSH
28114: LD_INT 55
28116: PUSH
28117: LD_INT 40
28119: PUSH
28120: EMPTY
28121: LIST
28122: LIST
28123: LIST
28124: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
28125: LD_VAR 0 6
28129: PPUSH
28130: CALL_OW 257
28134: PUSH
28135: LD_INT 12
28137: PUSH
28138: LD_INT 16
28140: PUSH
28141: EMPTY
28142: LIST
28143: LIST
28144: IN
28145: IFFALSE 28166
// points := [ 5 , 3 , 2 ] ;
28147: LD_ADDR_VAR 0 9
28151: PUSH
28152: LD_INT 5
28154: PUSH
28155: LD_INT 3
28157: PUSH
28158: LD_INT 2
28160: PUSH
28161: EMPTY
28162: LIST
28163: LIST
28164: LIST
28165: ST_TO_ADDR
// if GetClass ( i ) = 17 then
28166: LD_VAR 0 6
28170: PPUSH
28171: CALL_OW 257
28175: PUSH
28176: LD_INT 17
28178: EQUAL
28179: IFFALSE 28200
// points := [ 100 , 50 , 75 ] ;
28181: LD_ADDR_VAR 0 9
28185: PUSH
28186: LD_INT 100
28188: PUSH
28189: LD_INT 50
28191: PUSH
28192: LD_INT 75
28194: PUSH
28195: EMPTY
28196: LIST
28197: LIST
28198: LIST
28199: ST_TO_ADDR
// if GetClass ( i ) = 15 then
28200: LD_VAR 0 6
28204: PPUSH
28205: CALL_OW 257
28209: PUSH
28210: LD_INT 15
28212: EQUAL
28213: IFFALSE 28234
// points := [ 10 , 5 , 3 ] ;
28215: LD_ADDR_VAR 0 9
28219: PUSH
28220: LD_INT 10
28222: PUSH
28223: LD_INT 5
28225: PUSH
28226: LD_INT 3
28228: PUSH
28229: EMPTY
28230: LIST
28231: LIST
28232: LIST
28233: ST_TO_ADDR
// if GetClass ( i ) = 14 then
28234: LD_VAR 0 6
28238: PPUSH
28239: CALL_OW 257
28243: PUSH
28244: LD_INT 14
28246: EQUAL
28247: IFFALSE 28268
// points := [ 10 , 0 , 0 ] ;
28249: LD_ADDR_VAR 0 9
28253: PUSH
28254: LD_INT 10
28256: PUSH
28257: LD_INT 0
28259: PUSH
28260: LD_INT 0
28262: PUSH
28263: EMPTY
28264: LIST
28265: LIST
28266: LIST
28267: ST_TO_ADDR
// if GetClass ( i ) = 11 then
28268: LD_VAR 0 6
28272: PPUSH
28273: CALL_OW 257
28277: PUSH
28278: LD_INT 11
28280: EQUAL
28281: IFFALSE 28302
// points := [ 30 , 10 , 5 ] ;
28283: LD_ADDR_VAR 0 9
28287: PUSH
28288: LD_INT 30
28290: PUSH
28291: LD_INT 10
28293: PUSH
28294: LD_INT 5
28296: PUSH
28297: EMPTY
28298: LIST
28299: LIST
28300: LIST
28301: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
28302: LD_VAR 0 1
28306: PPUSH
28307: LD_INT 5
28309: PPUSH
28310: CALL_OW 321
28314: PUSH
28315: LD_INT 2
28317: EQUAL
28318: IFFALSE 28335
// bpoints := bpoints * 1.8 ;
28320: LD_ADDR_VAR 0 10
28324: PUSH
28325: LD_VAR 0 10
28329: PUSH
28330: LD_REAL  1.80000000000000E+0000
28333: MUL
28334: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
28335: LD_VAR 0 6
28339: PPUSH
28340: CALL_OW 257
28344: PUSH
28345: LD_INT 1
28347: PUSH
28348: LD_INT 2
28350: PUSH
28351: LD_INT 3
28353: PUSH
28354: LD_INT 4
28356: PUSH
28357: EMPTY
28358: LIST
28359: LIST
28360: LIST
28361: LIST
28362: IN
28363: PUSH
28364: LD_VAR 0 1
28368: PPUSH
28369: LD_INT 51
28371: PPUSH
28372: CALL_OW 321
28376: PUSH
28377: LD_INT 2
28379: EQUAL
28380: AND
28381: IFFALSE 28398
// bpoints := bpoints * 1.2 ;
28383: LD_ADDR_VAR 0 10
28387: PUSH
28388: LD_VAR 0 10
28392: PUSH
28393: LD_REAL  1.20000000000000E+0000
28396: MUL
28397: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
28398: LD_VAR 0 6
28402: PPUSH
28403: CALL_OW 257
28407: PUSH
28408: LD_INT 5
28410: PUSH
28411: LD_INT 7
28413: PUSH
28414: LD_INT 9
28416: PUSH
28417: EMPTY
28418: LIST
28419: LIST
28420: LIST
28421: IN
28422: PUSH
28423: LD_VAR 0 1
28427: PPUSH
28428: LD_INT 52
28430: PPUSH
28431: CALL_OW 321
28435: PUSH
28436: LD_INT 2
28438: EQUAL
28439: AND
28440: IFFALSE 28457
// bpoints := bpoints * 1.5 ;
28442: LD_ADDR_VAR 0 10
28446: PUSH
28447: LD_VAR 0 10
28451: PUSH
28452: LD_REAL  1.50000000000000E+0000
28455: MUL
28456: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
28457: LD_VAR 0 1
28461: PPUSH
28462: LD_INT 66
28464: PPUSH
28465: CALL_OW 321
28469: PUSH
28470: LD_INT 2
28472: EQUAL
28473: IFFALSE 28490
// bpoints := bpoints * 1.1 ;
28475: LD_ADDR_VAR 0 10
28479: PUSH
28480: LD_VAR 0 10
28484: PUSH
28485: LD_REAL  1.10000000000000E+0000
28488: MUL
28489: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
28490: LD_ADDR_VAR 0 10
28494: PUSH
28495: LD_VAR 0 10
28499: PUSH
28500: LD_VAR 0 6
28504: PPUSH
28505: LD_INT 1
28507: PPUSH
28508: CALL_OW 259
28512: PUSH
28513: LD_REAL  1.15000000000000E+0000
28516: MUL
28517: MUL
28518: ST_TO_ADDR
// end ; unit_vehicle :
28519: GO 29347
28521: LD_INT 2
28523: DOUBLE
28524: EQUAL
28525: IFTRUE 28529
28527: GO 29335
28529: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
28530: LD_VAR 0 6
28534: PPUSH
28535: CALL_OW 264
28539: PUSH
28540: LD_INT 2
28542: PUSH
28543: LD_INT 42
28545: PUSH
28546: LD_INT 24
28548: PUSH
28549: EMPTY
28550: LIST
28551: LIST
28552: LIST
28553: IN
28554: IFFALSE 28575
// points := [ 25 , 5 , 3 ] ;
28556: LD_ADDR_VAR 0 9
28560: PUSH
28561: LD_INT 25
28563: PUSH
28564: LD_INT 5
28566: PUSH
28567: LD_INT 3
28569: PUSH
28570: EMPTY
28571: LIST
28572: LIST
28573: LIST
28574: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
28575: LD_VAR 0 6
28579: PPUSH
28580: CALL_OW 264
28584: PUSH
28585: LD_INT 4
28587: PUSH
28588: LD_INT 43
28590: PUSH
28591: LD_INT 25
28593: PUSH
28594: EMPTY
28595: LIST
28596: LIST
28597: LIST
28598: IN
28599: IFFALSE 28620
// points := [ 40 , 15 , 5 ] ;
28601: LD_ADDR_VAR 0 9
28605: PUSH
28606: LD_INT 40
28608: PUSH
28609: LD_INT 15
28611: PUSH
28612: LD_INT 5
28614: PUSH
28615: EMPTY
28616: LIST
28617: LIST
28618: LIST
28619: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
28620: LD_VAR 0 6
28624: PPUSH
28625: CALL_OW 264
28629: PUSH
28630: LD_INT 3
28632: PUSH
28633: LD_INT 23
28635: PUSH
28636: EMPTY
28637: LIST
28638: LIST
28639: IN
28640: IFFALSE 28661
// points := [ 7 , 25 , 8 ] ;
28642: LD_ADDR_VAR 0 9
28646: PUSH
28647: LD_INT 7
28649: PUSH
28650: LD_INT 25
28652: PUSH
28653: LD_INT 8
28655: PUSH
28656: EMPTY
28657: LIST
28658: LIST
28659: LIST
28660: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
28661: LD_VAR 0 6
28665: PPUSH
28666: CALL_OW 264
28670: PUSH
28671: LD_INT 5
28673: PUSH
28674: LD_INT 27
28676: PUSH
28677: LD_INT 44
28679: PUSH
28680: EMPTY
28681: LIST
28682: LIST
28683: LIST
28684: IN
28685: IFFALSE 28706
// points := [ 14 , 50 , 16 ] ;
28687: LD_ADDR_VAR 0 9
28691: PUSH
28692: LD_INT 14
28694: PUSH
28695: LD_INT 50
28697: PUSH
28698: LD_INT 16
28700: PUSH
28701: EMPTY
28702: LIST
28703: LIST
28704: LIST
28705: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
28706: LD_VAR 0 6
28710: PPUSH
28711: CALL_OW 264
28715: PUSH
28716: LD_INT 6
28718: PUSH
28719: LD_INT 46
28721: PUSH
28722: EMPTY
28723: LIST
28724: LIST
28725: IN
28726: IFFALSE 28747
// points := [ 32 , 120 , 70 ] ;
28728: LD_ADDR_VAR 0 9
28732: PUSH
28733: LD_INT 32
28735: PUSH
28736: LD_INT 120
28738: PUSH
28739: LD_INT 70
28741: PUSH
28742: EMPTY
28743: LIST
28744: LIST
28745: LIST
28746: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
28747: LD_VAR 0 6
28751: PPUSH
28752: CALL_OW 264
28756: PUSH
28757: LD_INT 7
28759: PUSH
28760: LD_INT 28
28762: PUSH
28763: LD_INT 45
28765: PUSH
28766: LD_INT 92
28768: PUSH
28769: EMPTY
28770: LIST
28771: LIST
28772: LIST
28773: LIST
28774: IN
28775: IFFALSE 28796
// points := [ 35 , 20 , 45 ] ;
28777: LD_ADDR_VAR 0 9
28781: PUSH
28782: LD_INT 35
28784: PUSH
28785: LD_INT 20
28787: PUSH
28788: LD_INT 45
28790: PUSH
28791: EMPTY
28792: LIST
28793: LIST
28794: LIST
28795: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
28796: LD_VAR 0 6
28800: PPUSH
28801: CALL_OW 264
28805: PUSH
28806: LD_INT 47
28808: PUSH
28809: EMPTY
28810: LIST
28811: IN
28812: IFFALSE 28833
// points := [ 67 , 45 , 75 ] ;
28814: LD_ADDR_VAR 0 9
28818: PUSH
28819: LD_INT 67
28821: PUSH
28822: LD_INT 45
28824: PUSH
28825: LD_INT 75
28827: PUSH
28828: EMPTY
28829: LIST
28830: LIST
28831: LIST
28832: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
28833: LD_VAR 0 6
28837: PPUSH
28838: CALL_OW 264
28842: PUSH
28843: LD_INT 26
28845: PUSH
28846: EMPTY
28847: LIST
28848: IN
28849: IFFALSE 28870
// points := [ 120 , 30 , 80 ] ;
28851: LD_ADDR_VAR 0 9
28855: PUSH
28856: LD_INT 120
28858: PUSH
28859: LD_INT 30
28861: PUSH
28862: LD_INT 80
28864: PUSH
28865: EMPTY
28866: LIST
28867: LIST
28868: LIST
28869: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
28870: LD_VAR 0 6
28874: PPUSH
28875: CALL_OW 264
28879: PUSH
28880: LD_INT 22
28882: PUSH
28883: EMPTY
28884: LIST
28885: IN
28886: IFFALSE 28907
// points := [ 40 , 1 , 1 ] ;
28888: LD_ADDR_VAR 0 9
28892: PUSH
28893: LD_INT 40
28895: PUSH
28896: LD_INT 1
28898: PUSH
28899: LD_INT 1
28901: PUSH
28902: EMPTY
28903: LIST
28904: LIST
28905: LIST
28906: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
28907: LD_VAR 0 6
28911: PPUSH
28912: CALL_OW 264
28916: PUSH
28917: LD_INT 29
28919: PUSH
28920: EMPTY
28921: LIST
28922: IN
28923: IFFALSE 28944
// points := [ 70 , 200 , 400 ] ;
28925: LD_ADDR_VAR 0 9
28929: PUSH
28930: LD_INT 70
28932: PUSH
28933: LD_INT 200
28935: PUSH
28936: LD_INT 400
28938: PUSH
28939: EMPTY
28940: LIST
28941: LIST
28942: LIST
28943: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
28944: LD_VAR 0 6
28948: PPUSH
28949: CALL_OW 264
28953: PUSH
28954: LD_INT 14
28956: PUSH
28957: LD_INT 53
28959: PUSH
28960: EMPTY
28961: LIST
28962: LIST
28963: IN
28964: IFFALSE 28985
// points := [ 40 , 10 , 20 ] ;
28966: LD_ADDR_VAR 0 9
28970: PUSH
28971: LD_INT 40
28973: PUSH
28974: LD_INT 10
28976: PUSH
28977: LD_INT 20
28979: PUSH
28980: EMPTY
28981: LIST
28982: LIST
28983: LIST
28984: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
28985: LD_VAR 0 6
28989: PPUSH
28990: CALL_OW 264
28994: PUSH
28995: LD_INT 9
28997: PUSH
28998: EMPTY
28999: LIST
29000: IN
29001: IFFALSE 29022
// points := [ 5 , 70 , 20 ] ;
29003: LD_ADDR_VAR 0 9
29007: PUSH
29008: LD_INT 5
29010: PUSH
29011: LD_INT 70
29013: PUSH
29014: LD_INT 20
29016: PUSH
29017: EMPTY
29018: LIST
29019: LIST
29020: LIST
29021: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
29022: LD_VAR 0 6
29026: PPUSH
29027: CALL_OW 264
29031: PUSH
29032: LD_INT 10
29034: PUSH
29035: EMPTY
29036: LIST
29037: IN
29038: IFFALSE 29059
// points := [ 35 , 110 , 70 ] ;
29040: LD_ADDR_VAR 0 9
29044: PUSH
29045: LD_INT 35
29047: PUSH
29048: LD_INT 110
29050: PUSH
29051: LD_INT 70
29053: PUSH
29054: EMPTY
29055: LIST
29056: LIST
29057: LIST
29058: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
29059: LD_VAR 0 6
29063: PPUSH
29064: CALL_OW 265
29068: PUSH
29069: LD_INT 25
29071: EQUAL
29072: IFFALSE 29093
// points := [ 80 , 65 , 100 ] ;
29074: LD_ADDR_VAR 0 9
29078: PUSH
29079: LD_INT 80
29081: PUSH
29082: LD_INT 65
29084: PUSH
29085: LD_INT 100
29087: PUSH
29088: EMPTY
29089: LIST
29090: LIST
29091: LIST
29092: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
29093: LD_VAR 0 6
29097: PPUSH
29098: CALL_OW 263
29102: PUSH
29103: LD_INT 1
29105: EQUAL
29106: IFFALSE 29141
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
29108: LD_ADDR_VAR 0 10
29112: PUSH
29113: LD_VAR 0 10
29117: PUSH
29118: LD_VAR 0 6
29122: PPUSH
29123: CALL_OW 311
29127: PPUSH
29128: LD_INT 3
29130: PPUSH
29131: CALL_OW 259
29135: PUSH
29136: LD_INT 4
29138: MUL
29139: MUL
29140: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
29141: LD_VAR 0 6
29145: PPUSH
29146: CALL_OW 263
29150: PUSH
29151: LD_INT 2
29153: EQUAL
29154: IFFALSE 29205
// begin j := IsControledBy ( i ) ;
29156: LD_ADDR_VAR 0 7
29160: PUSH
29161: LD_VAR 0 6
29165: PPUSH
29166: CALL_OW 312
29170: ST_TO_ADDR
// if j then
29171: LD_VAR 0 7
29175: IFFALSE 29205
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
29177: LD_ADDR_VAR 0 10
29181: PUSH
29182: LD_VAR 0 10
29186: PUSH
29187: LD_VAR 0 7
29191: PPUSH
29192: LD_INT 3
29194: PPUSH
29195: CALL_OW 259
29199: PUSH
29200: LD_INT 3
29202: MUL
29203: MUL
29204: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
29205: LD_VAR 0 6
29209: PPUSH
29210: CALL_OW 264
29214: PUSH
29215: LD_INT 5
29217: PUSH
29218: LD_INT 6
29220: PUSH
29221: LD_INT 46
29223: PUSH
29224: LD_INT 44
29226: PUSH
29227: LD_INT 47
29229: PUSH
29230: LD_INT 45
29232: PUSH
29233: LD_INT 28
29235: PUSH
29236: LD_INT 7
29238: PUSH
29239: LD_INT 27
29241: PUSH
29242: LD_INT 29
29244: PUSH
29245: EMPTY
29246: LIST
29247: LIST
29248: LIST
29249: LIST
29250: LIST
29251: LIST
29252: LIST
29253: LIST
29254: LIST
29255: LIST
29256: IN
29257: PUSH
29258: LD_VAR 0 1
29262: PPUSH
29263: LD_INT 52
29265: PPUSH
29266: CALL_OW 321
29270: PUSH
29271: LD_INT 2
29273: EQUAL
29274: AND
29275: IFFALSE 29292
// bpoints := bpoints * 1.2 ;
29277: LD_ADDR_VAR 0 10
29281: PUSH
29282: LD_VAR 0 10
29286: PUSH
29287: LD_REAL  1.20000000000000E+0000
29290: MUL
29291: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
29292: LD_VAR 0 6
29296: PPUSH
29297: CALL_OW 264
29301: PUSH
29302: LD_INT 6
29304: PUSH
29305: LD_INT 46
29307: PUSH
29308: LD_INT 47
29310: PUSH
29311: EMPTY
29312: LIST
29313: LIST
29314: LIST
29315: IN
29316: IFFALSE 29333
// bpoints := bpoints * 1.2 ;
29318: LD_ADDR_VAR 0 10
29322: PUSH
29323: LD_VAR 0 10
29327: PUSH
29328: LD_REAL  1.20000000000000E+0000
29331: MUL
29332: ST_TO_ADDR
// end ; unit_building :
29333: GO 29347
29335: LD_INT 3
29337: DOUBLE
29338: EQUAL
29339: IFTRUE 29343
29341: GO 29346
29343: POP
// ; end ;
29344: GO 29347
29346: POP
// for j = 1 to 3 do
29347: LD_ADDR_VAR 0 7
29351: PUSH
29352: DOUBLE
29353: LD_INT 1
29355: DEC
29356: ST_TO_ADDR
29357: LD_INT 3
29359: PUSH
29360: FOR_TO
29361: IFFALSE 29414
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
29363: LD_ADDR_VAR 0 5
29367: PUSH
29368: LD_VAR 0 5
29372: PPUSH
29373: LD_VAR 0 7
29377: PPUSH
29378: LD_VAR 0 5
29382: PUSH
29383: LD_VAR 0 7
29387: ARRAY
29388: PUSH
29389: LD_VAR 0 9
29393: PUSH
29394: LD_VAR 0 7
29398: ARRAY
29399: PUSH
29400: LD_VAR 0 10
29404: MUL
29405: PLUS
29406: PPUSH
29407: CALL_OW 1
29411: ST_TO_ADDR
29412: GO 29360
29414: POP
29415: POP
// end ;
29416: GO 27895
29418: POP
29419: POP
// result := Replace ( result , 4 , tmp ) ;
29420: LD_ADDR_VAR 0 5
29424: PUSH
29425: LD_VAR 0 5
29429: PPUSH
29430: LD_INT 4
29432: PPUSH
29433: LD_VAR 0 8
29437: PPUSH
29438: CALL_OW 1
29442: ST_TO_ADDR
// end ;
29443: LD_VAR 0 5
29447: RET
// export function DangerAtRange ( unit , range ) ; begin
29448: LD_INT 0
29450: PPUSH
// if not unit then
29451: LD_VAR 0 1
29455: NOT
29456: IFFALSE 29460
// exit ;
29458: GO 29505
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
29460: LD_ADDR_VAR 0 3
29464: PUSH
29465: LD_VAR 0 1
29469: PPUSH
29470: CALL_OW 255
29474: PPUSH
29475: LD_VAR 0 1
29479: PPUSH
29480: CALL_OW 250
29484: PPUSH
29485: LD_VAR 0 1
29489: PPUSH
29490: CALL_OW 251
29494: PPUSH
29495: LD_VAR 0 2
29499: PPUSH
29500: CALL 27747 0 4
29504: ST_TO_ADDR
// end ;
29505: LD_VAR 0 3
29509: RET
// export function DangerInArea ( side , area ) ; begin
29510: LD_INT 0
29512: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
29513: LD_ADDR_VAR 0 3
29517: PUSH
29518: LD_VAR 0 2
29522: PPUSH
29523: LD_INT 81
29525: PUSH
29526: LD_VAR 0 1
29530: PUSH
29531: EMPTY
29532: LIST
29533: LIST
29534: PPUSH
29535: CALL_OW 70
29539: ST_TO_ADDR
// end ;
29540: LD_VAR 0 3
29544: RET
// export function IsExtension ( b ) ; begin
29545: LD_INT 0
29547: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
29548: LD_ADDR_VAR 0 2
29552: PUSH
29553: LD_VAR 0 1
29557: PUSH
29558: LD_INT 23
29560: PUSH
29561: LD_INT 20
29563: PUSH
29564: LD_INT 22
29566: PUSH
29567: LD_INT 17
29569: PUSH
29570: LD_INT 24
29572: PUSH
29573: LD_INT 21
29575: PUSH
29576: LD_INT 19
29578: PUSH
29579: LD_INT 16
29581: PUSH
29582: LD_INT 25
29584: PUSH
29585: LD_INT 18
29587: PUSH
29588: EMPTY
29589: LIST
29590: LIST
29591: LIST
29592: LIST
29593: LIST
29594: LIST
29595: LIST
29596: LIST
29597: LIST
29598: LIST
29599: IN
29600: ST_TO_ADDR
// end ;
29601: LD_VAR 0 2
29605: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
29606: LD_INT 0
29608: PPUSH
29609: PPUSH
29610: PPUSH
// result := [ ] ;
29611: LD_ADDR_VAR 0 4
29615: PUSH
29616: EMPTY
29617: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
29618: LD_ADDR_VAR 0 5
29622: PUSH
29623: LD_VAR 0 2
29627: PPUSH
29628: LD_INT 21
29630: PUSH
29631: LD_INT 3
29633: PUSH
29634: EMPTY
29635: LIST
29636: LIST
29637: PPUSH
29638: CALL_OW 70
29642: ST_TO_ADDR
// if not tmp then
29643: LD_VAR 0 5
29647: NOT
29648: IFFALSE 29652
// exit ;
29650: GO 29716
// if checkLink then
29652: LD_VAR 0 3
29656: IFFALSE 29706
// begin for i in tmp do
29658: LD_ADDR_VAR 0 6
29662: PUSH
29663: LD_VAR 0 5
29667: PUSH
29668: FOR_IN
29669: IFFALSE 29704
// if GetBase ( i ) <> base then
29671: LD_VAR 0 6
29675: PPUSH
29676: CALL_OW 274
29680: PUSH
29681: LD_VAR 0 1
29685: NONEQUAL
29686: IFFALSE 29702
// ComLinkToBase ( base , i ) ;
29688: LD_VAR 0 1
29692: PPUSH
29693: LD_VAR 0 6
29697: PPUSH
29698: CALL_OW 169
29702: GO 29668
29704: POP
29705: POP
// end ; result := tmp ;
29706: LD_ADDR_VAR 0 4
29710: PUSH
29711: LD_VAR 0 5
29715: ST_TO_ADDR
// end ;
29716: LD_VAR 0 4
29720: RET
// export function ComComplete ( units , b ) ; var i ; begin
29721: LD_INT 0
29723: PPUSH
29724: PPUSH
// if not units then
29725: LD_VAR 0 1
29729: NOT
29730: IFFALSE 29734
// exit ;
29732: GO 29824
// for i in units do
29734: LD_ADDR_VAR 0 4
29738: PUSH
29739: LD_VAR 0 1
29743: PUSH
29744: FOR_IN
29745: IFFALSE 29822
// if BuildingStatus ( b ) = bs_build then
29747: LD_VAR 0 2
29751: PPUSH
29752: CALL_OW 461
29756: PUSH
29757: LD_INT 1
29759: EQUAL
29760: IFFALSE 29820
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
29762: LD_VAR 0 4
29766: PPUSH
29767: LD_STRING h
29769: PUSH
29770: LD_VAR 0 2
29774: PPUSH
29775: CALL_OW 250
29779: PUSH
29780: LD_VAR 0 2
29784: PPUSH
29785: CALL_OW 251
29789: PUSH
29790: LD_VAR 0 2
29794: PUSH
29795: LD_INT 0
29797: PUSH
29798: LD_INT 0
29800: PUSH
29801: LD_INT 0
29803: PUSH
29804: EMPTY
29805: LIST
29806: LIST
29807: LIST
29808: LIST
29809: LIST
29810: LIST
29811: LIST
29812: PUSH
29813: EMPTY
29814: LIST
29815: PPUSH
29816: CALL_OW 446
29820: GO 29744
29822: POP
29823: POP
// end ;
29824: LD_VAR 0 3
29828: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
29829: LD_INT 0
29831: PPUSH
29832: PPUSH
29833: PPUSH
29834: PPUSH
29835: PPUSH
29836: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
29837: LD_VAR 0 1
29841: NOT
29842: PUSH
29843: LD_VAR 0 1
29847: PPUSH
29848: CALL_OW 263
29852: PUSH
29853: LD_INT 2
29855: NONEQUAL
29856: OR
29857: IFFALSE 29861
// exit ;
29859: GO 30177
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
29861: LD_ADDR_VAR 0 6
29865: PUSH
29866: LD_INT 22
29868: PUSH
29869: LD_VAR 0 1
29873: PPUSH
29874: CALL_OW 255
29878: PUSH
29879: EMPTY
29880: LIST
29881: LIST
29882: PUSH
29883: LD_INT 2
29885: PUSH
29886: LD_INT 30
29888: PUSH
29889: LD_INT 36
29891: PUSH
29892: EMPTY
29893: LIST
29894: LIST
29895: PUSH
29896: LD_INT 34
29898: PUSH
29899: LD_INT 31
29901: PUSH
29902: EMPTY
29903: LIST
29904: LIST
29905: PUSH
29906: EMPTY
29907: LIST
29908: LIST
29909: LIST
29910: PUSH
29911: EMPTY
29912: LIST
29913: LIST
29914: PPUSH
29915: CALL_OW 69
29919: ST_TO_ADDR
// if not tmp then
29920: LD_VAR 0 6
29924: NOT
29925: IFFALSE 29929
// exit ;
29927: GO 30177
// result := [ ] ;
29929: LD_ADDR_VAR 0 2
29933: PUSH
29934: EMPTY
29935: ST_TO_ADDR
// for i in tmp do
29936: LD_ADDR_VAR 0 3
29940: PUSH
29941: LD_VAR 0 6
29945: PUSH
29946: FOR_IN
29947: IFFALSE 30018
// begin t := UnitsInside ( i ) ;
29949: LD_ADDR_VAR 0 4
29953: PUSH
29954: LD_VAR 0 3
29958: PPUSH
29959: CALL_OW 313
29963: ST_TO_ADDR
// if t then
29964: LD_VAR 0 4
29968: IFFALSE 30016
// for j in t do
29970: LD_ADDR_VAR 0 7
29974: PUSH
29975: LD_VAR 0 4
29979: PUSH
29980: FOR_IN
29981: IFFALSE 30014
// result := Replace ( result , result + 1 , j ) ;
29983: LD_ADDR_VAR 0 2
29987: PUSH
29988: LD_VAR 0 2
29992: PPUSH
29993: LD_VAR 0 2
29997: PUSH
29998: LD_INT 1
30000: PLUS
30001: PPUSH
30002: LD_VAR 0 7
30006: PPUSH
30007: CALL_OW 1
30011: ST_TO_ADDR
30012: GO 29980
30014: POP
30015: POP
// end ;
30016: GO 29946
30018: POP
30019: POP
// if not result then
30020: LD_VAR 0 2
30024: NOT
30025: IFFALSE 30029
// exit ;
30027: GO 30177
// mech := result [ 1 ] ;
30029: LD_ADDR_VAR 0 5
30033: PUSH
30034: LD_VAR 0 2
30038: PUSH
30039: LD_INT 1
30041: ARRAY
30042: ST_TO_ADDR
// if result > 1 then
30043: LD_VAR 0 2
30047: PUSH
30048: LD_INT 1
30050: GREATER
30051: IFFALSE 30163
// begin for i = 2 to result do
30053: LD_ADDR_VAR 0 3
30057: PUSH
30058: DOUBLE
30059: LD_INT 2
30061: DEC
30062: ST_TO_ADDR
30063: LD_VAR 0 2
30067: PUSH
30068: FOR_TO
30069: IFFALSE 30161
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
30071: LD_ADDR_VAR 0 4
30075: PUSH
30076: LD_VAR 0 2
30080: PUSH
30081: LD_VAR 0 3
30085: ARRAY
30086: PPUSH
30087: LD_INT 3
30089: PPUSH
30090: CALL_OW 259
30094: PUSH
30095: LD_VAR 0 2
30099: PUSH
30100: LD_VAR 0 3
30104: ARRAY
30105: PPUSH
30106: CALL_OW 432
30110: MINUS
30111: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
30112: LD_VAR 0 4
30116: PUSH
30117: LD_VAR 0 5
30121: PPUSH
30122: LD_INT 3
30124: PPUSH
30125: CALL_OW 259
30129: PUSH
30130: LD_VAR 0 5
30134: PPUSH
30135: CALL_OW 432
30139: MINUS
30140: GREATEREQUAL
30141: IFFALSE 30159
// mech := result [ i ] ;
30143: LD_ADDR_VAR 0 5
30147: PUSH
30148: LD_VAR 0 2
30152: PUSH
30153: LD_VAR 0 3
30157: ARRAY
30158: ST_TO_ADDR
// end ;
30159: GO 30068
30161: POP
30162: POP
// end ; ComLinkTo ( vehicle , mech ) ;
30163: LD_VAR 0 1
30167: PPUSH
30168: LD_VAR 0 5
30172: PPUSH
30173: CALL_OW 135
// end ;
30177: LD_VAR 0 2
30181: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
30182: LD_INT 0
30184: PPUSH
30185: PPUSH
30186: PPUSH
30187: PPUSH
30188: PPUSH
30189: PPUSH
30190: PPUSH
30191: PPUSH
30192: PPUSH
30193: PPUSH
30194: PPUSH
30195: PPUSH
30196: PPUSH
// result := [ ] ;
30197: LD_ADDR_VAR 0 7
30201: PUSH
30202: EMPTY
30203: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
30204: LD_VAR 0 1
30208: PPUSH
30209: CALL_OW 266
30213: PUSH
30214: LD_INT 0
30216: PUSH
30217: LD_INT 1
30219: PUSH
30220: EMPTY
30221: LIST
30222: LIST
30223: IN
30224: NOT
30225: IFFALSE 30229
// exit ;
30227: GO 31863
// if name then
30229: LD_VAR 0 3
30233: IFFALSE 30249
// SetBName ( base_dep , name ) ;
30235: LD_VAR 0 1
30239: PPUSH
30240: LD_VAR 0 3
30244: PPUSH
30245: CALL_OW 500
// base := GetBase ( base_dep ) ;
30249: LD_ADDR_VAR 0 15
30253: PUSH
30254: LD_VAR 0 1
30258: PPUSH
30259: CALL_OW 274
30263: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
30264: LD_ADDR_VAR 0 16
30268: PUSH
30269: LD_VAR 0 1
30273: PPUSH
30274: CALL_OW 255
30278: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
30279: LD_ADDR_VAR 0 17
30283: PUSH
30284: LD_VAR 0 1
30288: PPUSH
30289: CALL_OW 248
30293: ST_TO_ADDR
// if sources then
30294: LD_VAR 0 5
30298: IFFALSE 30345
// for i = 1 to 3 do
30300: LD_ADDR_VAR 0 8
30304: PUSH
30305: DOUBLE
30306: LD_INT 1
30308: DEC
30309: ST_TO_ADDR
30310: LD_INT 3
30312: PUSH
30313: FOR_TO
30314: IFFALSE 30343
// AddResourceType ( base , i , sources [ i ] ) ;
30316: LD_VAR 0 15
30320: PPUSH
30321: LD_VAR 0 8
30325: PPUSH
30326: LD_VAR 0 5
30330: PUSH
30331: LD_VAR 0 8
30335: ARRAY
30336: PPUSH
30337: CALL_OW 276
30341: GO 30313
30343: POP
30344: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
30345: LD_ADDR_VAR 0 18
30349: PUSH
30350: LD_VAR 0 15
30354: PPUSH
30355: LD_VAR 0 2
30359: PPUSH
30360: LD_INT 1
30362: PPUSH
30363: CALL 29606 0 3
30367: ST_TO_ADDR
// InitHc ;
30368: CALL_OW 19
// InitUc ;
30372: CALL_OW 18
// uc_side := side ;
30376: LD_ADDR_OWVAR 20
30380: PUSH
30381: LD_VAR 0 16
30385: ST_TO_ADDR
// uc_nation := nation ;
30386: LD_ADDR_OWVAR 21
30390: PUSH
30391: LD_VAR 0 17
30395: ST_TO_ADDR
// if buildings then
30396: LD_VAR 0 18
30400: IFFALSE 31722
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
30402: LD_ADDR_VAR 0 19
30406: PUSH
30407: LD_VAR 0 18
30411: PPUSH
30412: LD_INT 2
30414: PUSH
30415: LD_INT 30
30417: PUSH
30418: LD_INT 29
30420: PUSH
30421: EMPTY
30422: LIST
30423: LIST
30424: PUSH
30425: LD_INT 30
30427: PUSH
30428: LD_INT 30
30430: PUSH
30431: EMPTY
30432: LIST
30433: LIST
30434: PUSH
30435: EMPTY
30436: LIST
30437: LIST
30438: LIST
30439: PPUSH
30440: CALL_OW 72
30444: ST_TO_ADDR
// if tmp then
30445: LD_VAR 0 19
30449: IFFALSE 30497
// for i in tmp do
30451: LD_ADDR_VAR 0 8
30455: PUSH
30456: LD_VAR 0 19
30460: PUSH
30461: FOR_IN
30462: IFFALSE 30495
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
30464: LD_VAR 0 8
30468: PPUSH
30469: CALL_OW 250
30473: PPUSH
30474: LD_VAR 0 8
30478: PPUSH
30479: CALL_OW 251
30483: PPUSH
30484: LD_VAR 0 16
30488: PPUSH
30489: CALL_OW 441
30493: GO 30461
30495: POP
30496: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
30497: LD_VAR 0 18
30501: PPUSH
30502: LD_INT 2
30504: PUSH
30505: LD_INT 30
30507: PUSH
30508: LD_INT 32
30510: PUSH
30511: EMPTY
30512: LIST
30513: LIST
30514: PUSH
30515: LD_INT 30
30517: PUSH
30518: LD_INT 33
30520: PUSH
30521: EMPTY
30522: LIST
30523: LIST
30524: PUSH
30525: EMPTY
30526: LIST
30527: LIST
30528: LIST
30529: PPUSH
30530: CALL_OW 72
30534: IFFALSE 30622
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
30536: LD_ADDR_VAR 0 8
30540: PUSH
30541: LD_VAR 0 18
30545: PPUSH
30546: LD_INT 2
30548: PUSH
30549: LD_INT 30
30551: PUSH
30552: LD_INT 32
30554: PUSH
30555: EMPTY
30556: LIST
30557: LIST
30558: PUSH
30559: LD_INT 30
30561: PUSH
30562: LD_INT 33
30564: PUSH
30565: EMPTY
30566: LIST
30567: LIST
30568: PUSH
30569: EMPTY
30570: LIST
30571: LIST
30572: LIST
30573: PPUSH
30574: CALL_OW 72
30578: PUSH
30579: FOR_IN
30580: IFFALSE 30620
// begin if not GetBWeapon ( i ) then
30582: LD_VAR 0 8
30586: PPUSH
30587: CALL_OW 269
30591: NOT
30592: IFFALSE 30618
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
30594: LD_VAR 0 8
30598: PPUSH
30599: LD_VAR 0 8
30603: PPUSH
30604: LD_VAR 0 2
30608: PPUSH
30609: CALL 31868 0 2
30613: PPUSH
30614: CALL_OW 431
// end ;
30618: GO 30579
30620: POP
30621: POP
// end ; for i = 1 to personel do
30622: LD_ADDR_VAR 0 8
30626: PUSH
30627: DOUBLE
30628: LD_INT 1
30630: DEC
30631: ST_TO_ADDR
30632: LD_VAR 0 6
30636: PUSH
30637: FOR_TO
30638: IFFALSE 31702
// begin if i > 4 then
30640: LD_VAR 0 8
30644: PUSH
30645: LD_INT 4
30647: GREATER
30648: IFFALSE 30652
// break ;
30650: GO 31702
// case i of 1 :
30652: LD_VAR 0 8
30656: PUSH
30657: LD_INT 1
30659: DOUBLE
30660: EQUAL
30661: IFTRUE 30665
30663: GO 30745
30665: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
30666: LD_ADDR_VAR 0 12
30670: PUSH
30671: LD_VAR 0 18
30675: PPUSH
30676: LD_INT 22
30678: PUSH
30679: LD_VAR 0 16
30683: PUSH
30684: EMPTY
30685: LIST
30686: LIST
30687: PUSH
30688: LD_INT 58
30690: PUSH
30691: EMPTY
30692: LIST
30693: PUSH
30694: LD_INT 2
30696: PUSH
30697: LD_INT 30
30699: PUSH
30700: LD_INT 32
30702: PUSH
30703: EMPTY
30704: LIST
30705: LIST
30706: PUSH
30707: LD_INT 30
30709: PUSH
30710: LD_INT 4
30712: PUSH
30713: EMPTY
30714: LIST
30715: LIST
30716: PUSH
30717: LD_INT 30
30719: PUSH
30720: LD_INT 5
30722: PUSH
30723: EMPTY
30724: LIST
30725: LIST
30726: PUSH
30727: EMPTY
30728: LIST
30729: LIST
30730: LIST
30731: LIST
30732: PUSH
30733: EMPTY
30734: LIST
30735: LIST
30736: LIST
30737: PPUSH
30738: CALL_OW 72
30742: ST_TO_ADDR
30743: GO 30967
30745: LD_INT 2
30747: DOUBLE
30748: EQUAL
30749: IFTRUE 30753
30751: GO 30815
30753: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
30754: LD_ADDR_VAR 0 12
30758: PUSH
30759: LD_VAR 0 18
30763: PPUSH
30764: LD_INT 22
30766: PUSH
30767: LD_VAR 0 16
30771: PUSH
30772: EMPTY
30773: LIST
30774: LIST
30775: PUSH
30776: LD_INT 2
30778: PUSH
30779: LD_INT 30
30781: PUSH
30782: LD_INT 0
30784: PUSH
30785: EMPTY
30786: LIST
30787: LIST
30788: PUSH
30789: LD_INT 30
30791: PUSH
30792: LD_INT 1
30794: PUSH
30795: EMPTY
30796: LIST
30797: LIST
30798: PUSH
30799: EMPTY
30800: LIST
30801: LIST
30802: LIST
30803: PUSH
30804: EMPTY
30805: LIST
30806: LIST
30807: PPUSH
30808: CALL_OW 72
30812: ST_TO_ADDR
30813: GO 30967
30815: LD_INT 3
30817: DOUBLE
30818: EQUAL
30819: IFTRUE 30823
30821: GO 30885
30823: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
30824: LD_ADDR_VAR 0 12
30828: PUSH
30829: LD_VAR 0 18
30833: PPUSH
30834: LD_INT 22
30836: PUSH
30837: LD_VAR 0 16
30841: PUSH
30842: EMPTY
30843: LIST
30844: LIST
30845: PUSH
30846: LD_INT 2
30848: PUSH
30849: LD_INT 30
30851: PUSH
30852: LD_INT 2
30854: PUSH
30855: EMPTY
30856: LIST
30857: LIST
30858: PUSH
30859: LD_INT 30
30861: PUSH
30862: LD_INT 3
30864: PUSH
30865: EMPTY
30866: LIST
30867: LIST
30868: PUSH
30869: EMPTY
30870: LIST
30871: LIST
30872: LIST
30873: PUSH
30874: EMPTY
30875: LIST
30876: LIST
30877: PPUSH
30878: CALL_OW 72
30882: ST_TO_ADDR
30883: GO 30967
30885: LD_INT 4
30887: DOUBLE
30888: EQUAL
30889: IFTRUE 30893
30891: GO 30966
30893: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
30894: LD_ADDR_VAR 0 12
30898: PUSH
30899: LD_VAR 0 18
30903: PPUSH
30904: LD_INT 22
30906: PUSH
30907: LD_VAR 0 16
30911: PUSH
30912: EMPTY
30913: LIST
30914: LIST
30915: PUSH
30916: LD_INT 2
30918: PUSH
30919: LD_INT 30
30921: PUSH
30922: LD_INT 6
30924: PUSH
30925: EMPTY
30926: LIST
30927: LIST
30928: PUSH
30929: LD_INT 30
30931: PUSH
30932: LD_INT 7
30934: PUSH
30935: EMPTY
30936: LIST
30937: LIST
30938: PUSH
30939: LD_INT 30
30941: PUSH
30942: LD_INT 8
30944: PUSH
30945: EMPTY
30946: LIST
30947: LIST
30948: PUSH
30949: EMPTY
30950: LIST
30951: LIST
30952: LIST
30953: LIST
30954: PUSH
30955: EMPTY
30956: LIST
30957: LIST
30958: PPUSH
30959: CALL_OW 72
30963: ST_TO_ADDR
30964: GO 30967
30966: POP
// if i = 1 then
30967: LD_VAR 0 8
30971: PUSH
30972: LD_INT 1
30974: EQUAL
30975: IFFALSE 31086
// begin tmp := [ ] ;
30977: LD_ADDR_VAR 0 19
30981: PUSH
30982: EMPTY
30983: ST_TO_ADDR
// for j in f do
30984: LD_ADDR_VAR 0 9
30988: PUSH
30989: LD_VAR 0 12
30993: PUSH
30994: FOR_IN
30995: IFFALSE 31068
// if GetBType ( j ) = b_bunker then
30997: LD_VAR 0 9
31001: PPUSH
31002: CALL_OW 266
31006: PUSH
31007: LD_INT 32
31009: EQUAL
31010: IFFALSE 31037
// tmp := Insert ( tmp , 1 , j ) else
31012: LD_ADDR_VAR 0 19
31016: PUSH
31017: LD_VAR 0 19
31021: PPUSH
31022: LD_INT 1
31024: PPUSH
31025: LD_VAR 0 9
31029: PPUSH
31030: CALL_OW 2
31034: ST_TO_ADDR
31035: GO 31066
// tmp := Insert ( tmp , tmp + 1 , j ) ;
31037: LD_ADDR_VAR 0 19
31041: PUSH
31042: LD_VAR 0 19
31046: PPUSH
31047: LD_VAR 0 19
31051: PUSH
31052: LD_INT 1
31054: PLUS
31055: PPUSH
31056: LD_VAR 0 9
31060: PPUSH
31061: CALL_OW 2
31065: ST_TO_ADDR
31066: GO 30994
31068: POP
31069: POP
// if tmp then
31070: LD_VAR 0 19
31074: IFFALSE 31086
// f := tmp ;
31076: LD_ADDR_VAR 0 12
31080: PUSH
31081: LD_VAR 0 19
31085: ST_TO_ADDR
// end ; x := personel [ i ] ;
31086: LD_ADDR_VAR 0 13
31090: PUSH
31091: LD_VAR 0 6
31095: PUSH
31096: LD_VAR 0 8
31100: ARRAY
31101: ST_TO_ADDR
// if x = - 1 then
31102: LD_VAR 0 13
31106: PUSH
31107: LD_INT 1
31109: NEG
31110: EQUAL
31111: IFFALSE 31320
// begin for j in f do
31113: LD_ADDR_VAR 0 9
31117: PUSH
31118: LD_VAR 0 12
31122: PUSH
31123: FOR_IN
31124: IFFALSE 31316
// repeat InitHc ;
31126: CALL_OW 19
// if GetBType ( j ) = b_barracks then
31130: LD_VAR 0 9
31134: PPUSH
31135: CALL_OW 266
31139: PUSH
31140: LD_INT 5
31142: EQUAL
31143: IFFALSE 31213
// begin if UnitsInside ( j ) < 3 then
31145: LD_VAR 0 9
31149: PPUSH
31150: CALL_OW 313
31154: PUSH
31155: LD_INT 3
31157: LESS
31158: IFFALSE 31194
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
31160: LD_INT 0
31162: PPUSH
31163: LD_INT 5
31165: PUSH
31166: LD_INT 8
31168: PUSH
31169: LD_INT 9
31171: PUSH
31172: EMPTY
31173: LIST
31174: LIST
31175: LIST
31176: PUSH
31177: LD_VAR 0 17
31181: ARRAY
31182: PPUSH
31183: LD_VAR 0 4
31187: PPUSH
31188: CALL_OW 380
31192: GO 31211
// PrepareHuman ( false , i , skill ) ;
31194: LD_INT 0
31196: PPUSH
31197: LD_VAR 0 8
31201: PPUSH
31202: LD_VAR 0 4
31206: PPUSH
31207: CALL_OW 380
// end else
31211: GO 31230
// PrepareHuman ( false , i , skill ) ;
31213: LD_INT 0
31215: PPUSH
31216: LD_VAR 0 8
31220: PPUSH
31221: LD_VAR 0 4
31225: PPUSH
31226: CALL_OW 380
// un := CreateHuman ;
31230: LD_ADDR_VAR 0 14
31234: PUSH
31235: CALL_OW 44
31239: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
31240: LD_ADDR_VAR 0 7
31244: PUSH
31245: LD_VAR 0 7
31249: PPUSH
31250: LD_INT 1
31252: PPUSH
31253: LD_VAR 0 14
31257: PPUSH
31258: CALL_OW 2
31262: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
31263: LD_VAR 0 14
31267: PPUSH
31268: LD_VAR 0 9
31272: PPUSH
31273: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
31277: LD_VAR 0 9
31281: PPUSH
31282: CALL_OW 313
31286: PUSH
31287: LD_INT 6
31289: EQUAL
31290: PUSH
31291: LD_VAR 0 9
31295: PPUSH
31296: CALL_OW 266
31300: PUSH
31301: LD_INT 32
31303: PUSH
31304: LD_INT 31
31306: PUSH
31307: EMPTY
31308: LIST
31309: LIST
31310: IN
31311: OR
31312: IFFALSE 31126
31314: GO 31123
31316: POP
31317: POP
// end else
31318: GO 31700
// for j = 1 to x do
31320: LD_ADDR_VAR 0 9
31324: PUSH
31325: DOUBLE
31326: LD_INT 1
31328: DEC
31329: ST_TO_ADDR
31330: LD_VAR 0 13
31334: PUSH
31335: FOR_TO
31336: IFFALSE 31698
// begin InitHc ;
31338: CALL_OW 19
// if not f then
31342: LD_VAR 0 12
31346: NOT
31347: IFFALSE 31436
// begin PrepareHuman ( false , i , skill ) ;
31349: LD_INT 0
31351: PPUSH
31352: LD_VAR 0 8
31356: PPUSH
31357: LD_VAR 0 4
31361: PPUSH
31362: CALL_OW 380
// un := CreateHuman ;
31366: LD_ADDR_VAR 0 14
31370: PUSH
31371: CALL_OW 44
31375: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
31376: LD_ADDR_VAR 0 7
31380: PUSH
31381: LD_VAR 0 7
31385: PPUSH
31386: LD_INT 1
31388: PPUSH
31389: LD_VAR 0 14
31393: PPUSH
31394: CALL_OW 2
31398: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
31399: LD_VAR 0 14
31403: PPUSH
31404: LD_VAR 0 1
31408: PPUSH
31409: CALL_OW 250
31413: PPUSH
31414: LD_VAR 0 1
31418: PPUSH
31419: CALL_OW 251
31423: PPUSH
31424: LD_INT 10
31426: PPUSH
31427: LD_INT 0
31429: PPUSH
31430: CALL_OW 50
// continue ;
31434: GO 31335
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
31436: LD_VAR 0 12
31440: PUSH
31441: LD_INT 1
31443: ARRAY
31444: PPUSH
31445: CALL_OW 313
31449: PUSH
31450: LD_VAR 0 12
31454: PUSH
31455: LD_INT 1
31457: ARRAY
31458: PPUSH
31459: CALL_OW 266
31463: PUSH
31464: LD_INT 32
31466: PUSH
31467: LD_INT 31
31469: PUSH
31470: EMPTY
31471: LIST
31472: LIST
31473: IN
31474: AND
31475: PUSH
31476: LD_VAR 0 12
31480: PUSH
31481: LD_INT 1
31483: ARRAY
31484: PPUSH
31485: CALL_OW 313
31489: PUSH
31490: LD_INT 6
31492: EQUAL
31493: OR
31494: IFFALSE 31514
// f := Delete ( f , 1 ) ;
31496: LD_ADDR_VAR 0 12
31500: PUSH
31501: LD_VAR 0 12
31505: PPUSH
31506: LD_INT 1
31508: PPUSH
31509: CALL_OW 3
31513: ST_TO_ADDR
// if not f then
31514: LD_VAR 0 12
31518: NOT
31519: IFFALSE 31537
// begin x := x + 2 ;
31521: LD_ADDR_VAR 0 13
31525: PUSH
31526: LD_VAR 0 13
31530: PUSH
31531: LD_INT 2
31533: PLUS
31534: ST_TO_ADDR
// continue ;
31535: GO 31335
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
31537: LD_VAR 0 12
31541: PUSH
31542: LD_INT 1
31544: ARRAY
31545: PPUSH
31546: CALL_OW 266
31550: PUSH
31551: LD_INT 5
31553: EQUAL
31554: IFFALSE 31628
// begin if UnitsInside ( f [ 1 ] ) < 3 then
31556: LD_VAR 0 12
31560: PUSH
31561: LD_INT 1
31563: ARRAY
31564: PPUSH
31565: CALL_OW 313
31569: PUSH
31570: LD_INT 3
31572: LESS
31573: IFFALSE 31609
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
31575: LD_INT 0
31577: PPUSH
31578: LD_INT 5
31580: PUSH
31581: LD_INT 8
31583: PUSH
31584: LD_INT 9
31586: PUSH
31587: EMPTY
31588: LIST
31589: LIST
31590: LIST
31591: PUSH
31592: LD_VAR 0 17
31596: ARRAY
31597: PPUSH
31598: LD_VAR 0 4
31602: PPUSH
31603: CALL_OW 380
31607: GO 31626
// PrepareHuman ( false , i , skill ) ;
31609: LD_INT 0
31611: PPUSH
31612: LD_VAR 0 8
31616: PPUSH
31617: LD_VAR 0 4
31621: PPUSH
31622: CALL_OW 380
// end else
31626: GO 31645
// PrepareHuman ( false , i , skill ) ;
31628: LD_INT 0
31630: PPUSH
31631: LD_VAR 0 8
31635: PPUSH
31636: LD_VAR 0 4
31640: PPUSH
31641: CALL_OW 380
// un := CreateHuman ;
31645: LD_ADDR_VAR 0 14
31649: PUSH
31650: CALL_OW 44
31654: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
31655: LD_ADDR_VAR 0 7
31659: PUSH
31660: LD_VAR 0 7
31664: PPUSH
31665: LD_INT 1
31667: PPUSH
31668: LD_VAR 0 14
31672: PPUSH
31673: CALL_OW 2
31677: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
31678: LD_VAR 0 14
31682: PPUSH
31683: LD_VAR 0 12
31687: PUSH
31688: LD_INT 1
31690: ARRAY
31691: PPUSH
31692: CALL_OW 52
// end ;
31696: GO 31335
31698: POP
31699: POP
// end ;
31700: GO 30637
31702: POP
31703: POP
// result := result ^ buildings ;
31704: LD_ADDR_VAR 0 7
31708: PUSH
31709: LD_VAR 0 7
31713: PUSH
31714: LD_VAR 0 18
31718: ADD
31719: ST_TO_ADDR
// end else
31720: GO 31863
// begin for i = 1 to personel do
31722: LD_ADDR_VAR 0 8
31726: PUSH
31727: DOUBLE
31728: LD_INT 1
31730: DEC
31731: ST_TO_ADDR
31732: LD_VAR 0 6
31736: PUSH
31737: FOR_TO
31738: IFFALSE 31861
// begin if i > 4 then
31740: LD_VAR 0 8
31744: PUSH
31745: LD_INT 4
31747: GREATER
31748: IFFALSE 31752
// break ;
31750: GO 31861
// x := personel [ i ] ;
31752: LD_ADDR_VAR 0 13
31756: PUSH
31757: LD_VAR 0 6
31761: PUSH
31762: LD_VAR 0 8
31766: ARRAY
31767: ST_TO_ADDR
// if x = - 1 then
31768: LD_VAR 0 13
31772: PUSH
31773: LD_INT 1
31775: NEG
31776: EQUAL
31777: IFFALSE 31781
// continue ;
31779: GO 31737
// PrepareHuman ( false , i , skill ) ;
31781: LD_INT 0
31783: PPUSH
31784: LD_VAR 0 8
31788: PPUSH
31789: LD_VAR 0 4
31793: PPUSH
31794: CALL_OW 380
// un := CreateHuman ;
31798: LD_ADDR_VAR 0 14
31802: PUSH
31803: CALL_OW 44
31807: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
31808: LD_VAR 0 14
31812: PPUSH
31813: LD_VAR 0 1
31817: PPUSH
31818: CALL_OW 250
31822: PPUSH
31823: LD_VAR 0 1
31827: PPUSH
31828: CALL_OW 251
31832: PPUSH
31833: LD_INT 10
31835: PPUSH
31836: LD_INT 0
31838: PPUSH
31839: CALL_OW 50
// result := result ^ un ;
31843: LD_ADDR_VAR 0 7
31847: PUSH
31848: LD_VAR 0 7
31852: PUSH
31853: LD_VAR 0 14
31857: ADD
31858: ST_TO_ADDR
// end ;
31859: GO 31737
31861: POP
31862: POP
// end ; end ;
31863: LD_VAR 0 7
31867: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
31868: LD_INT 0
31870: PPUSH
31871: PPUSH
31872: PPUSH
31873: PPUSH
31874: PPUSH
31875: PPUSH
31876: PPUSH
31877: PPUSH
31878: PPUSH
31879: PPUSH
31880: PPUSH
31881: PPUSH
31882: PPUSH
31883: PPUSH
31884: PPUSH
31885: PPUSH
// result := false ;
31886: LD_ADDR_VAR 0 3
31890: PUSH
31891: LD_INT 0
31893: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
31894: LD_VAR 0 1
31898: NOT
31899: PUSH
31900: LD_VAR 0 1
31904: PPUSH
31905: CALL_OW 266
31909: PUSH
31910: LD_INT 32
31912: PUSH
31913: LD_INT 33
31915: PUSH
31916: EMPTY
31917: LIST
31918: LIST
31919: IN
31920: NOT
31921: OR
31922: IFFALSE 31926
// exit ;
31924: GO 33035
// nat := GetNation ( tower ) ;
31926: LD_ADDR_VAR 0 12
31930: PUSH
31931: LD_VAR 0 1
31935: PPUSH
31936: CALL_OW 248
31940: ST_TO_ADDR
// side := GetSide ( tower ) ;
31941: LD_ADDR_VAR 0 16
31945: PUSH
31946: LD_VAR 0 1
31950: PPUSH
31951: CALL_OW 255
31955: ST_TO_ADDR
// x := GetX ( tower ) ;
31956: LD_ADDR_VAR 0 10
31960: PUSH
31961: LD_VAR 0 1
31965: PPUSH
31966: CALL_OW 250
31970: ST_TO_ADDR
// y := GetY ( tower ) ;
31971: LD_ADDR_VAR 0 11
31975: PUSH
31976: LD_VAR 0 1
31980: PPUSH
31981: CALL_OW 251
31985: ST_TO_ADDR
// if not x or not y then
31986: LD_VAR 0 10
31990: NOT
31991: PUSH
31992: LD_VAR 0 11
31996: NOT
31997: OR
31998: IFFALSE 32002
// exit ;
32000: GO 33035
// weapon := 0 ;
32002: LD_ADDR_VAR 0 18
32006: PUSH
32007: LD_INT 0
32009: ST_TO_ADDR
// fac_list := [ ] ;
32010: LD_ADDR_VAR 0 17
32014: PUSH
32015: EMPTY
32016: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
32017: LD_ADDR_VAR 0 6
32021: PUSH
32022: LD_VAR 0 1
32026: PPUSH
32027: CALL_OW 274
32031: PPUSH
32032: LD_VAR 0 2
32036: PPUSH
32037: LD_INT 0
32039: PPUSH
32040: CALL 29606 0 3
32044: PPUSH
32045: LD_INT 30
32047: PUSH
32048: LD_INT 3
32050: PUSH
32051: EMPTY
32052: LIST
32053: LIST
32054: PPUSH
32055: CALL_OW 72
32059: ST_TO_ADDR
// if not factories then
32060: LD_VAR 0 6
32064: NOT
32065: IFFALSE 32069
// exit ;
32067: GO 33035
// for i in factories do
32069: LD_ADDR_VAR 0 8
32073: PUSH
32074: LD_VAR 0 6
32078: PUSH
32079: FOR_IN
32080: IFFALSE 32105
// fac_list := fac_list union AvailableWeaponList ( i ) ;
32082: LD_ADDR_VAR 0 17
32086: PUSH
32087: LD_VAR 0 17
32091: PUSH
32092: LD_VAR 0 8
32096: PPUSH
32097: CALL_OW 478
32101: UNION
32102: ST_TO_ADDR
32103: GO 32079
32105: POP
32106: POP
// if not fac_list then
32107: LD_VAR 0 17
32111: NOT
32112: IFFALSE 32116
// exit ;
32114: GO 33035
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
32116: LD_ADDR_VAR 0 5
32120: PUSH
32121: LD_INT 4
32123: PUSH
32124: LD_INT 5
32126: PUSH
32127: LD_INT 9
32129: PUSH
32130: LD_INT 10
32132: PUSH
32133: LD_INT 6
32135: PUSH
32136: LD_INT 7
32138: PUSH
32139: LD_INT 11
32141: PUSH
32142: EMPTY
32143: LIST
32144: LIST
32145: LIST
32146: LIST
32147: LIST
32148: LIST
32149: LIST
32150: PUSH
32151: LD_INT 27
32153: PUSH
32154: LD_INT 28
32156: PUSH
32157: LD_INT 26
32159: PUSH
32160: LD_INT 30
32162: PUSH
32163: EMPTY
32164: LIST
32165: LIST
32166: LIST
32167: LIST
32168: PUSH
32169: LD_INT 43
32171: PUSH
32172: LD_INT 44
32174: PUSH
32175: LD_INT 46
32177: PUSH
32178: LD_INT 45
32180: PUSH
32181: LD_INT 47
32183: PUSH
32184: LD_INT 49
32186: PUSH
32187: EMPTY
32188: LIST
32189: LIST
32190: LIST
32191: LIST
32192: LIST
32193: LIST
32194: PUSH
32195: EMPTY
32196: LIST
32197: LIST
32198: LIST
32199: PUSH
32200: LD_VAR 0 12
32204: ARRAY
32205: ST_TO_ADDR
// list := list isect fac_list ;
32206: LD_ADDR_VAR 0 5
32210: PUSH
32211: LD_VAR 0 5
32215: PUSH
32216: LD_VAR 0 17
32220: ISECT
32221: ST_TO_ADDR
// if not list then
32222: LD_VAR 0 5
32226: NOT
32227: IFFALSE 32231
// exit ;
32229: GO 33035
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
32231: LD_VAR 0 12
32235: PUSH
32236: LD_INT 3
32238: EQUAL
32239: PUSH
32240: LD_INT 49
32242: PUSH
32243: LD_VAR 0 5
32247: IN
32248: AND
32249: PUSH
32250: LD_INT 31
32252: PPUSH
32253: LD_VAR 0 16
32257: PPUSH
32258: CALL_OW 321
32262: PUSH
32263: LD_INT 2
32265: EQUAL
32266: AND
32267: IFFALSE 32327
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
32269: LD_INT 22
32271: PUSH
32272: LD_VAR 0 16
32276: PUSH
32277: EMPTY
32278: LIST
32279: LIST
32280: PUSH
32281: LD_INT 35
32283: PUSH
32284: LD_INT 49
32286: PUSH
32287: EMPTY
32288: LIST
32289: LIST
32290: PUSH
32291: LD_INT 91
32293: PUSH
32294: LD_VAR 0 1
32298: PUSH
32299: LD_INT 10
32301: PUSH
32302: EMPTY
32303: LIST
32304: LIST
32305: LIST
32306: PUSH
32307: EMPTY
32308: LIST
32309: LIST
32310: LIST
32311: PPUSH
32312: CALL_OW 69
32316: NOT
32317: IFFALSE 32327
// weapon := ru_time_lapser ;
32319: LD_ADDR_VAR 0 18
32323: PUSH
32324: LD_INT 49
32326: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
32327: LD_VAR 0 12
32331: PUSH
32332: LD_INT 1
32334: PUSH
32335: LD_INT 2
32337: PUSH
32338: EMPTY
32339: LIST
32340: LIST
32341: IN
32342: PUSH
32343: LD_INT 11
32345: PUSH
32346: LD_VAR 0 5
32350: IN
32351: PUSH
32352: LD_INT 30
32354: PUSH
32355: LD_VAR 0 5
32359: IN
32360: OR
32361: AND
32362: PUSH
32363: LD_INT 6
32365: PPUSH
32366: LD_VAR 0 16
32370: PPUSH
32371: CALL_OW 321
32375: PUSH
32376: LD_INT 2
32378: EQUAL
32379: AND
32380: IFFALSE 32545
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
32382: LD_INT 22
32384: PUSH
32385: LD_VAR 0 16
32389: PUSH
32390: EMPTY
32391: LIST
32392: LIST
32393: PUSH
32394: LD_INT 2
32396: PUSH
32397: LD_INT 35
32399: PUSH
32400: LD_INT 11
32402: PUSH
32403: EMPTY
32404: LIST
32405: LIST
32406: PUSH
32407: LD_INT 35
32409: PUSH
32410: LD_INT 30
32412: PUSH
32413: EMPTY
32414: LIST
32415: LIST
32416: PUSH
32417: EMPTY
32418: LIST
32419: LIST
32420: LIST
32421: PUSH
32422: LD_INT 91
32424: PUSH
32425: LD_VAR 0 1
32429: PUSH
32430: LD_INT 18
32432: PUSH
32433: EMPTY
32434: LIST
32435: LIST
32436: LIST
32437: PUSH
32438: EMPTY
32439: LIST
32440: LIST
32441: LIST
32442: PPUSH
32443: CALL_OW 69
32447: NOT
32448: PUSH
32449: LD_INT 22
32451: PUSH
32452: LD_VAR 0 16
32456: PUSH
32457: EMPTY
32458: LIST
32459: LIST
32460: PUSH
32461: LD_INT 2
32463: PUSH
32464: LD_INT 30
32466: PUSH
32467: LD_INT 32
32469: PUSH
32470: EMPTY
32471: LIST
32472: LIST
32473: PUSH
32474: LD_INT 30
32476: PUSH
32477: LD_INT 33
32479: PUSH
32480: EMPTY
32481: LIST
32482: LIST
32483: PUSH
32484: EMPTY
32485: LIST
32486: LIST
32487: LIST
32488: PUSH
32489: LD_INT 91
32491: PUSH
32492: LD_VAR 0 1
32496: PUSH
32497: LD_INT 12
32499: PUSH
32500: EMPTY
32501: LIST
32502: LIST
32503: LIST
32504: PUSH
32505: EMPTY
32506: LIST
32507: LIST
32508: LIST
32509: PUSH
32510: EMPTY
32511: LIST
32512: PPUSH
32513: CALL_OW 69
32517: PUSH
32518: LD_INT 2
32520: GREATER
32521: AND
32522: IFFALSE 32545
// weapon := [ us_radar , ar_radar ] [ nat ] ;
32524: LD_ADDR_VAR 0 18
32528: PUSH
32529: LD_INT 11
32531: PUSH
32532: LD_INT 30
32534: PUSH
32535: EMPTY
32536: LIST
32537: LIST
32538: PUSH
32539: LD_VAR 0 12
32543: ARRAY
32544: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
32545: LD_VAR 0 18
32549: NOT
32550: PUSH
32551: LD_INT 40
32553: PPUSH
32554: LD_VAR 0 16
32558: PPUSH
32559: CALL_OW 321
32563: PUSH
32564: LD_INT 2
32566: EQUAL
32567: AND
32568: PUSH
32569: LD_INT 7
32571: PUSH
32572: LD_VAR 0 5
32576: IN
32577: PUSH
32578: LD_INT 28
32580: PUSH
32581: LD_VAR 0 5
32585: IN
32586: OR
32587: PUSH
32588: LD_INT 45
32590: PUSH
32591: LD_VAR 0 5
32595: IN
32596: OR
32597: AND
32598: IFFALSE 32852
// begin hex := GetHexInfo ( x , y ) ;
32600: LD_ADDR_VAR 0 4
32604: PUSH
32605: LD_VAR 0 10
32609: PPUSH
32610: LD_VAR 0 11
32614: PPUSH
32615: CALL_OW 546
32619: ST_TO_ADDR
// if hex [ 1 ] then
32620: LD_VAR 0 4
32624: PUSH
32625: LD_INT 1
32627: ARRAY
32628: IFFALSE 32632
// exit ;
32630: GO 33035
// height := hex [ 2 ] ;
32632: LD_ADDR_VAR 0 15
32636: PUSH
32637: LD_VAR 0 4
32641: PUSH
32642: LD_INT 2
32644: ARRAY
32645: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
32646: LD_ADDR_VAR 0 14
32650: PUSH
32651: LD_INT 0
32653: PUSH
32654: LD_INT 2
32656: PUSH
32657: LD_INT 3
32659: PUSH
32660: LD_INT 5
32662: PUSH
32663: EMPTY
32664: LIST
32665: LIST
32666: LIST
32667: LIST
32668: ST_TO_ADDR
// for i in tmp do
32669: LD_ADDR_VAR 0 8
32673: PUSH
32674: LD_VAR 0 14
32678: PUSH
32679: FOR_IN
32680: IFFALSE 32850
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
32682: LD_ADDR_VAR 0 9
32686: PUSH
32687: LD_VAR 0 10
32691: PPUSH
32692: LD_VAR 0 8
32696: PPUSH
32697: LD_INT 5
32699: PPUSH
32700: CALL_OW 272
32704: PUSH
32705: LD_VAR 0 11
32709: PPUSH
32710: LD_VAR 0 8
32714: PPUSH
32715: LD_INT 5
32717: PPUSH
32718: CALL_OW 273
32722: PUSH
32723: EMPTY
32724: LIST
32725: LIST
32726: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
32727: LD_VAR 0 9
32731: PUSH
32732: LD_INT 1
32734: ARRAY
32735: PPUSH
32736: LD_VAR 0 9
32740: PUSH
32741: LD_INT 2
32743: ARRAY
32744: PPUSH
32745: CALL_OW 488
32749: IFFALSE 32848
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
32751: LD_ADDR_VAR 0 4
32755: PUSH
32756: LD_VAR 0 9
32760: PUSH
32761: LD_INT 1
32763: ARRAY
32764: PPUSH
32765: LD_VAR 0 9
32769: PUSH
32770: LD_INT 2
32772: ARRAY
32773: PPUSH
32774: CALL_OW 546
32778: ST_TO_ADDR
// if hex [ 1 ] then
32779: LD_VAR 0 4
32783: PUSH
32784: LD_INT 1
32786: ARRAY
32787: IFFALSE 32791
// continue ;
32789: GO 32679
// h := hex [ 2 ] ;
32791: LD_ADDR_VAR 0 13
32795: PUSH
32796: LD_VAR 0 4
32800: PUSH
32801: LD_INT 2
32803: ARRAY
32804: ST_TO_ADDR
// if h + 7 < height then
32805: LD_VAR 0 13
32809: PUSH
32810: LD_INT 7
32812: PLUS
32813: PUSH
32814: LD_VAR 0 15
32818: LESS
32819: IFFALSE 32848
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
32821: LD_ADDR_VAR 0 18
32825: PUSH
32826: LD_INT 7
32828: PUSH
32829: LD_INT 28
32831: PUSH
32832: LD_INT 45
32834: PUSH
32835: EMPTY
32836: LIST
32837: LIST
32838: LIST
32839: PUSH
32840: LD_VAR 0 12
32844: ARRAY
32845: ST_TO_ADDR
// break ;
32846: GO 32850
// end ; end ; end ;
32848: GO 32679
32850: POP
32851: POP
// end ; if not weapon then
32852: LD_VAR 0 18
32856: NOT
32857: IFFALSE 32917
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
32859: LD_ADDR_VAR 0 5
32863: PUSH
32864: LD_VAR 0 5
32868: PUSH
32869: LD_INT 11
32871: PUSH
32872: LD_INT 30
32874: PUSH
32875: LD_INT 49
32877: PUSH
32878: EMPTY
32879: LIST
32880: LIST
32881: LIST
32882: DIFF
32883: ST_TO_ADDR
// if not list then
32884: LD_VAR 0 5
32888: NOT
32889: IFFALSE 32893
// exit ;
32891: GO 33035
// weapon := list [ rand ( 1 , list ) ] ;
32893: LD_ADDR_VAR 0 18
32897: PUSH
32898: LD_VAR 0 5
32902: PUSH
32903: LD_INT 1
32905: PPUSH
32906: LD_VAR 0 5
32910: PPUSH
32911: CALL_OW 12
32915: ARRAY
32916: ST_TO_ADDR
// end ; if weapon then
32917: LD_VAR 0 18
32921: IFFALSE 33035
// begin tmp := CostOfWeapon ( weapon ) ;
32923: LD_ADDR_VAR 0 14
32927: PUSH
32928: LD_VAR 0 18
32932: PPUSH
32933: CALL_OW 451
32937: ST_TO_ADDR
// j := GetBase ( tower ) ;
32938: LD_ADDR_VAR 0 9
32942: PUSH
32943: LD_VAR 0 1
32947: PPUSH
32948: CALL_OW 274
32952: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
32953: LD_VAR 0 9
32957: PPUSH
32958: LD_INT 1
32960: PPUSH
32961: CALL_OW 275
32965: PUSH
32966: LD_VAR 0 14
32970: PUSH
32971: LD_INT 1
32973: ARRAY
32974: GREATEREQUAL
32975: PUSH
32976: LD_VAR 0 9
32980: PPUSH
32981: LD_INT 2
32983: PPUSH
32984: CALL_OW 275
32988: PUSH
32989: LD_VAR 0 14
32993: PUSH
32994: LD_INT 2
32996: ARRAY
32997: GREATEREQUAL
32998: AND
32999: PUSH
33000: LD_VAR 0 9
33004: PPUSH
33005: LD_INT 3
33007: PPUSH
33008: CALL_OW 275
33012: PUSH
33013: LD_VAR 0 14
33017: PUSH
33018: LD_INT 3
33020: ARRAY
33021: GREATEREQUAL
33022: AND
33023: IFFALSE 33035
// result := weapon ;
33025: LD_ADDR_VAR 0 3
33029: PUSH
33030: LD_VAR 0 18
33034: ST_TO_ADDR
// end ; end ;
33035: LD_VAR 0 3
33039: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
33040: LD_INT 0
33042: PPUSH
33043: PPUSH
// result := true ;
33044: LD_ADDR_VAR 0 3
33048: PUSH
33049: LD_INT 1
33051: ST_TO_ADDR
// if array1 = array2 then
33052: LD_VAR 0 1
33056: PUSH
33057: LD_VAR 0 2
33061: EQUAL
33062: IFFALSE 33122
// begin for i = 1 to array1 do
33064: LD_ADDR_VAR 0 4
33068: PUSH
33069: DOUBLE
33070: LD_INT 1
33072: DEC
33073: ST_TO_ADDR
33074: LD_VAR 0 1
33078: PUSH
33079: FOR_TO
33080: IFFALSE 33118
// if array1 [ i ] <> array2 [ i ] then
33082: LD_VAR 0 1
33086: PUSH
33087: LD_VAR 0 4
33091: ARRAY
33092: PUSH
33093: LD_VAR 0 2
33097: PUSH
33098: LD_VAR 0 4
33102: ARRAY
33103: NONEQUAL
33104: IFFALSE 33116
// begin result := false ;
33106: LD_ADDR_VAR 0 3
33110: PUSH
33111: LD_INT 0
33113: ST_TO_ADDR
// break ;
33114: GO 33118
// end ;
33116: GO 33079
33118: POP
33119: POP
// end else
33120: GO 33130
// result := false ;
33122: LD_ADDR_VAR 0 3
33126: PUSH
33127: LD_INT 0
33129: ST_TO_ADDR
// end ;
33130: LD_VAR 0 3
33134: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
33135: LD_INT 0
33137: PPUSH
33138: PPUSH
// if not array1 or not array2 then
33139: LD_VAR 0 1
33143: NOT
33144: PUSH
33145: LD_VAR 0 2
33149: NOT
33150: OR
33151: IFFALSE 33155
// exit ;
33153: GO 33219
// result := true ;
33155: LD_ADDR_VAR 0 3
33159: PUSH
33160: LD_INT 1
33162: ST_TO_ADDR
// for i = 1 to array1 do
33163: LD_ADDR_VAR 0 4
33167: PUSH
33168: DOUBLE
33169: LD_INT 1
33171: DEC
33172: ST_TO_ADDR
33173: LD_VAR 0 1
33177: PUSH
33178: FOR_TO
33179: IFFALSE 33217
// if array1 [ i ] <> array2 [ i ] then
33181: LD_VAR 0 1
33185: PUSH
33186: LD_VAR 0 4
33190: ARRAY
33191: PUSH
33192: LD_VAR 0 2
33196: PUSH
33197: LD_VAR 0 4
33201: ARRAY
33202: NONEQUAL
33203: IFFALSE 33215
// begin result := false ;
33205: LD_ADDR_VAR 0 3
33209: PUSH
33210: LD_INT 0
33212: ST_TO_ADDR
// break ;
33213: GO 33217
// end ;
33215: GO 33178
33217: POP
33218: POP
// end ;
33219: LD_VAR 0 3
33223: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
33224: LD_INT 0
33226: PPUSH
33227: PPUSH
33228: PPUSH
// pom := GetBase ( fac ) ;
33229: LD_ADDR_VAR 0 5
33233: PUSH
33234: LD_VAR 0 1
33238: PPUSH
33239: CALL_OW 274
33243: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
33244: LD_ADDR_VAR 0 4
33248: PUSH
33249: LD_VAR 0 2
33253: PUSH
33254: LD_INT 1
33256: ARRAY
33257: PPUSH
33258: LD_VAR 0 2
33262: PUSH
33263: LD_INT 2
33265: ARRAY
33266: PPUSH
33267: LD_VAR 0 2
33271: PUSH
33272: LD_INT 3
33274: ARRAY
33275: PPUSH
33276: LD_VAR 0 2
33280: PUSH
33281: LD_INT 4
33283: ARRAY
33284: PPUSH
33285: CALL_OW 449
33289: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
33290: LD_ADDR_VAR 0 3
33294: PUSH
33295: LD_VAR 0 5
33299: PPUSH
33300: LD_INT 1
33302: PPUSH
33303: CALL_OW 275
33307: PUSH
33308: LD_VAR 0 4
33312: PUSH
33313: LD_INT 1
33315: ARRAY
33316: GREATEREQUAL
33317: PUSH
33318: LD_VAR 0 5
33322: PPUSH
33323: LD_INT 2
33325: PPUSH
33326: CALL_OW 275
33330: PUSH
33331: LD_VAR 0 4
33335: PUSH
33336: LD_INT 2
33338: ARRAY
33339: GREATEREQUAL
33340: AND
33341: PUSH
33342: LD_VAR 0 5
33346: PPUSH
33347: LD_INT 3
33349: PPUSH
33350: CALL_OW 275
33354: PUSH
33355: LD_VAR 0 4
33359: PUSH
33360: LD_INT 3
33362: ARRAY
33363: GREATEREQUAL
33364: AND
33365: ST_TO_ADDR
// end ;
33366: LD_VAR 0 3
33370: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
33371: LD_INT 0
33373: PPUSH
33374: PPUSH
33375: PPUSH
33376: PPUSH
// pom := GetBase ( building ) ;
33377: LD_ADDR_VAR 0 3
33381: PUSH
33382: LD_VAR 0 1
33386: PPUSH
33387: CALL_OW 274
33391: ST_TO_ADDR
// if not pom then
33392: LD_VAR 0 3
33396: NOT
33397: IFFALSE 33401
// exit ;
33399: GO 33571
// btype := GetBType ( building ) ;
33401: LD_ADDR_VAR 0 5
33405: PUSH
33406: LD_VAR 0 1
33410: PPUSH
33411: CALL_OW 266
33415: ST_TO_ADDR
// if btype = b_armoury then
33416: LD_VAR 0 5
33420: PUSH
33421: LD_INT 4
33423: EQUAL
33424: IFFALSE 33434
// btype := b_barracks ;
33426: LD_ADDR_VAR 0 5
33430: PUSH
33431: LD_INT 5
33433: ST_TO_ADDR
// if btype = b_depot then
33434: LD_VAR 0 5
33438: PUSH
33439: LD_INT 0
33441: EQUAL
33442: IFFALSE 33452
// btype := b_warehouse ;
33444: LD_ADDR_VAR 0 5
33448: PUSH
33449: LD_INT 1
33451: ST_TO_ADDR
// if btype = b_workshop then
33452: LD_VAR 0 5
33456: PUSH
33457: LD_INT 2
33459: EQUAL
33460: IFFALSE 33470
// btype := b_factory ;
33462: LD_ADDR_VAR 0 5
33466: PUSH
33467: LD_INT 3
33469: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
33470: LD_ADDR_VAR 0 4
33474: PUSH
33475: LD_VAR 0 5
33479: PPUSH
33480: LD_VAR 0 1
33484: PPUSH
33485: CALL_OW 248
33489: PPUSH
33490: CALL_OW 450
33494: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
33495: LD_ADDR_VAR 0 2
33499: PUSH
33500: LD_VAR 0 3
33504: PPUSH
33505: LD_INT 1
33507: PPUSH
33508: CALL_OW 275
33512: PUSH
33513: LD_VAR 0 4
33517: PUSH
33518: LD_INT 1
33520: ARRAY
33521: GREATEREQUAL
33522: PUSH
33523: LD_VAR 0 3
33527: PPUSH
33528: LD_INT 2
33530: PPUSH
33531: CALL_OW 275
33535: PUSH
33536: LD_VAR 0 4
33540: PUSH
33541: LD_INT 2
33543: ARRAY
33544: GREATEREQUAL
33545: AND
33546: PUSH
33547: LD_VAR 0 3
33551: PPUSH
33552: LD_INT 3
33554: PPUSH
33555: CALL_OW 275
33559: PUSH
33560: LD_VAR 0 4
33564: PUSH
33565: LD_INT 3
33567: ARRAY
33568: GREATEREQUAL
33569: AND
33570: ST_TO_ADDR
// end ;
33571: LD_VAR 0 2
33575: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
33576: LD_INT 0
33578: PPUSH
33579: PPUSH
33580: PPUSH
// pom := GetBase ( building ) ;
33581: LD_ADDR_VAR 0 4
33585: PUSH
33586: LD_VAR 0 1
33590: PPUSH
33591: CALL_OW 274
33595: ST_TO_ADDR
// if not pom then
33596: LD_VAR 0 4
33600: NOT
33601: IFFALSE 33605
// exit ;
33603: GO 33706
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
33605: LD_ADDR_VAR 0 5
33609: PUSH
33610: LD_VAR 0 2
33614: PPUSH
33615: LD_VAR 0 1
33619: PPUSH
33620: CALL_OW 248
33624: PPUSH
33625: CALL_OW 450
33629: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
33630: LD_ADDR_VAR 0 3
33634: PUSH
33635: LD_VAR 0 4
33639: PPUSH
33640: LD_INT 1
33642: PPUSH
33643: CALL_OW 275
33647: PUSH
33648: LD_VAR 0 5
33652: PUSH
33653: LD_INT 1
33655: ARRAY
33656: GREATEREQUAL
33657: PUSH
33658: LD_VAR 0 4
33662: PPUSH
33663: LD_INT 2
33665: PPUSH
33666: CALL_OW 275
33670: PUSH
33671: LD_VAR 0 5
33675: PUSH
33676: LD_INT 2
33678: ARRAY
33679: GREATEREQUAL
33680: AND
33681: PUSH
33682: LD_VAR 0 4
33686: PPUSH
33687: LD_INT 3
33689: PPUSH
33690: CALL_OW 275
33694: PUSH
33695: LD_VAR 0 5
33699: PUSH
33700: LD_INT 3
33702: ARRAY
33703: GREATEREQUAL
33704: AND
33705: ST_TO_ADDR
// end ;
33706: LD_VAR 0 3
33710: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
33711: LD_INT 0
33713: PPUSH
33714: PPUSH
33715: PPUSH
33716: PPUSH
33717: PPUSH
33718: PPUSH
33719: PPUSH
33720: PPUSH
33721: PPUSH
33722: PPUSH
33723: PPUSH
// result := false ;
33724: LD_ADDR_VAR 0 8
33728: PUSH
33729: LD_INT 0
33731: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
33732: LD_VAR 0 5
33736: NOT
33737: PUSH
33738: LD_VAR 0 1
33742: NOT
33743: OR
33744: PUSH
33745: LD_VAR 0 2
33749: NOT
33750: OR
33751: PUSH
33752: LD_VAR 0 3
33756: NOT
33757: OR
33758: IFFALSE 33762
// exit ;
33760: GO 34576
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
33762: LD_ADDR_VAR 0 14
33766: PUSH
33767: LD_VAR 0 1
33771: PPUSH
33772: LD_VAR 0 2
33776: PPUSH
33777: LD_VAR 0 3
33781: PPUSH
33782: LD_VAR 0 4
33786: PPUSH
33787: LD_VAR 0 5
33791: PUSH
33792: LD_INT 1
33794: ARRAY
33795: PPUSH
33796: CALL_OW 248
33800: PPUSH
33801: LD_INT 0
33803: PPUSH
33804: CALL 35829 0 6
33808: ST_TO_ADDR
// if not hexes then
33809: LD_VAR 0 14
33813: NOT
33814: IFFALSE 33818
// exit ;
33816: GO 34576
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
33818: LD_ADDR_VAR 0 17
33822: PUSH
33823: LD_VAR 0 5
33827: PPUSH
33828: LD_INT 22
33830: PUSH
33831: LD_VAR 0 13
33835: PPUSH
33836: CALL_OW 255
33840: PUSH
33841: EMPTY
33842: LIST
33843: LIST
33844: PUSH
33845: LD_INT 2
33847: PUSH
33848: LD_INT 30
33850: PUSH
33851: LD_INT 0
33853: PUSH
33854: EMPTY
33855: LIST
33856: LIST
33857: PUSH
33858: LD_INT 30
33860: PUSH
33861: LD_INT 1
33863: PUSH
33864: EMPTY
33865: LIST
33866: LIST
33867: PUSH
33868: EMPTY
33869: LIST
33870: LIST
33871: LIST
33872: PUSH
33873: EMPTY
33874: LIST
33875: LIST
33876: PPUSH
33877: CALL_OW 72
33881: ST_TO_ADDR
// for i = 1 to hexes do
33882: LD_ADDR_VAR 0 9
33886: PUSH
33887: DOUBLE
33888: LD_INT 1
33890: DEC
33891: ST_TO_ADDR
33892: LD_VAR 0 14
33896: PUSH
33897: FOR_TO
33898: IFFALSE 34574
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
33900: LD_ADDR_VAR 0 13
33904: PUSH
33905: LD_VAR 0 14
33909: PUSH
33910: LD_VAR 0 9
33914: ARRAY
33915: PUSH
33916: LD_INT 1
33918: ARRAY
33919: PPUSH
33920: LD_VAR 0 14
33924: PUSH
33925: LD_VAR 0 9
33929: ARRAY
33930: PUSH
33931: LD_INT 2
33933: ARRAY
33934: PPUSH
33935: CALL_OW 428
33939: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
33940: LD_VAR 0 14
33944: PUSH
33945: LD_VAR 0 9
33949: ARRAY
33950: PUSH
33951: LD_INT 1
33953: ARRAY
33954: PPUSH
33955: LD_VAR 0 14
33959: PUSH
33960: LD_VAR 0 9
33964: ARRAY
33965: PUSH
33966: LD_INT 2
33968: ARRAY
33969: PPUSH
33970: CALL_OW 351
33974: PUSH
33975: LD_VAR 0 14
33979: PUSH
33980: LD_VAR 0 9
33984: ARRAY
33985: PUSH
33986: LD_INT 1
33988: ARRAY
33989: PPUSH
33990: LD_VAR 0 14
33994: PUSH
33995: LD_VAR 0 9
33999: ARRAY
34000: PUSH
34001: LD_INT 2
34003: ARRAY
34004: PPUSH
34005: CALL_OW 488
34009: NOT
34010: OR
34011: PUSH
34012: LD_VAR 0 13
34016: PPUSH
34017: CALL_OW 247
34021: PUSH
34022: LD_INT 3
34024: EQUAL
34025: OR
34026: IFFALSE 34032
// exit ;
34028: POP
34029: POP
34030: GO 34576
// if not tmp then
34032: LD_VAR 0 13
34036: NOT
34037: IFFALSE 34041
// continue ;
34039: GO 33897
// result := true ;
34041: LD_ADDR_VAR 0 8
34045: PUSH
34046: LD_INT 1
34048: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
34049: LD_VAR 0 6
34053: PUSH
34054: LD_VAR 0 13
34058: PPUSH
34059: CALL_OW 247
34063: PUSH
34064: LD_INT 2
34066: EQUAL
34067: AND
34068: PUSH
34069: LD_VAR 0 13
34073: PPUSH
34074: CALL_OW 263
34078: PUSH
34079: LD_INT 1
34081: EQUAL
34082: AND
34083: IFFALSE 34247
// begin if IsDrivenBy ( tmp ) then
34085: LD_VAR 0 13
34089: PPUSH
34090: CALL_OW 311
34094: IFFALSE 34098
// continue ;
34096: GO 33897
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
34098: LD_VAR 0 6
34102: PPUSH
34103: LD_INT 3
34105: PUSH
34106: LD_INT 60
34108: PUSH
34109: EMPTY
34110: LIST
34111: PUSH
34112: EMPTY
34113: LIST
34114: LIST
34115: PUSH
34116: LD_INT 3
34118: PUSH
34119: LD_INT 55
34121: PUSH
34122: EMPTY
34123: LIST
34124: PUSH
34125: EMPTY
34126: LIST
34127: LIST
34128: PUSH
34129: EMPTY
34130: LIST
34131: LIST
34132: PPUSH
34133: CALL_OW 72
34137: IFFALSE 34245
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
34139: LD_ADDR_VAR 0 18
34143: PUSH
34144: LD_VAR 0 6
34148: PPUSH
34149: LD_INT 3
34151: PUSH
34152: LD_INT 60
34154: PUSH
34155: EMPTY
34156: LIST
34157: PUSH
34158: EMPTY
34159: LIST
34160: LIST
34161: PUSH
34162: LD_INT 3
34164: PUSH
34165: LD_INT 55
34167: PUSH
34168: EMPTY
34169: LIST
34170: PUSH
34171: EMPTY
34172: LIST
34173: LIST
34174: PUSH
34175: EMPTY
34176: LIST
34177: LIST
34178: PPUSH
34179: CALL_OW 72
34183: PUSH
34184: LD_INT 1
34186: ARRAY
34187: ST_TO_ADDR
// if IsInUnit ( driver ) then
34188: LD_VAR 0 18
34192: PPUSH
34193: CALL_OW 310
34197: IFFALSE 34208
// ComExit ( driver ) ;
34199: LD_VAR 0 18
34203: PPUSH
34204: CALL 59630 0 1
// AddComEnterUnit ( driver , tmp ) ;
34208: LD_VAR 0 18
34212: PPUSH
34213: LD_VAR 0 13
34217: PPUSH
34218: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
34222: LD_VAR 0 18
34226: PPUSH
34227: LD_VAR 0 7
34231: PPUSH
34232: CALL_OW 173
// AddComExitVehicle ( driver ) ;
34236: LD_VAR 0 18
34240: PPUSH
34241: CALL_OW 181
// end ; continue ;
34245: GO 33897
// end ; if not cleaners or not tmp in cleaners then
34247: LD_VAR 0 6
34251: NOT
34252: PUSH
34253: LD_VAR 0 13
34257: PUSH
34258: LD_VAR 0 6
34262: IN
34263: NOT
34264: OR
34265: IFFALSE 34572
// begin if dep then
34267: LD_VAR 0 17
34271: IFFALSE 34407
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
34273: LD_ADDR_VAR 0 16
34277: PUSH
34278: LD_VAR 0 17
34282: PUSH
34283: LD_INT 1
34285: ARRAY
34286: PPUSH
34287: CALL_OW 250
34291: PPUSH
34292: LD_VAR 0 17
34296: PUSH
34297: LD_INT 1
34299: ARRAY
34300: PPUSH
34301: CALL_OW 254
34305: PPUSH
34306: LD_INT 5
34308: PPUSH
34309: CALL_OW 272
34313: PUSH
34314: LD_VAR 0 17
34318: PUSH
34319: LD_INT 1
34321: ARRAY
34322: PPUSH
34323: CALL_OW 251
34327: PPUSH
34328: LD_VAR 0 17
34332: PUSH
34333: LD_INT 1
34335: ARRAY
34336: PPUSH
34337: CALL_OW 254
34341: PPUSH
34342: LD_INT 5
34344: PPUSH
34345: CALL_OW 273
34349: PUSH
34350: EMPTY
34351: LIST
34352: LIST
34353: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
34354: LD_VAR 0 16
34358: PUSH
34359: LD_INT 1
34361: ARRAY
34362: PPUSH
34363: LD_VAR 0 16
34367: PUSH
34368: LD_INT 2
34370: ARRAY
34371: PPUSH
34372: CALL_OW 488
34376: IFFALSE 34407
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
34378: LD_VAR 0 13
34382: PPUSH
34383: LD_VAR 0 16
34387: PUSH
34388: LD_INT 1
34390: ARRAY
34391: PPUSH
34392: LD_VAR 0 16
34396: PUSH
34397: LD_INT 2
34399: ARRAY
34400: PPUSH
34401: CALL_OW 111
// continue ;
34405: GO 33897
// end ; end ; r := GetDir ( tmp ) ;
34407: LD_ADDR_VAR 0 15
34411: PUSH
34412: LD_VAR 0 13
34416: PPUSH
34417: CALL_OW 254
34421: ST_TO_ADDR
// if r = 5 then
34422: LD_VAR 0 15
34426: PUSH
34427: LD_INT 5
34429: EQUAL
34430: IFFALSE 34440
// r := 0 ;
34432: LD_ADDR_VAR 0 15
34436: PUSH
34437: LD_INT 0
34439: ST_TO_ADDR
// for j = r to 5 do
34440: LD_ADDR_VAR 0 10
34444: PUSH
34445: DOUBLE
34446: LD_VAR 0 15
34450: DEC
34451: ST_TO_ADDR
34452: LD_INT 5
34454: PUSH
34455: FOR_TO
34456: IFFALSE 34570
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
34458: LD_ADDR_VAR 0 11
34462: PUSH
34463: LD_VAR 0 13
34467: PPUSH
34468: CALL_OW 250
34472: PPUSH
34473: LD_VAR 0 10
34477: PPUSH
34478: LD_INT 2
34480: PPUSH
34481: CALL_OW 272
34485: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
34486: LD_ADDR_VAR 0 12
34490: PUSH
34491: LD_VAR 0 13
34495: PPUSH
34496: CALL_OW 251
34500: PPUSH
34501: LD_VAR 0 10
34505: PPUSH
34506: LD_INT 2
34508: PPUSH
34509: CALL_OW 273
34513: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
34514: LD_VAR 0 11
34518: PPUSH
34519: LD_VAR 0 12
34523: PPUSH
34524: CALL_OW 488
34528: PUSH
34529: LD_VAR 0 11
34533: PPUSH
34534: LD_VAR 0 12
34538: PPUSH
34539: CALL_OW 428
34543: NOT
34544: AND
34545: IFFALSE 34568
// begin ComMoveXY ( tmp , _x , _y ) ;
34547: LD_VAR 0 13
34551: PPUSH
34552: LD_VAR 0 11
34556: PPUSH
34557: LD_VAR 0 12
34561: PPUSH
34562: CALL_OW 111
// break ;
34566: GO 34570
// end ; end ;
34568: GO 34455
34570: POP
34571: POP
// end ; end ;
34572: GO 33897
34574: POP
34575: POP
// end ;
34576: LD_VAR 0 8
34580: RET
// export function BuildingTechInvented ( side , btype ) ; begin
34581: LD_INT 0
34583: PPUSH
// result := true ;
34584: LD_ADDR_VAR 0 3
34588: PUSH
34589: LD_INT 1
34591: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
34592: LD_VAR 0 2
34596: PUSH
34597: LD_INT 24
34599: DOUBLE
34600: EQUAL
34601: IFTRUE 34611
34603: LD_INT 33
34605: DOUBLE
34606: EQUAL
34607: IFTRUE 34611
34609: GO 34636
34611: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
34612: LD_ADDR_VAR 0 3
34616: PUSH
34617: LD_INT 32
34619: PPUSH
34620: LD_VAR 0 1
34624: PPUSH
34625: CALL_OW 321
34629: PUSH
34630: LD_INT 2
34632: EQUAL
34633: ST_TO_ADDR
34634: GO 34952
34636: LD_INT 20
34638: DOUBLE
34639: EQUAL
34640: IFTRUE 34644
34642: GO 34669
34644: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
34645: LD_ADDR_VAR 0 3
34649: PUSH
34650: LD_INT 6
34652: PPUSH
34653: LD_VAR 0 1
34657: PPUSH
34658: CALL_OW 321
34662: PUSH
34663: LD_INT 2
34665: EQUAL
34666: ST_TO_ADDR
34667: GO 34952
34669: LD_INT 22
34671: DOUBLE
34672: EQUAL
34673: IFTRUE 34683
34675: LD_INT 36
34677: DOUBLE
34678: EQUAL
34679: IFTRUE 34683
34681: GO 34708
34683: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
34684: LD_ADDR_VAR 0 3
34688: PUSH
34689: LD_INT 15
34691: PPUSH
34692: LD_VAR 0 1
34696: PPUSH
34697: CALL_OW 321
34701: PUSH
34702: LD_INT 2
34704: EQUAL
34705: ST_TO_ADDR
34706: GO 34952
34708: LD_INT 30
34710: DOUBLE
34711: EQUAL
34712: IFTRUE 34716
34714: GO 34741
34716: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
34717: LD_ADDR_VAR 0 3
34721: PUSH
34722: LD_INT 20
34724: PPUSH
34725: LD_VAR 0 1
34729: PPUSH
34730: CALL_OW 321
34734: PUSH
34735: LD_INT 2
34737: EQUAL
34738: ST_TO_ADDR
34739: GO 34952
34741: LD_INT 28
34743: DOUBLE
34744: EQUAL
34745: IFTRUE 34755
34747: LD_INT 21
34749: DOUBLE
34750: EQUAL
34751: IFTRUE 34755
34753: GO 34780
34755: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
34756: LD_ADDR_VAR 0 3
34760: PUSH
34761: LD_INT 21
34763: PPUSH
34764: LD_VAR 0 1
34768: PPUSH
34769: CALL_OW 321
34773: PUSH
34774: LD_INT 2
34776: EQUAL
34777: ST_TO_ADDR
34778: GO 34952
34780: LD_INT 16
34782: DOUBLE
34783: EQUAL
34784: IFTRUE 34788
34786: GO 34813
34788: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
34789: LD_ADDR_VAR 0 3
34793: PUSH
34794: LD_INT 84
34796: PPUSH
34797: LD_VAR 0 1
34801: PPUSH
34802: CALL_OW 321
34806: PUSH
34807: LD_INT 2
34809: EQUAL
34810: ST_TO_ADDR
34811: GO 34952
34813: LD_INT 19
34815: DOUBLE
34816: EQUAL
34817: IFTRUE 34827
34819: LD_INT 23
34821: DOUBLE
34822: EQUAL
34823: IFTRUE 34827
34825: GO 34852
34827: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
34828: LD_ADDR_VAR 0 3
34832: PUSH
34833: LD_INT 83
34835: PPUSH
34836: LD_VAR 0 1
34840: PPUSH
34841: CALL_OW 321
34845: PUSH
34846: LD_INT 2
34848: EQUAL
34849: ST_TO_ADDR
34850: GO 34952
34852: LD_INT 17
34854: DOUBLE
34855: EQUAL
34856: IFTRUE 34860
34858: GO 34885
34860: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
34861: LD_ADDR_VAR 0 3
34865: PUSH
34866: LD_INT 39
34868: PPUSH
34869: LD_VAR 0 1
34873: PPUSH
34874: CALL_OW 321
34878: PUSH
34879: LD_INT 2
34881: EQUAL
34882: ST_TO_ADDR
34883: GO 34952
34885: LD_INT 18
34887: DOUBLE
34888: EQUAL
34889: IFTRUE 34893
34891: GO 34918
34893: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
34894: LD_ADDR_VAR 0 3
34898: PUSH
34899: LD_INT 40
34901: PPUSH
34902: LD_VAR 0 1
34906: PPUSH
34907: CALL_OW 321
34911: PUSH
34912: LD_INT 2
34914: EQUAL
34915: ST_TO_ADDR
34916: GO 34952
34918: LD_INT 27
34920: DOUBLE
34921: EQUAL
34922: IFTRUE 34926
34924: GO 34951
34926: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
34927: LD_ADDR_VAR 0 3
34931: PUSH
34932: LD_INT 35
34934: PPUSH
34935: LD_VAR 0 1
34939: PPUSH
34940: CALL_OW 321
34944: PUSH
34945: LD_INT 2
34947: EQUAL
34948: ST_TO_ADDR
34949: GO 34952
34951: POP
// end ;
34952: LD_VAR 0 3
34956: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
34957: LD_INT 0
34959: PPUSH
34960: PPUSH
34961: PPUSH
34962: PPUSH
34963: PPUSH
34964: PPUSH
34965: PPUSH
34966: PPUSH
34967: PPUSH
34968: PPUSH
34969: PPUSH
// result := false ;
34970: LD_ADDR_VAR 0 6
34974: PUSH
34975: LD_INT 0
34977: ST_TO_ADDR
// if btype = b_depot then
34978: LD_VAR 0 2
34982: PUSH
34983: LD_INT 0
34985: EQUAL
34986: IFFALSE 34998
// begin result := true ;
34988: LD_ADDR_VAR 0 6
34992: PUSH
34993: LD_INT 1
34995: ST_TO_ADDR
// exit ;
34996: GO 35824
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
34998: LD_VAR 0 1
35002: NOT
35003: PUSH
35004: LD_VAR 0 1
35008: PPUSH
35009: CALL_OW 266
35013: PUSH
35014: LD_INT 0
35016: PUSH
35017: LD_INT 1
35019: PUSH
35020: EMPTY
35021: LIST
35022: LIST
35023: IN
35024: NOT
35025: OR
35026: PUSH
35027: LD_VAR 0 2
35031: NOT
35032: OR
35033: PUSH
35034: LD_VAR 0 5
35038: PUSH
35039: LD_INT 0
35041: PUSH
35042: LD_INT 1
35044: PUSH
35045: LD_INT 2
35047: PUSH
35048: LD_INT 3
35050: PUSH
35051: LD_INT 4
35053: PUSH
35054: LD_INT 5
35056: PUSH
35057: EMPTY
35058: LIST
35059: LIST
35060: LIST
35061: LIST
35062: LIST
35063: LIST
35064: IN
35065: NOT
35066: OR
35067: PUSH
35068: LD_VAR 0 3
35072: PPUSH
35073: LD_VAR 0 4
35077: PPUSH
35078: CALL_OW 488
35082: NOT
35083: OR
35084: IFFALSE 35088
// exit ;
35086: GO 35824
// side := GetSide ( depot ) ;
35088: LD_ADDR_VAR 0 9
35092: PUSH
35093: LD_VAR 0 1
35097: PPUSH
35098: CALL_OW 255
35102: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
35103: LD_VAR 0 9
35107: PPUSH
35108: LD_VAR 0 2
35112: PPUSH
35113: CALL 34581 0 2
35117: NOT
35118: IFFALSE 35122
// exit ;
35120: GO 35824
// pom := GetBase ( depot ) ;
35122: LD_ADDR_VAR 0 10
35126: PUSH
35127: LD_VAR 0 1
35131: PPUSH
35132: CALL_OW 274
35136: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
35137: LD_ADDR_VAR 0 11
35141: PUSH
35142: LD_VAR 0 2
35146: PPUSH
35147: LD_VAR 0 1
35151: PPUSH
35152: CALL_OW 248
35156: PPUSH
35157: CALL_OW 450
35161: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
35162: LD_VAR 0 10
35166: PPUSH
35167: LD_INT 1
35169: PPUSH
35170: CALL_OW 275
35174: PUSH
35175: LD_VAR 0 11
35179: PUSH
35180: LD_INT 1
35182: ARRAY
35183: GREATEREQUAL
35184: PUSH
35185: LD_VAR 0 10
35189: PPUSH
35190: LD_INT 2
35192: PPUSH
35193: CALL_OW 275
35197: PUSH
35198: LD_VAR 0 11
35202: PUSH
35203: LD_INT 2
35205: ARRAY
35206: GREATEREQUAL
35207: AND
35208: PUSH
35209: LD_VAR 0 10
35213: PPUSH
35214: LD_INT 3
35216: PPUSH
35217: CALL_OW 275
35221: PUSH
35222: LD_VAR 0 11
35226: PUSH
35227: LD_INT 3
35229: ARRAY
35230: GREATEREQUAL
35231: AND
35232: NOT
35233: IFFALSE 35237
// exit ;
35235: GO 35824
// if GetBType ( depot ) = b_depot then
35237: LD_VAR 0 1
35241: PPUSH
35242: CALL_OW 266
35246: PUSH
35247: LD_INT 0
35249: EQUAL
35250: IFFALSE 35262
// dist := 28 else
35252: LD_ADDR_VAR 0 14
35256: PUSH
35257: LD_INT 28
35259: ST_TO_ADDR
35260: GO 35270
// dist := 36 ;
35262: LD_ADDR_VAR 0 14
35266: PUSH
35267: LD_INT 36
35269: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
35270: LD_VAR 0 1
35274: PPUSH
35275: LD_VAR 0 3
35279: PPUSH
35280: LD_VAR 0 4
35284: PPUSH
35285: CALL_OW 297
35289: PUSH
35290: LD_VAR 0 14
35294: GREATER
35295: IFFALSE 35299
// exit ;
35297: GO 35824
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
35299: LD_ADDR_VAR 0 12
35303: PUSH
35304: LD_VAR 0 2
35308: PPUSH
35309: LD_VAR 0 3
35313: PPUSH
35314: LD_VAR 0 4
35318: PPUSH
35319: LD_VAR 0 5
35323: PPUSH
35324: LD_VAR 0 1
35328: PPUSH
35329: CALL_OW 248
35333: PPUSH
35334: LD_INT 0
35336: PPUSH
35337: CALL 35829 0 6
35341: ST_TO_ADDR
// if not hexes then
35342: LD_VAR 0 12
35346: NOT
35347: IFFALSE 35351
// exit ;
35349: GO 35824
// hex := GetHexInfo ( x , y ) ;
35351: LD_ADDR_VAR 0 15
35355: PUSH
35356: LD_VAR 0 3
35360: PPUSH
35361: LD_VAR 0 4
35365: PPUSH
35366: CALL_OW 546
35370: ST_TO_ADDR
// if hex [ 1 ] then
35371: LD_VAR 0 15
35375: PUSH
35376: LD_INT 1
35378: ARRAY
35379: IFFALSE 35383
// exit ;
35381: GO 35824
// height := hex [ 2 ] ;
35383: LD_ADDR_VAR 0 13
35387: PUSH
35388: LD_VAR 0 15
35392: PUSH
35393: LD_INT 2
35395: ARRAY
35396: ST_TO_ADDR
// for i = 1 to hexes do
35397: LD_ADDR_VAR 0 7
35401: PUSH
35402: DOUBLE
35403: LD_INT 1
35405: DEC
35406: ST_TO_ADDR
35407: LD_VAR 0 12
35411: PUSH
35412: FOR_TO
35413: IFFALSE 35743
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
35415: LD_VAR 0 12
35419: PUSH
35420: LD_VAR 0 7
35424: ARRAY
35425: PUSH
35426: LD_INT 1
35428: ARRAY
35429: PPUSH
35430: LD_VAR 0 12
35434: PUSH
35435: LD_VAR 0 7
35439: ARRAY
35440: PUSH
35441: LD_INT 2
35443: ARRAY
35444: PPUSH
35445: CALL_OW 488
35449: NOT
35450: PUSH
35451: LD_VAR 0 12
35455: PUSH
35456: LD_VAR 0 7
35460: ARRAY
35461: PUSH
35462: LD_INT 1
35464: ARRAY
35465: PPUSH
35466: LD_VAR 0 12
35470: PUSH
35471: LD_VAR 0 7
35475: ARRAY
35476: PUSH
35477: LD_INT 2
35479: ARRAY
35480: PPUSH
35481: CALL_OW 428
35485: PUSH
35486: LD_INT 0
35488: GREATER
35489: OR
35490: PUSH
35491: LD_VAR 0 12
35495: PUSH
35496: LD_VAR 0 7
35500: ARRAY
35501: PUSH
35502: LD_INT 1
35504: ARRAY
35505: PPUSH
35506: LD_VAR 0 12
35510: PUSH
35511: LD_VAR 0 7
35515: ARRAY
35516: PUSH
35517: LD_INT 2
35519: ARRAY
35520: PPUSH
35521: CALL_OW 351
35525: OR
35526: IFFALSE 35532
// exit ;
35528: POP
35529: POP
35530: GO 35824
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
35532: LD_ADDR_VAR 0 8
35536: PUSH
35537: LD_VAR 0 12
35541: PUSH
35542: LD_VAR 0 7
35546: ARRAY
35547: PUSH
35548: LD_INT 1
35550: ARRAY
35551: PPUSH
35552: LD_VAR 0 12
35556: PUSH
35557: LD_VAR 0 7
35561: ARRAY
35562: PUSH
35563: LD_INT 2
35565: ARRAY
35566: PPUSH
35567: CALL_OW 546
35571: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
35572: LD_VAR 0 8
35576: PUSH
35577: LD_INT 1
35579: ARRAY
35580: PUSH
35581: LD_VAR 0 8
35585: PUSH
35586: LD_INT 2
35588: ARRAY
35589: PUSH
35590: LD_VAR 0 13
35594: PUSH
35595: LD_INT 2
35597: PLUS
35598: GREATER
35599: OR
35600: PUSH
35601: LD_VAR 0 8
35605: PUSH
35606: LD_INT 2
35608: ARRAY
35609: PUSH
35610: LD_VAR 0 13
35614: PUSH
35615: LD_INT 2
35617: MINUS
35618: LESS
35619: OR
35620: PUSH
35621: LD_VAR 0 8
35625: PUSH
35626: LD_INT 3
35628: ARRAY
35629: PUSH
35630: LD_INT 0
35632: PUSH
35633: LD_INT 8
35635: PUSH
35636: LD_INT 9
35638: PUSH
35639: LD_INT 10
35641: PUSH
35642: LD_INT 11
35644: PUSH
35645: LD_INT 12
35647: PUSH
35648: LD_INT 13
35650: PUSH
35651: LD_INT 16
35653: PUSH
35654: LD_INT 17
35656: PUSH
35657: LD_INT 18
35659: PUSH
35660: LD_INT 19
35662: PUSH
35663: LD_INT 20
35665: PUSH
35666: LD_INT 21
35668: PUSH
35669: EMPTY
35670: LIST
35671: LIST
35672: LIST
35673: LIST
35674: LIST
35675: LIST
35676: LIST
35677: LIST
35678: LIST
35679: LIST
35680: LIST
35681: LIST
35682: LIST
35683: IN
35684: NOT
35685: OR
35686: PUSH
35687: LD_VAR 0 8
35691: PUSH
35692: LD_INT 5
35694: ARRAY
35695: NOT
35696: OR
35697: PUSH
35698: LD_VAR 0 8
35702: PUSH
35703: LD_INT 6
35705: ARRAY
35706: PUSH
35707: LD_INT 1
35709: PUSH
35710: LD_INT 2
35712: PUSH
35713: LD_INT 7
35715: PUSH
35716: LD_INT 9
35718: PUSH
35719: LD_INT 10
35721: PUSH
35722: LD_INT 11
35724: PUSH
35725: EMPTY
35726: LIST
35727: LIST
35728: LIST
35729: LIST
35730: LIST
35731: LIST
35732: IN
35733: NOT
35734: OR
35735: IFFALSE 35741
// exit ;
35737: POP
35738: POP
35739: GO 35824
// end ;
35741: GO 35412
35743: POP
35744: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
35745: LD_VAR 0 9
35749: PPUSH
35750: LD_VAR 0 3
35754: PPUSH
35755: LD_VAR 0 4
35759: PPUSH
35760: LD_INT 20
35762: PPUSH
35763: CALL 27747 0 4
35767: PUSH
35768: LD_INT 4
35770: ARRAY
35771: IFFALSE 35775
// exit ;
35773: GO 35824
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
35775: LD_VAR 0 2
35779: PUSH
35780: LD_INT 29
35782: PUSH
35783: LD_INT 30
35785: PUSH
35786: EMPTY
35787: LIST
35788: LIST
35789: IN
35790: PUSH
35791: LD_VAR 0 3
35795: PPUSH
35796: LD_VAR 0 4
35800: PPUSH
35801: LD_VAR 0 9
35805: PPUSH
35806: CALL_OW 440
35810: NOT
35811: AND
35812: IFFALSE 35816
// exit ;
35814: GO 35824
// result := true ;
35816: LD_ADDR_VAR 0 6
35820: PUSH
35821: LD_INT 1
35823: ST_TO_ADDR
// end ;
35824: LD_VAR 0 6
35828: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
35829: LD_INT 0
35831: PPUSH
35832: PPUSH
35833: PPUSH
35834: PPUSH
35835: PPUSH
35836: PPUSH
35837: PPUSH
35838: PPUSH
35839: PPUSH
35840: PPUSH
35841: PPUSH
35842: PPUSH
35843: PPUSH
35844: PPUSH
35845: PPUSH
35846: PPUSH
35847: PPUSH
35848: PPUSH
35849: PPUSH
35850: PPUSH
35851: PPUSH
35852: PPUSH
35853: PPUSH
35854: PPUSH
35855: PPUSH
35856: PPUSH
35857: PPUSH
35858: PPUSH
35859: PPUSH
35860: PPUSH
35861: PPUSH
35862: PPUSH
35863: PPUSH
35864: PPUSH
35865: PPUSH
35866: PPUSH
35867: PPUSH
35868: PPUSH
35869: PPUSH
35870: PPUSH
35871: PPUSH
35872: PPUSH
35873: PPUSH
35874: PPUSH
35875: PPUSH
35876: PPUSH
35877: PPUSH
35878: PPUSH
35879: PPUSH
35880: PPUSH
35881: PPUSH
35882: PPUSH
35883: PPUSH
35884: PPUSH
35885: PPUSH
35886: PPUSH
35887: PPUSH
35888: PPUSH
// result = [ ] ;
35889: LD_ADDR_VAR 0 7
35893: PUSH
35894: EMPTY
35895: ST_TO_ADDR
// temp_list = [ ] ;
35896: LD_ADDR_VAR 0 9
35900: PUSH
35901: EMPTY
35902: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
35903: LD_VAR 0 4
35907: PUSH
35908: LD_INT 0
35910: PUSH
35911: LD_INT 1
35913: PUSH
35914: LD_INT 2
35916: PUSH
35917: LD_INT 3
35919: PUSH
35920: LD_INT 4
35922: PUSH
35923: LD_INT 5
35925: PUSH
35926: EMPTY
35927: LIST
35928: LIST
35929: LIST
35930: LIST
35931: LIST
35932: LIST
35933: IN
35934: NOT
35935: PUSH
35936: LD_VAR 0 1
35940: PUSH
35941: LD_INT 0
35943: PUSH
35944: LD_INT 1
35946: PUSH
35947: EMPTY
35948: LIST
35949: LIST
35950: IN
35951: PUSH
35952: LD_VAR 0 5
35956: PUSH
35957: LD_INT 1
35959: PUSH
35960: LD_INT 2
35962: PUSH
35963: LD_INT 3
35965: PUSH
35966: EMPTY
35967: LIST
35968: LIST
35969: LIST
35970: IN
35971: NOT
35972: AND
35973: OR
35974: IFFALSE 35978
// exit ;
35976: GO 54369
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
35978: LD_VAR 0 1
35982: PUSH
35983: LD_INT 6
35985: PUSH
35986: LD_INT 7
35988: PUSH
35989: LD_INT 8
35991: PUSH
35992: LD_INT 13
35994: PUSH
35995: LD_INT 12
35997: PUSH
35998: LD_INT 15
36000: PUSH
36001: LD_INT 11
36003: PUSH
36004: LD_INT 14
36006: PUSH
36007: LD_INT 10
36009: PUSH
36010: EMPTY
36011: LIST
36012: LIST
36013: LIST
36014: LIST
36015: LIST
36016: LIST
36017: LIST
36018: LIST
36019: LIST
36020: IN
36021: IFFALSE 36031
// btype = b_lab ;
36023: LD_ADDR_VAR 0 1
36027: PUSH
36028: LD_INT 6
36030: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
36031: LD_VAR 0 6
36035: PUSH
36036: LD_INT 0
36038: PUSH
36039: LD_INT 1
36041: PUSH
36042: LD_INT 2
36044: PUSH
36045: EMPTY
36046: LIST
36047: LIST
36048: LIST
36049: IN
36050: NOT
36051: PUSH
36052: LD_VAR 0 1
36056: PUSH
36057: LD_INT 0
36059: PUSH
36060: LD_INT 1
36062: PUSH
36063: LD_INT 2
36065: PUSH
36066: LD_INT 3
36068: PUSH
36069: LD_INT 6
36071: PUSH
36072: LD_INT 36
36074: PUSH
36075: LD_INT 4
36077: PUSH
36078: LD_INT 5
36080: PUSH
36081: LD_INT 31
36083: PUSH
36084: LD_INT 32
36086: PUSH
36087: LD_INT 33
36089: PUSH
36090: EMPTY
36091: LIST
36092: LIST
36093: LIST
36094: LIST
36095: LIST
36096: LIST
36097: LIST
36098: LIST
36099: LIST
36100: LIST
36101: LIST
36102: IN
36103: NOT
36104: PUSH
36105: LD_VAR 0 6
36109: PUSH
36110: LD_INT 1
36112: EQUAL
36113: AND
36114: OR
36115: PUSH
36116: LD_VAR 0 1
36120: PUSH
36121: LD_INT 2
36123: PUSH
36124: LD_INT 3
36126: PUSH
36127: EMPTY
36128: LIST
36129: LIST
36130: IN
36131: NOT
36132: PUSH
36133: LD_VAR 0 6
36137: PUSH
36138: LD_INT 2
36140: EQUAL
36141: AND
36142: OR
36143: IFFALSE 36153
// mode = 0 ;
36145: LD_ADDR_VAR 0 6
36149: PUSH
36150: LD_INT 0
36152: ST_TO_ADDR
// case mode of 0 :
36153: LD_VAR 0 6
36157: PUSH
36158: LD_INT 0
36160: DOUBLE
36161: EQUAL
36162: IFTRUE 36166
36164: GO 47619
36166: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
36167: LD_ADDR_VAR 0 11
36171: PUSH
36172: LD_INT 0
36174: PUSH
36175: LD_INT 0
36177: PUSH
36178: EMPTY
36179: LIST
36180: LIST
36181: PUSH
36182: LD_INT 0
36184: PUSH
36185: LD_INT 1
36187: NEG
36188: PUSH
36189: EMPTY
36190: LIST
36191: LIST
36192: PUSH
36193: LD_INT 1
36195: PUSH
36196: LD_INT 0
36198: PUSH
36199: EMPTY
36200: LIST
36201: LIST
36202: PUSH
36203: LD_INT 1
36205: PUSH
36206: LD_INT 1
36208: PUSH
36209: EMPTY
36210: LIST
36211: LIST
36212: PUSH
36213: LD_INT 0
36215: PUSH
36216: LD_INT 1
36218: PUSH
36219: EMPTY
36220: LIST
36221: LIST
36222: PUSH
36223: LD_INT 1
36225: NEG
36226: PUSH
36227: LD_INT 0
36229: PUSH
36230: EMPTY
36231: LIST
36232: LIST
36233: PUSH
36234: LD_INT 1
36236: NEG
36237: PUSH
36238: LD_INT 1
36240: NEG
36241: PUSH
36242: EMPTY
36243: LIST
36244: LIST
36245: PUSH
36246: LD_INT 1
36248: NEG
36249: PUSH
36250: LD_INT 2
36252: NEG
36253: PUSH
36254: EMPTY
36255: LIST
36256: LIST
36257: PUSH
36258: LD_INT 0
36260: PUSH
36261: LD_INT 2
36263: NEG
36264: PUSH
36265: EMPTY
36266: LIST
36267: LIST
36268: PUSH
36269: LD_INT 1
36271: PUSH
36272: LD_INT 1
36274: NEG
36275: PUSH
36276: EMPTY
36277: LIST
36278: LIST
36279: PUSH
36280: LD_INT 1
36282: PUSH
36283: LD_INT 2
36285: PUSH
36286: EMPTY
36287: LIST
36288: LIST
36289: PUSH
36290: LD_INT 0
36292: PUSH
36293: LD_INT 2
36295: PUSH
36296: EMPTY
36297: LIST
36298: LIST
36299: PUSH
36300: LD_INT 1
36302: NEG
36303: PUSH
36304: LD_INT 1
36306: PUSH
36307: EMPTY
36308: LIST
36309: LIST
36310: PUSH
36311: LD_INT 1
36313: PUSH
36314: LD_INT 3
36316: PUSH
36317: EMPTY
36318: LIST
36319: LIST
36320: PUSH
36321: LD_INT 0
36323: PUSH
36324: LD_INT 3
36326: PUSH
36327: EMPTY
36328: LIST
36329: LIST
36330: PUSH
36331: LD_INT 1
36333: NEG
36334: PUSH
36335: LD_INT 2
36337: PUSH
36338: EMPTY
36339: LIST
36340: LIST
36341: PUSH
36342: EMPTY
36343: LIST
36344: LIST
36345: LIST
36346: LIST
36347: LIST
36348: LIST
36349: LIST
36350: LIST
36351: LIST
36352: LIST
36353: LIST
36354: LIST
36355: LIST
36356: LIST
36357: LIST
36358: LIST
36359: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
36360: LD_ADDR_VAR 0 12
36364: PUSH
36365: LD_INT 0
36367: PUSH
36368: LD_INT 0
36370: PUSH
36371: EMPTY
36372: LIST
36373: LIST
36374: PUSH
36375: LD_INT 0
36377: PUSH
36378: LD_INT 1
36380: NEG
36381: PUSH
36382: EMPTY
36383: LIST
36384: LIST
36385: PUSH
36386: LD_INT 1
36388: PUSH
36389: LD_INT 0
36391: PUSH
36392: EMPTY
36393: LIST
36394: LIST
36395: PUSH
36396: LD_INT 1
36398: PUSH
36399: LD_INT 1
36401: PUSH
36402: EMPTY
36403: LIST
36404: LIST
36405: PUSH
36406: LD_INT 0
36408: PUSH
36409: LD_INT 1
36411: PUSH
36412: EMPTY
36413: LIST
36414: LIST
36415: PUSH
36416: LD_INT 1
36418: NEG
36419: PUSH
36420: LD_INT 0
36422: PUSH
36423: EMPTY
36424: LIST
36425: LIST
36426: PUSH
36427: LD_INT 1
36429: NEG
36430: PUSH
36431: LD_INT 1
36433: NEG
36434: PUSH
36435: EMPTY
36436: LIST
36437: LIST
36438: PUSH
36439: LD_INT 1
36441: PUSH
36442: LD_INT 1
36444: NEG
36445: PUSH
36446: EMPTY
36447: LIST
36448: LIST
36449: PUSH
36450: LD_INT 2
36452: PUSH
36453: LD_INT 0
36455: PUSH
36456: EMPTY
36457: LIST
36458: LIST
36459: PUSH
36460: LD_INT 2
36462: PUSH
36463: LD_INT 1
36465: PUSH
36466: EMPTY
36467: LIST
36468: LIST
36469: PUSH
36470: LD_INT 1
36472: NEG
36473: PUSH
36474: LD_INT 1
36476: PUSH
36477: EMPTY
36478: LIST
36479: LIST
36480: PUSH
36481: LD_INT 2
36483: NEG
36484: PUSH
36485: LD_INT 0
36487: PUSH
36488: EMPTY
36489: LIST
36490: LIST
36491: PUSH
36492: LD_INT 2
36494: NEG
36495: PUSH
36496: LD_INT 1
36498: NEG
36499: PUSH
36500: EMPTY
36501: LIST
36502: LIST
36503: PUSH
36504: LD_INT 2
36506: NEG
36507: PUSH
36508: LD_INT 1
36510: PUSH
36511: EMPTY
36512: LIST
36513: LIST
36514: PUSH
36515: LD_INT 3
36517: NEG
36518: PUSH
36519: LD_INT 0
36521: PUSH
36522: EMPTY
36523: LIST
36524: LIST
36525: PUSH
36526: LD_INT 3
36528: NEG
36529: PUSH
36530: LD_INT 1
36532: NEG
36533: PUSH
36534: EMPTY
36535: LIST
36536: LIST
36537: PUSH
36538: EMPTY
36539: LIST
36540: LIST
36541: LIST
36542: LIST
36543: LIST
36544: LIST
36545: LIST
36546: LIST
36547: LIST
36548: LIST
36549: LIST
36550: LIST
36551: LIST
36552: LIST
36553: LIST
36554: LIST
36555: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
36556: LD_ADDR_VAR 0 13
36560: PUSH
36561: LD_INT 0
36563: PUSH
36564: LD_INT 0
36566: PUSH
36567: EMPTY
36568: LIST
36569: LIST
36570: PUSH
36571: LD_INT 0
36573: PUSH
36574: LD_INT 1
36576: NEG
36577: PUSH
36578: EMPTY
36579: LIST
36580: LIST
36581: PUSH
36582: LD_INT 1
36584: PUSH
36585: LD_INT 0
36587: PUSH
36588: EMPTY
36589: LIST
36590: LIST
36591: PUSH
36592: LD_INT 1
36594: PUSH
36595: LD_INT 1
36597: PUSH
36598: EMPTY
36599: LIST
36600: LIST
36601: PUSH
36602: LD_INT 0
36604: PUSH
36605: LD_INT 1
36607: PUSH
36608: EMPTY
36609: LIST
36610: LIST
36611: PUSH
36612: LD_INT 1
36614: NEG
36615: PUSH
36616: LD_INT 0
36618: PUSH
36619: EMPTY
36620: LIST
36621: LIST
36622: PUSH
36623: LD_INT 1
36625: NEG
36626: PUSH
36627: LD_INT 1
36629: NEG
36630: PUSH
36631: EMPTY
36632: LIST
36633: LIST
36634: PUSH
36635: LD_INT 1
36637: NEG
36638: PUSH
36639: LD_INT 2
36641: NEG
36642: PUSH
36643: EMPTY
36644: LIST
36645: LIST
36646: PUSH
36647: LD_INT 2
36649: PUSH
36650: LD_INT 1
36652: PUSH
36653: EMPTY
36654: LIST
36655: LIST
36656: PUSH
36657: LD_INT 2
36659: PUSH
36660: LD_INT 2
36662: PUSH
36663: EMPTY
36664: LIST
36665: LIST
36666: PUSH
36667: LD_INT 1
36669: PUSH
36670: LD_INT 2
36672: PUSH
36673: EMPTY
36674: LIST
36675: LIST
36676: PUSH
36677: LD_INT 2
36679: NEG
36680: PUSH
36681: LD_INT 1
36683: NEG
36684: PUSH
36685: EMPTY
36686: LIST
36687: LIST
36688: PUSH
36689: LD_INT 2
36691: NEG
36692: PUSH
36693: LD_INT 2
36695: NEG
36696: PUSH
36697: EMPTY
36698: LIST
36699: LIST
36700: PUSH
36701: LD_INT 2
36703: NEG
36704: PUSH
36705: LD_INT 3
36707: NEG
36708: PUSH
36709: EMPTY
36710: LIST
36711: LIST
36712: PUSH
36713: LD_INT 3
36715: NEG
36716: PUSH
36717: LD_INT 2
36719: NEG
36720: PUSH
36721: EMPTY
36722: LIST
36723: LIST
36724: PUSH
36725: LD_INT 3
36727: NEG
36728: PUSH
36729: LD_INT 3
36731: NEG
36732: PUSH
36733: EMPTY
36734: LIST
36735: LIST
36736: PUSH
36737: EMPTY
36738: LIST
36739: LIST
36740: LIST
36741: LIST
36742: LIST
36743: LIST
36744: LIST
36745: LIST
36746: LIST
36747: LIST
36748: LIST
36749: LIST
36750: LIST
36751: LIST
36752: LIST
36753: LIST
36754: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
36755: LD_ADDR_VAR 0 14
36759: PUSH
36760: LD_INT 0
36762: PUSH
36763: LD_INT 0
36765: PUSH
36766: EMPTY
36767: LIST
36768: LIST
36769: PUSH
36770: LD_INT 0
36772: PUSH
36773: LD_INT 1
36775: NEG
36776: PUSH
36777: EMPTY
36778: LIST
36779: LIST
36780: PUSH
36781: LD_INT 1
36783: PUSH
36784: LD_INT 0
36786: PUSH
36787: EMPTY
36788: LIST
36789: LIST
36790: PUSH
36791: LD_INT 1
36793: PUSH
36794: LD_INT 1
36796: PUSH
36797: EMPTY
36798: LIST
36799: LIST
36800: PUSH
36801: LD_INT 0
36803: PUSH
36804: LD_INT 1
36806: PUSH
36807: EMPTY
36808: LIST
36809: LIST
36810: PUSH
36811: LD_INT 1
36813: NEG
36814: PUSH
36815: LD_INT 0
36817: PUSH
36818: EMPTY
36819: LIST
36820: LIST
36821: PUSH
36822: LD_INT 1
36824: NEG
36825: PUSH
36826: LD_INT 1
36828: NEG
36829: PUSH
36830: EMPTY
36831: LIST
36832: LIST
36833: PUSH
36834: LD_INT 1
36836: NEG
36837: PUSH
36838: LD_INT 2
36840: NEG
36841: PUSH
36842: EMPTY
36843: LIST
36844: LIST
36845: PUSH
36846: LD_INT 0
36848: PUSH
36849: LD_INT 2
36851: NEG
36852: PUSH
36853: EMPTY
36854: LIST
36855: LIST
36856: PUSH
36857: LD_INT 1
36859: PUSH
36860: LD_INT 1
36862: NEG
36863: PUSH
36864: EMPTY
36865: LIST
36866: LIST
36867: PUSH
36868: LD_INT 1
36870: PUSH
36871: LD_INT 2
36873: PUSH
36874: EMPTY
36875: LIST
36876: LIST
36877: PUSH
36878: LD_INT 0
36880: PUSH
36881: LD_INT 2
36883: PUSH
36884: EMPTY
36885: LIST
36886: LIST
36887: PUSH
36888: LD_INT 1
36890: NEG
36891: PUSH
36892: LD_INT 1
36894: PUSH
36895: EMPTY
36896: LIST
36897: LIST
36898: PUSH
36899: LD_INT 1
36901: NEG
36902: PUSH
36903: LD_INT 3
36905: NEG
36906: PUSH
36907: EMPTY
36908: LIST
36909: LIST
36910: PUSH
36911: LD_INT 0
36913: PUSH
36914: LD_INT 3
36916: NEG
36917: PUSH
36918: EMPTY
36919: LIST
36920: LIST
36921: PUSH
36922: LD_INT 1
36924: PUSH
36925: LD_INT 2
36927: NEG
36928: PUSH
36929: EMPTY
36930: LIST
36931: LIST
36932: PUSH
36933: EMPTY
36934: LIST
36935: LIST
36936: LIST
36937: LIST
36938: LIST
36939: LIST
36940: LIST
36941: LIST
36942: LIST
36943: LIST
36944: LIST
36945: LIST
36946: LIST
36947: LIST
36948: LIST
36949: LIST
36950: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
36951: LD_ADDR_VAR 0 15
36955: PUSH
36956: LD_INT 0
36958: PUSH
36959: LD_INT 0
36961: PUSH
36962: EMPTY
36963: LIST
36964: LIST
36965: PUSH
36966: LD_INT 0
36968: PUSH
36969: LD_INT 1
36971: NEG
36972: PUSH
36973: EMPTY
36974: LIST
36975: LIST
36976: PUSH
36977: LD_INT 1
36979: PUSH
36980: LD_INT 0
36982: PUSH
36983: EMPTY
36984: LIST
36985: LIST
36986: PUSH
36987: LD_INT 1
36989: PUSH
36990: LD_INT 1
36992: PUSH
36993: EMPTY
36994: LIST
36995: LIST
36996: PUSH
36997: LD_INT 0
36999: PUSH
37000: LD_INT 1
37002: PUSH
37003: EMPTY
37004: LIST
37005: LIST
37006: PUSH
37007: LD_INT 1
37009: NEG
37010: PUSH
37011: LD_INT 0
37013: PUSH
37014: EMPTY
37015: LIST
37016: LIST
37017: PUSH
37018: LD_INT 1
37020: NEG
37021: PUSH
37022: LD_INT 1
37024: NEG
37025: PUSH
37026: EMPTY
37027: LIST
37028: LIST
37029: PUSH
37030: LD_INT 1
37032: PUSH
37033: LD_INT 1
37035: NEG
37036: PUSH
37037: EMPTY
37038: LIST
37039: LIST
37040: PUSH
37041: LD_INT 2
37043: PUSH
37044: LD_INT 0
37046: PUSH
37047: EMPTY
37048: LIST
37049: LIST
37050: PUSH
37051: LD_INT 2
37053: PUSH
37054: LD_INT 1
37056: PUSH
37057: EMPTY
37058: LIST
37059: LIST
37060: PUSH
37061: LD_INT 1
37063: NEG
37064: PUSH
37065: LD_INT 1
37067: PUSH
37068: EMPTY
37069: LIST
37070: LIST
37071: PUSH
37072: LD_INT 2
37074: NEG
37075: PUSH
37076: LD_INT 0
37078: PUSH
37079: EMPTY
37080: LIST
37081: LIST
37082: PUSH
37083: LD_INT 2
37085: NEG
37086: PUSH
37087: LD_INT 1
37089: NEG
37090: PUSH
37091: EMPTY
37092: LIST
37093: LIST
37094: PUSH
37095: LD_INT 2
37097: PUSH
37098: LD_INT 1
37100: NEG
37101: PUSH
37102: EMPTY
37103: LIST
37104: LIST
37105: PUSH
37106: LD_INT 3
37108: PUSH
37109: LD_INT 0
37111: PUSH
37112: EMPTY
37113: LIST
37114: LIST
37115: PUSH
37116: LD_INT 3
37118: PUSH
37119: LD_INT 1
37121: PUSH
37122: EMPTY
37123: LIST
37124: LIST
37125: PUSH
37126: EMPTY
37127: LIST
37128: LIST
37129: LIST
37130: LIST
37131: LIST
37132: LIST
37133: LIST
37134: LIST
37135: LIST
37136: LIST
37137: LIST
37138: LIST
37139: LIST
37140: LIST
37141: LIST
37142: LIST
37143: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
37144: LD_ADDR_VAR 0 16
37148: PUSH
37149: LD_INT 0
37151: PUSH
37152: LD_INT 0
37154: PUSH
37155: EMPTY
37156: LIST
37157: LIST
37158: PUSH
37159: LD_INT 0
37161: PUSH
37162: LD_INT 1
37164: NEG
37165: PUSH
37166: EMPTY
37167: LIST
37168: LIST
37169: PUSH
37170: LD_INT 1
37172: PUSH
37173: LD_INT 0
37175: PUSH
37176: EMPTY
37177: LIST
37178: LIST
37179: PUSH
37180: LD_INT 1
37182: PUSH
37183: LD_INT 1
37185: PUSH
37186: EMPTY
37187: LIST
37188: LIST
37189: PUSH
37190: LD_INT 0
37192: PUSH
37193: LD_INT 1
37195: PUSH
37196: EMPTY
37197: LIST
37198: LIST
37199: PUSH
37200: LD_INT 1
37202: NEG
37203: PUSH
37204: LD_INT 0
37206: PUSH
37207: EMPTY
37208: LIST
37209: LIST
37210: PUSH
37211: LD_INT 1
37213: NEG
37214: PUSH
37215: LD_INT 1
37217: NEG
37218: PUSH
37219: EMPTY
37220: LIST
37221: LIST
37222: PUSH
37223: LD_INT 1
37225: NEG
37226: PUSH
37227: LD_INT 2
37229: NEG
37230: PUSH
37231: EMPTY
37232: LIST
37233: LIST
37234: PUSH
37235: LD_INT 2
37237: PUSH
37238: LD_INT 1
37240: PUSH
37241: EMPTY
37242: LIST
37243: LIST
37244: PUSH
37245: LD_INT 2
37247: PUSH
37248: LD_INT 2
37250: PUSH
37251: EMPTY
37252: LIST
37253: LIST
37254: PUSH
37255: LD_INT 1
37257: PUSH
37258: LD_INT 2
37260: PUSH
37261: EMPTY
37262: LIST
37263: LIST
37264: PUSH
37265: LD_INT 2
37267: NEG
37268: PUSH
37269: LD_INT 1
37271: NEG
37272: PUSH
37273: EMPTY
37274: LIST
37275: LIST
37276: PUSH
37277: LD_INT 2
37279: NEG
37280: PUSH
37281: LD_INT 2
37283: NEG
37284: PUSH
37285: EMPTY
37286: LIST
37287: LIST
37288: PUSH
37289: LD_INT 3
37291: PUSH
37292: LD_INT 2
37294: PUSH
37295: EMPTY
37296: LIST
37297: LIST
37298: PUSH
37299: LD_INT 3
37301: PUSH
37302: LD_INT 3
37304: PUSH
37305: EMPTY
37306: LIST
37307: LIST
37308: PUSH
37309: LD_INT 2
37311: PUSH
37312: LD_INT 3
37314: PUSH
37315: EMPTY
37316: LIST
37317: LIST
37318: PUSH
37319: EMPTY
37320: LIST
37321: LIST
37322: LIST
37323: LIST
37324: LIST
37325: LIST
37326: LIST
37327: LIST
37328: LIST
37329: LIST
37330: LIST
37331: LIST
37332: LIST
37333: LIST
37334: LIST
37335: LIST
37336: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37337: LD_ADDR_VAR 0 17
37341: PUSH
37342: LD_INT 0
37344: PUSH
37345: LD_INT 0
37347: PUSH
37348: EMPTY
37349: LIST
37350: LIST
37351: PUSH
37352: LD_INT 0
37354: PUSH
37355: LD_INT 1
37357: NEG
37358: PUSH
37359: EMPTY
37360: LIST
37361: LIST
37362: PUSH
37363: LD_INT 1
37365: PUSH
37366: LD_INT 0
37368: PUSH
37369: EMPTY
37370: LIST
37371: LIST
37372: PUSH
37373: LD_INT 1
37375: PUSH
37376: LD_INT 1
37378: PUSH
37379: EMPTY
37380: LIST
37381: LIST
37382: PUSH
37383: LD_INT 0
37385: PUSH
37386: LD_INT 1
37388: PUSH
37389: EMPTY
37390: LIST
37391: LIST
37392: PUSH
37393: LD_INT 1
37395: NEG
37396: PUSH
37397: LD_INT 0
37399: PUSH
37400: EMPTY
37401: LIST
37402: LIST
37403: PUSH
37404: LD_INT 1
37406: NEG
37407: PUSH
37408: LD_INT 1
37410: NEG
37411: PUSH
37412: EMPTY
37413: LIST
37414: LIST
37415: PUSH
37416: LD_INT 1
37418: NEG
37419: PUSH
37420: LD_INT 2
37422: NEG
37423: PUSH
37424: EMPTY
37425: LIST
37426: LIST
37427: PUSH
37428: LD_INT 0
37430: PUSH
37431: LD_INT 2
37433: NEG
37434: PUSH
37435: EMPTY
37436: LIST
37437: LIST
37438: PUSH
37439: LD_INT 1
37441: PUSH
37442: LD_INT 1
37444: NEG
37445: PUSH
37446: EMPTY
37447: LIST
37448: LIST
37449: PUSH
37450: LD_INT 2
37452: PUSH
37453: LD_INT 0
37455: PUSH
37456: EMPTY
37457: LIST
37458: LIST
37459: PUSH
37460: LD_INT 2
37462: PUSH
37463: LD_INT 1
37465: PUSH
37466: EMPTY
37467: LIST
37468: LIST
37469: PUSH
37470: LD_INT 2
37472: PUSH
37473: LD_INT 2
37475: PUSH
37476: EMPTY
37477: LIST
37478: LIST
37479: PUSH
37480: LD_INT 1
37482: PUSH
37483: LD_INT 2
37485: PUSH
37486: EMPTY
37487: LIST
37488: LIST
37489: PUSH
37490: LD_INT 0
37492: PUSH
37493: LD_INT 2
37495: PUSH
37496: EMPTY
37497: LIST
37498: LIST
37499: PUSH
37500: LD_INT 1
37502: NEG
37503: PUSH
37504: LD_INT 1
37506: PUSH
37507: EMPTY
37508: LIST
37509: LIST
37510: PUSH
37511: LD_INT 2
37513: NEG
37514: PUSH
37515: LD_INT 0
37517: PUSH
37518: EMPTY
37519: LIST
37520: LIST
37521: PUSH
37522: LD_INT 2
37524: NEG
37525: PUSH
37526: LD_INT 1
37528: NEG
37529: PUSH
37530: EMPTY
37531: LIST
37532: LIST
37533: PUSH
37534: LD_INT 2
37536: NEG
37537: PUSH
37538: LD_INT 2
37540: NEG
37541: PUSH
37542: EMPTY
37543: LIST
37544: LIST
37545: PUSH
37546: EMPTY
37547: LIST
37548: LIST
37549: LIST
37550: LIST
37551: LIST
37552: LIST
37553: LIST
37554: LIST
37555: LIST
37556: LIST
37557: LIST
37558: LIST
37559: LIST
37560: LIST
37561: LIST
37562: LIST
37563: LIST
37564: LIST
37565: LIST
37566: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37567: LD_ADDR_VAR 0 18
37571: PUSH
37572: LD_INT 0
37574: PUSH
37575: LD_INT 0
37577: PUSH
37578: EMPTY
37579: LIST
37580: LIST
37581: PUSH
37582: LD_INT 0
37584: PUSH
37585: LD_INT 1
37587: NEG
37588: PUSH
37589: EMPTY
37590: LIST
37591: LIST
37592: PUSH
37593: LD_INT 1
37595: PUSH
37596: LD_INT 0
37598: PUSH
37599: EMPTY
37600: LIST
37601: LIST
37602: PUSH
37603: LD_INT 1
37605: PUSH
37606: LD_INT 1
37608: PUSH
37609: EMPTY
37610: LIST
37611: LIST
37612: PUSH
37613: LD_INT 0
37615: PUSH
37616: LD_INT 1
37618: PUSH
37619: EMPTY
37620: LIST
37621: LIST
37622: PUSH
37623: LD_INT 1
37625: NEG
37626: PUSH
37627: LD_INT 0
37629: PUSH
37630: EMPTY
37631: LIST
37632: LIST
37633: PUSH
37634: LD_INT 1
37636: NEG
37637: PUSH
37638: LD_INT 1
37640: NEG
37641: PUSH
37642: EMPTY
37643: LIST
37644: LIST
37645: PUSH
37646: LD_INT 1
37648: NEG
37649: PUSH
37650: LD_INT 2
37652: NEG
37653: PUSH
37654: EMPTY
37655: LIST
37656: LIST
37657: PUSH
37658: LD_INT 0
37660: PUSH
37661: LD_INT 2
37663: NEG
37664: PUSH
37665: EMPTY
37666: LIST
37667: LIST
37668: PUSH
37669: LD_INT 1
37671: PUSH
37672: LD_INT 1
37674: NEG
37675: PUSH
37676: EMPTY
37677: LIST
37678: LIST
37679: PUSH
37680: LD_INT 2
37682: PUSH
37683: LD_INT 0
37685: PUSH
37686: EMPTY
37687: LIST
37688: LIST
37689: PUSH
37690: LD_INT 2
37692: PUSH
37693: LD_INT 1
37695: PUSH
37696: EMPTY
37697: LIST
37698: LIST
37699: PUSH
37700: LD_INT 2
37702: PUSH
37703: LD_INT 2
37705: PUSH
37706: EMPTY
37707: LIST
37708: LIST
37709: PUSH
37710: LD_INT 1
37712: PUSH
37713: LD_INT 2
37715: PUSH
37716: EMPTY
37717: LIST
37718: LIST
37719: PUSH
37720: LD_INT 0
37722: PUSH
37723: LD_INT 2
37725: PUSH
37726: EMPTY
37727: LIST
37728: LIST
37729: PUSH
37730: LD_INT 1
37732: NEG
37733: PUSH
37734: LD_INT 1
37736: PUSH
37737: EMPTY
37738: LIST
37739: LIST
37740: PUSH
37741: LD_INT 2
37743: NEG
37744: PUSH
37745: LD_INT 0
37747: PUSH
37748: EMPTY
37749: LIST
37750: LIST
37751: PUSH
37752: LD_INT 2
37754: NEG
37755: PUSH
37756: LD_INT 1
37758: NEG
37759: PUSH
37760: EMPTY
37761: LIST
37762: LIST
37763: PUSH
37764: LD_INT 2
37766: NEG
37767: PUSH
37768: LD_INT 2
37770: NEG
37771: PUSH
37772: EMPTY
37773: LIST
37774: LIST
37775: PUSH
37776: EMPTY
37777: LIST
37778: LIST
37779: LIST
37780: LIST
37781: LIST
37782: LIST
37783: LIST
37784: LIST
37785: LIST
37786: LIST
37787: LIST
37788: LIST
37789: LIST
37790: LIST
37791: LIST
37792: LIST
37793: LIST
37794: LIST
37795: LIST
37796: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37797: LD_ADDR_VAR 0 19
37801: PUSH
37802: LD_INT 0
37804: PUSH
37805: LD_INT 0
37807: PUSH
37808: EMPTY
37809: LIST
37810: LIST
37811: PUSH
37812: LD_INT 0
37814: PUSH
37815: LD_INT 1
37817: NEG
37818: PUSH
37819: EMPTY
37820: LIST
37821: LIST
37822: PUSH
37823: LD_INT 1
37825: PUSH
37826: LD_INT 0
37828: PUSH
37829: EMPTY
37830: LIST
37831: LIST
37832: PUSH
37833: LD_INT 1
37835: PUSH
37836: LD_INT 1
37838: PUSH
37839: EMPTY
37840: LIST
37841: LIST
37842: PUSH
37843: LD_INT 0
37845: PUSH
37846: LD_INT 1
37848: PUSH
37849: EMPTY
37850: LIST
37851: LIST
37852: PUSH
37853: LD_INT 1
37855: NEG
37856: PUSH
37857: LD_INT 0
37859: PUSH
37860: EMPTY
37861: LIST
37862: LIST
37863: PUSH
37864: LD_INT 1
37866: NEG
37867: PUSH
37868: LD_INT 1
37870: NEG
37871: PUSH
37872: EMPTY
37873: LIST
37874: LIST
37875: PUSH
37876: LD_INT 1
37878: NEG
37879: PUSH
37880: LD_INT 2
37882: NEG
37883: PUSH
37884: EMPTY
37885: LIST
37886: LIST
37887: PUSH
37888: LD_INT 0
37890: PUSH
37891: LD_INT 2
37893: NEG
37894: PUSH
37895: EMPTY
37896: LIST
37897: LIST
37898: PUSH
37899: LD_INT 1
37901: PUSH
37902: LD_INT 1
37904: NEG
37905: PUSH
37906: EMPTY
37907: LIST
37908: LIST
37909: PUSH
37910: LD_INT 2
37912: PUSH
37913: LD_INT 0
37915: PUSH
37916: EMPTY
37917: LIST
37918: LIST
37919: PUSH
37920: LD_INT 2
37922: PUSH
37923: LD_INT 1
37925: PUSH
37926: EMPTY
37927: LIST
37928: LIST
37929: PUSH
37930: LD_INT 2
37932: PUSH
37933: LD_INT 2
37935: PUSH
37936: EMPTY
37937: LIST
37938: LIST
37939: PUSH
37940: LD_INT 1
37942: PUSH
37943: LD_INT 2
37945: PUSH
37946: EMPTY
37947: LIST
37948: LIST
37949: PUSH
37950: LD_INT 0
37952: PUSH
37953: LD_INT 2
37955: PUSH
37956: EMPTY
37957: LIST
37958: LIST
37959: PUSH
37960: LD_INT 1
37962: NEG
37963: PUSH
37964: LD_INT 1
37966: PUSH
37967: EMPTY
37968: LIST
37969: LIST
37970: PUSH
37971: LD_INT 2
37973: NEG
37974: PUSH
37975: LD_INT 0
37977: PUSH
37978: EMPTY
37979: LIST
37980: LIST
37981: PUSH
37982: LD_INT 2
37984: NEG
37985: PUSH
37986: LD_INT 1
37988: NEG
37989: PUSH
37990: EMPTY
37991: LIST
37992: LIST
37993: PUSH
37994: LD_INT 2
37996: NEG
37997: PUSH
37998: LD_INT 2
38000: NEG
38001: PUSH
38002: EMPTY
38003: LIST
38004: LIST
38005: PUSH
38006: EMPTY
38007: LIST
38008: LIST
38009: LIST
38010: LIST
38011: LIST
38012: LIST
38013: LIST
38014: LIST
38015: LIST
38016: LIST
38017: LIST
38018: LIST
38019: LIST
38020: LIST
38021: LIST
38022: LIST
38023: LIST
38024: LIST
38025: LIST
38026: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38027: LD_ADDR_VAR 0 20
38031: PUSH
38032: LD_INT 0
38034: PUSH
38035: LD_INT 0
38037: PUSH
38038: EMPTY
38039: LIST
38040: LIST
38041: PUSH
38042: LD_INT 0
38044: PUSH
38045: LD_INT 1
38047: NEG
38048: PUSH
38049: EMPTY
38050: LIST
38051: LIST
38052: PUSH
38053: LD_INT 1
38055: PUSH
38056: LD_INT 0
38058: PUSH
38059: EMPTY
38060: LIST
38061: LIST
38062: PUSH
38063: LD_INT 1
38065: PUSH
38066: LD_INT 1
38068: PUSH
38069: EMPTY
38070: LIST
38071: LIST
38072: PUSH
38073: LD_INT 0
38075: PUSH
38076: LD_INT 1
38078: PUSH
38079: EMPTY
38080: LIST
38081: LIST
38082: PUSH
38083: LD_INT 1
38085: NEG
38086: PUSH
38087: LD_INT 0
38089: PUSH
38090: EMPTY
38091: LIST
38092: LIST
38093: PUSH
38094: LD_INT 1
38096: NEG
38097: PUSH
38098: LD_INT 1
38100: NEG
38101: PUSH
38102: EMPTY
38103: LIST
38104: LIST
38105: PUSH
38106: LD_INT 1
38108: NEG
38109: PUSH
38110: LD_INT 2
38112: NEG
38113: PUSH
38114: EMPTY
38115: LIST
38116: LIST
38117: PUSH
38118: LD_INT 0
38120: PUSH
38121: LD_INT 2
38123: NEG
38124: PUSH
38125: EMPTY
38126: LIST
38127: LIST
38128: PUSH
38129: LD_INT 1
38131: PUSH
38132: LD_INT 1
38134: NEG
38135: PUSH
38136: EMPTY
38137: LIST
38138: LIST
38139: PUSH
38140: LD_INT 2
38142: PUSH
38143: LD_INT 0
38145: PUSH
38146: EMPTY
38147: LIST
38148: LIST
38149: PUSH
38150: LD_INT 2
38152: PUSH
38153: LD_INT 1
38155: PUSH
38156: EMPTY
38157: LIST
38158: LIST
38159: PUSH
38160: LD_INT 2
38162: PUSH
38163: LD_INT 2
38165: PUSH
38166: EMPTY
38167: LIST
38168: LIST
38169: PUSH
38170: LD_INT 1
38172: PUSH
38173: LD_INT 2
38175: PUSH
38176: EMPTY
38177: LIST
38178: LIST
38179: PUSH
38180: LD_INT 0
38182: PUSH
38183: LD_INT 2
38185: PUSH
38186: EMPTY
38187: LIST
38188: LIST
38189: PUSH
38190: LD_INT 1
38192: NEG
38193: PUSH
38194: LD_INT 1
38196: PUSH
38197: EMPTY
38198: LIST
38199: LIST
38200: PUSH
38201: LD_INT 2
38203: NEG
38204: PUSH
38205: LD_INT 0
38207: PUSH
38208: EMPTY
38209: LIST
38210: LIST
38211: PUSH
38212: LD_INT 2
38214: NEG
38215: PUSH
38216: LD_INT 1
38218: NEG
38219: PUSH
38220: EMPTY
38221: LIST
38222: LIST
38223: PUSH
38224: LD_INT 2
38226: NEG
38227: PUSH
38228: LD_INT 2
38230: NEG
38231: PUSH
38232: EMPTY
38233: LIST
38234: LIST
38235: PUSH
38236: EMPTY
38237: LIST
38238: LIST
38239: LIST
38240: LIST
38241: LIST
38242: LIST
38243: LIST
38244: LIST
38245: LIST
38246: LIST
38247: LIST
38248: LIST
38249: LIST
38250: LIST
38251: LIST
38252: LIST
38253: LIST
38254: LIST
38255: LIST
38256: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38257: LD_ADDR_VAR 0 21
38261: PUSH
38262: LD_INT 0
38264: PUSH
38265: LD_INT 0
38267: PUSH
38268: EMPTY
38269: LIST
38270: LIST
38271: PUSH
38272: LD_INT 0
38274: PUSH
38275: LD_INT 1
38277: NEG
38278: PUSH
38279: EMPTY
38280: LIST
38281: LIST
38282: PUSH
38283: LD_INT 1
38285: PUSH
38286: LD_INT 0
38288: PUSH
38289: EMPTY
38290: LIST
38291: LIST
38292: PUSH
38293: LD_INT 1
38295: PUSH
38296: LD_INT 1
38298: PUSH
38299: EMPTY
38300: LIST
38301: LIST
38302: PUSH
38303: LD_INT 0
38305: PUSH
38306: LD_INT 1
38308: PUSH
38309: EMPTY
38310: LIST
38311: LIST
38312: PUSH
38313: LD_INT 1
38315: NEG
38316: PUSH
38317: LD_INT 0
38319: PUSH
38320: EMPTY
38321: LIST
38322: LIST
38323: PUSH
38324: LD_INT 1
38326: NEG
38327: PUSH
38328: LD_INT 1
38330: NEG
38331: PUSH
38332: EMPTY
38333: LIST
38334: LIST
38335: PUSH
38336: LD_INT 1
38338: NEG
38339: PUSH
38340: LD_INT 2
38342: NEG
38343: PUSH
38344: EMPTY
38345: LIST
38346: LIST
38347: PUSH
38348: LD_INT 0
38350: PUSH
38351: LD_INT 2
38353: NEG
38354: PUSH
38355: EMPTY
38356: LIST
38357: LIST
38358: PUSH
38359: LD_INT 1
38361: PUSH
38362: LD_INT 1
38364: NEG
38365: PUSH
38366: EMPTY
38367: LIST
38368: LIST
38369: PUSH
38370: LD_INT 2
38372: PUSH
38373: LD_INT 0
38375: PUSH
38376: EMPTY
38377: LIST
38378: LIST
38379: PUSH
38380: LD_INT 2
38382: PUSH
38383: LD_INT 1
38385: PUSH
38386: EMPTY
38387: LIST
38388: LIST
38389: PUSH
38390: LD_INT 2
38392: PUSH
38393: LD_INT 2
38395: PUSH
38396: EMPTY
38397: LIST
38398: LIST
38399: PUSH
38400: LD_INT 1
38402: PUSH
38403: LD_INT 2
38405: PUSH
38406: EMPTY
38407: LIST
38408: LIST
38409: PUSH
38410: LD_INT 0
38412: PUSH
38413: LD_INT 2
38415: PUSH
38416: EMPTY
38417: LIST
38418: LIST
38419: PUSH
38420: LD_INT 1
38422: NEG
38423: PUSH
38424: LD_INT 1
38426: PUSH
38427: EMPTY
38428: LIST
38429: LIST
38430: PUSH
38431: LD_INT 2
38433: NEG
38434: PUSH
38435: LD_INT 0
38437: PUSH
38438: EMPTY
38439: LIST
38440: LIST
38441: PUSH
38442: LD_INT 2
38444: NEG
38445: PUSH
38446: LD_INT 1
38448: NEG
38449: PUSH
38450: EMPTY
38451: LIST
38452: LIST
38453: PUSH
38454: LD_INT 2
38456: NEG
38457: PUSH
38458: LD_INT 2
38460: NEG
38461: PUSH
38462: EMPTY
38463: LIST
38464: LIST
38465: PUSH
38466: EMPTY
38467: LIST
38468: LIST
38469: LIST
38470: LIST
38471: LIST
38472: LIST
38473: LIST
38474: LIST
38475: LIST
38476: LIST
38477: LIST
38478: LIST
38479: LIST
38480: LIST
38481: LIST
38482: LIST
38483: LIST
38484: LIST
38485: LIST
38486: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38487: LD_ADDR_VAR 0 22
38491: PUSH
38492: LD_INT 0
38494: PUSH
38495: LD_INT 0
38497: PUSH
38498: EMPTY
38499: LIST
38500: LIST
38501: PUSH
38502: LD_INT 0
38504: PUSH
38505: LD_INT 1
38507: NEG
38508: PUSH
38509: EMPTY
38510: LIST
38511: LIST
38512: PUSH
38513: LD_INT 1
38515: PUSH
38516: LD_INT 0
38518: PUSH
38519: EMPTY
38520: LIST
38521: LIST
38522: PUSH
38523: LD_INT 1
38525: PUSH
38526: LD_INT 1
38528: PUSH
38529: EMPTY
38530: LIST
38531: LIST
38532: PUSH
38533: LD_INT 0
38535: PUSH
38536: LD_INT 1
38538: PUSH
38539: EMPTY
38540: LIST
38541: LIST
38542: PUSH
38543: LD_INT 1
38545: NEG
38546: PUSH
38547: LD_INT 0
38549: PUSH
38550: EMPTY
38551: LIST
38552: LIST
38553: PUSH
38554: LD_INT 1
38556: NEG
38557: PUSH
38558: LD_INT 1
38560: NEG
38561: PUSH
38562: EMPTY
38563: LIST
38564: LIST
38565: PUSH
38566: LD_INT 1
38568: NEG
38569: PUSH
38570: LD_INT 2
38572: NEG
38573: PUSH
38574: EMPTY
38575: LIST
38576: LIST
38577: PUSH
38578: LD_INT 0
38580: PUSH
38581: LD_INT 2
38583: NEG
38584: PUSH
38585: EMPTY
38586: LIST
38587: LIST
38588: PUSH
38589: LD_INT 1
38591: PUSH
38592: LD_INT 1
38594: NEG
38595: PUSH
38596: EMPTY
38597: LIST
38598: LIST
38599: PUSH
38600: LD_INT 2
38602: PUSH
38603: LD_INT 0
38605: PUSH
38606: EMPTY
38607: LIST
38608: LIST
38609: PUSH
38610: LD_INT 2
38612: PUSH
38613: LD_INT 1
38615: PUSH
38616: EMPTY
38617: LIST
38618: LIST
38619: PUSH
38620: LD_INT 2
38622: PUSH
38623: LD_INT 2
38625: PUSH
38626: EMPTY
38627: LIST
38628: LIST
38629: PUSH
38630: LD_INT 1
38632: PUSH
38633: LD_INT 2
38635: PUSH
38636: EMPTY
38637: LIST
38638: LIST
38639: PUSH
38640: LD_INT 0
38642: PUSH
38643: LD_INT 2
38645: PUSH
38646: EMPTY
38647: LIST
38648: LIST
38649: PUSH
38650: LD_INT 1
38652: NEG
38653: PUSH
38654: LD_INT 1
38656: PUSH
38657: EMPTY
38658: LIST
38659: LIST
38660: PUSH
38661: LD_INT 2
38663: NEG
38664: PUSH
38665: LD_INT 0
38667: PUSH
38668: EMPTY
38669: LIST
38670: LIST
38671: PUSH
38672: LD_INT 2
38674: NEG
38675: PUSH
38676: LD_INT 1
38678: NEG
38679: PUSH
38680: EMPTY
38681: LIST
38682: LIST
38683: PUSH
38684: LD_INT 2
38686: NEG
38687: PUSH
38688: LD_INT 2
38690: NEG
38691: PUSH
38692: EMPTY
38693: LIST
38694: LIST
38695: PUSH
38696: EMPTY
38697: LIST
38698: LIST
38699: LIST
38700: LIST
38701: LIST
38702: LIST
38703: LIST
38704: LIST
38705: LIST
38706: LIST
38707: LIST
38708: LIST
38709: LIST
38710: LIST
38711: LIST
38712: LIST
38713: LIST
38714: LIST
38715: LIST
38716: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
38717: LD_ADDR_VAR 0 23
38721: PUSH
38722: LD_INT 0
38724: PUSH
38725: LD_INT 0
38727: PUSH
38728: EMPTY
38729: LIST
38730: LIST
38731: PUSH
38732: LD_INT 0
38734: PUSH
38735: LD_INT 1
38737: NEG
38738: PUSH
38739: EMPTY
38740: LIST
38741: LIST
38742: PUSH
38743: LD_INT 1
38745: PUSH
38746: LD_INT 0
38748: PUSH
38749: EMPTY
38750: LIST
38751: LIST
38752: PUSH
38753: LD_INT 1
38755: PUSH
38756: LD_INT 1
38758: PUSH
38759: EMPTY
38760: LIST
38761: LIST
38762: PUSH
38763: LD_INT 0
38765: PUSH
38766: LD_INT 1
38768: PUSH
38769: EMPTY
38770: LIST
38771: LIST
38772: PUSH
38773: LD_INT 1
38775: NEG
38776: PUSH
38777: LD_INT 0
38779: PUSH
38780: EMPTY
38781: LIST
38782: LIST
38783: PUSH
38784: LD_INT 1
38786: NEG
38787: PUSH
38788: LD_INT 1
38790: NEG
38791: PUSH
38792: EMPTY
38793: LIST
38794: LIST
38795: PUSH
38796: LD_INT 1
38798: NEG
38799: PUSH
38800: LD_INT 2
38802: NEG
38803: PUSH
38804: EMPTY
38805: LIST
38806: LIST
38807: PUSH
38808: LD_INT 0
38810: PUSH
38811: LD_INT 2
38813: NEG
38814: PUSH
38815: EMPTY
38816: LIST
38817: LIST
38818: PUSH
38819: LD_INT 1
38821: PUSH
38822: LD_INT 1
38824: NEG
38825: PUSH
38826: EMPTY
38827: LIST
38828: LIST
38829: PUSH
38830: LD_INT 2
38832: PUSH
38833: LD_INT 0
38835: PUSH
38836: EMPTY
38837: LIST
38838: LIST
38839: PUSH
38840: LD_INT 2
38842: PUSH
38843: LD_INT 1
38845: PUSH
38846: EMPTY
38847: LIST
38848: LIST
38849: PUSH
38850: LD_INT 2
38852: PUSH
38853: LD_INT 2
38855: PUSH
38856: EMPTY
38857: LIST
38858: LIST
38859: PUSH
38860: LD_INT 1
38862: PUSH
38863: LD_INT 2
38865: PUSH
38866: EMPTY
38867: LIST
38868: LIST
38869: PUSH
38870: LD_INT 0
38872: PUSH
38873: LD_INT 2
38875: PUSH
38876: EMPTY
38877: LIST
38878: LIST
38879: PUSH
38880: LD_INT 1
38882: NEG
38883: PUSH
38884: LD_INT 1
38886: PUSH
38887: EMPTY
38888: LIST
38889: LIST
38890: PUSH
38891: LD_INT 2
38893: NEG
38894: PUSH
38895: LD_INT 0
38897: PUSH
38898: EMPTY
38899: LIST
38900: LIST
38901: PUSH
38902: LD_INT 2
38904: NEG
38905: PUSH
38906: LD_INT 1
38908: NEG
38909: PUSH
38910: EMPTY
38911: LIST
38912: LIST
38913: PUSH
38914: LD_INT 2
38916: NEG
38917: PUSH
38918: LD_INT 2
38920: NEG
38921: PUSH
38922: EMPTY
38923: LIST
38924: LIST
38925: PUSH
38926: LD_INT 2
38928: NEG
38929: PUSH
38930: LD_INT 3
38932: NEG
38933: PUSH
38934: EMPTY
38935: LIST
38936: LIST
38937: PUSH
38938: LD_INT 1
38940: NEG
38941: PUSH
38942: LD_INT 3
38944: NEG
38945: PUSH
38946: EMPTY
38947: LIST
38948: LIST
38949: PUSH
38950: LD_INT 1
38952: PUSH
38953: LD_INT 2
38955: NEG
38956: PUSH
38957: EMPTY
38958: LIST
38959: LIST
38960: PUSH
38961: LD_INT 2
38963: PUSH
38964: LD_INT 1
38966: NEG
38967: PUSH
38968: EMPTY
38969: LIST
38970: LIST
38971: PUSH
38972: EMPTY
38973: LIST
38974: LIST
38975: LIST
38976: LIST
38977: LIST
38978: LIST
38979: LIST
38980: LIST
38981: LIST
38982: LIST
38983: LIST
38984: LIST
38985: LIST
38986: LIST
38987: LIST
38988: LIST
38989: LIST
38990: LIST
38991: LIST
38992: LIST
38993: LIST
38994: LIST
38995: LIST
38996: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
38997: LD_ADDR_VAR 0 24
39001: PUSH
39002: LD_INT 0
39004: PUSH
39005: LD_INT 0
39007: PUSH
39008: EMPTY
39009: LIST
39010: LIST
39011: PUSH
39012: LD_INT 0
39014: PUSH
39015: LD_INT 1
39017: NEG
39018: PUSH
39019: EMPTY
39020: LIST
39021: LIST
39022: PUSH
39023: LD_INT 1
39025: PUSH
39026: LD_INT 0
39028: PUSH
39029: EMPTY
39030: LIST
39031: LIST
39032: PUSH
39033: LD_INT 1
39035: PUSH
39036: LD_INT 1
39038: PUSH
39039: EMPTY
39040: LIST
39041: LIST
39042: PUSH
39043: LD_INT 0
39045: PUSH
39046: LD_INT 1
39048: PUSH
39049: EMPTY
39050: LIST
39051: LIST
39052: PUSH
39053: LD_INT 1
39055: NEG
39056: PUSH
39057: LD_INT 0
39059: PUSH
39060: EMPTY
39061: LIST
39062: LIST
39063: PUSH
39064: LD_INT 1
39066: NEG
39067: PUSH
39068: LD_INT 1
39070: NEG
39071: PUSH
39072: EMPTY
39073: LIST
39074: LIST
39075: PUSH
39076: LD_INT 1
39078: NEG
39079: PUSH
39080: LD_INT 2
39082: NEG
39083: PUSH
39084: EMPTY
39085: LIST
39086: LIST
39087: PUSH
39088: LD_INT 0
39090: PUSH
39091: LD_INT 2
39093: NEG
39094: PUSH
39095: EMPTY
39096: LIST
39097: LIST
39098: PUSH
39099: LD_INT 1
39101: PUSH
39102: LD_INT 1
39104: NEG
39105: PUSH
39106: EMPTY
39107: LIST
39108: LIST
39109: PUSH
39110: LD_INT 2
39112: PUSH
39113: LD_INT 0
39115: PUSH
39116: EMPTY
39117: LIST
39118: LIST
39119: PUSH
39120: LD_INT 2
39122: PUSH
39123: LD_INT 1
39125: PUSH
39126: EMPTY
39127: LIST
39128: LIST
39129: PUSH
39130: LD_INT 2
39132: PUSH
39133: LD_INT 2
39135: PUSH
39136: EMPTY
39137: LIST
39138: LIST
39139: PUSH
39140: LD_INT 1
39142: PUSH
39143: LD_INT 2
39145: PUSH
39146: EMPTY
39147: LIST
39148: LIST
39149: PUSH
39150: LD_INT 0
39152: PUSH
39153: LD_INT 2
39155: PUSH
39156: EMPTY
39157: LIST
39158: LIST
39159: PUSH
39160: LD_INT 1
39162: NEG
39163: PUSH
39164: LD_INT 1
39166: PUSH
39167: EMPTY
39168: LIST
39169: LIST
39170: PUSH
39171: LD_INT 2
39173: NEG
39174: PUSH
39175: LD_INT 0
39177: PUSH
39178: EMPTY
39179: LIST
39180: LIST
39181: PUSH
39182: LD_INT 2
39184: NEG
39185: PUSH
39186: LD_INT 1
39188: NEG
39189: PUSH
39190: EMPTY
39191: LIST
39192: LIST
39193: PUSH
39194: LD_INT 2
39196: NEG
39197: PUSH
39198: LD_INT 2
39200: NEG
39201: PUSH
39202: EMPTY
39203: LIST
39204: LIST
39205: PUSH
39206: LD_INT 1
39208: PUSH
39209: LD_INT 2
39211: NEG
39212: PUSH
39213: EMPTY
39214: LIST
39215: LIST
39216: PUSH
39217: LD_INT 2
39219: PUSH
39220: LD_INT 1
39222: NEG
39223: PUSH
39224: EMPTY
39225: LIST
39226: LIST
39227: PUSH
39228: LD_INT 3
39230: PUSH
39231: LD_INT 1
39233: PUSH
39234: EMPTY
39235: LIST
39236: LIST
39237: PUSH
39238: LD_INT 3
39240: PUSH
39241: LD_INT 2
39243: PUSH
39244: EMPTY
39245: LIST
39246: LIST
39247: PUSH
39248: EMPTY
39249: LIST
39250: LIST
39251: LIST
39252: LIST
39253: LIST
39254: LIST
39255: LIST
39256: LIST
39257: LIST
39258: LIST
39259: LIST
39260: LIST
39261: LIST
39262: LIST
39263: LIST
39264: LIST
39265: LIST
39266: LIST
39267: LIST
39268: LIST
39269: LIST
39270: LIST
39271: LIST
39272: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
39273: LD_ADDR_VAR 0 25
39277: PUSH
39278: LD_INT 0
39280: PUSH
39281: LD_INT 0
39283: PUSH
39284: EMPTY
39285: LIST
39286: LIST
39287: PUSH
39288: LD_INT 0
39290: PUSH
39291: LD_INT 1
39293: NEG
39294: PUSH
39295: EMPTY
39296: LIST
39297: LIST
39298: PUSH
39299: LD_INT 1
39301: PUSH
39302: LD_INT 0
39304: PUSH
39305: EMPTY
39306: LIST
39307: LIST
39308: PUSH
39309: LD_INT 1
39311: PUSH
39312: LD_INT 1
39314: PUSH
39315: EMPTY
39316: LIST
39317: LIST
39318: PUSH
39319: LD_INT 0
39321: PUSH
39322: LD_INT 1
39324: PUSH
39325: EMPTY
39326: LIST
39327: LIST
39328: PUSH
39329: LD_INT 1
39331: NEG
39332: PUSH
39333: LD_INT 0
39335: PUSH
39336: EMPTY
39337: LIST
39338: LIST
39339: PUSH
39340: LD_INT 1
39342: NEG
39343: PUSH
39344: LD_INT 1
39346: NEG
39347: PUSH
39348: EMPTY
39349: LIST
39350: LIST
39351: PUSH
39352: LD_INT 1
39354: NEG
39355: PUSH
39356: LD_INT 2
39358: NEG
39359: PUSH
39360: EMPTY
39361: LIST
39362: LIST
39363: PUSH
39364: LD_INT 0
39366: PUSH
39367: LD_INT 2
39369: NEG
39370: PUSH
39371: EMPTY
39372: LIST
39373: LIST
39374: PUSH
39375: LD_INT 1
39377: PUSH
39378: LD_INT 1
39380: NEG
39381: PUSH
39382: EMPTY
39383: LIST
39384: LIST
39385: PUSH
39386: LD_INT 2
39388: PUSH
39389: LD_INT 0
39391: PUSH
39392: EMPTY
39393: LIST
39394: LIST
39395: PUSH
39396: LD_INT 2
39398: PUSH
39399: LD_INT 1
39401: PUSH
39402: EMPTY
39403: LIST
39404: LIST
39405: PUSH
39406: LD_INT 2
39408: PUSH
39409: LD_INT 2
39411: PUSH
39412: EMPTY
39413: LIST
39414: LIST
39415: PUSH
39416: LD_INT 1
39418: PUSH
39419: LD_INT 2
39421: PUSH
39422: EMPTY
39423: LIST
39424: LIST
39425: PUSH
39426: LD_INT 0
39428: PUSH
39429: LD_INT 2
39431: PUSH
39432: EMPTY
39433: LIST
39434: LIST
39435: PUSH
39436: LD_INT 1
39438: NEG
39439: PUSH
39440: LD_INT 1
39442: PUSH
39443: EMPTY
39444: LIST
39445: LIST
39446: PUSH
39447: LD_INT 2
39449: NEG
39450: PUSH
39451: LD_INT 0
39453: PUSH
39454: EMPTY
39455: LIST
39456: LIST
39457: PUSH
39458: LD_INT 2
39460: NEG
39461: PUSH
39462: LD_INT 1
39464: NEG
39465: PUSH
39466: EMPTY
39467: LIST
39468: LIST
39469: PUSH
39470: LD_INT 2
39472: NEG
39473: PUSH
39474: LD_INT 2
39476: NEG
39477: PUSH
39478: EMPTY
39479: LIST
39480: LIST
39481: PUSH
39482: LD_INT 3
39484: PUSH
39485: LD_INT 1
39487: PUSH
39488: EMPTY
39489: LIST
39490: LIST
39491: PUSH
39492: LD_INT 3
39494: PUSH
39495: LD_INT 2
39497: PUSH
39498: EMPTY
39499: LIST
39500: LIST
39501: PUSH
39502: LD_INT 2
39504: PUSH
39505: LD_INT 3
39507: PUSH
39508: EMPTY
39509: LIST
39510: LIST
39511: PUSH
39512: LD_INT 1
39514: PUSH
39515: LD_INT 3
39517: PUSH
39518: EMPTY
39519: LIST
39520: LIST
39521: PUSH
39522: EMPTY
39523: LIST
39524: LIST
39525: LIST
39526: LIST
39527: LIST
39528: LIST
39529: LIST
39530: LIST
39531: LIST
39532: LIST
39533: LIST
39534: LIST
39535: LIST
39536: LIST
39537: LIST
39538: LIST
39539: LIST
39540: LIST
39541: LIST
39542: LIST
39543: LIST
39544: LIST
39545: LIST
39546: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
39547: LD_ADDR_VAR 0 26
39551: PUSH
39552: LD_INT 0
39554: PUSH
39555: LD_INT 0
39557: PUSH
39558: EMPTY
39559: LIST
39560: LIST
39561: PUSH
39562: LD_INT 0
39564: PUSH
39565: LD_INT 1
39567: NEG
39568: PUSH
39569: EMPTY
39570: LIST
39571: LIST
39572: PUSH
39573: LD_INT 1
39575: PUSH
39576: LD_INT 0
39578: PUSH
39579: EMPTY
39580: LIST
39581: LIST
39582: PUSH
39583: LD_INT 1
39585: PUSH
39586: LD_INT 1
39588: PUSH
39589: EMPTY
39590: LIST
39591: LIST
39592: PUSH
39593: LD_INT 0
39595: PUSH
39596: LD_INT 1
39598: PUSH
39599: EMPTY
39600: LIST
39601: LIST
39602: PUSH
39603: LD_INT 1
39605: NEG
39606: PUSH
39607: LD_INT 0
39609: PUSH
39610: EMPTY
39611: LIST
39612: LIST
39613: PUSH
39614: LD_INT 1
39616: NEG
39617: PUSH
39618: LD_INT 1
39620: NEG
39621: PUSH
39622: EMPTY
39623: LIST
39624: LIST
39625: PUSH
39626: LD_INT 1
39628: NEG
39629: PUSH
39630: LD_INT 2
39632: NEG
39633: PUSH
39634: EMPTY
39635: LIST
39636: LIST
39637: PUSH
39638: LD_INT 0
39640: PUSH
39641: LD_INT 2
39643: NEG
39644: PUSH
39645: EMPTY
39646: LIST
39647: LIST
39648: PUSH
39649: LD_INT 1
39651: PUSH
39652: LD_INT 1
39654: NEG
39655: PUSH
39656: EMPTY
39657: LIST
39658: LIST
39659: PUSH
39660: LD_INT 2
39662: PUSH
39663: LD_INT 0
39665: PUSH
39666: EMPTY
39667: LIST
39668: LIST
39669: PUSH
39670: LD_INT 2
39672: PUSH
39673: LD_INT 1
39675: PUSH
39676: EMPTY
39677: LIST
39678: LIST
39679: PUSH
39680: LD_INT 2
39682: PUSH
39683: LD_INT 2
39685: PUSH
39686: EMPTY
39687: LIST
39688: LIST
39689: PUSH
39690: LD_INT 1
39692: PUSH
39693: LD_INT 2
39695: PUSH
39696: EMPTY
39697: LIST
39698: LIST
39699: PUSH
39700: LD_INT 0
39702: PUSH
39703: LD_INT 2
39705: PUSH
39706: EMPTY
39707: LIST
39708: LIST
39709: PUSH
39710: LD_INT 1
39712: NEG
39713: PUSH
39714: LD_INT 1
39716: PUSH
39717: EMPTY
39718: LIST
39719: LIST
39720: PUSH
39721: LD_INT 2
39723: NEG
39724: PUSH
39725: LD_INT 0
39727: PUSH
39728: EMPTY
39729: LIST
39730: LIST
39731: PUSH
39732: LD_INT 2
39734: NEG
39735: PUSH
39736: LD_INT 1
39738: NEG
39739: PUSH
39740: EMPTY
39741: LIST
39742: LIST
39743: PUSH
39744: LD_INT 2
39746: NEG
39747: PUSH
39748: LD_INT 2
39750: NEG
39751: PUSH
39752: EMPTY
39753: LIST
39754: LIST
39755: PUSH
39756: LD_INT 2
39758: PUSH
39759: LD_INT 3
39761: PUSH
39762: EMPTY
39763: LIST
39764: LIST
39765: PUSH
39766: LD_INT 1
39768: PUSH
39769: LD_INT 3
39771: PUSH
39772: EMPTY
39773: LIST
39774: LIST
39775: PUSH
39776: LD_INT 1
39778: NEG
39779: PUSH
39780: LD_INT 2
39782: PUSH
39783: EMPTY
39784: LIST
39785: LIST
39786: PUSH
39787: LD_INT 2
39789: NEG
39790: PUSH
39791: LD_INT 1
39793: PUSH
39794: EMPTY
39795: LIST
39796: LIST
39797: PUSH
39798: EMPTY
39799: LIST
39800: LIST
39801: LIST
39802: LIST
39803: LIST
39804: LIST
39805: LIST
39806: LIST
39807: LIST
39808: LIST
39809: LIST
39810: LIST
39811: LIST
39812: LIST
39813: LIST
39814: LIST
39815: LIST
39816: LIST
39817: LIST
39818: LIST
39819: LIST
39820: LIST
39821: LIST
39822: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
39823: LD_ADDR_VAR 0 27
39827: PUSH
39828: LD_INT 0
39830: PUSH
39831: LD_INT 0
39833: PUSH
39834: EMPTY
39835: LIST
39836: LIST
39837: PUSH
39838: LD_INT 0
39840: PUSH
39841: LD_INT 1
39843: NEG
39844: PUSH
39845: EMPTY
39846: LIST
39847: LIST
39848: PUSH
39849: LD_INT 1
39851: PUSH
39852: LD_INT 0
39854: PUSH
39855: EMPTY
39856: LIST
39857: LIST
39858: PUSH
39859: LD_INT 1
39861: PUSH
39862: LD_INT 1
39864: PUSH
39865: EMPTY
39866: LIST
39867: LIST
39868: PUSH
39869: LD_INT 0
39871: PUSH
39872: LD_INT 1
39874: PUSH
39875: EMPTY
39876: LIST
39877: LIST
39878: PUSH
39879: LD_INT 1
39881: NEG
39882: PUSH
39883: LD_INT 0
39885: PUSH
39886: EMPTY
39887: LIST
39888: LIST
39889: PUSH
39890: LD_INT 1
39892: NEG
39893: PUSH
39894: LD_INT 1
39896: NEG
39897: PUSH
39898: EMPTY
39899: LIST
39900: LIST
39901: PUSH
39902: LD_INT 1
39904: NEG
39905: PUSH
39906: LD_INT 2
39908: NEG
39909: PUSH
39910: EMPTY
39911: LIST
39912: LIST
39913: PUSH
39914: LD_INT 0
39916: PUSH
39917: LD_INT 2
39919: NEG
39920: PUSH
39921: EMPTY
39922: LIST
39923: LIST
39924: PUSH
39925: LD_INT 1
39927: PUSH
39928: LD_INT 1
39930: NEG
39931: PUSH
39932: EMPTY
39933: LIST
39934: LIST
39935: PUSH
39936: LD_INT 2
39938: PUSH
39939: LD_INT 0
39941: PUSH
39942: EMPTY
39943: LIST
39944: LIST
39945: PUSH
39946: LD_INT 2
39948: PUSH
39949: LD_INT 1
39951: PUSH
39952: EMPTY
39953: LIST
39954: LIST
39955: PUSH
39956: LD_INT 2
39958: PUSH
39959: LD_INT 2
39961: PUSH
39962: EMPTY
39963: LIST
39964: LIST
39965: PUSH
39966: LD_INT 1
39968: PUSH
39969: LD_INT 2
39971: PUSH
39972: EMPTY
39973: LIST
39974: LIST
39975: PUSH
39976: LD_INT 0
39978: PUSH
39979: LD_INT 2
39981: PUSH
39982: EMPTY
39983: LIST
39984: LIST
39985: PUSH
39986: LD_INT 1
39988: NEG
39989: PUSH
39990: LD_INT 1
39992: PUSH
39993: EMPTY
39994: LIST
39995: LIST
39996: PUSH
39997: LD_INT 2
39999: NEG
40000: PUSH
40001: LD_INT 0
40003: PUSH
40004: EMPTY
40005: LIST
40006: LIST
40007: PUSH
40008: LD_INT 2
40010: NEG
40011: PUSH
40012: LD_INT 1
40014: NEG
40015: PUSH
40016: EMPTY
40017: LIST
40018: LIST
40019: PUSH
40020: LD_INT 2
40022: NEG
40023: PUSH
40024: LD_INT 2
40026: NEG
40027: PUSH
40028: EMPTY
40029: LIST
40030: LIST
40031: PUSH
40032: LD_INT 1
40034: NEG
40035: PUSH
40036: LD_INT 2
40038: PUSH
40039: EMPTY
40040: LIST
40041: LIST
40042: PUSH
40043: LD_INT 2
40045: NEG
40046: PUSH
40047: LD_INT 1
40049: PUSH
40050: EMPTY
40051: LIST
40052: LIST
40053: PUSH
40054: LD_INT 3
40056: NEG
40057: PUSH
40058: LD_INT 1
40060: NEG
40061: PUSH
40062: EMPTY
40063: LIST
40064: LIST
40065: PUSH
40066: LD_INT 3
40068: NEG
40069: PUSH
40070: LD_INT 2
40072: NEG
40073: PUSH
40074: EMPTY
40075: LIST
40076: LIST
40077: PUSH
40078: EMPTY
40079: LIST
40080: LIST
40081: LIST
40082: LIST
40083: LIST
40084: LIST
40085: LIST
40086: LIST
40087: LIST
40088: LIST
40089: LIST
40090: LIST
40091: LIST
40092: LIST
40093: LIST
40094: LIST
40095: LIST
40096: LIST
40097: LIST
40098: LIST
40099: LIST
40100: LIST
40101: LIST
40102: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
40103: LD_ADDR_VAR 0 28
40107: PUSH
40108: LD_INT 0
40110: PUSH
40111: LD_INT 0
40113: PUSH
40114: EMPTY
40115: LIST
40116: LIST
40117: PUSH
40118: LD_INT 0
40120: PUSH
40121: LD_INT 1
40123: NEG
40124: PUSH
40125: EMPTY
40126: LIST
40127: LIST
40128: PUSH
40129: LD_INT 1
40131: PUSH
40132: LD_INT 0
40134: PUSH
40135: EMPTY
40136: LIST
40137: LIST
40138: PUSH
40139: LD_INT 1
40141: PUSH
40142: LD_INT 1
40144: PUSH
40145: EMPTY
40146: LIST
40147: LIST
40148: PUSH
40149: LD_INT 0
40151: PUSH
40152: LD_INT 1
40154: PUSH
40155: EMPTY
40156: LIST
40157: LIST
40158: PUSH
40159: LD_INT 1
40161: NEG
40162: PUSH
40163: LD_INT 0
40165: PUSH
40166: EMPTY
40167: LIST
40168: LIST
40169: PUSH
40170: LD_INT 1
40172: NEG
40173: PUSH
40174: LD_INT 1
40176: NEG
40177: PUSH
40178: EMPTY
40179: LIST
40180: LIST
40181: PUSH
40182: LD_INT 1
40184: NEG
40185: PUSH
40186: LD_INT 2
40188: NEG
40189: PUSH
40190: EMPTY
40191: LIST
40192: LIST
40193: PUSH
40194: LD_INT 0
40196: PUSH
40197: LD_INT 2
40199: NEG
40200: PUSH
40201: EMPTY
40202: LIST
40203: LIST
40204: PUSH
40205: LD_INT 1
40207: PUSH
40208: LD_INT 1
40210: NEG
40211: PUSH
40212: EMPTY
40213: LIST
40214: LIST
40215: PUSH
40216: LD_INT 2
40218: PUSH
40219: LD_INT 0
40221: PUSH
40222: EMPTY
40223: LIST
40224: LIST
40225: PUSH
40226: LD_INT 2
40228: PUSH
40229: LD_INT 1
40231: PUSH
40232: EMPTY
40233: LIST
40234: LIST
40235: PUSH
40236: LD_INT 2
40238: PUSH
40239: LD_INT 2
40241: PUSH
40242: EMPTY
40243: LIST
40244: LIST
40245: PUSH
40246: LD_INT 1
40248: PUSH
40249: LD_INT 2
40251: PUSH
40252: EMPTY
40253: LIST
40254: LIST
40255: PUSH
40256: LD_INT 0
40258: PUSH
40259: LD_INT 2
40261: PUSH
40262: EMPTY
40263: LIST
40264: LIST
40265: PUSH
40266: LD_INT 1
40268: NEG
40269: PUSH
40270: LD_INT 1
40272: PUSH
40273: EMPTY
40274: LIST
40275: LIST
40276: PUSH
40277: LD_INT 2
40279: NEG
40280: PUSH
40281: LD_INT 0
40283: PUSH
40284: EMPTY
40285: LIST
40286: LIST
40287: PUSH
40288: LD_INT 2
40290: NEG
40291: PUSH
40292: LD_INT 1
40294: NEG
40295: PUSH
40296: EMPTY
40297: LIST
40298: LIST
40299: PUSH
40300: LD_INT 2
40302: NEG
40303: PUSH
40304: LD_INT 2
40306: NEG
40307: PUSH
40308: EMPTY
40309: LIST
40310: LIST
40311: PUSH
40312: LD_INT 2
40314: NEG
40315: PUSH
40316: LD_INT 3
40318: NEG
40319: PUSH
40320: EMPTY
40321: LIST
40322: LIST
40323: PUSH
40324: LD_INT 1
40326: NEG
40327: PUSH
40328: LD_INT 3
40330: NEG
40331: PUSH
40332: EMPTY
40333: LIST
40334: LIST
40335: PUSH
40336: LD_INT 3
40338: NEG
40339: PUSH
40340: LD_INT 1
40342: NEG
40343: PUSH
40344: EMPTY
40345: LIST
40346: LIST
40347: PUSH
40348: LD_INT 3
40350: NEG
40351: PUSH
40352: LD_INT 2
40354: NEG
40355: PUSH
40356: EMPTY
40357: LIST
40358: LIST
40359: PUSH
40360: EMPTY
40361: LIST
40362: LIST
40363: LIST
40364: LIST
40365: LIST
40366: LIST
40367: LIST
40368: LIST
40369: LIST
40370: LIST
40371: LIST
40372: LIST
40373: LIST
40374: LIST
40375: LIST
40376: LIST
40377: LIST
40378: LIST
40379: LIST
40380: LIST
40381: LIST
40382: LIST
40383: LIST
40384: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
40385: LD_ADDR_VAR 0 29
40389: PUSH
40390: LD_INT 0
40392: PUSH
40393: LD_INT 0
40395: PUSH
40396: EMPTY
40397: LIST
40398: LIST
40399: PUSH
40400: LD_INT 0
40402: PUSH
40403: LD_INT 1
40405: NEG
40406: PUSH
40407: EMPTY
40408: LIST
40409: LIST
40410: PUSH
40411: LD_INT 1
40413: PUSH
40414: LD_INT 0
40416: PUSH
40417: EMPTY
40418: LIST
40419: LIST
40420: PUSH
40421: LD_INT 1
40423: PUSH
40424: LD_INT 1
40426: PUSH
40427: EMPTY
40428: LIST
40429: LIST
40430: PUSH
40431: LD_INT 0
40433: PUSH
40434: LD_INT 1
40436: PUSH
40437: EMPTY
40438: LIST
40439: LIST
40440: PUSH
40441: LD_INT 1
40443: NEG
40444: PUSH
40445: LD_INT 0
40447: PUSH
40448: EMPTY
40449: LIST
40450: LIST
40451: PUSH
40452: LD_INT 1
40454: NEG
40455: PUSH
40456: LD_INT 1
40458: NEG
40459: PUSH
40460: EMPTY
40461: LIST
40462: LIST
40463: PUSH
40464: LD_INT 1
40466: NEG
40467: PUSH
40468: LD_INT 2
40470: NEG
40471: PUSH
40472: EMPTY
40473: LIST
40474: LIST
40475: PUSH
40476: LD_INT 0
40478: PUSH
40479: LD_INT 2
40481: NEG
40482: PUSH
40483: EMPTY
40484: LIST
40485: LIST
40486: PUSH
40487: LD_INT 1
40489: PUSH
40490: LD_INT 1
40492: NEG
40493: PUSH
40494: EMPTY
40495: LIST
40496: LIST
40497: PUSH
40498: LD_INT 2
40500: PUSH
40501: LD_INT 0
40503: PUSH
40504: EMPTY
40505: LIST
40506: LIST
40507: PUSH
40508: LD_INT 2
40510: PUSH
40511: LD_INT 1
40513: PUSH
40514: EMPTY
40515: LIST
40516: LIST
40517: PUSH
40518: LD_INT 1
40520: PUSH
40521: LD_INT 2
40523: PUSH
40524: EMPTY
40525: LIST
40526: LIST
40527: PUSH
40528: LD_INT 0
40530: PUSH
40531: LD_INT 2
40533: PUSH
40534: EMPTY
40535: LIST
40536: LIST
40537: PUSH
40538: LD_INT 1
40540: NEG
40541: PUSH
40542: LD_INT 1
40544: PUSH
40545: EMPTY
40546: LIST
40547: LIST
40548: PUSH
40549: LD_INT 2
40551: NEG
40552: PUSH
40553: LD_INT 1
40555: NEG
40556: PUSH
40557: EMPTY
40558: LIST
40559: LIST
40560: PUSH
40561: LD_INT 2
40563: NEG
40564: PUSH
40565: LD_INT 2
40567: NEG
40568: PUSH
40569: EMPTY
40570: LIST
40571: LIST
40572: PUSH
40573: LD_INT 2
40575: NEG
40576: PUSH
40577: LD_INT 3
40579: NEG
40580: PUSH
40581: EMPTY
40582: LIST
40583: LIST
40584: PUSH
40585: LD_INT 2
40587: PUSH
40588: LD_INT 1
40590: NEG
40591: PUSH
40592: EMPTY
40593: LIST
40594: LIST
40595: PUSH
40596: LD_INT 3
40598: PUSH
40599: LD_INT 1
40601: PUSH
40602: EMPTY
40603: LIST
40604: LIST
40605: PUSH
40606: LD_INT 1
40608: PUSH
40609: LD_INT 3
40611: PUSH
40612: EMPTY
40613: LIST
40614: LIST
40615: PUSH
40616: LD_INT 1
40618: NEG
40619: PUSH
40620: LD_INT 2
40622: PUSH
40623: EMPTY
40624: LIST
40625: LIST
40626: PUSH
40627: LD_INT 3
40629: NEG
40630: PUSH
40631: LD_INT 2
40633: NEG
40634: PUSH
40635: EMPTY
40636: LIST
40637: LIST
40638: PUSH
40639: EMPTY
40640: LIST
40641: LIST
40642: LIST
40643: LIST
40644: LIST
40645: LIST
40646: LIST
40647: LIST
40648: LIST
40649: LIST
40650: LIST
40651: LIST
40652: LIST
40653: LIST
40654: LIST
40655: LIST
40656: LIST
40657: LIST
40658: LIST
40659: LIST
40660: LIST
40661: LIST
40662: LIST
40663: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
40664: LD_ADDR_VAR 0 30
40668: PUSH
40669: LD_INT 0
40671: PUSH
40672: LD_INT 0
40674: PUSH
40675: EMPTY
40676: LIST
40677: LIST
40678: PUSH
40679: LD_INT 0
40681: PUSH
40682: LD_INT 1
40684: NEG
40685: PUSH
40686: EMPTY
40687: LIST
40688: LIST
40689: PUSH
40690: LD_INT 1
40692: PUSH
40693: LD_INT 0
40695: PUSH
40696: EMPTY
40697: LIST
40698: LIST
40699: PUSH
40700: LD_INT 1
40702: PUSH
40703: LD_INT 1
40705: PUSH
40706: EMPTY
40707: LIST
40708: LIST
40709: PUSH
40710: LD_INT 0
40712: PUSH
40713: LD_INT 1
40715: PUSH
40716: EMPTY
40717: LIST
40718: LIST
40719: PUSH
40720: LD_INT 1
40722: NEG
40723: PUSH
40724: LD_INT 0
40726: PUSH
40727: EMPTY
40728: LIST
40729: LIST
40730: PUSH
40731: LD_INT 1
40733: NEG
40734: PUSH
40735: LD_INT 1
40737: NEG
40738: PUSH
40739: EMPTY
40740: LIST
40741: LIST
40742: PUSH
40743: LD_INT 1
40745: NEG
40746: PUSH
40747: LD_INT 2
40749: NEG
40750: PUSH
40751: EMPTY
40752: LIST
40753: LIST
40754: PUSH
40755: LD_INT 0
40757: PUSH
40758: LD_INT 2
40760: NEG
40761: PUSH
40762: EMPTY
40763: LIST
40764: LIST
40765: PUSH
40766: LD_INT 1
40768: PUSH
40769: LD_INT 1
40771: NEG
40772: PUSH
40773: EMPTY
40774: LIST
40775: LIST
40776: PUSH
40777: LD_INT 2
40779: PUSH
40780: LD_INT 0
40782: PUSH
40783: EMPTY
40784: LIST
40785: LIST
40786: PUSH
40787: LD_INT 2
40789: PUSH
40790: LD_INT 1
40792: PUSH
40793: EMPTY
40794: LIST
40795: LIST
40796: PUSH
40797: LD_INT 2
40799: PUSH
40800: LD_INT 2
40802: PUSH
40803: EMPTY
40804: LIST
40805: LIST
40806: PUSH
40807: LD_INT 1
40809: PUSH
40810: LD_INT 2
40812: PUSH
40813: EMPTY
40814: LIST
40815: LIST
40816: PUSH
40817: LD_INT 1
40819: NEG
40820: PUSH
40821: LD_INT 1
40823: PUSH
40824: EMPTY
40825: LIST
40826: LIST
40827: PUSH
40828: LD_INT 2
40830: NEG
40831: PUSH
40832: LD_INT 0
40834: PUSH
40835: EMPTY
40836: LIST
40837: LIST
40838: PUSH
40839: LD_INT 2
40841: NEG
40842: PUSH
40843: LD_INT 1
40845: NEG
40846: PUSH
40847: EMPTY
40848: LIST
40849: LIST
40850: PUSH
40851: LD_INT 1
40853: NEG
40854: PUSH
40855: LD_INT 3
40857: NEG
40858: PUSH
40859: EMPTY
40860: LIST
40861: LIST
40862: PUSH
40863: LD_INT 1
40865: PUSH
40866: LD_INT 2
40868: NEG
40869: PUSH
40870: EMPTY
40871: LIST
40872: LIST
40873: PUSH
40874: LD_INT 3
40876: PUSH
40877: LD_INT 2
40879: PUSH
40880: EMPTY
40881: LIST
40882: LIST
40883: PUSH
40884: LD_INT 2
40886: PUSH
40887: LD_INT 3
40889: PUSH
40890: EMPTY
40891: LIST
40892: LIST
40893: PUSH
40894: LD_INT 2
40896: NEG
40897: PUSH
40898: LD_INT 1
40900: PUSH
40901: EMPTY
40902: LIST
40903: LIST
40904: PUSH
40905: LD_INT 3
40907: NEG
40908: PUSH
40909: LD_INT 1
40911: NEG
40912: PUSH
40913: EMPTY
40914: LIST
40915: LIST
40916: PUSH
40917: EMPTY
40918: LIST
40919: LIST
40920: LIST
40921: LIST
40922: LIST
40923: LIST
40924: LIST
40925: LIST
40926: LIST
40927: LIST
40928: LIST
40929: LIST
40930: LIST
40931: LIST
40932: LIST
40933: LIST
40934: LIST
40935: LIST
40936: LIST
40937: LIST
40938: LIST
40939: LIST
40940: LIST
40941: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
40942: LD_ADDR_VAR 0 31
40946: PUSH
40947: LD_INT 0
40949: PUSH
40950: LD_INT 0
40952: PUSH
40953: EMPTY
40954: LIST
40955: LIST
40956: PUSH
40957: LD_INT 0
40959: PUSH
40960: LD_INT 1
40962: NEG
40963: PUSH
40964: EMPTY
40965: LIST
40966: LIST
40967: PUSH
40968: LD_INT 1
40970: PUSH
40971: LD_INT 0
40973: PUSH
40974: EMPTY
40975: LIST
40976: LIST
40977: PUSH
40978: LD_INT 1
40980: PUSH
40981: LD_INT 1
40983: PUSH
40984: EMPTY
40985: LIST
40986: LIST
40987: PUSH
40988: LD_INT 0
40990: PUSH
40991: LD_INT 1
40993: PUSH
40994: EMPTY
40995: LIST
40996: LIST
40997: PUSH
40998: LD_INT 1
41000: NEG
41001: PUSH
41002: LD_INT 0
41004: PUSH
41005: EMPTY
41006: LIST
41007: LIST
41008: PUSH
41009: LD_INT 1
41011: NEG
41012: PUSH
41013: LD_INT 1
41015: NEG
41016: PUSH
41017: EMPTY
41018: LIST
41019: LIST
41020: PUSH
41021: LD_INT 1
41023: NEG
41024: PUSH
41025: LD_INT 2
41027: NEG
41028: PUSH
41029: EMPTY
41030: LIST
41031: LIST
41032: PUSH
41033: LD_INT 1
41035: PUSH
41036: LD_INT 1
41038: NEG
41039: PUSH
41040: EMPTY
41041: LIST
41042: LIST
41043: PUSH
41044: LD_INT 2
41046: PUSH
41047: LD_INT 0
41049: PUSH
41050: EMPTY
41051: LIST
41052: LIST
41053: PUSH
41054: LD_INT 2
41056: PUSH
41057: LD_INT 1
41059: PUSH
41060: EMPTY
41061: LIST
41062: LIST
41063: PUSH
41064: LD_INT 2
41066: PUSH
41067: LD_INT 2
41069: PUSH
41070: EMPTY
41071: LIST
41072: LIST
41073: PUSH
41074: LD_INT 1
41076: PUSH
41077: LD_INT 2
41079: PUSH
41080: EMPTY
41081: LIST
41082: LIST
41083: PUSH
41084: LD_INT 0
41086: PUSH
41087: LD_INT 2
41089: PUSH
41090: EMPTY
41091: LIST
41092: LIST
41093: PUSH
41094: LD_INT 1
41096: NEG
41097: PUSH
41098: LD_INT 1
41100: PUSH
41101: EMPTY
41102: LIST
41103: LIST
41104: PUSH
41105: LD_INT 2
41107: NEG
41108: PUSH
41109: LD_INT 1
41111: NEG
41112: PUSH
41113: EMPTY
41114: LIST
41115: LIST
41116: PUSH
41117: LD_INT 2
41119: NEG
41120: PUSH
41121: LD_INT 2
41123: NEG
41124: PUSH
41125: EMPTY
41126: LIST
41127: LIST
41128: PUSH
41129: LD_INT 2
41131: NEG
41132: PUSH
41133: LD_INT 3
41135: NEG
41136: PUSH
41137: EMPTY
41138: LIST
41139: LIST
41140: PUSH
41141: LD_INT 2
41143: PUSH
41144: LD_INT 1
41146: NEG
41147: PUSH
41148: EMPTY
41149: LIST
41150: LIST
41151: PUSH
41152: LD_INT 3
41154: PUSH
41155: LD_INT 1
41157: PUSH
41158: EMPTY
41159: LIST
41160: LIST
41161: PUSH
41162: LD_INT 1
41164: PUSH
41165: LD_INT 3
41167: PUSH
41168: EMPTY
41169: LIST
41170: LIST
41171: PUSH
41172: LD_INT 1
41174: NEG
41175: PUSH
41176: LD_INT 2
41178: PUSH
41179: EMPTY
41180: LIST
41181: LIST
41182: PUSH
41183: LD_INT 3
41185: NEG
41186: PUSH
41187: LD_INT 2
41189: NEG
41190: PUSH
41191: EMPTY
41192: LIST
41193: LIST
41194: PUSH
41195: EMPTY
41196: LIST
41197: LIST
41198: LIST
41199: LIST
41200: LIST
41201: LIST
41202: LIST
41203: LIST
41204: LIST
41205: LIST
41206: LIST
41207: LIST
41208: LIST
41209: LIST
41210: LIST
41211: LIST
41212: LIST
41213: LIST
41214: LIST
41215: LIST
41216: LIST
41217: LIST
41218: LIST
41219: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
41220: LD_ADDR_VAR 0 32
41224: PUSH
41225: LD_INT 0
41227: PUSH
41228: LD_INT 0
41230: PUSH
41231: EMPTY
41232: LIST
41233: LIST
41234: PUSH
41235: LD_INT 0
41237: PUSH
41238: LD_INT 1
41240: NEG
41241: PUSH
41242: EMPTY
41243: LIST
41244: LIST
41245: PUSH
41246: LD_INT 1
41248: PUSH
41249: LD_INT 0
41251: PUSH
41252: EMPTY
41253: LIST
41254: LIST
41255: PUSH
41256: LD_INT 1
41258: PUSH
41259: LD_INT 1
41261: PUSH
41262: EMPTY
41263: LIST
41264: LIST
41265: PUSH
41266: LD_INT 0
41268: PUSH
41269: LD_INT 1
41271: PUSH
41272: EMPTY
41273: LIST
41274: LIST
41275: PUSH
41276: LD_INT 1
41278: NEG
41279: PUSH
41280: LD_INT 0
41282: PUSH
41283: EMPTY
41284: LIST
41285: LIST
41286: PUSH
41287: LD_INT 1
41289: NEG
41290: PUSH
41291: LD_INT 1
41293: NEG
41294: PUSH
41295: EMPTY
41296: LIST
41297: LIST
41298: PUSH
41299: LD_INT 1
41301: NEG
41302: PUSH
41303: LD_INT 2
41305: NEG
41306: PUSH
41307: EMPTY
41308: LIST
41309: LIST
41310: PUSH
41311: LD_INT 0
41313: PUSH
41314: LD_INT 2
41316: NEG
41317: PUSH
41318: EMPTY
41319: LIST
41320: LIST
41321: PUSH
41322: LD_INT 1
41324: PUSH
41325: LD_INT 1
41327: NEG
41328: PUSH
41329: EMPTY
41330: LIST
41331: LIST
41332: PUSH
41333: LD_INT 2
41335: PUSH
41336: LD_INT 1
41338: PUSH
41339: EMPTY
41340: LIST
41341: LIST
41342: PUSH
41343: LD_INT 2
41345: PUSH
41346: LD_INT 2
41348: PUSH
41349: EMPTY
41350: LIST
41351: LIST
41352: PUSH
41353: LD_INT 1
41355: PUSH
41356: LD_INT 2
41358: PUSH
41359: EMPTY
41360: LIST
41361: LIST
41362: PUSH
41363: LD_INT 0
41365: PUSH
41366: LD_INT 2
41368: PUSH
41369: EMPTY
41370: LIST
41371: LIST
41372: PUSH
41373: LD_INT 1
41375: NEG
41376: PUSH
41377: LD_INT 1
41379: PUSH
41380: EMPTY
41381: LIST
41382: LIST
41383: PUSH
41384: LD_INT 2
41386: NEG
41387: PUSH
41388: LD_INT 0
41390: PUSH
41391: EMPTY
41392: LIST
41393: LIST
41394: PUSH
41395: LD_INT 2
41397: NEG
41398: PUSH
41399: LD_INT 1
41401: NEG
41402: PUSH
41403: EMPTY
41404: LIST
41405: LIST
41406: PUSH
41407: LD_INT 1
41409: NEG
41410: PUSH
41411: LD_INT 3
41413: NEG
41414: PUSH
41415: EMPTY
41416: LIST
41417: LIST
41418: PUSH
41419: LD_INT 1
41421: PUSH
41422: LD_INT 2
41424: NEG
41425: PUSH
41426: EMPTY
41427: LIST
41428: LIST
41429: PUSH
41430: LD_INT 3
41432: PUSH
41433: LD_INT 2
41435: PUSH
41436: EMPTY
41437: LIST
41438: LIST
41439: PUSH
41440: LD_INT 2
41442: PUSH
41443: LD_INT 3
41445: PUSH
41446: EMPTY
41447: LIST
41448: LIST
41449: PUSH
41450: LD_INT 2
41452: NEG
41453: PUSH
41454: LD_INT 1
41456: PUSH
41457: EMPTY
41458: LIST
41459: LIST
41460: PUSH
41461: LD_INT 3
41463: NEG
41464: PUSH
41465: LD_INT 1
41467: NEG
41468: PUSH
41469: EMPTY
41470: LIST
41471: LIST
41472: PUSH
41473: EMPTY
41474: LIST
41475: LIST
41476: LIST
41477: LIST
41478: LIST
41479: LIST
41480: LIST
41481: LIST
41482: LIST
41483: LIST
41484: LIST
41485: LIST
41486: LIST
41487: LIST
41488: LIST
41489: LIST
41490: LIST
41491: LIST
41492: LIST
41493: LIST
41494: LIST
41495: LIST
41496: LIST
41497: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
41498: LD_ADDR_VAR 0 33
41502: PUSH
41503: LD_INT 0
41505: PUSH
41506: LD_INT 0
41508: PUSH
41509: EMPTY
41510: LIST
41511: LIST
41512: PUSH
41513: LD_INT 0
41515: PUSH
41516: LD_INT 1
41518: NEG
41519: PUSH
41520: EMPTY
41521: LIST
41522: LIST
41523: PUSH
41524: LD_INT 1
41526: PUSH
41527: LD_INT 0
41529: PUSH
41530: EMPTY
41531: LIST
41532: LIST
41533: PUSH
41534: LD_INT 1
41536: PUSH
41537: LD_INT 1
41539: PUSH
41540: EMPTY
41541: LIST
41542: LIST
41543: PUSH
41544: LD_INT 0
41546: PUSH
41547: LD_INT 1
41549: PUSH
41550: EMPTY
41551: LIST
41552: LIST
41553: PUSH
41554: LD_INT 1
41556: NEG
41557: PUSH
41558: LD_INT 0
41560: PUSH
41561: EMPTY
41562: LIST
41563: LIST
41564: PUSH
41565: LD_INT 1
41567: NEG
41568: PUSH
41569: LD_INT 1
41571: NEG
41572: PUSH
41573: EMPTY
41574: LIST
41575: LIST
41576: PUSH
41577: LD_INT 1
41579: NEG
41580: PUSH
41581: LD_INT 2
41583: NEG
41584: PUSH
41585: EMPTY
41586: LIST
41587: LIST
41588: PUSH
41589: LD_INT 1
41591: PUSH
41592: LD_INT 1
41594: NEG
41595: PUSH
41596: EMPTY
41597: LIST
41598: LIST
41599: PUSH
41600: LD_INT 2
41602: PUSH
41603: LD_INT 0
41605: PUSH
41606: EMPTY
41607: LIST
41608: LIST
41609: PUSH
41610: LD_INT 2
41612: PUSH
41613: LD_INT 1
41615: PUSH
41616: EMPTY
41617: LIST
41618: LIST
41619: PUSH
41620: LD_INT 1
41622: PUSH
41623: LD_INT 2
41625: PUSH
41626: EMPTY
41627: LIST
41628: LIST
41629: PUSH
41630: LD_INT 0
41632: PUSH
41633: LD_INT 2
41635: PUSH
41636: EMPTY
41637: LIST
41638: LIST
41639: PUSH
41640: LD_INT 1
41642: NEG
41643: PUSH
41644: LD_INT 1
41646: PUSH
41647: EMPTY
41648: LIST
41649: LIST
41650: PUSH
41651: LD_INT 2
41653: NEG
41654: PUSH
41655: LD_INT 0
41657: PUSH
41658: EMPTY
41659: LIST
41660: LIST
41661: PUSH
41662: LD_INT 2
41664: NEG
41665: PUSH
41666: LD_INT 1
41668: NEG
41669: PUSH
41670: EMPTY
41671: LIST
41672: LIST
41673: PUSH
41674: LD_INT 2
41676: NEG
41677: PUSH
41678: LD_INT 2
41680: NEG
41681: PUSH
41682: EMPTY
41683: LIST
41684: LIST
41685: PUSH
41686: LD_INT 2
41688: NEG
41689: PUSH
41690: LD_INT 3
41692: NEG
41693: PUSH
41694: EMPTY
41695: LIST
41696: LIST
41697: PUSH
41698: LD_INT 2
41700: PUSH
41701: LD_INT 1
41703: NEG
41704: PUSH
41705: EMPTY
41706: LIST
41707: LIST
41708: PUSH
41709: LD_INT 3
41711: PUSH
41712: LD_INT 1
41714: PUSH
41715: EMPTY
41716: LIST
41717: LIST
41718: PUSH
41719: LD_INT 1
41721: PUSH
41722: LD_INT 3
41724: PUSH
41725: EMPTY
41726: LIST
41727: LIST
41728: PUSH
41729: LD_INT 1
41731: NEG
41732: PUSH
41733: LD_INT 2
41735: PUSH
41736: EMPTY
41737: LIST
41738: LIST
41739: PUSH
41740: LD_INT 3
41742: NEG
41743: PUSH
41744: LD_INT 2
41746: NEG
41747: PUSH
41748: EMPTY
41749: LIST
41750: LIST
41751: PUSH
41752: EMPTY
41753: LIST
41754: LIST
41755: LIST
41756: LIST
41757: LIST
41758: LIST
41759: LIST
41760: LIST
41761: LIST
41762: LIST
41763: LIST
41764: LIST
41765: LIST
41766: LIST
41767: LIST
41768: LIST
41769: LIST
41770: LIST
41771: LIST
41772: LIST
41773: LIST
41774: LIST
41775: LIST
41776: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
41777: LD_ADDR_VAR 0 34
41781: PUSH
41782: LD_INT 0
41784: PUSH
41785: LD_INT 0
41787: PUSH
41788: EMPTY
41789: LIST
41790: LIST
41791: PUSH
41792: LD_INT 0
41794: PUSH
41795: LD_INT 1
41797: NEG
41798: PUSH
41799: EMPTY
41800: LIST
41801: LIST
41802: PUSH
41803: LD_INT 1
41805: PUSH
41806: LD_INT 0
41808: PUSH
41809: EMPTY
41810: LIST
41811: LIST
41812: PUSH
41813: LD_INT 1
41815: PUSH
41816: LD_INT 1
41818: PUSH
41819: EMPTY
41820: LIST
41821: LIST
41822: PUSH
41823: LD_INT 0
41825: PUSH
41826: LD_INT 1
41828: PUSH
41829: EMPTY
41830: LIST
41831: LIST
41832: PUSH
41833: LD_INT 1
41835: NEG
41836: PUSH
41837: LD_INT 0
41839: PUSH
41840: EMPTY
41841: LIST
41842: LIST
41843: PUSH
41844: LD_INT 1
41846: NEG
41847: PUSH
41848: LD_INT 1
41850: NEG
41851: PUSH
41852: EMPTY
41853: LIST
41854: LIST
41855: PUSH
41856: LD_INT 1
41858: NEG
41859: PUSH
41860: LD_INT 2
41862: NEG
41863: PUSH
41864: EMPTY
41865: LIST
41866: LIST
41867: PUSH
41868: LD_INT 0
41870: PUSH
41871: LD_INT 2
41873: NEG
41874: PUSH
41875: EMPTY
41876: LIST
41877: LIST
41878: PUSH
41879: LD_INT 1
41881: PUSH
41882: LD_INT 1
41884: NEG
41885: PUSH
41886: EMPTY
41887: LIST
41888: LIST
41889: PUSH
41890: LD_INT 2
41892: PUSH
41893: LD_INT 1
41895: PUSH
41896: EMPTY
41897: LIST
41898: LIST
41899: PUSH
41900: LD_INT 2
41902: PUSH
41903: LD_INT 2
41905: PUSH
41906: EMPTY
41907: LIST
41908: LIST
41909: PUSH
41910: LD_INT 1
41912: PUSH
41913: LD_INT 2
41915: PUSH
41916: EMPTY
41917: LIST
41918: LIST
41919: PUSH
41920: LD_INT 1
41922: NEG
41923: PUSH
41924: LD_INT 1
41926: PUSH
41927: EMPTY
41928: LIST
41929: LIST
41930: PUSH
41931: LD_INT 2
41933: NEG
41934: PUSH
41935: LD_INT 0
41937: PUSH
41938: EMPTY
41939: LIST
41940: LIST
41941: PUSH
41942: LD_INT 2
41944: NEG
41945: PUSH
41946: LD_INT 1
41948: NEG
41949: PUSH
41950: EMPTY
41951: LIST
41952: LIST
41953: PUSH
41954: LD_INT 2
41956: NEG
41957: PUSH
41958: LD_INT 2
41960: NEG
41961: PUSH
41962: EMPTY
41963: LIST
41964: LIST
41965: PUSH
41966: LD_INT 1
41968: NEG
41969: PUSH
41970: LD_INT 3
41972: NEG
41973: PUSH
41974: EMPTY
41975: LIST
41976: LIST
41977: PUSH
41978: LD_INT 1
41980: PUSH
41981: LD_INT 2
41983: NEG
41984: PUSH
41985: EMPTY
41986: LIST
41987: LIST
41988: PUSH
41989: LD_INT 3
41991: PUSH
41992: LD_INT 2
41994: PUSH
41995: EMPTY
41996: LIST
41997: LIST
41998: PUSH
41999: LD_INT 2
42001: PUSH
42002: LD_INT 3
42004: PUSH
42005: EMPTY
42006: LIST
42007: LIST
42008: PUSH
42009: LD_INT 2
42011: NEG
42012: PUSH
42013: LD_INT 1
42015: PUSH
42016: EMPTY
42017: LIST
42018: LIST
42019: PUSH
42020: LD_INT 3
42022: NEG
42023: PUSH
42024: LD_INT 1
42026: NEG
42027: PUSH
42028: EMPTY
42029: LIST
42030: LIST
42031: PUSH
42032: EMPTY
42033: LIST
42034: LIST
42035: LIST
42036: LIST
42037: LIST
42038: LIST
42039: LIST
42040: LIST
42041: LIST
42042: LIST
42043: LIST
42044: LIST
42045: LIST
42046: LIST
42047: LIST
42048: LIST
42049: LIST
42050: LIST
42051: LIST
42052: LIST
42053: LIST
42054: LIST
42055: LIST
42056: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
42057: LD_ADDR_VAR 0 35
42061: PUSH
42062: LD_INT 0
42064: PUSH
42065: LD_INT 0
42067: PUSH
42068: EMPTY
42069: LIST
42070: LIST
42071: PUSH
42072: LD_INT 0
42074: PUSH
42075: LD_INT 1
42077: NEG
42078: PUSH
42079: EMPTY
42080: LIST
42081: LIST
42082: PUSH
42083: LD_INT 1
42085: PUSH
42086: LD_INT 0
42088: PUSH
42089: EMPTY
42090: LIST
42091: LIST
42092: PUSH
42093: LD_INT 1
42095: PUSH
42096: LD_INT 1
42098: PUSH
42099: EMPTY
42100: LIST
42101: LIST
42102: PUSH
42103: LD_INT 0
42105: PUSH
42106: LD_INT 1
42108: PUSH
42109: EMPTY
42110: LIST
42111: LIST
42112: PUSH
42113: LD_INT 1
42115: NEG
42116: PUSH
42117: LD_INT 0
42119: PUSH
42120: EMPTY
42121: LIST
42122: LIST
42123: PUSH
42124: LD_INT 1
42126: NEG
42127: PUSH
42128: LD_INT 1
42130: NEG
42131: PUSH
42132: EMPTY
42133: LIST
42134: LIST
42135: PUSH
42136: LD_INT 2
42138: PUSH
42139: LD_INT 1
42141: PUSH
42142: EMPTY
42143: LIST
42144: LIST
42145: PUSH
42146: LD_INT 2
42148: NEG
42149: PUSH
42150: LD_INT 1
42152: NEG
42153: PUSH
42154: EMPTY
42155: LIST
42156: LIST
42157: PUSH
42158: EMPTY
42159: LIST
42160: LIST
42161: LIST
42162: LIST
42163: LIST
42164: LIST
42165: LIST
42166: LIST
42167: LIST
42168: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
42169: LD_ADDR_VAR 0 36
42173: PUSH
42174: LD_INT 0
42176: PUSH
42177: LD_INT 0
42179: PUSH
42180: EMPTY
42181: LIST
42182: LIST
42183: PUSH
42184: LD_INT 0
42186: PUSH
42187: LD_INT 1
42189: NEG
42190: PUSH
42191: EMPTY
42192: LIST
42193: LIST
42194: PUSH
42195: LD_INT 1
42197: PUSH
42198: LD_INT 0
42200: PUSH
42201: EMPTY
42202: LIST
42203: LIST
42204: PUSH
42205: LD_INT 1
42207: PUSH
42208: LD_INT 1
42210: PUSH
42211: EMPTY
42212: LIST
42213: LIST
42214: PUSH
42215: LD_INT 0
42217: PUSH
42218: LD_INT 1
42220: PUSH
42221: EMPTY
42222: LIST
42223: LIST
42224: PUSH
42225: LD_INT 1
42227: NEG
42228: PUSH
42229: LD_INT 0
42231: PUSH
42232: EMPTY
42233: LIST
42234: LIST
42235: PUSH
42236: LD_INT 1
42238: NEG
42239: PUSH
42240: LD_INT 1
42242: NEG
42243: PUSH
42244: EMPTY
42245: LIST
42246: LIST
42247: PUSH
42248: LD_INT 1
42250: NEG
42251: PUSH
42252: LD_INT 2
42254: NEG
42255: PUSH
42256: EMPTY
42257: LIST
42258: LIST
42259: PUSH
42260: LD_INT 1
42262: PUSH
42263: LD_INT 2
42265: PUSH
42266: EMPTY
42267: LIST
42268: LIST
42269: PUSH
42270: EMPTY
42271: LIST
42272: LIST
42273: LIST
42274: LIST
42275: LIST
42276: LIST
42277: LIST
42278: LIST
42279: LIST
42280: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
42281: LD_ADDR_VAR 0 37
42285: PUSH
42286: LD_INT 0
42288: PUSH
42289: LD_INT 0
42291: PUSH
42292: EMPTY
42293: LIST
42294: LIST
42295: PUSH
42296: LD_INT 0
42298: PUSH
42299: LD_INT 1
42301: NEG
42302: PUSH
42303: EMPTY
42304: LIST
42305: LIST
42306: PUSH
42307: LD_INT 1
42309: PUSH
42310: LD_INT 0
42312: PUSH
42313: EMPTY
42314: LIST
42315: LIST
42316: PUSH
42317: LD_INT 1
42319: PUSH
42320: LD_INT 1
42322: PUSH
42323: EMPTY
42324: LIST
42325: LIST
42326: PUSH
42327: LD_INT 0
42329: PUSH
42330: LD_INT 1
42332: PUSH
42333: EMPTY
42334: LIST
42335: LIST
42336: PUSH
42337: LD_INT 1
42339: NEG
42340: PUSH
42341: LD_INT 0
42343: PUSH
42344: EMPTY
42345: LIST
42346: LIST
42347: PUSH
42348: LD_INT 1
42350: NEG
42351: PUSH
42352: LD_INT 1
42354: NEG
42355: PUSH
42356: EMPTY
42357: LIST
42358: LIST
42359: PUSH
42360: LD_INT 1
42362: PUSH
42363: LD_INT 1
42365: NEG
42366: PUSH
42367: EMPTY
42368: LIST
42369: LIST
42370: PUSH
42371: LD_INT 1
42373: NEG
42374: PUSH
42375: LD_INT 1
42377: PUSH
42378: EMPTY
42379: LIST
42380: LIST
42381: PUSH
42382: EMPTY
42383: LIST
42384: LIST
42385: LIST
42386: LIST
42387: LIST
42388: LIST
42389: LIST
42390: LIST
42391: LIST
42392: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
42393: LD_ADDR_VAR 0 38
42397: PUSH
42398: LD_INT 0
42400: PUSH
42401: LD_INT 0
42403: PUSH
42404: EMPTY
42405: LIST
42406: LIST
42407: PUSH
42408: LD_INT 0
42410: PUSH
42411: LD_INT 1
42413: NEG
42414: PUSH
42415: EMPTY
42416: LIST
42417: LIST
42418: PUSH
42419: LD_INT 1
42421: PUSH
42422: LD_INT 0
42424: PUSH
42425: EMPTY
42426: LIST
42427: LIST
42428: PUSH
42429: LD_INT 1
42431: PUSH
42432: LD_INT 1
42434: PUSH
42435: EMPTY
42436: LIST
42437: LIST
42438: PUSH
42439: LD_INT 0
42441: PUSH
42442: LD_INT 1
42444: PUSH
42445: EMPTY
42446: LIST
42447: LIST
42448: PUSH
42449: LD_INT 1
42451: NEG
42452: PUSH
42453: LD_INT 0
42455: PUSH
42456: EMPTY
42457: LIST
42458: LIST
42459: PUSH
42460: LD_INT 1
42462: NEG
42463: PUSH
42464: LD_INT 1
42466: NEG
42467: PUSH
42468: EMPTY
42469: LIST
42470: LIST
42471: PUSH
42472: LD_INT 2
42474: PUSH
42475: LD_INT 1
42477: PUSH
42478: EMPTY
42479: LIST
42480: LIST
42481: PUSH
42482: LD_INT 2
42484: NEG
42485: PUSH
42486: LD_INT 1
42488: NEG
42489: PUSH
42490: EMPTY
42491: LIST
42492: LIST
42493: PUSH
42494: EMPTY
42495: LIST
42496: LIST
42497: LIST
42498: LIST
42499: LIST
42500: LIST
42501: LIST
42502: LIST
42503: LIST
42504: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
42505: LD_ADDR_VAR 0 39
42509: PUSH
42510: LD_INT 0
42512: PUSH
42513: LD_INT 0
42515: PUSH
42516: EMPTY
42517: LIST
42518: LIST
42519: PUSH
42520: LD_INT 0
42522: PUSH
42523: LD_INT 1
42525: NEG
42526: PUSH
42527: EMPTY
42528: LIST
42529: LIST
42530: PUSH
42531: LD_INT 1
42533: PUSH
42534: LD_INT 0
42536: PUSH
42537: EMPTY
42538: LIST
42539: LIST
42540: PUSH
42541: LD_INT 1
42543: PUSH
42544: LD_INT 1
42546: PUSH
42547: EMPTY
42548: LIST
42549: LIST
42550: PUSH
42551: LD_INT 0
42553: PUSH
42554: LD_INT 1
42556: PUSH
42557: EMPTY
42558: LIST
42559: LIST
42560: PUSH
42561: LD_INT 1
42563: NEG
42564: PUSH
42565: LD_INT 0
42567: PUSH
42568: EMPTY
42569: LIST
42570: LIST
42571: PUSH
42572: LD_INT 1
42574: NEG
42575: PUSH
42576: LD_INT 1
42578: NEG
42579: PUSH
42580: EMPTY
42581: LIST
42582: LIST
42583: PUSH
42584: LD_INT 1
42586: NEG
42587: PUSH
42588: LD_INT 2
42590: NEG
42591: PUSH
42592: EMPTY
42593: LIST
42594: LIST
42595: PUSH
42596: LD_INT 1
42598: PUSH
42599: LD_INT 2
42601: PUSH
42602: EMPTY
42603: LIST
42604: LIST
42605: PUSH
42606: EMPTY
42607: LIST
42608: LIST
42609: LIST
42610: LIST
42611: LIST
42612: LIST
42613: LIST
42614: LIST
42615: LIST
42616: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
42617: LD_ADDR_VAR 0 40
42621: PUSH
42622: LD_INT 0
42624: PUSH
42625: LD_INT 0
42627: PUSH
42628: EMPTY
42629: LIST
42630: LIST
42631: PUSH
42632: LD_INT 0
42634: PUSH
42635: LD_INT 1
42637: NEG
42638: PUSH
42639: EMPTY
42640: LIST
42641: LIST
42642: PUSH
42643: LD_INT 1
42645: PUSH
42646: LD_INT 0
42648: PUSH
42649: EMPTY
42650: LIST
42651: LIST
42652: PUSH
42653: LD_INT 1
42655: PUSH
42656: LD_INT 1
42658: PUSH
42659: EMPTY
42660: LIST
42661: LIST
42662: PUSH
42663: LD_INT 0
42665: PUSH
42666: LD_INT 1
42668: PUSH
42669: EMPTY
42670: LIST
42671: LIST
42672: PUSH
42673: LD_INT 1
42675: NEG
42676: PUSH
42677: LD_INT 0
42679: PUSH
42680: EMPTY
42681: LIST
42682: LIST
42683: PUSH
42684: LD_INT 1
42686: NEG
42687: PUSH
42688: LD_INT 1
42690: NEG
42691: PUSH
42692: EMPTY
42693: LIST
42694: LIST
42695: PUSH
42696: LD_INT 1
42698: PUSH
42699: LD_INT 1
42701: NEG
42702: PUSH
42703: EMPTY
42704: LIST
42705: LIST
42706: PUSH
42707: LD_INT 1
42709: NEG
42710: PUSH
42711: LD_INT 1
42713: PUSH
42714: EMPTY
42715: LIST
42716: LIST
42717: PUSH
42718: EMPTY
42719: LIST
42720: LIST
42721: LIST
42722: LIST
42723: LIST
42724: LIST
42725: LIST
42726: LIST
42727: LIST
42728: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42729: LD_ADDR_VAR 0 41
42733: PUSH
42734: LD_INT 0
42736: PUSH
42737: LD_INT 0
42739: PUSH
42740: EMPTY
42741: LIST
42742: LIST
42743: PUSH
42744: LD_INT 0
42746: PUSH
42747: LD_INT 1
42749: NEG
42750: PUSH
42751: EMPTY
42752: LIST
42753: LIST
42754: PUSH
42755: LD_INT 1
42757: PUSH
42758: LD_INT 0
42760: PUSH
42761: EMPTY
42762: LIST
42763: LIST
42764: PUSH
42765: LD_INT 1
42767: PUSH
42768: LD_INT 1
42770: PUSH
42771: EMPTY
42772: LIST
42773: LIST
42774: PUSH
42775: LD_INT 0
42777: PUSH
42778: LD_INT 1
42780: PUSH
42781: EMPTY
42782: LIST
42783: LIST
42784: PUSH
42785: LD_INT 1
42787: NEG
42788: PUSH
42789: LD_INT 0
42791: PUSH
42792: EMPTY
42793: LIST
42794: LIST
42795: PUSH
42796: LD_INT 1
42798: NEG
42799: PUSH
42800: LD_INT 1
42802: NEG
42803: PUSH
42804: EMPTY
42805: LIST
42806: LIST
42807: PUSH
42808: LD_INT 1
42810: NEG
42811: PUSH
42812: LD_INT 2
42814: NEG
42815: PUSH
42816: EMPTY
42817: LIST
42818: LIST
42819: PUSH
42820: LD_INT 1
42822: PUSH
42823: LD_INT 1
42825: NEG
42826: PUSH
42827: EMPTY
42828: LIST
42829: LIST
42830: PUSH
42831: LD_INT 2
42833: PUSH
42834: LD_INT 0
42836: PUSH
42837: EMPTY
42838: LIST
42839: LIST
42840: PUSH
42841: LD_INT 2
42843: PUSH
42844: LD_INT 1
42846: PUSH
42847: EMPTY
42848: LIST
42849: LIST
42850: PUSH
42851: LD_INT 2
42853: PUSH
42854: LD_INT 2
42856: PUSH
42857: EMPTY
42858: LIST
42859: LIST
42860: PUSH
42861: LD_INT 1
42863: PUSH
42864: LD_INT 2
42866: PUSH
42867: EMPTY
42868: LIST
42869: LIST
42870: PUSH
42871: LD_INT 1
42873: NEG
42874: PUSH
42875: LD_INT 1
42877: PUSH
42878: EMPTY
42879: LIST
42880: LIST
42881: PUSH
42882: LD_INT 2
42884: NEG
42885: PUSH
42886: LD_INT 0
42888: PUSH
42889: EMPTY
42890: LIST
42891: LIST
42892: PUSH
42893: LD_INT 2
42895: NEG
42896: PUSH
42897: LD_INT 1
42899: NEG
42900: PUSH
42901: EMPTY
42902: LIST
42903: LIST
42904: PUSH
42905: LD_INT 2
42907: NEG
42908: PUSH
42909: LD_INT 2
42911: NEG
42912: PUSH
42913: EMPTY
42914: LIST
42915: LIST
42916: PUSH
42917: LD_INT 2
42919: NEG
42920: PUSH
42921: LD_INT 3
42923: NEG
42924: PUSH
42925: EMPTY
42926: LIST
42927: LIST
42928: PUSH
42929: LD_INT 2
42931: PUSH
42932: LD_INT 1
42934: NEG
42935: PUSH
42936: EMPTY
42937: LIST
42938: LIST
42939: PUSH
42940: LD_INT 3
42942: PUSH
42943: LD_INT 0
42945: PUSH
42946: EMPTY
42947: LIST
42948: LIST
42949: PUSH
42950: LD_INT 3
42952: PUSH
42953: LD_INT 1
42955: PUSH
42956: EMPTY
42957: LIST
42958: LIST
42959: PUSH
42960: LD_INT 3
42962: PUSH
42963: LD_INT 2
42965: PUSH
42966: EMPTY
42967: LIST
42968: LIST
42969: PUSH
42970: LD_INT 3
42972: PUSH
42973: LD_INT 3
42975: PUSH
42976: EMPTY
42977: LIST
42978: LIST
42979: PUSH
42980: LD_INT 2
42982: PUSH
42983: LD_INT 3
42985: PUSH
42986: EMPTY
42987: LIST
42988: LIST
42989: PUSH
42990: LD_INT 2
42992: NEG
42993: PUSH
42994: LD_INT 1
42996: PUSH
42997: EMPTY
42998: LIST
42999: LIST
43000: PUSH
43001: LD_INT 3
43003: NEG
43004: PUSH
43005: LD_INT 0
43007: PUSH
43008: EMPTY
43009: LIST
43010: LIST
43011: PUSH
43012: LD_INT 3
43014: NEG
43015: PUSH
43016: LD_INT 1
43018: NEG
43019: PUSH
43020: EMPTY
43021: LIST
43022: LIST
43023: PUSH
43024: LD_INT 3
43026: NEG
43027: PUSH
43028: LD_INT 2
43030: NEG
43031: PUSH
43032: EMPTY
43033: LIST
43034: LIST
43035: PUSH
43036: LD_INT 3
43038: NEG
43039: PUSH
43040: LD_INT 3
43042: NEG
43043: PUSH
43044: EMPTY
43045: LIST
43046: LIST
43047: PUSH
43048: EMPTY
43049: LIST
43050: LIST
43051: LIST
43052: LIST
43053: LIST
43054: LIST
43055: LIST
43056: LIST
43057: LIST
43058: LIST
43059: LIST
43060: LIST
43061: LIST
43062: LIST
43063: LIST
43064: LIST
43065: LIST
43066: LIST
43067: LIST
43068: LIST
43069: LIST
43070: LIST
43071: LIST
43072: LIST
43073: LIST
43074: LIST
43075: LIST
43076: LIST
43077: LIST
43078: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43079: LD_ADDR_VAR 0 42
43083: PUSH
43084: LD_INT 0
43086: PUSH
43087: LD_INT 0
43089: PUSH
43090: EMPTY
43091: LIST
43092: LIST
43093: PUSH
43094: LD_INT 0
43096: PUSH
43097: LD_INT 1
43099: NEG
43100: PUSH
43101: EMPTY
43102: LIST
43103: LIST
43104: PUSH
43105: LD_INT 1
43107: PUSH
43108: LD_INT 0
43110: PUSH
43111: EMPTY
43112: LIST
43113: LIST
43114: PUSH
43115: LD_INT 1
43117: PUSH
43118: LD_INT 1
43120: PUSH
43121: EMPTY
43122: LIST
43123: LIST
43124: PUSH
43125: LD_INT 0
43127: PUSH
43128: LD_INT 1
43130: PUSH
43131: EMPTY
43132: LIST
43133: LIST
43134: PUSH
43135: LD_INT 1
43137: NEG
43138: PUSH
43139: LD_INT 0
43141: PUSH
43142: EMPTY
43143: LIST
43144: LIST
43145: PUSH
43146: LD_INT 1
43148: NEG
43149: PUSH
43150: LD_INT 1
43152: NEG
43153: PUSH
43154: EMPTY
43155: LIST
43156: LIST
43157: PUSH
43158: LD_INT 1
43160: NEG
43161: PUSH
43162: LD_INT 2
43164: NEG
43165: PUSH
43166: EMPTY
43167: LIST
43168: LIST
43169: PUSH
43170: LD_INT 0
43172: PUSH
43173: LD_INT 2
43175: NEG
43176: PUSH
43177: EMPTY
43178: LIST
43179: LIST
43180: PUSH
43181: LD_INT 1
43183: PUSH
43184: LD_INT 1
43186: NEG
43187: PUSH
43188: EMPTY
43189: LIST
43190: LIST
43191: PUSH
43192: LD_INT 2
43194: PUSH
43195: LD_INT 1
43197: PUSH
43198: EMPTY
43199: LIST
43200: LIST
43201: PUSH
43202: LD_INT 2
43204: PUSH
43205: LD_INT 2
43207: PUSH
43208: EMPTY
43209: LIST
43210: LIST
43211: PUSH
43212: LD_INT 1
43214: PUSH
43215: LD_INT 2
43217: PUSH
43218: EMPTY
43219: LIST
43220: LIST
43221: PUSH
43222: LD_INT 0
43224: PUSH
43225: LD_INT 2
43227: PUSH
43228: EMPTY
43229: LIST
43230: LIST
43231: PUSH
43232: LD_INT 1
43234: NEG
43235: PUSH
43236: LD_INT 1
43238: PUSH
43239: EMPTY
43240: LIST
43241: LIST
43242: PUSH
43243: LD_INT 2
43245: NEG
43246: PUSH
43247: LD_INT 1
43249: NEG
43250: PUSH
43251: EMPTY
43252: LIST
43253: LIST
43254: PUSH
43255: LD_INT 2
43257: NEG
43258: PUSH
43259: LD_INT 2
43261: NEG
43262: PUSH
43263: EMPTY
43264: LIST
43265: LIST
43266: PUSH
43267: LD_INT 2
43269: NEG
43270: PUSH
43271: LD_INT 3
43273: NEG
43274: PUSH
43275: EMPTY
43276: LIST
43277: LIST
43278: PUSH
43279: LD_INT 1
43281: NEG
43282: PUSH
43283: LD_INT 3
43285: NEG
43286: PUSH
43287: EMPTY
43288: LIST
43289: LIST
43290: PUSH
43291: LD_INT 0
43293: PUSH
43294: LD_INT 3
43296: NEG
43297: PUSH
43298: EMPTY
43299: LIST
43300: LIST
43301: PUSH
43302: LD_INT 1
43304: PUSH
43305: LD_INT 2
43307: NEG
43308: PUSH
43309: EMPTY
43310: LIST
43311: LIST
43312: PUSH
43313: LD_INT 3
43315: PUSH
43316: LD_INT 2
43318: PUSH
43319: EMPTY
43320: LIST
43321: LIST
43322: PUSH
43323: LD_INT 3
43325: PUSH
43326: LD_INT 3
43328: PUSH
43329: EMPTY
43330: LIST
43331: LIST
43332: PUSH
43333: LD_INT 2
43335: PUSH
43336: LD_INT 3
43338: PUSH
43339: EMPTY
43340: LIST
43341: LIST
43342: PUSH
43343: LD_INT 1
43345: PUSH
43346: LD_INT 3
43348: PUSH
43349: EMPTY
43350: LIST
43351: LIST
43352: PUSH
43353: LD_INT 0
43355: PUSH
43356: LD_INT 3
43358: PUSH
43359: EMPTY
43360: LIST
43361: LIST
43362: PUSH
43363: LD_INT 1
43365: NEG
43366: PUSH
43367: LD_INT 2
43369: PUSH
43370: EMPTY
43371: LIST
43372: LIST
43373: PUSH
43374: LD_INT 3
43376: NEG
43377: PUSH
43378: LD_INT 2
43380: NEG
43381: PUSH
43382: EMPTY
43383: LIST
43384: LIST
43385: PUSH
43386: LD_INT 3
43388: NEG
43389: PUSH
43390: LD_INT 3
43392: NEG
43393: PUSH
43394: EMPTY
43395: LIST
43396: LIST
43397: PUSH
43398: EMPTY
43399: LIST
43400: LIST
43401: LIST
43402: LIST
43403: LIST
43404: LIST
43405: LIST
43406: LIST
43407: LIST
43408: LIST
43409: LIST
43410: LIST
43411: LIST
43412: LIST
43413: LIST
43414: LIST
43415: LIST
43416: LIST
43417: LIST
43418: LIST
43419: LIST
43420: LIST
43421: LIST
43422: LIST
43423: LIST
43424: LIST
43425: LIST
43426: LIST
43427: LIST
43428: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
43429: LD_ADDR_VAR 0 43
43433: PUSH
43434: LD_INT 0
43436: PUSH
43437: LD_INT 0
43439: PUSH
43440: EMPTY
43441: LIST
43442: LIST
43443: PUSH
43444: LD_INT 0
43446: PUSH
43447: LD_INT 1
43449: NEG
43450: PUSH
43451: EMPTY
43452: LIST
43453: LIST
43454: PUSH
43455: LD_INT 1
43457: PUSH
43458: LD_INT 0
43460: PUSH
43461: EMPTY
43462: LIST
43463: LIST
43464: PUSH
43465: LD_INT 1
43467: PUSH
43468: LD_INT 1
43470: PUSH
43471: EMPTY
43472: LIST
43473: LIST
43474: PUSH
43475: LD_INT 0
43477: PUSH
43478: LD_INT 1
43480: PUSH
43481: EMPTY
43482: LIST
43483: LIST
43484: PUSH
43485: LD_INT 1
43487: NEG
43488: PUSH
43489: LD_INT 0
43491: PUSH
43492: EMPTY
43493: LIST
43494: LIST
43495: PUSH
43496: LD_INT 1
43498: NEG
43499: PUSH
43500: LD_INT 1
43502: NEG
43503: PUSH
43504: EMPTY
43505: LIST
43506: LIST
43507: PUSH
43508: LD_INT 1
43510: NEG
43511: PUSH
43512: LD_INT 2
43514: NEG
43515: PUSH
43516: EMPTY
43517: LIST
43518: LIST
43519: PUSH
43520: LD_INT 0
43522: PUSH
43523: LD_INT 2
43525: NEG
43526: PUSH
43527: EMPTY
43528: LIST
43529: LIST
43530: PUSH
43531: LD_INT 1
43533: PUSH
43534: LD_INT 1
43536: NEG
43537: PUSH
43538: EMPTY
43539: LIST
43540: LIST
43541: PUSH
43542: LD_INT 2
43544: PUSH
43545: LD_INT 0
43547: PUSH
43548: EMPTY
43549: LIST
43550: LIST
43551: PUSH
43552: LD_INT 2
43554: PUSH
43555: LD_INT 1
43557: PUSH
43558: EMPTY
43559: LIST
43560: LIST
43561: PUSH
43562: LD_INT 1
43564: PUSH
43565: LD_INT 2
43567: PUSH
43568: EMPTY
43569: LIST
43570: LIST
43571: PUSH
43572: LD_INT 0
43574: PUSH
43575: LD_INT 2
43577: PUSH
43578: EMPTY
43579: LIST
43580: LIST
43581: PUSH
43582: LD_INT 1
43584: NEG
43585: PUSH
43586: LD_INT 1
43588: PUSH
43589: EMPTY
43590: LIST
43591: LIST
43592: PUSH
43593: LD_INT 2
43595: NEG
43596: PUSH
43597: LD_INT 0
43599: PUSH
43600: EMPTY
43601: LIST
43602: LIST
43603: PUSH
43604: LD_INT 2
43606: NEG
43607: PUSH
43608: LD_INT 1
43610: NEG
43611: PUSH
43612: EMPTY
43613: LIST
43614: LIST
43615: PUSH
43616: LD_INT 1
43618: NEG
43619: PUSH
43620: LD_INT 3
43622: NEG
43623: PUSH
43624: EMPTY
43625: LIST
43626: LIST
43627: PUSH
43628: LD_INT 0
43630: PUSH
43631: LD_INT 3
43633: NEG
43634: PUSH
43635: EMPTY
43636: LIST
43637: LIST
43638: PUSH
43639: LD_INT 1
43641: PUSH
43642: LD_INT 2
43644: NEG
43645: PUSH
43646: EMPTY
43647: LIST
43648: LIST
43649: PUSH
43650: LD_INT 2
43652: PUSH
43653: LD_INT 1
43655: NEG
43656: PUSH
43657: EMPTY
43658: LIST
43659: LIST
43660: PUSH
43661: LD_INT 3
43663: PUSH
43664: LD_INT 0
43666: PUSH
43667: EMPTY
43668: LIST
43669: LIST
43670: PUSH
43671: LD_INT 3
43673: PUSH
43674: LD_INT 1
43676: PUSH
43677: EMPTY
43678: LIST
43679: LIST
43680: PUSH
43681: LD_INT 1
43683: PUSH
43684: LD_INT 3
43686: PUSH
43687: EMPTY
43688: LIST
43689: LIST
43690: PUSH
43691: LD_INT 0
43693: PUSH
43694: LD_INT 3
43696: PUSH
43697: EMPTY
43698: LIST
43699: LIST
43700: PUSH
43701: LD_INT 1
43703: NEG
43704: PUSH
43705: LD_INT 2
43707: PUSH
43708: EMPTY
43709: LIST
43710: LIST
43711: PUSH
43712: LD_INT 2
43714: NEG
43715: PUSH
43716: LD_INT 1
43718: PUSH
43719: EMPTY
43720: LIST
43721: LIST
43722: PUSH
43723: LD_INT 3
43725: NEG
43726: PUSH
43727: LD_INT 0
43729: PUSH
43730: EMPTY
43731: LIST
43732: LIST
43733: PUSH
43734: LD_INT 3
43736: NEG
43737: PUSH
43738: LD_INT 1
43740: NEG
43741: PUSH
43742: EMPTY
43743: LIST
43744: LIST
43745: PUSH
43746: EMPTY
43747: LIST
43748: LIST
43749: LIST
43750: LIST
43751: LIST
43752: LIST
43753: LIST
43754: LIST
43755: LIST
43756: LIST
43757: LIST
43758: LIST
43759: LIST
43760: LIST
43761: LIST
43762: LIST
43763: LIST
43764: LIST
43765: LIST
43766: LIST
43767: LIST
43768: LIST
43769: LIST
43770: LIST
43771: LIST
43772: LIST
43773: LIST
43774: LIST
43775: LIST
43776: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43777: LD_ADDR_VAR 0 44
43781: PUSH
43782: LD_INT 0
43784: PUSH
43785: LD_INT 0
43787: PUSH
43788: EMPTY
43789: LIST
43790: LIST
43791: PUSH
43792: LD_INT 0
43794: PUSH
43795: LD_INT 1
43797: NEG
43798: PUSH
43799: EMPTY
43800: LIST
43801: LIST
43802: PUSH
43803: LD_INT 1
43805: PUSH
43806: LD_INT 0
43808: PUSH
43809: EMPTY
43810: LIST
43811: LIST
43812: PUSH
43813: LD_INT 1
43815: PUSH
43816: LD_INT 1
43818: PUSH
43819: EMPTY
43820: LIST
43821: LIST
43822: PUSH
43823: LD_INT 0
43825: PUSH
43826: LD_INT 1
43828: PUSH
43829: EMPTY
43830: LIST
43831: LIST
43832: PUSH
43833: LD_INT 1
43835: NEG
43836: PUSH
43837: LD_INT 0
43839: PUSH
43840: EMPTY
43841: LIST
43842: LIST
43843: PUSH
43844: LD_INT 1
43846: NEG
43847: PUSH
43848: LD_INT 1
43850: NEG
43851: PUSH
43852: EMPTY
43853: LIST
43854: LIST
43855: PUSH
43856: LD_INT 1
43858: NEG
43859: PUSH
43860: LD_INT 2
43862: NEG
43863: PUSH
43864: EMPTY
43865: LIST
43866: LIST
43867: PUSH
43868: LD_INT 1
43870: PUSH
43871: LD_INT 1
43873: NEG
43874: PUSH
43875: EMPTY
43876: LIST
43877: LIST
43878: PUSH
43879: LD_INT 2
43881: PUSH
43882: LD_INT 0
43884: PUSH
43885: EMPTY
43886: LIST
43887: LIST
43888: PUSH
43889: LD_INT 2
43891: PUSH
43892: LD_INT 1
43894: PUSH
43895: EMPTY
43896: LIST
43897: LIST
43898: PUSH
43899: LD_INT 2
43901: PUSH
43902: LD_INT 2
43904: PUSH
43905: EMPTY
43906: LIST
43907: LIST
43908: PUSH
43909: LD_INT 1
43911: PUSH
43912: LD_INT 2
43914: PUSH
43915: EMPTY
43916: LIST
43917: LIST
43918: PUSH
43919: LD_INT 1
43921: NEG
43922: PUSH
43923: LD_INT 1
43925: PUSH
43926: EMPTY
43927: LIST
43928: LIST
43929: PUSH
43930: LD_INT 2
43932: NEG
43933: PUSH
43934: LD_INT 0
43936: PUSH
43937: EMPTY
43938: LIST
43939: LIST
43940: PUSH
43941: LD_INT 2
43943: NEG
43944: PUSH
43945: LD_INT 1
43947: NEG
43948: PUSH
43949: EMPTY
43950: LIST
43951: LIST
43952: PUSH
43953: LD_INT 2
43955: NEG
43956: PUSH
43957: LD_INT 2
43959: NEG
43960: PUSH
43961: EMPTY
43962: LIST
43963: LIST
43964: PUSH
43965: LD_INT 2
43967: NEG
43968: PUSH
43969: LD_INT 3
43971: NEG
43972: PUSH
43973: EMPTY
43974: LIST
43975: LIST
43976: PUSH
43977: LD_INT 2
43979: PUSH
43980: LD_INT 1
43982: NEG
43983: PUSH
43984: EMPTY
43985: LIST
43986: LIST
43987: PUSH
43988: LD_INT 3
43990: PUSH
43991: LD_INT 0
43993: PUSH
43994: EMPTY
43995: LIST
43996: LIST
43997: PUSH
43998: LD_INT 3
44000: PUSH
44001: LD_INT 1
44003: PUSH
44004: EMPTY
44005: LIST
44006: LIST
44007: PUSH
44008: LD_INT 3
44010: PUSH
44011: LD_INT 2
44013: PUSH
44014: EMPTY
44015: LIST
44016: LIST
44017: PUSH
44018: LD_INT 3
44020: PUSH
44021: LD_INT 3
44023: PUSH
44024: EMPTY
44025: LIST
44026: LIST
44027: PUSH
44028: LD_INT 2
44030: PUSH
44031: LD_INT 3
44033: PUSH
44034: EMPTY
44035: LIST
44036: LIST
44037: PUSH
44038: LD_INT 2
44040: NEG
44041: PUSH
44042: LD_INT 1
44044: PUSH
44045: EMPTY
44046: LIST
44047: LIST
44048: PUSH
44049: LD_INT 3
44051: NEG
44052: PUSH
44053: LD_INT 0
44055: PUSH
44056: EMPTY
44057: LIST
44058: LIST
44059: PUSH
44060: LD_INT 3
44062: NEG
44063: PUSH
44064: LD_INT 1
44066: NEG
44067: PUSH
44068: EMPTY
44069: LIST
44070: LIST
44071: PUSH
44072: LD_INT 3
44074: NEG
44075: PUSH
44076: LD_INT 2
44078: NEG
44079: PUSH
44080: EMPTY
44081: LIST
44082: LIST
44083: PUSH
44084: LD_INT 3
44086: NEG
44087: PUSH
44088: LD_INT 3
44090: NEG
44091: PUSH
44092: EMPTY
44093: LIST
44094: LIST
44095: PUSH
44096: EMPTY
44097: LIST
44098: LIST
44099: LIST
44100: LIST
44101: LIST
44102: LIST
44103: LIST
44104: LIST
44105: LIST
44106: LIST
44107: LIST
44108: LIST
44109: LIST
44110: LIST
44111: LIST
44112: LIST
44113: LIST
44114: LIST
44115: LIST
44116: LIST
44117: LIST
44118: LIST
44119: LIST
44120: LIST
44121: LIST
44122: LIST
44123: LIST
44124: LIST
44125: LIST
44126: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44127: LD_ADDR_VAR 0 45
44131: PUSH
44132: LD_INT 0
44134: PUSH
44135: LD_INT 0
44137: PUSH
44138: EMPTY
44139: LIST
44140: LIST
44141: PUSH
44142: LD_INT 0
44144: PUSH
44145: LD_INT 1
44147: NEG
44148: PUSH
44149: EMPTY
44150: LIST
44151: LIST
44152: PUSH
44153: LD_INT 1
44155: PUSH
44156: LD_INT 0
44158: PUSH
44159: EMPTY
44160: LIST
44161: LIST
44162: PUSH
44163: LD_INT 1
44165: PUSH
44166: LD_INT 1
44168: PUSH
44169: EMPTY
44170: LIST
44171: LIST
44172: PUSH
44173: LD_INT 0
44175: PUSH
44176: LD_INT 1
44178: PUSH
44179: EMPTY
44180: LIST
44181: LIST
44182: PUSH
44183: LD_INT 1
44185: NEG
44186: PUSH
44187: LD_INT 0
44189: PUSH
44190: EMPTY
44191: LIST
44192: LIST
44193: PUSH
44194: LD_INT 1
44196: NEG
44197: PUSH
44198: LD_INT 1
44200: NEG
44201: PUSH
44202: EMPTY
44203: LIST
44204: LIST
44205: PUSH
44206: LD_INT 1
44208: NEG
44209: PUSH
44210: LD_INT 2
44212: NEG
44213: PUSH
44214: EMPTY
44215: LIST
44216: LIST
44217: PUSH
44218: LD_INT 0
44220: PUSH
44221: LD_INT 2
44223: NEG
44224: PUSH
44225: EMPTY
44226: LIST
44227: LIST
44228: PUSH
44229: LD_INT 1
44231: PUSH
44232: LD_INT 1
44234: NEG
44235: PUSH
44236: EMPTY
44237: LIST
44238: LIST
44239: PUSH
44240: LD_INT 2
44242: PUSH
44243: LD_INT 1
44245: PUSH
44246: EMPTY
44247: LIST
44248: LIST
44249: PUSH
44250: LD_INT 2
44252: PUSH
44253: LD_INT 2
44255: PUSH
44256: EMPTY
44257: LIST
44258: LIST
44259: PUSH
44260: LD_INT 1
44262: PUSH
44263: LD_INT 2
44265: PUSH
44266: EMPTY
44267: LIST
44268: LIST
44269: PUSH
44270: LD_INT 0
44272: PUSH
44273: LD_INT 2
44275: PUSH
44276: EMPTY
44277: LIST
44278: LIST
44279: PUSH
44280: LD_INT 1
44282: NEG
44283: PUSH
44284: LD_INT 1
44286: PUSH
44287: EMPTY
44288: LIST
44289: LIST
44290: PUSH
44291: LD_INT 2
44293: NEG
44294: PUSH
44295: LD_INT 1
44297: NEG
44298: PUSH
44299: EMPTY
44300: LIST
44301: LIST
44302: PUSH
44303: LD_INT 2
44305: NEG
44306: PUSH
44307: LD_INT 2
44309: NEG
44310: PUSH
44311: EMPTY
44312: LIST
44313: LIST
44314: PUSH
44315: LD_INT 2
44317: NEG
44318: PUSH
44319: LD_INT 3
44321: NEG
44322: PUSH
44323: EMPTY
44324: LIST
44325: LIST
44326: PUSH
44327: LD_INT 1
44329: NEG
44330: PUSH
44331: LD_INT 3
44333: NEG
44334: PUSH
44335: EMPTY
44336: LIST
44337: LIST
44338: PUSH
44339: LD_INT 0
44341: PUSH
44342: LD_INT 3
44344: NEG
44345: PUSH
44346: EMPTY
44347: LIST
44348: LIST
44349: PUSH
44350: LD_INT 1
44352: PUSH
44353: LD_INT 2
44355: NEG
44356: PUSH
44357: EMPTY
44358: LIST
44359: LIST
44360: PUSH
44361: LD_INT 3
44363: PUSH
44364: LD_INT 2
44366: PUSH
44367: EMPTY
44368: LIST
44369: LIST
44370: PUSH
44371: LD_INT 3
44373: PUSH
44374: LD_INT 3
44376: PUSH
44377: EMPTY
44378: LIST
44379: LIST
44380: PUSH
44381: LD_INT 2
44383: PUSH
44384: LD_INT 3
44386: PUSH
44387: EMPTY
44388: LIST
44389: LIST
44390: PUSH
44391: LD_INT 1
44393: PUSH
44394: LD_INT 3
44396: PUSH
44397: EMPTY
44398: LIST
44399: LIST
44400: PUSH
44401: LD_INT 0
44403: PUSH
44404: LD_INT 3
44406: PUSH
44407: EMPTY
44408: LIST
44409: LIST
44410: PUSH
44411: LD_INT 1
44413: NEG
44414: PUSH
44415: LD_INT 2
44417: PUSH
44418: EMPTY
44419: LIST
44420: LIST
44421: PUSH
44422: LD_INT 3
44424: NEG
44425: PUSH
44426: LD_INT 2
44428: NEG
44429: PUSH
44430: EMPTY
44431: LIST
44432: LIST
44433: PUSH
44434: LD_INT 3
44436: NEG
44437: PUSH
44438: LD_INT 3
44440: NEG
44441: PUSH
44442: EMPTY
44443: LIST
44444: LIST
44445: PUSH
44446: EMPTY
44447: LIST
44448: LIST
44449: LIST
44450: LIST
44451: LIST
44452: LIST
44453: LIST
44454: LIST
44455: LIST
44456: LIST
44457: LIST
44458: LIST
44459: LIST
44460: LIST
44461: LIST
44462: LIST
44463: LIST
44464: LIST
44465: LIST
44466: LIST
44467: LIST
44468: LIST
44469: LIST
44470: LIST
44471: LIST
44472: LIST
44473: LIST
44474: LIST
44475: LIST
44476: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
44477: LD_ADDR_VAR 0 46
44481: PUSH
44482: LD_INT 0
44484: PUSH
44485: LD_INT 0
44487: PUSH
44488: EMPTY
44489: LIST
44490: LIST
44491: PUSH
44492: LD_INT 0
44494: PUSH
44495: LD_INT 1
44497: NEG
44498: PUSH
44499: EMPTY
44500: LIST
44501: LIST
44502: PUSH
44503: LD_INT 1
44505: PUSH
44506: LD_INT 0
44508: PUSH
44509: EMPTY
44510: LIST
44511: LIST
44512: PUSH
44513: LD_INT 1
44515: PUSH
44516: LD_INT 1
44518: PUSH
44519: EMPTY
44520: LIST
44521: LIST
44522: PUSH
44523: LD_INT 0
44525: PUSH
44526: LD_INT 1
44528: PUSH
44529: EMPTY
44530: LIST
44531: LIST
44532: PUSH
44533: LD_INT 1
44535: NEG
44536: PUSH
44537: LD_INT 0
44539: PUSH
44540: EMPTY
44541: LIST
44542: LIST
44543: PUSH
44544: LD_INT 1
44546: NEG
44547: PUSH
44548: LD_INT 1
44550: NEG
44551: PUSH
44552: EMPTY
44553: LIST
44554: LIST
44555: PUSH
44556: LD_INT 1
44558: NEG
44559: PUSH
44560: LD_INT 2
44562: NEG
44563: PUSH
44564: EMPTY
44565: LIST
44566: LIST
44567: PUSH
44568: LD_INT 0
44570: PUSH
44571: LD_INT 2
44573: NEG
44574: PUSH
44575: EMPTY
44576: LIST
44577: LIST
44578: PUSH
44579: LD_INT 1
44581: PUSH
44582: LD_INT 1
44584: NEG
44585: PUSH
44586: EMPTY
44587: LIST
44588: LIST
44589: PUSH
44590: LD_INT 2
44592: PUSH
44593: LD_INT 0
44595: PUSH
44596: EMPTY
44597: LIST
44598: LIST
44599: PUSH
44600: LD_INT 2
44602: PUSH
44603: LD_INT 1
44605: PUSH
44606: EMPTY
44607: LIST
44608: LIST
44609: PUSH
44610: LD_INT 1
44612: PUSH
44613: LD_INT 2
44615: PUSH
44616: EMPTY
44617: LIST
44618: LIST
44619: PUSH
44620: LD_INT 0
44622: PUSH
44623: LD_INT 2
44625: PUSH
44626: EMPTY
44627: LIST
44628: LIST
44629: PUSH
44630: LD_INT 1
44632: NEG
44633: PUSH
44634: LD_INT 1
44636: PUSH
44637: EMPTY
44638: LIST
44639: LIST
44640: PUSH
44641: LD_INT 2
44643: NEG
44644: PUSH
44645: LD_INT 0
44647: PUSH
44648: EMPTY
44649: LIST
44650: LIST
44651: PUSH
44652: LD_INT 2
44654: NEG
44655: PUSH
44656: LD_INT 1
44658: NEG
44659: PUSH
44660: EMPTY
44661: LIST
44662: LIST
44663: PUSH
44664: LD_INT 1
44666: NEG
44667: PUSH
44668: LD_INT 3
44670: NEG
44671: PUSH
44672: EMPTY
44673: LIST
44674: LIST
44675: PUSH
44676: LD_INT 0
44678: PUSH
44679: LD_INT 3
44681: NEG
44682: PUSH
44683: EMPTY
44684: LIST
44685: LIST
44686: PUSH
44687: LD_INT 1
44689: PUSH
44690: LD_INT 2
44692: NEG
44693: PUSH
44694: EMPTY
44695: LIST
44696: LIST
44697: PUSH
44698: LD_INT 2
44700: PUSH
44701: LD_INT 1
44703: NEG
44704: PUSH
44705: EMPTY
44706: LIST
44707: LIST
44708: PUSH
44709: LD_INT 3
44711: PUSH
44712: LD_INT 0
44714: PUSH
44715: EMPTY
44716: LIST
44717: LIST
44718: PUSH
44719: LD_INT 3
44721: PUSH
44722: LD_INT 1
44724: PUSH
44725: EMPTY
44726: LIST
44727: LIST
44728: PUSH
44729: LD_INT 1
44731: PUSH
44732: LD_INT 3
44734: PUSH
44735: EMPTY
44736: LIST
44737: LIST
44738: PUSH
44739: LD_INT 0
44741: PUSH
44742: LD_INT 3
44744: PUSH
44745: EMPTY
44746: LIST
44747: LIST
44748: PUSH
44749: LD_INT 1
44751: NEG
44752: PUSH
44753: LD_INT 2
44755: PUSH
44756: EMPTY
44757: LIST
44758: LIST
44759: PUSH
44760: LD_INT 2
44762: NEG
44763: PUSH
44764: LD_INT 1
44766: PUSH
44767: EMPTY
44768: LIST
44769: LIST
44770: PUSH
44771: LD_INT 3
44773: NEG
44774: PUSH
44775: LD_INT 0
44777: PUSH
44778: EMPTY
44779: LIST
44780: LIST
44781: PUSH
44782: LD_INT 3
44784: NEG
44785: PUSH
44786: LD_INT 1
44788: NEG
44789: PUSH
44790: EMPTY
44791: LIST
44792: LIST
44793: PUSH
44794: EMPTY
44795: LIST
44796: LIST
44797: LIST
44798: LIST
44799: LIST
44800: LIST
44801: LIST
44802: LIST
44803: LIST
44804: LIST
44805: LIST
44806: LIST
44807: LIST
44808: LIST
44809: LIST
44810: LIST
44811: LIST
44812: LIST
44813: LIST
44814: LIST
44815: LIST
44816: LIST
44817: LIST
44818: LIST
44819: LIST
44820: LIST
44821: LIST
44822: LIST
44823: LIST
44824: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44825: LD_ADDR_VAR 0 47
44829: PUSH
44830: LD_INT 0
44832: PUSH
44833: LD_INT 0
44835: PUSH
44836: EMPTY
44837: LIST
44838: LIST
44839: PUSH
44840: LD_INT 0
44842: PUSH
44843: LD_INT 1
44845: NEG
44846: PUSH
44847: EMPTY
44848: LIST
44849: LIST
44850: PUSH
44851: LD_INT 1
44853: PUSH
44854: LD_INT 0
44856: PUSH
44857: EMPTY
44858: LIST
44859: LIST
44860: PUSH
44861: LD_INT 1
44863: PUSH
44864: LD_INT 1
44866: PUSH
44867: EMPTY
44868: LIST
44869: LIST
44870: PUSH
44871: LD_INT 0
44873: PUSH
44874: LD_INT 1
44876: PUSH
44877: EMPTY
44878: LIST
44879: LIST
44880: PUSH
44881: LD_INT 1
44883: NEG
44884: PUSH
44885: LD_INT 0
44887: PUSH
44888: EMPTY
44889: LIST
44890: LIST
44891: PUSH
44892: LD_INT 1
44894: NEG
44895: PUSH
44896: LD_INT 1
44898: NEG
44899: PUSH
44900: EMPTY
44901: LIST
44902: LIST
44903: PUSH
44904: LD_INT 1
44906: NEG
44907: PUSH
44908: LD_INT 2
44910: NEG
44911: PUSH
44912: EMPTY
44913: LIST
44914: LIST
44915: PUSH
44916: LD_INT 0
44918: PUSH
44919: LD_INT 2
44921: NEG
44922: PUSH
44923: EMPTY
44924: LIST
44925: LIST
44926: PUSH
44927: LD_INT 1
44929: PUSH
44930: LD_INT 1
44932: NEG
44933: PUSH
44934: EMPTY
44935: LIST
44936: LIST
44937: PUSH
44938: LD_INT 2
44940: NEG
44941: PUSH
44942: LD_INT 1
44944: NEG
44945: PUSH
44946: EMPTY
44947: LIST
44948: LIST
44949: PUSH
44950: LD_INT 2
44952: NEG
44953: PUSH
44954: LD_INT 2
44956: NEG
44957: PUSH
44958: EMPTY
44959: LIST
44960: LIST
44961: PUSH
44962: EMPTY
44963: LIST
44964: LIST
44965: LIST
44966: LIST
44967: LIST
44968: LIST
44969: LIST
44970: LIST
44971: LIST
44972: LIST
44973: LIST
44974: LIST
44975: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
44976: LD_ADDR_VAR 0 48
44980: PUSH
44981: LD_INT 0
44983: PUSH
44984: LD_INT 0
44986: PUSH
44987: EMPTY
44988: LIST
44989: LIST
44990: PUSH
44991: LD_INT 0
44993: PUSH
44994: LD_INT 1
44996: NEG
44997: PUSH
44998: EMPTY
44999: LIST
45000: LIST
45001: PUSH
45002: LD_INT 1
45004: PUSH
45005: LD_INT 0
45007: PUSH
45008: EMPTY
45009: LIST
45010: LIST
45011: PUSH
45012: LD_INT 1
45014: PUSH
45015: LD_INT 1
45017: PUSH
45018: EMPTY
45019: LIST
45020: LIST
45021: PUSH
45022: LD_INT 0
45024: PUSH
45025: LD_INT 1
45027: PUSH
45028: EMPTY
45029: LIST
45030: LIST
45031: PUSH
45032: LD_INT 1
45034: NEG
45035: PUSH
45036: LD_INT 0
45038: PUSH
45039: EMPTY
45040: LIST
45041: LIST
45042: PUSH
45043: LD_INT 1
45045: NEG
45046: PUSH
45047: LD_INT 1
45049: NEG
45050: PUSH
45051: EMPTY
45052: LIST
45053: LIST
45054: PUSH
45055: LD_INT 1
45057: NEG
45058: PUSH
45059: LD_INT 2
45061: NEG
45062: PUSH
45063: EMPTY
45064: LIST
45065: LIST
45066: PUSH
45067: LD_INT 0
45069: PUSH
45070: LD_INT 2
45072: NEG
45073: PUSH
45074: EMPTY
45075: LIST
45076: LIST
45077: PUSH
45078: LD_INT 1
45080: PUSH
45081: LD_INT 1
45083: NEG
45084: PUSH
45085: EMPTY
45086: LIST
45087: LIST
45088: PUSH
45089: LD_INT 2
45091: PUSH
45092: LD_INT 0
45094: PUSH
45095: EMPTY
45096: LIST
45097: LIST
45098: PUSH
45099: LD_INT 2
45101: PUSH
45102: LD_INT 1
45104: PUSH
45105: EMPTY
45106: LIST
45107: LIST
45108: PUSH
45109: EMPTY
45110: LIST
45111: LIST
45112: LIST
45113: LIST
45114: LIST
45115: LIST
45116: LIST
45117: LIST
45118: LIST
45119: LIST
45120: LIST
45121: LIST
45122: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
45123: LD_ADDR_VAR 0 49
45127: PUSH
45128: LD_INT 0
45130: PUSH
45131: LD_INT 0
45133: PUSH
45134: EMPTY
45135: LIST
45136: LIST
45137: PUSH
45138: LD_INT 0
45140: PUSH
45141: LD_INT 1
45143: NEG
45144: PUSH
45145: EMPTY
45146: LIST
45147: LIST
45148: PUSH
45149: LD_INT 1
45151: PUSH
45152: LD_INT 0
45154: PUSH
45155: EMPTY
45156: LIST
45157: LIST
45158: PUSH
45159: LD_INT 1
45161: PUSH
45162: LD_INT 1
45164: PUSH
45165: EMPTY
45166: LIST
45167: LIST
45168: PUSH
45169: LD_INT 0
45171: PUSH
45172: LD_INT 1
45174: PUSH
45175: EMPTY
45176: LIST
45177: LIST
45178: PUSH
45179: LD_INT 1
45181: NEG
45182: PUSH
45183: LD_INT 0
45185: PUSH
45186: EMPTY
45187: LIST
45188: LIST
45189: PUSH
45190: LD_INT 1
45192: NEG
45193: PUSH
45194: LD_INT 1
45196: NEG
45197: PUSH
45198: EMPTY
45199: LIST
45200: LIST
45201: PUSH
45202: LD_INT 1
45204: PUSH
45205: LD_INT 1
45207: NEG
45208: PUSH
45209: EMPTY
45210: LIST
45211: LIST
45212: PUSH
45213: LD_INT 2
45215: PUSH
45216: LD_INT 0
45218: PUSH
45219: EMPTY
45220: LIST
45221: LIST
45222: PUSH
45223: LD_INT 2
45225: PUSH
45226: LD_INT 1
45228: PUSH
45229: EMPTY
45230: LIST
45231: LIST
45232: PUSH
45233: LD_INT 2
45235: PUSH
45236: LD_INT 2
45238: PUSH
45239: EMPTY
45240: LIST
45241: LIST
45242: PUSH
45243: LD_INT 1
45245: PUSH
45246: LD_INT 2
45248: PUSH
45249: EMPTY
45250: LIST
45251: LIST
45252: PUSH
45253: EMPTY
45254: LIST
45255: LIST
45256: LIST
45257: LIST
45258: LIST
45259: LIST
45260: LIST
45261: LIST
45262: LIST
45263: LIST
45264: LIST
45265: LIST
45266: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
45267: LD_ADDR_VAR 0 50
45271: PUSH
45272: LD_INT 0
45274: PUSH
45275: LD_INT 0
45277: PUSH
45278: EMPTY
45279: LIST
45280: LIST
45281: PUSH
45282: LD_INT 0
45284: PUSH
45285: LD_INT 1
45287: NEG
45288: PUSH
45289: EMPTY
45290: LIST
45291: LIST
45292: PUSH
45293: LD_INT 1
45295: PUSH
45296: LD_INT 0
45298: PUSH
45299: EMPTY
45300: LIST
45301: LIST
45302: PUSH
45303: LD_INT 1
45305: PUSH
45306: LD_INT 1
45308: PUSH
45309: EMPTY
45310: LIST
45311: LIST
45312: PUSH
45313: LD_INT 0
45315: PUSH
45316: LD_INT 1
45318: PUSH
45319: EMPTY
45320: LIST
45321: LIST
45322: PUSH
45323: LD_INT 1
45325: NEG
45326: PUSH
45327: LD_INT 0
45329: PUSH
45330: EMPTY
45331: LIST
45332: LIST
45333: PUSH
45334: LD_INT 1
45336: NEG
45337: PUSH
45338: LD_INT 1
45340: NEG
45341: PUSH
45342: EMPTY
45343: LIST
45344: LIST
45345: PUSH
45346: LD_INT 2
45348: PUSH
45349: LD_INT 1
45351: PUSH
45352: EMPTY
45353: LIST
45354: LIST
45355: PUSH
45356: LD_INT 2
45358: PUSH
45359: LD_INT 2
45361: PUSH
45362: EMPTY
45363: LIST
45364: LIST
45365: PUSH
45366: LD_INT 1
45368: PUSH
45369: LD_INT 2
45371: PUSH
45372: EMPTY
45373: LIST
45374: LIST
45375: PUSH
45376: LD_INT 0
45378: PUSH
45379: LD_INT 2
45381: PUSH
45382: EMPTY
45383: LIST
45384: LIST
45385: PUSH
45386: LD_INT 1
45388: NEG
45389: PUSH
45390: LD_INT 1
45392: PUSH
45393: EMPTY
45394: LIST
45395: LIST
45396: PUSH
45397: EMPTY
45398: LIST
45399: LIST
45400: LIST
45401: LIST
45402: LIST
45403: LIST
45404: LIST
45405: LIST
45406: LIST
45407: LIST
45408: LIST
45409: LIST
45410: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
45411: LD_ADDR_VAR 0 51
45415: PUSH
45416: LD_INT 0
45418: PUSH
45419: LD_INT 0
45421: PUSH
45422: EMPTY
45423: LIST
45424: LIST
45425: PUSH
45426: LD_INT 0
45428: PUSH
45429: LD_INT 1
45431: NEG
45432: PUSH
45433: EMPTY
45434: LIST
45435: LIST
45436: PUSH
45437: LD_INT 1
45439: PUSH
45440: LD_INT 0
45442: PUSH
45443: EMPTY
45444: LIST
45445: LIST
45446: PUSH
45447: LD_INT 1
45449: PUSH
45450: LD_INT 1
45452: PUSH
45453: EMPTY
45454: LIST
45455: LIST
45456: PUSH
45457: LD_INT 0
45459: PUSH
45460: LD_INT 1
45462: PUSH
45463: EMPTY
45464: LIST
45465: LIST
45466: PUSH
45467: LD_INT 1
45469: NEG
45470: PUSH
45471: LD_INT 0
45473: PUSH
45474: EMPTY
45475: LIST
45476: LIST
45477: PUSH
45478: LD_INT 1
45480: NEG
45481: PUSH
45482: LD_INT 1
45484: NEG
45485: PUSH
45486: EMPTY
45487: LIST
45488: LIST
45489: PUSH
45490: LD_INT 1
45492: PUSH
45493: LD_INT 2
45495: PUSH
45496: EMPTY
45497: LIST
45498: LIST
45499: PUSH
45500: LD_INT 0
45502: PUSH
45503: LD_INT 2
45505: PUSH
45506: EMPTY
45507: LIST
45508: LIST
45509: PUSH
45510: LD_INT 1
45512: NEG
45513: PUSH
45514: LD_INT 1
45516: PUSH
45517: EMPTY
45518: LIST
45519: LIST
45520: PUSH
45521: LD_INT 2
45523: NEG
45524: PUSH
45525: LD_INT 0
45527: PUSH
45528: EMPTY
45529: LIST
45530: LIST
45531: PUSH
45532: LD_INT 2
45534: NEG
45535: PUSH
45536: LD_INT 1
45538: NEG
45539: PUSH
45540: EMPTY
45541: LIST
45542: LIST
45543: PUSH
45544: EMPTY
45545: LIST
45546: LIST
45547: LIST
45548: LIST
45549: LIST
45550: LIST
45551: LIST
45552: LIST
45553: LIST
45554: LIST
45555: LIST
45556: LIST
45557: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45558: LD_ADDR_VAR 0 52
45562: PUSH
45563: LD_INT 0
45565: PUSH
45566: LD_INT 0
45568: PUSH
45569: EMPTY
45570: LIST
45571: LIST
45572: PUSH
45573: LD_INT 0
45575: PUSH
45576: LD_INT 1
45578: NEG
45579: PUSH
45580: EMPTY
45581: LIST
45582: LIST
45583: PUSH
45584: LD_INT 1
45586: PUSH
45587: LD_INT 0
45589: PUSH
45590: EMPTY
45591: LIST
45592: LIST
45593: PUSH
45594: LD_INT 1
45596: PUSH
45597: LD_INT 1
45599: PUSH
45600: EMPTY
45601: LIST
45602: LIST
45603: PUSH
45604: LD_INT 0
45606: PUSH
45607: LD_INT 1
45609: PUSH
45610: EMPTY
45611: LIST
45612: LIST
45613: PUSH
45614: LD_INT 1
45616: NEG
45617: PUSH
45618: LD_INT 0
45620: PUSH
45621: EMPTY
45622: LIST
45623: LIST
45624: PUSH
45625: LD_INT 1
45627: NEG
45628: PUSH
45629: LD_INT 1
45631: NEG
45632: PUSH
45633: EMPTY
45634: LIST
45635: LIST
45636: PUSH
45637: LD_INT 1
45639: NEG
45640: PUSH
45641: LD_INT 2
45643: NEG
45644: PUSH
45645: EMPTY
45646: LIST
45647: LIST
45648: PUSH
45649: LD_INT 1
45651: NEG
45652: PUSH
45653: LD_INT 1
45655: PUSH
45656: EMPTY
45657: LIST
45658: LIST
45659: PUSH
45660: LD_INT 2
45662: NEG
45663: PUSH
45664: LD_INT 0
45666: PUSH
45667: EMPTY
45668: LIST
45669: LIST
45670: PUSH
45671: LD_INT 2
45673: NEG
45674: PUSH
45675: LD_INT 1
45677: NEG
45678: PUSH
45679: EMPTY
45680: LIST
45681: LIST
45682: PUSH
45683: LD_INT 2
45685: NEG
45686: PUSH
45687: LD_INT 2
45689: NEG
45690: PUSH
45691: EMPTY
45692: LIST
45693: LIST
45694: PUSH
45695: EMPTY
45696: LIST
45697: LIST
45698: LIST
45699: LIST
45700: LIST
45701: LIST
45702: LIST
45703: LIST
45704: LIST
45705: LIST
45706: LIST
45707: LIST
45708: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45709: LD_ADDR_VAR 0 53
45713: PUSH
45714: LD_INT 0
45716: PUSH
45717: LD_INT 0
45719: PUSH
45720: EMPTY
45721: LIST
45722: LIST
45723: PUSH
45724: LD_INT 0
45726: PUSH
45727: LD_INT 1
45729: NEG
45730: PUSH
45731: EMPTY
45732: LIST
45733: LIST
45734: PUSH
45735: LD_INT 1
45737: PUSH
45738: LD_INT 0
45740: PUSH
45741: EMPTY
45742: LIST
45743: LIST
45744: PUSH
45745: LD_INT 1
45747: PUSH
45748: LD_INT 1
45750: PUSH
45751: EMPTY
45752: LIST
45753: LIST
45754: PUSH
45755: LD_INT 0
45757: PUSH
45758: LD_INT 1
45760: PUSH
45761: EMPTY
45762: LIST
45763: LIST
45764: PUSH
45765: LD_INT 1
45767: NEG
45768: PUSH
45769: LD_INT 0
45771: PUSH
45772: EMPTY
45773: LIST
45774: LIST
45775: PUSH
45776: LD_INT 1
45778: NEG
45779: PUSH
45780: LD_INT 1
45782: NEG
45783: PUSH
45784: EMPTY
45785: LIST
45786: LIST
45787: PUSH
45788: LD_INT 1
45790: NEG
45791: PUSH
45792: LD_INT 2
45794: NEG
45795: PUSH
45796: EMPTY
45797: LIST
45798: LIST
45799: PUSH
45800: LD_INT 0
45802: PUSH
45803: LD_INT 2
45805: NEG
45806: PUSH
45807: EMPTY
45808: LIST
45809: LIST
45810: PUSH
45811: LD_INT 1
45813: PUSH
45814: LD_INT 1
45816: NEG
45817: PUSH
45818: EMPTY
45819: LIST
45820: LIST
45821: PUSH
45822: LD_INT 2
45824: PUSH
45825: LD_INT 0
45827: PUSH
45828: EMPTY
45829: LIST
45830: LIST
45831: PUSH
45832: LD_INT 2
45834: PUSH
45835: LD_INT 1
45837: PUSH
45838: EMPTY
45839: LIST
45840: LIST
45841: PUSH
45842: LD_INT 2
45844: PUSH
45845: LD_INT 2
45847: PUSH
45848: EMPTY
45849: LIST
45850: LIST
45851: PUSH
45852: LD_INT 1
45854: PUSH
45855: LD_INT 2
45857: PUSH
45858: EMPTY
45859: LIST
45860: LIST
45861: PUSH
45862: LD_INT 0
45864: PUSH
45865: LD_INT 2
45867: PUSH
45868: EMPTY
45869: LIST
45870: LIST
45871: PUSH
45872: LD_INT 1
45874: NEG
45875: PUSH
45876: LD_INT 1
45878: PUSH
45879: EMPTY
45880: LIST
45881: LIST
45882: PUSH
45883: LD_INT 2
45885: NEG
45886: PUSH
45887: LD_INT 0
45889: PUSH
45890: EMPTY
45891: LIST
45892: LIST
45893: PUSH
45894: LD_INT 2
45896: NEG
45897: PUSH
45898: LD_INT 1
45900: NEG
45901: PUSH
45902: EMPTY
45903: LIST
45904: LIST
45905: PUSH
45906: LD_INT 2
45908: NEG
45909: PUSH
45910: LD_INT 2
45912: NEG
45913: PUSH
45914: EMPTY
45915: LIST
45916: LIST
45917: PUSH
45918: EMPTY
45919: LIST
45920: LIST
45921: LIST
45922: LIST
45923: LIST
45924: LIST
45925: LIST
45926: LIST
45927: LIST
45928: LIST
45929: LIST
45930: LIST
45931: LIST
45932: LIST
45933: LIST
45934: LIST
45935: LIST
45936: LIST
45937: LIST
45938: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45939: LD_ADDR_VAR 0 54
45943: PUSH
45944: LD_INT 0
45946: PUSH
45947: LD_INT 0
45949: PUSH
45950: EMPTY
45951: LIST
45952: LIST
45953: PUSH
45954: LD_INT 0
45956: PUSH
45957: LD_INT 1
45959: NEG
45960: PUSH
45961: EMPTY
45962: LIST
45963: LIST
45964: PUSH
45965: LD_INT 1
45967: PUSH
45968: LD_INT 0
45970: PUSH
45971: EMPTY
45972: LIST
45973: LIST
45974: PUSH
45975: LD_INT 1
45977: PUSH
45978: LD_INT 1
45980: PUSH
45981: EMPTY
45982: LIST
45983: LIST
45984: PUSH
45985: LD_INT 0
45987: PUSH
45988: LD_INT 1
45990: PUSH
45991: EMPTY
45992: LIST
45993: LIST
45994: PUSH
45995: LD_INT 1
45997: NEG
45998: PUSH
45999: LD_INT 0
46001: PUSH
46002: EMPTY
46003: LIST
46004: LIST
46005: PUSH
46006: LD_INT 1
46008: NEG
46009: PUSH
46010: LD_INT 1
46012: NEG
46013: PUSH
46014: EMPTY
46015: LIST
46016: LIST
46017: PUSH
46018: LD_INT 1
46020: NEG
46021: PUSH
46022: LD_INT 2
46024: NEG
46025: PUSH
46026: EMPTY
46027: LIST
46028: LIST
46029: PUSH
46030: LD_INT 0
46032: PUSH
46033: LD_INT 2
46035: NEG
46036: PUSH
46037: EMPTY
46038: LIST
46039: LIST
46040: PUSH
46041: LD_INT 1
46043: PUSH
46044: LD_INT 1
46046: NEG
46047: PUSH
46048: EMPTY
46049: LIST
46050: LIST
46051: PUSH
46052: LD_INT 2
46054: PUSH
46055: LD_INT 0
46057: PUSH
46058: EMPTY
46059: LIST
46060: LIST
46061: PUSH
46062: LD_INT 2
46064: PUSH
46065: LD_INT 1
46067: PUSH
46068: EMPTY
46069: LIST
46070: LIST
46071: PUSH
46072: LD_INT 2
46074: PUSH
46075: LD_INT 2
46077: PUSH
46078: EMPTY
46079: LIST
46080: LIST
46081: PUSH
46082: LD_INT 1
46084: PUSH
46085: LD_INT 2
46087: PUSH
46088: EMPTY
46089: LIST
46090: LIST
46091: PUSH
46092: LD_INT 0
46094: PUSH
46095: LD_INT 2
46097: PUSH
46098: EMPTY
46099: LIST
46100: LIST
46101: PUSH
46102: LD_INT 1
46104: NEG
46105: PUSH
46106: LD_INT 1
46108: PUSH
46109: EMPTY
46110: LIST
46111: LIST
46112: PUSH
46113: LD_INT 2
46115: NEG
46116: PUSH
46117: LD_INT 0
46119: PUSH
46120: EMPTY
46121: LIST
46122: LIST
46123: PUSH
46124: LD_INT 2
46126: NEG
46127: PUSH
46128: LD_INT 1
46130: NEG
46131: PUSH
46132: EMPTY
46133: LIST
46134: LIST
46135: PUSH
46136: LD_INT 2
46138: NEG
46139: PUSH
46140: LD_INT 2
46142: NEG
46143: PUSH
46144: EMPTY
46145: LIST
46146: LIST
46147: PUSH
46148: EMPTY
46149: LIST
46150: LIST
46151: LIST
46152: LIST
46153: LIST
46154: LIST
46155: LIST
46156: LIST
46157: LIST
46158: LIST
46159: LIST
46160: LIST
46161: LIST
46162: LIST
46163: LIST
46164: LIST
46165: LIST
46166: LIST
46167: LIST
46168: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46169: LD_ADDR_VAR 0 55
46173: PUSH
46174: LD_INT 0
46176: PUSH
46177: LD_INT 0
46179: PUSH
46180: EMPTY
46181: LIST
46182: LIST
46183: PUSH
46184: LD_INT 0
46186: PUSH
46187: LD_INT 1
46189: NEG
46190: PUSH
46191: EMPTY
46192: LIST
46193: LIST
46194: PUSH
46195: LD_INT 1
46197: PUSH
46198: LD_INT 0
46200: PUSH
46201: EMPTY
46202: LIST
46203: LIST
46204: PUSH
46205: LD_INT 1
46207: PUSH
46208: LD_INT 1
46210: PUSH
46211: EMPTY
46212: LIST
46213: LIST
46214: PUSH
46215: LD_INT 0
46217: PUSH
46218: LD_INT 1
46220: PUSH
46221: EMPTY
46222: LIST
46223: LIST
46224: PUSH
46225: LD_INT 1
46227: NEG
46228: PUSH
46229: LD_INT 0
46231: PUSH
46232: EMPTY
46233: LIST
46234: LIST
46235: PUSH
46236: LD_INT 1
46238: NEG
46239: PUSH
46240: LD_INT 1
46242: NEG
46243: PUSH
46244: EMPTY
46245: LIST
46246: LIST
46247: PUSH
46248: LD_INT 1
46250: NEG
46251: PUSH
46252: LD_INT 2
46254: NEG
46255: PUSH
46256: EMPTY
46257: LIST
46258: LIST
46259: PUSH
46260: LD_INT 0
46262: PUSH
46263: LD_INT 2
46265: NEG
46266: PUSH
46267: EMPTY
46268: LIST
46269: LIST
46270: PUSH
46271: LD_INT 1
46273: PUSH
46274: LD_INT 1
46276: NEG
46277: PUSH
46278: EMPTY
46279: LIST
46280: LIST
46281: PUSH
46282: LD_INT 2
46284: PUSH
46285: LD_INT 0
46287: PUSH
46288: EMPTY
46289: LIST
46290: LIST
46291: PUSH
46292: LD_INT 2
46294: PUSH
46295: LD_INT 1
46297: PUSH
46298: EMPTY
46299: LIST
46300: LIST
46301: PUSH
46302: LD_INT 2
46304: PUSH
46305: LD_INT 2
46307: PUSH
46308: EMPTY
46309: LIST
46310: LIST
46311: PUSH
46312: LD_INT 1
46314: PUSH
46315: LD_INT 2
46317: PUSH
46318: EMPTY
46319: LIST
46320: LIST
46321: PUSH
46322: LD_INT 0
46324: PUSH
46325: LD_INT 2
46327: PUSH
46328: EMPTY
46329: LIST
46330: LIST
46331: PUSH
46332: LD_INT 1
46334: NEG
46335: PUSH
46336: LD_INT 1
46338: PUSH
46339: EMPTY
46340: LIST
46341: LIST
46342: PUSH
46343: LD_INT 2
46345: NEG
46346: PUSH
46347: LD_INT 0
46349: PUSH
46350: EMPTY
46351: LIST
46352: LIST
46353: PUSH
46354: LD_INT 2
46356: NEG
46357: PUSH
46358: LD_INT 1
46360: NEG
46361: PUSH
46362: EMPTY
46363: LIST
46364: LIST
46365: PUSH
46366: LD_INT 2
46368: NEG
46369: PUSH
46370: LD_INT 2
46372: NEG
46373: PUSH
46374: EMPTY
46375: LIST
46376: LIST
46377: PUSH
46378: EMPTY
46379: LIST
46380: LIST
46381: LIST
46382: LIST
46383: LIST
46384: LIST
46385: LIST
46386: LIST
46387: LIST
46388: LIST
46389: LIST
46390: LIST
46391: LIST
46392: LIST
46393: LIST
46394: LIST
46395: LIST
46396: LIST
46397: LIST
46398: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46399: LD_ADDR_VAR 0 56
46403: PUSH
46404: LD_INT 0
46406: PUSH
46407: LD_INT 0
46409: PUSH
46410: EMPTY
46411: LIST
46412: LIST
46413: PUSH
46414: LD_INT 0
46416: PUSH
46417: LD_INT 1
46419: NEG
46420: PUSH
46421: EMPTY
46422: LIST
46423: LIST
46424: PUSH
46425: LD_INT 1
46427: PUSH
46428: LD_INT 0
46430: PUSH
46431: EMPTY
46432: LIST
46433: LIST
46434: PUSH
46435: LD_INT 1
46437: PUSH
46438: LD_INT 1
46440: PUSH
46441: EMPTY
46442: LIST
46443: LIST
46444: PUSH
46445: LD_INT 0
46447: PUSH
46448: LD_INT 1
46450: PUSH
46451: EMPTY
46452: LIST
46453: LIST
46454: PUSH
46455: LD_INT 1
46457: NEG
46458: PUSH
46459: LD_INT 0
46461: PUSH
46462: EMPTY
46463: LIST
46464: LIST
46465: PUSH
46466: LD_INT 1
46468: NEG
46469: PUSH
46470: LD_INT 1
46472: NEG
46473: PUSH
46474: EMPTY
46475: LIST
46476: LIST
46477: PUSH
46478: LD_INT 1
46480: NEG
46481: PUSH
46482: LD_INT 2
46484: NEG
46485: PUSH
46486: EMPTY
46487: LIST
46488: LIST
46489: PUSH
46490: LD_INT 0
46492: PUSH
46493: LD_INT 2
46495: NEG
46496: PUSH
46497: EMPTY
46498: LIST
46499: LIST
46500: PUSH
46501: LD_INT 1
46503: PUSH
46504: LD_INT 1
46506: NEG
46507: PUSH
46508: EMPTY
46509: LIST
46510: LIST
46511: PUSH
46512: LD_INT 2
46514: PUSH
46515: LD_INT 0
46517: PUSH
46518: EMPTY
46519: LIST
46520: LIST
46521: PUSH
46522: LD_INT 2
46524: PUSH
46525: LD_INT 1
46527: PUSH
46528: EMPTY
46529: LIST
46530: LIST
46531: PUSH
46532: LD_INT 2
46534: PUSH
46535: LD_INT 2
46537: PUSH
46538: EMPTY
46539: LIST
46540: LIST
46541: PUSH
46542: LD_INT 1
46544: PUSH
46545: LD_INT 2
46547: PUSH
46548: EMPTY
46549: LIST
46550: LIST
46551: PUSH
46552: LD_INT 0
46554: PUSH
46555: LD_INT 2
46557: PUSH
46558: EMPTY
46559: LIST
46560: LIST
46561: PUSH
46562: LD_INT 1
46564: NEG
46565: PUSH
46566: LD_INT 1
46568: PUSH
46569: EMPTY
46570: LIST
46571: LIST
46572: PUSH
46573: LD_INT 2
46575: NEG
46576: PUSH
46577: LD_INT 0
46579: PUSH
46580: EMPTY
46581: LIST
46582: LIST
46583: PUSH
46584: LD_INT 2
46586: NEG
46587: PUSH
46588: LD_INT 1
46590: NEG
46591: PUSH
46592: EMPTY
46593: LIST
46594: LIST
46595: PUSH
46596: LD_INT 2
46598: NEG
46599: PUSH
46600: LD_INT 2
46602: NEG
46603: PUSH
46604: EMPTY
46605: LIST
46606: LIST
46607: PUSH
46608: EMPTY
46609: LIST
46610: LIST
46611: LIST
46612: LIST
46613: LIST
46614: LIST
46615: LIST
46616: LIST
46617: LIST
46618: LIST
46619: LIST
46620: LIST
46621: LIST
46622: LIST
46623: LIST
46624: LIST
46625: LIST
46626: LIST
46627: LIST
46628: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46629: LD_ADDR_VAR 0 57
46633: PUSH
46634: LD_INT 0
46636: PUSH
46637: LD_INT 0
46639: PUSH
46640: EMPTY
46641: LIST
46642: LIST
46643: PUSH
46644: LD_INT 0
46646: PUSH
46647: LD_INT 1
46649: NEG
46650: PUSH
46651: EMPTY
46652: LIST
46653: LIST
46654: PUSH
46655: LD_INT 1
46657: PUSH
46658: LD_INT 0
46660: PUSH
46661: EMPTY
46662: LIST
46663: LIST
46664: PUSH
46665: LD_INT 1
46667: PUSH
46668: LD_INT 1
46670: PUSH
46671: EMPTY
46672: LIST
46673: LIST
46674: PUSH
46675: LD_INT 0
46677: PUSH
46678: LD_INT 1
46680: PUSH
46681: EMPTY
46682: LIST
46683: LIST
46684: PUSH
46685: LD_INT 1
46687: NEG
46688: PUSH
46689: LD_INT 0
46691: PUSH
46692: EMPTY
46693: LIST
46694: LIST
46695: PUSH
46696: LD_INT 1
46698: NEG
46699: PUSH
46700: LD_INT 1
46702: NEG
46703: PUSH
46704: EMPTY
46705: LIST
46706: LIST
46707: PUSH
46708: LD_INT 1
46710: NEG
46711: PUSH
46712: LD_INT 2
46714: NEG
46715: PUSH
46716: EMPTY
46717: LIST
46718: LIST
46719: PUSH
46720: LD_INT 0
46722: PUSH
46723: LD_INT 2
46725: NEG
46726: PUSH
46727: EMPTY
46728: LIST
46729: LIST
46730: PUSH
46731: LD_INT 1
46733: PUSH
46734: LD_INT 1
46736: NEG
46737: PUSH
46738: EMPTY
46739: LIST
46740: LIST
46741: PUSH
46742: LD_INT 2
46744: PUSH
46745: LD_INT 0
46747: PUSH
46748: EMPTY
46749: LIST
46750: LIST
46751: PUSH
46752: LD_INT 2
46754: PUSH
46755: LD_INT 1
46757: PUSH
46758: EMPTY
46759: LIST
46760: LIST
46761: PUSH
46762: LD_INT 2
46764: PUSH
46765: LD_INT 2
46767: PUSH
46768: EMPTY
46769: LIST
46770: LIST
46771: PUSH
46772: LD_INT 1
46774: PUSH
46775: LD_INT 2
46777: PUSH
46778: EMPTY
46779: LIST
46780: LIST
46781: PUSH
46782: LD_INT 0
46784: PUSH
46785: LD_INT 2
46787: PUSH
46788: EMPTY
46789: LIST
46790: LIST
46791: PUSH
46792: LD_INT 1
46794: NEG
46795: PUSH
46796: LD_INT 1
46798: PUSH
46799: EMPTY
46800: LIST
46801: LIST
46802: PUSH
46803: LD_INT 2
46805: NEG
46806: PUSH
46807: LD_INT 0
46809: PUSH
46810: EMPTY
46811: LIST
46812: LIST
46813: PUSH
46814: LD_INT 2
46816: NEG
46817: PUSH
46818: LD_INT 1
46820: NEG
46821: PUSH
46822: EMPTY
46823: LIST
46824: LIST
46825: PUSH
46826: LD_INT 2
46828: NEG
46829: PUSH
46830: LD_INT 2
46832: NEG
46833: PUSH
46834: EMPTY
46835: LIST
46836: LIST
46837: PUSH
46838: EMPTY
46839: LIST
46840: LIST
46841: LIST
46842: LIST
46843: LIST
46844: LIST
46845: LIST
46846: LIST
46847: LIST
46848: LIST
46849: LIST
46850: LIST
46851: LIST
46852: LIST
46853: LIST
46854: LIST
46855: LIST
46856: LIST
46857: LIST
46858: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46859: LD_ADDR_VAR 0 58
46863: PUSH
46864: LD_INT 0
46866: PUSH
46867: LD_INT 0
46869: PUSH
46870: EMPTY
46871: LIST
46872: LIST
46873: PUSH
46874: LD_INT 0
46876: PUSH
46877: LD_INT 1
46879: NEG
46880: PUSH
46881: EMPTY
46882: LIST
46883: LIST
46884: PUSH
46885: LD_INT 1
46887: PUSH
46888: LD_INT 0
46890: PUSH
46891: EMPTY
46892: LIST
46893: LIST
46894: PUSH
46895: LD_INT 1
46897: PUSH
46898: LD_INT 1
46900: PUSH
46901: EMPTY
46902: LIST
46903: LIST
46904: PUSH
46905: LD_INT 0
46907: PUSH
46908: LD_INT 1
46910: PUSH
46911: EMPTY
46912: LIST
46913: LIST
46914: PUSH
46915: LD_INT 1
46917: NEG
46918: PUSH
46919: LD_INT 0
46921: PUSH
46922: EMPTY
46923: LIST
46924: LIST
46925: PUSH
46926: LD_INT 1
46928: NEG
46929: PUSH
46930: LD_INT 1
46932: NEG
46933: PUSH
46934: EMPTY
46935: LIST
46936: LIST
46937: PUSH
46938: LD_INT 1
46940: NEG
46941: PUSH
46942: LD_INT 2
46944: NEG
46945: PUSH
46946: EMPTY
46947: LIST
46948: LIST
46949: PUSH
46950: LD_INT 0
46952: PUSH
46953: LD_INT 2
46955: NEG
46956: PUSH
46957: EMPTY
46958: LIST
46959: LIST
46960: PUSH
46961: LD_INT 1
46963: PUSH
46964: LD_INT 1
46966: NEG
46967: PUSH
46968: EMPTY
46969: LIST
46970: LIST
46971: PUSH
46972: LD_INT 2
46974: PUSH
46975: LD_INT 0
46977: PUSH
46978: EMPTY
46979: LIST
46980: LIST
46981: PUSH
46982: LD_INT 2
46984: PUSH
46985: LD_INT 1
46987: PUSH
46988: EMPTY
46989: LIST
46990: LIST
46991: PUSH
46992: LD_INT 2
46994: PUSH
46995: LD_INT 2
46997: PUSH
46998: EMPTY
46999: LIST
47000: LIST
47001: PUSH
47002: LD_INT 1
47004: PUSH
47005: LD_INT 2
47007: PUSH
47008: EMPTY
47009: LIST
47010: LIST
47011: PUSH
47012: LD_INT 0
47014: PUSH
47015: LD_INT 2
47017: PUSH
47018: EMPTY
47019: LIST
47020: LIST
47021: PUSH
47022: LD_INT 1
47024: NEG
47025: PUSH
47026: LD_INT 1
47028: PUSH
47029: EMPTY
47030: LIST
47031: LIST
47032: PUSH
47033: LD_INT 2
47035: NEG
47036: PUSH
47037: LD_INT 0
47039: PUSH
47040: EMPTY
47041: LIST
47042: LIST
47043: PUSH
47044: LD_INT 2
47046: NEG
47047: PUSH
47048: LD_INT 1
47050: NEG
47051: PUSH
47052: EMPTY
47053: LIST
47054: LIST
47055: PUSH
47056: LD_INT 2
47058: NEG
47059: PUSH
47060: LD_INT 2
47062: NEG
47063: PUSH
47064: EMPTY
47065: LIST
47066: LIST
47067: PUSH
47068: EMPTY
47069: LIST
47070: LIST
47071: LIST
47072: LIST
47073: LIST
47074: LIST
47075: LIST
47076: LIST
47077: LIST
47078: LIST
47079: LIST
47080: LIST
47081: LIST
47082: LIST
47083: LIST
47084: LIST
47085: LIST
47086: LIST
47087: LIST
47088: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
47089: LD_ADDR_VAR 0 59
47093: PUSH
47094: LD_INT 0
47096: PUSH
47097: LD_INT 0
47099: PUSH
47100: EMPTY
47101: LIST
47102: LIST
47103: PUSH
47104: LD_INT 0
47106: PUSH
47107: LD_INT 1
47109: NEG
47110: PUSH
47111: EMPTY
47112: LIST
47113: LIST
47114: PUSH
47115: LD_INT 1
47117: PUSH
47118: LD_INT 0
47120: PUSH
47121: EMPTY
47122: LIST
47123: LIST
47124: PUSH
47125: LD_INT 1
47127: PUSH
47128: LD_INT 1
47130: PUSH
47131: EMPTY
47132: LIST
47133: LIST
47134: PUSH
47135: LD_INT 0
47137: PUSH
47138: LD_INT 1
47140: PUSH
47141: EMPTY
47142: LIST
47143: LIST
47144: PUSH
47145: LD_INT 1
47147: NEG
47148: PUSH
47149: LD_INT 0
47151: PUSH
47152: EMPTY
47153: LIST
47154: LIST
47155: PUSH
47156: LD_INT 1
47158: NEG
47159: PUSH
47160: LD_INT 1
47162: NEG
47163: PUSH
47164: EMPTY
47165: LIST
47166: LIST
47167: PUSH
47168: EMPTY
47169: LIST
47170: LIST
47171: LIST
47172: LIST
47173: LIST
47174: LIST
47175: LIST
47176: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
47177: LD_ADDR_VAR 0 60
47181: PUSH
47182: LD_INT 0
47184: PUSH
47185: LD_INT 0
47187: PUSH
47188: EMPTY
47189: LIST
47190: LIST
47191: PUSH
47192: LD_INT 0
47194: PUSH
47195: LD_INT 1
47197: NEG
47198: PUSH
47199: EMPTY
47200: LIST
47201: LIST
47202: PUSH
47203: LD_INT 1
47205: PUSH
47206: LD_INT 0
47208: PUSH
47209: EMPTY
47210: LIST
47211: LIST
47212: PUSH
47213: LD_INT 1
47215: PUSH
47216: LD_INT 1
47218: PUSH
47219: EMPTY
47220: LIST
47221: LIST
47222: PUSH
47223: LD_INT 0
47225: PUSH
47226: LD_INT 1
47228: PUSH
47229: EMPTY
47230: LIST
47231: LIST
47232: PUSH
47233: LD_INT 1
47235: NEG
47236: PUSH
47237: LD_INT 0
47239: PUSH
47240: EMPTY
47241: LIST
47242: LIST
47243: PUSH
47244: LD_INT 1
47246: NEG
47247: PUSH
47248: LD_INT 1
47250: NEG
47251: PUSH
47252: EMPTY
47253: LIST
47254: LIST
47255: PUSH
47256: EMPTY
47257: LIST
47258: LIST
47259: LIST
47260: LIST
47261: LIST
47262: LIST
47263: LIST
47264: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
47265: LD_ADDR_VAR 0 61
47269: PUSH
47270: LD_INT 0
47272: PUSH
47273: LD_INT 0
47275: PUSH
47276: EMPTY
47277: LIST
47278: LIST
47279: PUSH
47280: LD_INT 0
47282: PUSH
47283: LD_INT 1
47285: NEG
47286: PUSH
47287: EMPTY
47288: LIST
47289: LIST
47290: PUSH
47291: LD_INT 1
47293: PUSH
47294: LD_INT 0
47296: PUSH
47297: EMPTY
47298: LIST
47299: LIST
47300: PUSH
47301: LD_INT 1
47303: PUSH
47304: LD_INT 1
47306: PUSH
47307: EMPTY
47308: LIST
47309: LIST
47310: PUSH
47311: LD_INT 0
47313: PUSH
47314: LD_INT 1
47316: PUSH
47317: EMPTY
47318: LIST
47319: LIST
47320: PUSH
47321: LD_INT 1
47323: NEG
47324: PUSH
47325: LD_INT 0
47327: PUSH
47328: EMPTY
47329: LIST
47330: LIST
47331: PUSH
47332: LD_INT 1
47334: NEG
47335: PUSH
47336: LD_INT 1
47338: NEG
47339: PUSH
47340: EMPTY
47341: LIST
47342: LIST
47343: PUSH
47344: EMPTY
47345: LIST
47346: LIST
47347: LIST
47348: LIST
47349: LIST
47350: LIST
47351: LIST
47352: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
47353: LD_ADDR_VAR 0 62
47357: PUSH
47358: LD_INT 0
47360: PUSH
47361: LD_INT 0
47363: PUSH
47364: EMPTY
47365: LIST
47366: LIST
47367: PUSH
47368: LD_INT 0
47370: PUSH
47371: LD_INT 1
47373: NEG
47374: PUSH
47375: EMPTY
47376: LIST
47377: LIST
47378: PUSH
47379: LD_INT 1
47381: PUSH
47382: LD_INT 0
47384: PUSH
47385: EMPTY
47386: LIST
47387: LIST
47388: PUSH
47389: LD_INT 1
47391: PUSH
47392: LD_INT 1
47394: PUSH
47395: EMPTY
47396: LIST
47397: LIST
47398: PUSH
47399: LD_INT 0
47401: PUSH
47402: LD_INT 1
47404: PUSH
47405: EMPTY
47406: LIST
47407: LIST
47408: PUSH
47409: LD_INT 1
47411: NEG
47412: PUSH
47413: LD_INT 0
47415: PUSH
47416: EMPTY
47417: LIST
47418: LIST
47419: PUSH
47420: LD_INT 1
47422: NEG
47423: PUSH
47424: LD_INT 1
47426: NEG
47427: PUSH
47428: EMPTY
47429: LIST
47430: LIST
47431: PUSH
47432: EMPTY
47433: LIST
47434: LIST
47435: LIST
47436: LIST
47437: LIST
47438: LIST
47439: LIST
47440: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
47441: LD_ADDR_VAR 0 63
47445: PUSH
47446: LD_INT 0
47448: PUSH
47449: LD_INT 0
47451: PUSH
47452: EMPTY
47453: LIST
47454: LIST
47455: PUSH
47456: LD_INT 0
47458: PUSH
47459: LD_INT 1
47461: NEG
47462: PUSH
47463: EMPTY
47464: LIST
47465: LIST
47466: PUSH
47467: LD_INT 1
47469: PUSH
47470: LD_INT 0
47472: PUSH
47473: EMPTY
47474: LIST
47475: LIST
47476: PUSH
47477: LD_INT 1
47479: PUSH
47480: LD_INT 1
47482: PUSH
47483: EMPTY
47484: LIST
47485: LIST
47486: PUSH
47487: LD_INT 0
47489: PUSH
47490: LD_INT 1
47492: PUSH
47493: EMPTY
47494: LIST
47495: LIST
47496: PUSH
47497: LD_INT 1
47499: NEG
47500: PUSH
47501: LD_INT 0
47503: PUSH
47504: EMPTY
47505: LIST
47506: LIST
47507: PUSH
47508: LD_INT 1
47510: NEG
47511: PUSH
47512: LD_INT 1
47514: NEG
47515: PUSH
47516: EMPTY
47517: LIST
47518: LIST
47519: PUSH
47520: EMPTY
47521: LIST
47522: LIST
47523: LIST
47524: LIST
47525: LIST
47526: LIST
47527: LIST
47528: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
47529: LD_ADDR_VAR 0 64
47533: PUSH
47534: LD_INT 0
47536: PUSH
47537: LD_INT 0
47539: PUSH
47540: EMPTY
47541: LIST
47542: LIST
47543: PUSH
47544: LD_INT 0
47546: PUSH
47547: LD_INT 1
47549: NEG
47550: PUSH
47551: EMPTY
47552: LIST
47553: LIST
47554: PUSH
47555: LD_INT 1
47557: PUSH
47558: LD_INT 0
47560: PUSH
47561: EMPTY
47562: LIST
47563: LIST
47564: PUSH
47565: LD_INT 1
47567: PUSH
47568: LD_INT 1
47570: PUSH
47571: EMPTY
47572: LIST
47573: LIST
47574: PUSH
47575: LD_INT 0
47577: PUSH
47578: LD_INT 1
47580: PUSH
47581: EMPTY
47582: LIST
47583: LIST
47584: PUSH
47585: LD_INT 1
47587: NEG
47588: PUSH
47589: LD_INT 0
47591: PUSH
47592: EMPTY
47593: LIST
47594: LIST
47595: PUSH
47596: LD_INT 1
47598: NEG
47599: PUSH
47600: LD_INT 1
47602: NEG
47603: PUSH
47604: EMPTY
47605: LIST
47606: LIST
47607: PUSH
47608: EMPTY
47609: LIST
47610: LIST
47611: LIST
47612: LIST
47613: LIST
47614: LIST
47615: LIST
47616: ST_TO_ADDR
// end ; 1 :
47617: GO 53514
47619: LD_INT 1
47621: DOUBLE
47622: EQUAL
47623: IFTRUE 47627
47625: GO 50250
47627: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
47628: LD_ADDR_VAR 0 11
47632: PUSH
47633: LD_INT 1
47635: NEG
47636: PUSH
47637: LD_INT 3
47639: NEG
47640: PUSH
47641: EMPTY
47642: LIST
47643: LIST
47644: PUSH
47645: LD_INT 0
47647: PUSH
47648: LD_INT 3
47650: NEG
47651: PUSH
47652: EMPTY
47653: LIST
47654: LIST
47655: PUSH
47656: LD_INT 1
47658: PUSH
47659: LD_INT 2
47661: NEG
47662: PUSH
47663: EMPTY
47664: LIST
47665: LIST
47666: PUSH
47667: EMPTY
47668: LIST
47669: LIST
47670: LIST
47671: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
47672: LD_ADDR_VAR 0 12
47676: PUSH
47677: LD_INT 2
47679: PUSH
47680: LD_INT 1
47682: NEG
47683: PUSH
47684: EMPTY
47685: LIST
47686: LIST
47687: PUSH
47688: LD_INT 3
47690: PUSH
47691: LD_INT 0
47693: PUSH
47694: EMPTY
47695: LIST
47696: LIST
47697: PUSH
47698: LD_INT 3
47700: PUSH
47701: LD_INT 1
47703: PUSH
47704: EMPTY
47705: LIST
47706: LIST
47707: PUSH
47708: EMPTY
47709: LIST
47710: LIST
47711: LIST
47712: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
47713: LD_ADDR_VAR 0 13
47717: PUSH
47718: LD_INT 3
47720: PUSH
47721: LD_INT 2
47723: PUSH
47724: EMPTY
47725: LIST
47726: LIST
47727: PUSH
47728: LD_INT 3
47730: PUSH
47731: LD_INT 3
47733: PUSH
47734: EMPTY
47735: LIST
47736: LIST
47737: PUSH
47738: LD_INT 2
47740: PUSH
47741: LD_INT 3
47743: PUSH
47744: EMPTY
47745: LIST
47746: LIST
47747: PUSH
47748: EMPTY
47749: LIST
47750: LIST
47751: LIST
47752: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
47753: LD_ADDR_VAR 0 14
47757: PUSH
47758: LD_INT 1
47760: PUSH
47761: LD_INT 3
47763: PUSH
47764: EMPTY
47765: LIST
47766: LIST
47767: PUSH
47768: LD_INT 0
47770: PUSH
47771: LD_INT 3
47773: PUSH
47774: EMPTY
47775: LIST
47776: LIST
47777: PUSH
47778: LD_INT 1
47780: NEG
47781: PUSH
47782: LD_INT 2
47784: PUSH
47785: EMPTY
47786: LIST
47787: LIST
47788: PUSH
47789: EMPTY
47790: LIST
47791: LIST
47792: LIST
47793: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
47794: LD_ADDR_VAR 0 15
47798: PUSH
47799: LD_INT 2
47801: NEG
47802: PUSH
47803: LD_INT 1
47805: PUSH
47806: EMPTY
47807: LIST
47808: LIST
47809: PUSH
47810: LD_INT 3
47812: NEG
47813: PUSH
47814: LD_INT 0
47816: PUSH
47817: EMPTY
47818: LIST
47819: LIST
47820: PUSH
47821: LD_INT 3
47823: NEG
47824: PUSH
47825: LD_INT 1
47827: NEG
47828: PUSH
47829: EMPTY
47830: LIST
47831: LIST
47832: PUSH
47833: EMPTY
47834: LIST
47835: LIST
47836: LIST
47837: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47838: LD_ADDR_VAR 0 16
47842: PUSH
47843: LD_INT 2
47845: NEG
47846: PUSH
47847: LD_INT 3
47849: NEG
47850: PUSH
47851: EMPTY
47852: LIST
47853: LIST
47854: PUSH
47855: LD_INT 3
47857: NEG
47858: PUSH
47859: LD_INT 2
47861: NEG
47862: PUSH
47863: EMPTY
47864: LIST
47865: LIST
47866: PUSH
47867: LD_INT 3
47869: NEG
47870: PUSH
47871: LD_INT 3
47873: NEG
47874: PUSH
47875: EMPTY
47876: LIST
47877: LIST
47878: PUSH
47879: EMPTY
47880: LIST
47881: LIST
47882: LIST
47883: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
47884: LD_ADDR_VAR 0 17
47888: PUSH
47889: LD_INT 1
47891: NEG
47892: PUSH
47893: LD_INT 3
47895: NEG
47896: PUSH
47897: EMPTY
47898: LIST
47899: LIST
47900: PUSH
47901: LD_INT 0
47903: PUSH
47904: LD_INT 3
47906: NEG
47907: PUSH
47908: EMPTY
47909: LIST
47910: LIST
47911: PUSH
47912: LD_INT 1
47914: PUSH
47915: LD_INT 2
47917: NEG
47918: PUSH
47919: EMPTY
47920: LIST
47921: LIST
47922: PUSH
47923: EMPTY
47924: LIST
47925: LIST
47926: LIST
47927: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
47928: LD_ADDR_VAR 0 18
47932: PUSH
47933: LD_INT 2
47935: PUSH
47936: LD_INT 1
47938: NEG
47939: PUSH
47940: EMPTY
47941: LIST
47942: LIST
47943: PUSH
47944: LD_INT 3
47946: PUSH
47947: LD_INT 0
47949: PUSH
47950: EMPTY
47951: LIST
47952: LIST
47953: PUSH
47954: LD_INT 3
47956: PUSH
47957: LD_INT 1
47959: PUSH
47960: EMPTY
47961: LIST
47962: LIST
47963: PUSH
47964: EMPTY
47965: LIST
47966: LIST
47967: LIST
47968: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
47969: LD_ADDR_VAR 0 19
47973: PUSH
47974: LD_INT 3
47976: PUSH
47977: LD_INT 2
47979: PUSH
47980: EMPTY
47981: LIST
47982: LIST
47983: PUSH
47984: LD_INT 3
47986: PUSH
47987: LD_INT 3
47989: PUSH
47990: EMPTY
47991: LIST
47992: LIST
47993: PUSH
47994: LD_INT 2
47996: PUSH
47997: LD_INT 3
47999: PUSH
48000: EMPTY
48001: LIST
48002: LIST
48003: PUSH
48004: EMPTY
48005: LIST
48006: LIST
48007: LIST
48008: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
48009: LD_ADDR_VAR 0 20
48013: PUSH
48014: LD_INT 1
48016: PUSH
48017: LD_INT 3
48019: PUSH
48020: EMPTY
48021: LIST
48022: LIST
48023: PUSH
48024: LD_INT 0
48026: PUSH
48027: LD_INT 3
48029: PUSH
48030: EMPTY
48031: LIST
48032: LIST
48033: PUSH
48034: LD_INT 1
48036: NEG
48037: PUSH
48038: LD_INT 2
48040: PUSH
48041: EMPTY
48042: LIST
48043: LIST
48044: PUSH
48045: EMPTY
48046: LIST
48047: LIST
48048: LIST
48049: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
48050: LD_ADDR_VAR 0 21
48054: PUSH
48055: LD_INT 2
48057: NEG
48058: PUSH
48059: LD_INT 1
48061: PUSH
48062: EMPTY
48063: LIST
48064: LIST
48065: PUSH
48066: LD_INT 3
48068: NEG
48069: PUSH
48070: LD_INT 0
48072: PUSH
48073: EMPTY
48074: LIST
48075: LIST
48076: PUSH
48077: LD_INT 3
48079: NEG
48080: PUSH
48081: LD_INT 1
48083: NEG
48084: PUSH
48085: EMPTY
48086: LIST
48087: LIST
48088: PUSH
48089: EMPTY
48090: LIST
48091: LIST
48092: LIST
48093: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48094: LD_ADDR_VAR 0 22
48098: PUSH
48099: LD_INT 2
48101: NEG
48102: PUSH
48103: LD_INT 3
48105: NEG
48106: PUSH
48107: EMPTY
48108: LIST
48109: LIST
48110: PUSH
48111: LD_INT 3
48113: NEG
48114: PUSH
48115: LD_INT 2
48117: NEG
48118: PUSH
48119: EMPTY
48120: LIST
48121: LIST
48122: PUSH
48123: LD_INT 3
48125: NEG
48126: PUSH
48127: LD_INT 3
48129: NEG
48130: PUSH
48131: EMPTY
48132: LIST
48133: LIST
48134: PUSH
48135: EMPTY
48136: LIST
48137: LIST
48138: LIST
48139: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
48140: LD_ADDR_VAR 0 23
48144: PUSH
48145: LD_INT 0
48147: PUSH
48148: LD_INT 3
48150: NEG
48151: PUSH
48152: EMPTY
48153: LIST
48154: LIST
48155: PUSH
48156: LD_INT 1
48158: NEG
48159: PUSH
48160: LD_INT 4
48162: NEG
48163: PUSH
48164: EMPTY
48165: LIST
48166: LIST
48167: PUSH
48168: LD_INT 1
48170: PUSH
48171: LD_INT 3
48173: NEG
48174: PUSH
48175: EMPTY
48176: LIST
48177: LIST
48178: PUSH
48179: EMPTY
48180: LIST
48181: LIST
48182: LIST
48183: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
48184: LD_ADDR_VAR 0 24
48188: PUSH
48189: LD_INT 3
48191: PUSH
48192: LD_INT 0
48194: PUSH
48195: EMPTY
48196: LIST
48197: LIST
48198: PUSH
48199: LD_INT 3
48201: PUSH
48202: LD_INT 1
48204: NEG
48205: PUSH
48206: EMPTY
48207: LIST
48208: LIST
48209: PUSH
48210: LD_INT 4
48212: PUSH
48213: LD_INT 1
48215: PUSH
48216: EMPTY
48217: LIST
48218: LIST
48219: PUSH
48220: EMPTY
48221: LIST
48222: LIST
48223: LIST
48224: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
48225: LD_ADDR_VAR 0 25
48229: PUSH
48230: LD_INT 3
48232: PUSH
48233: LD_INT 3
48235: PUSH
48236: EMPTY
48237: LIST
48238: LIST
48239: PUSH
48240: LD_INT 4
48242: PUSH
48243: LD_INT 3
48245: PUSH
48246: EMPTY
48247: LIST
48248: LIST
48249: PUSH
48250: LD_INT 3
48252: PUSH
48253: LD_INT 4
48255: PUSH
48256: EMPTY
48257: LIST
48258: LIST
48259: PUSH
48260: EMPTY
48261: LIST
48262: LIST
48263: LIST
48264: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
48265: LD_ADDR_VAR 0 26
48269: PUSH
48270: LD_INT 0
48272: PUSH
48273: LD_INT 3
48275: PUSH
48276: EMPTY
48277: LIST
48278: LIST
48279: PUSH
48280: LD_INT 1
48282: PUSH
48283: LD_INT 4
48285: PUSH
48286: EMPTY
48287: LIST
48288: LIST
48289: PUSH
48290: LD_INT 1
48292: NEG
48293: PUSH
48294: LD_INT 3
48296: PUSH
48297: EMPTY
48298: LIST
48299: LIST
48300: PUSH
48301: EMPTY
48302: LIST
48303: LIST
48304: LIST
48305: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
48306: LD_ADDR_VAR 0 27
48310: PUSH
48311: LD_INT 3
48313: NEG
48314: PUSH
48315: LD_INT 0
48317: PUSH
48318: EMPTY
48319: LIST
48320: LIST
48321: PUSH
48322: LD_INT 3
48324: NEG
48325: PUSH
48326: LD_INT 1
48328: PUSH
48329: EMPTY
48330: LIST
48331: LIST
48332: PUSH
48333: LD_INT 4
48335: NEG
48336: PUSH
48337: LD_INT 1
48339: NEG
48340: PUSH
48341: EMPTY
48342: LIST
48343: LIST
48344: PUSH
48345: EMPTY
48346: LIST
48347: LIST
48348: LIST
48349: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
48350: LD_ADDR_VAR 0 28
48354: PUSH
48355: LD_INT 3
48357: NEG
48358: PUSH
48359: LD_INT 3
48361: NEG
48362: PUSH
48363: EMPTY
48364: LIST
48365: LIST
48366: PUSH
48367: LD_INT 3
48369: NEG
48370: PUSH
48371: LD_INT 4
48373: NEG
48374: PUSH
48375: EMPTY
48376: LIST
48377: LIST
48378: PUSH
48379: LD_INT 4
48381: NEG
48382: PUSH
48383: LD_INT 3
48385: NEG
48386: PUSH
48387: EMPTY
48388: LIST
48389: LIST
48390: PUSH
48391: EMPTY
48392: LIST
48393: LIST
48394: LIST
48395: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
48396: LD_ADDR_VAR 0 29
48400: PUSH
48401: LD_INT 1
48403: NEG
48404: PUSH
48405: LD_INT 3
48407: NEG
48408: PUSH
48409: EMPTY
48410: LIST
48411: LIST
48412: PUSH
48413: LD_INT 0
48415: PUSH
48416: LD_INT 3
48418: NEG
48419: PUSH
48420: EMPTY
48421: LIST
48422: LIST
48423: PUSH
48424: LD_INT 1
48426: PUSH
48427: LD_INT 2
48429: NEG
48430: PUSH
48431: EMPTY
48432: LIST
48433: LIST
48434: PUSH
48435: LD_INT 1
48437: NEG
48438: PUSH
48439: LD_INT 4
48441: NEG
48442: PUSH
48443: EMPTY
48444: LIST
48445: LIST
48446: PUSH
48447: LD_INT 0
48449: PUSH
48450: LD_INT 4
48452: NEG
48453: PUSH
48454: EMPTY
48455: LIST
48456: LIST
48457: PUSH
48458: LD_INT 1
48460: PUSH
48461: LD_INT 3
48463: NEG
48464: PUSH
48465: EMPTY
48466: LIST
48467: LIST
48468: PUSH
48469: LD_INT 1
48471: NEG
48472: PUSH
48473: LD_INT 5
48475: NEG
48476: PUSH
48477: EMPTY
48478: LIST
48479: LIST
48480: PUSH
48481: LD_INT 0
48483: PUSH
48484: LD_INT 5
48486: NEG
48487: PUSH
48488: EMPTY
48489: LIST
48490: LIST
48491: PUSH
48492: LD_INT 1
48494: PUSH
48495: LD_INT 4
48497: NEG
48498: PUSH
48499: EMPTY
48500: LIST
48501: LIST
48502: PUSH
48503: LD_INT 1
48505: NEG
48506: PUSH
48507: LD_INT 6
48509: NEG
48510: PUSH
48511: EMPTY
48512: LIST
48513: LIST
48514: PUSH
48515: LD_INT 0
48517: PUSH
48518: LD_INT 6
48520: NEG
48521: PUSH
48522: EMPTY
48523: LIST
48524: LIST
48525: PUSH
48526: LD_INT 1
48528: PUSH
48529: LD_INT 5
48531: NEG
48532: PUSH
48533: EMPTY
48534: LIST
48535: LIST
48536: PUSH
48537: EMPTY
48538: LIST
48539: LIST
48540: LIST
48541: LIST
48542: LIST
48543: LIST
48544: LIST
48545: LIST
48546: LIST
48547: LIST
48548: LIST
48549: LIST
48550: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
48551: LD_ADDR_VAR 0 30
48555: PUSH
48556: LD_INT 2
48558: PUSH
48559: LD_INT 1
48561: NEG
48562: PUSH
48563: EMPTY
48564: LIST
48565: LIST
48566: PUSH
48567: LD_INT 3
48569: PUSH
48570: LD_INT 0
48572: PUSH
48573: EMPTY
48574: LIST
48575: LIST
48576: PUSH
48577: LD_INT 3
48579: PUSH
48580: LD_INT 1
48582: PUSH
48583: EMPTY
48584: LIST
48585: LIST
48586: PUSH
48587: LD_INT 3
48589: PUSH
48590: LD_INT 1
48592: NEG
48593: PUSH
48594: EMPTY
48595: LIST
48596: LIST
48597: PUSH
48598: LD_INT 4
48600: PUSH
48601: LD_INT 0
48603: PUSH
48604: EMPTY
48605: LIST
48606: LIST
48607: PUSH
48608: LD_INT 4
48610: PUSH
48611: LD_INT 1
48613: PUSH
48614: EMPTY
48615: LIST
48616: LIST
48617: PUSH
48618: LD_INT 4
48620: PUSH
48621: LD_INT 1
48623: NEG
48624: PUSH
48625: EMPTY
48626: LIST
48627: LIST
48628: PUSH
48629: LD_INT 5
48631: PUSH
48632: LD_INT 0
48634: PUSH
48635: EMPTY
48636: LIST
48637: LIST
48638: PUSH
48639: LD_INT 5
48641: PUSH
48642: LD_INT 1
48644: PUSH
48645: EMPTY
48646: LIST
48647: LIST
48648: PUSH
48649: LD_INT 5
48651: PUSH
48652: LD_INT 1
48654: NEG
48655: PUSH
48656: EMPTY
48657: LIST
48658: LIST
48659: PUSH
48660: LD_INT 6
48662: PUSH
48663: LD_INT 0
48665: PUSH
48666: EMPTY
48667: LIST
48668: LIST
48669: PUSH
48670: LD_INT 6
48672: PUSH
48673: LD_INT 1
48675: PUSH
48676: EMPTY
48677: LIST
48678: LIST
48679: PUSH
48680: EMPTY
48681: LIST
48682: LIST
48683: LIST
48684: LIST
48685: LIST
48686: LIST
48687: LIST
48688: LIST
48689: LIST
48690: LIST
48691: LIST
48692: LIST
48693: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
48694: LD_ADDR_VAR 0 31
48698: PUSH
48699: LD_INT 3
48701: PUSH
48702: LD_INT 2
48704: PUSH
48705: EMPTY
48706: LIST
48707: LIST
48708: PUSH
48709: LD_INT 3
48711: PUSH
48712: LD_INT 3
48714: PUSH
48715: EMPTY
48716: LIST
48717: LIST
48718: PUSH
48719: LD_INT 2
48721: PUSH
48722: LD_INT 3
48724: PUSH
48725: EMPTY
48726: LIST
48727: LIST
48728: PUSH
48729: LD_INT 4
48731: PUSH
48732: LD_INT 3
48734: PUSH
48735: EMPTY
48736: LIST
48737: LIST
48738: PUSH
48739: LD_INT 4
48741: PUSH
48742: LD_INT 4
48744: PUSH
48745: EMPTY
48746: LIST
48747: LIST
48748: PUSH
48749: LD_INT 3
48751: PUSH
48752: LD_INT 4
48754: PUSH
48755: EMPTY
48756: LIST
48757: LIST
48758: PUSH
48759: LD_INT 5
48761: PUSH
48762: LD_INT 4
48764: PUSH
48765: EMPTY
48766: LIST
48767: LIST
48768: PUSH
48769: LD_INT 5
48771: PUSH
48772: LD_INT 5
48774: PUSH
48775: EMPTY
48776: LIST
48777: LIST
48778: PUSH
48779: LD_INT 4
48781: PUSH
48782: LD_INT 5
48784: PUSH
48785: EMPTY
48786: LIST
48787: LIST
48788: PUSH
48789: LD_INT 6
48791: PUSH
48792: LD_INT 5
48794: PUSH
48795: EMPTY
48796: LIST
48797: LIST
48798: PUSH
48799: LD_INT 6
48801: PUSH
48802: LD_INT 6
48804: PUSH
48805: EMPTY
48806: LIST
48807: LIST
48808: PUSH
48809: LD_INT 5
48811: PUSH
48812: LD_INT 6
48814: PUSH
48815: EMPTY
48816: LIST
48817: LIST
48818: PUSH
48819: EMPTY
48820: LIST
48821: LIST
48822: LIST
48823: LIST
48824: LIST
48825: LIST
48826: LIST
48827: LIST
48828: LIST
48829: LIST
48830: LIST
48831: LIST
48832: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
48833: LD_ADDR_VAR 0 32
48837: PUSH
48838: LD_INT 1
48840: PUSH
48841: LD_INT 3
48843: PUSH
48844: EMPTY
48845: LIST
48846: LIST
48847: PUSH
48848: LD_INT 0
48850: PUSH
48851: LD_INT 3
48853: PUSH
48854: EMPTY
48855: LIST
48856: LIST
48857: PUSH
48858: LD_INT 1
48860: NEG
48861: PUSH
48862: LD_INT 2
48864: PUSH
48865: EMPTY
48866: LIST
48867: LIST
48868: PUSH
48869: LD_INT 1
48871: PUSH
48872: LD_INT 4
48874: PUSH
48875: EMPTY
48876: LIST
48877: LIST
48878: PUSH
48879: LD_INT 0
48881: PUSH
48882: LD_INT 4
48884: PUSH
48885: EMPTY
48886: LIST
48887: LIST
48888: PUSH
48889: LD_INT 1
48891: NEG
48892: PUSH
48893: LD_INT 3
48895: PUSH
48896: EMPTY
48897: LIST
48898: LIST
48899: PUSH
48900: LD_INT 1
48902: PUSH
48903: LD_INT 5
48905: PUSH
48906: EMPTY
48907: LIST
48908: LIST
48909: PUSH
48910: LD_INT 0
48912: PUSH
48913: LD_INT 5
48915: PUSH
48916: EMPTY
48917: LIST
48918: LIST
48919: PUSH
48920: LD_INT 1
48922: NEG
48923: PUSH
48924: LD_INT 4
48926: PUSH
48927: EMPTY
48928: LIST
48929: LIST
48930: PUSH
48931: LD_INT 1
48933: PUSH
48934: LD_INT 6
48936: PUSH
48937: EMPTY
48938: LIST
48939: LIST
48940: PUSH
48941: LD_INT 0
48943: PUSH
48944: LD_INT 6
48946: PUSH
48947: EMPTY
48948: LIST
48949: LIST
48950: PUSH
48951: LD_INT 1
48953: NEG
48954: PUSH
48955: LD_INT 5
48957: PUSH
48958: EMPTY
48959: LIST
48960: LIST
48961: PUSH
48962: EMPTY
48963: LIST
48964: LIST
48965: LIST
48966: LIST
48967: LIST
48968: LIST
48969: LIST
48970: LIST
48971: LIST
48972: LIST
48973: LIST
48974: LIST
48975: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
48976: LD_ADDR_VAR 0 33
48980: PUSH
48981: LD_INT 2
48983: NEG
48984: PUSH
48985: LD_INT 1
48987: PUSH
48988: EMPTY
48989: LIST
48990: LIST
48991: PUSH
48992: LD_INT 3
48994: NEG
48995: PUSH
48996: LD_INT 0
48998: PUSH
48999: EMPTY
49000: LIST
49001: LIST
49002: PUSH
49003: LD_INT 3
49005: NEG
49006: PUSH
49007: LD_INT 1
49009: NEG
49010: PUSH
49011: EMPTY
49012: LIST
49013: LIST
49014: PUSH
49015: LD_INT 3
49017: NEG
49018: PUSH
49019: LD_INT 1
49021: PUSH
49022: EMPTY
49023: LIST
49024: LIST
49025: PUSH
49026: LD_INT 4
49028: NEG
49029: PUSH
49030: LD_INT 0
49032: PUSH
49033: EMPTY
49034: LIST
49035: LIST
49036: PUSH
49037: LD_INT 4
49039: NEG
49040: PUSH
49041: LD_INT 1
49043: NEG
49044: PUSH
49045: EMPTY
49046: LIST
49047: LIST
49048: PUSH
49049: LD_INT 4
49051: NEG
49052: PUSH
49053: LD_INT 1
49055: PUSH
49056: EMPTY
49057: LIST
49058: LIST
49059: PUSH
49060: LD_INT 5
49062: NEG
49063: PUSH
49064: LD_INT 0
49066: PUSH
49067: EMPTY
49068: LIST
49069: LIST
49070: PUSH
49071: LD_INT 5
49073: NEG
49074: PUSH
49075: LD_INT 1
49077: NEG
49078: PUSH
49079: EMPTY
49080: LIST
49081: LIST
49082: PUSH
49083: LD_INT 5
49085: NEG
49086: PUSH
49087: LD_INT 1
49089: PUSH
49090: EMPTY
49091: LIST
49092: LIST
49093: PUSH
49094: LD_INT 6
49096: NEG
49097: PUSH
49098: LD_INT 0
49100: PUSH
49101: EMPTY
49102: LIST
49103: LIST
49104: PUSH
49105: LD_INT 6
49107: NEG
49108: PUSH
49109: LD_INT 1
49111: NEG
49112: PUSH
49113: EMPTY
49114: LIST
49115: LIST
49116: PUSH
49117: EMPTY
49118: LIST
49119: LIST
49120: LIST
49121: LIST
49122: LIST
49123: LIST
49124: LIST
49125: LIST
49126: LIST
49127: LIST
49128: LIST
49129: LIST
49130: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
49131: LD_ADDR_VAR 0 34
49135: PUSH
49136: LD_INT 2
49138: NEG
49139: PUSH
49140: LD_INT 3
49142: NEG
49143: PUSH
49144: EMPTY
49145: LIST
49146: LIST
49147: PUSH
49148: LD_INT 3
49150: NEG
49151: PUSH
49152: LD_INT 2
49154: NEG
49155: PUSH
49156: EMPTY
49157: LIST
49158: LIST
49159: PUSH
49160: LD_INT 3
49162: NEG
49163: PUSH
49164: LD_INT 3
49166: NEG
49167: PUSH
49168: EMPTY
49169: LIST
49170: LIST
49171: PUSH
49172: LD_INT 3
49174: NEG
49175: PUSH
49176: LD_INT 4
49178: NEG
49179: PUSH
49180: EMPTY
49181: LIST
49182: LIST
49183: PUSH
49184: LD_INT 4
49186: NEG
49187: PUSH
49188: LD_INT 3
49190: NEG
49191: PUSH
49192: EMPTY
49193: LIST
49194: LIST
49195: PUSH
49196: LD_INT 4
49198: NEG
49199: PUSH
49200: LD_INT 4
49202: NEG
49203: PUSH
49204: EMPTY
49205: LIST
49206: LIST
49207: PUSH
49208: LD_INT 4
49210: NEG
49211: PUSH
49212: LD_INT 5
49214: NEG
49215: PUSH
49216: EMPTY
49217: LIST
49218: LIST
49219: PUSH
49220: LD_INT 5
49222: NEG
49223: PUSH
49224: LD_INT 4
49226: NEG
49227: PUSH
49228: EMPTY
49229: LIST
49230: LIST
49231: PUSH
49232: LD_INT 5
49234: NEG
49235: PUSH
49236: LD_INT 5
49238: NEG
49239: PUSH
49240: EMPTY
49241: LIST
49242: LIST
49243: PUSH
49244: LD_INT 5
49246: NEG
49247: PUSH
49248: LD_INT 6
49250: NEG
49251: PUSH
49252: EMPTY
49253: LIST
49254: LIST
49255: PUSH
49256: LD_INT 6
49258: NEG
49259: PUSH
49260: LD_INT 5
49262: NEG
49263: PUSH
49264: EMPTY
49265: LIST
49266: LIST
49267: PUSH
49268: LD_INT 6
49270: NEG
49271: PUSH
49272: LD_INT 6
49274: NEG
49275: PUSH
49276: EMPTY
49277: LIST
49278: LIST
49279: PUSH
49280: EMPTY
49281: LIST
49282: LIST
49283: LIST
49284: LIST
49285: LIST
49286: LIST
49287: LIST
49288: LIST
49289: LIST
49290: LIST
49291: LIST
49292: LIST
49293: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
49294: LD_ADDR_VAR 0 41
49298: PUSH
49299: LD_INT 0
49301: PUSH
49302: LD_INT 2
49304: NEG
49305: PUSH
49306: EMPTY
49307: LIST
49308: LIST
49309: PUSH
49310: LD_INT 1
49312: NEG
49313: PUSH
49314: LD_INT 3
49316: NEG
49317: PUSH
49318: EMPTY
49319: LIST
49320: LIST
49321: PUSH
49322: LD_INT 1
49324: PUSH
49325: LD_INT 2
49327: NEG
49328: PUSH
49329: EMPTY
49330: LIST
49331: LIST
49332: PUSH
49333: EMPTY
49334: LIST
49335: LIST
49336: LIST
49337: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
49338: LD_ADDR_VAR 0 42
49342: PUSH
49343: LD_INT 2
49345: PUSH
49346: LD_INT 0
49348: PUSH
49349: EMPTY
49350: LIST
49351: LIST
49352: PUSH
49353: LD_INT 2
49355: PUSH
49356: LD_INT 1
49358: NEG
49359: PUSH
49360: EMPTY
49361: LIST
49362: LIST
49363: PUSH
49364: LD_INT 3
49366: PUSH
49367: LD_INT 1
49369: PUSH
49370: EMPTY
49371: LIST
49372: LIST
49373: PUSH
49374: EMPTY
49375: LIST
49376: LIST
49377: LIST
49378: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
49379: LD_ADDR_VAR 0 43
49383: PUSH
49384: LD_INT 2
49386: PUSH
49387: LD_INT 2
49389: PUSH
49390: EMPTY
49391: LIST
49392: LIST
49393: PUSH
49394: LD_INT 3
49396: PUSH
49397: LD_INT 2
49399: PUSH
49400: EMPTY
49401: LIST
49402: LIST
49403: PUSH
49404: LD_INT 2
49406: PUSH
49407: LD_INT 3
49409: PUSH
49410: EMPTY
49411: LIST
49412: LIST
49413: PUSH
49414: EMPTY
49415: LIST
49416: LIST
49417: LIST
49418: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
49419: LD_ADDR_VAR 0 44
49423: PUSH
49424: LD_INT 0
49426: PUSH
49427: LD_INT 2
49429: PUSH
49430: EMPTY
49431: LIST
49432: LIST
49433: PUSH
49434: LD_INT 1
49436: PUSH
49437: LD_INT 3
49439: PUSH
49440: EMPTY
49441: LIST
49442: LIST
49443: PUSH
49444: LD_INT 1
49446: NEG
49447: PUSH
49448: LD_INT 2
49450: PUSH
49451: EMPTY
49452: LIST
49453: LIST
49454: PUSH
49455: EMPTY
49456: LIST
49457: LIST
49458: LIST
49459: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
49460: LD_ADDR_VAR 0 45
49464: PUSH
49465: LD_INT 2
49467: NEG
49468: PUSH
49469: LD_INT 0
49471: PUSH
49472: EMPTY
49473: LIST
49474: LIST
49475: PUSH
49476: LD_INT 2
49478: NEG
49479: PUSH
49480: LD_INT 1
49482: PUSH
49483: EMPTY
49484: LIST
49485: LIST
49486: PUSH
49487: LD_INT 3
49489: NEG
49490: PUSH
49491: LD_INT 1
49493: NEG
49494: PUSH
49495: EMPTY
49496: LIST
49497: LIST
49498: PUSH
49499: EMPTY
49500: LIST
49501: LIST
49502: LIST
49503: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
49504: LD_ADDR_VAR 0 46
49508: PUSH
49509: LD_INT 2
49511: NEG
49512: PUSH
49513: LD_INT 2
49515: NEG
49516: PUSH
49517: EMPTY
49518: LIST
49519: LIST
49520: PUSH
49521: LD_INT 2
49523: NEG
49524: PUSH
49525: LD_INT 3
49527: NEG
49528: PUSH
49529: EMPTY
49530: LIST
49531: LIST
49532: PUSH
49533: LD_INT 3
49535: NEG
49536: PUSH
49537: LD_INT 2
49539: NEG
49540: PUSH
49541: EMPTY
49542: LIST
49543: LIST
49544: PUSH
49545: EMPTY
49546: LIST
49547: LIST
49548: LIST
49549: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
49550: LD_ADDR_VAR 0 47
49554: PUSH
49555: LD_INT 2
49557: NEG
49558: PUSH
49559: LD_INT 3
49561: NEG
49562: PUSH
49563: EMPTY
49564: LIST
49565: LIST
49566: PUSH
49567: LD_INT 1
49569: NEG
49570: PUSH
49571: LD_INT 3
49573: NEG
49574: PUSH
49575: EMPTY
49576: LIST
49577: LIST
49578: PUSH
49579: EMPTY
49580: LIST
49581: LIST
49582: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
49583: LD_ADDR_VAR 0 48
49587: PUSH
49588: LD_INT 1
49590: PUSH
49591: LD_INT 2
49593: NEG
49594: PUSH
49595: EMPTY
49596: LIST
49597: LIST
49598: PUSH
49599: LD_INT 2
49601: PUSH
49602: LD_INT 1
49604: NEG
49605: PUSH
49606: EMPTY
49607: LIST
49608: LIST
49609: PUSH
49610: EMPTY
49611: LIST
49612: LIST
49613: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
49614: LD_ADDR_VAR 0 49
49618: PUSH
49619: LD_INT 3
49621: PUSH
49622: LD_INT 1
49624: PUSH
49625: EMPTY
49626: LIST
49627: LIST
49628: PUSH
49629: LD_INT 3
49631: PUSH
49632: LD_INT 2
49634: PUSH
49635: EMPTY
49636: LIST
49637: LIST
49638: PUSH
49639: EMPTY
49640: LIST
49641: LIST
49642: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
49643: LD_ADDR_VAR 0 50
49647: PUSH
49648: LD_INT 2
49650: PUSH
49651: LD_INT 3
49653: PUSH
49654: EMPTY
49655: LIST
49656: LIST
49657: PUSH
49658: LD_INT 1
49660: PUSH
49661: LD_INT 3
49663: PUSH
49664: EMPTY
49665: LIST
49666: LIST
49667: PUSH
49668: EMPTY
49669: LIST
49670: LIST
49671: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
49672: LD_ADDR_VAR 0 51
49676: PUSH
49677: LD_INT 1
49679: NEG
49680: PUSH
49681: LD_INT 2
49683: PUSH
49684: EMPTY
49685: LIST
49686: LIST
49687: PUSH
49688: LD_INT 2
49690: NEG
49691: PUSH
49692: LD_INT 1
49694: PUSH
49695: EMPTY
49696: LIST
49697: LIST
49698: PUSH
49699: EMPTY
49700: LIST
49701: LIST
49702: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
49703: LD_ADDR_VAR 0 52
49707: PUSH
49708: LD_INT 3
49710: NEG
49711: PUSH
49712: LD_INT 1
49714: NEG
49715: PUSH
49716: EMPTY
49717: LIST
49718: LIST
49719: PUSH
49720: LD_INT 3
49722: NEG
49723: PUSH
49724: LD_INT 2
49726: NEG
49727: PUSH
49728: EMPTY
49729: LIST
49730: LIST
49731: PUSH
49732: EMPTY
49733: LIST
49734: LIST
49735: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
49736: LD_ADDR_VAR 0 53
49740: PUSH
49741: LD_INT 1
49743: NEG
49744: PUSH
49745: LD_INT 3
49747: NEG
49748: PUSH
49749: EMPTY
49750: LIST
49751: LIST
49752: PUSH
49753: LD_INT 0
49755: PUSH
49756: LD_INT 3
49758: NEG
49759: PUSH
49760: EMPTY
49761: LIST
49762: LIST
49763: PUSH
49764: LD_INT 1
49766: PUSH
49767: LD_INT 2
49769: NEG
49770: PUSH
49771: EMPTY
49772: LIST
49773: LIST
49774: PUSH
49775: EMPTY
49776: LIST
49777: LIST
49778: LIST
49779: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
49780: LD_ADDR_VAR 0 54
49784: PUSH
49785: LD_INT 2
49787: PUSH
49788: LD_INT 1
49790: NEG
49791: PUSH
49792: EMPTY
49793: LIST
49794: LIST
49795: PUSH
49796: LD_INT 3
49798: PUSH
49799: LD_INT 0
49801: PUSH
49802: EMPTY
49803: LIST
49804: LIST
49805: PUSH
49806: LD_INT 3
49808: PUSH
49809: LD_INT 1
49811: PUSH
49812: EMPTY
49813: LIST
49814: LIST
49815: PUSH
49816: EMPTY
49817: LIST
49818: LIST
49819: LIST
49820: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
49821: LD_ADDR_VAR 0 55
49825: PUSH
49826: LD_INT 3
49828: PUSH
49829: LD_INT 2
49831: PUSH
49832: EMPTY
49833: LIST
49834: LIST
49835: PUSH
49836: LD_INT 3
49838: PUSH
49839: LD_INT 3
49841: PUSH
49842: EMPTY
49843: LIST
49844: LIST
49845: PUSH
49846: LD_INT 2
49848: PUSH
49849: LD_INT 3
49851: PUSH
49852: EMPTY
49853: LIST
49854: LIST
49855: PUSH
49856: EMPTY
49857: LIST
49858: LIST
49859: LIST
49860: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
49861: LD_ADDR_VAR 0 56
49865: PUSH
49866: LD_INT 1
49868: PUSH
49869: LD_INT 3
49871: PUSH
49872: EMPTY
49873: LIST
49874: LIST
49875: PUSH
49876: LD_INT 0
49878: PUSH
49879: LD_INT 3
49881: PUSH
49882: EMPTY
49883: LIST
49884: LIST
49885: PUSH
49886: LD_INT 1
49888: NEG
49889: PUSH
49890: LD_INT 2
49892: PUSH
49893: EMPTY
49894: LIST
49895: LIST
49896: PUSH
49897: EMPTY
49898: LIST
49899: LIST
49900: LIST
49901: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
49902: LD_ADDR_VAR 0 57
49906: PUSH
49907: LD_INT 2
49909: NEG
49910: PUSH
49911: LD_INT 1
49913: PUSH
49914: EMPTY
49915: LIST
49916: LIST
49917: PUSH
49918: LD_INT 3
49920: NEG
49921: PUSH
49922: LD_INT 0
49924: PUSH
49925: EMPTY
49926: LIST
49927: LIST
49928: PUSH
49929: LD_INT 3
49931: NEG
49932: PUSH
49933: LD_INT 1
49935: NEG
49936: PUSH
49937: EMPTY
49938: LIST
49939: LIST
49940: PUSH
49941: EMPTY
49942: LIST
49943: LIST
49944: LIST
49945: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49946: LD_ADDR_VAR 0 58
49950: PUSH
49951: LD_INT 2
49953: NEG
49954: PUSH
49955: LD_INT 3
49957: NEG
49958: PUSH
49959: EMPTY
49960: LIST
49961: LIST
49962: PUSH
49963: LD_INT 3
49965: NEG
49966: PUSH
49967: LD_INT 2
49969: NEG
49970: PUSH
49971: EMPTY
49972: LIST
49973: LIST
49974: PUSH
49975: LD_INT 3
49977: NEG
49978: PUSH
49979: LD_INT 3
49981: NEG
49982: PUSH
49983: EMPTY
49984: LIST
49985: LIST
49986: PUSH
49987: EMPTY
49988: LIST
49989: LIST
49990: LIST
49991: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
49992: LD_ADDR_VAR 0 59
49996: PUSH
49997: LD_INT 1
49999: NEG
50000: PUSH
50001: LD_INT 2
50003: NEG
50004: PUSH
50005: EMPTY
50006: LIST
50007: LIST
50008: PUSH
50009: LD_INT 0
50011: PUSH
50012: LD_INT 2
50014: NEG
50015: PUSH
50016: EMPTY
50017: LIST
50018: LIST
50019: PUSH
50020: LD_INT 1
50022: PUSH
50023: LD_INT 1
50025: NEG
50026: PUSH
50027: EMPTY
50028: LIST
50029: LIST
50030: PUSH
50031: EMPTY
50032: LIST
50033: LIST
50034: LIST
50035: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
50036: LD_ADDR_VAR 0 60
50040: PUSH
50041: LD_INT 1
50043: PUSH
50044: LD_INT 1
50046: NEG
50047: PUSH
50048: EMPTY
50049: LIST
50050: LIST
50051: PUSH
50052: LD_INT 2
50054: PUSH
50055: LD_INT 0
50057: PUSH
50058: EMPTY
50059: LIST
50060: LIST
50061: PUSH
50062: LD_INT 2
50064: PUSH
50065: LD_INT 1
50067: PUSH
50068: EMPTY
50069: LIST
50070: LIST
50071: PUSH
50072: EMPTY
50073: LIST
50074: LIST
50075: LIST
50076: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
50077: LD_ADDR_VAR 0 61
50081: PUSH
50082: LD_INT 2
50084: PUSH
50085: LD_INT 1
50087: PUSH
50088: EMPTY
50089: LIST
50090: LIST
50091: PUSH
50092: LD_INT 2
50094: PUSH
50095: LD_INT 2
50097: PUSH
50098: EMPTY
50099: LIST
50100: LIST
50101: PUSH
50102: LD_INT 1
50104: PUSH
50105: LD_INT 2
50107: PUSH
50108: EMPTY
50109: LIST
50110: LIST
50111: PUSH
50112: EMPTY
50113: LIST
50114: LIST
50115: LIST
50116: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
50117: LD_ADDR_VAR 0 62
50121: PUSH
50122: LD_INT 1
50124: PUSH
50125: LD_INT 2
50127: PUSH
50128: EMPTY
50129: LIST
50130: LIST
50131: PUSH
50132: LD_INT 0
50134: PUSH
50135: LD_INT 2
50137: PUSH
50138: EMPTY
50139: LIST
50140: LIST
50141: PUSH
50142: LD_INT 1
50144: NEG
50145: PUSH
50146: LD_INT 1
50148: PUSH
50149: EMPTY
50150: LIST
50151: LIST
50152: PUSH
50153: EMPTY
50154: LIST
50155: LIST
50156: LIST
50157: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
50158: LD_ADDR_VAR 0 63
50162: PUSH
50163: LD_INT 1
50165: NEG
50166: PUSH
50167: LD_INT 1
50169: PUSH
50170: EMPTY
50171: LIST
50172: LIST
50173: PUSH
50174: LD_INT 2
50176: NEG
50177: PUSH
50178: LD_INT 0
50180: PUSH
50181: EMPTY
50182: LIST
50183: LIST
50184: PUSH
50185: LD_INT 2
50187: NEG
50188: PUSH
50189: LD_INT 1
50191: NEG
50192: PUSH
50193: EMPTY
50194: LIST
50195: LIST
50196: PUSH
50197: EMPTY
50198: LIST
50199: LIST
50200: LIST
50201: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50202: LD_ADDR_VAR 0 64
50206: PUSH
50207: LD_INT 1
50209: NEG
50210: PUSH
50211: LD_INT 2
50213: NEG
50214: PUSH
50215: EMPTY
50216: LIST
50217: LIST
50218: PUSH
50219: LD_INT 2
50221: NEG
50222: PUSH
50223: LD_INT 1
50225: NEG
50226: PUSH
50227: EMPTY
50228: LIST
50229: LIST
50230: PUSH
50231: LD_INT 2
50233: NEG
50234: PUSH
50235: LD_INT 2
50237: NEG
50238: PUSH
50239: EMPTY
50240: LIST
50241: LIST
50242: PUSH
50243: EMPTY
50244: LIST
50245: LIST
50246: LIST
50247: ST_TO_ADDR
// end ; 2 :
50248: GO 53514
50250: LD_INT 2
50252: DOUBLE
50253: EQUAL
50254: IFTRUE 50258
50256: GO 53513
50258: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
50259: LD_ADDR_VAR 0 29
50263: PUSH
50264: LD_INT 4
50266: PUSH
50267: LD_INT 0
50269: PUSH
50270: EMPTY
50271: LIST
50272: LIST
50273: PUSH
50274: LD_INT 4
50276: PUSH
50277: LD_INT 1
50279: NEG
50280: PUSH
50281: EMPTY
50282: LIST
50283: LIST
50284: PUSH
50285: LD_INT 5
50287: PUSH
50288: LD_INT 0
50290: PUSH
50291: EMPTY
50292: LIST
50293: LIST
50294: PUSH
50295: LD_INT 5
50297: PUSH
50298: LD_INT 1
50300: PUSH
50301: EMPTY
50302: LIST
50303: LIST
50304: PUSH
50305: LD_INT 4
50307: PUSH
50308: LD_INT 1
50310: PUSH
50311: EMPTY
50312: LIST
50313: LIST
50314: PUSH
50315: LD_INT 3
50317: PUSH
50318: LD_INT 0
50320: PUSH
50321: EMPTY
50322: LIST
50323: LIST
50324: PUSH
50325: LD_INT 3
50327: PUSH
50328: LD_INT 1
50330: NEG
50331: PUSH
50332: EMPTY
50333: LIST
50334: LIST
50335: PUSH
50336: LD_INT 3
50338: PUSH
50339: LD_INT 2
50341: NEG
50342: PUSH
50343: EMPTY
50344: LIST
50345: LIST
50346: PUSH
50347: LD_INT 5
50349: PUSH
50350: LD_INT 2
50352: PUSH
50353: EMPTY
50354: LIST
50355: LIST
50356: PUSH
50357: LD_INT 3
50359: PUSH
50360: LD_INT 3
50362: PUSH
50363: EMPTY
50364: LIST
50365: LIST
50366: PUSH
50367: LD_INT 3
50369: PUSH
50370: LD_INT 2
50372: PUSH
50373: EMPTY
50374: LIST
50375: LIST
50376: PUSH
50377: LD_INT 4
50379: PUSH
50380: LD_INT 3
50382: PUSH
50383: EMPTY
50384: LIST
50385: LIST
50386: PUSH
50387: LD_INT 4
50389: PUSH
50390: LD_INT 4
50392: PUSH
50393: EMPTY
50394: LIST
50395: LIST
50396: PUSH
50397: LD_INT 3
50399: PUSH
50400: LD_INT 4
50402: PUSH
50403: EMPTY
50404: LIST
50405: LIST
50406: PUSH
50407: LD_INT 2
50409: PUSH
50410: LD_INT 3
50412: PUSH
50413: EMPTY
50414: LIST
50415: LIST
50416: PUSH
50417: LD_INT 2
50419: PUSH
50420: LD_INT 2
50422: PUSH
50423: EMPTY
50424: LIST
50425: LIST
50426: PUSH
50427: LD_INT 4
50429: PUSH
50430: LD_INT 2
50432: PUSH
50433: EMPTY
50434: LIST
50435: LIST
50436: PUSH
50437: LD_INT 2
50439: PUSH
50440: LD_INT 4
50442: PUSH
50443: EMPTY
50444: LIST
50445: LIST
50446: PUSH
50447: LD_INT 0
50449: PUSH
50450: LD_INT 4
50452: PUSH
50453: EMPTY
50454: LIST
50455: LIST
50456: PUSH
50457: LD_INT 0
50459: PUSH
50460: LD_INT 3
50462: PUSH
50463: EMPTY
50464: LIST
50465: LIST
50466: PUSH
50467: LD_INT 1
50469: PUSH
50470: LD_INT 4
50472: PUSH
50473: EMPTY
50474: LIST
50475: LIST
50476: PUSH
50477: LD_INT 1
50479: PUSH
50480: LD_INT 5
50482: PUSH
50483: EMPTY
50484: LIST
50485: LIST
50486: PUSH
50487: LD_INT 0
50489: PUSH
50490: LD_INT 5
50492: PUSH
50493: EMPTY
50494: LIST
50495: LIST
50496: PUSH
50497: LD_INT 1
50499: NEG
50500: PUSH
50501: LD_INT 4
50503: PUSH
50504: EMPTY
50505: LIST
50506: LIST
50507: PUSH
50508: LD_INT 1
50510: NEG
50511: PUSH
50512: LD_INT 3
50514: PUSH
50515: EMPTY
50516: LIST
50517: LIST
50518: PUSH
50519: LD_INT 2
50521: PUSH
50522: LD_INT 5
50524: PUSH
50525: EMPTY
50526: LIST
50527: LIST
50528: PUSH
50529: LD_INT 2
50531: NEG
50532: PUSH
50533: LD_INT 3
50535: PUSH
50536: EMPTY
50537: LIST
50538: LIST
50539: PUSH
50540: LD_INT 3
50542: NEG
50543: PUSH
50544: LD_INT 0
50546: PUSH
50547: EMPTY
50548: LIST
50549: LIST
50550: PUSH
50551: LD_INT 3
50553: NEG
50554: PUSH
50555: LD_INT 1
50557: NEG
50558: PUSH
50559: EMPTY
50560: LIST
50561: LIST
50562: PUSH
50563: LD_INT 2
50565: NEG
50566: PUSH
50567: LD_INT 0
50569: PUSH
50570: EMPTY
50571: LIST
50572: LIST
50573: PUSH
50574: LD_INT 2
50576: NEG
50577: PUSH
50578: LD_INT 1
50580: PUSH
50581: EMPTY
50582: LIST
50583: LIST
50584: PUSH
50585: LD_INT 3
50587: NEG
50588: PUSH
50589: LD_INT 1
50591: PUSH
50592: EMPTY
50593: LIST
50594: LIST
50595: PUSH
50596: LD_INT 4
50598: NEG
50599: PUSH
50600: LD_INT 0
50602: PUSH
50603: EMPTY
50604: LIST
50605: LIST
50606: PUSH
50607: LD_INT 4
50609: NEG
50610: PUSH
50611: LD_INT 1
50613: NEG
50614: PUSH
50615: EMPTY
50616: LIST
50617: LIST
50618: PUSH
50619: LD_INT 4
50621: NEG
50622: PUSH
50623: LD_INT 2
50625: NEG
50626: PUSH
50627: EMPTY
50628: LIST
50629: LIST
50630: PUSH
50631: LD_INT 2
50633: NEG
50634: PUSH
50635: LD_INT 2
50637: PUSH
50638: EMPTY
50639: LIST
50640: LIST
50641: PUSH
50642: LD_INT 4
50644: NEG
50645: PUSH
50646: LD_INT 4
50648: NEG
50649: PUSH
50650: EMPTY
50651: LIST
50652: LIST
50653: PUSH
50654: LD_INT 4
50656: NEG
50657: PUSH
50658: LD_INT 5
50660: NEG
50661: PUSH
50662: EMPTY
50663: LIST
50664: LIST
50665: PUSH
50666: LD_INT 3
50668: NEG
50669: PUSH
50670: LD_INT 4
50672: NEG
50673: PUSH
50674: EMPTY
50675: LIST
50676: LIST
50677: PUSH
50678: LD_INT 3
50680: NEG
50681: PUSH
50682: LD_INT 3
50684: NEG
50685: PUSH
50686: EMPTY
50687: LIST
50688: LIST
50689: PUSH
50690: LD_INT 4
50692: NEG
50693: PUSH
50694: LD_INT 3
50696: NEG
50697: PUSH
50698: EMPTY
50699: LIST
50700: LIST
50701: PUSH
50702: LD_INT 5
50704: NEG
50705: PUSH
50706: LD_INT 4
50708: NEG
50709: PUSH
50710: EMPTY
50711: LIST
50712: LIST
50713: PUSH
50714: LD_INT 5
50716: NEG
50717: PUSH
50718: LD_INT 5
50720: NEG
50721: PUSH
50722: EMPTY
50723: LIST
50724: LIST
50725: PUSH
50726: LD_INT 3
50728: NEG
50729: PUSH
50730: LD_INT 5
50732: NEG
50733: PUSH
50734: EMPTY
50735: LIST
50736: LIST
50737: PUSH
50738: LD_INT 5
50740: NEG
50741: PUSH
50742: LD_INT 3
50744: NEG
50745: PUSH
50746: EMPTY
50747: LIST
50748: LIST
50749: PUSH
50750: EMPTY
50751: LIST
50752: LIST
50753: LIST
50754: LIST
50755: LIST
50756: LIST
50757: LIST
50758: LIST
50759: LIST
50760: LIST
50761: LIST
50762: LIST
50763: LIST
50764: LIST
50765: LIST
50766: LIST
50767: LIST
50768: LIST
50769: LIST
50770: LIST
50771: LIST
50772: LIST
50773: LIST
50774: LIST
50775: LIST
50776: LIST
50777: LIST
50778: LIST
50779: LIST
50780: LIST
50781: LIST
50782: LIST
50783: LIST
50784: LIST
50785: LIST
50786: LIST
50787: LIST
50788: LIST
50789: LIST
50790: LIST
50791: LIST
50792: LIST
50793: LIST
50794: LIST
50795: LIST
50796: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
50797: LD_ADDR_VAR 0 30
50801: PUSH
50802: LD_INT 4
50804: PUSH
50805: LD_INT 4
50807: PUSH
50808: EMPTY
50809: LIST
50810: LIST
50811: PUSH
50812: LD_INT 4
50814: PUSH
50815: LD_INT 3
50817: PUSH
50818: EMPTY
50819: LIST
50820: LIST
50821: PUSH
50822: LD_INT 5
50824: PUSH
50825: LD_INT 4
50827: PUSH
50828: EMPTY
50829: LIST
50830: LIST
50831: PUSH
50832: LD_INT 5
50834: PUSH
50835: LD_INT 5
50837: PUSH
50838: EMPTY
50839: LIST
50840: LIST
50841: PUSH
50842: LD_INT 4
50844: PUSH
50845: LD_INT 5
50847: PUSH
50848: EMPTY
50849: LIST
50850: LIST
50851: PUSH
50852: LD_INT 3
50854: PUSH
50855: LD_INT 4
50857: PUSH
50858: EMPTY
50859: LIST
50860: LIST
50861: PUSH
50862: LD_INT 3
50864: PUSH
50865: LD_INT 3
50867: PUSH
50868: EMPTY
50869: LIST
50870: LIST
50871: PUSH
50872: LD_INT 5
50874: PUSH
50875: LD_INT 3
50877: PUSH
50878: EMPTY
50879: LIST
50880: LIST
50881: PUSH
50882: LD_INT 3
50884: PUSH
50885: LD_INT 5
50887: PUSH
50888: EMPTY
50889: LIST
50890: LIST
50891: PUSH
50892: LD_INT 0
50894: PUSH
50895: LD_INT 3
50897: PUSH
50898: EMPTY
50899: LIST
50900: LIST
50901: PUSH
50902: LD_INT 0
50904: PUSH
50905: LD_INT 2
50907: PUSH
50908: EMPTY
50909: LIST
50910: LIST
50911: PUSH
50912: LD_INT 1
50914: PUSH
50915: LD_INT 3
50917: PUSH
50918: EMPTY
50919: LIST
50920: LIST
50921: PUSH
50922: LD_INT 1
50924: PUSH
50925: LD_INT 4
50927: PUSH
50928: EMPTY
50929: LIST
50930: LIST
50931: PUSH
50932: LD_INT 0
50934: PUSH
50935: LD_INT 4
50937: PUSH
50938: EMPTY
50939: LIST
50940: LIST
50941: PUSH
50942: LD_INT 1
50944: NEG
50945: PUSH
50946: LD_INT 3
50948: PUSH
50949: EMPTY
50950: LIST
50951: LIST
50952: PUSH
50953: LD_INT 1
50955: NEG
50956: PUSH
50957: LD_INT 2
50959: PUSH
50960: EMPTY
50961: LIST
50962: LIST
50963: PUSH
50964: LD_INT 2
50966: PUSH
50967: LD_INT 4
50969: PUSH
50970: EMPTY
50971: LIST
50972: LIST
50973: PUSH
50974: LD_INT 2
50976: NEG
50977: PUSH
50978: LD_INT 2
50980: PUSH
50981: EMPTY
50982: LIST
50983: LIST
50984: PUSH
50985: LD_INT 4
50987: NEG
50988: PUSH
50989: LD_INT 0
50991: PUSH
50992: EMPTY
50993: LIST
50994: LIST
50995: PUSH
50996: LD_INT 4
50998: NEG
50999: PUSH
51000: LD_INT 1
51002: NEG
51003: PUSH
51004: EMPTY
51005: LIST
51006: LIST
51007: PUSH
51008: LD_INT 3
51010: NEG
51011: PUSH
51012: LD_INT 0
51014: PUSH
51015: EMPTY
51016: LIST
51017: LIST
51018: PUSH
51019: LD_INT 3
51021: NEG
51022: PUSH
51023: LD_INT 1
51025: PUSH
51026: EMPTY
51027: LIST
51028: LIST
51029: PUSH
51030: LD_INT 4
51032: NEG
51033: PUSH
51034: LD_INT 1
51036: PUSH
51037: EMPTY
51038: LIST
51039: LIST
51040: PUSH
51041: LD_INT 5
51043: NEG
51044: PUSH
51045: LD_INT 0
51047: PUSH
51048: EMPTY
51049: LIST
51050: LIST
51051: PUSH
51052: LD_INT 5
51054: NEG
51055: PUSH
51056: LD_INT 1
51058: NEG
51059: PUSH
51060: EMPTY
51061: LIST
51062: LIST
51063: PUSH
51064: LD_INT 5
51066: NEG
51067: PUSH
51068: LD_INT 2
51070: NEG
51071: PUSH
51072: EMPTY
51073: LIST
51074: LIST
51075: PUSH
51076: LD_INT 3
51078: NEG
51079: PUSH
51080: LD_INT 2
51082: PUSH
51083: EMPTY
51084: LIST
51085: LIST
51086: PUSH
51087: LD_INT 3
51089: NEG
51090: PUSH
51091: LD_INT 3
51093: NEG
51094: PUSH
51095: EMPTY
51096: LIST
51097: LIST
51098: PUSH
51099: LD_INT 3
51101: NEG
51102: PUSH
51103: LD_INT 4
51105: NEG
51106: PUSH
51107: EMPTY
51108: LIST
51109: LIST
51110: PUSH
51111: LD_INT 2
51113: NEG
51114: PUSH
51115: LD_INT 3
51117: NEG
51118: PUSH
51119: EMPTY
51120: LIST
51121: LIST
51122: PUSH
51123: LD_INT 2
51125: NEG
51126: PUSH
51127: LD_INT 2
51129: NEG
51130: PUSH
51131: EMPTY
51132: LIST
51133: LIST
51134: PUSH
51135: LD_INT 3
51137: NEG
51138: PUSH
51139: LD_INT 2
51141: NEG
51142: PUSH
51143: EMPTY
51144: LIST
51145: LIST
51146: PUSH
51147: LD_INT 4
51149: NEG
51150: PUSH
51151: LD_INT 3
51153: NEG
51154: PUSH
51155: EMPTY
51156: LIST
51157: LIST
51158: PUSH
51159: LD_INT 4
51161: NEG
51162: PUSH
51163: LD_INT 4
51165: NEG
51166: PUSH
51167: EMPTY
51168: LIST
51169: LIST
51170: PUSH
51171: LD_INT 2
51173: NEG
51174: PUSH
51175: LD_INT 4
51177: NEG
51178: PUSH
51179: EMPTY
51180: LIST
51181: LIST
51182: PUSH
51183: LD_INT 4
51185: NEG
51186: PUSH
51187: LD_INT 2
51189: NEG
51190: PUSH
51191: EMPTY
51192: LIST
51193: LIST
51194: PUSH
51195: LD_INT 0
51197: PUSH
51198: LD_INT 4
51200: NEG
51201: PUSH
51202: EMPTY
51203: LIST
51204: LIST
51205: PUSH
51206: LD_INT 0
51208: PUSH
51209: LD_INT 5
51211: NEG
51212: PUSH
51213: EMPTY
51214: LIST
51215: LIST
51216: PUSH
51217: LD_INT 1
51219: PUSH
51220: LD_INT 4
51222: NEG
51223: PUSH
51224: EMPTY
51225: LIST
51226: LIST
51227: PUSH
51228: LD_INT 1
51230: PUSH
51231: LD_INT 3
51233: NEG
51234: PUSH
51235: EMPTY
51236: LIST
51237: LIST
51238: PUSH
51239: LD_INT 0
51241: PUSH
51242: LD_INT 3
51244: NEG
51245: PUSH
51246: EMPTY
51247: LIST
51248: LIST
51249: PUSH
51250: LD_INT 1
51252: NEG
51253: PUSH
51254: LD_INT 4
51256: NEG
51257: PUSH
51258: EMPTY
51259: LIST
51260: LIST
51261: PUSH
51262: LD_INT 1
51264: NEG
51265: PUSH
51266: LD_INT 5
51268: NEG
51269: PUSH
51270: EMPTY
51271: LIST
51272: LIST
51273: PUSH
51274: LD_INT 2
51276: PUSH
51277: LD_INT 3
51279: NEG
51280: PUSH
51281: EMPTY
51282: LIST
51283: LIST
51284: PUSH
51285: LD_INT 2
51287: NEG
51288: PUSH
51289: LD_INT 5
51291: NEG
51292: PUSH
51293: EMPTY
51294: LIST
51295: LIST
51296: PUSH
51297: EMPTY
51298: LIST
51299: LIST
51300: LIST
51301: LIST
51302: LIST
51303: LIST
51304: LIST
51305: LIST
51306: LIST
51307: LIST
51308: LIST
51309: LIST
51310: LIST
51311: LIST
51312: LIST
51313: LIST
51314: LIST
51315: LIST
51316: LIST
51317: LIST
51318: LIST
51319: LIST
51320: LIST
51321: LIST
51322: LIST
51323: LIST
51324: LIST
51325: LIST
51326: LIST
51327: LIST
51328: LIST
51329: LIST
51330: LIST
51331: LIST
51332: LIST
51333: LIST
51334: LIST
51335: LIST
51336: LIST
51337: LIST
51338: LIST
51339: LIST
51340: LIST
51341: LIST
51342: LIST
51343: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
51344: LD_ADDR_VAR 0 31
51348: PUSH
51349: LD_INT 0
51351: PUSH
51352: LD_INT 4
51354: PUSH
51355: EMPTY
51356: LIST
51357: LIST
51358: PUSH
51359: LD_INT 0
51361: PUSH
51362: LD_INT 3
51364: PUSH
51365: EMPTY
51366: LIST
51367: LIST
51368: PUSH
51369: LD_INT 1
51371: PUSH
51372: LD_INT 4
51374: PUSH
51375: EMPTY
51376: LIST
51377: LIST
51378: PUSH
51379: LD_INT 1
51381: PUSH
51382: LD_INT 5
51384: PUSH
51385: EMPTY
51386: LIST
51387: LIST
51388: PUSH
51389: LD_INT 0
51391: PUSH
51392: LD_INT 5
51394: PUSH
51395: EMPTY
51396: LIST
51397: LIST
51398: PUSH
51399: LD_INT 1
51401: NEG
51402: PUSH
51403: LD_INT 4
51405: PUSH
51406: EMPTY
51407: LIST
51408: LIST
51409: PUSH
51410: LD_INT 1
51412: NEG
51413: PUSH
51414: LD_INT 3
51416: PUSH
51417: EMPTY
51418: LIST
51419: LIST
51420: PUSH
51421: LD_INT 2
51423: PUSH
51424: LD_INT 5
51426: PUSH
51427: EMPTY
51428: LIST
51429: LIST
51430: PUSH
51431: LD_INT 2
51433: NEG
51434: PUSH
51435: LD_INT 3
51437: PUSH
51438: EMPTY
51439: LIST
51440: LIST
51441: PUSH
51442: LD_INT 3
51444: NEG
51445: PUSH
51446: LD_INT 0
51448: PUSH
51449: EMPTY
51450: LIST
51451: LIST
51452: PUSH
51453: LD_INT 3
51455: NEG
51456: PUSH
51457: LD_INT 1
51459: NEG
51460: PUSH
51461: EMPTY
51462: LIST
51463: LIST
51464: PUSH
51465: LD_INT 2
51467: NEG
51468: PUSH
51469: LD_INT 0
51471: PUSH
51472: EMPTY
51473: LIST
51474: LIST
51475: PUSH
51476: LD_INT 2
51478: NEG
51479: PUSH
51480: LD_INT 1
51482: PUSH
51483: EMPTY
51484: LIST
51485: LIST
51486: PUSH
51487: LD_INT 3
51489: NEG
51490: PUSH
51491: LD_INT 1
51493: PUSH
51494: EMPTY
51495: LIST
51496: LIST
51497: PUSH
51498: LD_INT 4
51500: NEG
51501: PUSH
51502: LD_INT 0
51504: PUSH
51505: EMPTY
51506: LIST
51507: LIST
51508: PUSH
51509: LD_INT 4
51511: NEG
51512: PUSH
51513: LD_INT 1
51515: NEG
51516: PUSH
51517: EMPTY
51518: LIST
51519: LIST
51520: PUSH
51521: LD_INT 4
51523: NEG
51524: PUSH
51525: LD_INT 2
51527: NEG
51528: PUSH
51529: EMPTY
51530: LIST
51531: LIST
51532: PUSH
51533: LD_INT 2
51535: NEG
51536: PUSH
51537: LD_INT 2
51539: PUSH
51540: EMPTY
51541: LIST
51542: LIST
51543: PUSH
51544: LD_INT 4
51546: NEG
51547: PUSH
51548: LD_INT 4
51550: NEG
51551: PUSH
51552: EMPTY
51553: LIST
51554: LIST
51555: PUSH
51556: LD_INT 4
51558: NEG
51559: PUSH
51560: LD_INT 5
51562: NEG
51563: PUSH
51564: EMPTY
51565: LIST
51566: LIST
51567: PUSH
51568: LD_INT 3
51570: NEG
51571: PUSH
51572: LD_INT 4
51574: NEG
51575: PUSH
51576: EMPTY
51577: LIST
51578: LIST
51579: PUSH
51580: LD_INT 3
51582: NEG
51583: PUSH
51584: LD_INT 3
51586: NEG
51587: PUSH
51588: EMPTY
51589: LIST
51590: LIST
51591: PUSH
51592: LD_INT 4
51594: NEG
51595: PUSH
51596: LD_INT 3
51598: NEG
51599: PUSH
51600: EMPTY
51601: LIST
51602: LIST
51603: PUSH
51604: LD_INT 5
51606: NEG
51607: PUSH
51608: LD_INT 4
51610: NEG
51611: PUSH
51612: EMPTY
51613: LIST
51614: LIST
51615: PUSH
51616: LD_INT 5
51618: NEG
51619: PUSH
51620: LD_INT 5
51622: NEG
51623: PUSH
51624: EMPTY
51625: LIST
51626: LIST
51627: PUSH
51628: LD_INT 3
51630: NEG
51631: PUSH
51632: LD_INT 5
51634: NEG
51635: PUSH
51636: EMPTY
51637: LIST
51638: LIST
51639: PUSH
51640: LD_INT 5
51642: NEG
51643: PUSH
51644: LD_INT 3
51646: NEG
51647: PUSH
51648: EMPTY
51649: LIST
51650: LIST
51651: PUSH
51652: LD_INT 0
51654: PUSH
51655: LD_INT 3
51657: NEG
51658: PUSH
51659: EMPTY
51660: LIST
51661: LIST
51662: PUSH
51663: LD_INT 0
51665: PUSH
51666: LD_INT 4
51668: NEG
51669: PUSH
51670: EMPTY
51671: LIST
51672: LIST
51673: PUSH
51674: LD_INT 1
51676: PUSH
51677: LD_INT 3
51679: NEG
51680: PUSH
51681: EMPTY
51682: LIST
51683: LIST
51684: PUSH
51685: LD_INT 1
51687: PUSH
51688: LD_INT 2
51690: NEG
51691: PUSH
51692: EMPTY
51693: LIST
51694: LIST
51695: PUSH
51696: LD_INT 0
51698: PUSH
51699: LD_INT 2
51701: NEG
51702: PUSH
51703: EMPTY
51704: LIST
51705: LIST
51706: PUSH
51707: LD_INT 1
51709: NEG
51710: PUSH
51711: LD_INT 3
51713: NEG
51714: PUSH
51715: EMPTY
51716: LIST
51717: LIST
51718: PUSH
51719: LD_INT 1
51721: NEG
51722: PUSH
51723: LD_INT 4
51725: NEG
51726: PUSH
51727: EMPTY
51728: LIST
51729: LIST
51730: PUSH
51731: LD_INT 2
51733: PUSH
51734: LD_INT 2
51736: NEG
51737: PUSH
51738: EMPTY
51739: LIST
51740: LIST
51741: PUSH
51742: LD_INT 2
51744: NEG
51745: PUSH
51746: LD_INT 4
51748: NEG
51749: PUSH
51750: EMPTY
51751: LIST
51752: LIST
51753: PUSH
51754: LD_INT 4
51756: PUSH
51757: LD_INT 0
51759: PUSH
51760: EMPTY
51761: LIST
51762: LIST
51763: PUSH
51764: LD_INT 4
51766: PUSH
51767: LD_INT 1
51769: NEG
51770: PUSH
51771: EMPTY
51772: LIST
51773: LIST
51774: PUSH
51775: LD_INT 5
51777: PUSH
51778: LD_INT 0
51780: PUSH
51781: EMPTY
51782: LIST
51783: LIST
51784: PUSH
51785: LD_INT 5
51787: PUSH
51788: LD_INT 1
51790: PUSH
51791: EMPTY
51792: LIST
51793: LIST
51794: PUSH
51795: LD_INT 4
51797: PUSH
51798: LD_INT 1
51800: PUSH
51801: EMPTY
51802: LIST
51803: LIST
51804: PUSH
51805: LD_INT 3
51807: PUSH
51808: LD_INT 0
51810: PUSH
51811: EMPTY
51812: LIST
51813: LIST
51814: PUSH
51815: LD_INT 3
51817: PUSH
51818: LD_INT 1
51820: NEG
51821: PUSH
51822: EMPTY
51823: LIST
51824: LIST
51825: PUSH
51826: LD_INT 3
51828: PUSH
51829: LD_INT 2
51831: NEG
51832: PUSH
51833: EMPTY
51834: LIST
51835: LIST
51836: PUSH
51837: LD_INT 5
51839: PUSH
51840: LD_INT 2
51842: PUSH
51843: EMPTY
51844: LIST
51845: LIST
51846: PUSH
51847: EMPTY
51848: LIST
51849: LIST
51850: LIST
51851: LIST
51852: LIST
51853: LIST
51854: LIST
51855: LIST
51856: LIST
51857: LIST
51858: LIST
51859: LIST
51860: LIST
51861: LIST
51862: LIST
51863: LIST
51864: LIST
51865: LIST
51866: LIST
51867: LIST
51868: LIST
51869: LIST
51870: LIST
51871: LIST
51872: LIST
51873: LIST
51874: LIST
51875: LIST
51876: LIST
51877: LIST
51878: LIST
51879: LIST
51880: LIST
51881: LIST
51882: LIST
51883: LIST
51884: LIST
51885: LIST
51886: LIST
51887: LIST
51888: LIST
51889: LIST
51890: LIST
51891: LIST
51892: LIST
51893: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
51894: LD_ADDR_VAR 0 32
51898: PUSH
51899: LD_INT 4
51901: NEG
51902: PUSH
51903: LD_INT 0
51905: PUSH
51906: EMPTY
51907: LIST
51908: LIST
51909: PUSH
51910: LD_INT 4
51912: NEG
51913: PUSH
51914: LD_INT 1
51916: NEG
51917: PUSH
51918: EMPTY
51919: LIST
51920: LIST
51921: PUSH
51922: LD_INT 3
51924: NEG
51925: PUSH
51926: LD_INT 0
51928: PUSH
51929: EMPTY
51930: LIST
51931: LIST
51932: PUSH
51933: LD_INT 3
51935: NEG
51936: PUSH
51937: LD_INT 1
51939: PUSH
51940: EMPTY
51941: LIST
51942: LIST
51943: PUSH
51944: LD_INT 4
51946: NEG
51947: PUSH
51948: LD_INT 1
51950: PUSH
51951: EMPTY
51952: LIST
51953: LIST
51954: PUSH
51955: LD_INT 5
51957: NEG
51958: PUSH
51959: LD_INT 0
51961: PUSH
51962: EMPTY
51963: LIST
51964: LIST
51965: PUSH
51966: LD_INT 5
51968: NEG
51969: PUSH
51970: LD_INT 1
51972: NEG
51973: PUSH
51974: EMPTY
51975: LIST
51976: LIST
51977: PUSH
51978: LD_INT 5
51980: NEG
51981: PUSH
51982: LD_INT 2
51984: NEG
51985: PUSH
51986: EMPTY
51987: LIST
51988: LIST
51989: PUSH
51990: LD_INT 3
51992: NEG
51993: PUSH
51994: LD_INT 2
51996: PUSH
51997: EMPTY
51998: LIST
51999: LIST
52000: PUSH
52001: LD_INT 3
52003: NEG
52004: PUSH
52005: LD_INT 3
52007: NEG
52008: PUSH
52009: EMPTY
52010: LIST
52011: LIST
52012: PUSH
52013: LD_INT 3
52015: NEG
52016: PUSH
52017: LD_INT 4
52019: NEG
52020: PUSH
52021: EMPTY
52022: LIST
52023: LIST
52024: PUSH
52025: LD_INT 2
52027: NEG
52028: PUSH
52029: LD_INT 3
52031: NEG
52032: PUSH
52033: EMPTY
52034: LIST
52035: LIST
52036: PUSH
52037: LD_INT 2
52039: NEG
52040: PUSH
52041: LD_INT 2
52043: NEG
52044: PUSH
52045: EMPTY
52046: LIST
52047: LIST
52048: PUSH
52049: LD_INT 3
52051: NEG
52052: PUSH
52053: LD_INT 2
52055: NEG
52056: PUSH
52057: EMPTY
52058: LIST
52059: LIST
52060: PUSH
52061: LD_INT 4
52063: NEG
52064: PUSH
52065: LD_INT 3
52067: NEG
52068: PUSH
52069: EMPTY
52070: LIST
52071: LIST
52072: PUSH
52073: LD_INT 4
52075: NEG
52076: PUSH
52077: LD_INT 4
52079: NEG
52080: PUSH
52081: EMPTY
52082: LIST
52083: LIST
52084: PUSH
52085: LD_INT 2
52087: NEG
52088: PUSH
52089: LD_INT 4
52091: NEG
52092: PUSH
52093: EMPTY
52094: LIST
52095: LIST
52096: PUSH
52097: LD_INT 4
52099: NEG
52100: PUSH
52101: LD_INT 2
52103: NEG
52104: PUSH
52105: EMPTY
52106: LIST
52107: LIST
52108: PUSH
52109: LD_INT 0
52111: PUSH
52112: LD_INT 4
52114: NEG
52115: PUSH
52116: EMPTY
52117: LIST
52118: LIST
52119: PUSH
52120: LD_INT 0
52122: PUSH
52123: LD_INT 5
52125: NEG
52126: PUSH
52127: EMPTY
52128: LIST
52129: LIST
52130: PUSH
52131: LD_INT 1
52133: PUSH
52134: LD_INT 4
52136: NEG
52137: PUSH
52138: EMPTY
52139: LIST
52140: LIST
52141: PUSH
52142: LD_INT 1
52144: PUSH
52145: LD_INT 3
52147: NEG
52148: PUSH
52149: EMPTY
52150: LIST
52151: LIST
52152: PUSH
52153: LD_INT 0
52155: PUSH
52156: LD_INT 3
52158: NEG
52159: PUSH
52160: EMPTY
52161: LIST
52162: LIST
52163: PUSH
52164: LD_INT 1
52166: NEG
52167: PUSH
52168: LD_INT 4
52170: NEG
52171: PUSH
52172: EMPTY
52173: LIST
52174: LIST
52175: PUSH
52176: LD_INT 1
52178: NEG
52179: PUSH
52180: LD_INT 5
52182: NEG
52183: PUSH
52184: EMPTY
52185: LIST
52186: LIST
52187: PUSH
52188: LD_INT 2
52190: PUSH
52191: LD_INT 3
52193: NEG
52194: PUSH
52195: EMPTY
52196: LIST
52197: LIST
52198: PUSH
52199: LD_INT 2
52201: NEG
52202: PUSH
52203: LD_INT 5
52205: NEG
52206: PUSH
52207: EMPTY
52208: LIST
52209: LIST
52210: PUSH
52211: LD_INT 3
52213: PUSH
52214: LD_INT 0
52216: PUSH
52217: EMPTY
52218: LIST
52219: LIST
52220: PUSH
52221: LD_INT 3
52223: PUSH
52224: LD_INT 1
52226: NEG
52227: PUSH
52228: EMPTY
52229: LIST
52230: LIST
52231: PUSH
52232: LD_INT 4
52234: PUSH
52235: LD_INT 0
52237: PUSH
52238: EMPTY
52239: LIST
52240: LIST
52241: PUSH
52242: LD_INT 4
52244: PUSH
52245: LD_INT 1
52247: PUSH
52248: EMPTY
52249: LIST
52250: LIST
52251: PUSH
52252: LD_INT 3
52254: PUSH
52255: LD_INT 1
52257: PUSH
52258: EMPTY
52259: LIST
52260: LIST
52261: PUSH
52262: LD_INT 2
52264: PUSH
52265: LD_INT 0
52267: PUSH
52268: EMPTY
52269: LIST
52270: LIST
52271: PUSH
52272: LD_INT 2
52274: PUSH
52275: LD_INT 1
52277: NEG
52278: PUSH
52279: EMPTY
52280: LIST
52281: LIST
52282: PUSH
52283: LD_INT 2
52285: PUSH
52286: LD_INT 2
52288: NEG
52289: PUSH
52290: EMPTY
52291: LIST
52292: LIST
52293: PUSH
52294: LD_INT 4
52296: PUSH
52297: LD_INT 2
52299: PUSH
52300: EMPTY
52301: LIST
52302: LIST
52303: PUSH
52304: LD_INT 4
52306: PUSH
52307: LD_INT 4
52309: PUSH
52310: EMPTY
52311: LIST
52312: LIST
52313: PUSH
52314: LD_INT 4
52316: PUSH
52317: LD_INT 3
52319: PUSH
52320: EMPTY
52321: LIST
52322: LIST
52323: PUSH
52324: LD_INT 5
52326: PUSH
52327: LD_INT 4
52329: PUSH
52330: EMPTY
52331: LIST
52332: LIST
52333: PUSH
52334: LD_INT 5
52336: PUSH
52337: LD_INT 5
52339: PUSH
52340: EMPTY
52341: LIST
52342: LIST
52343: PUSH
52344: LD_INT 4
52346: PUSH
52347: LD_INT 5
52349: PUSH
52350: EMPTY
52351: LIST
52352: LIST
52353: PUSH
52354: LD_INT 3
52356: PUSH
52357: LD_INT 4
52359: PUSH
52360: EMPTY
52361: LIST
52362: LIST
52363: PUSH
52364: LD_INT 3
52366: PUSH
52367: LD_INT 3
52369: PUSH
52370: EMPTY
52371: LIST
52372: LIST
52373: PUSH
52374: LD_INT 5
52376: PUSH
52377: LD_INT 3
52379: PUSH
52380: EMPTY
52381: LIST
52382: LIST
52383: PUSH
52384: LD_INT 3
52386: PUSH
52387: LD_INT 5
52389: PUSH
52390: EMPTY
52391: LIST
52392: LIST
52393: PUSH
52394: EMPTY
52395: LIST
52396: LIST
52397: LIST
52398: LIST
52399: LIST
52400: LIST
52401: LIST
52402: LIST
52403: LIST
52404: LIST
52405: LIST
52406: LIST
52407: LIST
52408: LIST
52409: LIST
52410: LIST
52411: LIST
52412: LIST
52413: LIST
52414: LIST
52415: LIST
52416: LIST
52417: LIST
52418: LIST
52419: LIST
52420: LIST
52421: LIST
52422: LIST
52423: LIST
52424: LIST
52425: LIST
52426: LIST
52427: LIST
52428: LIST
52429: LIST
52430: LIST
52431: LIST
52432: LIST
52433: LIST
52434: LIST
52435: LIST
52436: LIST
52437: LIST
52438: LIST
52439: LIST
52440: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
52441: LD_ADDR_VAR 0 33
52445: PUSH
52446: LD_INT 4
52448: NEG
52449: PUSH
52450: LD_INT 4
52452: NEG
52453: PUSH
52454: EMPTY
52455: LIST
52456: LIST
52457: PUSH
52458: LD_INT 4
52460: NEG
52461: PUSH
52462: LD_INT 5
52464: NEG
52465: PUSH
52466: EMPTY
52467: LIST
52468: LIST
52469: PUSH
52470: LD_INT 3
52472: NEG
52473: PUSH
52474: LD_INT 4
52476: NEG
52477: PUSH
52478: EMPTY
52479: LIST
52480: LIST
52481: PUSH
52482: LD_INT 3
52484: NEG
52485: PUSH
52486: LD_INT 3
52488: NEG
52489: PUSH
52490: EMPTY
52491: LIST
52492: LIST
52493: PUSH
52494: LD_INT 4
52496: NEG
52497: PUSH
52498: LD_INT 3
52500: NEG
52501: PUSH
52502: EMPTY
52503: LIST
52504: LIST
52505: PUSH
52506: LD_INT 5
52508: NEG
52509: PUSH
52510: LD_INT 4
52512: NEG
52513: PUSH
52514: EMPTY
52515: LIST
52516: LIST
52517: PUSH
52518: LD_INT 5
52520: NEG
52521: PUSH
52522: LD_INT 5
52524: NEG
52525: PUSH
52526: EMPTY
52527: LIST
52528: LIST
52529: PUSH
52530: LD_INT 3
52532: NEG
52533: PUSH
52534: LD_INT 5
52536: NEG
52537: PUSH
52538: EMPTY
52539: LIST
52540: LIST
52541: PUSH
52542: LD_INT 5
52544: NEG
52545: PUSH
52546: LD_INT 3
52548: NEG
52549: PUSH
52550: EMPTY
52551: LIST
52552: LIST
52553: PUSH
52554: LD_INT 0
52556: PUSH
52557: LD_INT 3
52559: NEG
52560: PUSH
52561: EMPTY
52562: LIST
52563: LIST
52564: PUSH
52565: LD_INT 0
52567: PUSH
52568: LD_INT 4
52570: NEG
52571: PUSH
52572: EMPTY
52573: LIST
52574: LIST
52575: PUSH
52576: LD_INT 1
52578: PUSH
52579: LD_INT 3
52581: NEG
52582: PUSH
52583: EMPTY
52584: LIST
52585: LIST
52586: PUSH
52587: LD_INT 1
52589: PUSH
52590: LD_INT 2
52592: NEG
52593: PUSH
52594: EMPTY
52595: LIST
52596: LIST
52597: PUSH
52598: LD_INT 0
52600: PUSH
52601: LD_INT 2
52603: NEG
52604: PUSH
52605: EMPTY
52606: LIST
52607: LIST
52608: PUSH
52609: LD_INT 1
52611: NEG
52612: PUSH
52613: LD_INT 3
52615: NEG
52616: PUSH
52617: EMPTY
52618: LIST
52619: LIST
52620: PUSH
52621: LD_INT 1
52623: NEG
52624: PUSH
52625: LD_INT 4
52627: NEG
52628: PUSH
52629: EMPTY
52630: LIST
52631: LIST
52632: PUSH
52633: LD_INT 2
52635: PUSH
52636: LD_INT 2
52638: NEG
52639: PUSH
52640: EMPTY
52641: LIST
52642: LIST
52643: PUSH
52644: LD_INT 2
52646: NEG
52647: PUSH
52648: LD_INT 4
52650: NEG
52651: PUSH
52652: EMPTY
52653: LIST
52654: LIST
52655: PUSH
52656: LD_INT 4
52658: PUSH
52659: LD_INT 0
52661: PUSH
52662: EMPTY
52663: LIST
52664: LIST
52665: PUSH
52666: LD_INT 4
52668: PUSH
52669: LD_INT 1
52671: NEG
52672: PUSH
52673: EMPTY
52674: LIST
52675: LIST
52676: PUSH
52677: LD_INT 5
52679: PUSH
52680: LD_INT 0
52682: PUSH
52683: EMPTY
52684: LIST
52685: LIST
52686: PUSH
52687: LD_INT 5
52689: PUSH
52690: LD_INT 1
52692: PUSH
52693: EMPTY
52694: LIST
52695: LIST
52696: PUSH
52697: LD_INT 4
52699: PUSH
52700: LD_INT 1
52702: PUSH
52703: EMPTY
52704: LIST
52705: LIST
52706: PUSH
52707: LD_INT 3
52709: PUSH
52710: LD_INT 0
52712: PUSH
52713: EMPTY
52714: LIST
52715: LIST
52716: PUSH
52717: LD_INT 3
52719: PUSH
52720: LD_INT 1
52722: NEG
52723: PUSH
52724: EMPTY
52725: LIST
52726: LIST
52727: PUSH
52728: LD_INT 3
52730: PUSH
52731: LD_INT 2
52733: NEG
52734: PUSH
52735: EMPTY
52736: LIST
52737: LIST
52738: PUSH
52739: LD_INT 5
52741: PUSH
52742: LD_INT 2
52744: PUSH
52745: EMPTY
52746: LIST
52747: LIST
52748: PUSH
52749: LD_INT 3
52751: PUSH
52752: LD_INT 3
52754: PUSH
52755: EMPTY
52756: LIST
52757: LIST
52758: PUSH
52759: LD_INT 3
52761: PUSH
52762: LD_INT 2
52764: PUSH
52765: EMPTY
52766: LIST
52767: LIST
52768: PUSH
52769: LD_INT 4
52771: PUSH
52772: LD_INT 3
52774: PUSH
52775: EMPTY
52776: LIST
52777: LIST
52778: PUSH
52779: LD_INT 4
52781: PUSH
52782: LD_INT 4
52784: PUSH
52785: EMPTY
52786: LIST
52787: LIST
52788: PUSH
52789: LD_INT 3
52791: PUSH
52792: LD_INT 4
52794: PUSH
52795: EMPTY
52796: LIST
52797: LIST
52798: PUSH
52799: LD_INT 2
52801: PUSH
52802: LD_INT 3
52804: PUSH
52805: EMPTY
52806: LIST
52807: LIST
52808: PUSH
52809: LD_INT 2
52811: PUSH
52812: LD_INT 2
52814: PUSH
52815: EMPTY
52816: LIST
52817: LIST
52818: PUSH
52819: LD_INT 4
52821: PUSH
52822: LD_INT 2
52824: PUSH
52825: EMPTY
52826: LIST
52827: LIST
52828: PUSH
52829: LD_INT 2
52831: PUSH
52832: LD_INT 4
52834: PUSH
52835: EMPTY
52836: LIST
52837: LIST
52838: PUSH
52839: LD_INT 0
52841: PUSH
52842: LD_INT 4
52844: PUSH
52845: EMPTY
52846: LIST
52847: LIST
52848: PUSH
52849: LD_INT 0
52851: PUSH
52852: LD_INT 3
52854: PUSH
52855: EMPTY
52856: LIST
52857: LIST
52858: PUSH
52859: LD_INT 1
52861: PUSH
52862: LD_INT 4
52864: PUSH
52865: EMPTY
52866: LIST
52867: LIST
52868: PUSH
52869: LD_INT 1
52871: PUSH
52872: LD_INT 5
52874: PUSH
52875: EMPTY
52876: LIST
52877: LIST
52878: PUSH
52879: LD_INT 0
52881: PUSH
52882: LD_INT 5
52884: PUSH
52885: EMPTY
52886: LIST
52887: LIST
52888: PUSH
52889: LD_INT 1
52891: NEG
52892: PUSH
52893: LD_INT 4
52895: PUSH
52896: EMPTY
52897: LIST
52898: LIST
52899: PUSH
52900: LD_INT 1
52902: NEG
52903: PUSH
52904: LD_INT 3
52906: PUSH
52907: EMPTY
52908: LIST
52909: LIST
52910: PUSH
52911: LD_INT 2
52913: PUSH
52914: LD_INT 5
52916: PUSH
52917: EMPTY
52918: LIST
52919: LIST
52920: PUSH
52921: LD_INT 2
52923: NEG
52924: PUSH
52925: LD_INT 3
52927: PUSH
52928: EMPTY
52929: LIST
52930: LIST
52931: PUSH
52932: EMPTY
52933: LIST
52934: LIST
52935: LIST
52936: LIST
52937: LIST
52938: LIST
52939: LIST
52940: LIST
52941: LIST
52942: LIST
52943: LIST
52944: LIST
52945: LIST
52946: LIST
52947: LIST
52948: LIST
52949: LIST
52950: LIST
52951: LIST
52952: LIST
52953: LIST
52954: LIST
52955: LIST
52956: LIST
52957: LIST
52958: LIST
52959: LIST
52960: LIST
52961: LIST
52962: LIST
52963: LIST
52964: LIST
52965: LIST
52966: LIST
52967: LIST
52968: LIST
52969: LIST
52970: LIST
52971: LIST
52972: LIST
52973: LIST
52974: LIST
52975: LIST
52976: LIST
52977: LIST
52978: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
52979: LD_ADDR_VAR 0 34
52983: PUSH
52984: LD_INT 0
52986: PUSH
52987: LD_INT 4
52989: NEG
52990: PUSH
52991: EMPTY
52992: LIST
52993: LIST
52994: PUSH
52995: LD_INT 0
52997: PUSH
52998: LD_INT 5
53000: NEG
53001: PUSH
53002: EMPTY
53003: LIST
53004: LIST
53005: PUSH
53006: LD_INT 1
53008: PUSH
53009: LD_INT 4
53011: NEG
53012: PUSH
53013: EMPTY
53014: LIST
53015: LIST
53016: PUSH
53017: LD_INT 1
53019: PUSH
53020: LD_INT 3
53022: NEG
53023: PUSH
53024: EMPTY
53025: LIST
53026: LIST
53027: PUSH
53028: LD_INT 0
53030: PUSH
53031: LD_INT 3
53033: NEG
53034: PUSH
53035: EMPTY
53036: LIST
53037: LIST
53038: PUSH
53039: LD_INT 1
53041: NEG
53042: PUSH
53043: LD_INT 4
53045: NEG
53046: PUSH
53047: EMPTY
53048: LIST
53049: LIST
53050: PUSH
53051: LD_INT 1
53053: NEG
53054: PUSH
53055: LD_INT 5
53057: NEG
53058: PUSH
53059: EMPTY
53060: LIST
53061: LIST
53062: PUSH
53063: LD_INT 2
53065: PUSH
53066: LD_INT 3
53068: NEG
53069: PUSH
53070: EMPTY
53071: LIST
53072: LIST
53073: PUSH
53074: LD_INT 2
53076: NEG
53077: PUSH
53078: LD_INT 5
53080: NEG
53081: PUSH
53082: EMPTY
53083: LIST
53084: LIST
53085: PUSH
53086: LD_INT 3
53088: PUSH
53089: LD_INT 0
53091: PUSH
53092: EMPTY
53093: LIST
53094: LIST
53095: PUSH
53096: LD_INT 3
53098: PUSH
53099: LD_INT 1
53101: NEG
53102: PUSH
53103: EMPTY
53104: LIST
53105: LIST
53106: PUSH
53107: LD_INT 4
53109: PUSH
53110: LD_INT 0
53112: PUSH
53113: EMPTY
53114: LIST
53115: LIST
53116: PUSH
53117: LD_INT 4
53119: PUSH
53120: LD_INT 1
53122: PUSH
53123: EMPTY
53124: LIST
53125: LIST
53126: PUSH
53127: LD_INT 3
53129: PUSH
53130: LD_INT 1
53132: PUSH
53133: EMPTY
53134: LIST
53135: LIST
53136: PUSH
53137: LD_INT 2
53139: PUSH
53140: LD_INT 0
53142: PUSH
53143: EMPTY
53144: LIST
53145: LIST
53146: PUSH
53147: LD_INT 2
53149: PUSH
53150: LD_INT 1
53152: NEG
53153: PUSH
53154: EMPTY
53155: LIST
53156: LIST
53157: PUSH
53158: LD_INT 2
53160: PUSH
53161: LD_INT 2
53163: NEG
53164: PUSH
53165: EMPTY
53166: LIST
53167: LIST
53168: PUSH
53169: LD_INT 4
53171: PUSH
53172: LD_INT 2
53174: PUSH
53175: EMPTY
53176: LIST
53177: LIST
53178: PUSH
53179: LD_INT 4
53181: PUSH
53182: LD_INT 4
53184: PUSH
53185: EMPTY
53186: LIST
53187: LIST
53188: PUSH
53189: LD_INT 4
53191: PUSH
53192: LD_INT 3
53194: PUSH
53195: EMPTY
53196: LIST
53197: LIST
53198: PUSH
53199: LD_INT 5
53201: PUSH
53202: LD_INT 4
53204: PUSH
53205: EMPTY
53206: LIST
53207: LIST
53208: PUSH
53209: LD_INT 5
53211: PUSH
53212: LD_INT 5
53214: PUSH
53215: EMPTY
53216: LIST
53217: LIST
53218: PUSH
53219: LD_INT 4
53221: PUSH
53222: LD_INT 5
53224: PUSH
53225: EMPTY
53226: LIST
53227: LIST
53228: PUSH
53229: LD_INT 3
53231: PUSH
53232: LD_INT 4
53234: PUSH
53235: EMPTY
53236: LIST
53237: LIST
53238: PUSH
53239: LD_INT 3
53241: PUSH
53242: LD_INT 3
53244: PUSH
53245: EMPTY
53246: LIST
53247: LIST
53248: PUSH
53249: LD_INT 5
53251: PUSH
53252: LD_INT 3
53254: PUSH
53255: EMPTY
53256: LIST
53257: LIST
53258: PUSH
53259: LD_INT 3
53261: PUSH
53262: LD_INT 5
53264: PUSH
53265: EMPTY
53266: LIST
53267: LIST
53268: PUSH
53269: LD_INT 0
53271: PUSH
53272: LD_INT 3
53274: PUSH
53275: EMPTY
53276: LIST
53277: LIST
53278: PUSH
53279: LD_INT 0
53281: PUSH
53282: LD_INT 2
53284: PUSH
53285: EMPTY
53286: LIST
53287: LIST
53288: PUSH
53289: LD_INT 1
53291: PUSH
53292: LD_INT 3
53294: PUSH
53295: EMPTY
53296: LIST
53297: LIST
53298: PUSH
53299: LD_INT 1
53301: PUSH
53302: LD_INT 4
53304: PUSH
53305: EMPTY
53306: LIST
53307: LIST
53308: PUSH
53309: LD_INT 0
53311: PUSH
53312: LD_INT 4
53314: PUSH
53315: EMPTY
53316: LIST
53317: LIST
53318: PUSH
53319: LD_INT 1
53321: NEG
53322: PUSH
53323: LD_INT 3
53325: PUSH
53326: EMPTY
53327: LIST
53328: LIST
53329: PUSH
53330: LD_INT 1
53332: NEG
53333: PUSH
53334: LD_INT 2
53336: PUSH
53337: EMPTY
53338: LIST
53339: LIST
53340: PUSH
53341: LD_INT 2
53343: PUSH
53344: LD_INT 4
53346: PUSH
53347: EMPTY
53348: LIST
53349: LIST
53350: PUSH
53351: LD_INT 2
53353: NEG
53354: PUSH
53355: LD_INT 2
53357: PUSH
53358: EMPTY
53359: LIST
53360: LIST
53361: PUSH
53362: LD_INT 4
53364: NEG
53365: PUSH
53366: LD_INT 0
53368: PUSH
53369: EMPTY
53370: LIST
53371: LIST
53372: PUSH
53373: LD_INT 4
53375: NEG
53376: PUSH
53377: LD_INT 1
53379: NEG
53380: PUSH
53381: EMPTY
53382: LIST
53383: LIST
53384: PUSH
53385: LD_INT 3
53387: NEG
53388: PUSH
53389: LD_INT 0
53391: PUSH
53392: EMPTY
53393: LIST
53394: LIST
53395: PUSH
53396: LD_INT 3
53398: NEG
53399: PUSH
53400: LD_INT 1
53402: PUSH
53403: EMPTY
53404: LIST
53405: LIST
53406: PUSH
53407: LD_INT 4
53409: NEG
53410: PUSH
53411: LD_INT 1
53413: PUSH
53414: EMPTY
53415: LIST
53416: LIST
53417: PUSH
53418: LD_INT 5
53420: NEG
53421: PUSH
53422: LD_INT 0
53424: PUSH
53425: EMPTY
53426: LIST
53427: LIST
53428: PUSH
53429: LD_INT 5
53431: NEG
53432: PUSH
53433: LD_INT 1
53435: NEG
53436: PUSH
53437: EMPTY
53438: LIST
53439: LIST
53440: PUSH
53441: LD_INT 5
53443: NEG
53444: PUSH
53445: LD_INT 2
53447: NEG
53448: PUSH
53449: EMPTY
53450: LIST
53451: LIST
53452: PUSH
53453: LD_INT 3
53455: NEG
53456: PUSH
53457: LD_INT 2
53459: PUSH
53460: EMPTY
53461: LIST
53462: LIST
53463: PUSH
53464: EMPTY
53465: LIST
53466: LIST
53467: LIST
53468: LIST
53469: LIST
53470: LIST
53471: LIST
53472: LIST
53473: LIST
53474: LIST
53475: LIST
53476: LIST
53477: LIST
53478: LIST
53479: LIST
53480: LIST
53481: LIST
53482: LIST
53483: LIST
53484: LIST
53485: LIST
53486: LIST
53487: LIST
53488: LIST
53489: LIST
53490: LIST
53491: LIST
53492: LIST
53493: LIST
53494: LIST
53495: LIST
53496: LIST
53497: LIST
53498: LIST
53499: LIST
53500: LIST
53501: LIST
53502: LIST
53503: LIST
53504: LIST
53505: LIST
53506: LIST
53507: LIST
53508: LIST
53509: LIST
53510: ST_TO_ADDR
// end ; end ;
53511: GO 53514
53513: POP
// case btype of b_depot , b_warehouse :
53514: LD_VAR 0 1
53518: PUSH
53519: LD_INT 0
53521: DOUBLE
53522: EQUAL
53523: IFTRUE 53533
53525: LD_INT 1
53527: DOUBLE
53528: EQUAL
53529: IFTRUE 53533
53531: GO 53734
53533: POP
// case nation of nation_american :
53534: LD_VAR 0 5
53538: PUSH
53539: LD_INT 1
53541: DOUBLE
53542: EQUAL
53543: IFTRUE 53547
53545: GO 53603
53547: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
53548: LD_ADDR_VAR 0 9
53552: PUSH
53553: LD_VAR 0 11
53557: PUSH
53558: LD_VAR 0 12
53562: PUSH
53563: LD_VAR 0 13
53567: PUSH
53568: LD_VAR 0 14
53572: PUSH
53573: LD_VAR 0 15
53577: PUSH
53578: LD_VAR 0 16
53582: PUSH
53583: EMPTY
53584: LIST
53585: LIST
53586: LIST
53587: LIST
53588: LIST
53589: LIST
53590: PUSH
53591: LD_VAR 0 4
53595: PUSH
53596: LD_INT 1
53598: PLUS
53599: ARRAY
53600: ST_TO_ADDR
53601: GO 53732
53603: LD_INT 2
53605: DOUBLE
53606: EQUAL
53607: IFTRUE 53611
53609: GO 53667
53611: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
53612: LD_ADDR_VAR 0 9
53616: PUSH
53617: LD_VAR 0 17
53621: PUSH
53622: LD_VAR 0 18
53626: PUSH
53627: LD_VAR 0 19
53631: PUSH
53632: LD_VAR 0 20
53636: PUSH
53637: LD_VAR 0 21
53641: PUSH
53642: LD_VAR 0 22
53646: PUSH
53647: EMPTY
53648: LIST
53649: LIST
53650: LIST
53651: LIST
53652: LIST
53653: LIST
53654: PUSH
53655: LD_VAR 0 4
53659: PUSH
53660: LD_INT 1
53662: PLUS
53663: ARRAY
53664: ST_TO_ADDR
53665: GO 53732
53667: LD_INT 3
53669: DOUBLE
53670: EQUAL
53671: IFTRUE 53675
53673: GO 53731
53675: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
53676: LD_ADDR_VAR 0 9
53680: PUSH
53681: LD_VAR 0 23
53685: PUSH
53686: LD_VAR 0 24
53690: PUSH
53691: LD_VAR 0 25
53695: PUSH
53696: LD_VAR 0 26
53700: PUSH
53701: LD_VAR 0 27
53705: PUSH
53706: LD_VAR 0 28
53710: PUSH
53711: EMPTY
53712: LIST
53713: LIST
53714: LIST
53715: LIST
53716: LIST
53717: LIST
53718: PUSH
53719: LD_VAR 0 4
53723: PUSH
53724: LD_INT 1
53726: PLUS
53727: ARRAY
53728: ST_TO_ADDR
53729: GO 53732
53731: POP
53732: GO 54287
53734: LD_INT 2
53736: DOUBLE
53737: EQUAL
53738: IFTRUE 53748
53740: LD_INT 3
53742: DOUBLE
53743: EQUAL
53744: IFTRUE 53748
53746: GO 53804
53748: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
53749: LD_ADDR_VAR 0 9
53753: PUSH
53754: LD_VAR 0 29
53758: PUSH
53759: LD_VAR 0 30
53763: PUSH
53764: LD_VAR 0 31
53768: PUSH
53769: LD_VAR 0 32
53773: PUSH
53774: LD_VAR 0 33
53778: PUSH
53779: LD_VAR 0 34
53783: PUSH
53784: EMPTY
53785: LIST
53786: LIST
53787: LIST
53788: LIST
53789: LIST
53790: LIST
53791: PUSH
53792: LD_VAR 0 4
53796: PUSH
53797: LD_INT 1
53799: PLUS
53800: ARRAY
53801: ST_TO_ADDR
53802: GO 54287
53804: LD_INT 16
53806: DOUBLE
53807: EQUAL
53808: IFTRUE 53866
53810: LD_INT 17
53812: DOUBLE
53813: EQUAL
53814: IFTRUE 53866
53816: LD_INT 18
53818: DOUBLE
53819: EQUAL
53820: IFTRUE 53866
53822: LD_INT 19
53824: DOUBLE
53825: EQUAL
53826: IFTRUE 53866
53828: LD_INT 22
53830: DOUBLE
53831: EQUAL
53832: IFTRUE 53866
53834: LD_INT 20
53836: DOUBLE
53837: EQUAL
53838: IFTRUE 53866
53840: LD_INT 21
53842: DOUBLE
53843: EQUAL
53844: IFTRUE 53866
53846: LD_INT 23
53848: DOUBLE
53849: EQUAL
53850: IFTRUE 53866
53852: LD_INT 24
53854: DOUBLE
53855: EQUAL
53856: IFTRUE 53866
53858: LD_INT 25
53860: DOUBLE
53861: EQUAL
53862: IFTRUE 53866
53864: GO 53922
53866: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
53867: LD_ADDR_VAR 0 9
53871: PUSH
53872: LD_VAR 0 35
53876: PUSH
53877: LD_VAR 0 36
53881: PUSH
53882: LD_VAR 0 37
53886: PUSH
53887: LD_VAR 0 38
53891: PUSH
53892: LD_VAR 0 39
53896: PUSH
53897: LD_VAR 0 40
53901: PUSH
53902: EMPTY
53903: LIST
53904: LIST
53905: LIST
53906: LIST
53907: LIST
53908: LIST
53909: PUSH
53910: LD_VAR 0 4
53914: PUSH
53915: LD_INT 1
53917: PLUS
53918: ARRAY
53919: ST_TO_ADDR
53920: GO 54287
53922: LD_INT 6
53924: DOUBLE
53925: EQUAL
53926: IFTRUE 53978
53928: LD_INT 7
53930: DOUBLE
53931: EQUAL
53932: IFTRUE 53978
53934: LD_INT 8
53936: DOUBLE
53937: EQUAL
53938: IFTRUE 53978
53940: LD_INT 13
53942: DOUBLE
53943: EQUAL
53944: IFTRUE 53978
53946: LD_INT 12
53948: DOUBLE
53949: EQUAL
53950: IFTRUE 53978
53952: LD_INT 15
53954: DOUBLE
53955: EQUAL
53956: IFTRUE 53978
53958: LD_INT 11
53960: DOUBLE
53961: EQUAL
53962: IFTRUE 53978
53964: LD_INT 14
53966: DOUBLE
53967: EQUAL
53968: IFTRUE 53978
53970: LD_INT 10
53972: DOUBLE
53973: EQUAL
53974: IFTRUE 53978
53976: GO 54034
53978: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
53979: LD_ADDR_VAR 0 9
53983: PUSH
53984: LD_VAR 0 41
53988: PUSH
53989: LD_VAR 0 42
53993: PUSH
53994: LD_VAR 0 43
53998: PUSH
53999: LD_VAR 0 44
54003: PUSH
54004: LD_VAR 0 45
54008: PUSH
54009: LD_VAR 0 46
54013: PUSH
54014: EMPTY
54015: LIST
54016: LIST
54017: LIST
54018: LIST
54019: LIST
54020: LIST
54021: PUSH
54022: LD_VAR 0 4
54026: PUSH
54027: LD_INT 1
54029: PLUS
54030: ARRAY
54031: ST_TO_ADDR
54032: GO 54287
54034: LD_INT 36
54036: DOUBLE
54037: EQUAL
54038: IFTRUE 54042
54040: GO 54098
54042: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
54043: LD_ADDR_VAR 0 9
54047: PUSH
54048: LD_VAR 0 47
54052: PUSH
54053: LD_VAR 0 48
54057: PUSH
54058: LD_VAR 0 49
54062: PUSH
54063: LD_VAR 0 50
54067: PUSH
54068: LD_VAR 0 51
54072: PUSH
54073: LD_VAR 0 52
54077: PUSH
54078: EMPTY
54079: LIST
54080: LIST
54081: LIST
54082: LIST
54083: LIST
54084: LIST
54085: PUSH
54086: LD_VAR 0 4
54090: PUSH
54091: LD_INT 1
54093: PLUS
54094: ARRAY
54095: ST_TO_ADDR
54096: GO 54287
54098: LD_INT 4
54100: DOUBLE
54101: EQUAL
54102: IFTRUE 54124
54104: LD_INT 5
54106: DOUBLE
54107: EQUAL
54108: IFTRUE 54124
54110: LD_INT 34
54112: DOUBLE
54113: EQUAL
54114: IFTRUE 54124
54116: LD_INT 37
54118: DOUBLE
54119: EQUAL
54120: IFTRUE 54124
54122: GO 54180
54124: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
54125: LD_ADDR_VAR 0 9
54129: PUSH
54130: LD_VAR 0 53
54134: PUSH
54135: LD_VAR 0 54
54139: PUSH
54140: LD_VAR 0 55
54144: PUSH
54145: LD_VAR 0 56
54149: PUSH
54150: LD_VAR 0 57
54154: PUSH
54155: LD_VAR 0 58
54159: PUSH
54160: EMPTY
54161: LIST
54162: LIST
54163: LIST
54164: LIST
54165: LIST
54166: LIST
54167: PUSH
54168: LD_VAR 0 4
54172: PUSH
54173: LD_INT 1
54175: PLUS
54176: ARRAY
54177: ST_TO_ADDR
54178: GO 54287
54180: LD_INT 31
54182: DOUBLE
54183: EQUAL
54184: IFTRUE 54230
54186: LD_INT 32
54188: DOUBLE
54189: EQUAL
54190: IFTRUE 54230
54192: LD_INT 33
54194: DOUBLE
54195: EQUAL
54196: IFTRUE 54230
54198: LD_INT 27
54200: DOUBLE
54201: EQUAL
54202: IFTRUE 54230
54204: LD_INT 26
54206: DOUBLE
54207: EQUAL
54208: IFTRUE 54230
54210: LD_INT 28
54212: DOUBLE
54213: EQUAL
54214: IFTRUE 54230
54216: LD_INT 29
54218: DOUBLE
54219: EQUAL
54220: IFTRUE 54230
54222: LD_INT 30
54224: DOUBLE
54225: EQUAL
54226: IFTRUE 54230
54228: GO 54286
54230: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
54231: LD_ADDR_VAR 0 9
54235: PUSH
54236: LD_VAR 0 59
54240: PUSH
54241: LD_VAR 0 60
54245: PUSH
54246: LD_VAR 0 61
54250: PUSH
54251: LD_VAR 0 62
54255: PUSH
54256: LD_VAR 0 63
54260: PUSH
54261: LD_VAR 0 64
54265: PUSH
54266: EMPTY
54267: LIST
54268: LIST
54269: LIST
54270: LIST
54271: LIST
54272: LIST
54273: PUSH
54274: LD_VAR 0 4
54278: PUSH
54279: LD_INT 1
54281: PLUS
54282: ARRAY
54283: ST_TO_ADDR
54284: GO 54287
54286: POP
// temp_list2 = [ ] ;
54287: LD_ADDR_VAR 0 10
54291: PUSH
54292: EMPTY
54293: ST_TO_ADDR
// for i in temp_list do
54294: LD_ADDR_VAR 0 8
54298: PUSH
54299: LD_VAR 0 9
54303: PUSH
54304: FOR_IN
54305: IFFALSE 54357
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
54307: LD_ADDR_VAR 0 10
54311: PUSH
54312: LD_VAR 0 10
54316: PUSH
54317: LD_VAR 0 8
54321: PUSH
54322: LD_INT 1
54324: ARRAY
54325: PUSH
54326: LD_VAR 0 2
54330: PLUS
54331: PUSH
54332: LD_VAR 0 8
54336: PUSH
54337: LD_INT 2
54339: ARRAY
54340: PUSH
54341: LD_VAR 0 3
54345: PLUS
54346: PUSH
54347: EMPTY
54348: LIST
54349: LIST
54350: PUSH
54351: EMPTY
54352: LIST
54353: ADD
54354: ST_TO_ADDR
54355: GO 54304
54357: POP
54358: POP
// result = temp_list2 ;
54359: LD_ADDR_VAR 0 7
54363: PUSH
54364: LD_VAR 0 10
54368: ST_TO_ADDR
// end ;
54369: LD_VAR 0 7
54373: RET
// export function EnemyInRange ( unit , dist ) ; begin
54374: LD_INT 0
54376: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
54377: LD_ADDR_VAR 0 3
54381: PUSH
54382: LD_VAR 0 1
54386: PPUSH
54387: CALL_OW 255
54391: PPUSH
54392: LD_VAR 0 1
54396: PPUSH
54397: CALL_OW 250
54401: PPUSH
54402: LD_VAR 0 1
54406: PPUSH
54407: CALL_OW 251
54411: PPUSH
54412: LD_VAR 0 2
54416: PPUSH
54417: CALL 27747 0 4
54421: PUSH
54422: LD_INT 4
54424: ARRAY
54425: ST_TO_ADDR
// end ;
54426: LD_VAR 0 3
54430: RET
// export function PlayerSeeMe ( unit ) ; begin
54431: LD_INT 0
54433: PPUSH
// result := See ( your_side , unit ) ;
54434: LD_ADDR_VAR 0 2
54438: PUSH
54439: LD_OWVAR 2
54443: PPUSH
54444: LD_VAR 0 1
54448: PPUSH
54449: CALL_OW 292
54453: ST_TO_ADDR
// end ;
54454: LD_VAR 0 2
54458: RET
// export function ReverseDir ( unit ) ; begin
54459: LD_INT 0
54461: PPUSH
// if not unit then
54462: LD_VAR 0 1
54466: NOT
54467: IFFALSE 54471
// exit ;
54469: GO 54494
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
54471: LD_ADDR_VAR 0 2
54475: PUSH
54476: LD_VAR 0 1
54480: PPUSH
54481: CALL_OW 254
54485: PUSH
54486: LD_INT 3
54488: PLUS
54489: PUSH
54490: LD_INT 6
54492: MOD
54493: ST_TO_ADDR
// end ;
54494: LD_VAR 0 2
54498: RET
// export function ReverseArray ( array ) ; var i ; begin
54499: LD_INT 0
54501: PPUSH
54502: PPUSH
// if not array then
54503: LD_VAR 0 1
54507: NOT
54508: IFFALSE 54512
// exit ;
54510: GO 54567
// result := [ ] ;
54512: LD_ADDR_VAR 0 2
54516: PUSH
54517: EMPTY
54518: ST_TO_ADDR
// for i := array downto 1 do
54519: LD_ADDR_VAR 0 3
54523: PUSH
54524: DOUBLE
54525: LD_VAR 0 1
54529: INC
54530: ST_TO_ADDR
54531: LD_INT 1
54533: PUSH
54534: FOR_DOWNTO
54535: IFFALSE 54565
// result := Join ( result , array [ i ] ) ;
54537: LD_ADDR_VAR 0 2
54541: PUSH
54542: LD_VAR 0 2
54546: PPUSH
54547: LD_VAR 0 1
54551: PUSH
54552: LD_VAR 0 3
54556: ARRAY
54557: PPUSH
54558: CALL 59232 0 2
54562: ST_TO_ADDR
54563: GO 54534
54565: POP
54566: POP
// end ;
54567: LD_VAR 0 2
54571: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
54572: LD_INT 0
54574: PPUSH
54575: PPUSH
54576: PPUSH
54577: PPUSH
54578: PPUSH
54579: PPUSH
// if not unit or not hexes then
54580: LD_VAR 0 1
54584: NOT
54585: PUSH
54586: LD_VAR 0 2
54590: NOT
54591: OR
54592: IFFALSE 54596
// exit ;
54594: GO 54719
// dist := 9999 ;
54596: LD_ADDR_VAR 0 5
54600: PUSH
54601: LD_INT 9999
54603: ST_TO_ADDR
// for i = 1 to hexes do
54604: LD_ADDR_VAR 0 4
54608: PUSH
54609: DOUBLE
54610: LD_INT 1
54612: DEC
54613: ST_TO_ADDR
54614: LD_VAR 0 2
54618: PUSH
54619: FOR_TO
54620: IFFALSE 54707
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
54622: LD_ADDR_VAR 0 6
54626: PUSH
54627: LD_VAR 0 1
54631: PPUSH
54632: LD_VAR 0 2
54636: PUSH
54637: LD_VAR 0 4
54641: ARRAY
54642: PUSH
54643: LD_INT 1
54645: ARRAY
54646: PPUSH
54647: LD_VAR 0 2
54651: PUSH
54652: LD_VAR 0 4
54656: ARRAY
54657: PUSH
54658: LD_INT 2
54660: ARRAY
54661: PPUSH
54662: CALL_OW 297
54666: ST_TO_ADDR
// if tdist < dist then
54667: LD_VAR 0 6
54671: PUSH
54672: LD_VAR 0 5
54676: LESS
54677: IFFALSE 54705
// begin hex := hexes [ i ] ;
54679: LD_ADDR_VAR 0 8
54683: PUSH
54684: LD_VAR 0 2
54688: PUSH
54689: LD_VAR 0 4
54693: ARRAY
54694: ST_TO_ADDR
// dist := tdist ;
54695: LD_ADDR_VAR 0 5
54699: PUSH
54700: LD_VAR 0 6
54704: ST_TO_ADDR
// end ; end ;
54705: GO 54619
54707: POP
54708: POP
// result := hex ;
54709: LD_ADDR_VAR 0 3
54713: PUSH
54714: LD_VAR 0 8
54718: ST_TO_ADDR
// end ;
54719: LD_VAR 0 3
54723: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
54724: LD_INT 0
54726: PPUSH
54727: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
54728: LD_VAR 0 1
54732: NOT
54733: PUSH
54734: LD_VAR 0 1
54738: PUSH
54739: LD_INT 21
54741: PUSH
54742: LD_INT 2
54744: PUSH
54745: EMPTY
54746: LIST
54747: LIST
54748: PUSH
54749: LD_INT 23
54751: PUSH
54752: LD_INT 2
54754: PUSH
54755: EMPTY
54756: LIST
54757: LIST
54758: PUSH
54759: EMPTY
54760: LIST
54761: LIST
54762: PPUSH
54763: CALL_OW 69
54767: IN
54768: NOT
54769: OR
54770: IFFALSE 54774
// exit ;
54772: GO 54821
// for i = 1 to 3 do
54774: LD_ADDR_VAR 0 3
54778: PUSH
54779: DOUBLE
54780: LD_INT 1
54782: DEC
54783: ST_TO_ADDR
54784: LD_INT 3
54786: PUSH
54787: FOR_TO
54788: IFFALSE 54819
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
54790: LD_VAR 0 1
54794: PPUSH
54795: CALL_OW 250
54799: PPUSH
54800: LD_VAR 0 1
54804: PPUSH
54805: CALL_OW 251
54809: PPUSH
54810: LD_INT 1
54812: PPUSH
54813: CALL_OW 453
54817: GO 54787
54819: POP
54820: POP
// end ;
54821: LD_VAR 0 2
54825: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
54826: LD_INT 0
54828: PPUSH
54829: PPUSH
54830: PPUSH
54831: PPUSH
54832: PPUSH
54833: PPUSH
// if not unit or not enemy_unit then
54834: LD_VAR 0 1
54838: NOT
54839: PUSH
54840: LD_VAR 0 2
54844: NOT
54845: OR
54846: IFFALSE 54850
// exit ;
54848: GO 55317
// if GetLives ( i ) < 250 then
54850: LD_VAR 0 4
54854: PPUSH
54855: CALL_OW 256
54859: PUSH
54860: LD_INT 250
54862: LESS
54863: IFFALSE 54876
// begin ComAutodestruct ( i ) ;
54865: LD_VAR 0 4
54869: PPUSH
54870: CALL 54724 0 1
// exit ;
54874: GO 55317
// end ; x := GetX ( enemy_unit ) ;
54876: LD_ADDR_VAR 0 7
54880: PUSH
54881: LD_VAR 0 2
54885: PPUSH
54886: CALL_OW 250
54890: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
54891: LD_ADDR_VAR 0 8
54895: PUSH
54896: LD_VAR 0 2
54900: PPUSH
54901: CALL_OW 251
54905: ST_TO_ADDR
// if not x or not y then
54906: LD_VAR 0 7
54910: NOT
54911: PUSH
54912: LD_VAR 0 8
54916: NOT
54917: OR
54918: IFFALSE 54922
// exit ;
54920: GO 55317
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
54922: LD_ADDR_VAR 0 6
54926: PUSH
54927: LD_VAR 0 7
54931: PPUSH
54932: LD_INT 0
54934: PPUSH
54935: LD_INT 4
54937: PPUSH
54938: CALL_OW 272
54942: PUSH
54943: LD_VAR 0 8
54947: PPUSH
54948: LD_INT 0
54950: PPUSH
54951: LD_INT 4
54953: PPUSH
54954: CALL_OW 273
54958: PUSH
54959: EMPTY
54960: LIST
54961: LIST
54962: PUSH
54963: LD_VAR 0 7
54967: PPUSH
54968: LD_INT 1
54970: PPUSH
54971: LD_INT 4
54973: PPUSH
54974: CALL_OW 272
54978: PUSH
54979: LD_VAR 0 8
54983: PPUSH
54984: LD_INT 1
54986: PPUSH
54987: LD_INT 4
54989: PPUSH
54990: CALL_OW 273
54994: PUSH
54995: EMPTY
54996: LIST
54997: LIST
54998: PUSH
54999: LD_VAR 0 7
55003: PPUSH
55004: LD_INT 2
55006: PPUSH
55007: LD_INT 4
55009: PPUSH
55010: CALL_OW 272
55014: PUSH
55015: LD_VAR 0 8
55019: PPUSH
55020: LD_INT 2
55022: PPUSH
55023: LD_INT 4
55025: PPUSH
55026: CALL_OW 273
55030: PUSH
55031: EMPTY
55032: LIST
55033: LIST
55034: PUSH
55035: LD_VAR 0 7
55039: PPUSH
55040: LD_INT 3
55042: PPUSH
55043: LD_INT 4
55045: PPUSH
55046: CALL_OW 272
55050: PUSH
55051: LD_VAR 0 8
55055: PPUSH
55056: LD_INT 3
55058: PPUSH
55059: LD_INT 4
55061: PPUSH
55062: CALL_OW 273
55066: PUSH
55067: EMPTY
55068: LIST
55069: LIST
55070: PUSH
55071: LD_VAR 0 7
55075: PPUSH
55076: LD_INT 4
55078: PPUSH
55079: LD_INT 4
55081: PPUSH
55082: CALL_OW 272
55086: PUSH
55087: LD_VAR 0 8
55091: PPUSH
55092: LD_INT 4
55094: PPUSH
55095: LD_INT 4
55097: PPUSH
55098: CALL_OW 273
55102: PUSH
55103: EMPTY
55104: LIST
55105: LIST
55106: PUSH
55107: LD_VAR 0 7
55111: PPUSH
55112: LD_INT 5
55114: PPUSH
55115: LD_INT 4
55117: PPUSH
55118: CALL_OW 272
55122: PUSH
55123: LD_VAR 0 8
55127: PPUSH
55128: LD_INT 5
55130: PPUSH
55131: LD_INT 4
55133: PPUSH
55134: CALL_OW 273
55138: PUSH
55139: EMPTY
55140: LIST
55141: LIST
55142: PUSH
55143: EMPTY
55144: LIST
55145: LIST
55146: LIST
55147: LIST
55148: LIST
55149: LIST
55150: ST_TO_ADDR
// for i = tmp downto 1 do
55151: LD_ADDR_VAR 0 4
55155: PUSH
55156: DOUBLE
55157: LD_VAR 0 6
55161: INC
55162: ST_TO_ADDR
55163: LD_INT 1
55165: PUSH
55166: FOR_DOWNTO
55167: IFFALSE 55268
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
55169: LD_VAR 0 6
55173: PUSH
55174: LD_VAR 0 4
55178: ARRAY
55179: PUSH
55180: LD_INT 1
55182: ARRAY
55183: PPUSH
55184: LD_VAR 0 6
55188: PUSH
55189: LD_VAR 0 4
55193: ARRAY
55194: PUSH
55195: LD_INT 2
55197: ARRAY
55198: PPUSH
55199: CALL_OW 488
55203: NOT
55204: PUSH
55205: LD_VAR 0 6
55209: PUSH
55210: LD_VAR 0 4
55214: ARRAY
55215: PUSH
55216: LD_INT 1
55218: ARRAY
55219: PPUSH
55220: LD_VAR 0 6
55224: PUSH
55225: LD_VAR 0 4
55229: ARRAY
55230: PUSH
55231: LD_INT 2
55233: ARRAY
55234: PPUSH
55235: CALL_OW 428
55239: PUSH
55240: LD_INT 0
55242: NONEQUAL
55243: OR
55244: IFFALSE 55266
// tmp := Delete ( tmp , i ) ;
55246: LD_ADDR_VAR 0 6
55250: PUSH
55251: LD_VAR 0 6
55255: PPUSH
55256: LD_VAR 0 4
55260: PPUSH
55261: CALL_OW 3
55265: ST_TO_ADDR
55266: GO 55166
55268: POP
55269: POP
// j := GetClosestHex ( unit , tmp ) ;
55270: LD_ADDR_VAR 0 5
55274: PUSH
55275: LD_VAR 0 1
55279: PPUSH
55280: LD_VAR 0 6
55284: PPUSH
55285: CALL 54572 0 2
55289: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
55290: LD_VAR 0 1
55294: PPUSH
55295: LD_VAR 0 5
55299: PUSH
55300: LD_INT 1
55302: ARRAY
55303: PPUSH
55304: LD_VAR 0 5
55308: PUSH
55309: LD_INT 2
55311: ARRAY
55312: PPUSH
55313: CALL_OW 111
// end ;
55317: LD_VAR 0 3
55321: RET
// export function PrepareApemanSoldier ( ) ; begin
55322: LD_INT 0
55324: PPUSH
// uc_nation := 0 ;
55325: LD_ADDR_OWVAR 21
55329: PUSH
55330: LD_INT 0
55332: ST_TO_ADDR
// hc_sex := sex_male ;
55333: LD_ADDR_OWVAR 27
55337: PUSH
55338: LD_INT 1
55340: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
55341: LD_ADDR_OWVAR 28
55345: PUSH
55346: LD_INT 15
55348: ST_TO_ADDR
// hc_gallery :=  ;
55349: LD_ADDR_OWVAR 33
55353: PUSH
55354: LD_STRING 
55356: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
55357: LD_ADDR_OWVAR 31
55361: PUSH
55362: LD_INT 0
55364: PPUSH
55365: LD_INT 3
55367: PPUSH
55368: CALL_OW 12
55372: PUSH
55373: LD_INT 0
55375: PPUSH
55376: LD_INT 3
55378: PPUSH
55379: CALL_OW 12
55383: PUSH
55384: LD_INT 0
55386: PUSH
55387: LD_INT 0
55389: PUSH
55390: EMPTY
55391: LIST
55392: LIST
55393: LIST
55394: LIST
55395: ST_TO_ADDR
// end ;
55396: LD_VAR 0 1
55400: RET
// export function PrepareApemanEngineer ( ) ; begin
55401: LD_INT 0
55403: PPUSH
// uc_nation := 0 ;
55404: LD_ADDR_OWVAR 21
55408: PUSH
55409: LD_INT 0
55411: ST_TO_ADDR
// hc_sex := sex_male ;
55412: LD_ADDR_OWVAR 27
55416: PUSH
55417: LD_INT 1
55419: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
55420: LD_ADDR_OWVAR 28
55424: PUSH
55425: LD_INT 16
55427: ST_TO_ADDR
// hc_gallery :=  ;
55428: LD_ADDR_OWVAR 33
55432: PUSH
55433: LD_STRING 
55435: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
55436: LD_ADDR_OWVAR 31
55440: PUSH
55441: LD_INT 0
55443: PPUSH
55444: LD_INT 3
55446: PPUSH
55447: CALL_OW 12
55451: PUSH
55452: LD_INT 0
55454: PPUSH
55455: LD_INT 3
55457: PPUSH
55458: CALL_OW 12
55462: PUSH
55463: LD_INT 0
55465: PUSH
55466: LD_INT 0
55468: PUSH
55469: EMPTY
55470: LIST
55471: LIST
55472: LIST
55473: LIST
55474: ST_TO_ADDR
// end ;
55475: LD_VAR 0 1
55479: RET
// export function PrepareApeman ( agressivity ) ; begin
55480: LD_INT 0
55482: PPUSH
// uc_side := 0 ;
55483: LD_ADDR_OWVAR 20
55487: PUSH
55488: LD_INT 0
55490: ST_TO_ADDR
// uc_nation := 0 ;
55491: LD_ADDR_OWVAR 21
55495: PUSH
55496: LD_INT 0
55498: ST_TO_ADDR
// hc_sex := sex_male ;
55499: LD_ADDR_OWVAR 27
55503: PUSH
55504: LD_INT 1
55506: ST_TO_ADDR
// hc_class := class_apeman ;
55507: LD_ADDR_OWVAR 28
55511: PUSH
55512: LD_INT 12
55514: ST_TO_ADDR
// hc_gallery :=  ;
55515: LD_ADDR_OWVAR 33
55519: PUSH
55520: LD_STRING 
55522: ST_TO_ADDR
// if agressivity = 0 then
55523: LD_VAR 0 1
55527: PUSH
55528: LD_INT 0
55530: EQUAL
55531: IFFALSE 55543
// hc_agressivity := 0 else
55533: LD_ADDR_OWVAR 35
55537: PUSH
55538: LD_INT 0
55540: ST_TO_ADDR
55541: GO 55564
// hc_agressivity := rand ( - agressivity , agressivity ) ;
55543: LD_ADDR_OWVAR 35
55547: PUSH
55548: LD_VAR 0 1
55552: NEG
55553: PPUSH
55554: LD_VAR 0 1
55558: PPUSH
55559: CALL_OW 12
55563: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
55564: LD_ADDR_OWVAR 31
55568: PUSH
55569: LD_INT 0
55571: PPUSH
55572: LD_INT 3
55574: PPUSH
55575: CALL_OW 12
55579: PUSH
55580: LD_INT 0
55582: PPUSH
55583: LD_INT 3
55585: PPUSH
55586: CALL_OW 12
55590: PUSH
55591: LD_INT 0
55593: PUSH
55594: LD_INT 0
55596: PUSH
55597: EMPTY
55598: LIST
55599: LIST
55600: LIST
55601: LIST
55602: ST_TO_ADDR
// end ;
55603: LD_VAR 0 2
55607: RET
// export function PrepareTiger ( agressivity ) ; begin
55608: LD_INT 0
55610: PPUSH
// uc_side := 0 ;
55611: LD_ADDR_OWVAR 20
55615: PUSH
55616: LD_INT 0
55618: ST_TO_ADDR
// uc_nation := 0 ;
55619: LD_ADDR_OWVAR 21
55623: PUSH
55624: LD_INT 0
55626: ST_TO_ADDR
// hc_class := class_tiger ;
55627: LD_ADDR_OWVAR 28
55631: PUSH
55632: LD_INT 14
55634: ST_TO_ADDR
// hc_gallery :=  ;
55635: LD_ADDR_OWVAR 33
55639: PUSH
55640: LD_STRING 
55642: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
55643: LD_ADDR_OWVAR 35
55647: PUSH
55648: LD_VAR 0 1
55652: NEG
55653: PPUSH
55654: LD_VAR 0 1
55658: PPUSH
55659: CALL_OW 12
55663: ST_TO_ADDR
// end ;
55664: LD_VAR 0 2
55668: RET
// export function PrepareEnchidna ( ) ; begin
55669: LD_INT 0
55671: PPUSH
// uc_side := 0 ;
55672: LD_ADDR_OWVAR 20
55676: PUSH
55677: LD_INT 0
55679: ST_TO_ADDR
// uc_nation := 0 ;
55680: LD_ADDR_OWVAR 21
55684: PUSH
55685: LD_INT 0
55687: ST_TO_ADDR
// hc_class := class_baggie ;
55688: LD_ADDR_OWVAR 28
55692: PUSH
55693: LD_INT 13
55695: ST_TO_ADDR
// hc_gallery :=  ;
55696: LD_ADDR_OWVAR 33
55700: PUSH
55701: LD_STRING 
55703: ST_TO_ADDR
// end ;
55704: LD_VAR 0 1
55708: RET
// export function PrepareFrog ( ) ; begin
55709: LD_INT 0
55711: PPUSH
// uc_side := 0 ;
55712: LD_ADDR_OWVAR 20
55716: PUSH
55717: LD_INT 0
55719: ST_TO_ADDR
// uc_nation := 0 ;
55720: LD_ADDR_OWVAR 21
55724: PUSH
55725: LD_INT 0
55727: ST_TO_ADDR
// hc_class := class_frog ;
55728: LD_ADDR_OWVAR 28
55732: PUSH
55733: LD_INT 19
55735: ST_TO_ADDR
// hc_gallery :=  ;
55736: LD_ADDR_OWVAR 33
55740: PUSH
55741: LD_STRING 
55743: ST_TO_ADDR
// end ;
55744: LD_VAR 0 1
55748: RET
// export function PrepareFish ( ) ; begin
55749: LD_INT 0
55751: PPUSH
// uc_side := 0 ;
55752: LD_ADDR_OWVAR 20
55756: PUSH
55757: LD_INT 0
55759: ST_TO_ADDR
// uc_nation := 0 ;
55760: LD_ADDR_OWVAR 21
55764: PUSH
55765: LD_INT 0
55767: ST_TO_ADDR
// hc_class := class_fish ;
55768: LD_ADDR_OWVAR 28
55772: PUSH
55773: LD_INT 20
55775: ST_TO_ADDR
// hc_gallery :=  ;
55776: LD_ADDR_OWVAR 33
55780: PUSH
55781: LD_STRING 
55783: ST_TO_ADDR
// end ;
55784: LD_VAR 0 1
55788: RET
// export function PrepareBird ( ) ; begin
55789: LD_INT 0
55791: PPUSH
// uc_side := 0 ;
55792: LD_ADDR_OWVAR 20
55796: PUSH
55797: LD_INT 0
55799: ST_TO_ADDR
// uc_nation := 0 ;
55800: LD_ADDR_OWVAR 21
55804: PUSH
55805: LD_INT 0
55807: ST_TO_ADDR
// hc_class := class_phororhacos ;
55808: LD_ADDR_OWVAR 28
55812: PUSH
55813: LD_INT 18
55815: ST_TO_ADDR
// hc_gallery :=  ;
55816: LD_ADDR_OWVAR 33
55820: PUSH
55821: LD_STRING 
55823: ST_TO_ADDR
// end ;
55824: LD_VAR 0 1
55828: RET
// export function PrepareHorse ( ) ; begin
55829: LD_INT 0
55831: PPUSH
// uc_side := 0 ;
55832: LD_ADDR_OWVAR 20
55836: PUSH
55837: LD_INT 0
55839: ST_TO_ADDR
// uc_nation := 0 ;
55840: LD_ADDR_OWVAR 21
55844: PUSH
55845: LD_INT 0
55847: ST_TO_ADDR
// hc_class := class_horse ;
55848: LD_ADDR_OWVAR 28
55852: PUSH
55853: LD_INT 21
55855: ST_TO_ADDR
// hc_gallery :=  ;
55856: LD_ADDR_OWVAR 33
55860: PUSH
55861: LD_STRING 
55863: ST_TO_ADDR
// end ;
55864: LD_VAR 0 1
55868: RET
// export function PrepareMastodont ( ) ; begin
55869: LD_INT 0
55871: PPUSH
// uc_side := 0 ;
55872: LD_ADDR_OWVAR 20
55876: PUSH
55877: LD_INT 0
55879: ST_TO_ADDR
// uc_nation := 0 ;
55880: LD_ADDR_OWVAR 21
55884: PUSH
55885: LD_INT 0
55887: ST_TO_ADDR
// vc_chassis := class_mastodont ;
55888: LD_ADDR_OWVAR 37
55892: PUSH
55893: LD_INT 31
55895: ST_TO_ADDR
// vc_control := control_rider ;
55896: LD_ADDR_OWVAR 38
55900: PUSH
55901: LD_INT 4
55903: ST_TO_ADDR
// end ;
55904: LD_VAR 0 1
55908: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
55909: LD_INT 0
55911: PPUSH
55912: PPUSH
55913: PPUSH
// uc_side = 0 ;
55914: LD_ADDR_OWVAR 20
55918: PUSH
55919: LD_INT 0
55921: ST_TO_ADDR
// uc_nation = 0 ;
55922: LD_ADDR_OWVAR 21
55926: PUSH
55927: LD_INT 0
55929: ST_TO_ADDR
// InitHc_All ( ) ;
55930: CALL_OW 584
// InitVc ;
55934: CALL_OW 20
// if mastodonts then
55938: LD_VAR 0 6
55942: IFFALSE 56009
// for i = 1 to mastodonts do
55944: LD_ADDR_VAR 0 11
55948: PUSH
55949: DOUBLE
55950: LD_INT 1
55952: DEC
55953: ST_TO_ADDR
55954: LD_VAR 0 6
55958: PUSH
55959: FOR_TO
55960: IFFALSE 56007
// begin vc_chassis := 31 ;
55962: LD_ADDR_OWVAR 37
55966: PUSH
55967: LD_INT 31
55969: ST_TO_ADDR
// vc_control := control_rider ;
55970: LD_ADDR_OWVAR 38
55974: PUSH
55975: LD_INT 4
55977: ST_TO_ADDR
// animal := CreateVehicle ;
55978: LD_ADDR_VAR 0 12
55982: PUSH
55983: CALL_OW 45
55987: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
55988: LD_VAR 0 12
55992: PPUSH
55993: LD_VAR 0 8
55997: PPUSH
55998: LD_INT 0
56000: PPUSH
56001: CALL 58137 0 3
// end ;
56005: GO 55959
56007: POP
56008: POP
// if horses then
56009: LD_VAR 0 5
56013: IFFALSE 56080
// for i = 1 to horses do
56015: LD_ADDR_VAR 0 11
56019: PUSH
56020: DOUBLE
56021: LD_INT 1
56023: DEC
56024: ST_TO_ADDR
56025: LD_VAR 0 5
56029: PUSH
56030: FOR_TO
56031: IFFALSE 56078
// begin hc_class := 21 ;
56033: LD_ADDR_OWVAR 28
56037: PUSH
56038: LD_INT 21
56040: ST_TO_ADDR
// hc_gallery :=  ;
56041: LD_ADDR_OWVAR 33
56045: PUSH
56046: LD_STRING 
56048: ST_TO_ADDR
// animal := CreateHuman ;
56049: LD_ADDR_VAR 0 12
56053: PUSH
56054: CALL_OW 44
56058: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
56059: LD_VAR 0 12
56063: PPUSH
56064: LD_VAR 0 8
56068: PPUSH
56069: LD_INT 0
56071: PPUSH
56072: CALL 58137 0 3
// end ;
56076: GO 56030
56078: POP
56079: POP
// if birds then
56080: LD_VAR 0 1
56084: IFFALSE 56151
// for i = 1 to birds do
56086: LD_ADDR_VAR 0 11
56090: PUSH
56091: DOUBLE
56092: LD_INT 1
56094: DEC
56095: ST_TO_ADDR
56096: LD_VAR 0 1
56100: PUSH
56101: FOR_TO
56102: IFFALSE 56149
// begin hc_class := 18 ;
56104: LD_ADDR_OWVAR 28
56108: PUSH
56109: LD_INT 18
56111: ST_TO_ADDR
// hc_gallery =  ;
56112: LD_ADDR_OWVAR 33
56116: PUSH
56117: LD_STRING 
56119: ST_TO_ADDR
// animal := CreateHuman ;
56120: LD_ADDR_VAR 0 12
56124: PUSH
56125: CALL_OW 44
56129: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
56130: LD_VAR 0 12
56134: PPUSH
56135: LD_VAR 0 8
56139: PPUSH
56140: LD_INT 0
56142: PPUSH
56143: CALL 58137 0 3
// end ;
56147: GO 56101
56149: POP
56150: POP
// if tigers then
56151: LD_VAR 0 2
56155: IFFALSE 56239
// for i = 1 to tigers do
56157: LD_ADDR_VAR 0 11
56161: PUSH
56162: DOUBLE
56163: LD_INT 1
56165: DEC
56166: ST_TO_ADDR
56167: LD_VAR 0 2
56171: PUSH
56172: FOR_TO
56173: IFFALSE 56237
// begin hc_class = class_tiger ;
56175: LD_ADDR_OWVAR 28
56179: PUSH
56180: LD_INT 14
56182: ST_TO_ADDR
// hc_gallery =  ;
56183: LD_ADDR_OWVAR 33
56187: PUSH
56188: LD_STRING 
56190: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
56191: LD_ADDR_OWVAR 35
56195: PUSH
56196: LD_INT 7
56198: NEG
56199: PPUSH
56200: LD_INT 7
56202: PPUSH
56203: CALL_OW 12
56207: ST_TO_ADDR
// animal := CreateHuman ;
56208: LD_ADDR_VAR 0 12
56212: PUSH
56213: CALL_OW 44
56217: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
56218: LD_VAR 0 12
56222: PPUSH
56223: LD_VAR 0 8
56227: PPUSH
56228: LD_INT 0
56230: PPUSH
56231: CALL 58137 0 3
// end ;
56235: GO 56172
56237: POP
56238: POP
// if apemans then
56239: LD_VAR 0 3
56243: IFFALSE 56366
// for i = 1 to apemans do
56245: LD_ADDR_VAR 0 11
56249: PUSH
56250: DOUBLE
56251: LD_INT 1
56253: DEC
56254: ST_TO_ADDR
56255: LD_VAR 0 3
56259: PUSH
56260: FOR_TO
56261: IFFALSE 56364
// begin hc_class = class_apeman ;
56263: LD_ADDR_OWVAR 28
56267: PUSH
56268: LD_INT 12
56270: ST_TO_ADDR
// hc_gallery =  ;
56271: LD_ADDR_OWVAR 33
56275: PUSH
56276: LD_STRING 
56278: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
56279: LD_ADDR_OWVAR 35
56283: PUSH
56284: LD_INT 2
56286: NEG
56287: PPUSH
56288: LD_INT 2
56290: PPUSH
56291: CALL_OW 12
56295: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
56296: LD_ADDR_OWVAR 31
56300: PUSH
56301: LD_INT 1
56303: PPUSH
56304: LD_INT 3
56306: PPUSH
56307: CALL_OW 12
56311: PUSH
56312: LD_INT 1
56314: PPUSH
56315: LD_INT 3
56317: PPUSH
56318: CALL_OW 12
56322: PUSH
56323: LD_INT 0
56325: PUSH
56326: LD_INT 0
56328: PUSH
56329: EMPTY
56330: LIST
56331: LIST
56332: LIST
56333: LIST
56334: ST_TO_ADDR
// animal := CreateHuman ;
56335: LD_ADDR_VAR 0 12
56339: PUSH
56340: CALL_OW 44
56344: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
56345: LD_VAR 0 12
56349: PPUSH
56350: LD_VAR 0 8
56354: PPUSH
56355: LD_INT 0
56357: PPUSH
56358: CALL 58137 0 3
// end ;
56362: GO 56260
56364: POP
56365: POP
// if enchidnas then
56366: LD_VAR 0 4
56370: IFFALSE 56437
// for i = 1 to enchidnas do
56372: LD_ADDR_VAR 0 11
56376: PUSH
56377: DOUBLE
56378: LD_INT 1
56380: DEC
56381: ST_TO_ADDR
56382: LD_VAR 0 4
56386: PUSH
56387: FOR_TO
56388: IFFALSE 56435
// begin hc_class = 13 ;
56390: LD_ADDR_OWVAR 28
56394: PUSH
56395: LD_INT 13
56397: ST_TO_ADDR
// hc_gallery =  ;
56398: LD_ADDR_OWVAR 33
56402: PUSH
56403: LD_STRING 
56405: ST_TO_ADDR
// animal := CreateHuman ;
56406: LD_ADDR_VAR 0 12
56410: PUSH
56411: CALL_OW 44
56415: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
56416: LD_VAR 0 12
56420: PPUSH
56421: LD_VAR 0 8
56425: PPUSH
56426: LD_INT 0
56428: PPUSH
56429: CALL 58137 0 3
// end ;
56433: GO 56387
56435: POP
56436: POP
// if fishes then
56437: LD_VAR 0 7
56441: IFFALSE 56508
// for i = 1 to fishes do
56443: LD_ADDR_VAR 0 11
56447: PUSH
56448: DOUBLE
56449: LD_INT 1
56451: DEC
56452: ST_TO_ADDR
56453: LD_VAR 0 7
56457: PUSH
56458: FOR_TO
56459: IFFALSE 56506
// begin hc_class = 20 ;
56461: LD_ADDR_OWVAR 28
56465: PUSH
56466: LD_INT 20
56468: ST_TO_ADDR
// hc_gallery =  ;
56469: LD_ADDR_OWVAR 33
56473: PUSH
56474: LD_STRING 
56476: ST_TO_ADDR
// animal := CreateHuman ;
56477: LD_ADDR_VAR 0 12
56481: PUSH
56482: CALL_OW 44
56486: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
56487: LD_VAR 0 12
56491: PPUSH
56492: LD_VAR 0 9
56496: PPUSH
56497: LD_INT 0
56499: PPUSH
56500: CALL 58137 0 3
// end ;
56504: GO 56458
56506: POP
56507: POP
// end ;
56508: LD_VAR 0 10
56512: RET
// export function WantHeal ( sci , unit ) ; begin
56513: LD_INT 0
56515: PPUSH
// if GetTaskList ( sci ) > 0 then
56516: LD_VAR 0 1
56520: PPUSH
56521: CALL_OW 437
56525: PUSH
56526: LD_INT 0
56528: GREATER
56529: IFFALSE 56599
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
56531: LD_VAR 0 1
56535: PPUSH
56536: CALL_OW 437
56540: PUSH
56541: LD_INT 1
56543: ARRAY
56544: PUSH
56545: LD_INT 1
56547: ARRAY
56548: PUSH
56549: LD_STRING l
56551: EQUAL
56552: PUSH
56553: LD_VAR 0 1
56557: PPUSH
56558: CALL_OW 437
56562: PUSH
56563: LD_INT 1
56565: ARRAY
56566: PUSH
56567: LD_INT 4
56569: ARRAY
56570: PUSH
56571: LD_VAR 0 2
56575: EQUAL
56576: AND
56577: IFFALSE 56589
// result := true else
56579: LD_ADDR_VAR 0 3
56583: PUSH
56584: LD_INT 1
56586: ST_TO_ADDR
56587: GO 56597
// result := false ;
56589: LD_ADDR_VAR 0 3
56593: PUSH
56594: LD_INT 0
56596: ST_TO_ADDR
// end else
56597: GO 56607
// result := false ;
56599: LD_ADDR_VAR 0 3
56603: PUSH
56604: LD_INT 0
56606: ST_TO_ADDR
// end ;
56607: LD_VAR 0 3
56611: RET
// export function HealTarget ( sci ) ; begin
56612: LD_INT 0
56614: PPUSH
// if not sci then
56615: LD_VAR 0 1
56619: NOT
56620: IFFALSE 56624
// exit ;
56622: GO 56689
// result := 0 ;
56624: LD_ADDR_VAR 0 2
56628: PUSH
56629: LD_INT 0
56631: ST_TO_ADDR
// if GetTaskList ( sci ) then
56632: LD_VAR 0 1
56636: PPUSH
56637: CALL_OW 437
56641: IFFALSE 56689
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
56643: LD_VAR 0 1
56647: PPUSH
56648: CALL_OW 437
56652: PUSH
56653: LD_INT 1
56655: ARRAY
56656: PUSH
56657: LD_INT 1
56659: ARRAY
56660: PUSH
56661: LD_STRING l
56663: EQUAL
56664: IFFALSE 56689
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
56666: LD_ADDR_VAR 0 2
56670: PUSH
56671: LD_VAR 0 1
56675: PPUSH
56676: CALL_OW 437
56680: PUSH
56681: LD_INT 1
56683: ARRAY
56684: PUSH
56685: LD_INT 4
56687: ARRAY
56688: ST_TO_ADDR
// end ;
56689: LD_VAR 0 2
56693: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
56694: LD_INT 0
56696: PPUSH
56697: PPUSH
56698: PPUSH
56699: PPUSH
// if not base_units then
56700: LD_VAR 0 1
56704: NOT
56705: IFFALSE 56709
// exit ;
56707: GO 56796
// result := false ;
56709: LD_ADDR_VAR 0 2
56713: PUSH
56714: LD_INT 0
56716: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
56717: LD_ADDR_VAR 0 5
56721: PUSH
56722: LD_VAR 0 1
56726: PPUSH
56727: LD_INT 21
56729: PUSH
56730: LD_INT 3
56732: PUSH
56733: EMPTY
56734: LIST
56735: LIST
56736: PPUSH
56737: CALL_OW 72
56741: ST_TO_ADDR
// if not tmp then
56742: LD_VAR 0 5
56746: NOT
56747: IFFALSE 56751
// exit ;
56749: GO 56796
// for i in tmp do
56751: LD_ADDR_VAR 0 3
56755: PUSH
56756: LD_VAR 0 5
56760: PUSH
56761: FOR_IN
56762: IFFALSE 56794
// begin result := EnemyInRange ( i , 22 ) ;
56764: LD_ADDR_VAR 0 2
56768: PUSH
56769: LD_VAR 0 3
56773: PPUSH
56774: LD_INT 22
56776: PPUSH
56777: CALL 54374 0 2
56781: ST_TO_ADDR
// if result then
56782: LD_VAR 0 2
56786: IFFALSE 56792
// exit ;
56788: POP
56789: POP
56790: GO 56796
// end ;
56792: GO 56761
56794: POP
56795: POP
// end ;
56796: LD_VAR 0 2
56800: RET
// export function FilterByTag ( units , tag ) ; begin
56801: LD_INT 0
56803: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
56804: LD_ADDR_VAR 0 3
56808: PUSH
56809: LD_VAR 0 1
56813: PPUSH
56814: LD_INT 120
56816: PUSH
56817: LD_VAR 0 2
56821: PUSH
56822: EMPTY
56823: LIST
56824: LIST
56825: PPUSH
56826: CALL_OW 72
56830: ST_TO_ADDR
// end ;
56831: LD_VAR 0 3
56835: RET
// export function IsDriver ( un ) ; begin
56836: LD_INT 0
56838: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
56839: LD_ADDR_VAR 0 2
56843: PUSH
56844: LD_VAR 0 1
56848: PUSH
56849: LD_INT 55
56851: PUSH
56852: EMPTY
56853: LIST
56854: PPUSH
56855: CALL_OW 69
56859: IN
56860: ST_TO_ADDR
// end ;
56861: LD_VAR 0 2
56865: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
56866: LD_INT 0
56868: PPUSH
56869: PPUSH
// list := [ ] ;
56870: LD_ADDR_VAR 0 5
56874: PUSH
56875: EMPTY
56876: ST_TO_ADDR
// case d of 0 :
56877: LD_VAR 0 3
56881: PUSH
56882: LD_INT 0
56884: DOUBLE
56885: EQUAL
56886: IFTRUE 56890
56888: GO 57023
56890: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
56891: LD_ADDR_VAR 0 5
56895: PUSH
56896: LD_VAR 0 1
56900: PUSH
56901: LD_INT 4
56903: MINUS
56904: PUSH
56905: LD_VAR 0 2
56909: PUSH
56910: LD_INT 4
56912: MINUS
56913: PUSH
56914: LD_INT 2
56916: PUSH
56917: EMPTY
56918: LIST
56919: LIST
56920: LIST
56921: PUSH
56922: LD_VAR 0 1
56926: PUSH
56927: LD_INT 3
56929: MINUS
56930: PUSH
56931: LD_VAR 0 2
56935: PUSH
56936: LD_INT 1
56938: PUSH
56939: EMPTY
56940: LIST
56941: LIST
56942: LIST
56943: PUSH
56944: LD_VAR 0 1
56948: PUSH
56949: LD_INT 4
56951: PLUS
56952: PUSH
56953: LD_VAR 0 2
56957: PUSH
56958: LD_INT 4
56960: PUSH
56961: EMPTY
56962: LIST
56963: LIST
56964: LIST
56965: PUSH
56966: LD_VAR 0 1
56970: PUSH
56971: LD_INT 3
56973: PLUS
56974: PUSH
56975: LD_VAR 0 2
56979: PUSH
56980: LD_INT 3
56982: PLUS
56983: PUSH
56984: LD_INT 5
56986: PUSH
56987: EMPTY
56988: LIST
56989: LIST
56990: LIST
56991: PUSH
56992: LD_VAR 0 1
56996: PUSH
56997: LD_VAR 0 2
57001: PUSH
57002: LD_INT 4
57004: PLUS
57005: PUSH
57006: LD_INT 0
57008: PUSH
57009: EMPTY
57010: LIST
57011: LIST
57012: LIST
57013: PUSH
57014: EMPTY
57015: LIST
57016: LIST
57017: LIST
57018: LIST
57019: LIST
57020: ST_TO_ADDR
// end ; 1 :
57021: GO 57721
57023: LD_INT 1
57025: DOUBLE
57026: EQUAL
57027: IFTRUE 57031
57029: GO 57164
57031: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
57032: LD_ADDR_VAR 0 5
57036: PUSH
57037: LD_VAR 0 1
57041: PUSH
57042: LD_VAR 0 2
57046: PUSH
57047: LD_INT 4
57049: MINUS
57050: PUSH
57051: LD_INT 3
57053: PUSH
57054: EMPTY
57055: LIST
57056: LIST
57057: LIST
57058: PUSH
57059: LD_VAR 0 1
57063: PUSH
57064: LD_INT 3
57066: MINUS
57067: PUSH
57068: LD_VAR 0 2
57072: PUSH
57073: LD_INT 3
57075: MINUS
57076: PUSH
57077: LD_INT 2
57079: PUSH
57080: EMPTY
57081: LIST
57082: LIST
57083: LIST
57084: PUSH
57085: LD_VAR 0 1
57089: PUSH
57090: LD_INT 4
57092: MINUS
57093: PUSH
57094: LD_VAR 0 2
57098: PUSH
57099: LD_INT 1
57101: PUSH
57102: EMPTY
57103: LIST
57104: LIST
57105: LIST
57106: PUSH
57107: LD_VAR 0 1
57111: PUSH
57112: LD_VAR 0 2
57116: PUSH
57117: LD_INT 3
57119: PLUS
57120: PUSH
57121: LD_INT 0
57123: PUSH
57124: EMPTY
57125: LIST
57126: LIST
57127: LIST
57128: PUSH
57129: LD_VAR 0 1
57133: PUSH
57134: LD_INT 4
57136: PLUS
57137: PUSH
57138: LD_VAR 0 2
57142: PUSH
57143: LD_INT 4
57145: PLUS
57146: PUSH
57147: LD_INT 5
57149: PUSH
57150: EMPTY
57151: LIST
57152: LIST
57153: LIST
57154: PUSH
57155: EMPTY
57156: LIST
57157: LIST
57158: LIST
57159: LIST
57160: LIST
57161: ST_TO_ADDR
// end ; 2 :
57162: GO 57721
57164: LD_INT 2
57166: DOUBLE
57167: EQUAL
57168: IFTRUE 57172
57170: GO 57301
57172: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
57173: LD_ADDR_VAR 0 5
57177: PUSH
57178: LD_VAR 0 1
57182: PUSH
57183: LD_VAR 0 2
57187: PUSH
57188: LD_INT 3
57190: MINUS
57191: PUSH
57192: LD_INT 3
57194: PUSH
57195: EMPTY
57196: LIST
57197: LIST
57198: LIST
57199: PUSH
57200: LD_VAR 0 1
57204: PUSH
57205: LD_INT 4
57207: PLUS
57208: PUSH
57209: LD_VAR 0 2
57213: PUSH
57214: LD_INT 4
57216: PUSH
57217: EMPTY
57218: LIST
57219: LIST
57220: LIST
57221: PUSH
57222: LD_VAR 0 1
57226: PUSH
57227: LD_VAR 0 2
57231: PUSH
57232: LD_INT 4
57234: PLUS
57235: PUSH
57236: LD_INT 0
57238: PUSH
57239: EMPTY
57240: LIST
57241: LIST
57242: LIST
57243: PUSH
57244: LD_VAR 0 1
57248: PUSH
57249: LD_INT 3
57251: MINUS
57252: PUSH
57253: LD_VAR 0 2
57257: PUSH
57258: LD_INT 1
57260: PUSH
57261: EMPTY
57262: LIST
57263: LIST
57264: LIST
57265: PUSH
57266: LD_VAR 0 1
57270: PUSH
57271: LD_INT 4
57273: MINUS
57274: PUSH
57275: LD_VAR 0 2
57279: PUSH
57280: LD_INT 4
57282: MINUS
57283: PUSH
57284: LD_INT 2
57286: PUSH
57287: EMPTY
57288: LIST
57289: LIST
57290: LIST
57291: PUSH
57292: EMPTY
57293: LIST
57294: LIST
57295: LIST
57296: LIST
57297: LIST
57298: ST_TO_ADDR
// end ; 3 :
57299: GO 57721
57301: LD_INT 3
57303: DOUBLE
57304: EQUAL
57305: IFTRUE 57309
57307: GO 57442
57309: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
57310: LD_ADDR_VAR 0 5
57314: PUSH
57315: LD_VAR 0 1
57319: PUSH
57320: LD_INT 3
57322: PLUS
57323: PUSH
57324: LD_VAR 0 2
57328: PUSH
57329: LD_INT 4
57331: PUSH
57332: EMPTY
57333: LIST
57334: LIST
57335: LIST
57336: PUSH
57337: LD_VAR 0 1
57341: PUSH
57342: LD_INT 4
57344: PLUS
57345: PUSH
57346: LD_VAR 0 2
57350: PUSH
57351: LD_INT 4
57353: PLUS
57354: PUSH
57355: LD_INT 5
57357: PUSH
57358: EMPTY
57359: LIST
57360: LIST
57361: LIST
57362: PUSH
57363: LD_VAR 0 1
57367: PUSH
57368: LD_INT 4
57370: MINUS
57371: PUSH
57372: LD_VAR 0 2
57376: PUSH
57377: LD_INT 1
57379: PUSH
57380: EMPTY
57381: LIST
57382: LIST
57383: LIST
57384: PUSH
57385: LD_VAR 0 1
57389: PUSH
57390: LD_VAR 0 2
57394: PUSH
57395: LD_INT 4
57397: MINUS
57398: PUSH
57399: LD_INT 3
57401: PUSH
57402: EMPTY
57403: LIST
57404: LIST
57405: LIST
57406: PUSH
57407: LD_VAR 0 1
57411: PUSH
57412: LD_INT 3
57414: MINUS
57415: PUSH
57416: LD_VAR 0 2
57420: PUSH
57421: LD_INT 3
57423: MINUS
57424: PUSH
57425: LD_INT 2
57427: PUSH
57428: EMPTY
57429: LIST
57430: LIST
57431: LIST
57432: PUSH
57433: EMPTY
57434: LIST
57435: LIST
57436: LIST
57437: LIST
57438: LIST
57439: ST_TO_ADDR
// end ; 4 :
57440: GO 57721
57442: LD_INT 4
57444: DOUBLE
57445: EQUAL
57446: IFTRUE 57450
57448: GO 57583
57450: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
57451: LD_ADDR_VAR 0 5
57455: PUSH
57456: LD_VAR 0 1
57460: PUSH
57461: LD_VAR 0 2
57465: PUSH
57466: LD_INT 4
57468: PLUS
57469: PUSH
57470: LD_INT 0
57472: PUSH
57473: EMPTY
57474: LIST
57475: LIST
57476: LIST
57477: PUSH
57478: LD_VAR 0 1
57482: PUSH
57483: LD_INT 3
57485: PLUS
57486: PUSH
57487: LD_VAR 0 2
57491: PUSH
57492: LD_INT 3
57494: PLUS
57495: PUSH
57496: LD_INT 5
57498: PUSH
57499: EMPTY
57500: LIST
57501: LIST
57502: LIST
57503: PUSH
57504: LD_VAR 0 1
57508: PUSH
57509: LD_INT 4
57511: PLUS
57512: PUSH
57513: LD_VAR 0 2
57517: PUSH
57518: LD_INT 4
57520: PUSH
57521: EMPTY
57522: LIST
57523: LIST
57524: LIST
57525: PUSH
57526: LD_VAR 0 1
57530: PUSH
57531: LD_VAR 0 2
57535: PUSH
57536: LD_INT 3
57538: MINUS
57539: PUSH
57540: LD_INT 3
57542: PUSH
57543: EMPTY
57544: LIST
57545: LIST
57546: LIST
57547: PUSH
57548: LD_VAR 0 1
57552: PUSH
57553: LD_INT 4
57555: MINUS
57556: PUSH
57557: LD_VAR 0 2
57561: PUSH
57562: LD_INT 4
57564: MINUS
57565: PUSH
57566: LD_INT 2
57568: PUSH
57569: EMPTY
57570: LIST
57571: LIST
57572: LIST
57573: PUSH
57574: EMPTY
57575: LIST
57576: LIST
57577: LIST
57578: LIST
57579: LIST
57580: ST_TO_ADDR
// end ; 5 :
57581: GO 57721
57583: LD_INT 5
57585: DOUBLE
57586: EQUAL
57587: IFTRUE 57591
57589: GO 57720
57591: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
57592: LD_ADDR_VAR 0 5
57596: PUSH
57597: LD_VAR 0 1
57601: PUSH
57602: LD_INT 4
57604: MINUS
57605: PUSH
57606: LD_VAR 0 2
57610: PUSH
57611: LD_INT 1
57613: PUSH
57614: EMPTY
57615: LIST
57616: LIST
57617: LIST
57618: PUSH
57619: LD_VAR 0 1
57623: PUSH
57624: LD_VAR 0 2
57628: PUSH
57629: LD_INT 4
57631: MINUS
57632: PUSH
57633: LD_INT 3
57635: PUSH
57636: EMPTY
57637: LIST
57638: LIST
57639: LIST
57640: PUSH
57641: LD_VAR 0 1
57645: PUSH
57646: LD_INT 4
57648: PLUS
57649: PUSH
57650: LD_VAR 0 2
57654: PUSH
57655: LD_INT 4
57657: PLUS
57658: PUSH
57659: LD_INT 5
57661: PUSH
57662: EMPTY
57663: LIST
57664: LIST
57665: LIST
57666: PUSH
57667: LD_VAR 0 1
57671: PUSH
57672: LD_INT 3
57674: PLUS
57675: PUSH
57676: LD_VAR 0 2
57680: PUSH
57681: LD_INT 4
57683: PUSH
57684: EMPTY
57685: LIST
57686: LIST
57687: LIST
57688: PUSH
57689: LD_VAR 0 1
57693: PUSH
57694: LD_VAR 0 2
57698: PUSH
57699: LD_INT 3
57701: PLUS
57702: PUSH
57703: LD_INT 0
57705: PUSH
57706: EMPTY
57707: LIST
57708: LIST
57709: LIST
57710: PUSH
57711: EMPTY
57712: LIST
57713: LIST
57714: LIST
57715: LIST
57716: LIST
57717: ST_TO_ADDR
// end ; end ;
57718: GO 57721
57720: POP
// result := list ;
57721: LD_ADDR_VAR 0 4
57725: PUSH
57726: LD_VAR 0 5
57730: ST_TO_ADDR
// end ;
57731: LD_VAR 0 4
57735: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
57736: LD_INT 0
57738: PPUSH
57739: PPUSH
57740: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
57741: LD_VAR 0 1
57745: NOT
57746: PUSH
57747: LD_VAR 0 2
57751: PUSH
57752: LD_INT 1
57754: PUSH
57755: LD_INT 2
57757: PUSH
57758: LD_INT 3
57760: PUSH
57761: LD_INT 4
57763: PUSH
57764: EMPTY
57765: LIST
57766: LIST
57767: LIST
57768: LIST
57769: IN
57770: NOT
57771: OR
57772: IFFALSE 57776
// exit ;
57774: GO 57859
// tmp := [ ] ;
57776: LD_ADDR_VAR 0 5
57780: PUSH
57781: EMPTY
57782: ST_TO_ADDR
// for i in units do
57783: LD_ADDR_VAR 0 4
57787: PUSH
57788: LD_VAR 0 1
57792: PUSH
57793: FOR_IN
57794: IFFALSE 57828
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
57796: LD_ADDR_VAR 0 5
57800: PUSH
57801: LD_VAR 0 5
57805: PPUSH
57806: LD_VAR 0 4
57810: PPUSH
57811: LD_VAR 0 2
57815: PPUSH
57816: CALL_OW 259
57820: PPUSH
57821: CALL 59232 0 2
57825: ST_TO_ADDR
57826: GO 57793
57828: POP
57829: POP
// if not tmp then
57830: LD_VAR 0 5
57834: NOT
57835: IFFALSE 57839
// exit ;
57837: GO 57859
// result := SortListByListDesc ( units , tmp ) ;
57839: LD_ADDR_VAR 0 3
57843: PUSH
57844: LD_VAR 0 1
57848: PPUSH
57849: LD_VAR 0 5
57853: PPUSH
57854: CALL_OW 77
57858: ST_TO_ADDR
// end ;
57859: LD_VAR 0 3
57863: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
57864: LD_INT 0
57866: PPUSH
57867: PPUSH
57868: PPUSH
// result := false ;
57869: LD_ADDR_VAR 0 3
57873: PUSH
57874: LD_INT 0
57876: ST_TO_ADDR
// if not building then
57877: LD_VAR 0 2
57881: NOT
57882: IFFALSE 57886
// exit ;
57884: GO 58024
// x := GetX ( building ) ;
57886: LD_ADDR_VAR 0 4
57890: PUSH
57891: LD_VAR 0 2
57895: PPUSH
57896: CALL_OW 250
57900: ST_TO_ADDR
// y := GetY ( building ) ;
57901: LD_ADDR_VAR 0 5
57905: PUSH
57906: LD_VAR 0 2
57910: PPUSH
57911: CALL_OW 251
57915: ST_TO_ADDR
// if not x or not y then
57916: LD_VAR 0 4
57920: NOT
57921: PUSH
57922: LD_VAR 0 5
57926: NOT
57927: OR
57928: IFFALSE 57932
// exit ;
57930: GO 58024
// if GetTaskList ( unit ) then
57932: LD_VAR 0 1
57936: PPUSH
57937: CALL_OW 437
57941: IFFALSE 58024
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
57943: LD_STRING e
57945: PUSH
57946: LD_VAR 0 1
57950: PPUSH
57951: CALL_OW 437
57955: PUSH
57956: LD_INT 1
57958: ARRAY
57959: PUSH
57960: LD_INT 1
57962: ARRAY
57963: EQUAL
57964: PUSH
57965: LD_VAR 0 4
57969: PUSH
57970: LD_VAR 0 1
57974: PPUSH
57975: CALL_OW 437
57979: PUSH
57980: LD_INT 1
57982: ARRAY
57983: PUSH
57984: LD_INT 2
57986: ARRAY
57987: EQUAL
57988: AND
57989: PUSH
57990: LD_VAR 0 5
57994: PUSH
57995: LD_VAR 0 1
57999: PPUSH
58000: CALL_OW 437
58004: PUSH
58005: LD_INT 1
58007: ARRAY
58008: PUSH
58009: LD_INT 3
58011: ARRAY
58012: EQUAL
58013: AND
58014: IFFALSE 58024
// result := true end ;
58016: LD_ADDR_VAR 0 3
58020: PUSH
58021: LD_INT 1
58023: ST_TO_ADDR
// end ;
58024: LD_VAR 0 3
58028: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
58029: LD_INT 0
58031: PPUSH
// result := false ;
58032: LD_ADDR_VAR 0 4
58036: PUSH
58037: LD_INT 0
58039: ST_TO_ADDR
// if GetTaskList ( unit ) then
58040: LD_VAR 0 1
58044: PPUSH
58045: CALL_OW 437
58049: IFFALSE 58132
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
58051: LD_STRING M
58053: PUSH
58054: LD_VAR 0 1
58058: PPUSH
58059: CALL_OW 437
58063: PUSH
58064: LD_INT 1
58066: ARRAY
58067: PUSH
58068: LD_INT 1
58070: ARRAY
58071: EQUAL
58072: PUSH
58073: LD_VAR 0 2
58077: PUSH
58078: LD_VAR 0 1
58082: PPUSH
58083: CALL_OW 437
58087: PUSH
58088: LD_INT 1
58090: ARRAY
58091: PUSH
58092: LD_INT 2
58094: ARRAY
58095: EQUAL
58096: AND
58097: PUSH
58098: LD_VAR 0 3
58102: PUSH
58103: LD_VAR 0 1
58107: PPUSH
58108: CALL_OW 437
58112: PUSH
58113: LD_INT 1
58115: ARRAY
58116: PUSH
58117: LD_INT 3
58119: ARRAY
58120: EQUAL
58121: AND
58122: IFFALSE 58132
// result := true ;
58124: LD_ADDR_VAR 0 4
58128: PUSH
58129: LD_INT 1
58131: ST_TO_ADDR
// end ; end ;
58132: LD_VAR 0 4
58136: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
58137: LD_INT 0
58139: PPUSH
58140: PPUSH
58141: PPUSH
58142: PPUSH
// if not unit or not area then
58143: LD_VAR 0 1
58147: NOT
58148: PUSH
58149: LD_VAR 0 2
58153: NOT
58154: OR
58155: IFFALSE 58159
// exit ;
58157: GO 58335
// tmp := AreaToList ( area , i ) ;
58159: LD_ADDR_VAR 0 6
58163: PUSH
58164: LD_VAR 0 2
58168: PPUSH
58169: LD_VAR 0 5
58173: PPUSH
58174: CALL_OW 517
58178: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
58179: LD_ADDR_VAR 0 5
58183: PUSH
58184: DOUBLE
58185: LD_INT 1
58187: DEC
58188: ST_TO_ADDR
58189: LD_VAR 0 6
58193: PUSH
58194: LD_INT 1
58196: ARRAY
58197: PUSH
58198: FOR_TO
58199: IFFALSE 58333
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
58201: LD_ADDR_VAR 0 7
58205: PUSH
58206: LD_VAR 0 6
58210: PUSH
58211: LD_INT 1
58213: ARRAY
58214: PUSH
58215: LD_VAR 0 5
58219: ARRAY
58220: PUSH
58221: LD_VAR 0 6
58225: PUSH
58226: LD_INT 2
58228: ARRAY
58229: PUSH
58230: LD_VAR 0 5
58234: ARRAY
58235: PUSH
58236: EMPTY
58237: LIST
58238: LIST
58239: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
58240: LD_INT 92
58242: PUSH
58243: LD_VAR 0 7
58247: PUSH
58248: LD_INT 1
58250: ARRAY
58251: PUSH
58252: LD_VAR 0 7
58256: PUSH
58257: LD_INT 2
58259: ARRAY
58260: PUSH
58261: LD_INT 2
58263: PUSH
58264: EMPTY
58265: LIST
58266: LIST
58267: LIST
58268: LIST
58269: PPUSH
58270: CALL_OW 69
58274: PUSH
58275: LD_INT 0
58277: EQUAL
58278: IFFALSE 58331
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
58280: LD_VAR 0 1
58284: PPUSH
58285: LD_VAR 0 7
58289: PUSH
58290: LD_INT 1
58292: ARRAY
58293: PPUSH
58294: LD_VAR 0 7
58298: PUSH
58299: LD_INT 2
58301: ARRAY
58302: PPUSH
58303: LD_VAR 0 3
58307: PPUSH
58308: CALL_OW 48
// result := IsPlaced ( unit ) ;
58312: LD_ADDR_VAR 0 4
58316: PUSH
58317: LD_VAR 0 1
58321: PPUSH
58322: CALL_OW 305
58326: ST_TO_ADDR
// exit ;
58327: POP
58328: POP
58329: GO 58335
// end ; end ;
58331: GO 58198
58333: POP
58334: POP
// end ;
58335: LD_VAR 0 4
58339: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
58340: LD_INT 0
58342: PPUSH
58343: PPUSH
58344: PPUSH
// if not side or side > 8 then
58345: LD_VAR 0 1
58349: NOT
58350: PUSH
58351: LD_VAR 0 1
58355: PUSH
58356: LD_INT 8
58358: GREATER
58359: OR
58360: IFFALSE 58364
// exit ;
58362: GO 58551
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
58364: LD_ADDR_VAR 0 4
58368: PUSH
58369: LD_INT 22
58371: PUSH
58372: LD_VAR 0 1
58376: PUSH
58377: EMPTY
58378: LIST
58379: LIST
58380: PUSH
58381: LD_INT 21
58383: PUSH
58384: LD_INT 3
58386: PUSH
58387: EMPTY
58388: LIST
58389: LIST
58390: PUSH
58391: EMPTY
58392: LIST
58393: LIST
58394: PPUSH
58395: CALL_OW 69
58399: ST_TO_ADDR
// if not tmp then
58400: LD_VAR 0 4
58404: NOT
58405: IFFALSE 58409
// exit ;
58407: GO 58551
// enable_addtolog := true ;
58409: LD_ADDR_OWVAR 81
58413: PUSH
58414: LD_INT 1
58416: ST_TO_ADDR
// AddToLog ( [ ) ;
58417: LD_STRING [
58419: PPUSH
58420: CALL_OW 561
// for i in tmp do
58424: LD_ADDR_VAR 0 3
58428: PUSH
58429: LD_VAR 0 4
58433: PUSH
58434: FOR_IN
58435: IFFALSE 58542
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
58437: LD_STRING [
58439: PUSH
58440: LD_VAR 0 3
58444: PPUSH
58445: CALL_OW 266
58449: STR
58450: PUSH
58451: LD_STRING , 
58453: STR
58454: PUSH
58455: LD_VAR 0 3
58459: PPUSH
58460: CALL_OW 250
58464: STR
58465: PUSH
58466: LD_STRING , 
58468: STR
58469: PUSH
58470: LD_VAR 0 3
58474: PPUSH
58475: CALL_OW 251
58479: STR
58480: PUSH
58481: LD_STRING , 
58483: STR
58484: PUSH
58485: LD_VAR 0 3
58489: PPUSH
58490: CALL_OW 254
58494: STR
58495: PUSH
58496: LD_STRING , 
58498: STR
58499: PUSH
58500: LD_VAR 0 3
58504: PPUSH
58505: LD_INT 1
58507: PPUSH
58508: CALL_OW 268
58512: STR
58513: PUSH
58514: LD_STRING , 
58516: STR
58517: PUSH
58518: LD_VAR 0 3
58522: PPUSH
58523: LD_INT 2
58525: PPUSH
58526: CALL_OW 268
58530: STR
58531: PUSH
58532: LD_STRING ],
58534: STR
58535: PPUSH
58536: CALL_OW 561
// end ;
58540: GO 58434
58542: POP
58543: POP
// AddToLog ( ]; ) ;
58544: LD_STRING ];
58546: PPUSH
58547: CALL_OW 561
// end ;
58551: LD_VAR 0 2
58555: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
58556: LD_INT 0
58558: PPUSH
58559: PPUSH
58560: PPUSH
58561: PPUSH
58562: PPUSH
// if not area or not rate or not max then
58563: LD_VAR 0 1
58567: NOT
58568: PUSH
58569: LD_VAR 0 2
58573: NOT
58574: OR
58575: PUSH
58576: LD_VAR 0 4
58580: NOT
58581: OR
58582: IFFALSE 58586
// exit ;
58584: GO 58775
// while 1 do
58586: LD_INT 1
58588: IFFALSE 58775
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
58590: LD_ADDR_VAR 0 9
58594: PUSH
58595: LD_VAR 0 1
58599: PPUSH
58600: LD_INT 1
58602: PPUSH
58603: CALL_OW 287
58607: PUSH
58608: LD_INT 10
58610: MUL
58611: ST_TO_ADDR
// r := rate / 10 ;
58612: LD_ADDR_VAR 0 7
58616: PUSH
58617: LD_VAR 0 2
58621: PUSH
58622: LD_INT 10
58624: DIVREAL
58625: ST_TO_ADDR
// time := 1 1$00 ;
58626: LD_ADDR_VAR 0 8
58630: PUSH
58631: LD_INT 2100
58633: ST_TO_ADDR
// if amount < min then
58634: LD_VAR 0 9
58638: PUSH
58639: LD_VAR 0 3
58643: LESS
58644: IFFALSE 58662
// r := r * 2 else
58646: LD_ADDR_VAR 0 7
58650: PUSH
58651: LD_VAR 0 7
58655: PUSH
58656: LD_INT 2
58658: MUL
58659: ST_TO_ADDR
58660: GO 58688
// if amount > max then
58662: LD_VAR 0 9
58666: PUSH
58667: LD_VAR 0 4
58671: GREATER
58672: IFFALSE 58688
// r := r / 2 ;
58674: LD_ADDR_VAR 0 7
58678: PUSH
58679: LD_VAR 0 7
58683: PUSH
58684: LD_INT 2
58686: DIVREAL
58687: ST_TO_ADDR
// time := time / r ;
58688: LD_ADDR_VAR 0 8
58692: PUSH
58693: LD_VAR 0 8
58697: PUSH
58698: LD_VAR 0 7
58702: DIVREAL
58703: ST_TO_ADDR
// if time < 0 then
58704: LD_VAR 0 8
58708: PUSH
58709: LD_INT 0
58711: LESS
58712: IFFALSE 58729
// time := time * - 1 ;
58714: LD_ADDR_VAR 0 8
58718: PUSH
58719: LD_VAR 0 8
58723: PUSH
58724: LD_INT 1
58726: NEG
58727: MUL
58728: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
58729: LD_VAR 0 8
58733: PUSH
58734: LD_INT 35
58736: PPUSH
58737: LD_INT 875
58739: PPUSH
58740: CALL_OW 12
58744: PLUS
58745: PPUSH
58746: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
58750: LD_INT 1
58752: PPUSH
58753: LD_INT 5
58755: PPUSH
58756: CALL_OW 12
58760: PPUSH
58761: LD_VAR 0 1
58765: PPUSH
58766: LD_INT 1
58768: PPUSH
58769: CALL_OW 55
// end ;
58773: GO 58586
// end ;
58775: LD_VAR 0 5
58779: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
58780: LD_INT 0
58782: PPUSH
58783: PPUSH
58784: PPUSH
58785: PPUSH
58786: PPUSH
58787: PPUSH
58788: PPUSH
58789: PPUSH
// if not turrets or not factories then
58790: LD_VAR 0 1
58794: NOT
58795: PUSH
58796: LD_VAR 0 2
58800: NOT
58801: OR
58802: IFFALSE 58806
// exit ;
58804: GO 59113
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
58806: LD_ADDR_VAR 0 10
58810: PUSH
58811: LD_INT 5
58813: PUSH
58814: LD_INT 6
58816: PUSH
58817: EMPTY
58818: LIST
58819: LIST
58820: PUSH
58821: LD_INT 2
58823: PUSH
58824: LD_INT 4
58826: PUSH
58827: EMPTY
58828: LIST
58829: LIST
58830: PUSH
58831: LD_INT 3
58833: PUSH
58834: LD_INT 5
58836: PUSH
58837: EMPTY
58838: LIST
58839: LIST
58840: PUSH
58841: EMPTY
58842: LIST
58843: LIST
58844: LIST
58845: PUSH
58846: LD_INT 24
58848: PUSH
58849: LD_INT 25
58851: PUSH
58852: EMPTY
58853: LIST
58854: LIST
58855: PUSH
58856: LD_INT 23
58858: PUSH
58859: LD_INT 27
58861: PUSH
58862: EMPTY
58863: LIST
58864: LIST
58865: PUSH
58866: EMPTY
58867: LIST
58868: LIST
58869: PUSH
58870: LD_INT 42
58872: PUSH
58873: LD_INT 43
58875: PUSH
58876: EMPTY
58877: LIST
58878: LIST
58879: PUSH
58880: LD_INT 44
58882: PUSH
58883: LD_INT 46
58885: PUSH
58886: EMPTY
58887: LIST
58888: LIST
58889: PUSH
58890: LD_INT 45
58892: PUSH
58893: LD_INT 47
58895: PUSH
58896: EMPTY
58897: LIST
58898: LIST
58899: PUSH
58900: EMPTY
58901: LIST
58902: LIST
58903: LIST
58904: PUSH
58905: EMPTY
58906: LIST
58907: LIST
58908: LIST
58909: ST_TO_ADDR
// result := [ ] ;
58910: LD_ADDR_VAR 0 3
58914: PUSH
58915: EMPTY
58916: ST_TO_ADDR
// for i in turrets do
58917: LD_ADDR_VAR 0 4
58921: PUSH
58922: LD_VAR 0 1
58926: PUSH
58927: FOR_IN
58928: IFFALSE 59111
// begin nat := GetNation ( i ) ;
58930: LD_ADDR_VAR 0 7
58934: PUSH
58935: LD_VAR 0 4
58939: PPUSH
58940: CALL_OW 248
58944: ST_TO_ADDR
// weapon := 0 ;
58945: LD_ADDR_VAR 0 8
58949: PUSH
58950: LD_INT 0
58952: ST_TO_ADDR
// if not nat then
58953: LD_VAR 0 7
58957: NOT
58958: IFFALSE 58962
// continue ;
58960: GO 58927
// for j in list [ nat ] do
58962: LD_ADDR_VAR 0 5
58966: PUSH
58967: LD_VAR 0 10
58971: PUSH
58972: LD_VAR 0 7
58976: ARRAY
58977: PUSH
58978: FOR_IN
58979: IFFALSE 59020
// if GetBWeapon ( i ) = j [ 1 ] then
58981: LD_VAR 0 4
58985: PPUSH
58986: CALL_OW 269
58990: PUSH
58991: LD_VAR 0 5
58995: PUSH
58996: LD_INT 1
58998: ARRAY
58999: EQUAL
59000: IFFALSE 59018
// begin weapon := j [ 2 ] ;
59002: LD_ADDR_VAR 0 8
59006: PUSH
59007: LD_VAR 0 5
59011: PUSH
59012: LD_INT 2
59014: ARRAY
59015: ST_TO_ADDR
// break ;
59016: GO 59020
// end ;
59018: GO 58978
59020: POP
59021: POP
// if not weapon then
59022: LD_VAR 0 8
59026: NOT
59027: IFFALSE 59031
// continue ;
59029: GO 58927
// for k in factories do
59031: LD_ADDR_VAR 0 6
59035: PUSH
59036: LD_VAR 0 2
59040: PUSH
59041: FOR_IN
59042: IFFALSE 59107
// begin weapons := AvailableWeaponList ( k ) ;
59044: LD_ADDR_VAR 0 9
59048: PUSH
59049: LD_VAR 0 6
59053: PPUSH
59054: CALL_OW 478
59058: ST_TO_ADDR
// if not weapons then
59059: LD_VAR 0 9
59063: NOT
59064: IFFALSE 59068
// continue ;
59066: GO 59041
// if weapon in weapons then
59068: LD_VAR 0 8
59072: PUSH
59073: LD_VAR 0 9
59077: IN
59078: IFFALSE 59105
// begin result := [ i , weapon ] ;
59080: LD_ADDR_VAR 0 3
59084: PUSH
59085: LD_VAR 0 4
59089: PUSH
59090: LD_VAR 0 8
59094: PUSH
59095: EMPTY
59096: LIST
59097: LIST
59098: ST_TO_ADDR
// exit ;
59099: POP
59100: POP
59101: POP
59102: POP
59103: GO 59113
// end ; end ;
59105: GO 59041
59107: POP
59108: POP
// end ;
59109: GO 58927
59111: POP
59112: POP
// end ;
59113: LD_VAR 0 3
59117: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
59118: LD_INT 0
59120: PPUSH
// if not side or side > 8 then
59121: LD_VAR 0 3
59125: NOT
59126: PUSH
59127: LD_VAR 0 3
59131: PUSH
59132: LD_INT 8
59134: GREATER
59135: OR
59136: IFFALSE 59140
// exit ;
59138: GO 59199
// if not range then
59140: LD_VAR 0 4
59144: NOT
59145: IFFALSE 59156
// range := - 12 ;
59147: LD_ADDR_VAR 0 4
59151: PUSH
59152: LD_INT 12
59154: NEG
59155: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
59156: LD_VAR 0 1
59160: PPUSH
59161: LD_VAR 0 2
59165: PPUSH
59166: LD_VAR 0 3
59170: PPUSH
59171: LD_VAR 0 4
59175: PPUSH
59176: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
59180: LD_VAR 0 1
59184: PPUSH
59185: LD_VAR 0 2
59189: PPUSH
59190: LD_VAR 0 3
59194: PPUSH
59195: CALL_OW 331
// end ;
59199: LD_VAR 0 5
59203: RET
// export function Video ( mode ) ; begin
59204: LD_INT 0
59206: PPUSH
// ingame_video = mode ;
59207: LD_ADDR_OWVAR 52
59211: PUSH
59212: LD_VAR 0 1
59216: ST_TO_ADDR
// interface_hidden = mode ;
59217: LD_ADDR_OWVAR 54
59221: PUSH
59222: LD_VAR 0 1
59226: ST_TO_ADDR
// end ;
59227: LD_VAR 0 2
59231: RET
// export function Join ( array , element ) ; begin
59232: LD_INT 0
59234: PPUSH
// result := Replace ( array , array + 1 , element ) ;
59235: LD_ADDR_VAR 0 3
59239: PUSH
59240: LD_VAR 0 1
59244: PPUSH
59245: LD_VAR 0 1
59249: PUSH
59250: LD_INT 1
59252: PLUS
59253: PPUSH
59254: LD_VAR 0 2
59258: PPUSH
59259: CALL_OW 1
59263: ST_TO_ADDR
// end ;
59264: LD_VAR 0 3
59268: RET
// export function JoinUnion ( array , element ) ; begin
59269: LD_INT 0
59271: PPUSH
// result := array union element ;
59272: LD_ADDR_VAR 0 3
59276: PUSH
59277: LD_VAR 0 1
59281: PUSH
59282: LD_VAR 0 2
59286: UNION
59287: ST_TO_ADDR
// end ;
59288: LD_VAR 0 3
59292: RET
// export function GetBehemoths ( side ) ; begin
59293: LD_INT 0
59295: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
59296: LD_ADDR_VAR 0 2
59300: PUSH
59301: LD_INT 22
59303: PUSH
59304: LD_VAR 0 1
59308: PUSH
59309: EMPTY
59310: LIST
59311: LIST
59312: PUSH
59313: LD_INT 31
59315: PUSH
59316: LD_INT 25
59318: PUSH
59319: EMPTY
59320: LIST
59321: LIST
59322: PUSH
59323: EMPTY
59324: LIST
59325: LIST
59326: PPUSH
59327: CALL_OW 69
59331: ST_TO_ADDR
// end ;
59332: LD_VAR 0 2
59336: RET
// export function Shuffle ( array ) ; var i , index ; begin
59337: LD_INT 0
59339: PPUSH
59340: PPUSH
59341: PPUSH
// result := [ ] ;
59342: LD_ADDR_VAR 0 2
59346: PUSH
59347: EMPTY
59348: ST_TO_ADDR
// if not array then
59349: LD_VAR 0 1
59353: NOT
59354: IFFALSE 59358
// exit ;
59356: GO 59457
// Randomize ;
59358: CALL_OW 10
// for i = array downto 1 do
59362: LD_ADDR_VAR 0 3
59366: PUSH
59367: DOUBLE
59368: LD_VAR 0 1
59372: INC
59373: ST_TO_ADDR
59374: LD_INT 1
59376: PUSH
59377: FOR_DOWNTO
59378: IFFALSE 59455
// begin index := rand ( 1 , array ) ;
59380: LD_ADDR_VAR 0 4
59384: PUSH
59385: LD_INT 1
59387: PPUSH
59388: LD_VAR 0 1
59392: PPUSH
59393: CALL_OW 12
59397: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
59398: LD_ADDR_VAR 0 2
59402: PUSH
59403: LD_VAR 0 2
59407: PPUSH
59408: LD_VAR 0 2
59412: PUSH
59413: LD_INT 1
59415: PLUS
59416: PPUSH
59417: LD_VAR 0 1
59421: PUSH
59422: LD_VAR 0 4
59426: ARRAY
59427: PPUSH
59428: CALL_OW 2
59432: ST_TO_ADDR
// array := Delete ( array , index ) ;
59433: LD_ADDR_VAR 0 1
59437: PUSH
59438: LD_VAR 0 1
59442: PPUSH
59443: LD_VAR 0 4
59447: PPUSH
59448: CALL_OW 3
59452: ST_TO_ADDR
// end ;
59453: GO 59377
59455: POP
59456: POP
// end ;
59457: LD_VAR 0 2
59461: RET
// export function GetBaseMaterials ( base ) ; begin
59462: LD_INT 0
59464: PPUSH
// result := [ 0 , 0 , 0 ] ;
59465: LD_ADDR_VAR 0 2
59469: PUSH
59470: LD_INT 0
59472: PUSH
59473: LD_INT 0
59475: PUSH
59476: LD_INT 0
59478: PUSH
59479: EMPTY
59480: LIST
59481: LIST
59482: LIST
59483: ST_TO_ADDR
// if not base then
59484: LD_VAR 0 1
59488: NOT
59489: IFFALSE 59493
// exit ;
59491: GO 59542
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
59493: LD_ADDR_VAR 0 2
59497: PUSH
59498: LD_VAR 0 1
59502: PPUSH
59503: LD_INT 1
59505: PPUSH
59506: CALL_OW 275
59510: PUSH
59511: LD_VAR 0 1
59515: PPUSH
59516: LD_INT 2
59518: PPUSH
59519: CALL_OW 275
59523: PUSH
59524: LD_VAR 0 1
59528: PPUSH
59529: LD_INT 3
59531: PPUSH
59532: CALL_OW 275
59536: PUSH
59537: EMPTY
59538: LIST
59539: LIST
59540: LIST
59541: ST_TO_ADDR
// end ;
59542: LD_VAR 0 2
59546: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
59547: LD_INT 0
59549: PPUSH
59550: PPUSH
// result := array ;
59551: LD_ADDR_VAR 0 3
59555: PUSH
59556: LD_VAR 0 1
59560: ST_TO_ADDR
// if size >= result then
59561: LD_VAR 0 2
59565: PUSH
59566: LD_VAR 0 3
59570: GREATEREQUAL
59571: IFFALSE 59575
// exit ;
59573: GO 59625
// if size then
59575: LD_VAR 0 2
59579: IFFALSE 59625
// for i := array downto size do
59581: LD_ADDR_VAR 0 4
59585: PUSH
59586: DOUBLE
59587: LD_VAR 0 1
59591: INC
59592: ST_TO_ADDR
59593: LD_VAR 0 2
59597: PUSH
59598: FOR_DOWNTO
59599: IFFALSE 59623
// result := Delete ( result , result ) ;
59601: LD_ADDR_VAR 0 3
59605: PUSH
59606: LD_VAR 0 3
59610: PPUSH
59611: LD_VAR 0 3
59615: PPUSH
59616: CALL_OW 3
59620: ST_TO_ADDR
59621: GO 59598
59623: POP
59624: POP
// end ;
59625: LD_VAR 0 3
59629: RET
// export function ComExit ( unit ) ; var tmp ; begin
59630: LD_INT 0
59632: PPUSH
59633: PPUSH
// if not IsInUnit ( unit ) then
59634: LD_VAR 0 1
59638: PPUSH
59639: CALL_OW 310
59643: NOT
59644: IFFALSE 59648
// exit ;
59646: GO 59708
// tmp := IsInUnit ( unit ) ;
59648: LD_ADDR_VAR 0 3
59652: PUSH
59653: LD_VAR 0 1
59657: PPUSH
59658: CALL_OW 310
59662: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
59663: LD_VAR 0 3
59667: PPUSH
59668: CALL_OW 247
59672: PUSH
59673: LD_INT 2
59675: EQUAL
59676: IFFALSE 59689
// ComExitVehicle ( unit ) else
59678: LD_VAR 0 1
59682: PPUSH
59683: CALL_OW 121
59687: GO 59698
// ComExitBuilding ( unit ) ;
59689: LD_VAR 0 1
59693: PPUSH
59694: CALL_OW 122
// result := tmp ;
59698: LD_ADDR_VAR 0 2
59702: PUSH
59703: LD_VAR 0 3
59707: ST_TO_ADDR
// end ;
59708: LD_VAR 0 2
59712: RET
// export function ComExitAll ( units ) ; var i ; begin
59713: LD_INT 0
59715: PPUSH
59716: PPUSH
// if not units then
59717: LD_VAR 0 1
59721: NOT
59722: IFFALSE 59726
// exit ;
59724: GO 59752
// for i in units do
59726: LD_ADDR_VAR 0 3
59730: PUSH
59731: LD_VAR 0 1
59735: PUSH
59736: FOR_IN
59737: IFFALSE 59750
// ComExit ( i ) ;
59739: LD_VAR 0 3
59743: PPUSH
59744: CALL 59630 0 1
59748: GO 59736
59750: POP
59751: POP
// end ;
59752: LD_VAR 0 2
59756: RET
// export function ResetHc ; begin
59757: LD_INT 0
59759: PPUSH
// InitHc ;
59760: CALL_OW 19
// hc_importance := 0 ;
59764: LD_ADDR_OWVAR 32
59768: PUSH
59769: LD_INT 0
59771: ST_TO_ADDR
// end ;
59772: LD_VAR 0 1
59776: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
59777: LD_INT 0
59779: PPUSH
59780: PPUSH
59781: PPUSH
// _x := ( x1 + x2 ) div 2 ;
59782: LD_ADDR_VAR 0 6
59786: PUSH
59787: LD_VAR 0 1
59791: PUSH
59792: LD_VAR 0 3
59796: PLUS
59797: PUSH
59798: LD_INT 2
59800: DIV
59801: ST_TO_ADDR
// if _x < 0 then
59802: LD_VAR 0 6
59806: PUSH
59807: LD_INT 0
59809: LESS
59810: IFFALSE 59827
// _x := _x * - 1 ;
59812: LD_ADDR_VAR 0 6
59816: PUSH
59817: LD_VAR 0 6
59821: PUSH
59822: LD_INT 1
59824: NEG
59825: MUL
59826: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
59827: LD_ADDR_VAR 0 7
59831: PUSH
59832: LD_VAR 0 2
59836: PUSH
59837: LD_VAR 0 4
59841: PLUS
59842: PUSH
59843: LD_INT 2
59845: DIV
59846: ST_TO_ADDR
// if _y < 0 then
59847: LD_VAR 0 7
59851: PUSH
59852: LD_INT 0
59854: LESS
59855: IFFALSE 59872
// _y := _y * - 1 ;
59857: LD_ADDR_VAR 0 7
59861: PUSH
59862: LD_VAR 0 7
59866: PUSH
59867: LD_INT 1
59869: NEG
59870: MUL
59871: ST_TO_ADDR
// result := [ _x , _y ] ;
59872: LD_ADDR_VAR 0 5
59876: PUSH
59877: LD_VAR 0 6
59881: PUSH
59882: LD_VAR 0 7
59886: PUSH
59887: EMPTY
59888: LIST
59889: LIST
59890: ST_TO_ADDR
// end ;
59891: LD_VAR 0 5
59895: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
59896: LD_INT 0
59898: PPUSH
59899: PPUSH
59900: PPUSH
59901: PPUSH
// task := GetTaskList ( unit ) ;
59902: LD_ADDR_VAR 0 7
59906: PUSH
59907: LD_VAR 0 1
59911: PPUSH
59912: CALL_OW 437
59916: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
59917: LD_VAR 0 7
59921: NOT
59922: PUSH
59923: LD_VAR 0 1
59927: PPUSH
59928: LD_VAR 0 2
59932: PPUSH
59933: CALL_OW 308
59937: NOT
59938: AND
59939: IFFALSE 59943
// exit ;
59941: GO 60061
// if IsInArea ( unit , area ) then
59943: LD_VAR 0 1
59947: PPUSH
59948: LD_VAR 0 2
59952: PPUSH
59953: CALL_OW 308
59957: IFFALSE 59975
// begin ComMoveToArea ( unit , goAway ) ;
59959: LD_VAR 0 1
59963: PPUSH
59964: LD_VAR 0 3
59968: PPUSH
59969: CALL_OW 113
// exit ;
59973: GO 60061
// end ; if task [ 1 ] [ 1 ] <> M then
59975: LD_VAR 0 7
59979: PUSH
59980: LD_INT 1
59982: ARRAY
59983: PUSH
59984: LD_INT 1
59986: ARRAY
59987: PUSH
59988: LD_STRING M
59990: NONEQUAL
59991: IFFALSE 59995
// exit ;
59993: GO 60061
// x := task [ 1 ] [ 2 ] ;
59995: LD_ADDR_VAR 0 5
59999: PUSH
60000: LD_VAR 0 7
60004: PUSH
60005: LD_INT 1
60007: ARRAY
60008: PUSH
60009: LD_INT 2
60011: ARRAY
60012: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
60013: LD_ADDR_VAR 0 6
60017: PUSH
60018: LD_VAR 0 7
60022: PUSH
60023: LD_INT 1
60025: ARRAY
60026: PUSH
60027: LD_INT 3
60029: ARRAY
60030: ST_TO_ADDR
// if InArea ( x , y , area ) then
60031: LD_VAR 0 5
60035: PPUSH
60036: LD_VAR 0 6
60040: PPUSH
60041: LD_VAR 0 2
60045: PPUSH
60046: CALL_OW 309
60050: IFFALSE 60061
// ComStop ( unit ) ;
60052: LD_VAR 0 1
60056: PPUSH
60057: CALL_OW 141
// end ;
60061: LD_VAR 0 4
60065: RET
// export function Abs ( value ) ; begin
60066: LD_INT 0
60068: PPUSH
// result := value ;
60069: LD_ADDR_VAR 0 2
60073: PUSH
60074: LD_VAR 0 1
60078: ST_TO_ADDR
// if value < 0 then
60079: LD_VAR 0 1
60083: PUSH
60084: LD_INT 0
60086: LESS
60087: IFFALSE 60104
// result := value * - 1 ;
60089: LD_ADDR_VAR 0 2
60093: PUSH
60094: LD_VAR 0 1
60098: PUSH
60099: LD_INT 1
60101: NEG
60102: MUL
60103: ST_TO_ADDR
// end ;
60104: LD_VAR 0 2
60108: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
60109: LD_INT 0
60111: PPUSH
60112: PPUSH
60113: PPUSH
60114: PPUSH
60115: PPUSH
60116: PPUSH
60117: PPUSH
60118: PPUSH
// if not unit or not building then
60119: LD_VAR 0 1
60123: NOT
60124: PUSH
60125: LD_VAR 0 2
60129: NOT
60130: OR
60131: IFFALSE 60135
// exit ;
60133: GO 60361
// x := GetX ( building ) ;
60135: LD_ADDR_VAR 0 4
60139: PUSH
60140: LD_VAR 0 2
60144: PPUSH
60145: CALL_OW 250
60149: ST_TO_ADDR
// y := GetY ( building ) ;
60150: LD_ADDR_VAR 0 6
60154: PUSH
60155: LD_VAR 0 2
60159: PPUSH
60160: CALL_OW 251
60164: ST_TO_ADDR
// d := GetDir ( building ) ;
60165: LD_ADDR_VAR 0 8
60169: PUSH
60170: LD_VAR 0 2
60174: PPUSH
60175: CALL_OW 254
60179: ST_TO_ADDR
// r := 4 ;
60180: LD_ADDR_VAR 0 9
60184: PUSH
60185: LD_INT 4
60187: ST_TO_ADDR
// for i := 1 to 5 do
60188: LD_ADDR_VAR 0 10
60192: PUSH
60193: DOUBLE
60194: LD_INT 1
60196: DEC
60197: ST_TO_ADDR
60198: LD_INT 5
60200: PUSH
60201: FOR_TO
60202: IFFALSE 60359
// begin _x := ShiftX ( x , d , r + i ) ;
60204: LD_ADDR_VAR 0 5
60208: PUSH
60209: LD_VAR 0 4
60213: PPUSH
60214: LD_VAR 0 8
60218: PPUSH
60219: LD_VAR 0 9
60223: PUSH
60224: LD_VAR 0 10
60228: PLUS
60229: PPUSH
60230: CALL_OW 272
60234: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
60235: LD_ADDR_VAR 0 7
60239: PUSH
60240: LD_VAR 0 6
60244: PPUSH
60245: LD_VAR 0 8
60249: PPUSH
60250: LD_VAR 0 9
60254: PUSH
60255: LD_VAR 0 10
60259: PLUS
60260: PPUSH
60261: CALL_OW 273
60265: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
60266: LD_VAR 0 5
60270: PPUSH
60271: LD_VAR 0 7
60275: PPUSH
60276: CALL_OW 488
60280: PUSH
60281: LD_VAR 0 5
60285: PPUSH
60286: LD_VAR 0 7
60290: PPUSH
60291: CALL_OW 428
60295: PPUSH
60296: CALL_OW 247
60300: PUSH
60301: LD_INT 3
60303: PUSH
60304: LD_INT 2
60306: PUSH
60307: EMPTY
60308: LIST
60309: LIST
60310: IN
60311: NOT
60312: AND
60313: IFFALSE 60357
// begin ComMoveXY ( unit , _x , _y ) ;
60315: LD_VAR 0 1
60319: PPUSH
60320: LD_VAR 0 5
60324: PPUSH
60325: LD_VAR 0 7
60329: PPUSH
60330: CALL_OW 111
// result := [ _x , _y ] ;
60334: LD_ADDR_VAR 0 3
60338: PUSH
60339: LD_VAR 0 5
60343: PUSH
60344: LD_VAR 0 7
60348: PUSH
60349: EMPTY
60350: LIST
60351: LIST
60352: ST_TO_ADDR
// exit ;
60353: POP
60354: POP
60355: GO 60361
// end ; end ;
60357: GO 60201
60359: POP
60360: POP
// end ;
60361: LD_VAR 0 3
60365: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
60366: LD_INT 0
60368: PPUSH
60369: PPUSH
60370: PPUSH
// result := 0 ;
60371: LD_ADDR_VAR 0 3
60375: PUSH
60376: LD_INT 0
60378: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
60379: LD_VAR 0 1
60383: PUSH
60384: LD_INT 0
60386: LESS
60387: PUSH
60388: LD_VAR 0 1
60392: PUSH
60393: LD_INT 8
60395: GREATER
60396: OR
60397: PUSH
60398: LD_VAR 0 2
60402: PUSH
60403: LD_INT 0
60405: LESS
60406: OR
60407: PUSH
60408: LD_VAR 0 2
60412: PUSH
60413: LD_INT 8
60415: GREATER
60416: OR
60417: IFFALSE 60421
// exit ;
60419: GO 60496
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
60421: LD_ADDR_VAR 0 4
60425: PUSH
60426: LD_INT 22
60428: PUSH
60429: LD_VAR 0 2
60433: PUSH
60434: EMPTY
60435: LIST
60436: LIST
60437: PPUSH
60438: CALL_OW 69
60442: PUSH
60443: FOR_IN
60444: IFFALSE 60494
// begin un := UnitShoot ( i ) ;
60446: LD_ADDR_VAR 0 5
60450: PUSH
60451: LD_VAR 0 4
60455: PPUSH
60456: CALL_OW 504
60460: ST_TO_ADDR
// if GetSide ( un ) = side1 then
60461: LD_VAR 0 5
60465: PPUSH
60466: CALL_OW 255
60470: PUSH
60471: LD_VAR 0 1
60475: EQUAL
60476: IFFALSE 60492
// begin result := un ;
60478: LD_ADDR_VAR 0 3
60482: PUSH
60483: LD_VAR 0 5
60487: ST_TO_ADDR
// exit ;
60488: POP
60489: POP
60490: GO 60496
// end ; end ;
60492: GO 60443
60494: POP
60495: POP
// end ;
60496: LD_VAR 0 3
60500: RET
// export function GetCargoBay ( units ) ; begin
60501: LD_INT 0
60503: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
60504: LD_ADDR_VAR 0 2
60508: PUSH
60509: LD_VAR 0 1
60513: PPUSH
60514: LD_INT 2
60516: PUSH
60517: LD_INT 34
60519: PUSH
60520: LD_INT 12
60522: PUSH
60523: EMPTY
60524: LIST
60525: LIST
60526: PUSH
60527: LD_INT 34
60529: PUSH
60530: LD_INT 51
60532: PUSH
60533: EMPTY
60534: LIST
60535: LIST
60536: PUSH
60537: LD_INT 34
60539: PUSH
60540: LD_INT 32
60542: PUSH
60543: EMPTY
60544: LIST
60545: LIST
60546: PUSH
60547: LD_INT 34
60549: PUSH
60550: LD_INT 89
60552: PUSH
60553: EMPTY
60554: LIST
60555: LIST
60556: PUSH
60557: EMPTY
60558: LIST
60559: LIST
60560: LIST
60561: LIST
60562: LIST
60563: PPUSH
60564: CALL_OW 72
60568: ST_TO_ADDR
// end ;
60569: LD_VAR 0 2
60573: RET
// export function Negate ( value ) ; begin
60574: LD_INT 0
60576: PPUSH
// result := not value ;
60577: LD_ADDR_VAR 0 2
60581: PUSH
60582: LD_VAR 0 1
60586: NOT
60587: ST_TO_ADDR
// end ;
60588: LD_VAR 0 2
60592: RET
// export function Inc ( value ) ; begin
60593: LD_INT 0
60595: PPUSH
// result := value + 1 ;
60596: LD_ADDR_VAR 0 2
60600: PUSH
60601: LD_VAR 0 1
60605: PUSH
60606: LD_INT 1
60608: PLUS
60609: ST_TO_ADDR
// end ;
60610: LD_VAR 0 2
60614: RET
// export function Dec ( value ) ; begin
60615: LD_INT 0
60617: PPUSH
// result := value - 1 ;
60618: LD_ADDR_VAR 0 2
60622: PUSH
60623: LD_VAR 0 1
60627: PUSH
60628: LD_INT 1
60630: MINUS
60631: ST_TO_ADDR
// end ;
60632: LD_VAR 0 2
60636: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
60637: LD_INT 0
60639: PPUSH
60640: PPUSH
60641: PPUSH
60642: PPUSH
60643: PPUSH
60644: PPUSH
60645: PPUSH
60646: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
60647: LD_VAR 0 1
60651: PPUSH
60652: LD_VAR 0 2
60656: PPUSH
60657: CALL_OW 488
60661: NOT
60662: PUSH
60663: LD_VAR 0 3
60667: PPUSH
60668: LD_VAR 0 4
60672: PPUSH
60673: CALL_OW 488
60677: NOT
60678: OR
60679: IFFALSE 60692
// begin result := - 1 ;
60681: LD_ADDR_VAR 0 5
60685: PUSH
60686: LD_INT 1
60688: NEG
60689: ST_TO_ADDR
// exit ;
60690: GO 60927
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
60692: LD_ADDR_VAR 0 12
60696: PUSH
60697: LD_VAR 0 1
60701: PPUSH
60702: LD_VAR 0 2
60706: PPUSH
60707: LD_VAR 0 3
60711: PPUSH
60712: LD_VAR 0 4
60716: PPUSH
60717: CALL 59777 0 4
60721: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
60722: LD_ADDR_VAR 0 11
60726: PUSH
60727: LD_VAR 0 1
60731: PPUSH
60732: LD_VAR 0 2
60736: PPUSH
60737: LD_VAR 0 12
60741: PUSH
60742: LD_INT 1
60744: ARRAY
60745: PPUSH
60746: LD_VAR 0 12
60750: PUSH
60751: LD_INT 2
60753: ARRAY
60754: PPUSH
60755: CALL_OW 298
60759: ST_TO_ADDR
// distance := 9999 ;
60760: LD_ADDR_VAR 0 10
60764: PUSH
60765: LD_INT 9999
60767: ST_TO_ADDR
// for i := 0 to 5 do
60768: LD_ADDR_VAR 0 6
60772: PUSH
60773: DOUBLE
60774: LD_INT 0
60776: DEC
60777: ST_TO_ADDR
60778: LD_INT 5
60780: PUSH
60781: FOR_TO
60782: IFFALSE 60925
// begin _x := ShiftX ( x1 , i , centerDist ) ;
60784: LD_ADDR_VAR 0 7
60788: PUSH
60789: LD_VAR 0 1
60793: PPUSH
60794: LD_VAR 0 6
60798: PPUSH
60799: LD_VAR 0 11
60803: PPUSH
60804: CALL_OW 272
60808: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
60809: LD_ADDR_VAR 0 8
60813: PUSH
60814: LD_VAR 0 2
60818: PPUSH
60819: LD_VAR 0 6
60823: PPUSH
60824: LD_VAR 0 11
60828: PPUSH
60829: CALL_OW 273
60833: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
60834: LD_VAR 0 7
60838: PPUSH
60839: LD_VAR 0 8
60843: PPUSH
60844: CALL_OW 488
60848: NOT
60849: IFFALSE 60853
// continue ;
60851: GO 60781
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
60853: LD_ADDR_VAR 0 9
60857: PUSH
60858: LD_VAR 0 12
60862: PUSH
60863: LD_INT 1
60865: ARRAY
60866: PPUSH
60867: LD_VAR 0 12
60871: PUSH
60872: LD_INT 2
60874: ARRAY
60875: PPUSH
60876: LD_VAR 0 7
60880: PPUSH
60881: LD_VAR 0 8
60885: PPUSH
60886: CALL_OW 298
60890: ST_TO_ADDR
// if tmp < distance then
60891: LD_VAR 0 9
60895: PUSH
60896: LD_VAR 0 10
60900: LESS
60901: IFFALSE 60923
// begin result := i ;
60903: LD_ADDR_VAR 0 5
60907: PUSH
60908: LD_VAR 0 6
60912: ST_TO_ADDR
// distance := tmp ;
60913: LD_ADDR_VAR 0 10
60917: PUSH
60918: LD_VAR 0 9
60922: ST_TO_ADDR
// end ; end ;
60923: GO 60781
60925: POP
60926: POP
// end ;
60927: LD_VAR 0 5
60931: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
60932: LD_INT 0
60934: PPUSH
60935: PPUSH
// if not driver or not IsInUnit ( driver ) then
60936: LD_VAR 0 1
60940: NOT
60941: PUSH
60942: LD_VAR 0 1
60946: PPUSH
60947: CALL_OW 310
60951: NOT
60952: OR
60953: IFFALSE 60957
// exit ;
60955: GO 61047
// vehicle := IsInUnit ( driver ) ;
60957: LD_ADDR_VAR 0 3
60961: PUSH
60962: LD_VAR 0 1
60966: PPUSH
60967: CALL_OW 310
60971: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
60972: LD_VAR 0 1
60976: PPUSH
60977: LD_STRING \
60979: PUSH
60980: LD_INT 0
60982: PUSH
60983: LD_INT 0
60985: PUSH
60986: LD_INT 0
60988: PUSH
60989: LD_INT 0
60991: PUSH
60992: LD_INT 0
60994: PUSH
60995: LD_INT 0
60997: PUSH
60998: EMPTY
60999: LIST
61000: LIST
61001: LIST
61002: LIST
61003: LIST
61004: LIST
61005: LIST
61006: PUSH
61007: LD_STRING E
61009: PUSH
61010: LD_INT 0
61012: PUSH
61013: LD_INT 0
61015: PUSH
61016: LD_VAR 0 3
61020: PUSH
61021: LD_INT 0
61023: PUSH
61024: LD_INT 0
61026: PUSH
61027: LD_INT 0
61029: PUSH
61030: EMPTY
61031: LIST
61032: LIST
61033: LIST
61034: LIST
61035: LIST
61036: LIST
61037: LIST
61038: PUSH
61039: EMPTY
61040: LIST
61041: LIST
61042: PPUSH
61043: CALL_OW 446
// end ;
61047: LD_VAR 0 2
61051: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
61052: LD_INT 0
61054: PPUSH
61055: PPUSH
// if not driver or not IsInUnit ( driver ) then
61056: LD_VAR 0 1
61060: NOT
61061: PUSH
61062: LD_VAR 0 1
61066: PPUSH
61067: CALL_OW 310
61071: NOT
61072: OR
61073: IFFALSE 61077
// exit ;
61075: GO 61167
// vehicle := IsInUnit ( driver ) ;
61077: LD_ADDR_VAR 0 3
61081: PUSH
61082: LD_VAR 0 1
61086: PPUSH
61087: CALL_OW 310
61091: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
61092: LD_VAR 0 1
61096: PPUSH
61097: LD_STRING \
61099: PUSH
61100: LD_INT 0
61102: PUSH
61103: LD_INT 0
61105: PUSH
61106: LD_INT 0
61108: PUSH
61109: LD_INT 0
61111: PUSH
61112: LD_INT 0
61114: PUSH
61115: LD_INT 0
61117: PUSH
61118: EMPTY
61119: LIST
61120: LIST
61121: LIST
61122: LIST
61123: LIST
61124: LIST
61125: LIST
61126: PUSH
61127: LD_STRING E
61129: PUSH
61130: LD_INT 0
61132: PUSH
61133: LD_INT 0
61135: PUSH
61136: LD_VAR 0 3
61140: PUSH
61141: LD_INT 0
61143: PUSH
61144: LD_INT 0
61146: PUSH
61147: LD_INT 0
61149: PUSH
61150: EMPTY
61151: LIST
61152: LIST
61153: LIST
61154: LIST
61155: LIST
61156: LIST
61157: LIST
61158: PUSH
61159: EMPTY
61160: LIST
61161: LIST
61162: PPUSH
61163: CALL_OW 447
// end ;
61167: LD_VAR 0 2
61171: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
61172: LD_INT 0
61174: PPUSH
61175: PPUSH
61176: PPUSH
// tmp := [ ] ;
61177: LD_ADDR_VAR 0 5
61181: PUSH
61182: EMPTY
61183: ST_TO_ADDR
// for i in units do
61184: LD_ADDR_VAR 0 4
61188: PUSH
61189: LD_VAR 0 1
61193: PUSH
61194: FOR_IN
61195: IFFALSE 61233
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
61197: LD_ADDR_VAR 0 5
61201: PUSH
61202: LD_VAR 0 5
61206: PPUSH
61207: LD_VAR 0 5
61211: PUSH
61212: LD_INT 1
61214: PLUS
61215: PPUSH
61216: LD_VAR 0 4
61220: PPUSH
61221: CALL_OW 256
61225: PPUSH
61226: CALL_OW 2
61230: ST_TO_ADDR
61231: GO 61194
61233: POP
61234: POP
// if not tmp then
61235: LD_VAR 0 5
61239: NOT
61240: IFFALSE 61244
// exit ;
61242: GO 61292
// if asc then
61244: LD_VAR 0 2
61248: IFFALSE 61272
// result := SortListByListAsc ( units , tmp ) else
61250: LD_ADDR_VAR 0 3
61254: PUSH
61255: LD_VAR 0 1
61259: PPUSH
61260: LD_VAR 0 5
61264: PPUSH
61265: CALL_OW 76
61269: ST_TO_ADDR
61270: GO 61292
// result := SortListByListDesc ( units , tmp ) ;
61272: LD_ADDR_VAR 0 3
61276: PUSH
61277: LD_VAR 0 1
61281: PPUSH
61282: LD_VAR 0 5
61286: PPUSH
61287: CALL_OW 77
61291: ST_TO_ADDR
// end ;
61292: LD_VAR 0 3
61296: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
61297: LD_INT 0
61299: PPUSH
61300: PPUSH
// task := GetTaskList ( mech ) ;
61301: LD_ADDR_VAR 0 4
61305: PUSH
61306: LD_VAR 0 1
61310: PPUSH
61311: CALL_OW 437
61315: ST_TO_ADDR
// if not task then
61316: LD_VAR 0 4
61320: NOT
61321: IFFALSE 61325
// exit ;
61323: GO 61367
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
61325: LD_ADDR_VAR 0 3
61329: PUSH
61330: LD_VAR 0 4
61334: PUSH
61335: LD_INT 1
61337: ARRAY
61338: PUSH
61339: LD_INT 1
61341: ARRAY
61342: PUSH
61343: LD_STRING r
61345: EQUAL
61346: PUSH
61347: LD_VAR 0 4
61351: PUSH
61352: LD_INT 1
61354: ARRAY
61355: PUSH
61356: LD_INT 4
61358: ARRAY
61359: PUSH
61360: LD_VAR 0 2
61364: EQUAL
61365: AND
61366: ST_TO_ADDR
// end ;
61367: LD_VAR 0 3
61371: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
61372: LD_INT 0
61374: PPUSH
// SetDir ( unit , d ) ;
61375: LD_VAR 0 1
61379: PPUSH
61380: LD_VAR 0 4
61384: PPUSH
61385: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
61389: LD_ADDR_VAR 0 6
61393: PUSH
61394: LD_VAR 0 1
61398: PPUSH
61399: LD_VAR 0 2
61403: PPUSH
61404: LD_VAR 0 3
61408: PPUSH
61409: LD_VAR 0 5
61413: PPUSH
61414: CALL_OW 48
61418: ST_TO_ADDR
// end ;
61419: LD_VAR 0 6
61423: RET
// export function ToNaturalNumber ( number ) ; begin
61424: LD_INT 0
61426: PPUSH
// result := number div 1 ;
61427: LD_ADDR_VAR 0 2
61431: PUSH
61432: LD_VAR 0 1
61436: PUSH
61437: LD_INT 1
61439: DIV
61440: ST_TO_ADDR
// if number < 0 then
61441: LD_VAR 0 1
61445: PUSH
61446: LD_INT 0
61448: LESS
61449: IFFALSE 61459
// result := 0 ;
61451: LD_ADDR_VAR 0 2
61455: PUSH
61456: LD_INT 0
61458: ST_TO_ADDR
// end ;
61459: LD_VAR 0 2
61463: RET
// export function SortByClass ( units , class ) ; var un ; begin
61464: LD_INT 0
61466: PPUSH
61467: PPUSH
// if not units or not class then
61468: LD_VAR 0 1
61472: NOT
61473: PUSH
61474: LD_VAR 0 2
61478: NOT
61479: OR
61480: IFFALSE 61484
// exit ;
61482: GO 61579
// result := [ ] ;
61484: LD_ADDR_VAR 0 3
61488: PUSH
61489: EMPTY
61490: ST_TO_ADDR
// for un in units do
61491: LD_ADDR_VAR 0 4
61495: PUSH
61496: LD_VAR 0 1
61500: PUSH
61501: FOR_IN
61502: IFFALSE 61577
// if GetClass ( un ) = class then
61504: LD_VAR 0 4
61508: PPUSH
61509: CALL_OW 257
61513: PUSH
61514: LD_VAR 0 2
61518: EQUAL
61519: IFFALSE 61546
// result := Insert ( result , 1 , un ) else
61521: LD_ADDR_VAR 0 3
61525: PUSH
61526: LD_VAR 0 3
61530: PPUSH
61531: LD_INT 1
61533: PPUSH
61534: LD_VAR 0 4
61538: PPUSH
61539: CALL_OW 2
61543: ST_TO_ADDR
61544: GO 61575
// result := Replace ( result , result + 1 , un ) ;
61546: LD_ADDR_VAR 0 3
61550: PUSH
61551: LD_VAR 0 3
61555: PPUSH
61556: LD_VAR 0 3
61560: PUSH
61561: LD_INT 1
61563: PLUS
61564: PPUSH
61565: LD_VAR 0 4
61569: PPUSH
61570: CALL_OW 1
61574: ST_TO_ADDR
61575: GO 61501
61577: POP
61578: POP
// end ;
61579: LD_VAR 0 3
61583: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
61584: LD_INT 0
61586: PPUSH
61587: PPUSH
61588: PPUSH
61589: PPUSH
61590: PPUSH
61591: PPUSH
61592: PPUSH
// result := [ ] ;
61593: LD_ADDR_VAR 0 4
61597: PUSH
61598: EMPTY
61599: ST_TO_ADDR
// if x - r < 0 then
61600: LD_VAR 0 1
61604: PUSH
61605: LD_VAR 0 3
61609: MINUS
61610: PUSH
61611: LD_INT 0
61613: LESS
61614: IFFALSE 61626
// min_x := 0 else
61616: LD_ADDR_VAR 0 8
61620: PUSH
61621: LD_INT 0
61623: ST_TO_ADDR
61624: GO 61642
// min_x := x - r ;
61626: LD_ADDR_VAR 0 8
61630: PUSH
61631: LD_VAR 0 1
61635: PUSH
61636: LD_VAR 0 3
61640: MINUS
61641: ST_TO_ADDR
// if y - r < 0 then
61642: LD_VAR 0 2
61646: PUSH
61647: LD_VAR 0 3
61651: MINUS
61652: PUSH
61653: LD_INT 0
61655: LESS
61656: IFFALSE 61668
// min_y := 0 else
61658: LD_ADDR_VAR 0 7
61662: PUSH
61663: LD_INT 0
61665: ST_TO_ADDR
61666: GO 61684
// min_y := y - r ;
61668: LD_ADDR_VAR 0 7
61672: PUSH
61673: LD_VAR 0 2
61677: PUSH
61678: LD_VAR 0 3
61682: MINUS
61683: ST_TO_ADDR
// max_x := x + r ;
61684: LD_ADDR_VAR 0 9
61688: PUSH
61689: LD_VAR 0 1
61693: PUSH
61694: LD_VAR 0 3
61698: PLUS
61699: ST_TO_ADDR
// max_y := y + r ;
61700: LD_ADDR_VAR 0 10
61704: PUSH
61705: LD_VAR 0 2
61709: PUSH
61710: LD_VAR 0 3
61714: PLUS
61715: ST_TO_ADDR
// for _x = min_x to max_x do
61716: LD_ADDR_VAR 0 5
61720: PUSH
61721: DOUBLE
61722: LD_VAR 0 8
61726: DEC
61727: ST_TO_ADDR
61728: LD_VAR 0 9
61732: PUSH
61733: FOR_TO
61734: IFFALSE 61835
// for _y = min_y to max_y do
61736: LD_ADDR_VAR 0 6
61740: PUSH
61741: DOUBLE
61742: LD_VAR 0 7
61746: DEC
61747: ST_TO_ADDR
61748: LD_VAR 0 10
61752: PUSH
61753: FOR_TO
61754: IFFALSE 61831
// begin if not ValidHex ( _x , _y ) then
61756: LD_VAR 0 5
61760: PPUSH
61761: LD_VAR 0 6
61765: PPUSH
61766: CALL_OW 488
61770: NOT
61771: IFFALSE 61775
// continue ;
61773: GO 61753
// if GetResourceTypeXY ( _x , _y ) then
61775: LD_VAR 0 5
61779: PPUSH
61780: LD_VAR 0 6
61784: PPUSH
61785: CALL_OW 283
61789: IFFALSE 61829
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
61791: LD_ADDR_VAR 0 4
61795: PUSH
61796: LD_VAR 0 4
61800: PPUSH
61801: LD_VAR 0 4
61805: PUSH
61806: LD_INT 1
61808: PLUS
61809: PPUSH
61810: LD_VAR 0 5
61814: PUSH
61815: LD_VAR 0 6
61819: PUSH
61820: EMPTY
61821: LIST
61822: LIST
61823: PPUSH
61824: CALL_OW 1
61828: ST_TO_ADDR
// end ;
61829: GO 61753
61831: POP
61832: POP
61833: GO 61733
61835: POP
61836: POP
// end ;
61837: LD_VAR 0 4
61841: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
61842: LD_INT 0
61844: PPUSH
61845: PPUSH
61846: PPUSH
61847: PPUSH
61848: PPUSH
61849: PPUSH
61850: PPUSH
61851: PPUSH
// if not units then
61852: LD_VAR 0 1
61856: NOT
61857: IFFALSE 61861
// exit ;
61859: GO 62389
// result := UnitFilter ( units , [ f_ok ] ) ;
61861: LD_ADDR_VAR 0 3
61865: PUSH
61866: LD_VAR 0 1
61870: PPUSH
61871: LD_INT 50
61873: PUSH
61874: EMPTY
61875: LIST
61876: PPUSH
61877: CALL_OW 72
61881: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
61882: LD_ADDR_VAR 0 8
61886: PUSH
61887: LD_VAR 0 1
61891: PUSH
61892: LD_INT 1
61894: ARRAY
61895: PPUSH
61896: CALL_OW 255
61900: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
61901: LD_ADDR_VAR 0 10
61905: PUSH
61906: LD_INT 29
61908: PUSH
61909: LD_INT 91
61911: PUSH
61912: LD_INT 49
61914: PUSH
61915: EMPTY
61916: LIST
61917: LIST
61918: LIST
61919: ST_TO_ADDR
// if not result then
61920: LD_VAR 0 3
61924: NOT
61925: IFFALSE 61929
// exit ;
61927: GO 62389
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
61929: LD_ADDR_VAR 0 5
61933: PUSH
61934: LD_INT 81
61936: PUSH
61937: LD_VAR 0 8
61941: PUSH
61942: EMPTY
61943: LIST
61944: LIST
61945: PPUSH
61946: CALL_OW 69
61950: ST_TO_ADDR
// for i in result do
61951: LD_ADDR_VAR 0 4
61955: PUSH
61956: LD_VAR 0 3
61960: PUSH
61961: FOR_IN
61962: IFFALSE 62387
// begin tag := GetTag ( i ) + 1 ;
61964: LD_ADDR_VAR 0 9
61968: PUSH
61969: LD_VAR 0 4
61973: PPUSH
61974: CALL_OW 110
61978: PUSH
61979: LD_INT 1
61981: PLUS
61982: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
61983: LD_ADDR_VAR 0 7
61987: PUSH
61988: LD_VAR 0 4
61992: PPUSH
61993: CALL_OW 250
61997: PPUSH
61998: LD_VAR 0 4
62002: PPUSH
62003: CALL_OW 251
62007: PPUSH
62008: LD_INT 4
62010: PPUSH
62011: CALL 61584 0 3
62015: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
62016: LD_VAR 0 4
62020: PPUSH
62021: CALL_OW 247
62025: PUSH
62026: LD_INT 2
62028: EQUAL
62029: PUSH
62030: LD_VAR 0 7
62034: PUSH
62035: LD_INT 2
62037: GREATER
62038: AND
62039: PUSH
62040: LD_VAR 0 4
62044: PPUSH
62045: CALL_OW 264
62049: PUSH
62050: LD_VAR 0 10
62054: IN
62055: NOT
62056: AND
62057: IFFALSE 62096
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
62059: LD_VAR 0 4
62063: PPUSH
62064: LD_VAR 0 7
62068: PUSH
62069: LD_INT 1
62071: ARRAY
62072: PUSH
62073: LD_INT 1
62075: ARRAY
62076: PPUSH
62077: LD_VAR 0 7
62081: PUSH
62082: LD_INT 1
62084: ARRAY
62085: PUSH
62086: LD_INT 2
62088: ARRAY
62089: PPUSH
62090: CALL_OW 116
62094: GO 62385
// if path > tag then
62096: LD_VAR 0 2
62100: PUSH
62101: LD_VAR 0 9
62105: GREATER
62106: IFFALSE 62314
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
62108: LD_ADDR_VAR 0 6
62112: PUSH
62113: LD_VAR 0 5
62117: PPUSH
62118: LD_INT 91
62120: PUSH
62121: LD_VAR 0 4
62125: PUSH
62126: LD_INT 8
62128: PUSH
62129: EMPTY
62130: LIST
62131: LIST
62132: LIST
62133: PPUSH
62134: CALL_OW 72
62138: ST_TO_ADDR
// if nearEnemy then
62139: LD_VAR 0 6
62143: IFFALSE 62212
// begin if GetWeapon ( i ) = ru_time_lapser then
62145: LD_VAR 0 4
62149: PPUSH
62150: CALL_OW 264
62154: PUSH
62155: LD_INT 49
62157: EQUAL
62158: IFFALSE 62186
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
62160: LD_VAR 0 4
62164: PPUSH
62165: LD_VAR 0 6
62169: PPUSH
62170: LD_VAR 0 4
62174: PPUSH
62175: CALL_OW 74
62179: PPUSH
62180: CALL_OW 112
62184: GO 62210
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
62186: LD_VAR 0 4
62190: PPUSH
62191: LD_VAR 0 6
62195: PPUSH
62196: LD_VAR 0 4
62200: PPUSH
62201: CALL_OW 74
62205: PPUSH
62206: CALL 63460 0 2
// end else
62210: GO 62312
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
62212: LD_VAR 0 4
62216: PPUSH
62217: LD_VAR 0 2
62221: PUSH
62222: LD_VAR 0 9
62226: ARRAY
62227: PUSH
62228: LD_INT 1
62230: ARRAY
62231: PPUSH
62232: LD_VAR 0 2
62236: PUSH
62237: LD_VAR 0 9
62241: ARRAY
62242: PUSH
62243: LD_INT 2
62245: ARRAY
62246: PPUSH
62247: CALL_OW 297
62251: PUSH
62252: LD_INT 6
62254: GREATER
62255: IFFALSE 62298
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
62257: LD_VAR 0 4
62261: PPUSH
62262: LD_VAR 0 2
62266: PUSH
62267: LD_VAR 0 9
62271: ARRAY
62272: PUSH
62273: LD_INT 1
62275: ARRAY
62276: PPUSH
62277: LD_VAR 0 2
62281: PUSH
62282: LD_VAR 0 9
62286: ARRAY
62287: PUSH
62288: LD_INT 2
62290: ARRAY
62291: PPUSH
62292: CALL_OW 114
62296: GO 62312
// SetTag ( i , tag ) ;
62298: LD_VAR 0 4
62302: PPUSH
62303: LD_VAR 0 9
62307: PPUSH
62308: CALL_OW 109
// end else
62312: GO 62385
// if enemy then
62314: LD_VAR 0 5
62318: IFFALSE 62385
// begin if GetWeapon ( i ) = ru_time_lapser then
62320: LD_VAR 0 4
62324: PPUSH
62325: CALL_OW 264
62329: PUSH
62330: LD_INT 49
62332: EQUAL
62333: IFFALSE 62361
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
62335: LD_VAR 0 4
62339: PPUSH
62340: LD_VAR 0 5
62344: PPUSH
62345: LD_VAR 0 4
62349: PPUSH
62350: CALL_OW 74
62354: PPUSH
62355: CALL_OW 112
62359: GO 62385
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
62361: LD_VAR 0 4
62365: PPUSH
62366: LD_VAR 0 5
62370: PPUSH
62371: LD_VAR 0 4
62375: PPUSH
62376: CALL_OW 74
62380: PPUSH
62381: CALL 63460 0 2
// end ; end ;
62385: GO 61961
62387: POP
62388: POP
// end ;
62389: LD_VAR 0 3
62393: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
62394: LD_INT 0
62396: PPUSH
62397: PPUSH
62398: PPUSH
// if not unit or IsInUnit ( unit ) then
62399: LD_VAR 0 1
62403: NOT
62404: PUSH
62405: LD_VAR 0 1
62409: PPUSH
62410: CALL_OW 310
62414: OR
62415: IFFALSE 62419
// exit ;
62417: GO 62510
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
62419: LD_ADDR_VAR 0 4
62423: PUSH
62424: LD_VAR 0 1
62428: PPUSH
62429: CALL_OW 250
62433: PPUSH
62434: LD_VAR 0 2
62438: PPUSH
62439: LD_INT 1
62441: PPUSH
62442: CALL_OW 272
62446: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
62447: LD_ADDR_VAR 0 5
62451: PUSH
62452: LD_VAR 0 1
62456: PPUSH
62457: CALL_OW 251
62461: PPUSH
62462: LD_VAR 0 2
62466: PPUSH
62467: LD_INT 1
62469: PPUSH
62470: CALL_OW 273
62474: ST_TO_ADDR
// if ValidHex ( x , y ) then
62475: LD_VAR 0 4
62479: PPUSH
62480: LD_VAR 0 5
62484: PPUSH
62485: CALL_OW 488
62489: IFFALSE 62510
// ComTurnXY ( unit , x , y ) ;
62491: LD_VAR 0 1
62495: PPUSH
62496: LD_VAR 0 4
62500: PPUSH
62501: LD_VAR 0 5
62505: PPUSH
62506: CALL_OW 118
// end ;
62510: LD_VAR 0 3
62514: RET
// export function SeeUnits ( side , units ) ; var i ; begin
62515: LD_INT 0
62517: PPUSH
62518: PPUSH
// result := false ;
62519: LD_ADDR_VAR 0 3
62523: PUSH
62524: LD_INT 0
62526: ST_TO_ADDR
// if not units then
62527: LD_VAR 0 2
62531: NOT
62532: IFFALSE 62536
// exit ;
62534: GO 62581
// for i in units do
62536: LD_ADDR_VAR 0 4
62540: PUSH
62541: LD_VAR 0 2
62545: PUSH
62546: FOR_IN
62547: IFFALSE 62579
// if See ( side , i ) then
62549: LD_VAR 0 1
62553: PPUSH
62554: LD_VAR 0 4
62558: PPUSH
62559: CALL_OW 292
62563: IFFALSE 62577
// begin result := true ;
62565: LD_ADDR_VAR 0 3
62569: PUSH
62570: LD_INT 1
62572: ST_TO_ADDR
// exit ;
62573: POP
62574: POP
62575: GO 62581
// end ;
62577: GO 62546
62579: POP
62580: POP
// end ;
62581: LD_VAR 0 3
62585: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
62586: LD_INT 0
62588: PPUSH
62589: PPUSH
62590: PPUSH
62591: PPUSH
// if not unit or not points then
62592: LD_VAR 0 1
62596: NOT
62597: PUSH
62598: LD_VAR 0 2
62602: NOT
62603: OR
62604: IFFALSE 62608
// exit ;
62606: GO 62698
// dist := 99999 ;
62608: LD_ADDR_VAR 0 5
62612: PUSH
62613: LD_INT 99999
62615: ST_TO_ADDR
// for i in points do
62616: LD_ADDR_VAR 0 4
62620: PUSH
62621: LD_VAR 0 2
62625: PUSH
62626: FOR_IN
62627: IFFALSE 62696
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
62629: LD_ADDR_VAR 0 6
62633: PUSH
62634: LD_VAR 0 1
62638: PPUSH
62639: LD_VAR 0 4
62643: PUSH
62644: LD_INT 1
62646: ARRAY
62647: PPUSH
62648: LD_VAR 0 4
62652: PUSH
62653: LD_INT 2
62655: ARRAY
62656: PPUSH
62657: CALL_OW 297
62661: ST_TO_ADDR
// if tmpDist < dist then
62662: LD_VAR 0 6
62666: PUSH
62667: LD_VAR 0 5
62671: LESS
62672: IFFALSE 62694
// begin result := i ;
62674: LD_ADDR_VAR 0 3
62678: PUSH
62679: LD_VAR 0 4
62683: ST_TO_ADDR
// dist := tmpDist ;
62684: LD_ADDR_VAR 0 5
62688: PUSH
62689: LD_VAR 0 6
62693: ST_TO_ADDR
// end ; end ;
62694: GO 62626
62696: POP
62697: POP
// end ;
62698: LD_VAR 0 3
62702: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
62703: LD_INT 0
62705: PPUSH
// uc_side := side ;
62706: LD_ADDR_OWVAR 20
62710: PUSH
62711: LD_VAR 0 1
62715: ST_TO_ADDR
// uc_nation := 3 ;
62716: LD_ADDR_OWVAR 21
62720: PUSH
62721: LD_INT 3
62723: ST_TO_ADDR
// vc_chassis := 25 ;
62724: LD_ADDR_OWVAR 37
62728: PUSH
62729: LD_INT 25
62731: ST_TO_ADDR
// vc_engine := engine_siberite ;
62732: LD_ADDR_OWVAR 39
62736: PUSH
62737: LD_INT 3
62739: ST_TO_ADDR
// vc_control := control_computer ;
62740: LD_ADDR_OWVAR 38
62744: PUSH
62745: LD_INT 3
62747: ST_TO_ADDR
// vc_weapon := 59 ;
62748: LD_ADDR_OWVAR 40
62752: PUSH
62753: LD_INT 59
62755: ST_TO_ADDR
// result := CreateVehicle ;
62756: LD_ADDR_VAR 0 5
62760: PUSH
62761: CALL_OW 45
62765: ST_TO_ADDR
// SetDir ( result , d ) ;
62766: LD_VAR 0 5
62770: PPUSH
62771: LD_VAR 0 4
62775: PPUSH
62776: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
62780: LD_VAR 0 5
62784: PPUSH
62785: LD_VAR 0 2
62789: PPUSH
62790: LD_VAR 0 3
62794: PPUSH
62795: LD_INT 0
62797: PPUSH
62798: CALL_OW 48
// end ;
62802: LD_VAR 0 5
62806: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
62807: LD_INT 0
62809: PPUSH
62810: PPUSH
62811: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
62812: LD_ADDR_VAR 0 2
62816: PUSH
62817: LD_INT 0
62819: PUSH
62820: LD_INT 0
62822: PUSH
62823: LD_INT 0
62825: PUSH
62826: LD_INT 0
62828: PUSH
62829: EMPTY
62830: LIST
62831: LIST
62832: LIST
62833: LIST
62834: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
62835: LD_VAR 0 1
62839: NOT
62840: PUSH
62841: LD_VAR 0 1
62845: PPUSH
62846: CALL_OW 264
62850: PUSH
62851: LD_INT 12
62853: PUSH
62854: LD_INT 51
62856: PUSH
62857: LD_INT 32
62859: PUSH
62860: LD_INT 89
62862: PUSH
62863: EMPTY
62864: LIST
62865: LIST
62866: LIST
62867: LIST
62868: IN
62869: NOT
62870: OR
62871: IFFALSE 62875
// exit ;
62873: GO 62973
// for i := 1 to 3 do
62875: LD_ADDR_VAR 0 3
62879: PUSH
62880: DOUBLE
62881: LD_INT 1
62883: DEC
62884: ST_TO_ADDR
62885: LD_INT 3
62887: PUSH
62888: FOR_TO
62889: IFFALSE 62971
// begin tmp := GetCargo ( cargo , i ) ;
62891: LD_ADDR_VAR 0 4
62895: PUSH
62896: LD_VAR 0 1
62900: PPUSH
62901: LD_VAR 0 3
62905: PPUSH
62906: CALL_OW 289
62910: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
62911: LD_ADDR_VAR 0 2
62915: PUSH
62916: LD_VAR 0 2
62920: PPUSH
62921: LD_VAR 0 3
62925: PPUSH
62926: LD_VAR 0 4
62930: PPUSH
62931: CALL_OW 1
62935: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
62936: LD_ADDR_VAR 0 2
62940: PUSH
62941: LD_VAR 0 2
62945: PPUSH
62946: LD_INT 4
62948: PPUSH
62949: LD_VAR 0 2
62953: PUSH
62954: LD_INT 4
62956: ARRAY
62957: PUSH
62958: LD_VAR 0 4
62962: PLUS
62963: PPUSH
62964: CALL_OW 1
62968: ST_TO_ADDR
// end ;
62969: GO 62888
62971: POP
62972: POP
// end ;
62973: LD_VAR 0 2
62977: RET
// export function Length ( array ) ; begin
62978: LD_INT 0
62980: PPUSH
// result := array + 0 ;
62981: LD_ADDR_VAR 0 2
62985: PUSH
62986: LD_VAR 0 1
62990: PUSH
62991: LD_INT 0
62993: PLUS
62994: ST_TO_ADDR
// end ;
62995: LD_VAR 0 2
62999: RET
// export function PrepareArray ( array ) ; begin
63000: LD_INT 0
63002: PPUSH
// result := array diff 0 ;
63003: LD_ADDR_VAR 0 2
63007: PUSH
63008: LD_VAR 0 1
63012: PUSH
63013: LD_INT 0
63015: DIFF
63016: ST_TO_ADDR
// if not result [ 1 ] then
63017: LD_VAR 0 2
63021: PUSH
63022: LD_INT 1
63024: ARRAY
63025: NOT
63026: IFFALSE 63046
// result := Delete ( result , 1 ) ;
63028: LD_ADDR_VAR 0 2
63032: PUSH
63033: LD_VAR 0 2
63037: PPUSH
63038: LD_INT 1
63040: PPUSH
63041: CALL_OW 3
63045: ST_TO_ADDR
// end ;
63046: LD_VAR 0 2
63050: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
63051: LD_INT 0
63053: PPUSH
63054: PPUSH
63055: PPUSH
63056: PPUSH
// sibRocketRange := 25 ;
63057: LD_ADDR_VAR 0 6
63061: PUSH
63062: LD_INT 25
63064: ST_TO_ADDR
// result := false ;
63065: LD_ADDR_VAR 0 4
63069: PUSH
63070: LD_INT 0
63072: ST_TO_ADDR
// for i := 0 to 5 do
63073: LD_ADDR_VAR 0 5
63077: PUSH
63078: DOUBLE
63079: LD_INT 0
63081: DEC
63082: ST_TO_ADDR
63083: LD_INT 5
63085: PUSH
63086: FOR_TO
63087: IFFALSE 63154
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
63089: LD_VAR 0 1
63093: PPUSH
63094: LD_VAR 0 5
63098: PPUSH
63099: LD_VAR 0 6
63103: PPUSH
63104: CALL_OW 272
63108: PPUSH
63109: LD_VAR 0 2
63113: PPUSH
63114: LD_VAR 0 5
63118: PPUSH
63119: LD_VAR 0 6
63123: PPUSH
63124: CALL_OW 273
63128: PPUSH
63129: LD_VAR 0 3
63133: PPUSH
63134: CALL_OW 309
63138: IFFALSE 63152
// begin result := true ;
63140: LD_ADDR_VAR 0 4
63144: PUSH
63145: LD_INT 1
63147: ST_TO_ADDR
// exit ;
63148: POP
63149: POP
63150: GO 63156
// end ;
63152: GO 63086
63154: POP
63155: POP
// end ;
63156: LD_VAR 0 4
63160: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
63161: LD_INT 0
63163: PPUSH
63164: PPUSH
63165: PPUSH
// if btype = b_depot then
63166: LD_VAR 0 2
63170: PUSH
63171: LD_INT 0
63173: EQUAL
63174: IFFALSE 63186
// begin result := true ;
63176: LD_ADDR_VAR 0 3
63180: PUSH
63181: LD_INT 1
63183: ST_TO_ADDR
// exit ;
63184: GO 63302
// end ; pom := GetBase ( depot ) ;
63186: LD_ADDR_VAR 0 4
63190: PUSH
63191: LD_VAR 0 1
63195: PPUSH
63196: CALL_OW 274
63200: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
63201: LD_ADDR_VAR 0 5
63205: PUSH
63206: LD_VAR 0 2
63210: PPUSH
63211: LD_VAR 0 1
63215: PPUSH
63216: CALL_OW 248
63220: PPUSH
63221: CALL_OW 450
63225: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
63226: LD_ADDR_VAR 0 3
63230: PUSH
63231: LD_VAR 0 4
63235: PPUSH
63236: LD_INT 1
63238: PPUSH
63239: CALL_OW 275
63243: PUSH
63244: LD_VAR 0 5
63248: PUSH
63249: LD_INT 1
63251: ARRAY
63252: GREATEREQUAL
63253: PUSH
63254: LD_VAR 0 4
63258: PPUSH
63259: LD_INT 2
63261: PPUSH
63262: CALL_OW 275
63266: PUSH
63267: LD_VAR 0 5
63271: PUSH
63272: LD_INT 2
63274: ARRAY
63275: GREATEREQUAL
63276: AND
63277: PUSH
63278: LD_VAR 0 4
63282: PPUSH
63283: LD_INT 3
63285: PPUSH
63286: CALL_OW 275
63290: PUSH
63291: LD_VAR 0 5
63295: PUSH
63296: LD_INT 3
63298: ARRAY
63299: GREATEREQUAL
63300: AND
63301: ST_TO_ADDR
// end ;
63302: LD_VAR 0 3
63306: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
63307: LD_INT 0
63309: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
63310: LD_VAR 0 1
63314: PPUSH
63315: LD_VAR 0 2
63319: PPUSH
63320: LD_INT 0
63322: PPUSH
63323: LD_INT 0
63325: PPUSH
63326: LD_INT 1
63328: PPUSH
63329: LD_INT 0
63331: PPUSH
63332: CALL_OW 587
// end ;
63336: LD_VAR 0 3
63340: RET
// export function CenterOnNow ( unit ) ; begin
63341: LD_INT 0
63343: PPUSH
// result := IsInUnit ( unit ) ;
63344: LD_ADDR_VAR 0 2
63348: PUSH
63349: LD_VAR 0 1
63353: PPUSH
63354: CALL_OW 310
63358: ST_TO_ADDR
// if not result then
63359: LD_VAR 0 2
63363: NOT
63364: IFFALSE 63376
// result := unit ;
63366: LD_ADDR_VAR 0 2
63370: PUSH
63371: LD_VAR 0 1
63375: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
63376: LD_VAR 0 1
63380: PPUSH
63381: CALL_OW 87
// end ;
63385: LD_VAR 0 2
63389: RET
// export function ComMoveHex ( unit , hex ) ; begin
63390: LD_INT 0
63392: PPUSH
// if not hex then
63393: LD_VAR 0 2
63397: NOT
63398: IFFALSE 63402
// exit ;
63400: GO 63455
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
63402: LD_VAR 0 2
63406: PUSH
63407: LD_INT 1
63409: ARRAY
63410: PPUSH
63411: LD_VAR 0 2
63415: PUSH
63416: LD_INT 2
63418: ARRAY
63419: PPUSH
63420: CALL_OW 428
63424: IFFALSE 63428
// exit ;
63426: GO 63455
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
63428: LD_VAR 0 1
63432: PPUSH
63433: LD_VAR 0 2
63437: PUSH
63438: LD_INT 1
63440: ARRAY
63441: PPUSH
63442: LD_VAR 0 2
63446: PUSH
63447: LD_INT 2
63449: ARRAY
63450: PPUSH
63451: CALL_OW 111
// end ;
63455: LD_VAR 0 3
63459: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
63460: LD_INT 0
63462: PPUSH
63463: PPUSH
63464: PPUSH
// if not unit or not enemy then
63465: LD_VAR 0 1
63469: NOT
63470: PUSH
63471: LD_VAR 0 2
63475: NOT
63476: OR
63477: IFFALSE 63481
// exit ;
63479: GO 63605
// x := GetX ( enemy ) ;
63481: LD_ADDR_VAR 0 4
63485: PUSH
63486: LD_VAR 0 2
63490: PPUSH
63491: CALL_OW 250
63495: ST_TO_ADDR
// y := GetY ( enemy ) ;
63496: LD_ADDR_VAR 0 5
63500: PUSH
63501: LD_VAR 0 2
63505: PPUSH
63506: CALL_OW 251
63510: ST_TO_ADDR
// if ValidHex ( x , y ) then
63511: LD_VAR 0 4
63515: PPUSH
63516: LD_VAR 0 5
63520: PPUSH
63521: CALL_OW 488
63525: IFFALSE 63605
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
63527: LD_VAR 0 2
63531: PPUSH
63532: CALL_OW 247
63536: PUSH
63537: LD_INT 3
63539: PUSH
63540: LD_INT 2
63542: PUSH
63543: EMPTY
63544: LIST
63545: LIST
63546: IN
63547: PUSH
63548: LD_VAR 0 1
63552: PPUSH
63553: CALL_OW 255
63557: PPUSH
63558: LD_VAR 0 2
63562: PPUSH
63563: CALL_OW 292
63567: OR
63568: IFFALSE 63586
// ComAttackUnit ( unit , enemy ) else
63570: LD_VAR 0 1
63574: PPUSH
63575: LD_VAR 0 2
63579: PPUSH
63580: CALL_OW 115
63584: GO 63605
// ComAgressiveMove ( unit , x , y ) ;
63586: LD_VAR 0 1
63590: PPUSH
63591: LD_VAR 0 4
63595: PPUSH
63596: LD_VAR 0 5
63600: PPUSH
63601: CALL_OW 114
// end ;
63605: LD_VAR 0 3
63609: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
63610: LD_INT 0
63612: PPUSH
63613: PPUSH
63614: PPUSH
// list := AreaToList ( area , 0 ) ;
63615: LD_ADDR_VAR 0 5
63619: PUSH
63620: LD_VAR 0 1
63624: PPUSH
63625: LD_INT 0
63627: PPUSH
63628: CALL_OW 517
63632: ST_TO_ADDR
// if not list then
63633: LD_VAR 0 5
63637: NOT
63638: IFFALSE 63642
// exit ;
63640: GO 63772
// if all then
63642: LD_VAR 0 2
63646: IFFALSE 63734
// begin for i := 1 to list [ 1 ] do
63648: LD_ADDR_VAR 0 4
63652: PUSH
63653: DOUBLE
63654: LD_INT 1
63656: DEC
63657: ST_TO_ADDR
63658: LD_VAR 0 5
63662: PUSH
63663: LD_INT 1
63665: ARRAY
63666: PUSH
63667: FOR_TO
63668: IFFALSE 63730
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
63670: LD_ADDR_VAR 0 3
63674: PUSH
63675: LD_VAR 0 3
63679: PPUSH
63680: LD_VAR 0 3
63684: PUSH
63685: LD_INT 1
63687: PLUS
63688: PPUSH
63689: LD_VAR 0 5
63693: PUSH
63694: LD_INT 1
63696: ARRAY
63697: PUSH
63698: LD_VAR 0 4
63702: ARRAY
63703: PUSH
63704: LD_VAR 0 5
63708: PUSH
63709: LD_INT 2
63711: ARRAY
63712: PUSH
63713: LD_VAR 0 4
63717: ARRAY
63718: PUSH
63719: EMPTY
63720: LIST
63721: LIST
63722: PPUSH
63723: CALL_OW 1
63727: ST_TO_ADDR
63728: GO 63667
63730: POP
63731: POP
// exit ;
63732: GO 63772
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
63734: LD_ADDR_VAR 0 3
63738: PUSH
63739: LD_VAR 0 5
63743: PUSH
63744: LD_INT 1
63746: ARRAY
63747: PUSH
63748: LD_INT 1
63750: ARRAY
63751: PUSH
63752: LD_VAR 0 5
63756: PUSH
63757: LD_INT 2
63759: ARRAY
63760: PUSH
63761: LD_INT 1
63763: ARRAY
63764: PUSH
63765: EMPTY
63766: LIST
63767: LIST
63768: PUSH
63769: EMPTY
63770: LIST
63771: ST_TO_ADDR
// end ;
63772: LD_VAR 0 3
63776: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
63777: LD_INT 0
63779: PPUSH
63780: PPUSH
// list := AreaToList ( area , 0 ) ;
63781: LD_ADDR_VAR 0 4
63785: PUSH
63786: LD_VAR 0 1
63790: PPUSH
63791: LD_INT 0
63793: PPUSH
63794: CALL_OW 517
63798: ST_TO_ADDR
// if not list then
63799: LD_VAR 0 4
63803: NOT
63804: IFFALSE 63808
// exit ;
63806: GO 63849
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
63808: LD_ADDR_VAR 0 3
63812: PUSH
63813: LD_VAR 0 4
63817: PUSH
63818: LD_INT 1
63820: ARRAY
63821: PUSH
63822: LD_INT 1
63824: ARRAY
63825: PUSH
63826: LD_VAR 0 4
63830: PUSH
63831: LD_INT 2
63833: ARRAY
63834: PUSH
63835: LD_INT 1
63837: ARRAY
63838: PUSH
63839: LD_VAR 0 2
63843: PUSH
63844: EMPTY
63845: LIST
63846: LIST
63847: LIST
63848: ST_TO_ADDR
// end ;
63849: LD_VAR 0 3
63853: RET
// export function First ( array ) ; begin
63854: LD_INT 0
63856: PPUSH
// if not array then
63857: LD_VAR 0 1
63861: NOT
63862: IFFALSE 63866
// exit ;
63864: GO 63880
// result := array [ 1 ] ;
63866: LD_ADDR_VAR 0 2
63870: PUSH
63871: LD_VAR 0 1
63875: PUSH
63876: LD_INT 1
63878: ARRAY
63879: ST_TO_ADDR
// end ;
63880: LD_VAR 0 2
63884: RET
// export function Last ( array ) ; begin
63885: LD_INT 0
63887: PPUSH
// if not array then
63888: LD_VAR 0 1
63892: NOT
63893: IFFALSE 63897
// exit ;
63895: GO 63913
// result := array [ array ] ;
63897: LD_ADDR_VAR 0 2
63901: PUSH
63902: LD_VAR 0 1
63906: PUSH
63907: LD_VAR 0 1
63911: ARRAY
63912: ST_TO_ADDR
// end ;
63913: LD_VAR 0 2
63917: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
63918: LD_INT 0
63920: PPUSH
63921: PPUSH
// result := [ ] ;
63922: LD_ADDR_VAR 0 5
63926: PUSH
63927: EMPTY
63928: ST_TO_ADDR
// if not array then
63929: LD_VAR 0 1
63933: NOT
63934: IFFALSE 63938
// exit ;
63936: GO 64050
// for i := 1 to array do
63938: LD_ADDR_VAR 0 6
63942: PUSH
63943: DOUBLE
63944: LD_INT 1
63946: DEC
63947: ST_TO_ADDR
63948: LD_VAR 0 1
63952: PUSH
63953: FOR_TO
63954: IFFALSE 64048
// if array [ i ] [ index ] = value then
63956: LD_VAR 0 1
63960: PUSH
63961: LD_VAR 0 6
63965: ARRAY
63966: PUSH
63967: LD_VAR 0 2
63971: ARRAY
63972: PUSH
63973: LD_VAR 0 3
63977: EQUAL
63978: IFFALSE 64046
// begin if indexColumn then
63980: LD_VAR 0 4
63984: IFFALSE 64020
// result := Join ( result , array [ i ] [ indexColumn ] ) else
63986: LD_ADDR_VAR 0 5
63990: PUSH
63991: LD_VAR 0 5
63995: PPUSH
63996: LD_VAR 0 1
64000: PUSH
64001: LD_VAR 0 6
64005: ARRAY
64006: PUSH
64007: LD_VAR 0 4
64011: ARRAY
64012: PPUSH
64013: CALL 59232 0 2
64017: ST_TO_ADDR
64018: GO 64046
// result := Join ( result , array [ i ] ) ;
64020: LD_ADDR_VAR 0 5
64024: PUSH
64025: LD_VAR 0 5
64029: PPUSH
64030: LD_VAR 0 1
64034: PUSH
64035: LD_VAR 0 6
64039: ARRAY
64040: PPUSH
64041: CALL 59232 0 2
64045: ST_TO_ADDR
// end ;
64046: GO 63953
64048: POP
64049: POP
// end ;
64050: LD_VAR 0 5
64054: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
64055: LD_INT 0
64057: PPUSH
// if not vehicles or not parkingPoint then
64058: LD_VAR 0 1
64062: NOT
64063: PUSH
64064: LD_VAR 0 2
64068: NOT
64069: OR
64070: IFFALSE 64074
// exit ;
64072: GO 64172
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
64074: LD_ADDR_VAR 0 1
64078: PUSH
64079: LD_VAR 0 1
64083: PPUSH
64084: LD_INT 50
64086: PUSH
64087: EMPTY
64088: LIST
64089: PUSH
64090: LD_INT 3
64092: PUSH
64093: LD_INT 92
64095: PUSH
64096: LD_VAR 0 2
64100: PUSH
64101: LD_INT 1
64103: ARRAY
64104: PUSH
64105: LD_VAR 0 2
64109: PUSH
64110: LD_INT 2
64112: ARRAY
64113: PUSH
64114: LD_INT 8
64116: PUSH
64117: EMPTY
64118: LIST
64119: LIST
64120: LIST
64121: LIST
64122: PUSH
64123: EMPTY
64124: LIST
64125: LIST
64126: PUSH
64127: EMPTY
64128: LIST
64129: LIST
64130: PPUSH
64131: CALL_OW 72
64135: ST_TO_ADDR
// if not vehicles then
64136: LD_VAR 0 1
64140: NOT
64141: IFFALSE 64145
// exit ;
64143: GO 64172
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
64145: LD_VAR 0 1
64149: PPUSH
64150: LD_VAR 0 2
64154: PUSH
64155: LD_INT 1
64157: ARRAY
64158: PPUSH
64159: LD_VAR 0 2
64163: PUSH
64164: LD_INT 2
64166: ARRAY
64167: PPUSH
64168: CALL_OW 111
// end ;
64172: LD_VAR 0 3
64176: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
64177: LD_INT 0
64179: PPUSH
64180: PPUSH
64181: PPUSH
// if not side or not area then
64182: LD_VAR 0 1
64186: NOT
64187: PUSH
64188: LD_VAR 0 2
64192: NOT
64193: OR
64194: IFFALSE 64198
// exit ;
64196: GO 64317
// tmp := AreaToList ( area , 0 ) ;
64198: LD_ADDR_VAR 0 5
64202: PUSH
64203: LD_VAR 0 2
64207: PPUSH
64208: LD_INT 0
64210: PPUSH
64211: CALL_OW 517
64215: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
64216: LD_ADDR_VAR 0 4
64220: PUSH
64221: DOUBLE
64222: LD_INT 1
64224: DEC
64225: ST_TO_ADDR
64226: LD_VAR 0 5
64230: PUSH
64231: LD_INT 1
64233: ARRAY
64234: PUSH
64235: FOR_TO
64236: IFFALSE 64315
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
64238: LD_VAR 0 5
64242: PUSH
64243: LD_INT 1
64245: ARRAY
64246: PUSH
64247: LD_VAR 0 4
64251: ARRAY
64252: PPUSH
64253: LD_VAR 0 5
64257: PUSH
64258: LD_INT 2
64260: ARRAY
64261: PUSH
64262: LD_VAR 0 4
64266: ARRAY
64267: PPUSH
64268: CALL_OW 351
64272: IFFALSE 64313
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
64274: LD_VAR 0 5
64278: PUSH
64279: LD_INT 1
64281: ARRAY
64282: PUSH
64283: LD_VAR 0 4
64287: ARRAY
64288: PPUSH
64289: LD_VAR 0 5
64293: PUSH
64294: LD_INT 2
64296: ARRAY
64297: PUSH
64298: LD_VAR 0 4
64302: ARRAY
64303: PPUSH
64304: LD_VAR 0 1
64308: PPUSH
64309: CALL_OW 244
// end ;
64313: GO 64235
64315: POP
64316: POP
// end ; end_of_file
64317: LD_VAR 0 3
64321: RET
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeFamine do var i , canWin ;
64322: LD_EXP 48
64326: PUSH
64327: CALL 64532 0 0
64331: AND
64332: PUSH
64333: LD_OWVAR 4
64337: AND
64338: IFFALSE 64529
64340: GO 64342
64342: DISABLE
64343: LD_INT 0
64345: PPUSH
64346: PPUSH
// begin canWin := false ;
64347: LD_ADDR_VAR 0 2
64351: PUSH
64352: LD_INT 0
64354: ST_TO_ADDR
// if not HasPower ( your_side ) then
64355: LD_OWVAR 2
64359: PPUSH
64360: CALL 64572 0 1
64364: NOT
64365: IFFALSE 64376
// begin Multiplayer_Loose_Message ;
64367: CALL_OW 521
// enable ( mpLose ) ;
64371: LD_INT 102
64373: ENABLE_MARKED
// end else
64374: GO 64529
// begin canWin := true ;
64376: LD_ADDR_VAR 0 2
64380: PUSH
64381: LD_INT 1
64383: ST_TO_ADDR
// for i := 1 to 8 do
64384: LD_ADDR_VAR 0 1
64388: PUSH
64389: DOUBLE
64390: LD_INT 1
64392: DEC
64393: ST_TO_ADDR
64394: LD_INT 8
64396: PUSH
64397: FOR_TO
64398: IFFALSE 64515
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
64400: LD_EXP 16
64404: PUSH
64405: LD_VAR 0 1
64409: ARRAY
64410: PUSH
64411: LD_VAR 0 1
64415: PPUSH
64416: CALL_OW 108
64420: AND
64421: PUSH
64422: LD_VAR 0 1
64426: PUSH
64427: LD_OWVAR 2
64431: NONEQUAL
64432: AND
64433: IFFALSE 64513
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
64435: LD_EXP 17
64439: PUSH
64440: LD_VAR 0 1
64444: ARRAY
64445: NOT
64446: PUSH
64447: LD_EXP 17
64451: PUSH
64452: LD_VAR 0 1
64456: ARRAY
64457: PUSH
64458: LD_EXP 17
64462: PUSH
64463: LD_OWVAR 2
64467: ARRAY
64468: NONEQUAL
64469: PUSH
64470: LD_OWVAR 2
64474: PPUSH
64475: LD_VAR 0 1
64479: PPUSH
64480: CALL_OW 81
64484: PUSH
64485: LD_INT 1
64487: NONEQUAL
64488: AND
64489: OR
64490: IFFALSE 64513
// if HasPower ( i ) then
64492: LD_VAR 0 1
64496: PPUSH
64497: CALL 64572 0 1
64501: IFFALSE 64513
// begin canWin := false ;
64503: LD_ADDR_VAR 0 2
64507: PUSH
64508: LD_INT 0
64510: ST_TO_ADDR
// break ;
64511: GO 64515
// end ;
64513: GO 64397
64515: POP
64516: POP
// if canWin then
64517: LD_VAR 0 2
64521: IFFALSE 64528
// enable ( mpWin ) else
64523: LD_INT 101
64525: ENABLE_MARKED
64526: GO 64529
// enable ;
64528: ENABLE
// end ; end ;
64529: PPOPN 2
64531: END
// function CanWinLoose ; begin
64532: LD_INT 0
64534: PPUSH
// result := true ;
64535: LD_ADDR_VAR 0 1
64539: PUSH
64540: LD_INT 1
64542: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
64543: CALL_OW 531
64547: PUSH
64548: CALL_OW 519
64552: PUSH
64553: LD_INT 1
64555: GREATER
64556: AND
64557: IFFALSE 64567
// result := false ;
64559: LD_ADDR_VAR 0 1
64563: PUSH
64564: LD_INT 0
64566: ST_TO_ADDR
// end ;
64567: LD_VAR 0 1
64571: RET
// function HasPower ( i ) ; begin
64572: LD_INT 0
64574: PPUSH
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
64575: LD_ADDR_VAR 0 2
64579: PUSH
64580: LD_INT 22
64582: PUSH
64583: LD_VAR 0 1
64587: PUSH
64588: EMPTY
64589: LIST
64590: LIST
64591: PUSH
64592: LD_INT 2
64594: PUSH
64595: LD_INT 21
64597: PUSH
64598: LD_INT 1
64600: PUSH
64601: EMPTY
64602: LIST
64603: LIST
64604: PUSH
64605: LD_INT 33
64607: PUSH
64608: LD_INT 3
64610: PUSH
64611: EMPTY
64612: LIST
64613: LIST
64614: PUSH
64615: LD_INT 33
64617: PUSH
64618: LD_INT 5
64620: PUSH
64621: EMPTY
64622: LIST
64623: LIST
64624: PUSH
64625: EMPTY
64626: LIST
64627: LIST
64628: LIST
64629: LIST
64630: PUSH
64631: EMPTY
64632: LIST
64633: LIST
64634: PPUSH
64635: CALL_OW 69
64639: ST_TO_ADDR
// end ;
64640: LD_VAR 0 2
64644: RET
// export function FamineDeposits ( areas , values , type ) ; var i , j , list ; begin
64645: LD_INT 0
64647: PPUSH
64648: PPUSH
64649: PPUSH
64650: PPUSH
// if not areas or not values or not type in [ mat_oil , mat_siberit ] then
64651: LD_VAR 0 1
64655: NOT
64656: PUSH
64657: LD_VAR 0 2
64661: NOT
64662: OR
64663: PUSH
64664: LD_VAR 0 3
64668: PUSH
64669: LD_INT 2
64671: PUSH
64672: LD_INT 3
64674: PUSH
64675: EMPTY
64676: LIST
64677: LIST
64678: IN
64679: NOT
64680: OR
64681: IFFALSE 64685
// exit ;
64683: GO 64935
// for i := 1 to Count ( areas ) do
64685: LD_ADDR_VAR 0 5
64689: PUSH
64690: DOUBLE
64691: LD_INT 1
64693: DEC
64694: ST_TO_ADDR
64695: LD_VAR 0 1
64699: PPUSH
64700: CALL 23623 0 1
64704: PUSH
64705: FOR_TO
64706: IFFALSE 64933
// begin list := AreaToList ( areas [ i ] , 0 ) ;
64708: LD_ADDR_VAR 0 7
64712: PUSH
64713: LD_VAR 0 1
64717: PUSH
64718: LD_VAR 0 5
64722: ARRAY
64723: PPUSH
64724: LD_INT 0
64726: PPUSH
64727: CALL_OW 517
64731: ST_TO_ADDR
// for j := 1 to list [ 1 ] do
64732: LD_ADDR_VAR 0 6
64736: PUSH
64737: DOUBLE
64738: LD_INT 1
64740: DEC
64741: ST_TO_ADDR
64742: LD_VAR 0 7
64746: PUSH
64747: LD_INT 1
64749: ARRAY
64750: PUSH
64751: FOR_TO
64752: IFFALSE 64929
// begin CreateDepositXY ( list [ 1 ] [ j ] , list [ 2 ] [ j ] , type ) ;
64754: LD_VAR 0 7
64758: PUSH
64759: LD_INT 1
64761: ARRAY
64762: PUSH
64763: LD_VAR 0 6
64767: ARRAY
64768: PPUSH
64769: LD_VAR 0 7
64773: PUSH
64774: LD_INT 2
64776: ARRAY
64777: PUSH
64778: LD_VAR 0 6
64782: ARRAY
64783: PPUSH
64784: LD_VAR 0 3
64788: PPUSH
64789: CALL_OW 62
// if type = mat_oil then
64793: LD_VAR 0 3
64797: PUSH
64798: LD_INT 2
64800: EQUAL
64801: IFFALSE 64866
// mpGlobalOilDeposits := Join ( mpGlobalOilDeposits , [ list [ 1 ] [ j ] , list [ 2 ] [ j ] , values [ i ] ] ) else
64803: LD_ADDR_EXP 50
64807: PUSH
64808: LD_EXP 50
64812: PPUSH
64813: LD_VAR 0 7
64817: PUSH
64818: LD_INT 1
64820: ARRAY
64821: PUSH
64822: LD_VAR 0 6
64826: ARRAY
64827: PUSH
64828: LD_VAR 0 7
64832: PUSH
64833: LD_INT 2
64835: ARRAY
64836: PUSH
64837: LD_VAR 0 6
64841: ARRAY
64842: PUSH
64843: LD_VAR 0 2
64847: PUSH
64848: LD_VAR 0 5
64852: ARRAY
64853: PUSH
64854: EMPTY
64855: LIST
64856: LIST
64857: LIST
64858: PPUSH
64859: CALL 59232 0 2
64863: ST_TO_ADDR
64864: GO 64927
// mpGlobalSibDeposits := Join ( mpGlobalSibDeposits , [ list [ 1 ] [ j ] , list [ 2 ] [ j ] , values [ i ] ] ) end ;
64866: LD_ADDR_EXP 51
64870: PUSH
64871: LD_EXP 51
64875: PPUSH
64876: LD_VAR 0 7
64880: PUSH
64881: LD_INT 1
64883: ARRAY
64884: PUSH
64885: LD_VAR 0 6
64889: ARRAY
64890: PUSH
64891: LD_VAR 0 7
64895: PUSH
64896: LD_INT 2
64898: ARRAY
64899: PUSH
64900: LD_VAR 0 6
64904: ARRAY
64905: PUSH
64906: LD_VAR 0 2
64910: PUSH
64911: LD_VAR 0 5
64915: ARRAY
64916: PUSH
64917: EMPTY
64918: LIST
64919: LIST
64920: LIST
64921: PPUSH
64922: CALL 59232 0 2
64926: ST_TO_ADDR
64927: GO 64751
64929: POP
64930: POP
// end ;
64931: GO 64705
64933: POP
64934: POP
// end ; end_of_file
64935: LD_VAR 0 4
64939: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin end ;
64940: PPOPN 6
64942: END
// on MapStart ( p ) do begin if mpGameType = GameTypeCoop then
64943: LD_EXP 12
64947: PUSH
64948: LD_INT 4
64950: EQUAL
64951: IFFALSE 64987
// begin ToLua ( setGameDifficulty( & Difficulty & ) ) ;
64953: LD_STRING setGameDifficulty(
64955: PUSH
64956: LD_OWVAR 67
64960: STR
64961: PUSH
64962: LD_STRING )
64964: STR
64965: PPUSH
64966: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
64970: LD_STRING displayDifficulty(
64972: PUSH
64973: LD_OWVAR 67
64977: STR
64978: PUSH
64979: LD_STRING )
64981: STR
64982: PPUSH
64983: CALL_OW 559
// end ; SOS_MapStart ( ) ;
64987: CALL 14657 0 0
// end ;
64991: PPOPN 1
64993: END
