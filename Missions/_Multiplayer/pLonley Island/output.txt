// starting begin ResetFog ;
   0: CALL_OW 335
// InitMultiplayer ;
   4: CALL 6566 0 0
// InitMultiplayerSettings ;
   8: CALL 17 0 0
// StartMultiplayer ;
  12: CALL 6942 0 0
// end ; end_of_file
  16: END
// export function InitMultiplayerSettings ; begin
  17: LD_INT 0
  19: PPUSH
// mpGameSettingsKeys := [ 0 , 1 , 1 , 0 , 1 , 0 , 0 , 0 , 1 , 0 , 1 , 0 , 1 , 1 , 1 , 1 , 0 , 1 , 1 , 1 , 1 ] ;
  20: LD_ADDR_EXP 13
  24: PUSH
  25: LD_INT 0
  27: PUSH
  28: LD_INT 1
  30: PUSH
  31: LD_INT 1
  33: PUSH
  34: LD_INT 0
  36: PUSH
  37: LD_INT 1
  39: PUSH
  40: LD_INT 0
  42: PUSH
  43: LD_INT 0
  45: PUSH
  46: LD_INT 0
  48: PUSH
  49: LD_INT 1
  51: PUSH
  52: LD_INT 0
  54: PUSH
  55: LD_INT 1
  57: PUSH
  58: LD_INT 0
  60: PUSH
  61: LD_INT 1
  63: PUSH
  64: LD_INT 1
  66: PUSH
  67: LD_INT 1
  69: PUSH
  70: LD_INT 1
  72: PUSH
  73: LD_INT 0
  75: PUSH
  76: LD_INT 1
  78: PUSH
  79: LD_INT 1
  81: PUSH
  82: LD_INT 1
  84: PUSH
  85: LD_INT 1
  87: PUSH
  88: EMPTY
  89: LIST
  90: LIST
  91: LIST
  92: LIST
  93: LIST
  94: LIST
  95: LIST
  96: LIST
  97: LIST
  98: LIST
  99: LIST
 100: LIST
 101: LIST
 102: LIST
 103: LIST
 104: LIST
 105: LIST
 106: LIST
 107: LIST
 108: LIST
 109: LIST
 110: ST_TO_ADDR
// mpGameSettingsValues := [ [ 0 , 1 , 2 ] , [ 9 , 12 , 15 , 24 ] , [ 1 , 3 , 5 , 7 ] , [ [ 0 , 0 , 0 ] , [ 100 , 30 , 0 ] , [ 200 , 75 , 10 ] , [ 500 , 150 , 30 ] ] , [ 1 , 2 , 3 , 4 ] , [ 0 , 1 , 2 ] , [ 0 , 1 , 2 ] , [ 250 , 350 , 500 , 1000 , 2000 ] , [ 0 , 1 ] , [ 0 , 5 5$00 , 10 10$00 , 15 15$00 , 20 20$00 , 30 30$00 ] , [ 0 , 1 ] , [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] , [ 0 , 1 ] , [ 0 , 6 6$30 , 3 3$30 ] , [ 0 , 2 , 4 , 6 ] , [ 30 , 50 , 100 ] , [ ] , [ 0 , 1 , 15 15$0 , 25 25$0 , 30 30$0 , 45 45$0 , 60 60$0 , 90 90$0 , 100 100$0 , 120 120$0 , 180 180$0 ] , [ 0 , 1 ] , [ 0 , 1 ] , [ 0 , 3 3$0 , 5 5$0 , 8 8$0 , 10 10$0 , 12 12$0 , 15 15$0 , 20 20$0 , 30 30$0 ] , ] ;
 111: LD_ADDR_EXP 14
 115: PUSH
 116: LD_INT 0
 118: PUSH
 119: LD_INT 1
 121: PUSH
 122: LD_INT 2
 124: PUSH
 125: EMPTY
 126: LIST
 127: LIST
 128: LIST
 129: PUSH
 130: LD_INT 9
 132: PUSH
 133: LD_INT 12
 135: PUSH
 136: LD_INT 15
 138: PUSH
 139: LD_INT 24
 141: PUSH
 142: EMPTY
 143: LIST
 144: LIST
 145: LIST
 146: LIST
 147: PUSH
 148: LD_INT 1
 150: PUSH
 151: LD_INT 3
 153: PUSH
 154: LD_INT 5
 156: PUSH
 157: LD_INT 7
 159: PUSH
 160: EMPTY
 161: LIST
 162: LIST
 163: LIST
 164: LIST
 165: PUSH
 166: LD_INT 0
 168: PUSH
 169: LD_INT 0
 171: PUSH
 172: LD_INT 0
 174: PUSH
 175: EMPTY
 176: LIST
 177: LIST
 178: LIST
 179: PUSH
 180: LD_INT 100
 182: PUSH
 183: LD_INT 30
 185: PUSH
 186: LD_INT 0
 188: PUSH
 189: EMPTY
 190: LIST
 191: LIST
 192: LIST
 193: PUSH
 194: LD_INT 200
 196: PUSH
 197: LD_INT 75
 199: PUSH
 200: LD_INT 10
 202: PUSH
 203: EMPTY
 204: LIST
 205: LIST
 206: LIST
 207: PUSH
 208: LD_INT 500
 210: PUSH
 211: LD_INT 150
 213: PUSH
 214: LD_INT 30
 216: PUSH
 217: EMPTY
 218: LIST
 219: LIST
 220: LIST
 221: PUSH
 222: EMPTY
 223: LIST
 224: LIST
 225: LIST
 226: LIST
 227: PUSH
 228: LD_INT 1
 230: PUSH
 231: LD_INT 2
 233: PUSH
 234: LD_INT 3
 236: PUSH
 237: LD_INT 4
 239: PUSH
 240: EMPTY
 241: LIST
 242: LIST
 243: LIST
 244: LIST
 245: PUSH
 246: LD_INT 0
 248: PUSH
 249: LD_INT 1
 251: PUSH
 252: LD_INT 2
 254: PUSH
 255: EMPTY
 256: LIST
 257: LIST
 258: LIST
 259: PUSH
 260: LD_INT 0
 262: PUSH
 263: LD_INT 1
 265: PUSH
 266: LD_INT 2
 268: PUSH
 269: EMPTY
 270: LIST
 271: LIST
 272: LIST
 273: PUSH
 274: LD_INT 250
 276: PUSH
 277: LD_INT 350
 279: PUSH
 280: LD_INT 500
 282: PUSH
 283: LD_INT 1000
 285: PUSH
 286: LD_INT 2000
 288: PUSH
 289: EMPTY
 290: LIST
 291: LIST
 292: LIST
 293: LIST
 294: LIST
 295: PUSH
 296: LD_INT 0
 298: PUSH
 299: LD_INT 1
 301: PUSH
 302: EMPTY
 303: LIST
 304: LIST
 305: PUSH
 306: LD_INT 0
 308: PUSH
 309: LD_INT 10500
 311: PUSH
 312: LD_INT 21000
 314: PUSH
 315: LD_INT 31500
 317: PUSH
 318: LD_INT 42000
 320: PUSH
 321: LD_INT 63000
 323: PUSH
 324: EMPTY
 325: LIST
 326: LIST
 327: LIST
 328: LIST
 329: LIST
 330: LIST
 331: PUSH
 332: LD_INT 0
 334: PUSH
 335: LD_INT 1
 337: PUSH
 338: EMPTY
 339: LIST
 340: LIST
 341: PUSH
 342: LD_INT 1
 344: NEG
 345: PUSH
 346: LD_INT 350
 348: PUSH
 349: LD_INT 700
 351: PUSH
 352: LD_INT 1400
 354: PUSH
 355: LD_INT 0
 357: PUSH
 358: EMPTY
 359: LIST
 360: LIST
 361: LIST
 362: LIST
 363: LIST
 364: PUSH
 365: LD_INT 0
 367: PUSH
 368: LD_INT 1
 370: PUSH
 371: EMPTY
 372: LIST
 373: LIST
 374: PUSH
 375: LD_INT 0
 377: PUSH
 378: LD_INT 13650
 380: PUSH
 381: LD_INT 7350
 383: PUSH
 384: EMPTY
 385: LIST
 386: LIST
 387: LIST
 388: PUSH
 389: LD_INT 0
 391: PUSH
 392: LD_INT 2
 394: PUSH
 395: LD_INT 4
 397: PUSH
 398: LD_INT 6
 400: PUSH
 401: EMPTY
 402: LIST
 403: LIST
 404: LIST
 405: LIST
 406: PUSH
 407: LD_INT 30
 409: PUSH
 410: LD_INT 50
 412: PUSH
 413: LD_INT 100
 415: PUSH
 416: EMPTY
 417: LIST
 418: LIST
 419: LIST
 420: PUSH
 421: EMPTY
 422: PUSH
 423: LD_INT 0
 425: PUSH
 426: LD_INT 1
 428: PUSH
 429: LD_INT 31500
 431: PUSH
 432: LD_INT 52500
 434: PUSH
 435: LD_INT 63000
 437: PUSH
 438: LD_INT 94500
 440: PUSH
 441: LD_INT 126000
 443: PUSH
 444: LD_INT 189000
 446: PUSH
 447: LD_INT 210000
 449: PUSH
 450: LD_INT 252000
 452: PUSH
 453: LD_INT 378000
 455: PUSH
 456: EMPTY
 457: LIST
 458: LIST
 459: LIST
 460: LIST
 461: LIST
 462: LIST
 463: LIST
 464: LIST
 465: LIST
 466: LIST
 467: LIST
 468: PUSH
 469: LD_INT 0
 471: PUSH
 472: LD_INT 1
 474: PUSH
 475: EMPTY
 476: LIST
 477: LIST
 478: PUSH
 479: LD_INT 0
 481: PUSH
 482: LD_INT 1
 484: PUSH
 485: EMPTY
 486: LIST
 487: LIST
 488: PUSH
 489: LD_INT 0
 491: PUSH
 492: LD_INT 6300
 494: PUSH
 495: LD_INT 10500
 497: PUSH
 498: LD_INT 16800
 500: PUSH
 501: LD_INT 21000
 503: PUSH
 504: LD_INT 25200
 506: PUSH
 507: LD_INT 31500
 509: PUSH
 510: LD_INT 42000
 512: PUSH
 513: LD_INT 63000
 515: PUSH
 516: EMPTY
 517: LIST
 518: LIST
 519: LIST
 520: LIST
 521: LIST
 522: LIST
 523: LIST
 524: LIST
 525: LIST
 526: PUSH
 527: EMPTY
 528: LIST
 529: LIST
 530: LIST
 531: LIST
 532: LIST
 533: LIST
 534: LIST
 535: LIST
 536: LIST
 537: LIST
 538: LIST
 539: LIST
 540: LIST
 541: LIST
 542: LIST
 543: LIST
 544: LIST
 545: LIST
 546: LIST
 547: LIST
 548: LIST
 549: ST_TO_ADDR
// mpGameSettings := [ 0 , 15 , 4 , [ 0 , 0 , 0 ] , 3 , 0 , 0 , 0 , 1 , 0 , 1 , 0 0$20 , 1 , 0 0$20 , 3 , 30 , 0 , 15 15$0 , 1 , 1 , 0 ] ;
 550: LD_ADDR_EXP 15
 554: PUSH
 555: LD_INT 0
 557: PUSH
 558: LD_INT 15
 560: PUSH
 561: LD_INT 4
 563: PUSH
 564: LD_INT 0
 566: PUSH
 567: LD_INT 0
 569: PUSH
 570: LD_INT 0
 572: PUSH
 573: EMPTY
 574: LIST
 575: LIST
 576: LIST
 577: PUSH
 578: LD_INT 3
 580: PUSH
 581: LD_INT 0
 583: PUSH
 584: LD_INT 0
 586: PUSH
 587: LD_INT 0
 589: PUSH
 590: LD_INT 1
 592: PUSH
 593: LD_INT 0
 595: PUSH
 596: LD_INT 1
 598: PUSH
 599: LD_INT 700
 601: PUSH
 602: LD_INT 1
 604: PUSH
 605: LD_INT 700
 607: PUSH
 608: LD_INT 3
 610: PUSH
 611: LD_INT 30
 613: PUSH
 614: LD_INT 0
 616: PUSH
 617: LD_INT 31500
 619: PUSH
 620: LD_INT 1
 622: PUSH
 623: LD_INT 1
 625: PUSH
 626: LD_INT 0
 628: PUSH
 629: EMPTY
 630: LIST
 631: LIST
 632: LIST
 633: LIST
 634: LIST
 635: LIST
 636: LIST
 637: LIST
 638: LIST
 639: LIST
 640: LIST
 641: LIST
 642: LIST
 643: LIST
 644: LIST
 645: LIST
 646: LIST
 647: LIST
 648: LIST
 649: LIST
 650: LIST
 651: ST_TO_ADDR
// mpGameType := GameTypeFamine ;
 652: LD_ADDR_EXP 12
 656: PUSH
 657: LD_INT 5
 659: ST_TO_ADDR
// your_side := 1 ;
 660: LD_ADDR_OWVAR 2
 664: PUSH
 665: LD_INT 1
 667: ST_TO_ADDR
// mpSidePositions := [ 1 , 2 , 0 , 0 , 0 , 6 , 7 , 0 ] ;
 668: LD_ADDR_EXP 16
 672: PUSH
 673: LD_INT 1
 675: PUSH
 676: LD_INT 2
 678: PUSH
 679: LD_INT 0
 681: PUSH
 682: LD_INT 0
 684: PUSH
 685: LD_INT 0
 687: PUSH
 688: LD_INT 6
 690: PUSH
 691: LD_INT 7
 693: PUSH
 694: LD_INT 0
 696: PUSH
 697: EMPTY
 698: LIST
 699: LIST
 700: LIST
 701: LIST
 702: LIST
 703: LIST
 704: LIST
 705: LIST
 706: ST_TO_ADDR
// mpSideTeams := [ 1 , 2 , 0 , 0 , 0 , 2 , 2 , 0 ] ;
 707: LD_ADDR_EXP 17
 711: PUSH
 712: LD_INT 1
 714: PUSH
 715: LD_INT 2
 717: PUSH
 718: LD_INT 0
 720: PUSH
 721: LD_INT 0
 723: PUSH
 724: LD_INT 0
 726: PUSH
 727: LD_INT 2
 729: PUSH
 730: LD_INT 2
 732: PUSH
 733: LD_INT 0
 735: PUSH
 736: EMPTY
 737: LIST
 738: LIST
 739: LIST
 740: LIST
 741: LIST
 742: LIST
 743: LIST
 744: LIST
 745: ST_TO_ADDR
// mpSideNations := [ 1 , 2 , 0 , 0 , 0 , 3 , 1 , 0 ] ;
 746: LD_ADDR_EXP 18
 750: PUSH
 751: LD_INT 1
 753: PUSH
 754: LD_INT 2
 756: PUSH
 757: LD_INT 0
 759: PUSH
 760: LD_INT 0
 762: PUSH
 763: LD_INT 0
 765: PUSH
 766: LD_INT 3
 768: PUSH
 769: LD_INT 1
 771: PUSH
 772: LD_INT 0
 774: PUSH
 775: EMPTY
 776: LIST
 777: LIST
 778: LIST
 779: LIST
 780: LIST
 781: LIST
 782: LIST
 783: LIST
 784: ST_TO_ADDR
// mpTeams := [ [ 1 , 2 ] , [ 6 , 7 ] ] ;
 785: LD_ADDR_EXP 19
 789: PUSH
 790: LD_INT 1
 792: PUSH
 793: LD_INT 2
 795: PUSH
 796: EMPTY
 797: LIST
 798: LIST
 799: PUSH
 800: LD_INT 6
 802: PUSH
 803: LD_INT 7
 805: PUSH
 806: EMPTY
 807: LIST
 808: LIST
 809: PUSH
 810: EMPTY
 811: LIST
 812: LIST
 813: ST_TO_ADDR
// mpTeamGame := false ;
 814: LD_ADDR_EXP 20
 818: PUSH
 819: LD_INT 0
 821: ST_TO_ADDR
// mpMapSize := [ 240 , 270 ] ;
 822: LD_ADDR_EXP 38
 826: PUSH
 827: LD_INT 240
 829: PUSH
 830: LD_INT 270
 832: PUSH
 833: EMPTY
 834: LIST
 835: LIST
 836: ST_TO_ADDR
// end ;
 837: LD_VAR 0 1
 841: RET
// export BuildUpEscape , kingCamArea ; export function GetMultiplayerMapData ( gameType ) ; var i , t , all , depositsValue , startPos ; begin
 842: LD_INT 0
 844: PPUSH
 845: PPUSH
 846: PPUSH
 847: PPUSH
 848: PPUSH
 849: PPUSH
// BuildUpEscape := 0 ;
 850: LD_ADDR_EXP 1
 854: PUSH
 855: LD_INT 0
 857: ST_TO_ADDR
// kingCamArea := 0 ;
 858: LD_ADDR_EXP 2
 862: PUSH
 863: LD_INT 0
 865: ST_TO_ADDR
// mpPeopleAmount := mpGameSettings [ 2 ] ;
 866: LD_ADDR_EXP 33
 870: PUSH
 871: LD_EXP 15
 875: PUSH
 876: LD_INT 2
 878: ARRAY
 879: ST_TO_ADDR
// mpPeopleSkill := mpGameSettings [ 3 ] ;
 880: LD_ADDR_EXP 34
 884: PUSH
 885: LD_EXP 15
 889: PUSH
 890: LD_INT 3
 892: ARRAY
 893: ST_TO_ADDR
// mpShipments := mpGameSettings [ 5 ] ;
 894: LD_ADDR_EXP 36
 898: PUSH
 899: LD_EXP 15
 903: PUSH
 904: LD_INT 5
 906: ARRAY
 907: ST_TO_ADDR
// if mpGameSettings [ 9 ] then
 908: LD_EXP 15
 912: PUSH
 913: LD_INT 9
 915: ARRAY
 916: IFFALSE 1105
// begin mpVehicles := [ [ [ us_light_wheeled , engine_combustion , control_manual , us_machine_gun ] , [ us_light_wheeled , engine_combustion , control_manual , us_light_gun ] , [ us_medium_wheeled , engine_combustion , control_manual , us_cargo_bay ] ] , [ [ ar_light_trike , engine_combustion , control_manual , ar_double_machine_gun ] , [ ar_light_trike , engine_combustion , control_manual , ar_light_gun ] , [ ar_medium_trike , engine_combustion , control_manual , ar_cargo_bay ] ] , [ [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun ] , [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun ] , [ ru_medium_wheeled , engine_combustion , control_manual , ru_cargo_bay ] ] ] ;
 918: LD_ADDR_EXP 45
 922: PUSH
 923: LD_INT 1
 925: PUSH
 926: LD_INT 1
 928: PUSH
 929: LD_INT 1
 931: PUSH
 932: LD_INT 2
 934: PUSH
 935: EMPTY
 936: LIST
 937: LIST
 938: LIST
 939: LIST
 940: PUSH
 941: LD_INT 1
 943: PUSH
 944: LD_INT 1
 946: PUSH
 947: LD_INT 1
 949: PUSH
 950: LD_INT 3
 952: PUSH
 953: EMPTY
 954: LIST
 955: LIST
 956: LIST
 957: LIST
 958: PUSH
 959: LD_INT 2
 961: PUSH
 962: LD_INT 1
 964: PUSH
 965: LD_INT 1
 967: PUSH
 968: LD_INT 12
 970: PUSH
 971: EMPTY
 972: LIST
 973: LIST
 974: LIST
 975: LIST
 976: PUSH
 977: EMPTY
 978: LIST
 979: LIST
 980: LIST
 981: PUSH
 982: LD_INT 12
 984: PUSH
 985: LD_INT 1
 987: PUSH
 988: LD_INT 1
 990: PUSH
 991: LD_INT 24
 993: PUSH
 994: EMPTY
 995: LIST
 996: LIST
 997: LIST
 998: LIST
 999: PUSH
1000: LD_INT 12
1002: PUSH
1003: LD_INT 1
1005: PUSH
1006: LD_INT 1
1008: PUSH
1009: LD_INT 23
1011: PUSH
1012: EMPTY
1013: LIST
1014: LIST
1015: LIST
1016: LIST
1017: PUSH
1018: LD_INT 13
1020: PUSH
1021: LD_INT 1
1023: PUSH
1024: LD_INT 1
1026: PUSH
1027: LD_INT 32
1029: PUSH
1030: EMPTY
1031: LIST
1032: LIST
1033: LIST
1034: LIST
1035: PUSH
1036: EMPTY
1037: LIST
1038: LIST
1039: LIST
1040: PUSH
1041: LD_INT 21
1043: PUSH
1044: LD_INT 1
1046: PUSH
1047: LD_INT 1
1049: PUSH
1050: LD_INT 42
1052: PUSH
1053: EMPTY
1054: LIST
1055: LIST
1056: LIST
1057: LIST
1058: PUSH
1059: LD_INT 21
1061: PUSH
1062: LD_INT 1
1064: PUSH
1065: LD_INT 1
1067: PUSH
1068: LD_INT 42
1070: PUSH
1071: EMPTY
1072: LIST
1073: LIST
1074: LIST
1075: LIST
1076: PUSH
1077: LD_INT 21
1079: PUSH
1080: LD_INT 1
1082: PUSH
1083: LD_INT 1
1085: PUSH
1086: LD_INT 51
1088: PUSH
1089: EMPTY
1090: LIST
1091: LIST
1092: LIST
1093: LIST
1094: PUSH
1095: EMPTY
1096: LIST
1097: LIST
1098: LIST
1099: PUSH
1100: EMPTY
1101: LIST
1102: LIST
1103: LIST
1104: ST_TO_ADDR
// end ; mpSharedVision := mpGameSettings [ 11 ] ;
1105: LD_ADDR_EXP 25
1109: PUSH
1110: LD_EXP 15
1114: PUSH
1115: LD_INT 11
1117: ARRAY
1118: ST_TO_ADDR
// mpSibDetection := mpGameSettings [ 13 ] ;
1119: LD_ADDR_EXP 35
1123: PUSH
1124: LD_EXP 15
1128: PUSH
1129: LD_INT 13
1131: ARRAY
1132: ST_TO_ADDR
// mpRespawn := mpGameSettings [ 14 ] ;
1133: LD_ADDR_EXP 42
1137: PUSH
1138: LD_EXP 15
1142: PUSH
1143: LD_INT 14
1145: ARRAY
1146: ST_TO_ADDR
// mpApemans := mpGameSettings [ 15 ] ;
1147: LD_ADDR_EXP 39
1151: PUSH
1152: LD_EXP 15
1156: PUSH
1157: LD_INT 15
1159: ARRAY
1160: ST_TO_ADDR
// depositsValue := mpGameSettings [ 16 ] ;
1161: LD_ADDR_VAR 0 6
1165: PUSH
1166: LD_EXP 15
1170: PUSH
1171: LD_INT 16
1173: ARRAY
1174: ST_TO_ADDR
// mpSibBomb := mpGameSettings [ 18 ] ;
1175: LD_ADDR_EXP 37
1179: PUSH
1180: LD_EXP 15
1184: PUSH
1185: LD_INT 18
1187: ARRAY
1188: ST_TO_ADDR
// mpArtifacts := mpGameSettings [ 19 ] ;
1189: LD_ADDR_EXP 53
1193: PUSH
1194: LD_EXP 15
1198: PUSH
1199: LD_INT 19
1201: ARRAY
1202: ST_TO_ADDR
// mpTeleports := mpGameSettings [ 20 ] ;
1203: LD_ADDR_EXP 52
1207: PUSH
1208: LD_EXP 15
1212: PUSH
1213: LD_INT 20
1215: ARRAY
1216: ST_TO_ADDR
// mpApemansArea := [ Base1ApeArea , Base2ApeArea , Base3ApeArea , Base4ApeArea , Base5ApeArea , Base6ApeArea , Base7ApeArea , Base8ApeArea ] ;
1217: LD_ADDR_EXP 40
1221: PUSH
1222: LD_INT 7
1224: PUSH
1225: LD_INT 8
1227: PUSH
1228: LD_INT 9
1230: PUSH
1231: LD_INT 10
1233: PUSH
1234: LD_INT 11
1236: PUSH
1237: LD_INT 12
1239: PUSH
1240: LD_INT 13
1242: PUSH
1243: LD_INT 14
1245: PUSH
1246: EMPTY
1247: LIST
1248: LIST
1249: LIST
1250: LIST
1251: LIST
1252: LIST
1253: LIST
1254: LIST
1255: ST_TO_ADDR
// startPos := [ GetBuildingFromArea ( depotArea1 , 0 ) , GetBuildingFromArea ( depotArea2 , 1 ) , GetBuildingFromArea ( depotArea3 , 1 ) , GetBuildingFromArea ( depotArea4 , 2 ) , GetBuildingFromArea ( depotArea5 , 3 ) , GetBuildingFromArea ( depotArea6 , 4 ) , GetBuildingFromArea ( depotArea7 , 4 ) , GetBuildingFromArea ( depotArea8 , 5 ) ] ;
1256: LD_ADDR_VAR 0 7
1260: PUSH
1261: LD_INT 15
1263: PPUSH
1264: LD_INT 0
1266: PPUSH
1267: CALL 63791 0 2
1271: PUSH
1272: LD_INT 16
1274: PPUSH
1275: LD_INT 1
1277: PPUSH
1278: CALL 63791 0 2
1282: PUSH
1283: LD_INT 17
1285: PPUSH
1286: LD_INT 1
1288: PPUSH
1289: CALL 63791 0 2
1293: PUSH
1294: LD_INT 18
1296: PPUSH
1297: LD_INT 2
1299: PPUSH
1300: CALL 63791 0 2
1304: PUSH
1305: LD_INT 19
1307: PPUSH
1308: LD_INT 3
1310: PPUSH
1311: CALL 63791 0 2
1315: PUSH
1316: LD_INT 20
1318: PPUSH
1319: LD_INT 4
1321: PPUSH
1322: CALL 63791 0 2
1326: PUSH
1327: LD_INT 21
1329: PPUSH
1330: LD_INT 4
1332: PPUSH
1333: CALL 63791 0 2
1337: PUSH
1338: LD_INT 22
1340: PPUSH
1341: LD_INT 5
1343: PPUSH
1344: CALL 63791 0 2
1348: PUSH
1349: EMPTY
1350: LIST
1351: LIST
1352: LIST
1353: LIST
1354: LIST
1355: LIST
1356: LIST
1357: LIST
1358: ST_TO_ADDR
// for i := 1 to Count ( startPos ) do
1359: LD_ADDR_VAR 0 3
1363: PUSH
1364: DOUBLE
1365: LD_INT 1
1367: DEC
1368: ST_TO_ADDR
1369: LD_VAR 0 7
1373: PPUSH
1374: CALL 23637 0 1
1378: PUSH
1379: FOR_TO
1380: IFFALSE 1484
// mpStartPos := Replace ( mpStartPos , i , [ ShiftX ( startPos [ i ] [ 1 ] , startPos [ i ] [ 3 ] , 10 ) , ShiftY ( startPos [ i ] [ 2 ] , startPos [ i ] [ 3 ] , 10 ) ] ) ;
1382: LD_ADDR_EXP 30
1386: PUSH
1387: LD_EXP 30
1391: PPUSH
1392: LD_VAR 0 3
1396: PPUSH
1397: LD_VAR 0 7
1401: PUSH
1402: LD_VAR 0 3
1406: ARRAY
1407: PUSH
1408: LD_INT 1
1410: ARRAY
1411: PPUSH
1412: LD_VAR 0 7
1416: PUSH
1417: LD_VAR 0 3
1421: ARRAY
1422: PUSH
1423: LD_INT 3
1425: ARRAY
1426: PPUSH
1427: LD_INT 10
1429: PPUSH
1430: CALL_OW 272
1434: PUSH
1435: LD_VAR 0 7
1439: PUSH
1440: LD_VAR 0 3
1444: ARRAY
1445: PUSH
1446: LD_INT 2
1448: ARRAY
1449: PPUSH
1450: LD_VAR 0 7
1454: PUSH
1455: LD_VAR 0 3
1459: ARRAY
1460: PUSH
1461: LD_INT 3
1463: ARRAY
1464: PPUSH
1465: LD_INT 10
1467: PPUSH
1468: CALL_OW 273
1472: PUSH
1473: EMPTY
1474: LIST
1475: LIST
1476: PPUSH
1477: CALL_OW 1
1481: ST_TO_ADDR
1482: GO 1379
1484: POP
1485: POP
// if mpGameType = GameTypeFamine then
1486: LD_EXP 12
1490: PUSH
1491: LD_INT 5
1493: EQUAL
1494: IFFALSE 1604
// begin FamineDeposits ( [ oilBasicArea , oilMediumArea , oilHardArea ] , [ 3 * depositsValue , 5 * depositsValue , 15 * depositsValue ] , mat_oil ) ;
1496: LD_INT 44
1498: PUSH
1499: LD_INT 46
1501: PUSH
1502: LD_INT 48
1504: PUSH
1505: EMPTY
1506: LIST
1507: LIST
1508: LIST
1509: PPUSH
1510: LD_INT 3
1512: PUSH
1513: LD_VAR 0 6
1517: MUL
1518: PUSH
1519: LD_INT 5
1521: PUSH
1522: LD_VAR 0 6
1526: MUL
1527: PUSH
1528: LD_INT 15
1530: PUSH
1531: LD_VAR 0 6
1535: MUL
1536: PUSH
1537: EMPTY
1538: LIST
1539: LIST
1540: LIST
1541: PPUSH
1542: LD_INT 2
1544: PPUSH
1545: CALL 64659 0 3
// FamineDeposits ( [ sibBasicArea , sibMediumArea , sibHardArea ] , [ 1 * depositsValue , 2.5 * depositsValue , 7.5 * depositsValue ] , mat_siberit ) ;
1549: LD_INT 45
1551: PUSH
1552: LD_INT 47
1554: PUSH
1555: LD_INT 49
1557: PUSH
1558: EMPTY
1559: LIST
1560: LIST
1561: LIST
1562: PPUSH
1563: LD_INT 1
1565: PUSH
1566: LD_VAR 0 6
1570: MUL
1571: PUSH
1572: LD_REAL  2.50000000000000E+0000
1575: PUSH
1576: LD_VAR 0 6
1580: MUL
1581: PUSH
1582: LD_REAL  7.50000000000000E+0000
1585: PUSH
1586: LD_VAR 0 6
1590: MUL
1591: PUSH
1592: EMPTY
1593: LIST
1594: LIST
1595: LIST
1596: PPUSH
1597: LD_INT 3
1599: PPUSH
1600: CALL 64659 0 3
// end ; if mpArtifacts then
1604: LD_EXP 53
1608: IFFALSE 1614
// InitArtifact ;
1610: CALL 2804 0 0
// for i := 1 to 8 do
1614: LD_ADDR_VAR 0 3
1618: PUSH
1619: DOUBLE
1620: LD_INT 1
1622: DEC
1623: ST_TO_ADDR
1624: LD_INT 8
1626: PUSH
1627: FOR_TO
1628: IFFALSE 1671
// for t in [ tech_SolEng , tech_SolPow ] do
1630: LD_ADDR_VAR 0 4
1634: PUSH
1635: LD_INT 45
1637: PUSH
1638: LD_INT 35
1640: PUSH
1641: EMPTY
1642: LIST
1643: LIST
1644: PUSH
1645: FOR_IN
1646: IFFALSE 1667
// SetTech ( t , i , state_disabled ) ;
1648: LD_VAR 0 4
1652: PPUSH
1653: LD_VAR 0 3
1657: PPUSH
1658: LD_INT 0
1660: PPUSH
1661: CALL_OW 322
1665: GO 1645
1667: POP
1668: POP
1669: GO 1627
1671: POP
1672: POP
// end ;
1673: LD_VAR 0 2
1677: RET
// every 0 0$2 marked mpActive do var i , j , x , phase , additionalSpawnPhase , f , tmp , areas , areasPhase , time , normalTime , delayTime , maxTime ;
1678: GO 1680
1680: DISABLE
1681: LD_INT 0
1683: PPUSH
1684: PPUSH
1685: PPUSH
1686: PPUSH
1687: PPUSH
1688: PPUSH
1689: PPUSH
1690: PPUSH
1691: PPUSH
1692: PPUSH
1693: PPUSH
1694: PPUSH
1695: PPUSH
// begin if not mpShipments then
1696: LD_EXP 36
1700: NOT
1701: IFFALSE 1705
// exit ;
1703: GO 2462
// case mpShipments of 1 :
1705: LD_EXP 36
1709: PUSH
1710: LD_INT 1
1712: DOUBLE
1713: EQUAL
1714: IFTRUE 1718
1716: GO 1761
1718: POP
// begin time := 0 0$30 ;
1719: LD_ADDR_VAR 0 10
1723: PUSH
1724: LD_INT 1050
1726: ST_TO_ADDR
// normalTime := 0 0$30 ;
1727: LD_ADDR_VAR 0 11
1731: PUSH
1732: LD_INT 1050
1734: ST_TO_ADDR
// maxTime := 1 1$20 ;
1735: LD_ADDR_VAR 0 13
1739: PUSH
1740: LD_INT 2800
1742: ST_TO_ADDR
// delayTime := 0 0$5 ;
1743: LD_ADDR_VAR 0 12
1747: PUSH
1748: LD_INT 175
1750: ST_TO_ADDR
// additionalSpawnPhase := 10 ;
1751: LD_ADDR_VAR 0 5
1755: PUSH
1756: LD_INT 10
1758: ST_TO_ADDR
// end ; 2 :
1759: GO 1915
1761: LD_INT 2
1763: DOUBLE
1764: EQUAL
1765: IFTRUE 1769
1767: GO 1812
1769: POP
// begin time := 0 0$25 ;
1770: LD_ADDR_VAR 0 10
1774: PUSH
1775: LD_INT 875
1777: ST_TO_ADDR
// normalTime := 0 0$25 ;
1778: LD_ADDR_VAR 0 11
1782: PUSH
1783: LD_INT 875
1785: ST_TO_ADDR
// maxTime := 1 1$10 ;
1786: LD_ADDR_VAR 0 13
1790: PUSH
1791: LD_INT 2450
1793: ST_TO_ADDR
// delayTime := 0 0$4 ;
1794: LD_ADDR_VAR 0 12
1798: PUSH
1799: LD_INT 140
1801: ST_TO_ADDR
// additionalSpawnPhase := 8 ;
1802: LD_ADDR_VAR 0 5
1806: PUSH
1807: LD_INT 8
1809: ST_TO_ADDR
// end ; 3 :
1810: GO 1915
1812: LD_INT 3
1814: DOUBLE
1815: EQUAL
1816: IFTRUE 1820
1818: GO 1863
1820: POP
// begin time := 0 0$20 ;
1821: LD_ADDR_VAR 0 10
1825: PUSH
1826: LD_INT 700
1828: ST_TO_ADDR
// normalTime := 0 0$20 ;
1829: LD_ADDR_VAR 0 11
1833: PUSH
1834: LD_INT 700
1836: ST_TO_ADDR
// maxTime := 1 1$00 ;
1837: LD_ADDR_VAR 0 13
1841: PUSH
1842: LD_INT 2100
1844: ST_TO_ADDR
// delayTime := 0 0$3 ;
1845: LD_ADDR_VAR 0 12
1849: PUSH
1850: LD_INT 105
1852: ST_TO_ADDR
// additionalSpawnPhase := 6 ;
1853: LD_ADDR_VAR 0 5
1857: PUSH
1858: LD_INT 6
1860: ST_TO_ADDR
// end ; 4 :
1861: GO 1915
1863: LD_INT 4
1865: DOUBLE
1866: EQUAL
1867: IFTRUE 1871
1869: GO 1914
1871: POP
// begin time := 0 0$15 ;
1872: LD_ADDR_VAR 0 10
1876: PUSH
1877: LD_INT 525
1879: ST_TO_ADDR
// normalTime := 0 0$15 ;
1880: LD_ADDR_VAR 0 11
1884: PUSH
1885: LD_INT 525
1887: ST_TO_ADDR
// maxTime := 0 0$55 ;
1888: LD_ADDR_VAR 0 13
1892: PUSH
1893: LD_INT 1925
1895: ST_TO_ADDR
// delayTime := 0 0$2 ;
1896: LD_ADDR_VAR 0 12
1900: PUSH
1901: LD_INT 70
1903: ST_TO_ADDR
// additionalSpawnPhase := 5 ;
1904: LD_ADDR_VAR 0 5
1908: PUSH
1909: LD_INT 5
1911: ST_TO_ADDR
// end ; end ;
1912: GO 1915
1914: POP
// areas := [ IslandArea1 , IslandArea2 ] ;
1915: LD_ADDR_VAR 0 8
1919: PUSH
1920: LD_INT 23
1922: PUSH
1923: LD_INT 24
1925: PUSH
1926: EMPTY
1927: LIST
1928: LIST
1929: ST_TO_ADDR
// areasPhase := [ [ ] , [ ] ] ;
1930: LD_ADDR_VAR 0 9
1934: PUSH
1935: EMPTY
1936: PUSH
1937: EMPTY
1938: PUSH
1939: EMPTY
1940: LIST
1941: LIST
1942: ST_TO_ADDR
// tmp := [ [ CR1Phase1 , CR2Phase1 , CR3Phase1 , CR4Phase1 , CR5Phase1 , CR6Phase1 , CR7Phase1 , CR8Phase1 ] , [ CR1Phase2 , CR2Phase2 , CR3Phase2 , CR4Phase2 , CR5Phase2 , CR6Phase2 , CR7Phase2 , CR8Phase2 ] ] ;
1943: LD_ADDR_VAR 0 7
1947: PUSH
1948: LD_INT 28
1950: PUSH
1951: LD_INT 29
1953: PUSH
1954: LD_INT 30
1956: PUSH
1957: LD_INT 31
1959: PUSH
1960: LD_INT 32
1962: PUSH
1963: LD_INT 33
1965: PUSH
1966: LD_INT 34
1968: PUSH
1969: LD_INT 35
1971: PUSH
1972: EMPTY
1973: LIST
1974: LIST
1975: LIST
1976: LIST
1977: LIST
1978: LIST
1979: LIST
1980: LIST
1981: PUSH
1982: LD_INT 36
1984: PUSH
1985: LD_INT 37
1987: PUSH
1988: LD_INT 38
1990: PUSH
1991: LD_INT 39
1993: PUSH
1994: LD_INT 40
1996: PUSH
1997: LD_INT 41
1999: PUSH
2000: LD_INT 42
2002: PUSH
2003: LD_INT 43
2005: PUSH
2006: EMPTY
2007: LIST
2008: LIST
2009: LIST
2010: LIST
2011: LIST
2012: LIST
2013: LIST
2014: LIST
2015: PUSH
2016: EMPTY
2017: LIST
2018: LIST
2019: ST_TO_ADDR
// for i := 1 to 8 do
2020: LD_ADDR_VAR 0 1
2024: PUSH
2025: DOUBLE
2026: LD_INT 1
2028: DEC
2029: ST_TO_ADDR
2030: LD_INT 8
2032: PUSH
2033: FOR_TO
2034: IFFALSE 2147
// begin if not mpSidePositions [ i ] then
2036: LD_EXP 16
2040: PUSH
2041: LD_VAR 0 1
2045: ARRAY
2046: NOT
2047: IFFALSE 2051
// continue ;
2049: GO 2033
// for j := 1 to 2 do
2051: LD_ADDR_VAR 0 2
2055: PUSH
2056: DOUBLE
2057: LD_INT 1
2059: DEC
2060: ST_TO_ADDR
2061: LD_INT 2
2063: PUSH
2064: FOR_TO
2065: IFFALSE 2143
// areasPhase := Replace ( areasPhase , j , Replace ( areasPhase [ j ] , areasPhase [ j ] + 1 , tmp [ j ] [ mpSidePositions [ i ] ] ) ) ;
2067: LD_ADDR_VAR 0 9
2071: PUSH
2072: LD_VAR 0 9
2076: PPUSH
2077: LD_VAR 0 2
2081: PPUSH
2082: LD_VAR 0 9
2086: PUSH
2087: LD_VAR 0 2
2091: ARRAY
2092: PPUSH
2093: LD_VAR 0 9
2097: PUSH
2098: LD_VAR 0 2
2102: ARRAY
2103: PUSH
2104: LD_INT 1
2106: PLUS
2107: PPUSH
2108: LD_VAR 0 7
2112: PUSH
2113: LD_VAR 0 2
2117: ARRAY
2118: PUSH
2119: LD_EXP 16
2123: PUSH
2124: LD_VAR 0 1
2128: ARRAY
2129: ARRAY
2130: PPUSH
2131: CALL_OW 1
2135: PPUSH
2136: CALL_OW 1
2140: ST_TO_ADDR
2141: GO 2064
2143: POP
2144: POP
// end ;
2145: GO 2033
2147: POP
2148: POP
// x := 1 ;
2149: LD_ADDR_VAR 0 3
2153: PUSH
2154: LD_INT 1
2156: ST_TO_ADDR
// phase := 1 ;
2157: LD_ADDR_VAR 0 4
2161: PUSH
2162: LD_INT 1
2164: ST_TO_ADDR
// repeat wait ( time ) ;
2165: LD_VAR 0 10
2169: PPUSH
2170: CALL_OW 67
// x := Inc ( x ) ;
2174: LD_ADDR_VAR 0 3
2178: PUSH
2179: LD_VAR 0 3
2183: PPUSH
2184: CALL 60607 0 1
2188: ST_TO_ADDR
// f := Inc ( f ) ;
2189: LD_ADDR_VAR 0 6
2193: PUSH
2194: LD_VAR 0 6
2198: PPUSH
2199: CALL 60607 0 1
2203: ST_TO_ADDR
// if x > 5 then
2204: LD_VAR 0 3
2208: PUSH
2209: LD_INT 5
2211: GREATER
2212: IFFALSE 2222
// x := 1 ;
2214: LD_ADDR_VAR 0 3
2218: PUSH
2219: LD_INT 1
2221: ST_TO_ADDR
// if f mod 20 = 0 then
2222: LD_VAR 0 6
2226: PUSH
2227: LD_INT 20
2229: MOD
2230: PUSH
2231: LD_INT 0
2233: EQUAL
2234: IFFALSE 2251
// phase := Inc ( phase ) ;
2236: LD_ADDR_VAR 0 4
2240: PUSH
2241: LD_VAR 0 4
2245: PPUSH
2246: CALL 60607 0 1
2250: ST_TO_ADDR
// if f mod additionalSpawnPhase = 0 then
2251: LD_VAR 0 6
2255: PUSH
2256: LD_VAR 0 5
2260: MOD
2261: PUSH
2262: LD_INT 0
2264: EQUAL
2265: IFFALSE 2282
// CreateCratesArea ( x , worldCratesArea , true ) ;
2267: LD_VAR 0 3
2271: PPUSH
2272: LD_INT 61
2274: PPUSH
2275: LD_INT 1
2277: PPUSH
2278: CALL_OW 55
// if phase > 2 then
2282: LD_VAR 0 4
2286: PUSH
2287: LD_INT 2
2289: GREATER
2290: IFFALSE 2300
// phase := 1 ;
2292: LD_ADDR_VAR 0 4
2296: PUSH
2297: LD_INT 1
2299: ST_TO_ADDR
// for i in areas do
2300: LD_ADDR_VAR 0 1
2304: PUSH
2305: LD_VAR 0 8
2309: PUSH
2310: FOR_IN
2311: IFFALSE 2360
// begin if GetResourceArea ( i , mat_cans ) < 15 and phase = 2 then
2313: LD_VAR 0 1
2317: PPUSH
2318: LD_INT 1
2320: PPUSH
2321: CALL_OW 287
2325: PUSH
2326: LD_INT 15
2328: LESS
2329: PUSH
2330: LD_VAR 0 4
2334: PUSH
2335: LD_INT 2
2337: EQUAL
2338: AND
2339: IFFALSE 2358
// begin CreateCratesArea ( x , i , true ) ;
2341: LD_VAR 0 3
2345: PPUSH
2346: LD_VAR 0 1
2350: PPUSH
2351: LD_INT 1
2353: PPUSH
2354: CALL_OW 55
// end ; end ;
2358: GO 2310
2360: POP
2361: POP
// for i in areasPhase [ phase ] do
2362: LD_ADDR_VAR 0 1
2366: PUSH
2367: LD_VAR 0 9
2371: PUSH
2372: LD_VAR 0 4
2376: ARRAY
2377: PUSH
2378: FOR_IN
2379: IFFALSE 2418
// begin if GetResourceArea ( i , mat_cans ) < 25 then
2381: LD_VAR 0 1
2385: PPUSH
2386: LD_INT 1
2388: PPUSH
2389: CALL_OW 287
2393: PUSH
2394: LD_INT 25
2396: LESS
2397: IFFALSE 2416
// begin CreateCratesArea ( x , i , true ) ;
2399: LD_VAR 0 3
2403: PPUSH
2404: LD_VAR 0 1
2408: PPUSH
2409: LD_INT 1
2411: PPUSH
2412: CALL_OW 55
// end ; end ;
2416: GO 2378
2418: POP
2419: POP
// time := time + delayTime ;
2420: LD_ADDR_VAR 0 10
2424: PUSH
2425: LD_VAR 0 10
2429: PUSH
2430: LD_VAR 0 12
2434: PLUS
2435: ST_TO_ADDR
// if time > maxTime then
2436: LD_VAR 0 10
2440: PUSH
2441: LD_VAR 0 13
2445: GREATER
2446: IFFALSE 2458
// time := normalTime ;
2448: LD_ADDR_VAR 0 10
2452: PUSH
2453: LD_VAR 0 11
2457: ST_TO_ADDR
// until false ;
2458: LD_INT 0
2460: IFFALSE 2165
// end ;
2462: PPOPN 13
2464: END
// every 0 0$2 trigger mpTeleports do var i , tmp ;
2465: LD_EXP 52
2469: IFFALSE 2663
2471: GO 2473
2473: DISABLE
2474: LD_INT 0
2476: PPUSH
2477: PPUSH
// begin enable ;
2478: ENABLE
// tmp := [ [ T1TeleportArea , T4TeleportExitArea ] , [ T2TeleportArea , T3TeleportExitArea ] , [ T3TeleportArea , T2TeleportExitArea ] , [ T4TeleportArea , T1TeleportExitArea ] , [ T5TeleportArea , T6TeleportExitArea ] , [ T6TeleportArea , T5TeleportExitArea ] , [ T7TeleportArea , IslandArea1 ] , [ T8TeleportArea , IslandArea1 ] , [ T9TeleportArea , IslandArea1 ] , [ T10TeleportArea , IslandArea1 ] ] ;
2479: LD_ADDR_VAR 0 2
2483: PUSH
2484: LD_INT 1
2486: PUSH
2487: LD_INT 53
2489: PUSH
2490: EMPTY
2491: LIST
2492: LIST
2493: PUSH
2494: LD_INT 2
2496: PUSH
2497: LD_INT 52
2499: PUSH
2500: EMPTY
2501: LIST
2502: LIST
2503: PUSH
2504: LD_INT 3
2506: PUSH
2507: LD_INT 51
2509: PUSH
2510: EMPTY
2511: LIST
2512: LIST
2513: PUSH
2514: LD_INT 4
2516: PUSH
2517: LD_INT 50
2519: PUSH
2520: EMPTY
2521: LIST
2522: LIST
2523: PUSH
2524: LD_INT 5
2526: PUSH
2527: LD_INT 55
2529: PUSH
2530: EMPTY
2531: LIST
2532: LIST
2533: PUSH
2534: LD_INT 6
2536: PUSH
2537: LD_INT 54
2539: PUSH
2540: EMPTY
2541: LIST
2542: LIST
2543: PUSH
2544: LD_INT 57
2546: PUSH
2547: LD_INT 23
2549: PUSH
2550: EMPTY
2551: LIST
2552: LIST
2553: PUSH
2554: LD_INT 58
2556: PUSH
2557: LD_INT 23
2559: PUSH
2560: EMPTY
2561: LIST
2562: LIST
2563: PUSH
2564: LD_INT 59
2566: PUSH
2567: LD_INT 23
2569: PUSH
2570: EMPTY
2571: LIST
2572: LIST
2573: PUSH
2574: LD_INT 60
2576: PUSH
2577: LD_INT 23
2579: PUSH
2580: EMPTY
2581: LIST
2582: LIST
2583: PUSH
2584: EMPTY
2585: LIST
2586: LIST
2587: LIST
2588: LIST
2589: LIST
2590: LIST
2591: LIST
2592: LIST
2593: LIST
2594: LIST
2595: ST_TO_ADDR
// for i in tmp do
2596: LD_ADDR_VAR 0 1
2600: PUSH
2601: LD_VAR 0 2
2605: PUSH
2606: FOR_IN
2607: IFFALSE 2661
// CheckBuildUpArea ( i [ 1 ] , i [ 2 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) ;
2609: LD_VAR 0 1
2613: PUSH
2614: LD_INT 1
2616: ARRAY
2617: PPUSH
2618: LD_VAR 0 1
2622: PUSH
2623: LD_INT 2
2625: ARRAY
2626: PPUSH
2627: LD_INT 2
2629: PUSH
2630: LD_INT 21
2632: PUSH
2633: LD_INT 1
2635: PUSH
2636: EMPTY
2637: LIST
2638: LIST
2639: PUSH
2640: LD_INT 21
2642: PUSH
2643: LD_INT 2
2645: PUSH
2646: EMPTY
2647: LIST
2648: LIST
2649: PUSH
2650: EMPTY
2651: LIST
2652: LIST
2653: LIST
2654: PPUSH
2655: CALL_OW 513
2659: GO 2606
2661: POP
2662: POP
// end ; end_of_file
2663: PPOPN 2
2665: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
2666: LD_VAR 0 1
2670: PPUSH
2671: CALL 16087 0 1
// Multiplayer_UnitDestroyed ( un ) ;
2675: LD_VAR 0 1
2679: PPUSH
2680: CALL 11567 0 1
// end ;
2684: PPOPN 1
2686: END
// on UnitKamikazed ( un ) do begin SOS_UnitKamikazed ( un ) ;
2687: LD_VAR 0 1
2691: PPUSH
2692: CALL 16104 0 1
// end ;
2696: PPOPN 1
2698: END
// on BuildingComplete ( b ) do Multiplayer_BuildingComplete ( b ) ;
2699: LD_VAR 0 1
2703: PPUSH
2704: CALL 12232 0 1
2708: PPOPN 1
2710: END
// on VehicleConstructed ( vehicle , factory ) do SOS_VehicleConstructed ( vehicle , factory ) ;
2711: LD_VAR 0 1
2715: PPUSH
2716: LD_VAR 0 2
2720: PPUSH
2721: CALL 16145 0 2
2725: PPOPN 2
2727: END
// on BuildingCaptured ( building , oldSide , unit ) do Multiplayer_BuildingCaptured ( building , oldSide , unit ) ;
2728: LD_VAR 0 1
2732: PPUSH
2733: LD_VAR 0 2
2737: PPUSH
2738: LD_VAR 0 3
2742: PPUSH
2743: CALL 12285 0 3
2747: PPOPN 3
2749: END
// on OilExtracted ( building , side , base , amount ) do Multiplayer_OilExtracted ( building , side , base , amount ) ;
2750: LD_VAR 0 1
2754: PPUSH
2755: LD_VAR 0 2
2759: PPUSH
2760: LD_VAR 0 3
2764: PPUSH
2765: LD_VAR 0 4
2769: PPUSH
2770: CALL 12434 0 4
2774: PPOPN 4
2776: END
// on SibExtracted ( building , side , base , amount ) do Multiplayer_SibExtracted ( building , side , base , amount ) ; end_of_file
2777: LD_VAR 0 1
2781: PPUSH
2782: LD_VAR 0 2
2786: PPUSH
2787: LD_VAR 0 3
2791: PPUSH
2792: LD_VAR 0 4
2796: PPUSH
2797: CALL 12670 0 4
2801: PPOPN 4
2803: END
// export artifactsPos , artifactsRecharge , artifactsSibCost , artifactsResearched , artifactsReady ; export artifactsResDifficulty , artifactsResProgress , artifactsButtons , artifactsLabsWorking ; export function InitArtifact ; var i ; begin
2804: LD_INT 0
2806: PPUSH
2807: PPUSH
// for i := 1 to 8 do
2808: LD_ADDR_VAR 0 2
2812: PUSH
2813: DOUBLE
2814: LD_INT 1
2816: DEC
2817: ST_TO_ADDR
2818: LD_INT 8
2820: PUSH
2821: FOR_TO
2822: IFFALSE 2838
// SetArtifactRes ( i , true ) ;
2824: LD_VAR 0 2
2828: PPUSH
2829: LD_INT 1
2831: PPUSH
2832: CALL_OW 467
2836: GO 2821
2838: POP
2839: POP
// CreateResourcesArea ( mat_artifact , 3 , ArtifactArea1 , false ) ;
2840: LD_INT 4
2842: PPUSH
2843: LD_INT 3
2845: PPUSH
2846: LD_INT 25
2848: PPUSH
2849: LD_INT 0
2851: PPUSH
2852: CALL_OW 59
// CreateResourcesArea ( mat_artifact , 4 , ArtifactArea2 , false ) ;
2856: LD_INT 4
2858: PPUSH
2859: LD_INT 4
2861: PPUSH
2862: LD_INT 26
2864: PPUSH
2865: LD_INT 0
2867: PPUSH
2868: CALL_OW 59
// CreateResourcesArea ( mat_artifact , 5 , ArtifactArea3 , false ) ;
2872: LD_INT 4
2874: PPUSH
2875: LD_INT 5
2877: PPUSH
2878: LD_INT 27
2880: PPUSH
2881: LD_INT 0
2883: PPUSH
2884: CALL_OW 59
// artifactsPos := [ [ ] , [ ] , [ ] ] ;
2888: LD_ADDR_EXP 3
2892: PUSH
2893: EMPTY
2894: PUSH
2895: EMPTY
2896: PUSH
2897: EMPTY
2898: PUSH
2899: EMPTY
2900: LIST
2901: LIST
2902: LIST
2903: ST_TO_ADDR
// artifactsRecharge := [ 0 0$30 , 1 1$20 , 5 5$00 ] ;
2904: LD_ADDR_EXP 4
2908: PUSH
2909: LD_INT 1050
2911: PUSH
2912: LD_INT 2800
2914: PUSH
2915: LD_INT 10500
2917: PUSH
2918: EMPTY
2919: LIST
2920: LIST
2921: LIST
2922: ST_TO_ADDR
// artifactsSibCost := [ 10 , 35 , 100 ] ;
2923: LD_ADDR_EXP 5
2927: PUSH
2928: LD_INT 10
2930: PUSH
2931: LD_INT 35
2933: PUSH
2934: LD_INT 100
2936: PUSH
2937: EMPTY
2938: LIST
2939: LIST
2940: LIST
2941: ST_TO_ADDR
// artifactsResDifficulty := [ 300 , 500 , 800 ] ;
2942: LD_ADDR_EXP 8
2946: PUSH
2947: LD_INT 300
2949: PUSH
2950: LD_INT 500
2952: PUSH
2953: LD_INT 800
2955: PUSH
2956: EMPTY
2957: LIST
2958: LIST
2959: LIST
2960: ST_TO_ADDR
// artifactsLabsWorking := [ [ ] , [ ] , [ ] ] ;
2961: LD_ADDR_EXP 11
2965: PUSH
2966: EMPTY
2967: PUSH
2968: EMPTY
2969: PUSH
2970: EMPTY
2971: PUSH
2972: EMPTY
2973: LIST
2974: LIST
2975: LIST
2976: ST_TO_ADDR
// artifactsResearched := [ [ 0 , 0 , 0 ] , [ 0 , 0 , 0 ] , [ 0 , 0 , 0 ] , [ 0 , 0 , 0 ] , [ 0 , 0 , 0 ] , [ 0 , 0 , 0 ] , [ 0 , 0 , 0 ] , [ 0 , 0 , 0 ] ] ;
2977: LD_ADDR_EXP 6
2981: PUSH
2982: LD_INT 0
2984: PUSH
2985: LD_INT 0
2987: PUSH
2988: LD_INT 0
2990: PUSH
2991: EMPTY
2992: LIST
2993: LIST
2994: LIST
2995: PUSH
2996: LD_INT 0
2998: PUSH
2999: LD_INT 0
3001: PUSH
3002: LD_INT 0
3004: PUSH
3005: EMPTY
3006: LIST
3007: LIST
3008: LIST
3009: PUSH
3010: LD_INT 0
3012: PUSH
3013: LD_INT 0
3015: PUSH
3016: LD_INT 0
3018: PUSH
3019: EMPTY
3020: LIST
3021: LIST
3022: LIST
3023: PUSH
3024: LD_INT 0
3026: PUSH
3027: LD_INT 0
3029: PUSH
3030: LD_INT 0
3032: PUSH
3033: EMPTY
3034: LIST
3035: LIST
3036: LIST
3037: PUSH
3038: LD_INT 0
3040: PUSH
3041: LD_INT 0
3043: PUSH
3044: LD_INT 0
3046: PUSH
3047: EMPTY
3048: LIST
3049: LIST
3050: LIST
3051: PUSH
3052: LD_INT 0
3054: PUSH
3055: LD_INT 0
3057: PUSH
3058: LD_INT 0
3060: PUSH
3061: EMPTY
3062: LIST
3063: LIST
3064: LIST
3065: PUSH
3066: LD_INT 0
3068: PUSH
3069: LD_INT 0
3071: PUSH
3072: LD_INT 0
3074: PUSH
3075: EMPTY
3076: LIST
3077: LIST
3078: LIST
3079: PUSH
3080: LD_INT 0
3082: PUSH
3083: LD_INT 0
3085: PUSH
3086: LD_INT 0
3088: PUSH
3089: EMPTY
3090: LIST
3091: LIST
3092: LIST
3093: PUSH
3094: EMPTY
3095: LIST
3096: LIST
3097: LIST
3098: LIST
3099: LIST
3100: LIST
3101: LIST
3102: LIST
3103: ST_TO_ADDR
// artifactsResProgress := [ [ 0 , 0 , 0 ] , [ 0 , 0 , 0 ] , [ 0 , 0 , 0 ] , [ 0 , 0 , 0 ] , [ 0 , 0 , 0 ] , [ 0 , 0 , 0 ] , [ 0 , 0 , 0 ] , [ 0 , 0 , 0 ] ] ;
3104: LD_ADDR_EXP 9
3108: PUSH
3109: LD_INT 0
3111: PUSH
3112: LD_INT 0
3114: PUSH
3115: LD_INT 0
3117: PUSH
3118: EMPTY
3119: LIST
3120: LIST
3121: LIST
3122: PUSH
3123: LD_INT 0
3125: PUSH
3126: LD_INT 0
3128: PUSH
3129: LD_INT 0
3131: PUSH
3132: EMPTY
3133: LIST
3134: LIST
3135: LIST
3136: PUSH
3137: LD_INT 0
3139: PUSH
3140: LD_INT 0
3142: PUSH
3143: LD_INT 0
3145: PUSH
3146: EMPTY
3147: LIST
3148: LIST
3149: LIST
3150: PUSH
3151: LD_INT 0
3153: PUSH
3154: LD_INT 0
3156: PUSH
3157: LD_INT 0
3159: PUSH
3160: EMPTY
3161: LIST
3162: LIST
3163: LIST
3164: PUSH
3165: LD_INT 0
3167: PUSH
3168: LD_INT 0
3170: PUSH
3171: LD_INT 0
3173: PUSH
3174: EMPTY
3175: LIST
3176: LIST
3177: LIST
3178: PUSH
3179: LD_INT 0
3181: PUSH
3182: LD_INT 0
3184: PUSH
3185: LD_INT 0
3187: PUSH
3188: EMPTY
3189: LIST
3190: LIST
3191: LIST
3192: PUSH
3193: LD_INT 0
3195: PUSH
3196: LD_INT 0
3198: PUSH
3199: LD_INT 0
3201: PUSH
3202: EMPTY
3203: LIST
3204: LIST
3205: LIST
3206: PUSH
3207: LD_INT 0
3209: PUSH
3210: LD_INT 0
3212: PUSH
3213: LD_INT 0
3215: PUSH
3216: EMPTY
3217: LIST
3218: LIST
3219: LIST
3220: PUSH
3221: EMPTY
3222: LIST
3223: LIST
3224: LIST
3225: LIST
3226: LIST
3227: LIST
3228: LIST
3229: LIST
3230: ST_TO_ADDR
// artifactsReady := [ [ 0 , 0 , 0 ] , [ 0 , 0 , 0 ] , [ 0 , 0 , 0 ] , [ 0 , 0 , 0 ] , [ 0 , 0 , 0 ] , [ 0 , 0 , 0 ] , [ 0 , 0 , 0 ] , [ 0 , 0 , 0 ] ] ;
3231: LD_ADDR_EXP 7
3235: PUSH
3236: LD_INT 0
3238: PUSH
3239: LD_INT 0
3241: PUSH
3242: LD_INT 0
3244: PUSH
3245: EMPTY
3246: LIST
3247: LIST
3248: LIST
3249: PUSH
3250: LD_INT 0
3252: PUSH
3253: LD_INT 0
3255: PUSH
3256: LD_INT 0
3258: PUSH
3259: EMPTY
3260: LIST
3261: LIST
3262: LIST
3263: PUSH
3264: LD_INT 0
3266: PUSH
3267: LD_INT 0
3269: PUSH
3270: LD_INT 0
3272: PUSH
3273: EMPTY
3274: LIST
3275: LIST
3276: LIST
3277: PUSH
3278: LD_INT 0
3280: PUSH
3281: LD_INT 0
3283: PUSH
3284: LD_INT 0
3286: PUSH
3287: EMPTY
3288: LIST
3289: LIST
3290: LIST
3291: PUSH
3292: LD_INT 0
3294: PUSH
3295: LD_INT 0
3297: PUSH
3298: LD_INT 0
3300: PUSH
3301: EMPTY
3302: LIST
3303: LIST
3304: LIST
3305: PUSH
3306: LD_INT 0
3308: PUSH
3309: LD_INT 0
3311: PUSH
3312: LD_INT 0
3314: PUSH
3315: EMPTY
3316: LIST
3317: LIST
3318: LIST
3319: PUSH
3320: LD_INT 0
3322: PUSH
3323: LD_INT 0
3325: PUSH
3326: LD_INT 0
3328: PUSH
3329: EMPTY
3330: LIST
3331: LIST
3332: LIST
3333: PUSH
3334: LD_INT 0
3336: PUSH
3337: LD_INT 0
3339: PUSH
3340: LD_INT 0
3342: PUSH
3343: EMPTY
3344: LIST
3345: LIST
3346: LIST
3347: PUSH
3348: EMPTY
3349: LIST
3350: LIST
3351: LIST
3352: LIST
3353: LIST
3354: LIST
3355: LIST
3356: LIST
3357: ST_TO_ADDR
// artifactsButtons := [ [ art_use_eye , art_place , art_exp_left ] , [ art_use_sibexplosion , art_unit , art_exp_mid ] , [ art_use_atom , art_place , art_exp_right ] ] ;
3358: LD_ADDR_EXP 10
3362: PUSH
3363: LD_INT 4
3365: PUSH
3366: LD_INT 3
3368: PUSH
3369: LD_INT 1
3371: PUSH
3372: EMPTY
3373: LIST
3374: LIST
3375: LIST
3376: PUSH
3377: LD_INT 5
3379: PUSH
3380: LD_INT 4
3382: PUSH
3383: LD_INT 2
3385: PUSH
3386: EMPTY
3387: LIST
3388: LIST
3389: LIST
3390: PUSH
3391: LD_INT 7
3393: PUSH
3394: LD_INT 3
3396: PUSH
3397: LD_INT 3
3399: PUSH
3400: EMPTY
3401: LIST
3402: LIST
3403: LIST
3404: PUSH
3405: EMPTY
3406: LIST
3407: LIST
3408: LIST
3409: ST_TO_ADDR
// end ;
3410: LD_VAR 0 1
3414: RET
// function TeleportArtefact ( number , area ) ; var i , hex , tmp , cargo ; begin
3415: LD_INT 0
3417: PPUSH
3418: PPUSH
3419: PPUSH
3420: PPUSH
3421: PPUSH
// if not number in [ 3 , 4 , 5 ] then
3422: LD_VAR 0 1
3426: PUSH
3427: LD_INT 3
3429: PUSH
3430: LD_INT 4
3432: PUSH
3433: LD_INT 5
3435: PUSH
3436: EMPTY
3437: LIST
3438: LIST
3439: LIST
3440: IN
3441: NOT
3442: IFFALSE 3446
// exit ;
3444: GO 3860
// hex := FindArtifact ( number ) ;
3446: LD_ADDR_VAR 0 5
3450: PUSH
3451: LD_VAR 0 1
3455: PPUSH
3456: CALL_OW 469
3460: ST_TO_ADDR
// if hex then
3461: LD_VAR 0 5
3465: IFFALSE 3736
// begin if InArea ( hex [ 1 ] , hex [ 2 ] , area ) then
3467: LD_VAR 0 5
3471: PUSH
3472: LD_INT 1
3474: ARRAY
3475: PPUSH
3476: LD_VAR 0 5
3480: PUSH
3481: LD_INT 2
3483: ARRAY
3484: PPUSH
3485: LD_VAR 0 2
3489: PPUSH
3490: CALL_OW 309
3494: IFFALSE 3498
// exit ;
3496: GO 3860
// if artifactsLabsWorking [ number - 2 ] then
3498: LD_EXP 11
3502: PUSH
3503: LD_VAR 0 1
3507: PUSH
3508: LD_INT 2
3510: MINUS
3511: ARRAY
3512: IFFALSE 3617
// begin for i in artifactsLabsWorking [ number - 2 ] do
3514: LD_ADDR_VAR 0 4
3518: PUSH
3519: LD_EXP 11
3523: PUSH
3524: LD_VAR 0 1
3528: PUSH
3529: LD_INT 2
3531: MINUS
3532: ARRAY
3533: PUSH
3534: FOR_IN
3535: IFFALSE 3589
// begin SetArtifactUse ( GetSide ( i ) , artifactsButtons [ number - 2 ] [ 3 ] , art_no , i ) ;
3537: LD_VAR 0 4
3541: PPUSH
3542: CALL_OW 255
3546: PPUSH
3547: LD_EXP 10
3551: PUSH
3552: LD_VAR 0 1
3556: PUSH
3557: LD_INT 2
3559: MINUS
3560: ARRAY
3561: PUSH
3562: LD_INT 3
3564: ARRAY
3565: PPUSH
3566: LD_INT 0
3568: PPUSH
3569: LD_VAR 0 4
3573: PPUSH
3574: CALL_OW 468
// ComCancel ( i ) ;
3578: LD_VAR 0 4
3582: PPUSH
3583: CALL_OW 127
// end ;
3587: GO 3534
3589: POP
3590: POP
// artifactsLabsWorking := Replace ( artifactsLabsWorking , number - 2 , [ ] ) ;
3591: LD_ADDR_EXP 11
3595: PUSH
3596: LD_EXP 11
3600: PPUSH
3601: LD_VAR 0 1
3605: PUSH
3606: LD_INT 2
3608: MINUS
3609: PPUSH
3610: EMPTY
3611: PPUSH
3612: CALL_OW 1
3616: ST_TO_ADDR
// end ; tmp := FilterUnitsInArea ( area , [ f_placed ] ) ;
3617: LD_ADDR_VAR 0 6
3621: PUSH
3622: LD_VAR 0 2
3626: PPUSH
3627: LD_INT 52
3629: PUSH
3630: EMPTY
3631: LIST
3632: PPUSH
3633: CALL_OW 70
3637: ST_TO_ADDR
// if tmp then
3638: LD_VAR 0 6
3642: IFFALSE 3670
// for i in tmp do
3644: LD_ADDR_VAR 0 4
3648: PUSH
3649: LD_VAR 0 6
3653: PUSH
3654: FOR_IN
3655: IFFALSE 3668
// DestroyUnit ( i ) ;
3657: LD_VAR 0 4
3661: PPUSH
3662: CALL_OW 65
3666: GO 3654
3668: POP
3669: POP
// MoveAreaXY ( artifactTeleportArea , hex [ 1 ] , hex [ 2 ] ) ;
3670: LD_INT 56
3672: PPUSH
3673: LD_VAR 0 5
3677: PUSH
3678: LD_INT 1
3680: ARRAY
3681: PPUSH
3682: LD_VAR 0 5
3686: PUSH
3687: LD_INT 2
3689: ARRAY
3690: PPUSH
3691: CALL_OW 425
// EffectTeleport ( hex [ 1 ] , hex [ 2 ] ) ;
3695: LD_VAR 0 5
3699: PUSH
3700: LD_INT 1
3702: ARRAY
3703: PPUSH
3704: LD_VAR 0 5
3708: PUSH
3709: LD_INT 2
3711: ARRAY
3712: PPUSH
3713: CALL_OW 494
// wait ( 30 ) ;
3717: LD_INT 30
3719: PPUSH
3720: CALL_OW 67
// EraseResourceArea ( artifactTeleportArea , mat_artefact ) ;
3724: LD_INT 56
3726: PPUSH
3727: LD_INT 4
3729: PPUSH
3730: CALL_OW 286
// end else
3734: GO 3840
// begin cargo := FilterAllUnits ( [ [ f_tag , number ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
3736: LD_ADDR_VAR 0 7
3740: PUSH
3741: LD_INT 120
3743: PUSH
3744: LD_VAR 0 1
3748: PUSH
3749: EMPTY
3750: LIST
3751: LIST
3752: PUSH
3753: LD_INT 2
3755: PUSH
3756: LD_INT 34
3758: PUSH
3759: LD_INT 12
3761: PUSH
3762: EMPTY
3763: LIST
3764: LIST
3765: PUSH
3766: LD_INT 34
3768: PUSH
3769: LD_INT 32
3771: PUSH
3772: EMPTY
3773: LIST
3774: LIST
3775: PUSH
3776: LD_INT 34
3778: PUSH
3779: LD_INT 51
3781: PUSH
3782: EMPTY
3783: LIST
3784: LIST
3785: PUSH
3786: LD_INT 34
3788: PUSH
3789: LD_INT 89
3791: PUSH
3792: EMPTY
3793: LIST
3794: LIST
3795: PUSH
3796: EMPTY
3797: LIST
3798: LIST
3799: LIST
3800: LIST
3801: LIST
3802: PUSH
3803: EMPTY
3804: LIST
3805: LIST
3806: PPUSH
3807: CALL_OW 69
3811: ST_TO_ADDR
// if not cargo then
3812: LD_VAR 0 7
3816: NOT
3817: IFFALSE 3821
// exit ;
3819: GO 3860
// SetCargo ( cargo [ 1 ] , mat_artifact , 0 ) ;
3821: LD_VAR 0 7
3825: PUSH
3826: LD_INT 1
3828: ARRAY
3829: PPUSH
3830: LD_INT 4
3832: PPUSH
3833: LD_INT 0
3835: PPUSH
3836: CALL_OW 290
// end ; CreateResourcesArea ( mat_artifact , number , area , false ) ;
3840: LD_INT 4
3842: PPUSH
3843: LD_VAR 0 1
3847: PPUSH
3848: LD_VAR 0 2
3852: PPUSH
3853: LD_INT 0
3855: PPUSH
3856: CALL_OW 59
// end ;
3860: LD_VAR 0 3
3864: RET
// every 8 8$30 trigger mpArtifacts do
3865: LD_EXP 53
3869: IFFALSE 3885
3871: GO 3873
3873: DISABLE
// begin enable ;
3874: ENABLE
// TeleportArtefact ( 3 , ArtifactArea1 ) ;
3875: LD_INT 3
3877: PPUSH
3878: LD_INT 25
3880: PPUSH
3881: CALL 3415 0 2
// end ;
3885: END
// every 6 6$10 trigger mpArtifacts do
3886: LD_EXP 53
3890: IFFALSE 3906
3892: GO 3894
3894: DISABLE
// begin enable ;
3895: ENABLE
// TeleportArtefact ( 4 , ArtifactArea2 ) ;
3896: LD_INT 4
3898: PPUSH
3899: LD_INT 26
3901: PPUSH
3902: CALL 3415 0 2
// end ;
3906: END
// every 4 4$10 trigger mpArtifacts do
3907: LD_EXP 53
3911: IFFALSE 3927
3913: GO 3915
3915: DISABLE
// begin enable ;
3916: ENABLE
// TeleportArtefact ( 5 , ArtifactArea3 ) ;
3917: LD_INT 5
3919: PPUSH
3920: LD_INT 27
3922: PPUSH
3923: CALL 3415 0 2
// end ;
3927: END
// every 0 0$1 trigger mpArtifacts do var i , pos , j , side , labs , nearestLab ;
3928: LD_EXP 53
3932: IFFALSE 4828
3934: GO 3936
3936: DISABLE
3937: LD_INT 0
3939: PPUSH
3940: PPUSH
3941: PPUSH
3942: PPUSH
3943: PPUSH
3944: PPUSH
// begin enable ;
3945: ENABLE
// for i := 1 to 3 do
3946: LD_ADDR_VAR 0 1
3950: PUSH
3951: DOUBLE
3952: LD_INT 1
3954: DEC
3955: ST_TO_ADDR
3956: LD_INT 3
3958: PUSH
3959: FOR_TO
3960: IFFALSE 4826
// begin pos := FindArtifact ( i + 2 ) ;
3962: LD_ADDR_VAR 0 2
3966: PUSH
3967: LD_VAR 0 1
3971: PUSH
3972: LD_INT 2
3974: PLUS
3975: PPUSH
3976: CALL_OW 469
3980: ST_TO_ADDR
// artifactsPos := Replace ( artifactsPos , i , pos ) ;
3981: LD_ADDR_EXP 3
3985: PUSH
3986: LD_EXP 3
3990: PPUSH
3991: LD_VAR 0 1
3995: PPUSH
3996: LD_VAR 0 2
4000: PPUSH
4001: CALL_OW 1
4005: ST_TO_ADDR
// labs := FilterAllUnits ( [ f_lab , b_lab_siberium ] ) ;
4006: LD_ADDR_VAR 0 5
4010: PUSH
4011: LD_INT 63
4013: PUSH
4014: LD_INT 11
4016: PUSH
4017: EMPTY
4018: LIST
4019: LIST
4020: PPUSH
4021: CALL_OW 69
4025: ST_TO_ADDR
// if not labs then
4026: LD_VAR 0 5
4030: NOT
4031: IFFALSE 4037
// exit ;
4033: POP
4034: POP
4035: GO 4828
// if pos then
4037: LD_VAR 0 2
4041: IFFALSE 4664
// begin if not labs then
4043: LD_VAR 0 5
4047: NOT
4048: IFFALSE 4052
// continue ;
4050: GO 3959
// nearestLab := NearestUnitToXY ( labs , artifactsPos [ i ] [ 1 ] , artifactsPos [ i ] [ 2 ] ) ;
4052: LD_ADDR_VAR 0 6
4056: PUSH
4057: LD_VAR 0 5
4061: PPUSH
4062: LD_EXP 3
4066: PUSH
4067: LD_VAR 0 1
4071: ARRAY
4072: PUSH
4073: LD_INT 1
4075: ARRAY
4076: PPUSH
4077: LD_EXP 3
4081: PUSH
4082: LD_VAR 0 1
4086: ARRAY
4087: PUSH
4088: LD_INT 2
4090: ARRAY
4091: PPUSH
4092: CALL_OW 73
4096: ST_TO_ADDR
// if not nearestLab then
4097: LD_VAR 0 6
4101: NOT
4102: IFFALSE 4202
// begin for j in labs do
4104: LD_ADDR_VAR 0 3
4108: PUSH
4109: LD_VAR 0 5
4113: PUSH
4114: FOR_IN
4115: IFFALSE 4198
// begin side := GetSide ( j ) ;
4117: LD_ADDR_VAR 0 4
4121: PUSH
4122: LD_VAR 0 3
4126: PPUSH
4127: CALL_OW 255
4131: ST_TO_ADDR
// SetArtifactUse ( side , artifactsButtons [ i ] [ 3 ] , art_no , j ) ;
4132: LD_VAR 0 4
4136: PPUSH
4137: LD_EXP 10
4141: PUSH
4142: LD_VAR 0 1
4146: ARRAY
4147: PUSH
4148: LD_INT 3
4150: ARRAY
4151: PPUSH
4152: LD_INT 0
4154: PPUSH
4155: LD_VAR 0 3
4159: PPUSH
4160: CALL_OW 468
// SetArtifactUse ( side , artifactsButtons [ i ] [ 1 ] , art_no , j ) ;
4164: LD_VAR 0 4
4168: PPUSH
4169: LD_EXP 10
4173: PUSH
4174: LD_VAR 0 1
4178: ARRAY
4179: PUSH
4180: LD_INT 1
4182: ARRAY
4183: PPUSH
4184: LD_INT 0
4186: PPUSH
4187: LD_VAR 0 3
4191: PPUSH
4192: CALL_OW 468
// end ;
4196: GO 4114
4198: POP
4199: POP
// continue ;
4200: GO 3959
// end ; if GetDistUnitXY ( nearestLab , artifactsPos [ i ] [ 1 ] , artifactsPos [ i ] [ 2 ] ) < 8 and GetTech ( tech_artifact , GetSide ( nearestLab ) ) = state_researched then
4202: LD_VAR 0 6
4206: PPUSH
4207: LD_EXP 3
4211: PUSH
4212: LD_VAR 0 1
4216: ARRAY
4217: PUSH
4218: LD_INT 1
4220: ARRAY
4221: PPUSH
4222: LD_EXP 3
4226: PUSH
4227: LD_VAR 0 1
4231: ARRAY
4232: PUSH
4233: LD_INT 2
4235: ARRAY
4236: PPUSH
4237: CALL_OW 297
4241: PUSH
4242: LD_INT 8
4244: LESS
4245: PUSH
4246: LD_INT 24
4248: PPUSH
4249: LD_VAR 0 6
4253: PPUSH
4254: CALL_OW 255
4258: PPUSH
4259: CALL_OW 321
4263: PUSH
4264: LD_INT 2
4266: EQUAL
4267: AND
4268: IFFALSE 4500
// begin side := GetSide ( nearestLab ) ;
4270: LD_ADDR_VAR 0 4
4274: PUSH
4275: LD_VAR 0 6
4279: PPUSH
4280: CALL_OW 255
4284: ST_TO_ADDR
// if not artifactsResearched [ side ] [ i ] then
4285: LD_EXP 6
4289: PUSH
4290: LD_VAR 0 4
4294: ARRAY
4295: PUSH
4296: LD_VAR 0 1
4300: ARRAY
4301: NOT
4302: IFFALSE 4387
// begin if BuildingStatus ( nearestLab ) = bs_idle then
4304: LD_VAR 0 6
4308: PPUSH
4309: CALL_OW 461
4313: PUSH
4314: LD_INT 2
4316: EQUAL
4317: IFFALSE 4353
// SetArtifactUse ( side , artifactsButtons [ i ] [ 3 ] , art_instant , nearestLab ) else
4319: LD_VAR 0 4
4323: PPUSH
4324: LD_EXP 10
4328: PUSH
4329: LD_VAR 0 1
4333: ARRAY
4334: PUSH
4335: LD_INT 3
4337: ARRAY
4338: PPUSH
4339: LD_INT 2
4341: PPUSH
4342: LD_VAR 0 6
4346: PPUSH
4347: CALL_OW 468
4351: GO 4385
// SetArtifactUse ( side , artifactsButtons [ i ] [ 3 ] , art_gray , nearestLab ) ;
4353: LD_VAR 0 4
4357: PPUSH
4358: LD_EXP 10
4362: PUSH
4363: LD_VAR 0 1
4367: ARRAY
4368: PUSH
4369: LD_INT 3
4371: ARRAY
4372: PPUSH
4373: LD_INT 1
4375: PPUSH
4376: LD_VAR 0 6
4380: PPUSH
4381: CALL_OW 468
// end else
4385: GO 4498
// begin if BuildingStatus ( nearestLab ) = bs_idle and artifactsReady [ side ] [ i ] then
4387: LD_VAR 0 6
4391: PPUSH
4392: CALL_OW 461
4396: PUSH
4397: LD_INT 2
4399: EQUAL
4400: PUSH
4401: LD_EXP 7
4405: PUSH
4406: LD_VAR 0 4
4410: ARRAY
4411: PUSH
4412: LD_VAR 0 1
4416: ARRAY
4417: AND
4418: IFFALSE 4466
// SetArtifactUse ( side , artifactsButtons [ i ] [ 1 ] , artifactsButtons [ i ] [ 2 ] , nearestLab ) else
4420: LD_VAR 0 4
4424: PPUSH
4425: LD_EXP 10
4429: PUSH
4430: LD_VAR 0 1
4434: ARRAY
4435: PUSH
4436: LD_INT 1
4438: ARRAY
4439: PPUSH
4440: LD_EXP 10
4444: PUSH
4445: LD_VAR 0 1
4449: ARRAY
4450: PUSH
4451: LD_INT 2
4453: ARRAY
4454: PPUSH
4455: LD_VAR 0 6
4459: PPUSH
4460: CALL_OW 468
4464: GO 4498
// SetArtifactUse ( side , artifactsButtons [ i ] [ 1 ] , art_gray , nearestLab ) end ;
4466: LD_VAR 0 4
4470: PPUSH
4471: LD_EXP 10
4475: PUSH
4476: LD_VAR 0 1
4480: ARRAY
4481: PUSH
4482: LD_INT 1
4484: ARRAY
4485: PPUSH
4486: LD_INT 1
4488: PPUSH
4489: LD_VAR 0 6
4493: PPUSH
4494: CALL_OW 468
// end else
4498: GO 4662
// begin for j in labs do
4500: LD_ADDR_VAR 0 3
4504: PUSH
4505: LD_VAR 0 5
4509: PUSH
4510: FOR_IN
4511: IFFALSE 4660
// begin if GetDistUnitXY ( j , artifactsPos [ i ] [ 1 ] , artifactsPos [ i ] [ 2 ] ) >= 8 then
4513: LD_VAR 0 3
4517: PPUSH
4518: LD_EXP 3
4522: PUSH
4523: LD_VAR 0 1
4527: ARRAY
4528: PUSH
4529: LD_INT 1
4531: ARRAY
4532: PPUSH
4533: LD_EXP 3
4537: PUSH
4538: LD_VAR 0 1
4542: ARRAY
4543: PUSH
4544: LD_INT 2
4546: ARRAY
4547: PPUSH
4548: CALL_OW 297
4552: PUSH
4553: LD_INT 8
4555: GREATEREQUAL
4556: IFFALSE 4658
// begin side := GetSide ( j ) ;
4558: LD_ADDR_VAR 0 4
4562: PUSH
4563: LD_VAR 0 3
4567: PPUSH
4568: CALL_OW 255
4572: ST_TO_ADDR
// if not artifactsResearched [ side ] [ i ] then
4573: LD_EXP 6
4577: PUSH
4578: LD_VAR 0 4
4582: ARRAY
4583: PUSH
4584: LD_VAR 0 1
4588: ARRAY
4589: NOT
4590: IFFALSE 4626
// SetArtifactUse ( side , artifactsButtons [ i ] [ 3 ] , art_no , j ) else
4592: LD_VAR 0 4
4596: PPUSH
4597: LD_EXP 10
4601: PUSH
4602: LD_VAR 0 1
4606: ARRAY
4607: PUSH
4608: LD_INT 3
4610: ARRAY
4611: PPUSH
4612: LD_INT 0
4614: PPUSH
4615: LD_VAR 0 3
4619: PPUSH
4620: CALL_OW 468
4624: GO 4658
// SetArtifactUse ( side , artifactsButtons [ i ] [ 1 ] , art_no , j ) ;
4626: LD_VAR 0 4
4630: PPUSH
4631: LD_EXP 10
4635: PUSH
4636: LD_VAR 0 1
4640: ARRAY
4641: PUSH
4642: LD_INT 1
4644: ARRAY
4645: PPUSH
4646: LD_INT 0
4648: PPUSH
4649: LD_VAR 0 3
4653: PPUSH
4654: CALL_OW 468
// end ; end ;
4658: GO 4510
4660: POP
4661: POP
// end ; end else
4662: GO 4824
// begin for j in labs do
4664: LD_ADDR_VAR 0 3
4668: PUSH
4669: LD_VAR 0 5
4673: PUSH
4674: FOR_IN
4675: IFFALSE 4822
// begin side := GetSide ( j ) ;
4677: LD_ADDR_VAR 0 4
4681: PUSH
4682: LD_VAR 0 3
4686: PPUSH
4687: CALL_OW 255
4691: ST_TO_ADDR
// SetArtifactUse ( side , artifactsButtons [ i ] [ 3 ] , art_no , j ) ;
4692: LD_VAR 0 4
4696: PPUSH
4697: LD_EXP 10
4701: PUSH
4702: LD_VAR 0 1
4706: ARRAY
4707: PUSH
4708: LD_INT 3
4710: ARRAY
4711: PPUSH
4712: LD_INT 0
4714: PPUSH
4715: LD_VAR 0 3
4719: PPUSH
4720: CALL_OW 468
// SetArtifactUse ( side , artifactsButtons [ i ] [ 1 ] , art_no , j ) ;
4724: LD_VAR 0 4
4728: PPUSH
4729: LD_EXP 10
4733: PUSH
4734: LD_VAR 0 1
4738: ARRAY
4739: PUSH
4740: LD_INT 1
4742: ARRAY
4743: PPUSH
4744: LD_INT 0
4746: PPUSH
4747: LD_VAR 0 3
4751: PPUSH
4752: CALL_OW 468
// if j in artifactsLabsWorking [ i ] then
4756: LD_VAR 0 3
4760: PUSH
4761: LD_EXP 11
4765: PUSH
4766: LD_VAR 0 1
4770: ARRAY
4771: IN
4772: IFFALSE 4820
// begin artifactsLabsWorking := Replace ( artifactsLabsWorking , i , artifactsLabsWorking [ i ] diff j ) ;
4774: LD_ADDR_EXP 11
4778: PUSH
4779: LD_EXP 11
4783: PPUSH
4784: LD_VAR 0 1
4788: PPUSH
4789: LD_EXP 11
4793: PUSH
4794: LD_VAR 0 1
4798: ARRAY
4799: PUSH
4800: LD_VAR 0 3
4804: DIFF
4805: PPUSH
4806: CALL_OW 1
4810: ST_TO_ADDR
// ComCancel ( j ) ;
4811: LD_VAR 0 3
4815: PPUSH
4816: CALL_OW 127
// end ; end ;
4820: GO 4674
4822: POP
4823: POP
// end ; end ;
4824: GO 3959
4826: POP
4827: POP
// end ;
4828: PPOPN 6
4830: END
// on ArtifactUsed ( side , icon , x , y ) do var i , labs , lab , base , time ;
4831: LD_INT 0
4833: PPUSH
4834: PPUSH
4835: PPUSH
4836: PPUSH
4837: PPUSH
// begin labs := FilterAllUnits ( [ [ f_side , side ] , [ f_lab , b_lab_siberium ] ] ) ;
4838: LD_ADDR_VAR 0 6
4842: PUSH
4843: LD_INT 22
4845: PUSH
4846: LD_VAR 0 1
4850: PUSH
4851: EMPTY
4852: LIST
4853: LIST
4854: PUSH
4855: LD_INT 63
4857: PUSH
4858: LD_INT 11
4860: PUSH
4861: EMPTY
4862: LIST
4863: LIST
4864: PUSH
4865: EMPTY
4866: LIST
4867: LIST
4868: PPUSH
4869: CALL_OW 69
4873: ST_TO_ADDR
// for i := 1 to 3 do
4874: LD_ADDR_VAR 0 5
4878: PUSH
4879: DOUBLE
4880: LD_INT 1
4882: DEC
4883: ST_TO_ADDR
4884: LD_INT 3
4886: PUSH
4887: FOR_TO
4888: IFFALSE 5118
// begin if icon = artifactsButtons [ i ] [ 3 ] then
4890: LD_VAR 0 2
4894: PUSH
4895: LD_EXP 10
4899: PUSH
4900: LD_VAR 0 5
4904: ARRAY
4905: PUSH
4906: LD_INT 3
4908: ARRAY
4909: EQUAL
4910: IFFALSE 5116
// begin lab := NearestUnitToXY ( labs , artifactsPos [ i ] [ 1 ] , artifactsPos [ i ] [ 2 ] ) ;
4912: LD_ADDR_VAR 0 7
4916: PUSH
4917: LD_VAR 0 6
4921: PPUSH
4922: LD_EXP 3
4926: PUSH
4927: LD_VAR 0 5
4931: ARRAY
4932: PUSH
4933: LD_INT 1
4935: ARRAY
4936: PPUSH
4937: LD_EXP 3
4941: PUSH
4942: LD_VAR 0 5
4946: ARRAY
4947: PUSH
4948: LD_INT 2
4950: ARRAY
4951: PPUSH
4952: CALL_OW 73
4956: ST_TO_ADDR
// if not lab then
4957: LD_VAR 0 7
4961: NOT
4962: IFFALSE 4966
// continue ;
4964: GO 4887
// SetSpecResearch ( lab , artifactsResDifficulty [ i ] , true ) ;
4966: LD_VAR 0 7
4970: PPUSH
4971: LD_EXP 8
4975: PUSH
4976: LD_VAR 0 5
4980: ARRAY
4981: PPUSH
4982: LD_INT 1
4984: PPUSH
4985: CALL_OW 486
// SetTag ( lab , i ) ;
4989: LD_VAR 0 7
4993: PPUSH
4994: LD_VAR 0 5
4998: PPUSH
4999: CALL_OW 109
// if artifactsResProgress [ side ] [ i ] then
5003: LD_EXP 9
5007: PUSH
5008: LD_VAR 0 1
5012: ARRAY
5013: PUSH
5014: LD_VAR 0 5
5018: ARRAY
5019: IFFALSE 5047
// SetWorkingProgress ( lab , artifactsResProgress [ side ] [ i ] ) ;
5021: LD_VAR 0 7
5025: PPUSH
5026: LD_EXP 9
5030: PUSH
5031: LD_VAR 0 1
5035: ARRAY
5036: PUSH
5037: LD_VAR 0 5
5041: ARRAY
5042: PPUSH
5043: CALL_OW 329
// artifactsLabsWorking := Replace ( artifactsLabsWorking , i , artifactsLabsWorking [ i ] union lab ) ;
5047: LD_ADDR_EXP 11
5051: PUSH
5052: LD_EXP 11
5056: PPUSH
5057: LD_VAR 0 5
5061: PPUSH
5062: LD_EXP 11
5066: PUSH
5067: LD_VAR 0 5
5071: ARRAY
5072: PUSH
5073: LD_VAR 0 7
5077: UNION
5078: PPUSH
5079: CALL_OW 1
5083: ST_TO_ADDR
// SetArtifactUse ( side , artifactsButtons [ i ] [ 3 ] , art_no , lab ) ;
5084: LD_VAR 0 1
5088: PPUSH
5089: LD_EXP 10
5093: PUSH
5094: LD_VAR 0 5
5098: ARRAY
5099: PUSH
5100: LD_INT 3
5102: ARRAY
5103: PPUSH
5104: LD_INT 0
5106: PPUSH
5107: LD_VAR 0 7
5111: PPUSH
5112: CALL_OW 468
// end ; end ;
5116: GO 4887
5118: POP
5119: POP
// if icon = artifactsButtons [ 1 ] [ 1 ] then
5120: LD_VAR 0 2
5124: PUSH
5125: LD_EXP 10
5129: PUSH
5130: LD_INT 1
5132: ARRAY
5133: PUSH
5134: LD_INT 1
5136: ARRAY
5137: EQUAL
5138: IFFALSE 5409
// begin lab := NearestUnitToXY ( labs , artifactsPos [ 1 ] [ 1 ] , artifactsPos [ 1 ] [ 2 ] ) ;
5140: LD_ADDR_VAR 0 7
5144: PUSH
5145: LD_VAR 0 6
5149: PPUSH
5150: LD_EXP 3
5154: PUSH
5155: LD_INT 1
5157: ARRAY
5158: PUSH
5159: LD_INT 1
5161: ARRAY
5162: PPUSH
5163: LD_EXP 3
5167: PUSH
5168: LD_INT 1
5170: ARRAY
5171: PUSH
5172: LD_INT 2
5174: ARRAY
5175: PPUSH
5176: CALL_OW 73
5180: ST_TO_ADDR
// base := GetBase ( lab ) ;
5181: LD_ADDR_VAR 0 8
5185: PUSH
5186: LD_VAR 0 7
5190: PPUSH
5191: CALL_OW 274
5195: ST_TO_ADDR
// if GetBaseMaterials ( GetBase ( lab ) ) [ 3 ] < artifactsSibCost [ 1 ] then
5196: LD_VAR 0 7
5200: PPUSH
5201: CALL_OW 274
5205: PPUSH
5206: CALL 59476 0 1
5210: PUSH
5211: LD_INT 3
5213: ARRAY
5214: PUSH
5215: LD_EXP 5
5219: PUSH
5220: LD_INT 1
5222: ARRAY
5223: LESS
5224: IFFALSE 5228
// begin exit ;
5226: GO 6173
// end ; SetResourceType ( base , mat_siberit , ( GetResourceType ( base , mat_siberit ) - artifactsSibCost [ 1 ] ) ) ;
5228: LD_VAR 0 8
5232: PPUSH
5233: LD_INT 3
5235: PPUSH
5236: LD_VAR 0 8
5240: PPUSH
5241: LD_INT 3
5243: PPUSH
5244: CALL_OW 275
5248: PUSH
5249: LD_EXP 5
5253: PUSH
5254: LD_INT 1
5256: ARRAY
5257: MINUS
5258: PPUSH
5259: CALL_OW 277
// artifactsReady := Replace ( artifactsReady , side , Replace ( artifactsReady [ side ] , 1 , false ) ) ;
5263: LD_ADDR_EXP 7
5267: PUSH
5268: LD_EXP 7
5272: PPUSH
5273: LD_VAR 0 1
5277: PPUSH
5278: LD_EXP 7
5282: PUSH
5283: LD_VAR 0 1
5287: ARRAY
5288: PPUSH
5289: LD_INT 1
5291: PPUSH
5292: LD_INT 0
5294: PPUSH
5295: CALL_OW 1
5299: PPUSH
5300: CALL_OW 1
5304: ST_TO_ADDR
// PlaceSeeing ( x , y , side , - 12 ) ;
5305: LD_VAR 0 3
5309: PPUSH
5310: LD_VAR 0 4
5314: PPUSH
5315: LD_VAR 0 1
5319: PPUSH
5320: LD_INT 12
5322: NEG
5323: PPUSH
5324: CALL_OW 330
// wait ( 0 0$30 ) ;
5328: LD_INT 1050
5330: PPUSH
5331: CALL_OW 67
// RemoveSeeing ( x , y , side ) ;
5335: LD_VAR 0 3
5339: PPUSH
5340: LD_VAR 0 4
5344: PPUSH
5345: LD_VAR 0 1
5349: PPUSH
5350: CALL_OW 331
// wait ( artifactsRecharge [ 1 ] ) ;
5354: LD_EXP 4
5358: PUSH
5359: LD_INT 1
5361: ARRAY
5362: PPUSH
5363: CALL_OW 67
// artifactsReady := Replace ( artifactsReady , side , Replace ( artifactsReady [ side ] , 1 , true ) ) ;
5367: LD_ADDR_EXP 7
5371: PUSH
5372: LD_EXP 7
5376: PPUSH
5377: LD_VAR 0 1
5381: PPUSH
5382: LD_EXP 7
5386: PUSH
5387: LD_VAR 0 1
5391: ARRAY
5392: PPUSH
5393: LD_INT 1
5395: PPUSH
5396: LD_INT 1
5398: PPUSH
5399: CALL_OW 1
5403: PPUSH
5404: CALL_OW 1
5408: ST_TO_ADDR
// end ; if icon = artifactsButtons [ 2 ] [ 1 ] then
5409: LD_VAR 0 2
5413: PUSH
5414: LD_EXP 10
5418: PUSH
5419: LD_INT 2
5421: ARRAY
5422: PUSH
5423: LD_INT 1
5425: ARRAY
5426: EQUAL
5427: IFFALSE 5921
// begin lab := NearestUnitToXY ( labs , artifactsPos [ 2 ] [ 1 ] , artifactsPos [ 2 ] [ 2 ] ) ;
5429: LD_ADDR_VAR 0 7
5433: PUSH
5434: LD_VAR 0 6
5438: PPUSH
5439: LD_EXP 3
5443: PUSH
5444: LD_INT 2
5446: ARRAY
5447: PUSH
5448: LD_INT 1
5450: ARRAY
5451: PPUSH
5452: LD_EXP 3
5456: PUSH
5457: LD_INT 2
5459: ARRAY
5460: PUSH
5461: LD_INT 2
5463: ARRAY
5464: PPUSH
5465: CALL_OW 73
5469: ST_TO_ADDR
// base := GetBase ( lab ) ;
5470: LD_ADDR_VAR 0 8
5474: PUSH
5475: LD_VAR 0 7
5479: PPUSH
5480: CALL_OW 274
5484: ST_TO_ADDR
// if not x in FilterAllUnits ( [ [ f_enemy , side ] , [ f_or , [ f_engine , engine_siberite ] , [ f_btype , b_siberite_power ] , [ f_btype , b_siberite_mine ] , [ f_bweapon , ru_time_lapser ] , [ f_weapon , ru_time_lapser ] , [ f_weapon , us_double_laser ] , [ f_bweapon , us_double_laser ] , [ f_weapon , ar_bio_bomb ] , [ f_weapon , ar_selfpropelled_bomb ] , [ f_btype , b_ext_siberium ] , [ f_weapon , us_siberium_rocket ] , [ f_weapon , ru_siberium_rocket ] , [ f_chassis , ru_behemoth ] , [ f_bweapon , us_siberium_rocket ] , [ f_bweapon , ru_siberium_rocket ] ] ] ) then
5485: LD_VAR 0 3
5489: PUSH
5490: LD_INT 81
5492: PUSH
5493: LD_VAR 0 1
5497: PUSH
5498: EMPTY
5499: LIST
5500: LIST
5501: PUSH
5502: LD_INT 2
5504: PUSH
5505: LD_INT 32
5507: PUSH
5508: LD_INT 3
5510: PUSH
5511: EMPTY
5512: LIST
5513: LIST
5514: PUSH
5515: LD_INT 30
5517: PUSH
5518: LD_INT 28
5520: PUSH
5521: EMPTY
5522: LIST
5523: LIST
5524: PUSH
5525: LD_INT 30
5527: PUSH
5528: LD_INT 30
5530: PUSH
5531: EMPTY
5532: LIST
5533: LIST
5534: PUSH
5535: LD_INT 35
5537: PUSH
5538: LD_INT 49
5540: PUSH
5541: EMPTY
5542: LIST
5543: LIST
5544: PUSH
5545: LD_INT 34
5547: PUSH
5548: LD_INT 49
5550: PUSH
5551: EMPTY
5552: LIST
5553: LIST
5554: PUSH
5555: LD_INT 34
5557: PUSH
5558: LD_INT 10
5560: PUSH
5561: EMPTY
5562: LIST
5563: LIST
5564: PUSH
5565: LD_INT 35
5567: PUSH
5568: LD_INT 10
5570: PUSH
5571: EMPTY
5572: LIST
5573: LIST
5574: PUSH
5575: LD_INT 34
5577: PUSH
5578: LD_INT 91
5580: PUSH
5581: EMPTY
5582: LIST
5583: LIST
5584: PUSH
5585: LD_INT 34
5587: PUSH
5588: LD_INT 29
5590: PUSH
5591: EMPTY
5592: LIST
5593: LIST
5594: PUSH
5595: LD_INT 30
5597: PUSH
5598: LD_INT 21
5600: PUSH
5601: EMPTY
5602: LIST
5603: LIST
5604: PUSH
5605: LD_INT 34
5607: PUSH
5608: LD_INT 8
5610: PUSH
5611: EMPTY
5612: LIST
5613: LIST
5614: PUSH
5615: LD_INT 34
5617: PUSH
5618: LD_INT 48
5620: PUSH
5621: EMPTY
5622: LIST
5623: LIST
5624: PUSH
5625: LD_INT 31
5627: PUSH
5628: LD_INT 25
5630: PUSH
5631: EMPTY
5632: LIST
5633: LIST
5634: PUSH
5635: LD_INT 35
5637: PUSH
5638: LD_INT 8
5640: PUSH
5641: EMPTY
5642: LIST
5643: LIST
5644: PUSH
5645: LD_INT 35
5647: PUSH
5648: LD_INT 48
5650: PUSH
5651: EMPTY
5652: LIST
5653: LIST
5654: PUSH
5655: EMPTY
5656: LIST
5657: LIST
5658: LIST
5659: LIST
5660: LIST
5661: LIST
5662: LIST
5663: LIST
5664: LIST
5665: LIST
5666: LIST
5667: LIST
5668: LIST
5669: LIST
5670: LIST
5671: LIST
5672: PUSH
5673: EMPTY
5674: LIST
5675: LIST
5676: PPUSH
5677: CALL_OW 69
5681: IN
5682: NOT
5683: IFFALSE 5687
// exit ;
5685: GO 6173
// if GetBaseMaterials ( GetBase ( lab ) ) [ 3 ] < artifactsSibCost [ 2 ] then
5687: LD_VAR 0 7
5691: PPUSH
5692: CALL_OW 274
5696: PPUSH
5697: CALL 59476 0 1
5701: PUSH
5702: LD_INT 3
5704: ARRAY
5705: PUSH
5706: LD_EXP 5
5710: PUSH
5711: LD_INT 2
5713: ARRAY
5714: LESS
5715: IFFALSE 5719
// begin exit ;
5717: GO 6173
// end ; SetResourceType ( base , mat_siberit , ( GetResourceType ( base , mat_siberit ) - artifactsSibCost [ 2 ] ) ) ;
5719: LD_VAR 0 8
5723: PPUSH
5724: LD_INT 3
5726: PPUSH
5727: LD_VAR 0 8
5731: PPUSH
5732: LD_INT 3
5734: PPUSH
5735: CALL_OW 275
5739: PUSH
5740: LD_EXP 5
5744: PUSH
5745: LD_INT 2
5747: ARRAY
5748: MINUS
5749: PPUSH
5750: CALL_OW 277
// artifactsReady := Replace ( artifactsReady , side , Replace ( artifactsReady [ side ] , 2 , false ) ) ;
5754: LD_ADDR_EXP 7
5758: PUSH
5759: LD_EXP 7
5763: PPUSH
5764: LD_VAR 0 1
5768: PPUSH
5769: LD_EXP 7
5773: PUSH
5774: LD_VAR 0 1
5778: ARRAY
5779: PPUSH
5780: LD_INT 2
5782: PPUSH
5783: LD_INT 0
5785: PPUSH
5786: CALL_OW 1
5790: PPUSH
5791: CALL_OW 1
5795: ST_TO_ADDR
// KillUnit ( x ) ;
5796: LD_VAR 0 3
5800: PPUSH
5801: CALL_OW 66
// if GetWeapon ( x ) in [ us_siberium_rocket , ru_siberium_rocket ] or GetBWeapon ( x ) in [ us_siberium_rocket , ru_siberium_rocket ] then
5805: LD_VAR 0 3
5809: PPUSH
5810: CALL_OW 264
5814: PUSH
5815: LD_INT 8
5817: PUSH
5818: LD_INT 48
5820: PUSH
5821: EMPTY
5822: LIST
5823: LIST
5824: IN
5825: PUSH
5826: LD_VAR 0 3
5830: PPUSH
5831: CALL_OW 269
5835: PUSH
5836: LD_INT 8
5838: PUSH
5839: LD_INT 48
5841: PUSH
5842: EMPTY
5843: LIST
5844: LIST
5845: IN
5846: OR
5847: IFFALSE 5866
// begin ArtContamination ( x , y , 50 ) ;
5849: LD_VAR 0 3
5853: PPUSH
5854: LD_VAR 0 4
5858: PPUSH
5859: LD_INT 50
5861: PPUSH
5862: CALL_OW 495
// end ; wait ( artifactsRecharge [ 2 ] ) ;
5866: LD_EXP 4
5870: PUSH
5871: LD_INT 2
5873: ARRAY
5874: PPUSH
5875: CALL_OW 67
// artifactsReady := Replace ( artifactsReady , side , Replace ( artifactsReady [ side ] , 2 , true ) ) ;
5879: LD_ADDR_EXP 7
5883: PUSH
5884: LD_EXP 7
5888: PPUSH
5889: LD_VAR 0 1
5893: PPUSH
5894: LD_EXP 7
5898: PUSH
5899: LD_VAR 0 1
5903: ARRAY
5904: PPUSH
5905: LD_INT 2
5907: PPUSH
5908: LD_INT 1
5910: PPUSH
5911: CALL_OW 1
5915: PPUSH
5916: CALL_OW 1
5920: ST_TO_ADDR
// end ; if icon = artifactsButtons [ 3 ] [ 1 ] then
5921: LD_VAR 0 2
5925: PUSH
5926: LD_EXP 10
5930: PUSH
5931: LD_INT 3
5933: ARRAY
5934: PUSH
5935: LD_INT 1
5937: ARRAY
5938: EQUAL
5939: IFFALSE 6173
// begin lab := NearestUnitToXY ( labs , artifactsPos [ 3 ] [ 1 ] , artifactsPos [ 3 ] [ 2 ] ) ;
5941: LD_ADDR_VAR 0 7
5945: PUSH
5946: LD_VAR 0 6
5950: PPUSH
5951: LD_EXP 3
5955: PUSH
5956: LD_INT 3
5958: ARRAY
5959: PUSH
5960: LD_INT 1
5962: ARRAY
5963: PPUSH
5964: LD_EXP 3
5968: PUSH
5969: LD_INT 3
5971: ARRAY
5972: PUSH
5973: LD_INT 2
5975: ARRAY
5976: PPUSH
5977: CALL_OW 73
5981: ST_TO_ADDR
// base := GetBase ( lab ) ;
5982: LD_ADDR_VAR 0 8
5986: PUSH
5987: LD_VAR 0 7
5991: PPUSH
5992: CALL_OW 274
5996: ST_TO_ADDR
// if GetBaseMaterials ( base ) [ 3 ] < artifactsSibCost [ 3 ] then
5997: LD_VAR 0 8
6001: PPUSH
6002: CALL 59476 0 1
6006: PUSH
6007: LD_INT 3
6009: ARRAY
6010: PUSH
6011: LD_EXP 5
6015: PUSH
6016: LD_INT 3
6018: ARRAY
6019: LESS
6020: IFFALSE 6024
// begin exit ;
6022: GO 6173
// end ; SetResourceType ( base , mat_siberit , ( GetResourceType ( base , mat_siberit ) - artifactsSibCost [ 3 ] ) ) ;
6024: LD_VAR 0 8
6028: PPUSH
6029: LD_INT 3
6031: PPUSH
6032: LD_VAR 0 8
6036: PPUSH
6037: LD_INT 3
6039: PPUSH
6040: CALL_OW 275
6044: PUSH
6045: LD_EXP 5
6049: PUSH
6050: LD_INT 3
6052: ARRAY
6053: MINUS
6054: PPUSH
6055: CALL_OW 277
// artifactsReady := Replace ( artifactsReady , side , Replace ( artifactsReady [ side ] , 3 , false ) ) ;
6059: LD_ADDR_EXP 7
6063: PUSH
6064: LD_EXP 7
6068: PPUSH
6069: LD_VAR 0 1
6073: PPUSH
6074: LD_EXP 7
6078: PUSH
6079: LD_VAR 0 1
6083: ARRAY
6084: PPUSH
6085: LD_INT 3
6087: PPUSH
6088: LD_INT 0
6090: PPUSH
6091: CALL_OW 1
6095: PPUSH
6096: CALL_OW 1
6100: ST_TO_ADDR
// ArtContamination ( x , y , 50 ) ;
6101: LD_VAR 0 3
6105: PPUSH
6106: LD_VAR 0 4
6110: PPUSH
6111: LD_INT 50
6113: PPUSH
6114: CALL_OW 495
// wait ( artifactsRecharge [ 3 ] ) ;
6118: LD_EXP 4
6122: PUSH
6123: LD_INT 3
6125: ARRAY
6126: PPUSH
6127: CALL_OW 67
// artifactsReady := Replace ( artifactsReady , side , Replace ( artifactsReady [ side ] , 3 , true ) ) ;
6131: LD_ADDR_EXP 7
6135: PUSH
6136: LD_EXP 7
6140: PPUSH
6141: LD_VAR 0 1
6145: PPUSH
6146: LD_EXP 7
6150: PUSH
6151: LD_VAR 0 1
6155: ARRAY
6156: PPUSH
6157: LD_INT 3
6159: PPUSH
6160: LD_INT 1
6162: PPUSH
6163: CALL_OW 1
6167: PPUSH
6168: CALL_OW 1
6172: ST_TO_ADDR
// end ; end ;
6173: PPOPN 9
6175: END
// on SpecResearchCancel ( lab , progress ) do var side , tag ;
6176: LD_INT 0
6178: PPUSH
6179: PPUSH
// begin tag := GetTag ( lab ) ;
6180: LD_ADDR_VAR 0 4
6184: PUSH
6185: LD_VAR 0 1
6189: PPUSH
6190: CALL_OW 110
6194: ST_TO_ADDR
// side := GetSide ( lab ) ;
6195: LD_ADDR_VAR 0 3
6199: PUSH
6200: LD_VAR 0 1
6204: PPUSH
6205: CALL_OW 255
6209: ST_TO_ADDR
// SetArtifactUse ( side , artifactsButtons [ tag ] [ 3 ] , art_instant , lab ) ;
6210: LD_VAR 0 3
6214: PPUSH
6215: LD_EXP 10
6219: PUSH
6220: LD_VAR 0 4
6224: ARRAY
6225: PUSH
6226: LD_INT 3
6228: ARRAY
6229: PPUSH
6230: LD_INT 2
6232: PPUSH
6233: LD_VAR 0 1
6237: PPUSH
6238: CALL_OW 468
// artifactsResProgress := Replace ( artifactsResProgress , side , Replace ( artifactsResProgress [ side ] , tag , progress ) ) ;
6242: LD_ADDR_EXP 9
6246: PUSH
6247: LD_EXP 9
6251: PPUSH
6252: LD_VAR 0 3
6256: PPUSH
6257: LD_EXP 9
6261: PUSH
6262: LD_VAR 0 3
6266: ARRAY
6267: PPUSH
6268: LD_VAR 0 4
6272: PPUSH
6273: LD_VAR 0 2
6277: PPUSH
6278: CALL_OW 1
6282: PPUSH
6283: CALL_OW 1
6287: ST_TO_ADDR
// artifactsLabsWorking := Replace ( artifactsLabsWorking , tag , artifactsLabsWorking [ tag ] diff lab ) ;
6288: LD_ADDR_EXP 11
6292: PUSH
6293: LD_EXP 11
6297: PPUSH
6298: LD_VAR 0 4
6302: PPUSH
6303: LD_EXP 11
6307: PUSH
6308: LD_VAR 0 4
6312: ARRAY
6313: PUSH
6314: LD_VAR 0 1
6318: DIFF
6319: PPUSH
6320: CALL_OW 1
6324: ST_TO_ADDR
// SetTag ( lab , 0 ) ;
6325: LD_VAR 0 1
6329: PPUSH
6330: LD_INT 0
6332: PPUSH
6333: CALL_OW 109
// end ;
6337: PPOPN 4
6339: END
// on SpecResearchComplete ( lab ) do var side , tag ;
6340: LD_INT 0
6342: PPUSH
6343: PPUSH
// begin tag := GetTag ( lab ) ;
6344: LD_ADDR_VAR 0 3
6348: PUSH
6349: LD_VAR 0 1
6353: PPUSH
6354: CALL_OW 110
6358: ST_TO_ADDR
// side := GetSide ( lab ) ;
6359: LD_ADDR_VAR 0 2
6363: PUSH
6364: LD_VAR 0 1
6368: PPUSH
6369: CALL_OW 255
6373: ST_TO_ADDR
// SetArtifactUse ( side , artifactsButtons [ tag ] [ 3 ] , art_no , lab ) ;
6374: LD_VAR 0 2
6378: PPUSH
6379: LD_EXP 10
6383: PUSH
6384: LD_VAR 0 3
6388: ARRAY
6389: PUSH
6390: LD_INT 3
6392: ARRAY
6393: PPUSH
6394: LD_INT 0
6396: PPUSH
6397: LD_VAR 0 1
6401: PPUSH
6402: CALL_OW 468
// artifactsResearched := Replace ( artifactsResearched , side , Replace ( artifactsResearched [ side ] , tag , 1 ) ) ;
6406: LD_ADDR_EXP 6
6410: PUSH
6411: LD_EXP 6
6415: PPUSH
6416: LD_VAR 0 2
6420: PPUSH
6421: LD_EXP 6
6425: PUSH
6426: LD_VAR 0 2
6430: ARRAY
6431: PPUSH
6432: LD_VAR 0 3
6436: PPUSH
6437: LD_INT 1
6439: PPUSH
6440: CALL_OW 1
6444: PPUSH
6445: CALL_OW 1
6449: ST_TO_ADDR
// artifactsReady := Replace ( artifactsReady , side , Replace ( artifactsReady [ side ] , tag , 1 ) ) ;
6450: LD_ADDR_EXP 7
6454: PUSH
6455: LD_EXP 7
6459: PPUSH
6460: LD_VAR 0 2
6464: PPUSH
6465: LD_EXP 7
6469: PUSH
6470: LD_VAR 0 2
6474: ARRAY
6475: PPUSH
6476: LD_VAR 0 3
6480: PPUSH
6481: LD_INT 1
6483: PPUSH
6484: CALL_OW 1
6488: PPUSH
6489: CALL_OW 1
6493: ST_TO_ADDR
// artifactsLabsWorking := Replace ( artifactsLabsWorking , tag , artifactsLabsWorking [ tag ] diff lab ) ;
6494: LD_ADDR_EXP 11
6498: PUSH
6499: LD_EXP 11
6503: PPUSH
6504: LD_VAR 0 3
6508: PPUSH
6509: LD_EXP 11
6513: PUSH
6514: LD_VAR 0 3
6518: ARRAY
6519: PUSH
6520: LD_VAR 0 1
6524: DIFF
6525: PPUSH
6526: CALL_OW 1
6530: ST_TO_ADDR
// end ;
6531: PPOPN 3
6533: END
// on ArtifactLoaded ( cargo , artifact ) do begin SetTag ( cargo , artifact ) ;
6534: LD_VAR 0 1
6538: PPUSH
6539: LD_VAR 0 2
6543: PPUSH
6544: CALL_OW 109
// end ;
6548: PPOPN 2
6550: END
// on ArtifactUnloaded ( cargo , artifact ) do begin SetTag ( cargo , 0 ) ;
6551: LD_VAR 0 1
6555: PPUSH
6556: LD_INT 0
6558: PPUSH
6559: CALL_OW 109
// end ; end_of_file end_of_file
6563: PPOPN 2
6565: END
// export mpGameType , mpGameSettingsKeys , mpGameSettingsValues , mpGameSettings , mpSidePositions , mpSideTeams , mpSideNations , mpTeams , mpTeamGame , mpOilDeposits , mpSibDeposits , mpDepots , mpStartingResources , mpSharedVision , mpBuildings , mpMarkedAreas , mpBuildUpAreas , mpBuildUpTime , mpStartPos , mpBattleFlag , mpBattleFlags , mpPeopleAmount , mpPeopleSkill , mpSibDetection , mpShipments , mpSibBomb , mpMapSize , mpApemans , mpApemansArea , mpApePosIndex , mpRespawn , mpKingArea , mpPoints , mpVehicles , mpEmissions , mpDisplayStrings , mpGameActive , mpRespawnPull , mpGlobalOilDeposits , mpGlobalSibDeposits , mpTeleports , mpArtifacts , mpBlockRespThread ; export function InitMultiplayer ; var i ; begin
6566: LD_INT 0
6568: PPUSH
6569: PPUSH
// disable ( mpActive ) ;
6570: LD_INT 100
6572: DISABLE_MARKED
// disable ( mpWin ) ;
6573: LD_INT 101
6575: DISABLE_MARKED
// disable ( mpLose ) ;
6576: LD_INT 102
6578: DISABLE_MARKED
// mpGameType := 0 ;
6579: LD_ADDR_EXP 12
6583: PUSH
6584: LD_INT 0
6586: ST_TO_ADDR
// mpGameSettings := [ ] ;
6587: LD_ADDR_EXP 15
6591: PUSH
6592: EMPTY
6593: ST_TO_ADDR
// mpGameSettingsKeys := [ ] ;
6594: LD_ADDR_EXP 13
6598: PUSH
6599: EMPTY
6600: ST_TO_ADDR
// mpGameSettingsValues := [ ] ;
6601: LD_ADDR_EXP 14
6605: PUSH
6606: EMPTY
6607: ST_TO_ADDR
// mpMapSize := [ 2 , 2 ] ;
6608: LD_ADDR_EXP 38
6612: PUSH
6613: LD_INT 2
6615: PUSH
6616: LD_INT 2
6618: PUSH
6619: EMPTY
6620: LIST
6621: LIST
6622: ST_TO_ADDR
// mpOilDeposits := [ ] ;
6623: LD_ADDR_EXP 21
6627: PUSH
6628: EMPTY
6629: ST_TO_ADDR
// mpSibDeposits := [ ] ;
6630: LD_ADDR_EXP 22
6634: PUSH
6635: EMPTY
6636: ST_TO_ADDR
// mpGlobalOilDeposits := [ ] ;
6637: LD_ADDR_EXP 50
6641: PUSH
6642: EMPTY
6643: ST_TO_ADDR
// mpGlobalSibDeposits := [ ] ;
6644: LD_ADDR_EXP 51
6648: PUSH
6649: EMPTY
6650: ST_TO_ADDR
// mpDepots := [ ] ;
6651: LD_ADDR_EXP 23
6655: PUSH
6656: EMPTY
6657: ST_TO_ADDR
// mpBuildings := [ ] ;
6658: LD_ADDR_EXP 26
6662: PUSH
6663: EMPTY
6664: ST_TO_ADDR
// mpMarkedAreas := [ ] ;
6665: LD_ADDR_EXP 27
6669: PUSH
6670: EMPTY
6671: ST_TO_ADDR
// mpBuildUpAreas := [ ] ;
6672: LD_ADDR_EXP 28
6676: PUSH
6677: EMPTY
6678: ST_TO_ADDR
// mpBuildUpTime := [ ] ;
6679: LD_ADDR_EXP 29
6683: PUSH
6684: EMPTY
6685: ST_TO_ADDR
// mpStartingResources := [ ] ;
6686: LD_ADDR_EXP 24
6690: PUSH
6691: EMPTY
6692: ST_TO_ADDR
// mpStartPos := [ ] ;
6693: LD_ADDR_EXP 30
6697: PUSH
6698: EMPTY
6699: ST_TO_ADDR
// mpBattleFlag := - 1 ;
6700: LD_ADDR_EXP 31
6704: PUSH
6705: LD_INT 1
6707: NEG
6708: ST_TO_ADDR
// mpBattleFlags := [ ] ;
6709: LD_ADDR_EXP 32
6713: PUSH
6714: EMPTY
6715: ST_TO_ADDR
// mpApemans := [ ] ;
6716: LD_ADDR_EXP 39
6720: PUSH
6721: EMPTY
6722: ST_TO_ADDR
// mpApemansArea := [ ] ;
6723: LD_ADDR_EXP 40
6727: PUSH
6728: EMPTY
6729: ST_TO_ADDR
// mpRespawn := [ ] ;
6730: LD_ADDR_EXP 42
6734: PUSH
6735: EMPTY
6736: ST_TO_ADDR
// mpKingArea := 0 ;
6737: LD_ADDR_EXP 43
6741: PUSH
6742: LD_INT 0
6744: ST_TO_ADDR
// mpPoints := [ ] ;
6745: LD_ADDR_EXP 44
6749: PUSH
6750: EMPTY
6751: ST_TO_ADDR
// mpVehicles := 0 ;
6752: LD_ADDR_EXP 45
6756: PUSH
6757: LD_INT 0
6759: ST_TO_ADDR
// mpShipments := 0 ;
6760: LD_ADDR_EXP 36
6764: PUSH
6765: LD_INT 0
6767: ST_TO_ADDR
// mpRespawnPull := [ [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
6768: LD_ADDR_EXP 49
6772: PUSH
6773: EMPTY
6774: PUSH
6775: EMPTY
6776: PUSH
6777: EMPTY
6778: PUSH
6779: EMPTY
6780: PUSH
6781: EMPTY
6782: PUSH
6783: EMPTY
6784: PUSH
6785: EMPTY
6786: PUSH
6787: EMPTY
6788: PUSH
6789: EMPTY
6790: LIST
6791: LIST
6792: LIST
6793: LIST
6794: LIST
6795: LIST
6796: LIST
6797: LIST
6798: ST_TO_ADDR
// mpApePosIndex := [ [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
6799: LD_ADDR_EXP 41
6803: PUSH
6804: EMPTY
6805: PUSH
6806: EMPTY
6807: PUSH
6808: EMPTY
6809: PUSH
6810: EMPTY
6811: PUSH
6812: EMPTY
6813: PUSH
6814: EMPTY
6815: PUSH
6816: EMPTY
6817: PUSH
6818: EMPTY
6819: PUSH
6820: EMPTY
6821: LIST
6822: LIST
6823: LIST
6824: LIST
6825: LIST
6826: LIST
6827: LIST
6828: LIST
6829: ST_TO_ADDR
// mpEmissions := 0 ;
6830: LD_ADDR_EXP 46
6834: PUSH
6835: LD_INT 0
6837: ST_TO_ADDR
// mpTeleports := 0 ;
6838: LD_ADDR_EXP 52
6842: PUSH
6843: LD_INT 0
6845: ST_TO_ADDR
// mpArtifacts := 0 ;
6846: LD_ADDR_EXP 53
6850: PUSH
6851: LD_INT 0
6853: ST_TO_ADDR
// mpPeopleSkill := 3 ;
6854: LD_ADDR_EXP 34
6858: PUSH
6859: LD_INT 3
6861: ST_TO_ADDR
// mpPeopleAmount := 15 ;
6862: LD_ADDR_EXP 33
6866: PUSH
6867: LD_INT 15
6869: ST_TO_ADDR
// mpDisplayStrings := 0 ;
6870: LD_ADDR_EXP 47
6874: PUSH
6875: LD_INT 0
6877: ST_TO_ADDR
// mpGameActive := false ;
6878: LD_ADDR_EXP 48
6882: PUSH
6883: LD_INT 0
6885: ST_TO_ADDR
// mpBlockRespThread := false ;
6886: LD_ADDR_EXP 54
6890: PUSH
6891: LD_INT 0
6893: ST_TO_ADDR
// for i := 1 to 32 do
6894: LD_ADDR_VAR 0 2
6898: PUSH
6899: DOUBLE
6900: LD_INT 1
6902: DEC
6903: ST_TO_ADDR
6904: LD_INT 32
6906: PUSH
6907: FOR_TO
6908: IFFALSE 6935
// mpGameSettings := Replace ( mpGameSettings , i , 0 ) ;
6910: LD_ADDR_EXP 15
6914: PUSH
6915: LD_EXP 15
6919: PPUSH
6920: LD_VAR 0 2
6924: PPUSH
6925: LD_INT 0
6927: PPUSH
6928: CALL_OW 1
6932: ST_TO_ADDR
6933: GO 6907
6935: POP
6936: POP
// end ;
6937: LD_VAR 0 1
6941: RET
// export function StartMultiplayer ; var i , j , b , x , y , side , pos , nation , ape , team , setting , resources , gameTypes ; begin
6942: LD_INT 0
6944: PPUSH
6945: PPUSH
6946: PPUSH
6947: PPUSH
6948: PPUSH
6949: PPUSH
6950: PPUSH
6951: PPUSH
6952: PPUSH
6953: PPUSH
6954: PPUSH
6955: PPUSH
6956: PPUSH
6957: PPUSH
// gameTypes := [ GameTypeNormal , GameTypeSurvival , GameTypeKing , GameTypeFamine ] ;
6958: LD_ADDR_VAR 0 14
6962: PUSH
6963: LD_INT 1
6965: PUSH
6966: LD_INT 2
6968: PUSH
6969: LD_INT 3
6971: PUSH
6972: LD_INT 5
6974: PUSH
6975: EMPTY
6976: LIST
6977: LIST
6978: LIST
6979: LIST
6980: ST_TO_ADDR
// for i in gameTypes do
6981: LD_ADDR_VAR 0 2
6985: PUSH
6986: LD_VAR 0 14
6990: PUSH
6991: FOR_IN
6992: IFFALSE 7001
// disable ( i ) ;
6994: LD_VAR 0 2
6998: DISABLE_MARKED
6999: GO 6991
7001: POP
7002: POP
// if Multiplayer then
7003: LD_OWVAR 4
7007: IFFALSE 7191
// begin mpGameType := mp_game_type ;
7009: LD_ADDR_EXP 12
7013: PUSH
7014: LD_OWVAR 6
7018: ST_TO_ADDR
// your_side := mp_player_side ;
7019: LD_ADDR_OWVAR 2
7023: PUSH
7024: LD_OWVAR 7
7028: ST_TO_ADDR
// mpSidePositions := mp_sides_positions ;
7029: LD_ADDR_EXP 16
7033: PUSH
7034: LD_OWVAR 17
7038: ST_TO_ADDR
// mpSideTeams := mp_sides_teams ;
7039: LD_ADDR_EXP 17
7043: PUSH
7044: LD_OWVAR 15
7048: ST_TO_ADDR
// mpSideNations := mp_sides_nations ;
7049: LD_ADDR_EXP 18
7053: PUSH
7054: LD_OWVAR 16
7058: ST_TO_ADDR
// mpTeams := mp_teams ;
7059: LD_ADDR_EXP 19
7063: PUSH
7064: LD_OWVAR 12
7068: ST_TO_ADDR
// for i := 1 to Count ( mpGameSettingsKeys ) do
7069: LD_ADDR_VAR 0 2
7073: PUSH
7074: DOUBLE
7075: LD_INT 1
7077: DEC
7078: ST_TO_ADDR
7079: LD_EXP 13
7083: PPUSH
7084: CALL 23637 0 1
7088: PUSH
7089: FOR_TO
7090: IFFALSE 7166
// begin setting := mpGameSettingsKeys [ i ] ;
7092: LD_ADDR_VAR 0 12
7096: PUSH
7097: LD_EXP 13
7101: PUSH
7102: LD_VAR 0 2
7106: ARRAY
7107: ST_TO_ADDR
// if setting then
7108: LD_VAR 0 12
7112: IFFALSE 7164
// mpGameSettings := Replace ( mpGameSettings , i , mpGameSettingsValues [ i ] [ GetMultiplayerSetting ( i - 1 ) + 1 ] ) ;
7114: LD_ADDR_EXP 15
7118: PUSH
7119: LD_EXP 15
7123: PPUSH
7124: LD_VAR 0 2
7128: PPUSH
7129: LD_EXP 14
7133: PUSH
7134: LD_VAR 0 2
7138: ARRAY
7139: PUSH
7140: LD_VAR 0 2
7144: PUSH
7145: LD_INT 1
7147: MINUS
7148: PPUSH
7149: CALL_OW 426
7153: PUSH
7154: LD_INT 1
7156: PLUS
7157: ARRAY
7158: PPUSH
7159: CALL_OW 1
7163: ST_TO_ADDR
// end ;
7164: GO 7089
7166: POP
7167: POP
// mpTeamGame := ( mpSideTeams diff [ 0 ] ) > 1 ;
7168: LD_ADDR_EXP 20
7172: PUSH
7173: LD_EXP 17
7177: PUSH
7178: LD_INT 0
7180: PUSH
7181: EMPTY
7182: LIST
7183: DIFF
7184: PUSH
7185: LD_INT 1
7187: GREATER
7188: ST_TO_ADDR
// end else
7189: GO 7191
// begin end ; GetMultiplayerMapData ( mpGameType ) ;
7191: LD_EXP 12
7195: PPUSH
7196: CALL 842 0 1
// if Count ( mpMarkedAreas ) then
7200: LD_EXP 27
7204: PPUSH
7205: CALL 23637 0 1
7209: IFFALSE 7240
// begin for i in mpMarkedAreas do
7211: LD_ADDR_VAR 0 2
7215: PUSH
7216: LD_EXP 27
7220: PUSH
7221: FOR_IN
7222: IFFALSE 7238
// SetAreaMapShow ( i , 0 ) ;
7224: LD_VAR 0 2
7228: PPUSH
7229: LD_INT 0
7231: PPUSH
7232: CALL_OW 424
7236: GO 7221
7238: POP
7239: POP
// end ; for i := 1 to 8 do
7240: LD_ADDR_VAR 0 2
7244: PUSH
7245: DOUBLE
7246: LD_INT 1
7248: DEC
7249: ST_TO_ADDR
7250: LD_INT 8
7252: PUSH
7253: FOR_TO
7254: IFFALSE 8532
// begin if not mpSidePositions [ i ] then
7256: LD_EXP 16
7260: PUSH
7261: LD_VAR 0 2
7265: ARRAY
7266: NOT
7267: IFFALSE 7271
// continue ;
7269: GO 7253
// side := i ;
7271: LD_ADDR_VAR 0 7
7275: PUSH
7276: LD_VAR 0 2
7280: ST_TO_ADDR
// nation := mpSideNations [ i ] ;
7281: LD_ADDR_VAR 0 9
7285: PUSH
7286: LD_EXP 18
7290: PUSH
7291: LD_VAR 0 2
7295: ARRAY
7296: ST_TO_ADDR
// pos := mpSidePositions [ i ] ;
7297: LD_ADDR_VAR 0 8
7301: PUSH
7302: LD_EXP 16
7306: PUSH
7307: LD_VAR 0 2
7311: ARRAY
7312: ST_TO_ADDR
// if Count ( mpOilDeposits ) then
7313: LD_EXP 21
7317: PPUSH
7318: CALL 23637 0 1
7322: IFFALSE 7399
// begin for j in mpOilDeposits [ pos ] do
7324: LD_ADDR_VAR 0 3
7328: PUSH
7329: LD_EXP 21
7333: PUSH
7334: LD_VAR 0 8
7338: ARRAY
7339: PUSH
7340: FOR_IN
7341: IFFALSE 7397
// begin CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_oil ) ;
7343: LD_VAR 0 3
7347: PUSH
7348: LD_INT 1
7350: ARRAY
7351: PPUSH
7352: LD_VAR 0 3
7356: PUSH
7357: LD_INT 2
7359: ARRAY
7360: PPUSH
7361: LD_INT 2
7363: PPUSH
7364: CALL_OW 62
// SetResourceVisibility ( j [ 1 ] , j [ 2 ] , side ) ;
7368: LD_VAR 0 3
7372: PUSH
7373: LD_INT 1
7375: ARRAY
7376: PPUSH
7377: LD_VAR 0 3
7381: PUSH
7382: LD_INT 2
7384: ARRAY
7385: PPUSH
7386: LD_VAR 0 7
7390: PPUSH
7391: CALL_OW 441
// end ;
7395: GO 7340
7397: POP
7398: POP
// end ; if Count ( mpSibDeposits ) then
7399: LD_EXP 22
7403: PPUSH
7404: CALL 23637 0 1
7408: IFFALSE 7485
// begin for j in mpSibDeposits [ pos ] do
7410: LD_ADDR_VAR 0 3
7414: PUSH
7415: LD_EXP 22
7419: PUSH
7420: LD_VAR 0 8
7424: ARRAY
7425: PUSH
7426: FOR_IN
7427: IFFALSE 7483
// begin CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_siberit ) ;
7429: LD_VAR 0 3
7433: PUSH
7434: LD_INT 1
7436: ARRAY
7437: PPUSH
7438: LD_VAR 0 3
7442: PUSH
7443: LD_INT 2
7445: ARRAY
7446: PPUSH
7447: LD_INT 3
7449: PPUSH
7450: CALL_OW 62
// SetResourceVisibility ( j [ 1 ] , j [ 2 ] , side ) ;
7454: LD_VAR 0 3
7458: PUSH
7459: LD_INT 1
7461: ARRAY
7462: PPUSH
7463: LD_VAR 0 3
7467: PUSH
7468: LD_INT 2
7470: ARRAY
7471: PPUSH
7472: LD_VAR 0 7
7476: PPUSH
7477: CALL_OW 441
// end ;
7481: GO 7426
7483: POP
7484: POP
// end ; InitBc ;
7485: CALL_OW 21
// InitUc ;
7489: CALL_OW 18
// uc_side := side ;
7493: LD_ADDR_OWVAR 20
7497: PUSH
7498: LD_VAR 0 7
7502: ST_TO_ADDR
// uc_nation := nation ;
7503: LD_ADDR_OWVAR 21
7507: PUSH
7508: LD_VAR 0 9
7512: ST_TO_ADDR
// if Count ( mpDepots ) then
7513: LD_EXP 23
7517: PPUSH
7518: CALL 23637 0 1
7522: IFFALSE 7706
// begin if mpGameType = GameTypeSurvival then
7524: LD_EXP 12
7528: PUSH
7529: LD_INT 2
7531: EQUAL
7532: IFFALSE 7552
// begin bc_level := 10 ;
7534: LD_ADDR_OWVAR 43
7538: PUSH
7539: LD_INT 10
7541: ST_TO_ADDR
// bc_type := b_warehouse ;
7542: LD_ADDR_OWVAR 42
7546: PUSH
7547: LD_INT 1
7549: ST_TO_ADDR
// end else
7550: GO 7568
// begin bc_level := 0 ;
7552: LD_ADDR_OWVAR 43
7556: PUSH
7557: LD_INT 0
7559: ST_TO_ADDR
// bc_type := b_depot ;
7560: LD_ADDR_OWVAR 42
7564: PUSH
7565: LD_INT 0
7567: ST_TO_ADDR
// end ; b := CreateAndPlaceBuildingXYD ( mpDepots [ pos ] [ 1 ] , mpDepots [ pos ] [ 2 ] , mpDepots [ pos ] [ 3 ] ) ;
7568: LD_ADDR_VAR 0 4
7572: PUSH
7573: LD_EXP 23
7577: PUSH
7578: LD_VAR 0 8
7582: ARRAY
7583: PUSH
7584: LD_INT 1
7586: ARRAY
7587: PPUSH
7588: LD_EXP 23
7592: PUSH
7593: LD_VAR 0 8
7597: ARRAY
7598: PUSH
7599: LD_INT 2
7601: ARRAY
7602: PPUSH
7603: LD_EXP 23
7607: PUSH
7608: LD_VAR 0 8
7612: ARRAY
7613: PUSH
7614: LD_INT 3
7616: ARRAY
7617: PPUSH
7618: CALL_OW 47
7622: ST_TO_ADDR
// SetBName ( b , @ & side ) ;
7623: LD_VAR 0 4
7627: PPUSH
7628: LD_STRING @
7630: PUSH
7631: LD_VAR 0 7
7635: STR
7636: PPUSH
7637: CALL_OW 500
// if Count ( mpStartingResources ) then
7641: LD_EXP 24
7645: PPUSH
7646: CALL 23637 0 1
7650: IFFALSE 7704
// begin for j := 1 to mpStartingResources do
7652: LD_ADDR_VAR 0 3
7656: PUSH
7657: DOUBLE
7658: LD_INT 1
7660: DEC
7661: ST_TO_ADDR
7662: LD_EXP 24
7666: PUSH
7667: FOR_TO
7668: IFFALSE 7702
// SetResourceType ( GetBase ( b ) , j , mpStartingResources [ j ] ) ;
7670: LD_VAR 0 4
7674: PPUSH
7675: CALL_OW 274
7679: PPUSH
7680: LD_VAR 0 3
7684: PPUSH
7685: LD_EXP 24
7689: PUSH
7690: LD_VAR 0 3
7694: ARRAY
7695: PPUSH
7696: CALL_OW 277
7700: GO 7667
7702: POP
7703: POP
// end ; end else
7704: GO 7867
// if Count ( mpStartingResources ) then
7706: LD_EXP 24
7710: PPUSH
7711: CALL 23637 0 1
7715: IFFALSE 7867
// begin for j := 1 to mpStartingResources do
7717: LD_ADDR_VAR 0 3
7721: PUSH
7722: DOUBLE
7723: LD_INT 1
7725: DEC
7726: ST_TO_ADDR
7727: LD_EXP 24
7731: PUSH
7732: FOR_TO
7733: IFFALSE 7865
// begin resources := mpStartingResources [ j ] ;
7735: LD_ADDR_VAR 0 13
7739: PUSH
7740: LD_EXP 24
7744: PUSH
7745: LD_VAR 0 3
7749: ARRAY
7750: ST_TO_ADDR
// repeat if resources >= 50 then
7751: LD_VAR 0 13
7755: PUSH
7756: LD_INT 50
7758: GREATEREQUAL
7759: IFFALSE 7805
// begin CreateResourcesXYR ( j , 5 , x , y , 4 , false ) ;
7761: LD_VAR 0 3
7765: PPUSH
7766: LD_INT 5
7768: PPUSH
7769: LD_VAR 0 5
7773: PPUSH
7774: LD_VAR 0 6
7778: PPUSH
7779: LD_INT 4
7781: PPUSH
7782: LD_INT 0
7784: PPUSH
7785: CALL_OW 60
// resources := resources - 50 ;
7789: LD_ADDR_VAR 0 13
7793: PUSH
7794: LD_VAR 0 13
7798: PUSH
7799: LD_INT 50
7801: MINUS
7802: ST_TO_ADDR
// end else
7803: GO 7853
// begin CreateResourcesXYR ( j , resources div 10 , x , y , 4 , false ) ;
7805: LD_VAR 0 3
7809: PPUSH
7810: LD_VAR 0 13
7814: PUSH
7815: LD_INT 10
7817: DIV
7818: PPUSH
7819: LD_VAR 0 5
7823: PPUSH
7824: LD_VAR 0 6
7828: PPUSH
7829: LD_INT 4
7831: PPUSH
7832: LD_INT 0
7834: PPUSH
7835: CALL_OW 60
// resources := resources - 10 ;
7839: LD_ADDR_VAR 0 13
7843: PUSH
7844: LD_VAR 0 13
7848: PUSH
7849: LD_INT 10
7851: MINUS
7852: ST_TO_ADDR
// end ; until resources <= 0 ;
7853: LD_VAR 0 13
7857: PUSH
7858: LD_INT 0
7860: LESSEQUAL
7861: IFFALSE 7751
// end ;
7863: GO 7732
7865: POP
7866: POP
// end ; if Count ( mpBuildings ) then
7867: LD_EXP 26
7871: PPUSH
7872: CALL 23637 0 1
7876: IFFALSE 7954
// begin for j in mpBuildings [ pos ] do
7878: LD_ADDR_VAR 0 3
7882: PUSH
7883: LD_EXP 26
7887: PUSH
7888: LD_VAR 0 8
7892: ARRAY
7893: PUSH
7894: FOR_IN
7895: IFFALSE 7952
// begin bc_level := 0 ;
7897: LD_ADDR_OWVAR 43
7901: PUSH
7902: LD_INT 0
7904: ST_TO_ADDR
// bc_type := j [ 1 ] ;
7905: LD_ADDR_OWVAR 42
7909: PUSH
7910: LD_VAR 0 3
7914: PUSH
7915: LD_INT 1
7917: ARRAY
7918: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( j [ 2 ] , j [ 3 ] , j [ 4 ] ) ;
7919: LD_VAR 0 3
7923: PUSH
7924: LD_INT 2
7926: ARRAY
7927: PPUSH
7928: LD_VAR 0 3
7932: PUSH
7933: LD_INT 3
7935: ARRAY
7936: PPUSH
7937: LD_VAR 0 3
7941: PUSH
7942: LD_INT 4
7944: ARRAY
7945: PPUSH
7946: CALL_OW 47
// end ;
7950: GO 7894
7952: POP
7953: POP
// end ; if mpBattleFlag > - 1 then
7954: LD_EXP 31
7958: PUSH
7959: LD_INT 1
7961: NEG
7962: GREATER
7963: IFFALSE 8122
// begin x := mpStartPos [ pos ] [ 1 ] ;
7965: LD_ADDR_VAR 0 5
7969: PUSH
7970: LD_EXP 30
7974: PUSH
7975: LD_VAR 0 8
7979: ARRAY
7980: PUSH
7981: LD_INT 1
7983: ARRAY
7984: ST_TO_ADDR
// y := mpStartPos [ pos ] [ 2 ] ;
7985: LD_ADDR_VAR 0 6
7989: PUSH
7990: LD_EXP 30
7994: PUSH
7995: LD_VAR 0 8
7999: ARRAY
8000: PUSH
8001: LD_INT 2
8003: ARRAY
8004: ST_TO_ADDR
// PlaceEnvironment ( x , y , 12 , 2 ) ;
8005: LD_VAR 0 5
8009: PPUSH
8010: LD_VAR 0 6
8014: PPUSH
8015: LD_INT 12
8017: PPUSH
8018: LD_INT 2
8020: PPUSH
8021: CALL_OW 349
// mpBattleFlags := Replace ( mpBattleFlags , side , SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 70 ] , [ bfo_defend_bonus_building , 40 ] , [ bfo_range , 25 ] , [ bfo_height , 100 ] ] ) ) ;
8025: LD_ADDR_EXP 32
8029: PUSH
8030: LD_EXP 32
8034: PPUSH
8035: LD_VAR 0 7
8039: PPUSH
8040: LD_VAR 0 7
8044: PPUSH
8045: LD_VAR 0 5
8049: PPUSH
8050: LD_VAR 0 6
8054: PPUSH
8055: LD_INT 1
8057: PUSH
8058: LD_INT 100
8060: PUSH
8061: EMPTY
8062: LIST
8063: LIST
8064: PUSH
8065: LD_INT 2
8067: PUSH
8068: LD_INT 70
8070: PUSH
8071: EMPTY
8072: LIST
8073: LIST
8074: PUSH
8075: LD_INT 3
8077: PUSH
8078: LD_INT 40
8080: PUSH
8081: EMPTY
8082: LIST
8083: LIST
8084: PUSH
8085: LD_INT 10
8087: PUSH
8088: LD_INT 25
8090: PUSH
8091: EMPTY
8092: LIST
8093: LIST
8094: PUSH
8095: LD_INT 20
8097: PUSH
8098: LD_INT 100
8100: PUSH
8101: EMPTY
8102: LIST
8103: LIST
8104: PUSH
8105: EMPTY
8106: LIST
8107: LIST
8108: LIST
8109: LIST
8110: LIST
8111: PPUSH
8112: CALL_OW 418
8116: PPUSH
8117: CALL_OW 1
8121: ST_TO_ADDR
// end ; if mpSibDetection and GetTech ( tech_sibdet , side ) = state_enabled then
8122: LD_EXP 35
8126: PUSH
8127: LD_INT 20
8129: PPUSH
8130: LD_VAR 0 7
8134: PPUSH
8135: CALL_OW 321
8139: PUSH
8140: LD_INT 1
8142: EQUAL
8143: AND
8144: IFFALSE 8161
// SetTech ( tech_SibDet , side , state_researched ) ;
8146: LD_INT 20
8148: PPUSH
8149: LD_VAR 0 7
8153: PPUSH
8154: LD_INT 2
8156: PPUSH
8157: CALL_OW 322
// if not mpArtifacts then
8161: LD_EXP 53
8165: NOT
8166: IFFALSE 8183
// SetTech ( tech_artifact , side , state_disabled ) ;
8168: LD_INT 24
8170: PPUSH
8171: LD_VAR 0 7
8175: PPUSH
8176: LD_INT 0
8178: PPUSH
8179: CALL_OW 322
// if mpSibBomb = 1 then
8183: LD_EXP 37
8187: PUSH
8188: LD_INT 1
8190: EQUAL
8191: IFFALSE 8210
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
8193: LD_INT 25
8195: PPUSH
8196: LD_VAR 0 7
8200: PPUSH
8201: LD_INT 1
8203: PPUSH
8204: CALL_OW 322
// end else
8208: GO 8225
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
8210: LD_INT 25
8212: PPUSH
8213: LD_VAR 0 7
8217: PPUSH
8218: LD_INT 0
8220: PPUSH
8221: CALL_OW 322
// end ; if mpVehicles then
8225: LD_EXP 45
8229: IFFALSE 8328
// begin for j in mpPrepareVehicles ( side , nation , mpVehicles ) do
8231: LD_ADDR_VAR 0 3
8235: PUSH
8236: LD_VAR 0 7
8240: PPUSH
8241: LD_VAR 0 9
8245: PPUSH
8246: LD_EXP 45
8250: PPUSH
8251: CALL 9442 0 3
8255: PUSH
8256: FOR_IN
8257: IFFALSE 8326
// begin SetDir ( j , rand ( 0 , 5 ) ) ;
8259: LD_VAR 0 3
8263: PPUSH
8264: LD_INT 0
8266: PPUSH
8267: LD_INT 5
8269: PPUSH
8270: CALL_OW 12
8274: PPUSH
8275: CALL_OW 233
// PlaceUnitXYR ( j , mpStartPos [ pos ] [ 1 ] , mpStartPos [ pos ] [ 2 ] , 12 , false ) ;
8279: LD_VAR 0 3
8283: PPUSH
8284: LD_EXP 30
8288: PUSH
8289: LD_VAR 0 8
8293: ARRAY
8294: PUSH
8295: LD_INT 1
8297: ARRAY
8298: PPUSH
8299: LD_EXP 30
8303: PUSH
8304: LD_VAR 0 8
8308: ARRAY
8309: PUSH
8310: LD_INT 2
8312: ARRAY
8313: PPUSH
8314: LD_INT 12
8316: PPUSH
8317: LD_INT 0
8319: PPUSH
8320: CALL_OW 50
// end ;
8324: GO 8256
8326: POP
8327: POP
// end ; team := mpPrepareTeam ( side , nation , mpPeopleAmount , mpPeopleSkill ) ;
8328: LD_ADDR_VAR 0 11
8332: PUSH
8333: LD_VAR 0 7
8337: PPUSH
8338: LD_VAR 0 9
8342: PPUSH
8343: LD_EXP 33
8347: PPUSH
8348: LD_EXP 34
8352: PPUSH
8353: CALL 8944 0 4
8357: ST_TO_ADDR
// for j in team do
8358: LD_ADDR_VAR 0 3
8362: PUSH
8363: LD_VAR 0 11
8367: PUSH
8368: FOR_IN
8369: IFFALSE 8418
// PlaceUnitXYR ( j , mpStartPos [ pos ] [ 1 ] , mpStartPos [ pos ] [ 2 ] , 12 , false ) ;
8371: LD_VAR 0 3
8375: PPUSH
8376: LD_EXP 30
8380: PUSH
8381: LD_VAR 0 8
8385: ARRAY
8386: PUSH
8387: LD_INT 1
8389: ARRAY
8390: PPUSH
8391: LD_EXP 30
8395: PUSH
8396: LD_VAR 0 8
8400: ARRAY
8401: PUSH
8402: LD_INT 2
8404: ARRAY
8405: PPUSH
8406: LD_INT 12
8408: PPUSH
8409: LD_INT 0
8411: PPUSH
8412: CALL_OW 50
8416: GO 8368
8418: POP
8419: POP
// if mpApemans then
8420: LD_EXP 39
8424: IFFALSE 8530
// begin for j := 1 to mpApemans do
8426: LD_ADDR_VAR 0 3
8430: PUSH
8431: DOUBLE
8432: LD_INT 1
8434: DEC
8435: ST_TO_ADDR
8436: LD_EXP 39
8440: PUSH
8441: FOR_TO
8442: IFFALSE 8528
// begin PrepareApeman ( - 5 ) ;
8444: LD_INT 5
8446: NEG
8447: PPUSH
8448: CALL 55494 0 1
// ape := CreateHuman ;
8452: LD_ADDR_VAR 0 10
8456: PUSH
8457: CALL_OW 44
8461: ST_TO_ADDR
// mpApePosIndex := Replace ( mpApePosIndex , pos , Join ( mpApePosIndex [ pos ] , ape ) ) ;
8462: LD_ADDR_EXP 41
8466: PUSH
8467: LD_EXP 41
8471: PPUSH
8472: LD_VAR 0 8
8476: PPUSH
8477: LD_EXP 41
8481: PUSH
8482: LD_VAR 0 8
8486: ARRAY
8487: PPUSH
8488: LD_VAR 0 10
8492: PPUSH
8493: CALL 59246 0 2
8497: PPUSH
8498: CALL_OW 1
8502: ST_TO_ADDR
// PlaceUnitArea ( ape , mpApemansArea [ pos ] , false ) ;
8503: LD_VAR 0 10
8507: PPUSH
8508: LD_EXP 40
8512: PUSH
8513: LD_VAR 0 8
8517: ARRAY
8518: PPUSH
8519: LD_INT 0
8521: PPUSH
8522: CALL_OW 49
// end ;
8526: GO 8441
8528: POP
8529: POP
// end ; end ;
8530: GO 7253
8532: POP
8533: POP
// if not mpTeamGame then
8534: LD_EXP 20
8538: NOT
8539: IFFALSE 8637
// begin for i := 1 to 8 do
8541: LD_ADDR_VAR 0 2
8545: PUSH
8546: DOUBLE
8547: LD_INT 1
8549: DEC
8550: ST_TO_ADDR
8551: LD_INT 8
8553: PUSH
8554: FOR_TO
8555: IFFALSE 8633
// for j := 1 to 8 do
8557: LD_ADDR_VAR 0 3
8561: PUSH
8562: DOUBLE
8563: LD_INT 1
8565: DEC
8566: ST_TO_ADDR
8567: LD_INT 8
8569: PUSH
8570: FOR_TO
8571: IFFALSE 8629
// if i <> j then
8573: LD_VAR 0 2
8577: PUSH
8578: LD_VAR 0 3
8582: NONEQUAL
8583: IFFALSE 8607
// SetAttitude ( i , j , att_neutral , true ) else
8585: LD_VAR 0 2
8589: PPUSH
8590: LD_VAR 0 3
8594: PPUSH
8595: LD_INT 0
8597: PPUSH
8598: LD_INT 1
8600: PPUSH
8601: CALL_OW 80
8605: GO 8627
// SetAttitude ( i , j , att_friend , true ) ;
8607: LD_VAR 0 2
8611: PPUSH
8612: LD_VAR 0 3
8616: PPUSH
8617: LD_INT 1
8619: PPUSH
8620: LD_INT 1
8622: PPUSH
8623: CALL_OW 80
8627: GO 8570
8629: POP
8630: POP
8631: GO 8554
8633: POP
8634: POP
// end else
8635: GO 8812
// begin if mpSharedVision then
8637: LD_EXP 25
8641: IFFALSE 8706
// begin for i in mpTeams do
8643: LD_ADDR_VAR 0 2
8647: PUSH
8648: LD_EXP 19
8652: PUSH
8653: FOR_IN
8654: IFFALSE 8704
// for j := 2 to i do
8656: LD_ADDR_VAR 0 3
8660: PUSH
8661: DOUBLE
8662: LD_INT 2
8664: DEC
8665: ST_TO_ADDR
8666: LD_VAR 0 2
8670: PUSH
8671: FOR_TO
8672: IFFALSE 8700
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
8674: LD_VAR 0 2
8678: PUSH
8679: LD_VAR 0 3
8683: ARRAY
8684: PPUSH
8685: LD_VAR 0 2
8689: PUSH
8690: LD_INT 1
8692: ARRAY
8693: PPUSH
8694: CALL_OW 343
8698: GO 8671
8700: POP
8701: POP
8702: GO 8653
8704: POP
8705: POP
// end ; for i := 1 to 8 do
8706: LD_ADDR_VAR 0 2
8710: PUSH
8711: DOUBLE
8712: LD_INT 1
8714: DEC
8715: ST_TO_ADDR
8716: LD_INT 8
8718: PUSH
8719: FOR_TO
8720: IFFALSE 8810
// for j := 1 to 8 do
8722: LD_ADDR_VAR 0 3
8726: PUSH
8727: DOUBLE
8728: LD_INT 1
8730: DEC
8731: ST_TO_ADDR
8732: LD_INT 8
8734: PUSH
8735: FOR_TO
8736: IFFALSE 8806
// if mpSideTeams [ i ] = mpSideTeams [ j ] then
8738: LD_EXP 17
8742: PUSH
8743: LD_VAR 0 2
8747: ARRAY
8748: PUSH
8749: LD_EXP 17
8753: PUSH
8754: LD_VAR 0 3
8758: ARRAY
8759: EQUAL
8760: IFFALSE 8784
// SetAttitude ( i , j , att_friend , true ) else
8762: LD_VAR 0 2
8766: PPUSH
8767: LD_VAR 0 3
8771: PPUSH
8772: LD_INT 1
8774: PPUSH
8775: LD_INT 1
8777: PPUSH
8778: CALL_OW 80
8782: GO 8804
// SetAttitude ( i , j , att_enemy , true ) ;
8784: LD_VAR 0 2
8788: PPUSH
8789: LD_VAR 0 3
8793: PPUSH
8794: LD_INT 2
8796: PPUSH
8797: LD_INT 1
8799: PPUSH
8800: CALL_OW 80
8804: GO 8735
8806: POP
8807: POP
8808: GO 8719
8810: POP
8811: POP
// end ; music_nat := mpSideNations [ your_side ] ;
8812: LD_ADDR_OWVAR 71
8816: PUSH
8817: LD_EXP 18
8821: PUSH
8822: LD_OWVAR 2
8826: ARRAY
8827: ST_TO_ADDR
// if IAmSpec then
8828: CALL_OW 531
8832: IFFALSE 8873
// begin FogOff ( true ) ;
8834: LD_INT 1
8836: PPUSH
8837: CALL_OW 344
// CenterNowOnXY ( mpMapSize [ 1 ] div 2 , mpMapSize [ 2 ] div 2 ) ;
8841: LD_EXP 38
8845: PUSH
8846: LD_INT 1
8848: ARRAY
8849: PUSH
8850: LD_INT 2
8852: DIV
8853: PPUSH
8854: LD_EXP 38
8858: PUSH
8859: LD_INT 2
8861: ARRAY
8862: PUSH
8863: LD_INT 2
8865: DIV
8866: PPUSH
8867: CALL_OW 86
// end else
8871: GO 8919
// begin CenterNowOnXY ( mpStartPos [ mpSidePositions [ your_side ] ] [ 1 ] , mpStartPos [ mpSidePositions [ your_side ] ] [ 2 ] ) ;
8873: LD_EXP 30
8877: PUSH
8878: LD_EXP 16
8882: PUSH
8883: LD_OWVAR 2
8887: ARRAY
8888: ARRAY
8889: PUSH
8890: LD_INT 1
8892: ARRAY
8893: PPUSH
8894: LD_EXP 30
8898: PUSH
8899: LD_EXP 16
8903: PUSH
8904: LD_OWVAR 2
8908: ARRAY
8909: ARRAY
8910: PUSH
8911: LD_INT 2
8913: ARRAY
8914: PPUSH
8915: CALL_OW 86
// end ; BeginBuildUp ;
8919: CALL 9920 0 0
// enable ( mpActive ) ;
8923: LD_INT 100
8925: ENABLE_MARKED
// enable ( mpGameType ) ;
8926: LD_EXP 12
8930: ENABLE_MARKED
// mpGameActive := true ;
8931: LD_ADDR_EXP 48
8935: PUSH
8936: LD_INT 1
8938: ST_TO_ADDR
// end ;
8939: LD_VAR 0 1
8943: RET
// var mpTeamPreset ; function mpPrepareTeam ( side , nation , amount , skill ) ; var i , un , class ; begin
8944: LD_INT 0
8946: PPUSH
8947: PPUSH
8948: PPUSH
8949: PPUSH
// result := [ ] ;
8950: LD_ADDR_VAR 0 5
8954: PUSH
8955: EMPTY
8956: ST_TO_ADDR
// class := class_soldier ;
8957: LD_ADDR_VAR 0 8
8961: PUSH
8962: LD_INT 1
8964: ST_TO_ADDR
// uc_side := side ;
8965: LD_ADDR_OWVAR 20
8969: PUSH
8970: LD_VAR 0 1
8974: ST_TO_ADDR
// uc_nation := nation ;
8975: LD_ADDR_OWVAR 21
8979: PUSH
8980: LD_VAR 0 2
8984: ST_TO_ADDR
// hc_name := mp_sides_players_names [ side ] ;
8985: LD_ADDR_OWVAR 26
8989: PUSH
8990: LD_OWVAR 19
8994: PUSH
8995: LD_VAR 0 1
8999: ARRAY
9000: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , class , skill + 2 ) ;
9001: LD_INT 1
9003: PPUSH
9004: LD_INT 2
9006: PPUSH
9007: CALL_OW 12
9011: PPUSH
9012: LD_VAR 0 8
9016: PPUSH
9017: LD_VAR 0 4
9021: PUSH
9022: LD_INT 2
9024: PLUS
9025: PPUSH
9026: CALL_OW 380
// hc_importance := 105 ;
9030: LD_ADDR_OWVAR 32
9034: PUSH
9035: LD_INT 105
9037: ST_TO_ADDR
// if Multiplayer then
9038: LD_OWVAR 4
9042: IFFALSE 9082
// begin hc_gallery := MULTIAVATARS ;
9044: LD_ADDR_OWVAR 33
9048: PUSH
9049: LD_STRING MULTIAVATARS
9051: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( side ) ;
9052: LD_ADDR_OWVAR 34
9056: PUSH
9057: LD_VAR 0 1
9061: PPUSH
9062: CALL_OW 525
9066: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( side ) ;
9067: LD_ADDR_OWVAR 27
9071: PUSH
9072: LD_VAR 0 1
9076: PPUSH
9077: CALL_OW 526
9081: ST_TO_ADDR
// end ; result := Join ( result , CreateHuman ) ;
9082: LD_ADDR_VAR 0 5
9086: PUSH
9087: LD_VAR 0 5
9091: PPUSH
9092: CALL_OW 44
9096: PPUSH
9097: CALL 59246 0 2
9101: ST_TO_ADDR
// if mpTeamPreset then
9102: LD_LOC 1
9106: IFFALSE 9202
// begin CopySkills ( mpTeamPreset [ 1 ] , result [ result ] ) ;
9108: LD_LOC 1
9112: PUSH
9113: LD_INT 1
9115: ARRAY
9116: PPUSH
9117: LD_VAR 0 5
9121: PUSH
9122: LD_VAR 0 5
9126: ARRAY
9127: PPUSH
9128: CALL_OW 510
// SetAttr ( result [ result ] , attr_stamina , GetAttr ( mpTeamPreset [ 1 ] , attr_stamina ) ) ;
9132: LD_VAR 0 5
9136: PUSH
9137: LD_VAR 0 5
9141: ARRAY
9142: PPUSH
9143: LD_INT 1
9145: PPUSH
9146: LD_LOC 1
9150: PUSH
9151: LD_INT 1
9153: ARRAY
9154: PPUSH
9155: LD_INT 1
9157: PPUSH
9158: CALL_OW 260
9162: PPUSH
9163: CALL_OW 239
// SetAttr ( result [ result ] , attr_speed , GetAttr ( mpTeamPreset [ 1 ] , attr_speed ) ) ;
9167: LD_VAR 0 5
9171: PUSH
9172: LD_VAR 0 5
9176: ARRAY
9177: PPUSH
9178: LD_INT 2
9180: PPUSH
9181: LD_LOC 1
9185: PUSH
9186: LD_INT 1
9188: ARRAY
9189: PPUSH
9190: LD_INT 2
9192: PPUSH
9193: CALL_OW 260
9197: PPUSH
9198: CALL_OW 239
// end ; InitHc_All ( ) ;
9202: CALL_OW 584
// class := 2 ;
9206: LD_ADDR_VAR 0 8
9210: PUSH
9211: LD_INT 2
9213: ST_TO_ADDR
// for i := 1 to ( amount - 1 ) do
9214: LD_ADDR_VAR 0 6
9218: PUSH
9219: DOUBLE
9220: LD_INT 1
9222: DEC
9223: ST_TO_ADDR
9224: LD_VAR 0 3
9228: PUSH
9229: LD_INT 1
9231: MINUS
9232: PUSH
9233: FOR_TO
9234: IFFALSE 9418
// begin PrepareHuman ( false , class , skill ) ;
9236: LD_INT 0
9238: PPUSH
9239: LD_VAR 0 8
9243: PPUSH
9244: LD_VAR 0 4
9248: PPUSH
9249: CALL_OW 380
// un := CreateHuman ;
9253: LD_ADDR_VAR 0 7
9257: PUSH
9258: CALL_OW 44
9262: ST_TO_ADDR
// result := Join ( result , un ) ;
9263: LD_ADDR_VAR 0 5
9267: PUSH
9268: LD_VAR 0 5
9272: PPUSH
9273: LD_VAR 0 7
9277: PPUSH
9278: CALL 59246 0 2
9282: ST_TO_ADDR
// if mpTeamPreset then
9283: LD_LOC 1
9287: IFFALSE 9383
// begin CopySkills ( mpTeamPreset [ i + 1 ] , un ) ;
9289: LD_LOC 1
9293: PUSH
9294: LD_VAR 0 6
9298: PUSH
9299: LD_INT 1
9301: PLUS
9302: ARRAY
9303: PPUSH
9304: LD_VAR 0 7
9308: PPUSH
9309: CALL_OW 510
// SetAttr ( un , attr_stamina , GetAttr ( mpTeamPreset [ i + 1 ] , attr_stamina ) ) ;
9313: LD_VAR 0 7
9317: PPUSH
9318: LD_INT 1
9320: PPUSH
9321: LD_LOC 1
9325: PUSH
9326: LD_VAR 0 6
9330: PUSH
9331: LD_INT 1
9333: PLUS
9334: ARRAY
9335: PPUSH
9336: LD_INT 1
9338: PPUSH
9339: CALL_OW 260
9343: PPUSH
9344: CALL_OW 239
// SetAttr ( un , attr_speed , GetAttr ( mpTeamPreset [ i + 1 ] , attr_speed ) ) ;
9348: LD_VAR 0 7
9352: PPUSH
9353: LD_INT 2
9355: PPUSH
9356: LD_LOC 1
9360: PUSH
9361: LD_VAR 0 6
9365: PUSH
9366: LD_INT 1
9368: PLUS
9369: ARRAY
9370: PPUSH
9371: LD_INT 2
9373: PPUSH
9374: CALL_OW 260
9378: PPUSH
9379: CALL_OW 239
// end ; class := Inc ( class ) ;
9383: LD_ADDR_VAR 0 8
9387: PUSH
9388: LD_VAR 0 8
9392: PPUSH
9393: CALL 60607 0 1
9397: ST_TO_ADDR
// if class = 5 then
9398: LD_VAR 0 8
9402: PUSH
9403: LD_INT 5
9405: EQUAL
9406: IFFALSE 9416
// class := 1 ;
9408: LD_ADDR_VAR 0 8
9412: PUSH
9413: LD_INT 1
9415: ST_TO_ADDR
// end ;
9416: GO 9233
9418: POP
9419: POP
// if not mpTeamPreset then
9420: LD_LOC 1
9424: NOT
9425: IFFALSE 9437
// mpTeamPreset := result ;
9427: LD_ADDR_LOC 1
9431: PUSH
9432: LD_VAR 0 5
9436: ST_TO_ADDR
// end ;
9437: LD_VAR 0 5
9441: RET
// function mpPrepareVehicles ( side , nation , vehicles ) ; var i ; begin
9442: LD_INT 0
9444: PPUSH
9445: PPUSH
// result := [ ] ;
9446: LD_ADDR_VAR 0 4
9450: PUSH
9451: EMPTY
9452: ST_TO_ADDR
// if not vehicles then
9453: LD_VAR 0 3
9457: NOT
9458: IFFALSE 9462
// exit ;
9460: GO 9621
// for i := 1 to vehicles [ nation ] do
9462: LD_ADDR_VAR 0 5
9466: PUSH
9467: DOUBLE
9468: LD_INT 1
9470: DEC
9471: ST_TO_ADDR
9472: LD_VAR 0 3
9476: PUSH
9477: LD_VAR 0 2
9481: ARRAY
9482: PUSH
9483: FOR_TO
9484: IFFALSE 9619
// begin uc_side := side ;
9486: LD_ADDR_OWVAR 20
9490: PUSH
9491: LD_VAR 0 1
9495: ST_TO_ADDR
// uc_nation := nation ;
9496: LD_ADDR_OWVAR 21
9500: PUSH
9501: LD_VAR 0 2
9505: ST_TO_ADDR
// PrepareVehicle ( vehicles [ nation ] [ i ] [ 1 ] , vehicles [ nation ] [ i ] [ 2 ] , vehicles [ nation ] [ i ] [ 3 ] , vehicles [ nation ] [ i ] [ 4 ] , 80 ) ;
9506: LD_VAR 0 3
9510: PUSH
9511: LD_VAR 0 2
9515: ARRAY
9516: PUSH
9517: LD_VAR 0 5
9521: ARRAY
9522: PUSH
9523: LD_INT 1
9525: ARRAY
9526: PPUSH
9527: LD_VAR 0 3
9531: PUSH
9532: LD_VAR 0 2
9536: ARRAY
9537: PUSH
9538: LD_VAR 0 5
9542: ARRAY
9543: PUSH
9544: LD_INT 2
9546: ARRAY
9547: PPUSH
9548: LD_VAR 0 3
9552: PUSH
9553: LD_VAR 0 2
9557: ARRAY
9558: PUSH
9559: LD_VAR 0 5
9563: ARRAY
9564: PUSH
9565: LD_INT 3
9567: ARRAY
9568: PPUSH
9569: LD_VAR 0 3
9573: PUSH
9574: LD_VAR 0 2
9578: ARRAY
9579: PUSH
9580: LD_VAR 0 5
9584: ARRAY
9585: PUSH
9586: LD_INT 4
9588: ARRAY
9589: PPUSH
9590: LD_INT 80
9592: PPUSH
9593: CALL 26375 0 5
// result := Join ( result , CreateVehicle ) ;
9597: LD_ADDR_VAR 0 4
9601: PUSH
9602: LD_VAR 0 4
9606: PPUSH
9607: CALL_OW 45
9611: PPUSH
9612: CALL 59246 0 2
9616: ST_TO_ADDR
// end ;
9617: GO 9483
9619: POP
9620: POP
// end ;
9621: LD_VAR 0 4
9625: RET
// function mpUpdateFlags ( strength ) ; var i ; begin
9626: LD_INT 0
9628: PPUSH
9629: PPUSH
// for i in mpBattleFlags do
9630: LD_ADDR_VAR 0 3
9634: PUSH
9635: LD_EXP 32
9639: PUSH
9640: FOR_IN
9641: IFFALSE 9718
// ChangeBattleFlagOptions ( i , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength * 0.7 ] , [ bfo_defend_bonus_building , strength * 0.4 ] , [ bfo_height , strength ] ] ) ;
9643: LD_VAR 0 3
9647: PPUSH
9648: LD_INT 1
9650: PUSH
9651: LD_VAR 0 1
9655: PUSH
9656: EMPTY
9657: LIST
9658: LIST
9659: PUSH
9660: LD_INT 2
9662: PUSH
9663: LD_VAR 0 1
9667: PUSH
9668: LD_REAL  7.00000000000000E-0001
9671: MUL
9672: PUSH
9673: EMPTY
9674: LIST
9675: LIST
9676: PUSH
9677: LD_INT 3
9679: PUSH
9680: LD_VAR 0 1
9684: PUSH
9685: LD_REAL  4.00000000000000E-0001
9688: MUL
9689: PUSH
9690: EMPTY
9691: LIST
9692: LIST
9693: PUSH
9694: LD_INT 20
9696: PUSH
9697: LD_VAR 0 1
9701: PUSH
9702: EMPTY
9703: LIST
9704: LIST
9705: PUSH
9706: EMPTY
9707: LIST
9708: LIST
9709: LIST
9710: LIST
9711: PPUSH
9712: CALL_OW 423
9716: GO 9640
9718: POP
9719: POP
// end ;
9720: LD_VAR 0 2
9724: RET
// every 0 0$1 trigger mpActive do var i , strength ;
9725: LD_INT 100
9727: IFFALSE 9822
9729: GO 9731
9731: DISABLE
9732: LD_INT 0
9734: PPUSH
9735: PPUSH
// begin if mpBattleFlag <= 0 then
9736: LD_EXP 31
9740: PUSH
9741: LD_INT 0
9743: LESSEQUAL
9744: IFFALSE 9748
// exit ;
9746: GO 9822
// strength := 100 ;
9748: LD_ADDR_VAR 0 2
9752: PUSH
9753: LD_INT 100
9755: ST_TO_ADDR
// repeat wait ( mpBattleFlag ) ;
9756: LD_EXP 31
9760: PPUSH
9761: CALL_OW 67
// strength := Dec ( strength ) ;
9765: LD_ADDR_VAR 0 2
9769: PUSH
9770: LD_VAR 0 2
9774: PPUSH
9775: CALL 60629 0 1
9779: ST_TO_ADDR
// mpUpdateFlags ( strength ) ;
9780: LD_VAR 0 2
9784: PPUSH
9785: CALL 9626 0 1
// until not strength ;
9789: LD_VAR 0 2
9793: NOT
9794: IFFALSE 9756
// for i in mpBattleFlags do
9796: LD_ADDR_VAR 0 1
9800: PUSH
9801: LD_EXP 32
9805: PUSH
9806: FOR_IN
9807: IFFALSE 9820
// KillBattleFlag ( i ) ;
9809: LD_VAR 0 1
9813: PPUSH
9814: CALL_OW 419
9818: GO 9806
9820: POP
9821: POP
// end ;
9822: PPOPN 2
9824: END
// every 0 0$1 marked mpActive do var side , tmp ;
9825: GO 9827
9827: DISABLE
9828: LD_INT 0
9830: PPUSH
9831: PPUSH
// begin if mpSibBomb <= 1 then
9832: LD_EXP 37
9836: PUSH
9837: LD_INT 1
9839: LESSEQUAL
9840: IFFALSE 9844
// exit ;
9842: GO 9917
// tmp := mpSibBomb ;
9844: LD_ADDR_VAR 0 2
9848: PUSH
9849: LD_EXP 37
9853: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
9854: LD_INT 35
9856: PPUSH
9857: CALL_OW 67
// tmp := tmp - 0 0$1 ;
9861: LD_ADDR_VAR 0 2
9865: PUSH
9866: LD_VAR 0 2
9870: PUSH
9871: LD_INT 35
9873: MINUS
9874: ST_TO_ADDR
// until not tmp ;
9875: LD_VAR 0 2
9879: NOT
9880: IFFALSE 9854
// for side := 1 to 8 do
9882: LD_ADDR_VAR 0 1
9886: PUSH
9887: DOUBLE
9888: LD_INT 1
9890: DEC
9891: ST_TO_ADDR
9892: LD_INT 8
9894: PUSH
9895: FOR_TO
9896: IFFALSE 9915
// SetTech ( tech_SibFiss , side , state_enabled ) ;
9898: LD_INT 25
9900: PPUSH
9901: LD_VAR 0 1
9905: PPUSH
9906: LD_INT 1
9908: PPUSH
9909: CALL_OW 322
9913: GO 9895
9915: POP
9916: POP
// end ;
9917: PPOPN 2
9919: END
// export mpBuildUpTimeDelay , mpBuildUpTimeActive ; function BeginBuildUp ; var i , j ; begin
9920: LD_INT 0
9922: PPUSH
9923: PPUSH
9924: PPUSH
// mpBuildUpTimeDelay := 0 ;
9925: LD_ADDR_EXP 55
9929: PUSH
9930: LD_INT 0
9932: ST_TO_ADDR
// if not mpBuildUpTime then
9933: LD_EXP 29
9937: NOT
9938: IFFALSE 9942
// exit ;
9940: GO 10125
// mpBuildUpTimeDelay := 4 4$00 + 1 1$00 * mpBuildUpTime ;
9942: LD_ADDR_EXP 55
9946: PUSH
9947: LD_INT 8400
9949: PUSH
9950: LD_INT 2100
9952: PUSH
9953: LD_EXP 29
9957: MUL
9958: PLUS
9959: ST_TO_ADDR
// mpBuildUpTimeActive := true ;
9960: LD_ADDR_EXP 56
9964: PUSH
9965: LD_INT 1
9967: ST_TO_ADDR
// for i := 1 to 8 do
9968: LD_ADDR_VAR 0 2
9972: PUSH
9973: DOUBLE
9974: LD_INT 1
9976: DEC
9977: ST_TO_ADDR
9978: LD_INT 8
9980: PUSH
9981: FOR_TO
9982: IFFALSE 10123
// if mpSidePositions [ i ] then
9984: LD_EXP 16
9988: PUSH
9989: LD_VAR 0 2
9993: ARRAY
9994: IFFALSE 10121
// begin SetAreaMapShow ( mpBuildUpAreas [ mpSidePositions [ i ] ] , 5 ) ;
9996: LD_EXP 28
10000: PUSH
10001: LD_EXP 16
10005: PUSH
10006: LD_VAR 0 2
10010: ARRAY
10011: ARRAY
10012: PPUSH
10013: LD_INT 5
10015: PPUSH
10016: CALL_OW 424
// for j := 1 to 8 do
10020: LD_ADDR_VAR 0 3
10024: PUSH
10025: DOUBLE
10026: LD_INT 1
10028: DEC
10029: ST_TO_ADDR
10030: LD_INT 8
10032: PUSH
10033: FOR_TO
10034: IFFALSE 10119
// if mpSidePositions [ j ] and ( ( mpSideTeams [ i ] <> mpSideTeams [ j ] ) or ( not mpTeamGame ) and ( i <> j ) ) then
10036: LD_EXP 16
10040: PUSH
10041: LD_VAR 0 3
10045: ARRAY
10046: PUSH
10047: LD_EXP 17
10051: PUSH
10052: LD_VAR 0 2
10056: ARRAY
10057: PUSH
10058: LD_EXP 17
10062: PUSH
10063: LD_VAR 0 3
10067: ARRAY
10068: NONEQUAL
10069: PUSH
10070: LD_EXP 20
10074: NOT
10075: PUSH
10076: LD_VAR 0 2
10080: PUSH
10081: LD_VAR 0 3
10085: NONEQUAL
10086: AND
10087: OR
10088: AND
10089: IFFALSE 10117
// HideArea ( j , mpBuildUpAreas [ mpSidePositions [ i ] ] ) ;
10091: LD_VAR 0 3
10095: PPUSH
10096: LD_EXP 28
10100: PUSH
10101: LD_EXP 16
10105: PUSH
10106: LD_VAR 0 2
10110: ARRAY
10111: ARRAY
10112: PPUSH
10113: CALL_OW 333
10117: GO 10033
10119: POP
10120: POP
// end ;
10121: GO 9981
10123: POP
10124: POP
// end ;
10125: LD_VAR 0 1
10129: RET
// function EndBuildUp ; var i , j ; begin
10130: LD_INT 0
10132: PPUSH
10133: PPUSH
10134: PPUSH
// mpBuildUpTimeActive := false ;
10135: LD_ADDR_EXP 56
10139: PUSH
10140: LD_INT 0
10142: ST_TO_ADDR
// for i := 1 to 8 do
10143: LD_ADDR_VAR 0 2
10147: PUSH
10148: DOUBLE
10149: LD_INT 1
10151: DEC
10152: ST_TO_ADDR
10153: LD_INT 8
10155: PUSH
10156: FOR_TO
10157: IFFALSE 10298
// if mpSidePositions [ i ] then
10159: LD_EXP 16
10163: PUSH
10164: LD_VAR 0 2
10168: ARRAY
10169: IFFALSE 10296
// begin SetAreaMapShow ( mpBuildUpAreas [ mpSidePositions [ i ] ] , 0 ) ;
10171: LD_EXP 28
10175: PUSH
10176: LD_EXP 16
10180: PUSH
10181: LD_VAR 0 2
10185: ARRAY
10186: ARRAY
10187: PPUSH
10188: LD_INT 0
10190: PPUSH
10191: CALL_OW 424
// for j := 1 to 8 do
10195: LD_ADDR_VAR 0 3
10199: PUSH
10200: DOUBLE
10201: LD_INT 1
10203: DEC
10204: ST_TO_ADDR
10205: LD_INT 8
10207: PUSH
10208: FOR_TO
10209: IFFALSE 10294
// if mpSidePositions [ j ] and ( ( mpSideTeams [ i ] <> mpSideTeams [ j ] ) or ( not mpTeamGame ) and ( i <> j ) ) then
10211: LD_EXP 16
10215: PUSH
10216: LD_VAR 0 3
10220: ARRAY
10221: PUSH
10222: LD_EXP 17
10226: PUSH
10227: LD_VAR 0 2
10231: ARRAY
10232: PUSH
10233: LD_EXP 17
10237: PUSH
10238: LD_VAR 0 3
10242: ARRAY
10243: NONEQUAL
10244: PUSH
10245: LD_EXP 20
10249: NOT
10250: PUSH
10251: LD_VAR 0 2
10255: PUSH
10256: LD_VAR 0 3
10260: NONEQUAL
10261: AND
10262: OR
10263: AND
10264: IFFALSE 10292
// ShowArea ( j , mpBuildUpAreas [ mpSidePositions [ i ] ] ) ;
10266: LD_VAR 0 3
10270: PPUSH
10271: LD_EXP 28
10275: PUSH
10276: LD_EXP 16
10280: PUSH
10281: LD_VAR 0 2
10285: ARRAY
10286: ARRAY
10287: PPUSH
10288: CALL_OW 334
10292: GO 10208
10294: POP
10295: POP
// end ;
10296: GO 10156
10298: POP
10299: POP
// end ;
10300: LD_VAR 0 1
10304: RET
// every 5 trigger mpBuildUpTimeActive marked mpActive do var i , un ;
10305: LD_EXP 56
10309: IFFALSE 10486
10311: GO 10313
10313: DISABLE
10314: LD_INT 0
10316: PPUSH
10317: PPUSH
// begin for i := 1 to 8 do
10318: LD_ADDR_VAR 0 1
10322: PUSH
10323: DOUBLE
10324: LD_INT 1
10326: DEC
10327: ST_TO_ADDR
10328: LD_INT 8
10330: PUSH
10331: FOR_TO
10332: IFFALSE 10483
// if mpSidePositions [ i ] then
10334: LD_EXP 16
10338: PUSH
10339: LD_VAR 0 1
10343: ARRAY
10344: IFFALSE 10481
// for un in FilterUnitsInArea ( mpBuildUpAreas [ mpSidePositions [ i ] ] , [ [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] , [ f_side , your_side ] ] ) do
10346: LD_ADDR_VAR 0 2
10350: PUSH
10351: LD_EXP 28
10355: PUSH
10356: LD_EXP 16
10360: PUSH
10361: LD_VAR 0 1
10365: ARRAY
10366: ARRAY
10367: PPUSH
10368: LD_INT 2
10370: PUSH
10371: LD_INT 21
10373: PUSH
10374: LD_INT 1
10376: PUSH
10377: EMPTY
10378: LIST
10379: LIST
10380: PUSH
10381: LD_INT 21
10383: PUSH
10384: LD_INT 2
10386: PUSH
10387: EMPTY
10388: LIST
10389: LIST
10390: PUSH
10391: EMPTY
10392: LIST
10393: LIST
10394: LIST
10395: PUSH
10396: LD_INT 22
10398: PUSH
10399: LD_OWVAR 2
10403: PUSH
10404: EMPTY
10405: LIST
10406: LIST
10407: PUSH
10408: EMPTY
10409: LIST
10410: LIST
10411: PPUSH
10412: CALL_OW 70
10416: PUSH
10417: FOR_IN
10418: IFFALSE 10479
// if ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) or ( not mpTeamGame ) and ( i <> your_side ) ) then
10420: LD_EXP 17
10424: PUSH
10425: LD_VAR 0 1
10429: ARRAY
10430: PUSH
10431: LD_EXP 17
10435: PUSH
10436: LD_OWVAR 2
10440: ARRAY
10441: NONEQUAL
10442: PUSH
10443: LD_EXP 20
10447: NOT
10448: PUSH
10449: LD_VAR 0 1
10453: PUSH
10454: LD_OWVAR 2
10458: NONEQUAL
10459: AND
10460: OR
10461: IFFALSE 10477
// ComMoveToArea ( un , BuildUpEscape ) ;
10463: LD_VAR 0 2
10467: PPUSH
10468: LD_EXP 1
10472: PPUSH
10473: CALL_OW 113
10477: GO 10417
10479: POP
10480: POP
10481: GO 10331
10483: POP
10484: POP
// enable ;
10485: ENABLE
// end ;
10486: PPOPN 2
10488: END
// every 0 0$1 trigger mpBuildUpTime marked mpActive do var tmp ;
10489: LD_EXP 29
10493: IFFALSE 10543
10495: GO 10497
10497: DISABLE
10498: LD_INT 0
10500: PPUSH
// begin tmp := mpBuildUpTime ;
10501: LD_ADDR_VAR 0 1
10505: PUSH
10506: LD_EXP 29
10510: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
10511: LD_INT 35
10513: PPUSH
10514: CALL_OW 67
// tmp := tmp - 0 0$1 ;
10518: LD_ADDR_VAR 0 1
10522: PUSH
10523: LD_VAR 0 1
10527: PUSH
10528: LD_INT 35
10530: MINUS
10531: ST_TO_ADDR
// until not tmp ;
10532: LD_VAR 0 1
10536: NOT
10537: IFFALSE 10511
// EndBuildUp ;
10539: CALL 10130 0 0
// end ;
10543: PPOPN 1
10545: END
// every 0 0$1 trigger mpActive marked mpWin do
10546: LD_INT 100
10548: IFFALSE 10582
10550: GO 10552
10552: DISABLE
// begin if IAmServer then
10553: CALL_OW 518
10557: IFFALSE 10566
// wait ( 0 0$3 ) ;
10559: LD_INT 105
10561: PPUSH
10562: CALL_OW 67
// if Multiplayer then
10566: LD_OWVAR 4
10570: IFFALSE 10578
// YouWinInMultiplayer else
10572: CALL_OW 106
10576: GO 10582
// YouWin ;
10578: CALL_OW 103
// end ;
10582: END
// export function HasPowerByGameType ( gameType , side ) ; begin
10583: LD_INT 0
10585: PPUSH
// result := false ;
10586: LD_ADDR_VAR 0 3
10590: PUSH
10591: LD_INT 0
10593: ST_TO_ADDR
// case gameType of GameTypeNormal , GameTypeFamine :
10594: LD_VAR 0 1
10598: PUSH
10599: LD_INT 1
10601: DOUBLE
10602: EQUAL
10603: IFTRUE 10613
10605: LD_INT 5
10607: DOUBLE
10608: EQUAL
10609: IFTRUE 10613
10611: GO 10686
10613: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) ;
10614: LD_ADDR_VAR 0 3
10618: PUSH
10619: LD_INT 22
10621: PUSH
10622: LD_VAR 0 2
10626: PUSH
10627: EMPTY
10628: LIST
10629: LIST
10630: PUSH
10631: LD_INT 2
10633: PUSH
10634: LD_INT 21
10636: PUSH
10637: LD_INT 1
10639: PUSH
10640: EMPTY
10641: LIST
10642: LIST
10643: PUSH
10644: LD_INT 33
10646: PUSH
10647: LD_INT 3
10649: PUSH
10650: EMPTY
10651: LIST
10652: LIST
10653: PUSH
10654: LD_INT 33
10656: PUSH
10657: LD_INT 5
10659: PUSH
10660: EMPTY
10661: LIST
10662: LIST
10663: PUSH
10664: EMPTY
10665: LIST
10666: LIST
10667: LIST
10668: LIST
10669: PUSH
10670: EMPTY
10671: LIST
10672: LIST
10673: PPUSH
10674: CALL_OW 69
10678: PPUSH
10679: CALL 23637 0 1
10683: ST_TO_ADDR
// end ; GameTypeSurvival :
10684: GO 10921
10686: LD_INT 2
10688: DOUBLE
10689: EQUAL
10690: IFTRUE 10694
10692: GO 10822
10694: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ) and Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) ;
10695: LD_ADDR_VAR 0 3
10699: PUSH
10700: LD_INT 22
10702: PUSH
10703: LD_VAR 0 2
10707: PUSH
10708: EMPTY
10709: LIST
10710: LIST
10711: PUSH
10712: LD_INT 2
10714: PUSH
10715: LD_INT 30
10717: PUSH
10718: LD_INT 0
10720: PUSH
10721: EMPTY
10722: LIST
10723: LIST
10724: PUSH
10725: LD_INT 30
10727: PUSH
10728: LD_INT 1
10730: PUSH
10731: EMPTY
10732: LIST
10733: LIST
10734: PUSH
10735: EMPTY
10736: LIST
10737: LIST
10738: LIST
10739: PUSH
10740: EMPTY
10741: LIST
10742: LIST
10743: PPUSH
10744: CALL_OW 69
10748: PPUSH
10749: CALL 23637 0 1
10753: PUSH
10754: LD_INT 22
10756: PUSH
10757: LD_VAR 0 2
10761: PUSH
10762: EMPTY
10763: LIST
10764: LIST
10765: PUSH
10766: LD_INT 2
10768: PUSH
10769: LD_INT 21
10771: PUSH
10772: LD_INT 1
10774: PUSH
10775: EMPTY
10776: LIST
10777: LIST
10778: PUSH
10779: LD_INT 33
10781: PUSH
10782: LD_INT 3
10784: PUSH
10785: EMPTY
10786: LIST
10787: LIST
10788: PUSH
10789: LD_INT 33
10791: PUSH
10792: LD_INT 5
10794: PUSH
10795: EMPTY
10796: LIST
10797: LIST
10798: PUSH
10799: EMPTY
10800: LIST
10801: LIST
10802: LIST
10803: LIST
10804: PUSH
10805: EMPTY
10806: LIST
10807: LIST
10808: PPUSH
10809: CALL_OW 69
10813: PPUSH
10814: CALL 23637 0 1
10818: AND
10819: ST_TO_ADDR
// end ; GameTypeKing :
10820: GO 10921
10822: LD_INT 3
10824: DOUBLE
10825: EQUAL
10826: IFTRUE 10830
10828: GO 10920
10830: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) and HowMuchPointsKing ( side ) < mpPoints ;
10831: LD_ADDR_VAR 0 3
10835: PUSH
10836: LD_INT 22
10838: PUSH
10839: LD_VAR 0 2
10843: PUSH
10844: EMPTY
10845: LIST
10846: LIST
10847: PUSH
10848: LD_INT 2
10850: PUSH
10851: LD_INT 21
10853: PUSH
10854: LD_INT 1
10856: PUSH
10857: EMPTY
10858: LIST
10859: LIST
10860: PUSH
10861: LD_INT 33
10863: PUSH
10864: LD_INT 3
10866: PUSH
10867: EMPTY
10868: LIST
10869: LIST
10870: PUSH
10871: LD_INT 33
10873: PUSH
10874: LD_INT 5
10876: PUSH
10877: EMPTY
10878: LIST
10879: LIST
10880: PUSH
10881: EMPTY
10882: LIST
10883: LIST
10884: LIST
10885: LIST
10886: PUSH
10887: EMPTY
10888: LIST
10889: LIST
10890: PPUSH
10891: CALL_OW 69
10895: PPUSH
10896: CALL 23637 0 1
10900: PUSH
10901: LD_VAR 0 2
10905: PPUSH
10906: CALL 13925 0 1
10910: PUSH
10911: LD_EXP 44
10915: LESS
10916: AND
10917: ST_TO_ADDR
// end ; end ;
10918: GO 10921
10920: POP
// end ;
10921: LD_VAR 0 3
10925: RET
// every 0 0$1 trigger mpActive marked mpLose do var gameIsOn , i ;
10926: LD_INT 100
10928: IFFALSE 11150
10930: GO 10932
10932: DISABLE
10933: LD_INT 0
10935: PPUSH
10936: PPUSH
// begin if Multiplayer then
10937: LD_OWVAR 4
10941: IFFALSE 10949
// SetPlayerSpectator ( ) else
10943: CALL_OW 572
10947: GO 10958
// FogOff ( your_side ) ;
10949: LD_OWVAR 2
10953: PPUSH
10954: CALL_OW 344
// repeat gameIsOn := false ;
10958: LD_ADDR_VAR 0 1
10962: PUSH
10963: LD_INT 0
10965: ST_TO_ADDR
// for i := 1 to 8 do
10966: LD_ADDR_VAR 0 2
10970: PUSH
10971: DOUBLE
10972: LD_INT 1
10974: DEC
10975: ST_TO_ADDR
10976: LD_INT 8
10978: PUSH
10979: FOR_TO
10980: IFFALSE 11102
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
10982: LD_EXP 16
10986: PUSH
10987: LD_VAR 0 2
10991: ARRAY
10992: PUSH
10993: LD_VAR 0 2
10997: PPUSH
10998: CALL_OW 108
11002: AND
11003: PUSH
11004: LD_VAR 0 2
11008: PUSH
11009: LD_OWVAR 2
11013: NONEQUAL
11014: AND
11015: IFFALSE 11100
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
11017: LD_EXP 17
11021: PUSH
11022: LD_VAR 0 2
11026: ARRAY
11027: NOT
11028: PUSH
11029: LD_EXP 17
11033: PUSH
11034: LD_VAR 0 2
11038: ARRAY
11039: PUSH
11040: LD_EXP 17
11044: PUSH
11045: LD_OWVAR 2
11049: ARRAY
11050: NONEQUAL
11051: PUSH
11052: LD_OWVAR 2
11056: PPUSH
11057: LD_VAR 0 2
11061: PPUSH
11062: CALL_OW 81
11066: PUSH
11067: LD_INT 1
11069: NONEQUAL
11070: AND
11071: OR
11072: IFFALSE 11100
// if HasPowerByGameType ( mpGameType , i ) then
11074: LD_EXP 12
11078: PPUSH
11079: LD_VAR 0 2
11083: PPUSH
11084: CALL 10583 0 2
11088: IFFALSE 11100
// begin gameIsOn := true ;
11090: LD_ADDR_VAR 0 1
11094: PUSH
11095: LD_INT 1
11097: ST_TO_ADDR
// break ;
11098: GO 11102
// end ;
11100: GO 10979
11102: POP
11103: POP
// wait ( 100 ) ;
11104: LD_INT 100
11106: PPUSH
11107: CALL_OW 67
// until not gameIsOn ;
11111: LD_VAR 0 1
11115: NOT
11116: IFFALSE 10958
// if IAmServer then
11118: CALL_OW 518
11122: IFFALSE 11131
// wait ( 0 0$3 ) ;
11124: LD_INT 105
11126: PPUSH
11127: CALL_OW 67
// if Multiplayer then
11131: LD_OWVAR 4
11135: IFFALSE 11143
// YouLostInMultiplayer else
11137: CALL_OW 107
11141: GO 11150
// YouLost (  ) ;
11143: LD_STRING 
11145: PPUSH
11146: CALL_OW 104
// end ;
11150: PPOPN 2
11152: END
// every 0 0$10 trigger mpRespawn marked mpActive do var i , j , tmp , spawn , sides ;
11153: LD_EXP 42
11157: IFFALSE 11533
11159: GO 11161
11161: DISABLE
11162: LD_INT 0
11164: PPUSH
11165: PPUSH
11166: PPUSH
11167: PPUSH
11168: PPUSH
// begin sides := [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 ] ;
11169: LD_ADDR_VAR 0 5
11173: PUSH
11174: LD_INT 1
11176: PUSH
11177: LD_INT 2
11179: PUSH
11180: LD_INT 3
11182: PUSH
11183: LD_INT 4
11185: PUSH
11186: LD_INT 5
11188: PUSH
11189: LD_INT 6
11191: PUSH
11192: LD_INT 7
11194: PUSH
11195: LD_INT 8
11197: PUSH
11198: EMPTY
11199: LIST
11200: LIST
11201: LIST
11202: LIST
11203: LIST
11204: LIST
11205: LIST
11206: LIST
11207: ST_TO_ADDR
// repeat wait ( 0 0$10 ) ;
11208: LD_INT 350
11210: PPUSH
11211: CALL_OW 67
// for i := 1 to 8 do
11215: LD_ADDR_VAR 0 1
11219: PUSH
11220: DOUBLE
11221: LD_INT 1
11223: DEC
11224: ST_TO_ADDR
11225: LD_INT 8
11227: PUSH
11228: FOR_TO
11229: IFFALSE 11503
// begin j := sides [ i ] ;
11231: LD_ADDR_VAR 0 2
11235: PUSH
11236: LD_VAR 0 5
11240: PUSH
11241: LD_VAR 0 1
11245: ARRAY
11246: ST_TO_ADDR
// if Count ( mpRespawnPull [ j ] ) and MultiplayerSideAlive ( j ) and HasPowerByGameType ( mpGameType , j ) then
11247: LD_EXP 49
11251: PUSH
11252: LD_VAR 0 2
11256: ARRAY
11257: PPUSH
11258: CALL 23637 0 1
11262: PUSH
11263: LD_VAR 0 2
11267: PPUSH
11268: CALL_OW 108
11272: AND
11273: PUSH
11274: LD_EXP 12
11278: PPUSH
11279: LD_VAR 0 2
11283: PPUSH
11284: CALL 10583 0 2
11288: AND
11289: IFFALSE 11501
// begin wait ( mpRespawn div 3 ) ;
11291: LD_EXP 42
11295: PUSH
11296: LD_INT 3
11298: DIV
11299: PPUSH
11300: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , j ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
11304: LD_ADDR_VAR 0 3
11308: PUSH
11309: LD_INT 22
11311: PUSH
11312: LD_VAR 0 2
11316: PUSH
11317: EMPTY
11318: LIST
11319: LIST
11320: PUSH
11321: LD_INT 50
11323: PUSH
11324: EMPTY
11325: LIST
11326: PUSH
11327: LD_INT 2
11329: PUSH
11330: LD_INT 30
11332: PUSH
11333: LD_INT 0
11335: PUSH
11336: EMPTY
11337: LIST
11338: LIST
11339: PUSH
11340: LD_INT 30
11342: PUSH
11343: LD_INT 1
11345: PUSH
11346: EMPTY
11347: LIST
11348: LIST
11349: PUSH
11350: EMPTY
11351: LIST
11352: LIST
11353: LIST
11354: PUSH
11355: EMPTY
11356: LIST
11357: LIST
11358: LIST
11359: PPUSH
11360: CALL_OW 69
11364: ST_TO_ADDR
// if not tmp or not MultiplayerSideAlive ( j ) or not HasPowerByGameType ( mpGameType , j ) then
11365: LD_VAR 0 3
11369: NOT
11370: PUSH
11371: LD_VAR 0 2
11375: PPUSH
11376: CALL_OW 108
11380: NOT
11381: OR
11382: PUSH
11383: LD_EXP 12
11387: PPUSH
11388: LD_VAR 0 2
11392: PPUSH
11393: CALL 10583 0 2
11397: NOT
11398: OR
11399: IFFALSE 11403
// continue ;
11401: GO 11228
// spawn := tmp [ 1 ] ;
11403: LD_ADDR_VAR 0 4
11407: PUSH
11408: LD_VAR 0 3
11412: PUSH
11413: LD_INT 1
11415: ARRAY
11416: ST_TO_ADDR
// PlaceUnitXYR ( mpRespawnPull [ j ] [ 1 ] , GetX ( spawn ) , GetY ( spawn ) , 32 , true ) ;
11417: LD_EXP 49
11421: PUSH
11422: LD_VAR 0 2
11426: ARRAY
11427: PUSH
11428: LD_INT 1
11430: ARRAY
11431: PPUSH
11432: LD_VAR 0 4
11436: PPUSH
11437: CALL_OW 250
11441: PPUSH
11442: LD_VAR 0 4
11446: PPUSH
11447: CALL_OW 251
11451: PPUSH
11452: LD_INT 32
11454: PPUSH
11455: LD_INT 1
11457: PPUSH
11458: CALL_OW 50
// mpRespawnPull := Replace ( mpRespawnPull , j , Delete ( mpRespawnPull [ j ] , 1 ) ) ;
11462: LD_ADDR_EXP 49
11466: PUSH
11467: LD_EXP 49
11471: PPUSH
11472: LD_VAR 0 2
11476: PPUSH
11477: LD_EXP 49
11481: PUSH
11482: LD_VAR 0 2
11486: ARRAY
11487: PPUSH
11488: LD_INT 1
11490: PPUSH
11491: CALL_OW 3
11495: PPUSH
11496: CALL_OW 1
11500: ST_TO_ADDR
// end ; end ;
11501: GO 11228
11503: POP
11504: POP
// sides := Reindex ( sides , 1 , 8 , true ) ;
11505: LD_ADDR_VAR 0 5
11509: PUSH
11510: LD_VAR 0 5
11514: PPUSH
11515: LD_INT 1
11517: PPUSH
11518: LD_INT 8
11520: PPUSH
11521: LD_INT 1
11523: PPUSH
11524: CALL 25915 0 4
11528: ST_TO_ADDR
// until false ;
11529: LD_INT 0
11531: IFFALSE 11208
// end ;
11533: PPOPN 5
11535: END
// every 0 0$1 marked mpActive do
11536: GO 11538
11538: DISABLE
// begin enable ;
11539: ENABLE
// if not mpDisplayStrings then
11540: LD_EXP 47
11544: NOT
11545: IFFALSE 11556
// begin display_strings := [ ] ;
11547: LD_ADDR_OWVAR 47
11551: PUSH
11552: EMPTY
11553: ST_TO_ADDR
// exit ;
11554: GO 11566
// end ; display_strings := mpDisplayStrings ;
11556: LD_ADDR_OWVAR 47
11560: PUSH
11561: LD_EXP 47
11565: ST_TO_ADDR
// end ; end_of_file
11566: END
// export function Multiplayer_UnitDestroyed ( un ) ; var i , ape , tag , class , area , nation , side , tmp ; begin
11567: LD_INT 0
11569: PPUSH
11570: PPUSH
11571: PPUSH
11572: PPUSH
11573: PPUSH
11574: PPUSH
11575: PPUSH
11576: PPUSH
11577: PPUSH
// if GetType ( un ) = unit_vehicle then
11578: LD_VAR 0 1
11582: PPUSH
11583: CALL_OW 247
11587: PUSH
11588: LD_INT 2
11590: EQUAL
11591: IFFALSE 11595
// exit ;
11593: GO 12227
// side := GetSide ( un ) ;
11595: LD_ADDR_VAR 0 9
11599: PUSH
11600: LD_VAR 0 1
11604: PPUSH
11605: CALL_OW 255
11609: ST_TO_ADDR
// if mpGameType = GameTypeSurvival then
11610: LD_EXP 12
11614: PUSH
11615: LD_INT 2
11617: EQUAL
11618: IFFALSE 11694
// if GetBType ( un ) in [ b_depot , b_warehouse ] then
11620: LD_VAR 0 1
11624: PPUSH
11625: CALL_OW 266
11629: PUSH
11630: LD_INT 0
11632: PUSH
11633: LD_INT 1
11635: PUSH
11636: EMPTY
11637: LIST
11638: LIST
11639: IN
11640: IFFALSE 11694
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_human ] ] ) do
11642: LD_ADDR_VAR 0 3
11646: PUSH
11647: LD_INT 22
11649: PUSH
11650: LD_VAR 0 9
11654: PUSH
11655: EMPTY
11656: LIST
11657: LIST
11658: PUSH
11659: LD_INT 21
11661: PUSH
11662: LD_INT 1
11664: PUSH
11665: EMPTY
11666: LIST
11667: LIST
11668: PUSH
11669: EMPTY
11670: LIST
11671: LIST
11672: PPUSH
11673: CALL_OW 69
11677: PUSH
11678: FOR_IN
11679: IFFALSE 11692
// KillUnit ( i ) ;
11681: LD_VAR 0 3
11685: PPUSH
11686: CALL_OW 66
11690: GO 11678
11692: POP
11693: POP
// end ; if GetClass ( un ) in [ class_apeman , class_apeman_kamikaze , class_apeman_soldier , class_apeman_engineer ] or GetControl ( un ) = control_apeman then
11694: LD_VAR 0 1
11698: PPUSH
11699: CALL_OW 257
11703: PUSH
11704: LD_INT 12
11706: PUSH
11707: LD_INT 17
11709: PUSH
11710: LD_INT 15
11712: PUSH
11713: LD_INT 16
11715: PUSH
11716: EMPTY
11717: LIST
11718: LIST
11719: LIST
11720: LIST
11721: IN
11722: PUSH
11723: LD_VAR 0 1
11727: PPUSH
11728: CALL_OW 263
11732: PUSH
11733: LD_INT 5
11735: EQUAL
11736: OR
11737: IFFALSE 11956
// begin tag := 0 ;
11739: LD_ADDR_VAR 0 5
11743: PUSH
11744: LD_INT 0
11746: ST_TO_ADDR
// for i := 1 to 8 do
11747: LD_ADDR_VAR 0 3
11751: PUSH
11752: DOUBLE
11753: LD_INT 1
11755: DEC
11756: ST_TO_ADDR
11757: LD_INT 8
11759: PUSH
11760: FOR_TO
11761: IFFALSE 11795
// if un in mpApePosIndex [ i ] then
11763: LD_VAR 0 1
11767: PUSH
11768: LD_EXP 41
11772: PUSH
11773: LD_VAR 0 3
11777: ARRAY
11778: IN
11779: IFFALSE 11793
// begin tag := i ;
11781: LD_ADDR_VAR 0 5
11785: PUSH
11786: LD_VAR 0 3
11790: ST_TO_ADDR
// break ;
11791: GO 11795
// end ;
11793: GO 11760
11795: POP
11796: POP
// if not tag then
11797: LD_VAR 0 5
11801: NOT
11802: IFFALSE 11806
// exit ;
11804: GO 12227
// area := mpApemansArea [ mpSidePositions [ tag ] ] ;
11806: LD_ADDR_VAR 0 7
11810: PUSH
11811: LD_EXP 40
11815: PUSH
11816: LD_EXP 16
11820: PUSH
11821: LD_VAR 0 5
11825: ARRAY
11826: ARRAY
11827: ST_TO_ADDR
// if not area then
11828: LD_VAR 0 7
11832: NOT
11833: IFFALSE 11837
// exit ;
11835: GO 12227
// wait ( 4 4$00 ) ;
11837: LD_INT 8400
11839: PPUSH
11840: CALL_OW 67
// repeat wait ( 10 ) ;
11844: LD_INT 10
11846: PPUSH
11847: CALL_OW 67
// until not mpBlockRespThread ;
11851: LD_EXP 54
11855: NOT
11856: IFFALSE 11844
// mpBlockRespThread := true ;
11858: LD_ADDR_EXP 54
11862: PUSH
11863: LD_INT 1
11865: ST_TO_ADDR
// PrepareApeman ( 0 ) ;
11866: LD_INT 0
11868: PPUSH
11869: CALL 55494 0 1
// ape := CreateHuman ;
11873: LD_ADDR_VAR 0 4
11877: PUSH
11878: CALL_OW 44
11882: ST_TO_ADDR
// mpApePosIndex := Replace ( mpApePosIndex , tag , Join ( mpApePosIndex [ tag ] , ape ) ) ;
11883: LD_ADDR_EXP 41
11887: PUSH
11888: LD_EXP 41
11892: PPUSH
11893: LD_VAR 0 5
11897: PPUSH
11898: LD_EXP 41
11902: PUSH
11903: LD_VAR 0 5
11907: ARRAY
11908: PPUSH
11909: LD_VAR 0 4
11913: PPUSH
11914: CALL 59246 0 2
11918: PPUSH
11919: CALL_OW 1
11923: ST_TO_ADDR
// PlaceUnitArea ( ape , area , false ) ;
11924: LD_VAR 0 4
11928: PPUSH
11929: LD_VAR 0 7
11933: PPUSH
11934: LD_INT 0
11936: PPUSH
11937: CALL_OW 49
// wait ( 10 ) ;
11941: LD_INT 10
11943: PPUSH
11944: CALL_OW 67
// mpBlockRespThread := false ;
11948: LD_ADDR_EXP 54
11952: PUSH
11953: LD_INT 0
11955: ST_TO_ADDR
// end ; if GetType ( un ) = unit_human and GetNation ( un ) > nation_nature then
11956: LD_VAR 0 1
11960: PPUSH
11961: CALL_OW 247
11965: PUSH
11966: LD_INT 1
11968: EQUAL
11969: PUSH
11970: LD_VAR 0 1
11974: PPUSH
11975: CALL_OW 248
11979: PUSH
11980: LD_INT 0
11982: GREATER
11983: AND
11984: IFFALSE 12227
// begin if not mpRespawn then
11986: LD_EXP 42
11990: NOT
11991: IFFALSE 11995
// exit ;
11993: GO 12227
// if not MultiplayerSideAlive ( side ) and not HasPowerByGameType ( mpGameType , side ) then
11995: LD_VAR 0 9
11999: PPUSH
12000: CALL_OW 108
12004: NOT
12005: PUSH
12006: LD_EXP 12
12010: PPUSH
12011: LD_VAR 0 9
12015: PPUSH
12016: CALL 10583 0 2
12020: NOT
12021: AND
12022: IFFALSE 12026
// exit ;
12024: GO 12227
// side := GetSide ( un ) ;
12026: LD_ADDR_VAR 0 9
12030: PUSH
12031: LD_VAR 0 1
12035: PPUSH
12036: CALL_OW 255
12040: ST_TO_ADDR
// nation := GetNation ( un ) ;
12041: LD_ADDR_VAR 0 8
12045: PUSH
12046: LD_VAR 0 1
12050: PPUSH
12051: CALL_OW 248
12055: ST_TO_ADDR
// class := GetClass ( un ) ;
12056: LD_ADDR_VAR 0 6
12060: PUSH
12061: LD_VAR 0 1
12065: PPUSH
12066: CALL_OW 257
12070: ST_TO_ADDR
// if class > 4 then
12071: LD_VAR 0 6
12075: PUSH
12076: LD_INT 4
12078: GREATER
12079: IFFALSE 12089
// class := 1 ;
12081: LD_ADDR_VAR 0 6
12085: PUSH
12086: LD_INT 1
12088: ST_TO_ADDR
// repeat wait ( 10 ) ;
12089: LD_INT 10
12091: PPUSH
12092: CALL_OW 67
// until not mpBlockRespThread ;
12096: LD_EXP 54
12100: NOT
12101: IFFALSE 12089
// mpBlockRespThread := true ;
12103: LD_ADDR_EXP 54
12107: PUSH
12108: LD_INT 1
12110: ST_TO_ADDR
// uc_side := side ;
12111: LD_ADDR_OWVAR 20
12115: PUSH
12116: LD_VAR 0 9
12120: ST_TO_ADDR
// uc_nation := nation ;
12121: LD_ADDR_OWVAR 21
12125: PUSH
12126: LD_VAR 0 8
12130: ST_TO_ADDR
// PrepareHuman ( false , class , 2 ) ;
12131: LD_INT 0
12133: PPUSH
12134: LD_VAR 0 6
12138: PPUSH
12139: LD_INT 2
12141: PPUSH
12142: CALL_OW 380
// un := CreateHuman ;
12146: LD_ADDR_VAR 0 1
12150: PUSH
12151: CALL_OW 44
12155: ST_TO_ADDR
// mpRespawnPull := Replace ( mpRespawnPull , side , Replace ( mpRespawnPull [ side ] , mpRespawnPull [ side ] + 1 , un ) ) ;
12156: LD_ADDR_EXP 49
12160: PUSH
12161: LD_EXP 49
12165: PPUSH
12166: LD_VAR 0 9
12170: PPUSH
12171: LD_EXP 49
12175: PUSH
12176: LD_VAR 0 9
12180: ARRAY
12181: PPUSH
12182: LD_EXP 49
12186: PUSH
12187: LD_VAR 0 9
12191: ARRAY
12192: PUSH
12193: LD_INT 1
12195: PLUS
12196: PPUSH
12197: LD_VAR 0 1
12201: PPUSH
12202: CALL_OW 1
12206: PPUSH
12207: CALL_OW 1
12211: ST_TO_ADDR
// wait ( 10 ) ;
12212: LD_INT 10
12214: PPUSH
12215: CALL_OW 67
// mpBlockRespThread := false ;
12219: LD_ADDR_EXP 54
12223: PUSH
12224: LD_INT 0
12226: ST_TO_ADDR
// end ; end ;
12227: LD_VAR 0 2
12231: RET
// export function Multiplayer_BuildingComplete ( building ) ; begin
12232: LD_INT 0
12234: PPUSH
// if GetBType ( building ) in [ b_depot , b_warehouse ] then
12235: LD_VAR 0 1
12239: PPUSH
12240: CALL_OW 266
12244: PUSH
12245: LD_INT 0
12247: PUSH
12248: LD_INT 1
12250: PUSH
12251: EMPTY
12252: LIST
12253: LIST
12254: IN
12255: IFFALSE 12280
// SetBName ( building , @ & GetSide ( building ) ) ;
12257: LD_VAR 0 1
12261: PPUSH
12262: LD_STRING @
12264: PUSH
12265: LD_VAR 0 1
12269: PPUSH
12270: CALL_OW 255
12274: STR
12275: PPUSH
12276: CALL_OW 500
// end ;
12280: LD_VAR 0 2
12284: RET
// export function Multiplayer_BuildingCaptured ( building , oldSide , unit ) ; var i ; begin
12285: LD_INT 0
12287: PPUSH
12288: PPUSH
// if mpGameType = GameTypeSurvival and GetBType ( building ) in [ b_depot , b_warehouse ] then
12289: LD_EXP 12
12293: PUSH
12294: LD_INT 2
12296: EQUAL
12297: PUSH
12298: LD_VAR 0 1
12302: PPUSH
12303: CALL_OW 266
12307: PUSH
12308: LD_INT 0
12310: PUSH
12311: LD_INT 1
12313: PUSH
12314: EMPTY
12315: LIST
12316: LIST
12317: IN
12318: AND
12319: IFFALSE 12384
// begin KillUnit ( building ) ;
12321: LD_VAR 0 1
12325: PPUSH
12326: CALL_OW 66
// for i in FilterAllUnits ( [ [ f_side , oldSide ] , [ f_type , unit_human ] ] ) do
12330: LD_ADDR_VAR 0 5
12334: PUSH
12335: LD_INT 22
12337: PUSH
12338: LD_VAR 0 2
12342: PUSH
12343: EMPTY
12344: LIST
12345: LIST
12346: PUSH
12347: LD_INT 21
12349: PUSH
12350: LD_INT 1
12352: PUSH
12353: EMPTY
12354: LIST
12355: LIST
12356: PUSH
12357: EMPTY
12358: LIST
12359: LIST
12360: PPUSH
12361: CALL_OW 69
12365: PUSH
12366: FOR_IN
12367: IFFALSE 12380
// KillUnit ( i ) ;
12369: LD_VAR 0 5
12373: PPUSH
12374: CALL_OW 66
12378: GO 12366
12380: POP
12381: POP
// exit ;
12382: GO 12429
// end ; if GetBType ( building ) in [ b_depot , b_warehouse ] then
12384: LD_VAR 0 1
12388: PPUSH
12389: CALL_OW 266
12393: PUSH
12394: LD_INT 0
12396: PUSH
12397: LD_INT 1
12399: PUSH
12400: EMPTY
12401: LIST
12402: LIST
12403: IN
12404: IFFALSE 12429
// SetBName ( building , @ & GetSide ( building ) ) ;
12406: LD_VAR 0 1
12410: PPUSH
12411: LD_STRING @
12413: PUSH
12414: LD_VAR 0 1
12418: PPUSH
12419: CALL_OW 255
12423: STR
12424: PPUSH
12425: CALL_OW 500
// end ;
12429: LD_VAR 0 4
12433: RET
// export function Multiplayer_OilExtracted ( building , side , base , amount ) ; var i , value ; begin
12434: LD_INT 0
12436: PPUSH
12437: PPUSH
12438: PPUSH
// if mpGameType <> GameTypeFamine then
12439: LD_EXP 12
12443: PUSH
12444: LD_INT 5
12446: NONEQUAL
12447: IFFALSE 12451
// exit ;
12449: GO 12665
// for i := 1 to mpGlobalOilDeposits do
12451: LD_ADDR_VAR 0 6
12455: PUSH
12456: DOUBLE
12457: LD_INT 1
12459: DEC
12460: ST_TO_ADDR
12461: LD_EXP 50
12465: PUSH
12466: FOR_TO
12467: IFFALSE 12663
// begin if HexInfo ( mpGlobalOilDeposits [ i ] [ 1 ] , mpGlobalOilDeposits [ i ] [ 2 ] ) = building then
12469: LD_EXP 50
12473: PUSH
12474: LD_VAR 0 6
12478: ARRAY
12479: PUSH
12480: LD_INT 1
12482: ARRAY
12483: PPUSH
12484: LD_EXP 50
12488: PUSH
12489: LD_VAR 0 6
12493: ARRAY
12494: PUSH
12495: LD_INT 2
12497: ARRAY
12498: PPUSH
12499: CALL_OW 428
12503: PUSH
12504: LD_VAR 0 1
12508: EQUAL
12509: IFFALSE 12661
// begin value := mpGlobalOilDeposits [ i ] [ 3 ] ;
12511: LD_ADDR_VAR 0 7
12515: PUSH
12516: LD_EXP 50
12520: PUSH
12521: LD_VAR 0 6
12525: ARRAY
12526: PUSH
12527: LD_INT 3
12529: ARRAY
12530: ST_TO_ADDR
// value := Dec ( value ) ;
12531: LD_ADDR_VAR 0 7
12535: PUSH
12536: LD_VAR 0 7
12540: PPUSH
12541: CALL 60629 0 1
12545: ST_TO_ADDR
// mpGlobalOilDeposits := Replace ( mpGlobalOilDeposits , i , Replace ( mpGlobalOilDeposits [ i ] , 3 , value ) ) ;
12546: LD_ADDR_EXP 50
12550: PUSH
12551: LD_EXP 50
12555: PPUSH
12556: LD_VAR 0 6
12560: PPUSH
12561: LD_EXP 50
12565: PUSH
12566: LD_VAR 0 6
12570: ARRAY
12571: PPUSH
12572: LD_INT 3
12574: PPUSH
12575: LD_VAR 0 7
12579: PPUSH
12580: CALL_OW 1
12584: PPUSH
12585: CALL_OW 1
12589: ST_TO_ADDR
// SetUnitDisplayNumber ( building , value ) ;
12590: LD_VAR 0 1
12594: PPUSH
12595: LD_VAR 0 7
12599: PPUSH
12600: CALL_OW 505
// if value = 0 then
12604: LD_VAR 0 7
12608: PUSH
12609: LD_INT 0
12611: EQUAL
12612: IFFALSE 12661
// begin RemoveDepositXY ( mpGlobalOilDeposits [ i ] [ 1 ] , mpGlobalOilDeposits [ i ] [ 2 ] ) ;
12614: LD_EXP 50
12618: PUSH
12619: LD_VAR 0 6
12623: ARRAY
12624: PUSH
12625: LD_INT 1
12627: ARRAY
12628: PPUSH
12629: LD_EXP 50
12633: PUSH
12634: LD_VAR 0 6
12638: ARRAY
12639: PUSH
12640: LD_INT 2
12642: ARRAY
12643: PPUSH
12644: CALL_OW 63
// KillUnit ( building ) ;
12648: LD_VAR 0 1
12652: PPUSH
12653: CALL_OW 66
// exit ;
12657: POP
12658: POP
12659: GO 12665
// end ; end ; end ;
12661: GO 12466
12663: POP
12664: POP
// end ;
12665: LD_VAR 0 5
12669: RET
// export function Multiplayer_SibExtracted ( building , side , base , amount ) ; var i , value ; begin
12670: LD_INT 0
12672: PPUSH
12673: PPUSH
12674: PPUSH
// if mpGameType <> GameTypeFamine then
12675: LD_EXP 12
12679: PUSH
12680: LD_INT 5
12682: NONEQUAL
12683: IFFALSE 12687
// exit ;
12685: GO 12901
// for i := 1 to mpGlobalSibDeposits do
12687: LD_ADDR_VAR 0 6
12691: PUSH
12692: DOUBLE
12693: LD_INT 1
12695: DEC
12696: ST_TO_ADDR
12697: LD_EXP 51
12701: PUSH
12702: FOR_TO
12703: IFFALSE 12899
// begin if HexInfo ( mpGlobalSibDeposits [ i ] [ 1 ] , mpGlobalSibDeposits [ i ] [ 2 ] ) = building then
12705: LD_EXP 51
12709: PUSH
12710: LD_VAR 0 6
12714: ARRAY
12715: PUSH
12716: LD_INT 1
12718: ARRAY
12719: PPUSH
12720: LD_EXP 51
12724: PUSH
12725: LD_VAR 0 6
12729: ARRAY
12730: PUSH
12731: LD_INT 2
12733: ARRAY
12734: PPUSH
12735: CALL_OW 428
12739: PUSH
12740: LD_VAR 0 1
12744: EQUAL
12745: IFFALSE 12897
// begin value := mpGlobalSibDeposits [ i ] [ 3 ] ;
12747: LD_ADDR_VAR 0 7
12751: PUSH
12752: LD_EXP 51
12756: PUSH
12757: LD_VAR 0 6
12761: ARRAY
12762: PUSH
12763: LD_INT 3
12765: ARRAY
12766: ST_TO_ADDR
// value := Dec ( value ) ;
12767: LD_ADDR_VAR 0 7
12771: PUSH
12772: LD_VAR 0 7
12776: PPUSH
12777: CALL 60629 0 1
12781: ST_TO_ADDR
// mpGlobalSibDeposits := Replace ( mpGlobalSibDeposits , i , Replace ( mpGlobalSibDeposits [ i ] , 3 , value ) ) ;
12782: LD_ADDR_EXP 51
12786: PUSH
12787: LD_EXP 51
12791: PPUSH
12792: LD_VAR 0 6
12796: PPUSH
12797: LD_EXP 51
12801: PUSH
12802: LD_VAR 0 6
12806: ARRAY
12807: PPUSH
12808: LD_INT 3
12810: PPUSH
12811: LD_VAR 0 7
12815: PPUSH
12816: CALL_OW 1
12820: PPUSH
12821: CALL_OW 1
12825: ST_TO_ADDR
// SetUnitDisplayNumber ( building , value ) ;
12826: LD_VAR 0 1
12830: PPUSH
12831: LD_VAR 0 7
12835: PPUSH
12836: CALL_OW 505
// if value = 0 then
12840: LD_VAR 0 7
12844: PUSH
12845: LD_INT 0
12847: EQUAL
12848: IFFALSE 12897
// begin RemoveDepositXY ( mpGlobalSibDeposits [ i ] [ 1 ] , mpGlobalSibDeposits [ i ] [ 2 ] ) ;
12850: LD_EXP 51
12854: PUSH
12855: LD_VAR 0 6
12859: ARRAY
12860: PUSH
12861: LD_INT 1
12863: ARRAY
12864: PPUSH
12865: LD_EXP 51
12869: PUSH
12870: LD_VAR 0 6
12874: ARRAY
12875: PUSH
12876: LD_INT 2
12878: ARRAY
12879: PPUSH
12880: CALL_OW 63
// KillUnit ( building ) ;
12884: LD_VAR 0 1
12888: PPUSH
12889: CALL_OW 66
// exit ;
12893: POP
12894: POP
12895: GO 12901
// end ; end ; end ;
12897: GO 12702
12899: POP
12900: POP
// end ; end_of_file
12901: LD_VAR 0 5
12905: RET
// export mpKingPoints ; every 0 0$1 trigger mpGameActive marked GameTypeKing do var i , j , tmp ;
12906: LD_EXP 48
12910: IFFALSE 13251
12912: GO 12914
12914: DISABLE
12915: LD_INT 0
12917: PPUSH
12918: PPUSH
12919: PPUSH
// begin mpKingPoints := [ ] ;
12920: LD_ADDR_EXP 57
12924: PUSH
12925: EMPTY
12926: ST_TO_ADDR
// if mpTeamGame then
12927: LD_EXP 20
12931: IFFALSE 12985
// begin for i := 1 to Count ( mpTeams ) do
12933: LD_ADDR_VAR 0 1
12937: PUSH
12938: DOUBLE
12939: LD_INT 1
12941: DEC
12942: ST_TO_ADDR
12943: LD_EXP 19
12947: PPUSH
12948: CALL 23637 0 1
12952: PUSH
12953: FOR_TO
12954: IFFALSE 12981
// mpKingPoints := Replace ( mpKingPoints , i , 0 ) ;
12956: LD_ADDR_EXP 57
12960: PUSH
12961: LD_EXP 57
12965: PPUSH
12966: LD_VAR 0 1
12970: PPUSH
12971: LD_INT 0
12973: PPUSH
12974: CALL_OW 1
12978: ST_TO_ADDR
12979: GO 12953
12981: POP
12982: POP
// end else
12983: GO 13028
// begin for i := 1 to 8 do
12985: LD_ADDR_VAR 0 1
12989: PUSH
12990: DOUBLE
12991: LD_INT 1
12993: DEC
12994: ST_TO_ADDR
12995: LD_INT 8
12997: PUSH
12998: FOR_TO
12999: IFFALSE 13026
// mpKingPoints := Replace ( mpKingPoints , i , 0 ) ;
13001: LD_ADDR_EXP 57
13005: PUSH
13006: LD_EXP 57
13010: PPUSH
13011: LD_VAR 0 1
13015: PPUSH
13016: LD_INT 0
13018: PPUSH
13019: CALL_OW 1
13023: ST_TO_ADDR
13024: GO 12998
13026: POP
13027: POP
// end ; tmp := AreaToList ( kingCamArea , 0 ) ;
13028: LD_ADDR_VAR 0 3
13032: PUSH
13033: LD_EXP 2
13037: PPUSH
13038: LD_INT 0
13040: PPUSH
13041: CALL_OW 517
13045: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
13046: LD_ADDR_VAR 0 1
13050: PUSH
13051: DOUBLE
13052: LD_INT 1
13054: DEC
13055: ST_TO_ADDR
13056: LD_VAR 0 3
13060: PUSH
13061: LD_INT 1
13063: ARRAY
13064: PUSH
13065: FOR_TO
13066: IFFALSE 13133
// for j := 1 to 8 do
13068: LD_ADDR_VAR 0 2
13072: PUSH
13073: DOUBLE
13074: LD_INT 1
13076: DEC
13077: ST_TO_ADDR
13078: LD_INT 8
13080: PUSH
13081: FOR_TO
13082: IFFALSE 13129
// PlaceSeeing ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , j , - 12 ) ;
13084: LD_VAR 0 3
13088: PUSH
13089: LD_INT 1
13091: ARRAY
13092: PUSH
13093: LD_VAR 0 1
13097: ARRAY
13098: PPUSH
13099: LD_VAR 0 3
13103: PUSH
13104: LD_INT 2
13106: ARRAY
13107: PUSH
13108: LD_VAR 0 1
13112: ARRAY
13113: PPUSH
13114: LD_VAR 0 2
13118: PPUSH
13119: LD_INT 12
13121: NEG
13122: PPUSH
13123: CALL_OW 330
13127: GO 13081
13129: POP
13130: POP
13131: GO 13065
13133: POP
13134: POP
// SetAreaMapShow ( mpKingArea , 1 ) ;
13135: LD_EXP 43
13139: PPUSH
13140: LD_INT 1
13142: PPUSH
13143: CALL_OW 424
// UpdateCounter ;
13147: CALL 13755 0 0
// repeat wait ( 0 0$1 ) ;
13151: LD_INT 35
13153: PPUSH
13154: CALL_OW 67
// tmp := FilterUnitsInArea ( mpKingArea , [ [ f_not , [ f_constructed ] ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
13158: LD_ADDR_VAR 0 3
13162: PUSH
13163: LD_EXP 43
13167: PPUSH
13168: LD_INT 3
13170: PUSH
13171: LD_INT 57
13173: PUSH
13174: EMPTY
13175: LIST
13176: PUSH
13177: EMPTY
13178: LIST
13179: LIST
13180: PUSH
13181: LD_INT 50
13183: PUSH
13184: EMPTY
13185: LIST
13186: PUSH
13187: LD_INT 2
13189: PUSH
13190: LD_INT 30
13192: PUSH
13193: LD_INT 0
13195: PUSH
13196: EMPTY
13197: LIST
13198: LIST
13199: PUSH
13200: LD_INT 30
13202: PUSH
13203: LD_INT 1
13205: PUSH
13206: EMPTY
13207: LIST
13208: LIST
13209: PUSH
13210: EMPTY
13211: LIST
13212: LIST
13213: LIST
13214: PUSH
13215: EMPTY
13216: LIST
13217: LIST
13218: LIST
13219: PPUSH
13220: CALL_OW 70
13224: ST_TO_ADDR
// if not tmp then
13225: LD_VAR 0 3
13229: NOT
13230: IFFALSE 13234
// continue ;
13232: GO 13151
// AddPoints ( tmp ) ;
13234: LD_VAR 0 3
13238: PPUSH
13239: CALL 13433 0 1
// UpdateCounter ;
13243: CALL 13755 0 0
// until false ;
13247: LD_INT 0
13249: IFFALSE 13151
// end ;
13251: PPOPN 3
13253: END
// every 0 0$1 trigger mpGameActive and mpEmissions marked GameTypeKing do var i , tmp ;
13254: LD_EXP 48
13258: PUSH
13259: LD_EXP 46
13263: AND
13264: IFFALSE 13430
13266: GO 13268
13268: DISABLE
13269: LD_INT 0
13271: PPUSH
13272: PPUSH
// begin tmp := AreaToList ( kingCamArea , 0 ) ;
13273: LD_ADDR_VAR 0 2
13277: PUSH
13278: LD_EXP 2
13282: PPUSH
13283: LD_INT 0
13285: PPUSH
13286: CALL_OW 517
13290: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
13291: LD_ADDR_VAR 0 1
13295: PUSH
13296: DOUBLE
13297: LD_INT 1
13299: DEC
13300: ST_TO_ADDR
13301: LD_VAR 0 2
13305: PUSH
13306: LD_INT 1
13308: ARRAY
13309: PUSH
13310: FOR_TO
13311: IFFALSE 13352
// ArtContamination ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 125 ) ;
13313: LD_VAR 0 2
13317: PUSH
13318: LD_INT 1
13320: ARRAY
13321: PUSH
13322: LD_VAR 0 1
13326: ARRAY
13327: PPUSH
13328: LD_VAR 0 2
13332: PUSH
13333: LD_INT 2
13335: ARRAY
13336: PUSH
13337: LD_VAR 0 1
13341: ARRAY
13342: PPUSH
13343: LD_INT 125
13345: PPUSH
13346: CALL_OW 495
13350: GO 13310
13352: POP
13353: POP
// repeat wait ( mpEmissions ) ;
13354: LD_EXP 46
13358: PPUSH
13359: CALL_OW 67
// for i := 1 to tmp [ 1 ] do
13363: LD_ADDR_VAR 0 1
13367: PUSH
13368: DOUBLE
13369: LD_INT 1
13371: DEC
13372: ST_TO_ADDR
13373: LD_VAR 0 2
13377: PUSH
13378: LD_INT 1
13380: ARRAY
13381: PUSH
13382: FOR_TO
13383: IFFALSE 13424
// ArtContamination ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 15 ) ;
13385: LD_VAR 0 2
13389: PUSH
13390: LD_INT 1
13392: ARRAY
13393: PUSH
13394: LD_VAR 0 1
13398: ARRAY
13399: PPUSH
13400: LD_VAR 0 2
13404: PUSH
13405: LD_INT 2
13407: ARRAY
13408: PUSH
13409: LD_VAR 0 1
13413: ARRAY
13414: PPUSH
13415: LD_INT 15
13417: PPUSH
13418: CALL_OW 495
13422: GO 13382
13424: POP
13425: POP
// until false ;
13426: LD_INT 0
13428: IFFALSE 13354
// end ;
13430: PPOPN 2
13432: END
// function AddPoints ( depots ) ; var i , first , team , side ; begin
13433: LD_INT 0
13435: PPUSH
13436: PPUSH
13437: PPUSH
13438: PPUSH
13439: PPUSH
// if mpTeamGame then
13440: LD_EXP 20
13444: IFFALSE 13641
// begin first := depots [ 1 ] ;
13446: LD_ADDR_VAR 0 4
13450: PUSH
13451: LD_VAR 0 1
13455: PUSH
13456: LD_INT 1
13458: ARRAY
13459: ST_TO_ADDR
// side := GetSide ( first ) ;
13460: LD_ADDR_VAR 0 6
13464: PUSH
13465: LD_VAR 0 4
13469: PPUSH
13470: CALL_OW 255
13474: ST_TO_ADDR
// for i := 1 to mpTeams do
13475: LD_ADDR_VAR 0 3
13479: PUSH
13480: DOUBLE
13481: LD_INT 1
13483: DEC
13484: ST_TO_ADDR
13485: LD_EXP 19
13489: PUSH
13490: FOR_TO
13491: IFFALSE 13525
// if side in mpTeams [ i ] then
13493: LD_VAR 0 6
13497: PUSH
13498: LD_EXP 19
13502: PUSH
13503: LD_VAR 0 3
13507: ARRAY
13508: IN
13509: IFFALSE 13523
// begin team := i ;
13511: LD_ADDR_VAR 0 5
13515: PUSH
13516: LD_VAR 0 3
13520: ST_TO_ADDR
// break ;
13521: GO 13525
// end ;
13523: GO 13490
13525: POP
13526: POP
// if not team then
13527: LD_VAR 0 5
13531: NOT
13532: IFFALSE 13536
// exit ;
13534: GO 13750
// if FilterUnitsInArea ( mpKingArea , [ f_enemy , side ] ) then
13536: LD_EXP 43
13540: PPUSH
13541: LD_INT 81
13543: PUSH
13544: LD_VAR 0 6
13548: PUSH
13549: EMPTY
13550: LIST
13551: LIST
13552: PPUSH
13553: CALL_OW 70
13557: IFFALSE 13561
// exit ;
13559: GO 13750
// mpKingPoints := Replace ( mpKingPoints , team , mpKingPoints [ team ] + 1 ) ;
13561: LD_ADDR_EXP 57
13565: PUSH
13566: LD_EXP 57
13570: PPUSH
13571: LD_VAR 0 5
13575: PPUSH
13576: LD_EXP 57
13580: PUSH
13581: LD_VAR 0 5
13585: ARRAY
13586: PUSH
13587: LD_INT 1
13589: PLUS
13590: PPUSH
13591: CALL_OW 1
13595: ST_TO_ADDR
// for i in mpTeams [ team ] do
13596: LD_ADDR_VAR 0 3
13600: PUSH
13601: LD_EXP 19
13605: PUSH
13606: LD_VAR 0 5
13610: ARRAY
13611: PUSH
13612: FOR_IN
13613: IFFALSE 13637
// SetMultiScore ( i , mpKingPoints [ team ] ) ;
13615: LD_VAR 0 3
13619: PPUSH
13620: LD_EXP 57
13624: PUSH
13625: LD_VAR 0 5
13629: ARRAY
13630: PPUSH
13631: CALL_OW 506
13635: GO 13612
13637: POP
13638: POP
// end else
13639: GO 13750
// begin first := depots [ 1 ] ;
13641: LD_ADDR_VAR 0 4
13645: PUSH
13646: LD_VAR 0 1
13650: PUSH
13651: LD_INT 1
13653: ARRAY
13654: ST_TO_ADDR
// side := GetSide ( first ) ;
13655: LD_ADDR_VAR 0 6
13659: PUSH
13660: LD_VAR 0 4
13664: PPUSH
13665: CALL_OW 255
13669: ST_TO_ADDR
// if FilterUnitsInArea ( mpKingArea , [ f_enemy , side ] ) then
13670: LD_EXP 43
13674: PPUSH
13675: LD_INT 81
13677: PUSH
13678: LD_VAR 0 6
13682: PUSH
13683: EMPTY
13684: LIST
13685: LIST
13686: PPUSH
13687: CALL_OW 70
13691: IFFALSE 13695
// exit ;
13693: GO 13750
// mpKingPoints := Replace ( mpKingPoints , side , mpKingPoints [ side ] + 1 ) ;
13695: LD_ADDR_EXP 57
13699: PUSH
13700: LD_EXP 57
13704: PPUSH
13705: LD_VAR 0 6
13709: PPUSH
13710: LD_EXP 57
13714: PUSH
13715: LD_VAR 0 6
13719: ARRAY
13720: PUSH
13721: LD_INT 1
13723: PLUS
13724: PPUSH
13725: CALL_OW 1
13729: ST_TO_ADDR
// SetMultiScore ( side , mpKingPoints [ side ] ) ;
13730: LD_VAR 0 6
13734: PPUSH
13735: LD_EXP 57
13739: PUSH
13740: LD_VAR 0 6
13744: ARRAY
13745: PPUSH
13746: CALL_OW 506
// end ; end ;
13750: LD_VAR 0 2
13754: RET
// function UpdateCounter ; var i ; begin
13755: LD_INT 0
13757: PPUSH
13758: PPUSH
// result := [ ] ;
13759: LD_ADDR_VAR 0 1
13763: PUSH
13764: EMPTY
13765: ST_TO_ADDR
// if mpTeamGame then
13766: LD_EXP 20
13770: IFFALSE 13837
// begin for i := 1 to mpTeams do
13772: LD_ADDR_VAR 0 2
13776: PUSH
13777: DOUBLE
13778: LD_INT 1
13780: DEC
13781: ST_TO_ADDR
13782: LD_EXP 19
13786: PUSH
13787: FOR_TO
13788: IFFALSE 13833
// result := result ^ [ #KingoftheHill-Team , i , mpKingPoints [ i ] , mpPoints ] ;
13790: LD_ADDR_VAR 0 1
13794: PUSH
13795: LD_VAR 0 1
13799: PUSH
13800: LD_STRING #KingoftheHill-Team
13802: PUSH
13803: LD_VAR 0 2
13807: PUSH
13808: LD_EXP 57
13812: PUSH
13813: LD_VAR 0 2
13817: ARRAY
13818: PUSH
13819: LD_EXP 44
13823: PUSH
13824: EMPTY
13825: LIST
13826: LIST
13827: LIST
13828: LIST
13829: ADD
13830: ST_TO_ADDR
13831: GO 13787
13833: POP
13834: POP
// end else
13835: GO 13910
// begin for i := 1 to 8 do
13837: LD_ADDR_VAR 0 2
13841: PUSH
13842: DOUBLE
13843: LD_INT 1
13845: DEC
13846: ST_TO_ADDR
13847: LD_INT 8
13849: PUSH
13850: FOR_TO
13851: IFFALSE 13908
// if mpSidePositions [ i ] then
13853: LD_EXP 16
13857: PUSH
13858: LD_VAR 0 2
13862: ARRAY
13863: IFFALSE 13906
// result := result ^ [ #KingoftheHill-Player , i , mpKingPoints [ i ] , mpPoints ] ;
13865: LD_ADDR_VAR 0 1
13869: PUSH
13870: LD_VAR 0 1
13874: PUSH
13875: LD_STRING #KingoftheHill-Player
13877: PUSH
13878: LD_VAR 0 2
13882: PUSH
13883: LD_EXP 57
13887: PUSH
13888: LD_VAR 0 2
13892: ARRAY
13893: PUSH
13894: LD_EXP 44
13898: PUSH
13899: EMPTY
13900: LIST
13901: LIST
13902: LIST
13903: LIST
13904: ADD
13905: ST_TO_ADDR
13906: GO 13850
13908: POP
13909: POP
// end ; mpDisplayStrings := result ;
13910: LD_ADDR_EXP 47
13914: PUSH
13915: LD_VAR 0 1
13919: ST_TO_ADDR
// end ;
13920: LD_VAR 0 1
13924: RET
// export function HowMuchPointsKing ( side ) ; begin
13925: LD_INT 0
13927: PPUSH
// result := HowMuchPoints ( side ) ;
13928: LD_ADDR_VAR 0 2
13932: PUSH
13933: LD_VAR 0 1
13937: PPUSH
13938: CALL 13948 0 1
13942: ST_TO_ADDR
// end ;
13943: LD_VAR 0 2
13947: RET
// function HowMuchPoints ( side ) ; var i ; begin
13948: LD_INT 0
13950: PPUSH
13951: PPUSH
// if mpTeamGame then
13952: LD_EXP 20
13956: IFFALSE 14025
// begin for i := 1 to Count ( mpTeams ) do
13958: LD_ADDR_VAR 0 3
13962: PUSH
13963: DOUBLE
13964: LD_INT 1
13966: DEC
13967: ST_TO_ADDR
13968: LD_EXP 19
13972: PPUSH
13973: CALL 23637 0 1
13977: PUSH
13978: FOR_TO
13979: IFFALSE 14021
// begin if side in mpTeams [ i ] then
13981: LD_VAR 0 1
13985: PUSH
13986: LD_EXP 19
13990: PUSH
13991: LD_VAR 0 3
13995: ARRAY
13996: IN
13997: IFFALSE 14019
// begin result := mpKingPoints [ i ] ;
13999: LD_ADDR_VAR 0 2
14003: PUSH
14004: LD_EXP 57
14008: PUSH
14009: LD_VAR 0 3
14013: ARRAY
14014: ST_TO_ADDR
// exit ;
14015: POP
14016: POP
14017: GO 14041
// end ; end ;
14019: GO 13978
14021: POP
14022: POP
// end else
14023: GO 14041
// result := mpKingPoints [ side ] ;
14025: LD_ADDR_VAR 0 2
14029: PUSH
14030: LD_EXP 57
14034: PUSH
14035: LD_VAR 0 1
14039: ARRAY
14040: ST_TO_ADDR
// end ;
14041: LD_VAR 0 2
14045: RET
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeKing do var i , canWin ;
14046: LD_EXP 48
14050: PUSH
14051: CALL 14373 0 0
14055: AND
14056: PUSH
14057: LD_OWVAR 4
14061: AND
14062: IFFALSE 14298
14064: GO 14066
14066: DISABLE
14067: LD_INT 0
14069: PPUSH
14070: PPUSH
// begin canWin := false ;
14071: LD_ADDR_VAR 0 2
14075: PUSH
14076: LD_INT 0
14078: ST_TO_ADDR
// if not HasPower ( your_side ) then
14079: LD_OWVAR 2
14083: PPUSH
14084: CALL 14413 0 1
14088: NOT
14089: IFFALSE 14100
// begin Multiplayer_Loose_Message ;
14091: CALL_OW 521
// enable ( mpLose ) ;
14095: LD_INT 102
14097: ENABLE_MARKED
// end else
14098: GO 14298
// begin canWin := ( HowMuchPoints ( your_side ) >= mpPoints and HasPower ( your_side ) ) or not EnemiesInGame ;
14100: LD_ADDR_VAR 0 2
14104: PUSH
14105: LD_OWVAR 2
14109: PPUSH
14110: CALL 13948 0 1
14114: PUSH
14115: LD_EXP 44
14119: GREATEREQUAL
14120: PUSH
14121: LD_OWVAR 2
14125: PPUSH
14126: CALL 14413 0 1
14130: AND
14131: PUSH
14132: CALL 14301 0 0
14136: NOT
14137: OR
14138: ST_TO_ADDR
// for i := 1 to 8 do
14139: LD_ADDR_VAR 0 1
14143: PUSH
14144: DOUBLE
14145: LD_INT 1
14147: DEC
14148: ST_TO_ADDR
14149: LD_INT 8
14151: PUSH
14152: FOR_TO
14153: IFFALSE 14284
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
14155: LD_EXP 16
14159: PUSH
14160: LD_VAR 0 1
14164: ARRAY
14165: PUSH
14166: LD_VAR 0 1
14170: PPUSH
14171: CALL_OW 108
14175: AND
14176: PUSH
14177: LD_VAR 0 1
14181: PUSH
14182: LD_OWVAR 2
14186: NONEQUAL
14187: AND
14188: IFFALSE 14282
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
14190: LD_EXP 17
14194: PUSH
14195: LD_VAR 0 1
14199: ARRAY
14200: NOT
14201: PUSH
14202: LD_EXP 17
14206: PUSH
14207: LD_VAR 0 1
14211: ARRAY
14212: PUSH
14213: LD_EXP 17
14217: PUSH
14218: LD_OWVAR 2
14222: ARRAY
14223: NONEQUAL
14224: PUSH
14225: LD_OWVAR 2
14229: PPUSH
14230: LD_VAR 0 1
14234: PPUSH
14235: CALL_OW 81
14239: PUSH
14240: LD_INT 1
14242: NONEQUAL
14243: AND
14244: OR
14245: IFFALSE 14282
// if HowMuchPoints ( i ) >= mpPoints and HasPower ( i ) then
14247: LD_VAR 0 1
14251: PPUSH
14252: CALL 13948 0 1
14256: PUSH
14257: LD_EXP 44
14261: GREATEREQUAL
14262: PUSH
14263: LD_VAR 0 1
14267: PPUSH
14268: CALL 14413 0 1
14272: AND
14273: IFFALSE 14282
// begin enable ( mpLose ) ;
14275: LD_INT 102
14277: ENABLE_MARKED
// exit ;
14278: POP
14279: POP
14280: GO 14298
// end ;
14282: GO 14152
14284: POP
14285: POP
// if canWin then
14286: LD_VAR 0 2
14290: IFFALSE 14297
// enable ( mpWin ) else
14292: LD_INT 101
14294: ENABLE_MARKED
14295: GO 14298
// enable ;
14297: ENABLE
// end ; end ;
14298: PPOPN 2
14300: END
// function EnemiesInGame ; var i ; begin
14301: LD_INT 0
14303: PPUSH
14304: PPUSH
// result := false ;
14305: LD_ADDR_VAR 0 1
14309: PUSH
14310: LD_INT 0
14312: ST_TO_ADDR
// for i := 1 to 8 do
14313: LD_ADDR_VAR 0 2
14317: PUSH
14318: DOUBLE
14319: LD_INT 1
14321: DEC
14322: ST_TO_ADDR
14323: LD_INT 8
14325: PUSH
14326: FOR_TO
14327: IFFALSE 14366
// if i <> your_side and HasPower ( i ) then
14329: LD_VAR 0 2
14333: PUSH
14334: LD_OWVAR 2
14338: NONEQUAL
14339: PUSH
14340: LD_VAR 0 2
14344: PPUSH
14345: CALL 14413 0 1
14349: AND
14350: IFFALSE 14364
// begin result := true ;
14352: LD_ADDR_VAR 0 1
14356: PUSH
14357: LD_INT 1
14359: ST_TO_ADDR
// exit ;
14360: POP
14361: POP
14362: GO 14368
// end ;
14364: GO 14326
14366: POP
14367: POP
// end ;
14368: LD_VAR 0 1
14372: RET
// function CanWinLoose ; begin
14373: LD_INT 0
14375: PPUSH
// result := true ;
14376: LD_ADDR_VAR 0 1
14380: PUSH
14381: LD_INT 1
14383: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
14384: CALL_OW 531
14388: PUSH
14389: CALL_OW 519
14393: PUSH
14394: LD_INT 1
14396: GREATER
14397: AND
14398: IFFALSE 14408
// result := false ;
14400: LD_ADDR_VAR 0 1
14404: PUSH
14405: LD_INT 0
14407: ST_TO_ADDR
// end ;
14408: LD_VAR 0 1
14412: RET
// function HasPower ( i ) ; begin
14413: LD_INT 0
14415: PPUSH
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
14416: LD_ADDR_VAR 0 2
14420: PUSH
14421: LD_INT 22
14423: PUSH
14424: LD_VAR 0 1
14428: PUSH
14429: EMPTY
14430: LIST
14431: LIST
14432: PUSH
14433: LD_INT 2
14435: PUSH
14436: LD_INT 21
14438: PUSH
14439: LD_INT 1
14441: PUSH
14442: EMPTY
14443: LIST
14444: LIST
14445: PUSH
14446: LD_INT 33
14448: PUSH
14449: LD_INT 3
14451: PUSH
14452: EMPTY
14453: LIST
14454: LIST
14455: PUSH
14456: LD_INT 33
14458: PUSH
14459: LD_INT 5
14461: PUSH
14462: EMPTY
14463: LIST
14464: LIST
14465: PUSH
14466: EMPTY
14467: LIST
14468: LIST
14469: LIST
14470: LIST
14471: PUSH
14472: EMPTY
14473: LIST
14474: LIST
14475: PPUSH
14476: CALL_OW 69
14480: ST_TO_ADDR
// end ; end_of_file
14481: LD_VAR 0 2
14485: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
14486: LD_VAR 0 1
14490: PUSH
14491: LD_INT 200
14493: DOUBLE
14494: GREATEREQUAL
14495: IFFALSE 14503
14497: LD_INT 299
14499: DOUBLE
14500: LESSEQUAL
14501: IFTRUE 14505
14503: GO 14537
14505: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
14506: LD_VAR 0 1
14510: PPUSH
14511: LD_VAR 0 2
14515: PPUSH
14516: LD_VAR 0 3
14520: PPUSH
14521: LD_VAR 0 4
14525: PPUSH
14526: LD_VAR 0 5
14530: PPUSH
14531: CALL 16752 0 5
14535: GO 14614
14537: LD_INT 300
14539: DOUBLE
14540: GREATEREQUAL
14541: IFFALSE 14549
14543: LD_INT 399
14545: DOUBLE
14546: LESSEQUAL
14547: IFTRUE 14551
14549: GO 14613
14551: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
14552: LD_VAR 0 1
14556: PPUSH
14557: LD_VAR 0 2
14561: PPUSH
14562: LD_VAR 0 3
14566: PPUSH
14567: LD_VAR 0 4
14571: PPUSH
14572: LD_VAR 0 5
14576: PPUSH
14577: LD_VAR 0 6
14581: PPUSH
14582: LD_VAR 0 7
14586: PPUSH
14587: LD_VAR 0 8
14591: PPUSH
14592: LD_VAR 0 9
14596: PPUSH
14597: LD_VAR 0 10
14601: PPUSH
14602: LD_VAR 0 11
14606: PPUSH
14607: CALL 15243 0 11
14611: GO 14614
14613: POP
// end ;
14614: PPOPN 11
14616: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
14617: LD_VAR 0 1
14621: PPUSH
14622: LD_VAR 0 2
14626: PPUSH
14627: LD_VAR 0 3
14631: PPUSH
14632: LD_VAR 0 4
14636: PPUSH
14637: LD_VAR 0 5
14641: PPUSH
14642: CALL 16137 0 5
// end ; end_of_file
14646: PPOPN 5
14648: END
// every 0 0$1 do
14649: GO 14651
14651: DISABLE
// begin enable ;
14652: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
14653: LD_STRING updateTimer(
14655: PUSH
14656: LD_OWVAR 1
14660: STR
14661: PUSH
14662: LD_STRING );
14664: STR
14665: PPUSH
14666: CALL_OW 559
// end ;
14670: END
// export function SOS_MapStart ( ) ; begin
14671: LD_INT 0
14673: PPUSH
// UpdateFactoryWaypoints ( ) ;
14674: CALL 15599 0 0
// UpdateWarehouseGatheringPoints ( ) ;
14678: CALL 15851 0 0
// ParseMultiDataToLua ( ) ;
14682: CALL 15998 0 0
// ToLua ( setSpecLogoNumber( & 2 & , & 1 & ) ) ;
14686: LD_STRING setSpecLogoNumber(
14688: PUSH
14689: LD_INT 2
14691: STR
14692: PUSH
14693: LD_STRING ,
14695: STR
14696: PUSH
14697: LD_INT 1
14699: STR
14700: PUSH
14701: LD_STRING )
14703: STR
14704: PPUSH
14705: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 3 & , & 2 & ) ) ;
14709: LD_STRING setSpecLogoNumber(
14711: PUSH
14712: LD_INT 3
14714: STR
14715: PUSH
14716: LD_STRING ,
14718: STR
14719: PUSH
14720: LD_INT 2
14722: STR
14723: PUSH
14724: LD_STRING )
14726: STR
14727: PPUSH
14728: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 4 & , & 3 & ) ) ;
14732: LD_STRING setSpecLogoNumber(
14734: PUSH
14735: LD_INT 4
14737: STR
14738: PUSH
14739: LD_STRING ,
14741: STR
14742: PUSH
14743: LD_INT 3
14745: STR
14746: PUSH
14747: LD_STRING )
14749: STR
14750: PPUSH
14751: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 5 & , & 4 & ) ) ;
14755: LD_STRING setSpecLogoNumber(
14757: PUSH
14758: LD_INT 5
14760: STR
14761: PUSH
14762: LD_STRING ,
14764: STR
14765: PUSH
14766: LD_INT 4
14768: STR
14769: PUSH
14770: LD_STRING )
14772: STR
14773: PPUSH
14774: CALL_OW 559
// end ;
14778: LD_VAR 0 1
14782: RET
// export function UpdateSpectatorBar ; var i , j , crates , oil , sib , people , base , bases ; begin
14783: LD_INT 0
14785: PPUSH
14786: PPUSH
14787: PPUSH
14788: PPUSH
14789: PPUSH
14790: PPUSH
14791: PPUSH
14792: PPUSH
14793: PPUSH
// for i := 1 to 8 do
14794: LD_ADDR_VAR 0 2
14798: PUSH
14799: DOUBLE
14800: LD_INT 1
14802: DEC
14803: ST_TO_ADDR
14804: LD_INT 8
14806: PUSH
14807: FOR_TO
14808: IFFALSE 15193
// begin if mpSidePositions [ i ] then
14810: LD_EXP 16
14814: PUSH
14815: LD_VAR 0 2
14819: ARRAY
14820: IFFALSE 15191
// begin people := Count ( FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) ) ;
14822: LD_ADDR_VAR 0 7
14826: PUSH
14827: LD_INT 22
14829: PUSH
14830: LD_VAR 0 2
14834: PUSH
14835: EMPTY
14836: LIST
14837: LIST
14838: PUSH
14839: LD_INT 21
14841: PUSH
14842: LD_INT 1
14844: PUSH
14845: EMPTY
14846: LIST
14847: LIST
14848: PUSH
14849: EMPTY
14850: LIST
14851: LIST
14852: PPUSH
14853: CALL_OW 69
14857: PPUSH
14858: CALL 23637 0 1
14862: ST_TO_ADDR
// bases := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
14863: LD_ADDR_VAR 0 9
14867: PUSH
14868: LD_INT 22
14870: PUSH
14871: LD_VAR 0 2
14875: PUSH
14876: EMPTY
14877: LIST
14878: LIST
14879: PUSH
14880: LD_INT 2
14882: PUSH
14883: LD_INT 30
14885: PUSH
14886: LD_INT 0
14888: PUSH
14889: EMPTY
14890: LIST
14891: LIST
14892: PUSH
14893: LD_INT 30
14895: PUSH
14896: LD_INT 1
14898: PUSH
14899: EMPTY
14900: LIST
14901: LIST
14902: PUSH
14903: EMPTY
14904: LIST
14905: LIST
14906: LIST
14907: PUSH
14908: EMPTY
14909: LIST
14910: LIST
14911: PPUSH
14912: CALL_OW 69
14916: ST_TO_ADDR
// crates := 0 ;
14917: LD_ADDR_VAR 0 4
14921: PUSH
14922: LD_INT 0
14924: ST_TO_ADDR
// oil := 0 ;
14925: LD_ADDR_VAR 0 5
14929: PUSH
14930: LD_INT 0
14932: ST_TO_ADDR
// sib := 0 ;
14933: LD_ADDR_VAR 0 6
14937: PUSH
14938: LD_INT 0
14940: ST_TO_ADDR
// if bases then
14941: LD_VAR 0 9
14945: IFFALSE 15051
// begin for j in bases do
14947: LD_ADDR_VAR 0 3
14951: PUSH
14952: LD_VAR 0 9
14956: PUSH
14957: FOR_IN
14958: IFFALSE 15049
// begin base := GetBase ( j ) ;
14960: LD_ADDR_VAR 0 8
14964: PUSH
14965: LD_VAR 0 3
14969: PPUSH
14970: CALL_OW 274
14974: ST_TO_ADDR
// crates := crates + GetResourceType ( base , mat_cans ) ;
14975: LD_ADDR_VAR 0 4
14979: PUSH
14980: LD_VAR 0 4
14984: PUSH
14985: LD_VAR 0 8
14989: PPUSH
14990: LD_INT 1
14992: PPUSH
14993: CALL_OW 275
14997: PLUS
14998: ST_TO_ADDR
// oil := oil + GetResourceType ( base , mat_oil ) ;
14999: LD_ADDR_VAR 0 5
15003: PUSH
15004: LD_VAR 0 5
15008: PUSH
15009: LD_VAR 0 8
15013: PPUSH
15014: LD_INT 2
15016: PPUSH
15017: CALL_OW 275
15021: PLUS
15022: ST_TO_ADDR
// sib := sib + GetResourceType ( base , mat_siberit ) ;
15023: LD_ADDR_VAR 0 6
15027: PUSH
15028: LD_VAR 0 6
15032: PUSH
15033: LD_VAR 0 8
15037: PPUSH
15038: LD_INT 3
15040: PPUSH
15041: CALL_OW 275
15045: PLUS
15046: ST_TO_ADDR
// end ;
15047: GO 14957
15049: POP
15050: POP
// end ; ToLua ( setSpecText( & i & , & 2 & , & crates & ) ) ;
15051: LD_STRING setSpecText(
15053: PUSH
15054: LD_VAR 0 2
15058: STR
15059: PUSH
15060: LD_STRING ,
15062: STR
15063: PUSH
15064: LD_INT 2
15066: STR
15067: PUSH
15068: LD_STRING ,
15070: STR
15071: PUSH
15072: LD_VAR 0 4
15076: STR
15077: PUSH
15078: LD_STRING )
15080: STR
15081: PPUSH
15082: CALL_OW 559
// ToLua ( setSpecText( & i & , & 3 & , & oil & ) ) ;
15086: LD_STRING setSpecText(
15088: PUSH
15089: LD_VAR 0 2
15093: STR
15094: PUSH
15095: LD_STRING ,
15097: STR
15098: PUSH
15099: LD_INT 3
15101: STR
15102: PUSH
15103: LD_STRING ,
15105: STR
15106: PUSH
15107: LD_VAR 0 5
15111: STR
15112: PUSH
15113: LD_STRING )
15115: STR
15116: PPUSH
15117: CALL_OW 559
// ToLua ( setSpecText( & i & , & 4 & , & sib & ) ) ;
15121: LD_STRING setSpecText(
15123: PUSH
15124: LD_VAR 0 2
15128: STR
15129: PUSH
15130: LD_STRING ,
15132: STR
15133: PUSH
15134: LD_INT 4
15136: STR
15137: PUSH
15138: LD_STRING ,
15140: STR
15141: PUSH
15142: LD_VAR 0 6
15146: STR
15147: PUSH
15148: LD_STRING )
15150: STR
15151: PPUSH
15152: CALL_OW 559
// ToLua ( setSpecText( & i & , & 5 & , & people & ) ) ;
15156: LD_STRING setSpecText(
15158: PUSH
15159: LD_VAR 0 2
15163: STR
15164: PUSH
15165: LD_STRING ,
15167: STR
15168: PUSH
15169: LD_INT 5
15171: STR
15172: PUSH
15173: LD_STRING ,
15175: STR
15176: PUSH
15177: LD_VAR 0 7
15181: STR
15182: PUSH
15183: LD_STRING )
15185: STR
15186: PPUSH
15187: CALL_OW 559
// end ; end ;
15191: GO 14807
15193: POP
15194: POP
// end ;
15195: LD_VAR 0 1
15199: RET
// every 20 + 0 0$5 trigger FilterAllUnits ( [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) do
15200: LD_INT 2
15202: PUSH
15203: LD_INT 30
15205: PUSH
15206: LD_INT 0
15208: PUSH
15209: EMPTY
15210: LIST
15211: LIST
15212: PUSH
15213: LD_INT 30
15215: PUSH
15216: LD_INT 1
15218: PUSH
15219: EMPTY
15220: LIST
15221: LIST
15222: PUSH
15223: EMPTY
15224: LIST
15225: LIST
15226: LIST
15227: PPUSH
15228: CALL_OW 69
15232: IFFALSE 15242
15234: GO 15236
15236: DISABLE
// begin enable ;
15237: ENABLE
// UpdateSpectatorBar ;
15238: CALL 14783 0 0
// end ;
15242: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
15243: LD_INT 0
15245: PPUSH
// end ;
15246: LD_VAR 0 12
15250: RET
// export factoryWaypoints , factoryWaypointsDrivers ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
15251: LD_INT 0
15253: PPUSH
15254: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
15255: LD_VAR 0 1
15259: NOT
15260: PUSH
15261: LD_VAR 0 2
15265: PPUSH
15266: LD_VAR 0 3
15270: PPUSH
15271: CALL_OW 488
15275: NOT
15276: OR
15277: PUSH
15278: LD_VAR 0 1
15282: PPUSH
15283: CALL_OW 266
15287: PUSH
15288: LD_INT 3
15290: NONEQUAL
15291: PUSH
15292: LD_VAR 0 1
15296: PPUSH
15297: CALL_OW 247
15301: PUSH
15302: LD_INT 1
15304: EQUAL
15305: NOT
15306: AND
15307: OR
15308: IFFALSE 15312
// exit ;
15310: GO 15594
// if GetType ( factory ) = unit_human then
15312: LD_VAR 0 1
15316: PPUSH
15317: CALL_OW 247
15321: PUSH
15322: LD_INT 1
15324: EQUAL
15325: IFFALSE 15342
// factory := IsInUnit ( factory ) ;
15327: LD_ADDR_VAR 0 1
15331: PUSH
15332: LD_VAR 0 1
15336: PPUSH
15337: CALL_OW 310
15341: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
15342: LD_VAR 0 1
15346: PPUSH
15347: CALL_OW 266
15351: PUSH
15352: LD_INT 3
15354: NONEQUAL
15355: IFFALSE 15359
// exit ;
15357: GO 15594
// for i := 1 to Count ( factoryWaypoints ) do
15359: LD_ADDR_VAR 0 5
15363: PUSH
15364: DOUBLE
15365: LD_INT 1
15367: DEC
15368: ST_TO_ADDR
15369: LD_EXP 58
15373: PPUSH
15374: CALL 23637 0 1
15378: PUSH
15379: FOR_TO
15380: IFFALSE 15542
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
15382: LD_VAR 0 2
15386: PPUSH
15387: LD_VAR 0 3
15391: PPUSH
15392: CALL_OW 428
15396: PUSH
15397: LD_EXP 58
15401: PUSH
15402: LD_VAR 0 5
15406: ARRAY
15407: PUSH
15408: LD_INT 2
15410: ARRAY
15411: EQUAL
15412: IFFALSE 15444
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
15414: LD_ADDR_EXP 58
15418: PUSH
15419: LD_EXP 58
15423: PPUSH
15424: LD_VAR 0 5
15428: PPUSH
15429: CALL_OW 3
15433: ST_TO_ADDR
// UpdateFactoryWaypoints ;
15434: CALL 15599 0 0
// exit ;
15438: POP
15439: POP
15440: GO 15594
// end else
15442: GO 15540
// if factory = factoryWaypoints [ i ] [ 2 ] then
15444: LD_VAR 0 1
15448: PUSH
15449: LD_EXP 58
15453: PUSH
15454: LD_VAR 0 5
15458: ARRAY
15459: PUSH
15460: LD_INT 2
15462: ARRAY
15463: EQUAL
15464: IFFALSE 15540
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
15466: LD_ADDR_EXP 58
15470: PUSH
15471: LD_EXP 58
15475: PPUSH
15476: LD_VAR 0 5
15480: PPUSH
15481: CALL_OW 3
15485: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
15486: LD_ADDR_EXP 58
15490: PUSH
15491: LD_EXP 58
15495: PPUSH
15496: LD_VAR 0 1
15500: PPUSH
15501: CALL_OW 255
15505: PUSH
15506: LD_VAR 0 1
15510: PUSH
15511: LD_VAR 0 2
15515: PUSH
15516: LD_VAR 0 3
15520: PUSH
15521: EMPTY
15522: LIST
15523: LIST
15524: LIST
15525: LIST
15526: PPUSH
15527: CALL 59246 0 2
15531: ST_TO_ADDR
// UpdateFactoryWaypoints ;
15532: CALL 15599 0 0
// exit ;
15536: POP
15537: POP
15538: GO 15594
// end ; end ;
15540: GO 15379
15542: POP
15543: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
15544: LD_ADDR_EXP 58
15548: PUSH
15549: LD_EXP 58
15553: PPUSH
15554: LD_VAR 0 1
15558: PPUSH
15559: CALL_OW 255
15563: PUSH
15564: LD_VAR 0 1
15568: PUSH
15569: LD_VAR 0 2
15573: PUSH
15574: LD_VAR 0 3
15578: PUSH
15579: EMPTY
15580: LIST
15581: LIST
15582: LIST
15583: LIST
15584: PPUSH
15585: CALL 59246 0 2
15589: ST_TO_ADDR
// UpdateFactoryWaypoints ;
15590: CALL 15599 0 0
// end ;
15594: LD_VAR 0 4
15598: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
15599: LD_INT 0
15601: PPUSH
15602: PPUSH
15603: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
15604: LD_STRING resetFactoryWaypoint();
15606: PPUSH
15607: CALL_OW 559
// if factoryWaypoints then
15611: LD_EXP 58
15615: IFFALSE 15736
// begin list := factoryWaypoints ;
15617: LD_ADDR_VAR 0 3
15621: PUSH
15622: LD_EXP 58
15626: ST_TO_ADDR
// for i := 1 to list do
15627: LD_ADDR_VAR 0 2
15631: PUSH
15632: DOUBLE
15633: LD_INT 1
15635: DEC
15636: ST_TO_ADDR
15637: LD_VAR 0 3
15641: PUSH
15642: FOR_TO
15643: IFFALSE 15734
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
15645: LD_STRING setFactoryWaypointXY(
15647: PUSH
15648: LD_VAR 0 3
15652: PUSH
15653: LD_VAR 0 2
15657: ARRAY
15658: PUSH
15659: LD_INT 1
15661: ARRAY
15662: STR
15663: PUSH
15664: LD_STRING ,
15666: STR
15667: PUSH
15668: LD_VAR 0 3
15672: PUSH
15673: LD_VAR 0 2
15677: ARRAY
15678: PUSH
15679: LD_INT 2
15681: ARRAY
15682: STR
15683: PUSH
15684: LD_STRING ,
15686: STR
15687: PUSH
15688: LD_VAR 0 3
15692: PUSH
15693: LD_VAR 0 2
15697: ARRAY
15698: PUSH
15699: LD_INT 3
15701: ARRAY
15702: STR
15703: PUSH
15704: LD_STRING ,
15706: STR
15707: PUSH
15708: LD_VAR 0 3
15712: PUSH
15713: LD_VAR 0 2
15717: ARRAY
15718: PUSH
15719: LD_INT 4
15721: ARRAY
15722: STR
15723: PUSH
15724: LD_STRING )
15726: STR
15727: PPUSH
15728: CALL_OW 559
15732: GO 15642
15734: POP
15735: POP
// end ; end ;
15736: LD_VAR 0 1
15740: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
15741: LD_INT 0
15743: PPUSH
// if HexInfo ( x , y ) = warehouse then
15744: LD_VAR 0 2
15748: PPUSH
15749: LD_VAR 0 3
15753: PPUSH
15754: CALL_OW 428
15758: PUSH
15759: LD_VAR 0 1
15763: EQUAL
15764: IFFALSE 15791
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
15766: LD_ADDR_EXP 60
15770: PUSH
15771: LD_EXP 60
15775: PPUSH
15776: LD_VAR 0 1
15780: PPUSH
15781: LD_INT 0
15783: PPUSH
15784: CALL_OW 1
15788: ST_TO_ADDR
15789: GO 15842
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
15791: LD_ADDR_EXP 60
15795: PUSH
15796: LD_EXP 60
15800: PPUSH
15801: LD_VAR 0 1
15805: PPUSH
15806: LD_VAR 0 1
15810: PPUSH
15811: CALL_OW 255
15815: PUSH
15816: LD_VAR 0 1
15820: PUSH
15821: LD_VAR 0 2
15825: PUSH
15826: LD_VAR 0 3
15830: PUSH
15831: EMPTY
15832: LIST
15833: LIST
15834: LIST
15835: LIST
15836: PPUSH
15837: CALL_OW 1
15841: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
15842: CALL 15851 0 0
// end ;
15846: LD_VAR 0 4
15850: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
15851: LD_INT 0
15853: PPUSH
15854: PPUSH
15855: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
15856: LD_STRING resetWarehouseGatheringPoints();
15858: PPUSH
15859: CALL_OW 559
// if warehouseGatheringPoints then
15863: LD_EXP 60
15867: IFFALSE 15993
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
15869: LD_ADDR_VAR 0 3
15873: PUSH
15874: LD_EXP 60
15878: PPUSH
15879: CALL 63014 0 1
15883: ST_TO_ADDR
// for i := 1 to list do
15884: LD_ADDR_VAR 0 2
15888: PUSH
15889: DOUBLE
15890: LD_INT 1
15892: DEC
15893: ST_TO_ADDR
15894: LD_VAR 0 3
15898: PUSH
15899: FOR_TO
15900: IFFALSE 15991
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
15902: LD_STRING setWarehouseGatheringPointXY(
15904: PUSH
15905: LD_VAR 0 3
15909: PUSH
15910: LD_VAR 0 2
15914: ARRAY
15915: PUSH
15916: LD_INT 1
15918: ARRAY
15919: STR
15920: PUSH
15921: LD_STRING ,
15923: STR
15924: PUSH
15925: LD_VAR 0 3
15929: PUSH
15930: LD_VAR 0 2
15934: ARRAY
15935: PUSH
15936: LD_INT 2
15938: ARRAY
15939: STR
15940: PUSH
15941: LD_STRING ,
15943: STR
15944: PUSH
15945: LD_VAR 0 3
15949: PUSH
15950: LD_VAR 0 2
15954: ARRAY
15955: PUSH
15956: LD_INT 3
15958: ARRAY
15959: STR
15960: PUSH
15961: LD_STRING ,
15963: STR
15964: PUSH
15965: LD_VAR 0 3
15969: PUSH
15970: LD_VAR 0 2
15974: ARRAY
15975: PUSH
15976: LD_INT 4
15978: ARRAY
15979: STR
15980: PUSH
15981: LD_STRING )
15983: STR
15984: PPUSH
15985: CALL_OW 559
15989: GO 15899
15991: POP
15992: POP
// end ; end ;
15993: LD_VAR 0 1
15997: RET
// function ParseMultiDataToLua ( ) ; var i ; begin
15998: LD_INT 0
16000: PPUSH
16001: PPUSH
// if not mpSidePositions then
16002: LD_EXP 16
16006: NOT
16007: IFFALSE 16011
// exit ;
16009: GO 16082
// result :=  ;
16011: LD_ADDR_VAR 0 1
16015: PUSH
16016: LD_STRING 
16018: ST_TO_ADDR
// for i := 1 to 8 do
16019: LD_ADDR_VAR 0 2
16023: PUSH
16024: DOUBLE
16025: LD_INT 1
16027: DEC
16028: ST_TO_ADDR
16029: LD_INT 8
16031: PUSH
16032: FOR_TO
16033: IFFALSE 16063
// begin result := result & mpSidePositions [ i ] & ; ;
16035: LD_ADDR_VAR 0 1
16039: PUSH
16040: LD_VAR 0 1
16044: PUSH
16045: LD_EXP 16
16049: PUSH
16050: LD_VAR 0 2
16054: ARRAY
16055: STR
16056: PUSH
16057: LD_STRING ;
16059: STR
16060: ST_TO_ADDR
// end ;
16061: GO 16032
16063: POP
16064: POP
// ToLua ( setMultiplayerRealPosition(" & result & "); ) ;
16065: LD_STRING setMultiplayerRealPosition("
16067: PUSH
16068: LD_VAR 0 1
16072: STR
16073: PUSH
16074: LD_STRING ");
16076: STR
16077: PPUSH
16078: CALL_OW 559
// end ; end_of_file
16082: LD_VAR 0 1
16086: RET
// export function SOS_UnitDestroyed ( un ) ; begin
16087: LD_INT 0
16089: PPUSH
// ComRadiation ( un ) ;
16090: LD_VAR 0 1
16094: PPUSH
16095: CALL 17156 0 1
// end ;
16099: LD_VAR 0 2
16103: RET
// export function SOS_UnitKamikazed ( un ) ; begin
16104: LD_INT 0
16106: PPUSH
// ComRadiation ( un ) ;
16107: LD_VAR 0 1
16111: PPUSH
16112: CALL 17156 0 1
// end ;
16116: LD_VAR 0 2
16120: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
16121: LD_INT 0
16123: PPUSH
// end ;
16124: LD_VAR 0 4
16128: RET
// export function SOS_Command ( cmd ) ; begin
16129: LD_INT 0
16131: PPUSH
// end ;
16132: LD_VAR 0 2
16136: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
16137: LD_INT 0
16139: PPUSH
// end ;
16140: LD_VAR 0 6
16144: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , driver , hex ; begin
16145: LD_INT 0
16147: PPUSH
16148: PPUSH
16149: PPUSH
16150: PPUSH
// if not vehicle or not factory then
16151: LD_VAR 0 1
16155: NOT
16156: PUSH
16157: LD_VAR 0 2
16161: NOT
16162: OR
16163: IFFALSE 16167
// exit ;
16165: GO 16747
// if not factoryWaypoints then
16167: LD_EXP 58
16171: NOT
16172: IFFALSE 16176
// exit ;
16174: GO 16747
// for i := 1 to Count ( factoryWaypoints ) do
16176: LD_ADDR_VAR 0 4
16180: PUSH
16181: DOUBLE
16182: LD_INT 1
16184: DEC
16185: ST_TO_ADDR
16186: LD_EXP 58
16190: PPUSH
16191: CALL 23637 0 1
16195: PUSH
16196: FOR_TO
16197: IFFALSE 16745
// if factoryWaypoints [ i ] [ 2 ] = factory then
16199: LD_EXP 58
16203: PUSH
16204: LD_VAR 0 4
16208: ARRAY
16209: PUSH
16210: LD_INT 2
16212: ARRAY
16213: PUSH
16214: LD_VAR 0 2
16218: EQUAL
16219: IFFALSE 16743
// begin if GetControl ( vehicle ) = control_manual then
16221: LD_VAR 0 1
16225: PPUSH
16226: CALL_OW 263
16230: PUSH
16231: LD_INT 1
16233: EQUAL
16234: IFFALSE 16596
// begin driver := IsDrivenBy ( vehicle ) ;
16236: LD_ADDR_VAR 0 5
16240: PUSH
16241: LD_VAR 0 1
16245: PPUSH
16246: CALL_OW 311
16250: ST_TO_ADDR
// if driver in factoryWaypointsDrivers or vehicle in factoryWaypointsDrivers then
16251: LD_VAR 0 5
16255: PUSH
16256: LD_EXP 59
16260: IN
16261: PUSH
16262: LD_VAR 0 1
16266: PUSH
16267: LD_EXP 59
16271: IN
16272: OR
16273: IFFALSE 16279
// exit ;
16275: POP
16276: POP
16277: GO 16747
// if not HasTask ( driver ) then
16279: LD_VAR 0 5
16283: PPUSH
16284: CALL_OW 314
16288: NOT
16289: IFFALSE 16594
// begin factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , driver ) ;
16291: LD_ADDR_EXP 59
16295: PUSH
16296: LD_EXP 59
16300: PPUSH
16301: LD_VAR 0 5
16305: PPUSH
16306: CALL 59246 0 2
16310: ST_TO_ADDR
// factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , vehicle ) ;
16311: LD_ADDR_EXP 59
16315: PUSH
16316: LD_EXP 59
16320: PPUSH
16321: LD_VAR 0 1
16325: PPUSH
16326: CALL 59246 0 2
16330: ST_TO_ADDR
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
16331: LD_ADDR_VAR 0 6
16335: PUSH
16336: LD_EXP 58
16340: PUSH
16341: LD_VAR 0 4
16345: ARRAY
16346: PUSH
16347: LD_INT 3
16349: ARRAY
16350: PPUSH
16351: LD_EXP 58
16355: PUSH
16356: LD_VAR 0 4
16360: ARRAY
16361: PUSH
16362: LD_INT 4
16364: ARRAY
16365: PPUSH
16366: CALL_OW 428
16370: ST_TO_ADDR
// if hex then
16371: LD_VAR 0 6
16375: IFFALSE 16393
// ComMoveUnit ( driver , hex ) else
16377: LD_VAR 0 5
16381: PPUSH
16382: LD_VAR 0 6
16386: PPUSH
16387: CALL_OW 112
16391: GO 16477
// if GetDistUnitXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) > 0 then
16393: LD_VAR 0 1
16397: PPUSH
16398: LD_EXP 58
16402: PUSH
16403: LD_VAR 0 4
16407: ARRAY
16408: PUSH
16409: LD_INT 3
16411: ARRAY
16412: PPUSH
16413: LD_EXP 58
16417: PUSH
16418: LD_VAR 0 4
16422: ARRAY
16423: PUSH
16424: LD_INT 4
16426: ARRAY
16427: PPUSH
16428: CALL_OW 297
16432: PUSH
16433: LD_INT 0
16435: GREATER
16436: IFFALSE 16477
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
16438: LD_VAR 0 5
16442: PPUSH
16443: LD_EXP 58
16447: PUSH
16448: LD_VAR 0 4
16452: ARRAY
16453: PUSH
16454: LD_INT 3
16456: ARRAY
16457: PPUSH
16458: LD_EXP 58
16462: PUSH
16463: LD_VAR 0 4
16467: ARRAY
16468: PUSH
16469: LD_INT 4
16471: ARRAY
16472: PPUSH
16473: CALL_OW 111
// AddComExitVehicle ( driver ) ;
16477: LD_VAR 0 5
16481: PPUSH
16482: CALL_OW 181
// if Multiplayer then
16486: LD_OWVAR 4
16490: IFFALSE 16539
// begin repeat wait ( 10 ) ;
16492: LD_INT 10
16494: PPUSH
16495: CALL_OW 67
// until not IsInUnit ( driver ) ;
16499: LD_VAR 0 5
16503: PPUSH
16504: CALL_OW 310
16508: NOT
16509: IFFALSE 16492
// if not HasTask ( driver ) then
16511: LD_VAR 0 5
16515: PPUSH
16516: CALL_OW 314
16520: NOT
16521: IFFALSE 16537
// ComEnterUnit ( driver , factory ) ;
16523: LD_VAR 0 5
16527: PPUSH
16528: LD_VAR 0 2
16532: PPUSH
16533: CALL_OW 120
// end else
16537: GO 16553
// AddComEnterUnit ( driver , factory ) ;
16539: LD_VAR 0 5
16543: PPUSH
16544: LD_VAR 0 2
16548: PPUSH
16549: CALL_OW 180
// wait ( 0 0$1 ) ;
16553: LD_INT 35
16555: PPUSH
16556: CALL_OW 67
// factoryWaypointsDrivers := factoryWaypointsDrivers diff driver ;
16560: LD_ADDR_EXP 59
16564: PUSH
16565: LD_EXP 59
16569: PUSH
16570: LD_VAR 0 5
16574: DIFF
16575: ST_TO_ADDR
// factoryWaypointsDrivers := factoryWaypointsDrivers diff vehicle ;
16576: LD_ADDR_EXP 59
16580: PUSH
16581: LD_EXP 59
16585: PUSH
16586: LD_VAR 0 1
16590: DIFF
16591: ST_TO_ADDR
// break ;
16592: GO 16745
// end ; end else
16594: GO 16743
// if GetControl ( vehicle ) = control_remote then
16596: LD_VAR 0 1
16600: PPUSH
16601: CALL_OW 263
16605: PUSH
16606: LD_INT 2
16608: EQUAL
16609: IFFALSE 16695
// begin wait ( 0 0$2 ) ;
16611: LD_INT 70
16613: PPUSH
16614: CALL_OW 67
// repeat wait ( 10 ) ;
16618: LD_INT 10
16620: PPUSH
16621: CALL_OW 67
// Connect ( vehicle ) ;
16625: LD_VAR 0 1
16629: PPUSH
16630: CALL 29843 0 1
// until IsControledBy ( vehicle ) ;
16634: LD_VAR 0 1
16638: PPUSH
16639: CALL_OW 312
16643: IFFALSE 16618
// wait ( 10 ) ;
16645: LD_INT 10
16647: PPUSH
16648: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
16652: LD_VAR 0 1
16656: PPUSH
16657: LD_EXP 58
16661: PUSH
16662: LD_VAR 0 4
16666: ARRAY
16667: PUSH
16668: LD_INT 3
16670: ARRAY
16671: PPUSH
16672: LD_EXP 58
16676: PUSH
16677: LD_VAR 0 4
16681: ARRAY
16682: PUSH
16683: LD_INT 4
16685: ARRAY
16686: PPUSH
16687: CALL_OW 111
// break ;
16691: GO 16745
// end else
16693: GO 16743
// begin wait ( 0 0$3 ) ;
16695: LD_INT 105
16697: PPUSH
16698: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
16702: LD_VAR 0 1
16706: PPUSH
16707: LD_EXP 58
16711: PUSH
16712: LD_VAR 0 4
16716: ARRAY
16717: PUSH
16718: LD_INT 3
16720: ARRAY
16721: PPUSH
16722: LD_EXP 58
16726: PUSH
16727: LD_VAR 0 4
16731: ARRAY
16732: PUSH
16733: LD_INT 4
16735: ARRAY
16736: PPUSH
16737: CALL_OW 111
// break ;
16741: GO 16745
// end ; end ;
16743: GO 16196
16745: POP
16746: POP
// end ;
16747: LD_VAR 0 3
16751: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
16752: LD_INT 0
16754: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
16755: LD_VAR 0 1
16759: PUSH
16760: LD_INT 250
16762: EQUAL
16763: PUSH
16764: LD_VAR 0 2
16768: PPUSH
16769: CALL_OW 264
16773: PUSH
16774: LD_INT 81
16776: EQUAL
16777: AND
16778: IFFALSE 16799
// MinerPlaceMine ( unit , x , y ) ;
16780: LD_VAR 0 2
16784: PPUSH
16785: LD_VAR 0 4
16789: PPUSH
16790: LD_VAR 0 5
16794: PPUSH
16795: CALL 19891 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
16799: LD_VAR 0 1
16803: PUSH
16804: LD_INT 251
16806: EQUAL
16807: PUSH
16808: LD_VAR 0 2
16812: PPUSH
16813: CALL_OW 264
16817: PUSH
16818: LD_INT 81
16820: EQUAL
16821: AND
16822: IFFALSE 16843
// MinerDetonateMine ( unit , x , y ) ;
16824: LD_VAR 0 2
16828: PPUSH
16829: LD_VAR 0 4
16833: PPUSH
16834: LD_VAR 0 5
16838: PPUSH
16839: CALL 20166 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
16843: LD_VAR 0 1
16847: PUSH
16848: LD_INT 252
16850: EQUAL
16851: PUSH
16852: LD_VAR 0 2
16856: PPUSH
16857: CALL_OW 264
16861: PUSH
16862: LD_INT 81
16864: EQUAL
16865: AND
16866: IFFALSE 16887
// MinerCreateMinefield ( unit , x , y ) ;
16868: LD_VAR 0 2
16872: PPUSH
16873: LD_VAR 0 4
16877: PPUSH
16878: LD_VAR 0 5
16882: PPUSH
16883: CALL 20583 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
16887: LD_VAR 0 1
16891: PUSH
16892: LD_INT 253
16894: EQUAL
16895: PUSH
16896: LD_VAR 0 2
16900: PPUSH
16901: CALL_OW 257
16905: PUSH
16906: LD_INT 5
16908: EQUAL
16909: AND
16910: IFFALSE 16931
// ComBinocular ( unit , x , y ) ;
16912: LD_VAR 0 2
16916: PPUSH
16917: LD_VAR 0 4
16921: PPUSH
16922: LD_VAR 0 5
16926: PPUSH
16927: CALL 20952 0 3
// if selectedUnit then
16931: LD_VAR 0 3
16935: IFFALSE 16991
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
16937: LD_VAR 0 1
16941: PUSH
16942: LD_INT 254
16944: EQUAL
16945: PUSH
16946: LD_VAR 0 2
16950: PPUSH
16951: CALL_OW 264
16955: PUSH
16956: LD_INT 99
16958: EQUAL
16959: AND
16960: PUSH
16961: LD_VAR 0 3
16965: PPUSH
16966: CALL_OW 263
16970: PUSH
16971: LD_INT 3
16973: EQUAL
16974: AND
16975: IFFALSE 16991
// HackDestroyVehicle ( unit , selectedUnit ) ;
16977: LD_VAR 0 2
16981: PPUSH
16982: LD_VAR 0 3
16986: PPUSH
16987: CALL 19255 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
16991: LD_VAR 0 1
16995: PUSH
16996: LD_INT 255
16998: EQUAL
16999: PUSH
17000: LD_VAR 0 2
17004: PPUSH
17005: CALL_OW 264
17009: PUSH
17010: LD_INT 14
17012: PUSH
17013: LD_INT 53
17015: PUSH
17016: EMPTY
17017: LIST
17018: LIST
17019: IN
17020: AND
17021: PUSH
17022: LD_VAR 0 4
17026: PPUSH
17027: LD_VAR 0 5
17031: PPUSH
17032: CALL_OW 488
17036: AND
17037: IFFALSE 17061
// CutTreeXYR ( unit , x , y , 12 ) ;
17039: LD_VAR 0 2
17043: PPUSH
17044: LD_VAR 0 4
17048: PPUSH
17049: LD_VAR 0 5
17053: PPUSH
17054: LD_INT 12
17056: PPUSH
17057: CALL 17252 0 4
// if cmd = 256 then
17061: LD_VAR 0 1
17065: PUSH
17066: LD_INT 256
17068: EQUAL
17069: IFFALSE 17090
// SetFactoryWaypoint ( unit , x , y ) ;
17071: LD_VAR 0 2
17075: PPUSH
17076: LD_VAR 0 4
17080: PPUSH
17081: LD_VAR 0 5
17085: PPUSH
17086: CALL 15251 0 3
// if cmd = 257 then
17090: LD_VAR 0 1
17094: PUSH
17095: LD_INT 257
17097: EQUAL
17098: IFFALSE 17119
// SetWarehouseGatheringPoint ( unit , x , y ) ;
17100: LD_VAR 0 2
17104: PPUSH
17105: LD_VAR 0 4
17109: PPUSH
17110: LD_VAR 0 5
17114: PPUSH
17115: CALL 15741 0 3
// if cmd = 258 then
17119: LD_VAR 0 1
17123: PUSH
17124: LD_INT 258
17126: EQUAL
17127: IFFALSE 17151
// BurnTreeXYR ( unit , x , y , 8 ) ;
17129: LD_VAR 0 2
17133: PPUSH
17134: LD_VAR 0 4
17138: PPUSH
17139: LD_VAR 0 5
17143: PPUSH
17144: LD_INT 8
17146: PPUSH
17147: CALL 17646 0 4
// end ;
17151: LD_VAR 0 6
17155: RET
// export function ComRadiation ( un ) ; var eff ; begin
17156: LD_INT 0
17158: PPUSH
17159: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
17160: LD_VAR 0 1
17164: PPUSH
17165: CALL_OW 264
17169: PUSH
17170: LD_INT 91
17172: NONEQUAL
17173: IFFALSE 17177
// exit ;
17175: GO 17247
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
17177: LD_INT 68
17179: PPUSH
17180: LD_VAR 0 1
17184: PPUSH
17185: CALL_OW 255
17189: PPUSH
17190: CALL_OW 321
17194: PUSH
17195: LD_INT 2
17197: EQUAL
17198: IFFALSE 17210
// eff := 50 else
17200: LD_ADDR_VAR 0 3
17204: PUSH
17205: LD_INT 50
17207: ST_TO_ADDR
17208: GO 17218
// eff := 25 ;
17210: LD_ADDR_VAR 0 3
17214: PUSH
17215: LD_INT 25
17217: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
17218: LD_VAR 0 1
17222: PPUSH
17223: CALL_OW 250
17227: PPUSH
17228: LD_VAR 0 1
17232: PPUSH
17233: CALL_OW 251
17237: PPUSH
17238: LD_VAR 0 3
17242: PPUSH
17243: CALL_OW 495
// end ;
17247: LD_VAR 0 2
17251: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
17252: LD_INT 0
17254: PPUSH
17255: PPUSH
17256: PPUSH
17257: PPUSH
17258: PPUSH
17259: PPUSH
17260: PPUSH
17261: PPUSH
17262: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
17263: LD_VAR 0 1
17267: PPUSH
17268: CALL_OW 302
17272: NOT
17273: PUSH
17274: LD_VAR 0 2
17278: PPUSH
17279: LD_VAR 0 3
17283: PPUSH
17284: CALL_OW 488
17288: NOT
17289: OR
17290: PUSH
17291: LD_VAR 0 4
17295: NOT
17296: OR
17297: IFFALSE 17301
// exit ;
17299: GO 17641
// list := [ ] ;
17301: LD_ADDR_VAR 0 13
17305: PUSH
17306: EMPTY
17307: ST_TO_ADDR
// if x - r < 0 then
17308: LD_VAR 0 2
17312: PUSH
17313: LD_VAR 0 4
17317: MINUS
17318: PUSH
17319: LD_INT 0
17321: LESS
17322: IFFALSE 17334
// min_x := 0 else
17324: LD_ADDR_VAR 0 7
17328: PUSH
17329: LD_INT 0
17331: ST_TO_ADDR
17332: GO 17350
// min_x := x - r ;
17334: LD_ADDR_VAR 0 7
17338: PUSH
17339: LD_VAR 0 2
17343: PUSH
17344: LD_VAR 0 4
17348: MINUS
17349: ST_TO_ADDR
// if y - r < 0 then
17350: LD_VAR 0 3
17354: PUSH
17355: LD_VAR 0 4
17359: MINUS
17360: PUSH
17361: LD_INT 0
17363: LESS
17364: IFFALSE 17376
// min_y := 0 else
17366: LD_ADDR_VAR 0 8
17370: PUSH
17371: LD_INT 0
17373: ST_TO_ADDR
17374: GO 17392
// min_y := y - r ;
17376: LD_ADDR_VAR 0 8
17380: PUSH
17381: LD_VAR 0 3
17385: PUSH
17386: LD_VAR 0 4
17390: MINUS
17391: ST_TO_ADDR
// max_x := x + r ;
17392: LD_ADDR_VAR 0 9
17396: PUSH
17397: LD_VAR 0 2
17401: PUSH
17402: LD_VAR 0 4
17406: PLUS
17407: ST_TO_ADDR
// max_y := y + r ;
17408: LD_ADDR_VAR 0 10
17412: PUSH
17413: LD_VAR 0 3
17417: PUSH
17418: LD_VAR 0 4
17422: PLUS
17423: ST_TO_ADDR
// for _x = min_x to max_x do
17424: LD_ADDR_VAR 0 11
17428: PUSH
17429: DOUBLE
17430: LD_VAR 0 7
17434: DEC
17435: ST_TO_ADDR
17436: LD_VAR 0 9
17440: PUSH
17441: FOR_TO
17442: IFFALSE 17559
// for _y = min_y to max_y do
17444: LD_ADDR_VAR 0 12
17448: PUSH
17449: DOUBLE
17450: LD_VAR 0 8
17454: DEC
17455: ST_TO_ADDR
17456: LD_VAR 0 10
17460: PUSH
17461: FOR_TO
17462: IFFALSE 17555
// begin if not ValidHex ( _x , _y ) then
17464: LD_VAR 0 11
17468: PPUSH
17469: LD_VAR 0 12
17473: PPUSH
17474: CALL_OW 488
17478: NOT
17479: IFFALSE 17483
// continue ;
17481: GO 17461
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
17483: LD_VAR 0 11
17487: PPUSH
17488: LD_VAR 0 12
17492: PPUSH
17493: CALL_OW 351
17497: PUSH
17498: LD_VAR 0 11
17502: PPUSH
17503: LD_VAR 0 12
17507: PPUSH
17508: CALL_OW 554
17512: AND
17513: IFFALSE 17553
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
17515: LD_ADDR_VAR 0 13
17519: PUSH
17520: LD_VAR 0 13
17524: PPUSH
17525: LD_VAR 0 13
17529: PUSH
17530: LD_INT 1
17532: PLUS
17533: PPUSH
17534: LD_VAR 0 11
17538: PUSH
17539: LD_VAR 0 12
17543: PUSH
17544: EMPTY
17545: LIST
17546: LIST
17547: PPUSH
17548: CALL_OW 2
17552: ST_TO_ADDR
// end ;
17553: GO 17461
17555: POP
17556: POP
17557: GO 17441
17559: POP
17560: POP
// if not list then
17561: LD_VAR 0 13
17565: NOT
17566: IFFALSE 17570
// exit ;
17568: GO 17641
// for i in list do
17570: LD_ADDR_VAR 0 6
17574: PUSH
17575: LD_VAR 0 13
17579: PUSH
17580: FOR_IN
17581: IFFALSE 17639
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
17583: LD_VAR 0 1
17587: PPUSH
17588: LD_STRING M
17590: PUSH
17591: LD_VAR 0 6
17595: PUSH
17596: LD_INT 1
17598: ARRAY
17599: PUSH
17600: LD_VAR 0 6
17604: PUSH
17605: LD_INT 2
17607: ARRAY
17608: PUSH
17609: LD_INT 0
17611: PUSH
17612: LD_INT 0
17614: PUSH
17615: LD_INT 0
17617: PUSH
17618: LD_INT 0
17620: PUSH
17621: EMPTY
17622: LIST
17623: LIST
17624: LIST
17625: LIST
17626: LIST
17627: LIST
17628: LIST
17629: PUSH
17630: EMPTY
17631: LIST
17632: PPUSH
17633: CALL_OW 447
17637: GO 17580
17639: POP
17640: POP
// end ;
17641: LD_VAR 0 5
17645: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
17646: LD_INT 0
17648: PPUSH
17649: PPUSH
17650: PPUSH
17651: PPUSH
17652: PPUSH
17653: PPUSH
17654: PPUSH
17655: PPUSH
17656: PPUSH
17657: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
17658: LD_VAR 0 1
17662: PPUSH
17663: CALL_OW 302
17667: NOT
17668: PUSH
17669: LD_VAR 0 2
17673: PPUSH
17674: LD_VAR 0 3
17678: PPUSH
17679: CALL_OW 488
17683: NOT
17684: OR
17685: PUSH
17686: LD_VAR 0 4
17690: NOT
17691: OR
17692: IFFALSE 17696
// exit ;
17694: GO 18209
// list := [ ] ;
17696: LD_ADDR_VAR 0 13
17700: PUSH
17701: EMPTY
17702: ST_TO_ADDR
// if x - r < 0 then
17703: LD_VAR 0 2
17707: PUSH
17708: LD_VAR 0 4
17712: MINUS
17713: PUSH
17714: LD_INT 0
17716: LESS
17717: IFFALSE 17729
// min_x := 0 else
17719: LD_ADDR_VAR 0 7
17723: PUSH
17724: LD_INT 0
17726: ST_TO_ADDR
17727: GO 17745
// min_x := x - r ;
17729: LD_ADDR_VAR 0 7
17733: PUSH
17734: LD_VAR 0 2
17738: PUSH
17739: LD_VAR 0 4
17743: MINUS
17744: ST_TO_ADDR
// if y - r < 0 then
17745: LD_VAR 0 3
17749: PUSH
17750: LD_VAR 0 4
17754: MINUS
17755: PUSH
17756: LD_INT 0
17758: LESS
17759: IFFALSE 17771
// min_y := 0 else
17761: LD_ADDR_VAR 0 8
17765: PUSH
17766: LD_INT 0
17768: ST_TO_ADDR
17769: GO 17787
// min_y := y - r ;
17771: LD_ADDR_VAR 0 8
17775: PUSH
17776: LD_VAR 0 3
17780: PUSH
17781: LD_VAR 0 4
17785: MINUS
17786: ST_TO_ADDR
// max_x := x + r ;
17787: LD_ADDR_VAR 0 9
17791: PUSH
17792: LD_VAR 0 2
17796: PUSH
17797: LD_VAR 0 4
17801: PLUS
17802: ST_TO_ADDR
// max_y := y + r ;
17803: LD_ADDR_VAR 0 10
17807: PUSH
17808: LD_VAR 0 3
17812: PUSH
17813: LD_VAR 0 4
17817: PLUS
17818: ST_TO_ADDR
// for _x = min_x to max_x do
17819: LD_ADDR_VAR 0 11
17823: PUSH
17824: DOUBLE
17825: LD_VAR 0 7
17829: DEC
17830: ST_TO_ADDR
17831: LD_VAR 0 9
17835: PUSH
17836: FOR_TO
17837: IFFALSE 17954
// for _y = min_y to max_y do
17839: LD_ADDR_VAR 0 12
17843: PUSH
17844: DOUBLE
17845: LD_VAR 0 8
17849: DEC
17850: ST_TO_ADDR
17851: LD_VAR 0 10
17855: PUSH
17856: FOR_TO
17857: IFFALSE 17950
// begin if not ValidHex ( _x , _y ) then
17859: LD_VAR 0 11
17863: PPUSH
17864: LD_VAR 0 12
17868: PPUSH
17869: CALL_OW 488
17873: NOT
17874: IFFALSE 17878
// continue ;
17876: GO 17856
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
17878: LD_VAR 0 11
17882: PPUSH
17883: LD_VAR 0 12
17887: PPUSH
17888: CALL_OW 351
17892: PUSH
17893: LD_VAR 0 11
17897: PPUSH
17898: LD_VAR 0 12
17902: PPUSH
17903: CALL_OW 554
17907: AND
17908: IFFALSE 17948
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
17910: LD_ADDR_VAR 0 13
17914: PUSH
17915: LD_VAR 0 13
17919: PPUSH
17920: LD_VAR 0 13
17924: PUSH
17925: LD_INT 1
17927: PLUS
17928: PPUSH
17929: LD_VAR 0 11
17933: PUSH
17934: LD_VAR 0 12
17938: PUSH
17939: EMPTY
17940: LIST
17941: LIST
17942: PPUSH
17943: CALL_OW 2
17947: ST_TO_ADDR
// end ;
17948: GO 17856
17950: POP
17951: POP
17952: GO 17836
17954: POP
17955: POP
// if not list then
17956: LD_VAR 0 13
17960: NOT
17961: IFFALSE 17965
// exit ;
17963: GO 18209
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
17965: LD_ADDR_VAR 0 13
17969: PUSH
17970: LD_VAR 0 1
17974: PPUSH
17975: LD_VAR 0 13
17979: PPUSH
17980: LD_INT 1
17982: PPUSH
17983: LD_INT 1
17985: PPUSH
17986: CALL 26985 0 4
17990: ST_TO_ADDR
// ComStop ( flame ) ;
17991: LD_VAR 0 1
17995: PPUSH
17996: CALL_OW 141
// for i in list do
18000: LD_ADDR_VAR 0 6
18004: PUSH
18005: LD_VAR 0 13
18009: PUSH
18010: FOR_IN
18011: IFFALSE 18042
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
18013: LD_VAR 0 1
18017: PPUSH
18018: LD_VAR 0 6
18022: PUSH
18023: LD_INT 1
18025: ARRAY
18026: PPUSH
18027: LD_VAR 0 6
18031: PUSH
18032: LD_INT 2
18034: ARRAY
18035: PPUSH
18036: CALL_OW 176
18040: GO 18010
18042: POP
18043: POP
// repeat wait ( 0 0$1 ) ;
18044: LD_INT 35
18046: PPUSH
18047: CALL_OW 67
// task := GetTaskList ( flame ) ;
18051: LD_ADDR_VAR 0 14
18055: PUSH
18056: LD_VAR 0 1
18060: PPUSH
18061: CALL_OW 437
18065: ST_TO_ADDR
// if not task then
18066: LD_VAR 0 14
18070: NOT
18071: IFFALSE 18075
// exit ;
18073: GO 18209
// if task [ 1 ] [ 1 ] <> | then
18075: LD_VAR 0 14
18079: PUSH
18080: LD_INT 1
18082: ARRAY
18083: PUSH
18084: LD_INT 1
18086: ARRAY
18087: PUSH
18088: LD_STRING |
18090: NONEQUAL
18091: IFFALSE 18095
// exit ;
18093: GO 18209
// _x := task [ 1 ] [ 2 ] ;
18095: LD_ADDR_VAR 0 11
18099: PUSH
18100: LD_VAR 0 14
18104: PUSH
18105: LD_INT 1
18107: ARRAY
18108: PUSH
18109: LD_INT 2
18111: ARRAY
18112: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
18113: LD_ADDR_VAR 0 12
18117: PUSH
18118: LD_VAR 0 14
18122: PUSH
18123: LD_INT 1
18125: ARRAY
18126: PUSH
18127: LD_INT 3
18129: ARRAY
18130: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
18131: LD_VAR 0 11
18135: PPUSH
18136: LD_VAR 0 12
18140: PPUSH
18141: CALL_OW 351
18145: NOT
18146: PUSH
18147: LD_VAR 0 11
18151: PPUSH
18152: LD_VAR 0 12
18156: PPUSH
18157: CALL_OW 554
18161: NOT
18162: OR
18163: IFFALSE 18197
// begin task := Delete ( task , 1 ) ;
18165: LD_ADDR_VAR 0 14
18169: PUSH
18170: LD_VAR 0 14
18174: PPUSH
18175: LD_INT 1
18177: PPUSH
18178: CALL_OW 3
18182: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
18183: LD_VAR 0 1
18187: PPUSH
18188: LD_VAR 0 14
18192: PPUSH
18193: CALL_OW 446
// end ; until not HasTask ( flame ) ;
18197: LD_VAR 0 1
18201: PPUSH
18202: CALL_OW 314
18206: NOT
18207: IFFALSE 18044
// end ;
18209: LD_VAR 0 5
18213: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
18214: LD_EXP 62
18218: NOT
18219: IFFALSE 18269
18221: GO 18223
18223: DISABLE
// begin initHack := true ;
18224: LD_ADDR_EXP 62
18228: PUSH
18229: LD_INT 1
18231: ST_TO_ADDR
// hackTanks := [ ] ;
18232: LD_ADDR_EXP 63
18236: PUSH
18237: EMPTY
18238: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
18239: LD_ADDR_EXP 64
18243: PUSH
18244: EMPTY
18245: ST_TO_ADDR
// hackLimit := 3 ;
18246: LD_ADDR_EXP 65
18250: PUSH
18251: LD_INT 3
18253: ST_TO_ADDR
// hackDist := 12 ;
18254: LD_ADDR_EXP 66
18258: PUSH
18259: LD_INT 12
18261: ST_TO_ADDR
// hackCounter := [ ] ;
18262: LD_ADDR_EXP 67
18266: PUSH
18267: EMPTY
18268: ST_TO_ADDR
// end ;
18269: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
18270: LD_EXP 62
18274: PUSH
18275: LD_INT 34
18277: PUSH
18278: LD_INT 99
18280: PUSH
18281: EMPTY
18282: LIST
18283: LIST
18284: PPUSH
18285: CALL_OW 69
18289: AND
18290: IFFALSE 18543
18292: GO 18294
18294: DISABLE
18295: LD_INT 0
18297: PPUSH
18298: PPUSH
// begin enable ;
18299: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
18300: LD_ADDR_VAR 0 1
18304: PUSH
18305: LD_INT 34
18307: PUSH
18308: LD_INT 99
18310: PUSH
18311: EMPTY
18312: LIST
18313: LIST
18314: PPUSH
18315: CALL_OW 69
18319: PUSH
18320: FOR_IN
18321: IFFALSE 18541
// begin if not i in hackTanks then
18323: LD_VAR 0 1
18327: PUSH
18328: LD_EXP 63
18332: IN
18333: NOT
18334: IFFALSE 18417
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
18336: LD_ADDR_EXP 63
18340: PUSH
18341: LD_EXP 63
18345: PPUSH
18346: LD_EXP 63
18350: PUSH
18351: LD_INT 1
18353: PLUS
18354: PPUSH
18355: LD_VAR 0 1
18359: PPUSH
18360: CALL_OW 1
18364: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
18365: LD_ADDR_EXP 64
18369: PUSH
18370: LD_EXP 64
18374: PPUSH
18375: LD_EXP 64
18379: PUSH
18380: LD_INT 1
18382: PLUS
18383: PPUSH
18384: EMPTY
18385: PPUSH
18386: CALL_OW 1
18390: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
18391: LD_ADDR_EXP 67
18395: PUSH
18396: LD_EXP 67
18400: PPUSH
18401: LD_EXP 67
18405: PUSH
18406: LD_INT 1
18408: PLUS
18409: PPUSH
18410: EMPTY
18411: PPUSH
18412: CALL_OW 1
18416: ST_TO_ADDR
// end ; if not IsOk ( i ) then
18417: LD_VAR 0 1
18421: PPUSH
18422: CALL_OW 302
18426: NOT
18427: IFFALSE 18440
// begin HackUnlinkAll ( i ) ;
18429: LD_VAR 0 1
18433: PPUSH
18434: CALL 18546 0 1
// continue ;
18438: GO 18320
// end ; HackCheckCapturedStatus ( i ) ;
18440: LD_VAR 0 1
18444: PPUSH
18445: CALL 18989 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
18449: LD_ADDR_VAR 0 2
18453: PUSH
18454: LD_INT 81
18456: PUSH
18457: LD_VAR 0 1
18461: PPUSH
18462: CALL_OW 255
18466: PUSH
18467: EMPTY
18468: LIST
18469: LIST
18470: PUSH
18471: LD_INT 33
18473: PUSH
18474: LD_INT 3
18476: PUSH
18477: EMPTY
18478: LIST
18479: LIST
18480: PUSH
18481: LD_INT 91
18483: PUSH
18484: LD_VAR 0 1
18488: PUSH
18489: LD_EXP 66
18493: PUSH
18494: EMPTY
18495: LIST
18496: LIST
18497: LIST
18498: PUSH
18499: LD_INT 50
18501: PUSH
18502: EMPTY
18503: LIST
18504: PUSH
18505: EMPTY
18506: LIST
18507: LIST
18508: LIST
18509: LIST
18510: PPUSH
18511: CALL_OW 69
18515: ST_TO_ADDR
// if not tmp then
18516: LD_VAR 0 2
18520: NOT
18521: IFFALSE 18525
// continue ;
18523: GO 18320
// HackLink ( i , tmp ) ;
18525: LD_VAR 0 1
18529: PPUSH
18530: LD_VAR 0 2
18534: PPUSH
18535: CALL 18682 0 2
// end ;
18539: GO 18320
18541: POP
18542: POP
// end ;
18543: PPOPN 2
18545: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
18546: LD_INT 0
18548: PPUSH
18549: PPUSH
18550: PPUSH
// if not hack in hackTanks then
18551: LD_VAR 0 1
18555: PUSH
18556: LD_EXP 63
18560: IN
18561: NOT
18562: IFFALSE 18566
// exit ;
18564: GO 18677
// index := GetElementIndex ( hackTanks , hack ) ;
18566: LD_ADDR_VAR 0 4
18570: PUSH
18571: LD_EXP 63
18575: PPUSH
18576: LD_VAR 0 1
18580: PPUSH
18581: CALL 26282 0 2
18585: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
18586: LD_EXP 64
18590: PUSH
18591: LD_VAR 0 4
18595: ARRAY
18596: IFFALSE 18677
// begin for i in hackTanksCaptured [ index ] do
18598: LD_ADDR_VAR 0 3
18602: PUSH
18603: LD_EXP 64
18607: PUSH
18608: LD_VAR 0 4
18612: ARRAY
18613: PUSH
18614: FOR_IN
18615: IFFALSE 18641
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
18617: LD_VAR 0 3
18621: PUSH
18622: LD_INT 1
18624: ARRAY
18625: PPUSH
18626: LD_VAR 0 3
18630: PUSH
18631: LD_INT 2
18633: ARRAY
18634: PPUSH
18635: CALL_OW 235
18639: GO 18614
18641: POP
18642: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
18643: LD_ADDR_EXP 64
18647: PUSH
18648: LD_EXP 64
18652: PPUSH
18653: LD_VAR 0 4
18657: PPUSH
18658: EMPTY
18659: PPUSH
18660: CALL_OW 1
18664: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
18665: LD_VAR 0 1
18669: PPUSH
18670: LD_INT 0
18672: PPUSH
18673: CALL_OW 505
// end ; end ;
18677: LD_VAR 0 2
18681: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
18682: LD_INT 0
18684: PPUSH
18685: PPUSH
18686: PPUSH
// if not hack in hackTanks or not vehicles then
18687: LD_VAR 0 1
18691: PUSH
18692: LD_EXP 63
18696: IN
18697: NOT
18698: PUSH
18699: LD_VAR 0 2
18703: NOT
18704: OR
18705: IFFALSE 18709
// exit ;
18707: GO 18984
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
18709: LD_ADDR_VAR 0 2
18713: PUSH
18714: LD_VAR 0 1
18718: PPUSH
18719: LD_VAR 0 2
18723: PPUSH
18724: LD_INT 1
18726: PPUSH
18727: LD_INT 1
18729: PPUSH
18730: CALL 26932 0 4
18734: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
18735: LD_ADDR_VAR 0 5
18739: PUSH
18740: LD_EXP 63
18744: PPUSH
18745: LD_VAR 0 1
18749: PPUSH
18750: CALL 26282 0 2
18754: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
18755: LD_EXP 64
18759: PUSH
18760: LD_VAR 0 5
18764: ARRAY
18765: PUSH
18766: LD_EXP 65
18770: LESS
18771: IFFALSE 18960
// begin for i := 1 to vehicles do
18773: LD_ADDR_VAR 0 4
18777: PUSH
18778: DOUBLE
18779: LD_INT 1
18781: DEC
18782: ST_TO_ADDR
18783: LD_VAR 0 2
18787: PUSH
18788: FOR_TO
18789: IFFALSE 18958
// begin if hackTanksCaptured [ index ] = hackLimit then
18791: LD_EXP 64
18795: PUSH
18796: LD_VAR 0 5
18800: ARRAY
18801: PUSH
18802: LD_EXP 65
18806: EQUAL
18807: IFFALSE 18811
// break ;
18809: GO 18958
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
18811: LD_ADDR_EXP 67
18815: PUSH
18816: LD_EXP 67
18820: PPUSH
18821: LD_VAR 0 5
18825: PPUSH
18826: LD_EXP 67
18830: PUSH
18831: LD_VAR 0 5
18835: ARRAY
18836: PUSH
18837: LD_INT 1
18839: PLUS
18840: PPUSH
18841: CALL_OW 1
18845: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
18846: LD_ADDR_EXP 64
18850: PUSH
18851: LD_EXP 64
18855: PPUSH
18856: LD_VAR 0 5
18860: PUSH
18861: LD_EXP 64
18865: PUSH
18866: LD_VAR 0 5
18870: ARRAY
18871: PUSH
18872: LD_INT 1
18874: PLUS
18875: PUSH
18876: EMPTY
18877: LIST
18878: LIST
18879: PPUSH
18880: LD_VAR 0 2
18884: PUSH
18885: LD_VAR 0 4
18889: ARRAY
18890: PUSH
18891: LD_VAR 0 2
18895: PUSH
18896: LD_VAR 0 4
18900: ARRAY
18901: PPUSH
18902: CALL_OW 255
18906: PUSH
18907: EMPTY
18908: LIST
18909: LIST
18910: PPUSH
18911: CALL 26497 0 3
18915: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
18916: LD_VAR 0 2
18920: PUSH
18921: LD_VAR 0 4
18925: ARRAY
18926: PPUSH
18927: LD_VAR 0 1
18931: PPUSH
18932: CALL_OW 255
18936: PPUSH
18937: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
18941: LD_VAR 0 2
18945: PUSH
18946: LD_VAR 0 4
18950: ARRAY
18951: PPUSH
18952: CALL_OW 141
// end ;
18956: GO 18788
18958: POP
18959: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
18960: LD_VAR 0 1
18964: PPUSH
18965: LD_EXP 64
18969: PUSH
18970: LD_VAR 0 5
18974: ARRAY
18975: PUSH
18976: LD_INT 0
18978: PLUS
18979: PPUSH
18980: CALL_OW 505
// end ;
18984: LD_VAR 0 3
18988: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
18989: LD_INT 0
18991: PPUSH
18992: PPUSH
18993: PPUSH
18994: PPUSH
// if not hack in hackTanks then
18995: LD_VAR 0 1
18999: PUSH
19000: LD_EXP 63
19004: IN
19005: NOT
19006: IFFALSE 19010
// exit ;
19008: GO 19250
// index := GetElementIndex ( hackTanks , hack ) ;
19010: LD_ADDR_VAR 0 4
19014: PUSH
19015: LD_EXP 63
19019: PPUSH
19020: LD_VAR 0 1
19024: PPUSH
19025: CALL 26282 0 2
19029: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
19030: LD_ADDR_VAR 0 3
19034: PUSH
19035: DOUBLE
19036: LD_EXP 64
19040: PUSH
19041: LD_VAR 0 4
19045: ARRAY
19046: INC
19047: ST_TO_ADDR
19048: LD_INT 1
19050: PUSH
19051: FOR_DOWNTO
19052: IFFALSE 19224
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
19054: LD_ADDR_VAR 0 5
19058: PUSH
19059: LD_EXP 64
19063: PUSH
19064: LD_VAR 0 4
19068: ARRAY
19069: PUSH
19070: LD_VAR 0 3
19074: ARRAY
19075: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
19076: LD_VAR 0 5
19080: PUSH
19081: LD_INT 1
19083: ARRAY
19084: PPUSH
19085: CALL_OW 302
19089: NOT
19090: PUSH
19091: LD_VAR 0 5
19095: PUSH
19096: LD_INT 1
19098: ARRAY
19099: PPUSH
19100: CALL_OW 255
19104: PUSH
19105: LD_VAR 0 1
19109: PPUSH
19110: CALL_OW 255
19114: NONEQUAL
19115: OR
19116: IFFALSE 19222
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
19118: LD_VAR 0 5
19122: PUSH
19123: LD_INT 1
19125: ARRAY
19126: PPUSH
19127: CALL_OW 305
19131: PUSH
19132: LD_VAR 0 5
19136: PUSH
19137: LD_INT 1
19139: ARRAY
19140: PPUSH
19141: CALL_OW 255
19145: PUSH
19146: LD_VAR 0 1
19150: PPUSH
19151: CALL_OW 255
19155: EQUAL
19156: AND
19157: IFFALSE 19181
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
19159: LD_VAR 0 5
19163: PUSH
19164: LD_INT 1
19166: ARRAY
19167: PPUSH
19168: LD_VAR 0 5
19172: PUSH
19173: LD_INT 2
19175: ARRAY
19176: PPUSH
19177: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
19181: LD_ADDR_EXP 64
19185: PUSH
19186: LD_EXP 64
19190: PPUSH
19191: LD_VAR 0 4
19195: PPUSH
19196: LD_EXP 64
19200: PUSH
19201: LD_VAR 0 4
19205: ARRAY
19206: PPUSH
19207: LD_VAR 0 3
19211: PPUSH
19212: CALL_OW 3
19216: PPUSH
19217: CALL_OW 1
19221: ST_TO_ADDR
// end ; end ;
19222: GO 19051
19224: POP
19225: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
19226: LD_VAR 0 1
19230: PPUSH
19231: LD_EXP 64
19235: PUSH
19236: LD_VAR 0 4
19240: ARRAY
19241: PUSH
19242: LD_INT 0
19244: PLUS
19245: PPUSH
19246: CALL_OW 505
// end ;
19250: LD_VAR 0 2
19254: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
19255: LD_INT 0
19257: PPUSH
19258: PPUSH
19259: PPUSH
19260: PPUSH
// if not hack in hackTanks then
19261: LD_VAR 0 1
19265: PUSH
19266: LD_EXP 63
19270: IN
19271: NOT
19272: IFFALSE 19276
// exit ;
19274: GO 19361
// index := GetElementIndex ( hackTanks , hack ) ;
19276: LD_ADDR_VAR 0 5
19280: PUSH
19281: LD_EXP 63
19285: PPUSH
19286: LD_VAR 0 1
19290: PPUSH
19291: CALL 26282 0 2
19295: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
19296: LD_ADDR_VAR 0 4
19300: PUSH
19301: DOUBLE
19302: LD_INT 1
19304: DEC
19305: ST_TO_ADDR
19306: LD_EXP 64
19310: PUSH
19311: LD_VAR 0 5
19315: ARRAY
19316: PUSH
19317: FOR_TO
19318: IFFALSE 19359
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
19320: LD_EXP 64
19324: PUSH
19325: LD_VAR 0 5
19329: ARRAY
19330: PUSH
19331: LD_VAR 0 4
19335: ARRAY
19336: PUSH
19337: LD_INT 1
19339: ARRAY
19340: PUSH
19341: LD_VAR 0 2
19345: EQUAL
19346: IFFALSE 19357
// KillUnit ( vehicle ) ;
19348: LD_VAR 0 2
19352: PPUSH
19353: CALL_OW 66
19357: GO 19317
19359: POP
19360: POP
// end ;
19361: LD_VAR 0 3
19365: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
19366: LD_EXP 68
19370: NOT
19371: IFFALSE 19406
19373: GO 19375
19375: DISABLE
// begin initMiner := true ;
19376: LD_ADDR_EXP 68
19380: PUSH
19381: LD_INT 1
19383: ST_TO_ADDR
// minersList := [ ] ;
19384: LD_ADDR_EXP 69
19388: PUSH
19389: EMPTY
19390: ST_TO_ADDR
// minerMinesList := [ ] ;
19391: LD_ADDR_EXP 70
19395: PUSH
19396: EMPTY
19397: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
19398: LD_ADDR_EXP 71
19402: PUSH
19403: LD_INT 5
19405: ST_TO_ADDR
// end ;
19406: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
19407: LD_EXP 68
19411: PUSH
19412: LD_INT 34
19414: PUSH
19415: LD_INT 81
19417: PUSH
19418: EMPTY
19419: LIST
19420: LIST
19421: PPUSH
19422: CALL_OW 69
19426: AND
19427: IFFALSE 19888
19429: GO 19431
19431: DISABLE
19432: LD_INT 0
19434: PPUSH
19435: PPUSH
19436: PPUSH
19437: PPUSH
// begin enable ;
19438: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
19439: LD_ADDR_VAR 0 1
19443: PUSH
19444: LD_INT 34
19446: PUSH
19447: LD_INT 81
19449: PUSH
19450: EMPTY
19451: LIST
19452: LIST
19453: PPUSH
19454: CALL_OW 69
19458: PUSH
19459: FOR_IN
19460: IFFALSE 19532
// begin if not i in minersList then
19462: LD_VAR 0 1
19466: PUSH
19467: LD_EXP 69
19471: IN
19472: NOT
19473: IFFALSE 19530
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
19475: LD_ADDR_EXP 69
19479: PUSH
19480: LD_EXP 69
19484: PPUSH
19485: LD_EXP 69
19489: PUSH
19490: LD_INT 1
19492: PLUS
19493: PPUSH
19494: LD_VAR 0 1
19498: PPUSH
19499: CALL_OW 1
19503: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
19504: LD_ADDR_EXP 70
19508: PUSH
19509: LD_EXP 70
19513: PPUSH
19514: LD_EXP 70
19518: PUSH
19519: LD_INT 1
19521: PLUS
19522: PPUSH
19523: EMPTY
19524: PPUSH
19525: CALL_OW 1
19529: ST_TO_ADDR
// end end ;
19530: GO 19459
19532: POP
19533: POP
// for i := minerMinesList downto 1 do
19534: LD_ADDR_VAR 0 1
19538: PUSH
19539: DOUBLE
19540: LD_EXP 70
19544: INC
19545: ST_TO_ADDR
19546: LD_INT 1
19548: PUSH
19549: FOR_DOWNTO
19550: IFFALSE 19886
// begin if IsLive ( minersList [ i ] ) then
19552: LD_EXP 69
19556: PUSH
19557: LD_VAR 0 1
19561: ARRAY
19562: PPUSH
19563: CALL_OW 300
19567: IFFALSE 19595
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
19569: LD_EXP 69
19573: PUSH
19574: LD_VAR 0 1
19578: ARRAY
19579: PPUSH
19580: LD_EXP 70
19584: PUSH
19585: LD_VAR 0 1
19589: ARRAY
19590: PPUSH
19591: CALL_OW 505
// if not minerMinesList [ i ] then
19595: LD_EXP 70
19599: PUSH
19600: LD_VAR 0 1
19604: ARRAY
19605: NOT
19606: IFFALSE 19610
// continue ;
19608: GO 19549
// for j := minerMinesList [ i ] downto 1 do
19610: LD_ADDR_VAR 0 2
19614: PUSH
19615: DOUBLE
19616: LD_EXP 70
19620: PUSH
19621: LD_VAR 0 1
19625: ARRAY
19626: INC
19627: ST_TO_ADDR
19628: LD_INT 1
19630: PUSH
19631: FOR_DOWNTO
19632: IFFALSE 19882
// begin side := GetSide ( minersList [ i ] ) ;
19634: LD_ADDR_VAR 0 3
19638: PUSH
19639: LD_EXP 69
19643: PUSH
19644: LD_VAR 0 1
19648: ARRAY
19649: PPUSH
19650: CALL_OW 255
19654: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
19655: LD_ADDR_VAR 0 4
19659: PUSH
19660: LD_EXP 70
19664: PUSH
19665: LD_VAR 0 1
19669: ARRAY
19670: PUSH
19671: LD_VAR 0 2
19675: ARRAY
19676: PUSH
19677: LD_INT 1
19679: ARRAY
19680: PPUSH
19681: LD_EXP 70
19685: PUSH
19686: LD_VAR 0 1
19690: ARRAY
19691: PUSH
19692: LD_VAR 0 2
19696: ARRAY
19697: PUSH
19698: LD_INT 2
19700: ARRAY
19701: PPUSH
19702: CALL_OW 428
19706: ST_TO_ADDR
// if not tmp then
19707: LD_VAR 0 4
19711: NOT
19712: IFFALSE 19716
// continue ;
19714: GO 19631
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
19716: LD_VAR 0 4
19720: PUSH
19721: LD_INT 81
19723: PUSH
19724: LD_VAR 0 3
19728: PUSH
19729: EMPTY
19730: LIST
19731: LIST
19732: PPUSH
19733: CALL_OW 69
19737: IN
19738: PUSH
19739: LD_EXP 70
19743: PUSH
19744: LD_VAR 0 1
19748: ARRAY
19749: PUSH
19750: LD_VAR 0 2
19754: ARRAY
19755: PUSH
19756: LD_INT 1
19758: ARRAY
19759: PPUSH
19760: LD_EXP 70
19764: PUSH
19765: LD_VAR 0 1
19769: ARRAY
19770: PUSH
19771: LD_VAR 0 2
19775: ARRAY
19776: PUSH
19777: LD_INT 2
19779: ARRAY
19780: PPUSH
19781: CALL_OW 458
19785: AND
19786: IFFALSE 19880
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
19788: LD_EXP 70
19792: PUSH
19793: LD_VAR 0 1
19797: ARRAY
19798: PUSH
19799: LD_VAR 0 2
19803: ARRAY
19804: PUSH
19805: LD_INT 1
19807: ARRAY
19808: PPUSH
19809: LD_EXP 70
19813: PUSH
19814: LD_VAR 0 1
19818: ARRAY
19819: PUSH
19820: LD_VAR 0 2
19824: ARRAY
19825: PUSH
19826: LD_INT 2
19828: ARRAY
19829: PPUSH
19830: LD_VAR 0 3
19834: PPUSH
19835: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
19839: LD_ADDR_EXP 70
19843: PUSH
19844: LD_EXP 70
19848: PPUSH
19849: LD_VAR 0 1
19853: PPUSH
19854: LD_EXP 70
19858: PUSH
19859: LD_VAR 0 1
19863: ARRAY
19864: PPUSH
19865: LD_VAR 0 2
19869: PPUSH
19870: CALL_OW 3
19874: PPUSH
19875: CALL_OW 1
19879: ST_TO_ADDR
// end ; end ;
19880: GO 19631
19882: POP
19883: POP
// end ;
19884: GO 19549
19886: POP
19887: POP
// end ;
19888: PPOPN 4
19890: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
19891: LD_INT 0
19893: PPUSH
19894: PPUSH
// result := false ;
19895: LD_ADDR_VAR 0 4
19899: PUSH
19900: LD_INT 0
19902: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
19903: LD_VAR 0 1
19907: PPUSH
19908: CALL_OW 264
19912: PUSH
19913: LD_INT 81
19915: EQUAL
19916: NOT
19917: IFFALSE 19921
// exit ;
19919: GO 20161
// index := GetElementIndex ( minersList , unit ) ;
19921: LD_ADDR_VAR 0 5
19925: PUSH
19926: LD_EXP 69
19930: PPUSH
19931: LD_VAR 0 1
19935: PPUSH
19936: CALL 26282 0 2
19940: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
19941: LD_EXP 70
19945: PUSH
19946: LD_VAR 0 5
19950: ARRAY
19951: PUSH
19952: LD_EXP 71
19956: GREATEREQUAL
19957: IFFALSE 19961
// exit ;
19959: GO 20161
// ComMoveXY ( unit , x , y ) ;
19961: LD_VAR 0 1
19965: PPUSH
19966: LD_VAR 0 2
19970: PPUSH
19971: LD_VAR 0 3
19975: PPUSH
19976: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
19980: LD_INT 35
19982: PPUSH
19983: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
19987: LD_VAR 0 1
19991: PPUSH
19992: LD_VAR 0 2
19996: PPUSH
19997: LD_VAR 0 3
20001: PPUSH
20002: CALL 58043 0 3
20006: NOT
20007: PUSH
20008: LD_VAR 0 1
20012: PPUSH
20013: CALL_OW 314
20017: AND
20018: IFFALSE 20022
// exit ;
20020: GO 20161
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
20022: LD_VAR 0 2
20026: PPUSH
20027: LD_VAR 0 3
20031: PPUSH
20032: CALL_OW 428
20036: PUSH
20037: LD_VAR 0 1
20041: EQUAL
20042: PUSH
20043: LD_VAR 0 1
20047: PPUSH
20048: CALL_OW 314
20052: NOT
20053: AND
20054: IFFALSE 19980
// PlaySoundXY ( x , y , PlantMine ) ;
20056: LD_VAR 0 2
20060: PPUSH
20061: LD_VAR 0 3
20065: PPUSH
20066: LD_STRING PlantMine
20068: PPUSH
20069: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
20073: LD_VAR 0 2
20077: PPUSH
20078: LD_VAR 0 3
20082: PPUSH
20083: LD_VAR 0 1
20087: PPUSH
20088: CALL_OW 255
20092: PPUSH
20093: LD_INT 0
20095: PPUSH
20096: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
20100: LD_ADDR_EXP 70
20104: PUSH
20105: LD_EXP 70
20109: PPUSH
20110: LD_VAR 0 5
20114: PUSH
20115: LD_EXP 70
20119: PUSH
20120: LD_VAR 0 5
20124: ARRAY
20125: PUSH
20126: LD_INT 1
20128: PLUS
20129: PUSH
20130: EMPTY
20131: LIST
20132: LIST
20133: PPUSH
20134: LD_VAR 0 2
20138: PUSH
20139: LD_VAR 0 3
20143: PUSH
20144: EMPTY
20145: LIST
20146: LIST
20147: PPUSH
20148: CALL 26497 0 3
20152: ST_TO_ADDR
// result := true ;
20153: LD_ADDR_VAR 0 4
20157: PUSH
20158: LD_INT 1
20160: ST_TO_ADDR
// end ;
20161: LD_VAR 0 4
20165: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
20166: LD_INT 0
20168: PPUSH
20169: PPUSH
20170: PPUSH
// if not unit in minersList then
20171: LD_VAR 0 1
20175: PUSH
20176: LD_EXP 69
20180: IN
20181: NOT
20182: IFFALSE 20186
// exit ;
20184: GO 20578
// index := GetElementIndex ( minersList , unit ) ;
20186: LD_ADDR_VAR 0 6
20190: PUSH
20191: LD_EXP 69
20195: PPUSH
20196: LD_VAR 0 1
20200: PPUSH
20201: CALL 26282 0 2
20205: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
20206: LD_ADDR_VAR 0 5
20210: PUSH
20211: DOUBLE
20212: LD_EXP 70
20216: PUSH
20217: LD_VAR 0 6
20221: ARRAY
20222: INC
20223: ST_TO_ADDR
20224: LD_INT 1
20226: PUSH
20227: FOR_DOWNTO
20228: IFFALSE 20389
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
20230: LD_EXP 70
20234: PUSH
20235: LD_VAR 0 6
20239: ARRAY
20240: PUSH
20241: LD_VAR 0 5
20245: ARRAY
20246: PUSH
20247: LD_INT 1
20249: ARRAY
20250: PUSH
20251: LD_VAR 0 2
20255: EQUAL
20256: PUSH
20257: LD_EXP 70
20261: PUSH
20262: LD_VAR 0 6
20266: ARRAY
20267: PUSH
20268: LD_VAR 0 5
20272: ARRAY
20273: PUSH
20274: LD_INT 2
20276: ARRAY
20277: PUSH
20278: LD_VAR 0 3
20282: EQUAL
20283: AND
20284: IFFALSE 20387
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
20286: LD_EXP 70
20290: PUSH
20291: LD_VAR 0 6
20295: ARRAY
20296: PUSH
20297: LD_VAR 0 5
20301: ARRAY
20302: PUSH
20303: LD_INT 1
20305: ARRAY
20306: PPUSH
20307: LD_EXP 70
20311: PUSH
20312: LD_VAR 0 6
20316: ARRAY
20317: PUSH
20318: LD_VAR 0 5
20322: ARRAY
20323: PUSH
20324: LD_INT 2
20326: ARRAY
20327: PPUSH
20328: LD_VAR 0 1
20332: PPUSH
20333: CALL_OW 255
20337: PPUSH
20338: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
20342: LD_ADDR_EXP 70
20346: PUSH
20347: LD_EXP 70
20351: PPUSH
20352: LD_VAR 0 6
20356: PPUSH
20357: LD_EXP 70
20361: PUSH
20362: LD_VAR 0 6
20366: ARRAY
20367: PPUSH
20368: LD_VAR 0 5
20372: PPUSH
20373: CALL_OW 3
20377: PPUSH
20378: CALL_OW 1
20382: ST_TO_ADDR
// exit ;
20383: POP
20384: POP
20385: GO 20578
// end ; end ;
20387: GO 20227
20389: POP
20390: POP
// for i := minerMinesList [ index ] downto 1 do
20391: LD_ADDR_VAR 0 5
20395: PUSH
20396: DOUBLE
20397: LD_EXP 70
20401: PUSH
20402: LD_VAR 0 6
20406: ARRAY
20407: INC
20408: ST_TO_ADDR
20409: LD_INT 1
20411: PUSH
20412: FOR_DOWNTO
20413: IFFALSE 20576
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
20415: LD_EXP 70
20419: PUSH
20420: LD_VAR 0 6
20424: ARRAY
20425: PUSH
20426: LD_VAR 0 5
20430: ARRAY
20431: PUSH
20432: LD_INT 1
20434: ARRAY
20435: PPUSH
20436: LD_EXP 70
20440: PUSH
20441: LD_VAR 0 6
20445: ARRAY
20446: PUSH
20447: LD_VAR 0 5
20451: ARRAY
20452: PUSH
20453: LD_INT 2
20455: ARRAY
20456: PPUSH
20457: LD_VAR 0 2
20461: PPUSH
20462: LD_VAR 0 3
20466: PPUSH
20467: CALL_OW 298
20471: PUSH
20472: LD_INT 6
20474: LESS
20475: IFFALSE 20574
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
20477: LD_EXP 70
20481: PUSH
20482: LD_VAR 0 6
20486: ARRAY
20487: PUSH
20488: LD_VAR 0 5
20492: ARRAY
20493: PUSH
20494: LD_INT 1
20496: ARRAY
20497: PPUSH
20498: LD_EXP 70
20502: PUSH
20503: LD_VAR 0 6
20507: ARRAY
20508: PUSH
20509: LD_VAR 0 5
20513: ARRAY
20514: PUSH
20515: LD_INT 2
20517: ARRAY
20518: PPUSH
20519: LD_VAR 0 1
20523: PPUSH
20524: CALL_OW 255
20528: PPUSH
20529: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
20533: LD_ADDR_EXP 70
20537: PUSH
20538: LD_EXP 70
20542: PPUSH
20543: LD_VAR 0 6
20547: PPUSH
20548: LD_EXP 70
20552: PUSH
20553: LD_VAR 0 6
20557: ARRAY
20558: PPUSH
20559: LD_VAR 0 5
20563: PPUSH
20564: CALL_OW 3
20568: PPUSH
20569: CALL_OW 1
20573: ST_TO_ADDR
// end ; end ;
20574: GO 20412
20576: POP
20577: POP
// end ;
20578: LD_VAR 0 4
20582: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
20583: LD_INT 0
20585: PPUSH
20586: PPUSH
20587: PPUSH
20588: PPUSH
20589: PPUSH
20590: PPUSH
20591: PPUSH
20592: PPUSH
20593: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
20594: LD_VAR 0 1
20598: PPUSH
20599: CALL_OW 264
20603: PUSH
20604: LD_INT 81
20606: EQUAL
20607: NOT
20608: PUSH
20609: LD_VAR 0 1
20613: PUSH
20614: LD_EXP 69
20618: IN
20619: NOT
20620: OR
20621: IFFALSE 20625
// exit ;
20623: GO 20947
// index := GetElementIndex ( minersList , unit ) ;
20625: LD_ADDR_VAR 0 6
20629: PUSH
20630: LD_EXP 69
20634: PPUSH
20635: LD_VAR 0 1
20639: PPUSH
20640: CALL 26282 0 2
20644: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
20645: LD_ADDR_VAR 0 8
20649: PUSH
20650: LD_EXP 71
20654: PUSH
20655: LD_EXP 70
20659: PUSH
20660: LD_VAR 0 6
20664: ARRAY
20665: MINUS
20666: ST_TO_ADDR
// if not minesFreeAmount then
20667: LD_VAR 0 8
20671: NOT
20672: IFFALSE 20676
// exit ;
20674: GO 20947
// tmp := [ ] ;
20676: LD_ADDR_VAR 0 7
20680: PUSH
20681: EMPTY
20682: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
20683: LD_ADDR_VAR 0 5
20687: PUSH
20688: DOUBLE
20689: LD_INT 1
20691: DEC
20692: ST_TO_ADDR
20693: LD_VAR 0 8
20697: PUSH
20698: FOR_TO
20699: IFFALSE 20894
// begin _d := rand ( 0 , 5 ) ;
20701: LD_ADDR_VAR 0 11
20705: PUSH
20706: LD_INT 0
20708: PPUSH
20709: LD_INT 5
20711: PPUSH
20712: CALL_OW 12
20716: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
20717: LD_ADDR_VAR 0 12
20721: PUSH
20722: LD_INT 2
20724: PPUSH
20725: LD_INT 6
20727: PPUSH
20728: CALL_OW 12
20732: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
20733: LD_ADDR_VAR 0 9
20737: PUSH
20738: LD_VAR 0 2
20742: PPUSH
20743: LD_VAR 0 11
20747: PPUSH
20748: LD_VAR 0 12
20752: PPUSH
20753: CALL_OW 272
20757: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
20758: LD_ADDR_VAR 0 10
20762: PUSH
20763: LD_VAR 0 3
20767: PPUSH
20768: LD_VAR 0 11
20772: PPUSH
20773: LD_VAR 0 12
20777: PPUSH
20778: CALL_OW 273
20782: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
20783: LD_VAR 0 9
20787: PPUSH
20788: LD_VAR 0 10
20792: PPUSH
20793: CALL_OW 488
20797: PUSH
20798: LD_VAR 0 9
20802: PUSH
20803: LD_VAR 0 10
20807: PUSH
20808: EMPTY
20809: LIST
20810: LIST
20811: PUSH
20812: LD_VAR 0 7
20816: IN
20817: NOT
20818: AND
20819: PUSH
20820: LD_VAR 0 9
20824: PPUSH
20825: LD_VAR 0 10
20829: PPUSH
20830: CALL_OW 458
20834: NOT
20835: AND
20836: IFFALSE 20878
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
20838: LD_ADDR_VAR 0 7
20842: PUSH
20843: LD_VAR 0 7
20847: PPUSH
20848: LD_VAR 0 7
20852: PUSH
20853: LD_INT 1
20855: PLUS
20856: PPUSH
20857: LD_VAR 0 9
20861: PUSH
20862: LD_VAR 0 10
20866: PUSH
20867: EMPTY
20868: LIST
20869: LIST
20870: PPUSH
20871: CALL_OW 1
20875: ST_TO_ADDR
20876: GO 20892
// i := i - 1 ;
20878: LD_ADDR_VAR 0 5
20882: PUSH
20883: LD_VAR 0 5
20887: PUSH
20888: LD_INT 1
20890: MINUS
20891: ST_TO_ADDR
// end ;
20892: GO 20698
20894: POP
20895: POP
// for i in tmp do
20896: LD_ADDR_VAR 0 5
20900: PUSH
20901: LD_VAR 0 7
20905: PUSH
20906: FOR_IN
20907: IFFALSE 20945
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
20909: LD_VAR 0 1
20913: PPUSH
20914: LD_VAR 0 5
20918: PUSH
20919: LD_INT 1
20921: ARRAY
20922: PPUSH
20923: LD_VAR 0 5
20927: PUSH
20928: LD_INT 2
20930: ARRAY
20931: PPUSH
20932: CALL 19891 0 3
20936: NOT
20937: IFFALSE 20943
// exit ;
20939: POP
20940: POP
20941: GO 20947
20943: GO 20906
20945: POP
20946: POP
// end ;
20947: LD_VAR 0 4
20951: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
20952: LD_INT 0
20954: PPUSH
20955: PPUSH
20956: PPUSH
20957: PPUSH
20958: PPUSH
20959: PPUSH
20960: PPUSH
20961: PPUSH
20962: PPUSH
// if GetClass ( unit ) <> class_sniper then
20963: LD_VAR 0 1
20967: PPUSH
20968: CALL_OW 257
20972: PUSH
20973: LD_INT 5
20975: NONEQUAL
20976: IFFALSE 20980
// exit ;
20978: GO 21446
// dist := 8 ;
20980: LD_ADDR_VAR 0 5
20984: PUSH
20985: LD_INT 8
20987: ST_TO_ADDR
// viewRange := 12 ;
20988: LD_ADDR_VAR 0 8
20992: PUSH
20993: LD_INT 12
20995: ST_TO_ADDR
// side := GetSide ( unit ) ;
20996: LD_ADDR_VAR 0 6
21000: PUSH
21001: LD_VAR 0 1
21005: PPUSH
21006: CALL_OW 255
21010: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
21011: LD_INT 61
21013: PPUSH
21014: LD_VAR 0 6
21018: PPUSH
21019: CALL_OW 321
21023: PUSH
21024: LD_INT 2
21026: EQUAL
21027: IFFALSE 21037
// viewRange := 16 ;
21029: LD_ADDR_VAR 0 8
21033: PUSH
21034: LD_INT 16
21036: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
21037: LD_VAR 0 1
21041: PPUSH
21042: LD_VAR 0 2
21046: PPUSH
21047: LD_VAR 0 3
21051: PPUSH
21052: CALL_OW 297
21056: PUSH
21057: LD_VAR 0 5
21061: GREATER
21062: IFFALSE 21141
// begin ComMoveXY ( unit , x , y ) ;
21064: LD_VAR 0 1
21068: PPUSH
21069: LD_VAR 0 2
21073: PPUSH
21074: LD_VAR 0 3
21078: PPUSH
21079: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
21083: LD_INT 35
21085: PPUSH
21086: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
21090: LD_VAR 0 1
21094: PPUSH
21095: LD_VAR 0 2
21099: PPUSH
21100: LD_VAR 0 3
21104: PPUSH
21105: CALL 58043 0 3
21109: NOT
21110: IFFALSE 21114
// exit ;
21112: GO 21446
// until GetDistUnitXY ( unit , x , y ) < dist ;
21114: LD_VAR 0 1
21118: PPUSH
21119: LD_VAR 0 2
21123: PPUSH
21124: LD_VAR 0 3
21128: PPUSH
21129: CALL_OW 297
21133: PUSH
21134: LD_VAR 0 5
21138: LESS
21139: IFFALSE 21083
// end ; ComTurnXY ( unit , x , y ) ;
21141: LD_VAR 0 1
21145: PPUSH
21146: LD_VAR 0 2
21150: PPUSH
21151: LD_VAR 0 3
21155: PPUSH
21156: CALL_OW 118
// repeat if Multiplayer then
21160: LD_OWVAR 4
21164: IFFALSE 21175
// wait ( 35 ) else
21166: LD_INT 35
21168: PPUSH
21169: CALL_OW 67
21173: GO 21182
// wait ( 5 ) ;
21175: LD_INT 5
21177: PPUSH
21178: CALL_OW 67
// _d := GetDir ( unit ) ;
21182: LD_ADDR_VAR 0 11
21186: PUSH
21187: LD_VAR 0 1
21191: PPUSH
21192: CALL_OW 254
21196: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
21197: LD_ADDR_VAR 0 7
21201: PUSH
21202: LD_VAR 0 1
21206: PPUSH
21207: CALL_OW 250
21211: PPUSH
21212: LD_VAR 0 1
21216: PPUSH
21217: CALL_OW 251
21221: PPUSH
21222: LD_VAR 0 2
21226: PPUSH
21227: LD_VAR 0 3
21231: PPUSH
21232: CALL 60651 0 4
21236: ST_TO_ADDR
// until dir = _d ;
21237: LD_VAR 0 7
21241: PUSH
21242: LD_VAR 0 11
21246: EQUAL
21247: IFFALSE 21160
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
21249: LD_ADDR_VAR 0 9
21253: PUSH
21254: LD_VAR 0 1
21258: PPUSH
21259: CALL_OW 250
21263: PPUSH
21264: LD_VAR 0 7
21268: PPUSH
21269: LD_VAR 0 5
21273: PPUSH
21274: CALL_OW 272
21278: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
21279: LD_ADDR_VAR 0 10
21283: PUSH
21284: LD_VAR 0 1
21288: PPUSH
21289: CALL_OW 251
21293: PPUSH
21294: LD_VAR 0 7
21298: PPUSH
21299: LD_VAR 0 5
21303: PPUSH
21304: CALL_OW 273
21308: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
21309: LD_VAR 0 9
21313: PPUSH
21314: LD_VAR 0 10
21318: PPUSH
21319: CALL_OW 488
21323: NOT
21324: IFFALSE 21328
// exit ;
21326: GO 21446
// ComAnimCustom ( unit , 1 ) ;
21328: LD_VAR 0 1
21332: PPUSH
21333: LD_INT 1
21335: PPUSH
21336: CALL_OW 592
// p := 0 ;
21340: LD_ADDR_VAR 0 12
21344: PUSH
21345: LD_INT 0
21347: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
21348: LD_VAR 0 9
21352: PPUSH
21353: LD_VAR 0 10
21357: PPUSH
21358: LD_VAR 0 6
21362: PPUSH
21363: LD_VAR 0 8
21367: PPUSH
21368: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
21372: LD_INT 35
21374: PPUSH
21375: CALL_OW 67
// p := Inc ( p ) ;
21379: LD_ADDR_VAR 0 12
21383: PUSH
21384: LD_VAR 0 12
21388: PPUSH
21389: CALL 60607 0 1
21393: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
21394: LD_VAR 0 12
21398: PUSH
21399: LD_INT 3
21401: EQUAL
21402: PUSH
21403: LD_VAR 0 1
21407: PPUSH
21408: CALL_OW 302
21412: NOT
21413: OR
21414: PUSH
21415: LD_VAR 0 1
21419: PPUSH
21420: CALL_OW 301
21424: OR
21425: IFFALSE 21372
// RemoveSeeing ( _x , _y , side ) ;
21427: LD_VAR 0 9
21431: PPUSH
21432: LD_VAR 0 10
21436: PPUSH
21437: LD_VAR 0 6
21441: PPUSH
21442: CALL_OW 331
// end ; end_of_file
21446: LD_VAR 0 4
21450: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
21451: LD_INT 0
21453: PPUSH
21454: PPUSH
// if exist_mode then
21455: LD_VAR 0 2
21459: IFFALSE 21505
// begin unit := CreateCharacter ( prefix & ident ) ;
21461: LD_ADDR_VAR 0 5
21465: PUSH
21466: LD_VAR 0 3
21470: PUSH
21471: LD_VAR 0 1
21475: STR
21476: PPUSH
21477: CALL_OW 34
21481: ST_TO_ADDR
// if unit then
21482: LD_VAR 0 5
21486: IFFALSE 21503
// DeleteCharacters ( prefix & ident ) ;
21488: LD_VAR 0 3
21492: PUSH
21493: LD_VAR 0 1
21497: STR
21498: PPUSH
21499: CALL_OW 40
// end else
21503: GO 21520
// unit := NewCharacter ( ident ) ;
21505: LD_ADDR_VAR 0 5
21509: PUSH
21510: LD_VAR 0 1
21514: PPUSH
21515: CALL_OW 25
21519: ST_TO_ADDR
// result := unit ;
21520: LD_ADDR_VAR 0 4
21524: PUSH
21525: LD_VAR 0 5
21529: ST_TO_ADDR
// end ;
21530: LD_VAR 0 4
21534: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
21535: LD_INT 0
21537: PPUSH
21538: PPUSH
// if exist_mode then
21539: LD_VAR 0 2
21543: IFFALSE 21568
// unit := CreateCharacter ( prefix & ident ) else
21545: LD_ADDR_VAR 0 5
21549: PUSH
21550: LD_VAR 0 3
21554: PUSH
21555: LD_VAR 0 1
21559: STR
21560: PPUSH
21561: CALL_OW 34
21565: ST_TO_ADDR
21566: GO 21583
// unit := NewCharacter ( ident ) ;
21568: LD_ADDR_VAR 0 5
21572: PUSH
21573: LD_VAR 0 1
21577: PPUSH
21578: CALL_OW 25
21582: ST_TO_ADDR
// result := unit ;
21583: LD_ADDR_VAR 0 4
21587: PUSH
21588: LD_VAR 0 5
21592: ST_TO_ADDR
// end ;
21593: LD_VAR 0 4
21597: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
21598: LD_INT 0
21600: PPUSH
21601: PPUSH
// if not side or not nation then
21602: LD_VAR 0 1
21606: NOT
21607: PUSH
21608: LD_VAR 0 2
21612: NOT
21613: OR
21614: IFFALSE 21618
// exit ;
21616: GO 22386
// case nation of nation_american :
21618: LD_VAR 0 2
21622: PUSH
21623: LD_INT 1
21625: DOUBLE
21626: EQUAL
21627: IFTRUE 21631
21629: GO 21845
21631: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
21632: LD_ADDR_VAR 0 4
21636: PUSH
21637: LD_INT 35
21639: PUSH
21640: LD_INT 45
21642: PUSH
21643: LD_INT 46
21645: PUSH
21646: LD_INT 47
21648: PUSH
21649: LD_INT 82
21651: PUSH
21652: LD_INT 83
21654: PUSH
21655: LD_INT 84
21657: PUSH
21658: LD_INT 85
21660: PUSH
21661: LD_INT 86
21663: PUSH
21664: LD_INT 1
21666: PUSH
21667: LD_INT 2
21669: PUSH
21670: LD_INT 6
21672: PUSH
21673: LD_INT 15
21675: PUSH
21676: LD_INT 16
21678: PUSH
21679: LD_INT 7
21681: PUSH
21682: LD_INT 12
21684: PUSH
21685: LD_INT 13
21687: PUSH
21688: LD_INT 10
21690: PUSH
21691: LD_INT 14
21693: PUSH
21694: LD_INT 20
21696: PUSH
21697: LD_INT 21
21699: PUSH
21700: LD_INT 22
21702: PUSH
21703: LD_INT 25
21705: PUSH
21706: LD_INT 32
21708: PUSH
21709: LD_INT 27
21711: PUSH
21712: LD_INT 36
21714: PUSH
21715: LD_INT 69
21717: PUSH
21718: LD_INT 39
21720: PUSH
21721: LD_INT 34
21723: PUSH
21724: LD_INT 40
21726: PUSH
21727: LD_INT 48
21729: PUSH
21730: LD_INT 49
21732: PUSH
21733: LD_INT 50
21735: PUSH
21736: LD_INT 51
21738: PUSH
21739: LD_INT 52
21741: PUSH
21742: LD_INT 53
21744: PUSH
21745: LD_INT 54
21747: PUSH
21748: LD_INT 55
21750: PUSH
21751: LD_INT 56
21753: PUSH
21754: LD_INT 57
21756: PUSH
21757: LD_INT 58
21759: PUSH
21760: LD_INT 59
21762: PUSH
21763: LD_INT 60
21765: PUSH
21766: LD_INT 61
21768: PUSH
21769: LD_INT 62
21771: PUSH
21772: LD_INT 80
21774: PUSH
21775: LD_INT 82
21777: PUSH
21778: LD_INT 83
21780: PUSH
21781: LD_INT 84
21783: PUSH
21784: LD_INT 85
21786: PUSH
21787: LD_INT 86
21789: PUSH
21790: EMPTY
21791: LIST
21792: LIST
21793: LIST
21794: LIST
21795: LIST
21796: LIST
21797: LIST
21798: LIST
21799: LIST
21800: LIST
21801: LIST
21802: LIST
21803: LIST
21804: LIST
21805: LIST
21806: LIST
21807: LIST
21808: LIST
21809: LIST
21810: LIST
21811: LIST
21812: LIST
21813: LIST
21814: LIST
21815: LIST
21816: LIST
21817: LIST
21818: LIST
21819: LIST
21820: LIST
21821: LIST
21822: LIST
21823: LIST
21824: LIST
21825: LIST
21826: LIST
21827: LIST
21828: LIST
21829: LIST
21830: LIST
21831: LIST
21832: LIST
21833: LIST
21834: LIST
21835: LIST
21836: LIST
21837: LIST
21838: LIST
21839: LIST
21840: LIST
21841: LIST
21842: ST_TO_ADDR
21843: GO 22310
21845: LD_INT 2
21847: DOUBLE
21848: EQUAL
21849: IFTRUE 21853
21851: GO 22079
21853: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
21854: LD_ADDR_VAR 0 4
21858: PUSH
21859: LD_INT 35
21861: PUSH
21862: LD_INT 45
21864: PUSH
21865: LD_INT 46
21867: PUSH
21868: LD_INT 47
21870: PUSH
21871: LD_INT 82
21873: PUSH
21874: LD_INT 83
21876: PUSH
21877: LD_INT 84
21879: PUSH
21880: LD_INT 85
21882: PUSH
21883: LD_INT 87
21885: PUSH
21886: LD_INT 70
21888: PUSH
21889: LD_INT 1
21891: PUSH
21892: LD_INT 11
21894: PUSH
21895: LD_INT 3
21897: PUSH
21898: LD_INT 4
21900: PUSH
21901: LD_INT 5
21903: PUSH
21904: LD_INT 6
21906: PUSH
21907: LD_INT 15
21909: PUSH
21910: LD_INT 18
21912: PUSH
21913: LD_INT 7
21915: PUSH
21916: LD_INT 17
21918: PUSH
21919: LD_INT 8
21921: PUSH
21922: LD_INT 20
21924: PUSH
21925: LD_INT 21
21927: PUSH
21928: LD_INT 22
21930: PUSH
21931: LD_INT 72
21933: PUSH
21934: LD_INT 26
21936: PUSH
21937: LD_INT 69
21939: PUSH
21940: LD_INT 39
21942: PUSH
21943: LD_INT 40
21945: PUSH
21946: LD_INT 41
21948: PUSH
21949: LD_INT 42
21951: PUSH
21952: LD_INT 43
21954: PUSH
21955: LD_INT 48
21957: PUSH
21958: LD_INT 49
21960: PUSH
21961: LD_INT 50
21963: PUSH
21964: LD_INT 51
21966: PUSH
21967: LD_INT 52
21969: PUSH
21970: LD_INT 53
21972: PUSH
21973: LD_INT 54
21975: PUSH
21976: LD_INT 55
21978: PUSH
21979: LD_INT 56
21981: PUSH
21982: LD_INT 60
21984: PUSH
21985: LD_INT 61
21987: PUSH
21988: LD_INT 62
21990: PUSH
21991: LD_INT 66
21993: PUSH
21994: LD_INT 67
21996: PUSH
21997: LD_INT 68
21999: PUSH
22000: LD_INT 81
22002: PUSH
22003: LD_INT 82
22005: PUSH
22006: LD_INT 83
22008: PUSH
22009: LD_INT 84
22011: PUSH
22012: LD_INT 85
22014: PUSH
22015: LD_INT 87
22017: PUSH
22018: LD_INT 88
22020: PUSH
22021: EMPTY
22022: LIST
22023: LIST
22024: LIST
22025: LIST
22026: LIST
22027: LIST
22028: LIST
22029: LIST
22030: LIST
22031: LIST
22032: LIST
22033: LIST
22034: LIST
22035: LIST
22036: LIST
22037: LIST
22038: LIST
22039: LIST
22040: LIST
22041: LIST
22042: LIST
22043: LIST
22044: LIST
22045: LIST
22046: LIST
22047: LIST
22048: LIST
22049: LIST
22050: LIST
22051: LIST
22052: LIST
22053: LIST
22054: LIST
22055: LIST
22056: LIST
22057: LIST
22058: LIST
22059: LIST
22060: LIST
22061: LIST
22062: LIST
22063: LIST
22064: LIST
22065: LIST
22066: LIST
22067: LIST
22068: LIST
22069: LIST
22070: LIST
22071: LIST
22072: LIST
22073: LIST
22074: LIST
22075: LIST
22076: ST_TO_ADDR
22077: GO 22310
22079: LD_INT 3
22081: DOUBLE
22082: EQUAL
22083: IFTRUE 22087
22085: GO 22309
22087: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
22088: LD_ADDR_VAR 0 4
22092: PUSH
22093: LD_INT 46
22095: PUSH
22096: LD_INT 47
22098: PUSH
22099: LD_INT 1
22101: PUSH
22102: LD_INT 2
22104: PUSH
22105: LD_INT 82
22107: PUSH
22108: LD_INT 83
22110: PUSH
22111: LD_INT 84
22113: PUSH
22114: LD_INT 85
22116: PUSH
22117: LD_INT 86
22119: PUSH
22120: LD_INT 11
22122: PUSH
22123: LD_INT 9
22125: PUSH
22126: LD_INT 20
22128: PUSH
22129: LD_INT 19
22131: PUSH
22132: LD_INT 21
22134: PUSH
22135: LD_INT 24
22137: PUSH
22138: LD_INT 22
22140: PUSH
22141: LD_INT 25
22143: PUSH
22144: LD_INT 28
22146: PUSH
22147: LD_INT 29
22149: PUSH
22150: LD_INT 30
22152: PUSH
22153: LD_INT 31
22155: PUSH
22156: LD_INT 37
22158: PUSH
22159: LD_INT 38
22161: PUSH
22162: LD_INT 32
22164: PUSH
22165: LD_INT 27
22167: PUSH
22168: LD_INT 33
22170: PUSH
22171: LD_INT 69
22173: PUSH
22174: LD_INT 39
22176: PUSH
22177: LD_INT 34
22179: PUSH
22180: LD_INT 40
22182: PUSH
22183: LD_INT 71
22185: PUSH
22186: LD_INT 23
22188: PUSH
22189: LD_INT 44
22191: PUSH
22192: LD_INT 48
22194: PUSH
22195: LD_INT 49
22197: PUSH
22198: LD_INT 50
22200: PUSH
22201: LD_INT 51
22203: PUSH
22204: LD_INT 52
22206: PUSH
22207: LD_INT 53
22209: PUSH
22210: LD_INT 54
22212: PUSH
22213: LD_INT 55
22215: PUSH
22216: LD_INT 56
22218: PUSH
22219: LD_INT 57
22221: PUSH
22222: LD_INT 58
22224: PUSH
22225: LD_INT 59
22227: PUSH
22228: LD_INT 63
22230: PUSH
22231: LD_INT 64
22233: PUSH
22234: LD_INT 65
22236: PUSH
22237: LD_INT 82
22239: PUSH
22240: LD_INT 83
22242: PUSH
22243: LD_INT 84
22245: PUSH
22246: LD_INT 85
22248: PUSH
22249: LD_INT 86
22251: PUSH
22252: EMPTY
22253: LIST
22254: LIST
22255: LIST
22256: LIST
22257: LIST
22258: LIST
22259: LIST
22260: LIST
22261: LIST
22262: LIST
22263: LIST
22264: LIST
22265: LIST
22266: LIST
22267: LIST
22268: LIST
22269: LIST
22270: LIST
22271: LIST
22272: LIST
22273: LIST
22274: LIST
22275: LIST
22276: LIST
22277: LIST
22278: LIST
22279: LIST
22280: LIST
22281: LIST
22282: LIST
22283: LIST
22284: LIST
22285: LIST
22286: LIST
22287: LIST
22288: LIST
22289: LIST
22290: LIST
22291: LIST
22292: LIST
22293: LIST
22294: LIST
22295: LIST
22296: LIST
22297: LIST
22298: LIST
22299: LIST
22300: LIST
22301: LIST
22302: LIST
22303: LIST
22304: LIST
22305: LIST
22306: ST_TO_ADDR
22307: GO 22310
22309: POP
// if state > - 1 and state < 3 then
22310: LD_VAR 0 3
22314: PUSH
22315: LD_INT 1
22317: NEG
22318: GREATER
22319: PUSH
22320: LD_VAR 0 3
22324: PUSH
22325: LD_INT 3
22327: LESS
22328: AND
22329: IFFALSE 22386
// for i in result do
22331: LD_ADDR_VAR 0 5
22335: PUSH
22336: LD_VAR 0 4
22340: PUSH
22341: FOR_IN
22342: IFFALSE 22384
// if GetTech ( i , side ) <> state then
22344: LD_VAR 0 5
22348: PPUSH
22349: LD_VAR 0 1
22353: PPUSH
22354: CALL_OW 321
22358: PUSH
22359: LD_VAR 0 3
22363: NONEQUAL
22364: IFFALSE 22382
// result := result diff i ;
22366: LD_ADDR_VAR 0 4
22370: PUSH
22371: LD_VAR 0 4
22375: PUSH
22376: LD_VAR 0 5
22380: DIFF
22381: ST_TO_ADDR
22382: GO 22341
22384: POP
22385: POP
// end ;
22386: LD_VAR 0 4
22390: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
22391: LD_INT 0
22393: PPUSH
22394: PPUSH
22395: PPUSH
// result := true ;
22396: LD_ADDR_VAR 0 3
22400: PUSH
22401: LD_INT 1
22403: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
22404: LD_ADDR_VAR 0 5
22408: PUSH
22409: LD_VAR 0 2
22413: PPUSH
22414: CALL_OW 480
22418: ST_TO_ADDR
// if not tmp then
22419: LD_VAR 0 5
22423: NOT
22424: IFFALSE 22428
// exit ;
22426: GO 22477
// for i in tmp do
22428: LD_ADDR_VAR 0 4
22432: PUSH
22433: LD_VAR 0 5
22437: PUSH
22438: FOR_IN
22439: IFFALSE 22475
// if GetTech ( i , side ) <> state_researched then
22441: LD_VAR 0 4
22445: PPUSH
22446: LD_VAR 0 1
22450: PPUSH
22451: CALL_OW 321
22455: PUSH
22456: LD_INT 2
22458: NONEQUAL
22459: IFFALSE 22473
// begin result := false ;
22461: LD_ADDR_VAR 0 3
22465: PUSH
22466: LD_INT 0
22468: ST_TO_ADDR
// exit ;
22469: POP
22470: POP
22471: GO 22477
// end ;
22473: GO 22438
22475: POP
22476: POP
// end ;
22477: LD_VAR 0 3
22481: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
22482: LD_INT 0
22484: PPUSH
22485: PPUSH
22486: PPUSH
22487: PPUSH
22488: PPUSH
22489: PPUSH
22490: PPUSH
22491: PPUSH
22492: PPUSH
22493: PPUSH
22494: PPUSH
22495: PPUSH
22496: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
22497: LD_VAR 0 1
22501: NOT
22502: PUSH
22503: LD_VAR 0 1
22507: PPUSH
22508: CALL_OW 257
22512: PUSH
22513: LD_INT 9
22515: NONEQUAL
22516: OR
22517: IFFALSE 22521
// exit ;
22519: GO 23094
// side := GetSide ( unit ) ;
22521: LD_ADDR_VAR 0 9
22525: PUSH
22526: LD_VAR 0 1
22530: PPUSH
22531: CALL_OW 255
22535: ST_TO_ADDR
// tech_space := tech_spacanom ;
22536: LD_ADDR_VAR 0 12
22540: PUSH
22541: LD_INT 29
22543: ST_TO_ADDR
// tech_time := tech_taurad ;
22544: LD_ADDR_VAR 0 13
22548: PUSH
22549: LD_INT 28
22551: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
22552: LD_ADDR_VAR 0 11
22556: PUSH
22557: LD_VAR 0 1
22561: PPUSH
22562: CALL_OW 310
22566: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
22567: LD_VAR 0 11
22571: PPUSH
22572: CALL_OW 247
22576: PUSH
22577: LD_INT 2
22579: EQUAL
22580: IFFALSE 22584
// exit ;
22582: GO 23094
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
22584: LD_ADDR_VAR 0 8
22588: PUSH
22589: LD_INT 81
22591: PUSH
22592: LD_VAR 0 9
22596: PUSH
22597: EMPTY
22598: LIST
22599: LIST
22600: PUSH
22601: LD_INT 3
22603: PUSH
22604: LD_INT 21
22606: PUSH
22607: LD_INT 3
22609: PUSH
22610: EMPTY
22611: LIST
22612: LIST
22613: PUSH
22614: EMPTY
22615: LIST
22616: LIST
22617: PUSH
22618: EMPTY
22619: LIST
22620: LIST
22621: PPUSH
22622: CALL_OW 69
22626: ST_TO_ADDR
// if not tmp then
22627: LD_VAR 0 8
22631: NOT
22632: IFFALSE 22636
// exit ;
22634: GO 23094
// if in_unit then
22636: LD_VAR 0 11
22640: IFFALSE 22664
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
22642: LD_ADDR_VAR 0 10
22646: PUSH
22647: LD_VAR 0 8
22651: PPUSH
22652: LD_VAR 0 11
22656: PPUSH
22657: CALL_OW 74
22661: ST_TO_ADDR
22662: GO 22684
// enemy := NearestUnitToUnit ( tmp , unit ) ;
22664: LD_ADDR_VAR 0 10
22668: PUSH
22669: LD_VAR 0 8
22673: PPUSH
22674: LD_VAR 0 1
22678: PPUSH
22679: CALL_OW 74
22683: ST_TO_ADDR
// if not enemy then
22684: LD_VAR 0 10
22688: NOT
22689: IFFALSE 22693
// exit ;
22691: GO 23094
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
22693: LD_VAR 0 11
22697: PUSH
22698: LD_VAR 0 11
22702: PPUSH
22703: LD_VAR 0 10
22707: PPUSH
22708: CALL_OW 296
22712: PUSH
22713: LD_INT 13
22715: GREATER
22716: AND
22717: PUSH
22718: LD_VAR 0 1
22722: PPUSH
22723: LD_VAR 0 10
22727: PPUSH
22728: CALL_OW 296
22732: PUSH
22733: LD_INT 12
22735: GREATER
22736: OR
22737: IFFALSE 22741
// exit ;
22739: GO 23094
// missile := [ 1 ] ;
22741: LD_ADDR_VAR 0 14
22745: PUSH
22746: LD_INT 1
22748: PUSH
22749: EMPTY
22750: LIST
22751: ST_TO_ADDR
// if Researched ( side , tech_space ) then
22752: LD_VAR 0 9
22756: PPUSH
22757: LD_VAR 0 12
22761: PPUSH
22762: CALL_OW 325
22766: IFFALSE 22795
// missile := Replace ( missile , missile + 1 , 2 ) ;
22768: LD_ADDR_VAR 0 14
22772: PUSH
22773: LD_VAR 0 14
22777: PPUSH
22778: LD_VAR 0 14
22782: PUSH
22783: LD_INT 1
22785: PLUS
22786: PPUSH
22787: LD_INT 2
22789: PPUSH
22790: CALL_OW 1
22794: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
22795: LD_VAR 0 9
22799: PPUSH
22800: LD_VAR 0 13
22804: PPUSH
22805: CALL_OW 325
22809: PUSH
22810: LD_VAR 0 10
22814: PPUSH
22815: CALL_OW 255
22819: PPUSH
22820: LD_VAR 0 13
22824: PPUSH
22825: CALL_OW 325
22829: NOT
22830: AND
22831: IFFALSE 22860
// missile := Replace ( missile , missile + 1 , 3 ) ;
22833: LD_ADDR_VAR 0 14
22837: PUSH
22838: LD_VAR 0 14
22842: PPUSH
22843: LD_VAR 0 14
22847: PUSH
22848: LD_INT 1
22850: PLUS
22851: PPUSH
22852: LD_INT 3
22854: PPUSH
22855: CALL_OW 1
22859: ST_TO_ADDR
// if missile < 2 then
22860: LD_VAR 0 14
22864: PUSH
22865: LD_INT 2
22867: LESS
22868: IFFALSE 22872
// exit ;
22870: GO 23094
// x := GetX ( enemy ) ;
22872: LD_ADDR_VAR 0 4
22876: PUSH
22877: LD_VAR 0 10
22881: PPUSH
22882: CALL_OW 250
22886: ST_TO_ADDR
// y := GetY ( enemy ) ;
22887: LD_ADDR_VAR 0 5
22891: PUSH
22892: LD_VAR 0 10
22896: PPUSH
22897: CALL_OW 251
22901: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
22902: LD_ADDR_VAR 0 6
22906: PUSH
22907: LD_VAR 0 4
22911: PUSH
22912: LD_INT 1
22914: NEG
22915: PPUSH
22916: LD_INT 1
22918: PPUSH
22919: CALL_OW 12
22923: PLUS
22924: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
22925: LD_ADDR_VAR 0 7
22929: PUSH
22930: LD_VAR 0 5
22934: PUSH
22935: LD_INT 1
22937: NEG
22938: PPUSH
22939: LD_INT 1
22941: PPUSH
22942: CALL_OW 12
22946: PLUS
22947: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
22948: LD_VAR 0 6
22952: PPUSH
22953: LD_VAR 0 7
22957: PPUSH
22958: CALL_OW 488
22962: NOT
22963: IFFALSE 22985
// begin _x := x ;
22965: LD_ADDR_VAR 0 6
22969: PUSH
22970: LD_VAR 0 4
22974: ST_TO_ADDR
// _y := y ;
22975: LD_ADDR_VAR 0 7
22979: PUSH
22980: LD_VAR 0 5
22984: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
22985: LD_ADDR_VAR 0 3
22989: PUSH
22990: LD_INT 1
22992: PPUSH
22993: LD_VAR 0 14
22997: PPUSH
22998: CALL_OW 12
23002: ST_TO_ADDR
// case i of 1 :
23003: LD_VAR 0 3
23007: PUSH
23008: LD_INT 1
23010: DOUBLE
23011: EQUAL
23012: IFTRUE 23016
23014: GO 23033
23016: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
23017: LD_VAR 0 1
23021: PPUSH
23022: LD_VAR 0 10
23026: PPUSH
23027: CALL_OW 115
23031: GO 23094
23033: LD_INT 2
23035: DOUBLE
23036: EQUAL
23037: IFTRUE 23041
23039: GO 23063
23041: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
23042: LD_VAR 0 1
23046: PPUSH
23047: LD_VAR 0 6
23051: PPUSH
23052: LD_VAR 0 7
23056: PPUSH
23057: CALL_OW 153
23061: GO 23094
23063: LD_INT 3
23065: DOUBLE
23066: EQUAL
23067: IFTRUE 23071
23069: GO 23093
23071: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
23072: LD_VAR 0 1
23076: PPUSH
23077: LD_VAR 0 6
23081: PPUSH
23082: LD_VAR 0 7
23086: PPUSH
23087: CALL_OW 154
23091: GO 23094
23093: POP
// end ;
23094: LD_VAR 0 2
23098: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
23099: LD_INT 0
23101: PPUSH
23102: PPUSH
23103: PPUSH
23104: PPUSH
23105: PPUSH
23106: PPUSH
// if not unit or not building then
23107: LD_VAR 0 1
23111: NOT
23112: PUSH
23113: LD_VAR 0 2
23117: NOT
23118: OR
23119: IFFALSE 23123
// exit ;
23121: GO 23281
// x := GetX ( building ) ;
23123: LD_ADDR_VAR 0 5
23127: PUSH
23128: LD_VAR 0 2
23132: PPUSH
23133: CALL_OW 250
23137: ST_TO_ADDR
// y := GetY ( building ) ;
23138: LD_ADDR_VAR 0 6
23142: PUSH
23143: LD_VAR 0 2
23147: PPUSH
23148: CALL_OW 251
23152: ST_TO_ADDR
// for i = 0 to 5 do
23153: LD_ADDR_VAR 0 4
23157: PUSH
23158: DOUBLE
23159: LD_INT 0
23161: DEC
23162: ST_TO_ADDR
23163: LD_INT 5
23165: PUSH
23166: FOR_TO
23167: IFFALSE 23279
// begin _x := ShiftX ( x , i , 3 ) ;
23169: LD_ADDR_VAR 0 7
23173: PUSH
23174: LD_VAR 0 5
23178: PPUSH
23179: LD_VAR 0 4
23183: PPUSH
23184: LD_INT 3
23186: PPUSH
23187: CALL_OW 272
23191: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
23192: LD_ADDR_VAR 0 8
23196: PUSH
23197: LD_VAR 0 6
23201: PPUSH
23202: LD_VAR 0 4
23206: PPUSH
23207: LD_INT 3
23209: PPUSH
23210: CALL_OW 273
23214: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
23215: LD_VAR 0 7
23219: PPUSH
23220: LD_VAR 0 8
23224: PPUSH
23225: CALL_OW 488
23229: NOT
23230: IFFALSE 23234
// continue ;
23232: GO 23166
// if HexInfo ( _x , _y ) = 0 then
23234: LD_VAR 0 7
23238: PPUSH
23239: LD_VAR 0 8
23243: PPUSH
23244: CALL_OW 428
23248: PUSH
23249: LD_INT 0
23251: EQUAL
23252: IFFALSE 23277
// begin ComMoveXY ( unit , _x , _y ) ;
23254: LD_VAR 0 1
23258: PPUSH
23259: LD_VAR 0 7
23263: PPUSH
23264: LD_VAR 0 8
23268: PPUSH
23269: CALL_OW 111
// exit ;
23273: POP
23274: POP
23275: GO 23281
// end ; end ;
23277: GO 23166
23279: POP
23280: POP
// end ;
23281: LD_VAR 0 3
23285: RET
// export function ScanBase ( side , base_area ) ; begin
23286: LD_INT 0
23288: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
23289: LD_ADDR_VAR 0 3
23293: PUSH
23294: LD_VAR 0 2
23298: PPUSH
23299: LD_INT 81
23301: PUSH
23302: LD_VAR 0 1
23306: PUSH
23307: EMPTY
23308: LIST
23309: LIST
23310: PPUSH
23311: CALL_OW 70
23315: ST_TO_ADDR
// end ;
23316: LD_VAR 0 3
23320: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
23321: LD_INT 0
23323: PPUSH
23324: PPUSH
23325: PPUSH
23326: PPUSH
// result := false ;
23327: LD_ADDR_VAR 0 2
23331: PUSH
23332: LD_INT 0
23334: ST_TO_ADDR
// side := GetSide ( unit ) ;
23335: LD_ADDR_VAR 0 3
23339: PUSH
23340: LD_VAR 0 1
23344: PPUSH
23345: CALL_OW 255
23349: ST_TO_ADDR
// nat := GetNation ( unit ) ;
23350: LD_ADDR_VAR 0 4
23354: PUSH
23355: LD_VAR 0 1
23359: PPUSH
23360: CALL_OW 248
23364: ST_TO_ADDR
// case nat of 1 :
23365: LD_VAR 0 4
23369: PUSH
23370: LD_INT 1
23372: DOUBLE
23373: EQUAL
23374: IFTRUE 23378
23376: GO 23389
23378: POP
// tech := tech_lassight ; 2 :
23379: LD_ADDR_VAR 0 5
23383: PUSH
23384: LD_INT 12
23386: ST_TO_ADDR
23387: GO 23428
23389: LD_INT 2
23391: DOUBLE
23392: EQUAL
23393: IFTRUE 23397
23395: GO 23408
23397: POP
// tech := tech_mortar ; 3 :
23398: LD_ADDR_VAR 0 5
23402: PUSH
23403: LD_INT 41
23405: ST_TO_ADDR
23406: GO 23428
23408: LD_INT 3
23410: DOUBLE
23411: EQUAL
23412: IFTRUE 23416
23414: GO 23427
23416: POP
// tech := tech_bazooka ; end ;
23417: LD_ADDR_VAR 0 5
23421: PUSH
23422: LD_INT 44
23424: ST_TO_ADDR
23425: GO 23428
23427: POP
// if Researched ( side , tech ) then
23428: LD_VAR 0 3
23432: PPUSH
23433: LD_VAR 0 5
23437: PPUSH
23438: CALL_OW 325
23442: IFFALSE 23469
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
23444: LD_ADDR_VAR 0 2
23448: PUSH
23449: LD_INT 5
23451: PUSH
23452: LD_INT 8
23454: PUSH
23455: LD_INT 9
23457: PUSH
23458: EMPTY
23459: LIST
23460: LIST
23461: LIST
23462: PUSH
23463: LD_VAR 0 4
23467: ARRAY
23468: ST_TO_ADDR
// end ;
23469: LD_VAR 0 2
23473: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
23474: LD_INT 0
23476: PPUSH
23477: PPUSH
23478: PPUSH
// if not mines then
23479: LD_VAR 0 2
23483: NOT
23484: IFFALSE 23488
// exit ;
23486: GO 23632
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
23488: LD_ADDR_VAR 0 5
23492: PUSH
23493: LD_INT 81
23495: PUSH
23496: LD_VAR 0 1
23500: PUSH
23501: EMPTY
23502: LIST
23503: LIST
23504: PUSH
23505: LD_INT 3
23507: PUSH
23508: LD_INT 21
23510: PUSH
23511: LD_INT 3
23513: PUSH
23514: EMPTY
23515: LIST
23516: LIST
23517: PUSH
23518: EMPTY
23519: LIST
23520: LIST
23521: PUSH
23522: EMPTY
23523: LIST
23524: LIST
23525: PPUSH
23526: CALL_OW 69
23530: ST_TO_ADDR
// for i in mines do
23531: LD_ADDR_VAR 0 4
23535: PUSH
23536: LD_VAR 0 2
23540: PUSH
23541: FOR_IN
23542: IFFALSE 23630
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
23544: LD_VAR 0 4
23548: PUSH
23549: LD_INT 1
23551: ARRAY
23552: PPUSH
23553: LD_VAR 0 4
23557: PUSH
23558: LD_INT 2
23560: ARRAY
23561: PPUSH
23562: CALL_OW 458
23566: NOT
23567: IFFALSE 23571
// continue ;
23569: GO 23541
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
23571: LD_VAR 0 4
23575: PUSH
23576: LD_INT 1
23578: ARRAY
23579: PPUSH
23580: LD_VAR 0 4
23584: PUSH
23585: LD_INT 2
23587: ARRAY
23588: PPUSH
23589: CALL_OW 428
23593: PUSH
23594: LD_VAR 0 5
23598: IN
23599: IFFALSE 23628
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
23601: LD_VAR 0 4
23605: PUSH
23606: LD_INT 1
23608: ARRAY
23609: PPUSH
23610: LD_VAR 0 4
23614: PUSH
23615: LD_INT 2
23617: ARRAY
23618: PPUSH
23619: LD_VAR 0 1
23623: PPUSH
23624: CALL_OW 456
// end ;
23628: GO 23541
23630: POP
23631: POP
// end ;
23632: LD_VAR 0 3
23636: RET
// export function Count ( array ) ; begin
23637: LD_INT 0
23639: PPUSH
// result := array + 0 ;
23640: LD_ADDR_VAR 0 2
23644: PUSH
23645: LD_VAR 0 1
23649: PUSH
23650: LD_INT 0
23652: PLUS
23653: ST_TO_ADDR
// end ;
23654: LD_VAR 0 2
23658: RET
// export function IsEmpty ( building ) ; begin
23659: LD_INT 0
23661: PPUSH
// if not building then
23662: LD_VAR 0 1
23666: NOT
23667: IFFALSE 23671
// exit ;
23669: GO 23714
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
23671: LD_ADDR_VAR 0 2
23675: PUSH
23676: LD_VAR 0 1
23680: PUSH
23681: LD_INT 22
23683: PUSH
23684: LD_VAR 0 1
23688: PPUSH
23689: CALL_OW 255
23693: PUSH
23694: EMPTY
23695: LIST
23696: LIST
23697: PUSH
23698: LD_INT 58
23700: PUSH
23701: EMPTY
23702: LIST
23703: PUSH
23704: EMPTY
23705: LIST
23706: LIST
23707: PPUSH
23708: CALL_OW 69
23712: IN
23713: ST_TO_ADDR
// end ;
23714: LD_VAR 0 2
23718: RET
// export function IsNotFull ( building ) ; var places ; begin
23719: LD_INT 0
23721: PPUSH
23722: PPUSH
// if not building then
23723: LD_VAR 0 1
23727: NOT
23728: IFFALSE 23732
// exit ;
23730: GO 23760
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
23732: LD_ADDR_VAR 0 2
23736: PUSH
23737: LD_VAR 0 1
23741: PPUSH
23742: LD_INT 3
23744: PUSH
23745: LD_INT 62
23747: PUSH
23748: EMPTY
23749: LIST
23750: PUSH
23751: EMPTY
23752: LIST
23753: LIST
23754: PPUSH
23755: CALL_OW 72
23759: ST_TO_ADDR
// end ;
23760: LD_VAR 0 2
23764: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
23765: LD_INT 0
23767: PPUSH
23768: PPUSH
23769: PPUSH
23770: PPUSH
// tmp := [ ] ;
23771: LD_ADDR_VAR 0 3
23775: PUSH
23776: EMPTY
23777: ST_TO_ADDR
// list := [ ] ;
23778: LD_ADDR_VAR 0 5
23782: PUSH
23783: EMPTY
23784: ST_TO_ADDR
// for i = 16 to 25 do
23785: LD_ADDR_VAR 0 4
23789: PUSH
23790: DOUBLE
23791: LD_INT 16
23793: DEC
23794: ST_TO_ADDR
23795: LD_INT 25
23797: PUSH
23798: FOR_TO
23799: IFFALSE 23872
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
23801: LD_ADDR_VAR 0 3
23805: PUSH
23806: LD_VAR 0 3
23810: PUSH
23811: LD_INT 22
23813: PUSH
23814: LD_VAR 0 1
23818: PPUSH
23819: CALL_OW 255
23823: PUSH
23824: EMPTY
23825: LIST
23826: LIST
23827: PUSH
23828: LD_INT 91
23830: PUSH
23831: LD_VAR 0 1
23835: PUSH
23836: LD_INT 6
23838: PUSH
23839: EMPTY
23840: LIST
23841: LIST
23842: LIST
23843: PUSH
23844: LD_INT 30
23846: PUSH
23847: LD_VAR 0 4
23851: PUSH
23852: EMPTY
23853: LIST
23854: LIST
23855: PUSH
23856: EMPTY
23857: LIST
23858: LIST
23859: LIST
23860: PUSH
23861: EMPTY
23862: LIST
23863: PPUSH
23864: CALL_OW 69
23868: ADD
23869: ST_TO_ADDR
23870: GO 23798
23872: POP
23873: POP
// for i = 1 to tmp do
23874: LD_ADDR_VAR 0 4
23878: PUSH
23879: DOUBLE
23880: LD_INT 1
23882: DEC
23883: ST_TO_ADDR
23884: LD_VAR 0 3
23888: PUSH
23889: FOR_TO
23890: IFFALSE 23978
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
23892: LD_ADDR_VAR 0 5
23896: PUSH
23897: LD_VAR 0 5
23901: PUSH
23902: LD_VAR 0 3
23906: PUSH
23907: LD_VAR 0 4
23911: ARRAY
23912: PPUSH
23913: CALL_OW 266
23917: PUSH
23918: LD_VAR 0 3
23922: PUSH
23923: LD_VAR 0 4
23927: ARRAY
23928: PPUSH
23929: CALL_OW 250
23933: PUSH
23934: LD_VAR 0 3
23938: PUSH
23939: LD_VAR 0 4
23943: ARRAY
23944: PPUSH
23945: CALL_OW 251
23949: PUSH
23950: LD_VAR 0 3
23954: PUSH
23955: LD_VAR 0 4
23959: ARRAY
23960: PPUSH
23961: CALL_OW 254
23965: PUSH
23966: EMPTY
23967: LIST
23968: LIST
23969: LIST
23970: LIST
23971: PUSH
23972: EMPTY
23973: LIST
23974: ADD
23975: ST_TO_ADDR
23976: GO 23889
23978: POP
23979: POP
// result := list ;
23980: LD_ADDR_VAR 0 2
23984: PUSH
23985: LD_VAR 0 5
23989: ST_TO_ADDR
// end ;
23990: LD_VAR 0 2
23994: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
23995: LD_INT 0
23997: PPUSH
23998: PPUSH
23999: PPUSH
24000: PPUSH
24001: PPUSH
24002: PPUSH
24003: PPUSH
// if not factory then
24004: LD_VAR 0 1
24008: NOT
24009: IFFALSE 24013
// exit ;
24011: GO 24606
// if control = control_apeman then
24013: LD_VAR 0 4
24017: PUSH
24018: LD_INT 5
24020: EQUAL
24021: IFFALSE 24130
// begin tmp := UnitsInside ( factory ) ;
24023: LD_ADDR_VAR 0 8
24027: PUSH
24028: LD_VAR 0 1
24032: PPUSH
24033: CALL_OW 313
24037: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
24038: LD_VAR 0 8
24042: PPUSH
24043: LD_INT 25
24045: PUSH
24046: LD_INT 12
24048: PUSH
24049: EMPTY
24050: LIST
24051: LIST
24052: PPUSH
24053: CALL_OW 72
24057: NOT
24058: IFFALSE 24068
// control := control_manual ;
24060: LD_ADDR_VAR 0 4
24064: PUSH
24065: LD_INT 1
24067: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
24068: LD_ADDR_VAR 0 8
24072: PUSH
24073: LD_VAR 0 1
24077: PPUSH
24078: CALL 23765 0 1
24082: ST_TO_ADDR
// if tmp then
24083: LD_VAR 0 8
24087: IFFALSE 24130
// begin for i in tmp do
24089: LD_ADDR_VAR 0 7
24093: PUSH
24094: LD_VAR 0 8
24098: PUSH
24099: FOR_IN
24100: IFFALSE 24128
// if i [ 1 ] = b_ext_radio then
24102: LD_VAR 0 7
24106: PUSH
24107: LD_INT 1
24109: ARRAY
24110: PUSH
24111: LD_INT 22
24113: EQUAL
24114: IFFALSE 24126
// begin control := control_remote ;
24116: LD_ADDR_VAR 0 4
24120: PUSH
24121: LD_INT 2
24123: ST_TO_ADDR
// break ;
24124: GO 24128
// end ;
24126: GO 24099
24128: POP
24129: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
24130: LD_VAR 0 1
24134: PPUSH
24135: LD_VAR 0 2
24139: PPUSH
24140: LD_VAR 0 3
24144: PPUSH
24145: LD_VAR 0 4
24149: PPUSH
24150: LD_VAR 0 5
24154: PPUSH
24155: CALL_OW 448
24159: IFFALSE 24194
// begin result := [ chassis , engine , control , weapon ] ;
24161: LD_ADDR_VAR 0 6
24165: PUSH
24166: LD_VAR 0 2
24170: PUSH
24171: LD_VAR 0 3
24175: PUSH
24176: LD_VAR 0 4
24180: PUSH
24181: LD_VAR 0 5
24185: PUSH
24186: EMPTY
24187: LIST
24188: LIST
24189: LIST
24190: LIST
24191: ST_TO_ADDR
// exit ;
24192: GO 24606
// end ; _chassis := AvailableChassisList ( factory ) ;
24194: LD_ADDR_VAR 0 9
24198: PUSH
24199: LD_VAR 0 1
24203: PPUSH
24204: CALL_OW 475
24208: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
24209: LD_ADDR_VAR 0 11
24213: PUSH
24214: LD_VAR 0 1
24218: PPUSH
24219: CALL_OW 476
24223: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
24224: LD_ADDR_VAR 0 12
24228: PUSH
24229: LD_VAR 0 1
24233: PPUSH
24234: CALL_OW 477
24238: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
24239: LD_ADDR_VAR 0 10
24243: PUSH
24244: LD_VAR 0 1
24248: PPUSH
24249: CALL_OW 478
24253: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
24254: LD_VAR 0 9
24258: NOT
24259: PUSH
24260: LD_VAR 0 11
24264: NOT
24265: OR
24266: PUSH
24267: LD_VAR 0 12
24271: NOT
24272: OR
24273: PUSH
24274: LD_VAR 0 10
24278: NOT
24279: OR
24280: IFFALSE 24315
// begin result := [ chassis , engine , control , weapon ] ;
24282: LD_ADDR_VAR 0 6
24286: PUSH
24287: LD_VAR 0 2
24291: PUSH
24292: LD_VAR 0 3
24296: PUSH
24297: LD_VAR 0 4
24301: PUSH
24302: LD_VAR 0 5
24306: PUSH
24307: EMPTY
24308: LIST
24309: LIST
24310: LIST
24311: LIST
24312: ST_TO_ADDR
// exit ;
24313: GO 24606
// end ; if not chassis in _chassis then
24315: LD_VAR 0 2
24319: PUSH
24320: LD_VAR 0 9
24324: IN
24325: NOT
24326: IFFALSE 24352
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
24328: LD_ADDR_VAR 0 2
24332: PUSH
24333: LD_VAR 0 9
24337: PUSH
24338: LD_INT 1
24340: PPUSH
24341: LD_VAR 0 9
24345: PPUSH
24346: CALL_OW 12
24350: ARRAY
24351: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
24352: LD_VAR 0 2
24356: PPUSH
24357: LD_VAR 0 3
24361: PPUSH
24362: CALL 24611 0 2
24366: NOT
24367: IFFALSE 24426
// repeat engine := _engine [ 1 ] ;
24369: LD_ADDR_VAR 0 3
24373: PUSH
24374: LD_VAR 0 11
24378: PUSH
24379: LD_INT 1
24381: ARRAY
24382: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
24383: LD_ADDR_VAR 0 11
24387: PUSH
24388: LD_VAR 0 11
24392: PPUSH
24393: LD_INT 1
24395: PPUSH
24396: CALL_OW 3
24400: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
24401: LD_VAR 0 2
24405: PPUSH
24406: LD_VAR 0 3
24410: PPUSH
24411: CALL 24611 0 2
24415: PUSH
24416: LD_VAR 0 11
24420: PUSH
24421: EMPTY
24422: EQUAL
24423: OR
24424: IFFALSE 24369
// if not control in _control then
24426: LD_VAR 0 4
24430: PUSH
24431: LD_VAR 0 12
24435: IN
24436: NOT
24437: IFFALSE 24463
// control := _control [ rand ( 1 , _control ) ] ;
24439: LD_ADDR_VAR 0 4
24443: PUSH
24444: LD_VAR 0 12
24448: PUSH
24449: LD_INT 1
24451: PPUSH
24452: LD_VAR 0 12
24456: PPUSH
24457: CALL_OW 12
24461: ARRAY
24462: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
24463: LD_VAR 0 2
24467: PPUSH
24468: LD_VAR 0 5
24472: PPUSH
24473: CALL 24831 0 2
24477: NOT
24478: IFFALSE 24537
// repeat weapon := _weapon [ 1 ] ;
24480: LD_ADDR_VAR 0 5
24484: PUSH
24485: LD_VAR 0 10
24489: PUSH
24490: LD_INT 1
24492: ARRAY
24493: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
24494: LD_ADDR_VAR 0 10
24498: PUSH
24499: LD_VAR 0 10
24503: PPUSH
24504: LD_INT 1
24506: PPUSH
24507: CALL_OW 3
24511: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
24512: LD_VAR 0 2
24516: PPUSH
24517: LD_VAR 0 5
24521: PPUSH
24522: CALL 24831 0 2
24526: PUSH
24527: LD_VAR 0 10
24531: PUSH
24532: EMPTY
24533: EQUAL
24534: OR
24535: IFFALSE 24480
// result := [ ] ;
24537: LD_ADDR_VAR 0 6
24541: PUSH
24542: EMPTY
24543: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
24544: LD_VAR 0 1
24548: PPUSH
24549: LD_VAR 0 2
24553: PPUSH
24554: LD_VAR 0 3
24558: PPUSH
24559: LD_VAR 0 4
24563: PPUSH
24564: LD_VAR 0 5
24568: PPUSH
24569: CALL_OW 448
24573: IFFALSE 24606
// result := [ chassis , engine , control , weapon ] ;
24575: LD_ADDR_VAR 0 6
24579: PUSH
24580: LD_VAR 0 2
24584: PUSH
24585: LD_VAR 0 3
24589: PUSH
24590: LD_VAR 0 4
24594: PUSH
24595: LD_VAR 0 5
24599: PUSH
24600: EMPTY
24601: LIST
24602: LIST
24603: LIST
24604: LIST
24605: ST_TO_ADDR
// end ;
24606: LD_VAR 0 6
24610: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
24611: LD_INT 0
24613: PPUSH
// if not chassis or not engine then
24614: LD_VAR 0 1
24618: NOT
24619: PUSH
24620: LD_VAR 0 2
24624: NOT
24625: OR
24626: IFFALSE 24630
// exit ;
24628: GO 24826
// case engine of engine_solar :
24630: LD_VAR 0 2
24634: PUSH
24635: LD_INT 2
24637: DOUBLE
24638: EQUAL
24639: IFTRUE 24643
24641: GO 24681
24643: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
24644: LD_ADDR_VAR 0 3
24648: PUSH
24649: LD_INT 11
24651: PUSH
24652: LD_INT 12
24654: PUSH
24655: LD_INT 13
24657: PUSH
24658: LD_INT 14
24660: PUSH
24661: LD_INT 1
24663: PUSH
24664: LD_INT 2
24666: PUSH
24667: LD_INT 3
24669: PUSH
24670: EMPTY
24671: LIST
24672: LIST
24673: LIST
24674: LIST
24675: LIST
24676: LIST
24677: LIST
24678: ST_TO_ADDR
24679: GO 24810
24681: LD_INT 1
24683: DOUBLE
24684: EQUAL
24685: IFTRUE 24689
24687: GO 24751
24689: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
24690: LD_ADDR_VAR 0 3
24694: PUSH
24695: LD_INT 11
24697: PUSH
24698: LD_INT 12
24700: PUSH
24701: LD_INT 13
24703: PUSH
24704: LD_INT 14
24706: PUSH
24707: LD_INT 1
24709: PUSH
24710: LD_INT 2
24712: PUSH
24713: LD_INT 3
24715: PUSH
24716: LD_INT 4
24718: PUSH
24719: LD_INT 5
24721: PUSH
24722: LD_INT 21
24724: PUSH
24725: LD_INT 23
24727: PUSH
24728: LD_INT 22
24730: PUSH
24731: LD_INT 24
24733: PUSH
24734: EMPTY
24735: LIST
24736: LIST
24737: LIST
24738: LIST
24739: LIST
24740: LIST
24741: LIST
24742: LIST
24743: LIST
24744: LIST
24745: LIST
24746: LIST
24747: LIST
24748: ST_TO_ADDR
24749: GO 24810
24751: LD_INT 3
24753: DOUBLE
24754: EQUAL
24755: IFTRUE 24759
24757: GO 24809
24759: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
24760: LD_ADDR_VAR 0 3
24764: PUSH
24765: LD_INT 13
24767: PUSH
24768: LD_INT 14
24770: PUSH
24771: LD_INT 2
24773: PUSH
24774: LD_INT 3
24776: PUSH
24777: LD_INT 4
24779: PUSH
24780: LD_INT 5
24782: PUSH
24783: LD_INT 21
24785: PUSH
24786: LD_INT 22
24788: PUSH
24789: LD_INT 23
24791: PUSH
24792: LD_INT 24
24794: PUSH
24795: EMPTY
24796: LIST
24797: LIST
24798: LIST
24799: LIST
24800: LIST
24801: LIST
24802: LIST
24803: LIST
24804: LIST
24805: LIST
24806: ST_TO_ADDR
24807: GO 24810
24809: POP
// result := ( chassis in result ) ;
24810: LD_ADDR_VAR 0 3
24814: PUSH
24815: LD_VAR 0 1
24819: PUSH
24820: LD_VAR 0 3
24824: IN
24825: ST_TO_ADDR
// end ;
24826: LD_VAR 0 3
24830: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
24831: LD_INT 0
24833: PPUSH
// if not chassis or not weapon then
24834: LD_VAR 0 1
24838: NOT
24839: PUSH
24840: LD_VAR 0 2
24844: NOT
24845: OR
24846: IFFALSE 24850
// exit ;
24848: GO 25910
// case weapon of us_machine_gun :
24850: LD_VAR 0 2
24854: PUSH
24855: LD_INT 2
24857: DOUBLE
24858: EQUAL
24859: IFTRUE 24863
24861: GO 24893
24863: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
24864: LD_ADDR_VAR 0 3
24868: PUSH
24869: LD_INT 1
24871: PUSH
24872: LD_INT 2
24874: PUSH
24875: LD_INT 3
24877: PUSH
24878: LD_INT 4
24880: PUSH
24881: LD_INT 5
24883: PUSH
24884: EMPTY
24885: LIST
24886: LIST
24887: LIST
24888: LIST
24889: LIST
24890: ST_TO_ADDR
24891: GO 25894
24893: LD_INT 3
24895: DOUBLE
24896: EQUAL
24897: IFTRUE 24901
24899: GO 24931
24901: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
24902: LD_ADDR_VAR 0 3
24906: PUSH
24907: LD_INT 1
24909: PUSH
24910: LD_INT 2
24912: PUSH
24913: LD_INT 3
24915: PUSH
24916: LD_INT 4
24918: PUSH
24919: LD_INT 5
24921: PUSH
24922: EMPTY
24923: LIST
24924: LIST
24925: LIST
24926: LIST
24927: LIST
24928: ST_TO_ADDR
24929: GO 25894
24931: LD_INT 11
24933: DOUBLE
24934: EQUAL
24935: IFTRUE 24939
24937: GO 24969
24939: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
24940: LD_ADDR_VAR 0 3
24944: PUSH
24945: LD_INT 1
24947: PUSH
24948: LD_INT 2
24950: PUSH
24951: LD_INT 3
24953: PUSH
24954: LD_INT 4
24956: PUSH
24957: LD_INT 5
24959: PUSH
24960: EMPTY
24961: LIST
24962: LIST
24963: LIST
24964: LIST
24965: LIST
24966: ST_TO_ADDR
24967: GO 25894
24969: LD_INT 4
24971: DOUBLE
24972: EQUAL
24973: IFTRUE 24977
24975: GO 25003
24977: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
24978: LD_ADDR_VAR 0 3
24982: PUSH
24983: LD_INT 2
24985: PUSH
24986: LD_INT 3
24988: PUSH
24989: LD_INT 4
24991: PUSH
24992: LD_INT 5
24994: PUSH
24995: EMPTY
24996: LIST
24997: LIST
24998: LIST
24999: LIST
25000: ST_TO_ADDR
25001: GO 25894
25003: LD_INT 5
25005: DOUBLE
25006: EQUAL
25007: IFTRUE 25011
25009: GO 25037
25011: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
25012: LD_ADDR_VAR 0 3
25016: PUSH
25017: LD_INT 2
25019: PUSH
25020: LD_INT 3
25022: PUSH
25023: LD_INT 4
25025: PUSH
25026: LD_INT 5
25028: PUSH
25029: EMPTY
25030: LIST
25031: LIST
25032: LIST
25033: LIST
25034: ST_TO_ADDR
25035: GO 25894
25037: LD_INT 9
25039: DOUBLE
25040: EQUAL
25041: IFTRUE 25045
25043: GO 25071
25045: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
25046: LD_ADDR_VAR 0 3
25050: PUSH
25051: LD_INT 2
25053: PUSH
25054: LD_INT 3
25056: PUSH
25057: LD_INT 4
25059: PUSH
25060: LD_INT 5
25062: PUSH
25063: EMPTY
25064: LIST
25065: LIST
25066: LIST
25067: LIST
25068: ST_TO_ADDR
25069: GO 25894
25071: LD_INT 7
25073: DOUBLE
25074: EQUAL
25075: IFTRUE 25079
25077: GO 25105
25079: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
25080: LD_ADDR_VAR 0 3
25084: PUSH
25085: LD_INT 2
25087: PUSH
25088: LD_INT 3
25090: PUSH
25091: LD_INT 4
25093: PUSH
25094: LD_INT 5
25096: PUSH
25097: EMPTY
25098: LIST
25099: LIST
25100: LIST
25101: LIST
25102: ST_TO_ADDR
25103: GO 25894
25105: LD_INT 12
25107: DOUBLE
25108: EQUAL
25109: IFTRUE 25113
25111: GO 25139
25113: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
25114: LD_ADDR_VAR 0 3
25118: PUSH
25119: LD_INT 2
25121: PUSH
25122: LD_INT 3
25124: PUSH
25125: LD_INT 4
25127: PUSH
25128: LD_INT 5
25130: PUSH
25131: EMPTY
25132: LIST
25133: LIST
25134: LIST
25135: LIST
25136: ST_TO_ADDR
25137: GO 25894
25139: LD_INT 13
25141: DOUBLE
25142: EQUAL
25143: IFTRUE 25147
25145: GO 25173
25147: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
25148: LD_ADDR_VAR 0 3
25152: PUSH
25153: LD_INT 2
25155: PUSH
25156: LD_INT 3
25158: PUSH
25159: LD_INT 4
25161: PUSH
25162: LD_INT 5
25164: PUSH
25165: EMPTY
25166: LIST
25167: LIST
25168: LIST
25169: LIST
25170: ST_TO_ADDR
25171: GO 25894
25173: LD_INT 14
25175: DOUBLE
25176: EQUAL
25177: IFTRUE 25181
25179: GO 25199
25181: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
25182: LD_ADDR_VAR 0 3
25186: PUSH
25187: LD_INT 4
25189: PUSH
25190: LD_INT 5
25192: PUSH
25193: EMPTY
25194: LIST
25195: LIST
25196: ST_TO_ADDR
25197: GO 25894
25199: LD_INT 6
25201: DOUBLE
25202: EQUAL
25203: IFTRUE 25207
25205: GO 25225
25207: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
25208: LD_ADDR_VAR 0 3
25212: PUSH
25213: LD_INT 4
25215: PUSH
25216: LD_INT 5
25218: PUSH
25219: EMPTY
25220: LIST
25221: LIST
25222: ST_TO_ADDR
25223: GO 25894
25225: LD_INT 10
25227: DOUBLE
25228: EQUAL
25229: IFTRUE 25233
25231: GO 25251
25233: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
25234: LD_ADDR_VAR 0 3
25238: PUSH
25239: LD_INT 4
25241: PUSH
25242: LD_INT 5
25244: PUSH
25245: EMPTY
25246: LIST
25247: LIST
25248: ST_TO_ADDR
25249: GO 25894
25251: LD_INT 22
25253: DOUBLE
25254: EQUAL
25255: IFTRUE 25259
25257: GO 25285
25259: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
25260: LD_ADDR_VAR 0 3
25264: PUSH
25265: LD_INT 11
25267: PUSH
25268: LD_INT 12
25270: PUSH
25271: LD_INT 13
25273: PUSH
25274: LD_INT 14
25276: PUSH
25277: EMPTY
25278: LIST
25279: LIST
25280: LIST
25281: LIST
25282: ST_TO_ADDR
25283: GO 25894
25285: LD_INT 23
25287: DOUBLE
25288: EQUAL
25289: IFTRUE 25293
25291: GO 25319
25293: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
25294: LD_ADDR_VAR 0 3
25298: PUSH
25299: LD_INT 11
25301: PUSH
25302: LD_INT 12
25304: PUSH
25305: LD_INT 13
25307: PUSH
25308: LD_INT 14
25310: PUSH
25311: EMPTY
25312: LIST
25313: LIST
25314: LIST
25315: LIST
25316: ST_TO_ADDR
25317: GO 25894
25319: LD_INT 24
25321: DOUBLE
25322: EQUAL
25323: IFTRUE 25327
25325: GO 25353
25327: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
25328: LD_ADDR_VAR 0 3
25332: PUSH
25333: LD_INT 11
25335: PUSH
25336: LD_INT 12
25338: PUSH
25339: LD_INT 13
25341: PUSH
25342: LD_INT 14
25344: PUSH
25345: EMPTY
25346: LIST
25347: LIST
25348: LIST
25349: LIST
25350: ST_TO_ADDR
25351: GO 25894
25353: LD_INT 30
25355: DOUBLE
25356: EQUAL
25357: IFTRUE 25361
25359: GO 25387
25361: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
25362: LD_ADDR_VAR 0 3
25366: PUSH
25367: LD_INT 11
25369: PUSH
25370: LD_INT 12
25372: PUSH
25373: LD_INT 13
25375: PUSH
25376: LD_INT 14
25378: PUSH
25379: EMPTY
25380: LIST
25381: LIST
25382: LIST
25383: LIST
25384: ST_TO_ADDR
25385: GO 25894
25387: LD_INT 25
25389: DOUBLE
25390: EQUAL
25391: IFTRUE 25395
25393: GO 25413
25395: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
25396: LD_ADDR_VAR 0 3
25400: PUSH
25401: LD_INT 13
25403: PUSH
25404: LD_INT 14
25406: PUSH
25407: EMPTY
25408: LIST
25409: LIST
25410: ST_TO_ADDR
25411: GO 25894
25413: LD_INT 27
25415: DOUBLE
25416: EQUAL
25417: IFTRUE 25421
25419: GO 25439
25421: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
25422: LD_ADDR_VAR 0 3
25426: PUSH
25427: LD_INT 13
25429: PUSH
25430: LD_INT 14
25432: PUSH
25433: EMPTY
25434: LIST
25435: LIST
25436: ST_TO_ADDR
25437: GO 25894
25439: LD_INT 92
25441: DOUBLE
25442: EQUAL
25443: IFTRUE 25447
25445: GO 25473
25447: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
25448: LD_ADDR_VAR 0 3
25452: PUSH
25453: LD_INT 11
25455: PUSH
25456: LD_INT 12
25458: PUSH
25459: LD_INT 13
25461: PUSH
25462: LD_INT 14
25464: PUSH
25465: EMPTY
25466: LIST
25467: LIST
25468: LIST
25469: LIST
25470: ST_TO_ADDR
25471: GO 25894
25473: LD_INT 28
25475: DOUBLE
25476: EQUAL
25477: IFTRUE 25481
25479: GO 25499
25481: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
25482: LD_ADDR_VAR 0 3
25486: PUSH
25487: LD_INT 13
25489: PUSH
25490: LD_INT 14
25492: PUSH
25493: EMPTY
25494: LIST
25495: LIST
25496: ST_TO_ADDR
25497: GO 25894
25499: LD_INT 29
25501: DOUBLE
25502: EQUAL
25503: IFTRUE 25507
25505: GO 25525
25507: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
25508: LD_ADDR_VAR 0 3
25512: PUSH
25513: LD_INT 13
25515: PUSH
25516: LD_INT 14
25518: PUSH
25519: EMPTY
25520: LIST
25521: LIST
25522: ST_TO_ADDR
25523: GO 25894
25525: LD_INT 31
25527: DOUBLE
25528: EQUAL
25529: IFTRUE 25533
25531: GO 25551
25533: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
25534: LD_ADDR_VAR 0 3
25538: PUSH
25539: LD_INT 13
25541: PUSH
25542: LD_INT 14
25544: PUSH
25545: EMPTY
25546: LIST
25547: LIST
25548: ST_TO_ADDR
25549: GO 25894
25551: LD_INT 26
25553: DOUBLE
25554: EQUAL
25555: IFTRUE 25559
25557: GO 25577
25559: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
25560: LD_ADDR_VAR 0 3
25564: PUSH
25565: LD_INT 13
25567: PUSH
25568: LD_INT 14
25570: PUSH
25571: EMPTY
25572: LIST
25573: LIST
25574: ST_TO_ADDR
25575: GO 25894
25577: LD_INT 42
25579: DOUBLE
25580: EQUAL
25581: IFTRUE 25585
25583: GO 25611
25585: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
25586: LD_ADDR_VAR 0 3
25590: PUSH
25591: LD_INT 21
25593: PUSH
25594: LD_INT 22
25596: PUSH
25597: LD_INT 23
25599: PUSH
25600: LD_INT 24
25602: PUSH
25603: EMPTY
25604: LIST
25605: LIST
25606: LIST
25607: LIST
25608: ST_TO_ADDR
25609: GO 25894
25611: LD_INT 43
25613: DOUBLE
25614: EQUAL
25615: IFTRUE 25619
25617: GO 25645
25619: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
25620: LD_ADDR_VAR 0 3
25624: PUSH
25625: LD_INT 21
25627: PUSH
25628: LD_INT 22
25630: PUSH
25631: LD_INT 23
25633: PUSH
25634: LD_INT 24
25636: PUSH
25637: EMPTY
25638: LIST
25639: LIST
25640: LIST
25641: LIST
25642: ST_TO_ADDR
25643: GO 25894
25645: LD_INT 44
25647: DOUBLE
25648: EQUAL
25649: IFTRUE 25653
25651: GO 25679
25653: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
25654: LD_ADDR_VAR 0 3
25658: PUSH
25659: LD_INT 21
25661: PUSH
25662: LD_INT 22
25664: PUSH
25665: LD_INT 23
25667: PUSH
25668: LD_INT 24
25670: PUSH
25671: EMPTY
25672: LIST
25673: LIST
25674: LIST
25675: LIST
25676: ST_TO_ADDR
25677: GO 25894
25679: LD_INT 45
25681: DOUBLE
25682: EQUAL
25683: IFTRUE 25687
25685: GO 25713
25687: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
25688: LD_ADDR_VAR 0 3
25692: PUSH
25693: LD_INT 21
25695: PUSH
25696: LD_INT 22
25698: PUSH
25699: LD_INT 23
25701: PUSH
25702: LD_INT 24
25704: PUSH
25705: EMPTY
25706: LIST
25707: LIST
25708: LIST
25709: LIST
25710: ST_TO_ADDR
25711: GO 25894
25713: LD_INT 49
25715: DOUBLE
25716: EQUAL
25717: IFTRUE 25721
25719: GO 25747
25721: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
25722: LD_ADDR_VAR 0 3
25726: PUSH
25727: LD_INT 21
25729: PUSH
25730: LD_INT 22
25732: PUSH
25733: LD_INT 23
25735: PUSH
25736: LD_INT 24
25738: PUSH
25739: EMPTY
25740: LIST
25741: LIST
25742: LIST
25743: LIST
25744: ST_TO_ADDR
25745: GO 25894
25747: LD_INT 51
25749: DOUBLE
25750: EQUAL
25751: IFTRUE 25755
25753: GO 25781
25755: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
25756: LD_ADDR_VAR 0 3
25760: PUSH
25761: LD_INT 21
25763: PUSH
25764: LD_INT 22
25766: PUSH
25767: LD_INT 23
25769: PUSH
25770: LD_INT 24
25772: PUSH
25773: EMPTY
25774: LIST
25775: LIST
25776: LIST
25777: LIST
25778: ST_TO_ADDR
25779: GO 25894
25781: LD_INT 52
25783: DOUBLE
25784: EQUAL
25785: IFTRUE 25789
25787: GO 25815
25789: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
25790: LD_ADDR_VAR 0 3
25794: PUSH
25795: LD_INT 21
25797: PUSH
25798: LD_INT 22
25800: PUSH
25801: LD_INT 23
25803: PUSH
25804: LD_INT 24
25806: PUSH
25807: EMPTY
25808: LIST
25809: LIST
25810: LIST
25811: LIST
25812: ST_TO_ADDR
25813: GO 25894
25815: LD_INT 53
25817: DOUBLE
25818: EQUAL
25819: IFTRUE 25823
25821: GO 25841
25823: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
25824: LD_ADDR_VAR 0 3
25828: PUSH
25829: LD_INT 23
25831: PUSH
25832: LD_INT 24
25834: PUSH
25835: EMPTY
25836: LIST
25837: LIST
25838: ST_TO_ADDR
25839: GO 25894
25841: LD_INT 46
25843: DOUBLE
25844: EQUAL
25845: IFTRUE 25849
25847: GO 25867
25849: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
25850: LD_ADDR_VAR 0 3
25854: PUSH
25855: LD_INT 23
25857: PUSH
25858: LD_INT 24
25860: PUSH
25861: EMPTY
25862: LIST
25863: LIST
25864: ST_TO_ADDR
25865: GO 25894
25867: LD_INT 47
25869: DOUBLE
25870: EQUAL
25871: IFTRUE 25875
25873: GO 25893
25875: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
25876: LD_ADDR_VAR 0 3
25880: PUSH
25881: LD_INT 23
25883: PUSH
25884: LD_INT 24
25886: PUSH
25887: EMPTY
25888: LIST
25889: LIST
25890: ST_TO_ADDR
25891: GO 25894
25893: POP
// result := ( chassis in result ) ;
25894: LD_ADDR_VAR 0 3
25898: PUSH
25899: LD_VAR 0 1
25903: PUSH
25904: LD_VAR 0 3
25908: IN
25909: ST_TO_ADDR
// end ;
25910: LD_VAR 0 3
25914: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
25915: LD_INT 0
25917: PPUSH
25918: PPUSH
25919: PPUSH
25920: PPUSH
25921: PPUSH
25922: PPUSH
25923: PPUSH
// result := array ;
25924: LD_ADDR_VAR 0 5
25928: PUSH
25929: LD_VAR 0 1
25933: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
25934: LD_VAR 0 1
25938: NOT
25939: PUSH
25940: LD_VAR 0 2
25944: NOT
25945: OR
25946: PUSH
25947: LD_VAR 0 3
25951: NOT
25952: OR
25953: PUSH
25954: LD_VAR 0 2
25958: PUSH
25959: LD_VAR 0 1
25963: GREATER
25964: OR
25965: PUSH
25966: LD_VAR 0 3
25970: PUSH
25971: LD_VAR 0 1
25975: GREATER
25976: OR
25977: IFFALSE 25981
// exit ;
25979: GO 26277
// if direction then
25981: LD_VAR 0 4
25985: IFFALSE 26049
// begin d := 1 ;
25987: LD_ADDR_VAR 0 9
25991: PUSH
25992: LD_INT 1
25994: ST_TO_ADDR
// if i_from > i_to then
25995: LD_VAR 0 2
25999: PUSH
26000: LD_VAR 0 3
26004: GREATER
26005: IFFALSE 26031
// length := ( array - i_from ) + i_to else
26007: LD_ADDR_VAR 0 11
26011: PUSH
26012: LD_VAR 0 1
26016: PUSH
26017: LD_VAR 0 2
26021: MINUS
26022: PUSH
26023: LD_VAR 0 3
26027: PLUS
26028: ST_TO_ADDR
26029: GO 26047
// length := i_to - i_from ;
26031: LD_ADDR_VAR 0 11
26035: PUSH
26036: LD_VAR 0 3
26040: PUSH
26041: LD_VAR 0 2
26045: MINUS
26046: ST_TO_ADDR
// end else
26047: GO 26110
// begin d := - 1 ;
26049: LD_ADDR_VAR 0 9
26053: PUSH
26054: LD_INT 1
26056: NEG
26057: ST_TO_ADDR
// if i_from > i_to then
26058: LD_VAR 0 2
26062: PUSH
26063: LD_VAR 0 3
26067: GREATER
26068: IFFALSE 26088
// length := i_from - i_to else
26070: LD_ADDR_VAR 0 11
26074: PUSH
26075: LD_VAR 0 2
26079: PUSH
26080: LD_VAR 0 3
26084: MINUS
26085: ST_TO_ADDR
26086: GO 26110
// length := ( array - i_to ) + i_from ;
26088: LD_ADDR_VAR 0 11
26092: PUSH
26093: LD_VAR 0 1
26097: PUSH
26098: LD_VAR 0 3
26102: MINUS
26103: PUSH
26104: LD_VAR 0 2
26108: PLUS
26109: ST_TO_ADDR
// end ; if not length then
26110: LD_VAR 0 11
26114: NOT
26115: IFFALSE 26119
// exit ;
26117: GO 26277
// tmp := array ;
26119: LD_ADDR_VAR 0 10
26123: PUSH
26124: LD_VAR 0 1
26128: ST_TO_ADDR
// for i = 1 to length do
26129: LD_ADDR_VAR 0 6
26133: PUSH
26134: DOUBLE
26135: LD_INT 1
26137: DEC
26138: ST_TO_ADDR
26139: LD_VAR 0 11
26143: PUSH
26144: FOR_TO
26145: IFFALSE 26265
// begin for j = 1 to array do
26147: LD_ADDR_VAR 0 7
26151: PUSH
26152: DOUBLE
26153: LD_INT 1
26155: DEC
26156: ST_TO_ADDR
26157: LD_VAR 0 1
26161: PUSH
26162: FOR_TO
26163: IFFALSE 26251
// begin k := j + d ;
26165: LD_ADDR_VAR 0 8
26169: PUSH
26170: LD_VAR 0 7
26174: PUSH
26175: LD_VAR 0 9
26179: PLUS
26180: ST_TO_ADDR
// if k > array then
26181: LD_VAR 0 8
26185: PUSH
26186: LD_VAR 0 1
26190: GREATER
26191: IFFALSE 26201
// k := 1 ;
26193: LD_ADDR_VAR 0 8
26197: PUSH
26198: LD_INT 1
26200: ST_TO_ADDR
// if not k then
26201: LD_VAR 0 8
26205: NOT
26206: IFFALSE 26218
// k := array ;
26208: LD_ADDR_VAR 0 8
26212: PUSH
26213: LD_VAR 0 1
26217: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
26218: LD_ADDR_VAR 0 10
26222: PUSH
26223: LD_VAR 0 10
26227: PPUSH
26228: LD_VAR 0 8
26232: PPUSH
26233: LD_VAR 0 1
26237: PUSH
26238: LD_VAR 0 7
26242: ARRAY
26243: PPUSH
26244: CALL_OW 1
26248: ST_TO_ADDR
// end ;
26249: GO 26162
26251: POP
26252: POP
// array := tmp ;
26253: LD_ADDR_VAR 0 1
26257: PUSH
26258: LD_VAR 0 10
26262: ST_TO_ADDR
// end ;
26263: GO 26144
26265: POP
26266: POP
// result := array ;
26267: LD_ADDR_VAR 0 5
26271: PUSH
26272: LD_VAR 0 1
26276: ST_TO_ADDR
// end ;
26277: LD_VAR 0 5
26281: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
26282: LD_INT 0
26284: PPUSH
26285: PPUSH
// result := 0 ;
26286: LD_ADDR_VAR 0 3
26290: PUSH
26291: LD_INT 0
26293: ST_TO_ADDR
// if not array or not value in array then
26294: LD_VAR 0 1
26298: NOT
26299: PUSH
26300: LD_VAR 0 2
26304: PUSH
26305: LD_VAR 0 1
26309: IN
26310: NOT
26311: OR
26312: IFFALSE 26316
// exit ;
26314: GO 26370
// for i = 1 to array do
26316: LD_ADDR_VAR 0 4
26320: PUSH
26321: DOUBLE
26322: LD_INT 1
26324: DEC
26325: ST_TO_ADDR
26326: LD_VAR 0 1
26330: PUSH
26331: FOR_TO
26332: IFFALSE 26368
// if value = array [ i ] then
26334: LD_VAR 0 2
26338: PUSH
26339: LD_VAR 0 1
26343: PUSH
26344: LD_VAR 0 4
26348: ARRAY
26349: EQUAL
26350: IFFALSE 26366
// begin result := i ;
26352: LD_ADDR_VAR 0 3
26356: PUSH
26357: LD_VAR 0 4
26361: ST_TO_ADDR
// exit ;
26362: POP
26363: POP
26364: GO 26370
// end ;
26366: GO 26331
26368: POP
26369: POP
// end ;
26370: LD_VAR 0 3
26374: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
26375: LD_INT 0
26377: PPUSH
// vc_chassis := chassis ;
26378: LD_ADDR_OWVAR 37
26382: PUSH
26383: LD_VAR 0 1
26387: ST_TO_ADDR
// vc_engine := engine ;
26388: LD_ADDR_OWVAR 39
26392: PUSH
26393: LD_VAR 0 2
26397: ST_TO_ADDR
// vc_control := control ;
26398: LD_ADDR_OWVAR 38
26402: PUSH
26403: LD_VAR 0 3
26407: ST_TO_ADDR
// vc_weapon := weapon ;
26408: LD_ADDR_OWVAR 40
26412: PUSH
26413: LD_VAR 0 4
26417: ST_TO_ADDR
// vc_fuel_battery := fuel ;
26418: LD_ADDR_OWVAR 41
26422: PUSH
26423: LD_VAR 0 5
26427: ST_TO_ADDR
// end ;
26428: LD_VAR 0 6
26432: RET
// export function WantPlant ( unit ) ; var task ; begin
26433: LD_INT 0
26435: PPUSH
26436: PPUSH
// result := false ;
26437: LD_ADDR_VAR 0 2
26441: PUSH
26442: LD_INT 0
26444: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
26445: LD_ADDR_VAR 0 3
26449: PUSH
26450: LD_VAR 0 1
26454: PPUSH
26455: CALL_OW 437
26459: ST_TO_ADDR
// if task then
26460: LD_VAR 0 3
26464: IFFALSE 26492
// if task [ 1 ] [ 1 ] = p then
26466: LD_VAR 0 3
26470: PUSH
26471: LD_INT 1
26473: ARRAY
26474: PUSH
26475: LD_INT 1
26477: ARRAY
26478: PUSH
26479: LD_STRING p
26481: EQUAL
26482: IFFALSE 26492
// result := true ;
26484: LD_ADDR_VAR 0 2
26488: PUSH
26489: LD_INT 1
26491: ST_TO_ADDR
// end ;
26492: LD_VAR 0 2
26496: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
26497: LD_INT 0
26499: PPUSH
26500: PPUSH
26501: PPUSH
26502: PPUSH
// if pos < 1 then
26503: LD_VAR 0 2
26507: PUSH
26508: LD_INT 1
26510: LESS
26511: IFFALSE 26515
// exit ;
26513: GO 26818
// if pos = 1 then
26515: LD_VAR 0 2
26519: PUSH
26520: LD_INT 1
26522: EQUAL
26523: IFFALSE 26556
// result := Replace ( arr , pos [ 1 ] , value ) else
26525: LD_ADDR_VAR 0 4
26529: PUSH
26530: LD_VAR 0 1
26534: PPUSH
26535: LD_VAR 0 2
26539: PUSH
26540: LD_INT 1
26542: ARRAY
26543: PPUSH
26544: LD_VAR 0 3
26548: PPUSH
26549: CALL_OW 1
26553: ST_TO_ADDR
26554: GO 26818
// begin tmp := arr ;
26556: LD_ADDR_VAR 0 6
26560: PUSH
26561: LD_VAR 0 1
26565: ST_TO_ADDR
// s_arr := [ tmp ] ;
26566: LD_ADDR_VAR 0 7
26570: PUSH
26571: LD_VAR 0 6
26575: PUSH
26576: EMPTY
26577: LIST
26578: ST_TO_ADDR
// for i = 1 to pos - 1 do
26579: LD_ADDR_VAR 0 5
26583: PUSH
26584: DOUBLE
26585: LD_INT 1
26587: DEC
26588: ST_TO_ADDR
26589: LD_VAR 0 2
26593: PUSH
26594: LD_INT 1
26596: MINUS
26597: PUSH
26598: FOR_TO
26599: IFFALSE 26644
// begin tmp := tmp [ pos [ i ] ] ;
26601: LD_ADDR_VAR 0 6
26605: PUSH
26606: LD_VAR 0 6
26610: PUSH
26611: LD_VAR 0 2
26615: PUSH
26616: LD_VAR 0 5
26620: ARRAY
26621: ARRAY
26622: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
26623: LD_ADDR_VAR 0 7
26627: PUSH
26628: LD_VAR 0 7
26632: PUSH
26633: LD_VAR 0 6
26637: PUSH
26638: EMPTY
26639: LIST
26640: ADD
26641: ST_TO_ADDR
// end ;
26642: GO 26598
26644: POP
26645: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
26646: LD_ADDR_VAR 0 6
26650: PUSH
26651: LD_VAR 0 6
26655: PPUSH
26656: LD_VAR 0 2
26660: PUSH
26661: LD_VAR 0 2
26665: ARRAY
26666: PPUSH
26667: LD_VAR 0 3
26671: PPUSH
26672: CALL_OW 1
26676: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
26677: LD_ADDR_VAR 0 7
26681: PUSH
26682: LD_VAR 0 7
26686: PPUSH
26687: LD_VAR 0 7
26691: PPUSH
26692: LD_VAR 0 6
26696: PPUSH
26697: CALL_OW 1
26701: ST_TO_ADDR
// for i = s_arr downto 2 do
26702: LD_ADDR_VAR 0 5
26706: PUSH
26707: DOUBLE
26708: LD_VAR 0 7
26712: INC
26713: ST_TO_ADDR
26714: LD_INT 2
26716: PUSH
26717: FOR_DOWNTO
26718: IFFALSE 26802
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
26720: LD_ADDR_VAR 0 6
26724: PUSH
26725: LD_VAR 0 7
26729: PUSH
26730: LD_VAR 0 5
26734: PUSH
26735: LD_INT 1
26737: MINUS
26738: ARRAY
26739: PPUSH
26740: LD_VAR 0 2
26744: PUSH
26745: LD_VAR 0 5
26749: PUSH
26750: LD_INT 1
26752: MINUS
26753: ARRAY
26754: PPUSH
26755: LD_VAR 0 7
26759: PUSH
26760: LD_VAR 0 5
26764: ARRAY
26765: PPUSH
26766: CALL_OW 1
26770: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
26771: LD_ADDR_VAR 0 7
26775: PUSH
26776: LD_VAR 0 7
26780: PPUSH
26781: LD_VAR 0 5
26785: PUSH
26786: LD_INT 1
26788: MINUS
26789: PPUSH
26790: LD_VAR 0 6
26794: PPUSH
26795: CALL_OW 1
26799: ST_TO_ADDR
// end ;
26800: GO 26717
26802: POP
26803: POP
// result := s_arr [ 1 ] ;
26804: LD_ADDR_VAR 0 4
26808: PUSH
26809: LD_VAR 0 7
26813: PUSH
26814: LD_INT 1
26816: ARRAY
26817: ST_TO_ADDR
// end ; end ;
26818: LD_VAR 0 4
26822: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
26823: LD_INT 0
26825: PPUSH
26826: PPUSH
// if not list then
26827: LD_VAR 0 1
26831: NOT
26832: IFFALSE 26836
// exit ;
26834: GO 26927
// i := list [ pos1 ] ;
26836: LD_ADDR_VAR 0 5
26840: PUSH
26841: LD_VAR 0 1
26845: PUSH
26846: LD_VAR 0 2
26850: ARRAY
26851: ST_TO_ADDR
// if not i then
26852: LD_VAR 0 5
26856: NOT
26857: IFFALSE 26861
// exit ;
26859: GO 26927
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
26861: LD_ADDR_VAR 0 1
26865: PUSH
26866: LD_VAR 0 1
26870: PPUSH
26871: LD_VAR 0 2
26875: PPUSH
26876: LD_VAR 0 1
26880: PUSH
26881: LD_VAR 0 3
26885: ARRAY
26886: PPUSH
26887: CALL_OW 1
26891: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
26892: LD_ADDR_VAR 0 1
26896: PUSH
26897: LD_VAR 0 1
26901: PPUSH
26902: LD_VAR 0 3
26906: PPUSH
26907: LD_VAR 0 5
26911: PPUSH
26912: CALL_OW 1
26916: ST_TO_ADDR
// result := list ;
26917: LD_ADDR_VAR 0 4
26921: PUSH
26922: LD_VAR 0 1
26926: ST_TO_ADDR
// end ;
26927: LD_VAR 0 4
26931: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
26932: LD_INT 0
26934: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
26935: LD_ADDR_VAR 0 5
26939: PUSH
26940: LD_VAR 0 1
26944: PPUSH
26945: CALL_OW 250
26949: PPUSH
26950: LD_VAR 0 1
26954: PPUSH
26955: CALL_OW 251
26959: PPUSH
26960: LD_VAR 0 2
26964: PPUSH
26965: LD_VAR 0 3
26969: PPUSH
26970: LD_VAR 0 4
26974: PPUSH
26975: CALL 27353 0 5
26979: ST_TO_ADDR
// end ;
26980: LD_VAR 0 5
26984: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
26985: LD_INT 0
26987: PPUSH
26988: PPUSH
26989: PPUSH
26990: PPUSH
// if not list or not unit then
26991: LD_VAR 0 2
26995: NOT
26996: PUSH
26997: LD_VAR 0 1
27001: NOT
27002: OR
27003: IFFALSE 27007
// exit ;
27005: GO 27348
// result := [ ] ;
27007: LD_ADDR_VAR 0 5
27011: PUSH
27012: EMPTY
27013: ST_TO_ADDR
// for i in list do
27014: LD_ADDR_VAR 0 6
27018: PUSH
27019: LD_VAR 0 2
27023: PUSH
27024: FOR_IN
27025: IFFALSE 27243
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
27027: LD_ADDR_VAR 0 8
27031: PUSH
27032: LD_VAR 0 1
27036: PPUSH
27037: LD_VAR 0 6
27041: PUSH
27042: LD_INT 1
27044: ARRAY
27045: PPUSH
27046: LD_VAR 0 6
27050: PUSH
27051: LD_INT 2
27053: ARRAY
27054: PPUSH
27055: CALL_OW 297
27059: ST_TO_ADDR
// if not Count ( result ) then
27060: LD_VAR 0 5
27064: PPUSH
27065: CALL 23637 0 1
27069: NOT
27070: IFFALSE 27103
// begin result := Join ( result , [ i , tmp ] ) ;
27072: LD_ADDR_VAR 0 5
27076: PUSH
27077: LD_VAR 0 5
27081: PPUSH
27082: LD_VAR 0 6
27086: PUSH
27087: LD_VAR 0 8
27091: PUSH
27092: EMPTY
27093: LIST
27094: LIST
27095: PPUSH
27096: CALL 59246 0 2
27100: ST_TO_ADDR
// continue ;
27101: GO 27024
// end ; if result [ result ] [ 2 ] <= tmp then
27103: LD_VAR 0 5
27107: PUSH
27108: LD_VAR 0 5
27112: ARRAY
27113: PUSH
27114: LD_INT 2
27116: ARRAY
27117: PUSH
27118: LD_VAR 0 8
27122: LESSEQUAL
27123: IFFALSE 27156
// result := Join ( result , [ i , tmp ] ) else
27125: LD_ADDR_VAR 0 5
27129: PUSH
27130: LD_VAR 0 5
27134: PPUSH
27135: LD_VAR 0 6
27139: PUSH
27140: LD_VAR 0 8
27144: PUSH
27145: EMPTY
27146: LIST
27147: LIST
27148: PPUSH
27149: CALL 59246 0 2
27153: ST_TO_ADDR
27154: GO 27241
// begin for j := 1 to Count ( result ) do
27156: LD_ADDR_VAR 0 7
27160: PUSH
27161: DOUBLE
27162: LD_INT 1
27164: DEC
27165: ST_TO_ADDR
27166: LD_VAR 0 5
27170: PPUSH
27171: CALL 23637 0 1
27175: PUSH
27176: FOR_TO
27177: IFFALSE 27239
// begin if tmp < result [ j ] [ 2 ] then
27179: LD_VAR 0 8
27183: PUSH
27184: LD_VAR 0 5
27188: PUSH
27189: LD_VAR 0 7
27193: ARRAY
27194: PUSH
27195: LD_INT 2
27197: ARRAY
27198: LESS
27199: IFFALSE 27237
// begin result := Insert ( result , j , [ i , tmp ] ) ;
27201: LD_ADDR_VAR 0 5
27205: PUSH
27206: LD_VAR 0 5
27210: PPUSH
27211: LD_VAR 0 7
27215: PPUSH
27216: LD_VAR 0 6
27220: PUSH
27221: LD_VAR 0 8
27225: PUSH
27226: EMPTY
27227: LIST
27228: LIST
27229: PPUSH
27230: CALL_OW 2
27234: ST_TO_ADDR
// break ;
27235: GO 27239
// end ; end ;
27237: GO 27176
27239: POP
27240: POP
// end ; end ;
27241: GO 27024
27243: POP
27244: POP
// if result and not asc then
27245: LD_VAR 0 5
27249: PUSH
27250: LD_VAR 0 3
27254: NOT
27255: AND
27256: IFFALSE 27273
// result := ReverseArray ( result ) ;
27258: LD_ADDR_VAR 0 5
27262: PUSH
27263: LD_VAR 0 5
27267: PPUSH
27268: CALL 54513 0 1
27272: ST_TO_ADDR
// tmp := [ ] ;
27273: LD_ADDR_VAR 0 8
27277: PUSH
27278: EMPTY
27279: ST_TO_ADDR
// if mode then
27280: LD_VAR 0 4
27284: IFFALSE 27348
// begin for i := 1 to result do
27286: LD_ADDR_VAR 0 6
27290: PUSH
27291: DOUBLE
27292: LD_INT 1
27294: DEC
27295: ST_TO_ADDR
27296: LD_VAR 0 5
27300: PUSH
27301: FOR_TO
27302: IFFALSE 27336
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
27304: LD_ADDR_VAR 0 8
27308: PUSH
27309: LD_VAR 0 8
27313: PPUSH
27314: LD_VAR 0 5
27318: PUSH
27319: LD_VAR 0 6
27323: ARRAY
27324: PUSH
27325: LD_INT 1
27327: ARRAY
27328: PPUSH
27329: CALL 59246 0 2
27333: ST_TO_ADDR
27334: GO 27301
27336: POP
27337: POP
// result := tmp ;
27338: LD_ADDR_VAR 0 5
27342: PUSH
27343: LD_VAR 0 8
27347: ST_TO_ADDR
// end ; end ;
27348: LD_VAR 0 5
27352: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
27353: LD_INT 0
27355: PPUSH
27356: PPUSH
27357: PPUSH
27358: PPUSH
// if not list then
27359: LD_VAR 0 3
27363: NOT
27364: IFFALSE 27368
// exit ;
27366: GO 27756
// result := [ ] ;
27368: LD_ADDR_VAR 0 6
27372: PUSH
27373: EMPTY
27374: ST_TO_ADDR
// for i in list do
27375: LD_ADDR_VAR 0 7
27379: PUSH
27380: LD_VAR 0 3
27384: PUSH
27385: FOR_IN
27386: IFFALSE 27588
// begin tmp := GetDistUnitXY ( i , x , y ) ;
27388: LD_ADDR_VAR 0 9
27392: PUSH
27393: LD_VAR 0 7
27397: PPUSH
27398: LD_VAR 0 1
27402: PPUSH
27403: LD_VAR 0 2
27407: PPUSH
27408: CALL_OW 297
27412: ST_TO_ADDR
// if not result then
27413: LD_VAR 0 6
27417: NOT
27418: IFFALSE 27444
// result := [ [ i , tmp ] ] else
27420: LD_ADDR_VAR 0 6
27424: PUSH
27425: LD_VAR 0 7
27429: PUSH
27430: LD_VAR 0 9
27434: PUSH
27435: EMPTY
27436: LIST
27437: LIST
27438: PUSH
27439: EMPTY
27440: LIST
27441: ST_TO_ADDR
27442: GO 27586
// begin if result [ result ] [ 2 ] <= tmp then
27444: LD_VAR 0 6
27448: PUSH
27449: LD_VAR 0 6
27453: ARRAY
27454: PUSH
27455: LD_INT 2
27457: ARRAY
27458: PUSH
27459: LD_VAR 0 9
27463: LESSEQUAL
27464: IFFALSE 27506
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
27466: LD_ADDR_VAR 0 6
27470: PUSH
27471: LD_VAR 0 6
27475: PPUSH
27476: LD_VAR 0 6
27480: PUSH
27481: LD_INT 1
27483: PLUS
27484: PPUSH
27485: LD_VAR 0 7
27489: PUSH
27490: LD_VAR 0 9
27494: PUSH
27495: EMPTY
27496: LIST
27497: LIST
27498: PPUSH
27499: CALL_OW 2
27503: ST_TO_ADDR
27504: GO 27586
// for j := 1 to result do
27506: LD_ADDR_VAR 0 8
27510: PUSH
27511: DOUBLE
27512: LD_INT 1
27514: DEC
27515: ST_TO_ADDR
27516: LD_VAR 0 6
27520: PUSH
27521: FOR_TO
27522: IFFALSE 27584
// begin if tmp < result [ j ] [ 2 ] then
27524: LD_VAR 0 9
27528: PUSH
27529: LD_VAR 0 6
27533: PUSH
27534: LD_VAR 0 8
27538: ARRAY
27539: PUSH
27540: LD_INT 2
27542: ARRAY
27543: LESS
27544: IFFALSE 27582
// begin result := Insert ( result , j , [ i , tmp ] ) ;
27546: LD_ADDR_VAR 0 6
27550: PUSH
27551: LD_VAR 0 6
27555: PPUSH
27556: LD_VAR 0 8
27560: PPUSH
27561: LD_VAR 0 7
27565: PUSH
27566: LD_VAR 0 9
27570: PUSH
27571: EMPTY
27572: LIST
27573: LIST
27574: PPUSH
27575: CALL_OW 2
27579: ST_TO_ADDR
// break ;
27580: GO 27584
// end ; end ;
27582: GO 27521
27584: POP
27585: POP
// end ; end ;
27586: GO 27385
27588: POP
27589: POP
// if result and not asc then
27590: LD_VAR 0 6
27594: PUSH
27595: LD_VAR 0 4
27599: NOT
27600: AND
27601: IFFALSE 27676
// begin tmp := result ;
27603: LD_ADDR_VAR 0 9
27607: PUSH
27608: LD_VAR 0 6
27612: ST_TO_ADDR
// for i = tmp downto 1 do
27613: LD_ADDR_VAR 0 7
27617: PUSH
27618: DOUBLE
27619: LD_VAR 0 9
27623: INC
27624: ST_TO_ADDR
27625: LD_INT 1
27627: PUSH
27628: FOR_DOWNTO
27629: IFFALSE 27674
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
27631: LD_ADDR_VAR 0 6
27635: PUSH
27636: LD_VAR 0 6
27640: PPUSH
27641: LD_VAR 0 9
27645: PUSH
27646: LD_VAR 0 7
27650: MINUS
27651: PUSH
27652: LD_INT 1
27654: PLUS
27655: PPUSH
27656: LD_VAR 0 9
27660: PUSH
27661: LD_VAR 0 7
27665: ARRAY
27666: PPUSH
27667: CALL_OW 1
27671: ST_TO_ADDR
27672: GO 27628
27674: POP
27675: POP
// end ; tmp := [ ] ;
27676: LD_ADDR_VAR 0 9
27680: PUSH
27681: EMPTY
27682: ST_TO_ADDR
// if mode then
27683: LD_VAR 0 5
27687: IFFALSE 27756
// begin for i = 1 to result do
27689: LD_ADDR_VAR 0 7
27693: PUSH
27694: DOUBLE
27695: LD_INT 1
27697: DEC
27698: ST_TO_ADDR
27699: LD_VAR 0 6
27703: PUSH
27704: FOR_TO
27705: IFFALSE 27744
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
27707: LD_ADDR_VAR 0 9
27711: PUSH
27712: LD_VAR 0 9
27716: PPUSH
27717: LD_VAR 0 7
27721: PPUSH
27722: LD_VAR 0 6
27726: PUSH
27727: LD_VAR 0 7
27731: ARRAY
27732: PUSH
27733: LD_INT 1
27735: ARRAY
27736: PPUSH
27737: CALL_OW 1
27741: ST_TO_ADDR
27742: GO 27704
27744: POP
27745: POP
// result := tmp ;
27746: LD_ADDR_VAR 0 6
27750: PUSH
27751: LD_VAR 0 9
27755: ST_TO_ADDR
// end ; end ;
27756: LD_VAR 0 6
27760: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
27761: LD_INT 0
27763: PPUSH
27764: PPUSH
27765: PPUSH
27766: PPUSH
27767: PPUSH
27768: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
27769: LD_ADDR_VAR 0 5
27773: PUSH
27774: LD_INT 0
27776: PUSH
27777: LD_INT 0
27779: PUSH
27780: LD_INT 0
27782: PUSH
27783: EMPTY
27784: PUSH
27785: EMPTY
27786: LIST
27787: LIST
27788: LIST
27789: LIST
27790: ST_TO_ADDR
// if not x or not y then
27791: LD_VAR 0 2
27795: NOT
27796: PUSH
27797: LD_VAR 0 3
27801: NOT
27802: OR
27803: IFFALSE 27807
// exit ;
27805: GO 29457
// if not range then
27807: LD_VAR 0 4
27811: NOT
27812: IFFALSE 27822
// range := 10 ;
27814: LD_ADDR_VAR 0 4
27818: PUSH
27819: LD_INT 10
27821: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
27822: LD_ADDR_VAR 0 8
27826: PUSH
27827: LD_INT 81
27829: PUSH
27830: LD_VAR 0 1
27834: PUSH
27835: EMPTY
27836: LIST
27837: LIST
27838: PUSH
27839: LD_INT 92
27841: PUSH
27842: LD_VAR 0 2
27846: PUSH
27847: LD_VAR 0 3
27851: PUSH
27852: LD_VAR 0 4
27856: PUSH
27857: EMPTY
27858: LIST
27859: LIST
27860: LIST
27861: LIST
27862: PUSH
27863: LD_INT 3
27865: PUSH
27866: LD_INT 21
27868: PUSH
27869: LD_INT 3
27871: PUSH
27872: EMPTY
27873: LIST
27874: LIST
27875: PUSH
27876: EMPTY
27877: LIST
27878: LIST
27879: PUSH
27880: EMPTY
27881: LIST
27882: LIST
27883: LIST
27884: PPUSH
27885: CALL_OW 69
27889: ST_TO_ADDR
// if not tmp then
27890: LD_VAR 0 8
27894: NOT
27895: IFFALSE 27899
// exit ;
27897: GO 29457
// for i in tmp do
27899: LD_ADDR_VAR 0 6
27903: PUSH
27904: LD_VAR 0 8
27908: PUSH
27909: FOR_IN
27910: IFFALSE 29432
// begin points := [ 0 , 0 , 0 ] ;
27912: LD_ADDR_VAR 0 9
27916: PUSH
27917: LD_INT 0
27919: PUSH
27920: LD_INT 0
27922: PUSH
27923: LD_INT 0
27925: PUSH
27926: EMPTY
27927: LIST
27928: LIST
27929: LIST
27930: ST_TO_ADDR
// bpoints := 1 ;
27931: LD_ADDR_VAR 0 10
27935: PUSH
27936: LD_INT 1
27938: ST_TO_ADDR
// case GetType ( i ) of unit_human :
27939: LD_VAR 0 6
27943: PPUSH
27944: CALL_OW 247
27948: PUSH
27949: LD_INT 1
27951: DOUBLE
27952: EQUAL
27953: IFTRUE 27957
27955: GO 28535
27957: POP
// begin if GetClass ( i ) = 1 then
27958: LD_VAR 0 6
27962: PPUSH
27963: CALL_OW 257
27967: PUSH
27968: LD_INT 1
27970: EQUAL
27971: IFFALSE 27992
// points := [ 10 , 5 , 3 ] ;
27973: LD_ADDR_VAR 0 9
27977: PUSH
27978: LD_INT 10
27980: PUSH
27981: LD_INT 5
27983: PUSH
27984: LD_INT 3
27986: PUSH
27987: EMPTY
27988: LIST
27989: LIST
27990: LIST
27991: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
27992: LD_VAR 0 6
27996: PPUSH
27997: CALL_OW 257
28001: PUSH
28002: LD_INT 2
28004: PUSH
28005: LD_INT 3
28007: PUSH
28008: LD_INT 4
28010: PUSH
28011: EMPTY
28012: LIST
28013: LIST
28014: LIST
28015: IN
28016: IFFALSE 28037
// points := [ 3 , 2 , 1 ] ;
28018: LD_ADDR_VAR 0 9
28022: PUSH
28023: LD_INT 3
28025: PUSH
28026: LD_INT 2
28028: PUSH
28029: LD_INT 1
28031: PUSH
28032: EMPTY
28033: LIST
28034: LIST
28035: LIST
28036: ST_TO_ADDR
// if GetClass ( i ) = 5 then
28037: LD_VAR 0 6
28041: PPUSH
28042: CALL_OW 257
28046: PUSH
28047: LD_INT 5
28049: EQUAL
28050: IFFALSE 28071
// points := [ 130 , 5 , 2 ] ;
28052: LD_ADDR_VAR 0 9
28056: PUSH
28057: LD_INT 130
28059: PUSH
28060: LD_INT 5
28062: PUSH
28063: LD_INT 2
28065: PUSH
28066: EMPTY
28067: LIST
28068: LIST
28069: LIST
28070: ST_TO_ADDR
// if GetClass ( i ) = 8 then
28071: LD_VAR 0 6
28075: PPUSH
28076: CALL_OW 257
28080: PUSH
28081: LD_INT 8
28083: EQUAL
28084: IFFALSE 28105
// points := [ 35 , 35 , 30 ] ;
28086: LD_ADDR_VAR 0 9
28090: PUSH
28091: LD_INT 35
28093: PUSH
28094: LD_INT 35
28096: PUSH
28097: LD_INT 30
28099: PUSH
28100: EMPTY
28101: LIST
28102: LIST
28103: LIST
28104: ST_TO_ADDR
// if GetClass ( i ) = 9 then
28105: LD_VAR 0 6
28109: PPUSH
28110: CALL_OW 257
28114: PUSH
28115: LD_INT 9
28117: EQUAL
28118: IFFALSE 28139
// points := [ 20 , 55 , 40 ] ;
28120: LD_ADDR_VAR 0 9
28124: PUSH
28125: LD_INT 20
28127: PUSH
28128: LD_INT 55
28130: PUSH
28131: LD_INT 40
28133: PUSH
28134: EMPTY
28135: LIST
28136: LIST
28137: LIST
28138: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
28139: LD_VAR 0 6
28143: PPUSH
28144: CALL_OW 257
28148: PUSH
28149: LD_INT 12
28151: PUSH
28152: LD_INT 16
28154: PUSH
28155: EMPTY
28156: LIST
28157: LIST
28158: IN
28159: IFFALSE 28180
// points := [ 5 , 3 , 2 ] ;
28161: LD_ADDR_VAR 0 9
28165: PUSH
28166: LD_INT 5
28168: PUSH
28169: LD_INT 3
28171: PUSH
28172: LD_INT 2
28174: PUSH
28175: EMPTY
28176: LIST
28177: LIST
28178: LIST
28179: ST_TO_ADDR
// if GetClass ( i ) = 17 then
28180: LD_VAR 0 6
28184: PPUSH
28185: CALL_OW 257
28189: PUSH
28190: LD_INT 17
28192: EQUAL
28193: IFFALSE 28214
// points := [ 100 , 50 , 75 ] ;
28195: LD_ADDR_VAR 0 9
28199: PUSH
28200: LD_INT 100
28202: PUSH
28203: LD_INT 50
28205: PUSH
28206: LD_INT 75
28208: PUSH
28209: EMPTY
28210: LIST
28211: LIST
28212: LIST
28213: ST_TO_ADDR
// if GetClass ( i ) = 15 then
28214: LD_VAR 0 6
28218: PPUSH
28219: CALL_OW 257
28223: PUSH
28224: LD_INT 15
28226: EQUAL
28227: IFFALSE 28248
// points := [ 10 , 5 , 3 ] ;
28229: LD_ADDR_VAR 0 9
28233: PUSH
28234: LD_INT 10
28236: PUSH
28237: LD_INT 5
28239: PUSH
28240: LD_INT 3
28242: PUSH
28243: EMPTY
28244: LIST
28245: LIST
28246: LIST
28247: ST_TO_ADDR
// if GetClass ( i ) = 14 then
28248: LD_VAR 0 6
28252: PPUSH
28253: CALL_OW 257
28257: PUSH
28258: LD_INT 14
28260: EQUAL
28261: IFFALSE 28282
// points := [ 10 , 0 , 0 ] ;
28263: LD_ADDR_VAR 0 9
28267: PUSH
28268: LD_INT 10
28270: PUSH
28271: LD_INT 0
28273: PUSH
28274: LD_INT 0
28276: PUSH
28277: EMPTY
28278: LIST
28279: LIST
28280: LIST
28281: ST_TO_ADDR
// if GetClass ( i ) = 11 then
28282: LD_VAR 0 6
28286: PPUSH
28287: CALL_OW 257
28291: PUSH
28292: LD_INT 11
28294: EQUAL
28295: IFFALSE 28316
// points := [ 30 , 10 , 5 ] ;
28297: LD_ADDR_VAR 0 9
28301: PUSH
28302: LD_INT 30
28304: PUSH
28305: LD_INT 10
28307: PUSH
28308: LD_INT 5
28310: PUSH
28311: EMPTY
28312: LIST
28313: LIST
28314: LIST
28315: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
28316: LD_VAR 0 1
28320: PPUSH
28321: LD_INT 5
28323: PPUSH
28324: CALL_OW 321
28328: PUSH
28329: LD_INT 2
28331: EQUAL
28332: IFFALSE 28349
// bpoints := bpoints * 1.8 ;
28334: LD_ADDR_VAR 0 10
28338: PUSH
28339: LD_VAR 0 10
28343: PUSH
28344: LD_REAL  1.80000000000000E+0000
28347: MUL
28348: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
28349: LD_VAR 0 6
28353: PPUSH
28354: CALL_OW 257
28358: PUSH
28359: LD_INT 1
28361: PUSH
28362: LD_INT 2
28364: PUSH
28365: LD_INT 3
28367: PUSH
28368: LD_INT 4
28370: PUSH
28371: EMPTY
28372: LIST
28373: LIST
28374: LIST
28375: LIST
28376: IN
28377: PUSH
28378: LD_VAR 0 1
28382: PPUSH
28383: LD_INT 51
28385: PPUSH
28386: CALL_OW 321
28390: PUSH
28391: LD_INT 2
28393: EQUAL
28394: AND
28395: IFFALSE 28412
// bpoints := bpoints * 1.2 ;
28397: LD_ADDR_VAR 0 10
28401: PUSH
28402: LD_VAR 0 10
28406: PUSH
28407: LD_REAL  1.20000000000000E+0000
28410: MUL
28411: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
28412: LD_VAR 0 6
28416: PPUSH
28417: CALL_OW 257
28421: PUSH
28422: LD_INT 5
28424: PUSH
28425: LD_INT 7
28427: PUSH
28428: LD_INT 9
28430: PUSH
28431: EMPTY
28432: LIST
28433: LIST
28434: LIST
28435: IN
28436: PUSH
28437: LD_VAR 0 1
28441: PPUSH
28442: LD_INT 52
28444: PPUSH
28445: CALL_OW 321
28449: PUSH
28450: LD_INT 2
28452: EQUAL
28453: AND
28454: IFFALSE 28471
// bpoints := bpoints * 1.5 ;
28456: LD_ADDR_VAR 0 10
28460: PUSH
28461: LD_VAR 0 10
28465: PUSH
28466: LD_REAL  1.50000000000000E+0000
28469: MUL
28470: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
28471: LD_VAR 0 1
28475: PPUSH
28476: LD_INT 66
28478: PPUSH
28479: CALL_OW 321
28483: PUSH
28484: LD_INT 2
28486: EQUAL
28487: IFFALSE 28504
// bpoints := bpoints * 1.1 ;
28489: LD_ADDR_VAR 0 10
28493: PUSH
28494: LD_VAR 0 10
28498: PUSH
28499: LD_REAL  1.10000000000000E+0000
28502: MUL
28503: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
28504: LD_ADDR_VAR 0 10
28508: PUSH
28509: LD_VAR 0 10
28513: PUSH
28514: LD_VAR 0 6
28518: PPUSH
28519: LD_INT 1
28521: PPUSH
28522: CALL_OW 259
28526: PUSH
28527: LD_REAL  1.15000000000000E+0000
28530: MUL
28531: MUL
28532: ST_TO_ADDR
// end ; unit_vehicle :
28533: GO 29361
28535: LD_INT 2
28537: DOUBLE
28538: EQUAL
28539: IFTRUE 28543
28541: GO 29349
28543: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
28544: LD_VAR 0 6
28548: PPUSH
28549: CALL_OW 264
28553: PUSH
28554: LD_INT 2
28556: PUSH
28557: LD_INT 42
28559: PUSH
28560: LD_INT 24
28562: PUSH
28563: EMPTY
28564: LIST
28565: LIST
28566: LIST
28567: IN
28568: IFFALSE 28589
// points := [ 25 , 5 , 3 ] ;
28570: LD_ADDR_VAR 0 9
28574: PUSH
28575: LD_INT 25
28577: PUSH
28578: LD_INT 5
28580: PUSH
28581: LD_INT 3
28583: PUSH
28584: EMPTY
28585: LIST
28586: LIST
28587: LIST
28588: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
28589: LD_VAR 0 6
28593: PPUSH
28594: CALL_OW 264
28598: PUSH
28599: LD_INT 4
28601: PUSH
28602: LD_INT 43
28604: PUSH
28605: LD_INT 25
28607: PUSH
28608: EMPTY
28609: LIST
28610: LIST
28611: LIST
28612: IN
28613: IFFALSE 28634
// points := [ 40 , 15 , 5 ] ;
28615: LD_ADDR_VAR 0 9
28619: PUSH
28620: LD_INT 40
28622: PUSH
28623: LD_INT 15
28625: PUSH
28626: LD_INT 5
28628: PUSH
28629: EMPTY
28630: LIST
28631: LIST
28632: LIST
28633: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
28634: LD_VAR 0 6
28638: PPUSH
28639: CALL_OW 264
28643: PUSH
28644: LD_INT 3
28646: PUSH
28647: LD_INT 23
28649: PUSH
28650: EMPTY
28651: LIST
28652: LIST
28653: IN
28654: IFFALSE 28675
// points := [ 7 , 25 , 8 ] ;
28656: LD_ADDR_VAR 0 9
28660: PUSH
28661: LD_INT 7
28663: PUSH
28664: LD_INT 25
28666: PUSH
28667: LD_INT 8
28669: PUSH
28670: EMPTY
28671: LIST
28672: LIST
28673: LIST
28674: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
28675: LD_VAR 0 6
28679: PPUSH
28680: CALL_OW 264
28684: PUSH
28685: LD_INT 5
28687: PUSH
28688: LD_INT 27
28690: PUSH
28691: LD_INT 44
28693: PUSH
28694: EMPTY
28695: LIST
28696: LIST
28697: LIST
28698: IN
28699: IFFALSE 28720
// points := [ 14 , 50 , 16 ] ;
28701: LD_ADDR_VAR 0 9
28705: PUSH
28706: LD_INT 14
28708: PUSH
28709: LD_INT 50
28711: PUSH
28712: LD_INT 16
28714: PUSH
28715: EMPTY
28716: LIST
28717: LIST
28718: LIST
28719: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
28720: LD_VAR 0 6
28724: PPUSH
28725: CALL_OW 264
28729: PUSH
28730: LD_INT 6
28732: PUSH
28733: LD_INT 46
28735: PUSH
28736: EMPTY
28737: LIST
28738: LIST
28739: IN
28740: IFFALSE 28761
// points := [ 32 , 120 , 70 ] ;
28742: LD_ADDR_VAR 0 9
28746: PUSH
28747: LD_INT 32
28749: PUSH
28750: LD_INT 120
28752: PUSH
28753: LD_INT 70
28755: PUSH
28756: EMPTY
28757: LIST
28758: LIST
28759: LIST
28760: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
28761: LD_VAR 0 6
28765: PPUSH
28766: CALL_OW 264
28770: PUSH
28771: LD_INT 7
28773: PUSH
28774: LD_INT 28
28776: PUSH
28777: LD_INT 45
28779: PUSH
28780: LD_INT 92
28782: PUSH
28783: EMPTY
28784: LIST
28785: LIST
28786: LIST
28787: LIST
28788: IN
28789: IFFALSE 28810
// points := [ 35 , 20 , 45 ] ;
28791: LD_ADDR_VAR 0 9
28795: PUSH
28796: LD_INT 35
28798: PUSH
28799: LD_INT 20
28801: PUSH
28802: LD_INT 45
28804: PUSH
28805: EMPTY
28806: LIST
28807: LIST
28808: LIST
28809: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
28810: LD_VAR 0 6
28814: PPUSH
28815: CALL_OW 264
28819: PUSH
28820: LD_INT 47
28822: PUSH
28823: EMPTY
28824: LIST
28825: IN
28826: IFFALSE 28847
// points := [ 67 , 45 , 75 ] ;
28828: LD_ADDR_VAR 0 9
28832: PUSH
28833: LD_INT 67
28835: PUSH
28836: LD_INT 45
28838: PUSH
28839: LD_INT 75
28841: PUSH
28842: EMPTY
28843: LIST
28844: LIST
28845: LIST
28846: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
28847: LD_VAR 0 6
28851: PPUSH
28852: CALL_OW 264
28856: PUSH
28857: LD_INT 26
28859: PUSH
28860: EMPTY
28861: LIST
28862: IN
28863: IFFALSE 28884
// points := [ 120 , 30 , 80 ] ;
28865: LD_ADDR_VAR 0 9
28869: PUSH
28870: LD_INT 120
28872: PUSH
28873: LD_INT 30
28875: PUSH
28876: LD_INT 80
28878: PUSH
28879: EMPTY
28880: LIST
28881: LIST
28882: LIST
28883: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
28884: LD_VAR 0 6
28888: PPUSH
28889: CALL_OW 264
28893: PUSH
28894: LD_INT 22
28896: PUSH
28897: EMPTY
28898: LIST
28899: IN
28900: IFFALSE 28921
// points := [ 40 , 1 , 1 ] ;
28902: LD_ADDR_VAR 0 9
28906: PUSH
28907: LD_INT 40
28909: PUSH
28910: LD_INT 1
28912: PUSH
28913: LD_INT 1
28915: PUSH
28916: EMPTY
28917: LIST
28918: LIST
28919: LIST
28920: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
28921: LD_VAR 0 6
28925: PPUSH
28926: CALL_OW 264
28930: PUSH
28931: LD_INT 29
28933: PUSH
28934: EMPTY
28935: LIST
28936: IN
28937: IFFALSE 28958
// points := [ 70 , 200 , 400 ] ;
28939: LD_ADDR_VAR 0 9
28943: PUSH
28944: LD_INT 70
28946: PUSH
28947: LD_INT 200
28949: PUSH
28950: LD_INT 400
28952: PUSH
28953: EMPTY
28954: LIST
28955: LIST
28956: LIST
28957: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
28958: LD_VAR 0 6
28962: PPUSH
28963: CALL_OW 264
28967: PUSH
28968: LD_INT 14
28970: PUSH
28971: LD_INT 53
28973: PUSH
28974: EMPTY
28975: LIST
28976: LIST
28977: IN
28978: IFFALSE 28999
// points := [ 40 , 10 , 20 ] ;
28980: LD_ADDR_VAR 0 9
28984: PUSH
28985: LD_INT 40
28987: PUSH
28988: LD_INT 10
28990: PUSH
28991: LD_INT 20
28993: PUSH
28994: EMPTY
28995: LIST
28996: LIST
28997: LIST
28998: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
28999: LD_VAR 0 6
29003: PPUSH
29004: CALL_OW 264
29008: PUSH
29009: LD_INT 9
29011: PUSH
29012: EMPTY
29013: LIST
29014: IN
29015: IFFALSE 29036
// points := [ 5 , 70 , 20 ] ;
29017: LD_ADDR_VAR 0 9
29021: PUSH
29022: LD_INT 5
29024: PUSH
29025: LD_INT 70
29027: PUSH
29028: LD_INT 20
29030: PUSH
29031: EMPTY
29032: LIST
29033: LIST
29034: LIST
29035: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
29036: LD_VAR 0 6
29040: PPUSH
29041: CALL_OW 264
29045: PUSH
29046: LD_INT 10
29048: PUSH
29049: EMPTY
29050: LIST
29051: IN
29052: IFFALSE 29073
// points := [ 35 , 110 , 70 ] ;
29054: LD_ADDR_VAR 0 9
29058: PUSH
29059: LD_INT 35
29061: PUSH
29062: LD_INT 110
29064: PUSH
29065: LD_INT 70
29067: PUSH
29068: EMPTY
29069: LIST
29070: LIST
29071: LIST
29072: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
29073: LD_VAR 0 6
29077: PPUSH
29078: CALL_OW 265
29082: PUSH
29083: LD_INT 25
29085: EQUAL
29086: IFFALSE 29107
// points := [ 80 , 65 , 100 ] ;
29088: LD_ADDR_VAR 0 9
29092: PUSH
29093: LD_INT 80
29095: PUSH
29096: LD_INT 65
29098: PUSH
29099: LD_INT 100
29101: PUSH
29102: EMPTY
29103: LIST
29104: LIST
29105: LIST
29106: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
29107: LD_VAR 0 6
29111: PPUSH
29112: CALL_OW 263
29116: PUSH
29117: LD_INT 1
29119: EQUAL
29120: IFFALSE 29155
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
29122: LD_ADDR_VAR 0 10
29126: PUSH
29127: LD_VAR 0 10
29131: PUSH
29132: LD_VAR 0 6
29136: PPUSH
29137: CALL_OW 311
29141: PPUSH
29142: LD_INT 3
29144: PPUSH
29145: CALL_OW 259
29149: PUSH
29150: LD_INT 4
29152: MUL
29153: MUL
29154: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
29155: LD_VAR 0 6
29159: PPUSH
29160: CALL_OW 263
29164: PUSH
29165: LD_INT 2
29167: EQUAL
29168: IFFALSE 29219
// begin j := IsControledBy ( i ) ;
29170: LD_ADDR_VAR 0 7
29174: PUSH
29175: LD_VAR 0 6
29179: PPUSH
29180: CALL_OW 312
29184: ST_TO_ADDR
// if j then
29185: LD_VAR 0 7
29189: IFFALSE 29219
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
29191: LD_ADDR_VAR 0 10
29195: PUSH
29196: LD_VAR 0 10
29200: PUSH
29201: LD_VAR 0 7
29205: PPUSH
29206: LD_INT 3
29208: PPUSH
29209: CALL_OW 259
29213: PUSH
29214: LD_INT 3
29216: MUL
29217: MUL
29218: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
29219: LD_VAR 0 6
29223: PPUSH
29224: CALL_OW 264
29228: PUSH
29229: LD_INT 5
29231: PUSH
29232: LD_INT 6
29234: PUSH
29235: LD_INT 46
29237: PUSH
29238: LD_INT 44
29240: PUSH
29241: LD_INT 47
29243: PUSH
29244: LD_INT 45
29246: PUSH
29247: LD_INT 28
29249: PUSH
29250: LD_INT 7
29252: PUSH
29253: LD_INT 27
29255: PUSH
29256: LD_INT 29
29258: PUSH
29259: EMPTY
29260: LIST
29261: LIST
29262: LIST
29263: LIST
29264: LIST
29265: LIST
29266: LIST
29267: LIST
29268: LIST
29269: LIST
29270: IN
29271: PUSH
29272: LD_VAR 0 1
29276: PPUSH
29277: LD_INT 52
29279: PPUSH
29280: CALL_OW 321
29284: PUSH
29285: LD_INT 2
29287: EQUAL
29288: AND
29289: IFFALSE 29306
// bpoints := bpoints * 1.2 ;
29291: LD_ADDR_VAR 0 10
29295: PUSH
29296: LD_VAR 0 10
29300: PUSH
29301: LD_REAL  1.20000000000000E+0000
29304: MUL
29305: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
29306: LD_VAR 0 6
29310: PPUSH
29311: CALL_OW 264
29315: PUSH
29316: LD_INT 6
29318: PUSH
29319: LD_INT 46
29321: PUSH
29322: LD_INT 47
29324: PUSH
29325: EMPTY
29326: LIST
29327: LIST
29328: LIST
29329: IN
29330: IFFALSE 29347
// bpoints := bpoints * 1.2 ;
29332: LD_ADDR_VAR 0 10
29336: PUSH
29337: LD_VAR 0 10
29341: PUSH
29342: LD_REAL  1.20000000000000E+0000
29345: MUL
29346: ST_TO_ADDR
// end ; unit_building :
29347: GO 29361
29349: LD_INT 3
29351: DOUBLE
29352: EQUAL
29353: IFTRUE 29357
29355: GO 29360
29357: POP
// ; end ;
29358: GO 29361
29360: POP
// for j = 1 to 3 do
29361: LD_ADDR_VAR 0 7
29365: PUSH
29366: DOUBLE
29367: LD_INT 1
29369: DEC
29370: ST_TO_ADDR
29371: LD_INT 3
29373: PUSH
29374: FOR_TO
29375: IFFALSE 29428
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
29377: LD_ADDR_VAR 0 5
29381: PUSH
29382: LD_VAR 0 5
29386: PPUSH
29387: LD_VAR 0 7
29391: PPUSH
29392: LD_VAR 0 5
29396: PUSH
29397: LD_VAR 0 7
29401: ARRAY
29402: PUSH
29403: LD_VAR 0 9
29407: PUSH
29408: LD_VAR 0 7
29412: ARRAY
29413: PUSH
29414: LD_VAR 0 10
29418: MUL
29419: PLUS
29420: PPUSH
29421: CALL_OW 1
29425: ST_TO_ADDR
29426: GO 29374
29428: POP
29429: POP
// end ;
29430: GO 27909
29432: POP
29433: POP
// result := Replace ( result , 4 , tmp ) ;
29434: LD_ADDR_VAR 0 5
29438: PUSH
29439: LD_VAR 0 5
29443: PPUSH
29444: LD_INT 4
29446: PPUSH
29447: LD_VAR 0 8
29451: PPUSH
29452: CALL_OW 1
29456: ST_TO_ADDR
// end ;
29457: LD_VAR 0 5
29461: RET
// export function DangerAtRange ( unit , range ) ; begin
29462: LD_INT 0
29464: PPUSH
// if not unit then
29465: LD_VAR 0 1
29469: NOT
29470: IFFALSE 29474
// exit ;
29472: GO 29519
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
29474: LD_ADDR_VAR 0 3
29478: PUSH
29479: LD_VAR 0 1
29483: PPUSH
29484: CALL_OW 255
29488: PPUSH
29489: LD_VAR 0 1
29493: PPUSH
29494: CALL_OW 250
29498: PPUSH
29499: LD_VAR 0 1
29503: PPUSH
29504: CALL_OW 251
29508: PPUSH
29509: LD_VAR 0 2
29513: PPUSH
29514: CALL 27761 0 4
29518: ST_TO_ADDR
// end ;
29519: LD_VAR 0 3
29523: RET
// export function DangerInArea ( side , area ) ; begin
29524: LD_INT 0
29526: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
29527: LD_ADDR_VAR 0 3
29531: PUSH
29532: LD_VAR 0 2
29536: PPUSH
29537: LD_INT 81
29539: PUSH
29540: LD_VAR 0 1
29544: PUSH
29545: EMPTY
29546: LIST
29547: LIST
29548: PPUSH
29549: CALL_OW 70
29553: ST_TO_ADDR
// end ;
29554: LD_VAR 0 3
29558: RET
// export function IsExtension ( b ) ; begin
29559: LD_INT 0
29561: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
29562: LD_ADDR_VAR 0 2
29566: PUSH
29567: LD_VAR 0 1
29571: PUSH
29572: LD_INT 23
29574: PUSH
29575: LD_INT 20
29577: PUSH
29578: LD_INT 22
29580: PUSH
29581: LD_INT 17
29583: PUSH
29584: LD_INT 24
29586: PUSH
29587: LD_INT 21
29589: PUSH
29590: LD_INT 19
29592: PUSH
29593: LD_INT 16
29595: PUSH
29596: LD_INT 25
29598: PUSH
29599: LD_INT 18
29601: PUSH
29602: EMPTY
29603: LIST
29604: LIST
29605: LIST
29606: LIST
29607: LIST
29608: LIST
29609: LIST
29610: LIST
29611: LIST
29612: LIST
29613: IN
29614: ST_TO_ADDR
// end ;
29615: LD_VAR 0 2
29619: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
29620: LD_INT 0
29622: PPUSH
29623: PPUSH
29624: PPUSH
// result := [ ] ;
29625: LD_ADDR_VAR 0 4
29629: PUSH
29630: EMPTY
29631: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
29632: LD_ADDR_VAR 0 5
29636: PUSH
29637: LD_VAR 0 2
29641: PPUSH
29642: LD_INT 21
29644: PUSH
29645: LD_INT 3
29647: PUSH
29648: EMPTY
29649: LIST
29650: LIST
29651: PPUSH
29652: CALL_OW 70
29656: ST_TO_ADDR
// if not tmp then
29657: LD_VAR 0 5
29661: NOT
29662: IFFALSE 29666
// exit ;
29664: GO 29730
// if checkLink then
29666: LD_VAR 0 3
29670: IFFALSE 29720
// begin for i in tmp do
29672: LD_ADDR_VAR 0 6
29676: PUSH
29677: LD_VAR 0 5
29681: PUSH
29682: FOR_IN
29683: IFFALSE 29718
// if GetBase ( i ) <> base then
29685: LD_VAR 0 6
29689: PPUSH
29690: CALL_OW 274
29694: PUSH
29695: LD_VAR 0 1
29699: NONEQUAL
29700: IFFALSE 29716
// ComLinkToBase ( base , i ) ;
29702: LD_VAR 0 1
29706: PPUSH
29707: LD_VAR 0 6
29711: PPUSH
29712: CALL_OW 169
29716: GO 29682
29718: POP
29719: POP
// end ; result := tmp ;
29720: LD_ADDR_VAR 0 4
29724: PUSH
29725: LD_VAR 0 5
29729: ST_TO_ADDR
// end ;
29730: LD_VAR 0 4
29734: RET
// export function ComComplete ( units , b ) ; var i ; begin
29735: LD_INT 0
29737: PPUSH
29738: PPUSH
// if not units then
29739: LD_VAR 0 1
29743: NOT
29744: IFFALSE 29748
// exit ;
29746: GO 29838
// for i in units do
29748: LD_ADDR_VAR 0 4
29752: PUSH
29753: LD_VAR 0 1
29757: PUSH
29758: FOR_IN
29759: IFFALSE 29836
// if BuildingStatus ( b ) = bs_build then
29761: LD_VAR 0 2
29765: PPUSH
29766: CALL_OW 461
29770: PUSH
29771: LD_INT 1
29773: EQUAL
29774: IFFALSE 29834
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
29776: LD_VAR 0 4
29780: PPUSH
29781: LD_STRING h
29783: PUSH
29784: LD_VAR 0 2
29788: PPUSH
29789: CALL_OW 250
29793: PUSH
29794: LD_VAR 0 2
29798: PPUSH
29799: CALL_OW 251
29803: PUSH
29804: LD_VAR 0 2
29808: PUSH
29809: LD_INT 0
29811: PUSH
29812: LD_INT 0
29814: PUSH
29815: LD_INT 0
29817: PUSH
29818: EMPTY
29819: LIST
29820: LIST
29821: LIST
29822: LIST
29823: LIST
29824: LIST
29825: LIST
29826: PUSH
29827: EMPTY
29828: LIST
29829: PPUSH
29830: CALL_OW 446
29834: GO 29758
29836: POP
29837: POP
// end ;
29838: LD_VAR 0 3
29842: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
29843: LD_INT 0
29845: PPUSH
29846: PPUSH
29847: PPUSH
29848: PPUSH
29849: PPUSH
29850: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
29851: LD_VAR 0 1
29855: NOT
29856: PUSH
29857: LD_VAR 0 1
29861: PPUSH
29862: CALL_OW 263
29866: PUSH
29867: LD_INT 2
29869: NONEQUAL
29870: OR
29871: IFFALSE 29875
// exit ;
29873: GO 30191
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
29875: LD_ADDR_VAR 0 6
29879: PUSH
29880: LD_INT 22
29882: PUSH
29883: LD_VAR 0 1
29887: PPUSH
29888: CALL_OW 255
29892: PUSH
29893: EMPTY
29894: LIST
29895: LIST
29896: PUSH
29897: LD_INT 2
29899: PUSH
29900: LD_INT 30
29902: PUSH
29903: LD_INT 36
29905: PUSH
29906: EMPTY
29907: LIST
29908: LIST
29909: PUSH
29910: LD_INT 34
29912: PUSH
29913: LD_INT 31
29915: PUSH
29916: EMPTY
29917: LIST
29918: LIST
29919: PUSH
29920: EMPTY
29921: LIST
29922: LIST
29923: LIST
29924: PUSH
29925: EMPTY
29926: LIST
29927: LIST
29928: PPUSH
29929: CALL_OW 69
29933: ST_TO_ADDR
// if not tmp then
29934: LD_VAR 0 6
29938: NOT
29939: IFFALSE 29943
// exit ;
29941: GO 30191
// result := [ ] ;
29943: LD_ADDR_VAR 0 2
29947: PUSH
29948: EMPTY
29949: ST_TO_ADDR
// for i in tmp do
29950: LD_ADDR_VAR 0 3
29954: PUSH
29955: LD_VAR 0 6
29959: PUSH
29960: FOR_IN
29961: IFFALSE 30032
// begin t := UnitsInside ( i ) ;
29963: LD_ADDR_VAR 0 4
29967: PUSH
29968: LD_VAR 0 3
29972: PPUSH
29973: CALL_OW 313
29977: ST_TO_ADDR
// if t then
29978: LD_VAR 0 4
29982: IFFALSE 30030
// for j in t do
29984: LD_ADDR_VAR 0 7
29988: PUSH
29989: LD_VAR 0 4
29993: PUSH
29994: FOR_IN
29995: IFFALSE 30028
// result := Replace ( result , result + 1 , j ) ;
29997: LD_ADDR_VAR 0 2
30001: PUSH
30002: LD_VAR 0 2
30006: PPUSH
30007: LD_VAR 0 2
30011: PUSH
30012: LD_INT 1
30014: PLUS
30015: PPUSH
30016: LD_VAR 0 7
30020: PPUSH
30021: CALL_OW 1
30025: ST_TO_ADDR
30026: GO 29994
30028: POP
30029: POP
// end ;
30030: GO 29960
30032: POP
30033: POP
// if not result then
30034: LD_VAR 0 2
30038: NOT
30039: IFFALSE 30043
// exit ;
30041: GO 30191
// mech := result [ 1 ] ;
30043: LD_ADDR_VAR 0 5
30047: PUSH
30048: LD_VAR 0 2
30052: PUSH
30053: LD_INT 1
30055: ARRAY
30056: ST_TO_ADDR
// if result > 1 then
30057: LD_VAR 0 2
30061: PUSH
30062: LD_INT 1
30064: GREATER
30065: IFFALSE 30177
// begin for i = 2 to result do
30067: LD_ADDR_VAR 0 3
30071: PUSH
30072: DOUBLE
30073: LD_INT 2
30075: DEC
30076: ST_TO_ADDR
30077: LD_VAR 0 2
30081: PUSH
30082: FOR_TO
30083: IFFALSE 30175
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
30085: LD_ADDR_VAR 0 4
30089: PUSH
30090: LD_VAR 0 2
30094: PUSH
30095: LD_VAR 0 3
30099: ARRAY
30100: PPUSH
30101: LD_INT 3
30103: PPUSH
30104: CALL_OW 259
30108: PUSH
30109: LD_VAR 0 2
30113: PUSH
30114: LD_VAR 0 3
30118: ARRAY
30119: PPUSH
30120: CALL_OW 432
30124: MINUS
30125: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
30126: LD_VAR 0 4
30130: PUSH
30131: LD_VAR 0 5
30135: PPUSH
30136: LD_INT 3
30138: PPUSH
30139: CALL_OW 259
30143: PUSH
30144: LD_VAR 0 5
30148: PPUSH
30149: CALL_OW 432
30153: MINUS
30154: GREATEREQUAL
30155: IFFALSE 30173
// mech := result [ i ] ;
30157: LD_ADDR_VAR 0 5
30161: PUSH
30162: LD_VAR 0 2
30166: PUSH
30167: LD_VAR 0 3
30171: ARRAY
30172: ST_TO_ADDR
// end ;
30173: GO 30082
30175: POP
30176: POP
// end ; ComLinkTo ( vehicle , mech ) ;
30177: LD_VAR 0 1
30181: PPUSH
30182: LD_VAR 0 5
30186: PPUSH
30187: CALL_OW 135
// end ;
30191: LD_VAR 0 2
30195: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
30196: LD_INT 0
30198: PPUSH
30199: PPUSH
30200: PPUSH
30201: PPUSH
30202: PPUSH
30203: PPUSH
30204: PPUSH
30205: PPUSH
30206: PPUSH
30207: PPUSH
30208: PPUSH
30209: PPUSH
30210: PPUSH
// result := [ ] ;
30211: LD_ADDR_VAR 0 7
30215: PUSH
30216: EMPTY
30217: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
30218: LD_VAR 0 1
30222: PPUSH
30223: CALL_OW 266
30227: PUSH
30228: LD_INT 0
30230: PUSH
30231: LD_INT 1
30233: PUSH
30234: EMPTY
30235: LIST
30236: LIST
30237: IN
30238: NOT
30239: IFFALSE 30243
// exit ;
30241: GO 31877
// if name then
30243: LD_VAR 0 3
30247: IFFALSE 30263
// SetBName ( base_dep , name ) ;
30249: LD_VAR 0 1
30253: PPUSH
30254: LD_VAR 0 3
30258: PPUSH
30259: CALL_OW 500
// base := GetBase ( base_dep ) ;
30263: LD_ADDR_VAR 0 15
30267: PUSH
30268: LD_VAR 0 1
30272: PPUSH
30273: CALL_OW 274
30277: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
30278: LD_ADDR_VAR 0 16
30282: PUSH
30283: LD_VAR 0 1
30287: PPUSH
30288: CALL_OW 255
30292: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
30293: LD_ADDR_VAR 0 17
30297: PUSH
30298: LD_VAR 0 1
30302: PPUSH
30303: CALL_OW 248
30307: ST_TO_ADDR
// if sources then
30308: LD_VAR 0 5
30312: IFFALSE 30359
// for i = 1 to 3 do
30314: LD_ADDR_VAR 0 8
30318: PUSH
30319: DOUBLE
30320: LD_INT 1
30322: DEC
30323: ST_TO_ADDR
30324: LD_INT 3
30326: PUSH
30327: FOR_TO
30328: IFFALSE 30357
// AddResourceType ( base , i , sources [ i ] ) ;
30330: LD_VAR 0 15
30334: PPUSH
30335: LD_VAR 0 8
30339: PPUSH
30340: LD_VAR 0 5
30344: PUSH
30345: LD_VAR 0 8
30349: ARRAY
30350: PPUSH
30351: CALL_OW 276
30355: GO 30327
30357: POP
30358: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
30359: LD_ADDR_VAR 0 18
30363: PUSH
30364: LD_VAR 0 15
30368: PPUSH
30369: LD_VAR 0 2
30373: PPUSH
30374: LD_INT 1
30376: PPUSH
30377: CALL 29620 0 3
30381: ST_TO_ADDR
// InitHc ;
30382: CALL_OW 19
// InitUc ;
30386: CALL_OW 18
// uc_side := side ;
30390: LD_ADDR_OWVAR 20
30394: PUSH
30395: LD_VAR 0 16
30399: ST_TO_ADDR
// uc_nation := nation ;
30400: LD_ADDR_OWVAR 21
30404: PUSH
30405: LD_VAR 0 17
30409: ST_TO_ADDR
// if buildings then
30410: LD_VAR 0 18
30414: IFFALSE 31736
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
30416: LD_ADDR_VAR 0 19
30420: PUSH
30421: LD_VAR 0 18
30425: PPUSH
30426: LD_INT 2
30428: PUSH
30429: LD_INT 30
30431: PUSH
30432: LD_INT 29
30434: PUSH
30435: EMPTY
30436: LIST
30437: LIST
30438: PUSH
30439: LD_INT 30
30441: PUSH
30442: LD_INT 30
30444: PUSH
30445: EMPTY
30446: LIST
30447: LIST
30448: PUSH
30449: EMPTY
30450: LIST
30451: LIST
30452: LIST
30453: PPUSH
30454: CALL_OW 72
30458: ST_TO_ADDR
// if tmp then
30459: LD_VAR 0 19
30463: IFFALSE 30511
// for i in tmp do
30465: LD_ADDR_VAR 0 8
30469: PUSH
30470: LD_VAR 0 19
30474: PUSH
30475: FOR_IN
30476: IFFALSE 30509
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
30478: LD_VAR 0 8
30482: PPUSH
30483: CALL_OW 250
30487: PPUSH
30488: LD_VAR 0 8
30492: PPUSH
30493: CALL_OW 251
30497: PPUSH
30498: LD_VAR 0 16
30502: PPUSH
30503: CALL_OW 441
30507: GO 30475
30509: POP
30510: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
30511: LD_VAR 0 18
30515: PPUSH
30516: LD_INT 2
30518: PUSH
30519: LD_INT 30
30521: PUSH
30522: LD_INT 32
30524: PUSH
30525: EMPTY
30526: LIST
30527: LIST
30528: PUSH
30529: LD_INT 30
30531: PUSH
30532: LD_INT 33
30534: PUSH
30535: EMPTY
30536: LIST
30537: LIST
30538: PUSH
30539: EMPTY
30540: LIST
30541: LIST
30542: LIST
30543: PPUSH
30544: CALL_OW 72
30548: IFFALSE 30636
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
30550: LD_ADDR_VAR 0 8
30554: PUSH
30555: LD_VAR 0 18
30559: PPUSH
30560: LD_INT 2
30562: PUSH
30563: LD_INT 30
30565: PUSH
30566: LD_INT 32
30568: PUSH
30569: EMPTY
30570: LIST
30571: LIST
30572: PUSH
30573: LD_INT 30
30575: PUSH
30576: LD_INT 33
30578: PUSH
30579: EMPTY
30580: LIST
30581: LIST
30582: PUSH
30583: EMPTY
30584: LIST
30585: LIST
30586: LIST
30587: PPUSH
30588: CALL_OW 72
30592: PUSH
30593: FOR_IN
30594: IFFALSE 30634
// begin if not GetBWeapon ( i ) then
30596: LD_VAR 0 8
30600: PPUSH
30601: CALL_OW 269
30605: NOT
30606: IFFALSE 30632
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
30608: LD_VAR 0 8
30612: PPUSH
30613: LD_VAR 0 8
30617: PPUSH
30618: LD_VAR 0 2
30622: PPUSH
30623: CALL 31882 0 2
30627: PPUSH
30628: CALL_OW 431
// end ;
30632: GO 30593
30634: POP
30635: POP
// end ; for i = 1 to personel do
30636: LD_ADDR_VAR 0 8
30640: PUSH
30641: DOUBLE
30642: LD_INT 1
30644: DEC
30645: ST_TO_ADDR
30646: LD_VAR 0 6
30650: PUSH
30651: FOR_TO
30652: IFFALSE 31716
// begin if i > 4 then
30654: LD_VAR 0 8
30658: PUSH
30659: LD_INT 4
30661: GREATER
30662: IFFALSE 30666
// break ;
30664: GO 31716
// case i of 1 :
30666: LD_VAR 0 8
30670: PUSH
30671: LD_INT 1
30673: DOUBLE
30674: EQUAL
30675: IFTRUE 30679
30677: GO 30759
30679: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
30680: LD_ADDR_VAR 0 12
30684: PUSH
30685: LD_VAR 0 18
30689: PPUSH
30690: LD_INT 22
30692: PUSH
30693: LD_VAR 0 16
30697: PUSH
30698: EMPTY
30699: LIST
30700: LIST
30701: PUSH
30702: LD_INT 58
30704: PUSH
30705: EMPTY
30706: LIST
30707: PUSH
30708: LD_INT 2
30710: PUSH
30711: LD_INT 30
30713: PUSH
30714: LD_INT 32
30716: PUSH
30717: EMPTY
30718: LIST
30719: LIST
30720: PUSH
30721: LD_INT 30
30723: PUSH
30724: LD_INT 4
30726: PUSH
30727: EMPTY
30728: LIST
30729: LIST
30730: PUSH
30731: LD_INT 30
30733: PUSH
30734: LD_INT 5
30736: PUSH
30737: EMPTY
30738: LIST
30739: LIST
30740: PUSH
30741: EMPTY
30742: LIST
30743: LIST
30744: LIST
30745: LIST
30746: PUSH
30747: EMPTY
30748: LIST
30749: LIST
30750: LIST
30751: PPUSH
30752: CALL_OW 72
30756: ST_TO_ADDR
30757: GO 30981
30759: LD_INT 2
30761: DOUBLE
30762: EQUAL
30763: IFTRUE 30767
30765: GO 30829
30767: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
30768: LD_ADDR_VAR 0 12
30772: PUSH
30773: LD_VAR 0 18
30777: PPUSH
30778: LD_INT 22
30780: PUSH
30781: LD_VAR 0 16
30785: PUSH
30786: EMPTY
30787: LIST
30788: LIST
30789: PUSH
30790: LD_INT 2
30792: PUSH
30793: LD_INT 30
30795: PUSH
30796: LD_INT 0
30798: PUSH
30799: EMPTY
30800: LIST
30801: LIST
30802: PUSH
30803: LD_INT 30
30805: PUSH
30806: LD_INT 1
30808: PUSH
30809: EMPTY
30810: LIST
30811: LIST
30812: PUSH
30813: EMPTY
30814: LIST
30815: LIST
30816: LIST
30817: PUSH
30818: EMPTY
30819: LIST
30820: LIST
30821: PPUSH
30822: CALL_OW 72
30826: ST_TO_ADDR
30827: GO 30981
30829: LD_INT 3
30831: DOUBLE
30832: EQUAL
30833: IFTRUE 30837
30835: GO 30899
30837: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
30838: LD_ADDR_VAR 0 12
30842: PUSH
30843: LD_VAR 0 18
30847: PPUSH
30848: LD_INT 22
30850: PUSH
30851: LD_VAR 0 16
30855: PUSH
30856: EMPTY
30857: LIST
30858: LIST
30859: PUSH
30860: LD_INT 2
30862: PUSH
30863: LD_INT 30
30865: PUSH
30866: LD_INT 2
30868: PUSH
30869: EMPTY
30870: LIST
30871: LIST
30872: PUSH
30873: LD_INT 30
30875: PUSH
30876: LD_INT 3
30878: PUSH
30879: EMPTY
30880: LIST
30881: LIST
30882: PUSH
30883: EMPTY
30884: LIST
30885: LIST
30886: LIST
30887: PUSH
30888: EMPTY
30889: LIST
30890: LIST
30891: PPUSH
30892: CALL_OW 72
30896: ST_TO_ADDR
30897: GO 30981
30899: LD_INT 4
30901: DOUBLE
30902: EQUAL
30903: IFTRUE 30907
30905: GO 30980
30907: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
30908: LD_ADDR_VAR 0 12
30912: PUSH
30913: LD_VAR 0 18
30917: PPUSH
30918: LD_INT 22
30920: PUSH
30921: LD_VAR 0 16
30925: PUSH
30926: EMPTY
30927: LIST
30928: LIST
30929: PUSH
30930: LD_INT 2
30932: PUSH
30933: LD_INT 30
30935: PUSH
30936: LD_INT 6
30938: PUSH
30939: EMPTY
30940: LIST
30941: LIST
30942: PUSH
30943: LD_INT 30
30945: PUSH
30946: LD_INT 7
30948: PUSH
30949: EMPTY
30950: LIST
30951: LIST
30952: PUSH
30953: LD_INT 30
30955: PUSH
30956: LD_INT 8
30958: PUSH
30959: EMPTY
30960: LIST
30961: LIST
30962: PUSH
30963: EMPTY
30964: LIST
30965: LIST
30966: LIST
30967: LIST
30968: PUSH
30969: EMPTY
30970: LIST
30971: LIST
30972: PPUSH
30973: CALL_OW 72
30977: ST_TO_ADDR
30978: GO 30981
30980: POP
// if i = 1 then
30981: LD_VAR 0 8
30985: PUSH
30986: LD_INT 1
30988: EQUAL
30989: IFFALSE 31100
// begin tmp := [ ] ;
30991: LD_ADDR_VAR 0 19
30995: PUSH
30996: EMPTY
30997: ST_TO_ADDR
// for j in f do
30998: LD_ADDR_VAR 0 9
31002: PUSH
31003: LD_VAR 0 12
31007: PUSH
31008: FOR_IN
31009: IFFALSE 31082
// if GetBType ( j ) = b_bunker then
31011: LD_VAR 0 9
31015: PPUSH
31016: CALL_OW 266
31020: PUSH
31021: LD_INT 32
31023: EQUAL
31024: IFFALSE 31051
// tmp := Insert ( tmp , 1 , j ) else
31026: LD_ADDR_VAR 0 19
31030: PUSH
31031: LD_VAR 0 19
31035: PPUSH
31036: LD_INT 1
31038: PPUSH
31039: LD_VAR 0 9
31043: PPUSH
31044: CALL_OW 2
31048: ST_TO_ADDR
31049: GO 31080
// tmp := Insert ( tmp , tmp + 1 , j ) ;
31051: LD_ADDR_VAR 0 19
31055: PUSH
31056: LD_VAR 0 19
31060: PPUSH
31061: LD_VAR 0 19
31065: PUSH
31066: LD_INT 1
31068: PLUS
31069: PPUSH
31070: LD_VAR 0 9
31074: PPUSH
31075: CALL_OW 2
31079: ST_TO_ADDR
31080: GO 31008
31082: POP
31083: POP
// if tmp then
31084: LD_VAR 0 19
31088: IFFALSE 31100
// f := tmp ;
31090: LD_ADDR_VAR 0 12
31094: PUSH
31095: LD_VAR 0 19
31099: ST_TO_ADDR
// end ; x := personel [ i ] ;
31100: LD_ADDR_VAR 0 13
31104: PUSH
31105: LD_VAR 0 6
31109: PUSH
31110: LD_VAR 0 8
31114: ARRAY
31115: ST_TO_ADDR
// if x = - 1 then
31116: LD_VAR 0 13
31120: PUSH
31121: LD_INT 1
31123: NEG
31124: EQUAL
31125: IFFALSE 31334
// begin for j in f do
31127: LD_ADDR_VAR 0 9
31131: PUSH
31132: LD_VAR 0 12
31136: PUSH
31137: FOR_IN
31138: IFFALSE 31330
// repeat InitHc ;
31140: CALL_OW 19
// if GetBType ( j ) = b_barracks then
31144: LD_VAR 0 9
31148: PPUSH
31149: CALL_OW 266
31153: PUSH
31154: LD_INT 5
31156: EQUAL
31157: IFFALSE 31227
// begin if UnitsInside ( j ) < 3 then
31159: LD_VAR 0 9
31163: PPUSH
31164: CALL_OW 313
31168: PUSH
31169: LD_INT 3
31171: LESS
31172: IFFALSE 31208
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
31174: LD_INT 0
31176: PPUSH
31177: LD_INT 5
31179: PUSH
31180: LD_INT 8
31182: PUSH
31183: LD_INT 9
31185: PUSH
31186: EMPTY
31187: LIST
31188: LIST
31189: LIST
31190: PUSH
31191: LD_VAR 0 17
31195: ARRAY
31196: PPUSH
31197: LD_VAR 0 4
31201: PPUSH
31202: CALL_OW 380
31206: GO 31225
// PrepareHuman ( false , i , skill ) ;
31208: LD_INT 0
31210: PPUSH
31211: LD_VAR 0 8
31215: PPUSH
31216: LD_VAR 0 4
31220: PPUSH
31221: CALL_OW 380
// end else
31225: GO 31244
// PrepareHuman ( false , i , skill ) ;
31227: LD_INT 0
31229: PPUSH
31230: LD_VAR 0 8
31234: PPUSH
31235: LD_VAR 0 4
31239: PPUSH
31240: CALL_OW 380
// un := CreateHuman ;
31244: LD_ADDR_VAR 0 14
31248: PUSH
31249: CALL_OW 44
31253: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
31254: LD_ADDR_VAR 0 7
31258: PUSH
31259: LD_VAR 0 7
31263: PPUSH
31264: LD_INT 1
31266: PPUSH
31267: LD_VAR 0 14
31271: PPUSH
31272: CALL_OW 2
31276: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
31277: LD_VAR 0 14
31281: PPUSH
31282: LD_VAR 0 9
31286: PPUSH
31287: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
31291: LD_VAR 0 9
31295: PPUSH
31296: CALL_OW 313
31300: PUSH
31301: LD_INT 6
31303: EQUAL
31304: PUSH
31305: LD_VAR 0 9
31309: PPUSH
31310: CALL_OW 266
31314: PUSH
31315: LD_INT 32
31317: PUSH
31318: LD_INT 31
31320: PUSH
31321: EMPTY
31322: LIST
31323: LIST
31324: IN
31325: OR
31326: IFFALSE 31140
31328: GO 31137
31330: POP
31331: POP
// end else
31332: GO 31714
// for j = 1 to x do
31334: LD_ADDR_VAR 0 9
31338: PUSH
31339: DOUBLE
31340: LD_INT 1
31342: DEC
31343: ST_TO_ADDR
31344: LD_VAR 0 13
31348: PUSH
31349: FOR_TO
31350: IFFALSE 31712
// begin InitHc ;
31352: CALL_OW 19
// if not f then
31356: LD_VAR 0 12
31360: NOT
31361: IFFALSE 31450
// begin PrepareHuman ( false , i , skill ) ;
31363: LD_INT 0
31365: PPUSH
31366: LD_VAR 0 8
31370: PPUSH
31371: LD_VAR 0 4
31375: PPUSH
31376: CALL_OW 380
// un := CreateHuman ;
31380: LD_ADDR_VAR 0 14
31384: PUSH
31385: CALL_OW 44
31389: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
31390: LD_ADDR_VAR 0 7
31394: PUSH
31395: LD_VAR 0 7
31399: PPUSH
31400: LD_INT 1
31402: PPUSH
31403: LD_VAR 0 14
31407: PPUSH
31408: CALL_OW 2
31412: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
31413: LD_VAR 0 14
31417: PPUSH
31418: LD_VAR 0 1
31422: PPUSH
31423: CALL_OW 250
31427: PPUSH
31428: LD_VAR 0 1
31432: PPUSH
31433: CALL_OW 251
31437: PPUSH
31438: LD_INT 10
31440: PPUSH
31441: LD_INT 0
31443: PPUSH
31444: CALL_OW 50
// continue ;
31448: GO 31349
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
31450: LD_VAR 0 12
31454: PUSH
31455: LD_INT 1
31457: ARRAY
31458: PPUSH
31459: CALL_OW 313
31463: PUSH
31464: LD_VAR 0 12
31468: PUSH
31469: LD_INT 1
31471: ARRAY
31472: PPUSH
31473: CALL_OW 266
31477: PUSH
31478: LD_INT 32
31480: PUSH
31481: LD_INT 31
31483: PUSH
31484: EMPTY
31485: LIST
31486: LIST
31487: IN
31488: AND
31489: PUSH
31490: LD_VAR 0 12
31494: PUSH
31495: LD_INT 1
31497: ARRAY
31498: PPUSH
31499: CALL_OW 313
31503: PUSH
31504: LD_INT 6
31506: EQUAL
31507: OR
31508: IFFALSE 31528
// f := Delete ( f , 1 ) ;
31510: LD_ADDR_VAR 0 12
31514: PUSH
31515: LD_VAR 0 12
31519: PPUSH
31520: LD_INT 1
31522: PPUSH
31523: CALL_OW 3
31527: ST_TO_ADDR
// if not f then
31528: LD_VAR 0 12
31532: NOT
31533: IFFALSE 31551
// begin x := x + 2 ;
31535: LD_ADDR_VAR 0 13
31539: PUSH
31540: LD_VAR 0 13
31544: PUSH
31545: LD_INT 2
31547: PLUS
31548: ST_TO_ADDR
// continue ;
31549: GO 31349
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
31551: LD_VAR 0 12
31555: PUSH
31556: LD_INT 1
31558: ARRAY
31559: PPUSH
31560: CALL_OW 266
31564: PUSH
31565: LD_INT 5
31567: EQUAL
31568: IFFALSE 31642
// begin if UnitsInside ( f [ 1 ] ) < 3 then
31570: LD_VAR 0 12
31574: PUSH
31575: LD_INT 1
31577: ARRAY
31578: PPUSH
31579: CALL_OW 313
31583: PUSH
31584: LD_INT 3
31586: LESS
31587: IFFALSE 31623
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
31589: LD_INT 0
31591: PPUSH
31592: LD_INT 5
31594: PUSH
31595: LD_INT 8
31597: PUSH
31598: LD_INT 9
31600: PUSH
31601: EMPTY
31602: LIST
31603: LIST
31604: LIST
31605: PUSH
31606: LD_VAR 0 17
31610: ARRAY
31611: PPUSH
31612: LD_VAR 0 4
31616: PPUSH
31617: CALL_OW 380
31621: GO 31640
// PrepareHuman ( false , i , skill ) ;
31623: LD_INT 0
31625: PPUSH
31626: LD_VAR 0 8
31630: PPUSH
31631: LD_VAR 0 4
31635: PPUSH
31636: CALL_OW 380
// end else
31640: GO 31659
// PrepareHuman ( false , i , skill ) ;
31642: LD_INT 0
31644: PPUSH
31645: LD_VAR 0 8
31649: PPUSH
31650: LD_VAR 0 4
31654: PPUSH
31655: CALL_OW 380
// un := CreateHuman ;
31659: LD_ADDR_VAR 0 14
31663: PUSH
31664: CALL_OW 44
31668: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
31669: LD_ADDR_VAR 0 7
31673: PUSH
31674: LD_VAR 0 7
31678: PPUSH
31679: LD_INT 1
31681: PPUSH
31682: LD_VAR 0 14
31686: PPUSH
31687: CALL_OW 2
31691: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
31692: LD_VAR 0 14
31696: PPUSH
31697: LD_VAR 0 12
31701: PUSH
31702: LD_INT 1
31704: ARRAY
31705: PPUSH
31706: CALL_OW 52
// end ;
31710: GO 31349
31712: POP
31713: POP
// end ;
31714: GO 30651
31716: POP
31717: POP
// result := result ^ buildings ;
31718: LD_ADDR_VAR 0 7
31722: PUSH
31723: LD_VAR 0 7
31727: PUSH
31728: LD_VAR 0 18
31732: ADD
31733: ST_TO_ADDR
// end else
31734: GO 31877
// begin for i = 1 to personel do
31736: LD_ADDR_VAR 0 8
31740: PUSH
31741: DOUBLE
31742: LD_INT 1
31744: DEC
31745: ST_TO_ADDR
31746: LD_VAR 0 6
31750: PUSH
31751: FOR_TO
31752: IFFALSE 31875
// begin if i > 4 then
31754: LD_VAR 0 8
31758: PUSH
31759: LD_INT 4
31761: GREATER
31762: IFFALSE 31766
// break ;
31764: GO 31875
// x := personel [ i ] ;
31766: LD_ADDR_VAR 0 13
31770: PUSH
31771: LD_VAR 0 6
31775: PUSH
31776: LD_VAR 0 8
31780: ARRAY
31781: ST_TO_ADDR
// if x = - 1 then
31782: LD_VAR 0 13
31786: PUSH
31787: LD_INT 1
31789: NEG
31790: EQUAL
31791: IFFALSE 31795
// continue ;
31793: GO 31751
// PrepareHuman ( false , i , skill ) ;
31795: LD_INT 0
31797: PPUSH
31798: LD_VAR 0 8
31802: PPUSH
31803: LD_VAR 0 4
31807: PPUSH
31808: CALL_OW 380
// un := CreateHuman ;
31812: LD_ADDR_VAR 0 14
31816: PUSH
31817: CALL_OW 44
31821: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
31822: LD_VAR 0 14
31826: PPUSH
31827: LD_VAR 0 1
31831: PPUSH
31832: CALL_OW 250
31836: PPUSH
31837: LD_VAR 0 1
31841: PPUSH
31842: CALL_OW 251
31846: PPUSH
31847: LD_INT 10
31849: PPUSH
31850: LD_INT 0
31852: PPUSH
31853: CALL_OW 50
// result := result ^ un ;
31857: LD_ADDR_VAR 0 7
31861: PUSH
31862: LD_VAR 0 7
31866: PUSH
31867: LD_VAR 0 14
31871: ADD
31872: ST_TO_ADDR
// end ;
31873: GO 31751
31875: POP
31876: POP
// end ; end ;
31877: LD_VAR 0 7
31881: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
31882: LD_INT 0
31884: PPUSH
31885: PPUSH
31886: PPUSH
31887: PPUSH
31888: PPUSH
31889: PPUSH
31890: PPUSH
31891: PPUSH
31892: PPUSH
31893: PPUSH
31894: PPUSH
31895: PPUSH
31896: PPUSH
31897: PPUSH
31898: PPUSH
31899: PPUSH
// result := false ;
31900: LD_ADDR_VAR 0 3
31904: PUSH
31905: LD_INT 0
31907: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
31908: LD_VAR 0 1
31912: NOT
31913: PUSH
31914: LD_VAR 0 1
31918: PPUSH
31919: CALL_OW 266
31923: PUSH
31924: LD_INT 32
31926: PUSH
31927: LD_INT 33
31929: PUSH
31930: EMPTY
31931: LIST
31932: LIST
31933: IN
31934: NOT
31935: OR
31936: IFFALSE 31940
// exit ;
31938: GO 33049
// nat := GetNation ( tower ) ;
31940: LD_ADDR_VAR 0 12
31944: PUSH
31945: LD_VAR 0 1
31949: PPUSH
31950: CALL_OW 248
31954: ST_TO_ADDR
// side := GetSide ( tower ) ;
31955: LD_ADDR_VAR 0 16
31959: PUSH
31960: LD_VAR 0 1
31964: PPUSH
31965: CALL_OW 255
31969: ST_TO_ADDR
// x := GetX ( tower ) ;
31970: LD_ADDR_VAR 0 10
31974: PUSH
31975: LD_VAR 0 1
31979: PPUSH
31980: CALL_OW 250
31984: ST_TO_ADDR
// y := GetY ( tower ) ;
31985: LD_ADDR_VAR 0 11
31989: PUSH
31990: LD_VAR 0 1
31994: PPUSH
31995: CALL_OW 251
31999: ST_TO_ADDR
// if not x or not y then
32000: LD_VAR 0 10
32004: NOT
32005: PUSH
32006: LD_VAR 0 11
32010: NOT
32011: OR
32012: IFFALSE 32016
// exit ;
32014: GO 33049
// weapon := 0 ;
32016: LD_ADDR_VAR 0 18
32020: PUSH
32021: LD_INT 0
32023: ST_TO_ADDR
// fac_list := [ ] ;
32024: LD_ADDR_VAR 0 17
32028: PUSH
32029: EMPTY
32030: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
32031: LD_ADDR_VAR 0 6
32035: PUSH
32036: LD_VAR 0 1
32040: PPUSH
32041: CALL_OW 274
32045: PPUSH
32046: LD_VAR 0 2
32050: PPUSH
32051: LD_INT 0
32053: PPUSH
32054: CALL 29620 0 3
32058: PPUSH
32059: LD_INT 30
32061: PUSH
32062: LD_INT 3
32064: PUSH
32065: EMPTY
32066: LIST
32067: LIST
32068: PPUSH
32069: CALL_OW 72
32073: ST_TO_ADDR
// if not factories then
32074: LD_VAR 0 6
32078: NOT
32079: IFFALSE 32083
// exit ;
32081: GO 33049
// for i in factories do
32083: LD_ADDR_VAR 0 8
32087: PUSH
32088: LD_VAR 0 6
32092: PUSH
32093: FOR_IN
32094: IFFALSE 32119
// fac_list := fac_list union AvailableWeaponList ( i ) ;
32096: LD_ADDR_VAR 0 17
32100: PUSH
32101: LD_VAR 0 17
32105: PUSH
32106: LD_VAR 0 8
32110: PPUSH
32111: CALL_OW 478
32115: UNION
32116: ST_TO_ADDR
32117: GO 32093
32119: POP
32120: POP
// if not fac_list then
32121: LD_VAR 0 17
32125: NOT
32126: IFFALSE 32130
// exit ;
32128: GO 33049
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
32130: LD_ADDR_VAR 0 5
32134: PUSH
32135: LD_INT 4
32137: PUSH
32138: LD_INT 5
32140: PUSH
32141: LD_INT 9
32143: PUSH
32144: LD_INT 10
32146: PUSH
32147: LD_INT 6
32149: PUSH
32150: LD_INT 7
32152: PUSH
32153: LD_INT 11
32155: PUSH
32156: EMPTY
32157: LIST
32158: LIST
32159: LIST
32160: LIST
32161: LIST
32162: LIST
32163: LIST
32164: PUSH
32165: LD_INT 27
32167: PUSH
32168: LD_INT 28
32170: PUSH
32171: LD_INT 26
32173: PUSH
32174: LD_INT 30
32176: PUSH
32177: EMPTY
32178: LIST
32179: LIST
32180: LIST
32181: LIST
32182: PUSH
32183: LD_INT 43
32185: PUSH
32186: LD_INT 44
32188: PUSH
32189: LD_INT 46
32191: PUSH
32192: LD_INT 45
32194: PUSH
32195: LD_INT 47
32197: PUSH
32198: LD_INT 49
32200: PUSH
32201: EMPTY
32202: LIST
32203: LIST
32204: LIST
32205: LIST
32206: LIST
32207: LIST
32208: PUSH
32209: EMPTY
32210: LIST
32211: LIST
32212: LIST
32213: PUSH
32214: LD_VAR 0 12
32218: ARRAY
32219: ST_TO_ADDR
// list := list isect fac_list ;
32220: LD_ADDR_VAR 0 5
32224: PUSH
32225: LD_VAR 0 5
32229: PUSH
32230: LD_VAR 0 17
32234: ISECT
32235: ST_TO_ADDR
// if not list then
32236: LD_VAR 0 5
32240: NOT
32241: IFFALSE 32245
// exit ;
32243: GO 33049
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
32245: LD_VAR 0 12
32249: PUSH
32250: LD_INT 3
32252: EQUAL
32253: PUSH
32254: LD_INT 49
32256: PUSH
32257: LD_VAR 0 5
32261: IN
32262: AND
32263: PUSH
32264: LD_INT 31
32266: PPUSH
32267: LD_VAR 0 16
32271: PPUSH
32272: CALL_OW 321
32276: PUSH
32277: LD_INT 2
32279: EQUAL
32280: AND
32281: IFFALSE 32341
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
32283: LD_INT 22
32285: PUSH
32286: LD_VAR 0 16
32290: PUSH
32291: EMPTY
32292: LIST
32293: LIST
32294: PUSH
32295: LD_INT 35
32297: PUSH
32298: LD_INT 49
32300: PUSH
32301: EMPTY
32302: LIST
32303: LIST
32304: PUSH
32305: LD_INT 91
32307: PUSH
32308: LD_VAR 0 1
32312: PUSH
32313: LD_INT 10
32315: PUSH
32316: EMPTY
32317: LIST
32318: LIST
32319: LIST
32320: PUSH
32321: EMPTY
32322: LIST
32323: LIST
32324: LIST
32325: PPUSH
32326: CALL_OW 69
32330: NOT
32331: IFFALSE 32341
// weapon := ru_time_lapser ;
32333: LD_ADDR_VAR 0 18
32337: PUSH
32338: LD_INT 49
32340: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
32341: LD_VAR 0 12
32345: PUSH
32346: LD_INT 1
32348: PUSH
32349: LD_INT 2
32351: PUSH
32352: EMPTY
32353: LIST
32354: LIST
32355: IN
32356: PUSH
32357: LD_INT 11
32359: PUSH
32360: LD_VAR 0 5
32364: IN
32365: PUSH
32366: LD_INT 30
32368: PUSH
32369: LD_VAR 0 5
32373: IN
32374: OR
32375: AND
32376: PUSH
32377: LD_INT 6
32379: PPUSH
32380: LD_VAR 0 16
32384: PPUSH
32385: CALL_OW 321
32389: PUSH
32390: LD_INT 2
32392: EQUAL
32393: AND
32394: IFFALSE 32559
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
32396: LD_INT 22
32398: PUSH
32399: LD_VAR 0 16
32403: PUSH
32404: EMPTY
32405: LIST
32406: LIST
32407: PUSH
32408: LD_INT 2
32410: PUSH
32411: LD_INT 35
32413: PUSH
32414: LD_INT 11
32416: PUSH
32417: EMPTY
32418: LIST
32419: LIST
32420: PUSH
32421: LD_INT 35
32423: PUSH
32424: LD_INT 30
32426: PUSH
32427: EMPTY
32428: LIST
32429: LIST
32430: PUSH
32431: EMPTY
32432: LIST
32433: LIST
32434: LIST
32435: PUSH
32436: LD_INT 91
32438: PUSH
32439: LD_VAR 0 1
32443: PUSH
32444: LD_INT 18
32446: PUSH
32447: EMPTY
32448: LIST
32449: LIST
32450: LIST
32451: PUSH
32452: EMPTY
32453: LIST
32454: LIST
32455: LIST
32456: PPUSH
32457: CALL_OW 69
32461: NOT
32462: PUSH
32463: LD_INT 22
32465: PUSH
32466: LD_VAR 0 16
32470: PUSH
32471: EMPTY
32472: LIST
32473: LIST
32474: PUSH
32475: LD_INT 2
32477: PUSH
32478: LD_INT 30
32480: PUSH
32481: LD_INT 32
32483: PUSH
32484: EMPTY
32485: LIST
32486: LIST
32487: PUSH
32488: LD_INT 30
32490: PUSH
32491: LD_INT 33
32493: PUSH
32494: EMPTY
32495: LIST
32496: LIST
32497: PUSH
32498: EMPTY
32499: LIST
32500: LIST
32501: LIST
32502: PUSH
32503: LD_INT 91
32505: PUSH
32506: LD_VAR 0 1
32510: PUSH
32511: LD_INT 12
32513: PUSH
32514: EMPTY
32515: LIST
32516: LIST
32517: LIST
32518: PUSH
32519: EMPTY
32520: LIST
32521: LIST
32522: LIST
32523: PUSH
32524: EMPTY
32525: LIST
32526: PPUSH
32527: CALL_OW 69
32531: PUSH
32532: LD_INT 2
32534: GREATER
32535: AND
32536: IFFALSE 32559
// weapon := [ us_radar , ar_radar ] [ nat ] ;
32538: LD_ADDR_VAR 0 18
32542: PUSH
32543: LD_INT 11
32545: PUSH
32546: LD_INT 30
32548: PUSH
32549: EMPTY
32550: LIST
32551: LIST
32552: PUSH
32553: LD_VAR 0 12
32557: ARRAY
32558: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
32559: LD_VAR 0 18
32563: NOT
32564: PUSH
32565: LD_INT 40
32567: PPUSH
32568: LD_VAR 0 16
32572: PPUSH
32573: CALL_OW 321
32577: PUSH
32578: LD_INT 2
32580: EQUAL
32581: AND
32582: PUSH
32583: LD_INT 7
32585: PUSH
32586: LD_VAR 0 5
32590: IN
32591: PUSH
32592: LD_INT 28
32594: PUSH
32595: LD_VAR 0 5
32599: IN
32600: OR
32601: PUSH
32602: LD_INT 45
32604: PUSH
32605: LD_VAR 0 5
32609: IN
32610: OR
32611: AND
32612: IFFALSE 32866
// begin hex := GetHexInfo ( x , y ) ;
32614: LD_ADDR_VAR 0 4
32618: PUSH
32619: LD_VAR 0 10
32623: PPUSH
32624: LD_VAR 0 11
32628: PPUSH
32629: CALL_OW 546
32633: ST_TO_ADDR
// if hex [ 1 ] then
32634: LD_VAR 0 4
32638: PUSH
32639: LD_INT 1
32641: ARRAY
32642: IFFALSE 32646
// exit ;
32644: GO 33049
// height := hex [ 2 ] ;
32646: LD_ADDR_VAR 0 15
32650: PUSH
32651: LD_VAR 0 4
32655: PUSH
32656: LD_INT 2
32658: ARRAY
32659: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
32660: LD_ADDR_VAR 0 14
32664: PUSH
32665: LD_INT 0
32667: PUSH
32668: LD_INT 2
32670: PUSH
32671: LD_INT 3
32673: PUSH
32674: LD_INT 5
32676: PUSH
32677: EMPTY
32678: LIST
32679: LIST
32680: LIST
32681: LIST
32682: ST_TO_ADDR
// for i in tmp do
32683: LD_ADDR_VAR 0 8
32687: PUSH
32688: LD_VAR 0 14
32692: PUSH
32693: FOR_IN
32694: IFFALSE 32864
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
32696: LD_ADDR_VAR 0 9
32700: PUSH
32701: LD_VAR 0 10
32705: PPUSH
32706: LD_VAR 0 8
32710: PPUSH
32711: LD_INT 5
32713: PPUSH
32714: CALL_OW 272
32718: PUSH
32719: LD_VAR 0 11
32723: PPUSH
32724: LD_VAR 0 8
32728: PPUSH
32729: LD_INT 5
32731: PPUSH
32732: CALL_OW 273
32736: PUSH
32737: EMPTY
32738: LIST
32739: LIST
32740: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
32741: LD_VAR 0 9
32745: PUSH
32746: LD_INT 1
32748: ARRAY
32749: PPUSH
32750: LD_VAR 0 9
32754: PUSH
32755: LD_INT 2
32757: ARRAY
32758: PPUSH
32759: CALL_OW 488
32763: IFFALSE 32862
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
32765: LD_ADDR_VAR 0 4
32769: PUSH
32770: LD_VAR 0 9
32774: PUSH
32775: LD_INT 1
32777: ARRAY
32778: PPUSH
32779: LD_VAR 0 9
32783: PUSH
32784: LD_INT 2
32786: ARRAY
32787: PPUSH
32788: CALL_OW 546
32792: ST_TO_ADDR
// if hex [ 1 ] then
32793: LD_VAR 0 4
32797: PUSH
32798: LD_INT 1
32800: ARRAY
32801: IFFALSE 32805
// continue ;
32803: GO 32693
// h := hex [ 2 ] ;
32805: LD_ADDR_VAR 0 13
32809: PUSH
32810: LD_VAR 0 4
32814: PUSH
32815: LD_INT 2
32817: ARRAY
32818: ST_TO_ADDR
// if h + 7 < height then
32819: LD_VAR 0 13
32823: PUSH
32824: LD_INT 7
32826: PLUS
32827: PUSH
32828: LD_VAR 0 15
32832: LESS
32833: IFFALSE 32862
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
32835: LD_ADDR_VAR 0 18
32839: PUSH
32840: LD_INT 7
32842: PUSH
32843: LD_INT 28
32845: PUSH
32846: LD_INT 45
32848: PUSH
32849: EMPTY
32850: LIST
32851: LIST
32852: LIST
32853: PUSH
32854: LD_VAR 0 12
32858: ARRAY
32859: ST_TO_ADDR
// break ;
32860: GO 32864
// end ; end ; end ;
32862: GO 32693
32864: POP
32865: POP
// end ; if not weapon then
32866: LD_VAR 0 18
32870: NOT
32871: IFFALSE 32931
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
32873: LD_ADDR_VAR 0 5
32877: PUSH
32878: LD_VAR 0 5
32882: PUSH
32883: LD_INT 11
32885: PUSH
32886: LD_INT 30
32888: PUSH
32889: LD_INT 49
32891: PUSH
32892: EMPTY
32893: LIST
32894: LIST
32895: LIST
32896: DIFF
32897: ST_TO_ADDR
// if not list then
32898: LD_VAR 0 5
32902: NOT
32903: IFFALSE 32907
// exit ;
32905: GO 33049
// weapon := list [ rand ( 1 , list ) ] ;
32907: LD_ADDR_VAR 0 18
32911: PUSH
32912: LD_VAR 0 5
32916: PUSH
32917: LD_INT 1
32919: PPUSH
32920: LD_VAR 0 5
32924: PPUSH
32925: CALL_OW 12
32929: ARRAY
32930: ST_TO_ADDR
// end ; if weapon then
32931: LD_VAR 0 18
32935: IFFALSE 33049
// begin tmp := CostOfWeapon ( weapon ) ;
32937: LD_ADDR_VAR 0 14
32941: PUSH
32942: LD_VAR 0 18
32946: PPUSH
32947: CALL_OW 451
32951: ST_TO_ADDR
// j := GetBase ( tower ) ;
32952: LD_ADDR_VAR 0 9
32956: PUSH
32957: LD_VAR 0 1
32961: PPUSH
32962: CALL_OW 274
32966: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
32967: LD_VAR 0 9
32971: PPUSH
32972: LD_INT 1
32974: PPUSH
32975: CALL_OW 275
32979: PUSH
32980: LD_VAR 0 14
32984: PUSH
32985: LD_INT 1
32987: ARRAY
32988: GREATEREQUAL
32989: PUSH
32990: LD_VAR 0 9
32994: PPUSH
32995: LD_INT 2
32997: PPUSH
32998: CALL_OW 275
33002: PUSH
33003: LD_VAR 0 14
33007: PUSH
33008: LD_INT 2
33010: ARRAY
33011: GREATEREQUAL
33012: AND
33013: PUSH
33014: LD_VAR 0 9
33018: PPUSH
33019: LD_INT 3
33021: PPUSH
33022: CALL_OW 275
33026: PUSH
33027: LD_VAR 0 14
33031: PUSH
33032: LD_INT 3
33034: ARRAY
33035: GREATEREQUAL
33036: AND
33037: IFFALSE 33049
// result := weapon ;
33039: LD_ADDR_VAR 0 3
33043: PUSH
33044: LD_VAR 0 18
33048: ST_TO_ADDR
// end ; end ;
33049: LD_VAR 0 3
33053: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
33054: LD_INT 0
33056: PPUSH
33057: PPUSH
// result := true ;
33058: LD_ADDR_VAR 0 3
33062: PUSH
33063: LD_INT 1
33065: ST_TO_ADDR
// if array1 = array2 then
33066: LD_VAR 0 1
33070: PUSH
33071: LD_VAR 0 2
33075: EQUAL
33076: IFFALSE 33136
// begin for i = 1 to array1 do
33078: LD_ADDR_VAR 0 4
33082: PUSH
33083: DOUBLE
33084: LD_INT 1
33086: DEC
33087: ST_TO_ADDR
33088: LD_VAR 0 1
33092: PUSH
33093: FOR_TO
33094: IFFALSE 33132
// if array1 [ i ] <> array2 [ i ] then
33096: LD_VAR 0 1
33100: PUSH
33101: LD_VAR 0 4
33105: ARRAY
33106: PUSH
33107: LD_VAR 0 2
33111: PUSH
33112: LD_VAR 0 4
33116: ARRAY
33117: NONEQUAL
33118: IFFALSE 33130
// begin result := false ;
33120: LD_ADDR_VAR 0 3
33124: PUSH
33125: LD_INT 0
33127: ST_TO_ADDR
// break ;
33128: GO 33132
// end ;
33130: GO 33093
33132: POP
33133: POP
// end else
33134: GO 33144
// result := false ;
33136: LD_ADDR_VAR 0 3
33140: PUSH
33141: LD_INT 0
33143: ST_TO_ADDR
// end ;
33144: LD_VAR 0 3
33148: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
33149: LD_INT 0
33151: PPUSH
33152: PPUSH
// if not array1 or not array2 then
33153: LD_VAR 0 1
33157: NOT
33158: PUSH
33159: LD_VAR 0 2
33163: NOT
33164: OR
33165: IFFALSE 33169
// exit ;
33167: GO 33233
// result := true ;
33169: LD_ADDR_VAR 0 3
33173: PUSH
33174: LD_INT 1
33176: ST_TO_ADDR
// for i = 1 to array1 do
33177: LD_ADDR_VAR 0 4
33181: PUSH
33182: DOUBLE
33183: LD_INT 1
33185: DEC
33186: ST_TO_ADDR
33187: LD_VAR 0 1
33191: PUSH
33192: FOR_TO
33193: IFFALSE 33231
// if array1 [ i ] <> array2 [ i ] then
33195: LD_VAR 0 1
33199: PUSH
33200: LD_VAR 0 4
33204: ARRAY
33205: PUSH
33206: LD_VAR 0 2
33210: PUSH
33211: LD_VAR 0 4
33215: ARRAY
33216: NONEQUAL
33217: IFFALSE 33229
// begin result := false ;
33219: LD_ADDR_VAR 0 3
33223: PUSH
33224: LD_INT 0
33226: ST_TO_ADDR
// break ;
33227: GO 33231
// end ;
33229: GO 33192
33231: POP
33232: POP
// end ;
33233: LD_VAR 0 3
33237: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
33238: LD_INT 0
33240: PPUSH
33241: PPUSH
33242: PPUSH
// pom := GetBase ( fac ) ;
33243: LD_ADDR_VAR 0 5
33247: PUSH
33248: LD_VAR 0 1
33252: PPUSH
33253: CALL_OW 274
33257: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
33258: LD_ADDR_VAR 0 4
33262: PUSH
33263: LD_VAR 0 2
33267: PUSH
33268: LD_INT 1
33270: ARRAY
33271: PPUSH
33272: LD_VAR 0 2
33276: PUSH
33277: LD_INT 2
33279: ARRAY
33280: PPUSH
33281: LD_VAR 0 2
33285: PUSH
33286: LD_INT 3
33288: ARRAY
33289: PPUSH
33290: LD_VAR 0 2
33294: PUSH
33295: LD_INT 4
33297: ARRAY
33298: PPUSH
33299: CALL_OW 449
33303: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
33304: LD_ADDR_VAR 0 3
33308: PUSH
33309: LD_VAR 0 5
33313: PPUSH
33314: LD_INT 1
33316: PPUSH
33317: CALL_OW 275
33321: PUSH
33322: LD_VAR 0 4
33326: PUSH
33327: LD_INT 1
33329: ARRAY
33330: GREATEREQUAL
33331: PUSH
33332: LD_VAR 0 5
33336: PPUSH
33337: LD_INT 2
33339: PPUSH
33340: CALL_OW 275
33344: PUSH
33345: LD_VAR 0 4
33349: PUSH
33350: LD_INT 2
33352: ARRAY
33353: GREATEREQUAL
33354: AND
33355: PUSH
33356: LD_VAR 0 5
33360: PPUSH
33361: LD_INT 3
33363: PPUSH
33364: CALL_OW 275
33368: PUSH
33369: LD_VAR 0 4
33373: PUSH
33374: LD_INT 3
33376: ARRAY
33377: GREATEREQUAL
33378: AND
33379: ST_TO_ADDR
// end ;
33380: LD_VAR 0 3
33384: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
33385: LD_INT 0
33387: PPUSH
33388: PPUSH
33389: PPUSH
33390: PPUSH
// pom := GetBase ( building ) ;
33391: LD_ADDR_VAR 0 3
33395: PUSH
33396: LD_VAR 0 1
33400: PPUSH
33401: CALL_OW 274
33405: ST_TO_ADDR
// if not pom then
33406: LD_VAR 0 3
33410: NOT
33411: IFFALSE 33415
// exit ;
33413: GO 33585
// btype := GetBType ( building ) ;
33415: LD_ADDR_VAR 0 5
33419: PUSH
33420: LD_VAR 0 1
33424: PPUSH
33425: CALL_OW 266
33429: ST_TO_ADDR
// if btype = b_armoury then
33430: LD_VAR 0 5
33434: PUSH
33435: LD_INT 4
33437: EQUAL
33438: IFFALSE 33448
// btype := b_barracks ;
33440: LD_ADDR_VAR 0 5
33444: PUSH
33445: LD_INT 5
33447: ST_TO_ADDR
// if btype = b_depot then
33448: LD_VAR 0 5
33452: PUSH
33453: LD_INT 0
33455: EQUAL
33456: IFFALSE 33466
// btype := b_warehouse ;
33458: LD_ADDR_VAR 0 5
33462: PUSH
33463: LD_INT 1
33465: ST_TO_ADDR
// if btype = b_workshop then
33466: LD_VAR 0 5
33470: PUSH
33471: LD_INT 2
33473: EQUAL
33474: IFFALSE 33484
// btype := b_factory ;
33476: LD_ADDR_VAR 0 5
33480: PUSH
33481: LD_INT 3
33483: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
33484: LD_ADDR_VAR 0 4
33488: PUSH
33489: LD_VAR 0 5
33493: PPUSH
33494: LD_VAR 0 1
33498: PPUSH
33499: CALL_OW 248
33503: PPUSH
33504: CALL_OW 450
33508: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
33509: LD_ADDR_VAR 0 2
33513: PUSH
33514: LD_VAR 0 3
33518: PPUSH
33519: LD_INT 1
33521: PPUSH
33522: CALL_OW 275
33526: PUSH
33527: LD_VAR 0 4
33531: PUSH
33532: LD_INT 1
33534: ARRAY
33535: GREATEREQUAL
33536: PUSH
33537: LD_VAR 0 3
33541: PPUSH
33542: LD_INT 2
33544: PPUSH
33545: CALL_OW 275
33549: PUSH
33550: LD_VAR 0 4
33554: PUSH
33555: LD_INT 2
33557: ARRAY
33558: GREATEREQUAL
33559: AND
33560: PUSH
33561: LD_VAR 0 3
33565: PPUSH
33566: LD_INT 3
33568: PPUSH
33569: CALL_OW 275
33573: PUSH
33574: LD_VAR 0 4
33578: PUSH
33579: LD_INT 3
33581: ARRAY
33582: GREATEREQUAL
33583: AND
33584: ST_TO_ADDR
// end ;
33585: LD_VAR 0 2
33589: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
33590: LD_INT 0
33592: PPUSH
33593: PPUSH
33594: PPUSH
// pom := GetBase ( building ) ;
33595: LD_ADDR_VAR 0 4
33599: PUSH
33600: LD_VAR 0 1
33604: PPUSH
33605: CALL_OW 274
33609: ST_TO_ADDR
// if not pom then
33610: LD_VAR 0 4
33614: NOT
33615: IFFALSE 33619
// exit ;
33617: GO 33720
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
33619: LD_ADDR_VAR 0 5
33623: PUSH
33624: LD_VAR 0 2
33628: PPUSH
33629: LD_VAR 0 1
33633: PPUSH
33634: CALL_OW 248
33638: PPUSH
33639: CALL_OW 450
33643: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
33644: LD_ADDR_VAR 0 3
33648: PUSH
33649: LD_VAR 0 4
33653: PPUSH
33654: LD_INT 1
33656: PPUSH
33657: CALL_OW 275
33661: PUSH
33662: LD_VAR 0 5
33666: PUSH
33667: LD_INT 1
33669: ARRAY
33670: GREATEREQUAL
33671: PUSH
33672: LD_VAR 0 4
33676: PPUSH
33677: LD_INT 2
33679: PPUSH
33680: CALL_OW 275
33684: PUSH
33685: LD_VAR 0 5
33689: PUSH
33690: LD_INT 2
33692: ARRAY
33693: GREATEREQUAL
33694: AND
33695: PUSH
33696: LD_VAR 0 4
33700: PPUSH
33701: LD_INT 3
33703: PPUSH
33704: CALL_OW 275
33708: PUSH
33709: LD_VAR 0 5
33713: PUSH
33714: LD_INT 3
33716: ARRAY
33717: GREATEREQUAL
33718: AND
33719: ST_TO_ADDR
// end ;
33720: LD_VAR 0 3
33724: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
33725: LD_INT 0
33727: PPUSH
33728: PPUSH
33729: PPUSH
33730: PPUSH
33731: PPUSH
33732: PPUSH
33733: PPUSH
33734: PPUSH
33735: PPUSH
33736: PPUSH
33737: PPUSH
// result := false ;
33738: LD_ADDR_VAR 0 8
33742: PUSH
33743: LD_INT 0
33745: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
33746: LD_VAR 0 5
33750: NOT
33751: PUSH
33752: LD_VAR 0 1
33756: NOT
33757: OR
33758: PUSH
33759: LD_VAR 0 2
33763: NOT
33764: OR
33765: PUSH
33766: LD_VAR 0 3
33770: NOT
33771: OR
33772: IFFALSE 33776
// exit ;
33774: GO 34590
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
33776: LD_ADDR_VAR 0 14
33780: PUSH
33781: LD_VAR 0 1
33785: PPUSH
33786: LD_VAR 0 2
33790: PPUSH
33791: LD_VAR 0 3
33795: PPUSH
33796: LD_VAR 0 4
33800: PPUSH
33801: LD_VAR 0 5
33805: PUSH
33806: LD_INT 1
33808: ARRAY
33809: PPUSH
33810: CALL_OW 248
33814: PPUSH
33815: LD_INT 0
33817: PPUSH
33818: CALL 35843 0 6
33822: ST_TO_ADDR
// if not hexes then
33823: LD_VAR 0 14
33827: NOT
33828: IFFALSE 33832
// exit ;
33830: GO 34590
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
33832: LD_ADDR_VAR 0 17
33836: PUSH
33837: LD_VAR 0 5
33841: PPUSH
33842: LD_INT 22
33844: PUSH
33845: LD_VAR 0 13
33849: PPUSH
33850: CALL_OW 255
33854: PUSH
33855: EMPTY
33856: LIST
33857: LIST
33858: PUSH
33859: LD_INT 2
33861: PUSH
33862: LD_INT 30
33864: PUSH
33865: LD_INT 0
33867: PUSH
33868: EMPTY
33869: LIST
33870: LIST
33871: PUSH
33872: LD_INT 30
33874: PUSH
33875: LD_INT 1
33877: PUSH
33878: EMPTY
33879: LIST
33880: LIST
33881: PUSH
33882: EMPTY
33883: LIST
33884: LIST
33885: LIST
33886: PUSH
33887: EMPTY
33888: LIST
33889: LIST
33890: PPUSH
33891: CALL_OW 72
33895: ST_TO_ADDR
// for i = 1 to hexes do
33896: LD_ADDR_VAR 0 9
33900: PUSH
33901: DOUBLE
33902: LD_INT 1
33904: DEC
33905: ST_TO_ADDR
33906: LD_VAR 0 14
33910: PUSH
33911: FOR_TO
33912: IFFALSE 34588
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
33914: LD_ADDR_VAR 0 13
33918: PUSH
33919: LD_VAR 0 14
33923: PUSH
33924: LD_VAR 0 9
33928: ARRAY
33929: PUSH
33930: LD_INT 1
33932: ARRAY
33933: PPUSH
33934: LD_VAR 0 14
33938: PUSH
33939: LD_VAR 0 9
33943: ARRAY
33944: PUSH
33945: LD_INT 2
33947: ARRAY
33948: PPUSH
33949: CALL_OW 428
33953: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
33954: LD_VAR 0 14
33958: PUSH
33959: LD_VAR 0 9
33963: ARRAY
33964: PUSH
33965: LD_INT 1
33967: ARRAY
33968: PPUSH
33969: LD_VAR 0 14
33973: PUSH
33974: LD_VAR 0 9
33978: ARRAY
33979: PUSH
33980: LD_INT 2
33982: ARRAY
33983: PPUSH
33984: CALL_OW 351
33988: PUSH
33989: LD_VAR 0 14
33993: PUSH
33994: LD_VAR 0 9
33998: ARRAY
33999: PUSH
34000: LD_INT 1
34002: ARRAY
34003: PPUSH
34004: LD_VAR 0 14
34008: PUSH
34009: LD_VAR 0 9
34013: ARRAY
34014: PUSH
34015: LD_INT 2
34017: ARRAY
34018: PPUSH
34019: CALL_OW 488
34023: NOT
34024: OR
34025: PUSH
34026: LD_VAR 0 13
34030: PPUSH
34031: CALL_OW 247
34035: PUSH
34036: LD_INT 3
34038: EQUAL
34039: OR
34040: IFFALSE 34046
// exit ;
34042: POP
34043: POP
34044: GO 34590
// if not tmp then
34046: LD_VAR 0 13
34050: NOT
34051: IFFALSE 34055
// continue ;
34053: GO 33911
// result := true ;
34055: LD_ADDR_VAR 0 8
34059: PUSH
34060: LD_INT 1
34062: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
34063: LD_VAR 0 6
34067: PUSH
34068: LD_VAR 0 13
34072: PPUSH
34073: CALL_OW 247
34077: PUSH
34078: LD_INT 2
34080: EQUAL
34081: AND
34082: PUSH
34083: LD_VAR 0 13
34087: PPUSH
34088: CALL_OW 263
34092: PUSH
34093: LD_INT 1
34095: EQUAL
34096: AND
34097: IFFALSE 34261
// begin if IsDrivenBy ( tmp ) then
34099: LD_VAR 0 13
34103: PPUSH
34104: CALL_OW 311
34108: IFFALSE 34112
// continue ;
34110: GO 33911
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
34112: LD_VAR 0 6
34116: PPUSH
34117: LD_INT 3
34119: PUSH
34120: LD_INT 60
34122: PUSH
34123: EMPTY
34124: LIST
34125: PUSH
34126: EMPTY
34127: LIST
34128: LIST
34129: PUSH
34130: LD_INT 3
34132: PUSH
34133: LD_INT 55
34135: PUSH
34136: EMPTY
34137: LIST
34138: PUSH
34139: EMPTY
34140: LIST
34141: LIST
34142: PUSH
34143: EMPTY
34144: LIST
34145: LIST
34146: PPUSH
34147: CALL_OW 72
34151: IFFALSE 34259
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
34153: LD_ADDR_VAR 0 18
34157: PUSH
34158: LD_VAR 0 6
34162: PPUSH
34163: LD_INT 3
34165: PUSH
34166: LD_INT 60
34168: PUSH
34169: EMPTY
34170: LIST
34171: PUSH
34172: EMPTY
34173: LIST
34174: LIST
34175: PUSH
34176: LD_INT 3
34178: PUSH
34179: LD_INT 55
34181: PUSH
34182: EMPTY
34183: LIST
34184: PUSH
34185: EMPTY
34186: LIST
34187: LIST
34188: PUSH
34189: EMPTY
34190: LIST
34191: LIST
34192: PPUSH
34193: CALL_OW 72
34197: PUSH
34198: LD_INT 1
34200: ARRAY
34201: ST_TO_ADDR
// if IsInUnit ( driver ) then
34202: LD_VAR 0 18
34206: PPUSH
34207: CALL_OW 310
34211: IFFALSE 34222
// ComExit ( driver ) ;
34213: LD_VAR 0 18
34217: PPUSH
34218: CALL 59644 0 1
// AddComEnterUnit ( driver , tmp ) ;
34222: LD_VAR 0 18
34226: PPUSH
34227: LD_VAR 0 13
34231: PPUSH
34232: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
34236: LD_VAR 0 18
34240: PPUSH
34241: LD_VAR 0 7
34245: PPUSH
34246: CALL_OW 173
// AddComExitVehicle ( driver ) ;
34250: LD_VAR 0 18
34254: PPUSH
34255: CALL_OW 181
// end ; continue ;
34259: GO 33911
// end ; if not cleaners or not tmp in cleaners then
34261: LD_VAR 0 6
34265: NOT
34266: PUSH
34267: LD_VAR 0 13
34271: PUSH
34272: LD_VAR 0 6
34276: IN
34277: NOT
34278: OR
34279: IFFALSE 34586
// begin if dep then
34281: LD_VAR 0 17
34285: IFFALSE 34421
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
34287: LD_ADDR_VAR 0 16
34291: PUSH
34292: LD_VAR 0 17
34296: PUSH
34297: LD_INT 1
34299: ARRAY
34300: PPUSH
34301: CALL_OW 250
34305: PPUSH
34306: LD_VAR 0 17
34310: PUSH
34311: LD_INT 1
34313: ARRAY
34314: PPUSH
34315: CALL_OW 254
34319: PPUSH
34320: LD_INT 5
34322: PPUSH
34323: CALL_OW 272
34327: PUSH
34328: LD_VAR 0 17
34332: PUSH
34333: LD_INT 1
34335: ARRAY
34336: PPUSH
34337: CALL_OW 251
34341: PPUSH
34342: LD_VAR 0 17
34346: PUSH
34347: LD_INT 1
34349: ARRAY
34350: PPUSH
34351: CALL_OW 254
34355: PPUSH
34356: LD_INT 5
34358: PPUSH
34359: CALL_OW 273
34363: PUSH
34364: EMPTY
34365: LIST
34366: LIST
34367: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
34368: LD_VAR 0 16
34372: PUSH
34373: LD_INT 1
34375: ARRAY
34376: PPUSH
34377: LD_VAR 0 16
34381: PUSH
34382: LD_INT 2
34384: ARRAY
34385: PPUSH
34386: CALL_OW 488
34390: IFFALSE 34421
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
34392: LD_VAR 0 13
34396: PPUSH
34397: LD_VAR 0 16
34401: PUSH
34402: LD_INT 1
34404: ARRAY
34405: PPUSH
34406: LD_VAR 0 16
34410: PUSH
34411: LD_INT 2
34413: ARRAY
34414: PPUSH
34415: CALL_OW 111
// continue ;
34419: GO 33911
// end ; end ; r := GetDir ( tmp ) ;
34421: LD_ADDR_VAR 0 15
34425: PUSH
34426: LD_VAR 0 13
34430: PPUSH
34431: CALL_OW 254
34435: ST_TO_ADDR
// if r = 5 then
34436: LD_VAR 0 15
34440: PUSH
34441: LD_INT 5
34443: EQUAL
34444: IFFALSE 34454
// r := 0 ;
34446: LD_ADDR_VAR 0 15
34450: PUSH
34451: LD_INT 0
34453: ST_TO_ADDR
// for j = r to 5 do
34454: LD_ADDR_VAR 0 10
34458: PUSH
34459: DOUBLE
34460: LD_VAR 0 15
34464: DEC
34465: ST_TO_ADDR
34466: LD_INT 5
34468: PUSH
34469: FOR_TO
34470: IFFALSE 34584
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
34472: LD_ADDR_VAR 0 11
34476: PUSH
34477: LD_VAR 0 13
34481: PPUSH
34482: CALL_OW 250
34486: PPUSH
34487: LD_VAR 0 10
34491: PPUSH
34492: LD_INT 2
34494: PPUSH
34495: CALL_OW 272
34499: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
34500: LD_ADDR_VAR 0 12
34504: PUSH
34505: LD_VAR 0 13
34509: PPUSH
34510: CALL_OW 251
34514: PPUSH
34515: LD_VAR 0 10
34519: PPUSH
34520: LD_INT 2
34522: PPUSH
34523: CALL_OW 273
34527: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
34528: LD_VAR 0 11
34532: PPUSH
34533: LD_VAR 0 12
34537: PPUSH
34538: CALL_OW 488
34542: PUSH
34543: LD_VAR 0 11
34547: PPUSH
34548: LD_VAR 0 12
34552: PPUSH
34553: CALL_OW 428
34557: NOT
34558: AND
34559: IFFALSE 34582
// begin ComMoveXY ( tmp , _x , _y ) ;
34561: LD_VAR 0 13
34565: PPUSH
34566: LD_VAR 0 11
34570: PPUSH
34571: LD_VAR 0 12
34575: PPUSH
34576: CALL_OW 111
// break ;
34580: GO 34584
// end ; end ;
34582: GO 34469
34584: POP
34585: POP
// end ; end ;
34586: GO 33911
34588: POP
34589: POP
// end ;
34590: LD_VAR 0 8
34594: RET
// export function BuildingTechInvented ( side , btype ) ; begin
34595: LD_INT 0
34597: PPUSH
// result := true ;
34598: LD_ADDR_VAR 0 3
34602: PUSH
34603: LD_INT 1
34605: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
34606: LD_VAR 0 2
34610: PUSH
34611: LD_INT 24
34613: DOUBLE
34614: EQUAL
34615: IFTRUE 34625
34617: LD_INT 33
34619: DOUBLE
34620: EQUAL
34621: IFTRUE 34625
34623: GO 34650
34625: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
34626: LD_ADDR_VAR 0 3
34630: PUSH
34631: LD_INT 32
34633: PPUSH
34634: LD_VAR 0 1
34638: PPUSH
34639: CALL_OW 321
34643: PUSH
34644: LD_INT 2
34646: EQUAL
34647: ST_TO_ADDR
34648: GO 34966
34650: LD_INT 20
34652: DOUBLE
34653: EQUAL
34654: IFTRUE 34658
34656: GO 34683
34658: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
34659: LD_ADDR_VAR 0 3
34663: PUSH
34664: LD_INT 6
34666: PPUSH
34667: LD_VAR 0 1
34671: PPUSH
34672: CALL_OW 321
34676: PUSH
34677: LD_INT 2
34679: EQUAL
34680: ST_TO_ADDR
34681: GO 34966
34683: LD_INT 22
34685: DOUBLE
34686: EQUAL
34687: IFTRUE 34697
34689: LD_INT 36
34691: DOUBLE
34692: EQUAL
34693: IFTRUE 34697
34695: GO 34722
34697: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
34698: LD_ADDR_VAR 0 3
34702: PUSH
34703: LD_INT 15
34705: PPUSH
34706: LD_VAR 0 1
34710: PPUSH
34711: CALL_OW 321
34715: PUSH
34716: LD_INT 2
34718: EQUAL
34719: ST_TO_ADDR
34720: GO 34966
34722: LD_INT 30
34724: DOUBLE
34725: EQUAL
34726: IFTRUE 34730
34728: GO 34755
34730: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
34731: LD_ADDR_VAR 0 3
34735: PUSH
34736: LD_INT 20
34738: PPUSH
34739: LD_VAR 0 1
34743: PPUSH
34744: CALL_OW 321
34748: PUSH
34749: LD_INT 2
34751: EQUAL
34752: ST_TO_ADDR
34753: GO 34966
34755: LD_INT 28
34757: DOUBLE
34758: EQUAL
34759: IFTRUE 34769
34761: LD_INT 21
34763: DOUBLE
34764: EQUAL
34765: IFTRUE 34769
34767: GO 34794
34769: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
34770: LD_ADDR_VAR 0 3
34774: PUSH
34775: LD_INT 21
34777: PPUSH
34778: LD_VAR 0 1
34782: PPUSH
34783: CALL_OW 321
34787: PUSH
34788: LD_INT 2
34790: EQUAL
34791: ST_TO_ADDR
34792: GO 34966
34794: LD_INT 16
34796: DOUBLE
34797: EQUAL
34798: IFTRUE 34802
34800: GO 34827
34802: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
34803: LD_ADDR_VAR 0 3
34807: PUSH
34808: LD_INT 84
34810: PPUSH
34811: LD_VAR 0 1
34815: PPUSH
34816: CALL_OW 321
34820: PUSH
34821: LD_INT 2
34823: EQUAL
34824: ST_TO_ADDR
34825: GO 34966
34827: LD_INT 19
34829: DOUBLE
34830: EQUAL
34831: IFTRUE 34841
34833: LD_INT 23
34835: DOUBLE
34836: EQUAL
34837: IFTRUE 34841
34839: GO 34866
34841: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
34842: LD_ADDR_VAR 0 3
34846: PUSH
34847: LD_INT 83
34849: PPUSH
34850: LD_VAR 0 1
34854: PPUSH
34855: CALL_OW 321
34859: PUSH
34860: LD_INT 2
34862: EQUAL
34863: ST_TO_ADDR
34864: GO 34966
34866: LD_INT 17
34868: DOUBLE
34869: EQUAL
34870: IFTRUE 34874
34872: GO 34899
34874: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
34875: LD_ADDR_VAR 0 3
34879: PUSH
34880: LD_INT 39
34882: PPUSH
34883: LD_VAR 0 1
34887: PPUSH
34888: CALL_OW 321
34892: PUSH
34893: LD_INT 2
34895: EQUAL
34896: ST_TO_ADDR
34897: GO 34966
34899: LD_INT 18
34901: DOUBLE
34902: EQUAL
34903: IFTRUE 34907
34905: GO 34932
34907: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
34908: LD_ADDR_VAR 0 3
34912: PUSH
34913: LD_INT 40
34915: PPUSH
34916: LD_VAR 0 1
34920: PPUSH
34921: CALL_OW 321
34925: PUSH
34926: LD_INT 2
34928: EQUAL
34929: ST_TO_ADDR
34930: GO 34966
34932: LD_INT 27
34934: DOUBLE
34935: EQUAL
34936: IFTRUE 34940
34938: GO 34965
34940: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
34941: LD_ADDR_VAR 0 3
34945: PUSH
34946: LD_INT 35
34948: PPUSH
34949: LD_VAR 0 1
34953: PPUSH
34954: CALL_OW 321
34958: PUSH
34959: LD_INT 2
34961: EQUAL
34962: ST_TO_ADDR
34963: GO 34966
34965: POP
// end ;
34966: LD_VAR 0 3
34970: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
34971: LD_INT 0
34973: PPUSH
34974: PPUSH
34975: PPUSH
34976: PPUSH
34977: PPUSH
34978: PPUSH
34979: PPUSH
34980: PPUSH
34981: PPUSH
34982: PPUSH
34983: PPUSH
// result := false ;
34984: LD_ADDR_VAR 0 6
34988: PUSH
34989: LD_INT 0
34991: ST_TO_ADDR
// if btype = b_depot then
34992: LD_VAR 0 2
34996: PUSH
34997: LD_INT 0
34999: EQUAL
35000: IFFALSE 35012
// begin result := true ;
35002: LD_ADDR_VAR 0 6
35006: PUSH
35007: LD_INT 1
35009: ST_TO_ADDR
// exit ;
35010: GO 35838
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
35012: LD_VAR 0 1
35016: NOT
35017: PUSH
35018: LD_VAR 0 1
35022: PPUSH
35023: CALL_OW 266
35027: PUSH
35028: LD_INT 0
35030: PUSH
35031: LD_INT 1
35033: PUSH
35034: EMPTY
35035: LIST
35036: LIST
35037: IN
35038: NOT
35039: OR
35040: PUSH
35041: LD_VAR 0 2
35045: NOT
35046: OR
35047: PUSH
35048: LD_VAR 0 5
35052: PUSH
35053: LD_INT 0
35055: PUSH
35056: LD_INT 1
35058: PUSH
35059: LD_INT 2
35061: PUSH
35062: LD_INT 3
35064: PUSH
35065: LD_INT 4
35067: PUSH
35068: LD_INT 5
35070: PUSH
35071: EMPTY
35072: LIST
35073: LIST
35074: LIST
35075: LIST
35076: LIST
35077: LIST
35078: IN
35079: NOT
35080: OR
35081: PUSH
35082: LD_VAR 0 3
35086: PPUSH
35087: LD_VAR 0 4
35091: PPUSH
35092: CALL_OW 488
35096: NOT
35097: OR
35098: IFFALSE 35102
// exit ;
35100: GO 35838
// side := GetSide ( depot ) ;
35102: LD_ADDR_VAR 0 9
35106: PUSH
35107: LD_VAR 0 1
35111: PPUSH
35112: CALL_OW 255
35116: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
35117: LD_VAR 0 9
35121: PPUSH
35122: LD_VAR 0 2
35126: PPUSH
35127: CALL 34595 0 2
35131: NOT
35132: IFFALSE 35136
// exit ;
35134: GO 35838
// pom := GetBase ( depot ) ;
35136: LD_ADDR_VAR 0 10
35140: PUSH
35141: LD_VAR 0 1
35145: PPUSH
35146: CALL_OW 274
35150: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
35151: LD_ADDR_VAR 0 11
35155: PUSH
35156: LD_VAR 0 2
35160: PPUSH
35161: LD_VAR 0 1
35165: PPUSH
35166: CALL_OW 248
35170: PPUSH
35171: CALL_OW 450
35175: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
35176: LD_VAR 0 10
35180: PPUSH
35181: LD_INT 1
35183: PPUSH
35184: CALL_OW 275
35188: PUSH
35189: LD_VAR 0 11
35193: PUSH
35194: LD_INT 1
35196: ARRAY
35197: GREATEREQUAL
35198: PUSH
35199: LD_VAR 0 10
35203: PPUSH
35204: LD_INT 2
35206: PPUSH
35207: CALL_OW 275
35211: PUSH
35212: LD_VAR 0 11
35216: PUSH
35217: LD_INT 2
35219: ARRAY
35220: GREATEREQUAL
35221: AND
35222: PUSH
35223: LD_VAR 0 10
35227: PPUSH
35228: LD_INT 3
35230: PPUSH
35231: CALL_OW 275
35235: PUSH
35236: LD_VAR 0 11
35240: PUSH
35241: LD_INT 3
35243: ARRAY
35244: GREATEREQUAL
35245: AND
35246: NOT
35247: IFFALSE 35251
// exit ;
35249: GO 35838
// if GetBType ( depot ) = b_depot then
35251: LD_VAR 0 1
35255: PPUSH
35256: CALL_OW 266
35260: PUSH
35261: LD_INT 0
35263: EQUAL
35264: IFFALSE 35276
// dist := 28 else
35266: LD_ADDR_VAR 0 14
35270: PUSH
35271: LD_INT 28
35273: ST_TO_ADDR
35274: GO 35284
// dist := 36 ;
35276: LD_ADDR_VAR 0 14
35280: PUSH
35281: LD_INT 36
35283: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
35284: LD_VAR 0 1
35288: PPUSH
35289: LD_VAR 0 3
35293: PPUSH
35294: LD_VAR 0 4
35298: PPUSH
35299: CALL_OW 297
35303: PUSH
35304: LD_VAR 0 14
35308: GREATER
35309: IFFALSE 35313
// exit ;
35311: GO 35838
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
35313: LD_ADDR_VAR 0 12
35317: PUSH
35318: LD_VAR 0 2
35322: PPUSH
35323: LD_VAR 0 3
35327: PPUSH
35328: LD_VAR 0 4
35332: PPUSH
35333: LD_VAR 0 5
35337: PPUSH
35338: LD_VAR 0 1
35342: PPUSH
35343: CALL_OW 248
35347: PPUSH
35348: LD_INT 0
35350: PPUSH
35351: CALL 35843 0 6
35355: ST_TO_ADDR
// if not hexes then
35356: LD_VAR 0 12
35360: NOT
35361: IFFALSE 35365
// exit ;
35363: GO 35838
// hex := GetHexInfo ( x , y ) ;
35365: LD_ADDR_VAR 0 15
35369: PUSH
35370: LD_VAR 0 3
35374: PPUSH
35375: LD_VAR 0 4
35379: PPUSH
35380: CALL_OW 546
35384: ST_TO_ADDR
// if hex [ 1 ] then
35385: LD_VAR 0 15
35389: PUSH
35390: LD_INT 1
35392: ARRAY
35393: IFFALSE 35397
// exit ;
35395: GO 35838
// height := hex [ 2 ] ;
35397: LD_ADDR_VAR 0 13
35401: PUSH
35402: LD_VAR 0 15
35406: PUSH
35407: LD_INT 2
35409: ARRAY
35410: ST_TO_ADDR
// for i = 1 to hexes do
35411: LD_ADDR_VAR 0 7
35415: PUSH
35416: DOUBLE
35417: LD_INT 1
35419: DEC
35420: ST_TO_ADDR
35421: LD_VAR 0 12
35425: PUSH
35426: FOR_TO
35427: IFFALSE 35757
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
35429: LD_VAR 0 12
35433: PUSH
35434: LD_VAR 0 7
35438: ARRAY
35439: PUSH
35440: LD_INT 1
35442: ARRAY
35443: PPUSH
35444: LD_VAR 0 12
35448: PUSH
35449: LD_VAR 0 7
35453: ARRAY
35454: PUSH
35455: LD_INT 2
35457: ARRAY
35458: PPUSH
35459: CALL_OW 488
35463: NOT
35464: PUSH
35465: LD_VAR 0 12
35469: PUSH
35470: LD_VAR 0 7
35474: ARRAY
35475: PUSH
35476: LD_INT 1
35478: ARRAY
35479: PPUSH
35480: LD_VAR 0 12
35484: PUSH
35485: LD_VAR 0 7
35489: ARRAY
35490: PUSH
35491: LD_INT 2
35493: ARRAY
35494: PPUSH
35495: CALL_OW 428
35499: PUSH
35500: LD_INT 0
35502: GREATER
35503: OR
35504: PUSH
35505: LD_VAR 0 12
35509: PUSH
35510: LD_VAR 0 7
35514: ARRAY
35515: PUSH
35516: LD_INT 1
35518: ARRAY
35519: PPUSH
35520: LD_VAR 0 12
35524: PUSH
35525: LD_VAR 0 7
35529: ARRAY
35530: PUSH
35531: LD_INT 2
35533: ARRAY
35534: PPUSH
35535: CALL_OW 351
35539: OR
35540: IFFALSE 35546
// exit ;
35542: POP
35543: POP
35544: GO 35838
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
35546: LD_ADDR_VAR 0 8
35550: PUSH
35551: LD_VAR 0 12
35555: PUSH
35556: LD_VAR 0 7
35560: ARRAY
35561: PUSH
35562: LD_INT 1
35564: ARRAY
35565: PPUSH
35566: LD_VAR 0 12
35570: PUSH
35571: LD_VAR 0 7
35575: ARRAY
35576: PUSH
35577: LD_INT 2
35579: ARRAY
35580: PPUSH
35581: CALL_OW 546
35585: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
35586: LD_VAR 0 8
35590: PUSH
35591: LD_INT 1
35593: ARRAY
35594: PUSH
35595: LD_VAR 0 8
35599: PUSH
35600: LD_INT 2
35602: ARRAY
35603: PUSH
35604: LD_VAR 0 13
35608: PUSH
35609: LD_INT 2
35611: PLUS
35612: GREATER
35613: OR
35614: PUSH
35615: LD_VAR 0 8
35619: PUSH
35620: LD_INT 2
35622: ARRAY
35623: PUSH
35624: LD_VAR 0 13
35628: PUSH
35629: LD_INT 2
35631: MINUS
35632: LESS
35633: OR
35634: PUSH
35635: LD_VAR 0 8
35639: PUSH
35640: LD_INT 3
35642: ARRAY
35643: PUSH
35644: LD_INT 0
35646: PUSH
35647: LD_INT 8
35649: PUSH
35650: LD_INT 9
35652: PUSH
35653: LD_INT 10
35655: PUSH
35656: LD_INT 11
35658: PUSH
35659: LD_INT 12
35661: PUSH
35662: LD_INT 13
35664: PUSH
35665: LD_INT 16
35667: PUSH
35668: LD_INT 17
35670: PUSH
35671: LD_INT 18
35673: PUSH
35674: LD_INT 19
35676: PUSH
35677: LD_INT 20
35679: PUSH
35680: LD_INT 21
35682: PUSH
35683: EMPTY
35684: LIST
35685: LIST
35686: LIST
35687: LIST
35688: LIST
35689: LIST
35690: LIST
35691: LIST
35692: LIST
35693: LIST
35694: LIST
35695: LIST
35696: LIST
35697: IN
35698: NOT
35699: OR
35700: PUSH
35701: LD_VAR 0 8
35705: PUSH
35706: LD_INT 5
35708: ARRAY
35709: NOT
35710: OR
35711: PUSH
35712: LD_VAR 0 8
35716: PUSH
35717: LD_INT 6
35719: ARRAY
35720: PUSH
35721: LD_INT 1
35723: PUSH
35724: LD_INT 2
35726: PUSH
35727: LD_INT 7
35729: PUSH
35730: LD_INT 9
35732: PUSH
35733: LD_INT 10
35735: PUSH
35736: LD_INT 11
35738: PUSH
35739: EMPTY
35740: LIST
35741: LIST
35742: LIST
35743: LIST
35744: LIST
35745: LIST
35746: IN
35747: NOT
35748: OR
35749: IFFALSE 35755
// exit ;
35751: POP
35752: POP
35753: GO 35838
// end ;
35755: GO 35426
35757: POP
35758: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
35759: LD_VAR 0 9
35763: PPUSH
35764: LD_VAR 0 3
35768: PPUSH
35769: LD_VAR 0 4
35773: PPUSH
35774: LD_INT 20
35776: PPUSH
35777: CALL 27761 0 4
35781: PUSH
35782: LD_INT 4
35784: ARRAY
35785: IFFALSE 35789
// exit ;
35787: GO 35838
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
35789: LD_VAR 0 2
35793: PUSH
35794: LD_INT 29
35796: PUSH
35797: LD_INT 30
35799: PUSH
35800: EMPTY
35801: LIST
35802: LIST
35803: IN
35804: PUSH
35805: LD_VAR 0 3
35809: PPUSH
35810: LD_VAR 0 4
35814: PPUSH
35815: LD_VAR 0 9
35819: PPUSH
35820: CALL_OW 440
35824: NOT
35825: AND
35826: IFFALSE 35830
// exit ;
35828: GO 35838
// result := true ;
35830: LD_ADDR_VAR 0 6
35834: PUSH
35835: LD_INT 1
35837: ST_TO_ADDR
// end ;
35838: LD_VAR 0 6
35842: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
35843: LD_INT 0
35845: PPUSH
35846: PPUSH
35847: PPUSH
35848: PPUSH
35849: PPUSH
35850: PPUSH
35851: PPUSH
35852: PPUSH
35853: PPUSH
35854: PPUSH
35855: PPUSH
35856: PPUSH
35857: PPUSH
35858: PPUSH
35859: PPUSH
35860: PPUSH
35861: PPUSH
35862: PPUSH
35863: PPUSH
35864: PPUSH
35865: PPUSH
35866: PPUSH
35867: PPUSH
35868: PPUSH
35869: PPUSH
35870: PPUSH
35871: PPUSH
35872: PPUSH
35873: PPUSH
35874: PPUSH
35875: PPUSH
35876: PPUSH
35877: PPUSH
35878: PPUSH
35879: PPUSH
35880: PPUSH
35881: PPUSH
35882: PPUSH
35883: PPUSH
35884: PPUSH
35885: PPUSH
35886: PPUSH
35887: PPUSH
35888: PPUSH
35889: PPUSH
35890: PPUSH
35891: PPUSH
35892: PPUSH
35893: PPUSH
35894: PPUSH
35895: PPUSH
35896: PPUSH
35897: PPUSH
35898: PPUSH
35899: PPUSH
35900: PPUSH
35901: PPUSH
35902: PPUSH
// result = [ ] ;
35903: LD_ADDR_VAR 0 7
35907: PUSH
35908: EMPTY
35909: ST_TO_ADDR
// temp_list = [ ] ;
35910: LD_ADDR_VAR 0 9
35914: PUSH
35915: EMPTY
35916: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
35917: LD_VAR 0 4
35921: PUSH
35922: LD_INT 0
35924: PUSH
35925: LD_INT 1
35927: PUSH
35928: LD_INT 2
35930: PUSH
35931: LD_INT 3
35933: PUSH
35934: LD_INT 4
35936: PUSH
35937: LD_INT 5
35939: PUSH
35940: EMPTY
35941: LIST
35942: LIST
35943: LIST
35944: LIST
35945: LIST
35946: LIST
35947: IN
35948: NOT
35949: PUSH
35950: LD_VAR 0 1
35954: PUSH
35955: LD_INT 0
35957: PUSH
35958: LD_INT 1
35960: PUSH
35961: EMPTY
35962: LIST
35963: LIST
35964: IN
35965: PUSH
35966: LD_VAR 0 5
35970: PUSH
35971: LD_INT 1
35973: PUSH
35974: LD_INT 2
35976: PUSH
35977: LD_INT 3
35979: PUSH
35980: EMPTY
35981: LIST
35982: LIST
35983: LIST
35984: IN
35985: NOT
35986: AND
35987: OR
35988: IFFALSE 35992
// exit ;
35990: GO 54383
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
35992: LD_VAR 0 1
35996: PUSH
35997: LD_INT 6
35999: PUSH
36000: LD_INT 7
36002: PUSH
36003: LD_INT 8
36005: PUSH
36006: LD_INT 13
36008: PUSH
36009: LD_INT 12
36011: PUSH
36012: LD_INT 15
36014: PUSH
36015: LD_INT 11
36017: PUSH
36018: LD_INT 14
36020: PUSH
36021: LD_INT 10
36023: PUSH
36024: EMPTY
36025: LIST
36026: LIST
36027: LIST
36028: LIST
36029: LIST
36030: LIST
36031: LIST
36032: LIST
36033: LIST
36034: IN
36035: IFFALSE 36045
// btype = b_lab ;
36037: LD_ADDR_VAR 0 1
36041: PUSH
36042: LD_INT 6
36044: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
36045: LD_VAR 0 6
36049: PUSH
36050: LD_INT 0
36052: PUSH
36053: LD_INT 1
36055: PUSH
36056: LD_INT 2
36058: PUSH
36059: EMPTY
36060: LIST
36061: LIST
36062: LIST
36063: IN
36064: NOT
36065: PUSH
36066: LD_VAR 0 1
36070: PUSH
36071: LD_INT 0
36073: PUSH
36074: LD_INT 1
36076: PUSH
36077: LD_INT 2
36079: PUSH
36080: LD_INT 3
36082: PUSH
36083: LD_INT 6
36085: PUSH
36086: LD_INT 36
36088: PUSH
36089: LD_INT 4
36091: PUSH
36092: LD_INT 5
36094: PUSH
36095: LD_INT 31
36097: PUSH
36098: LD_INT 32
36100: PUSH
36101: LD_INT 33
36103: PUSH
36104: EMPTY
36105: LIST
36106: LIST
36107: LIST
36108: LIST
36109: LIST
36110: LIST
36111: LIST
36112: LIST
36113: LIST
36114: LIST
36115: LIST
36116: IN
36117: NOT
36118: PUSH
36119: LD_VAR 0 6
36123: PUSH
36124: LD_INT 1
36126: EQUAL
36127: AND
36128: OR
36129: PUSH
36130: LD_VAR 0 1
36134: PUSH
36135: LD_INT 2
36137: PUSH
36138: LD_INT 3
36140: PUSH
36141: EMPTY
36142: LIST
36143: LIST
36144: IN
36145: NOT
36146: PUSH
36147: LD_VAR 0 6
36151: PUSH
36152: LD_INT 2
36154: EQUAL
36155: AND
36156: OR
36157: IFFALSE 36167
// mode = 0 ;
36159: LD_ADDR_VAR 0 6
36163: PUSH
36164: LD_INT 0
36166: ST_TO_ADDR
// case mode of 0 :
36167: LD_VAR 0 6
36171: PUSH
36172: LD_INT 0
36174: DOUBLE
36175: EQUAL
36176: IFTRUE 36180
36178: GO 47633
36180: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
36181: LD_ADDR_VAR 0 11
36185: PUSH
36186: LD_INT 0
36188: PUSH
36189: LD_INT 0
36191: PUSH
36192: EMPTY
36193: LIST
36194: LIST
36195: PUSH
36196: LD_INT 0
36198: PUSH
36199: LD_INT 1
36201: NEG
36202: PUSH
36203: EMPTY
36204: LIST
36205: LIST
36206: PUSH
36207: LD_INT 1
36209: PUSH
36210: LD_INT 0
36212: PUSH
36213: EMPTY
36214: LIST
36215: LIST
36216: PUSH
36217: LD_INT 1
36219: PUSH
36220: LD_INT 1
36222: PUSH
36223: EMPTY
36224: LIST
36225: LIST
36226: PUSH
36227: LD_INT 0
36229: PUSH
36230: LD_INT 1
36232: PUSH
36233: EMPTY
36234: LIST
36235: LIST
36236: PUSH
36237: LD_INT 1
36239: NEG
36240: PUSH
36241: LD_INT 0
36243: PUSH
36244: EMPTY
36245: LIST
36246: LIST
36247: PUSH
36248: LD_INT 1
36250: NEG
36251: PUSH
36252: LD_INT 1
36254: NEG
36255: PUSH
36256: EMPTY
36257: LIST
36258: LIST
36259: PUSH
36260: LD_INT 1
36262: NEG
36263: PUSH
36264: LD_INT 2
36266: NEG
36267: PUSH
36268: EMPTY
36269: LIST
36270: LIST
36271: PUSH
36272: LD_INT 0
36274: PUSH
36275: LD_INT 2
36277: NEG
36278: PUSH
36279: EMPTY
36280: LIST
36281: LIST
36282: PUSH
36283: LD_INT 1
36285: PUSH
36286: LD_INT 1
36288: NEG
36289: PUSH
36290: EMPTY
36291: LIST
36292: LIST
36293: PUSH
36294: LD_INT 1
36296: PUSH
36297: LD_INT 2
36299: PUSH
36300: EMPTY
36301: LIST
36302: LIST
36303: PUSH
36304: LD_INT 0
36306: PUSH
36307: LD_INT 2
36309: PUSH
36310: EMPTY
36311: LIST
36312: LIST
36313: PUSH
36314: LD_INT 1
36316: NEG
36317: PUSH
36318: LD_INT 1
36320: PUSH
36321: EMPTY
36322: LIST
36323: LIST
36324: PUSH
36325: LD_INT 1
36327: PUSH
36328: LD_INT 3
36330: PUSH
36331: EMPTY
36332: LIST
36333: LIST
36334: PUSH
36335: LD_INT 0
36337: PUSH
36338: LD_INT 3
36340: PUSH
36341: EMPTY
36342: LIST
36343: LIST
36344: PUSH
36345: LD_INT 1
36347: NEG
36348: PUSH
36349: LD_INT 2
36351: PUSH
36352: EMPTY
36353: LIST
36354: LIST
36355: PUSH
36356: EMPTY
36357: LIST
36358: LIST
36359: LIST
36360: LIST
36361: LIST
36362: LIST
36363: LIST
36364: LIST
36365: LIST
36366: LIST
36367: LIST
36368: LIST
36369: LIST
36370: LIST
36371: LIST
36372: LIST
36373: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
36374: LD_ADDR_VAR 0 12
36378: PUSH
36379: LD_INT 0
36381: PUSH
36382: LD_INT 0
36384: PUSH
36385: EMPTY
36386: LIST
36387: LIST
36388: PUSH
36389: LD_INT 0
36391: PUSH
36392: LD_INT 1
36394: NEG
36395: PUSH
36396: EMPTY
36397: LIST
36398: LIST
36399: PUSH
36400: LD_INT 1
36402: PUSH
36403: LD_INT 0
36405: PUSH
36406: EMPTY
36407: LIST
36408: LIST
36409: PUSH
36410: LD_INT 1
36412: PUSH
36413: LD_INT 1
36415: PUSH
36416: EMPTY
36417: LIST
36418: LIST
36419: PUSH
36420: LD_INT 0
36422: PUSH
36423: LD_INT 1
36425: PUSH
36426: EMPTY
36427: LIST
36428: LIST
36429: PUSH
36430: LD_INT 1
36432: NEG
36433: PUSH
36434: LD_INT 0
36436: PUSH
36437: EMPTY
36438: LIST
36439: LIST
36440: PUSH
36441: LD_INT 1
36443: NEG
36444: PUSH
36445: LD_INT 1
36447: NEG
36448: PUSH
36449: EMPTY
36450: LIST
36451: LIST
36452: PUSH
36453: LD_INT 1
36455: PUSH
36456: LD_INT 1
36458: NEG
36459: PUSH
36460: EMPTY
36461: LIST
36462: LIST
36463: PUSH
36464: LD_INT 2
36466: PUSH
36467: LD_INT 0
36469: PUSH
36470: EMPTY
36471: LIST
36472: LIST
36473: PUSH
36474: LD_INT 2
36476: PUSH
36477: LD_INT 1
36479: PUSH
36480: EMPTY
36481: LIST
36482: LIST
36483: PUSH
36484: LD_INT 1
36486: NEG
36487: PUSH
36488: LD_INT 1
36490: PUSH
36491: EMPTY
36492: LIST
36493: LIST
36494: PUSH
36495: LD_INT 2
36497: NEG
36498: PUSH
36499: LD_INT 0
36501: PUSH
36502: EMPTY
36503: LIST
36504: LIST
36505: PUSH
36506: LD_INT 2
36508: NEG
36509: PUSH
36510: LD_INT 1
36512: NEG
36513: PUSH
36514: EMPTY
36515: LIST
36516: LIST
36517: PUSH
36518: LD_INT 2
36520: NEG
36521: PUSH
36522: LD_INT 1
36524: PUSH
36525: EMPTY
36526: LIST
36527: LIST
36528: PUSH
36529: LD_INT 3
36531: NEG
36532: PUSH
36533: LD_INT 0
36535: PUSH
36536: EMPTY
36537: LIST
36538: LIST
36539: PUSH
36540: LD_INT 3
36542: NEG
36543: PUSH
36544: LD_INT 1
36546: NEG
36547: PUSH
36548: EMPTY
36549: LIST
36550: LIST
36551: PUSH
36552: EMPTY
36553: LIST
36554: LIST
36555: LIST
36556: LIST
36557: LIST
36558: LIST
36559: LIST
36560: LIST
36561: LIST
36562: LIST
36563: LIST
36564: LIST
36565: LIST
36566: LIST
36567: LIST
36568: LIST
36569: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
36570: LD_ADDR_VAR 0 13
36574: PUSH
36575: LD_INT 0
36577: PUSH
36578: LD_INT 0
36580: PUSH
36581: EMPTY
36582: LIST
36583: LIST
36584: PUSH
36585: LD_INT 0
36587: PUSH
36588: LD_INT 1
36590: NEG
36591: PUSH
36592: EMPTY
36593: LIST
36594: LIST
36595: PUSH
36596: LD_INT 1
36598: PUSH
36599: LD_INT 0
36601: PUSH
36602: EMPTY
36603: LIST
36604: LIST
36605: PUSH
36606: LD_INT 1
36608: PUSH
36609: LD_INT 1
36611: PUSH
36612: EMPTY
36613: LIST
36614: LIST
36615: PUSH
36616: LD_INT 0
36618: PUSH
36619: LD_INT 1
36621: PUSH
36622: EMPTY
36623: LIST
36624: LIST
36625: PUSH
36626: LD_INT 1
36628: NEG
36629: PUSH
36630: LD_INT 0
36632: PUSH
36633: EMPTY
36634: LIST
36635: LIST
36636: PUSH
36637: LD_INT 1
36639: NEG
36640: PUSH
36641: LD_INT 1
36643: NEG
36644: PUSH
36645: EMPTY
36646: LIST
36647: LIST
36648: PUSH
36649: LD_INT 1
36651: NEG
36652: PUSH
36653: LD_INT 2
36655: NEG
36656: PUSH
36657: EMPTY
36658: LIST
36659: LIST
36660: PUSH
36661: LD_INT 2
36663: PUSH
36664: LD_INT 1
36666: PUSH
36667: EMPTY
36668: LIST
36669: LIST
36670: PUSH
36671: LD_INT 2
36673: PUSH
36674: LD_INT 2
36676: PUSH
36677: EMPTY
36678: LIST
36679: LIST
36680: PUSH
36681: LD_INT 1
36683: PUSH
36684: LD_INT 2
36686: PUSH
36687: EMPTY
36688: LIST
36689: LIST
36690: PUSH
36691: LD_INT 2
36693: NEG
36694: PUSH
36695: LD_INT 1
36697: NEG
36698: PUSH
36699: EMPTY
36700: LIST
36701: LIST
36702: PUSH
36703: LD_INT 2
36705: NEG
36706: PUSH
36707: LD_INT 2
36709: NEG
36710: PUSH
36711: EMPTY
36712: LIST
36713: LIST
36714: PUSH
36715: LD_INT 2
36717: NEG
36718: PUSH
36719: LD_INT 3
36721: NEG
36722: PUSH
36723: EMPTY
36724: LIST
36725: LIST
36726: PUSH
36727: LD_INT 3
36729: NEG
36730: PUSH
36731: LD_INT 2
36733: NEG
36734: PUSH
36735: EMPTY
36736: LIST
36737: LIST
36738: PUSH
36739: LD_INT 3
36741: NEG
36742: PUSH
36743: LD_INT 3
36745: NEG
36746: PUSH
36747: EMPTY
36748: LIST
36749: LIST
36750: PUSH
36751: EMPTY
36752: LIST
36753: LIST
36754: LIST
36755: LIST
36756: LIST
36757: LIST
36758: LIST
36759: LIST
36760: LIST
36761: LIST
36762: LIST
36763: LIST
36764: LIST
36765: LIST
36766: LIST
36767: LIST
36768: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
36769: LD_ADDR_VAR 0 14
36773: PUSH
36774: LD_INT 0
36776: PUSH
36777: LD_INT 0
36779: PUSH
36780: EMPTY
36781: LIST
36782: LIST
36783: PUSH
36784: LD_INT 0
36786: PUSH
36787: LD_INT 1
36789: NEG
36790: PUSH
36791: EMPTY
36792: LIST
36793: LIST
36794: PUSH
36795: LD_INT 1
36797: PUSH
36798: LD_INT 0
36800: PUSH
36801: EMPTY
36802: LIST
36803: LIST
36804: PUSH
36805: LD_INT 1
36807: PUSH
36808: LD_INT 1
36810: PUSH
36811: EMPTY
36812: LIST
36813: LIST
36814: PUSH
36815: LD_INT 0
36817: PUSH
36818: LD_INT 1
36820: PUSH
36821: EMPTY
36822: LIST
36823: LIST
36824: PUSH
36825: LD_INT 1
36827: NEG
36828: PUSH
36829: LD_INT 0
36831: PUSH
36832: EMPTY
36833: LIST
36834: LIST
36835: PUSH
36836: LD_INT 1
36838: NEG
36839: PUSH
36840: LD_INT 1
36842: NEG
36843: PUSH
36844: EMPTY
36845: LIST
36846: LIST
36847: PUSH
36848: LD_INT 1
36850: NEG
36851: PUSH
36852: LD_INT 2
36854: NEG
36855: PUSH
36856: EMPTY
36857: LIST
36858: LIST
36859: PUSH
36860: LD_INT 0
36862: PUSH
36863: LD_INT 2
36865: NEG
36866: PUSH
36867: EMPTY
36868: LIST
36869: LIST
36870: PUSH
36871: LD_INT 1
36873: PUSH
36874: LD_INT 1
36876: NEG
36877: PUSH
36878: EMPTY
36879: LIST
36880: LIST
36881: PUSH
36882: LD_INT 1
36884: PUSH
36885: LD_INT 2
36887: PUSH
36888: EMPTY
36889: LIST
36890: LIST
36891: PUSH
36892: LD_INT 0
36894: PUSH
36895: LD_INT 2
36897: PUSH
36898: EMPTY
36899: LIST
36900: LIST
36901: PUSH
36902: LD_INT 1
36904: NEG
36905: PUSH
36906: LD_INT 1
36908: PUSH
36909: EMPTY
36910: LIST
36911: LIST
36912: PUSH
36913: LD_INT 1
36915: NEG
36916: PUSH
36917: LD_INT 3
36919: NEG
36920: PUSH
36921: EMPTY
36922: LIST
36923: LIST
36924: PUSH
36925: LD_INT 0
36927: PUSH
36928: LD_INT 3
36930: NEG
36931: PUSH
36932: EMPTY
36933: LIST
36934: LIST
36935: PUSH
36936: LD_INT 1
36938: PUSH
36939: LD_INT 2
36941: NEG
36942: PUSH
36943: EMPTY
36944: LIST
36945: LIST
36946: PUSH
36947: EMPTY
36948: LIST
36949: LIST
36950: LIST
36951: LIST
36952: LIST
36953: LIST
36954: LIST
36955: LIST
36956: LIST
36957: LIST
36958: LIST
36959: LIST
36960: LIST
36961: LIST
36962: LIST
36963: LIST
36964: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
36965: LD_ADDR_VAR 0 15
36969: PUSH
36970: LD_INT 0
36972: PUSH
36973: LD_INT 0
36975: PUSH
36976: EMPTY
36977: LIST
36978: LIST
36979: PUSH
36980: LD_INT 0
36982: PUSH
36983: LD_INT 1
36985: NEG
36986: PUSH
36987: EMPTY
36988: LIST
36989: LIST
36990: PUSH
36991: LD_INT 1
36993: PUSH
36994: LD_INT 0
36996: PUSH
36997: EMPTY
36998: LIST
36999: LIST
37000: PUSH
37001: LD_INT 1
37003: PUSH
37004: LD_INT 1
37006: PUSH
37007: EMPTY
37008: LIST
37009: LIST
37010: PUSH
37011: LD_INT 0
37013: PUSH
37014: LD_INT 1
37016: PUSH
37017: EMPTY
37018: LIST
37019: LIST
37020: PUSH
37021: LD_INT 1
37023: NEG
37024: PUSH
37025: LD_INT 0
37027: PUSH
37028: EMPTY
37029: LIST
37030: LIST
37031: PUSH
37032: LD_INT 1
37034: NEG
37035: PUSH
37036: LD_INT 1
37038: NEG
37039: PUSH
37040: EMPTY
37041: LIST
37042: LIST
37043: PUSH
37044: LD_INT 1
37046: PUSH
37047: LD_INT 1
37049: NEG
37050: PUSH
37051: EMPTY
37052: LIST
37053: LIST
37054: PUSH
37055: LD_INT 2
37057: PUSH
37058: LD_INT 0
37060: PUSH
37061: EMPTY
37062: LIST
37063: LIST
37064: PUSH
37065: LD_INT 2
37067: PUSH
37068: LD_INT 1
37070: PUSH
37071: EMPTY
37072: LIST
37073: LIST
37074: PUSH
37075: LD_INT 1
37077: NEG
37078: PUSH
37079: LD_INT 1
37081: PUSH
37082: EMPTY
37083: LIST
37084: LIST
37085: PUSH
37086: LD_INT 2
37088: NEG
37089: PUSH
37090: LD_INT 0
37092: PUSH
37093: EMPTY
37094: LIST
37095: LIST
37096: PUSH
37097: LD_INT 2
37099: NEG
37100: PUSH
37101: LD_INT 1
37103: NEG
37104: PUSH
37105: EMPTY
37106: LIST
37107: LIST
37108: PUSH
37109: LD_INT 2
37111: PUSH
37112: LD_INT 1
37114: NEG
37115: PUSH
37116: EMPTY
37117: LIST
37118: LIST
37119: PUSH
37120: LD_INT 3
37122: PUSH
37123: LD_INT 0
37125: PUSH
37126: EMPTY
37127: LIST
37128: LIST
37129: PUSH
37130: LD_INT 3
37132: PUSH
37133: LD_INT 1
37135: PUSH
37136: EMPTY
37137: LIST
37138: LIST
37139: PUSH
37140: EMPTY
37141: LIST
37142: LIST
37143: LIST
37144: LIST
37145: LIST
37146: LIST
37147: LIST
37148: LIST
37149: LIST
37150: LIST
37151: LIST
37152: LIST
37153: LIST
37154: LIST
37155: LIST
37156: LIST
37157: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
37158: LD_ADDR_VAR 0 16
37162: PUSH
37163: LD_INT 0
37165: PUSH
37166: LD_INT 0
37168: PUSH
37169: EMPTY
37170: LIST
37171: LIST
37172: PUSH
37173: LD_INT 0
37175: PUSH
37176: LD_INT 1
37178: NEG
37179: PUSH
37180: EMPTY
37181: LIST
37182: LIST
37183: PUSH
37184: LD_INT 1
37186: PUSH
37187: LD_INT 0
37189: PUSH
37190: EMPTY
37191: LIST
37192: LIST
37193: PUSH
37194: LD_INT 1
37196: PUSH
37197: LD_INT 1
37199: PUSH
37200: EMPTY
37201: LIST
37202: LIST
37203: PUSH
37204: LD_INT 0
37206: PUSH
37207: LD_INT 1
37209: PUSH
37210: EMPTY
37211: LIST
37212: LIST
37213: PUSH
37214: LD_INT 1
37216: NEG
37217: PUSH
37218: LD_INT 0
37220: PUSH
37221: EMPTY
37222: LIST
37223: LIST
37224: PUSH
37225: LD_INT 1
37227: NEG
37228: PUSH
37229: LD_INT 1
37231: NEG
37232: PUSH
37233: EMPTY
37234: LIST
37235: LIST
37236: PUSH
37237: LD_INT 1
37239: NEG
37240: PUSH
37241: LD_INT 2
37243: NEG
37244: PUSH
37245: EMPTY
37246: LIST
37247: LIST
37248: PUSH
37249: LD_INT 2
37251: PUSH
37252: LD_INT 1
37254: PUSH
37255: EMPTY
37256: LIST
37257: LIST
37258: PUSH
37259: LD_INT 2
37261: PUSH
37262: LD_INT 2
37264: PUSH
37265: EMPTY
37266: LIST
37267: LIST
37268: PUSH
37269: LD_INT 1
37271: PUSH
37272: LD_INT 2
37274: PUSH
37275: EMPTY
37276: LIST
37277: LIST
37278: PUSH
37279: LD_INT 2
37281: NEG
37282: PUSH
37283: LD_INT 1
37285: NEG
37286: PUSH
37287: EMPTY
37288: LIST
37289: LIST
37290: PUSH
37291: LD_INT 2
37293: NEG
37294: PUSH
37295: LD_INT 2
37297: NEG
37298: PUSH
37299: EMPTY
37300: LIST
37301: LIST
37302: PUSH
37303: LD_INT 3
37305: PUSH
37306: LD_INT 2
37308: PUSH
37309: EMPTY
37310: LIST
37311: LIST
37312: PUSH
37313: LD_INT 3
37315: PUSH
37316: LD_INT 3
37318: PUSH
37319: EMPTY
37320: LIST
37321: LIST
37322: PUSH
37323: LD_INT 2
37325: PUSH
37326: LD_INT 3
37328: PUSH
37329: EMPTY
37330: LIST
37331: LIST
37332: PUSH
37333: EMPTY
37334: LIST
37335: LIST
37336: LIST
37337: LIST
37338: LIST
37339: LIST
37340: LIST
37341: LIST
37342: LIST
37343: LIST
37344: LIST
37345: LIST
37346: LIST
37347: LIST
37348: LIST
37349: LIST
37350: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37351: LD_ADDR_VAR 0 17
37355: PUSH
37356: LD_INT 0
37358: PUSH
37359: LD_INT 0
37361: PUSH
37362: EMPTY
37363: LIST
37364: LIST
37365: PUSH
37366: LD_INT 0
37368: PUSH
37369: LD_INT 1
37371: NEG
37372: PUSH
37373: EMPTY
37374: LIST
37375: LIST
37376: PUSH
37377: LD_INT 1
37379: PUSH
37380: LD_INT 0
37382: PUSH
37383: EMPTY
37384: LIST
37385: LIST
37386: PUSH
37387: LD_INT 1
37389: PUSH
37390: LD_INT 1
37392: PUSH
37393: EMPTY
37394: LIST
37395: LIST
37396: PUSH
37397: LD_INT 0
37399: PUSH
37400: LD_INT 1
37402: PUSH
37403: EMPTY
37404: LIST
37405: LIST
37406: PUSH
37407: LD_INT 1
37409: NEG
37410: PUSH
37411: LD_INT 0
37413: PUSH
37414: EMPTY
37415: LIST
37416: LIST
37417: PUSH
37418: LD_INT 1
37420: NEG
37421: PUSH
37422: LD_INT 1
37424: NEG
37425: PUSH
37426: EMPTY
37427: LIST
37428: LIST
37429: PUSH
37430: LD_INT 1
37432: NEG
37433: PUSH
37434: LD_INT 2
37436: NEG
37437: PUSH
37438: EMPTY
37439: LIST
37440: LIST
37441: PUSH
37442: LD_INT 0
37444: PUSH
37445: LD_INT 2
37447: NEG
37448: PUSH
37449: EMPTY
37450: LIST
37451: LIST
37452: PUSH
37453: LD_INT 1
37455: PUSH
37456: LD_INT 1
37458: NEG
37459: PUSH
37460: EMPTY
37461: LIST
37462: LIST
37463: PUSH
37464: LD_INT 2
37466: PUSH
37467: LD_INT 0
37469: PUSH
37470: EMPTY
37471: LIST
37472: LIST
37473: PUSH
37474: LD_INT 2
37476: PUSH
37477: LD_INT 1
37479: PUSH
37480: EMPTY
37481: LIST
37482: LIST
37483: PUSH
37484: LD_INT 2
37486: PUSH
37487: LD_INT 2
37489: PUSH
37490: EMPTY
37491: LIST
37492: LIST
37493: PUSH
37494: LD_INT 1
37496: PUSH
37497: LD_INT 2
37499: PUSH
37500: EMPTY
37501: LIST
37502: LIST
37503: PUSH
37504: LD_INT 0
37506: PUSH
37507: LD_INT 2
37509: PUSH
37510: EMPTY
37511: LIST
37512: LIST
37513: PUSH
37514: LD_INT 1
37516: NEG
37517: PUSH
37518: LD_INT 1
37520: PUSH
37521: EMPTY
37522: LIST
37523: LIST
37524: PUSH
37525: LD_INT 2
37527: NEG
37528: PUSH
37529: LD_INT 0
37531: PUSH
37532: EMPTY
37533: LIST
37534: LIST
37535: PUSH
37536: LD_INT 2
37538: NEG
37539: PUSH
37540: LD_INT 1
37542: NEG
37543: PUSH
37544: EMPTY
37545: LIST
37546: LIST
37547: PUSH
37548: LD_INT 2
37550: NEG
37551: PUSH
37552: LD_INT 2
37554: NEG
37555: PUSH
37556: EMPTY
37557: LIST
37558: LIST
37559: PUSH
37560: EMPTY
37561: LIST
37562: LIST
37563: LIST
37564: LIST
37565: LIST
37566: LIST
37567: LIST
37568: LIST
37569: LIST
37570: LIST
37571: LIST
37572: LIST
37573: LIST
37574: LIST
37575: LIST
37576: LIST
37577: LIST
37578: LIST
37579: LIST
37580: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37581: LD_ADDR_VAR 0 18
37585: PUSH
37586: LD_INT 0
37588: PUSH
37589: LD_INT 0
37591: PUSH
37592: EMPTY
37593: LIST
37594: LIST
37595: PUSH
37596: LD_INT 0
37598: PUSH
37599: LD_INT 1
37601: NEG
37602: PUSH
37603: EMPTY
37604: LIST
37605: LIST
37606: PUSH
37607: LD_INT 1
37609: PUSH
37610: LD_INT 0
37612: PUSH
37613: EMPTY
37614: LIST
37615: LIST
37616: PUSH
37617: LD_INT 1
37619: PUSH
37620: LD_INT 1
37622: PUSH
37623: EMPTY
37624: LIST
37625: LIST
37626: PUSH
37627: LD_INT 0
37629: PUSH
37630: LD_INT 1
37632: PUSH
37633: EMPTY
37634: LIST
37635: LIST
37636: PUSH
37637: LD_INT 1
37639: NEG
37640: PUSH
37641: LD_INT 0
37643: PUSH
37644: EMPTY
37645: LIST
37646: LIST
37647: PUSH
37648: LD_INT 1
37650: NEG
37651: PUSH
37652: LD_INT 1
37654: NEG
37655: PUSH
37656: EMPTY
37657: LIST
37658: LIST
37659: PUSH
37660: LD_INT 1
37662: NEG
37663: PUSH
37664: LD_INT 2
37666: NEG
37667: PUSH
37668: EMPTY
37669: LIST
37670: LIST
37671: PUSH
37672: LD_INT 0
37674: PUSH
37675: LD_INT 2
37677: NEG
37678: PUSH
37679: EMPTY
37680: LIST
37681: LIST
37682: PUSH
37683: LD_INT 1
37685: PUSH
37686: LD_INT 1
37688: NEG
37689: PUSH
37690: EMPTY
37691: LIST
37692: LIST
37693: PUSH
37694: LD_INT 2
37696: PUSH
37697: LD_INT 0
37699: PUSH
37700: EMPTY
37701: LIST
37702: LIST
37703: PUSH
37704: LD_INT 2
37706: PUSH
37707: LD_INT 1
37709: PUSH
37710: EMPTY
37711: LIST
37712: LIST
37713: PUSH
37714: LD_INT 2
37716: PUSH
37717: LD_INT 2
37719: PUSH
37720: EMPTY
37721: LIST
37722: LIST
37723: PUSH
37724: LD_INT 1
37726: PUSH
37727: LD_INT 2
37729: PUSH
37730: EMPTY
37731: LIST
37732: LIST
37733: PUSH
37734: LD_INT 0
37736: PUSH
37737: LD_INT 2
37739: PUSH
37740: EMPTY
37741: LIST
37742: LIST
37743: PUSH
37744: LD_INT 1
37746: NEG
37747: PUSH
37748: LD_INT 1
37750: PUSH
37751: EMPTY
37752: LIST
37753: LIST
37754: PUSH
37755: LD_INT 2
37757: NEG
37758: PUSH
37759: LD_INT 0
37761: PUSH
37762: EMPTY
37763: LIST
37764: LIST
37765: PUSH
37766: LD_INT 2
37768: NEG
37769: PUSH
37770: LD_INT 1
37772: NEG
37773: PUSH
37774: EMPTY
37775: LIST
37776: LIST
37777: PUSH
37778: LD_INT 2
37780: NEG
37781: PUSH
37782: LD_INT 2
37784: NEG
37785: PUSH
37786: EMPTY
37787: LIST
37788: LIST
37789: PUSH
37790: EMPTY
37791: LIST
37792: LIST
37793: LIST
37794: LIST
37795: LIST
37796: LIST
37797: LIST
37798: LIST
37799: LIST
37800: LIST
37801: LIST
37802: LIST
37803: LIST
37804: LIST
37805: LIST
37806: LIST
37807: LIST
37808: LIST
37809: LIST
37810: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37811: LD_ADDR_VAR 0 19
37815: PUSH
37816: LD_INT 0
37818: PUSH
37819: LD_INT 0
37821: PUSH
37822: EMPTY
37823: LIST
37824: LIST
37825: PUSH
37826: LD_INT 0
37828: PUSH
37829: LD_INT 1
37831: NEG
37832: PUSH
37833: EMPTY
37834: LIST
37835: LIST
37836: PUSH
37837: LD_INT 1
37839: PUSH
37840: LD_INT 0
37842: PUSH
37843: EMPTY
37844: LIST
37845: LIST
37846: PUSH
37847: LD_INT 1
37849: PUSH
37850: LD_INT 1
37852: PUSH
37853: EMPTY
37854: LIST
37855: LIST
37856: PUSH
37857: LD_INT 0
37859: PUSH
37860: LD_INT 1
37862: PUSH
37863: EMPTY
37864: LIST
37865: LIST
37866: PUSH
37867: LD_INT 1
37869: NEG
37870: PUSH
37871: LD_INT 0
37873: PUSH
37874: EMPTY
37875: LIST
37876: LIST
37877: PUSH
37878: LD_INT 1
37880: NEG
37881: PUSH
37882: LD_INT 1
37884: NEG
37885: PUSH
37886: EMPTY
37887: LIST
37888: LIST
37889: PUSH
37890: LD_INT 1
37892: NEG
37893: PUSH
37894: LD_INT 2
37896: NEG
37897: PUSH
37898: EMPTY
37899: LIST
37900: LIST
37901: PUSH
37902: LD_INT 0
37904: PUSH
37905: LD_INT 2
37907: NEG
37908: PUSH
37909: EMPTY
37910: LIST
37911: LIST
37912: PUSH
37913: LD_INT 1
37915: PUSH
37916: LD_INT 1
37918: NEG
37919: PUSH
37920: EMPTY
37921: LIST
37922: LIST
37923: PUSH
37924: LD_INT 2
37926: PUSH
37927: LD_INT 0
37929: PUSH
37930: EMPTY
37931: LIST
37932: LIST
37933: PUSH
37934: LD_INT 2
37936: PUSH
37937: LD_INT 1
37939: PUSH
37940: EMPTY
37941: LIST
37942: LIST
37943: PUSH
37944: LD_INT 2
37946: PUSH
37947: LD_INT 2
37949: PUSH
37950: EMPTY
37951: LIST
37952: LIST
37953: PUSH
37954: LD_INT 1
37956: PUSH
37957: LD_INT 2
37959: PUSH
37960: EMPTY
37961: LIST
37962: LIST
37963: PUSH
37964: LD_INT 0
37966: PUSH
37967: LD_INT 2
37969: PUSH
37970: EMPTY
37971: LIST
37972: LIST
37973: PUSH
37974: LD_INT 1
37976: NEG
37977: PUSH
37978: LD_INT 1
37980: PUSH
37981: EMPTY
37982: LIST
37983: LIST
37984: PUSH
37985: LD_INT 2
37987: NEG
37988: PUSH
37989: LD_INT 0
37991: PUSH
37992: EMPTY
37993: LIST
37994: LIST
37995: PUSH
37996: LD_INT 2
37998: NEG
37999: PUSH
38000: LD_INT 1
38002: NEG
38003: PUSH
38004: EMPTY
38005: LIST
38006: LIST
38007: PUSH
38008: LD_INT 2
38010: NEG
38011: PUSH
38012: LD_INT 2
38014: NEG
38015: PUSH
38016: EMPTY
38017: LIST
38018: LIST
38019: PUSH
38020: EMPTY
38021: LIST
38022: LIST
38023: LIST
38024: LIST
38025: LIST
38026: LIST
38027: LIST
38028: LIST
38029: LIST
38030: LIST
38031: LIST
38032: LIST
38033: LIST
38034: LIST
38035: LIST
38036: LIST
38037: LIST
38038: LIST
38039: LIST
38040: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38041: LD_ADDR_VAR 0 20
38045: PUSH
38046: LD_INT 0
38048: PUSH
38049: LD_INT 0
38051: PUSH
38052: EMPTY
38053: LIST
38054: LIST
38055: PUSH
38056: LD_INT 0
38058: PUSH
38059: LD_INT 1
38061: NEG
38062: PUSH
38063: EMPTY
38064: LIST
38065: LIST
38066: PUSH
38067: LD_INT 1
38069: PUSH
38070: LD_INT 0
38072: PUSH
38073: EMPTY
38074: LIST
38075: LIST
38076: PUSH
38077: LD_INT 1
38079: PUSH
38080: LD_INT 1
38082: PUSH
38083: EMPTY
38084: LIST
38085: LIST
38086: PUSH
38087: LD_INT 0
38089: PUSH
38090: LD_INT 1
38092: PUSH
38093: EMPTY
38094: LIST
38095: LIST
38096: PUSH
38097: LD_INT 1
38099: NEG
38100: PUSH
38101: LD_INT 0
38103: PUSH
38104: EMPTY
38105: LIST
38106: LIST
38107: PUSH
38108: LD_INT 1
38110: NEG
38111: PUSH
38112: LD_INT 1
38114: NEG
38115: PUSH
38116: EMPTY
38117: LIST
38118: LIST
38119: PUSH
38120: LD_INT 1
38122: NEG
38123: PUSH
38124: LD_INT 2
38126: NEG
38127: PUSH
38128: EMPTY
38129: LIST
38130: LIST
38131: PUSH
38132: LD_INT 0
38134: PUSH
38135: LD_INT 2
38137: NEG
38138: PUSH
38139: EMPTY
38140: LIST
38141: LIST
38142: PUSH
38143: LD_INT 1
38145: PUSH
38146: LD_INT 1
38148: NEG
38149: PUSH
38150: EMPTY
38151: LIST
38152: LIST
38153: PUSH
38154: LD_INT 2
38156: PUSH
38157: LD_INT 0
38159: PUSH
38160: EMPTY
38161: LIST
38162: LIST
38163: PUSH
38164: LD_INT 2
38166: PUSH
38167: LD_INT 1
38169: PUSH
38170: EMPTY
38171: LIST
38172: LIST
38173: PUSH
38174: LD_INT 2
38176: PUSH
38177: LD_INT 2
38179: PUSH
38180: EMPTY
38181: LIST
38182: LIST
38183: PUSH
38184: LD_INT 1
38186: PUSH
38187: LD_INT 2
38189: PUSH
38190: EMPTY
38191: LIST
38192: LIST
38193: PUSH
38194: LD_INT 0
38196: PUSH
38197: LD_INT 2
38199: PUSH
38200: EMPTY
38201: LIST
38202: LIST
38203: PUSH
38204: LD_INT 1
38206: NEG
38207: PUSH
38208: LD_INT 1
38210: PUSH
38211: EMPTY
38212: LIST
38213: LIST
38214: PUSH
38215: LD_INT 2
38217: NEG
38218: PUSH
38219: LD_INT 0
38221: PUSH
38222: EMPTY
38223: LIST
38224: LIST
38225: PUSH
38226: LD_INT 2
38228: NEG
38229: PUSH
38230: LD_INT 1
38232: NEG
38233: PUSH
38234: EMPTY
38235: LIST
38236: LIST
38237: PUSH
38238: LD_INT 2
38240: NEG
38241: PUSH
38242: LD_INT 2
38244: NEG
38245: PUSH
38246: EMPTY
38247: LIST
38248: LIST
38249: PUSH
38250: EMPTY
38251: LIST
38252: LIST
38253: LIST
38254: LIST
38255: LIST
38256: LIST
38257: LIST
38258: LIST
38259: LIST
38260: LIST
38261: LIST
38262: LIST
38263: LIST
38264: LIST
38265: LIST
38266: LIST
38267: LIST
38268: LIST
38269: LIST
38270: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38271: LD_ADDR_VAR 0 21
38275: PUSH
38276: LD_INT 0
38278: PUSH
38279: LD_INT 0
38281: PUSH
38282: EMPTY
38283: LIST
38284: LIST
38285: PUSH
38286: LD_INT 0
38288: PUSH
38289: LD_INT 1
38291: NEG
38292: PUSH
38293: EMPTY
38294: LIST
38295: LIST
38296: PUSH
38297: LD_INT 1
38299: PUSH
38300: LD_INT 0
38302: PUSH
38303: EMPTY
38304: LIST
38305: LIST
38306: PUSH
38307: LD_INT 1
38309: PUSH
38310: LD_INT 1
38312: PUSH
38313: EMPTY
38314: LIST
38315: LIST
38316: PUSH
38317: LD_INT 0
38319: PUSH
38320: LD_INT 1
38322: PUSH
38323: EMPTY
38324: LIST
38325: LIST
38326: PUSH
38327: LD_INT 1
38329: NEG
38330: PUSH
38331: LD_INT 0
38333: PUSH
38334: EMPTY
38335: LIST
38336: LIST
38337: PUSH
38338: LD_INT 1
38340: NEG
38341: PUSH
38342: LD_INT 1
38344: NEG
38345: PUSH
38346: EMPTY
38347: LIST
38348: LIST
38349: PUSH
38350: LD_INT 1
38352: NEG
38353: PUSH
38354: LD_INT 2
38356: NEG
38357: PUSH
38358: EMPTY
38359: LIST
38360: LIST
38361: PUSH
38362: LD_INT 0
38364: PUSH
38365: LD_INT 2
38367: NEG
38368: PUSH
38369: EMPTY
38370: LIST
38371: LIST
38372: PUSH
38373: LD_INT 1
38375: PUSH
38376: LD_INT 1
38378: NEG
38379: PUSH
38380: EMPTY
38381: LIST
38382: LIST
38383: PUSH
38384: LD_INT 2
38386: PUSH
38387: LD_INT 0
38389: PUSH
38390: EMPTY
38391: LIST
38392: LIST
38393: PUSH
38394: LD_INT 2
38396: PUSH
38397: LD_INT 1
38399: PUSH
38400: EMPTY
38401: LIST
38402: LIST
38403: PUSH
38404: LD_INT 2
38406: PUSH
38407: LD_INT 2
38409: PUSH
38410: EMPTY
38411: LIST
38412: LIST
38413: PUSH
38414: LD_INT 1
38416: PUSH
38417: LD_INT 2
38419: PUSH
38420: EMPTY
38421: LIST
38422: LIST
38423: PUSH
38424: LD_INT 0
38426: PUSH
38427: LD_INT 2
38429: PUSH
38430: EMPTY
38431: LIST
38432: LIST
38433: PUSH
38434: LD_INT 1
38436: NEG
38437: PUSH
38438: LD_INT 1
38440: PUSH
38441: EMPTY
38442: LIST
38443: LIST
38444: PUSH
38445: LD_INT 2
38447: NEG
38448: PUSH
38449: LD_INT 0
38451: PUSH
38452: EMPTY
38453: LIST
38454: LIST
38455: PUSH
38456: LD_INT 2
38458: NEG
38459: PUSH
38460: LD_INT 1
38462: NEG
38463: PUSH
38464: EMPTY
38465: LIST
38466: LIST
38467: PUSH
38468: LD_INT 2
38470: NEG
38471: PUSH
38472: LD_INT 2
38474: NEG
38475: PUSH
38476: EMPTY
38477: LIST
38478: LIST
38479: PUSH
38480: EMPTY
38481: LIST
38482: LIST
38483: LIST
38484: LIST
38485: LIST
38486: LIST
38487: LIST
38488: LIST
38489: LIST
38490: LIST
38491: LIST
38492: LIST
38493: LIST
38494: LIST
38495: LIST
38496: LIST
38497: LIST
38498: LIST
38499: LIST
38500: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38501: LD_ADDR_VAR 0 22
38505: PUSH
38506: LD_INT 0
38508: PUSH
38509: LD_INT 0
38511: PUSH
38512: EMPTY
38513: LIST
38514: LIST
38515: PUSH
38516: LD_INT 0
38518: PUSH
38519: LD_INT 1
38521: NEG
38522: PUSH
38523: EMPTY
38524: LIST
38525: LIST
38526: PUSH
38527: LD_INT 1
38529: PUSH
38530: LD_INT 0
38532: PUSH
38533: EMPTY
38534: LIST
38535: LIST
38536: PUSH
38537: LD_INT 1
38539: PUSH
38540: LD_INT 1
38542: PUSH
38543: EMPTY
38544: LIST
38545: LIST
38546: PUSH
38547: LD_INT 0
38549: PUSH
38550: LD_INT 1
38552: PUSH
38553: EMPTY
38554: LIST
38555: LIST
38556: PUSH
38557: LD_INT 1
38559: NEG
38560: PUSH
38561: LD_INT 0
38563: PUSH
38564: EMPTY
38565: LIST
38566: LIST
38567: PUSH
38568: LD_INT 1
38570: NEG
38571: PUSH
38572: LD_INT 1
38574: NEG
38575: PUSH
38576: EMPTY
38577: LIST
38578: LIST
38579: PUSH
38580: LD_INT 1
38582: NEG
38583: PUSH
38584: LD_INT 2
38586: NEG
38587: PUSH
38588: EMPTY
38589: LIST
38590: LIST
38591: PUSH
38592: LD_INT 0
38594: PUSH
38595: LD_INT 2
38597: NEG
38598: PUSH
38599: EMPTY
38600: LIST
38601: LIST
38602: PUSH
38603: LD_INT 1
38605: PUSH
38606: LD_INT 1
38608: NEG
38609: PUSH
38610: EMPTY
38611: LIST
38612: LIST
38613: PUSH
38614: LD_INT 2
38616: PUSH
38617: LD_INT 0
38619: PUSH
38620: EMPTY
38621: LIST
38622: LIST
38623: PUSH
38624: LD_INT 2
38626: PUSH
38627: LD_INT 1
38629: PUSH
38630: EMPTY
38631: LIST
38632: LIST
38633: PUSH
38634: LD_INT 2
38636: PUSH
38637: LD_INT 2
38639: PUSH
38640: EMPTY
38641: LIST
38642: LIST
38643: PUSH
38644: LD_INT 1
38646: PUSH
38647: LD_INT 2
38649: PUSH
38650: EMPTY
38651: LIST
38652: LIST
38653: PUSH
38654: LD_INT 0
38656: PUSH
38657: LD_INT 2
38659: PUSH
38660: EMPTY
38661: LIST
38662: LIST
38663: PUSH
38664: LD_INT 1
38666: NEG
38667: PUSH
38668: LD_INT 1
38670: PUSH
38671: EMPTY
38672: LIST
38673: LIST
38674: PUSH
38675: LD_INT 2
38677: NEG
38678: PUSH
38679: LD_INT 0
38681: PUSH
38682: EMPTY
38683: LIST
38684: LIST
38685: PUSH
38686: LD_INT 2
38688: NEG
38689: PUSH
38690: LD_INT 1
38692: NEG
38693: PUSH
38694: EMPTY
38695: LIST
38696: LIST
38697: PUSH
38698: LD_INT 2
38700: NEG
38701: PUSH
38702: LD_INT 2
38704: NEG
38705: PUSH
38706: EMPTY
38707: LIST
38708: LIST
38709: PUSH
38710: EMPTY
38711: LIST
38712: LIST
38713: LIST
38714: LIST
38715: LIST
38716: LIST
38717: LIST
38718: LIST
38719: LIST
38720: LIST
38721: LIST
38722: LIST
38723: LIST
38724: LIST
38725: LIST
38726: LIST
38727: LIST
38728: LIST
38729: LIST
38730: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
38731: LD_ADDR_VAR 0 23
38735: PUSH
38736: LD_INT 0
38738: PUSH
38739: LD_INT 0
38741: PUSH
38742: EMPTY
38743: LIST
38744: LIST
38745: PUSH
38746: LD_INT 0
38748: PUSH
38749: LD_INT 1
38751: NEG
38752: PUSH
38753: EMPTY
38754: LIST
38755: LIST
38756: PUSH
38757: LD_INT 1
38759: PUSH
38760: LD_INT 0
38762: PUSH
38763: EMPTY
38764: LIST
38765: LIST
38766: PUSH
38767: LD_INT 1
38769: PUSH
38770: LD_INT 1
38772: PUSH
38773: EMPTY
38774: LIST
38775: LIST
38776: PUSH
38777: LD_INT 0
38779: PUSH
38780: LD_INT 1
38782: PUSH
38783: EMPTY
38784: LIST
38785: LIST
38786: PUSH
38787: LD_INT 1
38789: NEG
38790: PUSH
38791: LD_INT 0
38793: PUSH
38794: EMPTY
38795: LIST
38796: LIST
38797: PUSH
38798: LD_INT 1
38800: NEG
38801: PUSH
38802: LD_INT 1
38804: NEG
38805: PUSH
38806: EMPTY
38807: LIST
38808: LIST
38809: PUSH
38810: LD_INT 1
38812: NEG
38813: PUSH
38814: LD_INT 2
38816: NEG
38817: PUSH
38818: EMPTY
38819: LIST
38820: LIST
38821: PUSH
38822: LD_INT 0
38824: PUSH
38825: LD_INT 2
38827: NEG
38828: PUSH
38829: EMPTY
38830: LIST
38831: LIST
38832: PUSH
38833: LD_INT 1
38835: PUSH
38836: LD_INT 1
38838: NEG
38839: PUSH
38840: EMPTY
38841: LIST
38842: LIST
38843: PUSH
38844: LD_INT 2
38846: PUSH
38847: LD_INT 0
38849: PUSH
38850: EMPTY
38851: LIST
38852: LIST
38853: PUSH
38854: LD_INT 2
38856: PUSH
38857: LD_INT 1
38859: PUSH
38860: EMPTY
38861: LIST
38862: LIST
38863: PUSH
38864: LD_INT 2
38866: PUSH
38867: LD_INT 2
38869: PUSH
38870: EMPTY
38871: LIST
38872: LIST
38873: PUSH
38874: LD_INT 1
38876: PUSH
38877: LD_INT 2
38879: PUSH
38880: EMPTY
38881: LIST
38882: LIST
38883: PUSH
38884: LD_INT 0
38886: PUSH
38887: LD_INT 2
38889: PUSH
38890: EMPTY
38891: LIST
38892: LIST
38893: PUSH
38894: LD_INT 1
38896: NEG
38897: PUSH
38898: LD_INT 1
38900: PUSH
38901: EMPTY
38902: LIST
38903: LIST
38904: PUSH
38905: LD_INT 2
38907: NEG
38908: PUSH
38909: LD_INT 0
38911: PUSH
38912: EMPTY
38913: LIST
38914: LIST
38915: PUSH
38916: LD_INT 2
38918: NEG
38919: PUSH
38920: LD_INT 1
38922: NEG
38923: PUSH
38924: EMPTY
38925: LIST
38926: LIST
38927: PUSH
38928: LD_INT 2
38930: NEG
38931: PUSH
38932: LD_INT 2
38934: NEG
38935: PUSH
38936: EMPTY
38937: LIST
38938: LIST
38939: PUSH
38940: LD_INT 2
38942: NEG
38943: PUSH
38944: LD_INT 3
38946: NEG
38947: PUSH
38948: EMPTY
38949: LIST
38950: LIST
38951: PUSH
38952: LD_INT 1
38954: NEG
38955: PUSH
38956: LD_INT 3
38958: NEG
38959: PUSH
38960: EMPTY
38961: LIST
38962: LIST
38963: PUSH
38964: LD_INT 1
38966: PUSH
38967: LD_INT 2
38969: NEG
38970: PUSH
38971: EMPTY
38972: LIST
38973: LIST
38974: PUSH
38975: LD_INT 2
38977: PUSH
38978: LD_INT 1
38980: NEG
38981: PUSH
38982: EMPTY
38983: LIST
38984: LIST
38985: PUSH
38986: EMPTY
38987: LIST
38988: LIST
38989: LIST
38990: LIST
38991: LIST
38992: LIST
38993: LIST
38994: LIST
38995: LIST
38996: LIST
38997: LIST
38998: LIST
38999: LIST
39000: LIST
39001: LIST
39002: LIST
39003: LIST
39004: LIST
39005: LIST
39006: LIST
39007: LIST
39008: LIST
39009: LIST
39010: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
39011: LD_ADDR_VAR 0 24
39015: PUSH
39016: LD_INT 0
39018: PUSH
39019: LD_INT 0
39021: PUSH
39022: EMPTY
39023: LIST
39024: LIST
39025: PUSH
39026: LD_INT 0
39028: PUSH
39029: LD_INT 1
39031: NEG
39032: PUSH
39033: EMPTY
39034: LIST
39035: LIST
39036: PUSH
39037: LD_INT 1
39039: PUSH
39040: LD_INT 0
39042: PUSH
39043: EMPTY
39044: LIST
39045: LIST
39046: PUSH
39047: LD_INT 1
39049: PUSH
39050: LD_INT 1
39052: PUSH
39053: EMPTY
39054: LIST
39055: LIST
39056: PUSH
39057: LD_INT 0
39059: PUSH
39060: LD_INT 1
39062: PUSH
39063: EMPTY
39064: LIST
39065: LIST
39066: PUSH
39067: LD_INT 1
39069: NEG
39070: PUSH
39071: LD_INT 0
39073: PUSH
39074: EMPTY
39075: LIST
39076: LIST
39077: PUSH
39078: LD_INT 1
39080: NEG
39081: PUSH
39082: LD_INT 1
39084: NEG
39085: PUSH
39086: EMPTY
39087: LIST
39088: LIST
39089: PUSH
39090: LD_INT 1
39092: NEG
39093: PUSH
39094: LD_INT 2
39096: NEG
39097: PUSH
39098: EMPTY
39099: LIST
39100: LIST
39101: PUSH
39102: LD_INT 0
39104: PUSH
39105: LD_INT 2
39107: NEG
39108: PUSH
39109: EMPTY
39110: LIST
39111: LIST
39112: PUSH
39113: LD_INT 1
39115: PUSH
39116: LD_INT 1
39118: NEG
39119: PUSH
39120: EMPTY
39121: LIST
39122: LIST
39123: PUSH
39124: LD_INT 2
39126: PUSH
39127: LD_INT 0
39129: PUSH
39130: EMPTY
39131: LIST
39132: LIST
39133: PUSH
39134: LD_INT 2
39136: PUSH
39137: LD_INT 1
39139: PUSH
39140: EMPTY
39141: LIST
39142: LIST
39143: PUSH
39144: LD_INT 2
39146: PUSH
39147: LD_INT 2
39149: PUSH
39150: EMPTY
39151: LIST
39152: LIST
39153: PUSH
39154: LD_INT 1
39156: PUSH
39157: LD_INT 2
39159: PUSH
39160: EMPTY
39161: LIST
39162: LIST
39163: PUSH
39164: LD_INT 0
39166: PUSH
39167: LD_INT 2
39169: PUSH
39170: EMPTY
39171: LIST
39172: LIST
39173: PUSH
39174: LD_INT 1
39176: NEG
39177: PUSH
39178: LD_INT 1
39180: PUSH
39181: EMPTY
39182: LIST
39183: LIST
39184: PUSH
39185: LD_INT 2
39187: NEG
39188: PUSH
39189: LD_INT 0
39191: PUSH
39192: EMPTY
39193: LIST
39194: LIST
39195: PUSH
39196: LD_INT 2
39198: NEG
39199: PUSH
39200: LD_INT 1
39202: NEG
39203: PUSH
39204: EMPTY
39205: LIST
39206: LIST
39207: PUSH
39208: LD_INT 2
39210: NEG
39211: PUSH
39212: LD_INT 2
39214: NEG
39215: PUSH
39216: EMPTY
39217: LIST
39218: LIST
39219: PUSH
39220: LD_INT 1
39222: PUSH
39223: LD_INT 2
39225: NEG
39226: PUSH
39227: EMPTY
39228: LIST
39229: LIST
39230: PUSH
39231: LD_INT 2
39233: PUSH
39234: LD_INT 1
39236: NEG
39237: PUSH
39238: EMPTY
39239: LIST
39240: LIST
39241: PUSH
39242: LD_INT 3
39244: PUSH
39245: LD_INT 1
39247: PUSH
39248: EMPTY
39249: LIST
39250: LIST
39251: PUSH
39252: LD_INT 3
39254: PUSH
39255: LD_INT 2
39257: PUSH
39258: EMPTY
39259: LIST
39260: LIST
39261: PUSH
39262: EMPTY
39263: LIST
39264: LIST
39265: LIST
39266: LIST
39267: LIST
39268: LIST
39269: LIST
39270: LIST
39271: LIST
39272: LIST
39273: LIST
39274: LIST
39275: LIST
39276: LIST
39277: LIST
39278: LIST
39279: LIST
39280: LIST
39281: LIST
39282: LIST
39283: LIST
39284: LIST
39285: LIST
39286: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
39287: LD_ADDR_VAR 0 25
39291: PUSH
39292: LD_INT 0
39294: PUSH
39295: LD_INT 0
39297: PUSH
39298: EMPTY
39299: LIST
39300: LIST
39301: PUSH
39302: LD_INT 0
39304: PUSH
39305: LD_INT 1
39307: NEG
39308: PUSH
39309: EMPTY
39310: LIST
39311: LIST
39312: PUSH
39313: LD_INT 1
39315: PUSH
39316: LD_INT 0
39318: PUSH
39319: EMPTY
39320: LIST
39321: LIST
39322: PUSH
39323: LD_INT 1
39325: PUSH
39326: LD_INT 1
39328: PUSH
39329: EMPTY
39330: LIST
39331: LIST
39332: PUSH
39333: LD_INT 0
39335: PUSH
39336: LD_INT 1
39338: PUSH
39339: EMPTY
39340: LIST
39341: LIST
39342: PUSH
39343: LD_INT 1
39345: NEG
39346: PUSH
39347: LD_INT 0
39349: PUSH
39350: EMPTY
39351: LIST
39352: LIST
39353: PUSH
39354: LD_INT 1
39356: NEG
39357: PUSH
39358: LD_INT 1
39360: NEG
39361: PUSH
39362: EMPTY
39363: LIST
39364: LIST
39365: PUSH
39366: LD_INT 1
39368: NEG
39369: PUSH
39370: LD_INT 2
39372: NEG
39373: PUSH
39374: EMPTY
39375: LIST
39376: LIST
39377: PUSH
39378: LD_INT 0
39380: PUSH
39381: LD_INT 2
39383: NEG
39384: PUSH
39385: EMPTY
39386: LIST
39387: LIST
39388: PUSH
39389: LD_INT 1
39391: PUSH
39392: LD_INT 1
39394: NEG
39395: PUSH
39396: EMPTY
39397: LIST
39398: LIST
39399: PUSH
39400: LD_INT 2
39402: PUSH
39403: LD_INT 0
39405: PUSH
39406: EMPTY
39407: LIST
39408: LIST
39409: PUSH
39410: LD_INT 2
39412: PUSH
39413: LD_INT 1
39415: PUSH
39416: EMPTY
39417: LIST
39418: LIST
39419: PUSH
39420: LD_INT 2
39422: PUSH
39423: LD_INT 2
39425: PUSH
39426: EMPTY
39427: LIST
39428: LIST
39429: PUSH
39430: LD_INT 1
39432: PUSH
39433: LD_INT 2
39435: PUSH
39436: EMPTY
39437: LIST
39438: LIST
39439: PUSH
39440: LD_INT 0
39442: PUSH
39443: LD_INT 2
39445: PUSH
39446: EMPTY
39447: LIST
39448: LIST
39449: PUSH
39450: LD_INT 1
39452: NEG
39453: PUSH
39454: LD_INT 1
39456: PUSH
39457: EMPTY
39458: LIST
39459: LIST
39460: PUSH
39461: LD_INT 2
39463: NEG
39464: PUSH
39465: LD_INT 0
39467: PUSH
39468: EMPTY
39469: LIST
39470: LIST
39471: PUSH
39472: LD_INT 2
39474: NEG
39475: PUSH
39476: LD_INT 1
39478: NEG
39479: PUSH
39480: EMPTY
39481: LIST
39482: LIST
39483: PUSH
39484: LD_INT 2
39486: NEG
39487: PUSH
39488: LD_INT 2
39490: NEG
39491: PUSH
39492: EMPTY
39493: LIST
39494: LIST
39495: PUSH
39496: LD_INT 3
39498: PUSH
39499: LD_INT 1
39501: PUSH
39502: EMPTY
39503: LIST
39504: LIST
39505: PUSH
39506: LD_INT 3
39508: PUSH
39509: LD_INT 2
39511: PUSH
39512: EMPTY
39513: LIST
39514: LIST
39515: PUSH
39516: LD_INT 2
39518: PUSH
39519: LD_INT 3
39521: PUSH
39522: EMPTY
39523: LIST
39524: LIST
39525: PUSH
39526: LD_INT 1
39528: PUSH
39529: LD_INT 3
39531: PUSH
39532: EMPTY
39533: LIST
39534: LIST
39535: PUSH
39536: EMPTY
39537: LIST
39538: LIST
39539: LIST
39540: LIST
39541: LIST
39542: LIST
39543: LIST
39544: LIST
39545: LIST
39546: LIST
39547: LIST
39548: LIST
39549: LIST
39550: LIST
39551: LIST
39552: LIST
39553: LIST
39554: LIST
39555: LIST
39556: LIST
39557: LIST
39558: LIST
39559: LIST
39560: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
39561: LD_ADDR_VAR 0 26
39565: PUSH
39566: LD_INT 0
39568: PUSH
39569: LD_INT 0
39571: PUSH
39572: EMPTY
39573: LIST
39574: LIST
39575: PUSH
39576: LD_INT 0
39578: PUSH
39579: LD_INT 1
39581: NEG
39582: PUSH
39583: EMPTY
39584: LIST
39585: LIST
39586: PUSH
39587: LD_INT 1
39589: PUSH
39590: LD_INT 0
39592: PUSH
39593: EMPTY
39594: LIST
39595: LIST
39596: PUSH
39597: LD_INT 1
39599: PUSH
39600: LD_INT 1
39602: PUSH
39603: EMPTY
39604: LIST
39605: LIST
39606: PUSH
39607: LD_INT 0
39609: PUSH
39610: LD_INT 1
39612: PUSH
39613: EMPTY
39614: LIST
39615: LIST
39616: PUSH
39617: LD_INT 1
39619: NEG
39620: PUSH
39621: LD_INT 0
39623: PUSH
39624: EMPTY
39625: LIST
39626: LIST
39627: PUSH
39628: LD_INT 1
39630: NEG
39631: PUSH
39632: LD_INT 1
39634: NEG
39635: PUSH
39636: EMPTY
39637: LIST
39638: LIST
39639: PUSH
39640: LD_INT 1
39642: NEG
39643: PUSH
39644: LD_INT 2
39646: NEG
39647: PUSH
39648: EMPTY
39649: LIST
39650: LIST
39651: PUSH
39652: LD_INT 0
39654: PUSH
39655: LD_INT 2
39657: NEG
39658: PUSH
39659: EMPTY
39660: LIST
39661: LIST
39662: PUSH
39663: LD_INT 1
39665: PUSH
39666: LD_INT 1
39668: NEG
39669: PUSH
39670: EMPTY
39671: LIST
39672: LIST
39673: PUSH
39674: LD_INT 2
39676: PUSH
39677: LD_INT 0
39679: PUSH
39680: EMPTY
39681: LIST
39682: LIST
39683: PUSH
39684: LD_INT 2
39686: PUSH
39687: LD_INT 1
39689: PUSH
39690: EMPTY
39691: LIST
39692: LIST
39693: PUSH
39694: LD_INT 2
39696: PUSH
39697: LD_INT 2
39699: PUSH
39700: EMPTY
39701: LIST
39702: LIST
39703: PUSH
39704: LD_INT 1
39706: PUSH
39707: LD_INT 2
39709: PUSH
39710: EMPTY
39711: LIST
39712: LIST
39713: PUSH
39714: LD_INT 0
39716: PUSH
39717: LD_INT 2
39719: PUSH
39720: EMPTY
39721: LIST
39722: LIST
39723: PUSH
39724: LD_INT 1
39726: NEG
39727: PUSH
39728: LD_INT 1
39730: PUSH
39731: EMPTY
39732: LIST
39733: LIST
39734: PUSH
39735: LD_INT 2
39737: NEG
39738: PUSH
39739: LD_INT 0
39741: PUSH
39742: EMPTY
39743: LIST
39744: LIST
39745: PUSH
39746: LD_INT 2
39748: NEG
39749: PUSH
39750: LD_INT 1
39752: NEG
39753: PUSH
39754: EMPTY
39755: LIST
39756: LIST
39757: PUSH
39758: LD_INT 2
39760: NEG
39761: PUSH
39762: LD_INT 2
39764: NEG
39765: PUSH
39766: EMPTY
39767: LIST
39768: LIST
39769: PUSH
39770: LD_INT 2
39772: PUSH
39773: LD_INT 3
39775: PUSH
39776: EMPTY
39777: LIST
39778: LIST
39779: PUSH
39780: LD_INT 1
39782: PUSH
39783: LD_INT 3
39785: PUSH
39786: EMPTY
39787: LIST
39788: LIST
39789: PUSH
39790: LD_INT 1
39792: NEG
39793: PUSH
39794: LD_INT 2
39796: PUSH
39797: EMPTY
39798: LIST
39799: LIST
39800: PUSH
39801: LD_INT 2
39803: NEG
39804: PUSH
39805: LD_INT 1
39807: PUSH
39808: EMPTY
39809: LIST
39810: LIST
39811: PUSH
39812: EMPTY
39813: LIST
39814: LIST
39815: LIST
39816: LIST
39817: LIST
39818: LIST
39819: LIST
39820: LIST
39821: LIST
39822: LIST
39823: LIST
39824: LIST
39825: LIST
39826: LIST
39827: LIST
39828: LIST
39829: LIST
39830: LIST
39831: LIST
39832: LIST
39833: LIST
39834: LIST
39835: LIST
39836: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
39837: LD_ADDR_VAR 0 27
39841: PUSH
39842: LD_INT 0
39844: PUSH
39845: LD_INT 0
39847: PUSH
39848: EMPTY
39849: LIST
39850: LIST
39851: PUSH
39852: LD_INT 0
39854: PUSH
39855: LD_INT 1
39857: NEG
39858: PUSH
39859: EMPTY
39860: LIST
39861: LIST
39862: PUSH
39863: LD_INT 1
39865: PUSH
39866: LD_INT 0
39868: PUSH
39869: EMPTY
39870: LIST
39871: LIST
39872: PUSH
39873: LD_INT 1
39875: PUSH
39876: LD_INT 1
39878: PUSH
39879: EMPTY
39880: LIST
39881: LIST
39882: PUSH
39883: LD_INT 0
39885: PUSH
39886: LD_INT 1
39888: PUSH
39889: EMPTY
39890: LIST
39891: LIST
39892: PUSH
39893: LD_INT 1
39895: NEG
39896: PUSH
39897: LD_INT 0
39899: PUSH
39900: EMPTY
39901: LIST
39902: LIST
39903: PUSH
39904: LD_INT 1
39906: NEG
39907: PUSH
39908: LD_INT 1
39910: NEG
39911: PUSH
39912: EMPTY
39913: LIST
39914: LIST
39915: PUSH
39916: LD_INT 1
39918: NEG
39919: PUSH
39920: LD_INT 2
39922: NEG
39923: PUSH
39924: EMPTY
39925: LIST
39926: LIST
39927: PUSH
39928: LD_INT 0
39930: PUSH
39931: LD_INT 2
39933: NEG
39934: PUSH
39935: EMPTY
39936: LIST
39937: LIST
39938: PUSH
39939: LD_INT 1
39941: PUSH
39942: LD_INT 1
39944: NEG
39945: PUSH
39946: EMPTY
39947: LIST
39948: LIST
39949: PUSH
39950: LD_INT 2
39952: PUSH
39953: LD_INT 0
39955: PUSH
39956: EMPTY
39957: LIST
39958: LIST
39959: PUSH
39960: LD_INT 2
39962: PUSH
39963: LD_INT 1
39965: PUSH
39966: EMPTY
39967: LIST
39968: LIST
39969: PUSH
39970: LD_INT 2
39972: PUSH
39973: LD_INT 2
39975: PUSH
39976: EMPTY
39977: LIST
39978: LIST
39979: PUSH
39980: LD_INT 1
39982: PUSH
39983: LD_INT 2
39985: PUSH
39986: EMPTY
39987: LIST
39988: LIST
39989: PUSH
39990: LD_INT 0
39992: PUSH
39993: LD_INT 2
39995: PUSH
39996: EMPTY
39997: LIST
39998: LIST
39999: PUSH
40000: LD_INT 1
40002: NEG
40003: PUSH
40004: LD_INT 1
40006: PUSH
40007: EMPTY
40008: LIST
40009: LIST
40010: PUSH
40011: LD_INT 2
40013: NEG
40014: PUSH
40015: LD_INT 0
40017: PUSH
40018: EMPTY
40019: LIST
40020: LIST
40021: PUSH
40022: LD_INT 2
40024: NEG
40025: PUSH
40026: LD_INT 1
40028: NEG
40029: PUSH
40030: EMPTY
40031: LIST
40032: LIST
40033: PUSH
40034: LD_INT 2
40036: NEG
40037: PUSH
40038: LD_INT 2
40040: NEG
40041: PUSH
40042: EMPTY
40043: LIST
40044: LIST
40045: PUSH
40046: LD_INT 1
40048: NEG
40049: PUSH
40050: LD_INT 2
40052: PUSH
40053: EMPTY
40054: LIST
40055: LIST
40056: PUSH
40057: LD_INT 2
40059: NEG
40060: PUSH
40061: LD_INT 1
40063: PUSH
40064: EMPTY
40065: LIST
40066: LIST
40067: PUSH
40068: LD_INT 3
40070: NEG
40071: PUSH
40072: LD_INT 1
40074: NEG
40075: PUSH
40076: EMPTY
40077: LIST
40078: LIST
40079: PUSH
40080: LD_INT 3
40082: NEG
40083: PUSH
40084: LD_INT 2
40086: NEG
40087: PUSH
40088: EMPTY
40089: LIST
40090: LIST
40091: PUSH
40092: EMPTY
40093: LIST
40094: LIST
40095: LIST
40096: LIST
40097: LIST
40098: LIST
40099: LIST
40100: LIST
40101: LIST
40102: LIST
40103: LIST
40104: LIST
40105: LIST
40106: LIST
40107: LIST
40108: LIST
40109: LIST
40110: LIST
40111: LIST
40112: LIST
40113: LIST
40114: LIST
40115: LIST
40116: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
40117: LD_ADDR_VAR 0 28
40121: PUSH
40122: LD_INT 0
40124: PUSH
40125: LD_INT 0
40127: PUSH
40128: EMPTY
40129: LIST
40130: LIST
40131: PUSH
40132: LD_INT 0
40134: PUSH
40135: LD_INT 1
40137: NEG
40138: PUSH
40139: EMPTY
40140: LIST
40141: LIST
40142: PUSH
40143: LD_INT 1
40145: PUSH
40146: LD_INT 0
40148: PUSH
40149: EMPTY
40150: LIST
40151: LIST
40152: PUSH
40153: LD_INT 1
40155: PUSH
40156: LD_INT 1
40158: PUSH
40159: EMPTY
40160: LIST
40161: LIST
40162: PUSH
40163: LD_INT 0
40165: PUSH
40166: LD_INT 1
40168: PUSH
40169: EMPTY
40170: LIST
40171: LIST
40172: PUSH
40173: LD_INT 1
40175: NEG
40176: PUSH
40177: LD_INT 0
40179: PUSH
40180: EMPTY
40181: LIST
40182: LIST
40183: PUSH
40184: LD_INT 1
40186: NEG
40187: PUSH
40188: LD_INT 1
40190: NEG
40191: PUSH
40192: EMPTY
40193: LIST
40194: LIST
40195: PUSH
40196: LD_INT 1
40198: NEG
40199: PUSH
40200: LD_INT 2
40202: NEG
40203: PUSH
40204: EMPTY
40205: LIST
40206: LIST
40207: PUSH
40208: LD_INT 0
40210: PUSH
40211: LD_INT 2
40213: NEG
40214: PUSH
40215: EMPTY
40216: LIST
40217: LIST
40218: PUSH
40219: LD_INT 1
40221: PUSH
40222: LD_INT 1
40224: NEG
40225: PUSH
40226: EMPTY
40227: LIST
40228: LIST
40229: PUSH
40230: LD_INT 2
40232: PUSH
40233: LD_INT 0
40235: PUSH
40236: EMPTY
40237: LIST
40238: LIST
40239: PUSH
40240: LD_INT 2
40242: PUSH
40243: LD_INT 1
40245: PUSH
40246: EMPTY
40247: LIST
40248: LIST
40249: PUSH
40250: LD_INT 2
40252: PUSH
40253: LD_INT 2
40255: PUSH
40256: EMPTY
40257: LIST
40258: LIST
40259: PUSH
40260: LD_INT 1
40262: PUSH
40263: LD_INT 2
40265: PUSH
40266: EMPTY
40267: LIST
40268: LIST
40269: PUSH
40270: LD_INT 0
40272: PUSH
40273: LD_INT 2
40275: PUSH
40276: EMPTY
40277: LIST
40278: LIST
40279: PUSH
40280: LD_INT 1
40282: NEG
40283: PUSH
40284: LD_INT 1
40286: PUSH
40287: EMPTY
40288: LIST
40289: LIST
40290: PUSH
40291: LD_INT 2
40293: NEG
40294: PUSH
40295: LD_INT 0
40297: PUSH
40298: EMPTY
40299: LIST
40300: LIST
40301: PUSH
40302: LD_INT 2
40304: NEG
40305: PUSH
40306: LD_INT 1
40308: NEG
40309: PUSH
40310: EMPTY
40311: LIST
40312: LIST
40313: PUSH
40314: LD_INT 2
40316: NEG
40317: PUSH
40318: LD_INT 2
40320: NEG
40321: PUSH
40322: EMPTY
40323: LIST
40324: LIST
40325: PUSH
40326: LD_INT 2
40328: NEG
40329: PUSH
40330: LD_INT 3
40332: NEG
40333: PUSH
40334: EMPTY
40335: LIST
40336: LIST
40337: PUSH
40338: LD_INT 1
40340: NEG
40341: PUSH
40342: LD_INT 3
40344: NEG
40345: PUSH
40346: EMPTY
40347: LIST
40348: LIST
40349: PUSH
40350: LD_INT 3
40352: NEG
40353: PUSH
40354: LD_INT 1
40356: NEG
40357: PUSH
40358: EMPTY
40359: LIST
40360: LIST
40361: PUSH
40362: LD_INT 3
40364: NEG
40365: PUSH
40366: LD_INT 2
40368: NEG
40369: PUSH
40370: EMPTY
40371: LIST
40372: LIST
40373: PUSH
40374: EMPTY
40375: LIST
40376: LIST
40377: LIST
40378: LIST
40379: LIST
40380: LIST
40381: LIST
40382: LIST
40383: LIST
40384: LIST
40385: LIST
40386: LIST
40387: LIST
40388: LIST
40389: LIST
40390: LIST
40391: LIST
40392: LIST
40393: LIST
40394: LIST
40395: LIST
40396: LIST
40397: LIST
40398: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
40399: LD_ADDR_VAR 0 29
40403: PUSH
40404: LD_INT 0
40406: PUSH
40407: LD_INT 0
40409: PUSH
40410: EMPTY
40411: LIST
40412: LIST
40413: PUSH
40414: LD_INT 0
40416: PUSH
40417: LD_INT 1
40419: NEG
40420: PUSH
40421: EMPTY
40422: LIST
40423: LIST
40424: PUSH
40425: LD_INT 1
40427: PUSH
40428: LD_INT 0
40430: PUSH
40431: EMPTY
40432: LIST
40433: LIST
40434: PUSH
40435: LD_INT 1
40437: PUSH
40438: LD_INT 1
40440: PUSH
40441: EMPTY
40442: LIST
40443: LIST
40444: PUSH
40445: LD_INT 0
40447: PUSH
40448: LD_INT 1
40450: PUSH
40451: EMPTY
40452: LIST
40453: LIST
40454: PUSH
40455: LD_INT 1
40457: NEG
40458: PUSH
40459: LD_INT 0
40461: PUSH
40462: EMPTY
40463: LIST
40464: LIST
40465: PUSH
40466: LD_INT 1
40468: NEG
40469: PUSH
40470: LD_INT 1
40472: NEG
40473: PUSH
40474: EMPTY
40475: LIST
40476: LIST
40477: PUSH
40478: LD_INT 1
40480: NEG
40481: PUSH
40482: LD_INT 2
40484: NEG
40485: PUSH
40486: EMPTY
40487: LIST
40488: LIST
40489: PUSH
40490: LD_INT 0
40492: PUSH
40493: LD_INT 2
40495: NEG
40496: PUSH
40497: EMPTY
40498: LIST
40499: LIST
40500: PUSH
40501: LD_INT 1
40503: PUSH
40504: LD_INT 1
40506: NEG
40507: PUSH
40508: EMPTY
40509: LIST
40510: LIST
40511: PUSH
40512: LD_INT 2
40514: PUSH
40515: LD_INT 0
40517: PUSH
40518: EMPTY
40519: LIST
40520: LIST
40521: PUSH
40522: LD_INT 2
40524: PUSH
40525: LD_INT 1
40527: PUSH
40528: EMPTY
40529: LIST
40530: LIST
40531: PUSH
40532: LD_INT 1
40534: PUSH
40535: LD_INT 2
40537: PUSH
40538: EMPTY
40539: LIST
40540: LIST
40541: PUSH
40542: LD_INT 0
40544: PUSH
40545: LD_INT 2
40547: PUSH
40548: EMPTY
40549: LIST
40550: LIST
40551: PUSH
40552: LD_INT 1
40554: NEG
40555: PUSH
40556: LD_INT 1
40558: PUSH
40559: EMPTY
40560: LIST
40561: LIST
40562: PUSH
40563: LD_INT 2
40565: NEG
40566: PUSH
40567: LD_INT 1
40569: NEG
40570: PUSH
40571: EMPTY
40572: LIST
40573: LIST
40574: PUSH
40575: LD_INT 2
40577: NEG
40578: PUSH
40579: LD_INT 2
40581: NEG
40582: PUSH
40583: EMPTY
40584: LIST
40585: LIST
40586: PUSH
40587: LD_INT 2
40589: NEG
40590: PUSH
40591: LD_INT 3
40593: NEG
40594: PUSH
40595: EMPTY
40596: LIST
40597: LIST
40598: PUSH
40599: LD_INT 2
40601: PUSH
40602: LD_INT 1
40604: NEG
40605: PUSH
40606: EMPTY
40607: LIST
40608: LIST
40609: PUSH
40610: LD_INT 3
40612: PUSH
40613: LD_INT 1
40615: PUSH
40616: EMPTY
40617: LIST
40618: LIST
40619: PUSH
40620: LD_INT 1
40622: PUSH
40623: LD_INT 3
40625: PUSH
40626: EMPTY
40627: LIST
40628: LIST
40629: PUSH
40630: LD_INT 1
40632: NEG
40633: PUSH
40634: LD_INT 2
40636: PUSH
40637: EMPTY
40638: LIST
40639: LIST
40640: PUSH
40641: LD_INT 3
40643: NEG
40644: PUSH
40645: LD_INT 2
40647: NEG
40648: PUSH
40649: EMPTY
40650: LIST
40651: LIST
40652: PUSH
40653: EMPTY
40654: LIST
40655: LIST
40656: LIST
40657: LIST
40658: LIST
40659: LIST
40660: LIST
40661: LIST
40662: LIST
40663: LIST
40664: LIST
40665: LIST
40666: LIST
40667: LIST
40668: LIST
40669: LIST
40670: LIST
40671: LIST
40672: LIST
40673: LIST
40674: LIST
40675: LIST
40676: LIST
40677: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
40678: LD_ADDR_VAR 0 30
40682: PUSH
40683: LD_INT 0
40685: PUSH
40686: LD_INT 0
40688: PUSH
40689: EMPTY
40690: LIST
40691: LIST
40692: PUSH
40693: LD_INT 0
40695: PUSH
40696: LD_INT 1
40698: NEG
40699: PUSH
40700: EMPTY
40701: LIST
40702: LIST
40703: PUSH
40704: LD_INT 1
40706: PUSH
40707: LD_INT 0
40709: PUSH
40710: EMPTY
40711: LIST
40712: LIST
40713: PUSH
40714: LD_INT 1
40716: PUSH
40717: LD_INT 1
40719: PUSH
40720: EMPTY
40721: LIST
40722: LIST
40723: PUSH
40724: LD_INT 0
40726: PUSH
40727: LD_INT 1
40729: PUSH
40730: EMPTY
40731: LIST
40732: LIST
40733: PUSH
40734: LD_INT 1
40736: NEG
40737: PUSH
40738: LD_INT 0
40740: PUSH
40741: EMPTY
40742: LIST
40743: LIST
40744: PUSH
40745: LD_INT 1
40747: NEG
40748: PUSH
40749: LD_INT 1
40751: NEG
40752: PUSH
40753: EMPTY
40754: LIST
40755: LIST
40756: PUSH
40757: LD_INT 1
40759: NEG
40760: PUSH
40761: LD_INT 2
40763: NEG
40764: PUSH
40765: EMPTY
40766: LIST
40767: LIST
40768: PUSH
40769: LD_INT 0
40771: PUSH
40772: LD_INT 2
40774: NEG
40775: PUSH
40776: EMPTY
40777: LIST
40778: LIST
40779: PUSH
40780: LD_INT 1
40782: PUSH
40783: LD_INT 1
40785: NEG
40786: PUSH
40787: EMPTY
40788: LIST
40789: LIST
40790: PUSH
40791: LD_INT 2
40793: PUSH
40794: LD_INT 0
40796: PUSH
40797: EMPTY
40798: LIST
40799: LIST
40800: PUSH
40801: LD_INT 2
40803: PUSH
40804: LD_INT 1
40806: PUSH
40807: EMPTY
40808: LIST
40809: LIST
40810: PUSH
40811: LD_INT 2
40813: PUSH
40814: LD_INT 2
40816: PUSH
40817: EMPTY
40818: LIST
40819: LIST
40820: PUSH
40821: LD_INT 1
40823: PUSH
40824: LD_INT 2
40826: PUSH
40827: EMPTY
40828: LIST
40829: LIST
40830: PUSH
40831: LD_INT 1
40833: NEG
40834: PUSH
40835: LD_INT 1
40837: PUSH
40838: EMPTY
40839: LIST
40840: LIST
40841: PUSH
40842: LD_INT 2
40844: NEG
40845: PUSH
40846: LD_INT 0
40848: PUSH
40849: EMPTY
40850: LIST
40851: LIST
40852: PUSH
40853: LD_INT 2
40855: NEG
40856: PUSH
40857: LD_INT 1
40859: NEG
40860: PUSH
40861: EMPTY
40862: LIST
40863: LIST
40864: PUSH
40865: LD_INT 1
40867: NEG
40868: PUSH
40869: LD_INT 3
40871: NEG
40872: PUSH
40873: EMPTY
40874: LIST
40875: LIST
40876: PUSH
40877: LD_INT 1
40879: PUSH
40880: LD_INT 2
40882: NEG
40883: PUSH
40884: EMPTY
40885: LIST
40886: LIST
40887: PUSH
40888: LD_INT 3
40890: PUSH
40891: LD_INT 2
40893: PUSH
40894: EMPTY
40895: LIST
40896: LIST
40897: PUSH
40898: LD_INT 2
40900: PUSH
40901: LD_INT 3
40903: PUSH
40904: EMPTY
40905: LIST
40906: LIST
40907: PUSH
40908: LD_INT 2
40910: NEG
40911: PUSH
40912: LD_INT 1
40914: PUSH
40915: EMPTY
40916: LIST
40917: LIST
40918: PUSH
40919: LD_INT 3
40921: NEG
40922: PUSH
40923: LD_INT 1
40925: NEG
40926: PUSH
40927: EMPTY
40928: LIST
40929: LIST
40930: PUSH
40931: EMPTY
40932: LIST
40933: LIST
40934: LIST
40935: LIST
40936: LIST
40937: LIST
40938: LIST
40939: LIST
40940: LIST
40941: LIST
40942: LIST
40943: LIST
40944: LIST
40945: LIST
40946: LIST
40947: LIST
40948: LIST
40949: LIST
40950: LIST
40951: LIST
40952: LIST
40953: LIST
40954: LIST
40955: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
40956: LD_ADDR_VAR 0 31
40960: PUSH
40961: LD_INT 0
40963: PUSH
40964: LD_INT 0
40966: PUSH
40967: EMPTY
40968: LIST
40969: LIST
40970: PUSH
40971: LD_INT 0
40973: PUSH
40974: LD_INT 1
40976: NEG
40977: PUSH
40978: EMPTY
40979: LIST
40980: LIST
40981: PUSH
40982: LD_INT 1
40984: PUSH
40985: LD_INT 0
40987: PUSH
40988: EMPTY
40989: LIST
40990: LIST
40991: PUSH
40992: LD_INT 1
40994: PUSH
40995: LD_INT 1
40997: PUSH
40998: EMPTY
40999: LIST
41000: LIST
41001: PUSH
41002: LD_INT 0
41004: PUSH
41005: LD_INT 1
41007: PUSH
41008: EMPTY
41009: LIST
41010: LIST
41011: PUSH
41012: LD_INT 1
41014: NEG
41015: PUSH
41016: LD_INT 0
41018: PUSH
41019: EMPTY
41020: LIST
41021: LIST
41022: PUSH
41023: LD_INT 1
41025: NEG
41026: PUSH
41027: LD_INT 1
41029: NEG
41030: PUSH
41031: EMPTY
41032: LIST
41033: LIST
41034: PUSH
41035: LD_INT 1
41037: NEG
41038: PUSH
41039: LD_INT 2
41041: NEG
41042: PUSH
41043: EMPTY
41044: LIST
41045: LIST
41046: PUSH
41047: LD_INT 1
41049: PUSH
41050: LD_INT 1
41052: NEG
41053: PUSH
41054: EMPTY
41055: LIST
41056: LIST
41057: PUSH
41058: LD_INT 2
41060: PUSH
41061: LD_INT 0
41063: PUSH
41064: EMPTY
41065: LIST
41066: LIST
41067: PUSH
41068: LD_INT 2
41070: PUSH
41071: LD_INT 1
41073: PUSH
41074: EMPTY
41075: LIST
41076: LIST
41077: PUSH
41078: LD_INT 2
41080: PUSH
41081: LD_INT 2
41083: PUSH
41084: EMPTY
41085: LIST
41086: LIST
41087: PUSH
41088: LD_INT 1
41090: PUSH
41091: LD_INT 2
41093: PUSH
41094: EMPTY
41095: LIST
41096: LIST
41097: PUSH
41098: LD_INT 0
41100: PUSH
41101: LD_INT 2
41103: PUSH
41104: EMPTY
41105: LIST
41106: LIST
41107: PUSH
41108: LD_INT 1
41110: NEG
41111: PUSH
41112: LD_INT 1
41114: PUSH
41115: EMPTY
41116: LIST
41117: LIST
41118: PUSH
41119: LD_INT 2
41121: NEG
41122: PUSH
41123: LD_INT 1
41125: NEG
41126: PUSH
41127: EMPTY
41128: LIST
41129: LIST
41130: PUSH
41131: LD_INT 2
41133: NEG
41134: PUSH
41135: LD_INT 2
41137: NEG
41138: PUSH
41139: EMPTY
41140: LIST
41141: LIST
41142: PUSH
41143: LD_INT 2
41145: NEG
41146: PUSH
41147: LD_INT 3
41149: NEG
41150: PUSH
41151: EMPTY
41152: LIST
41153: LIST
41154: PUSH
41155: LD_INT 2
41157: PUSH
41158: LD_INT 1
41160: NEG
41161: PUSH
41162: EMPTY
41163: LIST
41164: LIST
41165: PUSH
41166: LD_INT 3
41168: PUSH
41169: LD_INT 1
41171: PUSH
41172: EMPTY
41173: LIST
41174: LIST
41175: PUSH
41176: LD_INT 1
41178: PUSH
41179: LD_INT 3
41181: PUSH
41182: EMPTY
41183: LIST
41184: LIST
41185: PUSH
41186: LD_INT 1
41188: NEG
41189: PUSH
41190: LD_INT 2
41192: PUSH
41193: EMPTY
41194: LIST
41195: LIST
41196: PUSH
41197: LD_INT 3
41199: NEG
41200: PUSH
41201: LD_INT 2
41203: NEG
41204: PUSH
41205: EMPTY
41206: LIST
41207: LIST
41208: PUSH
41209: EMPTY
41210: LIST
41211: LIST
41212: LIST
41213: LIST
41214: LIST
41215: LIST
41216: LIST
41217: LIST
41218: LIST
41219: LIST
41220: LIST
41221: LIST
41222: LIST
41223: LIST
41224: LIST
41225: LIST
41226: LIST
41227: LIST
41228: LIST
41229: LIST
41230: LIST
41231: LIST
41232: LIST
41233: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
41234: LD_ADDR_VAR 0 32
41238: PUSH
41239: LD_INT 0
41241: PUSH
41242: LD_INT 0
41244: PUSH
41245: EMPTY
41246: LIST
41247: LIST
41248: PUSH
41249: LD_INT 0
41251: PUSH
41252: LD_INT 1
41254: NEG
41255: PUSH
41256: EMPTY
41257: LIST
41258: LIST
41259: PUSH
41260: LD_INT 1
41262: PUSH
41263: LD_INT 0
41265: PUSH
41266: EMPTY
41267: LIST
41268: LIST
41269: PUSH
41270: LD_INT 1
41272: PUSH
41273: LD_INT 1
41275: PUSH
41276: EMPTY
41277: LIST
41278: LIST
41279: PUSH
41280: LD_INT 0
41282: PUSH
41283: LD_INT 1
41285: PUSH
41286: EMPTY
41287: LIST
41288: LIST
41289: PUSH
41290: LD_INT 1
41292: NEG
41293: PUSH
41294: LD_INT 0
41296: PUSH
41297: EMPTY
41298: LIST
41299: LIST
41300: PUSH
41301: LD_INT 1
41303: NEG
41304: PUSH
41305: LD_INT 1
41307: NEG
41308: PUSH
41309: EMPTY
41310: LIST
41311: LIST
41312: PUSH
41313: LD_INT 1
41315: NEG
41316: PUSH
41317: LD_INT 2
41319: NEG
41320: PUSH
41321: EMPTY
41322: LIST
41323: LIST
41324: PUSH
41325: LD_INT 0
41327: PUSH
41328: LD_INT 2
41330: NEG
41331: PUSH
41332: EMPTY
41333: LIST
41334: LIST
41335: PUSH
41336: LD_INT 1
41338: PUSH
41339: LD_INT 1
41341: NEG
41342: PUSH
41343: EMPTY
41344: LIST
41345: LIST
41346: PUSH
41347: LD_INT 2
41349: PUSH
41350: LD_INT 1
41352: PUSH
41353: EMPTY
41354: LIST
41355: LIST
41356: PUSH
41357: LD_INT 2
41359: PUSH
41360: LD_INT 2
41362: PUSH
41363: EMPTY
41364: LIST
41365: LIST
41366: PUSH
41367: LD_INT 1
41369: PUSH
41370: LD_INT 2
41372: PUSH
41373: EMPTY
41374: LIST
41375: LIST
41376: PUSH
41377: LD_INT 0
41379: PUSH
41380: LD_INT 2
41382: PUSH
41383: EMPTY
41384: LIST
41385: LIST
41386: PUSH
41387: LD_INT 1
41389: NEG
41390: PUSH
41391: LD_INT 1
41393: PUSH
41394: EMPTY
41395: LIST
41396: LIST
41397: PUSH
41398: LD_INT 2
41400: NEG
41401: PUSH
41402: LD_INT 0
41404: PUSH
41405: EMPTY
41406: LIST
41407: LIST
41408: PUSH
41409: LD_INT 2
41411: NEG
41412: PUSH
41413: LD_INT 1
41415: NEG
41416: PUSH
41417: EMPTY
41418: LIST
41419: LIST
41420: PUSH
41421: LD_INT 1
41423: NEG
41424: PUSH
41425: LD_INT 3
41427: NEG
41428: PUSH
41429: EMPTY
41430: LIST
41431: LIST
41432: PUSH
41433: LD_INT 1
41435: PUSH
41436: LD_INT 2
41438: NEG
41439: PUSH
41440: EMPTY
41441: LIST
41442: LIST
41443: PUSH
41444: LD_INT 3
41446: PUSH
41447: LD_INT 2
41449: PUSH
41450: EMPTY
41451: LIST
41452: LIST
41453: PUSH
41454: LD_INT 2
41456: PUSH
41457: LD_INT 3
41459: PUSH
41460: EMPTY
41461: LIST
41462: LIST
41463: PUSH
41464: LD_INT 2
41466: NEG
41467: PUSH
41468: LD_INT 1
41470: PUSH
41471: EMPTY
41472: LIST
41473: LIST
41474: PUSH
41475: LD_INT 3
41477: NEG
41478: PUSH
41479: LD_INT 1
41481: NEG
41482: PUSH
41483: EMPTY
41484: LIST
41485: LIST
41486: PUSH
41487: EMPTY
41488: LIST
41489: LIST
41490: LIST
41491: LIST
41492: LIST
41493: LIST
41494: LIST
41495: LIST
41496: LIST
41497: LIST
41498: LIST
41499: LIST
41500: LIST
41501: LIST
41502: LIST
41503: LIST
41504: LIST
41505: LIST
41506: LIST
41507: LIST
41508: LIST
41509: LIST
41510: LIST
41511: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
41512: LD_ADDR_VAR 0 33
41516: PUSH
41517: LD_INT 0
41519: PUSH
41520: LD_INT 0
41522: PUSH
41523: EMPTY
41524: LIST
41525: LIST
41526: PUSH
41527: LD_INT 0
41529: PUSH
41530: LD_INT 1
41532: NEG
41533: PUSH
41534: EMPTY
41535: LIST
41536: LIST
41537: PUSH
41538: LD_INT 1
41540: PUSH
41541: LD_INT 0
41543: PUSH
41544: EMPTY
41545: LIST
41546: LIST
41547: PUSH
41548: LD_INT 1
41550: PUSH
41551: LD_INT 1
41553: PUSH
41554: EMPTY
41555: LIST
41556: LIST
41557: PUSH
41558: LD_INT 0
41560: PUSH
41561: LD_INT 1
41563: PUSH
41564: EMPTY
41565: LIST
41566: LIST
41567: PUSH
41568: LD_INT 1
41570: NEG
41571: PUSH
41572: LD_INT 0
41574: PUSH
41575: EMPTY
41576: LIST
41577: LIST
41578: PUSH
41579: LD_INT 1
41581: NEG
41582: PUSH
41583: LD_INT 1
41585: NEG
41586: PUSH
41587: EMPTY
41588: LIST
41589: LIST
41590: PUSH
41591: LD_INT 1
41593: NEG
41594: PUSH
41595: LD_INT 2
41597: NEG
41598: PUSH
41599: EMPTY
41600: LIST
41601: LIST
41602: PUSH
41603: LD_INT 1
41605: PUSH
41606: LD_INT 1
41608: NEG
41609: PUSH
41610: EMPTY
41611: LIST
41612: LIST
41613: PUSH
41614: LD_INT 2
41616: PUSH
41617: LD_INT 0
41619: PUSH
41620: EMPTY
41621: LIST
41622: LIST
41623: PUSH
41624: LD_INT 2
41626: PUSH
41627: LD_INT 1
41629: PUSH
41630: EMPTY
41631: LIST
41632: LIST
41633: PUSH
41634: LD_INT 1
41636: PUSH
41637: LD_INT 2
41639: PUSH
41640: EMPTY
41641: LIST
41642: LIST
41643: PUSH
41644: LD_INT 0
41646: PUSH
41647: LD_INT 2
41649: PUSH
41650: EMPTY
41651: LIST
41652: LIST
41653: PUSH
41654: LD_INT 1
41656: NEG
41657: PUSH
41658: LD_INT 1
41660: PUSH
41661: EMPTY
41662: LIST
41663: LIST
41664: PUSH
41665: LD_INT 2
41667: NEG
41668: PUSH
41669: LD_INT 0
41671: PUSH
41672: EMPTY
41673: LIST
41674: LIST
41675: PUSH
41676: LD_INT 2
41678: NEG
41679: PUSH
41680: LD_INT 1
41682: NEG
41683: PUSH
41684: EMPTY
41685: LIST
41686: LIST
41687: PUSH
41688: LD_INT 2
41690: NEG
41691: PUSH
41692: LD_INT 2
41694: NEG
41695: PUSH
41696: EMPTY
41697: LIST
41698: LIST
41699: PUSH
41700: LD_INT 2
41702: NEG
41703: PUSH
41704: LD_INT 3
41706: NEG
41707: PUSH
41708: EMPTY
41709: LIST
41710: LIST
41711: PUSH
41712: LD_INT 2
41714: PUSH
41715: LD_INT 1
41717: NEG
41718: PUSH
41719: EMPTY
41720: LIST
41721: LIST
41722: PUSH
41723: LD_INT 3
41725: PUSH
41726: LD_INT 1
41728: PUSH
41729: EMPTY
41730: LIST
41731: LIST
41732: PUSH
41733: LD_INT 1
41735: PUSH
41736: LD_INT 3
41738: PUSH
41739: EMPTY
41740: LIST
41741: LIST
41742: PUSH
41743: LD_INT 1
41745: NEG
41746: PUSH
41747: LD_INT 2
41749: PUSH
41750: EMPTY
41751: LIST
41752: LIST
41753: PUSH
41754: LD_INT 3
41756: NEG
41757: PUSH
41758: LD_INT 2
41760: NEG
41761: PUSH
41762: EMPTY
41763: LIST
41764: LIST
41765: PUSH
41766: EMPTY
41767: LIST
41768: LIST
41769: LIST
41770: LIST
41771: LIST
41772: LIST
41773: LIST
41774: LIST
41775: LIST
41776: LIST
41777: LIST
41778: LIST
41779: LIST
41780: LIST
41781: LIST
41782: LIST
41783: LIST
41784: LIST
41785: LIST
41786: LIST
41787: LIST
41788: LIST
41789: LIST
41790: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
41791: LD_ADDR_VAR 0 34
41795: PUSH
41796: LD_INT 0
41798: PUSH
41799: LD_INT 0
41801: PUSH
41802: EMPTY
41803: LIST
41804: LIST
41805: PUSH
41806: LD_INT 0
41808: PUSH
41809: LD_INT 1
41811: NEG
41812: PUSH
41813: EMPTY
41814: LIST
41815: LIST
41816: PUSH
41817: LD_INT 1
41819: PUSH
41820: LD_INT 0
41822: PUSH
41823: EMPTY
41824: LIST
41825: LIST
41826: PUSH
41827: LD_INT 1
41829: PUSH
41830: LD_INT 1
41832: PUSH
41833: EMPTY
41834: LIST
41835: LIST
41836: PUSH
41837: LD_INT 0
41839: PUSH
41840: LD_INT 1
41842: PUSH
41843: EMPTY
41844: LIST
41845: LIST
41846: PUSH
41847: LD_INT 1
41849: NEG
41850: PUSH
41851: LD_INT 0
41853: PUSH
41854: EMPTY
41855: LIST
41856: LIST
41857: PUSH
41858: LD_INT 1
41860: NEG
41861: PUSH
41862: LD_INT 1
41864: NEG
41865: PUSH
41866: EMPTY
41867: LIST
41868: LIST
41869: PUSH
41870: LD_INT 1
41872: NEG
41873: PUSH
41874: LD_INT 2
41876: NEG
41877: PUSH
41878: EMPTY
41879: LIST
41880: LIST
41881: PUSH
41882: LD_INT 0
41884: PUSH
41885: LD_INT 2
41887: NEG
41888: PUSH
41889: EMPTY
41890: LIST
41891: LIST
41892: PUSH
41893: LD_INT 1
41895: PUSH
41896: LD_INT 1
41898: NEG
41899: PUSH
41900: EMPTY
41901: LIST
41902: LIST
41903: PUSH
41904: LD_INT 2
41906: PUSH
41907: LD_INT 1
41909: PUSH
41910: EMPTY
41911: LIST
41912: LIST
41913: PUSH
41914: LD_INT 2
41916: PUSH
41917: LD_INT 2
41919: PUSH
41920: EMPTY
41921: LIST
41922: LIST
41923: PUSH
41924: LD_INT 1
41926: PUSH
41927: LD_INT 2
41929: PUSH
41930: EMPTY
41931: LIST
41932: LIST
41933: PUSH
41934: LD_INT 1
41936: NEG
41937: PUSH
41938: LD_INT 1
41940: PUSH
41941: EMPTY
41942: LIST
41943: LIST
41944: PUSH
41945: LD_INT 2
41947: NEG
41948: PUSH
41949: LD_INT 0
41951: PUSH
41952: EMPTY
41953: LIST
41954: LIST
41955: PUSH
41956: LD_INT 2
41958: NEG
41959: PUSH
41960: LD_INT 1
41962: NEG
41963: PUSH
41964: EMPTY
41965: LIST
41966: LIST
41967: PUSH
41968: LD_INT 2
41970: NEG
41971: PUSH
41972: LD_INT 2
41974: NEG
41975: PUSH
41976: EMPTY
41977: LIST
41978: LIST
41979: PUSH
41980: LD_INT 1
41982: NEG
41983: PUSH
41984: LD_INT 3
41986: NEG
41987: PUSH
41988: EMPTY
41989: LIST
41990: LIST
41991: PUSH
41992: LD_INT 1
41994: PUSH
41995: LD_INT 2
41997: NEG
41998: PUSH
41999: EMPTY
42000: LIST
42001: LIST
42002: PUSH
42003: LD_INT 3
42005: PUSH
42006: LD_INT 2
42008: PUSH
42009: EMPTY
42010: LIST
42011: LIST
42012: PUSH
42013: LD_INT 2
42015: PUSH
42016: LD_INT 3
42018: PUSH
42019: EMPTY
42020: LIST
42021: LIST
42022: PUSH
42023: LD_INT 2
42025: NEG
42026: PUSH
42027: LD_INT 1
42029: PUSH
42030: EMPTY
42031: LIST
42032: LIST
42033: PUSH
42034: LD_INT 3
42036: NEG
42037: PUSH
42038: LD_INT 1
42040: NEG
42041: PUSH
42042: EMPTY
42043: LIST
42044: LIST
42045: PUSH
42046: EMPTY
42047: LIST
42048: LIST
42049: LIST
42050: LIST
42051: LIST
42052: LIST
42053: LIST
42054: LIST
42055: LIST
42056: LIST
42057: LIST
42058: LIST
42059: LIST
42060: LIST
42061: LIST
42062: LIST
42063: LIST
42064: LIST
42065: LIST
42066: LIST
42067: LIST
42068: LIST
42069: LIST
42070: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
42071: LD_ADDR_VAR 0 35
42075: PUSH
42076: LD_INT 0
42078: PUSH
42079: LD_INT 0
42081: PUSH
42082: EMPTY
42083: LIST
42084: LIST
42085: PUSH
42086: LD_INT 0
42088: PUSH
42089: LD_INT 1
42091: NEG
42092: PUSH
42093: EMPTY
42094: LIST
42095: LIST
42096: PUSH
42097: LD_INT 1
42099: PUSH
42100: LD_INT 0
42102: PUSH
42103: EMPTY
42104: LIST
42105: LIST
42106: PUSH
42107: LD_INT 1
42109: PUSH
42110: LD_INT 1
42112: PUSH
42113: EMPTY
42114: LIST
42115: LIST
42116: PUSH
42117: LD_INT 0
42119: PUSH
42120: LD_INT 1
42122: PUSH
42123: EMPTY
42124: LIST
42125: LIST
42126: PUSH
42127: LD_INT 1
42129: NEG
42130: PUSH
42131: LD_INT 0
42133: PUSH
42134: EMPTY
42135: LIST
42136: LIST
42137: PUSH
42138: LD_INT 1
42140: NEG
42141: PUSH
42142: LD_INT 1
42144: NEG
42145: PUSH
42146: EMPTY
42147: LIST
42148: LIST
42149: PUSH
42150: LD_INT 2
42152: PUSH
42153: LD_INT 1
42155: PUSH
42156: EMPTY
42157: LIST
42158: LIST
42159: PUSH
42160: LD_INT 2
42162: NEG
42163: PUSH
42164: LD_INT 1
42166: NEG
42167: PUSH
42168: EMPTY
42169: LIST
42170: LIST
42171: PUSH
42172: EMPTY
42173: LIST
42174: LIST
42175: LIST
42176: LIST
42177: LIST
42178: LIST
42179: LIST
42180: LIST
42181: LIST
42182: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
42183: LD_ADDR_VAR 0 36
42187: PUSH
42188: LD_INT 0
42190: PUSH
42191: LD_INT 0
42193: PUSH
42194: EMPTY
42195: LIST
42196: LIST
42197: PUSH
42198: LD_INT 0
42200: PUSH
42201: LD_INT 1
42203: NEG
42204: PUSH
42205: EMPTY
42206: LIST
42207: LIST
42208: PUSH
42209: LD_INT 1
42211: PUSH
42212: LD_INT 0
42214: PUSH
42215: EMPTY
42216: LIST
42217: LIST
42218: PUSH
42219: LD_INT 1
42221: PUSH
42222: LD_INT 1
42224: PUSH
42225: EMPTY
42226: LIST
42227: LIST
42228: PUSH
42229: LD_INT 0
42231: PUSH
42232: LD_INT 1
42234: PUSH
42235: EMPTY
42236: LIST
42237: LIST
42238: PUSH
42239: LD_INT 1
42241: NEG
42242: PUSH
42243: LD_INT 0
42245: PUSH
42246: EMPTY
42247: LIST
42248: LIST
42249: PUSH
42250: LD_INT 1
42252: NEG
42253: PUSH
42254: LD_INT 1
42256: NEG
42257: PUSH
42258: EMPTY
42259: LIST
42260: LIST
42261: PUSH
42262: LD_INT 1
42264: NEG
42265: PUSH
42266: LD_INT 2
42268: NEG
42269: PUSH
42270: EMPTY
42271: LIST
42272: LIST
42273: PUSH
42274: LD_INT 1
42276: PUSH
42277: LD_INT 2
42279: PUSH
42280: EMPTY
42281: LIST
42282: LIST
42283: PUSH
42284: EMPTY
42285: LIST
42286: LIST
42287: LIST
42288: LIST
42289: LIST
42290: LIST
42291: LIST
42292: LIST
42293: LIST
42294: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
42295: LD_ADDR_VAR 0 37
42299: PUSH
42300: LD_INT 0
42302: PUSH
42303: LD_INT 0
42305: PUSH
42306: EMPTY
42307: LIST
42308: LIST
42309: PUSH
42310: LD_INT 0
42312: PUSH
42313: LD_INT 1
42315: NEG
42316: PUSH
42317: EMPTY
42318: LIST
42319: LIST
42320: PUSH
42321: LD_INT 1
42323: PUSH
42324: LD_INT 0
42326: PUSH
42327: EMPTY
42328: LIST
42329: LIST
42330: PUSH
42331: LD_INT 1
42333: PUSH
42334: LD_INT 1
42336: PUSH
42337: EMPTY
42338: LIST
42339: LIST
42340: PUSH
42341: LD_INT 0
42343: PUSH
42344: LD_INT 1
42346: PUSH
42347: EMPTY
42348: LIST
42349: LIST
42350: PUSH
42351: LD_INT 1
42353: NEG
42354: PUSH
42355: LD_INT 0
42357: PUSH
42358: EMPTY
42359: LIST
42360: LIST
42361: PUSH
42362: LD_INT 1
42364: NEG
42365: PUSH
42366: LD_INT 1
42368: NEG
42369: PUSH
42370: EMPTY
42371: LIST
42372: LIST
42373: PUSH
42374: LD_INT 1
42376: PUSH
42377: LD_INT 1
42379: NEG
42380: PUSH
42381: EMPTY
42382: LIST
42383: LIST
42384: PUSH
42385: LD_INT 1
42387: NEG
42388: PUSH
42389: LD_INT 1
42391: PUSH
42392: EMPTY
42393: LIST
42394: LIST
42395: PUSH
42396: EMPTY
42397: LIST
42398: LIST
42399: LIST
42400: LIST
42401: LIST
42402: LIST
42403: LIST
42404: LIST
42405: LIST
42406: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
42407: LD_ADDR_VAR 0 38
42411: PUSH
42412: LD_INT 0
42414: PUSH
42415: LD_INT 0
42417: PUSH
42418: EMPTY
42419: LIST
42420: LIST
42421: PUSH
42422: LD_INT 0
42424: PUSH
42425: LD_INT 1
42427: NEG
42428: PUSH
42429: EMPTY
42430: LIST
42431: LIST
42432: PUSH
42433: LD_INT 1
42435: PUSH
42436: LD_INT 0
42438: PUSH
42439: EMPTY
42440: LIST
42441: LIST
42442: PUSH
42443: LD_INT 1
42445: PUSH
42446: LD_INT 1
42448: PUSH
42449: EMPTY
42450: LIST
42451: LIST
42452: PUSH
42453: LD_INT 0
42455: PUSH
42456: LD_INT 1
42458: PUSH
42459: EMPTY
42460: LIST
42461: LIST
42462: PUSH
42463: LD_INT 1
42465: NEG
42466: PUSH
42467: LD_INT 0
42469: PUSH
42470: EMPTY
42471: LIST
42472: LIST
42473: PUSH
42474: LD_INT 1
42476: NEG
42477: PUSH
42478: LD_INT 1
42480: NEG
42481: PUSH
42482: EMPTY
42483: LIST
42484: LIST
42485: PUSH
42486: LD_INT 2
42488: PUSH
42489: LD_INT 1
42491: PUSH
42492: EMPTY
42493: LIST
42494: LIST
42495: PUSH
42496: LD_INT 2
42498: NEG
42499: PUSH
42500: LD_INT 1
42502: NEG
42503: PUSH
42504: EMPTY
42505: LIST
42506: LIST
42507: PUSH
42508: EMPTY
42509: LIST
42510: LIST
42511: LIST
42512: LIST
42513: LIST
42514: LIST
42515: LIST
42516: LIST
42517: LIST
42518: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
42519: LD_ADDR_VAR 0 39
42523: PUSH
42524: LD_INT 0
42526: PUSH
42527: LD_INT 0
42529: PUSH
42530: EMPTY
42531: LIST
42532: LIST
42533: PUSH
42534: LD_INT 0
42536: PUSH
42537: LD_INT 1
42539: NEG
42540: PUSH
42541: EMPTY
42542: LIST
42543: LIST
42544: PUSH
42545: LD_INT 1
42547: PUSH
42548: LD_INT 0
42550: PUSH
42551: EMPTY
42552: LIST
42553: LIST
42554: PUSH
42555: LD_INT 1
42557: PUSH
42558: LD_INT 1
42560: PUSH
42561: EMPTY
42562: LIST
42563: LIST
42564: PUSH
42565: LD_INT 0
42567: PUSH
42568: LD_INT 1
42570: PUSH
42571: EMPTY
42572: LIST
42573: LIST
42574: PUSH
42575: LD_INT 1
42577: NEG
42578: PUSH
42579: LD_INT 0
42581: PUSH
42582: EMPTY
42583: LIST
42584: LIST
42585: PUSH
42586: LD_INT 1
42588: NEG
42589: PUSH
42590: LD_INT 1
42592: NEG
42593: PUSH
42594: EMPTY
42595: LIST
42596: LIST
42597: PUSH
42598: LD_INT 1
42600: NEG
42601: PUSH
42602: LD_INT 2
42604: NEG
42605: PUSH
42606: EMPTY
42607: LIST
42608: LIST
42609: PUSH
42610: LD_INT 1
42612: PUSH
42613: LD_INT 2
42615: PUSH
42616: EMPTY
42617: LIST
42618: LIST
42619: PUSH
42620: EMPTY
42621: LIST
42622: LIST
42623: LIST
42624: LIST
42625: LIST
42626: LIST
42627: LIST
42628: LIST
42629: LIST
42630: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
42631: LD_ADDR_VAR 0 40
42635: PUSH
42636: LD_INT 0
42638: PUSH
42639: LD_INT 0
42641: PUSH
42642: EMPTY
42643: LIST
42644: LIST
42645: PUSH
42646: LD_INT 0
42648: PUSH
42649: LD_INT 1
42651: NEG
42652: PUSH
42653: EMPTY
42654: LIST
42655: LIST
42656: PUSH
42657: LD_INT 1
42659: PUSH
42660: LD_INT 0
42662: PUSH
42663: EMPTY
42664: LIST
42665: LIST
42666: PUSH
42667: LD_INT 1
42669: PUSH
42670: LD_INT 1
42672: PUSH
42673: EMPTY
42674: LIST
42675: LIST
42676: PUSH
42677: LD_INT 0
42679: PUSH
42680: LD_INT 1
42682: PUSH
42683: EMPTY
42684: LIST
42685: LIST
42686: PUSH
42687: LD_INT 1
42689: NEG
42690: PUSH
42691: LD_INT 0
42693: PUSH
42694: EMPTY
42695: LIST
42696: LIST
42697: PUSH
42698: LD_INT 1
42700: NEG
42701: PUSH
42702: LD_INT 1
42704: NEG
42705: PUSH
42706: EMPTY
42707: LIST
42708: LIST
42709: PUSH
42710: LD_INT 1
42712: PUSH
42713: LD_INT 1
42715: NEG
42716: PUSH
42717: EMPTY
42718: LIST
42719: LIST
42720: PUSH
42721: LD_INT 1
42723: NEG
42724: PUSH
42725: LD_INT 1
42727: PUSH
42728: EMPTY
42729: LIST
42730: LIST
42731: PUSH
42732: EMPTY
42733: LIST
42734: LIST
42735: LIST
42736: LIST
42737: LIST
42738: LIST
42739: LIST
42740: LIST
42741: LIST
42742: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42743: LD_ADDR_VAR 0 41
42747: PUSH
42748: LD_INT 0
42750: PUSH
42751: LD_INT 0
42753: PUSH
42754: EMPTY
42755: LIST
42756: LIST
42757: PUSH
42758: LD_INT 0
42760: PUSH
42761: LD_INT 1
42763: NEG
42764: PUSH
42765: EMPTY
42766: LIST
42767: LIST
42768: PUSH
42769: LD_INT 1
42771: PUSH
42772: LD_INT 0
42774: PUSH
42775: EMPTY
42776: LIST
42777: LIST
42778: PUSH
42779: LD_INT 1
42781: PUSH
42782: LD_INT 1
42784: PUSH
42785: EMPTY
42786: LIST
42787: LIST
42788: PUSH
42789: LD_INT 0
42791: PUSH
42792: LD_INT 1
42794: PUSH
42795: EMPTY
42796: LIST
42797: LIST
42798: PUSH
42799: LD_INT 1
42801: NEG
42802: PUSH
42803: LD_INT 0
42805: PUSH
42806: EMPTY
42807: LIST
42808: LIST
42809: PUSH
42810: LD_INT 1
42812: NEG
42813: PUSH
42814: LD_INT 1
42816: NEG
42817: PUSH
42818: EMPTY
42819: LIST
42820: LIST
42821: PUSH
42822: LD_INT 1
42824: NEG
42825: PUSH
42826: LD_INT 2
42828: NEG
42829: PUSH
42830: EMPTY
42831: LIST
42832: LIST
42833: PUSH
42834: LD_INT 1
42836: PUSH
42837: LD_INT 1
42839: NEG
42840: PUSH
42841: EMPTY
42842: LIST
42843: LIST
42844: PUSH
42845: LD_INT 2
42847: PUSH
42848: LD_INT 0
42850: PUSH
42851: EMPTY
42852: LIST
42853: LIST
42854: PUSH
42855: LD_INT 2
42857: PUSH
42858: LD_INT 1
42860: PUSH
42861: EMPTY
42862: LIST
42863: LIST
42864: PUSH
42865: LD_INT 2
42867: PUSH
42868: LD_INT 2
42870: PUSH
42871: EMPTY
42872: LIST
42873: LIST
42874: PUSH
42875: LD_INT 1
42877: PUSH
42878: LD_INT 2
42880: PUSH
42881: EMPTY
42882: LIST
42883: LIST
42884: PUSH
42885: LD_INT 1
42887: NEG
42888: PUSH
42889: LD_INT 1
42891: PUSH
42892: EMPTY
42893: LIST
42894: LIST
42895: PUSH
42896: LD_INT 2
42898: NEG
42899: PUSH
42900: LD_INT 0
42902: PUSH
42903: EMPTY
42904: LIST
42905: LIST
42906: PUSH
42907: LD_INT 2
42909: NEG
42910: PUSH
42911: LD_INT 1
42913: NEG
42914: PUSH
42915: EMPTY
42916: LIST
42917: LIST
42918: PUSH
42919: LD_INT 2
42921: NEG
42922: PUSH
42923: LD_INT 2
42925: NEG
42926: PUSH
42927: EMPTY
42928: LIST
42929: LIST
42930: PUSH
42931: LD_INT 2
42933: NEG
42934: PUSH
42935: LD_INT 3
42937: NEG
42938: PUSH
42939: EMPTY
42940: LIST
42941: LIST
42942: PUSH
42943: LD_INT 2
42945: PUSH
42946: LD_INT 1
42948: NEG
42949: PUSH
42950: EMPTY
42951: LIST
42952: LIST
42953: PUSH
42954: LD_INT 3
42956: PUSH
42957: LD_INT 0
42959: PUSH
42960: EMPTY
42961: LIST
42962: LIST
42963: PUSH
42964: LD_INT 3
42966: PUSH
42967: LD_INT 1
42969: PUSH
42970: EMPTY
42971: LIST
42972: LIST
42973: PUSH
42974: LD_INT 3
42976: PUSH
42977: LD_INT 2
42979: PUSH
42980: EMPTY
42981: LIST
42982: LIST
42983: PUSH
42984: LD_INT 3
42986: PUSH
42987: LD_INT 3
42989: PUSH
42990: EMPTY
42991: LIST
42992: LIST
42993: PUSH
42994: LD_INT 2
42996: PUSH
42997: LD_INT 3
42999: PUSH
43000: EMPTY
43001: LIST
43002: LIST
43003: PUSH
43004: LD_INT 2
43006: NEG
43007: PUSH
43008: LD_INT 1
43010: PUSH
43011: EMPTY
43012: LIST
43013: LIST
43014: PUSH
43015: LD_INT 3
43017: NEG
43018: PUSH
43019: LD_INT 0
43021: PUSH
43022: EMPTY
43023: LIST
43024: LIST
43025: PUSH
43026: LD_INT 3
43028: NEG
43029: PUSH
43030: LD_INT 1
43032: NEG
43033: PUSH
43034: EMPTY
43035: LIST
43036: LIST
43037: PUSH
43038: LD_INT 3
43040: NEG
43041: PUSH
43042: LD_INT 2
43044: NEG
43045: PUSH
43046: EMPTY
43047: LIST
43048: LIST
43049: PUSH
43050: LD_INT 3
43052: NEG
43053: PUSH
43054: LD_INT 3
43056: NEG
43057: PUSH
43058: EMPTY
43059: LIST
43060: LIST
43061: PUSH
43062: EMPTY
43063: LIST
43064: LIST
43065: LIST
43066: LIST
43067: LIST
43068: LIST
43069: LIST
43070: LIST
43071: LIST
43072: LIST
43073: LIST
43074: LIST
43075: LIST
43076: LIST
43077: LIST
43078: LIST
43079: LIST
43080: LIST
43081: LIST
43082: LIST
43083: LIST
43084: LIST
43085: LIST
43086: LIST
43087: LIST
43088: LIST
43089: LIST
43090: LIST
43091: LIST
43092: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43093: LD_ADDR_VAR 0 42
43097: PUSH
43098: LD_INT 0
43100: PUSH
43101: LD_INT 0
43103: PUSH
43104: EMPTY
43105: LIST
43106: LIST
43107: PUSH
43108: LD_INT 0
43110: PUSH
43111: LD_INT 1
43113: NEG
43114: PUSH
43115: EMPTY
43116: LIST
43117: LIST
43118: PUSH
43119: LD_INT 1
43121: PUSH
43122: LD_INT 0
43124: PUSH
43125: EMPTY
43126: LIST
43127: LIST
43128: PUSH
43129: LD_INT 1
43131: PUSH
43132: LD_INT 1
43134: PUSH
43135: EMPTY
43136: LIST
43137: LIST
43138: PUSH
43139: LD_INT 0
43141: PUSH
43142: LD_INT 1
43144: PUSH
43145: EMPTY
43146: LIST
43147: LIST
43148: PUSH
43149: LD_INT 1
43151: NEG
43152: PUSH
43153: LD_INT 0
43155: PUSH
43156: EMPTY
43157: LIST
43158: LIST
43159: PUSH
43160: LD_INT 1
43162: NEG
43163: PUSH
43164: LD_INT 1
43166: NEG
43167: PUSH
43168: EMPTY
43169: LIST
43170: LIST
43171: PUSH
43172: LD_INT 1
43174: NEG
43175: PUSH
43176: LD_INT 2
43178: NEG
43179: PUSH
43180: EMPTY
43181: LIST
43182: LIST
43183: PUSH
43184: LD_INT 0
43186: PUSH
43187: LD_INT 2
43189: NEG
43190: PUSH
43191: EMPTY
43192: LIST
43193: LIST
43194: PUSH
43195: LD_INT 1
43197: PUSH
43198: LD_INT 1
43200: NEG
43201: PUSH
43202: EMPTY
43203: LIST
43204: LIST
43205: PUSH
43206: LD_INT 2
43208: PUSH
43209: LD_INT 1
43211: PUSH
43212: EMPTY
43213: LIST
43214: LIST
43215: PUSH
43216: LD_INT 2
43218: PUSH
43219: LD_INT 2
43221: PUSH
43222: EMPTY
43223: LIST
43224: LIST
43225: PUSH
43226: LD_INT 1
43228: PUSH
43229: LD_INT 2
43231: PUSH
43232: EMPTY
43233: LIST
43234: LIST
43235: PUSH
43236: LD_INT 0
43238: PUSH
43239: LD_INT 2
43241: PUSH
43242: EMPTY
43243: LIST
43244: LIST
43245: PUSH
43246: LD_INT 1
43248: NEG
43249: PUSH
43250: LD_INT 1
43252: PUSH
43253: EMPTY
43254: LIST
43255: LIST
43256: PUSH
43257: LD_INT 2
43259: NEG
43260: PUSH
43261: LD_INT 1
43263: NEG
43264: PUSH
43265: EMPTY
43266: LIST
43267: LIST
43268: PUSH
43269: LD_INT 2
43271: NEG
43272: PUSH
43273: LD_INT 2
43275: NEG
43276: PUSH
43277: EMPTY
43278: LIST
43279: LIST
43280: PUSH
43281: LD_INT 2
43283: NEG
43284: PUSH
43285: LD_INT 3
43287: NEG
43288: PUSH
43289: EMPTY
43290: LIST
43291: LIST
43292: PUSH
43293: LD_INT 1
43295: NEG
43296: PUSH
43297: LD_INT 3
43299: NEG
43300: PUSH
43301: EMPTY
43302: LIST
43303: LIST
43304: PUSH
43305: LD_INT 0
43307: PUSH
43308: LD_INT 3
43310: NEG
43311: PUSH
43312: EMPTY
43313: LIST
43314: LIST
43315: PUSH
43316: LD_INT 1
43318: PUSH
43319: LD_INT 2
43321: NEG
43322: PUSH
43323: EMPTY
43324: LIST
43325: LIST
43326: PUSH
43327: LD_INT 3
43329: PUSH
43330: LD_INT 2
43332: PUSH
43333: EMPTY
43334: LIST
43335: LIST
43336: PUSH
43337: LD_INT 3
43339: PUSH
43340: LD_INT 3
43342: PUSH
43343: EMPTY
43344: LIST
43345: LIST
43346: PUSH
43347: LD_INT 2
43349: PUSH
43350: LD_INT 3
43352: PUSH
43353: EMPTY
43354: LIST
43355: LIST
43356: PUSH
43357: LD_INT 1
43359: PUSH
43360: LD_INT 3
43362: PUSH
43363: EMPTY
43364: LIST
43365: LIST
43366: PUSH
43367: LD_INT 0
43369: PUSH
43370: LD_INT 3
43372: PUSH
43373: EMPTY
43374: LIST
43375: LIST
43376: PUSH
43377: LD_INT 1
43379: NEG
43380: PUSH
43381: LD_INT 2
43383: PUSH
43384: EMPTY
43385: LIST
43386: LIST
43387: PUSH
43388: LD_INT 3
43390: NEG
43391: PUSH
43392: LD_INT 2
43394: NEG
43395: PUSH
43396: EMPTY
43397: LIST
43398: LIST
43399: PUSH
43400: LD_INT 3
43402: NEG
43403: PUSH
43404: LD_INT 3
43406: NEG
43407: PUSH
43408: EMPTY
43409: LIST
43410: LIST
43411: PUSH
43412: EMPTY
43413: LIST
43414: LIST
43415: LIST
43416: LIST
43417: LIST
43418: LIST
43419: LIST
43420: LIST
43421: LIST
43422: LIST
43423: LIST
43424: LIST
43425: LIST
43426: LIST
43427: LIST
43428: LIST
43429: LIST
43430: LIST
43431: LIST
43432: LIST
43433: LIST
43434: LIST
43435: LIST
43436: LIST
43437: LIST
43438: LIST
43439: LIST
43440: LIST
43441: LIST
43442: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
43443: LD_ADDR_VAR 0 43
43447: PUSH
43448: LD_INT 0
43450: PUSH
43451: LD_INT 0
43453: PUSH
43454: EMPTY
43455: LIST
43456: LIST
43457: PUSH
43458: LD_INT 0
43460: PUSH
43461: LD_INT 1
43463: NEG
43464: PUSH
43465: EMPTY
43466: LIST
43467: LIST
43468: PUSH
43469: LD_INT 1
43471: PUSH
43472: LD_INT 0
43474: PUSH
43475: EMPTY
43476: LIST
43477: LIST
43478: PUSH
43479: LD_INT 1
43481: PUSH
43482: LD_INT 1
43484: PUSH
43485: EMPTY
43486: LIST
43487: LIST
43488: PUSH
43489: LD_INT 0
43491: PUSH
43492: LD_INT 1
43494: PUSH
43495: EMPTY
43496: LIST
43497: LIST
43498: PUSH
43499: LD_INT 1
43501: NEG
43502: PUSH
43503: LD_INT 0
43505: PUSH
43506: EMPTY
43507: LIST
43508: LIST
43509: PUSH
43510: LD_INT 1
43512: NEG
43513: PUSH
43514: LD_INT 1
43516: NEG
43517: PUSH
43518: EMPTY
43519: LIST
43520: LIST
43521: PUSH
43522: LD_INT 1
43524: NEG
43525: PUSH
43526: LD_INT 2
43528: NEG
43529: PUSH
43530: EMPTY
43531: LIST
43532: LIST
43533: PUSH
43534: LD_INT 0
43536: PUSH
43537: LD_INT 2
43539: NEG
43540: PUSH
43541: EMPTY
43542: LIST
43543: LIST
43544: PUSH
43545: LD_INT 1
43547: PUSH
43548: LD_INT 1
43550: NEG
43551: PUSH
43552: EMPTY
43553: LIST
43554: LIST
43555: PUSH
43556: LD_INT 2
43558: PUSH
43559: LD_INT 0
43561: PUSH
43562: EMPTY
43563: LIST
43564: LIST
43565: PUSH
43566: LD_INT 2
43568: PUSH
43569: LD_INT 1
43571: PUSH
43572: EMPTY
43573: LIST
43574: LIST
43575: PUSH
43576: LD_INT 1
43578: PUSH
43579: LD_INT 2
43581: PUSH
43582: EMPTY
43583: LIST
43584: LIST
43585: PUSH
43586: LD_INT 0
43588: PUSH
43589: LD_INT 2
43591: PUSH
43592: EMPTY
43593: LIST
43594: LIST
43595: PUSH
43596: LD_INT 1
43598: NEG
43599: PUSH
43600: LD_INT 1
43602: PUSH
43603: EMPTY
43604: LIST
43605: LIST
43606: PUSH
43607: LD_INT 2
43609: NEG
43610: PUSH
43611: LD_INT 0
43613: PUSH
43614: EMPTY
43615: LIST
43616: LIST
43617: PUSH
43618: LD_INT 2
43620: NEG
43621: PUSH
43622: LD_INT 1
43624: NEG
43625: PUSH
43626: EMPTY
43627: LIST
43628: LIST
43629: PUSH
43630: LD_INT 1
43632: NEG
43633: PUSH
43634: LD_INT 3
43636: NEG
43637: PUSH
43638: EMPTY
43639: LIST
43640: LIST
43641: PUSH
43642: LD_INT 0
43644: PUSH
43645: LD_INT 3
43647: NEG
43648: PUSH
43649: EMPTY
43650: LIST
43651: LIST
43652: PUSH
43653: LD_INT 1
43655: PUSH
43656: LD_INT 2
43658: NEG
43659: PUSH
43660: EMPTY
43661: LIST
43662: LIST
43663: PUSH
43664: LD_INT 2
43666: PUSH
43667: LD_INT 1
43669: NEG
43670: PUSH
43671: EMPTY
43672: LIST
43673: LIST
43674: PUSH
43675: LD_INT 3
43677: PUSH
43678: LD_INT 0
43680: PUSH
43681: EMPTY
43682: LIST
43683: LIST
43684: PUSH
43685: LD_INT 3
43687: PUSH
43688: LD_INT 1
43690: PUSH
43691: EMPTY
43692: LIST
43693: LIST
43694: PUSH
43695: LD_INT 1
43697: PUSH
43698: LD_INT 3
43700: PUSH
43701: EMPTY
43702: LIST
43703: LIST
43704: PUSH
43705: LD_INT 0
43707: PUSH
43708: LD_INT 3
43710: PUSH
43711: EMPTY
43712: LIST
43713: LIST
43714: PUSH
43715: LD_INT 1
43717: NEG
43718: PUSH
43719: LD_INT 2
43721: PUSH
43722: EMPTY
43723: LIST
43724: LIST
43725: PUSH
43726: LD_INT 2
43728: NEG
43729: PUSH
43730: LD_INT 1
43732: PUSH
43733: EMPTY
43734: LIST
43735: LIST
43736: PUSH
43737: LD_INT 3
43739: NEG
43740: PUSH
43741: LD_INT 0
43743: PUSH
43744: EMPTY
43745: LIST
43746: LIST
43747: PUSH
43748: LD_INT 3
43750: NEG
43751: PUSH
43752: LD_INT 1
43754: NEG
43755: PUSH
43756: EMPTY
43757: LIST
43758: LIST
43759: PUSH
43760: EMPTY
43761: LIST
43762: LIST
43763: LIST
43764: LIST
43765: LIST
43766: LIST
43767: LIST
43768: LIST
43769: LIST
43770: LIST
43771: LIST
43772: LIST
43773: LIST
43774: LIST
43775: LIST
43776: LIST
43777: LIST
43778: LIST
43779: LIST
43780: LIST
43781: LIST
43782: LIST
43783: LIST
43784: LIST
43785: LIST
43786: LIST
43787: LIST
43788: LIST
43789: LIST
43790: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43791: LD_ADDR_VAR 0 44
43795: PUSH
43796: LD_INT 0
43798: PUSH
43799: LD_INT 0
43801: PUSH
43802: EMPTY
43803: LIST
43804: LIST
43805: PUSH
43806: LD_INT 0
43808: PUSH
43809: LD_INT 1
43811: NEG
43812: PUSH
43813: EMPTY
43814: LIST
43815: LIST
43816: PUSH
43817: LD_INT 1
43819: PUSH
43820: LD_INT 0
43822: PUSH
43823: EMPTY
43824: LIST
43825: LIST
43826: PUSH
43827: LD_INT 1
43829: PUSH
43830: LD_INT 1
43832: PUSH
43833: EMPTY
43834: LIST
43835: LIST
43836: PUSH
43837: LD_INT 0
43839: PUSH
43840: LD_INT 1
43842: PUSH
43843: EMPTY
43844: LIST
43845: LIST
43846: PUSH
43847: LD_INT 1
43849: NEG
43850: PUSH
43851: LD_INT 0
43853: PUSH
43854: EMPTY
43855: LIST
43856: LIST
43857: PUSH
43858: LD_INT 1
43860: NEG
43861: PUSH
43862: LD_INT 1
43864: NEG
43865: PUSH
43866: EMPTY
43867: LIST
43868: LIST
43869: PUSH
43870: LD_INT 1
43872: NEG
43873: PUSH
43874: LD_INT 2
43876: NEG
43877: PUSH
43878: EMPTY
43879: LIST
43880: LIST
43881: PUSH
43882: LD_INT 1
43884: PUSH
43885: LD_INT 1
43887: NEG
43888: PUSH
43889: EMPTY
43890: LIST
43891: LIST
43892: PUSH
43893: LD_INT 2
43895: PUSH
43896: LD_INT 0
43898: PUSH
43899: EMPTY
43900: LIST
43901: LIST
43902: PUSH
43903: LD_INT 2
43905: PUSH
43906: LD_INT 1
43908: PUSH
43909: EMPTY
43910: LIST
43911: LIST
43912: PUSH
43913: LD_INT 2
43915: PUSH
43916: LD_INT 2
43918: PUSH
43919: EMPTY
43920: LIST
43921: LIST
43922: PUSH
43923: LD_INT 1
43925: PUSH
43926: LD_INT 2
43928: PUSH
43929: EMPTY
43930: LIST
43931: LIST
43932: PUSH
43933: LD_INT 1
43935: NEG
43936: PUSH
43937: LD_INT 1
43939: PUSH
43940: EMPTY
43941: LIST
43942: LIST
43943: PUSH
43944: LD_INT 2
43946: NEG
43947: PUSH
43948: LD_INT 0
43950: PUSH
43951: EMPTY
43952: LIST
43953: LIST
43954: PUSH
43955: LD_INT 2
43957: NEG
43958: PUSH
43959: LD_INT 1
43961: NEG
43962: PUSH
43963: EMPTY
43964: LIST
43965: LIST
43966: PUSH
43967: LD_INT 2
43969: NEG
43970: PUSH
43971: LD_INT 2
43973: NEG
43974: PUSH
43975: EMPTY
43976: LIST
43977: LIST
43978: PUSH
43979: LD_INT 2
43981: NEG
43982: PUSH
43983: LD_INT 3
43985: NEG
43986: PUSH
43987: EMPTY
43988: LIST
43989: LIST
43990: PUSH
43991: LD_INT 2
43993: PUSH
43994: LD_INT 1
43996: NEG
43997: PUSH
43998: EMPTY
43999: LIST
44000: LIST
44001: PUSH
44002: LD_INT 3
44004: PUSH
44005: LD_INT 0
44007: PUSH
44008: EMPTY
44009: LIST
44010: LIST
44011: PUSH
44012: LD_INT 3
44014: PUSH
44015: LD_INT 1
44017: PUSH
44018: EMPTY
44019: LIST
44020: LIST
44021: PUSH
44022: LD_INT 3
44024: PUSH
44025: LD_INT 2
44027: PUSH
44028: EMPTY
44029: LIST
44030: LIST
44031: PUSH
44032: LD_INT 3
44034: PUSH
44035: LD_INT 3
44037: PUSH
44038: EMPTY
44039: LIST
44040: LIST
44041: PUSH
44042: LD_INT 2
44044: PUSH
44045: LD_INT 3
44047: PUSH
44048: EMPTY
44049: LIST
44050: LIST
44051: PUSH
44052: LD_INT 2
44054: NEG
44055: PUSH
44056: LD_INT 1
44058: PUSH
44059: EMPTY
44060: LIST
44061: LIST
44062: PUSH
44063: LD_INT 3
44065: NEG
44066: PUSH
44067: LD_INT 0
44069: PUSH
44070: EMPTY
44071: LIST
44072: LIST
44073: PUSH
44074: LD_INT 3
44076: NEG
44077: PUSH
44078: LD_INT 1
44080: NEG
44081: PUSH
44082: EMPTY
44083: LIST
44084: LIST
44085: PUSH
44086: LD_INT 3
44088: NEG
44089: PUSH
44090: LD_INT 2
44092: NEG
44093: PUSH
44094: EMPTY
44095: LIST
44096: LIST
44097: PUSH
44098: LD_INT 3
44100: NEG
44101: PUSH
44102: LD_INT 3
44104: NEG
44105: PUSH
44106: EMPTY
44107: LIST
44108: LIST
44109: PUSH
44110: EMPTY
44111: LIST
44112: LIST
44113: LIST
44114: LIST
44115: LIST
44116: LIST
44117: LIST
44118: LIST
44119: LIST
44120: LIST
44121: LIST
44122: LIST
44123: LIST
44124: LIST
44125: LIST
44126: LIST
44127: LIST
44128: LIST
44129: LIST
44130: LIST
44131: LIST
44132: LIST
44133: LIST
44134: LIST
44135: LIST
44136: LIST
44137: LIST
44138: LIST
44139: LIST
44140: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44141: LD_ADDR_VAR 0 45
44145: PUSH
44146: LD_INT 0
44148: PUSH
44149: LD_INT 0
44151: PUSH
44152: EMPTY
44153: LIST
44154: LIST
44155: PUSH
44156: LD_INT 0
44158: PUSH
44159: LD_INT 1
44161: NEG
44162: PUSH
44163: EMPTY
44164: LIST
44165: LIST
44166: PUSH
44167: LD_INT 1
44169: PUSH
44170: LD_INT 0
44172: PUSH
44173: EMPTY
44174: LIST
44175: LIST
44176: PUSH
44177: LD_INT 1
44179: PUSH
44180: LD_INT 1
44182: PUSH
44183: EMPTY
44184: LIST
44185: LIST
44186: PUSH
44187: LD_INT 0
44189: PUSH
44190: LD_INT 1
44192: PUSH
44193: EMPTY
44194: LIST
44195: LIST
44196: PUSH
44197: LD_INT 1
44199: NEG
44200: PUSH
44201: LD_INT 0
44203: PUSH
44204: EMPTY
44205: LIST
44206: LIST
44207: PUSH
44208: LD_INT 1
44210: NEG
44211: PUSH
44212: LD_INT 1
44214: NEG
44215: PUSH
44216: EMPTY
44217: LIST
44218: LIST
44219: PUSH
44220: LD_INT 1
44222: NEG
44223: PUSH
44224: LD_INT 2
44226: NEG
44227: PUSH
44228: EMPTY
44229: LIST
44230: LIST
44231: PUSH
44232: LD_INT 0
44234: PUSH
44235: LD_INT 2
44237: NEG
44238: PUSH
44239: EMPTY
44240: LIST
44241: LIST
44242: PUSH
44243: LD_INT 1
44245: PUSH
44246: LD_INT 1
44248: NEG
44249: PUSH
44250: EMPTY
44251: LIST
44252: LIST
44253: PUSH
44254: LD_INT 2
44256: PUSH
44257: LD_INT 1
44259: PUSH
44260: EMPTY
44261: LIST
44262: LIST
44263: PUSH
44264: LD_INT 2
44266: PUSH
44267: LD_INT 2
44269: PUSH
44270: EMPTY
44271: LIST
44272: LIST
44273: PUSH
44274: LD_INT 1
44276: PUSH
44277: LD_INT 2
44279: PUSH
44280: EMPTY
44281: LIST
44282: LIST
44283: PUSH
44284: LD_INT 0
44286: PUSH
44287: LD_INT 2
44289: PUSH
44290: EMPTY
44291: LIST
44292: LIST
44293: PUSH
44294: LD_INT 1
44296: NEG
44297: PUSH
44298: LD_INT 1
44300: PUSH
44301: EMPTY
44302: LIST
44303: LIST
44304: PUSH
44305: LD_INT 2
44307: NEG
44308: PUSH
44309: LD_INT 1
44311: NEG
44312: PUSH
44313: EMPTY
44314: LIST
44315: LIST
44316: PUSH
44317: LD_INT 2
44319: NEG
44320: PUSH
44321: LD_INT 2
44323: NEG
44324: PUSH
44325: EMPTY
44326: LIST
44327: LIST
44328: PUSH
44329: LD_INT 2
44331: NEG
44332: PUSH
44333: LD_INT 3
44335: NEG
44336: PUSH
44337: EMPTY
44338: LIST
44339: LIST
44340: PUSH
44341: LD_INT 1
44343: NEG
44344: PUSH
44345: LD_INT 3
44347: NEG
44348: PUSH
44349: EMPTY
44350: LIST
44351: LIST
44352: PUSH
44353: LD_INT 0
44355: PUSH
44356: LD_INT 3
44358: NEG
44359: PUSH
44360: EMPTY
44361: LIST
44362: LIST
44363: PUSH
44364: LD_INT 1
44366: PUSH
44367: LD_INT 2
44369: NEG
44370: PUSH
44371: EMPTY
44372: LIST
44373: LIST
44374: PUSH
44375: LD_INT 3
44377: PUSH
44378: LD_INT 2
44380: PUSH
44381: EMPTY
44382: LIST
44383: LIST
44384: PUSH
44385: LD_INT 3
44387: PUSH
44388: LD_INT 3
44390: PUSH
44391: EMPTY
44392: LIST
44393: LIST
44394: PUSH
44395: LD_INT 2
44397: PUSH
44398: LD_INT 3
44400: PUSH
44401: EMPTY
44402: LIST
44403: LIST
44404: PUSH
44405: LD_INT 1
44407: PUSH
44408: LD_INT 3
44410: PUSH
44411: EMPTY
44412: LIST
44413: LIST
44414: PUSH
44415: LD_INT 0
44417: PUSH
44418: LD_INT 3
44420: PUSH
44421: EMPTY
44422: LIST
44423: LIST
44424: PUSH
44425: LD_INT 1
44427: NEG
44428: PUSH
44429: LD_INT 2
44431: PUSH
44432: EMPTY
44433: LIST
44434: LIST
44435: PUSH
44436: LD_INT 3
44438: NEG
44439: PUSH
44440: LD_INT 2
44442: NEG
44443: PUSH
44444: EMPTY
44445: LIST
44446: LIST
44447: PUSH
44448: LD_INT 3
44450: NEG
44451: PUSH
44452: LD_INT 3
44454: NEG
44455: PUSH
44456: EMPTY
44457: LIST
44458: LIST
44459: PUSH
44460: EMPTY
44461: LIST
44462: LIST
44463: LIST
44464: LIST
44465: LIST
44466: LIST
44467: LIST
44468: LIST
44469: LIST
44470: LIST
44471: LIST
44472: LIST
44473: LIST
44474: LIST
44475: LIST
44476: LIST
44477: LIST
44478: LIST
44479: LIST
44480: LIST
44481: LIST
44482: LIST
44483: LIST
44484: LIST
44485: LIST
44486: LIST
44487: LIST
44488: LIST
44489: LIST
44490: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
44491: LD_ADDR_VAR 0 46
44495: PUSH
44496: LD_INT 0
44498: PUSH
44499: LD_INT 0
44501: PUSH
44502: EMPTY
44503: LIST
44504: LIST
44505: PUSH
44506: LD_INT 0
44508: PUSH
44509: LD_INT 1
44511: NEG
44512: PUSH
44513: EMPTY
44514: LIST
44515: LIST
44516: PUSH
44517: LD_INT 1
44519: PUSH
44520: LD_INT 0
44522: PUSH
44523: EMPTY
44524: LIST
44525: LIST
44526: PUSH
44527: LD_INT 1
44529: PUSH
44530: LD_INT 1
44532: PUSH
44533: EMPTY
44534: LIST
44535: LIST
44536: PUSH
44537: LD_INT 0
44539: PUSH
44540: LD_INT 1
44542: PUSH
44543: EMPTY
44544: LIST
44545: LIST
44546: PUSH
44547: LD_INT 1
44549: NEG
44550: PUSH
44551: LD_INT 0
44553: PUSH
44554: EMPTY
44555: LIST
44556: LIST
44557: PUSH
44558: LD_INT 1
44560: NEG
44561: PUSH
44562: LD_INT 1
44564: NEG
44565: PUSH
44566: EMPTY
44567: LIST
44568: LIST
44569: PUSH
44570: LD_INT 1
44572: NEG
44573: PUSH
44574: LD_INT 2
44576: NEG
44577: PUSH
44578: EMPTY
44579: LIST
44580: LIST
44581: PUSH
44582: LD_INT 0
44584: PUSH
44585: LD_INT 2
44587: NEG
44588: PUSH
44589: EMPTY
44590: LIST
44591: LIST
44592: PUSH
44593: LD_INT 1
44595: PUSH
44596: LD_INT 1
44598: NEG
44599: PUSH
44600: EMPTY
44601: LIST
44602: LIST
44603: PUSH
44604: LD_INT 2
44606: PUSH
44607: LD_INT 0
44609: PUSH
44610: EMPTY
44611: LIST
44612: LIST
44613: PUSH
44614: LD_INT 2
44616: PUSH
44617: LD_INT 1
44619: PUSH
44620: EMPTY
44621: LIST
44622: LIST
44623: PUSH
44624: LD_INT 1
44626: PUSH
44627: LD_INT 2
44629: PUSH
44630: EMPTY
44631: LIST
44632: LIST
44633: PUSH
44634: LD_INT 0
44636: PUSH
44637: LD_INT 2
44639: PUSH
44640: EMPTY
44641: LIST
44642: LIST
44643: PUSH
44644: LD_INT 1
44646: NEG
44647: PUSH
44648: LD_INT 1
44650: PUSH
44651: EMPTY
44652: LIST
44653: LIST
44654: PUSH
44655: LD_INT 2
44657: NEG
44658: PUSH
44659: LD_INT 0
44661: PUSH
44662: EMPTY
44663: LIST
44664: LIST
44665: PUSH
44666: LD_INT 2
44668: NEG
44669: PUSH
44670: LD_INT 1
44672: NEG
44673: PUSH
44674: EMPTY
44675: LIST
44676: LIST
44677: PUSH
44678: LD_INT 1
44680: NEG
44681: PUSH
44682: LD_INT 3
44684: NEG
44685: PUSH
44686: EMPTY
44687: LIST
44688: LIST
44689: PUSH
44690: LD_INT 0
44692: PUSH
44693: LD_INT 3
44695: NEG
44696: PUSH
44697: EMPTY
44698: LIST
44699: LIST
44700: PUSH
44701: LD_INT 1
44703: PUSH
44704: LD_INT 2
44706: NEG
44707: PUSH
44708: EMPTY
44709: LIST
44710: LIST
44711: PUSH
44712: LD_INT 2
44714: PUSH
44715: LD_INT 1
44717: NEG
44718: PUSH
44719: EMPTY
44720: LIST
44721: LIST
44722: PUSH
44723: LD_INT 3
44725: PUSH
44726: LD_INT 0
44728: PUSH
44729: EMPTY
44730: LIST
44731: LIST
44732: PUSH
44733: LD_INT 3
44735: PUSH
44736: LD_INT 1
44738: PUSH
44739: EMPTY
44740: LIST
44741: LIST
44742: PUSH
44743: LD_INT 1
44745: PUSH
44746: LD_INT 3
44748: PUSH
44749: EMPTY
44750: LIST
44751: LIST
44752: PUSH
44753: LD_INT 0
44755: PUSH
44756: LD_INT 3
44758: PUSH
44759: EMPTY
44760: LIST
44761: LIST
44762: PUSH
44763: LD_INT 1
44765: NEG
44766: PUSH
44767: LD_INT 2
44769: PUSH
44770: EMPTY
44771: LIST
44772: LIST
44773: PUSH
44774: LD_INT 2
44776: NEG
44777: PUSH
44778: LD_INT 1
44780: PUSH
44781: EMPTY
44782: LIST
44783: LIST
44784: PUSH
44785: LD_INT 3
44787: NEG
44788: PUSH
44789: LD_INT 0
44791: PUSH
44792: EMPTY
44793: LIST
44794: LIST
44795: PUSH
44796: LD_INT 3
44798: NEG
44799: PUSH
44800: LD_INT 1
44802: NEG
44803: PUSH
44804: EMPTY
44805: LIST
44806: LIST
44807: PUSH
44808: EMPTY
44809: LIST
44810: LIST
44811: LIST
44812: LIST
44813: LIST
44814: LIST
44815: LIST
44816: LIST
44817: LIST
44818: LIST
44819: LIST
44820: LIST
44821: LIST
44822: LIST
44823: LIST
44824: LIST
44825: LIST
44826: LIST
44827: LIST
44828: LIST
44829: LIST
44830: LIST
44831: LIST
44832: LIST
44833: LIST
44834: LIST
44835: LIST
44836: LIST
44837: LIST
44838: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44839: LD_ADDR_VAR 0 47
44843: PUSH
44844: LD_INT 0
44846: PUSH
44847: LD_INT 0
44849: PUSH
44850: EMPTY
44851: LIST
44852: LIST
44853: PUSH
44854: LD_INT 0
44856: PUSH
44857: LD_INT 1
44859: NEG
44860: PUSH
44861: EMPTY
44862: LIST
44863: LIST
44864: PUSH
44865: LD_INT 1
44867: PUSH
44868: LD_INT 0
44870: PUSH
44871: EMPTY
44872: LIST
44873: LIST
44874: PUSH
44875: LD_INT 1
44877: PUSH
44878: LD_INT 1
44880: PUSH
44881: EMPTY
44882: LIST
44883: LIST
44884: PUSH
44885: LD_INT 0
44887: PUSH
44888: LD_INT 1
44890: PUSH
44891: EMPTY
44892: LIST
44893: LIST
44894: PUSH
44895: LD_INT 1
44897: NEG
44898: PUSH
44899: LD_INT 0
44901: PUSH
44902: EMPTY
44903: LIST
44904: LIST
44905: PUSH
44906: LD_INT 1
44908: NEG
44909: PUSH
44910: LD_INT 1
44912: NEG
44913: PUSH
44914: EMPTY
44915: LIST
44916: LIST
44917: PUSH
44918: LD_INT 1
44920: NEG
44921: PUSH
44922: LD_INT 2
44924: NEG
44925: PUSH
44926: EMPTY
44927: LIST
44928: LIST
44929: PUSH
44930: LD_INT 0
44932: PUSH
44933: LD_INT 2
44935: NEG
44936: PUSH
44937: EMPTY
44938: LIST
44939: LIST
44940: PUSH
44941: LD_INT 1
44943: PUSH
44944: LD_INT 1
44946: NEG
44947: PUSH
44948: EMPTY
44949: LIST
44950: LIST
44951: PUSH
44952: LD_INT 2
44954: NEG
44955: PUSH
44956: LD_INT 1
44958: NEG
44959: PUSH
44960: EMPTY
44961: LIST
44962: LIST
44963: PUSH
44964: LD_INT 2
44966: NEG
44967: PUSH
44968: LD_INT 2
44970: NEG
44971: PUSH
44972: EMPTY
44973: LIST
44974: LIST
44975: PUSH
44976: EMPTY
44977: LIST
44978: LIST
44979: LIST
44980: LIST
44981: LIST
44982: LIST
44983: LIST
44984: LIST
44985: LIST
44986: LIST
44987: LIST
44988: LIST
44989: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
44990: LD_ADDR_VAR 0 48
44994: PUSH
44995: LD_INT 0
44997: PUSH
44998: LD_INT 0
45000: PUSH
45001: EMPTY
45002: LIST
45003: LIST
45004: PUSH
45005: LD_INT 0
45007: PUSH
45008: LD_INT 1
45010: NEG
45011: PUSH
45012: EMPTY
45013: LIST
45014: LIST
45015: PUSH
45016: LD_INT 1
45018: PUSH
45019: LD_INT 0
45021: PUSH
45022: EMPTY
45023: LIST
45024: LIST
45025: PUSH
45026: LD_INT 1
45028: PUSH
45029: LD_INT 1
45031: PUSH
45032: EMPTY
45033: LIST
45034: LIST
45035: PUSH
45036: LD_INT 0
45038: PUSH
45039: LD_INT 1
45041: PUSH
45042: EMPTY
45043: LIST
45044: LIST
45045: PUSH
45046: LD_INT 1
45048: NEG
45049: PUSH
45050: LD_INT 0
45052: PUSH
45053: EMPTY
45054: LIST
45055: LIST
45056: PUSH
45057: LD_INT 1
45059: NEG
45060: PUSH
45061: LD_INT 1
45063: NEG
45064: PUSH
45065: EMPTY
45066: LIST
45067: LIST
45068: PUSH
45069: LD_INT 1
45071: NEG
45072: PUSH
45073: LD_INT 2
45075: NEG
45076: PUSH
45077: EMPTY
45078: LIST
45079: LIST
45080: PUSH
45081: LD_INT 0
45083: PUSH
45084: LD_INT 2
45086: NEG
45087: PUSH
45088: EMPTY
45089: LIST
45090: LIST
45091: PUSH
45092: LD_INT 1
45094: PUSH
45095: LD_INT 1
45097: NEG
45098: PUSH
45099: EMPTY
45100: LIST
45101: LIST
45102: PUSH
45103: LD_INT 2
45105: PUSH
45106: LD_INT 0
45108: PUSH
45109: EMPTY
45110: LIST
45111: LIST
45112: PUSH
45113: LD_INT 2
45115: PUSH
45116: LD_INT 1
45118: PUSH
45119: EMPTY
45120: LIST
45121: LIST
45122: PUSH
45123: EMPTY
45124: LIST
45125: LIST
45126: LIST
45127: LIST
45128: LIST
45129: LIST
45130: LIST
45131: LIST
45132: LIST
45133: LIST
45134: LIST
45135: LIST
45136: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
45137: LD_ADDR_VAR 0 49
45141: PUSH
45142: LD_INT 0
45144: PUSH
45145: LD_INT 0
45147: PUSH
45148: EMPTY
45149: LIST
45150: LIST
45151: PUSH
45152: LD_INT 0
45154: PUSH
45155: LD_INT 1
45157: NEG
45158: PUSH
45159: EMPTY
45160: LIST
45161: LIST
45162: PUSH
45163: LD_INT 1
45165: PUSH
45166: LD_INT 0
45168: PUSH
45169: EMPTY
45170: LIST
45171: LIST
45172: PUSH
45173: LD_INT 1
45175: PUSH
45176: LD_INT 1
45178: PUSH
45179: EMPTY
45180: LIST
45181: LIST
45182: PUSH
45183: LD_INT 0
45185: PUSH
45186: LD_INT 1
45188: PUSH
45189: EMPTY
45190: LIST
45191: LIST
45192: PUSH
45193: LD_INT 1
45195: NEG
45196: PUSH
45197: LD_INT 0
45199: PUSH
45200: EMPTY
45201: LIST
45202: LIST
45203: PUSH
45204: LD_INT 1
45206: NEG
45207: PUSH
45208: LD_INT 1
45210: NEG
45211: PUSH
45212: EMPTY
45213: LIST
45214: LIST
45215: PUSH
45216: LD_INT 1
45218: PUSH
45219: LD_INT 1
45221: NEG
45222: PUSH
45223: EMPTY
45224: LIST
45225: LIST
45226: PUSH
45227: LD_INT 2
45229: PUSH
45230: LD_INT 0
45232: PUSH
45233: EMPTY
45234: LIST
45235: LIST
45236: PUSH
45237: LD_INT 2
45239: PUSH
45240: LD_INT 1
45242: PUSH
45243: EMPTY
45244: LIST
45245: LIST
45246: PUSH
45247: LD_INT 2
45249: PUSH
45250: LD_INT 2
45252: PUSH
45253: EMPTY
45254: LIST
45255: LIST
45256: PUSH
45257: LD_INT 1
45259: PUSH
45260: LD_INT 2
45262: PUSH
45263: EMPTY
45264: LIST
45265: LIST
45266: PUSH
45267: EMPTY
45268: LIST
45269: LIST
45270: LIST
45271: LIST
45272: LIST
45273: LIST
45274: LIST
45275: LIST
45276: LIST
45277: LIST
45278: LIST
45279: LIST
45280: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
45281: LD_ADDR_VAR 0 50
45285: PUSH
45286: LD_INT 0
45288: PUSH
45289: LD_INT 0
45291: PUSH
45292: EMPTY
45293: LIST
45294: LIST
45295: PUSH
45296: LD_INT 0
45298: PUSH
45299: LD_INT 1
45301: NEG
45302: PUSH
45303: EMPTY
45304: LIST
45305: LIST
45306: PUSH
45307: LD_INT 1
45309: PUSH
45310: LD_INT 0
45312: PUSH
45313: EMPTY
45314: LIST
45315: LIST
45316: PUSH
45317: LD_INT 1
45319: PUSH
45320: LD_INT 1
45322: PUSH
45323: EMPTY
45324: LIST
45325: LIST
45326: PUSH
45327: LD_INT 0
45329: PUSH
45330: LD_INT 1
45332: PUSH
45333: EMPTY
45334: LIST
45335: LIST
45336: PUSH
45337: LD_INT 1
45339: NEG
45340: PUSH
45341: LD_INT 0
45343: PUSH
45344: EMPTY
45345: LIST
45346: LIST
45347: PUSH
45348: LD_INT 1
45350: NEG
45351: PUSH
45352: LD_INT 1
45354: NEG
45355: PUSH
45356: EMPTY
45357: LIST
45358: LIST
45359: PUSH
45360: LD_INT 2
45362: PUSH
45363: LD_INT 1
45365: PUSH
45366: EMPTY
45367: LIST
45368: LIST
45369: PUSH
45370: LD_INT 2
45372: PUSH
45373: LD_INT 2
45375: PUSH
45376: EMPTY
45377: LIST
45378: LIST
45379: PUSH
45380: LD_INT 1
45382: PUSH
45383: LD_INT 2
45385: PUSH
45386: EMPTY
45387: LIST
45388: LIST
45389: PUSH
45390: LD_INT 0
45392: PUSH
45393: LD_INT 2
45395: PUSH
45396: EMPTY
45397: LIST
45398: LIST
45399: PUSH
45400: LD_INT 1
45402: NEG
45403: PUSH
45404: LD_INT 1
45406: PUSH
45407: EMPTY
45408: LIST
45409: LIST
45410: PUSH
45411: EMPTY
45412: LIST
45413: LIST
45414: LIST
45415: LIST
45416: LIST
45417: LIST
45418: LIST
45419: LIST
45420: LIST
45421: LIST
45422: LIST
45423: LIST
45424: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
45425: LD_ADDR_VAR 0 51
45429: PUSH
45430: LD_INT 0
45432: PUSH
45433: LD_INT 0
45435: PUSH
45436: EMPTY
45437: LIST
45438: LIST
45439: PUSH
45440: LD_INT 0
45442: PUSH
45443: LD_INT 1
45445: NEG
45446: PUSH
45447: EMPTY
45448: LIST
45449: LIST
45450: PUSH
45451: LD_INT 1
45453: PUSH
45454: LD_INT 0
45456: PUSH
45457: EMPTY
45458: LIST
45459: LIST
45460: PUSH
45461: LD_INT 1
45463: PUSH
45464: LD_INT 1
45466: PUSH
45467: EMPTY
45468: LIST
45469: LIST
45470: PUSH
45471: LD_INT 0
45473: PUSH
45474: LD_INT 1
45476: PUSH
45477: EMPTY
45478: LIST
45479: LIST
45480: PUSH
45481: LD_INT 1
45483: NEG
45484: PUSH
45485: LD_INT 0
45487: PUSH
45488: EMPTY
45489: LIST
45490: LIST
45491: PUSH
45492: LD_INT 1
45494: NEG
45495: PUSH
45496: LD_INT 1
45498: NEG
45499: PUSH
45500: EMPTY
45501: LIST
45502: LIST
45503: PUSH
45504: LD_INT 1
45506: PUSH
45507: LD_INT 2
45509: PUSH
45510: EMPTY
45511: LIST
45512: LIST
45513: PUSH
45514: LD_INT 0
45516: PUSH
45517: LD_INT 2
45519: PUSH
45520: EMPTY
45521: LIST
45522: LIST
45523: PUSH
45524: LD_INT 1
45526: NEG
45527: PUSH
45528: LD_INT 1
45530: PUSH
45531: EMPTY
45532: LIST
45533: LIST
45534: PUSH
45535: LD_INT 2
45537: NEG
45538: PUSH
45539: LD_INT 0
45541: PUSH
45542: EMPTY
45543: LIST
45544: LIST
45545: PUSH
45546: LD_INT 2
45548: NEG
45549: PUSH
45550: LD_INT 1
45552: NEG
45553: PUSH
45554: EMPTY
45555: LIST
45556: LIST
45557: PUSH
45558: EMPTY
45559: LIST
45560: LIST
45561: LIST
45562: LIST
45563: LIST
45564: LIST
45565: LIST
45566: LIST
45567: LIST
45568: LIST
45569: LIST
45570: LIST
45571: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45572: LD_ADDR_VAR 0 52
45576: PUSH
45577: LD_INT 0
45579: PUSH
45580: LD_INT 0
45582: PUSH
45583: EMPTY
45584: LIST
45585: LIST
45586: PUSH
45587: LD_INT 0
45589: PUSH
45590: LD_INT 1
45592: NEG
45593: PUSH
45594: EMPTY
45595: LIST
45596: LIST
45597: PUSH
45598: LD_INT 1
45600: PUSH
45601: LD_INT 0
45603: PUSH
45604: EMPTY
45605: LIST
45606: LIST
45607: PUSH
45608: LD_INT 1
45610: PUSH
45611: LD_INT 1
45613: PUSH
45614: EMPTY
45615: LIST
45616: LIST
45617: PUSH
45618: LD_INT 0
45620: PUSH
45621: LD_INT 1
45623: PUSH
45624: EMPTY
45625: LIST
45626: LIST
45627: PUSH
45628: LD_INT 1
45630: NEG
45631: PUSH
45632: LD_INT 0
45634: PUSH
45635: EMPTY
45636: LIST
45637: LIST
45638: PUSH
45639: LD_INT 1
45641: NEG
45642: PUSH
45643: LD_INT 1
45645: NEG
45646: PUSH
45647: EMPTY
45648: LIST
45649: LIST
45650: PUSH
45651: LD_INT 1
45653: NEG
45654: PUSH
45655: LD_INT 2
45657: NEG
45658: PUSH
45659: EMPTY
45660: LIST
45661: LIST
45662: PUSH
45663: LD_INT 1
45665: NEG
45666: PUSH
45667: LD_INT 1
45669: PUSH
45670: EMPTY
45671: LIST
45672: LIST
45673: PUSH
45674: LD_INT 2
45676: NEG
45677: PUSH
45678: LD_INT 0
45680: PUSH
45681: EMPTY
45682: LIST
45683: LIST
45684: PUSH
45685: LD_INT 2
45687: NEG
45688: PUSH
45689: LD_INT 1
45691: NEG
45692: PUSH
45693: EMPTY
45694: LIST
45695: LIST
45696: PUSH
45697: LD_INT 2
45699: NEG
45700: PUSH
45701: LD_INT 2
45703: NEG
45704: PUSH
45705: EMPTY
45706: LIST
45707: LIST
45708: PUSH
45709: EMPTY
45710: LIST
45711: LIST
45712: LIST
45713: LIST
45714: LIST
45715: LIST
45716: LIST
45717: LIST
45718: LIST
45719: LIST
45720: LIST
45721: LIST
45722: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45723: LD_ADDR_VAR 0 53
45727: PUSH
45728: LD_INT 0
45730: PUSH
45731: LD_INT 0
45733: PUSH
45734: EMPTY
45735: LIST
45736: LIST
45737: PUSH
45738: LD_INT 0
45740: PUSH
45741: LD_INT 1
45743: NEG
45744: PUSH
45745: EMPTY
45746: LIST
45747: LIST
45748: PUSH
45749: LD_INT 1
45751: PUSH
45752: LD_INT 0
45754: PUSH
45755: EMPTY
45756: LIST
45757: LIST
45758: PUSH
45759: LD_INT 1
45761: PUSH
45762: LD_INT 1
45764: PUSH
45765: EMPTY
45766: LIST
45767: LIST
45768: PUSH
45769: LD_INT 0
45771: PUSH
45772: LD_INT 1
45774: PUSH
45775: EMPTY
45776: LIST
45777: LIST
45778: PUSH
45779: LD_INT 1
45781: NEG
45782: PUSH
45783: LD_INT 0
45785: PUSH
45786: EMPTY
45787: LIST
45788: LIST
45789: PUSH
45790: LD_INT 1
45792: NEG
45793: PUSH
45794: LD_INT 1
45796: NEG
45797: PUSH
45798: EMPTY
45799: LIST
45800: LIST
45801: PUSH
45802: LD_INT 1
45804: NEG
45805: PUSH
45806: LD_INT 2
45808: NEG
45809: PUSH
45810: EMPTY
45811: LIST
45812: LIST
45813: PUSH
45814: LD_INT 0
45816: PUSH
45817: LD_INT 2
45819: NEG
45820: PUSH
45821: EMPTY
45822: LIST
45823: LIST
45824: PUSH
45825: LD_INT 1
45827: PUSH
45828: LD_INT 1
45830: NEG
45831: PUSH
45832: EMPTY
45833: LIST
45834: LIST
45835: PUSH
45836: LD_INT 2
45838: PUSH
45839: LD_INT 0
45841: PUSH
45842: EMPTY
45843: LIST
45844: LIST
45845: PUSH
45846: LD_INT 2
45848: PUSH
45849: LD_INT 1
45851: PUSH
45852: EMPTY
45853: LIST
45854: LIST
45855: PUSH
45856: LD_INT 2
45858: PUSH
45859: LD_INT 2
45861: PUSH
45862: EMPTY
45863: LIST
45864: LIST
45865: PUSH
45866: LD_INT 1
45868: PUSH
45869: LD_INT 2
45871: PUSH
45872: EMPTY
45873: LIST
45874: LIST
45875: PUSH
45876: LD_INT 0
45878: PUSH
45879: LD_INT 2
45881: PUSH
45882: EMPTY
45883: LIST
45884: LIST
45885: PUSH
45886: LD_INT 1
45888: NEG
45889: PUSH
45890: LD_INT 1
45892: PUSH
45893: EMPTY
45894: LIST
45895: LIST
45896: PUSH
45897: LD_INT 2
45899: NEG
45900: PUSH
45901: LD_INT 0
45903: PUSH
45904: EMPTY
45905: LIST
45906: LIST
45907: PUSH
45908: LD_INT 2
45910: NEG
45911: PUSH
45912: LD_INT 1
45914: NEG
45915: PUSH
45916: EMPTY
45917: LIST
45918: LIST
45919: PUSH
45920: LD_INT 2
45922: NEG
45923: PUSH
45924: LD_INT 2
45926: NEG
45927: PUSH
45928: EMPTY
45929: LIST
45930: LIST
45931: PUSH
45932: EMPTY
45933: LIST
45934: LIST
45935: LIST
45936: LIST
45937: LIST
45938: LIST
45939: LIST
45940: LIST
45941: LIST
45942: LIST
45943: LIST
45944: LIST
45945: LIST
45946: LIST
45947: LIST
45948: LIST
45949: LIST
45950: LIST
45951: LIST
45952: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45953: LD_ADDR_VAR 0 54
45957: PUSH
45958: LD_INT 0
45960: PUSH
45961: LD_INT 0
45963: PUSH
45964: EMPTY
45965: LIST
45966: LIST
45967: PUSH
45968: LD_INT 0
45970: PUSH
45971: LD_INT 1
45973: NEG
45974: PUSH
45975: EMPTY
45976: LIST
45977: LIST
45978: PUSH
45979: LD_INT 1
45981: PUSH
45982: LD_INT 0
45984: PUSH
45985: EMPTY
45986: LIST
45987: LIST
45988: PUSH
45989: LD_INT 1
45991: PUSH
45992: LD_INT 1
45994: PUSH
45995: EMPTY
45996: LIST
45997: LIST
45998: PUSH
45999: LD_INT 0
46001: PUSH
46002: LD_INT 1
46004: PUSH
46005: EMPTY
46006: LIST
46007: LIST
46008: PUSH
46009: LD_INT 1
46011: NEG
46012: PUSH
46013: LD_INT 0
46015: PUSH
46016: EMPTY
46017: LIST
46018: LIST
46019: PUSH
46020: LD_INT 1
46022: NEG
46023: PUSH
46024: LD_INT 1
46026: NEG
46027: PUSH
46028: EMPTY
46029: LIST
46030: LIST
46031: PUSH
46032: LD_INT 1
46034: NEG
46035: PUSH
46036: LD_INT 2
46038: NEG
46039: PUSH
46040: EMPTY
46041: LIST
46042: LIST
46043: PUSH
46044: LD_INT 0
46046: PUSH
46047: LD_INT 2
46049: NEG
46050: PUSH
46051: EMPTY
46052: LIST
46053: LIST
46054: PUSH
46055: LD_INT 1
46057: PUSH
46058: LD_INT 1
46060: NEG
46061: PUSH
46062: EMPTY
46063: LIST
46064: LIST
46065: PUSH
46066: LD_INT 2
46068: PUSH
46069: LD_INT 0
46071: PUSH
46072: EMPTY
46073: LIST
46074: LIST
46075: PUSH
46076: LD_INT 2
46078: PUSH
46079: LD_INT 1
46081: PUSH
46082: EMPTY
46083: LIST
46084: LIST
46085: PUSH
46086: LD_INT 2
46088: PUSH
46089: LD_INT 2
46091: PUSH
46092: EMPTY
46093: LIST
46094: LIST
46095: PUSH
46096: LD_INT 1
46098: PUSH
46099: LD_INT 2
46101: PUSH
46102: EMPTY
46103: LIST
46104: LIST
46105: PUSH
46106: LD_INT 0
46108: PUSH
46109: LD_INT 2
46111: PUSH
46112: EMPTY
46113: LIST
46114: LIST
46115: PUSH
46116: LD_INT 1
46118: NEG
46119: PUSH
46120: LD_INT 1
46122: PUSH
46123: EMPTY
46124: LIST
46125: LIST
46126: PUSH
46127: LD_INT 2
46129: NEG
46130: PUSH
46131: LD_INT 0
46133: PUSH
46134: EMPTY
46135: LIST
46136: LIST
46137: PUSH
46138: LD_INT 2
46140: NEG
46141: PUSH
46142: LD_INT 1
46144: NEG
46145: PUSH
46146: EMPTY
46147: LIST
46148: LIST
46149: PUSH
46150: LD_INT 2
46152: NEG
46153: PUSH
46154: LD_INT 2
46156: NEG
46157: PUSH
46158: EMPTY
46159: LIST
46160: LIST
46161: PUSH
46162: EMPTY
46163: LIST
46164: LIST
46165: LIST
46166: LIST
46167: LIST
46168: LIST
46169: LIST
46170: LIST
46171: LIST
46172: LIST
46173: LIST
46174: LIST
46175: LIST
46176: LIST
46177: LIST
46178: LIST
46179: LIST
46180: LIST
46181: LIST
46182: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46183: LD_ADDR_VAR 0 55
46187: PUSH
46188: LD_INT 0
46190: PUSH
46191: LD_INT 0
46193: PUSH
46194: EMPTY
46195: LIST
46196: LIST
46197: PUSH
46198: LD_INT 0
46200: PUSH
46201: LD_INT 1
46203: NEG
46204: PUSH
46205: EMPTY
46206: LIST
46207: LIST
46208: PUSH
46209: LD_INT 1
46211: PUSH
46212: LD_INT 0
46214: PUSH
46215: EMPTY
46216: LIST
46217: LIST
46218: PUSH
46219: LD_INT 1
46221: PUSH
46222: LD_INT 1
46224: PUSH
46225: EMPTY
46226: LIST
46227: LIST
46228: PUSH
46229: LD_INT 0
46231: PUSH
46232: LD_INT 1
46234: PUSH
46235: EMPTY
46236: LIST
46237: LIST
46238: PUSH
46239: LD_INT 1
46241: NEG
46242: PUSH
46243: LD_INT 0
46245: PUSH
46246: EMPTY
46247: LIST
46248: LIST
46249: PUSH
46250: LD_INT 1
46252: NEG
46253: PUSH
46254: LD_INT 1
46256: NEG
46257: PUSH
46258: EMPTY
46259: LIST
46260: LIST
46261: PUSH
46262: LD_INT 1
46264: NEG
46265: PUSH
46266: LD_INT 2
46268: NEG
46269: PUSH
46270: EMPTY
46271: LIST
46272: LIST
46273: PUSH
46274: LD_INT 0
46276: PUSH
46277: LD_INT 2
46279: NEG
46280: PUSH
46281: EMPTY
46282: LIST
46283: LIST
46284: PUSH
46285: LD_INT 1
46287: PUSH
46288: LD_INT 1
46290: NEG
46291: PUSH
46292: EMPTY
46293: LIST
46294: LIST
46295: PUSH
46296: LD_INT 2
46298: PUSH
46299: LD_INT 0
46301: PUSH
46302: EMPTY
46303: LIST
46304: LIST
46305: PUSH
46306: LD_INT 2
46308: PUSH
46309: LD_INT 1
46311: PUSH
46312: EMPTY
46313: LIST
46314: LIST
46315: PUSH
46316: LD_INT 2
46318: PUSH
46319: LD_INT 2
46321: PUSH
46322: EMPTY
46323: LIST
46324: LIST
46325: PUSH
46326: LD_INT 1
46328: PUSH
46329: LD_INT 2
46331: PUSH
46332: EMPTY
46333: LIST
46334: LIST
46335: PUSH
46336: LD_INT 0
46338: PUSH
46339: LD_INT 2
46341: PUSH
46342: EMPTY
46343: LIST
46344: LIST
46345: PUSH
46346: LD_INT 1
46348: NEG
46349: PUSH
46350: LD_INT 1
46352: PUSH
46353: EMPTY
46354: LIST
46355: LIST
46356: PUSH
46357: LD_INT 2
46359: NEG
46360: PUSH
46361: LD_INT 0
46363: PUSH
46364: EMPTY
46365: LIST
46366: LIST
46367: PUSH
46368: LD_INT 2
46370: NEG
46371: PUSH
46372: LD_INT 1
46374: NEG
46375: PUSH
46376: EMPTY
46377: LIST
46378: LIST
46379: PUSH
46380: LD_INT 2
46382: NEG
46383: PUSH
46384: LD_INT 2
46386: NEG
46387: PUSH
46388: EMPTY
46389: LIST
46390: LIST
46391: PUSH
46392: EMPTY
46393: LIST
46394: LIST
46395: LIST
46396: LIST
46397: LIST
46398: LIST
46399: LIST
46400: LIST
46401: LIST
46402: LIST
46403: LIST
46404: LIST
46405: LIST
46406: LIST
46407: LIST
46408: LIST
46409: LIST
46410: LIST
46411: LIST
46412: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46413: LD_ADDR_VAR 0 56
46417: PUSH
46418: LD_INT 0
46420: PUSH
46421: LD_INT 0
46423: PUSH
46424: EMPTY
46425: LIST
46426: LIST
46427: PUSH
46428: LD_INT 0
46430: PUSH
46431: LD_INT 1
46433: NEG
46434: PUSH
46435: EMPTY
46436: LIST
46437: LIST
46438: PUSH
46439: LD_INT 1
46441: PUSH
46442: LD_INT 0
46444: PUSH
46445: EMPTY
46446: LIST
46447: LIST
46448: PUSH
46449: LD_INT 1
46451: PUSH
46452: LD_INT 1
46454: PUSH
46455: EMPTY
46456: LIST
46457: LIST
46458: PUSH
46459: LD_INT 0
46461: PUSH
46462: LD_INT 1
46464: PUSH
46465: EMPTY
46466: LIST
46467: LIST
46468: PUSH
46469: LD_INT 1
46471: NEG
46472: PUSH
46473: LD_INT 0
46475: PUSH
46476: EMPTY
46477: LIST
46478: LIST
46479: PUSH
46480: LD_INT 1
46482: NEG
46483: PUSH
46484: LD_INT 1
46486: NEG
46487: PUSH
46488: EMPTY
46489: LIST
46490: LIST
46491: PUSH
46492: LD_INT 1
46494: NEG
46495: PUSH
46496: LD_INT 2
46498: NEG
46499: PUSH
46500: EMPTY
46501: LIST
46502: LIST
46503: PUSH
46504: LD_INT 0
46506: PUSH
46507: LD_INT 2
46509: NEG
46510: PUSH
46511: EMPTY
46512: LIST
46513: LIST
46514: PUSH
46515: LD_INT 1
46517: PUSH
46518: LD_INT 1
46520: NEG
46521: PUSH
46522: EMPTY
46523: LIST
46524: LIST
46525: PUSH
46526: LD_INT 2
46528: PUSH
46529: LD_INT 0
46531: PUSH
46532: EMPTY
46533: LIST
46534: LIST
46535: PUSH
46536: LD_INT 2
46538: PUSH
46539: LD_INT 1
46541: PUSH
46542: EMPTY
46543: LIST
46544: LIST
46545: PUSH
46546: LD_INT 2
46548: PUSH
46549: LD_INT 2
46551: PUSH
46552: EMPTY
46553: LIST
46554: LIST
46555: PUSH
46556: LD_INT 1
46558: PUSH
46559: LD_INT 2
46561: PUSH
46562: EMPTY
46563: LIST
46564: LIST
46565: PUSH
46566: LD_INT 0
46568: PUSH
46569: LD_INT 2
46571: PUSH
46572: EMPTY
46573: LIST
46574: LIST
46575: PUSH
46576: LD_INT 1
46578: NEG
46579: PUSH
46580: LD_INT 1
46582: PUSH
46583: EMPTY
46584: LIST
46585: LIST
46586: PUSH
46587: LD_INT 2
46589: NEG
46590: PUSH
46591: LD_INT 0
46593: PUSH
46594: EMPTY
46595: LIST
46596: LIST
46597: PUSH
46598: LD_INT 2
46600: NEG
46601: PUSH
46602: LD_INT 1
46604: NEG
46605: PUSH
46606: EMPTY
46607: LIST
46608: LIST
46609: PUSH
46610: LD_INT 2
46612: NEG
46613: PUSH
46614: LD_INT 2
46616: NEG
46617: PUSH
46618: EMPTY
46619: LIST
46620: LIST
46621: PUSH
46622: EMPTY
46623: LIST
46624: LIST
46625: LIST
46626: LIST
46627: LIST
46628: LIST
46629: LIST
46630: LIST
46631: LIST
46632: LIST
46633: LIST
46634: LIST
46635: LIST
46636: LIST
46637: LIST
46638: LIST
46639: LIST
46640: LIST
46641: LIST
46642: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46643: LD_ADDR_VAR 0 57
46647: PUSH
46648: LD_INT 0
46650: PUSH
46651: LD_INT 0
46653: PUSH
46654: EMPTY
46655: LIST
46656: LIST
46657: PUSH
46658: LD_INT 0
46660: PUSH
46661: LD_INT 1
46663: NEG
46664: PUSH
46665: EMPTY
46666: LIST
46667: LIST
46668: PUSH
46669: LD_INT 1
46671: PUSH
46672: LD_INT 0
46674: PUSH
46675: EMPTY
46676: LIST
46677: LIST
46678: PUSH
46679: LD_INT 1
46681: PUSH
46682: LD_INT 1
46684: PUSH
46685: EMPTY
46686: LIST
46687: LIST
46688: PUSH
46689: LD_INT 0
46691: PUSH
46692: LD_INT 1
46694: PUSH
46695: EMPTY
46696: LIST
46697: LIST
46698: PUSH
46699: LD_INT 1
46701: NEG
46702: PUSH
46703: LD_INT 0
46705: PUSH
46706: EMPTY
46707: LIST
46708: LIST
46709: PUSH
46710: LD_INT 1
46712: NEG
46713: PUSH
46714: LD_INT 1
46716: NEG
46717: PUSH
46718: EMPTY
46719: LIST
46720: LIST
46721: PUSH
46722: LD_INT 1
46724: NEG
46725: PUSH
46726: LD_INT 2
46728: NEG
46729: PUSH
46730: EMPTY
46731: LIST
46732: LIST
46733: PUSH
46734: LD_INT 0
46736: PUSH
46737: LD_INT 2
46739: NEG
46740: PUSH
46741: EMPTY
46742: LIST
46743: LIST
46744: PUSH
46745: LD_INT 1
46747: PUSH
46748: LD_INT 1
46750: NEG
46751: PUSH
46752: EMPTY
46753: LIST
46754: LIST
46755: PUSH
46756: LD_INT 2
46758: PUSH
46759: LD_INT 0
46761: PUSH
46762: EMPTY
46763: LIST
46764: LIST
46765: PUSH
46766: LD_INT 2
46768: PUSH
46769: LD_INT 1
46771: PUSH
46772: EMPTY
46773: LIST
46774: LIST
46775: PUSH
46776: LD_INT 2
46778: PUSH
46779: LD_INT 2
46781: PUSH
46782: EMPTY
46783: LIST
46784: LIST
46785: PUSH
46786: LD_INT 1
46788: PUSH
46789: LD_INT 2
46791: PUSH
46792: EMPTY
46793: LIST
46794: LIST
46795: PUSH
46796: LD_INT 0
46798: PUSH
46799: LD_INT 2
46801: PUSH
46802: EMPTY
46803: LIST
46804: LIST
46805: PUSH
46806: LD_INT 1
46808: NEG
46809: PUSH
46810: LD_INT 1
46812: PUSH
46813: EMPTY
46814: LIST
46815: LIST
46816: PUSH
46817: LD_INT 2
46819: NEG
46820: PUSH
46821: LD_INT 0
46823: PUSH
46824: EMPTY
46825: LIST
46826: LIST
46827: PUSH
46828: LD_INT 2
46830: NEG
46831: PUSH
46832: LD_INT 1
46834: NEG
46835: PUSH
46836: EMPTY
46837: LIST
46838: LIST
46839: PUSH
46840: LD_INT 2
46842: NEG
46843: PUSH
46844: LD_INT 2
46846: NEG
46847: PUSH
46848: EMPTY
46849: LIST
46850: LIST
46851: PUSH
46852: EMPTY
46853: LIST
46854: LIST
46855: LIST
46856: LIST
46857: LIST
46858: LIST
46859: LIST
46860: LIST
46861: LIST
46862: LIST
46863: LIST
46864: LIST
46865: LIST
46866: LIST
46867: LIST
46868: LIST
46869: LIST
46870: LIST
46871: LIST
46872: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46873: LD_ADDR_VAR 0 58
46877: PUSH
46878: LD_INT 0
46880: PUSH
46881: LD_INT 0
46883: PUSH
46884: EMPTY
46885: LIST
46886: LIST
46887: PUSH
46888: LD_INT 0
46890: PUSH
46891: LD_INT 1
46893: NEG
46894: PUSH
46895: EMPTY
46896: LIST
46897: LIST
46898: PUSH
46899: LD_INT 1
46901: PUSH
46902: LD_INT 0
46904: PUSH
46905: EMPTY
46906: LIST
46907: LIST
46908: PUSH
46909: LD_INT 1
46911: PUSH
46912: LD_INT 1
46914: PUSH
46915: EMPTY
46916: LIST
46917: LIST
46918: PUSH
46919: LD_INT 0
46921: PUSH
46922: LD_INT 1
46924: PUSH
46925: EMPTY
46926: LIST
46927: LIST
46928: PUSH
46929: LD_INT 1
46931: NEG
46932: PUSH
46933: LD_INT 0
46935: PUSH
46936: EMPTY
46937: LIST
46938: LIST
46939: PUSH
46940: LD_INT 1
46942: NEG
46943: PUSH
46944: LD_INT 1
46946: NEG
46947: PUSH
46948: EMPTY
46949: LIST
46950: LIST
46951: PUSH
46952: LD_INT 1
46954: NEG
46955: PUSH
46956: LD_INT 2
46958: NEG
46959: PUSH
46960: EMPTY
46961: LIST
46962: LIST
46963: PUSH
46964: LD_INT 0
46966: PUSH
46967: LD_INT 2
46969: NEG
46970: PUSH
46971: EMPTY
46972: LIST
46973: LIST
46974: PUSH
46975: LD_INT 1
46977: PUSH
46978: LD_INT 1
46980: NEG
46981: PUSH
46982: EMPTY
46983: LIST
46984: LIST
46985: PUSH
46986: LD_INT 2
46988: PUSH
46989: LD_INT 0
46991: PUSH
46992: EMPTY
46993: LIST
46994: LIST
46995: PUSH
46996: LD_INT 2
46998: PUSH
46999: LD_INT 1
47001: PUSH
47002: EMPTY
47003: LIST
47004: LIST
47005: PUSH
47006: LD_INT 2
47008: PUSH
47009: LD_INT 2
47011: PUSH
47012: EMPTY
47013: LIST
47014: LIST
47015: PUSH
47016: LD_INT 1
47018: PUSH
47019: LD_INT 2
47021: PUSH
47022: EMPTY
47023: LIST
47024: LIST
47025: PUSH
47026: LD_INT 0
47028: PUSH
47029: LD_INT 2
47031: PUSH
47032: EMPTY
47033: LIST
47034: LIST
47035: PUSH
47036: LD_INT 1
47038: NEG
47039: PUSH
47040: LD_INT 1
47042: PUSH
47043: EMPTY
47044: LIST
47045: LIST
47046: PUSH
47047: LD_INT 2
47049: NEG
47050: PUSH
47051: LD_INT 0
47053: PUSH
47054: EMPTY
47055: LIST
47056: LIST
47057: PUSH
47058: LD_INT 2
47060: NEG
47061: PUSH
47062: LD_INT 1
47064: NEG
47065: PUSH
47066: EMPTY
47067: LIST
47068: LIST
47069: PUSH
47070: LD_INT 2
47072: NEG
47073: PUSH
47074: LD_INT 2
47076: NEG
47077: PUSH
47078: EMPTY
47079: LIST
47080: LIST
47081: PUSH
47082: EMPTY
47083: LIST
47084: LIST
47085: LIST
47086: LIST
47087: LIST
47088: LIST
47089: LIST
47090: LIST
47091: LIST
47092: LIST
47093: LIST
47094: LIST
47095: LIST
47096: LIST
47097: LIST
47098: LIST
47099: LIST
47100: LIST
47101: LIST
47102: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
47103: LD_ADDR_VAR 0 59
47107: PUSH
47108: LD_INT 0
47110: PUSH
47111: LD_INT 0
47113: PUSH
47114: EMPTY
47115: LIST
47116: LIST
47117: PUSH
47118: LD_INT 0
47120: PUSH
47121: LD_INT 1
47123: NEG
47124: PUSH
47125: EMPTY
47126: LIST
47127: LIST
47128: PUSH
47129: LD_INT 1
47131: PUSH
47132: LD_INT 0
47134: PUSH
47135: EMPTY
47136: LIST
47137: LIST
47138: PUSH
47139: LD_INT 1
47141: PUSH
47142: LD_INT 1
47144: PUSH
47145: EMPTY
47146: LIST
47147: LIST
47148: PUSH
47149: LD_INT 0
47151: PUSH
47152: LD_INT 1
47154: PUSH
47155: EMPTY
47156: LIST
47157: LIST
47158: PUSH
47159: LD_INT 1
47161: NEG
47162: PUSH
47163: LD_INT 0
47165: PUSH
47166: EMPTY
47167: LIST
47168: LIST
47169: PUSH
47170: LD_INT 1
47172: NEG
47173: PUSH
47174: LD_INT 1
47176: NEG
47177: PUSH
47178: EMPTY
47179: LIST
47180: LIST
47181: PUSH
47182: EMPTY
47183: LIST
47184: LIST
47185: LIST
47186: LIST
47187: LIST
47188: LIST
47189: LIST
47190: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
47191: LD_ADDR_VAR 0 60
47195: PUSH
47196: LD_INT 0
47198: PUSH
47199: LD_INT 0
47201: PUSH
47202: EMPTY
47203: LIST
47204: LIST
47205: PUSH
47206: LD_INT 0
47208: PUSH
47209: LD_INT 1
47211: NEG
47212: PUSH
47213: EMPTY
47214: LIST
47215: LIST
47216: PUSH
47217: LD_INT 1
47219: PUSH
47220: LD_INT 0
47222: PUSH
47223: EMPTY
47224: LIST
47225: LIST
47226: PUSH
47227: LD_INT 1
47229: PUSH
47230: LD_INT 1
47232: PUSH
47233: EMPTY
47234: LIST
47235: LIST
47236: PUSH
47237: LD_INT 0
47239: PUSH
47240: LD_INT 1
47242: PUSH
47243: EMPTY
47244: LIST
47245: LIST
47246: PUSH
47247: LD_INT 1
47249: NEG
47250: PUSH
47251: LD_INT 0
47253: PUSH
47254: EMPTY
47255: LIST
47256: LIST
47257: PUSH
47258: LD_INT 1
47260: NEG
47261: PUSH
47262: LD_INT 1
47264: NEG
47265: PUSH
47266: EMPTY
47267: LIST
47268: LIST
47269: PUSH
47270: EMPTY
47271: LIST
47272: LIST
47273: LIST
47274: LIST
47275: LIST
47276: LIST
47277: LIST
47278: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
47279: LD_ADDR_VAR 0 61
47283: PUSH
47284: LD_INT 0
47286: PUSH
47287: LD_INT 0
47289: PUSH
47290: EMPTY
47291: LIST
47292: LIST
47293: PUSH
47294: LD_INT 0
47296: PUSH
47297: LD_INT 1
47299: NEG
47300: PUSH
47301: EMPTY
47302: LIST
47303: LIST
47304: PUSH
47305: LD_INT 1
47307: PUSH
47308: LD_INT 0
47310: PUSH
47311: EMPTY
47312: LIST
47313: LIST
47314: PUSH
47315: LD_INT 1
47317: PUSH
47318: LD_INT 1
47320: PUSH
47321: EMPTY
47322: LIST
47323: LIST
47324: PUSH
47325: LD_INT 0
47327: PUSH
47328: LD_INT 1
47330: PUSH
47331: EMPTY
47332: LIST
47333: LIST
47334: PUSH
47335: LD_INT 1
47337: NEG
47338: PUSH
47339: LD_INT 0
47341: PUSH
47342: EMPTY
47343: LIST
47344: LIST
47345: PUSH
47346: LD_INT 1
47348: NEG
47349: PUSH
47350: LD_INT 1
47352: NEG
47353: PUSH
47354: EMPTY
47355: LIST
47356: LIST
47357: PUSH
47358: EMPTY
47359: LIST
47360: LIST
47361: LIST
47362: LIST
47363: LIST
47364: LIST
47365: LIST
47366: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
47367: LD_ADDR_VAR 0 62
47371: PUSH
47372: LD_INT 0
47374: PUSH
47375: LD_INT 0
47377: PUSH
47378: EMPTY
47379: LIST
47380: LIST
47381: PUSH
47382: LD_INT 0
47384: PUSH
47385: LD_INT 1
47387: NEG
47388: PUSH
47389: EMPTY
47390: LIST
47391: LIST
47392: PUSH
47393: LD_INT 1
47395: PUSH
47396: LD_INT 0
47398: PUSH
47399: EMPTY
47400: LIST
47401: LIST
47402: PUSH
47403: LD_INT 1
47405: PUSH
47406: LD_INT 1
47408: PUSH
47409: EMPTY
47410: LIST
47411: LIST
47412: PUSH
47413: LD_INT 0
47415: PUSH
47416: LD_INT 1
47418: PUSH
47419: EMPTY
47420: LIST
47421: LIST
47422: PUSH
47423: LD_INT 1
47425: NEG
47426: PUSH
47427: LD_INT 0
47429: PUSH
47430: EMPTY
47431: LIST
47432: LIST
47433: PUSH
47434: LD_INT 1
47436: NEG
47437: PUSH
47438: LD_INT 1
47440: NEG
47441: PUSH
47442: EMPTY
47443: LIST
47444: LIST
47445: PUSH
47446: EMPTY
47447: LIST
47448: LIST
47449: LIST
47450: LIST
47451: LIST
47452: LIST
47453: LIST
47454: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
47455: LD_ADDR_VAR 0 63
47459: PUSH
47460: LD_INT 0
47462: PUSH
47463: LD_INT 0
47465: PUSH
47466: EMPTY
47467: LIST
47468: LIST
47469: PUSH
47470: LD_INT 0
47472: PUSH
47473: LD_INT 1
47475: NEG
47476: PUSH
47477: EMPTY
47478: LIST
47479: LIST
47480: PUSH
47481: LD_INT 1
47483: PUSH
47484: LD_INT 0
47486: PUSH
47487: EMPTY
47488: LIST
47489: LIST
47490: PUSH
47491: LD_INT 1
47493: PUSH
47494: LD_INT 1
47496: PUSH
47497: EMPTY
47498: LIST
47499: LIST
47500: PUSH
47501: LD_INT 0
47503: PUSH
47504: LD_INT 1
47506: PUSH
47507: EMPTY
47508: LIST
47509: LIST
47510: PUSH
47511: LD_INT 1
47513: NEG
47514: PUSH
47515: LD_INT 0
47517: PUSH
47518: EMPTY
47519: LIST
47520: LIST
47521: PUSH
47522: LD_INT 1
47524: NEG
47525: PUSH
47526: LD_INT 1
47528: NEG
47529: PUSH
47530: EMPTY
47531: LIST
47532: LIST
47533: PUSH
47534: EMPTY
47535: LIST
47536: LIST
47537: LIST
47538: LIST
47539: LIST
47540: LIST
47541: LIST
47542: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
47543: LD_ADDR_VAR 0 64
47547: PUSH
47548: LD_INT 0
47550: PUSH
47551: LD_INT 0
47553: PUSH
47554: EMPTY
47555: LIST
47556: LIST
47557: PUSH
47558: LD_INT 0
47560: PUSH
47561: LD_INT 1
47563: NEG
47564: PUSH
47565: EMPTY
47566: LIST
47567: LIST
47568: PUSH
47569: LD_INT 1
47571: PUSH
47572: LD_INT 0
47574: PUSH
47575: EMPTY
47576: LIST
47577: LIST
47578: PUSH
47579: LD_INT 1
47581: PUSH
47582: LD_INT 1
47584: PUSH
47585: EMPTY
47586: LIST
47587: LIST
47588: PUSH
47589: LD_INT 0
47591: PUSH
47592: LD_INT 1
47594: PUSH
47595: EMPTY
47596: LIST
47597: LIST
47598: PUSH
47599: LD_INT 1
47601: NEG
47602: PUSH
47603: LD_INT 0
47605: PUSH
47606: EMPTY
47607: LIST
47608: LIST
47609: PUSH
47610: LD_INT 1
47612: NEG
47613: PUSH
47614: LD_INT 1
47616: NEG
47617: PUSH
47618: EMPTY
47619: LIST
47620: LIST
47621: PUSH
47622: EMPTY
47623: LIST
47624: LIST
47625: LIST
47626: LIST
47627: LIST
47628: LIST
47629: LIST
47630: ST_TO_ADDR
// end ; 1 :
47631: GO 53528
47633: LD_INT 1
47635: DOUBLE
47636: EQUAL
47637: IFTRUE 47641
47639: GO 50264
47641: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
47642: LD_ADDR_VAR 0 11
47646: PUSH
47647: LD_INT 1
47649: NEG
47650: PUSH
47651: LD_INT 3
47653: NEG
47654: PUSH
47655: EMPTY
47656: LIST
47657: LIST
47658: PUSH
47659: LD_INT 0
47661: PUSH
47662: LD_INT 3
47664: NEG
47665: PUSH
47666: EMPTY
47667: LIST
47668: LIST
47669: PUSH
47670: LD_INT 1
47672: PUSH
47673: LD_INT 2
47675: NEG
47676: PUSH
47677: EMPTY
47678: LIST
47679: LIST
47680: PUSH
47681: EMPTY
47682: LIST
47683: LIST
47684: LIST
47685: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
47686: LD_ADDR_VAR 0 12
47690: PUSH
47691: LD_INT 2
47693: PUSH
47694: LD_INT 1
47696: NEG
47697: PUSH
47698: EMPTY
47699: LIST
47700: LIST
47701: PUSH
47702: LD_INT 3
47704: PUSH
47705: LD_INT 0
47707: PUSH
47708: EMPTY
47709: LIST
47710: LIST
47711: PUSH
47712: LD_INT 3
47714: PUSH
47715: LD_INT 1
47717: PUSH
47718: EMPTY
47719: LIST
47720: LIST
47721: PUSH
47722: EMPTY
47723: LIST
47724: LIST
47725: LIST
47726: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
47727: LD_ADDR_VAR 0 13
47731: PUSH
47732: LD_INT 3
47734: PUSH
47735: LD_INT 2
47737: PUSH
47738: EMPTY
47739: LIST
47740: LIST
47741: PUSH
47742: LD_INT 3
47744: PUSH
47745: LD_INT 3
47747: PUSH
47748: EMPTY
47749: LIST
47750: LIST
47751: PUSH
47752: LD_INT 2
47754: PUSH
47755: LD_INT 3
47757: PUSH
47758: EMPTY
47759: LIST
47760: LIST
47761: PUSH
47762: EMPTY
47763: LIST
47764: LIST
47765: LIST
47766: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
47767: LD_ADDR_VAR 0 14
47771: PUSH
47772: LD_INT 1
47774: PUSH
47775: LD_INT 3
47777: PUSH
47778: EMPTY
47779: LIST
47780: LIST
47781: PUSH
47782: LD_INT 0
47784: PUSH
47785: LD_INT 3
47787: PUSH
47788: EMPTY
47789: LIST
47790: LIST
47791: PUSH
47792: LD_INT 1
47794: NEG
47795: PUSH
47796: LD_INT 2
47798: PUSH
47799: EMPTY
47800: LIST
47801: LIST
47802: PUSH
47803: EMPTY
47804: LIST
47805: LIST
47806: LIST
47807: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
47808: LD_ADDR_VAR 0 15
47812: PUSH
47813: LD_INT 2
47815: NEG
47816: PUSH
47817: LD_INT 1
47819: PUSH
47820: EMPTY
47821: LIST
47822: LIST
47823: PUSH
47824: LD_INT 3
47826: NEG
47827: PUSH
47828: LD_INT 0
47830: PUSH
47831: EMPTY
47832: LIST
47833: LIST
47834: PUSH
47835: LD_INT 3
47837: NEG
47838: PUSH
47839: LD_INT 1
47841: NEG
47842: PUSH
47843: EMPTY
47844: LIST
47845: LIST
47846: PUSH
47847: EMPTY
47848: LIST
47849: LIST
47850: LIST
47851: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47852: LD_ADDR_VAR 0 16
47856: PUSH
47857: LD_INT 2
47859: NEG
47860: PUSH
47861: LD_INT 3
47863: NEG
47864: PUSH
47865: EMPTY
47866: LIST
47867: LIST
47868: PUSH
47869: LD_INT 3
47871: NEG
47872: PUSH
47873: LD_INT 2
47875: NEG
47876: PUSH
47877: EMPTY
47878: LIST
47879: LIST
47880: PUSH
47881: LD_INT 3
47883: NEG
47884: PUSH
47885: LD_INT 3
47887: NEG
47888: PUSH
47889: EMPTY
47890: LIST
47891: LIST
47892: PUSH
47893: EMPTY
47894: LIST
47895: LIST
47896: LIST
47897: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
47898: LD_ADDR_VAR 0 17
47902: PUSH
47903: LD_INT 1
47905: NEG
47906: PUSH
47907: LD_INT 3
47909: NEG
47910: PUSH
47911: EMPTY
47912: LIST
47913: LIST
47914: PUSH
47915: LD_INT 0
47917: PUSH
47918: LD_INT 3
47920: NEG
47921: PUSH
47922: EMPTY
47923: LIST
47924: LIST
47925: PUSH
47926: LD_INT 1
47928: PUSH
47929: LD_INT 2
47931: NEG
47932: PUSH
47933: EMPTY
47934: LIST
47935: LIST
47936: PUSH
47937: EMPTY
47938: LIST
47939: LIST
47940: LIST
47941: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
47942: LD_ADDR_VAR 0 18
47946: PUSH
47947: LD_INT 2
47949: PUSH
47950: LD_INT 1
47952: NEG
47953: PUSH
47954: EMPTY
47955: LIST
47956: LIST
47957: PUSH
47958: LD_INT 3
47960: PUSH
47961: LD_INT 0
47963: PUSH
47964: EMPTY
47965: LIST
47966: LIST
47967: PUSH
47968: LD_INT 3
47970: PUSH
47971: LD_INT 1
47973: PUSH
47974: EMPTY
47975: LIST
47976: LIST
47977: PUSH
47978: EMPTY
47979: LIST
47980: LIST
47981: LIST
47982: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
47983: LD_ADDR_VAR 0 19
47987: PUSH
47988: LD_INT 3
47990: PUSH
47991: LD_INT 2
47993: PUSH
47994: EMPTY
47995: LIST
47996: LIST
47997: PUSH
47998: LD_INT 3
48000: PUSH
48001: LD_INT 3
48003: PUSH
48004: EMPTY
48005: LIST
48006: LIST
48007: PUSH
48008: LD_INT 2
48010: PUSH
48011: LD_INT 3
48013: PUSH
48014: EMPTY
48015: LIST
48016: LIST
48017: PUSH
48018: EMPTY
48019: LIST
48020: LIST
48021: LIST
48022: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
48023: LD_ADDR_VAR 0 20
48027: PUSH
48028: LD_INT 1
48030: PUSH
48031: LD_INT 3
48033: PUSH
48034: EMPTY
48035: LIST
48036: LIST
48037: PUSH
48038: LD_INT 0
48040: PUSH
48041: LD_INT 3
48043: PUSH
48044: EMPTY
48045: LIST
48046: LIST
48047: PUSH
48048: LD_INT 1
48050: NEG
48051: PUSH
48052: LD_INT 2
48054: PUSH
48055: EMPTY
48056: LIST
48057: LIST
48058: PUSH
48059: EMPTY
48060: LIST
48061: LIST
48062: LIST
48063: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
48064: LD_ADDR_VAR 0 21
48068: PUSH
48069: LD_INT 2
48071: NEG
48072: PUSH
48073: LD_INT 1
48075: PUSH
48076: EMPTY
48077: LIST
48078: LIST
48079: PUSH
48080: LD_INT 3
48082: NEG
48083: PUSH
48084: LD_INT 0
48086: PUSH
48087: EMPTY
48088: LIST
48089: LIST
48090: PUSH
48091: LD_INT 3
48093: NEG
48094: PUSH
48095: LD_INT 1
48097: NEG
48098: PUSH
48099: EMPTY
48100: LIST
48101: LIST
48102: PUSH
48103: EMPTY
48104: LIST
48105: LIST
48106: LIST
48107: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48108: LD_ADDR_VAR 0 22
48112: PUSH
48113: LD_INT 2
48115: NEG
48116: PUSH
48117: LD_INT 3
48119: NEG
48120: PUSH
48121: EMPTY
48122: LIST
48123: LIST
48124: PUSH
48125: LD_INT 3
48127: NEG
48128: PUSH
48129: LD_INT 2
48131: NEG
48132: PUSH
48133: EMPTY
48134: LIST
48135: LIST
48136: PUSH
48137: LD_INT 3
48139: NEG
48140: PUSH
48141: LD_INT 3
48143: NEG
48144: PUSH
48145: EMPTY
48146: LIST
48147: LIST
48148: PUSH
48149: EMPTY
48150: LIST
48151: LIST
48152: LIST
48153: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
48154: LD_ADDR_VAR 0 23
48158: PUSH
48159: LD_INT 0
48161: PUSH
48162: LD_INT 3
48164: NEG
48165: PUSH
48166: EMPTY
48167: LIST
48168: LIST
48169: PUSH
48170: LD_INT 1
48172: NEG
48173: PUSH
48174: LD_INT 4
48176: NEG
48177: PUSH
48178: EMPTY
48179: LIST
48180: LIST
48181: PUSH
48182: LD_INT 1
48184: PUSH
48185: LD_INT 3
48187: NEG
48188: PUSH
48189: EMPTY
48190: LIST
48191: LIST
48192: PUSH
48193: EMPTY
48194: LIST
48195: LIST
48196: LIST
48197: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
48198: LD_ADDR_VAR 0 24
48202: PUSH
48203: LD_INT 3
48205: PUSH
48206: LD_INT 0
48208: PUSH
48209: EMPTY
48210: LIST
48211: LIST
48212: PUSH
48213: LD_INT 3
48215: PUSH
48216: LD_INT 1
48218: NEG
48219: PUSH
48220: EMPTY
48221: LIST
48222: LIST
48223: PUSH
48224: LD_INT 4
48226: PUSH
48227: LD_INT 1
48229: PUSH
48230: EMPTY
48231: LIST
48232: LIST
48233: PUSH
48234: EMPTY
48235: LIST
48236: LIST
48237: LIST
48238: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
48239: LD_ADDR_VAR 0 25
48243: PUSH
48244: LD_INT 3
48246: PUSH
48247: LD_INT 3
48249: PUSH
48250: EMPTY
48251: LIST
48252: LIST
48253: PUSH
48254: LD_INT 4
48256: PUSH
48257: LD_INT 3
48259: PUSH
48260: EMPTY
48261: LIST
48262: LIST
48263: PUSH
48264: LD_INT 3
48266: PUSH
48267: LD_INT 4
48269: PUSH
48270: EMPTY
48271: LIST
48272: LIST
48273: PUSH
48274: EMPTY
48275: LIST
48276: LIST
48277: LIST
48278: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
48279: LD_ADDR_VAR 0 26
48283: PUSH
48284: LD_INT 0
48286: PUSH
48287: LD_INT 3
48289: PUSH
48290: EMPTY
48291: LIST
48292: LIST
48293: PUSH
48294: LD_INT 1
48296: PUSH
48297: LD_INT 4
48299: PUSH
48300: EMPTY
48301: LIST
48302: LIST
48303: PUSH
48304: LD_INT 1
48306: NEG
48307: PUSH
48308: LD_INT 3
48310: PUSH
48311: EMPTY
48312: LIST
48313: LIST
48314: PUSH
48315: EMPTY
48316: LIST
48317: LIST
48318: LIST
48319: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
48320: LD_ADDR_VAR 0 27
48324: PUSH
48325: LD_INT 3
48327: NEG
48328: PUSH
48329: LD_INT 0
48331: PUSH
48332: EMPTY
48333: LIST
48334: LIST
48335: PUSH
48336: LD_INT 3
48338: NEG
48339: PUSH
48340: LD_INT 1
48342: PUSH
48343: EMPTY
48344: LIST
48345: LIST
48346: PUSH
48347: LD_INT 4
48349: NEG
48350: PUSH
48351: LD_INT 1
48353: NEG
48354: PUSH
48355: EMPTY
48356: LIST
48357: LIST
48358: PUSH
48359: EMPTY
48360: LIST
48361: LIST
48362: LIST
48363: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
48364: LD_ADDR_VAR 0 28
48368: PUSH
48369: LD_INT 3
48371: NEG
48372: PUSH
48373: LD_INT 3
48375: NEG
48376: PUSH
48377: EMPTY
48378: LIST
48379: LIST
48380: PUSH
48381: LD_INT 3
48383: NEG
48384: PUSH
48385: LD_INT 4
48387: NEG
48388: PUSH
48389: EMPTY
48390: LIST
48391: LIST
48392: PUSH
48393: LD_INT 4
48395: NEG
48396: PUSH
48397: LD_INT 3
48399: NEG
48400: PUSH
48401: EMPTY
48402: LIST
48403: LIST
48404: PUSH
48405: EMPTY
48406: LIST
48407: LIST
48408: LIST
48409: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
48410: LD_ADDR_VAR 0 29
48414: PUSH
48415: LD_INT 1
48417: NEG
48418: PUSH
48419: LD_INT 3
48421: NEG
48422: PUSH
48423: EMPTY
48424: LIST
48425: LIST
48426: PUSH
48427: LD_INT 0
48429: PUSH
48430: LD_INT 3
48432: NEG
48433: PUSH
48434: EMPTY
48435: LIST
48436: LIST
48437: PUSH
48438: LD_INT 1
48440: PUSH
48441: LD_INT 2
48443: NEG
48444: PUSH
48445: EMPTY
48446: LIST
48447: LIST
48448: PUSH
48449: LD_INT 1
48451: NEG
48452: PUSH
48453: LD_INT 4
48455: NEG
48456: PUSH
48457: EMPTY
48458: LIST
48459: LIST
48460: PUSH
48461: LD_INT 0
48463: PUSH
48464: LD_INT 4
48466: NEG
48467: PUSH
48468: EMPTY
48469: LIST
48470: LIST
48471: PUSH
48472: LD_INT 1
48474: PUSH
48475: LD_INT 3
48477: NEG
48478: PUSH
48479: EMPTY
48480: LIST
48481: LIST
48482: PUSH
48483: LD_INT 1
48485: NEG
48486: PUSH
48487: LD_INT 5
48489: NEG
48490: PUSH
48491: EMPTY
48492: LIST
48493: LIST
48494: PUSH
48495: LD_INT 0
48497: PUSH
48498: LD_INT 5
48500: NEG
48501: PUSH
48502: EMPTY
48503: LIST
48504: LIST
48505: PUSH
48506: LD_INT 1
48508: PUSH
48509: LD_INT 4
48511: NEG
48512: PUSH
48513: EMPTY
48514: LIST
48515: LIST
48516: PUSH
48517: LD_INT 1
48519: NEG
48520: PUSH
48521: LD_INT 6
48523: NEG
48524: PUSH
48525: EMPTY
48526: LIST
48527: LIST
48528: PUSH
48529: LD_INT 0
48531: PUSH
48532: LD_INT 6
48534: NEG
48535: PUSH
48536: EMPTY
48537: LIST
48538: LIST
48539: PUSH
48540: LD_INT 1
48542: PUSH
48543: LD_INT 5
48545: NEG
48546: PUSH
48547: EMPTY
48548: LIST
48549: LIST
48550: PUSH
48551: EMPTY
48552: LIST
48553: LIST
48554: LIST
48555: LIST
48556: LIST
48557: LIST
48558: LIST
48559: LIST
48560: LIST
48561: LIST
48562: LIST
48563: LIST
48564: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
48565: LD_ADDR_VAR 0 30
48569: PUSH
48570: LD_INT 2
48572: PUSH
48573: LD_INT 1
48575: NEG
48576: PUSH
48577: EMPTY
48578: LIST
48579: LIST
48580: PUSH
48581: LD_INT 3
48583: PUSH
48584: LD_INT 0
48586: PUSH
48587: EMPTY
48588: LIST
48589: LIST
48590: PUSH
48591: LD_INT 3
48593: PUSH
48594: LD_INT 1
48596: PUSH
48597: EMPTY
48598: LIST
48599: LIST
48600: PUSH
48601: LD_INT 3
48603: PUSH
48604: LD_INT 1
48606: NEG
48607: PUSH
48608: EMPTY
48609: LIST
48610: LIST
48611: PUSH
48612: LD_INT 4
48614: PUSH
48615: LD_INT 0
48617: PUSH
48618: EMPTY
48619: LIST
48620: LIST
48621: PUSH
48622: LD_INT 4
48624: PUSH
48625: LD_INT 1
48627: PUSH
48628: EMPTY
48629: LIST
48630: LIST
48631: PUSH
48632: LD_INT 4
48634: PUSH
48635: LD_INT 1
48637: NEG
48638: PUSH
48639: EMPTY
48640: LIST
48641: LIST
48642: PUSH
48643: LD_INT 5
48645: PUSH
48646: LD_INT 0
48648: PUSH
48649: EMPTY
48650: LIST
48651: LIST
48652: PUSH
48653: LD_INT 5
48655: PUSH
48656: LD_INT 1
48658: PUSH
48659: EMPTY
48660: LIST
48661: LIST
48662: PUSH
48663: LD_INT 5
48665: PUSH
48666: LD_INT 1
48668: NEG
48669: PUSH
48670: EMPTY
48671: LIST
48672: LIST
48673: PUSH
48674: LD_INT 6
48676: PUSH
48677: LD_INT 0
48679: PUSH
48680: EMPTY
48681: LIST
48682: LIST
48683: PUSH
48684: LD_INT 6
48686: PUSH
48687: LD_INT 1
48689: PUSH
48690: EMPTY
48691: LIST
48692: LIST
48693: PUSH
48694: EMPTY
48695: LIST
48696: LIST
48697: LIST
48698: LIST
48699: LIST
48700: LIST
48701: LIST
48702: LIST
48703: LIST
48704: LIST
48705: LIST
48706: LIST
48707: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
48708: LD_ADDR_VAR 0 31
48712: PUSH
48713: LD_INT 3
48715: PUSH
48716: LD_INT 2
48718: PUSH
48719: EMPTY
48720: LIST
48721: LIST
48722: PUSH
48723: LD_INT 3
48725: PUSH
48726: LD_INT 3
48728: PUSH
48729: EMPTY
48730: LIST
48731: LIST
48732: PUSH
48733: LD_INT 2
48735: PUSH
48736: LD_INT 3
48738: PUSH
48739: EMPTY
48740: LIST
48741: LIST
48742: PUSH
48743: LD_INT 4
48745: PUSH
48746: LD_INT 3
48748: PUSH
48749: EMPTY
48750: LIST
48751: LIST
48752: PUSH
48753: LD_INT 4
48755: PUSH
48756: LD_INT 4
48758: PUSH
48759: EMPTY
48760: LIST
48761: LIST
48762: PUSH
48763: LD_INT 3
48765: PUSH
48766: LD_INT 4
48768: PUSH
48769: EMPTY
48770: LIST
48771: LIST
48772: PUSH
48773: LD_INT 5
48775: PUSH
48776: LD_INT 4
48778: PUSH
48779: EMPTY
48780: LIST
48781: LIST
48782: PUSH
48783: LD_INT 5
48785: PUSH
48786: LD_INT 5
48788: PUSH
48789: EMPTY
48790: LIST
48791: LIST
48792: PUSH
48793: LD_INT 4
48795: PUSH
48796: LD_INT 5
48798: PUSH
48799: EMPTY
48800: LIST
48801: LIST
48802: PUSH
48803: LD_INT 6
48805: PUSH
48806: LD_INT 5
48808: PUSH
48809: EMPTY
48810: LIST
48811: LIST
48812: PUSH
48813: LD_INT 6
48815: PUSH
48816: LD_INT 6
48818: PUSH
48819: EMPTY
48820: LIST
48821: LIST
48822: PUSH
48823: LD_INT 5
48825: PUSH
48826: LD_INT 6
48828: PUSH
48829: EMPTY
48830: LIST
48831: LIST
48832: PUSH
48833: EMPTY
48834: LIST
48835: LIST
48836: LIST
48837: LIST
48838: LIST
48839: LIST
48840: LIST
48841: LIST
48842: LIST
48843: LIST
48844: LIST
48845: LIST
48846: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
48847: LD_ADDR_VAR 0 32
48851: PUSH
48852: LD_INT 1
48854: PUSH
48855: LD_INT 3
48857: PUSH
48858: EMPTY
48859: LIST
48860: LIST
48861: PUSH
48862: LD_INT 0
48864: PUSH
48865: LD_INT 3
48867: PUSH
48868: EMPTY
48869: LIST
48870: LIST
48871: PUSH
48872: LD_INT 1
48874: NEG
48875: PUSH
48876: LD_INT 2
48878: PUSH
48879: EMPTY
48880: LIST
48881: LIST
48882: PUSH
48883: LD_INT 1
48885: PUSH
48886: LD_INT 4
48888: PUSH
48889: EMPTY
48890: LIST
48891: LIST
48892: PUSH
48893: LD_INT 0
48895: PUSH
48896: LD_INT 4
48898: PUSH
48899: EMPTY
48900: LIST
48901: LIST
48902: PUSH
48903: LD_INT 1
48905: NEG
48906: PUSH
48907: LD_INT 3
48909: PUSH
48910: EMPTY
48911: LIST
48912: LIST
48913: PUSH
48914: LD_INT 1
48916: PUSH
48917: LD_INT 5
48919: PUSH
48920: EMPTY
48921: LIST
48922: LIST
48923: PUSH
48924: LD_INT 0
48926: PUSH
48927: LD_INT 5
48929: PUSH
48930: EMPTY
48931: LIST
48932: LIST
48933: PUSH
48934: LD_INT 1
48936: NEG
48937: PUSH
48938: LD_INT 4
48940: PUSH
48941: EMPTY
48942: LIST
48943: LIST
48944: PUSH
48945: LD_INT 1
48947: PUSH
48948: LD_INT 6
48950: PUSH
48951: EMPTY
48952: LIST
48953: LIST
48954: PUSH
48955: LD_INT 0
48957: PUSH
48958: LD_INT 6
48960: PUSH
48961: EMPTY
48962: LIST
48963: LIST
48964: PUSH
48965: LD_INT 1
48967: NEG
48968: PUSH
48969: LD_INT 5
48971: PUSH
48972: EMPTY
48973: LIST
48974: LIST
48975: PUSH
48976: EMPTY
48977: LIST
48978: LIST
48979: LIST
48980: LIST
48981: LIST
48982: LIST
48983: LIST
48984: LIST
48985: LIST
48986: LIST
48987: LIST
48988: LIST
48989: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
48990: LD_ADDR_VAR 0 33
48994: PUSH
48995: LD_INT 2
48997: NEG
48998: PUSH
48999: LD_INT 1
49001: PUSH
49002: EMPTY
49003: LIST
49004: LIST
49005: PUSH
49006: LD_INT 3
49008: NEG
49009: PUSH
49010: LD_INT 0
49012: PUSH
49013: EMPTY
49014: LIST
49015: LIST
49016: PUSH
49017: LD_INT 3
49019: NEG
49020: PUSH
49021: LD_INT 1
49023: NEG
49024: PUSH
49025: EMPTY
49026: LIST
49027: LIST
49028: PUSH
49029: LD_INT 3
49031: NEG
49032: PUSH
49033: LD_INT 1
49035: PUSH
49036: EMPTY
49037: LIST
49038: LIST
49039: PUSH
49040: LD_INT 4
49042: NEG
49043: PUSH
49044: LD_INT 0
49046: PUSH
49047: EMPTY
49048: LIST
49049: LIST
49050: PUSH
49051: LD_INT 4
49053: NEG
49054: PUSH
49055: LD_INT 1
49057: NEG
49058: PUSH
49059: EMPTY
49060: LIST
49061: LIST
49062: PUSH
49063: LD_INT 4
49065: NEG
49066: PUSH
49067: LD_INT 1
49069: PUSH
49070: EMPTY
49071: LIST
49072: LIST
49073: PUSH
49074: LD_INT 5
49076: NEG
49077: PUSH
49078: LD_INT 0
49080: PUSH
49081: EMPTY
49082: LIST
49083: LIST
49084: PUSH
49085: LD_INT 5
49087: NEG
49088: PUSH
49089: LD_INT 1
49091: NEG
49092: PUSH
49093: EMPTY
49094: LIST
49095: LIST
49096: PUSH
49097: LD_INT 5
49099: NEG
49100: PUSH
49101: LD_INT 1
49103: PUSH
49104: EMPTY
49105: LIST
49106: LIST
49107: PUSH
49108: LD_INT 6
49110: NEG
49111: PUSH
49112: LD_INT 0
49114: PUSH
49115: EMPTY
49116: LIST
49117: LIST
49118: PUSH
49119: LD_INT 6
49121: NEG
49122: PUSH
49123: LD_INT 1
49125: NEG
49126: PUSH
49127: EMPTY
49128: LIST
49129: LIST
49130: PUSH
49131: EMPTY
49132: LIST
49133: LIST
49134: LIST
49135: LIST
49136: LIST
49137: LIST
49138: LIST
49139: LIST
49140: LIST
49141: LIST
49142: LIST
49143: LIST
49144: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
49145: LD_ADDR_VAR 0 34
49149: PUSH
49150: LD_INT 2
49152: NEG
49153: PUSH
49154: LD_INT 3
49156: NEG
49157: PUSH
49158: EMPTY
49159: LIST
49160: LIST
49161: PUSH
49162: LD_INT 3
49164: NEG
49165: PUSH
49166: LD_INT 2
49168: NEG
49169: PUSH
49170: EMPTY
49171: LIST
49172: LIST
49173: PUSH
49174: LD_INT 3
49176: NEG
49177: PUSH
49178: LD_INT 3
49180: NEG
49181: PUSH
49182: EMPTY
49183: LIST
49184: LIST
49185: PUSH
49186: LD_INT 3
49188: NEG
49189: PUSH
49190: LD_INT 4
49192: NEG
49193: PUSH
49194: EMPTY
49195: LIST
49196: LIST
49197: PUSH
49198: LD_INT 4
49200: NEG
49201: PUSH
49202: LD_INT 3
49204: NEG
49205: PUSH
49206: EMPTY
49207: LIST
49208: LIST
49209: PUSH
49210: LD_INT 4
49212: NEG
49213: PUSH
49214: LD_INT 4
49216: NEG
49217: PUSH
49218: EMPTY
49219: LIST
49220: LIST
49221: PUSH
49222: LD_INT 4
49224: NEG
49225: PUSH
49226: LD_INT 5
49228: NEG
49229: PUSH
49230: EMPTY
49231: LIST
49232: LIST
49233: PUSH
49234: LD_INT 5
49236: NEG
49237: PUSH
49238: LD_INT 4
49240: NEG
49241: PUSH
49242: EMPTY
49243: LIST
49244: LIST
49245: PUSH
49246: LD_INT 5
49248: NEG
49249: PUSH
49250: LD_INT 5
49252: NEG
49253: PUSH
49254: EMPTY
49255: LIST
49256: LIST
49257: PUSH
49258: LD_INT 5
49260: NEG
49261: PUSH
49262: LD_INT 6
49264: NEG
49265: PUSH
49266: EMPTY
49267: LIST
49268: LIST
49269: PUSH
49270: LD_INT 6
49272: NEG
49273: PUSH
49274: LD_INT 5
49276: NEG
49277: PUSH
49278: EMPTY
49279: LIST
49280: LIST
49281: PUSH
49282: LD_INT 6
49284: NEG
49285: PUSH
49286: LD_INT 6
49288: NEG
49289: PUSH
49290: EMPTY
49291: LIST
49292: LIST
49293: PUSH
49294: EMPTY
49295: LIST
49296: LIST
49297: LIST
49298: LIST
49299: LIST
49300: LIST
49301: LIST
49302: LIST
49303: LIST
49304: LIST
49305: LIST
49306: LIST
49307: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
49308: LD_ADDR_VAR 0 41
49312: PUSH
49313: LD_INT 0
49315: PUSH
49316: LD_INT 2
49318: NEG
49319: PUSH
49320: EMPTY
49321: LIST
49322: LIST
49323: PUSH
49324: LD_INT 1
49326: NEG
49327: PUSH
49328: LD_INT 3
49330: NEG
49331: PUSH
49332: EMPTY
49333: LIST
49334: LIST
49335: PUSH
49336: LD_INT 1
49338: PUSH
49339: LD_INT 2
49341: NEG
49342: PUSH
49343: EMPTY
49344: LIST
49345: LIST
49346: PUSH
49347: EMPTY
49348: LIST
49349: LIST
49350: LIST
49351: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
49352: LD_ADDR_VAR 0 42
49356: PUSH
49357: LD_INT 2
49359: PUSH
49360: LD_INT 0
49362: PUSH
49363: EMPTY
49364: LIST
49365: LIST
49366: PUSH
49367: LD_INT 2
49369: PUSH
49370: LD_INT 1
49372: NEG
49373: PUSH
49374: EMPTY
49375: LIST
49376: LIST
49377: PUSH
49378: LD_INT 3
49380: PUSH
49381: LD_INT 1
49383: PUSH
49384: EMPTY
49385: LIST
49386: LIST
49387: PUSH
49388: EMPTY
49389: LIST
49390: LIST
49391: LIST
49392: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
49393: LD_ADDR_VAR 0 43
49397: PUSH
49398: LD_INT 2
49400: PUSH
49401: LD_INT 2
49403: PUSH
49404: EMPTY
49405: LIST
49406: LIST
49407: PUSH
49408: LD_INT 3
49410: PUSH
49411: LD_INT 2
49413: PUSH
49414: EMPTY
49415: LIST
49416: LIST
49417: PUSH
49418: LD_INT 2
49420: PUSH
49421: LD_INT 3
49423: PUSH
49424: EMPTY
49425: LIST
49426: LIST
49427: PUSH
49428: EMPTY
49429: LIST
49430: LIST
49431: LIST
49432: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
49433: LD_ADDR_VAR 0 44
49437: PUSH
49438: LD_INT 0
49440: PUSH
49441: LD_INT 2
49443: PUSH
49444: EMPTY
49445: LIST
49446: LIST
49447: PUSH
49448: LD_INT 1
49450: PUSH
49451: LD_INT 3
49453: PUSH
49454: EMPTY
49455: LIST
49456: LIST
49457: PUSH
49458: LD_INT 1
49460: NEG
49461: PUSH
49462: LD_INT 2
49464: PUSH
49465: EMPTY
49466: LIST
49467: LIST
49468: PUSH
49469: EMPTY
49470: LIST
49471: LIST
49472: LIST
49473: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
49474: LD_ADDR_VAR 0 45
49478: PUSH
49479: LD_INT 2
49481: NEG
49482: PUSH
49483: LD_INT 0
49485: PUSH
49486: EMPTY
49487: LIST
49488: LIST
49489: PUSH
49490: LD_INT 2
49492: NEG
49493: PUSH
49494: LD_INT 1
49496: PUSH
49497: EMPTY
49498: LIST
49499: LIST
49500: PUSH
49501: LD_INT 3
49503: NEG
49504: PUSH
49505: LD_INT 1
49507: NEG
49508: PUSH
49509: EMPTY
49510: LIST
49511: LIST
49512: PUSH
49513: EMPTY
49514: LIST
49515: LIST
49516: LIST
49517: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
49518: LD_ADDR_VAR 0 46
49522: PUSH
49523: LD_INT 2
49525: NEG
49526: PUSH
49527: LD_INT 2
49529: NEG
49530: PUSH
49531: EMPTY
49532: LIST
49533: LIST
49534: PUSH
49535: LD_INT 2
49537: NEG
49538: PUSH
49539: LD_INT 3
49541: NEG
49542: PUSH
49543: EMPTY
49544: LIST
49545: LIST
49546: PUSH
49547: LD_INT 3
49549: NEG
49550: PUSH
49551: LD_INT 2
49553: NEG
49554: PUSH
49555: EMPTY
49556: LIST
49557: LIST
49558: PUSH
49559: EMPTY
49560: LIST
49561: LIST
49562: LIST
49563: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
49564: LD_ADDR_VAR 0 47
49568: PUSH
49569: LD_INT 2
49571: NEG
49572: PUSH
49573: LD_INT 3
49575: NEG
49576: PUSH
49577: EMPTY
49578: LIST
49579: LIST
49580: PUSH
49581: LD_INT 1
49583: NEG
49584: PUSH
49585: LD_INT 3
49587: NEG
49588: PUSH
49589: EMPTY
49590: LIST
49591: LIST
49592: PUSH
49593: EMPTY
49594: LIST
49595: LIST
49596: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
49597: LD_ADDR_VAR 0 48
49601: PUSH
49602: LD_INT 1
49604: PUSH
49605: LD_INT 2
49607: NEG
49608: PUSH
49609: EMPTY
49610: LIST
49611: LIST
49612: PUSH
49613: LD_INT 2
49615: PUSH
49616: LD_INT 1
49618: NEG
49619: PUSH
49620: EMPTY
49621: LIST
49622: LIST
49623: PUSH
49624: EMPTY
49625: LIST
49626: LIST
49627: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
49628: LD_ADDR_VAR 0 49
49632: PUSH
49633: LD_INT 3
49635: PUSH
49636: LD_INT 1
49638: PUSH
49639: EMPTY
49640: LIST
49641: LIST
49642: PUSH
49643: LD_INT 3
49645: PUSH
49646: LD_INT 2
49648: PUSH
49649: EMPTY
49650: LIST
49651: LIST
49652: PUSH
49653: EMPTY
49654: LIST
49655: LIST
49656: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
49657: LD_ADDR_VAR 0 50
49661: PUSH
49662: LD_INT 2
49664: PUSH
49665: LD_INT 3
49667: PUSH
49668: EMPTY
49669: LIST
49670: LIST
49671: PUSH
49672: LD_INT 1
49674: PUSH
49675: LD_INT 3
49677: PUSH
49678: EMPTY
49679: LIST
49680: LIST
49681: PUSH
49682: EMPTY
49683: LIST
49684: LIST
49685: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
49686: LD_ADDR_VAR 0 51
49690: PUSH
49691: LD_INT 1
49693: NEG
49694: PUSH
49695: LD_INT 2
49697: PUSH
49698: EMPTY
49699: LIST
49700: LIST
49701: PUSH
49702: LD_INT 2
49704: NEG
49705: PUSH
49706: LD_INT 1
49708: PUSH
49709: EMPTY
49710: LIST
49711: LIST
49712: PUSH
49713: EMPTY
49714: LIST
49715: LIST
49716: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
49717: LD_ADDR_VAR 0 52
49721: PUSH
49722: LD_INT 3
49724: NEG
49725: PUSH
49726: LD_INT 1
49728: NEG
49729: PUSH
49730: EMPTY
49731: LIST
49732: LIST
49733: PUSH
49734: LD_INT 3
49736: NEG
49737: PUSH
49738: LD_INT 2
49740: NEG
49741: PUSH
49742: EMPTY
49743: LIST
49744: LIST
49745: PUSH
49746: EMPTY
49747: LIST
49748: LIST
49749: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
49750: LD_ADDR_VAR 0 53
49754: PUSH
49755: LD_INT 1
49757: NEG
49758: PUSH
49759: LD_INT 3
49761: NEG
49762: PUSH
49763: EMPTY
49764: LIST
49765: LIST
49766: PUSH
49767: LD_INT 0
49769: PUSH
49770: LD_INT 3
49772: NEG
49773: PUSH
49774: EMPTY
49775: LIST
49776: LIST
49777: PUSH
49778: LD_INT 1
49780: PUSH
49781: LD_INT 2
49783: NEG
49784: PUSH
49785: EMPTY
49786: LIST
49787: LIST
49788: PUSH
49789: EMPTY
49790: LIST
49791: LIST
49792: LIST
49793: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
49794: LD_ADDR_VAR 0 54
49798: PUSH
49799: LD_INT 2
49801: PUSH
49802: LD_INT 1
49804: NEG
49805: PUSH
49806: EMPTY
49807: LIST
49808: LIST
49809: PUSH
49810: LD_INT 3
49812: PUSH
49813: LD_INT 0
49815: PUSH
49816: EMPTY
49817: LIST
49818: LIST
49819: PUSH
49820: LD_INT 3
49822: PUSH
49823: LD_INT 1
49825: PUSH
49826: EMPTY
49827: LIST
49828: LIST
49829: PUSH
49830: EMPTY
49831: LIST
49832: LIST
49833: LIST
49834: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
49835: LD_ADDR_VAR 0 55
49839: PUSH
49840: LD_INT 3
49842: PUSH
49843: LD_INT 2
49845: PUSH
49846: EMPTY
49847: LIST
49848: LIST
49849: PUSH
49850: LD_INT 3
49852: PUSH
49853: LD_INT 3
49855: PUSH
49856: EMPTY
49857: LIST
49858: LIST
49859: PUSH
49860: LD_INT 2
49862: PUSH
49863: LD_INT 3
49865: PUSH
49866: EMPTY
49867: LIST
49868: LIST
49869: PUSH
49870: EMPTY
49871: LIST
49872: LIST
49873: LIST
49874: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
49875: LD_ADDR_VAR 0 56
49879: PUSH
49880: LD_INT 1
49882: PUSH
49883: LD_INT 3
49885: PUSH
49886: EMPTY
49887: LIST
49888: LIST
49889: PUSH
49890: LD_INT 0
49892: PUSH
49893: LD_INT 3
49895: PUSH
49896: EMPTY
49897: LIST
49898: LIST
49899: PUSH
49900: LD_INT 1
49902: NEG
49903: PUSH
49904: LD_INT 2
49906: PUSH
49907: EMPTY
49908: LIST
49909: LIST
49910: PUSH
49911: EMPTY
49912: LIST
49913: LIST
49914: LIST
49915: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
49916: LD_ADDR_VAR 0 57
49920: PUSH
49921: LD_INT 2
49923: NEG
49924: PUSH
49925: LD_INT 1
49927: PUSH
49928: EMPTY
49929: LIST
49930: LIST
49931: PUSH
49932: LD_INT 3
49934: NEG
49935: PUSH
49936: LD_INT 0
49938: PUSH
49939: EMPTY
49940: LIST
49941: LIST
49942: PUSH
49943: LD_INT 3
49945: NEG
49946: PUSH
49947: LD_INT 1
49949: NEG
49950: PUSH
49951: EMPTY
49952: LIST
49953: LIST
49954: PUSH
49955: EMPTY
49956: LIST
49957: LIST
49958: LIST
49959: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49960: LD_ADDR_VAR 0 58
49964: PUSH
49965: LD_INT 2
49967: NEG
49968: PUSH
49969: LD_INT 3
49971: NEG
49972: PUSH
49973: EMPTY
49974: LIST
49975: LIST
49976: PUSH
49977: LD_INT 3
49979: NEG
49980: PUSH
49981: LD_INT 2
49983: NEG
49984: PUSH
49985: EMPTY
49986: LIST
49987: LIST
49988: PUSH
49989: LD_INT 3
49991: NEG
49992: PUSH
49993: LD_INT 3
49995: NEG
49996: PUSH
49997: EMPTY
49998: LIST
49999: LIST
50000: PUSH
50001: EMPTY
50002: LIST
50003: LIST
50004: LIST
50005: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
50006: LD_ADDR_VAR 0 59
50010: PUSH
50011: LD_INT 1
50013: NEG
50014: PUSH
50015: LD_INT 2
50017: NEG
50018: PUSH
50019: EMPTY
50020: LIST
50021: LIST
50022: PUSH
50023: LD_INT 0
50025: PUSH
50026: LD_INT 2
50028: NEG
50029: PUSH
50030: EMPTY
50031: LIST
50032: LIST
50033: PUSH
50034: LD_INT 1
50036: PUSH
50037: LD_INT 1
50039: NEG
50040: PUSH
50041: EMPTY
50042: LIST
50043: LIST
50044: PUSH
50045: EMPTY
50046: LIST
50047: LIST
50048: LIST
50049: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
50050: LD_ADDR_VAR 0 60
50054: PUSH
50055: LD_INT 1
50057: PUSH
50058: LD_INT 1
50060: NEG
50061: PUSH
50062: EMPTY
50063: LIST
50064: LIST
50065: PUSH
50066: LD_INT 2
50068: PUSH
50069: LD_INT 0
50071: PUSH
50072: EMPTY
50073: LIST
50074: LIST
50075: PUSH
50076: LD_INT 2
50078: PUSH
50079: LD_INT 1
50081: PUSH
50082: EMPTY
50083: LIST
50084: LIST
50085: PUSH
50086: EMPTY
50087: LIST
50088: LIST
50089: LIST
50090: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
50091: LD_ADDR_VAR 0 61
50095: PUSH
50096: LD_INT 2
50098: PUSH
50099: LD_INT 1
50101: PUSH
50102: EMPTY
50103: LIST
50104: LIST
50105: PUSH
50106: LD_INT 2
50108: PUSH
50109: LD_INT 2
50111: PUSH
50112: EMPTY
50113: LIST
50114: LIST
50115: PUSH
50116: LD_INT 1
50118: PUSH
50119: LD_INT 2
50121: PUSH
50122: EMPTY
50123: LIST
50124: LIST
50125: PUSH
50126: EMPTY
50127: LIST
50128: LIST
50129: LIST
50130: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
50131: LD_ADDR_VAR 0 62
50135: PUSH
50136: LD_INT 1
50138: PUSH
50139: LD_INT 2
50141: PUSH
50142: EMPTY
50143: LIST
50144: LIST
50145: PUSH
50146: LD_INT 0
50148: PUSH
50149: LD_INT 2
50151: PUSH
50152: EMPTY
50153: LIST
50154: LIST
50155: PUSH
50156: LD_INT 1
50158: NEG
50159: PUSH
50160: LD_INT 1
50162: PUSH
50163: EMPTY
50164: LIST
50165: LIST
50166: PUSH
50167: EMPTY
50168: LIST
50169: LIST
50170: LIST
50171: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
50172: LD_ADDR_VAR 0 63
50176: PUSH
50177: LD_INT 1
50179: NEG
50180: PUSH
50181: LD_INT 1
50183: PUSH
50184: EMPTY
50185: LIST
50186: LIST
50187: PUSH
50188: LD_INT 2
50190: NEG
50191: PUSH
50192: LD_INT 0
50194: PUSH
50195: EMPTY
50196: LIST
50197: LIST
50198: PUSH
50199: LD_INT 2
50201: NEG
50202: PUSH
50203: LD_INT 1
50205: NEG
50206: PUSH
50207: EMPTY
50208: LIST
50209: LIST
50210: PUSH
50211: EMPTY
50212: LIST
50213: LIST
50214: LIST
50215: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50216: LD_ADDR_VAR 0 64
50220: PUSH
50221: LD_INT 1
50223: NEG
50224: PUSH
50225: LD_INT 2
50227: NEG
50228: PUSH
50229: EMPTY
50230: LIST
50231: LIST
50232: PUSH
50233: LD_INT 2
50235: NEG
50236: PUSH
50237: LD_INT 1
50239: NEG
50240: PUSH
50241: EMPTY
50242: LIST
50243: LIST
50244: PUSH
50245: LD_INT 2
50247: NEG
50248: PUSH
50249: LD_INT 2
50251: NEG
50252: PUSH
50253: EMPTY
50254: LIST
50255: LIST
50256: PUSH
50257: EMPTY
50258: LIST
50259: LIST
50260: LIST
50261: ST_TO_ADDR
// end ; 2 :
50262: GO 53528
50264: LD_INT 2
50266: DOUBLE
50267: EQUAL
50268: IFTRUE 50272
50270: GO 53527
50272: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
50273: LD_ADDR_VAR 0 29
50277: PUSH
50278: LD_INT 4
50280: PUSH
50281: LD_INT 0
50283: PUSH
50284: EMPTY
50285: LIST
50286: LIST
50287: PUSH
50288: LD_INT 4
50290: PUSH
50291: LD_INT 1
50293: NEG
50294: PUSH
50295: EMPTY
50296: LIST
50297: LIST
50298: PUSH
50299: LD_INT 5
50301: PUSH
50302: LD_INT 0
50304: PUSH
50305: EMPTY
50306: LIST
50307: LIST
50308: PUSH
50309: LD_INT 5
50311: PUSH
50312: LD_INT 1
50314: PUSH
50315: EMPTY
50316: LIST
50317: LIST
50318: PUSH
50319: LD_INT 4
50321: PUSH
50322: LD_INT 1
50324: PUSH
50325: EMPTY
50326: LIST
50327: LIST
50328: PUSH
50329: LD_INT 3
50331: PUSH
50332: LD_INT 0
50334: PUSH
50335: EMPTY
50336: LIST
50337: LIST
50338: PUSH
50339: LD_INT 3
50341: PUSH
50342: LD_INT 1
50344: NEG
50345: PUSH
50346: EMPTY
50347: LIST
50348: LIST
50349: PUSH
50350: LD_INT 3
50352: PUSH
50353: LD_INT 2
50355: NEG
50356: PUSH
50357: EMPTY
50358: LIST
50359: LIST
50360: PUSH
50361: LD_INT 5
50363: PUSH
50364: LD_INT 2
50366: PUSH
50367: EMPTY
50368: LIST
50369: LIST
50370: PUSH
50371: LD_INT 3
50373: PUSH
50374: LD_INT 3
50376: PUSH
50377: EMPTY
50378: LIST
50379: LIST
50380: PUSH
50381: LD_INT 3
50383: PUSH
50384: LD_INT 2
50386: PUSH
50387: EMPTY
50388: LIST
50389: LIST
50390: PUSH
50391: LD_INT 4
50393: PUSH
50394: LD_INT 3
50396: PUSH
50397: EMPTY
50398: LIST
50399: LIST
50400: PUSH
50401: LD_INT 4
50403: PUSH
50404: LD_INT 4
50406: PUSH
50407: EMPTY
50408: LIST
50409: LIST
50410: PUSH
50411: LD_INT 3
50413: PUSH
50414: LD_INT 4
50416: PUSH
50417: EMPTY
50418: LIST
50419: LIST
50420: PUSH
50421: LD_INT 2
50423: PUSH
50424: LD_INT 3
50426: PUSH
50427: EMPTY
50428: LIST
50429: LIST
50430: PUSH
50431: LD_INT 2
50433: PUSH
50434: LD_INT 2
50436: PUSH
50437: EMPTY
50438: LIST
50439: LIST
50440: PUSH
50441: LD_INT 4
50443: PUSH
50444: LD_INT 2
50446: PUSH
50447: EMPTY
50448: LIST
50449: LIST
50450: PUSH
50451: LD_INT 2
50453: PUSH
50454: LD_INT 4
50456: PUSH
50457: EMPTY
50458: LIST
50459: LIST
50460: PUSH
50461: LD_INT 0
50463: PUSH
50464: LD_INT 4
50466: PUSH
50467: EMPTY
50468: LIST
50469: LIST
50470: PUSH
50471: LD_INT 0
50473: PUSH
50474: LD_INT 3
50476: PUSH
50477: EMPTY
50478: LIST
50479: LIST
50480: PUSH
50481: LD_INT 1
50483: PUSH
50484: LD_INT 4
50486: PUSH
50487: EMPTY
50488: LIST
50489: LIST
50490: PUSH
50491: LD_INT 1
50493: PUSH
50494: LD_INT 5
50496: PUSH
50497: EMPTY
50498: LIST
50499: LIST
50500: PUSH
50501: LD_INT 0
50503: PUSH
50504: LD_INT 5
50506: PUSH
50507: EMPTY
50508: LIST
50509: LIST
50510: PUSH
50511: LD_INT 1
50513: NEG
50514: PUSH
50515: LD_INT 4
50517: PUSH
50518: EMPTY
50519: LIST
50520: LIST
50521: PUSH
50522: LD_INT 1
50524: NEG
50525: PUSH
50526: LD_INT 3
50528: PUSH
50529: EMPTY
50530: LIST
50531: LIST
50532: PUSH
50533: LD_INT 2
50535: PUSH
50536: LD_INT 5
50538: PUSH
50539: EMPTY
50540: LIST
50541: LIST
50542: PUSH
50543: LD_INT 2
50545: NEG
50546: PUSH
50547: LD_INT 3
50549: PUSH
50550: EMPTY
50551: LIST
50552: LIST
50553: PUSH
50554: LD_INT 3
50556: NEG
50557: PUSH
50558: LD_INT 0
50560: PUSH
50561: EMPTY
50562: LIST
50563: LIST
50564: PUSH
50565: LD_INT 3
50567: NEG
50568: PUSH
50569: LD_INT 1
50571: NEG
50572: PUSH
50573: EMPTY
50574: LIST
50575: LIST
50576: PUSH
50577: LD_INT 2
50579: NEG
50580: PUSH
50581: LD_INT 0
50583: PUSH
50584: EMPTY
50585: LIST
50586: LIST
50587: PUSH
50588: LD_INT 2
50590: NEG
50591: PUSH
50592: LD_INT 1
50594: PUSH
50595: EMPTY
50596: LIST
50597: LIST
50598: PUSH
50599: LD_INT 3
50601: NEG
50602: PUSH
50603: LD_INT 1
50605: PUSH
50606: EMPTY
50607: LIST
50608: LIST
50609: PUSH
50610: LD_INT 4
50612: NEG
50613: PUSH
50614: LD_INT 0
50616: PUSH
50617: EMPTY
50618: LIST
50619: LIST
50620: PUSH
50621: LD_INT 4
50623: NEG
50624: PUSH
50625: LD_INT 1
50627: NEG
50628: PUSH
50629: EMPTY
50630: LIST
50631: LIST
50632: PUSH
50633: LD_INT 4
50635: NEG
50636: PUSH
50637: LD_INT 2
50639: NEG
50640: PUSH
50641: EMPTY
50642: LIST
50643: LIST
50644: PUSH
50645: LD_INT 2
50647: NEG
50648: PUSH
50649: LD_INT 2
50651: PUSH
50652: EMPTY
50653: LIST
50654: LIST
50655: PUSH
50656: LD_INT 4
50658: NEG
50659: PUSH
50660: LD_INT 4
50662: NEG
50663: PUSH
50664: EMPTY
50665: LIST
50666: LIST
50667: PUSH
50668: LD_INT 4
50670: NEG
50671: PUSH
50672: LD_INT 5
50674: NEG
50675: PUSH
50676: EMPTY
50677: LIST
50678: LIST
50679: PUSH
50680: LD_INT 3
50682: NEG
50683: PUSH
50684: LD_INT 4
50686: NEG
50687: PUSH
50688: EMPTY
50689: LIST
50690: LIST
50691: PUSH
50692: LD_INT 3
50694: NEG
50695: PUSH
50696: LD_INT 3
50698: NEG
50699: PUSH
50700: EMPTY
50701: LIST
50702: LIST
50703: PUSH
50704: LD_INT 4
50706: NEG
50707: PUSH
50708: LD_INT 3
50710: NEG
50711: PUSH
50712: EMPTY
50713: LIST
50714: LIST
50715: PUSH
50716: LD_INT 5
50718: NEG
50719: PUSH
50720: LD_INT 4
50722: NEG
50723: PUSH
50724: EMPTY
50725: LIST
50726: LIST
50727: PUSH
50728: LD_INT 5
50730: NEG
50731: PUSH
50732: LD_INT 5
50734: NEG
50735: PUSH
50736: EMPTY
50737: LIST
50738: LIST
50739: PUSH
50740: LD_INT 3
50742: NEG
50743: PUSH
50744: LD_INT 5
50746: NEG
50747: PUSH
50748: EMPTY
50749: LIST
50750: LIST
50751: PUSH
50752: LD_INT 5
50754: NEG
50755: PUSH
50756: LD_INT 3
50758: NEG
50759: PUSH
50760: EMPTY
50761: LIST
50762: LIST
50763: PUSH
50764: EMPTY
50765: LIST
50766: LIST
50767: LIST
50768: LIST
50769: LIST
50770: LIST
50771: LIST
50772: LIST
50773: LIST
50774: LIST
50775: LIST
50776: LIST
50777: LIST
50778: LIST
50779: LIST
50780: LIST
50781: LIST
50782: LIST
50783: LIST
50784: LIST
50785: LIST
50786: LIST
50787: LIST
50788: LIST
50789: LIST
50790: LIST
50791: LIST
50792: LIST
50793: LIST
50794: LIST
50795: LIST
50796: LIST
50797: LIST
50798: LIST
50799: LIST
50800: LIST
50801: LIST
50802: LIST
50803: LIST
50804: LIST
50805: LIST
50806: LIST
50807: LIST
50808: LIST
50809: LIST
50810: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
50811: LD_ADDR_VAR 0 30
50815: PUSH
50816: LD_INT 4
50818: PUSH
50819: LD_INT 4
50821: PUSH
50822: EMPTY
50823: LIST
50824: LIST
50825: PUSH
50826: LD_INT 4
50828: PUSH
50829: LD_INT 3
50831: PUSH
50832: EMPTY
50833: LIST
50834: LIST
50835: PUSH
50836: LD_INT 5
50838: PUSH
50839: LD_INT 4
50841: PUSH
50842: EMPTY
50843: LIST
50844: LIST
50845: PUSH
50846: LD_INT 5
50848: PUSH
50849: LD_INT 5
50851: PUSH
50852: EMPTY
50853: LIST
50854: LIST
50855: PUSH
50856: LD_INT 4
50858: PUSH
50859: LD_INT 5
50861: PUSH
50862: EMPTY
50863: LIST
50864: LIST
50865: PUSH
50866: LD_INT 3
50868: PUSH
50869: LD_INT 4
50871: PUSH
50872: EMPTY
50873: LIST
50874: LIST
50875: PUSH
50876: LD_INT 3
50878: PUSH
50879: LD_INT 3
50881: PUSH
50882: EMPTY
50883: LIST
50884: LIST
50885: PUSH
50886: LD_INT 5
50888: PUSH
50889: LD_INT 3
50891: PUSH
50892: EMPTY
50893: LIST
50894: LIST
50895: PUSH
50896: LD_INT 3
50898: PUSH
50899: LD_INT 5
50901: PUSH
50902: EMPTY
50903: LIST
50904: LIST
50905: PUSH
50906: LD_INT 0
50908: PUSH
50909: LD_INT 3
50911: PUSH
50912: EMPTY
50913: LIST
50914: LIST
50915: PUSH
50916: LD_INT 0
50918: PUSH
50919: LD_INT 2
50921: PUSH
50922: EMPTY
50923: LIST
50924: LIST
50925: PUSH
50926: LD_INT 1
50928: PUSH
50929: LD_INT 3
50931: PUSH
50932: EMPTY
50933: LIST
50934: LIST
50935: PUSH
50936: LD_INT 1
50938: PUSH
50939: LD_INT 4
50941: PUSH
50942: EMPTY
50943: LIST
50944: LIST
50945: PUSH
50946: LD_INT 0
50948: PUSH
50949: LD_INT 4
50951: PUSH
50952: EMPTY
50953: LIST
50954: LIST
50955: PUSH
50956: LD_INT 1
50958: NEG
50959: PUSH
50960: LD_INT 3
50962: PUSH
50963: EMPTY
50964: LIST
50965: LIST
50966: PUSH
50967: LD_INT 1
50969: NEG
50970: PUSH
50971: LD_INT 2
50973: PUSH
50974: EMPTY
50975: LIST
50976: LIST
50977: PUSH
50978: LD_INT 2
50980: PUSH
50981: LD_INT 4
50983: PUSH
50984: EMPTY
50985: LIST
50986: LIST
50987: PUSH
50988: LD_INT 2
50990: NEG
50991: PUSH
50992: LD_INT 2
50994: PUSH
50995: EMPTY
50996: LIST
50997: LIST
50998: PUSH
50999: LD_INT 4
51001: NEG
51002: PUSH
51003: LD_INT 0
51005: PUSH
51006: EMPTY
51007: LIST
51008: LIST
51009: PUSH
51010: LD_INT 4
51012: NEG
51013: PUSH
51014: LD_INT 1
51016: NEG
51017: PUSH
51018: EMPTY
51019: LIST
51020: LIST
51021: PUSH
51022: LD_INT 3
51024: NEG
51025: PUSH
51026: LD_INT 0
51028: PUSH
51029: EMPTY
51030: LIST
51031: LIST
51032: PUSH
51033: LD_INT 3
51035: NEG
51036: PUSH
51037: LD_INT 1
51039: PUSH
51040: EMPTY
51041: LIST
51042: LIST
51043: PUSH
51044: LD_INT 4
51046: NEG
51047: PUSH
51048: LD_INT 1
51050: PUSH
51051: EMPTY
51052: LIST
51053: LIST
51054: PUSH
51055: LD_INT 5
51057: NEG
51058: PUSH
51059: LD_INT 0
51061: PUSH
51062: EMPTY
51063: LIST
51064: LIST
51065: PUSH
51066: LD_INT 5
51068: NEG
51069: PUSH
51070: LD_INT 1
51072: NEG
51073: PUSH
51074: EMPTY
51075: LIST
51076: LIST
51077: PUSH
51078: LD_INT 5
51080: NEG
51081: PUSH
51082: LD_INT 2
51084: NEG
51085: PUSH
51086: EMPTY
51087: LIST
51088: LIST
51089: PUSH
51090: LD_INT 3
51092: NEG
51093: PUSH
51094: LD_INT 2
51096: PUSH
51097: EMPTY
51098: LIST
51099: LIST
51100: PUSH
51101: LD_INT 3
51103: NEG
51104: PUSH
51105: LD_INT 3
51107: NEG
51108: PUSH
51109: EMPTY
51110: LIST
51111: LIST
51112: PUSH
51113: LD_INT 3
51115: NEG
51116: PUSH
51117: LD_INT 4
51119: NEG
51120: PUSH
51121: EMPTY
51122: LIST
51123: LIST
51124: PUSH
51125: LD_INT 2
51127: NEG
51128: PUSH
51129: LD_INT 3
51131: NEG
51132: PUSH
51133: EMPTY
51134: LIST
51135: LIST
51136: PUSH
51137: LD_INT 2
51139: NEG
51140: PUSH
51141: LD_INT 2
51143: NEG
51144: PUSH
51145: EMPTY
51146: LIST
51147: LIST
51148: PUSH
51149: LD_INT 3
51151: NEG
51152: PUSH
51153: LD_INT 2
51155: NEG
51156: PUSH
51157: EMPTY
51158: LIST
51159: LIST
51160: PUSH
51161: LD_INT 4
51163: NEG
51164: PUSH
51165: LD_INT 3
51167: NEG
51168: PUSH
51169: EMPTY
51170: LIST
51171: LIST
51172: PUSH
51173: LD_INT 4
51175: NEG
51176: PUSH
51177: LD_INT 4
51179: NEG
51180: PUSH
51181: EMPTY
51182: LIST
51183: LIST
51184: PUSH
51185: LD_INT 2
51187: NEG
51188: PUSH
51189: LD_INT 4
51191: NEG
51192: PUSH
51193: EMPTY
51194: LIST
51195: LIST
51196: PUSH
51197: LD_INT 4
51199: NEG
51200: PUSH
51201: LD_INT 2
51203: NEG
51204: PUSH
51205: EMPTY
51206: LIST
51207: LIST
51208: PUSH
51209: LD_INT 0
51211: PUSH
51212: LD_INT 4
51214: NEG
51215: PUSH
51216: EMPTY
51217: LIST
51218: LIST
51219: PUSH
51220: LD_INT 0
51222: PUSH
51223: LD_INT 5
51225: NEG
51226: PUSH
51227: EMPTY
51228: LIST
51229: LIST
51230: PUSH
51231: LD_INT 1
51233: PUSH
51234: LD_INT 4
51236: NEG
51237: PUSH
51238: EMPTY
51239: LIST
51240: LIST
51241: PUSH
51242: LD_INT 1
51244: PUSH
51245: LD_INT 3
51247: NEG
51248: PUSH
51249: EMPTY
51250: LIST
51251: LIST
51252: PUSH
51253: LD_INT 0
51255: PUSH
51256: LD_INT 3
51258: NEG
51259: PUSH
51260: EMPTY
51261: LIST
51262: LIST
51263: PUSH
51264: LD_INT 1
51266: NEG
51267: PUSH
51268: LD_INT 4
51270: NEG
51271: PUSH
51272: EMPTY
51273: LIST
51274: LIST
51275: PUSH
51276: LD_INT 1
51278: NEG
51279: PUSH
51280: LD_INT 5
51282: NEG
51283: PUSH
51284: EMPTY
51285: LIST
51286: LIST
51287: PUSH
51288: LD_INT 2
51290: PUSH
51291: LD_INT 3
51293: NEG
51294: PUSH
51295: EMPTY
51296: LIST
51297: LIST
51298: PUSH
51299: LD_INT 2
51301: NEG
51302: PUSH
51303: LD_INT 5
51305: NEG
51306: PUSH
51307: EMPTY
51308: LIST
51309: LIST
51310: PUSH
51311: EMPTY
51312: LIST
51313: LIST
51314: LIST
51315: LIST
51316: LIST
51317: LIST
51318: LIST
51319: LIST
51320: LIST
51321: LIST
51322: LIST
51323: LIST
51324: LIST
51325: LIST
51326: LIST
51327: LIST
51328: LIST
51329: LIST
51330: LIST
51331: LIST
51332: LIST
51333: LIST
51334: LIST
51335: LIST
51336: LIST
51337: LIST
51338: LIST
51339: LIST
51340: LIST
51341: LIST
51342: LIST
51343: LIST
51344: LIST
51345: LIST
51346: LIST
51347: LIST
51348: LIST
51349: LIST
51350: LIST
51351: LIST
51352: LIST
51353: LIST
51354: LIST
51355: LIST
51356: LIST
51357: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
51358: LD_ADDR_VAR 0 31
51362: PUSH
51363: LD_INT 0
51365: PUSH
51366: LD_INT 4
51368: PUSH
51369: EMPTY
51370: LIST
51371: LIST
51372: PUSH
51373: LD_INT 0
51375: PUSH
51376: LD_INT 3
51378: PUSH
51379: EMPTY
51380: LIST
51381: LIST
51382: PUSH
51383: LD_INT 1
51385: PUSH
51386: LD_INT 4
51388: PUSH
51389: EMPTY
51390: LIST
51391: LIST
51392: PUSH
51393: LD_INT 1
51395: PUSH
51396: LD_INT 5
51398: PUSH
51399: EMPTY
51400: LIST
51401: LIST
51402: PUSH
51403: LD_INT 0
51405: PUSH
51406: LD_INT 5
51408: PUSH
51409: EMPTY
51410: LIST
51411: LIST
51412: PUSH
51413: LD_INT 1
51415: NEG
51416: PUSH
51417: LD_INT 4
51419: PUSH
51420: EMPTY
51421: LIST
51422: LIST
51423: PUSH
51424: LD_INT 1
51426: NEG
51427: PUSH
51428: LD_INT 3
51430: PUSH
51431: EMPTY
51432: LIST
51433: LIST
51434: PUSH
51435: LD_INT 2
51437: PUSH
51438: LD_INT 5
51440: PUSH
51441: EMPTY
51442: LIST
51443: LIST
51444: PUSH
51445: LD_INT 2
51447: NEG
51448: PUSH
51449: LD_INT 3
51451: PUSH
51452: EMPTY
51453: LIST
51454: LIST
51455: PUSH
51456: LD_INT 3
51458: NEG
51459: PUSH
51460: LD_INT 0
51462: PUSH
51463: EMPTY
51464: LIST
51465: LIST
51466: PUSH
51467: LD_INT 3
51469: NEG
51470: PUSH
51471: LD_INT 1
51473: NEG
51474: PUSH
51475: EMPTY
51476: LIST
51477: LIST
51478: PUSH
51479: LD_INT 2
51481: NEG
51482: PUSH
51483: LD_INT 0
51485: PUSH
51486: EMPTY
51487: LIST
51488: LIST
51489: PUSH
51490: LD_INT 2
51492: NEG
51493: PUSH
51494: LD_INT 1
51496: PUSH
51497: EMPTY
51498: LIST
51499: LIST
51500: PUSH
51501: LD_INT 3
51503: NEG
51504: PUSH
51505: LD_INT 1
51507: PUSH
51508: EMPTY
51509: LIST
51510: LIST
51511: PUSH
51512: LD_INT 4
51514: NEG
51515: PUSH
51516: LD_INT 0
51518: PUSH
51519: EMPTY
51520: LIST
51521: LIST
51522: PUSH
51523: LD_INT 4
51525: NEG
51526: PUSH
51527: LD_INT 1
51529: NEG
51530: PUSH
51531: EMPTY
51532: LIST
51533: LIST
51534: PUSH
51535: LD_INT 4
51537: NEG
51538: PUSH
51539: LD_INT 2
51541: NEG
51542: PUSH
51543: EMPTY
51544: LIST
51545: LIST
51546: PUSH
51547: LD_INT 2
51549: NEG
51550: PUSH
51551: LD_INT 2
51553: PUSH
51554: EMPTY
51555: LIST
51556: LIST
51557: PUSH
51558: LD_INT 4
51560: NEG
51561: PUSH
51562: LD_INT 4
51564: NEG
51565: PUSH
51566: EMPTY
51567: LIST
51568: LIST
51569: PUSH
51570: LD_INT 4
51572: NEG
51573: PUSH
51574: LD_INT 5
51576: NEG
51577: PUSH
51578: EMPTY
51579: LIST
51580: LIST
51581: PUSH
51582: LD_INT 3
51584: NEG
51585: PUSH
51586: LD_INT 4
51588: NEG
51589: PUSH
51590: EMPTY
51591: LIST
51592: LIST
51593: PUSH
51594: LD_INT 3
51596: NEG
51597: PUSH
51598: LD_INT 3
51600: NEG
51601: PUSH
51602: EMPTY
51603: LIST
51604: LIST
51605: PUSH
51606: LD_INT 4
51608: NEG
51609: PUSH
51610: LD_INT 3
51612: NEG
51613: PUSH
51614: EMPTY
51615: LIST
51616: LIST
51617: PUSH
51618: LD_INT 5
51620: NEG
51621: PUSH
51622: LD_INT 4
51624: NEG
51625: PUSH
51626: EMPTY
51627: LIST
51628: LIST
51629: PUSH
51630: LD_INT 5
51632: NEG
51633: PUSH
51634: LD_INT 5
51636: NEG
51637: PUSH
51638: EMPTY
51639: LIST
51640: LIST
51641: PUSH
51642: LD_INT 3
51644: NEG
51645: PUSH
51646: LD_INT 5
51648: NEG
51649: PUSH
51650: EMPTY
51651: LIST
51652: LIST
51653: PUSH
51654: LD_INT 5
51656: NEG
51657: PUSH
51658: LD_INT 3
51660: NEG
51661: PUSH
51662: EMPTY
51663: LIST
51664: LIST
51665: PUSH
51666: LD_INT 0
51668: PUSH
51669: LD_INT 3
51671: NEG
51672: PUSH
51673: EMPTY
51674: LIST
51675: LIST
51676: PUSH
51677: LD_INT 0
51679: PUSH
51680: LD_INT 4
51682: NEG
51683: PUSH
51684: EMPTY
51685: LIST
51686: LIST
51687: PUSH
51688: LD_INT 1
51690: PUSH
51691: LD_INT 3
51693: NEG
51694: PUSH
51695: EMPTY
51696: LIST
51697: LIST
51698: PUSH
51699: LD_INT 1
51701: PUSH
51702: LD_INT 2
51704: NEG
51705: PUSH
51706: EMPTY
51707: LIST
51708: LIST
51709: PUSH
51710: LD_INT 0
51712: PUSH
51713: LD_INT 2
51715: NEG
51716: PUSH
51717: EMPTY
51718: LIST
51719: LIST
51720: PUSH
51721: LD_INT 1
51723: NEG
51724: PUSH
51725: LD_INT 3
51727: NEG
51728: PUSH
51729: EMPTY
51730: LIST
51731: LIST
51732: PUSH
51733: LD_INT 1
51735: NEG
51736: PUSH
51737: LD_INT 4
51739: NEG
51740: PUSH
51741: EMPTY
51742: LIST
51743: LIST
51744: PUSH
51745: LD_INT 2
51747: PUSH
51748: LD_INT 2
51750: NEG
51751: PUSH
51752: EMPTY
51753: LIST
51754: LIST
51755: PUSH
51756: LD_INT 2
51758: NEG
51759: PUSH
51760: LD_INT 4
51762: NEG
51763: PUSH
51764: EMPTY
51765: LIST
51766: LIST
51767: PUSH
51768: LD_INT 4
51770: PUSH
51771: LD_INT 0
51773: PUSH
51774: EMPTY
51775: LIST
51776: LIST
51777: PUSH
51778: LD_INT 4
51780: PUSH
51781: LD_INT 1
51783: NEG
51784: PUSH
51785: EMPTY
51786: LIST
51787: LIST
51788: PUSH
51789: LD_INT 5
51791: PUSH
51792: LD_INT 0
51794: PUSH
51795: EMPTY
51796: LIST
51797: LIST
51798: PUSH
51799: LD_INT 5
51801: PUSH
51802: LD_INT 1
51804: PUSH
51805: EMPTY
51806: LIST
51807: LIST
51808: PUSH
51809: LD_INT 4
51811: PUSH
51812: LD_INT 1
51814: PUSH
51815: EMPTY
51816: LIST
51817: LIST
51818: PUSH
51819: LD_INT 3
51821: PUSH
51822: LD_INT 0
51824: PUSH
51825: EMPTY
51826: LIST
51827: LIST
51828: PUSH
51829: LD_INT 3
51831: PUSH
51832: LD_INT 1
51834: NEG
51835: PUSH
51836: EMPTY
51837: LIST
51838: LIST
51839: PUSH
51840: LD_INT 3
51842: PUSH
51843: LD_INT 2
51845: NEG
51846: PUSH
51847: EMPTY
51848: LIST
51849: LIST
51850: PUSH
51851: LD_INT 5
51853: PUSH
51854: LD_INT 2
51856: PUSH
51857: EMPTY
51858: LIST
51859: LIST
51860: PUSH
51861: EMPTY
51862: LIST
51863: LIST
51864: LIST
51865: LIST
51866: LIST
51867: LIST
51868: LIST
51869: LIST
51870: LIST
51871: LIST
51872: LIST
51873: LIST
51874: LIST
51875: LIST
51876: LIST
51877: LIST
51878: LIST
51879: LIST
51880: LIST
51881: LIST
51882: LIST
51883: LIST
51884: LIST
51885: LIST
51886: LIST
51887: LIST
51888: LIST
51889: LIST
51890: LIST
51891: LIST
51892: LIST
51893: LIST
51894: LIST
51895: LIST
51896: LIST
51897: LIST
51898: LIST
51899: LIST
51900: LIST
51901: LIST
51902: LIST
51903: LIST
51904: LIST
51905: LIST
51906: LIST
51907: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
51908: LD_ADDR_VAR 0 32
51912: PUSH
51913: LD_INT 4
51915: NEG
51916: PUSH
51917: LD_INT 0
51919: PUSH
51920: EMPTY
51921: LIST
51922: LIST
51923: PUSH
51924: LD_INT 4
51926: NEG
51927: PUSH
51928: LD_INT 1
51930: NEG
51931: PUSH
51932: EMPTY
51933: LIST
51934: LIST
51935: PUSH
51936: LD_INT 3
51938: NEG
51939: PUSH
51940: LD_INT 0
51942: PUSH
51943: EMPTY
51944: LIST
51945: LIST
51946: PUSH
51947: LD_INT 3
51949: NEG
51950: PUSH
51951: LD_INT 1
51953: PUSH
51954: EMPTY
51955: LIST
51956: LIST
51957: PUSH
51958: LD_INT 4
51960: NEG
51961: PUSH
51962: LD_INT 1
51964: PUSH
51965: EMPTY
51966: LIST
51967: LIST
51968: PUSH
51969: LD_INT 5
51971: NEG
51972: PUSH
51973: LD_INT 0
51975: PUSH
51976: EMPTY
51977: LIST
51978: LIST
51979: PUSH
51980: LD_INT 5
51982: NEG
51983: PUSH
51984: LD_INT 1
51986: NEG
51987: PUSH
51988: EMPTY
51989: LIST
51990: LIST
51991: PUSH
51992: LD_INT 5
51994: NEG
51995: PUSH
51996: LD_INT 2
51998: NEG
51999: PUSH
52000: EMPTY
52001: LIST
52002: LIST
52003: PUSH
52004: LD_INT 3
52006: NEG
52007: PUSH
52008: LD_INT 2
52010: PUSH
52011: EMPTY
52012: LIST
52013: LIST
52014: PUSH
52015: LD_INT 3
52017: NEG
52018: PUSH
52019: LD_INT 3
52021: NEG
52022: PUSH
52023: EMPTY
52024: LIST
52025: LIST
52026: PUSH
52027: LD_INT 3
52029: NEG
52030: PUSH
52031: LD_INT 4
52033: NEG
52034: PUSH
52035: EMPTY
52036: LIST
52037: LIST
52038: PUSH
52039: LD_INT 2
52041: NEG
52042: PUSH
52043: LD_INT 3
52045: NEG
52046: PUSH
52047: EMPTY
52048: LIST
52049: LIST
52050: PUSH
52051: LD_INT 2
52053: NEG
52054: PUSH
52055: LD_INT 2
52057: NEG
52058: PUSH
52059: EMPTY
52060: LIST
52061: LIST
52062: PUSH
52063: LD_INT 3
52065: NEG
52066: PUSH
52067: LD_INT 2
52069: NEG
52070: PUSH
52071: EMPTY
52072: LIST
52073: LIST
52074: PUSH
52075: LD_INT 4
52077: NEG
52078: PUSH
52079: LD_INT 3
52081: NEG
52082: PUSH
52083: EMPTY
52084: LIST
52085: LIST
52086: PUSH
52087: LD_INT 4
52089: NEG
52090: PUSH
52091: LD_INT 4
52093: NEG
52094: PUSH
52095: EMPTY
52096: LIST
52097: LIST
52098: PUSH
52099: LD_INT 2
52101: NEG
52102: PUSH
52103: LD_INT 4
52105: NEG
52106: PUSH
52107: EMPTY
52108: LIST
52109: LIST
52110: PUSH
52111: LD_INT 4
52113: NEG
52114: PUSH
52115: LD_INT 2
52117: NEG
52118: PUSH
52119: EMPTY
52120: LIST
52121: LIST
52122: PUSH
52123: LD_INT 0
52125: PUSH
52126: LD_INT 4
52128: NEG
52129: PUSH
52130: EMPTY
52131: LIST
52132: LIST
52133: PUSH
52134: LD_INT 0
52136: PUSH
52137: LD_INT 5
52139: NEG
52140: PUSH
52141: EMPTY
52142: LIST
52143: LIST
52144: PUSH
52145: LD_INT 1
52147: PUSH
52148: LD_INT 4
52150: NEG
52151: PUSH
52152: EMPTY
52153: LIST
52154: LIST
52155: PUSH
52156: LD_INT 1
52158: PUSH
52159: LD_INT 3
52161: NEG
52162: PUSH
52163: EMPTY
52164: LIST
52165: LIST
52166: PUSH
52167: LD_INT 0
52169: PUSH
52170: LD_INT 3
52172: NEG
52173: PUSH
52174: EMPTY
52175: LIST
52176: LIST
52177: PUSH
52178: LD_INT 1
52180: NEG
52181: PUSH
52182: LD_INT 4
52184: NEG
52185: PUSH
52186: EMPTY
52187: LIST
52188: LIST
52189: PUSH
52190: LD_INT 1
52192: NEG
52193: PUSH
52194: LD_INT 5
52196: NEG
52197: PUSH
52198: EMPTY
52199: LIST
52200: LIST
52201: PUSH
52202: LD_INT 2
52204: PUSH
52205: LD_INT 3
52207: NEG
52208: PUSH
52209: EMPTY
52210: LIST
52211: LIST
52212: PUSH
52213: LD_INT 2
52215: NEG
52216: PUSH
52217: LD_INT 5
52219: NEG
52220: PUSH
52221: EMPTY
52222: LIST
52223: LIST
52224: PUSH
52225: LD_INT 3
52227: PUSH
52228: LD_INT 0
52230: PUSH
52231: EMPTY
52232: LIST
52233: LIST
52234: PUSH
52235: LD_INT 3
52237: PUSH
52238: LD_INT 1
52240: NEG
52241: PUSH
52242: EMPTY
52243: LIST
52244: LIST
52245: PUSH
52246: LD_INT 4
52248: PUSH
52249: LD_INT 0
52251: PUSH
52252: EMPTY
52253: LIST
52254: LIST
52255: PUSH
52256: LD_INT 4
52258: PUSH
52259: LD_INT 1
52261: PUSH
52262: EMPTY
52263: LIST
52264: LIST
52265: PUSH
52266: LD_INT 3
52268: PUSH
52269: LD_INT 1
52271: PUSH
52272: EMPTY
52273: LIST
52274: LIST
52275: PUSH
52276: LD_INT 2
52278: PUSH
52279: LD_INT 0
52281: PUSH
52282: EMPTY
52283: LIST
52284: LIST
52285: PUSH
52286: LD_INT 2
52288: PUSH
52289: LD_INT 1
52291: NEG
52292: PUSH
52293: EMPTY
52294: LIST
52295: LIST
52296: PUSH
52297: LD_INT 2
52299: PUSH
52300: LD_INT 2
52302: NEG
52303: PUSH
52304: EMPTY
52305: LIST
52306: LIST
52307: PUSH
52308: LD_INT 4
52310: PUSH
52311: LD_INT 2
52313: PUSH
52314: EMPTY
52315: LIST
52316: LIST
52317: PUSH
52318: LD_INT 4
52320: PUSH
52321: LD_INT 4
52323: PUSH
52324: EMPTY
52325: LIST
52326: LIST
52327: PUSH
52328: LD_INT 4
52330: PUSH
52331: LD_INT 3
52333: PUSH
52334: EMPTY
52335: LIST
52336: LIST
52337: PUSH
52338: LD_INT 5
52340: PUSH
52341: LD_INT 4
52343: PUSH
52344: EMPTY
52345: LIST
52346: LIST
52347: PUSH
52348: LD_INT 5
52350: PUSH
52351: LD_INT 5
52353: PUSH
52354: EMPTY
52355: LIST
52356: LIST
52357: PUSH
52358: LD_INT 4
52360: PUSH
52361: LD_INT 5
52363: PUSH
52364: EMPTY
52365: LIST
52366: LIST
52367: PUSH
52368: LD_INT 3
52370: PUSH
52371: LD_INT 4
52373: PUSH
52374: EMPTY
52375: LIST
52376: LIST
52377: PUSH
52378: LD_INT 3
52380: PUSH
52381: LD_INT 3
52383: PUSH
52384: EMPTY
52385: LIST
52386: LIST
52387: PUSH
52388: LD_INT 5
52390: PUSH
52391: LD_INT 3
52393: PUSH
52394: EMPTY
52395: LIST
52396: LIST
52397: PUSH
52398: LD_INT 3
52400: PUSH
52401: LD_INT 5
52403: PUSH
52404: EMPTY
52405: LIST
52406: LIST
52407: PUSH
52408: EMPTY
52409: LIST
52410: LIST
52411: LIST
52412: LIST
52413: LIST
52414: LIST
52415: LIST
52416: LIST
52417: LIST
52418: LIST
52419: LIST
52420: LIST
52421: LIST
52422: LIST
52423: LIST
52424: LIST
52425: LIST
52426: LIST
52427: LIST
52428: LIST
52429: LIST
52430: LIST
52431: LIST
52432: LIST
52433: LIST
52434: LIST
52435: LIST
52436: LIST
52437: LIST
52438: LIST
52439: LIST
52440: LIST
52441: LIST
52442: LIST
52443: LIST
52444: LIST
52445: LIST
52446: LIST
52447: LIST
52448: LIST
52449: LIST
52450: LIST
52451: LIST
52452: LIST
52453: LIST
52454: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
52455: LD_ADDR_VAR 0 33
52459: PUSH
52460: LD_INT 4
52462: NEG
52463: PUSH
52464: LD_INT 4
52466: NEG
52467: PUSH
52468: EMPTY
52469: LIST
52470: LIST
52471: PUSH
52472: LD_INT 4
52474: NEG
52475: PUSH
52476: LD_INT 5
52478: NEG
52479: PUSH
52480: EMPTY
52481: LIST
52482: LIST
52483: PUSH
52484: LD_INT 3
52486: NEG
52487: PUSH
52488: LD_INT 4
52490: NEG
52491: PUSH
52492: EMPTY
52493: LIST
52494: LIST
52495: PUSH
52496: LD_INT 3
52498: NEG
52499: PUSH
52500: LD_INT 3
52502: NEG
52503: PUSH
52504: EMPTY
52505: LIST
52506: LIST
52507: PUSH
52508: LD_INT 4
52510: NEG
52511: PUSH
52512: LD_INT 3
52514: NEG
52515: PUSH
52516: EMPTY
52517: LIST
52518: LIST
52519: PUSH
52520: LD_INT 5
52522: NEG
52523: PUSH
52524: LD_INT 4
52526: NEG
52527: PUSH
52528: EMPTY
52529: LIST
52530: LIST
52531: PUSH
52532: LD_INT 5
52534: NEG
52535: PUSH
52536: LD_INT 5
52538: NEG
52539: PUSH
52540: EMPTY
52541: LIST
52542: LIST
52543: PUSH
52544: LD_INT 3
52546: NEG
52547: PUSH
52548: LD_INT 5
52550: NEG
52551: PUSH
52552: EMPTY
52553: LIST
52554: LIST
52555: PUSH
52556: LD_INT 5
52558: NEG
52559: PUSH
52560: LD_INT 3
52562: NEG
52563: PUSH
52564: EMPTY
52565: LIST
52566: LIST
52567: PUSH
52568: LD_INT 0
52570: PUSH
52571: LD_INT 3
52573: NEG
52574: PUSH
52575: EMPTY
52576: LIST
52577: LIST
52578: PUSH
52579: LD_INT 0
52581: PUSH
52582: LD_INT 4
52584: NEG
52585: PUSH
52586: EMPTY
52587: LIST
52588: LIST
52589: PUSH
52590: LD_INT 1
52592: PUSH
52593: LD_INT 3
52595: NEG
52596: PUSH
52597: EMPTY
52598: LIST
52599: LIST
52600: PUSH
52601: LD_INT 1
52603: PUSH
52604: LD_INT 2
52606: NEG
52607: PUSH
52608: EMPTY
52609: LIST
52610: LIST
52611: PUSH
52612: LD_INT 0
52614: PUSH
52615: LD_INT 2
52617: NEG
52618: PUSH
52619: EMPTY
52620: LIST
52621: LIST
52622: PUSH
52623: LD_INT 1
52625: NEG
52626: PUSH
52627: LD_INT 3
52629: NEG
52630: PUSH
52631: EMPTY
52632: LIST
52633: LIST
52634: PUSH
52635: LD_INT 1
52637: NEG
52638: PUSH
52639: LD_INT 4
52641: NEG
52642: PUSH
52643: EMPTY
52644: LIST
52645: LIST
52646: PUSH
52647: LD_INT 2
52649: PUSH
52650: LD_INT 2
52652: NEG
52653: PUSH
52654: EMPTY
52655: LIST
52656: LIST
52657: PUSH
52658: LD_INT 2
52660: NEG
52661: PUSH
52662: LD_INT 4
52664: NEG
52665: PUSH
52666: EMPTY
52667: LIST
52668: LIST
52669: PUSH
52670: LD_INT 4
52672: PUSH
52673: LD_INT 0
52675: PUSH
52676: EMPTY
52677: LIST
52678: LIST
52679: PUSH
52680: LD_INT 4
52682: PUSH
52683: LD_INT 1
52685: NEG
52686: PUSH
52687: EMPTY
52688: LIST
52689: LIST
52690: PUSH
52691: LD_INT 5
52693: PUSH
52694: LD_INT 0
52696: PUSH
52697: EMPTY
52698: LIST
52699: LIST
52700: PUSH
52701: LD_INT 5
52703: PUSH
52704: LD_INT 1
52706: PUSH
52707: EMPTY
52708: LIST
52709: LIST
52710: PUSH
52711: LD_INT 4
52713: PUSH
52714: LD_INT 1
52716: PUSH
52717: EMPTY
52718: LIST
52719: LIST
52720: PUSH
52721: LD_INT 3
52723: PUSH
52724: LD_INT 0
52726: PUSH
52727: EMPTY
52728: LIST
52729: LIST
52730: PUSH
52731: LD_INT 3
52733: PUSH
52734: LD_INT 1
52736: NEG
52737: PUSH
52738: EMPTY
52739: LIST
52740: LIST
52741: PUSH
52742: LD_INT 3
52744: PUSH
52745: LD_INT 2
52747: NEG
52748: PUSH
52749: EMPTY
52750: LIST
52751: LIST
52752: PUSH
52753: LD_INT 5
52755: PUSH
52756: LD_INT 2
52758: PUSH
52759: EMPTY
52760: LIST
52761: LIST
52762: PUSH
52763: LD_INT 3
52765: PUSH
52766: LD_INT 3
52768: PUSH
52769: EMPTY
52770: LIST
52771: LIST
52772: PUSH
52773: LD_INT 3
52775: PUSH
52776: LD_INT 2
52778: PUSH
52779: EMPTY
52780: LIST
52781: LIST
52782: PUSH
52783: LD_INT 4
52785: PUSH
52786: LD_INT 3
52788: PUSH
52789: EMPTY
52790: LIST
52791: LIST
52792: PUSH
52793: LD_INT 4
52795: PUSH
52796: LD_INT 4
52798: PUSH
52799: EMPTY
52800: LIST
52801: LIST
52802: PUSH
52803: LD_INT 3
52805: PUSH
52806: LD_INT 4
52808: PUSH
52809: EMPTY
52810: LIST
52811: LIST
52812: PUSH
52813: LD_INT 2
52815: PUSH
52816: LD_INT 3
52818: PUSH
52819: EMPTY
52820: LIST
52821: LIST
52822: PUSH
52823: LD_INT 2
52825: PUSH
52826: LD_INT 2
52828: PUSH
52829: EMPTY
52830: LIST
52831: LIST
52832: PUSH
52833: LD_INT 4
52835: PUSH
52836: LD_INT 2
52838: PUSH
52839: EMPTY
52840: LIST
52841: LIST
52842: PUSH
52843: LD_INT 2
52845: PUSH
52846: LD_INT 4
52848: PUSH
52849: EMPTY
52850: LIST
52851: LIST
52852: PUSH
52853: LD_INT 0
52855: PUSH
52856: LD_INT 4
52858: PUSH
52859: EMPTY
52860: LIST
52861: LIST
52862: PUSH
52863: LD_INT 0
52865: PUSH
52866: LD_INT 3
52868: PUSH
52869: EMPTY
52870: LIST
52871: LIST
52872: PUSH
52873: LD_INT 1
52875: PUSH
52876: LD_INT 4
52878: PUSH
52879: EMPTY
52880: LIST
52881: LIST
52882: PUSH
52883: LD_INT 1
52885: PUSH
52886: LD_INT 5
52888: PUSH
52889: EMPTY
52890: LIST
52891: LIST
52892: PUSH
52893: LD_INT 0
52895: PUSH
52896: LD_INT 5
52898: PUSH
52899: EMPTY
52900: LIST
52901: LIST
52902: PUSH
52903: LD_INT 1
52905: NEG
52906: PUSH
52907: LD_INT 4
52909: PUSH
52910: EMPTY
52911: LIST
52912: LIST
52913: PUSH
52914: LD_INT 1
52916: NEG
52917: PUSH
52918: LD_INT 3
52920: PUSH
52921: EMPTY
52922: LIST
52923: LIST
52924: PUSH
52925: LD_INT 2
52927: PUSH
52928: LD_INT 5
52930: PUSH
52931: EMPTY
52932: LIST
52933: LIST
52934: PUSH
52935: LD_INT 2
52937: NEG
52938: PUSH
52939: LD_INT 3
52941: PUSH
52942: EMPTY
52943: LIST
52944: LIST
52945: PUSH
52946: EMPTY
52947: LIST
52948: LIST
52949: LIST
52950: LIST
52951: LIST
52952: LIST
52953: LIST
52954: LIST
52955: LIST
52956: LIST
52957: LIST
52958: LIST
52959: LIST
52960: LIST
52961: LIST
52962: LIST
52963: LIST
52964: LIST
52965: LIST
52966: LIST
52967: LIST
52968: LIST
52969: LIST
52970: LIST
52971: LIST
52972: LIST
52973: LIST
52974: LIST
52975: LIST
52976: LIST
52977: LIST
52978: LIST
52979: LIST
52980: LIST
52981: LIST
52982: LIST
52983: LIST
52984: LIST
52985: LIST
52986: LIST
52987: LIST
52988: LIST
52989: LIST
52990: LIST
52991: LIST
52992: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
52993: LD_ADDR_VAR 0 34
52997: PUSH
52998: LD_INT 0
53000: PUSH
53001: LD_INT 4
53003: NEG
53004: PUSH
53005: EMPTY
53006: LIST
53007: LIST
53008: PUSH
53009: LD_INT 0
53011: PUSH
53012: LD_INT 5
53014: NEG
53015: PUSH
53016: EMPTY
53017: LIST
53018: LIST
53019: PUSH
53020: LD_INT 1
53022: PUSH
53023: LD_INT 4
53025: NEG
53026: PUSH
53027: EMPTY
53028: LIST
53029: LIST
53030: PUSH
53031: LD_INT 1
53033: PUSH
53034: LD_INT 3
53036: NEG
53037: PUSH
53038: EMPTY
53039: LIST
53040: LIST
53041: PUSH
53042: LD_INT 0
53044: PUSH
53045: LD_INT 3
53047: NEG
53048: PUSH
53049: EMPTY
53050: LIST
53051: LIST
53052: PUSH
53053: LD_INT 1
53055: NEG
53056: PUSH
53057: LD_INT 4
53059: NEG
53060: PUSH
53061: EMPTY
53062: LIST
53063: LIST
53064: PUSH
53065: LD_INT 1
53067: NEG
53068: PUSH
53069: LD_INT 5
53071: NEG
53072: PUSH
53073: EMPTY
53074: LIST
53075: LIST
53076: PUSH
53077: LD_INT 2
53079: PUSH
53080: LD_INT 3
53082: NEG
53083: PUSH
53084: EMPTY
53085: LIST
53086: LIST
53087: PUSH
53088: LD_INT 2
53090: NEG
53091: PUSH
53092: LD_INT 5
53094: NEG
53095: PUSH
53096: EMPTY
53097: LIST
53098: LIST
53099: PUSH
53100: LD_INT 3
53102: PUSH
53103: LD_INT 0
53105: PUSH
53106: EMPTY
53107: LIST
53108: LIST
53109: PUSH
53110: LD_INT 3
53112: PUSH
53113: LD_INT 1
53115: NEG
53116: PUSH
53117: EMPTY
53118: LIST
53119: LIST
53120: PUSH
53121: LD_INT 4
53123: PUSH
53124: LD_INT 0
53126: PUSH
53127: EMPTY
53128: LIST
53129: LIST
53130: PUSH
53131: LD_INT 4
53133: PUSH
53134: LD_INT 1
53136: PUSH
53137: EMPTY
53138: LIST
53139: LIST
53140: PUSH
53141: LD_INT 3
53143: PUSH
53144: LD_INT 1
53146: PUSH
53147: EMPTY
53148: LIST
53149: LIST
53150: PUSH
53151: LD_INT 2
53153: PUSH
53154: LD_INT 0
53156: PUSH
53157: EMPTY
53158: LIST
53159: LIST
53160: PUSH
53161: LD_INT 2
53163: PUSH
53164: LD_INT 1
53166: NEG
53167: PUSH
53168: EMPTY
53169: LIST
53170: LIST
53171: PUSH
53172: LD_INT 2
53174: PUSH
53175: LD_INT 2
53177: NEG
53178: PUSH
53179: EMPTY
53180: LIST
53181: LIST
53182: PUSH
53183: LD_INT 4
53185: PUSH
53186: LD_INT 2
53188: PUSH
53189: EMPTY
53190: LIST
53191: LIST
53192: PUSH
53193: LD_INT 4
53195: PUSH
53196: LD_INT 4
53198: PUSH
53199: EMPTY
53200: LIST
53201: LIST
53202: PUSH
53203: LD_INT 4
53205: PUSH
53206: LD_INT 3
53208: PUSH
53209: EMPTY
53210: LIST
53211: LIST
53212: PUSH
53213: LD_INT 5
53215: PUSH
53216: LD_INT 4
53218: PUSH
53219: EMPTY
53220: LIST
53221: LIST
53222: PUSH
53223: LD_INT 5
53225: PUSH
53226: LD_INT 5
53228: PUSH
53229: EMPTY
53230: LIST
53231: LIST
53232: PUSH
53233: LD_INT 4
53235: PUSH
53236: LD_INT 5
53238: PUSH
53239: EMPTY
53240: LIST
53241: LIST
53242: PUSH
53243: LD_INT 3
53245: PUSH
53246: LD_INT 4
53248: PUSH
53249: EMPTY
53250: LIST
53251: LIST
53252: PUSH
53253: LD_INT 3
53255: PUSH
53256: LD_INT 3
53258: PUSH
53259: EMPTY
53260: LIST
53261: LIST
53262: PUSH
53263: LD_INT 5
53265: PUSH
53266: LD_INT 3
53268: PUSH
53269: EMPTY
53270: LIST
53271: LIST
53272: PUSH
53273: LD_INT 3
53275: PUSH
53276: LD_INT 5
53278: PUSH
53279: EMPTY
53280: LIST
53281: LIST
53282: PUSH
53283: LD_INT 0
53285: PUSH
53286: LD_INT 3
53288: PUSH
53289: EMPTY
53290: LIST
53291: LIST
53292: PUSH
53293: LD_INT 0
53295: PUSH
53296: LD_INT 2
53298: PUSH
53299: EMPTY
53300: LIST
53301: LIST
53302: PUSH
53303: LD_INT 1
53305: PUSH
53306: LD_INT 3
53308: PUSH
53309: EMPTY
53310: LIST
53311: LIST
53312: PUSH
53313: LD_INT 1
53315: PUSH
53316: LD_INT 4
53318: PUSH
53319: EMPTY
53320: LIST
53321: LIST
53322: PUSH
53323: LD_INT 0
53325: PUSH
53326: LD_INT 4
53328: PUSH
53329: EMPTY
53330: LIST
53331: LIST
53332: PUSH
53333: LD_INT 1
53335: NEG
53336: PUSH
53337: LD_INT 3
53339: PUSH
53340: EMPTY
53341: LIST
53342: LIST
53343: PUSH
53344: LD_INT 1
53346: NEG
53347: PUSH
53348: LD_INT 2
53350: PUSH
53351: EMPTY
53352: LIST
53353: LIST
53354: PUSH
53355: LD_INT 2
53357: PUSH
53358: LD_INT 4
53360: PUSH
53361: EMPTY
53362: LIST
53363: LIST
53364: PUSH
53365: LD_INT 2
53367: NEG
53368: PUSH
53369: LD_INT 2
53371: PUSH
53372: EMPTY
53373: LIST
53374: LIST
53375: PUSH
53376: LD_INT 4
53378: NEG
53379: PUSH
53380: LD_INT 0
53382: PUSH
53383: EMPTY
53384: LIST
53385: LIST
53386: PUSH
53387: LD_INT 4
53389: NEG
53390: PUSH
53391: LD_INT 1
53393: NEG
53394: PUSH
53395: EMPTY
53396: LIST
53397: LIST
53398: PUSH
53399: LD_INT 3
53401: NEG
53402: PUSH
53403: LD_INT 0
53405: PUSH
53406: EMPTY
53407: LIST
53408: LIST
53409: PUSH
53410: LD_INT 3
53412: NEG
53413: PUSH
53414: LD_INT 1
53416: PUSH
53417: EMPTY
53418: LIST
53419: LIST
53420: PUSH
53421: LD_INT 4
53423: NEG
53424: PUSH
53425: LD_INT 1
53427: PUSH
53428: EMPTY
53429: LIST
53430: LIST
53431: PUSH
53432: LD_INT 5
53434: NEG
53435: PUSH
53436: LD_INT 0
53438: PUSH
53439: EMPTY
53440: LIST
53441: LIST
53442: PUSH
53443: LD_INT 5
53445: NEG
53446: PUSH
53447: LD_INT 1
53449: NEG
53450: PUSH
53451: EMPTY
53452: LIST
53453: LIST
53454: PUSH
53455: LD_INT 5
53457: NEG
53458: PUSH
53459: LD_INT 2
53461: NEG
53462: PUSH
53463: EMPTY
53464: LIST
53465: LIST
53466: PUSH
53467: LD_INT 3
53469: NEG
53470: PUSH
53471: LD_INT 2
53473: PUSH
53474: EMPTY
53475: LIST
53476: LIST
53477: PUSH
53478: EMPTY
53479: LIST
53480: LIST
53481: LIST
53482: LIST
53483: LIST
53484: LIST
53485: LIST
53486: LIST
53487: LIST
53488: LIST
53489: LIST
53490: LIST
53491: LIST
53492: LIST
53493: LIST
53494: LIST
53495: LIST
53496: LIST
53497: LIST
53498: LIST
53499: LIST
53500: LIST
53501: LIST
53502: LIST
53503: LIST
53504: LIST
53505: LIST
53506: LIST
53507: LIST
53508: LIST
53509: LIST
53510: LIST
53511: LIST
53512: LIST
53513: LIST
53514: LIST
53515: LIST
53516: LIST
53517: LIST
53518: LIST
53519: LIST
53520: LIST
53521: LIST
53522: LIST
53523: LIST
53524: ST_TO_ADDR
// end ; end ;
53525: GO 53528
53527: POP
// case btype of b_depot , b_warehouse :
53528: LD_VAR 0 1
53532: PUSH
53533: LD_INT 0
53535: DOUBLE
53536: EQUAL
53537: IFTRUE 53547
53539: LD_INT 1
53541: DOUBLE
53542: EQUAL
53543: IFTRUE 53547
53545: GO 53748
53547: POP
// case nation of nation_american :
53548: LD_VAR 0 5
53552: PUSH
53553: LD_INT 1
53555: DOUBLE
53556: EQUAL
53557: IFTRUE 53561
53559: GO 53617
53561: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
53562: LD_ADDR_VAR 0 9
53566: PUSH
53567: LD_VAR 0 11
53571: PUSH
53572: LD_VAR 0 12
53576: PUSH
53577: LD_VAR 0 13
53581: PUSH
53582: LD_VAR 0 14
53586: PUSH
53587: LD_VAR 0 15
53591: PUSH
53592: LD_VAR 0 16
53596: PUSH
53597: EMPTY
53598: LIST
53599: LIST
53600: LIST
53601: LIST
53602: LIST
53603: LIST
53604: PUSH
53605: LD_VAR 0 4
53609: PUSH
53610: LD_INT 1
53612: PLUS
53613: ARRAY
53614: ST_TO_ADDR
53615: GO 53746
53617: LD_INT 2
53619: DOUBLE
53620: EQUAL
53621: IFTRUE 53625
53623: GO 53681
53625: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
53626: LD_ADDR_VAR 0 9
53630: PUSH
53631: LD_VAR 0 17
53635: PUSH
53636: LD_VAR 0 18
53640: PUSH
53641: LD_VAR 0 19
53645: PUSH
53646: LD_VAR 0 20
53650: PUSH
53651: LD_VAR 0 21
53655: PUSH
53656: LD_VAR 0 22
53660: PUSH
53661: EMPTY
53662: LIST
53663: LIST
53664: LIST
53665: LIST
53666: LIST
53667: LIST
53668: PUSH
53669: LD_VAR 0 4
53673: PUSH
53674: LD_INT 1
53676: PLUS
53677: ARRAY
53678: ST_TO_ADDR
53679: GO 53746
53681: LD_INT 3
53683: DOUBLE
53684: EQUAL
53685: IFTRUE 53689
53687: GO 53745
53689: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
53690: LD_ADDR_VAR 0 9
53694: PUSH
53695: LD_VAR 0 23
53699: PUSH
53700: LD_VAR 0 24
53704: PUSH
53705: LD_VAR 0 25
53709: PUSH
53710: LD_VAR 0 26
53714: PUSH
53715: LD_VAR 0 27
53719: PUSH
53720: LD_VAR 0 28
53724: PUSH
53725: EMPTY
53726: LIST
53727: LIST
53728: LIST
53729: LIST
53730: LIST
53731: LIST
53732: PUSH
53733: LD_VAR 0 4
53737: PUSH
53738: LD_INT 1
53740: PLUS
53741: ARRAY
53742: ST_TO_ADDR
53743: GO 53746
53745: POP
53746: GO 54301
53748: LD_INT 2
53750: DOUBLE
53751: EQUAL
53752: IFTRUE 53762
53754: LD_INT 3
53756: DOUBLE
53757: EQUAL
53758: IFTRUE 53762
53760: GO 53818
53762: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
53763: LD_ADDR_VAR 0 9
53767: PUSH
53768: LD_VAR 0 29
53772: PUSH
53773: LD_VAR 0 30
53777: PUSH
53778: LD_VAR 0 31
53782: PUSH
53783: LD_VAR 0 32
53787: PUSH
53788: LD_VAR 0 33
53792: PUSH
53793: LD_VAR 0 34
53797: PUSH
53798: EMPTY
53799: LIST
53800: LIST
53801: LIST
53802: LIST
53803: LIST
53804: LIST
53805: PUSH
53806: LD_VAR 0 4
53810: PUSH
53811: LD_INT 1
53813: PLUS
53814: ARRAY
53815: ST_TO_ADDR
53816: GO 54301
53818: LD_INT 16
53820: DOUBLE
53821: EQUAL
53822: IFTRUE 53880
53824: LD_INT 17
53826: DOUBLE
53827: EQUAL
53828: IFTRUE 53880
53830: LD_INT 18
53832: DOUBLE
53833: EQUAL
53834: IFTRUE 53880
53836: LD_INT 19
53838: DOUBLE
53839: EQUAL
53840: IFTRUE 53880
53842: LD_INT 22
53844: DOUBLE
53845: EQUAL
53846: IFTRUE 53880
53848: LD_INT 20
53850: DOUBLE
53851: EQUAL
53852: IFTRUE 53880
53854: LD_INT 21
53856: DOUBLE
53857: EQUAL
53858: IFTRUE 53880
53860: LD_INT 23
53862: DOUBLE
53863: EQUAL
53864: IFTRUE 53880
53866: LD_INT 24
53868: DOUBLE
53869: EQUAL
53870: IFTRUE 53880
53872: LD_INT 25
53874: DOUBLE
53875: EQUAL
53876: IFTRUE 53880
53878: GO 53936
53880: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
53881: LD_ADDR_VAR 0 9
53885: PUSH
53886: LD_VAR 0 35
53890: PUSH
53891: LD_VAR 0 36
53895: PUSH
53896: LD_VAR 0 37
53900: PUSH
53901: LD_VAR 0 38
53905: PUSH
53906: LD_VAR 0 39
53910: PUSH
53911: LD_VAR 0 40
53915: PUSH
53916: EMPTY
53917: LIST
53918: LIST
53919: LIST
53920: LIST
53921: LIST
53922: LIST
53923: PUSH
53924: LD_VAR 0 4
53928: PUSH
53929: LD_INT 1
53931: PLUS
53932: ARRAY
53933: ST_TO_ADDR
53934: GO 54301
53936: LD_INT 6
53938: DOUBLE
53939: EQUAL
53940: IFTRUE 53992
53942: LD_INT 7
53944: DOUBLE
53945: EQUAL
53946: IFTRUE 53992
53948: LD_INT 8
53950: DOUBLE
53951: EQUAL
53952: IFTRUE 53992
53954: LD_INT 13
53956: DOUBLE
53957: EQUAL
53958: IFTRUE 53992
53960: LD_INT 12
53962: DOUBLE
53963: EQUAL
53964: IFTRUE 53992
53966: LD_INT 15
53968: DOUBLE
53969: EQUAL
53970: IFTRUE 53992
53972: LD_INT 11
53974: DOUBLE
53975: EQUAL
53976: IFTRUE 53992
53978: LD_INT 14
53980: DOUBLE
53981: EQUAL
53982: IFTRUE 53992
53984: LD_INT 10
53986: DOUBLE
53987: EQUAL
53988: IFTRUE 53992
53990: GO 54048
53992: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
53993: LD_ADDR_VAR 0 9
53997: PUSH
53998: LD_VAR 0 41
54002: PUSH
54003: LD_VAR 0 42
54007: PUSH
54008: LD_VAR 0 43
54012: PUSH
54013: LD_VAR 0 44
54017: PUSH
54018: LD_VAR 0 45
54022: PUSH
54023: LD_VAR 0 46
54027: PUSH
54028: EMPTY
54029: LIST
54030: LIST
54031: LIST
54032: LIST
54033: LIST
54034: LIST
54035: PUSH
54036: LD_VAR 0 4
54040: PUSH
54041: LD_INT 1
54043: PLUS
54044: ARRAY
54045: ST_TO_ADDR
54046: GO 54301
54048: LD_INT 36
54050: DOUBLE
54051: EQUAL
54052: IFTRUE 54056
54054: GO 54112
54056: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
54057: LD_ADDR_VAR 0 9
54061: PUSH
54062: LD_VAR 0 47
54066: PUSH
54067: LD_VAR 0 48
54071: PUSH
54072: LD_VAR 0 49
54076: PUSH
54077: LD_VAR 0 50
54081: PUSH
54082: LD_VAR 0 51
54086: PUSH
54087: LD_VAR 0 52
54091: PUSH
54092: EMPTY
54093: LIST
54094: LIST
54095: LIST
54096: LIST
54097: LIST
54098: LIST
54099: PUSH
54100: LD_VAR 0 4
54104: PUSH
54105: LD_INT 1
54107: PLUS
54108: ARRAY
54109: ST_TO_ADDR
54110: GO 54301
54112: LD_INT 4
54114: DOUBLE
54115: EQUAL
54116: IFTRUE 54138
54118: LD_INT 5
54120: DOUBLE
54121: EQUAL
54122: IFTRUE 54138
54124: LD_INT 34
54126: DOUBLE
54127: EQUAL
54128: IFTRUE 54138
54130: LD_INT 37
54132: DOUBLE
54133: EQUAL
54134: IFTRUE 54138
54136: GO 54194
54138: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
54139: LD_ADDR_VAR 0 9
54143: PUSH
54144: LD_VAR 0 53
54148: PUSH
54149: LD_VAR 0 54
54153: PUSH
54154: LD_VAR 0 55
54158: PUSH
54159: LD_VAR 0 56
54163: PUSH
54164: LD_VAR 0 57
54168: PUSH
54169: LD_VAR 0 58
54173: PUSH
54174: EMPTY
54175: LIST
54176: LIST
54177: LIST
54178: LIST
54179: LIST
54180: LIST
54181: PUSH
54182: LD_VAR 0 4
54186: PUSH
54187: LD_INT 1
54189: PLUS
54190: ARRAY
54191: ST_TO_ADDR
54192: GO 54301
54194: LD_INT 31
54196: DOUBLE
54197: EQUAL
54198: IFTRUE 54244
54200: LD_INT 32
54202: DOUBLE
54203: EQUAL
54204: IFTRUE 54244
54206: LD_INT 33
54208: DOUBLE
54209: EQUAL
54210: IFTRUE 54244
54212: LD_INT 27
54214: DOUBLE
54215: EQUAL
54216: IFTRUE 54244
54218: LD_INT 26
54220: DOUBLE
54221: EQUAL
54222: IFTRUE 54244
54224: LD_INT 28
54226: DOUBLE
54227: EQUAL
54228: IFTRUE 54244
54230: LD_INT 29
54232: DOUBLE
54233: EQUAL
54234: IFTRUE 54244
54236: LD_INT 30
54238: DOUBLE
54239: EQUAL
54240: IFTRUE 54244
54242: GO 54300
54244: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
54245: LD_ADDR_VAR 0 9
54249: PUSH
54250: LD_VAR 0 59
54254: PUSH
54255: LD_VAR 0 60
54259: PUSH
54260: LD_VAR 0 61
54264: PUSH
54265: LD_VAR 0 62
54269: PUSH
54270: LD_VAR 0 63
54274: PUSH
54275: LD_VAR 0 64
54279: PUSH
54280: EMPTY
54281: LIST
54282: LIST
54283: LIST
54284: LIST
54285: LIST
54286: LIST
54287: PUSH
54288: LD_VAR 0 4
54292: PUSH
54293: LD_INT 1
54295: PLUS
54296: ARRAY
54297: ST_TO_ADDR
54298: GO 54301
54300: POP
// temp_list2 = [ ] ;
54301: LD_ADDR_VAR 0 10
54305: PUSH
54306: EMPTY
54307: ST_TO_ADDR
// for i in temp_list do
54308: LD_ADDR_VAR 0 8
54312: PUSH
54313: LD_VAR 0 9
54317: PUSH
54318: FOR_IN
54319: IFFALSE 54371
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
54321: LD_ADDR_VAR 0 10
54325: PUSH
54326: LD_VAR 0 10
54330: PUSH
54331: LD_VAR 0 8
54335: PUSH
54336: LD_INT 1
54338: ARRAY
54339: PUSH
54340: LD_VAR 0 2
54344: PLUS
54345: PUSH
54346: LD_VAR 0 8
54350: PUSH
54351: LD_INT 2
54353: ARRAY
54354: PUSH
54355: LD_VAR 0 3
54359: PLUS
54360: PUSH
54361: EMPTY
54362: LIST
54363: LIST
54364: PUSH
54365: EMPTY
54366: LIST
54367: ADD
54368: ST_TO_ADDR
54369: GO 54318
54371: POP
54372: POP
// result = temp_list2 ;
54373: LD_ADDR_VAR 0 7
54377: PUSH
54378: LD_VAR 0 10
54382: ST_TO_ADDR
// end ;
54383: LD_VAR 0 7
54387: RET
// export function EnemyInRange ( unit , dist ) ; begin
54388: LD_INT 0
54390: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
54391: LD_ADDR_VAR 0 3
54395: PUSH
54396: LD_VAR 0 1
54400: PPUSH
54401: CALL_OW 255
54405: PPUSH
54406: LD_VAR 0 1
54410: PPUSH
54411: CALL_OW 250
54415: PPUSH
54416: LD_VAR 0 1
54420: PPUSH
54421: CALL_OW 251
54425: PPUSH
54426: LD_VAR 0 2
54430: PPUSH
54431: CALL 27761 0 4
54435: PUSH
54436: LD_INT 4
54438: ARRAY
54439: ST_TO_ADDR
// end ;
54440: LD_VAR 0 3
54444: RET
// export function PlayerSeeMe ( unit ) ; begin
54445: LD_INT 0
54447: PPUSH
// result := See ( your_side , unit ) ;
54448: LD_ADDR_VAR 0 2
54452: PUSH
54453: LD_OWVAR 2
54457: PPUSH
54458: LD_VAR 0 1
54462: PPUSH
54463: CALL_OW 292
54467: ST_TO_ADDR
// end ;
54468: LD_VAR 0 2
54472: RET
// export function ReverseDir ( unit ) ; begin
54473: LD_INT 0
54475: PPUSH
// if not unit then
54476: LD_VAR 0 1
54480: NOT
54481: IFFALSE 54485
// exit ;
54483: GO 54508
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
54485: LD_ADDR_VAR 0 2
54489: PUSH
54490: LD_VAR 0 1
54494: PPUSH
54495: CALL_OW 254
54499: PUSH
54500: LD_INT 3
54502: PLUS
54503: PUSH
54504: LD_INT 6
54506: MOD
54507: ST_TO_ADDR
// end ;
54508: LD_VAR 0 2
54512: RET
// export function ReverseArray ( array ) ; var i ; begin
54513: LD_INT 0
54515: PPUSH
54516: PPUSH
// if not array then
54517: LD_VAR 0 1
54521: NOT
54522: IFFALSE 54526
// exit ;
54524: GO 54581
// result := [ ] ;
54526: LD_ADDR_VAR 0 2
54530: PUSH
54531: EMPTY
54532: ST_TO_ADDR
// for i := array downto 1 do
54533: LD_ADDR_VAR 0 3
54537: PUSH
54538: DOUBLE
54539: LD_VAR 0 1
54543: INC
54544: ST_TO_ADDR
54545: LD_INT 1
54547: PUSH
54548: FOR_DOWNTO
54549: IFFALSE 54579
// result := Join ( result , array [ i ] ) ;
54551: LD_ADDR_VAR 0 2
54555: PUSH
54556: LD_VAR 0 2
54560: PPUSH
54561: LD_VAR 0 1
54565: PUSH
54566: LD_VAR 0 3
54570: ARRAY
54571: PPUSH
54572: CALL 59246 0 2
54576: ST_TO_ADDR
54577: GO 54548
54579: POP
54580: POP
// end ;
54581: LD_VAR 0 2
54585: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
54586: LD_INT 0
54588: PPUSH
54589: PPUSH
54590: PPUSH
54591: PPUSH
54592: PPUSH
54593: PPUSH
// if not unit or not hexes then
54594: LD_VAR 0 1
54598: NOT
54599: PUSH
54600: LD_VAR 0 2
54604: NOT
54605: OR
54606: IFFALSE 54610
// exit ;
54608: GO 54733
// dist := 9999 ;
54610: LD_ADDR_VAR 0 5
54614: PUSH
54615: LD_INT 9999
54617: ST_TO_ADDR
// for i = 1 to hexes do
54618: LD_ADDR_VAR 0 4
54622: PUSH
54623: DOUBLE
54624: LD_INT 1
54626: DEC
54627: ST_TO_ADDR
54628: LD_VAR 0 2
54632: PUSH
54633: FOR_TO
54634: IFFALSE 54721
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
54636: LD_ADDR_VAR 0 6
54640: PUSH
54641: LD_VAR 0 1
54645: PPUSH
54646: LD_VAR 0 2
54650: PUSH
54651: LD_VAR 0 4
54655: ARRAY
54656: PUSH
54657: LD_INT 1
54659: ARRAY
54660: PPUSH
54661: LD_VAR 0 2
54665: PUSH
54666: LD_VAR 0 4
54670: ARRAY
54671: PUSH
54672: LD_INT 2
54674: ARRAY
54675: PPUSH
54676: CALL_OW 297
54680: ST_TO_ADDR
// if tdist < dist then
54681: LD_VAR 0 6
54685: PUSH
54686: LD_VAR 0 5
54690: LESS
54691: IFFALSE 54719
// begin hex := hexes [ i ] ;
54693: LD_ADDR_VAR 0 8
54697: PUSH
54698: LD_VAR 0 2
54702: PUSH
54703: LD_VAR 0 4
54707: ARRAY
54708: ST_TO_ADDR
// dist := tdist ;
54709: LD_ADDR_VAR 0 5
54713: PUSH
54714: LD_VAR 0 6
54718: ST_TO_ADDR
// end ; end ;
54719: GO 54633
54721: POP
54722: POP
// result := hex ;
54723: LD_ADDR_VAR 0 3
54727: PUSH
54728: LD_VAR 0 8
54732: ST_TO_ADDR
// end ;
54733: LD_VAR 0 3
54737: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
54738: LD_INT 0
54740: PPUSH
54741: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
54742: LD_VAR 0 1
54746: NOT
54747: PUSH
54748: LD_VAR 0 1
54752: PUSH
54753: LD_INT 21
54755: PUSH
54756: LD_INT 2
54758: PUSH
54759: EMPTY
54760: LIST
54761: LIST
54762: PUSH
54763: LD_INT 23
54765: PUSH
54766: LD_INT 2
54768: PUSH
54769: EMPTY
54770: LIST
54771: LIST
54772: PUSH
54773: EMPTY
54774: LIST
54775: LIST
54776: PPUSH
54777: CALL_OW 69
54781: IN
54782: NOT
54783: OR
54784: IFFALSE 54788
// exit ;
54786: GO 54835
// for i = 1 to 3 do
54788: LD_ADDR_VAR 0 3
54792: PUSH
54793: DOUBLE
54794: LD_INT 1
54796: DEC
54797: ST_TO_ADDR
54798: LD_INT 3
54800: PUSH
54801: FOR_TO
54802: IFFALSE 54833
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
54804: LD_VAR 0 1
54808: PPUSH
54809: CALL_OW 250
54813: PPUSH
54814: LD_VAR 0 1
54818: PPUSH
54819: CALL_OW 251
54823: PPUSH
54824: LD_INT 1
54826: PPUSH
54827: CALL_OW 453
54831: GO 54801
54833: POP
54834: POP
// end ;
54835: LD_VAR 0 2
54839: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
54840: LD_INT 0
54842: PPUSH
54843: PPUSH
54844: PPUSH
54845: PPUSH
54846: PPUSH
54847: PPUSH
// if not unit or not enemy_unit then
54848: LD_VAR 0 1
54852: NOT
54853: PUSH
54854: LD_VAR 0 2
54858: NOT
54859: OR
54860: IFFALSE 54864
// exit ;
54862: GO 55331
// if GetLives ( i ) < 250 then
54864: LD_VAR 0 4
54868: PPUSH
54869: CALL_OW 256
54873: PUSH
54874: LD_INT 250
54876: LESS
54877: IFFALSE 54890
// begin ComAutodestruct ( i ) ;
54879: LD_VAR 0 4
54883: PPUSH
54884: CALL 54738 0 1
// exit ;
54888: GO 55331
// end ; x := GetX ( enemy_unit ) ;
54890: LD_ADDR_VAR 0 7
54894: PUSH
54895: LD_VAR 0 2
54899: PPUSH
54900: CALL_OW 250
54904: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
54905: LD_ADDR_VAR 0 8
54909: PUSH
54910: LD_VAR 0 2
54914: PPUSH
54915: CALL_OW 251
54919: ST_TO_ADDR
// if not x or not y then
54920: LD_VAR 0 7
54924: NOT
54925: PUSH
54926: LD_VAR 0 8
54930: NOT
54931: OR
54932: IFFALSE 54936
// exit ;
54934: GO 55331
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
54936: LD_ADDR_VAR 0 6
54940: PUSH
54941: LD_VAR 0 7
54945: PPUSH
54946: LD_INT 0
54948: PPUSH
54949: LD_INT 4
54951: PPUSH
54952: CALL_OW 272
54956: PUSH
54957: LD_VAR 0 8
54961: PPUSH
54962: LD_INT 0
54964: PPUSH
54965: LD_INT 4
54967: PPUSH
54968: CALL_OW 273
54972: PUSH
54973: EMPTY
54974: LIST
54975: LIST
54976: PUSH
54977: LD_VAR 0 7
54981: PPUSH
54982: LD_INT 1
54984: PPUSH
54985: LD_INT 4
54987: PPUSH
54988: CALL_OW 272
54992: PUSH
54993: LD_VAR 0 8
54997: PPUSH
54998: LD_INT 1
55000: PPUSH
55001: LD_INT 4
55003: PPUSH
55004: CALL_OW 273
55008: PUSH
55009: EMPTY
55010: LIST
55011: LIST
55012: PUSH
55013: LD_VAR 0 7
55017: PPUSH
55018: LD_INT 2
55020: PPUSH
55021: LD_INT 4
55023: PPUSH
55024: CALL_OW 272
55028: PUSH
55029: LD_VAR 0 8
55033: PPUSH
55034: LD_INT 2
55036: PPUSH
55037: LD_INT 4
55039: PPUSH
55040: CALL_OW 273
55044: PUSH
55045: EMPTY
55046: LIST
55047: LIST
55048: PUSH
55049: LD_VAR 0 7
55053: PPUSH
55054: LD_INT 3
55056: PPUSH
55057: LD_INT 4
55059: PPUSH
55060: CALL_OW 272
55064: PUSH
55065: LD_VAR 0 8
55069: PPUSH
55070: LD_INT 3
55072: PPUSH
55073: LD_INT 4
55075: PPUSH
55076: CALL_OW 273
55080: PUSH
55081: EMPTY
55082: LIST
55083: LIST
55084: PUSH
55085: LD_VAR 0 7
55089: PPUSH
55090: LD_INT 4
55092: PPUSH
55093: LD_INT 4
55095: PPUSH
55096: CALL_OW 272
55100: PUSH
55101: LD_VAR 0 8
55105: PPUSH
55106: LD_INT 4
55108: PPUSH
55109: LD_INT 4
55111: PPUSH
55112: CALL_OW 273
55116: PUSH
55117: EMPTY
55118: LIST
55119: LIST
55120: PUSH
55121: LD_VAR 0 7
55125: PPUSH
55126: LD_INT 5
55128: PPUSH
55129: LD_INT 4
55131: PPUSH
55132: CALL_OW 272
55136: PUSH
55137: LD_VAR 0 8
55141: PPUSH
55142: LD_INT 5
55144: PPUSH
55145: LD_INT 4
55147: PPUSH
55148: CALL_OW 273
55152: PUSH
55153: EMPTY
55154: LIST
55155: LIST
55156: PUSH
55157: EMPTY
55158: LIST
55159: LIST
55160: LIST
55161: LIST
55162: LIST
55163: LIST
55164: ST_TO_ADDR
// for i = tmp downto 1 do
55165: LD_ADDR_VAR 0 4
55169: PUSH
55170: DOUBLE
55171: LD_VAR 0 6
55175: INC
55176: ST_TO_ADDR
55177: LD_INT 1
55179: PUSH
55180: FOR_DOWNTO
55181: IFFALSE 55282
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
55183: LD_VAR 0 6
55187: PUSH
55188: LD_VAR 0 4
55192: ARRAY
55193: PUSH
55194: LD_INT 1
55196: ARRAY
55197: PPUSH
55198: LD_VAR 0 6
55202: PUSH
55203: LD_VAR 0 4
55207: ARRAY
55208: PUSH
55209: LD_INT 2
55211: ARRAY
55212: PPUSH
55213: CALL_OW 488
55217: NOT
55218: PUSH
55219: LD_VAR 0 6
55223: PUSH
55224: LD_VAR 0 4
55228: ARRAY
55229: PUSH
55230: LD_INT 1
55232: ARRAY
55233: PPUSH
55234: LD_VAR 0 6
55238: PUSH
55239: LD_VAR 0 4
55243: ARRAY
55244: PUSH
55245: LD_INT 2
55247: ARRAY
55248: PPUSH
55249: CALL_OW 428
55253: PUSH
55254: LD_INT 0
55256: NONEQUAL
55257: OR
55258: IFFALSE 55280
// tmp := Delete ( tmp , i ) ;
55260: LD_ADDR_VAR 0 6
55264: PUSH
55265: LD_VAR 0 6
55269: PPUSH
55270: LD_VAR 0 4
55274: PPUSH
55275: CALL_OW 3
55279: ST_TO_ADDR
55280: GO 55180
55282: POP
55283: POP
// j := GetClosestHex ( unit , tmp ) ;
55284: LD_ADDR_VAR 0 5
55288: PUSH
55289: LD_VAR 0 1
55293: PPUSH
55294: LD_VAR 0 6
55298: PPUSH
55299: CALL 54586 0 2
55303: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
55304: LD_VAR 0 1
55308: PPUSH
55309: LD_VAR 0 5
55313: PUSH
55314: LD_INT 1
55316: ARRAY
55317: PPUSH
55318: LD_VAR 0 5
55322: PUSH
55323: LD_INT 2
55325: ARRAY
55326: PPUSH
55327: CALL_OW 111
// end ;
55331: LD_VAR 0 3
55335: RET
// export function PrepareApemanSoldier ( ) ; begin
55336: LD_INT 0
55338: PPUSH
// uc_nation := 0 ;
55339: LD_ADDR_OWVAR 21
55343: PUSH
55344: LD_INT 0
55346: ST_TO_ADDR
// hc_sex := sex_male ;
55347: LD_ADDR_OWVAR 27
55351: PUSH
55352: LD_INT 1
55354: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
55355: LD_ADDR_OWVAR 28
55359: PUSH
55360: LD_INT 15
55362: ST_TO_ADDR
// hc_gallery :=  ;
55363: LD_ADDR_OWVAR 33
55367: PUSH
55368: LD_STRING 
55370: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
55371: LD_ADDR_OWVAR 31
55375: PUSH
55376: LD_INT 0
55378: PPUSH
55379: LD_INT 3
55381: PPUSH
55382: CALL_OW 12
55386: PUSH
55387: LD_INT 0
55389: PPUSH
55390: LD_INT 3
55392: PPUSH
55393: CALL_OW 12
55397: PUSH
55398: LD_INT 0
55400: PUSH
55401: LD_INT 0
55403: PUSH
55404: EMPTY
55405: LIST
55406: LIST
55407: LIST
55408: LIST
55409: ST_TO_ADDR
// end ;
55410: LD_VAR 0 1
55414: RET
// export function PrepareApemanEngineer ( ) ; begin
55415: LD_INT 0
55417: PPUSH
// uc_nation := 0 ;
55418: LD_ADDR_OWVAR 21
55422: PUSH
55423: LD_INT 0
55425: ST_TO_ADDR
// hc_sex := sex_male ;
55426: LD_ADDR_OWVAR 27
55430: PUSH
55431: LD_INT 1
55433: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
55434: LD_ADDR_OWVAR 28
55438: PUSH
55439: LD_INT 16
55441: ST_TO_ADDR
// hc_gallery :=  ;
55442: LD_ADDR_OWVAR 33
55446: PUSH
55447: LD_STRING 
55449: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
55450: LD_ADDR_OWVAR 31
55454: PUSH
55455: LD_INT 0
55457: PPUSH
55458: LD_INT 3
55460: PPUSH
55461: CALL_OW 12
55465: PUSH
55466: LD_INT 0
55468: PPUSH
55469: LD_INT 3
55471: PPUSH
55472: CALL_OW 12
55476: PUSH
55477: LD_INT 0
55479: PUSH
55480: LD_INT 0
55482: PUSH
55483: EMPTY
55484: LIST
55485: LIST
55486: LIST
55487: LIST
55488: ST_TO_ADDR
// end ;
55489: LD_VAR 0 1
55493: RET
// export function PrepareApeman ( agressivity ) ; begin
55494: LD_INT 0
55496: PPUSH
// uc_side := 0 ;
55497: LD_ADDR_OWVAR 20
55501: PUSH
55502: LD_INT 0
55504: ST_TO_ADDR
// uc_nation := 0 ;
55505: LD_ADDR_OWVAR 21
55509: PUSH
55510: LD_INT 0
55512: ST_TO_ADDR
// hc_sex := sex_male ;
55513: LD_ADDR_OWVAR 27
55517: PUSH
55518: LD_INT 1
55520: ST_TO_ADDR
// hc_class := class_apeman ;
55521: LD_ADDR_OWVAR 28
55525: PUSH
55526: LD_INT 12
55528: ST_TO_ADDR
// hc_gallery :=  ;
55529: LD_ADDR_OWVAR 33
55533: PUSH
55534: LD_STRING 
55536: ST_TO_ADDR
// if agressivity = 0 then
55537: LD_VAR 0 1
55541: PUSH
55542: LD_INT 0
55544: EQUAL
55545: IFFALSE 55557
// hc_agressivity := 0 else
55547: LD_ADDR_OWVAR 35
55551: PUSH
55552: LD_INT 0
55554: ST_TO_ADDR
55555: GO 55578
// hc_agressivity := rand ( - agressivity , agressivity ) ;
55557: LD_ADDR_OWVAR 35
55561: PUSH
55562: LD_VAR 0 1
55566: NEG
55567: PPUSH
55568: LD_VAR 0 1
55572: PPUSH
55573: CALL_OW 12
55577: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
55578: LD_ADDR_OWVAR 31
55582: PUSH
55583: LD_INT 0
55585: PPUSH
55586: LD_INT 3
55588: PPUSH
55589: CALL_OW 12
55593: PUSH
55594: LD_INT 0
55596: PPUSH
55597: LD_INT 3
55599: PPUSH
55600: CALL_OW 12
55604: PUSH
55605: LD_INT 0
55607: PUSH
55608: LD_INT 0
55610: PUSH
55611: EMPTY
55612: LIST
55613: LIST
55614: LIST
55615: LIST
55616: ST_TO_ADDR
// end ;
55617: LD_VAR 0 2
55621: RET
// export function PrepareTiger ( agressivity ) ; begin
55622: LD_INT 0
55624: PPUSH
// uc_side := 0 ;
55625: LD_ADDR_OWVAR 20
55629: PUSH
55630: LD_INT 0
55632: ST_TO_ADDR
// uc_nation := 0 ;
55633: LD_ADDR_OWVAR 21
55637: PUSH
55638: LD_INT 0
55640: ST_TO_ADDR
// hc_class := class_tiger ;
55641: LD_ADDR_OWVAR 28
55645: PUSH
55646: LD_INT 14
55648: ST_TO_ADDR
// hc_gallery :=  ;
55649: LD_ADDR_OWVAR 33
55653: PUSH
55654: LD_STRING 
55656: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
55657: LD_ADDR_OWVAR 35
55661: PUSH
55662: LD_VAR 0 1
55666: NEG
55667: PPUSH
55668: LD_VAR 0 1
55672: PPUSH
55673: CALL_OW 12
55677: ST_TO_ADDR
// end ;
55678: LD_VAR 0 2
55682: RET
// export function PrepareEnchidna ( ) ; begin
55683: LD_INT 0
55685: PPUSH
// uc_side := 0 ;
55686: LD_ADDR_OWVAR 20
55690: PUSH
55691: LD_INT 0
55693: ST_TO_ADDR
// uc_nation := 0 ;
55694: LD_ADDR_OWVAR 21
55698: PUSH
55699: LD_INT 0
55701: ST_TO_ADDR
// hc_class := class_baggie ;
55702: LD_ADDR_OWVAR 28
55706: PUSH
55707: LD_INT 13
55709: ST_TO_ADDR
// hc_gallery :=  ;
55710: LD_ADDR_OWVAR 33
55714: PUSH
55715: LD_STRING 
55717: ST_TO_ADDR
// end ;
55718: LD_VAR 0 1
55722: RET
// export function PrepareFrog ( ) ; begin
55723: LD_INT 0
55725: PPUSH
// uc_side := 0 ;
55726: LD_ADDR_OWVAR 20
55730: PUSH
55731: LD_INT 0
55733: ST_TO_ADDR
// uc_nation := 0 ;
55734: LD_ADDR_OWVAR 21
55738: PUSH
55739: LD_INT 0
55741: ST_TO_ADDR
// hc_class := class_frog ;
55742: LD_ADDR_OWVAR 28
55746: PUSH
55747: LD_INT 19
55749: ST_TO_ADDR
// hc_gallery :=  ;
55750: LD_ADDR_OWVAR 33
55754: PUSH
55755: LD_STRING 
55757: ST_TO_ADDR
// end ;
55758: LD_VAR 0 1
55762: RET
// export function PrepareFish ( ) ; begin
55763: LD_INT 0
55765: PPUSH
// uc_side := 0 ;
55766: LD_ADDR_OWVAR 20
55770: PUSH
55771: LD_INT 0
55773: ST_TO_ADDR
// uc_nation := 0 ;
55774: LD_ADDR_OWVAR 21
55778: PUSH
55779: LD_INT 0
55781: ST_TO_ADDR
// hc_class := class_fish ;
55782: LD_ADDR_OWVAR 28
55786: PUSH
55787: LD_INT 20
55789: ST_TO_ADDR
// hc_gallery :=  ;
55790: LD_ADDR_OWVAR 33
55794: PUSH
55795: LD_STRING 
55797: ST_TO_ADDR
// end ;
55798: LD_VAR 0 1
55802: RET
// export function PrepareBird ( ) ; begin
55803: LD_INT 0
55805: PPUSH
// uc_side := 0 ;
55806: LD_ADDR_OWVAR 20
55810: PUSH
55811: LD_INT 0
55813: ST_TO_ADDR
// uc_nation := 0 ;
55814: LD_ADDR_OWVAR 21
55818: PUSH
55819: LD_INT 0
55821: ST_TO_ADDR
// hc_class := class_phororhacos ;
55822: LD_ADDR_OWVAR 28
55826: PUSH
55827: LD_INT 18
55829: ST_TO_ADDR
// hc_gallery :=  ;
55830: LD_ADDR_OWVAR 33
55834: PUSH
55835: LD_STRING 
55837: ST_TO_ADDR
// end ;
55838: LD_VAR 0 1
55842: RET
// export function PrepareHorse ( ) ; begin
55843: LD_INT 0
55845: PPUSH
// uc_side := 0 ;
55846: LD_ADDR_OWVAR 20
55850: PUSH
55851: LD_INT 0
55853: ST_TO_ADDR
// uc_nation := 0 ;
55854: LD_ADDR_OWVAR 21
55858: PUSH
55859: LD_INT 0
55861: ST_TO_ADDR
// hc_class := class_horse ;
55862: LD_ADDR_OWVAR 28
55866: PUSH
55867: LD_INT 21
55869: ST_TO_ADDR
// hc_gallery :=  ;
55870: LD_ADDR_OWVAR 33
55874: PUSH
55875: LD_STRING 
55877: ST_TO_ADDR
// end ;
55878: LD_VAR 0 1
55882: RET
// export function PrepareMastodont ( ) ; begin
55883: LD_INT 0
55885: PPUSH
// uc_side := 0 ;
55886: LD_ADDR_OWVAR 20
55890: PUSH
55891: LD_INT 0
55893: ST_TO_ADDR
// uc_nation := 0 ;
55894: LD_ADDR_OWVAR 21
55898: PUSH
55899: LD_INT 0
55901: ST_TO_ADDR
// vc_chassis := class_mastodont ;
55902: LD_ADDR_OWVAR 37
55906: PUSH
55907: LD_INT 31
55909: ST_TO_ADDR
// vc_control := control_rider ;
55910: LD_ADDR_OWVAR 38
55914: PUSH
55915: LD_INT 4
55917: ST_TO_ADDR
// end ;
55918: LD_VAR 0 1
55922: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
55923: LD_INT 0
55925: PPUSH
55926: PPUSH
55927: PPUSH
// uc_side = 0 ;
55928: LD_ADDR_OWVAR 20
55932: PUSH
55933: LD_INT 0
55935: ST_TO_ADDR
// uc_nation = 0 ;
55936: LD_ADDR_OWVAR 21
55940: PUSH
55941: LD_INT 0
55943: ST_TO_ADDR
// InitHc_All ( ) ;
55944: CALL_OW 584
// InitVc ;
55948: CALL_OW 20
// if mastodonts then
55952: LD_VAR 0 6
55956: IFFALSE 56023
// for i = 1 to mastodonts do
55958: LD_ADDR_VAR 0 11
55962: PUSH
55963: DOUBLE
55964: LD_INT 1
55966: DEC
55967: ST_TO_ADDR
55968: LD_VAR 0 6
55972: PUSH
55973: FOR_TO
55974: IFFALSE 56021
// begin vc_chassis := 31 ;
55976: LD_ADDR_OWVAR 37
55980: PUSH
55981: LD_INT 31
55983: ST_TO_ADDR
// vc_control := control_rider ;
55984: LD_ADDR_OWVAR 38
55988: PUSH
55989: LD_INT 4
55991: ST_TO_ADDR
// animal := CreateVehicle ;
55992: LD_ADDR_VAR 0 12
55996: PUSH
55997: CALL_OW 45
56001: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
56002: LD_VAR 0 12
56006: PPUSH
56007: LD_VAR 0 8
56011: PPUSH
56012: LD_INT 0
56014: PPUSH
56015: CALL 58151 0 3
// end ;
56019: GO 55973
56021: POP
56022: POP
// if horses then
56023: LD_VAR 0 5
56027: IFFALSE 56094
// for i = 1 to horses do
56029: LD_ADDR_VAR 0 11
56033: PUSH
56034: DOUBLE
56035: LD_INT 1
56037: DEC
56038: ST_TO_ADDR
56039: LD_VAR 0 5
56043: PUSH
56044: FOR_TO
56045: IFFALSE 56092
// begin hc_class := 21 ;
56047: LD_ADDR_OWVAR 28
56051: PUSH
56052: LD_INT 21
56054: ST_TO_ADDR
// hc_gallery :=  ;
56055: LD_ADDR_OWVAR 33
56059: PUSH
56060: LD_STRING 
56062: ST_TO_ADDR
// animal := CreateHuman ;
56063: LD_ADDR_VAR 0 12
56067: PUSH
56068: CALL_OW 44
56072: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
56073: LD_VAR 0 12
56077: PPUSH
56078: LD_VAR 0 8
56082: PPUSH
56083: LD_INT 0
56085: PPUSH
56086: CALL 58151 0 3
// end ;
56090: GO 56044
56092: POP
56093: POP
// if birds then
56094: LD_VAR 0 1
56098: IFFALSE 56165
// for i = 1 to birds do
56100: LD_ADDR_VAR 0 11
56104: PUSH
56105: DOUBLE
56106: LD_INT 1
56108: DEC
56109: ST_TO_ADDR
56110: LD_VAR 0 1
56114: PUSH
56115: FOR_TO
56116: IFFALSE 56163
// begin hc_class := 18 ;
56118: LD_ADDR_OWVAR 28
56122: PUSH
56123: LD_INT 18
56125: ST_TO_ADDR
// hc_gallery =  ;
56126: LD_ADDR_OWVAR 33
56130: PUSH
56131: LD_STRING 
56133: ST_TO_ADDR
// animal := CreateHuman ;
56134: LD_ADDR_VAR 0 12
56138: PUSH
56139: CALL_OW 44
56143: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
56144: LD_VAR 0 12
56148: PPUSH
56149: LD_VAR 0 8
56153: PPUSH
56154: LD_INT 0
56156: PPUSH
56157: CALL 58151 0 3
// end ;
56161: GO 56115
56163: POP
56164: POP
// if tigers then
56165: LD_VAR 0 2
56169: IFFALSE 56253
// for i = 1 to tigers do
56171: LD_ADDR_VAR 0 11
56175: PUSH
56176: DOUBLE
56177: LD_INT 1
56179: DEC
56180: ST_TO_ADDR
56181: LD_VAR 0 2
56185: PUSH
56186: FOR_TO
56187: IFFALSE 56251
// begin hc_class = class_tiger ;
56189: LD_ADDR_OWVAR 28
56193: PUSH
56194: LD_INT 14
56196: ST_TO_ADDR
// hc_gallery =  ;
56197: LD_ADDR_OWVAR 33
56201: PUSH
56202: LD_STRING 
56204: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
56205: LD_ADDR_OWVAR 35
56209: PUSH
56210: LD_INT 7
56212: NEG
56213: PPUSH
56214: LD_INT 7
56216: PPUSH
56217: CALL_OW 12
56221: ST_TO_ADDR
// animal := CreateHuman ;
56222: LD_ADDR_VAR 0 12
56226: PUSH
56227: CALL_OW 44
56231: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
56232: LD_VAR 0 12
56236: PPUSH
56237: LD_VAR 0 8
56241: PPUSH
56242: LD_INT 0
56244: PPUSH
56245: CALL 58151 0 3
// end ;
56249: GO 56186
56251: POP
56252: POP
// if apemans then
56253: LD_VAR 0 3
56257: IFFALSE 56380
// for i = 1 to apemans do
56259: LD_ADDR_VAR 0 11
56263: PUSH
56264: DOUBLE
56265: LD_INT 1
56267: DEC
56268: ST_TO_ADDR
56269: LD_VAR 0 3
56273: PUSH
56274: FOR_TO
56275: IFFALSE 56378
// begin hc_class = class_apeman ;
56277: LD_ADDR_OWVAR 28
56281: PUSH
56282: LD_INT 12
56284: ST_TO_ADDR
// hc_gallery =  ;
56285: LD_ADDR_OWVAR 33
56289: PUSH
56290: LD_STRING 
56292: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
56293: LD_ADDR_OWVAR 35
56297: PUSH
56298: LD_INT 2
56300: NEG
56301: PPUSH
56302: LD_INT 2
56304: PPUSH
56305: CALL_OW 12
56309: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
56310: LD_ADDR_OWVAR 31
56314: PUSH
56315: LD_INT 1
56317: PPUSH
56318: LD_INT 3
56320: PPUSH
56321: CALL_OW 12
56325: PUSH
56326: LD_INT 1
56328: PPUSH
56329: LD_INT 3
56331: PPUSH
56332: CALL_OW 12
56336: PUSH
56337: LD_INT 0
56339: PUSH
56340: LD_INT 0
56342: PUSH
56343: EMPTY
56344: LIST
56345: LIST
56346: LIST
56347: LIST
56348: ST_TO_ADDR
// animal := CreateHuman ;
56349: LD_ADDR_VAR 0 12
56353: PUSH
56354: CALL_OW 44
56358: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
56359: LD_VAR 0 12
56363: PPUSH
56364: LD_VAR 0 8
56368: PPUSH
56369: LD_INT 0
56371: PPUSH
56372: CALL 58151 0 3
// end ;
56376: GO 56274
56378: POP
56379: POP
// if enchidnas then
56380: LD_VAR 0 4
56384: IFFALSE 56451
// for i = 1 to enchidnas do
56386: LD_ADDR_VAR 0 11
56390: PUSH
56391: DOUBLE
56392: LD_INT 1
56394: DEC
56395: ST_TO_ADDR
56396: LD_VAR 0 4
56400: PUSH
56401: FOR_TO
56402: IFFALSE 56449
// begin hc_class = 13 ;
56404: LD_ADDR_OWVAR 28
56408: PUSH
56409: LD_INT 13
56411: ST_TO_ADDR
// hc_gallery =  ;
56412: LD_ADDR_OWVAR 33
56416: PUSH
56417: LD_STRING 
56419: ST_TO_ADDR
// animal := CreateHuman ;
56420: LD_ADDR_VAR 0 12
56424: PUSH
56425: CALL_OW 44
56429: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
56430: LD_VAR 0 12
56434: PPUSH
56435: LD_VAR 0 8
56439: PPUSH
56440: LD_INT 0
56442: PPUSH
56443: CALL 58151 0 3
// end ;
56447: GO 56401
56449: POP
56450: POP
// if fishes then
56451: LD_VAR 0 7
56455: IFFALSE 56522
// for i = 1 to fishes do
56457: LD_ADDR_VAR 0 11
56461: PUSH
56462: DOUBLE
56463: LD_INT 1
56465: DEC
56466: ST_TO_ADDR
56467: LD_VAR 0 7
56471: PUSH
56472: FOR_TO
56473: IFFALSE 56520
// begin hc_class = 20 ;
56475: LD_ADDR_OWVAR 28
56479: PUSH
56480: LD_INT 20
56482: ST_TO_ADDR
// hc_gallery =  ;
56483: LD_ADDR_OWVAR 33
56487: PUSH
56488: LD_STRING 
56490: ST_TO_ADDR
// animal := CreateHuman ;
56491: LD_ADDR_VAR 0 12
56495: PUSH
56496: CALL_OW 44
56500: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
56501: LD_VAR 0 12
56505: PPUSH
56506: LD_VAR 0 9
56510: PPUSH
56511: LD_INT 0
56513: PPUSH
56514: CALL 58151 0 3
// end ;
56518: GO 56472
56520: POP
56521: POP
// end ;
56522: LD_VAR 0 10
56526: RET
// export function WantHeal ( sci , unit ) ; begin
56527: LD_INT 0
56529: PPUSH
// if GetTaskList ( sci ) > 0 then
56530: LD_VAR 0 1
56534: PPUSH
56535: CALL_OW 437
56539: PUSH
56540: LD_INT 0
56542: GREATER
56543: IFFALSE 56613
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
56545: LD_VAR 0 1
56549: PPUSH
56550: CALL_OW 437
56554: PUSH
56555: LD_INT 1
56557: ARRAY
56558: PUSH
56559: LD_INT 1
56561: ARRAY
56562: PUSH
56563: LD_STRING l
56565: EQUAL
56566: PUSH
56567: LD_VAR 0 1
56571: PPUSH
56572: CALL_OW 437
56576: PUSH
56577: LD_INT 1
56579: ARRAY
56580: PUSH
56581: LD_INT 4
56583: ARRAY
56584: PUSH
56585: LD_VAR 0 2
56589: EQUAL
56590: AND
56591: IFFALSE 56603
// result := true else
56593: LD_ADDR_VAR 0 3
56597: PUSH
56598: LD_INT 1
56600: ST_TO_ADDR
56601: GO 56611
// result := false ;
56603: LD_ADDR_VAR 0 3
56607: PUSH
56608: LD_INT 0
56610: ST_TO_ADDR
// end else
56611: GO 56621
// result := false ;
56613: LD_ADDR_VAR 0 3
56617: PUSH
56618: LD_INT 0
56620: ST_TO_ADDR
// end ;
56621: LD_VAR 0 3
56625: RET
// export function HealTarget ( sci ) ; begin
56626: LD_INT 0
56628: PPUSH
// if not sci then
56629: LD_VAR 0 1
56633: NOT
56634: IFFALSE 56638
// exit ;
56636: GO 56703
// result := 0 ;
56638: LD_ADDR_VAR 0 2
56642: PUSH
56643: LD_INT 0
56645: ST_TO_ADDR
// if GetTaskList ( sci ) then
56646: LD_VAR 0 1
56650: PPUSH
56651: CALL_OW 437
56655: IFFALSE 56703
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
56657: LD_VAR 0 1
56661: PPUSH
56662: CALL_OW 437
56666: PUSH
56667: LD_INT 1
56669: ARRAY
56670: PUSH
56671: LD_INT 1
56673: ARRAY
56674: PUSH
56675: LD_STRING l
56677: EQUAL
56678: IFFALSE 56703
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
56680: LD_ADDR_VAR 0 2
56684: PUSH
56685: LD_VAR 0 1
56689: PPUSH
56690: CALL_OW 437
56694: PUSH
56695: LD_INT 1
56697: ARRAY
56698: PUSH
56699: LD_INT 4
56701: ARRAY
56702: ST_TO_ADDR
// end ;
56703: LD_VAR 0 2
56707: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
56708: LD_INT 0
56710: PPUSH
56711: PPUSH
56712: PPUSH
56713: PPUSH
// if not base_units then
56714: LD_VAR 0 1
56718: NOT
56719: IFFALSE 56723
// exit ;
56721: GO 56810
// result := false ;
56723: LD_ADDR_VAR 0 2
56727: PUSH
56728: LD_INT 0
56730: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
56731: LD_ADDR_VAR 0 5
56735: PUSH
56736: LD_VAR 0 1
56740: PPUSH
56741: LD_INT 21
56743: PUSH
56744: LD_INT 3
56746: PUSH
56747: EMPTY
56748: LIST
56749: LIST
56750: PPUSH
56751: CALL_OW 72
56755: ST_TO_ADDR
// if not tmp then
56756: LD_VAR 0 5
56760: NOT
56761: IFFALSE 56765
// exit ;
56763: GO 56810
// for i in tmp do
56765: LD_ADDR_VAR 0 3
56769: PUSH
56770: LD_VAR 0 5
56774: PUSH
56775: FOR_IN
56776: IFFALSE 56808
// begin result := EnemyInRange ( i , 22 ) ;
56778: LD_ADDR_VAR 0 2
56782: PUSH
56783: LD_VAR 0 3
56787: PPUSH
56788: LD_INT 22
56790: PPUSH
56791: CALL 54388 0 2
56795: ST_TO_ADDR
// if result then
56796: LD_VAR 0 2
56800: IFFALSE 56806
// exit ;
56802: POP
56803: POP
56804: GO 56810
// end ;
56806: GO 56775
56808: POP
56809: POP
// end ;
56810: LD_VAR 0 2
56814: RET
// export function FilterByTag ( units , tag ) ; begin
56815: LD_INT 0
56817: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
56818: LD_ADDR_VAR 0 3
56822: PUSH
56823: LD_VAR 0 1
56827: PPUSH
56828: LD_INT 120
56830: PUSH
56831: LD_VAR 0 2
56835: PUSH
56836: EMPTY
56837: LIST
56838: LIST
56839: PPUSH
56840: CALL_OW 72
56844: ST_TO_ADDR
// end ;
56845: LD_VAR 0 3
56849: RET
// export function IsDriver ( un ) ; begin
56850: LD_INT 0
56852: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
56853: LD_ADDR_VAR 0 2
56857: PUSH
56858: LD_VAR 0 1
56862: PUSH
56863: LD_INT 55
56865: PUSH
56866: EMPTY
56867: LIST
56868: PPUSH
56869: CALL_OW 69
56873: IN
56874: ST_TO_ADDR
// end ;
56875: LD_VAR 0 2
56879: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
56880: LD_INT 0
56882: PPUSH
56883: PPUSH
// list := [ ] ;
56884: LD_ADDR_VAR 0 5
56888: PUSH
56889: EMPTY
56890: ST_TO_ADDR
// case d of 0 :
56891: LD_VAR 0 3
56895: PUSH
56896: LD_INT 0
56898: DOUBLE
56899: EQUAL
56900: IFTRUE 56904
56902: GO 57037
56904: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
56905: LD_ADDR_VAR 0 5
56909: PUSH
56910: LD_VAR 0 1
56914: PUSH
56915: LD_INT 4
56917: MINUS
56918: PUSH
56919: LD_VAR 0 2
56923: PUSH
56924: LD_INT 4
56926: MINUS
56927: PUSH
56928: LD_INT 2
56930: PUSH
56931: EMPTY
56932: LIST
56933: LIST
56934: LIST
56935: PUSH
56936: LD_VAR 0 1
56940: PUSH
56941: LD_INT 3
56943: MINUS
56944: PUSH
56945: LD_VAR 0 2
56949: PUSH
56950: LD_INT 1
56952: PUSH
56953: EMPTY
56954: LIST
56955: LIST
56956: LIST
56957: PUSH
56958: LD_VAR 0 1
56962: PUSH
56963: LD_INT 4
56965: PLUS
56966: PUSH
56967: LD_VAR 0 2
56971: PUSH
56972: LD_INT 4
56974: PUSH
56975: EMPTY
56976: LIST
56977: LIST
56978: LIST
56979: PUSH
56980: LD_VAR 0 1
56984: PUSH
56985: LD_INT 3
56987: PLUS
56988: PUSH
56989: LD_VAR 0 2
56993: PUSH
56994: LD_INT 3
56996: PLUS
56997: PUSH
56998: LD_INT 5
57000: PUSH
57001: EMPTY
57002: LIST
57003: LIST
57004: LIST
57005: PUSH
57006: LD_VAR 0 1
57010: PUSH
57011: LD_VAR 0 2
57015: PUSH
57016: LD_INT 4
57018: PLUS
57019: PUSH
57020: LD_INT 0
57022: PUSH
57023: EMPTY
57024: LIST
57025: LIST
57026: LIST
57027: PUSH
57028: EMPTY
57029: LIST
57030: LIST
57031: LIST
57032: LIST
57033: LIST
57034: ST_TO_ADDR
// end ; 1 :
57035: GO 57735
57037: LD_INT 1
57039: DOUBLE
57040: EQUAL
57041: IFTRUE 57045
57043: GO 57178
57045: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
57046: LD_ADDR_VAR 0 5
57050: PUSH
57051: LD_VAR 0 1
57055: PUSH
57056: LD_VAR 0 2
57060: PUSH
57061: LD_INT 4
57063: MINUS
57064: PUSH
57065: LD_INT 3
57067: PUSH
57068: EMPTY
57069: LIST
57070: LIST
57071: LIST
57072: PUSH
57073: LD_VAR 0 1
57077: PUSH
57078: LD_INT 3
57080: MINUS
57081: PUSH
57082: LD_VAR 0 2
57086: PUSH
57087: LD_INT 3
57089: MINUS
57090: PUSH
57091: LD_INT 2
57093: PUSH
57094: EMPTY
57095: LIST
57096: LIST
57097: LIST
57098: PUSH
57099: LD_VAR 0 1
57103: PUSH
57104: LD_INT 4
57106: MINUS
57107: PUSH
57108: LD_VAR 0 2
57112: PUSH
57113: LD_INT 1
57115: PUSH
57116: EMPTY
57117: LIST
57118: LIST
57119: LIST
57120: PUSH
57121: LD_VAR 0 1
57125: PUSH
57126: LD_VAR 0 2
57130: PUSH
57131: LD_INT 3
57133: PLUS
57134: PUSH
57135: LD_INT 0
57137: PUSH
57138: EMPTY
57139: LIST
57140: LIST
57141: LIST
57142: PUSH
57143: LD_VAR 0 1
57147: PUSH
57148: LD_INT 4
57150: PLUS
57151: PUSH
57152: LD_VAR 0 2
57156: PUSH
57157: LD_INT 4
57159: PLUS
57160: PUSH
57161: LD_INT 5
57163: PUSH
57164: EMPTY
57165: LIST
57166: LIST
57167: LIST
57168: PUSH
57169: EMPTY
57170: LIST
57171: LIST
57172: LIST
57173: LIST
57174: LIST
57175: ST_TO_ADDR
// end ; 2 :
57176: GO 57735
57178: LD_INT 2
57180: DOUBLE
57181: EQUAL
57182: IFTRUE 57186
57184: GO 57315
57186: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
57187: LD_ADDR_VAR 0 5
57191: PUSH
57192: LD_VAR 0 1
57196: PUSH
57197: LD_VAR 0 2
57201: PUSH
57202: LD_INT 3
57204: MINUS
57205: PUSH
57206: LD_INT 3
57208: PUSH
57209: EMPTY
57210: LIST
57211: LIST
57212: LIST
57213: PUSH
57214: LD_VAR 0 1
57218: PUSH
57219: LD_INT 4
57221: PLUS
57222: PUSH
57223: LD_VAR 0 2
57227: PUSH
57228: LD_INT 4
57230: PUSH
57231: EMPTY
57232: LIST
57233: LIST
57234: LIST
57235: PUSH
57236: LD_VAR 0 1
57240: PUSH
57241: LD_VAR 0 2
57245: PUSH
57246: LD_INT 4
57248: PLUS
57249: PUSH
57250: LD_INT 0
57252: PUSH
57253: EMPTY
57254: LIST
57255: LIST
57256: LIST
57257: PUSH
57258: LD_VAR 0 1
57262: PUSH
57263: LD_INT 3
57265: MINUS
57266: PUSH
57267: LD_VAR 0 2
57271: PUSH
57272: LD_INT 1
57274: PUSH
57275: EMPTY
57276: LIST
57277: LIST
57278: LIST
57279: PUSH
57280: LD_VAR 0 1
57284: PUSH
57285: LD_INT 4
57287: MINUS
57288: PUSH
57289: LD_VAR 0 2
57293: PUSH
57294: LD_INT 4
57296: MINUS
57297: PUSH
57298: LD_INT 2
57300: PUSH
57301: EMPTY
57302: LIST
57303: LIST
57304: LIST
57305: PUSH
57306: EMPTY
57307: LIST
57308: LIST
57309: LIST
57310: LIST
57311: LIST
57312: ST_TO_ADDR
// end ; 3 :
57313: GO 57735
57315: LD_INT 3
57317: DOUBLE
57318: EQUAL
57319: IFTRUE 57323
57321: GO 57456
57323: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
57324: LD_ADDR_VAR 0 5
57328: PUSH
57329: LD_VAR 0 1
57333: PUSH
57334: LD_INT 3
57336: PLUS
57337: PUSH
57338: LD_VAR 0 2
57342: PUSH
57343: LD_INT 4
57345: PUSH
57346: EMPTY
57347: LIST
57348: LIST
57349: LIST
57350: PUSH
57351: LD_VAR 0 1
57355: PUSH
57356: LD_INT 4
57358: PLUS
57359: PUSH
57360: LD_VAR 0 2
57364: PUSH
57365: LD_INT 4
57367: PLUS
57368: PUSH
57369: LD_INT 5
57371: PUSH
57372: EMPTY
57373: LIST
57374: LIST
57375: LIST
57376: PUSH
57377: LD_VAR 0 1
57381: PUSH
57382: LD_INT 4
57384: MINUS
57385: PUSH
57386: LD_VAR 0 2
57390: PUSH
57391: LD_INT 1
57393: PUSH
57394: EMPTY
57395: LIST
57396: LIST
57397: LIST
57398: PUSH
57399: LD_VAR 0 1
57403: PUSH
57404: LD_VAR 0 2
57408: PUSH
57409: LD_INT 4
57411: MINUS
57412: PUSH
57413: LD_INT 3
57415: PUSH
57416: EMPTY
57417: LIST
57418: LIST
57419: LIST
57420: PUSH
57421: LD_VAR 0 1
57425: PUSH
57426: LD_INT 3
57428: MINUS
57429: PUSH
57430: LD_VAR 0 2
57434: PUSH
57435: LD_INT 3
57437: MINUS
57438: PUSH
57439: LD_INT 2
57441: PUSH
57442: EMPTY
57443: LIST
57444: LIST
57445: LIST
57446: PUSH
57447: EMPTY
57448: LIST
57449: LIST
57450: LIST
57451: LIST
57452: LIST
57453: ST_TO_ADDR
// end ; 4 :
57454: GO 57735
57456: LD_INT 4
57458: DOUBLE
57459: EQUAL
57460: IFTRUE 57464
57462: GO 57597
57464: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
57465: LD_ADDR_VAR 0 5
57469: PUSH
57470: LD_VAR 0 1
57474: PUSH
57475: LD_VAR 0 2
57479: PUSH
57480: LD_INT 4
57482: PLUS
57483: PUSH
57484: LD_INT 0
57486: PUSH
57487: EMPTY
57488: LIST
57489: LIST
57490: LIST
57491: PUSH
57492: LD_VAR 0 1
57496: PUSH
57497: LD_INT 3
57499: PLUS
57500: PUSH
57501: LD_VAR 0 2
57505: PUSH
57506: LD_INT 3
57508: PLUS
57509: PUSH
57510: LD_INT 5
57512: PUSH
57513: EMPTY
57514: LIST
57515: LIST
57516: LIST
57517: PUSH
57518: LD_VAR 0 1
57522: PUSH
57523: LD_INT 4
57525: PLUS
57526: PUSH
57527: LD_VAR 0 2
57531: PUSH
57532: LD_INT 4
57534: PUSH
57535: EMPTY
57536: LIST
57537: LIST
57538: LIST
57539: PUSH
57540: LD_VAR 0 1
57544: PUSH
57545: LD_VAR 0 2
57549: PUSH
57550: LD_INT 3
57552: MINUS
57553: PUSH
57554: LD_INT 3
57556: PUSH
57557: EMPTY
57558: LIST
57559: LIST
57560: LIST
57561: PUSH
57562: LD_VAR 0 1
57566: PUSH
57567: LD_INT 4
57569: MINUS
57570: PUSH
57571: LD_VAR 0 2
57575: PUSH
57576: LD_INT 4
57578: MINUS
57579: PUSH
57580: LD_INT 2
57582: PUSH
57583: EMPTY
57584: LIST
57585: LIST
57586: LIST
57587: PUSH
57588: EMPTY
57589: LIST
57590: LIST
57591: LIST
57592: LIST
57593: LIST
57594: ST_TO_ADDR
// end ; 5 :
57595: GO 57735
57597: LD_INT 5
57599: DOUBLE
57600: EQUAL
57601: IFTRUE 57605
57603: GO 57734
57605: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
57606: LD_ADDR_VAR 0 5
57610: PUSH
57611: LD_VAR 0 1
57615: PUSH
57616: LD_INT 4
57618: MINUS
57619: PUSH
57620: LD_VAR 0 2
57624: PUSH
57625: LD_INT 1
57627: PUSH
57628: EMPTY
57629: LIST
57630: LIST
57631: LIST
57632: PUSH
57633: LD_VAR 0 1
57637: PUSH
57638: LD_VAR 0 2
57642: PUSH
57643: LD_INT 4
57645: MINUS
57646: PUSH
57647: LD_INT 3
57649: PUSH
57650: EMPTY
57651: LIST
57652: LIST
57653: LIST
57654: PUSH
57655: LD_VAR 0 1
57659: PUSH
57660: LD_INT 4
57662: PLUS
57663: PUSH
57664: LD_VAR 0 2
57668: PUSH
57669: LD_INT 4
57671: PLUS
57672: PUSH
57673: LD_INT 5
57675: PUSH
57676: EMPTY
57677: LIST
57678: LIST
57679: LIST
57680: PUSH
57681: LD_VAR 0 1
57685: PUSH
57686: LD_INT 3
57688: PLUS
57689: PUSH
57690: LD_VAR 0 2
57694: PUSH
57695: LD_INT 4
57697: PUSH
57698: EMPTY
57699: LIST
57700: LIST
57701: LIST
57702: PUSH
57703: LD_VAR 0 1
57707: PUSH
57708: LD_VAR 0 2
57712: PUSH
57713: LD_INT 3
57715: PLUS
57716: PUSH
57717: LD_INT 0
57719: PUSH
57720: EMPTY
57721: LIST
57722: LIST
57723: LIST
57724: PUSH
57725: EMPTY
57726: LIST
57727: LIST
57728: LIST
57729: LIST
57730: LIST
57731: ST_TO_ADDR
// end ; end ;
57732: GO 57735
57734: POP
// result := list ;
57735: LD_ADDR_VAR 0 4
57739: PUSH
57740: LD_VAR 0 5
57744: ST_TO_ADDR
// end ;
57745: LD_VAR 0 4
57749: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
57750: LD_INT 0
57752: PPUSH
57753: PPUSH
57754: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
57755: LD_VAR 0 1
57759: NOT
57760: PUSH
57761: LD_VAR 0 2
57765: PUSH
57766: LD_INT 1
57768: PUSH
57769: LD_INT 2
57771: PUSH
57772: LD_INT 3
57774: PUSH
57775: LD_INT 4
57777: PUSH
57778: EMPTY
57779: LIST
57780: LIST
57781: LIST
57782: LIST
57783: IN
57784: NOT
57785: OR
57786: IFFALSE 57790
// exit ;
57788: GO 57873
// tmp := [ ] ;
57790: LD_ADDR_VAR 0 5
57794: PUSH
57795: EMPTY
57796: ST_TO_ADDR
// for i in units do
57797: LD_ADDR_VAR 0 4
57801: PUSH
57802: LD_VAR 0 1
57806: PUSH
57807: FOR_IN
57808: IFFALSE 57842
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
57810: LD_ADDR_VAR 0 5
57814: PUSH
57815: LD_VAR 0 5
57819: PPUSH
57820: LD_VAR 0 4
57824: PPUSH
57825: LD_VAR 0 2
57829: PPUSH
57830: CALL_OW 259
57834: PPUSH
57835: CALL 59246 0 2
57839: ST_TO_ADDR
57840: GO 57807
57842: POP
57843: POP
// if not tmp then
57844: LD_VAR 0 5
57848: NOT
57849: IFFALSE 57853
// exit ;
57851: GO 57873
// result := SortListByListDesc ( units , tmp ) ;
57853: LD_ADDR_VAR 0 3
57857: PUSH
57858: LD_VAR 0 1
57862: PPUSH
57863: LD_VAR 0 5
57867: PPUSH
57868: CALL_OW 77
57872: ST_TO_ADDR
// end ;
57873: LD_VAR 0 3
57877: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
57878: LD_INT 0
57880: PPUSH
57881: PPUSH
57882: PPUSH
// result := false ;
57883: LD_ADDR_VAR 0 3
57887: PUSH
57888: LD_INT 0
57890: ST_TO_ADDR
// if not building then
57891: LD_VAR 0 2
57895: NOT
57896: IFFALSE 57900
// exit ;
57898: GO 58038
// x := GetX ( building ) ;
57900: LD_ADDR_VAR 0 4
57904: PUSH
57905: LD_VAR 0 2
57909: PPUSH
57910: CALL_OW 250
57914: ST_TO_ADDR
// y := GetY ( building ) ;
57915: LD_ADDR_VAR 0 5
57919: PUSH
57920: LD_VAR 0 2
57924: PPUSH
57925: CALL_OW 251
57929: ST_TO_ADDR
// if not x or not y then
57930: LD_VAR 0 4
57934: NOT
57935: PUSH
57936: LD_VAR 0 5
57940: NOT
57941: OR
57942: IFFALSE 57946
// exit ;
57944: GO 58038
// if GetTaskList ( unit ) then
57946: LD_VAR 0 1
57950: PPUSH
57951: CALL_OW 437
57955: IFFALSE 58038
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
57957: LD_STRING e
57959: PUSH
57960: LD_VAR 0 1
57964: PPUSH
57965: CALL_OW 437
57969: PUSH
57970: LD_INT 1
57972: ARRAY
57973: PUSH
57974: LD_INT 1
57976: ARRAY
57977: EQUAL
57978: PUSH
57979: LD_VAR 0 4
57983: PUSH
57984: LD_VAR 0 1
57988: PPUSH
57989: CALL_OW 437
57993: PUSH
57994: LD_INT 1
57996: ARRAY
57997: PUSH
57998: LD_INT 2
58000: ARRAY
58001: EQUAL
58002: AND
58003: PUSH
58004: LD_VAR 0 5
58008: PUSH
58009: LD_VAR 0 1
58013: PPUSH
58014: CALL_OW 437
58018: PUSH
58019: LD_INT 1
58021: ARRAY
58022: PUSH
58023: LD_INT 3
58025: ARRAY
58026: EQUAL
58027: AND
58028: IFFALSE 58038
// result := true end ;
58030: LD_ADDR_VAR 0 3
58034: PUSH
58035: LD_INT 1
58037: ST_TO_ADDR
// end ;
58038: LD_VAR 0 3
58042: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
58043: LD_INT 0
58045: PPUSH
// result := false ;
58046: LD_ADDR_VAR 0 4
58050: PUSH
58051: LD_INT 0
58053: ST_TO_ADDR
// if GetTaskList ( unit ) then
58054: LD_VAR 0 1
58058: PPUSH
58059: CALL_OW 437
58063: IFFALSE 58146
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
58065: LD_STRING M
58067: PUSH
58068: LD_VAR 0 1
58072: PPUSH
58073: CALL_OW 437
58077: PUSH
58078: LD_INT 1
58080: ARRAY
58081: PUSH
58082: LD_INT 1
58084: ARRAY
58085: EQUAL
58086: PUSH
58087: LD_VAR 0 2
58091: PUSH
58092: LD_VAR 0 1
58096: PPUSH
58097: CALL_OW 437
58101: PUSH
58102: LD_INT 1
58104: ARRAY
58105: PUSH
58106: LD_INT 2
58108: ARRAY
58109: EQUAL
58110: AND
58111: PUSH
58112: LD_VAR 0 3
58116: PUSH
58117: LD_VAR 0 1
58121: PPUSH
58122: CALL_OW 437
58126: PUSH
58127: LD_INT 1
58129: ARRAY
58130: PUSH
58131: LD_INT 3
58133: ARRAY
58134: EQUAL
58135: AND
58136: IFFALSE 58146
// result := true ;
58138: LD_ADDR_VAR 0 4
58142: PUSH
58143: LD_INT 1
58145: ST_TO_ADDR
// end ; end ;
58146: LD_VAR 0 4
58150: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
58151: LD_INT 0
58153: PPUSH
58154: PPUSH
58155: PPUSH
58156: PPUSH
// if not unit or not area then
58157: LD_VAR 0 1
58161: NOT
58162: PUSH
58163: LD_VAR 0 2
58167: NOT
58168: OR
58169: IFFALSE 58173
// exit ;
58171: GO 58349
// tmp := AreaToList ( area , i ) ;
58173: LD_ADDR_VAR 0 6
58177: PUSH
58178: LD_VAR 0 2
58182: PPUSH
58183: LD_VAR 0 5
58187: PPUSH
58188: CALL_OW 517
58192: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
58193: LD_ADDR_VAR 0 5
58197: PUSH
58198: DOUBLE
58199: LD_INT 1
58201: DEC
58202: ST_TO_ADDR
58203: LD_VAR 0 6
58207: PUSH
58208: LD_INT 1
58210: ARRAY
58211: PUSH
58212: FOR_TO
58213: IFFALSE 58347
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
58215: LD_ADDR_VAR 0 7
58219: PUSH
58220: LD_VAR 0 6
58224: PUSH
58225: LD_INT 1
58227: ARRAY
58228: PUSH
58229: LD_VAR 0 5
58233: ARRAY
58234: PUSH
58235: LD_VAR 0 6
58239: PUSH
58240: LD_INT 2
58242: ARRAY
58243: PUSH
58244: LD_VAR 0 5
58248: ARRAY
58249: PUSH
58250: EMPTY
58251: LIST
58252: LIST
58253: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
58254: LD_INT 92
58256: PUSH
58257: LD_VAR 0 7
58261: PUSH
58262: LD_INT 1
58264: ARRAY
58265: PUSH
58266: LD_VAR 0 7
58270: PUSH
58271: LD_INT 2
58273: ARRAY
58274: PUSH
58275: LD_INT 2
58277: PUSH
58278: EMPTY
58279: LIST
58280: LIST
58281: LIST
58282: LIST
58283: PPUSH
58284: CALL_OW 69
58288: PUSH
58289: LD_INT 0
58291: EQUAL
58292: IFFALSE 58345
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
58294: LD_VAR 0 1
58298: PPUSH
58299: LD_VAR 0 7
58303: PUSH
58304: LD_INT 1
58306: ARRAY
58307: PPUSH
58308: LD_VAR 0 7
58312: PUSH
58313: LD_INT 2
58315: ARRAY
58316: PPUSH
58317: LD_VAR 0 3
58321: PPUSH
58322: CALL_OW 48
// result := IsPlaced ( unit ) ;
58326: LD_ADDR_VAR 0 4
58330: PUSH
58331: LD_VAR 0 1
58335: PPUSH
58336: CALL_OW 305
58340: ST_TO_ADDR
// exit ;
58341: POP
58342: POP
58343: GO 58349
// end ; end ;
58345: GO 58212
58347: POP
58348: POP
// end ;
58349: LD_VAR 0 4
58353: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
58354: LD_INT 0
58356: PPUSH
58357: PPUSH
58358: PPUSH
// if not side or side > 8 then
58359: LD_VAR 0 1
58363: NOT
58364: PUSH
58365: LD_VAR 0 1
58369: PUSH
58370: LD_INT 8
58372: GREATER
58373: OR
58374: IFFALSE 58378
// exit ;
58376: GO 58565
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
58378: LD_ADDR_VAR 0 4
58382: PUSH
58383: LD_INT 22
58385: PUSH
58386: LD_VAR 0 1
58390: PUSH
58391: EMPTY
58392: LIST
58393: LIST
58394: PUSH
58395: LD_INT 21
58397: PUSH
58398: LD_INT 3
58400: PUSH
58401: EMPTY
58402: LIST
58403: LIST
58404: PUSH
58405: EMPTY
58406: LIST
58407: LIST
58408: PPUSH
58409: CALL_OW 69
58413: ST_TO_ADDR
// if not tmp then
58414: LD_VAR 0 4
58418: NOT
58419: IFFALSE 58423
// exit ;
58421: GO 58565
// enable_addtolog := true ;
58423: LD_ADDR_OWVAR 81
58427: PUSH
58428: LD_INT 1
58430: ST_TO_ADDR
// AddToLog ( [ ) ;
58431: LD_STRING [
58433: PPUSH
58434: CALL_OW 561
// for i in tmp do
58438: LD_ADDR_VAR 0 3
58442: PUSH
58443: LD_VAR 0 4
58447: PUSH
58448: FOR_IN
58449: IFFALSE 58556
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
58451: LD_STRING [
58453: PUSH
58454: LD_VAR 0 3
58458: PPUSH
58459: CALL_OW 266
58463: STR
58464: PUSH
58465: LD_STRING , 
58467: STR
58468: PUSH
58469: LD_VAR 0 3
58473: PPUSH
58474: CALL_OW 250
58478: STR
58479: PUSH
58480: LD_STRING , 
58482: STR
58483: PUSH
58484: LD_VAR 0 3
58488: PPUSH
58489: CALL_OW 251
58493: STR
58494: PUSH
58495: LD_STRING , 
58497: STR
58498: PUSH
58499: LD_VAR 0 3
58503: PPUSH
58504: CALL_OW 254
58508: STR
58509: PUSH
58510: LD_STRING , 
58512: STR
58513: PUSH
58514: LD_VAR 0 3
58518: PPUSH
58519: LD_INT 1
58521: PPUSH
58522: CALL_OW 268
58526: STR
58527: PUSH
58528: LD_STRING , 
58530: STR
58531: PUSH
58532: LD_VAR 0 3
58536: PPUSH
58537: LD_INT 2
58539: PPUSH
58540: CALL_OW 268
58544: STR
58545: PUSH
58546: LD_STRING ],
58548: STR
58549: PPUSH
58550: CALL_OW 561
// end ;
58554: GO 58448
58556: POP
58557: POP
// AddToLog ( ]; ) ;
58558: LD_STRING ];
58560: PPUSH
58561: CALL_OW 561
// end ;
58565: LD_VAR 0 2
58569: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
58570: LD_INT 0
58572: PPUSH
58573: PPUSH
58574: PPUSH
58575: PPUSH
58576: PPUSH
// if not area or not rate or not max then
58577: LD_VAR 0 1
58581: NOT
58582: PUSH
58583: LD_VAR 0 2
58587: NOT
58588: OR
58589: PUSH
58590: LD_VAR 0 4
58594: NOT
58595: OR
58596: IFFALSE 58600
// exit ;
58598: GO 58789
// while 1 do
58600: LD_INT 1
58602: IFFALSE 58789
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
58604: LD_ADDR_VAR 0 9
58608: PUSH
58609: LD_VAR 0 1
58613: PPUSH
58614: LD_INT 1
58616: PPUSH
58617: CALL_OW 287
58621: PUSH
58622: LD_INT 10
58624: MUL
58625: ST_TO_ADDR
// r := rate / 10 ;
58626: LD_ADDR_VAR 0 7
58630: PUSH
58631: LD_VAR 0 2
58635: PUSH
58636: LD_INT 10
58638: DIVREAL
58639: ST_TO_ADDR
// time := 1 1$00 ;
58640: LD_ADDR_VAR 0 8
58644: PUSH
58645: LD_INT 2100
58647: ST_TO_ADDR
// if amount < min then
58648: LD_VAR 0 9
58652: PUSH
58653: LD_VAR 0 3
58657: LESS
58658: IFFALSE 58676
// r := r * 2 else
58660: LD_ADDR_VAR 0 7
58664: PUSH
58665: LD_VAR 0 7
58669: PUSH
58670: LD_INT 2
58672: MUL
58673: ST_TO_ADDR
58674: GO 58702
// if amount > max then
58676: LD_VAR 0 9
58680: PUSH
58681: LD_VAR 0 4
58685: GREATER
58686: IFFALSE 58702
// r := r / 2 ;
58688: LD_ADDR_VAR 0 7
58692: PUSH
58693: LD_VAR 0 7
58697: PUSH
58698: LD_INT 2
58700: DIVREAL
58701: ST_TO_ADDR
// time := time / r ;
58702: LD_ADDR_VAR 0 8
58706: PUSH
58707: LD_VAR 0 8
58711: PUSH
58712: LD_VAR 0 7
58716: DIVREAL
58717: ST_TO_ADDR
// if time < 0 then
58718: LD_VAR 0 8
58722: PUSH
58723: LD_INT 0
58725: LESS
58726: IFFALSE 58743
// time := time * - 1 ;
58728: LD_ADDR_VAR 0 8
58732: PUSH
58733: LD_VAR 0 8
58737: PUSH
58738: LD_INT 1
58740: NEG
58741: MUL
58742: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
58743: LD_VAR 0 8
58747: PUSH
58748: LD_INT 35
58750: PPUSH
58751: LD_INT 875
58753: PPUSH
58754: CALL_OW 12
58758: PLUS
58759: PPUSH
58760: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
58764: LD_INT 1
58766: PPUSH
58767: LD_INT 5
58769: PPUSH
58770: CALL_OW 12
58774: PPUSH
58775: LD_VAR 0 1
58779: PPUSH
58780: LD_INT 1
58782: PPUSH
58783: CALL_OW 55
// end ;
58787: GO 58600
// end ;
58789: LD_VAR 0 5
58793: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
58794: LD_INT 0
58796: PPUSH
58797: PPUSH
58798: PPUSH
58799: PPUSH
58800: PPUSH
58801: PPUSH
58802: PPUSH
58803: PPUSH
// if not turrets or not factories then
58804: LD_VAR 0 1
58808: NOT
58809: PUSH
58810: LD_VAR 0 2
58814: NOT
58815: OR
58816: IFFALSE 58820
// exit ;
58818: GO 59127
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
58820: LD_ADDR_VAR 0 10
58824: PUSH
58825: LD_INT 5
58827: PUSH
58828: LD_INT 6
58830: PUSH
58831: EMPTY
58832: LIST
58833: LIST
58834: PUSH
58835: LD_INT 2
58837: PUSH
58838: LD_INT 4
58840: PUSH
58841: EMPTY
58842: LIST
58843: LIST
58844: PUSH
58845: LD_INT 3
58847: PUSH
58848: LD_INT 5
58850: PUSH
58851: EMPTY
58852: LIST
58853: LIST
58854: PUSH
58855: EMPTY
58856: LIST
58857: LIST
58858: LIST
58859: PUSH
58860: LD_INT 24
58862: PUSH
58863: LD_INT 25
58865: PUSH
58866: EMPTY
58867: LIST
58868: LIST
58869: PUSH
58870: LD_INT 23
58872: PUSH
58873: LD_INT 27
58875: PUSH
58876: EMPTY
58877: LIST
58878: LIST
58879: PUSH
58880: EMPTY
58881: LIST
58882: LIST
58883: PUSH
58884: LD_INT 42
58886: PUSH
58887: LD_INT 43
58889: PUSH
58890: EMPTY
58891: LIST
58892: LIST
58893: PUSH
58894: LD_INT 44
58896: PUSH
58897: LD_INT 46
58899: PUSH
58900: EMPTY
58901: LIST
58902: LIST
58903: PUSH
58904: LD_INT 45
58906: PUSH
58907: LD_INT 47
58909: PUSH
58910: EMPTY
58911: LIST
58912: LIST
58913: PUSH
58914: EMPTY
58915: LIST
58916: LIST
58917: LIST
58918: PUSH
58919: EMPTY
58920: LIST
58921: LIST
58922: LIST
58923: ST_TO_ADDR
// result := [ ] ;
58924: LD_ADDR_VAR 0 3
58928: PUSH
58929: EMPTY
58930: ST_TO_ADDR
// for i in turrets do
58931: LD_ADDR_VAR 0 4
58935: PUSH
58936: LD_VAR 0 1
58940: PUSH
58941: FOR_IN
58942: IFFALSE 59125
// begin nat := GetNation ( i ) ;
58944: LD_ADDR_VAR 0 7
58948: PUSH
58949: LD_VAR 0 4
58953: PPUSH
58954: CALL_OW 248
58958: ST_TO_ADDR
// weapon := 0 ;
58959: LD_ADDR_VAR 0 8
58963: PUSH
58964: LD_INT 0
58966: ST_TO_ADDR
// if not nat then
58967: LD_VAR 0 7
58971: NOT
58972: IFFALSE 58976
// continue ;
58974: GO 58941
// for j in list [ nat ] do
58976: LD_ADDR_VAR 0 5
58980: PUSH
58981: LD_VAR 0 10
58985: PUSH
58986: LD_VAR 0 7
58990: ARRAY
58991: PUSH
58992: FOR_IN
58993: IFFALSE 59034
// if GetBWeapon ( i ) = j [ 1 ] then
58995: LD_VAR 0 4
58999: PPUSH
59000: CALL_OW 269
59004: PUSH
59005: LD_VAR 0 5
59009: PUSH
59010: LD_INT 1
59012: ARRAY
59013: EQUAL
59014: IFFALSE 59032
// begin weapon := j [ 2 ] ;
59016: LD_ADDR_VAR 0 8
59020: PUSH
59021: LD_VAR 0 5
59025: PUSH
59026: LD_INT 2
59028: ARRAY
59029: ST_TO_ADDR
// break ;
59030: GO 59034
// end ;
59032: GO 58992
59034: POP
59035: POP
// if not weapon then
59036: LD_VAR 0 8
59040: NOT
59041: IFFALSE 59045
// continue ;
59043: GO 58941
// for k in factories do
59045: LD_ADDR_VAR 0 6
59049: PUSH
59050: LD_VAR 0 2
59054: PUSH
59055: FOR_IN
59056: IFFALSE 59121
// begin weapons := AvailableWeaponList ( k ) ;
59058: LD_ADDR_VAR 0 9
59062: PUSH
59063: LD_VAR 0 6
59067: PPUSH
59068: CALL_OW 478
59072: ST_TO_ADDR
// if not weapons then
59073: LD_VAR 0 9
59077: NOT
59078: IFFALSE 59082
// continue ;
59080: GO 59055
// if weapon in weapons then
59082: LD_VAR 0 8
59086: PUSH
59087: LD_VAR 0 9
59091: IN
59092: IFFALSE 59119
// begin result := [ i , weapon ] ;
59094: LD_ADDR_VAR 0 3
59098: PUSH
59099: LD_VAR 0 4
59103: PUSH
59104: LD_VAR 0 8
59108: PUSH
59109: EMPTY
59110: LIST
59111: LIST
59112: ST_TO_ADDR
// exit ;
59113: POP
59114: POP
59115: POP
59116: POP
59117: GO 59127
// end ; end ;
59119: GO 59055
59121: POP
59122: POP
// end ;
59123: GO 58941
59125: POP
59126: POP
// end ;
59127: LD_VAR 0 3
59131: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
59132: LD_INT 0
59134: PPUSH
// if not side or side > 8 then
59135: LD_VAR 0 3
59139: NOT
59140: PUSH
59141: LD_VAR 0 3
59145: PUSH
59146: LD_INT 8
59148: GREATER
59149: OR
59150: IFFALSE 59154
// exit ;
59152: GO 59213
// if not range then
59154: LD_VAR 0 4
59158: NOT
59159: IFFALSE 59170
// range := - 12 ;
59161: LD_ADDR_VAR 0 4
59165: PUSH
59166: LD_INT 12
59168: NEG
59169: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
59170: LD_VAR 0 1
59174: PPUSH
59175: LD_VAR 0 2
59179: PPUSH
59180: LD_VAR 0 3
59184: PPUSH
59185: LD_VAR 0 4
59189: PPUSH
59190: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
59194: LD_VAR 0 1
59198: PPUSH
59199: LD_VAR 0 2
59203: PPUSH
59204: LD_VAR 0 3
59208: PPUSH
59209: CALL_OW 331
// end ;
59213: LD_VAR 0 5
59217: RET
// export function Video ( mode ) ; begin
59218: LD_INT 0
59220: PPUSH
// ingame_video = mode ;
59221: LD_ADDR_OWVAR 52
59225: PUSH
59226: LD_VAR 0 1
59230: ST_TO_ADDR
// interface_hidden = mode ;
59231: LD_ADDR_OWVAR 54
59235: PUSH
59236: LD_VAR 0 1
59240: ST_TO_ADDR
// end ;
59241: LD_VAR 0 2
59245: RET
// export function Join ( array , element ) ; begin
59246: LD_INT 0
59248: PPUSH
// result := Replace ( array , array + 1 , element ) ;
59249: LD_ADDR_VAR 0 3
59253: PUSH
59254: LD_VAR 0 1
59258: PPUSH
59259: LD_VAR 0 1
59263: PUSH
59264: LD_INT 1
59266: PLUS
59267: PPUSH
59268: LD_VAR 0 2
59272: PPUSH
59273: CALL_OW 1
59277: ST_TO_ADDR
// end ;
59278: LD_VAR 0 3
59282: RET
// export function JoinUnion ( array , element ) ; begin
59283: LD_INT 0
59285: PPUSH
// result := array union element ;
59286: LD_ADDR_VAR 0 3
59290: PUSH
59291: LD_VAR 0 1
59295: PUSH
59296: LD_VAR 0 2
59300: UNION
59301: ST_TO_ADDR
// end ;
59302: LD_VAR 0 3
59306: RET
// export function GetBehemoths ( side ) ; begin
59307: LD_INT 0
59309: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
59310: LD_ADDR_VAR 0 2
59314: PUSH
59315: LD_INT 22
59317: PUSH
59318: LD_VAR 0 1
59322: PUSH
59323: EMPTY
59324: LIST
59325: LIST
59326: PUSH
59327: LD_INT 31
59329: PUSH
59330: LD_INT 25
59332: PUSH
59333: EMPTY
59334: LIST
59335: LIST
59336: PUSH
59337: EMPTY
59338: LIST
59339: LIST
59340: PPUSH
59341: CALL_OW 69
59345: ST_TO_ADDR
// end ;
59346: LD_VAR 0 2
59350: RET
// export function Shuffle ( array ) ; var i , index ; begin
59351: LD_INT 0
59353: PPUSH
59354: PPUSH
59355: PPUSH
// result := [ ] ;
59356: LD_ADDR_VAR 0 2
59360: PUSH
59361: EMPTY
59362: ST_TO_ADDR
// if not array then
59363: LD_VAR 0 1
59367: NOT
59368: IFFALSE 59372
// exit ;
59370: GO 59471
// Randomize ;
59372: CALL_OW 10
// for i = array downto 1 do
59376: LD_ADDR_VAR 0 3
59380: PUSH
59381: DOUBLE
59382: LD_VAR 0 1
59386: INC
59387: ST_TO_ADDR
59388: LD_INT 1
59390: PUSH
59391: FOR_DOWNTO
59392: IFFALSE 59469
// begin index := rand ( 1 , array ) ;
59394: LD_ADDR_VAR 0 4
59398: PUSH
59399: LD_INT 1
59401: PPUSH
59402: LD_VAR 0 1
59406: PPUSH
59407: CALL_OW 12
59411: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
59412: LD_ADDR_VAR 0 2
59416: PUSH
59417: LD_VAR 0 2
59421: PPUSH
59422: LD_VAR 0 2
59426: PUSH
59427: LD_INT 1
59429: PLUS
59430: PPUSH
59431: LD_VAR 0 1
59435: PUSH
59436: LD_VAR 0 4
59440: ARRAY
59441: PPUSH
59442: CALL_OW 2
59446: ST_TO_ADDR
// array := Delete ( array , index ) ;
59447: LD_ADDR_VAR 0 1
59451: PUSH
59452: LD_VAR 0 1
59456: PPUSH
59457: LD_VAR 0 4
59461: PPUSH
59462: CALL_OW 3
59466: ST_TO_ADDR
// end ;
59467: GO 59391
59469: POP
59470: POP
// end ;
59471: LD_VAR 0 2
59475: RET
// export function GetBaseMaterials ( base ) ; begin
59476: LD_INT 0
59478: PPUSH
// result := [ 0 , 0 , 0 ] ;
59479: LD_ADDR_VAR 0 2
59483: PUSH
59484: LD_INT 0
59486: PUSH
59487: LD_INT 0
59489: PUSH
59490: LD_INT 0
59492: PUSH
59493: EMPTY
59494: LIST
59495: LIST
59496: LIST
59497: ST_TO_ADDR
// if not base then
59498: LD_VAR 0 1
59502: NOT
59503: IFFALSE 59507
// exit ;
59505: GO 59556
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
59507: LD_ADDR_VAR 0 2
59511: PUSH
59512: LD_VAR 0 1
59516: PPUSH
59517: LD_INT 1
59519: PPUSH
59520: CALL_OW 275
59524: PUSH
59525: LD_VAR 0 1
59529: PPUSH
59530: LD_INT 2
59532: PPUSH
59533: CALL_OW 275
59537: PUSH
59538: LD_VAR 0 1
59542: PPUSH
59543: LD_INT 3
59545: PPUSH
59546: CALL_OW 275
59550: PUSH
59551: EMPTY
59552: LIST
59553: LIST
59554: LIST
59555: ST_TO_ADDR
// end ;
59556: LD_VAR 0 2
59560: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
59561: LD_INT 0
59563: PPUSH
59564: PPUSH
// result := array ;
59565: LD_ADDR_VAR 0 3
59569: PUSH
59570: LD_VAR 0 1
59574: ST_TO_ADDR
// if size >= result then
59575: LD_VAR 0 2
59579: PUSH
59580: LD_VAR 0 3
59584: GREATEREQUAL
59585: IFFALSE 59589
// exit ;
59587: GO 59639
// if size then
59589: LD_VAR 0 2
59593: IFFALSE 59639
// for i := array downto size do
59595: LD_ADDR_VAR 0 4
59599: PUSH
59600: DOUBLE
59601: LD_VAR 0 1
59605: INC
59606: ST_TO_ADDR
59607: LD_VAR 0 2
59611: PUSH
59612: FOR_DOWNTO
59613: IFFALSE 59637
// result := Delete ( result , result ) ;
59615: LD_ADDR_VAR 0 3
59619: PUSH
59620: LD_VAR 0 3
59624: PPUSH
59625: LD_VAR 0 3
59629: PPUSH
59630: CALL_OW 3
59634: ST_TO_ADDR
59635: GO 59612
59637: POP
59638: POP
// end ;
59639: LD_VAR 0 3
59643: RET
// export function ComExit ( unit ) ; var tmp ; begin
59644: LD_INT 0
59646: PPUSH
59647: PPUSH
// if not IsInUnit ( unit ) then
59648: LD_VAR 0 1
59652: PPUSH
59653: CALL_OW 310
59657: NOT
59658: IFFALSE 59662
// exit ;
59660: GO 59722
// tmp := IsInUnit ( unit ) ;
59662: LD_ADDR_VAR 0 3
59666: PUSH
59667: LD_VAR 0 1
59671: PPUSH
59672: CALL_OW 310
59676: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
59677: LD_VAR 0 3
59681: PPUSH
59682: CALL_OW 247
59686: PUSH
59687: LD_INT 2
59689: EQUAL
59690: IFFALSE 59703
// ComExitVehicle ( unit ) else
59692: LD_VAR 0 1
59696: PPUSH
59697: CALL_OW 121
59701: GO 59712
// ComExitBuilding ( unit ) ;
59703: LD_VAR 0 1
59707: PPUSH
59708: CALL_OW 122
// result := tmp ;
59712: LD_ADDR_VAR 0 2
59716: PUSH
59717: LD_VAR 0 3
59721: ST_TO_ADDR
// end ;
59722: LD_VAR 0 2
59726: RET
// export function ComExitAll ( units ) ; var i ; begin
59727: LD_INT 0
59729: PPUSH
59730: PPUSH
// if not units then
59731: LD_VAR 0 1
59735: NOT
59736: IFFALSE 59740
// exit ;
59738: GO 59766
// for i in units do
59740: LD_ADDR_VAR 0 3
59744: PUSH
59745: LD_VAR 0 1
59749: PUSH
59750: FOR_IN
59751: IFFALSE 59764
// ComExit ( i ) ;
59753: LD_VAR 0 3
59757: PPUSH
59758: CALL 59644 0 1
59762: GO 59750
59764: POP
59765: POP
// end ;
59766: LD_VAR 0 2
59770: RET
// export function ResetHc ; begin
59771: LD_INT 0
59773: PPUSH
// InitHc ;
59774: CALL_OW 19
// hc_importance := 0 ;
59778: LD_ADDR_OWVAR 32
59782: PUSH
59783: LD_INT 0
59785: ST_TO_ADDR
// end ;
59786: LD_VAR 0 1
59790: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
59791: LD_INT 0
59793: PPUSH
59794: PPUSH
59795: PPUSH
// _x := ( x1 + x2 ) div 2 ;
59796: LD_ADDR_VAR 0 6
59800: PUSH
59801: LD_VAR 0 1
59805: PUSH
59806: LD_VAR 0 3
59810: PLUS
59811: PUSH
59812: LD_INT 2
59814: DIV
59815: ST_TO_ADDR
// if _x < 0 then
59816: LD_VAR 0 6
59820: PUSH
59821: LD_INT 0
59823: LESS
59824: IFFALSE 59841
// _x := _x * - 1 ;
59826: LD_ADDR_VAR 0 6
59830: PUSH
59831: LD_VAR 0 6
59835: PUSH
59836: LD_INT 1
59838: NEG
59839: MUL
59840: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
59841: LD_ADDR_VAR 0 7
59845: PUSH
59846: LD_VAR 0 2
59850: PUSH
59851: LD_VAR 0 4
59855: PLUS
59856: PUSH
59857: LD_INT 2
59859: DIV
59860: ST_TO_ADDR
// if _y < 0 then
59861: LD_VAR 0 7
59865: PUSH
59866: LD_INT 0
59868: LESS
59869: IFFALSE 59886
// _y := _y * - 1 ;
59871: LD_ADDR_VAR 0 7
59875: PUSH
59876: LD_VAR 0 7
59880: PUSH
59881: LD_INT 1
59883: NEG
59884: MUL
59885: ST_TO_ADDR
// result := [ _x , _y ] ;
59886: LD_ADDR_VAR 0 5
59890: PUSH
59891: LD_VAR 0 6
59895: PUSH
59896: LD_VAR 0 7
59900: PUSH
59901: EMPTY
59902: LIST
59903: LIST
59904: ST_TO_ADDR
// end ;
59905: LD_VAR 0 5
59909: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
59910: LD_INT 0
59912: PPUSH
59913: PPUSH
59914: PPUSH
59915: PPUSH
// task := GetTaskList ( unit ) ;
59916: LD_ADDR_VAR 0 7
59920: PUSH
59921: LD_VAR 0 1
59925: PPUSH
59926: CALL_OW 437
59930: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
59931: LD_VAR 0 7
59935: NOT
59936: PUSH
59937: LD_VAR 0 1
59941: PPUSH
59942: LD_VAR 0 2
59946: PPUSH
59947: CALL_OW 308
59951: NOT
59952: AND
59953: IFFALSE 59957
// exit ;
59955: GO 60075
// if IsInArea ( unit , area ) then
59957: LD_VAR 0 1
59961: PPUSH
59962: LD_VAR 0 2
59966: PPUSH
59967: CALL_OW 308
59971: IFFALSE 59989
// begin ComMoveToArea ( unit , goAway ) ;
59973: LD_VAR 0 1
59977: PPUSH
59978: LD_VAR 0 3
59982: PPUSH
59983: CALL_OW 113
// exit ;
59987: GO 60075
// end ; if task [ 1 ] [ 1 ] <> M then
59989: LD_VAR 0 7
59993: PUSH
59994: LD_INT 1
59996: ARRAY
59997: PUSH
59998: LD_INT 1
60000: ARRAY
60001: PUSH
60002: LD_STRING M
60004: NONEQUAL
60005: IFFALSE 60009
// exit ;
60007: GO 60075
// x := task [ 1 ] [ 2 ] ;
60009: LD_ADDR_VAR 0 5
60013: PUSH
60014: LD_VAR 0 7
60018: PUSH
60019: LD_INT 1
60021: ARRAY
60022: PUSH
60023: LD_INT 2
60025: ARRAY
60026: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
60027: LD_ADDR_VAR 0 6
60031: PUSH
60032: LD_VAR 0 7
60036: PUSH
60037: LD_INT 1
60039: ARRAY
60040: PUSH
60041: LD_INT 3
60043: ARRAY
60044: ST_TO_ADDR
// if InArea ( x , y , area ) then
60045: LD_VAR 0 5
60049: PPUSH
60050: LD_VAR 0 6
60054: PPUSH
60055: LD_VAR 0 2
60059: PPUSH
60060: CALL_OW 309
60064: IFFALSE 60075
// ComStop ( unit ) ;
60066: LD_VAR 0 1
60070: PPUSH
60071: CALL_OW 141
// end ;
60075: LD_VAR 0 4
60079: RET
// export function Abs ( value ) ; begin
60080: LD_INT 0
60082: PPUSH
// result := value ;
60083: LD_ADDR_VAR 0 2
60087: PUSH
60088: LD_VAR 0 1
60092: ST_TO_ADDR
// if value < 0 then
60093: LD_VAR 0 1
60097: PUSH
60098: LD_INT 0
60100: LESS
60101: IFFALSE 60118
// result := value * - 1 ;
60103: LD_ADDR_VAR 0 2
60107: PUSH
60108: LD_VAR 0 1
60112: PUSH
60113: LD_INT 1
60115: NEG
60116: MUL
60117: ST_TO_ADDR
// end ;
60118: LD_VAR 0 2
60122: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
60123: LD_INT 0
60125: PPUSH
60126: PPUSH
60127: PPUSH
60128: PPUSH
60129: PPUSH
60130: PPUSH
60131: PPUSH
60132: PPUSH
// if not unit or not building then
60133: LD_VAR 0 1
60137: NOT
60138: PUSH
60139: LD_VAR 0 2
60143: NOT
60144: OR
60145: IFFALSE 60149
// exit ;
60147: GO 60375
// x := GetX ( building ) ;
60149: LD_ADDR_VAR 0 4
60153: PUSH
60154: LD_VAR 0 2
60158: PPUSH
60159: CALL_OW 250
60163: ST_TO_ADDR
// y := GetY ( building ) ;
60164: LD_ADDR_VAR 0 6
60168: PUSH
60169: LD_VAR 0 2
60173: PPUSH
60174: CALL_OW 251
60178: ST_TO_ADDR
// d := GetDir ( building ) ;
60179: LD_ADDR_VAR 0 8
60183: PUSH
60184: LD_VAR 0 2
60188: PPUSH
60189: CALL_OW 254
60193: ST_TO_ADDR
// r := 4 ;
60194: LD_ADDR_VAR 0 9
60198: PUSH
60199: LD_INT 4
60201: ST_TO_ADDR
// for i := 1 to 5 do
60202: LD_ADDR_VAR 0 10
60206: PUSH
60207: DOUBLE
60208: LD_INT 1
60210: DEC
60211: ST_TO_ADDR
60212: LD_INT 5
60214: PUSH
60215: FOR_TO
60216: IFFALSE 60373
// begin _x := ShiftX ( x , d , r + i ) ;
60218: LD_ADDR_VAR 0 5
60222: PUSH
60223: LD_VAR 0 4
60227: PPUSH
60228: LD_VAR 0 8
60232: PPUSH
60233: LD_VAR 0 9
60237: PUSH
60238: LD_VAR 0 10
60242: PLUS
60243: PPUSH
60244: CALL_OW 272
60248: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
60249: LD_ADDR_VAR 0 7
60253: PUSH
60254: LD_VAR 0 6
60258: PPUSH
60259: LD_VAR 0 8
60263: PPUSH
60264: LD_VAR 0 9
60268: PUSH
60269: LD_VAR 0 10
60273: PLUS
60274: PPUSH
60275: CALL_OW 273
60279: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
60280: LD_VAR 0 5
60284: PPUSH
60285: LD_VAR 0 7
60289: PPUSH
60290: CALL_OW 488
60294: PUSH
60295: LD_VAR 0 5
60299: PPUSH
60300: LD_VAR 0 7
60304: PPUSH
60305: CALL_OW 428
60309: PPUSH
60310: CALL_OW 247
60314: PUSH
60315: LD_INT 3
60317: PUSH
60318: LD_INT 2
60320: PUSH
60321: EMPTY
60322: LIST
60323: LIST
60324: IN
60325: NOT
60326: AND
60327: IFFALSE 60371
// begin ComMoveXY ( unit , _x , _y ) ;
60329: LD_VAR 0 1
60333: PPUSH
60334: LD_VAR 0 5
60338: PPUSH
60339: LD_VAR 0 7
60343: PPUSH
60344: CALL_OW 111
// result := [ _x , _y ] ;
60348: LD_ADDR_VAR 0 3
60352: PUSH
60353: LD_VAR 0 5
60357: PUSH
60358: LD_VAR 0 7
60362: PUSH
60363: EMPTY
60364: LIST
60365: LIST
60366: ST_TO_ADDR
// exit ;
60367: POP
60368: POP
60369: GO 60375
// end ; end ;
60371: GO 60215
60373: POP
60374: POP
// end ;
60375: LD_VAR 0 3
60379: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
60380: LD_INT 0
60382: PPUSH
60383: PPUSH
60384: PPUSH
// result := 0 ;
60385: LD_ADDR_VAR 0 3
60389: PUSH
60390: LD_INT 0
60392: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
60393: LD_VAR 0 1
60397: PUSH
60398: LD_INT 0
60400: LESS
60401: PUSH
60402: LD_VAR 0 1
60406: PUSH
60407: LD_INT 8
60409: GREATER
60410: OR
60411: PUSH
60412: LD_VAR 0 2
60416: PUSH
60417: LD_INT 0
60419: LESS
60420: OR
60421: PUSH
60422: LD_VAR 0 2
60426: PUSH
60427: LD_INT 8
60429: GREATER
60430: OR
60431: IFFALSE 60435
// exit ;
60433: GO 60510
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
60435: LD_ADDR_VAR 0 4
60439: PUSH
60440: LD_INT 22
60442: PUSH
60443: LD_VAR 0 2
60447: PUSH
60448: EMPTY
60449: LIST
60450: LIST
60451: PPUSH
60452: CALL_OW 69
60456: PUSH
60457: FOR_IN
60458: IFFALSE 60508
// begin un := UnitShoot ( i ) ;
60460: LD_ADDR_VAR 0 5
60464: PUSH
60465: LD_VAR 0 4
60469: PPUSH
60470: CALL_OW 504
60474: ST_TO_ADDR
// if GetSide ( un ) = side1 then
60475: LD_VAR 0 5
60479: PPUSH
60480: CALL_OW 255
60484: PUSH
60485: LD_VAR 0 1
60489: EQUAL
60490: IFFALSE 60506
// begin result := un ;
60492: LD_ADDR_VAR 0 3
60496: PUSH
60497: LD_VAR 0 5
60501: ST_TO_ADDR
// exit ;
60502: POP
60503: POP
60504: GO 60510
// end ; end ;
60506: GO 60457
60508: POP
60509: POP
// end ;
60510: LD_VAR 0 3
60514: RET
// export function GetCargoBay ( units ) ; begin
60515: LD_INT 0
60517: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
60518: LD_ADDR_VAR 0 2
60522: PUSH
60523: LD_VAR 0 1
60527: PPUSH
60528: LD_INT 2
60530: PUSH
60531: LD_INT 34
60533: PUSH
60534: LD_INT 12
60536: PUSH
60537: EMPTY
60538: LIST
60539: LIST
60540: PUSH
60541: LD_INT 34
60543: PUSH
60544: LD_INT 51
60546: PUSH
60547: EMPTY
60548: LIST
60549: LIST
60550: PUSH
60551: LD_INT 34
60553: PUSH
60554: LD_INT 32
60556: PUSH
60557: EMPTY
60558: LIST
60559: LIST
60560: PUSH
60561: LD_INT 34
60563: PUSH
60564: LD_INT 89
60566: PUSH
60567: EMPTY
60568: LIST
60569: LIST
60570: PUSH
60571: EMPTY
60572: LIST
60573: LIST
60574: LIST
60575: LIST
60576: LIST
60577: PPUSH
60578: CALL_OW 72
60582: ST_TO_ADDR
// end ;
60583: LD_VAR 0 2
60587: RET
// export function Negate ( value ) ; begin
60588: LD_INT 0
60590: PPUSH
// result := not value ;
60591: LD_ADDR_VAR 0 2
60595: PUSH
60596: LD_VAR 0 1
60600: NOT
60601: ST_TO_ADDR
// end ;
60602: LD_VAR 0 2
60606: RET
// export function Inc ( value ) ; begin
60607: LD_INT 0
60609: PPUSH
// result := value + 1 ;
60610: LD_ADDR_VAR 0 2
60614: PUSH
60615: LD_VAR 0 1
60619: PUSH
60620: LD_INT 1
60622: PLUS
60623: ST_TO_ADDR
// end ;
60624: LD_VAR 0 2
60628: RET
// export function Dec ( value ) ; begin
60629: LD_INT 0
60631: PPUSH
// result := value - 1 ;
60632: LD_ADDR_VAR 0 2
60636: PUSH
60637: LD_VAR 0 1
60641: PUSH
60642: LD_INT 1
60644: MINUS
60645: ST_TO_ADDR
// end ;
60646: LD_VAR 0 2
60650: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
60651: LD_INT 0
60653: PPUSH
60654: PPUSH
60655: PPUSH
60656: PPUSH
60657: PPUSH
60658: PPUSH
60659: PPUSH
60660: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
60661: LD_VAR 0 1
60665: PPUSH
60666: LD_VAR 0 2
60670: PPUSH
60671: CALL_OW 488
60675: NOT
60676: PUSH
60677: LD_VAR 0 3
60681: PPUSH
60682: LD_VAR 0 4
60686: PPUSH
60687: CALL_OW 488
60691: NOT
60692: OR
60693: IFFALSE 60706
// begin result := - 1 ;
60695: LD_ADDR_VAR 0 5
60699: PUSH
60700: LD_INT 1
60702: NEG
60703: ST_TO_ADDR
// exit ;
60704: GO 60941
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
60706: LD_ADDR_VAR 0 12
60710: PUSH
60711: LD_VAR 0 1
60715: PPUSH
60716: LD_VAR 0 2
60720: PPUSH
60721: LD_VAR 0 3
60725: PPUSH
60726: LD_VAR 0 4
60730: PPUSH
60731: CALL 59791 0 4
60735: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
60736: LD_ADDR_VAR 0 11
60740: PUSH
60741: LD_VAR 0 1
60745: PPUSH
60746: LD_VAR 0 2
60750: PPUSH
60751: LD_VAR 0 12
60755: PUSH
60756: LD_INT 1
60758: ARRAY
60759: PPUSH
60760: LD_VAR 0 12
60764: PUSH
60765: LD_INT 2
60767: ARRAY
60768: PPUSH
60769: CALL_OW 298
60773: ST_TO_ADDR
// distance := 9999 ;
60774: LD_ADDR_VAR 0 10
60778: PUSH
60779: LD_INT 9999
60781: ST_TO_ADDR
// for i := 0 to 5 do
60782: LD_ADDR_VAR 0 6
60786: PUSH
60787: DOUBLE
60788: LD_INT 0
60790: DEC
60791: ST_TO_ADDR
60792: LD_INT 5
60794: PUSH
60795: FOR_TO
60796: IFFALSE 60939
// begin _x := ShiftX ( x1 , i , centerDist ) ;
60798: LD_ADDR_VAR 0 7
60802: PUSH
60803: LD_VAR 0 1
60807: PPUSH
60808: LD_VAR 0 6
60812: PPUSH
60813: LD_VAR 0 11
60817: PPUSH
60818: CALL_OW 272
60822: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
60823: LD_ADDR_VAR 0 8
60827: PUSH
60828: LD_VAR 0 2
60832: PPUSH
60833: LD_VAR 0 6
60837: PPUSH
60838: LD_VAR 0 11
60842: PPUSH
60843: CALL_OW 273
60847: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
60848: LD_VAR 0 7
60852: PPUSH
60853: LD_VAR 0 8
60857: PPUSH
60858: CALL_OW 488
60862: NOT
60863: IFFALSE 60867
// continue ;
60865: GO 60795
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
60867: LD_ADDR_VAR 0 9
60871: PUSH
60872: LD_VAR 0 12
60876: PUSH
60877: LD_INT 1
60879: ARRAY
60880: PPUSH
60881: LD_VAR 0 12
60885: PUSH
60886: LD_INT 2
60888: ARRAY
60889: PPUSH
60890: LD_VAR 0 7
60894: PPUSH
60895: LD_VAR 0 8
60899: PPUSH
60900: CALL_OW 298
60904: ST_TO_ADDR
// if tmp < distance then
60905: LD_VAR 0 9
60909: PUSH
60910: LD_VAR 0 10
60914: LESS
60915: IFFALSE 60937
// begin result := i ;
60917: LD_ADDR_VAR 0 5
60921: PUSH
60922: LD_VAR 0 6
60926: ST_TO_ADDR
// distance := tmp ;
60927: LD_ADDR_VAR 0 10
60931: PUSH
60932: LD_VAR 0 9
60936: ST_TO_ADDR
// end ; end ;
60937: GO 60795
60939: POP
60940: POP
// end ;
60941: LD_VAR 0 5
60945: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
60946: LD_INT 0
60948: PPUSH
60949: PPUSH
// if not driver or not IsInUnit ( driver ) then
60950: LD_VAR 0 1
60954: NOT
60955: PUSH
60956: LD_VAR 0 1
60960: PPUSH
60961: CALL_OW 310
60965: NOT
60966: OR
60967: IFFALSE 60971
// exit ;
60969: GO 61061
// vehicle := IsInUnit ( driver ) ;
60971: LD_ADDR_VAR 0 3
60975: PUSH
60976: LD_VAR 0 1
60980: PPUSH
60981: CALL_OW 310
60985: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
60986: LD_VAR 0 1
60990: PPUSH
60991: LD_STRING \
60993: PUSH
60994: LD_INT 0
60996: PUSH
60997: LD_INT 0
60999: PUSH
61000: LD_INT 0
61002: PUSH
61003: LD_INT 0
61005: PUSH
61006: LD_INT 0
61008: PUSH
61009: LD_INT 0
61011: PUSH
61012: EMPTY
61013: LIST
61014: LIST
61015: LIST
61016: LIST
61017: LIST
61018: LIST
61019: LIST
61020: PUSH
61021: LD_STRING E
61023: PUSH
61024: LD_INT 0
61026: PUSH
61027: LD_INT 0
61029: PUSH
61030: LD_VAR 0 3
61034: PUSH
61035: LD_INT 0
61037: PUSH
61038: LD_INT 0
61040: PUSH
61041: LD_INT 0
61043: PUSH
61044: EMPTY
61045: LIST
61046: LIST
61047: LIST
61048: LIST
61049: LIST
61050: LIST
61051: LIST
61052: PUSH
61053: EMPTY
61054: LIST
61055: LIST
61056: PPUSH
61057: CALL_OW 446
// end ;
61061: LD_VAR 0 2
61065: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
61066: LD_INT 0
61068: PPUSH
61069: PPUSH
// if not driver or not IsInUnit ( driver ) then
61070: LD_VAR 0 1
61074: NOT
61075: PUSH
61076: LD_VAR 0 1
61080: PPUSH
61081: CALL_OW 310
61085: NOT
61086: OR
61087: IFFALSE 61091
// exit ;
61089: GO 61181
// vehicle := IsInUnit ( driver ) ;
61091: LD_ADDR_VAR 0 3
61095: PUSH
61096: LD_VAR 0 1
61100: PPUSH
61101: CALL_OW 310
61105: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
61106: LD_VAR 0 1
61110: PPUSH
61111: LD_STRING \
61113: PUSH
61114: LD_INT 0
61116: PUSH
61117: LD_INT 0
61119: PUSH
61120: LD_INT 0
61122: PUSH
61123: LD_INT 0
61125: PUSH
61126: LD_INT 0
61128: PUSH
61129: LD_INT 0
61131: PUSH
61132: EMPTY
61133: LIST
61134: LIST
61135: LIST
61136: LIST
61137: LIST
61138: LIST
61139: LIST
61140: PUSH
61141: LD_STRING E
61143: PUSH
61144: LD_INT 0
61146: PUSH
61147: LD_INT 0
61149: PUSH
61150: LD_VAR 0 3
61154: PUSH
61155: LD_INT 0
61157: PUSH
61158: LD_INT 0
61160: PUSH
61161: LD_INT 0
61163: PUSH
61164: EMPTY
61165: LIST
61166: LIST
61167: LIST
61168: LIST
61169: LIST
61170: LIST
61171: LIST
61172: PUSH
61173: EMPTY
61174: LIST
61175: LIST
61176: PPUSH
61177: CALL_OW 447
// end ;
61181: LD_VAR 0 2
61185: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
61186: LD_INT 0
61188: PPUSH
61189: PPUSH
61190: PPUSH
// tmp := [ ] ;
61191: LD_ADDR_VAR 0 5
61195: PUSH
61196: EMPTY
61197: ST_TO_ADDR
// for i in units do
61198: LD_ADDR_VAR 0 4
61202: PUSH
61203: LD_VAR 0 1
61207: PUSH
61208: FOR_IN
61209: IFFALSE 61247
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
61211: LD_ADDR_VAR 0 5
61215: PUSH
61216: LD_VAR 0 5
61220: PPUSH
61221: LD_VAR 0 5
61225: PUSH
61226: LD_INT 1
61228: PLUS
61229: PPUSH
61230: LD_VAR 0 4
61234: PPUSH
61235: CALL_OW 256
61239: PPUSH
61240: CALL_OW 2
61244: ST_TO_ADDR
61245: GO 61208
61247: POP
61248: POP
// if not tmp then
61249: LD_VAR 0 5
61253: NOT
61254: IFFALSE 61258
// exit ;
61256: GO 61306
// if asc then
61258: LD_VAR 0 2
61262: IFFALSE 61286
// result := SortListByListAsc ( units , tmp ) else
61264: LD_ADDR_VAR 0 3
61268: PUSH
61269: LD_VAR 0 1
61273: PPUSH
61274: LD_VAR 0 5
61278: PPUSH
61279: CALL_OW 76
61283: ST_TO_ADDR
61284: GO 61306
// result := SortListByListDesc ( units , tmp ) ;
61286: LD_ADDR_VAR 0 3
61290: PUSH
61291: LD_VAR 0 1
61295: PPUSH
61296: LD_VAR 0 5
61300: PPUSH
61301: CALL_OW 77
61305: ST_TO_ADDR
// end ;
61306: LD_VAR 0 3
61310: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
61311: LD_INT 0
61313: PPUSH
61314: PPUSH
// task := GetTaskList ( mech ) ;
61315: LD_ADDR_VAR 0 4
61319: PUSH
61320: LD_VAR 0 1
61324: PPUSH
61325: CALL_OW 437
61329: ST_TO_ADDR
// if not task then
61330: LD_VAR 0 4
61334: NOT
61335: IFFALSE 61339
// exit ;
61337: GO 61381
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
61339: LD_ADDR_VAR 0 3
61343: PUSH
61344: LD_VAR 0 4
61348: PUSH
61349: LD_INT 1
61351: ARRAY
61352: PUSH
61353: LD_INT 1
61355: ARRAY
61356: PUSH
61357: LD_STRING r
61359: EQUAL
61360: PUSH
61361: LD_VAR 0 4
61365: PUSH
61366: LD_INT 1
61368: ARRAY
61369: PUSH
61370: LD_INT 4
61372: ARRAY
61373: PUSH
61374: LD_VAR 0 2
61378: EQUAL
61379: AND
61380: ST_TO_ADDR
// end ;
61381: LD_VAR 0 3
61385: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
61386: LD_INT 0
61388: PPUSH
// SetDir ( unit , d ) ;
61389: LD_VAR 0 1
61393: PPUSH
61394: LD_VAR 0 4
61398: PPUSH
61399: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
61403: LD_ADDR_VAR 0 6
61407: PUSH
61408: LD_VAR 0 1
61412: PPUSH
61413: LD_VAR 0 2
61417: PPUSH
61418: LD_VAR 0 3
61422: PPUSH
61423: LD_VAR 0 5
61427: PPUSH
61428: CALL_OW 48
61432: ST_TO_ADDR
// end ;
61433: LD_VAR 0 6
61437: RET
// export function ToNaturalNumber ( number ) ; begin
61438: LD_INT 0
61440: PPUSH
// result := number div 1 ;
61441: LD_ADDR_VAR 0 2
61445: PUSH
61446: LD_VAR 0 1
61450: PUSH
61451: LD_INT 1
61453: DIV
61454: ST_TO_ADDR
// if number < 0 then
61455: LD_VAR 0 1
61459: PUSH
61460: LD_INT 0
61462: LESS
61463: IFFALSE 61473
// result := 0 ;
61465: LD_ADDR_VAR 0 2
61469: PUSH
61470: LD_INT 0
61472: ST_TO_ADDR
// end ;
61473: LD_VAR 0 2
61477: RET
// export function SortByClass ( units , class ) ; var un ; begin
61478: LD_INT 0
61480: PPUSH
61481: PPUSH
// if not units or not class then
61482: LD_VAR 0 1
61486: NOT
61487: PUSH
61488: LD_VAR 0 2
61492: NOT
61493: OR
61494: IFFALSE 61498
// exit ;
61496: GO 61593
// result := [ ] ;
61498: LD_ADDR_VAR 0 3
61502: PUSH
61503: EMPTY
61504: ST_TO_ADDR
// for un in units do
61505: LD_ADDR_VAR 0 4
61509: PUSH
61510: LD_VAR 0 1
61514: PUSH
61515: FOR_IN
61516: IFFALSE 61591
// if GetClass ( un ) = class then
61518: LD_VAR 0 4
61522: PPUSH
61523: CALL_OW 257
61527: PUSH
61528: LD_VAR 0 2
61532: EQUAL
61533: IFFALSE 61560
// result := Insert ( result , 1 , un ) else
61535: LD_ADDR_VAR 0 3
61539: PUSH
61540: LD_VAR 0 3
61544: PPUSH
61545: LD_INT 1
61547: PPUSH
61548: LD_VAR 0 4
61552: PPUSH
61553: CALL_OW 2
61557: ST_TO_ADDR
61558: GO 61589
// result := Replace ( result , result + 1 , un ) ;
61560: LD_ADDR_VAR 0 3
61564: PUSH
61565: LD_VAR 0 3
61569: PPUSH
61570: LD_VAR 0 3
61574: PUSH
61575: LD_INT 1
61577: PLUS
61578: PPUSH
61579: LD_VAR 0 4
61583: PPUSH
61584: CALL_OW 1
61588: ST_TO_ADDR
61589: GO 61515
61591: POP
61592: POP
// end ;
61593: LD_VAR 0 3
61597: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
61598: LD_INT 0
61600: PPUSH
61601: PPUSH
61602: PPUSH
61603: PPUSH
61604: PPUSH
61605: PPUSH
61606: PPUSH
// result := [ ] ;
61607: LD_ADDR_VAR 0 4
61611: PUSH
61612: EMPTY
61613: ST_TO_ADDR
// if x - r < 0 then
61614: LD_VAR 0 1
61618: PUSH
61619: LD_VAR 0 3
61623: MINUS
61624: PUSH
61625: LD_INT 0
61627: LESS
61628: IFFALSE 61640
// min_x := 0 else
61630: LD_ADDR_VAR 0 8
61634: PUSH
61635: LD_INT 0
61637: ST_TO_ADDR
61638: GO 61656
// min_x := x - r ;
61640: LD_ADDR_VAR 0 8
61644: PUSH
61645: LD_VAR 0 1
61649: PUSH
61650: LD_VAR 0 3
61654: MINUS
61655: ST_TO_ADDR
// if y - r < 0 then
61656: LD_VAR 0 2
61660: PUSH
61661: LD_VAR 0 3
61665: MINUS
61666: PUSH
61667: LD_INT 0
61669: LESS
61670: IFFALSE 61682
// min_y := 0 else
61672: LD_ADDR_VAR 0 7
61676: PUSH
61677: LD_INT 0
61679: ST_TO_ADDR
61680: GO 61698
// min_y := y - r ;
61682: LD_ADDR_VAR 0 7
61686: PUSH
61687: LD_VAR 0 2
61691: PUSH
61692: LD_VAR 0 3
61696: MINUS
61697: ST_TO_ADDR
// max_x := x + r ;
61698: LD_ADDR_VAR 0 9
61702: PUSH
61703: LD_VAR 0 1
61707: PUSH
61708: LD_VAR 0 3
61712: PLUS
61713: ST_TO_ADDR
// max_y := y + r ;
61714: LD_ADDR_VAR 0 10
61718: PUSH
61719: LD_VAR 0 2
61723: PUSH
61724: LD_VAR 0 3
61728: PLUS
61729: ST_TO_ADDR
// for _x = min_x to max_x do
61730: LD_ADDR_VAR 0 5
61734: PUSH
61735: DOUBLE
61736: LD_VAR 0 8
61740: DEC
61741: ST_TO_ADDR
61742: LD_VAR 0 9
61746: PUSH
61747: FOR_TO
61748: IFFALSE 61849
// for _y = min_y to max_y do
61750: LD_ADDR_VAR 0 6
61754: PUSH
61755: DOUBLE
61756: LD_VAR 0 7
61760: DEC
61761: ST_TO_ADDR
61762: LD_VAR 0 10
61766: PUSH
61767: FOR_TO
61768: IFFALSE 61845
// begin if not ValidHex ( _x , _y ) then
61770: LD_VAR 0 5
61774: PPUSH
61775: LD_VAR 0 6
61779: PPUSH
61780: CALL_OW 488
61784: NOT
61785: IFFALSE 61789
// continue ;
61787: GO 61767
// if GetResourceTypeXY ( _x , _y ) then
61789: LD_VAR 0 5
61793: PPUSH
61794: LD_VAR 0 6
61798: PPUSH
61799: CALL_OW 283
61803: IFFALSE 61843
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
61805: LD_ADDR_VAR 0 4
61809: PUSH
61810: LD_VAR 0 4
61814: PPUSH
61815: LD_VAR 0 4
61819: PUSH
61820: LD_INT 1
61822: PLUS
61823: PPUSH
61824: LD_VAR 0 5
61828: PUSH
61829: LD_VAR 0 6
61833: PUSH
61834: EMPTY
61835: LIST
61836: LIST
61837: PPUSH
61838: CALL_OW 1
61842: ST_TO_ADDR
// end ;
61843: GO 61767
61845: POP
61846: POP
61847: GO 61747
61849: POP
61850: POP
// end ;
61851: LD_VAR 0 4
61855: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
61856: LD_INT 0
61858: PPUSH
61859: PPUSH
61860: PPUSH
61861: PPUSH
61862: PPUSH
61863: PPUSH
61864: PPUSH
61865: PPUSH
// if not units then
61866: LD_VAR 0 1
61870: NOT
61871: IFFALSE 61875
// exit ;
61873: GO 62403
// result := UnitFilter ( units , [ f_ok ] ) ;
61875: LD_ADDR_VAR 0 3
61879: PUSH
61880: LD_VAR 0 1
61884: PPUSH
61885: LD_INT 50
61887: PUSH
61888: EMPTY
61889: LIST
61890: PPUSH
61891: CALL_OW 72
61895: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
61896: LD_ADDR_VAR 0 8
61900: PUSH
61901: LD_VAR 0 1
61905: PUSH
61906: LD_INT 1
61908: ARRAY
61909: PPUSH
61910: CALL_OW 255
61914: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
61915: LD_ADDR_VAR 0 10
61919: PUSH
61920: LD_INT 29
61922: PUSH
61923: LD_INT 91
61925: PUSH
61926: LD_INT 49
61928: PUSH
61929: EMPTY
61930: LIST
61931: LIST
61932: LIST
61933: ST_TO_ADDR
// if not result then
61934: LD_VAR 0 3
61938: NOT
61939: IFFALSE 61943
// exit ;
61941: GO 62403
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
61943: LD_ADDR_VAR 0 5
61947: PUSH
61948: LD_INT 81
61950: PUSH
61951: LD_VAR 0 8
61955: PUSH
61956: EMPTY
61957: LIST
61958: LIST
61959: PPUSH
61960: CALL_OW 69
61964: ST_TO_ADDR
// for i in result do
61965: LD_ADDR_VAR 0 4
61969: PUSH
61970: LD_VAR 0 3
61974: PUSH
61975: FOR_IN
61976: IFFALSE 62401
// begin tag := GetTag ( i ) + 1 ;
61978: LD_ADDR_VAR 0 9
61982: PUSH
61983: LD_VAR 0 4
61987: PPUSH
61988: CALL_OW 110
61992: PUSH
61993: LD_INT 1
61995: PLUS
61996: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
61997: LD_ADDR_VAR 0 7
62001: PUSH
62002: LD_VAR 0 4
62006: PPUSH
62007: CALL_OW 250
62011: PPUSH
62012: LD_VAR 0 4
62016: PPUSH
62017: CALL_OW 251
62021: PPUSH
62022: LD_INT 4
62024: PPUSH
62025: CALL 61598 0 3
62029: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
62030: LD_VAR 0 4
62034: PPUSH
62035: CALL_OW 247
62039: PUSH
62040: LD_INT 2
62042: EQUAL
62043: PUSH
62044: LD_VAR 0 7
62048: PUSH
62049: LD_INT 2
62051: GREATER
62052: AND
62053: PUSH
62054: LD_VAR 0 4
62058: PPUSH
62059: CALL_OW 264
62063: PUSH
62064: LD_VAR 0 10
62068: IN
62069: NOT
62070: AND
62071: IFFALSE 62110
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
62073: LD_VAR 0 4
62077: PPUSH
62078: LD_VAR 0 7
62082: PUSH
62083: LD_INT 1
62085: ARRAY
62086: PUSH
62087: LD_INT 1
62089: ARRAY
62090: PPUSH
62091: LD_VAR 0 7
62095: PUSH
62096: LD_INT 1
62098: ARRAY
62099: PUSH
62100: LD_INT 2
62102: ARRAY
62103: PPUSH
62104: CALL_OW 116
62108: GO 62399
// if path > tag then
62110: LD_VAR 0 2
62114: PUSH
62115: LD_VAR 0 9
62119: GREATER
62120: IFFALSE 62328
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
62122: LD_ADDR_VAR 0 6
62126: PUSH
62127: LD_VAR 0 5
62131: PPUSH
62132: LD_INT 91
62134: PUSH
62135: LD_VAR 0 4
62139: PUSH
62140: LD_INT 8
62142: PUSH
62143: EMPTY
62144: LIST
62145: LIST
62146: LIST
62147: PPUSH
62148: CALL_OW 72
62152: ST_TO_ADDR
// if nearEnemy then
62153: LD_VAR 0 6
62157: IFFALSE 62226
// begin if GetWeapon ( i ) = ru_time_lapser then
62159: LD_VAR 0 4
62163: PPUSH
62164: CALL_OW 264
62168: PUSH
62169: LD_INT 49
62171: EQUAL
62172: IFFALSE 62200
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
62174: LD_VAR 0 4
62178: PPUSH
62179: LD_VAR 0 6
62183: PPUSH
62184: LD_VAR 0 4
62188: PPUSH
62189: CALL_OW 74
62193: PPUSH
62194: CALL_OW 112
62198: GO 62224
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
62200: LD_VAR 0 4
62204: PPUSH
62205: LD_VAR 0 6
62209: PPUSH
62210: LD_VAR 0 4
62214: PPUSH
62215: CALL_OW 74
62219: PPUSH
62220: CALL 63474 0 2
// end else
62224: GO 62326
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
62226: LD_VAR 0 4
62230: PPUSH
62231: LD_VAR 0 2
62235: PUSH
62236: LD_VAR 0 9
62240: ARRAY
62241: PUSH
62242: LD_INT 1
62244: ARRAY
62245: PPUSH
62246: LD_VAR 0 2
62250: PUSH
62251: LD_VAR 0 9
62255: ARRAY
62256: PUSH
62257: LD_INT 2
62259: ARRAY
62260: PPUSH
62261: CALL_OW 297
62265: PUSH
62266: LD_INT 6
62268: GREATER
62269: IFFALSE 62312
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
62271: LD_VAR 0 4
62275: PPUSH
62276: LD_VAR 0 2
62280: PUSH
62281: LD_VAR 0 9
62285: ARRAY
62286: PUSH
62287: LD_INT 1
62289: ARRAY
62290: PPUSH
62291: LD_VAR 0 2
62295: PUSH
62296: LD_VAR 0 9
62300: ARRAY
62301: PUSH
62302: LD_INT 2
62304: ARRAY
62305: PPUSH
62306: CALL_OW 114
62310: GO 62326
// SetTag ( i , tag ) ;
62312: LD_VAR 0 4
62316: PPUSH
62317: LD_VAR 0 9
62321: PPUSH
62322: CALL_OW 109
// end else
62326: GO 62399
// if enemy then
62328: LD_VAR 0 5
62332: IFFALSE 62399
// begin if GetWeapon ( i ) = ru_time_lapser then
62334: LD_VAR 0 4
62338: PPUSH
62339: CALL_OW 264
62343: PUSH
62344: LD_INT 49
62346: EQUAL
62347: IFFALSE 62375
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
62349: LD_VAR 0 4
62353: PPUSH
62354: LD_VAR 0 5
62358: PPUSH
62359: LD_VAR 0 4
62363: PPUSH
62364: CALL_OW 74
62368: PPUSH
62369: CALL_OW 112
62373: GO 62399
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
62375: LD_VAR 0 4
62379: PPUSH
62380: LD_VAR 0 5
62384: PPUSH
62385: LD_VAR 0 4
62389: PPUSH
62390: CALL_OW 74
62394: PPUSH
62395: CALL 63474 0 2
// end ; end ;
62399: GO 61975
62401: POP
62402: POP
// end ;
62403: LD_VAR 0 3
62407: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
62408: LD_INT 0
62410: PPUSH
62411: PPUSH
62412: PPUSH
// if not unit or IsInUnit ( unit ) then
62413: LD_VAR 0 1
62417: NOT
62418: PUSH
62419: LD_VAR 0 1
62423: PPUSH
62424: CALL_OW 310
62428: OR
62429: IFFALSE 62433
// exit ;
62431: GO 62524
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
62433: LD_ADDR_VAR 0 4
62437: PUSH
62438: LD_VAR 0 1
62442: PPUSH
62443: CALL_OW 250
62447: PPUSH
62448: LD_VAR 0 2
62452: PPUSH
62453: LD_INT 1
62455: PPUSH
62456: CALL_OW 272
62460: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
62461: LD_ADDR_VAR 0 5
62465: PUSH
62466: LD_VAR 0 1
62470: PPUSH
62471: CALL_OW 251
62475: PPUSH
62476: LD_VAR 0 2
62480: PPUSH
62481: LD_INT 1
62483: PPUSH
62484: CALL_OW 273
62488: ST_TO_ADDR
// if ValidHex ( x , y ) then
62489: LD_VAR 0 4
62493: PPUSH
62494: LD_VAR 0 5
62498: PPUSH
62499: CALL_OW 488
62503: IFFALSE 62524
// ComTurnXY ( unit , x , y ) ;
62505: LD_VAR 0 1
62509: PPUSH
62510: LD_VAR 0 4
62514: PPUSH
62515: LD_VAR 0 5
62519: PPUSH
62520: CALL_OW 118
// end ;
62524: LD_VAR 0 3
62528: RET
// export function SeeUnits ( side , units ) ; var i ; begin
62529: LD_INT 0
62531: PPUSH
62532: PPUSH
// result := false ;
62533: LD_ADDR_VAR 0 3
62537: PUSH
62538: LD_INT 0
62540: ST_TO_ADDR
// if not units then
62541: LD_VAR 0 2
62545: NOT
62546: IFFALSE 62550
// exit ;
62548: GO 62595
// for i in units do
62550: LD_ADDR_VAR 0 4
62554: PUSH
62555: LD_VAR 0 2
62559: PUSH
62560: FOR_IN
62561: IFFALSE 62593
// if See ( side , i ) then
62563: LD_VAR 0 1
62567: PPUSH
62568: LD_VAR 0 4
62572: PPUSH
62573: CALL_OW 292
62577: IFFALSE 62591
// begin result := true ;
62579: LD_ADDR_VAR 0 3
62583: PUSH
62584: LD_INT 1
62586: ST_TO_ADDR
// exit ;
62587: POP
62588: POP
62589: GO 62595
// end ;
62591: GO 62560
62593: POP
62594: POP
// end ;
62595: LD_VAR 0 3
62599: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
62600: LD_INT 0
62602: PPUSH
62603: PPUSH
62604: PPUSH
62605: PPUSH
// if not unit or not points then
62606: LD_VAR 0 1
62610: NOT
62611: PUSH
62612: LD_VAR 0 2
62616: NOT
62617: OR
62618: IFFALSE 62622
// exit ;
62620: GO 62712
// dist := 99999 ;
62622: LD_ADDR_VAR 0 5
62626: PUSH
62627: LD_INT 99999
62629: ST_TO_ADDR
// for i in points do
62630: LD_ADDR_VAR 0 4
62634: PUSH
62635: LD_VAR 0 2
62639: PUSH
62640: FOR_IN
62641: IFFALSE 62710
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
62643: LD_ADDR_VAR 0 6
62647: PUSH
62648: LD_VAR 0 1
62652: PPUSH
62653: LD_VAR 0 4
62657: PUSH
62658: LD_INT 1
62660: ARRAY
62661: PPUSH
62662: LD_VAR 0 4
62666: PUSH
62667: LD_INT 2
62669: ARRAY
62670: PPUSH
62671: CALL_OW 297
62675: ST_TO_ADDR
// if tmpDist < dist then
62676: LD_VAR 0 6
62680: PUSH
62681: LD_VAR 0 5
62685: LESS
62686: IFFALSE 62708
// begin result := i ;
62688: LD_ADDR_VAR 0 3
62692: PUSH
62693: LD_VAR 0 4
62697: ST_TO_ADDR
// dist := tmpDist ;
62698: LD_ADDR_VAR 0 5
62702: PUSH
62703: LD_VAR 0 6
62707: ST_TO_ADDR
// end ; end ;
62708: GO 62640
62710: POP
62711: POP
// end ;
62712: LD_VAR 0 3
62716: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
62717: LD_INT 0
62719: PPUSH
// uc_side := side ;
62720: LD_ADDR_OWVAR 20
62724: PUSH
62725: LD_VAR 0 1
62729: ST_TO_ADDR
// uc_nation := 3 ;
62730: LD_ADDR_OWVAR 21
62734: PUSH
62735: LD_INT 3
62737: ST_TO_ADDR
// vc_chassis := 25 ;
62738: LD_ADDR_OWVAR 37
62742: PUSH
62743: LD_INT 25
62745: ST_TO_ADDR
// vc_engine := engine_siberite ;
62746: LD_ADDR_OWVAR 39
62750: PUSH
62751: LD_INT 3
62753: ST_TO_ADDR
// vc_control := control_computer ;
62754: LD_ADDR_OWVAR 38
62758: PUSH
62759: LD_INT 3
62761: ST_TO_ADDR
// vc_weapon := 59 ;
62762: LD_ADDR_OWVAR 40
62766: PUSH
62767: LD_INT 59
62769: ST_TO_ADDR
// result := CreateVehicle ;
62770: LD_ADDR_VAR 0 5
62774: PUSH
62775: CALL_OW 45
62779: ST_TO_ADDR
// SetDir ( result , d ) ;
62780: LD_VAR 0 5
62784: PPUSH
62785: LD_VAR 0 4
62789: PPUSH
62790: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
62794: LD_VAR 0 5
62798: PPUSH
62799: LD_VAR 0 2
62803: PPUSH
62804: LD_VAR 0 3
62808: PPUSH
62809: LD_INT 0
62811: PPUSH
62812: CALL_OW 48
// end ;
62816: LD_VAR 0 5
62820: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
62821: LD_INT 0
62823: PPUSH
62824: PPUSH
62825: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
62826: LD_ADDR_VAR 0 2
62830: PUSH
62831: LD_INT 0
62833: PUSH
62834: LD_INT 0
62836: PUSH
62837: LD_INT 0
62839: PUSH
62840: LD_INT 0
62842: PUSH
62843: EMPTY
62844: LIST
62845: LIST
62846: LIST
62847: LIST
62848: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
62849: LD_VAR 0 1
62853: NOT
62854: PUSH
62855: LD_VAR 0 1
62859: PPUSH
62860: CALL_OW 264
62864: PUSH
62865: LD_INT 12
62867: PUSH
62868: LD_INT 51
62870: PUSH
62871: LD_INT 32
62873: PUSH
62874: LD_INT 89
62876: PUSH
62877: EMPTY
62878: LIST
62879: LIST
62880: LIST
62881: LIST
62882: IN
62883: NOT
62884: OR
62885: IFFALSE 62889
// exit ;
62887: GO 62987
// for i := 1 to 3 do
62889: LD_ADDR_VAR 0 3
62893: PUSH
62894: DOUBLE
62895: LD_INT 1
62897: DEC
62898: ST_TO_ADDR
62899: LD_INT 3
62901: PUSH
62902: FOR_TO
62903: IFFALSE 62985
// begin tmp := GetCargo ( cargo , i ) ;
62905: LD_ADDR_VAR 0 4
62909: PUSH
62910: LD_VAR 0 1
62914: PPUSH
62915: LD_VAR 0 3
62919: PPUSH
62920: CALL_OW 289
62924: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
62925: LD_ADDR_VAR 0 2
62929: PUSH
62930: LD_VAR 0 2
62934: PPUSH
62935: LD_VAR 0 3
62939: PPUSH
62940: LD_VAR 0 4
62944: PPUSH
62945: CALL_OW 1
62949: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
62950: LD_ADDR_VAR 0 2
62954: PUSH
62955: LD_VAR 0 2
62959: PPUSH
62960: LD_INT 4
62962: PPUSH
62963: LD_VAR 0 2
62967: PUSH
62968: LD_INT 4
62970: ARRAY
62971: PUSH
62972: LD_VAR 0 4
62976: PLUS
62977: PPUSH
62978: CALL_OW 1
62982: ST_TO_ADDR
// end ;
62983: GO 62902
62985: POP
62986: POP
// end ;
62987: LD_VAR 0 2
62991: RET
// export function Length ( array ) ; begin
62992: LD_INT 0
62994: PPUSH
// result := array + 0 ;
62995: LD_ADDR_VAR 0 2
62999: PUSH
63000: LD_VAR 0 1
63004: PUSH
63005: LD_INT 0
63007: PLUS
63008: ST_TO_ADDR
// end ;
63009: LD_VAR 0 2
63013: RET
// export function PrepareArray ( array ) ; begin
63014: LD_INT 0
63016: PPUSH
// result := array diff 0 ;
63017: LD_ADDR_VAR 0 2
63021: PUSH
63022: LD_VAR 0 1
63026: PUSH
63027: LD_INT 0
63029: DIFF
63030: ST_TO_ADDR
// if not result [ 1 ] then
63031: LD_VAR 0 2
63035: PUSH
63036: LD_INT 1
63038: ARRAY
63039: NOT
63040: IFFALSE 63060
// result := Delete ( result , 1 ) ;
63042: LD_ADDR_VAR 0 2
63046: PUSH
63047: LD_VAR 0 2
63051: PPUSH
63052: LD_INT 1
63054: PPUSH
63055: CALL_OW 3
63059: ST_TO_ADDR
// end ;
63060: LD_VAR 0 2
63064: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
63065: LD_INT 0
63067: PPUSH
63068: PPUSH
63069: PPUSH
63070: PPUSH
// sibRocketRange := 25 ;
63071: LD_ADDR_VAR 0 6
63075: PUSH
63076: LD_INT 25
63078: ST_TO_ADDR
// result := false ;
63079: LD_ADDR_VAR 0 4
63083: PUSH
63084: LD_INT 0
63086: ST_TO_ADDR
// for i := 0 to 5 do
63087: LD_ADDR_VAR 0 5
63091: PUSH
63092: DOUBLE
63093: LD_INT 0
63095: DEC
63096: ST_TO_ADDR
63097: LD_INT 5
63099: PUSH
63100: FOR_TO
63101: IFFALSE 63168
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
63103: LD_VAR 0 1
63107: PPUSH
63108: LD_VAR 0 5
63112: PPUSH
63113: LD_VAR 0 6
63117: PPUSH
63118: CALL_OW 272
63122: PPUSH
63123: LD_VAR 0 2
63127: PPUSH
63128: LD_VAR 0 5
63132: PPUSH
63133: LD_VAR 0 6
63137: PPUSH
63138: CALL_OW 273
63142: PPUSH
63143: LD_VAR 0 3
63147: PPUSH
63148: CALL_OW 309
63152: IFFALSE 63166
// begin result := true ;
63154: LD_ADDR_VAR 0 4
63158: PUSH
63159: LD_INT 1
63161: ST_TO_ADDR
// exit ;
63162: POP
63163: POP
63164: GO 63170
// end ;
63166: GO 63100
63168: POP
63169: POP
// end ;
63170: LD_VAR 0 4
63174: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
63175: LD_INT 0
63177: PPUSH
63178: PPUSH
63179: PPUSH
// if btype = b_depot then
63180: LD_VAR 0 2
63184: PUSH
63185: LD_INT 0
63187: EQUAL
63188: IFFALSE 63200
// begin result := true ;
63190: LD_ADDR_VAR 0 3
63194: PUSH
63195: LD_INT 1
63197: ST_TO_ADDR
// exit ;
63198: GO 63316
// end ; pom := GetBase ( depot ) ;
63200: LD_ADDR_VAR 0 4
63204: PUSH
63205: LD_VAR 0 1
63209: PPUSH
63210: CALL_OW 274
63214: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
63215: LD_ADDR_VAR 0 5
63219: PUSH
63220: LD_VAR 0 2
63224: PPUSH
63225: LD_VAR 0 1
63229: PPUSH
63230: CALL_OW 248
63234: PPUSH
63235: CALL_OW 450
63239: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
63240: LD_ADDR_VAR 0 3
63244: PUSH
63245: LD_VAR 0 4
63249: PPUSH
63250: LD_INT 1
63252: PPUSH
63253: CALL_OW 275
63257: PUSH
63258: LD_VAR 0 5
63262: PUSH
63263: LD_INT 1
63265: ARRAY
63266: GREATEREQUAL
63267: PUSH
63268: LD_VAR 0 4
63272: PPUSH
63273: LD_INT 2
63275: PPUSH
63276: CALL_OW 275
63280: PUSH
63281: LD_VAR 0 5
63285: PUSH
63286: LD_INT 2
63288: ARRAY
63289: GREATEREQUAL
63290: AND
63291: PUSH
63292: LD_VAR 0 4
63296: PPUSH
63297: LD_INT 3
63299: PPUSH
63300: CALL_OW 275
63304: PUSH
63305: LD_VAR 0 5
63309: PUSH
63310: LD_INT 3
63312: ARRAY
63313: GREATEREQUAL
63314: AND
63315: ST_TO_ADDR
// end ;
63316: LD_VAR 0 3
63320: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
63321: LD_INT 0
63323: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
63324: LD_VAR 0 1
63328: PPUSH
63329: LD_VAR 0 2
63333: PPUSH
63334: LD_INT 0
63336: PPUSH
63337: LD_INT 0
63339: PPUSH
63340: LD_INT 1
63342: PPUSH
63343: LD_INT 0
63345: PPUSH
63346: CALL_OW 587
// end ;
63350: LD_VAR 0 3
63354: RET
// export function CenterOnNow ( unit ) ; begin
63355: LD_INT 0
63357: PPUSH
// result := IsInUnit ( unit ) ;
63358: LD_ADDR_VAR 0 2
63362: PUSH
63363: LD_VAR 0 1
63367: PPUSH
63368: CALL_OW 310
63372: ST_TO_ADDR
// if not result then
63373: LD_VAR 0 2
63377: NOT
63378: IFFALSE 63390
// result := unit ;
63380: LD_ADDR_VAR 0 2
63384: PUSH
63385: LD_VAR 0 1
63389: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
63390: LD_VAR 0 1
63394: PPUSH
63395: CALL_OW 87
// end ;
63399: LD_VAR 0 2
63403: RET
// export function ComMoveHex ( unit , hex ) ; begin
63404: LD_INT 0
63406: PPUSH
// if not hex then
63407: LD_VAR 0 2
63411: NOT
63412: IFFALSE 63416
// exit ;
63414: GO 63469
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
63416: LD_VAR 0 2
63420: PUSH
63421: LD_INT 1
63423: ARRAY
63424: PPUSH
63425: LD_VAR 0 2
63429: PUSH
63430: LD_INT 2
63432: ARRAY
63433: PPUSH
63434: CALL_OW 428
63438: IFFALSE 63442
// exit ;
63440: GO 63469
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
63442: LD_VAR 0 1
63446: PPUSH
63447: LD_VAR 0 2
63451: PUSH
63452: LD_INT 1
63454: ARRAY
63455: PPUSH
63456: LD_VAR 0 2
63460: PUSH
63461: LD_INT 2
63463: ARRAY
63464: PPUSH
63465: CALL_OW 111
// end ;
63469: LD_VAR 0 3
63473: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
63474: LD_INT 0
63476: PPUSH
63477: PPUSH
63478: PPUSH
// if not unit or not enemy then
63479: LD_VAR 0 1
63483: NOT
63484: PUSH
63485: LD_VAR 0 2
63489: NOT
63490: OR
63491: IFFALSE 63495
// exit ;
63493: GO 63619
// x := GetX ( enemy ) ;
63495: LD_ADDR_VAR 0 4
63499: PUSH
63500: LD_VAR 0 2
63504: PPUSH
63505: CALL_OW 250
63509: ST_TO_ADDR
// y := GetY ( enemy ) ;
63510: LD_ADDR_VAR 0 5
63514: PUSH
63515: LD_VAR 0 2
63519: PPUSH
63520: CALL_OW 251
63524: ST_TO_ADDR
// if ValidHex ( x , y ) then
63525: LD_VAR 0 4
63529: PPUSH
63530: LD_VAR 0 5
63534: PPUSH
63535: CALL_OW 488
63539: IFFALSE 63619
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
63541: LD_VAR 0 2
63545: PPUSH
63546: CALL_OW 247
63550: PUSH
63551: LD_INT 3
63553: PUSH
63554: LD_INT 2
63556: PUSH
63557: EMPTY
63558: LIST
63559: LIST
63560: IN
63561: PUSH
63562: LD_VAR 0 1
63566: PPUSH
63567: CALL_OW 255
63571: PPUSH
63572: LD_VAR 0 2
63576: PPUSH
63577: CALL_OW 292
63581: OR
63582: IFFALSE 63600
// ComAttackUnit ( unit , enemy ) else
63584: LD_VAR 0 1
63588: PPUSH
63589: LD_VAR 0 2
63593: PPUSH
63594: CALL_OW 115
63598: GO 63619
// ComAgressiveMove ( unit , x , y ) ;
63600: LD_VAR 0 1
63604: PPUSH
63605: LD_VAR 0 4
63609: PPUSH
63610: LD_VAR 0 5
63614: PPUSH
63615: CALL_OW 114
// end ;
63619: LD_VAR 0 3
63623: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
63624: LD_INT 0
63626: PPUSH
63627: PPUSH
63628: PPUSH
// list := AreaToList ( area , 0 ) ;
63629: LD_ADDR_VAR 0 5
63633: PUSH
63634: LD_VAR 0 1
63638: PPUSH
63639: LD_INT 0
63641: PPUSH
63642: CALL_OW 517
63646: ST_TO_ADDR
// if not list then
63647: LD_VAR 0 5
63651: NOT
63652: IFFALSE 63656
// exit ;
63654: GO 63786
// if all then
63656: LD_VAR 0 2
63660: IFFALSE 63748
// begin for i := 1 to list [ 1 ] do
63662: LD_ADDR_VAR 0 4
63666: PUSH
63667: DOUBLE
63668: LD_INT 1
63670: DEC
63671: ST_TO_ADDR
63672: LD_VAR 0 5
63676: PUSH
63677: LD_INT 1
63679: ARRAY
63680: PUSH
63681: FOR_TO
63682: IFFALSE 63744
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
63684: LD_ADDR_VAR 0 3
63688: PUSH
63689: LD_VAR 0 3
63693: PPUSH
63694: LD_VAR 0 3
63698: PUSH
63699: LD_INT 1
63701: PLUS
63702: PPUSH
63703: LD_VAR 0 5
63707: PUSH
63708: LD_INT 1
63710: ARRAY
63711: PUSH
63712: LD_VAR 0 4
63716: ARRAY
63717: PUSH
63718: LD_VAR 0 5
63722: PUSH
63723: LD_INT 2
63725: ARRAY
63726: PUSH
63727: LD_VAR 0 4
63731: ARRAY
63732: PUSH
63733: EMPTY
63734: LIST
63735: LIST
63736: PPUSH
63737: CALL_OW 1
63741: ST_TO_ADDR
63742: GO 63681
63744: POP
63745: POP
// exit ;
63746: GO 63786
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
63748: LD_ADDR_VAR 0 3
63752: PUSH
63753: LD_VAR 0 5
63757: PUSH
63758: LD_INT 1
63760: ARRAY
63761: PUSH
63762: LD_INT 1
63764: ARRAY
63765: PUSH
63766: LD_VAR 0 5
63770: PUSH
63771: LD_INT 2
63773: ARRAY
63774: PUSH
63775: LD_INT 1
63777: ARRAY
63778: PUSH
63779: EMPTY
63780: LIST
63781: LIST
63782: PUSH
63783: EMPTY
63784: LIST
63785: ST_TO_ADDR
// end ;
63786: LD_VAR 0 3
63790: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
63791: LD_INT 0
63793: PPUSH
63794: PPUSH
// list := AreaToList ( area , 0 ) ;
63795: LD_ADDR_VAR 0 4
63799: PUSH
63800: LD_VAR 0 1
63804: PPUSH
63805: LD_INT 0
63807: PPUSH
63808: CALL_OW 517
63812: ST_TO_ADDR
// if not list then
63813: LD_VAR 0 4
63817: NOT
63818: IFFALSE 63822
// exit ;
63820: GO 63863
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
63822: LD_ADDR_VAR 0 3
63826: PUSH
63827: LD_VAR 0 4
63831: PUSH
63832: LD_INT 1
63834: ARRAY
63835: PUSH
63836: LD_INT 1
63838: ARRAY
63839: PUSH
63840: LD_VAR 0 4
63844: PUSH
63845: LD_INT 2
63847: ARRAY
63848: PUSH
63849: LD_INT 1
63851: ARRAY
63852: PUSH
63853: LD_VAR 0 2
63857: PUSH
63858: EMPTY
63859: LIST
63860: LIST
63861: LIST
63862: ST_TO_ADDR
// end ;
63863: LD_VAR 0 3
63867: RET
// export function First ( array ) ; begin
63868: LD_INT 0
63870: PPUSH
// if not array then
63871: LD_VAR 0 1
63875: NOT
63876: IFFALSE 63880
// exit ;
63878: GO 63894
// result := array [ 1 ] ;
63880: LD_ADDR_VAR 0 2
63884: PUSH
63885: LD_VAR 0 1
63889: PUSH
63890: LD_INT 1
63892: ARRAY
63893: ST_TO_ADDR
// end ;
63894: LD_VAR 0 2
63898: RET
// export function Last ( array ) ; begin
63899: LD_INT 0
63901: PPUSH
// if not array then
63902: LD_VAR 0 1
63906: NOT
63907: IFFALSE 63911
// exit ;
63909: GO 63927
// result := array [ array ] ;
63911: LD_ADDR_VAR 0 2
63915: PUSH
63916: LD_VAR 0 1
63920: PUSH
63921: LD_VAR 0 1
63925: ARRAY
63926: ST_TO_ADDR
// end ;
63927: LD_VAR 0 2
63931: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
63932: LD_INT 0
63934: PPUSH
63935: PPUSH
// result := [ ] ;
63936: LD_ADDR_VAR 0 5
63940: PUSH
63941: EMPTY
63942: ST_TO_ADDR
// if not array then
63943: LD_VAR 0 1
63947: NOT
63948: IFFALSE 63952
// exit ;
63950: GO 64064
// for i := 1 to array do
63952: LD_ADDR_VAR 0 6
63956: PUSH
63957: DOUBLE
63958: LD_INT 1
63960: DEC
63961: ST_TO_ADDR
63962: LD_VAR 0 1
63966: PUSH
63967: FOR_TO
63968: IFFALSE 64062
// if array [ i ] [ index ] = value then
63970: LD_VAR 0 1
63974: PUSH
63975: LD_VAR 0 6
63979: ARRAY
63980: PUSH
63981: LD_VAR 0 2
63985: ARRAY
63986: PUSH
63987: LD_VAR 0 3
63991: EQUAL
63992: IFFALSE 64060
// begin if indexColumn then
63994: LD_VAR 0 4
63998: IFFALSE 64034
// result := Join ( result , array [ i ] [ indexColumn ] ) else
64000: LD_ADDR_VAR 0 5
64004: PUSH
64005: LD_VAR 0 5
64009: PPUSH
64010: LD_VAR 0 1
64014: PUSH
64015: LD_VAR 0 6
64019: ARRAY
64020: PUSH
64021: LD_VAR 0 4
64025: ARRAY
64026: PPUSH
64027: CALL 59246 0 2
64031: ST_TO_ADDR
64032: GO 64060
// result := Join ( result , array [ i ] ) ;
64034: LD_ADDR_VAR 0 5
64038: PUSH
64039: LD_VAR 0 5
64043: PPUSH
64044: LD_VAR 0 1
64048: PUSH
64049: LD_VAR 0 6
64053: ARRAY
64054: PPUSH
64055: CALL 59246 0 2
64059: ST_TO_ADDR
// end ;
64060: GO 63967
64062: POP
64063: POP
// end ;
64064: LD_VAR 0 5
64068: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
64069: LD_INT 0
64071: PPUSH
// if not vehicles or not parkingPoint then
64072: LD_VAR 0 1
64076: NOT
64077: PUSH
64078: LD_VAR 0 2
64082: NOT
64083: OR
64084: IFFALSE 64088
// exit ;
64086: GO 64186
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
64088: LD_ADDR_VAR 0 1
64092: PUSH
64093: LD_VAR 0 1
64097: PPUSH
64098: LD_INT 50
64100: PUSH
64101: EMPTY
64102: LIST
64103: PUSH
64104: LD_INT 3
64106: PUSH
64107: LD_INT 92
64109: PUSH
64110: LD_VAR 0 2
64114: PUSH
64115: LD_INT 1
64117: ARRAY
64118: PUSH
64119: LD_VAR 0 2
64123: PUSH
64124: LD_INT 2
64126: ARRAY
64127: PUSH
64128: LD_INT 8
64130: PUSH
64131: EMPTY
64132: LIST
64133: LIST
64134: LIST
64135: LIST
64136: PUSH
64137: EMPTY
64138: LIST
64139: LIST
64140: PUSH
64141: EMPTY
64142: LIST
64143: LIST
64144: PPUSH
64145: CALL_OW 72
64149: ST_TO_ADDR
// if not vehicles then
64150: LD_VAR 0 1
64154: NOT
64155: IFFALSE 64159
// exit ;
64157: GO 64186
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
64159: LD_VAR 0 1
64163: PPUSH
64164: LD_VAR 0 2
64168: PUSH
64169: LD_INT 1
64171: ARRAY
64172: PPUSH
64173: LD_VAR 0 2
64177: PUSH
64178: LD_INT 2
64180: ARRAY
64181: PPUSH
64182: CALL_OW 111
// end ;
64186: LD_VAR 0 3
64190: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
64191: LD_INT 0
64193: PPUSH
64194: PPUSH
64195: PPUSH
// if not side or not area then
64196: LD_VAR 0 1
64200: NOT
64201: PUSH
64202: LD_VAR 0 2
64206: NOT
64207: OR
64208: IFFALSE 64212
// exit ;
64210: GO 64331
// tmp := AreaToList ( area , 0 ) ;
64212: LD_ADDR_VAR 0 5
64216: PUSH
64217: LD_VAR 0 2
64221: PPUSH
64222: LD_INT 0
64224: PPUSH
64225: CALL_OW 517
64229: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
64230: LD_ADDR_VAR 0 4
64234: PUSH
64235: DOUBLE
64236: LD_INT 1
64238: DEC
64239: ST_TO_ADDR
64240: LD_VAR 0 5
64244: PUSH
64245: LD_INT 1
64247: ARRAY
64248: PUSH
64249: FOR_TO
64250: IFFALSE 64329
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
64252: LD_VAR 0 5
64256: PUSH
64257: LD_INT 1
64259: ARRAY
64260: PUSH
64261: LD_VAR 0 4
64265: ARRAY
64266: PPUSH
64267: LD_VAR 0 5
64271: PUSH
64272: LD_INT 2
64274: ARRAY
64275: PUSH
64276: LD_VAR 0 4
64280: ARRAY
64281: PPUSH
64282: CALL_OW 351
64286: IFFALSE 64327
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
64288: LD_VAR 0 5
64292: PUSH
64293: LD_INT 1
64295: ARRAY
64296: PUSH
64297: LD_VAR 0 4
64301: ARRAY
64302: PPUSH
64303: LD_VAR 0 5
64307: PUSH
64308: LD_INT 2
64310: ARRAY
64311: PUSH
64312: LD_VAR 0 4
64316: ARRAY
64317: PPUSH
64318: LD_VAR 0 1
64322: PPUSH
64323: CALL_OW 244
// end ;
64327: GO 64249
64329: POP
64330: POP
// end ; end_of_file
64331: LD_VAR 0 3
64335: RET
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeFamine do var i , canWin ;
64336: LD_EXP 48
64340: PUSH
64341: CALL 64546 0 0
64345: AND
64346: PUSH
64347: LD_OWVAR 4
64351: AND
64352: IFFALSE 64543
64354: GO 64356
64356: DISABLE
64357: LD_INT 0
64359: PPUSH
64360: PPUSH
// begin canWin := false ;
64361: LD_ADDR_VAR 0 2
64365: PUSH
64366: LD_INT 0
64368: ST_TO_ADDR
// if not HasPower ( your_side ) then
64369: LD_OWVAR 2
64373: PPUSH
64374: CALL 64586 0 1
64378: NOT
64379: IFFALSE 64390
// begin Multiplayer_Loose_Message ;
64381: CALL_OW 521
// enable ( mpLose ) ;
64385: LD_INT 102
64387: ENABLE_MARKED
// end else
64388: GO 64543
// begin canWin := true ;
64390: LD_ADDR_VAR 0 2
64394: PUSH
64395: LD_INT 1
64397: ST_TO_ADDR
// for i := 1 to 8 do
64398: LD_ADDR_VAR 0 1
64402: PUSH
64403: DOUBLE
64404: LD_INT 1
64406: DEC
64407: ST_TO_ADDR
64408: LD_INT 8
64410: PUSH
64411: FOR_TO
64412: IFFALSE 64529
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
64414: LD_EXP 16
64418: PUSH
64419: LD_VAR 0 1
64423: ARRAY
64424: PUSH
64425: LD_VAR 0 1
64429: PPUSH
64430: CALL_OW 108
64434: AND
64435: PUSH
64436: LD_VAR 0 1
64440: PUSH
64441: LD_OWVAR 2
64445: NONEQUAL
64446: AND
64447: IFFALSE 64527
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
64449: LD_EXP 17
64453: PUSH
64454: LD_VAR 0 1
64458: ARRAY
64459: NOT
64460: PUSH
64461: LD_EXP 17
64465: PUSH
64466: LD_VAR 0 1
64470: ARRAY
64471: PUSH
64472: LD_EXP 17
64476: PUSH
64477: LD_OWVAR 2
64481: ARRAY
64482: NONEQUAL
64483: PUSH
64484: LD_OWVAR 2
64488: PPUSH
64489: LD_VAR 0 1
64493: PPUSH
64494: CALL_OW 81
64498: PUSH
64499: LD_INT 1
64501: NONEQUAL
64502: AND
64503: OR
64504: IFFALSE 64527
// if HasPower ( i ) then
64506: LD_VAR 0 1
64510: PPUSH
64511: CALL 64586 0 1
64515: IFFALSE 64527
// begin canWin := false ;
64517: LD_ADDR_VAR 0 2
64521: PUSH
64522: LD_INT 0
64524: ST_TO_ADDR
// break ;
64525: GO 64529
// end ;
64527: GO 64411
64529: POP
64530: POP
// if canWin then
64531: LD_VAR 0 2
64535: IFFALSE 64542
// enable ( mpWin ) else
64537: LD_INT 101
64539: ENABLE_MARKED
64540: GO 64543
// enable ;
64542: ENABLE
// end ; end ;
64543: PPOPN 2
64545: END
// function CanWinLoose ; begin
64546: LD_INT 0
64548: PPUSH
// result := true ;
64549: LD_ADDR_VAR 0 1
64553: PUSH
64554: LD_INT 1
64556: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
64557: CALL_OW 531
64561: PUSH
64562: CALL_OW 519
64566: PUSH
64567: LD_INT 1
64569: GREATER
64570: AND
64571: IFFALSE 64581
// result := false ;
64573: LD_ADDR_VAR 0 1
64577: PUSH
64578: LD_INT 0
64580: ST_TO_ADDR
// end ;
64581: LD_VAR 0 1
64585: RET
// function HasPower ( i ) ; begin
64586: LD_INT 0
64588: PPUSH
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
64589: LD_ADDR_VAR 0 2
64593: PUSH
64594: LD_INT 22
64596: PUSH
64597: LD_VAR 0 1
64601: PUSH
64602: EMPTY
64603: LIST
64604: LIST
64605: PUSH
64606: LD_INT 2
64608: PUSH
64609: LD_INT 21
64611: PUSH
64612: LD_INT 1
64614: PUSH
64615: EMPTY
64616: LIST
64617: LIST
64618: PUSH
64619: LD_INT 33
64621: PUSH
64622: LD_INT 3
64624: PUSH
64625: EMPTY
64626: LIST
64627: LIST
64628: PUSH
64629: LD_INT 33
64631: PUSH
64632: LD_INT 5
64634: PUSH
64635: EMPTY
64636: LIST
64637: LIST
64638: PUSH
64639: EMPTY
64640: LIST
64641: LIST
64642: LIST
64643: LIST
64644: PUSH
64645: EMPTY
64646: LIST
64647: LIST
64648: PPUSH
64649: CALL_OW 69
64653: ST_TO_ADDR
// end ;
64654: LD_VAR 0 2
64658: RET
// export function FamineDeposits ( areas , values , type ) ; var i , j , list ; begin
64659: LD_INT 0
64661: PPUSH
64662: PPUSH
64663: PPUSH
64664: PPUSH
// if not areas or not values or not type in [ mat_oil , mat_siberit ] then
64665: LD_VAR 0 1
64669: NOT
64670: PUSH
64671: LD_VAR 0 2
64675: NOT
64676: OR
64677: PUSH
64678: LD_VAR 0 3
64682: PUSH
64683: LD_INT 2
64685: PUSH
64686: LD_INT 3
64688: PUSH
64689: EMPTY
64690: LIST
64691: LIST
64692: IN
64693: NOT
64694: OR
64695: IFFALSE 64699
// exit ;
64697: GO 64949
// for i := 1 to Count ( areas ) do
64699: LD_ADDR_VAR 0 5
64703: PUSH
64704: DOUBLE
64705: LD_INT 1
64707: DEC
64708: ST_TO_ADDR
64709: LD_VAR 0 1
64713: PPUSH
64714: CALL 23637 0 1
64718: PUSH
64719: FOR_TO
64720: IFFALSE 64947
// begin list := AreaToList ( areas [ i ] , 0 ) ;
64722: LD_ADDR_VAR 0 7
64726: PUSH
64727: LD_VAR 0 1
64731: PUSH
64732: LD_VAR 0 5
64736: ARRAY
64737: PPUSH
64738: LD_INT 0
64740: PPUSH
64741: CALL_OW 517
64745: ST_TO_ADDR
// for j := 1 to list [ 1 ] do
64746: LD_ADDR_VAR 0 6
64750: PUSH
64751: DOUBLE
64752: LD_INT 1
64754: DEC
64755: ST_TO_ADDR
64756: LD_VAR 0 7
64760: PUSH
64761: LD_INT 1
64763: ARRAY
64764: PUSH
64765: FOR_TO
64766: IFFALSE 64943
// begin CreateDepositXY ( list [ 1 ] [ j ] , list [ 2 ] [ j ] , type ) ;
64768: LD_VAR 0 7
64772: PUSH
64773: LD_INT 1
64775: ARRAY
64776: PUSH
64777: LD_VAR 0 6
64781: ARRAY
64782: PPUSH
64783: LD_VAR 0 7
64787: PUSH
64788: LD_INT 2
64790: ARRAY
64791: PUSH
64792: LD_VAR 0 6
64796: ARRAY
64797: PPUSH
64798: LD_VAR 0 3
64802: PPUSH
64803: CALL_OW 62
// if type = mat_oil then
64807: LD_VAR 0 3
64811: PUSH
64812: LD_INT 2
64814: EQUAL
64815: IFFALSE 64880
// mpGlobalOilDeposits := Join ( mpGlobalOilDeposits , [ list [ 1 ] [ j ] , list [ 2 ] [ j ] , values [ i ] ] ) else
64817: LD_ADDR_EXP 50
64821: PUSH
64822: LD_EXP 50
64826: PPUSH
64827: LD_VAR 0 7
64831: PUSH
64832: LD_INT 1
64834: ARRAY
64835: PUSH
64836: LD_VAR 0 6
64840: ARRAY
64841: PUSH
64842: LD_VAR 0 7
64846: PUSH
64847: LD_INT 2
64849: ARRAY
64850: PUSH
64851: LD_VAR 0 6
64855: ARRAY
64856: PUSH
64857: LD_VAR 0 2
64861: PUSH
64862: LD_VAR 0 5
64866: ARRAY
64867: PUSH
64868: EMPTY
64869: LIST
64870: LIST
64871: LIST
64872: PPUSH
64873: CALL 59246 0 2
64877: ST_TO_ADDR
64878: GO 64941
// mpGlobalSibDeposits := Join ( mpGlobalSibDeposits , [ list [ 1 ] [ j ] , list [ 2 ] [ j ] , values [ i ] ] ) end ;
64880: LD_ADDR_EXP 51
64884: PUSH
64885: LD_EXP 51
64889: PPUSH
64890: LD_VAR 0 7
64894: PUSH
64895: LD_INT 1
64897: ARRAY
64898: PUSH
64899: LD_VAR 0 6
64903: ARRAY
64904: PUSH
64905: LD_VAR 0 7
64909: PUSH
64910: LD_INT 2
64912: ARRAY
64913: PUSH
64914: LD_VAR 0 6
64918: ARRAY
64919: PUSH
64920: LD_VAR 0 2
64924: PUSH
64925: LD_VAR 0 5
64929: ARRAY
64930: PUSH
64931: EMPTY
64932: LIST
64933: LIST
64934: LIST
64935: PPUSH
64936: CALL 59246 0 2
64940: ST_TO_ADDR
64941: GO 64765
64943: POP
64944: POP
// end ;
64945: GO 64719
64947: POP
64948: POP
// end ; end_of_file
64949: LD_VAR 0 4
64953: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin end ;
64954: PPOPN 6
64956: END
// on MapStart ( p ) do begin if mpGameType = GameTypeCoop then
64957: LD_EXP 12
64961: PUSH
64962: LD_INT 4
64964: EQUAL
64965: IFFALSE 65001
// begin ToLua ( setGameDifficulty( & Difficulty & ) ) ;
64967: LD_STRING setGameDifficulty(
64969: PUSH
64970: LD_OWVAR 67
64974: STR
64975: PUSH
64976: LD_STRING )
64978: STR
64979: PPUSH
64980: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
64984: LD_STRING displayDifficulty(
64986: PUSH
64987: LD_OWVAR 67
64991: STR
64992: PUSH
64993: LD_STRING )
64995: STR
64996: PPUSH
64997: CALL_OW 559
// end ; SOS_MapStart ( ) ;
65001: CALL 14671 0 0
// end ;
65005: PPOPN 1
65007: END
