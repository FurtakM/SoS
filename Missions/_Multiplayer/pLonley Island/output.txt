// starting begin ResetFog ;
   0: CALL_OW 335
// InitMultiplayer ;
   4: CALL 6130 0 0
// InitMultiplayerSettings ;
   8: CALL 17 0 0
// StartMultiplayer ;
  12: CALL 6506 0 0
// end ; end_of_file
  16: END
// export function InitMultiplayerSettings ; begin
  17: LD_INT 0
  19: PPUSH
// mpGameSettingsKeys := [ 0 , 1 , 1 , 0 , 1 , 0 , 0 , 0 , 1 , 0 , 1 , 0 , 1 , 1 , 1 , 1 , 0 , 1 , 1 , 1 , 1 ] ;
  20: LD_ADDR_EXP 13
  24: PUSH
  25: LD_INT 0
  27: PUSH
  28: LD_INT 1
  30: PUSH
  31: LD_INT 1
  33: PUSH
  34: LD_INT 0
  36: PUSH
  37: LD_INT 1
  39: PUSH
  40: LD_INT 0
  42: PUSH
  43: LD_INT 0
  45: PUSH
  46: LD_INT 0
  48: PUSH
  49: LD_INT 1
  51: PUSH
  52: LD_INT 0
  54: PUSH
  55: LD_INT 1
  57: PUSH
  58: LD_INT 0
  60: PUSH
  61: LD_INT 1
  63: PUSH
  64: LD_INT 1
  66: PUSH
  67: LD_INT 1
  69: PUSH
  70: LD_INT 1
  72: PUSH
  73: LD_INT 0
  75: PUSH
  76: LD_INT 1
  78: PUSH
  79: LD_INT 1
  81: PUSH
  82: LD_INT 1
  84: PUSH
  85: LD_INT 1
  87: PUSH
  88: EMPTY
  89: LIST
  90: LIST
  91: LIST
  92: LIST
  93: LIST
  94: LIST
  95: LIST
  96: LIST
  97: LIST
  98: LIST
  99: LIST
 100: LIST
 101: LIST
 102: LIST
 103: LIST
 104: LIST
 105: LIST
 106: LIST
 107: LIST
 108: LIST
 109: LIST
 110: ST_TO_ADDR
// mpGameSettingsValues := [ [ 0 , 1 , 2 ] , [ 9 , 12 , 15 , 24 ] , [ 1 , 3 , 5 , 7 ] , [ [ 0 , 0 , 0 ] , [ 100 , 30 , 0 ] , [ 200 , 75 , 10 ] , [ 500 , 150 , 30 ] ] , [ 1 , 2 , 3 , 4 ] , [ 0 , 1 , 2 ] , [ 0 , 1 , 2 ] , [ 250 , 350 , 500 , 1000 , 2000 ] , [ 0 , 1 ] , [ 0 , 5 5$00 , 10 10$00 , 15 15$00 , 20 20$00 , 30 30$00 ] , [ 0 , 1 ] , [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] , [ 0 , 1 ] , [ 0 , 6 6$30 , 3 3$30 ] , [ 0 , 2 , 4 , 6 ] , [ 30 , 50 , 100 ] , [ ] , [ 0 , 1 , 15 15$0 , 25 25$0 , 30 30$0 , 45 45$0 , 60 60$0 , 90 90$0 , 100 100$0 , 120 120$0 , 180 180$0 ] , [ 0 , 1 ] , [ 0 , 1 ] , [ 0 , 3 3$0 , 5 5$0 , 8 8$0 , 10 10$0 , 12 12$0 , 15 15$0 , 20 20$0 , 30 30$0 ] , ] ;
 111: LD_ADDR_EXP 14
 115: PUSH
 116: LD_INT 0
 118: PUSH
 119: LD_INT 1
 121: PUSH
 122: LD_INT 2
 124: PUSH
 125: EMPTY
 126: LIST
 127: LIST
 128: LIST
 129: PUSH
 130: LD_INT 9
 132: PUSH
 133: LD_INT 12
 135: PUSH
 136: LD_INT 15
 138: PUSH
 139: LD_INT 24
 141: PUSH
 142: EMPTY
 143: LIST
 144: LIST
 145: LIST
 146: LIST
 147: PUSH
 148: LD_INT 1
 150: PUSH
 151: LD_INT 3
 153: PUSH
 154: LD_INT 5
 156: PUSH
 157: LD_INT 7
 159: PUSH
 160: EMPTY
 161: LIST
 162: LIST
 163: LIST
 164: LIST
 165: PUSH
 166: LD_INT 0
 168: PUSH
 169: LD_INT 0
 171: PUSH
 172: LD_INT 0
 174: PUSH
 175: EMPTY
 176: LIST
 177: LIST
 178: LIST
 179: PUSH
 180: LD_INT 100
 182: PUSH
 183: LD_INT 30
 185: PUSH
 186: LD_INT 0
 188: PUSH
 189: EMPTY
 190: LIST
 191: LIST
 192: LIST
 193: PUSH
 194: LD_INT 200
 196: PUSH
 197: LD_INT 75
 199: PUSH
 200: LD_INT 10
 202: PUSH
 203: EMPTY
 204: LIST
 205: LIST
 206: LIST
 207: PUSH
 208: LD_INT 500
 210: PUSH
 211: LD_INT 150
 213: PUSH
 214: LD_INT 30
 216: PUSH
 217: EMPTY
 218: LIST
 219: LIST
 220: LIST
 221: PUSH
 222: EMPTY
 223: LIST
 224: LIST
 225: LIST
 226: LIST
 227: PUSH
 228: LD_INT 1
 230: PUSH
 231: LD_INT 2
 233: PUSH
 234: LD_INT 3
 236: PUSH
 237: LD_INT 4
 239: PUSH
 240: EMPTY
 241: LIST
 242: LIST
 243: LIST
 244: LIST
 245: PUSH
 246: LD_INT 0
 248: PUSH
 249: LD_INT 1
 251: PUSH
 252: LD_INT 2
 254: PUSH
 255: EMPTY
 256: LIST
 257: LIST
 258: LIST
 259: PUSH
 260: LD_INT 0
 262: PUSH
 263: LD_INT 1
 265: PUSH
 266: LD_INT 2
 268: PUSH
 269: EMPTY
 270: LIST
 271: LIST
 272: LIST
 273: PUSH
 274: LD_INT 250
 276: PUSH
 277: LD_INT 350
 279: PUSH
 280: LD_INT 500
 282: PUSH
 283: LD_INT 1000
 285: PUSH
 286: LD_INT 2000
 288: PUSH
 289: EMPTY
 290: LIST
 291: LIST
 292: LIST
 293: LIST
 294: LIST
 295: PUSH
 296: LD_INT 0
 298: PUSH
 299: LD_INT 1
 301: PUSH
 302: EMPTY
 303: LIST
 304: LIST
 305: PUSH
 306: LD_INT 0
 308: PUSH
 309: LD_INT 10500
 311: PUSH
 312: LD_INT 21000
 314: PUSH
 315: LD_INT 31500
 317: PUSH
 318: LD_INT 42000
 320: PUSH
 321: LD_INT 63000
 323: PUSH
 324: EMPTY
 325: LIST
 326: LIST
 327: LIST
 328: LIST
 329: LIST
 330: LIST
 331: PUSH
 332: LD_INT 0
 334: PUSH
 335: LD_INT 1
 337: PUSH
 338: EMPTY
 339: LIST
 340: LIST
 341: PUSH
 342: LD_INT 1
 344: NEG
 345: PUSH
 346: LD_INT 350
 348: PUSH
 349: LD_INT 700
 351: PUSH
 352: LD_INT 1400
 354: PUSH
 355: LD_INT 0
 357: PUSH
 358: EMPTY
 359: LIST
 360: LIST
 361: LIST
 362: LIST
 363: LIST
 364: PUSH
 365: LD_INT 0
 367: PUSH
 368: LD_INT 1
 370: PUSH
 371: EMPTY
 372: LIST
 373: LIST
 374: PUSH
 375: LD_INT 0
 377: PUSH
 378: LD_INT 13650
 380: PUSH
 381: LD_INT 7350
 383: PUSH
 384: EMPTY
 385: LIST
 386: LIST
 387: LIST
 388: PUSH
 389: LD_INT 0
 391: PUSH
 392: LD_INT 2
 394: PUSH
 395: LD_INT 4
 397: PUSH
 398: LD_INT 6
 400: PUSH
 401: EMPTY
 402: LIST
 403: LIST
 404: LIST
 405: LIST
 406: PUSH
 407: LD_INT 30
 409: PUSH
 410: LD_INT 50
 412: PUSH
 413: LD_INT 100
 415: PUSH
 416: EMPTY
 417: LIST
 418: LIST
 419: LIST
 420: PUSH
 421: EMPTY
 422: PUSH
 423: LD_INT 0
 425: PUSH
 426: LD_INT 1
 428: PUSH
 429: LD_INT 31500
 431: PUSH
 432: LD_INT 52500
 434: PUSH
 435: LD_INT 63000
 437: PUSH
 438: LD_INT 94500
 440: PUSH
 441: LD_INT 126000
 443: PUSH
 444: LD_INT 189000
 446: PUSH
 447: LD_INT 210000
 449: PUSH
 450: LD_INT 252000
 452: PUSH
 453: LD_INT 378000
 455: PUSH
 456: EMPTY
 457: LIST
 458: LIST
 459: LIST
 460: LIST
 461: LIST
 462: LIST
 463: LIST
 464: LIST
 465: LIST
 466: LIST
 467: LIST
 468: PUSH
 469: LD_INT 0
 471: PUSH
 472: LD_INT 1
 474: PUSH
 475: EMPTY
 476: LIST
 477: LIST
 478: PUSH
 479: LD_INT 0
 481: PUSH
 482: LD_INT 1
 484: PUSH
 485: EMPTY
 486: LIST
 487: LIST
 488: PUSH
 489: LD_INT 0
 491: PUSH
 492: LD_INT 6300
 494: PUSH
 495: LD_INT 10500
 497: PUSH
 498: LD_INT 16800
 500: PUSH
 501: LD_INT 21000
 503: PUSH
 504: LD_INT 25200
 506: PUSH
 507: LD_INT 31500
 509: PUSH
 510: LD_INT 42000
 512: PUSH
 513: LD_INT 63000
 515: PUSH
 516: EMPTY
 517: LIST
 518: LIST
 519: LIST
 520: LIST
 521: LIST
 522: LIST
 523: LIST
 524: LIST
 525: LIST
 526: PUSH
 527: EMPTY
 528: LIST
 529: LIST
 530: LIST
 531: LIST
 532: LIST
 533: LIST
 534: LIST
 535: LIST
 536: LIST
 537: LIST
 538: LIST
 539: LIST
 540: LIST
 541: LIST
 542: LIST
 543: LIST
 544: LIST
 545: LIST
 546: LIST
 547: LIST
 548: LIST
 549: ST_TO_ADDR
// mpGameSettings := [ 0 , 15 , 4 , [ 0 , 0 , 0 ] , 3 , 0 , 0 , 0 , 1 , 0 , 1 , 0 0$20 , 1 , 0 0$20 , 3 , 30 , 0 , 15 15$0 , 1 , 1 , 0 ] ;
 550: LD_ADDR_EXP 15
 554: PUSH
 555: LD_INT 0
 557: PUSH
 558: LD_INT 15
 560: PUSH
 561: LD_INT 4
 563: PUSH
 564: LD_INT 0
 566: PUSH
 567: LD_INT 0
 569: PUSH
 570: LD_INT 0
 572: PUSH
 573: EMPTY
 574: LIST
 575: LIST
 576: LIST
 577: PUSH
 578: LD_INT 3
 580: PUSH
 581: LD_INT 0
 583: PUSH
 584: LD_INT 0
 586: PUSH
 587: LD_INT 0
 589: PUSH
 590: LD_INT 1
 592: PUSH
 593: LD_INT 0
 595: PUSH
 596: LD_INT 1
 598: PUSH
 599: LD_INT 700
 601: PUSH
 602: LD_INT 1
 604: PUSH
 605: LD_INT 700
 607: PUSH
 608: LD_INT 3
 610: PUSH
 611: LD_INT 30
 613: PUSH
 614: LD_INT 0
 616: PUSH
 617: LD_INT 31500
 619: PUSH
 620: LD_INT 1
 622: PUSH
 623: LD_INT 1
 625: PUSH
 626: LD_INT 0
 628: PUSH
 629: EMPTY
 630: LIST
 631: LIST
 632: LIST
 633: LIST
 634: LIST
 635: LIST
 636: LIST
 637: LIST
 638: LIST
 639: LIST
 640: LIST
 641: LIST
 642: LIST
 643: LIST
 644: LIST
 645: LIST
 646: LIST
 647: LIST
 648: LIST
 649: LIST
 650: LIST
 651: ST_TO_ADDR
// mpGameType := GameTypeFamine ;
 652: LD_ADDR_EXP 12
 656: PUSH
 657: LD_INT 5
 659: ST_TO_ADDR
// your_side := 1 ;
 660: LD_ADDR_OWVAR 2
 664: PUSH
 665: LD_INT 1
 667: ST_TO_ADDR
// mpSidePositions := [ 8 , 2 , 3 , 4 , 5 , 6 , 7 , 1 ] ;
 668: LD_ADDR_EXP 16
 672: PUSH
 673: LD_INT 8
 675: PUSH
 676: LD_INT 2
 678: PUSH
 679: LD_INT 3
 681: PUSH
 682: LD_INT 4
 684: PUSH
 685: LD_INT 5
 687: PUSH
 688: LD_INT 6
 690: PUSH
 691: LD_INT 7
 693: PUSH
 694: LD_INT 1
 696: PUSH
 697: EMPTY
 698: LIST
 699: LIST
 700: LIST
 701: LIST
 702: LIST
 703: LIST
 704: LIST
 705: LIST
 706: ST_TO_ADDR
// mpSideTeams := [ 1 , 2 , 2 , 3 , 3 , 4 , 4 , 1 ] ;
 707: LD_ADDR_EXP 17
 711: PUSH
 712: LD_INT 1
 714: PUSH
 715: LD_INT 2
 717: PUSH
 718: LD_INT 2
 720: PUSH
 721: LD_INT 3
 723: PUSH
 724: LD_INT 3
 726: PUSH
 727: LD_INT 4
 729: PUSH
 730: LD_INT 4
 732: PUSH
 733: LD_INT 1
 735: PUSH
 736: EMPTY
 737: LIST
 738: LIST
 739: LIST
 740: LIST
 741: LIST
 742: LIST
 743: LIST
 744: LIST
 745: ST_TO_ADDR
// mpSideNations := [ 1 , 2 , 3 , 1 , 2 , 3 , 1 , 2 ] ;
 746: LD_ADDR_EXP 18
 750: PUSH
 751: LD_INT 1
 753: PUSH
 754: LD_INT 2
 756: PUSH
 757: LD_INT 3
 759: PUSH
 760: LD_INT 1
 762: PUSH
 763: LD_INT 2
 765: PUSH
 766: LD_INT 3
 768: PUSH
 769: LD_INT 1
 771: PUSH
 772: LD_INT 2
 774: PUSH
 775: EMPTY
 776: LIST
 777: LIST
 778: LIST
 779: LIST
 780: LIST
 781: LIST
 782: LIST
 783: LIST
 784: ST_TO_ADDR
// mpTeams := [ [ 1 , 8 ] , [ 2 , 3 ] , [ 4 , 5 ] , [ 6 , 7 ] ] ;
 785: LD_ADDR_EXP 19
 789: PUSH
 790: LD_INT 1
 792: PUSH
 793: LD_INT 8
 795: PUSH
 796: EMPTY
 797: LIST
 798: LIST
 799: PUSH
 800: LD_INT 2
 802: PUSH
 803: LD_INT 3
 805: PUSH
 806: EMPTY
 807: LIST
 808: LIST
 809: PUSH
 810: LD_INT 4
 812: PUSH
 813: LD_INT 5
 815: PUSH
 816: EMPTY
 817: LIST
 818: LIST
 819: PUSH
 820: LD_INT 6
 822: PUSH
 823: LD_INT 7
 825: PUSH
 826: EMPTY
 827: LIST
 828: LIST
 829: PUSH
 830: EMPTY
 831: LIST
 832: LIST
 833: LIST
 834: LIST
 835: ST_TO_ADDR
// mpTeamGame := false ;
 836: LD_ADDR_EXP 20
 840: PUSH
 841: LD_INT 0
 843: ST_TO_ADDR
// mpMapSize := [ 240 , 270 ] ;
 844: LD_ADDR_EXP 38
 848: PUSH
 849: LD_INT 240
 851: PUSH
 852: LD_INT 270
 854: PUSH
 855: EMPTY
 856: LIST
 857: LIST
 858: ST_TO_ADDR
// end ;
 859: LD_VAR 0 1
 863: RET
// export BuildUpEscape , kingCamArea ; export function GetMultiplayerMapData ( gameType ) ; var i , t , all , depositsValue , startPos ; begin
 864: LD_INT 0
 866: PPUSH
 867: PPUSH
 868: PPUSH
 869: PPUSH
 870: PPUSH
 871: PPUSH
// BuildUpEscape := 0 ;
 872: LD_ADDR_EXP 1
 876: PUSH
 877: LD_INT 0
 879: ST_TO_ADDR
// kingCamArea := 0 ;
 880: LD_ADDR_EXP 2
 884: PUSH
 885: LD_INT 0
 887: ST_TO_ADDR
// mpPeopleAmount := mpGameSettings [ 2 ] ;
 888: LD_ADDR_EXP 33
 892: PUSH
 893: LD_EXP 15
 897: PUSH
 898: LD_INT 2
 900: ARRAY
 901: ST_TO_ADDR
// mpPeopleSkill := mpGameSettings [ 3 ] ;
 902: LD_ADDR_EXP 34
 906: PUSH
 907: LD_EXP 15
 911: PUSH
 912: LD_INT 3
 914: ARRAY
 915: ST_TO_ADDR
// mpShipments := mpGameSettings [ 5 ] ;
 916: LD_ADDR_EXP 36
 920: PUSH
 921: LD_EXP 15
 925: PUSH
 926: LD_INT 5
 928: ARRAY
 929: ST_TO_ADDR
// if mpGameSettings [ 9 ] then
 930: LD_EXP 15
 934: PUSH
 935: LD_INT 9
 937: ARRAY
 938: IFFALSE 1127
// begin mpVehicles := [ [ [ us_light_wheeled , engine_combustion , control_manual , us_machine_gun ] , [ us_light_wheeled , engine_combustion , control_manual , us_light_gun ] , [ us_medium_wheeled , engine_combustion , control_manual , us_cargo_bay ] ] , [ [ ar_light_trike , engine_combustion , control_manual , ar_double_machine_gun ] , [ ar_light_trike , engine_combustion , control_manual , ar_light_gun ] , [ ar_medium_trike , engine_combustion , control_manual , ar_cargo_bay ] ] , [ [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun ] , [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun ] , [ ru_medium_wheeled , engine_combustion , control_manual , ru_cargo_bay ] ] ] ;
 940: LD_ADDR_EXP 45
 944: PUSH
 945: LD_INT 1
 947: PUSH
 948: LD_INT 1
 950: PUSH
 951: LD_INT 1
 953: PUSH
 954: LD_INT 2
 956: PUSH
 957: EMPTY
 958: LIST
 959: LIST
 960: LIST
 961: LIST
 962: PUSH
 963: LD_INT 1
 965: PUSH
 966: LD_INT 1
 968: PUSH
 969: LD_INT 1
 971: PUSH
 972: LD_INT 3
 974: PUSH
 975: EMPTY
 976: LIST
 977: LIST
 978: LIST
 979: LIST
 980: PUSH
 981: LD_INT 2
 983: PUSH
 984: LD_INT 1
 986: PUSH
 987: LD_INT 1
 989: PUSH
 990: LD_INT 12
 992: PUSH
 993: EMPTY
 994: LIST
 995: LIST
 996: LIST
 997: LIST
 998: PUSH
 999: EMPTY
1000: LIST
1001: LIST
1002: LIST
1003: PUSH
1004: LD_INT 12
1006: PUSH
1007: LD_INT 1
1009: PUSH
1010: LD_INT 1
1012: PUSH
1013: LD_INT 24
1015: PUSH
1016: EMPTY
1017: LIST
1018: LIST
1019: LIST
1020: LIST
1021: PUSH
1022: LD_INT 12
1024: PUSH
1025: LD_INT 1
1027: PUSH
1028: LD_INT 1
1030: PUSH
1031: LD_INT 23
1033: PUSH
1034: EMPTY
1035: LIST
1036: LIST
1037: LIST
1038: LIST
1039: PUSH
1040: LD_INT 13
1042: PUSH
1043: LD_INT 1
1045: PUSH
1046: LD_INT 1
1048: PUSH
1049: LD_INT 32
1051: PUSH
1052: EMPTY
1053: LIST
1054: LIST
1055: LIST
1056: LIST
1057: PUSH
1058: EMPTY
1059: LIST
1060: LIST
1061: LIST
1062: PUSH
1063: LD_INT 21
1065: PUSH
1066: LD_INT 1
1068: PUSH
1069: LD_INT 1
1071: PUSH
1072: LD_INT 42
1074: PUSH
1075: EMPTY
1076: LIST
1077: LIST
1078: LIST
1079: LIST
1080: PUSH
1081: LD_INT 21
1083: PUSH
1084: LD_INT 1
1086: PUSH
1087: LD_INT 1
1089: PUSH
1090: LD_INT 42
1092: PUSH
1093: EMPTY
1094: LIST
1095: LIST
1096: LIST
1097: LIST
1098: PUSH
1099: LD_INT 21
1101: PUSH
1102: LD_INT 1
1104: PUSH
1105: LD_INT 1
1107: PUSH
1108: LD_INT 51
1110: PUSH
1111: EMPTY
1112: LIST
1113: LIST
1114: LIST
1115: LIST
1116: PUSH
1117: EMPTY
1118: LIST
1119: LIST
1120: LIST
1121: PUSH
1122: EMPTY
1123: LIST
1124: LIST
1125: LIST
1126: ST_TO_ADDR
// end ; mpSharedVision := mpGameSettings [ 11 ] ;
1127: LD_ADDR_EXP 25
1131: PUSH
1132: LD_EXP 15
1136: PUSH
1137: LD_INT 11
1139: ARRAY
1140: ST_TO_ADDR
// mpSibDetection := mpGameSettings [ 13 ] ;
1141: LD_ADDR_EXP 35
1145: PUSH
1146: LD_EXP 15
1150: PUSH
1151: LD_INT 13
1153: ARRAY
1154: ST_TO_ADDR
// mpRespawn := mpGameSettings [ 14 ] ;
1155: LD_ADDR_EXP 42
1159: PUSH
1160: LD_EXP 15
1164: PUSH
1165: LD_INT 14
1167: ARRAY
1168: ST_TO_ADDR
// mpApemans := mpGameSettings [ 15 ] ;
1169: LD_ADDR_EXP 39
1173: PUSH
1174: LD_EXP 15
1178: PUSH
1179: LD_INT 15
1181: ARRAY
1182: ST_TO_ADDR
// depositsValue := mpGameSettings [ 16 ] ;
1183: LD_ADDR_VAR 0 6
1187: PUSH
1188: LD_EXP 15
1192: PUSH
1193: LD_INT 16
1195: ARRAY
1196: ST_TO_ADDR
// mpSibBomb := mpGameSettings [ 18 ] ;
1197: LD_ADDR_EXP 37
1201: PUSH
1202: LD_EXP 15
1206: PUSH
1207: LD_INT 18
1209: ARRAY
1210: ST_TO_ADDR
// mpArtifacts := mpGameSettings [ 19 ] ;
1211: LD_ADDR_EXP 53
1215: PUSH
1216: LD_EXP 15
1220: PUSH
1221: LD_INT 19
1223: ARRAY
1224: ST_TO_ADDR
// mpTeleports := mpGameSettings [ 20 ] ;
1225: LD_ADDR_EXP 52
1229: PUSH
1230: LD_EXP 15
1234: PUSH
1235: LD_INT 20
1237: ARRAY
1238: ST_TO_ADDR
// mpApemansArea := [ Base1ApeArea , Base2ApeArea , Base3ApeArea , Base4ApeArea , Base5ApeArea , Base6ApeArea , Base7ApeArea , Base8ApeArea ] ;
1239: LD_ADDR_EXP 40
1243: PUSH
1244: LD_INT 7
1246: PUSH
1247: LD_INT 8
1249: PUSH
1250: LD_INT 9
1252: PUSH
1253: LD_INT 10
1255: PUSH
1256: LD_INT 11
1258: PUSH
1259: LD_INT 12
1261: PUSH
1262: LD_INT 13
1264: PUSH
1265: LD_INT 14
1267: PUSH
1268: EMPTY
1269: LIST
1270: LIST
1271: LIST
1272: LIST
1273: LIST
1274: LIST
1275: LIST
1276: LIST
1277: ST_TO_ADDR
// startPos := [ GetBuildingFromArea ( depotArea1 , 0 ) , GetBuildingFromArea ( depotArea2 , 1 ) , GetBuildingFromArea ( depotArea3 , 1 ) , GetBuildingFromArea ( depotArea4 , 2 ) , GetBuildingFromArea ( depotArea5 , 3 ) , GetBuildingFromArea ( depotArea6 , 4 ) , GetBuildingFromArea ( depotArea7 , 4 ) , GetBuildingFromArea ( depotArea8 , 5 ) ] ;
1278: LD_ADDR_VAR 0 7
1282: PUSH
1283: LD_INT 15
1285: PPUSH
1286: LD_INT 0
1288: PPUSH
1289: CALL 63341 0 2
1293: PUSH
1294: LD_INT 16
1296: PPUSH
1297: LD_INT 1
1299: PPUSH
1300: CALL 63341 0 2
1304: PUSH
1305: LD_INT 17
1307: PPUSH
1308: LD_INT 1
1310: PPUSH
1311: CALL 63341 0 2
1315: PUSH
1316: LD_INT 18
1318: PPUSH
1319: LD_INT 2
1321: PPUSH
1322: CALL 63341 0 2
1326: PUSH
1327: LD_INT 19
1329: PPUSH
1330: LD_INT 3
1332: PPUSH
1333: CALL 63341 0 2
1337: PUSH
1338: LD_INT 20
1340: PPUSH
1341: LD_INT 4
1343: PPUSH
1344: CALL 63341 0 2
1348: PUSH
1349: LD_INT 21
1351: PPUSH
1352: LD_INT 4
1354: PPUSH
1355: CALL 63341 0 2
1359: PUSH
1360: LD_INT 22
1362: PPUSH
1363: LD_INT 5
1365: PPUSH
1366: CALL 63341 0 2
1370: PUSH
1371: EMPTY
1372: LIST
1373: LIST
1374: LIST
1375: LIST
1376: LIST
1377: LIST
1378: LIST
1379: LIST
1380: ST_TO_ADDR
// for i := 1 to Count ( startPos ) do
1381: LD_ADDR_VAR 0 3
1385: PUSH
1386: DOUBLE
1387: LD_INT 1
1389: DEC
1390: ST_TO_ADDR
1391: LD_VAR 0 7
1395: PPUSH
1396: CALL 23187 0 1
1400: PUSH
1401: FOR_TO
1402: IFFALSE 1506
// mpStartPos := Replace ( mpStartPos , i , [ ShiftX ( startPos [ i ] [ 1 ] , startPos [ i ] [ 3 ] , 10 ) , ShiftY ( startPos [ i ] [ 2 ] , startPos [ i ] [ 3 ] , 10 ) ] ) ;
1404: LD_ADDR_EXP 30
1408: PUSH
1409: LD_EXP 30
1413: PPUSH
1414: LD_VAR 0 3
1418: PPUSH
1419: LD_VAR 0 7
1423: PUSH
1424: LD_VAR 0 3
1428: ARRAY
1429: PUSH
1430: LD_INT 1
1432: ARRAY
1433: PPUSH
1434: LD_VAR 0 7
1438: PUSH
1439: LD_VAR 0 3
1443: ARRAY
1444: PUSH
1445: LD_INT 3
1447: ARRAY
1448: PPUSH
1449: LD_INT 10
1451: PPUSH
1452: CALL_OW 272
1456: PUSH
1457: LD_VAR 0 7
1461: PUSH
1462: LD_VAR 0 3
1466: ARRAY
1467: PUSH
1468: LD_INT 2
1470: ARRAY
1471: PPUSH
1472: LD_VAR 0 7
1476: PUSH
1477: LD_VAR 0 3
1481: ARRAY
1482: PUSH
1483: LD_INT 3
1485: ARRAY
1486: PPUSH
1487: LD_INT 10
1489: PPUSH
1490: CALL_OW 273
1494: PUSH
1495: EMPTY
1496: LIST
1497: LIST
1498: PPUSH
1499: CALL_OW 1
1503: ST_TO_ADDR
1504: GO 1401
1506: POP
1507: POP
// if mpGameType = GameTypeFamine then
1508: LD_EXP 12
1512: PUSH
1513: LD_INT 5
1515: EQUAL
1516: IFFALSE 1626
// begin FamineDeposits ( [ oilBasicArea , oilMediumArea , oilHardArea ] , [ 3 * depositsValue , 5 * depositsValue , 15 * depositsValue ] , mat_oil ) ;
1518: LD_INT 44
1520: PUSH
1521: LD_INT 46
1523: PUSH
1524: LD_INT 48
1526: PUSH
1527: EMPTY
1528: LIST
1529: LIST
1530: LIST
1531: PPUSH
1532: LD_INT 3
1534: PUSH
1535: LD_VAR 0 6
1539: MUL
1540: PUSH
1541: LD_INT 5
1543: PUSH
1544: LD_VAR 0 6
1548: MUL
1549: PUSH
1550: LD_INT 15
1552: PUSH
1553: LD_VAR 0 6
1557: MUL
1558: PUSH
1559: EMPTY
1560: LIST
1561: LIST
1562: LIST
1563: PPUSH
1564: LD_INT 2
1566: PPUSH
1567: CALL 64209 0 3
// FamineDeposits ( [ sibBasicArea , sibMediumArea , sibHardArea ] , [ 1 * depositsValue , 2.5 * depositsValue , 7.5 * depositsValue ] , mat_siberit ) ;
1571: LD_INT 45
1573: PUSH
1574: LD_INT 47
1576: PUSH
1577: LD_INT 49
1579: PUSH
1580: EMPTY
1581: LIST
1582: LIST
1583: LIST
1584: PPUSH
1585: LD_INT 1
1587: PUSH
1588: LD_VAR 0 6
1592: MUL
1593: PUSH
1594: LD_REAL  2.50000000000000E+0000
1597: PUSH
1598: LD_VAR 0 6
1602: MUL
1603: PUSH
1604: LD_REAL  7.50000000000000E+0000
1607: PUSH
1608: LD_VAR 0 6
1612: MUL
1613: PUSH
1614: EMPTY
1615: LIST
1616: LIST
1617: LIST
1618: PPUSH
1619: LD_INT 3
1621: PPUSH
1622: CALL 64209 0 3
// end ; if mpArtifacts then
1626: LD_EXP 53
1630: IFFALSE 1636
// InitArtifact ;
1632: CALL 2708 0 0
// for i := 1 to 8 do
1636: LD_ADDR_VAR 0 3
1640: PUSH
1641: DOUBLE
1642: LD_INT 1
1644: DEC
1645: ST_TO_ADDR
1646: LD_INT 8
1648: PUSH
1649: FOR_TO
1650: IFFALSE 1693
// for t in [ tech_SolEng , tech_SolPow ] do
1652: LD_ADDR_VAR 0 4
1656: PUSH
1657: LD_INT 45
1659: PUSH
1660: LD_INT 35
1662: PUSH
1663: EMPTY
1664: LIST
1665: LIST
1666: PUSH
1667: FOR_IN
1668: IFFALSE 1689
// SetTech ( t , i , state_disabled ) ;
1670: LD_VAR 0 4
1674: PPUSH
1675: LD_VAR 0 3
1679: PPUSH
1680: LD_INT 0
1682: PPUSH
1683: CALL_OW 322
1687: GO 1667
1689: POP
1690: POP
1691: GO 1649
1693: POP
1694: POP
// end ;
1695: LD_VAR 0 2
1699: RET
// every 0 0$2 marked mpActive do var i , j , x , phase , f , tmp , areas , areasPhase , time , normalTime , delayTime , maxTime ;
1700: GO 1702
1702: DISABLE
1703: LD_INT 0
1705: PPUSH
1706: PPUSH
1707: PPUSH
1708: PPUSH
1709: PPUSH
1710: PPUSH
1711: PPUSH
1712: PPUSH
1713: PPUSH
1714: PPUSH
1715: PPUSH
1716: PPUSH
// begin if not mpShipments then
1717: LD_EXP 36
1721: NOT
1722: IFFALSE 1726
// exit ;
1724: GO 2410
// case mpShipments of 1 :
1726: LD_EXP 36
1730: PUSH
1731: LD_INT 1
1733: DOUBLE
1734: EQUAL
1735: IFTRUE 1739
1737: GO 1774
1739: POP
// begin time := 0 0$30 ;
1740: LD_ADDR_VAR 0 9
1744: PUSH
1745: LD_INT 1050
1747: ST_TO_ADDR
// normalTime := 0 0$30 ;
1748: LD_ADDR_VAR 0 10
1752: PUSH
1753: LD_INT 1050
1755: ST_TO_ADDR
// maxTime := 1 1$20 ;
1756: LD_ADDR_VAR 0 12
1760: PUSH
1761: LD_INT 2800
1763: ST_TO_ADDR
// delayTime := 0 0$5 ;
1764: LD_ADDR_VAR 0 11
1768: PUSH
1769: LD_INT 175
1771: ST_TO_ADDR
// end ; 2 :
1772: GO 1904
1774: LD_INT 2
1776: DOUBLE
1777: EQUAL
1778: IFTRUE 1782
1780: GO 1817
1782: POP
// begin time := 0 0$25 ;
1783: LD_ADDR_VAR 0 9
1787: PUSH
1788: LD_INT 875
1790: ST_TO_ADDR
// normalTime := 0 0$25 ;
1791: LD_ADDR_VAR 0 10
1795: PUSH
1796: LD_INT 875
1798: ST_TO_ADDR
// maxTime := 1 1$10 ;
1799: LD_ADDR_VAR 0 12
1803: PUSH
1804: LD_INT 2450
1806: ST_TO_ADDR
// delayTime := 0 0$4 ;
1807: LD_ADDR_VAR 0 11
1811: PUSH
1812: LD_INT 140
1814: ST_TO_ADDR
// end ; 3 :
1815: GO 1904
1817: LD_INT 3
1819: DOUBLE
1820: EQUAL
1821: IFTRUE 1825
1823: GO 1860
1825: POP
// begin time := 0 0$20 ;
1826: LD_ADDR_VAR 0 9
1830: PUSH
1831: LD_INT 700
1833: ST_TO_ADDR
// normalTime := 0 0$20 ;
1834: LD_ADDR_VAR 0 10
1838: PUSH
1839: LD_INT 700
1841: ST_TO_ADDR
// maxTime := 1 1$00 ;
1842: LD_ADDR_VAR 0 12
1846: PUSH
1847: LD_INT 2100
1849: ST_TO_ADDR
// delayTime := 0 0$3 ;
1850: LD_ADDR_VAR 0 11
1854: PUSH
1855: LD_INT 105
1857: ST_TO_ADDR
// end ; 4 :
1858: GO 1904
1860: LD_INT 4
1862: DOUBLE
1863: EQUAL
1864: IFTRUE 1868
1866: GO 1903
1868: POP
// begin time := 0 0$15 ;
1869: LD_ADDR_VAR 0 9
1873: PUSH
1874: LD_INT 525
1876: ST_TO_ADDR
// normalTime := 0 0$15 ;
1877: LD_ADDR_VAR 0 10
1881: PUSH
1882: LD_INT 525
1884: ST_TO_ADDR
// maxTime := 0 0$55 ;
1885: LD_ADDR_VAR 0 12
1889: PUSH
1890: LD_INT 1925
1892: ST_TO_ADDR
// delayTime := 0 0$2 ;
1893: LD_ADDR_VAR 0 11
1897: PUSH
1898: LD_INT 70
1900: ST_TO_ADDR
// end ; end ;
1901: GO 1904
1903: POP
// areas := [ IslandArea1 , IslandArea2 ] ;
1904: LD_ADDR_VAR 0 7
1908: PUSH
1909: LD_INT 23
1911: PUSH
1912: LD_INT 24
1914: PUSH
1915: EMPTY
1916: LIST
1917: LIST
1918: ST_TO_ADDR
// areasPhase := [ [ ] , [ ] ] ;
1919: LD_ADDR_VAR 0 8
1923: PUSH
1924: EMPTY
1925: PUSH
1926: EMPTY
1927: PUSH
1928: EMPTY
1929: LIST
1930: LIST
1931: ST_TO_ADDR
// tmp := [ [ CR1Phase1 , CR2Phase1 , CR3Phase1 , CR4Phase1 , CR5Phase1 , CR6Phase1 , CR7Phase1 , CR8Phase1 ] , [ CR1Phase2 , CR2Phase2 , CR3Phase2 , CR4Phase2 , CR5Phase2 , CR6Phase2 , CR7Phase2 , CR8Phase2 ] ] ;
1932: LD_ADDR_VAR 0 6
1936: PUSH
1937: LD_INT 28
1939: PUSH
1940: LD_INT 29
1942: PUSH
1943: LD_INT 30
1945: PUSH
1946: LD_INT 31
1948: PUSH
1949: LD_INT 32
1951: PUSH
1952: LD_INT 33
1954: PUSH
1955: LD_INT 34
1957: PUSH
1958: LD_INT 35
1960: PUSH
1961: EMPTY
1962: LIST
1963: LIST
1964: LIST
1965: LIST
1966: LIST
1967: LIST
1968: LIST
1969: LIST
1970: PUSH
1971: LD_INT 36
1973: PUSH
1974: LD_INT 37
1976: PUSH
1977: LD_INT 38
1979: PUSH
1980: LD_INT 39
1982: PUSH
1983: LD_INT 40
1985: PUSH
1986: LD_INT 41
1988: PUSH
1989: LD_INT 42
1991: PUSH
1992: LD_INT 43
1994: PUSH
1995: EMPTY
1996: LIST
1997: LIST
1998: LIST
1999: LIST
2000: LIST
2001: LIST
2002: LIST
2003: LIST
2004: PUSH
2005: EMPTY
2006: LIST
2007: LIST
2008: ST_TO_ADDR
// for i := 1 to 8 do
2009: LD_ADDR_VAR 0 1
2013: PUSH
2014: DOUBLE
2015: LD_INT 1
2017: DEC
2018: ST_TO_ADDR
2019: LD_INT 8
2021: PUSH
2022: FOR_TO
2023: IFFALSE 2136
// begin if not mpSidePositions [ i ] then
2025: LD_EXP 16
2029: PUSH
2030: LD_VAR 0 1
2034: ARRAY
2035: NOT
2036: IFFALSE 2040
// continue ;
2038: GO 2022
// for j := 1 to 2 do
2040: LD_ADDR_VAR 0 2
2044: PUSH
2045: DOUBLE
2046: LD_INT 1
2048: DEC
2049: ST_TO_ADDR
2050: LD_INT 2
2052: PUSH
2053: FOR_TO
2054: IFFALSE 2132
// areasPhase := Replace ( areasPhase , j , Replace ( areasPhase [ j ] , areasPhase [ j ] + 1 , tmp [ j ] [ mpSidePositions [ i ] ] ) ) ;
2056: LD_ADDR_VAR 0 8
2060: PUSH
2061: LD_VAR 0 8
2065: PPUSH
2066: LD_VAR 0 2
2070: PPUSH
2071: LD_VAR 0 8
2075: PUSH
2076: LD_VAR 0 2
2080: ARRAY
2081: PPUSH
2082: LD_VAR 0 8
2086: PUSH
2087: LD_VAR 0 2
2091: ARRAY
2092: PUSH
2093: LD_INT 1
2095: PLUS
2096: PPUSH
2097: LD_VAR 0 6
2101: PUSH
2102: LD_VAR 0 2
2106: ARRAY
2107: PUSH
2108: LD_EXP 16
2112: PUSH
2113: LD_VAR 0 1
2117: ARRAY
2118: ARRAY
2119: PPUSH
2120: CALL_OW 1
2124: PPUSH
2125: CALL_OW 1
2129: ST_TO_ADDR
2130: GO 2053
2132: POP
2133: POP
// end ;
2134: GO 2022
2136: POP
2137: POP
// x := 1 ;
2138: LD_ADDR_VAR 0 3
2142: PUSH
2143: LD_INT 1
2145: ST_TO_ADDR
// phase := 1 ;
2146: LD_ADDR_VAR 0 4
2150: PUSH
2151: LD_INT 1
2153: ST_TO_ADDR
// repeat wait ( time ) ;
2154: LD_VAR 0 9
2158: PPUSH
2159: CALL_OW 67
// x := Inc ( x ) ;
2163: LD_ADDR_VAR 0 3
2167: PUSH
2168: LD_VAR 0 3
2172: PPUSH
2173: CALL 60157 0 1
2177: ST_TO_ADDR
// f := Inc ( f ) ;
2178: LD_ADDR_VAR 0 5
2182: PUSH
2183: LD_VAR 0 5
2187: PPUSH
2188: CALL 60157 0 1
2192: ST_TO_ADDR
// if x > 5 then
2193: LD_VAR 0 3
2197: PUSH
2198: LD_INT 5
2200: GREATER
2201: IFFALSE 2211
// x := 1 ;
2203: LD_ADDR_VAR 0 3
2207: PUSH
2208: LD_INT 1
2210: ST_TO_ADDR
// if f mod 20 = 0 then
2211: LD_VAR 0 5
2215: PUSH
2216: LD_INT 20
2218: MOD
2219: PUSH
2220: LD_INT 0
2222: EQUAL
2223: IFFALSE 2240
// phase := Inc ( phase ) ;
2225: LD_ADDR_VAR 0 4
2229: PUSH
2230: LD_VAR 0 4
2234: PPUSH
2235: CALL 60157 0 1
2239: ST_TO_ADDR
// if phase > 2 then
2240: LD_VAR 0 4
2244: PUSH
2245: LD_INT 2
2247: GREATER
2248: IFFALSE 2258
// phase := 1 ;
2250: LD_ADDR_VAR 0 4
2254: PUSH
2255: LD_INT 1
2257: ST_TO_ADDR
// for i in areas do
2258: LD_ADDR_VAR 0 1
2262: PUSH
2263: LD_VAR 0 7
2267: PUSH
2268: FOR_IN
2269: IFFALSE 2308
// begin if GetResourceArea ( i , mat_cans ) < 30 then
2271: LD_VAR 0 1
2275: PPUSH
2276: LD_INT 1
2278: PPUSH
2279: CALL_OW 287
2283: PUSH
2284: LD_INT 30
2286: LESS
2287: IFFALSE 2306
// begin CreateCratesArea ( x , i , true ) ;
2289: LD_VAR 0 3
2293: PPUSH
2294: LD_VAR 0 1
2298: PPUSH
2299: LD_INT 1
2301: PPUSH
2302: CALL_OW 55
// end ; end ;
2306: GO 2268
2308: POP
2309: POP
// for i in areasPhase [ phase ] do
2310: LD_ADDR_VAR 0 1
2314: PUSH
2315: LD_VAR 0 8
2319: PUSH
2320: LD_VAR 0 4
2324: ARRAY
2325: PUSH
2326: FOR_IN
2327: IFFALSE 2366
// begin if GetResourceArea ( i , mat_cans ) < 20 then
2329: LD_VAR 0 1
2333: PPUSH
2334: LD_INT 1
2336: PPUSH
2337: CALL_OW 287
2341: PUSH
2342: LD_INT 20
2344: LESS
2345: IFFALSE 2364
// begin CreateCratesArea ( x , i , true ) ;
2347: LD_VAR 0 3
2351: PPUSH
2352: LD_VAR 0 1
2356: PPUSH
2357: LD_INT 1
2359: PPUSH
2360: CALL_OW 55
// end ; end ;
2364: GO 2326
2366: POP
2367: POP
// time := time + delayTime ;
2368: LD_ADDR_VAR 0 9
2372: PUSH
2373: LD_VAR 0 9
2377: PUSH
2378: LD_VAR 0 11
2382: PLUS
2383: ST_TO_ADDR
// if time > maxTime then
2384: LD_VAR 0 9
2388: PUSH
2389: LD_VAR 0 12
2393: GREATER
2394: IFFALSE 2406
// time := normalTime ;
2396: LD_ADDR_VAR 0 9
2400: PUSH
2401: LD_VAR 0 10
2405: ST_TO_ADDR
// until false ;
2406: LD_INT 0
2408: IFFALSE 2154
// end ;
2410: PPOPN 12
2412: END
// every 0 0$2 trigger mpTeleports do var i , tmp ;
2413: LD_EXP 52
2417: IFFALSE 2567
2419: GO 2421
2421: DISABLE
2422: LD_INT 0
2424: PPUSH
2425: PPUSH
// begin enable ;
2426: ENABLE
// tmp := [ [ T1TeleportArea , T4TeleportExitArea ] , [ T2TeleportArea , T3TeleportExitArea ] , [ T3TeleportArea , T2TeleportExitArea ] , [ T4TeleportArea , T1TeleportExitArea ] , [ T5TeleportArea , T6TeleportExitArea ] , [ T6TeleportArea , T5TeleportExitArea ] ] ;
2427: LD_ADDR_VAR 0 2
2431: PUSH
2432: LD_INT 1
2434: PUSH
2435: LD_INT 53
2437: PUSH
2438: EMPTY
2439: LIST
2440: LIST
2441: PUSH
2442: LD_INT 2
2444: PUSH
2445: LD_INT 52
2447: PUSH
2448: EMPTY
2449: LIST
2450: LIST
2451: PUSH
2452: LD_INT 3
2454: PUSH
2455: LD_INT 51
2457: PUSH
2458: EMPTY
2459: LIST
2460: LIST
2461: PUSH
2462: LD_INT 4
2464: PUSH
2465: LD_INT 50
2467: PUSH
2468: EMPTY
2469: LIST
2470: LIST
2471: PUSH
2472: LD_INT 5
2474: PUSH
2475: LD_INT 55
2477: PUSH
2478: EMPTY
2479: LIST
2480: LIST
2481: PUSH
2482: LD_INT 6
2484: PUSH
2485: LD_INT 54
2487: PUSH
2488: EMPTY
2489: LIST
2490: LIST
2491: PUSH
2492: EMPTY
2493: LIST
2494: LIST
2495: LIST
2496: LIST
2497: LIST
2498: LIST
2499: ST_TO_ADDR
// for i in tmp do
2500: LD_ADDR_VAR 0 1
2504: PUSH
2505: LD_VAR 0 2
2509: PUSH
2510: FOR_IN
2511: IFFALSE 2565
// CheckBuildUpArea ( i [ 1 ] , i [ 2 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) ;
2513: LD_VAR 0 1
2517: PUSH
2518: LD_INT 1
2520: ARRAY
2521: PPUSH
2522: LD_VAR 0 1
2526: PUSH
2527: LD_INT 2
2529: ARRAY
2530: PPUSH
2531: LD_INT 2
2533: PUSH
2534: LD_INT 21
2536: PUSH
2537: LD_INT 1
2539: PUSH
2540: EMPTY
2541: LIST
2542: LIST
2543: PUSH
2544: LD_INT 21
2546: PUSH
2547: LD_INT 2
2549: PUSH
2550: EMPTY
2551: LIST
2552: LIST
2553: PUSH
2554: EMPTY
2555: LIST
2556: LIST
2557: LIST
2558: PPUSH
2559: CALL_OW 513
2563: GO 2510
2565: POP
2566: POP
// end ; end_of_file
2567: PPOPN 2
2569: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
2570: LD_VAR 0 1
2574: PPUSH
2575: CALL 15637 0 1
// Multiplayer_UnitDestroyed ( un ) ;
2579: LD_VAR 0 1
2583: PPUSH
2584: CALL 11117 0 1
// end ;
2588: PPOPN 1
2590: END
// on UnitKamikazed ( un ) do begin SOS_UnitKamikazed ( un ) ;
2591: LD_VAR 0 1
2595: PPUSH
2596: CALL 15654 0 1
// end ;
2600: PPOPN 1
2602: END
// on BuildingComplete ( b ) do Multiplayer_BuildingComplete ( b ) ;
2603: LD_VAR 0 1
2607: PPUSH
2608: CALL 11782 0 1
2612: PPOPN 1
2614: END
// on VehicleConstructed ( vehicle , factory ) do SOS_VehicleConstructed ( vehicle , factory ) ;
2615: LD_VAR 0 1
2619: PPUSH
2620: LD_VAR 0 2
2624: PPUSH
2625: CALL 15695 0 2
2629: PPOPN 2
2631: END
// on BuildingCaptured ( building , oldSide , unit ) do Multiplayer_BuildingCaptured ( building , oldSide , unit ) ;
2632: LD_VAR 0 1
2636: PPUSH
2637: LD_VAR 0 2
2641: PPUSH
2642: LD_VAR 0 3
2646: PPUSH
2647: CALL 11835 0 3
2651: PPOPN 3
2653: END
// on OilExtracted ( building , side , base , amount ) do Multiplayer_OilExtracted ( building , side , base , amount ) ;
2654: LD_VAR 0 1
2658: PPUSH
2659: LD_VAR 0 2
2663: PPUSH
2664: LD_VAR 0 3
2668: PPUSH
2669: LD_VAR 0 4
2673: PPUSH
2674: CALL 11984 0 4
2678: PPOPN 4
2680: END
// on SibExtracted ( building , side , base , amount ) do Multiplayer_SibExtracted ( building , side , base , amount ) ; end_of_file
2681: LD_VAR 0 1
2685: PPUSH
2686: LD_VAR 0 2
2690: PPUSH
2691: LD_VAR 0 3
2695: PPUSH
2696: LD_VAR 0 4
2700: PPUSH
2701: CALL 12220 0 4
2705: PPOPN 4
2707: END
// export artifactsPos , artifactsRecharge , artifactsSibCost , artifactsResearched , artifactsReady ; export artifactsResDifficulty , artifactsResProgress , artifactsButtons , artifactsLabsWorking ; export function InitArtifact ; var i ; begin
2708: LD_INT 0
2710: PPUSH
2711: PPUSH
// for i := 1 to 8 do
2712: LD_ADDR_VAR 0 2
2716: PUSH
2717: DOUBLE
2718: LD_INT 1
2720: DEC
2721: ST_TO_ADDR
2722: LD_INT 8
2724: PUSH
2725: FOR_TO
2726: IFFALSE 2742
// SetArtifactRes ( i , true ) ;
2728: LD_VAR 0 2
2732: PPUSH
2733: LD_INT 1
2735: PPUSH
2736: CALL_OW 467
2740: GO 2725
2742: POP
2743: POP
// CreateResourcesArea ( mat_artifact , 3 , ArtifactArea1 , false ) ;
2744: LD_INT 4
2746: PPUSH
2747: LD_INT 3
2749: PPUSH
2750: LD_INT 25
2752: PPUSH
2753: LD_INT 0
2755: PPUSH
2756: CALL_OW 59
// CreateResourcesArea ( mat_artifact , 4 , ArtifactArea2 , false ) ;
2760: LD_INT 4
2762: PPUSH
2763: LD_INT 4
2765: PPUSH
2766: LD_INT 26
2768: PPUSH
2769: LD_INT 0
2771: PPUSH
2772: CALL_OW 59
// CreateResourcesArea ( mat_artifact , 5 , ArtifactArea3 , false ) ;
2776: LD_INT 4
2778: PPUSH
2779: LD_INT 5
2781: PPUSH
2782: LD_INT 27
2784: PPUSH
2785: LD_INT 0
2787: PPUSH
2788: CALL_OW 59
// artifactsPos := [ [ ] , [ ] , [ ] ] ;
2792: LD_ADDR_EXP 3
2796: PUSH
2797: EMPTY
2798: PUSH
2799: EMPTY
2800: PUSH
2801: EMPTY
2802: PUSH
2803: EMPTY
2804: LIST
2805: LIST
2806: LIST
2807: ST_TO_ADDR
// artifactsRecharge := [ 0 0$30 , 1 1$20 , 5 5$00 ] ;
2808: LD_ADDR_EXP 4
2812: PUSH
2813: LD_INT 1050
2815: PUSH
2816: LD_INT 2800
2818: PUSH
2819: LD_INT 10500
2821: PUSH
2822: EMPTY
2823: LIST
2824: LIST
2825: LIST
2826: ST_TO_ADDR
// artifactsSibCost := [ 10 , 35 , 100 ] ;
2827: LD_ADDR_EXP 5
2831: PUSH
2832: LD_INT 10
2834: PUSH
2835: LD_INT 35
2837: PUSH
2838: LD_INT 100
2840: PUSH
2841: EMPTY
2842: LIST
2843: LIST
2844: LIST
2845: ST_TO_ADDR
// artifactsResDifficulty := [ 300 , 500 , 800 ] ;
2846: LD_ADDR_EXP 8
2850: PUSH
2851: LD_INT 300
2853: PUSH
2854: LD_INT 500
2856: PUSH
2857: LD_INT 800
2859: PUSH
2860: EMPTY
2861: LIST
2862: LIST
2863: LIST
2864: ST_TO_ADDR
// artifactsLabsWorking := [ [ ] , [ ] , [ ] ] ;
2865: LD_ADDR_EXP 11
2869: PUSH
2870: EMPTY
2871: PUSH
2872: EMPTY
2873: PUSH
2874: EMPTY
2875: PUSH
2876: EMPTY
2877: LIST
2878: LIST
2879: LIST
2880: ST_TO_ADDR
// artifactsResearched := [ [ 0 , 0 , 0 ] , [ 0 , 0 , 0 ] , [ 0 , 0 , 0 ] , [ 0 , 0 , 0 ] , [ 0 , 0 , 0 ] , [ 0 , 0 , 0 ] , [ 0 , 0 , 0 ] , [ 0 , 0 , 0 ] ] ;
2881: LD_ADDR_EXP 6
2885: PUSH
2886: LD_INT 0
2888: PUSH
2889: LD_INT 0
2891: PUSH
2892: LD_INT 0
2894: PUSH
2895: EMPTY
2896: LIST
2897: LIST
2898: LIST
2899: PUSH
2900: LD_INT 0
2902: PUSH
2903: LD_INT 0
2905: PUSH
2906: LD_INT 0
2908: PUSH
2909: EMPTY
2910: LIST
2911: LIST
2912: LIST
2913: PUSH
2914: LD_INT 0
2916: PUSH
2917: LD_INT 0
2919: PUSH
2920: LD_INT 0
2922: PUSH
2923: EMPTY
2924: LIST
2925: LIST
2926: LIST
2927: PUSH
2928: LD_INT 0
2930: PUSH
2931: LD_INT 0
2933: PUSH
2934: LD_INT 0
2936: PUSH
2937: EMPTY
2938: LIST
2939: LIST
2940: LIST
2941: PUSH
2942: LD_INT 0
2944: PUSH
2945: LD_INT 0
2947: PUSH
2948: LD_INT 0
2950: PUSH
2951: EMPTY
2952: LIST
2953: LIST
2954: LIST
2955: PUSH
2956: LD_INT 0
2958: PUSH
2959: LD_INT 0
2961: PUSH
2962: LD_INT 0
2964: PUSH
2965: EMPTY
2966: LIST
2967: LIST
2968: LIST
2969: PUSH
2970: LD_INT 0
2972: PUSH
2973: LD_INT 0
2975: PUSH
2976: LD_INT 0
2978: PUSH
2979: EMPTY
2980: LIST
2981: LIST
2982: LIST
2983: PUSH
2984: LD_INT 0
2986: PUSH
2987: LD_INT 0
2989: PUSH
2990: LD_INT 0
2992: PUSH
2993: EMPTY
2994: LIST
2995: LIST
2996: LIST
2997: PUSH
2998: EMPTY
2999: LIST
3000: LIST
3001: LIST
3002: LIST
3003: LIST
3004: LIST
3005: LIST
3006: LIST
3007: ST_TO_ADDR
// artifactsResProgress := [ [ 0 , 0 , 0 ] , [ 0 , 0 , 0 ] , [ 0 , 0 , 0 ] , [ 0 , 0 , 0 ] , [ 0 , 0 , 0 ] , [ 0 , 0 , 0 ] , [ 0 , 0 , 0 ] , [ 0 , 0 , 0 ] ] ;
3008: LD_ADDR_EXP 9
3012: PUSH
3013: LD_INT 0
3015: PUSH
3016: LD_INT 0
3018: PUSH
3019: LD_INT 0
3021: PUSH
3022: EMPTY
3023: LIST
3024: LIST
3025: LIST
3026: PUSH
3027: LD_INT 0
3029: PUSH
3030: LD_INT 0
3032: PUSH
3033: LD_INT 0
3035: PUSH
3036: EMPTY
3037: LIST
3038: LIST
3039: LIST
3040: PUSH
3041: LD_INT 0
3043: PUSH
3044: LD_INT 0
3046: PUSH
3047: LD_INT 0
3049: PUSH
3050: EMPTY
3051: LIST
3052: LIST
3053: LIST
3054: PUSH
3055: LD_INT 0
3057: PUSH
3058: LD_INT 0
3060: PUSH
3061: LD_INT 0
3063: PUSH
3064: EMPTY
3065: LIST
3066: LIST
3067: LIST
3068: PUSH
3069: LD_INT 0
3071: PUSH
3072: LD_INT 0
3074: PUSH
3075: LD_INT 0
3077: PUSH
3078: EMPTY
3079: LIST
3080: LIST
3081: LIST
3082: PUSH
3083: LD_INT 0
3085: PUSH
3086: LD_INT 0
3088: PUSH
3089: LD_INT 0
3091: PUSH
3092: EMPTY
3093: LIST
3094: LIST
3095: LIST
3096: PUSH
3097: LD_INT 0
3099: PUSH
3100: LD_INT 0
3102: PUSH
3103: LD_INT 0
3105: PUSH
3106: EMPTY
3107: LIST
3108: LIST
3109: LIST
3110: PUSH
3111: LD_INT 0
3113: PUSH
3114: LD_INT 0
3116: PUSH
3117: LD_INT 0
3119: PUSH
3120: EMPTY
3121: LIST
3122: LIST
3123: LIST
3124: PUSH
3125: EMPTY
3126: LIST
3127: LIST
3128: LIST
3129: LIST
3130: LIST
3131: LIST
3132: LIST
3133: LIST
3134: ST_TO_ADDR
// artifactsReady := [ [ 0 , 0 , 0 ] , [ 0 , 0 , 0 ] , [ 0 , 0 , 0 ] , [ 0 , 0 , 0 ] , [ 0 , 0 , 0 ] , [ 0 , 0 , 0 ] , [ 0 , 0 , 0 ] , [ 0 , 0 , 0 ] ] ;
3135: LD_ADDR_EXP 7
3139: PUSH
3140: LD_INT 0
3142: PUSH
3143: LD_INT 0
3145: PUSH
3146: LD_INT 0
3148: PUSH
3149: EMPTY
3150: LIST
3151: LIST
3152: LIST
3153: PUSH
3154: LD_INT 0
3156: PUSH
3157: LD_INT 0
3159: PUSH
3160: LD_INT 0
3162: PUSH
3163: EMPTY
3164: LIST
3165: LIST
3166: LIST
3167: PUSH
3168: LD_INT 0
3170: PUSH
3171: LD_INT 0
3173: PUSH
3174: LD_INT 0
3176: PUSH
3177: EMPTY
3178: LIST
3179: LIST
3180: LIST
3181: PUSH
3182: LD_INT 0
3184: PUSH
3185: LD_INT 0
3187: PUSH
3188: LD_INT 0
3190: PUSH
3191: EMPTY
3192: LIST
3193: LIST
3194: LIST
3195: PUSH
3196: LD_INT 0
3198: PUSH
3199: LD_INT 0
3201: PUSH
3202: LD_INT 0
3204: PUSH
3205: EMPTY
3206: LIST
3207: LIST
3208: LIST
3209: PUSH
3210: LD_INT 0
3212: PUSH
3213: LD_INT 0
3215: PUSH
3216: LD_INT 0
3218: PUSH
3219: EMPTY
3220: LIST
3221: LIST
3222: LIST
3223: PUSH
3224: LD_INT 0
3226: PUSH
3227: LD_INT 0
3229: PUSH
3230: LD_INT 0
3232: PUSH
3233: EMPTY
3234: LIST
3235: LIST
3236: LIST
3237: PUSH
3238: LD_INT 0
3240: PUSH
3241: LD_INT 0
3243: PUSH
3244: LD_INT 0
3246: PUSH
3247: EMPTY
3248: LIST
3249: LIST
3250: LIST
3251: PUSH
3252: EMPTY
3253: LIST
3254: LIST
3255: LIST
3256: LIST
3257: LIST
3258: LIST
3259: LIST
3260: LIST
3261: ST_TO_ADDR
// artifactsButtons := [ [ art_use_eye , art_place , art_exp_left ] , [ art_use_sibexplosion , art_unit , art_exp_mid ] , [ art_use_atom , art_place , art_exp_right ] ] ;
3262: LD_ADDR_EXP 10
3266: PUSH
3267: LD_INT 4
3269: PUSH
3270: LD_INT 3
3272: PUSH
3273: LD_INT 1
3275: PUSH
3276: EMPTY
3277: LIST
3278: LIST
3279: LIST
3280: PUSH
3281: LD_INT 5
3283: PUSH
3284: LD_INT 4
3286: PUSH
3287: LD_INT 2
3289: PUSH
3290: EMPTY
3291: LIST
3292: LIST
3293: LIST
3294: PUSH
3295: LD_INT 7
3297: PUSH
3298: LD_INT 3
3300: PUSH
3301: LD_INT 3
3303: PUSH
3304: EMPTY
3305: LIST
3306: LIST
3307: LIST
3308: PUSH
3309: EMPTY
3310: LIST
3311: LIST
3312: LIST
3313: ST_TO_ADDR
// end ;
3314: LD_VAR 0 1
3318: RET
// function TeleportArtefact ( number , area ) ; var hex , cargo ; begin
3319: LD_INT 0
3321: PPUSH
3322: PPUSH
3323: PPUSH
// if not number in [ 3 , 4 , 5 ] then
3324: LD_VAR 0 1
3328: PUSH
3329: LD_INT 3
3331: PUSH
3332: LD_INT 4
3334: PUSH
3335: LD_INT 5
3337: PUSH
3338: EMPTY
3339: LIST
3340: LIST
3341: LIST
3342: IN
3343: NOT
3344: IFFALSE 3348
// exit ;
3346: GO 3590
// hex := FindArtifact ( number ) ;
3348: LD_ADDR_VAR 0 4
3352: PUSH
3353: LD_VAR 0 1
3357: PPUSH
3358: CALL_OW 469
3362: ST_TO_ADDR
// if hex then
3363: LD_VAR 0 4
3367: IFFALSE 3466
// begin if InArea ( hex [ 1 ] , hex [ 2 ] , area ) then
3369: LD_VAR 0 4
3373: PUSH
3374: LD_INT 1
3376: ARRAY
3377: PPUSH
3378: LD_VAR 0 4
3382: PUSH
3383: LD_INT 2
3385: ARRAY
3386: PPUSH
3387: LD_VAR 0 2
3391: PPUSH
3392: CALL_OW 309
3396: IFFALSE 3400
// exit ;
3398: GO 3590
// MoveAreaXY ( artifactTeleportArea , hex [ 1 ] , hex [ 2 ] ) ;
3400: LD_INT 56
3402: PPUSH
3403: LD_VAR 0 4
3407: PUSH
3408: LD_INT 1
3410: ARRAY
3411: PPUSH
3412: LD_VAR 0 4
3416: PUSH
3417: LD_INT 2
3419: ARRAY
3420: PPUSH
3421: CALL_OW 425
// EffectTeleport ( hex [ 1 ] , hex [ 2 ] ) ;
3425: LD_VAR 0 4
3429: PUSH
3430: LD_INT 1
3432: ARRAY
3433: PPUSH
3434: LD_VAR 0 4
3438: PUSH
3439: LD_INT 2
3441: ARRAY
3442: PPUSH
3443: CALL_OW 494
// wait ( 30 ) ;
3447: LD_INT 30
3449: PPUSH
3450: CALL_OW 67
// EraseResourceArea ( artifactTeleportArea , mat_artefact ) ;
3454: LD_INT 56
3456: PPUSH
3457: LD_INT 4
3459: PPUSH
3460: CALL_OW 286
// end else
3464: GO 3570
// begin cargo := FilterAllUnits ( [ [ f_tag , number ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
3466: LD_ADDR_VAR 0 5
3470: PUSH
3471: LD_INT 120
3473: PUSH
3474: LD_VAR 0 1
3478: PUSH
3479: EMPTY
3480: LIST
3481: LIST
3482: PUSH
3483: LD_INT 2
3485: PUSH
3486: LD_INT 34
3488: PUSH
3489: LD_INT 12
3491: PUSH
3492: EMPTY
3493: LIST
3494: LIST
3495: PUSH
3496: LD_INT 34
3498: PUSH
3499: LD_INT 32
3501: PUSH
3502: EMPTY
3503: LIST
3504: LIST
3505: PUSH
3506: LD_INT 34
3508: PUSH
3509: LD_INT 51
3511: PUSH
3512: EMPTY
3513: LIST
3514: LIST
3515: PUSH
3516: LD_INT 34
3518: PUSH
3519: LD_INT 89
3521: PUSH
3522: EMPTY
3523: LIST
3524: LIST
3525: PUSH
3526: EMPTY
3527: LIST
3528: LIST
3529: LIST
3530: LIST
3531: LIST
3532: PUSH
3533: EMPTY
3534: LIST
3535: LIST
3536: PPUSH
3537: CALL_OW 69
3541: ST_TO_ADDR
// if not cargo then
3542: LD_VAR 0 5
3546: NOT
3547: IFFALSE 3551
// exit ;
3549: GO 3590
// SetCargo ( cargo [ 1 ] , mat_artifact , 0 ) ;
3551: LD_VAR 0 5
3555: PUSH
3556: LD_INT 1
3558: ARRAY
3559: PPUSH
3560: LD_INT 4
3562: PPUSH
3563: LD_INT 0
3565: PPUSH
3566: CALL_OW 290
// end ; CreateResourcesArea ( mat_artifact , number , area , false ) ;
3570: LD_INT 4
3572: PPUSH
3573: LD_VAR 0 1
3577: PPUSH
3578: LD_VAR 0 2
3582: PPUSH
3583: LD_INT 0
3585: PPUSH
3586: CALL_OW 59
// end ;
3590: LD_VAR 0 3
3594: RET
// every 8 8$30 trigger mpArtifacts do
3595: LD_EXP 53
3599: IFFALSE 3615
3601: GO 3603
3603: DISABLE
// begin enable ;
3604: ENABLE
// TeleportArtefact ( 3 , ArtifactArea1 ) ;
3605: LD_INT 3
3607: PPUSH
3608: LD_INT 25
3610: PPUSH
3611: CALL 3319 0 2
// end ;
3615: END
// every 6 6$10 trigger mpArtifacts do
3616: LD_EXP 53
3620: IFFALSE 3636
3622: GO 3624
3624: DISABLE
// begin enable ;
3625: ENABLE
// TeleportArtefact ( 4 , ArtifactArea2 ) ;
3626: LD_INT 4
3628: PPUSH
3629: LD_INT 26
3631: PPUSH
3632: CALL 3319 0 2
// end ;
3636: END
// every 4 4$10 trigger mpArtifacts do
3637: LD_EXP 53
3641: IFFALSE 3657
3643: GO 3645
3645: DISABLE
// begin enable ;
3646: ENABLE
// TeleportArtefact ( 5 , ArtifactArea3 ) ;
3647: LD_INT 5
3649: PPUSH
3650: LD_INT 27
3652: PPUSH
3653: CALL 3319 0 2
// end ;
3657: END
// every 0 0$1 trigger mpArtifacts do var i , pos , j , side , labs , nearestLab ;
3658: LD_EXP 53
3662: IFFALSE 4519
3664: GO 3666
3666: DISABLE
3667: LD_INT 0
3669: PPUSH
3670: PPUSH
3671: PPUSH
3672: PPUSH
3673: PPUSH
3674: PPUSH
// begin enable ;
3675: ENABLE
// for i := 1 to 3 do
3676: LD_ADDR_VAR 0 1
3680: PUSH
3681: DOUBLE
3682: LD_INT 1
3684: DEC
3685: ST_TO_ADDR
3686: LD_INT 3
3688: PUSH
3689: FOR_TO
3690: IFFALSE 4517
// begin pos := FindArtifact ( i + 2 ) ;
3692: LD_ADDR_VAR 0 2
3696: PUSH
3697: LD_VAR 0 1
3701: PUSH
3702: LD_INT 2
3704: PLUS
3705: PPUSH
3706: CALL_OW 469
3710: ST_TO_ADDR
// artifactsPos := Replace ( artifactsPos , i , pos ) ;
3711: LD_ADDR_EXP 3
3715: PUSH
3716: LD_EXP 3
3720: PPUSH
3721: LD_VAR 0 1
3725: PPUSH
3726: LD_VAR 0 2
3730: PPUSH
3731: CALL_OW 1
3735: ST_TO_ADDR
// labs := FilterAllUnits ( [ f_lab , b_lab_siberium ] ) ;
3736: LD_ADDR_VAR 0 5
3740: PUSH
3741: LD_INT 63
3743: PUSH
3744: LD_INT 11
3746: PUSH
3747: EMPTY
3748: LIST
3749: LIST
3750: PPUSH
3751: CALL_OW 69
3755: ST_TO_ADDR
// if not labs then
3756: LD_VAR 0 5
3760: NOT
3761: IFFALSE 3767
// exit ;
3763: POP
3764: POP
3765: GO 4519
// if pos then
3767: LD_VAR 0 2
3771: IFFALSE 4355
// begin if not labs then
3773: LD_VAR 0 5
3777: NOT
3778: IFFALSE 3782
// continue ;
3780: GO 3689
// nearestLab := NearestUnitToXY ( labs , artifactsPos [ i ] [ 1 ] , artifactsPos [ i ] [ 2 ] ) ;
3782: LD_ADDR_VAR 0 6
3786: PUSH
3787: LD_VAR 0 5
3791: PPUSH
3792: LD_EXP 3
3796: PUSH
3797: LD_VAR 0 1
3801: ARRAY
3802: PUSH
3803: LD_INT 1
3805: ARRAY
3806: PPUSH
3807: LD_EXP 3
3811: PUSH
3812: LD_VAR 0 1
3816: ARRAY
3817: PUSH
3818: LD_INT 2
3820: ARRAY
3821: PPUSH
3822: CALL_OW 73
3826: ST_TO_ADDR
// if not nearestLab then
3827: LD_VAR 0 6
3831: NOT
3832: IFFALSE 3932
// begin for j in labs do
3834: LD_ADDR_VAR 0 3
3838: PUSH
3839: LD_VAR 0 5
3843: PUSH
3844: FOR_IN
3845: IFFALSE 3928
// begin side := GetSide ( j ) ;
3847: LD_ADDR_VAR 0 4
3851: PUSH
3852: LD_VAR 0 3
3856: PPUSH
3857: CALL_OW 255
3861: ST_TO_ADDR
// SetArtifactUse ( side , artifactsButtons [ i ] [ 3 ] , art_no , j ) ;
3862: LD_VAR 0 4
3866: PPUSH
3867: LD_EXP 10
3871: PUSH
3872: LD_VAR 0 1
3876: ARRAY
3877: PUSH
3878: LD_INT 3
3880: ARRAY
3881: PPUSH
3882: LD_INT 0
3884: PPUSH
3885: LD_VAR 0 3
3889: PPUSH
3890: CALL_OW 468
// SetArtifactUse ( side , artifactsButtons [ i ] [ 1 ] , art_no , j ) ;
3894: LD_VAR 0 4
3898: PPUSH
3899: LD_EXP 10
3903: PUSH
3904: LD_VAR 0 1
3908: ARRAY
3909: PUSH
3910: LD_INT 1
3912: ARRAY
3913: PPUSH
3914: LD_INT 0
3916: PPUSH
3917: LD_VAR 0 3
3921: PPUSH
3922: CALL_OW 468
// end ;
3926: GO 3844
3928: POP
3929: POP
// continue ;
3930: GO 3689
// end ; if GetDistUnitXY ( nearestLab , artifactsPos [ i ] [ 1 ] , artifactsPos [ i ] [ 2 ] ) < 8 and GetTech ( tech_artifact , GetSide ( nearestLab ) ) = state_researched then
3932: LD_VAR 0 6
3936: PPUSH
3937: LD_EXP 3
3941: PUSH
3942: LD_VAR 0 1
3946: ARRAY
3947: PUSH
3948: LD_INT 1
3950: ARRAY
3951: PPUSH
3952: LD_EXP 3
3956: PUSH
3957: LD_VAR 0 1
3961: ARRAY
3962: PUSH
3963: LD_INT 2
3965: ARRAY
3966: PPUSH
3967: CALL_OW 297
3971: PUSH
3972: LD_INT 8
3974: LESS
3975: PUSH
3976: LD_INT 24
3978: PPUSH
3979: LD_VAR 0 6
3983: PPUSH
3984: CALL_OW 255
3988: PPUSH
3989: CALL_OW 321
3993: PUSH
3994: LD_INT 2
3996: EQUAL
3997: AND
3998: IFFALSE 4230
// begin side := GetSide ( nearestLab ) ;
4000: LD_ADDR_VAR 0 4
4004: PUSH
4005: LD_VAR 0 6
4009: PPUSH
4010: CALL_OW 255
4014: ST_TO_ADDR
// if not artifactsResearched [ side ] [ i ] then
4015: LD_EXP 6
4019: PUSH
4020: LD_VAR 0 4
4024: ARRAY
4025: PUSH
4026: LD_VAR 0 1
4030: ARRAY
4031: NOT
4032: IFFALSE 4117
// begin if BuildingStatus ( nearestLab ) = bs_idle then
4034: LD_VAR 0 6
4038: PPUSH
4039: CALL_OW 461
4043: PUSH
4044: LD_INT 2
4046: EQUAL
4047: IFFALSE 4083
// SetArtifactUse ( side , artifactsButtons [ i ] [ 3 ] , art_instant , nearestLab ) else
4049: LD_VAR 0 4
4053: PPUSH
4054: LD_EXP 10
4058: PUSH
4059: LD_VAR 0 1
4063: ARRAY
4064: PUSH
4065: LD_INT 3
4067: ARRAY
4068: PPUSH
4069: LD_INT 2
4071: PPUSH
4072: LD_VAR 0 6
4076: PPUSH
4077: CALL_OW 468
4081: GO 4115
// SetArtifactUse ( side , artifactsButtons [ i ] [ 3 ] , art_gray , nearestLab ) ;
4083: LD_VAR 0 4
4087: PPUSH
4088: LD_EXP 10
4092: PUSH
4093: LD_VAR 0 1
4097: ARRAY
4098: PUSH
4099: LD_INT 3
4101: ARRAY
4102: PPUSH
4103: LD_INT 1
4105: PPUSH
4106: LD_VAR 0 6
4110: PPUSH
4111: CALL_OW 468
// end else
4115: GO 4228
// begin if BuildingStatus ( nearestLab ) = bs_idle and artifactsReady [ side ] [ i ] then
4117: LD_VAR 0 6
4121: PPUSH
4122: CALL_OW 461
4126: PUSH
4127: LD_INT 2
4129: EQUAL
4130: PUSH
4131: LD_EXP 7
4135: PUSH
4136: LD_VAR 0 4
4140: ARRAY
4141: PUSH
4142: LD_VAR 0 1
4146: ARRAY
4147: AND
4148: IFFALSE 4196
// SetArtifactUse ( side , artifactsButtons [ i ] [ 1 ] , artifactsButtons [ i ] [ 2 ] , nearestLab ) else
4150: LD_VAR 0 4
4154: PPUSH
4155: LD_EXP 10
4159: PUSH
4160: LD_VAR 0 1
4164: ARRAY
4165: PUSH
4166: LD_INT 1
4168: ARRAY
4169: PPUSH
4170: LD_EXP 10
4174: PUSH
4175: LD_VAR 0 1
4179: ARRAY
4180: PUSH
4181: LD_INT 2
4183: ARRAY
4184: PPUSH
4185: LD_VAR 0 6
4189: PPUSH
4190: CALL_OW 468
4194: GO 4228
// SetArtifactUse ( side , artifactsButtons [ i ] [ 1 ] , art_gray , nearestLab ) end ;
4196: LD_VAR 0 4
4200: PPUSH
4201: LD_EXP 10
4205: PUSH
4206: LD_VAR 0 1
4210: ARRAY
4211: PUSH
4212: LD_INT 1
4214: ARRAY
4215: PPUSH
4216: LD_INT 1
4218: PPUSH
4219: LD_VAR 0 6
4223: PPUSH
4224: CALL_OW 468
// end else
4228: GO 4353
// begin for j in labs diff nearestLab do
4230: LD_ADDR_VAR 0 3
4234: PUSH
4235: LD_VAR 0 5
4239: PUSH
4240: LD_VAR 0 6
4244: DIFF
4245: PUSH
4246: FOR_IN
4247: IFFALSE 4351
// begin side := GetSide ( j ) ;
4249: LD_ADDR_VAR 0 4
4253: PUSH
4254: LD_VAR 0 3
4258: PPUSH
4259: CALL_OW 255
4263: ST_TO_ADDR
// if not artifactsResearched [ side ] [ i ] then
4264: LD_EXP 6
4268: PUSH
4269: LD_VAR 0 4
4273: ARRAY
4274: PUSH
4275: LD_VAR 0 1
4279: ARRAY
4280: NOT
4281: IFFALSE 4317
// SetArtifactUse ( side , artifactsButtons [ i ] [ 3 ] , art_no , j ) else
4283: LD_VAR 0 4
4287: PPUSH
4288: LD_EXP 10
4292: PUSH
4293: LD_VAR 0 1
4297: ARRAY
4298: PUSH
4299: LD_INT 3
4301: ARRAY
4302: PPUSH
4303: LD_INT 0
4305: PPUSH
4306: LD_VAR 0 3
4310: PPUSH
4311: CALL_OW 468
4315: GO 4349
// SetArtifactUse ( side , artifactsButtons [ i ] [ 1 ] , art_no , j ) ;
4317: LD_VAR 0 4
4321: PPUSH
4322: LD_EXP 10
4326: PUSH
4327: LD_VAR 0 1
4331: ARRAY
4332: PUSH
4333: LD_INT 1
4335: ARRAY
4336: PPUSH
4337: LD_INT 0
4339: PPUSH
4340: LD_VAR 0 3
4344: PPUSH
4345: CALL_OW 468
// end ;
4349: GO 4246
4351: POP
4352: POP
// end ; end else
4353: GO 4515
// begin for j in labs do
4355: LD_ADDR_VAR 0 3
4359: PUSH
4360: LD_VAR 0 5
4364: PUSH
4365: FOR_IN
4366: IFFALSE 4513
// begin side := GetSide ( j ) ;
4368: LD_ADDR_VAR 0 4
4372: PUSH
4373: LD_VAR 0 3
4377: PPUSH
4378: CALL_OW 255
4382: ST_TO_ADDR
// SetArtifactUse ( side , artifactsButtons [ i ] [ 3 ] , art_no , j ) ;
4383: LD_VAR 0 4
4387: PPUSH
4388: LD_EXP 10
4392: PUSH
4393: LD_VAR 0 1
4397: ARRAY
4398: PUSH
4399: LD_INT 3
4401: ARRAY
4402: PPUSH
4403: LD_INT 0
4405: PPUSH
4406: LD_VAR 0 3
4410: PPUSH
4411: CALL_OW 468
// SetArtifactUse ( side , artifactsButtons [ i ] [ 1 ] , art_no , j ) ;
4415: LD_VAR 0 4
4419: PPUSH
4420: LD_EXP 10
4424: PUSH
4425: LD_VAR 0 1
4429: ARRAY
4430: PUSH
4431: LD_INT 1
4433: ARRAY
4434: PPUSH
4435: LD_INT 0
4437: PPUSH
4438: LD_VAR 0 3
4442: PPUSH
4443: CALL_OW 468
// if j in artifactsLabsWorking [ i ] then
4447: LD_VAR 0 3
4451: PUSH
4452: LD_EXP 11
4456: PUSH
4457: LD_VAR 0 1
4461: ARRAY
4462: IN
4463: IFFALSE 4511
// begin artifactsLabsWorking := Replace ( artifactsLabsWorking , i , artifactsLabsWorking [ i ] diff j ) ;
4465: LD_ADDR_EXP 11
4469: PUSH
4470: LD_EXP 11
4474: PPUSH
4475: LD_VAR 0 1
4479: PPUSH
4480: LD_EXP 11
4484: PUSH
4485: LD_VAR 0 1
4489: ARRAY
4490: PUSH
4491: LD_VAR 0 3
4495: DIFF
4496: PPUSH
4497: CALL_OW 1
4501: ST_TO_ADDR
// ComCancel ( j ) ;
4502: LD_VAR 0 3
4506: PPUSH
4507: CALL_OW 127
// end ; end ;
4511: GO 4365
4513: POP
4514: POP
// end ; end ;
4515: GO 3689
4517: POP
4518: POP
// end ;
4519: PPOPN 6
4521: END
// on ArtifactUsed ( side , icon , x , y ) do var i , labs , lab , base , time ;
4522: LD_INT 0
4524: PPUSH
4525: PPUSH
4526: PPUSH
4527: PPUSH
4528: PPUSH
// begin labs := FilterAllUnits ( [ [ f_side , side ] , [ f_lab , b_lab_siberium ] ] ) ;
4529: LD_ADDR_VAR 0 6
4533: PUSH
4534: LD_INT 22
4536: PUSH
4537: LD_VAR 0 1
4541: PUSH
4542: EMPTY
4543: LIST
4544: LIST
4545: PUSH
4546: LD_INT 63
4548: PUSH
4549: LD_INT 11
4551: PUSH
4552: EMPTY
4553: LIST
4554: LIST
4555: PUSH
4556: EMPTY
4557: LIST
4558: LIST
4559: PPUSH
4560: CALL_OW 69
4564: ST_TO_ADDR
// for i := 1 to 3 do
4565: LD_ADDR_VAR 0 5
4569: PUSH
4570: DOUBLE
4571: LD_INT 1
4573: DEC
4574: ST_TO_ADDR
4575: LD_INT 3
4577: PUSH
4578: FOR_TO
4579: IFFALSE 4809
// begin if icon = artifactsButtons [ i ] [ 3 ] then
4581: LD_VAR 0 2
4585: PUSH
4586: LD_EXP 10
4590: PUSH
4591: LD_VAR 0 5
4595: ARRAY
4596: PUSH
4597: LD_INT 3
4599: ARRAY
4600: EQUAL
4601: IFFALSE 4807
// begin lab := NearestUnitToXY ( labs , artifactsPos [ i ] [ 1 ] , artifactsPos [ i ] [ 2 ] ) ;
4603: LD_ADDR_VAR 0 7
4607: PUSH
4608: LD_VAR 0 6
4612: PPUSH
4613: LD_EXP 3
4617: PUSH
4618: LD_VAR 0 5
4622: ARRAY
4623: PUSH
4624: LD_INT 1
4626: ARRAY
4627: PPUSH
4628: LD_EXP 3
4632: PUSH
4633: LD_VAR 0 5
4637: ARRAY
4638: PUSH
4639: LD_INT 2
4641: ARRAY
4642: PPUSH
4643: CALL_OW 73
4647: ST_TO_ADDR
// if not lab then
4648: LD_VAR 0 7
4652: NOT
4653: IFFALSE 4657
// continue ;
4655: GO 4578
// SetSpecResearch ( lab , artifactsResDifficulty [ i ] , true ) ;
4657: LD_VAR 0 7
4661: PPUSH
4662: LD_EXP 8
4666: PUSH
4667: LD_VAR 0 5
4671: ARRAY
4672: PPUSH
4673: LD_INT 1
4675: PPUSH
4676: CALL_OW 486
// SetTag ( lab , i ) ;
4680: LD_VAR 0 7
4684: PPUSH
4685: LD_VAR 0 5
4689: PPUSH
4690: CALL_OW 109
// if artifactsResProgress [ side ] [ i ] then
4694: LD_EXP 9
4698: PUSH
4699: LD_VAR 0 1
4703: ARRAY
4704: PUSH
4705: LD_VAR 0 5
4709: ARRAY
4710: IFFALSE 4738
// SetWorkingProgress ( lab , artifactsResProgress [ side ] [ i ] ) ;
4712: LD_VAR 0 7
4716: PPUSH
4717: LD_EXP 9
4721: PUSH
4722: LD_VAR 0 1
4726: ARRAY
4727: PUSH
4728: LD_VAR 0 5
4732: ARRAY
4733: PPUSH
4734: CALL_OW 329
// artifactsLabsWorking := Replace ( artifactsLabsWorking , i , artifactsLabsWorking [ i ] union lab ) ;
4738: LD_ADDR_EXP 11
4742: PUSH
4743: LD_EXP 11
4747: PPUSH
4748: LD_VAR 0 5
4752: PPUSH
4753: LD_EXP 11
4757: PUSH
4758: LD_VAR 0 5
4762: ARRAY
4763: PUSH
4764: LD_VAR 0 7
4768: UNION
4769: PPUSH
4770: CALL_OW 1
4774: ST_TO_ADDR
// SetArtifactUse ( side , artifactsButtons [ i ] [ 3 ] , art_no , lab ) ;
4775: LD_VAR 0 1
4779: PPUSH
4780: LD_EXP 10
4784: PUSH
4785: LD_VAR 0 5
4789: ARRAY
4790: PUSH
4791: LD_INT 3
4793: ARRAY
4794: PPUSH
4795: LD_INT 0
4797: PPUSH
4798: LD_VAR 0 7
4802: PPUSH
4803: CALL_OW 468
// end ; end ;
4807: GO 4578
4809: POP
4810: POP
// if icon = artifactsButtons [ 1 ] [ 1 ] then
4811: LD_VAR 0 2
4815: PUSH
4816: LD_EXP 10
4820: PUSH
4821: LD_INT 1
4823: ARRAY
4824: PUSH
4825: LD_INT 1
4827: ARRAY
4828: EQUAL
4829: IFFALSE 5100
// begin lab := NearestUnitToXY ( labs , artifactsPos [ 1 ] [ 1 ] , artifactsPos [ 1 ] [ 2 ] ) ;
4831: LD_ADDR_VAR 0 7
4835: PUSH
4836: LD_VAR 0 6
4840: PPUSH
4841: LD_EXP 3
4845: PUSH
4846: LD_INT 1
4848: ARRAY
4849: PUSH
4850: LD_INT 1
4852: ARRAY
4853: PPUSH
4854: LD_EXP 3
4858: PUSH
4859: LD_INT 1
4861: ARRAY
4862: PUSH
4863: LD_INT 2
4865: ARRAY
4866: PPUSH
4867: CALL_OW 73
4871: ST_TO_ADDR
// base := GetBase ( lab ) ;
4872: LD_ADDR_VAR 0 8
4876: PUSH
4877: LD_VAR 0 7
4881: PPUSH
4882: CALL_OW 274
4886: ST_TO_ADDR
// if GetBaseMaterials ( GetBase ( lab ) ) [ 3 ] < artifactsSibCost [ 1 ] then
4887: LD_VAR 0 7
4891: PPUSH
4892: CALL_OW 274
4896: PPUSH
4897: CALL 59026 0 1
4901: PUSH
4902: LD_INT 3
4904: ARRAY
4905: PUSH
4906: LD_EXP 5
4910: PUSH
4911: LD_INT 1
4913: ARRAY
4914: LESS
4915: IFFALSE 4919
// begin exit ;
4917: GO 5737
// end ; SetResourceType ( base , mat_siberit , ( GetResourceType ( base , mat_siberit ) - artifactsSibCost [ 1 ] ) ) ;
4919: LD_VAR 0 8
4923: PPUSH
4924: LD_INT 3
4926: PPUSH
4927: LD_VAR 0 8
4931: PPUSH
4932: LD_INT 3
4934: PPUSH
4935: CALL_OW 275
4939: PUSH
4940: LD_EXP 5
4944: PUSH
4945: LD_INT 1
4947: ARRAY
4948: MINUS
4949: PPUSH
4950: CALL_OW 277
// artifactsReady := Replace ( artifactsReady , side , Replace ( artifactsReady [ side ] , 1 , false ) ) ;
4954: LD_ADDR_EXP 7
4958: PUSH
4959: LD_EXP 7
4963: PPUSH
4964: LD_VAR 0 1
4968: PPUSH
4969: LD_EXP 7
4973: PUSH
4974: LD_VAR 0 1
4978: ARRAY
4979: PPUSH
4980: LD_INT 1
4982: PPUSH
4983: LD_INT 0
4985: PPUSH
4986: CALL_OW 1
4990: PPUSH
4991: CALL_OW 1
4995: ST_TO_ADDR
// PlaceSeeing ( x , y , side , - 12 ) ;
4996: LD_VAR 0 3
5000: PPUSH
5001: LD_VAR 0 4
5005: PPUSH
5006: LD_VAR 0 1
5010: PPUSH
5011: LD_INT 12
5013: NEG
5014: PPUSH
5015: CALL_OW 330
// wait ( 0 0$30 ) ;
5019: LD_INT 1050
5021: PPUSH
5022: CALL_OW 67
// RemoveSeeing ( x , y , side ) ;
5026: LD_VAR 0 3
5030: PPUSH
5031: LD_VAR 0 4
5035: PPUSH
5036: LD_VAR 0 1
5040: PPUSH
5041: CALL_OW 331
// wait ( artifactsRecharge [ 1 ] ) ;
5045: LD_EXP 4
5049: PUSH
5050: LD_INT 1
5052: ARRAY
5053: PPUSH
5054: CALL_OW 67
// artifactsReady := Replace ( artifactsReady , side , Replace ( artifactsReady [ side ] , 1 , true ) ) ;
5058: LD_ADDR_EXP 7
5062: PUSH
5063: LD_EXP 7
5067: PPUSH
5068: LD_VAR 0 1
5072: PPUSH
5073: LD_EXP 7
5077: PUSH
5078: LD_VAR 0 1
5082: ARRAY
5083: PPUSH
5084: LD_INT 1
5086: PPUSH
5087: LD_INT 1
5089: PPUSH
5090: CALL_OW 1
5094: PPUSH
5095: CALL_OW 1
5099: ST_TO_ADDR
// end ; if icon = artifactsButtons [ 2 ] [ 1 ] then
5100: LD_VAR 0 2
5104: PUSH
5105: LD_EXP 10
5109: PUSH
5110: LD_INT 2
5112: ARRAY
5113: PUSH
5114: LD_INT 1
5116: ARRAY
5117: EQUAL
5118: IFFALSE 5485
// begin lab := NearestUnitToXY ( labs , artifactsPos [ 2 ] [ 1 ] , artifactsPos [ 2 ] [ 2 ] ) ;
5120: LD_ADDR_VAR 0 7
5124: PUSH
5125: LD_VAR 0 6
5129: PPUSH
5130: LD_EXP 3
5134: PUSH
5135: LD_INT 2
5137: ARRAY
5138: PUSH
5139: LD_INT 1
5141: ARRAY
5142: PPUSH
5143: LD_EXP 3
5147: PUSH
5148: LD_INT 2
5150: ARRAY
5151: PUSH
5152: LD_INT 2
5154: ARRAY
5155: PPUSH
5156: CALL_OW 73
5160: ST_TO_ADDR
// base := GetBase ( lab ) ;
5161: LD_ADDR_VAR 0 8
5165: PUSH
5166: LD_VAR 0 7
5170: PPUSH
5171: CALL_OW 274
5175: ST_TO_ADDR
// if not x in FilterAllUnits ( [ [ f_enemy , side ] , [ f_or , [ f_engine , engine_siberite ] , [ f_btype , b_siberite_power ] , [ f_btype , b_siberite_mine ] , [ f_bweapon , ru_time_lapser ] , [ f_weapon , ru_time_lapser ] , [ f_weapon , us_double_laser ] , [ f_weapon , ar_bio_bomb ] , [ f_weapon , ar_selfpropelled_bomb ] , [ f_btype , b_ext_siberium ] ] ] ) then
5176: LD_VAR 0 3
5180: PUSH
5181: LD_INT 81
5183: PUSH
5184: LD_VAR 0 1
5188: PUSH
5189: EMPTY
5190: LIST
5191: LIST
5192: PUSH
5193: LD_INT 2
5195: PUSH
5196: LD_INT 32
5198: PUSH
5199: LD_INT 3
5201: PUSH
5202: EMPTY
5203: LIST
5204: LIST
5205: PUSH
5206: LD_INT 30
5208: PUSH
5209: LD_INT 28
5211: PUSH
5212: EMPTY
5213: LIST
5214: LIST
5215: PUSH
5216: LD_INT 30
5218: PUSH
5219: LD_INT 30
5221: PUSH
5222: EMPTY
5223: LIST
5224: LIST
5225: PUSH
5226: LD_INT 35
5228: PUSH
5229: LD_INT 49
5231: PUSH
5232: EMPTY
5233: LIST
5234: LIST
5235: PUSH
5236: LD_INT 34
5238: PUSH
5239: LD_INT 49
5241: PUSH
5242: EMPTY
5243: LIST
5244: LIST
5245: PUSH
5246: LD_INT 34
5248: PUSH
5249: LD_INT 10
5251: PUSH
5252: EMPTY
5253: LIST
5254: LIST
5255: PUSH
5256: LD_INT 34
5258: PUSH
5259: LD_INT 91
5261: PUSH
5262: EMPTY
5263: LIST
5264: LIST
5265: PUSH
5266: LD_INT 34
5268: PUSH
5269: LD_INT 29
5271: PUSH
5272: EMPTY
5273: LIST
5274: LIST
5275: PUSH
5276: LD_INT 30
5278: PUSH
5279: LD_INT 21
5281: PUSH
5282: EMPTY
5283: LIST
5284: LIST
5285: PUSH
5286: EMPTY
5287: LIST
5288: LIST
5289: LIST
5290: LIST
5291: LIST
5292: LIST
5293: LIST
5294: LIST
5295: LIST
5296: LIST
5297: PUSH
5298: EMPTY
5299: LIST
5300: LIST
5301: PPUSH
5302: CALL_OW 69
5306: IN
5307: NOT
5308: IFFALSE 5312
// exit ;
5310: GO 5737
// if GetBaseMaterials ( GetBase ( lab ) ) [ 3 ] < artifactsSibCost [ 2 ] then
5312: LD_VAR 0 7
5316: PPUSH
5317: CALL_OW 274
5321: PPUSH
5322: CALL 59026 0 1
5326: PUSH
5327: LD_INT 3
5329: ARRAY
5330: PUSH
5331: LD_EXP 5
5335: PUSH
5336: LD_INT 2
5338: ARRAY
5339: LESS
5340: IFFALSE 5344
// begin exit ;
5342: GO 5737
// end ; SetResourceType ( base , mat_siberit , ( GetResourceType ( base , mat_siberit ) - artifactsSibCost [ 2 ] ) ) ;
5344: LD_VAR 0 8
5348: PPUSH
5349: LD_INT 3
5351: PPUSH
5352: LD_VAR 0 8
5356: PPUSH
5357: LD_INT 3
5359: PPUSH
5360: CALL_OW 275
5364: PUSH
5365: LD_EXP 5
5369: PUSH
5370: LD_INT 2
5372: ARRAY
5373: MINUS
5374: PPUSH
5375: CALL_OW 277
// artifactsReady := Replace ( artifactsReady , side , Replace ( artifactsReady [ side ] , 2 , false ) ) ;
5379: LD_ADDR_EXP 7
5383: PUSH
5384: LD_EXP 7
5388: PPUSH
5389: LD_VAR 0 1
5393: PPUSH
5394: LD_EXP 7
5398: PUSH
5399: LD_VAR 0 1
5403: ARRAY
5404: PPUSH
5405: LD_INT 2
5407: PPUSH
5408: LD_INT 0
5410: PPUSH
5411: CALL_OW 1
5415: PPUSH
5416: CALL_OW 1
5420: ST_TO_ADDR
// KillUnit ( x ) ;
5421: LD_VAR 0 3
5425: PPUSH
5426: CALL_OW 66
// wait ( artifactsRecharge [ 2 ] ) ;
5430: LD_EXP 4
5434: PUSH
5435: LD_INT 2
5437: ARRAY
5438: PPUSH
5439: CALL_OW 67
// artifactsReady := Replace ( artifactsReady , side , Replace ( artifactsReady [ side ] , 2 , true ) ) ;
5443: LD_ADDR_EXP 7
5447: PUSH
5448: LD_EXP 7
5452: PPUSH
5453: LD_VAR 0 1
5457: PPUSH
5458: LD_EXP 7
5462: PUSH
5463: LD_VAR 0 1
5467: ARRAY
5468: PPUSH
5469: LD_INT 2
5471: PPUSH
5472: LD_INT 1
5474: PPUSH
5475: CALL_OW 1
5479: PPUSH
5480: CALL_OW 1
5484: ST_TO_ADDR
// end ; if icon = artifactsButtons [ 3 ] [ 1 ] then
5485: LD_VAR 0 2
5489: PUSH
5490: LD_EXP 10
5494: PUSH
5495: LD_INT 3
5497: ARRAY
5498: PUSH
5499: LD_INT 1
5501: ARRAY
5502: EQUAL
5503: IFFALSE 5737
// begin lab := NearestUnitToXY ( labs , artifactsPos [ 3 ] [ 1 ] , artifactsPos [ 3 ] [ 2 ] ) ;
5505: LD_ADDR_VAR 0 7
5509: PUSH
5510: LD_VAR 0 6
5514: PPUSH
5515: LD_EXP 3
5519: PUSH
5520: LD_INT 3
5522: ARRAY
5523: PUSH
5524: LD_INT 1
5526: ARRAY
5527: PPUSH
5528: LD_EXP 3
5532: PUSH
5533: LD_INT 3
5535: ARRAY
5536: PUSH
5537: LD_INT 2
5539: ARRAY
5540: PPUSH
5541: CALL_OW 73
5545: ST_TO_ADDR
// base := GetBase ( lab ) ;
5546: LD_ADDR_VAR 0 8
5550: PUSH
5551: LD_VAR 0 7
5555: PPUSH
5556: CALL_OW 274
5560: ST_TO_ADDR
// if GetBaseMaterials ( base ) [ 3 ] < artifactsSibCost [ 3 ] then
5561: LD_VAR 0 8
5565: PPUSH
5566: CALL 59026 0 1
5570: PUSH
5571: LD_INT 3
5573: ARRAY
5574: PUSH
5575: LD_EXP 5
5579: PUSH
5580: LD_INT 3
5582: ARRAY
5583: LESS
5584: IFFALSE 5588
// begin exit ;
5586: GO 5737
// end ; SetResourceType ( base , mat_siberit , ( GetResourceType ( base , mat_siberit ) - artifactsSibCost [ 3 ] ) ) ;
5588: LD_VAR 0 8
5592: PPUSH
5593: LD_INT 3
5595: PPUSH
5596: LD_VAR 0 8
5600: PPUSH
5601: LD_INT 3
5603: PPUSH
5604: CALL_OW 275
5608: PUSH
5609: LD_EXP 5
5613: PUSH
5614: LD_INT 3
5616: ARRAY
5617: MINUS
5618: PPUSH
5619: CALL_OW 277
// artifactsReady := Replace ( artifactsReady , side , Replace ( artifactsReady [ side ] , 3 , false ) ) ;
5623: LD_ADDR_EXP 7
5627: PUSH
5628: LD_EXP 7
5632: PPUSH
5633: LD_VAR 0 1
5637: PPUSH
5638: LD_EXP 7
5642: PUSH
5643: LD_VAR 0 1
5647: ARRAY
5648: PPUSH
5649: LD_INT 3
5651: PPUSH
5652: LD_INT 0
5654: PPUSH
5655: CALL_OW 1
5659: PPUSH
5660: CALL_OW 1
5664: ST_TO_ADDR
// ArtContamination ( x , y , 50 ) ;
5665: LD_VAR 0 3
5669: PPUSH
5670: LD_VAR 0 4
5674: PPUSH
5675: LD_INT 50
5677: PPUSH
5678: CALL_OW 495
// wait ( artifactsRecharge [ 3 ] ) ;
5682: LD_EXP 4
5686: PUSH
5687: LD_INT 3
5689: ARRAY
5690: PPUSH
5691: CALL_OW 67
// artifactsReady := Replace ( artifactsReady , side , Replace ( artifactsReady [ side ] , 3 , true ) ) ;
5695: LD_ADDR_EXP 7
5699: PUSH
5700: LD_EXP 7
5704: PPUSH
5705: LD_VAR 0 1
5709: PPUSH
5710: LD_EXP 7
5714: PUSH
5715: LD_VAR 0 1
5719: ARRAY
5720: PPUSH
5721: LD_INT 3
5723: PPUSH
5724: LD_INT 1
5726: PPUSH
5727: CALL_OW 1
5731: PPUSH
5732: CALL_OW 1
5736: ST_TO_ADDR
// end ; end ;
5737: PPOPN 9
5739: END
// on SpecResearchCancel ( lab , progress ) do var side , tag ;
5740: LD_INT 0
5742: PPUSH
5743: PPUSH
// begin tag := GetTag ( lab ) ;
5744: LD_ADDR_VAR 0 4
5748: PUSH
5749: LD_VAR 0 1
5753: PPUSH
5754: CALL_OW 110
5758: ST_TO_ADDR
// side := GetSide ( lab ) ;
5759: LD_ADDR_VAR 0 3
5763: PUSH
5764: LD_VAR 0 1
5768: PPUSH
5769: CALL_OW 255
5773: ST_TO_ADDR
// SetArtifactUse ( side , artifactsButtons [ tag ] [ 3 ] , art_instant , lab ) ;
5774: LD_VAR 0 3
5778: PPUSH
5779: LD_EXP 10
5783: PUSH
5784: LD_VAR 0 4
5788: ARRAY
5789: PUSH
5790: LD_INT 3
5792: ARRAY
5793: PPUSH
5794: LD_INT 2
5796: PPUSH
5797: LD_VAR 0 1
5801: PPUSH
5802: CALL_OW 468
// artifactsResProgress := Replace ( artifactsResProgress , side , Replace ( artifactsResProgress [ side ] , tag , progress ) ) ;
5806: LD_ADDR_EXP 9
5810: PUSH
5811: LD_EXP 9
5815: PPUSH
5816: LD_VAR 0 3
5820: PPUSH
5821: LD_EXP 9
5825: PUSH
5826: LD_VAR 0 3
5830: ARRAY
5831: PPUSH
5832: LD_VAR 0 4
5836: PPUSH
5837: LD_VAR 0 2
5841: PPUSH
5842: CALL_OW 1
5846: PPUSH
5847: CALL_OW 1
5851: ST_TO_ADDR
// artifactsLabsWorking := Replace ( artifactsLabsWorking , side , artifactsLabsWorking [ side ] diff lab ) ;
5852: LD_ADDR_EXP 11
5856: PUSH
5857: LD_EXP 11
5861: PPUSH
5862: LD_VAR 0 3
5866: PPUSH
5867: LD_EXP 11
5871: PUSH
5872: LD_VAR 0 3
5876: ARRAY
5877: PUSH
5878: LD_VAR 0 1
5882: DIFF
5883: PPUSH
5884: CALL_OW 1
5888: ST_TO_ADDR
// SetTag ( lab , 0 ) ;
5889: LD_VAR 0 1
5893: PPUSH
5894: LD_INT 0
5896: PPUSH
5897: CALL_OW 109
// end ;
5901: PPOPN 4
5903: END
// on SpecResearchComplete ( lab ) do var side , tag ;
5904: LD_INT 0
5906: PPUSH
5907: PPUSH
// begin tag := GetTag ( lab ) ;
5908: LD_ADDR_VAR 0 3
5912: PUSH
5913: LD_VAR 0 1
5917: PPUSH
5918: CALL_OW 110
5922: ST_TO_ADDR
// side := GetSide ( lab ) ;
5923: LD_ADDR_VAR 0 2
5927: PUSH
5928: LD_VAR 0 1
5932: PPUSH
5933: CALL_OW 255
5937: ST_TO_ADDR
// SetArtifactUse ( side , artifactsButtons [ tag ] [ 3 ] , art_no , lab ) ;
5938: LD_VAR 0 2
5942: PPUSH
5943: LD_EXP 10
5947: PUSH
5948: LD_VAR 0 3
5952: ARRAY
5953: PUSH
5954: LD_INT 3
5956: ARRAY
5957: PPUSH
5958: LD_INT 0
5960: PPUSH
5961: LD_VAR 0 1
5965: PPUSH
5966: CALL_OW 468
// artifactsResearched := Replace ( artifactsResearched , side , Replace ( artifactsResearched [ side ] , tag , 1 ) ) ;
5970: LD_ADDR_EXP 6
5974: PUSH
5975: LD_EXP 6
5979: PPUSH
5980: LD_VAR 0 2
5984: PPUSH
5985: LD_EXP 6
5989: PUSH
5990: LD_VAR 0 2
5994: ARRAY
5995: PPUSH
5996: LD_VAR 0 3
6000: PPUSH
6001: LD_INT 1
6003: PPUSH
6004: CALL_OW 1
6008: PPUSH
6009: CALL_OW 1
6013: ST_TO_ADDR
// artifactsReady := Replace ( artifactsReady , side , Replace ( artifactsReady [ side ] , tag , 1 ) ) ;
6014: LD_ADDR_EXP 7
6018: PUSH
6019: LD_EXP 7
6023: PPUSH
6024: LD_VAR 0 2
6028: PPUSH
6029: LD_EXP 7
6033: PUSH
6034: LD_VAR 0 2
6038: ARRAY
6039: PPUSH
6040: LD_VAR 0 3
6044: PPUSH
6045: LD_INT 1
6047: PPUSH
6048: CALL_OW 1
6052: PPUSH
6053: CALL_OW 1
6057: ST_TO_ADDR
// artifactsLabsWorking := Replace ( artifactsLabsWorking , side , artifactsLabsWorking [ side ] diff lab ) ;
6058: LD_ADDR_EXP 11
6062: PUSH
6063: LD_EXP 11
6067: PPUSH
6068: LD_VAR 0 2
6072: PPUSH
6073: LD_EXP 11
6077: PUSH
6078: LD_VAR 0 2
6082: ARRAY
6083: PUSH
6084: LD_VAR 0 1
6088: DIFF
6089: PPUSH
6090: CALL_OW 1
6094: ST_TO_ADDR
// end ;
6095: PPOPN 3
6097: END
// on ArtifactLoaded ( cargo , artifact ) do begin SetTag ( cargo , artifact ) ;
6098: LD_VAR 0 1
6102: PPUSH
6103: LD_VAR 0 2
6107: PPUSH
6108: CALL_OW 109
// end ;
6112: PPOPN 2
6114: END
// on ArtifactUnloaded ( cargo , artifact ) do begin SetTag ( cargo , 0 ) ;
6115: LD_VAR 0 1
6119: PPUSH
6120: LD_INT 0
6122: PPUSH
6123: CALL_OW 109
// end ; end_of_file end_of_file
6127: PPOPN 2
6129: END
// export mpGameType , mpGameSettingsKeys , mpGameSettingsValues , mpGameSettings , mpSidePositions , mpSideTeams , mpSideNations , mpTeams , mpTeamGame , mpOilDeposits , mpSibDeposits , mpDepots , mpStartingResources , mpSharedVision , mpBuildings , mpMarkedAreas , mpBuildUpAreas , mpBuildUpTime , mpStartPos , mpBattleFlag , mpBattleFlags , mpPeopleAmount , mpPeopleSkill , mpSibDetection , mpShipments , mpSibBomb , mpMapSize , mpApemans , mpApemansArea , mpApePosIndex , mpRespawn , mpKingArea , mpPoints , mpVehicles , mpEmissions , mpDisplayStrings , mpGameActive , mpRespawnPull , mpGlobalOilDeposits , mpGlobalSibDeposits , mpTeleports , mpArtifacts , mpBlockRespThread ; export function InitMultiplayer ; var i ; begin
6130: LD_INT 0
6132: PPUSH
6133: PPUSH
// disable ( mpActive ) ;
6134: LD_INT 100
6136: DISABLE_MARKED
// disable ( mpWin ) ;
6137: LD_INT 101
6139: DISABLE_MARKED
// disable ( mpLose ) ;
6140: LD_INT 102
6142: DISABLE_MARKED
// mpGameType := 0 ;
6143: LD_ADDR_EXP 12
6147: PUSH
6148: LD_INT 0
6150: ST_TO_ADDR
// mpGameSettings := [ ] ;
6151: LD_ADDR_EXP 15
6155: PUSH
6156: EMPTY
6157: ST_TO_ADDR
// mpGameSettingsKeys := [ ] ;
6158: LD_ADDR_EXP 13
6162: PUSH
6163: EMPTY
6164: ST_TO_ADDR
// mpGameSettingsValues := [ ] ;
6165: LD_ADDR_EXP 14
6169: PUSH
6170: EMPTY
6171: ST_TO_ADDR
// mpMapSize := [ 2 , 2 ] ;
6172: LD_ADDR_EXP 38
6176: PUSH
6177: LD_INT 2
6179: PUSH
6180: LD_INT 2
6182: PUSH
6183: EMPTY
6184: LIST
6185: LIST
6186: ST_TO_ADDR
// mpOilDeposits := [ ] ;
6187: LD_ADDR_EXP 21
6191: PUSH
6192: EMPTY
6193: ST_TO_ADDR
// mpSibDeposits := [ ] ;
6194: LD_ADDR_EXP 22
6198: PUSH
6199: EMPTY
6200: ST_TO_ADDR
// mpGlobalOilDeposits := [ ] ;
6201: LD_ADDR_EXP 50
6205: PUSH
6206: EMPTY
6207: ST_TO_ADDR
// mpGlobalSibDeposits := [ ] ;
6208: LD_ADDR_EXP 51
6212: PUSH
6213: EMPTY
6214: ST_TO_ADDR
// mpDepots := [ ] ;
6215: LD_ADDR_EXP 23
6219: PUSH
6220: EMPTY
6221: ST_TO_ADDR
// mpBuildings := [ ] ;
6222: LD_ADDR_EXP 26
6226: PUSH
6227: EMPTY
6228: ST_TO_ADDR
// mpMarkedAreas := [ ] ;
6229: LD_ADDR_EXP 27
6233: PUSH
6234: EMPTY
6235: ST_TO_ADDR
// mpBuildUpAreas := [ ] ;
6236: LD_ADDR_EXP 28
6240: PUSH
6241: EMPTY
6242: ST_TO_ADDR
// mpBuildUpTime := [ ] ;
6243: LD_ADDR_EXP 29
6247: PUSH
6248: EMPTY
6249: ST_TO_ADDR
// mpStartingResources := [ ] ;
6250: LD_ADDR_EXP 24
6254: PUSH
6255: EMPTY
6256: ST_TO_ADDR
// mpStartPos := [ ] ;
6257: LD_ADDR_EXP 30
6261: PUSH
6262: EMPTY
6263: ST_TO_ADDR
// mpBattleFlag := - 1 ;
6264: LD_ADDR_EXP 31
6268: PUSH
6269: LD_INT 1
6271: NEG
6272: ST_TO_ADDR
// mpBattleFlags := [ ] ;
6273: LD_ADDR_EXP 32
6277: PUSH
6278: EMPTY
6279: ST_TO_ADDR
// mpApemans := [ ] ;
6280: LD_ADDR_EXP 39
6284: PUSH
6285: EMPTY
6286: ST_TO_ADDR
// mpApemansArea := [ ] ;
6287: LD_ADDR_EXP 40
6291: PUSH
6292: EMPTY
6293: ST_TO_ADDR
// mpRespawn := [ ] ;
6294: LD_ADDR_EXP 42
6298: PUSH
6299: EMPTY
6300: ST_TO_ADDR
// mpKingArea := 0 ;
6301: LD_ADDR_EXP 43
6305: PUSH
6306: LD_INT 0
6308: ST_TO_ADDR
// mpPoints := [ ] ;
6309: LD_ADDR_EXP 44
6313: PUSH
6314: EMPTY
6315: ST_TO_ADDR
// mpVehicles := 0 ;
6316: LD_ADDR_EXP 45
6320: PUSH
6321: LD_INT 0
6323: ST_TO_ADDR
// mpShipments := 0 ;
6324: LD_ADDR_EXP 36
6328: PUSH
6329: LD_INT 0
6331: ST_TO_ADDR
// mpRespawnPull := [ [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
6332: LD_ADDR_EXP 49
6336: PUSH
6337: EMPTY
6338: PUSH
6339: EMPTY
6340: PUSH
6341: EMPTY
6342: PUSH
6343: EMPTY
6344: PUSH
6345: EMPTY
6346: PUSH
6347: EMPTY
6348: PUSH
6349: EMPTY
6350: PUSH
6351: EMPTY
6352: PUSH
6353: EMPTY
6354: LIST
6355: LIST
6356: LIST
6357: LIST
6358: LIST
6359: LIST
6360: LIST
6361: LIST
6362: ST_TO_ADDR
// mpApePosIndex := [ [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
6363: LD_ADDR_EXP 41
6367: PUSH
6368: EMPTY
6369: PUSH
6370: EMPTY
6371: PUSH
6372: EMPTY
6373: PUSH
6374: EMPTY
6375: PUSH
6376: EMPTY
6377: PUSH
6378: EMPTY
6379: PUSH
6380: EMPTY
6381: PUSH
6382: EMPTY
6383: PUSH
6384: EMPTY
6385: LIST
6386: LIST
6387: LIST
6388: LIST
6389: LIST
6390: LIST
6391: LIST
6392: LIST
6393: ST_TO_ADDR
// mpEmissions := 0 ;
6394: LD_ADDR_EXP 46
6398: PUSH
6399: LD_INT 0
6401: ST_TO_ADDR
// mpTeleports := 0 ;
6402: LD_ADDR_EXP 52
6406: PUSH
6407: LD_INT 0
6409: ST_TO_ADDR
// mpArtifacts := 0 ;
6410: LD_ADDR_EXP 53
6414: PUSH
6415: LD_INT 0
6417: ST_TO_ADDR
// mpPeopleSkill := 3 ;
6418: LD_ADDR_EXP 34
6422: PUSH
6423: LD_INT 3
6425: ST_TO_ADDR
// mpPeopleAmount := 15 ;
6426: LD_ADDR_EXP 33
6430: PUSH
6431: LD_INT 15
6433: ST_TO_ADDR
// mpDisplayStrings := 0 ;
6434: LD_ADDR_EXP 47
6438: PUSH
6439: LD_INT 0
6441: ST_TO_ADDR
// mpGameActive := false ;
6442: LD_ADDR_EXP 48
6446: PUSH
6447: LD_INT 0
6449: ST_TO_ADDR
// mpBlockRespThread := false ;
6450: LD_ADDR_EXP 54
6454: PUSH
6455: LD_INT 0
6457: ST_TO_ADDR
// for i := 1 to 32 do
6458: LD_ADDR_VAR 0 2
6462: PUSH
6463: DOUBLE
6464: LD_INT 1
6466: DEC
6467: ST_TO_ADDR
6468: LD_INT 32
6470: PUSH
6471: FOR_TO
6472: IFFALSE 6499
// mpGameSettings := Replace ( mpGameSettings , i , 0 ) ;
6474: LD_ADDR_EXP 15
6478: PUSH
6479: LD_EXP 15
6483: PPUSH
6484: LD_VAR 0 2
6488: PPUSH
6489: LD_INT 0
6491: PPUSH
6492: CALL_OW 1
6496: ST_TO_ADDR
6497: GO 6471
6499: POP
6500: POP
// end ;
6501: LD_VAR 0 1
6505: RET
// export function StartMultiplayer ; var i , j , b , x , y , side , pos , nation , ape , team , setting , resources , gameTypes ; begin
6506: LD_INT 0
6508: PPUSH
6509: PPUSH
6510: PPUSH
6511: PPUSH
6512: PPUSH
6513: PPUSH
6514: PPUSH
6515: PPUSH
6516: PPUSH
6517: PPUSH
6518: PPUSH
6519: PPUSH
6520: PPUSH
6521: PPUSH
// gameTypes := [ GameTypeNormal , GameTypeSurvival , GameTypeKing , GameTypeFamine ] ;
6522: LD_ADDR_VAR 0 14
6526: PUSH
6527: LD_INT 1
6529: PUSH
6530: LD_INT 2
6532: PUSH
6533: LD_INT 3
6535: PUSH
6536: LD_INT 5
6538: PUSH
6539: EMPTY
6540: LIST
6541: LIST
6542: LIST
6543: LIST
6544: ST_TO_ADDR
// for i in gameTypes do
6545: LD_ADDR_VAR 0 2
6549: PUSH
6550: LD_VAR 0 14
6554: PUSH
6555: FOR_IN
6556: IFFALSE 6565
// disable ( i ) ;
6558: LD_VAR 0 2
6562: DISABLE_MARKED
6563: GO 6555
6565: POP
6566: POP
// if Multiplayer then
6567: LD_OWVAR 4
6571: IFFALSE 6755
// begin mpGameType := mp_game_type ;
6573: LD_ADDR_EXP 12
6577: PUSH
6578: LD_OWVAR 6
6582: ST_TO_ADDR
// your_side := mp_player_side ;
6583: LD_ADDR_OWVAR 2
6587: PUSH
6588: LD_OWVAR 7
6592: ST_TO_ADDR
// mpSidePositions := mp_sides_positions ;
6593: LD_ADDR_EXP 16
6597: PUSH
6598: LD_OWVAR 17
6602: ST_TO_ADDR
// mpSideTeams := mp_sides_teams ;
6603: LD_ADDR_EXP 17
6607: PUSH
6608: LD_OWVAR 15
6612: ST_TO_ADDR
// mpSideNations := mp_sides_nations ;
6613: LD_ADDR_EXP 18
6617: PUSH
6618: LD_OWVAR 16
6622: ST_TO_ADDR
// mpTeams := mp_teams ;
6623: LD_ADDR_EXP 19
6627: PUSH
6628: LD_OWVAR 12
6632: ST_TO_ADDR
// for i := 1 to Count ( mpGameSettingsKeys ) do
6633: LD_ADDR_VAR 0 2
6637: PUSH
6638: DOUBLE
6639: LD_INT 1
6641: DEC
6642: ST_TO_ADDR
6643: LD_EXP 13
6647: PPUSH
6648: CALL 23187 0 1
6652: PUSH
6653: FOR_TO
6654: IFFALSE 6730
// begin setting := mpGameSettingsKeys [ i ] ;
6656: LD_ADDR_VAR 0 12
6660: PUSH
6661: LD_EXP 13
6665: PUSH
6666: LD_VAR 0 2
6670: ARRAY
6671: ST_TO_ADDR
// if setting then
6672: LD_VAR 0 12
6676: IFFALSE 6728
// mpGameSettings := Replace ( mpGameSettings , i , mpGameSettingsValues [ i ] [ GetMultiplayerSetting ( i - 1 ) + 1 ] ) ;
6678: LD_ADDR_EXP 15
6682: PUSH
6683: LD_EXP 15
6687: PPUSH
6688: LD_VAR 0 2
6692: PPUSH
6693: LD_EXP 14
6697: PUSH
6698: LD_VAR 0 2
6702: ARRAY
6703: PUSH
6704: LD_VAR 0 2
6708: PUSH
6709: LD_INT 1
6711: MINUS
6712: PPUSH
6713: CALL_OW 426
6717: PUSH
6718: LD_INT 1
6720: PLUS
6721: ARRAY
6722: PPUSH
6723: CALL_OW 1
6727: ST_TO_ADDR
// end ;
6728: GO 6653
6730: POP
6731: POP
// mpTeamGame := ( mpSideTeams diff [ 0 ] ) > 1 ;
6732: LD_ADDR_EXP 20
6736: PUSH
6737: LD_EXP 17
6741: PUSH
6742: LD_INT 0
6744: PUSH
6745: EMPTY
6746: LIST
6747: DIFF
6748: PUSH
6749: LD_INT 1
6751: GREATER
6752: ST_TO_ADDR
// end else
6753: GO 6755
// begin end ; GetMultiplayerMapData ( mpGameType ) ;
6755: LD_EXP 12
6759: PPUSH
6760: CALL 864 0 1
// if Count ( mpMarkedAreas ) then
6764: LD_EXP 27
6768: PPUSH
6769: CALL 23187 0 1
6773: IFFALSE 6804
// begin for i in mpMarkedAreas do
6775: LD_ADDR_VAR 0 2
6779: PUSH
6780: LD_EXP 27
6784: PUSH
6785: FOR_IN
6786: IFFALSE 6802
// SetAreaMapShow ( i , 0 ) ;
6788: LD_VAR 0 2
6792: PPUSH
6793: LD_INT 0
6795: PPUSH
6796: CALL_OW 424
6800: GO 6785
6802: POP
6803: POP
// end ; for i := 1 to 8 do
6804: LD_ADDR_VAR 0 2
6808: PUSH
6809: DOUBLE
6810: LD_INT 1
6812: DEC
6813: ST_TO_ADDR
6814: LD_INT 8
6816: PUSH
6817: FOR_TO
6818: IFFALSE 8082
// begin if not mpSidePositions [ i ] then
6820: LD_EXP 16
6824: PUSH
6825: LD_VAR 0 2
6829: ARRAY
6830: NOT
6831: IFFALSE 6835
// continue ;
6833: GO 6817
// side := i ;
6835: LD_ADDR_VAR 0 7
6839: PUSH
6840: LD_VAR 0 2
6844: ST_TO_ADDR
// nation := mpSideNations [ i ] ;
6845: LD_ADDR_VAR 0 9
6849: PUSH
6850: LD_EXP 18
6854: PUSH
6855: LD_VAR 0 2
6859: ARRAY
6860: ST_TO_ADDR
// pos := mpSidePositions [ i ] ;
6861: LD_ADDR_VAR 0 8
6865: PUSH
6866: LD_EXP 16
6870: PUSH
6871: LD_VAR 0 2
6875: ARRAY
6876: ST_TO_ADDR
// if Count ( mpOilDeposits ) then
6877: LD_EXP 21
6881: PPUSH
6882: CALL 23187 0 1
6886: IFFALSE 6963
// begin for j in mpOilDeposits [ pos ] do
6888: LD_ADDR_VAR 0 3
6892: PUSH
6893: LD_EXP 21
6897: PUSH
6898: LD_VAR 0 8
6902: ARRAY
6903: PUSH
6904: FOR_IN
6905: IFFALSE 6961
// begin CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_oil ) ;
6907: LD_VAR 0 3
6911: PUSH
6912: LD_INT 1
6914: ARRAY
6915: PPUSH
6916: LD_VAR 0 3
6920: PUSH
6921: LD_INT 2
6923: ARRAY
6924: PPUSH
6925: LD_INT 2
6927: PPUSH
6928: CALL_OW 62
// SetResourceVisibility ( j [ 1 ] , j [ 2 ] , side ) ;
6932: LD_VAR 0 3
6936: PUSH
6937: LD_INT 1
6939: ARRAY
6940: PPUSH
6941: LD_VAR 0 3
6945: PUSH
6946: LD_INT 2
6948: ARRAY
6949: PPUSH
6950: LD_VAR 0 7
6954: PPUSH
6955: CALL_OW 441
// end ;
6959: GO 6904
6961: POP
6962: POP
// end ; if Count ( mpSibDeposits ) then
6963: LD_EXP 22
6967: PPUSH
6968: CALL 23187 0 1
6972: IFFALSE 7049
// begin for j in mpSibDeposits [ pos ] do
6974: LD_ADDR_VAR 0 3
6978: PUSH
6979: LD_EXP 22
6983: PUSH
6984: LD_VAR 0 8
6988: ARRAY
6989: PUSH
6990: FOR_IN
6991: IFFALSE 7047
// begin CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_siberit ) ;
6993: LD_VAR 0 3
6997: PUSH
6998: LD_INT 1
7000: ARRAY
7001: PPUSH
7002: LD_VAR 0 3
7006: PUSH
7007: LD_INT 2
7009: ARRAY
7010: PPUSH
7011: LD_INT 3
7013: PPUSH
7014: CALL_OW 62
// SetResourceVisibility ( j [ 1 ] , j [ 2 ] , side ) ;
7018: LD_VAR 0 3
7022: PUSH
7023: LD_INT 1
7025: ARRAY
7026: PPUSH
7027: LD_VAR 0 3
7031: PUSH
7032: LD_INT 2
7034: ARRAY
7035: PPUSH
7036: LD_VAR 0 7
7040: PPUSH
7041: CALL_OW 441
// end ;
7045: GO 6990
7047: POP
7048: POP
// end ; InitBc ;
7049: CALL_OW 21
// InitUc ;
7053: CALL_OW 18
// uc_side := side ;
7057: LD_ADDR_OWVAR 20
7061: PUSH
7062: LD_VAR 0 7
7066: ST_TO_ADDR
// uc_nation := nation ;
7067: LD_ADDR_OWVAR 21
7071: PUSH
7072: LD_VAR 0 9
7076: ST_TO_ADDR
// if Count ( mpDepots ) then
7077: LD_EXP 23
7081: PPUSH
7082: CALL 23187 0 1
7086: IFFALSE 7270
// begin if mpGameType = GameTypeSurvival then
7088: LD_EXP 12
7092: PUSH
7093: LD_INT 2
7095: EQUAL
7096: IFFALSE 7116
// begin bc_level := 10 ;
7098: LD_ADDR_OWVAR 43
7102: PUSH
7103: LD_INT 10
7105: ST_TO_ADDR
// bc_type := b_warehouse ;
7106: LD_ADDR_OWVAR 42
7110: PUSH
7111: LD_INT 1
7113: ST_TO_ADDR
// end else
7114: GO 7132
// begin bc_level := 0 ;
7116: LD_ADDR_OWVAR 43
7120: PUSH
7121: LD_INT 0
7123: ST_TO_ADDR
// bc_type := b_depot ;
7124: LD_ADDR_OWVAR 42
7128: PUSH
7129: LD_INT 0
7131: ST_TO_ADDR
// end ; b := CreateAndPlaceBuildingXYD ( mpDepots [ pos ] [ 1 ] , mpDepots [ pos ] [ 2 ] , mpDepots [ pos ] [ 3 ] ) ;
7132: LD_ADDR_VAR 0 4
7136: PUSH
7137: LD_EXP 23
7141: PUSH
7142: LD_VAR 0 8
7146: ARRAY
7147: PUSH
7148: LD_INT 1
7150: ARRAY
7151: PPUSH
7152: LD_EXP 23
7156: PUSH
7157: LD_VAR 0 8
7161: ARRAY
7162: PUSH
7163: LD_INT 2
7165: ARRAY
7166: PPUSH
7167: LD_EXP 23
7171: PUSH
7172: LD_VAR 0 8
7176: ARRAY
7177: PUSH
7178: LD_INT 3
7180: ARRAY
7181: PPUSH
7182: CALL_OW 47
7186: ST_TO_ADDR
// SetBName ( b , @ & side ) ;
7187: LD_VAR 0 4
7191: PPUSH
7192: LD_STRING @
7194: PUSH
7195: LD_VAR 0 7
7199: STR
7200: PPUSH
7201: CALL_OW 500
// if Count ( mpStartingResources ) then
7205: LD_EXP 24
7209: PPUSH
7210: CALL 23187 0 1
7214: IFFALSE 7268
// begin for j := 1 to mpStartingResources do
7216: LD_ADDR_VAR 0 3
7220: PUSH
7221: DOUBLE
7222: LD_INT 1
7224: DEC
7225: ST_TO_ADDR
7226: LD_EXP 24
7230: PUSH
7231: FOR_TO
7232: IFFALSE 7266
// SetResourceType ( GetBase ( b ) , j , mpStartingResources [ j ] ) ;
7234: LD_VAR 0 4
7238: PPUSH
7239: CALL_OW 274
7243: PPUSH
7244: LD_VAR 0 3
7248: PPUSH
7249: LD_EXP 24
7253: PUSH
7254: LD_VAR 0 3
7258: ARRAY
7259: PPUSH
7260: CALL_OW 277
7264: GO 7231
7266: POP
7267: POP
// end ; end else
7268: GO 7417
// if Count ( mpStartingResources ) then
7270: LD_EXP 24
7274: PPUSH
7275: CALL 23187 0 1
7279: IFFALSE 7417
// begin for j := 1 to mpStartingResources do
7281: LD_ADDR_VAR 0 3
7285: PUSH
7286: DOUBLE
7287: LD_INT 1
7289: DEC
7290: ST_TO_ADDR
7291: LD_EXP 24
7295: PUSH
7296: FOR_TO
7297: IFFALSE 7415
// begin resources := mpStartingResources [ j ] ;
7299: LD_ADDR_VAR 0 13
7303: PUSH
7304: LD_EXP 24
7308: PUSH
7309: LD_VAR 0 3
7313: ARRAY
7314: ST_TO_ADDR
// repeat if resources >= 50 then
7315: LD_VAR 0 13
7319: PUSH
7320: LD_INT 50
7322: GREATEREQUAL
7323: IFFALSE 7369
// begin CreateResourcesXYR ( j , 5 , x , y , 4 , false ) ;
7325: LD_VAR 0 3
7329: PPUSH
7330: LD_INT 5
7332: PPUSH
7333: LD_VAR 0 5
7337: PPUSH
7338: LD_VAR 0 6
7342: PPUSH
7343: LD_INT 4
7345: PPUSH
7346: LD_INT 0
7348: PPUSH
7349: CALL_OW 60
// resources := resources - 50 ;
7353: LD_ADDR_VAR 0 13
7357: PUSH
7358: LD_VAR 0 13
7362: PUSH
7363: LD_INT 50
7365: MINUS
7366: ST_TO_ADDR
// end else
7367: GO 7403
// CreateResourcesXYR ( j , resources div 10 , x , y , 4 , false ) ;
7369: LD_VAR 0 3
7373: PPUSH
7374: LD_VAR 0 13
7378: PUSH
7379: LD_INT 10
7381: DIV
7382: PPUSH
7383: LD_VAR 0 5
7387: PPUSH
7388: LD_VAR 0 6
7392: PPUSH
7393: LD_INT 4
7395: PPUSH
7396: LD_INT 0
7398: PPUSH
7399: CALL_OW 60
// until resources <= 0 ;
7403: LD_VAR 0 13
7407: PUSH
7408: LD_INT 0
7410: LESSEQUAL
7411: IFFALSE 7315
// end ;
7413: GO 7296
7415: POP
7416: POP
// end ; if Count ( mpBuildings ) then
7417: LD_EXP 26
7421: PPUSH
7422: CALL 23187 0 1
7426: IFFALSE 7504
// begin for j in mpBuildings [ pos ] do
7428: LD_ADDR_VAR 0 3
7432: PUSH
7433: LD_EXP 26
7437: PUSH
7438: LD_VAR 0 8
7442: ARRAY
7443: PUSH
7444: FOR_IN
7445: IFFALSE 7502
// begin bc_level := 0 ;
7447: LD_ADDR_OWVAR 43
7451: PUSH
7452: LD_INT 0
7454: ST_TO_ADDR
// bc_type := j [ 1 ] ;
7455: LD_ADDR_OWVAR 42
7459: PUSH
7460: LD_VAR 0 3
7464: PUSH
7465: LD_INT 1
7467: ARRAY
7468: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( j [ 2 ] , j [ 3 ] , j [ 4 ] ) ;
7469: LD_VAR 0 3
7473: PUSH
7474: LD_INT 2
7476: ARRAY
7477: PPUSH
7478: LD_VAR 0 3
7482: PUSH
7483: LD_INT 3
7485: ARRAY
7486: PPUSH
7487: LD_VAR 0 3
7491: PUSH
7492: LD_INT 4
7494: ARRAY
7495: PPUSH
7496: CALL_OW 47
// end ;
7500: GO 7444
7502: POP
7503: POP
// end ; if mpBattleFlag > - 1 then
7504: LD_EXP 31
7508: PUSH
7509: LD_INT 1
7511: NEG
7512: GREATER
7513: IFFALSE 7672
// begin x := mpStartPos [ pos ] [ 1 ] ;
7515: LD_ADDR_VAR 0 5
7519: PUSH
7520: LD_EXP 30
7524: PUSH
7525: LD_VAR 0 8
7529: ARRAY
7530: PUSH
7531: LD_INT 1
7533: ARRAY
7534: ST_TO_ADDR
// y := mpStartPos [ pos ] [ 2 ] ;
7535: LD_ADDR_VAR 0 6
7539: PUSH
7540: LD_EXP 30
7544: PUSH
7545: LD_VAR 0 8
7549: ARRAY
7550: PUSH
7551: LD_INT 2
7553: ARRAY
7554: ST_TO_ADDR
// PlaceEnvironment ( x , y , 12 , 2 ) ;
7555: LD_VAR 0 5
7559: PPUSH
7560: LD_VAR 0 6
7564: PPUSH
7565: LD_INT 12
7567: PPUSH
7568: LD_INT 2
7570: PPUSH
7571: CALL_OW 349
// mpBattleFlags := Replace ( mpBattleFlags , side , SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 70 ] , [ bfo_defend_bonus_building , 40 ] , [ bfo_range , 25 ] , [ bfo_height , 100 ] ] ) ) ;
7575: LD_ADDR_EXP 32
7579: PUSH
7580: LD_EXP 32
7584: PPUSH
7585: LD_VAR 0 7
7589: PPUSH
7590: LD_VAR 0 7
7594: PPUSH
7595: LD_VAR 0 5
7599: PPUSH
7600: LD_VAR 0 6
7604: PPUSH
7605: LD_INT 1
7607: PUSH
7608: LD_INT 100
7610: PUSH
7611: EMPTY
7612: LIST
7613: LIST
7614: PUSH
7615: LD_INT 2
7617: PUSH
7618: LD_INT 70
7620: PUSH
7621: EMPTY
7622: LIST
7623: LIST
7624: PUSH
7625: LD_INT 3
7627: PUSH
7628: LD_INT 40
7630: PUSH
7631: EMPTY
7632: LIST
7633: LIST
7634: PUSH
7635: LD_INT 10
7637: PUSH
7638: LD_INT 25
7640: PUSH
7641: EMPTY
7642: LIST
7643: LIST
7644: PUSH
7645: LD_INT 20
7647: PUSH
7648: LD_INT 100
7650: PUSH
7651: EMPTY
7652: LIST
7653: LIST
7654: PUSH
7655: EMPTY
7656: LIST
7657: LIST
7658: LIST
7659: LIST
7660: LIST
7661: PPUSH
7662: CALL_OW 418
7666: PPUSH
7667: CALL_OW 1
7671: ST_TO_ADDR
// end ; if mpSibDetection and GetTech ( tech_sibdet , side ) = state_enabled then
7672: LD_EXP 35
7676: PUSH
7677: LD_INT 20
7679: PPUSH
7680: LD_VAR 0 7
7684: PPUSH
7685: CALL_OW 321
7689: PUSH
7690: LD_INT 1
7692: EQUAL
7693: AND
7694: IFFALSE 7711
// SetTech ( tech_SibDet , side , state_researched ) ;
7696: LD_INT 20
7698: PPUSH
7699: LD_VAR 0 7
7703: PPUSH
7704: LD_INT 2
7706: PPUSH
7707: CALL_OW 322
// if not mpArtifacts then
7711: LD_EXP 53
7715: NOT
7716: IFFALSE 7733
// SetTech ( tech_artifact , side , state_disabled ) ;
7718: LD_INT 24
7720: PPUSH
7721: LD_VAR 0 7
7725: PPUSH
7726: LD_INT 0
7728: PPUSH
7729: CALL_OW 322
// if mpSibBomb = 1 then
7733: LD_EXP 37
7737: PUSH
7738: LD_INT 1
7740: EQUAL
7741: IFFALSE 7760
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
7743: LD_INT 25
7745: PPUSH
7746: LD_VAR 0 7
7750: PPUSH
7751: LD_INT 1
7753: PPUSH
7754: CALL_OW 322
// end else
7758: GO 7775
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
7760: LD_INT 25
7762: PPUSH
7763: LD_VAR 0 7
7767: PPUSH
7768: LD_INT 0
7770: PPUSH
7771: CALL_OW 322
// end ; if mpVehicles then
7775: LD_EXP 45
7779: IFFALSE 7878
// begin for j in mpPrepareVehicles ( side , nation , mpVehicles ) do
7781: LD_ADDR_VAR 0 3
7785: PUSH
7786: LD_VAR 0 7
7790: PPUSH
7791: LD_VAR 0 9
7795: PPUSH
7796: LD_EXP 45
7800: PPUSH
7801: CALL 8992 0 3
7805: PUSH
7806: FOR_IN
7807: IFFALSE 7876
// begin SetDir ( j , rand ( 0 , 5 ) ) ;
7809: LD_VAR 0 3
7813: PPUSH
7814: LD_INT 0
7816: PPUSH
7817: LD_INT 5
7819: PPUSH
7820: CALL_OW 12
7824: PPUSH
7825: CALL_OW 233
// PlaceUnitXYR ( j , mpStartPos [ pos ] [ 1 ] , mpStartPos [ pos ] [ 2 ] , 12 , false ) ;
7829: LD_VAR 0 3
7833: PPUSH
7834: LD_EXP 30
7838: PUSH
7839: LD_VAR 0 8
7843: ARRAY
7844: PUSH
7845: LD_INT 1
7847: ARRAY
7848: PPUSH
7849: LD_EXP 30
7853: PUSH
7854: LD_VAR 0 8
7858: ARRAY
7859: PUSH
7860: LD_INT 2
7862: ARRAY
7863: PPUSH
7864: LD_INT 12
7866: PPUSH
7867: LD_INT 0
7869: PPUSH
7870: CALL_OW 50
// end ;
7874: GO 7806
7876: POP
7877: POP
// end ; team := mpPrepareTeam ( side , nation , mpPeopleAmount , mpPeopleSkill ) ;
7878: LD_ADDR_VAR 0 11
7882: PUSH
7883: LD_VAR 0 7
7887: PPUSH
7888: LD_VAR 0 9
7892: PPUSH
7893: LD_EXP 33
7897: PPUSH
7898: LD_EXP 34
7902: PPUSH
7903: CALL 8494 0 4
7907: ST_TO_ADDR
// for j in team do
7908: LD_ADDR_VAR 0 3
7912: PUSH
7913: LD_VAR 0 11
7917: PUSH
7918: FOR_IN
7919: IFFALSE 7968
// PlaceUnitXYR ( j , mpStartPos [ pos ] [ 1 ] , mpStartPos [ pos ] [ 2 ] , 12 , false ) ;
7921: LD_VAR 0 3
7925: PPUSH
7926: LD_EXP 30
7930: PUSH
7931: LD_VAR 0 8
7935: ARRAY
7936: PUSH
7937: LD_INT 1
7939: ARRAY
7940: PPUSH
7941: LD_EXP 30
7945: PUSH
7946: LD_VAR 0 8
7950: ARRAY
7951: PUSH
7952: LD_INT 2
7954: ARRAY
7955: PPUSH
7956: LD_INT 12
7958: PPUSH
7959: LD_INT 0
7961: PPUSH
7962: CALL_OW 50
7966: GO 7918
7968: POP
7969: POP
// if mpApemans then
7970: LD_EXP 39
7974: IFFALSE 8080
// begin for j := 1 to mpApemans do
7976: LD_ADDR_VAR 0 3
7980: PUSH
7981: DOUBLE
7982: LD_INT 1
7984: DEC
7985: ST_TO_ADDR
7986: LD_EXP 39
7990: PUSH
7991: FOR_TO
7992: IFFALSE 8078
// begin PrepareApeman ( - 5 ) ;
7994: LD_INT 5
7996: NEG
7997: PPUSH
7998: CALL 55044 0 1
// ape := CreateHuman ;
8002: LD_ADDR_VAR 0 10
8006: PUSH
8007: CALL_OW 44
8011: ST_TO_ADDR
// mpApePosIndex := Replace ( mpApePosIndex , pos , Join ( mpApePosIndex [ pos ] , ape ) ) ;
8012: LD_ADDR_EXP 41
8016: PUSH
8017: LD_EXP 41
8021: PPUSH
8022: LD_VAR 0 8
8026: PPUSH
8027: LD_EXP 41
8031: PUSH
8032: LD_VAR 0 8
8036: ARRAY
8037: PPUSH
8038: LD_VAR 0 10
8042: PPUSH
8043: CALL 58796 0 2
8047: PPUSH
8048: CALL_OW 1
8052: ST_TO_ADDR
// PlaceUnitArea ( ape , mpApemansArea [ pos ] , false ) ;
8053: LD_VAR 0 10
8057: PPUSH
8058: LD_EXP 40
8062: PUSH
8063: LD_VAR 0 8
8067: ARRAY
8068: PPUSH
8069: LD_INT 0
8071: PPUSH
8072: CALL_OW 49
// end ;
8076: GO 7991
8078: POP
8079: POP
// end ; end ;
8080: GO 6817
8082: POP
8083: POP
// if not mpTeamGame then
8084: LD_EXP 20
8088: NOT
8089: IFFALSE 8187
// begin for i := 1 to 8 do
8091: LD_ADDR_VAR 0 2
8095: PUSH
8096: DOUBLE
8097: LD_INT 1
8099: DEC
8100: ST_TO_ADDR
8101: LD_INT 8
8103: PUSH
8104: FOR_TO
8105: IFFALSE 8183
// for j := 1 to 8 do
8107: LD_ADDR_VAR 0 3
8111: PUSH
8112: DOUBLE
8113: LD_INT 1
8115: DEC
8116: ST_TO_ADDR
8117: LD_INT 8
8119: PUSH
8120: FOR_TO
8121: IFFALSE 8179
// if i <> j then
8123: LD_VAR 0 2
8127: PUSH
8128: LD_VAR 0 3
8132: NONEQUAL
8133: IFFALSE 8157
// SetAttitude ( i , j , att_neutral , true ) else
8135: LD_VAR 0 2
8139: PPUSH
8140: LD_VAR 0 3
8144: PPUSH
8145: LD_INT 0
8147: PPUSH
8148: LD_INT 1
8150: PPUSH
8151: CALL_OW 80
8155: GO 8177
// SetAttitude ( i , j , att_friend , true ) ;
8157: LD_VAR 0 2
8161: PPUSH
8162: LD_VAR 0 3
8166: PPUSH
8167: LD_INT 1
8169: PPUSH
8170: LD_INT 1
8172: PPUSH
8173: CALL_OW 80
8177: GO 8120
8179: POP
8180: POP
8181: GO 8104
8183: POP
8184: POP
// end else
8185: GO 8362
// begin if mpSharedVision then
8187: LD_EXP 25
8191: IFFALSE 8256
// begin for i in mpTeams do
8193: LD_ADDR_VAR 0 2
8197: PUSH
8198: LD_EXP 19
8202: PUSH
8203: FOR_IN
8204: IFFALSE 8254
// for j := 2 to i do
8206: LD_ADDR_VAR 0 3
8210: PUSH
8211: DOUBLE
8212: LD_INT 2
8214: DEC
8215: ST_TO_ADDR
8216: LD_VAR 0 2
8220: PUSH
8221: FOR_TO
8222: IFFALSE 8250
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
8224: LD_VAR 0 2
8228: PUSH
8229: LD_VAR 0 3
8233: ARRAY
8234: PPUSH
8235: LD_VAR 0 2
8239: PUSH
8240: LD_INT 1
8242: ARRAY
8243: PPUSH
8244: CALL_OW 343
8248: GO 8221
8250: POP
8251: POP
8252: GO 8203
8254: POP
8255: POP
// end ; for i := 1 to 8 do
8256: LD_ADDR_VAR 0 2
8260: PUSH
8261: DOUBLE
8262: LD_INT 1
8264: DEC
8265: ST_TO_ADDR
8266: LD_INT 8
8268: PUSH
8269: FOR_TO
8270: IFFALSE 8360
// for j := 1 to 8 do
8272: LD_ADDR_VAR 0 3
8276: PUSH
8277: DOUBLE
8278: LD_INT 1
8280: DEC
8281: ST_TO_ADDR
8282: LD_INT 8
8284: PUSH
8285: FOR_TO
8286: IFFALSE 8356
// if mpSideTeams [ i ] = mpSideTeams [ j ] then
8288: LD_EXP 17
8292: PUSH
8293: LD_VAR 0 2
8297: ARRAY
8298: PUSH
8299: LD_EXP 17
8303: PUSH
8304: LD_VAR 0 3
8308: ARRAY
8309: EQUAL
8310: IFFALSE 8334
// SetAttitude ( i , j , att_friend , true ) else
8312: LD_VAR 0 2
8316: PPUSH
8317: LD_VAR 0 3
8321: PPUSH
8322: LD_INT 1
8324: PPUSH
8325: LD_INT 1
8327: PPUSH
8328: CALL_OW 80
8332: GO 8354
// SetAttitude ( i , j , att_enemy , true ) ;
8334: LD_VAR 0 2
8338: PPUSH
8339: LD_VAR 0 3
8343: PPUSH
8344: LD_INT 2
8346: PPUSH
8347: LD_INT 1
8349: PPUSH
8350: CALL_OW 80
8354: GO 8285
8356: POP
8357: POP
8358: GO 8269
8360: POP
8361: POP
// end ; music_nat := mpSideNations [ your_side ] ;
8362: LD_ADDR_OWVAR 71
8366: PUSH
8367: LD_EXP 18
8371: PUSH
8372: LD_OWVAR 2
8376: ARRAY
8377: ST_TO_ADDR
// if IAmSpec then
8378: CALL_OW 531
8382: IFFALSE 8423
// begin FogOff ( true ) ;
8384: LD_INT 1
8386: PPUSH
8387: CALL_OW 344
// CenterNowOnXY ( mpMapSize [ 1 ] div 2 , mpMapSize [ 2 ] div 2 ) ;
8391: LD_EXP 38
8395: PUSH
8396: LD_INT 1
8398: ARRAY
8399: PUSH
8400: LD_INT 2
8402: DIV
8403: PPUSH
8404: LD_EXP 38
8408: PUSH
8409: LD_INT 2
8411: ARRAY
8412: PUSH
8413: LD_INT 2
8415: DIV
8416: PPUSH
8417: CALL_OW 86
// end else
8421: GO 8469
// begin CenterNowOnXY ( mpStartPos [ mpSidePositions [ your_side ] ] [ 1 ] , mpStartPos [ mpSidePositions [ your_side ] ] [ 2 ] ) ;
8423: LD_EXP 30
8427: PUSH
8428: LD_EXP 16
8432: PUSH
8433: LD_OWVAR 2
8437: ARRAY
8438: ARRAY
8439: PUSH
8440: LD_INT 1
8442: ARRAY
8443: PPUSH
8444: LD_EXP 30
8448: PUSH
8449: LD_EXP 16
8453: PUSH
8454: LD_OWVAR 2
8458: ARRAY
8459: ARRAY
8460: PUSH
8461: LD_INT 2
8463: ARRAY
8464: PPUSH
8465: CALL_OW 86
// end ; BeginBuildUp ;
8469: CALL 9470 0 0
// enable ( mpActive ) ;
8473: LD_INT 100
8475: ENABLE_MARKED
// enable ( mpGameType ) ;
8476: LD_EXP 12
8480: ENABLE_MARKED
// mpGameActive := true ;
8481: LD_ADDR_EXP 48
8485: PUSH
8486: LD_INT 1
8488: ST_TO_ADDR
// end ;
8489: LD_VAR 0 1
8493: RET
// var mpTeamPreset ; function mpPrepareTeam ( side , nation , amount , skill ) ; var i , un , class ; begin
8494: LD_INT 0
8496: PPUSH
8497: PPUSH
8498: PPUSH
8499: PPUSH
// result := [ ] ;
8500: LD_ADDR_VAR 0 5
8504: PUSH
8505: EMPTY
8506: ST_TO_ADDR
// class := class_soldier ;
8507: LD_ADDR_VAR 0 8
8511: PUSH
8512: LD_INT 1
8514: ST_TO_ADDR
// uc_side := side ;
8515: LD_ADDR_OWVAR 20
8519: PUSH
8520: LD_VAR 0 1
8524: ST_TO_ADDR
// uc_nation := nation ;
8525: LD_ADDR_OWVAR 21
8529: PUSH
8530: LD_VAR 0 2
8534: ST_TO_ADDR
// hc_name := mp_sides_players_names [ side ] ;
8535: LD_ADDR_OWVAR 26
8539: PUSH
8540: LD_OWVAR 19
8544: PUSH
8545: LD_VAR 0 1
8549: ARRAY
8550: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , class , skill + 2 ) ;
8551: LD_INT 1
8553: PPUSH
8554: LD_INT 2
8556: PPUSH
8557: CALL_OW 12
8561: PPUSH
8562: LD_VAR 0 8
8566: PPUSH
8567: LD_VAR 0 4
8571: PUSH
8572: LD_INT 2
8574: PLUS
8575: PPUSH
8576: CALL_OW 380
// hc_importance := 105 ;
8580: LD_ADDR_OWVAR 32
8584: PUSH
8585: LD_INT 105
8587: ST_TO_ADDR
// if Multiplayer then
8588: LD_OWVAR 4
8592: IFFALSE 8632
// begin hc_gallery := MULTIAVATARS ;
8594: LD_ADDR_OWVAR 33
8598: PUSH
8599: LD_STRING MULTIAVATARS
8601: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( side ) ;
8602: LD_ADDR_OWVAR 34
8606: PUSH
8607: LD_VAR 0 1
8611: PPUSH
8612: CALL_OW 525
8616: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( side ) ;
8617: LD_ADDR_OWVAR 27
8621: PUSH
8622: LD_VAR 0 1
8626: PPUSH
8627: CALL_OW 526
8631: ST_TO_ADDR
// end ; result := Join ( result , CreateHuman ) ;
8632: LD_ADDR_VAR 0 5
8636: PUSH
8637: LD_VAR 0 5
8641: PPUSH
8642: CALL_OW 44
8646: PPUSH
8647: CALL 58796 0 2
8651: ST_TO_ADDR
// if mpTeamPreset then
8652: LD_LOC 1
8656: IFFALSE 8752
// begin CopySkills ( mpTeamPreset [ 1 ] , result [ result ] ) ;
8658: LD_LOC 1
8662: PUSH
8663: LD_INT 1
8665: ARRAY
8666: PPUSH
8667: LD_VAR 0 5
8671: PUSH
8672: LD_VAR 0 5
8676: ARRAY
8677: PPUSH
8678: CALL_OW 510
// SetAttr ( result [ result ] , attr_stamina , GetAttr ( mpTeamPreset [ 1 ] , attr_stamina ) ) ;
8682: LD_VAR 0 5
8686: PUSH
8687: LD_VAR 0 5
8691: ARRAY
8692: PPUSH
8693: LD_INT 1
8695: PPUSH
8696: LD_LOC 1
8700: PUSH
8701: LD_INT 1
8703: ARRAY
8704: PPUSH
8705: LD_INT 1
8707: PPUSH
8708: CALL_OW 260
8712: PPUSH
8713: CALL_OW 239
// SetAttr ( result [ result ] , attr_speed , GetAttr ( mpTeamPreset [ 1 ] , attr_speed ) ) ;
8717: LD_VAR 0 5
8721: PUSH
8722: LD_VAR 0 5
8726: ARRAY
8727: PPUSH
8728: LD_INT 2
8730: PPUSH
8731: LD_LOC 1
8735: PUSH
8736: LD_INT 1
8738: ARRAY
8739: PPUSH
8740: LD_INT 2
8742: PPUSH
8743: CALL_OW 260
8747: PPUSH
8748: CALL_OW 239
// end ; InitHc_All ( ) ;
8752: CALL_OW 584
// class := 2 ;
8756: LD_ADDR_VAR 0 8
8760: PUSH
8761: LD_INT 2
8763: ST_TO_ADDR
// for i := 1 to ( amount - 1 ) do
8764: LD_ADDR_VAR 0 6
8768: PUSH
8769: DOUBLE
8770: LD_INT 1
8772: DEC
8773: ST_TO_ADDR
8774: LD_VAR 0 3
8778: PUSH
8779: LD_INT 1
8781: MINUS
8782: PUSH
8783: FOR_TO
8784: IFFALSE 8968
// begin PrepareHuman ( false , class , skill ) ;
8786: LD_INT 0
8788: PPUSH
8789: LD_VAR 0 8
8793: PPUSH
8794: LD_VAR 0 4
8798: PPUSH
8799: CALL_OW 380
// un := CreateHuman ;
8803: LD_ADDR_VAR 0 7
8807: PUSH
8808: CALL_OW 44
8812: ST_TO_ADDR
// result := Join ( result , un ) ;
8813: LD_ADDR_VAR 0 5
8817: PUSH
8818: LD_VAR 0 5
8822: PPUSH
8823: LD_VAR 0 7
8827: PPUSH
8828: CALL 58796 0 2
8832: ST_TO_ADDR
// if mpTeamPreset then
8833: LD_LOC 1
8837: IFFALSE 8933
// begin CopySkills ( mpTeamPreset [ i + 1 ] , un ) ;
8839: LD_LOC 1
8843: PUSH
8844: LD_VAR 0 6
8848: PUSH
8849: LD_INT 1
8851: PLUS
8852: ARRAY
8853: PPUSH
8854: LD_VAR 0 7
8858: PPUSH
8859: CALL_OW 510
// SetAttr ( un , attr_stamina , GetAttr ( mpTeamPreset [ i + 1 ] , attr_stamina ) ) ;
8863: LD_VAR 0 7
8867: PPUSH
8868: LD_INT 1
8870: PPUSH
8871: LD_LOC 1
8875: PUSH
8876: LD_VAR 0 6
8880: PUSH
8881: LD_INT 1
8883: PLUS
8884: ARRAY
8885: PPUSH
8886: LD_INT 1
8888: PPUSH
8889: CALL_OW 260
8893: PPUSH
8894: CALL_OW 239
// SetAttr ( un , attr_speed , GetAttr ( mpTeamPreset [ i + 1 ] , attr_speed ) ) ;
8898: LD_VAR 0 7
8902: PPUSH
8903: LD_INT 2
8905: PPUSH
8906: LD_LOC 1
8910: PUSH
8911: LD_VAR 0 6
8915: PUSH
8916: LD_INT 1
8918: PLUS
8919: ARRAY
8920: PPUSH
8921: LD_INT 2
8923: PPUSH
8924: CALL_OW 260
8928: PPUSH
8929: CALL_OW 239
// end ; class := Inc ( class ) ;
8933: LD_ADDR_VAR 0 8
8937: PUSH
8938: LD_VAR 0 8
8942: PPUSH
8943: CALL 60157 0 1
8947: ST_TO_ADDR
// if class = 5 then
8948: LD_VAR 0 8
8952: PUSH
8953: LD_INT 5
8955: EQUAL
8956: IFFALSE 8966
// class := 1 ;
8958: LD_ADDR_VAR 0 8
8962: PUSH
8963: LD_INT 1
8965: ST_TO_ADDR
// end ;
8966: GO 8783
8968: POP
8969: POP
// if not mpTeamPreset then
8970: LD_LOC 1
8974: NOT
8975: IFFALSE 8987
// mpTeamPreset := result ;
8977: LD_ADDR_LOC 1
8981: PUSH
8982: LD_VAR 0 5
8986: ST_TO_ADDR
// end ;
8987: LD_VAR 0 5
8991: RET
// function mpPrepareVehicles ( side , nation , vehicles ) ; var i ; begin
8992: LD_INT 0
8994: PPUSH
8995: PPUSH
// result := [ ] ;
8996: LD_ADDR_VAR 0 4
9000: PUSH
9001: EMPTY
9002: ST_TO_ADDR
// if not vehicles then
9003: LD_VAR 0 3
9007: NOT
9008: IFFALSE 9012
// exit ;
9010: GO 9171
// for i := 1 to vehicles [ nation ] do
9012: LD_ADDR_VAR 0 5
9016: PUSH
9017: DOUBLE
9018: LD_INT 1
9020: DEC
9021: ST_TO_ADDR
9022: LD_VAR 0 3
9026: PUSH
9027: LD_VAR 0 2
9031: ARRAY
9032: PUSH
9033: FOR_TO
9034: IFFALSE 9169
// begin uc_side := side ;
9036: LD_ADDR_OWVAR 20
9040: PUSH
9041: LD_VAR 0 1
9045: ST_TO_ADDR
// uc_nation := nation ;
9046: LD_ADDR_OWVAR 21
9050: PUSH
9051: LD_VAR 0 2
9055: ST_TO_ADDR
// PrepareVehicle ( vehicles [ nation ] [ i ] [ 1 ] , vehicles [ nation ] [ i ] [ 2 ] , vehicles [ nation ] [ i ] [ 3 ] , vehicles [ nation ] [ i ] [ 4 ] , 80 ) ;
9056: LD_VAR 0 3
9060: PUSH
9061: LD_VAR 0 2
9065: ARRAY
9066: PUSH
9067: LD_VAR 0 5
9071: ARRAY
9072: PUSH
9073: LD_INT 1
9075: ARRAY
9076: PPUSH
9077: LD_VAR 0 3
9081: PUSH
9082: LD_VAR 0 2
9086: ARRAY
9087: PUSH
9088: LD_VAR 0 5
9092: ARRAY
9093: PUSH
9094: LD_INT 2
9096: ARRAY
9097: PPUSH
9098: LD_VAR 0 3
9102: PUSH
9103: LD_VAR 0 2
9107: ARRAY
9108: PUSH
9109: LD_VAR 0 5
9113: ARRAY
9114: PUSH
9115: LD_INT 3
9117: ARRAY
9118: PPUSH
9119: LD_VAR 0 3
9123: PUSH
9124: LD_VAR 0 2
9128: ARRAY
9129: PUSH
9130: LD_VAR 0 5
9134: ARRAY
9135: PUSH
9136: LD_INT 4
9138: ARRAY
9139: PPUSH
9140: LD_INT 80
9142: PPUSH
9143: CALL 25925 0 5
// result := Join ( result , CreateVehicle ) ;
9147: LD_ADDR_VAR 0 4
9151: PUSH
9152: LD_VAR 0 4
9156: PPUSH
9157: CALL_OW 45
9161: PPUSH
9162: CALL 58796 0 2
9166: ST_TO_ADDR
// end ;
9167: GO 9033
9169: POP
9170: POP
// end ;
9171: LD_VAR 0 4
9175: RET
// function mpUpdateFlags ( strength ) ; var i ; begin
9176: LD_INT 0
9178: PPUSH
9179: PPUSH
// for i in mpBattleFlags do
9180: LD_ADDR_VAR 0 3
9184: PUSH
9185: LD_EXP 32
9189: PUSH
9190: FOR_IN
9191: IFFALSE 9268
// ChangeBattleFlagOptions ( i , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength * 0.7 ] , [ bfo_defend_bonus_building , strength * 0.4 ] , [ bfo_height , strength ] ] ) ;
9193: LD_VAR 0 3
9197: PPUSH
9198: LD_INT 1
9200: PUSH
9201: LD_VAR 0 1
9205: PUSH
9206: EMPTY
9207: LIST
9208: LIST
9209: PUSH
9210: LD_INT 2
9212: PUSH
9213: LD_VAR 0 1
9217: PUSH
9218: LD_REAL  7.00000000000000E-0001
9221: MUL
9222: PUSH
9223: EMPTY
9224: LIST
9225: LIST
9226: PUSH
9227: LD_INT 3
9229: PUSH
9230: LD_VAR 0 1
9234: PUSH
9235: LD_REAL  4.00000000000000E-0001
9238: MUL
9239: PUSH
9240: EMPTY
9241: LIST
9242: LIST
9243: PUSH
9244: LD_INT 20
9246: PUSH
9247: LD_VAR 0 1
9251: PUSH
9252: EMPTY
9253: LIST
9254: LIST
9255: PUSH
9256: EMPTY
9257: LIST
9258: LIST
9259: LIST
9260: LIST
9261: PPUSH
9262: CALL_OW 423
9266: GO 9190
9268: POP
9269: POP
// end ;
9270: LD_VAR 0 2
9274: RET
// every 0 0$1 trigger mpActive do var i , strength ;
9275: LD_INT 100
9277: IFFALSE 9372
9279: GO 9281
9281: DISABLE
9282: LD_INT 0
9284: PPUSH
9285: PPUSH
// begin if mpBattleFlag <= 0 then
9286: LD_EXP 31
9290: PUSH
9291: LD_INT 0
9293: LESSEQUAL
9294: IFFALSE 9298
// exit ;
9296: GO 9372
// strength := 100 ;
9298: LD_ADDR_VAR 0 2
9302: PUSH
9303: LD_INT 100
9305: ST_TO_ADDR
// repeat wait ( mpBattleFlag ) ;
9306: LD_EXP 31
9310: PPUSH
9311: CALL_OW 67
// strength := Dec ( strength ) ;
9315: LD_ADDR_VAR 0 2
9319: PUSH
9320: LD_VAR 0 2
9324: PPUSH
9325: CALL 60179 0 1
9329: ST_TO_ADDR
// mpUpdateFlags ( strength ) ;
9330: LD_VAR 0 2
9334: PPUSH
9335: CALL 9176 0 1
// until not strength ;
9339: LD_VAR 0 2
9343: NOT
9344: IFFALSE 9306
// for i in mpBattleFlags do
9346: LD_ADDR_VAR 0 1
9350: PUSH
9351: LD_EXP 32
9355: PUSH
9356: FOR_IN
9357: IFFALSE 9370
// KillBattleFlag ( i ) ;
9359: LD_VAR 0 1
9363: PPUSH
9364: CALL_OW 419
9368: GO 9356
9370: POP
9371: POP
// end ;
9372: PPOPN 2
9374: END
// every 0 0$1 marked mpActive do var side , tmp ;
9375: GO 9377
9377: DISABLE
9378: LD_INT 0
9380: PPUSH
9381: PPUSH
// begin if mpSibBomb <= 1 then
9382: LD_EXP 37
9386: PUSH
9387: LD_INT 1
9389: LESSEQUAL
9390: IFFALSE 9394
// exit ;
9392: GO 9467
// tmp := mpSibBomb ;
9394: LD_ADDR_VAR 0 2
9398: PUSH
9399: LD_EXP 37
9403: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
9404: LD_INT 35
9406: PPUSH
9407: CALL_OW 67
// tmp := tmp - 0 0$1 ;
9411: LD_ADDR_VAR 0 2
9415: PUSH
9416: LD_VAR 0 2
9420: PUSH
9421: LD_INT 35
9423: MINUS
9424: ST_TO_ADDR
// until not tmp ;
9425: LD_VAR 0 2
9429: NOT
9430: IFFALSE 9404
// for side := 1 to 8 do
9432: LD_ADDR_VAR 0 1
9436: PUSH
9437: DOUBLE
9438: LD_INT 1
9440: DEC
9441: ST_TO_ADDR
9442: LD_INT 8
9444: PUSH
9445: FOR_TO
9446: IFFALSE 9465
// SetTech ( tech_SibFiss , side , state_enabled ) ;
9448: LD_INT 25
9450: PPUSH
9451: LD_VAR 0 1
9455: PPUSH
9456: LD_INT 1
9458: PPUSH
9459: CALL_OW 322
9463: GO 9445
9465: POP
9466: POP
// end ;
9467: PPOPN 2
9469: END
// export mpBuildUpTimeDelay , mpBuildUpTimeActive ; function BeginBuildUp ; var i , j ; begin
9470: LD_INT 0
9472: PPUSH
9473: PPUSH
9474: PPUSH
// mpBuildUpTimeDelay := 0 ;
9475: LD_ADDR_EXP 55
9479: PUSH
9480: LD_INT 0
9482: ST_TO_ADDR
// if not mpBuildUpTime then
9483: LD_EXP 29
9487: NOT
9488: IFFALSE 9492
// exit ;
9490: GO 9675
// mpBuildUpTimeDelay := 4 4$00 + 1 1$00 * mpBuildUpTime ;
9492: LD_ADDR_EXP 55
9496: PUSH
9497: LD_INT 8400
9499: PUSH
9500: LD_INT 2100
9502: PUSH
9503: LD_EXP 29
9507: MUL
9508: PLUS
9509: ST_TO_ADDR
// mpBuildUpTimeActive := true ;
9510: LD_ADDR_EXP 56
9514: PUSH
9515: LD_INT 1
9517: ST_TO_ADDR
// for i := 1 to 8 do
9518: LD_ADDR_VAR 0 2
9522: PUSH
9523: DOUBLE
9524: LD_INT 1
9526: DEC
9527: ST_TO_ADDR
9528: LD_INT 8
9530: PUSH
9531: FOR_TO
9532: IFFALSE 9673
// if mpSidePositions [ i ] then
9534: LD_EXP 16
9538: PUSH
9539: LD_VAR 0 2
9543: ARRAY
9544: IFFALSE 9671
// begin SetAreaMapShow ( mpBuildUpAreas [ mpSidePositions [ i ] ] , 5 ) ;
9546: LD_EXP 28
9550: PUSH
9551: LD_EXP 16
9555: PUSH
9556: LD_VAR 0 2
9560: ARRAY
9561: ARRAY
9562: PPUSH
9563: LD_INT 5
9565: PPUSH
9566: CALL_OW 424
// for j := 1 to 8 do
9570: LD_ADDR_VAR 0 3
9574: PUSH
9575: DOUBLE
9576: LD_INT 1
9578: DEC
9579: ST_TO_ADDR
9580: LD_INT 8
9582: PUSH
9583: FOR_TO
9584: IFFALSE 9669
// if mpSidePositions [ j ] and ( ( mpSideTeams [ i ] <> mpSideTeams [ j ] ) or ( not mpTeamGame ) and ( i <> j ) ) then
9586: LD_EXP 16
9590: PUSH
9591: LD_VAR 0 3
9595: ARRAY
9596: PUSH
9597: LD_EXP 17
9601: PUSH
9602: LD_VAR 0 2
9606: ARRAY
9607: PUSH
9608: LD_EXP 17
9612: PUSH
9613: LD_VAR 0 3
9617: ARRAY
9618: NONEQUAL
9619: PUSH
9620: LD_EXP 20
9624: NOT
9625: PUSH
9626: LD_VAR 0 2
9630: PUSH
9631: LD_VAR 0 3
9635: NONEQUAL
9636: AND
9637: OR
9638: AND
9639: IFFALSE 9667
// HideArea ( j , mpBuildUpAreas [ mpSidePositions [ i ] ] ) ;
9641: LD_VAR 0 3
9645: PPUSH
9646: LD_EXP 28
9650: PUSH
9651: LD_EXP 16
9655: PUSH
9656: LD_VAR 0 2
9660: ARRAY
9661: ARRAY
9662: PPUSH
9663: CALL_OW 333
9667: GO 9583
9669: POP
9670: POP
// end ;
9671: GO 9531
9673: POP
9674: POP
// end ;
9675: LD_VAR 0 1
9679: RET
// function EndBuildUp ; var i , j ; begin
9680: LD_INT 0
9682: PPUSH
9683: PPUSH
9684: PPUSH
// mpBuildUpTimeActive := false ;
9685: LD_ADDR_EXP 56
9689: PUSH
9690: LD_INT 0
9692: ST_TO_ADDR
// for i := 1 to 8 do
9693: LD_ADDR_VAR 0 2
9697: PUSH
9698: DOUBLE
9699: LD_INT 1
9701: DEC
9702: ST_TO_ADDR
9703: LD_INT 8
9705: PUSH
9706: FOR_TO
9707: IFFALSE 9848
// if mpSidePositions [ i ] then
9709: LD_EXP 16
9713: PUSH
9714: LD_VAR 0 2
9718: ARRAY
9719: IFFALSE 9846
// begin SetAreaMapShow ( mpBuildUpAreas [ mpSidePositions [ i ] ] , 0 ) ;
9721: LD_EXP 28
9725: PUSH
9726: LD_EXP 16
9730: PUSH
9731: LD_VAR 0 2
9735: ARRAY
9736: ARRAY
9737: PPUSH
9738: LD_INT 0
9740: PPUSH
9741: CALL_OW 424
// for j := 1 to 8 do
9745: LD_ADDR_VAR 0 3
9749: PUSH
9750: DOUBLE
9751: LD_INT 1
9753: DEC
9754: ST_TO_ADDR
9755: LD_INT 8
9757: PUSH
9758: FOR_TO
9759: IFFALSE 9844
// if mpSidePositions [ j ] and ( ( mpSideTeams [ i ] <> mpSideTeams [ j ] ) or ( not mpTeamGame ) and ( i <> j ) ) then
9761: LD_EXP 16
9765: PUSH
9766: LD_VAR 0 3
9770: ARRAY
9771: PUSH
9772: LD_EXP 17
9776: PUSH
9777: LD_VAR 0 2
9781: ARRAY
9782: PUSH
9783: LD_EXP 17
9787: PUSH
9788: LD_VAR 0 3
9792: ARRAY
9793: NONEQUAL
9794: PUSH
9795: LD_EXP 20
9799: NOT
9800: PUSH
9801: LD_VAR 0 2
9805: PUSH
9806: LD_VAR 0 3
9810: NONEQUAL
9811: AND
9812: OR
9813: AND
9814: IFFALSE 9842
// ShowArea ( j , mpBuildUpAreas [ mpSidePositions [ i ] ] ) ;
9816: LD_VAR 0 3
9820: PPUSH
9821: LD_EXP 28
9825: PUSH
9826: LD_EXP 16
9830: PUSH
9831: LD_VAR 0 2
9835: ARRAY
9836: ARRAY
9837: PPUSH
9838: CALL_OW 334
9842: GO 9758
9844: POP
9845: POP
// end ;
9846: GO 9706
9848: POP
9849: POP
// end ;
9850: LD_VAR 0 1
9854: RET
// every 5 trigger mpBuildUpTimeActive marked mpActive do var i , un ;
9855: LD_EXP 56
9859: IFFALSE 10036
9861: GO 9863
9863: DISABLE
9864: LD_INT 0
9866: PPUSH
9867: PPUSH
// begin for i := 1 to 8 do
9868: LD_ADDR_VAR 0 1
9872: PUSH
9873: DOUBLE
9874: LD_INT 1
9876: DEC
9877: ST_TO_ADDR
9878: LD_INT 8
9880: PUSH
9881: FOR_TO
9882: IFFALSE 10033
// if mpSidePositions [ i ] then
9884: LD_EXP 16
9888: PUSH
9889: LD_VAR 0 1
9893: ARRAY
9894: IFFALSE 10031
// for un in FilterUnitsInArea ( mpBuildUpAreas [ mpSidePositions [ i ] ] , [ [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] , [ f_side , your_side ] ] ) do
9896: LD_ADDR_VAR 0 2
9900: PUSH
9901: LD_EXP 28
9905: PUSH
9906: LD_EXP 16
9910: PUSH
9911: LD_VAR 0 1
9915: ARRAY
9916: ARRAY
9917: PPUSH
9918: LD_INT 2
9920: PUSH
9921: LD_INT 21
9923: PUSH
9924: LD_INT 1
9926: PUSH
9927: EMPTY
9928: LIST
9929: LIST
9930: PUSH
9931: LD_INT 21
9933: PUSH
9934: LD_INT 2
9936: PUSH
9937: EMPTY
9938: LIST
9939: LIST
9940: PUSH
9941: EMPTY
9942: LIST
9943: LIST
9944: LIST
9945: PUSH
9946: LD_INT 22
9948: PUSH
9949: LD_OWVAR 2
9953: PUSH
9954: EMPTY
9955: LIST
9956: LIST
9957: PUSH
9958: EMPTY
9959: LIST
9960: LIST
9961: PPUSH
9962: CALL_OW 70
9966: PUSH
9967: FOR_IN
9968: IFFALSE 10029
// if ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) or ( not mpTeamGame ) and ( i <> your_side ) ) then
9970: LD_EXP 17
9974: PUSH
9975: LD_VAR 0 1
9979: ARRAY
9980: PUSH
9981: LD_EXP 17
9985: PUSH
9986: LD_OWVAR 2
9990: ARRAY
9991: NONEQUAL
9992: PUSH
9993: LD_EXP 20
9997: NOT
9998: PUSH
9999: LD_VAR 0 1
10003: PUSH
10004: LD_OWVAR 2
10008: NONEQUAL
10009: AND
10010: OR
10011: IFFALSE 10027
// ComMoveToArea ( un , BuildUpEscape ) ;
10013: LD_VAR 0 2
10017: PPUSH
10018: LD_EXP 1
10022: PPUSH
10023: CALL_OW 113
10027: GO 9967
10029: POP
10030: POP
10031: GO 9881
10033: POP
10034: POP
// enable ;
10035: ENABLE
// end ;
10036: PPOPN 2
10038: END
// every 0 0$1 trigger mpBuildUpTime marked mpActive do var tmp ;
10039: LD_EXP 29
10043: IFFALSE 10093
10045: GO 10047
10047: DISABLE
10048: LD_INT 0
10050: PPUSH
// begin tmp := mpBuildUpTime ;
10051: LD_ADDR_VAR 0 1
10055: PUSH
10056: LD_EXP 29
10060: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
10061: LD_INT 35
10063: PPUSH
10064: CALL_OW 67
// tmp := tmp - 0 0$1 ;
10068: LD_ADDR_VAR 0 1
10072: PUSH
10073: LD_VAR 0 1
10077: PUSH
10078: LD_INT 35
10080: MINUS
10081: ST_TO_ADDR
// until not tmp ;
10082: LD_VAR 0 1
10086: NOT
10087: IFFALSE 10061
// EndBuildUp ;
10089: CALL 9680 0 0
// end ;
10093: PPOPN 1
10095: END
// every 0 0$1 trigger mpActive marked mpWin do
10096: LD_INT 100
10098: IFFALSE 10132
10100: GO 10102
10102: DISABLE
// begin if IAmServer then
10103: CALL_OW 518
10107: IFFALSE 10116
// wait ( 0 0$3 ) ;
10109: LD_INT 105
10111: PPUSH
10112: CALL_OW 67
// if Multiplayer then
10116: LD_OWVAR 4
10120: IFFALSE 10128
// YouWinInMultiplayer else
10122: CALL_OW 106
10126: GO 10132
// YouWin ;
10128: CALL_OW 103
// end ;
10132: END
// export function HasPowerByGameType ( gameType , side ) ; begin
10133: LD_INT 0
10135: PPUSH
// result := false ;
10136: LD_ADDR_VAR 0 3
10140: PUSH
10141: LD_INT 0
10143: ST_TO_ADDR
// case gameType of GameTypeNormal , GameTypeFamine :
10144: LD_VAR 0 1
10148: PUSH
10149: LD_INT 1
10151: DOUBLE
10152: EQUAL
10153: IFTRUE 10163
10155: LD_INT 5
10157: DOUBLE
10158: EQUAL
10159: IFTRUE 10163
10161: GO 10236
10163: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) ;
10164: LD_ADDR_VAR 0 3
10168: PUSH
10169: LD_INT 22
10171: PUSH
10172: LD_VAR 0 2
10176: PUSH
10177: EMPTY
10178: LIST
10179: LIST
10180: PUSH
10181: LD_INT 2
10183: PUSH
10184: LD_INT 21
10186: PUSH
10187: LD_INT 1
10189: PUSH
10190: EMPTY
10191: LIST
10192: LIST
10193: PUSH
10194: LD_INT 33
10196: PUSH
10197: LD_INT 3
10199: PUSH
10200: EMPTY
10201: LIST
10202: LIST
10203: PUSH
10204: LD_INT 33
10206: PUSH
10207: LD_INT 5
10209: PUSH
10210: EMPTY
10211: LIST
10212: LIST
10213: PUSH
10214: EMPTY
10215: LIST
10216: LIST
10217: LIST
10218: LIST
10219: PUSH
10220: EMPTY
10221: LIST
10222: LIST
10223: PPUSH
10224: CALL_OW 69
10228: PPUSH
10229: CALL 23187 0 1
10233: ST_TO_ADDR
// end ; GameTypeSurvival :
10234: GO 10471
10236: LD_INT 2
10238: DOUBLE
10239: EQUAL
10240: IFTRUE 10244
10242: GO 10372
10244: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ) and Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) ;
10245: LD_ADDR_VAR 0 3
10249: PUSH
10250: LD_INT 22
10252: PUSH
10253: LD_VAR 0 2
10257: PUSH
10258: EMPTY
10259: LIST
10260: LIST
10261: PUSH
10262: LD_INT 2
10264: PUSH
10265: LD_INT 30
10267: PUSH
10268: LD_INT 0
10270: PUSH
10271: EMPTY
10272: LIST
10273: LIST
10274: PUSH
10275: LD_INT 30
10277: PUSH
10278: LD_INT 1
10280: PUSH
10281: EMPTY
10282: LIST
10283: LIST
10284: PUSH
10285: EMPTY
10286: LIST
10287: LIST
10288: LIST
10289: PUSH
10290: EMPTY
10291: LIST
10292: LIST
10293: PPUSH
10294: CALL_OW 69
10298: PPUSH
10299: CALL 23187 0 1
10303: PUSH
10304: LD_INT 22
10306: PUSH
10307: LD_VAR 0 2
10311: PUSH
10312: EMPTY
10313: LIST
10314: LIST
10315: PUSH
10316: LD_INT 2
10318: PUSH
10319: LD_INT 21
10321: PUSH
10322: LD_INT 1
10324: PUSH
10325: EMPTY
10326: LIST
10327: LIST
10328: PUSH
10329: LD_INT 33
10331: PUSH
10332: LD_INT 3
10334: PUSH
10335: EMPTY
10336: LIST
10337: LIST
10338: PUSH
10339: LD_INT 33
10341: PUSH
10342: LD_INT 5
10344: PUSH
10345: EMPTY
10346: LIST
10347: LIST
10348: PUSH
10349: EMPTY
10350: LIST
10351: LIST
10352: LIST
10353: LIST
10354: PUSH
10355: EMPTY
10356: LIST
10357: LIST
10358: PPUSH
10359: CALL_OW 69
10363: PPUSH
10364: CALL 23187 0 1
10368: AND
10369: ST_TO_ADDR
// end ; GameTypeKing :
10370: GO 10471
10372: LD_INT 3
10374: DOUBLE
10375: EQUAL
10376: IFTRUE 10380
10378: GO 10470
10380: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) and HowMuchPointsKing ( side ) < mpPoints ;
10381: LD_ADDR_VAR 0 3
10385: PUSH
10386: LD_INT 22
10388: PUSH
10389: LD_VAR 0 2
10393: PUSH
10394: EMPTY
10395: LIST
10396: LIST
10397: PUSH
10398: LD_INT 2
10400: PUSH
10401: LD_INT 21
10403: PUSH
10404: LD_INT 1
10406: PUSH
10407: EMPTY
10408: LIST
10409: LIST
10410: PUSH
10411: LD_INT 33
10413: PUSH
10414: LD_INT 3
10416: PUSH
10417: EMPTY
10418: LIST
10419: LIST
10420: PUSH
10421: LD_INT 33
10423: PUSH
10424: LD_INT 5
10426: PUSH
10427: EMPTY
10428: LIST
10429: LIST
10430: PUSH
10431: EMPTY
10432: LIST
10433: LIST
10434: LIST
10435: LIST
10436: PUSH
10437: EMPTY
10438: LIST
10439: LIST
10440: PPUSH
10441: CALL_OW 69
10445: PPUSH
10446: CALL 23187 0 1
10450: PUSH
10451: LD_VAR 0 2
10455: PPUSH
10456: CALL 13475 0 1
10460: PUSH
10461: LD_EXP 44
10465: LESS
10466: AND
10467: ST_TO_ADDR
// end ; end ;
10468: GO 10471
10470: POP
// end ;
10471: LD_VAR 0 3
10475: RET
// every 0 0$1 trigger mpActive marked mpLose do var gameIsOn , i ;
10476: LD_INT 100
10478: IFFALSE 10700
10480: GO 10482
10482: DISABLE
10483: LD_INT 0
10485: PPUSH
10486: PPUSH
// begin if Multiplayer then
10487: LD_OWVAR 4
10491: IFFALSE 10499
// SetPlayerSpectator ( ) else
10493: CALL_OW 572
10497: GO 10508
// FogOff ( your_side ) ;
10499: LD_OWVAR 2
10503: PPUSH
10504: CALL_OW 344
// repeat gameIsOn := false ;
10508: LD_ADDR_VAR 0 1
10512: PUSH
10513: LD_INT 0
10515: ST_TO_ADDR
// for i := 1 to 8 do
10516: LD_ADDR_VAR 0 2
10520: PUSH
10521: DOUBLE
10522: LD_INT 1
10524: DEC
10525: ST_TO_ADDR
10526: LD_INT 8
10528: PUSH
10529: FOR_TO
10530: IFFALSE 10652
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
10532: LD_EXP 16
10536: PUSH
10537: LD_VAR 0 2
10541: ARRAY
10542: PUSH
10543: LD_VAR 0 2
10547: PPUSH
10548: CALL_OW 108
10552: AND
10553: PUSH
10554: LD_VAR 0 2
10558: PUSH
10559: LD_OWVAR 2
10563: NONEQUAL
10564: AND
10565: IFFALSE 10650
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
10567: LD_EXP 17
10571: PUSH
10572: LD_VAR 0 2
10576: ARRAY
10577: NOT
10578: PUSH
10579: LD_EXP 17
10583: PUSH
10584: LD_VAR 0 2
10588: ARRAY
10589: PUSH
10590: LD_EXP 17
10594: PUSH
10595: LD_OWVAR 2
10599: ARRAY
10600: NONEQUAL
10601: PUSH
10602: LD_OWVAR 2
10606: PPUSH
10607: LD_VAR 0 2
10611: PPUSH
10612: CALL_OW 81
10616: PUSH
10617: LD_INT 1
10619: NONEQUAL
10620: AND
10621: OR
10622: IFFALSE 10650
// if HasPowerByGameType ( mpGameType , i ) then
10624: LD_EXP 12
10628: PPUSH
10629: LD_VAR 0 2
10633: PPUSH
10634: CALL 10133 0 2
10638: IFFALSE 10650
// begin gameIsOn := true ;
10640: LD_ADDR_VAR 0 1
10644: PUSH
10645: LD_INT 1
10647: ST_TO_ADDR
// break ;
10648: GO 10652
// end ;
10650: GO 10529
10652: POP
10653: POP
// wait ( 100 ) ;
10654: LD_INT 100
10656: PPUSH
10657: CALL_OW 67
// until not gameIsOn ;
10661: LD_VAR 0 1
10665: NOT
10666: IFFALSE 10508
// if IAmServer then
10668: CALL_OW 518
10672: IFFALSE 10681
// wait ( 0 0$3 ) ;
10674: LD_INT 105
10676: PPUSH
10677: CALL_OW 67
// if Multiplayer then
10681: LD_OWVAR 4
10685: IFFALSE 10693
// YouLostInMultiplayer else
10687: CALL_OW 107
10691: GO 10700
// YouLost (  ) ;
10693: LD_STRING 
10695: PPUSH
10696: CALL_OW 104
// end ;
10700: PPOPN 2
10702: END
// every 0 0$10 trigger mpRespawn marked mpActive do var i , j , tmp , spawn , sides ;
10703: LD_EXP 42
10707: IFFALSE 11083
10709: GO 10711
10711: DISABLE
10712: LD_INT 0
10714: PPUSH
10715: PPUSH
10716: PPUSH
10717: PPUSH
10718: PPUSH
// begin sides := [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 ] ;
10719: LD_ADDR_VAR 0 5
10723: PUSH
10724: LD_INT 1
10726: PUSH
10727: LD_INT 2
10729: PUSH
10730: LD_INT 3
10732: PUSH
10733: LD_INT 4
10735: PUSH
10736: LD_INT 5
10738: PUSH
10739: LD_INT 6
10741: PUSH
10742: LD_INT 7
10744: PUSH
10745: LD_INT 8
10747: PUSH
10748: EMPTY
10749: LIST
10750: LIST
10751: LIST
10752: LIST
10753: LIST
10754: LIST
10755: LIST
10756: LIST
10757: ST_TO_ADDR
// repeat wait ( 0 0$10 ) ;
10758: LD_INT 350
10760: PPUSH
10761: CALL_OW 67
// for i := 1 to 8 do
10765: LD_ADDR_VAR 0 1
10769: PUSH
10770: DOUBLE
10771: LD_INT 1
10773: DEC
10774: ST_TO_ADDR
10775: LD_INT 8
10777: PUSH
10778: FOR_TO
10779: IFFALSE 11053
// begin j := sides [ i ] ;
10781: LD_ADDR_VAR 0 2
10785: PUSH
10786: LD_VAR 0 5
10790: PUSH
10791: LD_VAR 0 1
10795: ARRAY
10796: ST_TO_ADDR
// if Count ( mpRespawnPull [ j ] ) and MultiplayerSideAlive ( j ) and HasPowerByGameType ( mpGameType , j ) then
10797: LD_EXP 49
10801: PUSH
10802: LD_VAR 0 2
10806: ARRAY
10807: PPUSH
10808: CALL 23187 0 1
10812: PUSH
10813: LD_VAR 0 2
10817: PPUSH
10818: CALL_OW 108
10822: AND
10823: PUSH
10824: LD_EXP 12
10828: PPUSH
10829: LD_VAR 0 2
10833: PPUSH
10834: CALL 10133 0 2
10838: AND
10839: IFFALSE 11051
// begin wait ( mpRespawn div 3 ) ;
10841: LD_EXP 42
10845: PUSH
10846: LD_INT 3
10848: DIV
10849: PPUSH
10850: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , j ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
10854: LD_ADDR_VAR 0 3
10858: PUSH
10859: LD_INT 22
10861: PUSH
10862: LD_VAR 0 2
10866: PUSH
10867: EMPTY
10868: LIST
10869: LIST
10870: PUSH
10871: LD_INT 50
10873: PUSH
10874: EMPTY
10875: LIST
10876: PUSH
10877: LD_INT 2
10879: PUSH
10880: LD_INT 30
10882: PUSH
10883: LD_INT 0
10885: PUSH
10886: EMPTY
10887: LIST
10888: LIST
10889: PUSH
10890: LD_INT 30
10892: PUSH
10893: LD_INT 1
10895: PUSH
10896: EMPTY
10897: LIST
10898: LIST
10899: PUSH
10900: EMPTY
10901: LIST
10902: LIST
10903: LIST
10904: PUSH
10905: EMPTY
10906: LIST
10907: LIST
10908: LIST
10909: PPUSH
10910: CALL_OW 69
10914: ST_TO_ADDR
// if not tmp or not MultiplayerSideAlive ( j ) or not HasPowerByGameType ( mpGameType , j ) then
10915: LD_VAR 0 3
10919: NOT
10920: PUSH
10921: LD_VAR 0 2
10925: PPUSH
10926: CALL_OW 108
10930: NOT
10931: OR
10932: PUSH
10933: LD_EXP 12
10937: PPUSH
10938: LD_VAR 0 2
10942: PPUSH
10943: CALL 10133 0 2
10947: NOT
10948: OR
10949: IFFALSE 10953
// continue ;
10951: GO 10778
// spawn := tmp [ 1 ] ;
10953: LD_ADDR_VAR 0 4
10957: PUSH
10958: LD_VAR 0 3
10962: PUSH
10963: LD_INT 1
10965: ARRAY
10966: ST_TO_ADDR
// PlaceUnitXYR ( mpRespawnPull [ j ] [ 1 ] , GetX ( spawn ) , GetY ( spawn ) , 32 , true ) ;
10967: LD_EXP 49
10971: PUSH
10972: LD_VAR 0 2
10976: ARRAY
10977: PUSH
10978: LD_INT 1
10980: ARRAY
10981: PPUSH
10982: LD_VAR 0 4
10986: PPUSH
10987: CALL_OW 250
10991: PPUSH
10992: LD_VAR 0 4
10996: PPUSH
10997: CALL_OW 251
11001: PPUSH
11002: LD_INT 32
11004: PPUSH
11005: LD_INT 1
11007: PPUSH
11008: CALL_OW 50
// mpRespawnPull := Replace ( mpRespawnPull , j , Delete ( mpRespawnPull [ j ] , 1 ) ) ;
11012: LD_ADDR_EXP 49
11016: PUSH
11017: LD_EXP 49
11021: PPUSH
11022: LD_VAR 0 2
11026: PPUSH
11027: LD_EXP 49
11031: PUSH
11032: LD_VAR 0 2
11036: ARRAY
11037: PPUSH
11038: LD_INT 1
11040: PPUSH
11041: CALL_OW 3
11045: PPUSH
11046: CALL_OW 1
11050: ST_TO_ADDR
// end ; end ;
11051: GO 10778
11053: POP
11054: POP
// sides := Reindex ( sides , 1 , 8 , true ) ;
11055: LD_ADDR_VAR 0 5
11059: PUSH
11060: LD_VAR 0 5
11064: PPUSH
11065: LD_INT 1
11067: PPUSH
11068: LD_INT 8
11070: PPUSH
11071: LD_INT 1
11073: PPUSH
11074: CALL 25465 0 4
11078: ST_TO_ADDR
// until false ;
11079: LD_INT 0
11081: IFFALSE 10758
// end ;
11083: PPOPN 5
11085: END
// every 0 0$1 marked mpActive do
11086: GO 11088
11088: DISABLE
// begin enable ;
11089: ENABLE
// if not mpDisplayStrings then
11090: LD_EXP 47
11094: NOT
11095: IFFALSE 11106
// begin display_strings := [ ] ;
11097: LD_ADDR_OWVAR 47
11101: PUSH
11102: EMPTY
11103: ST_TO_ADDR
// exit ;
11104: GO 11116
// end ; display_strings := mpDisplayStrings ;
11106: LD_ADDR_OWVAR 47
11110: PUSH
11111: LD_EXP 47
11115: ST_TO_ADDR
// end ; end_of_file
11116: END
// export function Multiplayer_UnitDestroyed ( un ) ; var i , ape , tag , class , area , nation , side , tmp ; begin
11117: LD_INT 0
11119: PPUSH
11120: PPUSH
11121: PPUSH
11122: PPUSH
11123: PPUSH
11124: PPUSH
11125: PPUSH
11126: PPUSH
11127: PPUSH
// if GetType ( un ) = unit_vehicle then
11128: LD_VAR 0 1
11132: PPUSH
11133: CALL_OW 247
11137: PUSH
11138: LD_INT 2
11140: EQUAL
11141: IFFALSE 11145
// exit ;
11143: GO 11777
// side := GetSide ( un ) ;
11145: LD_ADDR_VAR 0 9
11149: PUSH
11150: LD_VAR 0 1
11154: PPUSH
11155: CALL_OW 255
11159: ST_TO_ADDR
// if mpGameType = GameTypeSurvival then
11160: LD_EXP 12
11164: PUSH
11165: LD_INT 2
11167: EQUAL
11168: IFFALSE 11244
// if GetBType ( un ) in [ b_depot , b_warehouse ] then
11170: LD_VAR 0 1
11174: PPUSH
11175: CALL_OW 266
11179: PUSH
11180: LD_INT 0
11182: PUSH
11183: LD_INT 1
11185: PUSH
11186: EMPTY
11187: LIST
11188: LIST
11189: IN
11190: IFFALSE 11244
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_human ] ] ) do
11192: LD_ADDR_VAR 0 3
11196: PUSH
11197: LD_INT 22
11199: PUSH
11200: LD_VAR 0 9
11204: PUSH
11205: EMPTY
11206: LIST
11207: LIST
11208: PUSH
11209: LD_INT 21
11211: PUSH
11212: LD_INT 1
11214: PUSH
11215: EMPTY
11216: LIST
11217: LIST
11218: PUSH
11219: EMPTY
11220: LIST
11221: LIST
11222: PPUSH
11223: CALL_OW 69
11227: PUSH
11228: FOR_IN
11229: IFFALSE 11242
// KillUnit ( i ) ;
11231: LD_VAR 0 3
11235: PPUSH
11236: CALL_OW 66
11240: GO 11228
11242: POP
11243: POP
// end ; if GetClass ( un ) in [ class_apeman , class_apeman_kamikaze , class_apeman_soldier , class_apeman_engineer ] or GetControl ( un ) = control_apeman then
11244: LD_VAR 0 1
11248: PPUSH
11249: CALL_OW 257
11253: PUSH
11254: LD_INT 12
11256: PUSH
11257: LD_INT 17
11259: PUSH
11260: LD_INT 15
11262: PUSH
11263: LD_INT 16
11265: PUSH
11266: EMPTY
11267: LIST
11268: LIST
11269: LIST
11270: LIST
11271: IN
11272: PUSH
11273: LD_VAR 0 1
11277: PPUSH
11278: CALL_OW 263
11282: PUSH
11283: LD_INT 5
11285: EQUAL
11286: OR
11287: IFFALSE 11506
// begin tag := 0 ;
11289: LD_ADDR_VAR 0 5
11293: PUSH
11294: LD_INT 0
11296: ST_TO_ADDR
// for i := 1 to 8 do
11297: LD_ADDR_VAR 0 3
11301: PUSH
11302: DOUBLE
11303: LD_INT 1
11305: DEC
11306: ST_TO_ADDR
11307: LD_INT 8
11309: PUSH
11310: FOR_TO
11311: IFFALSE 11345
// if un in mpApePosIndex [ i ] then
11313: LD_VAR 0 1
11317: PUSH
11318: LD_EXP 41
11322: PUSH
11323: LD_VAR 0 3
11327: ARRAY
11328: IN
11329: IFFALSE 11343
// begin tag := i ;
11331: LD_ADDR_VAR 0 5
11335: PUSH
11336: LD_VAR 0 3
11340: ST_TO_ADDR
// break ;
11341: GO 11345
// end ;
11343: GO 11310
11345: POP
11346: POP
// if not tag then
11347: LD_VAR 0 5
11351: NOT
11352: IFFALSE 11356
// exit ;
11354: GO 11777
// area := mpApemansArea [ mpSidePositions [ tag ] ] ;
11356: LD_ADDR_VAR 0 7
11360: PUSH
11361: LD_EXP 40
11365: PUSH
11366: LD_EXP 16
11370: PUSH
11371: LD_VAR 0 5
11375: ARRAY
11376: ARRAY
11377: ST_TO_ADDR
// if not area then
11378: LD_VAR 0 7
11382: NOT
11383: IFFALSE 11387
// exit ;
11385: GO 11777
// wait ( 4 4$00 ) ;
11387: LD_INT 8400
11389: PPUSH
11390: CALL_OW 67
// repeat wait ( 10 ) ;
11394: LD_INT 10
11396: PPUSH
11397: CALL_OW 67
// until not mpBlockRespThread ;
11401: LD_EXP 54
11405: NOT
11406: IFFALSE 11394
// mpBlockRespThread := true ;
11408: LD_ADDR_EXP 54
11412: PUSH
11413: LD_INT 1
11415: ST_TO_ADDR
// PrepareApeman ( 0 ) ;
11416: LD_INT 0
11418: PPUSH
11419: CALL 55044 0 1
// ape := CreateHuman ;
11423: LD_ADDR_VAR 0 4
11427: PUSH
11428: CALL_OW 44
11432: ST_TO_ADDR
// mpApePosIndex := Replace ( mpApePosIndex , tag , Join ( mpApePosIndex [ tag ] , ape ) ) ;
11433: LD_ADDR_EXP 41
11437: PUSH
11438: LD_EXP 41
11442: PPUSH
11443: LD_VAR 0 5
11447: PPUSH
11448: LD_EXP 41
11452: PUSH
11453: LD_VAR 0 5
11457: ARRAY
11458: PPUSH
11459: LD_VAR 0 4
11463: PPUSH
11464: CALL 58796 0 2
11468: PPUSH
11469: CALL_OW 1
11473: ST_TO_ADDR
// PlaceUnitArea ( ape , area , false ) ;
11474: LD_VAR 0 4
11478: PPUSH
11479: LD_VAR 0 7
11483: PPUSH
11484: LD_INT 0
11486: PPUSH
11487: CALL_OW 49
// wait ( 10 ) ;
11491: LD_INT 10
11493: PPUSH
11494: CALL_OW 67
// mpBlockRespThread := false ;
11498: LD_ADDR_EXP 54
11502: PUSH
11503: LD_INT 0
11505: ST_TO_ADDR
// end ; if GetType ( un ) = unit_human and GetNation ( un ) > nation_nature then
11506: LD_VAR 0 1
11510: PPUSH
11511: CALL_OW 247
11515: PUSH
11516: LD_INT 1
11518: EQUAL
11519: PUSH
11520: LD_VAR 0 1
11524: PPUSH
11525: CALL_OW 248
11529: PUSH
11530: LD_INT 0
11532: GREATER
11533: AND
11534: IFFALSE 11777
// begin if not mpRespawn then
11536: LD_EXP 42
11540: NOT
11541: IFFALSE 11545
// exit ;
11543: GO 11777
// if not MultiplayerSideAlive ( side ) and not HasPowerByGameType ( mpGameType , side ) then
11545: LD_VAR 0 9
11549: PPUSH
11550: CALL_OW 108
11554: NOT
11555: PUSH
11556: LD_EXP 12
11560: PPUSH
11561: LD_VAR 0 9
11565: PPUSH
11566: CALL 10133 0 2
11570: NOT
11571: AND
11572: IFFALSE 11576
// exit ;
11574: GO 11777
// side := GetSide ( un ) ;
11576: LD_ADDR_VAR 0 9
11580: PUSH
11581: LD_VAR 0 1
11585: PPUSH
11586: CALL_OW 255
11590: ST_TO_ADDR
// nation := GetNation ( un ) ;
11591: LD_ADDR_VAR 0 8
11595: PUSH
11596: LD_VAR 0 1
11600: PPUSH
11601: CALL_OW 248
11605: ST_TO_ADDR
// class := GetClass ( un ) ;
11606: LD_ADDR_VAR 0 6
11610: PUSH
11611: LD_VAR 0 1
11615: PPUSH
11616: CALL_OW 257
11620: ST_TO_ADDR
// if class > 4 then
11621: LD_VAR 0 6
11625: PUSH
11626: LD_INT 4
11628: GREATER
11629: IFFALSE 11639
// class := 1 ;
11631: LD_ADDR_VAR 0 6
11635: PUSH
11636: LD_INT 1
11638: ST_TO_ADDR
// repeat wait ( 10 ) ;
11639: LD_INT 10
11641: PPUSH
11642: CALL_OW 67
// until not mpBlockRespThread ;
11646: LD_EXP 54
11650: NOT
11651: IFFALSE 11639
// mpBlockRespThread := true ;
11653: LD_ADDR_EXP 54
11657: PUSH
11658: LD_INT 1
11660: ST_TO_ADDR
// uc_side := side ;
11661: LD_ADDR_OWVAR 20
11665: PUSH
11666: LD_VAR 0 9
11670: ST_TO_ADDR
// uc_nation := nation ;
11671: LD_ADDR_OWVAR 21
11675: PUSH
11676: LD_VAR 0 8
11680: ST_TO_ADDR
// PrepareHuman ( false , class , 2 ) ;
11681: LD_INT 0
11683: PPUSH
11684: LD_VAR 0 6
11688: PPUSH
11689: LD_INT 2
11691: PPUSH
11692: CALL_OW 380
// un := CreateHuman ;
11696: LD_ADDR_VAR 0 1
11700: PUSH
11701: CALL_OW 44
11705: ST_TO_ADDR
// mpRespawnPull := Replace ( mpRespawnPull , side , Replace ( mpRespawnPull [ side ] , mpRespawnPull [ side ] + 1 , un ) ) ;
11706: LD_ADDR_EXP 49
11710: PUSH
11711: LD_EXP 49
11715: PPUSH
11716: LD_VAR 0 9
11720: PPUSH
11721: LD_EXP 49
11725: PUSH
11726: LD_VAR 0 9
11730: ARRAY
11731: PPUSH
11732: LD_EXP 49
11736: PUSH
11737: LD_VAR 0 9
11741: ARRAY
11742: PUSH
11743: LD_INT 1
11745: PLUS
11746: PPUSH
11747: LD_VAR 0 1
11751: PPUSH
11752: CALL_OW 1
11756: PPUSH
11757: CALL_OW 1
11761: ST_TO_ADDR
// wait ( 10 ) ;
11762: LD_INT 10
11764: PPUSH
11765: CALL_OW 67
// mpBlockRespThread := false ;
11769: LD_ADDR_EXP 54
11773: PUSH
11774: LD_INT 0
11776: ST_TO_ADDR
// end ; end ;
11777: LD_VAR 0 2
11781: RET
// export function Multiplayer_BuildingComplete ( building ) ; begin
11782: LD_INT 0
11784: PPUSH
// if GetBType ( building ) in [ b_depot , b_warehouse ] then
11785: LD_VAR 0 1
11789: PPUSH
11790: CALL_OW 266
11794: PUSH
11795: LD_INT 0
11797: PUSH
11798: LD_INT 1
11800: PUSH
11801: EMPTY
11802: LIST
11803: LIST
11804: IN
11805: IFFALSE 11830
// SetBName ( building , @ & GetSide ( building ) ) ;
11807: LD_VAR 0 1
11811: PPUSH
11812: LD_STRING @
11814: PUSH
11815: LD_VAR 0 1
11819: PPUSH
11820: CALL_OW 255
11824: STR
11825: PPUSH
11826: CALL_OW 500
// end ;
11830: LD_VAR 0 2
11834: RET
// export function Multiplayer_BuildingCaptured ( building , oldSide , unit ) ; var i ; begin
11835: LD_INT 0
11837: PPUSH
11838: PPUSH
// if mpGameType = GameTypeSurvival and GetBType ( building ) in [ b_depot , b_warehouse ] then
11839: LD_EXP 12
11843: PUSH
11844: LD_INT 2
11846: EQUAL
11847: PUSH
11848: LD_VAR 0 1
11852: PPUSH
11853: CALL_OW 266
11857: PUSH
11858: LD_INT 0
11860: PUSH
11861: LD_INT 1
11863: PUSH
11864: EMPTY
11865: LIST
11866: LIST
11867: IN
11868: AND
11869: IFFALSE 11934
// begin KillUnit ( building ) ;
11871: LD_VAR 0 1
11875: PPUSH
11876: CALL_OW 66
// for i in FilterAllUnits ( [ [ f_side , oldSide ] , [ f_type , unit_human ] ] ) do
11880: LD_ADDR_VAR 0 5
11884: PUSH
11885: LD_INT 22
11887: PUSH
11888: LD_VAR 0 2
11892: PUSH
11893: EMPTY
11894: LIST
11895: LIST
11896: PUSH
11897: LD_INT 21
11899: PUSH
11900: LD_INT 1
11902: PUSH
11903: EMPTY
11904: LIST
11905: LIST
11906: PUSH
11907: EMPTY
11908: LIST
11909: LIST
11910: PPUSH
11911: CALL_OW 69
11915: PUSH
11916: FOR_IN
11917: IFFALSE 11930
// KillUnit ( i ) ;
11919: LD_VAR 0 5
11923: PPUSH
11924: CALL_OW 66
11928: GO 11916
11930: POP
11931: POP
// exit ;
11932: GO 11979
// end ; if GetBType ( building ) in [ b_depot , b_warehouse ] then
11934: LD_VAR 0 1
11938: PPUSH
11939: CALL_OW 266
11943: PUSH
11944: LD_INT 0
11946: PUSH
11947: LD_INT 1
11949: PUSH
11950: EMPTY
11951: LIST
11952: LIST
11953: IN
11954: IFFALSE 11979
// SetBName ( building , @ & GetSide ( building ) ) ;
11956: LD_VAR 0 1
11960: PPUSH
11961: LD_STRING @
11963: PUSH
11964: LD_VAR 0 1
11968: PPUSH
11969: CALL_OW 255
11973: STR
11974: PPUSH
11975: CALL_OW 500
// end ;
11979: LD_VAR 0 4
11983: RET
// export function Multiplayer_OilExtracted ( building , side , base , amount ) ; var i , value ; begin
11984: LD_INT 0
11986: PPUSH
11987: PPUSH
11988: PPUSH
// if mpGameType <> GameTypeFamine then
11989: LD_EXP 12
11993: PUSH
11994: LD_INT 5
11996: NONEQUAL
11997: IFFALSE 12001
// exit ;
11999: GO 12215
// for i := 1 to mpGlobalOilDeposits do
12001: LD_ADDR_VAR 0 6
12005: PUSH
12006: DOUBLE
12007: LD_INT 1
12009: DEC
12010: ST_TO_ADDR
12011: LD_EXP 50
12015: PUSH
12016: FOR_TO
12017: IFFALSE 12213
// begin if HexInfo ( mpGlobalOilDeposits [ i ] [ 1 ] , mpGlobalOilDeposits [ i ] [ 2 ] ) = building then
12019: LD_EXP 50
12023: PUSH
12024: LD_VAR 0 6
12028: ARRAY
12029: PUSH
12030: LD_INT 1
12032: ARRAY
12033: PPUSH
12034: LD_EXP 50
12038: PUSH
12039: LD_VAR 0 6
12043: ARRAY
12044: PUSH
12045: LD_INT 2
12047: ARRAY
12048: PPUSH
12049: CALL_OW 428
12053: PUSH
12054: LD_VAR 0 1
12058: EQUAL
12059: IFFALSE 12211
// begin value := mpGlobalOilDeposits [ i ] [ 3 ] ;
12061: LD_ADDR_VAR 0 7
12065: PUSH
12066: LD_EXP 50
12070: PUSH
12071: LD_VAR 0 6
12075: ARRAY
12076: PUSH
12077: LD_INT 3
12079: ARRAY
12080: ST_TO_ADDR
// value := Dec ( value ) ;
12081: LD_ADDR_VAR 0 7
12085: PUSH
12086: LD_VAR 0 7
12090: PPUSH
12091: CALL 60179 0 1
12095: ST_TO_ADDR
// mpGlobalOilDeposits := Replace ( mpGlobalOilDeposits , i , Replace ( mpGlobalOilDeposits [ i ] , 3 , value ) ) ;
12096: LD_ADDR_EXP 50
12100: PUSH
12101: LD_EXP 50
12105: PPUSH
12106: LD_VAR 0 6
12110: PPUSH
12111: LD_EXP 50
12115: PUSH
12116: LD_VAR 0 6
12120: ARRAY
12121: PPUSH
12122: LD_INT 3
12124: PPUSH
12125: LD_VAR 0 7
12129: PPUSH
12130: CALL_OW 1
12134: PPUSH
12135: CALL_OW 1
12139: ST_TO_ADDR
// SetUnitDisplayNumber ( building , value ) ;
12140: LD_VAR 0 1
12144: PPUSH
12145: LD_VAR 0 7
12149: PPUSH
12150: CALL_OW 505
// if value = 0 then
12154: LD_VAR 0 7
12158: PUSH
12159: LD_INT 0
12161: EQUAL
12162: IFFALSE 12211
// begin RemoveDepositXY ( mpGlobalOilDeposits [ i ] [ 1 ] , mpGlobalOilDeposits [ i ] [ 2 ] ) ;
12164: LD_EXP 50
12168: PUSH
12169: LD_VAR 0 6
12173: ARRAY
12174: PUSH
12175: LD_INT 1
12177: ARRAY
12178: PPUSH
12179: LD_EXP 50
12183: PUSH
12184: LD_VAR 0 6
12188: ARRAY
12189: PUSH
12190: LD_INT 2
12192: ARRAY
12193: PPUSH
12194: CALL_OW 63
// KillUnit ( building ) ;
12198: LD_VAR 0 1
12202: PPUSH
12203: CALL_OW 66
// exit ;
12207: POP
12208: POP
12209: GO 12215
// end ; end ; end ;
12211: GO 12016
12213: POP
12214: POP
// end ;
12215: LD_VAR 0 5
12219: RET
// export function Multiplayer_SibExtracted ( building , side , base , amount ) ; var i , value ; begin
12220: LD_INT 0
12222: PPUSH
12223: PPUSH
12224: PPUSH
// if mpGameType <> GameTypeFamine then
12225: LD_EXP 12
12229: PUSH
12230: LD_INT 5
12232: NONEQUAL
12233: IFFALSE 12237
// exit ;
12235: GO 12451
// for i := 1 to mpGlobalSibDeposits do
12237: LD_ADDR_VAR 0 6
12241: PUSH
12242: DOUBLE
12243: LD_INT 1
12245: DEC
12246: ST_TO_ADDR
12247: LD_EXP 51
12251: PUSH
12252: FOR_TO
12253: IFFALSE 12449
// begin if HexInfo ( mpGlobalSibDeposits [ i ] [ 1 ] , mpGlobalSibDeposits [ i ] [ 2 ] ) = building then
12255: LD_EXP 51
12259: PUSH
12260: LD_VAR 0 6
12264: ARRAY
12265: PUSH
12266: LD_INT 1
12268: ARRAY
12269: PPUSH
12270: LD_EXP 51
12274: PUSH
12275: LD_VAR 0 6
12279: ARRAY
12280: PUSH
12281: LD_INT 2
12283: ARRAY
12284: PPUSH
12285: CALL_OW 428
12289: PUSH
12290: LD_VAR 0 1
12294: EQUAL
12295: IFFALSE 12447
// begin value := mpGlobalSibDeposits [ i ] [ 3 ] ;
12297: LD_ADDR_VAR 0 7
12301: PUSH
12302: LD_EXP 51
12306: PUSH
12307: LD_VAR 0 6
12311: ARRAY
12312: PUSH
12313: LD_INT 3
12315: ARRAY
12316: ST_TO_ADDR
// value := Dec ( value ) ;
12317: LD_ADDR_VAR 0 7
12321: PUSH
12322: LD_VAR 0 7
12326: PPUSH
12327: CALL 60179 0 1
12331: ST_TO_ADDR
// mpGlobalSibDeposits := Replace ( mpGlobalSibDeposits , i , Replace ( mpGlobalSibDeposits [ i ] , 3 , value ) ) ;
12332: LD_ADDR_EXP 51
12336: PUSH
12337: LD_EXP 51
12341: PPUSH
12342: LD_VAR 0 6
12346: PPUSH
12347: LD_EXP 51
12351: PUSH
12352: LD_VAR 0 6
12356: ARRAY
12357: PPUSH
12358: LD_INT 3
12360: PPUSH
12361: LD_VAR 0 7
12365: PPUSH
12366: CALL_OW 1
12370: PPUSH
12371: CALL_OW 1
12375: ST_TO_ADDR
// SetUnitDisplayNumber ( building , value ) ;
12376: LD_VAR 0 1
12380: PPUSH
12381: LD_VAR 0 7
12385: PPUSH
12386: CALL_OW 505
// if value = 0 then
12390: LD_VAR 0 7
12394: PUSH
12395: LD_INT 0
12397: EQUAL
12398: IFFALSE 12447
// begin RemoveDepositXY ( mpGlobalSibDeposits [ i ] [ 1 ] , mpGlobalSibDeposits [ i ] [ 2 ] ) ;
12400: LD_EXP 51
12404: PUSH
12405: LD_VAR 0 6
12409: ARRAY
12410: PUSH
12411: LD_INT 1
12413: ARRAY
12414: PPUSH
12415: LD_EXP 51
12419: PUSH
12420: LD_VAR 0 6
12424: ARRAY
12425: PUSH
12426: LD_INT 2
12428: ARRAY
12429: PPUSH
12430: CALL_OW 63
// KillUnit ( building ) ;
12434: LD_VAR 0 1
12438: PPUSH
12439: CALL_OW 66
// exit ;
12443: POP
12444: POP
12445: GO 12451
// end ; end ; end ;
12447: GO 12252
12449: POP
12450: POP
// end ; end_of_file
12451: LD_VAR 0 5
12455: RET
// export mpKingPoints ; every 0 0$1 trigger mpGameActive marked GameTypeKing do var i , j , tmp ;
12456: LD_EXP 48
12460: IFFALSE 12801
12462: GO 12464
12464: DISABLE
12465: LD_INT 0
12467: PPUSH
12468: PPUSH
12469: PPUSH
// begin mpKingPoints := [ ] ;
12470: LD_ADDR_EXP 57
12474: PUSH
12475: EMPTY
12476: ST_TO_ADDR
// if mpTeamGame then
12477: LD_EXP 20
12481: IFFALSE 12535
// begin for i := 1 to Count ( mpTeams ) do
12483: LD_ADDR_VAR 0 1
12487: PUSH
12488: DOUBLE
12489: LD_INT 1
12491: DEC
12492: ST_TO_ADDR
12493: LD_EXP 19
12497: PPUSH
12498: CALL 23187 0 1
12502: PUSH
12503: FOR_TO
12504: IFFALSE 12531
// mpKingPoints := Replace ( mpKingPoints , i , 0 ) ;
12506: LD_ADDR_EXP 57
12510: PUSH
12511: LD_EXP 57
12515: PPUSH
12516: LD_VAR 0 1
12520: PPUSH
12521: LD_INT 0
12523: PPUSH
12524: CALL_OW 1
12528: ST_TO_ADDR
12529: GO 12503
12531: POP
12532: POP
// end else
12533: GO 12578
// begin for i := 1 to 8 do
12535: LD_ADDR_VAR 0 1
12539: PUSH
12540: DOUBLE
12541: LD_INT 1
12543: DEC
12544: ST_TO_ADDR
12545: LD_INT 8
12547: PUSH
12548: FOR_TO
12549: IFFALSE 12576
// mpKingPoints := Replace ( mpKingPoints , i , 0 ) ;
12551: LD_ADDR_EXP 57
12555: PUSH
12556: LD_EXP 57
12560: PPUSH
12561: LD_VAR 0 1
12565: PPUSH
12566: LD_INT 0
12568: PPUSH
12569: CALL_OW 1
12573: ST_TO_ADDR
12574: GO 12548
12576: POP
12577: POP
// end ; tmp := AreaToList ( kingCamArea , 0 ) ;
12578: LD_ADDR_VAR 0 3
12582: PUSH
12583: LD_EXP 2
12587: PPUSH
12588: LD_INT 0
12590: PPUSH
12591: CALL_OW 517
12595: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
12596: LD_ADDR_VAR 0 1
12600: PUSH
12601: DOUBLE
12602: LD_INT 1
12604: DEC
12605: ST_TO_ADDR
12606: LD_VAR 0 3
12610: PUSH
12611: LD_INT 1
12613: ARRAY
12614: PUSH
12615: FOR_TO
12616: IFFALSE 12683
// for j := 1 to 8 do
12618: LD_ADDR_VAR 0 2
12622: PUSH
12623: DOUBLE
12624: LD_INT 1
12626: DEC
12627: ST_TO_ADDR
12628: LD_INT 8
12630: PUSH
12631: FOR_TO
12632: IFFALSE 12679
// PlaceSeeing ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , j , - 12 ) ;
12634: LD_VAR 0 3
12638: PUSH
12639: LD_INT 1
12641: ARRAY
12642: PUSH
12643: LD_VAR 0 1
12647: ARRAY
12648: PPUSH
12649: LD_VAR 0 3
12653: PUSH
12654: LD_INT 2
12656: ARRAY
12657: PUSH
12658: LD_VAR 0 1
12662: ARRAY
12663: PPUSH
12664: LD_VAR 0 2
12668: PPUSH
12669: LD_INT 12
12671: NEG
12672: PPUSH
12673: CALL_OW 330
12677: GO 12631
12679: POP
12680: POP
12681: GO 12615
12683: POP
12684: POP
// SetAreaMapShow ( mpKingArea , 1 ) ;
12685: LD_EXP 43
12689: PPUSH
12690: LD_INT 1
12692: PPUSH
12693: CALL_OW 424
// UpdateCounter ;
12697: CALL 13305 0 0
// repeat wait ( 0 0$1 ) ;
12701: LD_INT 35
12703: PPUSH
12704: CALL_OW 67
// tmp := FilterUnitsInArea ( mpKingArea , [ [ f_not , [ f_constructed ] ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
12708: LD_ADDR_VAR 0 3
12712: PUSH
12713: LD_EXP 43
12717: PPUSH
12718: LD_INT 3
12720: PUSH
12721: LD_INT 57
12723: PUSH
12724: EMPTY
12725: LIST
12726: PUSH
12727: EMPTY
12728: LIST
12729: LIST
12730: PUSH
12731: LD_INT 50
12733: PUSH
12734: EMPTY
12735: LIST
12736: PUSH
12737: LD_INT 2
12739: PUSH
12740: LD_INT 30
12742: PUSH
12743: LD_INT 0
12745: PUSH
12746: EMPTY
12747: LIST
12748: LIST
12749: PUSH
12750: LD_INT 30
12752: PUSH
12753: LD_INT 1
12755: PUSH
12756: EMPTY
12757: LIST
12758: LIST
12759: PUSH
12760: EMPTY
12761: LIST
12762: LIST
12763: LIST
12764: PUSH
12765: EMPTY
12766: LIST
12767: LIST
12768: LIST
12769: PPUSH
12770: CALL_OW 70
12774: ST_TO_ADDR
// if not tmp then
12775: LD_VAR 0 3
12779: NOT
12780: IFFALSE 12784
// continue ;
12782: GO 12701
// AddPoints ( tmp ) ;
12784: LD_VAR 0 3
12788: PPUSH
12789: CALL 12983 0 1
// UpdateCounter ;
12793: CALL 13305 0 0
// until false ;
12797: LD_INT 0
12799: IFFALSE 12701
// end ;
12801: PPOPN 3
12803: END
// every 0 0$1 trigger mpGameActive and mpEmissions marked GameTypeKing do var i , tmp ;
12804: LD_EXP 48
12808: PUSH
12809: LD_EXP 46
12813: AND
12814: IFFALSE 12980
12816: GO 12818
12818: DISABLE
12819: LD_INT 0
12821: PPUSH
12822: PPUSH
// begin tmp := AreaToList ( kingCamArea , 0 ) ;
12823: LD_ADDR_VAR 0 2
12827: PUSH
12828: LD_EXP 2
12832: PPUSH
12833: LD_INT 0
12835: PPUSH
12836: CALL_OW 517
12840: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
12841: LD_ADDR_VAR 0 1
12845: PUSH
12846: DOUBLE
12847: LD_INT 1
12849: DEC
12850: ST_TO_ADDR
12851: LD_VAR 0 2
12855: PUSH
12856: LD_INT 1
12858: ARRAY
12859: PUSH
12860: FOR_TO
12861: IFFALSE 12902
// ArtContamination ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 125 ) ;
12863: LD_VAR 0 2
12867: PUSH
12868: LD_INT 1
12870: ARRAY
12871: PUSH
12872: LD_VAR 0 1
12876: ARRAY
12877: PPUSH
12878: LD_VAR 0 2
12882: PUSH
12883: LD_INT 2
12885: ARRAY
12886: PUSH
12887: LD_VAR 0 1
12891: ARRAY
12892: PPUSH
12893: LD_INT 125
12895: PPUSH
12896: CALL_OW 495
12900: GO 12860
12902: POP
12903: POP
// repeat wait ( mpEmissions ) ;
12904: LD_EXP 46
12908: PPUSH
12909: CALL_OW 67
// for i := 1 to tmp [ 1 ] do
12913: LD_ADDR_VAR 0 1
12917: PUSH
12918: DOUBLE
12919: LD_INT 1
12921: DEC
12922: ST_TO_ADDR
12923: LD_VAR 0 2
12927: PUSH
12928: LD_INT 1
12930: ARRAY
12931: PUSH
12932: FOR_TO
12933: IFFALSE 12974
// ArtContamination ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 15 ) ;
12935: LD_VAR 0 2
12939: PUSH
12940: LD_INT 1
12942: ARRAY
12943: PUSH
12944: LD_VAR 0 1
12948: ARRAY
12949: PPUSH
12950: LD_VAR 0 2
12954: PUSH
12955: LD_INT 2
12957: ARRAY
12958: PUSH
12959: LD_VAR 0 1
12963: ARRAY
12964: PPUSH
12965: LD_INT 15
12967: PPUSH
12968: CALL_OW 495
12972: GO 12932
12974: POP
12975: POP
// until false ;
12976: LD_INT 0
12978: IFFALSE 12904
// end ;
12980: PPOPN 2
12982: END
// function AddPoints ( depots ) ; var i , first , team , side ; begin
12983: LD_INT 0
12985: PPUSH
12986: PPUSH
12987: PPUSH
12988: PPUSH
12989: PPUSH
// if mpTeamGame then
12990: LD_EXP 20
12994: IFFALSE 13191
// begin first := depots [ 1 ] ;
12996: LD_ADDR_VAR 0 4
13000: PUSH
13001: LD_VAR 0 1
13005: PUSH
13006: LD_INT 1
13008: ARRAY
13009: ST_TO_ADDR
// side := GetSide ( first ) ;
13010: LD_ADDR_VAR 0 6
13014: PUSH
13015: LD_VAR 0 4
13019: PPUSH
13020: CALL_OW 255
13024: ST_TO_ADDR
// for i := 1 to mpTeams do
13025: LD_ADDR_VAR 0 3
13029: PUSH
13030: DOUBLE
13031: LD_INT 1
13033: DEC
13034: ST_TO_ADDR
13035: LD_EXP 19
13039: PUSH
13040: FOR_TO
13041: IFFALSE 13075
// if side in mpTeams [ i ] then
13043: LD_VAR 0 6
13047: PUSH
13048: LD_EXP 19
13052: PUSH
13053: LD_VAR 0 3
13057: ARRAY
13058: IN
13059: IFFALSE 13073
// begin team := i ;
13061: LD_ADDR_VAR 0 5
13065: PUSH
13066: LD_VAR 0 3
13070: ST_TO_ADDR
// break ;
13071: GO 13075
// end ;
13073: GO 13040
13075: POP
13076: POP
// if not team then
13077: LD_VAR 0 5
13081: NOT
13082: IFFALSE 13086
// exit ;
13084: GO 13300
// if FilterUnitsInArea ( mpKingArea , [ f_enemy , side ] ) then
13086: LD_EXP 43
13090: PPUSH
13091: LD_INT 81
13093: PUSH
13094: LD_VAR 0 6
13098: PUSH
13099: EMPTY
13100: LIST
13101: LIST
13102: PPUSH
13103: CALL_OW 70
13107: IFFALSE 13111
// exit ;
13109: GO 13300
// mpKingPoints := Replace ( mpKingPoints , team , mpKingPoints [ team ] + 1 ) ;
13111: LD_ADDR_EXP 57
13115: PUSH
13116: LD_EXP 57
13120: PPUSH
13121: LD_VAR 0 5
13125: PPUSH
13126: LD_EXP 57
13130: PUSH
13131: LD_VAR 0 5
13135: ARRAY
13136: PUSH
13137: LD_INT 1
13139: PLUS
13140: PPUSH
13141: CALL_OW 1
13145: ST_TO_ADDR
// for i in mpTeams [ team ] do
13146: LD_ADDR_VAR 0 3
13150: PUSH
13151: LD_EXP 19
13155: PUSH
13156: LD_VAR 0 5
13160: ARRAY
13161: PUSH
13162: FOR_IN
13163: IFFALSE 13187
// SetMultiScore ( i , mpKingPoints [ team ] ) ;
13165: LD_VAR 0 3
13169: PPUSH
13170: LD_EXP 57
13174: PUSH
13175: LD_VAR 0 5
13179: ARRAY
13180: PPUSH
13181: CALL_OW 506
13185: GO 13162
13187: POP
13188: POP
// end else
13189: GO 13300
// begin first := depots [ 1 ] ;
13191: LD_ADDR_VAR 0 4
13195: PUSH
13196: LD_VAR 0 1
13200: PUSH
13201: LD_INT 1
13203: ARRAY
13204: ST_TO_ADDR
// side := GetSide ( first ) ;
13205: LD_ADDR_VAR 0 6
13209: PUSH
13210: LD_VAR 0 4
13214: PPUSH
13215: CALL_OW 255
13219: ST_TO_ADDR
// if FilterUnitsInArea ( mpKingArea , [ f_enemy , side ] ) then
13220: LD_EXP 43
13224: PPUSH
13225: LD_INT 81
13227: PUSH
13228: LD_VAR 0 6
13232: PUSH
13233: EMPTY
13234: LIST
13235: LIST
13236: PPUSH
13237: CALL_OW 70
13241: IFFALSE 13245
// exit ;
13243: GO 13300
// mpKingPoints := Replace ( mpKingPoints , side , mpKingPoints [ side ] + 1 ) ;
13245: LD_ADDR_EXP 57
13249: PUSH
13250: LD_EXP 57
13254: PPUSH
13255: LD_VAR 0 6
13259: PPUSH
13260: LD_EXP 57
13264: PUSH
13265: LD_VAR 0 6
13269: ARRAY
13270: PUSH
13271: LD_INT 1
13273: PLUS
13274: PPUSH
13275: CALL_OW 1
13279: ST_TO_ADDR
// SetMultiScore ( side , mpKingPoints [ side ] ) ;
13280: LD_VAR 0 6
13284: PPUSH
13285: LD_EXP 57
13289: PUSH
13290: LD_VAR 0 6
13294: ARRAY
13295: PPUSH
13296: CALL_OW 506
// end ; end ;
13300: LD_VAR 0 2
13304: RET
// function UpdateCounter ; var i ; begin
13305: LD_INT 0
13307: PPUSH
13308: PPUSH
// result := [ ] ;
13309: LD_ADDR_VAR 0 1
13313: PUSH
13314: EMPTY
13315: ST_TO_ADDR
// if mpTeamGame then
13316: LD_EXP 20
13320: IFFALSE 13387
// begin for i := 1 to mpTeams do
13322: LD_ADDR_VAR 0 2
13326: PUSH
13327: DOUBLE
13328: LD_INT 1
13330: DEC
13331: ST_TO_ADDR
13332: LD_EXP 19
13336: PUSH
13337: FOR_TO
13338: IFFALSE 13383
// result := result ^ [ #KingoftheHill-Team , i , mpKingPoints [ i ] , mpPoints ] ;
13340: LD_ADDR_VAR 0 1
13344: PUSH
13345: LD_VAR 0 1
13349: PUSH
13350: LD_STRING #KingoftheHill-Team
13352: PUSH
13353: LD_VAR 0 2
13357: PUSH
13358: LD_EXP 57
13362: PUSH
13363: LD_VAR 0 2
13367: ARRAY
13368: PUSH
13369: LD_EXP 44
13373: PUSH
13374: EMPTY
13375: LIST
13376: LIST
13377: LIST
13378: LIST
13379: ADD
13380: ST_TO_ADDR
13381: GO 13337
13383: POP
13384: POP
// end else
13385: GO 13460
// begin for i := 1 to 8 do
13387: LD_ADDR_VAR 0 2
13391: PUSH
13392: DOUBLE
13393: LD_INT 1
13395: DEC
13396: ST_TO_ADDR
13397: LD_INT 8
13399: PUSH
13400: FOR_TO
13401: IFFALSE 13458
// if mpSidePositions [ i ] then
13403: LD_EXP 16
13407: PUSH
13408: LD_VAR 0 2
13412: ARRAY
13413: IFFALSE 13456
// result := result ^ [ #KingoftheHill-Player , i , mpKingPoints [ i ] , mpPoints ] ;
13415: LD_ADDR_VAR 0 1
13419: PUSH
13420: LD_VAR 0 1
13424: PUSH
13425: LD_STRING #KingoftheHill-Player
13427: PUSH
13428: LD_VAR 0 2
13432: PUSH
13433: LD_EXP 57
13437: PUSH
13438: LD_VAR 0 2
13442: ARRAY
13443: PUSH
13444: LD_EXP 44
13448: PUSH
13449: EMPTY
13450: LIST
13451: LIST
13452: LIST
13453: LIST
13454: ADD
13455: ST_TO_ADDR
13456: GO 13400
13458: POP
13459: POP
// end ; mpDisplayStrings := result ;
13460: LD_ADDR_EXP 47
13464: PUSH
13465: LD_VAR 0 1
13469: ST_TO_ADDR
// end ;
13470: LD_VAR 0 1
13474: RET
// export function HowMuchPointsKing ( side ) ; begin
13475: LD_INT 0
13477: PPUSH
// result := HowMuchPoints ( side ) ;
13478: LD_ADDR_VAR 0 2
13482: PUSH
13483: LD_VAR 0 1
13487: PPUSH
13488: CALL 13498 0 1
13492: ST_TO_ADDR
// end ;
13493: LD_VAR 0 2
13497: RET
// function HowMuchPoints ( side ) ; var i ; begin
13498: LD_INT 0
13500: PPUSH
13501: PPUSH
// if mpTeamGame then
13502: LD_EXP 20
13506: IFFALSE 13575
// begin for i := 1 to Count ( mpTeams ) do
13508: LD_ADDR_VAR 0 3
13512: PUSH
13513: DOUBLE
13514: LD_INT 1
13516: DEC
13517: ST_TO_ADDR
13518: LD_EXP 19
13522: PPUSH
13523: CALL 23187 0 1
13527: PUSH
13528: FOR_TO
13529: IFFALSE 13571
// begin if side in mpTeams [ i ] then
13531: LD_VAR 0 1
13535: PUSH
13536: LD_EXP 19
13540: PUSH
13541: LD_VAR 0 3
13545: ARRAY
13546: IN
13547: IFFALSE 13569
// begin result := mpKingPoints [ i ] ;
13549: LD_ADDR_VAR 0 2
13553: PUSH
13554: LD_EXP 57
13558: PUSH
13559: LD_VAR 0 3
13563: ARRAY
13564: ST_TO_ADDR
// exit ;
13565: POP
13566: POP
13567: GO 13591
// end ; end ;
13569: GO 13528
13571: POP
13572: POP
// end else
13573: GO 13591
// result := mpKingPoints [ side ] ;
13575: LD_ADDR_VAR 0 2
13579: PUSH
13580: LD_EXP 57
13584: PUSH
13585: LD_VAR 0 1
13589: ARRAY
13590: ST_TO_ADDR
// end ;
13591: LD_VAR 0 2
13595: RET
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeKing do var i , canWin ;
13596: LD_EXP 48
13600: PUSH
13601: CALL 13923 0 0
13605: AND
13606: PUSH
13607: LD_OWVAR 4
13611: AND
13612: IFFALSE 13848
13614: GO 13616
13616: DISABLE
13617: LD_INT 0
13619: PPUSH
13620: PPUSH
// begin canWin := false ;
13621: LD_ADDR_VAR 0 2
13625: PUSH
13626: LD_INT 0
13628: ST_TO_ADDR
// if not HasPower ( your_side ) then
13629: LD_OWVAR 2
13633: PPUSH
13634: CALL 13963 0 1
13638: NOT
13639: IFFALSE 13650
// begin Multiplayer_Loose_Message ;
13641: CALL_OW 521
// enable ( mpLose ) ;
13645: LD_INT 102
13647: ENABLE_MARKED
// end else
13648: GO 13848
// begin canWin := ( HowMuchPoints ( your_side ) >= mpPoints and HasPower ( your_side ) ) or not EnemiesInGame ;
13650: LD_ADDR_VAR 0 2
13654: PUSH
13655: LD_OWVAR 2
13659: PPUSH
13660: CALL 13498 0 1
13664: PUSH
13665: LD_EXP 44
13669: GREATEREQUAL
13670: PUSH
13671: LD_OWVAR 2
13675: PPUSH
13676: CALL 13963 0 1
13680: AND
13681: PUSH
13682: CALL 13851 0 0
13686: NOT
13687: OR
13688: ST_TO_ADDR
// for i := 1 to 8 do
13689: LD_ADDR_VAR 0 1
13693: PUSH
13694: DOUBLE
13695: LD_INT 1
13697: DEC
13698: ST_TO_ADDR
13699: LD_INT 8
13701: PUSH
13702: FOR_TO
13703: IFFALSE 13834
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
13705: LD_EXP 16
13709: PUSH
13710: LD_VAR 0 1
13714: ARRAY
13715: PUSH
13716: LD_VAR 0 1
13720: PPUSH
13721: CALL_OW 108
13725: AND
13726: PUSH
13727: LD_VAR 0 1
13731: PUSH
13732: LD_OWVAR 2
13736: NONEQUAL
13737: AND
13738: IFFALSE 13832
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
13740: LD_EXP 17
13744: PUSH
13745: LD_VAR 0 1
13749: ARRAY
13750: NOT
13751: PUSH
13752: LD_EXP 17
13756: PUSH
13757: LD_VAR 0 1
13761: ARRAY
13762: PUSH
13763: LD_EXP 17
13767: PUSH
13768: LD_OWVAR 2
13772: ARRAY
13773: NONEQUAL
13774: PUSH
13775: LD_OWVAR 2
13779: PPUSH
13780: LD_VAR 0 1
13784: PPUSH
13785: CALL_OW 81
13789: PUSH
13790: LD_INT 1
13792: NONEQUAL
13793: AND
13794: OR
13795: IFFALSE 13832
// if HowMuchPoints ( i ) >= mpPoints and HasPower ( i ) then
13797: LD_VAR 0 1
13801: PPUSH
13802: CALL 13498 0 1
13806: PUSH
13807: LD_EXP 44
13811: GREATEREQUAL
13812: PUSH
13813: LD_VAR 0 1
13817: PPUSH
13818: CALL 13963 0 1
13822: AND
13823: IFFALSE 13832
// begin enable ( mpLose ) ;
13825: LD_INT 102
13827: ENABLE_MARKED
// exit ;
13828: POP
13829: POP
13830: GO 13848
// end ;
13832: GO 13702
13834: POP
13835: POP
// if canWin then
13836: LD_VAR 0 2
13840: IFFALSE 13847
// enable ( mpWin ) else
13842: LD_INT 101
13844: ENABLE_MARKED
13845: GO 13848
// enable ;
13847: ENABLE
// end ; end ;
13848: PPOPN 2
13850: END
// function EnemiesInGame ; var i ; begin
13851: LD_INT 0
13853: PPUSH
13854: PPUSH
// result := false ;
13855: LD_ADDR_VAR 0 1
13859: PUSH
13860: LD_INT 0
13862: ST_TO_ADDR
// for i := 1 to 8 do
13863: LD_ADDR_VAR 0 2
13867: PUSH
13868: DOUBLE
13869: LD_INT 1
13871: DEC
13872: ST_TO_ADDR
13873: LD_INT 8
13875: PUSH
13876: FOR_TO
13877: IFFALSE 13916
// if i <> your_side and HasPower ( i ) then
13879: LD_VAR 0 2
13883: PUSH
13884: LD_OWVAR 2
13888: NONEQUAL
13889: PUSH
13890: LD_VAR 0 2
13894: PPUSH
13895: CALL 13963 0 1
13899: AND
13900: IFFALSE 13914
// begin result := true ;
13902: LD_ADDR_VAR 0 1
13906: PUSH
13907: LD_INT 1
13909: ST_TO_ADDR
// exit ;
13910: POP
13911: POP
13912: GO 13918
// end ;
13914: GO 13876
13916: POP
13917: POP
// end ;
13918: LD_VAR 0 1
13922: RET
// function CanWinLoose ; begin
13923: LD_INT 0
13925: PPUSH
// result := true ;
13926: LD_ADDR_VAR 0 1
13930: PUSH
13931: LD_INT 1
13933: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
13934: CALL_OW 531
13938: PUSH
13939: CALL_OW 519
13943: PUSH
13944: LD_INT 1
13946: GREATER
13947: AND
13948: IFFALSE 13958
// result := false ;
13950: LD_ADDR_VAR 0 1
13954: PUSH
13955: LD_INT 0
13957: ST_TO_ADDR
// end ;
13958: LD_VAR 0 1
13962: RET
// function HasPower ( i ) ; begin
13963: LD_INT 0
13965: PPUSH
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
13966: LD_ADDR_VAR 0 2
13970: PUSH
13971: LD_INT 22
13973: PUSH
13974: LD_VAR 0 1
13978: PUSH
13979: EMPTY
13980: LIST
13981: LIST
13982: PUSH
13983: LD_INT 2
13985: PUSH
13986: LD_INT 21
13988: PUSH
13989: LD_INT 1
13991: PUSH
13992: EMPTY
13993: LIST
13994: LIST
13995: PUSH
13996: LD_INT 33
13998: PUSH
13999: LD_INT 3
14001: PUSH
14002: EMPTY
14003: LIST
14004: LIST
14005: PUSH
14006: LD_INT 33
14008: PUSH
14009: LD_INT 5
14011: PUSH
14012: EMPTY
14013: LIST
14014: LIST
14015: PUSH
14016: EMPTY
14017: LIST
14018: LIST
14019: LIST
14020: LIST
14021: PUSH
14022: EMPTY
14023: LIST
14024: LIST
14025: PPUSH
14026: CALL_OW 69
14030: ST_TO_ADDR
// end ; end_of_file
14031: LD_VAR 0 2
14035: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
14036: LD_VAR 0 1
14040: PUSH
14041: LD_INT 200
14043: DOUBLE
14044: GREATEREQUAL
14045: IFFALSE 14053
14047: LD_INT 299
14049: DOUBLE
14050: LESSEQUAL
14051: IFTRUE 14055
14053: GO 14087
14055: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
14056: LD_VAR 0 1
14060: PPUSH
14061: LD_VAR 0 2
14065: PPUSH
14066: LD_VAR 0 3
14070: PPUSH
14071: LD_VAR 0 4
14075: PPUSH
14076: LD_VAR 0 5
14080: PPUSH
14081: CALL 16302 0 5
14085: GO 14164
14087: LD_INT 300
14089: DOUBLE
14090: GREATEREQUAL
14091: IFFALSE 14099
14093: LD_INT 399
14095: DOUBLE
14096: LESSEQUAL
14097: IFTRUE 14101
14099: GO 14163
14101: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
14102: LD_VAR 0 1
14106: PPUSH
14107: LD_VAR 0 2
14111: PPUSH
14112: LD_VAR 0 3
14116: PPUSH
14117: LD_VAR 0 4
14121: PPUSH
14122: LD_VAR 0 5
14126: PPUSH
14127: LD_VAR 0 6
14131: PPUSH
14132: LD_VAR 0 7
14136: PPUSH
14137: LD_VAR 0 8
14141: PPUSH
14142: LD_VAR 0 9
14146: PPUSH
14147: LD_VAR 0 10
14151: PPUSH
14152: LD_VAR 0 11
14156: PPUSH
14157: CALL 14793 0 11
14161: GO 14164
14163: POP
// end ;
14164: PPOPN 11
14166: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
14167: LD_VAR 0 1
14171: PPUSH
14172: LD_VAR 0 2
14176: PPUSH
14177: LD_VAR 0 3
14181: PPUSH
14182: LD_VAR 0 4
14186: PPUSH
14187: LD_VAR 0 5
14191: PPUSH
14192: CALL 15687 0 5
// end ; end_of_file
14196: PPOPN 5
14198: END
// every 0 0$1 do
14199: GO 14201
14201: DISABLE
// begin enable ;
14202: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
14203: LD_STRING updateTimer(
14205: PUSH
14206: LD_OWVAR 1
14210: STR
14211: PUSH
14212: LD_STRING );
14214: STR
14215: PPUSH
14216: CALL_OW 559
// end ;
14220: END
// export function SOS_MapStart ( ) ; begin
14221: LD_INT 0
14223: PPUSH
// UpdateFactoryWaypoints ( ) ;
14224: CALL 15149 0 0
// UpdateWarehouseGatheringPoints ( ) ;
14228: CALL 15401 0 0
// ParseMultiDataToLua ( ) ;
14232: CALL 15548 0 0
// ToLua ( setSpecLogoNumber( & 2 & , & 1 & ) ) ;
14236: LD_STRING setSpecLogoNumber(
14238: PUSH
14239: LD_INT 2
14241: STR
14242: PUSH
14243: LD_STRING ,
14245: STR
14246: PUSH
14247: LD_INT 1
14249: STR
14250: PUSH
14251: LD_STRING )
14253: STR
14254: PPUSH
14255: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 3 & , & 2 & ) ) ;
14259: LD_STRING setSpecLogoNumber(
14261: PUSH
14262: LD_INT 3
14264: STR
14265: PUSH
14266: LD_STRING ,
14268: STR
14269: PUSH
14270: LD_INT 2
14272: STR
14273: PUSH
14274: LD_STRING )
14276: STR
14277: PPUSH
14278: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 4 & , & 3 & ) ) ;
14282: LD_STRING setSpecLogoNumber(
14284: PUSH
14285: LD_INT 4
14287: STR
14288: PUSH
14289: LD_STRING ,
14291: STR
14292: PUSH
14293: LD_INT 3
14295: STR
14296: PUSH
14297: LD_STRING )
14299: STR
14300: PPUSH
14301: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 5 & , & 4 & ) ) ;
14305: LD_STRING setSpecLogoNumber(
14307: PUSH
14308: LD_INT 5
14310: STR
14311: PUSH
14312: LD_STRING ,
14314: STR
14315: PUSH
14316: LD_INT 4
14318: STR
14319: PUSH
14320: LD_STRING )
14322: STR
14323: PPUSH
14324: CALL_OW 559
// end ;
14328: LD_VAR 0 1
14332: RET
// export function UpdateSpectatorBar ; var i , j , crates , oil , sib , people , base , bases ; begin
14333: LD_INT 0
14335: PPUSH
14336: PPUSH
14337: PPUSH
14338: PPUSH
14339: PPUSH
14340: PPUSH
14341: PPUSH
14342: PPUSH
14343: PPUSH
// for i := 1 to 8 do
14344: LD_ADDR_VAR 0 2
14348: PUSH
14349: DOUBLE
14350: LD_INT 1
14352: DEC
14353: ST_TO_ADDR
14354: LD_INT 8
14356: PUSH
14357: FOR_TO
14358: IFFALSE 14743
// begin if mpSidePositions [ i ] then
14360: LD_EXP 16
14364: PUSH
14365: LD_VAR 0 2
14369: ARRAY
14370: IFFALSE 14741
// begin people := Count ( FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) ) ;
14372: LD_ADDR_VAR 0 7
14376: PUSH
14377: LD_INT 22
14379: PUSH
14380: LD_VAR 0 2
14384: PUSH
14385: EMPTY
14386: LIST
14387: LIST
14388: PUSH
14389: LD_INT 21
14391: PUSH
14392: LD_INT 1
14394: PUSH
14395: EMPTY
14396: LIST
14397: LIST
14398: PUSH
14399: EMPTY
14400: LIST
14401: LIST
14402: PPUSH
14403: CALL_OW 69
14407: PPUSH
14408: CALL 23187 0 1
14412: ST_TO_ADDR
// bases := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
14413: LD_ADDR_VAR 0 9
14417: PUSH
14418: LD_INT 22
14420: PUSH
14421: LD_VAR 0 2
14425: PUSH
14426: EMPTY
14427: LIST
14428: LIST
14429: PUSH
14430: LD_INT 2
14432: PUSH
14433: LD_INT 30
14435: PUSH
14436: LD_INT 0
14438: PUSH
14439: EMPTY
14440: LIST
14441: LIST
14442: PUSH
14443: LD_INT 30
14445: PUSH
14446: LD_INT 1
14448: PUSH
14449: EMPTY
14450: LIST
14451: LIST
14452: PUSH
14453: EMPTY
14454: LIST
14455: LIST
14456: LIST
14457: PUSH
14458: EMPTY
14459: LIST
14460: LIST
14461: PPUSH
14462: CALL_OW 69
14466: ST_TO_ADDR
// crates := 0 ;
14467: LD_ADDR_VAR 0 4
14471: PUSH
14472: LD_INT 0
14474: ST_TO_ADDR
// oil := 0 ;
14475: LD_ADDR_VAR 0 5
14479: PUSH
14480: LD_INT 0
14482: ST_TO_ADDR
// sib := 0 ;
14483: LD_ADDR_VAR 0 6
14487: PUSH
14488: LD_INT 0
14490: ST_TO_ADDR
// if bases then
14491: LD_VAR 0 9
14495: IFFALSE 14601
// begin for j in bases do
14497: LD_ADDR_VAR 0 3
14501: PUSH
14502: LD_VAR 0 9
14506: PUSH
14507: FOR_IN
14508: IFFALSE 14599
// begin base := GetBase ( j ) ;
14510: LD_ADDR_VAR 0 8
14514: PUSH
14515: LD_VAR 0 3
14519: PPUSH
14520: CALL_OW 274
14524: ST_TO_ADDR
// crates := crates + GetResourceType ( base , mat_cans ) ;
14525: LD_ADDR_VAR 0 4
14529: PUSH
14530: LD_VAR 0 4
14534: PUSH
14535: LD_VAR 0 8
14539: PPUSH
14540: LD_INT 1
14542: PPUSH
14543: CALL_OW 275
14547: PLUS
14548: ST_TO_ADDR
// oil := oil + GetResourceType ( base , mat_oil ) ;
14549: LD_ADDR_VAR 0 5
14553: PUSH
14554: LD_VAR 0 5
14558: PUSH
14559: LD_VAR 0 8
14563: PPUSH
14564: LD_INT 2
14566: PPUSH
14567: CALL_OW 275
14571: PLUS
14572: ST_TO_ADDR
// sib := sib + GetResourceType ( base , mat_siberit ) ;
14573: LD_ADDR_VAR 0 6
14577: PUSH
14578: LD_VAR 0 6
14582: PUSH
14583: LD_VAR 0 8
14587: PPUSH
14588: LD_INT 3
14590: PPUSH
14591: CALL_OW 275
14595: PLUS
14596: ST_TO_ADDR
// end ;
14597: GO 14507
14599: POP
14600: POP
// end ; ToLua ( setSpecText( & i & , & 2 & , & crates & ) ) ;
14601: LD_STRING setSpecText(
14603: PUSH
14604: LD_VAR 0 2
14608: STR
14609: PUSH
14610: LD_STRING ,
14612: STR
14613: PUSH
14614: LD_INT 2
14616: STR
14617: PUSH
14618: LD_STRING ,
14620: STR
14621: PUSH
14622: LD_VAR 0 4
14626: STR
14627: PUSH
14628: LD_STRING )
14630: STR
14631: PPUSH
14632: CALL_OW 559
// ToLua ( setSpecText( & i & , & 3 & , & oil & ) ) ;
14636: LD_STRING setSpecText(
14638: PUSH
14639: LD_VAR 0 2
14643: STR
14644: PUSH
14645: LD_STRING ,
14647: STR
14648: PUSH
14649: LD_INT 3
14651: STR
14652: PUSH
14653: LD_STRING ,
14655: STR
14656: PUSH
14657: LD_VAR 0 5
14661: STR
14662: PUSH
14663: LD_STRING )
14665: STR
14666: PPUSH
14667: CALL_OW 559
// ToLua ( setSpecText( & i & , & 4 & , & sib & ) ) ;
14671: LD_STRING setSpecText(
14673: PUSH
14674: LD_VAR 0 2
14678: STR
14679: PUSH
14680: LD_STRING ,
14682: STR
14683: PUSH
14684: LD_INT 4
14686: STR
14687: PUSH
14688: LD_STRING ,
14690: STR
14691: PUSH
14692: LD_VAR 0 6
14696: STR
14697: PUSH
14698: LD_STRING )
14700: STR
14701: PPUSH
14702: CALL_OW 559
// ToLua ( setSpecText( & i & , & 5 & , & people & ) ) ;
14706: LD_STRING setSpecText(
14708: PUSH
14709: LD_VAR 0 2
14713: STR
14714: PUSH
14715: LD_STRING ,
14717: STR
14718: PUSH
14719: LD_INT 5
14721: STR
14722: PUSH
14723: LD_STRING ,
14725: STR
14726: PUSH
14727: LD_VAR 0 7
14731: STR
14732: PUSH
14733: LD_STRING )
14735: STR
14736: PPUSH
14737: CALL_OW 559
// end ; end ;
14741: GO 14357
14743: POP
14744: POP
// end ;
14745: LD_VAR 0 1
14749: RET
// every 20 + 0 0$5 trigger FilterAllUnits ( [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) do
14750: LD_INT 2
14752: PUSH
14753: LD_INT 30
14755: PUSH
14756: LD_INT 0
14758: PUSH
14759: EMPTY
14760: LIST
14761: LIST
14762: PUSH
14763: LD_INT 30
14765: PUSH
14766: LD_INT 1
14768: PUSH
14769: EMPTY
14770: LIST
14771: LIST
14772: PUSH
14773: EMPTY
14774: LIST
14775: LIST
14776: LIST
14777: PPUSH
14778: CALL_OW 69
14782: IFFALSE 14792
14784: GO 14786
14786: DISABLE
// begin enable ;
14787: ENABLE
// UpdateSpectatorBar ;
14788: CALL 14333 0 0
// end ;
14792: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
14793: LD_INT 0
14795: PPUSH
// end ;
14796: LD_VAR 0 12
14800: RET
// export factoryWaypoints , factoryWaypointsDrivers ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
14801: LD_INT 0
14803: PPUSH
14804: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
14805: LD_VAR 0 1
14809: NOT
14810: PUSH
14811: LD_VAR 0 2
14815: PPUSH
14816: LD_VAR 0 3
14820: PPUSH
14821: CALL_OW 488
14825: NOT
14826: OR
14827: PUSH
14828: LD_VAR 0 1
14832: PPUSH
14833: CALL_OW 266
14837: PUSH
14838: LD_INT 3
14840: NONEQUAL
14841: PUSH
14842: LD_VAR 0 1
14846: PPUSH
14847: CALL_OW 247
14851: PUSH
14852: LD_INT 1
14854: EQUAL
14855: NOT
14856: AND
14857: OR
14858: IFFALSE 14862
// exit ;
14860: GO 15144
// if GetType ( factory ) = unit_human then
14862: LD_VAR 0 1
14866: PPUSH
14867: CALL_OW 247
14871: PUSH
14872: LD_INT 1
14874: EQUAL
14875: IFFALSE 14892
// factory := IsInUnit ( factory ) ;
14877: LD_ADDR_VAR 0 1
14881: PUSH
14882: LD_VAR 0 1
14886: PPUSH
14887: CALL_OW 310
14891: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
14892: LD_VAR 0 1
14896: PPUSH
14897: CALL_OW 266
14901: PUSH
14902: LD_INT 3
14904: NONEQUAL
14905: IFFALSE 14909
// exit ;
14907: GO 15144
// for i := 1 to Count ( factoryWaypoints ) do
14909: LD_ADDR_VAR 0 5
14913: PUSH
14914: DOUBLE
14915: LD_INT 1
14917: DEC
14918: ST_TO_ADDR
14919: LD_EXP 58
14923: PPUSH
14924: CALL 23187 0 1
14928: PUSH
14929: FOR_TO
14930: IFFALSE 15092
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
14932: LD_VAR 0 2
14936: PPUSH
14937: LD_VAR 0 3
14941: PPUSH
14942: CALL_OW 428
14946: PUSH
14947: LD_EXP 58
14951: PUSH
14952: LD_VAR 0 5
14956: ARRAY
14957: PUSH
14958: LD_INT 2
14960: ARRAY
14961: EQUAL
14962: IFFALSE 14994
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
14964: LD_ADDR_EXP 58
14968: PUSH
14969: LD_EXP 58
14973: PPUSH
14974: LD_VAR 0 5
14978: PPUSH
14979: CALL_OW 3
14983: ST_TO_ADDR
// UpdateFactoryWaypoints ;
14984: CALL 15149 0 0
// exit ;
14988: POP
14989: POP
14990: GO 15144
// end else
14992: GO 15090
// if factory = factoryWaypoints [ i ] [ 2 ] then
14994: LD_VAR 0 1
14998: PUSH
14999: LD_EXP 58
15003: PUSH
15004: LD_VAR 0 5
15008: ARRAY
15009: PUSH
15010: LD_INT 2
15012: ARRAY
15013: EQUAL
15014: IFFALSE 15090
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
15016: LD_ADDR_EXP 58
15020: PUSH
15021: LD_EXP 58
15025: PPUSH
15026: LD_VAR 0 5
15030: PPUSH
15031: CALL_OW 3
15035: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
15036: LD_ADDR_EXP 58
15040: PUSH
15041: LD_EXP 58
15045: PPUSH
15046: LD_VAR 0 1
15050: PPUSH
15051: CALL_OW 255
15055: PUSH
15056: LD_VAR 0 1
15060: PUSH
15061: LD_VAR 0 2
15065: PUSH
15066: LD_VAR 0 3
15070: PUSH
15071: EMPTY
15072: LIST
15073: LIST
15074: LIST
15075: LIST
15076: PPUSH
15077: CALL 58796 0 2
15081: ST_TO_ADDR
// UpdateFactoryWaypoints ;
15082: CALL 15149 0 0
// exit ;
15086: POP
15087: POP
15088: GO 15144
// end ; end ;
15090: GO 14929
15092: POP
15093: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
15094: LD_ADDR_EXP 58
15098: PUSH
15099: LD_EXP 58
15103: PPUSH
15104: LD_VAR 0 1
15108: PPUSH
15109: CALL_OW 255
15113: PUSH
15114: LD_VAR 0 1
15118: PUSH
15119: LD_VAR 0 2
15123: PUSH
15124: LD_VAR 0 3
15128: PUSH
15129: EMPTY
15130: LIST
15131: LIST
15132: LIST
15133: LIST
15134: PPUSH
15135: CALL 58796 0 2
15139: ST_TO_ADDR
// UpdateFactoryWaypoints ;
15140: CALL 15149 0 0
// end ;
15144: LD_VAR 0 4
15148: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
15149: LD_INT 0
15151: PPUSH
15152: PPUSH
15153: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
15154: LD_STRING resetFactoryWaypoint();
15156: PPUSH
15157: CALL_OW 559
// if factoryWaypoints then
15161: LD_EXP 58
15165: IFFALSE 15286
// begin list := factoryWaypoints ;
15167: LD_ADDR_VAR 0 3
15171: PUSH
15172: LD_EXP 58
15176: ST_TO_ADDR
// for i := 1 to list do
15177: LD_ADDR_VAR 0 2
15181: PUSH
15182: DOUBLE
15183: LD_INT 1
15185: DEC
15186: ST_TO_ADDR
15187: LD_VAR 0 3
15191: PUSH
15192: FOR_TO
15193: IFFALSE 15284
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
15195: LD_STRING setFactoryWaypointXY(
15197: PUSH
15198: LD_VAR 0 3
15202: PUSH
15203: LD_VAR 0 2
15207: ARRAY
15208: PUSH
15209: LD_INT 1
15211: ARRAY
15212: STR
15213: PUSH
15214: LD_STRING ,
15216: STR
15217: PUSH
15218: LD_VAR 0 3
15222: PUSH
15223: LD_VAR 0 2
15227: ARRAY
15228: PUSH
15229: LD_INT 2
15231: ARRAY
15232: STR
15233: PUSH
15234: LD_STRING ,
15236: STR
15237: PUSH
15238: LD_VAR 0 3
15242: PUSH
15243: LD_VAR 0 2
15247: ARRAY
15248: PUSH
15249: LD_INT 3
15251: ARRAY
15252: STR
15253: PUSH
15254: LD_STRING ,
15256: STR
15257: PUSH
15258: LD_VAR 0 3
15262: PUSH
15263: LD_VAR 0 2
15267: ARRAY
15268: PUSH
15269: LD_INT 4
15271: ARRAY
15272: STR
15273: PUSH
15274: LD_STRING )
15276: STR
15277: PPUSH
15278: CALL_OW 559
15282: GO 15192
15284: POP
15285: POP
// end ; end ;
15286: LD_VAR 0 1
15290: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
15291: LD_INT 0
15293: PPUSH
// if HexInfo ( x , y ) = warehouse then
15294: LD_VAR 0 2
15298: PPUSH
15299: LD_VAR 0 3
15303: PPUSH
15304: CALL_OW 428
15308: PUSH
15309: LD_VAR 0 1
15313: EQUAL
15314: IFFALSE 15341
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
15316: LD_ADDR_EXP 60
15320: PUSH
15321: LD_EXP 60
15325: PPUSH
15326: LD_VAR 0 1
15330: PPUSH
15331: LD_INT 0
15333: PPUSH
15334: CALL_OW 1
15338: ST_TO_ADDR
15339: GO 15392
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
15341: LD_ADDR_EXP 60
15345: PUSH
15346: LD_EXP 60
15350: PPUSH
15351: LD_VAR 0 1
15355: PPUSH
15356: LD_VAR 0 1
15360: PPUSH
15361: CALL_OW 255
15365: PUSH
15366: LD_VAR 0 1
15370: PUSH
15371: LD_VAR 0 2
15375: PUSH
15376: LD_VAR 0 3
15380: PUSH
15381: EMPTY
15382: LIST
15383: LIST
15384: LIST
15385: LIST
15386: PPUSH
15387: CALL_OW 1
15391: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
15392: CALL 15401 0 0
// end ;
15396: LD_VAR 0 4
15400: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
15401: LD_INT 0
15403: PPUSH
15404: PPUSH
15405: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
15406: LD_STRING resetWarehouseGatheringPoints();
15408: PPUSH
15409: CALL_OW 559
// if warehouseGatheringPoints then
15413: LD_EXP 60
15417: IFFALSE 15543
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
15419: LD_ADDR_VAR 0 3
15423: PUSH
15424: LD_EXP 60
15428: PPUSH
15429: CALL 62564 0 1
15433: ST_TO_ADDR
// for i := 1 to list do
15434: LD_ADDR_VAR 0 2
15438: PUSH
15439: DOUBLE
15440: LD_INT 1
15442: DEC
15443: ST_TO_ADDR
15444: LD_VAR 0 3
15448: PUSH
15449: FOR_TO
15450: IFFALSE 15541
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
15452: LD_STRING setWarehouseGatheringPointXY(
15454: PUSH
15455: LD_VAR 0 3
15459: PUSH
15460: LD_VAR 0 2
15464: ARRAY
15465: PUSH
15466: LD_INT 1
15468: ARRAY
15469: STR
15470: PUSH
15471: LD_STRING ,
15473: STR
15474: PUSH
15475: LD_VAR 0 3
15479: PUSH
15480: LD_VAR 0 2
15484: ARRAY
15485: PUSH
15486: LD_INT 2
15488: ARRAY
15489: STR
15490: PUSH
15491: LD_STRING ,
15493: STR
15494: PUSH
15495: LD_VAR 0 3
15499: PUSH
15500: LD_VAR 0 2
15504: ARRAY
15505: PUSH
15506: LD_INT 3
15508: ARRAY
15509: STR
15510: PUSH
15511: LD_STRING ,
15513: STR
15514: PUSH
15515: LD_VAR 0 3
15519: PUSH
15520: LD_VAR 0 2
15524: ARRAY
15525: PUSH
15526: LD_INT 4
15528: ARRAY
15529: STR
15530: PUSH
15531: LD_STRING )
15533: STR
15534: PPUSH
15535: CALL_OW 559
15539: GO 15449
15541: POP
15542: POP
// end ; end ;
15543: LD_VAR 0 1
15547: RET
// function ParseMultiDataToLua ( ) ; var i ; begin
15548: LD_INT 0
15550: PPUSH
15551: PPUSH
// if not mpSidePositions then
15552: LD_EXP 16
15556: NOT
15557: IFFALSE 15561
// exit ;
15559: GO 15632
// result :=  ;
15561: LD_ADDR_VAR 0 1
15565: PUSH
15566: LD_STRING 
15568: ST_TO_ADDR
// for i := 1 to 8 do
15569: LD_ADDR_VAR 0 2
15573: PUSH
15574: DOUBLE
15575: LD_INT 1
15577: DEC
15578: ST_TO_ADDR
15579: LD_INT 8
15581: PUSH
15582: FOR_TO
15583: IFFALSE 15613
// begin result := result & mpSidePositions [ i ] & ; ;
15585: LD_ADDR_VAR 0 1
15589: PUSH
15590: LD_VAR 0 1
15594: PUSH
15595: LD_EXP 16
15599: PUSH
15600: LD_VAR 0 2
15604: ARRAY
15605: STR
15606: PUSH
15607: LD_STRING ;
15609: STR
15610: ST_TO_ADDR
// end ;
15611: GO 15582
15613: POP
15614: POP
// ToLua ( setMultiplayerRealPosition(" & result & "); ) ;
15615: LD_STRING setMultiplayerRealPosition("
15617: PUSH
15618: LD_VAR 0 1
15622: STR
15623: PUSH
15624: LD_STRING ");
15626: STR
15627: PPUSH
15628: CALL_OW 559
// end ; end_of_file
15632: LD_VAR 0 1
15636: RET
// export function SOS_UnitDestroyed ( un ) ; begin
15637: LD_INT 0
15639: PPUSH
// ComRadiation ( un ) ;
15640: LD_VAR 0 1
15644: PPUSH
15645: CALL 16706 0 1
// end ;
15649: LD_VAR 0 2
15653: RET
// export function SOS_UnitKamikazed ( un ) ; begin
15654: LD_INT 0
15656: PPUSH
// ComRadiation ( un ) ;
15657: LD_VAR 0 1
15661: PPUSH
15662: CALL 16706 0 1
// end ;
15666: LD_VAR 0 2
15670: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
15671: LD_INT 0
15673: PPUSH
// end ;
15674: LD_VAR 0 4
15678: RET
// export function SOS_Command ( cmd ) ; begin
15679: LD_INT 0
15681: PPUSH
// end ;
15682: LD_VAR 0 2
15686: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
15687: LD_INT 0
15689: PPUSH
// end ;
15690: LD_VAR 0 6
15694: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , driver , hex ; begin
15695: LD_INT 0
15697: PPUSH
15698: PPUSH
15699: PPUSH
15700: PPUSH
// if not vehicle or not factory then
15701: LD_VAR 0 1
15705: NOT
15706: PUSH
15707: LD_VAR 0 2
15711: NOT
15712: OR
15713: IFFALSE 15717
// exit ;
15715: GO 16297
// if not factoryWaypoints then
15717: LD_EXP 58
15721: NOT
15722: IFFALSE 15726
// exit ;
15724: GO 16297
// for i := 1 to Count ( factoryWaypoints ) do
15726: LD_ADDR_VAR 0 4
15730: PUSH
15731: DOUBLE
15732: LD_INT 1
15734: DEC
15735: ST_TO_ADDR
15736: LD_EXP 58
15740: PPUSH
15741: CALL 23187 0 1
15745: PUSH
15746: FOR_TO
15747: IFFALSE 16295
// if factoryWaypoints [ i ] [ 2 ] = factory then
15749: LD_EXP 58
15753: PUSH
15754: LD_VAR 0 4
15758: ARRAY
15759: PUSH
15760: LD_INT 2
15762: ARRAY
15763: PUSH
15764: LD_VAR 0 2
15768: EQUAL
15769: IFFALSE 16293
// begin if GetControl ( vehicle ) = control_manual then
15771: LD_VAR 0 1
15775: PPUSH
15776: CALL_OW 263
15780: PUSH
15781: LD_INT 1
15783: EQUAL
15784: IFFALSE 16146
// begin driver := IsDrivenBy ( vehicle ) ;
15786: LD_ADDR_VAR 0 5
15790: PUSH
15791: LD_VAR 0 1
15795: PPUSH
15796: CALL_OW 311
15800: ST_TO_ADDR
// if driver in factoryWaypointsDrivers or vehicle in factoryWaypointsDrivers then
15801: LD_VAR 0 5
15805: PUSH
15806: LD_EXP 59
15810: IN
15811: PUSH
15812: LD_VAR 0 1
15816: PUSH
15817: LD_EXP 59
15821: IN
15822: OR
15823: IFFALSE 15829
// exit ;
15825: POP
15826: POP
15827: GO 16297
// if not HasTask ( driver ) then
15829: LD_VAR 0 5
15833: PPUSH
15834: CALL_OW 314
15838: NOT
15839: IFFALSE 16144
// begin factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , driver ) ;
15841: LD_ADDR_EXP 59
15845: PUSH
15846: LD_EXP 59
15850: PPUSH
15851: LD_VAR 0 5
15855: PPUSH
15856: CALL 58796 0 2
15860: ST_TO_ADDR
// factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , vehicle ) ;
15861: LD_ADDR_EXP 59
15865: PUSH
15866: LD_EXP 59
15870: PPUSH
15871: LD_VAR 0 1
15875: PPUSH
15876: CALL 58796 0 2
15880: ST_TO_ADDR
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
15881: LD_ADDR_VAR 0 6
15885: PUSH
15886: LD_EXP 58
15890: PUSH
15891: LD_VAR 0 4
15895: ARRAY
15896: PUSH
15897: LD_INT 3
15899: ARRAY
15900: PPUSH
15901: LD_EXP 58
15905: PUSH
15906: LD_VAR 0 4
15910: ARRAY
15911: PUSH
15912: LD_INT 4
15914: ARRAY
15915: PPUSH
15916: CALL_OW 428
15920: ST_TO_ADDR
// if hex then
15921: LD_VAR 0 6
15925: IFFALSE 15943
// ComMoveUnit ( driver , hex ) else
15927: LD_VAR 0 5
15931: PPUSH
15932: LD_VAR 0 6
15936: PPUSH
15937: CALL_OW 112
15941: GO 16027
// if GetDistUnitXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) > 0 then
15943: LD_VAR 0 1
15947: PPUSH
15948: LD_EXP 58
15952: PUSH
15953: LD_VAR 0 4
15957: ARRAY
15958: PUSH
15959: LD_INT 3
15961: ARRAY
15962: PPUSH
15963: LD_EXP 58
15967: PUSH
15968: LD_VAR 0 4
15972: ARRAY
15973: PUSH
15974: LD_INT 4
15976: ARRAY
15977: PPUSH
15978: CALL_OW 297
15982: PUSH
15983: LD_INT 0
15985: GREATER
15986: IFFALSE 16027
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
15988: LD_VAR 0 5
15992: PPUSH
15993: LD_EXP 58
15997: PUSH
15998: LD_VAR 0 4
16002: ARRAY
16003: PUSH
16004: LD_INT 3
16006: ARRAY
16007: PPUSH
16008: LD_EXP 58
16012: PUSH
16013: LD_VAR 0 4
16017: ARRAY
16018: PUSH
16019: LD_INT 4
16021: ARRAY
16022: PPUSH
16023: CALL_OW 111
// AddComExitVehicle ( driver ) ;
16027: LD_VAR 0 5
16031: PPUSH
16032: CALL_OW 181
// if Multiplayer then
16036: LD_OWVAR 4
16040: IFFALSE 16089
// begin repeat wait ( 10 ) ;
16042: LD_INT 10
16044: PPUSH
16045: CALL_OW 67
// until not IsInUnit ( driver ) ;
16049: LD_VAR 0 5
16053: PPUSH
16054: CALL_OW 310
16058: NOT
16059: IFFALSE 16042
// if not HasTask ( driver ) then
16061: LD_VAR 0 5
16065: PPUSH
16066: CALL_OW 314
16070: NOT
16071: IFFALSE 16087
// ComEnterUnit ( driver , factory ) ;
16073: LD_VAR 0 5
16077: PPUSH
16078: LD_VAR 0 2
16082: PPUSH
16083: CALL_OW 120
// end else
16087: GO 16103
// AddComEnterUnit ( driver , factory ) ;
16089: LD_VAR 0 5
16093: PPUSH
16094: LD_VAR 0 2
16098: PPUSH
16099: CALL_OW 180
// wait ( 0 0$1 ) ;
16103: LD_INT 35
16105: PPUSH
16106: CALL_OW 67
// factoryWaypointsDrivers := factoryWaypointsDrivers diff driver ;
16110: LD_ADDR_EXP 59
16114: PUSH
16115: LD_EXP 59
16119: PUSH
16120: LD_VAR 0 5
16124: DIFF
16125: ST_TO_ADDR
// factoryWaypointsDrivers := factoryWaypointsDrivers diff vehicle ;
16126: LD_ADDR_EXP 59
16130: PUSH
16131: LD_EXP 59
16135: PUSH
16136: LD_VAR 0 1
16140: DIFF
16141: ST_TO_ADDR
// break ;
16142: GO 16295
// end ; end else
16144: GO 16293
// if GetControl ( vehicle ) = control_remote then
16146: LD_VAR 0 1
16150: PPUSH
16151: CALL_OW 263
16155: PUSH
16156: LD_INT 2
16158: EQUAL
16159: IFFALSE 16245
// begin wait ( 0 0$2 ) ;
16161: LD_INT 70
16163: PPUSH
16164: CALL_OW 67
// repeat wait ( 10 ) ;
16168: LD_INT 10
16170: PPUSH
16171: CALL_OW 67
// Connect ( vehicle ) ;
16175: LD_VAR 0 1
16179: PPUSH
16180: CALL 29393 0 1
// until IsControledBy ( vehicle ) ;
16184: LD_VAR 0 1
16188: PPUSH
16189: CALL_OW 312
16193: IFFALSE 16168
// wait ( 10 ) ;
16195: LD_INT 10
16197: PPUSH
16198: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
16202: LD_VAR 0 1
16206: PPUSH
16207: LD_EXP 58
16211: PUSH
16212: LD_VAR 0 4
16216: ARRAY
16217: PUSH
16218: LD_INT 3
16220: ARRAY
16221: PPUSH
16222: LD_EXP 58
16226: PUSH
16227: LD_VAR 0 4
16231: ARRAY
16232: PUSH
16233: LD_INT 4
16235: ARRAY
16236: PPUSH
16237: CALL_OW 111
// break ;
16241: GO 16295
// end else
16243: GO 16293
// begin wait ( 0 0$3 ) ;
16245: LD_INT 105
16247: PPUSH
16248: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
16252: LD_VAR 0 1
16256: PPUSH
16257: LD_EXP 58
16261: PUSH
16262: LD_VAR 0 4
16266: ARRAY
16267: PUSH
16268: LD_INT 3
16270: ARRAY
16271: PPUSH
16272: LD_EXP 58
16276: PUSH
16277: LD_VAR 0 4
16281: ARRAY
16282: PUSH
16283: LD_INT 4
16285: ARRAY
16286: PPUSH
16287: CALL_OW 111
// break ;
16291: GO 16295
// end ; end ;
16293: GO 15746
16295: POP
16296: POP
// end ;
16297: LD_VAR 0 3
16301: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
16302: LD_INT 0
16304: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
16305: LD_VAR 0 1
16309: PUSH
16310: LD_INT 250
16312: EQUAL
16313: PUSH
16314: LD_VAR 0 2
16318: PPUSH
16319: CALL_OW 264
16323: PUSH
16324: LD_INT 81
16326: EQUAL
16327: AND
16328: IFFALSE 16349
// MinerPlaceMine ( unit , x , y ) ;
16330: LD_VAR 0 2
16334: PPUSH
16335: LD_VAR 0 4
16339: PPUSH
16340: LD_VAR 0 5
16344: PPUSH
16345: CALL 19441 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
16349: LD_VAR 0 1
16353: PUSH
16354: LD_INT 251
16356: EQUAL
16357: PUSH
16358: LD_VAR 0 2
16362: PPUSH
16363: CALL_OW 264
16367: PUSH
16368: LD_INT 81
16370: EQUAL
16371: AND
16372: IFFALSE 16393
// MinerDetonateMine ( unit , x , y ) ;
16374: LD_VAR 0 2
16378: PPUSH
16379: LD_VAR 0 4
16383: PPUSH
16384: LD_VAR 0 5
16388: PPUSH
16389: CALL 19716 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
16393: LD_VAR 0 1
16397: PUSH
16398: LD_INT 252
16400: EQUAL
16401: PUSH
16402: LD_VAR 0 2
16406: PPUSH
16407: CALL_OW 264
16411: PUSH
16412: LD_INT 81
16414: EQUAL
16415: AND
16416: IFFALSE 16437
// MinerCreateMinefield ( unit , x , y ) ;
16418: LD_VAR 0 2
16422: PPUSH
16423: LD_VAR 0 4
16427: PPUSH
16428: LD_VAR 0 5
16432: PPUSH
16433: CALL 20133 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
16437: LD_VAR 0 1
16441: PUSH
16442: LD_INT 253
16444: EQUAL
16445: PUSH
16446: LD_VAR 0 2
16450: PPUSH
16451: CALL_OW 257
16455: PUSH
16456: LD_INT 5
16458: EQUAL
16459: AND
16460: IFFALSE 16481
// ComBinocular ( unit , x , y ) ;
16462: LD_VAR 0 2
16466: PPUSH
16467: LD_VAR 0 4
16471: PPUSH
16472: LD_VAR 0 5
16476: PPUSH
16477: CALL 20502 0 3
// if selectedUnit then
16481: LD_VAR 0 3
16485: IFFALSE 16541
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
16487: LD_VAR 0 1
16491: PUSH
16492: LD_INT 254
16494: EQUAL
16495: PUSH
16496: LD_VAR 0 2
16500: PPUSH
16501: CALL_OW 264
16505: PUSH
16506: LD_INT 99
16508: EQUAL
16509: AND
16510: PUSH
16511: LD_VAR 0 3
16515: PPUSH
16516: CALL_OW 263
16520: PUSH
16521: LD_INT 3
16523: EQUAL
16524: AND
16525: IFFALSE 16541
// HackDestroyVehicle ( unit , selectedUnit ) ;
16527: LD_VAR 0 2
16531: PPUSH
16532: LD_VAR 0 3
16536: PPUSH
16537: CALL 18805 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
16541: LD_VAR 0 1
16545: PUSH
16546: LD_INT 255
16548: EQUAL
16549: PUSH
16550: LD_VAR 0 2
16554: PPUSH
16555: CALL_OW 264
16559: PUSH
16560: LD_INT 14
16562: PUSH
16563: LD_INT 53
16565: PUSH
16566: EMPTY
16567: LIST
16568: LIST
16569: IN
16570: AND
16571: PUSH
16572: LD_VAR 0 4
16576: PPUSH
16577: LD_VAR 0 5
16581: PPUSH
16582: CALL_OW 488
16586: AND
16587: IFFALSE 16611
// CutTreeXYR ( unit , x , y , 12 ) ;
16589: LD_VAR 0 2
16593: PPUSH
16594: LD_VAR 0 4
16598: PPUSH
16599: LD_VAR 0 5
16603: PPUSH
16604: LD_INT 12
16606: PPUSH
16607: CALL 16802 0 4
// if cmd = 256 then
16611: LD_VAR 0 1
16615: PUSH
16616: LD_INT 256
16618: EQUAL
16619: IFFALSE 16640
// SetFactoryWaypoint ( unit , x , y ) ;
16621: LD_VAR 0 2
16625: PPUSH
16626: LD_VAR 0 4
16630: PPUSH
16631: LD_VAR 0 5
16635: PPUSH
16636: CALL 14801 0 3
// if cmd = 257 then
16640: LD_VAR 0 1
16644: PUSH
16645: LD_INT 257
16647: EQUAL
16648: IFFALSE 16669
// SetWarehouseGatheringPoint ( unit , x , y ) ;
16650: LD_VAR 0 2
16654: PPUSH
16655: LD_VAR 0 4
16659: PPUSH
16660: LD_VAR 0 5
16664: PPUSH
16665: CALL 15291 0 3
// if cmd = 258 then
16669: LD_VAR 0 1
16673: PUSH
16674: LD_INT 258
16676: EQUAL
16677: IFFALSE 16701
// BurnTreeXYR ( unit , x , y , 8 ) ;
16679: LD_VAR 0 2
16683: PPUSH
16684: LD_VAR 0 4
16688: PPUSH
16689: LD_VAR 0 5
16693: PPUSH
16694: LD_INT 8
16696: PPUSH
16697: CALL 17196 0 4
// end ;
16701: LD_VAR 0 6
16705: RET
// export function ComRadiation ( un ) ; var eff ; begin
16706: LD_INT 0
16708: PPUSH
16709: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
16710: LD_VAR 0 1
16714: PPUSH
16715: CALL_OW 264
16719: PUSH
16720: LD_INT 91
16722: NONEQUAL
16723: IFFALSE 16727
// exit ;
16725: GO 16797
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
16727: LD_INT 68
16729: PPUSH
16730: LD_VAR 0 1
16734: PPUSH
16735: CALL_OW 255
16739: PPUSH
16740: CALL_OW 321
16744: PUSH
16745: LD_INT 2
16747: EQUAL
16748: IFFALSE 16760
// eff := 50 else
16750: LD_ADDR_VAR 0 3
16754: PUSH
16755: LD_INT 50
16757: ST_TO_ADDR
16758: GO 16768
// eff := 25 ;
16760: LD_ADDR_VAR 0 3
16764: PUSH
16765: LD_INT 25
16767: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
16768: LD_VAR 0 1
16772: PPUSH
16773: CALL_OW 250
16777: PPUSH
16778: LD_VAR 0 1
16782: PPUSH
16783: CALL_OW 251
16787: PPUSH
16788: LD_VAR 0 3
16792: PPUSH
16793: CALL_OW 495
// end ;
16797: LD_VAR 0 2
16801: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
16802: LD_INT 0
16804: PPUSH
16805: PPUSH
16806: PPUSH
16807: PPUSH
16808: PPUSH
16809: PPUSH
16810: PPUSH
16811: PPUSH
16812: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
16813: LD_VAR 0 1
16817: PPUSH
16818: CALL_OW 302
16822: NOT
16823: PUSH
16824: LD_VAR 0 2
16828: PPUSH
16829: LD_VAR 0 3
16833: PPUSH
16834: CALL_OW 488
16838: NOT
16839: OR
16840: PUSH
16841: LD_VAR 0 4
16845: NOT
16846: OR
16847: IFFALSE 16851
// exit ;
16849: GO 17191
// list := [ ] ;
16851: LD_ADDR_VAR 0 13
16855: PUSH
16856: EMPTY
16857: ST_TO_ADDR
// if x - r < 0 then
16858: LD_VAR 0 2
16862: PUSH
16863: LD_VAR 0 4
16867: MINUS
16868: PUSH
16869: LD_INT 0
16871: LESS
16872: IFFALSE 16884
// min_x := 0 else
16874: LD_ADDR_VAR 0 7
16878: PUSH
16879: LD_INT 0
16881: ST_TO_ADDR
16882: GO 16900
// min_x := x - r ;
16884: LD_ADDR_VAR 0 7
16888: PUSH
16889: LD_VAR 0 2
16893: PUSH
16894: LD_VAR 0 4
16898: MINUS
16899: ST_TO_ADDR
// if y - r < 0 then
16900: LD_VAR 0 3
16904: PUSH
16905: LD_VAR 0 4
16909: MINUS
16910: PUSH
16911: LD_INT 0
16913: LESS
16914: IFFALSE 16926
// min_y := 0 else
16916: LD_ADDR_VAR 0 8
16920: PUSH
16921: LD_INT 0
16923: ST_TO_ADDR
16924: GO 16942
// min_y := y - r ;
16926: LD_ADDR_VAR 0 8
16930: PUSH
16931: LD_VAR 0 3
16935: PUSH
16936: LD_VAR 0 4
16940: MINUS
16941: ST_TO_ADDR
// max_x := x + r ;
16942: LD_ADDR_VAR 0 9
16946: PUSH
16947: LD_VAR 0 2
16951: PUSH
16952: LD_VAR 0 4
16956: PLUS
16957: ST_TO_ADDR
// max_y := y + r ;
16958: LD_ADDR_VAR 0 10
16962: PUSH
16963: LD_VAR 0 3
16967: PUSH
16968: LD_VAR 0 4
16972: PLUS
16973: ST_TO_ADDR
// for _x = min_x to max_x do
16974: LD_ADDR_VAR 0 11
16978: PUSH
16979: DOUBLE
16980: LD_VAR 0 7
16984: DEC
16985: ST_TO_ADDR
16986: LD_VAR 0 9
16990: PUSH
16991: FOR_TO
16992: IFFALSE 17109
// for _y = min_y to max_y do
16994: LD_ADDR_VAR 0 12
16998: PUSH
16999: DOUBLE
17000: LD_VAR 0 8
17004: DEC
17005: ST_TO_ADDR
17006: LD_VAR 0 10
17010: PUSH
17011: FOR_TO
17012: IFFALSE 17105
// begin if not ValidHex ( _x , _y ) then
17014: LD_VAR 0 11
17018: PPUSH
17019: LD_VAR 0 12
17023: PPUSH
17024: CALL_OW 488
17028: NOT
17029: IFFALSE 17033
// continue ;
17031: GO 17011
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
17033: LD_VAR 0 11
17037: PPUSH
17038: LD_VAR 0 12
17042: PPUSH
17043: CALL_OW 351
17047: PUSH
17048: LD_VAR 0 11
17052: PPUSH
17053: LD_VAR 0 12
17057: PPUSH
17058: CALL_OW 554
17062: AND
17063: IFFALSE 17103
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
17065: LD_ADDR_VAR 0 13
17069: PUSH
17070: LD_VAR 0 13
17074: PPUSH
17075: LD_VAR 0 13
17079: PUSH
17080: LD_INT 1
17082: PLUS
17083: PPUSH
17084: LD_VAR 0 11
17088: PUSH
17089: LD_VAR 0 12
17093: PUSH
17094: EMPTY
17095: LIST
17096: LIST
17097: PPUSH
17098: CALL_OW 2
17102: ST_TO_ADDR
// end ;
17103: GO 17011
17105: POP
17106: POP
17107: GO 16991
17109: POP
17110: POP
// if not list then
17111: LD_VAR 0 13
17115: NOT
17116: IFFALSE 17120
// exit ;
17118: GO 17191
// for i in list do
17120: LD_ADDR_VAR 0 6
17124: PUSH
17125: LD_VAR 0 13
17129: PUSH
17130: FOR_IN
17131: IFFALSE 17189
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
17133: LD_VAR 0 1
17137: PPUSH
17138: LD_STRING M
17140: PUSH
17141: LD_VAR 0 6
17145: PUSH
17146: LD_INT 1
17148: ARRAY
17149: PUSH
17150: LD_VAR 0 6
17154: PUSH
17155: LD_INT 2
17157: ARRAY
17158: PUSH
17159: LD_INT 0
17161: PUSH
17162: LD_INT 0
17164: PUSH
17165: LD_INT 0
17167: PUSH
17168: LD_INT 0
17170: PUSH
17171: EMPTY
17172: LIST
17173: LIST
17174: LIST
17175: LIST
17176: LIST
17177: LIST
17178: LIST
17179: PUSH
17180: EMPTY
17181: LIST
17182: PPUSH
17183: CALL_OW 447
17187: GO 17130
17189: POP
17190: POP
// end ;
17191: LD_VAR 0 5
17195: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
17196: LD_INT 0
17198: PPUSH
17199: PPUSH
17200: PPUSH
17201: PPUSH
17202: PPUSH
17203: PPUSH
17204: PPUSH
17205: PPUSH
17206: PPUSH
17207: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
17208: LD_VAR 0 1
17212: PPUSH
17213: CALL_OW 302
17217: NOT
17218: PUSH
17219: LD_VAR 0 2
17223: PPUSH
17224: LD_VAR 0 3
17228: PPUSH
17229: CALL_OW 488
17233: NOT
17234: OR
17235: PUSH
17236: LD_VAR 0 4
17240: NOT
17241: OR
17242: IFFALSE 17246
// exit ;
17244: GO 17759
// list := [ ] ;
17246: LD_ADDR_VAR 0 13
17250: PUSH
17251: EMPTY
17252: ST_TO_ADDR
// if x - r < 0 then
17253: LD_VAR 0 2
17257: PUSH
17258: LD_VAR 0 4
17262: MINUS
17263: PUSH
17264: LD_INT 0
17266: LESS
17267: IFFALSE 17279
// min_x := 0 else
17269: LD_ADDR_VAR 0 7
17273: PUSH
17274: LD_INT 0
17276: ST_TO_ADDR
17277: GO 17295
// min_x := x - r ;
17279: LD_ADDR_VAR 0 7
17283: PUSH
17284: LD_VAR 0 2
17288: PUSH
17289: LD_VAR 0 4
17293: MINUS
17294: ST_TO_ADDR
// if y - r < 0 then
17295: LD_VAR 0 3
17299: PUSH
17300: LD_VAR 0 4
17304: MINUS
17305: PUSH
17306: LD_INT 0
17308: LESS
17309: IFFALSE 17321
// min_y := 0 else
17311: LD_ADDR_VAR 0 8
17315: PUSH
17316: LD_INT 0
17318: ST_TO_ADDR
17319: GO 17337
// min_y := y - r ;
17321: LD_ADDR_VAR 0 8
17325: PUSH
17326: LD_VAR 0 3
17330: PUSH
17331: LD_VAR 0 4
17335: MINUS
17336: ST_TO_ADDR
// max_x := x + r ;
17337: LD_ADDR_VAR 0 9
17341: PUSH
17342: LD_VAR 0 2
17346: PUSH
17347: LD_VAR 0 4
17351: PLUS
17352: ST_TO_ADDR
// max_y := y + r ;
17353: LD_ADDR_VAR 0 10
17357: PUSH
17358: LD_VAR 0 3
17362: PUSH
17363: LD_VAR 0 4
17367: PLUS
17368: ST_TO_ADDR
// for _x = min_x to max_x do
17369: LD_ADDR_VAR 0 11
17373: PUSH
17374: DOUBLE
17375: LD_VAR 0 7
17379: DEC
17380: ST_TO_ADDR
17381: LD_VAR 0 9
17385: PUSH
17386: FOR_TO
17387: IFFALSE 17504
// for _y = min_y to max_y do
17389: LD_ADDR_VAR 0 12
17393: PUSH
17394: DOUBLE
17395: LD_VAR 0 8
17399: DEC
17400: ST_TO_ADDR
17401: LD_VAR 0 10
17405: PUSH
17406: FOR_TO
17407: IFFALSE 17500
// begin if not ValidHex ( _x , _y ) then
17409: LD_VAR 0 11
17413: PPUSH
17414: LD_VAR 0 12
17418: PPUSH
17419: CALL_OW 488
17423: NOT
17424: IFFALSE 17428
// continue ;
17426: GO 17406
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
17428: LD_VAR 0 11
17432: PPUSH
17433: LD_VAR 0 12
17437: PPUSH
17438: CALL_OW 351
17442: PUSH
17443: LD_VAR 0 11
17447: PPUSH
17448: LD_VAR 0 12
17452: PPUSH
17453: CALL_OW 554
17457: AND
17458: IFFALSE 17498
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
17460: LD_ADDR_VAR 0 13
17464: PUSH
17465: LD_VAR 0 13
17469: PPUSH
17470: LD_VAR 0 13
17474: PUSH
17475: LD_INT 1
17477: PLUS
17478: PPUSH
17479: LD_VAR 0 11
17483: PUSH
17484: LD_VAR 0 12
17488: PUSH
17489: EMPTY
17490: LIST
17491: LIST
17492: PPUSH
17493: CALL_OW 2
17497: ST_TO_ADDR
// end ;
17498: GO 17406
17500: POP
17501: POP
17502: GO 17386
17504: POP
17505: POP
// if not list then
17506: LD_VAR 0 13
17510: NOT
17511: IFFALSE 17515
// exit ;
17513: GO 17759
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
17515: LD_ADDR_VAR 0 13
17519: PUSH
17520: LD_VAR 0 1
17524: PPUSH
17525: LD_VAR 0 13
17529: PPUSH
17530: LD_INT 1
17532: PPUSH
17533: LD_INT 1
17535: PPUSH
17536: CALL 26535 0 4
17540: ST_TO_ADDR
// ComStop ( flame ) ;
17541: LD_VAR 0 1
17545: PPUSH
17546: CALL_OW 141
// for i in list do
17550: LD_ADDR_VAR 0 6
17554: PUSH
17555: LD_VAR 0 13
17559: PUSH
17560: FOR_IN
17561: IFFALSE 17592
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
17563: LD_VAR 0 1
17567: PPUSH
17568: LD_VAR 0 6
17572: PUSH
17573: LD_INT 1
17575: ARRAY
17576: PPUSH
17577: LD_VAR 0 6
17581: PUSH
17582: LD_INT 2
17584: ARRAY
17585: PPUSH
17586: CALL_OW 176
17590: GO 17560
17592: POP
17593: POP
// repeat wait ( 0 0$1 ) ;
17594: LD_INT 35
17596: PPUSH
17597: CALL_OW 67
// task := GetTaskList ( flame ) ;
17601: LD_ADDR_VAR 0 14
17605: PUSH
17606: LD_VAR 0 1
17610: PPUSH
17611: CALL_OW 437
17615: ST_TO_ADDR
// if not task then
17616: LD_VAR 0 14
17620: NOT
17621: IFFALSE 17625
// exit ;
17623: GO 17759
// if task [ 1 ] [ 1 ] <> | then
17625: LD_VAR 0 14
17629: PUSH
17630: LD_INT 1
17632: ARRAY
17633: PUSH
17634: LD_INT 1
17636: ARRAY
17637: PUSH
17638: LD_STRING |
17640: NONEQUAL
17641: IFFALSE 17645
// exit ;
17643: GO 17759
// _x := task [ 1 ] [ 2 ] ;
17645: LD_ADDR_VAR 0 11
17649: PUSH
17650: LD_VAR 0 14
17654: PUSH
17655: LD_INT 1
17657: ARRAY
17658: PUSH
17659: LD_INT 2
17661: ARRAY
17662: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
17663: LD_ADDR_VAR 0 12
17667: PUSH
17668: LD_VAR 0 14
17672: PUSH
17673: LD_INT 1
17675: ARRAY
17676: PUSH
17677: LD_INT 3
17679: ARRAY
17680: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
17681: LD_VAR 0 11
17685: PPUSH
17686: LD_VAR 0 12
17690: PPUSH
17691: CALL_OW 351
17695: NOT
17696: PUSH
17697: LD_VAR 0 11
17701: PPUSH
17702: LD_VAR 0 12
17706: PPUSH
17707: CALL_OW 554
17711: NOT
17712: OR
17713: IFFALSE 17747
// begin task := Delete ( task , 1 ) ;
17715: LD_ADDR_VAR 0 14
17719: PUSH
17720: LD_VAR 0 14
17724: PPUSH
17725: LD_INT 1
17727: PPUSH
17728: CALL_OW 3
17732: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
17733: LD_VAR 0 1
17737: PPUSH
17738: LD_VAR 0 14
17742: PPUSH
17743: CALL_OW 446
// end ; until not HasTask ( flame ) ;
17747: LD_VAR 0 1
17751: PPUSH
17752: CALL_OW 314
17756: NOT
17757: IFFALSE 17594
// end ;
17759: LD_VAR 0 5
17763: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
17764: LD_EXP 62
17768: NOT
17769: IFFALSE 17819
17771: GO 17773
17773: DISABLE
// begin initHack := true ;
17774: LD_ADDR_EXP 62
17778: PUSH
17779: LD_INT 1
17781: ST_TO_ADDR
// hackTanks := [ ] ;
17782: LD_ADDR_EXP 63
17786: PUSH
17787: EMPTY
17788: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
17789: LD_ADDR_EXP 64
17793: PUSH
17794: EMPTY
17795: ST_TO_ADDR
// hackLimit := 3 ;
17796: LD_ADDR_EXP 65
17800: PUSH
17801: LD_INT 3
17803: ST_TO_ADDR
// hackDist := 12 ;
17804: LD_ADDR_EXP 66
17808: PUSH
17809: LD_INT 12
17811: ST_TO_ADDR
// hackCounter := [ ] ;
17812: LD_ADDR_EXP 67
17816: PUSH
17817: EMPTY
17818: ST_TO_ADDR
// end ;
17819: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
17820: LD_EXP 62
17824: PUSH
17825: LD_INT 34
17827: PUSH
17828: LD_INT 99
17830: PUSH
17831: EMPTY
17832: LIST
17833: LIST
17834: PPUSH
17835: CALL_OW 69
17839: AND
17840: IFFALSE 18093
17842: GO 17844
17844: DISABLE
17845: LD_INT 0
17847: PPUSH
17848: PPUSH
// begin enable ;
17849: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
17850: LD_ADDR_VAR 0 1
17854: PUSH
17855: LD_INT 34
17857: PUSH
17858: LD_INT 99
17860: PUSH
17861: EMPTY
17862: LIST
17863: LIST
17864: PPUSH
17865: CALL_OW 69
17869: PUSH
17870: FOR_IN
17871: IFFALSE 18091
// begin if not i in hackTanks then
17873: LD_VAR 0 1
17877: PUSH
17878: LD_EXP 63
17882: IN
17883: NOT
17884: IFFALSE 17967
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
17886: LD_ADDR_EXP 63
17890: PUSH
17891: LD_EXP 63
17895: PPUSH
17896: LD_EXP 63
17900: PUSH
17901: LD_INT 1
17903: PLUS
17904: PPUSH
17905: LD_VAR 0 1
17909: PPUSH
17910: CALL_OW 1
17914: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
17915: LD_ADDR_EXP 64
17919: PUSH
17920: LD_EXP 64
17924: PPUSH
17925: LD_EXP 64
17929: PUSH
17930: LD_INT 1
17932: PLUS
17933: PPUSH
17934: EMPTY
17935: PPUSH
17936: CALL_OW 1
17940: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
17941: LD_ADDR_EXP 67
17945: PUSH
17946: LD_EXP 67
17950: PPUSH
17951: LD_EXP 67
17955: PUSH
17956: LD_INT 1
17958: PLUS
17959: PPUSH
17960: EMPTY
17961: PPUSH
17962: CALL_OW 1
17966: ST_TO_ADDR
// end ; if not IsOk ( i ) then
17967: LD_VAR 0 1
17971: PPUSH
17972: CALL_OW 302
17976: NOT
17977: IFFALSE 17990
// begin HackUnlinkAll ( i ) ;
17979: LD_VAR 0 1
17983: PPUSH
17984: CALL 18096 0 1
// continue ;
17988: GO 17870
// end ; HackCheckCapturedStatus ( i ) ;
17990: LD_VAR 0 1
17994: PPUSH
17995: CALL 18539 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
17999: LD_ADDR_VAR 0 2
18003: PUSH
18004: LD_INT 81
18006: PUSH
18007: LD_VAR 0 1
18011: PPUSH
18012: CALL_OW 255
18016: PUSH
18017: EMPTY
18018: LIST
18019: LIST
18020: PUSH
18021: LD_INT 33
18023: PUSH
18024: LD_INT 3
18026: PUSH
18027: EMPTY
18028: LIST
18029: LIST
18030: PUSH
18031: LD_INT 91
18033: PUSH
18034: LD_VAR 0 1
18038: PUSH
18039: LD_EXP 66
18043: PUSH
18044: EMPTY
18045: LIST
18046: LIST
18047: LIST
18048: PUSH
18049: LD_INT 50
18051: PUSH
18052: EMPTY
18053: LIST
18054: PUSH
18055: EMPTY
18056: LIST
18057: LIST
18058: LIST
18059: LIST
18060: PPUSH
18061: CALL_OW 69
18065: ST_TO_ADDR
// if not tmp then
18066: LD_VAR 0 2
18070: NOT
18071: IFFALSE 18075
// continue ;
18073: GO 17870
// HackLink ( i , tmp ) ;
18075: LD_VAR 0 1
18079: PPUSH
18080: LD_VAR 0 2
18084: PPUSH
18085: CALL 18232 0 2
// end ;
18089: GO 17870
18091: POP
18092: POP
// end ;
18093: PPOPN 2
18095: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
18096: LD_INT 0
18098: PPUSH
18099: PPUSH
18100: PPUSH
// if not hack in hackTanks then
18101: LD_VAR 0 1
18105: PUSH
18106: LD_EXP 63
18110: IN
18111: NOT
18112: IFFALSE 18116
// exit ;
18114: GO 18227
// index := GetElementIndex ( hackTanks , hack ) ;
18116: LD_ADDR_VAR 0 4
18120: PUSH
18121: LD_EXP 63
18125: PPUSH
18126: LD_VAR 0 1
18130: PPUSH
18131: CALL 25832 0 2
18135: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
18136: LD_EXP 64
18140: PUSH
18141: LD_VAR 0 4
18145: ARRAY
18146: IFFALSE 18227
// begin for i in hackTanksCaptured [ index ] do
18148: LD_ADDR_VAR 0 3
18152: PUSH
18153: LD_EXP 64
18157: PUSH
18158: LD_VAR 0 4
18162: ARRAY
18163: PUSH
18164: FOR_IN
18165: IFFALSE 18191
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
18167: LD_VAR 0 3
18171: PUSH
18172: LD_INT 1
18174: ARRAY
18175: PPUSH
18176: LD_VAR 0 3
18180: PUSH
18181: LD_INT 2
18183: ARRAY
18184: PPUSH
18185: CALL_OW 235
18189: GO 18164
18191: POP
18192: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
18193: LD_ADDR_EXP 64
18197: PUSH
18198: LD_EXP 64
18202: PPUSH
18203: LD_VAR 0 4
18207: PPUSH
18208: EMPTY
18209: PPUSH
18210: CALL_OW 1
18214: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
18215: LD_VAR 0 1
18219: PPUSH
18220: LD_INT 0
18222: PPUSH
18223: CALL_OW 505
// end ; end ;
18227: LD_VAR 0 2
18231: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
18232: LD_INT 0
18234: PPUSH
18235: PPUSH
18236: PPUSH
// if not hack in hackTanks or not vehicles then
18237: LD_VAR 0 1
18241: PUSH
18242: LD_EXP 63
18246: IN
18247: NOT
18248: PUSH
18249: LD_VAR 0 2
18253: NOT
18254: OR
18255: IFFALSE 18259
// exit ;
18257: GO 18534
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
18259: LD_ADDR_VAR 0 2
18263: PUSH
18264: LD_VAR 0 1
18268: PPUSH
18269: LD_VAR 0 2
18273: PPUSH
18274: LD_INT 1
18276: PPUSH
18277: LD_INT 1
18279: PPUSH
18280: CALL 26482 0 4
18284: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
18285: LD_ADDR_VAR 0 5
18289: PUSH
18290: LD_EXP 63
18294: PPUSH
18295: LD_VAR 0 1
18299: PPUSH
18300: CALL 25832 0 2
18304: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
18305: LD_EXP 64
18309: PUSH
18310: LD_VAR 0 5
18314: ARRAY
18315: PUSH
18316: LD_EXP 65
18320: LESS
18321: IFFALSE 18510
// begin for i := 1 to vehicles do
18323: LD_ADDR_VAR 0 4
18327: PUSH
18328: DOUBLE
18329: LD_INT 1
18331: DEC
18332: ST_TO_ADDR
18333: LD_VAR 0 2
18337: PUSH
18338: FOR_TO
18339: IFFALSE 18508
// begin if hackTanksCaptured [ index ] = hackLimit then
18341: LD_EXP 64
18345: PUSH
18346: LD_VAR 0 5
18350: ARRAY
18351: PUSH
18352: LD_EXP 65
18356: EQUAL
18357: IFFALSE 18361
// break ;
18359: GO 18508
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
18361: LD_ADDR_EXP 67
18365: PUSH
18366: LD_EXP 67
18370: PPUSH
18371: LD_VAR 0 5
18375: PPUSH
18376: LD_EXP 67
18380: PUSH
18381: LD_VAR 0 5
18385: ARRAY
18386: PUSH
18387: LD_INT 1
18389: PLUS
18390: PPUSH
18391: CALL_OW 1
18395: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
18396: LD_ADDR_EXP 64
18400: PUSH
18401: LD_EXP 64
18405: PPUSH
18406: LD_VAR 0 5
18410: PUSH
18411: LD_EXP 64
18415: PUSH
18416: LD_VAR 0 5
18420: ARRAY
18421: PUSH
18422: LD_INT 1
18424: PLUS
18425: PUSH
18426: EMPTY
18427: LIST
18428: LIST
18429: PPUSH
18430: LD_VAR 0 2
18434: PUSH
18435: LD_VAR 0 4
18439: ARRAY
18440: PUSH
18441: LD_VAR 0 2
18445: PUSH
18446: LD_VAR 0 4
18450: ARRAY
18451: PPUSH
18452: CALL_OW 255
18456: PUSH
18457: EMPTY
18458: LIST
18459: LIST
18460: PPUSH
18461: CALL 26047 0 3
18465: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
18466: LD_VAR 0 2
18470: PUSH
18471: LD_VAR 0 4
18475: ARRAY
18476: PPUSH
18477: LD_VAR 0 1
18481: PPUSH
18482: CALL_OW 255
18486: PPUSH
18487: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
18491: LD_VAR 0 2
18495: PUSH
18496: LD_VAR 0 4
18500: ARRAY
18501: PPUSH
18502: CALL_OW 141
// end ;
18506: GO 18338
18508: POP
18509: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
18510: LD_VAR 0 1
18514: PPUSH
18515: LD_EXP 64
18519: PUSH
18520: LD_VAR 0 5
18524: ARRAY
18525: PUSH
18526: LD_INT 0
18528: PLUS
18529: PPUSH
18530: CALL_OW 505
// end ;
18534: LD_VAR 0 3
18538: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
18539: LD_INT 0
18541: PPUSH
18542: PPUSH
18543: PPUSH
18544: PPUSH
// if not hack in hackTanks then
18545: LD_VAR 0 1
18549: PUSH
18550: LD_EXP 63
18554: IN
18555: NOT
18556: IFFALSE 18560
// exit ;
18558: GO 18800
// index := GetElementIndex ( hackTanks , hack ) ;
18560: LD_ADDR_VAR 0 4
18564: PUSH
18565: LD_EXP 63
18569: PPUSH
18570: LD_VAR 0 1
18574: PPUSH
18575: CALL 25832 0 2
18579: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
18580: LD_ADDR_VAR 0 3
18584: PUSH
18585: DOUBLE
18586: LD_EXP 64
18590: PUSH
18591: LD_VAR 0 4
18595: ARRAY
18596: INC
18597: ST_TO_ADDR
18598: LD_INT 1
18600: PUSH
18601: FOR_DOWNTO
18602: IFFALSE 18774
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
18604: LD_ADDR_VAR 0 5
18608: PUSH
18609: LD_EXP 64
18613: PUSH
18614: LD_VAR 0 4
18618: ARRAY
18619: PUSH
18620: LD_VAR 0 3
18624: ARRAY
18625: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
18626: LD_VAR 0 5
18630: PUSH
18631: LD_INT 1
18633: ARRAY
18634: PPUSH
18635: CALL_OW 302
18639: NOT
18640: PUSH
18641: LD_VAR 0 5
18645: PUSH
18646: LD_INT 1
18648: ARRAY
18649: PPUSH
18650: CALL_OW 255
18654: PUSH
18655: LD_VAR 0 1
18659: PPUSH
18660: CALL_OW 255
18664: NONEQUAL
18665: OR
18666: IFFALSE 18772
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
18668: LD_VAR 0 5
18672: PUSH
18673: LD_INT 1
18675: ARRAY
18676: PPUSH
18677: CALL_OW 305
18681: PUSH
18682: LD_VAR 0 5
18686: PUSH
18687: LD_INT 1
18689: ARRAY
18690: PPUSH
18691: CALL_OW 255
18695: PUSH
18696: LD_VAR 0 1
18700: PPUSH
18701: CALL_OW 255
18705: EQUAL
18706: AND
18707: IFFALSE 18731
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
18709: LD_VAR 0 5
18713: PUSH
18714: LD_INT 1
18716: ARRAY
18717: PPUSH
18718: LD_VAR 0 5
18722: PUSH
18723: LD_INT 2
18725: ARRAY
18726: PPUSH
18727: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
18731: LD_ADDR_EXP 64
18735: PUSH
18736: LD_EXP 64
18740: PPUSH
18741: LD_VAR 0 4
18745: PPUSH
18746: LD_EXP 64
18750: PUSH
18751: LD_VAR 0 4
18755: ARRAY
18756: PPUSH
18757: LD_VAR 0 3
18761: PPUSH
18762: CALL_OW 3
18766: PPUSH
18767: CALL_OW 1
18771: ST_TO_ADDR
// end ; end ;
18772: GO 18601
18774: POP
18775: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
18776: LD_VAR 0 1
18780: PPUSH
18781: LD_EXP 64
18785: PUSH
18786: LD_VAR 0 4
18790: ARRAY
18791: PUSH
18792: LD_INT 0
18794: PLUS
18795: PPUSH
18796: CALL_OW 505
// end ;
18800: LD_VAR 0 2
18804: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
18805: LD_INT 0
18807: PPUSH
18808: PPUSH
18809: PPUSH
18810: PPUSH
// if not hack in hackTanks then
18811: LD_VAR 0 1
18815: PUSH
18816: LD_EXP 63
18820: IN
18821: NOT
18822: IFFALSE 18826
// exit ;
18824: GO 18911
// index := GetElementIndex ( hackTanks , hack ) ;
18826: LD_ADDR_VAR 0 5
18830: PUSH
18831: LD_EXP 63
18835: PPUSH
18836: LD_VAR 0 1
18840: PPUSH
18841: CALL 25832 0 2
18845: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
18846: LD_ADDR_VAR 0 4
18850: PUSH
18851: DOUBLE
18852: LD_INT 1
18854: DEC
18855: ST_TO_ADDR
18856: LD_EXP 64
18860: PUSH
18861: LD_VAR 0 5
18865: ARRAY
18866: PUSH
18867: FOR_TO
18868: IFFALSE 18909
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
18870: LD_EXP 64
18874: PUSH
18875: LD_VAR 0 5
18879: ARRAY
18880: PUSH
18881: LD_VAR 0 4
18885: ARRAY
18886: PUSH
18887: LD_INT 1
18889: ARRAY
18890: PUSH
18891: LD_VAR 0 2
18895: EQUAL
18896: IFFALSE 18907
// KillUnit ( vehicle ) ;
18898: LD_VAR 0 2
18902: PPUSH
18903: CALL_OW 66
18907: GO 18867
18909: POP
18910: POP
// end ;
18911: LD_VAR 0 3
18915: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
18916: LD_EXP 68
18920: NOT
18921: IFFALSE 18956
18923: GO 18925
18925: DISABLE
// begin initMiner := true ;
18926: LD_ADDR_EXP 68
18930: PUSH
18931: LD_INT 1
18933: ST_TO_ADDR
// minersList := [ ] ;
18934: LD_ADDR_EXP 69
18938: PUSH
18939: EMPTY
18940: ST_TO_ADDR
// minerMinesList := [ ] ;
18941: LD_ADDR_EXP 70
18945: PUSH
18946: EMPTY
18947: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
18948: LD_ADDR_EXP 71
18952: PUSH
18953: LD_INT 5
18955: ST_TO_ADDR
// end ;
18956: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
18957: LD_EXP 68
18961: PUSH
18962: LD_INT 34
18964: PUSH
18965: LD_INT 81
18967: PUSH
18968: EMPTY
18969: LIST
18970: LIST
18971: PPUSH
18972: CALL_OW 69
18976: AND
18977: IFFALSE 19438
18979: GO 18981
18981: DISABLE
18982: LD_INT 0
18984: PPUSH
18985: PPUSH
18986: PPUSH
18987: PPUSH
// begin enable ;
18988: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
18989: LD_ADDR_VAR 0 1
18993: PUSH
18994: LD_INT 34
18996: PUSH
18997: LD_INT 81
18999: PUSH
19000: EMPTY
19001: LIST
19002: LIST
19003: PPUSH
19004: CALL_OW 69
19008: PUSH
19009: FOR_IN
19010: IFFALSE 19082
// begin if not i in minersList then
19012: LD_VAR 0 1
19016: PUSH
19017: LD_EXP 69
19021: IN
19022: NOT
19023: IFFALSE 19080
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
19025: LD_ADDR_EXP 69
19029: PUSH
19030: LD_EXP 69
19034: PPUSH
19035: LD_EXP 69
19039: PUSH
19040: LD_INT 1
19042: PLUS
19043: PPUSH
19044: LD_VAR 0 1
19048: PPUSH
19049: CALL_OW 1
19053: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
19054: LD_ADDR_EXP 70
19058: PUSH
19059: LD_EXP 70
19063: PPUSH
19064: LD_EXP 70
19068: PUSH
19069: LD_INT 1
19071: PLUS
19072: PPUSH
19073: EMPTY
19074: PPUSH
19075: CALL_OW 1
19079: ST_TO_ADDR
// end end ;
19080: GO 19009
19082: POP
19083: POP
// for i := minerMinesList downto 1 do
19084: LD_ADDR_VAR 0 1
19088: PUSH
19089: DOUBLE
19090: LD_EXP 70
19094: INC
19095: ST_TO_ADDR
19096: LD_INT 1
19098: PUSH
19099: FOR_DOWNTO
19100: IFFALSE 19436
// begin if IsLive ( minersList [ i ] ) then
19102: LD_EXP 69
19106: PUSH
19107: LD_VAR 0 1
19111: ARRAY
19112: PPUSH
19113: CALL_OW 300
19117: IFFALSE 19145
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
19119: LD_EXP 69
19123: PUSH
19124: LD_VAR 0 1
19128: ARRAY
19129: PPUSH
19130: LD_EXP 70
19134: PUSH
19135: LD_VAR 0 1
19139: ARRAY
19140: PPUSH
19141: CALL_OW 505
// if not minerMinesList [ i ] then
19145: LD_EXP 70
19149: PUSH
19150: LD_VAR 0 1
19154: ARRAY
19155: NOT
19156: IFFALSE 19160
// continue ;
19158: GO 19099
// for j := minerMinesList [ i ] downto 1 do
19160: LD_ADDR_VAR 0 2
19164: PUSH
19165: DOUBLE
19166: LD_EXP 70
19170: PUSH
19171: LD_VAR 0 1
19175: ARRAY
19176: INC
19177: ST_TO_ADDR
19178: LD_INT 1
19180: PUSH
19181: FOR_DOWNTO
19182: IFFALSE 19432
// begin side := GetSide ( minersList [ i ] ) ;
19184: LD_ADDR_VAR 0 3
19188: PUSH
19189: LD_EXP 69
19193: PUSH
19194: LD_VAR 0 1
19198: ARRAY
19199: PPUSH
19200: CALL_OW 255
19204: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
19205: LD_ADDR_VAR 0 4
19209: PUSH
19210: LD_EXP 70
19214: PUSH
19215: LD_VAR 0 1
19219: ARRAY
19220: PUSH
19221: LD_VAR 0 2
19225: ARRAY
19226: PUSH
19227: LD_INT 1
19229: ARRAY
19230: PPUSH
19231: LD_EXP 70
19235: PUSH
19236: LD_VAR 0 1
19240: ARRAY
19241: PUSH
19242: LD_VAR 0 2
19246: ARRAY
19247: PUSH
19248: LD_INT 2
19250: ARRAY
19251: PPUSH
19252: CALL_OW 428
19256: ST_TO_ADDR
// if not tmp then
19257: LD_VAR 0 4
19261: NOT
19262: IFFALSE 19266
// continue ;
19264: GO 19181
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
19266: LD_VAR 0 4
19270: PUSH
19271: LD_INT 81
19273: PUSH
19274: LD_VAR 0 3
19278: PUSH
19279: EMPTY
19280: LIST
19281: LIST
19282: PPUSH
19283: CALL_OW 69
19287: IN
19288: PUSH
19289: LD_EXP 70
19293: PUSH
19294: LD_VAR 0 1
19298: ARRAY
19299: PUSH
19300: LD_VAR 0 2
19304: ARRAY
19305: PUSH
19306: LD_INT 1
19308: ARRAY
19309: PPUSH
19310: LD_EXP 70
19314: PUSH
19315: LD_VAR 0 1
19319: ARRAY
19320: PUSH
19321: LD_VAR 0 2
19325: ARRAY
19326: PUSH
19327: LD_INT 2
19329: ARRAY
19330: PPUSH
19331: CALL_OW 458
19335: AND
19336: IFFALSE 19430
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
19338: LD_EXP 70
19342: PUSH
19343: LD_VAR 0 1
19347: ARRAY
19348: PUSH
19349: LD_VAR 0 2
19353: ARRAY
19354: PUSH
19355: LD_INT 1
19357: ARRAY
19358: PPUSH
19359: LD_EXP 70
19363: PUSH
19364: LD_VAR 0 1
19368: ARRAY
19369: PUSH
19370: LD_VAR 0 2
19374: ARRAY
19375: PUSH
19376: LD_INT 2
19378: ARRAY
19379: PPUSH
19380: LD_VAR 0 3
19384: PPUSH
19385: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
19389: LD_ADDR_EXP 70
19393: PUSH
19394: LD_EXP 70
19398: PPUSH
19399: LD_VAR 0 1
19403: PPUSH
19404: LD_EXP 70
19408: PUSH
19409: LD_VAR 0 1
19413: ARRAY
19414: PPUSH
19415: LD_VAR 0 2
19419: PPUSH
19420: CALL_OW 3
19424: PPUSH
19425: CALL_OW 1
19429: ST_TO_ADDR
// end ; end ;
19430: GO 19181
19432: POP
19433: POP
// end ;
19434: GO 19099
19436: POP
19437: POP
// end ;
19438: PPOPN 4
19440: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
19441: LD_INT 0
19443: PPUSH
19444: PPUSH
// result := false ;
19445: LD_ADDR_VAR 0 4
19449: PUSH
19450: LD_INT 0
19452: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
19453: LD_VAR 0 1
19457: PPUSH
19458: CALL_OW 264
19462: PUSH
19463: LD_INT 81
19465: EQUAL
19466: NOT
19467: IFFALSE 19471
// exit ;
19469: GO 19711
// index := GetElementIndex ( minersList , unit ) ;
19471: LD_ADDR_VAR 0 5
19475: PUSH
19476: LD_EXP 69
19480: PPUSH
19481: LD_VAR 0 1
19485: PPUSH
19486: CALL 25832 0 2
19490: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
19491: LD_EXP 70
19495: PUSH
19496: LD_VAR 0 5
19500: ARRAY
19501: PUSH
19502: LD_EXP 71
19506: GREATEREQUAL
19507: IFFALSE 19511
// exit ;
19509: GO 19711
// ComMoveXY ( unit , x , y ) ;
19511: LD_VAR 0 1
19515: PPUSH
19516: LD_VAR 0 2
19520: PPUSH
19521: LD_VAR 0 3
19525: PPUSH
19526: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
19530: LD_INT 35
19532: PPUSH
19533: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
19537: LD_VAR 0 1
19541: PPUSH
19542: LD_VAR 0 2
19546: PPUSH
19547: LD_VAR 0 3
19551: PPUSH
19552: CALL 57593 0 3
19556: NOT
19557: PUSH
19558: LD_VAR 0 1
19562: PPUSH
19563: CALL_OW 314
19567: AND
19568: IFFALSE 19572
// exit ;
19570: GO 19711
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
19572: LD_VAR 0 2
19576: PPUSH
19577: LD_VAR 0 3
19581: PPUSH
19582: CALL_OW 428
19586: PUSH
19587: LD_VAR 0 1
19591: EQUAL
19592: PUSH
19593: LD_VAR 0 1
19597: PPUSH
19598: CALL_OW 314
19602: NOT
19603: AND
19604: IFFALSE 19530
// PlaySoundXY ( x , y , PlantMine ) ;
19606: LD_VAR 0 2
19610: PPUSH
19611: LD_VAR 0 3
19615: PPUSH
19616: LD_STRING PlantMine
19618: PPUSH
19619: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
19623: LD_VAR 0 2
19627: PPUSH
19628: LD_VAR 0 3
19632: PPUSH
19633: LD_VAR 0 1
19637: PPUSH
19638: CALL_OW 255
19642: PPUSH
19643: LD_INT 0
19645: PPUSH
19646: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
19650: LD_ADDR_EXP 70
19654: PUSH
19655: LD_EXP 70
19659: PPUSH
19660: LD_VAR 0 5
19664: PUSH
19665: LD_EXP 70
19669: PUSH
19670: LD_VAR 0 5
19674: ARRAY
19675: PUSH
19676: LD_INT 1
19678: PLUS
19679: PUSH
19680: EMPTY
19681: LIST
19682: LIST
19683: PPUSH
19684: LD_VAR 0 2
19688: PUSH
19689: LD_VAR 0 3
19693: PUSH
19694: EMPTY
19695: LIST
19696: LIST
19697: PPUSH
19698: CALL 26047 0 3
19702: ST_TO_ADDR
// result := true ;
19703: LD_ADDR_VAR 0 4
19707: PUSH
19708: LD_INT 1
19710: ST_TO_ADDR
// end ;
19711: LD_VAR 0 4
19715: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
19716: LD_INT 0
19718: PPUSH
19719: PPUSH
19720: PPUSH
// if not unit in minersList then
19721: LD_VAR 0 1
19725: PUSH
19726: LD_EXP 69
19730: IN
19731: NOT
19732: IFFALSE 19736
// exit ;
19734: GO 20128
// index := GetElementIndex ( minersList , unit ) ;
19736: LD_ADDR_VAR 0 6
19740: PUSH
19741: LD_EXP 69
19745: PPUSH
19746: LD_VAR 0 1
19750: PPUSH
19751: CALL 25832 0 2
19755: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
19756: LD_ADDR_VAR 0 5
19760: PUSH
19761: DOUBLE
19762: LD_EXP 70
19766: PUSH
19767: LD_VAR 0 6
19771: ARRAY
19772: INC
19773: ST_TO_ADDR
19774: LD_INT 1
19776: PUSH
19777: FOR_DOWNTO
19778: IFFALSE 19939
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
19780: LD_EXP 70
19784: PUSH
19785: LD_VAR 0 6
19789: ARRAY
19790: PUSH
19791: LD_VAR 0 5
19795: ARRAY
19796: PUSH
19797: LD_INT 1
19799: ARRAY
19800: PUSH
19801: LD_VAR 0 2
19805: EQUAL
19806: PUSH
19807: LD_EXP 70
19811: PUSH
19812: LD_VAR 0 6
19816: ARRAY
19817: PUSH
19818: LD_VAR 0 5
19822: ARRAY
19823: PUSH
19824: LD_INT 2
19826: ARRAY
19827: PUSH
19828: LD_VAR 0 3
19832: EQUAL
19833: AND
19834: IFFALSE 19937
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
19836: LD_EXP 70
19840: PUSH
19841: LD_VAR 0 6
19845: ARRAY
19846: PUSH
19847: LD_VAR 0 5
19851: ARRAY
19852: PUSH
19853: LD_INT 1
19855: ARRAY
19856: PPUSH
19857: LD_EXP 70
19861: PUSH
19862: LD_VAR 0 6
19866: ARRAY
19867: PUSH
19868: LD_VAR 0 5
19872: ARRAY
19873: PUSH
19874: LD_INT 2
19876: ARRAY
19877: PPUSH
19878: LD_VAR 0 1
19882: PPUSH
19883: CALL_OW 255
19887: PPUSH
19888: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
19892: LD_ADDR_EXP 70
19896: PUSH
19897: LD_EXP 70
19901: PPUSH
19902: LD_VAR 0 6
19906: PPUSH
19907: LD_EXP 70
19911: PUSH
19912: LD_VAR 0 6
19916: ARRAY
19917: PPUSH
19918: LD_VAR 0 5
19922: PPUSH
19923: CALL_OW 3
19927: PPUSH
19928: CALL_OW 1
19932: ST_TO_ADDR
// exit ;
19933: POP
19934: POP
19935: GO 20128
// end ; end ;
19937: GO 19777
19939: POP
19940: POP
// for i := minerMinesList [ index ] downto 1 do
19941: LD_ADDR_VAR 0 5
19945: PUSH
19946: DOUBLE
19947: LD_EXP 70
19951: PUSH
19952: LD_VAR 0 6
19956: ARRAY
19957: INC
19958: ST_TO_ADDR
19959: LD_INT 1
19961: PUSH
19962: FOR_DOWNTO
19963: IFFALSE 20126
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
19965: LD_EXP 70
19969: PUSH
19970: LD_VAR 0 6
19974: ARRAY
19975: PUSH
19976: LD_VAR 0 5
19980: ARRAY
19981: PUSH
19982: LD_INT 1
19984: ARRAY
19985: PPUSH
19986: LD_EXP 70
19990: PUSH
19991: LD_VAR 0 6
19995: ARRAY
19996: PUSH
19997: LD_VAR 0 5
20001: ARRAY
20002: PUSH
20003: LD_INT 2
20005: ARRAY
20006: PPUSH
20007: LD_VAR 0 2
20011: PPUSH
20012: LD_VAR 0 3
20016: PPUSH
20017: CALL_OW 298
20021: PUSH
20022: LD_INT 6
20024: LESS
20025: IFFALSE 20124
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
20027: LD_EXP 70
20031: PUSH
20032: LD_VAR 0 6
20036: ARRAY
20037: PUSH
20038: LD_VAR 0 5
20042: ARRAY
20043: PUSH
20044: LD_INT 1
20046: ARRAY
20047: PPUSH
20048: LD_EXP 70
20052: PUSH
20053: LD_VAR 0 6
20057: ARRAY
20058: PUSH
20059: LD_VAR 0 5
20063: ARRAY
20064: PUSH
20065: LD_INT 2
20067: ARRAY
20068: PPUSH
20069: LD_VAR 0 1
20073: PPUSH
20074: CALL_OW 255
20078: PPUSH
20079: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
20083: LD_ADDR_EXP 70
20087: PUSH
20088: LD_EXP 70
20092: PPUSH
20093: LD_VAR 0 6
20097: PPUSH
20098: LD_EXP 70
20102: PUSH
20103: LD_VAR 0 6
20107: ARRAY
20108: PPUSH
20109: LD_VAR 0 5
20113: PPUSH
20114: CALL_OW 3
20118: PPUSH
20119: CALL_OW 1
20123: ST_TO_ADDR
// end ; end ;
20124: GO 19962
20126: POP
20127: POP
// end ;
20128: LD_VAR 0 4
20132: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
20133: LD_INT 0
20135: PPUSH
20136: PPUSH
20137: PPUSH
20138: PPUSH
20139: PPUSH
20140: PPUSH
20141: PPUSH
20142: PPUSH
20143: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
20144: LD_VAR 0 1
20148: PPUSH
20149: CALL_OW 264
20153: PUSH
20154: LD_INT 81
20156: EQUAL
20157: NOT
20158: PUSH
20159: LD_VAR 0 1
20163: PUSH
20164: LD_EXP 69
20168: IN
20169: NOT
20170: OR
20171: IFFALSE 20175
// exit ;
20173: GO 20497
// index := GetElementIndex ( minersList , unit ) ;
20175: LD_ADDR_VAR 0 6
20179: PUSH
20180: LD_EXP 69
20184: PPUSH
20185: LD_VAR 0 1
20189: PPUSH
20190: CALL 25832 0 2
20194: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
20195: LD_ADDR_VAR 0 8
20199: PUSH
20200: LD_EXP 71
20204: PUSH
20205: LD_EXP 70
20209: PUSH
20210: LD_VAR 0 6
20214: ARRAY
20215: MINUS
20216: ST_TO_ADDR
// if not minesFreeAmount then
20217: LD_VAR 0 8
20221: NOT
20222: IFFALSE 20226
// exit ;
20224: GO 20497
// tmp := [ ] ;
20226: LD_ADDR_VAR 0 7
20230: PUSH
20231: EMPTY
20232: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
20233: LD_ADDR_VAR 0 5
20237: PUSH
20238: DOUBLE
20239: LD_INT 1
20241: DEC
20242: ST_TO_ADDR
20243: LD_VAR 0 8
20247: PUSH
20248: FOR_TO
20249: IFFALSE 20444
// begin _d := rand ( 0 , 5 ) ;
20251: LD_ADDR_VAR 0 11
20255: PUSH
20256: LD_INT 0
20258: PPUSH
20259: LD_INT 5
20261: PPUSH
20262: CALL_OW 12
20266: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
20267: LD_ADDR_VAR 0 12
20271: PUSH
20272: LD_INT 2
20274: PPUSH
20275: LD_INT 6
20277: PPUSH
20278: CALL_OW 12
20282: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
20283: LD_ADDR_VAR 0 9
20287: PUSH
20288: LD_VAR 0 2
20292: PPUSH
20293: LD_VAR 0 11
20297: PPUSH
20298: LD_VAR 0 12
20302: PPUSH
20303: CALL_OW 272
20307: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
20308: LD_ADDR_VAR 0 10
20312: PUSH
20313: LD_VAR 0 3
20317: PPUSH
20318: LD_VAR 0 11
20322: PPUSH
20323: LD_VAR 0 12
20327: PPUSH
20328: CALL_OW 273
20332: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
20333: LD_VAR 0 9
20337: PPUSH
20338: LD_VAR 0 10
20342: PPUSH
20343: CALL_OW 488
20347: PUSH
20348: LD_VAR 0 9
20352: PUSH
20353: LD_VAR 0 10
20357: PUSH
20358: EMPTY
20359: LIST
20360: LIST
20361: PUSH
20362: LD_VAR 0 7
20366: IN
20367: NOT
20368: AND
20369: PUSH
20370: LD_VAR 0 9
20374: PPUSH
20375: LD_VAR 0 10
20379: PPUSH
20380: CALL_OW 458
20384: NOT
20385: AND
20386: IFFALSE 20428
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
20388: LD_ADDR_VAR 0 7
20392: PUSH
20393: LD_VAR 0 7
20397: PPUSH
20398: LD_VAR 0 7
20402: PUSH
20403: LD_INT 1
20405: PLUS
20406: PPUSH
20407: LD_VAR 0 9
20411: PUSH
20412: LD_VAR 0 10
20416: PUSH
20417: EMPTY
20418: LIST
20419: LIST
20420: PPUSH
20421: CALL_OW 1
20425: ST_TO_ADDR
20426: GO 20442
// i := i - 1 ;
20428: LD_ADDR_VAR 0 5
20432: PUSH
20433: LD_VAR 0 5
20437: PUSH
20438: LD_INT 1
20440: MINUS
20441: ST_TO_ADDR
// end ;
20442: GO 20248
20444: POP
20445: POP
// for i in tmp do
20446: LD_ADDR_VAR 0 5
20450: PUSH
20451: LD_VAR 0 7
20455: PUSH
20456: FOR_IN
20457: IFFALSE 20495
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
20459: LD_VAR 0 1
20463: PPUSH
20464: LD_VAR 0 5
20468: PUSH
20469: LD_INT 1
20471: ARRAY
20472: PPUSH
20473: LD_VAR 0 5
20477: PUSH
20478: LD_INT 2
20480: ARRAY
20481: PPUSH
20482: CALL 19441 0 3
20486: NOT
20487: IFFALSE 20493
// exit ;
20489: POP
20490: POP
20491: GO 20497
20493: GO 20456
20495: POP
20496: POP
// end ;
20497: LD_VAR 0 4
20501: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
20502: LD_INT 0
20504: PPUSH
20505: PPUSH
20506: PPUSH
20507: PPUSH
20508: PPUSH
20509: PPUSH
20510: PPUSH
20511: PPUSH
20512: PPUSH
// if GetClass ( unit ) <> class_sniper then
20513: LD_VAR 0 1
20517: PPUSH
20518: CALL_OW 257
20522: PUSH
20523: LD_INT 5
20525: NONEQUAL
20526: IFFALSE 20530
// exit ;
20528: GO 20996
// dist := 8 ;
20530: LD_ADDR_VAR 0 5
20534: PUSH
20535: LD_INT 8
20537: ST_TO_ADDR
// viewRange := 12 ;
20538: LD_ADDR_VAR 0 8
20542: PUSH
20543: LD_INT 12
20545: ST_TO_ADDR
// side := GetSide ( unit ) ;
20546: LD_ADDR_VAR 0 6
20550: PUSH
20551: LD_VAR 0 1
20555: PPUSH
20556: CALL_OW 255
20560: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
20561: LD_INT 61
20563: PPUSH
20564: LD_VAR 0 6
20568: PPUSH
20569: CALL_OW 321
20573: PUSH
20574: LD_INT 2
20576: EQUAL
20577: IFFALSE 20587
// viewRange := 16 ;
20579: LD_ADDR_VAR 0 8
20583: PUSH
20584: LD_INT 16
20586: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
20587: LD_VAR 0 1
20591: PPUSH
20592: LD_VAR 0 2
20596: PPUSH
20597: LD_VAR 0 3
20601: PPUSH
20602: CALL_OW 297
20606: PUSH
20607: LD_VAR 0 5
20611: GREATER
20612: IFFALSE 20691
// begin ComMoveXY ( unit , x , y ) ;
20614: LD_VAR 0 1
20618: PPUSH
20619: LD_VAR 0 2
20623: PPUSH
20624: LD_VAR 0 3
20628: PPUSH
20629: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
20633: LD_INT 35
20635: PPUSH
20636: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
20640: LD_VAR 0 1
20644: PPUSH
20645: LD_VAR 0 2
20649: PPUSH
20650: LD_VAR 0 3
20654: PPUSH
20655: CALL 57593 0 3
20659: NOT
20660: IFFALSE 20664
// exit ;
20662: GO 20996
// until GetDistUnitXY ( unit , x , y ) < dist ;
20664: LD_VAR 0 1
20668: PPUSH
20669: LD_VAR 0 2
20673: PPUSH
20674: LD_VAR 0 3
20678: PPUSH
20679: CALL_OW 297
20683: PUSH
20684: LD_VAR 0 5
20688: LESS
20689: IFFALSE 20633
// end ; ComTurnXY ( unit , x , y ) ;
20691: LD_VAR 0 1
20695: PPUSH
20696: LD_VAR 0 2
20700: PPUSH
20701: LD_VAR 0 3
20705: PPUSH
20706: CALL_OW 118
// repeat if Multiplayer then
20710: LD_OWVAR 4
20714: IFFALSE 20725
// wait ( 35 ) else
20716: LD_INT 35
20718: PPUSH
20719: CALL_OW 67
20723: GO 20732
// wait ( 5 ) ;
20725: LD_INT 5
20727: PPUSH
20728: CALL_OW 67
// _d := GetDir ( unit ) ;
20732: LD_ADDR_VAR 0 11
20736: PUSH
20737: LD_VAR 0 1
20741: PPUSH
20742: CALL_OW 254
20746: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
20747: LD_ADDR_VAR 0 7
20751: PUSH
20752: LD_VAR 0 1
20756: PPUSH
20757: CALL_OW 250
20761: PPUSH
20762: LD_VAR 0 1
20766: PPUSH
20767: CALL_OW 251
20771: PPUSH
20772: LD_VAR 0 2
20776: PPUSH
20777: LD_VAR 0 3
20781: PPUSH
20782: CALL 60201 0 4
20786: ST_TO_ADDR
// until dir = _d ;
20787: LD_VAR 0 7
20791: PUSH
20792: LD_VAR 0 11
20796: EQUAL
20797: IFFALSE 20710
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
20799: LD_ADDR_VAR 0 9
20803: PUSH
20804: LD_VAR 0 1
20808: PPUSH
20809: CALL_OW 250
20813: PPUSH
20814: LD_VAR 0 7
20818: PPUSH
20819: LD_VAR 0 5
20823: PPUSH
20824: CALL_OW 272
20828: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
20829: LD_ADDR_VAR 0 10
20833: PUSH
20834: LD_VAR 0 1
20838: PPUSH
20839: CALL_OW 251
20843: PPUSH
20844: LD_VAR 0 7
20848: PPUSH
20849: LD_VAR 0 5
20853: PPUSH
20854: CALL_OW 273
20858: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
20859: LD_VAR 0 9
20863: PPUSH
20864: LD_VAR 0 10
20868: PPUSH
20869: CALL_OW 488
20873: NOT
20874: IFFALSE 20878
// exit ;
20876: GO 20996
// ComAnimCustom ( unit , 1 ) ;
20878: LD_VAR 0 1
20882: PPUSH
20883: LD_INT 1
20885: PPUSH
20886: CALL_OW 592
// p := 0 ;
20890: LD_ADDR_VAR 0 12
20894: PUSH
20895: LD_INT 0
20897: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
20898: LD_VAR 0 9
20902: PPUSH
20903: LD_VAR 0 10
20907: PPUSH
20908: LD_VAR 0 6
20912: PPUSH
20913: LD_VAR 0 8
20917: PPUSH
20918: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
20922: LD_INT 35
20924: PPUSH
20925: CALL_OW 67
// p := Inc ( p ) ;
20929: LD_ADDR_VAR 0 12
20933: PUSH
20934: LD_VAR 0 12
20938: PPUSH
20939: CALL 60157 0 1
20943: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
20944: LD_VAR 0 12
20948: PUSH
20949: LD_INT 3
20951: EQUAL
20952: PUSH
20953: LD_VAR 0 1
20957: PPUSH
20958: CALL_OW 302
20962: NOT
20963: OR
20964: PUSH
20965: LD_VAR 0 1
20969: PPUSH
20970: CALL_OW 301
20974: OR
20975: IFFALSE 20922
// RemoveSeeing ( _x , _y , side ) ;
20977: LD_VAR 0 9
20981: PPUSH
20982: LD_VAR 0 10
20986: PPUSH
20987: LD_VAR 0 6
20991: PPUSH
20992: CALL_OW 331
// end ; end_of_file
20996: LD_VAR 0 4
21000: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
21001: LD_INT 0
21003: PPUSH
21004: PPUSH
// if exist_mode then
21005: LD_VAR 0 2
21009: IFFALSE 21055
// begin unit := CreateCharacter ( prefix & ident ) ;
21011: LD_ADDR_VAR 0 5
21015: PUSH
21016: LD_VAR 0 3
21020: PUSH
21021: LD_VAR 0 1
21025: STR
21026: PPUSH
21027: CALL_OW 34
21031: ST_TO_ADDR
// if unit then
21032: LD_VAR 0 5
21036: IFFALSE 21053
// DeleteCharacters ( prefix & ident ) ;
21038: LD_VAR 0 3
21042: PUSH
21043: LD_VAR 0 1
21047: STR
21048: PPUSH
21049: CALL_OW 40
// end else
21053: GO 21070
// unit := NewCharacter ( ident ) ;
21055: LD_ADDR_VAR 0 5
21059: PUSH
21060: LD_VAR 0 1
21064: PPUSH
21065: CALL_OW 25
21069: ST_TO_ADDR
// result := unit ;
21070: LD_ADDR_VAR 0 4
21074: PUSH
21075: LD_VAR 0 5
21079: ST_TO_ADDR
// end ;
21080: LD_VAR 0 4
21084: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
21085: LD_INT 0
21087: PPUSH
21088: PPUSH
// if exist_mode then
21089: LD_VAR 0 2
21093: IFFALSE 21118
// unit := CreateCharacter ( prefix & ident ) else
21095: LD_ADDR_VAR 0 5
21099: PUSH
21100: LD_VAR 0 3
21104: PUSH
21105: LD_VAR 0 1
21109: STR
21110: PPUSH
21111: CALL_OW 34
21115: ST_TO_ADDR
21116: GO 21133
// unit := NewCharacter ( ident ) ;
21118: LD_ADDR_VAR 0 5
21122: PUSH
21123: LD_VAR 0 1
21127: PPUSH
21128: CALL_OW 25
21132: ST_TO_ADDR
// result := unit ;
21133: LD_ADDR_VAR 0 4
21137: PUSH
21138: LD_VAR 0 5
21142: ST_TO_ADDR
// end ;
21143: LD_VAR 0 4
21147: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
21148: LD_INT 0
21150: PPUSH
21151: PPUSH
// if not side or not nation then
21152: LD_VAR 0 1
21156: NOT
21157: PUSH
21158: LD_VAR 0 2
21162: NOT
21163: OR
21164: IFFALSE 21168
// exit ;
21166: GO 21936
// case nation of nation_american :
21168: LD_VAR 0 2
21172: PUSH
21173: LD_INT 1
21175: DOUBLE
21176: EQUAL
21177: IFTRUE 21181
21179: GO 21395
21181: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
21182: LD_ADDR_VAR 0 4
21186: PUSH
21187: LD_INT 35
21189: PUSH
21190: LD_INT 45
21192: PUSH
21193: LD_INT 46
21195: PUSH
21196: LD_INT 47
21198: PUSH
21199: LD_INT 82
21201: PUSH
21202: LD_INT 83
21204: PUSH
21205: LD_INT 84
21207: PUSH
21208: LD_INT 85
21210: PUSH
21211: LD_INT 86
21213: PUSH
21214: LD_INT 1
21216: PUSH
21217: LD_INT 2
21219: PUSH
21220: LD_INT 6
21222: PUSH
21223: LD_INT 15
21225: PUSH
21226: LD_INT 16
21228: PUSH
21229: LD_INT 7
21231: PUSH
21232: LD_INT 12
21234: PUSH
21235: LD_INT 13
21237: PUSH
21238: LD_INT 10
21240: PUSH
21241: LD_INT 14
21243: PUSH
21244: LD_INT 20
21246: PUSH
21247: LD_INT 21
21249: PUSH
21250: LD_INT 22
21252: PUSH
21253: LD_INT 25
21255: PUSH
21256: LD_INT 32
21258: PUSH
21259: LD_INT 27
21261: PUSH
21262: LD_INT 36
21264: PUSH
21265: LD_INT 69
21267: PUSH
21268: LD_INT 39
21270: PUSH
21271: LD_INT 34
21273: PUSH
21274: LD_INT 40
21276: PUSH
21277: LD_INT 48
21279: PUSH
21280: LD_INT 49
21282: PUSH
21283: LD_INT 50
21285: PUSH
21286: LD_INT 51
21288: PUSH
21289: LD_INT 52
21291: PUSH
21292: LD_INT 53
21294: PUSH
21295: LD_INT 54
21297: PUSH
21298: LD_INT 55
21300: PUSH
21301: LD_INT 56
21303: PUSH
21304: LD_INT 57
21306: PUSH
21307: LD_INT 58
21309: PUSH
21310: LD_INT 59
21312: PUSH
21313: LD_INT 60
21315: PUSH
21316: LD_INT 61
21318: PUSH
21319: LD_INT 62
21321: PUSH
21322: LD_INT 80
21324: PUSH
21325: LD_INT 82
21327: PUSH
21328: LD_INT 83
21330: PUSH
21331: LD_INT 84
21333: PUSH
21334: LD_INT 85
21336: PUSH
21337: LD_INT 86
21339: PUSH
21340: EMPTY
21341: LIST
21342: LIST
21343: LIST
21344: LIST
21345: LIST
21346: LIST
21347: LIST
21348: LIST
21349: LIST
21350: LIST
21351: LIST
21352: LIST
21353: LIST
21354: LIST
21355: LIST
21356: LIST
21357: LIST
21358: LIST
21359: LIST
21360: LIST
21361: LIST
21362: LIST
21363: LIST
21364: LIST
21365: LIST
21366: LIST
21367: LIST
21368: LIST
21369: LIST
21370: LIST
21371: LIST
21372: LIST
21373: LIST
21374: LIST
21375: LIST
21376: LIST
21377: LIST
21378: LIST
21379: LIST
21380: LIST
21381: LIST
21382: LIST
21383: LIST
21384: LIST
21385: LIST
21386: LIST
21387: LIST
21388: LIST
21389: LIST
21390: LIST
21391: LIST
21392: ST_TO_ADDR
21393: GO 21860
21395: LD_INT 2
21397: DOUBLE
21398: EQUAL
21399: IFTRUE 21403
21401: GO 21629
21403: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
21404: LD_ADDR_VAR 0 4
21408: PUSH
21409: LD_INT 35
21411: PUSH
21412: LD_INT 45
21414: PUSH
21415: LD_INT 46
21417: PUSH
21418: LD_INT 47
21420: PUSH
21421: LD_INT 82
21423: PUSH
21424: LD_INT 83
21426: PUSH
21427: LD_INT 84
21429: PUSH
21430: LD_INT 85
21432: PUSH
21433: LD_INT 87
21435: PUSH
21436: LD_INT 70
21438: PUSH
21439: LD_INT 1
21441: PUSH
21442: LD_INT 11
21444: PUSH
21445: LD_INT 3
21447: PUSH
21448: LD_INT 4
21450: PUSH
21451: LD_INT 5
21453: PUSH
21454: LD_INT 6
21456: PUSH
21457: LD_INT 15
21459: PUSH
21460: LD_INT 18
21462: PUSH
21463: LD_INT 7
21465: PUSH
21466: LD_INT 17
21468: PUSH
21469: LD_INT 8
21471: PUSH
21472: LD_INT 20
21474: PUSH
21475: LD_INT 21
21477: PUSH
21478: LD_INT 22
21480: PUSH
21481: LD_INT 72
21483: PUSH
21484: LD_INT 26
21486: PUSH
21487: LD_INT 69
21489: PUSH
21490: LD_INT 39
21492: PUSH
21493: LD_INT 40
21495: PUSH
21496: LD_INT 41
21498: PUSH
21499: LD_INT 42
21501: PUSH
21502: LD_INT 43
21504: PUSH
21505: LD_INT 48
21507: PUSH
21508: LD_INT 49
21510: PUSH
21511: LD_INT 50
21513: PUSH
21514: LD_INT 51
21516: PUSH
21517: LD_INT 52
21519: PUSH
21520: LD_INT 53
21522: PUSH
21523: LD_INT 54
21525: PUSH
21526: LD_INT 55
21528: PUSH
21529: LD_INT 56
21531: PUSH
21532: LD_INT 60
21534: PUSH
21535: LD_INT 61
21537: PUSH
21538: LD_INT 62
21540: PUSH
21541: LD_INT 66
21543: PUSH
21544: LD_INT 67
21546: PUSH
21547: LD_INT 68
21549: PUSH
21550: LD_INT 81
21552: PUSH
21553: LD_INT 82
21555: PUSH
21556: LD_INT 83
21558: PUSH
21559: LD_INT 84
21561: PUSH
21562: LD_INT 85
21564: PUSH
21565: LD_INT 87
21567: PUSH
21568: LD_INT 88
21570: PUSH
21571: EMPTY
21572: LIST
21573: LIST
21574: LIST
21575: LIST
21576: LIST
21577: LIST
21578: LIST
21579: LIST
21580: LIST
21581: LIST
21582: LIST
21583: LIST
21584: LIST
21585: LIST
21586: LIST
21587: LIST
21588: LIST
21589: LIST
21590: LIST
21591: LIST
21592: LIST
21593: LIST
21594: LIST
21595: LIST
21596: LIST
21597: LIST
21598: LIST
21599: LIST
21600: LIST
21601: LIST
21602: LIST
21603: LIST
21604: LIST
21605: LIST
21606: LIST
21607: LIST
21608: LIST
21609: LIST
21610: LIST
21611: LIST
21612: LIST
21613: LIST
21614: LIST
21615: LIST
21616: LIST
21617: LIST
21618: LIST
21619: LIST
21620: LIST
21621: LIST
21622: LIST
21623: LIST
21624: LIST
21625: LIST
21626: ST_TO_ADDR
21627: GO 21860
21629: LD_INT 3
21631: DOUBLE
21632: EQUAL
21633: IFTRUE 21637
21635: GO 21859
21637: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
21638: LD_ADDR_VAR 0 4
21642: PUSH
21643: LD_INT 46
21645: PUSH
21646: LD_INT 47
21648: PUSH
21649: LD_INT 1
21651: PUSH
21652: LD_INT 2
21654: PUSH
21655: LD_INT 82
21657: PUSH
21658: LD_INT 83
21660: PUSH
21661: LD_INT 84
21663: PUSH
21664: LD_INT 85
21666: PUSH
21667: LD_INT 86
21669: PUSH
21670: LD_INT 11
21672: PUSH
21673: LD_INT 9
21675: PUSH
21676: LD_INT 20
21678: PUSH
21679: LD_INT 19
21681: PUSH
21682: LD_INT 21
21684: PUSH
21685: LD_INT 24
21687: PUSH
21688: LD_INT 22
21690: PUSH
21691: LD_INT 25
21693: PUSH
21694: LD_INT 28
21696: PUSH
21697: LD_INT 29
21699: PUSH
21700: LD_INT 30
21702: PUSH
21703: LD_INT 31
21705: PUSH
21706: LD_INT 37
21708: PUSH
21709: LD_INT 38
21711: PUSH
21712: LD_INT 32
21714: PUSH
21715: LD_INT 27
21717: PUSH
21718: LD_INT 33
21720: PUSH
21721: LD_INT 69
21723: PUSH
21724: LD_INT 39
21726: PUSH
21727: LD_INT 34
21729: PUSH
21730: LD_INT 40
21732: PUSH
21733: LD_INT 71
21735: PUSH
21736: LD_INT 23
21738: PUSH
21739: LD_INT 44
21741: PUSH
21742: LD_INT 48
21744: PUSH
21745: LD_INT 49
21747: PUSH
21748: LD_INT 50
21750: PUSH
21751: LD_INT 51
21753: PUSH
21754: LD_INT 52
21756: PUSH
21757: LD_INT 53
21759: PUSH
21760: LD_INT 54
21762: PUSH
21763: LD_INT 55
21765: PUSH
21766: LD_INT 56
21768: PUSH
21769: LD_INT 57
21771: PUSH
21772: LD_INT 58
21774: PUSH
21775: LD_INT 59
21777: PUSH
21778: LD_INT 63
21780: PUSH
21781: LD_INT 64
21783: PUSH
21784: LD_INT 65
21786: PUSH
21787: LD_INT 82
21789: PUSH
21790: LD_INT 83
21792: PUSH
21793: LD_INT 84
21795: PUSH
21796: LD_INT 85
21798: PUSH
21799: LD_INT 86
21801: PUSH
21802: EMPTY
21803: LIST
21804: LIST
21805: LIST
21806: LIST
21807: LIST
21808: LIST
21809: LIST
21810: LIST
21811: LIST
21812: LIST
21813: LIST
21814: LIST
21815: LIST
21816: LIST
21817: LIST
21818: LIST
21819: LIST
21820: LIST
21821: LIST
21822: LIST
21823: LIST
21824: LIST
21825: LIST
21826: LIST
21827: LIST
21828: LIST
21829: LIST
21830: LIST
21831: LIST
21832: LIST
21833: LIST
21834: LIST
21835: LIST
21836: LIST
21837: LIST
21838: LIST
21839: LIST
21840: LIST
21841: LIST
21842: LIST
21843: LIST
21844: LIST
21845: LIST
21846: LIST
21847: LIST
21848: LIST
21849: LIST
21850: LIST
21851: LIST
21852: LIST
21853: LIST
21854: LIST
21855: LIST
21856: ST_TO_ADDR
21857: GO 21860
21859: POP
// if state > - 1 and state < 3 then
21860: LD_VAR 0 3
21864: PUSH
21865: LD_INT 1
21867: NEG
21868: GREATER
21869: PUSH
21870: LD_VAR 0 3
21874: PUSH
21875: LD_INT 3
21877: LESS
21878: AND
21879: IFFALSE 21936
// for i in result do
21881: LD_ADDR_VAR 0 5
21885: PUSH
21886: LD_VAR 0 4
21890: PUSH
21891: FOR_IN
21892: IFFALSE 21934
// if GetTech ( i , side ) <> state then
21894: LD_VAR 0 5
21898: PPUSH
21899: LD_VAR 0 1
21903: PPUSH
21904: CALL_OW 321
21908: PUSH
21909: LD_VAR 0 3
21913: NONEQUAL
21914: IFFALSE 21932
// result := result diff i ;
21916: LD_ADDR_VAR 0 4
21920: PUSH
21921: LD_VAR 0 4
21925: PUSH
21926: LD_VAR 0 5
21930: DIFF
21931: ST_TO_ADDR
21932: GO 21891
21934: POP
21935: POP
// end ;
21936: LD_VAR 0 4
21940: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
21941: LD_INT 0
21943: PPUSH
21944: PPUSH
21945: PPUSH
// result := true ;
21946: LD_ADDR_VAR 0 3
21950: PUSH
21951: LD_INT 1
21953: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
21954: LD_ADDR_VAR 0 5
21958: PUSH
21959: LD_VAR 0 2
21963: PPUSH
21964: CALL_OW 480
21968: ST_TO_ADDR
// if not tmp then
21969: LD_VAR 0 5
21973: NOT
21974: IFFALSE 21978
// exit ;
21976: GO 22027
// for i in tmp do
21978: LD_ADDR_VAR 0 4
21982: PUSH
21983: LD_VAR 0 5
21987: PUSH
21988: FOR_IN
21989: IFFALSE 22025
// if GetTech ( i , side ) <> state_researched then
21991: LD_VAR 0 4
21995: PPUSH
21996: LD_VAR 0 1
22000: PPUSH
22001: CALL_OW 321
22005: PUSH
22006: LD_INT 2
22008: NONEQUAL
22009: IFFALSE 22023
// begin result := false ;
22011: LD_ADDR_VAR 0 3
22015: PUSH
22016: LD_INT 0
22018: ST_TO_ADDR
// exit ;
22019: POP
22020: POP
22021: GO 22027
// end ;
22023: GO 21988
22025: POP
22026: POP
// end ;
22027: LD_VAR 0 3
22031: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
22032: LD_INT 0
22034: PPUSH
22035: PPUSH
22036: PPUSH
22037: PPUSH
22038: PPUSH
22039: PPUSH
22040: PPUSH
22041: PPUSH
22042: PPUSH
22043: PPUSH
22044: PPUSH
22045: PPUSH
22046: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
22047: LD_VAR 0 1
22051: NOT
22052: PUSH
22053: LD_VAR 0 1
22057: PPUSH
22058: CALL_OW 257
22062: PUSH
22063: LD_INT 9
22065: NONEQUAL
22066: OR
22067: IFFALSE 22071
// exit ;
22069: GO 22644
// side := GetSide ( unit ) ;
22071: LD_ADDR_VAR 0 9
22075: PUSH
22076: LD_VAR 0 1
22080: PPUSH
22081: CALL_OW 255
22085: ST_TO_ADDR
// tech_space := tech_spacanom ;
22086: LD_ADDR_VAR 0 12
22090: PUSH
22091: LD_INT 29
22093: ST_TO_ADDR
// tech_time := tech_taurad ;
22094: LD_ADDR_VAR 0 13
22098: PUSH
22099: LD_INT 28
22101: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
22102: LD_ADDR_VAR 0 11
22106: PUSH
22107: LD_VAR 0 1
22111: PPUSH
22112: CALL_OW 310
22116: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
22117: LD_VAR 0 11
22121: PPUSH
22122: CALL_OW 247
22126: PUSH
22127: LD_INT 2
22129: EQUAL
22130: IFFALSE 22134
// exit ;
22132: GO 22644
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
22134: LD_ADDR_VAR 0 8
22138: PUSH
22139: LD_INT 81
22141: PUSH
22142: LD_VAR 0 9
22146: PUSH
22147: EMPTY
22148: LIST
22149: LIST
22150: PUSH
22151: LD_INT 3
22153: PUSH
22154: LD_INT 21
22156: PUSH
22157: LD_INT 3
22159: PUSH
22160: EMPTY
22161: LIST
22162: LIST
22163: PUSH
22164: EMPTY
22165: LIST
22166: LIST
22167: PUSH
22168: EMPTY
22169: LIST
22170: LIST
22171: PPUSH
22172: CALL_OW 69
22176: ST_TO_ADDR
// if not tmp then
22177: LD_VAR 0 8
22181: NOT
22182: IFFALSE 22186
// exit ;
22184: GO 22644
// if in_unit then
22186: LD_VAR 0 11
22190: IFFALSE 22214
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
22192: LD_ADDR_VAR 0 10
22196: PUSH
22197: LD_VAR 0 8
22201: PPUSH
22202: LD_VAR 0 11
22206: PPUSH
22207: CALL_OW 74
22211: ST_TO_ADDR
22212: GO 22234
// enemy := NearestUnitToUnit ( tmp , unit ) ;
22214: LD_ADDR_VAR 0 10
22218: PUSH
22219: LD_VAR 0 8
22223: PPUSH
22224: LD_VAR 0 1
22228: PPUSH
22229: CALL_OW 74
22233: ST_TO_ADDR
// if not enemy then
22234: LD_VAR 0 10
22238: NOT
22239: IFFALSE 22243
// exit ;
22241: GO 22644
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
22243: LD_VAR 0 11
22247: PUSH
22248: LD_VAR 0 11
22252: PPUSH
22253: LD_VAR 0 10
22257: PPUSH
22258: CALL_OW 296
22262: PUSH
22263: LD_INT 13
22265: GREATER
22266: AND
22267: PUSH
22268: LD_VAR 0 1
22272: PPUSH
22273: LD_VAR 0 10
22277: PPUSH
22278: CALL_OW 296
22282: PUSH
22283: LD_INT 12
22285: GREATER
22286: OR
22287: IFFALSE 22291
// exit ;
22289: GO 22644
// missile := [ 1 ] ;
22291: LD_ADDR_VAR 0 14
22295: PUSH
22296: LD_INT 1
22298: PUSH
22299: EMPTY
22300: LIST
22301: ST_TO_ADDR
// if Researched ( side , tech_space ) then
22302: LD_VAR 0 9
22306: PPUSH
22307: LD_VAR 0 12
22311: PPUSH
22312: CALL_OW 325
22316: IFFALSE 22345
// missile := Replace ( missile , missile + 1 , 2 ) ;
22318: LD_ADDR_VAR 0 14
22322: PUSH
22323: LD_VAR 0 14
22327: PPUSH
22328: LD_VAR 0 14
22332: PUSH
22333: LD_INT 1
22335: PLUS
22336: PPUSH
22337: LD_INT 2
22339: PPUSH
22340: CALL_OW 1
22344: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
22345: LD_VAR 0 9
22349: PPUSH
22350: LD_VAR 0 13
22354: PPUSH
22355: CALL_OW 325
22359: PUSH
22360: LD_VAR 0 10
22364: PPUSH
22365: CALL_OW 255
22369: PPUSH
22370: LD_VAR 0 13
22374: PPUSH
22375: CALL_OW 325
22379: NOT
22380: AND
22381: IFFALSE 22410
// missile := Replace ( missile , missile + 1 , 3 ) ;
22383: LD_ADDR_VAR 0 14
22387: PUSH
22388: LD_VAR 0 14
22392: PPUSH
22393: LD_VAR 0 14
22397: PUSH
22398: LD_INT 1
22400: PLUS
22401: PPUSH
22402: LD_INT 3
22404: PPUSH
22405: CALL_OW 1
22409: ST_TO_ADDR
// if missile < 2 then
22410: LD_VAR 0 14
22414: PUSH
22415: LD_INT 2
22417: LESS
22418: IFFALSE 22422
// exit ;
22420: GO 22644
// x := GetX ( enemy ) ;
22422: LD_ADDR_VAR 0 4
22426: PUSH
22427: LD_VAR 0 10
22431: PPUSH
22432: CALL_OW 250
22436: ST_TO_ADDR
// y := GetY ( enemy ) ;
22437: LD_ADDR_VAR 0 5
22441: PUSH
22442: LD_VAR 0 10
22446: PPUSH
22447: CALL_OW 251
22451: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
22452: LD_ADDR_VAR 0 6
22456: PUSH
22457: LD_VAR 0 4
22461: PUSH
22462: LD_INT 1
22464: NEG
22465: PPUSH
22466: LD_INT 1
22468: PPUSH
22469: CALL_OW 12
22473: PLUS
22474: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
22475: LD_ADDR_VAR 0 7
22479: PUSH
22480: LD_VAR 0 5
22484: PUSH
22485: LD_INT 1
22487: NEG
22488: PPUSH
22489: LD_INT 1
22491: PPUSH
22492: CALL_OW 12
22496: PLUS
22497: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
22498: LD_VAR 0 6
22502: PPUSH
22503: LD_VAR 0 7
22507: PPUSH
22508: CALL_OW 488
22512: NOT
22513: IFFALSE 22535
// begin _x := x ;
22515: LD_ADDR_VAR 0 6
22519: PUSH
22520: LD_VAR 0 4
22524: ST_TO_ADDR
// _y := y ;
22525: LD_ADDR_VAR 0 7
22529: PUSH
22530: LD_VAR 0 5
22534: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
22535: LD_ADDR_VAR 0 3
22539: PUSH
22540: LD_INT 1
22542: PPUSH
22543: LD_VAR 0 14
22547: PPUSH
22548: CALL_OW 12
22552: ST_TO_ADDR
// case i of 1 :
22553: LD_VAR 0 3
22557: PUSH
22558: LD_INT 1
22560: DOUBLE
22561: EQUAL
22562: IFTRUE 22566
22564: GO 22583
22566: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
22567: LD_VAR 0 1
22571: PPUSH
22572: LD_VAR 0 10
22576: PPUSH
22577: CALL_OW 115
22581: GO 22644
22583: LD_INT 2
22585: DOUBLE
22586: EQUAL
22587: IFTRUE 22591
22589: GO 22613
22591: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
22592: LD_VAR 0 1
22596: PPUSH
22597: LD_VAR 0 6
22601: PPUSH
22602: LD_VAR 0 7
22606: PPUSH
22607: CALL_OW 153
22611: GO 22644
22613: LD_INT 3
22615: DOUBLE
22616: EQUAL
22617: IFTRUE 22621
22619: GO 22643
22621: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
22622: LD_VAR 0 1
22626: PPUSH
22627: LD_VAR 0 6
22631: PPUSH
22632: LD_VAR 0 7
22636: PPUSH
22637: CALL_OW 154
22641: GO 22644
22643: POP
// end ;
22644: LD_VAR 0 2
22648: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
22649: LD_INT 0
22651: PPUSH
22652: PPUSH
22653: PPUSH
22654: PPUSH
22655: PPUSH
22656: PPUSH
// if not unit or not building then
22657: LD_VAR 0 1
22661: NOT
22662: PUSH
22663: LD_VAR 0 2
22667: NOT
22668: OR
22669: IFFALSE 22673
// exit ;
22671: GO 22831
// x := GetX ( building ) ;
22673: LD_ADDR_VAR 0 5
22677: PUSH
22678: LD_VAR 0 2
22682: PPUSH
22683: CALL_OW 250
22687: ST_TO_ADDR
// y := GetY ( building ) ;
22688: LD_ADDR_VAR 0 6
22692: PUSH
22693: LD_VAR 0 2
22697: PPUSH
22698: CALL_OW 251
22702: ST_TO_ADDR
// for i = 0 to 5 do
22703: LD_ADDR_VAR 0 4
22707: PUSH
22708: DOUBLE
22709: LD_INT 0
22711: DEC
22712: ST_TO_ADDR
22713: LD_INT 5
22715: PUSH
22716: FOR_TO
22717: IFFALSE 22829
// begin _x := ShiftX ( x , i , 3 ) ;
22719: LD_ADDR_VAR 0 7
22723: PUSH
22724: LD_VAR 0 5
22728: PPUSH
22729: LD_VAR 0 4
22733: PPUSH
22734: LD_INT 3
22736: PPUSH
22737: CALL_OW 272
22741: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
22742: LD_ADDR_VAR 0 8
22746: PUSH
22747: LD_VAR 0 6
22751: PPUSH
22752: LD_VAR 0 4
22756: PPUSH
22757: LD_INT 3
22759: PPUSH
22760: CALL_OW 273
22764: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
22765: LD_VAR 0 7
22769: PPUSH
22770: LD_VAR 0 8
22774: PPUSH
22775: CALL_OW 488
22779: NOT
22780: IFFALSE 22784
// continue ;
22782: GO 22716
// if HexInfo ( _x , _y ) = 0 then
22784: LD_VAR 0 7
22788: PPUSH
22789: LD_VAR 0 8
22793: PPUSH
22794: CALL_OW 428
22798: PUSH
22799: LD_INT 0
22801: EQUAL
22802: IFFALSE 22827
// begin ComMoveXY ( unit , _x , _y ) ;
22804: LD_VAR 0 1
22808: PPUSH
22809: LD_VAR 0 7
22813: PPUSH
22814: LD_VAR 0 8
22818: PPUSH
22819: CALL_OW 111
// exit ;
22823: POP
22824: POP
22825: GO 22831
// end ; end ;
22827: GO 22716
22829: POP
22830: POP
// end ;
22831: LD_VAR 0 3
22835: RET
// export function ScanBase ( side , base_area ) ; begin
22836: LD_INT 0
22838: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
22839: LD_ADDR_VAR 0 3
22843: PUSH
22844: LD_VAR 0 2
22848: PPUSH
22849: LD_INT 81
22851: PUSH
22852: LD_VAR 0 1
22856: PUSH
22857: EMPTY
22858: LIST
22859: LIST
22860: PPUSH
22861: CALL_OW 70
22865: ST_TO_ADDR
// end ;
22866: LD_VAR 0 3
22870: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
22871: LD_INT 0
22873: PPUSH
22874: PPUSH
22875: PPUSH
22876: PPUSH
// result := false ;
22877: LD_ADDR_VAR 0 2
22881: PUSH
22882: LD_INT 0
22884: ST_TO_ADDR
// side := GetSide ( unit ) ;
22885: LD_ADDR_VAR 0 3
22889: PUSH
22890: LD_VAR 0 1
22894: PPUSH
22895: CALL_OW 255
22899: ST_TO_ADDR
// nat := GetNation ( unit ) ;
22900: LD_ADDR_VAR 0 4
22904: PUSH
22905: LD_VAR 0 1
22909: PPUSH
22910: CALL_OW 248
22914: ST_TO_ADDR
// case nat of 1 :
22915: LD_VAR 0 4
22919: PUSH
22920: LD_INT 1
22922: DOUBLE
22923: EQUAL
22924: IFTRUE 22928
22926: GO 22939
22928: POP
// tech := tech_lassight ; 2 :
22929: LD_ADDR_VAR 0 5
22933: PUSH
22934: LD_INT 12
22936: ST_TO_ADDR
22937: GO 22978
22939: LD_INT 2
22941: DOUBLE
22942: EQUAL
22943: IFTRUE 22947
22945: GO 22958
22947: POP
// tech := tech_mortar ; 3 :
22948: LD_ADDR_VAR 0 5
22952: PUSH
22953: LD_INT 41
22955: ST_TO_ADDR
22956: GO 22978
22958: LD_INT 3
22960: DOUBLE
22961: EQUAL
22962: IFTRUE 22966
22964: GO 22977
22966: POP
// tech := tech_bazooka ; end ;
22967: LD_ADDR_VAR 0 5
22971: PUSH
22972: LD_INT 44
22974: ST_TO_ADDR
22975: GO 22978
22977: POP
// if Researched ( side , tech ) then
22978: LD_VAR 0 3
22982: PPUSH
22983: LD_VAR 0 5
22987: PPUSH
22988: CALL_OW 325
22992: IFFALSE 23019
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
22994: LD_ADDR_VAR 0 2
22998: PUSH
22999: LD_INT 5
23001: PUSH
23002: LD_INT 8
23004: PUSH
23005: LD_INT 9
23007: PUSH
23008: EMPTY
23009: LIST
23010: LIST
23011: LIST
23012: PUSH
23013: LD_VAR 0 4
23017: ARRAY
23018: ST_TO_ADDR
// end ;
23019: LD_VAR 0 2
23023: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
23024: LD_INT 0
23026: PPUSH
23027: PPUSH
23028: PPUSH
// if not mines then
23029: LD_VAR 0 2
23033: NOT
23034: IFFALSE 23038
// exit ;
23036: GO 23182
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
23038: LD_ADDR_VAR 0 5
23042: PUSH
23043: LD_INT 81
23045: PUSH
23046: LD_VAR 0 1
23050: PUSH
23051: EMPTY
23052: LIST
23053: LIST
23054: PUSH
23055: LD_INT 3
23057: PUSH
23058: LD_INT 21
23060: PUSH
23061: LD_INT 3
23063: PUSH
23064: EMPTY
23065: LIST
23066: LIST
23067: PUSH
23068: EMPTY
23069: LIST
23070: LIST
23071: PUSH
23072: EMPTY
23073: LIST
23074: LIST
23075: PPUSH
23076: CALL_OW 69
23080: ST_TO_ADDR
// for i in mines do
23081: LD_ADDR_VAR 0 4
23085: PUSH
23086: LD_VAR 0 2
23090: PUSH
23091: FOR_IN
23092: IFFALSE 23180
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
23094: LD_VAR 0 4
23098: PUSH
23099: LD_INT 1
23101: ARRAY
23102: PPUSH
23103: LD_VAR 0 4
23107: PUSH
23108: LD_INT 2
23110: ARRAY
23111: PPUSH
23112: CALL_OW 458
23116: NOT
23117: IFFALSE 23121
// continue ;
23119: GO 23091
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
23121: LD_VAR 0 4
23125: PUSH
23126: LD_INT 1
23128: ARRAY
23129: PPUSH
23130: LD_VAR 0 4
23134: PUSH
23135: LD_INT 2
23137: ARRAY
23138: PPUSH
23139: CALL_OW 428
23143: PUSH
23144: LD_VAR 0 5
23148: IN
23149: IFFALSE 23178
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
23151: LD_VAR 0 4
23155: PUSH
23156: LD_INT 1
23158: ARRAY
23159: PPUSH
23160: LD_VAR 0 4
23164: PUSH
23165: LD_INT 2
23167: ARRAY
23168: PPUSH
23169: LD_VAR 0 1
23173: PPUSH
23174: CALL_OW 456
// end ;
23178: GO 23091
23180: POP
23181: POP
// end ;
23182: LD_VAR 0 3
23186: RET
// export function Count ( array ) ; begin
23187: LD_INT 0
23189: PPUSH
// result := array + 0 ;
23190: LD_ADDR_VAR 0 2
23194: PUSH
23195: LD_VAR 0 1
23199: PUSH
23200: LD_INT 0
23202: PLUS
23203: ST_TO_ADDR
// end ;
23204: LD_VAR 0 2
23208: RET
// export function IsEmpty ( building ) ; begin
23209: LD_INT 0
23211: PPUSH
// if not building then
23212: LD_VAR 0 1
23216: NOT
23217: IFFALSE 23221
// exit ;
23219: GO 23264
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
23221: LD_ADDR_VAR 0 2
23225: PUSH
23226: LD_VAR 0 1
23230: PUSH
23231: LD_INT 22
23233: PUSH
23234: LD_VAR 0 1
23238: PPUSH
23239: CALL_OW 255
23243: PUSH
23244: EMPTY
23245: LIST
23246: LIST
23247: PUSH
23248: LD_INT 58
23250: PUSH
23251: EMPTY
23252: LIST
23253: PUSH
23254: EMPTY
23255: LIST
23256: LIST
23257: PPUSH
23258: CALL_OW 69
23262: IN
23263: ST_TO_ADDR
// end ;
23264: LD_VAR 0 2
23268: RET
// export function IsNotFull ( building ) ; var places ; begin
23269: LD_INT 0
23271: PPUSH
23272: PPUSH
// if not building then
23273: LD_VAR 0 1
23277: NOT
23278: IFFALSE 23282
// exit ;
23280: GO 23310
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
23282: LD_ADDR_VAR 0 2
23286: PUSH
23287: LD_VAR 0 1
23291: PPUSH
23292: LD_INT 3
23294: PUSH
23295: LD_INT 62
23297: PUSH
23298: EMPTY
23299: LIST
23300: PUSH
23301: EMPTY
23302: LIST
23303: LIST
23304: PPUSH
23305: CALL_OW 72
23309: ST_TO_ADDR
// end ;
23310: LD_VAR 0 2
23314: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
23315: LD_INT 0
23317: PPUSH
23318: PPUSH
23319: PPUSH
23320: PPUSH
// tmp := [ ] ;
23321: LD_ADDR_VAR 0 3
23325: PUSH
23326: EMPTY
23327: ST_TO_ADDR
// list := [ ] ;
23328: LD_ADDR_VAR 0 5
23332: PUSH
23333: EMPTY
23334: ST_TO_ADDR
// for i = 16 to 25 do
23335: LD_ADDR_VAR 0 4
23339: PUSH
23340: DOUBLE
23341: LD_INT 16
23343: DEC
23344: ST_TO_ADDR
23345: LD_INT 25
23347: PUSH
23348: FOR_TO
23349: IFFALSE 23422
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
23351: LD_ADDR_VAR 0 3
23355: PUSH
23356: LD_VAR 0 3
23360: PUSH
23361: LD_INT 22
23363: PUSH
23364: LD_VAR 0 1
23368: PPUSH
23369: CALL_OW 255
23373: PUSH
23374: EMPTY
23375: LIST
23376: LIST
23377: PUSH
23378: LD_INT 91
23380: PUSH
23381: LD_VAR 0 1
23385: PUSH
23386: LD_INT 6
23388: PUSH
23389: EMPTY
23390: LIST
23391: LIST
23392: LIST
23393: PUSH
23394: LD_INT 30
23396: PUSH
23397: LD_VAR 0 4
23401: PUSH
23402: EMPTY
23403: LIST
23404: LIST
23405: PUSH
23406: EMPTY
23407: LIST
23408: LIST
23409: LIST
23410: PUSH
23411: EMPTY
23412: LIST
23413: PPUSH
23414: CALL_OW 69
23418: ADD
23419: ST_TO_ADDR
23420: GO 23348
23422: POP
23423: POP
// for i = 1 to tmp do
23424: LD_ADDR_VAR 0 4
23428: PUSH
23429: DOUBLE
23430: LD_INT 1
23432: DEC
23433: ST_TO_ADDR
23434: LD_VAR 0 3
23438: PUSH
23439: FOR_TO
23440: IFFALSE 23528
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
23442: LD_ADDR_VAR 0 5
23446: PUSH
23447: LD_VAR 0 5
23451: PUSH
23452: LD_VAR 0 3
23456: PUSH
23457: LD_VAR 0 4
23461: ARRAY
23462: PPUSH
23463: CALL_OW 266
23467: PUSH
23468: LD_VAR 0 3
23472: PUSH
23473: LD_VAR 0 4
23477: ARRAY
23478: PPUSH
23479: CALL_OW 250
23483: PUSH
23484: LD_VAR 0 3
23488: PUSH
23489: LD_VAR 0 4
23493: ARRAY
23494: PPUSH
23495: CALL_OW 251
23499: PUSH
23500: LD_VAR 0 3
23504: PUSH
23505: LD_VAR 0 4
23509: ARRAY
23510: PPUSH
23511: CALL_OW 254
23515: PUSH
23516: EMPTY
23517: LIST
23518: LIST
23519: LIST
23520: LIST
23521: PUSH
23522: EMPTY
23523: LIST
23524: ADD
23525: ST_TO_ADDR
23526: GO 23439
23528: POP
23529: POP
// result := list ;
23530: LD_ADDR_VAR 0 2
23534: PUSH
23535: LD_VAR 0 5
23539: ST_TO_ADDR
// end ;
23540: LD_VAR 0 2
23544: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
23545: LD_INT 0
23547: PPUSH
23548: PPUSH
23549: PPUSH
23550: PPUSH
23551: PPUSH
23552: PPUSH
23553: PPUSH
// if not factory then
23554: LD_VAR 0 1
23558: NOT
23559: IFFALSE 23563
// exit ;
23561: GO 24156
// if control = control_apeman then
23563: LD_VAR 0 4
23567: PUSH
23568: LD_INT 5
23570: EQUAL
23571: IFFALSE 23680
// begin tmp := UnitsInside ( factory ) ;
23573: LD_ADDR_VAR 0 8
23577: PUSH
23578: LD_VAR 0 1
23582: PPUSH
23583: CALL_OW 313
23587: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
23588: LD_VAR 0 8
23592: PPUSH
23593: LD_INT 25
23595: PUSH
23596: LD_INT 12
23598: PUSH
23599: EMPTY
23600: LIST
23601: LIST
23602: PPUSH
23603: CALL_OW 72
23607: NOT
23608: IFFALSE 23618
// control := control_manual ;
23610: LD_ADDR_VAR 0 4
23614: PUSH
23615: LD_INT 1
23617: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
23618: LD_ADDR_VAR 0 8
23622: PUSH
23623: LD_VAR 0 1
23627: PPUSH
23628: CALL 23315 0 1
23632: ST_TO_ADDR
// if tmp then
23633: LD_VAR 0 8
23637: IFFALSE 23680
// begin for i in tmp do
23639: LD_ADDR_VAR 0 7
23643: PUSH
23644: LD_VAR 0 8
23648: PUSH
23649: FOR_IN
23650: IFFALSE 23678
// if i [ 1 ] = b_ext_radio then
23652: LD_VAR 0 7
23656: PUSH
23657: LD_INT 1
23659: ARRAY
23660: PUSH
23661: LD_INT 22
23663: EQUAL
23664: IFFALSE 23676
// begin control := control_remote ;
23666: LD_ADDR_VAR 0 4
23670: PUSH
23671: LD_INT 2
23673: ST_TO_ADDR
// break ;
23674: GO 23678
// end ;
23676: GO 23649
23678: POP
23679: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
23680: LD_VAR 0 1
23684: PPUSH
23685: LD_VAR 0 2
23689: PPUSH
23690: LD_VAR 0 3
23694: PPUSH
23695: LD_VAR 0 4
23699: PPUSH
23700: LD_VAR 0 5
23704: PPUSH
23705: CALL_OW 448
23709: IFFALSE 23744
// begin result := [ chassis , engine , control , weapon ] ;
23711: LD_ADDR_VAR 0 6
23715: PUSH
23716: LD_VAR 0 2
23720: PUSH
23721: LD_VAR 0 3
23725: PUSH
23726: LD_VAR 0 4
23730: PUSH
23731: LD_VAR 0 5
23735: PUSH
23736: EMPTY
23737: LIST
23738: LIST
23739: LIST
23740: LIST
23741: ST_TO_ADDR
// exit ;
23742: GO 24156
// end ; _chassis := AvailableChassisList ( factory ) ;
23744: LD_ADDR_VAR 0 9
23748: PUSH
23749: LD_VAR 0 1
23753: PPUSH
23754: CALL_OW 475
23758: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
23759: LD_ADDR_VAR 0 11
23763: PUSH
23764: LD_VAR 0 1
23768: PPUSH
23769: CALL_OW 476
23773: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
23774: LD_ADDR_VAR 0 12
23778: PUSH
23779: LD_VAR 0 1
23783: PPUSH
23784: CALL_OW 477
23788: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
23789: LD_ADDR_VAR 0 10
23793: PUSH
23794: LD_VAR 0 1
23798: PPUSH
23799: CALL_OW 478
23803: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
23804: LD_VAR 0 9
23808: NOT
23809: PUSH
23810: LD_VAR 0 11
23814: NOT
23815: OR
23816: PUSH
23817: LD_VAR 0 12
23821: NOT
23822: OR
23823: PUSH
23824: LD_VAR 0 10
23828: NOT
23829: OR
23830: IFFALSE 23865
// begin result := [ chassis , engine , control , weapon ] ;
23832: LD_ADDR_VAR 0 6
23836: PUSH
23837: LD_VAR 0 2
23841: PUSH
23842: LD_VAR 0 3
23846: PUSH
23847: LD_VAR 0 4
23851: PUSH
23852: LD_VAR 0 5
23856: PUSH
23857: EMPTY
23858: LIST
23859: LIST
23860: LIST
23861: LIST
23862: ST_TO_ADDR
// exit ;
23863: GO 24156
// end ; if not chassis in _chassis then
23865: LD_VAR 0 2
23869: PUSH
23870: LD_VAR 0 9
23874: IN
23875: NOT
23876: IFFALSE 23902
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
23878: LD_ADDR_VAR 0 2
23882: PUSH
23883: LD_VAR 0 9
23887: PUSH
23888: LD_INT 1
23890: PPUSH
23891: LD_VAR 0 9
23895: PPUSH
23896: CALL_OW 12
23900: ARRAY
23901: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
23902: LD_VAR 0 2
23906: PPUSH
23907: LD_VAR 0 3
23911: PPUSH
23912: CALL 24161 0 2
23916: NOT
23917: IFFALSE 23976
// repeat engine := _engine [ 1 ] ;
23919: LD_ADDR_VAR 0 3
23923: PUSH
23924: LD_VAR 0 11
23928: PUSH
23929: LD_INT 1
23931: ARRAY
23932: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
23933: LD_ADDR_VAR 0 11
23937: PUSH
23938: LD_VAR 0 11
23942: PPUSH
23943: LD_INT 1
23945: PPUSH
23946: CALL_OW 3
23950: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
23951: LD_VAR 0 2
23955: PPUSH
23956: LD_VAR 0 3
23960: PPUSH
23961: CALL 24161 0 2
23965: PUSH
23966: LD_VAR 0 11
23970: PUSH
23971: EMPTY
23972: EQUAL
23973: OR
23974: IFFALSE 23919
// if not control in _control then
23976: LD_VAR 0 4
23980: PUSH
23981: LD_VAR 0 12
23985: IN
23986: NOT
23987: IFFALSE 24013
// control := _control [ rand ( 1 , _control ) ] ;
23989: LD_ADDR_VAR 0 4
23993: PUSH
23994: LD_VAR 0 12
23998: PUSH
23999: LD_INT 1
24001: PPUSH
24002: LD_VAR 0 12
24006: PPUSH
24007: CALL_OW 12
24011: ARRAY
24012: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
24013: LD_VAR 0 2
24017: PPUSH
24018: LD_VAR 0 5
24022: PPUSH
24023: CALL 24381 0 2
24027: NOT
24028: IFFALSE 24087
// repeat weapon := _weapon [ 1 ] ;
24030: LD_ADDR_VAR 0 5
24034: PUSH
24035: LD_VAR 0 10
24039: PUSH
24040: LD_INT 1
24042: ARRAY
24043: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
24044: LD_ADDR_VAR 0 10
24048: PUSH
24049: LD_VAR 0 10
24053: PPUSH
24054: LD_INT 1
24056: PPUSH
24057: CALL_OW 3
24061: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
24062: LD_VAR 0 2
24066: PPUSH
24067: LD_VAR 0 5
24071: PPUSH
24072: CALL 24381 0 2
24076: PUSH
24077: LD_VAR 0 10
24081: PUSH
24082: EMPTY
24083: EQUAL
24084: OR
24085: IFFALSE 24030
// result := [ ] ;
24087: LD_ADDR_VAR 0 6
24091: PUSH
24092: EMPTY
24093: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
24094: LD_VAR 0 1
24098: PPUSH
24099: LD_VAR 0 2
24103: PPUSH
24104: LD_VAR 0 3
24108: PPUSH
24109: LD_VAR 0 4
24113: PPUSH
24114: LD_VAR 0 5
24118: PPUSH
24119: CALL_OW 448
24123: IFFALSE 24156
// result := [ chassis , engine , control , weapon ] ;
24125: LD_ADDR_VAR 0 6
24129: PUSH
24130: LD_VAR 0 2
24134: PUSH
24135: LD_VAR 0 3
24139: PUSH
24140: LD_VAR 0 4
24144: PUSH
24145: LD_VAR 0 5
24149: PUSH
24150: EMPTY
24151: LIST
24152: LIST
24153: LIST
24154: LIST
24155: ST_TO_ADDR
// end ;
24156: LD_VAR 0 6
24160: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
24161: LD_INT 0
24163: PPUSH
// if not chassis or not engine then
24164: LD_VAR 0 1
24168: NOT
24169: PUSH
24170: LD_VAR 0 2
24174: NOT
24175: OR
24176: IFFALSE 24180
// exit ;
24178: GO 24376
// case engine of engine_solar :
24180: LD_VAR 0 2
24184: PUSH
24185: LD_INT 2
24187: DOUBLE
24188: EQUAL
24189: IFTRUE 24193
24191: GO 24231
24193: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
24194: LD_ADDR_VAR 0 3
24198: PUSH
24199: LD_INT 11
24201: PUSH
24202: LD_INT 12
24204: PUSH
24205: LD_INT 13
24207: PUSH
24208: LD_INT 14
24210: PUSH
24211: LD_INT 1
24213: PUSH
24214: LD_INT 2
24216: PUSH
24217: LD_INT 3
24219: PUSH
24220: EMPTY
24221: LIST
24222: LIST
24223: LIST
24224: LIST
24225: LIST
24226: LIST
24227: LIST
24228: ST_TO_ADDR
24229: GO 24360
24231: LD_INT 1
24233: DOUBLE
24234: EQUAL
24235: IFTRUE 24239
24237: GO 24301
24239: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
24240: LD_ADDR_VAR 0 3
24244: PUSH
24245: LD_INT 11
24247: PUSH
24248: LD_INT 12
24250: PUSH
24251: LD_INT 13
24253: PUSH
24254: LD_INT 14
24256: PUSH
24257: LD_INT 1
24259: PUSH
24260: LD_INT 2
24262: PUSH
24263: LD_INT 3
24265: PUSH
24266: LD_INT 4
24268: PUSH
24269: LD_INT 5
24271: PUSH
24272: LD_INT 21
24274: PUSH
24275: LD_INT 23
24277: PUSH
24278: LD_INT 22
24280: PUSH
24281: LD_INT 24
24283: PUSH
24284: EMPTY
24285: LIST
24286: LIST
24287: LIST
24288: LIST
24289: LIST
24290: LIST
24291: LIST
24292: LIST
24293: LIST
24294: LIST
24295: LIST
24296: LIST
24297: LIST
24298: ST_TO_ADDR
24299: GO 24360
24301: LD_INT 3
24303: DOUBLE
24304: EQUAL
24305: IFTRUE 24309
24307: GO 24359
24309: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
24310: LD_ADDR_VAR 0 3
24314: PUSH
24315: LD_INT 13
24317: PUSH
24318: LD_INT 14
24320: PUSH
24321: LD_INT 2
24323: PUSH
24324: LD_INT 3
24326: PUSH
24327: LD_INT 4
24329: PUSH
24330: LD_INT 5
24332: PUSH
24333: LD_INT 21
24335: PUSH
24336: LD_INT 22
24338: PUSH
24339: LD_INT 23
24341: PUSH
24342: LD_INT 24
24344: PUSH
24345: EMPTY
24346: LIST
24347: LIST
24348: LIST
24349: LIST
24350: LIST
24351: LIST
24352: LIST
24353: LIST
24354: LIST
24355: LIST
24356: ST_TO_ADDR
24357: GO 24360
24359: POP
// result := ( chassis in result ) ;
24360: LD_ADDR_VAR 0 3
24364: PUSH
24365: LD_VAR 0 1
24369: PUSH
24370: LD_VAR 0 3
24374: IN
24375: ST_TO_ADDR
// end ;
24376: LD_VAR 0 3
24380: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
24381: LD_INT 0
24383: PPUSH
// if not chassis or not weapon then
24384: LD_VAR 0 1
24388: NOT
24389: PUSH
24390: LD_VAR 0 2
24394: NOT
24395: OR
24396: IFFALSE 24400
// exit ;
24398: GO 25460
// case weapon of us_machine_gun :
24400: LD_VAR 0 2
24404: PUSH
24405: LD_INT 2
24407: DOUBLE
24408: EQUAL
24409: IFTRUE 24413
24411: GO 24443
24413: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
24414: LD_ADDR_VAR 0 3
24418: PUSH
24419: LD_INT 1
24421: PUSH
24422: LD_INT 2
24424: PUSH
24425: LD_INT 3
24427: PUSH
24428: LD_INT 4
24430: PUSH
24431: LD_INT 5
24433: PUSH
24434: EMPTY
24435: LIST
24436: LIST
24437: LIST
24438: LIST
24439: LIST
24440: ST_TO_ADDR
24441: GO 25444
24443: LD_INT 3
24445: DOUBLE
24446: EQUAL
24447: IFTRUE 24451
24449: GO 24481
24451: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
24452: LD_ADDR_VAR 0 3
24456: PUSH
24457: LD_INT 1
24459: PUSH
24460: LD_INT 2
24462: PUSH
24463: LD_INT 3
24465: PUSH
24466: LD_INT 4
24468: PUSH
24469: LD_INT 5
24471: PUSH
24472: EMPTY
24473: LIST
24474: LIST
24475: LIST
24476: LIST
24477: LIST
24478: ST_TO_ADDR
24479: GO 25444
24481: LD_INT 11
24483: DOUBLE
24484: EQUAL
24485: IFTRUE 24489
24487: GO 24519
24489: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
24490: LD_ADDR_VAR 0 3
24494: PUSH
24495: LD_INT 1
24497: PUSH
24498: LD_INT 2
24500: PUSH
24501: LD_INT 3
24503: PUSH
24504: LD_INT 4
24506: PUSH
24507: LD_INT 5
24509: PUSH
24510: EMPTY
24511: LIST
24512: LIST
24513: LIST
24514: LIST
24515: LIST
24516: ST_TO_ADDR
24517: GO 25444
24519: LD_INT 4
24521: DOUBLE
24522: EQUAL
24523: IFTRUE 24527
24525: GO 24553
24527: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
24528: LD_ADDR_VAR 0 3
24532: PUSH
24533: LD_INT 2
24535: PUSH
24536: LD_INT 3
24538: PUSH
24539: LD_INT 4
24541: PUSH
24542: LD_INT 5
24544: PUSH
24545: EMPTY
24546: LIST
24547: LIST
24548: LIST
24549: LIST
24550: ST_TO_ADDR
24551: GO 25444
24553: LD_INT 5
24555: DOUBLE
24556: EQUAL
24557: IFTRUE 24561
24559: GO 24587
24561: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
24562: LD_ADDR_VAR 0 3
24566: PUSH
24567: LD_INT 2
24569: PUSH
24570: LD_INT 3
24572: PUSH
24573: LD_INT 4
24575: PUSH
24576: LD_INT 5
24578: PUSH
24579: EMPTY
24580: LIST
24581: LIST
24582: LIST
24583: LIST
24584: ST_TO_ADDR
24585: GO 25444
24587: LD_INT 9
24589: DOUBLE
24590: EQUAL
24591: IFTRUE 24595
24593: GO 24621
24595: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
24596: LD_ADDR_VAR 0 3
24600: PUSH
24601: LD_INT 2
24603: PUSH
24604: LD_INT 3
24606: PUSH
24607: LD_INT 4
24609: PUSH
24610: LD_INT 5
24612: PUSH
24613: EMPTY
24614: LIST
24615: LIST
24616: LIST
24617: LIST
24618: ST_TO_ADDR
24619: GO 25444
24621: LD_INT 7
24623: DOUBLE
24624: EQUAL
24625: IFTRUE 24629
24627: GO 24655
24629: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
24630: LD_ADDR_VAR 0 3
24634: PUSH
24635: LD_INT 2
24637: PUSH
24638: LD_INT 3
24640: PUSH
24641: LD_INT 4
24643: PUSH
24644: LD_INT 5
24646: PUSH
24647: EMPTY
24648: LIST
24649: LIST
24650: LIST
24651: LIST
24652: ST_TO_ADDR
24653: GO 25444
24655: LD_INT 12
24657: DOUBLE
24658: EQUAL
24659: IFTRUE 24663
24661: GO 24689
24663: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
24664: LD_ADDR_VAR 0 3
24668: PUSH
24669: LD_INT 2
24671: PUSH
24672: LD_INT 3
24674: PUSH
24675: LD_INT 4
24677: PUSH
24678: LD_INT 5
24680: PUSH
24681: EMPTY
24682: LIST
24683: LIST
24684: LIST
24685: LIST
24686: ST_TO_ADDR
24687: GO 25444
24689: LD_INT 13
24691: DOUBLE
24692: EQUAL
24693: IFTRUE 24697
24695: GO 24723
24697: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
24698: LD_ADDR_VAR 0 3
24702: PUSH
24703: LD_INT 2
24705: PUSH
24706: LD_INT 3
24708: PUSH
24709: LD_INT 4
24711: PUSH
24712: LD_INT 5
24714: PUSH
24715: EMPTY
24716: LIST
24717: LIST
24718: LIST
24719: LIST
24720: ST_TO_ADDR
24721: GO 25444
24723: LD_INT 14
24725: DOUBLE
24726: EQUAL
24727: IFTRUE 24731
24729: GO 24749
24731: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
24732: LD_ADDR_VAR 0 3
24736: PUSH
24737: LD_INT 4
24739: PUSH
24740: LD_INT 5
24742: PUSH
24743: EMPTY
24744: LIST
24745: LIST
24746: ST_TO_ADDR
24747: GO 25444
24749: LD_INT 6
24751: DOUBLE
24752: EQUAL
24753: IFTRUE 24757
24755: GO 24775
24757: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
24758: LD_ADDR_VAR 0 3
24762: PUSH
24763: LD_INT 4
24765: PUSH
24766: LD_INT 5
24768: PUSH
24769: EMPTY
24770: LIST
24771: LIST
24772: ST_TO_ADDR
24773: GO 25444
24775: LD_INT 10
24777: DOUBLE
24778: EQUAL
24779: IFTRUE 24783
24781: GO 24801
24783: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
24784: LD_ADDR_VAR 0 3
24788: PUSH
24789: LD_INT 4
24791: PUSH
24792: LD_INT 5
24794: PUSH
24795: EMPTY
24796: LIST
24797: LIST
24798: ST_TO_ADDR
24799: GO 25444
24801: LD_INT 22
24803: DOUBLE
24804: EQUAL
24805: IFTRUE 24809
24807: GO 24835
24809: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
24810: LD_ADDR_VAR 0 3
24814: PUSH
24815: LD_INT 11
24817: PUSH
24818: LD_INT 12
24820: PUSH
24821: LD_INT 13
24823: PUSH
24824: LD_INT 14
24826: PUSH
24827: EMPTY
24828: LIST
24829: LIST
24830: LIST
24831: LIST
24832: ST_TO_ADDR
24833: GO 25444
24835: LD_INT 23
24837: DOUBLE
24838: EQUAL
24839: IFTRUE 24843
24841: GO 24869
24843: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
24844: LD_ADDR_VAR 0 3
24848: PUSH
24849: LD_INT 11
24851: PUSH
24852: LD_INT 12
24854: PUSH
24855: LD_INT 13
24857: PUSH
24858: LD_INT 14
24860: PUSH
24861: EMPTY
24862: LIST
24863: LIST
24864: LIST
24865: LIST
24866: ST_TO_ADDR
24867: GO 25444
24869: LD_INT 24
24871: DOUBLE
24872: EQUAL
24873: IFTRUE 24877
24875: GO 24903
24877: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
24878: LD_ADDR_VAR 0 3
24882: PUSH
24883: LD_INT 11
24885: PUSH
24886: LD_INT 12
24888: PUSH
24889: LD_INT 13
24891: PUSH
24892: LD_INT 14
24894: PUSH
24895: EMPTY
24896: LIST
24897: LIST
24898: LIST
24899: LIST
24900: ST_TO_ADDR
24901: GO 25444
24903: LD_INT 30
24905: DOUBLE
24906: EQUAL
24907: IFTRUE 24911
24909: GO 24937
24911: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
24912: LD_ADDR_VAR 0 3
24916: PUSH
24917: LD_INT 11
24919: PUSH
24920: LD_INT 12
24922: PUSH
24923: LD_INT 13
24925: PUSH
24926: LD_INT 14
24928: PUSH
24929: EMPTY
24930: LIST
24931: LIST
24932: LIST
24933: LIST
24934: ST_TO_ADDR
24935: GO 25444
24937: LD_INT 25
24939: DOUBLE
24940: EQUAL
24941: IFTRUE 24945
24943: GO 24963
24945: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
24946: LD_ADDR_VAR 0 3
24950: PUSH
24951: LD_INT 13
24953: PUSH
24954: LD_INT 14
24956: PUSH
24957: EMPTY
24958: LIST
24959: LIST
24960: ST_TO_ADDR
24961: GO 25444
24963: LD_INT 27
24965: DOUBLE
24966: EQUAL
24967: IFTRUE 24971
24969: GO 24989
24971: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
24972: LD_ADDR_VAR 0 3
24976: PUSH
24977: LD_INT 13
24979: PUSH
24980: LD_INT 14
24982: PUSH
24983: EMPTY
24984: LIST
24985: LIST
24986: ST_TO_ADDR
24987: GO 25444
24989: LD_INT 92
24991: DOUBLE
24992: EQUAL
24993: IFTRUE 24997
24995: GO 25023
24997: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
24998: LD_ADDR_VAR 0 3
25002: PUSH
25003: LD_INT 11
25005: PUSH
25006: LD_INT 12
25008: PUSH
25009: LD_INT 13
25011: PUSH
25012: LD_INT 14
25014: PUSH
25015: EMPTY
25016: LIST
25017: LIST
25018: LIST
25019: LIST
25020: ST_TO_ADDR
25021: GO 25444
25023: LD_INT 28
25025: DOUBLE
25026: EQUAL
25027: IFTRUE 25031
25029: GO 25049
25031: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
25032: LD_ADDR_VAR 0 3
25036: PUSH
25037: LD_INT 13
25039: PUSH
25040: LD_INT 14
25042: PUSH
25043: EMPTY
25044: LIST
25045: LIST
25046: ST_TO_ADDR
25047: GO 25444
25049: LD_INT 29
25051: DOUBLE
25052: EQUAL
25053: IFTRUE 25057
25055: GO 25075
25057: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
25058: LD_ADDR_VAR 0 3
25062: PUSH
25063: LD_INT 13
25065: PUSH
25066: LD_INT 14
25068: PUSH
25069: EMPTY
25070: LIST
25071: LIST
25072: ST_TO_ADDR
25073: GO 25444
25075: LD_INT 31
25077: DOUBLE
25078: EQUAL
25079: IFTRUE 25083
25081: GO 25101
25083: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
25084: LD_ADDR_VAR 0 3
25088: PUSH
25089: LD_INT 13
25091: PUSH
25092: LD_INT 14
25094: PUSH
25095: EMPTY
25096: LIST
25097: LIST
25098: ST_TO_ADDR
25099: GO 25444
25101: LD_INT 26
25103: DOUBLE
25104: EQUAL
25105: IFTRUE 25109
25107: GO 25127
25109: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
25110: LD_ADDR_VAR 0 3
25114: PUSH
25115: LD_INT 13
25117: PUSH
25118: LD_INT 14
25120: PUSH
25121: EMPTY
25122: LIST
25123: LIST
25124: ST_TO_ADDR
25125: GO 25444
25127: LD_INT 42
25129: DOUBLE
25130: EQUAL
25131: IFTRUE 25135
25133: GO 25161
25135: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
25136: LD_ADDR_VAR 0 3
25140: PUSH
25141: LD_INT 21
25143: PUSH
25144: LD_INT 22
25146: PUSH
25147: LD_INT 23
25149: PUSH
25150: LD_INT 24
25152: PUSH
25153: EMPTY
25154: LIST
25155: LIST
25156: LIST
25157: LIST
25158: ST_TO_ADDR
25159: GO 25444
25161: LD_INT 43
25163: DOUBLE
25164: EQUAL
25165: IFTRUE 25169
25167: GO 25195
25169: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
25170: LD_ADDR_VAR 0 3
25174: PUSH
25175: LD_INT 21
25177: PUSH
25178: LD_INT 22
25180: PUSH
25181: LD_INT 23
25183: PUSH
25184: LD_INT 24
25186: PUSH
25187: EMPTY
25188: LIST
25189: LIST
25190: LIST
25191: LIST
25192: ST_TO_ADDR
25193: GO 25444
25195: LD_INT 44
25197: DOUBLE
25198: EQUAL
25199: IFTRUE 25203
25201: GO 25229
25203: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
25204: LD_ADDR_VAR 0 3
25208: PUSH
25209: LD_INT 21
25211: PUSH
25212: LD_INT 22
25214: PUSH
25215: LD_INT 23
25217: PUSH
25218: LD_INT 24
25220: PUSH
25221: EMPTY
25222: LIST
25223: LIST
25224: LIST
25225: LIST
25226: ST_TO_ADDR
25227: GO 25444
25229: LD_INT 45
25231: DOUBLE
25232: EQUAL
25233: IFTRUE 25237
25235: GO 25263
25237: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
25238: LD_ADDR_VAR 0 3
25242: PUSH
25243: LD_INT 21
25245: PUSH
25246: LD_INT 22
25248: PUSH
25249: LD_INT 23
25251: PUSH
25252: LD_INT 24
25254: PUSH
25255: EMPTY
25256: LIST
25257: LIST
25258: LIST
25259: LIST
25260: ST_TO_ADDR
25261: GO 25444
25263: LD_INT 49
25265: DOUBLE
25266: EQUAL
25267: IFTRUE 25271
25269: GO 25297
25271: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
25272: LD_ADDR_VAR 0 3
25276: PUSH
25277: LD_INT 21
25279: PUSH
25280: LD_INT 22
25282: PUSH
25283: LD_INT 23
25285: PUSH
25286: LD_INT 24
25288: PUSH
25289: EMPTY
25290: LIST
25291: LIST
25292: LIST
25293: LIST
25294: ST_TO_ADDR
25295: GO 25444
25297: LD_INT 51
25299: DOUBLE
25300: EQUAL
25301: IFTRUE 25305
25303: GO 25331
25305: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
25306: LD_ADDR_VAR 0 3
25310: PUSH
25311: LD_INT 21
25313: PUSH
25314: LD_INT 22
25316: PUSH
25317: LD_INT 23
25319: PUSH
25320: LD_INT 24
25322: PUSH
25323: EMPTY
25324: LIST
25325: LIST
25326: LIST
25327: LIST
25328: ST_TO_ADDR
25329: GO 25444
25331: LD_INT 52
25333: DOUBLE
25334: EQUAL
25335: IFTRUE 25339
25337: GO 25365
25339: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
25340: LD_ADDR_VAR 0 3
25344: PUSH
25345: LD_INT 21
25347: PUSH
25348: LD_INT 22
25350: PUSH
25351: LD_INT 23
25353: PUSH
25354: LD_INT 24
25356: PUSH
25357: EMPTY
25358: LIST
25359: LIST
25360: LIST
25361: LIST
25362: ST_TO_ADDR
25363: GO 25444
25365: LD_INT 53
25367: DOUBLE
25368: EQUAL
25369: IFTRUE 25373
25371: GO 25391
25373: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
25374: LD_ADDR_VAR 0 3
25378: PUSH
25379: LD_INT 23
25381: PUSH
25382: LD_INT 24
25384: PUSH
25385: EMPTY
25386: LIST
25387: LIST
25388: ST_TO_ADDR
25389: GO 25444
25391: LD_INT 46
25393: DOUBLE
25394: EQUAL
25395: IFTRUE 25399
25397: GO 25417
25399: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
25400: LD_ADDR_VAR 0 3
25404: PUSH
25405: LD_INT 23
25407: PUSH
25408: LD_INT 24
25410: PUSH
25411: EMPTY
25412: LIST
25413: LIST
25414: ST_TO_ADDR
25415: GO 25444
25417: LD_INT 47
25419: DOUBLE
25420: EQUAL
25421: IFTRUE 25425
25423: GO 25443
25425: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
25426: LD_ADDR_VAR 0 3
25430: PUSH
25431: LD_INT 23
25433: PUSH
25434: LD_INT 24
25436: PUSH
25437: EMPTY
25438: LIST
25439: LIST
25440: ST_TO_ADDR
25441: GO 25444
25443: POP
// result := ( chassis in result ) ;
25444: LD_ADDR_VAR 0 3
25448: PUSH
25449: LD_VAR 0 1
25453: PUSH
25454: LD_VAR 0 3
25458: IN
25459: ST_TO_ADDR
// end ;
25460: LD_VAR 0 3
25464: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
25465: LD_INT 0
25467: PPUSH
25468: PPUSH
25469: PPUSH
25470: PPUSH
25471: PPUSH
25472: PPUSH
25473: PPUSH
// result := array ;
25474: LD_ADDR_VAR 0 5
25478: PUSH
25479: LD_VAR 0 1
25483: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
25484: LD_VAR 0 1
25488: NOT
25489: PUSH
25490: LD_VAR 0 2
25494: NOT
25495: OR
25496: PUSH
25497: LD_VAR 0 3
25501: NOT
25502: OR
25503: PUSH
25504: LD_VAR 0 2
25508: PUSH
25509: LD_VAR 0 1
25513: GREATER
25514: OR
25515: PUSH
25516: LD_VAR 0 3
25520: PUSH
25521: LD_VAR 0 1
25525: GREATER
25526: OR
25527: IFFALSE 25531
// exit ;
25529: GO 25827
// if direction then
25531: LD_VAR 0 4
25535: IFFALSE 25599
// begin d := 1 ;
25537: LD_ADDR_VAR 0 9
25541: PUSH
25542: LD_INT 1
25544: ST_TO_ADDR
// if i_from > i_to then
25545: LD_VAR 0 2
25549: PUSH
25550: LD_VAR 0 3
25554: GREATER
25555: IFFALSE 25581
// length := ( array - i_from ) + i_to else
25557: LD_ADDR_VAR 0 11
25561: PUSH
25562: LD_VAR 0 1
25566: PUSH
25567: LD_VAR 0 2
25571: MINUS
25572: PUSH
25573: LD_VAR 0 3
25577: PLUS
25578: ST_TO_ADDR
25579: GO 25597
// length := i_to - i_from ;
25581: LD_ADDR_VAR 0 11
25585: PUSH
25586: LD_VAR 0 3
25590: PUSH
25591: LD_VAR 0 2
25595: MINUS
25596: ST_TO_ADDR
// end else
25597: GO 25660
// begin d := - 1 ;
25599: LD_ADDR_VAR 0 9
25603: PUSH
25604: LD_INT 1
25606: NEG
25607: ST_TO_ADDR
// if i_from > i_to then
25608: LD_VAR 0 2
25612: PUSH
25613: LD_VAR 0 3
25617: GREATER
25618: IFFALSE 25638
// length := i_from - i_to else
25620: LD_ADDR_VAR 0 11
25624: PUSH
25625: LD_VAR 0 2
25629: PUSH
25630: LD_VAR 0 3
25634: MINUS
25635: ST_TO_ADDR
25636: GO 25660
// length := ( array - i_to ) + i_from ;
25638: LD_ADDR_VAR 0 11
25642: PUSH
25643: LD_VAR 0 1
25647: PUSH
25648: LD_VAR 0 3
25652: MINUS
25653: PUSH
25654: LD_VAR 0 2
25658: PLUS
25659: ST_TO_ADDR
// end ; if not length then
25660: LD_VAR 0 11
25664: NOT
25665: IFFALSE 25669
// exit ;
25667: GO 25827
// tmp := array ;
25669: LD_ADDR_VAR 0 10
25673: PUSH
25674: LD_VAR 0 1
25678: ST_TO_ADDR
// for i = 1 to length do
25679: LD_ADDR_VAR 0 6
25683: PUSH
25684: DOUBLE
25685: LD_INT 1
25687: DEC
25688: ST_TO_ADDR
25689: LD_VAR 0 11
25693: PUSH
25694: FOR_TO
25695: IFFALSE 25815
// begin for j = 1 to array do
25697: LD_ADDR_VAR 0 7
25701: PUSH
25702: DOUBLE
25703: LD_INT 1
25705: DEC
25706: ST_TO_ADDR
25707: LD_VAR 0 1
25711: PUSH
25712: FOR_TO
25713: IFFALSE 25801
// begin k := j + d ;
25715: LD_ADDR_VAR 0 8
25719: PUSH
25720: LD_VAR 0 7
25724: PUSH
25725: LD_VAR 0 9
25729: PLUS
25730: ST_TO_ADDR
// if k > array then
25731: LD_VAR 0 8
25735: PUSH
25736: LD_VAR 0 1
25740: GREATER
25741: IFFALSE 25751
// k := 1 ;
25743: LD_ADDR_VAR 0 8
25747: PUSH
25748: LD_INT 1
25750: ST_TO_ADDR
// if not k then
25751: LD_VAR 0 8
25755: NOT
25756: IFFALSE 25768
// k := array ;
25758: LD_ADDR_VAR 0 8
25762: PUSH
25763: LD_VAR 0 1
25767: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
25768: LD_ADDR_VAR 0 10
25772: PUSH
25773: LD_VAR 0 10
25777: PPUSH
25778: LD_VAR 0 8
25782: PPUSH
25783: LD_VAR 0 1
25787: PUSH
25788: LD_VAR 0 7
25792: ARRAY
25793: PPUSH
25794: CALL_OW 1
25798: ST_TO_ADDR
// end ;
25799: GO 25712
25801: POP
25802: POP
// array := tmp ;
25803: LD_ADDR_VAR 0 1
25807: PUSH
25808: LD_VAR 0 10
25812: ST_TO_ADDR
// end ;
25813: GO 25694
25815: POP
25816: POP
// result := array ;
25817: LD_ADDR_VAR 0 5
25821: PUSH
25822: LD_VAR 0 1
25826: ST_TO_ADDR
// end ;
25827: LD_VAR 0 5
25831: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
25832: LD_INT 0
25834: PPUSH
25835: PPUSH
// result := 0 ;
25836: LD_ADDR_VAR 0 3
25840: PUSH
25841: LD_INT 0
25843: ST_TO_ADDR
// if not array or not value in array then
25844: LD_VAR 0 1
25848: NOT
25849: PUSH
25850: LD_VAR 0 2
25854: PUSH
25855: LD_VAR 0 1
25859: IN
25860: NOT
25861: OR
25862: IFFALSE 25866
// exit ;
25864: GO 25920
// for i = 1 to array do
25866: LD_ADDR_VAR 0 4
25870: PUSH
25871: DOUBLE
25872: LD_INT 1
25874: DEC
25875: ST_TO_ADDR
25876: LD_VAR 0 1
25880: PUSH
25881: FOR_TO
25882: IFFALSE 25918
// if value = array [ i ] then
25884: LD_VAR 0 2
25888: PUSH
25889: LD_VAR 0 1
25893: PUSH
25894: LD_VAR 0 4
25898: ARRAY
25899: EQUAL
25900: IFFALSE 25916
// begin result := i ;
25902: LD_ADDR_VAR 0 3
25906: PUSH
25907: LD_VAR 0 4
25911: ST_TO_ADDR
// exit ;
25912: POP
25913: POP
25914: GO 25920
// end ;
25916: GO 25881
25918: POP
25919: POP
// end ;
25920: LD_VAR 0 3
25924: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
25925: LD_INT 0
25927: PPUSH
// vc_chassis := chassis ;
25928: LD_ADDR_OWVAR 37
25932: PUSH
25933: LD_VAR 0 1
25937: ST_TO_ADDR
// vc_engine := engine ;
25938: LD_ADDR_OWVAR 39
25942: PUSH
25943: LD_VAR 0 2
25947: ST_TO_ADDR
// vc_control := control ;
25948: LD_ADDR_OWVAR 38
25952: PUSH
25953: LD_VAR 0 3
25957: ST_TO_ADDR
// vc_weapon := weapon ;
25958: LD_ADDR_OWVAR 40
25962: PUSH
25963: LD_VAR 0 4
25967: ST_TO_ADDR
// vc_fuel_battery := fuel ;
25968: LD_ADDR_OWVAR 41
25972: PUSH
25973: LD_VAR 0 5
25977: ST_TO_ADDR
// end ;
25978: LD_VAR 0 6
25982: RET
// export function WantPlant ( unit ) ; var task ; begin
25983: LD_INT 0
25985: PPUSH
25986: PPUSH
// result := false ;
25987: LD_ADDR_VAR 0 2
25991: PUSH
25992: LD_INT 0
25994: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
25995: LD_ADDR_VAR 0 3
25999: PUSH
26000: LD_VAR 0 1
26004: PPUSH
26005: CALL_OW 437
26009: ST_TO_ADDR
// if task then
26010: LD_VAR 0 3
26014: IFFALSE 26042
// if task [ 1 ] [ 1 ] = p then
26016: LD_VAR 0 3
26020: PUSH
26021: LD_INT 1
26023: ARRAY
26024: PUSH
26025: LD_INT 1
26027: ARRAY
26028: PUSH
26029: LD_STRING p
26031: EQUAL
26032: IFFALSE 26042
// result := true ;
26034: LD_ADDR_VAR 0 2
26038: PUSH
26039: LD_INT 1
26041: ST_TO_ADDR
// end ;
26042: LD_VAR 0 2
26046: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
26047: LD_INT 0
26049: PPUSH
26050: PPUSH
26051: PPUSH
26052: PPUSH
// if pos < 1 then
26053: LD_VAR 0 2
26057: PUSH
26058: LD_INT 1
26060: LESS
26061: IFFALSE 26065
// exit ;
26063: GO 26368
// if pos = 1 then
26065: LD_VAR 0 2
26069: PUSH
26070: LD_INT 1
26072: EQUAL
26073: IFFALSE 26106
// result := Replace ( arr , pos [ 1 ] , value ) else
26075: LD_ADDR_VAR 0 4
26079: PUSH
26080: LD_VAR 0 1
26084: PPUSH
26085: LD_VAR 0 2
26089: PUSH
26090: LD_INT 1
26092: ARRAY
26093: PPUSH
26094: LD_VAR 0 3
26098: PPUSH
26099: CALL_OW 1
26103: ST_TO_ADDR
26104: GO 26368
// begin tmp := arr ;
26106: LD_ADDR_VAR 0 6
26110: PUSH
26111: LD_VAR 0 1
26115: ST_TO_ADDR
// s_arr := [ tmp ] ;
26116: LD_ADDR_VAR 0 7
26120: PUSH
26121: LD_VAR 0 6
26125: PUSH
26126: EMPTY
26127: LIST
26128: ST_TO_ADDR
// for i = 1 to pos - 1 do
26129: LD_ADDR_VAR 0 5
26133: PUSH
26134: DOUBLE
26135: LD_INT 1
26137: DEC
26138: ST_TO_ADDR
26139: LD_VAR 0 2
26143: PUSH
26144: LD_INT 1
26146: MINUS
26147: PUSH
26148: FOR_TO
26149: IFFALSE 26194
// begin tmp := tmp [ pos [ i ] ] ;
26151: LD_ADDR_VAR 0 6
26155: PUSH
26156: LD_VAR 0 6
26160: PUSH
26161: LD_VAR 0 2
26165: PUSH
26166: LD_VAR 0 5
26170: ARRAY
26171: ARRAY
26172: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
26173: LD_ADDR_VAR 0 7
26177: PUSH
26178: LD_VAR 0 7
26182: PUSH
26183: LD_VAR 0 6
26187: PUSH
26188: EMPTY
26189: LIST
26190: ADD
26191: ST_TO_ADDR
// end ;
26192: GO 26148
26194: POP
26195: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
26196: LD_ADDR_VAR 0 6
26200: PUSH
26201: LD_VAR 0 6
26205: PPUSH
26206: LD_VAR 0 2
26210: PUSH
26211: LD_VAR 0 2
26215: ARRAY
26216: PPUSH
26217: LD_VAR 0 3
26221: PPUSH
26222: CALL_OW 1
26226: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
26227: LD_ADDR_VAR 0 7
26231: PUSH
26232: LD_VAR 0 7
26236: PPUSH
26237: LD_VAR 0 7
26241: PPUSH
26242: LD_VAR 0 6
26246: PPUSH
26247: CALL_OW 1
26251: ST_TO_ADDR
// for i = s_arr downto 2 do
26252: LD_ADDR_VAR 0 5
26256: PUSH
26257: DOUBLE
26258: LD_VAR 0 7
26262: INC
26263: ST_TO_ADDR
26264: LD_INT 2
26266: PUSH
26267: FOR_DOWNTO
26268: IFFALSE 26352
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
26270: LD_ADDR_VAR 0 6
26274: PUSH
26275: LD_VAR 0 7
26279: PUSH
26280: LD_VAR 0 5
26284: PUSH
26285: LD_INT 1
26287: MINUS
26288: ARRAY
26289: PPUSH
26290: LD_VAR 0 2
26294: PUSH
26295: LD_VAR 0 5
26299: PUSH
26300: LD_INT 1
26302: MINUS
26303: ARRAY
26304: PPUSH
26305: LD_VAR 0 7
26309: PUSH
26310: LD_VAR 0 5
26314: ARRAY
26315: PPUSH
26316: CALL_OW 1
26320: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
26321: LD_ADDR_VAR 0 7
26325: PUSH
26326: LD_VAR 0 7
26330: PPUSH
26331: LD_VAR 0 5
26335: PUSH
26336: LD_INT 1
26338: MINUS
26339: PPUSH
26340: LD_VAR 0 6
26344: PPUSH
26345: CALL_OW 1
26349: ST_TO_ADDR
// end ;
26350: GO 26267
26352: POP
26353: POP
// result := s_arr [ 1 ] ;
26354: LD_ADDR_VAR 0 4
26358: PUSH
26359: LD_VAR 0 7
26363: PUSH
26364: LD_INT 1
26366: ARRAY
26367: ST_TO_ADDR
// end ; end ;
26368: LD_VAR 0 4
26372: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
26373: LD_INT 0
26375: PPUSH
26376: PPUSH
// if not list then
26377: LD_VAR 0 1
26381: NOT
26382: IFFALSE 26386
// exit ;
26384: GO 26477
// i := list [ pos1 ] ;
26386: LD_ADDR_VAR 0 5
26390: PUSH
26391: LD_VAR 0 1
26395: PUSH
26396: LD_VAR 0 2
26400: ARRAY
26401: ST_TO_ADDR
// if not i then
26402: LD_VAR 0 5
26406: NOT
26407: IFFALSE 26411
// exit ;
26409: GO 26477
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
26411: LD_ADDR_VAR 0 1
26415: PUSH
26416: LD_VAR 0 1
26420: PPUSH
26421: LD_VAR 0 2
26425: PPUSH
26426: LD_VAR 0 1
26430: PUSH
26431: LD_VAR 0 3
26435: ARRAY
26436: PPUSH
26437: CALL_OW 1
26441: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
26442: LD_ADDR_VAR 0 1
26446: PUSH
26447: LD_VAR 0 1
26451: PPUSH
26452: LD_VAR 0 3
26456: PPUSH
26457: LD_VAR 0 5
26461: PPUSH
26462: CALL_OW 1
26466: ST_TO_ADDR
// result := list ;
26467: LD_ADDR_VAR 0 4
26471: PUSH
26472: LD_VAR 0 1
26476: ST_TO_ADDR
// end ;
26477: LD_VAR 0 4
26481: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
26482: LD_INT 0
26484: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
26485: LD_ADDR_VAR 0 5
26489: PUSH
26490: LD_VAR 0 1
26494: PPUSH
26495: CALL_OW 250
26499: PPUSH
26500: LD_VAR 0 1
26504: PPUSH
26505: CALL_OW 251
26509: PPUSH
26510: LD_VAR 0 2
26514: PPUSH
26515: LD_VAR 0 3
26519: PPUSH
26520: LD_VAR 0 4
26524: PPUSH
26525: CALL 26903 0 5
26529: ST_TO_ADDR
// end ;
26530: LD_VAR 0 5
26534: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
26535: LD_INT 0
26537: PPUSH
26538: PPUSH
26539: PPUSH
26540: PPUSH
// if not list or not unit then
26541: LD_VAR 0 2
26545: NOT
26546: PUSH
26547: LD_VAR 0 1
26551: NOT
26552: OR
26553: IFFALSE 26557
// exit ;
26555: GO 26898
// result := [ ] ;
26557: LD_ADDR_VAR 0 5
26561: PUSH
26562: EMPTY
26563: ST_TO_ADDR
// for i in list do
26564: LD_ADDR_VAR 0 6
26568: PUSH
26569: LD_VAR 0 2
26573: PUSH
26574: FOR_IN
26575: IFFALSE 26793
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
26577: LD_ADDR_VAR 0 8
26581: PUSH
26582: LD_VAR 0 1
26586: PPUSH
26587: LD_VAR 0 6
26591: PUSH
26592: LD_INT 1
26594: ARRAY
26595: PPUSH
26596: LD_VAR 0 6
26600: PUSH
26601: LD_INT 2
26603: ARRAY
26604: PPUSH
26605: CALL_OW 297
26609: ST_TO_ADDR
// if not Count ( result ) then
26610: LD_VAR 0 5
26614: PPUSH
26615: CALL 23187 0 1
26619: NOT
26620: IFFALSE 26653
// begin result := Join ( result , [ i , tmp ] ) ;
26622: LD_ADDR_VAR 0 5
26626: PUSH
26627: LD_VAR 0 5
26631: PPUSH
26632: LD_VAR 0 6
26636: PUSH
26637: LD_VAR 0 8
26641: PUSH
26642: EMPTY
26643: LIST
26644: LIST
26645: PPUSH
26646: CALL 58796 0 2
26650: ST_TO_ADDR
// continue ;
26651: GO 26574
// end ; if result [ result ] [ 2 ] <= tmp then
26653: LD_VAR 0 5
26657: PUSH
26658: LD_VAR 0 5
26662: ARRAY
26663: PUSH
26664: LD_INT 2
26666: ARRAY
26667: PUSH
26668: LD_VAR 0 8
26672: LESSEQUAL
26673: IFFALSE 26706
// result := Join ( result , [ i , tmp ] ) else
26675: LD_ADDR_VAR 0 5
26679: PUSH
26680: LD_VAR 0 5
26684: PPUSH
26685: LD_VAR 0 6
26689: PUSH
26690: LD_VAR 0 8
26694: PUSH
26695: EMPTY
26696: LIST
26697: LIST
26698: PPUSH
26699: CALL 58796 0 2
26703: ST_TO_ADDR
26704: GO 26791
// begin for j := 1 to Count ( result ) do
26706: LD_ADDR_VAR 0 7
26710: PUSH
26711: DOUBLE
26712: LD_INT 1
26714: DEC
26715: ST_TO_ADDR
26716: LD_VAR 0 5
26720: PPUSH
26721: CALL 23187 0 1
26725: PUSH
26726: FOR_TO
26727: IFFALSE 26789
// begin if tmp < result [ j ] [ 2 ] then
26729: LD_VAR 0 8
26733: PUSH
26734: LD_VAR 0 5
26738: PUSH
26739: LD_VAR 0 7
26743: ARRAY
26744: PUSH
26745: LD_INT 2
26747: ARRAY
26748: LESS
26749: IFFALSE 26787
// begin result := Insert ( result , j , [ i , tmp ] ) ;
26751: LD_ADDR_VAR 0 5
26755: PUSH
26756: LD_VAR 0 5
26760: PPUSH
26761: LD_VAR 0 7
26765: PPUSH
26766: LD_VAR 0 6
26770: PUSH
26771: LD_VAR 0 8
26775: PUSH
26776: EMPTY
26777: LIST
26778: LIST
26779: PPUSH
26780: CALL_OW 2
26784: ST_TO_ADDR
// break ;
26785: GO 26789
// end ; end ;
26787: GO 26726
26789: POP
26790: POP
// end ; end ;
26791: GO 26574
26793: POP
26794: POP
// if result and not asc then
26795: LD_VAR 0 5
26799: PUSH
26800: LD_VAR 0 3
26804: NOT
26805: AND
26806: IFFALSE 26823
// result := ReverseArray ( result ) ;
26808: LD_ADDR_VAR 0 5
26812: PUSH
26813: LD_VAR 0 5
26817: PPUSH
26818: CALL 54063 0 1
26822: ST_TO_ADDR
// tmp := [ ] ;
26823: LD_ADDR_VAR 0 8
26827: PUSH
26828: EMPTY
26829: ST_TO_ADDR
// if mode then
26830: LD_VAR 0 4
26834: IFFALSE 26898
// begin for i := 1 to result do
26836: LD_ADDR_VAR 0 6
26840: PUSH
26841: DOUBLE
26842: LD_INT 1
26844: DEC
26845: ST_TO_ADDR
26846: LD_VAR 0 5
26850: PUSH
26851: FOR_TO
26852: IFFALSE 26886
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
26854: LD_ADDR_VAR 0 8
26858: PUSH
26859: LD_VAR 0 8
26863: PPUSH
26864: LD_VAR 0 5
26868: PUSH
26869: LD_VAR 0 6
26873: ARRAY
26874: PUSH
26875: LD_INT 1
26877: ARRAY
26878: PPUSH
26879: CALL 58796 0 2
26883: ST_TO_ADDR
26884: GO 26851
26886: POP
26887: POP
// result := tmp ;
26888: LD_ADDR_VAR 0 5
26892: PUSH
26893: LD_VAR 0 8
26897: ST_TO_ADDR
// end ; end ;
26898: LD_VAR 0 5
26902: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
26903: LD_INT 0
26905: PPUSH
26906: PPUSH
26907: PPUSH
26908: PPUSH
// if not list then
26909: LD_VAR 0 3
26913: NOT
26914: IFFALSE 26918
// exit ;
26916: GO 27306
// result := [ ] ;
26918: LD_ADDR_VAR 0 6
26922: PUSH
26923: EMPTY
26924: ST_TO_ADDR
// for i in list do
26925: LD_ADDR_VAR 0 7
26929: PUSH
26930: LD_VAR 0 3
26934: PUSH
26935: FOR_IN
26936: IFFALSE 27138
// begin tmp := GetDistUnitXY ( i , x , y ) ;
26938: LD_ADDR_VAR 0 9
26942: PUSH
26943: LD_VAR 0 7
26947: PPUSH
26948: LD_VAR 0 1
26952: PPUSH
26953: LD_VAR 0 2
26957: PPUSH
26958: CALL_OW 297
26962: ST_TO_ADDR
// if not result then
26963: LD_VAR 0 6
26967: NOT
26968: IFFALSE 26994
// result := [ [ i , tmp ] ] else
26970: LD_ADDR_VAR 0 6
26974: PUSH
26975: LD_VAR 0 7
26979: PUSH
26980: LD_VAR 0 9
26984: PUSH
26985: EMPTY
26986: LIST
26987: LIST
26988: PUSH
26989: EMPTY
26990: LIST
26991: ST_TO_ADDR
26992: GO 27136
// begin if result [ result ] [ 2 ] <= tmp then
26994: LD_VAR 0 6
26998: PUSH
26999: LD_VAR 0 6
27003: ARRAY
27004: PUSH
27005: LD_INT 2
27007: ARRAY
27008: PUSH
27009: LD_VAR 0 9
27013: LESSEQUAL
27014: IFFALSE 27056
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
27016: LD_ADDR_VAR 0 6
27020: PUSH
27021: LD_VAR 0 6
27025: PPUSH
27026: LD_VAR 0 6
27030: PUSH
27031: LD_INT 1
27033: PLUS
27034: PPUSH
27035: LD_VAR 0 7
27039: PUSH
27040: LD_VAR 0 9
27044: PUSH
27045: EMPTY
27046: LIST
27047: LIST
27048: PPUSH
27049: CALL_OW 2
27053: ST_TO_ADDR
27054: GO 27136
// for j := 1 to result do
27056: LD_ADDR_VAR 0 8
27060: PUSH
27061: DOUBLE
27062: LD_INT 1
27064: DEC
27065: ST_TO_ADDR
27066: LD_VAR 0 6
27070: PUSH
27071: FOR_TO
27072: IFFALSE 27134
// begin if tmp < result [ j ] [ 2 ] then
27074: LD_VAR 0 9
27078: PUSH
27079: LD_VAR 0 6
27083: PUSH
27084: LD_VAR 0 8
27088: ARRAY
27089: PUSH
27090: LD_INT 2
27092: ARRAY
27093: LESS
27094: IFFALSE 27132
// begin result := Insert ( result , j , [ i , tmp ] ) ;
27096: LD_ADDR_VAR 0 6
27100: PUSH
27101: LD_VAR 0 6
27105: PPUSH
27106: LD_VAR 0 8
27110: PPUSH
27111: LD_VAR 0 7
27115: PUSH
27116: LD_VAR 0 9
27120: PUSH
27121: EMPTY
27122: LIST
27123: LIST
27124: PPUSH
27125: CALL_OW 2
27129: ST_TO_ADDR
// break ;
27130: GO 27134
// end ; end ;
27132: GO 27071
27134: POP
27135: POP
// end ; end ;
27136: GO 26935
27138: POP
27139: POP
// if result and not asc then
27140: LD_VAR 0 6
27144: PUSH
27145: LD_VAR 0 4
27149: NOT
27150: AND
27151: IFFALSE 27226
// begin tmp := result ;
27153: LD_ADDR_VAR 0 9
27157: PUSH
27158: LD_VAR 0 6
27162: ST_TO_ADDR
// for i = tmp downto 1 do
27163: LD_ADDR_VAR 0 7
27167: PUSH
27168: DOUBLE
27169: LD_VAR 0 9
27173: INC
27174: ST_TO_ADDR
27175: LD_INT 1
27177: PUSH
27178: FOR_DOWNTO
27179: IFFALSE 27224
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
27181: LD_ADDR_VAR 0 6
27185: PUSH
27186: LD_VAR 0 6
27190: PPUSH
27191: LD_VAR 0 9
27195: PUSH
27196: LD_VAR 0 7
27200: MINUS
27201: PUSH
27202: LD_INT 1
27204: PLUS
27205: PPUSH
27206: LD_VAR 0 9
27210: PUSH
27211: LD_VAR 0 7
27215: ARRAY
27216: PPUSH
27217: CALL_OW 1
27221: ST_TO_ADDR
27222: GO 27178
27224: POP
27225: POP
// end ; tmp := [ ] ;
27226: LD_ADDR_VAR 0 9
27230: PUSH
27231: EMPTY
27232: ST_TO_ADDR
// if mode then
27233: LD_VAR 0 5
27237: IFFALSE 27306
// begin for i = 1 to result do
27239: LD_ADDR_VAR 0 7
27243: PUSH
27244: DOUBLE
27245: LD_INT 1
27247: DEC
27248: ST_TO_ADDR
27249: LD_VAR 0 6
27253: PUSH
27254: FOR_TO
27255: IFFALSE 27294
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
27257: LD_ADDR_VAR 0 9
27261: PUSH
27262: LD_VAR 0 9
27266: PPUSH
27267: LD_VAR 0 7
27271: PPUSH
27272: LD_VAR 0 6
27276: PUSH
27277: LD_VAR 0 7
27281: ARRAY
27282: PUSH
27283: LD_INT 1
27285: ARRAY
27286: PPUSH
27287: CALL_OW 1
27291: ST_TO_ADDR
27292: GO 27254
27294: POP
27295: POP
// result := tmp ;
27296: LD_ADDR_VAR 0 6
27300: PUSH
27301: LD_VAR 0 9
27305: ST_TO_ADDR
// end ; end ;
27306: LD_VAR 0 6
27310: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
27311: LD_INT 0
27313: PPUSH
27314: PPUSH
27315: PPUSH
27316: PPUSH
27317: PPUSH
27318: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
27319: LD_ADDR_VAR 0 5
27323: PUSH
27324: LD_INT 0
27326: PUSH
27327: LD_INT 0
27329: PUSH
27330: LD_INT 0
27332: PUSH
27333: EMPTY
27334: PUSH
27335: EMPTY
27336: LIST
27337: LIST
27338: LIST
27339: LIST
27340: ST_TO_ADDR
// if not x or not y then
27341: LD_VAR 0 2
27345: NOT
27346: PUSH
27347: LD_VAR 0 3
27351: NOT
27352: OR
27353: IFFALSE 27357
// exit ;
27355: GO 29007
// if not range then
27357: LD_VAR 0 4
27361: NOT
27362: IFFALSE 27372
// range := 10 ;
27364: LD_ADDR_VAR 0 4
27368: PUSH
27369: LD_INT 10
27371: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
27372: LD_ADDR_VAR 0 8
27376: PUSH
27377: LD_INT 81
27379: PUSH
27380: LD_VAR 0 1
27384: PUSH
27385: EMPTY
27386: LIST
27387: LIST
27388: PUSH
27389: LD_INT 92
27391: PUSH
27392: LD_VAR 0 2
27396: PUSH
27397: LD_VAR 0 3
27401: PUSH
27402: LD_VAR 0 4
27406: PUSH
27407: EMPTY
27408: LIST
27409: LIST
27410: LIST
27411: LIST
27412: PUSH
27413: LD_INT 3
27415: PUSH
27416: LD_INT 21
27418: PUSH
27419: LD_INT 3
27421: PUSH
27422: EMPTY
27423: LIST
27424: LIST
27425: PUSH
27426: EMPTY
27427: LIST
27428: LIST
27429: PUSH
27430: EMPTY
27431: LIST
27432: LIST
27433: LIST
27434: PPUSH
27435: CALL_OW 69
27439: ST_TO_ADDR
// if not tmp then
27440: LD_VAR 0 8
27444: NOT
27445: IFFALSE 27449
// exit ;
27447: GO 29007
// for i in tmp do
27449: LD_ADDR_VAR 0 6
27453: PUSH
27454: LD_VAR 0 8
27458: PUSH
27459: FOR_IN
27460: IFFALSE 28982
// begin points := [ 0 , 0 , 0 ] ;
27462: LD_ADDR_VAR 0 9
27466: PUSH
27467: LD_INT 0
27469: PUSH
27470: LD_INT 0
27472: PUSH
27473: LD_INT 0
27475: PUSH
27476: EMPTY
27477: LIST
27478: LIST
27479: LIST
27480: ST_TO_ADDR
// bpoints := 1 ;
27481: LD_ADDR_VAR 0 10
27485: PUSH
27486: LD_INT 1
27488: ST_TO_ADDR
// case GetType ( i ) of unit_human :
27489: LD_VAR 0 6
27493: PPUSH
27494: CALL_OW 247
27498: PUSH
27499: LD_INT 1
27501: DOUBLE
27502: EQUAL
27503: IFTRUE 27507
27505: GO 28085
27507: POP
// begin if GetClass ( i ) = 1 then
27508: LD_VAR 0 6
27512: PPUSH
27513: CALL_OW 257
27517: PUSH
27518: LD_INT 1
27520: EQUAL
27521: IFFALSE 27542
// points := [ 10 , 5 , 3 ] ;
27523: LD_ADDR_VAR 0 9
27527: PUSH
27528: LD_INT 10
27530: PUSH
27531: LD_INT 5
27533: PUSH
27534: LD_INT 3
27536: PUSH
27537: EMPTY
27538: LIST
27539: LIST
27540: LIST
27541: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
27542: LD_VAR 0 6
27546: PPUSH
27547: CALL_OW 257
27551: PUSH
27552: LD_INT 2
27554: PUSH
27555: LD_INT 3
27557: PUSH
27558: LD_INT 4
27560: PUSH
27561: EMPTY
27562: LIST
27563: LIST
27564: LIST
27565: IN
27566: IFFALSE 27587
// points := [ 3 , 2 , 1 ] ;
27568: LD_ADDR_VAR 0 9
27572: PUSH
27573: LD_INT 3
27575: PUSH
27576: LD_INT 2
27578: PUSH
27579: LD_INT 1
27581: PUSH
27582: EMPTY
27583: LIST
27584: LIST
27585: LIST
27586: ST_TO_ADDR
// if GetClass ( i ) = 5 then
27587: LD_VAR 0 6
27591: PPUSH
27592: CALL_OW 257
27596: PUSH
27597: LD_INT 5
27599: EQUAL
27600: IFFALSE 27621
// points := [ 130 , 5 , 2 ] ;
27602: LD_ADDR_VAR 0 9
27606: PUSH
27607: LD_INT 130
27609: PUSH
27610: LD_INT 5
27612: PUSH
27613: LD_INT 2
27615: PUSH
27616: EMPTY
27617: LIST
27618: LIST
27619: LIST
27620: ST_TO_ADDR
// if GetClass ( i ) = 8 then
27621: LD_VAR 0 6
27625: PPUSH
27626: CALL_OW 257
27630: PUSH
27631: LD_INT 8
27633: EQUAL
27634: IFFALSE 27655
// points := [ 35 , 35 , 30 ] ;
27636: LD_ADDR_VAR 0 9
27640: PUSH
27641: LD_INT 35
27643: PUSH
27644: LD_INT 35
27646: PUSH
27647: LD_INT 30
27649: PUSH
27650: EMPTY
27651: LIST
27652: LIST
27653: LIST
27654: ST_TO_ADDR
// if GetClass ( i ) = 9 then
27655: LD_VAR 0 6
27659: PPUSH
27660: CALL_OW 257
27664: PUSH
27665: LD_INT 9
27667: EQUAL
27668: IFFALSE 27689
// points := [ 20 , 55 , 40 ] ;
27670: LD_ADDR_VAR 0 9
27674: PUSH
27675: LD_INT 20
27677: PUSH
27678: LD_INT 55
27680: PUSH
27681: LD_INT 40
27683: PUSH
27684: EMPTY
27685: LIST
27686: LIST
27687: LIST
27688: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
27689: LD_VAR 0 6
27693: PPUSH
27694: CALL_OW 257
27698: PUSH
27699: LD_INT 12
27701: PUSH
27702: LD_INT 16
27704: PUSH
27705: EMPTY
27706: LIST
27707: LIST
27708: IN
27709: IFFALSE 27730
// points := [ 5 , 3 , 2 ] ;
27711: LD_ADDR_VAR 0 9
27715: PUSH
27716: LD_INT 5
27718: PUSH
27719: LD_INT 3
27721: PUSH
27722: LD_INT 2
27724: PUSH
27725: EMPTY
27726: LIST
27727: LIST
27728: LIST
27729: ST_TO_ADDR
// if GetClass ( i ) = 17 then
27730: LD_VAR 0 6
27734: PPUSH
27735: CALL_OW 257
27739: PUSH
27740: LD_INT 17
27742: EQUAL
27743: IFFALSE 27764
// points := [ 100 , 50 , 75 ] ;
27745: LD_ADDR_VAR 0 9
27749: PUSH
27750: LD_INT 100
27752: PUSH
27753: LD_INT 50
27755: PUSH
27756: LD_INT 75
27758: PUSH
27759: EMPTY
27760: LIST
27761: LIST
27762: LIST
27763: ST_TO_ADDR
// if GetClass ( i ) = 15 then
27764: LD_VAR 0 6
27768: PPUSH
27769: CALL_OW 257
27773: PUSH
27774: LD_INT 15
27776: EQUAL
27777: IFFALSE 27798
// points := [ 10 , 5 , 3 ] ;
27779: LD_ADDR_VAR 0 9
27783: PUSH
27784: LD_INT 10
27786: PUSH
27787: LD_INT 5
27789: PUSH
27790: LD_INT 3
27792: PUSH
27793: EMPTY
27794: LIST
27795: LIST
27796: LIST
27797: ST_TO_ADDR
// if GetClass ( i ) = 14 then
27798: LD_VAR 0 6
27802: PPUSH
27803: CALL_OW 257
27807: PUSH
27808: LD_INT 14
27810: EQUAL
27811: IFFALSE 27832
// points := [ 10 , 0 , 0 ] ;
27813: LD_ADDR_VAR 0 9
27817: PUSH
27818: LD_INT 10
27820: PUSH
27821: LD_INT 0
27823: PUSH
27824: LD_INT 0
27826: PUSH
27827: EMPTY
27828: LIST
27829: LIST
27830: LIST
27831: ST_TO_ADDR
// if GetClass ( i ) = 11 then
27832: LD_VAR 0 6
27836: PPUSH
27837: CALL_OW 257
27841: PUSH
27842: LD_INT 11
27844: EQUAL
27845: IFFALSE 27866
// points := [ 30 , 10 , 5 ] ;
27847: LD_ADDR_VAR 0 9
27851: PUSH
27852: LD_INT 30
27854: PUSH
27855: LD_INT 10
27857: PUSH
27858: LD_INT 5
27860: PUSH
27861: EMPTY
27862: LIST
27863: LIST
27864: LIST
27865: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
27866: LD_VAR 0 1
27870: PPUSH
27871: LD_INT 5
27873: PPUSH
27874: CALL_OW 321
27878: PUSH
27879: LD_INT 2
27881: EQUAL
27882: IFFALSE 27899
// bpoints := bpoints * 1.8 ;
27884: LD_ADDR_VAR 0 10
27888: PUSH
27889: LD_VAR 0 10
27893: PUSH
27894: LD_REAL  1.80000000000000E+0000
27897: MUL
27898: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
27899: LD_VAR 0 6
27903: PPUSH
27904: CALL_OW 257
27908: PUSH
27909: LD_INT 1
27911: PUSH
27912: LD_INT 2
27914: PUSH
27915: LD_INT 3
27917: PUSH
27918: LD_INT 4
27920: PUSH
27921: EMPTY
27922: LIST
27923: LIST
27924: LIST
27925: LIST
27926: IN
27927: PUSH
27928: LD_VAR 0 1
27932: PPUSH
27933: LD_INT 51
27935: PPUSH
27936: CALL_OW 321
27940: PUSH
27941: LD_INT 2
27943: EQUAL
27944: AND
27945: IFFALSE 27962
// bpoints := bpoints * 1.2 ;
27947: LD_ADDR_VAR 0 10
27951: PUSH
27952: LD_VAR 0 10
27956: PUSH
27957: LD_REAL  1.20000000000000E+0000
27960: MUL
27961: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
27962: LD_VAR 0 6
27966: PPUSH
27967: CALL_OW 257
27971: PUSH
27972: LD_INT 5
27974: PUSH
27975: LD_INT 7
27977: PUSH
27978: LD_INT 9
27980: PUSH
27981: EMPTY
27982: LIST
27983: LIST
27984: LIST
27985: IN
27986: PUSH
27987: LD_VAR 0 1
27991: PPUSH
27992: LD_INT 52
27994: PPUSH
27995: CALL_OW 321
27999: PUSH
28000: LD_INT 2
28002: EQUAL
28003: AND
28004: IFFALSE 28021
// bpoints := bpoints * 1.5 ;
28006: LD_ADDR_VAR 0 10
28010: PUSH
28011: LD_VAR 0 10
28015: PUSH
28016: LD_REAL  1.50000000000000E+0000
28019: MUL
28020: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
28021: LD_VAR 0 1
28025: PPUSH
28026: LD_INT 66
28028: PPUSH
28029: CALL_OW 321
28033: PUSH
28034: LD_INT 2
28036: EQUAL
28037: IFFALSE 28054
// bpoints := bpoints * 1.1 ;
28039: LD_ADDR_VAR 0 10
28043: PUSH
28044: LD_VAR 0 10
28048: PUSH
28049: LD_REAL  1.10000000000000E+0000
28052: MUL
28053: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
28054: LD_ADDR_VAR 0 10
28058: PUSH
28059: LD_VAR 0 10
28063: PUSH
28064: LD_VAR 0 6
28068: PPUSH
28069: LD_INT 1
28071: PPUSH
28072: CALL_OW 259
28076: PUSH
28077: LD_REAL  1.15000000000000E+0000
28080: MUL
28081: MUL
28082: ST_TO_ADDR
// end ; unit_vehicle :
28083: GO 28911
28085: LD_INT 2
28087: DOUBLE
28088: EQUAL
28089: IFTRUE 28093
28091: GO 28899
28093: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
28094: LD_VAR 0 6
28098: PPUSH
28099: CALL_OW 264
28103: PUSH
28104: LD_INT 2
28106: PUSH
28107: LD_INT 42
28109: PUSH
28110: LD_INT 24
28112: PUSH
28113: EMPTY
28114: LIST
28115: LIST
28116: LIST
28117: IN
28118: IFFALSE 28139
// points := [ 25 , 5 , 3 ] ;
28120: LD_ADDR_VAR 0 9
28124: PUSH
28125: LD_INT 25
28127: PUSH
28128: LD_INT 5
28130: PUSH
28131: LD_INT 3
28133: PUSH
28134: EMPTY
28135: LIST
28136: LIST
28137: LIST
28138: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
28139: LD_VAR 0 6
28143: PPUSH
28144: CALL_OW 264
28148: PUSH
28149: LD_INT 4
28151: PUSH
28152: LD_INT 43
28154: PUSH
28155: LD_INT 25
28157: PUSH
28158: EMPTY
28159: LIST
28160: LIST
28161: LIST
28162: IN
28163: IFFALSE 28184
// points := [ 40 , 15 , 5 ] ;
28165: LD_ADDR_VAR 0 9
28169: PUSH
28170: LD_INT 40
28172: PUSH
28173: LD_INT 15
28175: PUSH
28176: LD_INT 5
28178: PUSH
28179: EMPTY
28180: LIST
28181: LIST
28182: LIST
28183: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
28184: LD_VAR 0 6
28188: PPUSH
28189: CALL_OW 264
28193: PUSH
28194: LD_INT 3
28196: PUSH
28197: LD_INT 23
28199: PUSH
28200: EMPTY
28201: LIST
28202: LIST
28203: IN
28204: IFFALSE 28225
// points := [ 7 , 25 , 8 ] ;
28206: LD_ADDR_VAR 0 9
28210: PUSH
28211: LD_INT 7
28213: PUSH
28214: LD_INT 25
28216: PUSH
28217: LD_INT 8
28219: PUSH
28220: EMPTY
28221: LIST
28222: LIST
28223: LIST
28224: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
28225: LD_VAR 0 6
28229: PPUSH
28230: CALL_OW 264
28234: PUSH
28235: LD_INT 5
28237: PUSH
28238: LD_INT 27
28240: PUSH
28241: LD_INT 44
28243: PUSH
28244: EMPTY
28245: LIST
28246: LIST
28247: LIST
28248: IN
28249: IFFALSE 28270
// points := [ 14 , 50 , 16 ] ;
28251: LD_ADDR_VAR 0 9
28255: PUSH
28256: LD_INT 14
28258: PUSH
28259: LD_INT 50
28261: PUSH
28262: LD_INT 16
28264: PUSH
28265: EMPTY
28266: LIST
28267: LIST
28268: LIST
28269: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
28270: LD_VAR 0 6
28274: PPUSH
28275: CALL_OW 264
28279: PUSH
28280: LD_INT 6
28282: PUSH
28283: LD_INT 46
28285: PUSH
28286: EMPTY
28287: LIST
28288: LIST
28289: IN
28290: IFFALSE 28311
// points := [ 32 , 120 , 70 ] ;
28292: LD_ADDR_VAR 0 9
28296: PUSH
28297: LD_INT 32
28299: PUSH
28300: LD_INT 120
28302: PUSH
28303: LD_INT 70
28305: PUSH
28306: EMPTY
28307: LIST
28308: LIST
28309: LIST
28310: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
28311: LD_VAR 0 6
28315: PPUSH
28316: CALL_OW 264
28320: PUSH
28321: LD_INT 7
28323: PUSH
28324: LD_INT 28
28326: PUSH
28327: LD_INT 45
28329: PUSH
28330: LD_INT 92
28332: PUSH
28333: EMPTY
28334: LIST
28335: LIST
28336: LIST
28337: LIST
28338: IN
28339: IFFALSE 28360
// points := [ 35 , 20 , 45 ] ;
28341: LD_ADDR_VAR 0 9
28345: PUSH
28346: LD_INT 35
28348: PUSH
28349: LD_INT 20
28351: PUSH
28352: LD_INT 45
28354: PUSH
28355: EMPTY
28356: LIST
28357: LIST
28358: LIST
28359: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
28360: LD_VAR 0 6
28364: PPUSH
28365: CALL_OW 264
28369: PUSH
28370: LD_INT 47
28372: PUSH
28373: EMPTY
28374: LIST
28375: IN
28376: IFFALSE 28397
// points := [ 67 , 45 , 75 ] ;
28378: LD_ADDR_VAR 0 9
28382: PUSH
28383: LD_INT 67
28385: PUSH
28386: LD_INT 45
28388: PUSH
28389: LD_INT 75
28391: PUSH
28392: EMPTY
28393: LIST
28394: LIST
28395: LIST
28396: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
28397: LD_VAR 0 6
28401: PPUSH
28402: CALL_OW 264
28406: PUSH
28407: LD_INT 26
28409: PUSH
28410: EMPTY
28411: LIST
28412: IN
28413: IFFALSE 28434
// points := [ 120 , 30 , 80 ] ;
28415: LD_ADDR_VAR 0 9
28419: PUSH
28420: LD_INT 120
28422: PUSH
28423: LD_INT 30
28425: PUSH
28426: LD_INT 80
28428: PUSH
28429: EMPTY
28430: LIST
28431: LIST
28432: LIST
28433: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
28434: LD_VAR 0 6
28438: PPUSH
28439: CALL_OW 264
28443: PUSH
28444: LD_INT 22
28446: PUSH
28447: EMPTY
28448: LIST
28449: IN
28450: IFFALSE 28471
// points := [ 40 , 1 , 1 ] ;
28452: LD_ADDR_VAR 0 9
28456: PUSH
28457: LD_INT 40
28459: PUSH
28460: LD_INT 1
28462: PUSH
28463: LD_INT 1
28465: PUSH
28466: EMPTY
28467: LIST
28468: LIST
28469: LIST
28470: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
28471: LD_VAR 0 6
28475: PPUSH
28476: CALL_OW 264
28480: PUSH
28481: LD_INT 29
28483: PUSH
28484: EMPTY
28485: LIST
28486: IN
28487: IFFALSE 28508
// points := [ 70 , 200 , 400 ] ;
28489: LD_ADDR_VAR 0 9
28493: PUSH
28494: LD_INT 70
28496: PUSH
28497: LD_INT 200
28499: PUSH
28500: LD_INT 400
28502: PUSH
28503: EMPTY
28504: LIST
28505: LIST
28506: LIST
28507: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
28508: LD_VAR 0 6
28512: PPUSH
28513: CALL_OW 264
28517: PUSH
28518: LD_INT 14
28520: PUSH
28521: LD_INT 53
28523: PUSH
28524: EMPTY
28525: LIST
28526: LIST
28527: IN
28528: IFFALSE 28549
// points := [ 40 , 10 , 20 ] ;
28530: LD_ADDR_VAR 0 9
28534: PUSH
28535: LD_INT 40
28537: PUSH
28538: LD_INT 10
28540: PUSH
28541: LD_INT 20
28543: PUSH
28544: EMPTY
28545: LIST
28546: LIST
28547: LIST
28548: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
28549: LD_VAR 0 6
28553: PPUSH
28554: CALL_OW 264
28558: PUSH
28559: LD_INT 9
28561: PUSH
28562: EMPTY
28563: LIST
28564: IN
28565: IFFALSE 28586
// points := [ 5 , 70 , 20 ] ;
28567: LD_ADDR_VAR 0 9
28571: PUSH
28572: LD_INT 5
28574: PUSH
28575: LD_INT 70
28577: PUSH
28578: LD_INT 20
28580: PUSH
28581: EMPTY
28582: LIST
28583: LIST
28584: LIST
28585: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
28586: LD_VAR 0 6
28590: PPUSH
28591: CALL_OW 264
28595: PUSH
28596: LD_INT 10
28598: PUSH
28599: EMPTY
28600: LIST
28601: IN
28602: IFFALSE 28623
// points := [ 35 , 110 , 70 ] ;
28604: LD_ADDR_VAR 0 9
28608: PUSH
28609: LD_INT 35
28611: PUSH
28612: LD_INT 110
28614: PUSH
28615: LD_INT 70
28617: PUSH
28618: EMPTY
28619: LIST
28620: LIST
28621: LIST
28622: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
28623: LD_VAR 0 6
28627: PPUSH
28628: CALL_OW 265
28632: PUSH
28633: LD_INT 25
28635: EQUAL
28636: IFFALSE 28657
// points := [ 80 , 65 , 100 ] ;
28638: LD_ADDR_VAR 0 9
28642: PUSH
28643: LD_INT 80
28645: PUSH
28646: LD_INT 65
28648: PUSH
28649: LD_INT 100
28651: PUSH
28652: EMPTY
28653: LIST
28654: LIST
28655: LIST
28656: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
28657: LD_VAR 0 6
28661: PPUSH
28662: CALL_OW 263
28666: PUSH
28667: LD_INT 1
28669: EQUAL
28670: IFFALSE 28705
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
28672: LD_ADDR_VAR 0 10
28676: PUSH
28677: LD_VAR 0 10
28681: PUSH
28682: LD_VAR 0 6
28686: PPUSH
28687: CALL_OW 311
28691: PPUSH
28692: LD_INT 3
28694: PPUSH
28695: CALL_OW 259
28699: PUSH
28700: LD_INT 4
28702: MUL
28703: MUL
28704: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
28705: LD_VAR 0 6
28709: PPUSH
28710: CALL_OW 263
28714: PUSH
28715: LD_INT 2
28717: EQUAL
28718: IFFALSE 28769
// begin j := IsControledBy ( i ) ;
28720: LD_ADDR_VAR 0 7
28724: PUSH
28725: LD_VAR 0 6
28729: PPUSH
28730: CALL_OW 312
28734: ST_TO_ADDR
// if j then
28735: LD_VAR 0 7
28739: IFFALSE 28769
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
28741: LD_ADDR_VAR 0 10
28745: PUSH
28746: LD_VAR 0 10
28750: PUSH
28751: LD_VAR 0 7
28755: PPUSH
28756: LD_INT 3
28758: PPUSH
28759: CALL_OW 259
28763: PUSH
28764: LD_INT 3
28766: MUL
28767: MUL
28768: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
28769: LD_VAR 0 6
28773: PPUSH
28774: CALL_OW 264
28778: PUSH
28779: LD_INT 5
28781: PUSH
28782: LD_INT 6
28784: PUSH
28785: LD_INT 46
28787: PUSH
28788: LD_INT 44
28790: PUSH
28791: LD_INT 47
28793: PUSH
28794: LD_INT 45
28796: PUSH
28797: LD_INT 28
28799: PUSH
28800: LD_INT 7
28802: PUSH
28803: LD_INT 27
28805: PUSH
28806: LD_INT 29
28808: PUSH
28809: EMPTY
28810: LIST
28811: LIST
28812: LIST
28813: LIST
28814: LIST
28815: LIST
28816: LIST
28817: LIST
28818: LIST
28819: LIST
28820: IN
28821: PUSH
28822: LD_VAR 0 1
28826: PPUSH
28827: LD_INT 52
28829: PPUSH
28830: CALL_OW 321
28834: PUSH
28835: LD_INT 2
28837: EQUAL
28838: AND
28839: IFFALSE 28856
// bpoints := bpoints * 1.2 ;
28841: LD_ADDR_VAR 0 10
28845: PUSH
28846: LD_VAR 0 10
28850: PUSH
28851: LD_REAL  1.20000000000000E+0000
28854: MUL
28855: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
28856: LD_VAR 0 6
28860: PPUSH
28861: CALL_OW 264
28865: PUSH
28866: LD_INT 6
28868: PUSH
28869: LD_INT 46
28871: PUSH
28872: LD_INT 47
28874: PUSH
28875: EMPTY
28876: LIST
28877: LIST
28878: LIST
28879: IN
28880: IFFALSE 28897
// bpoints := bpoints * 1.2 ;
28882: LD_ADDR_VAR 0 10
28886: PUSH
28887: LD_VAR 0 10
28891: PUSH
28892: LD_REAL  1.20000000000000E+0000
28895: MUL
28896: ST_TO_ADDR
// end ; unit_building :
28897: GO 28911
28899: LD_INT 3
28901: DOUBLE
28902: EQUAL
28903: IFTRUE 28907
28905: GO 28910
28907: POP
// ; end ;
28908: GO 28911
28910: POP
// for j = 1 to 3 do
28911: LD_ADDR_VAR 0 7
28915: PUSH
28916: DOUBLE
28917: LD_INT 1
28919: DEC
28920: ST_TO_ADDR
28921: LD_INT 3
28923: PUSH
28924: FOR_TO
28925: IFFALSE 28978
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
28927: LD_ADDR_VAR 0 5
28931: PUSH
28932: LD_VAR 0 5
28936: PPUSH
28937: LD_VAR 0 7
28941: PPUSH
28942: LD_VAR 0 5
28946: PUSH
28947: LD_VAR 0 7
28951: ARRAY
28952: PUSH
28953: LD_VAR 0 9
28957: PUSH
28958: LD_VAR 0 7
28962: ARRAY
28963: PUSH
28964: LD_VAR 0 10
28968: MUL
28969: PLUS
28970: PPUSH
28971: CALL_OW 1
28975: ST_TO_ADDR
28976: GO 28924
28978: POP
28979: POP
// end ;
28980: GO 27459
28982: POP
28983: POP
// result := Replace ( result , 4 , tmp ) ;
28984: LD_ADDR_VAR 0 5
28988: PUSH
28989: LD_VAR 0 5
28993: PPUSH
28994: LD_INT 4
28996: PPUSH
28997: LD_VAR 0 8
29001: PPUSH
29002: CALL_OW 1
29006: ST_TO_ADDR
// end ;
29007: LD_VAR 0 5
29011: RET
// export function DangerAtRange ( unit , range ) ; begin
29012: LD_INT 0
29014: PPUSH
// if not unit then
29015: LD_VAR 0 1
29019: NOT
29020: IFFALSE 29024
// exit ;
29022: GO 29069
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
29024: LD_ADDR_VAR 0 3
29028: PUSH
29029: LD_VAR 0 1
29033: PPUSH
29034: CALL_OW 255
29038: PPUSH
29039: LD_VAR 0 1
29043: PPUSH
29044: CALL_OW 250
29048: PPUSH
29049: LD_VAR 0 1
29053: PPUSH
29054: CALL_OW 251
29058: PPUSH
29059: LD_VAR 0 2
29063: PPUSH
29064: CALL 27311 0 4
29068: ST_TO_ADDR
// end ;
29069: LD_VAR 0 3
29073: RET
// export function DangerInArea ( side , area ) ; begin
29074: LD_INT 0
29076: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
29077: LD_ADDR_VAR 0 3
29081: PUSH
29082: LD_VAR 0 2
29086: PPUSH
29087: LD_INT 81
29089: PUSH
29090: LD_VAR 0 1
29094: PUSH
29095: EMPTY
29096: LIST
29097: LIST
29098: PPUSH
29099: CALL_OW 70
29103: ST_TO_ADDR
// end ;
29104: LD_VAR 0 3
29108: RET
// export function IsExtension ( b ) ; begin
29109: LD_INT 0
29111: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
29112: LD_ADDR_VAR 0 2
29116: PUSH
29117: LD_VAR 0 1
29121: PUSH
29122: LD_INT 23
29124: PUSH
29125: LD_INT 20
29127: PUSH
29128: LD_INT 22
29130: PUSH
29131: LD_INT 17
29133: PUSH
29134: LD_INT 24
29136: PUSH
29137: LD_INT 21
29139: PUSH
29140: LD_INT 19
29142: PUSH
29143: LD_INT 16
29145: PUSH
29146: LD_INT 25
29148: PUSH
29149: LD_INT 18
29151: PUSH
29152: EMPTY
29153: LIST
29154: LIST
29155: LIST
29156: LIST
29157: LIST
29158: LIST
29159: LIST
29160: LIST
29161: LIST
29162: LIST
29163: IN
29164: ST_TO_ADDR
// end ;
29165: LD_VAR 0 2
29169: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
29170: LD_INT 0
29172: PPUSH
29173: PPUSH
29174: PPUSH
// result := [ ] ;
29175: LD_ADDR_VAR 0 4
29179: PUSH
29180: EMPTY
29181: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
29182: LD_ADDR_VAR 0 5
29186: PUSH
29187: LD_VAR 0 2
29191: PPUSH
29192: LD_INT 21
29194: PUSH
29195: LD_INT 3
29197: PUSH
29198: EMPTY
29199: LIST
29200: LIST
29201: PPUSH
29202: CALL_OW 70
29206: ST_TO_ADDR
// if not tmp then
29207: LD_VAR 0 5
29211: NOT
29212: IFFALSE 29216
// exit ;
29214: GO 29280
// if checkLink then
29216: LD_VAR 0 3
29220: IFFALSE 29270
// begin for i in tmp do
29222: LD_ADDR_VAR 0 6
29226: PUSH
29227: LD_VAR 0 5
29231: PUSH
29232: FOR_IN
29233: IFFALSE 29268
// if GetBase ( i ) <> base then
29235: LD_VAR 0 6
29239: PPUSH
29240: CALL_OW 274
29244: PUSH
29245: LD_VAR 0 1
29249: NONEQUAL
29250: IFFALSE 29266
// ComLinkToBase ( base , i ) ;
29252: LD_VAR 0 1
29256: PPUSH
29257: LD_VAR 0 6
29261: PPUSH
29262: CALL_OW 169
29266: GO 29232
29268: POP
29269: POP
// end ; result := tmp ;
29270: LD_ADDR_VAR 0 4
29274: PUSH
29275: LD_VAR 0 5
29279: ST_TO_ADDR
// end ;
29280: LD_VAR 0 4
29284: RET
// export function ComComplete ( units , b ) ; var i ; begin
29285: LD_INT 0
29287: PPUSH
29288: PPUSH
// if not units then
29289: LD_VAR 0 1
29293: NOT
29294: IFFALSE 29298
// exit ;
29296: GO 29388
// for i in units do
29298: LD_ADDR_VAR 0 4
29302: PUSH
29303: LD_VAR 0 1
29307: PUSH
29308: FOR_IN
29309: IFFALSE 29386
// if BuildingStatus ( b ) = bs_build then
29311: LD_VAR 0 2
29315: PPUSH
29316: CALL_OW 461
29320: PUSH
29321: LD_INT 1
29323: EQUAL
29324: IFFALSE 29384
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
29326: LD_VAR 0 4
29330: PPUSH
29331: LD_STRING h
29333: PUSH
29334: LD_VAR 0 2
29338: PPUSH
29339: CALL_OW 250
29343: PUSH
29344: LD_VAR 0 2
29348: PPUSH
29349: CALL_OW 251
29353: PUSH
29354: LD_VAR 0 2
29358: PUSH
29359: LD_INT 0
29361: PUSH
29362: LD_INT 0
29364: PUSH
29365: LD_INT 0
29367: PUSH
29368: EMPTY
29369: LIST
29370: LIST
29371: LIST
29372: LIST
29373: LIST
29374: LIST
29375: LIST
29376: PUSH
29377: EMPTY
29378: LIST
29379: PPUSH
29380: CALL_OW 446
29384: GO 29308
29386: POP
29387: POP
// end ;
29388: LD_VAR 0 3
29392: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
29393: LD_INT 0
29395: PPUSH
29396: PPUSH
29397: PPUSH
29398: PPUSH
29399: PPUSH
29400: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
29401: LD_VAR 0 1
29405: NOT
29406: PUSH
29407: LD_VAR 0 1
29411: PPUSH
29412: CALL_OW 263
29416: PUSH
29417: LD_INT 2
29419: NONEQUAL
29420: OR
29421: IFFALSE 29425
// exit ;
29423: GO 29741
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
29425: LD_ADDR_VAR 0 6
29429: PUSH
29430: LD_INT 22
29432: PUSH
29433: LD_VAR 0 1
29437: PPUSH
29438: CALL_OW 255
29442: PUSH
29443: EMPTY
29444: LIST
29445: LIST
29446: PUSH
29447: LD_INT 2
29449: PUSH
29450: LD_INT 30
29452: PUSH
29453: LD_INT 36
29455: PUSH
29456: EMPTY
29457: LIST
29458: LIST
29459: PUSH
29460: LD_INT 34
29462: PUSH
29463: LD_INT 31
29465: PUSH
29466: EMPTY
29467: LIST
29468: LIST
29469: PUSH
29470: EMPTY
29471: LIST
29472: LIST
29473: LIST
29474: PUSH
29475: EMPTY
29476: LIST
29477: LIST
29478: PPUSH
29479: CALL_OW 69
29483: ST_TO_ADDR
// if not tmp then
29484: LD_VAR 0 6
29488: NOT
29489: IFFALSE 29493
// exit ;
29491: GO 29741
// result := [ ] ;
29493: LD_ADDR_VAR 0 2
29497: PUSH
29498: EMPTY
29499: ST_TO_ADDR
// for i in tmp do
29500: LD_ADDR_VAR 0 3
29504: PUSH
29505: LD_VAR 0 6
29509: PUSH
29510: FOR_IN
29511: IFFALSE 29582
// begin t := UnitsInside ( i ) ;
29513: LD_ADDR_VAR 0 4
29517: PUSH
29518: LD_VAR 0 3
29522: PPUSH
29523: CALL_OW 313
29527: ST_TO_ADDR
// if t then
29528: LD_VAR 0 4
29532: IFFALSE 29580
// for j in t do
29534: LD_ADDR_VAR 0 7
29538: PUSH
29539: LD_VAR 0 4
29543: PUSH
29544: FOR_IN
29545: IFFALSE 29578
// result := Replace ( result , result + 1 , j ) ;
29547: LD_ADDR_VAR 0 2
29551: PUSH
29552: LD_VAR 0 2
29556: PPUSH
29557: LD_VAR 0 2
29561: PUSH
29562: LD_INT 1
29564: PLUS
29565: PPUSH
29566: LD_VAR 0 7
29570: PPUSH
29571: CALL_OW 1
29575: ST_TO_ADDR
29576: GO 29544
29578: POP
29579: POP
// end ;
29580: GO 29510
29582: POP
29583: POP
// if not result then
29584: LD_VAR 0 2
29588: NOT
29589: IFFALSE 29593
// exit ;
29591: GO 29741
// mech := result [ 1 ] ;
29593: LD_ADDR_VAR 0 5
29597: PUSH
29598: LD_VAR 0 2
29602: PUSH
29603: LD_INT 1
29605: ARRAY
29606: ST_TO_ADDR
// if result > 1 then
29607: LD_VAR 0 2
29611: PUSH
29612: LD_INT 1
29614: GREATER
29615: IFFALSE 29727
// begin for i = 2 to result do
29617: LD_ADDR_VAR 0 3
29621: PUSH
29622: DOUBLE
29623: LD_INT 2
29625: DEC
29626: ST_TO_ADDR
29627: LD_VAR 0 2
29631: PUSH
29632: FOR_TO
29633: IFFALSE 29725
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
29635: LD_ADDR_VAR 0 4
29639: PUSH
29640: LD_VAR 0 2
29644: PUSH
29645: LD_VAR 0 3
29649: ARRAY
29650: PPUSH
29651: LD_INT 3
29653: PPUSH
29654: CALL_OW 259
29658: PUSH
29659: LD_VAR 0 2
29663: PUSH
29664: LD_VAR 0 3
29668: ARRAY
29669: PPUSH
29670: CALL_OW 432
29674: MINUS
29675: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
29676: LD_VAR 0 4
29680: PUSH
29681: LD_VAR 0 5
29685: PPUSH
29686: LD_INT 3
29688: PPUSH
29689: CALL_OW 259
29693: PUSH
29694: LD_VAR 0 5
29698: PPUSH
29699: CALL_OW 432
29703: MINUS
29704: GREATEREQUAL
29705: IFFALSE 29723
// mech := result [ i ] ;
29707: LD_ADDR_VAR 0 5
29711: PUSH
29712: LD_VAR 0 2
29716: PUSH
29717: LD_VAR 0 3
29721: ARRAY
29722: ST_TO_ADDR
// end ;
29723: GO 29632
29725: POP
29726: POP
// end ; ComLinkTo ( vehicle , mech ) ;
29727: LD_VAR 0 1
29731: PPUSH
29732: LD_VAR 0 5
29736: PPUSH
29737: CALL_OW 135
// end ;
29741: LD_VAR 0 2
29745: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
29746: LD_INT 0
29748: PPUSH
29749: PPUSH
29750: PPUSH
29751: PPUSH
29752: PPUSH
29753: PPUSH
29754: PPUSH
29755: PPUSH
29756: PPUSH
29757: PPUSH
29758: PPUSH
29759: PPUSH
29760: PPUSH
// result := [ ] ;
29761: LD_ADDR_VAR 0 7
29765: PUSH
29766: EMPTY
29767: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
29768: LD_VAR 0 1
29772: PPUSH
29773: CALL_OW 266
29777: PUSH
29778: LD_INT 0
29780: PUSH
29781: LD_INT 1
29783: PUSH
29784: EMPTY
29785: LIST
29786: LIST
29787: IN
29788: NOT
29789: IFFALSE 29793
// exit ;
29791: GO 31427
// if name then
29793: LD_VAR 0 3
29797: IFFALSE 29813
// SetBName ( base_dep , name ) ;
29799: LD_VAR 0 1
29803: PPUSH
29804: LD_VAR 0 3
29808: PPUSH
29809: CALL_OW 500
// base := GetBase ( base_dep ) ;
29813: LD_ADDR_VAR 0 15
29817: PUSH
29818: LD_VAR 0 1
29822: PPUSH
29823: CALL_OW 274
29827: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
29828: LD_ADDR_VAR 0 16
29832: PUSH
29833: LD_VAR 0 1
29837: PPUSH
29838: CALL_OW 255
29842: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
29843: LD_ADDR_VAR 0 17
29847: PUSH
29848: LD_VAR 0 1
29852: PPUSH
29853: CALL_OW 248
29857: ST_TO_ADDR
// if sources then
29858: LD_VAR 0 5
29862: IFFALSE 29909
// for i = 1 to 3 do
29864: LD_ADDR_VAR 0 8
29868: PUSH
29869: DOUBLE
29870: LD_INT 1
29872: DEC
29873: ST_TO_ADDR
29874: LD_INT 3
29876: PUSH
29877: FOR_TO
29878: IFFALSE 29907
// AddResourceType ( base , i , sources [ i ] ) ;
29880: LD_VAR 0 15
29884: PPUSH
29885: LD_VAR 0 8
29889: PPUSH
29890: LD_VAR 0 5
29894: PUSH
29895: LD_VAR 0 8
29899: ARRAY
29900: PPUSH
29901: CALL_OW 276
29905: GO 29877
29907: POP
29908: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
29909: LD_ADDR_VAR 0 18
29913: PUSH
29914: LD_VAR 0 15
29918: PPUSH
29919: LD_VAR 0 2
29923: PPUSH
29924: LD_INT 1
29926: PPUSH
29927: CALL 29170 0 3
29931: ST_TO_ADDR
// InitHc ;
29932: CALL_OW 19
// InitUc ;
29936: CALL_OW 18
// uc_side := side ;
29940: LD_ADDR_OWVAR 20
29944: PUSH
29945: LD_VAR 0 16
29949: ST_TO_ADDR
// uc_nation := nation ;
29950: LD_ADDR_OWVAR 21
29954: PUSH
29955: LD_VAR 0 17
29959: ST_TO_ADDR
// if buildings then
29960: LD_VAR 0 18
29964: IFFALSE 31286
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
29966: LD_ADDR_VAR 0 19
29970: PUSH
29971: LD_VAR 0 18
29975: PPUSH
29976: LD_INT 2
29978: PUSH
29979: LD_INT 30
29981: PUSH
29982: LD_INT 29
29984: PUSH
29985: EMPTY
29986: LIST
29987: LIST
29988: PUSH
29989: LD_INT 30
29991: PUSH
29992: LD_INT 30
29994: PUSH
29995: EMPTY
29996: LIST
29997: LIST
29998: PUSH
29999: EMPTY
30000: LIST
30001: LIST
30002: LIST
30003: PPUSH
30004: CALL_OW 72
30008: ST_TO_ADDR
// if tmp then
30009: LD_VAR 0 19
30013: IFFALSE 30061
// for i in tmp do
30015: LD_ADDR_VAR 0 8
30019: PUSH
30020: LD_VAR 0 19
30024: PUSH
30025: FOR_IN
30026: IFFALSE 30059
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
30028: LD_VAR 0 8
30032: PPUSH
30033: CALL_OW 250
30037: PPUSH
30038: LD_VAR 0 8
30042: PPUSH
30043: CALL_OW 251
30047: PPUSH
30048: LD_VAR 0 16
30052: PPUSH
30053: CALL_OW 441
30057: GO 30025
30059: POP
30060: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
30061: LD_VAR 0 18
30065: PPUSH
30066: LD_INT 2
30068: PUSH
30069: LD_INT 30
30071: PUSH
30072: LD_INT 32
30074: PUSH
30075: EMPTY
30076: LIST
30077: LIST
30078: PUSH
30079: LD_INT 30
30081: PUSH
30082: LD_INT 33
30084: PUSH
30085: EMPTY
30086: LIST
30087: LIST
30088: PUSH
30089: EMPTY
30090: LIST
30091: LIST
30092: LIST
30093: PPUSH
30094: CALL_OW 72
30098: IFFALSE 30186
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
30100: LD_ADDR_VAR 0 8
30104: PUSH
30105: LD_VAR 0 18
30109: PPUSH
30110: LD_INT 2
30112: PUSH
30113: LD_INT 30
30115: PUSH
30116: LD_INT 32
30118: PUSH
30119: EMPTY
30120: LIST
30121: LIST
30122: PUSH
30123: LD_INT 30
30125: PUSH
30126: LD_INT 33
30128: PUSH
30129: EMPTY
30130: LIST
30131: LIST
30132: PUSH
30133: EMPTY
30134: LIST
30135: LIST
30136: LIST
30137: PPUSH
30138: CALL_OW 72
30142: PUSH
30143: FOR_IN
30144: IFFALSE 30184
// begin if not GetBWeapon ( i ) then
30146: LD_VAR 0 8
30150: PPUSH
30151: CALL_OW 269
30155: NOT
30156: IFFALSE 30182
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
30158: LD_VAR 0 8
30162: PPUSH
30163: LD_VAR 0 8
30167: PPUSH
30168: LD_VAR 0 2
30172: PPUSH
30173: CALL 31432 0 2
30177: PPUSH
30178: CALL_OW 431
// end ;
30182: GO 30143
30184: POP
30185: POP
// end ; for i = 1 to personel do
30186: LD_ADDR_VAR 0 8
30190: PUSH
30191: DOUBLE
30192: LD_INT 1
30194: DEC
30195: ST_TO_ADDR
30196: LD_VAR 0 6
30200: PUSH
30201: FOR_TO
30202: IFFALSE 31266
// begin if i > 4 then
30204: LD_VAR 0 8
30208: PUSH
30209: LD_INT 4
30211: GREATER
30212: IFFALSE 30216
// break ;
30214: GO 31266
// case i of 1 :
30216: LD_VAR 0 8
30220: PUSH
30221: LD_INT 1
30223: DOUBLE
30224: EQUAL
30225: IFTRUE 30229
30227: GO 30309
30229: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
30230: LD_ADDR_VAR 0 12
30234: PUSH
30235: LD_VAR 0 18
30239: PPUSH
30240: LD_INT 22
30242: PUSH
30243: LD_VAR 0 16
30247: PUSH
30248: EMPTY
30249: LIST
30250: LIST
30251: PUSH
30252: LD_INT 58
30254: PUSH
30255: EMPTY
30256: LIST
30257: PUSH
30258: LD_INT 2
30260: PUSH
30261: LD_INT 30
30263: PUSH
30264: LD_INT 32
30266: PUSH
30267: EMPTY
30268: LIST
30269: LIST
30270: PUSH
30271: LD_INT 30
30273: PUSH
30274: LD_INT 4
30276: PUSH
30277: EMPTY
30278: LIST
30279: LIST
30280: PUSH
30281: LD_INT 30
30283: PUSH
30284: LD_INT 5
30286: PUSH
30287: EMPTY
30288: LIST
30289: LIST
30290: PUSH
30291: EMPTY
30292: LIST
30293: LIST
30294: LIST
30295: LIST
30296: PUSH
30297: EMPTY
30298: LIST
30299: LIST
30300: LIST
30301: PPUSH
30302: CALL_OW 72
30306: ST_TO_ADDR
30307: GO 30531
30309: LD_INT 2
30311: DOUBLE
30312: EQUAL
30313: IFTRUE 30317
30315: GO 30379
30317: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
30318: LD_ADDR_VAR 0 12
30322: PUSH
30323: LD_VAR 0 18
30327: PPUSH
30328: LD_INT 22
30330: PUSH
30331: LD_VAR 0 16
30335: PUSH
30336: EMPTY
30337: LIST
30338: LIST
30339: PUSH
30340: LD_INT 2
30342: PUSH
30343: LD_INT 30
30345: PUSH
30346: LD_INT 0
30348: PUSH
30349: EMPTY
30350: LIST
30351: LIST
30352: PUSH
30353: LD_INT 30
30355: PUSH
30356: LD_INT 1
30358: PUSH
30359: EMPTY
30360: LIST
30361: LIST
30362: PUSH
30363: EMPTY
30364: LIST
30365: LIST
30366: LIST
30367: PUSH
30368: EMPTY
30369: LIST
30370: LIST
30371: PPUSH
30372: CALL_OW 72
30376: ST_TO_ADDR
30377: GO 30531
30379: LD_INT 3
30381: DOUBLE
30382: EQUAL
30383: IFTRUE 30387
30385: GO 30449
30387: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
30388: LD_ADDR_VAR 0 12
30392: PUSH
30393: LD_VAR 0 18
30397: PPUSH
30398: LD_INT 22
30400: PUSH
30401: LD_VAR 0 16
30405: PUSH
30406: EMPTY
30407: LIST
30408: LIST
30409: PUSH
30410: LD_INT 2
30412: PUSH
30413: LD_INT 30
30415: PUSH
30416: LD_INT 2
30418: PUSH
30419: EMPTY
30420: LIST
30421: LIST
30422: PUSH
30423: LD_INT 30
30425: PUSH
30426: LD_INT 3
30428: PUSH
30429: EMPTY
30430: LIST
30431: LIST
30432: PUSH
30433: EMPTY
30434: LIST
30435: LIST
30436: LIST
30437: PUSH
30438: EMPTY
30439: LIST
30440: LIST
30441: PPUSH
30442: CALL_OW 72
30446: ST_TO_ADDR
30447: GO 30531
30449: LD_INT 4
30451: DOUBLE
30452: EQUAL
30453: IFTRUE 30457
30455: GO 30530
30457: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
30458: LD_ADDR_VAR 0 12
30462: PUSH
30463: LD_VAR 0 18
30467: PPUSH
30468: LD_INT 22
30470: PUSH
30471: LD_VAR 0 16
30475: PUSH
30476: EMPTY
30477: LIST
30478: LIST
30479: PUSH
30480: LD_INT 2
30482: PUSH
30483: LD_INT 30
30485: PUSH
30486: LD_INT 6
30488: PUSH
30489: EMPTY
30490: LIST
30491: LIST
30492: PUSH
30493: LD_INT 30
30495: PUSH
30496: LD_INT 7
30498: PUSH
30499: EMPTY
30500: LIST
30501: LIST
30502: PUSH
30503: LD_INT 30
30505: PUSH
30506: LD_INT 8
30508: PUSH
30509: EMPTY
30510: LIST
30511: LIST
30512: PUSH
30513: EMPTY
30514: LIST
30515: LIST
30516: LIST
30517: LIST
30518: PUSH
30519: EMPTY
30520: LIST
30521: LIST
30522: PPUSH
30523: CALL_OW 72
30527: ST_TO_ADDR
30528: GO 30531
30530: POP
// if i = 1 then
30531: LD_VAR 0 8
30535: PUSH
30536: LD_INT 1
30538: EQUAL
30539: IFFALSE 30650
// begin tmp := [ ] ;
30541: LD_ADDR_VAR 0 19
30545: PUSH
30546: EMPTY
30547: ST_TO_ADDR
// for j in f do
30548: LD_ADDR_VAR 0 9
30552: PUSH
30553: LD_VAR 0 12
30557: PUSH
30558: FOR_IN
30559: IFFALSE 30632
// if GetBType ( j ) = b_bunker then
30561: LD_VAR 0 9
30565: PPUSH
30566: CALL_OW 266
30570: PUSH
30571: LD_INT 32
30573: EQUAL
30574: IFFALSE 30601
// tmp := Insert ( tmp , 1 , j ) else
30576: LD_ADDR_VAR 0 19
30580: PUSH
30581: LD_VAR 0 19
30585: PPUSH
30586: LD_INT 1
30588: PPUSH
30589: LD_VAR 0 9
30593: PPUSH
30594: CALL_OW 2
30598: ST_TO_ADDR
30599: GO 30630
// tmp := Insert ( tmp , tmp + 1 , j ) ;
30601: LD_ADDR_VAR 0 19
30605: PUSH
30606: LD_VAR 0 19
30610: PPUSH
30611: LD_VAR 0 19
30615: PUSH
30616: LD_INT 1
30618: PLUS
30619: PPUSH
30620: LD_VAR 0 9
30624: PPUSH
30625: CALL_OW 2
30629: ST_TO_ADDR
30630: GO 30558
30632: POP
30633: POP
// if tmp then
30634: LD_VAR 0 19
30638: IFFALSE 30650
// f := tmp ;
30640: LD_ADDR_VAR 0 12
30644: PUSH
30645: LD_VAR 0 19
30649: ST_TO_ADDR
// end ; x := personel [ i ] ;
30650: LD_ADDR_VAR 0 13
30654: PUSH
30655: LD_VAR 0 6
30659: PUSH
30660: LD_VAR 0 8
30664: ARRAY
30665: ST_TO_ADDR
// if x = - 1 then
30666: LD_VAR 0 13
30670: PUSH
30671: LD_INT 1
30673: NEG
30674: EQUAL
30675: IFFALSE 30884
// begin for j in f do
30677: LD_ADDR_VAR 0 9
30681: PUSH
30682: LD_VAR 0 12
30686: PUSH
30687: FOR_IN
30688: IFFALSE 30880
// repeat InitHc ;
30690: CALL_OW 19
// if GetBType ( j ) = b_barracks then
30694: LD_VAR 0 9
30698: PPUSH
30699: CALL_OW 266
30703: PUSH
30704: LD_INT 5
30706: EQUAL
30707: IFFALSE 30777
// begin if UnitsInside ( j ) < 3 then
30709: LD_VAR 0 9
30713: PPUSH
30714: CALL_OW 313
30718: PUSH
30719: LD_INT 3
30721: LESS
30722: IFFALSE 30758
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
30724: LD_INT 0
30726: PPUSH
30727: LD_INT 5
30729: PUSH
30730: LD_INT 8
30732: PUSH
30733: LD_INT 9
30735: PUSH
30736: EMPTY
30737: LIST
30738: LIST
30739: LIST
30740: PUSH
30741: LD_VAR 0 17
30745: ARRAY
30746: PPUSH
30747: LD_VAR 0 4
30751: PPUSH
30752: CALL_OW 380
30756: GO 30775
// PrepareHuman ( false , i , skill ) ;
30758: LD_INT 0
30760: PPUSH
30761: LD_VAR 0 8
30765: PPUSH
30766: LD_VAR 0 4
30770: PPUSH
30771: CALL_OW 380
// end else
30775: GO 30794
// PrepareHuman ( false , i , skill ) ;
30777: LD_INT 0
30779: PPUSH
30780: LD_VAR 0 8
30784: PPUSH
30785: LD_VAR 0 4
30789: PPUSH
30790: CALL_OW 380
// un := CreateHuman ;
30794: LD_ADDR_VAR 0 14
30798: PUSH
30799: CALL_OW 44
30803: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
30804: LD_ADDR_VAR 0 7
30808: PUSH
30809: LD_VAR 0 7
30813: PPUSH
30814: LD_INT 1
30816: PPUSH
30817: LD_VAR 0 14
30821: PPUSH
30822: CALL_OW 2
30826: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
30827: LD_VAR 0 14
30831: PPUSH
30832: LD_VAR 0 9
30836: PPUSH
30837: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
30841: LD_VAR 0 9
30845: PPUSH
30846: CALL_OW 313
30850: PUSH
30851: LD_INT 6
30853: EQUAL
30854: PUSH
30855: LD_VAR 0 9
30859: PPUSH
30860: CALL_OW 266
30864: PUSH
30865: LD_INT 32
30867: PUSH
30868: LD_INT 31
30870: PUSH
30871: EMPTY
30872: LIST
30873: LIST
30874: IN
30875: OR
30876: IFFALSE 30690
30878: GO 30687
30880: POP
30881: POP
// end else
30882: GO 31264
// for j = 1 to x do
30884: LD_ADDR_VAR 0 9
30888: PUSH
30889: DOUBLE
30890: LD_INT 1
30892: DEC
30893: ST_TO_ADDR
30894: LD_VAR 0 13
30898: PUSH
30899: FOR_TO
30900: IFFALSE 31262
// begin InitHc ;
30902: CALL_OW 19
// if not f then
30906: LD_VAR 0 12
30910: NOT
30911: IFFALSE 31000
// begin PrepareHuman ( false , i , skill ) ;
30913: LD_INT 0
30915: PPUSH
30916: LD_VAR 0 8
30920: PPUSH
30921: LD_VAR 0 4
30925: PPUSH
30926: CALL_OW 380
// un := CreateHuman ;
30930: LD_ADDR_VAR 0 14
30934: PUSH
30935: CALL_OW 44
30939: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
30940: LD_ADDR_VAR 0 7
30944: PUSH
30945: LD_VAR 0 7
30949: PPUSH
30950: LD_INT 1
30952: PPUSH
30953: LD_VAR 0 14
30957: PPUSH
30958: CALL_OW 2
30962: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
30963: LD_VAR 0 14
30967: PPUSH
30968: LD_VAR 0 1
30972: PPUSH
30973: CALL_OW 250
30977: PPUSH
30978: LD_VAR 0 1
30982: PPUSH
30983: CALL_OW 251
30987: PPUSH
30988: LD_INT 10
30990: PPUSH
30991: LD_INT 0
30993: PPUSH
30994: CALL_OW 50
// continue ;
30998: GO 30899
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
31000: LD_VAR 0 12
31004: PUSH
31005: LD_INT 1
31007: ARRAY
31008: PPUSH
31009: CALL_OW 313
31013: PUSH
31014: LD_VAR 0 12
31018: PUSH
31019: LD_INT 1
31021: ARRAY
31022: PPUSH
31023: CALL_OW 266
31027: PUSH
31028: LD_INT 32
31030: PUSH
31031: LD_INT 31
31033: PUSH
31034: EMPTY
31035: LIST
31036: LIST
31037: IN
31038: AND
31039: PUSH
31040: LD_VAR 0 12
31044: PUSH
31045: LD_INT 1
31047: ARRAY
31048: PPUSH
31049: CALL_OW 313
31053: PUSH
31054: LD_INT 6
31056: EQUAL
31057: OR
31058: IFFALSE 31078
// f := Delete ( f , 1 ) ;
31060: LD_ADDR_VAR 0 12
31064: PUSH
31065: LD_VAR 0 12
31069: PPUSH
31070: LD_INT 1
31072: PPUSH
31073: CALL_OW 3
31077: ST_TO_ADDR
// if not f then
31078: LD_VAR 0 12
31082: NOT
31083: IFFALSE 31101
// begin x := x + 2 ;
31085: LD_ADDR_VAR 0 13
31089: PUSH
31090: LD_VAR 0 13
31094: PUSH
31095: LD_INT 2
31097: PLUS
31098: ST_TO_ADDR
// continue ;
31099: GO 30899
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
31101: LD_VAR 0 12
31105: PUSH
31106: LD_INT 1
31108: ARRAY
31109: PPUSH
31110: CALL_OW 266
31114: PUSH
31115: LD_INT 5
31117: EQUAL
31118: IFFALSE 31192
// begin if UnitsInside ( f [ 1 ] ) < 3 then
31120: LD_VAR 0 12
31124: PUSH
31125: LD_INT 1
31127: ARRAY
31128: PPUSH
31129: CALL_OW 313
31133: PUSH
31134: LD_INT 3
31136: LESS
31137: IFFALSE 31173
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
31139: LD_INT 0
31141: PPUSH
31142: LD_INT 5
31144: PUSH
31145: LD_INT 8
31147: PUSH
31148: LD_INT 9
31150: PUSH
31151: EMPTY
31152: LIST
31153: LIST
31154: LIST
31155: PUSH
31156: LD_VAR 0 17
31160: ARRAY
31161: PPUSH
31162: LD_VAR 0 4
31166: PPUSH
31167: CALL_OW 380
31171: GO 31190
// PrepareHuman ( false , i , skill ) ;
31173: LD_INT 0
31175: PPUSH
31176: LD_VAR 0 8
31180: PPUSH
31181: LD_VAR 0 4
31185: PPUSH
31186: CALL_OW 380
// end else
31190: GO 31209
// PrepareHuman ( false , i , skill ) ;
31192: LD_INT 0
31194: PPUSH
31195: LD_VAR 0 8
31199: PPUSH
31200: LD_VAR 0 4
31204: PPUSH
31205: CALL_OW 380
// un := CreateHuman ;
31209: LD_ADDR_VAR 0 14
31213: PUSH
31214: CALL_OW 44
31218: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
31219: LD_ADDR_VAR 0 7
31223: PUSH
31224: LD_VAR 0 7
31228: PPUSH
31229: LD_INT 1
31231: PPUSH
31232: LD_VAR 0 14
31236: PPUSH
31237: CALL_OW 2
31241: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
31242: LD_VAR 0 14
31246: PPUSH
31247: LD_VAR 0 12
31251: PUSH
31252: LD_INT 1
31254: ARRAY
31255: PPUSH
31256: CALL_OW 52
// end ;
31260: GO 30899
31262: POP
31263: POP
// end ;
31264: GO 30201
31266: POP
31267: POP
// result := result ^ buildings ;
31268: LD_ADDR_VAR 0 7
31272: PUSH
31273: LD_VAR 0 7
31277: PUSH
31278: LD_VAR 0 18
31282: ADD
31283: ST_TO_ADDR
// end else
31284: GO 31427
// begin for i = 1 to personel do
31286: LD_ADDR_VAR 0 8
31290: PUSH
31291: DOUBLE
31292: LD_INT 1
31294: DEC
31295: ST_TO_ADDR
31296: LD_VAR 0 6
31300: PUSH
31301: FOR_TO
31302: IFFALSE 31425
// begin if i > 4 then
31304: LD_VAR 0 8
31308: PUSH
31309: LD_INT 4
31311: GREATER
31312: IFFALSE 31316
// break ;
31314: GO 31425
// x := personel [ i ] ;
31316: LD_ADDR_VAR 0 13
31320: PUSH
31321: LD_VAR 0 6
31325: PUSH
31326: LD_VAR 0 8
31330: ARRAY
31331: ST_TO_ADDR
// if x = - 1 then
31332: LD_VAR 0 13
31336: PUSH
31337: LD_INT 1
31339: NEG
31340: EQUAL
31341: IFFALSE 31345
// continue ;
31343: GO 31301
// PrepareHuman ( false , i , skill ) ;
31345: LD_INT 0
31347: PPUSH
31348: LD_VAR 0 8
31352: PPUSH
31353: LD_VAR 0 4
31357: PPUSH
31358: CALL_OW 380
// un := CreateHuman ;
31362: LD_ADDR_VAR 0 14
31366: PUSH
31367: CALL_OW 44
31371: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
31372: LD_VAR 0 14
31376: PPUSH
31377: LD_VAR 0 1
31381: PPUSH
31382: CALL_OW 250
31386: PPUSH
31387: LD_VAR 0 1
31391: PPUSH
31392: CALL_OW 251
31396: PPUSH
31397: LD_INT 10
31399: PPUSH
31400: LD_INT 0
31402: PPUSH
31403: CALL_OW 50
// result := result ^ un ;
31407: LD_ADDR_VAR 0 7
31411: PUSH
31412: LD_VAR 0 7
31416: PUSH
31417: LD_VAR 0 14
31421: ADD
31422: ST_TO_ADDR
// end ;
31423: GO 31301
31425: POP
31426: POP
// end ; end ;
31427: LD_VAR 0 7
31431: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
31432: LD_INT 0
31434: PPUSH
31435: PPUSH
31436: PPUSH
31437: PPUSH
31438: PPUSH
31439: PPUSH
31440: PPUSH
31441: PPUSH
31442: PPUSH
31443: PPUSH
31444: PPUSH
31445: PPUSH
31446: PPUSH
31447: PPUSH
31448: PPUSH
31449: PPUSH
// result := false ;
31450: LD_ADDR_VAR 0 3
31454: PUSH
31455: LD_INT 0
31457: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
31458: LD_VAR 0 1
31462: NOT
31463: PUSH
31464: LD_VAR 0 1
31468: PPUSH
31469: CALL_OW 266
31473: PUSH
31474: LD_INT 32
31476: PUSH
31477: LD_INT 33
31479: PUSH
31480: EMPTY
31481: LIST
31482: LIST
31483: IN
31484: NOT
31485: OR
31486: IFFALSE 31490
// exit ;
31488: GO 32599
// nat := GetNation ( tower ) ;
31490: LD_ADDR_VAR 0 12
31494: PUSH
31495: LD_VAR 0 1
31499: PPUSH
31500: CALL_OW 248
31504: ST_TO_ADDR
// side := GetSide ( tower ) ;
31505: LD_ADDR_VAR 0 16
31509: PUSH
31510: LD_VAR 0 1
31514: PPUSH
31515: CALL_OW 255
31519: ST_TO_ADDR
// x := GetX ( tower ) ;
31520: LD_ADDR_VAR 0 10
31524: PUSH
31525: LD_VAR 0 1
31529: PPUSH
31530: CALL_OW 250
31534: ST_TO_ADDR
// y := GetY ( tower ) ;
31535: LD_ADDR_VAR 0 11
31539: PUSH
31540: LD_VAR 0 1
31544: PPUSH
31545: CALL_OW 251
31549: ST_TO_ADDR
// if not x or not y then
31550: LD_VAR 0 10
31554: NOT
31555: PUSH
31556: LD_VAR 0 11
31560: NOT
31561: OR
31562: IFFALSE 31566
// exit ;
31564: GO 32599
// weapon := 0 ;
31566: LD_ADDR_VAR 0 18
31570: PUSH
31571: LD_INT 0
31573: ST_TO_ADDR
// fac_list := [ ] ;
31574: LD_ADDR_VAR 0 17
31578: PUSH
31579: EMPTY
31580: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
31581: LD_ADDR_VAR 0 6
31585: PUSH
31586: LD_VAR 0 1
31590: PPUSH
31591: CALL_OW 274
31595: PPUSH
31596: LD_VAR 0 2
31600: PPUSH
31601: LD_INT 0
31603: PPUSH
31604: CALL 29170 0 3
31608: PPUSH
31609: LD_INT 30
31611: PUSH
31612: LD_INT 3
31614: PUSH
31615: EMPTY
31616: LIST
31617: LIST
31618: PPUSH
31619: CALL_OW 72
31623: ST_TO_ADDR
// if not factories then
31624: LD_VAR 0 6
31628: NOT
31629: IFFALSE 31633
// exit ;
31631: GO 32599
// for i in factories do
31633: LD_ADDR_VAR 0 8
31637: PUSH
31638: LD_VAR 0 6
31642: PUSH
31643: FOR_IN
31644: IFFALSE 31669
// fac_list := fac_list union AvailableWeaponList ( i ) ;
31646: LD_ADDR_VAR 0 17
31650: PUSH
31651: LD_VAR 0 17
31655: PUSH
31656: LD_VAR 0 8
31660: PPUSH
31661: CALL_OW 478
31665: UNION
31666: ST_TO_ADDR
31667: GO 31643
31669: POP
31670: POP
// if not fac_list then
31671: LD_VAR 0 17
31675: NOT
31676: IFFALSE 31680
// exit ;
31678: GO 32599
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
31680: LD_ADDR_VAR 0 5
31684: PUSH
31685: LD_INT 4
31687: PUSH
31688: LD_INT 5
31690: PUSH
31691: LD_INT 9
31693: PUSH
31694: LD_INT 10
31696: PUSH
31697: LD_INT 6
31699: PUSH
31700: LD_INT 7
31702: PUSH
31703: LD_INT 11
31705: PUSH
31706: EMPTY
31707: LIST
31708: LIST
31709: LIST
31710: LIST
31711: LIST
31712: LIST
31713: LIST
31714: PUSH
31715: LD_INT 27
31717: PUSH
31718: LD_INT 28
31720: PUSH
31721: LD_INT 26
31723: PUSH
31724: LD_INT 30
31726: PUSH
31727: EMPTY
31728: LIST
31729: LIST
31730: LIST
31731: LIST
31732: PUSH
31733: LD_INT 43
31735: PUSH
31736: LD_INT 44
31738: PUSH
31739: LD_INT 46
31741: PUSH
31742: LD_INT 45
31744: PUSH
31745: LD_INT 47
31747: PUSH
31748: LD_INT 49
31750: PUSH
31751: EMPTY
31752: LIST
31753: LIST
31754: LIST
31755: LIST
31756: LIST
31757: LIST
31758: PUSH
31759: EMPTY
31760: LIST
31761: LIST
31762: LIST
31763: PUSH
31764: LD_VAR 0 12
31768: ARRAY
31769: ST_TO_ADDR
// list := list isect fac_list ;
31770: LD_ADDR_VAR 0 5
31774: PUSH
31775: LD_VAR 0 5
31779: PUSH
31780: LD_VAR 0 17
31784: ISECT
31785: ST_TO_ADDR
// if not list then
31786: LD_VAR 0 5
31790: NOT
31791: IFFALSE 31795
// exit ;
31793: GO 32599
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
31795: LD_VAR 0 12
31799: PUSH
31800: LD_INT 3
31802: EQUAL
31803: PUSH
31804: LD_INT 49
31806: PUSH
31807: LD_VAR 0 5
31811: IN
31812: AND
31813: PUSH
31814: LD_INT 31
31816: PPUSH
31817: LD_VAR 0 16
31821: PPUSH
31822: CALL_OW 321
31826: PUSH
31827: LD_INT 2
31829: EQUAL
31830: AND
31831: IFFALSE 31891
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
31833: LD_INT 22
31835: PUSH
31836: LD_VAR 0 16
31840: PUSH
31841: EMPTY
31842: LIST
31843: LIST
31844: PUSH
31845: LD_INT 35
31847: PUSH
31848: LD_INT 49
31850: PUSH
31851: EMPTY
31852: LIST
31853: LIST
31854: PUSH
31855: LD_INT 91
31857: PUSH
31858: LD_VAR 0 1
31862: PUSH
31863: LD_INT 10
31865: PUSH
31866: EMPTY
31867: LIST
31868: LIST
31869: LIST
31870: PUSH
31871: EMPTY
31872: LIST
31873: LIST
31874: LIST
31875: PPUSH
31876: CALL_OW 69
31880: NOT
31881: IFFALSE 31891
// weapon := ru_time_lapser ;
31883: LD_ADDR_VAR 0 18
31887: PUSH
31888: LD_INT 49
31890: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
31891: LD_VAR 0 12
31895: PUSH
31896: LD_INT 1
31898: PUSH
31899: LD_INT 2
31901: PUSH
31902: EMPTY
31903: LIST
31904: LIST
31905: IN
31906: PUSH
31907: LD_INT 11
31909: PUSH
31910: LD_VAR 0 5
31914: IN
31915: PUSH
31916: LD_INT 30
31918: PUSH
31919: LD_VAR 0 5
31923: IN
31924: OR
31925: AND
31926: PUSH
31927: LD_INT 6
31929: PPUSH
31930: LD_VAR 0 16
31934: PPUSH
31935: CALL_OW 321
31939: PUSH
31940: LD_INT 2
31942: EQUAL
31943: AND
31944: IFFALSE 32109
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
31946: LD_INT 22
31948: PUSH
31949: LD_VAR 0 16
31953: PUSH
31954: EMPTY
31955: LIST
31956: LIST
31957: PUSH
31958: LD_INT 2
31960: PUSH
31961: LD_INT 35
31963: PUSH
31964: LD_INT 11
31966: PUSH
31967: EMPTY
31968: LIST
31969: LIST
31970: PUSH
31971: LD_INT 35
31973: PUSH
31974: LD_INT 30
31976: PUSH
31977: EMPTY
31978: LIST
31979: LIST
31980: PUSH
31981: EMPTY
31982: LIST
31983: LIST
31984: LIST
31985: PUSH
31986: LD_INT 91
31988: PUSH
31989: LD_VAR 0 1
31993: PUSH
31994: LD_INT 18
31996: PUSH
31997: EMPTY
31998: LIST
31999: LIST
32000: LIST
32001: PUSH
32002: EMPTY
32003: LIST
32004: LIST
32005: LIST
32006: PPUSH
32007: CALL_OW 69
32011: NOT
32012: PUSH
32013: LD_INT 22
32015: PUSH
32016: LD_VAR 0 16
32020: PUSH
32021: EMPTY
32022: LIST
32023: LIST
32024: PUSH
32025: LD_INT 2
32027: PUSH
32028: LD_INT 30
32030: PUSH
32031: LD_INT 32
32033: PUSH
32034: EMPTY
32035: LIST
32036: LIST
32037: PUSH
32038: LD_INT 30
32040: PUSH
32041: LD_INT 33
32043: PUSH
32044: EMPTY
32045: LIST
32046: LIST
32047: PUSH
32048: EMPTY
32049: LIST
32050: LIST
32051: LIST
32052: PUSH
32053: LD_INT 91
32055: PUSH
32056: LD_VAR 0 1
32060: PUSH
32061: LD_INT 12
32063: PUSH
32064: EMPTY
32065: LIST
32066: LIST
32067: LIST
32068: PUSH
32069: EMPTY
32070: LIST
32071: LIST
32072: LIST
32073: PUSH
32074: EMPTY
32075: LIST
32076: PPUSH
32077: CALL_OW 69
32081: PUSH
32082: LD_INT 2
32084: GREATER
32085: AND
32086: IFFALSE 32109
// weapon := [ us_radar , ar_radar ] [ nat ] ;
32088: LD_ADDR_VAR 0 18
32092: PUSH
32093: LD_INT 11
32095: PUSH
32096: LD_INT 30
32098: PUSH
32099: EMPTY
32100: LIST
32101: LIST
32102: PUSH
32103: LD_VAR 0 12
32107: ARRAY
32108: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
32109: LD_VAR 0 18
32113: NOT
32114: PUSH
32115: LD_INT 40
32117: PPUSH
32118: LD_VAR 0 16
32122: PPUSH
32123: CALL_OW 321
32127: PUSH
32128: LD_INT 2
32130: EQUAL
32131: AND
32132: PUSH
32133: LD_INT 7
32135: PUSH
32136: LD_VAR 0 5
32140: IN
32141: PUSH
32142: LD_INT 28
32144: PUSH
32145: LD_VAR 0 5
32149: IN
32150: OR
32151: PUSH
32152: LD_INT 45
32154: PUSH
32155: LD_VAR 0 5
32159: IN
32160: OR
32161: AND
32162: IFFALSE 32416
// begin hex := GetHexInfo ( x , y ) ;
32164: LD_ADDR_VAR 0 4
32168: PUSH
32169: LD_VAR 0 10
32173: PPUSH
32174: LD_VAR 0 11
32178: PPUSH
32179: CALL_OW 546
32183: ST_TO_ADDR
// if hex [ 1 ] then
32184: LD_VAR 0 4
32188: PUSH
32189: LD_INT 1
32191: ARRAY
32192: IFFALSE 32196
// exit ;
32194: GO 32599
// height := hex [ 2 ] ;
32196: LD_ADDR_VAR 0 15
32200: PUSH
32201: LD_VAR 0 4
32205: PUSH
32206: LD_INT 2
32208: ARRAY
32209: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
32210: LD_ADDR_VAR 0 14
32214: PUSH
32215: LD_INT 0
32217: PUSH
32218: LD_INT 2
32220: PUSH
32221: LD_INT 3
32223: PUSH
32224: LD_INT 5
32226: PUSH
32227: EMPTY
32228: LIST
32229: LIST
32230: LIST
32231: LIST
32232: ST_TO_ADDR
// for i in tmp do
32233: LD_ADDR_VAR 0 8
32237: PUSH
32238: LD_VAR 0 14
32242: PUSH
32243: FOR_IN
32244: IFFALSE 32414
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
32246: LD_ADDR_VAR 0 9
32250: PUSH
32251: LD_VAR 0 10
32255: PPUSH
32256: LD_VAR 0 8
32260: PPUSH
32261: LD_INT 5
32263: PPUSH
32264: CALL_OW 272
32268: PUSH
32269: LD_VAR 0 11
32273: PPUSH
32274: LD_VAR 0 8
32278: PPUSH
32279: LD_INT 5
32281: PPUSH
32282: CALL_OW 273
32286: PUSH
32287: EMPTY
32288: LIST
32289: LIST
32290: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
32291: LD_VAR 0 9
32295: PUSH
32296: LD_INT 1
32298: ARRAY
32299: PPUSH
32300: LD_VAR 0 9
32304: PUSH
32305: LD_INT 2
32307: ARRAY
32308: PPUSH
32309: CALL_OW 488
32313: IFFALSE 32412
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
32315: LD_ADDR_VAR 0 4
32319: PUSH
32320: LD_VAR 0 9
32324: PUSH
32325: LD_INT 1
32327: ARRAY
32328: PPUSH
32329: LD_VAR 0 9
32333: PUSH
32334: LD_INT 2
32336: ARRAY
32337: PPUSH
32338: CALL_OW 546
32342: ST_TO_ADDR
// if hex [ 1 ] then
32343: LD_VAR 0 4
32347: PUSH
32348: LD_INT 1
32350: ARRAY
32351: IFFALSE 32355
// continue ;
32353: GO 32243
// h := hex [ 2 ] ;
32355: LD_ADDR_VAR 0 13
32359: PUSH
32360: LD_VAR 0 4
32364: PUSH
32365: LD_INT 2
32367: ARRAY
32368: ST_TO_ADDR
// if h + 7 < height then
32369: LD_VAR 0 13
32373: PUSH
32374: LD_INT 7
32376: PLUS
32377: PUSH
32378: LD_VAR 0 15
32382: LESS
32383: IFFALSE 32412
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
32385: LD_ADDR_VAR 0 18
32389: PUSH
32390: LD_INT 7
32392: PUSH
32393: LD_INT 28
32395: PUSH
32396: LD_INT 45
32398: PUSH
32399: EMPTY
32400: LIST
32401: LIST
32402: LIST
32403: PUSH
32404: LD_VAR 0 12
32408: ARRAY
32409: ST_TO_ADDR
// break ;
32410: GO 32414
// end ; end ; end ;
32412: GO 32243
32414: POP
32415: POP
// end ; if not weapon then
32416: LD_VAR 0 18
32420: NOT
32421: IFFALSE 32481
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
32423: LD_ADDR_VAR 0 5
32427: PUSH
32428: LD_VAR 0 5
32432: PUSH
32433: LD_INT 11
32435: PUSH
32436: LD_INT 30
32438: PUSH
32439: LD_INT 49
32441: PUSH
32442: EMPTY
32443: LIST
32444: LIST
32445: LIST
32446: DIFF
32447: ST_TO_ADDR
// if not list then
32448: LD_VAR 0 5
32452: NOT
32453: IFFALSE 32457
// exit ;
32455: GO 32599
// weapon := list [ rand ( 1 , list ) ] ;
32457: LD_ADDR_VAR 0 18
32461: PUSH
32462: LD_VAR 0 5
32466: PUSH
32467: LD_INT 1
32469: PPUSH
32470: LD_VAR 0 5
32474: PPUSH
32475: CALL_OW 12
32479: ARRAY
32480: ST_TO_ADDR
// end ; if weapon then
32481: LD_VAR 0 18
32485: IFFALSE 32599
// begin tmp := CostOfWeapon ( weapon ) ;
32487: LD_ADDR_VAR 0 14
32491: PUSH
32492: LD_VAR 0 18
32496: PPUSH
32497: CALL_OW 451
32501: ST_TO_ADDR
// j := GetBase ( tower ) ;
32502: LD_ADDR_VAR 0 9
32506: PUSH
32507: LD_VAR 0 1
32511: PPUSH
32512: CALL_OW 274
32516: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
32517: LD_VAR 0 9
32521: PPUSH
32522: LD_INT 1
32524: PPUSH
32525: CALL_OW 275
32529: PUSH
32530: LD_VAR 0 14
32534: PUSH
32535: LD_INT 1
32537: ARRAY
32538: GREATEREQUAL
32539: PUSH
32540: LD_VAR 0 9
32544: PPUSH
32545: LD_INT 2
32547: PPUSH
32548: CALL_OW 275
32552: PUSH
32553: LD_VAR 0 14
32557: PUSH
32558: LD_INT 2
32560: ARRAY
32561: GREATEREQUAL
32562: AND
32563: PUSH
32564: LD_VAR 0 9
32568: PPUSH
32569: LD_INT 3
32571: PPUSH
32572: CALL_OW 275
32576: PUSH
32577: LD_VAR 0 14
32581: PUSH
32582: LD_INT 3
32584: ARRAY
32585: GREATEREQUAL
32586: AND
32587: IFFALSE 32599
// result := weapon ;
32589: LD_ADDR_VAR 0 3
32593: PUSH
32594: LD_VAR 0 18
32598: ST_TO_ADDR
// end ; end ;
32599: LD_VAR 0 3
32603: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
32604: LD_INT 0
32606: PPUSH
32607: PPUSH
// result := true ;
32608: LD_ADDR_VAR 0 3
32612: PUSH
32613: LD_INT 1
32615: ST_TO_ADDR
// if array1 = array2 then
32616: LD_VAR 0 1
32620: PUSH
32621: LD_VAR 0 2
32625: EQUAL
32626: IFFALSE 32686
// begin for i = 1 to array1 do
32628: LD_ADDR_VAR 0 4
32632: PUSH
32633: DOUBLE
32634: LD_INT 1
32636: DEC
32637: ST_TO_ADDR
32638: LD_VAR 0 1
32642: PUSH
32643: FOR_TO
32644: IFFALSE 32682
// if array1 [ i ] <> array2 [ i ] then
32646: LD_VAR 0 1
32650: PUSH
32651: LD_VAR 0 4
32655: ARRAY
32656: PUSH
32657: LD_VAR 0 2
32661: PUSH
32662: LD_VAR 0 4
32666: ARRAY
32667: NONEQUAL
32668: IFFALSE 32680
// begin result := false ;
32670: LD_ADDR_VAR 0 3
32674: PUSH
32675: LD_INT 0
32677: ST_TO_ADDR
// break ;
32678: GO 32682
// end ;
32680: GO 32643
32682: POP
32683: POP
// end else
32684: GO 32694
// result := false ;
32686: LD_ADDR_VAR 0 3
32690: PUSH
32691: LD_INT 0
32693: ST_TO_ADDR
// end ;
32694: LD_VAR 0 3
32698: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
32699: LD_INT 0
32701: PPUSH
32702: PPUSH
// if not array1 or not array2 then
32703: LD_VAR 0 1
32707: NOT
32708: PUSH
32709: LD_VAR 0 2
32713: NOT
32714: OR
32715: IFFALSE 32719
// exit ;
32717: GO 32783
// result := true ;
32719: LD_ADDR_VAR 0 3
32723: PUSH
32724: LD_INT 1
32726: ST_TO_ADDR
// for i = 1 to array1 do
32727: LD_ADDR_VAR 0 4
32731: PUSH
32732: DOUBLE
32733: LD_INT 1
32735: DEC
32736: ST_TO_ADDR
32737: LD_VAR 0 1
32741: PUSH
32742: FOR_TO
32743: IFFALSE 32781
// if array1 [ i ] <> array2 [ i ] then
32745: LD_VAR 0 1
32749: PUSH
32750: LD_VAR 0 4
32754: ARRAY
32755: PUSH
32756: LD_VAR 0 2
32760: PUSH
32761: LD_VAR 0 4
32765: ARRAY
32766: NONEQUAL
32767: IFFALSE 32779
// begin result := false ;
32769: LD_ADDR_VAR 0 3
32773: PUSH
32774: LD_INT 0
32776: ST_TO_ADDR
// break ;
32777: GO 32781
// end ;
32779: GO 32742
32781: POP
32782: POP
// end ;
32783: LD_VAR 0 3
32787: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
32788: LD_INT 0
32790: PPUSH
32791: PPUSH
32792: PPUSH
// pom := GetBase ( fac ) ;
32793: LD_ADDR_VAR 0 5
32797: PUSH
32798: LD_VAR 0 1
32802: PPUSH
32803: CALL_OW 274
32807: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
32808: LD_ADDR_VAR 0 4
32812: PUSH
32813: LD_VAR 0 2
32817: PUSH
32818: LD_INT 1
32820: ARRAY
32821: PPUSH
32822: LD_VAR 0 2
32826: PUSH
32827: LD_INT 2
32829: ARRAY
32830: PPUSH
32831: LD_VAR 0 2
32835: PUSH
32836: LD_INT 3
32838: ARRAY
32839: PPUSH
32840: LD_VAR 0 2
32844: PUSH
32845: LD_INT 4
32847: ARRAY
32848: PPUSH
32849: CALL_OW 449
32853: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
32854: LD_ADDR_VAR 0 3
32858: PUSH
32859: LD_VAR 0 5
32863: PPUSH
32864: LD_INT 1
32866: PPUSH
32867: CALL_OW 275
32871: PUSH
32872: LD_VAR 0 4
32876: PUSH
32877: LD_INT 1
32879: ARRAY
32880: GREATEREQUAL
32881: PUSH
32882: LD_VAR 0 5
32886: PPUSH
32887: LD_INT 2
32889: PPUSH
32890: CALL_OW 275
32894: PUSH
32895: LD_VAR 0 4
32899: PUSH
32900: LD_INT 2
32902: ARRAY
32903: GREATEREQUAL
32904: AND
32905: PUSH
32906: LD_VAR 0 5
32910: PPUSH
32911: LD_INT 3
32913: PPUSH
32914: CALL_OW 275
32918: PUSH
32919: LD_VAR 0 4
32923: PUSH
32924: LD_INT 3
32926: ARRAY
32927: GREATEREQUAL
32928: AND
32929: ST_TO_ADDR
// end ;
32930: LD_VAR 0 3
32934: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
32935: LD_INT 0
32937: PPUSH
32938: PPUSH
32939: PPUSH
32940: PPUSH
// pom := GetBase ( building ) ;
32941: LD_ADDR_VAR 0 3
32945: PUSH
32946: LD_VAR 0 1
32950: PPUSH
32951: CALL_OW 274
32955: ST_TO_ADDR
// if not pom then
32956: LD_VAR 0 3
32960: NOT
32961: IFFALSE 32965
// exit ;
32963: GO 33135
// btype := GetBType ( building ) ;
32965: LD_ADDR_VAR 0 5
32969: PUSH
32970: LD_VAR 0 1
32974: PPUSH
32975: CALL_OW 266
32979: ST_TO_ADDR
// if btype = b_armoury then
32980: LD_VAR 0 5
32984: PUSH
32985: LD_INT 4
32987: EQUAL
32988: IFFALSE 32998
// btype := b_barracks ;
32990: LD_ADDR_VAR 0 5
32994: PUSH
32995: LD_INT 5
32997: ST_TO_ADDR
// if btype = b_depot then
32998: LD_VAR 0 5
33002: PUSH
33003: LD_INT 0
33005: EQUAL
33006: IFFALSE 33016
// btype := b_warehouse ;
33008: LD_ADDR_VAR 0 5
33012: PUSH
33013: LD_INT 1
33015: ST_TO_ADDR
// if btype = b_workshop then
33016: LD_VAR 0 5
33020: PUSH
33021: LD_INT 2
33023: EQUAL
33024: IFFALSE 33034
// btype := b_factory ;
33026: LD_ADDR_VAR 0 5
33030: PUSH
33031: LD_INT 3
33033: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
33034: LD_ADDR_VAR 0 4
33038: PUSH
33039: LD_VAR 0 5
33043: PPUSH
33044: LD_VAR 0 1
33048: PPUSH
33049: CALL_OW 248
33053: PPUSH
33054: CALL_OW 450
33058: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
33059: LD_ADDR_VAR 0 2
33063: PUSH
33064: LD_VAR 0 3
33068: PPUSH
33069: LD_INT 1
33071: PPUSH
33072: CALL_OW 275
33076: PUSH
33077: LD_VAR 0 4
33081: PUSH
33082: LD_INT 1
33084: ARRAY
33085: GREATEREQUAL
33086: PUSH
33087: LD_VAR 0 3
33091: PPUSH
33092: LD_INT 2
33094: PPUSH
33095: CALL_OW 275
33099: PUSH
33100: LD_VAR 0 4
33104: PUSH
33105: LD_INT 2
33107: ARRAY
33108: GREATEREQUAL
33109: AND
33110: PUSH
33111: LD_VAR 0 3
33115: PPUSH
33116: LD_INT 3
33118: PPUSH
33119: CALL_OW 275
33123: PUSH
33124: LD_VAR 0 4
33128: PUSH
33129: LD_INT 3
33131: ARRAY
33132: GREATEREQUAL
33133: AND
33134: ST_TO_ADDR
// end ;
33135: LD_VAR 0 2
33139: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
33140: LD_INT 0
33142: PPUSH
33143: PPUSH
33144: PPUSH
// pom := GetBase ( building ) ;
33145: LD_ADDR_VAR 0 4
33149: PUSH
33150: LD_VAR 0 1
33154: PPUSH
33155: CALL_OW 274
33159: ST_TO_ADDR
// if not pom then
33160: LD_VAR 0 4
33164: NOT
33165: IFFALSE 33169
// exit ;
33167: GO 33270
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
33169: LD_ADDR_VAR 0 5
33173: PUSH
33174: LD_VAR 0 2
33178: PPUSH
33179: LD_VAR 0 1
33183: PPUSH
33184: CALL_OW 248
33188: PPUSH
33189: CALL_OW 450
33193: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
33194: LD_ADDR_VAR 0 3
33198: PUSH
33199: LD_VAR 0 4
33203: PPUSH
33204: LD_INT 1
33206: PPUSH
33207: CALL_OW 275
33211: PUSH
33212: LD_VAR 0 5
33216: PUSH
33217: LD_INT 1
33219: ARRAY
33220: GREATEREQUAL
33221: PUSH
33222: LD_VAR 0 4
33226: PPUSH
33227: LD_INT 2
33229: PPUSH
33230: CALL_OW 275
33234: PUSH
33235: LD_VAR 0 5
33239: PUSH
33240: LD_INT 2
33242: ARRAY
33243: GREATEREQUAL
33244: AND
33245: PUSH
33246: LD_VAR 0 4
33250: PPUSH
33251: LD_INT 3
33253: PPUSH
33254: CALL_OW 275
33258: PUSH
33259: LD_VAR 0 5
33263: PUSH
33264: LD_INT 3
33266: ARRAY
33267: GREATEREQUAL
33268: AND
33269: ST_TO_ADDR
// end ;
33270: LD_VAR 0 3
33274: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
33275: LD_INT 0
33277: PPUSH
33278: PPUSH
33279: PPUSH
33280: PPUSH
33281: PPUSH
33282: PPUSH
33283: PPUSH
33284: PPUSH
33285: PPUSH
33286: PPUSH
33287: PPUSH
// result := false ;
33288: LD_ADDR_VAR 0 8
33292: PUSH
33293: LD_INT 0
33295: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
33296: LD_VAR 0 5
33300: NOT
33301: PUSH
33302: LD_VAR 0 1
33306: NOT
33307: OR
33308: PUSH
33309: LD_VAR 0 2
33313: NOT
33314: OR
33315: PUSH
33316: LD_VAR 0 3
33320: NOT
33321: OR
33322: IFFALSE 33326
// exit ;
33324: GO 34140
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
33326: LD_ADDR_VAR 0 14
33330: PUSH
33331: LD_VAR 0 1
33335: PPUSH
33336: LD_VAR 0 2
33340: PPUSH
33341: LD_VAR 0 3
33345: PPUSH
33346: LD_VAR 0 4
33350: PPUSH
33351: LD_VAR 0 5
33355: PUSH
33356: LD_INT 1
33358: ARRAY
33359: PPUSH
33360: CALL_OW 248
33364: PPUSH
33365: LD_INT 0
33367: PPUSH
33368: CALL 35393 0 6
33372: ST_TO_ADDR
// if not hexes then
33373: LD_VAR 0 14
33377: NOT
33378: IFFALSE 33382
// exit ;
33380: GO 34140
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
33382: LD_ADDR_VAR 0 17
33386: PUSH
33387: LD_VAR 0 5
33391: PPUSH
33392: LD_INT 22
33394: PUSH
33395: LD_VAR 0 13
33399: PPUSH
33400: CALL_OW 255
33404: PUSH
33405: EMPTY
33406: LIST
33407: LIST
33408: PUSH
33409: LD_INT 2
33411: PUSH
33412: LD_INT 30
33414: PUSH
33415: LD_INT 0
33417: PUSH
33418: EMPTY
33419: LIST
33420: LIST
33421: PUSH
33422: LD_INT 30
33424: PUSH
33425: LD_INT 1
33427: PUSH
33428: EMPTY
33429: LIST
33430: LIST
33431: PUSH
33432: EMPTY
33433: LIST
33434: LIST
33435: LIST
33436: PUSH
33437: EMPTY
33438: LIST
33439: LIST
33440: PPUSH
33441: CALL_OW 72
33445: ST_TO_ADDR
// for i = 1 to hexes do
33446: LD_ADDR_VAR 0 9
33450: PUSH
33451: DOUBLE
33452: LD_INT 1
33454: DEC
33455: ST_TO_ADDR
33456: LD_VAR 0 14
33460: PUSH
33461: FOR_TO
33462: IFFALSE 34138
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
33464: LD_ADDR_VAR 0 13
33468: PUSH
33469: LD_VAR 0 14
33473: PUSH
33474: LD_VAR 0 9
33478: ARRAY
33479: PUSH
33480: LD_INT 1
33482: ARRAY
33483: PPUSH
33484: LD_VAR 0 14
33488: PUSH
33489: LD_VAR 0 9
33493: ARRAY
33494: PUSH
33495: LD_INT 2
33497: ARRAY
33498: PPUSH
33499: CALL_OW 428
33503: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
33504: LD_VAR 0 14
33508: PUSH
33509: LD_VAR 0 9
33513: ARRAY
33514: PUSH
33515: LD_INT 1
33517: ARRAY
33518: PPUSH
33519: LD_VAR 0 14
33523: PUSH
33524: LD_VAR 0 9
33528: ARRAY
33529: PUSH
33530: LD_INT 2
33532: ARRAY
33533: PPUSH
33534: CALL_OW 351
33538: PUSH
33539: LD_VAR 0 14
33543: PUSH
33544: LD_VAR 0 9
33548: ARRAY
33549: PUSH
33550: LD_INT 1
33552: ARRAY
33553: PPUSH
33554: LD_VAR 0 14
33558: PUSH
33559: LD_VAR 0 9
33563: ARRAY
33564: PUSH
33565: LD_INT 2
33567: ARRAY
33568: PPUSH
33569: CALL_OW 488
33573: NOT
33574: OR
33575: PUSH
33576: LD_VAR 0 13
33580: PPUSH
33581: CALL_OW 247
33585: PUSH
33586: LD_INT 3
33588: EQUAL
33589: OR
33590: IFFALSE 33596
// exit ;
33592: POP
33593: POP
33594: GO 34140
// if not tmp then
33596: LD_VAR 0 13
33600: NOT
33601: IFFALSE 33605
// continue ;
33603: GO 33461
// result := true ;
33605: LD_ADDR_VAR 0 8
33609: PUSH
33610: LD_INT 1
33612: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
33613: LD_VAR 0 6
33617: PUSH
33618: LD_VAR 0 13
33622: PPUSH
33623: CALL_OW 247
33627: PUSH
33628: LD_INT 2
33630: EQUAL
33631: AND
33632: PUSH
33633: LD_VAR 0 13
33637: PPUSH
33638: CALL_OW 263
33642: PUSH
33643: LD_INT 1
33645: EQUAL
33646: AND
33647: IFFALSE 33811
// begin if IsDrivenBy ( tmp ) then
33649: LD_VAR 0 13
33653: PPUSH
33654: CALL_OW 311
33658: IFFALSE 33662
// continue ;
33660: GO 33461
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
33662: LD_VAR 0 6
33666: PPUSH
33667: LD_INT 3
33669: PUSH
33670: LD_INT 60
33672: PUSH
33673: EMPTY
33674: LIST
33675: PUSH
33676: EMPTY
33677: LIST
33678: LIST
33679: PUSH
33680: LD_INT 3
33682: PUSH
33683: LD_INT 55
33685: PUSH
33686: EMPTY
33687: LIST
33688: PUSH
33689: EMPTY
33690: LIST
33691: LIST
33692: PUSH
33693: EMPTY
33694: LIST
33695: LIST
33696: PPUSH
33697: CALL_OW 72
33701: IFFALSE 33809
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
33703: LD_ADDR_VAR 0 18
33707: PUSH
33708: LD_VAR 0 6
33712: PPUSH
33713: LD_INT 3
33715: PUSH
33716: LD_INT 60
33718: PUSH
33719: EMPTY
33720: LIST
33721: PUSH
33722: EMPTY
33723: LIST
33724: LIST
33725: PUSH
33726: LD_INT 3
33728: PUSH
33729: LD_INT 55
33731: PUSH
33732: EMPTY
33733: LIST
33734: PUSH
33735: EMPTY
33736: LIST
33737: LIST
33738: PUSH
33739: EMPTY
33740: LIST
33741: LIST
33742: PPUSH
33743: CALL_OW 72
33747: PUSH
33748: LD_INT 1
33750: ARRAY
33751: ST_TO_ADDR
// if IsInUnit ( driver ) then
33752: LD_VAR 0 18
33756: PPUSH
33757: CALL_OW 310
33761: IFFALSE 33772
// ComExit ( driver ) ;
33763: LD_VAR 0 18
33767: PPUSH
33768: CALL 59194 0 1
// AddComEnterUnit ( driver , tmp ) ;
33772: LD_VAR 0 18
33776: PPUSH
33777: LD_VAR 0 13
33781: PPUSH
33782: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
33786: LD_VAR 0 18
33790: PPUSH
33791: LD_VAR 0 7
33795: PPUSH
33796: CALL_OW 173
// AddComExitVehicle ( driver ) ;
33800: LD_VAR 0 18
33804: PPUSH
33805: CALL_OW 181
// end ; continue ;
33809: GO 33461
// end ; if not cleaners or not tmp in cleaners then
33811: LD_VAR 0 6
33815: NOT
33816: PUSH
33817: LD_VAR 0 13
33821: PUSH
33822: LD_VAR 0 6
33826: IN
33827: NOT
33828: OR
33829: IFFALSE 34136
// begin if dep then
33831: LD_VAR 0 17
33835: IFFALSE 33971
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
33837: LD_ADDR_VAR 0 16
33841: PUSH
33842: LD_VAR 0 17
33846: PUSH
33847: LD_INT 1
33849: ARRAY
33850: PPUSH
33851: CALL_OW 250
33855: PPUSH
33856: LD_VAR 0 17
33860: PUSH
33861: LD_INT 1
33863: ARRAY
33864: PPUSH
33865: CALL_OW 254
33869: PPUSH
33870: LD_INT 5
33872: PPUSH
33873: CALL_OW 272
33877: PUSH
33878: LD_VAR 0 17
33882: PUSH
33883: LD_INT 1
33885: ARRAY
33886: PPUSH
33887: CALL_OW 251
33891: PPUSH
33892: LD_VAR 0 17
33896: PUSH
33897: LD_INT 1
33899: ARRAY
33900: PPUSH
33901: CALL_OW 254
33905: PPUSH
33906: LD_INT 5
33908: PPUSH
33909: CALL_OW 273
33913: PUSH
33914: EMPTY
33915: LIST
33916: LIST
33917: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
33918: LD_VAR 0 16
33922: PUSH
33923: LD_INT 1
33925: ARRAY
33926: PPUSH
33927: LD_VAR 0 16
33931: PUSH
33932: LD_INT 2
33934: ARRAY
33935: PPUSH
33936: CALL_OW 488
33940: IFFALSE 33971
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
33942: LD_VAR 0 13
33946: PPUSH
33947: LD_VAR 0 16
33951: PUSH
33952: LD_INT 1
33954: ARRAY
33955: PPUSH
33956: LD_VAR 0 16
33960: PUSH
33961: LD_INT 2
33963: ARRAY
33964: PPUSH
33965: CALL_OW 111
// continue ;
33969: GO 33461
// end ; end ; r := GetDir ( tmp ) ;
33971: LD_ADDR_VAR 0 15
33975: PUSH
33976: LD_VAR 0 13
33980: PPUSH
33981: CALL_OW 254
33985: ST_TO_ADDR
// if r = 5 then
33986: LD_VAR 0 15
33990: PUSH
33991: LD_INT 5
33993: EQUAL
33994: IFFALSE 34004
// r := 0 ;
33996: LD_ADDR_VAR 0 15
34000: PUSH
34001: LD_INT 0
34003: ST_TO_ADDR
// for j = r to 5 do
34004: LD_ADDR_VAR 0 10
34008: PUSH
34009: DOUBLE
34010: LD_VAR 0 15
34014: DEC
34015: ST_TO_ADDR
34016: LD_INT 5
34018: PUSH
34019: FOR_TO
34020: IFFALSE 34134
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
34022: LD_ADDR_VAR 0 11
34026: PUSH
34027: LD_VAR 0 13
34031: PPUSH
34032: CALL_OW 250
34036: PPUSH
34037: LD_VAR 0 10
34041: PPUSH
34042: LD_INT 2
34044: PPUSH
34045: CALL_OW 272
34049: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
34050: LD_ADDR_VAR 0 12
34054: PUSH
34055: LD_VAR 0 13
34059: PPUSH
34060: CALL_OW 251
34064: PPUSH
34065: LD_VAR 0 10
34069: PPUSH
34070: LD_INT 2
34072: PPUSH
34073: CALL_OW 273
34077: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
34078: LD_VAR 0 11
34082: PPUSH
34083: LD_VAR 0 12
34087: PPUSH
34088: CALL_OW 488
34092: PUSH
34093: LD_VAR 0 11
34097: PPUSH
34098: LD_VAR 0 12
34102: PPUSH
34103: CALL_OW 428
34107: NOT
34108: AND
34109: IFFALSE 34132
// begin ComMoveXY ( tmp , _x , _y ) ;
34111: LD_VAR 0 13
34115: PPUSH
34116: LD_VAR 0 11
34120: PPUSH
34121: LD_VAR 0 12
34125: PPUSH
34126: CALL_OW 111
// break ;
34130: GO 34134
// end ; end ;
34132: GO 34019
34134: POP
34135: POP
// end ; end ;
34136: GO 33461
34138: POP
34139: POP
// end ;
34140: LD_VAR 0 8
34144: RET
// export function BuildingTechInvented ( side , btype ) ; begin
34145: LD_INT 0
34147: PPUSH
// result := true ;
34148: LD_ADDR_VAR 0 3
34152: PUSH
34153: LD_INT 1
34155: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
34156: LD_VAR 0 2
34160: PUSH
34161: LD_INT 24
34163: DOUBLE
34164: EQUAL
34165: IFTRUE 34175
34167: LD_INT 33
34169: DOUBLE
34170: EQUAL
34171: IFTRUE 34175
34173: GO 34200
34175: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
34176: LD_ADDR_VAR 0 3
34180: PUSH
34181: LD_INT 32
34183: PPUSH
34184: LD_VAR 0 1
34188: PPUSH
34189: CALL_OW 321
34193: PUSH
34194: LD_INT 2
34196: EQUAL
34197: ST_TO_ADDR
34198: GO 34516
34200: LD_INT 20
34202: DOUBLE
34203: EQUAL
34204: IFTRUE 34208
34206: GO 34233
34208: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
34209: LD_ADDR_VAR 0 3
34213: PUSH
34214: LD_INT 6
34216: PPUSH
34217: LD_VAR 0 1
34221: PPUSH
34222: CALL_OW 321
34226: PUSH
34227: LD_INT 2
34229: EQUAL
34230: ST_TO_ADDR
34231: GO 34516
34233: LD_INT 22
34235: DOUBLE
34236: EQUAL
34237: IFTRUE 34247
34239: LD_INT 36
34241: DOUBLE
34242: EQUAL
34243: IFTRUE 34247
34245: GO 34272
34247: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
34248: LD_ADDR_VAR 0 3
34252: PUSH
34253: LD_INT 15
34255: PPUSH
34256: LD_VAR 0 1
34260: PPUSH
34261: CALL_OW 321
34265: PUSH
34266: LD_INT 2
34268: EQUAL
34269: ST_TO_ADDR
34270: GO 34516
34272: LD_INT 30
34274: DOUBLE
34275: EQUAL
34276: IFTRUE 34280
34278: GO 34305
34280: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
34281: LD_ADDR_VAR 0 3
34285: PUSH
34286: LD_INT 20
34288: PPUSH
34289: LD_VAR 0 1
34293: PPUSH
34294: CALL_OW 321
34298: PUSH
34299: LD_INT 2
34301: EQUAL
34302: ST_TO_ADDR
34303: GO 34516
34305: LD_INT 28
34307: DOUBLE
34308: EQUAL
34309: IFTRUE 34319
34311: LD_INT 21
34313: DOUBLE
34314: EQUAL
34315: IFTRUE 34319
34317: GO 34344
34319: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
34320: LD_ADDR_VAR 0 3
34324: PUSH
34325: LD_INT 21
34327: PPUSH
34328: LD_VAR 0 1
34332: PPUSH
34333: CALL_OW 321
34337: PUSH
34338: LD_INT 2
34340: EQUAL
34341: ST_TO_ADDR
34342: GO 34516
34344: LD_INT 16
34346: DOUBLE
34347: EQUAL
34348: IFTRUE 34352
34350: GO 34377
34352: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
34353: LD_ADDR_VAR 0 3
34357: PUSH
34358: LD_INT 84
34360: PPUSH
34361: LD_VAR 0 1
34365: PPUSH
34366: CALL_OW 321
34370: PUSH
34371: LD_INT 2
34373: EQUAL
34374: ST_TO_ADDR
34375: GO 34516
34377: LD_INT 19
34379: DOUBLE
34380: EQUAL
34381: IFTRUE 34391
34383: LD_INT 23
34385: DOUBLE
34386: EQUAL
34387: IFTRUE 34391
34389: GO 34416
34391: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
34392: LD_ADDR_VAR 0 3
34396: PUSH
34397: LD_INT 83
34399: PPUSH
34400: LD_VAR 0 1
34404: PPUSH
34405: CALL_OW 321
34409: PUSH
34410: LD_INT 2
34412: EQUAL
34413: ST_TO_ADDR
34414: GO 34516
34416: LD_INT 17
34418: DOUBLE
34419: EQUAL
34420: IFTRUE 34424
34422: GO 34449
34424: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
34425: LD_ADDR_VAR 0 3
34429: PUSH
34430: LD_INT 39
34432: PPUSH
34433: LD_VAR 0 1
34437: PPUSH
34438: CALL_OW 321
34442: PUSH
34443: LD_INT 2
34445: EQUAL
34446: ST_TO_ADDR
34447: GO 34516
34449: LD_INT 18
34451: DOUBLE
34452: EQUAL
34453: IFTRUE 34457
34455: GO 34482
34457: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
34458: LD_ADDR_VAR 0 3
34462: PUSH
34463: LD_INT 40
34465: PPUSH
34466: LD_VAR 0 1
34470: PPUSH
34471: CALL_OW 321
34475: PUSH
34476: LD_INT 2
34478: EQUAL
34479: ST_TO_ADDR
34480: GO 34516
34482: LD_INT 27
34484: DOUBLE
34485: EQUAL
34486: IFTRUE 34490
34488: GO 34515
34490: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
34491: LD_ADDR_VAR 0 3
34495: PUSH
34496: LD_INT 35
34498: PPUSH
34499: LD_VAR 0 1
34503: PPUSH
34504: CALL_OW 321
34508: PUSH
34509: LD_INT 2
34511: EQUAL
34512: ST_TO_ADDR
34513: GO 34516
34515: POP
// end ;
34516: LD_VAR 0 3
34520: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
34521: LD_INT 0
34523: PPUSH
34524: PPUSH
34525: PPUSH
34526: PPUSH
34527: PPUSH
34528: PPUSH
34529: PPUSH
34530: PPUSH
34531: PPUSH
34532: PPUSH
34533: PPUSH
// result := false ;
34534: LD_ADDR_VAR 0 6
34538: PUSH
34539: LD_INT 0
34541: ST_TO_ADDR
// if btype = b_depot then
34542: LD_VAR 0 2
34546: PUSH
34547: LD_INT 0
34549: EQUAL
34550: IFFALSE 34562
// begin result := true ;
34552: LD_ADDR_VAR 0 6
34556: PUSH
34557: LD_INT 1
34559: ST_TO_ADDR
// exit ;
34560: GO 35388
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
34562: LD_VAR 0 1
34566: NOT
34567: PUSH
34568: LD_VAR 0 1
34572: PPUSH
34573: CALL_OW 266
34577: PUSH
34578: LD_INT 0
34580: PUSH
34581: LD_INT 1
34583: PUSH
34584: EMPTY
34585: LIST
34586: LIST
34587: IN
34588: NOT
34589: OR
34590: PUSH
34591: LD_VAR 0 2
34595: NOT
34596: OR
34597: PUSH
34598: LD_VAR 0 5
34602: PUSH
34603: LD_INT 0
34605: PUSH
34606: LD_INT 1
34608: PUSH
34609: LD_INT 2
34611: PUSH
34612: LD_INT 3
34614: PUSH
34615: LD_INT 4
34617: PUSH
34618: LD_INT 5
34620: PUSH
34621: EMPTY
34622: LIST
34623: LIST
34624: LIST
34625: LIST
34626: LIST
34627: LIST
34628: IN
34629: NOT
34630: OR
34631: PUSH
34632: LD_VAR 0 3
34636: PPUSH
34637: LD_VAR 0 4
34641: PPUSH
34642: CALL_OW 488
34646: NOT
34647: OR
34648: IFFALSE 34652
// exit ;
34650: GO 35388
// side := GetSide ( depot ) ;
34652: LD_ADDR_VAR 0 9
34656: PUSH
34657: LD_VAR 0 1
34661: PPUSH
34662: CALL_OW 255
34666: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
34667: LD_VAR 0 9
34671: PPUSH
34672: LD_VAR 0 2
34676: PPUSH
34677: CALL 34145 0 2
34681: NOT
34682: IFFALSE 34686
// exit ;
34684: GO 35388
// pom := GetBase ( depot ) ;
34686: LD_ADDR_VAR 0 10
34690: PUSH
34691: LD_VAR 0 1
34695: PPUSH
34696: CALL_OW 274
34700: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
34701: LD_ADDR_VAR 0 11
34705: PUSH
34706: LD_VAR 0 2
34710: PPUSH
34711: LD_VAR 0 1
34715: PPUSH
34716: CALL_OW 248
34720: PPUSH
34721: CALL_OW 450
34725: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
34726: LD_VAR 0 10
34730: PPUSH
34731: LD_INT 1
34733: PPUSH
34734: CALL_OW 275
34738: PUSH
34739: LD_VAR 0 11
34743: PUSH
34744: LD_INT 1
34746: ARRAY
34747: GREATEREQUAL
34748: PUSH
34749: LD_VAR 0 10
34753: PPUSH
34754: LD_INT 2
34756: PPUSH
34757: CALL_OW 275
34761: PUSH
34762: LD_VAR 0 11
34766: PUSH
34767: LD_INT 2
34769: ARRAY
34770: GREATEREQUAL
34771: AND
34772: PUSH
34773: LD_VAR 0 10
34777: PPUSH
34778: LD_INT 3
34780: PPUSH
34781: CALL_OW 275
34785: PUSH
34786: LD_VAR 0 11
34790: PUSH
34791: LD_INT 3
34793: ARRAY
34794: GREATEREQUAL
34795: AND
34796: NOT
34797: IFFALSE 34801
// exit ;
34799: GO 35388
// if GetBType ( depot ) = b_depot then
34801: LD_VAR 0 1
34805: PPUSH
34806: CALL_OW 266
34810: PUSH
34811: LD_INT 0
34813: EQUAL
34814: IFFALSE 34826
// dist := 28 else
34816: LD_ADDR_VAR 0 14
34820: PUSH
34821: LD_INT 28
34823: ST_TO_ADDR
34824: GO 34834
// dist := 36 ;
34826: LD_ADDR_VAR 0 14
34830: PUSH
34831: LD_INT 36
34833: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
34834: LD_VAR 0 1
34838: PPUSH
34839: LD_VAR 0 3
34843: PPUSH
34844: LD_VAR 0 4
34848: PPUSH
34849: CALL_OW 297
34853: PUSH
34854: LD_VAR 0 14
34858: GREATER
34859: IFFALSE 34863
// exit ;
34861: GO 35388
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
34863: LD_ADDR_VAR 0 12
34867: PUSH
34868: LD_VAR 0 2
34872: PPUSH
34873: LD_VAR 0 3
34877: PPUSH
34878: LD_VAR 0 4
34882: PPUSH
34883: LD_VAR 0 5
34887: PPUSH
34888: LD_VAR 0 1
34892: PPUSH
34893: CALL_OW 248
34897: PPUSH
34898: LD_INT 0
34900: PPUSH
34901: CALL 35393 0 6
34905: ST_TO_ADDR
// if not hexes then
34906: LD_VAR 0 12
34910: NOT
34911: IFFALSE 34915
// exit ;
34913: GO 35388
// hex := GetHexInfo ( x , y ) ;
34915: LD_ADDR_VAR 0 15
34919: PUSH
34920: LD_VAR 0 3
34924: PPUSH
34925: LD_VAR 0 4
34929: PPUSH
34930: CALL_OW 546
34934: ST_TO_ADDR
// if hex [ 1 ] then
34935: LD_VAR 0 15
34939: PUSH
34940: LD_INT 1
34942: ARRAY
34943: IFFALSE 34947
// exit ;
34945: GO 35388
// height := hex [ 2 ] ;
34947: LD_ADDR_VAR 0 13
34951: PUSH
34952: LD_VAR 0 15
34956: PUSH
34957: LD_INT 2
34959: ARRAY
34960: ST_TO_ADDR
// for i = 1 to hexes do
34961: LD_ADDR_VAR 0 7
34965: PUSH
34966: DOUBLE
34967: LD_INT 1
34969: DEC
34970: ST_TO_ADDR
34971: LD_VAR 0 12
34975: PUSH
34976: FOR_TO
34977: IFFALSE 35307
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
34979: LD_VAR 0 12
34983: PUSH
34984: LD_VAR 0 7
34988: ARRAY
34989: PUSH
34990: LD_INT 1
34992: ARRAY
34993: PPUSH
34994: LD_VAR 0 12
34998: PUSH
34999: LD_VAR 0 7
35003: ARRAY
35004: PUSH
35005: LD_INT 2
35007: ARRAY
35008: PPUSH
35009: CALL_OW 488
35013: NOT
35014: PUSH
35015: LD_VAR 0 12
35019: PUSH
35020: LD_VAR 0 7
35024: ARRAY
35025: PUSH
35026: LD_INT 1
35028: ARRAY
35029: PPUSH
35030: LD_VAR 0 12
35034: PUSH
35035: LD_VAR 0 7
35039: ARRAY
35040: PUSH
35041: LD_INT 2
35043: ARRAY
35044: PPUSH
35045: CALL_OW 428
35049: PUSH
35050: LD_INT 0
35052: GREATER
35053: OR
35054: PUSH
35055: LD_VAR 0 12
35059: PUSH
35060: LD_VAR 0 7
35064: ARRAY
35065: PUSH
35066: LD_INT 1
35068: ARRAY
35069: PPUSH
35070: LD_VAR 0 12
35074: PUSH
35075: LD_VAR 0 7
35079: ARRAY
35080: PUSH
35081: LD_INT 2
35083: ARRAY
35084: PPUSH
35085: CALL_OW 351
35089: OR
35090: IFFALSE 35096
// exit ;
35092: POP
35093: POP
35094: GO 35388
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
35096: LD_ADDR_VAR 0 8
35100: PUSH
35101: LD_VAR 0 12
35105: PUSH
35106: LD_VAR 0 7
35110: ARRAY
35111: PUSH
35112: LD_INT 1
35114: ARRAY
35115: PPUSH
35116: LD_VAR 0 12
35120: PUSH
35121: LD_VAR 0 7
35125: ARRAY
35126: PUSH
35127: LD_INT 2
35129: ARRAY
35130: PPUSH
35131: CALL_OW 546
35135: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
35136: LD_VAR 0 8
35140: PUSH
35141: LD_INT 1
35143: ARRAY
35144: PUSH
35145: LD_VAR 0 8
35149: PUSH
35150: LD_INT 2
35152: ARRAY
35153: PUSH
35154: LD_VAR 0 13
35158: PUSH
35159: LD_INT 2
35161: PLUS
35162: GREATER
35163: OR
35164: PUSH
35165: LD_VAR 0 8
35169: PUSH
35170: LD_INT 2
35172: ARRAY
35173: PUSH
35174: LD_VAR 0 13
35178: PUSH
35179: LD_INT 2
35181: MINUS
35182: LESS
35183: OR
35184: PUSH
35185: LD_VAR 0 8
35189: PUSH
35190: LD_INT 3
35192: ARRAY
35193: PUSH
35194: LD_INT 0
35196: PUSH
35197: LD_INT 8
35199: PUSH
35200: LD_INT 9
35202: PUSH
35203: LD_INT 10
35205: PUSH
35206: LD_INT 11
35208: PUSH
35209: LD_INT 12
35211: PUSH
35212: LD_INT 13
35214: PUSH
35215: LD_INT 16
35217: PUSH
35218: LD_INT 17
35220: PUSH
35221: LD_INT 18
35223: PUSH
35224: LD_INT 19
35226: PUSH
35227: LD_INT 20
35229: PUSH
35230: LD_INT 21
35232: PUSH
35233: EMPTY
35234: LIST
35235: LIST
35236: LIST
35237: LIST
35238: LIST
35239: LIST
35240: LIST
35241: LIST
35242: LIST
35243: LIST
35244: LIST
35245: LIST
35246: LIST
35247: IN
35248: NOT
35249: OR
35250: PUSH
35251: LD_VAR 0 8
35255: PUSH
35256: LD_INT 5
35258: ARRAY
35259: NOT
35260: OR
35261: PUSH
35262: LD_VAR 0 8
35266: PUSH
35267: LD_INT 6
35269: ARRAY
35270: PUSH
35271: LD_INT 1
35273: PUSH
35274: LD_INT 2
35276: PUSH
35277: LD_INT 7
35279: PUSH
35280: LD_INT 9
35282: PUSH
35283: LD_INT 10
35285: PUSH
35286: LD_INT 11
35288: PUSH
35289: EMPTY
35290: LIST
35291: LIST
35292: LIST
35293: LIST
35294: LIST
35295: LIST
35296: IN
35297: NOT
35298: OR
35299: IFFALSE 35305
// exit ;
35301: POP
35302: POP
35303: GO 35388
// end ;
35305: GO 34976
35307: POP
35308: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
35309: LD_VAR 0 9
35313: PPUSH
35314: LD_VAR 0 3
35318: PPUSH
35319: LD_VAR 0 4
35323: PPUSH
35324: LD_INT 20
35326: PPUSH
35327: CALL 27311 0 4
35331: PUSH
35332: LD_INT 4
35334: ARRAY
35335: IFFALSE 35339
// exit ;
35337: GO 35388
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
35339: LD_VAR 0 2
35343: PUSH
35344: LD_INT 29
35346: PUSH
35347: LD_INT 30
35349: PUSH
35350: EMPTY
35351: LIST
35352: LIST
35353: IN
35354: PUSH
35355: LD_VAR 0 3
35359: PPUSH
35360: LD_VAR 0 4
35364: PPUSH
35365: LD_VAR 0 9
35369: PPUSH
35370: CALL_OW 440
35374: NOT
35375: AND
35376: IFFALSE 35380
// exit ;
35378: GO 35388
// result := true ;
35380: LD_ADDR_VAR 0 6
35384: PUSH
35385: LD_INT 1
35387: ST_TO_ADDR
// end ;
35388: LD_VAR 0 6
35392: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
35393: LD_INT 0
35395: PPUSH
35396: PPUSH
35397: PPUSH
35398: PPUSH
35399: PPUSH
35400: PPUSH
35401: PPUSH
35402: PPUSH
35403: PPUSH
35404: PPUSH
35405: PPUSH
35406: PPUSH
35407: PPUSH
35408: PPUSH
35409: PPUSH
35410: PPUSH
35411: PPUSH
35412: PPUSH
35413: PPUSH
35414: PPUSH
35415: PPUSH
35416: PPUSH
35417: PPUSH
35418: PPUSH
35419: PPUSH
35420: PPUSH
35421: PPUSH
35422: PPUSH
35423: PPUSH
35424: PPUSH
35425: PPUSH
35426: PPUSH
35427: PPUSH
35428: PPUSH
35429: PPUSH
35430: PPUSH
35431: PPUSH
35432: PPUSH
35433: PPUSH
35434: PPUSH
35435: PPUSH
35436: PPUSH
35437: PPUSH
35438: PPUSH
35439: PPUSH
35440: PPUSH
35441: PPUSH
35442: PPUSH
35443: PPUSH
35444: PPUSH
35445: PPUSH
35446: PPUSH
35447: PPUSH
35448: PPUSH
35449: PPUSH
35450: PPUSH
35451: PPUSH
35452: PPUSH
// result = [ ] ;
35453: LD_ADDR_VAR 0 7
35457: PUSH
35458: EMPTY
35459: ST_TO_ADDR
// temp_list = [ ] ;
35460: LD_ADDR_VAR 0 9
35464: PUSH
35465: EMPTY
35466: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
35467: LD_VAR 0 4
35471: PUSH
35472: LD_INT 0
35474: PUSH
35475: LD_INT 1
35477: PUSH
35478: LD_INT 2
35480: PUSH
35481: LD_INT 3
35483: PUSH
35484: LD_INT 4
35486: PUSH
35487: LD_INT 5
35489: PUSH
35490: EMPTY
35491: LIST
35492: LIST
35493: LIST
35494: LIST
35495: LIST
35496: LIST
35497: IN
35498: NOT
35499: PUSH
35500: LD_VAR 0 1
35504: PUSH
35505: LD_INT 0
35507: PUSH
35508: LD_INT 1
35510: PUSH
35511: EMPTY
35512: LIST
35513: LIST
35514: IN
35515: PUSH
35516: LD_VAR 0 5
35520: PUSH
35521: LD_INT 1
35523: PUSH
35524: LD_INT 2
35526: PUSH
35527: LD_INT 3
35529: PUSH
35530: EMPTY
35531: LIST
35532: LIST
35533: LIST
35534: IN
35535: NOT
35536: AND
35537: OR
35538: IFFALSE 35542
// exit ;
35540: GO 53933
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
35542: LD_VAR 0 1
35546: PUSH
35547: LD_INT 6
35549: PUSH
35550: LD_INT 7
35552: PUSH
35553: LD_INT 8
35555: PUSH
35556: LD_INT 13
35558: PUSH
35559: LD_INT 12
35561: PUSH
35562: LD_INT 15
35564: PUSH
35565: LD_INT 11
35567: PUSH
35568: LD_INT 14
35570: PUSH
35571: LD_INT 10
35573: PUSH
35574: EMPTY
35575: LIST
35576: LIST
35577: LIST
35578: LIST
35579: LIST
35580: LIST
35581: LIST
35582: LIST
35583: LIST
35584: IN
35585: IFFALSE 35595
// btype = b_lab ;
35587: LD_ADDR_VAR 0 1
35591: PUSH
35592: LD_INT 6
35594: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
35595: LD_VAR 0 6
35599: PUSH
35600: LD_INT 0
35602: PUSH
35603: LD_INT 1
35605: PUSH
35606: LD_INT 2
35608: PUSH
35609: EMPTY
35610: LIST
35611: LIST
35612: LIST
35613: IN
35614: NOT
35615: PUSH
35616: LD_VAR 0 1
35620: PUSH
35621: LD_INT 0
35623: PUSH
35624: LD_INT 1
35626: PUSH
35627: LD_INT 2
35629: PUSH
35630: LD_INT 3
35632: PUSH
35633: LD_INT 6
35635: PUSH
35636: LD_INT 36
35638: PUSH
35639: LD_INT 4
35641: PUSH
35642: LD_INT 5
35644: PUSH
35645: LD_INT 31
35647: PUSH
35648: LD_INT 32
35650: PUSH
35651: LD_INT 33
35653: PUSH
35654: EMPTY
35655: LIST
35656: LIST
35657: LIST
35658: LIST
35659: LIST
35660: LIST
35661: LIST
35662: LIST
35663: LIST
35664: LIST
35665: LIST
35666: IN
35667: NOT
35668: PUSH
35669: LD_VAR 0 6
35673: PUSH
35674: LD_INT 1
35676: EQUAL
35677: AND
35678: OR
35679: PUSH
35680: LD_VAR 0 1
35684: PUSH
35685: LD_INT 2
35687: PUSH
35688: LD_INT 3
35690: PUSH
35691: EMPTY
35692: LIST
35693: LIST
35694: IN
35695: NOT
35696: PUSH
35697: LD_VAR 0 6
35701: PUSH
35702: LD_INT 2
35704: EQUAL
35705: AND
35706: OR
35707: IFFALSE 35717
// mode = 0 ;
35709: LD_ADDR_VAR 0 6
35713: PUSH
35714: LD_INT 0
35716: ST_TO_ADDR
// case mode of 0 :
35717: LD_VAR 0 6
35721: PUSH
35722: LD_INT 0
35724: DOUBLE
35725: EQUAL
35726: IFTRUE 35730
35728: GO 47183
35730: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
35731: LD_ADDR_VAR 0 11
35735: PUSH
35736: LD_INT 0
35738: PUSH
35739: LD_INT 0
35741: PUSH
35742: EMPTY
35743: LIST
35744: LIST
35745: PUSH
35746: LD_INT 0
35748: PUSH
35749: LD_INT 1
35751: NEG
35752: PUSH
35753: EMPTY
35754: LIST
35755: LIST
35756: PUSH
35757: LD_INT 1
35759: PUSH
35760: LD_INT 0
35762: PUSH
35763: EMPTY
35764: LIST
35765: LIST
35766: PUSH
35767: LD_INT 1
35769: PUSH
35770: LD_INT 1
35772: PUSH
35773: EMPTY
35774: LIST
35775: LIST
35776: PUSH
35777: LD_INT 0
35779: PUSH
35780: LD_INT 1
35782: PUSH
35783: EMPTY
35784: LIST
35785: LIST
35786: PUSH
35787: LD_INT 1
35789: NEG
35790: PUSH
35791: LD_INT 0
35793: PUSH
35794: EMPTY
35795: LIST
35796: LIST
35797: PUSH
35798: LD_INT 1
35800: NEG
35801: PUSH
35802: LD_INT 1
35804: NEG
35805: PUSH
35806: EMPTY
35807: LIST
35808: LIST
35809: PUSH
35810: LD_INT 1
35812: NEG
35813: PUSH
35814: LD_INT 2
35816: NEG
35817: PUSH
35818: EMPTY
35819: LIST
35820: LIST
35821: PUSH
35822: LD_INT 0
35824: PUSH
35825: LD_INT 2
35827: NEG
35828: PUSH
35829: EMPTY
35830: LIST
35831: LIST
35832: PUSH
35833: LD_INT 1
35835: PUSH
35836: LD_INT 1
35838: NEG
35839: PUSH
35840: EMPTY
35841: LIST
35842: LIST
35843: PUSH
35844: LD_INT 1
35846: PUSH
35847: LD_INT 2
35849: PUSH
35850: EMPTY
35851: LIST
35852: LIST
35853: PUSH
35854: LD_INT 0
35856: PUSH
35857: LD_INT 2
35859: PUSH
35860: EMPTY
35861: LIST
35862: LIST
35863: PUSH
35864: LD_INT 1
35866: NEG
35867: PUSH
35868: LD_INT 1
35870: PUSH
35871: EMPTY
35872: LIST
35873: LIST
35874: PUSH
35875: LD_INT 1
35877: PUSH
35878: LD_INT 3
35880: PUSH
35881: EMPTY
35882: LIST
35883: LIST
35884: PUSH
35885: LD_INT 0
35887: PUSH
35888: LD_INT 3
35890: PUSH
35891: EMPTY
35892: LIST
35893: LIST
35894: PUSH
35895: LD_INT 1
35897: NEG
35898: PUSH
35899: LD_INT 2
35901: PUSH
35902: EMPTY
35903: LIST
35904: LIST
35905: PUSH
35906: EMPTY
35907: LIST
35908: LIST
35909: LIST
35910: LIST
35911: LIST
35912: LIST
35913: LIST
35914: LIST
35915: LIST
35916: LIST
35917: LIST
35918: LIST
35919: LIST
35920: LIST
35921: LIST
35922: LIST
35923: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
35924: LD_ADDR_VAR 0 12
35928: PUSH
35929: LD_INT 0
35931: PUSH
35932: LD_INT 0
35934: PUSH
35935: EMPTY
35936: LIST
35937: LIST
35938: PUSH
35939: LD_INT 0
35941: PUSH
35942: LD_INT 1
35944: NEG
35945: PUSH
35946: EMPTY
35947: LIST
35948: LIST
35949: PUSH
35950: LD_INT 1
35952: PUSH
35953: LD_INT 0
35955: PUSH
35956: EMPTY
35957: LIST
35958: LIST
35959: PUSH
35960: LD_INT 1
35962: PUSH
35963: LD_INT 1
35965: PUSH
35966: EMPTY
35967: LIST
35968: LIST
35969: PUSH
35970: LD_INT 0
35972: PUSH
35973: LD_INT 1
35975: PUSH
35976: EMPTY
35977: LIST
35978: LIST
35979: PUSH
35980: LD_INT 1
35982: NEG
35983: PUSH
35984: LD_INT 0
35986: PUSH
35987: EMPTY
35988: LIST
35989: LIST
35990: PUSH
35991: LD_INT 1
35993: NEG
35994: PUSH
35995: LD_INT 1
35997: NEG
35998: PUSH
35999: EMPTY
36000: LIST
36001: LIST
36002: PUSH
36003: LD_INT 1
36005: PUSH
36006: LD_INT 1
36008: NEG
36009: PUSH
36010: EMPTY
36011: LIST
36012: LIST
36013: PUSH
36014: LD_INT 2
36016: PUSH
36017: LD_INT 0
36019: PUSH
36020: EMPTY
36021: LIST
36022: LIST
36023: PUSH
36024: LD_INT 2
36026: PUSH
36027: LD_INT 1
36029: PUSH
36030: EMPTY
36031: LIST
36032: LIST
36033: PUSH
36034: LD_INT 1
36036: NEG
36037: PUSH
36038: LD_INT 1
36040: PUSH
36041: EMPTY
36042: LIST
36043: LIST
36044: PUSH
36045: LD_INT 2
36047: NEG
36048: PUSH
36049: LD_INT 0
36051: PUSH
36052: EMPTY
36053: LIST
36054: LIST
36055: PUSH
36056: LD_INT 2
36058: NEG
36059: PUSH
36060: LD_INT 1
36062: NEG
36063: PUSH
36064: EMPTY
36065: LIST
36066: LIST
36067: PUSH
36068: LD_INT 2
36070: NEG
36071: PUSH
36072: LD_INT 1
36074: PUSH
36075: EMPTY
36076: LIST
36077: LIST
36078: PUSH
36079: LD_INT 3
36081: NEG
36082: PUSH
36083: LD_INT 0
36085: PUSH
36086: EMPTY
36087: LIST
36088: LIST
36089: PUSH
36090: LD_INT 3
36092: NEG
36093: PUSH
36094: LD_INT 1
36096: NEG
36097: PUSH
36098: EMPTY
36099: LIST
36100: LIST
36101: PUSH
36102: EMPTY
36103: LIST
36104: LIST
36105: LIST
36106: LIST
36107: LIST
36108: LIST
36109: LIST
36110: LIST
36111: LIST
36112: LIST
36113: LIST
36114: LIST
36115: LIST
36116: LIST
36117: LIST
36118: LIST
36119: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
36120: LD_ADDR_VAR 0 13
36124: PUSH
36125: LD_INT 0
36127: PUSH
36128: LD_INT 0
36130: PUSH
36131: EMPTY
36132: LIST
36133: LIST
36134: PUSH
36135: LD_INT 0
36137: PUSH
36138: LD_INT 1
36140: NEG
36141: PUSH
36142: EMPTY
36143: LIST
36144: LIST
36145: PUSH
36146: LD_INT 1
36148: PUSH
36149: LD_INT 0
36151: PUSH
36152: EMPTY
36153: LIST
36154: LIST
36155: PUSH
36156: LD_INT 1
36158: PUSH
36159: LD_INT 1
36161: PUSH
36162: EMPTY
36163: LIST
36164: LIST
36165: PUSH
36166: LD_INT 0
36168: PUSH
36169: LD_INT 1
36171: PUSH
36172: EMPTY
36173: LIST
36174: LIST
36175: PUSH
36176: LD_INT 1
36178: NEG
36179: PUSH
36180: LD_INT 0
36182: PUSH
36183: EMPTY
36184: LIST
36185: LIST
36186: PUSH
36187: LD_INT 1
36189: NEG
36190: PUSH
36191: LD_INT 1
36193: NEG
36194: PUSH
36195: EMPTY
36196: LIST
36197: LIST
36198: PUSH
36199: LD_INT 1
36201: NEG
36202: PUSH
36203: LD_INT 2
36205: NEG
36206: PUSH
36207: EMPTY
36208: LIST
36209: LIST
36210: PUSH
36211: LD_INT 2
36213: PUSH
36214: LD_INT 1
36216: PUSH
36217: EMPTY
36218: LIST
36219: LIST
36220: PUSH
36221: LD_INT 2
36223: PUSH
36224: LD_INT 2
36226: PUSH
36227: EMPTY
36228: LIST
36229: LIST
36230: PUSH
36231: LD_INT 1
36233: PUSH
36234: LD_INT 2
36236: PUSH
36237: EMPTY
36238: LIST
36239: LIST
36240: PUSH
36241: LD_INT 2
36243: NEG
36244: PUSH
36245: LD_INT 1
36247: NEG
36248: PUSH
36249: EMPTY
36250: LIST
36251: LIST
36252: PUSH
36253: LD_INT 2
36255: NEG
36256: PUSH
36257: LD_INT 2
36259: NEG
36260: PUSH
36261: EMPTY
36262: LIST
36263: LIST
36264: PUSH
36265: LD_INT 2
36267: NEG
36268: PUSH
36269: LD_INT 3
36271: NEG
36272: PUSH
36273: EMPTY
36274: LIST
36275: LIST
36276: PUSH
36277: LD_INT 3
36279: NEG
36280: PUSH
36281: LD_INT 2
36283: NEG
36284: PUSH
36285: EMPTY
36286: LIST
36287: LIST
36288: PUSH
36289: LD_INT 3
36291: NEG
36292: PUSH
36293: LD_INT 3
36295: NEG
36296: PUSH
36297: EMPTY
36298: LIST
36299: LIST
36300: PUSH
36301: EMPTY
36302: LIST
36303: LIST
36304: LIST
36305: LIST
36306: LIST
36307: LIST
36308: LIST
36309: LIST
36310: LIST
36311: LIST
36312: LIST
36313: LIST
36314: LIST
36315: LIST
36316: LIST
36317: LIST
36318: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
36319: LD_ADDR_VAR 0 14
36323: PUSH
36324: LD_INT 0
36326: PUSH
36327: LD_INT 0
36329: PUSH
36330: EMPTY
36331: LIST
36332: LIST
36333: PUSH
36334: LD_INT 0
36336: PUSH
36337: LD_INT 1
36339: NEG
36340: PUSH
36341: EMPTY
36342: LIST
36343: LIST
36344: PUSH
36345: LD_INT 1
36347: PUSH
36348: LD_INT 0
36350: PUSH
36351: EMPTY
36352: LIST
36353: LIST
36354: PUSH
36355: LD_INT 1
36357: PUSH
36358: LD_INT 1
36360: PUSH
36361: EMPTY
36362: LIST
36363: LIST
36364: PUSH
36365: LD_INT 0
36367: PUSH
36368: LD_INT 1
36370: PUSH
36371: EMPTY
36372: LIST
36373: LIST
36374: PUSH
36375: LD_INT 1
36377: NEG
36378: PUSH
36379: LD_INT 0
36381: PUSH
36382: EMPTY
36383: LIST
36384: LIST
36385: PUSH
36386: LD_INT 1
36388: NEG
36389: PUSH
36390: LD_INT 1
36392: NEG
36393: PUSH
36394: EMPTY
36395: LIST
36396: LIST
36397: PUSH
36398: LD_INT 1
36400: NEG
36401: PUSH
36402: LD_INT 2
36404: NEG
36405: PUSH
36406: EMPTY
36407: LIST
36408: LIST
36409: PUSH
36410: LD_INT 0
36412: PUSH
36413: LD_INT 2
36415: NEG
36416: PUSH
36417: EMPTY
36418: LIST
36419: LIST
36420: PUSH
36421: LD_INT 1
36423: PUSH
36424: LD_INT 1
36426: NEG
36427: PUSH
36428: EMPTY
36429: LIST
36430: LIST
36431: PUSH
36432: LD_INT 1
36434: PUSH
36435: LD_INT 2
36437: PUSH
36438: EMPTY
36439: LIST
36440: LIST
36441: PUSH
36442: LD_INT 0
36444: PUSH
36445: LD_INT 2
36447: PUSH
36448: EMPTY
36449: LIST
36450: LIST
36451: PUSH
36452: LD_INT 1
36454: NEG
36455: PUSH
36456: LD_INT 1
36458: PUSH
36459: EMPTY
36460: LIST
36461: LIST
36462: PUSH
36463: LD_INT 1
36465: NEG
36466: PUSH
36467: LD_INT 3
36469: NEG
36470: PUSH
36471: EMPTY
36472: LIST
36473: LIST
36474: PUSH
36475: LD_INT 0
36477: PUSH
36478: LD_INT 3
36480: NEG
36481: PUSH
36482: EMPTY
36483: LIST
36484: LIST
36485: PUSH
36486: LD_INT 1
36488: PUSH
36489: LD_INT 2
36491: NEG
36492: PUSH
36493: EMPTY
36494: LIST
36495: LIST
36496: PUSH
36497: EMPTY
36498: LIST
36499: LIST
36500: LIST
36501: LIST
36502: LIST
36503: LIST
36504: LIST
36505: LIST
36506: LIST
36507: LIST
36508: LIST
36509: LIST
36510: LIST
36511: LIST
36512: LIST
36513: LIST
36514: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
36515: LD_ADDR_VAR 0 15
36519: PUSH
36520: LD_INT 0
36522: PUSH
36523: LD_INT 0
36525: PUSH
36526: EMPTY
36527: LIST
36528: LIST
36529: PUSH
36530: LD_INT 0
36532: PUSH
36533: LD_INT 1
36535: NEG
36536: PUSH
36537: EMPTY
36538: LIST
36539: LIST
36540: PUSH
36541: LD_INT 1
36543: PUSH
36544: LD_INT 0
36546: PUSH
36547: EMPTY
36548: LIST
36549: LIST
36550: PUSH
36551: LD_INT 1
36553: PUSH
36554: LD_INT 1
36556: PUSH
36557: EMPTY
36558: LIST
36559: LIST
36560: PUSH
36561: LD_INT 0
36563: PUSH
36564: LD_INT 1
36566: PUSH
36567: EMPTY
36568: LIST
36569: LIST
36570: PUSH
36571: LD_INT 1
36573: NEG
36574: PUSH
36575: LD_INT 0
36577: PUSH
36578: EMPTY
36579: LIST
36580: LIST
36581: PUSH
36582: LD_INT 1
36584: NEG
36585: PUSH
36586: LD_INT 1
36588: NEG
36589: PUSH
36590: EMPTY
36591: LIST
36592: LIST
36593: PUSH
36594: LD_INT 1
36596: PUSH
36597: LD_INT 1
36599: NEG
36600: PUSH
36601: EMPTY
36602: LIST
36603: LIST
36604: PUSH
36605: LD_INT 2
36607: PUSH
36608: LD_INT 0
36610: PUSH
36611: EMPTY
36612: LIST
36613: LIST
36614: PUSH
36615: LD_INT 2
36617: PUSH
36618: LD_INT 1
36620: PUSH
36621: EMPTY
36622: LIST
36623: LIST
36624: PUSH
36625: LD_INT 1
36627: NEG
36628: PUSH
36629: LD_INT 1
36631: PUSH
36632: EMPTY
36633: LIST
36634: LIST
36635: PUSH
36636: LD_INT 2
36638: NEG
36639: PUSH
36640: LD_INT 0
36642: PUSH
36643: EMPTY
36644: LIST
36645: LIST
36646: PUSH
36647: LD_INT 2
36649: NEG
36650: PUSH
36651: LD_INT 1
36653: NEG
36654: PUSH
36655: EMPTY
36656: LIST
36657: LIST
36658: PUSH
36659: LD_INT 2
36661: PUSH
36662: LD_INT 1
36664: NEG
36665: PUSH
36666: EMPTY
36667: LIST
36668: LIST
36669: PUSH
36670: LD_INT 3
36672: PUSH
36673: LD_INT 0
36675: PUSH
36676: EMPTY
36677: LIST
36678: LIST
36679: PUSH
36680: LD_INT 3
36682: PUSH
36683: LD_INT 1
36685: PUSH
36686: EMPTY
36687: LIST
36688: LIST
36689: PUSH
36690: EMPTY
36691: LIST
36692: LIST
36693: LIST
36694: LIST
36695: LIST
36696: LIST
36697: LIST
36698: LIST
36699: LIST
36700: LIST
36701: LIST
36702: LIST
36703: LIST
36704: LIST
36705: LIST
36706: LIST
36707: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
36708: LD_ADDR_VAR 0 16
36712: PUSH
36713: LD_INT 0
36715: PUSH
36716: LD_INT 0
36718: PUSH
36719: EMPTY
36720: LIST
36721: LIST
36722: PUSH
36723: LD_INT 0
36725: PUSH
36726: LD_INT 1
36728: NEG
36729: PUSH
36730: EMPTY
36731: LIST
36732: LIST
36733: PUSH
36734: LD_INT 1
36736: PUSH
36737: LD_INT 0
36739: PUSH
36740: EMPTY
36741: LIST
36742: LIST
36743: PUSH
36744: LD_INT 1
36746: PUSH
36747: LD_INT 1
36749: PUSH
36750: EMPTY
36751: LIST
36752: LIST
36753: PUSH
36754: LD_INT 0
36756: PUSH
36757: LD_INT 1
36759: PUSH
36760: EMPTY
36761: LIST
36762: LIST
36763: PUSH
36764: LD_INT 1
36766: NEG
36767: PUSH
36768: LD_INT 0
36770: PUSH
36771: EMPTY
36772: LIST
36773: LIST
36774: PUSH
36775: LD_INT 1
36777: NEG
36778: PUSH
36779: LD_INT 1
36781: NEG
36782: PUSH
36783: EMPTY
36784: LIST
36785: LIST
36786: PUSH
36787: LD_INT 1
36789: NEG
36790: PUSH
36791: LD_INT 2
36793: NEG
36794: PUSH
36795: EMPTY
36796: LIST
36797: LIST
36798: PUSH
36799: LD_INT 2
36801: PUSH
36802: LD_INT 1
36804: PUSH
36805: EMPTY
36806: LIST
36807: LIST
36808: PUSH
36809: LD_INT 2
36811: PUSH
36812: LD_INT 2
36814: PUSH
36815: EMPTY
36816: LIST
36817: LIST
36818: PUSH
36819: LD_INT 1
36821: PUSH
36822: LD_INT 2
36824: PUSH
36825: EMPTY
36826: LIST
36827: LIST
36828: PUSH
36829: LD_INT 2
36831: NEG
36832: PUSH
36833: LD_INT 1
36835: NEG
36836: PUSH
36837: EMPTY
36838: LIST
36839: LIST
36840: PUSH
36841: LD_INT 2
36843: NEG
36844: PUSH
36845: LD_INT 2
36847: NEG
36848: PUSH
36849: EMPTY
36850: LIST
36851: LIST
36852: PUSH
36853: LD_INT 3
36855: PUSH
36856: LD_INT 2
36858: PUSH
36859: EMPTY
36860: LIST
36861: LIST
36862: PUSH
36863: LD_INT 3
36865: PUSH
36866: LD_INT 3
36868: PUSH
36869: EMPTY
36870: LIST
36871: LIST
36872: PUSH
36873: LD_INT 2
36875: PUSH
36876: LD_INT 3
36878: PUSH
36879: EMPTY
36880: LIST
36881: LIST
36882: PUSH
36883: EMPTY
36884: LIST
36885: LIST
36886: LIST
36887: LIST
36888: LIST
36889: LIST
36890: LIST
36891: LIST
36892: LIST
36893: LIST
36894: LIST
36895: LIST
36896: LIST
36897: LIST
36898: LIST
36899: LIST
36900: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36901: LD_ADDR_VAR 0 17
36905: PUSH
36906: LD_INT 0
36908: PUSH
36909: LD_INT 0
36911: PUSH
36912: EMPTY
36913: LIST
36914: LIST
36915: PUSH
36916: LD_INT 0
36918: PUSH
36919: LD_INT 1
36921: NEG
36922: PUSH
36923: EMPTY
36924: LIST
36925: LIST
36926: PUSH
36927: LD_INT 1
36929: PUSH
36930: LD_INT 0
36932: PUSH
36933: EMPTY
36934: LIST
36935: LIST
36936: PUSH
36937: LD_INT 1
36939: PUSH
36940: LD_INT 1
36942: PUSH
36943: EMPTY
36944: LIST
36945: LIST
36946: PUSH
36947: LD_INT 0
36949: PUSH
36950: LD_INT 1
36952: PUSH
36953: EMPTY
36954: LIST
36955: LIST
36956: PUSH
36957: LD_INT 1
36959: NEG
36960: PUSH
36961: LD_INT 0
36963: PUSH
36964: EMPTY
36965: LIST
36966: LIST
36967: PUSH
36968: LD_INT 1
36970: NEG
36971: PUSH
36972: LD_INT 1
36974: NEG
36975: PUSH
36976: EMPTY
36977: LIST
36978: LIST
36979: PUSH
36980: LD_INT 1
36982: NEG
36983: PUSH
36984: LD_INT 2
36986: NEG
36987: PUSH
36988: EMPTY
36989: LIST
36990: LIST
36991: PUSH
36992: LD_INT 0
36994: PUSH
36995: LD_INT 2
36997: NEG
36998: PUSH
36999: EMPTY
37000: LIST
37001: LIST
37002: PUSH
37003: LD_INT 1
37005: PUSH
37006: LD_INT 1
37008: NEG
37009: PUSH
37010: EMPTY
37011: LIST
37012: LIST
37013: PUSH
37014: LD_INT 2
37016: PUSH
37017: LD_INT 0
37019: PUSH
37020: EMPTY
37021: LIST
37022: LIST
37023: PUSH
37024: LD_INT 2
37026: PUSH
37027: LD_INT 1
37029: PUSH
37030: EMPTY
37031: LIST
37032: LIST
37033: PUSH
37034: LD_INT 2
37036: PUSH
37037: LD_INT 2
37039: PUSH
37040: EMPTY
37041: LIST
37042: LIST
37043: PUSH
37044: LD_INT 1
37046: PUSH
37047: LD_INT 2
37049: PUSH
37050: EMPTY
37051: LIST
37052: LIST
37053: PUSH
37054: LD_INT 0
37056: PUSH
37057: LD_INT 2
37059: PUSH
37060: EMPTY
37061: LIST
37062: LIST
37063: PUSH
37064: LD_INT 1
37066: NEG
37067: PUSH
37068: LD_INT 1
37070: PUSH
37071: EMPTY
37072: LIST
37073: LIST
37074: PUSH
37075: LD_INT 2
37077: NEG
37078: PUSH
37079: LD_INT 0
37081: PUSH
37082: EMPTY
37083: LIST
37084: LIST
37085: PUSH
37086: LD_INT 2
37088: NEG
37089: PUSH
37090: LD_INT 1
37092: NEG
37093: PUSH
37094: EMPTY
37095: LIST
37096: LIST
37097: PUSH
37098: LD_INT 2
37100: NEG
37101: PUSH
37102: LD_INT 2
37104: NEG
37105: PUSH
37106: EMPTY
37107: LIST
37108: LIST
37109: PUSH
37110: EMPTY
37111: LIST
37112: LIST
37113: LIST
37114: LIST
37115: LIST
37116: LIST
37117: LIST
37118: LIST
37119: LIST
37120: LIST
37121: LIST
37122: LIST
37123: LIST
37124: LIST
37125: LIST
37126: LIST
37127: LIST
37128: LIST
37129: LIST
37130: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37131: LD_ADDR_VAR 0 18
37135: PUSH
37136: LD_INT 0
37138: PUSH
37139: LD_INT 0
37141: PUSH
37142: EMPTY
37143: LIST
37144: LIST
37145: PUSH
37146: LD_INT 0
37148: PUSH
37149: LD_INT 1
37151: NEG
37152: PUSH
37153: EMPTY
37154: LIST
37155: LIST
37156: PUSH
37157: LD_INT 1
37159: PUSH
37160: LD_INT 0
37162: PUSH
37163: EMPTY
37164: LIST
37165: LIST
37166: PUSH
37167: LD_INT 1
37169: PUSH
37170: LD_INT 1
37172: PUSH
37173: EMPTY
37174: LIST
37175: LIST
37176: PUSH
37177: LD_INT 0
37179: PUSH
37180: LD_INT 1
37182: PUSH
37183: EMPTY
37184: LIST
37185: LIST
37186: PUSH
37187: LD_INT 1
37189: NEG
37190: PUSH
37191: LD_INT 0
37193: PUSH
37194: EMPTY
37195: LIST
37196: LIST
37197: PUSH
37198: LD_INT 1
37200: NEG
37201: PUSH
37202: LD_INT 1
37204: NEG
37205: PUSH
37206: EMPTY
37207: LIST
37208: LIST
37209: PUSH
37210: LD_INT 1
37212: NEG
37213: PUSH
37214: LD_INT 2
37216: NEG
37217: PUSH
37218: EMPTY
37219: LIST
37220: LIST
37221: PUSH
37222: LD_INT 0
37224: PUSH
37225: LD_INT 2
37227: NEG
37228: PUSH
37229: EMPTY
37230: LIST
37231: LIST
37232: PUSH
37233: LD_INT 1
37235: PUSH
37236: LD_INT 1
37238: NEG
37239: PUSH
37240: EMPTY
37241: LIST
37242: LIST
37243: PUSH
37244: LD_INT 2
37246: PUSH
37247: LD_INT 0
37249: PUSH
37250: EMPTY
37251: LIST
37252: LIST
37253: PUSH
37254: LD_INT 2
37256: PUSH
37257: LD_INT 1
37259: PUSH
37260: EMPTY
37261: LIST
37262: LIST
37263: PUSH
37264: LD_INT 2
37266: PUSH
37267: LD_INT 2
37269: PUSH
37270: EMPTY
37271: LIST
37272: LIST
37273: PUSH
37274: LD_INT 1
37276: PUSH
37277: LD_INT 2
37279: PUSH
37280: EMPTY
37281: LIST
37282: LIST
37283: PUSH
37284: LD_INT 0
37286: PUSH
37287: LD_INT 2
37289: PUSH
37290: EMPTY
37291: LIST
37292: LIST
37293: PUSH
37294: LD_INT 1
37296: NEG
37297: PUSH
37298: LD_INT 1
37300: PUSH
37301: EMPTY
37302: LIST
37303: LIST
37304: PUSH
37305: LD_INT 2
37307: NEG
37308: PUSH
37309: LD_INT 0
37311: PUSH
37312: EMPTY
37313: LIST
37314: LIST
37315: PUSH
37316: LD_INT 2
37318: NEG
37319: PUSH
37320: LD_INT 1
37322: NEG
37323: PUSH
37324: EMPTY
37325: LIST
37326: LIST
37327: PUSH
37328: LD_INT 2
37330: NEG
37331: PUSH
37332: LD_INT 2
37334: NEG
37335: PUSH
37336: EMPTY
37337: LIST
37338: LIST
37339: PUSH
37340: EMPTY
37341: LIST
37342: LIST
37343: LIST
37344: LIST
37345: LIST
37346: LIST
37347: LIST
37348: LIST
37349: LIST
37350: LIST
37351: LIST
37352: LIST
37353: LIST
37354: LIST
37355: LIST
37356: LIST
37357: LIST
37358: LIST
37359: LIST
37360: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37361: LD_ADDR_VAR 0 19
37365: PUSH
37366: LD_INT 0
37368: PUSH
37369: LD_INT 0
37371: PUSH
37372: EMPTY
37373: LIST
37374: LIST
37375: PUSH
37376: LD_INT 0
37378: PUSH
37379: LD_INT 1
37381: NEG
37382: PUSH
37383: EMPTY
37384: LIST
37385: LIST
37386: PUSH
37387: LD_INT 1
37389: PUSH
37390: LD_INT 0
37392: PUSH
37393: EMPTY
37394: LIST
37395: LIST
37396: PUSH
37397: LD_INT 1
37399: PUSH
37400: LD_INT 1
37402: PUSH
37403: EMPTY
37404: LIST
37405: LIST
37406: PUSH
37407: LD_INT 0
37409: PUSH
37410: LD_INT 1
37412: PUSH
37413: EMPTY
37414: LIST
37415: LIST
37416: PUSH
37417: LD_INT 1
37419: NEG
37420: PUSH
37421: LD_INT 0
37423: PUSH
37424: EMPTY
37425: LIST
37426: LIST
37427: PUSH
37428: LD_INT 1
37430: NEG
37431: PUSH
37432: LD_INT 1
37434: NEG
37435: PUSH
37436: EMPTY
37437: LIST
37438: LIST
37439: PUSH
37440: LD_INT 1
37442: NEG
37443: PUSH
37444: LD_INT 2
37446: NEG
37447: PUSH
37448: EMPTY
37449: LIST
37450: LIST
37451: PUSH
37452: LD_INT 0
37454: PUSH
37455: LD_INT 2
37457: NEG
37458: PUSH
37459: EMPTY
37460: LIST
37461: LIST
37462: PUSH
37463: LD_INT 1
37465: PUSH
37466: LD_INT 1
37468: NEG
37469: PUSH
37470: EMPTY
37471: LIST
37472: LIST
37473: PUSH
37474: LD_INT 2
37476: PUSH
37477: LD_INT 0
37479: PUSH
37480: EMPTY
37481: LIST
37482: LIST
37483: PUSH
37484: LD_INT 2
37486: PUSH
37487: LD_INT 1
37489: PUSH
37490: EMPTY
37491: LIST
37492: LIST
37493: PUSH
37494: LD_INT 2
37496: PUSH
37497: LD_INT 2
37499: PUSH
37500: EMPTY
37501: LIST
37502: LIST
37503: PUSH
37504: LD_INT 1
37506: PUSH
37507: LD_INT 2
37509: PUSH
37510: EMPTY
37511: LIST
37512: LIST
37513: PUSH
37514: LD_INT 0
37516: PUSH
37517: LD_INT 2
37519: PUSH
37520: EMPTY
37521: LIST
37522: LIST
37523: PUSH
37524: LD_INT 1
37526: NEG
37527: PUSH
37528: LD_INT 1
37530: PUSH
37531: EMPTY
37532: LIST
37533: LIST
37534: PUSH
37535: LD_INT 2
37537: NEG
37538: PUSH
37539: LD_INT 0
37541: PUSH
37542: EMPTY
37543: LIST
37544: LIST
37545: PUSH
37546: LD_INT 2
37548: NEG
37549: PUSH
37550: LD_INT 1
37552: NEG
37553: PUSH
37554: EMPTY
37555: LIST
37556: LIST
37557: PUSH
37558: LD_INT 2
37560: NEG
37561: PUSH
37562: LD_INT 2
37564: NEG
37565: PUSH
37566: EMPTY
37567: LIST
37568: LIST
37569: PUSH
37570: EMPTY
37571: LIST
37572: LIST
37573: LIST
37574: LIST
37575: LIST
37576: LIST
37577: LIST
37578: LIST
37579: LIST
37580: LIST
37581: LIST
37582: LIST
37583: LIST
37584: LIST
37585: LIST
37586: LIST
37587: LIST
37588: LIST
37589: LIST
37590: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37591: LD_ADDR_VAR 0 20
37595: PUSH
37596: LD_INT 0
37598: PUSH
37599: LD_INT 0
37601: PUSH
37602: EMPTY
37603: LIST
37604: LIST
37605: PUSH
37606: LD_INT 0
37608: PUSH
37609: LD_INT 1
37611: NEG
37612: PUSH
37613: EMPTY
37614: LIST
37615: LIST
37616: PUSH
37617: LD_INT 1
37619: PUSH
37620: LD_INT 0
37622: PUSH
37623: EMPTY
37624: LIST
37625: LIST
37626: PUSH
37627: LD_INT 1
37629: PUSH
37630: LD_INT 1
37632: PUSH
37633: EMPTY
37634: LIST
37635: LIST
37636: PUSH
37637: LD_INT 0
37639: PUSH
37640: LD_INT 1
37642: PUSH
37643: EMPTY
37644: LIST
37645: LIST
37646: PUSH
37647: LD_INT 1
37649: NEG
37650: PUSH
37651: LD_INT 0
37653: PUSH
37654: EMPTY
37655: LIST
37656: LIST
37657: PUSH
37658: LD_INT 1
37660: NEG
37661: PUSH
37662: LD_INT 1
37664: NEG
37665: PUSH
37666: EMPTY
37667: LIST
37668: LIST
37669: PUSH
37670: LD_INT 1
37672: NEG
37673: PUSH
37674: LD_INT 2
37676: NEG
37677: PUSH
37678: EMPTY
37679: LIST
37680: LIST
37681: PUSH
37682: LD_INT 0
37684: PUSH
37685: LD_INT 2
37687: NEG
37688: PUSH
37689: EMPTY
37690: LIST
37691: LIST
37692: PUSH
37693: LD_INT 1
37695: PUSH
37696: LD_INT 1
37698: NEG
37699: PUSH
37700: EMPTY
37701: LIST
37702: LIST
37703: PUSH
37704: LD_INT 2
37706: PUSH
37707: LD_INT 0
37709: PUSH
37710: EMPTY
37711: LIST
37712: LIST
37713: PUSH
37714: LD_INT 2
37716: PUSH
37717: LD_INT 1
37719: PUSH
37720: EMPTY
37721: LIST
37722: LIST
37723: PUSH
37724: LD_INT 2
37726: PUSH
37727: LD_INT 2
37729: PUSH
37730: EMPTY
37731: LIST
37732: LIST
37733: PUSH
37734: LD_INT 1
37736: PUSH
37737: LD_INT 2
37739: PUSH
37740: EMPTY
37741: LIST
37742: LIST
37743: PUSH
37744: LD_INT 0
37746: PUSH
37747: LD_INT 2
37749: PUSH
37750: EMPTY
37751: LIST
37752: LIST
37753: PUSH
37754: LD_INT 1
37756: NEG
37757: PUSH
37758: LD_INT 1
37760: PUSH
37761: EMPTY
37762: LIST
37763: LIST
37764: PUSH
37765: LD_INT 2
37767: NEG
37768: PUSH
37769: LD_INT 0
37771: PUSH
37772: EMPTY
37773: LIST
37774: LIST
37775: PUSH
37776: LD_INT 2
37778: NEG
37779: PUSH
37780: LD_INT 1
37782: NEG
37783: PUSH
37784: EMPTY
37785: LIST
37786: LIST
37787: PUSH
37788: LD_INT 2
37790: NEG
37791: PUSH
37792: LD_INT 2
37794: NEG
37795: PUSH
37796: EMPTY
37797: LIST
37798: LIST
37799: PUSH
37800: EMPTY
37801: LIST
37802: LIST
37803: LIST
37804: LIST
37805: LIST
37806: LIST
37807: LIST
37808: LIST
37809: LIST
37810: LIST
37811: LIST
37812: LIST
37813: LIST
37814: LIST
37815: LIST
37816: LIST
37817: LIST
37818: LIST
37819: LIST
37820: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37821: LD_ADDR_VAR 0 21
37825: PUSH
37826: LD_INT 0
37828: PUSH
37829: LD_INT 0
37831: PUSH
37832: EMPTY
37833: LIST
37834: LIST
37835: PUSH
37836: LD_INT 0
37838: PUSH
37839: LD_INT 1
37841: NEG
37842: PUSH
37843: EMPTY
37844: LIST
37845: LIST
37846: PUSH
37847: LD_INT 1
37849: PUSH
37850: LD_INT 0
37852: PUSH
37853: EMPTY
37854: LIST
37855: LIST
37856: PUSH
37857: LD_INT 1
37859: PUSH
37860: LD_INT 1
37862: PUSH
37863: EMPTY
37864: LIST
37865: LIST
37866: PUSH
37867: LD_INT 0
37869: PUSH
37870: LD_INT 1
37872: PUSH
37873: EMPTY
37874: LIST
37875: LIST
37876: PUSH
37877: LD_INT 1
37879: NEG
37880: PUSH
37881: LD_INT 0
37883: PUSH
37884: EMPTY
37885: LIST
37886: LIST
37887: PUSH
37888: LD_INT 1
37890: NEG
37891: PUSH
37892: LD_INT 1
37894: NEG
37895: PUSH
37896: EMPTY
37897: LIST
37898: LIST
37899: PUSH
37900: LD_INT 1
37902: NEG
37903: PUSH
37904: LD_INT 2
37906: NEG
37907: PUSH
37908: EMPTY
37909: LIST
37910: LIST
37911: PUSH
37912: LD_INT 0
37914: PUSH
37915: LD_INT 2
37917: NEG
37918: PUSH
37919: EMPTY
37920: LIST
37921: LIST
37922: PUSH
37923: LD_INT 1
37925: PUSH
37926: LD_INT 1
37928: NEG
37929: PUSH
37930: EMPTY
37931: LIST
37932: LIST
37933: PUSH
37934: LD_INT 2
37936: PUSH
37937: LD_INT 0
37939: PUSH
37940: EMPTY
37941: LIST
37942: LIST
37943: PUSH
37944: LD_INT 2
37946: PUSH
37947: LD_INT 1
37949: PUSH
37950: EMPTY
37951: LIST
37952: LIST
37953: PUSH
37954: LD_INT 2
37956: PUSH
37957: LD_INT 2
37959: PUSH
37960: EMPTY
37961: LIST
37962: LIST
37963: PUSH
37964: LD_INT 1
37966: PUSH
37967: LD_INT 2
37969: PUSH
37970: EMPTY
37971: LIST
37972: LIST
37973: PUSH
37974: LD_INT 0
37976: PUSH
37977: LD_INT 2
37979: PUSH
37980: EMPTY
37981: LIST
37982: LIST
37983: PUSH
37984: LD_INT 1
37986: NEG
37987: PUSH
37988: LD_INT 1
37990: PUSH
37991: EMPTY
37992: LIST
37993: LIST
37994: PUSH
37995: LD_INT 2
37997: NEG
37998: PUSH
37999: LD_INT 0
38001: PUSH
38002: EMPTY
38003: LIST
38004: LIST
38005: PUSH
38006: LD_INT 2
38008: NEG
38009: PUSH
38010: LD_INT 1
38012: NEG
38013: PUSH
38014: EMPTY
38015: LIST
38016: LIST
38017: PUSH
38018: LD_INT 2
38020: NEG
38021: PUSH
38022: LD_INT 2
38024: NEG
38025: PUSH
38026: EMPTY
38027: LIST
38028: LIST
38029: PUSH
38030: EMPTY
38031: LIST
38032: LIST
38033: LIST
38034: LIST
38035: LIST
38036: LIST
38037: LIST
38038: LIST
38039: LIST
38040: LIST
38041: LIST
38042: LIST
38043: LIST
38044: LIST
38045: LIST
38046: LIST
38047: LIST
38048: LIST
38049: LIST
38050: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38051: LD_ADDR_VAR 0 22
38055: PUSH
38056: LD_INT 0
38058: PUSH
38059: LD_INT 0
38061: PUSH
38062: EMPTY
38063: LIST
38064: LIST
38065: PUSH
38066: LD_INT 0
38068: PUSH
38069: LD_INT 1
38071: NEG
38072: PUSH
38073: EMPTY
38074: LIST
38075: LIST
38076: PUSH
38077: LD_INT 1
38079: PUSH
38080: LD_INT 0
38082: PUSH
38083: EMPTY
38084: LIST
38085: LIST
38086: PUSH
38087: LD_INT 1
38089: PUSH
38090: LD_INT 1
38092: PUSH
38093: EMPTY
38094: LIST
38095: LIST
38096: PUSH
38097: LD_INT 0
38099: PUSH
38100: LD_INT 1
38102: PUSH
38103: EMPTY
38104: LIST
38105: LIST
38106: PUSH
38107: LD_INT 1
38109: NEG
38110: PUSH
38111: LD_INT 0
38113: PUSH
38114: EMPTY
38115: LIST
38116: LIST
38117: PUSH
38118: LD_INT 1
38120: NEG
38121: PUSH
38122: LD_INT 1
38124: NEG
38125: PUSH
38126: EMPTY
38127: LIST
38128: LIST
38129: PUSH
38130: LD_INT 1
38132: NEG
38133: PUSH
38134: LD_INT 2
38136: NEG
38137: PUSH
38138: EMPTY
38139: LIST
38140: LIST
38141: PUSH
38142: LD_INT 0
38144: PUSH
38145: LD_INT 2
38147: NEG
38148: PUSH
38149: EMPTY
38150: LIST
38151: LIST
38152: PUSH
38153: LD_INT 1
38155: PUSH
38156: LD_INT 1
38158: NEG
38159: PUSH
38160: EMPTY
38161: LIST
38162: LIST
38163: PUSH
38164: LD_INT 2
38166: PUSH
38167: LD_INT 0
38169: PUSH
38170: EMPTY
38171: LIST
38172: LIST
38173: PUSH
38174: LD_INT 2
38176: PUSH
38177: LD_INT 1
38179: PUSH
38180: EMPTY
38181: LIST
38182: LIST
38183: PUSH
38184: LD_INT 2
38186: PUSH
38187: LD_INT 2
38189: PUSH
38190: EMPTY
38191: LIST
38192: LIST
38193: PUSH
38194: LD_INT 1
38196: PUSH
38197: LD_INT 2
38199: PUSH
38200: EMPTY
38201: LIST
38202: LIST
38203: PUSH
38204: LD_INT 0
38206: PUSH
38207: LD_INT 2
38209: PUSH
38210: EMPTY
38211: LIST
38212: LIST
38213: PUSH
38214: LD_INT 1
38216: NEG
38217: PUSH
38218: LD_INT 1
38220: PUSH
38221: EMPTY
38222: LIST
38223: LIST
38224: PUSH
38225: LD_INT 2
38227: NEG
38228: PUSH
38229: LD_INT 0
38231: PUSH
38232: EMPTY
38233: LIST
38234: LIST
38235: PUSH
38236: LD_INT 2
38238: NEG
38239: PUSH
38240: LD_INT 1
38242: NEG
38243: PUSH
38244: EMPTY
38245: LIST
38246: LIST
38247: PUSH
38248: LD_INT 2
38250: NEG
38251: PUSH
38252: LD_INT 2
38254: NEG
38255: PUSH
38256: EMPTY
38257: LIST
38258: LIST
38259: PUSH
38260: EMPTY
38261: LIST
38262: LIST
38263: LIST
38264: LIST
38265: LIST
38266: LIST
38267: LIST
38268: LIST
38269: LIST
38270: LIST
38271: LIST
38272: LIST
38273: LIST
38274: LIST
38275: LIST
38276: LIST
38277: LIST
38278: LIST
38279: LIST
38280: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
38281: LD_ADDR_VAR 0 23
38285: PUSH
38286: LD_INT 0
38288: PUSH
38289: LD_INT 0
38291: PUSH
38292: EMPTY
38293: LIST
38294: LIST
38295: PUSH
38296: LD_INT 0
38298: PUSH
38299: LD_INT 1
38301: NEG
38302: PUSH
38303: EMPTY
38304: LIST
38305: LIST
38306: PUSH
38307: LD_INT 1
38309: PUSH
38310: LD_INT 0
38312: PUSH
38313: EMPTY
38314: LIST
38315: LIST
38316: PUSH
38317: LD_INT 1
38319: PUSH
38320: LD_INT 1
38322: PUSH
38323: EMPTY
38324: LIST
38325: LIST
38326: PUSH
38327: LD_INT 0
38329: PUSH
38330: LD_INT 1
38332: PUSH
38333: EMPTY
38334: LIST
38335: LIST
38336: PUSH
38337: LD_INT 1
38339: NEG
38340: PUSH
38341: LD_INT 0
38343: PUSH
38344: EMPTY
38345: LIST
38346: LIST
38347: PUSH
38348: LD_INT 1
38350: NEG
38351: PUSH
38352: LD_INT 1
38354: NEG
38355: PUSH
38356: EMPTY
38357: LIST
38358: LIST
38359: PUSH
38360: LD_INT 1
38362: NEG
38363: PUSH
38364: LD_INT 2
38366: NEG
38367: PUSH
38368: EMPTY
38369: LIST
38370: LIST
38371: PUSH
38372: LD_INT 0
38374: PUSH
38375: LD_INT 2
38377: NEG
38378: PUSH
38379: EMPTY
38380: LIST
38381: LIST
38382: PUSH
38383: LD_INT 1
38385: PUSH
38386: LD_INT 1
38388: NEG
38389: PUSH
38390: EMPTY
38391: LIST
38392: LIST
38393: PUSH
38394: LD_INT 2
38396: PUSH
38397: LD_INT 0
38399: PUSH
38400: EMPTY
38401: LIST
38402: LIST
38403: PUSH
38404: LD_INT 2
38406: PUSH
38407: LD_INT 1
38409: PUSH
38410: EMPTY
38411: LIST
38412: LIST
38413: PUSH
38414: LD_INT 2
38416: PUSH
38417: LD_INT 2
38419: PUSH
38420: EMPTY
38421: LIST
38422: LIST
38423: PUSH
38424: LD_INT 1
38426: PUSH
38427: LD_INT 2
38429: PUSH
38430: EMPTY
38431: LIST
38432: LIST
38433: PUSH
38434: LD_INT 0
38436: PUSH
38437: LD_INT 2
38439: PUSH
38440: EMPTY
38441: LIST
38442: LIST
38443: PUSH
38444: LD_INT 1
38446: NEG
38447: PUSH
38448: LD_INT 1
38450: PUSH
38451: EMPTY
38452: LIST
38453: LIST
38454: PUSH
38455: LD_INT 2
38457: NEG
38458: PUSH
38459: LD_INT 0
38461: PUSH
38462: EMPTY
38463: LIST
38464: LIST
38465: PUSH
38466: LD_INT 2
38468: NEG
38469: PUSH
38470: LD_INT 1
38472: NEG
38473: PUSH
38474: EMPTY
38475: LIST
38476: LIST
38477: PUSH
38478: LD_INT 2
38480: NEG
38481: PUSH
38482: LD_INT 2
38484: NEG
38485: PUSH
38486: EMPTY
38487: LIST
38488: LIST
38489: PUSH
38490: LD_INT 2
38492: NEG
38493: PUSH
38494: LD_INT 3
38496: NEG
38497: PUSH
38498: EMPTY
38499: LIST
38500: LIST
38501: PUSH
38502: LD_INT 1
38504: NEG
38505: PUSH
38506: LD_INT 3
38508: NEG
38509: PUSH
38510: EMPTY
38511: LIST
38512: LIST
38513: PUSH
38514: LD_INT 1
38516: PUSH
38517: LD_INT 2
38519: NEG
38520: PUSH
38521: EMPTY
38522: LIST
38523: LIST
38524: PUSH
38525: LD_INT 2
38527: PUSH
38528: LD_INT 1
38530: NEG
38531: PUSH
38532: EMPTY
38533: LIST
38534: LIST
38535: PUSH
38536: EMPTY
38537: LIST
38538: LIST
38539: LIST
38540: LIST
38541: LIST
38542: LIST
38543: LIST
38544: LIST
38545: LIST
38546: LIST
38547: LIST
38548: LIST
38549: LIST
38550: LIST
38551: LIST
38552: LIST
38553: LIST
38554: LIST
38555: LIST
38556: LIST
38557: LIST
38558: LIST
38559: LIST
38560: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
38561: LD_ADDR_VAR 0 24
38565: PUSH
38566: LD_INT 0
38568: PUSH
38569: LD_INT 0
38571: PUSH
38572: EMPTY
38573: LIST
38574: LIST
38575: PUSH
38576: LD_INT 0
38578: PUSH
38579: LD_INT 1
38581: NEG
38582: PUSH
38583: EMPTY
38584: LIST
38585: LIST
38586: PUSH
38587: LD_INT 1
38589: PUSH
38590: LD_INT 0
38592: PUSH
38593: EMPTY
38594: LIST
38595: LIST
38596: PUSH
38597: LD_INT 1
38599: PUSH
38600: LD_INT 1
38602: PUSH
38603: EMPTY
38604: LIST
38605: LIST
38606: PUSH
38607: LD_INT 0
38609: PUSH
38610: LD_INT 1
38612: PUSH
38613: EMPTY
38614: LIST
38615: LIST
38616: PUSH
38617: LD_INT 1
38619: NEG
38620: PUSH
38621: LD_INT 0
38623: PUSH
38624: EMPTY
38625: LIST
38626: LIST
38627: PUSH
38628: LD_INT 1
38630: NEG
38631: PUSH
38632: LD_INT 1
38634: NEG
38635: PUSH
38636: EMPTY
38637: LIST
38638: LIST
38639: PUSH
38640: LD_INT 1
38642: NEG
38643: PUSH
38644: LD_INT 2
38646: NEG
38647: PUSH
38648: EMPTY
38649: LIST
38650: LIST
38651: PUSH
38652: LD_INT 0
38654: PUSH
38655: LD_INT 2
38657: NEG
38658: PUSH
38659: EMPTY
38660: LIST
38661: LIST
38662: PUSH
38663: LD_INT 1
38665: PUSH
38666: LD_INT 1
38668: NEG
38669: PUSH
38670: EMPTY
38671: LIST
38672: LIST
38673: PUSH
38674: LD_INT 2
38676: PUSH
38677: LD_INT 0
38679: PUSH
38680: EMPTY
38681: LIST
38682: LIST
38683: PUSH
38684: LD_INT 2
38686: PUSH
38687: LD_INT 1
38689: PUSH
38690: EMPTY
38691: LIST
38692: LIST
38693: PUSH
38694: LD_INT 2
38696: PUSH
38697: LD_INT 2
38699: PUSH
38700: EMPTY
38701: LIST
38702: LIST
38703: PUSH
38704: LD_INT 1
38706: PUSH
38707: LD_INT 2
38709: PUSH
38710: EMPTY
38711: LIST
38712: LIST
38713: PUSH
38714: LD_INT 0
38716: PUSH
38717: LD_INT 2
38719: PUSH
38720: EMPTY
38721: LIST
38722: LIST
38723: PUSH
38724: LD_INT 1
38726: NEG
38727: PUSH
38728: LD_INT 1
38730: PUSH
38731: EMPTY
38732: LIST
38733: LIST
38734: PUSH
38735: LD_INT 2
38737: NEG
38738: PUSH
38739: LD_INT 0
38741: PUSH
38742: EMPTY
38743: LIST
38744: LIST
38745: PUSH
38746: LD_INT 2
38748: NEG
38749: PUSH
38750: LD_INT 1
38752: NEG
38753: PUSH
38754: EMPTY
38755: LIST
38756: LIST
38757: PUSH
38758: LD_INT 2
38760: NEG
38761: PUSH
38762: LD_INT 2
38764: NEG
38765: PUSH
38766: EMPTY
38767: LIST
38768: LIST
38769: PUSH
38770: LD_INT 1
38772: PUSH
38773: LD_INT 2
38775: NEG
38776: PUSH
38777: EMPTY
38778: LIST
38779: LIST
38780: PUSH
38781: LD_INT 2
38783: PUSH
38784: LD_INT 1
38786: NEG
38787: PUSH
38788: EMPTY
38789: LIST
38790: LIST
38791: PUSH
38792: LD_INT 3
38794: PUSH
38795: LD_INT 1
38797: PUSH
38798: EMPTY
38799: LIST
38800: LIST
38801: PUSH
38802: LD_INT 3
38804: PUSH
38805: LD_INT 2
38807: PUSH
38808: EMPTY
38809: LIST
38810: LIST
38811: PUSH
38812: EMPTY
38813: LIST
38814: LIST
38815: LIST
38816: LIST
38817: LIST
38818: LIST
38819: LIST
38820: LIST
38821: LIST
38822: LIST
38823: LIST
38824: LIST
38825: LIST
38826: LIST
38827: LIST
38828: LIST
38829: LIST
38830: LIST
38831: LIST
38832: LIST
38833: LIST
38834: LIST
38835: LIST
38836: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
38837: LD_ADDR_VAR 0 25
38841: PUSH
38842: LD_INT 0
38844: PUSH
38845: LD_INT 0
38847: PUSH
38848: EMPTY
38849: LIST
38850: LIST
38851: PUSH
38852: LD_INT 0
38854: PUSH
38855: LD_INT 1
38857: NEG
38858: PUSH
38859: EMPTY
38860: LIST
38861: LIST
38862: PUSH
38863: LD_INT 1
38865: PUSH
38866: LD_INT 0
38868: PUSH
38869: EMPTY
38870: LIST
38871: LIST
38872: PUSH
38873: LD_INT 1
38875: PUSH
38876: LD_INT 1
38878: PUSH
38879: EMPTY
38880: LIST
38881: LIST
38882: PUSH
38883: LD_INT 0
38885: PUSH
38886: LD_INT 1
38888: PUSH
38889: EMPTY
38890: LIST
38891: LIST
38892: PUSH
38893: LD_INT 1
38895: NEG
38896: PUSH
38897: LD_INT 0
38899: PUSH
38900: EMPTY
38901: LIST
38902: LIST
38903: PUSH
38904: LD_INT 1
38906: NEG
38907: PUSH
38908: LD_INT 1
38910: NEG
38911: PUSH
38912: EMPTY
38913: LIST
38914: LIST
38915: PUSH
38916: LD_INT 1
38918: NEG
38919: PUSH
38920: LD_INT 2
38922: NEG
38923: PUSH
38924: EMPTY
38925: LIST
38926: LIST
38927: PUSH
38928: LD_INT 0
38930: PUSH
38931: LD_INT 2
38933: NEG
38934: PUSH
38935: EMPTY
38936: LIST
38937: LIST
38938: PUSH
38939: LD_INT 1
38941: PUSH
38942: LD_INT 1
38944: NEG
38945: PUSH
38946: EMPTY
38947: LIST
38948: LIST
38949: PUSH
38950: LD_INT 2
38952: PUSH
38953: LD_INT 0
38955: PUSH
38956: EMPTY
38957: LIST
38958: LIST
38959: PUSH
38960: LD_INT 2
38962: PUSH
38963: LD_INT 1
38965: PUSH
38966: EMPTY
38967: LIST
38968: LIST
38969: PUSH
38970: LD_INT 2
38972: PUSH
38973: LD_INT 2
38975: PUSH
38976: EMPTY
38977: LIST
38978: LIST
38979: PUSH
38980: LD_INT 1
38982: PUSH
38983: LD_INT 2
38985: PUSH
38986: EMPTY
38987: LIST
38988: LIST
38989: PUSH
38990: LD_INT 0
38992: PUSH
38993: LD_INT 2
38995: PUSH
38996: EMPTY
38997: LIST
38998: LIST
38999: PUSH
39000: LD_INT 1
39002: NEG
39003: PUSH
39004: LD_INT 1
39006: PUSH
39007: EMPTY
39008: LIST
39009: LIST
39010: PUSH
39011: LD_INT 2
39013: NEG
39014: PUSH
39015: LD_INT 0
39017: PUSH
39018: EMPTY
39019: LIST
39020: LIST
39021: PUSH
39022: LD_INT 2
39024: NEG
39025: PUSH
39026: LD_INT 1
39028: NEG
39029: PUSH
39030: EMPTY
39031: LIST
39032: LIST
39033: PUSH
39034: LD_INT 2
39036: NEG
39037: PUSH
39038: LD_INT 2
39040: NEG
39041: PUSH
39042: EMPTY
39043: LIST
39044: LIST
39045: PUSH
39046: LD_INT 3
39048: PUSH
39049: LD_INT 1
39051: PUSH
39052: EMPTY
39053: LIST
39054: LIST
39055: PUSH
39056: LD_INT 3
39058: PUSH
39059: LD_INT 2
39061: PUSH
39062: EMPTY
39063: LIST
39064: LIST
39065: PUSH
39066: LD_INT 2
39068: PUSH
39069: LD_INT 3
39071: PUSH
39072: EMPTY
39073: LIST
39074: LIST
39075: PUSH
39076: LD_INT 1
39078: PUSH
39079: LD_INT 3
39081: PUSH
39082: EMPTY
39083: LIST
39084: LIST
39085: PUSH
39086: EMPTY
39087: LIST
39088: LIST
39089: LIST
39090: LIST
39091: LIST
39092: LIST
39093: LIST
39094: LIST
39095: LIST
39096: LIST
39097: LIST
39098: LIST
39099: LIST
39100: LIST
39101: LIST
39102: LIST
39103: LIST
39104: LIST
39105: LIST
39106: LIST
39107: LIST
39108: LIST
39109: LIST
39110: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
39111: LD_ADDR_VAR 0 26
39115: PUSH
39116: LD_INT 0
39118: PUSH
39119: LD_INT 0
39121: PUSH
39122: EMPTY
39123: LIST
39124: LIST
39125: PUSH
39126: LD_INT 0
39128: PUSH
39129: LD_INT 1
39131: NEG
39132: PUSH
39133: EMPTY
39134: LIST
39135: LIST
39136: PUSH
39137: LD_INT 1
39139: PUSH
39140: LD_INT 0
39142: PUSH
39143: EMPTY
39144: LIST
39145: LIST
39146: PUSH
39147: LD_INT 1
39149: PUSH
39150: LD_INT 1
39152: PUSH
39153: EMPTY
39154: LIST
39155: LIST
39156: PUSH
39157: LD_INT 0
39159: PUSH
39160: LD_INT 1
39162: PUSH
39163: EMPTY
39164: LIST
39165: LIST
39166: PUSH
39167: LD_INT 1
39169: NEG
39170: PUSH
39171: LD_INT 0
39173: PUSH
39174: EMPTY
39175: LIST
39176: LIST
39177: PUSH
39178: LD_INT 1
39180: NEG
39181: PUSH
39182: LD_INT 1
39184: NEG
39185: PUSH
39186: EMPTY
39187: LIST
39188: LIST
39189: PUSH
39190: LD_INT 1
39192: NEG
39193: PUSH
39194: LD_INT 2
39196: NEG
39197: PUSH
39198: EMPTY
39199: LIST
39200: LIST
39201: PUSH
39202: LD_INT 0
39204: PUSH
39205: LD_INT 2
39207: NEG
39208: PUSH
39209: EMPTY
39210: LIST
39211: LIST
39212: PUSH
39213: LD_INT 1
39215: PUSH
39216: LD_INT 1
39218: NEG
39219: PUSH
39220: EMPTY
39221: LIST
39222: LIST
39223: PUSH
39224: LD_INT 2
39226: PUSH
39227: LD_INT 0
39229: PUSH
39230: EMPTY
39231: LIST
39232: LIST
39233: PUSH
39234: LD_INT 2
39236: PUSH
39237: LD_INT 1
39239: PUSH
39240: EMPTY
39241: LIST
39242: LIST
39243: PUSH
39244: LD_INT 2
39246: PUSH
39247: LD_INT 2
39249: PUSH
39250: EMPTY
39251: LIST
39252: LIST
39253: PUSH
39254: LD_INT 1
39256: PUSH
39257: LD_INT 2
39259: PUSH
39260: EMPTY
39261: LIST
39262: LIST
39263: PUSH
39264: LD_INT 0
39266: PUSH
39267: LD_INT 2
39269: PUSH
39270: EMPTY
39271: LIST
39272: LIST
39273: PUSH
39274: LD_INT 1
39276: NEG
39277: PUSH
39278: LD_INT 1
39280: PUSH
39281: EMPTY
39282: LIST
39283: LIST
39284: PUSH
39285: LD_INT 2
39287: NEG
39288: PUSH
39289: LD_INT 0
39291: PUSH
39292: EMPTY
39293: LIST
39294: LIST
39295: PUSH
39296: LD_INT 2
39298: NEG
39299: PUSH
39300: LD_INT 1
39302: NEG
39303: PUSH
39304: EMPTY
39305: LIST
39306: LIST
39307: PUSH
39308: LD_INT 2
39310: NEG
39311: PUSH
39312: LD_INT 2
39314: NEG
39315: PUSH
39316: EMPTY
39317: LIST
39318: LIST
39319: PUSH
39320: LD_INT 2
39322: PUSH
39323: LD_INT 3
39325: PUSH
39326: EMPTY
39327: LIST
39328: LIST
39329: PUSH
39330: LD_INT 1
39332: PUSH
39333: LD_INT 3
39335: PUSH
39336: EMPTY
39337: LIST
39338: LIST
39339: PUSH
39340: LD_INT 1
39342: NEG
39343: PUSH
39344: LD_INT 2
39346: PUSH
39347: EMPTY
39348: LIST
39349: LIST
39350: PUSH
39351: LD_INT 2
39353: NEG
39354: PUSH
39355: LD_INT 1
39357: PUSH
39358: EMPTY
39359: LIST
39360: LIST
39361: PUSH
39362: EMPTY
39363: LIST
39364: LIST
39365: LIST
39366: LIST
39367: LIST
39368: LIST
39369: LIST
39370: LIST
39371: LIST
39372: LIST
39373: LIST
39374: LIST
39375: LIST
39376: LIST
39377: LIST
39378: LIST
39379: LIST
39380: LIST
39381: LIST
39382: LIST
39383: LIST
39384: LIST
39385: LIST
39386: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
39387: LD_ADDR_VAR 0 27
39391: PUSH
39392: LD_INT 0
39394: PUSH
39395: LD_INT 0
39397: PUSH
39398: EMPTY
39399: LIST
39400: LIST
39401: PUSH
39402: LD_INT 0
39404: PUSH
39405: LD_INT 1
39407: NEG
39408: PUSH
39409: EMPTY
39410: LIST
39411: LIST
39412: PUSH
39413: LD_INT 1
39415: PUSH
39416: LD_INT 0
39418: PUSH
39419: EMPTY
39420: LIST
39421: LIST
39422: PUSH
39423: LD_INT 1
39425: PUSH
39426: LD_INT 1
39428: PUSH
39429: EMPTY
39430: LIST
39431: LIST
39432: PUSH
39433: LD_INT 0
39435: PUSH
39436: LD_INT 1
39438: PUSH
39439: EMPTY
39440: LIST
39441: LIST
39442: PUSH
39443: LD_INT 1
39445: NEG
39446: PUSH
39447: LD_INT 0
39449: PUSH
39450: EMPTY
39451: LIST
39452: LIST
39453: PUSH
39454: LD_INT 1
39456: NEG
39457: PUSH
39458: LD_INT 1
39460: NEG
39461: PUSH
39462: EMPTY
39463: LIST
39464: LIST
39465: PUSH
39466: LD_INT 1
39468: NEG
39469: PUSH
39470: LD_INT 2
39472: NEG
39473: PUSH
39474: EMPTY
39475: LIST
39476: LIST
39477: PUSH
39478: LD_INT 0
39480: PUSH
39481: LD_INT 2
39483: NEG
39484: PUSH
39485: EMPTY
39486: LIST
39487: LIST
39488: PUSH
39489: LD_INT 1
39491: PUSH
39492: LD_INT 1
39494: NEG
39495: PUSH
39496: EMPTY
39497: LIST
39498: LIST
39499: PUSH
39500: LD_INT 2
39502: PUSH
39503: LD_INT 0
39505: PUSH
39506: EMPTY
39507: LIST
39508: LIST
39509: PUSH
39510: LD_INT 2
39512: PUSH
39513: LD_INT 1
39515: PUSH
39516: EMPTY
39517: LIST
39518: LIST
39519: PUSH
39520: LD_INT 2
39522: PUSH
39523: LD_INT 2
39525: PUSH
39526: EMPTY
39527: LIST
39528: LIST
39529: PUSH
39530: LD_INT 1
39532: PUSH
39533: LD_INT 2
39535: PUSH
39536: EMPTY
39537: LIST
39538: LIST
39539: PUSH
39540: LD_INT 0
39542: PUSH
39543: LD_INT 2
39545: PUSH
39546: EMPTY
39547: LIST
39548: LIST
39549: PUSH
39550: LD_INT 1
39552: NEG
39553: PUSH
39554: LD_INT 1
39556: PUSH
39557: EMPTY
39558: LIST
39559: LIST
39560: PUSH
39561: LD_INT 2
39563: NEG
39564: PUSH
39565: LD_INT 0
39567: PUSH
39568: EMPTY
39569: LIST
39570: LIST
39571: PUSH
39572: LD_INT 2
39574: NEG
39575: PUSH
39576: LD_INT 1
39578: NEG
39579: PUSH
39580: EMPTY
39581: LIST
39582: LIST
39583: PUSH
39584: LD_INT 2
39586: NEG
39587: PUSH
39588: LD_INT 2
39590: NEG
39591: PUSH
39592: EMPTY
39593: LIST
39594: LIST
39595: PUSH
39596: LD_INT 1
39598: NEG
39599: PUSH
39600: LD_INT 2
39602: PUSH
39603: EMPTY
39604: LIST
39605: LIST
39606: PUSH
39607: LD_INT 2
39609: NEG
39610: PUSH
39611: LD_INT 1
39613: PUSH
39614: EMPTY
39615: LIST
39616: LIST
39617: PUSH
39618: LD_INT 3
39620: NEG
39621: PUSH
39622: LD_INT 1
39624: NEG
39625: PUSH
39626: EMPTY
39627: LIST
39628: LIST
39629: PUSH
39630: LD_INT 3
39632: NEG
39633: PUSH
39634: LD_INT 2
39636: NEG
39637: PUSH
39638: EMPTY
39639: LIST
39640: LIST
39641: PUSH
39642: EMPTY
39643: LIST
39644: LIST
39645: LIST
39646: LIST
39647: LIST
39648: LIST
39649: LIST
39650: LIST
39651: LIST
39652: LIST
39653: LIST
39654: LIST
39655: LIST
39656: LIST
39657: LIST
39658: LIST
39659: LIST
39660: LIST
39661: LIST
39662: LIST
39663: LIST
39664: LIST
39665: LIST
39666: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
39667: LD_ADDR_VAR 0 28
39671: PUSH
39672: LD_INT 0
39674: PUSH
39675: LD_INT 0
39677: PUSH
39678: EMPTY
39679: LIST
39680: LIST
39681: PUSH
39682: LD_INT 0
39684: PUSH
39685: LD_INT 1
39687: NEG
39688: PUSH
39689: EMPTY
39690: LIST
39691: LIST
39692: PUSH
39693: LD_INT 1
39695: PUSH
39696: LD_INT 0
39698: PUSH
39699: EMPTY
39700: LIST
39701: LIST
39702: PUSH
39703: LD_INT 1
39705: PUSH
39706: LD_INT 1
39708: PUSH
39709: EMPTY
39710: LIST
39711: LIST
39712: PUSH
39713: LD_INT 0
39715: PUSH
39716: LD_INT 1
39718: PUSH
39719: EMPTY
39720: LIST
39721: LIST
39722: PUSH
39723: LD_INT 1
39725: NEG
39726: PUSH
39727: LD_INT 0
39729: PUSH
39730: EMPTY
39731: LIST
39732: LIST
39733: PUSH
39734: LD_INT 1
39736: NEG
39737: PUSH
39738: LD_INT 1
39740: NEG
39741: PUSH
39742: EMPTY
39743: LIST
39744: LIST
39745: PUSH
39746: LD_INT 1
39748: NEG
39749: PUSH
39750: LD_INT 2
39752: NEG
39753: PUSH
39754: EMPTY
39755: LIST
39756: LIST
39757: PUSH
39758: LD_INT 0
39760: PUSH
39761: LD_INT 2
39763: NEG
39764: PUSH
39765: EMPTY
39766: LIST
39767: LIST
39768: PUSH
39769: LD_INT 1
39771: PUSH
39772: LD_INT 1
39774: NEG
39775: PUSH
39776: EMPTY
39777: LIST
39778: LIST
39779: PUSH
39780: LD_INT 2
39782: PUSH
39783: LD_INT 0
39785: PUSH
39786: EMPTY
39787: LIST
39788: LIST
39789: PUSH
39790: LD_INT 2
39792: PUSH
39793: LD_INT 1
39795: PUSH
39796: EMPTY
39797: LIST
39798: LIST
39799: PUSH
39800: LD_INT 2
39802: PUSH
39803: LD_INT 2
39805: PUSH
39806: EMPTY
39807: LIST
39808: LIST
39809: PUSH
39810: LD_INT 1
39812: PUSH
39813: LD_INT 2
39815: PUSH
39816: EMPTY
39817: LIST
39818: LIST
39819: PUSH
39820: LD_INT 0
39822: PUSH
39823: LD_INT 2
39825: PUSH
39826: EMPTY
39827: LIST
39828: LIST
39829: PUSH
39830: LD_INT 1
39832: NEG
39833: PUSH
39834: LD_INT 1
39836: PUSH
39837: EMPTY
39838: LIST
39839: LIST
39840: PUSH
39841: LD_INT 2
39843: NEG
39844: PUSH
39845: LD_INT 0
39847: PUSH
39848: EMPTY
39849: LIST
39850: LIST
39851: PUSH
39852: LD_INT 2
39854: NEG
39855: PUSH
39856: LD_INT 1
39858: NEG
39859: PUSH
39860: EMPTY
39861: LIST
39862: LIST
39863: PUSH
39864: LD_INT 2
39866: NEG
39867: PUSH
39868: LD_INT 2
39870: NEG
39871: PUSH
39872: EMPTY
39873: LIST
39874: LIST
39875: PUSH
39876: LD_INT 2
39878: NEG
39879: PUSH
39880: LD_INT 3
39882: NEG
39883: PUSH
39884: EMPTY
39885: LIST
39886: LIST
39887: PUSH
39888: LD_INT 1
39890: NEG
39891: PUSH
39892: LD_INT 3
39894: NEG
39895: PUSH
39896: EMPTY
39897: LIST
39898: LIST
39899: PUSH
39900: LD_INT 3
39902: NEG
39903: PUSH
39904: LD_INT 1
39906: NEG
39907: PUSH
39908: EMPTY
39909: LIST
39910: LIST
39911: PUSH
39912: LD_INT 3
39914: NEG
39915: PUSH
39916: LD_INT 2
39918: NEG
39919: PUSH
39920: EMPTY
39921: LIST
39922: LIST
39923: PUSH
39924: EMPTY
39925: LIST
39926: LIST
39927: LIST
39928: LIST
39929: LIST
39930: LIST
39931: LIST
39932: LIST
39933: LIST
39934: LIST
39935: LIST
39936: LIST
39937: LIST
39938: LIST
39939: LIST
39940: LIST
39941: LIST
39942: LIST
39943: LIST
39944: LIST
39945: LIST
39946: LIST
39947: LIST
39948: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
39949: LD_ADDR_VAR 0 29
39953: PUSH
39954: LD_INT 0
39956: PUSH
39957: LD_INT 0
39959: PUSH
39960: EMPTY
39961: LIST
39962: LIST
39963: PUSH
39964: LD_INT 0
39966: PUSH
39967: LD_INT 1
39969: NEG
39970: PUSH
39971: EMPTY
39972: LIST
39973: LIST
39974: PUSH
39975: LD_INT 1
39977: PUSH
39978: LD_INT 0
39980: PUSH
39981: EMPTY
39982: LIST
39983: LIST
39984: PUSH
39985: LD_INT 1
39987: PUSH
39988: LD_INT 1
39990: PUSH
39991: EMPTY
39992: LIST
39993: LIST
39994: PUSH
39995: LD_INT 0
39997: PUSH
39998: LD_INT 1
40000: PUSH
40001: EMPTY
40002: LIST
40003: LIST
40004: PUSH
40005: LD_INT 1
40007: NEG
40008: PUSH
40009: LD_INT 0
40011: PUSH
40012: EMPTY
40013: LIST
40014: LIST
40015: PUSH
40016: LD_INT 1
40018: NEG
40019: PUSH
40020: LD_INT 1
40022: NEG
40023: PUSH
40024: EMPTY
40025: LIST
40026: LIST
40027: PUSH
40028: LD_INT 1
40030: NEG
40031: PUSH
40032: LD_INT 2
40034: NEG
40035: PUSH
40036: EMPTY
40037: LIST
40038: LIST
40039: PUSH
40040: LD_INT 0
40042: PUSH
40043: LD_INT 2
40045: NEG
40046: PUSH
40047: EMPTY
40048: LIST
40049: LIST
40050: PUSH
40051: LD_INT 1
40053: PUSH
40054: LD_INT 1
40056: NEG
40057: PUSH
40058: EMPTY
40059: LIST
40060: LIST
40061: PUSH
40062: LD_INT 2
40064: PUSH
40065: LD_INT 0
40067: PUSH
40068: EMPTY
40069: LIST
40070: LIST
40071: PUSH
40072: LD_INT 2
40074: PUSH
40075: LD_INT 1
40077: PUSH
40078: EMPTY
40079: LIST
40080: LIST
40081: PUSH
40082: LD_INT 1
40084: PUSH
40085: LD_INT 2
40087: PUSH
40088: EMPTY
40089: LIST
40090: LIST
40091: PUSH
40092: LD_INT 0
40094: PUSH
40095: LD_INT 2
40097: PUSH
40098: EMPTY
40099: LIST
40100: LIST
40101: PUSH
40102: LD_INT 1
40104: NEG
40105: PUSH
40106: LD_INT 1
40108: PUSH
40109: EMPTY
40110: LIST
40111: LIST
40112: PUSH
40113: LD_INT 2
40115: NEG
40116: PUSH
40117: LD_INT 1
40119: NEG
40120: PUSH
40121: EMPTY
40122: LIST
40123: LIST
40124: PUSH
40125: LD_INT 2
40127: NEG
40128: PUSH
40129: LD_INT 2
40131: NEG
40132: PUSH
40133: EMPTY
40134: LIST
40135: LIST
40136: PUSH
40137: LD_INT 2
40139: NEG
40140: PUSH
40141: LD_INT 3
40143: NEG
40144: PUSH
40145: EMPTY
40146: LIST
40147: LIST
40148: PUSH
40149: LD_INT 2
40151: PUSH
40152: LD_INT 1
40154: NEG
40155: PUSH
40156: EMPTY
40157: LIST
40158: LIST
40159: PUSH
40160: LD_INT 3
40162: PUSH
40163: LD_INT 1
40165: PUSH
40166: EMPTY
40167: LIST
40168: LIST
40169: PUSH
40170: LD_INT 1
40172: PUSH
40173: LD_INT 3
40175: PUSH
40176: EMPTY
40177: LIST
40178: LIST
40179: PUSH
40180: LD_INT 1
40182: NEG
40183: PUSH
40184: LD_INT 2
40186: PUSH
40187: EMPTY
40188: LIST
40189: LIST
40190: PUSH
40191: LD_INT 3
40193: NEG
40194: PUSH
40195: LD_INT 2
40197: NEG
40198: PUSH
40199: EMPTY
40200: LIST
40201: LIST
40202: PUSH
40203: EMPTY
40204: LIST
40205: LIST
40206: LIST
40207: LIST
40208: LIST
40209: LIST
40210: LIST
40211: LIST
40212: LIST
40213: LIST
40214: LIST
40215: LIST
40216: LIST
40217: LIST
40218: LIST
40219: LIST
40220: LIST
40221: LIST
40222: LIST
40223: LIST
40224: LIST
40225: LIST
40226: LIST
40227: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
40228: LD_ADDR_VAR 0 30
40232: PUSH
40233: LD_INT 0
40235: PUSH
40236: LD_INT 0
40238: PUSH
40239: EMPTY
40240: LIST
40241: LIST
40242: PUSH
40243: LD_INT 0
40245: PUSH
40246: LD_INT 1
40248: NEG
40249: PUSH
40250: EMPTY
40251: LIST
40252: LIST
40253: PUSH
40254: LD_INT 1
40256: PUSH
40257: LD_INT 0
40259: PUSH
40260: EMPTY
40261: LIST
40262: LIST
40263: PUSH
40264: LD_INT 1
40266: PUSH
40267: LD_INT 1
40269: PUSH
40270: EMPTY
40271: LIST
40272: LIST
40273: PUSH
40274: LD_INT 0
40276: PUSH
40277: LD_INT 1
40279: PUSH
40280: EMPTY
40281: LIST
40282: LIST
40283: PUSH
40284: LD_INT 1
40286: NEG
40287: PUSH
40288: LD_INT 0
40290: PUSH
40291: EMPTY
40292: LIST
40293: LIST
40294: PUSH
40295: LD_INT 1
40297: NEG
40298: PUSH
40299: LD_INT 1
40301: NEG
40302: PUSH
40303: EMPTY
40304: LIST
40305: LIST
40306: PUSH
40307: LD_INT 1
40309: NEG
40310: PUSH
40311: LD_INT 2
40313: NEG
40314: PUSH
40315: EMPTY
40316: LIST
40317: LIST
40318: PUSH
40319: LD_INT 0
40321: PUSH
40322: LD_INT 2
40324: NEG
40325: PUSH
40326: EMPTY
40327: LIST
40328: LIST
40329: PUSH
40330: LD_INT 1
40332: PUSH
40333: LD_INT 1
40335: NEG
40336: PUSH
40337: EMPTY
40338: LIST
40339: LIST
40340: PUSH
40341: LD_INT 2
40343: PUSH
40344: LD_INT 0
40346: PUSH
40347: EMPTY
40348: LIST
40349: LIST
40350: PUSH
40351: LD_INT 2
40353: PUSH
40354: LD_INT 1
40356: PUSH
40357: EMPTY
40358: LIST
40359: LIST
40360: PUSH
40361: LD_INT 2
40363: PUSH
40364: LD_INT 2
40366: PUSH
40367: EMPTY
40368: LIST
40369: LIST
40370: PUSH
40371: LD_INT 1
40373: PUSH
40374: LD_INT 2
40376: PUSH
40377: EMPTY
40378: LIST
40379: LIST
40380: PUSH
40381: LD_INT 1
40383: NEG
40384: PUSH
40385: LD_INT 1
40387: PUSH
40388: EMPTY
40389: LIST
40390: LIST
40391: PUSH
40392: LD_INT 2
40394: NEG
40395: PUSH
40396: LD_INT 0
40398: PUSH
40399: EMPTY
40400: LIST
40401: LIST
40402: PUSH
40403: LD_INT 2
40405: NEG
40406: PUSH
40407: LD_INT 1
40409: NEG
40410: PUSH
40411: EMPTY
40412: LIST
40413: LIST
40414: PUSH
40415: LD_INT 1
40417: NEG
40418: PUSH
40419: LD_INT 3
40421: NEG
40422: PUSH
40423: EMPTY
40424: LIST
40425: LIST
40426: PUSH
40427: LD_INT 1
40429: PUSH
40430: LD_INT 2
40432: NEG
40433: PUSH
40434: EMPTY
40435: LIST
40436: LIST
40437: PUSH
40438: LD_INT 3
40440: PUSH
40441: LD_INT 2
40443: PUSH
40444: EMPTY
40445: LIST
40446: LIST
40447: PUSH
40448: LD_INT 2
40450: PUSH
40451: LD_INT 3
40453: PUSH
40454: EMPTY
40455: LIST
40456: LIST
40457: PUSH
40458: LD_INT 2
40460: NEG
40461: PUSH
40462: LD_INT 1
40464: PUSH
40465: EMPTY
40466: LIST
40467: LIST
40468: PUSH
40469: LD_INT 3
40471: NEG
40472: PUSH
40473: LD_INT 1
40475: NEG
40476: PUSH
40477: EMPTY
40478: LIST
40479: LIST
40480: PUSH
40481: EMPTY
40482: LIST
40483: LIST
40484: LIST
40485: LIST
40486: LIST
40487: LIST
40488: LIST
40489: LIST
40490: LIST
40491: LIST
40492: LIST
40493: LIST
40494: LIST
40495: LIST
40496: LIST
40497: LIST
40498: LIST
40499: LIST
40500: LIST
40501: LIST
40502: LIST
40503: LIST
40504: LIST
40505: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
40506: LD_ADDR_VAR 0 31
40510: PUSH
40511: LD_INT 0
40513: PUSH
40514: LD_INT 0
40516: PUSH
40517: EMPTY
40518: LIST
40519: LIST
40520: PUSH
40521: LD_INT 0
40523: PUSH
40524: LD_INT 1
40526: NEG
40527: PUSH
40528: EMPTY
40529: LIST
40530: LIST
40531: PUSH
40532: LD_INT 1
40534: PUSH
40535: LD_INT 0
40537: PUSH
40538: EMPTY
40539: LIST
40540: LIST
40541: PUSH
40542: LD_INT 1
40544: PUSH
40545: LD_INT 1
40547: PUSH
40548: EMPTY
40549: LIST
40550: LIST
40551: PUSH
40552: LD_INT 0
40554: PUSH
40555: LD_INT 1
40557: PUSH
40558: EMPTY
40559: LIST
40560: LIST
40561: PUSH
40562: LD_INT 1
40564: NEG
40565: PUSH
40566: LD_INT 0
40568: PUSH
40569: EMPTY
40570: LIST
40571: LIST
40572: PUSH
40573: LD_INT 1
40575: NEG
40576: PUSH
40577: LD_INT 1
40579: NEG
40580: PUSH
40581: EMPTY
40582: LIST
40583: LIST
40584: PUSH
40585: LD_INT 1
40587: NEG
40588: PUSH
40589: LD_INT 2
40591: NEG
40592: PUSH
40593: EMPTY
40594: LIST
40595: LIST
40596: PUSH
40597: LD_INT 1
40599: PUSH
40600: LD_INT 1
40602: NEG
40603: PUSH
40604: EMPTY
40605: LIST
40606: LIST
40607: PUSH
40608: LD_INT 2
40610: PUSH
40611: LD_INT 0
40613: PUSH
40614: EMPTY
40615: LIST
40616: LIST
40617: PUSH
40618: LD_INT 2
40620: PUSH
40621: LD_INT 1
40623: PUSH
40624: EMPTY
40625: LIST
40626: LIST
40627: PUSH
40628: LD_INT 2
40630: PUSH
40631: LD_INT 2
40633: PUSH
40634: EMPTY
40635: LIST
40636: LIST
40637: PUSH
40638: LD_INT 1
40640: PUSH
40641: LD_INT 2
40643: PUSH
40644: EMPTY
40645: LIST
40646: LIST
40647: PUSH
40648: LD_INT 0
40650: PUSH
40651: LD_INT 2
40653: PUSH
40654: EMPTY
40655: LIST
40656: LIST
40657: PUSH
40658: LD_INT 1
40660: NEG
40661: PUSH
40662: LD_INT 1
40664: PUSH
40665: EMPTY
40666: LIST
40667: LIST
40668: PUSH
40669: LD_INT 2
40671: NEG
40672: PUSH
40673: LD_INT 1
40675: NEG
40676: PUSH
40677: EMPTY
40678: LIST
40679: LIST
40680: PUSH
40681: LD_INT 2
40683: NEG
40684: PUSH
40685: LD_INT 2
40687: NEG
40688: PUSH
40689: EMPTY
40690: LIST
40691: LIST
40692: PUSH
40693: LD_INT 2
40695: NEG
40696: PUSH
40697: LD_INT 3
40699: NEG
40700: PUSH
40701: EMPTY
40702: LIST
40703: LIST
40704: PUSH
40705: LD_INT 2
40707: PUSH
40708: LD_INT 1
40710: NEG
40711: PUSH
40712: EMPTY
40713: LIST
40714: LIST
40715: PUSH
40716: LD_INT 3
40718: PUSH
40719: LD_INT 1
40721: PUSH
40722: EMPTY
40723: LIST
40724: LIST
40725: PUSH
40726: LD_INT 1
40728: PUSH
40729: LD_INT 3
40731: PUSH
40732: EMPTY
40733: LIST
40734: LIST
40735: PUSH
40736: LD_INT 1
40738: NEG
40739: PUSH
40740: LD_INT 2
40742: PUSH
40743: EMPTY
40744: LIST
40745: LIST
40746: PUSH
40747: LD_INT 3
40749: NEG
40750: PUSH
40751: LD_INT 2
40753: NEG
40754: PUSH
40755: EMPTY
40756: LIST
40757: LIST
40758: PUSH
40759: EMPTY
40760: LIST
40761: LIST
40762: LIST
40763: LIST
40764: LIST
40765: LIST
40766: LIST
40767: LIST
40768: LIST
40769: LIST
40770: LIST
40771: LIST
40772: LIST
40773: LIST
40774: LIST
40775: LIST
40776: LIST
40777: LIST
40778: LIST
40779: LIST
40780: LIST
40781: LIST
40782: LIST
40783: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
40784: LD_ADDR_VAR 0 32
40788: PUSH
40789: LD_INT 0
40791: PUSH
40792: LD_INT 0
40794: PUSH
40795: EMPTY
40796: LIST
40797: LIST
40798: PUSH
40799: LD_INT 0
40801: PUSH
40802: LD_INT 1
40804: NEG
40805: PUSH
40806: EMPTY
40807: LIST
40808: LIST
40809: PUSH
40810: LD_INT 1
40812: PUSH
40813: LD_INT 0
40815: PUSH
40816: EMPTY
40817: LIST
40818: LIST
40819: PUSH
40820: LD_INT 1
40822: PUSH
40823: LD_INT 1
40825: PUSH
40826: EMPTY
40827: LIST
40828: LIST
40829: PUSH
40830: LD_INT 0
40832: PUSH
40833: LD_INT 1
40835: PUSH
40836: EMPTY
40837: LIST
40838: LIST
40839: PUSH
40840: LD_INT 1
40842: NEG
40843: PUSH
40844: LD_INT 0
40846: PUSH
40847: EMPTY
40848: LIST
40849: LIST
40850: PUSH
40851: LD_INT 1
40853: NEG
40854: PUSH
40855: LD_INT 1
40857: NEG
40858: PUSH
40859: EMPTY
40860: LIST
40861: LIST
40862: PUSH
40863: LD_INT 1
40865: NEG
40866: PUSH
40867: LD_INT 2
40869: NEG
40870: PUSH
40871: EMPTY
40872: LIST
40873: LIST
40874: PUSH
40875: LD_INT 0
40877: PUSH
40878: LD_INT 2
40880: NEG
40881: PUSH
40882: EMPTY
40883: LIST
40884: LIST
40885: PUSH
40886: LD_INT 1
40888: PUSH
40889: LD_INT 1
40891: NEG
40892: PUSH
40893: EMPTY
40894: LIST
40895: LIST
40896: PUSH
40897: LD_INT 2
40899: PUSH
40900: LD_INT 1
40902: PUSH
40903: EMPTY
40904: LIST
40905: LIST
40906: PUSH
40907: LD_INT 2
40909: PUSH
40910: LD_INT 2
40912: PUSH
40913: EMPTY
40914: LIST
40915: LIST
40916: PUSH
40917: LD_INT 1
40919: PUSH
40920: LD_INT 2
40922: PUSH
40923: EMPTY
40924: LIST
40925: LIST
40926: PUSH
40927: LD_INT 0
40929: PUSH
40930: LD_INT 2
40932: PUSH
40933: EMPTY
40934: LIST
40935: LIST
40936: PUSH
40937: LD_INT 1
40939: NEG
40940: PUSH
40941: LD_INT 1
40943: PUSH
40944: EMPTY
40945: LIST
40946: LIST
40947: PUSH
40948: LD_INT 2
40950: NEG
40951: PUSH
40952: LD_INT 0
40954: PUSH
40955: EMPTY
40956: LIST
40957: LIST
40958: PUSH
40959: LD_INT 2
40961: NEG
40962: PUSH
40963: LD_INT 1
40965: NEG
40966: PUSH
40967: EMPTY
40968: LIST
40969: LIST
40970: PUSH
40971: LD_INT 1
40973: NEG
40974: PUSH
40975: LD_INT 3
40977: NEG
40978: PUSH
40979: EMPTY
40980: LIST
40981: LIST
40982: PUSH
40983: LD_INT 1
40985: PUSH
40986: LD_INT 2
40988: NEG
40989: PUSH
40990: EMPTY
40991: LIST
40992: LIST
40993: PUSH
40994: LD_INT 3
40996: PUSH
40997: LD_INT 2
40999: PUSH
41000: EMPTY
41001: LIST
41002: LIST
41003: PUSH
41004: LD_INT 2
41006: PUSH
41007: LD_INT 3
41009: PUSH
41010: EMPTY
41011: LIST
41012: LIST
41013: PUSH
41014: LD_INT 2
41016: NEG
41017: PUSH
41018: LD_INT 1
41020: PUSH
41021: EMPTY
41022: LIST
41023: LIST
41024: PUSH
41025: LD_INT 3
41027: NEG
41028: PUSH
41029: LD_INT 1
41031: NEG
41032: PUSH
41033: EMPTY
41034: LIST
41035: LIST
41036: PUSH
41037: EMPTY
41038: LIST
41039: LIST
41040: LIST
41041: LIST
41042: LIST
41043: LIST
41044: LIST
41045: LIST
41046: LIST
41047: LIST
41048: LIST
41049: LIST
41050: LIST
41051: LIST
41052: LIST
41053: LIST
41054: LIST
41055: LIST
41056: LIST
41057: LIST
41058: LIST
41059: LIST
41060: LIST
41061: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
41062: LD_ADDR_VAR 0 33
41066: PUSH
41067: LD_INT 0
41069: PUSH
41070: LD_INT 0
41072: PUSH
41073: EMPTY
41074: LIST
41075: LIST
41076: PUSH
41077: LD_INT 0
41079: PUSH
41080: LD_INT 1
41082: NEG
41083: PUSH
41084: EMPTY
41085: LIST
41086: LIST
41087: PUSH
41088: LD_INT 1
41090: PUSH
41091: LD_INT 0
41093: PUSH
41094: EMPTY
41095: LIST
41096: LIST
41097: PUSH
41098: LD_INT 1
41100: PUSH
41101: LD_INT 1
41103: PUSH
41104: EMPTY
41105: LIST
41106: LIST
41107: PUSH
41108: LD_INT 0
41110: PUSH
41111: LD_INT 1
41113: PUSH
41114: EMPTY
41115: LIST
41116: LIST
41117: PUSH
41118: LD_INT 1
41120: NEG
41121: PUSH
41122: LD_INT 0
41124: PUSH
41125: EMPTY
41126: LIST
41127: LIST
41128: PUSH
41129: LD_INT 1
41131: NEG
41132: PUSH
41133: LD_INT 1
41135: NEG
41136: PUSH
41137: EMPTY
41138: LIST
41139: LIST
41140: PUSH
41141: LD_INT 1
41143: NEG
41144: PUSH
41145: LD_INT 2
41147: NEG
41148: PUSH
41149: EMPTY
41150: LIST
41151: LIST
41152: PUSH
41153: LD_INT 1
41155: PUSH
41156: LD_INT 1
41158: NEG
41159: PUSH
41160: EMPTY
41161: LIST
41162: LIST
41163: PUSH
41164: LD_INT 2
41166: PUSH
41167: LD_INT 0
41169: PUSH
41170: EMPTY
41171: LIST
41172: LIST
41173: PUSH
41174: LD_INT 2
41176: PUSH
41177: LD_INT 1
41179: PUSH
41180: EMPTY
41181: LIST
41182: LIST
41183: PUSH
41184: LD_INT 1
41186: PUSH
41187: LD_INT 2
41189: PUSH
41190: EMPTY
41191: LIST
41192: LIST
41193: PUSH
41194: LD_INT 0
41196: PUSH
41197: LD_INT 2
41199: PUSH
41200: EMPTY
41201: LIST
41202: LIST
41203: PUSH
41204: LD_INT 1
41206: NEG
41207: PUSH
41208: LD_INT 1
41210: PUSH
41211: EMPTY
41212: LIST
41213: LIST
41214: PUSH
41215: LD_INT 2
41217: NEG
41218: PUSH
41219: LD_INT 0
41221: PUSH
41222: EMPTY
41223: LIST
41224: LIST
41225: PUSH
41226: LD_INT 2
41228: NEG
41229: PUSH
41230: LD_INT 1
41232: NEG
41233: PUSH
41234: EMPTY
41235: LIST
41236: LIST
41237: PUSH
41238: LD_INT 2
41240: NEG
41241: PUSH
41242: LD_INT 2
41244: NEG
41245: PUSH
41246: EMPTY
41247: LIST
41248: LIST
41249: PUSH
41250: LD_INT 2
41252: NEG
41253: PUSH
41254: LD_INT 3
41256: NEG
41257: PUSH
41258: EMPTY
41259: LIST
41260: LIST
41261: PUSH
41262: LD_INT 2
41264: PUSH
41265: LD_INT 1
41267: NEG
41268: PUSH
41269: EMPTY
41270: LIST
41271: LIST
41272: PUSH
41273: LD_INT 3
41275: PUSH
41276: LD_INT 1
41278: PUSH
41279: EMPTY
41280: LIST
41281: LIST
41282: PUSH
41283: LD_INT 1
41285: PUSH
41286: LD_INT 3
41288: PUSH
41289: EMPTY
41290: LIST
41291: LIST
41292: PUSH
41293: LD_INT 1
41295: NEG
41296: PUSH
41297: LD_INT 2
41299: PUSH
41300: EMPTY
41301: LIST
41302: LIST
41303: PUSH
41304: LD_INT 3
41306: NEG
41307: PUSH
41308: LD_INT 2
41310: NEG
41311: PUSH
41312: EMPTY
41313: LIST
41314: LIST
41315: PUSH
41316: EMPTY
41317: LIST
41318: LIST
41319: LIST
41320: LIST
41321: LIST
41322: LIST
41323: LIST
41324: LIST
41325: LIST
41326: LIST
41327: LIST
41328: LIST
41329: LIST
41330: LIST
41331: LIST
41332: LIST
41333: LIST
41334: LIST
41335: LIST
41336: LIST
41337: LIST
41338: LIST
41339: LIST
41340: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
41341: LD_ADDR_VAR 0 34
41345: PUSH
41346: LD_INT 0
41348: PUSH
41349: LD_INT 0
41351: PUSH
41352: EMPTY
41353: LIST
41354: LIST
41355: PUSH
41356: LD_INT 0
41358: PUSH
41359: LD_INT 1
41361: NEG
41362: PUSH
41363: EMPTY
41364: LIST
41365: LIST
41366: PUSH
41367: LD_INT 1
41369: PUSH
41370: LD_INT 0
41372: PUSH
41373: EMPTY
41374: LIST
41375: LIST
41376: PUSH
41377: LD_INT 1
41379: PUSH
41380: LD_INT 1
41382: PUSH
41383: EMPTY
41384: LIST
41385: LIST
41386: PUSH
41387: LD_INT 0
41389: PUSH
41390: LD_INT 1
41392: PUSH
41393: EMPTY
41394: LIST
41395: LIST
41396: PUSH
41397: LD_INT 1
41399: NEG
41400: PUSH
41401: LD_INT 0
41403: PUSH
41404: EMPTY
41405: LIST
41406: LIST
41407: PUSH
41408: LD_INT 1
41410: NEG
41411: PUSH
41412: LD_INT 1
41414: NEG
41415: PUSH
41416: EMPTY
41417: LIST
41418: LIST
41419: PUSH
41420: LD_INT 1
41422: NEG
41423: PUSH
41424: LD_INT 2
41426: NEG
41427: PUSH
41428: EMPTY
41429: LIST
41430: LIST
41431: PUSH
41432: LD_INT 0
41434: PUSH
41435: LD_INT 2
41437: NEG
41438: PUSH
41439: EMPTY
41440: LIST
41441: LIST
41442: PUSH
41443: LD_INT 1
41445: PUSH
41446: LD_INT 1
41448: NEG
41449: PUSH
41450: EMPTY
41451: LIST
41452: LIST
41453: PUSH
41454: LD_INT 2
41456: PUSH
41457: LD_INT 1
41459: PUSH
41460: EMPTY
41461: LIST
41462: LIST
41463: PUSH
41464: LD_INT 2
41466: PUSH
41467: LD_INT 2
41469: PUSH
41470: EMPTY
41471: LIST
41472: LIST
41473: PUSH
41474: LD_INT 1
41476: PUSH
41477: LD_INT 2
41479: PUSH
41480: EMPTY
41481: LIST
41482: LIST
41483: PUSH
41484: LD_INT 1
41486: NEG
41487: PUSH
41488: LD_INT 1
41490: PUSH
41491: EMPTY
41492: LIST
41493: LIST
41494: PUSH
41495: LD_INT 2
41497: NEG
41498: PUSH
41499: LD_INT 0
41501: PUSH
41502: EMPTY
41503: LIST
41504: LIST
41505: PUSH
41506: LD_INT 2
41508: NEG
41509: PUSH
41510: LD_INT 1
41512: NEG
41513: PUSH
41514: EMPTY
41515: LIST
41516: LIST
41517: PUSH
41518: LD_INT 2
41520: NEG
41521: PUSH
41522: LD_INT 2
41524: NEG
41525: PUSH
41526: EMPTY
41527: LIST
41528: LIST
41529: PUSH
41530: LD_INT 1
41532: NEG
41533: PUSH
41534: LD_INT 3
41536: NEG
41537: PUSH
41538: EMPTY
41539: LIST
41540: LIST
41541: PUSH
41542: LD_INT 1
41544: PUSH
41545: LD_INT 2
41547: NEG
41548: PUSH
41549: EMPTY
41550: LIST
41551: LIST
41552: PUSH
41553: LD_INT 3
41555: PUSH
41556: LD_INT 2
41558: PUSH
41559: EMPTY
41560: LIST
41561: LIST
41562: PUSH
41563: LD_INT 2
41565: PUSH
41566: LD_INT 3
41568: PUSH
41569: EMPTY
41570: LIST
41571: LIST
41572: PUSH
41573: LD_INT 2
41575: NEG
41576: PUSH
41577: LD_INT 1
41579: PUSH
41580: EMPTY
41581: LIST
41582: LIST
41583: PUSH
41584: LD_INT 3
41586: NEG
41587: PUSH
41588: LD_INT 1
41590: NEG
41591: PUSH
41592: EMPTY
41593: LIST
41594: LIST
41595: PUSH
41596: EMPTY
41597: LIST
41598: LIST
41599: LIST
41600: LIST
41601: LIST
41602: LIST
41603: LIST
41604: LIST
41605: LIST
41606: LIST
41607: LIST
41608: LIST
41609: LIST
41610: LIST
41611: LIST
41612: LIST
41613: LIST
41614: LIST
41615: LIST
41616: LIST
41617: LIST
41618: LIST
41619: LIST
41620: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
41621: LD_ADDR_VAR 0 35
41625: PUSH
41626: LD_INT 0
41628: PUSH
41629: LD_INT 0
41631: PUSH
41632: EMPTY
41633: LIST
41634: LIST
41635: PUSH
41636: LD_INT 0
41638: PUSH
41639: LD_INT 1
41641: NEG
41642: PUSH
41643: EMPTY
41644: LIST
41645: LIST
41646: PUSH
41647: LD_INT 1
41649: PUSH
41650: LD_INT 0
41652: PUSH
41653: EMPTY
41654: LIST
41655: LIST
41656: PUSH
41657: LD_INT 1
41659: PUSH
41660: LD_INT 1
41662: PUSH
41663: EMPTY
41664: LIST
41665: LIST
41666: PUSH
41667: LD_INT 0
41669: PUSH
41670: LD_INT 1
41672: PUSH
41673: EMPTY
41674: LIST
41675: LIST
41676: PUSH
41677: LD_INT 1
41679: NEG
41680: PUSH
41681: LD_INT 0
41683: PUSH
41684: EMPTY
41685: LIST
41686: LIST
41687: PUSH
41688: LD_INT 1
41690: NEG
41691: PUSH
41692: LD_INT 1
41694: NEG
41695: PUSH
41696: EMPTY
41697: LIST
41698: LIST
41699: PUSH
41700: LD_INT 2
41702: PUSH
41703: LD_INT 1
41705: PUSH
41706: EMPTY
41707: LIST
41708: LIST
41709: PUSH
41710: LD_INT 2
41712: NEG
41713: PUSH
41714: LD_INT 1
41716: NEG
41717: PUSH
41718: EMPTY
41719: LIST
41720: LIST
41721: PUSH
41722: EMPTY
41723: LIST
41724: LIST
41725: LIST
41726: LIST
41727: LIST
41728: LIST
41729: LIST
41730: LIST
41731: LIST
41732: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
41733: LD_ADDR_VAR 0 36
41737: PUSH
41738: LD_INT 0
41740: PUSH
41741: LD_INT 0
41743: PUSH
41744: EMPTY
41745: LIST
41746: LIST
41747: PUSH
41748: LD_INT 0
41750: PUSH
41751: LD_INT 1
41753: NEG
41754: PUSH
41755: EMPTY
41756: LIST
41757: LIST
41758: PUSH
41759: LD_INT 1
41761: PUSH
41762: LD_INT 0
41764: PUSH
41765: EMPTY
41766: LIST
41767: LIST
41768: PUSH
41769: LD_INT 1
41771: PUSH
41772: LD_INT 1
41774: PUSH
41775: EMPTY
41776: LIST
41777: LIST
41778: PUSH
41779: LD_INT 0
41781: PUSH
41782: LD_INT 1
41784: PUSH
41785: EMPTY
41786: LIST
41787: LIST
41788: PUSH
41789: LD_INT 1
41791: NEG
41792: PUSH
41793: LD_INT 0
41795: PUSH
41796: EMPTY
41797: LIST
41798: LIST
41799: PUSH
41800: LD_INT 1
41802: NEG
41803: PUSH
41804: LD_INT 1
41806: NEG
41807: PUSH
41808: EMPTY
41809: LIST
41810: LIST
41811: PUSH
41812: LD_INT 1
41814: NEG
41815: PUSH
41816: LD_INT 2
41818: NEG
41819: PUSH
41820: EMPTY
41821: LIST
41822: LIST
41823: PUSH
41824: LD_INT 1
41826: PUSH
41827: LD_INT 2
41829: PUSH
41830: EMPTY
41831: LIST
41832: LIST
41833: PUSH
41834: EMPTY
41835: LIST
41836: LIST
41837: LIST
41838: LIST
41839: LIST
41840: LIST
41841: LIST
41842: LIST
41843: LIST
41844: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
41845: LD_ADDR_VAR 0 37
41849: PUSH
41850: LD_INT 0
41852: PUSH
41853: LD_INT 0
41855: PUSH
41856: EMPTY
41857: LIST
41858: LIST
41859: PUSH
41860: LD_INT 0
41862: PUSH
41863: LD_INT 1
41865: NEG
41866: PUSH
41867: EMPTY
41868: LIST
41869: LIST
41870: PUSH
41871: LD_INT 1
41873: PUSH
41874: LD_INT 0
41876: PUSH
41877: EMPTY
41878: LIST
41879: LIST
41880: PUSH
41881: LD_INT 1
41883: PUSH
41884: LD_INT 1
41886: PUSH
41887: EMPTY
41888: LIST
41889: LIST
41890: PUSH
41891: LD_INT 0
41893: PUSH
41894: LD_INT 1
41896: PUSH
41897: EMPTY
41898: LIST
41899: LIST
41900: PUSH
41901: LD_INT 1
41903: NEG
41904: PUSH
41905: LD_INT 0
41907: PUSH
41908: EMPTY
41909: LIST
41910: LIST
41911: PUSH
41912: LD_INT 1
41914: NEG
41915: PUSH
41916: LD_INT 1
41918: NEG
41919: PUSH
41920: EMPTY
41921: LIST
41922: LIST
41923: PUSH
41924: LD_INT 1
41926: PUSH
41927: LD_INT 1
41929: NEG
41930: PUSH
41931: EMPTY
41932: LIST
41933: LIST
41934: PUSH
41935: LD_INT 1
41937: NEG
41938: PUSH
41939: LD_INT 1
41941: PUSH
41942: EMPTY
41943: LIST
41944: LIST
41945: PUSH
41946: EMPTY
41947: LIST
41948: LIST
41949: LIST
41950: LIST
41951: LIST
41952: LIST
41953: LIST
41954: LIST
41955: LIST
41956: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
41957: LD_ADDR_VAR 0 38
41961: PUSH
41962: LD_INT 0
41964: PUSH
41965: LD_INT 0
41967: PUSH
41968: EMPTY
41969: LIST
41970: LIST
41971: PUSH
41972: LD_INT 0
41974: PUSH
41975: LD_INT 1
41977: NEG
41978: PUSH
41979: EMPTY
41980: LIST
41981: LIST
41982: PUSH
41983: LD_INT 1
41985: PUSH
41986: LD_INT 0
41988: PUSH
41989: EMPTY
41990: LIST
41991: LIST
41992: PUSH
41993: LD_INT 1
41995: PUSH
41996: LD_INT 1
41998: PUSH
41999: EMPTY
42000: LIST
42001: LIST
42002: PUSH
42003: LD_INT 0
42005: PUSH
42006: LD_INT 1
42008: PUSH
42009: EMPTY
42010: LIST
42011: LIST
42012: PUSH
42013: LD_INT 1
42015: NEG
42016: PUSH
42017: LD_INT 0
42019: PUSH
42020: EMPTY
42021: LIST
42022: LIST
42023: PUSH
42024: LD_INT 1
42026: NEG
42027: PUSH
42028: LD_INT 1
42030: NEG
42031: PUSH
42032: EMPTY
42033: LIST
42034: LIST
42035: PUSH
42036: LD_INT 2
42038: PUSH
42039: LD_INT 1
42041: PUSH
42042: EMPTY
42043: LIST
42044: LIST
42045: PUSH
42046: LD_INT 2
42048: NEG
42049: PUSH
42050: LD_INT 1
42052: NEG
42053: PUSH
42054: EMPTY
42055: LIST
42056: LIST
42057: PUSH
42058: EMPTY
42059: LIST
42060: LIST
42061: LIST
42062: LIST
42063: LIST
42064: LIST
42065: LIST
42066: LIST
42067: LIST
42068: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
42069: LD_ADDR_VAR 0 39
42073: PUSH
42074: LD_INT 0
42076: PUSH
42077: LD_INT 0
42079: PUSH
42080: EMPTY
42081: LIST
42082: LIST
42083: PUSH
42084: LD_INT 0
42086: PUSH
42087: LD_INT 1
42089: NEG
42090: PUSH
42091: EMPTY
42092: LIST
42093: LIST
42094: PUSH
42095: LD_INT 1
42097: PUSH
42098: LD_INT 0
42100: PUSH
42101: EMPTY
42102: LIST
42103: LIST
42104: PUSH
42105: LD_INT 1
42107: PUSH
42108: LD_INT 1
42110: PUSH
42111: EMPTY
42112: LIST
42113: LIST
42114: PUSH
42115: LD_INT 0
42117: PUSH
42118: LD_INT 1
42120: PUSH
42121: EMPTY
42122: LIST
42123: LIST
42124: PUSH
42125: LD_INT 1
42127: NEG
42128: PUSH
42129: LD_INT 0
42131: PUSH
42132: EMPTY
42133: LIST
42134: LIST
42135: PUSH
42136: LD_INT 1
42138: NEG
42139: PUSH
42140: LD_INT 1
42142: NEG
42143: PUSH
42144: EMPTY
42145: LIST
42146: LIST
42147: PUSH
42148: LD_INT 1
42150: NEG
42151: PUSH
42152: LD_INT 2
42154: NEG
42155: PUSH
42156: EMPTY
42157: LIST
42158: LIST
42159: PUSH
42160: LD_INT 1
42162: PUSH
42163: LD_INT 2
42165: PUSH
42166: EMPTY
42167: LIST
42168: LIST
42169: PUSH
42170: EMPTY
42171: LIST
42172: LIST
42173: LIST
42174: LIST
42175: LIST
42176: LIST
42177: LIST
42178: LIST
42179: LIST
42180: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
42181: LD_ADDR_VAR 0 40
42185: PUSH
42186: LD_INT 0
42188: PUSH
42189: LD_INT 0
42191: PUSH
42192: EMPTY
42193: LIST
42194: LIST
42195: PUSH
42196: LD_INT 0
42198: PUSH
42199: LD_INT 1
42201: NEG
42202: PUSH
42203: EMPTY
42204: LIST
42205: LIST
42206: PUSH
42207: LD_INT 1
42209: PUSH
42210: LD_INT 0
42212: PUSH
42213: EMPTY
42214: LIST
42215: LIST
42216: PUSH
42217: LD_INT 1
42219: PUSH
42220: LD_INT 1
42222: PUSH
42223: EMPTY
42224: LIST
42225: LIST
42226: PUSH
42227: LD_INT 0
42229: PUSH
42230: LD_INT 1
42232: PUSH
42233: EMPTY
42234: LIST
42235: LIST
42236: PUSH
42237: LD_INT 1
42239: NEG
42240: PUSH
42241: LD_INT 0
42243: PUSH
42244: EMPTY
42245: LIST
42246: LIST
42247: PUSH
42248: LD_INT 1
42250: NEG
42251: PUSH
42252: LD_INT 1
42254: NEG
42255: PUSH
42256: EMPTY
42257: LIST
42258: LIST
42259: PUSH
42260: LD_INT 1
42262: PUSH
42263: LD_INT 1
42265: NEG
42266: PUSH
42267: EMPTY
42268: LIST
42269: LIST
42270: PUSH
42271: LD_INT 1
42273: NEG
42274: PUSH
42275: LD_INT 1
42277: PUSH
42278: EMPTY
42279: LIST
42280: LIST
42281: PUSH
42282: EMPTY
42283: LIST
42284: LIST
42285: LIST
42286: LIST
42287: LIST
42288: LIST
42289: LIST
42290: LIST
42291: LIST
42292: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42293: LD_ADDR_VAR 0 41
42297: PUSH
42298: LD_INT 0
42300: PUSH
42301: LD_INT 0
42303: PUSH
42304: EMPTY
42305: LIST
42306: LIST
42307: PUSH
42308: LD_INT 0
42310: PUSH
42311: LD_INT 1
42313: NEG
42314: PUSH
42315: EMPTY
42316: LIST
42317: LIST
42318: PUSH
42319: LD_INT 1
42321: PUSH
42322: LD_INT 0
42324: PUSH
42325: EMPTY
42326: LIST
42327: LIST
42328: PUSH
42329: LD_INT 1
42331: PUSH
42332: LD_INT 1
42334: PUSH
42335: EMPTY
42336: LIST
42337: LIST
42338: PUSH
42339: LD_INT 0
42341: PUSH
42342: LD_INT 1
42344: PUSH
42345: EMPTY
42346: LIST
42347: LIST
42348: PUSH
42349: LD_INT 1
42351: NEG
42352: PUSH
42353: LD_INT 0
42355: PUSH
42356: EMPTY
42357: LIST
42358: LIST
42359: PUSH
42360: LD_INT 1
42362: NEG
42363: PUSH
42364: LD_INT 1
42366: NEG
42367: PUSH
42368: EMPTY
42369: LIST
42370: LIST
42371: PUSH
42372: LD_INT 1
42374: NEG
42375: PUSH
42376: LD_INT 2
42378: NEG
42379: PUSH
42380: EMPTY
42381: LIST
42382: LIST
42383: PUSH
42384: LD_INT 1
42386: PUSH
42387: LD_INT 1
42389: NEG
42390: PUSH
42391: EMPTY
42392: LIST
42393: LIST
42394: PUSH
42395: LD_INT 2
42397: PUSH
42398: LD_INT 0
42400: PUSH
42401: EMPTY
42402: LIST
42403: LIST
42404: PUSH
42405: LD_INT 2
42407: PUSH
42408: LD_INT 1
42410: PUSH
42411: EMPTY
42412: LIST
42413: LIST
42414: PUSH
42415: LD_INT 2
42417: PUSH
42418: LD_INT 2
42420: PUSH
42421: EMPTY
42422: LIST
42423: LIST
42424: PUSH
42425: LD_INT 1
42427: PUSH
42428: LD_INT 2
42430: PUSH
42431: EMPTY
42432: LIST
42433: LIST
42434: PUSH
42435: LD_INT 1
42437: NEG
42438: PUSH
42439: LD_INT 1
42441: PUSH
42442: EMPTY
42443: LIST
42444: LIST
42445: PUSH
42446: LD_INT 2
42448: NEG
42449: PUSH
42450: LD_INT 0
42452: PUSH
42453: EMPTY
42454: LIST
42455: LIST
42456: PUSH
42457: LD_INT 2
42459: NEG
42460: PUSH
42461: LD_INT 1
42463: NEG
42464: PUSH
42465: EMPTY
42466: LIST
42467: LIST
42468: PUSH
42469: LD_INT 2
42471: NEG
42472: PUSH
42473: LD_INT 2
42475: NEG
42476: PUSH
42477: EMPTY
42478: LIST
42479: LIST
42480: PUSH
42481: LD_INT 2
42483: NEG
42484: PUSH
42485: LD_INT 3
42487: NEG
42488: PUSH
42489: EMPTY
42490: LIST
42491: LIST
42492: PUSH
42493: LD_INT 2
42495: PUSH
42496: LD_INT 1
42498: NEG
42499: PUSH
42500: EMPTY
42501: LIST
42502: LIST
42503: PUSH
42504: LD_INT 3
42506: PUSH
42507: LD_INT 0
42509: PUSH
42510: EMPTY
42511: LIST
42512: LIST
42513: PUSH
42514: LD_INT 3
42516: PUSH
42517: LD_INT 1
42519: PUSH
42520: EMPTY
42521: LIST
42522: LIST
42523: PUSH
42524: LD_INT 3
42526: PUSH
42527: LD_INT 2
42529: PUSH
42530: EMPTY
42531: LIST
42532: LIST
42533: PUSH
42534: LD_INT 3
42536: PUSH
42537: LD_INT 3
42539: PUSH
42540: EMPTY
42541: LIST
42542: LIST
42543: PUSH
42544: LD_INT 2
42546: PUSH
42547: LD_INT 3
42549: PUSH
42550: EMPTY
42551: LIST
42552: LIST
42553: PUSH
42554: LD_INT 2
42556: NEG
42557: PUSH
42558: LD_INT 1
42560: PUSH
42561: EMPTY
42562: LIST
42563: LIST
42564: PUSH
42565: LD_INT 3
42567: NEG
42568: PUSH
42569: LD_INT 0
42571: PUSH
42572: EMPTY
42573: LIST
42574: LIST
42575: PUSH
42576: LD_INT 3
42578: NEG
42579: PUSH
42580: LD_INT 1
42582: NEG
42583: PUSH
42584: EMPTY
42585: LIST
42586: LIST
42587: PUSH
42588: LD_INT 3
42590: NEG
42591: PUSH
42592: LD_INT 2
42594: NEG
42595: PUSH
42596: EMPTY
42597: LIST
42598: LIST
42599: PUSH
42600: LD_INT 3
42602: NEG
42603: PUSH
42604: LD_INT 3
42606: NEG
42607: PUSH
42608: EMPTY
42609: LIST
42610: LIST
42611: PUSH
42612: EMPTY
42613: LIST
42614: LIST
42615: LIST
42616: LIST
42617: LIST
42618: LIST
42619: LIST
42620: LIST
42621: LIST
42622: LIST
42623: LIST
42624: LIST
42625: LIST
42626: LIST
42627: LIST
42628: LIST
42629: LIST
42630: LIST
42631: LIST
42632: LIST
42633: LIST
42634: LIST
42635: LIST
42636: LIST
42637: LIST
42638: LIST
42639: LIST
42640: LIST
42641: LIST
42642: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42643: LD_ADDR_VAR 0 42
42647: PUSH
42648: LD_INT 0
42650: PUSH
42651: LD_INT 0
42653: PUSH
42654: EMPTY
42655: LIST
42656: LIST
42657: PUSH
42658: LD_INT 0
42660: PUSH
42661: LD_INT 1
42663: NEG
42664: PUSH
42665: EMPTY
42666: LIST
42667: LIST
42668: PUSH
42669: LD_INT 1
42671: PUSH
42672: LD_INT 0
42674: PUSH
42675: EMPTY
42676: LIST
42677: LIST
42678: PUSH
42679: LD_INT 1
42681: PUSH
42682: LD_INT 1
42684: PUSH
42685: EMPTY
42686: LIST
42687: LIST
42688: PUSH
42689: LD_INT 0
42691: PUSH
42692: LD_INT 1
42694: PUSH
42695: EMPTY
42696: LIST
42697: LIST
42698: PUSH
42699: LD_INT 1
42701: NEG
42702: PUSH
42703: LD_INT 0
42705: PUSH
42706: EMPTY
42707: LIST
42708: LIST
42709: PUSH
42710: LD_INT 1
42712: NEG
42713: PUSH
42714: LD_INT 1
42716: NEG
42717: PUSH
42718: EMPTY
42719: LIST
42720: LIST
42721: PUSH
42722: LD_INT 1
42724: NEG
42725: PUSH
42726: LD_INT 2
42728: NEG
42729: PUSH
42730: EMPTY
42731: LIST
42732: LIST
42733: PUSH
42734: LD_INT 0
42736: PUSH
42737: LD_INT 2
42739: NEG
42740: PUSH
42741: EMPTY
42742: LIST
42743: LIST
42744: PUSH
42745: LD_INT 1
42747: PUSH
42748: LD_INT 1
42750: NEG
42751: PUSH
42752: EMPTY
42753: LIST
42754: LIST
42755: PUSH
42756: LD_INT 2
42758: PUSH
42759: LD_INT 1
42761: PUSH
42762: EMPTY
42763: LIST
42764: LIST
42765: PUSH
42766: LD_INT 2
42768: PUSH
42769: LD_INT 2
42771: PUSH
42772: EMPTY
42773: LIST
42774: LIST
42775: PUSH
42776: LD_INT 1
42778: PUSH
42779: LD_INT 2
42781: PUSH
42782: EMPTY
42783: LIST
42784: LIST
42785: PUSH
42786: LD_INT 0
42788: PUSH
42789: LD_INT 2
42791: PUSH
42792: EMPTY
42793: LIST
42794: LIST
42795: PUSH
42796: LD_INT 1
42798: NEG
42799: PUSH
42800: LD_INT 1
42802: PUSH
42803: EMPTY
42804: LIST
42805: LIST
42806: PUSH
42807: LD_INT 2
42809: NEG
42810: PUSH
42811: LD_INT 1
42813: NEG
42814: PUSH
42815: EMPTY
42816: LIST
42817: LIST
42818: PUSH
42819: LD_INT 2
42821: NEG
42822: PUSH
42823: LD_INT 2
42825: NEG
42826: PUSH
42827: EMPTY
42828: LIST
42829: LIST
42830: PUSH
42831: LD_INT 2
42833: NEG
42834: PUSH
42835: LD_INT 3
42837: NEG
42838: PUSH
42839: EMPTY
42840: LIST
42841: LIST
42842: PUSH
42843: LD_INT 1
42845: NEG
42846: PUSH
42847: LD_INT 3
42849: NEG
42850: PUSH
42851: EMPTY
42852: LIST
42853: LIST
42854: PUSH
42855: LD_INT 0
42857: PUSH
42858: LD_INT 3
42860: NEG
42861: PUSH
42862: EMPTY
42863: LIST
42864: LIST
42865: PUSH
42866: LD_INT 1
42868: PUSH
42869: LD_INT 2
42871: NEG
42872: PUSH
42873: EMPTY
42874: LIST
42875: LIST
42876: PUSH
42877: LD_INT 3
42879: PUSH
42880: LD_INT 2
42882: PUSH
42883: EMPTY
42884: LIST
42885: LIST
42886: PUSH
42887: LD_INT 3
42889: PUSH
42890: LD_INT 3
42892: PUSH
42893: EMPTY
42894: LIST
42895: LIST
42896: PUSH
42897: LD_INT 2
42899: PUSH
42900: LD_INT 3
42902: PUSH
42903: EMPTY
42904: LIST
42905: LIST
42906: PUSH
42907: LD_INT 1
42909: PUSH
42910: LD_INT 3
42912: PUSH
42913: EMPTY
42914: LIST
42915: LIST
42916: PUSH
42917: LD_INT 0
42919: PUSH
42920: LD_INT 3
42922: PUSH
42923: EMPTY
42924: LIST
42925: LIST
42926: PUSH
42927: LD_INT 1
42929: NEG
42930: PUSH
42931: LD_INT 2
42933: PUSH
42934: EMPTY
42935: LIST
42936: LIST
42937: PUSH
42938: LD_INT 3
42940: NEG
42941: PUSH
42942: LD_INT 2
42944: NEG
42945: PUSH
42946: EMPTY
42947: LIST
42948: LIST
42949: PUSH
42950: LD_INT 3
42952: NEG
42953: PUSH
42954: LD_INT 3
42956: NEG
42957: PUSH
42958: EMPTY
42959: LIST
42960: LIST
42961: PUSH
42962: EMPTY
42963: LIST
42964: LIST
42965: LIST
42966: LIST
42967: LIST
42968: LIST
42969: LIST
42970: LIST
42971: LIST
42972: LIST
42973: LIST
42974: LIST
42975: LIST
42976: LIST
42977: LIST
42978: LIST
42979: LIST
42980: LIST
42981: LIST
42982: LIST
42983: LIST
42984: LIST
42985: LIST
42986: LIST
42987: LIST
42988: LIST
42989: LIST
42990: LIST
42991: LIST
42992: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
42993: LD_ADDR_VAR 0 43
42997: PUSH
42998: LD_INT 0
43000: PUSH
43001: LD_INT 0
43003: PUSH
43004: EMPTY
43005: LIST
43006: LIST
43007: PUSH
43008: LD_INT 0
43010: PUSH
43011: LD_INT 1
43013: NEG
43014: PUSH
43015: EMPTY
43016: LIST
43017: LIST
43018: PUSH
43019: LD_INT 1
43021: PUSH
43022: LD_INT 0
43024: PUSH
43025: EMPTY
43026: LIST
43027: LIST
43028: PUSH
43029: LD_INT 1
43031: PUSH
43032: LD_INT 1
43034: PUSH
43035: EMPTY
43036: LIST
43037: LIST
43038: PUSH
43039: LD_INT 0
43041: PUSH
43042: LD_INT 1
43044: PUSH
43045: EMPTY
43046: LIST
43047: LIST
43048: PUSH
43049: LD_INT 1
43051: NEG
43052: PUSH
43053: LD_INT 0
43055: PUSH
43056: EMPTY
43057: LIST
43058: LIST
43059: PUSH
43060: LD_INT 1
43062: NEG
43063: PUSH
43064: LD_INT 1
43066: NEG
43067: PUSH
43068: EMPTY
43069: LIST
43070: LIST
43071: PUSH
43072: LD_INT 1
43074: NEG
43075: PUSH
43076: LD_INT 2
43078: NEG
43079: PUSH
43080: EMPTY
43081: LIST
43082: LIST
43083: PUSH
43084: LD_INT 0
43086: PUSH
43087: LD_INT 2
43089: NEG
43090: PUSH
43091: EMPTY
43092: LIST
43093: LIST
43094: PUSH
43095: LD_INT 1
43097: PUSH
43098: LD_INT 1
43100: NEG
43101: PUSH
43102: EMPTY
43103: LIST
43104: LIST
43105: PUSH
43106: LD_INT 2
43108: PUSH
43109: LD_INT 0
43111: PUSH
43112: EMPTY
43113: LIST
43114: LIST
43115: PUSH
43116: LD_INT 2
43118: PUSH
43119: LD_INT 1
43121: PUSH
43122: EMPTY
43123: LIST
43124: LIST
43125: PUSH
43126: LD_INT 1
43128: PUSH
43129: LD_INT 2
43131: PUSH
43132: EMPTY
43133: LIST
43134: LIST
43135: PUSH
43136: LD_INT 0
43138: PUSH
43139: LD_INT 2
43141: PUSH
43142: EMPTY
43143: LIST
43144: LIST
43145: PUSH
43146: LD_INT 1
43148: NEG
43149: PUSH
43150: LD_INT 1
43152: PUSH
43153: EMPTY
43154: LIST
43155: LIST
43156: PUSH
43157: LD_INT 2
43159: NEG
43160: PUSH
43161: LD_INT 0
43163: PUSH
43164: EMPTY
43165: LIST
43166: LIST
43167: PUSH
43168: LD_INT 2
43170: NEG
43171: PUSH
43172: LD_INT 1
43174: NEG
43175: PUSH
43176: EMPTY
43177: LIST
43178: LIST
43179: PUSH
43180: LD_INT 1
43182: NEG
43183: PUSH
43184: LD_INT 3
43186: NEG
43187: PUSH
43188: EMPTY
43189: LIST
43190: LIST
43191: PUSH
43192: LD_INT 0
43194: PUSH
43195: LD_INT 3
43197: NEG
43198: PUSH
43199: EMPTY
43200: LIST
43201: LIST
43202: PUSH
43203: LD_INT 1
43205: PUSH
43206: LD_INT 2
43208: NEG
43209: PUSH
43210: EMPTY
43211: LIST
43212: LIST
43213: PUSH
43214: LD_INT 2
43216: PUSH
43217: LD_INT 1
43219: NEG
43220: PUSH
43221: EMPTY
43222: LIST
43223: LIST
43224: PUSH
43225: LD_INT 3
43227: PUSH
43228: LD_INT 0
43230: PUSH
43231: EMPTY
43232: LIST
43233: LIST
43234: PUSH
43235: LD_INT 3
43237: PUSH
43238: LD_INT 1
43240: PUSH
43241: EMPTY
43242: LIST
43243: LIST
43244: PUSH
43245: LD_INT 1
43247: PUSH
43248: LD_INT 3
43250: PUSH
43251: EMPTY
43252: LIST
43253: LIST
43254: PUSH
43255: LD_INT 0
43257: PUSH
43258: LD_INT 3
43260: PUSH
43261: EMPTY
43262: LIST
43263: LIST
43264: PUSH
43265: LD_INT 1
43267: NEG
43268: PUSH
43269: LD_INT 2
43271: PUSH
43272: EMPTY
43273: LIST
43274: LIST
43275: PUSH
43276: LD_INT 2
43278: NEG
43279: PUSH
43280: LD_INT 1
43282: PUSH
43283: EMPTY
43284: LIST
43285: LIST
43286: PUSH
43287: LD_INT 3
43289: NEG
43290: PUSH
43291: LD_INT 0
43293: PUSH
43294: EMPTY
43295: LIST
43296: LIST
43297: PUSH
43298: LD_INT 3
43300: NEG
43301: PUSH
43302: LD_INT 1
43304: NEG
43305: PUSH
43306: EMPTY
43307: LIST
43308: LIST
43309: PUSH
43310: EMPTY
43311: LIST
43312: LIST
43313: LIST
43314: LIST
43315: LIST
43316: LIST
43317: LIST
43318: LIST
43319: LIST
43320: LIST
43321: LIST
43322: LIST
43323: LIST
43324: LIST
43325: LIST
43326: LIST
43327: LIST
43328: LIST
43329: LIST
43330: LIST
43331: LIST
43332: LIST
43333: LIST
43334: LIST
43335: LIST
43336: LIST
43337: LIST
43338: LIST
43339: LIST
43340: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43341: LD_ADDR_VAR 0 44
43345: PUSH
43346: LD_INT 0
43348: PUSH
43349: LD_INT 0
43351: PUSH
43352: EMPTY
43353: LIST
43354: LIST
43355: PUSH
43356: LD_INT 0
43358: PUSH
43359: LD_INT 1
43361: NEG
43362: PUSH
43363: EMPTY
43364: LIST
43365: LIST
43366: PUSH
43367: LD_INT 1
43369: PUSH
43370: LD_INT 0
43372: PUSH
43373: EMPTY
43374: LIST
43375: LIST
43376: PUSH
43377: LD_INT 1
43379: PUSH
43380: LD_INT 1
43382: PUSH
43383: EMPTY
43384: LIST
43385: LIST
43386: PUSH
43387: LD_INT 0
43389: PUSH
43390: LD_INT 1
43392: PUSH
43393: EMPTY
43394: LIST
43395: LIST
43396: PUSH
43397: LD_INT 1
43399: NEG
43400: PUSH
43401: LD_INT 0
43403: PUSH
43404: EMPTY
43405: LIST
43406: LIST
43407: PUSH
43408: LD_INT 1
43410: NEG
43411: PUSH
43412: LD_INT 1
43414: NEG
43415: PUSH
43416: EMPTY
43417: LIST
43418: LIST
43419: PUSH
43420: LD_INT 1
43422: NEG
43423: PUSH
43424: LD_INT 2
43426: NEG
43427: PUSH
43428: EMPTY
43429: LIST
43430: LIST
43431: PUSH
43432: LD_INT 1
43434: PUSH
43435: LD_INT 1
43437: NEG
43438: PUSH
43439: EMPTY
43440: LIST
43441: LIST
43442: PUSH
43443: LD_INT 2
43445: PUSH
43446: LD_INT 0
43448: PUSH
43449: EMPTY
43450: LIST
43451: LIST
43452: PUSH
43453: LD_INT 2
43455: PUSH
43456: LD_INT 1
43458: PUSH
43459: EMPTY
43460: LIST
43461: LIST
43462: PUSH
43463: LD_INT 2
43465: PUSH
43466: LD_INT 2
43468: PUSH
43469: EMPTY
43470: LIST
43471: LIST
43472: PUSH
43473: LD_INT 1
43475: PUSH
43476: LD_INT 2
43478: PUSH
43479: EMPTY
43480: LIST
43481: LIST
43482: PUSH
43483: LD_INT 1
43485: NEG
43486: PUSH
43487: LD_INT 1
43489: PUSH
43490: EMPTY
43491: LIST
43492: LIST
43493: PUSH
43494: LD_INT 2
43496: NEG
43497: PUSH
43498: LD_INT 0
43500: PUSH
43501: EMPTY
43502: LIST
43503: LIST
43504: PUSH
43505: LD_INT 2
43507: NEG
43508: PUSH
43509: LD_INT 1
43511: NEG
43512: PUSH
43513: EMPTY
43514: LIST
43515: LIST
43516: PUSH
43517: LD_INT 2
43519: NEG
43520: PUSH
43521: LD_INT 2
43523: NEG
43524: PUSH
43525: EMPTY
43526: LIST
43527: LIST
43528: PUSH
43529: LD_INT 2
43531: NEG
43532: PUSH
43533: LD_INT 3
43535: NEG
43536: PUSH
43537: EMPTY
43538: LIST
43539: LIST
43540: PUSH
43541: LD_INT 2
43543: PUSH
43544: LD_INT 1
43546: NEG
43547: PUSH
43548: EMPTY
43549: LIST
43550: LIST
43551: PUSH
43552: LD_INT 3
43554: PUSH
43555: LD_INT 0
43557: PUSH
43558: EMPTY
43559: LIST
43560: LIST
43561: PUSH
43562: LD_INT 3
43564: PUSH
43565: LD_INT 1
43567: PUSH
43568: EMPTY
43569: LIST
43570: LIST
43571: PUSH
43572: LD_INT 3
43574: PUSH
43575: LD_INT 2
43577: PUSH
43578: EMPTY
43579: LIST
43580: LIST
43581: PUSH
43582: LD_INT 3
43584: PUSH
43585: LD_INT 3
43587: PUSH
43588: EMPTY
43589: LIST
43590: LIST
43591: PUSH
43592: LD_INT 2
43594: PUSH
43595: LD_INT 3
43597: PUSH
43598: EMPTY
43599: LIST
43600: LIST
43601: PUSH
43602: LD_INT 2
43604: NEG
43605: PUSH
43606: LD_INT 1
43608: PUSH
43609: EMPTY
43610: LIST
43611: LIST
43612: PUSH
43613: LD_INT 3
43615: NEG
43616: PUSH
43617: LD_INT 0
43619: PUSH
43620: EMPTY
43621: LIST
43622: LIST
43623: PUSH
43624: LD_INT 3
43626: NEG
43627: PUSH
43628: LD_INT 1
43630: NEG
43631: PUSH
43632: EMPTY
43633: LIST
43634: LIST
43635: PUSH
43636: LD_INT 3
43638: NEG
43639: PUSH
43640: LD_INT 2
43642: NEG
43643: PUSH
43644: EMPTY
43645: LIST
43646: LIST
43647: PUSH
43648: LD_INT 3
43650: NEG
43651: PUSH
43652: LD_INT 3
43654: NEG
43655: PUSH
43656: EMPTY
43657: LIST
43658: LIST
43659: PUSH
43660: EMPTY
43661: LIST
43662: LIST
43663: LIST
43664: LIST
43665: LIST
43666: LIST
43667: LIST
43668: LIST
43669: LIST
43670: LIST
43671: LIST
43672: LIST
43673: LIST
43674: LIST
43675: LIST
43676: LIST
43677: LIST
43678: LIST
43679: LIST
43680: LIST
43681: LIST
43682: LIST
43683: LIST
43684: LIST
43685: LIST
43686: LIST
43687: LIST
43688: LIST
43689: LIST
43690: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43691: LD_ADDR_VAR 0 45
43695: PUSH
43696: LD_INT 0
43698: PUSH
43699: LD_INT 0
43701: PUSH
43702: EMPTY
43703: LIST
43704: LIST
43705: PUSH
43706: LD_INT 0
43708: PUSH
43709: LD_INT 1
43711: NEG
43712: PUSH
43713: EMPTY
43714: LIST
43715: LIST
43716: PUSH
43717: LD_INT 1
43719: PUSH
43720: LD_INT 0
43722: PUSH
43723: EMPTY
43724: LIST
43725: LIST
43726: PUSH
43727: LD_INT 1
43729: PUSH
43730: LD_INT 1
43732: PUSH
43733: EMPTY
43734: LIST
43735: LIST
43736: PUSH
43737: LD_INT 0
43739: PUSH
43740: LD_INT 1
43742: PUSH
43743: EMPTY
43744: LIST
43745: LIST
43746: PUSH
43747: LD_INT 1
43749: NEG
43750: PUSH
43751: LD_INT 0
43753: PUSH
43754: EMPTY
43755: LIST
43756: LIST
43757: PUSH
43758: LD_INT 1
43760: NEG
43761: PUSH
43762: LD_INT 1
43764: NEG
43765: PUSH
43766: EMPTY
43767: LIST
43768: LIST
43769: PUSH
43770: LD_INT 1
43772: NEG
43773: PUSH
43774: LD_INT 2
43776: NEG
43777: PUSH
43778: EMPTY
43779: LIST
43780: LIST
43781: PUSH
43782: LD_INT 0
43784: PUSH
43785: LD_INT 2
43787: NEG
43788: PUSH
43789: EMPTY
43790: LIST
43791: LIST
43792: PUSH
43793: LD_INT 1
43795: PUSH
43796: LD_INT 1
43798: NEG
43799: PUSH
43800: EMPTY
43801: LIST
43802: LIST
43803: PUSH
43804: LD_INT 2
43806: PUSH
43807: LD_INT 1
43809: PUSH
43810: EMPTY
43811: LIST
43812: LIST
43813: PUSH
43814: LD_INT 2
43816: PUSH
43817: LD_INT 2
43819: PUSH
43820: EMPTY
43821: LIST
43822: LIST
43823: PUSH
43824: LD_INT 1
43826: PUSH
43827: LD_INT 2
43829: PUSH
43830: EMPTY
43831: LIST
43832: LIST
43833: PUSH
43834: LD_INT 0
43836: PUSH
43837: LD_INT 2
43839: PUSH
43840: EMPTY
43841: LIST
43842: LIST
43843: PUSH
43844: LD_INT 1
43846: NEG
43847: PUSH
43848: LD_INT 1
43850: PUSH
43851: EMPTY
43852: LIST
43853: LIST
43854: PUSH
43855: LD_INT 2
43857: NEG
43858: PUSH
43859: LD_INT 1
43861: NEG
43862: PUSH
43863: EMPTY
43864: LIST
43865: LIST
43866: PUSH
43867: LD_INT 2
43869: NEG
43870: PUSH
43871: LD_INT 2
43873: NEG
43874: PUSH
43875: EMPTY
43876: LIST
43877: LIST
43878: PUSH
43879: LD_INT 2
43881: NEG
43882: PUSH
43883: LD_INT 3
43885: NEG
43886: PUSH
43887: EMPTY
43888: LIST
43889: LIST
43890: PUSH
43891: LD_INT 1
43893: NEG
43894: PUSH
43895: LD_INT 3
43897: NEG
43898: PUSH
43899: EMPTY
43900: LIST
43901: LIST
43902: PUSH
43903: LD_INT 0
43905: PUSH
43906: LD_INT 3
43908: NEG
43909: PUSH
43910: EMPTY
43911: LIST
43912: LIST
43913: PUSH
43914: LD_INT 1
43916: PUSH
43917: LD_INT 2
43919: NEG
43920: PUSH
43921: EMPTY
43922: LIST
43923: LIST
43924: PUSH
43925: LD_INT 3
43927: PUSH
43928: LD_INT 2
43930: PUSH
43931: EMPTY
43932: LIST
43933: LIST
43934: PUSH
43935: LD_INT 3
43937: PUSH
43938: LD_INT 3
43940: PUSH
43941: EMPTY
43942: LIST
43943: LIST
43944: PUSH
43945: LD_INT 2
43947: PUSH
43948: LD_INT 3
43950: PUSH
43951: EMPTY
43952: LIST
43953: LIST
43954: PUSH
43955: LD_INT 1
43957: PUSH
43958: LD_INT 3
43960: PUSH
43961: EMPTY
43962: LIST
43963: LIST
43964: PUSH
43965: LD_INT 0
43967: PUSH
43968: LD_INT 3
43970: PUSH
43971: EMPTY
43972: LIST
43973: LIST
43974: PUSH
43975: LD_INT 1
43977: NEG
43978: PUSH
43979: LD_INT 2
43981: PUSH
43982: EMPTY
43983: LIST
43984: LIST
43985: PUSH
43986: LD_INT 3
43988: NEG
43989: PUSH
43990: LD_INT 2
43992: NEG
43993: PUSH
43994: EMPTY
43995: LIST
43996: LIST
43997: PUSH
43998: LD_INT 3
44000: NEG
44001: PUSH
44002: LD_INT 3
44004: NEG
44005: PUSH
44006: EMPTY
44007: LIST
44008: LIST
44009: PUSH
44010: EMPTY
44011: LIST
44012: LIST
44013: LIST
44014: LIST
44015: LIST
44016: LIST
44017: LIST
44018: LIST
44019: LIST
44020: LIST
44021: LIST
44022: LIST
44023: LIST
44024: LIST
44025: LIST
44026: LIST
44027: LIST
44028: LIST
44029: LIST
44030: LIST
44031: LIST
44032: LIST
44033: LIST
44034: LIST
44035: LIST
44036: LIST
44037: LIST
44038: LIST
44039: LIST
44040: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
44041: LD_ADDR_VAR 0 46
44045: PUSH
44046: LD_INT 0
44048: PUSH
44049: LD_INT 0
44051: PUSH
44052: EMPTY
44053: LIST
44054: LIST
44055: PUSH
44056: LD_INT 0
44058: PUSH
44059: LD_INT 1
44061: NEG
44062: PUSH
44063: EMPTY
44064: LIST
44065: LIST
44066: PUSH
44067: LD_INT 1
44069: PUSH
44070: LD_INT 0
44072: PUSH
44073: EMPTY
44074: LIST
44075: LIST
44076: PUSH
44077: LD_INT 1
44079: PUSH
44080: LD_INT 1
44082: PUSH
44083: EMPTY
44084: LIST
44085: LIST
44086: PUSH
44087: LD_INT 0
44089: PUSH
44090: LD_INT 1
44092: PUSH
44093: EMPTY
44094: LIST
44095: LIST
44096: PUSH
44097: LD_INT 1
44099: NEG
44100: PUSH
44101: LD_INT 0
44103: PUSH
44104: EMPTY
44105: LIST
44106: LIST
44107: PUSH
44108: LD_INT 1
44110: NEG
44111: PUSH
44112: LD_INT 1
44114: NEG
44115: PUSH
44116: EMPTY
44117: LIST
44118: LIST
44119: PUSH
44120: LD_INT 1
44122: NEG
44123: PUSH
44124: LD_INT 2
44126: NEG
44127: PUSH
44128: EMPTY
44129: LIST
44130: LIST
44131: PUSH
44132: LD_INT 0
44134: PUSH
44135: LD_INT 2
44137: NEG
44138: PUSH
44139: EMPTY
44140: LIST
44141: LIST
44142: PUSH
44143: LD_INT 1
44145: PUSH
44146: LD_INT 1
44148: NEG
44149: PUSH
44150: EMPTY
44151: LIST
44152: LIST
44153: PUSH
44154: LD_INT 2
44156: PUSH
44157: LD_INT 0
44159: PUSH
44160: EMPTY
44161: LIST
44162: LIST
44163: PUSH
44164: LD_INT 2
44166: PUSH
44167: LD_INT 1
44169: PUSH
44170: EMPTY
44171: LIST
44172: LIST
44173: PUSH
44174: LD_INT 1
44176: PUSH
44177: LD_INT 2
44179: PUSH
44180: EMPTY
44181: LIST
44182: LIST
44183: PUSH
44184: LD_INT 0
44186: PUSH
44187: LD_INT 2
44189: PUSH
44190: EMPTY
44191: LIST
44192: LIST
44193: PUSH
44194: LD_INT 1
44196: NEG
44197: PUSH
44198: LD_INT 1
44200: PUSH
44201: EMPTY
44202: LIST
44203: LIST
44204: PUSH
44205: LD_INT 2
44207: NEG
44208: PUSH
44209: LD_INT 0
44211: PUSH
44212: EMPTY
44213: LIST
44214: LIST
44215: PUSH
44216: LD_INT 2
44218: NEG
44219: PUSH
44220: LD_INT 1
44222: NEG
44223: PUSH
44224: EMPTY
44225: LIST
44226: LIST
44227: PUSH
44228: LD_INT 1
44230: NEG
44231: PUSH
44232: LD_INT 3
44234: NEG
44235: PUSH
44236: EMPTY
44237: LIST
44238: LIST
44239: PUSH
44240: LD_INT 0
44242: PUSH
44243: LD_INT 3
44245: NEG
44246: PUSH
44247: EMPTY
44248: LIST
44249: LIST
44250: PUSH
44251: LD_INT 1
44253: PUSH
44254: LD_INT 2
44256: NEG
44257: PUSH
44258: EMPTY
44259: LIST
44260: LIST
44261: PUSH
44262: LD_INT 2
44264: PUSH
44265: LD_INT 1
44267: NEG
44268: PUSH
44269: EMPTY
44270: LIST
44271: LIST
44272: PUSH
44273: LD_INT 3
44275: PUSH
44276: LD_INT 0
44278: PUSH
44279: EMPTY
44280: LIST
44281: LIST
44282: PUSH
44283: LD_INT 3
44285: PUSH
44286: LD_INT 1
44288: PUSH
44289: EMPTY
44290: LIST
44291: LIST
44292: PUSH
44293: LD_INT 1
44295: PUSH
44296: LD_INT 3
44298: PUSH
44299: EMPTY
44300: LIST
44301: LIST
44302: PUSH
44303: LD_INT 0
44305: PUSH
44306: LD_INT 3
44308: PUSH
44309: EMPTY
44310: LIST
44311: LIST
44312: PUSH
44313: LD_INT 1
44315: NEG
44316: PUSH
44317: LD_INT 2
44319: PUSH
44320: EMPTY
44321: LIST
44322: LIST
44323: PUSH
44324: LD_INT 2
44326: NEG
44327: PUSH
44328: LD_INT 1
44330: PUSH
44331: EMPTY
44332: LIST
44333: LIST
44334: PUSH
44335: LD_INT 3
44337: NEG
44338: PUSH
44339: LD_INT 0
44341: PUSH
44342: EMPTY
44343: LIST
44344: LIST
44345: PUSH
44346: LD_INT 3
44348: NEG
44349: PUSH
44350: LD_INT 1
44352: NEG
44353: PUSH
44354: EMPTY
44355: LIST
44356: LIST
44357: PUSH
44358: EMPTY
44359: LIST
44360: LIST
44361: LIST
44362: LIST
44363: LIST
44364: LIST
44365: LIST
44366: LIST
44367: LIST
44368: LIST
44369: LIST
44370: LIST
44371: LIST
44372: LIST
44373: LIST
44374: LIST
44375: LIST
44376: LIST
44377: LIST
44378: LIST
44379: LIST
44380: LIST
44381: LIST
44382: LIST
44383: LIST
44384: LIST
44385: LIST
44386: LIST
44387: LIST
44388: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44389: LD_ADDR_VAR 0 47
44393: PUSH
44394: LD_INT 0
44396: PUSH
44397: LD_INT 0
44399: PUSH
44400: EMPTY
44401: LIST
44402: LIST
44403: PUSH
44404: LD_INT 0
44406: PUSH
44407: LD_INT 1
44409: NEG
44410: PUSH
44411: EMPTY
44412: LIST
44413: LIST
44414: PUSH
44415: LD_INT 1
44417: PUSH
44418: LD_INT 0
44420: PUSH
44421: EMPTY
44422: LIST
44423: LIST
44424: PUSH
44425: LD_INT 1
44427: PUSH
44428: LD_INT 1
44430: PUSH
44431: EMPTY
44432: LIST
44433: LIST
44434: PUSH
44435: LD_INT 0
44437: PUSH
44438: LD_INT 1
44440: PUSH
44441: EMPTY
44442: LIST
44443: LIST
44444: PUSH
44445: LD_INT 1
44447: NEG
44448: PUSH
44449: LD_INT 0
44451: PUSH
44452: EMPTY
44453: LIST
44454: LIST
44455: PUSH
44456: LD_INT 1
44458: NEG
44459: PUSH
44460: LD_INT 1
44462: NEG
44463: PUSH
44464: EMPTY
44465: LIST
44466: LIST
44467: PUSH
44468: LD_INT 1
44470: NEG
44471: PUSH
44472: LD_INT 2
44474: NEG
44475: PUSH
44476: EMPTY
44477: LIST
44478: LIST
44479: PUSH
44480: LD_INT 0
44482: PUSH
44483: LD_INT 2
44485: NEG
44486: PUSH
44487: EMPTY
44488: LIST
44489: LIST
44490: PUSH
44491: LD_INT 1
44493: PUSH
44494: LD_INT 1
44496: NEG
44497: PUSH
44498: EMPTY
44499: LIST
44500: LIST
44501: PUSH
44502: LD_INT 2
44504: NEG
44505: PUSH
44506: LD_INT 1
44508: NEG
44509: PUSH
44510: EMPTY
44511: LIST
44512: LIST
44513: PUSH
44514: LD_INT 2
44516: NEG
44517: PUSH
44518: LD_INT 2
44520: NEG
44521: PUSH
44522: EMPTY
44523: LIST
44524: LIST
44525: PUSH
44526: EMPTY
44527: LIST
44528: LIST
44529: LIST
44530: LIST
44531: LIST
44532: LIST
44533: LIST
44534: LIST
44535: LIST
44536: LIST
44537: LIST
44538: LIST
44539: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
44540: LD_ADDR_VAR 0 48
44544: PUSH
44545: LD_INT 0
44547: PUSH
44548: LD_INT 0
44550: PUSH
44551: EMPTY
44552: LIST
44553: LIST
44554: PUSH
44555: LD_INT 0
44557: PUSH
44558: LD_INT 1
44560: NEG
44561: PUSH
44562: EMPTY
44563: LIST
44564: LIST
44565: PUSH
44566: LD_INT 1
44568: PUSH
44569: LD_INT 0
44571: PUSH
44572: EMPTY
44573: LIST
44574: LIST
44575: PUSH
44576: LD_INT 1
44578: PUSH
44579: LD_INT 1
44581: PUSH
44582: EMPTY
44583: LIST
44584: LIST
44585: PUSH
44586: LD_INT 0
44588: PUSH
44589: LD_INT 1
44591: PUSH
44592: EMPTY
44593: LIST
44594: LIST
44595: PUSH
44596: LD_INT 1
44598: NEG
44599: PUSH
44600: LD_INT 0
44602: PUSH
44603: EMPTY
44604: LIST
44605: LIST
44606: PUSH
44607: LD_INT 1
44609: NEG
44610: PUSH
44611: LD_INT 1
44613: NEG
44614: PUSH
44615: EMPTY
44616: LIST
44617: LIST
44618: PUSH
44619: LD_INT 1
44621: NEG
44622: PUSH
44623: LD_INT 2
44625: NEG
44626: PUSH
44627: EMPTY
44628: LIST
44629: LIST
44630: PUSH
44631: LD_INT 0
44633: PUSH
44634: LD_INT 2
44636: NEG
44637: PUSH
44638: EMPTY
44639: LIST
44640: LIST
44641: PUSH
44642: LD_INT 1
44644: PUSH
44645: LD_INT 1
44647: NEG
44648: PUSH
44649: EMPTY
44650: LIST
44651: LIST
44652: PUSH
44653: LD_INT 2
44655: PUSH
44656: LD_INT 0
44658: PUSH
44659: EMPTY
44660: LIST
44661: LIST
44662: PUSH
44663: LD_INT 2
44665: PUSH
44666: LD_INT 1
44668: PUSH
44669: EMPTY
44670: LIST
44671: LIST
44672: PUSH
44673: EMPTY
44674: LIST
44675: LIST
44676: LIST
44677: LIST
44678: LIST
44679: LIST
44680: LIST
44681: LIST
44682: LIST
44683: LIST
44684: LIST
44685: LIST
44686: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
44687: LD_ADDR_VAR 0 49
44691: PUSH
44692: LD_INT 0
44694: PUSH
44695: LD_INT 0
44697: PUSH
44698: EMPTY
44699: LIST
44700: LIST
44701: PUSH
44702: LD_INT 0
44704: PUSH
44705: LD_INT 1
44707: NEG
44708: PUSH
44709: EMPTY
44710: LIST
44711: LIST
44712: PUSH
44713: LD_INT 1
44715: PUSH
44716: LD_INT 0
44718: PUSH
44719: EMPTY
44720: LIST
44721: LIST
44722: PUSH
44723: LD_INT 1
44725: PUSH
44726: LD_INT 1
44728: PUSH
44729: EMPTY
44730: LIST
44731: LIST
44732: PUSH
44733: LD_INT 0
44735: PUSH
44736: LD_INT 1
44738: PUSH
44739: EMPTY
44740: LIST
44741: LIST
44742: PUSH
44743: LD_INT 1
44745: NEG
44746: PUSH
44747: LD_INT 0
44749: PUSH
44750: EMPTY
44751: LIST
44752: LIST
44753: PUSH
44754: LD_INT 1
44756: NEG
44757: PUSH
44758: LD_INT 1
44760: NEG
44761: PUSH
44762: EMPTY
44763: LIST
44764: LIST
44765: PUSH
44766: LD_INT 1
44768: PUSH
44769: LD_INT 1
44771: NEG
44772: PUSH
44773: EMPTY
44774: LIST
44775: LIST
44776: PUSH
44777: LD_INT 2
44779: PUSH
44780: LD_INT 0
44782: PUSH
44783: EMPTY
44784: LIST
44785: LIST
44786: PUSH
44787: LD_INT 2
44789: PUSH
44790: LD_INT 1
44792: PUSH
44793: EMPTY
44794: LIST
44795: LIST
44796: PUSH
44797: LD_INT 2
44799: PUSH
44800: LD_INT 2
44802: PUSH
44803: EMPTY
44804: LIST
44805: LIST
44806: PUSH
44807: LD_INT 1
44809: PUSH
44810: LD_INT 2
44812: PUSH
44813: EMPTY
44814: LIST
44815: LIST
44816: PUSH
44817: EMPTY
44818: LIST
44819: LIST
44820: LIST
44821: LIST
44822: LIST
44823: LIST
44824: LIST
44825: LIST
44826: LIST
44827: LIST
44828: LIST
44829: LIST
44830: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
44831: LD_ADDR_VAR 0 50
44835: PUSH
44836: LD_INT 0
44838: PUSH
44839: LD_INT 0
44841: PUSH
44842: EMPTY
44843: LIST
44844: LIST
44845: PUSH
44846: LD_INT 0
44848: PUSH
44849: LD_INT 1
44851: NEG
44852: PUSH
44853: EMPTY
44854: LIST
44855: LIST
44856: PUSH
44857: LD_INT 1
44859: PUSH
44860: LD_INT 0
44862: PUSH
44863: EMPTY
44864: LIST
44865: LIST
44866: PUSH
44867: LD_INT 1
44869: PUSH
44870: LD_INT 1
44872: PUSH
44873: EMPTY
44874: LIST
44875: LIST
44876: PUSH
44877: LD_INT 0
44879: PUSH
44880: LD_INT 1
44882: PUSH
44883: EMPTY
44884: LIST
44885: LIST
44886: PUSH
44887: LD_INT 1
44889: NEG
44890: PUSH
44891: LD_INT 0
44893: PUSH
44894: EMPTY
44895: LIST
44896: LIST
44897: PUSH
44898: LD_INT 1
44900: NEG
44901: PUSH
44902: LD_INT 1
44904: NEG
44905: PUSH
44906: EMPTY
44907: LIST
44908: LIST
44909: PUSH
44910: LD_INT 2
44912: PUSH
44913: LD_INT 1
44915: PUSH
44916: EMPTY
44917: LIST
44918: LIST
44919: PUSH
44920: LD_INT 2
44922: PUSH
44923: LD_INT 2
44925: PUSH
44926: EMPTY
44927: LIST
44928: LIST
44929: PUSH
44930: LD_INT 1
44932: PUSH
44933: LD_INT 2
44935: PUSH
44936: EMPTY
44937: LIST
44938: LIST
44939: PUSH
44940: LD_INT 0
44942: PUSH
44943: LD_INT 2
44945: PUSH
44946: EMPTY
44947: LIST
44948: LIST
44949: PUSH
44950: LD_INT 1
44952: NEG
44953: PUSH
44954: LD_INT 1
44956: PUSH
44957: EMPTY
44958: LIST
44959: LIST
44960: PUSH
44961: EMPTY
44962: LIST
44963: LIST
44964: LIST
44965: LIST
44966: LIST
44967: LIST
44968: LIST
44969: LIST
44970: LIST
44971: LIST
44972: LIST
44973: LIST
44974: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
44975: LD_ADDR_VAR 0 51
44979: PUSH
44980: LD_INT 0
44982: PUSH
44983: LD_INT 0
44985: PUSH
44986: EMPTY
44987: LIST
44988: LIST
44989: PUSH
44990: LD_INT 0
44992: PUSH
44993: LD_INT 1
44995: NEG
44996: PUSH
44997: EMPTY
44998: LIST
44999: LIST
45000: PUSH
45001: LD_INT 1
45003: PUSH
45004: LD_INT 0
45006: PUSH
45007: EMPTY
45008: LIST
45009: LIST
45010: PUSH
45011: LD_INT 1
45013: PUSH
45014: LD_INT 1
45016: PUSH
45017: EMPTY
45018: LIST
45019: LIST
45020: PUSH
45021: LD_INT 0
45023: PUSH
45024: LD_INT 1
45026: PUSH
45027: EMPTY
45028: LIST
45029: LIST
45030: PUSH
45031: LD_INT 1
45033: NEG
45034: PUSH
45035: LD_INT 0
45037: PUSH
45038: EMPTY
45039: LIST
45040: LIST
45041: PUSH
45042: LD_INT 1
45044: NEG
45045: PUSH
45046: LD_INT 1
45048: NEG
45049: PUSH
45050: EMPTY
45051: LIST
45052: LIST
45053: PUSH
45054: LD_INT 1
45056: PUSH
45057: LD_INT 2
45059: PUSH
45060: EMPTY
45061: LIST
45062: LIST
45063: PUSH
45064: LD_INT 0
45066: PUSH
45067: LD_INT 2
45069: PUSH
45070: EMPTY
45071: LIST
45072: LIST
45073: PUSH
45074: LD_INT 1
45076: NEG
45077: PUSH
45078: LD_INT 1
45080: PUSH
45081: EMPTY
45082: LIST
45083: LIST
45084: PUSH
45085: LD_INT 2
45087: NEG
45088: PUSH
45089: LD_INT 0
45091: PUSH
45092: EMPTY
45093: LIST
45094: LIST
45095: PUSH
45096: LD_INT 2
45098: NEG
45099: PUSH
45100: LD_INT 1
45102: NEG
45103: PUSH
45104: EMPTY
45105: LIST
45106: LIST
45107: PUSH
45108: EMPTY
45109: LIST
45110: LIST
45111: LIST
45112: LIST
45113: LIST
45114: LIST
45115: LIST
45116: LIST
45117: LIST
45118: LIST
45119: LIST
45120: LIST
45121: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45122: LD_ADDR_VAR 0 52
45126: PUSH
45127: LD_INT 0
45129: PUSH
45130: LD_INT 0
45132: PUSH
45133: EMPTY
45134: LIST
45135: LIST
45136: PUSH
45137: LD_INT 0
45139: PUSH
45140: LD_INT 1
45142: NEG
45143: PUSH
45144: EMPTY
45145: LIST
45146: LIST
45147: PUSH
45148: LD_INT 1
45150: PUSH
45151: LD_INT 0
45153: PUSH
45154: EMPTY
45155: LIST
45156: LIST
45157: PUSH
45158: LD_INT 1
45160: PUSH
45161: LD_INT 1
45163: PUSH
45164: EMPTY
45165: LIST
45166: LIST
45167: PUSH
45168: LD_INT 0
45170: PUSH
45171: LD_INT 1
45173: PUSH
45174: EMPTY
45175: LIST
45176: LIST
45177: PUSH
45178: LD_INT 1
45180: NEG
45181: PUSH
45182: LD_INT 0
45184: PUSH
45185: EMPTY
45186: LIST
45187: LIST
45188: PUSH
45189: LD_INT 1
45191: NEG
45192: PUSH
45193: LD_INT 1
45195: NEG
45196: PUSH
45197: EMPTY
45198: LIST
45199: LIST
45200: PUSH
45201: LD_INT 1
45203: NEG
45204: PUSH
45205: LD_INT 2
45207: NEG
45208: PUSH
45209: EMPTY
45210: LIST
45211: LIST
45212: PUSH
45213: LD_INT 1
45215: NEG
45216: PUSH
45217: LD_INT 1
45219: PUSH
45220: EMPTY
45221: LIST
45222: LIST
45223: PUSH
45224: LD_INT 2
45226: NEG
45227: PUSH
45228: LD_INT 0
45230: PUSH
45231: EMPTY
45232: LIST
45233: LIST
45234: PUSH
45235: LD_INT 2
45237: NEG
45238: PUSH
45239: LD_INT 1
45241: NEG
45242: PUSH
45243: EMPTY
45244: LIST
45245: LIST
45246: PUSH
45247: LD_INT 2
45249: NEG
45250: PUSH
45251: LD_INT 2
45253: NEG
45254: PUSH
45255: EMPTY
45256: LIST
45257: LIST
45258: PUSH
45259: EMPTY
45260: LIST
45261: LIST
45262: LIST
45263: LIST
45264: LIST
45265: LIST
45266: LIST
45267: LIST
45268: LIST
45269: LIST
45270: LIST
45271: LIST
45272: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45273: LD_ADDR_VAR 0 53
45277: PUSH
45278: LD_INT 0
45280: PUSH
45281: LD_INT 0
45283: PUSH
45284: EMPTY
45285: LIST
45286: LIST
45287: PUSH
45288: LD_INT 0
45290: PUSH
45291: LD_INT 1
45293: NEG
45294: PUSH
45295: EMPTY
45296: LIST
45297: LIST
45298: PUSH
45299: LD_INT 1
45301: PUSH
45302: LD_INT 0
45304: PUSH
45305: EMPTY
45306: LIST
45307: LIST
45308: PUSH
45309: LD_INT 1
45311: PUSH
45312: LD_INT 1
45314: PUSH
45315: EMPTY
45316: LIST
45317: LIST
45318: PUSH
45319: LD_INT 0
45321: PUSH
45322: LD_INT 1
45324: PUSH
45325: EMPTY
45326: LIST
45327: LIST
45328: PUSH
45329: LD_INT 1
45331: NEG
45332: PUSH
45333: LD_INT 0
45335: PUSH
45336: EMPTY
45337: LIST
45338: LIST
45339: PUSH
45340: LD_INT 1
45342: NEG
45343: PUSH
45344: LD_INT 1
45346: NEG
45347: PUSH
45348: EMPTY
45349: LIST
45350: LIST
45351: PUSH
45352: LD_INT 1
45354: NEG
45355: PUSH
45356: LD_INT 2
45358: NEG
45359: PUSH
45360: EMPTY
45361: LIST
45362: LIST
45363: PUSH
45364: LD_INT 0
45366: PUSH
45367: LD_INT 2
45369: NEG
45370: PUSH
45371: EMPTY
45372: LIST
45373: LIST
45374: PUSH
45375: LD_INT 1
45377: PUSH
45378: LD_INT 1
45380: NEG
45381: PUSH
45382: EMPTY
45383: LIST
45384: LIST
45385: PUSH
45386: LD_INT 2
45388: PUSH
45389: LD_INT 0
45391: PUSH
45392: EMPTY
45393: LIST
45394: LIST
45395: PUSH
45396: LD_INT 2
45398: PUSH
45399: LD_INT 1
45401: PUSH
45402: EMPTY
45403: LIST
45404: LIST
45405: PUSH
45406: LD_INT 2
45408: PUSH
45409: LD_INT 2
45411: PUSH
45412: EMPTY
45413: LIST
45414: LIST
45415: PUSH
45416: LD_INT 1
45418: PUSH
45419: LD_INT 2
45421: PUSH
45422: EMPTY
45423: LIST
45424: LIST
45425: PUSH
45426: LD_INT 0
45428: PUSH
45429: LD_INT 2
45431: PUSH
45432: EMPTY
45433: LIST
45434: LIST
45435: PUSH
45436: LD_INT 1
45438: NEG
45439: PUSH
45440: LD_INT 1
45442: PUSH
45443: EMPTY
45444: LIST
45445: LIST
45446: PUSH
45447: LD_INT 2
45449: NEG
45450: PUSH
45451: LD_INT 0
45453: PUSH
45454: EMPTY
45455: LIST
45456: LIST
45457: PUSH
45458: LD_INT 2
45460: NEG
45461: PUSH
45462: LD_INT 1
45464: NEG
45465: PUSH
45466: EMPTY
45467: LIST
45468: LIST
45469: PUSH
45470: LD_INT 2
45472: NEG
45473: PUSH
45474: LD_INT 2
45476: NEG
45477: PUSH
45478: EMPTY
45479: LIST
45480: LIST
45481: PUSH
45482: EMPTY
45483: LIST
45484: LIST
45485: LIST
45486: LIST
45487: LIST
45488: LIST
45489: LIST
45490: LIST
45491: LIST
45492: LIST
45493: LIST
45494: LIST
45495: LIST
45496: LIST
45497: LIST
45498: LIST
45499: LIST
45500: LIST
45501: LIST
45502: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45503: LD_ADDR_VAR 0 54
45507: PUSH
45508: LD_INT 0
45510: PUSH
45511: LD_INT 0
45513: PUSH
45514: EMPTY
45515: LIST
45516: LIST
45517: PUSH
45518: LD_INT 0
45520: PUSH
45521: LD_INT 1
45523: NEG
45524: PUSH
45525: EMPTY
45526: LIST
45527: LIST
45528: PUSH
45529: LD_INT 1
45531: PUSH
45532: LD_INT 0
45534: PUSH
45535: EMPTY
45536: LIST
45537: LIST
45538: PUSH
45539: LD_INT 1
45541: PUSH
45542: LD_INT 1
45544: PUSH
45545: EMPTY
45546: LIST
45547: LIST
45548: PUSH
45549: LD_INT 0
45551: PUSH
45552: LD_INT 1
45554: PUSH
45555: EMPTY
45556: LIST
45557: LIST
45558: PUSH
45559: LD_INT 1
45561: NEG
45562: PUSH
45563: LD_INT 0
45565: PUSH
45566: EMPTY
45567: LIST
45568: LIST
45569: PUSH
45570: LD_INT 1
45572: NEG
45573: PUSH
45574: LD_INT 1
45576: NEG
45577: PUSH
45578: EMPTY
45579: LIST
45580: LIST
45581: PUSH
45582: LD_INT 1
45584: NEG
45585: PUSH
45586: LD_INT 2
45588: NEG
45589: PUSH
45590: EMPTY
45591: LIST
45592: LIST
45593: PUSH
45594: LD_INT 0
45596: PUSH
45597: LD_INT 2
45599: NEG
45600: PUSH
45601: EMPTY
45602: LIST
45603: LIST
45604: PUSH
45605: LD_INT 1
45607: PUSH
45608: LD_INT 1
45610: NEG
45611: PUSH
45612: EMPTY
45613: LIST
45614: LIST
45615: PUSH
45616: LD_INT 2
45618: PUSH
45619: LD_INT 0
45621: PUSH
45622: EMPTY
45623: LIST
45624: LIST
45625: PUSH
45626: LD_INT 2
45628: PUSH
45629: LD_INT 1
45631: PUSH
45632: EMPTY
45633: LIST
45634: LIST
45635: PUSH
45636: LD_INT 2
45638: PUSH
45639: LD_INT 2
45641: PUSH
45642: EMPTY
45643: LIST
45644: LIST
45645: PUSH
45646: LD_INT 1
45648: PUSH
45649: LD_INT 2
45651: PUSH
45652: EMPTY
45653: LIST
45654: LIST
45655: PUSH
45656: LD_INT 0
45658: PUSH
45659: LD_INT 2
45661: PUSH
45662: EMPTY
45663: LIST
45664: LIST
45665: PUSH
45666: LD_INT 1
45668: NEG
45669: PUSH
45670: LD_INT 1
45672: PUSH
45673: EMPTY
45674: LIST
45675: LIST
45676: PUSH
45677: LD_INT 2
45679: NEG
45680: PUSH
45681: LD_INT 0
45683: PUSH
45684: EMPTY
45685: LIST
45686: LIST
45687: PUSH
45688: LD_INT 2
45690: NEG
45691: PUSH
45692: LD_INT 1
45694: NEG
45695: PUSH
45696: EMPTY
45697: LIST
45698: LIST
45699: PUSH
45700: LD_INT 2
45702: NEG
45703: PUSH
45704: LD_INT 2
45706: NEG
45707: PUSH
45708: EMPTY
45709: LIST
45710: LIST
45711: PUSH
45712: EMPTY
45713: LIST
45714: LIST
45715: LIST
45716: LIST
45717: LIST
45718: LIST
45719: LIST
45720: LIST
45721: LIST
45722: LIST
45723: LIST
45724: LIST
45725: LIST
45726: LIST
45727: LIST
45728: LIST
45729: LIST
45730: LIST
45731: LIST
45732: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45733: LD_ADDR_VAR 0 55
45737: PUSH
45738: LD_INT 0
45740: PUSH
45741: LD_INT 0
45743: PUSH
45744: EMPTY
45745: LIST
45746: LIST
45747: PUSH
45748: LD_INT 0
45750: PUSH
45751: LD_INT 1
45753: NEG
45754: PUSH
45755: EMPTY
45756: LIST
45757: LIST
45758: PUSH
45759: LD_INT 1
45761: PUSH
45762: LD_INT 0
45764: PUSH
45765: EMPTY
45766: LIST
45767: LIST
45768: PUSH
45769: LD_INT 1
45771: PUSH
45772: LD_INT 1
45774: PUSH
45775: EMPTY
45776: LIST
45777: LIST
45778: PUSH
45779: LD_INT 0
45781: PUSH
45782: LD_INT 1
45784: PUSH
45785: EMPTY
45786: LIST
45787: LIST
45788: PUSH
45789: LD_INT 1
45791: NEG
45792: PUSH
45793: LD_INT 0
45795: PUSH
45796: EMPTY
45797: LIST
45798: LIST
45799: PUSH
45800: LD_INT 1
45802: NEG
45803: PUSH
45804: LD_INT 1
45806: NEG
45807: PUSH
45808: EMPTY
45809: LIST
45810: LIST
45811: PUSH
45812: LD_INT 1
45814: NEG
45815: PUSH
45816: LD_INT 2
45818: NEG
45819: PUSH
45820: EMPTY
45821: LIST
45822: LIST
45823: PUSH
45824: LD_INT 0
45826: PUSH
45827: LD_INT 2
45829: NEG
45830: PUSH
45831: EMPTY
45832: LIST
45833: LIST
45834: PUSH
45835: LD_INT 1
45837: PUSH
45838: LD_INT 1
45840: NEG
45841: PUSH
45842: EMPTY
45843: LIST
45844: LIST
45845: PUSH
45846: LD_INT 2
45848: PUSH
45849: LD_INT 0
45851: PUSH
45852: EMPTY
45853: LIST
45854: LIST
45855: PUSH
45856: LD_INT 2
45858: PUSH
45859: LD_INT 1
45861: PUSH
45862: EMPTY
45863: LIST
45864: LIST
45865: PUSH
45866: LD_INT 2
45868: PUSH
45869: LD_INT 2
45871: PUSH
45872: EMPTY
45873: LIST
45874: LIST
45875: PUSH
45876: LD_INT 1
45878: PUSH
45879: LD_INT 2
45881: PUSH
45882: EMPTY
45883: LIST
45884: LIST
45885: PUSH
45886: LD_INT 0
45888: PUSH
45889: LD_INT 2
45891: PUSH
45892: EMPTY
45893: LIST
45894: LIST
45895: PUSH
45896: LD_INT 1
45898: NEG
45899: PUSH
45900: LD_INT 1
45902: PUSH
45903: EMPTY
45904: LIST
45905: LIST
45906: PUSH
45907: LD_INT 2
45909: NEG
45910: PUSH
45911: LD_INT 0
45913: PUSH
45914: EMPTY
45915: LIST
45916: LIST
45917: PUSH
45918: LD_INT 2
45920: NEG
45921: PUSH
45922: LD_INT 1
45924: NEG
45925: PUSH
45926: EMPTY
45927: LIST
45928: LIST
45929: PUSH
45930: LD_INT 2
45932: NEG
45933: PUSH
45934: LD_INT 2
45936: NEG
45937: PUSH
45938: EMPTY
45939: LIST
45940: LIST
45941: PUSH
45942: EMPTY
45943: LIST
45944: LIST
45945: LIST
45946: LIST
45947: LIST
45948: LIST
45949: LIST
45950: LIST
45951: LIST
45952: LIST
45953: LIST
45954: LIST
45955: LIST
45956: LIST
45957: LIST
45958: LIST
45959: LIST
45960: LIST
45961: LIST
45962: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45963: LD_ADDR_VAR 0 56
45967: PUSH
45968: LD_INT 0
45970: PUSH
45971: LD_INT 0
45973: PUSH
45974: EMPTY
45975: LIST
45976: LIST
45977: PUSH
45978: LD_INT 0
45980: PUSH
45981: LD_INT 1
45983: NEG
45984: PUSH
45985: EMPTY
45986: LIST
45987: LIST
45988: PUSH
45989: LD_INT 1
45991: PUSH
45992: LD_INT 0
45994: PUSH
45995: EMPTY
45996: LIST
45997: LIST
45998: PUSH
45999: LD_INT 1
46001: PUSH
46002: LD_INT 1
46004: PUSH
46005: EMPTY
46006: LIST
46007: LIST
46008: PUSH
46009: LD_INT 0
46011: PUSH
46012: LD_INT 1
46014: PUSH
46015: EMPTY
46016: LIST
46017: LIST
46018: PUSH
46019: LD_INT 1
46021: NEG
46022: PUSH
46023: LD_INT 0
46025: PUSH
46026: EMPTY
46027: LIST
46028: LIST
46029: PUSH
46030: LD_INT 1
46032: NEG
46033: PUSH
46034: LD_INT 1
46036: NEG
46037: PUSH
46038: EMPTY
46039: LIST
46040: LIST
46041: PUSH
46042: LD_INT 1
46044: NEG
46045: PUSH
46046: LD_INT 2
46048: NEG
46049: PUSH
46050: EMPTY
46051: LIST
46052: LIST
46053: PUSH
46054: LD_INT 0
46056: PUSH
46057: LD_INT 2
46059: NEG
46060: PUSH
46061: EMPTY
46062: LIST
46063: LIST
46064: PUSH
46065: LD_INT 1
46067: PUSH
46068: LD_INT 1
46070: NEG
46071: PUSH
46072: EMPTY
46073: LIST
46074: LIST
46075: PUSH
46076: LD_INT 2
46078: PUSH
46079: LD_INT 0
46081: PUSH
46082: EMPTY
46083: LIST
46084: LIST
46085: PUSH
46086: LD_INT 2
46088: PUSH
46089: LD_INT 1
46091: PUSH
46092: EMPTY
46093: LIST
46094: LIST
46095: PUSH
46096: LD_INT 2
46098: PUSH
46099: LD_INT 2
46101: PUSH
46102: EMPTY
46103: LIST
46104: LIST
46105: PUSH
46106: LD_INT 1
46108: PUSH
46109: LD_INT 2
46111: PUSH
46112: EMPTY
46113: LIST
46114: LIST
46115: PUSH
46116: LD_INT 0
46118: PUSH
46119: LD_INT 2
46121: PUSH
46122: EMPTY
46123: LIST
46124: LIST
46125: PUSH
46126: LD_INT 1
46128: NEG
46129: PUSH
46130: LD_INT 1
46132: PUSH
46133: EMPTY
46134: LIST
46135: LIST
46136: PUSH
46137: LD_INT 2
46139: NEG
46140: PUSH
46141: LD_INT 0
46143: PUSH
46144: EMPTY
46145: LIST
46146: LIST
46147: PUSH
46148: LD_INT 2
46150: NEG
46151: PUSH
46152: LD_INT 1
46154: NEG
46155: PUSH
46156: EMPTY
46157: LIST
46158: LIST
46159: PUSH
46160: LD_INT 2
46162: NEG
46163: PUSH
46164: LD_INT 2
46166: NEG
46167: PUSH
46168: EMPTY
46169: LIST
46170: LIST
46171: PUSH
46172: EMPTY
46173: LIST
46174: LIST
46175: LIST
46176: LIST
46177: LIST
46178: LIST
46179: LIST
46180: LIST
46181: LIST
46182: LIST
46183: LIST
46184: LIST
46185: LIST
46186: LIST
46187: LIST
46188: LIST
46189: LIST
46190: LIST
46191: LIST
46192: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46193: LD_ADDR_VAR 0 57
46197: PUSH
46198: LD_INT 0
46200: PUSH
46201: LD_INT 0
46203: PUSH
46204: EMPTY
46205: LIST
46206: LIST
46207: PUSH
46208: LD_INT 0
46210: PUSH
46211: LD_INT 1
46213: NEG
46214: PUSH
46215: EMPTY
46216: LIST
46217: LIST
46218: PUSH
46219: LD_INT 1
46221: PUSH
46222: LD_INT 0
46224: PUSH
46225: EMPTY
46226: LIST
46227: LIST
46228: PUSH
46229: LD_INT 1
46231: PUSH
46232: LD_INT 1
46234: PUSH
46235: EMPTY
46236: LIST
46237: LIST
46238: PUSH
46239: LD_INT 0
46241: PUSH
46242: LD_INT 1
46244: PUSH
46245: EMPTY
46246: LIST
46247: LIST
46248: PUSH
46249: LD_INT 1
46251: NEG
46252: PUSH
46253: LD_INT 0
46255: PUSH
46256: EMPTY
46257: LIST
46258: LIST
46259: PUSH
46260: LD_INT 1
46262: NEG
46263: PUSH
46264: LD_INT 1
46266: NEG
46267: PUSH
46268: EMPTY
46269: LIST
46270: LIST
46271: PUSH
46272: LD_INT 1
46274: NEG
46275: PUSH
46276: LD_INT 2
46278: NEG
46279: PUSH
46280: EMPTY
46281: LIST
46282: LIST
46283: PUSH
46284: LD_INT 0
46286: PUSH
46287: LD_INT 2
46289: NEG
46290: PUSH
46291: EMPTY
46292: LIST
46293: LIST
46294: PUSH
46295: LD_INT 1
46297: PUSH
46298: LD_INT 1
46300: NEG
46301: PUSH
46302: EMPTY
46303: LIST
46304: LIST
46305: PUSH
46306: LD_INT 2
46308: PUSH
46309: LD_INT 0
46311: PUSH
46312: EMPTY
46313: LIST
46314: LIST
46315: PUSH
46316: LD_INT 2
46318: PUSH
46319: LD_INT 1
46321: PUSH
46322: EMPTY
46323: LIST
46324: LIST
46325: PUSH
46326: LD_INT 2
46328: PUSH
46329: LD_INT 2
46331: PUSH
46332: EMPTY
46333: LIST
46334: LIST
46335: PUSH
46336: LD_INT 1
46338: PUSH
46339: LD_INT 2
46341: PUSH
46342: EMPTY
46343: LIST
46344: LIST
46345: PUSH
46346: LD_INT 0
46348: PUSH
46349: LD_INT 2
46351: PUSH
46352: EMPTY
46353: LIST
46354: LIST
46355: PUSH
46356: LD_INT 1
46358: NEG
46359: PUSH
46360: LD_INT 1
46362: PUSH
46363: EMPTY
46364: LIST
46365: LIST
46366: PUSH
46367: LD_INT 2
46369: NEG
46370: PUSH
46371: LD_INT 0
46373: PUSH
46374: EMPTY
46375: LIST
46376: LIST
46377: PUSH
46378: LD_INT 2
46380: NEG
46381: PUSH
46382: LD_INT 1
46384: NEG
46385: PUSH
46386: EMPTY
46387: LIST
46388: LIST
46389: PUSH
46390: LD_INT 2
46392: NEG
46393: PUSH
46394: LD_INT 2
46396: NEG
46397: PUSH
46398: EMPTY
46399: LIST
46400: LIST
46401: PUSH
46402: EMPTY
46403: LIST
46404: LIST
46405: LIST
46406: LIST
46407: LIST
46408: LIST
46409: LIST
46410: LIST
46411: LIST
46412: LIST
46413: LIST
46414: LIST
46415: LIST
46416: LIST
46417: LIST
46418: LIST
46419: LIST
46420: LIST
46421: LIST
46422: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46423: LD_ADDR_VAR 0 58
46427: PUSH
46428: LD_INT 0
46430: PUSH
46431: LD_INT 0
46433: PUSH
46434: EMPTY
46435: LIST
46436: LIST
46437: PUSH
46438: LD_INT 0
46440: PUSH
46441: LD_INT 1
46443: NEG
46444: PUSH
46445: EMPTY
46446: LIST
46447: LIST
46448: PUSH
46449: LD_INT 1
46451: PUSH
46452: LD_INT 0
46454: PUSH
46455: EMPTY
46456: LIST
46457: LIST
46458: PUSH
46459: LD_INT 1
46461: PUSH
46462: LD_INT 1
46464: PUSH
46465: EMPTY
46466: LIST
46467: LIST
46468: PUSH
46469: LD_INT 0
46471: PUSH
46472: LD_INT 1
46474: PUSH
46475: EMPTY
46476: LIST
46477: LIST
46478: PUSH
46479: LD_INT 1
46481: NEG
46482: PUSH
46483: LD_INT 0
46485: PUSH
46486: EMPTY
46487: LIST
46488: LIST
46489: PUSH
46490: LD_INT 1
46492: NEG
46493: PUSH
46494: LD_INT 1
46496: NEG
46497: PUSH
46498: EMPTY
46499: LIST
46500: LIST
46501: PUSH
46502: LD_INT 1
46504: NEG
46505: PUSH
46506: LD_INT 2
46508: NEG
46509: PUSH
46510: EMPTY
46511: LIST
46512: LIST
46513: PUSH
46514: LD_INT 0
46516: PUSH
46517: LD_INT 2
46519: NEG
46520: PUSH
46521: EMPTY
46522: LIST
46523: LIST
46524: PUSH
46525: LD_INT 1
46527: PUSH
46528: LD_INT 1
46530: NEG
46531: PUSH
46532: EMPTY
46533: LIST
46534: LIST
46535: PUSH
46536: LD_INT 2
46538: PUSH
46539: LD_INT 0
46541: PUSH
46542: EMPTY
46543: LIST
46544: LIST
46545: PUSH
46546: LD_INT 2
46548: PUSH
46549: LD_INT 1
46551: PUSH
46552: EMPTY
46553: LIST
46554: LIST
46555: PUSH
46556: LD_INT 2
46558: PUSH
46559: LD_INT 2
46561: PUSH
46562: EMPTY
46563: LIST
46564: LIST
46565: PUSH
46566: LD_INT 1
46568: PUSH
46569: LD_INT 2
46571: PUSH
46572: EMPTY
46573: LIST
46574: LIST
46575: PUSH
46576: LD_INT 0
46578: PUSH
46579: LD_INT 2
46581: PUSH
46582: EMPTY
46583: LIST
46584: LIST
46585: PUSH
46586: LD_INT 1
46588: NEG
46589: PUSH
46590: LD_INT 1
46592: PUSH
46593: EMPTY
46594: LIST
46595: LIST
46596: PUSH
46597: LD_INT 2
46599: NEG
46600: PUSH
46601: LD_INT 0
46603: PUSH
46604: EMPTY
46605: LIST
46606: LIST
46607: PUSH
46608: LD_INT 2
46610: NEG
46611: PUSH
46612: LD_INT 1
46614: NEG
46615: PUSH
46616: EMPTY
46617: LIST
46618: LIST
46619: PUSH
46620: LD_INT 2
46622: NEG
46623: PUSH
46624: LD_INT 2
46626: NEG
46627: PUSH
46628: EMPTY
46629: LIST
46630: LIST
46631: PUSH
46632: EMPTY
46633: LIST
46634: LIST
46635: LIST
46636: LIST
46637: LIST
46638: LIST
46639: LIST
46640: LIST
46641: LIST
46642: LIST
46643: LIST
46644: LIST
46645: LIST
46646: LIST
46647: LIST
46648: LIST
46649: LIST
46650: LIST
46651: LIST
46652: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
46653: LD_ADDR_VAR 0 59
46657: PUSH
46658: LD_INT 0
46660: PUSH
46661: LD_INT 0
46663: PUSH
46664: EMPTY
46665: LIST
46666: LIST
46667: PUSH
46668: LD_INT 0
46670: PUSH
46671: LD_INT 1
46673: NEG
46674: PUSH
46675: EMPTY
46676: LIST
46677: LIST
46678: PUSH
46679: LD_INT 1
46681: PUSH
46682: LD_INT 0
46684: PUSH
46685: EMPTY
46686: LIST
46687: LIST
46688: PUSH
46689: LD_INT 1
46691: PUSH
46692: LD_INT 1
46694: PUSH
46695: EMPTY
46696: LIST
46697: LIST
46698: PUSH
46699: LD_INT 0
46701: PUSH
46702: LD_INT 1
46704: PUSH
46705: EMPTY
46706: LIST
46707: LIST
46708: PUSH
46709: LD_INT 1
46711: NEG
46712: PUSH
46713: LD_INT 0
46715: PUSH
46716: EMPTY
46717: LIST
46718: LIST
46719: PUSH
46720: LD_INT 1
46722: NEG
46723: PUSH
46724: LD_INT 1
46726: NEG
46727: PUSH
46728: EMPTY
46729: LIST
46730: LIST
46731: PUSH
46732: EMPTY
46733: LIST
46734: LIST
46735: LIST
46736: LIST
46737: LIST
46738: LIST
46739: LIST
46740: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
46741: LD_ADDR_VAR 0 60
46745: PUSH
46746: LD_INT 0
46748: PUSH
46749: LD_INT 0
46751: PUSH
46752: EMPTY
46753: LIST
46754: LIST
46755: PUSH
46756: LD_INT 0
46758: PUSH
46759: LD_INT 1
46761: NEG
46762: PUSH
46763: EMPTY
46764: LIST
46765: LIST
46766: PUSH
46767: LD_INT 1
46769: PUSH
46770: LD_INT 0
46772: PUSH
46773: EMPTY
46774: LIST
46775: LIST
46776: PUSH
46777: LD_INT 1
46779: PUSH
46780: LD_INT 1
46782: PUSH
46783: EMPTY
46784: LIST
46785: LIST
46786: PUSH
46787: LD_INT 0
46789: PUSH
46790: LD_INT 1
46792: PUSH
46793: EMPTY
46794: LIST
46795: LIST
46796: PUSH
46797: LD_INT 1
46799: NEG
46800: PUSH
46801: LD_INT 0
46803: PUSH
46804: EMPTY
46805: LIST
46806: LIST
46807: PUSH
46808: LD_INT 1
46810: NEG
46811: PUSH
46812: LD_INT 1
46814: NEG
46815: PUSH
46816: EMPTY
46817: LIST
46818: LIST
46819: PUSH
46820: EMPTY
46821: LIST
46822: LIST
46823: LIST
46824: LIST
46825: LIST
46826: LIST
46827: LIST
46828: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
46829: LD_ADDR_VAR 0 61
46833: PUSH
46834: LD_INT 0
46836: PUSH
46837: LD_INT 0
46839: PUSH
46840: EMPTY
46841: LIST
46842: LIST
46843: PUSH
46844: LD_INT 0
46846: PUSH
46847: LD_INT 1
46849: NEG
46850: PUSH
46851: EMPTY
46852: LIST
46853: LIST
46854: PUSH
46855: LD_INT 1
46857: PUSH
46858: LD_INT 0
46860: PUSH
46861: EMPTY
46862: LIST
46863: LIST
46864: PUSH
46865: LD_INT 1
46867: PUSH
46868: LD_INT 1
46870: PUSH
46871: EMPTY
46872: LIST
46873: LIST
46874: PUSH
46875: LD_INT 0
46877: PUSH
46878: LD_INT 1
46880: PUSH
46881: EMPTY
46882: LIST
46883: LIST
46884: PUSH
46885: LD_INT 1
46887: NEG
46888: PUSH
46889: LD_INT 0
46891: PUSH
46892: EMPTY
46893: LIST
46894: LIST
46895: PUSH
46896: LD_INT 1
46898: NEG
46899: PUSH
46900: LD_INT 1
46902: NEG
46903: PUSH
46904: EMPTY
46905: LIST
46906: LIST
46907: PUSH
46908: EMPTY
46909: LIST
46910: LIST
46911: LIST
46912: LIST
46913: LIST
46914: LIST
46915: LIST
46916: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
46917: LD_ADDR_VAR 0 62
46921: PUSH
46922: LD_INT 0
46924: PUSH
46925: LD_INT 0
46927: PUSH
46928: EMPTY
46929: LIST
46930: LIST
46931: PUSH
46932: LD_INT 0
46934: PUSH
46935: LD_INT 1
46937: NEG
46938: PUSH
46939: EMPTY
46940: LIST
46941: LIST
46942: PUSH
46943: LD_INT 1
46945: PUSH
46946: LD_INT 0
46948: PUSH
46949: EMPTY
46950: LIST
46951: LIST
46952: PUSH
46953: LD_INT 1
46955: PUSH
46956: LD_INT 1
46958: PUSH
46959: EMPTY
46960: LIST
46961: LIST
46962: PUSH
46963: LD_INT 0
46965: PUSH
46966: LD_INT 1
46968: PUSH
46969: EMPTY
46970: LIST
46971: LIST
46972: PUSH
46973: LD_INT 1
46975: NEG
46976: PUSH
46977: LD_INT 0
46979: PUSH
46980: EMPTY
46981: LIST
46982: LIST
46983: PUSH
46984: LD_INT 1
46986: NEG
46987: PUSH
46988: LD_INT 1
46990: NEG
46991: PUSH
46992: EMPTY
46993: LIST
46994: LIST
46995: PUSH
46996: EMPTY
46997: LIST
46998: LIST
46999: LIST
47000: LIST
47001: LIST
47002: LIST
47003: LIST
47004: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
47005: LD_ADDR_VAR 0 63
47009: PUSH
47010: LD_INT 0
47012: PUSH
47013: LD_INT 0
47015: PUSH
47016: EMPTY
47017: LIST
47018: LIST
47019: PUSH
47020: LD_INT 0
47022: PUSH
47023: LD_INT 1
47025: NEG
47026: PUSH
47027: EMPTY
47028: LIST
47029: LIST
47030: PUSH
47031: LD_INT 1
47033: PUSH
47034: LD_INT 0
47036: PUSH
47037: EMPTY
47038: LIST
47039: LIST
47040: PUSH
47041: LD_INT 1
47043: PUSH
47044: LD_INT 1
47046: PUSH
47047: EMPTY
47048: LIST
47049: LIST
47050: PUSH
47051: LD_INT 0
47053: PUSH
47054: LD_INT 1
47056: PUSH
47057: EMPTY
47058: LIST
47059: LIST
47060: PUSH
47061: LD_INT 1
47063: NEG
47064: PUSH
47065: LD_INT 0
47067: PUSH
47068: EMPTY
47069: LIST
47070: LIST
47071: PUSH
47072: LD_INT 1
47074: NEG
47075: PUSH
47076: LD_INT 1
47078: NEG
47079: PUSH
47080: EMPTY
47081: LIST
47082: LIST
47083: PUSH
47084: EMPTY
47085: LIST
47086: LIST
47087: LIST
47088: LIST
47089: LIST
47090: LIST
47091: LIST
47092: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
47093: LD_ADDR_VAR 0 64
47097: PUSH
47098: LD_INT 0
47100: PUSH
47101: LD_INT 0
47103: PUSH
47104: EMPTY
47105: LIST
47106: LIST
47107: PUSH
47108: LD_INT 0
47110: PUSH
47111: LD_INT 1
47113: NEG
47114: PUSH
47115: EMPTY
47116: LIST
47117: LIST
47118: PUSH
47119: LD_INT 1
47121: PUSH
47122: LD_INT 0
47124: PUSH
47125: EMPTY
47126: LIST
47127: LIST
47128: PUSH
47129: LD_INT 1
47131: PUSH
47132: LD_INT 1
47134: PUSH
47135: EMPTY
47136: LIST
47137: LIST
47138: PUSH
47139: LD_INT 0
47141: PUSH
47142: LD_INT 1
47144: PUSH
47145: EMPTY
47146: LIST
47147: LIST
47148: PUSH
47149: LD_INT 1
47151: NEG
47152: PUSH
47153: LD_INT 0
47155: PUSH
47156: EMPTY
47157: LIST
47158: LIST
47159: PUSH
47160: LD_INT 1
47162: NEG
47163: PUSH
47164: LD_INT 1
47166: NEG
47167: PUSH
47168: EMPTY
47169: LIST
47170: LIST
47171: PUSH
47172: EMPTY
47173: LIST
47174: LIST
47175: LIST
47176: LIST
47177: LIST
47178: LIST
47179: LIST
47180: ST_TO_ADDR
// end ; 1 :
47181: GO 53078
47183: LD_INT 1
47185: DOUBLE
47186: EQUAL
47187: IFTRUE 47191
47189: GO 49814
47191: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
47192: LD_ADDR_VAR 0 11
47196: PUSH
47197: LD_INT 1
47199: NEG
47200: PUSH
47201: LD_INT 3
47203: NEG
47204: PUSH
47205: EMPTY
47206: LIST
47207: LIST
47208: PUSH
47209: LD_INT 0
47211: PUSH
47212: LD_INT 3
47214: NEG
47215: PUSH
47216: EMPTY
47217: LIST
47218: LIST
47219: PUSH
47220: LD_INT 1
47222: PUSH
47223: LD_INT 2
47225: NEG
47226: PUSH
47227: EMPTY
47228: LIST
47229: LIST
47230: PUSH
47231: EMPTY
47232: LIST
47233: LIST
47234: LIST
47235: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
47236: LD_ADDR_VAR 0 12
47240: PUSH
47241: LD_INT 2
47243: PUSH
47244: LD_INT 1
47246: NEG
47247: PUSH
47248: EMPTY
47249: LIST
47250: LIST
47251: PUSH
47252: LD_INT 3
47254: PUSH
47255: LD_INT 0
47257: PUSH
47258: EMPTY
47259: LIST
47260: LIST
47261: PUSH
47262: LD_INT 3
47264: PUSH
47265: LD_INT 1
47267: PUSH
47268: EMPTY
47269: LIST
47270: LIST
47271: PUSH
47272: EMPTY
47273: LIST
47274: LIST
47275: LIST
47276: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
47277: LD_ADDR_VAR 0 13
47281: PUSH
47282: LD_INT 3
47284: PUSH
47285: LD_INT 2
47287: PUSH
47288: EMPTY
47289: LIST
47290: LIST
47291: PUSH
47292: LD_INT 3
47294: PUSH
47295: LD_INT 3
47297: PUSH
47298: EMPTY
47299: LIST
47300: LIST
47301: PUSH
47302: LD_INT 2
47304: PUSH
47305: LD_INT 3
47307: PUSH
47308: EMPTY
47309: LIST
47310: LIST
47311: PUSH
47312: EMPTY
47313: LIST
47314: LIST
47315: LIST
47316: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
47317: LD_ADDR_VAR 0 14
47321: PUSH
47322: LD_INT 1
47324: PUSH
47325: LD_INT 3
47327: PUSH
47328: EMPTY
47329: LIST
47330: LIST
47331: PUSH
47332: LD_INT 0
47334: PUSH
47335: LD_INT 3
47337: PUSH
47338: EMPTY
47339: LIST
47340: LIST
47341: PUSH
47342: LD_INT 1
47344: NEG
47345: PUSH
47346: LD_INT 2
47348: PUSH
47349: EMPTY
47350: LIST
47351: LIST
47352: PUSH
47353: EMPTY
47354: LIST
47355: LIST
47356: LIST
47357: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
47358: LD_ADDR_VAR 0 15
47362: PUSH
47363: LD_INT 2
47365: NEG
47366: PUSH
47367: LD_INT 1
47369: PUSH
47370: EMPTY
47371: LIST
47372: LIST
47373: PUSH
47374: LD_INT 3
47376: NEG
47377: PUSH
47378: LD_INT 0
47380: PUSH
47381: EMPTY
47382: LIST
47383: LIST
47384: PUSH
47385: LD_INT 3
47387: NEG
47388: PUSH
47389: LD_INT 1
47391: NEG
47392: PUSH
47393: EMPTY
47394: LIST
47395: LIST
47396: PUSH
47397: EMPTY
47398: LIST
47399: LIST
47400: LIST
47401: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47402: LD_ADDR_VAR 0 16
47406: PUSH
47407: LD_INT 2
47409: NEG
47410: PUSH
47411: LD_INT 3
47413: NEG
47414: PUSH
47415: EMPTY
47416: LIST
47417: LIST
47418: PUSH
47419: LD_INT 3
47421: NEG
47422: PUSH
47423: LD_INT 2
47425: NEG
47426: PUSH
47427: EMPTY
47428: LIST
47429: LIST
47430: PUSH
47431: LD_INT 3
47433: NEG
47434: PUSH
47435: LD_INT 3
47437: NEG
47438: PUSH
47439: EMPTY
47440: LIST
47441: LIST
47442: PUSH
47443: EMPTY
47444: LIST
47445: LIST
47446: LIST
47447: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
47448: LD_ADDR_VAR 0 17
47452: PUSH
47453: LD_INT 1
47455: NEG
47456: PUSH
47457: LD_INT 3
47459: NEG
47460: PUSH
47461: EMPTY
47462: LIST
47463: LIST
47464: PUSH
47465: LD_INT 0
47467: PUSH
47468: LD_INT 3
47470: NEG
47471: PUSH
47472: EMPTY
47473: LIST
47474: LIST
47475: PUSH
47476: LD_INT 1
47478: PUSH
47479: LD_INT 2
47481: NEG
47482: PUSH
47483: EMPTY
47484: LIST
47485: LIST
47486: PUSH
47487: EMPTY
47488: LIST
47489: LIST
47490: LIST
47491: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
47492: LD_ADDR_VAR 0 18
47496: PUSH
47497: LD_INT 2
47499: PUSH
47500: LD_INT 1
47502: NEG
47503: PUSH
47504: EMPTY
47505: LIST
47506: LIST
47507: PUSH
47508: LD_INT 3
47510: PUSH
47511: LD_INT 0
47513: PUSH
47514: EMPTY
47515: LIST
47516: LIST
47517: PUSH
47518: LD_INT 3
47520: PUSH
47521: LD_INT 1
47523: PUSH
47524: EMPTY
47525: LIST
47526: LIST
47527: PUSH
47528: EMPTY
47529: LIST
47530: LIST
47531: LIST
47532: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
47533: LD_ADDR_VAR 0 19
47537: PUSH
47538: LD_INT 3
47540: PUSH
47541: LD_INT 2
47543: PUSH
47544: EMPTY
47545: LIST
47546: LIST
47547: PUSH
47548: LD_INT 3
47550: PUSH
47551: LD_INT 3
47553: PUSH
47554: EMPTY
47555: LIST
47556: LIST
47557: PUSH
47558: LD_INT 2
47560: PUSH
47561: LD_INT 3
47563: PUSH
47564: EMPTY
47565: LIST
47566: LIST
47567: PUSH
47568: EMPTY
47569: LIST
47570: LIST
47571: LIST
47572: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
47573: LD_ADDR_VAR 0 20
47577: PUSH
47578: LD_INT 1
47580: PUSH
47581: LD_INT 3
47583: PUSH
47584: EMPTY
47585: LIST
47586: LIST
47587: PUSH
47588: LD_INT 0
47590: PUSH
47591: LD_INT 3
47593: PUSH
47594: EMPTY
47595: LIST
47596: LIST
47597: PUSH
47598: LD_INT 1
47600: NEG
47601: PUSH
47602: LD_INT 2
47604: PUSH
47605: EMPTY
47606: LIST
47607: LIST
47608: PUSH
47609: EMPTY
47610: LIST
47611: LIST
47612: LIST
47613: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
47614: LD_ADDR_VAR 0 21
47618: PUSH
47619: LD_INT 2
47621: NEG
47622: PUSH
47623: LD_INT 1
47625: PUSH
47626: EMPTY
47627: LIST
47628: LIST
47629: PUSH
47630: LD_INT 3
47632: NEG
47633: PUSH
47634: LD_INT 0
47636: PUSH
47637: EMPTY
47638: LIST
47639: LIST
47640: PUSH
47641: LD_INT 3
47643: NEG
47644: PUSH
47645: LD_INT 1
47647: NEG
47648: PUSH
47649: EMPTY
47650: LIST
47651: LIST
47652: PUSH
47653: EMPTY
47654: LIST
47655: LIST
47656: LIST
47657: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47658: LD_ADDR_VAR 0 22
47662: PUSH
47663: LD_INT 2
47665: NEG
47666: PUSH
47667: LD_INT 3
47669: NEG
47670: PUSH
47671: EMPTY
47672: LIST
47673: LIST
47674: PUSH
47675: LD_INT 3
47677: NEG
47678: PUSH
47679: LD_INT 2
47681: NEG
47682: PUSH
47683: EMPTY
47684: LIST
47685: LIST
47686: PUSH
47687: LD_INT 3
47689: NEG
47690: PUSH
47691: LD_INT 3
47693: NEG
47694: PUSH
47695: EMPTY
47696: LIST
47697: LIST
47698: PUSH
47699: EMPTY
47700: LIST
47701: LIST
47702: LIST
47703: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
47704: LD_ADDR_VAR 0 23
47708: PUSH
47709: LD_INT 0
47711: PUSH
47712: LD_INT 3
47714: NEG
47715: PUSH
47716: EMPTY
47717: LIST
47718: LIST
47719: PUSH
47720: LD_INT 1
47722: NEG
47723: PUSH
47724: LD_INT 4
47726: NEG
47727: PUSH
47728: EMPTY
47729: LIST
47730: LIST
47731: PUSH
47732: LD_INT 1
47734: PUSH
47735: LD_INT 3
47737: NEG
47738: PUSH
47739: EMPTY
47740: LIST
47741: LIST
47742: PUSH
47743: EMPTY
47744: LIST
47745: LIST
47746: LIST
47747: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
47748: LD_ADDR_VAR 0 24
47752: PUSH
47753: LD_INT 3
47755: PUSH
47756: LD_INT 0
47758: PUSH
47759: EMPTY
47760: LIST
47761: LIST
47762: PUSH
47763: LD_INT 3
47765: PUSH
47766: LD_INT 1
47768: NEG
47769: PUSH
47770: EMPTY
47771: LIST
47772: LIST
47773: PUSH
47774: LD_INT 4
47776: PUSH
47777: LD_INT 1
47779: PUSH
47780: EMPTY
47781: LIST
47782: LIST
47783: PUSH
47784: EMPTY
47785: LIST
47786: LIST
47787: LIST
47788: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
47789: LD_ADDR_VAR 0 25
47793: PUSH
47794: LD_INT 3
47796: PUSH
47797: LD_INT 3
47799: PUSH
47800: EMPTY
47801: LIST
47802: LIST
47803: PUSH
47804: LD_INT 4
47806: PUSH
47807: LD_INT 3
47809: PUSH
47810: EMPTY
47811: LIST
47812: LIST
47813: PUSH
47814: LD_INT 3
47816: PUSH
47817: LD_INT 4
47819: PUSH
47820: EMPTY
47821: LIST
47822: LIST
47823: PUSH
47824: EMPTY
47825: LIST
47826: LIST
47827: LIST
47828: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
47829: LD_ADDR_VAR 0 26
47833: PUSH
47834: LD_INT 0
47836: PUSH
47837: LD_INT 3
47839: PUSH
47840: EMPTY
47841: LIST
47842: LIST
47843: PUSH
47844: LD_INT 1
47846: PUSH
47847: LD_INT 4
47849: PUSH
47850: EMPTY
47851: LIST
47852: LIST
47853: PUSH
47854: LD_INT 1
47856: NEG
47857: PUSH
47858: LD_INT 3
47860: PUSH
47861: EMPTY
47862: LIST
47863: LIST
47864: PUSH
47865: EMPTY
47866: LIST
47867: LIST
47868: LIST
47869: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
47870: LD_ADDR_VAR 0 27
47874: PUSH
47875: LD_INT 3
47877: NEG
47878: PUSH
47879: LD_INT 0
47881: PUSH
47882: EMPTY
47883: LIST
47884: LIST
47885: PUSH
47886: LD_INT 3
47888: NEG
47889: PUSH
47890: LD_INT 1
47892: PUSH
47893: EMPTY
47894: LIST
47895: LIST
47896: PUSH
47897: LD_INT 4
47899: NEG
47900: PUSH
47901: LD_INT 1
47903: NEG
47904: PUSH
47905: EMPTY
47906: LIST
47907: LIST
47908: PUSH
47909: EMPTY
47910: LIST
47911: LIST
47912: LIST
47913: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
47914: LD_ADDR_VAR 0 28
47918: PUSH
47919: LD_INT 3
47921: NEG
47922: PUSH
47923: LD_INT 3
47925: NEG
47926: PUSH
47927: EMPTY
47928: LIST
47929: LIST
47930: PUSH
47931: LD_INT 3
47933: NEG
47934: PUSH
47935: LD_INT 4
47937: NEG
47938: PUSH
47939: EMPTY
47940: LIST
47941: LIST
47942: PUSH
47943: LD_INT 4
47945: NEG
47946: PUSH
47947: LD_INT 3
47949: NEG
47950: PUSH
47951: EMPTY
47952: LIST
47953: LIST
47954: PUSH
47955: EMPTY
47956: LIST
47957: LIST
47958: LIST
47959: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
47960: LD_ADDR_VAR 0 29
47964: PUSH
47965: LD_INT 1
47967: NEG
47968: PUSH
47969: LD_INT 3
47971: NEG
47972: PUSH
47973: EMPTY
47974: LIST
47975: LIST
47976: PUSH
47977: LD_INT 0
47979: PUSH
47980: LD_INT 3
47982: NEG
47983: PUSH
47984: EMPTY
47985: LIST
47986: LIST
47987: PUSH
47988: LD_INT 1
47990: PUSH
47991: LD_INT 2
47993: NEG
47994: PUSH
47995: EMPTY
47996: LIST
47997: LIST
47998: PUSH
47999: LD_INT 1
48001: NEG
48002: PUSH
48003: LD_INT 4
48005: NEG
48006: PUSH
48007: EMPTY
48008: LIST
48009: LIST
48010: PUSH
48011: LD_INT 0
48013: PUSH
48014: LD_INT 4
48016: NEG
48017: PUSH
48018: EMPTY
48019: LIST
48020: LIST
48021: PUSH
48022: LD_INT 1
48024: PUSH
48025: LD_INT 3
48027: NEG
48028: PUSH
48029: EMPTY
48030: LIST
48031: LIST
48032: PUSH
48033: LD_INT 1
48035: NEG
48036: PUSH
48037: LD_INT 5
48039: NEG
48040: PUSH
48041: EMPTY
48042: LIST
48043: LIST
48044: PUSH
48045: LD_INT 0
48047: PUSH
48048: LD_INT 5
48050: NEG
48051: PUSH
48052: EMPTY
48053: LIST
48054: LIST
48055: PUSH
48056: LD_INT 1
48058: PUSH
48059: LD_INT 4
48061: NEG
48062: PUSH
48063: EMPTY
48064: LIST
48065: LIST
48066: PUSH
48067: LD_INT 1
48069: NEG
48070: PUSH
48071: LD_INT 6
48073: NEG
48074: PUSH
48075: EMPTY
48076: LIST
48077: LIST
48078: PUSH
48079: LD_INT 0
48081: PUSH
48082: LD_INT 6
48084: NEG
48085: PUSH
48086: EMPTY
48087: LIST
48088: LIST
48089: PUSH
48090: LD_INT 1
48092: PUSH
48093: LD_INT 5
48095: NEG
48096: PUSH
48097: EMPTY
48098: LIST
48099: LIST
48100: PUSH
48101: EMPTY
48102: LIST
48103: LIST
48104: LIST
48105: LIST
48106: LIST
48107: LIST
48108: LIST
48109: LIST
48110: LIST
48111: LIST
48112: LIST
48113: LIST
48114: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
48115: LD_ADDR_VAR 0 30
48119: PUSH
48120: LD_INT 2
48122: PUSH
48123: LD_INT 1
48125: NEG
48126: PUSH
48127: EMPTY
48128: LIST
48129: LIST
48130: PUSH
48131: LD_INT 3
48133: PUSH
48134: LD_INT 0
48136: PUSH
48137: EMPTY
48138: LIST
48139: LIST
48140: PUSH
48141: LD_INT 3
48143: PUSH
48144: LD_INT 1
48146: PUSH
48147: EMPTY
48148: LIST
48149: LIST
48150: PUSH
48151: LD_INT 3
48153: PUSH
48154: LD_INT 1
48156: NEG
48157: PUSH
48158: EMPTY
48159: LIST
48160: LIST
48161: PUSH
48162: LD_INT 4
48164: PUSH
48165: LD_INT 0
48167: PUSH
48168: EMPTY
48169: LIST
48170: LIST
48171: PUSH
48172: LD_INT 4
48174: PUSH
48175: LD_INT 1
48177: PUSH
48178: EMPTY
48179: LIST
48180: LIST
48181: PUSH
48182: LD_INT 4
48184: PUSH
48185: LD_INT 1
48187: NEG
48188: PUSH
48189: EMPTY
48190: LIST
48191: LIST
48192: PUSH
48193: LD_INT 5
48195: PUSH
48196: LD_INT 0
48198: PUSH
48199: EMPTY
48200: LIST
48201: LIST
48202: PUSH
48203: LD_INT 5
48205: PUSH
48206: LD_INT 1
48208: PUSH
48209: EMPTY
48210: LIST
48211: LIST
48212: PUSH
48213: LD_INT 5
48215: PUSH
48216: LD_INT 1
48218: NEG
48219: PUSH
48220: EMPTY
48221: LIST
48222: LIST
48223: PUSH
48224: LD_INT 6
48226: PUSH
48227: LD_INT 0
48229: PUSH
48230: EMPTY
48231: LIST
48232: LIST
48233: PUSH
48234: LD_INT 6
48236: PUSH
48237: LD_INT 1
48239: PUSH
48240: EMPTY
48241: LIST
48242: LIST
48243: PUSH
48244: EMPTY
48245: LIST
48246: LIST
48247: LIST
48248: LIST
48249: LIST
48250: LIST
48251: LIST
48252: LIST
48253: LIST
48254: LIST
48255: LIST
48256: LIST
48257: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
48258: LD_ADDR_VAR 0 31
48262: PUSH
48263: LD_INT 3
48265: PUSH
48266: LD_INT 2
48268: PUSH
48269: EMPTY
48270: LIST
48271: LIST
48272: PUSH
48273: LD_INT 3
48275: PUSH
48276: LD_INT 3
48278: PUSH
48279: EMPTY
48280: LIST
48281: LIST
48282: PUSH
48283: LD_INT 2
48285: PUSH
48286: LD_INT 3
48288: PUSH
48289: EMPTY
48290: LIST
48291: LIST
48292: PUSH
48293: LD_INT 4
48295: PUSH
48296: LD_INT 3
48298: PUSH
48299: EMPTY
48300: LIST
48301: LIST
48302: PUSH
48303: LD_INT 4
48305: PUSH
48306: LD_INT 4
48308: PUSH
48309: EMPTY
48310: LIST
48311: LIST
48312: PUSH
48313: LD_INT 3
48315: PUSH
48316: LD_INT 4
48318: PUSH
48319: EMPTY
48320: LIST
48321: LIST
48322: PUSH
48323: LD_INT 5
48325: PUSH
48326: LD_INT 4
48328: PUSH
48329: EMPTY
48330: LIST
48331: LIST
48332: PUSH
48333: LD_INT 5
48335: PUSH
48336: LD_INT 5
48338: PUSH
48339: EMPTY
48340: LIST
48341: LIST
48342: PUSH
48343: LD_INT 4
48345: PUSH
48346: LD_INT 5
48348: PUSH
48349: EMPTY
48350: LIST
48351: LIST
48352: PUSH
48353: LD_INT 6
48355: PUSH
48356: LD_INT 5
48358: PUSH
48359: EMPTY
48360: LIST
48361: LIST
48362: PUSH
48363: LD_INT 6
48365: PUSH
48366: LD_INT 6
48368: PUSH
48369: EMPTY
48370: LIST
48371: LIST
48372: PUSH
48373: LD_INT 5
48375: PUSH
48376: LD_INT 6
48378: PUSH
48379: EMPTY
48380: LIST
48381: LIST
48382: PUSH
48383: EMPTY
48384: LIST
48385: LIST
48386: LIST
48387: LIST
48388: LIST
48389: LIST
48390: LIST
48391: LIST
48392: LIST
48393: LIST
48394: LIST
48395: LIST
48396: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
48397: LD_ADDR_VAR 0 32
48401: PUSH
48402: LD_INT 1
48404: PUSH
48405: LD_INT 3
48407: PUSH
48408: EMPTY
48409: LIST
48410: LIST
48411: PUSH
48412: LD_INT 0
48414: PUSH
48415: LD_INT 3
48417: PUSH
48418: EMPTY
48419: LIST
48420: LIST
48421: PUSH
48422: LD_INT 1
48424: NEG
48425: PUSH
48426: LD_INT 2
48428: PUSH
48429: EMPTY
48430: LIST
48431: LIST
48432: PUSH
48433: LD_INT 1
48435: PUSH
48436: LD_INT 4
48438: PUSH
48439: EMPTY
48440: LIST
48441: LIST
48442: PUSH
48443: LD_INT 0
48445: PUSH
48446: LD_INT 4
48448: PUSH
48449: EMPTY
48450: LIST
48451: LIST
48452: PUSH
48453: LD_INT 1
48455: NEG
48456: PUSH
48457: LD_INT 3
48459: PUSH
48460: EMPTY
48461: LIST
48462: LIST
48463: PUSH
48464: LD_INT 1
48466: PUSH
48467: LD_INT 5
48469: PUSH
48470: EMPTY
48471: LIST
48472: LIST
48473: PUSH
48474: LD_INT 0
48476: PUSH
48477: LD_INT 5
48479: PUSH
48480: EMPTY
48481: LIST
48482: LIST
48483: PUSH
48484: LD_INT 1
48486: NEG
48487: PUSH
48488: LD_INT 4
48490: PUSH
48491: EMPTY
48492: LIST
48493: LIST
48494: PUSH
48495: LD_INT 1
48497: PUSH
48498: LD_INT 6
48500: PUSH
48501: EMPTY
48502: LIST
48503: LIST
48504: PUSH
48505: LD_INT 0
48507: PUSH
48508: LD_INT 6
48510: PUSH
48511: EMPTY
48512: LIST
48513: LIST
48514: PUSH
48515: LD_INT 1
48517: NEG
48518: PUSH
48519: LD_INT 5
48521: PUSH
48522: EMPTY
48523: LIST
48524: LIST
48525: PUSH
48526: EMPTY
48527: LIST
48528: LIST
48529: LIST
48530: LIST
48531: LIST
48532: LIST
48533: LIST
48534: LIST
48535: LIST
48536: LIST
48537: LIST
48538: LIST
48539: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
48540: LD_ADDR_VAR 0 33
48544: PUSH
48545: LD_INT 2
48547: NEG
48548: PUSH
48549: LD_INT 1
48551: PUSH
48552: EMPTY
48553: LIST
48554: LIST
48555: PUSH
48556: LD_INT 3
48558: NEG
48559: PUSH
48560: LD_INT 0
48562: PUSH
48563: EMPTY
48564: LIST
48565: LIST
48566: PUSH
48567: LD_INT 3
48569: NEG
48570: PUSH
48571: LD_INT 1
48573: NEG
48574: PUSH
48575: EMPTY
48576: LIST
48577: LIST
48578: PUSH
48579: LD_INT 3
48581: NEG
48582: PUSH
48583: LD_INT 1
48585: PUSH
48586: EMPTY
48587: LIST
48588: LIST
48589: PUSH
48590: LD_INT 4
48592: NEG
48593: PUSH
48594: LD_INT 0
48596: PUSH
48597: EMPTY
48598: LIST
48599: LIST
48600: PUSH
48601: LD_INT 4
48603: NEG
48604: PUSH
48605: LD_INT 1
48607: NEG
48608: PUSH
48609: EMPTY
48610: LIST
48611: LIST
48612: PUSH
48613: LD_INT 4
48615: NEG
48616: PUSH
48617: LD_INT 1
48619: PUSH
48620: EMPTY
48621: LIST
48622: LIST
48623: PUSH
48624: LD_INT 5
48626: NEG
48627: PUSH
48628: LD_INT 0
48630: PUSH
48631: EMPTY
48632: LIST
48633: LIST
48634: PUSH
48635: LD_INT 5
48637: NEG
48638: PUSH
48639: LD_INT 1
48641: NEG
48642: PUSH
48643: EMPTY
48644: LIST
48645: LIST
48646: PUSH
48647: LD_INT 5
48649: NEG
48650: PUSH
48651: LD_INT 1
48653: PUSH
48654: EMPTY
48655: LIST
48656: LIST
48657: PUSH
48658: LD_INT 6
48660: NEG
48661: PUSH
48662: LD_INT 0
48664: PUSH
48665: EMPTY
48666: LIST
48667: LIST
48668: PUSH
48669: LD_INT 6
48671: NEG
48672: PUSH
48673: LD_INT 1
48675: NEG
48676: PUSH
48677: EMPTY
48678: LIST
48679: LIST
48680: PUSH
48681: EMPTY
48682: LIST
48683: LIST
48684: LIST
48685: LIST
48686: LIST
48687: LIST
48688: LIST
48689: LIST
48690: LIST
48691: LIST
48692: LIST
48693: LIST
48694: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
48695: LD_ADDR_VAR 0 34
48699: PUSH
48700: LD_INT 2
48702: NEG
48703: PUSH
48704: LD_INT 3
48706: NEG
48707: PUSH
48708: EMPTY
48709: LIST
48710: LIST
48711: PUSH
48712: LD_INT 3
48714: NEG
48715: PUSH
48716: LD_INT 2
48718: NEG
48719: PUSH
48720: EMPTY
48721: LIST
48722: LIST
48723: PUSH
48724: LD_INT 3
48726: NEG
48727: PUSH
48728: LD_INT 3
48730: NEG
48731: PUSH
48732: EMPTY
48733: LIST
48734: LIST
48735: PUSH
48736: LD_INT 3
48738: NEG
48739: PUSH
48740: LD_INT 4
48742: NEG
48743: PUSH
48744: EMPTY
48745: LIST
48746: LIST
48747: PUSH
48748: LD_INT 4
48750: NEG
48751: PUSH
48752: LD_INT 3
48754: NEG
48755: PUSH
48756: EMPTY
48757: LIST
48758: LIST
48759: PUSH
48760: LD_INT 4
48762: NEG
48763: PUSH
48764: LD_INT 4
48766: NEG
48767: PUSH
48768: EMPTY
48769: LIST
48770: LIST
48771: PUSH
48772: LD_INT 4
48774: NEG
48775: PUSH
48776: LD_INT 5
48778: NEG
48779: PUSH
48780: EMPTY
48781: LIST
48782: LIST
48783: PUSH
48784: LD_INT 5
48786: NEG
48787: PUSH
48788: LD_INT 4
48790: NEG
48791: PUSH
48792: EMPTY
48793: LIST
48794: LIST
48795: PUSH
48796: LD_INT 5
48798: NEG
48799: PUSH
48800: LD_INT 5
48802: NEG
48803: PUSH
48804: EMPTY
48805: LIST
48806: LIST
48807: PUSH
48808: LD_INT 5
48810: NEG
48811: PUSH
48812: LD_INT 6
48814: NEG
48815: PUSH
48816: EMPTY
48817: LIST
48818: LIST
48819: PUSH
48820: LD_INT 6
48822: NEG
48823: PUSH
48824: LD_INT 5
48826: NEG
48827: PUSH
48828: EMPTY
48829: LIST
48830: LIST
48831: PUSH
48832: LD_INT 6
48834: NEG
48835: PUSH
48836: LD_INT 6
48838: NEG
48839: PUSH
48840: EMPTY
48841: LIST
48842: LIST
48843: PUSH
48844: EMPTY
48845: LIST
48846: LIST
48847: LIST
48848: LIST
48849: LIST
48850: LIST
48851: LIST
48852: LIST
48853: LIST
48854: LIST
48855: LIST
48856: LIST
48857: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
48858: LD_ADDR_VAR 0 41
48862: PUSH
48863: LD_INT 0
48865: PUSH
48866: LD_INT 2
48868: NEG
48869: PUSH
48870: EMPTY
48871: LIST
48872: LIST
48873: PUSH
48874: LD_INT 1
48876: NEG
48877: PUSH
48878: LD_INT 3
48880: NEG
48881: PUSH
48882: EMPTY
48883: LIST
48884: LIST
48885: PUSH
48886: LD_INT 1
48888: PUSH
48889: LD_INT 2
48891: NEG
48892: PUSH
48893: EMPTY
48894: LIST
48895: LIST
48896: PUSH
48897: EMPTY
48898: LIST
48899: LIST
48900: LIST
48901: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
48902: LD_ADDR_VAR 0 42
48906: PUSH
48907: LD_INT 2
48909: PUSH
48910: LD_INT 0
48912: PUSH
48913: EMPTY
48914: LIST
48915: LIST
48916: PUSH
48917: LD_INT 2
48919: PUSH
48920: LD_INT 1
48922: NEG
48923: PUSH
48924: EMPTY
48925: LIST
48926: LIST
48927: PUSH
48928: LD_INT 3
48930: PUSH
48931: LD_INT 1
48933: PUSH
48934: EMPTY
48935: LIST
48936: LIST
48937: PUSH
48938: EMPTY
48939: LIST
48940: LIST
48941: LIST
48942: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
48943: LD_ADDR_VAR 0 43
48947: PUSH
48948: LD_INT 2
48950: PUSH
48951: LD_INT 2
48953: PUSH
48954: EMPTY
48955: LIST
48956: LIST
48957: PUSH
48958: LD_INT 3
48960: PUSH
48961: LD_INT 2
48963: PUSH
48964: EMPTY
48965: LIST
48966: LIST
48967: PUSH
48968: LD_INT 2
48970: PUSH
48971: LD_INT 3
48973: PUSH
48974: EMPTY
48975: LIST
48976: LIST
48977: PUSH
48978: EMPTY
48979: LIST
48980: LIST
48981: LIST
48982: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
48983: LD_ADDR_VAR 0 44
48987: PUSH
48988: LD_INT 0
48990: PUSH
48991: LD_INT 2
48993: PUSH
48994: EMPTY
48995: LIST
48996: LIST
48997: PUSH
48998: LD_INT 1
49000: PUSH
49001: LD_INT 3
49003: PUSH
49004: EMPTY
49005: LIST
49006: LIST
49007: PUSH
49008: LD_INT 1
49010: NEG
49011: PUSH
49012: LD_INT 2
49014: PUSH
49015: EMPTY
49016: LIST
49017: LIST
49018: PUSH
49019: EMPTY
49020: LIST
49021: LIST
49022: LIST
49023: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
49024: LD_ADDR_VAR 0 45
49028: PUSH
49029: LD_INT 2
49031: NEG
49032: PUSH
49033: LD_INT 0
49035: PUSH
49036: EMPTY
49037: LIST
49038: LIST
49039: PUSH
49040: LD_INT 2
49042: NEG
49043: PUSH
49044: LD_INT 1
49046: PUSH
49047: EMPTY
49048: LIST
49049: LIST
49050: PUSH
49051: LD_INT 3
49053: NEG
49054: PUSH
49055: LD_INT 1
49057: NEG
49058: PUSH
49059: EMPTY
49060: LIST
49061: LIST
49062: PUSH
49063: EMPTY
49064: LIST
49065: LIST
49066: LIST
49067: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
49068: LD_ADDR_VAR 0 46
49072: PUSH
49073: LD_INT 2
49075: NEG
49076: PUSH
49077: LD_INT 2
49079: NEG
49080: PUSH
49081: EMPTY
49082: LIST
49083: LIST
49084: PUSH
49085: LD_INT 2
49087: NEG
49088: PUSH
49089: LD_INT 3
49091: NEG
49092: PUSH
49093: EMPTY
49094: LIST
49095: LIST
49096: PUSH
49097: LD_INT 3
49099: NEG
49100: PUSH
49101: LD_INT 2
49103: NEG
49104: PUSH
49105: EMPTY
49106: LIST
49107: LIST
49108: PUSH
49109: EMPTY
49110: LIST
49111: LIST
49112: LIST
49113: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
49114: LD_ADDR_VAR 0 47
49118: PUSH
49119: LD_INT 2
49121: NEG
49122: PUSH
49123: LD_INT 3
49125: NEG
49126: PUSH
49127: EMPTY
49128: LIST
49129: LIST
49130: PUSH
49131: LD_INT 1
49133: NEG
49134: PUSH
49135: LD_INT 3
49137: NEG
49138: PUSH
49139: EMPTY
49140: LIST
49141: LIST
49142: PUSH
49143: EMPTY
49144: LIST
49145: LIST
49146: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
49147: LD_ADDR_VAR 0 48
49151: PUSH
49152: LD_INT 1
49154: PUSH
49155: LD_INT 2
49157: NEG
49158: PUSH
49159: EMPTY
49160: LIST
49161: LIST
49162: PUSH
49163: LD_INT 2
49165: PUSH
49166: LD_INT 1
49168: NEG
49169: PUSH
49170: EMPTY
49171: LIST
49172: LIST
49173: PUSH
49174: EMPTY
49175: LIST
49176: LIST
49177: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
49178: LD_ADDR_VAR 0 49
49182: PUSH
49183: LD_INT 3
49185: PUSH
49186: LD_INT 1
49188: PUSH
49189: EMPTY
49190: LIST
49191: LIST
49192: PUSH
49193: LD_INT 3
49195: PUSH
49196: LD_INT 2
49198: PUSH
49199: EMPTY
49200: LIST
49201: LIST
49202: PUSH
49203: EMPTY
49204: LIST
49205: LIST
49206: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
49207: LD_ADDR_VAR 0 50
49211: PUSH
49212: LD_INT 2
49214: PUSH
49215: LD_INT 3
49217: PUSH
49218: EMPTY
49219: LIST
49220: LIST
49221: PUSH
49222: LD_INT 1
49224: PUSH
49225: LD_INT 3
49227: PUSH
49228: EMPTY
49229: LIST
49230: LIST
49231: PUSH
49232: EMPTY
49233: LIST
49234: LIST
49235: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
49236: LD_ADDR_VAR 0 51
49240: PUSH
49241: LD_INT 1
49243: NEG
49244: PUSH
49245: LD_INT 2
49247: PUSH
49248: EMPTY
49249: LIST
49250: LIST
49251: PUSH
49252: LD_INT 2
49254: NEG
49255: PUSH
49256: LD_INT 1
49258: PUSH
49259: EMPTY
49260: LIST
49261: LIST
49262: PUSH
49263: EMPTY
49264: LIST
49265: LIST
49266: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
49267: LD_ADDR_VAR 0 52
49271: PUSH
49272: LD_INT 3
49274: NEG
49275: PUSH
49276: LD_INT 1
49278: NEG
49279: PUSH
49280: EMPTY
49281: LIST
49282: LIST
49283: PUSH
49284: LD_INT 3
49286: NEG
49287: PUSH
49288: LD_INT 2
49290: NEG
49291: PUSH
49292: EMPTY
49293: LIST
49294: LIST
49295: PUSH
49296: EMPTY
49297: LIST
49298: LIST
49299: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
49300: LD_ADDR_VAR 0 53
49304: PUSH
49305: LD_INT 1
49307: NEG
49308: PUSH
49309: LD_INT 3
49311: NEG
49312: PUSH
49313: EMPTY
49314: LIST
49315: LIST
49316: PUSH
49317: LD_INT 0
49319: PUSH
49320: LD_INT 3
49322: NEG
49323: PUSH
49324: EMPTY
49325: LIST
49326: LIST
49327: PUSH
49328: LD_INT 1
49330: PUSH
49331: LD_INT 2
49333: NEG
49334: PUSH
49335: EMPTY
49336: LIST
49337: LIST
49338: PUSH
49339: EMPTY
49340: LIST
49341: LIST
49342: LIST
49343: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
49344: LD_ADDR_VAR 0 54
49348: PUSH
49349: LD_INT 2
49351: PUSH
49352: LD_INT 1
49354: NEG
49355: PUSH
49356: EMPTY
49357: LIST
49358: LIST
49359: PUSH
49360: LD_INT 3
49362: PUSH
49363: LD_INT 0
49365: PUSH
49366: EMPTY
49367: LIST
49368: LIST
49369: PUSH
49370: LD_INT 3
49372: PUSH
49373: LD_INT 1
49375: PUSH
49376: EMPTY
49377: LIST
49378: LIST
49379: PUSH
49380: EMPTY
49381: LIST
49382: LIST
49383: LIST
49384: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
49385: LD_ADDR_VAR 0 55
49389: PUSH
49390: LD_INT 3
49392: PUSH
49393: LD_INT 2
49395: PUSH
49396: EMPTY
49397: LIST
49398: LIST
49399: PUSH
49400: LD_INT 3
49402: PUSH
49403: LD_INT 3
49405: PUSH
49406: EMPTY
49407: LIST
49408: LIST
49409: PUSH
49410: LD_INT 2
49412: PUSH
49413: LD_INT 3
49415: PUSH
49416: EMPTY
49417: LIST
49418: LIST
49419: PUSH
49420: EMPTY
49421: LIST
49422: LIST
49423: LIST
49424: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
49425: LD_ADDR_VAR 0 56
49429: PUSH
49430: LD_INT 1
49432: PUSH
49433: LD_INT 3
49435: PUSH
49436: EMPTY
49437: LIST
49438: LIST
49439: PUSH
49440: LD_INT 0
49442: PUSH
49443: LD_INT 3
49445: PUSH
49446: EMPTY
49447: LIST
49448: LIST
49449: PUSH
49450: LD_INT 1
49452: NEG
49453: PUSH
49454: LD_INT 2
49456: PUSH
49457: EMPTY
49458: LIST
49459: LIST
49460: PUSH
49461: EMPTY
49462: LIST
49463: LIST
49464: LIST
49465: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
49466: LD_ADDR_VAR 0 57
49470: PUSH
49471: LD_INT 2
49473: NEG
49474: PUSH
49475: LD_INT 1
49477: PUSH
49478: EMPTY
49479: LIST
49480: LIST
49481: PUSH
49482: LD_INT 3
49484: NEG
49485: PUSH
49486: LD_INT 0
49488: PUSH
49489: EMPTY
49490: LIST
49491: LIST
49492: PUSH
49493: LD_INT 3
49495: NEG
49496: PUSH
49497: LD_INT 1
49499: NEG
49500: PUSH
49501: EMPTY
49502: LIST
49503: LIST
49504: PUSH
49505: EMPTY
49506: LIST
49507: LIST
49508: LIST
49509: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49510: LD_ADDR_VAR 0 58
49514: PUSH
49515: LD_INT 2
49517: NEG
49518: PUSH
49519: LD_INT 3
49521: NEG
49522: PUSH
49523: EMPTY
49524: LIST
49525: LIST
49526: PUSH
49527: LD_INT 3
49529: NEG
49530: PUSH
49531: LD_INT 2
49533: NEG
49534: PUSH
49535: EMPTY
49536: LIST
49537: LIST
49538: PUSH
49539: LD_INT 3
49541: NEG
49542: PUSH
49543: LD_INT 3
49545: NEG
49546: PUSH
49547: EMPTY
49548: LIST
49549: LIST
49550: PUSH
49551: EMPTY
49552: LIST
49553: LIST
49554: LIST
49555: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
49556: LD_ADDR_VAR 0 59
49560: PUSH
49561: LD_INT 1
49563: NEG
49564: PUSH
49565: LD_INT 2
49567: NEG
49568: PUSH
49569: EMPTY
49570: LIST
49571: LIST
49572: PUSH
49573: LD_INT 0
49575: PUSH
49576: LD_INT 2
49578: NEG
49579: PUSH
49580: EMPTY
49581: LIST
49582: LIST
49583: PUSH
49584: LD_INT 1
49586: PUSH
49587: LD_INT 1
49589: NEG
49590: PUSH
49591: EMPTY
49592: LIST
49593: LIST
49594: PUSH
49595: EMPTY
49596: LIST
49597: LIST
49598: LIST
49599: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
49600: LD_ADDR_VAR 0 60
49604: PUSH
49605: LD_INT 1
49607: PUSH
49608: LD_INT 1
49610: NEG
49611: PUSH
49612: EMPTY
49613: LIST
49614: LIST
49615: PUSH
49616: LD_INT 2
49618: PUSH
49619: LD_INT 0
49621: PUSH
49622: EMPTY
49623: LIST
49624: LIST
49625: PUSH
49626: LD_INT 2
49628: PUSH
49629: LD_INT 1
49631: PUSH
49632: EMPTY
49633: LIST
49634: LIST
49635: PUSH
49636: EMPTY
49637: LIST
49638: LIST
49639: LIST
49640: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
49641: LD_ADDR_VAR 0 61
49645: PUSH
49646: LD_INT 2
49648: PUSH
49649: LD_INT 1
49651: PUSH
49652: EMPTY
49653: LIST
49654: LIST
49655: PUSH
49656: LD_INT 2
49658: PUSH
49659: LD_INT 2
49661: PUSH
49662: EMPTY
49663: LIST
49664: LIST
49665: PUSH
49666: LD_INT 1
49668: PUSH
49669: LD_INT 2
49671: PUSH
49672: EMPTY
49673: LIST
49674: LIST
49675: PUSH
49676: EMPTY
49677: LIST
49678: LIST
49679: LIST
49680: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
49681: LD_ADDR_VAR 0 62
49685: PUSH
49686: LD_INT 1
49688: PUSH
49689: LD_INT 2
49691: PUSH
49692: EMPTY
49693: LIST
49694: LIST
49695: PUSH
49696: LD_INT 0
49698: PUSH
49699: LD_INT 2
49701: PUSH
49702: EMPTY
49703: LIST
49704: LIST
49705: PUSH
49706: LD_INT 1
49708: NEG
49709: PUSH
49710: LD_INT 1
49712: PUSH
49713: EMPTY
49714: LIST
49715: LIST
49716: PUSH
49717: EMPTY
49718: LIST
49719: LIST
49720: LIST
49721: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
49722: LD_ADDR_VAR 0 63
49726: PUSH
49727: LD_INT 1
49729: NEG
49730: PUSH
49731: LD_INT 1
49733: PUSH
49734: EMPTY
49735: LIST
49736: LIST
49737: PUSH
49738: LD_INT 2
49740: NEG
49741: PUSH
49742: LD_INT 0
49744: PUSH
49745: EMPTY
49746: LIST
49747: LIST
49748: PUSH
49749: LD_INT 2
49751: NEG
49752: PUSH
49753: LD_INT 1
49755: NEG
49756: PUSH
49757: EMPTY
49758: LIST
49759: LIST
49760: PUSH
49761: EMPTY
49762: LIST
49763: LIST
49764: LIST
49765: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49766: LD_ADDR_VAR 0 64
49770: PUSH
49771: LD_INT 1
49773: NEG
49774: PUSH
49775: LD_INT 2
49777: NEG
49778: PUSH
49779: EMPTY
49780: LIST
49781: LIST
49782: PUSH
49783: LD_INT 2
49785: NEG
49786: PUSH
49787: LD_INT 1
49789: NEG
49790: PUSH
49791: EMPTY
49792: LIST
49793: LIST
49794: PUSH
49795: LD_INT 2
49797: NEG
49798: PUSH
49799: LD_INT 2
49801: NEG
49802: PUSH
49803: EMPTY
49804: LIST
49805: LIST
49806: PUSH
49807: EMPTY
49808: LIST
49809: LIST
49810: LIST
49811: ST_TO_ADDR
// end ; 2 :
49812: GO 53078
49814: LD_INT 2
49816: DOUBLE
49817: EQUAL
49818: IFTRUE 49822
49820: GO 53077
49822: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
49823: LD_ADDR_VAR 0 29
49827: PUSH
49828: LD_INT 4
49830: PUSH
49831: LD_INT 0
49833: PUSH
49834: EMPTY
49835: LIST
49836: LIST
49837: PUSH
49838: LD_INT 4
49840: PUSH
49841: LD_INT 1
49843: NEG
49844: PUSH
49845: EMPTY
49846: LIST
49847: LIST
49848: PUSH
49849: LD_INT 5
49851: PUSH
49852: LD_INT 0
49854: PUSH
49855: EMPTY
49856: LIST
49857: LIST
49858: PUSH
49859: LD_INT 5
49861: PUSH
49862: LD_INT 1
49864: PUSH
49865: EMPTY
49866: LIST
49867: LIST
49868: PUSH
49869: LD_INT 4
49871: PUSH
49872: LD_INT 1
49874: PUSH
49875: EMPTY
49876: LIST
49877: LIST
49878: PUSH
49879: LD_INT 3
49881: PUSH
49882: LD_INT 0
49884: PUSH
49885: EMPTY
49886: LIST
49887: LIST
49888: PUSH
49889: LD_INT 3
49891: PUSH
49892: LD_INT 1
49894: NEG
49895: PUSH
49896: EMPTY
49897: LIST
49898: LIST
49899: PUSH
49900: LD_INT 3
49902: PUSH
49903: LD_INT 2
49905: NEG
49906: PUSH
49907: EMPTY
49908: LIST
49909: LIST
49910: PUSH
49911: LD_INT 5
49913: PUSH
49914: LD_INT 2
49916: PUSH
49917: EMPTY
49918: LIST
49919: LIST
49920: PUSH
49921: LD_INT 3
49923: PUSH
49924: LD_INT 3
49926: PUSH
49927: EMPTY
49928: LIST
49929: LIST
49930: PUSH
49931: LD_INT 3
49933: PUSH
49934: LD_INT 2
49936: PUSH
49937: EMPTY
49938: LIST
49939: LIST
49940: PUSH
49941: LD_INT 4
49943: PUSH
49944: LD_INT 3
49946: PUSH
49947: EMPTY
49948: LIST
49949: LIST
49950: PUSH
49951: LD_INT 4
49953: PUSH
49954: LD_INT 4
49956: PUSH
49957: EMPTY
49958: LIST
49959: LIST
49960: PUSH
49961: LD_INT 3
49963: PUSH
49964: LD_INT 4
49966: PUSH
49967: EMPTY
49968: LIST
49969: LIST
49970: PUSH
49971: LD_INT 2
49973: PUSH
49974: LD_INT 3
49976: PUSH
49977: EMPTY
49978: LIST
49979: LIST
49980: PUSH
49981: LD_INT 2
49983: PUSH
49984: LD_INT 2
49986: PUSH
49987: EMPTY
49988: LIST
49989: LIST
49990: PUSH
49991: LD_INT 4
49993: PUSH
49994: LD_INT 2
49996: PUSH
49997: EMPTY
49998: LIST
49999: LIST
50000: PUSH
50001: LD_INT 2
50003: PUSH
50004: LD_INT 4
50006: PUSH
50007: EMPTY
50008: LIST
50009: LIST
50010: PUSH
50011: LD_INT 0
50013: PUSH
50014: LD_INT 4
50016: PUSH
50017: EMPTY
50018: LIST
50019: LIST
50020: PUSH
50021: LD_INT 0
50023: PUSH
50024: LD_INT 3
50026: PUSH
50027: EMPTY
50028: LIST
50029: LIST
50030: PUSH
50031: LD_INT 1
50033: PUSH
50034: LD_INT 4
50036: PUSH
50037: EMPTY
50038: LIST
50039: LIST
50040: PUSH
50041: LD_INT 1
50043: PUSH
50044: LD_INT 5
50046: PUSH
50047: EMPTY
50048: LIST
50049: LIST
50050: PUSH
50051: LD_INT 0
50053: PUSH
50054: LD_INT 5
50056: PUSH
50057: EMPTY
50058: LIST
50059: LIST
50060: PUSH
50061: LD_INT 1
50063: NEG
50064: PUSH
50065: LD_INT 4
50067: PUSH
50068: EMPTY
50069: LIST
50070: LIST
50071: PUSH
50072: LD_INT 1
50074: NEG
50075: PUSH
50076: LD_INT 3
50078: PUSH
50079: EMPTY
50080: LIST
50081: LIST
50082: PUSH
50083: LD_INT 2
50085: PUSH
50086: LD_INT 5
50088: PUSH
50089: EMPTY
50090: LIST
50091: LIST
50092: PUSH
50093: LD_INT 2
50095: NEG
50096: PUSH
50097: LD_INT 3
50099: PUSH
50100: EMPTY
50101: LIST
50102: LIST
50103: PUSH
50104: LD_INT 3
50106: NEG
50107: PUSH
50108: LD_INT 0
50110: PUSH
50111: EMPTY
50112: LIST
50113: LIST
50114: PUSH
50115: LD_INT 3
50117: NEG
50118: PUSH
50119: LD_INT 1
50121: NEG
50122: PUSH
50123: EMPTY
50124: LIST
50125: LIST
50126: PUSH
50127: LD_INT 2
50129: NEG
50130: PUSH
50131: LD_INT 0
50133: PUSH
50134: EMPTY
50135: LIST
50136: LIST
50137: PUSH
50138: LD_INT 2
50140: NEG
50141: PUSH
50142: LD_INT 1
50144: PUSH
50145: EMPTY
50146: LIST
50147: LIST
50148: PUSH
50149: LD_INT 3
50151: NEG
50152: PUSH
50153: LD_INT 1
50155: PUSH
50156: EMPTY
50157: LIST
50158: LIST
50159: PUSH
50160: LD_INT 4
50162: NEG
50163: PUSH
50164: LD_INT 0
50166: PUSH
50167: EMPTY
50168: LIST
50169: LIST
50170: PUSH
50171: LD_INT 4
50173: NEG
50174: PUSH
50175: LD_INT 1
50177: NEG
50178: PUSH
50179: EMPTY
50180: LIST
50181: LIST
50182: PUSH
50183: LD_INT 4
50185: NEG
50186: PUSH
50187: LD_INT 2
50189: NEG
50190: PUSH
50191: EMPTY
50192: LIST
50193: LIST
50194: PUSH
50195: LD_INT 2
50197: NEG
50198: PUSH
50199: LD_INT 2
50201: PUSH
50202: EMPTY
50203: LIST
50204: LIST
50205: PUSH
50206: LD_INT 4
50208: NEG
50209: PUSH
50210: LD_INT 4
50212: NEG
50213: PUSH
50214: EMPTY
50215: LIST
50216: LIST
50217: PUSH
50218: LD_INT 4
50220: NEG
50221: PUSH
50222: LD_INT 5
50224: NEG
50225: PUSH
50226: EMPTY
50227: LIST
50228: LIST
50229: PUSH
50230: LD_INT 3
50232: NEG
50233: PUSH
50234: LD_INT 4
50236: NEG
50237: PUSH
50238: EMPTY
50239: LIST
50240: LIST
50241: PUSH
50242: LD_INT 3
50244: NEG
50245: PUSH
50246: LD_INT 3
50248: NEG
50249: PUSH
50250: EMPTY
50251: LIST
50252: LIST
50253: PUSH
50254: LD_INT 4
50256: NEG
50257: PUSH
50258: LD_INT 3
50260: NEG
50261: PUSH
50262: EMPTY
50263: LIST
50264: LIST
50265: PUSH
50266: LD_INT 5
50268: NEG
50269: PUSH
50270: LD_INT 4
50272: NEG
50273: PUSH
50274: EMPTY
50275: LIST
50276: LIST
50277: PUSH
50278: LD_INT 5
50280: NEG
50281: PUSH
50282: LD_INT 5
50284: NEG
50285: PUSH
50286: EMPTY
50287: LIST
50288: LIST
50289: PUSH
50290: LD_INT 3
50292: NEG
50293: PUSH
50294: LD_INT 5
50296: NEG
50297: PUSH
50298: EMPTY
50299: LIST
50300: LIST
50301: PUSH
50302: LD_INT 5
50304: NEG
50305: PUSH
50306: LD_INT 3
50308: NEG
50309: PUSH
50310: EMPTY
50311: LIST
50312: LIST
50313: PUSH
50314: EMPTY
50315: LIST
50316: LIST
50317: LIST
50318: LIST
50319: LIST
50320: LIST
50321: LIST
50322: LIST
50323: LIST
50324: LIST
50325: LIST
50326: LIST
50327: LIST
50328: LIST
50329: LIST
50330: LIST
50331: LIST
50332: LIST
50333: LIST
50334: LIST
50335: LIST
50336: LIST
50337: LIST
50338: LIST
50339: LIST
50340: LIST
50341: LIST
50342: LIST
50343: LIST
50344: LIST
50345: LIST
50346: LIST
50347: LIST
50348: LIST
50349: LIST
50350: LIST
50351: LIST
50352: LIST
50353: LIST
50354: LIST
50355: LIST
50356: LIST
50357: LIST
50358: LIST
50359: LIST
50360: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
50361: LD_ADDR_VAR 0 30
50365: PUSH
50366: LD_INT 4
50368: PUSH
50369: LD_INT 4
50371: PUSH
50372: EMPTY
50373: LIST
50374: LIST
50375: PUSH
50376: LD_INT 4
50378: PUSH
50379: LD_INT 3
50381: PUSH
50382: EMPTY
50383: LIST
50384: LIST
50385: PUSH
50386: LD_INT 5
50388: PUSH
50389: LD_INT 4
50391: PUSH
50392: EMPTY
50393: LIST
50394: LIST
50395: PUSH
50396: LD_INT 5
50398: PUSH
50399: LD_INT 5
50401: PUSH
50402: EMPTY
50403: LIST
50404: LIST
50405: PUSH
50406: LD_INT 4
50408: PUSH
50409: LD_INT 5
50411: PUSH
50412: EMPTY
50413: LIST
50414: LIST
50415: PUSH
50416: LD_INT 3
50418: PUSH
50419: LD_INT 4
50421: PUSH
50422: EMPTY
50423: LIST
50424: LIST
50425: PUSH
50426: LD_INT 3
50428: PUSH
50429: LD_INT 3
50431: PUSH
50432: EMPTY
50433: LIST
50434: LIST
50435: PUSH
50436: LD_INT 5
50438: PUSH
50439: LD_INT 3
50441: PUSH
50442: EMPTY
50443: LIST
50444: LIST
50445: PUSH
50446: LD_INT 3
50448: PUSH
50449: LD_INT 5
50451: PUSH
50452: EMPTY
50453: LIST
50454: LIST
50455: PUSH
50456: LD_INT 0
50458: PUSH
50459: LD_INT 3
50461: PUSH
50462: EMPTY
50463: LIST
50464: LIST
50465: PUSH
50466: LD_INT 0
50468: PUSH
50469: LD_INT 2
50471: PUSH
50472: EMPTY
50473: LIST
50474: LIST
50475: PUSH
50476: LD_INT 1
50478: PUSH
50479: LD_INT 3
50481: PUSH
50482: EMPTY
50483: LIST
50484: LIST
50485: PUSH
50486: LD_INT 1
50488: PUSH
50489: LD_INT 4
50491: PUSH
50492: EMPTY
50493: LIST
50494: LIST
50495: PUSH
50496: LD_INT 0
50498: PUSH
50499: LD_INT 4
50501: PUSH
50502: EMPTY
50503: LIST
50504: LIST
50505: PUSH
50506: LD_INT 1
50508: NEG
50509: PUSH
50510: LD_INT 3
50512: PUSH
50513: EMPTY
50514: LIST
50515: LIST
50516: PUSH
50517: LD_INT 1
50519: NEG
50520: PUSH
50521: LD_INT 2
50523: PUSH
50524: EMPTY
50525: LIST
50526: LIST
50527: PUSH
50528: LD_INT 2
50530: PUSH
50531: LD_INT 4
50533: PUSH
50534: EMPTY
50535: LIST
50536: LIST
50537: PUSH
50538: LD_INT 2
50540: NEG
50541: PUSH
50542: LD_INT 2
50544: PUSH
50545: EMPTY
50546: LIST
50547: LIST
50548: PUSH
50549: LD_INT 4
50551: NEG
50552: PUSH
50553: LD_INT 0
50555: PUSH
50556: EMPTY
50557: LIST
50558: LIST
50559: PUSH
50560: LD_INT 4
50562: NEG
50563: PUSH
50564: LD_INT 1
50566: NEG
50567: PUSH
50568: EMPTY
50569: LIST
50570: LIST
50571: PUSH
50572: LD_INT 3
50574: NEG
50575: PUSH
50576: LD_INT 0
50578: PUSH
50579: EMPTY
50580: LIST
50581: LIST
50582: PUSH
50583: LD_INT 3
50585: NEG
50586: PUSH
50587: LD_INT 1
50589: PUSH
50590: EMPTY
50591: LIST
50592: LIST
50593: PUSH
50594: LD_INT 4
50596: NEG
50597: PUSH
50598: LD_INT 1
50600: PUSH
50601: EMPTY
50602: LIST
50603: LIST
50604: PUSH
50605: LD_INT 5
50607: NEG
50608: PUSH
50609: LD_INT 0
50611: PUSH
50612: EMPTY
50613: LIST
50614: LIST
50615: PUSH
50616: LD_INT 5
50618: NEG
50619: PUSH
50620: LD_INT 1
50622: NEG
50623: PUSH
50624: EMPTY
50625: LIST
50626: LIST
50627: PUSH
50628: LD_INT 5
50630: NEG
50631: PUSH
50632: LD_INT 2
50634: NEG
50635: PUSH
50636: EMPTY
50637: LIST
50638: LIST
50639: PUSH
50640: LD_INT 3
50642: NEG
50643: PUSH
50644: LD_INT 2
50646: PUSH
50647: EMPTY
50648: LIST
50649: LIST
50650: PUSH
50651: LD_INT 3
50653: NEG
50654: PUSH
50655: LD_INT 3
50657: NEG
50658: PUSH
50659: EMPTY
50660: LIST
50661: LIST
50662: PUSH
50663: LD_INT 3
50665: NEG
50666: PUSH
50667: LD_INT 4
50669: NEG
50670: PUSH
50671: EMPTY
50672: LIST
50673: LIST
50674: PUSH
50675: LD_INT 2
50677: NEG
50678: PUSH
50679: LD_INT 3
50681: NEG
50682: PUSH
50683: EMPTY
50684: LIST
50685: LIST
50686: PUSH
50687: LD_INT 2
50689: NEG
50690: PUSH
50691: LD_INT 2
50693: NEG
50694: PUSH
50695: EMPTY
50696: LIST
50697: LIST
50698: PUSH
50699: LD_INT 3
50701: NEG
50702: PUSH
50703: LD_INT 2
50705: NEG
50706: PUSH
50707: EMPTY
50708: LIST
50709: LIST
50710: PUSH
50711: LD_INT 4
50713: NEG
50714: PUSH
50715: LD_INT 3
50717: NEG
50718: PUSH
50719: EMPTY
50720: LIST
50721: LIST
50722: PUSH
50723: LD_INT 4
50725: NEG
50726: PUSH
50727: LD_INT 4
50729: NEG
50730: PUSH
50731: EMPTY
50732: LIST
50733: LIST
50734: PUSH
50735: LD_INT 2
50737: NEG
50738: PUSH
50739: LD_INT 4
50741: NEG
50742: PUSH
50743: EMPTY
50744: LIST
50745: LIST
50746: PUSH
50747: LD_INT 4
50749: NEG
50750: PUSH
50751: LD_INT 2
50753: NEG
50754: PUSH
50755: EMPTY
50756: LIST
50757: LIST
50758: PUSH
50759: LD_INT 0
50761: PUSH
50762: LD_INT 4
50764: NEG
50765: PUSH
50766: EMPTY
50767: LIST
50768: LIST
50769: PUSH
50770: LD_INT 0
50772: PUSH
50773: LD_INT 5
50775: NEG
50776: PUSH
50777: EMPTY
50778: LIST
50779: LIST
50780: PUSH
50781: LD_INT 1
50783: PUSH
50784: LD_INT 4
50786: NEG
50787: PUSH
50788: EMPTY
50789: LIST
50790: LIST
50791: PUSH
50792: LD_INT 1
50794: PUSH
50795: LD_INT 3
50797: NEG
50798: PUSH
50799: EMPTY
50800: LIST
50801: LIST
50802: PUSH
50803: LD_INT 0
50805: PUSH
50806: LD_INT 3
50808: NEG
50809: PUSH
50810: EMPTY
50811: LIST
50812: LIST
50813: PUSH
50814: LD_INT 1
50816: NEG
50817: PUSH
50818: LD_INT 4
50820: NEG
50821: PUSH
50822: EMPTY
50823: LIST
50824: LIST
50825: PUSH
50826: LD_INT 1
50828: NEG
50829: PUSH
50830: LD_INT 5
50832: NEG
50833: PUSH
50834: EMPTY
50835: LIST
50836: LIST
50837: PUSH
50838: LD_INT 2
50840: PUSH
50841: LD_INT 3
50843: NEG
50844: PUSH
50845: EMPTY
50846: LIST
50847: LIST
50848: PUSH
50849: LD_INT 2
50851: NEG
50852: PUSH
50853: LD_INT 5
50855: NEG
50856: PUSH
50857: EMPTY
50858: LIST
50859: LIST
50860: PUSH
50861: EMPTY
50862: LIST
50863: LIST
50864: LIST
50865: LIST
50866: LIST
50867: LIST
50868: LIST
50869: LIST
50870: LIST
50871: LIST
50872: LIST
50873: LIST
50874: LIST
50875: LIST
50876: LIST
50877: LIST
50878: LIST
50879: LIST
50880: LIST
50881: LIST
50882: LIST
50883: LIST
50884: LIST
50885: LIST
50886: LIST
50887: LIST
50888: LIST
50889: LIST
50890: LIST
50891: LIST
50892: LIST
50893: LIST
50894: LIST
50895: LIST
50896: LIST
50897: LIST
50898: LIST
50899: LIST
50900: LIST
50901: LIST
50902: LIST
50903: LIST
50904: LIST
50905: LIST
50906: LIST
50907: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
50908: LD_ADDR_VAR 0 31
50912: PUSH
50913: LD_INT 0
50915: PUSH
50916: LD_INT 4
50918: PUSH
50919: EMPTY
50920: LIST
50921: LIST
50922: PUSH
50923: LD_INT 0
50925: PUSH
50926: LD_INT 3
50928: PUSH
50929: EMPTY
50930: LIST
50931: LIST
50932: PUSH
50933: LD_INT 1
50935: PUSH
50936: LD_INT 4
50938: PUSH
50939: EMPTY
50940: LIST
50941: LIST
50942: PUSH
50943: LD_INT 1
50945: PUSH
50946: LD_INT 5
50948: PUSH
50949: EMPTY
50950: LIST
50951: LIST
50952: PUSH
50953: LD_INT 0
50955: PUSH
50956: LD_INT 5
50958: PUSH
50959: EMPTY
50960: LIST
50961: LIST
50962: PUSH
50963: LD_INT 1
50965: NEG
50966: PUSH
50967: LD_INT 4
50969: PUSH
50970: EMPTY
50971: LIST
50972: LIST
50973: PUSH
50974: LD_INT 1
50976: NEG
50977: PUSH
50978: LD_INT 3
50980: PUSH
50981: EMPTY
50982: LIST
50983: LIST
50984: PUSH
50985: LD_INT 2
50987: PUSH
50988: LD_INT 5
50990: PUSH
50991: EMPTY
50992: LIST
50993: LIST
50994: PUSH
50995: LD_INT 2
50997: NEG
50998: PUSH
50999: LD_INT 3
51001: PUSH
51002: EMPTY
51003: LIST
51004: LIST
51005: PUSH
51006: LD_INT 3
51008: NEG
51009: PUSH
51010: LD_INT 0
51012: PUSH
51013: EMPTY
51014: LIST
51015: LIST
51016: PUSH
51017: LD_INT 3
51019: NEG
51020: PUSH
51021: LD_INT 1
51023: NEG
51024: PUSH
51025: EMPTY
51026: LIST
51027: LIST
51028: PUSH
51029: LD_INT 2
51031: NEG
51032: PUSH
51033: LD_INT 0
51035: PUSH
51036: EMPTY
51037: LIST
51038: LIST
51039: PUSH
51040: LD_INT 2
51042: NEG
51043: PUSH
51044: LD_INT 1
51046: PUSH
51047: EMPTY
51048: LIST
51049: LIST
51050: PUSH
51051: LD_INT 3
51053: NEG
51054: PUSH
51055: LD_INT 1
51057: PUSH
51058: EMPTY
51059: LIST
51060: LIST
51061: PUSH
51062: LD_INT 4
51064: NEG
51065: PUSH
51066: LD_INT 0
51068: PUSH
51069: EMPTY
51070: LIST
51071: LIST
51072: PUSH
51073: LD_INT 4
51075: NEG
51076: PUSH
51077: LD_INT 1
51079: NEG
51080: PUSH
51081: EMPTY
51082: LIST
51083: LIST
51084: PUSH
51085: LD_INT 4
51087: NEG
51088: PUSH
51089: LD_INT 2
51091: NEG
51092: PUSH
51093: EMPTY
51094: LIST
51095: LIST
51096: PUSH
51097: LD_INT 2
51099: NEG
51100: PUSH
51101: LD_INT 2
51103: PUSH
51104: EMPTY
51105: LIST
51106: LIST
51107: PUSH
51108: LD_INT 4
51110: NEG
51111: PUSH
51112: LD_INT 4
51114: NEG
51115: PUSH
51116: EMPTY
51117: LIST
51118: LIST
51119: PUSH
51120: LD_INT 4
51122: NEG
51123: PUSH
51124: LD_INT 5
51126: NEG
51127: PUSH
51128: EMPTY
51129: LIST
51130: LIST
51131: PUSH
51132: LD_INT 3
51134: NEG
51135: PUSH
51136: LD_INT 4
51138: NEG
51139: PUSH
51140: EMPTY
51141: LIST
51142: LIST
51143: PUSH
51144: LD_INT 3
51146: NEG
51147: PUSH
51148: LD_INT 3
51150: NEG
51151: PUSH
51152: EMPTY
51153: LIST
51154: LIST
51155: PUSH
51156: LD_INT 4
51158: NEG
51159: PUSH
51160: LD_INT 3
51162: NEG
51163: PUSH
51164: EMPTY
51165: LIST
51166: LIST
51167: PUSH
51168: LD_INT 5
51170: NEG
51171: PUSH
51172: LD_INT 4
51174: NEG
51175: PUSH
51176: EMPTY
51177: LIST
51178: LIST
51179: PUSH
51180: LD_INT 5
51182: NEG
51183: PUSH
51184: LD_INT 5
51186: NEG
51187: PUSH
51188: EMPTY
51189: LIST
51190: LIST
51191: PUSH
51192: LD_INT 3
51194: NEG
51195: PUSH
51196: LD_INT 5
51198: NEG
51199: PUSH
51200: EMPTY
51201: LIST
51202: LIST
51203: PUSH
51204: LD_INT 5
51206: NEG
51207: PUSH
51208: LD_INT 3
51210: NEG
51211: PUSH
51212: EMPTY
51213: LIST
51214: LIST
51215: PUSH
51216: LD_INT 0
51218: PUSH
51219: LD_INT 3
51221: NEG
51222: PUSH
51223: EMPTY
51224: LIST
51225: LIST
51226: PUSH
51227: LD_INT 0
51229: PUSH
51230: LD_INT 4
51232: NEG
51233: PUSH
51234: EMPTY
51235: LIST
51236: LIST
51237: PUSH
51238: LD_INT 1
51240: PUSH
51241: LD_INT 3
51243: NEG
51244: PUSH
51245: EMPTY
51246: LIST
51247: LIST
51248: PUSH
51249: LD_INT 1
51251: PUSH
51252: LD_INT 2
51254: NEG
51255: PUSH
51256: EMPTY
51257: LIST
51258: LIST
51259: PUSH
51260: LD_INT 0
51262: PUSH
51263: LD_INT 2
51265: NEG
51266: PUSH
51267: EMPTY
51268: LIST
51269: LIST
51270: PUSH
51271: LD_INT 1
51273: NEG
51274: PUSH
51275: LD_INT 3
51277: NEG
51278: PUSH
51279: EMPTY
51280: LIST
51281: LIST
51282: PUSH
51283: LD_INT 1
51285: NEG
51286: PUSH
51287: LD_INT 4
51289: NEG
51290: PUSH
51291: EMPTY
51292: LIST
51293: LIST
51294: PUSH
51295: LD_INT 2
51297: PUSH
51298: LD_INT 2
51300: NEG
51301: PUSH
51302: EMPTY
51303: LIST
51304: LIST
51305: PUSH
51306: LD_INT 2
51308: NEG
51309: PUSH
51310: LD_INT 4
51312: NEG
51313: PUSH
51314: EMPTY
51315: LIST
51316: LIST
51317: PUSH
51318: LD_INT 4
51320: PUSH
51321: LD_INT 0
51323: PUSH
51324: EMPTY
51325: LIST
51326: LIST
51327: PUSH
51328: LD_INT 4
51330: PUSH
51331: LD_INT 1
51333: NEG
51334: PUSH
51335: EMPTY
51336: LIST
51337: LIST
51338: PUSH
51339: LD_INT 5
51341: PUSH
51342: LD_INT 0
51344: PUSH
51345: EMPTY
51346: LIST
51347: LIST
51348: PUSH
51349: LD_INT 5
51351: PUSH
51352: LD_INT 1
51354: PUSH
51355: EMPTY
51356: LIST
51357: LIST
51358: PUSH
51359: LD_INT 4
51361: PUSH
51362: LD_INT 1
51364: PUSH
51365: EMPTY
51366: LIST
51367: LIST
51368: PUSH
51369: LD_INT 3
51371: PUSH
51372: LD_INT 0
51374: PUSH
51375: EMPTY
51376: LIST
51377: LIST
51378: PUSH
51379: LD_INT 3
51381: PUSH
51382: LD_INT 1
51384: NEG
51385: PUSH
51386: EMPTY
51387: LIST
51388: LIST
51389: PUSH
51390: LD_INT 3
51392: PUSH
51393: LD_INT 2
51395: NEG
51396: PUSH
51397: EMPTY
51398: LIST
51399: LIST
51400: PUSH
51401: LD_INT 5
51403: PUSH
51404: LD_INT 2
51406: PUSH
51407: EMPTY
51408: LIST
51409: LIST
51410: PUSH
51411: EMPTY
51412: LIST
51413: LIST
51414: LIST
51415: LIST
51416: LIST
51417: LIST
51418: LIST
51419: LIST
51420: LIST
51421: LIST
51422: LIST
51423: LIST
51424: LIST
51425: LIST
51426: LIST
51427: LIST
51428: LIST
51429: LIST
51430: LIST
51431: LIST
51432: LIST
51433: LIST
51434: LIST
51435: LIST
51436: LIST
51437: LIST
51438: LIST
51439: LIST
51440: LIST
51441: LIST
51442: LIST
51443: LIST
51444: LIST
51445: LIST
51446: LIST
51447: LIST
51448: LIST
51449: LIST
51450: LIST
51451: LIST
51452: LIST
51453: LIST
51454: LIST
51455: LIST
51456: LIST
51457: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
51458: LD_ADDR_VAR 0 32
51462: PUSH
51463: LD_INT 4
51465: NEG
51466: PUSH
51467: LD_INT 0
51469: PUSH
51470: EMPTY
51471: LIST
51472: LIST
51473: PUSH
51474: LD_INT 4
51476: NEG
51477: PUSH
51478: LD_INT 1
51480: NEG
51481: PUSH
51482: EMPTY
51483: LIST
51484: LIST
51485: PUSH
51486: LD_INT 3
51488: NEG
51489: PUSH
51490: LD_INT 0
51492: PUSH
51493: EMPTY
51494: LIST
51495: LIST
51496: PUSH
51497: LD_INT 3
51499: NEG
51500: PUSH
51501: LD_INT 1
51503: PUSH
51504: EMPTY
51505: LIST
51506: LIST
51507: PUSH
51508: LD_INT 4
51510: NEG
51511: PUSH
51512: LD_INT 1
51514: PUSH
51515: EMPTY
51516: LIST
51517: LIST
51518: PUSH
51519: LD_INT 5
51521: NEG
51522: PUSH
51523: LD_INT 0
51525: PUSH
51526: EMPTY
51527: LIST
51528: LIST
51529: PUSH
51530: LD_INT 5
51532: NEG
51533: PUSH
51534: LD_INT 1
51536: NEG
51537: PUSH
51538: EMPTY
51539: LIST
51540: LIST
51541: PUSH
51542: LD_INT 5
51544: NEG
51545: PUSH
51546: LD_INT 2
51548: NEG
51549: PUSH
51550: EMPTY
51551: LIST
51552: LIST
51553: PUSH
51554: LD_INT 3
51556: NEG
51557: PUSH
51558: LD_INT 2
51560: PUSH
51561: EMPTY
51562: LIST
51563: LIST
51564: PUSH
51565: LD_INT 3
51567: NEG
51568: PUSH
51569: LD_INT 3
51571: NEG
51572: PUSH
51573: EMPTY
51574: LIST
51575: LIST
51576: PUSH
51577: LD_INT 3
51579: NEG
51580: PUSH
51581: LD_INT 4
51583: NEG
51584: PUSH
51585: EMPTY
51586: LIST
51587: LIST
51588: PUSH
51589: LD_INT 2
51591: NEG
51592: PUSH
51593: LD_INT 3
51595: NEG
51596: PUSH
51597: EMPTY
51598: LIST
51599: LIST
51600: PUSH
51601: LD_INT 2
51603: NEG
51604: PUSH
51605: LD_INT 2
51607: NEG
51608: PUSH
51609: EMPTY
51610: LIST
51611: LIST
51612: PUSH
51613: LD_INT 3
51615: NEG
51616: PUSH
51617: LD_INT 2
51619: NEG
51620: PUSH
51621: EMPTY
51622: LIST
51623: LIST
51624: PUSH
51625: LD_INT 4
51627: NEG
51628: PUSH
51629: LD_INT 3
51631: NEG
51632: PUSH
51633: EMPTY
51634: LIST
51635: LIST
51636: PUSH
51637: LD_INT 4
51639: NEG
51640: PUSH
51641: LD_INT 4
51643: NEG
51644: PUSH
51645: EMPTY
51646: LIST
51647: LIST
51648: PUSH
51649: LD_INT 2
51651: NEG
51652: PUSH
51653: LD_INT 4
51655: NEG
51656: PUSH
51657: EMPTY
51658: LIST
51659: LIST
51660: PUSH
51661: LD_INT 4
51663: NEG
51664: PUSH
51665: LD_INT 2
51667: NEG
51668: PUSH
51669: EMPTY
51670: LIST
51671: LIST
51672: PUSH
51673: LD_INT 0
51675: PUSH
51676: LD_INT 4
51678: NEG
51679: PUSH
51680: EMPTY
51681: LIST
51682: LIST
51683: PUSH
51684: LD_INT 0
51686: PUSH
51687: LD_INT 5
51689: NEG
51690: PUSH
51691: EMPTY
51692: LIST
51693: LIST
51694: PUSH
51695: LD_INT 1
51697: PUSH
51698: LD_INT 4
51700: NEG
51701: PUSH
51702: EMPTY
51703: LIST
51704: LIST
51705: PUSH
51706: LD_INT 1
51708: PUSH
51709: LD_INT 3
51711: NEG
51712: PUSH
51713: EMPTY
51714: LIST
51715: LIST
51716: PUSH
51717: LD_INT 0
51719: PUSH
51720: LD_INT 3
51722: NEG
51723: PUSH
51724: EMPTY
51725: LIST
51726: LIST
51727: PUSH
51728: LD_INT 1
51730: NEG
51731: PUSH
51732: LD_INT 4
51734: NEG
51735: PUSH
51736: EMPTY
51737: LIST
51738: LIST
51739: PUSH
51740: LD_INT 1
51742: NEG
51743: PUSH
51744: LD_INT 5
51746: NEG
51747: PUSH
51748: EMPTY
51749: LIST
51750: LIST
51751: PUSH
51752: LD_INT 2
51754: PUSH
51755: LD_INT 3
51757: NEG
51758: PUSH
51759: EMPTY
51760: LIST
51761: LIST
51762: PUSH
51763: LD_INT 2
51765: NEG
51766: PUSH
51767: LD_INT 5
51769: NEG
51770: PUSH
51771: EMPTY
51772: LIST
51773: LIST
51774: PUSH
51775: LD_INT 3
51777: PUSH
51778: LD_INT 0
51780: PUSH
51781: EMPTY
51782: LIST
51783: LIST
51784: PUSH
51785: LD_INT 3
51787: PUSH
51788: LD_INT 1
51790: NEG
51791: PUSH
51792: EMPTY
51793: LIST
51794: LIST
51795: PUSH
51796: LD_INT 4
51798: PUSH
51799: LD_INT 0
51801: PUSH
51802: EMPTY
51803: LIST
51804: LIST
51805: PUSH
51806: LD_INT 4
51808: PUSH
51809: LD_INT 1
51811: PUSH
51812: EMPTY
51813: LIST
51814: LIST
51815: PUSH
51816: LD_INT 3
51818: PUSH
51819: LD_INT 1
51821: PUSH
51822: EMPTY
51823: LIST
51824: LIST
51825: PUSH
51826: LD_INT 2
51828: PUSH
51829: LD_INT 0
51831: PUSH
51832: EMPTY
51833: LIST
51834: LIST
51835: PUSH
51836: LD_INT 2
51838: PUSH
51839: LD_INT 1
51841: NEG
51842: PUSH
51843: EMPTY
51844: LIST
51845: LIST
51846: PUSH
51847: LD_INT 2
51849: PUSH
51850: LD_INT 2
51852: NEG
51853: PUSH
51854: EMPTY
51855: LIST
51856: LIST
51857: PUSH
51858: LD_INT 4
51860: PUSH
51861: LD_INT 2
51863: PUSH
51864: EMPTY
51865: LIST
51866: LIST
51867: PUSH
51868: LD_INT 4
51870: PUSH
51871: LD_INT 4
51873: PUSH
51874: EMPTY
51875: LIST
51876: LIST
51877: PUSH
51878: LD_INT 4
51880: PUSH
51881: LD_INT 3
51883: PUSH
51884: EMPTY
51885: LIST
51886: LIST
51887: PUSH
51888: LD_INT 5
51890: PUSH
51891: LD_INT 4
51893: PUSH
51894: EMPTY
51895: LIST
51896: LIST
51897: PUSH
51898: LD_INT 5
51900: PUSH
51901: LD_INT 5
51903: PUSH
51904: EMPTY
51905: LIST
51906: LIST
51907: PUSH
51908: LD_INT 4
51910: PUSH
51911: LD_INT 5
51913: PUSH
51914: EMPTY
51915: LIST
51916: LIST
51917: PUSH
51918: LD_INT 3
51920: PUSH
51921: LD_INT 4
51923: PUSH
51924: EMPTY
51925: LIST
51926: LIST
51927: PUSH
51928: LD_INT 3
51930: PUSH
51931: LD_INT 3
51933: PUSH
51934: EMPTY
51935: LIST
51936: LIST
51937: PUSH
51938: LD_INT 5
51940: PUSH
51941: LD_INT 3
51943: PUSH
51944: EMPTY
51945: LIST
51946: LIST
51947: PUSH
51948: LD_INT 3
51950: PUSH
51951: LD_INT 5
51953: PUSH
51954: EMPTY
51955: LIST
51956: LIST
51957: PUSH
51958: EMPTY
51959: LIST
51960: LIST
51961: LIST
51962: LIST
51963: LIST
51964: LIST
51965: LIST
51966: LIST
51967: LIST
51968: LIST
51969: LIST
51970: LIST
51971: LIST
51972: LIST
51973: LIST
51974: LIST
51975: LIST
51976: LIST
51977: LIST
51978: LIST
51979: LIST
51980: LIST
51981: LIST
51982: LIST
51983: LIST
51984: LIST
51985: LIST
51986: LIST
51987: LIST
51988: LIST
51989: LIST
51990: LIST
51991: LIST
51992: LIST
51993: LIST
51994: LIST
51995: LIST
51996: LIST
51997: LIST
51998: LIST
51999: LIST
52000: LIST
52001: LIST
52002: LIST
52003: LIST
52004: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
52005: LD_ADDR_VAR 0 33
52009: PUSH
52010: LD_INT 4
52012: NEG
52013: PUSH
52014: LD_INT 4
52016: NEG
52017: PUSH
52018: EMPTY
52019: LIST
52020: LIST
52021: PUSH
52022: LD_INT 4
52024: NEG
52025: PUSH
52026: LD_INT 5
52028: NEG
52029: PUSH
52030: EMPTY
52031: LIST
52032: LIST
52033: PUSH
52034: LD_INT 3
52036: NEG
52037: PUSH
52038: LD_INT 4
52040: NEG
52041: PUSH
52042: EMPTY
52043: LIST
52044: LIST
52045: PUSH
52046: LD_INT 3
52048: NEG
52049: PUSH
52050: LD_INT 3
52052: NEG
52053: PUSH
52054: EMPTY
52055: LIST
52056: LIST
52057: PUSH
52058: LD_INT 4
52060: NEG
52061: PUSH
52062: LD_INT 3
52064: NEG
52065: PUSH
52066: EMPTY
52067: LIST
52068: LIST
52069: PUSH
52070: LD_INT 5
52072: NEG
52073: PUSH
52074: LD_INT 4
52076: NEG
52077: PUSH
52078: EMPTY
52079: LIST
52080: LIST
52081: PUSH
52082: LD_INT 5
52084: NEG
52085: PUSH
52086: LD_INT 5
52088: NEG
52089: PUSH
52090: EMPTY
52091: LIST
52092: LIST
52093: PUSH
52094: LD_INT 3
52096: NEG
52097: PUSH
52098: LD_INT 5
52100: NEG
52101: PUSH
52102: EMPTY
52103: LIST
52104: LIST
52105: PUSH
52106: LD_INT 5
52108: NEG
52109: PUSH
52110: LD_INT 3
52112: NEG
52113: PUSH
52114: EMPTY
52115: LIST
52116: LIST
52117: PUSH
52118: LD_INT 0
52120: PUSH
52121: LD_INT 3
52123: NEG
52124: PUSH
52125: EMPTY
52126: LIST
52127: LIST
52128: PUSH
52129: LD_INT 0
52131: PUSH
52132: LD_INT 4
52134: NEG
52135: PUSH
52136: EMPTY
52137: LIST
52138: LIST
52139: PUSH
52140: LD_INT 1
52142: PUSH
52143: LD_INT 3
52145: NEG
52146: PUSH
52147: EMPTY
52148: LIST
52149: LIST
52150: PUSH
52151: LD_INT 1
52153: PUSH
52154: LD_INT 2
52156: NEG
52157: PUSH
52158: EMPTY
52159: LIST
52160: LIST
52161: PUSH
52162: LD_INT 0
52164: PUSH
52165: LD_INT 2
52167: NEG
52168: PUSH
52169: EMPTY
52170: LIST
52171: LIST
52172: PUSH
52173: LD_INT 1
52175: NEG
52176: PUSH
52177: LD_INT 3
52179: NEG
52180: PUSH
52181: EMPTY
52182: LIST
52183: LIST
52184: PUSH
52185: LD_INT 1
52187: NEG
52188: PUSH
52189: LD_INT 4
52191: NEG
52192: PUSH
52193: EMPTY
52194: LIST
52195: LIST
52196: PUSH
52197: LD_INT 2
52199: PUSH
52200: LD_INT 2
52202: NEG
52203: PUSH
52204: EMPTY
52205: LIST
52206: LIST
52207: PUSH
52208: LD_INT 2
52210: NEG
52211: PUSH
52212: LD_INT 4
52214: NEG
52215: PUSH
52216: EMPTY
52217: LIST
52218: LIST
52219: PUSH
52220: LD_INT 4
52222: PUSH
52223: LD_INT 0
52225: PUSH
52226: EMPTY
52227: LIST
52228: LIST
52229: PUSH
52230: LD_INT 4
52232: PUSH
52233: LD_INT 1
52235: NEG
52236: PUSH
52237: EMPTY
52238: LIST
52239: LIST
52240: PUSH
52241: LD_INT 5
52243: PUSH
52244: LD_INT 0
52246: PUSH
52247: EMPTY
52248: LIST
52249: LIST
52250: PUSH
52251: LD_INT 5
52253: PUSH
52254: LD_INT 1
52256: PUSH
52257: EMPTY
52258: LIST
52259: LIST
52260: PUSH
52261: LD_INT 4
52263: PUSH
52264: LD_INT 1
52266: PUSH
52267: EMPTY
52268: LIST
52269: LIST
52270: PUSH
52271: LD_INT 3
52273: PUSH
52274: LD_INT 0
52276: PUSH
52277: EMPTY
52278: LIST
52279: LIST
52280: PUSH
52281: LD_INT 3
52283: PUSH
52284: LD_INT 1
52286: NEG
52287: PUSH
52288: EMPTY
52289: LIST
52290: LIST
52291: PUSH
52292: LD_INT 3
52294: PUSH
52295: LD_INT 2
52297: NEG
52298: PUSH
52299: EMPTY
52300: LIST
52301: LIST
52302: PUSH
52303: LD_INT 5
52305: PUSH
52306: LD_INT 2
52308: PUSH
52309: EMPTY
52310: LIST
52311: LIST
52312: PUSH
52313: LD_INT 3
52315: PUSH
52316: LD_INT 3
52318: PUSH
52319: EMPTY
52320: LIST
52321: LIST
52322: PUSH
52323: LD_INT 3
52325: PUSH
52326: LD_INT 2
52328: PUSH
52329: EMPTY
52330: LIST
52331: LIST
52332: PUSH
52333: LD_INT 4
52335: PUSH
52336: LD_INT 3
52338: PUSH
52339: EMPTY
52340: LIST
52341: LIST
52342: PUSH
52343: LD_INT 4
52345: PUSH
52346: LD_INT 4
52348: PUSH
52349: EMPTY
52350: LIST
52351: LIST
52352: PUSH
52353: LD_INT 3
52355: PUSH
52356: LD_INT 4
52358: PUSH
52359: EMPTY
52360: LIST
52361: LIST
52362: PUSH
52363: LD_INT 2
52365: PUSH
52366: LD_INT 3
52368: PUSH
52369: EMPTY
52370: LIST
52371: LIST
52372: PUSH
52373: LD_INT 2
52375: PUSH
52376: LD_INT 2
52378: PUSH
52379: EMPTY
52380: LIST
52381: LIST
52382: PUSH
52383: LD_INT 4
52385: PUSH
52386: LD_INT 2
52388: PUSH
52389: EMPTY
52390: LIST
52391: LIST
52392: PUSH
52393: LD_INT 2
52395: PUSH
52396: LD_INT 4
52398: PUSH
52399: EMPTY
52400: LIST
52401: LIST
52402: PUSH
52403: LD_INT 0
52405: PUSH
52406: LD_INT 4
52408: PUSH
52409: EMPTY
52410: LIST
52411: LIST
52412: PUSH
52413: LD_INT 0
52415: PUSH
52416: LD_INT 3
52418: PUSH
52419: EMPTY
52420: LIST
52421: LIST
52422: PUSH
52423: LD_INT 1
52425: PUSH
52426: LD_INT 4
52428: PUSH
52429: EMPTY
52430: LIST
52431: LIST
52432: PUSH
52433: LD_INT 1
52435: PUSH
52436: LD_INT 5
52438: PUSH
52439: EMPTY
52440: LIST
52441: LIST
52442: PUSH
52443: LD_INT 0
52445: PUSH
52446: LD_INT 5
52448: PUSH
52449: EMPTY
52450: LIST
52451: LIST
52452: PUSH
52453: LD_INT 1
52455: NEG
52456: PUSH
52457: LD_INT 4
52459: PUSH
52460: EMPTY
52461: LIST
52462: LIST
52463: PUSH
52464: LD_INT 1
52466: NEG
52467: PUSH
52468: LD_INT 3
52470: PUSH
52471: EMPTY
52472: LIST
52473: LIST
52474: PUSH
52475: LD_INT 2
52477: PUSH
52478: LD_INT 5
52480: PUSH
52481: EMPTY
52482: LIST
52483: LIST
52484: PUSH
52485: LD_INT 2
52487: NEG
52488: PUSH
52489: LD_INT 3
52491: PUSH
52492: EMPTY
52493: LIST
52494: LIST
52495: PUSH
52496: EMPTY
52497: LIST
52498: LIST
52499: LIST
52500: LIST
52501: LIST
52502: LIST
52503: LIST
52504: LIST
52505: LIST
52506: LIST
52507: LIST
52508: LIST
52509: LIST
52510: LIST
52511: LIST
52512: LIST
52513: LIST
52514: LIST
52515: LIST
52516: LIST
52517: LIST
52518: LIST
52519: LIST
52520: LIST
52521: LIST
52522: LIST
52523: LIST
52524: LIST
52525: LIST
52526: LIST
52527: LIST
52528: LIST
52529: LIST
52530: LIST
52531: LIST
52532: LIST
52533: LIST
52534: LIST
52535: LIST
52536: LIST
52537: LIST
52538: LIST
52539: LIST
52540: LIST
52541: LIST
52542: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
52543: LD_ADDR_VAR 0 34
52547: PUSH
52548: LD_INT 0
52550: PUSH
52551: LD_INT 4
52553: NEG
52554: PUSH
52555: EMPTY
52556: LIST
52557: LIST
52558: PUSH
52559: LD_INT 0
52561: PUSH
52562: LD_INT 5
52564: NEG
52565: PUSH
52566: EMPTY
52567: LIST
52568: LIST
52569: PUSH
52570: LD_INT 1
52572: PUSH
52573: LD_INT 4
52575: NEG
52576: PUSH
52577: EMPTY
52578: LIST
52579: LIST
52580: PUSH
52581: LD_INT 1
52583: PUSH
52584: LD_INT 3
52586: NEG
52587: PUSH
52588: EMPTY
52589: LIST
52590: LIST
52591: PUSH
52592: LD_INT 0
52594: PUSH
52595: LD_INT 3
52597: NEG
52598: PUSH
52599: EMPTY
52600: LIST
52601: LIST
52602: PUSH
52603: LD_INT 1
52605: NEG
52606: PUSH
52607: LD_INT 4
52609: NEG
52610: PUSH
52611: EMPTY
52612: LIST
52613: LIST
52614: PUSH
52615: LD_INT 1
52617: NEG
52618: PUSH
52619: LD_INT 5
52621: NEG
52622: PUSH
52623: EMPTY
52624: LIST
52625: LIST
52626: PUSH
52627: LD_INT 2
52629: PUSH
52630: LD_INT 3
52632: NEG
52633: PUSH
52634: EMPTY
52635: LIST
52636: LIST
52637: PUSH
52638: LD_INT 2
52640: NEG
52641: PUSH
52642: LD_INT 5
52644: NEG
52645: PUSH
52646: EMPTY
52647: LIST
52648: LIST
52649: PUSH
52650: LD_INT 3
52652: PUSH
52653: LD_INT 0
52655: PUSH
52656: EMPTY
52657: LIST
52658: LIST
52659: PUSH
52660: LD_INT 3
52662: PUSH
52663: LD_INT 1
52665: NEG
52666: PUSH
52667: EMPTY
52668: LIST
52669: LIST
52670: PUSH
52671: LD_INT 4
52673: PUSH
52674: LD_INT 0
52676: PUSH
52677: EMPTY
52678: LIST
52679: LIST
52680: PUSH
52681: LD_INT 4
52683: PUSH
52684: LD_INT 1
52686: PUSH
52687: EMPTY
52688: LIST
52689: LIST
52690: PUSH
52691: LD_INT 3
52693: PUSH
52694: LD_INT 1
52696: PUSH
52697: EMPTY
52698: LIST
52699: LIST
52700: PUSH
52701: LD_INT 2
52703: PUSH
52704: LD_INT 0
52706: PUSH
52707: EMPTY
52708: LIST
52709: LIST
52710: PUSH
52711: LD_INT 2
52713: PUSH
52714: LD_INT 1
52716: NEG
52717: PUSH
52718: EMPTY
52719: LIST
52720: LIST
52721: PUSH
52722: LD_INT 2
52724: PUSH
52725: LD_INT 2
52727: NEG
52728: PUSH
52729: EMPTY
52730: LIST
52731: LIST
52732: PUSH
52733: LD_INT 4
52735: PUSH
52736: LD_INT 2
52738: PUSH
52739: EMPTY
52740: LIST
52741: LIST
52742: PUSH
52743: LD_INT 4
52745: PUSH
52746: LD_INT 4
52748: PUSH
52749: EMPTY
52750: LIST
52751: LIST
52752: PUSH
52753: LD_INT 4
52755: PUSH
52756: LD_INT 3
52758: PUSH
52759: EMPTY
52760: LIST
52761: LIST
52762: PUSH
52763: LD_INT 5
52765: PUSH
52766: LD_INT 4
52768: PUSH
52769: EMPTY
52770: LIST
52771: LIST
52772: PUSH
52773: LD_INT 5
52775: PUSH
52776: LD_INT 5
52778: PUSH
52779: EMPTY
52780: LIST
52781: LIST
52782: PUSH
52783: LD_INT 4
52785: PUSH
52786: LD_INT 5
52788: PUSH
52789: EMPTY
52790: LIST
52791: LIST
52792: PUSH
52793: LD_INT 3
52795: PUSH
52796: LD_INT 4
52798: PUSH
52799: EMPTY
52800: LIST
52801: LIST
52802: PUSH
52803: LD_INT 3
52805: PUSH
52806: LD_INT 3
52808: PUSH
52809: EMPTY
52810: LIST
52811: LIST
52812: PUSH
52813: LD_INT 5
52815: PUSH
52816: LD_INT 3
52818: PUSH
52819: EMPTY
52820: LIST
52821: LIST
52822: PUSH
52823: LD_INT 3
52825: PUSH
52826: LD_INT 5
52828: PUSH
52829: EMPTY
52830: LIST
52831: LIST
52832: PUSH
52833: LD_INT 0
52835: PUSH
52836: LD_INT 3
52838: PUSH
52839: EMPTY
52840: LIST
52841: LIST
52842: PUSH
52843: LD_INT 0
52845: PUSH
52846: LD_INT 2
52848: PUSH
52849: EMPTY
52850: LIST
52851: LIST
52852: PUSH
52853: LD_INT 1
52855: PUSH
52856: LD_INT 3
52858: PUSH
52859: EMPTY
52860: LIST
52861: LIST
52862: PUSH
52863: LD_INT 1
52865: PUSH
52866: LD_INT 4
52868: PUSH
52869: EMPTY
52870: LIST
52871: LIST
52872: PUSH
52873: LD_INT 0
52875: PUSH
52876: LD_INT 4
52878: PUSH
52879: EMPTY
52880: LIST
52881: LIST
52882: PUSH
52883: LD_INT 1
52885: NEG
52886: PUSH
52887: LD_INT 3
52889: PUSH
52890: EMPTY
52891: LIST
52892: LIST
52893: PUSH
52894: LD_INT 1
52896: NEG
52897: PUSH
52898: LD_INT 2
52900: PUSH
52901: EMPTY
52902: LIST
52903: LIST
52904: PUSH
52905: LD_INT 2
52907: PUSH
52908: LD_INT 4
52910: PUSH
52911: EMPTY
52912: LIST
52913: LIST
52914: PUSH
52915: LD_INT 2
52917: NEG
52918: PUSH
52919: LD_INT 2
52921: PUSH
52922: EMPTY
52923: LIST
52924: LIST
52925: PUSH
52926: LD_INT 4
52928: NEG
52929: PUSH
52930: LD_INT 0
52932: PUSH
52933: EMPTY
52934: LIST
52935: LIST
52936: PUSH
52937: LD_INT 4
52939: NEG
52940: PUSH
52941: LD_INT 1
52943: NEG
52944: PUSH
52945: EMPTY
52946: LIST
52947: LIST
52948: PUSH
52949: LD_INT 3
52951: NEG
52952: PUSH
52953: LD_INT 0
52955: PUSH
52956: EMPTY
52957: LIST
52958: LIST
52959: PUSH
52960: LD_INT 3
52962: NEG
52963: PUSH
52964: LD_INT 1
52966: PUSH
52967: EMPTY
52968: LIST
52969: LIST
52970: PUSH
52971: LD_INT 4
52973: NEG
52974: PUSH
52975: LD_INT 1
52977: PUSH
52978: EMPTY
52979: LIST
52980: LIST
52981: PUSH
52982: LD_INT 5
52984: NEG
52985: PUSH
52986: LD_INT 0
52988: PUSH
52989: EMPTY
52990: LIST
52991: LIST
52992: PUSH
52993: LD_INT 5
52995: NEG
52996: PUSH
52997: LD_INT 1
52999: NEG
53000: PUSH
53001: EMPTY
53002: LIST
53003: LIST
53004: PUSH
53005: LD_INT 5
53007: NEG
53008: PUSH
53009: LD_INT 2
53011: NEG
53012: PUSH
53013: EMPTY
53014: LIST
53015: LIST
53016: PUSH
53017: LD_INT 3
53019: NEG
53020: PUSH
53021: LD_INT 2
53023: PUSH
53024: EMPTY
53025: LIST
53026: LIST
53027: PUSH
53028: EMPTY
53029: LIST
53030: LIST
53031: LIST
53032: LIST
53033: LIST
53034: LIST
53035: LIST
53036: LIST
53037: LIST
53038: LIST
53039: LIST
53040: LIST
53041: LIST
53042: LIST
53043: LIST
53044: LIST
53045: LIST
53046: LIST
53047: LIST
53048: LIST
53049: LIST
53050: LIST
53051: LIST
53052: LIST
53053: LIST
53054: LIST
53055: LIST
53056: LIST
53057: LIST
53058: LIST
53059: LIST
53060: LIST
53061: LIST
53062: LIST
53063: LIST
53064: LIST
53065: LIST
53066: LIST
53067: LIST
53068: LIST
53069: LIST
53070: LIST
53071: LIST
53072: LIST
53073: LIST
53074: ST_TO_ADDR
// end ; end ;
53075: GO 53078
53077: POP
// case btype of b_depot , b_warehouse :
53078: LD_VAR 0 1
53082: PUSH
53083: LD_INT 0
53085: DOUBLE
53086: EQUAL
53087: IFTRUE 53097
53089: LD_INT 1
53091: DOUBLE
53092: EQUAL
53093: IFTRUE 53097
53095: GO 53298
53097: POP
// case nation of nation_american :
53098: LD_VAR 0 5
53102: PUSH
53103: LD_INT 1
53105: DOUBLE
53106: EQUAL
53107: IFTRUE 53111
53109: GO 53167
53111: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
53112: LD_ADDR_VAR 0 9
53116: PUSH
53117: LD_VAR 0 11
53121: PUSH
53122: LD_VAR 0 12
53126: PUSH
53127: LD_VAR 0 13
53131: PUSH
53132: LD_VAR 0 14
53136: PUSH
53137: LD_VAR 0 15
53141: PUSH
53142: LD_VAR 0 16
53146: PUSH
53147: EMPTY
53148: LIST
53149: LIST
53150: LIST
53151: LIST
53152: LIST
53153: LIST
53154: PUSH
53155: LD_VAR 0 4
53159: PUSH
53160: LD_INT 1
53162: PLUS
53163: ARRAY
53164: ST_TO_ADDR
53165: GO 53296
53167: LD_INT 2
53169: DOUBLE
53170: EQUAL
53171: IFTRUE 53175
53173: GO 53231
53175: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
53176: LD_ADDR_VAR 0 9
53180: PUSH
53181: LD_VAR 0 17
53185: PUSH
53186: LD_VAR 0 18
53190: PUSH
53191: LD_VAR 0 19
53195: PUSH
53196: LD_VAR 0 20
53200: PUSH
53201: LD_VAR 0 21
53205: PUSH
53206: LD_VAR 0 22
53210: PUSH
53211: EMPTY
53212: LIST
53213: LIST
53214: LIST
53215: LIST
53216: LIST
53217: LIST
53218: PUSH
53219: LD_VAR 0 4
53223: PUSH
53224: LD_INT 1
53226: PLUS
53227: ARRAY
53228: ST_TO_ADDR
53229: GO 53296
53231: LD_INT 3
53233: DOUBLE
53234: EQUAL
53235: IFTRUE 53239
53237: GO 53295
53239: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
53240: LD_ADDR_VAR 0 9
53244: PUSH
53245: LD_VAR 0 23
53249: PUSH
53250: LD_VAR 0 24
53254: PUSH
53255: LD_VAR 0 25
53259: PUSH
53260: LD_VAR 0 26
53264: PUSH
53265: LD_VAR 0 27
53269: PUSH
53270: LD_VAR 0 28
53274: PUSH
53275: EMPTY
53276: LIST
53277: LIST
53278: LIST
53279: LIST
53280: LIST
53281: LIST
53282: PUSH
53283: LD_VAR 0 4
53287: PUSH
53288: LD_INT 1
53290: PLUS
53291: ARRAY
53292: ST_TO_ADDR
53293: GO 53296
53295: POP
53296: GO 53851
53298: LD_INT 2
53300: DOUBLE
53301: EQUAL
53302: IFTRUE 53312
53304: LD_INT 3
53306: DOUBLE
53307: EQUAL
53308: IFTRUE 53312
53310: GO 53368
53312: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
53313: LD_ADDR_VAR 0 9
53317: PUSH
53318: LD_VAR 0 29
53322: PUSH
53323: LD_VAR 0 30
53327: PUSH
53328: LD_VAR 0 31
53332: PUSH
53333: LD_VAR 0 32
53337: PUSH
53338: LD_VAR 0 33
53342: PUSH
53343: LD_VAR 0 34
53347: PUSH
53348: EMPTY
53349: LIST
53350: LIST
53351: LIST
53352: LIST
53353: LIST
53354: LIST
53355: PUSH
53356: LD_VAR 0 4
53360: PUSH
53361: LD_INT 1
53363: PLUS
53364: ARRAY
53365: ST_TO_ADDR
53366: GO 53851
53368: LD_INT 16
53370: DOUBLE
53371: EQUAL
53372: IFTRUE 53430
53374: LD_INT 17
53376: DOUBLE
53377: EQUAL
53378: IFTRUE 53430
53380: LD_INT 18
53382: DOUBLE
53383: EQUAL
53384: IFTRUE 53430
53386: LD_INT 19
53388: DOUBLE
53389: EQUAL
53390: IFTRUE 53430
53392: LD_INT 22
53394: DOUBLE
53395: EQUAL
53396: IFTRUE 53430
53398: LD_INT 20
53400: DOUBLE
53401: EQUAL
53402: IFTRUE 53430
53404: LD_INT 21
53406: DOUBLE
53407: EQUAL
53408: IFTRUE 53430
53410: LD_INT 23
53412: DOUBLE
53413: EQUAL
53414: IFTRUE 53430
53416: LD_INT 24
53418: DOUBLE
53419: EQUAL
53420: IFTRUE 53430
53422: LD_INT 25
53424: DOUBLE
53425: EQUAL
53426: IFTRUE 53430
53428: GO 53486
53430: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
53431: LD_ADDR_VAR 0 9
53435: PUSH
53436: LD_VAR 0 35
53440: PUSH
53441: LD_VAR 0 36
53445: PUSH
53446: LD_VAR 0 37
53450: PUSH
53451: LD_VAR 0 38
53455: PUSH
53456: LD_VAR 0 39
53460: PUSH
53461: LD_VAR 0 40
53465: PUSH
53466: EMPTY
53467: LIST
53468: LIST
53469: LIST
53470: LIST
53471: LIST
53472: LIST
53473: PUSH
53474: LD_VAR 0 4
53478: PUSH
53479: LD_INT 1
53481: PLUS
53482: ARRAY
53483: ST_TO_ADDR
53484: GO 53851
53486: LD_INT 6
53488: DOUBLE
53489: EQUAL
53490: IFTRUE 53542
53492: LD_INT 7
53494: DOUBLE
53495: EQUAL
53496: IFTRUE 53542
53498: LD_INT 8
53500: DOUBLE
53501: EQUAL
53502: IFTRUE 53542
53504: LD_INT 13
53506: DOUBLE
53507: EQUAL
53508: IFTRUE 53542
53510: LD_INT 12
53512: DOUBLE
53513: EQUAL
53514: IFTRUE 53542
53516: LD_INT 15
53518: DOUBLE
53519: EQUAL
53520: IFTRUE 53542
53522: LD_INT 11
53524: DOUBLE
53525: EQUAL
53526: IFTRUE 53542
53528: LD_INT 14
53530: DOUBLE
53531: EQUAL
53532: IFTRUE 53542
53534: LD_INT 10
53536: DOUBLE
53537: EQUAL
53538: IFTRUE 53542
53540: GO 53598
53542: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
53543: LD_ADDR_VAR 0 9
53547: PUSH
53548: LD_VAR 0 41
53552: PUSH
53553: LD_VAR 0 42
53557: PUSH
53558: LD_VAR 0 43
53562: PUSH
53563: LD_VAR 0 44
53567: PUSH
53568: LD_VAR 0 45
53572: PUSH
53573: LD_VAR 0 46
53577: PUSH
53578: EMPTY
53579: LIST
53580: LIST
53581: LIST
53582: LIST
53583: LIST
53584: LIST
53585: PUSH
53586: LD_VAR 0 4
53590: PUSH
53591: LD_INT 1
53593: PLUS
53594: ARRAY
53595: ST_TO_ADDR
53596: GO 53851
53598: LD_INT 36
53600: DOUBLE
53601: EQUAL
53602: IFTRUE 53606
53604: GO 53662
53606: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
53607: LD_ADDR_VAR 0 9
53611: PUSH
53612: LD_VAR 0 47
53616: PUSH
53617: LD_VAR 0 48
53621: PUSH
53622: LD_VAR 0 49
53626: PUSH
53627: LD_VAR 0 50
53631: PUSH
53632: LD_VAR 0 51
53636: PUSH
53637: LD_VAR 0 52
53641: PUSH
53642: EMPTY
53643: LIST
53644: LIST
53645: LIST
53646: LIST
53647: LIST
53648: LIST
53649: PUSH
53650: LD_VAR 0 4
53654: PUSH
53655: LD_INT 1
53657: PLUS
53658: ARRAY
53659: ST_TO_ADDR
53660: GO 53851
53662: LD_INT 4
53664: DOUBLE
53665: EQUAL
53666: IFTRUE 53688
53668: LD_INT 5
53670: DOUBLE
53671: EQUAL
53672: IFTRUE 53688
53674: LD_INT 34
53676: DOUBLE
53677: EQUAL
53678: IFTRUE 53688
53680: LD_INT 37
53682: DOUBLE
53683: EQUAL
53684: IFTRUE 53688
53686: GO 53744
53688: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
53689: LD_ADDR_VAR 0 9
53693: PUSH
53694: LD_VAR 0 53
53698: PUSH
53699: LD_VAR 0 54
53703: PUSH
53704: LD_VAR 0 55
53708: PUSH
53709: LD_VAR 0 56
53713: PUSH
53714: LD_VAR 0 57
53718: PUSH
53719: LD_VAR 0 58
53723: PUSH
53724: EMPTY
53725: LIST
53726: LIST
53727: LIST
53728: LIST
53729: LIST
53730: LIST
53731: PUSH
53732: LD_VAR 0 4
53736: PUSH
53737: LD_INT 1
53739: PLUS
53740: ARRAY
53741: ST_TO_ADDR
53742: GO 53851
53744: LD_INT 31
53746: DOUBLE
53747: EQUAL
53748: IFTRUE 53794
53750: LD_INT 32
53752: DOUBLE
53753: EQUAL
53754: IFTRUE 53794
53756: LD_INT 33
53758: DOUBLE
53759: EQUAL
53760: IFTRUE 53794
53762: LD_INT 27
53764: DOUBLE
53765: EQUAL
53766: IFTRUE 53794
53768: LD_INT 26
53770: DOUBLE
53771: EQUAL
53772: IFTRUE 53794
53774: LD_INT 28
53776: DOUBLE
53777: EQUAL
53778: IFTRUE 53794
53780: LD_INT 29
53782: DOUBLE
53783: EQUAL
53784: IFTRUE 53794
53786: LD_INT 30
53788: DOUBLE
53789: EQUAL
53790: IFTRUE 53794
53792: GO 53850
53794: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
53795: LD_ADDR_VAR 0 9
53799: PUSH
53800: LD_VAR 0 59
53804: PUSH
53805: LD_VAR 0 60
53809: PUSH
53810: LD_VAR 0 61
53814: PUSH
53815: LD_VAR 0 62
53819: PUSH
53820: LD_VAR 0 63
53824: PUSH
53825: LD_VAR 0 64
53829: PUSH
53830: EMPTY
53831: LIST
53832: LIST
53833: LIST
53834: LIST
53835: LIST
53836: LIST
53837: PUSH
53838: LD_VAR 0 4
53842: PUSH
53843: LD_INT 1
53845: PLUS
53846: ARRAY
53847: ST_TO_ADDR
53848: GO 53851
53850: POP
// temp_list2 = [ ] ;
53851: LD_ADDR_VAR 0 10
53855: PUSH
53856: EMPTY
53857: ST_TO_ADDR
// for i in temp_list do
53858: LD_ADDR_VAR 0 8
53862: PUSH
53863: LD_VAR 0 9
53867: PUSH
53868: FOR_IN
53869: IFFALSE 53921
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
53871: LD_ADDR_VAR 0 10
53875: PUSH
53876: LD_VAR 0 10
53880: PUSH
53881: LD_VAR 0 8
53885: PUSH
53886: LD_INT 1
53888: ARRAY
53889: PUSH
53890: LD_VAR 0 2
53894: PLUS
53895: PUSH
53896: LD_VAR 0 8
53900: PUSH
53901: LD_INT 2
53903: ARRAY
53904: PUSH
53905: LD_VAR 0 3
53909: PLUS
53910: PUSH
53911: EMPTY
53912: LIST
53913: LIST
53914: PUSH
53915: EMPTY
53916: LIST
53917: ADD
53918: ST_TO_ADDR
53919: GO 53868
53921: POP
53922: POP
// result = temp_list2 ;
53923: LD_ADDR_VAR 0 7
53927: PUSH
53928: LD_VAR 0 10
53932: ST_TO_ADDR
// end ;
53933: LD_VAR 0 7
53937: RET
// export function EnemyInRange ( unit , dist ) ; begin
53938: LD_INT 0
53940: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
53941: LD_ADDR_VAR 0 3
53945: PUSH
53946: LD_VAR 0 1
53950: PPUSH
53951: CALL_OW 255
53955: PPUSH
53956: LD_VAR 0 1
53960: PPUSH
53961: CALL_OW 250
53965: PPUSH
53966: LD_VAR 0 1
53970: PPUSH
53971: CALL_OW 251
53975: PPUSH
53976: LD_VAR 0 2
53980: PPUSH
53981: CALL 27311 0 4
53985: PUSH
53986: LD_INT 4
53988: ARRAY
53989: ST_TO_ADDR
// end ;
53990: LD_VAR 0 3
53994: RET
// export function PlayerSeeMe ( unit ) ; begin
53995: LD_INT 0
53997: PPUSH
// result := See ( your_side , unit ) ;
53998: LD_ADDR_VAR 0 2
54002: PUSH
54003: LD_OWVAR 2
54007: PPUSH
54008: LD_VAR 0 1
54012: PPUSH
54013: CALL_OW 292
54017: ST_TO_ADDR
// end ;
54018: LD_VAR 0 2
54022: RET
// export function ReverseDir ( unit ) ; begin
54023: LD_INT 0
54025: PPUSH
// if not unit then
54026: LD_VAR 0 1
54030: NOT
54031: IFFALSE 54035
// exit ;
54033: GO 54058
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
54035: LD_ADDR_VAR 0 2
54039: PUSH
54040: LD_VAR 0 1
54044: PPUSH
54045: CALL_OW 254
54049: PUSH
54050: LD_INT 3
54052: PLUS
54053: PUSH
54054: LD_INT 6
54056: MOD
54057: ST_TO_ADDR
// end ;
54058: LD_VAR 0 2
54062: RET
// export function ReverseArray ( array ) ; var i ; begin
54063: LD_INT 0
54065: PPUSH
54066: PPUSH
// if not array then
54067: LD_VAR 0 1
54071: NOT
54072: IFFALSE 54076
// exit ;
54074: GO 54131
// result := [ ] ;
54076: LD_ADDR_VAR 0 2
54080: PUSH
54081: EMPTY
54082: ST_TO_ADDR
// for i := array downto 1 do
54083: LD_ADDR_VAR 0 3
54087: PUSH
54088: DOUBLE
54089: LD_VAR 0 1
54093: INC
54094: ST_TO_ADDR
54095: LD_INT 1
54097: PUSH
54098: FOR_DOWNTO
54099: IFFALSE 54129
// result := Join ( result , array [ i ] ) ;
54101: LD_ADDR_VAR 0 2
54105: PUSH
54106: LD_VAR 0 2
54110: PPUSH
54111: LD_VAR 0 1
54115: PUSH
54116: LD_VAR 0 3
54120: ARRAY
54121: PPUSH
54122: CALL 58796 0 2
54126: ST_TO_ADDR
54127: GO 54098
54129: POP
54130: POP
// end ;
54131: LD_VAR 0 2
54135: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
54136: LD_INT 0
54138: PPUSH
54139: PPUSH
54140: PPUSH
54141: PPUSH
54142: PPUSH
54143: PPUSH
// if not unit or not hexes then
54144: LD_VAR 0 1
54148: NOT
54149: PUSH
54150: LD_VAR 0 2
54154: NOT
54155: OR
54156: IFFALSE 54160
// exit ;
54158: GO 54283
// dist := 9999 ;
54160: LD_ADDR_VAR 0 5
54164: PUSH
54165: LD_INT 9999
54167: ST_TO_ADDR
// for i = 1 to hexes do
54168: LD_ADDR_VAR 0 4
54172: PUSH
54173: DOUBLE
54174: LD_INT 1
54176: DEC
54177: ST_TO_ADDR
54178: LD_VAR 0 2
54182: PUSH
54183: FOR_TO
54184: IFFALSE 54271
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
54186: LD_ADDR_VAR 0 6
54190: PUSH
54191: LD_VAR 0 1
54195: PPUSH
54196: LD_VAR 0 2
54200: PUSH
54201: LD_VAR 0 4
54205: ARRAY
54206: PUSH
54207: LD_INT 1
54209: ARRAY
54210: PPUSH
54211: LD_VAR 0 2
54215: PUSH
54216: LD_VAR 0 4
54220: ARRAY
54221: PUSH
54222: LD_INT 2
54224: ARRAY
54225: PPUSH
54226: CALL_OW 297
54230: ST_TO_ADDR
// if tdist < dist then
54231: LD_VAR 0 6
54235: PUSH
54236: LD_VAR 0 5
54240: LESS
54241: IFFALSE 54269
// begin hex := hexes [ i ] ;
54243: LD_ADDR_VAR 0 8
54247: PUSH
54248: LD_VAR 0 2
54252: PUSH
54253: LD_VAR 0 4
54257: ARRAY
54258: ST_TO_ADDR
// dist := tdist ;
54259: LD_ADDR_VAR 0 5
54263: PUSH
54264: LD_VAR 0 6
54268: ST_TO_ADDR
// end ; end ;
54269: GO 54183
54271: POP
54272: POP
// result := hex ;
54273: LD_ADDR_VAR 0 3
54277: PUSH
54278: LD_VAR 0 8
54282: ST_TO_ADDR
// end ;
54283: LD_VAR 0 3
54287: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
54288: LD_INT 0
54290: PPUSH
54291: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
54292: LD_VAR 0 1
54296: NOT
54297: PUSH
54298: LD_VAR 0 1
54302: PUSH
54303: LD_INT 21
54305: PUSH
54306: LD_INT 2
54308: PUSH
54309: EMPTY
54310: LIST
54311: LIST
54312: PUSH
54313: LD_INT 23
54315: PUSH
54316: LD_INT 2
54318: PUSH
54319: EMPTY
54320: LIST
54321: LIST
54322: PUSH
54323: EMPTY
54324: LIST
54325: LIST
54326: PPUSH
54327: CALL_OW 69
54331: IN
54332: NOT
54333: OR
54334: IFFALSE 54338
// exit ;
54336: GO 54385
// for i = 1 to 3 do
54338: LD_ADDR_VAR 0 3
54342: PUSH
54343: DOUBLE
54344: LD_INT 1
54346: DEC
54347: ST_TO_ADDR
54348: LD_INT 3
54350: PUSH
54351: FOR_TO
54352: IFFALSE 54383
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
54354: LD_VAR 0 1
54358: PPUSH
54359: CALL_OW 250
54363: PPUSH
54364: LD_VAR 0 1
54368: PPUSH
54369: CALL_OW 251
54373: PPUSH
54374: LD_INT 1
54376: PPUSH
54377: CALL_OW 453
54381: GO 54351
54383: POP
54384: POP
// end ;
54385: LD_VAR 0 2
54389: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
54390: LD_INT 0
54392: PPUSH
54393: PPUSH
54394: PPUSH
54395: PPUSH
54396: PPUSH
54397: PPUSH
// if not unit or not enemy_unit then
54398: LD_VAR 0 1
54402: NOT
54403: PUSH
54404: LD_VAR 0 2
54408: NOT
54409: OR
54410: IFFALSE 54414
// exit ;
54412: GO 54881
// if GetLives ( i ) < 250 then
54414: LD_VAR 0 4
54418: PPUSH
54419: CALL_OW 256
54423: PUSH
54424: LD_INT 250
54426: LESS
54427: IFFALSE 54440
// begin ComAutodestruct ( i ) ;
54429: LD_VAR 0 4
54433: PPUSH
54434: CALL 54288 0 1
// exit ;
54438: GO 54881
// end ; x := GetX ( enemy_unit ) ;
54440: LD_ADDR_VAR 0 7
54444: PUSH
54445: LD_VAR 0 2
54449: PPUSH
54450: CALL_OW 250
54454: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
54455: LD_ADDR_VAR 0 8
54459: PUSH
54460: LD_VAR 0 2
54464: PPUSH
54465: CALL_OW 251
54469: ST_TO_ADDR
// if not x or not y then
54470: LD_VAR 0 7
54474: NOT
54475: PUSH
54476: LD_VAR 0 8
54480: NOT
54481: OR
54482: IFFALSE 54486
// exit ;
54484: GO 54881
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
54486: LD_ADDR_VAR 0 6
54490: PUSH
54491: LD_VAR 0 7
54495: PPUSH
54496: LD_INT 0
54498: PPUSH
54499: LD_INT 4
54501: PPUSH
54502: CALL_OW 272
54506: PUSH
54507: LD_VAR 0 8
54511: PPUSH
54512: LD_INT 0
54514: PPUSH
54515: LD_INT 4
54517: PPUSH
54518: CALL_OW 273
54522: PUSH
54523: EMPTY
54524: LIST
54525: LIST
54526: PUSH
54527: LD_VAR 0 7
54531: PPUSH
54532: LD_INT 1
54534: PPUSH
54535: LD_INT 4
54537: PPUSH
54538: CALL_OW 272
54542: PUSH
54543: LD_VAR 0 8
54547: PPUSH
54548: LD_INT 1
54550: PPUSH
54551: LD_INT 4
54553: PPUSH
54554: CALL_OW 273
54558: PUSH
54559: EMPTY
54560: LIST
54561: LIST
54562: PUSH
54563: LD_VAR 0 7
54567: PPUSH
54568: LD_INT 2
54570: PPUSH
54571: LD_INT 4
54573: PPUSH
54574: CALL_OW 272
54578: PUSH
54579: LD_VAR 0 8
54583: PPUSH
54584: LD_INT 2
54586: PPUSH
54587: LD_INT 4
54589: PPUSH
54590: CALL_OW 273
54594: PUSH
54595: EMPTY
54596: LIST
54597: LIST
54598: PUSH
54599: LD_VAR 0 7
54603: PPUSH
54604: LD_INT 3
54606: PPUSH
54607: LD_INT 4
54609: PPUSH
54610: CALL_OW 272
54614: PUSH
54615: LD_VAR 0 8
54619: PPUSH
54620: LD_INT 3
54622: PPUSH
54623: LD_INT 4
54625: PPUSH
54626: CALL_OW 273
54630: PUSH
54631: EMPTY
54632: LIST
54633: LIST
54634: PUSH
54635: LD_VAR 0 7
54639: PPUSH
54640: LD_INT 4
54642: PPUSH
54643: LD_INT 4
54645: PPUSH
54646: CALL_OW 272
54650: PUSH
54651: LD_VAR 0 8
54655: PPUSH
54656: LD_INT 4
54658: PPUSH
54659: LD_INT 4
54661: PPUSH
54662: CALL_OW 273
54666: PUSH
54667: EMPTY
54668: LIST
54669: LIST
54670: PUSH
54671: LD_VAR 0 7
54675: PPUSH
54676: LD_INT 5
54678: PPUSH
54679: LD_INT 4
54681: PPUSH
54682: CALL_OW 272
54686: PUSH
54687: LD_VAR 0 8
54691: PPUSH
54692: LD_INT 5
54694: PPUSH
54695: LD_INT 4
54697: PPUSH
54698: CALL_OW 273
54702: PUSH
54703: EMPTY
54704: LIST
54705: LIST
54706: PUSH
54707: EMPTY
54708: LIST
54709: LIST
54710: LIST
54711: LIST
54712: LIST
54713: LIST
54714: ST_TO_ADDR
// for i = tmp downto 1 do
54715: LD_ADDR_VAR 0 4
54719: PUSH
54720: DOUBLE
54721: LD_VAR 0 6
54725: INC
54726: ST_TO_ADDR
54727: LD_INT 1
54729: PUSH
54730: FOR_DOWNTO
54731: IFFALSE 54832
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
54733: LD_VAR 0 6
54737: PUSH
54738: LD_VAR 0 4
54742: ARRAY
54743: PUSH
54744: LD_INT 1
54746: ARRAY
54747: PPUSH
54748: LD_VAR 0 6
54752: PUSH
54753: LD_VAR 0 4
54757: ARRAY
54758: PUSH
54759: LD_INT 2
54761: ARRAY
54762: PPUSH
54763: CALL_OW 488
54767: NOT
54768: PUSH
54769: LD_VAR 0 6
54773: PUSH
54774: LD_VAR 0 4
54778: ARRAY
54779: PUSH
54780: LD_INT 1
54782: ARRAY
54783: PPUSH
54784: LD_VAR 0 6
54788: PUSH
54789: LD_VAR 0 4
54793: ARRAY
54794: PUSH
54795: LD_INT 2
54797: ARRAY
54798: PPUSH
54799: CALL_OW 428
54803: PUSH
54804: LD_INT 0
54806: NONEQUAL
54807: OR
54808: IFFALSE 54830
// tmp := Delete ( tmp , i ) ;
54810: LD_ADDR_VAR 0 6
54814: PUSH
54815: LD_VAR 0 6
54819: PPUSH
54820: LD_VAR 0 4
54824: PPUSH
54825: CALL_OW 3
54829: ST_TO_ADDR
54830: GO 54730
54832: POP
54833: POP
// j := GetClosestHex ( unit , tmp ) ;
54834: LD_ADDR_VAR 0 5
54838: PUSH
54839: LD_VAR 0 1
54843: PPUSH
54844: LD_VAR 0 6
54848: PPUSH
54849: CALL 54136 0 2
54853: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
54854: LD_VAR 0 1
54858: PPUSH
54859: LD_VAR 0 5
54863: PUSH
54864: LD_INT 1
54866: ARRAY
54867: PPUSH
54868: LD_VAR 0 5
54872: PUSH
54873: LD_INT 2
54875: ARRAY
54876: PPUSH
54877: CALL_OW 111
// end ;
54881: LD_VAR 0 3
54885: RET
// export function PrepareApemanSoldier ( ) ; begin
54886: LD_INT 0
54888: PPUSH
// uc_nation := 0 ;
54889: LD_ADDR_OWVAR 21
54893: PUSH
54894: LD_INT 0
54896: ST_TO_ADDR
// hc_sex := sex_male ;
54897: LD_ADDR_OWVAR 27
54901: PUSH
54902: LD_INT 1
54904: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
54905: LD_ADDR_OWVAR 28
54909: PUSH
54910: LD_INT 15
54912: ST_TO_ADDR
// hc_gallery :=  ;
54913: LD_ADDR_OWVAR 33
54917: PUSH
54918: LD_STRING 
54920: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
54921: LD_ADDR_OWVAR 31
54925: PUSH
54926: LD_INT 0
54928: PPUSH
54929: LD_INT 3
54931: PPUSH
54932: CALL_OW 12
54936: PUSH
54937: LD_INT 0
54939: PPUSH
54940: LD_INT 3
54942: PPUSH
54943: CALL_OW 12
54947: PUSH
54948: LD_INT 0
54950: PUSH
54951: LD_INT 0
54953: PUSH
54954: EMPTY
54955: LIST
54956: LIST
54957: LIST
54958: LIST
54959: ST_TO_ADDR
// end ;
54960: LD_VAR 0 1
54964: RET
// export function PrepareApemanEngineer ( ) ; begin
54965: LD_INT 0
54967: PPUSH
// uc_nation := 0 ;
54968: LD_ADDR_OWVAR 21
54972: PUSH
54973: LD_INT 0
54975: ST_TO_ADDR
// hc_sex := sex_male ;
54976: LD_ADDR_OWVAR 27
54980: PUSH
54981: LD_INT 1
54983: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
54984: LD_ADDR_OWVAR 28
54988: PUSH
54989: LD_INT 16
54991: ST_TO_ADDR
// hc_gallery :=  ;
54992: LD_ADDR_OWVAR 33
54996: PUSH
54997: LD_STRING 
54999: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
55000: LD_ADDR_OWVAR 31
55004: PUSH
55005: LD_INT 0
55007: PPUSH
55008: LD_INT 3
55010: PPUSH
55011: CALL_OW 12
55015: PUSH
55016: LD_INT 0
55018: PPUSH
55019: LD_INT 3
55021: PPUSH
55022: CALL_OW 12
55026: PUSH
55027: LD_INT 0
55029: PUSH
55030: LD_INT 0
55032: PUSH
55033: EMPTY
55034: LIST
55035: LIST
55036: LIST
55037: LIST
55038: ST_TO_ADDR
// end ;
55039: LD_VAR 0 1
55043: RET
// export function PrepareApeman ( agressivity ) ; begin
55044: LD_INT 0
55046: PPUSH
// uc_side := 0 ;
55047: LD_ADDR_OWVAR 20
55051: PUSH
55052: LD_INT 0
55054: ST_TO_ADDR
// uc_nation := 0 ;
55055: LD_ADDR_OWVAR 21
55059: PUSH
55060: LD_INT 0
55062: ST_TO_ADDR
// hc_sex := sex_male ;
55063: LD_ADDR_OWVAR 27
55067: PUSH
55068: LD_INT 1
55070: ST_TO_ADDR
// hc_class := class_apeman ;
55071: LD_ADDR_OWVAR 28
55075: PUSH
55076: LD_INT 12
55078: ST_TO_ADDR
// hc_gallery :=  ;
55079: LD_ADDR_OWVAR 33
55083: PUSH
55084: LD_STRING 
55086: ST_TO_ADDR
// if agressivity = 0 then
55087: LD_VAR 0 1
55091: PUSH
55092: LD_INT 0
55094: EQUAL
55095: IFFALSE 55107
// hc_agressivity := 0 else
55097: LD_ADDR_OWVAR 35
55101: PUSH
55102: LD_INT 0
55104: ST_TO_ADDR
55105: GO 55128
// hc_agressivity := rand ( - agressivity , agressivity ) ;
55107: LD_ADDR_OWVAR 35
55111: PUSH
55112: LD_VAR 0 1
55116: NEG
55117: PPUSH
55118: LD_VAR 0 1
55122: PPUSH
55123: CALL_OW 12
55127: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
55128: LD_ADDR_OWVAR 31
55132: PUSH
55133: LD_INT 0
55135: PPUSH
55136: LD_INT 3
55138: PPUSH
55139: CALL_OW 12
55143: PUSH
55144: LD_INT 0
55146: PPUSH
55147: LD_INT 3
55149: PPUSH
55150: CALL_OW 12
55154: PUSH
55155: LD_INT 0
55157: PUSH
55158: LD_INT 0
55160: PUSH
55161: EMPTY
55162: LIST
55163: LIST
55164: LIST
55165: LIST
55166: ST_TO_ADDR
// end ;
55167: LD_VAR 0 2
55171: RET
// export function PrepareTiger ( agressivity ) ; begin
55172: LD_INT 0
55174: PPUSH
// uc_side := 0 ;
55175: LD_ADDR_OWVAR 20
55179: PUSH
55180: LD_INT 0
55182: ST_TO_ADDR
// uc_nation := 0 ;
55183: LD_ADDR_OWVAR 21
55187: PUSH
55188: LD_INT 0
55190: ST_TO_ADDR
// hc_class := class_tiger ;
55191: LD_ADDR_OWVAR 28
55195: PUSH
55196: LD_INT 14
55198: ST_TO_ADDR
// hc_gallery :=  ;
55199: LD_ADDR_OWVAR 33
55203: PUSH
55204: LD_STRING 
55206: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
55207: LD_ADDR_OWVAR 35
55211: PUSH
55212: LD_VAR 0 1
55216: NEG
55217: PPUSH
55218: LD_VAR 0 1
55222: PPUSH
55223: CALL_OW 12
55227: ST_TO_ADDR
// end ;
55228: LD_VAR 0 2
55232: RET
// export function PrepareEnchidna ( ) ; begin
55233: LD_INT 0
55235: PPUSH
// uc_side := 0 ;
55236: LD_ADDR_OWVAR 20
55240: PUSH
55241: LD_INT 0
55243: ST_TO_ADDR
// uc_nation := 0 ;
55244: LD_ADDR_OWVAR 21
55248: PUSH
55249: LD_INT 0
55251: ST_TO_ADDR
// hc_class := class_baggie ;
55252: LD_ADDR_OWVAR 28
55256: PUSH
55257: LD_INT 13
55259: ST_TO_ADDR
// hc_gallery :=  ;
55260: LD_ADDR_OWVAR 33
55264: PUSH
55265: LD_STRING 
55267: ST_TO_ADDR
// end ;
55268: LD_VAR 0 1
55272: RET
// export function PrepareFrog ( ) ; begin
55273: LD_INT 0
55275: PPUSH
// uc_side := 0 ;
55276: LD_ADDR_OWVAR 20
55280: PUSH
55281: LD_INT 0
55283: ST_TO_ADDR
// uc_nation := 0 ;
55284: LD_ADDR_OWVAR 21
55288: PUSH
55289: LD_INT 0
55291: ST_TO_ADDR
// hc_class := class_frog ;
55292: LD_ADDR_OWVAR 28
55296: PUSH
55297: LD_INT 19
55299: ST_TO_ADDR
// hc_gallery :=  ;
55300: LD_ADDR_OWVAR 33
55304: PUSH
55305: LD_STRING 
55307: ST_TO_ADDR
// end ;
55308: LD_VAR 0 1
55312: RET
// export function PrepareFish ( ) ; begin
55313: LD_INT 0
55315: PPUSH
// uc_side := 0 ;
55316: LD_ADDR_OWVAR 20
55320: PUSH
55321: LD_INT 0
55323: ST_TO_ADDR
// uc_nation := 0 ;
55324: LD_ADDR_OWVAR 21
55328: PUSH
55329: LD_INT 0
55331: ST_TO_ADDR
// hc_class := class_fish ;
55332: LD_ADDR_OWVAR 28
55336: PUSH
55337: LD_INT 20
55339: ST_TO_ADDR
// hc_gallery :=  ;
55340: LD_ADDR_OWVAR 33
55344: PUSH
55345: LD_STRING 
55347: ST_TO_ADDR
// end ;
55348: LD_VAR 0 1
55352: RET
// export function PrepareBird ( ) ; begin
55353: LD_INT 0
55355: PPUSH
// uc_side := 0 ;
55356: LD_ADDR_OWVAR 20
55360: PUSH
55361: LD_INT 0
55363: ST_TO_ADDR
// uc_nation := 0 ;
55364: LD_ADDR_OWVAR 21
55368: PUSH
55369: LD_INT 0
55371: ST_TO_ADDR
// hc_class := class_phororhacos ;
55372: LD_ADDR_OWVAR 28
55376: PUSH
55377: LD_INT 18
55379: ST_TO_ADDR
// hc_gallery :=  ;
55380: LD_ADDR_OWVAR 33
55384: PUSH
55385: LD_STRING 
55387: ST_TO_ADDR
// end ;
55388: LD_VAR 0 1
55392: RET
// export function PrepareHorse ( ) ; begin
55393: LD_INT 0
55395: PPUSH
// uc_side := 0 ;
55396: LD_ADDR_OWVAR 20
55400: PUSH
55401: LD_INT 0
55403: ST_TO_ADDR
// uc_nation := 0 ;
55404: LD_ADDR_OWVAR 21
55408: PUSH
55409: LD_INT 0
55411: ST_TO_ADDR
// hc_class := class_horse ;
55412: LD_ADDR_OWVAR 28
55416: PUSH
55417: LD_INT 21
55419: ST_TO_ADDR
// hc_gallery :=  ;
55420: LD_ADDR_OWVAR 33
55424: PUSH
55425: LD_STRING 
55427: ST_TO_ADDR
// end ;
55428: LD_VAR 0 1
55432: RET
// export function PrepareMastodont ( ) ; begin
55433: LD_INT 0
55435: PPUSH
// uc_side := 0 ;
55436: LD_ADDR_OWVAR 20
55440: PUSH
55441: LD_INT 0
55443: ST_TO_ADDR
// uc_nation := 0 ;
55444: LD_ADDR_OWVAR 21
55448: PUSH
55449: LD_INT 0
55451: ST_TO_ADDR
// vc_chassis := class_mastodont ;
55452: LD_ADDR_OWVAR 37
55456: PUSH
55457: LD_INT 31
55459: ST_TO_ADDR
// vc_control := control_rider ;
55460: LD_ADDR_OWVAR 38
55464: PUSH
55465: LD_INT 4
55467: ST_TO_ADDR
// end ;
55468: LD_VAR 0 1
55472: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
55473: LD_INT 0
55475: PPUSH
55476: PPUSH
55477: PPUSH
// uc_side = 0 ;
55478: LD_ADDR_OWVAR 20
55482: PUSH
55483: LD_INT 0
55485: ST_TO_ADDR
// uc_nation = 0 ;
55486: LD_ADDR_OWVAR 21
55490: PUSH
55491: LD_INT 0
55493: ST_TO_ADDR
// InitHc_All ( ) ;
55494: CALL_OW 584
// InitVc ;
55498: CALL_OW 20
// if mastodonts then
55502: LD_VAR 0 6
55506: IFFALSE 55573
// for i = 1 to mastodonts do
55508: LD_ADDR_VAR 0 11
55512: PUSH
55513: DOUBLE
55514: LD_INT 1
55516: DEC
55517: ST_TO_ADDR
55518: LD_VAR 0 6
55522: PUSH
55523: FOR_TO
55524: IFFALSE 55571
// begin vc_chassis := 31 ;
55526: LD_ADDR_OWVAR 37
55530: PUSH
55531: LD_INT 31
55533: ST_TO_ADDR
// vc_control := control_rider ;
55534: LD_ADDR_OWVAR 38
55538: PUSH
55539: LD_INT 4
55541: ST_TO_ADDR
// animal := CreateVehicle ;
55542: LD_ADDR_VAR 0 12
55546: PUSH
55547: CALL_OW 45
55551: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
55552: LD_VAR 0 12
55556: PPUSH
55557: LD_VAR 0 8
55561: PPUSH
55562: LD_INT 0
55564: PPUSH
55565: CALL 57701 0 3
// end ;
55569: GO 55523
55571: POP
55572: POP
// if horses then
55573: LD_VAR 0 5
55577: IFFALSE 55644
// for i = 1 to horses do
55579: LD_ADDR_VAR 0 11
55583: PUSH
55584: DOUBLE
55585: LD_INT 1
55587: DEC
55588: ST_TO_ADDR
55589: LD_VAR 0 5
55593: PUSH
55594: FOR_TO
55595: IFFALSE 55642
// begin hc_class := 21 ;
55597: LD_ADDR_OWVAR 28
55601: PUSH
55602: LD_INT 21
55604: ST_TO_ADDR
// hc_gallery :=  ;
55605: LD_ADDR_OWVAR 33
55609: PUSH
55610: LD_STRING 
55612: ST_TO_ADDR
// animal := CreateHuman ;
55613: LD_ADDR_VAR 0 12
55617: PUSH
55618: CALL_OW 44
55622: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
55623: LD_VAR 0 12
55627: PPUSH
55628: LD_VAR 0 8
55632: PPUSH
55633: LD_INT 0
55635: PPUSH
55636: CALL 57701 0 3
// end ;
55640: GO 55594
55642: POP
55643: POP
// if birds then
55644: LD_VAR 0 1
55648: IFFALSE 55715
// for i = 1 to birds do
55650: LD_ADDR_VAR 0 11
55654: PUSH
55655: DOUBLE
55656: LD_INT 1
55658: DEC
55659: ST_TO_ADDR
55660: LD_VAR 0 1
55664: PUSH
55665: FOR_TO
55666: IFFALSE 55713
// begin hc_class := 18 ;
55668: LD_ADDR_OWVAR 28
55672: PUSH
55673: LD_INT 18
55675: ST_TO_ADDR
// hc_gallery =  ;
55676: LD_ADDR_OWVAR 33
55680: PUSH
55681: LD_STRING 
55683: ST_TO_ADDR
// animal := CreateHuman ;
55684: LD_ADDR_VAR 0 12
55688: PUSH
55689: CALL_OW 44
55693: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
55694: LD_VAR 0 12
55698: PPUSH
55699: LD_VAR 0 8
55703: PPUSH
55704: LD_INT 0
55706: PPUSH
55707: CALL 57701 0 3
// end ;
55711: GO 55665
55713: POP
55714: POP
// if tigers then
55715: LD_VAR 0 2
55719: IFFALSE 55803
// for i = 1 to tigers do
55721: LD_ADDR_VAR 0 11
55725: PUSH
55726: DOUBLE
55727: LD_INT 1
55729: DEC
55730: ST_TO_ADDR
55731: LD_VAR 0 2
55735: PUSH
55736: FOR_TO
55737: IFFALSE 55801
// begin hc_class = class_tiger ;
55739: LD_ADDR_OWVAR 28
55743: PUSH
55744: LD_INT 14
55746: ST_TO_ADDR
// hc_gallery =  ;
55747: LD_ADDR_OWVAR 33
55751: PUSH
55752: LD_STRING 
55754: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
55755: LD_ADDR_OWVAR 35
55759: PUSH
55760: LD_INT 7
55762: NEG
55763: PPUSH
55764: LD_INT 7
55766: PPUSH
55767: CALL_OW 12
55771: ST_TO_ADDR
// animal := CreateHuman ;
55772: LD_ADDR_VAR 0 12
55776: PUSH
55777: CALL_OW 44
55781: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
55782: LD_VAR 0 12
55786: PPUSH
55787: LD_VAR 0 8
55791: PPUSH
55792: LD_INT 0
55794: PPUSH
55795: CALL 57701 0 3
// end ;
55799: GO 55736
55801: POP
55802: POP
// if apemans then
55803: LD_VAR 0 3
55807: IFFALSE 55930
// for i = 1 to apemans do
55809: LD_ADDR_VAR 0 11
55813: PUSH
55814: DOUBLE
55815: LD_INT 1
55817: DEC
55818: ST_TO_ADDR
55819: LD_VAR 0 3
55823: PUSH
55824: FOR_TO
55825: IFFALSE 55928
// begin hc_class = class_apeman ;
55827: LD_ADDR_OWVAR 28
55831: PUSH
55832: LD_INT 12
55834: ST_TO_ADDR
// hc_gallery =  ;
55835: LD_ADDR_OWVAR 33
55839: PUSH
55840: LD_STRING 
55842: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
55843: LD_ADDR_OWVAR 35
55847: PUSH
55848: LD_INT 2
55850: NEG
55851: PPUSH
55852: LD_INT 2
55854: PPUSH
55855: CALL_OW 12
55859: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
55860: LD_ADDR_OWVAR 31
55864: PUSH
55865: LD_INT 1
55867: PPUSH
55868: LD_INT 3
55870: PPUSH
55871: CALL_OW 12
55875: PUSH
55876: LD_INT 1
55878: PPUSH
55879: LD_INT 3
55881: PPUSH
55882: CALL_OW 12
55886: PUSH
55887: LD_INT 0
55889: PUSH
55890: LD_INT 0
55892: PUSH
55893: EMPTY
55894: LIST
55895: LIST
55896: LIST
55897: LIST
55898: ST_TO_ADDR
// animal := CreateHuman ;
55899: LD_ADDR_VAR 0 12
55903: PUSH
55904: CALL_OW 44
55908: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
55909: LD_VAR 0 12
55913: PPUSH
55914: LD_VAR 0 8
55918: PPUSH
55919: LD_INT 0
55921: PPUSH
55922: CALL 57701 0 3
// end ;
55926: GO 55824
55928: POP
55929: POP
// if enchidnas then
55930: LD_VAR 0 4
55934: IFFALSE 56001
// for i = 1 to enchidnas do
55936: LD_ADDR_VAR 0 11
55940: PUSH
55941: DOUBLE
55942: LD_INT 1
55944: DEC
55945: ST_TO_ADDR
55946: LD_VAR 0 4
55950: PUSH
55951: FOR_TO
55952: IFFALSE 55999
// begin hc_class = 13 ;
55954: LD_ADDR_OWVAR 28
55958: PUSH
55959: LD_INT 13
55961: ST_TO_ADDR
// hc_gallery =  ;
55962: LD_ADDR_OWVAR 33
55966: PUSH
55967: LD_STRING 
55969: ST_TO_ADDR
// animal := CreateHuman ;
55970: LD_ADDR_VAR 0 12
55974: PUSH
55975: CALL_OW 44
55979: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
55980: LD_VAR 0 12
55984: PPUSH
55985: LD_VAR 0 8
55989: PPUSH
55990: LD_INT 0
55992: PPUSH
55993: CALL 57701 0 3
// end ;
55997: GO 55951
55999: POP
56000: POP
// if fishes then
56001: LD_VAR 0 7
56005: IFFALSE 56072
// for i = 1 to fishes do
56007: LD_ADDR_VAR 0 11
56011: PUSH
56012: DOUBLE
56013: LD_INT 1
56015: DEC
56016: ST_TO_ADDR
56017: LD_VAR 0 7
56021: PUSH
56022: FOR_TO
56023: IFFALSE 56070
// begin hc_class = 20 ;
56025: LD_ADDR_OWVAR 28
56029: PUSH
56030: LD_INT 20
56032: ST_TO_ADDR
// hc_gallery =  ;
56033: LD_ADDR_OWVAR 33
56037: PUSH
56038: LD_STRING 
56040: ST_TO_ADDR
// animal := CreateHuman ;
56041: LD_ADDR_VAR 0 12
56045: PUSH
56046: CALL_OW 44
56050: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
56051: LD_VAR 0 12
56055: PPUSH
56056: LD_VAR 0 9
56060: PPUSH
56061: LD_INT 0
56063: PPUSH
56064: CALL 57701 0 3
// end ;
56068: GO 56022
56070: POP
56071: POP
// end ;
56072: LD_VAR 0 10
56076: RET
// export function WantHeal ( sci , unit ) ; begin
56077: LD_INT 0
56079: PPUSH
// if GetTaskList ( sci ) > 0 then
56080: LD_VAR 0 1
56084: PPUSH
56085: CALL_OW 437
56089: PUSH
56090: LD_INT 0
56092: GREATER
56093: IFFALSE 56163
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
56095: LD_VAR 0 1
56099: PPUSH
56100: CALL_OW 437
56104: PUSH
56105: LD_INT 1
56107: ARRAY
56108: PUSH
56109: LD_INT 1
56111: ARRAY
56112: PUSH
56113: LD_STRING l
56115: EQUAL
56116: PUSH
56117: LD_VAR 0 1
56121: PPUSH
56122: CALL_OW 437
56126: PUSH
56127: LD_INT 1
56129: ARRAY
56130: PUSH
56131: LD_INT 4
56133: ARRAY
56134: PUSH
56135: LD_VAR 0 2
56139: EQUAL
56140: AND
56141: IFFALSE 56153
// result := true else
56143: LD_ADDR_VAR 0 3
56147: PUSH
56148: LD_INT 1
56150: ST_TO_ADDR
56151: GO 56161
// result := false ;
56153: LD_ADDR_VAR 0 3
56157: PUSH
56158: LD_INT 0
56160: ST_TO_ADDR
// end else
56161: GO 56171
// result := false ;
56163: LD_ADDR_VAR 0 3
56167: PUSH
56168: LD_INT 0
56170: ST_TO_ADDR
// end ;
56171: LD_VAR 0 3
56175: RET
// export function HealTarget ( sci ) ; begin
56176: LD_INT 0
56178: PPUSH
// if not sci then
56179: LD_VAR 0 1
56183: NOT
56184: IFFALSE 56188
// exit ;
56186: GO 56253
// result := 0 ;
56188: LD_ADDR_VAR 0 2
56192: PUSH
56193: LD_INT 0
56195: ST_TO_ADDR
// if GetTaskList ( sci ) then
56196: LD_VAR 0 1
56200: PPUSH
56201: CALL_OW 437
56205: IFFALSE 56253
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
56207: LD_VAR 0 1
56211: PPUSH
56212: CALL_OW 437
56216: PUSH
56217: LD_INT 1
56219: ARRAY
56220: PUSH
56221: LD_INT 1
56223: ARRAY
56224: PUSH
56225: LD_STRING l
56227: EQUAL
56228: IFFALSE 56253
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
56230: LD_ADDR_VAR 0 2
56234: PUSH
56235: LD_VAR 0 1
56239: PPUSH
56240: CALL_OW 437
56244: PUSH
56245: LD_INT 1
56247: ARRAY
56248: PUSH
56249: LD_INT 4
56251: ARRAY
56252: ST_TO_ADDR
// end ;
56253: LD_VAR 0 2
56257: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
56258: LD_INT 0
56260: PPUSH
56261: PPUSH
56262: PPUSH
56263: PPUSH
// if not base_units then
56264: LD_VAR 0 1
56268: NOT
56269: IFFALSE 56273
// exit ;
56271: GO 56360
// result := false ;
56273: LD_ADDR_VAR 0 2
56277: PUSH
56278: LD_INT 0
56280: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
56281: LD_ADDR_VAR 0 5
56285: PUSH
56286: LD_VAR 0 1
56290: PPUSH
56291: LD_INT 21
56293: PUSH
56294: LD_INT 3
56296: PUSH
56297: EMPTY
56298: LIST
56299: LIST
56300: PPUSH
56301: CALL_OW 72
56305: ST_TO_ADDR
// if not tmp then
56306: LD_VAR 0 5
56310: NOT
56311: IFFALSE 56315
// exit ;
56313: GO 56360
// for i in tmp do
56315: LD_ADDR_VAR 0 3
56319: PUSH
56320: LD_VAR 0 5
56324: PUSH
56325: FOR_IN
56326: IFFALSE 56358
// begin result := EnemyInRange ( i , 22 ) ;
56328: LD_ADDR_VAR 0 2
56332: PUSH
56333: LD_VAR 0 3
56337: PPUSH
56338: LD_INT 22
56340: PPUSH
56341: CALL 53938 0 2
56345: ST_TO_ADDR
// if result then
56346: LD_VAR 0 2
56350: IFFALSE 56356
// exit ;
56352: POP
56353: POP
56354: GO 56360
// end ;
56356: GO 56325
56358: POP
56359: POP
// end ;
56360: LD_VAR 0 2
56364: RET
// export function FilterByTag ( units , tag ) ; begin
56365: LD_INT 0
56367: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
56368: LD_ADDR_VAR 0 3
56372: PUSH
56373: LD_VAR 0 1
56377: PPUSH
56378: LD_INT 120
56380: PUSH
56381: LD_VAR 0 2
56385: PUSH
56386: EMPTY
56387: LIST
56388: LIST
56389: PPUSH
56390: CALL_OW 72
56394: ST_TO_ADDR
// end ;
56395: LD_VAR 0 3
56399: RET
// export function IsDriver ( un ) ; begin
56400: LD_INT 0
56402: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
56403: LD_ADDR_VAR 0 2
56407: PUSH
56408: LD_VAR 0 1
56412: PUSH
56413: LD_INT 55
56415: PUSH
56416: EMPTY
56417: LIST
56418: PPUSH
56419: CALL_OW 69
56423: IN
56424: ST_TO_ADDR
// end ;
56425: LD_VAR 0 2
56429: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
56430: LD_INT 0
56432: PPUSH
56433: PPUSH
// list := [ ] ;
56434: LD_ADDR_VAR 0 5
56438: PUSH
56439: EMPTY
56440: ST_TO_ADDR
// case d of 0 :
56441: LD_VAR 0 3
56445: PUSH
56446: LD_INT 0
56448: DOUBLE
56449: EQUAL
56450: IFTRUE 56454
56452: GO 56587
56454: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
56455: LD_ADDR_VAR 0 5
56459: PUSH
56460: LD_VAR 0 1
56464: PUSH
56465: LD_INT 4
56467: MINUS
56468: PUSH
56469: LD_VAR 0 2
56473: PUSH
56474: LD_INT 4
56476: MINUS
56477: PUSH
56478: LD_INT 2
56480: PUSH
56481: EMPTY
56482: LIST
56483: LIST
56484: LIST
56485: PUSH
56486: LD_VAR 0 1
56490: PUSH
56491: LD_INT 3
56493: MINUS
56494: PUSH
56495: LD_VAR 0 2
56499: PUSH
56500: LD_INT 1
56502: PUSH
56503: EMPTY
56504: LIST
56505: LIST
56506: LIST
56507: PUSH
56508: LD_VAR 0 1
56512: PUSH
56513: LD_INT 4
56515: PLUS
56516: PUSH
56517: LD_VAR 0 2
56521: PUSH
56522: LD_INT 4
56524: PUSH
56525: EMPTY
56526: LIST
56527: LIST
56528: LIST
56529: PUSH
56530: LD_VAR 0 1
56534: PUSH
56535: LD_INT 3
56537: PLUS
56538: PUSH
56539: LD_VAR 0 2
56543: PUSH
56544: LD_INT 3
56546: PLUS
56547: PUSH
56548: LD_INT 5
56550: PUSH
56551: EMPTY
56552: LIST
56553: LIST
56554: LIST
56555: PUSH
56556: LD_VAR 0 1
56560: PUSH
56561: LD_VAR 0 2
56565: PUSH
56566: LD_INT 4
56568: PLUS
56569: PUSH
56570: LD_INT 0
56572: PUSH
56573: EMPTY
56574: LIST
56575: LIST
56576: LIST
56577: PUSH
56578: EMPTY
56579: LIST
56580: LIST
56581: LIST
56582: LIST
56583: LIST
56584: ST_TO_ADDR
// end ; 1 :
56585: GO 57285
56587: LD_INT 1
56589: DOUBLE
56590: EQUAL
56591: IFTRUE 56595
56593: GO 56728
56595: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
56596: LD_ADDR_VAR 0 5
56600: PUSH
56601: LD_VAR 0 1
56605: PUSH
56606: LD_VAR 0 2
56610: PUSH
56611: LD_INT 4
56613: MINUS
56614: PUSH
56615: LD_INT 3
56617: PUSH
56618: EMPTY
56619: LIST
56620: LIST
56621: LIST
56622: PUSH
56623: LD_VAR 0 1
56627: PUSH
56628: LD_INT 3
56630: MINUS
56631: PUSH
56632: LD_VAR 0 2
56636: PUSH
56637: LD_INT 3
56639: MINUS
56640: PUSH
56641: LD_INT 2
56643: PUSH
56644: EMPTY
56645: LIST
56646: LIST
56647: LIST
56648: PUSH
56649: LD_VAR 0 1
56653: PUSH
56654: LD_INT 4
56656: MINUS
56657: PUSH
56658: LD_VAR 0 2
56662: PUSH
56663: LD_INT 1
56665: PUSH
56666: EMPTY
56667: LIST
56668: LIST
56669: LIST
56670: PUSH
56671: LD_VAR 0 1
56675: PUSH
56676: LD_VAR 0 2
56680: PUSH
56681: LD_INT 3
56683: PLUS
56684: PUSH
56685: LD_INT 0
56687: PUSH
56688: EMPTY
56689: LIST
56690: LIST
56691: LIST
56692: PUSH
56693: LD_VAR 0 1
56697: PUSH
56698: LD_INT 4
56700: PLUS
56701: PUSH
56702: LD_VAR 0 2
56706: PUSH
56707: LD_INT 4
56709: PLUS
56710: PUSH
56711: LD_INT 5
56713: PUSH
56714: EMPTY
56715: LIST
56716: LIST
56717: LIST
56718: PUSH
56719: EMPTY
56720: LIST
56721: LIST
56722: LIST
56723: LIST
56724: LIST
56725: ST_TO_ADDR
// end ; 2 :
56726: GO 57285
56728: LD_INT 2
56730: DOUBLE
56731: EQUAL
56732: IFTRUE 56736
56734: GO 56865
56736: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
56737: LD_ADDR_VAR 0 5
56741: PUSH
56742: LD_VAR 0 1
56746: PUSH
56747: LD_VAR 0 2
56751: PUSH
56752: LD_INT 3
56754: MINUS
56755: PUSH
56756: LD_INT 3
56758: PUSH
56759: EMPTY
56760: LIST
56761: LIST
56762: LIST
56763: PUSH
56764: LD_VAR 0 1
56768: PUSH
56769: LD_INT 4
56771: PLUS
56772: PUSH
56773: LD_VAR 0 2
56777: PUSH
56778: LD_INT 4
56780: PUSH
56781: EMPTY
56782: LIST
56783: LIST
56784: LIST
56785: PUSH
56786: LD_VAR 0 1
56790: PUSH
56791: LD_VAR 0 2
56795: PUSH
56796: LD_INT 4
56798: PLUS
56799: PUSH
56800: LD_INT 0
56802: PUSH
56803: EMPTY
56804: LIST
56805: LIST
56806: LIST
56807: PUSH
56808: LD_VAR 0 1
56812: PUSH
56813: LD_INT 3
56815: MINUS
56816: PUSH
56817: LD_VAR 0 2
56821: PUSH
56822: LD_INT 1
56824: PUSH
56825: EMPTY
56826: LIST
56827: LIST
56828: LIST
56829: PUSH
56830: LD_VAR 0 1
56834: PUSH
56835: LD_INT 4
56837: MINUS
56838: PUSH
56839: LD_VAR 0 2
56843: PUSH
56844: LD_INT 4
56846: MINUS
56847: PUSH
56848: LD_INT 2
56850: PUSH
56851: EMPTY
56852: LIST
56853: LIST
56854: LIST
56855: PUSH
56856: EMPTY
56857: LIST
56858: LIST
56859: LIST
56860: LIST
56861: LIST
56862: ST_TO_ADDR
// end ; 3 :
56863: GO 57285
56865: LD_INT 3
56867: DOUBLE
56868: EQUAL
56869: IFTRUE 56873
56871: GO 57006
56873: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
56874: LD_ADDR_VAR 0 5
56878: PUSH
56879: LD_VAR 0 1
56883: PUSH
56884: LD_INT 3
56886: PLUS
56887: PUSH
56888: LD_VAR 0 2
56892: PUSH
56893: LD_INT 4
56895: PUSH
56896: EMPTY
56897: LIST
56898: LIST
56899: LIST
56900: PUSH
56901: LD_VAR 0 1
56905: PUSH
56906: LD_INT 4
56908: PLUS
56909: PUSH
56910: LD_VAR 0 2
56914: PUSH
56915: LD_INT 4
56917: PLUS
56918: PUSH
56919: LD_INT 5
56921: PUSH
56922: EMPTY
56923: LIST
56924: LIST
56925: LIST
56926: PUSH
56927: LD_VAR 0 1
56931: PUSH
56932: LD_INT 4
56934: MINUS
56935: PUSH
56936: LD_VAR 0 2
56940: PUSH
56941: LD_INT 1
56943: PUSH
56944: EMPTY
56945: LIST
56946: LIST
56947: LIST
56948: PUSH
56949: LD_VAR 0 1
56953: PUSH
56954: LD_VAR 0 2
56958: PUSH
56959: LD_INT 4
56961: MINUS
56962: PUSH
56963: LD_INT 3
56965: PUSH
56966: EMPTY
56967: LIST
56968: LIST
56969: LIST
56970: PUSH
56971: LD_VAR 0 1
56975: PUSH
56976: LD_INT 3
56978: MINUS
56979: PUSH
56980: LD_VAR 0 2
56984: PUSH
56985: LD_INT 3
56987: MINUS
56988: PUSH
56989: LD_INT 2
56991: PUSH
56992: EMPTY
56993: LIST
56994: LIST
56995: LIST
56996: PUSH
56997: EMPTY
56998: LIST
56999: LIST
57000: LIST
57001: LIST
57002: LIST
57003: ST_TO_ADDR
// end ; 4 :
57004: GO 57285
57006: LD_INT 4
57008: DOUBLE
57009: EQUAL
57010: IFTRUE 57014
57012: GO 57147
57014: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
57015: LD_ADDR_VAR 0 5
57019: PUSH
57020: LD_VAR 0 1
57024: PUSH
57025: LD_VAR 0 2
57029: PUSH
57030: LD_INT 4
57032: PLUS
57033: PUSH
57034: LD_INT 0
57036: PUSH
57037: EMPTY
57038: LIST
57039: LIST
57040: LIST
57041: PUSH
57042: LD_VAR 0 1
57046: PUSH
57047: LD_INT 3
57049: PLUS
57050: PUSH
57051: LD_VAR 0 2
57055: PUSH
57056: LD_INT 3
57058: PLUS
57059: PUSH
57060: LD_INT 5
57062: PUSH
57063: EMPTY
57064: LIST
57065: LIST
57066: LIST
57067: PUSH
57068: LD_VAR 0 1
57072: PUSH
57073: LD_INT 4
57075: PLUS
57076: PUSH
57077: LD_VAR 0 2
57081: PUSH
57082: LD_INT 4
57084: PUSH
57085: EMPTY
57086: LIST
57087: LIST
57088: LIST
57089: PUSH
57090: LD_VAR 0 1
57094: PUSH
57095: LD_VAR 0 2
57099: PUSH
57100: LD_INT 3
57102: MINUS
57103: PUSH
57104: LD_INT 3
57106: PUSH
57107: EMPTY
57108: LIST
57109: LIST
57110: LIST
57111: PUSH
57112: LD_VAR 0 1
57116: PUSH
57117: LD_INT 4
57119: MINUS
57120: PUSH
57121: LD_VAR 0 2
57125: PUSH
57126: LD_INT 4
57128: MINUS
57129: PUSH
57130: LD_INT 2
57132: PUSH
57133: EMPTY
57134: LIST
57135: LIST
57136: LIST
57137: PUSH
57138: EMPTY
57139: LIST
57140: LIST
57141: LIST
57142: LIST
57143: LIST
57144: ST_TO_ADDR
// end ; 5 :
57145: GO 57285
57147: LD_INT 5
57149: DOUBLE
57150: EQUAL
57151: IFTRUE 57155
57153: GO 57284
57155: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
57156: LD_ADDR_VAR 0 5
57160: PUSH
57161: LD_VAR 0 1
57165: PUSH
57166: LD_INT 4
57168: MINUS
57169: PUSH
57170: LD_VAR 0 2
57174: PUSH
57175: LD_INT 1
57177: PUSH
57178: EMPTY
57179: LIST
57180: LIST
57181: LIST
57182: PUSH
57183: LD_VAR 0 1
57187: PUSH
57188: LD_VAR 0 2
57192: PUSH
57193: LD_INT 4
57195: MINUS
57196: PUSH
57197: LD_INT 3
57199: PUSH
57200: EMPTY
57201: LIST
57202: LIST
57203: LIST
57204: PUSH
57205: LD_VAR 0 1
57209: PUSH
57210: LD_INT 4
57212: PLUS
57213: PUSH
57214: LD_VAR 0 2
57218: PUSH
57219: LD_INT 4
57221: PLUS
57222: PUSH
57223: LD_INT 5
57225: PUSH
57226: EMPTY
57227: LIST
57228: LIST
57229: LIST
57230: PUSH
57231: LD_VAR 0 1
57235: PUSH
57236: LD_INT 3
57238: PLUS
57239: PUSH
57240: LD_VAR 0 2
57244: PUSH
57245: LD_INT 4
57247: PUSH
57248: EMPTY
57249: LIST
57250: LIST
57251: LIST
57252: PUSH
57253: LD_VAR 0 1
57257: PUSH
57258: LD_VAR 0 2
57262: PUSH
57263: LD_INT 3
57265: PLUS
57266: PUSH
57267: LD_INT 0
57269: PUSH
57270: EMPTY
57271: LIST
57272: LIST
57273: LIST
57274: PUSH
57275: EMPTY
57276: LIST
57277: LIST
57278: LIST
57279: LIST
57280: LIST
57281: ST_TO_ADDR
// end ; end ;
57282: GO 57285
57284: POP
// result := list ;
57285: LD_ADDR_VAR 0 4
57289: PUSH
57290: LD_VAR 0 5
57294: ST_TO_ADDR
// end ;
57295: LD_VAR 0 4
57299: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
57300: LD_INT 0
57302: PPUSH
57303: PPUSH
57304: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
57305: LD_VAR 0 1
57309: NOT
57310: PUSH
57311: LD_VAR 0 2
57315: PUSH
57316: LD_INT 1
57318: PUSH
57319: LD_INT 2
57321: PUSH
57322: LD_INT 3
57324: PUSH
57325: LD_INT 4
57327: PUSH
57328: EMPTY
57329: LIST
57330: LIST
57331: LIST
57332: LIST
57333: IN
57334: NOT
57335: OR
57336: IFFALSE 57340
// exit ;
57338: GO 57423
// tmp := [ ] ;
57340: LD_ADDR_VAR 0 5
57344: PUSH
57345: EMPTY
57346: ST_TO_ADDR
// for i in units do
57347: LD_ADDR_VAR 0 4
57351: PUSH
57352: LD_VAR 0 1
57356: PUSH
57357: FOR_IN
57358: IFFALSE 57392
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
57360: LD_ADDR_VAR 0 5
57364: PUSH
57365: LD_VAR 0 5
57369: PPUSH
57370: LD_VAR 0 4
57374: PPUSH
57375: LD_VAR 0 2
57379: PPUSH
57380: CALL_OW 259
57384: PPUSH
57385: CALL 58796 0 2
57389: ST_TO_ADDR
57390: GO 57357
57392: POP
57393: POP
// if not tmp then
57394: LD_VAR 0 5
57398: NOT
57399: IFFALSE 57403
// exit ;
57401: GO 57423
// result := SortListByListDesc ( units , tmp ) ;
57403: LD_ADDR_VAR 0 3
57407: PUSH
57408: LD_VAR 0 1
57412: PPUSH
57413: LD_VAR 0 5
57417: PPUSH
57418: CALL_OW 77
57422: ST_TO_ADDR
// end ;
57423: LD_VAR 0 3
57427: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
57428: LD_INT 0
57430: PPUSH
57431: PPUSH
57432: PPUSH
// result := false ;
57433: LD_ADDR_VAR 0 3
57437: PUSH
57438: LD_INT 0
57440: ST_TO_ADDR
// if not building then
57441: LD_VAR 0 2
57445: NOT
57446: IFFALSE 57450
// exit ;
57448: GO 57588
// x := GetX ( building ) ;
57450: LD_ADDR_VAR 0 4
57454: PUSH
57455: LD_VAR 0 2
57459: PPUSH
57460: CALL_OW 250
57464: ST_TO_ADDR
// y := GetY ( building ) ;
57465: LD_ADDR_VAR 0 5
57469: PUSH
57470: LD_VAR 0 2
57474: PPUSH
57475: CALL_OW 251
57479: ST_TO_ADDR
// if not x or not y then
57480: LD_VAR 0 4
57484: NOT
57485: PUSH
57486: LD_VAR 0 5
57490: NOT
57491: OR
57492: IFFALSE 57496
// exit ;
57494: GO 57588
// if GetTaskList ( unit ) then
57496: LD_VAR 0 1
57500: PPUSH
57501: CALL_OW 437
57505: IFFALSE 57588
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
57507: LD_STRING e
57509: PUSH
57510: LD_VAR 0 1
57514: PPUSH
57515: CALL_OW 437
57519: PUSH
57520: LD_INT 1
57522: ARRAY
57523: PUSH
57524: LD_INT 1
57526: ARRAY
57527: EQUAL
57528: PUSH
57529: LD_VAR 0 4
57533: PUSH
57534: LD_VAR 0 1
57538: PPUSH
57539: CALL_OW 437
57543: PUSH
57544: LD_INT 1
57546: ARRAY
57547: PUSH
57548: LD_INT 2
57550: ARRAY
57551: EQUAL
57552: AND
57553: PUSH
57554: LD_VAR 0 5
57558: PUSH
57559: LD_VAR 0 1
57563: PPUSH
57564: CALL_OW 437
57568: PUSH
57569: LD_INT 1
57571: ARRAY
57572: PUSH
57573: LD_INT 3
57575: ARRAY
57576: EQUAL
57577: AND
57578: IFFALSE 57588
// result := true end ;
57580: LD_ADDR_VAR 0 3
57584: PUSH
57585: LD_INT 1
57587: ST_TO_ADDR
// end ;
57588: LD_VAR 0 3
57592: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
57593: LD_INT 0
57595: PPUSH
// result := false ;
57596: LD_ADDR_VAR 0 4
57600: PUSH
57601: LD_INT 0
57603: ST_TO_ADDR
// if GetTaskList ( unit ) then
57604: LD_VAR 0 1
57608: PPUSH
57609: CALL_OW 437
57613: IFFALSE 57696
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
57615: LD_STRING M
57617: PUSH
57618: LD_VAR 0 1
57622: PPUSH
57623: CALL_OW 437
57627: PUSH
57628: LD_INT 1
57630: ARRAY
57631: PUSH
57632: LD_INT 1
57634: ARRAY
57635: EQUAL
57636: PUSH
57637: LD_VAR 0 2
57641: PUSH
57642: LD_VAR 0 1
57646: PPUSH
57647: CALL_OW 437
57651: PUSH
57652: LD_INT 1
57654: ARRAY
57655: PUSH
57656: LD_INT 2
57658: ARRAY
57659: EQUAL
57660: AND
57661: PUSH
57662: LD_VAR 0 3
57666: PUSH
57667: LD_VAR 0 1
57671: PPUSH
57672: CALL_OW 437
57676: PUSH
57677: LD_INT 1
57679: ARRAY
57680: PUSH
57681: LD_INT 3
57683: ARRAY
57684: EQUAL
57685: AND
57686: IFFALSE 57696
// result := true ;
57688: LD_ADDR_VAR 0 4
57692: PUSH
57693: LD_INT 1
57695: ST_TO_ADDR
// end ; end ;
57696: LD_VAR 0 4
57700: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
57701: LD_INT 0
57703: PPUSH
57704: PPUSH
57705: PPUSH
57706: PPUSH
// if not unit or not area then
57707: LD_VAR 0 1
57711: NOT
57712: PUSH
57713: LD_VAR 0 2
57717: NOT
57718: OR
57719: IFFALSE 57723
// exit ;
57721: GO 57899
// tmp := AreaToList ( area , i ) ;
57723: LD_ADDR_VAR 0 6
57727: PUSH
57728: LD_VAR 0 2
57732: PPUSH
57733: LD_VAR 0 5
57737: PPUSH
57738: CALL_OW 517
57742: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
57743: LD_ADDR_VAR 0 5
57747: PUSH
57748: DOUBLE
57749: LD_INT 1
57751: DEC
57752: ST_TO_ADDR
57753: LD_VAR 0 6
57757: PUSH
57758: LD_INT 1
57760: ARRAY
57761: PUSH
57762: FOR_TO
57763: IFFALSE 57897
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
57765: LD_ADDR_VAR 0 7
57769: PUSH
57770: LD_VAR 0 6
57774: PUSH
57775: LD_INT 1
57777: ARRAY
57778: PUSH
57779: LD_VAR 0 5
57783: ARRAY
57784: PUSH
57785: LD_VAR 0 6
57789: PUSH
57790: LD_INT 2
57792: ARRAY
57793: PUSH
57794: LD_VAR 0 5
57798: ARRAY
57799: PUSH
57800: EMPTY
57801: LIST
57802: LIST
57803: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
57804: LD_INT 92
57806: PUSH
57807: LD_VAR 0 7
57811: PUSH
57812: LD_INT 1
57814: ARRAY
57815: PUSH
57816: LD_VAR 0 7
57820: PUSH
57821: LD_INT 2
57823: ARRAY
57824: PUSH
57825: LD_INT 2
57827: PUSH
57828: EMPTY
57829: LIST
57830: LIST
57831: LIST
57832: LIST
57833: PPUSH
57834: CALL_OW 69
57838: PUSH
57839: LD_INT 0
57841: EQUAL
57842: IFFALSE 57895
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
57844: LD_VAR 0 1
57848: PPUSH
57849: LD_VAR 0 7
57853: PUSH
57854: LD_INT 1
57856: ARRAY
57857: PPUSH
57858: LD_VAR 0 7
57862: PUSH
57863: LD_INT 2
57865: ARRAY
57866: PPUSH
57867: LD_VAR 0 3
57871: PPUSH
57872: CALL_OW 48
// result := IsPlaced ( unit ) ;
57876: LD_ADDR_VAR 0 4
57880: PUSH
57881: LD_VAR 0 1
57885: PPUSH
57886: CALL_OW 305
57890: ST_TO_ADDR
// exit ;
57891: POP
57892: POP
57893: GO 57899
// end ; end ;
57895: GO 57762
57897: POP
57898: POP
// end ;
57899: LD_VAR 0 4
57903: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
57904: LD_INT 0
57906: PPUSH
57907: PPUSH
57908: PPUSH
// if not side or side > 8 then
57909: LD_VAR 0 1
57913: NOT
57914: PUSH
57915: LD_VAR 0 1
57919: PUSH
57920: LD_INT 8
57922: GREATER
57923: OR
57924: IFFALSE 57928
// exit ;
57926: GO 58115
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
57928: LD_ADDR_VAR 0 4
57932: PUSH
57933: LD_INT 22
57935: PUSH
57936: LD_VAR 0 1
57940: PUSH
57941: EMPTY
57942: LIST
57943: LIST
57944: PUSH
57945: LD_INT 21
57947: PUSH
57948: LD_INT 3
57950: PUSH
57951: EMPTY
57952: LIST
57953: LIST
57954: PUSH
57955: EMPTY
57956: LIST
57957: LIST
57958: PPUSH
57959: CALL_OW 69
57963: ST_TO_ADDR
// if not tmp then
57964: LD_VAR 0 4
57968: NOT
57969: IFFALSE 57973
// exit ;
57971: GO 58115
// enable_addtolog := true ;
57973: LD_ADDR_OWVAR 81
57977: PUSH
57978: LD_INT 1
57980: ST_TO_ADDR
// AddToLog ( [ ) ;
57981: LD_STRING [
57983: PPUSH
57984: CALL_OW 561
// for i in tmp do
57988: LD_ADDR_VAR 0 3
57992: PUSH
57993: LD_VAR 0 4
57997: PUSH
57998: FOR_IN
57999: IFFALSE 58106
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
58001: LD_STRING [
58003: PUSH
58004: LD_VAR 0 3
58008: PPUSH
58009: CALL_OW 266
58013: STR
58014: PUSH
58015: LD_STRING , 
58017: STR
58018: PUSH
58019: LD_VAR 0 3
58023: PPUSH
58024: CALL_OW 250
58028: STR
58029: PUSH
58030: LD_STRING , 
58032: STR
58033: PUSH
58034: LD_VAR 0 3
58038: PPUSH
58039: CALL_OW 251
58043: STR
58044: PUSH
58045: LD_STRING , 
58047: STR
58048: PUSH
58049: LD_VAR 0 3
58053: PPUSH
58054: CALL_OW 254
58058: STR
58059: PUSH
58060: LD_STRING , 
58062: STR
58063: PUSH
58064: LD_VAR 0 3
58068: PPUSH
58069: LD_INT 1
58071: PPUSH
58072: CALL_OW 268
58076: STR
58077: PUSH
58078: LD_STRING , 
58080: STR
58081: PUSH
58082: LD_VAR 0 3
58086: PPUSH
58087: LD_INT 2
58089: PPUSH
58090: CALL_OW 268
58094: STR
58095: PUSH
58096: LD_STRING ],
58098: STR
58099: PPUSH
58100: CALL_OW 561
// end ;
58104: GO 57998
58106: POP
58107: POP
// AddToLog ( ]; ) ;
58108: LD_STRING ];
58110: PPUSH
58111: CALL_OW 561
// end ;
58115: LD_VAR 0 2
58119: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
58120: LD_INT 0
58122: PPUSH
58123: PPUSH
58124: PPUSH
58125: PPUSH
58126: PPUSH
// if not area or not rate or not max then
58127: LD_VAR 0 1
58131: NOT
58132: PUSH
58133: LD_VAR 0 2
58137: NOT
58138: OR
58139: PUSH
58140: LD_VAR 0 4
58144: NOT
58145: OR
58146: IFFALSE 58150
// exit ;
58148: GO 58339
// while 1 do
58150: LD_INT 1
58152: IFFALSE 58339
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
58154: LD_ADDR_VAR 0 9
58158: PUSH
58159: LD_VAR 0 1
58163: PPUSH
58164: LD_INT 1
58166: PPUSH
58167: CALL_OW 287
58171: PUSH
58172: LD_INT 10
58174: MUL
58175: ST_TO_ADDR
// r := rate / 10 ;
58176: LD_ADDR_VAR 0 7
58180: PUSH
58181: LD_VAR 0 2
58185: PUSH
58186: LD_INT 10
58188: DIVREAL
58189: ST_TO_ADDR
// time := 1 1$00 ;
58190: LD_ADDR_VAR 0 8
58194: PUSH
58195: LD_INT 2100
58197: ST_TO_ADDR
// if amount < min then
58198: LD_VAR 0 9
58202: PUSH
58203: LD_VAR 0 3
58207: LESS
58208: IFFALSE 58226
// r := r * 2 else
58210: LD_ADDR_VAR 0 7
58214: PUSH
58215: LD_VAR 0 7
58219: PUSH
58220: LD_INT 2
58222: MUL
58223: ST_TO_ADDR
58224: GO 58252
// if amount > max then
58226: LD_VAR 0 9
58230: PUSH
58231: LD_VAR 0 4
58235: GREATER
58236: IFFALSE 58252
// r := r / 2 ;
58238: LD_ADDR_VAR 0 7
58242: PUSH
58243: LD_VAR 0 7
58247: PUSH
58248: LD_INT 2
58250: DIVREAL
58251: ST_TO_ADDR
// time := time / r ;
58252: LD_ADDR_VAR 0 8
58256: PUSH
58257: LD_VAR 0 8
58261: PUSH
58262: LD_VAR 0 7
58266: DIVREAL
58267: ST_TO_ADDR
// if time < 0 then
58268: LD_VAR 0 8
58272: PUSH
58273: LD_INT 0
58275: LESS
58276: IFFALSE 58293
// time := time * - 1 ;
58278: LD_ADDR_VAR 0 8
58282: PUSH
58283: LD_VAR 0 8
58287: PUSH
58288: LD_INT 1
58290: NEG
58291: MUL
58292: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
58293: LD_VAR 0 8
58297: PUSH
58298: LD_INT 35
58300: PPUSH
58301: LD_INT 875
58303: PPUSH
58304: CALL_OW 12
58308: PLUS
58309: PPUSH
58310: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
58314: LD_INT 1
58316: PPUSH
58317: LD_INT 5
58319: PPUSH
58320: CALL_OW 12
58324: PPUSH
58325: LD_VAR 0 1
58329: PPUSH
58330: LD_INT 1
58332: PPUSH
58333: CALL_OW 55
// end ;
58337: GO 58150
// end ;
58339: LD_VAR 0 5
58343: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
58344: LD_INT 0
58346: PPUSH
58347: PPUSH
58348: PPUSH
58349: PPUSH
58350: PPUSH
58351: PPUSH
58352: PPUSH
58353: PPUSH
// if not turrets or not factories then
58354: LD_VAR 0 1
58358: NOT
58359: PUSH
58360: LD_VAR 0 2
58364: NOT
58365: OR
58366: IFFALSE 58370
// exit ;
58368: GO 58677
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
58370: LD_ADDR_VAR 0 10
58374: PUSH
58375: LD_INT 5
58377: PUSH
58378: LD_INT 6
58380: PUSH
58381: EMPTY
58382: LIST
58383: LIST
58384: PUSH
58385: LD_INT 2
58387: PUSH
58388: LD_INT 4
58390: PUSH
58391: EMPTY
58392: LIST
58393: LIST
58394: PUSH
58395: LD_INT 3
58397: PUSH
58398: LD_INT 5
58400: PUSH
58401: EMPTY
58402: LIST
58403: LIST
58404: PUSH
58405: EMPTY
58406: LIST
58407: LIST
58408: LIST
58409: PUSH
58410: LD_INT 24
58412: PUSH
58413: LD_INT 25
58415: PUSH
58416: EMPTY
58417: LIST
58418: LIST
58419: PUSH
58420: LD_INT 23
58422: PUSH
58423: LD_INT 27
58425: PUSH
58426: EMPTY
58427: LIST
58428: LIST
58429: PUSH
58430: EMPTY
58431: LIST
58432: LIST
58433: PUSH
58434: LD_INT 42
58436: PUSH
58437: LD_INT 43
58439: PUSH
58440: EMPTY
58441: LIST
58442: LIST
58443: PUSH
58444: LD_INT 44
58446: PUSH
58447: LD_INT 46
58449: PUSH
58450: EMPTY
58451: LIST
58452: LIST
58453: PUSH
58454: LD_INT 45
58456: PUSH
58457: LD_INT 47
58459: PUSH
58460: EMPTY
58461: LIST
58462: LIST
58463: PUSH
58464: EMPTY
58465: LIST
58466: LIST
58467: LIST
58468: PUSH
58469: EMPTY
58470: LIST
58471: LIST
58472: LIST
58473: ST_TO_ADDR
// result := [ ] ;
58474: LD_ADDR_VAR 0 3
58478: PUSH
58479: EMPTY
58480: ST_TO_ADDR
// for i in turrets do
58481: LD_ADDR_VAR 0 4
58485: PUSH
58486: LD_VAR 0 1
58490: PUSH
58491: FOR_IN
58492: IFFALSE 58675
// begin nat := GetNation ( i ) ;
58494: LD_ADDR_VAR 0 7
58498: PUSH
58499: LD_VAR 0 4
58503: PPUSH
58504: CALL_OW 248
58508: ST_TO_ADDR
// weapon := 0 ;
58509: LD_ADDR_VAR 0 8
58513: PUSH
58514: LD_INT 0
58516: ST_TO_ADDR
// if not nat then
58517: LD_VAR 0 7
58521: NOT
58522: IFFALSE 58526
// continue ;
58524: GO 58491
// for j in list [ nat ] do
58526: LD_ADDR_VAR 0 5
58530: PUSH
58531: LD_VAR 0 10
58535: PUSH
58536: LD_VAR 0 7
58540: ARRAY
58541: PUSH
58542: FOR_IN
58543: IFFALSE 58584
// if GetBWeapon ( i ) = j [ 1 ] then
58545: LD_VAR 0 4
58549: PPUSH
58550: CALL_OW 269
58554: PUSH
58555: LD_VAR 0 5
58559: PUSH
58560: LD_INT 1
58562: ARRAY
58563: EQUAL
58564: IFFALSE 58582
// begin weapon := j [ 2 ] ;
58566: LD_ADDR_VAR 0 8
58570: PUSH
58571: LD_VAR 0 5
58575: PUSH
58576: LD_INT 2
58578: ARRAY
58579: ST_TO_ADDR
// break ;
58580: GO 58584
// end ;
58582: GO 58542
58584: POP
58585: POP
// if not weapon then
58586: LD_VAR 0 8
58590: NOT
58591: IFFALSE 58595
// continue ;
58593: GO 58491
// for k in factories do
58595: LD_ADDR_VAR 0 6
58599: PUSH
58600: LD_VAR 0 2
58604: PUSH
58605: FOR_IN
58606: IFFALSE 58671
// begin weapons := AvailableWeaponList ( k ) ;
58608: LD_ADDR_VAR 0 9
58612: PUSH
58613: LD_VAR 0 6
58617: PPUSH
58618: CALL_OW 478
58622: ST_TO_ADDR
// if not weapons then
58623: LD_VAR 0 9
58627: NOT
58628: IFFALSE 58632
// continue ;
58630: GO 58605
// if weapon in weapons then
58632: LD_VAR 0 8
58636: PUSH
58637: LD_VAR 0 9
58641: IN
58642: IFFALSE 58669
// begin result := [ i , weapon ] ;
58644: LD_ADDR_VAR 0 3
58648: PUSH
58649: LD_VAR 0 4
58653: PUSH
58654: LD_VAR 0 8
58658: PUSH
58659: EMPTY
58660: LIST
58661: LIST
58662: ST_TO_ADDR
// exit ;
58663: POP
58664: POP
58665: POP
58666: POP
58667: GO 58677
// end ; end ;
58669: GO 58605
58671: POP
58672: POP
// end ;
58673: GO 58491
58675: POP
58676: POP
// end ;
58677: LD_VAR 0 3
58681: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
58682: LD_INT 0
58684: PPUSH
// if not side or side > 8 then
58685: LD_VAR 0 3
58689: NOT
58690: PUSH
58691: LD_VAR 0 3
58695: PUSH
58696: LD_INT 8
58698: GREATER
58699: OR
58700: IFFALSE 58704
// exit ;
58702: GO 58763
// if not range then
58704: LD_VAR 0 4
58708: NOT
58709: IFFALSE 58720
// range := - 12 ;
58711: LD_ADDR_VAR 0 4
58715: PUSH
58716: LD_INT 12
58718: NEG
58719: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
58720: LD_VAR 0 1
58724: PPUSH
58725: LD_VAR 0 2
58729: PPUSH
58730: LD_VAR 0 3
58734: PPUSH
58735: LD_VAR 0 4
58739: PPUSH
58740: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
58744: LD_VAR 0 1
58748: PPUSH
58749: LD_VAR 0 2
58753: PPUSH
58754: LD_VAR 0 3
58758: PPUSH
58759: CALL_OW 331
// end ;
58763: LD_VAR 0 5
58767: RET
// export function Video ( mode ) ; begin
58768: LD_INT 0
58770: PPUSH
// ingame_video = mode ;
58771: LD_ADDR_OWVAR 52
58775: PUSH
58776: LD_VAR 0 1
58780: ST_TO_ADDR
// interface_hidden = mode ;
58781: LD_ADDR_OWVAR 54
58785: PUSH
58786: LD_VAR 0 1
58790: ST_TO_ADDR
// end ;
58791: LD_VAR 0 2
58795: RET
// export function Join ( array , element ) ; begin
58796: LD_INT 0
58798: PPUSH
// result := Replace ( array , array + 1 , element ) ;
58799: LD_ADDR_VAR 0 3
58803: PUSH
58804: LD_VAR 0 1
58808: PPUSH
58809: LD_VAR 0 1
58813: PUSH
58814: LD_INT 1
58816: PLUS
58817: PPUSH
58818: LD_VAR 0 2
58822: PPUSH
58823: CALL_OW 1
58827: ST_TO_ADDR
// end ;
58828: LD_VAR 0 3
58832: RET
// export function JoinUnion ( array , element ) ; begin
58833: LD_INT 0
58835: PPUSH
// result := array union element ;
58836: LD_ADDR_VAR 0 3
58840: PUSH
58841: LD_VAR 0 1
58845: PUSH
58846: LD_VAR 0 2
58850: UNION
58851: ST_TO_ADDR
// end ;
58852: LD_VAR 0 3
58856: RET
// export function GetBehemoths ( side ) ; begin
58857: LD_INT 0
58859: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
58860: LD_ADDR_VAR 0 2
58864: PUSH
58865: LD_INT 22
58867: PUSH
58868: LD_VAR 0 1
58872: PUSH
58873: EMPTY
58874: LIST
58875: LIST
58876: PUSH
58877: LD_INT 31
58879: PUSH
58880: LD_INT 25
58882: PUSH
58883: EMPTY
58884: LIST
58885: LIST
58886: PUSH
58887: EMPTY
58888: LIST
58889: LIST
58890: PPUSH
58891: CALL_OW 69
58895: ST_TO_ADDR
// end ;
58896: LD_VAR 0 2
58900: RET
// export function Shuffle ( array ) ; var i , index ; begin
58901: LD_INT 0
58903: PPUSH
58904: PPUSH
58905: PPUSH
// result := [ ] ;
58906: LD_ADDR_VAR 0 2
58910: PUSH
58911: EMPTY
58912: ST_TO_ADDR
// if not array then
58913: LD_VAR 0 1
58917: NOT
58918: IFFALSE 58922
// exit ;
58920: GO 59021
// Randomize ;
58922: CALL_OW 10
// for i = array downto 1 do
58926: LD_ADDR_VAR 0 3
58930: PUSH
58931: DOUBLE
58932: LD_VAR 0 1
58936: INC
58937: ST_TO_ADDR
58938: LD_INT 1
58940: PUSH
58941: FOR_DOWNTO
58942: IFFALSE 59019
// begin index := rand ( 1 , array ) ;
58944: LD_ADDR_VAR 0 4
58948: PUSH
58949: LD_INT 1
58951: PPUSH
58952: LD_VAR 0 1
58956: PPUSH
58957: CALL_OW 12
58961: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
58962: LD_ADDR_VAR 0 2
58966: PUSH
58967: LD_VAR 0 2
58971: PPUSH
58972: LD_VAR 0 2
58976: PUSH
58977: LD_INT 1
58979: PLUS
58980: PPUSH
58981: LD_VAR 0 1
58985: PUSH
58986: LD_VAR 0 4
58990: ARRAY
58991: PPUSH
58992: CALL_OW 2
58996: ST_TO_ADDR
// array := Delete ( array , index ) ;
58997: LD_ADDR_VAR 0 1
59001: PUSH
59002: LD_VAR 0 1
59006: PPUSH
59007: LD_VAR 0 4
59011: PPUSH
59012: CALL_OW 3
59016: ST_TO_ADDR
// end ;
59017: GO 58941
59019: POP
59020: POP
// end ;
59021: LD_VAR 0 2
59025: RET
// export function GetBaseMaterials ( base ) ; begin
59026: LD_INT 0
59028: PPUSH
// result := [ 0 , 0 , 0 ] ;
59029: LD_ADDR_VAR 0 2
59033: PUSH
59034: LD_INT 0
59036: PUSH
59037: LD_INT 0
59039: PUSH
59040: LD_INT 0
59042: PUSH
59043: EMPTY
59044: LIST
59045: LIST
59046: LIST
59047: ST_TO_ADDR
// if not base then
59048: LD_VAR 0 1
59052: NOT
59053: IFFALSE 59057
// exit ;
59055: GO 59106
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
59057: LD_ADDR_VAR 0 2
59061: PUSH
59062: LD_VAR 0 1
59066: PPUSH
59067: LD_INT 1
59069: PPUSH
59070: CALL_OW 275
59074: PUSH
59075: LD_VAR 0 1
59079: PPUSH
59080: LD_INT 2
59082: PPUSH
59083: CALL_OW 275
59087: PUSH
59088: LD_VAR 0 1
59092: PPUSH
59093: LD_INT 3
59095: PPUSH
59096: CALL_OW 275
59100: PUSH
59101: EMPTY
59102: LIST
59103: LIST
59104: LIST
59105: ST_TO_ADDR
// end ;
59106: LD_VAR 0 2
59110: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
59111: LD_INT 0
59113: PPUSH
59114: PPUSH
// result := array ;
59115: LD_ADDR_VAR 0 3
59119: PUSH
59120: LD_VAR 0 1
59124: ST_TO_ADDR
// if size >= result then
59125: LD_VAR 0 2
59129: PUSH
59130: LD_VAR 0 3
59134: GREATEREQUAL
59135: IFFALSE 59139
// exit ;
59137: GO 59189
// if size then
59139: LD_VAR 0 2
59143: IFFALSE 59189
// for i := array downto size do
59145: LD_ADDR_VAR 0 4
59149: PUSH
59150: DOUBLE
59151: LD_VAR 0 1
59155: INC
59156: ST_TO_ADDR
59157: LD_VAR 0 2
59161: PUSH
59162: FOR_DOWNTO
59163: IFFALSE 59187
// result := Delete ( result , result ) ;
59165: LD_ADDR_VAR 0 3
59169: PUSH
59170: LD_VAR 0 3
59174: PPUSH
59175: LD_VAR 0 3
59179: PPUSH
59180: CALL_OW 3
59184: ST_TO_ADDR
59185: GO 59162
59187: POP
59188: POP
// end ;
59189: LD_VAR 0 3
59193: RET
// export function ComExit ( unit ) ; var tmp ; begin
59194: LD_INT 0
59196: PPUSH
59197: PPUSH
// if not IsInUnit ( unit ) then
59198: LD_VAR 0 1
59202: PPUSH
59203: CALL_OW 310
59207: NOT
59208: IFFALSE 59212
// exit ;
59210: GO 59272
// tmp := IsInUnit ( unit ) ;
59212: LD_ADDR_VAR 0 3
59216: PUSH
59217: LD_VAR 0 1
59221: PPUSH
59222: CALL_OW 310
59226: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
59227: LD_VAR 0 3
59231: PPUSH
59232: CALL_OW 247
59236: PUSH
59237: LD_INT 2
59239: EQUAL
59240: IFFALSE 59253
// ComExitVehicle ( unit ) else
59242: LD_VAR 0 1
59246: PPUSH
59247: CALL_OW 121
59251: GO 59262
// ComExitBuilding ( unit ) ;
59253: LD_VAR 0 1
59257: PPUSH
59258: CALL_OW 122
// result := tmp ;
59262: LD_ADDR_VAR 0 2
59266: PUSH
59267: LD_VAR 0 3
59271: ST_TO_ADDR
// end ;
59272: LD_VAR 0 2
59276: RET
// export function ComExitAll ( units ) ; var i ; begin
59277: LD_INT 0
59279: PPUSH
59280: PPUSH
// if not units then
59281: LD_VAR 0 1
59285: NOT
59286: IFFALSE 59290
// exit ;
59288: GO 59316
// for i in units do
59290: LD_ADDR_VAR 0 3
59294: PUSH
59295: LD_VAR 0 1
59299: PUSH
59300: FOR_IN
59301: IFFALSE 59314
// ComExit ( i ) ;
59303: LD_VAR 0 3
59307: PPUSH
59308: CALL 59194 0 1
59312: GO 59300
59314: POP
59315: POP
// end ;
59316: LD_VAR 0 2
59320: RET
// export function ResetHc ; begin
59321: LD_INT 0
59323: PPUSH
// InitHc ;
59324: CALL_OW 19
// hc_importance := 0 ;
59328: LD_ADDR_OWVAR 32
59332: PUSH
59333: LD_INT 0
59335: ST_TO_ADDR
// end ;
59336: LD_VAR 0 1
59340: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
59341: LD_INT 0
59343: PPUSH
59344: PPUSH
59345: PPUSH
// _x := ( x1 + x2 ) div 2 ;
59346: LD_ADDR_VAR 0 6
59350: PUSH
59351: LD_VAR 0 1
59355: PUSH
59356: LD_VAR 0 3
59360: PLUS
59361: PUSH
59362: LD_INT 2
59364: DIV
59365: ST_TO_ADDR
// if _x < 0 then
59366: LD_VAR 0 6
59370: PUSH
59371: LD_INT 0
59373: LESS
59374: IFFALSE 59391
// _x := _x * - 1 ;
59376: LD_ADDR_VAR 0 6
59380: PUSH
59381: LD_VAR 0 6
59385: PUSH
59386: LD_INT 1
59388: NEG
59389: MUL
59390: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
59391: LD_ADDR_VAR 0 7
59395: PUSH
59396: LD_VAR 0 2
59400: PUSH
59401: LD_VAR 0 4
59405: PLUS
59406: PUSH
59407: LD_INT 2
59409: DIV
59410: ST_TO_ADDR
// if _y < 0 then
59411: LD_VAR 0 7
59415: PUSH
59416: LD_INT 0
59418: LESS
59419: IFFALSE 59436
// _y := _y * - 1 ;
59421: LD_ADDR_VAR 0 7
59425: PUSH
59426: LD_VAR 0 7
59430: PUSH
59431: LD_INT 1
59433: NEG
59434: MUL
59435: ST_TO_ADDR
// result := [ _x , _y ] ;
59436: LD_ADDR_VAR 0 5
59440: PUSH
59441: LD_VAR 0 6
59445: PUSH
59446: LD_VAR 0 7
59450: PUSH
59451: EMPTY
59452: LIST
59453: LIST
59454: ST_TO_ADDR
// end ;
59455: LD_VAR 0 5
59459: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
59460: LD_INT 0
59462: PPUSH
59463: PPUSH
59464: PPUSH
59465: PPUSH
// task := GetTaskList ( unit ) ;
59466: LD_ADDR_VAR 0 7
59470: PUSH
59471: LD_VAR 0 1
59475: PPUSH
59476: CALL_OW 437
59480: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
59481: LD_VAR 0 7
59485: NOT
59486: PUSH
59487: LD_VAR 0 1
59491: PPUSH
59492: LD_VAR 0 2
59496: PPUSH
59497: CALL_OW 308
59501: NOT
59502: AND
59503: IFFALSE 59507
// exit ;
59505: GO 59625
// if IsInArea ( unit , area ) then
59507: LD_VAR 0 1
59511: PPUSH
59512: LD_VAR 0 2
59516: PPUSH
59517: CALL_OW 308
59521: IFFALSE 59539
// begin ComMoveToArea ( unit , goAway ) ;
59523: LD_VAR 0 1
59527: PPUSH
59528: LD_VAR 0 3
59532: PPUSH
59533: CALL_OW 113
// exit ;
59537: GO 59625
// end ; if task [ 1 ] [ 1 ] <> M then
59539: LD_VAR 0 7
59543: PUSH
59544: LD_INT 1
59546: ARRAY
59547: PUSH
59548: LD_INT 1
59550: ARRAY
59551: PUSH
59552: LD_STRING M
59554: NONEQUAL
59555: IFFALSE 59559
// exit ;
59557: GO 59625
// x := task [ 1 ] [ 2 ] ;
59559: LD_ADDR_VAR 0 5
59563: PUSH
59564: LD_VAR 0 7
59568: PUSH
59569: LD_INT 1
59571: ARRAY
59572: PUSH
59573: LD_INT 2
59575: ARRAY
59576: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
59577: LD_ADDR_VAR 0 6
59581: PUSH
59582: LD_VAR 0 7
59586: PUSH
59587: LD_INT 1
59589: ARRAY
59590: PUSH
59591: LD_INT 3
59593: ARRAY
59594: ST_TO_ADDR
// if InArea ( x , y , area ) then
59595: LD_VAR 0 5
59599: PPUSH
59600: LD_VAR 0 6
59604: PPUSH
59605: LD_VAR 0 2
59609: PPUSH
59610: CALL_OW 309
59614: IFFALSE 59625
// ComStop ( unit ) ;
59616: LD_VAR 0 1
59620: PPUSH
59621: CALL_OW 141
// end ;
59625: LD_VAR 0 4
59629: RET
// export function Abs ( value ) ; begin
59630: LD_INT 0
59632: PPUSH
// result := value ;
59633: LD_ADDR_VAR 0 2
59637: PUSH
59638: LD_VAR 0 1
59642: ST_TO_ADDR
// if value < 0 then
59643: LD_VAR 0 1
59647: PUSH
59648: LD_INT 0
59650: LESS
59651: IFFALSE 59668
// result := value * - 1 ;
59653: LD_ADDR_VAR 0 2
59657: PUSH
59658: LD_VAR 0 1
59662: PUSH
59663: LD_INT 1
59665: NEG
59666: MUL
59667: ST_TO_ADDR
// end ;
59668: LD_VAR 0 2
59672: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
59673: LD_INT 0
59675: PPUSH
59676: PPUSH
59677: PPUSH
59678: PPUSH
59679: PPUSH
59680: PPUSH
59681: PPUSH
59682: PPUSH
// if not unit or not building then
59683: LD_VAR 0 1
59687: NOT
59688: PUSH
59689: LD_VAR 0 2
59693: NOT
59694: OR
59695: IFFALSE 59699
// exit ;
59697: GO 59925
// x := GetX ( building ) ;
59699: LD_ADDR_VAR 0 4
59703: PUSH
59704: LD_VAR 0 2
59708: PPUSH
59709: CALL_OW 250
59713: ST_TO_ADDR
// y := GetY ( building ) ;
59714: LD_ADDR_VAR 0 6
59718: PUSH
59719: LD_VAR 0 2
59723: PPUSH
59724: CALL_OW 251
59728: ST_TO_ADDR
// d := GetDir ( building ) ;
59729: LD_ADDR_VAR 0 8
59733: PUSH
59734: LD_VAR 0 2
59738: PPUSH
59739: CALL_OW 254
59743: ST_TO_ADDR
// r := 4 ;
59744: LD_ADDR_VAR 0 9
59748: PUSH
59749: LD_INT 4
59751: ST_TO_ADDR
// for i := 1 to 5 do
59752: LD_ADDR_VAR 0 10
59756: PUSH
59757: DOUBLE
59758: LD_INT 1
59760: DEC
59761: ST_TO_ADDR
59762: LD_INT 5
59764: PUSH
59765: FOR_TO
59766: IFFALSE 59923
// begin _x := ShiftX ( x , d , r + i ) ;
59768: LD_ADDR_VAR 0 5
59772: PUSH
59773: LD_VAR 0 4
59777: PPUSH
59778: LD_VAR 0 8
59782: PPUSH
59783: LD_VAR 0 9
59787: PUSH
59788: LD_VAR 0 10
59792: PLUS
59793: PPUSH
59794: CALL_OW 272
59798: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
59799: LD_ADDR_VAR 0 7
59803: PUSH
59804: LD_VAR 0 6
59808: PPUSH
59809: LD_VAR 0 8
59813: PPUSH
59814: LD_VAR 0 9
59818: PUSH
59819: LD_VAR 0 10
59823: PLUS
59824: PPUSH
59825: CALL_OW 273
59829: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
59830: LD_VAR 0 5
59834: PPUSH
59835: LD_VAR 0 7
59839: PPUSH
59840: CALL_OW 488
59844: PUSH
59845: LD_VAR 0 5
59849: PPUSH
59850: LD_VAR 0 7
59854: PPUSH
59855: CALL_OW 428
59859: PPUSH
59860: CALL_OW 247
59864: PUSH
59865: LD_INT 3
59867: PUSH
59868: LD_INT 2
59870: PUSH
59871: EMPTY
59872: LIST
59873: LIST
59874: IN
59875: NOT
59876: AND
59877: IFFALSE 59921
// begin ComMoveXY ( unit , _x , _y ) ;
59879: LD_VAR 0 1
59883: PPUSH
59884: LD_VAR 0 5
59888: PPUSH
59889: LD_VAR 0 7
59893: PPUSH
59894: CALL_OW 111
// result := [ _x , _y ] ;
59898: LD_ADDR_VAR 0 3
59902: PUSH
59903: LD_VAR 0 5
59907: PUSH
59908: LD_VAR 0 7
59912: PUSH
59913: EMPTY
59914: LIST
59915: LIST
59916: ST_TO_ADDR
// exit ;
59917: POP
59918: POP
59919: GO 59925
// end ; end ;
59921: GO 59765
59923: POP
59924: POP
// end ;
59925: LD_VAR 0 3
59929: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
59930: LD_INT 0
59932: PPUSH
59933: PPUSH
59934: PPUSH
// result := 0 ;
59935: LD_ADDR_VAR 0 3
59939: PUSH
59940: LD_INT 0
59942: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
59943: LD_VAR 0 1
59947: PUSH
59948: LD_INT 0
59950: LESS
59951: PUSH
59952: LD_VAR 0 1
59956: PUSH
59957: LD_INT 8
59959: GREATER
59960: OR
59961: PUSH
59962: LD_VAR 0 2
59966: PUSH
59967: LD_INT 0
59969: LESS
59970: OR
59971: PUSH
59972: LD_VAR 0 2
59976: PUSH
59977: LD_INT 8
59979: GREATER
59980: OR
59981: IFFALSE 59985
// exit ;
59983: GO 60060
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
59985: LD_ADDR_VAR 0 4
59989: PUSH
59990: LD_INT 22
59992: PUSH
59993: LD_VAR 0 2
59997: PUSH
59998: EMPTY
59999: LIST
60000: LIST
60001: PPUSH
60002: CALL_OW 69
60006: PUSH
60007: FOR_IN
60008: IFFALSE 60058
// begin un := UnitShoot ( i ) ;
60010: LD_ADDR_VAR 0 5
60014: PUSH
60015: LD_VAR 0 4
60019: PPUSH
60020: CALL_OW 504
60024: ST_TO_ADDR
// if GetSide ( un ) = side1 then
60025: LD_VAR 0 5
60029: PPUSH
60030: CALL_OW 255
60034: PUSH
60035: LD_VAR 0 1
60039: EQUAL
60040: IFFALSE 60056
// begin result := un ;
60042: LD_ADDR_VAR 0 3
60046: PUSH
60047: LD_VAR 0 5
60051: ST_TO_ADDR
// exit ;
60052: POP
60053: POP
60054: GO 60060
// end ; end ;
60056: GO 60007
60058: POP
60059: POP
// end ;
60060: LD_VAR 0 3
60064: RET
// export function GetCargoBay ( units ) ; begin
60065: LD_INT 0
60067: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
60068: LD_ADDR_VAR 0 2
60072: PUSH
60073: LD_VAR 0 1
60077: PPUSH
60078: LD_INT 2
60080: PUSH
60081: LD_INT 34
60083: PUSH
60084: LD_INT 12
60086: PUSH
60087: EMPTY
60088: LIST
60089: LIST
60090: PUSH
60091: LD_INT 34
60093: PUSH
60094: LD_INT 51
60096: PUSH
60097: EMPTY
60098: LIST
60099: LIST
60100: PUSH
60101: LD_INT 34
60103: PUSH
60104: LD_INT 32
60106: PUSH
60107: EMPTY
60108: LIST
60109: LIST
60110: PUSH
60111: LD_INT 34
60113: PUSH
60114: LD_INT 89
60116: PUSH
60117: EMPTY
60118: LIST
60119: LIST
60120: PUSH
60121: EMPTY
60122: LIST
60123: LIST
60124: LIST
60125: LIST
60126: LIST
60127: PPUSH
60128: CALL_OW 72
60132: ST_TO_ADDR
// end ;
60133: LD_VAR 0 2
60137: RET
// export function Negate ( value ) ; begin
60138: LD_INT 0
60140: PPUSH
// result := not value ;
60141: LD_ADDR_VAR 0 2
60145: PUSH
60146: LD_VAR 0 1
60150: NOT
60151: ST_TO_ADDR
// end ;
60152: LD_VAR 0 2
60156: RET
// export function Inc ( value ) ; begin
60157: LD_INT 0
60159: PPUSH
// result := value + 1 ;
60160: LD_ADDR_VAR 0 2
60164: PUSH
60165: LD_VAR 0 1
60169: PUSH
60170: LD_INT 1
60172: PLUS
60173: ST_TO_ADDR
// end ;
60174: LD_VAR 0 2
60178: RET
// export function Dec ( value ) ; begin
60179: LD_INT 0
60181: PPUSH
// result := value - 1 ;
60182: LD_ADDR_VAR 0 2
60186: PUSH
60187: LD_VAR 0 1
60191: PUSH
60192: LD_INT 1
60194: MINUS
60195: ST_TO_ADDR
// end ;
60196: LD_VAR 0 2
60200: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
60201: LD_INT 0
60203: PPUSH
60204: PPUSH
60205: PPUSH
60206: PPUSH
60207: PPUSH
60208: PPUSH
60209: PPUSH
60210: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
60211: LD_VAR 0 1
60215: PPUSH
60216: LD_VAR 0 2
60220: PPUSH
60221: CALL_OW 488
60225: NOT
60226: PUSH
60227: LD_VAR 0 3
60231: PPUSH
60232: LD_VAR 0 4
60236: PPUSH
60237: CALL_OW 488
60241: NOT
60242: OR
60243: IFFALSE 60256
// begin result := - 1 ;
60245: LD_ADDR_VAR 0 5
60249: PUSH
60250: LD_INT 1
60252: NEG
60253: ST_TO_ADDR
// exit ;
60254: GO 60491
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
60256: LD_ADDR_VAR 0 12
60260: PUSH
60261: LD_VAR 0 1
60265: PPUSH
60266: LD_VAR 0 2
60270: PPUSH
60271: LD_VAR 0 3
60275: PPUSH
60276: LD_VAR 0 4
60280: PPUSH
60281: CALL 59341 0 4
60285: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
60286: LD_ADDR_VAR 0 11
60290: PUSH
60291: LD_VAR 0 1
60295: PPUSH
60296: LD_VAR 0 2
60300: PPUSH
60301: LD_VAR 0 12
60305: PUSH
60306: LD_INT 1
60308: ARRAY
60309: PPUSH
60310: LD_VAR 0 12
60314: PUSH
60315: LD_INT 2
60317: ARRAY
60318: PPUSH
60319: CALL_OW 298
60323: ST_TO_ADDR
// distance := 9999 ;
60324: LD_ADDR_VAR 0 10
60328: PUSH
60329: LD_INT 9999
60331: ST_TO_ADDR
// for i := 0 to 5 do
60332: LD_ADDR_VAR 0 6
60336: PUSH
60337: DOUBLE
60338: LD_INT 0
60340: DEC
60341: ST_TO_ADDR
60342: LD_INT 5
60344: PUSH
60345: FOR_TO
60346: IFFALSE 60489
// begin _x := ShiftX ( x1 , i , centerDist ) ;
60348: LD_ADDR_VAR 0 7
60352: PUSH
60353: LD_VAR 0 1
60357: PPUSH
60358: LD_VAR 0 6
60362: PPUSH
60363: LD_VAR 0 11
60367: PPUSH
60368: CALL_OW 272
60372: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
60373: LD_ADDR_VAR 0 8
60377: PUSH
60378: LD_VAR 0 2
60382: PPUSH
60383: LD_VAR 0 6
60387: PPUSH
60388: LD_VAR 0 11
60392: PPUSH
60393: CALL_OW 273
60397: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
60398: LD_VAR 0 7
60402: PPUSH
60403: LD_VAR 0 8
60407: PPUSH
60408: CALL_OW 488
60412: NOT
60413: IFFALSE 60417
// continue ;
60415: GO 60345
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
60417: LD_ADDR_VAR 0 9
60421: PUSH
60422: LD_VAR 0 12
60426: PUSH
60427: LD_INT 1
60429: ARRAY
60430: PPUSH
60431: LD_VAR 0 12
60435: PUSH
60436: LD_INT 2
60438: ARRAY
60439: PPUSH
60440: LD_VAR 0 7
60444: PPUSH
60445: LD_VAR 0 8
60449: PPUSH
60450: CALL_OW 298
60454: ST_TO_ADDR
// if tmp < distance then
60455: LD_VAR 0 9
60459: PUSH
60460: LD_VAR 0 10
60464: LESS
60465: IFFALSE 60487
// begin result := i ;
60467: LD_ADDR_VAR 0 5
60471: PUSH
60472: LD_VAR 0 6
60476: ST_TO_ADDR
// distance := tmp ;
60477: LD_ADDR_VAR 0 10
60481: PUSH
60482: LD_VAR 0 9
60486: ST_TO_ADDR
// end ; end ;
60487: GO 60345
60489: POP
60490: POP
// end ;
60491: LD_VAR 0 5
60495: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
60496: LD_INT 0
60498: PPUSH
60499: PPUSH
// if not driver or not IsInUnit ( driver ) then
60500: LD_VAR 0 1
60504: NOT
60505: PUSH
60506: LD_VAR 0 1
60510: PPUSH
60511: CALL_OW 310
60515: NOT
60516: OR
60517: IFFALSE 60521
// exit ;
60519: GO 60611
// vehicle := IsInUnit ( driver ) ;
60521: LD_ADDR_VAR 0 3
60525: PUSH
60526: LD_VAR 0 1
60530: PPUSH
60531: CALL_OW 310
60535: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
60536: LD_VAR 0 1
60540: PPUSH
60541: LD_STRING \
60543: PUSH
60544: LD_INT 0
60546: PUSH
60547: LD_INT 0
60549: PUSH
60550: LD_INT 0
60552: PUSH
60553: LD_INT 0
60555: PUSH
60556: LD_INT 0
60558: PUSH
60559: LD_INT 0
60561: PUSH
60562: EMPTY
60563: LIST
60564: LIST
60565: LIST
60566: LIST
60567: LIST
60568: LIST
60569: LIST
60570: PUSH
60571: LD_STRING E
60573: PUSH
60574: LD_INT 0
60576: PUSH
60577: LD_INT 0
60579: PUSH
60580: LD_VAR 0 3
60584: PUSH
60585: LD_INT 0
60587: PUSH
60588: LD_INT 0
60590: PUSH
60591: LD_INT 0
60593: PUSH
60594: EMPTY
60595: LIST
60596: LIST
60597: LIST
60598: LIST
60599: LIST
60600: LIST
60601: LIST
60602: PUSH
60603: EMPTY
60604: LIST
60605: LIST
60606: PPUSH
60607: CALL_OW 446
// end ;
60611: LD_VAR 0 2
60615: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
60616: LD_INT 0
60618: PPUSH
60619: PPUSH
// if not driver or not IsInUnit ( driver ) then
60620: LD_VAR 0 1
60624: NOT
60625: PUSH
60626: LD_VAR 0 1
60630: PPUSH
60631: CALL_OW 310
60635: NOT
60636: OR
60637: IFFALSE 60641
// exit ;
60639: GO 60731
// vehicle := IsInUnit ( driver ) ;
60641: LD_ADDR_VAR 0 3
60645: PUSH
60646: LD_VAR 0 1
60650: PPUSH
60651: CALL_OW 310
60655: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
60656: LD_VAR 0 1
60660: PPUSH
60661: LD_STRING \
60663: PUSH
60664: LD_INT 0
60666: PUSH
60667: LD_INT 0
60669: PUSH
60670: LD_INT 0
60672: PUSH
60673: LD_INT 0
60675: PUSH
60676: LD_INT 0
60678: PUSH
60679: LD_INT 0
60681: PUSH
60682: EMPTY
60683: LIST
60684: LIST
60685: LIST
60686: LIST
60687: LIST
60688: LIST
60689: LIST
60690: PUSH
60691: LD_STRING E
60693: PUSH
60694: LD_INT 0
60696: PUSH
60697: LD_INT 0
60699: PUSH
60700: LD_VAR 0 3
60704: PUSH
60705: LD_INT 0
60707: PUSH
60708: LD_INT 0
60710: PUSH
60711: LD_INT 0
60713: PUSH
60714: EMPTY
60715: LIST
60716: LIST
60717: LIST
60718: LIST
60719: LIST
60720: LIST
60721: LIST
60722: PUSH
60723: EMPTY
60724: LIST
60725: LIST
60726: PPUSH
60727: CALL_OW 447
// end ;
60731: LD_VAR 0 2
60735: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
60736: LD_INT 0
60738: PPUSH
60739: PPUSH
60740: PPUSH
// tmp := [ ] ;
60741: LD_ADDR_VAR 0 5
60745: PUSH
60746: EMPTY
60747: ST_TO_ADDR
// for i in units do
60748: LD_ADDR_VAR 0 4
60752: PUSH
60753: LD_VAR 0 1
60757: PUSH
60758: FOR_IN
60759: IFFALSE 60797
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
60761: LD_ADDR_VAR 0 5
60765: PUSH
60766: LD_VAR 0 5
60770: PPUSH
60771: LD_VAR 0 5
60775: PUSH
60776: LD_INT 1
60778: PLUS
60779: PPUSH
60780: LD_VAR 0 4
60784: PPUSH
60785: CALL_OW 256
60789: PPUSH
60790: CALL_OW 2
60794: ST_TO_ADDR
60795: GO 60758
60797: POP
60798: POP
// if not tmp then
60799: LD_VAR 0 5
60803: NOT
60804: IFFALSE 60808
// exit ;
60806: GO 60856
// if asc then
60808: LD_VAR 0 2
60812: IFFALSE 60836
// result := SortListByListAsc ( units , tmp ) else
60814: LD_ADDR_VAR 0 3
60818: PUSH
60819: LD_VAR 0 1
60823: PPUSH
60824: LD_VAR 0 5
60828: PPUSH
60829: CALL_OW 76
60833: ST_TO_ADDR
60834: GO 60856
// result := SortListByListDesc ( units , tmp ) ;
60836: LD_ADDR_VAR 0 3
60840: PUSH
60841: LD_VAR 0 1
60845: PPUSH
60846: LD_VAR 0 5
60850: PPUSH
60851: CALL_OW 77
60855: ST_TO_ADDR
// end ;
60856: LD_VAR 0 3
60860: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
60861: LD_INT 0
60863: PPUSH
60864: PPUSH
// task := GetTaskList ( mech ) ;
60865: LD_ADDR_VAR 0 4
60869: PUSH
60870: LD_VAR 0 1
60874: PPUSH
60875: CALL_OW 437
60879: ST_TO_ADDR
// if not task then
60880: LD_VAR 0 4
60884: NOT
60885: IFFALSE 60889
// exit ;
60887: GO 60931
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
60889: LD_ADDR_VAR 0 3
60893: PUSH
60894: LD_VAR 0 4
60898: PUSH
60899: LD_INT 1
60901: ARRAY
60902: PUSH
60903: LD_INT 1
60905: ARRAY
60906: PUSH
60907: LD_STRING r
60909: EQUAL
60910: PUSH
60911: LD_VAR 0 4
60915: PUSH
60916: LD_INT 1
60918: ARRAY
60919: PUSH
60920: LD_INT 4
60922: ARRAY
60923: PUSH
60924: LD_VAR 0 2
60928: EQUAL
60929: AND
60930: ST_TO_ADDR
// end ;
60931: LD_VAR 0 3
60935: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
60936: LD_INT 0
60938: PPUSH
// SetDir ( unit , d ) ;
60939: LD_VAR 0 1
60943: PPUSH
60944: LD_VAR 0 4
60948: PPUSH
60949: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
60953: LD_ADDR_VAR 0 6
60957: PUSH
60958: LD_VAR 0 1
60962: PPUSH
60963: LD_VAR 0 2
60967: PPUSH
60968: LD_VAR 0 3
60972: PPUSH
60973: LD_VAR 0 5
60977: PPUSH
60978: CALL_OW 48
60982: ST_TO_ADDR
// end ;
60983: LD_VAR 0 6
60987: RET
// export function ToNaturalNumber ( number ) ; begin
60988: LD_INT 0
60990: PPUSH
// result := number div 1 ;
60991: LD_ADDR_VAR 0 2
60995: PUSH
60996: LD_VAR 0 1
61000: PUSH
61001: LD_INT 1
61003: DIV
61004: ST_TO_ADDR
// if number < 0 then
61005: LD_VAR 0 1
61009: PUSH
61010: LD_INT 0
61012: LESS
61013: IFFALSE 61023
// result := 0 ;
61015: LD_ADDR_VAR 0 2
61019: PUSH
61020: LD_INT 0
61022: ST_TO_ADDR
// end ;
61023: LD_VAR 0 2
61027: RET
// export function SortByClass ( units , class ) ; var un ; begin
61028: LD_INT 0
61030: PPUSH
61031: PPUSH
// if not units or not class then
61032: LD_VAR 0 1
61036: NOT
61037: PUSH
61038: LD_VAR 0 2
61042: NOT
61043: OR
61044: IFFALSE 61048
// exit ;
61046: GO 61143
// result := [ ] ;
61048: LD_ADDR_VAR 0 3
61052: PUSH
61053: EMPTY
61054: ST_TO_ADDR
// for un in units do
61055: LD_ADDR_VAR 0 4
61059: PUSH
61060: LD_VAR 0 1
61064: PUSH
61065: FOR_IN
61066: IFFALSE 61141
// if GetClass ( un ) = class then
61068: LD_VAR 0 4
61072: PPUSH
61073: CALL_OW 257
61077: PUSH
61078: LD_VAR 0 2
61082: EQUAL
61083: IFFALSE 61110
// result := Insert ( result , 1 , un ) else
61085: LD_ADDR_VAR 0 3
61089: PUSH
61090: LD_VAR 0 3
61094: PPUSH
61095: LD_INT 1
61097: PPUSH
61098: LD_VAR 0 4
61102: PPUSH
61103: CALL_OW 2
61107: ST_TO_ADDR
61108: GO 61139
// result := Replace ( result , result + 1 , un ) ;
61110: LD_ADDR_VAR 0 3
61114: PUSH
61115: LD_VAR 0 3
61119: PPUSH
61120: LD_VAR 0 3
61124: PUSH
61125: LD_INT 1
61127: PLUS
61128: PPUSH
61129: LD_VAR 0 4
61133: PPUSH
61134: CALL_OW 1
61138: ST_TO_ADDR
61139: GO 61065
61141: POP
61142: POP
// end ;
61143: LD_VAR 0 3
61147: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
61148: LD_INT 0
61150: PPUSH
61151: PPUSH
61152: PPUSH
61153: PPUSH
61154: PPUSH
61155: PPUSH
61156: PPUSH
// result := [ ] ;
61157: LD_ADDR_VAR 0 4
61161: PUSH
61162: EMPTY
61163: ST_TO_ADDR
// if x - r < 0 then
61164: LD_VAR 0 1
61168: PUSH
61169: LD_VAR 0 3
61173: MINUS
61174: PUSH
61175: LD_INT 0
61177: LESS
61178: IFFALSE 61190
// min_x := 0 else
61180: LD_ADDR_VAR 0 8
61184: PUSH
61185: LD_INT 0
61187: ST_TO_ADDR
61188: GO 61206
// min_x := x - r ;
61190: LD_ADDR_VAR 0 8
61194: PUSH
61195: LD_VAR 0 1
61199: PUSH
61200: LD_VAR 0 3
61204: MINUS
61205: ST_TO_ADDR
// if y - r < 0 then
61206: LD_VAR 0 2
61210: PUSH
61211: LD_VAR 0 3
61215: MINUS
61216: PUSH
61217: LD_INT 0
61219: LESS
61220: IFFALSE 61232
// min_y := 0 else
61222: LD_ADDR_VAR 0 7
61226: PUSH
61227: LD_INT 0
61229: ST_TO_ADDR
61230: GO 61248
// min_y := y - r ;
61232: LD_ADDR_VAR 0 7
61236: PUSH
61237: LD_VAR 0 2
61241: PUSH
61242: LD_VAR 0 3
61246: MINUS
61247: ST_TO_ADDR
// max_x := x + r ;
61248: LD_ADDR_VAR 0 9
61252: PUSH
61253: LD_VAR 0 1
61257: PUSH
61258: LD_VAR 0 3
61262: PLUS
61263: ST_TO_ADDR
// max_y := y + r ;
61264: LD_ADDR_VAR 0 10
61268: PUSH
61269: LD_VAR 0 2
61273: PUSH
61274: LD_VAR 0 3
61278: PLUS
61279: ST_TO_ADDR
// for _x = min_x to max_x do
61280: LD_ADDR_VAR 0 5
61284: PUSH
61285: DOUBLE
61286: LD_VAR 0 8
61290: DEC
61291: ST_TO_ADDR
61292: LD_VAR 0 9
61296: PUSH
61297: FOR_TO
61298: IFFALSE 61399
// for _y = min_y to max_y do
61300: LD_ADDR_VAR 0 6
61304: PUSH
61305: DOUBLE
61306: LD_VAR 0 7
61310: DEC
61311: ST_TO_ADDR
61312: LD_VAR 0 10
61316: PUSH
61317: FOR_TO
61318: IFFALSE 61395
// begin if not ValidHex ( _x , _y ) then
61320: LD_VAR 0 5
61324: PPUSH
61325: LD_VAR 0 6
61329: PPUSH
61330: CALL_OW 488
61334: NOT
61335: IFFALSE 61339
// continue ;
61337: GO 61317
// if GetResourceTypeXY ( _x , _y ) then
61339: LD_VAR 0 5
61343: PPUSH
61344: LD_VAR 0 6
61348: PPUSH
61349: CALL_OW 283
61353: IFFALSE 61393
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
61355: LD_ADDR_VAR 0 4
61359: PUSH
61360: LD_VAR 0 4
61364: PPUSH
61365: LD_VAR 0 4
61369: PUSH
61370: LD_INT 1
61372: PLUS
61373: PPUSH
61374: LD_VAR 0 5
61378: PUSH
61379: LD_VAR 0 6
61383: PUSH
61384: EMPTY
61385: LIST
61386: LIST
61387: PPUSH
61388: CALL_OW 1
61392: ST_TO_ADDR
// end ;
61393: GO 61317
61395: POP
61396: POP
61397: GO 61297
61399: POP
61400: POP
// end ;
61401: LD_VAR 0 4
61405: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
61406: LD_INT 0
61408: PPUSH
61409: PPUSH
61410: PPUSH
61411: PPUSH
61412: PPUSH
61413: PPUSH
61414: PPUSH
61415: PPUSH
// if not units then
61416: LD_VAR 0 1
61420: NOT
61421: IFFALSE 61425
// exit ;
61423: GO 61953
// result := UnitFilter ( units , [ f_ok ] ) ;
61425: LD_ADDR_VAR 0 3
61429: PUSH
61430: LD_VAR 0 1
61434: PPUSH
61435: LD_INT 50
61437: PUSH
61438: EMPTY
61439: LIST
61440: PPUSH
61441: CALL_OW 72
61445: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
61446: LD_ADDR_VAR 0 8
61450: PUSH
61451: LD_VAR 0 1
61455: PUSH
61456: LD_INT 1
61458: ARRAY
61459: PPUSH
61460: CALL_OW 255
61464: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
61465: LD_ADDR_VAR 0 10
61469: PUSH
61470: LD_INT 29
61472: PUSH
61473: LD_INT 91
61475: PUSH
61476: LD_INT 49
61478: PUSH
61479: EMPTY
61480: LIST
61481: LIST
61482: LIST
61483: ST_TO_ADDR
// if not result then
61484: LD_VAR 0 3
61488: NOT
61489: IFFALSE 61493
// exit ;
61491: GO 61953
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
61493: LD_ADDR_VAR 0 5
61497: PUSH
61498: LD_INT 81
61500: PUSH
61501: LD_VAR 0 8
61505: PUSH
61506: EMPTY
61507: LIST
61508: LIST
61509: PPUSH
61510: CALL_OW 69
61514: ST_TO_ADDR
// for i in result do
61515: LD_ADDR_VAR 0 4
61519: PUSH
61520: LD_VAR 0 3
61524: PUSH
61525: FOR_IN
61526: IFFALSE 61951
// begin tag := GetTag ( i ) + 1 ;
61528: LD_ADDR_VAR 0 9
61532: PUSH
61533: LD_VAR 0 4
61537: PPUSH
61538: CALL_OW 110
61542: PUSH
61543: LD_INT 1
61545: PLUS
61546: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
61547: LD_ADDR_VAR 0 7
61551: PUSH
61552: LD_VAR 0 4
61556: PPUSH
61557: CALL_OW 250
61561: PPUSH
61562: LD_VAR 0 4
61566: PPUSH
61567: CALL_OW 251
61571: PPUSH
61572: LD_INT 4
61574: PPUSH
61575: CALL 61148 0 3
61579: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
61580: LD_VAR 0 4
61584: PPUSH
61585: CALL_OW 247
61589: PUSH
61590: LD_INT 2
61592: EQUAL
61593: PUSH
61594: LD_VAR 0 7
61598: PUSH
61599: LD_INT 2
61601: GREATER
61602: AND
61603: PUSH
61604: LD_VAR 0 4
61608: PPUSH
61609: CALL_OW 264
61613: PUSH
61614: LD_VAR 0 10
61618: IN
61619: NOT
61620: AND
61621: IFFALSE 61660
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
61623: LD_VAR 0 4
61627: PPUSH
61628: LD_VAR 0 7
61632: PUSH
61633: LD_INT 1
61635: ARRAY
61636: PUSH
61637: LD_INT 1
61639: ARRAY
61640: PPUSH
61641: LD_VAR 0 7
61645: PUSH
61646: LD_INT 1
61648: ARRAY
61649: PUSH
61650: LD_INT 2
61652: ARRAY
61653: PPUSH
61654: CALL_OW 116
61658: GO 61949
// if path > tag then
61660: LD_VAR 0 2
61664: PUSH
61665: LD_VAR 0 9
61669: GREATER
61670: IFFALSE 61878
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
61672: LD_ADDR_VAR 0 6
61676: PUSH
61677: LD_VAR 0 5
61681: PPUSH
61682: LD_INT 91
61684: PUSH
61685: LD_VAR 0 4
61689: PUSH
61690: LD_INT 8
61692: PUSH
61693: EMPTY
61694: LIST
61695: LIST
61696: LIST
61697: PPUSH
61698: CALL_OW 72
61702: ST_TO_ADDR
// if nearEnemy then
61703: LD_VAR 0 6
61707: IFFALSE 61776
// begin if GetWeapon ( i ) = ru_time_lapser then
61709: LD_VAR 0 4
61713: PPUSH
61714: CALL_OW 264
61718: PUSH
61719: LD_INT 49
61721: EQUAL
61722: IFFALSE 61750
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
61724: LD_VAR 0 4
61728: PPUSH
61729: LD_VAR 0 6
61733: PPUSH
61734: LD_VAR 0 4
61738: PPUSH
61739: CALL_OW 74
61743: PPUSH
61744: CALL_OW 112
61748: GO 61774
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
61750: LD_VAR 0 4
61754: PPUSH
61755: LD_VAR 0 6
61759: PPUSH
61760: LD_VAR 0 4
61764: PPUSH
61765: CALL_OW 74
61769: PPUSH
61770: CALL 63024 0 2
// end else
61774: GO 61876
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
61776: LD_VAR 0 4
61780: PPUSH
61781: LD_VAR 0 2
61785: PUSH
61786: LD_VAR 0 9
61790: ARRAY
61791: PUSH
61792: LD_INT 1
61794: ARRAY
61795: PPUSH
61796: LD_VAR 0 2
61800: PUSH
61801: LD_VAR 0 9
61805: ARRAY
61806: PUSH
61807: LD_INT 2
61809: ARRAY
61810: PPUSH
61811: CALL_OW 297
61815: PUSH
61816: LD_INT 6
61818: GREATER
61819: IFFALSE 61862
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
61821: LD_VAR 0 4
61825: PPUSH
61826: LD_VAR 0 2
61830: PUSH
61831: LD_VAR 0 9
61835: ARRAY
61836: PUSH
61837: LD_INT 1
61839: ARRAY
61840: PPUSH
61841: LD_VAR 0 2
61845: PUSH
61846: LD_VAR 0 9
61850: ARRAY
61851: PUSH
61852: LD_INT 2
61854: ARRAY
61855: PPUSH
61856: CALL_OW 114
61860: GO 61876
// SetTag ( i , tag ) ;
61862: LD_VAR 0 4
61866: PPUSH
61867: LD_VAR 0 9
61871: PPUSH
61872: CALL_OW 109
// end else
61876: GO 61949
// if enemy then
61878: LD_VAR 0 5
61882: IFFALSE 61949
// begin if GetWeapon ( i ) = ru_time_lapser then
61884: LD_VAR 0 4
61888: PPUSH
61889: CALL_OW 264
61893: PUSH
61894: LD_INT 49
61896: EQUAL
61897: IFFALSE 61925
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
61899: LD_VAR 0 4
61903: PPUSH
61904: LD_VAR 0 5
61908: PPUSH
61909: LD_VAR 0 4
61913: PPUSH
61914: CALL_OW 74
61918: PPUSH
61919: CALL_OW 112
61923: GO 61949
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
61925: LD_VAR 0 4
61929: PPUSH
61930: LD_VAR 0 5
61934: PPUSH
61935: LD_VAR 0 4
61939: PPUSH
61940: CALL_OW 74
61944: PPUSH
61945: CALL 63024 0 2
// end ; end ;
61949: GO 61525
61951: POP
61952: POP
// end ;
61953: LD_VAR 0 3
61957: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
61958: LD_INT 0
61960: PPUSH
61961: PPUSH
61962: PPUSH
// if not unit or IsInUnit ( unit ) then
61963: LD_VAR 0 1
61967: NOT
61968: PUSH
61969: LD_VAR 0 1
61973: PPUSH
61974: CALL_OW 310
61978: OR
61979: IFFALSE 61983
// exit ;
61981: GO 62074
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
61983: LD_ADDR_VAR 0 4
61987: PUSH
61988: LD_VAR 0 1
61992: PPUSH
61993: CALL_OW 250
61997: PPUSH
61998: LD_VAR 0 2
62002: PPUSH
62003: LD_INT 1
62005: PPUSH
62006: CALL_OW 272
62010: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
62011: LD_ADDR_VAR 0 5
62015: PUSH
62016: LD_VAR 0 1
62020: PPUSH
62021: CALL_OW 251
62025: PPUSH
62026: LD_VAR 0 2
62030: PPUSH
62031: LD_INT 1
62033: PPUSH
62034: CALL_OW 273
62038: ST_TO_ADDR
// if ValidHex ( x , y ) then
62039: LD_VAR 0 4
62043: PPUSH
62044: LD_VAR 0 5
62048: PPUSH
62049: CALL_OW 488
62053: IFFALSE 62074
// ComTurnXY ( unit , x , y ) ;
62055: LD_VAR 0 1
62059: PPUSH
62060: LD_VAR 0 4
62064: PPUSH
62065: LD_VAR 0 5
62069: PPUSH
62070: CALL_OW 118
// end ;
62074: LD_VAR 0 3
62078: RET
// export function SeeUnits ( side , units ) ; var i ; begin
62079: LD_INT 0
62081: PPUSH
62082: PPUSH
// result := false ;
62083: LD_ADDR_VAR 0 3
62087: PUSH
62088: LD_INT 0
62090: ST_TO_ADDR
// if not units then
62091: LD_VAR 0 2
62095: NOT
62096: IFFALSE 62100
// exit ;
62098: GO 62145
// for i in units do
62100: LD_ADDR_VAR 0 4
62104: PUSH
62105: LD_VAR 0 2
62109: PUSH
62110: FOR_IN
62111: IFFALSE 62143
// if See ( side , i ) then
62113: LD_VAR 0 1
62117: PPUSH
62118: LD_VAR 0 4
62122: PPUSH
62123: CALL_OW 292
62127: IFFALSE 62141
// begin result := true ;
62129: LD_ADDR_VAR 0 3
62133: PUSH
62134: LD_INT 1
62136: ST_TO_ADDR
// exit ;
62137: POP
62138: POP
62139: GO 62145
// end ;
62141: GO 62110
62143: POP
62144: POP
// end ;
62145: LD_VAR 0 3
62149: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
62150: LD_INT 0
62152: PPUSH
62153: PPUSH
62154: PPUSH
62155: PPUSH
// if not unit or not points then
62156: LD_VAR 0 1
62160: NOT
62161: PUSH
62162: LD_VAR 0 2
62166: NOT
62167: OR
62168: IFFALSE 62172
// exit ;
62170: GO 62262
// dist := 99999 ;
62172: LD_ADDR_VAR 0 5
62176: PUSH
62177: LD_INT 99999
62179: ST_TO_ADDR
// for i in points do
62180: LD_ADDR_VAR 0 4
62184: PUSH
62185: LD_VAR 0 2
62189: PUSH
62190: FOR_IN
62191: IFFALSE 62260
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
62193: LD_ADDR_VAR 0 6
62197: PUSH
62198: LD_VAR 0 1
62202: PPUSH
62203: LD_VAR 0 4
62207: PUSH
62208: LD_INT 1
62210: ARRAY
62211: PPUSH
62212: LD_VAR 0 4
62216: PUSH
62217: LD_INT 2
62219: ARRAY
62220: PPUSH
62221: CALL_OW 297
62225: ST_TO_ADDR
// if tmpDist < dist then
62226: LD_VAR 0 6
62230: PUSH
62231: LD_VAR 0 5
62235: LESS
62236: IFFALSE 62258
// begin result := i ;
62238: LD_ADDR_VAR 0 3
62242: PUSH
62243: LD_VAR 0 4
62247: ST_TO_ADDR
// dist := tmpDist ;
62248: LD_ADDR_VAR 0 5
62252: PUSH
62253: LD_VAR 0 6
62257: ST_TO_ADDR
// end ; end ;
62258: GO 62190
62260: POP
62261: POP
// end ;
62262: LD_VAR 0 3
62266: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
62267: LD_INT 0
62269: PPUSH
// uc_side := side ;
62270: LD_ADDR_OWVAR 20
62274: PUSH
62275: LD_VAR 0 1
62279: ST_TO_ADDR
// uc_nation := 3 ;
62280: LD_ADDR_OWVAR 21
62284: PUSH
62285: LD_INT 3
62287: ST_TO_ADDR
// vc_chassis := 25 ;
62288: LD_ADDR_OWVAR 37
62292: PUSH
62293: LD_INT 25
62295: ST_TO_ADDR
// vc_engine := engine_siberite ;
62296: LD_ADDR_OWVAR 39
62300: PUSH
62301: LD_INT 3
62303: ST_TO_ADDR
// vc_control := control_computer ;
62304: LD_ADDR_OWVAR 38
62308: PUSH
62309: LD_INT 3
62311: ST_TO_ADDR
// vc_weapon := 59 ;
62312: LD_ADDR_OWVAR 40
62316: PUSH
62317: LD_INT 59
62319: ST_TO_ADDR
// result := CreateVehicle ;
62320: LD_ADDR_VAR 0 5
62324: PUSH
62325: CALL_OW 45
62329: ST_TO_ADDR
// SetDir ( result , d ) ;
62330: LD_VAR 0 5
62334: PPUSH
62335: LD_VAR 0 4
62339: PPUSH
62340: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
62344: LD_VAR 0 5
62348: PPUSH
62349: LD_VAR 0 2
62353: PPUSH
62354: LD_VAR 0 3
62358: PPUSH
62359: LD_INT 0
62361: PPUSH
62362: CALL_OW 48
// end ;
62366: LD_VAR 0 5
62370: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
62371: LD_INT 0
62373: PPUSH
62374: PPUSH
62375: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
62376: LD_ADDR_VAR 0 2
62380: PUSH
62381: LD_INT 0
62383: PUSH
62384: LD_INT 0
62386: PUSH
62387: LD_INT 0
62389: PUSH
62390: LD_INT 0
62392: PUSH
62393: EMPTY
62394: LIST
62395: LIST
62396: LIST
62397: LIST
62398: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
62399: LD_VAR 0 1
62403: NOT
62404: PUSH
62405: LD_VAR 0 1
62409: PPUSH
62410: CALL_OW 264
62414: PUSH
62415: LD_INT 12
62417: PUSH
62418: LD_INT 51
62420: PUSH
62421: LD_INT 32
62423: PUSH
62424: LD_INT 89
62426: PUSH
62427: EMPTY
62428: LIST
62429: LIST
62430: LIST
62431: LIST
62432: IN
62433: NOT
62434: OR
62435: IFFALSE 62439
// exit ;
62437: GO 62537
// for i := 1 to 3 do
62439: LD_ADDR_VAR 0 3
62443: PUSH
62444: DOUBLE
62445: LD_INT 1
62447: DEC
62448: ST_TO_ADDR
62449: LD_INT 3
62451: PUSH
62452: FOR_TO
62453: IFFALSE 62535
// begin tmp := GetCargo ( cargo , i ) ;
62455: LD_ADDR_VAR 0 4
62459: PUSH
62460: LD_VAR 0 1
62464: PPUSH
62465: LD_VAR 0 3
62469: PPUSH
62470: CALL_OW 289
62474: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
62475: LD_ADDR_VAR 0 2
62479: PUSH
62480: LD_VAR 0 2
62484: PPUSH
62485: LD_VAR 0 3
62489: PPUSH
62490: LD_VAR 0 4
62494: PPUSH
62495: CALL_OW 1
62499: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
62500: LD_ADDR_VAR 0 2
62504: PUSH
62505: LD_VAR 0 2
62509: PPUSH
62510: LD_INT 4
62512: PPUSH
62513: LD_VAR 0 2
62517: PUSH
62518: LD_INT 4
62520: ARRAY
62521: PUSH
62522: LD_VAR 0 4
62526: PLUS
62527: PPUSH
62528: CALL_OW 1
62532: ST_TO_ADDR
// end ;
62533: GO 62452
62535: POP
62536: POP
// end ;
62537: LD_VAR 0 2
62541: RET
// export function Length ( array ) ; begin
62542: LD_INT 0
62544: PPUSH
// result := array + 0 ;
62545: LD_ADDR_VAR 0 2
62549: PUSH
62550: LD_VAR 0 1
62554: PUSH
62555: LD_INT 0
62557: PLUS
62558: ST_TO_ADDR
// end ;
62559: LD_VAR 0 2
62563: RET
// export function PrepareArray ( array ) ; begin
62564: LD_INT 0
62566: PPUSH
// result := array diff 0 ;
62567: LD_ADDR_VAR 0 2
62571: PUSH
62572: LD_VAR 0 1
62576: PUSH
62577: LD_INT 0
62579: DIFF
62580: ST_TO_ADDR
// if not result [ 1 ] then
62581: LD_VAR 0 2
62585: PUSH
62586: LD_INT 1
62588: ARRAY
62589: NOT
62590: IFFALSE 62610
// result := Delete ( result , 1 ) ;
62592: LD_ADDR_VAR 0 2
62596: PUSH
62597: LD_VAR 0 2
62601: PPUSH
62602: LD_INT 1
62604: PPUSH
62605: CALL_OW 3
62609: ST_TO_ADDR
// end ;
62610: LD_VAR 0 2
62614: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
62615: LD_INT 0
62617: PPUSH
62618: PPUSH
62619: PPUSH
62620: PPUSH
// sibRocketRange := 25 ;
62621: LD_ADDR_VAR 0 6
62625: PUSH
62626: LD_INT 25
62628: ST_TO_ADDR
// result := false ;
62629: LD_ADDR_VAR 0 4
62633: PUSH
62634: LD_INT 0
62636: ST_TO_ADDR
// for i := 0 to 5 do
62637: LD_ADDR_VAR 0 5
62641: PUSH
62642: DOUBLE
62643: LD_INT 0
62645: DEC
62646: ST_TO_ADDR
62647: LD_INT 5
62649: PUSH
62650: FOR_TO
62651: IFFALSE 62718
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
62653: LD_VAR 0 1
62657: PPUSH
62658: LD_VAR 0 5
62662: PPUSH
62663: LD_VAR 0 6
62667: PPUSH
62668: CALL_OW 272
62672: PPUSH
62673: LD_VAR 0 2
62677: PPUSH
62678: LD_VAR 0 5
62682: PPUSH
62683: LD_VAR 0 6
62687: PPUSH
62688: CALL_OW 273
62692: PPUSH
62693: LD_VAR 0 3
62697: PPUSH
62698: CALL_OW 309
62702: IFFALSE 62716
// begin result := true ;
62704: LD_ADDR_VAR 0 4
62708: PUSH
62709: LD_INT 1
62711: ST_TO_ADDR
// exit ;
62712: POP
62713: POP
62714: GO 62720
// end ;
62716: GO 62650
62718: POP
62719: POP
// end ;
62720: LD_VAR 0 4
62724: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
62725: LD_INT 0
62727: PPUSH
62728: PPUSH
62729: PPUSH
// if btype = b_depot then
62730: LD_VAR 0 2
62734: PUSH
62735: LD_INT 0
62737: EQUAL
62738: IFFALSE 62750
// begin result := true ;
62740: LD_ADDR_VAR 0 3
62744: PUSH
62745: LD_INT 1
62747: ST_TO_ADDR
// exit ;
62748: GO 62866
// end ; pom := GetBase ( depot ) ;
62750: LD_ADDR_VAR 0 4
62754: PUSH
62755: LD_VAR 0 1
62759: PPUSH
62760: CALL_OW 274
62764: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
62765: LD_ADDR_VAR 0 5
62769: PUSH
62770: LD_VAR 0 2
62774: PPUSH
62775: LD_VAR 0 1
62779: PPUSH
62780: CALL_OW 248
62784: PPUSH
62785: CALL_OW 450
62789: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
62790: LD_ADDR_VAR 0 3
62794: PUSH
62795: LD_VAR 0 4
62799: PPUSH
62800: LD_INT 1
62802: PPUSH
62803: CALL_OW 275
62807: PUSH
62808: LD_VAR 0 5
62812: PUSH
62813: LD_INT 1
62815: ARRAY
62816: GREATEREQUAL
62817: PUSH
62818: LD_VAR 0 4
62822: PPUSH
62823: LD_INT 2
62825: PPUSH
62826: CALL_OW 275
62830: PUSH
62831: LD_VAR 0 5
62835: PUSH
62836: LD_INT 2
62838: ARRAY
62839: GREATEREQUAL
62840: AND
62841: PUSH
62842: LD_VAR 0 4
62846: PPUSH
62847: LD_INT 3
62849: PPUSH
62850: CALL_OW 275
62854: PUSH
62855: LD_VAR 0 5
62859: PUSH
62860: LD_INT 3
62862: ARRAY
62863: GREATEREQUAL
62864: AND
62865: ST_TO_ADDR
// end ;
62866: LD_VAR 0 3
62870: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
62871: LD_INT 0
62873: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
62874: LD_VAR 0 1
62878: PPUSH
62879: LD_VAR 0 2
62883: PPUSH
62884: LD_INT 0
62886: PPUSH
62887: LD_INT 0
62889: PPUSH
62890: LD_INT 1
62892: PPUSH
62893: LD_INT 0
62895: PPUSH
62896: CALL_OW 587
// end ;
62900: LD_VAR 0 3
62904: RET
// export function CenterOnNow ( unit ) ; begin
62905: LD_INT 0
62907: PPUSH
// result := IsInUnit ( unit ) ;
62908: LD_ADDR_VAR 0 2
62912: PUSH
62913: LD_VAR 0 1
62917: PPUSH
62918: CALL_OW 310
62922: ST_TO_ADDR
// if not result then
62923: LD_VAR 0 2
62927: NOT
62928: IFFALSE 62940
// result := unit ;
62930: LD_ADDR_VAR 0 2
62934: PUSH
62935: LD_VAR 0 1
62939: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
62940: LD_VAR 0 1
62944: PPUSH
62945: CALL_OW 87
// end ;
62949: LD_VAR 0 2
62953: RET
// export function ComMoveHex ( unit , hex ) ; begin
62954: LD_INT 0
62956: PPUSH
// if not hex then
62957: LD_VAR 0 2
62961: NOT
62962: IFFALSE 62966
// exit ;
62964: GO 63019
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
62966: LD_VAR 0 2
62970: PUSH
62971: LD_INT 1
62973: ARRAY
62974: PPUSH
62975: LD_VAR 0 2
62979: PUSH
62980: LD_INT 2
62982: ARRAY
62983: PPUSH
62984: CALL_OW 428
62988: IFFALSE 62992
// exit ;
62990: GO 63019
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
62992: LD_VAR 0 1
62996: PPUSH
62997: LD_VAR 0 2
63001: PUSH
63002: LD_INT 1
63004: ARRAY
63005: PPUSH
63006: LD_VAR 0 2
63010: PUSH
63011: LD_INT 2
63013: ARRAY
63014: PPUSH
63015: CALL_OW 111
// end ;
63019: LD_VAR 0 3
63023: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
63024: LD_INT 0
63026: PPUSH
63027: PPUSH
63028: PPUSH
// if not unit or not enemy then
63029: LD_VAR 0 1
63033: NOT
63034: PUSH
63035: LD_VAR 0 2
63039: NOT
63040: OR
63041: IFFALSE 63045
// exit ;
63043: GO 63169
// x := GetX ( enemy ) ;
63045: LD_ADDR_VAR 0 4
63049: PUSH
63050: LD_VAR 0 2
63054: PPUSH
63055: CALL_OW 250
63059: ST_TO_ADDR
// y := GetY ( enemy ) ;
63060: LD_ADDR_VAR 0 5
63064: PUSH
63065: LD_VAR 0 2
63069: PPUSH
63070: CALL_OW 251
63074: ST_TO_ADDR
// if ValidHex ( x , y ) then
63075: LD_VAR 0 4
63079: PPUSH
63080: LD_VAR 0 5
63084: PPUSH
63085: CALL_OW 488
63089: IFFALSE 63169
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
63091: LD_VAR 0 2
63095: PPUSH
63096: CALL_OW 247
63100: PUSH
63101: LD_INT 3
63103: PUSH
63104: LD_INT 2
63106: PUSH
63107: EMPTY
63108: LIST
63109: LIST
63110: IN
63111: PUSH
63112: LD_VAR 0 1
63116: PPUSH
63117: CALL_OW 255
63121: PPUSH
63122: LD_VAR 0 2
63126: PPUSH
63127: CALL_OW 292
63131: OR
63132: IFFALSE 63150
// ComAttackUnit ( unit , enemy ) else
63134: LD_VAR 0 1
63138: PPUSH
63139: LD_VAR 0 2
63143: PPUSH
63144: CALL_OW 115
63148: GO 63169
// ComAgressiveMove ( unit , x , y ) ;
63150: LD_VAR 0 1
63154: PPUSH
63155: LD_VAR 0 4
63159: PPUSH
63160: LD_VAR 0 5
63164: PPUSH
63165: CALL_OW 114
// end ;
63169: LD_VAR 0 3
63173: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
63174: LD_INT 0
63176: PPUSH
63177: PPUSH
63178: PPUSH
// list := AreaToList ( area , 0 ) ;
63179: LD_ADDR_VAR 0 5
63183: PUSH
63184: LD_VAR 0 1
63188: PPUSH
63189: LD_INT 0
63191: PPUSH
63192: CALL_OW 517
63196: ST_TO_ADDR
// if not list then
63197: LD_VAR 0 5
63201: NOT
63202: IFFALSE 63206
// exit ;
63204: GO 63336
// if all then
63206: LD_VAR 0 2
63210: IFFALSE 63298
// begin for i := 1 to list [ 1 ] do
63212: LD_ADDR_VAR 0 4
63216: PUSH
63217: DOUBLE
63218: LD_INT 1
63220: DEC
63221: ST_TO_ADDR
63222: LD_VAR 0 5
63226: PUSH
63227: LD_INT 1
63229: ARRAY
63230: PUSH
63231: FOR_TO
63232: IFFALSE 63294
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
63234: LD_ADDR_VAR 0 3
63238: PUSH
63239: LD_VAR 0 3
63243: PPUSH
63244: LD_VAR 0 3
63248: PUSH
63249: LD_INT 1
63251: PLUS
63252: PPUSH
63253: LD_VAR 0 5
63257: PUSH
63258: LD_INT 1
63260: ARRAY
63261: PUSH
63262: LD_VAR 0 4
63266: ARRAY
63267: PUSH
63268: LD_VAR 0 5
63272: PUSH
63273: LD_INT 2
63275: ARRAY
63276: PUSH
63277: LD_VAR 0 4
63281: ARRAY
63282: PUSH
63283: EMPTY
63284: LIST
63285: LIST
63286: PPUSH
63287: CALL_OW 1
63291: ST_TO_ADDR
63292: GO 63231
63294: POP
63295: POP
// exit ;
63296: GO 63336
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
63298: LD_ADDR_VAR 0 3
63302: PUSH
63303: LD_VAR 0 5
63307: PUSH
63308: LD_INT 1
63310: ARRAY
63311: PUSH
63312: LD_INT 1
63314: ARRAY
63315: PUSH
63316: LD_VAR 0 5
63320: PUSH
63321: LD_INT 2
63323: ARRAY
63324: PUSH
63325: LD_INT 1
63327: ARRAY
63328: PUSH
63329: EMPTY
63330: LIST
63331: LIST
63332: PUSH
63333: EMPTY
63334: LIST
63335: ST_TO_ADDR
// end ;
63336: LD_VAR 0 3
63340: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
63341: LD_INT 0
63343: PPUSH
63344: PPUSH
// list := AreaToList ( area , 0 ) ;
63345: LD_ADDR_VAR 0 4
63349: PUSH
63350: LD_VAR 0 1
63354: PPUSH
63355: LD_INT 0
63357: PPUSH
63358: CALL_OW 517
63362: ST_TO_ADDR
// if not list then
63363: LD_VAR 0 4
63367: NOT
63368: IFFALSE 63372
// exit ;
63370: GO 63413
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
63372: LD_ADDR_VAR 0 3
63376: PUSH
63377: LD_VAR 0 4
63381: PUSH
63382: LD_INT 1
63384: ARRAY
63385: PUSH
63386: LD_INT 1
63388: ARRAY
63389: PUSH
63390: LD_VAR 0 4
63394: PUSH
63395: LD_INT 2
63397: ARRAY
63398: PUSH
63399: LD_INT 1
63401: ARRAY
63402: PUSH
63403: LD_VAR 0 2
63407: PUSH
63408: EMPTY
63409: LIST
63410: LIST
63411: LIST
63412: ST_TO_ADDR
// end ;
63413: LD_VAR 0 3
63417: RET
// export function First ( array ) ; begin
63418: LD_INT 0
63420: PPUSH
// if not array then
63421: LD_VAR 0 1
63425: NOT
63426: IFFALSE 63430
// exit ;
63428: GO 63444
// result := array [ 1 ] ;
63430: LD_ADDR_VAR 0 2
63434: PUSH
63435: LD_VAR 0 1
63439: PUSH
63440: LD_INT 1
63442: ARRAY
63443: ST_TO_ADDR
// end ;
63444: LD_VAR 0 2
63448: RET
// export function Last ( array ) ; begin
63449: LD_INT 0
63451: PPUSH
// if not array then
63452: LD_VAR 0 1
63456: NOT
63457: IFFALSE 63461
// exit ;
63459: GO 63477
// result := array [ array ] ;
63461: LD_ADDR_VAR 0 2
63465: PUSH
63466: LD_VAR 0 1
63470: PUSH
63471: LD_VAR 0 1
63475: ARRAY
63476: ST_TO_ADDR
// end ;
63477: LD_VAR 0 2
63481: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
63482: LD_INT 0
63484: PPUSH
63485: PPUSH
// result := [ ] ;
63486: LD_ADDR_VAR 0 5
63490: PUSH
63491: EMPTY
63492: ST_TO_ADDR
// if not array then
63493: LD_VAR 0 1
63497: NOT
63498: IFFALSE 63502
// exit ;
63500: GO 63614
// for i := 1 to array do
63502: LD_ADDR_VAR 0 6
63506: PUSH
63507: DOUBLE
63508: LD_INT 1
63510: DEC
63511: ST_TO_ADDR
63512: LD_VAR 0 1
63516: PUSH
63517: FOR_TO
63518: IFFALSE 63612
// if array [ i ] [ index ] = value then
63520: LD_VAR 0 1
63524: PUSH
63525: LD_VAR 0 6
63529: ARRAY
63530: PUSH
63531: LD_VAR 0 2
63535: ARRAY
63536: PUSH
63537: LD_VAR 0 3
63541: EQUAL
63542: IFFALSE 63610
// begin if indexColumn then
63544: LD_VAR 0 4
63548: IFFALSE 63584
// result := Join ( result , array [ i ] [ indexColumn ] ) else
63550: LD_ADDR_VAR 0 5
63554: PUSH
63555: LD_VAR 0 5
63559: PPUSH
63560: LD_VAR 0 1
63564: PUSH
63565: LD_VAR 0 6
63569: ARRAY
63570: PUSH
63571: LD_VAR 0 4
63575: ARRAY
63576: PPUSH
63577: CALL 58796 0 2
63581: ST_TO_ADDR
63582: GO 63610
// result := Join ( result , array [ i ] ) ;
63584: LD_ADDR_VAR 0 5
63588: PUSH
63589: LD_VAR 0 5
63593: PPUSH
63594: LD_VAR 0 1
63598: PUSH
63599: LD_VAR 0 6
63603: ARRAY
63604: PPUSH
63605: CALL 58796 0 2
63609: ST_TO_ADDR
// end ;
63610: GO 63517
63612: POP
63613: POP
// end ;
63614: LD_VAR 0 5
63618: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
63619: LD_INT 0
63621: PPUSH
// if not vehicles or not parkingPoint then
63622: LD_VAR 0 1
63626: NOT
63627: PUSH
63628: LD_VAR 0 2
63632: NOT
63633: OR
63634: IFFALSE 63638
// exit ;
63636: GO 63736
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
63638: LD_ADDR_VAR 0 1
63642: PUSH
63643: LD_VAR 0 1
63647: PPUSH
63648: LD_INT 50
63650: PUSH
63651: EMPTY
63652: LIST
63653: PUSH
63654: LD_INT 3
63656: PUSH
63657: LD_INT 92
63659: PUSH
63660: LD_VAR 0 2
63664: PUSH
63665: LD_INT 1
63667: ARRAY
63668: PUSH
63669: LD_VAR 0 2
63673: PUSH
63674: LD_INT 2
63676: ARRAY
63677: PUSH
63678: LD_INT 8
63680: PUSH
63681: EMPTY
63682: LIST
63683: LIST
63684: LIST
63685: LIST
63686: PUSH
63687: EMPTY
63688: LIST
63689: LIST
63690: PUSH
63691: EMPTY
63692: LIST
63693: LIST
63694: PPUSH
63695: CALL_OW 72
63699: ST_TO_ADDR
// if not vehicles then
63700: LD_VAR 0 1
63704: NOT
63705: IFFALSE 63709
// exit ;
63707: GO 63736
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
63709: LD_VAR 0 1
63713: PPUSH
63714: LD_VAR 0 2
63718: PUSH
63719: LD_INT 1
63721: ARRAY
63722: PPUSH
63723: LD_VAR 0 2
63727: PUSH
63728: LD_INT 2
63730: ARRAY
63731: PPUSH
63732: CALL_OW 111
// end ;
63736: LD_VAR 0 3
63740: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
63741: LD_INT 0
63743: PPUSH
63744: PPUSH
63745: PPUSH
// if not side or not area then
63746: LD_VAR 0 1
63750: NOT
63751: PUSH
63752: LD_VAR 0 2
63756: NOT
63757: OR
63758: IFFALSE 63762
// exit ;
63760: GO 63881
// tmp := AreaToList ( area , 0 ) ;
63762: LD_ADDR_VAR 0 5
63766: PUSH
63767: LD_VAR 0 2
63771: PPUSH
63772: LD_INT 0
63774: PPUSH
63775: CALL_OW 517
63779: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
63780: LD_ADDR_VAR 0 4
63784: PUSH
63785: DOUBLE
63786: LD_INT 1
63788: DEC
63789: ST_TO_ADDR
63790: LD_VAR 0 5
63794: PUSH
63795: LD_INT 1
63797: ARRAY
63798: PUSH
63799: FOR_TO
63800: IFFALSE 63879
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
63802: LD_VAR 0 5
63806: PUSH
63807: LD_INT 1
63809: ARRAY
63810: PUSH
63811: LD_VAR 0 4
63815: ARRAY
63816: PPUSH
63817: LD_VAR 0 5
63821: PUSH
63822: LD_INT 2
63824: ARRAY
63825: PUSH
63826: LD_VAR 0 4
63830: ARRAY
63831: PPUSH
63832: CALL_OW 351
63836: IFFALSE 63877
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
63838: LD_VAR 0 5
63842: PUSH
63843: LD_INT 1
63845: ARRAY
63846: PUSH
63847: LD_VAR 0 4
63851: ARRAY
63852: PPUSH
63853: LD_VAR 0 5
63857: PUSH
63858: LD_INT 2
63860: ARRAY
63861: PUSH
63862: LD_VAR 0 4
63866: ARRAY
63867: PPUSH
63868: LD_VAR 0 1
63872: PPUSH
63873: CALL_OW 244
// end ;
63877: GO 63799
63879: POP
63880: POP
// end ; end_of_file
63881: LD_VAR 0 3
63885: RET
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeFamine do var i , canWin ;
63886: LD_EXP 48
63890: PUSH
63891: CALL 64096 0 0
63895: AND
63896: PUSH
63897: LD_OWVAR 4
63901: AND
63902: IFFALSE 64093
63904: GO 63906
63906: DISABLE
63907: LD_INT 0
63909: PPUSH
63910: PPUSH
// begin canWin := false ;
63911: LD_ADDR_VAR 0 2
63915: PUSH
63916: LD_INT 0
63918: ST_TO_ADDR
// if not HasPower ( your_side ) then
63919: LD_OWVAR 2
63923: PPUSH
63924: CALL 64136 0 1
63928: NOT
63929: IFFALSE 63940
// begin Multiplayer_Loose_Message ;
63931: CALL_OW 521
// enable ( mpLose ) ;
63935: LD_INT 102
63937: ENABLE_MARKED
// end else
63938: GO 64093
// begin canWin := true ;
63940: LD_ADDR_VAR 0 2
63944: PUSH
63945: LD_INT 1
63947: ST_TO_ADDR
// for i := 1 to 8 do
63948: LD_ADDR_VAR 0 1
63952: PUSH
63953: DOUBLE
63954: LD_INT 1
63956: DEC
63957: ST_TO_ADDR
63958: LD_INT 8
63960: PUSH
63961: FOR_TO
63962: IFFALSE 64079
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
63964: LD_EXP 16
63968: PUSH
63969: LD_VAR 0 1
63973: ARRAY
63974: PUSH
63975: LD_VAR 0 1
63979: PPUSH
63980: CALL_OW 108
63984: AND
63985: PUSH
63986: LD_VAR 0 1
63990: PUSH
63991: LD_OWVAR 2
63995: NONEQUAL
63996: AND
63997: IFFALSE 64077
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
63999: LD_EXP 17
64003: PUSH
64004: LD_VAR 0 1
64008: ARRAY
64009: NOT
64010: PUSH
64011: LD_EXP 17
64015: PUSH
64016: LD_VAR 0 1
64020: ARRAY
64021: PUSH
64022: LD_EXP 17
64026: PUSH
64027: LD_OWVAR 2
64031: ARRAY
64032: NONEQUAL
64033: PUSH
64034: LD_OWVAR 2
64038: PPUSH
64039: LD_VAR 0 1
64043: PPUSH
64044: CALL_OW 81
64048: PUSH
64049: LD_INT 1
64051: NONEQUAL
64052: AND
64053: OR
64054: IFFALSE 64077
// if HasPower ( i ) then
64056: LD_VAR 0 1
64060: PPUSH
64061: CALL 64136 0 1
64065: IFFALSE 64077
// begin canWin := false ;
64067: LD_ADDR_VAR 0 2
64071: PUSH
64072: LD_INT 0
64074: ST_TO_ADDR
// break ;
64075: GO 64079
// end ;
64077: GO 63961
64079: POP
64080: POP
// if canWin then
64081: LD_VAR 0 2
64085: IFFALSE 64092
// enable ( mpWin ) else
64087: LD_INT 101
64089: ENABLE_MARKED
64090: GO 64093
// enable ;
64092: ENABLE
// end ; end ;
64093: PPOPN 2
64095: END
// function CanWinLoose ; begin
64096: LD_INT 0
64098: PPUSH
// result := true ;
64099: LD_ADDR_VAR 0 1
64103: PUSH
64104: LD_INT 1
64106: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
64107: CALL_OW 531
64111: PUSH
64112: CALL_OW 519
64116: PUSH
64117: LD_INT 1
64119: GREATER
64120: AND
64121: IFFALSE 64131
// result := false ;
64123: LD_ADDR_VAR 0 1
64127: PUSH
64128: LD_INT 0
64130: ST_TO_ADDR
// end ;
64131: LD_VAR 0 1
64135: RET
// function HasPower ( i ) ; begin
64136: LD_INT 0
64138: PPUSH
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
64139: LD_ADDR_VAR 0 2
64143: PUSH
64144: LD_INT 22
64146: PUSH
64147: LD_VAR 0 1
64151: PUSH
64152: EMPTY
64153: LIST
64154: LIST
64155: PUSH
64156: LD_INT 2
64158: PUSH
64159: LD_INT 21
64161: PUSH
64162: LD_INT 1
64164: PUSH
64165: EMPTY
64166: LIST
64167: LIST
64168: PUSH
64169: LD_INT 33
64171: PUSH
64172: LD_INT 3
64174: PUSH
64175: EMPTY
64176: LIST
64177: LIST
64178: PUSH
64179: LD_INT 33
64181: PUSH
64182: LD_INT 5
64184: PUSH
64185: EMPTY
64186: LIST
64187: LIST
64188: PUSH
64189: EMPTY
64190: LIST
64191: LIST
64192: LIST
64193: LIST
64194: PUSH
64195: EMPTY
64196: LIST
64197: LIST
64198: PPUSH
64199: CALL_OW 69
64203: ST_TO_ADDR
// end ;
64204: LD_VAR 0 2
64208: RET
// export function FamineDeposits ( areas , values , type ) ; var i , j , list ; begin
64209: LD_INT 0
64211: PPUSH
64212: PPUSH
64213: PPUSH
64214: PPUSH
// if not areas or not values or not type in [ mat_oil , mat_siberit ] then
64215: LD_VAR 0 1
64219: NOT
64220: PUSH
64221: LD_VAR 0 2
64225: NOT
64226: OR
64227: PUSH
64228: LD_VAR 0 3
64232: PUSH
64233: LD_INT 2
64235: PUSH
64236: LD_INT 3
64238: PUSH
64239: EMPTY
64240: LIST
64241: LIST
64242: IN
64243: NOT
64244: OR
64245: IFFALSE 64249
// exit ;
64247: GO 64499
// for i := 1 to Count ( areas ) do
64249: LD_ADDR_VAR 0 5
64253: PUSH
64254: DOUBLE
64255: LD_INT 1
64257: DEC
64258: ST_TO_ADDR
64259: LD_VAR 0 1
64263: PPUSH
64264: CALL 23187 0 1
64268: PUSH
64269: FOR_TO
64270: IFFALSE 64497
// begin list := AreaToList ( areas [ i ] , 0 ) ;
64272: LD_ADDR_VAR 0 7
64276: PUSH
64277: LD_VAR 0 1
64281: PUSH
64282: LD_VAR 0 5
64286: ARRAY
64287: PPUSH
64288: LD_INT 0
64290: PPUSH
64291: CALL_OW 517
64295: ST_TO_ADDR
// for j := 1 to list [ 1 ] do
64296: LD_ADDR_VAR 0 6
64300: PUSH
64301: DOUBLE
64302: LD_INT 1
64304: DEC
64305: ST_TO_ADDR
64306: LD_VAR 0 7
64310: PUSH
64311: LD_INT 1
64313: ARRAY
64314: PUSH
64315: FOR_TO
64316: IFFALSE 64493
// begin CreateDepositXY ( list [ 1 ] [ j ] , list [ 2 ] [ j ] , type ) ;
64318: LD_VAR 0 7
64322: PUSH
64323: LD_INT 1
64325: ARRAY
64326: PUSH
64327: LD_VAR 0 6
64331: ARRAY
64332: PPUSH
64333: LD_VAR 0 7
64337: PUSH
64338: LD_INT 2
64340: ARRAY
64341: PUSH
64342: LD_VAR 0 6
64346: ARRAY
64347: PPUSH
64348: LD_VAR 0 3
64352: PPUSH
64353: CALL_OW 62
// if type = mat_oil then
64357: LD_VAR 0 3
64361: PUSH
64362: LD_INT 2
64364: EQUAL
64365: IFFALSE 64430
// mpGlobalOilDeposits := Join ( mpGlobalOilDeposits , [ list [ 1 ] [ j ] , list [ 2 ] [ j ] , values [ i ] ] ) else
64367: LD_ADDR_EXP 50
64371: PUSH
64372: LD_EXP 50
64376: PPUSH
64377: LD_VAR 0 7
64381: PUSH
64382: LD_INT 1
64384: ARRAY
64385: PUSH
64386: LD_VAR 0 6
64390: ARRAY
64391: PUSH
64392: LD_VAR 0 7
64396: PUSH
64397: LD_INT 2
64399: ARRAY
64400: PUSH
64401: LD_VAR 0 6
64405: ARRAY
64406: PUSH
64407: LD_VAR 0 2
64411: PUSH
64412: LD_VAR 0 5
64416: ARRAY
64417: PUSH
64418: EMPTY
64419: LIST
64420: LIST
64421: LIST
64422: PPUSH
64423: CALL 58796 0 2
64427: ST_TO_ADDR
64428: GO 64491
// mpGlobalSibDeposits := Join ( mpGlobalSibDeposits , [ list [ 1 ] [ j ] , list [ 2 ] [ j ] , values [ i ] ] ) end ;
64430: LD_ADDR_EXP 51
64434: PUSH
64435: LD_EXP 51
64439: PPUSH
64440: LD_VAR 0 7
64444: PUSH
64445: LD_INT 1
64447: ARRAY
64448: PUSH
64449: LD_VAR 0 6
64453: ARRAY
64454: PUSH
64455: LD_VAR 0 7
64459: PUSH
64460: LD_INT 2
64462: ARRAY
64463: PUSH
64464: LD_VAR 0 6
64468: ARRAY
64469: PUSH
64470: LD_VAR 0 2
64474: PUSH
64475: LD_VAR 0 5
64479: ARRAY
64480: PUSH
64481: EMPTY
64482: LIST
64483: LIST
64484: LIST
64485: PPUSH
64486: CALL 58796 0 2
64490: ST_TO_ADDR
64491: GO 64315
64493: POP
64494: POP
// end ;
64495: GO 64269
64497: POP
64498: POP
// end ; end_of_file
64499: LD_VAR 0 4
64503: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin end ;
64504: PPOPN 6
64506: END
// on MapStart ( p ) do begin if mpGameType = GameTypeCoop then
64507: LD_EXP 12
64511: PUSH
64512: LD_INT 4
64514: EQUAL
64515: IFFALSE 64551
// begin ToLua ( setGameDifficulty( & Difficulty & ) ) ;
64517: LD_STRING setGameDifficulty(
64519: PUSH
64520: LD_OWVAR 67
64524: STR
64525: PUSH
64526: LD_STRING )
64528: STR
64529: PPUSH
64530: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
64534: LD_STRING displayDifficulty(
64536: PUSH
64537: LD_OWVAR 67
64541: STR
64542: PUSH
64543: LD_STRING )
64545: STR
64546: PPUSH
64547: CALL_OW 559
// end ; SOS_MapStart ( ) ;
64551: CALL 14221 0 0
// end ;
64555: PPOPN 1
64557: END
