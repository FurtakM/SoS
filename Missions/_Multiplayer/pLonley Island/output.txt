// starting begin ResetFog ;
   0: CALL_OW 335
// InitMultiplayer ;
   4: CALL 6574 0 0
// InitMultiplayerSettings ;
   8: CALL 17 0 0
// StartMultiplayer ;
  12: CALL 6950 0 0
// end ; end_of_file
  16: END
// export function InitMultiplayerSettings ; begin
  17: LD_INT 0
  19: PPUSH
// mpGameSettingsKeys := [ 0 , 1 , 1 , 0 , 1 , 0 , 0 , 0 , 1 , 0 , 1 , 0 , 1 , 1 , 1 , 1 , 0 , 1 , 1 , 1 , 1 ] ;
  20: LD_ADDR_EXP 13
  24: PUSH
  25: LD_INT 0
  27: PUSH
  28: LD_INT 1
  30: PUSH
  31: LD_INT 1
  33: PUSH
  34: LD_INT 0
  36: PUSH
  37: LD_INT 1
  39: PUSH
  40: LD_INT 0
  42: PUSH
  43: LD_INT 0
  45: PUSH
  46: LD_INT 0
  48: PUSH
  49: LD_INT 1
  51: PUSH
  52: LD_INT 0
  54: PUSH
  55: LD_INT 1
  57: PUSH
  58: LD_INT 0
  60: PUSH
  61: LD_INT 1
  63: PUSH
  64: LD_INT 1
  66: PUSH
  67: LD_INT 1
  69: PUSH
  70: LD_INT 1
  72: PUSH
  73: LD_INT 0
  75: PUSH
  76: LD_INT 1
  78: PUSH
  79: LD_INT 1
  81: PUSH
  82: LD_INT 1
  84: PUSH
  85: LD_INT 1
  87: PUSH
  88: EMPTY
  89: LIST
  90: LIST
  91: LIST
  92: LIST
  93: LIST
  94: LIST
  95: LIST
  96: LIST
  97: LIST
  98: LIST
  99: LIST
 100: LIST
 101: LIST
 102: LIST
 103: LIST
 104: LIST
 105: LIST
 106: LIST
 107: LIST
 108: LIST
 109: LIST
 110: ST_TO_ADDR
// mpGameSettingsValues := [ [ 0 , 1 , 2 ] , [ 9 , 12 , 15 , 24 ] , [ 1 , 3 , 5 , 7 ] , [ [ 0 , 0 , 0 ] , [ 100 , 30 , 0 ] , [ 200 , 75 , 10 ] , [ 500 , 150 , 30 ] ] , [ 1 , 2 , 3 , 4 ] , [ 0 , 1 , 2 ] , [ 0 , 1 , 2 ] , [ 250 , 350 , 500 , 1000 , 2000 ] , [ 0 , 1 ] , [ 0 , 5 5$00 , 10 10$00 , 15 15$00 , 20 20$00 , 30 30$00 ] , [ 0 , 1 ] , [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] , [ 0 , 1 ] , [ 0 , 6 6$30 , 3 3$30 ] , [ 0 , 2 , 4 , 6 ] , [ 30 , 50 , 100 ] , [ ] , [ 0 , 1 , 15 15$0 , 25 25$0 , 30 30$0 , 45 45$0 , 60 60$0 , 90 90$0 , 100 100$0 , 120 120$0 , 180 180$0 ] , [ 0 , 1 ] , [ 0 , 1 ] , [ 0 , 3 3$0 , 5 5$0 , 8 8$0 , 10 10$0 , 12 12$0 , 15 15$0 , 20 20$0 , 30 30$0 ] , ] ;
 111: LD_ADDR_EXP 14
 115: PUSH
 116: LD_INT 0
 118: PUSH
 119: LD_INT 1
 121: PUSH
 122: LD_INT 2
 124: PUSH
 125: EMPTY
 126: LIST
 127: LIST
 128: LIST
 129: PUSH
 130: LD_INT 9
 132: PUSH
 133: LD_INT 12
 135: PUSH
 136: LD_INT 15
 138: PUSH
 139: LD_INT 24
 141: PUSH
 142: EMPTY
 143: LIST
 144: LIST
 145: LIST
 146: LIST
 147: PUSH
 148: LD_INT 1
 150: PUSH
 151: LD_INT 3
 153: PUSH
 154: LD_INT 5
 156: PUSH
 157: LD_INT 7
 159: PUSH
 160: EMPTY
 161: LIST
 162: LIST
 163: LIST
 164: LIST
 165: PUSH
 166: LD_INT 0
 168: PUSH
 169: LD_INT 0
 171: PUSH
 172: LD_INT 0
 174: PUSH
 175: EMPTY
 176: LIST
 177: LIST
 178: LIST
 179: PUSH
 180: LD_INT 100
 182: PUSH
 183: LD_INT 30
 185: PUSH
 186: LD_INT 0
 188: PUSH
 189: EMPTY
 190: LIST
 191: LIST
 192: LIST
 193: PUSH
 194: LD_INT 200
 196: PUSH
 197: LD_INT 75
 199: PUSH
 200: LD_INT 10
 202: PUSH
 203: EMPTY
 204: LIST
 205: LIST
 206: LIST
 207: PUSH
 208: LD_INT 500
 210: PUSH
 211: LD_INT 150
 213: PUSH
 214: LD_INT 30
 216: PUSH
 217: EMPTY
 218: LIST
 219: LIST
 220: LIST
 221: PUSH
 222: EMPTY
 223: LIST
 224: LIST
 225: LIST
 226: LIST
 227: PUSH
 228: LD_INT 1
 230: PUSH
 231: LD_INT 2
 233: PUSH
 234: LD_INT 3
 236: PUSH
 237: LD_INT 4
 239: PUSH
 240: EMPTY
 241: LIST
 242: LIST
 243: LIST
 244: LIST
 245: PUSH
 246: LD_INT 0
 248: PUSH
 249: LD_INT 1
 251: PUSH
 252: LD_INT 2
 254: PUSH
 255: EMPTY
 256: LIST
 257: LIST
 258: LIST
 259: PUSH
 260: LD_INT 0
 262: PUSH
 263: LD_INT 1
 265: PUSH
 266: LD_INT 2
 268: PUSH
 269: EMPTY
 270: LIST
 271: LIST
 272: LIST
 273: PUSH
 274: LD_INT 250
 276: PUSH
 277: LD_INT 350
 279: PUSH
 280: LD_INT 500
 282: PUSH
 283: LD_INT 1000
 285: PUSH
 286: LD_INT 2000
 288: PUSH
 289: EMPTY
 290: LIST
 291: LIST
 292: LIST
 293: LIST
 294: LIST
 295: PUSH
 296: LD_INT 0
 298: PUSH
 299: LD_INT 1
 301: PUSH
 302: EMPTY
 303: LIST
 304: LIST
 305: PUSH
 306: LD_INT 0
 308: PUSH
 309: LD_INT 10500
 311: PUSH
 312: LD_INT 21000
 314: PUSH
 315: LD_INT 31500
 317: PUSH
 318: LD_INT 42000
 320: PUSH
 321: LD_INT 63000
 323: PUSH
 324: EMPTY
 325: LIST
 326: LIST
 327: LIST
 328: LIST
 329: LIST
 330: LIST
 331: PUSH
 332: LD_INT 0
 334: PUSH
 335: LD_INT 1
 337: PUSH
 338: EMPTY
 339: LIST
 340: LIST
 341: PUSH
 342: LD_INT 1
 344: NEG
 345: PUSH
 346: LD_INT 350
 348: PUSH
 349: LD_INT 700
 351: PUSH
 352: LD_INT 1400
 354: PUSH
 355: LD_INT 0
 357: PUSH
 358: EMPTY
 359: LIST
 360: LIST
 361: LIST
 362: LIST
 363: LIST
 364: PUSH
 365: LD_INT 0
 367: PUSH
 368: LD_INT 1
 370: PUSH
 371: EMPTY
 372: LIST
 373: LIST
 374: PUSH
 375: LD_INT 0
 377: PUSH
 378: LD_INT 13650
 380: PUSH
 381: LD_INT 7350
 383: PUSH
 384: EMPTY
 385: LIST
 386: LIST
 387: LIST
 388: PUSH
 389: LD_INT 0
 391: PUSH
 392: LD_INT 2
 394: PUSH
 395: LD_INT 4
 397: PUSH
 398: LD_INT 6
 400: PUSH
 401: EMPTY
 402: LIST
 403: LIST
 404: LIST
 405: LIST
 406: PUSH
 407: LD_INT 30
 409: PUSH
 410: LD_INT 50
 412: PUSH
 413: LD_INT 100
 415: PUSH
 416: EMPTY
 417: LIST
 418: LIST
 419: LIST
 420: PUSH
 421: EMPTY
 422: PUSH
 423: LD_INT 0
 425: PUSH
 426: LD_INT 1
 428: PUSH
 429: LD_INT 31500
 431: PUSH
 432: LD_INT 52500
 434: PUSH
 435: LD_INT 63000
 437: PUSH
 438: LD_INT 94500
 440: PUSH
 441: LD_INT 126000
 443: PUSH
 444: LD_INT 189000
 446: PUSH
 447: LD_INT 210000
 449: PUSH
 450: LD_INT 252000
 452: PUSH
 453: LD_INT 378000
 455: PUSH
 456: EMPTY
 457: LIST
 458: LIST
 459: LIST
 460: LIST
 461: LIST
 462: LIST
 463: LIST
 464: LIST
 465: LIST
 466: LIST
 467: LIST
 468: PUSH
 469: LD_INT 0
 471: PUSH
 472: LD_INT 1
 474: PUSH
 475: EMPTY
 476: LIST
 477: LIST
 478: PUSH
 479: LD_INT 0
 481: PUSH
 482: LD_INT 1
 484: PUSH
 485: EMPTY
 486: LIST
 487: LIST
 488: PUSH
 489: LD_INT 0
 491: PUSH
 492: LD_INT 6300
 494: PUSH
 495: LD_INT 10500
 497: PUSH
 498: LD_INT 16800
 500: PUSH
 501: LD_INT 21000
 503: PUSH
 504: LD_INT 25200
 506: PUSH
 507: LD_INT 31500
 509: PUSH
 510: LD_INT 42000
 512: PUSH
 513: LD_INT 63000
 515: PUSH
 516: EMPTY
 517: LIST
 518: LIST
 519: LIST
 520: LIST
 521: LIST
 522: LIST
 523: LIST
 524: LIST
 525: LIST
 526: PUSH
 527: EMPTY
 528: LIST
 529: LIST
 530: LIST
 531: LIST
 532: LIST
 533: LIST
 534: LIST
 535: LIST
 536: LIST
 537: LIST
 538: LIST
 539: LIST
 540: LIST
 541: LIST
 542: LIST
 543: LIST
 544: LIST
 545: LIST
 546: LIST
 547: LIST
 548: LIST
 549: ST_TO_ADDR
// mpGameSettings := [ 0 , 15 , 4 , [ 0 , 0 , 0 ] , 3 , 0 , 0 , 0 , 1 , 0 , 1 , 0 0$20 , 1 , 0 0$20 , 3 , 30 , 0 , 15 15$0 , 1 , 1 , 0 ] ;
 550: LD_ADDR_EXP 15
 554: PUSH
 555: LD_INT 0
 557: PUSH
 558: LD_INT 15
 560: PUSH
 561: LD_INT 4
 563: PUSH
 564: LD_INT 0
 566: PUSH
 567: LD_INT 0
 569: PUSH
 570: LD_INT 0
 572: PUSH
 573: EMPTY
 574: LIST
 575: LIST
 576: LIST
 577: PUSH
 578: LD_INT 3
 580: PUSH
 581: LD_INT 0
 583: PUSH
 584: LD_INT 0
 586: PUSH
 587: LD_INT 0
 589: PUSH
 590: LD_INT 1
 592: PUSH
 593: LD_INT 0
 595: PUSH
 596: LD_INT 1
 598: PUSH
 599: LD_INT 700
 601: PUSH
 602: LD_INT 1
 604: PUSH
 605: LD_INT 700
 607: PUSH
 608: LD_INT 3
 610: PUSH
 611: LD_INT 30
 613: PUSH
 614: LD_INT 0
 616: PUSH
 617: LD_INT 31500
 619: PUSH
 620: LD_INT 1
 622: PUSH
 623: LD_INT 1
 625: PUSH
 626: LD_INT 0
 628: PUSH
 629: EMPTY
 630: LIST
 631: LIST
 632: LIST
 633: LIST
 634: LIST
 635: LIST
 636: LIST
 637: LIST
 638: LIST
 639: LIST
 640: LIST
 641: LIST
 642: LIST
 643: LIST
 644: LIST
 645: LIST
 646: LIST
 647: LIST
 648: LIST
 649: LIST
 650: LIST
 651: ST_TO_ADDR
// mpGameType := GameTypeFamine ;
 652: LD_ADDR_EXP 12
 656: PUSH
 657: LD_INT 5
 659: ST_TO_ADDR
// your_side := 1 ;
 660: LD_ADDR_OWVAR 2
 664: PUSH
 665: LD_INT 1
 667: ST_TO_ADDR
// mpSidePositions := [ 1 , 2 , 0 , 0 , 0 , 6 , 7 , 0 ] ;
 668: LD_ADDR_EXP 16
 672: PUSH
 673: LD_INT 1
 675: PUSH
 676: LD_INT 2
 678: PUSH
 679: LD_INT 0
 681: PUSH
 682: LD_INT 0
 684: PUSH
 685: LD_INT 0
 687: PUSH
 688: LD_INT 6
 690: PUSH
 691: LD_INT 7
 693: PUSH
 694: LD_INT 0
 696: PUSH
 697: EMPTY
 698: LIST
 699: LIST
 700: LIST
 701: LIST
 702: LIST
 703: LIST
 704: LIST
 705: LIST
 706: ST_TO_ADDR
// mpSideTeams := [ 1 , 2 , 0 , 0 , 0 , 2 , 2 , 0 ] ;
 707: LD_ADDR_EXP 17
 711: PUSH
 712: LD_INT 1
 714: PUSH
 715: LD_INT 2
 717: PUSH
 718: LD_INT 0
 720: PUSH
 721: LD_INT 0
 723: PUSH
 724: LD_INT 0
 726: PUSH
 727: LD_INT 2
 729: PUSH
 730: LD_INT 2
 732: PUSH
 733: LD_INT 0
 735: PUSH
 736: EMPTY
 737: LIST
 738: LIST
 739: LIST
 740: LIST
 741: LIST
 742: LIST
 743: LIST
 744: LIST
 745: ST_TO_ADDR
// mpSideNations := [ 1 , 2 , 0 , 0 , 0 , 3 , 1 , 0 ] ;
 746: LD_ADDR_EXP 18
 750: PUSH
 751: LD_INT 1
 753: PUSH
 754: LD_INT 2
 756: PUSH
 757: LD_INT 0
 759: PUSH
 760: LD_INT 0
 762: PUSH
 763: LD_INT 0
 765: PUSH
 766: LD_INT 3
 768: PUSH
 769: LD_INT 1
 771: PUSH
 772: LD_INT 0
 774: PUSH
 775: EMPTY
 776: LIST
 777: LIST
 778: LIST
 779: LIST
 780: LIST
 781: LIST
 782: LIST
 783: LIST
 784: ST_TO_ADDR
// mpTeams := [ [ 1 , 2 ] , [ 6 , 7 ] ] ;
 785: LD_ADDR_EXP 19
 789: PUSH
 790: LD_INT 1
 792: PUSH
 793: LD_INT 2
 795: PUSH
 796: EMPTY
 797: LIST
 798: LIST
 799: PUSH
 800: LD_INT 6
 802: PUSH
 803: LD_INT 7
 805: PUSH
 806: EMPTY
 807: LIST
 808: LIST
 809: PUSH
 810: EMPTY
 811: LIST
 812: LIST
 813: ST_TO_ADDR
// mpTeamGame := false ;
 814: LD_ADDR_EXP 20
 818: PUSH
 819: LD_INT 0
 821: ST_TO_ADDR
// mpMapSize := [ 240 , 270 ] ;
 822: LD_ADDR_EXP 38
 826: PUSH
 827: LD_INT 240
 829: PUSH
 830: LD_INT 270
 832: PUSH
 833: EMPTY
 834: LIST
 835: LIST
 836: ST_TO_ADDR
// end ;
 837: LD_VAR 0 1
 841: RET
// export BuildUpEscape , kingCamArea ; export function GetMultiplayerMapData ( gameType ) ; var i , t , all , depositsValue , startPos ; begin
 842: LD_INT 0
 844: PPUSH
 845: PPUSH
 846: PPUSH
 847: PPUSH
 848: PPUSH
 849: PPUSH
// BuildUpEscape := 0 ;
 850: LD_ADDR_EXP 1
 854: PUSH
 855: LD_INT 0
 857: ST_TO_ADDR
// kingCamArea := 0 ;
 858: LD_ADDR_EXP 2
 862: PUSH
 863: LD_INT 0
 865: ST_TO_ADDR
// mpPeopleAmount := mpGameSettings [ 2 ] ;
 866: LD_ADDR_EXP 33
 870: PUSH
 871: LD_EXP 15
 875: PUSH
 876: LD_INT 2
 878: ARRAY
 879: ST_TO_ADDR
// mpPeopleSkill := mpGameSettings [ 3 ] ;
 880: LD_ADDR_EXP 34
 884: PUSH
 885: LD_EXP 15
 889: PUSH
 890: LD_INT 3
 892: ARRAY
 893: ST_TO_ADDR
// mpShipments := mpGameSettings [ 5 ] ;
 894: LD_ADDR_EXP 36
 898: PUSH
 899: LD_EXP 15
 903: PUSH
 904: LD_INT 5
 906: ARRAY
 907: ST_TO_ADDR
// if mpGameSettings [ 9 ] then
 908: LD_EXP 15
 912: PUSH
 913: LD_INT 9
 915: ARRAY
 916: IFFALSE 1105
// begin mpVehicles := [ [ [ us_light_wheeled , engine_combustion , control_manual , us_machine_gun ] , [ us_light_wheeled , engine_combustion , control_manual , us_light_gun ] , [ us_medium_wheeled , engine_combustion , control_manual , us_cargo_bay ] ] , [ [ ar_light_trike , engine_combustion , control_manual , ar_double_machine_gun ] , [ ar_light_trike , engine_combustion , control_manual , ar_light_gun ] , [ ar_medium_trike , engine_combustion , control_manual , ar_cargo_bay ] ] , [ [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun ] , [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun ] , [ ru_medium_wheeled , engine_combustion , control_manual , ru_cargo_bay ] ] ] ;
 918: LD_ADDR_EXP 45
 922: PUSH
 923: LD_INT 1
 925: PUSH
 926: LD_INT 1
 928: PUSH
 929: LD_INT 1
 931: PUSH
 932: LD_INT 2
 934: PUSH
 935: EMPTY
 936: LIST
 937: LIST
 938: LIST
 939: LIST
 940: PUSH
 941: LD_INT 1
 943: PUSH
 944: LD_INT 1
 946: PUSH
 947: LD_INT 1
 949: PUSH
 950: LD_INT 3
 952: PUSH
 953: EMPTY
 954: LIST
 955: LIST
 956: LIST
 957: LIST
 958: PUSH
 959: LD_INT 2
 961: PUSH
 962: LD_INT 1
 964: PUSH
 965: LD_INT 1
 967: PUSH
 968: LD_INT 12
 970: PUSH
 971: EMPTY
 972: LIST
 973: LIST
 974: LIST
 975: LIST
 976: PUSH
 977: EMPTY
 978: LIST
 979: LIST
 980: LIST
 981: PUSH
 982: LD_INT 12
 984: PUSH
 985: LD_INT 1
 987: PUSH
 988: LD_INT 1
 990: PUSH
 991: LD_INT 24
 993: PUSH
 994: EMPTY
 995: LIST
 996: LIST
 997: LIST
 998: LIST
 999: PUSH
1000: LD_INT 12
1002: PUSH
1003: LD_INT 1
1005: PUSH
1006: LD_INT 1
1008: PUSH
1009: LD_INT 23
1011: PUSH
1012: EMPTY
1013: LIST
1014: LIST
1015: LIST
1016: LIST
1017: PUSH
1018: LD_INT 13
1020: PUSH
1021: LD_INT 1
1023: PUSH
1024: LD_INT 1
1026: PUSH
1027: LD_INT 32
1029: PUSH
1030: EMPTY
1031: LIST
1032: LIST
1033: LIST
1034: LIST
1035: PUSH
1036: EMPTY
1037: LIST
1038: LIST
1039: LIST
1040: PUSH
1041: LD_INT 21
1043: PUSH
1044: LD_INT 1
1046: PUSH
1047: LD_INT 1
1049: PUSH
1050: LD_INT 42
1052: PUSH
1053: EMPTY
1054: LIST
1055: LIST
1056: LIST
1057: LIST
1058: PUSH
1059: LD_INT 21
1061: PUSH
1062: LD_INT 1
1064: PUSH
1065: LD_INT 1
1067: PUSH
1068: LD_INT 42
1070: PUSH
1071: EMPTY
1072: LIST
1073: LIST
1074: LIST
1075: LIST
1076: PUSH
1077: LD_INT 21
1079: PUSH
1080: LD_INT 1
1082: PUSH
1083: LD_INT 1
1085: PUSH
1086: LD_INT 51
1088: PUSH
1089: EMPTY
1090: LIST
1091: LIST
1092: LIST
1093: LIST
1094: PUSH
1095: EMPTY
1096: LIST
1097: LIST
1098: LIST
1099: PUSH
1100: EMPTY
1101: LIST
1102: LIST
1103: LIST
1104: ST_TO_ADDR
// end ; mpSharedVision := mpGameSettings [ 11 ] ;
1105: LD_ADDR_EXP 25
1109: PUSH
1110: LD_EXP 15
1114: PUSH
1115: LD_INT 11
1117: ARRAY
1118: ST_TO_ADDR
// mpSibDetection := mpGameSettings [ 13 ] ;
1119: LD_ADDR_EXP 35
1123: PUSH
1124: LD_EXP 15
1128: PUSH
1129: LD_INT 13
1131: ARRAY
1132: ST_TO_ADDR
// mpRespawn := mpGameSettings [ 14 ] ;
1133: LD_ADDR_EXP 42
1137: PUSH
1138: LD_EXP 15
1142: PUSH
1143: LD_INT 14
1145: ARRAY
1146: ST_TO_ADDR
// mpApemans := mpGameSettings [ 15 ] ;
1147: LD_ADDR_EXP 39
1151: PUSH
1152: LD_EXP 15
1156: PUSH
1157: LD_INT 15
1159: ARRAY
1160: ST_TO_ADDR
// depositsValue := mpGameSettings [ 16 ] ;
1161: LD_ADDR_VAR 0 6
1165: PUSH
1166: LD_EXP 15
1170: PUSH
1171: LD_INT 16
1173: ARRAY
1174: ST_TO_ADDR
// mpSibBomb := mpGameSettings [ 18 ] ;
1175: LD_ADDR_EXP 37
1179: PUSH
1180: LD_EXP 15
1184: PUSH
1185: LD_INT 18
1187: ARRAY
1188: ST_TO_ADDR
// mpArtifacts := mpGameSettings [ 19 ] ;
1189: LD_ADDR_EXP 53
1193: PUSH
1194: LD_EXP 15
1198: PUSH
1199: LD_INT 19
1201: ARRAY
1202: ST_TO_ADDR
// mpTeleports := mpGameSettings [ 20 ] ;
1203: LD_ADDR_EXP 52
1207: PUSH
1208: LD_EXP 15
1212: PUSH
1213: LD_INT 20
1215: ARRAY
1216: ST_TO_ADDR
// mpApemansArea := [ Base1ApeArea , Base2ApeArea , Base3ApeArea , Base4ApeArea , Base5ApeArea , Base6ApeArea , Base7ApeArea , Base8ApeArea ] ;
1217: LD_ADDR_EXP 40
1221: PUSH
1222: LD_INT 7
1224: PUSH
1225: LD_INT 8
1227: PUSH
1228: LD_INT 9
1230: PUSH
1231: LD_INT 10
1233: PUSH
1234: LD_INT 11
1236: PUSH
1237: LD_INT 12
1239: PUSH
1240: LD_INT 13
1242: PUSH
1243: LD_INT 14
1245: PUSH
1246: EMPTY
1247: LIST
1248: LIST
1249: LIST
1250: LIST
1251: LIST
1252: LIST
1253: LIST
1254: LIST
1255: ST_TO_ADDR
// startPos := [ GetBuildingFromArea ( depotArea1 , 0 ) , GetBuildingFromArea ( depotArea2 , 1 ) , GetBuildingFromArea ( depotArea3 , 1 ) , GetBuildingFromArea ( depotArea4 , 2 ) , GetBuildingFromArea ( depotArea5 , 3 ) , GetBuildingFromArea ( depotArea6 , 4 ) , GetBuildingFromArea ( depotArea7 , 4 ) , GetBuildingFromArea ( depotArea8 , 5 ) ] ;
1256: LD_ADDR_VAR 0 7
1260: PUSH
1261: LD_INT 15
1263: PPUSH
1264: LD_INT 0
1266: PPUSH
1267: CALL 64573 0 2
1271: PUSH
1272: LD_INT 16
1274: PPUSH
1275: LD_INT 1
1277: PPUSH
1278: CALL 64573 0 2
1282: PUSH
1283: LD_INT 17
1285: PPUSH
1286: LD_INT 1
1288: PPUSH
1289: CALL 64573 0 2
1293: PUSH
1294: LD_INT 18
1296: PPUSH
1297: LD_INT 2
1299: PPUSH
1300: CALL 64573 0 2
1304: PUSH
1305: LD_INT 19
1307: PPUSH
1308: LD_INT 3
1310: PPUSH
1311: CALL 64573 0 2
1315: PUSH
1316: LD_INT 20
1318: PPUSH
1319: LD_INT 4
1321: PPUSH
1322: CALL 64573 0 2
1326: PUSH
1327: LD_INT 21
1329: PPUSH
1330: LD_INT 4
1332: PPUSH
1333: CALL 64573 0 2
1337: PUSH
1338: LD_INT 22
1340: PPUSH
1341: LD_INT 5
1343: PPUSH
1344: CALL 64573 0 2
1348: PUSH
1349: EMPTY
1350: LIST
1351: LIST
1352: LIST
1353: LIST
1354: LIST
1355: LIST
1356: LIST
1357: LIST
1358: ST_TO_ADDR
// for i := 1 to Count ( startPos ) do
1359: LD_ADDR_VAR 0 3
1363: PUSH
1364: DOUBLE
1365: LD_INT 1
1367: DEC
1368: ST_TO_ADDR
1369: LD_VAR 0 7
1373: PPUSH
1374: CALL 23922 0 1
1378: PUSH
1379: FOR_TO
1380: IFFALSE 1484
// mpStartPos := Replace ( mpStartPos , i , [ ShiftX ( startPos [ i ] [ 1 ] , startPos [ i ] [ 3 ] , 10 ) , ShiftY ( startPos [ i ] [ 2 ] , startPos [ i ] [ 3 ] , 10 ) ] ) ;
1382: LD_ADDR_EXP 30
1386: PUSH
1387: LD_EXP 30
1391: PPUSH
1392: LD_VAR 0 3
1396: PPUSH
1397: LD_VAR 0 7
1401: PUSH
1402: LD_VAR 0 3
1406: ARRAY
1407: PUSH
1408: LD_INT 1
1410: ARRAY
1411: PPUSH
1412: LD_VAR 0 7
1416: PUSH
1417: LD_VAR 0 3
1421: ARRAY
1422: PUSH
1423: LD_INT 3
1425: ARRAY
1426: PPUSH
1427: LD_INT 10
1429: PPUSH
1430: CALL_OW 272
1434: PUSH
1435: LD_VAR 0 7
1439: PUSH
1440: LD_VAR 0 3
1444: ARRAY
1445: PUSH
1446: LD_INT 2
1448: ARRAY
1449: PPUSH
1450: LD_VAR 0 7
1454: PUSH
1455: LD_VAR 0 3
1459: ARRAY
1460: PUSH
1461: LD_INT 3
1463: ARRAY
1464: PPUSH
1465: LD_INT 10
1467: PPUSH
1468: CALL_OW 273
1472: PUSH
1473: EMPTY
1474: LIST
1475: LIST
1476: PPUSH
1477: CALL_OW 1
1481: ST_TO_ADDR
1482: GO 1379
1484: POP
1485: POP
// if mpGameType = GameTypeFamine then
1486: LD_EXP 12
1490: PUSH
1491: LD_INT 5
1493: EQUAL
1494: IFFALSE 1604
// begin FamineDeposits ( [ oilBasicArea , oilMediumArea , oilHardArea ] , [ 3 * depositsValue , 5 * depositsValue , 15 * depositsValue ] , mat_oil ) ;
1496: LD_INT 44
1498: PUSH
1499: LD_INT 46
1501: PUSH
1502: LD_INT 48
1504: PUSH
1505: EMPTY
1506: LIST
1507: LIST
1508: LIST
1509: PPUSH
1510: LD_INT 3
1512: PUSH
1513: LD_VAR 0 6
1517: MUL
1518: PUSH
1519: LD_INT 5
1521: PUSH
1522: LD_VAR 0 6
1526: MUL
1527: PUSH
1528: LD_INT 15
1530: PUSH
1531: LD_VAR 0 6
1535: MUL
1536: PUSH
1537: EMPTY
1538: LIST
1539: LIST
1540: LIST
1541: PPUSH
1542: LD_INT 2
1544: PPUSH
1545: CALL 65545 0 3
// FamineDeposits ( [ sibBasicArea , sibMediumArea , sibHardArea ] , [ 1 * depositsValue , 2.5 * depositsValue , 7.5 * depositsValue ] , mat_siberit ) ;
1549: LD_INT 45
1551: PUSH
1552: LD_INT 47
1554: PUSH
1555: LD_INT 49
1557: PUSH
1558: EMPTY
1559: LIST
1560: LIST
1561: LIST
1562: PPUSH
1563: LD_INT 1
1565: PUSH
1566: LD_VAR 0 6
1570: MUL
1571: PUSH
1572: LD_REAL  2.50000000000000E+0000
1575: PUSH
1576: LD_VAR 0 6
1580: MUL
1581: PUSH
1582: LD_REAL  7.50000000000000E+0000
1585: PUSH
1586: LD_VAR 0 6
1590: MUL
1591: PUSH
1592: EMPTY
1593: LIST
1594: LIST
1595: LIST
1596: PPUSH
1597: LD_INT 3
1599: PPUSH
1600: CALL 65545 0 3
// end ; if mpArtifacts then
1604: LD_EXP 53
1608: IFFALSE 1614
// InitArtifact ;
1610: CALL 2806 0 0
// for i := 1 to 8 do
1614: LD_ADDR_VAR 0 3
1618: PUSH
1619: DOUBLE
1620: LD_INT 1
1622: DEC
1623: ST_TO_ADDR
1624: LD_INT 8
1626: PUSH
1627: FOR_TO
1628: IFFALSE 1671
// for t in [ tech_SolEng , tech_SolPow ] do
1630: LD_ADDR_VAR 0 4
1634: PUSH
1635: LD_INT 45
1637: PUSH
1638: LD_INT 35
1640: PUSH
1641: EMPTY
1642: LIST
1643: LIST
1644: PUSH
1645: FOR_IN
1646: IFFALSE 1667
// SetTech ( t , i , state_disabled ) ;
1648: LD_VAR 0 4
1652: PPUSH
1653: LD_VAR 0 3
1657: PPUSH
1658: LD_INT 0
1660: PPUSH
1661: CALL_OW 322
1665: GO 1645
1667: POP
1668: POP
1669: GO 1627
1671: POP
1672: POP
// end ;
1673: LD_VAR 0 2
1677: RET
// every 0 0$2 marked mpActive do var i , j , x , phase , additionalSpawnPhase , f , tmp , areas , areasPhase , time , normalTime , delayTime , maxTime ;
1678: GO 1680
1680: DISABLE
1681: LD_INT 0
1683: PPUSH
1684: PPUSH
1685: PPUSH
1686: PPUSH
1687: PPUSH
1688: PPUSH
1689: PPUSH
1690: PPUSH
1691: PPUSH
1692: PPUSH
1693: PPUSH
1694: PPUSH
1695: PPUSH
// begin if not mpShipments then
1696: LD_EXP 36
1700: NOT
1701: IFFALSE 1705
// exit ;
1703: GO 2464
// case mpShipments of 1 :
1705: LD_EXP 36
1709: PUSH
1710: LD_INT 1
1712: DOUBLE
1713: EQUAL
1714: IFTRUE 1718
1716: GO 1761
1718: POP
// begin time := 0 0$30 ;
1719: LD_ADDR_VAR 0 10
1723: PUSH
1724: LD_INT 1050
1726: ST_TO_ADDR
// normalTime := 0 0$30 ;
1727: LD_ADDR_VAR 0 11
1731: PUSH
1732: LD_INT 1050
1734: ST_TO_ADDR
// maxTime := 1 1$20 ;
1735: LD_ADDR_VAR 0 13
1739: PUSH
1740: LD_INT 2800
1742: ST_TO_ADDR
// delayTime := 0 0$5 ;
1743: LD_ADDR_VAR 0 12
1747: PUSH
1748: LD_INT 175
1750: ST_TO_ADDR
// additionalSpawnPhase := 10 ;
1751: LD_ADDR_VAR 0 5
1755: PUSH
1756: LD_INT 10
1758: ST_TO_ADDR
// end ; 2 :
1759: GO 1915
1761: LD_INT 2
1763: DOUBLE
1764: EQUAL
1765: IFTRUE 1769
1767: GO 1812
1769: POP
// begin time := 0 0$25 ;
1770: LD_ADDR_VAR 0 10
1774: PUSH
1775: LD_INT 875
1777: ST_TO_ADDR
// normalTime := 0 0$25 ;
1778: LD_ADDR_VAR 0 11
1782: PUSH
1783: LD_INT 875
1785: ST_TO_ADDR
// maxTime := 1 1$10 ;
1786: LD_ADDR_VAR 0 13
1790: PUSH
1791: LD_INT 2450
1793: ST_TO_ADDR
// delayTime := 0 0$4 ;
1794: LD_ADDR_VAR 0 12
1798: PUSH
1799: LD_INT 140
1801: ST_TO_ADDR
// additionalSpawnPhase := 8 ;
1802: LD_ADDR_VAR 0 5
1806: PUSH
1807: LD_INT 8
1809: ST_TO_ADDR
// end ; 3 :
1810: GO 1915
1812: LD_INT 3
1814: DOUBLE
1815: EQUAL
1816: IFTRUE 1820
1818: GO 1863
1820: POP
// begin time := 0 0$20 ;
1821: LD_ADDR_VAR 0 10
1825: PUSH
1826: LD_INT 700
1828: ST_TO_ADDR
// normalTime := 0 0$20 ;
1829: LD_ADDR_VAR 0 11
1833: PUSH
1834: LD_INT 700
1836: ST_TO_ADDR
// maxTime := 1 1$00 ;
1837: LD_ADDR_VAR 0 13
1841: PUSH
1842: LD_INT 2100
1844: ST_TO_ADDR
// delayTime := 0 0$3 ;
1845: LD_ADDR_VAR 0 12
1849: PUSH
1850: LD_INT 105
1852: ST_TO_ADDR
// additionalSpawnPhase := 6 ;
1853: LD_ADDR_VAR 0 5
1857: PUSH
1858: LD_INT 6
1860: ST_TO_ADDR
// end ; 4 :
1861: GO 1915
1863: LD_INT 4
1865: DOUBLE
1866: EQUAL
1867: IFTRUE 1871
1869: GO 1914
1871: POP
// begin time := 0 0$15 ;
1872: LD_ADDR_VAR 0 10
1876: PUSH
1877: LD_INT 525
1879: ST_TO_ADDR
// normalTime := 0 0$15 ;
1880: LD_ADDR_VAR 0 11
1884: PUSH
1885: LD_INT 525
1887: ST_TO_ADDR
// maxTime := 0 0$55 ;
1888: LD_ADDR_VAR 0 13
1892: PUSH
1893: LD_INT 1925
1895: ST_TO_ADDR
// delayTime := 0 0$2 ;
1896: LD_ADDR_VAR 0 12
1900: PUSH
1901: LD_INT 70
1903: ST_TO_ADDR
// additionalSpawnPhase := 5 ;
1904: LD_ADDR_VAR 0 5
1908: PUSH
1909: LD_INT 5
1911: ST_TO_ADDR
// end ; end ;
1912: GO 1915
1914: POP
// areas := [ IslandArea1 , IslandArea2 ] ;
1915: LD_ADDR_VAR 0 8
1919: PUSH
1920: LD_INT 23
1922: PUSH
1923: LD_INT 24
1925: PUSH
1926: EMPTY
1927: LIST
1928: LIST
1929: ST_TO_ADDR
// areasPhase := [ [ ] , [ ] ] ;
1930: LD_ADDR_VAR 0 9
1934: PUSH
1935: EMPTY
1936: PUSH
1937: EMPTY
1938: PUSH
1939: EMPTY
1940: LIST
1941: LIST
1942: ST_TO_ADDR
// tmp := [ [ CR1Phase1 , CR2Phase1 , CR3Phase1 , CR4Phase1 , CR5Phase1 , CR6Phase1 , CR7Phase1 , CR8Phase1 ] , [ CR1Phase2 , CR2Phase2 , CR3Phase2 , CR4Phase2 , CR5Phase2 , CR6Phase2 , CR7Phase2 , CR8Phase2 ] ] ;
1943: LD_ADDR_VAR 0 7
1947: PUSH
1948: LD_INT 28
1950: PUSH
1951: LD_INT 29
1953: PUSH
1954: LD_INT 30
1956: PUSH
1957: LD_INT 31
1959: PUSH
1960: LD_INT 32
1962: PUSH
1963: LD_INT 33
1965: PUSH
1966: LD_INT 34
1968: PUSH
1969: LD_INT 35
1971: PUSH
1972: EMPTY
1973: LIST
1974: LIST
1975: LIST
1976: LIST
1977: LIST
1978: LIST
1979: LIST
1980: LIST
1981: PUSH
1982: LD_INT 36
1984: PUSH
1985: LD_INT 37
1987: PUSH
1988: LD_INT 38
1990: PUSH
1991: LD_INT 39
1993: PUSH
1994: LD_INT 40
1996: PUSH
1997: LD_INT 41
1999: PUSH
2000: LD_INT 42
2002: PUSH
2003: LD_INT 43
2005: PUSH
2006: EMPTY
2007: LIST
2008: LIST
2009: LIST
2010: LIST
2011: LIST
2012: LIST
2013: LIST
2014: LIST
2015: PUSH
2016: EMPTY
2017: LIST
2018: LIST
2019: ST_TO_ADDR
// for i := 1 to 8 do
2020: LD_ADDR_VAR 0 1
2024: PUSH
2025: DOUBLE
2026: LD_INT 1
2028: DEC
2029: ST_TO_ADDR
2030: LD_INT 8
2032: PUSH
2033: FOR_TO
2034: IFFALSE 2147
// begin if not mpSidePositions [ i ] then
2036: LD_EXP 16
2040: PUSH
2041: LD_VAR 0 1
2045: ARRAY
2046: NOT
2047: IFFALSE 2051
// continue ;
2049: GO 2033
// for j := 1 to 2 do
2051: LD_ADDR_VAR 0 2
2055: PUSH
2056: DOUBLE
2057: LD_INT 1
2059: DEC
2060: ST_TO_ADDR
2061: LD_INT 2
2063: PUSH
2064: FOR_TO
2065: IFFALSE 2143
// areasPhase := Replace ( areasPhase , j , Replace ( areasPhase [ j ] , areasPhase [ j ] + 1 , tmp [ j ] [ mpSidePositions [ i ] ] ) ) ;
2067: LD_ADDR_VAR 0 9
2071: PUSH
2072: LD_VAR 0 9
2076: PPUSH
2077: LD_VAR 0 2
2081: PPUSH
2082: LD_VAR 0 9
2086: PUSH
2087: LD_VAR 0 2
2091: ARRAY
2092: PPUSH
2093: LD_VAR 0 9
2097: PUSH
2098: LD_VAR 0 2
2102: ARRAY
2103: PUSH
2104: LD_INT 1
2106: PLUS
2107: PPUSH
2108: LD_VAR 0 7
2112: PUSH
2113: LD_VAR 0 2
2117: ARRAY
2118: PUSH
2119: LD_EXP 16
2123: PUSH
2124: LD_VAR 0 1
2128: ARRAY
2129: ARRAY
2130: PPUSH
2131: CALL_OW 1
2135: PPUSH
2136: CALL_OW 1
2140: ST_TO_ADDR
2141: GO 2064
2143: POP
2144: POP
// end ;
2145: GO 2033
2147: POP
2148: POP
// x := 1 ;
2149: LD_ADDR_VAR 0 3
2153: PUSH
2154: LD_INT 1
2156: ST_TO_ADDR
// phase := 1 ;
2157: LD_ADDR_VAR 0 4
2161: PUSH
2162: LD_INT 1
2164: ST_TO_ADDR
// repeat wait ( time ) ;
2165: LD_VAR 0 10
2169: PPUSH
2170: CALL_OW 67
// x := Inc ( x ) ;
2174: LD_ADDR_VAR 0 3
2178: PUSH
2179: LD_VAR 0 3
2183: PPUSH
2184: CALL 61227 0 1
2188: ST_TO_ADDR
// f := Inc ( f ) ;
2189: LD_ADDR_VAR 0 6
2193: PUSH
2194: LD_VAR 0 6
2198: PPUSH
2199: CALL 61227 0 1
2203: ST_TO_ADDR
// if x > 5 then
2204: LD_VAR 0 3
2208: PUSH
2209: LD_INT 5
2211: GREATER
2212: IFFALSE 2222
// x := 1 ;
2214: LD_ADDR_VAR 0 3
2218: PUSH
2219: LD_INT 1
2221: ST_TO_ADDR
// if f mod 20 = 0 then
2222: LD_VAR 0 6
2226: PUSH
2227: LD_INT 20
2229: MOD
2230: PUSH
2231: LD_INT 0
2233: EQUAL
2234: IFFALSE 2251
// phase := Inc ( phase ) ;
2236: LD_ADDR_VAR 0 4
2240: PUSH
2241: LD_VAR 0 4
2245: PPUSH
2246: CALL 61227 0 1
2250: ST_TO_ADDR
// if f mod additionalSpawnPhase = 0 then
2251: LD_VAR 0 6
2255: PUSH
2256: LD_VAR 0 5
2260: MOD
2261: PUSH
2262: LD_INT 0
2264: EQUAL
2265: IFFALSE 2282
// CreateCratesArea ( x , worldCratesArea , true ) ;
2267: LD_VAR 0 3
2271: PPUSH
2272: LD_INT 61
2274: PPUSH
2275: LD_INT 1
2277: PPUSH
2278: CALL_OW 55
// if phase > 2 then
2282: LD_VAR 0 4
2286: PUSH
2287: LD_INT 2
2289: GREATER
2290: IFFALSE 2300
// phase := 1 ;
2292: LD_ADDR_VAR 0 4
2296: PUSH
2297: LD_INT 1
2299: ST_TO_ADDR
// for i in areas do
2300: LD_ADDR_VAR 0 1
2304: PUSH
2305: LD_VAR 0 8
2309: PUSH
2310: FOR_IN
2311: IFFALSE 2362
// begin if GetResourceArea ( i , mat_cans ) < 15 and phase = 2 then
2313: LD_VAR 0 1
2317: PPUSH
2318: LD_INT 1
2320: PPUSH
2321: CALL_OW 287
2325: PUSH
2326: LD_INT 15
2328: LESS
2329: IFFALSE 2341
2331: PUSH
2332: LD_VAR 0 4
2336: PUSH
2337: LD_INT 2
2339: EQUAL
2340: AND
2341: IFFALSE 2360
// begin CreateCratesArea ( x , i , true ) ;
2343: LD_VAR 0 3
2347: PPUSH
2348: LD_VAR 0 1
2352: PPUSH
2353: LD_INT 1
2355: PPUSH
2356: CALL_OW 55
// end ; end ;
2360: GO 2310
2362: POP
2363: POP
// for i in areasPhase [ phase ] do
2364: LD_ADDR_VAR 0 1
2368: PUSH
2369: LD_VAR 0 9
2373: PUSH
2374: LD_VAR 0 4
2378: ARRAY
2379: PUSH
2380: FOR_IN
2381: IFFALSE 2420
// begin if GetResourceArea ( i , mat_cans ) < 25 then
2383: LD_VAR 0 1
2387: PPUSH
2388: LD_INT 1
2390: PPUSH
2391: CALL_OW 287
2395: PUSH
2396: LD_INT 25
2398: LESS
2399: IFFALSE 2418
// begin CreateCratesArea ( x , i , true ) ;
2401: LD_VAR 0 3
2405: PPUSH
2406: LD_VAR 0 1
2410: PPUSH
2411: LD_INT 1
2413: PPUSH
2414: CALL_OW 55
// end ; end ;
2418: GO 2380
2420: POP
2421: POP
// time := time + delayTime ;
2422: LD_ADDR_VAR 0 10
2426: PUSH
2427: LD_VAR 0 10
2431: PUSH
2432: LD_VAR 0 12
2436: PLUS
2437: ST_TO_ADDR
// if time > maxTime then
2438: LD_VAR 0 10
2442: PUSH
2443: LD_VAR 0 13
2447: GREATER
2448: IFFALSE 2460
// time := normalTime ;
2450: LD_ADDR_VAR 0 10
2454: PUSH
2455: LD_VAR 0 11
2459: ST_TO_ADDR
// until false ;
2460: LD_INT 0
2462: IFFALSE 2165
// end ;
2464: PPOPN 13
2466: END
// every 0 0$2 trigger mpTeleports do var i , tmp ;
2467: LD_EXP 52
2471: IFFALSE 2665
2473: GO 2475
2475: DISABLE
2476: LD_INT 0
2478: PPUSH
2479: PPUSH
// begin enable ;
2480: ENABLE
// tmp := [ [ T1TeleportArea , T4TeleportExitArea ] , [ T2TeleportArea , T3TeleportExitArea ] , [ T3TeleportArea , T2TeleportExitArea ] , [ T4TeleportArea , T1TeleportExitArea ] , [ T5TeleportArea , T6TeleportExitArea ] , [ T6TeleportArea , T5TeleportExitArea ] , [ T7TeleportArea , IslandArea1 ] , [ T8TeleportArea , IslandArea1 ] , [ T9TeleportArea , IslandArea1 ] , [ T10TeleportArea , IslandArea1 ] ] ;
2481: LD_ADDR_VAR 0 2
2485: PUSH
2486: LD_INT 1
2488: PUSH
2489: LD_INT 53
2491: PUSH
2492: EMPTY
2493: LIST
2494: LIST
2495: PUSH
2496: LD_INT 2
2498: PUSH
2499: LD_INT 52
2501: PUSH
2502: EMPTY
2503: LIST
2504: LIST
2505: PUSH
2506: LD_INT 3
2508: PUSH
2509: LD_INT 51
2511: PUSH
2512: EMPTY
2513: LIST
2514: LIST
2515: PUSH
2516: LD_INT 4
2518: PUSH
2519: LD_INT 50
2521: PUSH
2522: EMPTY
2523: LIST
2524: LIST
2525: PUSH
2526: LD_INT 5
2528: PUSH
2529: LD_INT 55
2531: PUSH
2532: EMPTY
2533: LIST
2534: LIST
2535: PUSH
2536: LD_INT 6
2538: PUSH
2539: LD_INT 54
2541: PUSH
2542: EMPTY
2543: LIST
2544: LIST
2545: PUSH
2546: LD_INT 57
2548: PUSH
2549: LD_INT 23
2551: PUSH
2552: EMPTY
2553: LIST
2554: LIST
2555: PUSH
2556: LD_INT 58
2558: PUSH
2559: LD_INT 23
2561: PUSH
2562: EMPTY
2563: LIST
2564: LIST
2565: PUSH
2566: LD_INT 59
2568: PUSH
2569: LD_INT 23
2571: PUSH
2572: EMPTY
2573: LIST
2574: LIST
2575: PUSH
2576: LD_INT 60
2578: PUSH
2579: LD_INT 23
2581: PUSH
2582: EMPTY
2583: LIST
2584: LIST
2585: PUSH
2586: EMPTY
2587: LIST
2588: LIST
2589: LIST
2590: LIST
2591: LIST
2592: LIST
2593: LIST
2594: LIST
2595: LIST
2596: LIST
2597: ST_TO_ADDR
// for i in tmp do
2598: LD_ADDR_VAR 0 1
2602: PUSH
2603: LD_VAR 0 2
2607: PUSH
2608: FOR_IN
2609: IFFALSE 2663
// CheckBuildUpArea ( i [ 1 ] , i [ 2 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) ;
2611: LD_VAR 0 1
2615: PUSH
2616: LD_INT 1
2618: ARRAY
2619: PPUSH
2620: LD_VAR 0 1
2624: PUSH
2625: LD_INT 2
2627: ARRAY
2628: PPUSH
2629: LD_INT 2
2631: PUSH
2632: LD_INT 21
2634: PUSH
2635: LD_INT 1
2637: PUSH
2638: EMPTY
2639: LIST
2640: LIST
2641: PUSH
2642: LD_INT 21
2644: PUSH
2645: LD_INT 2
2647: PUSH
2648: EMPTY
2649: LIST
2650: LIST
2651: PUSH
2652: EMPTY
2653: LIST
2654: LIST
2655: LIST
2656: PPUSH
2657: CALL_OW 513
2661: GO 2608
2663: POP
2664: POP
// end ; end_of_file
2665: PPOPN 2
2667: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
2668: LD_VAR 0 1
2672: PPUSH
2673: CALL 16296 0 1
// Multiplayer_UnitDestroyed ( un ) ;
2677: LD_VAR 0 1
2681: PPUSH
2682: CALL 11724 0 1
// end ;
2686: PPOPN 1
2688: END
// on UnitKamikazed ( un ) do begin SOS_UnitKamikazed ( un ) ;
2689: LD_VAR 0 1
2693: PPUSH
2694: CALL 16313 0 1
// end ;
2698: PPOPN 1
2700: END
// on BuildingComplete ( b ) do Multiplayer_BuildingComplete ( b ) ;
2701: LD_VAR 0 1
2705: PPUSH
2706: CALL 12395 0 1
2710: PPOPN 1
2712: END
// on VehicleConstructed ( vehicle , factory ) do SOS_VehicleConstructed ( vehicle , factory ) ;
2713: LD_VAR 0 1
2717: PPUSH
2718: LD_VAR 0 2
2722: PPUSH
2723: CALL 16354 0 2
2727: PPOPN 2
2729: END
// on BuildingCaptured ( building , oldSide , unit ) do Multiplayer_BuildingCaptured ( building , oldSide , unit ) ;
2730: LD_VAR 0 1
2734: PPUSH
2735: LD_VAR 0 2
2739: PPUSH
2740: LD_VAR 0 3
2744: PPUSH
2745: CALL 12448 0 3
2749: PPOPN 3
2751: END
// on OilExtracted ( building , side , base , amount ) do Multiplayer_OilExtracted ( building , side , base , amount ) ;
2752: LD_VAR 0 1
2756: PPUSH
2757: LD_VAR 0 2
2761: PPUSH
2762: LD_VAR 0 3
2766: PPUSH
2767: LD_VAR 0 4
2771: PPUSH
2772: CALL 12613 0 4
2776: PPOPN 4
2778: END
// on SibExtracted ( building , side , base , amount ) do Multiplayer_SibExtracted ( building , side , base , amount ) ; end_of_file
2779: LD_VAR 0 1
2783: PPUSH
2784: LD_VAR 0 2
2788: PPUSH
2789: LD_VAR 0 3
2793: PPUSH
2794: LD_VAR 0 4
2798: PPUSH
2799: CALL 12849 0 4
2803: PPOPN 4
2805: END
// export artifactsPos , artifactsRecharge , artifactsSibCost , artifactsResearched , artifactsReady ; export artifactsResDifficulty , artifactsResProgress , artifactsButtons , artifactsLabsWorking ; export function InitArtifact ; var i ; begin
2806: LD_INT 0
2808: PPUSH
2809: PPUSH
// for i := 1 to 8 do
2810: LD_ADDR_VAR 0 2
2814: PUSH
2815: DOUBLE
2816: LD_INT 1
2818: DEC
2819: ST_TO_ADDR
2820: LD_INT 8
2822: PUSH
2823: FOR_TO
2824: IFFALSE 2840
// SetArtifactRes ( i , true ) ;
2826: LD_VAR 0 2
2830: PPUSH
2831: LD_INT 1
2833: PPUSH
2834: CALL_OW 467
2838: GO 2823
2840: POP
2841: POP
// CreateResourcesArea ( mat_artifact , 3 , ArtifactArea1 , false ) ;
2842: LD_INT 4
2844: PPUSH
2845: LD_INT 3
2847: PPUSH
2848: LD_INT 25
2850: PPUSH
2851: LD_INT 0
2853: PPUSH
2854: CALL_OW 59
// CreateResourcesArea ( mat_artifact , 4 , ArtifactArea2 , false ) ;
2858: LD_INT 4
2860: PPUSH
2861: LD_INT 4
2863: PPUSH
2864: LD_INT 26
2866: PPUSH
2867: LD_INT 0
2869: PPUSH
2870: CALL_OW 59
// CreateResourcesArea ( mat_artifact , 5 , ArtifactArea3 , false ) ;
2874: LD_INT 4
2876: PPUSH
2877: LD_INT 5
2879: PPUSH
2880: LD_INT 27
2882: PPUSH
2883: LD_INT 0
2885: PPUSH
2886: CALL_OW 59
// artifactsPos := [ [ ] , [ ] , [ ] ] ;
2890: LD_ADDR_EXP 3
2894: PUSH
2895: EMPTY
2896: PUSH
2897: EMPTY
2898: PUSH
2899: EMPTY
2900: PUSH
2901: EMPTY
2902: LIST
2903: LIST
2904: LIST
2905: ST_TO_ADDR
// artifactsRecharge := [ 0 0$30 , 1 1$20 , 5 5$00 ] ;
2906: LD_ADDR_EXP 4
2910: PUSH
2911: LD_INT 1050
2913: PUSH
2914: LD_INT 2800
2916: PUSH
2917: LD_INT 10500
2919: PUSH
2920: EMPTY
2921: LIST
2922: LIST
2923: LIST
2924: ST_TO_ADDR
// artifactsSibCost := [ 10 , 35 , 100 ] ;
2925: LD_ADDR_EXP 5
2929: PUSH
2930: LD_INT 10
2932: PUSH
2933: LD_INT 35
2935: PUSH
2936: LD_INT 100
2938: PUSH
2939: EMPTY
2940: LIST
2941: LIST
2942: LIST
2943: ST_TO_ADDR
// artifactsResDifficulty := [ 300 , 500 , 800 ] ;
2944: LD_ADDR_EXP 8
2948: PUSH
2949: LD_INT 300
2951: PUSH
2952: LD_INT 500
2954: PUSH
2955: LD_INT 800
2957: PUSH
2958: EMPTY
2959: LIST
2960: LIST
2961: LIST
2962: ST_TO_ADDR
// artifactsLabsWorking := [ [ ] , [ ] , [ ] ] ;
2963: LD_ADDR_EXP 11
2967: PUSH
2968: EMPTY
2969: PUSH
2970: EMPTY
2971: PUSH
2972: EMPTY
2973: PUSH
2974: EMPTY
2975: LIST
2976: LIST
2977: LIST
2978: ST_TO_ADDR
// artifactsResearched := [ [ 0 , 0 , 0 ] , [ 0 , 0 , 0 ] , [ 0 , 0 , 0 ] , [ 0 , 0 , 0 ] , [ 0 , 0 , 0 ] , [ 0 , 0 , 0 ] , [ 0 , 0 , 0 ] , [ 0 , 0 , 0 ] ] ;
2979: LD_ADDR_EXP 6
2983: PUSH
2984: LD_INT 0
2986: PUSH
2987: LD_INT 0
2989: PUSH
2990: LD_INT 0
2992: PUSH
2993: EMPTY
2994: LIST
2995: LIST
2996: LIST
2997: PUSH
2998: LD_INT 0
3000: PUSH
3001: LD_INT 0
3003: PUSH
3004: LD_INT 0
3006: PUSH
3007: EMPTY
3008: LIST
3009: LIST
3010: LIST
3011: PUSH
3012: LD_INT 0
3014: PUSH
3015: LD_INT 0
3017: PUSH
3018: LD_INT 0
3020: PUSH
3021: EMPTY
3022: LIST
3023: LIST
3024: LIST
3025: PUSH
3026: LD_INT 0
3028: PUSH
3029: LD_INT 0
3031: PUSH
3032: LD_INT 0
3034: PUSH
3035: EMPTY
3036: LIST
3037: LIST
3038: LIST
3039: PUSH
3040: LD_INT 0
3042: PUSH
3043: LD_INT 0
3045: PUSH
3046: LD_INT 0
3048: PUSH
3049: EMPTY
3050: LIST
3051: LIST
3052: LIST
3053: PUSH
3054: LD_INT 0
3056: PUSH
3057: LD_INT 0
3059: PUSH
3060: LD_INT 0
3062: PUSH
3063: EMPTY
3064: LIST
3065: LIST
3066: LIST
3067: PUSH
3068: LD_INT 0
3070: PUSH
3071: LD_INT 0
3073: PUSH
3074: LD_INT 0
3076: PUSH
3077: EMPTY
3078: LIST
3079: LIST
3080: LIST
3081: PUSH
3082: LD_INT 0
3084: PUSH
3085: LD_INT 0
3087: PUSH
3088: LD_INT 0
3090: PUSH
3091: EMPTY
3092: LIST
3093: LIST
3094: LIST
3095: PUSH
3096: EMPTY
3097: LIST
3098: LIST
3099: LIST
3100: LIST
3101: LIST
3102: LIST
3103: LIST
3104: LIST
3105: ST_TO_ADDR
// artifactsResProgress := [ [ 0 , 0 , 0 ] , [ 0 , 0 , 0 ] , [ 0 , 0 , 0 ] , [ 0 , 0 , 0 ] , [ 0 , 0 , 0 ] , [ 0 , 0 , 0 ] , [ 0 , 0 , 0 ] , [ 0 , 0 , 0 ] ] ;
3106: LD_ADDR_EXP 9
3110: PUSH
3111: LD_INT 0
3113: PUSH
3114: LD_INT 0
3116: PUSH
3117: LD_INT 0
3119: PUSH
3120: EMPTY
3121: LIST
3122: LIST
3123: LIST
3124: PUSH
3125: LD_INT 0
3127: PUSH
3128: LD_INT 0
3130: PUSH
3131: LD_INT 0
3133: PUSH
3134: EMPTY
3135: LIST
3136: LIST
3137: LIST
3138: PUSH
3139: LD_INT 0
3141: PUSH
3142: LD_INT 0
3144: PUSH
3145: LD_INT 0
3147: PUSH
3148: EMPTY
3149: LIST
3150: LIST
3151: LIST
3152: PUSH
3153: LD_INT 0
3155: PUSH
3156: LD_INT 0
3158: PUSH
3159: LD_INT 0
3161: PUSH
3162: EMPTY
3163: LIST
3164: LIST
3165: LIST
3166: PUSH
3167: LD_INT 0
3169: PUSH
3170: LD_INT 0
3172: PUSH
3173: LD_INT 0
3175: PUSH
3176: EMPTY
3177: LIST
3178: LIST
3179: LIST
3180: PUSH
3181: LD_INT 0
3183: PUSH
3184: LD_INT 0
3186: PUSH
3187: LD_INT 0
3189: PUSH
3190: EMPTY
3191: LIST
3192: LIST
3193: LIST
3194: PUSH
3195: LD_INT 0
3197: PUSH
3198: LD_INT 0
3200: PUSH
3201: LD_INT 0
3203: PUSH
3204: EMPTY
3205: LIST
3206: LIST
3207: LIST
3208: PUSH
3209: LD_INT 0
3211: PUSH
3212: LD_INT 0
3214: PUSH
3215: LD_INT 0
3217: PUSH
3218: EMPTY
3219: LIST
3220: LIST
3221: LIST
3222: PUSH
3223: EMPTY
3224: LIST
3225: LIST
3226: LIST
3227: LIST
3228: LIST
3229: LIST
3230: LIST
3231: LIST
3232: ST_TO_ADDR
// artifactsReady := [ [ 0 , 0 , 0 ] , [ 0 , 0 , 0 ] , [ 0 , 0 , 0 ] , [ 0 , 0 , 0 ] , [ 0 , 0 , 0 ] , [ 0 , 0 , 0 ] , [ 0 , 0 , 0 ] , [ 0 , 0 , 0 ] ] ;
3233: LD_ADDR_EXP 7
3237: PUSH
3238: LD_INT 0
3240: PUSH
3241: LD_INT 0
3243: PUSH
3244: LD_INT 0
3246: PUSH
3247: EMPTY
3248: LIST
3249: LIST
3250: LIST
3251: PUSH
3252: LD_INT 0
3254: PUSH
3255: LD_INT 0
3257: PUSH
3258: LD_INT 0
3260: PUSH
3261: EMPTY
3262: LIST
3263: LIST
3264: LIST
3265: PUSH
3266: LD_INT 0
3268: PUSH
3269: LD_INT 0
3271: PUSH
3272: LD_INT 0
3274: PUSH
3275: EMPTY
3276: LIST
3277: LIST
3278: LIST
3279: PUSH
3280: LD_INT 0
3282: PUSH
3283: LD_INT 0
3285: PUSH
3286: LD_INT 0
3288: PUSH
3289: EMPTY
3290: LIST
3291: LIST
3292: LIST
3293: PUSH
3294: LD_INT 0
3296: PUSH
3297: LD_INT 0
3299: PUSH
3300: LD_INT 0
3302: PUSH
3303: EMPTY
3304: LIST
3305: LIST
3306: LIST
3307: PUSH
3308: LD_INT 0
3310: PUSH
3311: LD_INT 0
3313: PUSH
3314: LD_INT 0
3316: PUSH
3317: EMPTY
3318: LIST
3319: LIST
3320: LIST
3321: PUSH
3322: LD_INT 0
3324: PUSH
3325: LD_INT 0
3327: PUSH
3328: LD_INT 0
3330: PUSH
3331: EMPTY
3332: LIST
3333: LIST
3334: LIST
3335: PUSH
3336: LD_INT 0
3338: PUSH
3339: LD_INT 0
3341: PUSH
3342: LD_INT 0
3344: PUSH
3345: EMPTY
3346: LIST
3347: LIST
3348: LIST
3349: PUSH
3350: EMPTY
3351: LIST
3352: LIST
3353: LIST
3354: LIST
3355: LIST
3356: LIST
3357: LIST
3358: LIST
3359: ST_TO_ADDR
// artifactsButtons := [ [ art_use_eye , art_place , art_exp_left ] , [ art_use_sibexplosion , art_unit , art_exp_mid ] , [ art_use_atom , art_place , art_exp_right ] ] ;
3360: LD_ADDR_EXP 10
3364: PUSH
3365: LD_INT 4
3367: PUSH
3368: LD_INT 3
3370: PUSH
3371: LD_INT 1
3373: PUSH
3374: EMPTY
3375: LIST
3376: LIST
3377: LIST
3378: PUSH
3379: LD_INT 5
3381: PUSH
3382: LD_INT 4
3384: PUSH
3385: LD_INT 2
3387: PUSH
3388: EMPTY
3389: LIST
3390: LIST
3391: LIST
3392: PUSH
3393: LD_INT 7
3395: PUSH
3396: LD_INT 3
3398: PUSH
3399: LD_INT 3
3401: PUSH
3402: EMPTY
3403: LIST
3404: LIST
3405: LIST
3406: PUSH
3407: EMPTY
3408: LIST
3409: LIST
3410: LIST
3411: ST_TO_ADDR
// end ;
3412: LD_VAR 0 1
3416: RET
// function TeleportArtefact ( number , area ) ; var i , hex , tmp , cargo ; begin
3417: LD_INT 0
3419: PPUSH
3420: PPUSH
3421: PPUSH
3422: PPUSH
3423: PPUSH
// if not number in [ 3 , 4 , 5 ] then
3424: LD_VAR 0 1
3428: PUSH
3429: LD_INT 3
3431: PUSH
3432: LD_INT 4
3434: PUSH
3435: LD_INT 5
3437: PUSH
3438: EMPTY
3439: LIST
3440: LIST
3441: LIST
3442: IN
3443: NOT
3444: IFFALSE 3448
// exit ;
3446: GO 3862
// hex := FindArtifact ( number ) ;
3448: LD_ADDR_VAR 0 5
3452: PUSH
3453: LD_VAR 0 1
3457: PPUSH
3458: CALL_OW 469
3462: ST_TO_ADDR
// if hex then
3463: LD_VAR 0 5
3467: IFFALSE 3738
// begin if InArea ( hex [ 1 ] , hex [ 2 ] , area ) then
3469: LD_VAR 0 5
3473: PUSH
3474: LD_INT 1
3476: ARRAY
3477: PPUSH
3478: LD_VAR 0 5
3482: PUSH
3483: LD_INT 2
3485: ARRAY
3486: PPUSH
3487: LD_VAR 0 2
3491: PPUSH
3492: CALL_OW 309
3496: IFFALSE 3500
// exit ;
3498: GO 3862
// if artifactsLabsWorking [ number - 2 ] then
3500: LD_EXP 11
3504: PUSH
3505: LD_VAR 0 1
3509: PUSH
3510: LD_INT 2
3512: MINUS
3513: ARRAY
3514: IFFALSE 3619
// begin for i in artifactsLabsWorking [ number - 2 ] do
3516: LD_ADDR_VAR 0 4
3520: PUSH
3521: LD_EXP 11
3525: PUSH
3526: LD_VAR 0 1
3530: PUSH
3531: LD_INT 2
3533: MINUS
3534: ARRAY
3535: PUSH
3536: FOR_IN
3537: IFFALSE 3591
// begin SetArtifactUse ( GetSide ( i ) , artifactsButtons [ number - 2 ] [ 3 ] , art_no , i ) ;
3539: LD_VAR 0 4
3543: PPUSH
3544: CALL_OW 255
3548: PPUSH
3549: LD_EXP 10
3553: PUSH
3554: LD_VAR 0 1
3558: PUSH
3559: LD_INT 2
3561: MINUS
3562: ARRAY
3563: PUSH
3564: LD_INT 3
3566: ARRAY
3567: PPUSH
3568: LD_INT 0
3570: PPUSH
3571: LD_VAR 0 4
3575: PPUSH
3576: CALL_OW 468
// ComCancel ( i ) ;
3580: LD_VAR 0 4
3584: PPUSH
3585: CALL_OW 127
// end ;
3589: GO 3536
3591: POP
3592: POP
// artifactsLabsWorking := Replace ( artifactsLabsWorking , number - 2 , [ ] ) ;
3593: LD_ADDR_EXP 11
3597: PUSH
3598: LD_EXP 11
3602: PPUSH
3603: LD_VAR 0 1
3607: PUSH
3608: LD_INT 2
3610: MINUS
3611: PPUSH
3612: EMPTY
3613: PPUSH
3614: CALL_OW 1
3618: ST_TO_ADDR
// end ; tmp := FilterUnitsInArea ( area , [ f_placed ] ) ;
3619: LD_ADDR_VAR 0 6
3623: PUSH
3624: LD_VAR 0 2
3628: PPUSH
3629: LD_INT 52
3631: PUSH
3632: EMPTY
3633: LIST
3634: PPUSH
3635: CALL_OW 70
3639: ST_TO_ADDR
// if tmp then
3640: LD_VAR 0 6
3644: IFFALSE 3672
// for i in tmp do
3646: LD_ADDR_VAR 0 4
3650: PUSH
3651: LD_VAR 0 6
3655: PUSH
3656: FOR_IN
3657: IFFALSE 3670
// DestroyUnit ( i ) ;
3659: LD_VAR 0 4
3663: PPUSH
3664: CALL_OW 65
3668: GO 3656
3670: POP
3671: POP
// MoveAreaXY ( artifactTeleportArea , hex [ 1 ] , hex [ 2 ] ) ;
3672: LD_INT 56
3674: PPUSH
3675: LD_VAR 0 5
3679: PUSH
3680: LD_INT 1
3682: ARRAY
3683: PPUSH
3684: LD_VAR 0 5
3688: PUSH
3689: LD_INT 2
3691: ARRAY
3692: PPUSH
3693: CALL_OW 425
// EffectTeleport ( hex [ 1 ] , hex [ 2 ] ) ;
3697: LD_VAR 0 5
3701: PUSH
3702: LD_INT 1
3704: ARRAY
3705: PPUSH
3706: LD_VAR 0 5
3710: PUSH
3711: LD_INT 2
3713: ARRAY
3714: PPUSH
3715: CALL_OW 494
// wait ( 30 ) ;
3719: LD_INT 30
3721: PPUSH
3722: CALL_OW 67
// EraseResourceArea ( artifactTeleportArea , mat_artefact ) ;
3726: LD_INT 56
3728: PPUSH
3729: LD_INT 4
3731: PPUSH
3732: CALL_OW 286
// end else
3736: GO 3842
// begin cargo := FilterAllUnits ( [ [ f_tag , number ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
3738: LD_ADDR_VAR 0 7
3742: PUSH
3743: LD_INT 120
3745: PUSH
3746: LD_VAR 0 1
3750: PUSH
3751: EMPTY
3752: LIST
3753: LIST
3754: PUSH
3755: LD_INT 2
3757: PUSH
3758: LD_INT 34
3760: PUSH
3761: LD_INT 12
3763: PUSH
3764: EMPTY
3765: LIST
3766: LIST
3767: PUSH
3768: LD_INT 34
3770: PUSH
3771: LD_INT 32
3773: PUSH
3774: EMPTY
3775: LIST
3776: LIST
3777: PUSH
3778: LD_INT 34
3780: PUSH
3781: LD_INT 51
3783: PUSH
3784: EMPTY
3785: LIST
3786: LIST
3787: PUSH
3788: LD_INT 34
3790: PUSH
3791: LD_INT 89
3793: PUSH
3794: EMPTY
3795: LIST
3796: LIST
3797: PUSH
3798: EMPTY
3799: LIST
3800: LIST
3801: LIST
3802: LIST
3803: LIST
3804: PUSH
3805: EMPTY
3806: LIST
3807: LIST
3808: PPUSH
3809: CALL_OW 69
3813: ST_TO_ADDR
// if not cargo then
3814: LD_VAR 0 7
3818: NOT
3819: IFFALSE 3823
// exit ;
3821: GO 3862
// SetCargo ( cargo [ 1 ] , mat_artifact , 0 ) ;
3823: LD_VAR 0 7
3827: PUSH
3828: LD_INT 1
3830: ARRAY
3831: PPUSH
3832: LD_INT 4
3834: PPUSH
3835: LD_INT 0
3837: PPUSH
3838: CALL_OW 290
// end ; CreateResourcesArea ( mat_artifact , number , area , false ) ;
3842: LD_INT 4
3844: PPUSH
3845: LD_VAR 0 1
3849: PPUSH
3850: LD_VAR 0 2
3854: PPUSH
3855: LD_INT 0
3857: PPUSH
3858: CALL_OW 59
// end ;
3862: LD_VAR 0 3
3866: RET
// every 8 8$30 trigger mpArtifacts do
3867: LD_EXP 53
3871: IFFALSE 3887
3873: GO 3875
3875: DISABLE
// begin enable ;
3876: ENABLE
// TeleportArtefact ( 3 , ArtifactArea1 ) ;
3877: LD_INT 3
3879: PPUSH
3880: LD_INT 25
3882: PPUSH
3883: CALL 3417 0 2
// end ;
3887: END
// every 6 6$10 trigger mpArtifacts do
3888: LD_EXP 53
3892: IFFALSE 3908
3894: GO 3896
3896: DISABLE
// begin enable ;
3897: ENABLE
// TeleportArtefact ( 4 , ArtifactArea2 ) ;
3898: LD_INT 4
3900: PPUSH
3901: LD_INT 26
3903: PPUSH
3904: CALL 3417 0 2
// end ;
3908: END
// every 4 4$10 trigger mpArtifacts do
3909: LD_EXP 53
3913: IFFALSE 3929
3915: GO 3917
3917: DISABLE
// begin enable ;
3918: ENABLE
// TeleportArtefact ( 5 , ArtifactArea3 ) ;
3919: LD_INT 5
3921: PPUSH
3922: LD_INT 27
3924: PPUSH
3925: CALL 3417 0 2
// end ;
3929: END
// every 0 0$1 trigger mpArtifacts do var i , pos , j , side , labs , nearestLab ;
3930: LD_EXP 53
3934: IFFALSE 4834
3936: GO 3938
3938: DISABLE
3939: LD_INT 0
3941: PPUSH
3942: PPUSH
3943: PPUSH
3944: PPUSH
3945: PPUSH
3946: PPUSH
// begin enable ;
3947: ENABLE
// for i := 1 to 3 do
3948: LD_ADDR_VAR 0 1
3952: PUSH
3953: DOUBLE
3954: LD_INT 1
3956: DEC
3957: ST_TO_ADDR
3958: LD_INT 3
3960: PUSH
3961: FOR_TO
3962: IFFALSE 4832
// begin pos := FindArtifact ( i + 2 ) ;
3964: LD_ADDR_VAR 0 2
3968: PUSH
3969: LD_VAR 0 1
3973: PUSH
3974: LD_INT 2
3976: PLUS
3977: PPUSH
3978: CALL_OW 469
3982: ST_TO_ADDR
// artifactsPos := Replace ( artifactsPos , i , pos ) ;
3983: LD_ADDR_EXP 3
3987: PUSH
3988: LD_EXP 3
3992: PPUSH
3993: LD_VAR 0 1
3997: PPUSH
3998: LD_VAR 0 2
4002: PPUSH
4003: CALL_OW 1
4007: ST_TO_ADDR
// labs := FilterAllUnits ( [ f_lab , b_lab_siberium ] ) ;
4008: LD_ADDR_VAR 0 5
4012: PUSH
4013: LD_INT 63
4015: PUSH
4016: LD_INT 11
4018: PUSH
4019: EMPTY
4020: LIST
4021: LIST
4022: PPUSH
4023: CALL_OW 69
4027: ST_TO_ADDR
// if not labs then
4028: LD_VAR 0 5
4032: NOT
4033: IFFALSE 4039
// exit ;
4035: POP
4036: POP
4037: GO 4834
// if pos then
4039: LD_VAR 0 2
4043: IFFALSE 4670
// begin if not labs then
4045: LD_VAR 0 5
4049: NOT
4050: IFFALSE 4054
// continue ;
4052: GO 3961
// nearestLab := NearestUnitToXY ( labs , artifactsPos [ i ] [ 1 ] , artifactsPos [ i ] [ 2 ] ) ;
4054: LD_ADDR_VAR 0 6
4058: PUSH
4059: LD_VAR 0 5
4063: PPUSH
4064: LD_EXP 3
4068: PUSH
4069: LD_VAR 0 1
4073: ARRAY
4074: PUSH
4075: LD_INT 1
4077: ARRAY
4078: PPUSH
4079: LD_EXP 3
4083: PUSH
4084: LD_VAR 0 1
4088: ARRAY
4089: PUSH
4090: LD_INT 2
4092: ARRAY
4093: PPUSH
4094: CALL_OW 73
4098: ST_TO_ADDR
// if not nearestLab then
4099: LD_VAR 0 6
4103: NOT
4104: IFFALSE 4204
// begin for j in labs do
4106: LD_ADDR_VAR 0 3
4110: PUSH
4111: LD_VAR 0 5
4115: PUSH
4116: FOR_IN
4117: IFFALSE 4200
// begin side := GetSide ( j ) ;
4119: LD_ADDR_VAR 0 4
4123: PUSH
4124: LD_VAR 0 3
4128: PPUSH
4129: CALL_OW 255
4133: ST_TO_ADDR
// SetArtifactUse ( side , artifactsButtons [ i ] [ 3 ] , art_no , j ) ;
4134: LD_VAR 0 4
4138: PPUSH
4139: LD_EXP 10
4143: PUSH
4144: LD_VAR 0 1
4148: ARRAY
4149: PUSH
4150: LD_INT 3
4152: ARRAY
4153: PPUSH
4154: LD_INT 0
4156: PPUSH
4157: LD_VAR 0 3
4161: PPUSH
4162: CALL_OW 468
// SetArtifactUse ( side , artifactsButtons [ i ] [ 1 ] , art_no , j ) ;
4166: LD_VAR 0 4
4170: PPUSH
4171: LD_EXP 10
4175: PUSH
4176: LD_VAR 0 1
4180: ARRAY
4181: PUSH
4182: LD_INT 1
4184: ARRAY
4185: PPUSH
4186: LD_INT 0
4188: PPUSH
4189: LD_VAR 0 3
4193: PPUSH
4194: CALL_OW 468
// end ;
4198: GO 4116
4200: POP
4201: POP
// continue ;
4202: GO 3961
// end ; if GetDistUnitXY ( nearestLab , artifactsPos [ i ] [ 1 ] , artifactsPos [ i ] [ 2 ] ) < 8 and GetTech ( tech_artifact , GetSide ( nearestLab ) ) = state_researched then
4204: LD_VAR 0 6
4208: PPUSH
4209: LD_EXP 3
4213: PUSH
4214: LD_VAR 0 1
4218: ARRAY
4219: PUSH
4220: LD_INT 1
4222: ARRAY
4223: PPUSH
4224: LD_EXP 3
4228: PUSH
4229: LD_VAR 0 1
4233: ARRAY
4234: PUSH
4235: LD_INT 2
4237: ARRAY
4238: PPUSH
4239: CALL_OW 297
4243: PUSH
4244: LD_INT 8
4246: LESS
4247: IFFALSE 4272
4249: PUSH
4250: LD_INT 24
4252: PPUSH
4253: LD_VAR 0 6
4257: PPUSH
4258: CALL_OW 255
4262: PPUSH
4263: CALL_OW 321
4267: PUSH
4268: LD_INT 2
4270: EQUAL
4271: AND
4272: IFFALSE 4506
// begin side := GetSide ( nearestLab ) ;
4274: LD_ADDR_VAR 0 4
4278: PUSH
4279: LD_VAR 0 6
4283: PPUSH
4284: CALL_OW 255
4288: ST_TO_ADDR
// if not artifactsResearched [ side ] [ i ] then
4289: LD_EXP 6
4293: PUSH
4294: LD_VAR 0 4
4298: ARRAY
4299: PUSH
4300: LD_VAR 0 1
4304: ARRAY
4305: NOT
4306: IFFALSE 4391
// begin if BuildingStatus ( nearestLab ) = bs_idle then
4308: LD_VAR 0 6
4312: PPUSH
4313: CALL_OW 461
4317: PUSH
4318: LD_INT 2
4320: EQUAL
4321: IFFALSE 4357
// SetArtifactUse ( side , artifactsButtons [ i ] [ 3 ] , art_instant , nearestLab ) else
4323: LD_VAR 0 4
4327: PPUSH
4328: LD_EXP 10
4332: PUSH
4333: LD_VAR 0 1
4337: ARRAY
4338: PUSH
4339: LD_INT 3
4341: ARRAY
4342: PPUSH
4343: LD_INT 2
4345: PPUSH
4346: LD_VAR 0 6
4350: PPUSH
4351: CALL_OW 468
4355: GO 4389
// SetArtifactUse ( side , artifactsButtons [ i ] [ 3 ] , art_gray , nearestLab ) ;
4357: LD_VAR 0 4
4361: PPUSH
4362: LD_EXP 10
4366: PUSH
4367: LD_VAR 0 1
4371: ARRAY
4372: PUSH
4373: LD_INT 3
4375: ARRAY
4376: PPUSH
4377: LD_INT 1
4379: PPUSH
4380: LD_VAR 0 6
4384: PPUSH
4385: CALL_OW 468
// end else
4389: GO 4504
// begin if BuildingStatus ( nearestLab ) = bs_idle and artifactsReady [ side ] [ i ] then
4391: LD_VAR 0 6
4395: PPUSH
4396: CALL_OW 461
4400: PUSH
4401: LD_INT 2
4403: EQUAL
4404: IFFALSE 4424
4406: PUSH
4407: LD_EXP 7
4411: PUSH
4412: LD_VAR 0 4
4416: ARRAY
4417: PUSH
4418: LD_VAR 0 1
4422: ARRAY
4423: AND
4424: IFFALSE 4472
// SetArtifactUse ( side , artifactsButtons [ i ] [ 1 ] , artifactsButtons [ i ] [ 2 ] , nearestLab ) else
4426: LD_VAR 0 4
4430: PPUSH
4431: LD_EXP 10
4435: PUSH
4436: LD_VAR 0 1
4440: ARRAY
4441: PUSH
4442: LD_INT 1
4444: ARRAY
4445: PPUSH
4446: LD_EXP 10
4450: PUSH
4451: LD_VAR 0 1
4455: ARRAY
4456: PUSH
4457: LD_INT 2
4459: ARRAY
4460: PPUSH
4461: LD_VAR 0 6
4465: PPUSH
4466: CALL_OW 468
4470: GO 4504
// SetArtifactUse ( side , artifactsButtons [ i ] [ 1 ] , art_gray , nearestLab ) end ;
4472: LD_VAR 0 4
4476: PPUSH
4477: LD_EXP 10
4481: PUSH
4482: LD_VAR 0 1
4486: ARRAY
4487: PUSH
4488: LD_INT 1
4490: ARRAY
4491: PPUSH
4492: LD_INT 1
4494: PPUSH
4495: LD_VAR 0 6
4499: PPUSH
4500: CALL_OW 468
// end else
4504: GO 4668
// begin for j in labs do
4506: LD_ADDR_VAR 0 3
4510: PUSH
4511: LD_VAR 0 5
4515: PUSH
4516: FOR_IN
4517: IFFALSE 4666
// begin if GetDistUnitXY ( j , artifactsPos [ i ] [ 1 ] , artifactsPos [ i ] [ 2 ] ) >= 8 then
4519: LD_VAR 0 3
4523: PPUSH
4524: LD_EXP 3
4528: PUSH
4529: LD_VAR 0 1
4533: ARRAY
4534: PUSH
4535: LD_INT 1
4537: ARRAY
4538: PPUSH
4539: LD_EXP 3
4543: PUSH
4544: LD_VAR 0 1
4548: ARRAY
4549: PUSH
4550: LD_INT 2
4552: ARRAY
4553: PPUSH
4554: CALL_OW 297
4558: PUSH
4559: LD_INT 8
4561: GREATEREQUAL
4562: IFFALSE 4664
// begin side := GetSide ( j ) ;
4564: LD_ADDR_VAR 0 4
4568: PUSH
4569: LD_VAR 0 3
4573: PPUSH
4574: CALL_OW 255
4578: ST_TO_ADDR
// if not artifactsResearched [ side ] [ i ] then
4579: LD_EXP 6
4583: PUSH
4584: LD_VAR 0 4
4588: ARRAY
4589: PUSH
4590: LD_VAR 0 1
4594: ARRAY
4595: NOT
4596: IFFALSE 4632
// SetArtifactUse ( side , artifactsButtons [ i ] [ 3 ] , art_no , j ) else
4598: LD_VAR 0 4
4602: PPUSH
4603: LD_EXP 10
4607: PUSH
4608: LD_VAR 0 1
4612: ARRAY
4613: PUSH
4614: LD_INT 3
4616: ARRAY
4617: PPUSH
4618: LD_INT 0
4620: PPUSH
4621: LD_VAR 0 3
4625: PPUSH
4626: CALL_OW 468
4630: GO 4664
// SetArtifactUse ( side , artifactsButtons [ i ] [ 1 ] , art_no , j ) ;
4632: LD_VAR 0 4
4636: PPUSH
4637: LD_EXP 10
4641: PUSH
4642: LD_VAR 0 1
4646: ARRAY
4647: PUSH
4648: LD_INT 1
4650: ARRAY
4651: PPUSH
4652: LD_INT 0
4654: PPUSH
4655: LD_VAR 0 3
4659: PPUSH
4660: CALL_OW 468
// end ; end ;
4664: GO 4516
4666: POP
4667: POP
// end ; end else
4668: GO 4830
// begin for j in labs do
4670: LD_ADDR_VAR 0 3
4674: PUSH
4675: LD_VAR 0 5
4679: PUSH
4680: FOR_IN
4681: IFFALSE 4828
// begin side := GetSide ( j ) ;
4683: LD_ADDR_VAR 0 4
4687: PUSH
4688: LD_VAR 0 3
4692: PPUSH
4693: CALL_OW 255
4697: ST_TO_ADDR
// SetArtifactUse ( side , artifactsButtons [ i ] [ 3 ] , art_no , j ) ;
4698: LD_VAR 0 4
4702: PPUSH
4703: LD_EXP 10
4707: PUSH
4708: LD_VAR 0 1
4712: ARRAY
4713: PUSH
4714: LD_INT 3
4716: ARRAY
4717: PPUSH
4718: LD_INT 0
4720: PPUSH
4721: LD_VAR 0 3
4725: PPUSH
4726: CALL_OW 468
// SetArtifactUse ( side , artifactsButtons [ i ] [ 1 ] , art_no , j ) ;
4730: LD_VAR 0 4
4734: PPUSH
4735: LD_EXP 10
4739: PUSH
4740: LD_VAR 0 1
4744: ARRAY
4745: PUSH
4746: LD_INT 1
4748: ARRAY
4749: PPUSH
4750: LD_INT 0
4752: PPUSH
4753: LD_VAR 0 3
4757: PPUSH
4758: CALL_OW 468
// if j in artifactsLabsWorking [ i ] then
4762: LD_VAR 0 3
4766: PUSH
4767: LD_EXP 11
4771: PUSH
4772: LD_VAR 0 1
4776: ARRAY
4777: IN
4778: IFFALSE 4826
// begin artifactsLabsWorking := Replace ( artifactsLabsWorking , i , artifactsLabsWorking [ i ] diff j ) ;
4780: LD_ADDR_EXP 11
4784: PUSH
4785: LD_EXP 11
4789: PPUSH
4790: LD_VAR 0 1
4794: PPUSH
4795: LD_EXP 11
4799: PUSH
4800: LD_VAR 0 1
4804: ARRAY
4805: PUSH
4806: LD_VAR 0 3
4810: DIFF
4811: PPUSH
4812: CALL_OW 1
4816: ST_TO_ADDR
// ComCancel ( j ) ;
4817: LD_VAR 0 3
4821: PPUSH
4822: CALL_OW 127
// end ; end ;
4826: GO 4680
4828: POP
4829: POP
// end ; end ;
4830: GO 3961
4832: POP
4833: POP
// end ;
4834: PPOPN 6
4836: END
// on ArtifactUsed ( side , icon , x , y ) do var i , labs , lab , base , time ;
4837: LD_INT 0
4839: PPUSH
4840: PPUSH
4841: PPUSH
4842: PPUSH
4843: PPUSH
// begin labs := FilterAllUnits ( [ [ f_side , side ] , [ f_lab , b_lab_siberium ] ] ) ;
4844: LD_ADDR_VAR 0 6
4848: PUSH
4849: LD_INT 22
4851: PUSH
4852: LD_VAR 0 1
4856: PUSH
4857: EMPTY
4858: LIST
4859: LIST
4860: PUSH
4861: LD_INT 63
4863: PUSH
4864: LD_INT 11
4866: PUSH
4867: EMPTY
4868: LIST
4869: LIST
4870: PUSH
4871: EMPTY
4872: LIST
4873: LIST
4874: PPUSH
4875: CALL_OW 69
4879: ST_TO_ADDR
// for i := 1 to 3 do
4880: LD_ADDR_VAR 0 5
4884: PUSH
4885: DOUBLE
4886: LD_INT 1
4888: DEC
4889: ST_TO_ADDR
4890: LD_INT 3
4892: PUSH
4893: FOR_TO
4894: IFFALSE 5124
// begin if icon = artifactsButtons [ i ] [ 3 ] then
4896: LD_VAR 0 2
4900: PUSH
4901: LD_EXP 10
4905: PUSH
4906: LD_VAR 0 5
4910: ARRAY
4911: PUSH
4912: LD_INT 3
4914: ARRAY
4915: EQUAL
4916: IFFALSE 5122
// begin lab := NearestUnitToXY ( labs , artifactsPos [ i ] [ 1 ] , artifactsPos [ i ] [ 2 ] ) ;
4918: LD_ADDR_VAR 0 7
4922: PUSH
4923: LD_VAR 0 6
4927: PPUSH
4928: LD_EXP 3
4932: PUSH
4933: LD_VAR 0 5
4937: ARRAY
4938: PUSH
4939: LD_INT 1
4941: ARRAY
4942: PPUSH
4943: LD_EXP 3
4947: PUSH
4948: LD_VAR 0 5
4952: ARRAY
4953: PUSH
4954: LD_INT 2
4956: ARRAY
4957: PPUSH
4958: CALL_OW 73
4962: ST_TO_ADDR
// if not lab then
4963: LD_VAR 0 7
4967: NOT
4968: IFFALSE 4972
// continue ;
4970: GO 4893
// SetSpecResearch ( lab , artifactsResDifficulty [ i ] , true ) ;
4972: LD_VAR 0 7
4976: PPUSH
4977: LD_EXP 8
4981: PUSH
4982: LD_VAR 0 5
4986: ARRAY
4987: PPUSH
4988: LD_INT 1
4990: PPUSH
4991: CALL_OW 486
// SetTag ( lab , i ) ;
4995: LD_VAR 0 7
4999: PPUSH
5000: LD_VAR 0 5
5004: PPUSH
5005: CALL_OW 109
// if artifactsResProgress [ side ] [ i ] then
5009: LD_EXP 9
5013: PUSH
5014: LD_VAR 0 1
5018: ARRAY
5019: PUSH
5020: LD_VAR 0 5
5024: ARRAY
5025: IFFALSE 5053
// SetWorkingProgress ( lab , artifactsResProgress [ side ] [ i ] ) ;
5027: LD_VAR 0 7
5031: PPUSH
5032: LD_EXP 9
5036: PUSH
5037: LD_VAR 0 1
5041: ARRAY
5042: PUSH
5043: LD_VAR 0 5
5047: ARRAY
5048: PPUSH
5049: CALL_OW 329
// artifactsLabsWorking := Replace ( artifactsLabsWorking , i , artifactsLabsWorking [ i ] union lab ) ;
5053: LD_ADDR_EXP 11
5057: PUSH
5058: LD_EXP 11
5062: PPUSH
5063: LD_VAR 0 5
5067: PPUSH
5068: LD_EXP 11
5072: PUSH
5073: LD_VAR 0 5
5077: ARRAY
5078: PUSH
5079: LD_VAR 0 7
5083: UNION
5084: PPUSH
5085: CALL_OW 1
5089: ST_TO_ADDR
// SetArtifactUse ( side , artifactsButtons [ i ] [ 3 ] , art_no , lab ) ;
5090: LD_VAR 0 1
5094: PPUSH
5095: LD_EXP 10
5099: PUSH
5100: LD_VAR 0 5
5104: ARRAY
5105: PUSH
5106: LD_INT 3
5108: ARRAY
5109: PPUSH
5110: LD_INT 0
5112: PPUSH
5113: LD_VAR 0 7
5117: PPUSH
5118: CALL_OW 468
// end ; end ;
5122: GO 4893
5124: POP
5125: POP
// if icon = artifactsButtons [ 1 ] [ 1 ] then
5126: LD_VAR 0 2
5130: PUSH
5131: LD_EXP 10
5135: PUSH
5136: LD_INT 1
5138: ARRAY
5139: PUSH
5140: LD_INT 1
5142: ARRAY
5143: EQUAL
5144: IFFALSE 5415
// begin lab := NearestUnitToXY ( labs , artifactsPos [ 1 ] [ 1 ] , artifactsPos [ 1 ] [ 2 ] ) ;
5146: LD_ADDR_VAR 0 7
5150: PUSH
5151: LD_VAR 0 6
5155: PPUSH
5156: LD_EXP 3
5160: PUSH
5161: LD_INT 1
5163: ARRAY
5164: PUSH
5165: LD_INT 1
5167: ARRAY
5168: PPUSH
5169: LD_EXP 3
5173: PUSH
5174: LD_INT 1
5176: ARRAY
5177: PUSH
5178: LD_INT 2
5180: ARRAY
5181: PPUSH
5182: CALL_OW 73
5186: ST_TO_ADDR
// base := GetBase ( lab ) ;
5187: LD_ADDR_VAR 0 8
5191: PUSH
5192: LD_VAR 0 7
5196: PPUSH
5197: CALL_OW 274
5201: ST_TO_ADDR
// if GetBaseMaterials ( GetBase ( lab ) ) [ 3 ] < artifactsSibCost [ 1 ] then
5202: LD_VAR 0 7
5206: PPUSH
5207: CALL_OW 274
5211: PPUSH
5212: CALL 60084 0 1
5216: PUSH
5217: LD_INT 3
5219: ARRAY
5220: PUSH
5221: LD_EXP 5
5225: PUSH
5226: LD_INT 1
5228: ARRAY
5229: LESS
5230: IFFALSE 5234
// begin exit ;
5232: GO 6181
// end ; SetResourceType ( base , mat_siberit , ( GetResourceType ( base , mat_siberit ) - artifactsSibCost [ 1 ] ) ) ;
5234: LD_VAR 0 8
5238: PPUSH
5239: LD_INT 3
5241: PPUSH
5242: LD_VAR 0 8
5246: PPUSH
5247: LD_INT 3
5249: PPUSH
5250: CALL_OW 275
5254: PUSH
5255: LD_EXP 5
5259: PUSH
5260: LD_INT 1
5262: ARRAY
5263: MINUS
5264: PPUSH
5265: CALL_OW 277
// artifactsReady := Replace ( artifactsReady , side , Replace ( artifactsReady [ side ] , 1 , false ) ) ;
5269: LD_ADDR_EXP 7
5273: PUSH
5274: LD_EXP 7
5278: PPUSH
5279: LD_VAR 0 1
5283: PPUSH
5284: LD_EXP 7
5288: PUSH
5289: LD_VAR 0 1
5293: ARRAY
5294: PPUSH
5295: LD_INT 1
5297: PPUSH
5298: LD_INT 0
5300: PPUSH
5301: CALL_OW 1
5305: PPUSH
5306: CALL_OW 1
5310: ST_TO_ADDR
// PlaceSeeing ( x , y , side , - 12 ) ;
5311: LD_VAR 0 3
5315: PPUSH
5316: LD_VAR 0 4
5320: PPUSH
5321: LD_VAR 0 1
5325: PPUSH
5326: LD_INT 12
5328: NEG
5329: PPUSH
5330: CALL_OW 330
// wait ( 0 0$30 ) ;
5334: LD_INT 1050
5336: PPUSH
5337: CALL_OW 67
// RemoveSeeing ( x , y , side ) ;
5341: LD_VAR 0 3
5345: PPUSH
5346: LD_VAR 0 4
5350: PPUSH
5351: LD_VAR 0 1
5355: PPUSH
5356: CALL_OW 331
// wait ( artifactsRecharge [ 1 ] ) ;
5360: LD_EXP 4
5364: PUSH
5365: LD_INT 1
5367: ARRAY
5368: PPUSH
5369: CALL_OW 67
// artifactsReady := Replace ( artifactsReady , side , Replace ( artifactsReady [ side ] , 1 , true ) ) ;
5373: LD_ADDR_EXP 7
5377: PUSH
5378: LD_EXP 7
5382: PPUSH
5383: LD_VAR 0 1
5387: PPUSH
5388: LD_EXP 7
5392: PUSH
5393: LD_VAR 0 1
5397: ARRAY
5398: PPUSH
5399: LD_INT 1
5401: PPUSH
5402: LD_INT 1
5404: PPUSH
5405: CALL_OW 1
5409: PPUSH
5410: CALL_OW 1
5414: ST_TO_ADDR
// end ; if icon = artifactsButtons [ 2 ] [ 1 ] then
5415: LD_VAR 0 2
5419: PUSH
5420: LD_EXP 10
5424: PUSH
5425: LD_INT 2
5427: ARRAY
5428: PUSH
5429: LD_INT 1
5431: ARRAY
5432: EQUAL
5433: IFFALSE 5929
// begin lab := NearestUnitToXY ( labs , artifactsPos [ 2 ] [ 1 ] , artifactsPos [ 2 ] [ 2 ] ) ;
5435: LD_ADDR_VAR 0 7
5439: PUSH
5440: LD_VAR 0 6
5444: PPUSH
5445: LD_EXP 3
5449: PUSH
5450: LD_INT 2
5452: ARRAY
5453: PUSH
5454: LD_INT 1
5456: ARRAY
5457: PPUSH
5458: LD_EXP 3
5462: PUSH
5463: LD_INT 2
5465: ARRAY
5466: PUSH
5467: LD_INT 2
5469: ARRAY
5470: PPUSH
5471: CALL_OW 73
5475: ST_TO_ADDR
// base := GetBase ( lab ) ;
5476: LD_ADDR_VAR 0 8
5480: PUSH
5481: LD_VAR 0 7
5485: PPUSH
5486: CALL_OW 274
5490: ST_TO_ADDR
// if not x in FilterAllUnits ( [ [ f_enemy , side ] , [ f_or , [ f_engine , engine_siberite ] , [ f_btype , b_siberite_power ] , [ f_btype , b_siberite_mine ] , [ f_bweapon , ru_time_lapser ] , [ f_weapon , ru_time_lapser ] , [ f_weapon , us_double_laser ] , [ f_bweapon , us_double_laser ] , [ f_weapon , ar_bio_bomb ] , [ f_weapon , ar_selfpropelled_bomb ] , [ f_btype , b_ext_siberium ] , [ f_weapon , us_siberium_rocket ] , [ f_weapon , ru_siberium_rocket ] , [ f_chassis , ru_behemoth ] , [ f_bweapon , us_siberium_rocket ] , [ f_bweapon , ru_siberium_rocket ] ] ] ) then
5491: LD_VAR 0 3
5495: PUSH
5496: LD_INT 81
5498: PUSH
5499: LD_VAR 0 1
5503: PUSH
5504: EMPTY
5505: LIST
5506: LIST
5507: PUSH
5508: LD_INT 2
5510: PUSH
5511: LD_INT 32
5513: PUSH
5514: LD_INT 3
5516: PUSH
5517: EMPTY
5518: LIST
5519: LIST
5520: PUSH
5521: LD_INT 30
5523: PUSH
5524: LD_INT 28
5526: PUSH
5527: EMPTY
5528: LIST
5529: LIST
5530: PUSH
5531: LD_INT 30
5533: PUSH
5534: LD_INT 30
5536: PUSH
5537: EMPTY
5538: LIST
5539: LIST
5540: PUSH
5541: LD_INT 35
5543: PUSH
5544: LD_INT 49
5546: PUSH
5547: EMPTY
5548: LIST
5549: LIST
5550: PUSH
5551: LD_INT 34
5553: PUSH
5554: LD_INT 49
5556: PUSH
5557: EMPTY
5558: LIST
5559: LIST
5560: PUSH
5561: LD_INT 34
5563: PUSH
5564: LD_INT 10
5566: PUSH
5567: EMPTY
5568: LIST
5569: LIST
5570: PUSH
5571: LD_INT 35
5573: PUSH
5574: LD_INT 10
5576: PUSH
5577: EMPTY
5578: LIST
5579: LIST
5580: PUSH
5581: LD_INT 34
5583: PUSH
5584: LD_INT 91
5586: PUSH
5587: EMPTY
5588: LIST
5589: LIST
5590: PUSH
5591: LD_INT 34
5593: PUSH
5594: LD_INT 29
5596: PUSH
5597: EMPTY
5598: LIST
5599: LIST
5600: PUSH
5601: LD_INT 30
5603: PUSH
5604: LD_INT 21
5606: PUSH
5607: EMPTY
5608: LIST
5609: LIST
5610: PUSH
5611: LD_INT 34
5613: PUSH
5614: LD_INT 8
5616: PUSH
5617: EMPTY
5618: LIST
5619: LIST
5620: PUSH
5621: LD_INT 34
5623: PUSH
5624: LD_INT 48
5626: PUSH
5627: EMPTY
5628: LIST
5629: LIST
5630: PUSH
5631: LD_INT 31
5633: PUSH
5634: LD_INT 25
5636: PUSH
5637: EMPTY
5638: LIST
5639: LIST
5640: PUSH
5641: LD_INT 35
5643: PUSH
5644: LD_INT 8
5646: PUSH
5647: EMPTY
5648: LIST
5649: LIST
5650: PUSH
5651: LD_INT 35
5653: PUSH
5654: LD_INT 48
5656: PUSH
5657: EMPTY
5658: LIST
5659: LIST
5660: PUSH
5661: EMPTY
5662: LIST
5663: LIST
5664: LIST
5665: LIST
5666: LIST
5667: LIST
5668: LIST
5669: LIST
5670: LIST
5671: LIST
5672: LIST
5673: LIST
5674: LIST
5675: LIST
5676: LIST
5677: LIST
5678: PUSH
5679: EMPTY
5680: LIST
5681: LIST
5682: PPUSH
5683: CALL_OW 69
5687: IN
5688: NOT
5689: IFFALSE 5693
// exit ;
5691: GO 6181
// if GetBaseMaterials ( GetBase ( lab ) ) [ 3 ] < artifactsSibCost [ 2 ] then
5693: LD_VAR 0 7
5697: PPUSH
5698: CALL_OW 274
5702: PPUSH
5703: CALL 60084 0 1
5707: PUSH
5708: LD_INT 3
5710: ARRAY
5711: PUSH
5712: LD_EXP 5
5716: PUSH
5717: LD_INT 2
5719: ARRAY
5720: LESS
5721: IFFALSE 5725
// begin exit ;
5723: GO 6181
// end ; SetResourceType ( base , mat_siberit , ( GetResourceType ( base , mat_siberit ) - artifactsSibCost [ 2 ] ) ) ;
5725: LD_VAR 0 8
5729: PPUSH
5730: LD_INT 3
5732: PPUSH
5733: LD_VAR 0 8
5737: PPUSH
5738: LD_INT 3
5740: PPUSH
5741: CALL_OW 275
5745: PUSH
5746: LD_EXP 5
5750: PUSH
5751: LD_INT 2
5753: ARRAY
5754: MINUS
5755: PPUSH
5756: CALL_OW 277
// artifactsReady := Replace ( artifactsReady , side , Replace ( artifactsReady [ side ] , 2 , false ) ) ;
5760: LD_ADDR_EXP 7
5764: PUSH
5765: LD_EXP 7
5769: PPUSH
5770: LD_VAR 0 1
5774: PPUSH
5775: LD_EXP 7
5779: PUSH
5780: LD_VAR 0 1
5784: ARRAY
5785: PPUSH
5786: LD_INT 2
5788: PPUSH
5789: LD_INT 0
5791: PPUSH
5792: CALL_OW 1
5796: PPUSH
5797: CALL_OW 1
5801: ST_TO_ADDR
// KillUnit ( x ) ;
5802: LD_VAR 0 3
5806: PPUSH
5807: CALL_OW 66
// if GetWeapon ( x ) in [ us_siberium_rocket , ru_siberium_rocket ] or GetBWeapon ( x ) in [ us_siberium_rocket , ru_siberium_rocket ] then
5811: LD_VAR 0 3
5815: PPUSH
5816: CALL_OW 264
5820: PUSH
5821: LD_INT 8
5823: PUSH
5824: LD_INT 48
5826: PUSH
5827: EMPTY
5828: LIST
5829: LIST
5830: IN
5831: IFTRUE 5855
5833: PUSH
5834: LD_VAR 0 3
5838: PPUSH
5839: CALL_OW 269
5843: PUSH
5844: LD_INT 8
5846: PUSH
5847: LD_INT 48
5849: PUSH
5850: EMPTY
5851: LIST
5852: LIST
5853: IN
5854: OR
5855: IFFALSE 5874
// begin ArtContamination ( x , y , 50 ) ;
5857: LD_VAR 0 3
5861: PPUSH
5862: LD_VAR 0 4
5866: PPUSH
5867: LD_INT 50
5869: PPUSH
5870: CALL_OW 495
// end ; wait ( artifactsRecharge [ 2 ] ) ;
5874: LD_EXP 4
5878: PUSH
5879: LD_INT 2
5881: ARRAY
5882: PPUSH
5883: CALL_OW 67
// artifactsReady := Replace ( artifactsReady , side , Replace ( artifactsReady [ side ] , 2 , true ) ) ;
5887: LD_ADDR_EXP 7
5891: PUSH
5892: LD_EXP 7
5896: PPUSH
5897: LD_VAR 0 1
5901: PPUSH
5902: LD_EXP 7
5906: PUSH
5907: LD_VAR 0 1
5911: ARRAY
5912: PPUSH
5913: LD_INT 2
5915: PPUSH
5916: LD_INT 1
5918: PPUSH
5919: CALL_OW 1
5923: PPUSH
5924: CALL_OW 1
5928: ST_TO_ADDR
// end ; if icon = artifactsButtons [ 3 ] [ 1 ] then
5929: LD_VAR 0 2
5933: PUSH
5934: LD_EXP 10
5938: PUSH
5939: LD_INT 3
5941: ARRAY
5942: PUSH
5943: LD_INT 1
5945: ARRAY
5946: EQUAL
5947: IFFALSE 6181
// begin lab := NearestUnitToXY ( labs , artifactsPos [ 3 ] [ 1 ] , artifactsPos [ 3 ] [ 2 ] ) ;
5949: LD_ADDR_VAR 0 7
5953: PUSH
5954: LD_VAR 0 6
5958: PPUSH
5959: LD_EXP 3
5963: PUSH
5964: LD_INT 3
5966: ARRAY
5967: PUSH
5968: LD_INT 1
5970: ARRAY
5971: PPUSH
5972: LD_EXP 3
5976: PUSH
5977: LD_INT 3
5979: ARRAY
5980: PUSH
5981: LD_INT 2
5983: ARRAY
5984: PPUSH
5985: CALL_OW 73
5989: ST_TO_ADDR
// base := GetBase ( lab ) ;
5990: LD_ADDR_VAR 0 8
5994: PUSH
5995: LD_VAR 0 7
5999: PPUSH
6000: CALL_OW 274
6004: ST_TO_ADDR
// if GetBaseMaterials ( base ) [ 3 ] < artifactsSibCost [ 3 ] then
6005: LD_VAR 0 8
6009: PPUSH
6010: CALL 60084 0 1
6014: PUSH
6015: LD_INT 3
6017: ARRAY
6018: PUSH
6019: LD_EXP 5
6023: PUSH
6024: LD_INT 3
6026: ARRAY
6027: LESS
6028: IFFALSE 6032
// begin exit ;
6030: GO 6181
// end ; SetResourceType ( base , mat_siberit , ( GetResourceType ( base , mat_siberit ) - artifactsSibCost [ 3 ] ) ) ;
6032: LD_VAR 0 8
6036: PPUSH
6037: LD_INT 3
6039: PPUSH
6040: LD_VAR 0 8
6044: PPUSH
6045: LD_INT 3
6047: PPUSH
6048: CALL_OW 275
6052: PUSH
6053: LD_EXP 5
6057: PUSH
6058: LD_INT 3
6060: ARRAY
6061: MINUS
6062: PPUSH
6063: CALL_OW 277
// artifactsReady := Replace ( artifactsReady , side , Replace ( artifactsReady [ side ] , 3 , false ) ) ;
6067: LD_ADDR_EXP 7
6071: PUSH
6072: LD_EXP 7
6076: PPUSH
6077: LD_VAR 0 1
6081: PPUSH
6082: LD_EXP 7
6086: PUSH
6087: LD_VAR 0 1
6091: ARRAY
6092: PPUSH
6093: LD_INT 3
6095: PPUSH
6096: LD_INT 0
6098: PPUSH
6099: CALL_OW 1
6103: PPUSH
6104: CALL_OW 1
6108: ST_TO_ADDR
// ArtContamination ( x , y , 50 ) ;
6109: LD_VAR 0 3
6113: PPUSH
6114: LD_VAR 0 4
6118: PPUSH
6119: LD_INT 50
6121: PPUSH
6122: CALL_OW 495
// wait ( artifactsRecharge [ 3 ] ) ;
6126: LD_EXP 4
6130: PUSH
6131: LD_INT 3
6133: ARRAY
6134: PPUSH
6135: CALL_OW 67
// artifactsReady := Replace ( artifactsReady , side , Replace ( artifactsReady [ side ] , 3 , true ) ) ;
6139: LD_ADDR_EXP 7
6143: PUSH
6144: LD_EXP 7
6148: PPUSH
6149: LD_VAR 0 1
6153: PPUSH
6154: LD_EXP 7
6158: PUSH
6159: LD_VAR 0 1
6163: ARRAY
6164: PPUSH
6165: LD_INT 3
6167: PPUSH
6168: LD_INT 1
6170: PPUSH
6171: CALL_OW 1
6175: PPUSH
6176: CALL_OW 1
6180: ST_TO_ADDR
// end ; end ;
6181: PPOPN 9
6183: END
// on SpecResearchCancel ( lab , progress ) do var side , tag ;
6184: LD_INT 0
6186: PPUSH
6187: PPUSH
// begin tag := GetTag ( lab ) ;
6188: LD_ADDR_VAR 0 4
6192: PUSH
6193: LD_VAR 0 1
6197: PPUSH
6198: CALL_OW 110
6202: ST_TO_ADDR
// side := GetSide ( lab ) ;
6203: LD_ADDR_VAR 0 3
6207: PUSH
6208: LD_VAR 0 1
6212: PPUSH
6213: CALL_OW 255
6217: ST_TO_ADDR
// SetArtifactUse ( side , artifactsButtons [ tag ] [ 3 ] , art_instant , lab ) ;
6218: LD_VAR 0 3
6222: PPUSH
6223: LD_EXP 10
6227: PUSH
6228: LD_VAR 0 4
6232: ARRAY
6233: PUSH
6234: LD_INT 3
6236: ARRAY
6237: PPUSH
6238: LD_INT 2
6240: PPUSH
6241: LD_VAR 0 1
6245: PPUSH
6246: CALL_OW 468
// artifactsResProgress := Replace ( artifactsResProgress , side , Replace ( artifactsResProgress [ side ] , tag , progress ) ) ;
6250: LD_ADDR_EXP 9
6254: PUSH
6255: LD_EXP 9
6259: PPUSH
6260: LD_VAR 0 3
6264: PPUSH
6265: LD_EXP 9
6269: PUSH
6270: LD_VAR 0 3
6274: ARRAY
6275: PPUSH
6276: LD_VAR 0 4
6280: PPUSH
6281: LD_VAR 0 2
6285: PPUSH
6286: CALL_OW 1
6290: PPUSH
6291: CALL_OW 1
6295: ST_TO_ADDR
// artifactsLabsWorking := Replace ( artifactsLabsWorking , tag , artifactsLabsWorking [ tag ] diff lab ) ;
6296: LD_ADDR_EXP 11
6300: PUSH
6301: LD_EXP 11
6305: PPUSH
6306: LD_VAR 0 4
6310: PPUSH
6311: LD_EXP 11
6315: PUSH
6316: LD_VAR 0 4
6320: ARRAY
6321: PUSH
6322: LD_VAR 0 1
6326: DIFF
6327: PPUSH
6328: CALL_OW 1
6332: ST_TO_ADDR
// SetTag ( lab , 0 ) ;
6333: LD_VAR 0 1
6337: PPUSH
6338: LD_INT 0
6340: PPUSH
6341: CALL_OW 109
// end ;
6345: PPOPN 4
6347: END
// on SpecResearchComplete ( lab ) do var side , tag ;
6348: LD_INT 0
6350: PPUSH
6351: PPUSH
// begin tag := GetTag ( lab ) ;
6352: LD_ADDR_VAR 0 3
6356: PUSH
6357: LD_VAR 0 1
6361: PPUSH
6362: CALL_OW 110
6366: ST_TO_ADDR
// side := GetSide ( lab ) ;
6367: LD_ADDR_VAR 0 2
6371: PUSH
6372: LD_VAR 0 1
6376: PPUSH
6377: CALL_OW 255
6381: ST_TO_ADDR
// SetArtifactUse ( side , artifactsButtons [ tag ] [ 3 ] , art_no , lab ) ;
6382: LD_VAR 0 2
6386: PPUSH
6387: LD_EXP 10
6391: PUSH
6392: LD_VAR 0 3
6396: ARRAY
6397: PUSH
6398: LD_INT 3
6400: ARRAY
6401: PPUSH
6402: LD_INT 0
6404: PPUSH
6405: LD_VAR 0 1
6409: PPUSH
6410: CALL_OW 468
// artifactsResearched := Replace ( artifactsResearched , side , Replace ( artifactsResearched [ side ] , tag , 1 ) ) ;
6414: LD_ADDR_EXP 6
6418: PUSH
6419: LD_EXP 6
6423: PPUSH
6424: LD_VAR 0 2
6428: PPUSH
6429: LD_EXP 6
6433: PUSH
6434: LD_VAR 0 2
6438: ARRAY
6439: PPUSH
6440: LD_VAR 0 3
6444: PPUSH
6445: LD_INT 1
6447: PPUSH
6448: CALL_OW 1
6452: PPUSH
6453: CALL_OW 1
6457: ST_TO_ADDR
// artifactsReady := Replace ( artifactsReady , side , Replace ( artifactsReady [ side ] , tag , 1 ) ) ;
6458: LD_ADDR_EXP 7
6462: PUSH
6463: LD_EXP 7
6467: PPUSH
6468: LD_VAR 0 2
6472: PPUSH
6473: LD_EXP 7
6477: PUSH
6478: LD_VAR 0 2
6482: ARRAY
6483: PPUSH
6484: LD_VAR 0 3
6488: PPUSH
6489: LD_INT 1
6491: PPUSH
6492: CALL_OW 1
6496: PPUSH
6497: CALL_OW 1
6501: ST_TO_ADDR
// artifactsLabsWorking := Replace ( artifactsLabsWorking , tag , artifactsLabsWorking [ tag ] diff lab ) ;
6502: LD_ADDR_EXP 11
6506: PUSH
6507: LD_EXP 11
6511: PPUSH
6512: LD_VAR 0 3
6516: PPUSH
6517: LD_EXP 11
6521: PUSH
6522: LD_VAR 0 3
6526: ARRAY
6527: PUSH
6528: LD_VAR 0 1
6532: DIFF
6533: PPUSH
6534: CALL_OW 1
6538: ST_TO_ADDR
// end ;
6539: PPOPN 3
6541: END
// on ArtifactLoaded ( cargo , artifact ) do begin SetTag ( cargo , artifact ) ;
6542: LD_VAR 0 1
6546: PPUSH
6547: LD_VAR 0 2
6551: PPUSH
6552: CALL_OW 109
// end ;
6556: PPOPN 2
6558: END
// on ArtifactUnloaded ( cargo , artifact ) do begin SetTag ( cargo , 0 ) ;
6559: LD_VAR 0 1
6563: PPUSH
6564: LD_INT 0
6566: PPUSH
6567: CALL_OW 109
// end ; end_of_file end_of_file
6571: PPOPN 2
6573: END
// export mpGameType , mpGameSettingsKeys , mpGameSettingsValues , mpGameSettings , mpSidePositions , mpSideTeams , mpSideNations , mpTeams , mpTeamGame , mpOilDeposits , mpSibDeposits , mpDepots , mpStartingResources , mpSharedVision , mpBuildings , mpMarkedAreas , mpBuildUpAreas , mpBuildUpTime , mpStartPos , mpBattleFlag , mpBattleFlags , mpPeopleAmount , mpPeopleSkill , mpSibDetection , mpShipments , mpSibBomb , mpMapSize , mpApemans , mpApemansArea , mpApePosIndex , mpRespawn , mpKingArea , mpPoints , mpVehicles , mpEmissions , mpDisplayStrings , mpGameActive , mpRespawnPull , mpGlobalOilDeposits , mpGlobalSibDeposits , mpTeleports , mpArtifacts , mpBlockRespThread ; export function InitMultiplayer ; var i ; begin
6574: LD_INT 0
6576: PPUSH
6577: PPUSH
// disable ( mpActive ) ;
6578: LD_INT 100
6580: DISABLE_MARKED
// disable ( mpWin ) ;
6581: LD_INT 101
6583: DISABLE_MARKED
// disable ( mpLose ) ;
6584: LD_INT 102
6586: DISABLE_MARKED
// mpGameType := 0 ;
6587: LD_ADDR_EXP 12
6591: PUSH
6592: LD_INT 0
6594: ST_TO_ADDR
// mpGameSettings := [ ] ;
6595: LD_ADDR_EXP 15
6599: PUSH
6600: EMPTY
6601: ST_TO_ADDR
// mpGameSettingsKeys := [ ] ;
6602: LD_ADDR_EXP 13
6606: PUSH
6607: EMPTY
6608: ST_TO_ADDR
// mpGameSettingsValues := [ ] ;
6609: LD_ADDR_EXP 14
6613: PUSH
6614: EMPTY
6615: ST_TO_ADDR
// mpMapSize := [ 2 , 2 ] ;
6616: LD_ADDR_EXP 38
6620: PUSH
6621: LD_INT 2
6623: PUSH
6624: LD_INT 2
6626: PUSH
6627: EMPTY
6628: LIST
6629: LIST
6630: ST_TO_ADDR
// mpOilDeposits := [ ] ;
6631: LD_ADDR_EXP 21
6635: PUSH
6636: EMPTY
6637: ST_TO_ADDR
// mpSibDeposits := [ ] ;
6638: LD_ADDR_EXP 22
6642: PUSH
6643: EMPTY
6644: ST_TO_ADDR
// mpGlobalOilDeposits := [ ] ;
6645: LD_ADDR_EXP 50
6649: PUSH
6650: EMPTY
6651: ST_TO_ADDR
// mpGlobalSibDeposits := [ ] ;
6652: LD_ADDR_EXP 51
6656: PUSH
6657: EMPTY
6658: ST_TO_ADDR
// mpDepots := [ ] ;
6659: LD_ADDR_EXP 23
6663: PUSH
6664: EMPTY
6665: ST_TO_ADDR
// mpBuildings := [ ] ;
6666: LD_ADDR_EXP 26
6670: PUSH
6671: EMPTY
6672: ST_TO_ADDR
// mpMarkedAreas := [ ] ;
6673: LD_ADDR_EXP 27
6677: PUSH
6678: EMPTY
6679: ST_TO_ADDR
// mpBuildUpAreas := [ ] ;
6680: LD_ADDR_EXP 28
6684: PUSH
6685: EMPTY
6686: ST_TO_ADDR
// mpBuildUpTime := [ ] ;
6687: LD_ADDR_EXP 29
6691: PUSH
6692: EMPTY
6693: ST_TO_ADDR
// mpStartingResources := [ ] ;
6694: LD_ADDR_EXP 24
6698: PUSH
6699: EMPTY
6700: ST_TO_ADDR
// mpStartPos := [ ] ;
6701: LD_ADDR_EXP 30
6705: PUSH
6706: EMPTY
6707: ST_TO_ADDR
// mpBattleFlag := - 1 ;
6708: LD_ADDR_EXP 31
6712: PUSH
6713: LD_INT 1
6715: NEG
6716: ST_TO_ADDR
// mpBattleFlags := [ ] ;
6717: LD_ADDR_EXP 32
6721: PUSH
6722: EMPTY
6723: ST_TO_ADDR
// mpApemans := [ ] ;
6724: LD_ADDR_EXP 39
6728: PUSH
6729: EMPTY
6730: ST_TO_ADDR
// mpApemansArea := [ ] ;
6731: LD_ADDR_EXP 40
6735: PUSH
6736: EMPTY
6737: ST_TO_ADDR
// mpRespawn := [ ] ;
6738: LD_ADDR_EXP 42
6742: PUSH
6743: EMPTY
6744: ST_TO_ADDR
// mpKingArea := 0 ;
6745: LD_ADDR_EXP 43
6749: PUSH
6750: LD_INT 0
6752: ST_TO_ADDR
// mpPoints := [ ] ;
6753: LD_ADDR_EXP 44
6757: PUSH
6758: EMPTY
6759: ST_TO_ADDR
// mpVehicles := 0 ;
6760: LD_ADDR_EXP 45
6764: PUSH
6765: LD_INT 0
6767: ST_TO_ADDR
// mpShipments := 0 ;
6768: LD_ADDR_EXP 36
6772: PUSH
6773: LD_INT 0
6775: ST_TO_ADDR
// mpRespawnPull := [ [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
6776: LD_ADDR_EXP 49
6780: PUSH
6781: EMPTY
6782: PUSH
6783: EMPTY
6784: PUSH
6785: EMPTY
6786: PUSH
6787: EMPTY
6788: PUSH
6789: EMPTY
6790: PUSH
6791: EMPTY
6792: PUSH
6793: EMPTY
6794: PUSH
6795: EMPTY
6796: PUSH
6797: EMPTY
6798: LIST
6799: LIST
6800: LIST
6801: LIST
6802: LIST
6803: LIST
6804: LIST
6805: LIST
6806: ST_TO_ADDR
// mpApePosIndex := [ [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
6807: LD_ADDR_EXP 41
6811: PUSH
6812: EMPTY
6813: PUSH
6814: EMPTY
6815: PUSH
6816: EMPTY
6817: PUSH
6818: EMPTY
6819: PUSH
6820: EMPTY
6821: PUSH
6822: EMPTY
6823: PUSH
6824: EMPTY
6825: PUSH
6826: EMPTY
6827: PUSH
6828: EMPTY
6829: LIST
6830: LIST
6831: LIST
6832: LIST
6833: LIST
6834: LIST
6835: LIST
6836: LIST
6837: ST_TO_ADDR
// mpEmissions := 0 ;
6838: LD_ADDR_EXP 46
6842: PUSH
6843: LD_INT 0
6845: ST_TO_ADDR
// mpTeleports := 0 ;
6846: LD_ADDR_EXP 52
6850: PUSH
6851: LD_INT 0
6853: ST_TO_ADDR
// mpArtifacts := 0 ;
6854: LD_ADDR_EXP 53
6858: PUSH
6859: LD_INT 0
6861: ST_TO_ADDR
// mpPeopleSkill := 3 ;
6862: LD_ADDR_EXP 34
6866: PUSH
6867: LD_INT 3
6869: ST_TO_ADDR
// mpPeopleAmount := 15 ;
6870: LD_ADDR_EXP 33
6874: PUSH
6875: LD_INT 15
6877: ST_TO_ADDR
// mpDisplayStrings := 0 ;
6878: LD_ADDR_EXP 47
6882: PUSH
6883: LD_INT 0
6885: ST_TO_ADDR
// mpGameActive := false ;
6886: LD_ADDR_EXP 48
6890: PUSH
6891: LD_INT 0
6893: ST_TO_ADDR
// mpBlockRespThread := false ;
6894: LD_ADDR_EXP 54
6898: PUSH
6899: LD_INT 0
6901: ST_TO_ADDR
// for i := 1 to 32 do
6902: LD_ADDR_VAR 0 2
6906: PUSH
6907: DOUBLE
6908: LD_INT 1
6910: DEC
6911: ST_TO_ADDR
6912: LD_INT 32
6914: PUSH
6915: FOR_TO
6916: IFFALSE 6943
// mpGameSettings := Replace ( mpGameSettings , i , 0 ) ;
6918: LD_ADDR_EXP 15
6922: PUSH
6923: LD_EXP 15
6927: PPUSH
6928: LD_VAR 0 2
6932: PPUSH
6933: LD_INT 0
6935: PPUSH
6936: CALL_OW 1
6940: ST_TO_ADDR
6941: GO 6915
6943: POP
6944: POP
// end ;
6945: LD_VAR 0 1
6949: RET
// export function StartMultiplayer ; var i , j , b , x , y , side , pos , nation , ape , team , setting , resources , gameTypes ; begin
6950: LD_INT 0
6952: PPUSH
6953: PPUSH
6954: PPUSH
6955: PPUSH
6956: PPUSH
6957: PPUSH
6958: PPUSH
6959: PPUSH
6960: PPUSH
6961: PPUSH
6962: PPUSH
6963: PPUSH
6964: PPUSH
6965: PPUSH
// gameTypes := [ GameTypeNormal , GameTypeSurvival , GameTypeKing , GameTypeFamine ] ;
6966: LD_ADDR_VAR 0 14
6970: PUSH
6971: LD_INT 1
6973: PUSH
6974: LD_INT 2
6976: PUSH
6977: LD_INT 3
6979: PUSH
6980: LD_INT 5
6982: PUSH
6983: EMPTY
6984: LIST
6985: LIST
6986: LIST
6987: LIST
6988: ST_TO_ADDR
// for i in gameTypes do
6989: LD_ADDR_VAR 0 2
6993: PUSH
6994: LD_VAR 0 14
6998: PUSH
6999: FOR_IN
7000: IFFALSE 7009
// disable ( i ) ;
7002: LD_VAR 0 2
7006: DISABLE_MARKED
7007: GO 6999
7009: POP
7010: POP
// if Multiplayer then
7011: LD_OWVAR 4
7015: IFFALSE 7199
// begin mpGameType := mp_game_type ;
7017: LD_ADDR_EXP 12
7021: PUSH
7022: LD_OWVAR 6
7026: ST_TO_ADDR
// your_side := mp_player_side ;
7027: LD_ADDR_OWVAR 2
7031: PUSH
7032: LD_OWVAR 7
7036: ST_TO_ADDR
// mpSidePositions := mp_sides_positions ;
7037: LD_ADDR_EXP 16
7041: PUSH
7042: LD_OWVAR 17
7046: ST_TO_ADDR
// mpSideTeams := mp_sides_teams ;
7047: LD_ADDR_EXP 17
7051: PUSH
7052: LD_OWVAR 15
7056: ST_TO_ADDR
// mpSideNations := mp_sides_nations ;
7057: LD_ADDR_EXP 18
7061: PUSH
7062: LD_OWVAR 16
7066: ST_TO_ADDR
// mpTeams := mp_teams ;
7067: LD_ADDR_EXP 19
7071: PUSH
7072: LD_OWVAR 12
7076: ST_TO_ADDR
// for i := 1 to Count ( mpGameSettingsKeys ) do
7077: LD_ADDR_VAR 0 2
7081: PUSH
7082: DOUBLE
7083: LD_INT 1
7085: DEC
7086: ST_TO_ADDR
7087: LD_EXP 13
7091: PPUSH
7092: CALL 23922 0 1
7096: PUSH
7097: FOR_TO
7098: IFFALSE 7174
// begin setting := mpGameSettingsKeys [ i ] ;
7100: LD_ADDR_VAR 0 12
7104: PUSH
7105: LD_EXP 13
7109: PUSH
7110: LD_VAR 0 2
7114: ARRAY
7115: ST_TO_ADDR
// if setting then
7116: LD_VAR 0 12
7120: IFFALSE 7172
// mpGameSettings := Replace ( mpGameSettings , i , mpGameSettingsValues [ i ] [ GetMultiplayerSetting ( i - 1 ) + 1 ] ) ;
7122: LD_ADDR_EXP 15
7126: PUSH
7127: LD_EXP 15
7131: PPUSH
7132: LD_VAR 0 2
7136: PPUSH
7137: LD_EXP 14
7141: PUSH
7142: LD_VAR 0 2
7146: ARRAY
7147: PUSH
7148: LD_VAR 0 2
7152: PUSH
7153: LD_INT 1
7155: MINUS
7156: PPUSH
7157: CALL_OW 426
7161: PUSH
7162: LD_INT 1
7164: PLUS
7165: ARRAY
7166: PPUSH
7167: CALL_OW 1
7171: ST_TO_ADDR
// end ;
7172: GO 7097
7174: POP
7175: POP
// mpTeamGame := ( mpSideTeams diff [ 0 ] ) > 1 ;
7176: LD_ADDR_EXP 20
7180: PUSH
7181: LD_EXP 17
7185: PUSH
7186: LD_INT 0
7188: PUSH
7189: EMPTY
7190: LIST
7191: DIFF
7192: PUSH
7193: LD_INT 1
7195: GREATER
7196: ST_TO_ADDR
// end else
7197: GO 7199
// begin end ; GetMultiplayerMapData ( mpGameType ) ;
7199: LD_EXP 12
7203: PPUSH
7204: CALL 842 0 1
// if Count ( mpMarkedAreas ) then
7208: LD_EXP 27
7212: PPUSH
7213: CALL 23922 0 1
7217: IFFALSE 7248
// begin for i in mpMarkedAreas do
7219: LD_ADDR_VAR 0 2
7223: PUSH
7224: LD_EXP 27
7228: PUSH
7229: FOR_IN
7230: IFFALSE 7246
// SetAreaMapShow ( i , 0 ) ;
7232: LD_VAR 0 2
7236: PPUSH
7237: LD_INT 0
7239: PPUSH
7240: CALL_OW 424
7244: GO 7229
7246: POP
7247: POP
// end ; for i := 1 to 8 do
7248: LD_ADDR_VAR 0 2
7252: PUSH
7253: DOUBLE
7254: LD_INT 1
7256: DEC
7257: ST_TO_ADDR
7258: LD_INT 8
7260: PUSH
7261: FOR_TO
7262: IFFALSE 8598
// begin if not mpSidePositions [ i ] then
7264: LD_EXP 16
7268: PUSH
7269: LD_VAR 0 2
7273: ARRAY
7274: NOT
7275: IFFALSE 7279
// continue ;
7277: GO 7261
// side := i ;
7279: LD_ADDR_VAR 0 7
7283: PUSH
7284: LD_VAR 0 2
7288: ST_TO_ADDR
// nation := mpSideNations [ i ] ;
7289: LD_ADDR_VAR 0 9
7293: PUSH
7294: LD_EXP 18
7298: PUSH
7299: LD_VAR 0 2
7303: ARRAY
7304: ST_TO_ADDR
// pos := mpSidePositions [ i ] ;
7305: LD_ADDR_VAR 0 8
7309: PUSH
7310: LD_EXP 16
7314: PUSH
7315: LD_VAR 0 2
7319: ARRAY
7320: ST_TO_ADDR
// if Count ( mpOilDeposits ) then
7321: LD_EXP 21
7325: PPUSH
7326: CALL 23922 0 1
7330: IFFALSE 7407
// begin for j in mpOilDeposits [ pos ] do
7332: LD_ADDR_VAR 0 3
7336: PUSH
7337: LD_EXP 21
7341: PUSH
7342: LD_VAR 0 8
7346: ARRAY
7347: PUSH
7348: FOR_IN
7349: IFFALSE 7405
// begin CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_oil ) ;
7351: LD_VAR 0 3
7355: PUSH
7356: LD_INT 1
7358: ARRAY
7359: PPUSH
7360: LD_VAR 0 3
7364: PUSH
7365: LD_INT 2
7367: ARRAY
7368: PPUSH
7369: LD_INT 2
7371: PPUSH
7372: CALL_OW 62
// SetResourceVisibility ( j [ 1 ] , j [ 2 ] , side ) ;
7376: LD_VAR 0 3
7380: PUSH
7381: LD_INT 1
7383: ARRAY
7384: PPUSH
7385: LD_VAR 0 3
7389: PUSH
7390: LD_INT 2
7392: ARRAY
7393: PPUSH
7394: LD_VAR 0 7
7398: PPUSH
7399: CALL_OW 441
// end ;
7403: GO 7348
7405: POP
7406: POP
// end ; if Count ( mpSibDeposits ) then
7407: LD_EXP 22
7411: PPUSH
7412: CALL 23922 0 1
7416: IFFALSE 7493
// begin for j in mpSibDeposits [ pos ] do
7418: LD_ADDR_VAR 0 3
7422: PUSH
7423: LD_EXP 22
7427: PUSH
7428: LD_VAR 0 8
7432: ARRAY
7433: PUSH
7434: FOR_IN
7435: IFFALSE 7491
// begin CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_siberit ) ;
7437: LD_VAR 0 3
7441: PUSH
7442: LD_INT 1
7444: ARRAY
7445: PPUSH
7446: LD_VAR 0 3
7450: PUSH
7451: LD_INT 2
7453: ARRAY
7454: PPUSH
7455: LD_INT 3
7457: PPUSH
7458: CALL_OW 62
// SetResourceVisibility ( j [ 1 ] , j [ 2 ] , side ) ;
7462: LD_VAR 0 3
7466: PUSH
7467: LD_INT 1
7469: ARRAY
7470: PPUSH
7471: LD_VAR 0 3
7475: PUSH
7476: LD_INT 2
7478: ARRAY
7479: PPUSH
7480: LD_VAR 0 7
7484: PPUSH
7485: CALL_OW 441
// end ;
7489: GO 7434
7491: POP
7492: POP
// end ; InitBc ;
7493: CALL_OW 21
// InitUc ;
7497: CALL_OW 18
// uc_side := side ;
7501: LD_ADDR_OWVAR 20
7505: PUSH
7506: LD_VAR 0 7
7510: ST_TO_ADDR
// uc_nation := nation ;
7511: LD_ADDR_OWVAR 21
7515: PUSH
7516: LD_VAR 0 9
7520: ST_TO_ADDR
// if mpBattleFlag > - 1 then
7521: LD_EXP 31
7525: PUSH
7526: LD_INT 1
7528: NEG
7529: GREATER
7530: IFFALSE 7689
// begin x := mpStartPos [ pos ] [ 1 ] ;
7532: LD_ADDR_VAR 0 5
7536: PUSH
7537: LD_EXP 30
7541: PUSH
7542: LD_VAR 0 8
7546: ARRAY
7547: PUSH
7548: LD_INT 1
7550: ARRAY
7551: ST_TO_ADDR
// y := mpStartPos [ pos ] [ 2 ] ;
7552: LD_ADDR_VAR 0 6
7556: PUSH
7557: LD_EXP 30
7561: PUSH
7562: LD_VAR 0 8
7566: ARRAY
7567: PUSH
7568: LD_INT 2
7570: ARRAY
7571: ST_TO_ADDR
// PlaceEnvironment ( x , y , 12 , 2 ) ;
7572: LD_VAR 0 5
7576: PPUSH
7577: LD_VAR 0 6
7581: PPUSH
7582: LD_INT 12
7584: PPUSH
7585: LD_INT 2
7587: PPUSH
7588: CALL_OW 349
// mpBattleFlags := Replace ( mpBattleFlags , side , SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 70 ] , [ bfo_defend_bonus_building , 40 ] , [ bfo_range , 25 ] , [ bfo_height , 100 ] ] ) ) ;
7592: LD_ADDR_EXP 32
7596: PUSH
7597: LD_EXP 32
7601: PPUSH
7602: LD_VAR 0 7
7606: PPUSH
7607: LD_VAR 0 7
7611: PPUSH
7612: LD_VAR 0 5
7616: PPUSH
7617: LD_VAR 0 6
7621: PPUSH
7622: LD_INT 1
7624: PUSH
7625: LD_INT 100
7627: PUSH
7628: EMPTY
7629: LIST
7630: LIST
7631: PUSH
7632: LD_INT 2
7634: PUSH
7635: LD_INT 70
7637: PUSH
7638: EMPTY
7639: LIST
7640: LIST
7641: PUSH
7642: LD_INT 3
7644: PUSH
7645: LD_INT 40
7647: PUSH
7648: EMPTY
7649: LIST
7650: LIST
7651: PUSH
7652: LD_INT 10
7654: PUSH
7655: LD_INT 25
7657: PUSH
7658: EMPTY
7659: LIST
7660: LIST
7661: PUSH
7662: LD_INT 20
7664: PUSH
7665: LD_INT 100
7667: PUSH
7668: EMPTY
7669: LIST
7670: LIST
7671: PUSH
7672: EMPTY
7673: LIST
7674: LIST
7675: LIST
7676: LIST
7677: LIST
7678: PPUSH
7679: CALL_OW 418
7683: PPUSH
7684: CALL_OW 1
7688: ST_TO_ADDR
// end ; if Count ( mpDepots ) then
7689: LD_EXP 23
7693: PPUSH
7694: CALL 23922 0 1
7698: IFFALSE 7882
// begin if mpGameType = GameTypeSurvival then
7700: LD_EXP 12
7704: PUSH
7705: LD_INT 2
7707: EQUAL
7708: IFFALSE 7728
// begin bc_level := 10 ;
7710: LD_ADDR_OWVAR 43
7714: PUSH
7715: LD_INT 10
7717: ST_TO_ADDR
// bc_type := b_warehouse ;
7718: LD_ADDR_OWVAR 42
7722: PUSH
7723: LD_INT 1
7725: ST_TO_ADDR
// end else
7726: GO 7744
// begin bc_level := 0 ;
7728: LD_ADDR_OWVAR 43
7732: PUSH
7733: LD_INT 0
7735: ST_TO_ADDR
// bc_type := b_depot ;
7736: LD_ADDR_OWVAR 42
7740: PUSH
7741: LD_INT 0
7743: ST_TO_ADDR
// end ; b := CreateAndPlaceBuildingXYD ( mpDepots [ pos ] [ 1 ] , mpDepots [ pos ] [ 2 ] , mpDepots [ pos ] [ 3 ] ) ;
7744: LD_ADDR_VAR 0 4
7748: PUSH
7749: LD_EXP 23
7753: PUSH
7754: LD_VAR 0 8
7758: ARRAY
7759: PUSH
7760: LD_INT 1
7762: ARRAY
7763: PPUSH
7764: LD_EXP 23
7768: PUSH
7769: LD_VAR 0 8
7773: ARRAY
7774: PUSH
7775: LD_INT 2
7777: ARRAY
7778: PPUSH
7779: LD_EXP 23
7783: PUSH
7784: LD_VAR 0 8
7788: ARRAY
7789: PUSH
7790: LD_INT 3
7792: ARRAY
7793: PPUSH
7794: CALL_OW 47
7798: ST_TO_ADDR
// SetBName ( b , @ & side ) ;
7799: LD_VAR 0 4
7803: PPUSH
7804: LD_STRING @
7806: PUSH
7807: LD_VAR 0 7
7811: STR
7812: PPUSH
7813: CALL_OW 500
// if Count ( mpStartingResources ) then
7817: LD_EXP 24
7821: PPUSH
7822: CALL 23922 0 1
7826: IFFALSE 7880
// begin for j := 1 to mpStartingResources do
7828: LD_ADDR_VAR 0 3
7832: PUSH
7833: DOUBLE
7834: LD_INT 1
7836: DEC
7837: ST_TO_ADDR
7838: LD_EXP 24
7842: PUSH
7843: FOR_TO
7844: IFFALSE 7878
// SetResourceType ( GetBase ( b ) , j , mpStartingResources [ j ] ) ;
7846: LD_VAR 0 4
7850: PPUSH
7851: CALL_OW 274
7855: PPUSH
7856: LD_VAR 0 3
7860: PPUSH
7861: LD_EXP 24
7865: PUSH
7866: LD_VAR 0 3
7870: ARRAY
7871: PPUSH
7872: CALL_OW 277
7876: GO 7843
7878: POP
7879: POP
// end ; end else
7880: GO 8089
// if Count ( mpStartingResources ) then
7882: LD_EXP 24
7886: PPUSH
7887: CALL 23922 0 1
7891: IFFALSE 8089
// begin x := mpStartPos [ pos ] [ 1 ] ;
7893: LD_ADDR_VAR 0 5
7897: PUSH
7898: LD_EXP 30
7902: PUSH
7903: LD_VAR 0 8
7907: ARRAY
7908: PUSH
7909: LD_INT 1
7911: ARRAY
7912: ST_TO_ADDR
// y := mpStartPos [ pos ] [ 2 ] ;
7913: LD_ADDR_VAR 0 6
7917: PUSH
7918: LD_EXP 30
7922: PUSH
7923: LD_VAR 0 8
7927: ARRAY
7928: PUSH
7929: LD_INT 2
7931: ARRAY
7932: ST_TO_ADDR
// for j := 1 to mpStartingResources do
7933: LD_ADDR_VAR 0 3
7937: PUSH
7938: DOUBLE
7939: LD_INT 1
7941: DEC
7942: ST_TO_ADDR
7943: LD_EXP 24
7947: PUSH
7948: FOR_TO
7949: IFFALSE 8087
// begin resources := mpStartingResources [ j ] ;
7951: LD_ADDR_VAR 0 13
7955: PUSH
7956: LD_EXP 24
7960: PUSH
7961: LD_VAR 0 3
7965: ARRAY
7966: ST_TO_ADDR
// if resources = 0 then
7967: LD_VAR 0 13
7971: PUSH
7972: LD_INT 0
7974: EQUAL
7975: IFFALSE 7979
// continue ;
7977: GO 7948
// repeat if resources >= 50 then
7979: LD_VAR 0 13
7983: PUSH
7984: LD_INT 50
7986: GREATEREQUAL
7987: IFFALSE 8033
// begin CreateResourcesXYR ( j , 5 , x , y , 6 , false ) ;
7989: LD_VAR 0 3
7993: PPUSH
7994: LD_INT 5
7996: PPUSH
7997: LD_VAR 0 5
8001: PPUSH
8002: LD_VAR 0 6
8006: PPUSH
8007: LD_INT 6
8009: PPUSH
8010: LD_INT 0
8012: PPUSH
8013: CALL_OW 60
// resources := resources - 50 ;
8017: LD_ADDR_VAR 0 13
8021: PUSH
8022: LD_VAR 0 13
8026: PUSH
8027: LD_INT 50
8029: MINUS
8030: ST_TO_ADDR
// end else
8031: GO 8075
// begin CreateResourcesXYR ( j , resources div 10 , x , y , 6 , false ) ;
8033: LD_VAR 0 3
8037: PPUSH
8038: LD_VAR 0 13
8042: PUSH
8043: LD_INT 10
8045: DIV
8046: PPUSH
8047: LD_VAR 0 5
8051: PPUSH
8052: LD_VAR 0 6
8056: PPUSH
8057: LD_INT 6
8059: PPUSH
8060: LD_INT 0
8062: PPUSH
8063: CALL_OW 60
// resources := 0 ;
8067: LD_ADDR_VAR 0 13
8071: PUSH
8072: LD_INT 0
8074: ST_TO_ADDR
// end ; until resources <= 0 ;
8075: LD_VAR 0 13
8079: PUSH
8080: LD_INT 0
8082: LESSEQUAL
8083: IFFALSE 7979
// end ;
8085: GO 7948
8087: POP
8088: POP
// end ; if Count ( mpBuildings ) then
8089: LD_EXP 26
8093: PPUSH
8094: CALL 23922 0 1
8098: IFFALSE 8176
// begin for j in mpBuildings [ pos ] do
8100: LD_ADDR_VAR 0 3
8104: PUSH
8105: LD_EXP 26
8109: PUSH
8110: LD_VAR 0 8
8114: ARRAY
8115: PUSH
8116: FOR_IN
8117: IFFALSE 8174
// begin bc_level := 0 ;
8119: LD_ADDR_OWVAR 43
8123: PUSH
8124: LD_INT 0
8126: ST_TO_ADDR
// bc_type := j [ 1 ] ;
8127: LD_ADDR_OWVAR 42
8131: PUSH
8132: LD_VAR 0 3
8136: PUSH
8137: LD_INT 1
8139: ARRAY
8140: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( j [ 2 ] , j [ 3 ] , j [ 4 ] ) ;
8141: LD_VAR 0 3
8145: PUSH
8146: LD_INT 2
8148: ARRAY
8149: PPUSH
8150: LD_VAR 0 3
8154: PUSH
8155: LD_INT 3
8157: ARRAY
8158: PPUSH
8159: LD_VAR 0 3
8163: PUSH
8164: LD_INT 4
8166: ARRAY
8167: PPUSH
8168: CALL_OW 47
// end ;
8172: GO 8116
8174: POP
8175: POP
// end ; if mpSibDetection and GetTech ( tech_sibdet , side ) = state_enabled then
8176: LD_EXP 35
8180: IFFALSE 8200
8182: PUSH
8183: LD_INT 20
8185: PPUSH
8186: LD_VAR 0 7
8190: PPUSH
8191: CALL_OW 321
8195: PUSH
8196: LD_INT 1
8198: EQUAL
8199: AND
8200: IFFALSE 8217
// SetTech ( tech_SibDet , side , state_researched ) ;
8202: LD_INT 20
8204: PPUSH
8205: LD_VAR 0 7
8209: PPUSH
8210: LD_INT 2
8212: PPUSH
8213: CALL_OW 322
// if not mpArtifacts then
8217: LD_EXP 53
8221: NOT
8222: IFFALSE 8239
// SetTech ( tech_artifact , side , state_disabled ) ;
8224: LD_INT 24
8226: PPUSH
8227: LD_VAR 0 7
8231: PPUSH
8232: LD_INT 0
8234: PPUSH
8235: CALL_OW 322
// if mpSibBomb = 1 then
8239: LD_EXP 37
8243: PUSH
8244: LD_INT 1
8246: EQUAL
8247: IFFALSE 8266
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
8249: LD_INT 25
8251: PPUSH
8252: LD_VAR 0 7
8256: PPUSH
8257: LD_INT 1
8259: PPUSH
8260: CALL_OW 322
// end else
8264: GO 8281
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
8266: LD_INT 25
8268: PPUSH
8269: LD_VAR 0 7
8273: PPUSH
8274: LD_INT 0
8276: PPUSH
8277: CALL_OW 322
// end ; if mpVehicles then
8281: LD_EXP 45
8285: IFFALSE 8384
// begin for j in mpPrepareVehicles ( side , nation , mpVehicles ) do
8287: LD_ADDR_VAR 0 3
8291: PUSH
8292: LD_VAR 0 7
8296: PPUSH
8297: LD_VAR 0 9
8301: PPUSH
8302: LD_EXP 45
8306: PPUSH
8307: CALL 9508 0 3
8311: PUSH
8312: FOR_IN
8313: IFFALSE 8382
// begin SetDir ( j , rand ( 0 , 5 ) ) ;
8315: LD_VAR 0 3
8319: PPUSH
8320: LD_INT 0
8322: PPUSH
8323: LD_INT 5
8325: PPUSH
8326: CALL_OW 12
8330: PPUSH
8331: CALL_OW 233
// PlaceUnitXYR ( j , mpStartPos [ pos ] [ 1 ] , mpStartPos [ pos ] [ 2 ] , 12 , false ) ;
8335: LD_VAR 0 3
8339: PPUSH
8340: LD_EXP 30
8344: PUSH
8345: LD_VAR 0 8
8349: ARRAY
8350: PUSH
8351: LD_INT 1
8353: ARRAY
8354: PPUSH
8355: LD_EXP 30
8359: PUSH
8360: LD_VAR 0 8
8364: ARRAY
8365: PUSH
8366: LD_INT 2
8368: ARRAY
8369: PPUSH
8370: LD_INT 12
8372: PPUSH
8373: LD_INT 0
8375: PPUSH
8376: CALL_OW 50
// end ;
8380: GO 8312
8382: POP
8383: POP
// end ; uc_nation := nation ;
8384: LD_ADDR_OWVAR 21
8388: PUSH
8389: LD_VAR 0 9
8393: ST_TO_ADDR
// team := mpPrepareTeam ( side , nation , mpPeopleAmount , mpPeopleSkill ) ;
8394: LD_ADDR_VAR 0 11
8398: PUSH
8399: LD_VAR 0 7
8403: PPUSH
8404: LD_VAR 0 9
8408: PPUSH
8409: LD_EXP 33
8413: PPUSH
8414: LD_EXP 34
8418: PPUSH
8419: CALL 9010 0 4
8423: ST_TO_ADDR
// for j in team do
8424: LD_ADDR_VAR 0 3
8428: PUSH
8429: LD_VAR 0 11
8433: PUSH
8434: FOR_IN
8435: IFFALSE 8484
// PlaceUnitXYR ( j , mpStartPos [ pos ] [ 1 ] , mpStartPos [ pos ] [ 2 ] , 12 , false ) ;
8437: LD_VAR 0 3
8441: PPUSH
8442: LD_EXP 30
8446: PUSH
8447: LD_VAR 0 8
8451: ARRAY
8452: PUSH
8453: LD_INT 1
8455: ARRAY
8456: PPUSH
8457: LD_EXP 30
8461: PUSH
8462: LD_VAR 0 8
8466: ARRAY
8467: PUSH
8468: LD_INT 2
8470: ARRAY
8471: PPUSH
8472: LD_INT 12
8474: PPUSH
8475: LD_INT 0
8477: PPUSH
8478: CALL_OW 50
8482: GO 8434
8484: POP
8485: POP
// if mpApemans then
8486: LD_EXP 39
8490: IFFALSE 8596
// begin for j := 1 to mpApemans do
8492: LD_ADDR_VAR 0 3
8496: PUSH
8497: DOUBLE
8498: LD_INT 1
8500: DEC
8501: ST_TO_ADDR
8502: LD_EXP 39
8506: PUSH
8507: FOR_TO
8508: IFFALSE 8594
// begin PrepareApeman ( - 5 ) ;
8510: LD_INT 5
8512: NEG
8513: PPUSH
8514: CALL 55981 0 1
// ape := CreateHuman ;
8518: LD_ADDR_VAR 0 10
8522: PUSH
8523: CALL_OW 44
8527: ST_TO_ADDR
// mpApePosIndex := Replace ( mpApePosIndex , pos , Join ( mpApePosIndex [ pos ] , ape ) ) ;
8528: LD_ADDR_EXP 41
8532: PUSH
8533: LD_EXP 41
8537: PPUSH
8538: LD_VAR 0 8
8542: PPUSH
8543: LD_EXP 41
8547: PUSH
8548: LD_VAR 0 8
8552: ARRAY
8553: PPUSH
8554: LD_VAR 0 10
8558: PPUSH
8559: CALL 59854 0 2
8563: PPUSH
8564: CALL_OW 1
8568: ST_TO_ADDR
// PlaceUnitArea ( ape , mpApemansArea [ pos ] , false ) ;
8569: LD_VAR 0 10
8573: PPUSH
8574: LD_EXP 40
8578: PUSH
8579: LD_VAR 0 8
8583: ARRAY
8584: PPUSH
8585: LD_INT 0
8587: PPUSH
8588: CALL_OW 49
// end ;
8592: GO 8507
8594: POP
8595: POP
// end ; end ;
8596: GO 7261
8598: POP
8599: POP
// if not mpTeamGame then
8600: LD_EXP 20
8604: NOT
8605: IFFALSE 8703
// begin for i := 1 to 8 do
8607: LD_ADDR_VAR 0 2
8611: PUSH
8612: DOUBLE
8613: LD_INT 1
8615: DEC
8616: ST_TO_ADDR
8617: LD_INT 8
8619: PUSH
8620: FOR_TO
8621: IFFALSE 8699
// for j := 1 to 8 do
8623: LD_ADDR_VAR 0 3
8627: PUSH
8628: DOUBLE
8629: LD_INT 1
8631: DEC
8632: ST_TO_ADDR
8633: LD_INT 8
8635: PUSH
8636: FOR_TO
8637: IFFALSE 8695
// if i <> j then
8639: LD_VAR 0 2
8643: PUSH
8644: LD_VAR 0 3
8648: NONEQUAL
8649: IFFALSE 8673
// SetAttitude ( i , j , att_neutral , true ) else
8651: LD_VAR 0 2
8655: PPUSH
8656: LD_VAR 0 3
8660: PPUSH
8661: LD_INT 0
8663: PPUSH
8664: LD_INT 1
8666: PPUSH
8667: CALL_OW 80
8671: GO 8693
// SetAttitude ( i , j , att_friend , true ) ;
8673: LD_VAR 0 2
8677: PPUSH
8678: LD_VAR 0 3
8682: PPUSH
8683: LD_INT 1
8685: PPUSH
8686: LD_INT 1
8688: PPUSH
8689: CALL_OW 80
8693: GO 8636
8695: POP
8696: POP
8697: GO 8620
8699: POP
8700: POP
// end else
8701: GO 8878
// begin if mpSharedVision then
8703: LD_EXP 25
8707: IFFALSE 8772
// begin for i in mpTeams do
8709: LD_ADDR_VAR 0 2
8713: PUSH
8714: LD_EXP 19
8718: PUSH
8719: FOR_IN
8720: IFFALSE 8770
// for j := 2 to i do
8722: LD_ADDR_VAR 0 3
8726: PUSH
8727: DOUBLE
8728: LD_INT 2
8730: DEC
8731: ST_TO_ADDR
8732: LD_VAR 0 2
8736: PUSH
8737: FOR_TO
8738: IFFALSE 8766
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
8740: LD_VAR 0 2
8744: PUSH
8745: LD_VAR 0 3
8749: ARRAY
8750: PPUSH
8751: LD_VAR 0 2
8755: PUSH
8756: LD_INT 1
8758: ARRAY
8759: PPUSH
8760: CALL_OW 343
8764: GO 8737
8766: POP
8767: POP
8768: GO 8719
8770: POP
8771: POP
// end ; for i := 1 to 8 do
8772: LD_ADDR_VAR 0 2
8776: PUSH
8777: DOUBLE
8778: LD_INT 1
8780: DEC
8781: ST_TO_ADDR
8782: LD_INT 8
8784: PUSH
8785: FOR_TO
8786: IFFALSE 8876
// for j := 1 to 8 do
8788: LD_ADDR_VAR 0 3
8792: PUSH
8793: DOUBLE
8794: LD_INT 1
8796: DEC
8797: ST_TO_ADDR
8798: LD_INT 8
8800: PUSH
8801: FOR_TO
8802: IFFALSE 8872
// if mpSideTeams [ i ] = mpSideTeams [ j ] then
8804: LD_EXP 17
8808: PUSH
8809: LD_VAR 0 2
8813: ARRAY
8814: PUSH
8815: LD_EXP 17
8819: PUSH
8820: LD_VAR 0 3
8824: ARRAY
8825: EQUAL
8826: IFFALSE 8850
// SetAttitude ( i , j , att_friend , true ) else
8828: LD_VAR 0 2
8832: PPUSH
8833: LD_VAR 0 3
8837: PPUSH
8838: LD_INT 1
8840: PPUSH
8841: LD_INT 1
8843: PPUSH
8844: CALL_OW 80
8848: GO 8870
// SetAttitude ( i , j , att_enemy , true ) ;
8850: LD_VAR 0 2
8854: PPUSH
8855: LD_VAR 0 3
8859: PPUSH
8860: LD_INT 2
8862: PPUSH
8863: LD_INT 1
8865: PPUSH
8866: CALL_OW 80
8870: GO 8801
8872: POP
8873: POP
8874: GO 8785
8876: POP
8877: POP
// end ; music_nat := mpSideNations [ your_side ] ;
8878: LD_ADDR_OWVAR 71
8882: PUSH
8883: LD_EXP 18
8887: PUSH
8888: LD_OWVAR 2
8892: ARRAY
8893: ST_TO_ADDR
// if IAmSpec then
8894: CALL_OW 531
8898: IFFALSE 8939
// begin FogOff ( true ) ;
8900: LD_INT 1
8902: PPUSH
8903: CALL_OW 344
// CenterNowOnXY ( mpMapSize [ 1 ] div 2 , mpMapSize [ 2 ] div 2 ) ;
8907: LD_EXP 38
8911: PUSH
8912: LD_INT 1
8914: ARRAY
8915: PUSH
8916: LD_INT 2
8918: DIV
8919: PPUSH
8920: LD_EXP 38
8924: PUSH
8925: LD_INT 2
8927: ARRAY
8928: PUSH
8929: LD_INT 2
8931: DIV
8932: PPUSH
8933: CALL_OW 86
// end else
8937: GO 8985
// begin CenterNowOnXY ( mpStartPos [ mpSidePositions [ your_side ] ] [ 1 ] , mpStartPos [ mpSidePositions [ your_side ] ] [ 2 ] ) ;
8939: LD_EXP 30
8943: PUSH
8944: LD_EXP 16
8948: PUSH
8949: LD_OWVAR 2
8953: ARRAY
8954: ARRAY
8955: PUSH
8956: LD_INT 1
8958: ARRAY
8959: PPUSH
8960: LD_EXP 30
8964: PUSH
8965: LD_EXP 16
8969: PUSH
8970: LD_OWVAR 2
8974: ARRAY
8975: ARRAY
8976: PUSH
8977: LD_INT 2
8979: ARRAY
8980: PPUSH
8981: CALL_OW 86
// end ; BeginBuildUp ;
8985: CALL 10041 0 0
// enable ( mpActive ) ;
8989: LD_INT 100
8991: ENABLE_MARKED
// enable ( mpGameType ) ;
8992: LD_EXP 12
8996: ENABLE_MARKED
// mpGameActive := true ;
8997: LD_ADDR_EXP 48
9001: PUSH
9002: LD_INT 1
9004: ST_TO_ADDR
// end ;
9005: LD_VAR 0 1
9009: RET
// var mpTeamPreset ; function mpPrepareTeam ( side , nation , amount , skill ) ; var i , un , class ; begin
9010: LD_INT 0
9012: PPUSH
9013: PPUSH
9014: PPUSH
9015: PPUSH
// result := [ ] ;
9016: LD_ADDR_VAR 0 5
9020: PUSH
9021: EMPTY
9022: ST_TO_ADDR
// class := class_soldier ;
9023: LD_ADDR_VAR 0 8
9027: PUSH
9028: LD_INT 1
9030: ST_TO_ADDR
// uc_side := side ;
9031: LD_ADDR_OWVAR 20
9035: PUSH
9036: LD_VAR 0 1
9040: ST_TO_ADDR
// uc_nation := nation ;
9041: LD_ADDR_OWVAR 21
9045: PUSH
9046: LD_VAR 0 2
9050: ST_TO_ADDR
// hc_name := mp_sides_players_names [ side ] ;
9051: LD_ADDR_OWVAR 26
9055: PUSH
9056: LD_OWVAR 19
9060: PUSH
9061: LD_VAR 0 1
9065: ARRAY
9066: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , class , skill + 2 ) ;
9067: LD_INT 1
9069: PPUSH
9070: LD_INT 2
9072: PPUSH
9073: CALL_OW 12
9077: PPUSH
9078: LD_VAR 0 8
9082: PPUSH
9083: LD_VAR 0 4
9087: PUSH
9088: LD_INT 2
9090: PLUS
9091: PPUSH
9092: CALL_OW 380
// hc_importance := 105 ;
9096: LD_ADDR_OWVAR 32
9100: PUSH
9101: LD_INT 105
9103: ST_TO_ADDR
// if Multiplayer then
9104: LD_OWVAR 4
9108: IFFALSE 9148
// begin hc_gallery := MULTIAVATARS ;
9110: LD_ADDR_OWVAR 33
9114: PUSH
9115: LD_STRING MULTIAVATARS
9117: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( side ) ;
9118: LD_ADDR_OWVAR 34
9122: PUSH
9123: LD_VAR 0 1
9127: PPUSH
9128: CALL_OW 525
9132: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( side ) ;
9133: LD_ADDR_OWVAR 27
9137: PUSH
9138: LD_VAR 0 1
9142: PPUSH
9143: CALL_OW 526
9147: ST_TO_ADDR
// end ; result := Join ( result , CreateHuman ) ;
9148: LD_ADDR_VAR 0 5
9152: PUSH
9153: LD_VAR 0 5
9157: PPUSH
9158: CALL_OW 44
9162: PPUSH
9163: CALL 59854 0 2
9167: ST_TO_ADDR
// if mpTeamPreset then
9168: LD_LOC 1
9172: IFFALSE 9268
// begin CopySkills ( mpTeamPreset [ 1 ] , result [ result ] ) ;
9174: LD_LOC 1
9178: PUSH
9179: LD_INT 1
9181: ARRAY
9182: PPUSH
9183: LD_VAR 0 5
9187: PUSH
9188: LD_VAR 0 5
9192: ARRAY
9193: PPUSH
9194: CALL_OW 510
// SetAttr ( result [ result ] , attr_stamina , GetAttr ( mpTeamPreset [ 1 ] , attr_stamina ) ) ;
9198: LD_VAR 0 5
9202: PUSH
9203: LD_VAR 0 5
9207: ARRAY
9208: PPUSH
9209: LD_INT 1
9211: PPUSH
9212: LD_LOC 1
9216: PUSH
9217: LD_INT 1
9219: ARRAY
9220: PPUSH
9221: LD_INT 1
9223: PPUSH
9224: CALL_OW 260
9228: PPUSH
9229: CALL_OW 239
// SetAttr ( result [ result ] , attr_speed , GetAttr ( mpTeamPreset [ 1 ] , attr_speed ) ) ;
9233: LD_VAR 0 5
9237: PUSH
9238: LD_VAR 0 5
9242: ARRAY
9243: PPUSH
9244: LD_INT 2
9246: PPUSH
9247: LD_LOC 1
9251: PUSH
9252: LD_INT 1
9254: ARRAY
9255: PPUSH
9256: LD_INT 2
9258: PPUSH
9259: CALL_OW 260
9263: PPUSH
9264: CALL_OW 239
// end ; InitHc_All ( ) ;
9268: CALL_OW 584
// class := 2 ;
9272: LD_ADDR_VAR 0 8
9276: PUSH
9277: LD_INT 2
9279: ST_TO_ADDR
// for i := 1 to ( amount - 1 ) do
9280: LD_ADDR_VAR 0 6
9284: PUSH
9285: DOUBLE
9286: LD_INT 1
9288: DEC
9289: ST_TO_ADDR
9290: LD_VAR 0 3
9294: PUSH
9295: LD_INT 1
9297: MINUS
9298: PUSH
9299: FOR_TO
9300: IFFALSE 9484
// begin PrepareHuman ( false , class , skill ) ;
9302: LD_INT 0
9304: PPUSH
9305: LD_VAR 0 8
9309: PPUSH
9310: LD_VAR 0 4
9314: PPUSH
9315: CALL_OW 380
// un := CreateHuman ;
9319: LD_ADDR_VAR 0 7
9323: PUSH
9324: CALL_OW 44
9328: ST_TO_ADDR
// result := Join ( result , un ) ;
9329: LD_ADDR_VAR 0 5
9333: PUSH
9334: LD_VAR 0 5
9338: PPUSH
9339: LD_VAR 0 7
9343: PPUSH
9344: CALL 59854 0 2
9348: ST_TO_ADDR
// if mpTeamPreset then
9349: LD_LOC 1
9353: IFFALSE 9449
// begin CopySkills ( mpTeamPreset [ i + 1 ] , un ) ;
9355: LD_LOC 1
9359: PUSH
9360: LD_VAR 0 6
9364: PUSH
9365: LD_INT 1
9367: PLUS
9368: ARRAY
9369: PPUSH
9370: LD_VAR 0 7
9374: PPUSH
9375: CALL_OW 510
// SetAttr ( un , attr_stamina , GetAttr ( mpTeamPreset [ i + 1 ] , attr_stamina ) ) ;
9379: LD_VAR 0 7
9383: PPUSH
9384: LD_INT 1
9386: PPUSH
9387: LD_LOC 1
9391: PUSH
9392: LD_VAR 0 6
9396: PUSH
9397: LD_INT 1
9399: PLUS
9400: ARRAY
9401: PPUSH
9402: LD_INT 1
9404: PPUSH
9405: CALL_OW 260
9409: PPUSH
9410: CALL_OW 239
// SetAttr ( un , attr_speed , GetAttr ( mpTeamPreset [ i + 1 ] , attr_speed ) ) ;
9414: LD_VAR 0 7
9418: PPUSH
9419: LD_INT 2
9421: PPUSH
9422: LD_LOC 1
9426: PUSH
9427: LD_VAR 0 6
9431: PUSH
9432: LD_INT 1
9434: PLUS
9435: ARRAY
9436: PPUSH
9437: LD_INT 2
9439: PPUSH
9440: CALL_OW 260
9444: PPUSH
9445: CALL_OW 239
// end ; class := Inc ( class ) ;
9449: LD_ADDR_VAR 0 8
9453: PUSH
9454: LD_VAR 0 8
9458: PPUSH
9459: CALL 61227 0 1
9463: ST_TO_ADDR
// if class = 5 then
9464: LD_VAR 0 8
9468: PUSH
9469: LD_INT 5
9471: EQUAL
9472: IFFALSE 9482
// class := 1 ;
9474: LD_ADDR_VAR 0 8
9478: PUSH
9479: LD_INT 1
9481: ST_TO_ADDR
// end ;
9482: GO 9299
9484: POP
9485: POP
// if not mpTeamPreset then
9486: LD_LOC 1
9490: NOT
9491: IFFALSE 9503
// mpTeamPreset := result ;
9493: LD_ADDR_LOC 1
9497: PUSH
9498: LD_VAR 0 5
9502: ST_TO_ADDR
// end ;
9503: LD_VAR 0 5
9507: RET
// function mpPrepareVehicles ( side , nation , vehicles ) ; var i ; begin
9508: LD_INT 0
9510: PPUSH
9511: PPUSH
// result := [ ] ;
9512: LD_ADDR_VAR 0 4
9516: PUSH
9517: EMPTY
9518: ST_TO_ADDR
// if not vehicles then
9519: LD_VAR 0 3
9523: NOT
9524: IFFALSE 9528
// exit ;
9526: GO 9742
// for i := 1 to vehicles [ nation ] do
9528: LD_ADDR_VAR 0 5
9532: PUSH
9533: DOUBLE
9534: LD_INT 1
9536: DEC
9537: ST_TO_ADDR
9538: LD_VAR 0 3
9542: PUSH
9543: LD_VAR 0 2
9547: ARRAY
9548: PUSH
9549: FOR_TO
9550: IFFALSE 9740
// begin uc_side := side ;
9552: LD_ADDR_OWVAR 20
9556: PUSH
9557: LD_VAR 0 1
9561: ST_TO_ADDR
// if Count ( vehicles [ nation ] [ i ] ) > 4 then
9562: LD_VAR 0 3
9566: PUSH
9567: LD_VAR 0 2
9571: ARRAY
9572: PUSH
9573: LD_VAR 0 5
9577: ARRAY
9578: PPUSH
9579: CALL 23922 0 1
9583: PUSH
9584: LD_INT 4
9586: GREATER
9587: IFFALSE 9617
// uc_nation := vehicles [ nation ] [ i ] [ 5 ] else
9589: LD_ADDR_OWVAR 21
9593: PUSH
9594: LD_VAR 0 3
9598: PUSH
9599: LD_VAR 0 2
9603: ARRAY
9604: PUSH
9605: LD_VAR 0 5
9609: ARRAY
9610: PUSH
9611: LD_INT 5
9613: ARRAY
9614: ST_TO_ADDR
9615: GO 9627
// uc_nation := nation ;
9617: LD_ADDR_OWVAR 21
9621: PUSH
9622: LD_VAR 0 2
9626: ST_TO_ADDR
// PrepareVehicle ( vehicles [ nation ] [ i ] [ 1 ] , vehicles [ nation ] [ i ] [ 2 ] , vehicles [ nation ] [ i ] [ 3 ] , vehicles [ nation ] [ i ] [ 4 ] , 80 ) ;
9627: LD_VAR 0 3
9631: PUSH
9632: LD_VAR 0 2
9636: ARRAY
9637: PUSH
9638: LD_VAR 0 5
9642: ARRAY
9643: PUSH
9644: LD_INT 1
9646: ARRAY
9647: PPUSH
9648: LD_VAR 0 3
9652: PUSH
9653: LD_VAR 0 2
9657: ARRAY
9658: PUSH
9659: LD_VAR 0 5
9663: ARRAY
9664: PUSH
9665: LD_INT 2
9667: ARRAY
9668: PPUSH
9669: LD_VAR 0 3
9673: PUSH
9674: LD_VAR 0 2
9678: ARRAY
9679: PUSH
9680: LD_VAR 0 5
9684: ARRAY
9685: PUSH
9686: LD_INT 3
9688: ARRAY
9689: PPUSH
9690: LD_VAR 0 3
9694: PUSH
9695: LD_VAR 0 2
9699: ARRAY
9700: PUSH
9701: LD_VAR 0 5
9705: ARRAY
9706: PUSH
9707: LD_INT 4
9709: ARRAY
9710: PPUSH
9711: LD_INT 80
9713: PPUSH
9714: CALL 26684 0 5
// result := Join ( result , CreateVehicle ) ;
9718: LD_ADDR_VAR 0 4
9722: PUSH
9723: LD_VAR 0 4
9727: PPUSH
9728: CALL_OW 45
9732: PPUSH
9733: CALL 59854 0 2
9737: ST_TO_ADDR
// end ;
9738: GO 9549
9740: POP
9741: POP
// end ;
9742: LD_VAR 0 4
9746: RET
// function mpUpdateFlags ( strength ) ; var i ; begin
9747: LD_INT 0
9749: PPUSH
9750: PPUSH
// for i in mpBattleFlags do
9751: LD_ADDR_VAR 0 3
9755: PUSH
9756: LD_EXP 32
9760: PUSH
9761: FOR_IN
9762: IFFALSE 9839
// ChangeBattleFlagOptions ( i , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength * 0.7 ] , [ bfo_defend_bonus_building , strength * 0.4 ] , [ bfo_height , strength ] ] ) ;
9764: LD_VAR 0 3
9768: PPUSH
9769: LD_INT 1
9771: PUSH
9772: LD_VAR 0 1
9776: PUSH
9777: EMPTY
9778: LIST
9779: LIST
9780: PUSH
9781: LD_INT 2
9783: PUSH
9784: LD_VAR 0 1
9788: PUSH
9789: LD_REAL  7.00000000000000E-0001
9792: MUL
9793: PUSH
9794: EMPTY
9795: LIST
9796: LIST
9797: PUSH
9798: LD_INT 3
9800: PUSH
9801: LD_VAR 0 1
9805: PUSH
9806: LD_REAL  4.00000000000000E-0001
9809: MUL
9810: PUSH
9811: EMPTY
9812: LIST
9813: LIST
9814: PUSH
9815: LD_INT 20
9817: PUSH
9818: LD_VAR 0 1
9822: PUSH
9823: EMPTY
9824: LIST
9825: LIST
9826: PUSH
9827: EMPTY
9828: LIST
9829: LIST
9830: LIST
9831: LIST
9832: PPUSH
9833: CALL_OW 423
9837: GO 9761
9839: POP
9840: POP
// end ;
9841: LD_VAR 0 2
9845: RET
// every 0 0$1 trigger mpActive do var i , strength ;
9846: LD_INT 100
9848: IFFALSE 9943
9850: GO 9852
9852: DISABLE
9853: LD_INT 0
9855: PPUSH
9856: PPUSH
// begin if mpBattleFlag <= 0 then
9857: LD_EXP 31
9861: PUSH
9862: LD_INT 0
9864: LESSEQUAL
9865: IFFALSE 9869
// exit ;
9867: GO 9943
// strength := 100 ;
9869: LD_ADDR_VAR 0 2
9873: PUSH
9874: LD_INT 100
9876: ST_TO_ADDR
// repeat wait ( mpBattleFlag ) ;
9877: LD_EXP 31
9881: PPUSH
9882: CALL_OW 67
// strength := Dec ( strength ) ;
9886: LD_ADDR_VAR 0 2
9890: PUSH
9891: LD_VAR 0 2
9895: PPUSH
9896: CALL 61249 0 1
9900: ST_TO_ADDR
// mpUpdateFlags ( strength ) ;
9901: LD_VAR 0 2
9905: PPUSH
9906: CALL 9747 0 1
// until not strength ;
9910: LD_VAR 0 2
9914: NOT
9915: IFFALSE 9877
// for i in mpBattleFlags do
9917: LD_ADDR_VAR 0 1
9921: PUSH
9922: LD_EXP 32
9926: PUSH
9927: FOR_IN
9928: IFFALSE 9941
// KillBattleFlag ( i ) ;
9930: LD_VAR 0 1
9934: PPUSH
9935: CALL_OW 419
9939: GO 9927
9941: POP
9942: POP
// end ;
9943: PPOPN 2
9945: END
// every 0 0$1 marked mpActive do var side , tmp ;
9946: GO 9948
9948: DISABLE
9949: LD_INT 0
9951: PPUSH
9952: PPUSH
// begin if mpSibBomb <= 1 then
9953: LD_EXP 37
9957: PUSH
9958: LD_INT 1
9960: LESSEQUAL
9961: IFFALSE 9965
// exit ;
9963: GO 10038
// tmp := mpSibBomb ;
9965: LD_ADDR_VAR 0 2
9969: PUSH
9970: LD_EXP 37
9974: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
9975: LD_INT 35
9977: PPUSH
9978: CALL_OW 67
// tmp := tmp - 0 0$1 ;
9982: LD_ADDR_VAR 0 2
9986: PUSH
9987: LD_VAR 0 2
9991: PUSH
9992: LD_INT 35
9994: MINUS
9995: ST_TO_ADDR
// until not tmp ;
9996: LD_VAR 0 2
10000: NOT
10001: IFFALSE 9975
// for side := 1 to 8 do
10003: LD_ADDR_VAR 0 1
10007: PUSH
10008: DOUBLE
10009: LD_INT 1
10011: DEC
10012: ST_TO_ADDR
10013: LD_INT 8
10015: PUSH
10016: FOR_TO
10017: IFFALSE 10036
// SetTech ( tech_SibFiss , side , state_enabled ) ;
10019: LD_INT 25
10021: PPUSH
10022: LD_VAR 0 1
10026: PPUSH
10027: LD_INT 1
10029: PPUSH
10030: CALL_OW 322
10034: GO 10016
10036: POP
10037: POP
// end ;
10038: PPOPN 2
10040: END
// export mpBuildUpTimeDelay , mpBuildUpTimeActive ; function BeginBuildUp ; var i , j ; begin
10041: LD_INT 0
10043: PPUSH
10044: PPUSH
10045: PPUSH
// mpBuildUpTimeDelay := 0 ;
10046: LD_ADDR_EXP 55
10050: PUSH
10051: LD_INT 0
10053: ST_TO_ADDR
// if not mpBuildUpTime then
10054: LD_EXP 29
10058: NOT
10059: IFFALSE 10063
// exit ;
10061: GO 10252
// mpBuildUpTimeDelay := 4 4$00 + 1 1$00 * mpBuildUpTime ;
10063: LD_ADDR_EXP 55
10067: PUSH
10068: LD_INT 8400
10070: PUSH
10071: LD_INT 2100
10073: PUSH
10074: LD_EXP 29
10078: MUL
10079: PLUS
10080: ST_TO_ADDR
// mpBuildUpTimeActive := true ;
10081: LD_ADDR_EXP 56
10085: PUSH
10086: LD_INT 1
10088: ST_TO_ADDR
// for i := 1 to 8 do
10089: LD_ADDR_VAR 0 2
10093: PUSH
10094: DOUBLE
10095: LD_INT 1
10097: DEC
10098: ST_TO_ADDR
10099: LD_INT 8
10101: PUSH
10102: FOR_TO
10103: IFFALSE 10250
// if mpSidePositions [ i ] then
10105: LD_EXP 16
10109: PUSH
10110: LD_VAR 0 2
10114: ARRAY
10115: IFFALSE 10248
// begin SetAreaMapShow ( mpBuildUpAreas [ mpSidePositions [ i ] ] , 5 ) ;
10117: LD_EXP 28
10121: PUSH
10122: LD_EXP 16
10126: PUSH
10127: LD_VAR 0 2
10131: ARRAY
10132: ARRAY
10133: PPUSH
10134: LD_INT 5
10136: PPUSH
10137: CALL_OW 424
// for j := 1 to 8 do
10141: LD_ADDR_VAR 0 3
10145: PUSH
10146: DOUBLE
10147: LD_INT 1
10149: DEC
10150: ST_TO_ADDR
10151: LD_INT 8
10153: PUSH
10154: FOR_TO
10155: IFFALSE 10246
// if mpSidePositions [ j ] and ( ( mpSideTeams [ i ] <> mpSideTeams [ j ] ) or ( not mpTeamGame ) and ( i <> j ) ) then
10157: LD_EXP 16
10161: PUSH
10162: LD_VAR 0 3
10166: ARRAY
10167: IFFALSE 10216
10169: PUSH
10170: LD_EXP 17
10174: PUSH
10175: LD_VAR 0 2
10179: ARRAY
10180: PUSH
10181: LD_EXP 17
10185: PUSH
10186: LD_VAR 0 3
10190: ARRAY
10191: NONEQUAL
10192: IFTRUE 10215
10194: PUSH
10195: LD_EXP 20
10199: NOT
10200: IFFALSE 10214
10202: PUSH
10203: LD_VAR 0 2
10207: PUSH
10208: LD_VAR 0 3
10212: NONEQUAL
10213: AND
10214: OR
10215: AND
10216: IFFALSE 10244
// HideArea ( j , mpBuildUpAreas [ mpSidePositions [ i ] ] ) ;
10218: LD_VAR 0 3
10222: PPUSH
10223: LD_EXP 28
10227: PUSH
10228: LD_EXP 16
10232: PUSH
10233: LD_VAR 0 2
10237: ARRAY
10238: ARRAY
10239: PPUSH
10240: CALL_OW 333
10244: GO 10154
10246: POP
10247: POP
// end ;
10248: GO 10102
10250: POP
10251: POP
// end ;
10252: LD_VAR 0 1
10256: RET
// function EndBuildUp ; var i , j ; begin
10257: LD_INT 0
10259: PPUSH
10260: PPUSH
10261: PPUSH
// mpBuildUpTimeActive := false ;
10262: LD_ADDR_EXP 56
10266: PUSH
10267: LD_INT 0
10269: ST_TO_ADDR
// for i := 1 to 8 do
10270: LD_ADDR_VAR 0 2
10274: PUSH
10275: DOUBLE
10276: LD_INT 1
10278: DEC
10279: ST_TO_ADDR
10280: LD_INT 8
10282: PUSH
10283: FOR_TO
10284: IFFALSE 10431
// if mpSidePositions [ i ] then
10286: LD_EXP 16
10290: PUSH
10291: LD_VAR 0 2
10295: ARRAY
10296: IFFALSE 10429
// begin SetAreaMapShow ( mpBuildUpAreas [ mpSidePositions [ i ] ] , 0 ) ;
10298: LD_EXP 28
10302: PUSH
10303: LD_EXP 16
10307: PUSH
10308: LD_VAR 0 2
10312: ARRAY
10313: ARRAY
10314: PPUSH
10315: LD_INT 0
10317: PPUSH
10318: CALL_OW 424
// for j := 1 to 8 do
10322: LD_ADDR_VAR 0 3
10326: PUSH
10327: DOUBLE
10328: LD_INT 1
10330: DEC
10331: ST_TO_ADDR
10332: LD_INT 8
10334: PUSH
10335: FOR_TO
10336: IFFALSE 10427
// if mpSidePositions [ j ] and ( ( mpSideTeams [ i ] <> mpSideTeams [ j ] ) or ( not mpTeamGame ) and ( i <> j ) ) then
10338: LD_EXP 16
10342: PUSH
10343: LD_VAR 0 3
10347: ARRAY
10348: IFFALSE 10397
10350: PUSH
10351: LD_EXP 17
10355: PUSH
10356: LD_VAR 0 2
10360: ARRAY
10361: PUSH
10362: LD_EXP 17
10366: PUSH
10367: LD_VAR 0 3
10371: ARRAY
10372: NONEQUAL
10373: IFTRUE 10396
10375: PUSH
10376: LD_EXP 20
10380: NOT
10381: IFFALSE 10395
10383: PUSH
10384: LD_VAR 0 2
10388: PUSH
10389: LD_VAR 0 3
10393: NONEQUAL
10394: AND
10395: OR
10396: AND
10397: IFFALSE 10425
// ShowArea ( j , mpBuildUpAreas [ mpSidePositions [ i ] ] ) ;
10399: LD_VAR 0 3
10403: PPUSH
10404: LD_EXP 28
10408: PUSH
10409: LD_EXP 16
10413: PUSH
10414: LD_VAR 0 2
10418: ARRAY
10419: ARRAY
10420: PPUSH
10421: CALL_OW 334
10425: GO 10335
10427: POP
10428: POP
// end ;
10429: GO 10283
10431: POP
10432: POP
// end ;
10433: LD_VAR 0 1
10437: RET
// every 5 trigger mpBuildUpTimeActive marked mpActive do var i , un ;
10438: LD_EXP 56
10442: IFFALSE 10623
10444: GO 10446
10446: DISABLE
10447: LD_INT 0
10449: PPUSH
10450: PPUSH
// begin for i := 1 to 8 do
10451: LD_ADDR_VAR 0 1
10455: PUSH
10456: DOUBLE
10457: LD_INT 1
10459: DEC
10460: ST_TO_ADDR
10461: LD_INT 8
10463: PUSH
10464: FOR_TO
10465: IFFALSE 10620
// if mpSidePositions [ i ] then
10467: LD_EXP 16
10471: PUSH
10472: LD_VAR 0 1
10476: ARRAY
10477: IFFALSE 10618
// for un in FilterUnitsInArea ( mpBuildUpAreas [ mpSidePositions [ i ] ] , [ [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] , [ f_side , your_side ] ] ) do
10479: LD_ADDR_VAR 0 2
10483: PUSH
10484: LD_EXP 28
10488: PUSH
10489: LD_EXP 16
10493: PUSH
10494: LD_VAR 0 1
10498: ARRAY
10499: ARRAY
10500: PPUSH
10501: LD_INT 2
10503: PUSH
10504: LD_INT 21
10506: PUSH
10507: LD_INT 1
10509: PUSH
10510: EMPTY
10511: LIST
10512: LIST
10513: PUSH
10514: LD_INT 21
10516: PUSH
10517: LD_INT 2
10519: PUSH
10520: EMPTY
10521: LIST
10522: LIST
10523: PUSH
10524: EMPTY
10525: LIST
10526: LIST
10527: LIST
10528: PUSH
10529: LD_INT 22
10531: PUSH
10532: LD_OWVAR 2
10536: PUSH
10537: EMPTY
10538: LIST
10539: LIST
10540: PUSH
10541: EMPTY
10542: LIST
10543: LIST
10544: PPUSH
10545: CALL_OW 70
10549: PUSH
10550: FOR_IN
10551: IFFALSE 10616
// if ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) or ( not mpTeamGame ) and ( i <> your_side ) ) then
10553: LD_EXP 17
10557: PUSH
10558: LD_VAR 0 1
10562: ARRAY
10563: PUSH
10564: LD_EXP 17
10568: PUSH
10569: LD_OWVAR 2
10573: ARRAY
10574: NONEQUAL
10575: IFTRUE 10598
10577: PUSH
10578: LD_EXP 20
10582: NOT
10583: IFFALSE 10597
10585: PUSH
10586: LD_VAR 0 1
10590: PUSH
10591: LD_OWVAR 2
10595: NONEQUAL
10596: AND
10597: OR
10598: IFFALSE 10614
// ComMoveToArea ( un , BuildUpEscape ) ;
10600: LD_VAR 0 2
10604: PPUSH
10605: LD_EXP 1
10609: PPUSH
10610: CALL_OW 113
10614: GO 10550
10616: POP
10617: POP
10618: GO 10464
10620: POP
10621: POP
// enable ;
10622: ENABLE
// end ;
10623: PPOPN 2
10625: END
// every 0 0$1 trigger mpBuildUpTime marked mpActive do var tmp ;
10626: LD_EXP 29
10630: IFFALSE 10680
10632: GO 10634
10634: DISABLE
10635: LD_INT 0
10637: PPUSH
// begin tmp := mpBuildUpTime ;
10638: LD_ADDR_VAR 0 1
10642: PUSH
10643: LD_EXP 29
10647: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
10648: LD_INT 35
10650: PPUSH
10651: CALL_OW 67
// tmp := tmp - 0 0$1 ;
10655: LD_ADDR_VAR 0 1
10659: PUSH
10660: LD_VAR 0 1
10664: PUSH
10665: LD_INT 35
10667: MINUS
10668: ST_TO_ADDR
// until not tmp ;
10669: LD_VAR 0 1
10673: NOT
10674: IFFALSE 10648
// EndBuildUp ;
10676: CALL 10257 0 0
// end ;
10680: PPOPN 1
10682: END
// every 0 0$1 trigger mpActive marked mpWin do
10683: LD_INT 100
10685: IFFALSE 10719
10687: GO 10689
10689: DISABLE
// begin if IAmServer then
10690: CALL_OW 518
10694: IFFALSE 10703
// wait ( 0 0$3 ) ;
10696: LD_INT 105
10698: PPUSH
10699: CALL_OW 67
// if Multiplayer then
10703: LD_OWVAR 4
10707: IFFALSE 10715
// YouWinInMultiplayer else
10709: CALL_OW 106
10713: GO 10719
// YouWin ;
10715: CALL_OW 103
// end ;
10719: END
// export function HasPowerByGameType ( gameType , side ) ; begin
10720: LD_INT 0
10722: PPUSH
// result := false ;
10723: LD_ADDR_VAR 0 3
10727: PUSH
10728: LD_INT 0
10730: ST_TO_ADDR
// case gameType of GameTypeNormal , GameTypeFamine :
10731: LD_VAR 0 1
10735: PUSH
10736: LD_INT 1
10738: DOUBLE
10739: EQUAL
10740: IFTRUE 10750
10742: LD_INT 5
10744: DOUBLE
10745: EQUAL
10746: IFTRUE 10750
10748: GO 10823
10750: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) ;
10751: LD_ADDR_VAR 0 3
10755: PUSH
10756: LD_INT 22
10758: PUSH
10759: LD_VAR 0 2
10763: PUSH
10764: EMPTY
10765: LIST
10766: LIST
10767: PUSH
10768: LD_INT 2
10770: PUSH
10771: LD_INT 21
10773: PUSH
10774: LD_INT 1
10776: PUSH
10777: EMPTY
10778: LIST
10779: LIST
10780: PUSH
10781: LD_INT 33
10783: PUSH
10784: LD_INT 3
10786: PUSH
10787: EMPTY
10788: LIST
10789: LIST
10790: PUSH
10791: LD_INT 33
10793: PUSH
10794: LD_INT 5
10796: PUSH
10797: EMPTY
10798: LIST
10799: LIST
10800: PUSH
10801: EMPTY
10802: LIST
10803: LIST
10804: LIST
10805: LIST
10806: PUSH
10807: EMPTY
10808: LIST
10809: LIST
10810: PPUSH
10811: CALL_OW 69
10815: PPUSH
10816: CALL 23922 0 1
10820: ST_TO_ADDR
// end ; GameTypeSurvival :
10821: GO 11062
10823: LD_INT 2
10825: DOUBLE
10826: EQUAL
10827: IFTRUE 10831
10829: GO 10961
10831: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ) and Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) ;
10832: LD_ADDR_VAR 0 3
10836: PUSH
10837: LD_INT 22
10839: PUSH
10840: LD_VAR 0 2
10844: PUSH
10845: EMPTY
10846: LIST
10847: LIST
10848: PUSH
10849: LD_INT 2
10851: PUSH
10852: LD_INT 30
10854: PUSH
10855: LD_INT 0
10857: PUSH
10858: EMPTY
10859: LIST
10860: LIST
10861: PUSH
10862: LD_INT 30
10864: PUSH
10865: LD_INT 1
10867: PUSH
10868: EMPTY
10869: LIST
10870: LIST
10871: PUSH
10872: EMPTY
10873: LIST
10874: LIST
10875: LIST
10876: PUSH
10877: EMPTY
10878: LIST
10879: LIST
10880: PPUSH
10881: CALL_OW 69
10885: PPUSH
10886: CALL 23922 0 1
10890: IFFALSE 10958
10892: PUSH
10893: LD_INT 22
10895: PUSH
10896: LD_VAR 0 2
10900: PUSH
10901: EMPTY
10902: LIST
10903: LIST
10904: PUSH
10905: LD_INT 2
10907: PUSH
10908: LD_INT 21
10910: PUSH
10911: LD_INT 1
10913: PUSH
10914: EMPTY
10915: LIST
10916: LIST
10917: PUSH
10918: LD_INT 33
10920: PUSH
10921: LD_INT 3
10923: PUSH
10924: EMPTY
10925: LIST
10926: LIST
10927: PUSH
10928: LD_INT 33
10930: PUSH
10931: LD_INT 5
10933: PUSH
10934: EMPTY
10935: LIST
10936: LIST
10937: PUSH
10938: EMPTY
10939: LIST
10940: LIST
10941: LIST
10942: LIST
10943: PUSH
10944: EMPTY
10945: LIST
10946: LIST
10947: PPUSH
10948: CALL_OW 69
10952: PPUSH
10953: CALL 23922 0 1
10957: AND
10958: ST_TO_ADDR
// end ; GameTypeKing :
10959: GO 11062
10961: LD_INT 3
10963: DOUBLE
10964: EQUAL
10965: IFTRUE 10969
10967: GO 11061
10969: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) and HowMuchPointsKing ( side ) < mpPoints ;
10970: LD_ADDR_VAR 0 3
10974: PUSH
10975: LD_INT 22
10977: PUSH
10978: LD_VAR 0 2
10982: PUSH
10983: EMPTY
10984: LIST
10985: LIST
10986: PUSH
10987: LD_INT 2
10989: PUSH
10990: LD_INT 21
10992: PUSH
10993: LD_INT 1
10995: PUSH
10996: EMPTY
10997: LIST
10998: LIST
10999: PUSH
11000: LD_INT 33
11002: PUSH
11003: LD_INT 3
11005: PUSH
11006: EMPTY
11007: LIST
11008: LIST
11009: PUSH
11010: LD_INT 33
11012: PUSH
11013: LD_INT 5
11015: PUSH
11016: EMPTY
11017: LIST
11018: LIST
11019: PUSH
11020: EMPTY
11021: LIST
11022: LIST
11023: LIST
11024: LIST
11025: PUSH
11026: EMPTY
11027: LIST
11028: LIST
11029: PPUSH
11030: CALL_OW 69
11034: PPUSH
11035: CALL 23922 0 1
11039: IFFALSE 11058
11041: PUSH
11042: LD_VAR 0 2
11046: PPUSH
11047: CALL 14106 0 1
11051: PUSH
11052: LD_EXP 44
11056: LESS
11057: AND
11058: ST_TO_ADDR
// end ; end ;
11059: GO 11062
11061: POP
// end ;
11062: LD_VAR 0 3
11066: RET
// every 0 0$1 trigger mpActive marked mpLose do var gameIsOn , i ;
11067: LD_INT 100
11069: IFFALSE 11299
11071: GO 11073
11073: DISABLE
11074: LD_INT 0
11076: PPUSH
11077: PPUSH
// begin if Multiplayer then
11078: LD_OWVAR 4
11082: IFFALSE 11090
// SetPlayerSpectator ( ) else
11084: CALL_OW 572
11088: GO 11099
// FogOff ( your_side ) ;
11090: LD_OWVAR 2
11094: PPUSH
11095: CALL_OW 344
// repeat gameIsOn := false ;
11099: LD_ADDR_VAR 0 1
11103: PUSH
11104: LD_INT 0
11106: ST_TO_ADDR
// for i := 1 to 8 do
11107: LD_ADDR_VAR 0 2
11111: PUSH
11112: DOUBLE
11113: LD_INT 1
11115: DEC
11116: ST_TO_ADDR
11117: LD_INT 8
11119: PUSH
11120: FOR_TO
11121: IFFALSE 11251
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
11123: LD_EXP 16
11127: PUSH
11128: LD_VAR 0 2
11132: ARRAY
11133: IFFALSE 11146
11135: PUSH
11136: LD_VAR 0 2
11140: PPUSH
11141: CALL_OW 108
11145: AND
11146: IFFALSE 11160
11148: PUSH
11149: LD_VAR 0 2
11153: PUSH
11154: LD_OWVAR 2
11158: NONEQUAL
11159: AND
11160: IFFALSE 11249
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
11162: LD_EXP 17
11166: PUSH
11167: LD_VAR 0 2
11171: ARRAY
11172: NOT
11173: IFTRUE 11221
11175: PUSH
11176: LD_EXP 17
11180: PUSH
11181: LD_VAR 0 2
11185: ARRAY
11186: PUSH
11187: LD_EXP 17
11191: PUSH
11192: LD_OWVAR 2
11196: ARRAY
11197: NONEQUAL
11198: IFFALSE 11220
11200: PUSH
11201: LD_OWVAR 2
11205: PPUSH
11206: LD_VAR 0 2
11210: PPUSH
11211: CALL_OW 81
11215: PUSH
11216: LD_INT 1
11218: NONEQUAL
11219: AND
11220: OR
11221: IFFALSE 11249
// if HasPowerByGameType ( mpGameType , i ) then
11223: LD_EXP 12
11227: PPUSH
11228: LD_VAR 0 2
11232: PPUSH
11233: CALL 10720 0 2
11237: IFFALSE 11249
// begin gameIsOn := true ;
11239: LD_ADDR_VAR 0 1
11243: PUSH
11244: LD_INT 1
11246: ST_TO_ADDR
// break ;
11247: GO 11251
// end ;
11249: GO 11120
11251: POP
11252: POP
// wait ( 100 ) ;
11253: LD_INT 100
11255: PPUSH
11256: CALL_OW 67
// until not gameIsOn ;
11260: LD_VAR 0 1
11264: NOT
11265: IFFALSE 11099
// if IAmServer then
11267: CALL_OW 518
11271: IFFALSE 11280
// wait ( 0 0$3 ) ;
11273: LD_INT 105
11275: PPUSH
11276: CALL_OW 67
// if Multiplayer then
11280: LD_OWVAR 4
11284: IFFALSE 11292
// YouLostInMultiplayer else
11286: CALL_OW 107
11290: GO 11299
// YouLost (  ) ;
11292: LD_STRING 
11294: PPUSH
11295: CALL_OW 104
// end ;
11299: PPOPN 2
11301: END
// every 0 0$10 trigger mpRespawn marked mpActive do var i , j , tmp , spawn , sides ;
11302: LD_EXP 42
11306: IFFALSE 11690
11308: GO 11310
11310: DISABLE
11311: LD_INT 0
11313: PPUSH
11314: PPUSH
11315: PPUSH
11316: PPUSH
11317: PPUSH
// begin sides := [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 ] ;
11318: LD_ADDR_VAR 0 5
11322: PUSH
11323: LD_INT 1
11325: PUSH
11326: LD_INT 2
11328: PUSH
11329: LD_INT 3
11331: PUSH
11332: LD_INT 4
11334: PUSH
11335: LD_INT 5
11337: PUSH
11338: LD_INT 6
11340: PUSH
11341: LD_INT 7
11343: PUSH
11344: LD_INT 8
11346: PUSH
11347: EMPTY
11348: LIST
11349: LIST
11350: LIST
11351: LIST
11352: LIST
11353: LIST
11354: LIST
11355: LIST
11356: ST_TO_ADDR
// repeat wait ( 0 0$10 ) ;
11357: LD_INT 350
11359: PPUSH
11360: CALL_OW 67
// for i := 1 to 8 do
11364: LD_ADDR_VAR 0 1
11368: PUSH
11369: DOUBLE
11370: LD_INT 1
11372: DEC
11373: ST_TO_ADDR
11374: LD_INT 8
11376: PUSH
11377: FOR_TO
11378: IFFALSE 11660
// begin j := sides [ i ] ;
11380: LD_ADDR_VAR 0 2
11384: PUSH
11385: LD_VAR 0 5
11389: PUSH
11390: LD_VAR 0 1
11394: ARRAY
11395: ST_TO_ADDR
// if Count ( mpRespawnPull [ j ] ) and MultiplayerSideAlive ( j ) and HasPowerByGameType ( mpGameType , j ) then
11396: LD_EXP 49
11400: PUSH
11401: LD_VAR 0 2
11405: ARRAY
11406: PPUSH
11407: CALL 23922 0 1
11411: IFFALSE 11424
11413: PUSH
11414: LD_VAR 0 2
11418: PPUSH
11419: CALL_OW 108
11423: AND
11424: IFFALSE 11442
11426: PUSH
11427: LD_EXP 12
11431: PPUSH
11432: LD_VAR 0 2
11436: PPUSH
11437: CALL 10720 0 2
11441: AND
11442: IFFALSE 11658
// begin wait ( mpRespawn div 3 ) ;
11444: LD_EXP 42
11448: PUSH
11449: LD_INT 3
11451: DIV
11452: PPUSH
11453: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , j ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
11457: LD_ADDR_VAR 0 3
11461: PUSH
11462: LD_INT 22
11464: PUSH
11465: LD_VAR 0 2
11469: PUSH
11470: EMPTY
11471: LIST
11472: LIST
11473: PUSH
11474: LD_INT 50
11476: PUSH
11477: EMPTY
11478: LIST
11479: PUSH
11480: LD_INT 2
11482: PUSH
11483: LD_INT 30
11485: PUSH
11486: LD_INT 0
11488: PUSH
11489: EMPTY
11490: LIST
11491: LIST
11492: PUSH
11493: LD_INT 30
11495: PUSH
11496: LD_INT 1
11498: PUSH
11499: EMPTY
11500: LIST
11501: LIST
11502: PUSH
11503: EMPTY
11504: LIST
11505: LIST
11506: LIST
11507: PUSH
11508: EMPTY
11509: LIST
11510: LIST
11511: LIST
11512: PPUSH
11513: CALL_OW 69
11517: ST_TO_ADDR
// if not tmp or not MultiplayerSideAlive ( j ) or not HasPowerByGameType ( mpGameType , j ) then
11518: LD_VAR 0 3
11522: NOT
11523: IFTRUE 11537
11525: PUSH
11526: LD_VAR 0 2
11530: PPUSH
11531: CALL_OW 108
11535: NOT
11536: OR
11537: IFTRUE 11556
11539: PUSH
11540: LD_EXP 12
11544: PPUSH
11545: LD_VAR 0 2
11549: PPUSH
11550: CALL 10720 0 2
11554: NOT
11555: OR
11556: IFFALSE 11560
// continue ;
11558: GO 11377
// spawn := tmp [ 1 ] ;
11560: LD_ADDR_VAR 0 4
11564: PUSH
11565: LD_VAR 0 3
11569: PUSH
11570: LD_INT 1
11572: ARRAY
11573: ST_TO_ADDR
// PlaceUnitXYR ( mpRespawnPull [ j ] [ 1 ] , GetX ( spawn ) , GetY ( spawn ) , 32 , true ) ;
11574: LD_EXP 49
11578: PUSH
11579: LD_VAR 0 2
11583: ARRAY
11584: PUSH
11585: LD_INT 1
11587: ARRAY
11588: PPUSH
11589: LD_VAR 0 4
11593: PPUSH
11594: CALL_OW 250
11598: PPUSH
11599: LD_VAR 0 4
11603: PPUSH
11604: CALL_OW 251
11608: PPUSH
11609: LD_INT 32
11611: PPUSH
11612: LD_INT 1
11614: PPUSH
11615: CALL_OW 50
// mpRespawnPull := Replace ( mpRespawnPull , j , Delete ( mpRespawnPull [ j ] , 1 ) ) ;
11619: LD_ADDR_EXP 49
11623: PUSH
11624: LD_EXP 49
11628: PPUSH
11629: LD_VAR 0 2
11633: PPUSH
11634: LD_EXP 49
11638: PUSH
11639: LD_VAR 0 2
11643: ARRAY
11644: PPUSH
11645: LD_INT 1
11647: PPUSH
11648: CALL_OW 3
11652: PPUSH
11653: CALL_OW 1
11657: ST_TO_ADDR
// end ; end ;
11658: GO 11377
11660: POP
11661: POP
// sides := Reindex ( sides , 1 , 8 , true ) ;
11662: LD_ADDR_VAR 0 5
11666: PUSH
11667: LD_VAR 0 5
11671: PPUSH
11672: LD_INT 1
11674: PPUSH
11675: LD_INT 8
11677: PPUSH
11678: LD_INT 1
11680: PPUSH
11681: CALL 26214 0 4
11685: ST_TO_ADDR
// until false ;
11686: LD_INT 0
11688: IFFALSE 11357
// end ;
11690: PPOPN 5
11692: END
// every 0 0$1 marked mpActive do
11693: GO 11695
11695: DISABLE
// begin enable ;
11696: ENABLE
// if not mpDisplayStrings then
11697: LD_EXP 47
11701: NOT
11702: IFFALSE 11713
// begin display_strings := [ ] ;
11704: LD_ADDR_OWVAR 47
11708: PUSH
11709: EMPTY
11710: ST_TO_ADDR
// exit ;
11711: GO 11723
// end ; display_strings := mpDisplayStrings ;
11713: LD_ADDR_OWVAR 47
11717: PUSH
11718: LD_EXP 47
11722: ST_TO_ADDR
// end ; end_of_file
11723: END
// export function Multiplayer_UnitDestroyed ( un ) ; var i , ape , tag , class , area , nation , side , tmp ; begin
11724: LD_INT 0
11726: PPUSH
11727: PPUSH
11728: PPUSH
11729: PPUSH
11730: PPUSH
11731: PPUSH
11732: PPUSH
11733: PPUSH
11734: PPUSH
// if GetType ( un ) = unit_vehicle then
11735: LD_VAR 0 1
11739: PPUSH
11740: CALL_OW 247
11744: PUSH
11745: LD_INT 2
11747: EQUAL
11748: IFFALSE 11752
// exit ;
11750: GO 12390
// side := GetSide ( un ) ;
11752: LD_ADDR_VAR 0 9
11756: PUSH
11757: LD_VAR 0 1
11761: PPUSH
11762: CALL_OW 255
11766: ST_TO_ADDR
// if mpGameType = GameTypeSurvival then
11767: LD_EXP 12
11771: PUSH
11772: LD_INT 2
11774: EQUAL
11775: IFFALSE 11851
// if GetBType ( un ) in [ b_depot , b_warehouse ] then
11777: LD_VAR 0 1
11781: PPUSH
11782: CALL_OW 266
11786: PUSH
11787: LD_INT 0
11789: PUSH
11790: LD_INT 1
11792: PUSH
11793: EMPTY
11794: LIST
11795: LIST
11796: IN
11797: IFFALSE 11851
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_human ] ] ) do
11799: LD_ADDR_VAR 0 3
11803: PUSH
11804: LD_INT 22
11806: PUSH
11807: LD_VAR 0 9
11811: PUSH
11812: EMPTY
11813: LIST
11814: LIST
11815: PUSH
11816: LD_INT 21
11818: PUSH
11819: LD_INT 1
11821: PUSH
11822: EMPTY
11823: LIST
11824: LIST
11825: PUSH
11826: EMPTY
11827: LIST
11828: LIST
11829: PPUSH
11830: CALL_OW 69
11834: PUSH
11835: FOR_IN
11836: IFFALSE 11849
// KillUnit ( i ) ;
11838: LD_VAR 0 3
11842: PPUSH
11843: CALL_OW 66
11847: GO 11835
11849: POP
11850: POP
// end ; if GetClass ( un ) in [ class_apeman , class_apeman_kamikaze , class_apeman_soldier , class_apeman_engineer ] or GetControl ( un ) = control_apeman then
11851: LD_VAR 0 1
11855: PPUSH
11856: CALL_OW 257
11860: PUSH
11861: LD_INT 12
11863: PUSH
11864: LD_INT 17
11866: PUSH
11867: LD_INT 15
11869: PUSH
11870: LD_INT 16
11872: PUSH
11873: EMPTY
11874: LIST
11875: LIST
11876: LIST
11877: LIST
11878: IN
11879: IFTRUE 11896
11881: PUSH
11882: LD_VAR 0 1
11886: PPUSH
11887: CALL_OW 263
11891: PUSH
11892: LD_INT 5
11894: EQUAL
11895: OR
11896: IFFALSE 12115
// begin tag := 0 ;
11898: LD_ADDR_VAR 0 5
11902: PUSH
11903: LD_INT 0
11905: ST_TO_ADDR
// for i := 1 to 8 do
11906: LD_ADDR_VAR 0 3
11910: PUSH
11911: DOUBLE
11912: LD_INT 1
11914: DEC
11915: ST_TO_ADDR
11916: LD_INT 8
11918: PUSH
11919: FOR_TO
11920: IFFALSE 11954
// if un in mpApePosIndex [ i ] then
11922: LD_VAR 0 1
11926: PUSH
11927: LD_EXP 41
11931: PUSH
11932: LD_VAR 0 3
11936: ARRAY
11937: IN
11938: IFFALSE 11952
// begin tag := i ;
11940: LD_ADDR_VAR 0 5
11944: PUSH
11945: LD_VAR 0 3
11949: ST_TO_ADDR
// break ;
11950: GO 11954
// end ;
11952: GO 11919
11954: POP
11955: POP
// if not tag then
11956: LD_VAR 0 5
11960: NOT
11961: IFFALSE 11965
// exit ;
11963: GO 12390
// area := mpApemansArea [ mpSidePositions [ tag ] ] ;
11965: LD_ADDR_VAR 0 7
11969: PUSH
11970: LD_EXP 40
11974: PUSH
11975: LD_EXP 16
11979: PUSH
11980: LD_VAR 0 5
11984: ARRAY
11985: ARRAY
11986: ST_TO_ADDR
// if not area then
11987: LD_VAR 0 7
11991: NOT
11992: IFFALSE 11996
// exit ;
11994: GO 12390
// wait ( 4 4$00 ) ;
11996: LD_INT 8400
11998: PPUSH
11999: CALL_OW 67
// repeat wait ( 10 ) ;
12003: LD_INT 10
12005: PPUSH
12006: CALL_OW 67
// until not mpBlockRespThread ;
12010: LD_EXP 54
12014: NOT
12015: IFFALSE 12003
// mpBlockRespThread := true ;
12017: LD_ADDR_EXP 54
12021: PUSH
12022: LD_INT 1
12024: ST_TO_ADDR
// PrepareApeman ( 0 ) ;
12025: LD_INT 0
12027: PPUSH
12028: CALL 55981 0 1
// ape := CreateHuman ;
12032: LD_ADDR_VAR 0 4
12036: PUSH
12037: CALL_OW 44
12041: ST_TO_ADDR
// mpApePosIndex := Replace ( mpApePosIndex , tag , Join ( mpApePosIndex [ tag ] , ape ) ) ;
12042: LD_ADDR_EXP 41
12046: PUSH
12047: LD_EXP 41
12051: PPUSH
12052: LD_VAR 0 5
12056: PPUSH
12057: LD_EXP 41
12061: PUSH
12062: LD_VAR 0 5
12066: ARRAY
12067: PPUSH
12068: LD_VAR 0 4
12072: PPUSH
12073: CALL 59854 0 2
12077: PPUSH
12078: CALL_OW 1
12082: ST_TO_ADDR
// PlaceUnitArea ( ape , area , false ) ;
12083: LD_VAR 0 4
12087: PPUSH
12088: LD_VAR 0 7
12092: PPUSH
12093: LD_INT 0
12095: PPUSH
12096: CALL_OW 49
// wait ( 10 ) ;
12100: LD_INT 10
12102: PPUSH
12103: CALL_OW 67
// mpBlockRespThread := false ;
12107: LD_ADDR_EXP 54
12111: PUSH
12112: LD_INT 0
12114: ST_TO_ADDR
// end ; if GetType ( un ) = unit_human and GetNation ( un ) > nation_nature then
12115: LD_VAR 0 1
12119: PPUSH
12120: CALL_OW 247
12124: PUSH
12125: LD_INT 1
12127: EQUAL
12128: IFFALSE 12145
12130: PUSH
12131: LD_VAR 0 1
12135: PPUSH
12136: CALL_OW 248
12140: PUSH
12141: LD_INT 0
12143: GREATER
12144: AND
12145: IFFALSE 12390
// begin if not mpRespawn then
12147: LD_EXP 42
12151: NOT
12152: IFFALSE 12156
// exit ;
12154: GO 12390
// if not MultiplayerSideAlive ( side ) and not HasPowerByGameType ( mpGameType , side ) then
12156: LD_VAR 0 9
12160: PPUSH
12161: CALL_OW 108
12165: NOT
12166: IFFALSE 12185
12168: PUSH
12169: LD_EXP 12
12173: PPUSH
12174: LD_VAR 0 9
12178: PPUSH
12179: CALL 10720 0 2
12183: NOT
12184: AND
12185: IFFALSE 12189
// exit ;
12187: GO 12390
// side := GetSide ( un ) ;
12189: LD_ADDR_VAR 0 9
12193: PUSH
12194: LD_VAR 0 1
12198: PPUSH
12199: CALL_OW 255
12203: ST_TO_ADDR
// nation := GetNation ( un ) ;
12204: LD_ADDR_VAR 0 8
12208: PUSH
12209: LD_VAR 0 1
12213: PPUSH
12214: CALL_OW 248
12218: ST_TO_ADDR
// class := GetClass ( un ) ;
12219: LD_ADDR_VAR 0 6
12223: PUSH
12224: LD_VAR 0 1
12228: PPUSH
12229: CALL_OW 257
12233: ST_TO_ADDR
// if class > 4 then
12234: LD_VAR 0 6
12238: PUSH
12239: LD_INT 4
12241: GREATER
12242: IFFALSE 12252
// class := 1 ;
12244: LD_ADDR_VAR 0 6
12248: PUSH
12249: LD_INT 1
12251: ST_TO_ADDR
// repeat wait ( 10 ) ;
12252: LD_INT 10
12254: PPUSH
12255: CALL_OW 67
// until not mpBlockRespThread ;
12259: LD_EXP 54
12263: NOT
12264: IFFALSE 12252
// mpBlockRespThread := true ;
12266: LD_ADDR_EXP 54
12270: PUSH
12271: LD_INT 1
12273: ST_TO_ADDR
// uc_side := side ;
12274: LD_ADDR_OWVAR 20
12278: PUSH
12279: LD_VAR 0 9
12283: ST_TO_ADDR
// uc_nation := nation ;
12284: LD_ADDR_OWVAR 21
12288: PUSH
12289: LD_VAR 0 8
12293: ST_TO_ADDR
// PrepareHuman ( false , class , 2 ) ;
12294: LD_INT 0
12296: PPUSH
12297: LD_VAR 0 6
12301: PPUSH
12302: LD_INT 2
12304: PPUSH
12305: CALL_OW 380
// un := CreateHuman ;
12309: LD_ADDR_VAR 0 1
12313: PUSH
12314: CALL_OW 44
12318: ST_TO_ADDR
// mpRespawnPull := Replace ( mpRespawnPull , side , Replace ( mpRespawnPull [ side ] , mpRespawnPull [ side ] + 1 , un ) ) ;
12319: LD_ADDR_EXP 49
12323: PUSH
12324: LD_EXP 49
12328: PPUSH
12329: LD_VAR 0 9
12333: PPUSH
12334: LD_EXP 49
12338: PUSH
12339: LD_VAR 0 9
12343: ARRAY
12344: PPUSH
12345: LD_EXP 49
12349: PUSH
12350: LD_VAR 0 9
12354: ARRAY
12355: PUSH
12356: LD_INT 1
12358: PLUS
12359: PPUSH
12360: LD_VAR 0 1
12364: PPUSH
12365: CALL_OW 1
12369: PPUSH
12370: CALL_OW 1
12374: ST_TO_ADDR
// wait ( 10 ) ;
12375: LD_INT 10
12377: PPUSH
12378: CALL_OW 67
// mpBlockRespThread := false ;
12382: LD_ADDR_EXP 54
12386: PUSH
12387: LD_INT 0
12389: ST_TO_ADDR
// end ; end ;
12390: LD_VAR 0 2
12394: RET
// export function Multiplayer_BuildingComplete ( building ) ; begin
12395: LD_INT 0
12397: PPUSH
// if GetBType ( building ) in [ b_depot , b_warehouse ] then
12398: LD_VAR 0 1
12402: PPUSH
12403: CALL_OW 266
12407: PUSH
12408: LD_INT 0
12410: PUSH
12411: LD_INT 1
12413: PUSH
12414: EMPTY
12415: LIST
12416: LIST
12417: IN
12418: IFFALSE 12443
// SetBName ( building , @ & GetSide ( building ) ) ;
12420: LD_VAR 0 1
12424: PPUSH
12425: LD_STRING @
12427: PUSH
12428: LD_VAR 0 1
12432: PPUSH
12433: CALL_OW 255
12437: STR
12438: PPUSH
12439: CALL_OW 500
// end ;
12443: LD_VAR 0 2
12447: RET
// export function Multiplayer_BuildingCaptured ( building , oldSide , unit ) ; var i ; begin
12448: LD_INT 0
12450: PPUSH
12451: PPUSH
// if mpGameType = GameTypeSurvival and GetBType ( building ) in [ b_depot , b_warehouse ] then
12452: LD_EXP 12
12456: PUSH
12457: LD_INT 2
12459: EQUAL
12460: IFFALSE 12484
12462: PUSH
12463: LD_VAR 0 1
12467: PPUSH
12468: CALL_OW 266
12472: PUSH
12473: LD_INT 0
12475: PUSH
12476: LD_INT 1
12478: PUSH
12479: EMPTY
12480: LIST
12481: LIST
12482: IN
12483: AND
12484: IFFALSE 12563
// begin SetSide ( building , oldSide ) ;
12486: LD_VAR 0 1
12490: PPUSH
12491: LD_VAR 0 2
12495: PPUSH
12496: CALL_OW 235
// KillUnit ( building ) ;
12500: LD_VAR 0 1
12504: PPUSH
12505: CALL_OW 66
// for i in FilterAllUnits ( [ [ f_side , oldSide ] , [ f_type , unit_human ] ] ) do
12509: LD_ADDR_VAR 0 5
12513: PUSH
12514: LD_INT 22
12516: PUSH
12517: LD_VAR 0 2
12521: PUSH
12522: EMPTY
12523: LIST
12524: LIST
12525: PUSH
12526: LD_INT 21
12528: PUSH
12529: LD_INT 1
12531: PUSH
12532: EMPTY
12533: LIST
12534: LIST
12535: PUSH
12536: EMPTY
12537: LIST
12538: LIST
12539: PPUSH
12540: CALL_OW 69
12544: PUSH
12545: FOR_IN
12546: IFFALSE 12559
// KillUnit ( i ) ;
12548: LD_VAR 0 5
12552: PPUSH
12553: CALL_OW 66
12557: GO 12545
12559: POP
12560: POP
// exit ;
12561: GO 12608
// end ; if GetBType ( building ) in [ b_depot , b_warehouse ] then
12563: LD_VAR 0 1
12567: PPUSH
12568: CALL_OW 266
12572: PUSH
12573: LD_INT 0
12575: PUSH
12576: LD_INT 1
12578: PUSH
12579: EMPTY
12580: LIST
12581: LIST
12582: IN
12583: IFFALSE 12608
// SetBName ( building , @ & GetSide ( building ) ) ;
12585: LD_VAR 0 1
12589: PPUSH
12590: LD_STRING @
12592: PUSH
12593: LD_VAR 0 1
12597: PPUSH
12598: CALL_OW 255
12602: STR
12603: PPUSH
12604: CALL_OW 500
// end ;
12608: LD_VAR 0 4
12612: RET
// export function Multiplayer_OilExtracted ( building , side , base , amount ) ; var i , value ; begin
12613: LD_INT 0
12615: PPUSH
12616: PPUSH
12617: PPUSH
// if mpGameType <> GameTypeFamine then
12618: LD_EXP 12
12622: PUSH
12623: LD_INT 5
12625: NONEQUAL
12626: IFFALSE 12630
// exit ;
12628: GO 12844
// for i := 1 to mpGlobalOilDeposits do
12630: LD_ADDR_VAR 0 6
12634: PUSH
12635: DOUBLE
12636: LD_INT 1
12638: DEC
12639: ST_TO_ADDR
12640: LD_EXP 50
12644: PUSH
12645: FOR_TO
12646: IFFALSE 12842
// begin if HexInfo ( mpGlobalOilDeposits [ i ] [ 1 ] , mpGlobalOilDeposits [ i ] [ 2 ] ) = building then
12648: LD_EXP 50
12652: PUSH
12653: LD_VAR 0 6
12657: ARRAY
12658: PUSH
12659: LD_INT 1
12661: ARRAY
12662: PPUSH
12663: LD_EXP 50
12667: PUSH
12668: LD_VAR 0 6
12672: ARRAY
12673: PUSH
12674: LD_INT 2
12676: ARRAY
12677: PPUSH
12678: CALL_OW 428
12682: PUSH
12683: LD_VAR 0 1
12687: EQUAL
12688: IFFALSE 12840
// begin value := mpGlobalOilDeposits [ i ] [ 3 ] ;
12690: LD_ADDR_VAR 0 7
12694: PUSH
12695: LD_EXP 50
12699: PUSH
12700: LD_VAR 0 6
12704: ARRAY
12705: PUSH
12706: LD_INT 3
12708: ARRAY
12709: ST_TO_ADDR
// value := Dec ( value ) ;
12710: LD_ADDR_VAR 0 7
12714: PUSH
12715: LD_VAR 0 7
12719: PPUSH
12720: CALL 61249 0 1
12724: ST_TO_ADDR
// mpGlobalOilDeposits := Replace ( mpGlobalOilDeposits , i , Replace ( mpGlobalOilDeposits [ i ] , 3 , value ) ) ;
12725: LD_ADDR_EXP 50
12729: PUSH
12730: LD_EXP 50
12734: PPUSH
12735: LD_VAR 0 6
12739: PPUSH
12740: LD_EXP 50
12744: PUSH
12745: LD_VAR 0 6
12749: ARRAY
12750: PPUSH
12751: LD_INT 3
12753: PPUSH
12754: LD_VAR 0 7
12758: PPUSH
12759: CALL_OW 1
12763: PPUSH
12764: CALL_OW 1
12768: ST_TO_ADDR
// SetUnitDisplayNumber ( building , value ) ;
12769: LD_VAR 0 1
12773: PPUSH
12774: LD_VAR 0 7
12778: PPUSH
12779: CALL_OW 505
// if value = 0 then
12783: LD_VAR 0 7
12787: PUSH
12788: LD_INT 0
12790: EQUAL
12791: IFFALSE 12840
// begin RemoveDepositXY ( mpGlobalOilDeposits [ i ] [ 1 ] , mpGlobalOilDeposits [ i ] [ 2 ] ) ;
12793: LD_EXP 50
12797: PUSH
12798: LD_VAR 0 6
12802: ARRAY
12803: PUSH
12804: LD_INT 1
12806: ARRAY
12807: PPUSH
12808: LD_EXP 50
12812: PUSH
12813: LD_VAR 0 6
12817: ARRAY
12818: PUSH
12819: LD_INT 2
12821: ARRAY
12822: PPUSH
12823: CALL_OW 63
// KillUnit ( building ) ;
12827: LD_VAR 0 1
12831: PPUSH
12832: CALL_OW 66
// exit ;
12836: POP
12837: POP
12838: GO 12844
// end ; end ; end ;
12840: GO 12645
12842: POP
12843: POP
// end ;
12844: LD_VAR 0 5
12848: RET
// export function Multiplayer_SibExtracted ( building , side , base , amount ) ; var i , value ; begin
12849: LD_INT 0
12851: PPUSH
12852: PPUSH
12853: PPUSH
// if mpGameType <> GameTypeFamine then
12854: LD_EXP 12
12858: PUSH
12859: LD_INT 5
12861: NONEQUAL
12862: IFFALSE 12866
// exit ;
12864: GO 13080
// for i := 1 to mpGlobalSibDeposits do
12866: LD_ADDR_VAR 0 6
12870: PUSH
12871: DOUBLE
12872: LD_INT 1
12874: DEC
12875: ST_TO_ADDR
12876: LD_EXP 51
12880: PUSH
12881: FOR_TO
12882: IFFALSE 13078
// begin if HexInfo ( mpGlobalSibDeposits [ i ] [ 1 ] , mpGlobalSibDeposits [ i ] [ 2 ] ) = building then
12884: LD_EXP 51
12888: PUSH
12889: LD_VAR 0 6
12893: ARRAY
12894: PUSH
12895: LD_INT 1
12897: ARRAY
12898: PPUSH
12899: LD_EXP 51
12903: PUSH
12904: LD_VAR 0 6
12908: ARRAY
12909: PUSH
12910: LD_INT 2
12912: ARRAY
12913: PPUSH
12914: CALL_OW 428
12918: PUSH
12919: LD_VAR 0 1
12923: EQUAL
12924: IFFALSE 13076
// begin value := mpGlobalSibDeposits [ i ] [ 3 ] ;
12926: LD_ADDR_VAR 0 7
12930: PUSH
12931: LD_EXP 51
12935: PUSH
12936: LD_VAR 0 6
12940: ARRAY
12941: PUSH
12942: LD_INT 3
12944: ARRAY
12945: ST_TO_ADDR
// value := Dec ( value ) ;
12946: LD_ADDR_VAR 0 7
12950: PUSH
12951: LD_VAR 0 7
12955: PPUSH
12956: CALL 61249 0 1
12960: ST_TO_ADDR
// mpGlobalSibDeposits := Replace ( mpGlobalSibDeposits , i , Replace ( mpGlobalSibDeposits [ i ] , 3 , value ) ) ;
12961: LD_ADDR_EXP 51
12965: PUSH
12966: LD_EXP 51
12970: PPUSH
12971: LD_VAR 0 6
12975: PPUSH
12976: LD_EXP 51
12980: PUSH
12981: LD_VAR 0 6
12985: ARRAY
12986: PPUSH
12987: LD_INT 3
12989: PPUSH
12990: LD_VAR 0 7
12994: PPUSH
12995: CALL_OW 1
12999: PPUSH
13000: CALL_OW 1
13004: ST_TO_ADDR
// SetUnitDisplayNumber ( building , value ) ;
13005: LD_VAR 0 1
13009: PPUSH
13010: LD_VAR 0 7
13014: PPUSH
13015: CALL_OW 505
// if value = 0 then
13019: LD_VAR 0 7
13023: PUSH
13024: LD_INT 0
13026: EQUAL
13027: IFFALSE 13076
// begin RemoveDepositXY ( mpGlobalSibDeposits [ i ] [ 1 ] , mpGlobalSibDeposits [ i ] [ 2 ] ) ;
13029: LD_EXP 51
13033: PUSH
13034: LD_VAR 0 6
13038: ARRAY
13039: PUSH
13040: LD_INT 1
13042: ARRAY
13043: PPUSH
13044: LD_EXP 51
13048: PUSH
13049: LD_VAR 0 6
13053: ARRAY
13054: PUSH
13055: LD_INT 2
13057: ARRAY
13058: PPUSH
13059: CALL_OW 63
// KillUnit ( building ) ;
13063: LD_VAR 0 1
13067: PPUSH
13068: CALL_OW 66
// exit ;
13072: POP
13073: POP
13074: GO 13080
// end ; end ; end ;
13076: GO 12881
13078: POP
13079: POP
// end ; end_of_file
13080: LD_VAR 0 5
13084: RET
// export mpKingPoints ; every 0 0$1 trigger mpGameActive marked GameTypeKing do var i , j , tmp ;
13085: LD_EXP 48
13089: IFFALSE 13430
13091: GO 13093
13093: DISABLE
13094: LD_INT 0
13096: PPUSH
13097: PPUSH
13098: PPUSH
// begin mpKingPoints := [ ] ;
13099: LD_ADDR_EXP 57
13103: PUSH
13104: EMPTY
13105: ST_TO_ADDR
// if mpTeamGame then
13106: LD_EXP 20
13110: IFFALSE 13164
// begin for i := 1 to Count ( mpTeams ) do
13112: LD_ADDR_VAR 0 1
13116: PUSH
13117: DOUBLE
13118: LD_INT 1
13120: DEC
13121: ST_TO_ADDR
13122: LD_EXP 19
13126: PPUSH
13127: CALL 23922 0 1
13131: PUSH
13132: FOR_TO
13133: IFFALSE 13160
// mpKingPoints := Replace ( mpKingPoints , i , 0 ) ;
13135: LD_ADDR_EXP 57
13139: PUSH
13140: LD_EXP 57
13144: PPUSH
13145: LD_VAR 0 1
13149: PPUSH
13150: LD_INT 0
13152: PPUSH
13153: CALL_OW 1
13157: ST_TO_ADDR
13158: GO 13132
13160: POP
13161: POP
// end else
13162: GO 13207
// begin for i := 1 to 8 do
13164: LD_ADDR_VAR 0 1
13168: PUSH
13169: DOUBLE
13170: LD_INT 1
13172: DEC
13173: ST_TO_ADDR
13174: LD_INT 8
13176: PUSH
13177: FOR_TO
13178: IFFALSE 13205
// mpKingPoints := Replace ( mpKingPoints , i , 0 ) ;
13180: LD_ADDR_EXP 57
13184: PUSH
13185: LD_EXP 57
13189: PPUSH
13190: LD_VAR 0 1
13194: PPUSH
13195: LD_INT 0
13197: PPUSH
13198: CALL_OW 1
13202: ST_TO_ADDR
13203: GO 13177
13205: POP
13206: POP
// end ; tmp := AreaToList ( kingCamArea , 0 ) ;
13207: LD_ADDR_VAR 0 3
13211: PUSH
13212: LD_EXP 2
13216: PPUSH
13217: LD_INT 0
13219: PPUSH
13220: CALL_OW 517
13224: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
13225: LD_ADDR_VAR 0 1
13229: PUSH
13230: DOUBLE
13231: LD_INT 1
13233: DEC
13234: ST_TO_ADDR
13235: LD_VAR 0 3
13239: PUSH
13240: LD_INT 1
13242: ARRAY
13243: PUSH
13244: FOR_TO
13245: IFFALSE 13312
// for j := 1 to 8 do
13247: LD_ADDR_VAR 0 2
13251: PUSH
13252: DOUBLE
13253: LD_INT 1
13255: DEC
13256: ST_TO_ADDR
13257: LD_INT 8
13259: PUSH
13260: FOR_TO
13261: IFFALSE 13308
// PlaceSeeing ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , j , - 12 ) ;
13263: LD_VAR 0 3
13267: PUSH
13268: LD_INT 1
13270: ARRAY
13271: PUSH
13272: LD_VAR 0 1
13276: ARRAY
13277: PPUSH
13278: LD_VAR 0 3
13282: PUSH
13283: LD_INT 2
13285: ARRAY
13286: PUSH
13287: LD_VAR 0 1
13291: ARRAY
13292: PPUSH
13293: LD_VAR 0 2
13297: PPUSH
13298: LD_INT 12
13300: NEG
13301: PPUSH
13302: CALL_OW 330
13306: GO 13260
13308: POP
13309: POP
13310: GO 13244
13312: POP
13313: POP
// SetAreaMapShow ( mpKingArea , 1 ) ;
13314: LD_EXP 43
13318: PPUSH
13319: LD_INT 1
13321: PPUSH
13322: CALL_OW 424
// UpdateCounter ;
13326: CALL 13936 0 0
// repeat wait ( 0 0$1 ) ;
13330: LD_INT 35
13332: PPUSH
13333: CALL_OW 67
// tmp := FilterUnitsInArea ( mpKingArea , [ [ f_not , [ f_constructed ] ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
13337: LD_ADDR_VAR 0 3
13341: PUSH
13342: LD_EXP 43
13346: PPUSH
13347: LD_INT 3
13349: PUSH
13350: LD_INT 57
13352: PUSH
13353: EMPTY
13354: LIST
13355: PUSH
13356: EMPTY
13357: LIST
13358: LIST
13359: PUSH
13360: LD_INT 50
13362: PUSH
13363: EMPTY
13364: LIST
13365: PUSH
13366: LD_INT 2
13368: PUSH
13369: LD_INT 30
13371: PUSH
13372: LD_INT 0
13374: PUSH
13375: EMPTY
13376: LIST
13377: LIST
13378: PUSH
13379: LD_INT 30
13381: PUSH
13382: LD_INT 1
13384: PUSH
13385: EMPTY
13386: LIST
13387: LIST
13388: PUSH
13389: EMPTY
13390: LIST
13391: LIST
13392: LIST
13393: PUSH
13394: EMPTY
13395: LIST
13396: LIST
13397: LIST
13398: PPUSH
13399: CALL_OW 70
13403: ST_TO_ADDR
// if not tmp then
13404: LD_VAR 0 3
13408: NOT
13409: IFFALSE 13413
// continue ;
13411: GO 13330
// AddPoints ( tmp ) ;
13413: LD_VAR 0 3
13417: PPUSH
13418: CALL 13614 0 1
// UpdateCounter ;
13422: CALL 13936 0 0
// until false ;
13426: LD_INT 0
13428: IFFALSE 13330
// end ;
13430: PPOPN 3
13432: END
// every 0 0$1 trigger mpGameActive and mpEmissions marked GameTypeKing do var i , tmp ;
13433: LD_EXP 48
13437: IFFALSE 13445
13439: PUSH
13440: LD_EXP 46
13444: AND
13445: IFFALSE 13611
13447: GO 13449
13449: DISABLE
13450: LD_INT 0
13452: PPUSH
13453: PPUSH
// begin tmp := AreaToList ( kingCamArea , 0 ) ;
13454: LD_ADDR_VAR 0 2
13458: PUSH
13459: LD_EXP 2
13463: PPUSH
13464: LD_INT 0
13466: PPUSH
13467: CALL_OW 517
13471: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
13472: LD_ADDR_VAR 0 1
13476: PUSH
13477: DOUBLE
13478: LD_INT 1
13480: DEC
13481: ST_TO_ADDR
13482: LD_VAR 0 2
13486: PUSH
13487: LD_INT 1
13489: ARRAY
13490: PUSH
13491: FOR_TO
13492: IFFALSE 13533
// ArtContamination ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 125 ) ;
13494: LD_VAR 0 2
13498: PUSH
13499: LD_INT 1
13501: ARRAY
13502: PUSH
13503: LD_VAR 0 1
13507: ARRAY
13508: PPUSH
13509: LD_VAR 0 2
13513: PUSH
13514: LD_INT 2
13516: ARRAY
13517: PUSH
13518: LD_VAR 0 1
13522: ARRAY
13523: PPUSH
13524: LD_INT 125
13526: PPUSH
13527: CALL_OW 495
13531: GO 13491
13533: POP
13534: POP
// repeat wait ( mpEmissions ) ;
13535: LD_EXP 46
13539: PPUSH
13540: CALL_OW 67
// for i := 1 to tmp [ 1 ] do
13544: LD_ADDR_VAR 0 1
13548: PUSH
13549: DOUBLE
13550: LD_INT 1
13552: DEC
13553: ST_TO_ADDR
13554: LD_VAR 0 2
13558: PUSH
13559: LD_INT 1
13561: ARRAY
13562: PUSH
13563: FOR_TO
13564: IFFALSE 13605
// ArtContamination ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 15 ) ;
13566: LD_VAR 0 2
13570: PUSH
13571: LD_INT 1
13573: ARRAY
13574: PUSH
13575: LD_VAR 0 1
13579: ARRAY
13580: PPUSH
13581: LD_VAR 0 2
13585: PUSH
13586: LD_INT 2
13588: ARRAY
13589: PUSH
13590: LD_VAR 0 1
13594: ARRAY
13595: PPUSH
13596: LD_INT 15
13598: PPUSH
13599: CALL_OW 495
13603: GO 13563
13605: POP
13606: POP
// until false ;
13607: LD_INT 0
13609: IFFALSE 13535
// end ;
13611: PPOPN 2
13613: END
// function AddPoints ( depots ) ; var i , first , team , side ; begin
13614: LD_INT 0
13616: PPUSH
13617: PPUSH
13618: PPUSH
13619: PPUSH
13620: PPUSH
// if mpTeamGame then
13621: LD_EXP 20
13625: IFFALSE 13822
// begin first := depots [ 1 ] ;
13627: LD_ADDR_VAR 0 4
13631: PUSH
13632: LD_VAR 0 1
13636: PUSH
13637: LD_INT 1
13639: ARRAY
13640: ST_TO_ADDR
// side := GetSide ( first ) ;
13641: LD_ADDR_VAR 0 6
13645: PUSH
13646: LD_VAR 0 4
13650: PPUSH
13651: CALL_OW 255
13655: ST_TO_ADDR
// for i := 1 to mpTeams do
13656: LD_ADDR_VAR 0 3
13660: PUSH
13661: DOUBLE
13662: LD_INT 1
13664: DEC
13665: ST_TO_ADDR
13666: LD_EXP 19
13670: PUSH
13671: FOR_TO
13672: IFFALSE 13706
// if side in mpTeams [ i ] then
13674: LD_VAR 0 6
13678: PUSH
13679: LD_EXP 19
13683: PUSH
13684: LD_VAR 0 3
13688: ARRAY
13689: IN
13690: IFFALSE 13704
// begin team := i ;
13692: LD_ADDR_VAR 0 5
13696: PUSH
13697: LD_VAR 0 3
13701: ST_TO_ADDR
// break ;
13702: GO 13706
// end ;
13704: GO 13671
13706: POP
13707: POP
// if not team then
13708: LD_VAR 0 5
13712: NOT
13713: IFFALSE 13717
// exit ;
13715: GO 13931
// if FilterUnitsInArea ( mpKingArea , [ f_enemy , side ] ) then
13717: LD_EXP 43
13721: PPUSH
13722: LD_INT 81
13724: PUSH
13725: LD_VAR 0 6
13729: PUSH
13730: EMPTY
13731: LIST
13732: LIST
13733: PPUSH
13734: CALL_OW 70
13738: IFFALSE 13742
// exit ;
13740: GO 13931
// mpKingPoints := Replace ( mpKingPoints , team , mpKingPoints [ team ] + 1 ) ;
13742: LD_ADDR_EXP 57
13746: PUSH
13747: LD_EXP 57
13751: PPUSH
13752: LD_VAR 0 5
13756: PPUSH
13757: LD_EXP 57
13761: PUSH
13762: LD_VAR 0 5
13766: ARRAY
13767: PUSH
13768: LD_INT 1
13770: PLUS
13771: PPUSH
13772: CALL_OW 1
13776: ST_TO_ADDR
// for i in mpTeams [ team ] do
13777: LD_ADDR_VAR 0 3
13781: PUSH
13782: LD_EXP 19
13786: PUSH
13787: LD_VAR 0 5
13791: ARRAY
13792: PUSH
13793: FOR_IN
13794: IFFALSE 13818
// SetMultiScore ( i , mpKingPoints [ team ] ) ;
13796: LD_VAR 0 3
13800: PPUSH
13801: LD_EXP 57
13805: PUSH
13806: LD_VAR 0 5
13810: ARRAY
13811: PPUSH
13812: CALL_OW 506
13816: GO 13793
13818: POP
13819: POP
// end else
13820: GO 13931
// begin first := depots [ 1 ] ;
13822: LD_ADDR_VAR 0 4
13826: PUSH
13827: LD_VAR 0 1
13831: PUSH
13832: LD_INT 1
13834: ARRAY
13835: ST_TO_ADDR
// side := GetSide ( first ) ;
13836: LD_ADDR_VAR 0 6
13840: PUSH
13841: LD_VAR 0 4
13845: PPUSH
13846: CALL_OW 255
13850: ST_TO_ADDR
// if FilterUnitsInArea ( mpKingArea , [ f_enemy , side ] ) then
13851: LD_EXP 43
13855: PPUSH
13856: LD_INT 81
13858: PUSH
13859: LD_VAR 0 6
13863: PUSH
13864: EMPTY
13865: LIST
13866: LIST
13867: PPUSH
13868: CALL_OW 70
13872: IFFALSE 13876
// exit ;
13874: GO 13931
// mpKingPoints := Replace ( mpKingPoints , side , mpKingPoints [ side ] + 1 ) ;
13876: LD_ADDR_EXP 57
13880: PUSH
13881: LD_EXP 57
13885: PPUSH
13886: LD_VAR 0 6
13890: PPUSH
13891: LD_EXP 57
13895: PUSH
13896: LD_VAR 0 6
13900: ARRAY
13901: PUSH
13902: LD_INT 1
13904: PLUS
13905: PPUSH
13906: CALL_OW 1
13910: ST_TO_ADDR
// SetMultiScore ( side , mpKingPoints [ side ] ) ;
13911: LD_VAR 0 6
13915: PPUSH
13916: LD_EXP 57
13920: PUSH
13921: LD_VAR 0 6
13925: ARRAY
13926: PPUSH
13927: CALL_OW 506
// end ; end ;
13931: LD_VAR 0 2
13935: RET
// function UpdateCounter ; var i ; begin
13936: LD_INT 0
13938: PPUSH
13939: PPUSH
// result := [ ] ;
13940: LD_ADDR_VAR 0 1
13944: PUSH
13945: EMPTY
13946: ST_TO_ADDR
// if mpTeamGame then
13947: LD_EXP 20
13951: IFFALSE 14018
// begin for i := 1 to mpTeams do
13953: LD_ADDR_VAR 0 2
13957: PUSH
13958: DOUBLE
13959: LD_INT 1
13961: DEC
13962: ST_TO_ADDR
13963: LD_EXP 19
13967: PUSH
13968: FOR_TO
13969: IFFALSE 14014
// result := result ^ [ #KingoftheHill-Team , i , mpKingPoints [ i ] , mpPoints ] ;
13971: LD_ADDR_VAR 0 1
13975: PUSH
13976: LD_VAR 0 1
13980: PUSH
13981: LD_STRING #KingoftheHill-Team
13983: PUSH
13984: LD_VAR 0 2
13988: PUSH
13989: LD_EXP 57
13993: PUSH
13994: LD_VAR 0 2
13998: ARRAY
13999: PUSH
14000: LD_EXP 44
14004: PUSH
14005: EMPTY
14006: LIST
14007: LIST
14008: LIST
14009: LIST
14010: ADD
14011: ST_TO_ADDR
14012: GO 13968
14014: POP
14015: POP
// end else
14016: GO 14091
// begin for i := 1 to 8 do
14018: LD_ADDR_VAR 0 2
14022: PUSH
14023: DOUBLE
14024: LD_INT 1
14026: DEC
14027: ST_TO_ADDR
14028: LD_INT 8
14030: PUSH
14031: FOR_TO
14032: IFFALSE 14089
// if mpSidePositions [ i ] then
14034: LD_EXP 16
14038: PUSH
14039: LD_VAR 0 2
14043: ARRAY
14044: IFFALSE 14087
// result := result ^ [ #KingoftheHill-Player , i , mpKingPoints [ i ] , mpPoints ] ;
14046: LD_ADDR_VAR 0 1
14050: PUSH
14051: LD_VAR 0 1
14055: PUSH
14056: LD_STRING #KingoftheHill-Player
14058: PUSH
14059: LD_VAR 0 2
14063: PUSH
14064: LD_EXP 57
14068: PUSH
14069: LD_VAR 0 2
14073: ARRAY
14074: PUSH
14075: LD_EXP 44
14079: PUSH
14080: EMPTY
14081: LIST
14082: LIST
14083: LIST
14084: LIST
14085: ADD
14086: ST_TO_ADDR
14087: GO 14031
14089: POP
14090: POP
// end ; mpDisplayStrings := result ;
14091: LD_ADDR_EXP 47
14095: PUSH
14096: LD_VAR 0 1
14100: ST_TO_ADDR
// end ;
14101: LD_VAR 0 1
14105: RET
// export function HowMuchPointsKing ( side ) ; begin
14106: LD_INT 0
14108: PPUSH
// result := HowMuchPoints ( side ) ;
14109: LD_ADDR_VAR 0 2
14113: PUSH
14114: LD_VAR 0 1
14118: PPUSH
14119: CALL 14129 0 1
14123: ST_TO_ADDR
// end ;
14124: LD_VAR 0 2
14128: RET
// function HowMuchPoints ( side ) ; var i ; begin
14129: LD_INT 0
14131: PPUSH
14132: PPUSH
// if mpTeamGame then
14133: LD_EXP 20
14137: IFFALSE 14206
// begin for i := 1 to Count ( mpTeams ) do
14139: LD_ADDR_VAR 0 3
14143: PUSH
14144: DOUBLE
14145: LD_INT 1
14147: DEC
14148: ST_TO_ADDR
14149: LD_EXP 19
14153: PPUSH
14154: CALL 23922 0 1
14158: PUSH
14159: FOR_TO
14160: IFFALSE 14202
// begin if side in mpTeams [ i ] then
14162: LD_VAR 0 1
14166: PUSH
14167: LD_EXP 19
14171: PUSH
14172: LD_VAR 0 3
14176: ARRAY
14177: IN
14178: IFFALSE 14200
// begin result := mpKingPoints [ i ] ;
14180: LD_ADDR_VAR 0 2
14184: PUSH
14185: LD_EXP 57
14189: PUSH
14190: LD_VAR 0 3
14194: ARRAY
14195: ST_TO_ADDR
// exit ;
14196: POP
14197: POP
14198: GO 14222
// end ; end ;
14200: GO 14159
14202: POP
14203: POP
// end else
14204: GO 14222
// result := mpKingPoints [ side ] ;
14206: LD_ADDR_VAR 0 2
14210: PUSH
14211: LD_EXP 57
14215: PUSH
14216: LD_VAR 0 1
14220: ARRAY
14221: ST_TO_ADDR
// end ;
14222: LD_VAR 0 2
14226: RET
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeKing do var i , canWin ;
14227: LD_EXP 48
14231: IFFALSE 14239
14233: PUSH
14234: CALL 14574 0 0
14238: AND
14239: IFFALSE 14247
14241: PUSH
14242: LD_OWVAR 4
14246: AND
14247: IFFALSE 14497
14249: GO 14251
14251: DISABLE
14252: LD_INT 0
14254: PPUSH
14255: PPUSH
// begin canWin := false ;
14256: LD_ADDR_VAR 0 2
14260: PUSH
14261: LD_INT 0
14263: ST_TO_ADDR
// if not HasPower ( your_side ) then
14264: LD_OWVAR 2
14268: PPUSH
14269: CALL 14616 0 1
14273: NOT
14274: IFFALSE 14285
// begin Multiplayer_Loose_Message ;
14276: CALL_OW 521
// enable ( mpLose ) ;
14280: LD_INT 102
14282: ENABLE_MARKED
// end else
14283: GO 14497
// begin canWin := ( HowMuchPoints ( your_side ) >= mpPoints and HasPower ( your_side ) ) or not EnemiesInGame ;
14285: LD_ADDR_VAR 0 2
14289: PUSH
14290: LD_OWVAR 2
14294: PPUSH
14295: CALL 14129 0 1
14299: PUSH
14300: LD_EXP 44
14304: GREATEREQUAL
14305: IFFALSE 14318
14307: PUSH
14308: LD_OWVAR 2
14312: PPUSH
14313: CALL 14616 0 1
14317: AND
14318: IFTRUE 14327
14320: PUSH
14321: CALL 14500 0 0
14325: NOT
14326: OR
14327: ST_TO_ADDR
// for i := 1 to 8 do
14328: LD_ADDR_VAR 0 1
14332: PUSH
14333: DOUBLE
14334: LD_INT 1
14336: DEC
14337: ST_TO_ADDR
14338: LD_INT 8
14340: PUSH
14341: FOR_TO
14342: IFFALSE 14483
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
14344: LD_EXP 16
14348: PUSH
14349: LD_VAR 0 1
14353: ARRAY
14354: IFFALSE 14367
14356: PUSH
14357: LD_VAR 0 1
14361: PPUSH
14362: CALL_OW 108
14366: AND
14367: IFFALSE 14381
14369: PUSH
14370: LD_VAR 0 1
14374: PUSH
14375: LD_OWVAR 2
14379: NONEQUAL
14380: AND
14381: IFFALSE 14481
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
14383: LD_EXP 17
14387: PUSH
14388: LD_VAR 0 1
14392: ARRAY
14393: NOT
14394: IFTRUE 14442
14396: PUSH
14397: LD_EXP 17
14401: PUSH
14402: LD_VAR 0 1
14406: ARRAY
14407: PUSH
14408: LD_EXP 17
14412: PUSH
14413: LD_OWVAR 2
14417: ARRAY
14418: NONEQUAL
14419: IFFALSE 14441
14421: PUSH
14422: LD_OWVAR 2
14426: PPUSH
14427: LD_VAR 0 1
14431: PPUSH
14432: CALL_OW 81
14436: PUSH
14437: LD_INT 1
14439: NONEQUAL
14440: AND
14441: OR
14442: IFFALSE 14481
// if HowMuchPoints ( i ) >= mpPoints and HasPower ( i ) then
14444: LD_VAR 0 1
14448: PPUSH
14449: CALL 14129 0 1
14453: PUSH
14454: LD_EXP 44
14458: GREATEREQUAL
14459: IFFALSE 14472
14461: PUSH
14462: LD_VAR 0 1
14466: PPUSH
14467: CALL 14616 0 1
14471: AND
14472: IFFALSE 14481
// begin enable ( mpLose ) ;
14474: LD_INT 102
14476: ENABLE_MARKED
// exit ;
14477: POP
14478: POP
14479: GO 14497
// end ;
14481: GO 14341
14483: POP
14484: POP
// if canWin then
14485: LD_VAR 0 2
14489: IFFALSE 14496
// enable ( mpWin ) else
14491: LD_INT 101
14493: ENABLE_MARKED
14494: GO 14497
// enable ;
14496: ENABLE
// end ; end ;
14497: PPOPN 2
14499: END
// function EnemiesInGame ; var i ; begin
14500: LD_INT 0
14502: PPUSH
14503: PPUSH
// result := false ;
14504: LD_ADDR_VAR 0 1
14508: PUSH
14509: LD_INT 0
14511: ST_TO_ADDR
// for i := 1 to 8 do
14512: LD_ADDR_VAR 0 2
14516: PUSH
14517: DOUBLE
14518: LD_INT 1
14520: DEC
14521: ST_TO_ADDR
14522: LD_INT 8
14524: PUSH
14525: FOR_TO
14526: IFFALSE 14567
// if i <> your_side and HasPower ( i ) then
14528: LD_VAR 0 2
14532: PUSH
14533: LD_OWVAR 2
14537: NONEQUAL
14538: IFFALSE 14551
14540: PUSH
14541: LD_VAR 0 2
14545: PPUSH
14546: CALL 14616 0 1
14550: AND
14551: IFFALSE 14565
// begin result := true ;
14553: LD_ADDR_VAR 0 1
14557: PUSH
14558: LD_INT 1
14560: ST_TO_ADDR
// exit ;
14561: POP
14562: POP
14563: GO 14569
// end ;
14565: GO 14525
14567: POP
14568: POP
// end ;
14569: LD_VAR 0 1
14573: RET
// function CanWinLoose ; begin
14574: LD_INT 0
14576: PPUSH
// result := true ;
14577: LD_ADDR_VAR 0 1
14581: PUSH
14582: LD_INT 1
14584: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
14585: CALL_OW 531
14589: IFFALSE 14601
14591: PUSH
14592: CALL_OW 519
14596: PUSH
14597: LD_INT 1
14599: GREATER
14600: AND
14601: IFFALSE 14611
// result := false ;
14603: LD_ADDR_VAR 0 1
14607: PUSH
14608: LD_INT 0
14610: ST_TO_ADDR
// end ;
14611: LD_VAR 0 1
14615: RET
// function HasPower ( i ) ; begin
14616: LD_INT 0
14618: PPUSH
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
14619: LD_ADDR_VAR 0 2
14623: PUSH
14624: LD_INT 22
14626: PUSH
14627: LD_VAR 0 1
14631: PUSH
14632: EMPTY
14633: LIST
14634: LIST
14635: PUSH
14636: LD_INT 2
14638: PUSH
14639: LD_INT 21
14641: PUSH
14642: LD_INT 1
14644: PUSH
14645: EMPTY
14646: LIST
14647: LIST
14648: PUSH
14649: LD_INT 33
14651: PUSH
14652: LD_INT 3
14654: PUSH
14655: EMPTY
14656: LIST
14657: LIST
14658: PUSH
14659: LD_INT 33
14661: PUSH
14662: LD_INT 5
14664: PUSH
14665: EMPTY
14666: LIST
14667: LIST
14668: PUSH
14669: EMPTY
14670: LIST
14671: LIST
14672: LIST
14673: LIST
14674: PUSH
14675: EMPTY
14676: LIST
14677: LIST
14678: PPUSH
14679: CALL_OW 69
14683: ST_TO_ADDR
// end ; end_of_file
14684: LD_VAR 0 2
14688: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
14689: LD_VAR 0 1
14693: PUSH
14694: LD_INT 200
14696: DOUBLE
14697: GREATEREQUAL
14698: IFFALSE 14706
14700: LD_INT 299
14702: DOUBLE
14703: LESSEQUAL
14704: IFTRUE 14708
14706: GO 14740
14708: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
14709: LD_VAR 0 1
14713: PPUSH
14714: LD_VAR 0 2
14718: PPUSH
14719: LD_VAR 0 3
14723: PPUSH
14724: LD_VAR 0 4
14728: PPUSH
14729: LD_VAR 0 5
14733: PPUSH
14734: CALL 16965 0 5
14738: GO 14817
14740: LD_INT 300
14742: DOUBLE
14743: GREATEREQUAL
14744: IFFALSE 14752
14746: LD_INT 399
14748: DOUBLE
14749: LESSEQUAL
14750: IFTRUE 14754
14752: GO 14816
14754: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
14755: LD_VAR 0 1
14759: PPUSH
14760: LD_VAR 0 2
14764: PPUSH
14765: LD_VAR 0 3
14769: PPUSH
14770: LD_VAR 0 4
14774: PPUSH
14775: LD_VAR 0 5
14779: PPUSH
14780: LD_VAR 0 6
14784: PPUSH
14785: LD_VAR 0 7
14789: PPUSH
14790: LD_VAR 0 8
14794: PPUSH
14795: LD_VAR 0 9
14799: PPUSH
14800: LD_VAR 0 10
14804: PPUSH
14805: LD_VAR 0 11
14809: PPUSH
14810: CALL 15446 0 11
14814: GO 14817
14816: POP
// end ;
14817: PPOPN 11
14819: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
14820: LD_VAR 0 1
14824: PPUSH
14825: LD_VAR 0 2
14829: PPUSH
14830: LD_VAR 0 3
14834: PPUSH
14835: LD_VAR 0 4
14839: PPUSH
14840: LD_VAR 0 5
14844: PPUSH
14845: CALL 16346 0 5
// end ; end_of_file
14849: PPOPN 5
14851: END
// every 0 0$1 do
14852: GO 14854
14854: DISABLE
// begin enable ;
14855: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
14856: LD_STRING updateTimer(
14858: PUSH
14859: LD_OWVAR 1
14863: STR
14864: PUSH
14865: LD_STRING );
14867: STR
14868: PPUSH
14869: CALL_OW 559
// end ;
14873: END
// export function SOS_MapStart ( ) ; begin
14874: LD_INT 0
14876: PPUSH
// UpdateFactoryWaypoints ( ) ;
14877: CALL 15808 0 0
// UpdateWarehouseGatheringPoints ( ) ;
14881: CALL 16060 0 0
// ParseMultiDataToLua ( ) ;
14885: CALL 16207 0 0
// ToLua ( setSpecLogoNumber( & 2 & , & 1 & ) ) ;
14889: LD_STRING setSpecLogoNumber(
14891: PUSH
14892: LD_INT 2
14894: STR
14895: PUSH
14896: LD_STRING ,
14898: STR
14899: PUSH
14900: LD_INT 1
14902: STR
14903: PUSH
14904: LD_STRING )
14906: STR
14907: PPUSH
14908: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 3 & , & 2 & ) ) ;
14912: LD_STRING setSpecLogoNumber(
14914: PUSH
14915: LD_INT 3
14917: STR
14918: PUSH
14919: LD_STRING ,
14921: STR
14922: PUSH
14923: LD_INT 2
14925: STR
14926: PUSH
14927: LD_STRING )
14929: STR
14930: PPUSH
14931: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 4 & , & 3 & ) ) ;
14935: LD_STRING setSpecLogoNumber(
14937: PUSH
14938: LD_INT 4
14940: STR
14941: PUSH
14942: LD_STRING ,
14944: STR
14945: PUSH
14946: LD_INT 3
14948: STR
14949: PUSH
14950: LD_STRING )
14952: STR
14953: PPUSH
14954: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 5 & , & 4 & ) ) ;
14958: LD_STRING setSpecLogoNumber(
14960: PUSH
14961: LD_INT 5
14963: STR
14964: PUSH
14965: LD_STRING ,
14967: STR
14968: PUSH
14969: LD_INT 4
14971: STR
14972: PUSH
14973: LD_STRING )
14975: STR
14976: PPUSH
14977: CALL_OW 559
// end ;
14981: LD_VAR 0 1
14985: RET
// export function UpdateSpectatorBar ; var i , j , crates , oil , sib , people , base , bases ; begin
14986: LD_INT 0
14988: PPUSH
14989: PPUSH
14990: PPUSH
14991: PPUSH
14992: PPUSH
14993: PPUSH
14994: PPUSH
14995: PPUSH
14996: PPUSH
// for i := 1 to 8 do
14997: LD_ADDR_VAR 0 2
15001: PUSH
15002: DOUBLE
15003: LD_INT 1
15005: DEC
15006: ST_TO_ADDR
15007: LD_INT 8
15009: PUSH
15010: FOR_TO
15011: IFFALSE 15396
// begin if mpSidePositions [ i ] then
15013: LD_EXP 16
15017: PUSH
15018: LD_VAR 0 2
15022: ARRAY
15023: IFFALSE 15394
// begin people := Count ( FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) ) ;
15025: LD_ADDR_VAR 0 7
15029: PUSH
15030: LD_INT 22
15032: PUSH
15033: LD_VAR 0 2
15037: PUSH
15038: EMPTY
15039: LIST
15040: LIST
15041: PUSH
15042: LD_INT 21
15044: PUSH
15045: LD_INT 1
15047: PUSH
15048: EMPTY
15049: LIST
15050: LIST
15051: PUSH
15052: EMPTY
15053: LIST
15054: LIST
15055: PPUSH
15056: CALL_OW 69
15060: PPUSH
15061: CALL 23922 0 1
15065: ST_TO_ADDR
// bases := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
15066: LD_ADDR_VAR 0 9
15070: PUSH
15071: LD_INT 22
15073: PUSH
15074: LD_VAR 0 2
15078: PUSH
15079: EMPTY
15080: LIST
15081: LIST
15082: PUSH
15083: LD_INT 2
15085: PUSH
15086: LD_INT 30
15088: PUSH
15089: LD_INT 0
15091: PUSH
15092: EMPTY
15093: LIST
15094: LIST
15095: PUSH
15096: LD_INT 30
15098: PUSH
15099: LD_INT 1
15101: PUSH
15102: EMPTY
15103: LIST
15104: LIST
15105: PUSH
15106: EMPTY
15107: LIST
15108: LIST
15109: LIST
15110: PUSH
15111: EMPTY
15112: LIST
15113: LIST
15114: PPUSH
15115: CALL_OW 69
15119: ST_TO_ADDR
// crates := 0 ;
15120: LD_ADDR_VAR 0 4
15124: PUSH
15125: LD_INT 0
15127: ST_TO_ADDR
// oil := 0 ;
15128: LD_ADDR_VAR 0 5
15132: PUSH
15133: LD_INT 0
15135: ST_TO_ADDR
// sib := 0 ;
15136: LD_ADDR_VAR 0 6
15140: PUSH
15141: LD_INT 0
15143: ST_TO_ADDR
// if bases then
15144: LD_VAR 0 9
15148: IFFALSE 15254
// begin for j in bases do
15150: LD_ADDR_VAR 0 3
15154: PUSH
15155: LD_VAR 0 9
15159: PUSH
15160: FOR_IN
15161: IFFALSE 15252
// begin base := GetBase ( j ) ;
15163: LD_ADDR_VAR 0 8
15167: PUSH
15168: LD_VAR 0 3
15172: PPUSH
15173: CALL_OW 274
15177: ST_TO_ADDR
// crates := crates + GetResourceType ( base , mat_cans ) ;
15178: LD_ADDR_VAR 0 4
15182: PUSH
15183: LD_VAR 0 4
15187: PUSH
15188: LD_VAR 0 8
15192: PPUSH
15193: LD_INT 1
15195: PPUSH
15196: CALL_OW 275
15200: PLUS
15201: ST_TO_ADDR
// oil := oil + GetResourceType ( base , mat_oil ) ;
15202: LD_ADDR_VAR 0 5
15206: PUSH
15207: LD_VAR 0 5
15211: PUSH
15212: LD_VAR 0 8
15216: PPUSH
15217: LD_INT 2
15219: PPUSH
15220: CALL_OW 275
15224: PLUS
15225: ST_TO_ADDR
// sib := sib + GetResourceType ( base , mat_siberit ) ;
15226: LD_ADDR_VAR 0 6
15230: PUSH
15231: LD_VAR 0 6
15235: PUSH
15236: LD_VAR 0 8
15240: PPUSH
15241: LD_INT 3
15243: PPUSH
15244: CALL_OW 275
15248: PLUS
15249: ST_TO_ADDR
// end ;
15250: GO 15160
15252: POP
15253: POP
// end ; ToLua ( setSpecText( & i & , & 2 & , & crates & ) ) ;
15254: LD_STRING setSpecText(
15256: PUSH
15257: LD_VAR 0 2
15261: STR
15262: PUSH
15263: LD_STRING ,
15265: STR
15266: PUSH
15267: LD_INT 2
15269: STR
15270: PUSH
15271: LD_STRING ,
15273: STR
15274: PUSH
15275: LD_VAR 0 4
15279: STR
15280: PUSH
15281: LD_STRING )
15283: STR
15284: PPUSH
15285: CALL_OW 559
// ToLua ( setSpecText( & i & , & 3 & , & oil & ) ) ;
15289: LD_STRING setSpecText(
15291: PUSH
15292: LD_VAR 0 2
15296: STR
15297: PUSH
15298: LD_STRING ,
15300: STR
15301: PUSH
15302: LD_INT 3
15304: STR
15305: PUSH
15306: LD_STRING ,
15308: STR
15309: PUSH
15310: LD_VAR 0 5
15314: STR
15315: PUSH
15316: LD_STRING )
15318: STR
15319: PPUSH
15320: CALL_OW 559
// ToLua ( setSpecText( & i & , & 4 & , & sib & ) ) ;
15324: LD_STRING setSpecText(
15326: PUSH
15327: LD_VAR 0 2
15331: STR
15332: PUSH
15333: LD_STRING ,
15335: STR
15336: PUSH
15337: LD_INT 4
15339: STR
15340: PUSH
15341: LD_STRING ,
15343: STR
15344: PUSH
15345: LD_VAR 0 6
15349: STR
15350: PUSH
15351: LD_STRING )
15353: STR
15354: PPUSH
15355: CALL_OW 559
// ToLua ( setSpecText( & i & , & 5 & , & people & ) ) ;
15359: LD_STRING setSpecText(
15361: PUSH
15362: LD_VAR 0 2
15366: STR
15367: PUSH
15368: LD_STRING ,
15370: STR
15371: PUSH
15372: LD_INT 5
15374: STR
15375: PUSH
15376: LD_STRING ,
15378: STR
15379: PUSH
15380: LD_VAR 0 7
15384: STR
15385: PUSH
15386: LD_STRING )
15388: STR
15389: PPUSH
15390: CALL_OW 559
// end ; end ;
15394: GO 15010
15396: POP
15397: POP
// end ;
15398: LD_VAR 0 1
15402: RET
// every 20 + 0 0$5 trigger FilterAllUnits ( [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) do
15403: LD_INT 2
15405: PUSH
15406: LD_INT 30
15408: PUSH
15409: LD_INT 0
15411: PUSH
15412: EMPTY
15413: LIST
15414: LIST
15415: PUSH
15416: LD_INT 30
15418: PUSH
15419: LD_INT 1
15421: PUSH
15422: EMPTY
15423: LIST
15424: LIST
15425: PUSH
15426: EMPTY
15427: LIST
15428: LIST
15429: LIST
15430: PPUSH
15431: CALL_OW 69
15435: IFFALSE 15445
15437: GO 15439
15439: DISABLE
// begin enable ;
15440: ENABLE
// UpdateSpectatorBar ;
15441: CALL 14986 0 0
// end ;
15445: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
15446: LD_INT 0
15448: PPUSH
// end ;
15449: LD_VAR 0 12
15453: RET
// export factoryWaypoints , factoryWaypointsDrivers ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
15454: LD_INT 0
15456: PPUSH
15457: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
15458: LD_VAR 0 1
15462: NOT
15463: IFTRUE 15482
15465: PUSH
15466: LD_VAR 0 2
15470: PPUSH
15471: LD_VAR 0 3
15475: PPUSH
15476: CALL_OW 488
15480: NOT
15481: OR
15482: IFTRUE 15517
15484: PUSH
15485: LD_VAR 0 1
15489: PPUSH
15490: CALL_OW 266
15494: PUSH
15495: LD_INT 3
15497: NONEQUAL
15498: IFFALSE 15516
15500: PUSH
15501: LD_VAR 0 1
15505: PPUSH
15506: CALL_OW 247
15510: PUSH
15511: LD_INT 1
15513: EQUAL
15514: NOT
15515: AND
15516: OR
15517: IFFALSE 15521
// exit ;
15519: GO 15803
// if GetType ( factory ) = unit_human then
15521: LD_VAR 0 1
15525: PPUSH
15526: CALL_OW 247
15530: PUSH
15531: LD_INT 1
15533: EQUAL
15534: IFFALSE 15551
// factory := IsInUnit ( factory ) ;
15536: LD_ADDR_VAR 0 1
15540: PUSH
15541: LD_VAR 0 1
15545: PPUSH
15546: CALL_OW 310
15550: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
15551: LD_VAR 0 1
15555: PPUSH
15556: CALL_OW 266
15560: PUSH
15561: LD_INT 3
15563: NONEQUAL
15564: IFFALSE 15568
// exit ;
15566: GO 15803
// for i := 1 to Count ( factoryWaypoints ) do
15568: LD_ADDR_VAR 0 5
15572: PUSH
15573: DOUBLE
15574: LD_INT 1
15576: DEC
15577: ST_TO_ADDR
15578: LD_EXP 58
15582: PPUSH
15583: CALL 23922 0 1
15587: PUSH
15588: FOR_TO
15589: IFFALSE 15751
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
15591: LD_VAR 0 2
15595: PPUSH
15596: LD_VAR 0 3
15600: PPUSH
15601: CALL_OW 428
15605: PUSH
15606: LD_EXP 58
15610: PUSH
15611: LD_VAR 0 5
15615: ARRAY
15616: PUSH
15617: LD_INT 2
15619: ARRAY
15620: EQUAL
15621: IFFALSE 15653
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
15623: LD_ADDR_EXP 58
15627: PUSH
15628: LD_EXP 58
15632: PPUSH
15633: LD_VAR 0 5
15637: PPUSH
15638: CALL_OW 3
15642: ST_TO_ADDR
// UpdateFactoryWaypoints ;
15643: CALL 15808 0 0
// exit ;
15647: POP
15648: POP
15649: GO 15803
// end else
15651: GO 15749
// if factory = factoryWaypoints [ i ] [ 2 ] then
15653: LD_VAR 0 1
15657: PUSH
15658: LD_EXP 58
15662: PUSH
15663: LD_VAR 0 5
15667: ARRAY
15668: PUSH
15669: LD_INT 2
15671: ARRAY
15672: EQUAL
15673: IFFALSE 15749
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
15675: LD_ADDR_EXP 58
15679: PUSH
15680: LD_EXP 58
15684: PPUSH
15685: LD_VAR 0 5
15689: PPUSH
15690: CALL_OW 3
15694: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
15695: LD_ADDR_EXP 58
15699: PUSH
15700: LD_EXP 58
15704: PPUSH
15705: LD_VAR 0 1
15709: PPUSH
15710: CALL_OW 255
15714: PUSH
15715: LD_VAR 0 1
15719: PUSH
15720: LD_VAR 0 2
15724: PUSH
15725: LD_VAR 0 3
15729: PUSH
15730: EMPTY
15731: LIST
15732: LIST
15733: LIST
15734: LIST
15735: PPUSH
15736: CALL 59854 0 2
15740: ST_TO_ADDR
// UpdateFactoryWaypoints ;
15741: CALL 15808 0 0
// exit ;
15745: POP
15746: POP
15747: GO 15803
// end ; end ;
15749: GO 15588
15751: POP
15752: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
15753: LD_ADDR_EXP 58
15757: PUSH
15758: LD_EXP 58
15762: PPUSH
15763: LD_VAR 0 1
15767: PPUSH
15768: CALL_OW 255
15772: PUSH
15773: LD_VAR 0 1
15777: PUSH
15778: LD_VAR 0 2
15782: PUSH
15783: LD_VAR 0 3
15787: PUSH
15788: EMPTY
15789: LIST
15790: LIST
15791: LIST
15792: LIST
15793: PPUSH
15794: CALL 59854 0 2
15798: ST_TO_ADDR
// UpdateFactoryWaypoints ;
15799: CALL 15808 0 0
// end ;
15803: LD_VAR 0 4
15807: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
15808: LD_INT 0
15810: PPUSH
15811: PPUSH
15812: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
15813: LD_STRING resetFactoryWaypoint();
15815: PPUSH
15816: CALL_OW 559
// if factoryWaypoints then
15820: LD_EXP 58
15824: IFFALSE 15945
// begin list := factoryWaypoints ;
15826: LD_ADDR_VAR 0 3
15830: PUSH
15831: LD_EXP 58
15835: ST_TO_ADDR
// for i := 1 to list do
15836: LD_ADDR_VAR 0 2
15840: PUSH
15841: DOUBLE
15842: LD_INT 1
15844: DEC
15845: ST_TO_ADDR
15846: LD_VAR 0 3
15850: PUSH
15851: FOR_TO
15852: IFFALSE 15943
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
15854: LD_STRING setFactoryWaypointXY(
15856: PUSH
15857: LD_VAR 0 3
15861: PUSH
15862: LD_VAR 0 2
15866: ARRAY
15867: PUSH
15868: LD_INT 1
15870: ARRAY
15871: STR
15872: PUSH
15873: LD_STRING ,
15875: STR
15876: PUSH
15877: LD_VAR 0 3
15881: PUSH
15882: LD_VAR 0 2
15886: ARRAY
15887: PUSH
15888: LD_INT 2
15890: ARRAY
15891: STR
15892: PUSH
15893: LD_STRING ,
15895: STR
15896: PUSH
15897: LD_VAR 0 3
15901: PUSH
15902: LD_VAR 0 2
15906: ARRAY
15907: PUSH
15908: LD_INT 3
15910: ARRAY
15911: STR
15912: PUSH
15913: LD_STRING ,
15915: STR
15916: PUSH
15917: LD_VAR 0 3
15921: PUSH
15922: LD_VAR 0 2
15926: ARRAY
15927: PUSH
15928: LD_INT 4
15930: ARRAY
15931: STR
15932: PUSH
15933: LD_STRING )
15935: STR
15936: PPUSH
15937: CALL_OW 559
15941: GO 15851
15943: POP
15944: POP
// end ; end ;
15945: LD_VAR 0 1
15949: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
15950: LD_INT 0
15952: PPUSH
// if HexInfo ( x , y ) = warehouse then
15953: LD_VAR 0 2
15957: PPUSH
15958: LD_VAR 0 3
15962: PPUSH
15963: CALL_OW 428
15967: PUSH
15968: LD_VAR 0 1
15972: EQUAL
15973: IFFALSE 16000
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
15975: LD_ADDR_EXP 60
15979: PUSH
15980: LD_EXP 60
15984: PPUSH
15985: LD_VAR 0 1
15989: PPUSH
15990: LD_INT 0
15992: PPUSH
15993: CALL_OW 1
15997: ST_TO_ADDR
15998: GO 16051
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
16000: LD_ADDR_EXP 60
16004: PUSH
16005: LD_EXP 60
16009: PPUSH
16010: LD_VAR 0 1
16014: PPUSH
16015: LD_VAR 0 1
16019: PPUSH
16020: CALL_OW 255
16024: PUSH
16025: LD_VAR 0 1
16029: PUSH
16030: LD_VAR 0 2
16034: PUSH
16035: LD_VAR 0 3
16039: PUSH
16040: EMPTY
16041: LIST
16042: LIST
16043: LIST
16044: LIST
16045: PPUSH
16046: CALL_OW 1
16050: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
16051: CALL 16060 0 0
// end ;
16055: LD_VAR 0 4
16059: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
16060: LD_INT 0
16062: PPUSH
16063: PPUSH
16064: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
16065: LD_STRING resetWarehouseGatheringPoints();
16067: PPUSH
16068: CALL_OW 559
// if warehouseGatheringPoints then
16072: LD_EXP 60
16076: IFFALSE 16202
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
16078: LD_ADDR_VAR 0 3
16082: PUSH
16083: LD_EXP 60
16087: PPUSH
16088: CALL 63788 0 1
16092: ST_TO_ADDR
// for i := 1 to list do
16093: LD_ADDR_VAR 0 2
16097: PUSH
16098: DOUBLE
16099: LD_INT 1
16101: DEC
16102: ST_TO_ADDR
16103: LD_VAR 0 3
16107: PUSH
16108: FOR_TO
16109: IFFALSE 16200
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
16111: LD_STRING setWarehouseGatheringPointXY(
16113: PUSH
16114: LD_VAR 0 3
16118: PUSH
16119: LD_VAR 0 2
16123: ARRAY
16124: PUSH
16125: LD_INT 1
16127: ARRAY
16128: STR
16129: PUSH
16130: LD_STRING ,
16132: STR
16133: PUSH
16134: LD_VAR 0 3
16138: PUSH
16139: LD_VAR 0 2
16143: ARRAY
16144: PUSH
16145: LD_INT 2
16147: ARRAY
16148: STR
16149: PUSH
16150: LD_STRING ,
16152: STR
16153: PUSH
16154: LD_VAR 0 3
16158: PUSH
16159: LD_VAR 0 2
16163: ARRAY
16164: PUSH
16165: LD_INT 3
16167: ARRAY
16168: STR
16169: PUSH
16170: LD_STRING ,
16172: STR
16173: PUSH
16174: LD_VAR 0 3
16178: PUSH
16179: LD_VAR 0 2
16183: ARRAY
16184: PUSH
16185: LD_INT 4
16187: ARRAY
16188: STR
16189: PUSH
16190: LD_STRING )
16192: STR
16193: PPUSH
16194: CALL_OW 559
16198: GO 16108
16200: POP
16201: POP
// end ; end ;
16202: LD_VAR 0 1
16206: RET
// function ParseMultiDataToLua ( ) ; var i ; begin
16207: LD_INT 0
16209: PPUSH
16210: PPUSH
// if not mpSidePositions then
16211: LD_EXP 16
16215: NOT
16216: IFFALSE 16220
// exit ;
16218: GO 16291
// result :=  ;
16220: LD_ADDR_VAR 0 1
16224: PUSH
16225: LD_STRING 
16227: ST_TO_ADDR
// for i := 1 to 8 do
16228: LD_ADDR_VAR 0 2
16232: PUSH
16233: DOUBLE
16234: LD_INT 1
16236: DEC
16237: ST_TO_ADDR
16238: LD_INT 8
16240: PUSH
16241: FOR_TO
16242: IFFALSE 16272
// begin result := result & mpSidePositions [ i ] & ; ;
16244: LD_ADDR_VAR 0 1
16248: PUSH
16249: LD_VAR 0 1
16253: PUSH
16254: LD_EXP 16
16258: PUSH
16259: LD_VAR 0 2
16263: ARRAY
16264: STR
16265: PUSH
16266: LD_STRING ;
16268: STR
16269: ST_TO_ADDR
// end ;
16270: GO 16241
16272: POP
16273: POP
// ToLua ( setMultiplayerRealPosition(" & result & "); ) ;
16274: LD_STRING setMultiplayerRealPosition("
16276: PUSH
16277: LD_VAR 0 1
16281: STR
16282: PUSH
16283: LD_STRING ");
16285: STR
16286: PPUSH
16287: CALL_OW 559
// end ; end_of_file
16291: LD_VAR 0 1
16295: RET
// export function SOS_UnitDestroyed ( un ) ; begin
16296: LD_INT 0
16298: PPUSH
// ComRadiation ( un ) ;
16299: LD_VAR 0 1
16303: PPUSH
16304: CALL 17385 0 1
// end ;
16308: LD_VAR 0 2
16312: RET
// export function SOS_UnitKamikazed ( un ) ; begin
16313: LD_INT 0
16315: PPUSH
// ComRadiation ( un ) ;
16316: LD_VAR 0 1
16320: PPUSH
16321: CALL 17385 0 1
// end ;
16325: LD_VAR 0 2
16329: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
16330: LD_INT 0
16332: PPUSH
// end ;
16333: LD_VAR 0 4
16337: RET
// export function SOS_Command ( cmd ) ; begin
16338: LD_INT 0
16340: PPUSH
// end ;
16341: LD_VAR 0 2
16345: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
16346: LD_INT 0
16348: PPUSH
// end ;
16349: LD_VAR 0 6
16353: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , driver , hex ; begin
16354: LD_INT 0
16356: PPUSH
16357: PPUSH
16358: PPUSH
16359: PPUSH
// if not vehicle or not factory then
16360: LD_VAR 0 1
16364: NOT
16365: IFTRUE 16374
16367: PUSH
16368: LD_VAR 0 2
16372: NOT
16373: OR
16374: IFFALSE 16378
// exit ;
16376: GO 16960
// if not factoryWaypoints then
16378: LD_EXP 58
16382: NOT
16383: IFFALSE 16387
// exit ;
16385: GO 16960
// for i := 1 to Count ( factoryWaypoints ) do
16387: LD_ADDR_VAR 0 4
16391: PUSH
16392: DOUBLE
16393: LD_INT 1
16395: DEC
16396: ST_TO_ADDR
16397: LD_EXP 58
16401: PPUSH
16402: CALL 23922 0 1
16406: PUSH
16407: FOR_TO
16408: IFFALSE 16958
// if factoryWaypoints [ i ] [ 2 ] = factory then
16410: LD_EXP 58
16414: PUSH
16415: LD_VAR 0 4
16419: ARRAY
16420: PUSH
16421: LD_INT 2
16423: ARRAY
16424: PUSH
16425: LD_VAR 0 2
16429: EQUAL
16430: IFFALSE 16956
// begin if GetControl ( vehicle ) = control_manual then
16432: LD_VAR 0 1
16436: PPUSH
16437: CALL_OW 263
16441: PUSH
16442: LD_INT 1
16444: EQUAL
16445: IFFALSE 16809
// begin driver := IsDrivenBy ( vehicle ) ;
16447: LD_ADDR_VAR 0 5
16451: PUSH
16452: LD_VAR 0 1
16456: PPUSH
16457: CALL_OW 311
16461: ST_TO_ADDR
// if driver in factoryWaypointsDrivers or vehicle in factoryWaypointsDrivers then
16462: LD_VAR 0 5
16466: PUSH
16467: LD_EXP 59
16471: IN
16472: IFTRUE 16486
16474: PUSH
16475: LD_VAR 0 1
16479: PUSH
16480: LD_EXP 59
16484: IN
16485: OR
16486: IFFALSE 16492
// exit ;
16488: POP
16489: POP
16490: GO 16960
// if not HasTask ( driver ) then
16492: LD_VAR 0 5
16496: PPUSH
16497: CALL_OW 314
16501: NOT
16502: IFFALSE 16807
// begin factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , driver ) ;
16504: LD_ADDR_EXP 59
16508: PUSH
16509: LD_EXP 59
16513: PPUSH
16514: LD_VAR 0 5
16518: PPUSH
16519: CALL 59854 0 2
16523: ST_TO_ADDR
// factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , vehicle ) ;
16524: LD_ADDR_EXP 59
16528: PUSH
16529: LD_EXP 59
16533: PPUSH
16534: LD_VAR 0 1
16538: PPUSH
16539: CALL 59854 0 2
16543: ST_TO_ADDR
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
16544: LD_ADDR_VAR 0 6
16548: PUSH
16549: LD_EXP 58
16553: PUSH
16554: LD_VAR 0 4
16558: ARRAY
16559: PUSH
16560: LD_INT 3
16562: ARRAY
16563: PPUSH
16564: LD_EXP 58
16568: PUSH
16569: LD_VAR 0 4
16573: ARRAY
16574: PUSH
16575: LD_INT 4
16577: ARRAY
16578: PPUSH
16579: CALL_OW 428
16583: ST_TO_ADDR
// if hex then
16584: LD_VAR 0 6
16588: IFFALSE 16606
// ComMoveUnit ( driver , hex ) else
16590: LD_VAR 0 5
16594: PPUSH
16595: LD_VAR 0 6
16599: PPUSH
16600: CALL_OW 112
16604: GO 16690
// if GetDistUnitXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) > 0 then
16606: LD_VAR 0 1
16610: PPUSH
16611: LD_EXP 58
16615: PUSH
16616: LD_VAR 0 4
16620: ARRAY
16621: PUSH
16622: LD_INT 3
16624: ARRAY
16625: PPUSH
16626: LD_EXP 58
16630: PUSH
16631: LD_VAR 0 4
16635: ARRAY
16636: PUSH
16637: LD_INT 4
16639: ARRAY
16640: PPUSH
16641: CALL_OW 297
16645: PUSH
16646: LD_INT 0
16648: GREATER
16649: IFFALSE 16690
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
16651: LD_VAR 0 5
16655: PPUSH
16656: LD_EXP 58
16660: PUSH
16661: LD_VAR 0 4
16665: ARRAY
16666: PUSH
16667: LD_INT 3
16669: ARRAY
16670: PPUSH
16671: LD_EXP 58
16675: PUSH
16676: LD_VAR 0 4
16680: ARRAY
16681: PUSH
16682: LD_INT 4
16684: ARRAY
16685: PPUSH
16686: CALL_OW 111
// AddComExitVehicle ( driver ) ;
16690: LD_VAR 0 5
16694: PPUSH
16695: CALL_OW 181
// if Multiplayer then
16699: LD_OWVAR 4
16703: IFFALSE 16752
// begin repeat wait ( 10 ) ;
16705: LD_INT 10
16707: PPUSH
16708: CALL_OW 67
// until not IsInUnit ( driver ) ;
16712: LD_VAR 0 5
16716: PPUSH
16717: CALL_OW 310
16721: NOT
16722: IFFALSE 16705
// if not HasTask ( driver ) then
16724: LD_VAR 0 5
16728: PPUSH
16729: CALL_OW 314
16733: NOT
16734: IFFALSE 16750
// ComEnterUnit ( driver , factory ) ;
16736: LD_VAR 0 5
16740: PPUSH
16741: LD_VAR 0 2
16745: PPUSH
16746: CALL_OW 120
// end else
16750: GO 16766
// AddComEnterUnit ( driver , factory ) ;
16752: LD_VAR 0 5
16756: PPUSH
16757: LD_VAR 0 2
16761: PPUSH
16762: CALL_OW 180
// wait ( 0 0$1 ) ;
16766: LD_INT 35
16768: PPUSH
16769: CALL_OW 67
// factoryWaypointsDrivers := factoryWaypointsDrivers diff driver ;
16773: LD_ADDR_EXP 59
16777: PUSH
16778: LD_EXP 59
16782: PUSH
16783: LD_VAR 0 5
16787: DIFF
16788: ST_TO_ADDR
// factoryWaypointsDrivers := factoryWaypointsDrivers diff vehicle ;
16789: LD_ADDR_EXP 59
16793: PUSH
16794: LD_EXP 59
16798: PUSH
16799: LD_VAR 0 1
16803: DIFF
16804: ST_TO_ADDR
// break ;
16805: GO 16958
// end ; end else
16807: GO 16956
// if GetControl ( vehicle ) = control_remote then
16809: LD_VAR 0 1
16813: PPUSH
16814: CALL_OW 263
16818: PUSH
16819: LD_INT 2
16821: EQUAL
16822: IFFALSE 16908
// begin wait ( 0 0$2 ) ;
16824: LD_INT 70
16826: PPUSH
16827: CALL_OW 67
// repeat wait ( 10 ) ;
16831: LD_INT 10
16833: PPUSH
16834: CALL_OW 67
// Connect ( vehicle ) ;
16838: LD_VAR 0 1
16842: PPUSH
16843: CALL 30166 0 1
// until IsControledBy ( vehicle ) ;
16847: LD_VAR 0 1
16851: PPUSH
16852: CALL_OW 312
16856: IFFALSE 16831
// wait ( 10 ) ;
16858: LD_INT 10
16860: PPUSH
16861: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
16865: LD_VAR 0 1
16869: PPUSH
16870: LD_EXP 58
16874: PUSH
16875: LD_VAR 0 4
16879: ARRAY
16880: PUSH
16881: LD_INT 3
16883: ARRAY
16884: PPUSH
16885: LD_EXP 58
16889: PUSH
16890: LD_VAR 0 4
16894: ARRAY
16895: PUSH
16896: LD_INT 4
16898: ARRAY
16899: PPUSH
16900: CALL_OW 111
// break ;
16904: GO 16958
// end else
16906: GO 16956
// begin wait ( 0 0$3 ) ;
16908: LD_INT 105
16910: PPUSH
16911: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
16915: LD_VAR 0 1
16919: PPUSH
16920: LD_EXP 58
16924: PUSH
16925: LD_VAR 0 4
16929: ARRAY
16930: PUSH
16931: LD_INT 3
16933: ARRAY
16934: PPUSH
16935: LD_EXP 58
16939: PUSH
16940: LD_VAR 0 4
16944: ARRAY
16945: PUSH
16946: LD_INT 4
16948: ARRAY
16949: PPUSH
16950: CALL_OW 111
// break ;
16954: GO 16958
// end ; end ;
16956: GO 16407
16958: POP
16959: POP
// end ;
16960: LD_VAR 0 3
16964: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
16965: LD_INT 0
16967: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
16968: LD_VAR 0 1
16972: PUSH
16973: LD_INT 250
16975: EQUAL
16976: IFFALSE 16993
16978: PUSH
16979: LD_VAR 0 2
16983: PPUSH
16984: CALL_OW 264
16988: PUSH
16989: LD_INT 81
16991: EQUAL
16992: AND
16993: IFFALSE 17014
// MinerPlaceMine ( unit , x , y ) ;
16995: LD_VAR 0 2
16999: PPUSH
17000: LD_VAR 0 4
17004: PPUSH
17005: LD_VAR 0 5
17009: PPUSH
17010: CALL 20146 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
17014: LD_VAR 0 1
17018: PUSH
17019: LD_INT 251
17021: EQUAL
17022: IFFALSE 17039
17024: PUSH
17025: LD_VAR 0 2
17029: PPUSH
17030: CALL_OW 264
17034: PUSH
17035: LD_INT 81
17037: EQUAL
17038: AND
17039: IFFALSE 17060
// MinerDetonateMine ( unit , x , y ) ;
17041: LD_VAR 0 2
17045: PPUSH
17046: LD_VAR 0 4
17050: PPUSH
17051: LD_VAR 0 5
17055: PPUSH
17056: CALL 20425 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
17060: LD_VAR 0 1
17064: PUSH
17065: LD_INT 252
17067: EQUAL
17068: IFFALSE 17085
17070: PUSH
17071: LD_VAR 0 2
17075: PPUSH
17076: CALL_OW 264
17080: PUSH
17081: LD_INT 81
17083: EQUAL
17084: AND
17085: IFFALSE 17106
// MinerCreateMinefield ( unit , x , y ) ;
17087: LD_VAR 0 2
17091: PPUSH
17092: LD_VAR 0 4
17096: PPUSH
17097: LD_VAR 0 5
17101: PPUSH
17102: CALL 20844 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
17106: LD_VAR 0 1
17110: PUSH
17111: LD_INT 253
17113: EQUAL
17114: IFFALSE 17131
17116: PUSH
17117: LD_VAR 0 2
17121: PPUSH
17122: CALL_OW 257
17126: PUSH
17127: LD_INT 5
17129: EQUAL
17130: AND
17131: IFFALSE 17152
// ComBinocular ( unit , x , y ) ;
17133: LD_VAR 0 2
17137: PPUSH
17138: LD_VAR 0 4
17142: PPUSH
17143: LD_VAR 0 5
17147: PPUSH
17148: CALL 21219 0 3
// if selectedUnit then
17152: LD_VAR 0 3
17156: IFFALSE 17216
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
17158: LD_VAR 0 1
17162: PUSH
17163: LD_INT 254
17165: EQUAL
17166: IFFALSE 17183
17168: PUSH
17169: LD_VAR 0 2
17173: PPUSH
17174: CALL_OW 264
17178: PUSH
17179: LD_INT 99
17181: EQUAL
17182: AND
17183: IFFALSE 17200
17185: PUSH
17186: LD_VAR 0 3
17190: PPUSH
17191: CALL_OW 263
17195: PUSH
17196: LD_INT 3
17198: EQUAL
17199: AND
17200: IFFALSE 17216
// HackDestroyVehicle ( unit , selectedUnit ) ;
17202: LD_VAR 0 2
17206: PPUSH
17207: LD_VAR 0 3
17211: PPUSH
17212: CALL 19506 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
17216: LD_VAR 0 1
17220: PUSH
17221: LD_INT 255
17223: EQUAL
17224: IFFALSE 17248
17226: PUSH
17227: LD_VAR 0 2
17231: PPUSH
17232: CALL_OW 264
17236: PUSH
17237: LD_INT 14
17239: PUSH
17240: LD_INT 53
17242: PUSH
17243: EMPTY
17244: LIST
17245: LIST
17246: IN
17247: AND
17248: IFFALSE 17266
17250: PUSH
17251: LD_VAR 0 4
17255: PPUSH
17256: LD_VAR 0 5
17260: PPUSH
17261: CALL_OW 488
17265: AND
17266: IFFALSE 17290
// CutTreeXYR ( unit , x , y , 12 ) ;
17268: LD_VAR 0 2
17272: PPUSH
17273: LD_VAR 0 4
17277: PPUSH
17278: LD_VAR 0 5
17282: PPUSH
17283: LD_INT 12
17285: PPUSH
17286: CALL 17481 0 4
// if cmd = 256 then
17290: LD_VAR 0 1
17294: PUSH
17295: LD_INT 256
17297: EQUAL
17298: IFFALSE 17319
// SetFactoryWaypoint ( unit , x , y ) ;
17300: LD_VAR 0 2
17304: PPUSH
17305: LD_VAR 0 4
17309: PPUSH
17310: LD_VAR 0 5
17314: PPUSH
17315: CALL 15454 0 3
// if cmd = 257 then
17319: LD_VAR 0 1
17323: PUSH
17324: LD_INT 257
17326: EQUAL
17327: IFFALSE 17348
// SetWarehouseGatheringPoint ( unit , x , y ) ;
17329: LD_VAR 0 2
17333: PPUSH
17334: LD_VAR 0 4
17338: PPUSH
17339: LD_VAR 0 5
17343: PPUSH
17344: CALL 15950 0 3
// if cmd = 258 then
17348: LD_VAR 0 1
17352: PUSH
17353: LD_INT 258
17355: EQUAL
17356: IFFALSE 17380
// BurnTreeXYR ( unit , x , y , 8 ) ;
17358: LD_VAR 0 2
17362: PPUSH
17363: LD_VAR 0 4
17367: PPUSH
17368: LD_VAR 0 5
17372: PPUSH
17373: LD_INT 8
17375: PPUSH
17376: CALL 17881 0 4
// end ;
17380: LD_VAR 0 6
17384: RET
// export function ComRadiation ( un ) ; var eff ; begin
17385: LD_INT 0
17387: PPUSH
17388: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
17389: LD_VAR 0 1
17393: PPUSH
17394: CALL_OW 264
17398: PUSH
17399: LD_INT 91
17401: NONEQUAL
17402: IFFALSE 17406
// exit ;
17404: GO 17476
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
17406: LD_INT 68
17408: PPUSH
17409: LD_VAR 0 1
17413: PPUSH
17414: CALL_OW 255
17418: PPUSH
17419: CALL_OW 321
17423: PUSH
17424: LD_INT 2
17426: EQUAL
17427: IFFALSE 17439
// eff := 50 else
17429: LD_ADDR_VAR 0 3
17433: PUSH
17434: LD_INT 50
17436: ST_TO_ADDR
17437: GO 17447
// eff := 25 ;
17439: LD_ADDR_VAR 0 3
17443: PUSH
17444: LD_INT 25
17446: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
17447: LD_VAR 0 1
17451: PPUSH
17452: CALL_OW 250
17456: PPUSH
17457: LD_VAR 0 1
17461: PPUSH
17462: CALL_OW 251
17466: PPUSH
17467: LD_VAR 0 3
17471: PPUSH
17472: CALL_OW 495
// end ;
17476: LD_VAR 0 2
17480: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
17481: LD_INT 0
17483: PPUSH
17484: PPUSH
17485: PPUSH
17486: PPUSH
17487: PPUSH
17488: PPUSH
17489: PPUSH
17490: PPUSH
17491: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
17492: LD_VAR 0 1
17496: PPUSH
17497: CALL_OW 302
17501: NOT
17502: IFTRUE 17521
17504: PUSH
17505: LD_VAR 0 2
17509: PPUSH
17510: LD_VAR 0 3
17514: PPUSH
17515: CALL_OW 488
17519: NOT
17520: OR
17521: IFTRUE 17530
17523: PUSH
17524: LD_VAR 0 4
17528: NOT
17529: OR
17530: IFFALSE 17534
// exit ;
17532: GO 17876
// list := [ ] ;
17534: LD_ADDR_VAR 0 13
17538: PUSH
17539: EMPTY
17540: ST_TO_ADDR
// if x - r < 0 then
17541: LD_VAR 0 2
17545: PUSH
17546: LD_VAR 0 4
17550: MINUS
17551: PUSH
17552: LD_INT 0
17554: LESS
17555: IFFALSE 17567
// min_x := 0 else
17557: LD_ADDR_VAR 0 7
17561: PUSH
17562: LD_INT 0
17564: ST_TO_ADDR
17565: GO 17583
// min_x := x - r ;
17567: LD_ADDR_VAR 0 7
17571: PUSH
17572: LD_VAR 0 2
17576: PUSH
17577: LD_VAR 0 4
17581: MINUS
17582: ST_TO_ADDR
// if y - r < 0 then
17583: LD_VAR 0 3
17587: PUSH
17588: LD_VAR 0 4
17592: MINUS
17593: PUSH
17594: LD_INT 0
17596: LESS
17597: IFFALSE 17609
// min_y := 0 else
17599: LD_ADDR_VAR 0 8
17603: PUSH
17604: LD_INT 0
17606: ST_TO_ADDR
17607: GO 17625
// min_y := y - r ;
17609: LD_ADDR_VAR 0 8
17613: PUSH
17614: LD_VAR 0 3
17618: PUSH
17619: LD_VAR 0 4
17623: MINUS
17624: ST_TO_ADDR
// max_x := x + r ;
17625: LD_ADDR_VAR 0 9
17629: PUSH
17630: LD_VAR 0 2
17634: PUSH
17635: LD_VAR 0 4
17639: PLUS
17640: ST_TO_ADDR
// max_y := y + r ;
17641: LD_ADDR_VAR 0 10
17645: PUSH
17646: LD_VAR 0 3
17650: PUSH
17651: LD_VAR 0 4
17655: PLUS
17656: ST_TO_ADDR
// for _x = min_x to max_x do
17657: LD_ADDR_VAR 0 11
17661: PUSH
17662: DOUBLE
17663: LD_VAR 0 7
17667: DEC
17668: ST_TO_ADDR
17669: LD_VAR 0 9
17673: PUSH
17674: FOR_TO
17675: IFFALSE 17794
// for _y = min_y to max_y do
17677: LD_ADDR_VAR 0 12
17681: PUSH
17682: DOUBLE
17683: LD_VAR 0 8
17687: DEC
17688: ST_TO_ADDR
17689: LD_VAR 0 10
17693: PUSH
17694: FOR_TO
17695: IFFALSE 17790
// begin if not ValidHex ( _x , _y ) then
17697: LD_VAR 0 11
17701: PPUSH
17702: LD_VAR 0 12
17706: PPUSH
17707: CALL_OW 488
17711: NOT
17712: IFFALSE 17716
// continue ;
17714: GO 17694
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
17716: LD_VAR 0 11
17720: PPUSH
17721: LD_VAR 0 12
17725: PPUSH
17726: CALL_OW 351
17730: IFFALSE 17748
17732: PUSH
17733: LD_VAR 0 11
17737: PPUSH
17738: LD_VAR 0 12
17742: PPUSH
17743: CALL_OW 554
17747: AND
17748: IFFALSE 17788
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
17750: LD_ADDR_VAR 0 13
17754: PUSH
17755: LD_VAR 0 13
17759: PPUSH
17760: LD_VAR 0 13
17764: PUSH
17765: LD_INT 1
17767: PLUS
17768: PPUSH
17769: LD_VAR 0 11
17773: PUSH
17774: LD_VAR 0 12
17778: PUSH
17779: EMPTY
17780: LIST
17781: LIST
17782: PPUSH
17783: CALL_OW 2
17787: ST_TO_ADDR
// end ;
17788: GO 17694
17790: POP
17791: POP
17792: GO 17674
17794: POP
17795: POP
// if not list then
17796: LD_VAR 0 13
17800: NOT
17801: IFFALSE 17805
// exit ;
17803: GO 17876
// for i in list do
17805: LD_ADDR_VAR 0 6
17809: PUSH
17810: LD_VAR 0 13
17814: PUSH
17815: FOR_IN
17816: IFFALSE 17874
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
17818: LD_VAR 0 1
17822: PPUSH
17823: LD_STRING M
17825: PUSH
17826: LD_VAR 0 6
17830: PUSH
17831: LD_INT 1
17833: ARRAY
17834: PUSH
17835: LD_VAR 0 6
17839: PUSH
17840: LD_INT 2
17842: ARRAY
17843: PUSH
17844: LD_INT 0
17846: PUSH
17847: LD_INT 0
17849: PUSH
17850: LD_INT 0
17852: PUSH
17853: LD_INT 0
17855: PUSH
17856: EMPTY
17857: LIST
17858: LIST
17859: LIST
17860: LIST
17861: LIST
17862: LIST
17863: LIST
17864: PUSH
17865: EMPTY
17866: LIST
17867: PPUSH
17868: CALL_OW 447
17872: GO 17815
17874: POP
17875: POP
// end ;
17876: LD_VAR 0 5
17880: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
17881: LD_INT 0
17883: PPUSH
17884: PPUSH
17885: PPUSH
17886: PPUSH
17887: PPUSH
17888: PPUSH
17889: PPUSH
17890: PPUSH
17891: PPUSH
17892: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
17893: LD_VAR 0 1
17897: PPUSH
17898: CALL_OW 302
17902: NOT
17903: IFTRUE 17922
17905: PUSH
17906: LD_VAR 0 2
17910: PPUSH
17911: LD_VAR 0 3
17915: PPUSH
17916: CALL_OW 488
17920: NOT
17921: OR
17922: IFTRUE 17931
17924: PUSH
17925: LD_VAR 0 4
17929: NOT
17930: OR
17931: IFFALSE 17935
// exit ;
17933: GO 18452
// list := [ ] ;
17935: LD_ADDR_VAR 0 13
17939: PUSH
17940: EMPTY
17941: ST_TO_ADDR
// if x - r < 0 then
17942: LD_VAR 0 2
17946: PUSH
17947: LD_VAR 0 4
17951: MINUS
17952: PUSH
17953: LD_INT 0
17955: LESS
17956: IFFALSE 17968
// min_x := 0 else
17958: LD_ADDR_VAR 0 7
17962: PUSH
17963: LD_INT 0
17965: ST_TO_ADDR
17966: GO 17984
// min_x := x - r ;
17968: LD_ADDR_VAR 0 7
17972: PUSH
17973: LD_VAR 0 2
17977: PUSH
17978: LD_VAR 0 4
17982: MINUS
17983: ST_TO_ADDR
// if y - r < 0 then
17984: LD_VAR 0 3
17988: PUSH
17989: LD_VAR 0 4
17993: MINUS
17994: PUSH
17995: LD_INT 0
17997: LESS
17998: IFFALSE 18010
// min_y := 0 else
18000: LD_ADDR_VAR 0 8
18004: PUSH
18005: LD_INT 0
18007: ST_TO_ADDR
18008: GO 18026
// min_y := y - r ;
18010: LD_ADDR_VAR 0 8
18014: PUSH
18015: LD_VAR 0 3
18019: PUSH
18020: LD_VAR 0 4
18024: MINUS
18025: ST_TO_ADDR
// max_x := x + r ;
18026: LD_ADDR_VAR 0 9
18030: PUSH
18031: LD_VAR 0 2
18035: PUSH
18036: LD_VAR 0 4
18040: PLUS
18041: ST_TO_ADDR
// max_y := y + r ;
18042: LD_ADDR_VAR 0 10
18046: PUSH
18047: LD_VAR 0 3
18051: PUSH
18052: LD_VAR 0 4
18056: PLUS
18057: ST_TO_ADDR
// for _x = min_x to max_x do
18058: LD_ADDR_VAR 0 11
18062: PUSH
18063: DOUBLE
18064: LD_VAR 0 7
18068: DEC
18069: ST_TO_ADDR
18070: LD_VAR 0 9
18074: PUSH
18075: FOR_TO
18076: IFFALSE 18195
// for _y = min_y to max_y do
18078: LD_ADDR_VAR 0 12
18082: PUSH
18083: DOUBLE
18084: LD_VAR 0 8
18088: DEC
18089: ST_TO_ADDR
18090: LD_VAR 0 10
18094: PUSH
18095: FOR_TO
18096: IFFALSE 18191
// begin if not ValidHex ( _x , _y ) then
18098: LD_VAR 0 11
18102: PPUSH
18103: LD_VAR 0 12
18107: PPUSH
18108: CALL_OW 488
18112: NOT
18113: IFFALSE 18117
// continue ;
18115: GO 18095
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
18117: LD_VAR 0 11
18121: PPUSH
18122: LD_VAR 0 12
18126: PPUSH
18127: CALL_OW 351
18131: IFFALSE 18149
18133: PUSH
18134: LD_VAR 0 11
18138: PPUSH
18139: LD_VAR 0 12
18143: PPUSH
18144: CALL_OW 554
18148: AND
18149: IFFALSE 18189
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
18151: LD_ADDR_VAR 0 13
18155: PUSH
18156: LD_VAR 0 13
18160: PPUSH
18161: LD_VAR 0 13
18165: PUSH
18166: LD_INT 1
18168: PLUS
18169: PPUSH
18170: LD_VAR 0 11
18174: PUSH
18175: LD_VAR 0 12
18179: PUSH
18180: EMPTY
18181: LIST
18182: LIST
18183: PPUSH
18184: CALL_OW 2
18188: ST_TO_ADDR
// end ;
18189: GO 18095
18191: POP
18192: POP
18193: GO 18075
18195: POP
18196: POP
// if not list then
18197: LD_VAR 0 13
18201: NOT
18202: IFFALSE 18206
// exit ;
18204: GO 18452
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
18206: LD_ADDR_VAR 0 13
18210: PUSH
18211: LD_VAR 0 1
18215: PPUSH
18216: LD_VAR 0 13
18220: PPUSH
18221: LD_INT 1
18223: PPUSH
18224: LD_INT 1
18226: PPUSH
18227: CALL 27294 0 4
18231: ST_TO_ADDR
// ComStop ( flame ) ;
18232: LD_VAR 0 1
18236: PPUSH
18237: CALL_OW 141
// for i in list do
18241: LD_ADDR_VAR 0 6
18245: PUSH
18246: LD_VAR 0 13
18250: PUSH
18251: FOR_IN
18252: IFFALSE 18283
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
18254: LD_VAR 0 1
18258: PPUSH
18259: LD_VAR 0 6
18263: PUSH
18264: LD_INT 1
18266: ARRAY
18267: PPUSH
18268: LD_VAR 0 6
18272: PUSH
18273: LD_INT 2
18275: ARRAY
18276: PPUSH
18277: CALL_OW 176
18281: GO 18251
18283: POP
18284: POP
// repeat wait ( 0 0$1 ) ;
18285: LD_INT 35
18287: PPUSH
18288: CALL_OW 67
// task := GetTaskList ( flame ) ;
18292: LD_ADDR_VAR 0 14
18296: PUSH
18297: LD_VAR 0 1
18301: PPUSH
18302: CALL_OW 437
18306: ST_TO_ADDR
// if not task then
18307: LD_VAR 0 14
18311: NOT
18312: IFFALSE 18316
// exit ;
18314: GO 18452
// if task [ 1 ] [ 1 ] <> | then
18316: LD_VAR 0 14
18320: PUSH
18321: LD_INT 1
18323: ARRAY
18324: PUSH
18325: LD_INT 1
18327: ARRAY
18328: PUSH
18329: LD_STRING |
18331: NONEQUAL
18332: IFFALSE 18336
// exit ;
18334: GO 18452
// _x := task [ 1 ] [ 2 ] ;
18336: LD_ADDR_VAR 0 11
18340: PUSH
18341: LD_VAR 0 14
18345: PUSH
18346: LD_INT 1
18348: ARRAY
18349: PUSH
18350: LD_INT 2
18352: ARRAY
18353: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
18354: LD_ADDR_VAR 0 12
18358: PUSH
18359: LD_VAR 0 14
18363: PUSH
18364: LD_INT 1
18366: ARRAY
18367: PUSH
18368: LD_INT 3
18370: ARRAY
18371: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
18372: LD_VAR 0 11
18376: PPUSH
18377: LD_VAR 0 12
18381: PPUSH
18382: CALL_OW 351
18386: NOT
18387: IFTRUE 18406
18389: PUSH
18390: LD_VAR 0 11
18394: PPUSH
18395: LD_VAR 0 12
18399: PPUSH
18400: CALL_OW 554
18404: NOT
18405: OR
18406: IFFALSE 18440
// begin task := Delete ( task , 1 ) ;
18408: LD_ADDR_VAR 0 14
18412: PUSH
18413: LD_VAR 0 14
18417: PPUSH
18418: LD_INT 1
18420: PPUSH
18421: CALL_OW 3
18425: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
18426: LD_VAR 0 1
18430: PPUSH
18431: LD_VAR 0 14
18435: PPUSH
18436: CALL_OW 446
// end ; until not HasTask ( flame ) ;
18440: LD_VAR 0 1
18444: PPUSH
18445: CALL_OW 314
18449: NOT
18450: IFFALSE 18285
// end ;
18452: LD_VAR 0 5
18456: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
18457: LD_EXP 62
18461: NOT
18462: IFFALSE 18512
18464: GO 18466
18466: DISABLE
// begin initHack := true ;
18467: LD_ADDR_EXP 62
18471: PUSH
18472: LD_INT 1
18474: ST_TO_ADDR
// hackTanks := [ ] ;
18475: LD_ADDR_EXP 63
18479: PUSH
18480: EMPTY
18481: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
18482: LD_ADDR_EXP 64
18486: PUSH
18487: EMPTY
18488: ST_TO_ADDR
// hackLimit := 3 ;
18489: LD_ADDR_EXP 65
18493: PUSH
18494: LD_INT 3
18496: ST_TO_ADDR
// hackDist := 12 ;
18497: LD_ADDR_EXP 66
18501: PUSH
18502: LD_INT 12
18504: ST_TO_ADDR
// hackCounter := [ ] ;
18505: LD_ADDR_EXP 67
18509: PUSH
18510: EMPTY
18511: ST_TO_ADDR
// end ;
18512: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
18513: LD_EXP 62
18517: IFFALSE 18535
18519: PUSH
18520: LD_INT 34
18522: PUSH
18523: LD_INT 99
18525: PUSH
18526: EMPTY
18527: LIST
18528: LIST
18529: PPUSH
18530: CALL_OW 69
18534: AND
18535: IFFALSE 18788
18537: GO 18539
18539: DISABLE
18540: LD_INT 0
18542: PPUSH
18543: PPUSH
// begin enable ;
18544: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
18545: LD_ADDR_VAR 0 1
18549: PUSH
18550: LD_INT 34
18552: PUSH
18553: LD_INT 99
18555: PUSH
18556: EMPTY
18557: LIST
18558: LIST
18559: PPUSH
18560: CALL_OW 69
18564: PUSH
18565: FOR_IN
18566: IFFALSE 18786
// begin if not i in hackTanks then
18568: LD_VAR 0 1
18572: PUSH
18573: LD_EXP 63
18577: IN
18578: NOT
18579: IFFALSE 18662
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
18581: LD_ADDR_EXP 63
18585: PUSH
18586: LD_EXP 63
18590: PPUSH
18591: LD_EXP 63
18595: PUSH
18596: LD_INT 1
18598: PLUS
18599: PPUSH
18600: LD_VAR 0 1
18604: PPUSH
18605: CALL_OW 1
18609: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
18610: LD_ADDR_EXP 64
18614: PUSH
18615: LD_EXP 64
18619: PPUSH
18620: LD_EXP 64
18624: PUSH
18625: LD_INT 1
18627: PLUS
18628: PPUSH
18629: EMPTY
18630: PPUSH
18631: CALL_OW 1
18635: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
18636: LD_ADDR_EXP 67
18640: PUSH
18641: LD_EXP 67
18645: PPUSH
18646: LD_EXP 67
18650: PUSH
18651: LD_INT 1
18653: PLUS
18654: PPUSH
18655: EMPTY
18656: PPUSH
18657: CALL_OW 1
18661: ST_TO_ADDR
// end ; if not IsOk ( i ) then
18662: LD_VAR 0 1
18666: PPUSH
18667: CALL_OW 302
18671: NOT
18672: IFFALSE 18685
// begin HackUnlinkAll ( i ) ;
18674: LD_VAR 0 1
18678: PPUSH
18679: CALL 18791 0 1
// continue ;
18683: GO 18565
// end ; HackCheckCapturedStatus ( i ) ;
18685: LD_VAR 0 1
18689: PPUSH
18690: CALL 19236 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
18694: LD_ADDR_VAR 0 2
18698: PUSH
18699: LD_INT 81
18701: PUSH
18702: LD_VAR 0 1
18706: PPUSH
18707: CALL_OW 255
18711: PUSH
18712: EMPTY
18713: LIST
18714: LIST
18715: PUSH
18716: LD_INT 33
18718: PUSH
18719: LD_INT 3
18721: PUSH
18722: EMPTY
18723: LIST
18724: LIST
18725: PUSH
18726: LD_INT 91
18728: PUSH
18729: LD_VAR 0 1
18733: PUSH
18734: LD_EXP 66
18738: PUSH
18739: EMPTY
18740: LIST
18741: LIST
18742: LIST
18743: PUSH
18744: LD_INT 50
18746: PUSH
18747: EMPTY
18748: LIST
18749: PUSH
18750: EMPTY
18751: LIST
18752: LIST
18753: LIST
18754: LIST
18755: PPUSH
18756: CALL_OW 69
18760: ST_TO_ADDR
// if not tmp then
18761: LD_VAR 0 2
18765: NOT
18766: IFFALSE 18770
// continue ;
18768: GO 18565
// HackLink ( i , tmp ) ;
18770: LD_VAR 0 1
18774: PPUSH
18775: LD_VAR 0 2
18779: PPUSH
18780: CALL 18927 0 2
// end ;
18784: GO 18565
18786: POP
18787: POP
// end ;
18788: PPOPN 2
18790: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
18791: LD_INT 0
18793: PPUSH
18794: PPUSH
18795: PPUSH
// if not hack in hackTanks then
18796: LD_VAR 0 1
18800: PUSH
18801: LD_EXP 63
18805: IN
18806: NOT
18807: IFFALSE 18811
// exit ;
18809: GO 18922
// index := GetElementIndex ( hackTanks , hack ) ;
18811: LD_ADDR_VAR 0 4
18815: PUSH
18816: LD_EXP 63
18820: PPUSH
18821: LD_VAR 0 1
18825: PPUSH
18826: CALL 26589 0 2
18830: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
18831: LD_EXP 64
18835: PUSH
18836: LD_VAR 0 4
18840: ARRAY
18841: IFFALSE 18922
// begin for i in hackTanksCaptured [ index ] do
18843: LD_ADDR_VAR 0 3
18847: PUSH
18848: LD_EXP 64
18852: PUSH
18853: LD_VAR 0 4
18857: ARRAY
18858: PUSH
18859: FOR_IN
18860: IFFALSE 18886
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
18862: LD_VAR 0 3
18866: PUSH
18867: LD_INT 1
18869: ARRAY
18870: PPUSH
18871: LD_VAR 0 3
18875: PUSH
18876: LD_INT 2
18878: ARRAY
18879: PPUSH
18880: CALL_OW 235
18884: GO 18859
18886: POP
18887: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
18888: LD_ADDR_EXP 64
18892: PUSH
18893: LD_EXP 64
18897: PPUSH
18898: LD_VAR 0 4
18902: PPUSH
18903: EMPTY
18904: PPUSH
18905: CALL_OW 1
18909: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
18910: LD_VAR 0 1
18914: PPUSH
18915: LD_INT 0
18917: PPUSH
18918: CALL_OW 505
// end ; end ;
18922: LD_VAR 0 2
18926: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
18927: LD_INT 0
18929: PPUSH
18930: PPUSH
18931: PPUSH
// if not hack in hackTanks or not vehicles then
18932: LD_VAR 0 1
18936: PUSH
18937: LD_EXP 63
18941: IN
18942: NOT
18943: IFTRUE 18952
18945: PUSH
18946: LD_VAR 0 2
18950: NOT
18951: OR
18952: IFFALSE 18956
// exit ;
18954: GO 19231
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
18956: LD_ADDR_VAR 0 2
18960: PUSH
18961: LD_VAR 0 1
18965: PPUSH
18966: LD_VAR 0 2
18970: PPUSH
18971: LD_INT 1
18973: PPUSH
18974: LD_INT 1
18976: PPUSH
18977: CALL 27241 0 4
18981: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
18982: LD_ADDR_VAR 0 5
18986: PUSH
18987: LD_EXP 63
18991: PPUSH
18992: LD_VAR 0 1
18996: PPUSH
18997: CALL 26589 0 2
19001: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
19002: LD_EXP 64
19006: PUSH
19007: LD_VAR 0 5
19011: ARRAY
19012: PUSH
19013: LD_EXP 65
19017: LESS
19018: IFFALSE 19207
// begin for i := 1 to vehicles do
19020: LD_ADDR_VAR 0 4
19024: PUSH
19025: DOUBLE
19026: LD_INT 1
19028: DEC
19029: ST_TO_ADDR
19030: LD_VAR 0 2
19034: PUSH
19035: FOR_TO
19036: IFFALSE 19205
// begin if hackTanksCaptured [ index ] = hackLimit then
19038: LD_EXP 64
19042: PUSH
19043: LD_VAR 0 5
19047: ARRAY
19048: PUSH
19049: LD_EXP 65
19053: EQUAL
19054: IFFALSE 19058
// break ;
19056: GO 19205
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
19058: LD_ADDR_EXP 67
19062: PUSH
19063: LD_EXP 67
19067: PPUSH
19068: LD_VAR 0 5
19072: PPUSH
19073: LD_EXP 67
19077: PUSH
19078: LD_VAR 0 5
19082: ARRAY
19083: PUSH
19084: LD_INT 1
19086: PLUS
19087: PPUSH
19088: CALL_OW 1
19092: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
19093: LD_ADDR_EXP 64
19097: PUSH
19098: LD_EXP 64
19102: PPUSH
19103: LD_VAR 0 5
19107: PUSH
19108: LD_EXP 64
19112: PUSH
19113: LD_VAR 0 5
19117: ARRAY
19118: PUSH
19119: LD_INT 1
19121: PLUS
19122: PUSH
19123: EMPTY
19124: LIST
19125: LIST
19126: PPUSH
19127: LD_VAR 0 2
19131: PUSH
19132: LD_VAR 0 4
19136: ARRAY
19137: PUSH
19138: LD_VAR 0 2
19142: PUSH
19143: LD_VAR 0 4
19147: ARRAY
19148: PPUSH
19149: CALL_OW 255
19153: PUSH
19154: EMPTY
19155: LIST
19156: LIST
19157: PPUSH
19158: CALL 26806 0 3
19162: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
19163: LD_VAR 0 2
19167: PUSH
19168: LD_VAR 0 4
19172: ARRAY
19173: PPUSH
19174: LD_VAR 0 1
19178: PPUSH
19179: CALL_OW 255
19183: PPUSH
19184: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
19188: LD_VAR 0 2
19192: PUSH
19193: LD_VAR 0 4
19197: ARRAY
19198: PPUSH
19199: CALL_OW 141
// end ;
19203: GO 19035
19205: POP
19206: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
19207: LD_VAR 0 1
19211: PPUSH
19212: LD_EXP 64
19216: PUSH
19217: LD_VAR 0 5
19221: ARRAY
19222: PUSH
19223: LD_INT 0
19225: PLUS
19226: PPUSH
19227: CALL_OW 505
// end ;
19231: LD_VAR 0 3
19235: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
19236: LD_INT 0
19238: PPUSH
19239: PPUSH
19240: PPUSH
19241: PPUSH
// if not hack in hackTanks then
19242: LD_VAR 0 1
19246: PUSH
19247: LD_EXP 63
19251: IN
19252: NOT
19253: IFFALSE 19257
// exit ;
19255: GO 19501
// index := GetElementIndex ( hackTanks , hack ) ;
19257: LD_ADDR_VAR 0 4
19261: PUSH
19262: LD_EXP 63
19266: PPUSH
19267: LD_VAR 0 1
19271: PPUSH
19272: CALL 26589 0 2
19276: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
19277: LD_ADDR_VAR 0 3
19281: PUSH
19282: DOUBLE
19283: LD_EXP 64
19287: PUSH
19288: LD_VAR 0 4
19292: ARRAY
19293: INC
19294: ST_TO_ADDR
19295: LD_INT 1
19297: PUSH
19298: FOR_DOWNTO
19299: IFFALSE 19475
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
19301: LD_ADDR_VAR 0 5
19305: PUSH
19306: LD_EXP 64
19310: PUSH
19311: LD_VAR 0 4
19315: ARRAY
19316: PUSH
19317: LD_VAR 0 3
19321: ARRAY
19322: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
19323: LD_VAR 0 5
19327: PUSH
19328: LD_INT 1
19330: ARRAY
19331: PPUSH
19332: CALL_OW 302
19336: NOT
19337: IFTRUE 19365
19339: PUSH
19340: LD_VAR 0 5
19344: PUSH
19345: LD_INT 1
19347: ARRAY
19348: PPUSH
19349: CALL_OW 255
19353: PUSH
19354: LD_VAR 0 1
19358: PPUSH
19359: CALL_OW 255
19363: NONEQUAL
19364: OR
19365: IFFALSE 19473
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
19367: LD_VAR 0 5
19371: PUSH
19372: LD_INT 1
19374: ARRAY
19375: PPUSH
19376: CALL_OW 305
19380: IFFALSE 19408
19382: PUSH
19383: LD_VAR 0 5
19387: PUSH
19388: LD_INT 1
19390: ARRAY
19391: PPUSH
19392: CALL_OW 255
19396: PUSH
19397: LD_VAR 0 1
19401: PPUSH
19402: CALL_OW 255
19406: EQUAL
19407: AND
19408: IFFALSE 19432
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
19410: LD_VAR 0 5
19414: PUSH
19415: LD_INT 1
19417: ARRAY
19418: PPUSH
19419: LD_VAR 0 5
19423: PUSH
19424: LD_INT 2
19426: ARRAY
19427: PPUSH
19428: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
19432: LD_ADDR_EXP 64
19436: PUSH
19437: LD_EXP 64
19441: PPUSH
19442: LD_VAR 0 4
19446: PPUSH
19447: LD_EXP 64
19451: PUSH
19452: LD_VAR 0 4
19456: ARRAY
19457: PPUSH
19458: LD_VAR 0 3
19462: PPUSH
19463: CALL_OW 3
19467: PPUSH
19468: CALL_OW 1
19472: ST_TO_ADDR
// end ; end ;
19473: GO 19298
19475: POP
19476: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
19477: LD_VAR 0 1
19481: PPUSH
19482: LD_EXP 64
19486: PUSH
19487: LD_VAR 0 4
19491: ARRAY
19492: PUSH
19493: LD_INT 0
19495: PLUS
19496: PPUSH
19497: CALL_OW 505
// end ;
19501: LD_VAR 0 2
19505: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
19506: LD_INT 0
19508: PPUSH
19509: PPUSH
19510: PPUSH
19511: PPUSH
// if not hack in hackTanks then
19512: LD_VAR 0 1
19516: PUSH
19517: LD_EXP 63
19521: IN
19522: NOT
19523: IFFALSE 19527
// exit ;
19525: GO 19612
// index := GetElementIndex ( hackTanks , hack ) ;
19527: LD_ADDR_VAR 0 5
19531: PUSH
19532: LD_EXP 63
19536: PPUSH
19537: LD_VAR 0 1
19541: PPUSH
19542: CALL 26589 0 2
19546: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
19547: LD_ADDR_VAR 0 4
19551: PUSH
19552: DOUBLE
19553: LD_INT 1
19555: DEC
19556: ST_TO_ADDR
19557: LD_EXP 64
19561: PUSH
19562: LD_VAR 0 5
19566: ARRAY
19567: PUSH
19568: FOR_TO
19569: IFFALSE 19610
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
19571: LD_EXP 64
19575: PUSH
19576: LD_VAR 0 5
19580: ARRAY
19581: PUSH
19582: LD_VAR 0 4
19586: ARRAY
19587: PUSH
19588: LD_INT 1
19590: ARRAY
19591: PUSH
19592: LD_VAR 0 2
19596: EQUAL
19597: IFFALSE 19608
// KillUnit ( vehicle ) ;
19599: LD_VAR 0 2
19603: PPUSH
19604: CALL_OW 66
19608: GO 19568
19610: POP
19611: POP
// end ;
19612: LD_VAR 0 3
19616: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
19617: LD_EXP 68
19621: NOT
19622: IFFALSE 19657
19624: GO 19626
19626: DISABLE
// begin initMiner := true ;
19627: LD_ADDR_EXP 68
19631: PUSH
19632: LD_INT 1
19634: ST_TO_ADDR
// minersList := [ ] ;
19635: LD_ADDR_EXP 69
19639: PUSH
19640: EMPTY
19641: ST_TO_ADDR
// minerMinesList := [ ] ;
19642: LD_ADDR_EXP 70
19646: PUSH
19647: EMPTY
19648: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
19649: LD_ADDR_EXP 71
19653: PUSH
19654: LD_INT 5
19656: ST_TO_ADDR
// end ;
19657: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
19658: LD_EXP 68
19662: IFFALSE 19680
19664: PUSH
19665: LD_INT 34
19667: PUSH
19668: LD_INT 81
19670: PUSH
19671: EMPTY
19672: LIST
19673: LIST
19674: PPUSH
19675: CALL_OW 69
19679: AND
19680: IFFALSE 20143
19682: GO 19684
19684: DISABLE
19685: LD_INT 0
19687: PPUSH
19688: PPUSH
19689: PPUSH
19690: PPUSH
// begin enable ;
19691: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
19692: LD_ADDR_VAR 0 1
19696: PUSH
19697: LD_INT 34
19699: PUSH
19700: LD_INT 81
19702: PUSH
19703: EMPTY
19704: LIST
19705: LIST
19706: PPUSH
19707: CALL_OW 69
19711: PUSH
19712: FOR_IN
19713: IFFALSE 19785
// begin if not i in minersList then
19715: LD_VAR 0 1
19719: PUSH
19720: LD_EXP 69
19724: IN
19725: NOT
19726: IFFALSE 19783
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
19728: LD_ADDR_EXP 69
19732: PUSH
19733: LD_EXP 69
19737: PPUSH
19738: LD_EXP 69
19742: PUSH
19743: LD_INT 1
19745: PLUS
19746: PPUSH
19747: LD_VAR 0 1
19751: PPUSH
19752: CALL_OW 1
19756: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
19757: LD_ADDR_EXP 70
19761: PUSH
19762: LD_EXP 70
19766: PPUSH
19767: LD_EXP 70
19771: PUSH
19772: LD_INT 1
19774: PLUS
19775: PPUSH
19776: EMPTY
19777: PPUSH
19778: CALL_OW 1
19782: ST_TO_ADDR
// end end ;
19783: GO 19712
19785: POP
19786: POP
// for i := minerMinesList downto 1 do
19787: LD_ADDR_VAR 0 1
19791: PUSH
19792: DOUBLE
19793: LD_EXP 70
19797: INC
19798: ST_TO_ADDR
19799: LD_INT 1
19801: PUSH
19802: FOR_DOWNTO
19803: IFFALSE 20141
// begin if IsLive ( minersList [ i ] ) then
19805: LD_EXP 69
19809: PUSH
19810: LD_VAR 0 1
19814: ARRAY
19815: PPUSH
19816: CALL_OW 300
19820: IFFALSE 19848
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
19822: LD_EXP 69
19826: PUSH
19827: LD_VAR 0 1
19831: ARRAY
19832: PPUSH
19833: LD_EXP 70
19837: PUSH
19838: LD_VAR 0 1
19842: ARRAY
19843: PPUSH
19844: CALL_OW 505
// if not minerMinesList [ i ] then
19848: LD_EXP 70
19852: PUSH
19853: LD_VAR 0 1
19857: ARRAY
19858: NOT
19859: IFFALSE 19863
// continue ;
19861: GO 19802
// for j := minerMinesList [ i ] downto 1 do
19863: LD_ADDR_VAR 0 2
19867: PUSH
19868: DOUBLE
19869: LD_EXP 70
19873: PUSH
19874: LD_VAR 0 1
19878: ARRAY
19879: INC
19880: ST_TO_ADDR
19881: LD_INT 1
19883: PUSH
19884: FOR_DOWNTO
19885: IFFALSE 20137
// begin side := GetSide ( minersList [ i ] ) ;
19887: LD_ADDR_VAR 0 3
19891: PUSH
19892: LD_EXP 69
19896: PUSH
19897: LD_VAR 0 1
19901: ARRAY
19902: PPUSH
19903: CALL_OW 255
19907: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
19908: LD_ADDR_VAR 0 4
19912: PUSH
19913: LD_EXP 70
19917: PUSH
19918: LD_VAR 0 1
19922: ARRAY
19923: PUSH
19924: LD_VAR 0 2
19928: ARRAY
19929: PUSH
19930: LD_INT 1
19932: ARRAY
19933: PPUSH
19934: LD_EXP 70
19938: PUSH
19939: LD_VAR 0 1
19943: ARRAY
19944: PUSH
19945: LD_VAR 0 2
19949: ARRAY
19950: PUSH
19951: LD_INT 2
19953: ARRAY
19954: PPUSH
19955: CALL_OW 428
19959: ST_TO_ADDR
// if not tmp then
19960: LD_VAR 0 4
19964: NOT
19965: IFFALSE 19969
// continue ;
19967: GO 19884
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
19969: LD_VAR 0 4
19973: PUSH
19974: LD_INT 81
19976: PUSH
19977: LD_VAR 0 3
19981: PUSH
19982: EMPTY
19983: LIST
19984: LIST
19985: PPUSH
19986: CALL_OW 69
19990: IN
19991: IFFALSE 20041
19993: PUSH
19994: LD_EXP 70
19998: PUSH
19999: LD_VAR 0 1
20003: ARRAY
20004: PUSH
20005: LD_VAR 0 2
20009: ARRAY
20010: PUSH
20011: LD_INT 1
20013: ARRAY
20014: PPUSH
20015: LD_EXP 70
20019: PUSH
20020: LD_VAR 0 1
20024: ARRAY
20025: PUSH
20026: LD_VAR 0 2
20030: ARRAY
20031: PUSH
20032: LD_INT 2
20034: ARRAY
20035: PPUSH
20036: CALL_OW 458
20040: AND
20041: IFFALSE 20135
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
20043: LD_EXP 70
20047: PUSH
20048: LD_VAR 0 1
20052: ARRAY
20053: PUSH
20054: LD_VAR 0 2
20058: ARRAY
20059: PUSH
20060: LD_INT 1
20062: ARRAY
20063: PPUSH
20064: LD_EXP 70
20068: PUSH
20069: LD_VAR 0 1
20073: ARRAY
20074: PUSH
20075: LD_VAR 0 2
20079: ARRAY
20080: PUSH
20081: LD_INT 2
20083: ARRAY
20084: PPUSH
20085: LD_VAR 0 3
20089: PPUSH
20090: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
20094: LD_ADDR_EXP 70
20098: PUSH
20099: LD_EXP 70
20103: PPUSH
20104: LD_VAR 0 1
20108: PPUSH
20109: LD_EXP 70
20113: PUSH
20114: LD_VAR 0 1
20118: ARRAY
20119: PPUSH
20120: LD_VAR 0 2
20124: PPUSH
20125: CALL_OW 3
20129: PPUSH
20130: CALL_OW 1
20134: ST_TO_ADDR
// end ; end ;
20135: GO 19884
20137: POP
20138: POP
// end ;
20139: GO 19802
20141: POP
20142: POP
// end ;
20143: PPOPN 4
20145: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
20146: LD_INT 0
20148: PPUSH
20149: PPUSH
// result := false ;
20150: LD_ADDR_VAR 0 4
20154: PUSH
20155: LD_INT 0
20157: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
20158: LD_VAR 0 1
20162: PPUSH
20163: CALL_OW 264
20167: PUSH
20168: LD_INT 81
20170: EQUAL
20171: NOT
20172: IFFALSE 20176
// exit ;
20174: GO 20420
// index := GetElementIndex ( minersList , unit ) ;
20176: LD_ADDR_VAR 0 5
20180: PUSH
20181: LD_EXP 69
20185: PPUSH
20186: LD_VAR 0 1
20190: PPUSH
20191: CALL 26589 0 2
20195: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
20196: LD_EXP 70
20200: PUSH
20201: LD_VAR 0 5
20205: ARRAY
20206: PUSH
20207: LD_EXP 71
20211: GREATEREQUAL
20212: IFFALSE 20216
// exit ;
20214: GO 20420
// ComMoveXY ( unit , x , y ) ;
20216: LD_VAR 0 1
20220: PPUSH
20221: LD_VAR 0 2
20225: PPUSH
20226: LD_VAR 0 3
20230: PPUSH
20231: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
20235: LD_INT 35
20237: PPUSH
20238: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
20242: LD_VAR 0 1
20246: PPUSH
20247: LD_VAR 0 2
20251: PPUSH
20252: LD_VAR 0 3
20256: PPUSH
20257: CALL 58635 0 3
20261: NOT
20262: IFFALSE 20275
20264: PUSH
20265: LD_VAR 0 1
20269: PPUSH
20270: CALL_OW 314
20274: AND
20275: IFFALSE 20279
// exit ;
20277: GO 20420
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
20279: LD_VAR 0 2
20283: PPUSH
20284: LD_VAR 0 3
20288: PPUSH
20289: CALL_OW 428
20293: PUSH
20294: LD_VAR 0 1
20298: EQUAL
20299: IFFALSE 20313
20301: PUSH
20302: LD_VAR 0 1
20306: PPUSH
20307: CALL_OW 314
20311: NOT
20312: AND
20313: IFFALSE 20235
// PlaySoundXY ( x , y , PlantMine ) ;
20315: LD_VAR 0 2
20319: PPUSH
20320: LD_VAR 0 3
20324: PPUSH
20325: LD_STRING PlantMine
20327: PPUSH
20328: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
20332: LD_VAR 0 2
20336: PPUSH
20337: LD_VAR 0 3
20341: PPUSH
20342: LD_VAR 0 1
20346: PPUSH
20347: CALL_OW 255
20351: PPUSH
20352: LD_INT 0
20354: PPUSH
20355: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
20359: LD_ADDR_EXP 70
20363: PUSH
20364: LD_EXP 70
20368: PPUSH
20369: LD_VAR 0 5
20373: PUSH
20374: LD_EXP 70
20378: PUSH
20379: LD_VAR 0 5
20383: ARRAY
20384: PUSH
20385: LD_INT 1
20387: PLUS
20388: PUSH
20389: EMPTY
20390: LIST
20391: LIST
20392: PPUSH
20393: LD_VAR 0 2
20397: PUSH
20398: LD_VAR 0 3
20402: PUSH
20403: EMPTY
20404: LIST
20405: LIST
20406: PPUSH
20407: CALL 26806 0 3
20411: ST_TO_ADDR
// result := true ;
20412: LD_ADDR_VAR 0 4
20416: PUSH
20417: LD_INT 1
20419: ST_TO_ADDR
// end ;
20420: LD_VAR 0 4
20424: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
20425: LD_INT 0
20427: PPUSH
20428: PPUSH
20429: PPUSH
// if not unit in minersList then
20430: LD_VAR 0 1
20434: PUSH
20435: LD_EXP 69
20439: IN
20440: NOT
20441: IFFALSE 20445
// exit ;
20443: GO 20839
// index := GetElementIndex ( minersList , unit ) ;
20445: LD_ADDR_VAR 0 6
20449: PUSH
20450: LD_EXP 69
20454: PPUSH
20455: LD_VAR 0 1
20459: PPUSH
20460: CALL 26589 0 2
20464: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
20465: LD_ADDR_VAR 0 5
20469: PUSH
20470: DOUBLE
20471: LD_EXP 70
20475: PUSH
20476: LD_VAR 0 6
20480: ARRAY
20481: INC
20482: ST_TO_ADDR
20483: LD_INT 1
20485: PUSH
20486: FOR_DOWNTO
20487: IFFALSE 20650
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
20489: LD_EXP 70
20493: PUSH
20494: LD_VAR 0 6
20498: ARRAY
20499: PUSH
20500: LD_VAR 0 5
20504: ARRAY
20505: PUSH
20506: LD_INT 1
20508: ARRAY
20509: PUSH
20510: LD_VAR 0 2
20514: EQUAL
20515: IFFALSE 20545
20517: PUSH
20518: LD_EXP 70
20522: PUSH
20523: LD_VAR 0 6
20527: ARRAY
20528: PUSH
20529: LD_VAR 0 5
20533: ARRAY
20534: PUSH
20535: LD_INT 2
20537: ARRAY
20538: PUSH
20539: LD_VAR 0 3
20543: EQUAL
20544: AND
20545: IFFALSE 20648
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
20547: LD_EXP 70
20551: PUSH
20552: LD_VAR 0 6
20556: ARRAY
20557: PUSH
20558: LD_VAR 0 5
20562: ARRAY
20563: PUSH
20564: LD_INT 1
20566: ARRAY
20567: PPUSH
20568: LD_EXP 70
20572: PUSH
20573: LD_VAR 0 6
20577: ARRAY
20578: PUSH
20579: LD_VAR 0 5
20583: ARRAY
20584: PUSH
20585: LD_INT 2
20587: ARRAY
20588: PPUSH
20589: LD_VAR 0 1
20593: PPUSH
20594: CALL_OW 255
20598: PPUSH
20599: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
20603: LD_ADDR_EXP 70
20607: PUSH
20608: LD_EXP 70
20612: PPUSH
20613: LD_VAR 0 6
20617: PPUSH
20618: LD_EXP 70
20622: PUSH
20623: LD_VAR 0 6
20627: ARRAY
20628: PPUSH
20629: LD_VAR 0 5
20633: PPUSH
20634: CALL_OW 3
20638: PPUSH
20639: CALL_OW 1
20643: ST_TO_ADDR
// exit ;
20644: POP
20645: POP
20646: GO 20839
// end ; end ;
20648: GO 20486
20650: POP
20651: POP
// for i := minerMinesList [ index ] downto 1 do
20652: LD_ADDR_VAR 0 5
20656: PUSH
20657: DOUBLE
20658: LD_EXP 70
20662: PUSH
20663: LD_VAR 0 6
20667: ARRAY
20668: INC
20669: ST_TO_ADDR
20670: LD_INT 1
20672: PUSH
20673: FOR_DOWNTO
20674: IFFALSE 20837
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
20676: LD_EXP 70
20680: PUSH
20681: LD_VAR 0 6
20685: ARRAY
20686: PUSH
20687: LD_VAR 0 5
20691: ARRAY
20692: PUSH
20693: LD_INT 1
20695: ARRAY
20696: PPUSH
20697: LD_EXP 70
20701: PUSH
20702: LD_VAR 0 6
20706: ARRAY
20707: PUSH
20708: LD_VAR 0 5
20712: ARRAY
20713: PUSH
20714: LD_INT 2
20716: ARRAY
20717: PPUSH
20718: LD_VAR 0 2
20722: PPUSH
20723: LD_VAR 0 3
20727: PPUSH
20728: CALL_OW 298
20732: PUSH
20733: LD_INT 6
20735: LESS
20736: IFFALSE 20835
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
20738: LD_EXP 70
20742: PUSH
20743: LD_VAR 0 6
20747: ARRAY
20748: PUSH
20749: LD_VAR 0 5
20753: ARRAY
20754: PUSH
20755: LD_INT 1
20757: ARRAY
20758: PPUSH
20759: LD_EXP 70
20763: PUSH
20764: LD_VAR 0 6
20768: ARRAY
20769: PUSH
20770: LD_VAR 0 5
20774: ARRAY
20775: PUSH
20776: LD_INT 2
20778: ARRAY
20779: PPUSH
20780: LD_VAR 0 1
20784: PPUSH
20785: CALL_OW 255
20789: PPUSH
20790: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
20794: LD_ADDR_EXP 70
20798: PUSH
20799: LD_EXP 70
20803: PPUSH
20804: LD_VAR 0 6
20808: PPUSH
20809: LD_EXP 70
20813: PUSH
20814: LD_VAR 0 6
20818: ARRAY
20819: PPUSH
20820: LD_VAR 0 5
20824: PPUSH
20825: CALL_OW 3
20829: PPUSH
20830: CALL_OW 1
20834: ST_TO_ADDR
// end ; end ;
20835: GO 20673
20837: POP
20838: POP
// end ;
20839: LD_VAR 0 4
20843: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
20844: LD_INT 0
20846: PPUSH
20847: PPUSH
20848: PPUSH
20849: PPUSH
20850: PPUSH
20851: PPUSH
20852: PPUSH
20853: PPUSH
20854: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
20855: LD_VAR 0 1
20859: PPUSH
20860: CALL_OW 264
20864: PUSH
20865: LD_INT 81
20867: EQUAL
20868: NOT
20869: IFTRUE 20884
20871: PUSH
20872: LD_VAR 0 1
20876: PUSH
20877: LD_EXP 69
20881: IN
20882: NOT
20883: OR
20884: IFFALSE 20888
// exit ;
20886: GO 21214
// index := GetElementIndex ( minersList , unit ) ;
20888: LD_ADDR_VAR 0 6
20892: PUSH
20893: LD_EXP 69
20897: PPUSH
20898: LD_VAR 0 1
20902: PPUSH
20903: CALL 26589 0 2
20907: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
20908: LD_ADDR_VAR 0 8
20912: PUSH
20913: LD_EXP 71
20917: PUSH
20918: LD_EXP 70
20922: PUSH
20923: LD_VAR 0 6
20927: ARRAY
20928: MINUS
20929: ST_TO_ADDR
// if not minesFreeAmount then
20930: LD_VAR 0 8
20934: NOT
20935: IFFALSE 20939
// exit ;
20937: GO 21214
// tmp := [ ] ;
20939: LD_ADDR_VAR 0 7
20943: PUSH
20944: EMPTY
20945: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
20946: LD_ADDR_VAR 0 5
20950: PUSH
20951: DOUBLE
20952: LD_INT 1
20954: DEC
20955: ST_TO_ADDR
20956: LD_VAR 0 8
20960: PUSH
20961: FOR_TO
20962: IFFALSE 21161
// begin _d := rand ( 0 , 5 ) ;
20964: LD_ADDR_VAR 0 11
20968: PUSH
20969: LD_INT 0
20971: PPUSH
20972: LD_INT 5
20974: PPUSH
20975: CALL_OW 12
20979: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
20980: LD_ADDR_VAR 0 12
20984: PUSH
20985: LD_INT 2
20987: PPUSH
20988: LD_INT 6
20990: PPUSH
20991: CALL_OW 12
20995: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
20996: LD_ADDR_VAR 0 9
21000: PUSH
21001: LD_VAR 0 2
21005: PPUSH
21006: LD_VAR 0 11
21010: PPUSH
21011: LD_VAR 0 12
21015: PPUSH
21016: CALL_OW 272
21020: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
21021: LD_ADDR_VAR 0 10
21025: PUSH
21026: LD_VAR 0 3
21030: PPUSH
21031: LD_VAR 0 11
21035: PPUSH
21036: LD_VAR 0 12
21040: PPUSH
21041: CALL_OW 273
21045: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
21046: LD_VAR 0 9
21050: PPUSH
21051: LD_VAR 0 10
21055: PPUSH
21056: CALL_OW 488
21060: IFFALSE 21084
21062: PUSH
21063: LD_VAR 0 9
21067: PUSH
21068: LD_VAR 0 10
21072: PUSH
21073: EMPTY
21074: LIST
21075: LIST
21076: PUSH
21077: LD_VAR 0 7
21081: IN
21082: NOT
21083: AND
21084: IFFALSE 21103
21086: PUSH
21087: LD_VAR 0 9
21091: PPUSH
21092: LD_VAR 0 10
21096: PPUSH
21097: CALL_OW 458
21101: NOT
21102: AND
21103: IFFALSE 21145
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
21105: LD_ADDR_VAR 0 7
21109: PUSH
21110: LD_VAR 0 7
21114: PPUSH
21115: LD_VAR 0 7
21119: PUSH
21120: LD_INT 1
21122: PLUS
21123: PPUSH
21124: LD_VAR 0 9
21128: PUSH
21129: LD_VAR 0 10
21133: PUSH
21134: EMPTY
21135: LIST
21136: LIST
21137: PPUSH
21138: CALL_OW 1
21142: ST_TO_ADDR
21143: GO 21159
// i := i - 1 ;
21145: LD_ADDR_VAR 0 5
21149: PUSH
21150: LD_VAR 0 5
21154: PUSH
21155: LD_INT 1
21157: MINUS
21158: ST_TO_ADDR
// end ;
21159: GO 20961
21161: POP
21162: POP
// for i in tmp do
21163: LD_ADDR_VAR 0 5
21167: PUSH
21168: LD_VAR 0 7
21172: PUSH
21173: FOR_IN
21174: IFFALSE 21212
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
21176: LD_VAR 0 1
21180: PPUSH
21181: LD_VAR 0 5
21185: PUSH
21186: LD_INT 1
21188: ARRAY
21189: PPUSH
21190: LD_VAR 0 5
21194: PUSH
21195: LD_INT 2
21197: ARRAY
21198: PPUSH
21199: CALL 20146 0 3
21203: NOT
21204: IFFALSE 21210
// exit ;
21206: POP
21207: POP
21208: GO 21214
21210: GO 21173
21212: POP
21213: POP
// end ;
21214: LD_VAR 0 4
21218: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
21219: LD_INT 0
21221: PPUSH
21222: PPUSH
21223: PPUSH
21224: PPUSH
21225: PPUSH
21226: PPUSH
21227: PPUSH
21228: PPUSH
21229: PPUSH
// if GetClass ( unit ) <> class_sniper then
21230: LD_VAR 0 1
21234: PPUSH
21235: CALL_OW 257
21239: PUSH
21240: LD_INT 5
21242: NONEQUAL
21243: IFFALSE 21247
// exit ;
21245: GO 21717
// dist := 8 ;
21247: LD_ADDR_VAR 0 5
21251: PUSH
21252: LD_INT 8
21254: ST_TO_ADDR
// viewRange := 12 ;
21255: LD_ADDR_VAR 0 8
21259: PUSH
21260: LD_INT 12
21262: ST_TO_ADDR
// side := GetSide ( unit ) ;
21263: LD_ADDR_VAR 0 6
21267: PUSH
21268: LD_VAR 0 1
21272: PPUSH
21273: CALL_OW 255
21277: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
21278: LD_INT 61
21280: PPUSH
21281: LD_VAR 0 6
21285: PPUSH
21286: CALL_OW 321
21290: PUSH
21291: LD_INT 2
21293: EQUAL
21294: IFFALSE 21304
// viewRange := 16 ;
21296: LD_ADDR_VAR 0 8
21300: PUSH
21301: LD_INT 16
21303: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
21304: LD_VAR 0 1
21308: PPUSH
21309: LD_VAR 0 2
21313: PPUSH
21314: LD_VAR 0 3
21318: PPUSH
21319: CALL_OW 297
21323: PUSH
21324: LD_VAR 0 5
21328: GREATER
21329: IFFALSE 21408
// begin ComMoveXY ( unit , x , y ) ;
21331: LD_VAR 0 1
21335: PPUSH
21336: LD_VAR 0 2
21340: PPUSH
21341: LD_VAR 0 3
21345: PPUSH
21346: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
21350: LD_INT 35
21352: PPUSH
21353: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
21357: LD_VAR 0 1
21361: PPUSH
21362: LD_VAR 0 2
21366: PPUSH
21367: LD_VAR 0 3
21371: PPUSH
21372: CALL 58635 0 3
21376: NOT
21377: IFFALSE 21381
// exit ;
21379: GO 21717
// until GetDistUnitXY ( unit , x , y ) < dist ;
21381: LD_VAR 0 1
21385: PPUSH
21386: LD_VAR 0 2
21390: PPUSH
21391: LD_VAR 0 3
21395: PPUSH
21396: CALL_OW 297
21400: PUSH
21401: LD_VAR 0 5
21405: LESS
21406: IFFALSE 21350
// end ; ComTurnXY ( unit , x , y ) ;
21408: LD_VAR 0 1
21412: PPUSH
21413: LD_VAR 0 2
21417: PPUSH
21418: LD_VAR 0 3
21422: PPUSH
21423: CALL_OW 118
// repeat if Multiplayer then
21427: LD_OWVAR 4
21431: IFFALSE 21442
// wait ( 35 ) else
21433: LD_INT 35
21435: PPUSH
21436: CALL_OW 67
21440: GO 21449
// wait ( 5 ) ;
21442: LD_INT 5
21444: PPUSH
21445: CALL_OW 67
// _d := GetDir ( unit ) ;
21449: LD_ADDR_VAR 0 11
21453: PUSH
21454: LD_VAR 0 1
21458: PPUSH
21459: CALL_OW 254
21463: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
21464: LD_ADDR_VAR 0 7
21468: PUSH
21469: LD_VAR 0 1
21473: PPUSH
21474: CALL_OW 250
21478: PPUSH
21479: LD_VAR 0 1
21483: PPUSH
21484: CALL_OW 251
21488: PPUSH
21489: LD_VAR 0 2
21493: PPUSH
21494: LD_VAR 0 3
21498: PPUSH
21499: CALL 61271 0 4
21503: ST_TO_ADDR
// until dir = _d ;
21504: LD_VAR 0 7
21508: PUSH
21509: LD_VAR 0 11
21513: EQUAL
21514: IFFALSE 21427
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
21516: LD_ADDR_VAR 0 9
21520: PUSH
21521: LD_VAR 0 1
21525: PPUSH
21526: CALL_OW 250
21530: PPUSH
21531: LD_VAR 0 7
21535: PPUSH
21536: LD_VAR 0 5
21540: PPUSH
21541: CALL_OW 272
21545: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
21546: LD_ADDR_VAR 0 10
21550: PUSH
21551: LD_VAR 0 1
21555: PPUSH
21556: CALL_OW 251
21560: PPUSH
21561: LD_VAR 0 7
21565: PPUSH
21566: LD_VAR 0 5
21570: PPUSH
21571: CALL_OW 273
21575: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
21576: LD_VAR 0 9
21580: PPUSH
21581: LD_VAR 0 10
21585: PPUSH
21586: CALL_OW 488
21590: NOT
21591: IFFALSE 21595
// exit ;
21593: GO 21717
// ComAnimCustom ( unit , 1 ) ;
21595: LD_VAR 0 1
21599: PPUSH
21600: LD_INT 1
21602: PPUSH
21603: CALL_OW 592
// p := 0 ;
21607: LD_ADDR_VAR 0 12
21611: PUSH
21612: LD_INT 0
21614: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
21615: LD_VAR 0 9
21619: PPUSH
21620: LD_VAR 0 10
21624: PPUSH
21625: LD_VAR 0 6
21629: PPUSH
21630: LD_VAR 0 8
21634: PPUSH
21635: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
21639: LD_INT 35
21641: PPUSH
21642: CALL_OW 67
// p := Inc ( p ) ;
21646: LD_ADDR_VAR 0 12
21650: PUSH
21651: LD_VAR 0 12
21655: PPUSH
21656: CALL 61227 0 1
21660: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
21661: LD_VAR 0 12
21665: PUSH
21666: LD_INT 3
21668: EQUAL
21669: IFTRUE 21683
21671: PUSH
21672: LD_VAR 0 1
21676: PPUSH
21677: CALL_OW 302
21681: NOT
21682: OR
21683: IFTRUE 21696
21685: PUSH
21686: LD_VAR 0 1
21690: PPUSH
21691: CALL_OW 301
21695: OR
21696: IFFALSE 21639
// RemoveSeeing ( _x , _y , side ) ;
21698: LD_VAR 0 9
21702: PPUSH
21703: LD_VAR 0 10
21707: PPUSH
21708: LD_VAR 0 6
21712: PPUSH
21713: CALL_OW 331
// end ; end_of_file
21717: LD_VAR 0 4
21721: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
21722: LD_INT 0
21724: PPUSH
21725: PPUSH
// if exist_mode then
21726: LD_VAR 0 2
21730: IFFALSE 21776
// begin unit := CreateCharacter ( prefix & ident ) ;
21732: LD_ADDR_VAR 0 5
21736: PUSH
21737: LD_VAR 0 3
21741: PUSH
21742: LD_VAR 0 1
21746: STR
21747: PPUSH
21748: CALL_OW 34
21752: ST_TO_ADDR
// if unit then
21753: LD_VAR 0 5
21757: IFFALSE 21774
// DeleteCharacters ( prefix & ident ) ;
21759: LD_VAR 0 3
21763: PUSH
21764: LD_VAR 0 1
21768: STR
21769: PPUSH
21770: CALL_OW 40
// end else
21774: GO 21791
// unit := NewCharacter ( ident ) ;
21776: LD_ADDR_VAR 0 5
21780: PUSH
21781: LD_VAR 0 1
21785: PPUSH
21786: CALL_OW 25
21790: ST_TO_ADDR
// result := unit ;
21791: LD_ADDR_VAR 0 4
21795: PUSH
21796: LD_VAR 0 5
21800: ST_TO_ADDR
// end ;
21801: LD_VAR 0 4
21805: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
21806: LD_INT 0
21808: PPUSH
21809: PPUSH
// if exist_mode then
21810: LD_VAR 0 2
21814: IFFALSE 21839
// unit := CreateCharacter ( prefix & ident ) else
21816: LD_ADDR_VAR 0 5
21820: PUSH
21821: LD_VAR 0 3
21825: PUSH
21826: LD_VAR 0 1
21830: STR
21831: PPUSH
21832: CALL_OW 34
21836: ST_TO_ADDR
21837: GO 21854
// unit := NewCharacter ( ident ) ;
21839: LD_ADDR_VAR 0 5
21843: PUSH
21844: LD_VAR 0 1
21848: PPUSH
21849: CALL_OW 25
21853: ST_TO_ADDR
// result := unit ;
21854: LD_ADDR_VAR 0 4
21858: PUSH
21859: LD_VAR 0 5
21863: ST_TO_ADDR
// end ;
21864: LD_VAR 0 4
21868: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
21869: LD_INT 0
21871: PPUSH
21872: PPUSH
// if not side or not nation then
21873: LD_VAR 0 1
21877: NOT
21878: IFTRUE 21887
21880: PUSH
21881: LD_VAR 0 2
21885: NOT
21886: OR
21887: IFFALSE 21891
// exit ;
21889: GO 22661
// case nation of nation_american :
21891: LD_VAR 0 2
21895: PUSH
21896: LD_INT 1
21898: DOUBLE
21899: EQUAL
21900: IFTRUE 21904
21902: GO 22118
21904: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
21905: LD_ADDR_VAR 0 4
21909: PUSH
21910: LD_INT 35
21912: PUSH
21913: LD_INT 45
21915: PUSH
21916: LD_INT 46
21918: PUSH
21919: LD_INT 47
21921: PUSH
21922: LD_INT 82
21924: PUSH
21925: LD_INT 83
21927: PUSH
21928: LD_INT 84
21930: PUSH
21931: LD_INT 85
21933: PUSH
21934: LD_INT 86
21936: PUSH
21937: LD_INT 1
21939: PUSH
21940: LD_INT 2
21942: PUSH
21943: LD_INT 6
21945: PUSH
21946: LD_INT 15
21948: PUSH
21949: LD_INT 16
21951: PUSH
21952: LD_INT 7
21954: PUSH
21955: LD_INT 12
21957: PUSH
21958: LD_INT 13
21960: PUSH
21961: LD_INT 10
21963: PUSH
21964: LD_INT 14
21966: PUSH
21967: LD_INT 20
21969: PUSH
21970: LD_INT 21
21972: PUSH
21973: LD_INT 22
21975: PUSH
21976: LD_INT 25
21978: PUSH
21979: LD_INT 32
21981: PUSH
21982: LD_INT 27
21984: PUSH
21985: LD_INT 36
21987: PUSH
21988: LD_INT 69
21990: PUSH
21991: LD_INT 39
21993: PUSH
21994: LD_INT 34
21996: PUSH
21997: LD_INT 40
21999: PUSH
22000: LD_INT 48
22002: PUSH
22003: LD_INT 49
22005: PUSH
22006: LD_INT 50
22008: PUSH
22009: LD_INT 51
22011: PUSH
22012: LD_INT 52
22014: PUSH
22015: LD_INT 53
22017: PUSH
22018: LD_INT 54
22020: PUSH
22021: LD_INT 55
22023: PUSH
22024: LD_INT 56
22026: PUSH
22027: LD_INT 57
22029: PUSH
22030: LD_INT 58
22032: PUSH
22033: LD_INT 59
22035: PUSH
22036: LD_INT 60
22038: PUSH
22039: LD_INT 61
22041: PUSH
22042: LD_INT 62
22044: PUSH
22045: LD_INT 80
22047: PUSH
22048: LD_INT 82
22050: PUSH
22051: LD_INT 83
22053: PUSH
22054: LD_INT 84
22056: PUSH
22057: LD_INT 85
22059: PUSH
22060: LD_INT 86
22062: PUSH
22063: EMPTY
22064: LIST
22065: LIST
22066: LIST
22067: LIST
22068: LIST
22069: LIST
22070: LIST
22071: LIST
22072: LIST
22073: LIST
22074: LIST
22075: LIST
22076: LIST
22077: LIST
22078: LIST
22079: LIST
22080: LIST
22081: LIST
22082: LIST
22083: LIST
22084: LIST
22085: LIST
22086: LIST
22087: LIST
22088: LIST
22089: LIST
22090: LIST
22091: LIST
22092: LIST
22093: LIST
22094: LIST
22095: LIST
22096: LIST
22097: LIST
22098: LIST
22099: LIST
22100: LIST
22101: LIST
22102: LIST
22103: LIST
22104: LIST
22105: LIST
22106: LIST
22107: LIST
22108: LIST
22109: LIST
22110: LIST
22111: LIST
22112: LIST
22113: LIST
22114: LIST
22115: ST_TO_ADDR
22116: GO 22583
22118: LD_INT 2
22120: DOUBLE
22121: EQUAL
22122: IFTRUE 22126
22124: GO 22352
22126: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
22127: LD_ADDR_VAR 0 4
22131: PUSH
22132: LD_INT 35
22134: PUSH
22135: LD_INT 45
22137: PUSH
22138: LD_INT 46
22140: PUSH
22141: LD_INT 47
22143: PUSH
22144: LD_INT 82
22146: PUSH
22147: LD_INT 83
22149: PUSH
22150: LD_INT 84
22152: PUSH
22153: LD_INT 85
22155: PUSH
22156: LD_INT 87
22158: PUSH
22159: LD_INT 70
22161: PUSH
22162: LD_INT 1
22164: PUSH
22165: LD_INT 11
22167: PUSH
22168: LD_INT 3
22170: PUSH
22171: LD_INT 4
22173: PUSH
22174: LD_INT 5
22176: PUSH
22177: LD_INT 6
22179: PUSH
22180: LD_INT 15
22182: PUSH
22183: LD_INT 18
22185: PUSH
22186: LD_INT 7
22188: PUSH
22189: LD_INT 17
22191: PUSH
22192: LD_INT 8
22194: PUSH
22195: LD_INT 20
22197: PUSH
22198: LD_INT 21
22200: PUSH
22201: LD_INT 22
22203: PUSH
22204: LD_INT 72
22206: PUSH
22207: LD_INT 26
22209: PUSH
22210: LD_INT 69
22212: PUSH
22213: LD_INT 39
22215: PUSH
22216: LD_INT 40
22218: PUSH
22219: LD_INT 41
22221: PUSH
22222: LD_INT 42
22224: PUSH
22225: LD_INT 43
22227: PUSH
22228: LD_INT 48
22230: PUSH
22231: LD_INT 49
22233: PUSH
22234: LD_INT 50
22236: PUSH
22237: LD_INT 51
22239: PUSH
22240: LD_INT 52
22242: PUSH
22243: LD_INT 53
22245: PUSH
22246: LD_INT 54
22248: PUSH
22249: LD_INT 55
22251: PUSH
22252: LD_INT 56
22254: PUSH
22255: LD_INT 60
22257: PUSH
22258: LD_INT 61
22260: PUSH
22261: LD_INT 62
22263: PUSH
22264: LD_INT 66
22266: PUSH
22267: LD_INT 67
22269: PUSH
22270: LD_INT 68
22272: PUSH
22273: LD_INT 81
22275: PUSH
22276: LD_INT 82
22278: PUSH
22279: LD_INT 83
22281: PUSH
22282: LD_INT 84
22284: PUSH
22285: LD_INT 85
22287: PUSH
22288: LD_INT 87
22290: PUSH
22291: LD_INT 88
22293: PUSH
22294: EMPTY
22295: LIST
22296: LIST
22297: LIST
22298: LIST
22299: LIST
22300: LIST
22301: LIST
22302: LIST
22303: LIST
22304: LIST
22305: LIST
22306: LIST
22307: LIST
22308: LIST
22309: LIST
22310: LIST
22311: LIST
22312: LIST
22313: LIST
22314: LIST
22315: LIST
22316: LIST
22317: LIST
22318: LIST
22319: LIST
22320: LIST
22321: LIST
22322: LIST
22323: LIST
22324: LIST
22325: LIST
22326: LIST
22327: LIST
22328: LIST
22329: LIST
22330: LIST
22331: LIST
22332: LIST
22333: LIST
22334: LIST
22335: LIST
22336: LIST
22337: LIST
22338: LIST
22339: LIST
22340: LIST
22341: LIST
22342: LIST
22343: LIST
22344: LIST
22345: LIST
22346: LIST
22347: LIST
22348: LIST
22349: ST_TO_ADDR
22350: GO 22583
22352: LD_INT 3
22354: DOUBLE
22355: EQUAL
22356: IFTRUE 22360
22358: GO 22582
22360: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
22361: LD_ADDR_VAR 0 4
22365: PUSH
22366: LD_INT 46
22368: PUSH
22369: LD_INT 47
22371: PUSH
22372: LD_INT 1
22374: PUSH
22375: LD_INT 2
22377: PUSH
22378: LD_INT 82
22380: PUSH
22381: LD_INT 83
22383: PUSH
22384: LD_INT 84
22386: PUSH
22387: LD_INT 85
22389: PUSH
22390: LD_INT 86
22392: PUSH
22393: LD_INT 11
22395: PUSH
22396: LD_INT 9
22398: PUSH
22399: LD_INT 20
22401: PUSH
22402: LD_INT 19
22404: PUSH
22405: LD_INT 21
22407: PUSH
22408: LD_INT 24
22410: PUSH
22411: LD_INT 22
22413: PUSH
22414: LD_INT 25
22416: PUSH
22417: LD_INT 28
22419: PUSH
22420: LD_INT 29
22422: PUSH
22423: LD_INT 30
22425: PUSH
22426: LD_INT 31
22428: PUSH
22429: LD_INT 37
22431: PUSH
22432: LD_INT 38
22434: PUSH
22435: LD_INT 32
22437: PUSH
22438: LD_INT 27
22440: PUSH
22441: LD_INT 33
22443: PUSH
22444: LD_INT 69
22446: PUSH
22447: LD_INT 39
22449: PUSH
22450: LD_INT 34
22452: PUSH
22453: LD_INT 40
22455: PUSH
22456: LD_INT 71
22458: PUSH
22459: LD_INT 23
22461: PUSH
22462: LD_INT 44
22464: PUSH
22465: LD_INT 48
22467: PUSH
22468: LD_INT 49
22470: PUSH
22471: LD_INT 50
22473: PUSH
22474: LD_INT 51
22476: PUSH
22477: LD_INT 52
22479: PUSH
22480: LD_INT 53
22482: PUSH
22483: LD_INT 54
22485: PUSH
22486: LD_INT 55
22488: PUSH
22489: LD_INT 56
22491: PUSH
22492: LD_INT 57
22494: PUSH
22495: LD_INT 58
22497: PUSH
22498: LD_INT 59
22500: PUSH
22501: LD_INT 63
22503: PUSH
22504: LD_INT 64
22506: PUSH
22507: LD_INT 65
22509: PUSH
22510: LD_INT 82
22512: PUSH
22513: LD_INT 83
22515: PUSH
22516: LD_INT 84
22518: PUSH
22519: LD_INT 85
22521: PUSH
22522: LD_INT 86
22524: PUSH
22525: EMPTY
22526: LIST
22527: LIST
22528: LIST
22529: LIST
22530: LIST
22531: LIST
22532: LIST
22533: LIST
22534: LIST
22535: LIST
22536: LIST
22537: LIST
22538: LIST
22539: LIST
22540: LIST
22541: LIST
22542: LIST
22543: LIST
22544: LIST
22545: LIST
22546: LIST
22547: LIST
22548: LIST
22549: LIST
22550: LIST
22551: LIST
22552: LIST
22553: LIST
22554: LIST
22555: LIST
22556: LIST
22557: LIST
22558: LIST
22559: LIST
22560: LIST
22561: LIST
22562: LIST
22563: LIST
22564: LIST
22565: LIST
22566: LIST
22567: LIST
22568: LIST
22569: LIST
22570: LIST
22571: LIST
22572: LIST
22573: LIST
22574: LIST
22575: LIST
22576: LIST
22577: LIST
22578: LIST
22579: ST_TO_ADDR
22580: GO 22583
22582: POP
// if state > - 1 and state < 3 then
22583: LD_VAR 0 3
22587: PUSH
22588: LD_INT 1
22590: NEG
22591: GREATER
22592: IFFALSE 22604
22594: PUSH
22595: LD_VAR 0 3
22599: PUSH
22600: LD_INT 3
22602: LESS
22603: AND
22604: IFFALSE 22661
// for i in result do
22606: LD_ADDR_VAR 0 5
22610: PUSH
22611: LD_VAR 0 4
22615: PUSH
22616: FOR_IN
22617: IFFALSE 22659
// if GetTech ( i , side ) <> state then
22619: LD_VAR 0 5
22623: PPUSH
22624: LD_VAR 0 1
22628: PPUSH
22629: CALL_OW 321
22633: PUSH
22634: LD_VAR 0 3
22638: NONEQUAL
22639: IFFALSE 22657
// result := result diff i ;
22641: LD_ADDR_VAR 0 4
22645: PUSH
22646: LD_VAR 0 4
22650: PUSH
22651: LD_VAR 0 5
22655: DIFF
22656: ST_TO_ADDR
22657: GO 22616
22659: POP
22660: POP
// end ;
22661: LD_VAR 0 4
22665: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
22666: LD_INT 0
22668: PPUSH
22669: PPUSH
22670: PPUSH
// result := true ;
22671: LD_ADDR_VAR 0 3
22675: PUSH
22676: LD_INT 1
22678: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
22679: LD_ADDR_VAR 0 5
22683: PUSH
22684: LD_VAR 0 2
22688: PPUSH
22689: CALL_OW 480
22693: ST_TO_ADDR
// if not tmp then
22694: LD_VAR 0 5
22698: NOT
22699: IFFALSE 22703
// exit ;
22701: GO 22752
// for i in tmp do
22703: LD_ADDR_VAR 0 4
22707: PUSH
22708: LD_VAR 0 5
22712: PUSH
22713: FOR_IN
22714: IFFALSE 22750
// if GetTech ( i , side ) <> state_researched then
22716: LD_VAR 0 4
22720: PPUSH
22721: LD_VAR 0 1
22725: PPUSH
22726: CALL_OW 321
22730: PUSH
22731: LD_INT 2
22733: NONEQUAL
22734: IFFALSE 22748
// begin result := false ;
22736: LD_ADDR_VAR 0 3
22740: PUSH
22741: LD_INT 0
22743: ST_TO_ADDR
// exit ;
22744: POP
22745: POP
22746: GO 22752
// end ;
22748: GO 22713
22750: POP
22751: POP
// end ;
22752: LD_VAR 0 3
22756: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
22757: LD_INT 0
22759: PPUSH
22760: PPUSH
22761: PPUSH
22762: PPUSH
22763: PPUSH
22764: PPUSH
22765: PPUSH
22766: PPUSH
22767: PPUSH
22768: PPUSH
22769: PPUSH
22770: PPUSH
22771: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
22772: LD_VAR 0 1
22776: NOT
22777: IFTRUE 22794
22779: PUSH
22780: LD_VAR 0 1
22784: PPUSH
22785: CALL_OW 257
22789: PUSH
22790: LD_INT 9
22792: NONEQUAL
22793: OR
22794: IFFALSE 22798
// exit ;
22796: GO 23377
// side := GetSide ( unit ) ;
22798: LD_ADDR_VAR 0 9
22802: PUSH
22803: LD_VAR 0 1
22807: PPUSH
22808: CALL_OW 255
22812: ST_TO_ADDR
// tech_space := tech_spacanom ;
22813: LD_ADDR_VAR 0 12
22817: PUSH
22818: LD_INT 29
22820: ST_TO_ADDR
// tech_time := tech_taurad ;
22821: LD_ADDR_VAR 0 13
22825: PUSH
22826: LD_INT 28
22828: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
22829: LD_ADDR_VAR 0 11
22833: PUSH
22834: LD_VAR 0 1
22838: PPUSH
22839: CALL_OW 310
22843: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
22844: LD_VAR 0 11
22848: PPUSH
22849: CALL_OW 247
22853: PUSH
22854: LD_INT 2
22856: EQUAL
22857: IFFALSE 22861
// exit ;
22859: GO 23377
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
22861: LD_ADDR_VAR 0 8
22865: PUSH
22866: LD_INT 81
22868: PUSH
22869: LD_VAR 0 9
22873: PUSH
22874: EMPTY
22875: LIST
22876: LIST
22877: PUSH
22878: LD_INT 3
22880: PUSH
22881: LD_INT 21
22883: PUSH
22884: LD_INT 3
22886: PUSH
22887: EMPTY
22888: LIST
22889: LIST
22890: PUSH
22891: EMPTY
22892: LIST
22893: LIST
22894: PUSH
22895: EMPTY
22896: LIST
22897: LIST
22898: PPUSH
22899: CALL_OW 69
22903: ST_TO_ADDR
// if not tmp then
22904: LD_VAR 0 8
22908: NOT
22909: IFFALSE 22913
// exit ;
22911: GO 23377
// if in_unit then
22913: LD_VAR 0 11
22917: IFFALSE 22941
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
22919: LD_ADDR_VAR 0 10
22923: PUSH
22924: LD_VAR 0 8
22928: PPUSH
22929: LD_VAR 0 11
22933: PPUSH
22934: CALL_OW 74
22938: ST_TO_ADDR
22939: GO 22961
// enemy := NearestUnitToUnit ( tmp , unit ) ;
22941: LD_ADDR_VAR 0 10
22945: PUSH
22946: LD_VAR 0 8
22950: PPUSH
22951: LD_VAR 0 1
22955: PPUSH
22956: CALL_OW 74
22960: ST_TO_ADDR
// if not enemy then
22961: LD_VAR 0 10
22965: NOT
22966: IFFALSE 22970
// exit ;
22968: GO 23377
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
22970: LD_VAR 0 11
22974: IFFALSE 22996
22976: PUSH
22977: LD_VAR 0 11
22981: PPUSH
22982: LD_VAR 0 10
22986: PPUSH
22987: CALL_OW 296
22991: PUSH
22992: LD_INT 13
22994: GREATER
22995: AND
22996: IFTRUE 23018
22998: PUSH
22999: LD_VAR 0 1
23003: PPUSH
23004: LD_VAR 0 10
23008: PPUSH
23009: CALL_OW 296
23013: PUSH
23014: LD_INT 12
23016: GREATER
23017: OR
23018: IFFALSE 23022
// exit ;
23020: GO 23377
// missile := [ 1 ] ;
23022: LD_ADDR_VAR 0 14
23026: PUSH
23027: LD_INT 1
23029: PUSH
23030: EMPTY
23031: LIST
23032: ST_TO_ADDR
// if Researched ( side , tech_space ) then
23033: LD_VAR 0 9
23037: PPUSH
23038: LD_VAR 0 12
23042: PPUSH
23043: CALL_OW 325
23047: IFFALSE 23076
// missile := Replace ( missile , missile + 1 , 2 ) ;
23049: LD_ADDR_VAR 0 14
23053: PUSH
23054: LD_VAR 0 14
23058: PPUSH
23059: LD_VAR 0 14
23063: PUSH
23064: LD_INT 1
23066: PLUS
23067: PPUSH
23068: LD_INT 2
23070: PPUSH
23071: CALL_OW 1
23075: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
23076: LD_VAR 0 9
23080: PPUSH
23081: LD_VAR 0 13
23085: PPUSH
23086: CALL_OW 325
23090: IFFALSE 23114
23092: PUSH
23093: LD_VAR 0 10
23097: PPUSH
23098: CALL_OW 255
23102: PPUSH
23103: LD_VAR 0 13
23107: PPUSH
23108: CALL_OW 325
23112: NOT
23113: AND
23114: IFFALSE 23143
// missile := Replace ( missile , missile + 1 , 3 ) ;
23116: LD_ADDR_VAR 0 14
23120: PUSH
23121: LD_VAR 0 14
23125: PPUSH
23126: LD_VAR 0 14
23130: PUSH
23131: LD_INT 1
23133: PLUS
23134: PPUSH
23135: LD_INT 3
23137: PPUSH
23138: CALL_OW 1
23142: ST_TO_ADDR
// if missile < 2 then
23143: LD_VAR 0 14
23147: PUSH
23148: LD_INT 2
23150: LESS
23151: IFFALSE 23155
// exit ;
23153: GO 23377
// x := GetX ( enemy ) ;
23155: LD_ADDR_VAR 0 4
23159: PUSH
23160: LD_VAR 0 10
23164: PPUSH
23165: CALL_OW 250
23169: ST_TO_ADDR
// y := GetY ( enemy ) ;
23170: LD_ADDR_VAR 0 5
23174: PUSH
23175: LD_VAR 0 10
23179: PPUSH
23180: CALL_OW 251
23184: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
23185: LD_ADDR_VAR 0 6
23189: PUSH
23190: LD_VAR 0 4
23194: PUSH
23195: LD_INT 1
23197: NEG
23198: PPUSH
23199: LD_INT 1
23201: PPUSH
23202: CALL_OW 12
23206: PLUS
23207: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
23208: LD_ADDR_VAR 0 7
23212: PUSH
23213: LD_VAR 0 5
23217: PUSH
23218: LD_INT 1
23220: NEG
23221: PPUSH
23222: LD_INT 1
23224: PPUSH
23225: CALL_OW 12
23229: PLUS
23230: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
23231: LD_VAR 0 6
23235: PPUSH
23236: LD_VAR 0 7
23240: PPUSH
23241: CALL_OW 488
23245: NOT
23246: IFFALSE 23268
// begin _x := x ;
23248: LD_ADDR_VAR 0 6
23252: PUSH
23253: LD_VAR 0 4
23257: ST_TO_ADDR
// _y := y ;
23258: LD_ADDR_VAR 0 7
23262: PUSH
23263: LD_VAR 0 5
23267: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
23268: LD_ADDR_VAR 0 3
23272: PUSH
23273: LD_INT 1
23275: PPUSH
23276: LD_VAR 0 14
23280: PPUSH
23281: CALL_OW 12
23285: ST_TO_ADDR
// case i of 1 :
23286: LD_VAR 0 3
23290: PUSH
23291: LD_INT 1
23293: DOUBLE
23294: EQUAL
23295: IFTRUE 23299
23297: GO 23316
23299: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
23300: LD_VAR 0 1
23304: PPUSH
23305: LD_VAR 0 10
23309: PPUSH
23310: CALL_OW 115
23314: GO 23377
23316: LD_INT 2
23318: DOUBLE
23319: EQUAL
23320: IFTRUE 23324
23322: GO 23346
23324: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
23325: LD_VAR 0 1
23329: PPUSH
23330: LD_VAR 0 6
23334: PPUSH
23335: LD_VAR 0 7
23339: PPUSH
23340: CALL_OW 153
23344: GO 23377
23346: LD_INT 3
23348: DOUBLE
23349: EQUAL
23350: IFTRUE 23354
23352: GO 23376
23354: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
23355: LD_VAR 0 1
23359: PPUSH
23360: LD_VAR 0 6
23364: PPUSH
23365: LD_VAR 0 7
23369: PPUSH
23370: CALL_OW 154
23374: GO 23377
23376: POP
// end ;
23377: LD_VAR 0 2
23381: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
23382: LD_INT 0
23384: PPUSH
23385: PPUSH
23386: PPUSH
23387: PPUSH
23388: PPUSH
23389: PPUSH
// if not unit or not building then
23390: LD_VAR 0 1
23394: NOT
23395: IFTRUE 23404
23397: PUSH
23398: LD_VAR 0 2
23402: NOT
23403: OR
23404: IFFALSE 23408
// exit ;
23406: GO 23566
// x := GetX ( building ) ;
23408: LD_ADDR_VAR 0 5
23412: PUSH
23413: LD_VAR 0 2
23417: PPUSH
23418: CALL_OW 250
23422: ST_TO_ADDR
// y := GetY ( building ) ;
23423: LD_ADDR_VAR 0 6
23427: PUSH
23428: LD_VAR 0 2
23432: PPUSH
23433: CALL_OW 251
23437: ST_TO_ADDR
// for i := 0 to 5 do
23438: LD_ADDR_VAR 0 4
23442: PUSH
23443: DOUBLE
23444: LD_INT 0
23446: DEC
23447: ST_TO_ADDR
23448: LD_INT 5
23450: PUSH
23451: FOR_TO
23452: IFFALSE 23564
// begin _x := ShiftX ( x , i , 3 ) ;
23454: LD_ADDR_VAR 0 7
23458: PUSH
23459: LD_VAR 0 5
23463: PPUSH
23464: LD_VAR 0 4
23468: PPUSH
23469: LD_INT 3
23471: PPUSH
23472: CALL_OW 272
23476: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
23477: LD_ADDR_VAR 0 8
23481: PUSH
23482: LD_VAR 0 6
23486: PPUSH
23487: LD_VAR 0 4
23491: PPUSH
23492: LD_INT 3
23494: PPUSH
23495: CALL_OW 273
23499: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
23500: LD_VAR 0 7
23504: PPUSH
23505: LD_VAR 0 8
23509: PPUSH
23510: CALL_OW 488
23514: NOT
23515: IFFALSE 23519
// continue ;
23517: GO 23451
// if HexInfo ( _x , _y ) = 0 then
23519: LD_VAR 0 7
23523: PPUSH
23524: LD_VAR 0 8
23528: PPUSH
23529: CALL_OW 428
23533: PUSH
23534: LD_INT 0
23536: EQUAL
23537: IFFALSE 23562
// begin ComMoveXY ( unit , _x , _y ) ;
23539: LD_VAR 0 1
23543: PPUSH
23544: LD_VAR 0 7
23548: PPUSH
23549: LD_VAR 0 8
23553: PPUSH
23554: CALL_OW 111
// exit ;
23558: POP
23559: POP
23560: GO 23566
// end ; end ;
23562: GO 23451
23564: POP
23565: POP
// end ;
23566: LD_VAR 0 3
23570: RET
// export function ScanBase ( side , base_area ) ; begin
23571: LD_INT 0
23573: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
23574: LD_ADDR_VAR 0 3
23578: PUSH
23579: LD_VAR 0 2
23583: PPUSH
23584: LD_INT 81
23586: PUSH
23587: LD_VAR 0 1
23591: PUSH
23592: EMPTY
23593: LIST
23594: LIST
23595: PPUSH
23596: CALL_OW 70
23600: ST_TO_ADDR
// end ;
23601: LD_VAR 0 3
23605: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
23606: LD_INT 0
23608: PPUSH
23609: PPUSH
23610: PPUSH
23611: PPUSH
// result := false ;
23612: LD_ADDR_VAR 0 2
23616: PUSH
23617: LD_INT 0
23619: ST_TO_ADDR
// side := GetSide ( unit ) ;
23620: LD_ADDR_VAR 0 3
23624: PUSH
23625: LD_VAR 0 1
23629: PPUSH
23630: CALL_OW 255
23634: ST_TO_ADDR
// nat := GetNation ( unit ) ;
23635: LD_ADDR_VAR 0 4
23639: PUSH
23640: LD_VAR 0 1
23644: PPUSH
23645: CALL_OW 248
23649: ST_TO_ADDR
// case nat of 1 :
23650: LD_VAR 0 4
23654: PUSH
23655: LD_INT 1
23657: DOUBLE
23658: EQUAL
23659: IFTRUE 23663
23661: GO 23674
23663: POP
// tech := tech_lassight ; 2 :
23664: LD_ADDR_VAR 0 5
23668: PUSH
23669: LD_INT 12
23671: ST_TO_ADDR
23672: GO 23713
23674: LD_INT 2
23676: DOUBLE
23677: EQUAL
23678: IFTRUE 23682
23680: GO 23693
23682: POP
// tech := tech_mortar ; 3 :
23683: LD_ADDR_VAR 0 5
23687: PUSH
23688: LD_INT 41
23690: ST_TO_ADDR
23691: GO 23713
23693: LD_INT 3
23695: DOUBLE
23696: EQUAL
23697: IFTRUE 23701
23699: GO 23712
23701: POP
// tech := tech_bazooka ; end ;
23702: LD_ADDR_VAR 0 5
23706: PUSH
23707: LD_INT 44
23709: ST_TO_ADDR
23710: GO 23713
23712: POP
// if Researched ( side , tech ) then
23713: LD_VAR 0 3
23717: PPUSH
23718: LD_VAR 0 5
23722: PPUSH
23723: CALL_OW 325
23727: IFFALSE 23754
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
23729: LD_ADDR_VAR 0 2
23733: PUSH
23734: LD_INT 5
23736: PUSH
23737: LD_INT 8
23739: PUSH
23740: LD_INT 9
23742: PUSH
23743: EMPTY
23744: LIST
23745: LIST
23746: LIST
23747: PUSH
23748: LD_VAR 0 4
23752: ARRAY
23753: ST_TO_ADDR
// end ;
23754: LD_VAR 0 2
23758: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
23759: LD_INT 0
23761: PPUSH
23762: PPUSH
23763: PPUSH
// if not mines then
23764: LD_VAR 0 2
23768: NOT
23769: IFFALSE 23773
// exit ;
23771: GO 23917
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
23773: LD_ADDR_VAR 0 5
23777: PUSH
23778: LD_INT 81
23780: PUSH
23781: LD_VAR 0 1
23785: PUSH
23786: EMPTY
23787: LIST
23788: LIST
23789: PUSH
23790: LD_INT 3
23792: PUSH
23793: LD_INT 21
23795: PUSH
23796: LD_INT 3
23798: PUSH
23799: EMPTY
23800: LIST
23801: LIST
23802: PUSH
23803: EMPTY
23804: LIST
23805: LIST
23806: PUSH
23807: EMPTY
23808: LIST
23809: LIST
23810: PPUSH
23811: CALL_OW 69
23815: ST_TO_ADDR
// for i in mines do
23816: LD_ADDR_VAR 0 4
23820: PUSH
23821: LD_VAR 0 2
23825: PUSH
23826: FOR_IN
23827: IFFALSE 23915
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
23829: LD_VAR 0 4
23833: PUSH
23834: LD_INT 1
23836: ARRAY
23837: PPUSH
23838: LD_VAR 0 4
23842: PUSH
23843: LD_INT 2
23845: ARRAY
23846: PPUSH
23847: CALL_OW 458
23851: NOT
23852: IFFALSE 23856
// continue ;
23854: GO 23826
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
23856: LD_VAR 0 4
23860: PUSH
23861: LD_INT 1
23863: ARRAY
23864: PPUSH
23865: LD_VAR 0 4
23869: PUSH
23870: LD_INT 2
23872: ARRAY
23873: PPUSH
23874: CALL_OW 428
23878: PUSH
23879: LD_VAR 0 5
23883: IN
23884: IFFALSE 23913
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
23886: LD_VAR 0 4
23890: PUSH
23891: LD_INT 1
23893: ARRAY
23894: PPUSH
23895: LD_VAR 0 4
23899: PUSH
23900: LD_INT 2
23902: ARRAY
23903: PPUSH
23904: LD_VAR 0 1
23908: PPUSH
23909: CALL_OW 456
// end ;
23913: GO 23826
23915: POP
23916: POP
// end ;
23917: LD_VAR 0 3
23921: RET
// export function Count ( array ) ; begin
23922: LD_INT 0
23924: PPUSH
// result := array + 0 ;
23925: LD_ADDR_VAR 0 2
23929: PUSH
23930: LD_VAR 0 1
23934: PUSH
23935: LD_INT 0
23937: PLUS
23938: ST_TO_ADDR
// end ;
23939: LD_VAR 0 2
23943: RET
// export function IsEmpty ( building ) ; begin
23944: LD_INT 0
23946: PPUSH
// if not building then
23947: LD_VAR 0 1
23951: NOT
23952: IFFALSE 23956
// exit ;
23954: GO 23999
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
23956: LD_ADDR_VAR 0 2
23960: PUSH
23961: LD_VAR 0 1
23965: PUSH
23966: LD_INT 22
23968: PUSH
23969: LD_VAR 0 1
23973: PPUSH
23974: CALL_OW 255
23978: PUSH
23979: EMPTY
23980: LIST
23981: LIST
23982: PUSH
23983: LD_INT 58
23985: PUSH
23986: EMPTY
23987: LIST
23988: PUSH
23989: EMPTY
23990: LIST
23991: LIST
23992: PPUSH
23993: CALL_OW 69
23997: IN
23998: ST_TO_ADDR
// end ;
23999: LD_VAR 0 2
24003: RET
// export function IsNotFull ( building ) ; var places ; begin
24004: LD_INT 0
24006: PPUSH
24007: PPUSH
// if not building then
24008: LD_VAR 0 1
24012: NOT
24013: IFFALSE 24017
// exit ;
24015: GO 24045
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
24017: LD_ADDR_VAR 0 2
24021: PUSH
24022: LD_VAR 0 1
24026: PPUSH
24027: LD_INT 3
24029: PUSH
24030: LD_INT 62
24032: PUSH
24033: EMPTY
24034: LIST
24035: PUSH
24036: EMPTY
24037: LIST
24038: LIST
24039: PPUSH
24040: CALL_OW 72
24044: ST_TO_ADDR
// end ;
24045: LD_VAR 0 2
24049: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
24050: LD_INT 0
24052: PPUSH
24053: PPUSH
24054: PPUSH
24055: PPUSH
// tmp := [ ] ;
24056: LD_ADDR_VAR 0 3
24060: PUSH
24061: EMPTY
24062: ST_TO_ADDR
// list := [ ] ;
24063: LD_ADDR_VAR 0 5
24067: PUSH
24068: EMPTY
24069: ST_TO_ADDR
// for i = 16 to 25 do
24070: LD_ADDR_VAR 0 4
24074: PUSH
24075: DOUBLE
24076: LD_INT 16
24078: DEC
24079: ST_TO_ADDR
24080: LD_INT 25
24082: PUSH
24083: FOR_TO
24084: IFFALSE 24157
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
24086: LD_ADDR_VAR 0 3
24090: PUSH
24091: LD_VAR 0 3
24095: PUSH
24096: LD_INT 22
24098: PUSH
24099: LD_VAR 0 1
24103: PPUSH
24104: CALL_OW 255
24108: PUSH
24109: EMPTY
24110: LIST
24111: LIST
24112: PUSH
24113: LD_INT 91
24115: PUSH
24116: LD_VAR 0 1
24120: PUSH
24121: LD_INT 6
24123: PUSH
24124: EMPTY
24125: LIST
24126: LIST
24127: LIST
24128: PUSH
24129: LD_INT 30
24131: PUSH
24132: LD_VAR 0 4
24136: PUSH
24137: EMPTY
24138: LIST
24139: LIST
24140: PUSH
24141: EMPTY
24142: LIST
24143: LIST
24144: LIST
24145: PUSH
24146: EMPTY
24147: LIST
24148: PPUSH
24149: CALL_OW 69
24153: ADD
24154: ST_TO_ADDR
24155: GO 24083
24157: POP
24158: POP
// for i = 1 to tmp do
24159: LD_ADDR_VAR 0 4
24163: PUSH
24164: DOUBLE
24165: LD_INT 1
24167: DEC
24168: ST_TO_ADDR
24169: LD_VAR 0 3
24173: PUSH
24174: FOR_TO
24175: IFFALSE 24263
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
24177: LD_ADDR_VAR 0 5
24181: PUSH
24182: LD_VAR 0 5
24186: PUSH
24187: LD_VAR 0 3
24191: PUSH
24192: LD_VAR 0 4
24196: ARRAY
24197: PPUSH
24198: CALL_OW 266
24202: PUSH
24203: LD_VAR 0 3
24207: PUSH
24208: LD_VAR 0 4
24212: ARRAY
24213: PPUSH
24214: CALL_OW 250
24218: PUSH
24219: LD_VAR 0 3
24223: PUSH
24224: LD_VAR 0 4
24228: ARRAY
24229: PPUSH
24230: CALL_OW 251
24234: PUSH
24235: LD_VAR 0 3
24239: PUSH
24240: LD_VAR 0 4
24244: ARRAY
24245: PPUSH
24246: CALL_OW 254
24250: PUSH
24251: EMPTY
24252: LIST
24253: LIST
24254: LIST
24255: LIST
24256: PUSH
24257: EMPTY
24258: LIST
24259: ADD
24260: ST_TO_ADDR
24261: GO 24174
24263: POP
24264: POP
// result := list ;
24265: LD_ADDR_VAR 0 2
24269: PUSH
24270: LD_VAR 0 5
24274: ST_TO_ADDR
// end ;
24275: LD_VAR 0 2
24279: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
24280: LD_INT 0
24282: PPUSH
24283: PPUSH
24284: PPUSH
24285: PPUSH
24286: PPUSH
24287: PPUSH
24288: PPUSH
// if not factory then
24289: LD_VAR 0 1
24293: NOT
24294: IFFALSE 24298
// exit ;
24296: GO 24901
// if control = control_apeman then
24298: LD_VAR 0 4
24302: PUSH
24303: LD_INT 5
24305: EQUAL
24306: IFFALSE 24415
// begin tmp := UnitsInside ( factory ) ;
24308: LD_ADDR_VAR 0 8
24312: PUSH
24313: LD_VAR 0 1
24317: PPUSH
24318: CALL_OW 313
24322: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
24323: LD_VAR 0 8
24327: PPUSH
24328: LD_INT 25
24330: PUSH
24331: LD_INT 12
24333: PUSH
24334: EMPTY
24335: LIST
24336: LIST
24337: PPUSH
24338: CALL_OW 72
24342: NOT
24343: IFFALSE 24353
// control := control_manual ;
24345: LD_ADDR_VAR 0 4
24349: PUSH
24350: LD_INT 1
24352: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
24353: LD_ADDR_VAR 0 8
24357: PUSH
24358: LD_VAR 0 1
24362: PPUSH
24363: CALL 24050 0 1
24367: ST_TO_ADDR
// if tmp then
24368: LD_VAR 0 8
24372: IFFALSE 24415
// begin for i in tmp do
24374: LD_ADDR_VAR 0 7
24378: PUSH
24379: LD_VAR 0 8
24383: PUSH
24384: FOR_IN
24385: IFFALSE 24413
// if i [ 1 ] = b_ext_radio then
24387: LD_VAR 0 7
24391: PUSH
24392: LD_INT 1
24394: ARRAY
24395: PUSH
24396: LD_INT 22
24398: EQUAL
24399: IFFALSE 24411
// begin control := control_remote ;
24401: LD_ADDR_VAR 0 4
24405: PUSH
24406: LD_INT 2
24408: ST_TO_ADDR
// break ;
24409: GO 24413
// end ;
24411: GO 24384
24413: POP
24414: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
24415: LD_VAR 0 1
24419: PPUSH
24420: LD_VAR 0 2
24424: PPUSH
24425: LD_VAR 0 3
24429: PPUSH
24430: LD_VAR 0 4
24434: PPUSH
24435: LD_VAR 0 5
24439: PPUSH
24440: CALL_OW 448
24444: IFFALSE 24479
// begin result := [ chassis , engine , control , weapon ] ;
24446: LD_ADDR_VAR 0 6
24450: PUSH
24451: LD_VAR 0 2
24455: PUSH
24456: LD_VAR 0 3
24460: PUSH
24461: LD_VAR 0 4
24465: PUSH
24466: LD_VAR 0 5
24470: PUSH
24471: EMPTY
24472: LIST
24473: LIST
24474: LIST
24475: LIST
24476: ST_TO_ADDR
// exit ;
24477: GO 24901
// end ; _chassis := AvailableChassisList ( factory ) ;
24479: LD_ADDR_VAR 0 9
24483: PUSH
24484: LD_VAR 0 1
24488: PPUSH
24489: CALL_OW 475
24493: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
24494: LD_ADDR_VAR 0 11
24498: PUSH
24499: LD_VAR 0 1
24503: PPUSH
24504: CALL_OW 476
24508: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
24509: LD_ADDR_VAR 0 12
24513: PUSH
24514: LD_VAR 0 1
24518: PPUSH
24519: CALL_OW 477
24523: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
24524: LD_ADDR_VAR 0 10
24528: PUSH
24529: LD_VAR 0 1
24533: PPUSH
24534: CALL_OW 478
24538: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
24539: LD_VAR 0 9
24543: NOT
24544: IFTRUE 24553
24546: PUSH
24547: LD_VAR 0 11
24551: NOT
24552: OR
24553: IFTRUE 24562
24555: PUSH
24556: LD_VAR 0 12
24560: NOT
24561: OR
24562: IFTRUE 24571
24564: PUSH
24565: LD_VAR 0 10
24569: NOT
24570: OR
24571: IFFALSE 24606
// begin result := [ chassis , engine , control , weapon ] ;
24573: LD_ADDR_VAR 0 6
24577: PUSH
24578: LD_VAR 0 2
24582: PUSH
24583: LD_VAR 0 3
24587: PUSH
24588: LD_VAR 0 4
24592: PUSH
24593: LD_VAR 0 5
24597: PUSH
24598: EMPTY
24599: LIST
24600: LIST
24601: LIST
24602: LIST
24603: ST_TO_ADDR
// exit ;
24604: GO 24901
// end ; if not chassis in _chassis then
24606: LD_VAR 0 2
24610: PUSH
24611: LD_VAR 0 9
24615: IN
24616: NOT
24617: IFFALSE 24643
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
24619: LD_ADDR_VAR 0 2
24623: PUSH
24624: LD_VAR 0 9
24628: PUSH
24629: LD_INT 1
24631: PPUSH
24632: LD_VAR 0 9
24636: PPUSH
24637: CALL_OW 12
24641: ARRAY
24642: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
24643: LD_VAR 0 2
24647: PPUSH
24648: LD_VAR 0 3
24652: PPUSH
24653: CALL 24906 0 2
24657: NOT
24658: IFFALSE 24719
// repeat engine := _engine [ 1 ] ;
24660: LD_ADDR_VAR 0 3
24664: PUSH
24665: LD_VAR 0 11
24669: PUSH
24670: LD_INT 1
24672: ARRAY
24673: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
24674: LD_ADDR_VAR 0 11
24678: PUSH
24679: LD_VAR 0 11
24683: PPUSH
24684: LD_INT 1
24686: PPUSH
24687: CALL_OW 3
24691: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
24692: LD_VAR 0 2
24696: PPUSH
24697: LD_VAR 0 3
24701: PPUSH
24702: CALL 24906 0 2
24706: IFTRUE 24717
24708: PUSH
24709: LD_VAR 0 11
24713: PUSH
24714: EMPTY
24715: EQUAL
24716: OR
24717: IFFALSE 24660
// if not control in _control then
24719: LD_VAR 0 4
24723: PUSH
24724: LD_VAR 0 12
24728: IN
24729: NOT
24730: IFFALSE 24756
// control := _control [ rand ( 1 , _control ) ] ;
24732: LD_ADDR_VAR 0 4
24736: PUSH
24737: LD_VAR 0 12
24741: PUSH
24742: LD_INT 1
24744: PPUSH
24745: LD_VAR 0 12
24749: PPUSH
24750: CALL_OW 12
24754: ARRAY
24755: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
24756: LD_VAR 0 2
24760: PPUSH
24761: LD_VAR 0 5
24765: PPUSH
24766: CALL 25128 0 2
24770: NOT
24771: IFFALSE 24832
// repeat weapon := _weapon [ 1 ] ;
24773: LD_ADDR_VAR 0 5
24777: PUSH
24778: LD_VAR 0 10
24782: PUSH
24783: LD_INT 1
24785: ARRAY
24786: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
24787: LD_ADDR_VAR 0 10
24791: PUSH
24792: LD_VAR 0 10
24796: PPUSH
24797: LD_INT 1
24799: PPUSH
24800: CALL_OW 3
24804: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
24805: LD_VAR 0 2
24809: PPUSH
24810: LD_VAR 0 5
24814: PPUSH
24815: CALL 25128 0 2
24819: IFTRUE 24830
24821: PUSH
24822: LD_VAR 0 10
24826: PUSH
24827: EMPTY
24828: EQUAL
24829: OR
24830: IFFALSE 24773
// result := [ ] ;
24832: LD_ADDR_VAR 0 6
24836: PUSH
24837: EMPTY
24838: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
24839: LD_VAR 0 1
24843: PPUSH
24844: LD_VAR 0 2
24848: PPUSH
24849: LD_VAR 0 3
24853: PPUSH
24854: LD_VAR 0 4
24858: PPUSH
24859: LD_VAR 0 5
24863: PPUSH
24864: CALL_OW 448
24868: IFFALSE 24901
// result := [ chassis , engine , control , weapon ] ;
24870: LD_ADDR_VAR 0 6
24874: PUSH
24875: LD_VAR 0 2
24879: PUSH
24880: LD_VAR 0 3
24884: PUSH
24885: LD_VAR 0 4
24889: PUSH
24890: LD_VAR 0 5
24894: PUSH
24895: EMPTY
24896: LIST
24897: LIST
24898: LIST
24899: LIST
24900: ST_TO_ADDR
// end ;
24901: LD_VAR 0 6
24905: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
24906: LD_INT 0
24908: PPUSH
// if not chassis or not engine then
24909: LD_VAR 0 1
24913: NOT
24914: IFTRUE 24923
24916: PUSH
24917: LD_VAR 0 2
24921: NOT
24922: OR
24923: IFFALSE 24927
// exit ;
24925: GO 25123
// case engine of engine_solar :
24927: LD_VAR 0 2
24931: PUSH
24932: LD_INT 2
24934: DOUBLE
24935: EQUAL
24936: IFTRUE 24940
24938: GO 24978
24940: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
24941: LD_ADDR_VAR 0 3
24945: PUSH
24946: LD_INT 11
24948: PUSH
24949: LD_INT 12
24951: PUSH
24952: LD_INT 13
24954: PUSH
24955: LD_INT 14
24957: PUSH
24958: LD_INT 1
24960: PUSH
24961: LD_INT 2
24963: PUSH
24964: LD_INT 3
24966: PUSH
24967: EMPTY
24968: LIST
24969: LIST
24970: LIST
24971: LIST
24972: LIST
24973: LIST
24974: LIST
24975: ST_TO_ADDR
24976: GO 25107
24978: LD_INT 1
24980: DOUBLE
24981: EQUAL
24982: IFTRUE 24986
24984: GO 25048
24986: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
24987: LD_ADDR_VAR 0 3
24991: PUSH
24992: LD_INT 11
24994: PUSH
24995: LD_INT 12
24997: PUSH
24998: LD_INT 13
25000: PUSH
25001: LD_INT 14
25003: PUSH
25004: LD_INT 1
25006: PUSH
25007: LD_INT 2
25009: PUSH
25010: LD_INT 3
25012: PUSH
25013: LD_INT 4
25015: PUSH
25016: LD_INT 5
25018: PUSH
25019: LD_INT 21
25021: PUSH
25022: LD_INT 23
25024: PUSH
25025: LD_INT 22
25027: PUSH
25028: LD_INT 24
25030: PUSH
25031: EMPTY
25032: LIST
25033: LIST
25034: LIST
25035: LIST
25036: LIST
25037: LIST
25038: LIST
25039: LIST
25040: LIST
25041: LIST
25042: LIST
25043: LIST
25044: LIST
25045: ST_TO_ADDR
25046: GO 25107
25048: LD_INT 3
25050: DOUBLE
25051: EQUAL
25052: IFTRUE 25056
25054: GO 25106
25056: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
25057: LD_ADDR_VAR 0 3
25061: PUSH
25062: LD_INT 13
25064: PUSH
25065: LD_INT 14
25067: PUSH
25068: LD_INT 2
25070: PUSH
25071: LD_INT 3
25073: PUSH
25074: LD_INT 4
25076: PUSH
25077: LD_INT 5
25079: PUSH
25080: LD_INT 21
25082: PUSH
25083: LD_INT 22
25085: PUSH
25086: LD_INT 23
25088: PUSH
25089: LD_INT 24
25091: PUSH
25092: EMPTY
25093: LIST
25094: LIST
25095: LIST
25096: LIST
25097: LIST
25098: LIST
25099: LIST
25100: LIST
25101: LIST
25102: LIST
25103: ST_TO_ADDR
25104: GO 25107
25106: POP
// result := ( chassis in result ) ;
25107: LD_ADDR_VAR 0 3
25111: PUSH
25112: LD_VAR 0 1
25116: PUSH
25117: LD_VAR 0 3
25121: IN
25122: ST_TO_ADDR
// end ;
25123: LD_VAR 0 3
25127: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
25128: LD_INT 0
25130: PPUSH
// if not chassis or not weapon then
25131: LD_VAR 0 1
25135: NOT
25136: IFTRUE 25145
25138: PUSH
25139: LD_VAR 0 2
25143: NOT
25144: OR
25145: IFFALSE 25149
// exit ;
25147: GO 26209
// case weapon of us_machine_gun :
25149: LD_VAR 0 2
25153: PUSH
25154: LD_INT 2
25156: DOUBLE
25157: EQUAL
25158: IFTRUE 25162
25160: GO 25192
25162: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
25163: LD_ADDR_VAR 0 3
25167: PUSH
25168: LD_INT 1
25170: PUSH
25171: LD_INT 2
25173: PUSH
25174: LD_INT 3
25176: PUSH
25177: LD_INT 4
25179: PUSH
25180: LD_INT 5
25182: PUSH
25183: EMPTY
25184: LIST
25185: LIST
25186: LIST
25187: LIST
25188: LIST
25189: ST_TO_ADDR
25190: GO 26193
25192: LD_INT 3
25194: DOUBLE
25195: EQUAL
25196: IFTRUE 25200
25198: GO 25230
25200: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
25201: LD_ADDR_VAR 0 3
25205: PUSH
25206: LD_INT 1
25208: PUSH
25209: LD_INT 2
25211: PUSH
25212: LD_INT 3
25214: PUSH
25215: LD_INT 4
25217: PUSH
25218: LD_INT 5
25220: PUSH
25221: EMPTY
25222: LIST
25223: LIST
25224: LIST
25225: LIST
25226: LIST
25227: ST_TO_ADDR
25228: GO 26193
25230: LD_INT 11
25232: DOUBLE
25233: EQUAL
25234: IFTRUE 25238
25236: GO 25268
25238: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
25239: LD_ADDR_VAR 0 3
25243: PUSH
25244: LD_INT 1
25246: PUSH
25247: LD_INT 2
25249: PUSH
25250: LD_INT 3
25252: PUSH
25253: LD_INT 4
25255: PUSH
25256: LD_INT 5
25258: PUSH
25259: EMPTY
25260: LIST
25261: LIST
25262: LIST
25263: LIST
25264: LIST
25265: ST_TO_ADDR
25266: GO 26193
25268: LD_INT 4
25270: DOUBLE
25271: EQUAL
25272: IFTRUE 25276
25274: GO 25302
25276: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
25277: LD_ADDR_VAR 0 3
25281: PUSH
25282: LD_INT 2
25284: PUSH
25285: LD_INT 3
25287: PUSH
25288: LD_INT 4
25290: PUSH
25291: LD_INT 5
25293: PUSH
25294: EMPTY
25295: LIST
25296: LIST
25297: LIST
25298: LIST
25299: ST_TO_ADDR
25300: GO 26193
25302: LD_INT 5
25304: DOUBLE
25305: EQUAL
25306: IFTRUE 25310
25308: GO 25336
25310: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
25311: LD_ADDR_VAR 0 3
25315: PUSH
25316: LD_INT 2
25318: PUSH
25319: LD_INT 3
25321: PUSH
25322: LD_INT 4
25324: PUSH
25325: LD_INT 5
25327: PUSH
25328: EMPTY
25329: LIST
25330: LIST
25331: LIST
25332: LIST
25333: ST_TO_ADDR
25334: GO 26193
25336: LD_INT 9
25338: DOUBLE
25339: EQUAL
25340: IFTRUE 25344
25342: GO 25370
25344: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
25345: LD_ADDR_VAR 0 3
25349: PUSH
25350: LD_INT 2
25352: PUSH
25353: LD_INT 3
25355: PUSH
25356: LD_INT 4
25358: PUSH
25359: LD_INT 5
25361: PUSH
25362: EMPTY
25363: LIST
25364: LIST
25365: LIST
25366: LIST
25367: ST_TO_ADDR
25368: GO 26193
25370: LD_INT 7
25372: DOUBLE
25373: EQUAL
25374: IFTRUE 25378
25376: GO 25404
25378: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
25379: LD_ADDR_VAR 0 3
25383: PUSH
25384: LD_INT 2
25386: PUSH
25387: LD_INT 3
25389: PUSH
25390: LD_INT 4
25392: PUSH
25393: LD_INT 5
25395: PUSH
25396: EMPTY
25397: LIST
25398: LIST
25399: LIST
25400: LIST
25401: ST_TO_ADDR
25402: GO 26193
25404: LD_INT 12
25406: DOUBLE
25407: EQUAL
25408: IFTRUE 25412
25410: GO 25438
25412: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
25413: LD_ADDR_VAR 0 3
25417: PUSH
25418: LD_INT 2
25420: PUSH
25421: LD_INT 3
25423: PUSH
25424: LD_INT 4
25426: PUSH
25427: LD_INT 5
25429: PUSH
25430: EMPTY
25431: LIST
25432: LIST
25433: LIST
25434: LIST
25435: ST_TO_ADDR
25436: GO 26193
25438: LD_INT 13
25440: DOUBLE
25441: EQUAL
25442: IFTRUE 25446
25444: GO 25472
25446: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
25447: LD_ADDR_VAR 0 3
25451: PUSH
25452: LD_INT 2
25454: PUSH
25455: LD_INT 3
25457: PUSH
25458: LD_INT 4
25460: PUSH
25461: LD_INT 5
25463: PUSH
25464: EMPTY
25465: LIST
25466: LIST
25467: LIST
25468: LIST
25469: ST_TO_ADDR
25470: GO 26193
25472: LD_INT 14
25474: DOUBLE
25475: EQUAL
25476: IFTRUE 25480
25478: GO 25498
25480: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
25481: LD_ADDR_VAR 0 3
25485: PUSH
25486: LD_INT 4
25488: PUSH
25489: LD_INT 5
25491: PUSH
25492: EMPTY
25493: LIST
25494: LIST
25495: ST_TO_ADDR
25496: GO 26193
25498: LD_INT 6
25500: DOUBLE
25501: EQUAL
25502: IFTRUE 25506
25504: GO 25524
25506: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
25507: LD_ADDR_VAR 0 3
25511: PUSH
25512: LD_INT 4
25514: PUSH
25515: LD_INT 5
25517: PUSH
25518: EMPTY
25519: LIST
25520: LIST
25521: ST_TO_ADDR
25522: GO 26193
25524: LD_INT 10
25526: DOUBLE
25527: EQUAL
25528: IFTRUE 25532
25530: GO 25550
25532: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
25533: LD_ADDR_VAR 0 3
25537: PUSH
25538: LD_INT 4
25540: PUSH
25541: LD_INT 5
25543: PUSH
25544: EMPTY
25545: LIST
25546: LIST
25547: ST_TO_ADDR
25548: GO 26193
25550: LD_INT 22
25552: DOUBLE
25553: EQUAL
25554: IFTRUE 25558
25556: GO 25584
25558: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
25559: LD_ADDR_VAR 0 3
25563: PUSH
25564: LD_INT 11
25566: PUSH
25567: LD_INT 12
25569: PUSH
25570: LD_INT 13
25572: PUSH
25573: LD_INT 14
25575: PUSH
25576: EMPTY
25577: LIST
25578: LIST
25579: LIST
25580: LIST
25581: ST_TO_ADDR
25582: GO 26193
25584: LD_INT 23
25586: DOUBLE
25587: EQUAL
25588: IFTRUE 25592
25590: GO 25618
25592: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
25593: LD_ADDR_VAR 0 3
25597: PUSH
25598: LD_INT 11
25600: PUSH
25601: LD_INT 12
25603: PUSH
25604: LD_INT 13
25606: PUSH
25607: LD_INT 14
25609: PUSH
25610: EMPTY
25611: LIST
25612: LIST
25613: LIST
25614: LIST
25615: ST_TO_ADDR
25616: GO 26193
25618: LD_INT 24
25620: DOUBLE
25621: EQUAL
25622: IFTRUE 25626
25624: GO 25652
25626: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
25627: LD_ADDR_VAR 0 3
25631: PUSH
25632: LD_INT 11
25634: PUSH
25635: LD_INT 12
25637: PUSH
25638: LD_INT 13
25640: PUSH
25641: LD_INT 14
25643: PUSH
25644: EMPTY
25645: LIST
25646: LIST
25647: LIST
25648: LIST
25649: ST_TO_ADDR
25650: GO 26193
25652: LD_INT 30
25654: DOUBLE
25655: EQUAL
25656: IFTRUE 25660
25658: GO 25686
25660: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
25661: LD_ADDR_VAR 0 3
25665: PUSH
25666: LD_INT 11
25668: PUSH
25669: LD_INT 12
25671: PUSH
25672: LD_INT 13
25674: PUSH
25675: LD_INT 14
25677: PUSH
25678: EMPTY
25679: LIST
25680: LIST
25681: LIST
25682: LIST
25683: ST_TO_ADDR
25684: GO 26193
25686: LD_INT 25
25688: DOUBLE
25689: EQUAL
25690: IFTRUE 25694
25692: GO 25712
25694: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
25695: LD_ADDR_VAR 0 3
25699: PUSH
25700: LD_INT 13
25702: PUSH
25703: LD_INT 14
25705: PUSH
25706: EMPTY
25707: LIST
25708: LIST
25709: ST_TO_ADDR
25710: GO 26193
25712: LD_INT 27
25714: DOUBLE
25715: EQUAL
25716: IFTRUE 25720
25718: GO 25738
25720: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
25721: LD_ADDR_VAR 0 3
25725: PUSH
25726: LD_INT 13
25728: PUSH
25729: LD_INT 14
25731: PUSH
25732: EMPTY
25733: LIST
25734: LIST
25735: ST_TO_ADDR
25736: GO 26193
25738: LD_INT 92
25740: DOUBLE
25741: EQUAL
25742: IFTRUE 25746
25744: GO 25772
25746: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
25747: LD_ADDR_VAR 0 3
25751: PUSH
25752: LD_INT 11
25754: PUSH
25755: LD_INT 12
25757: PUSH
25758: LD_INT 13
25760: PUSH
25761: LD_INT 14
25763: PUSH
25764: EMPTY
25765: LIST
25766: LIST
25767: LIST
25768: LIST
25769: ST_TO_ADDR
25770: GO 26193
25772: LD_INT 28
25774: DOUBLE
25775: EQUAL
25776: IFTRUE 25780
25778: GO 25798
25780: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
25781: LD_ADDR_VAR 0 3
25785: PUSH
25786: LD_INT 13
25788: PUSH
25789: LD_INT 14
25791: PUSH
25792: EMPTY
25793: LIST
25794: LIST
25795: ST_TO_ADDR
25796: GO 26193
25798: LD_INT 29
25800: DOUBLE
25801: EQUAL
25802: IFTRUE 25806
25804: GO 25824
25806: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
25807: LD_ADDR_VAR 0 3
25811: PUSH
25812: LD_INT 13
25814: PUSH
25815: LD_INT 14
25817: PUSH
25818: EMPTY
25819: LIST
25820: LIST
25821: ST_TO_ADDR
25822: GO 26193
25824: LD_INT 31
25826: DOUBLE
25827: EQUAL
25828: IFTRUE 25832
25830: GO 25850
25832: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
25833: LD_ADDR_VAR 0 3
25837: PUSH
25838: LD_INT 13
25840: PUSH
25841: LD_INT 14
25843: PUSH
25844: EMPTY
25845: LIST
25846: LIST
25847: ST_TO_ADDR
25848: GO 26193
25850: LD_INT 26
25852: DOUBLE
25853: EQUAL
25854: IFTRUE 25858
25856: GO 25876
25858: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
25859: LD_ADDR_VAR 0 3
25863: PUSH
25864: LD_INT 13
25866: PUSH
25867: LD_INT 14
25869: PUSH
25870: EMPTY
25871: LIST
25872: LIST
25873: ST_TO_ADDR
25874: GO 26193
25876: LD_INT 42
25878: DOUBLE
25879: EQUAL
25880: IFTRUE 25884
25882: GO 25910
25884: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
25885: LD_ADDR_VAR 0 3
25889: PUSH
25890: LD_INT 21
25892: PUSH
25893: LD_INT 22
25895: PUSH
25896: LD_INT 23
25898: PUSH
25899: LD_INT 24
25901: PUSH
25902: EMPTY
25903: LIST
25904: LIST
25905: LIST
25906: LIST
25907: ST_TO_ADDR
25908: GO 26193
25910: LD_INT 43
25912: DOUBLE
25913: EQUAL
25914: IFTRUE 25918
25916: GO 25944
25918: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
25919: LD_ADDR_VAR 0 3
25923: PUSH
25924: LD_INT 21
25926: PUSH
25927: LD_INT 22
25929: PUSH
25930: LD_INT 23
25932: PUSH
25933: LD_INT 24
25935: PUSH
25936: EMPTY
25937: LIST
25938: LIST
25939: LIST
25940: LIST
25941: ST_TO_ADDR
25942: GO 26193
25944: LD_INT 44
25946: DOUBLE
25947: EQUAL
25948: IFTRUE 25952
25950: GO 25978
25952: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
25953: LD_ADDR_VAR 0 3
25957: PUSH
25958: LD_INT 21
25960: PUSH
25961: LD_INT 22
25963: PUSH
25964: LD_INT 23
25966: PUSH
25967: LD_INT 24
25969: PUSH
25970: EMPTY
25971: LIST
25972: LIST
25973: LIST
25974: LIST
25975: ST_TO_ADDR
25976: GO 26193
25978: LD_INT 45
25980: DOUBLE
25981: EQUAL
25982: IFTRUE 25986
25984: GO 26012
25986: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
25987: LD_ADDR_VAR 0 3
25991: PUSH
25992: LD_INT 21
25994: PUSH
25995: LD_INT 22
25997: PUSH
25998: LD_INT 23
26000: PUSH
26001: LD_INT 24
26003: PUSH
26004: EMPTY
26005: LIST
26006: LIST
26007: LIST
26008: LIST
26009: ST_TO_ADDR
26010: GO 26193
26012: LD_INT 49
26014: DOUBLE
26015: EQUAL
26016: IFTRUE 26020
26018: GO 26046
26020: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
26021: LD_ADDR_VAR 0 3
26025: PUSH
26026: LD_INT 21
26028: PUSH
26029: LD_INT 22
26031: PUSH
26032: LD_INT 23
26034: PUSH
26035: LD_INT 24
26037: PUSH
26038: EMPTY
26039: LIST
26040: LIST
26041: LIST
26042: LIST
26043: ST_TO_ADDR
26044: GO 26193
26046: LD_INT 51
26048: DOUBLE
26049: EQUAL
26050: IFTRUE 26054
26052: GO 26080
26054: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
26055: LD_ADDR_VAR 0 3
26059: PUSH
26060: LD_INT 21
26062: PUSH
26063: LD_INT 22
26065: PUSH
26066: LD_INT 23
26068: PUSH
26069: LD_INT 24
26071: PUSH
26072: EMPTY
26073: LIST
26074: LIST
26075: LIST
26076: LIST
26077: ST_TO_ADDR
26078: GO 26193
26080: LD_INT 52
26082: DOUBLE
26083: EQUAL
26084: IFTRUE 26088
26086: GO 26114
26088: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
26089: LD_ADDR_VAR 0 3
26093: PUSH
26094: LD_INT 21
26096: PUSH
26097: LD_INT 22
26099: PUSH
26100: LD_INT 23
26102: PUSH
26103: LD_INT 24
26105: PUSH
26106: EMPTY
26107: LIST
26108: LIST
26109: LIST
26110: LIST
26111: ST_TO_ADDR
26112: GO 26193
26114: LD_INT 53
26116: DOUBLE
26117: EQUAL
26118: IFTRUE 26122
26120: GO 26140
26122: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
26123: LD_ADDR_VAR 0 3
26127: PUSH
26128: LD_INT 23
26130: PUSH
26131: LD_INT 24
26133: PUSH
26134: EMPTY
26135: LIST
26136: LIST
26137: ST_TO_ADDR
26138: GO 26193
26140: LD_INT 46
26142: DOUBLE
26143: EQUAL
26144: IFTRUE 26148
26146: GO 26166
26148: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
26149: LD_ADDR_VAR 0 3
26153: PUSH
26154: LD_INT 23
26156: PUSH
26157: LD_INT 24
26159: PUSH
26160: EMPTY
26161: LIST
26162: LIST
26163: ST_TO_ADDR
26164: GO 26193
26166: LD_INT 47
26168: DOUBLE
26169: EQUAL
26170: IFTRUE 26174
26172: GO 26192
26174: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
26175: LD_ADDR_VAR 0 3
26179: PUSH
26180: LD_INT 23
26182: PUSH
26183: LD_INT 24
26185: PUSH
26186: EMPTY
26187: LIST
26188: LIST
26189: ST_TO_ADDR
26190: GO 26193
26192: POP
// result := ( chassis in result ) ;
26193: LD_ADDR_VAR 0 3
26197: PUSH
26198: LD_VAR 0 1
26202: PUSH
26203: LD_VAR 0 3
26207: IN
26208: ST_TO_ADDR
// end ;
26209: LD_VAR 0 3
26213: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
26214: LD_INT 0
26216: PPUSH
26217: PPUSH
26218: PPUSH
26219: PPUSH
26220: PPUSH
26221: PPUSH
26222: PPUSH
// result := array ;
26223: LD_ADDR_VAR 0 5
26227: PUSH
26228: LD_VAR 0 1
26232: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
26233: LD_VAR 0 1
26237: NOT
26238: IFTRUE 26247
26240: PUSH
26241: LD_VAR 0 2
26245: NOT
26246: OR
26247: IFTRUE 26256
26249: PUSH
26250: LD_VAR 0 3
26254: NOT
26255: OR
26256: IFTRUE 26270
26258: PUSH
26259: LD_VAR 0 2
26263: PUSH
26264: LD_VAR 0 1
26268: GREATER
26269: OR
26270: IFTRUE 26284
26272: PUSH
26273: LD_VAR 0 3
26277: PUSH
26278: LD_VAR 0 1
26282: GREATER
26283: OR
26284: IFFALSE 26288
// exit ;
26286: GO 26584
// if direction then
26288: LD_VAR 0 4
26292: IFFALSE 26356
// begin d := 1 ;
26294: LD_ADDR_VAR 0 9
26298: PUSH
26299: LD_INT 1
26301: ST_TO_ADDR
// if i_from > i_to then
26302: LD_VAR 0 2
26306: PUSH
26307: LD_VAR 0 3
26311: GREATER
26312: IFFALSE 26338
// length := ( array - i_from ) + i_to else
26314: LD_ADDR_VAR 0 11
26318: PUSH
26319: LD_VAR 0 1
26323: PUSH
26324: LD_VAR 0 2
26328: MINUS
26329: PUSH
26330: LD_VAR 0 3
26334: PLUS
26335: ST_TO_ADDR
26336: GO 26354
// length := i_to - i_from ;
26338: LD_ADDR_VAR 0 11
26342: PUSH
26343: LD_VAR 0 3
26347: PUSH
26348: LD_VAR 0 2
26352: MINUS
26353: ST_TO_ADDR
// end else
26354: GO 26417
// begin d := - 1 ;
26356: LD_ADDR_VAR 0 9
26360: PUSH
26361: LD_INT 1
26363: NEG
26364: ST_TO_ADDR
// if i_from > i_to then
26365: LD_VAR 0 2
26369: PUSH
26370: LD_VAR 0 3
26374: GREATER
26375: IFFALSE 26395
// length := i_from - i_to else
26377: LD_ADDR_VAR 0 11
26381: PUSH
26382: LD_VAR 0 2
26386: PUSH
26387: LD_VAR 0 3
26391: MINUS
26392: ST_TO_ADDR
26393: GO 26417
// length := ( array - i_to ) + i_from ;
26395: LD_ADDR_VAR 0 11
26399: PUSH
26400: LD_VAR 0 1
26404: PUSH
26405: LD_VAR 0 3
26409: MINUS
26410: PUSH
26411: LD_VAR 0 2
26415: PLUS
26416: ST_TO_ADDR
// end ; if not length then
26417: LD_VAR 0 11
26421: NOT
26422: IFFALSE 26426
// exit ;
26424: GO 26584
// tmp := array ;
26426: LD_ADDR_VAR 0 10
26430: PUSH
26431: LD_VAR 0 1
26435: ST_TO_ADDR
// for i = 1 to length do
26436: LD_ADDR_VAR 0 6
26440: PUSH
26441: DOUBLE
26442: LD_INT 1
26444: DEC
26445: ST_TO_ADDR
26446: LD_VAR 0 11
26450: PUSH
26451: FOR_TO
26452: IFFALSE 26572
// begin for j = 1 to array do
26454: LD_ADDR_VAR 0 7
26458: PUSH
26459: DOUBLE
26460: LD_INT 1
26462: DEC
26463: ST_TO_ADDR
26464: LD_VAR 0 1
26468: PUSH
26469: FOR_TO
26470: IFFALSE 26558
// begin k := j + d ;
26472: LD_ADDR_VAR 0 8
26476: PUSH
26477: LD_VAR 0 7
26481: PUSH
26482: LD_VAR 0 9
26486: PLUS
26487: ST_TO_ADDR
// if k > array then
26488: LD_VAR 0 8
26492: PUSH
26493: LD_VAR 0 1
26497: GREATER
26498: IFFALSE 26508
// k := 1 ;
26500: LD_ADDR_VAR 0 8
26504: PUSH
26505: LD_INT 1
26507: ST_TO_ADDR
// if not k then
26508: LD_VAR 0 8
26512: NOT
26513: IFFALSE 26525
// k := array ;
26515: LD_ADDR_VAR 0 8
26519: PUSH
26520: LD_VAR 0 1
26524: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
26525: LD_ADDR_VAR 0 10
26529: PUSH
26530: LD_VAR 0 10
26534: PPUSH
26535: LD_VAR 0 8
26539: PPUSH
26540: LD_VAR 0 1
26544: PUSH
26545: LD_VAR 0 7
26549: ARRAY
26550: PPUSH
26551: CALL_OW 1
26555: ST_TO_ADDR
// end ;
26556: GO 26469
26558: POP
26559: POP
// array := tmp ;
26560: LD_ADDR_VAR 0 1
26564: PUSH
26565: LD_VAR 0 10
26569: ST_TO_ADDR
// end ;
26570: GO 26451
26572: POP
26573: POP
// result := array ;
26574: LD_ADDR_VAR 0 5
26578: PUSH
26579: LD_VAR 0 1
26583: ST_TO_ADDR
// end ;
26584: LD_VAR 0 5
26588: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
26589: LD_INT 0
26591: PPUSH
26592: PPUSH
// result := 0 ;
26593: LD_ADDR_VAR 0 3
26597: PUSH
26598: LD_INT 0
26600: ST_TO_ADDR
// if not array or not value in array then
26601: LD_VAR 0 1
26605: NOT
26606: IFTRUE 26621
26608: PUSH
26609: LD_VAR 0 2
26613: PUSH
26614: LD_VAR 0 1
26618: IN
26619: NOT
26620: OR
26621: IFFALSE 26625
// exit ;
26623: GO 26679
// for i = 1 to array do
26625: LD_ADDR_VAR 0 4
26629: PUSH
26630: DOUBLE
26631: LD_INT 1
26633: DEC
26634: ST_TO_ADDR
26635: LD_VAR 0 1
26639: PUSH
26640: FOR_TO
26641: IFFALSE 26677
// if value = array [ i ] then
26643: LD_VAR 0 2
26647: PUSH
26648: LD_VAR 0 1
26652: PUSH
26653: LD_VAR 0 4
26657: ARRAY
26658: EQUAL
26659: IFFALSE 26675
// begin result := i ;
26661: LD_ADDR_VAR 0 3
26665: PUSH
26666: LD_VAR 0 4
26670: ST_TO_ADDR
// exit ;
26671: POP
26672: POP
26673: GO 26679
// end ;
26675: GO 26640
26677: POP
26678: POP
// end ;
26679: LD_VAR 0 3
26683: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
26684: LD_INT 0
26686: PPUSH
// vc_chassis := chassis ;
26687: LD_ADDR_OWVAR 37
26691: PUSH
26692: LD_VAR 0 1
26696: ST_TO_ADDR
// vc_engine := engine ;
26697: LD_ADDR_OWVAR 39
26701: PUSH
26702: LD_VAR 0 2
26706: ST_TO_ADDR
// vc_control := control ;
26707: LD_ADDR_OWVAR 38
26711: PUSH
26712: LD_VAR 0 3
26716: ST_TO_ADDR
// vc_weapon := weapon ;
26717: LD_ADDR_OWVAR 40
26721: PUSH
26722: LD_VAR 0 4
26726: ST_TO_ADDR
// vc_fuel_battery := fuel ;
26727: LD_ADDR_OWVAR 41
26731: PUSH
26732: LD_VAR 0 5
26736: ST_TO_ADDR
// end ;
26737: LD_VAR 0 6
26741: RET
// export function WantPlant ( unit ) ; var task ; begin
26742: LD_INT 0
26744: PPUSH
26745: PPUSH
// result := false ;
26746: LD_ADDR_VAR 0 2
26750: PUSH
26751: LD_INT 0
26753: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
26754: LD_ADDR_VAR 0 3
26758: PUSH
26759: LD_VAR 0 1
26763: PPUSH
26764: CALL_OW 437
26768: ST_TO_ADDR
// if task then
26769: LD_VAR 0 3
26773: IFFALSE 26801
// if task [ 1 ] [ 1 ] = p then
26775: LD_VAR 0 3
26779: PUSH
26780: LD_INT 1
26782: ARRAY
26783: PUSH
26784: LD_INT 1
26786: ARRAY
26787: PUSH
26788: LD_STRING p
26790: EQUAL
26791: IFFALSE 26801
// result := true ;
26793: LD_ADDR_VAR 0 2
26797: PUSH
26798: LD_INT 1
26800: ST_TO_ADDR
// end ;
26801: LD_VAR 0 2
26805: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
26806: LD_INT 0
26808: PPUSH
26809: PPUSH
26810: PPUSH
26811: PPUSH
// if pos < 1 then
26812: LD_VAR 0 2
26816: PUSH
26817: LD_INT 1
26819: LESS
26820: IFFALSE 26824
// exit ;
26822: GO 27127
// if pos = 1 then
26824: LD_VAR 0 2
26828: PUSH
26829: LD_INT 1
26831: EQUAL
26832: IFFALSE 26865
// result := Replace ( arr , pos [ 1 ] , value ) else
26834: LD_ADDR_VAR 0 4
26838: PUSH
26839: LD_VAR 0 1
26843: PPUSH
26844: LD_VAR 0 2
26848: PUSH
26849: LD_INT 1
26851: ARRAY
26852: PPUSH
26853: LD_VAR 0 3
26857: PPUSH
26858: CALL_OW 1
26862: ST_TO_ADDR
26863: GO 27127
// begin tmp := arr ;
26865: LD_ADDR_VAR 0 6
26869: PUSH
26870: LD_VAR 0 1
26874: ST_TO_ADDR
// s_arr := [ tmp ] ;
26875: LD_ADDR_VAR 0 7
26879: PUSH
26880: LD_VAR 0 6
26884: PUSH
26885: EMPTY
26886: LIST
26887: ST_TO_ADDR
// for i = 1 to pos - 1 do
26888: LD_ADDR_VAR 0 5
26892: PUSH
26893: DOUBLE
26894: LD_INT 1
26896: DEC
26897: ST_TO_ADDR
26898: LD_VAR 0 2
26902: PUSH
26903: LD_INT 1
26905: MINUS
26906: PUSH
26907: FOR_TO
26908: IFFALSE 26953
// begin tmp := tmp [ pos [ i ] ] ;
26910: LD_ADDR_VAR 0 6
26914: PUSH
26915: LD_VAR 0 6
26919: PUSH
26920: LD_VAR 0 2
26924: PUSH
26925: LD_VAR 0 5
26929: ARRAY
26930: ARRAY
26931: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
26932: LD_ADDR_VAR 0 7
26936: PUSH
26937: LD_VAR 0 7
26941: PUSH
26942: LD_VAR 0 6
26946: PUSH
26947: EMPTY
26948: LIST
26949: ADD
26950: ST_TO_ADDR
// end ;
26951: GO 26907
26953: POP
26954: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
26955: LD_ADDR_VAR 0 6
26959: PUSH
26960: LD_VAR 0 6
26964: PPUSH
26965: LD_VAR 0 2
26969: PUSH
26970: LD_VAR 0 2
26974: ARRAY
26975: PPUSH
26976: LD_VAR 0 3
26980: PPUSH
26981: CALL_OW 1
26985: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
26986: LD_ADDR_VAR 0 7
26990: PUSH
26991: LD_VAR 0 7
26995: PPUSH
26996: LD_VAR 0 7
27000: PPUSH
27001: LD_VAR 0 6
27005: PPUSH
27006: CALL_OW 1
27010: ST_TO_ADDR
// for i = s_arr downto 2 do
27011: LD_ADDR_VAR 0 5
27015: PUSH
27016: DOUBLE
27017: LD_VAR 0 7
27021: INC
27022: ST_TO_ADDR
27023: LD_INT 2
27025: PUSH
27026: FOR_DOWNTO
27027: IFFALSE 27111
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
27029: LD_ADDR_VAR 0 6
27033: PUSH
27034: LD_VAR 0 7
27038: PUSH
27039: LD_VAR 0 5
27043: PUSH
27044: LD_INT 1
27046: MINUS
27047: ARRAY
27048: PPUSH
27049: LD_VAR 0 2
27053: PUSH
27054: LD_VAR 0 5
27058: PUSH
27059: LD_INT 1
27061: MINUS
27062: ARRAY
27063: PPUSH
27064: LD_VAR 0 7
27068: PUSH
27069: LD_VAR 0 5
27073: ARRAY
27074: PPUSH
27075: CALL_OW 1
27079: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
27080: LD_ADDR_VAR 0 7
27084: PUSH
27085: LD_VAR 0 7
27089: PPUSH
27090: LD_VAR 0 5
27094: PUSH
27095: LD_INT 1
27097: MINUS
27098: PPUSH
27099: LD_VAR 0 6
27103: PPUSH
27104: CALL_OW 1
27108: ST_TO_ADDR
// end ;
27109: GO 27026
27111: POP
27112: POP
// result := s_arr [ 1 ] ;
27113: LD_ADDR_VAR 0 4
27117: PUSH
27118: LD_VAR 0 7
27122: PUSH
27123: LD_INT 1
27125: ARRAY
27126: ST_TO_ADDR
// end ; end ;
27127: LD_VAR 0 4
27131: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
27132: LD_INT 0
27134: PPUSH
27135: PPUSH
// if not list then
27136: LD_VAR 0 1
27140: NOT
27141: IFFALSE 27145
// exit ;
27143: GO 27236
// i := list [ pos1 ] ;
27145: LD_ADDR_VAR 0 5
27149: PUSH
27150: LD_VAR 0 1
27154: PUSH
27155: LD_VAR 0 2
27159: ARRAY
27160: ST_TO_ADDR
// if not i then
27161: LD_VAR 0 5
27165: NOT
27166: IFFALSE 27170
// exit ;
27168: GO 27236
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
27170: LD_ADDR_VAR 0 1
27174: PUSH
27175: LD_VAR 0 1
27179: PPUSH
27180: LD_VAR 0 2
27184: PPUSH
27185: LD_VAR 0 1
27189: PUSH
27190: LD_VAR 0 3
27194: ARRAY
27195: PPUSH
27196: CALL_OW 1
27200: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
27201: LD_ADDR_VAR 0 1
27205: PUSH
27206: LD_VAR 0 1
27210: PPUSH
27211: LD_VAR 0 3
27215: PPUSH
27216: LD_VAR 0 5
27220: PPUSH
27221: CALL_OW 1
27225: ST_TO_ADDR
// result := list ;
27226: LD_ADDR_VAR 0 4
27230: PUSH
27231: LD_VAR 0 1
27235: ST_TO_ADDR
// end ;
27236: LD_VAR 0 4
27240: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
27241: LD_INT 0
27243: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
27244: LD_ADDR_VAR 0 5
27248: PUSH
27249: LD_VAR 0 1
27253: PPUSH
27254: CALL_OW 250
27258: PPUSH
27259: LD_VAR 0 1
27263: PPUSH
27264: CALL_OW 251
27268: PPUSH
27269: LD_VAR 0 2
27273: PPUSH
27274: LD_VAR 0 3
27278: PPUSH
27279: LD_VAR 0 4
27283: PPUSH
27284: CALL 27666 0 5
27288: ST_TO_ADDR
// end ;
27289: LD_VAR 0 5
27293: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
27294: LD_INT 0
27296: PPUSH
27297: PPUSH
27298: PPUSH
27299: PPUSH
// if not list or not unit then
27300: LD_VAR 0 2
27304: NOT
27305: IFTRUE 27314
27307: PUSH
27308: LD_VAR 0 1
27312: NOT
27313: OR
27314: IFFALSE 27318
// exit ;
27316: GO 27661
// result := [ ] ;
27318: LD_ADDR_VAR 0 5
27322: PUSH
27323: EMPTY
27324: ST_TO_ADDR
// for i in list do
27325: LD_ADDR_VAR 0 6
27329: PUSH
27330: LD_VAR 0 2
27334: PUSH
27335: FOR_IN
27336: IFFALSE 27554
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
27338: LD_ADDR_VAR 0 8
27342: PUSH
27343: LD_VAR 0 1
27347: PPUSH
27348: LD_VAR 0 6
27352: PUSH
27353: LD_INT 1
27355: ARRAY
27356: PPUSH
27357: LD_VAR 0 6
27361: PUSH
27362: LD_INT 2
27364: ARRAY
27365: PPUSH
27366: CALL_OW 297
27370: ST_TO_ADDR
// if not Count ( result ) then
27371: LD_VAR 0 5
27375: PPUSH
27376: CALL 23922 0 1
27380: NOT
27381: IFFALSE 27414
// begin result := Join ( result , [ i , tmp ] ) ;
27383: LD_ADDR_VAR 0 5
27387: PUSH
27388: LD_VAR 0 5
27392: PPUSH
27393: LD_VAR 0 6
27397: PUSH
27398: LD_VAR 0 8
27402: PUSH
27403: EMPTY
27404: LIST
27405: LIST
27406: PPUSH
27407: CALL 59854 0 2
27411: ST_TO_ADDR
// continue ;
27412: GO 27335
// end ; if result [ result ] [ 2 ] <= tmp then
27414: LD_VAR 0 5
27418: PUSH
27419: LD_VAR 0 5
27423: ARRAY
27424: PUSH
27425: LD_INT 2
27427: ARRAY
27428: PUSH
27429: LD_VAR 0 8
27433: LESSEQUAL
27434: IFFALSE 27467
// result := Join ( result , [ i , tmp ] ) else
27436: LD_ADDR_VAR 0 5
27440: PUSH
27441: LD_VAR 0 5
27445: PPUSH
27446: LD_VAR 0 6
27450: PUSH
27451: LD_VAR 0 8
27455: PUSH
27456: EMPTY
27457: LIST
27458: LIST
27459: PPUSH
27460: CALL 59854 0 2
27464: ST_TO_ADDR
27465: GO 27552
// begin for j := 1 to Count ( result ) do
27467: LD_ADDR_VAR 0 7
27471: PUSH
27472: DOUBLE
27473: LD_INT 1
27475: DEC
27476: ST_TO_ADDR
27477: LD_VAR 0 5
27481: PPUSH
27482: CALL 23922 0 1
27486: PUSH
27487: FOR_TO
27488: IFFALSE 27550
// begin if tmp < result [ j ] [ 2 ] then
27490: LD_VAR 0 8
27494: PUSH
27495: LD_VAR 0 5
27499: PUSH
27500: LD_VAR 0 7
27504: ARRAY
27505: PUSH
27506: LD_INT 2
27508: ARRAY
27509: LESS
27510: IFFALSE 27548
// begin result := Insert ( result , j , [ i , tmp ] ) ;
27512: LD_ADDR_VAR 0 5
27516: PUSH
27517: LD_VAR 0 5
27521: PPUSH
27522: LD_VAR 0 7
27526: PPUSH
27527: LD_VAR 0 6
27531: PUSH
27532: LD_VAR 0 8
27536: PUSH
27537: EMPTY
27538: LIST
27539: LIST
27540: PPUSH
27541: CALL_OW 2
27545: ST_TO_ADDR
// break ;
27546: GO 27550
// end ; end ;
27548: GO 27487
27550: POP
27551: POP
// end ; end ;
27552: GO 27335
27554: POP
27555: POP
// if result and not asc then
27556: LD_VAR 0 5
27560: IFFALSE 27569
27562: PUSH
27563: LD_VAR 0 3
27567: NOT
27568: AND
27569: IFFALSE 27586
// result := ReverseArray ( result ) ;
27571: LD_ADDR_VAR 0 5
27575: PUSH
27576: LD_VAR 0 5
27580: PPUSH
27581: CALL 54944 0 1
27585: ST_TO_ADDR
// tmp := [ ] ;
27586: LD_ADDR_VAR 0 8
27590: PUSH
27591: EMPTY
27592: ST_TO_ADDR
// if mode then
27593: LD_VAR 0 4
27597: IFFALSE 27661
// begin for i := 1 to result do
27599: LD_ADDR_VAR 0 6
27603: PUSH
27604: DOUBLE
27605: LD_INT 1
27607: DEC
27608: ST_TO_ADDR
27609: LD_VAR 0 5
27613: PUSH
27614: FOR_TO
27615: IFFALSE 27649
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
27617: LD_ADDR_VAR 0 8
27621: PUSH
27622: LD_VAR 0 8
27626: PPUSH
27627: LD_VAR 0 5
27631: PUSH
27632: LD_VAR 0 6
27636: ARRAY
27637: PUSH
27638: LD_INT 1
27640: ARRAY
27641: PPUSH
27642: CALL 59854 0 2
27646: ST_TO_ADDR
27647: GO 27614
27649: POP
27650: POP
// result := tmp ;
27651: LD_ADDR_VAR 0 5
27655: PUSH
27656: LD_VAR 0 8
27660: ST_TO_ADDR
// end ; end ;
27661: LD_VAR 0 5
27665: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
27666: LD_INT 0
27668: PPUSH
27669: PPUSH
27670: PPUSH
27671: PPUSH
// if not list then
27672: LD_VAR 0 3
27676: NOT
27677: IFFALSE 27681
// exit ;
27679: GO 28071
// result := [ ] ;
27681: LD_ADDR_VAR 0 6
27685: PUSH
27686: EMPTY
27687: ST_TO_ADDR
// for i in list do
27688: LD_ADDR_VAR 0 7
27692: PUSH
27693: LD_VAR 0 3
27697: PUSH
27698: FOR_IN
27699: IFFALSE 27901
// begin tmp := GetDistUnitXY ( i , x , y ) ;
27701: LD_ADDR_VAR 0 9
27705: PUSH
27706: LD_VAR 0 7
27710: PPUSH
27711: LD_VAR 0 1
27715: PPUSH
27716: LD_VAR 0 2
27720: PPUSH
27721: CALL_OW 297
27725: ST_TO_ADDR
// if not result then
27726: LD_VAR 0 6
27730: NOT
27731: IFFALSE 27757
// result := [ [ i , tmp ] ] else
27733: LD_ADDR_VAR 0 6
27737: PUSH
27738: LD_VAR 0 7
27742: PUSH
27743: LD_VAR 0 9
27747: PUSH
27748: EMPTY
27749: LIST
27750: LIST
27751: PUSH
27752: EMPTY
27753: LIST
27754: ST_TO_ADDR
27755: GO 27899
// begin if result [ result ] [ 2 ] <= tmp then
27757: LD_VAR 0 6
27761: PUSH
27762: LD_VAR 0 6
27766: ARRAY
27767: PUSH
27768: LD_INT 2
27770: ARRAY
27771: PUSH
27772: LD_VAR 0 9
27776: LESSEQUAL
27777: IFFALSE 27819
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
27779: LD_ADDR_VAR 0 6
27783: PUSH
27784: LD_VAR 0 6
27788: PPUSH
27789: LD_VAR 0 6
27793: PUSH
27794: LD_INT 1
27796: PLUS
27797: PPUSH
27798: LD_VAR 0 7
27802: PUSH
27803: LD_VAR 0 9
27807: PUSH
27808: EMPTY
27809: LIST
27810: LIST
27811: PPUSH
27812: CALL_OW 2
27816: ST_TO_ADDR
27817: GO 27899
// for j := 1 to result do
27819: LD_ADDR_VAR 0 8
27823: PUSH
27824: DOUBLE
27825: LD_INT 1
27827: DEC
27828: ST_TO_ADDR
27829: LD_VAR 0 6
27833: PUSH
27834: FOR_TO
27835: IFFALSE 27897
// begin if tmp < result [ j ] [ 2 ] then
27837: LD_VAR 0 9
27841: PUSH
27842: LD_VAR 0 6
27846: PUSH
27847: LD_VAR 0 8
27851: ARRAY
27852: PUSH
27853: LD_INT 2
27855: ARRAY
27856: LESS
27857: IFFALSE 27895
// begin result := Insert ( result , j , [ i , tmp ] ) ;
27859: LD_ADDR_VAR 0 6
27863: PUSH
27864: LD_VAR 0 6
27868: PPUSH
27869: LD_VAR 0 8
27873: PPUSH
27874: LD_VAR 0 7
27878: PUSH
27879: LD_VAR 0 9
27883: PUSH
27884: EMPTY
27885: LIST
27886: LIST
27887: PPUSH
27888: CALL_OW 2
27892: ST_TO_ADDR
// break ;
27893: GO 27897
// end ; end ;
27895: GO 27834
27897: POP
27898: POP
// end ; end ;
27899: GO 27698
27901: POP
27902: POP
// if result and not asc then
27903: LD_VAR 0 6
27907: IFFALSE 27916
27909: PUSH
27910: LD_VAR 0 4
27914: NOT
27915: AND
27916: IFFALSE 27991
// begin tmp := result ;
27918: LD_ADDR_VAR 0 9
27922: PUSH
27923: LD_VAR 0 6
27927: ST_TO_ADDR
// for i = tmp downto 1 do
27928: LD_ADDR_VAR 0 7
27932: PUSH
27933: DOUBLE
27934: LD_VAR 0 9
27938: INC
27939: ST_TO_ADDR
27940: LD_INT 1
27942: PUSH
27943: FOR_DOWNTO
27944: IFFALSE 27989
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
27946: LD_ADDR_VAR 0 6
27950: PUSH
27951: LD_VAR 0 6
27955: PPUSH
27956: LD_VAR 0 9
27960: PUSH
27961: LD_VAR 0 7
27965: MINUS
27966: PUSH
27967: LD_INT 1
27969: PLUS
27970: PPUSH
27971: LD_VAR 0 9
27975: PUSH
27976: LD_VAR 0 7
27980: ARRAY
27981: PPUSH
27982: CALL_OW 1
27986: ST_TO_ADDR
27987: GO 27943
27989: POP
27990: POP
// end ; tmp := [ ] ;
27991: LD_ADDR_VAR 0 9
27995: PUSH
27996: EMPTY
27997: ST_TO_ADDR
// if mode then
27998: LD_VAR 0 5
28002: IFFALSE 28071
// begin for i = 1 to result do
28004: LD_ADDR_VAR 0 7
28008: PUSH
28009: DOUBLE
28010: LD_INT 1
28012: DEC
28013: ST_TO_ADDR
28014: LD_VAR 0 6
28018: PUSH
28019: FOR_TO
28020: IFFALSE 28059
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
28022: LD_ADDR_VAR 0 9
28026: PUSH
28027: LD_VAR 0 9
28031: PPUSH
28032: LD_VAR 0 7
28036: PPUSH
28037: LD_VAR 0 6
28041: PUSH
28042: LD_VAR 0 7
28046: ARRAY
28047: PUSH
28048: LD_INT 1
28050: ARRAY
28051: PPUSH
28052: CALL_OW 1
28056: ST_TO_ADDR
28057: GO 28019
28059: POP
28060: POP
// result := tmp ;
28061: LD_ADDR_VAR 0 6
28065: PUSH
28066: LD_VAR 0 9
28070: ST_TO_ADDR
// end ; end ;
28071: LD_VAR 0 6
28075: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
28076: LD_INT 0
28078: PPUSH
28079: PPUSH
28080: PPUSH
28081: PPUSH
28082: PPUSH
28083: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
28084: LD_ADDR_VAR 0 5
28088: PUSH
28089: LD_INT 0
28091: PUSH
28092: LD_INT 0
28094: PUSH
28095: LD_INT 0
28097: PUSH
28098: EMPTY
28099: PUSH
28100: EMPTY
28101: LIST
28102: LIST
28103: LIST
28104: LIST
28105: ST_TO_ADDR
// if not x or not y then
28106: LD_VAR 0 2
28110: NOT
28111: IFTRUE 28120
28113: PUSH
28114: LD_VAR 0 3
28118: NOT
28119: OR
28120: IFFALSE 28124
// exit ;
28122: GO 29780
// if not range then
28124: LD_VAR 0 4
28128: NOT
28129: IFFALSE 28139
// range := 10 ;
28131: LD_ADDR_VAR 0 4
28135: PUSH
28136: LD_INT 10
28138: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
28139: LD_ADDR_VAR 0 8
28143: PUSH
28144: LD_INT 81
28146: PUSH
28147: LD_VAR 0 1
28151: PUSH
28152: EMPTY
28153: LIST
28154: LIST
28155: PUSH
28156: LD_INT 92
28158: PUSH
28159: LD_VAR 0 2
28163: PUSH
28164: LD_VAR 0 3
28168: PUSH
28169: LD_VAR 0 4
28173: PUSH
28174: EMPTY
28175: LIST
28176: LIST
28177: LIST
28178: LIST
28179: PUSH
28180: LD_INT 3
28182: PUSH
28183: LD_INT 21
28185: PUSH
28186: LD_INT 3
28188: PUSH
28189: EMPTY
28190: LIST
28191: LIST
28192: PUSH
28193: EMPTY
28194: LIST
28195: LIST
28196: PUSH
28197: EMPTY
28198: LIST
28199: LIST
28200: LIST
28201: PPUSH
28202: CALL_OW 69
28206: ST_TO_ADDR
// if not tmp then
28207: LD_VAR 0 8
28211: NOT
28212: IFFALSE 28216
// exit ;
28214: GO 29780
// for i in tmp do
28216: LD_ADDR_VAR 0 6
28220: PUSH
28221: LD_VAR 0 8
28225: PUSH
28226: FOR_IN
28227: IFFALSE 29755
// begin points := [ 0 , 0 , 0 ] ;
28229: LD_ADDR_VAR 0 9
28233: PUSH
28234: LD_INT 0
28236: PUSH
28237: LD_INT 0
28239: PUSH
28240: LD_INT 0
28242: PUSH
28243: EMPTY
28244: LIST
28245: LIST
28246: LIST
28247: ST_TO_ADDR
// bpoints := 1 ;
28248: LD_ADDR_VAR 0 10
28252: PUSH
28253: LD_INT 1
28255: ST_TO_ADDR
// case GetType ( i ) of unit_human :
28256: LD_VAR 0 6
28260: PPUSH
28261: CALL_OW 247
28265: PUSH
28266: LD_INT 1
28268: DOUBLE
28269: EQUAL
28270: IFTRUE 28274
28272: GO 28856
28274: POP
// begin if GetClass ( i ) = 1 then
28275: LD_VAR 0 6
28279: PPUSH
28280: CALL_OW 257
28284: PUSH
28285: LD_INT 1
28287: EQUAL
28288: IFFALSE 28309
// points := [ 10 , 5 , 3 ] ;
28290: LD_ADDR_VAR 0 9
28294: PUSH
28295: LD_INT 10
28297: PUSH
28298: LD_INT 5
28300: PUSH
28301: LD_INT 3
28303: PUSH
28304: EMPTY
28305: LIST
28306: LIST
28307: LIST
28308: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
28309: LD_VAR 0 6
28313: PPUSH
28314: CALL_OW 257
28318: PUSH
28319: LD_INT 2
28321: PUSH
28322: LD_INT 3
28324: PUSH
28325: LD_INT 4
28327: PUSH
28328: EMPTY
28329: LIST
28330: LIST
28331: LIST
28332: IN
28333: IFFALSE 28354
// points := [ 3 , 2 , 1 ] ;
28335: LD_ADDR_VAR 0 9
28339: PUSH
28340: LD_INT 3
28342: PUSH
28343: LD_INT 2
28345: PUSH
28346: LD_INT 1
28348: PUSH
28349: EMPTY
28350: LIST
28351: LIST
28352: LIST
28353: ST_TO_ADDR
// if GetClass ( i ) = 5 then
28354: LD_VAR 0 6
28358: PPUSH
28359: CALL_OW 257
28363: PUSH
28364: LD_INT 5
28366: EQUAL
28367: IFFALSE 28388
// points := [ 130 , 5 , 2 ] ;
28369: LD_ADDR_VAR 0 9
28373: PUSH
28374: LD_INT 130
28376: PUSH
28377: LD_INT 5
28379: PUSH
28380: LD_INT 2
28382: PUSH
28383: EMPTY
28384: LIST
28385: LIST
28386: LIST
28387: ST_TO_ADDR
// if GetClass ( i ) = 8 then
28388: LD_VAR 0 6
28392: PPUSH
28393: CALL_OW 257
28397: PUSH
28398: LD_INT 8
28400: EQUAL
28401: IFFALSE 28422
// points := [ 35 , 35 , 30 ] ;
28403: LD_ADDR_VAR 0 9
28407: PUSH
28408: LD_INT 35
28410: PUSH
28411: LD_INT 35
28413: PUSH
28414: LD_INT 30
28416: PUSH
28417: EMPTY
28418: LIST
28419: LIST
28420: LIST
28421: ST_TO_ADDR
// if GetClass ( i ) = 9 then
28422: LD_VAR 0 6
28426: PPUSH
28427: CALL_OW 257
28431: PUSH
28432: LD_INT 9
28434: EQUAL
28435: IFFALSE 28456
// points := [ 20 , 55 , 40 ] ;
28437: LD_ADDR_VAR 0 9
28441: PUSH
28442: LD_INT 20
28444: PUSH
28445: LD_INT 55
28447: PUSH
28448: LD_INT 40
28450: PUSH
28451: EMPTY
28452: LIST
28453: LIST
28454: LIST
28455: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
28456: LD_VAR 0 6
28460: PPUSH
28461: CALL_OW 257
28465: PUSH
28466: LD_INT 12
28468: PUSH
28469: LD_INT 16
28471: PUSH
28472: EMPTY
28473: LIST
28474: LIST
28475: IN
28476: IFFALSE 28497
// points := [ 5 , 3 , 2 ] ;
28478: LD_ADDR_VAR 0 9
28482: PUSH
28483: LD_INT 5
28485: PUSH
28486: LD_INT 3
28488: PUSH
28489: LD_INT 2
28491: PUSH
28492: EMPTY
28493: LIST
28494: LIST
28495: LIST
28496: ST_TO_ADDR
// if GetClass ( i ) = 17 then
28497: LD_VAR 0 6
28501: PPUSH
28502: CALL_OW 257
28506: PUSH
28507: LD_INT 17
28509: EQUAL
28510: IFFALSE 28531
// points := [ 100 , 50 , 75 ] ;
28512: LD_ADDR_VAR 0 9
28516: PUSH
28517: LD_INT 100
28519: PUSH
28520: LD_INT 50
28522: PUSH
28523: LD_INT 75
28525: PUSH
28526: EMPTY
28527: LIST
28528: LIST
28529: LIST
28530: ST_TO_ADDR
// if GetClass ( i ) = 15 then
28531: LD_VAR 0 6
28535: PPUSH
28536: CALL_OW 257
28540: PUSH
28541: LD_INT 15
28543: EQUAL
28544: IFFALSE 28565
// points := [ 10 , 5 , 3 ] ;
28546: LD_ADDR_VAR 0 9
28550: PUSH
28551: LD_INT 10
28553: PUSH
28554: LD_INT 5
28556: PUSH
28557: LD_INT 3
28559: PUSH
28560: EMPTY
28561: LIST
28562: LIST
28563: LIST
28564: ST_TO_ADDR
// if GetClass ( i ) = 14 then
28565: LD_VAR 0 6
28569: PPUSH
28570: CALL_OW 257
28574: PUSH
28575: LD_INT 14
28577: EQUAL
28578: IFFALSE 28599
// points := [ 10 , 0 , 0 ] ;
28580: LD_ADDR_VAR 0 9
28584: PUSH
28585: LD_INT 10
28587: PUSH
28588: LD_INT 0
28590: PUSH
28591: LD_INT 0
28593: PUSH
28594: EMPTY
28595: LIST
28596: LIST
28597: LIST
28598: ST_TO_ADDR
// if GetClass ( i ) = 11 then
28599: LD_VAR 0 6
28603: PPUSH
28604: CALL_OW 257
28608: PUSH
28609: LD_INT 11
28611: EQUAL
28612: IFFALSE 28633
// points := [ 30 , 10 , 5 ] ;
28614: LD_ADDR_VAR 0 9
28618: PUSH
28619: LD_INT 30
28621: PUSH
28622: LD_INT 10
28624: PUSH
28625: LD_INT 5
28627: PUSH
28628: EMPTY
28629: LIST
28630: LIST
28631: LIST
28632: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
28633: LD_VAR 0 1
28637: PPUSH
28638: LD_INT 5
28640: PPUSH
28641: CALL_OW 321
28645: PUSH
28646: LD_INT 2
28648: EQUAL
28649: IFFALSE 28666
// bpoints := bpoints * 1.8 ;
28651: LD_ADDR_VAR 0 10
28655: PUSH
28656: LD_VAR 0 10
28660: PUSH
28661: LD_REAL  1.80000000000000E+0000
28664: MUL
28665: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
28666: LD_VAR 0 6
28670: PPUSH
28671: CALL_OW 257
28675: PUSH
28676: LD_INT 1
28678: PUSH
28679: LD_INT 2
28681: PUSH
28682: LD_INT 3
28684: PUSH
28685: LD_INT 4
28687: PUSH
28688: EMPTY
28689: LIST
28690: LIST
28691: LIST
28692: LIST
28693: IN
28694: IFFALSE 28714
28696: PUSH
28697: LD_VAR 0 1
28701: PPUSH
28702: LD_INT 51
28704: PPUSH
28705: CALL_OW 321
28709: PUSH
28710: LD_INT 2
28712: EQUAL
28713: AND
28714: IFFALSE 28731
// bpoints := bpoints * 1.2 ;
28716: LD_ADDR_VAR 0 10
28720: PUSH
28721: LD_VAR 0 10
28725: PUSH
28726: LD_REAL  1.20000000000000E+0000
28729: MUL
28730: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
28731: LD_VAR 0 6
28735: PPUSH
28736: CALL_OW 257
28740: PUSH
28741: LD_INT 5
28743: PUSH
28744: LD_INT 7
28746: PUSH
28747: LD_INT 9
28749: PUSH
28750: EMPTY
28751: LIST
28752: LIST
28753: LIST
28754: IN
28755: IFFALSE 28775
28757: PUSH
28758: LD_VAR 0 1
28762: PPUSH
28763: LD_INT 52
28765: PPUSH
28766: CALL_OW 321
28770: PUSH
28771: LD_INT 2
28773: EQUAL
28774: AND
28775: IFFALSE 28792
// bpoints := bpoints * 1.5 ;
28777: LD_ADDR_VAR 0 10
28781: PUSH
28782: LD_VAR 0 10
28786: PUSH
28787: LD_REAL  1.50000000000000E+0000
28790: MUL
28791: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
28792: LD_VAR 0 1
28796: PPUSH
28797: LD_INT 66
28799: PPUSH
28800: CALL_OW 321
28804: PUSH
28805: LD_INT 2
28807: EQUAL
28808: IFFALSE 28825
// bpoints := bpoints * 1.1 ;
28810: LD_ADDR_VAR 0 10
28814: PUSH
28815: LD_VAR 0 10
28819: PUSH
28820: LD_REAL  1.10000000000000E+0000
28823: MUL
28824: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
28825: LD_ADDR_VAR 0 10
28829: PUSH
28830: LD_VAR 0 10
28834: PUSH
28835: LD_VAR 0 6
28839: PPUSH
28840: LD_INT 1
28842: PPUSH
28843: CALL_OW 259
28847: PUSH
28848: LD_REAL  1.15000000000000E+0000
28851: MUL
28852: MUL
28853: ST_TO_ADDR
// end ; unit_vehicle :
28854: GO 29684
28856: LD_INT 2
28858: DOUBLE
28859: EQUAL
28860: IFTRUE 28864
28862: GO 29672
28864: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
28865: LD_VAR 0 6
28869: PPUSH
28870: CALL_OW 264
28874: PUSH
28875: LD_INT 2
28877: PUSH
28878: LD_INT 42
28880: PUSH
28881: LD_INT 24
28883: PUSH
28884: EMPTY
28885: LIST
28886: LIST
28887: LIST
28888: IN
28889: IFFALSE 28910
// points := [ 25 , 5 , 3 ] ;
28891: LD_ADDR_VAR 0 9
28895: PUSH
28896: LD_INT 25
28898: PUSH
28899: LD_INT 5
28901: PUSH
28902: LD_INT 3
28904: PUSH
28905: EMPTY
28906: LIST
28907: LIST
28908: LIST
28909: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
28910: LD_VAR 0 6
28914: PPUSH
28915: CALL_OW 264
28919: PUSH
28920: LD_INT 4
28922: PUSH
28923: LD_INT 43
28925: PUSH
28926: LD_INT 25
28928: PUSH
28929: EMPTY
28930: LIST
28931: LIST
28932: LIST
28933: IN
28934: IFFALSE 28955
// points := [ 40 , 15 , 5 ] ;
28936: LD_ADDR_VAR 0 9
28940: PUSH
28941: LD_INT 40
28943: PUSH
28944: LD_INT 15
28946: PUSH
28947: LD_INT 5
28949: PUSH
28950: EMPTY
28951: LIST
28952: LIST
28953: LIST
28954: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
28955: LD_VAR 0 6
28959: PPUSH
28960: CALL_OW 264
28964: PUSH
28965: LD_INT 3
28967: PUSH
28968: LD_INT 23
28970: PUSH
28971: EMPTY
28972: LIST
28973: LIST
28974: IN
28975: IFFALSE 28996
// points := [ 7 , 25 , 8 ] ;
28977: LD_ADDR_VAR 0 9
28981: PUSH
28982: LD_INT 7
28984: PUSH
28985: LD_INT 25
28987: PUSH
28988: LD_INT 8
28990: PUSH
28991: EMPTY
28992: LIST
28993: LIST
28994: LIST
28995: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
28996: LD_VAR 0 6
29000: PPUSH
29001: CALL_OW 264
29005: PUSH
29006: LD_INT 5
29008: PUSH
29009: LD_INT 27
29011: PUSH
29012: LD_INT 44
29014: PUSH
29015: EMPTY
29016: LIST
29017: LIST
29018: LIST
29019: IN
29020: IFFALSE 29041
// points := [ 14 , 50 , 16 ] ;
29022: LD_ADDR_VAR 0 9
29026: PUSH
29027: LD_INT 14
29029: PUSH
29030: LD_INT 50
29032: PUSH
29033: LD_INT 16
29035: PUSH
29036: EMPTY
29037: LIST
29038: LIST
29039: LIST
29040: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
29041: LD_VAR 0 6
29045: PPUSH
29046: CALL_OW 264
29050: PUSH
29051: LD_INT 6
29053: PUSH
29054: LD_INT 46
29056: PUSH
29057: EMPTY
29058: LIST
29059: LIST
29060: IN
29061: IFFALSE 29082
// points := [ 32 , 120 , 70 ] ;
29063: LD_ADDR_VAR 0 9
29067: PUSH
29068: LD_INT 32
29070: PUSH
29071: LD_INT 120
29073: PUSH
29074: LD_INT 70
29076: PUSH
29077: EMPTY
29078: LIST
29079: LIST
29080: LIST
29081: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
29082: LD_VAR 0 6
29086: PPUSH
29087: CALL_OW 264
29091: PUSH
29092: LD_INT 7
29094: PUSH
29095: LD_INT 28
29097: PUSH
29098: LD_INT 45
29100: PUSH
29101: LD_INT 92
29103: PUSH
29104: EMPTY
29105: LIST
29106: LIST
29107: LIST
29108: LIST
29109: IN
29110: IFFALSE 29131
// points := [ 35 , 20 , 45 ] ;
29112: LD_ADDR_VAR 0 9
29116: PUSH
29117: LD_INT 35
29119: PUSH
29120: LD_INT 20
29122: PUSH
29123: LD_INT 45
29125: PUSH
29126: EMPTY
29127: LIST
29128: LIST
29129: LIST
29130: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
29131: LD_VAR 0 6
29135: PPUSH
29136: CALL_OW 264
29140: PUSH
29141: LD_INT 47
29143: PUSH
29144: EMPTY
29145: LIST
29146: IN
29147: IFFALSE 29168
// points := [ 67 , 45 , 75 ] ;
29149: LD_ADDR_VAR 0 9
29153: PUSH
29154: LD_INT 67
29156: PUSH
29157: LD_INT 45
29159: PUSH
29160: LD_INT 75
29162: PUSH
29163: EMPTY
29164: LIST
29165: LIST
29166: LIST
29167: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
29168: LD_VAR 0 6
29172: PPUSH
29173: CALL_OW 264
29177: PUSH
29178: LD_INT 26
29180: PUSH
29181: EMPTY
29182: LIST
29183: IN
29184: IFFALSE 29205
// points := [ 120 , 30 , 80 ] ;
29186: LD_ADDR_VAR 0 9
29190: PUSH
29191: LD_INT 120
29193: PUSH
29194: LD_INT 30
29196: PUSH
29197: LD_INT 80
29199: PUSH
29200: EMPTY
29201: LIST
29202: LIST
29203: LIST
29204: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
29205: LD_VAR 0 6
29209: PPUSH
29210: CALL_OW 264
29214: PUSH
29215: LD_INT 22
29217: PUSH
29218: EMPTY
29219: LIST
29220: IN
29221: IFFALSE 29242
// points := [ 40 , 1 , 1 ] ;
29223: LD_ADDR_VAR 0 9
29227: PUSH
29228: LD_INT 40
29230: PUSH
29231: LD_INT 1
29233: PUSH
29234: LD_INT 1
29236: PUSH
29237: EMPTY
29238: LIST
29239: LIST
29240: LIST
29241: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
29242: LD_VAR 0 6
29246: PPUSH
29247: CALL_OW 264
29251: PUSH
29252: LD_INT 29
29254: PUSH
29255: EMPTY
29256: LIST
29257: IN
29258: IFFALSE 29279
// points := [ 70 , 200 , 400 ] ;
29260: LD_ADDR_VAR 0 9
29264: PUSH
29265: LD_INT 70
29267: PUSH
29268: LD_INT 200
29270: PUSH
29271: LD_INT 400
29273: PUSH
29274: EMPTY
29275: LIST
29276: LIST
29277: LIST
29278: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
29279: LD_VAR 0 6
29283: PPUSH
29284: CALL_OW 264
29288: PUSH
29289: LD_INT 14
29291: PUSH
29292: LD_INT 53
29294: PUSH
29295: EMPTY
29296: LIST
29297: LIST
29298: IN
29299: IFFALSE 29320
// points := [ 40 , 10 , 20 ] ;
29301: LD_ADDR_VAR 0 9
29305: PUSH
29306: LD_INT 40
29308: PUSH
29309: LD_INT 10
29311: PUSH
29312: LD_INT 20
29314: PUSH
29315: EMPTY
29316: LIST
29317: LIST
29318: LIST
29319: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
29320: LD_VAR 0 6
29324: PPUSH
29325: CALL_OW 264
29329: PUSH
29330: LD_INT 9
29332: PUSH
29333: EMPTY
29334: LIST
29335: IN
29336: IFFALSE 29357
// points := [ 5 , 70 , 20 ] ;
29338: LD_ADDR_VAR 0 9
29342: PUSH
29343: LD_INT 5
29345: PUSH
29346: LD_INT 70
29348: PUSH
29349: LD_INT 20
29351: PUSH
29352: EMPTY
29353: LIST
29354: LIST
29355: LIST
29356: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
29357: LD_VAR 0 6
29361: PPUSH
29362: CALL_OW 264
29366: PUSH
29367: LD_INT 10
29369: PUSH
29370: EMPTY
29371: LIST
29372: IN
29373: IFFALSE 29394
// points := [ 35 , 110 , 70 ] ;
29375: LD_ADDR_VAR 0 9
29379: PUSH
29380: LD_INT 35
29382: PUSH
29383: LD_INT 110
29385: PUSH
29386: LD_INT 70
29388: PUSH
29389: EMPTY
29390: LIST
29391: LIST
29392: LIST
29393: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
29394: LD_VAR 0 6
29398: PPUSH
29399: CALL_OW 265
29403: PUSH
29404: LD_INT 25
29406: EQUAL
29407: IFFALSE 29428
// points := [ 80 , 65 , 100 ] ;
29409: LD_ADDR_VAR 0 9
29413: PUSH
29414: LD_INT 80
29416: PUSH
29417: LD_INT 65
29419: PUSH
29420: LD_INT 100
29422: PUSH
29423: EMPTY
29424: LIST
29425: LIST
29426: LIST
29427: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
29428: LD_VAR 0 6
29432: PPUSH
29433: CALL_OW 263
29437: PUSH
29438: LD_INT 1
29440: EQUAL
29441: IFFALSE 29476
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
29443: LD_ADDR_VAR 0 10
29447: PUSH
29448: LD_VAR 0 10
29452: PUSH
29453: LD_VAR 0 6
29457: PPUSH
29458: CALL_OW 311
29462: PPUSH
29463: LD_INT 3
29465: PPUSH
29466: CALL_OW 259
29470: PUSH
29471: LD_INT 4
29473: MUL
29474: MUL
29475: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
29476: LD_VAR 0 6
29480: PPUSH
29481: CALL_OW 263
29485: PUSH
29486: LD_INT 2
29488: EQUAL
29489: IFFALSE 29540
// begin j := IsControledBy ( i ) ;
29491: LD_ADDR_VAR 0 7
29495: PUSH
29496: LD_VAR 0 6
29500: PPUSH
29501: CALL_OW 312
29505: ST_TO_ADDR
// if j then
29506: LD_VAR 0 7
29510: IFFALSE 29540
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
29512: LD_ADDR_VAR 0 10
29516: PUSH
29517: LD_VAR 0 10
29521: PUSH
29522: LD_VAR 0 7
29526: PPUSH
29527: LD_INT 3
29529: PPUSH
29530: CALL_OW 259
29534: PUSH
29535: LD_INT 3
29537: MUL
29538: MUL
29539: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
29540: LD_VAR 0 6
29544: PPUSH
29545: CALL_OW 264
29549: PUSH
29550: LD_INT 5
29552: PUSH
29553: LD_INT 6
29555: PUSH
29556: LD_INT 46
29558: PUSH
29559: LD_INT 44
29561: PUSH
29562: LD_INT 47
29564: PUSH
29565: LD_INT 45
29567: PUSH
29568: LD_INT 28
29570: PUSH
29571: LD_INT 7
29573: PUSH
29574: LD_INT 27
29576: PUSH
29577: LD_INT 29
29579: PUSH
29580: EMPTY
29581: LIST
29582: LIST
29583: LIST
29584: LIST
29585: LIST
29586: LIST
29587: LIST
29588: LIST
29589: LIST
29590: LIST
29591: IN
29592: IFFALSE 29612
29594: PUSH
29595: LD_VAR 0 1
29599: PPUSH
29600: LD_INT 52
29602: PPUSH
29603: CALL_OW 321
29607: PUSH
29608: LD_INT 2
29610: EQUAL
29611: AND
29612: IFFALSE 29629
// bpoints := bpoints * 1.2 ;
29614: LD_ADDR_VAR 0 10
29618: PUSH
29619: LD_VAR 0 10
29623: PUSH
29624: LD_REAL  1.20000000000000E+0000
29627: MUL
29628: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
29629: LD_VAR 0 6
29633: PPUSH
29634: CALL_OW 264
29638: PUSH
29639: LD_INT 6
29641: PUSH
29642: LD_INT 46
29644: PUSH
29645: LD_INT 47
29647: PUSH
29648: EMPTY
29649: LIST
29650: LIST
29651: LIST
29652: IN
29653: IFFALSE 29670
// bpoints := bpoints * 1.2 ;
29655: LD_ADDR_VAR 0 10
29659: PUSH
29660: LD_VAR 0 10
29664: PUSH
29665: LD_REAL  1.20000000000000E+0000
29668: MUL
29669: ST_TO_ADDR
// end ; unit_building :
29670: GO 29684
29672: LD_INT 3
29674: DOUBLE
29675: EQUAL
29676: IFTRUE 29680
29678: GO 29683
29680: POP
// ; end ;
29681: GO 29684
29683: POP
// for j = 1 to 3 do
29684: LD_ADDR_VAR 0 7
29688: PUSH
29689: DOUBLE
29690: LD_INT 1
29692: DEC
29693: ST_TO_ADDR
29694: LD_INT 3
29696: PUSH
29697: FOR_TO
29698: IFFALSE 29751
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
29700: LD_ADDR_VAR 0 5
29704: PUSH
29705: LD_VAR 0 5
29709: PPUSH
29710: LD_VAR 0 7
29714: PPUSH
29715: LD_VAR 0 5
29719: PUSH
29720: LD_VAR 0 7
29724: ARRAY
29725: PUSH
29726: LD_VAR 0 9
29730: PUSH
29731: LD_VAR 0 7
29735: ARRAY
29736: PUSH
29737: LD_VAR 0 10
29741: MUL
29742: PLUS
29743: PPUSH
29744: CALL_OW 1
29748: ST_TO_ADDR
29749: GO 29697
29751: POP
29752: POP
// end ;
29753: GO 28226
29755: POP
29756: POP
// result := Replace ( result , 4 , tmp ) ;
29757: LD_ADDR_VAR 0 5
29761: PUSH
29762: LD_VAR 0 5
29766: PPUSH
29767: LD_INT 4
29769: PPUSH
29770: LD_VAR 0 8
29774: PPUSH
29775: CALL_OW 1
29779: ST_TO_ADDR
// end ;
29780: LD_VAR 0 5
29784: RET
// export function DangerAtRange ( unit , range ) ; begin
29785: LD_INT 0
29787: PPUSH
// if not unit then
29788: LD_VAR 0 1
29792: NOT
29793: IFFALSE 29797
// exit ;
29795: GO 29842
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
29797: LD_ADDR_VAR 0 3
29801: PUSH
29802: LD_VAR 0 1
29806: PPUSH
29807: CALL_OW 255
29811: PPUSH
29812: LD_VAR 0 1
29816: PPUSH
29817: CALL_OW 250
29821: PPUSH
29822: LD_VAR 0 1
29826: PPUSH
29827: CALL_OW 251
29831: PPUSH
29832: LD_VAR 0 2
29836: PPUSH
29837: CALL 28076 0 4
29841: ST_TO_ADDR
// end ;
29842: LD_VAR 0 3
29846: RET
// export function DangerInArea ( side , area ) ; begin
29847: LD_INT 0
29849: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
29850: LD_ADDR_VAR 0 3
29854: PUSH
29855: LD_VAR 0 2
29859: PPUSH
29860: LD_INT 81
29862: PUSH
29863: LD_VAR 0 1
29867: PUSH
29868: EMPTY
29869: LIST
29870: LIST
29871: PPUSH
29872: CALL_OW 70
29876: ST_TO_ADDR
// end ;
29877: LD_VAR 0 3
29881: RET
// export function IsExtension ( b ) ; begin
29882: LD_INT 0
29884: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
29885: LD_ADDR_VAR 0 2
29889: PUSH
29890: LD_VAR 0 1
29894: PUSH
29895: LD_INT 23
29897: PUSH
29898: LD_INT 20
29900: PUSH
29901: LD_INT 22
29903: PUSH
29904: LD_INT 17
29906: PUSH
29907: LD_INT 24
29909: PUSH
29910: LD_INT 21
29912: PUSH
29913: LD_INT 19
29915: PUSH
29916: LD_INT 16
29918: PUSH
29919: LD_INT 25
29921: PUSH
29922: LD_INT 18
29924: PUSH
29925: EMPTY
29926: LIST
29927: LIST
29928: LIST
29929: LIST
29930: LIST
29931: LIST
29932: LIST
29933: LIST
29934: LIST
29935: LIST
29936: IN
29937: ST_TO_ADDR
// end ;
29938: LD_VAR 0 2
29942: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
29943: LD_INT 0
29945: PPUSH
29946: PPUSH
29947: PPUSH
// result := [ ] ;
29948: LD_ADDR_VAR 0 4
29952: PUSH
29953: EMPTY
29954: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
29955: LD_ADDR_VAR 0 5
29959: PUSH
29960: LD_VAR 0 2
29964: PPUSH
29965: LD_INT 21
29967: PUSH
29968: LD_INT 3
29970: PUSH
29971: EMPTY
29972: LIST
29973: LIST
29974: PPUSH
29975: CALL_OW 70
29979: ST_TO_ADDR
// if not tmp then
29980: LD_VAR 0 5
29984: NOT
29985: IFFALSE 29989
// exit ;
29987: GO 30053
// if checkLink then
29989: LD_VAR 0 3
29993: IFFALSE 30043
// begin for i in tmp do
29995: LD_ADDR_VAR 0 6
29999: PUSH
30000: LD_VAR 0 5
30004: PUSH
30005: FOR_IN
30006: IFFALSE 30041
// if GetBase ( i ) <> base then
30008: LD_VAR 0 6
30012: PPUSH
30013: CALL_OW 274
30017: PUSH
30018: LD_VAR 0 1
30022: NONEQUAL
30023: IFFALSE 30039
// ComLinkToBase ( base , i ) ;
30025: LD_VAR 0 1
30029: PPUSH
30030: LD_VAR 0 6
30034: PPUSH
30035: CALL_OW 169
30039: GO 30005
30041: POP
30042: POP
// end ; result := tmp ;
30043: LD_ADDR_VAR 0 4
30047: PUSH
30048: LD_VAR 0 5
30052: ST_TO_ADDR
// end ;
30053: LD_VAR 0 4
30057: RET
// export function ComComplete ( units , b ) ; var i ; begin
30058: LD_INT 0
30060: PPUSH
30061: PPUSH
// if not units then
30062: LD_VAR 0 1
30066: NOT
30067: IFFALSE 30071
// exit ;
30069: GO 30161
// for i in units do
30071: LD_ADDR_VAR 0 4
30075: PUSH
30076: LD_VAR 0 1
30080: PUSH
30081: FOR_IN
30082: IFFALSE 30159
// if BuildingStatus ( b ) = bs_build then
30084: LD_VAR 0 2
30088: PPUSH
30089: CALL_OW 461
30093: PUSH
30094: LD_INT 1
30096: EQUAL
30097: IFFALSE 30157
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
30099: LD_VAR 0 4
30103: PPUSH
30104: LD_STRING h
30106: PUSH
30107: LD_VAR 0 2
30111: PPUSH
30112: CALL_OW 250
30116: PUSH
30117: LD_VAR 0 2
30121: PPUSH
30122: CALL_OW 251
30126: PUSH
30127: LD_VAR 0 2
30131: PUSH
30132: LD_INT 0
30134: PUSH
30135: LD_INT 0
30137: PUSH
30138: LD_INT 0
30140: PUSH
30141: EMPTY
30142: LIST
30143: LIST
30144: LIST
30145: LIST
30146: LIST
30147: LIST
30148: LIST
30149: PUSH
30150: EMPTY
30151: LIST
30152: PPUSH
30153: CALL_OW 446
30157: GO 30081
30159: POP
30160: POP
// end ;
30161: LD_VAR 0 3
30165: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
30166: LD_INT 0
30168: PPUSH
30169: PPUSH
30170: PPUSH
30171: PPUSH
30172: PPUSH
30173: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
30174: LD_VAR 0 1
30178: NOT
30179: IFTRUE 30196
30181: PUSH
30182: LD_VAR 0 1
30186: PPUSH
30187: CALL_OW 263
30191: PUSH
30192: LD_INT 2
30194: NONEQUAL
30195: OR
30196: IFFALSE 30200
// exit ;
30198: GO 30516
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
30200: LD_ADDR_VAR 0 6
30204: PUSH
30205: LD_INT 22
30207: PUSH
30208: LD_VAR 0 1
30212: PPUSH
30213: CALL_OW 255
30217: PUSH
30218: EMPTY
30219: LIST
30220: LIST
30221: PUSH
30222: LD_INT 2
30224: PUSH
30225: LD_INT 30
30227: PUSH
30228: LD_INT 36
30230: PUSH
30231: EMPTY
30232: LIST
30233: LIST
30234: PUSH
30235: LD_INT 34
30237: PUSH
30238: LD_INT 31
30240: PUSH
30241: EMPTY
30242: LIST
30243: LIST
30244: PUSH
30245: EMPTY
30246: LIST
30247: LIST
30248: LIST
30249: PUSH
30250: EMPTY
30251: LIST
30252: LIST
30253: PPUSH
30254: CALL_OW 69
30258: ST_TO_ADDR
// if not tmp then
30259: LD_VAR 0 6
30263: NOT
30264: IFFALSE 30268
// exit ;
30266: GO 30516
// result := [ ] ;
30268: LD_ADDR_VAR 0 2
30272: PUSH
30273: EMPTY
30274: ST_TO_ADDR
// for i in tmp do
30275: LD_ADDR_VAR 0 3
30279: PUSH
30280: LD_VAR 0 6
30284: PUSH
30285: FOR_IN
30286: IFFALSE 30357
// begin t := UnitsInside ( i ) ;
30288: LD_ADDR_VAR 0 4
30292: PUSH
30293: LD_VAR 0 3
30297: PPUSH
30298: CALL_OW 313
30302: ST_TO_ADDR
// if t then
30303: LD_VAR 0 4
30307: IFFALSE 30355
// for j in t do
30309: LD_ADDR_VAR 0 7
30313: PUSH
30314: LD_VAR 0 4
30318: PUSH
30319: FOR_IN
30320: IFFALSE 30353
// result := Replace ( result , result + 1 , j ) ;
30322: LD_ADDR_VAR 0 2
30326: PUSH
30327: LD_VAR 0 2
30331: PPUSH
30332: LD_VAR 0 2
30336: PUSH
30337: LD_INT 1
30339: PLUS
30340: PPUSH
30341: LD_VAR 0 7
30345: PPUSH
30346: CALL_OW 1
30350: ST_TO_ADDR
30351: GO 30319
30353: POP
30354: POP
// end ;
30355: GO 30285
30357: POP
30358: POP
// if not result then
30359: LD_VAR 0 2
30363: NOT
30364: IFFALSE 30368
// exit ;
30366: GO 30516
// mech := result [ 1 ] ;
30368: LD_ADDR_VAR 0 5
30372: PUSH
30373: LD_VAR 0 2
30377: PUSH
30378: LD_INT 1
30380: ARRAY
30381: ST_TO_ADDR
// if result > 1 then
30382: LD_VAR 0 2
30386: PUSH
30387: LD_INT 1
30389: GREATER
30390: IFFALSE 30502
// begin for i = 2 to result do
30392: LD_ADDR_VAR 0 3
30396: PUSH
30397: DOUBLE
30398: LD_INT 2
30400: DEC
30401: ST_TO_ADDR
30402: LD_VAR 0 2
30406: PUSH
30407: FOR_TO
30408: IFFALSE 30500
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
30410: LD_ADDR_VAR 0 4
30414: PUSH
30415: LD_VAR 0 2
30419: PUSH
30420: LD_VAR 0 3
30424: ARRAY
30425: PPUSH
30426: LD_INT 3
30428: PPUSH
30429: CALL_OW 259
30433: PUSH
30434: LD_VAR 0 2
30438: PUSH
30439: LD_VAR 0 3
30443: ARRAY
30444: PPUSH
30445: CALL_OW 432
30449: MINUS
30450: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
30451: LD_VAR 0 4
30455: PUSH
30456: LD_VAR 0 5
30460: PPUSH
30461: LD_INT 3
30463: PPUSH
30464: CALL_OW 259
30468: PUSH
30469: LD_VAR 0 5
30473: PPUSH
30474: CALL_OW 432
30478: MINUS
30479: GREATEREQUAL
30480: IFFALSE 30498
// mech := result [ i ] ;
30482: LD_ADDR_VAR 0 5
30486: PUSH
30487: LD_VAR 0 2
30491: PUSH
30492: LD_VAR 0 3
30496: ARRAY
30497: ST_TO_ADDR
// end ;
30498: GO 30407
30500: POP
30501: POP
// end ; ComLinkTo ( vehicle , mech ) ;
30502: LD_VAR 0 1
30506: PPUSH
30507: LD_VAR 0 5
30511: PPUSH
30512: CALL_OW 135
// end ;
30516: LD_VAR 0 2
30520: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
30521: LD_INT 0
30523: PPUSH
30524: PPUSH
30525: PPUSH
30526: PPUSH
30527: PPUSH
30528: PPUSH
30529: PPUSH
30530: PPUSH
30531: PPUSH
30532: PPUSH
30533: PPUSH
30534: PPUSH
30535: PPUSH
// result := [ ] ;
30536: LD_ADDR_VAR 0 7
30540: PUSH
30541: EMPTY
30542: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
30543: LD_VAR 0 1
30547: PPUSH
30548: CALL_OW 266
30552: PUSH
30553: LD_INT 0
30555: PUSH
30556: LD_INT 1
30558: PUSH
30559: EMPTY
30560: LIST
30561: LIST
30562: IN
30563: NOT
30564: IFFALSE 30568
// exit ;
30566: GO 32208
// if name then
30568: LD_VAR 0 3
30572: IFFALSE 30588
// SetBName ( base_dep , name ) ;
30574: LD_VAR 0 1
30578: PPUSH
30579: LD_VAR 0 3
30583: PPUSH
30584: CALL_OW 500
// base := GetBase ( base_dep ) ;
30588: LD_ADDR_VAR 0 15
30592: PUSH
30593: LD_VAR 0 1
30597: PPUSH
30598: CALL_OW 274
30602: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
30603: LD_ADDR_VAR 0 16
30607: PUSH
30608: LD_VAR 0 1
30612: PPUSH
30613: CALL_OW 255
30617: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
30618: LD_ADDR_VAR 0 17
30622: PUSH
30623: LD_VAR 0 1
30627: PPUSH
30628: CALL_OW 248
30632: ST_TO_ADDR
// if sources then
30633: LD_VAR 0 5
30637: IFFALSE 30684
// for i = 1 to 3 do
30639: LD_ADDR_VAR 0 8
30643: PUSH
30644: DOUBLE
30645: LD_INT 1
30647: DEC
30648: ST_TO_ADDR
30649: LD_INT 3
30651: PUSH
30652: FOR_TO
30653: IFFALSE 30682
// AddResourceType ( base , i , sources [ i ] ) ;
30655: LD_VAR 0 15
30659: PPUSH
30660: LD_VAR 0 8
30664: PPUSH
30665: LD_VAR 0 5
30669: PUSH
30670: LD_VAR 0 8
30674: ARRAY
30675: PPUSH
30676: CALL_OW 276
30680: GO 30652
30682: POP
30683: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
30684: LD_ADDR_VAR 0 18
30688: PUSH
30689: LD_VAR 0 15
30693: PPUSH
30694: LD_VAR 0 2
30698: PPUSH
30699: LD_INT 1
30701: PPUSH
30702: CALL 29943 0 3
30706: ST_TO_ADDR
// InitHc ;
30707: CALL_OW 19
// InitUc ;
30711: CALL_OW 18
// uc_side := side ;
30715: LD_ADDR_OWVAR 20
30719: PUSH
30720: LD_VAR 0 16
30724: ST_TO_ADDR
// uc_nation := nation ;
30725: LD_ADDR_OWVAR 21
30729: PUSH
30730: LD_VAR 0 17
30734: ST_TO_ADDR
// if buildings then
30735: LD_VAR 0 18
30739: IFFALSE 32067
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
30741: LD_ADDR_VAR 0 19
30745: PUSH
30746: LD_VAR 0 18
30750: PPUSH
30751: LD_INT 2
30753: PUSH
30754: LD_INT 30
30756: PUSH
30757: LD_INT 29
30759: PUSH
30760: EMPTY
30761: LIST
30762: LIST
30763: PUSH
30764: LD_INT 30
30766: PUSH
30767: LD_INT 30
30769: PUSH
30770: EMPTY
30771: LIST
30772: LIST
30773: PUSH
30774: EMPTY
30775: LIST
30776: LIST
30777: LIST
30778: PPUSH
30779: CALL_OW 72
30783: ST_TO_ADDR
// if tmp then
30784: LD_VAR 0 19
30788: IFFALSE 30836
// for i in tmp do
30790: LD_ADDR_VAR 0 8
30794: PUSH
30795: LD_VAR 0 19
30799: PUSH
30800: FOR_IN
30801: IFFALSE 30834
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
30803: LD_VAR 0 8
30807: PPUSH
30808: CALL_OW 250
30812: PPUSH
30813: LD_VAR 0 8
30817: PPUSH
30818: CALL_OW 251
30822: PPUSH
30823: LD_VAR 0 16
30827: PPUSH
30828: CALL_OW 441
30832: GO 30800
30834: POP
30835: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
30836: LD_VAR 0 18
30840: PPUSH
30841: LD_INT 2
30843: PUSH
30844: LD_INT 30
30846: PUSH
30847: LD_INT 32
30849: PUSH
30850: EMPTY
30851: LIST
30852: LIST
30853: PUSH
30854: LD_INT 30
30856: PUSH
30857: LD_INT 33
30859: PUSH
30860: EMPTY
30861: LIST
30862: LIST
30863: PUSH
30864: EMPTY
30865: LIST
30866: LIST
30867: LIST
30868: PPUSH
30869: CALL_OW 72
30873: IFFALSE 30961
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
30875: LD_ADDR_VAR 0 8
30879: PUSH
30880: LD_VAR 0 18
30884: PPUSH
30885: LD_INT 2
30887: PUSH
30888: LD_INT 30
30890: PUSH
30891: LD_INT 32
30893: PUSH
30894: EMPTY
30895: LIST
30896: LIST
30897: PUSH
30898: LD_INT 30
30900: PUSH
30901: LD_INT 33
30903: PUSH
30904: EMPTY
30905: LIST
30906: LIST
30907: PUSH
30908: EMPTY
30909: LIST
30910: LIST
30911: LIST
30912: PPUSH
30913: CALL_OW 72
30917: PUSH
30918: FOR_IN
30919: IFFALSE 30959
// begin if not GetBWeapon ( i ) then
30921: LD_VAR 0 8
30925: PPUSH
30926: CALL_OW 269
30930: NOT
30931: IFFALSE 30957
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
30933: LD_VAR 0 8
30937: PPUSH
30938: LD_VAR 0 8
30942: PPUSH
30943: LD_VAR 0 2
30947: PPUSH
30948: CALL 32213 0 2
30952: PPUSH
30953: CALL_OW 431
// end ;
30957: GO 30918
30959: POP
30960: POP
// end ; for i = 1 to personel do
30961: LD_ADDR_VAR 0 8
30965: PUSH
30966: DOUBLE
30967: LD_INT 1
30969: DEC
30970: ST_TO_ADDR
30971: LD_VAR 0 6
30975: PUSH
30976: FOR_TO
30977: IFFALSE 32047
// begin if i > 4 then
30979: LD_VAR 0 8
30983: PUSH
30984: LD_INT 4
30986: GREATER
30987: IFFALSE 30991
// break ;
30989: GO 32047
// case i of 1 :
30991: LD_VAR 0 8
30995: PUSH
30996: LD_INT 1
30998: DOUBLE
30999: EQUAL
31000: IFTRUE 31004
31002: GO 31084
31004: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
31005: LD_ADDR_VAR 0 12
31009: PUSH
31010: LD_VAR 0 18
31014: PPUSH
31015: LD_INT 22
31017: PUSH
31018: LD_VAR 0 16
31022: PUSH
31023: EMPTY
31024: LIST
31025: LIST
31026: PUSH
31027: LD_INT 58
31029: PUSH
31030: EMPTY
31031: LIST
31032: PUSH
31033: LD_INT 2
31035: PUSH
31036: LD_INT 30
31038: PUSH
31039: LD_INT 32
31041: PUSH
31042: EMPTY
31043: LIST
31044: LIST
31045: PUSH
31046: LD_INT 30
31048: PUSH
31049: LD_INT 4
31051: PUSH
31052: EMPTY
31053: LIST
31054: LIST
31055: PUSH
31056: LD_INT 30
31058: PUSH
31059: LD_INT 5
31061: PUSH
31062: EMPTY
31063: LIST
31064: LIST
31065: PUSH
31066: EMPTY
31067: LIST
31068: LIST
31069: LIST
31070: LIST
31071: PUSH
31072: EMPTY
31073: LIST
31074: LIST
31075: LIST
31076: PPUSH
31077: CALL_OW 72
31081: ST_TO_ADDR
31082: GO 31306
31084: LD_INT 2
31086: DOUBLE
31087: EQUAL
31088: IFTRUE 31092
31090: GO 31154
31092: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
31093: LD_ADDR_VAR 0 12
31097: PUSH
31098: LD_VAR 0 18
31102: PPUSH
31103: LD_INT 22
31105: PUSH
31106: LD_VAR 0 16
31110: PUSH
31111: EMPTY
31112: LIST
31113: LIST
31114: PUSH
31115: LD_INT 2
31117: PUSH
31118: LD_INT 30
31120: PUSH
31121: LD_INT 0
31123: PUSH
31124: EMPTY
31125: LIST
31126: LIST
31127: PUSH
31128: LD_INT 30
31130: PUSH
31131: LD_INT 1
31133: PUSH
31134: EMPTY
31135: LIST
31136: LIST
31137: PUSH
31138: EMPTY
31139: LIST
31140: LIST
31141: LIST
31142: PUSH
31143: EMPTY
31144: LIST
31145: LIST
31146: PPUSH
31147: CALL_OW 72
31151: ST_TO_ADDR
31152: GO 31306
31154: LD_INT 3
31156: DOUBLE
31157: EQUAL
31158: IFTRUE 31162
31160: GO 31224
31162: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
31163: LD_ADDR_VAR 0 12
31167: PUSH
31168: LD_VAR 0 18
31172: PPUSH
31173: LD_INT 22
31175: PUSH
31176: LD_VAR 0 16
31180: PUSH
31181: EMPTY
31182: LIST
31183: LIST
31184: PUSH
31185: LD_INT 2
31187: PUSH
31188: LD_INT 30
31190: PUSH
31191: LD_INT 2
31193: PUSH
31194: EMPTY
31195: LIST
31196: LIST
31197: PUSH
31198: LD_INT 30
31200: PUSH
31201: LD_INT 3
31203: PUSH
31204: EMPTY
31205: LIST
31206: LIST
31207: PUSH
31208: EMPTY
31209: LIST
31210: LIST
31211: LIST
31212: PUSH
31213: EMPTY
31214: LIST
31215: LIST
31216: PPUSH
31217: CALL_OW 72
31221: ST_TO_ADDR
31222: GO 31306
31224: LD_INT 4
31226: DOUBLE
31227: EQUAL
31228: IFTRUE 31232
31230: GO 31305
31232: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
31233: LD_ADDR_VAR 0 12
31237: PUSH
31238: LD_VAR 0 18
31242: PPUSH
31243: LD_INT 22
31245: PUSH
31246: LD_VAR 0 16
31250: PUSH
31251: EMPTY
31252: LIST
31253: LIST
31254: PUSH
31255: LD_INT 2
31257: PUSH
31258: LD_INT 30
31260: PUSH
31261: LD_INT 6
31263: PUSH
31264: EMPTY
31265: LIST
31266: LIST
31267: PUSH
31268: LD_INT 30
31270: PUSH
31271: LD_INT 7
31273: PUSH
31274: EMPTY
31275: LIST
31276: LIST
31277: PUSH
31278: LD_INT 30
31280: PUSH
31281: LD_INT 8
31283: PUSH
31284: EMPTY
31285: LIST
31286: LIST
31287: PUSH
31288: EMPTY
31289: LIST
31290: LIST
31291: LIST
31292: LIST
31293: PUSH
31294: EMPTY
31295: LIST
31296: LIST
31297: PPUSH
31298: CALL_OW 72
31302: ST_TO_ADDR
31303: GO 31306
31305: POP
// if i = 1 then
31306: LD_VAR 0 8
31310: PUSH
31311: LD_INT 1
31313: EQUAL
31314: IFFALSE 31425
// begin tmp := [ ] ;
31316: LD_ADDR_VAR 0 19
31320: PUSH
31321: EMPTY
31322: ST_TO_ADDR
// for j in f do
31323: LD_ADDR_VAR 0 9
31327: PUSH
31328: LD_VAR 0 12
31332: PUSH
31333: FOR_IN
31334: IFFALSE 31407
// if GetBType ( j ) = b_bunker then
31336: LD_VAR 0 9
31340: PPUSH
31341: CALL_OW 266
31345: PUSH
31346: LD_INT 32
31348: EQUAL
31349: IFFALSE 31376
// tmp := Insert ( tmp , 1 , j ) else
31351: LD_ADDR_VAR 0 19
31355: PUSH
31356: LD_VAR 0 19
31360: PPUSH
31361: LD_INT 1
31363: PPUSH
31364: LD_VAR 0 9
31368: PPUSH
31369: CALL_OW 2
31373: ST_TO_ADDR
31374: GO 31405
// tmp := Insert ( tmp , tmp + 1 , j ) ;
31376: LD_ADDR_VAR 0 19
31380: PUSH
31381: LD_VAR 0 19
31385: PPUSH
31386: LD_VAR 0 19
31390: PUSH
31391: LD_INT 1
31393: PLUS
31394: PPUSH
31395: LD_VAR 0 9
31399: PPUSH
31400: CALL_OW 2
31404: ST_TO_ADDR
31405: GO 31333
31407: POP
31408: POP
// if tmp then
31409: LD_VAR 0 19
31413: IFFALSE 31425
// f := tmp ;
31415: LD_ADDR_VAR 0 12
31419: PUSH
31420: LD_VAR 0 19
31424: ST_TO_ADDR
// end ; x := personel [ i ] ;
31425: LD_ADDR_VAR 0 13
31429: PUSH
31430: LD_VAR 0 6
31434: PUSH
31435: LD_VAR 0 8
31439: ARRAY
31440: ST_TO_ADDR
// if x = - 1 then
31441: LD_VAR 0 13
31445: PUSH
31446: LD_INT 1
31448: NEG
31449: EQUAL
31450: IFFALSE 31661
// begin for j in f do
31452: LD_ADDR_VAR 0 9
31456: PUSH
31457: LD_VAR 0 12
31461: PUSH
31462: FOR_IN
31463: IFFALSE 31657
// repeat InitHc ;
31465: CALL_OW 19
// if GetBType ( j ) = b_barracks then
31469: LD_VAR 0 9
31473: PPUSH
31474: CALL_OW 266
31478: PUSH
31479: LD_INT 5
31481: EQUAL
31482: IFFALSE 31552
// begin if UnitsInside ( j ) < 3 then
31484: LD_VAR 0 9
31488: PPUSH
31489: CALL_OW 313
31493: PUSH
31494: LD_INT 3
31496: LESS
31497: IFFALSE 31533
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
31499: LD_INT 0
31501: PPUSH
31502: LD_INT 5
31504: PUSH
31505: LD_INT 8
31507: PUSH
31508: LD_INT 9
31510: PUSH
31511: EMPTY
31512: LIST
31513: LIST
31514: LIST
31515: PUSH
31516: LD_VAR 0 17
31520: ARRAY
31521: PPUSH
31522: LD_VAR 0 4
31526: PPUSH
31527: CALL_OW 380
31531: GO 31550
// PrepareHuman ( false , i , skill ) ;
31533: LD_INT 0
31535: PPUSH
31536: LD_VAR 0 8
31540: PPUSH
31541: LD_VAR 0 4
31545: PPUSH
31546: CALL_OW 380
// end else
31550: GO 31569
// PrepareHuman ( false , i , skill ) ;
31552: LD_INT 0
31554: PPUSH
31555: LD_VAR 0 8
31559: PPUSH
31560: LD_VAR 0 4
31564: PPUSH
31565: CALL_OW 380
// un := CreateHuman ;
31569: LD_ADDR_VAR 0 14
31573: PUSH
31574: CALL_OW 44
31578: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
31579: LD_ADDR_VAR 0 7
31583: PUSH
31584: LD_VAR 0 7
31588: PPUSH
31589: LD_INT 1
31591: PPUSH
31592: LD_VAR 0 14
31596: PPUSH
31597: CALL_OW 2
31601: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
31602: LD_VAR 0 14
31606: PPUSH
31607: LD_VAR 0 9
31611: PPUSH
31612: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
31616: LD_VAR 0 9
31620: PPUSH
31621: CALL_OW 313
31625: PUSH
31626: LD_INT 6
31628: EQUAL
31629: IFTRUE 31653
31631: PUSH
31632: LD_VAR 0 9
31636: PPUSH
31637: CALL_OW 266
31641: PUSH
31642: LD_INT 32
31644: PUSH
31645: LD_INT 31
31647: PUSH
31648: EMPTY
31649: LIST
31650: LIST
31651: IN
31652: OR
31653: IFFALSE 31465
31655: GO 31462
31657: POP
31658: POP
// end else
31659: GO 32045
// for j = 1 to x do
31661: LD_ADDR_VAR 0 9
31665: PUSH
31666: DOUBLE
31667: LD_INT 1
31669: DEC
31670: ST_TO_ADDR
31671: LD_VAR 0 13
31675: PUSH
31676: FOR_TO
31677: IFFALSE 32043
// begin InitHc ;
31679: CALL_OW 19
// if not f then
31683: LD_VAR 0 12
31687: NOT
31688: IFFALSE 31777
// begin PrepareHuman ( false , i , skill ) ;
31690: LD_INT 0
31692: PPUSH
31693: LD_VAR 0 8
31697: PPUSH
31698: LD_VAR 0 4
31702: PPUSH
31703: CALL_OW 380
// un := CreateHuman ;
31707: LD_ADDR_VAR 0 14
31711: PUSH
31712: CALL_OW 44
31716: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
31717: LD_ADDR_VAR 0 7
31721: PUSH
31722: LD_VAR 0 7
31726: PPUSH
31727: LD_INT 1
31729: PPUSH
31730: LD_VAR 0 14
31734: PPUSH
31735: CALL_OW 2
31739: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
31740: LD_VAR 0 14
31744: PPUSH
31745: LD_VAR 0 1
31749: PPUSH
31750: CALL_OW 250
31754: PPUSH
31755: LD_VAR 0 1
31759: PPUSH
31760: CALL_OW 251
31764: PPUSH
31765: LD_INT 10
31767: PPUSH
31768: LD_INT 0
31770: PPUSH
31771: CALL_OW 50
// continue ;
31775: GO 31676
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
31777: LD_VAR 0 12
31781: PUSH
31782: LD_INT 1
31784: ARRAY
31785: PPUSH
31786: CALL_OW 313
31790: IFFALSE 31818
31792: PUSH
31793: LD_VAR 0 12
31797: PUSH
31798: LD_INT 1
31800: ARRAY
31801: PPUSH
31802: CALL_OW 266
31806: PUSH
31807: LD_INT 32
31809: PUSH
31810: LD_INT 31
31812: PUSH
31813: EMPTY
31814: LIST
31815: LIST
31816: IN
31817: AND
31818: IFTRUE 31839
31820: PUSH
31821: LD_VAR 0 12
31825: PUSH
31826: LD_INT 1
31828: ARRAY
31829: PPUSH
31830: CALL_OW 313
31834: PUSH
31835: LD_INT 6
31837: EQUAL
31838: OR
31839: IFFALSE 31859
// f := Delete ( f , 1 ) ;
31841: LD_ADDR_VAR 0 12
31845: PUSH
31846: LD_VAR 0 12
31850: PPUSH
31851: LD_INT 1
31853: PPUSH
31854: CALL_OW 3
31858: ST_TO_ADDR
// if not f then
31859: LD_VAR 0 12
31863: NOT
31864: IFFALSE 31882
// begin x := x + 2 ;
31866: LD_ADDR_VAR 0 13
31870: PUSH
31871: LD_VAR 0 13
31875: PUSH
31876: LD_INT 2
31878: PLUS
31879: ST_TO_ADDR
// continue ;
31880: GO 31676
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
31882: LD_VAR 0 12
31886: PUSH
31887: LD_INT 1
31889: ARRAY
31890: PPUSH
31891: CALL_OW 266
31895: PUSH
31896: LD_INT 5
31898: EQUAL
31899: IFFALSE 31973
// begin if UnitsInside ( f [ 1 ] ) < 3 then
31901: LD_VAR 0 12
31905: PUSH
31906: LD_INT 1
31908: ARRAY
31909: PPUSH
31910: CALL_OW 313
31914: PUSH
31915: LD_INT 3
31917: LESS
31918: IFFALSE 31954
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
31920: LD_INT 0
31922: PPUSH
31923: LD_INT 5
31925: PUSH
31926: LD_INT 8
31928: PUSH
31929: LD_INT 9
31931: PUSH
31932: EMPTY
31933: LIST
31934: LIST
31935: LIST
31936: PUSH
31937: LD_VAR 0 17
31941: ARRAY
31942: PPUSH
31943: LD_VAR 0 4
31947: PPUSH
31948: CALL_OW 380
31952: GO 31971
// PrepareHuman ( false , i , skill ) ;
31954: LD_INT 0
31956: PPUSH
31957: LD_VAR 0 8
31961: PPUSH
31962: LD_VAR 0 4
31966: PPUSH
31967: CALL_OW 380
// end else
31971: GO 31990
// PrepareHuman ( false , i , skill ) ;
31973: LD_INT 0
31975: PPUSH
31976: LD_VAR 0 8
31980: PPUSH
31981: LD_VAR 0 4
31985: PPUSH
31986: CALL_OW 380
// un := CreateHuman ;
31990: LD_ADDR_VAR 0 14
31994: PUSH
31995: CALL_OW 44
31999: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
32000: LD_ADDR_VAR 0 7
32004: PUSH
32005: LD_VAR 0 7
32009: PPUSH
32010: LD_INT 1
32012: PPUSH
32013: LD_VAR 0 14
32017: PPUSH
32018: CALL_OW 2
32022: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
32023: LD_VAR 0 14
32027: PPUSH
32028: LD_VAR 0 12
32032: PUSH
32033: LD_INT 1
32035: ARRAY
32036: PPUSH
32037: CALL_OW 52
// end ;
32041: GO 31676
32043: POP
32044: POP
// end ;
32045: GO 30976
32047: POP
32048: POP
// result := result ^ buildings ;
32049: LD_ADDR_VAR 0 7
32053: PUSH
32054: LD_VAR 0 7
32058: PUSH
32059: LD_VAR 0 18
32063: ADD
32064: ST_TO_ADDR
// end else
32065: GO 32208
// begin for i = 1 to personel do
32067: LD_ADDR_VAR 0 8
32071: PUSH
32072: DOUBLE
32073: LD_INT 1
32075: DEC
32076: ST_TO_ADDR
32077: LD_VAR 0 6
32081: PUSH
32082: FOR_TO
32083: IFFALSE 32206
// begin if i > 4 then
32085: LD_VAR 0 8
32089: PUSH
32090: LD_INT 4
32092: GREATER
32093: IFFALSE 32097
// break ;
32095: GO 32206
// x := personel [ i ] ;
32097: LD_ADDR_VAR 0 13
32101: PUSH
32102: LD_VAR 0 6
32106: PUSH
32107: LD_VAR 0 8
32111: ARRAY
32112: ST_TO_ADDR
// if x = - 1 then
32113: LD_VAR 0 13
32117: PUSH
32118: LD_INT 1
32120: NEG
32121: EQUAL
32122: IFFALSE 32126
// continue ;
32124: GO 32082
// PrepareHuman ( false , i , skill ) ;
32126: LD_INT 0
32128: PPUSH
32129: LD_VAR 0 8
32133: PPUSH
32134: LD_VAR 0 4
32138: PPUSH
32139: CALL_OW 380
// un := CreateHuman ;
32143: LD_ADDR_VAR 0 14
32147: PUSH
32148: CALL_OW 44
32152: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
32153: LD_VAR 0 14
32157: PPUSH
32158: LD_VAR 0 1
32162: PPUSH
32163: CALL_OW 250
32167: PPUSH
32168: LD_VAR 0 1
32172: PPUSH
32173: CALL_OW 251
32177: PPUSH
32178: LD_INT 10
32180: PPUSH
32181: LD_INT 0
32183: PPUSH
32184: CALL_OW 50
// result := result ^ un ;
32188: LD_ADDR_VAR 0 7
32192: PUSH
32193: LD_VAR 0 7
32197: PUSH
32198: LD_VAR 0 14
32202: ADD
32203: ST_TO_ADDR
// end ;
32204: GO 32082
32206: POP
32207: POP
// end ; end ;
32208: LD_VAR 0 7
32212: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
32213: LD_INT 0
32215: PPUSH
32216: PPUSH
32217: PPUSH
32218: PPUSH
32219: PPUSH
32220: PPUSH
32221: PPUSH
32222: PPUSH
32223: PPUSH
32224: PPUSH
32225: PPUSH
32226: PPUSH
32227: PPUSH
32228: PPUSH
32229: PPUSH
32230: PPUSH
// result := false ;
32231: LD_ADDR_VAR 0 3
32235: PUSH
32236: LD_INT 0
32238: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
32239: LD_VAR 0 1
32243: NOT
32244: IFTRUE 32269
32246: PUSH
32247: LD_VAR 0 1
32251: PPUSH
32252: CALL_OW 266
32256: PUSH
32257: LD_INT 32
32259: PUSH
32260: LD_INT 33
32262: PUSH
32263: EMPTY
32264: LIST
32265: LIST
32266: IN
32267: NOT
32268: OR
32269: IFFALSE 32273
// exit ;
32271: GO 33408
// nat := GetNation ( tower ) ;
32273: LD_ADDR_VAR 0 12
32277: PUSH
32278: LD_VAR 0 1
32282: PPUSH
32283: CALL_OW 248
32287: ST_TO_ADDR
// side := GetSide ( tower ) ;
32288: LD_ADDR_VAR 0 16
32292: PUSH
32293: LD_VAR 0 1
32297: PPUSH
32298: CALL_OW 255
32302: ST_TO_ADDR
// x := GetX ( tower ) ;
32303: LD_ADDR_VAR 0 10
32307: PUSH
32308: LD_VAR 0 1
32312: PPUSH
32313: CALL_OW 250
32317: ST_TO_ADDR
// y := GetY ( tower ) ;
32318: LD_ADDR_VAR 0 11
32322: PUSH
32323: LD_VAR 0 1
32327: PPUSH
32328: CALL_OW 251
32332: ST_TO_ADDR
// if not x or not y then
32333: LD_VAR 0 10
32337: NOT
32338: IFTRUE 32347
32340: PUSH
32341: LD_VAR 0 11
32345: NOT
32346: OR
32347: IFFALSE 32351
// exit ;
32349: GO 33408
// weapon := 0 ;
32351: LD_ADDR_VAR 0 18
32355: PUSH
32356: LD_INT 0
32358: ST_TO_ADDR
// fac_list := [ ] ;
32359: LD_ADDR_VAR 0 17
32363: PUSH
32364: EMPTY
32365: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
32366: LD_ADDR_VAR 0 6
32370: PUSH
32371: LD_VAR 0 1
32375: PPUSH
32376: CALL_OW 274
32380: PPUSH
32381: LD_VAR 0 2
32385: PPUSH
32386: LD_INT 0
32388: PPUSH
32389: CALL 29943 0 3
32393: PPUSH
32394: LD_INT 30
32396: PUSH
32397: LD_INT 3
32399: PUSH
32400: EMPTY
32401: LIST
32402: LIST
32403: PPUSH
32404: CALL_OW 72
32408: ST_TO_ADDR
// if not factories then
32409: LD_VAR 0 6
32413: NOT
32414: IFFALSE 32418
// exit ;
32416: GO 33408
// for i in factories do
32418: LD_ADDR_VAR 0 8
32422: PUSH
32423: LD_VAR 0 6
32427: PUSH
32428: FOR_IN
32429: IFFALSE 32454
// fac_list := fac_list union AvailableWeaponList ( i ) ;
32431: LD_ADDR_VAR 0 17
32435: PUSH
32436: LD_VAR 0 17
32440: PUSH
32441: LD_VAR 0 8
32445: PPUSH
32446: CALL_OW 478
32450: UNION
32451: ST_TO_ADDR
32452: GO 32428
32454: POP
32455: POP
// if not fac_list then
32456: LD_VAR 0 17
32460: NOT
32461: IFFALSE 32465
// exit ;
32463: GO 33408
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
32465: LD_ADDR_VAR 0 5
32469: PUSH
32470: LD_INT 4
32472: PUSH
32473: LD_INT 5
32475: PUSH
32476: LD_INT 9
32478: PUSH
32479: LD_INT 10
32481: PUSH
32482: LD_INT 6
32484: PUSH
32485: LD_INT 7
32487: PUSH
32488: LD_INT 11
32490: PUSH
32491: EMPTY
32492: LIST
32493: LIST
32494: LIST
32495: LIST
32496: LIST
32497: LIST
32498: LIST
32499: PUSH
32500: LD_INT 27
32502: PUSH
32503: LD_INT 28
32505: PUSH
32506: LD_INT 26
32508: PUSH
32509: LD_INT 30
32511: PUSH
32512: EMPTY
32513: LIST
32514: LIST
32515: LIST
32516: LIST
32517: PUSH
32518: LD_INT 43
32520: PUSH
32521: LD_INT 44
32523: PUSH
32524: LD_INT 46
32526: PUSH
32527: LD_INT 45
32529: PUSH
32530: LD_INT 47
32532: PUSH
32533: LD_INT 49
32535: PUSH
32536: EMPTY
32537: LIST
32538: LIST
32539: LIST
32540: LIST
32541: LIST
32542: LIST
32543: PUSH
32544: EMPTY
32545: LIST
32546: LIST
32547: LIST
32548: PUSH
32549: LD_VAR 0 12
32553: ARRAY
32554: ST_TO_ADDR
// list := list isect fac_list ;
32555: LD_ADDR_VAR 0 5
32559: PUSH
32560: LD_VAR 0 5
32564: PUSH
32565: LD_VAR 0 17
32569: ISECT
32570: ST_TO_ADDR
// if not list then
32571: LD_VAR 0 5
32575: NOT
32576: IFFALSE 32580
// exit ;
32578: GO 33408
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
32580: LD_VAR 0 12
32584: PUSH
32585: LD_INT 3
32587: EQUAL
32588: IFFALSE 32600
32590: PUSH
32591: LD_INT 49
32593: PUSH
32594: LD_VAR 0 5
32598: IN
32599: AND
32600: IFFALSE 32620
32602: PUSH
32603: LD_INT 31
32605: PPUSH
32606: LD_VAR 0 16
32610: PPUSH
32611: CALL_OW 321
32615: PUSH
32616: LD_INT 2
32618: EQUAL
32619: AND
32620: IFFALSE 32680
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
32622: LD_INT 22
32624: PUSH
32625: LD_VAR 0 16
32629: PUSH
32630: EMPTY
32631: LIST
32632: LIST
32633: PUSH
32634: LD_INT 35
32636: PUSH
32637: LD_INT 49
32639: PUSH
32640: EMPTY
32641: LIST
32642: LIST
32643: PUSH
32644: LD_INT 91
32646: PUSH
32647: LD_VAR 0 1
32651: PUSH
32652: LD_INT 10
32654: PUSH
32655: EMPTY
32656: LIST
32657: LIST
32658: LIST
32659: PUSH
32660: EMPTY
32661: LIST
32662: LIST
32663: LIST
32664: PPUSH
32665: CALL_OW 69
32669: NOT
32670: IFFALSE 32680
// weapon := ru_time_lapser ;
32672: LD_ADDR_VAR 0 18
32676: PUSH
32677: LD_INT 49
32679: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
32680: LD_VAR 0 12
32684: PUSH
32685: LD_INT 1
32687: PUSH
32688: LD_INT 2
32690: PUSH
32691: EMPTY
32692: LIST
32693: LIST
32694: IN
32695: IFFALSE 32719
32697: PUSH
32698: LD_INT 11
32700: PUSH
32701: LD_VAR 0 5
32705: IN
32706: IFTRUE 32718
32708: PUSH
32709: LD_INT 30
32711: PUSH
32712: LD_VAR 0 5
32716: IN
32717: OR
32718: AND
32719: IFFALSE 32739
32721: PUSH
32722: LD_INT 6
32724: PPUSH
32725: LD_VAR 0 16
32729: PPUSH
32730: CALL_OW 321
32734: PUSH
32735: LD_INT 2
32737: EQUAL
32738: AND
32739: IFFALSE 32906
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
32741: LD_INT 22
32743: PUSH
32744: LD_VAR 0 16
32748: PUSH
32749: EMPTY
32750: LIST
32751: LIST
32752: PUSH
32753: LD_INT 2
32755: PUSH
32756: LD_INT 35
32758: PUSH
32759: LD_INT 11
32761: PUSH
32762: EMPTY
32763: LIST
32764: LIST
32765: PUSH
32766: LD_INT 35
32768: PUSH
32769: LD_INT 30
32771: PUSH
32772: EMPTY
32773: LIST
32774: LIST
32775: PUSH
32776: EMPTY
32777: LIST
32778: LIST
32779: LIST
32780: PUSH
32781: LD_INT 91
32783: PUSH
32784: LD_VAR 0 1
32788: PUSH
32789: LD_INT 18
32791: PUSH
32792: EMPTY
32793: LIST
32794: LIST
32795: LIST
32796: PUSH
32797: EMPTY
32798: LIST
32799: LIST
32800: LIST
32801: PPUSH
32802: CALL_OW 69
32806: NOT
32807: IFFALSE 32883
32809: PUSH
32810: LD_INT 22
32812: PUSH
32813: LD_VAR 0 16
32817: PUSH
32818: EMPTY
32819: LIST
32820: LIST
32821: PUSH
32822: LD_INT 2
32824: PUSH
32825: LD_INT 30
32827: PUSH
32828: LD_INT 32
32830: PUSH
32831: EMPTY
32832: LIST
32833: LIST
32834: PUSH
32835: LD_INT 30
32837: PUSH
32838: LD_INT 33
32840: PUSH
32841: EMPTY
32842: LIST
32843: LIST
32844: PUSH
32845: EMPTY
32846: LIST
32847: LIST
32848: LIST
32849: PUSH
32850: LD_INT 91
32852: PUSH
32853: LD_VAR 0 1
32857: PUSH
32858: LD_INT 12
32860: PUSH
32861: EMPTY
32862: LIST
32863: LIST
32864: LIST
32865: PUSH
32866: EMPTY
32867: LIST
32868: LIST
32869: LIST
32870: PUSH
32871: EMPTY
32872: LIST
32873: PPUSH
32874: CALL_OW 69
32878: PUSH
32879: LD_INT 2
32881: GREATER
32882: AND
32883: IFFALSE 32906
// weapon := [ us_radar , ar_radar ] [ nat ] ;
32885: LD_ADDR_VAR 0 18
32889: PUSH
32890: LD_INT 11
32892: PUSH
32893: LD_INT 30
32895: PUSH
32896: EMPTY
32897: LIST
32898: LIST
32899: PUSH
32900: LD_VAR 0 12
32904: ARRAY
32905: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
32906: LD_VAR 0 18
32910: NOT
32911: IFFALSE 32931
32913: PUSH
32914: LD_INT 40
32916: PPUSH
32917: LD_VAR 0 16
32921: PPUSH
32922: CALL_OW 321
32926: PUSH
32927: LD_INT 2
32929: EQUAL
32930: AND
32931: IFFALSE 32967
32933: PUSH
32934: LD_INT 7
32936: PUSH
32937: LD_VAR 0 5
32941: IN
32942: IFTRUE 32954
32944: PUSH
32945: LD_INT 28
32947: PUSH
32948: LD_VAR 0 5
32952: IN
32953: OR
32954: IFTRUE 32966
32956: PUSH
32957: LD_INT 45
32959: PUSH
32960: LD_VAR 0 5
32964: IN
32965: OR
32966: AND
32967: IFFALSE 33221
// begin hex := GetHexInfo ( x , y ) ;
32969: LD_ADDR_VAR 0 4
32973: PUSH
32974: LD_VAR 0 10
32978: PPUSH
32979: LD_VAR 0 11
32983: PPUSH
32984: CALL_OW 546
32988: ST_TO_ADDR
// if hex [ 1 ] then
32989: LD_VAR 0 4
32993: PUSH
32994: LD_INT 1
32996: ARRAY
32997: IFFALSE 33001
// exit ;
32999: GO 33408
// height := hex [ 2 ] ;
33001: LD_ADDR_VAR 0 15
33005: PUSH
33006: LD_VAR 0 4
33010: PUSH
33011: LD_INT 2
33013: ARRAY
33014: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
33015: LD_ADDR_VAR 0 14
33019: PUSH
33020: LD_INT 0
33022: PUSH
33023: LD_INT 2
33025: PUSH
33026: LD_INT 3
33028: PUSH
33029: LD_INT 5
33031: PUSH
33032: EMPTY
33033: LIST
33034: LIST
33035: LIST
33036: LIST
33037: ST_TO_ADDR
// for i in tmp do
33038: LD_ADDR_VAR 0 8
33042: PUSH
33043: LD_VAR 0 14
33047: PUSH
33048: FOR_IN
33049: IFFALSE 33219
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
33051: LD_ADDR_VAR 0 9
33055: PUSH
33056: LD_VAR 0 10
33060: PPUSH
33061: LD_VAR 0 8
33065: PPUSH
33066: LD_INT 5
33068: PPUSH
33069: CALL_OW 272
33073: PUSH
33074: LD_VAR 0 11
33078: PPUSH
33079: LD_VAR 0 8
33083: PPUSH
33084: LD_INT 5
33086: PPUSH
33087: CALL_OW 273
33091: PUSH
33092: EMPTY
33093: LIST
33094: LIST
33095: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
33096: LD_VAR 0 9
33100: PUSH
33101: LD_INT 1
33103: ARRAY
33104: PPUSH
33105: LD_VAR 0 9
33109: PUSH
33110: LD_INT 2
33112: ARRAY
33113: PPUSH
33114: CALL_OW 488
33118: IFFALSE 33217
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
33120: LD_ADDR_VAR 0 4
33124: PUSH
33125: LD_VAR 0 9
33129: PUSH
33130: LD_INT 1
33132: ARRAY
33133: PPUSH
33134: LD_VAR 0 9
33138: PUSH
33139: LD_INT 2
33141: ARRAY
33142: PPUSH
33143: CALL_OW 546
33147: ST_TO_ADDR
// if hex [ 1 ] then
33148: LD_VAR 0 4
33152: PUSH
33153: LD_INT 1
33155: ARRAY
33156: IFFALSE 33160
// continue ;
33158: GO 33048
// h := hex [ 2 ] ;
33160: LD_ADDR_VAR 0 13
33164: PUSH
33165: LD_VAR 0 4
33169: PUSH
33170: LD_INT 2
33172: ARRAY
33173: ST_TO_ADDR
// if h + 7 < height then
33174: LD_VAR 0 13
33178: PUSH
33179: LD_INT 7
33181: PLUS
33182: PUSH
33183: LD_VAR 0 15
33187: LESS
33188: IFFALSE 33217
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
33190: LD_ADDR_VAR 0 18
33194: PUSH
33195: LD_INT 7
33197: PUSH
33198: LD_INT 28
33200: PUSH
33201: LD_INT 45
33203: PUSH
33204: EMPTY
33205: LIST
33206: LIST
33207: LIST
33208: PUSH
33209: LD_VAR 0 12
33213: ARRAY
33214: ST_TO_ADDR
// break ;
33215: GO 33219
// end ; end ; end ;
33217: GO 33048
33219: POP
33220: POP
// end ; if not weapon then
33221: LD_VAR 0 18
33225: NOT
33226: IFFALSE 33286
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
33228: LD_ADDR_VAR 0 5
33232: PUSH
33233: LD_VAR 0 5
33237: PUSH
33238: LD_INT 11
33240: PUSH
33241: LD_INT 30
33243: PUSH
33244: LD_INT 49
33246: PUSH
33247: EMPTY
33248: LIST
33249: LIST
33250: LIST
33251: DIFF
33252: ST_TO_ADDR
// if not list then
33253: LD_VAR 0 5
33257: NOT
33258: IFFALSE 33262
// exit ;
33260: GO 33408
// weapon := list [ rand ( 1 , list ) ] ;
33262: LD_ADDR_VAR 0 18
33266: PUSH
33267: LD_VAR 0 5
33271: PUSH
33272: LD_INT 1
33274: PPUSH
33275: LD_VAR 0 5
33279: PPUSH
33280: CALL_OW 12
33284: ARRAY
33285: ST_TO_ADDR
// end ; if weapon then
33286: LD_VAR 0 18
33290: IFFALSE 33408
// begin tmp := CostOfWeapon ( weapon ) ;
33292: LD_ADDR_VAR 0 14
33296: PUSH
33297: LD_VAR 0 18
33301: PPUSH
33302: CALL_OW 451
33306: ST_TO_ADDR
// j := GetBase ( tower ) ;
33307: LD_ADDR_VAR 0 9
33311: PUSH
33312: LD_VAR 0 1
33316: PPUSH
33317: CALL_OW 274
33321: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
33322: LD_VAR 0 9
33326: PPUSH
33327: LD_INT 1
33329: PPUSH
33330: CALL_OW 275
33334: PUSH
33335: LD_VAR 0 14
33339: PUSH
33340: LD_INT 1
33342: ARRAY
33343: GREATEREQUAL
33344: IFFALSE 33370
33346: PUSH
33347: LD_VAR 0 9
33351: PPUSH
33352: LD_INT 2
33354: PPUSH
33355: CALL_OW 275
33359: PUSH
33360: LD_VAR 0 14
33364: PUSH
33365: LD_INT 2
33367: ARRAY
33368: GREATEREQUAL
33369: AND
33370: IFFALSE 33396
33372: PUSH
33373: LD_VAR 0 9
33377: PPUSH
33378: LD_INT 3
33380: PPUSH
33381: CALL_OW 275
33385: PUSH
33386: LD_VAR 0 14
33390: PUSH
33391: LD_INT 3
33393: ARRAY
33394: GREATEREQUAL
33395: AND
33396: IFFALSE 33408
// result := weapon ;
33398: LD_ADDR_VAR 0 3
33402: PUSH
33403: LD_VAR 0 18
33407: ST_TO_ADDR
// end ; end ;
33408: LD_VAR 0 3
33412: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
33413: LD_INT 0
33415: PPUSH
33416: PPUSH
// result := true ;
33417: LD_ADDR_VAR 0 3
33421: PUSH
33422: LD_INT 1
33424: ST_TO_ADDR
// if array1 = array2 then
33425: LD_VAR 0 1
33429: PUSH
33430: LD_VAR 0 2
33434: EQUAL
33435: IFFALSE 33495
// begin for i = 1 to array1 do
33437: LD_ADDR_VAR 0 4
33441: PUSH
33442: DOUBLE
33443: LD_INT 1
33445: DEC
33446: ST_TO_ADDR
33447: LD_VAR 0 1
33451: PUSH
33452: FOR_TO
33453: IFFALSE 33491
// if array1 [ i ] <> array2 [ i ] then
33455: LD_VAR 0 1
33459: PUSH
33460: LD_VAR 0 4
33464: ARRAY
33465: PUSH
33466: LD_VAR 0 2
33470: PUSH
33471: LD_VAR 0 4
33475: ARRAY
33476: NONEQUAL
33477: IFFALSE 33489
// begin result := false ;
33479: LD_ADDR_VAR 0 3
33483: PUSH
33484: LD_INT 0
33486: ST_TO_ADDR
// break ;
33487: GO 33491
// end ;
33489: GO 33452
33491: POP
33492: POP
// end else
33493: GO 33503
// result := false ;
33495: LD_ADDR_VAR 0 3
33499: PUSH
33500: LD_INT 0
33502: ST_TO_ADDR
// end ;
33503: LD_VAR 0 3
33507: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
33508: LD_INT 0
33510: PPUSH
33511: PPUSH
// if not array1 or not array2 then
33512: LD_VAR 0 1
33516: NOT
33517: IFTRUE 33526
33519: PUSH
33520: LD_VAR 0 2
33524: NOT
33525: OR
33526: IFFALSE 33530
// exit ;
33528: GO 33594
// result := true ;
33530: LD_ADDR_VAR 0 3
33534: PUSH
33535: LD_INT 1
33537: ST_TO_ADDR
// for i = 1 to array1 do
33538: LD_ADDR_VAR 0 4
33542: PUSH
33543: DOUBLE
33544: LD_INT 1
33546: DEC
33547: ST_TO_ADDR
33548: LD_VAR 0 1
33552: PUSH
33553: FOR_TO
33554: IFFALSE 33592
// if array1 [ i ] <> array2 [ i ] then
33556: LD_VAR 0 1
33560: PUSH
33561: LD_VAR 0 4
33565: ARRAY
33566: PUSH
33567: LD_VAR 0 2
33571: PUSH
33572: LD_VAR 0 4
33576: ARRAY
33577: NONEQUAL
33578: IFFALSE 33590
// begin result := false ;
33580: LD_ADDR_VAR 0 3
33584: PUSH
33585: LD_INT 0
33587: ST_TO_ADDR
// break ;
33588: GO 33592
// end ;
33590: GO 33553
33592: POP
33593: POP
// end ;
33594: LD_VAR 0 3
33598: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
33599: LD_INT 0
33601: PPUSH
33602: PPUSH
33603: PPUSH
// pom := GetBase ( fac ) ;
33604: LD_ADDR_VAR 0 5
33608: PUSH
33609: LD_VAR 0 1
33613: PPUSH
33614: CALL_OW 274
33618: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
33619: LD_ADDR_VAR 0 4
33623: PUSH
33624: LD_VAR 0 2
33628: PUSH
33629: LD_INT 1
33631: ARRAY
33632: PPUSH
33633: LD_VAR 0 2
33637: PUSH
33638: LD_INT 2
33640: ARRAY
33641: PPUSH
33642: LD_VAR 0 2
33646: PUSH
33647: LD_INT 3
33649: ARRAY
33650: PPUSH
33651: LD_VAR 0 2
33655: PUSH
33656: LD_INT 4
33658: ARRAY
33659: PPUSH
33660: CALL_OW 449
33664: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
33665: LD_ADDR_VAR 0 3
33669: PUSH
33670: LD_VAR 0 5
33674: PPUSH
33675: LD_INT 1
33677: PPUSH
33678: CALL_OW 275
33682: PUSH
33683: LD_VAR 0 4
33687: PUSH
33688: LD_INT 1
33690: ARRAY
33691: GREATEREQUAL
33692: IFFALSE 33718
33694: PUSH
33695: LD_VAR 0 5
33699: PPUSH
33700: LD_INT 2
33702: PPUSH
33703: CALL_OW 275
33707: PUSH
33708: LD_VAR 0 4
33712: PUSH
33713: LD_INT 2
33715: ARRAY
33716: GREATEREQUAL
33717: AND
33718: IFFALSE 33744
33720: PUSH
33721: LD_VAR 0 5
33725: PPUSH
33726: LD_INT 3
33728: PPUSH
33729: CALL_OW 275
33733: PUSH
33734: LD_VAR 0 4
33738: PUSH
33739: LD_INT 3
33741: ARRAY
33742: GREATEREQUAL
33743: AND
33744: ST_TO_ADDR
// end ;
33745: LD_VAR 0 3
33749: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
33750: LD_INT 0
33752: PPUSH
33753: PPUSH
33754: PPUSH
33755: PPUSH
// pom := GetBase ( building ) ;
33756: LD_ADDR_VAR 0 3
33760: PUSH
33761: LD_VAR 0 1
33765: PPUSH
33766: CALL_OW 274
33770: ST_TO_ADDR
// if not pom then
33771: LD_VAR 0 3
33775: NOT
33776: IFFALSE 33780
// exit ;
33778: GO 33954
// btype := GetBType ( building ) ;
33780: LD_ADDR_VAR 0 5
33784: PUSH
33785: LD_VAR 0 1
33789: PPUSH
33790: CALL_OW 266
33794: ST_TO_ADDR
// if btype = b_armoury then
33795: LD_VAR 0 5
33799: PUSH
33800: LD_INT 4
33802: EQUAL
33803: IFFALSE 33813
// btype := b_barracks ;
33805: LD_ADDR_VAR 0 5
33809: PUSH
33810: LD_INT 5
33812: ST_TO_ADDR
// if btype = b_depot then
33813: LD_VAR 0 5
33817: PUSH
33818: LD_INT 0
33820: EQUAL
33821: IFFALSE 33831
// btype := b_warehouse ;
33823: LD_ADDR_VAR 0 5
33827: PUSH
33828: LD_INT 1
33830: ST_TO_ADDR
// if btype = b_workshop then
33831: LD_VAR 0 5
33835: PUSH
33836: LD_INT 2
33838: EQUAL
33839: IFFALSE 33849
// btype := b_factory ;
33841: LD_ADDR_VAR 0 5
33845: PUSH
33846: LD_INT 3
33848: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
33849: LD_ADDR_VAR 0 4
33853: PUSH
33854: LD_VAR 0 5
33858: PPUSH
33859: LD_VAR 0 1
33863: PPUSH
33864: CALL_OW 248
33868: PPUSH
33869: CALL_OW 450
33873: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
33874: LD_ADDR_VAR 0 2
33878: PUSH
33879: LD_VAR 0 3
33883: PPUSH
33884: LD_INT 1
33886: PPUSH
33887: CALL_OW 275
33891: PUSH
33892: LD_VAR 0 4
33896: PUSH
33897: LD_INT 1
33899: ARRAY
33900: GREATEREQUAL
33901: IFFALSE 33927
33903: PUSH
33904: LD_VAR 0 3
33908: PPUSH
33909: LD_INT 2
33911: PPUSH
33912: CALL_OW 275
33916: PUSH
33917: LD_VAR 0 4
33921: PUSH
33922: LD_INT 2
33924: ARRAY
33925: GREATEREQUAL
33926: AND
33927: IFFALSE 33953
33929: PUSH
33930: LD_VAR 0 3
33934: PPUSH
33935: LD_INT 3
33937: PPUSH
33938: CALL_OW 275
33942: PUSH
33943: LD_VAR 0 4
33947: PUSH
33948: LD_INT 3
33950: ARRAY
33951: GREATEREQUAL
33952: AND
33953: ST_TO_ADDR
// end ;
33954: LD_VAR 0 2
33958: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
33959: LD_INT 0
33961: PPUSH
33962: PPUSH
33963: PPUSH
// pom := GetBase ( building ) ;
33964: LD_ADDR_VAR 0 4
33968: PUSH
33969: LD_VAR 0 1
33973: PPUSH
33974: CALL_OW 274
33978: ST_TO_ADDR
// if not pom then
33979: LD_VAR 0 4
33983: NOT
33984: IFFALSE 33988
// exit ;
33986: GO 34093
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
33988: LD_ADDR_VAR 0 5
33992: PUSH
33993: LD_VAR 0 2
33997: PPUSH
33998: LD_VAR 0 1
34002: PPUSH
34003: CALL_OW 248
34007: PPUSH
34008: CALL_OW 450
34012: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
34013: LD_ADDR_VAR 0 3
34017: PUSH
34018: LD_VAR 0 4
34022: PPUSH
34023: LD_INT 1
34025: PPUSH
34026: CALL_OW 275
34030: PUSH
34031: LD_VAR 0 5
34035: PUSH
34036: LD_INT 1
34038: ARRAY
34039: GREATEREQUAL
34040: IFFALSE 34066
34042: PUSH
34043: LD_VAR 0 4
34047: PPUSH
34048: LD_INT 2
34050: PPUSH
34051: CALL_OW 275
34055: PUSH
34056: LD_VAR 0 5
34060: PUSH
34061: LD_INT 2
34063: ARRAY
34064: GREATEREQUAL
34065: AND
34066: IFFALSE 34092
34068: PUSH
34069: LD_VAR 0 4
34073: PPUSH
34074: LD_INT 3
34076: PPUSH
34077: CALL_OW 275
34081: PUSH
34082: LD_VAR 0 5
34086: PUSH
34087: LD_INT 3
34089: ARRAY
34090: GREATEREQUAL
34091: AND
34092: ST_TO_ADDR
// end ;
34093: LD_VAR 0 3
34097: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
34098: LD_INT 0
34100: PPUSH
34101: PPUSH
34102: PPUSH
34103: PPUSH
34104: PPUSH
34105: PPUSH
34106: PPUSH
34107: PPUSH
34108: PPUSH
34109: PPUSH
34110: PPUSH
// result := false ;
34111: LD_ADDR_VAR 0 8
34115: PUSH
34116: LD_INT 0
34118: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
34119: LD_VAR 0 5
34123: NOT
34124: IFTRUE 34133
34126: PUSH
34127: LD_VAR 0 1
34131: NOT
34132: OR
34133: IFTRUE 34142
34135: PUSH
34136: LD_VAR 0 2
34140: NOT
34141: OR
34142: IFTRUE 34151
34144: PUSH
34145: LD_VAR 0 3
34149: NOT
34150: OR
34151: IFFALSE 34155
// exit ;
34153: GO 34981
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
34155: LD_ADDR_VAR 0 14
34159: PUSH
34160: LD_VAR 0 1
34164: PPUSH
34165: LD_VAR 0 2
34169: PPUSH
34170: LD_VAR 0 3
34174: PPUSH
34175: LD_VAR 0 4
34179: PPUSH
34180: LD_VAR 0 5
34184: PUSH
34185: LD_INT 1
34187: ARRAY
34188: PPUSH
34189: CALL_OW 248
34193: PPUSH
34194: LD_INT 0
34196: PPUSH
34197: CALL 36262 0 6
34201: ST_TO_ADDR
// if not hexes then
34202: LD_VAR 0 14
34206: NOT
34207: IFFALSE 34211
// exit ;
34209: GO 34981
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
34211: LD_ADDR_VAR 0 17
34215: PUSH
34216: LD_VAR 0 5
34220: PPUSH
34221: LD_INT 22
34223: PUSH
34224: LD_VAR 0 13
34228: PPUSH
34229: CALL_OW 255
34233: PUSH
34234: EMPTY
34235: LIST
34236: LIST
34237: PUSH
34238: LD_INT 2
34240: PUSH
34241: LD_INT 30
34243: PUSH
34244: LD_INT 0
34246: PUSH
34247: EMPTY
34248: LIST
34249: LIST
34250: PUSH
34251: LD_INT 30
34253: PUSH
34254: LD_INT 1
34256: PUSH
34257: EMPTY
34258: LIST
34259: LIST
34260: PUSH
34261: EMPTY
34262: LIST
34263: LIST
34264: LIST
34265: PUSH
34266: EMPTY
34267: LIST
34268: LIST
34269: PPUSH
34270: CALL_OW 72
34274: ST_TO_ADDR
// for i = 1 to hexes do
34275: LD_ADDR_VAR 0 9
34279: PUSH
34280: DOUBLE
34281: LD_INT 1
34283: DEC
34284: ST_TO_ADDR
34285: LD_VAR 0 14
34289: PUSH
34290: FOR_TO
34291: IFFALSE 34979
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
34293: LD_ADDR_VAR 0 13
34297: PUSH
34298: LD_VAR 0 14
34302: PUSH
34303: LD_VAR 0 9
34307: ARRAY
34308: PUSH
34309: LD_INT 1
34311: ARRAY
34312: PPUSH
34313: LD_VAR 0 14
34317: PUSH
34318: LD_VAR 0 9
34322: ARRAY
34323: PUSH
34324: LD_INT 2
34326: ARRAY
34327: PPUSH
34328: CALL_OW 428
34332: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
34333: LD_VAR 0 14
34337: PUSH
34338: LD_VAR 0 9
34342: ARRAY
34343: PUSH
34344: LD_INT 1
34346: ARRAY
34347: PPUSH
34348: LD_VAR 0 14
34352: PUSH
34353: LD_VAR 0 9
34357: ARRAY
34358: PUSH
34359: LD_INT 2
34361: ARRAY
34362: PPUSH
34363: CALL_OW 351
34367: IFTRUE 34406
34369: PUSH
34370: LD_VAR 0 14
34374: PUSH
34375: LD_VAR 0 9
34379: ARRAY
34380: PUSH
34381: LD_INT 1
34383: ARRAY
34384: PPUSH
34385: LD_VAR 0 14
34389: PUSH
34390: LD_VAR 0 9
34394: ARRAY
34395: PUSH
34396: LD_INT 2
34398: ARRAY
34399: PPUSH
34400: CALL_OW 488
34404: NOT
34405: OR
34406: IFTRUE 34423
34408: PUSH
34409: LD_VAR 0 13
34413: PPUSH
34414: CALL_OW 247
34418: PUSH
34419: LD_INT 3
34421: EQUAL
34422: OR
34423: IFFALSE 34429
// exit ;
34425: POP
34426: POP
34427: GO 34981
// if not tmp then
34429: LD_VAR 0 13
34433: NOT
34434: IFFALSE 34438
// continue ;
34436: GO 34290
// result := true ;
34438: LD_ADDR_VAR 0 8
34442: PUSH
34443: LD_INT 1
34445: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
34446: LD_VAR 0 6
34450: IFFALSE 34467
34452: PUSH
34453: LD_VAR 0 13
34457: PPUSH
34458: CALL_OW 247
34462: PUSH
34463: LD_INT 2
34465: EQUAL
34466: AND
34467: IFFALSE 34484
34469: PUSH
34470: LD_VAR 0 13
34474: PPUSH
34475: CALL_OW 263
34479: PUSH
34480: LD_INT 1
34482: EQUAL
34483: AND
34484: IFFALSE 34648
// begin if IsDrivenBy ( tmp ) then
34486: LD_VAR 0 13
34490: PPUSH
34491: CALL_OW 311
34495: IFFALSE 34499
// continue ;
34497: GO 34290
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
34499: LD_VAR 0 6
34503: PPUSH
34504: LD_INT 3
34506: PUSH
34507: LD_INT 60
34509: PUSH
34510: EMPTY
34511: LIST
34512: PUSH
34513: EMPTY
34514: LIST
34515: LIST
34516: PUSH
34517: LD_INT 3
34519: PUSH
34520: LD_INT 55
34522: PUSH
34523: EMPTY
34524: LIST
34525: PUSH
34526: EMPTY
34527: LIST
34528: LIST
34529: PUSH
34530: EMPTY
34531: LIST
34532: LIST
34533: PPUSH
34534: CALL_OW 72
34538: IFFALSE 34646
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
34540: LD_ADDR_VAR 0 18
34544: PUSH
34545: LD_VAR 0 6
34549: PPUSH
34550: LD_INT 3
34552: PUSH
34553: LD_INT 60
34555: PUSH
34556: EMPTY
34557: LIST
34558: PUSH
34559: EMPTY
34560: LIST
34561: LIST
34562: PUSH
34563: LD_INT 3
34565: PUSH
34566: LD_INT 55
34568: PUSH
34569: EMPTY
34570: LIST
34571: PUSH
34572: EMPTY
34573: LIST
34574: LIST
34575: PUSH
34576: EMPTY
34577: LIST
34578: LIST
34579: PPUSH
34580: CALL_OW 72
34584: PUSH
34585: LD_INT 1
34587: ARRAY
34588: ST_TO_ADDR
// if IsInUnit ( driver ) then
34589: LD_VAR 0 18
34593: PPUSH
34594: CALL_OW 310
34598: IFFALSE 34609
// ComExit ( driver ) ;
34600: LD_VAR 0 18
34604: PPUSH
34605: CALL 60252 0 1
// AddComEnterUnit ( driver , tmp ) ;
34609: LD_VAR 0 18
34613: PPUSH
34614: LD_VAR 0 13
34618: PPUSH
34619: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
34623: LD_VAR 0 18
34627: PPUSH
34628: LD_VAR 0 7
34632: PPUSH
34633: CALL_OW 173
// AddComExitVehicle ( driver ) ;
34637: LD_VAR 0 18
34641: PPUSH
34642: CALL_OW 181
// end ; continue ;
34646: GO 34290
// end ; if not cleaners or not tmp in cleaners then
34648: LD_VAR 0 6
34652: NOT
34653: IFTRUE 34668
34655: PUSH
34656: LD_VAR 0 13
34660: PUSH
34661: LD_VAR 0 6
34665: IN
34666: NOT
34667: OR
34668: IFFALSE 34977
// begin if dep then
34670: LD_VAR 0 17
34674: IFFALSE 34810
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
34676: LD_ADDR_VAR 0 16
34680: PUSH
34681: LD_VAR 0 17
34685: PUSH
34686: LD_INT 1
34688: ARRAY
34689: PPUSH
34690: CALL_OW 250
34694: PPUSH
34695: LD_VAR 0 17
34699: PUSH
34700: LD_INT 1
34702: ARRAY
34703: PPUSH
34704: CALL_OW 254
34708: PPUSH
34709: LD_INT 5
34711: PPUSH
34712: CALL_OW 272
34716: PUSH
34717: LD_VAR 0 17
34721: PUSH
34722: LD_INT 1
34724: ARRAY
34725: PPUSH
34726: CALL_OW 251
34730: PPUSH
34731: LD_VAR 0 17
34735: PUSH
34736: LD_INT 1
34738: ARRAY
34739: PPUSH
34740: CALL_OW 254
34744: PPUSH
34745: LD_INT 5
34747: PPUSH
34748: CALL_OW 273
34752: PUSH
34753: EMPTY
34754: LIST
34755: LIST
34756: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
34757: LD_VAR 0 16
34761: PUSH
34762: LD_INT 1
34764: ARRAY
34765: PPUSH
34766: LD_VAR 0 16
34770: PUSH
34771: LD_INT 2
34773: ARRAY
34774: PPUSH
34775: CALL_OW 488
34779: IFFALSE 34810
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
34781: LD_VAR 0 13
34785: PPUSH
34786: LD_VAR 0 16
34790: PUSH
34791: LD_INT 1
34793: ARRAY
34794: PPUSH
34795: LD_VAR 0 16
34799: PUSH
34800: LD_INT 2
34802: ARRAY
34803: PPUSH
34804: CALL_OW 111
// continue ;
34808: GO 34290
// end ; end ; r := GetDir ( tmp ) ;
34810: LD_ADDR_VAR 0 15
34814: PUSH
34815: LD_VAR 0 13
34819: PPUSH
34820: CALL_OW 254
34824: ST_TO_ADDR
// if r = 5 then
34825: LD_VAR 0 15
34829: PUSH
34830: LD_INT 5
34832: EQUAL
34833: IFFALSE 34843
// r := 0 ;
34835: LD_ADDR_VAR 0 15
34839: PUSH
34840: LD_INT 0
34842: ST_TO_ADDR
// for j = r to 5 do
34843: LD_ADDR_VAR 0 10
34847: PUSH
34848: DOUBLE
34849: LD_VAR 0 15
34853: DEC
34854: ST_TO_ADDR
34855: LD_INT 5
34857: PUSH
34858: FOR_TO
34859: IFFALSE 34975
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
34861: LD_ADDR_VAR 0 11
34865: PUSH
34866: LD_VAR 0 13
34870: PPUSH
34871: CALL_OW 250
34875: PPUSH
34876: LD_VAR 0 10
34880: PPUSH
34881: LD_INT 2
34883: PPUSH
34884: CALL_OW 272
34888: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
34889: LD_ADDR_VAR 0 12
34893: PUSH
34894: LD_VAR 0 13
34898: PPUSH
34899: CALL_OW 251
34903: PPUSH
34904: LD_VAR 0 10
34908: PPUSH
34909: LD_INT 2
34911: PPUSH
34912: CALL_OW 273
34916: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
34917: LD_VAR 0 11
34921: PPUSH
34922: LD_VAR 0 12
34926: PPUSH
34927: CALL_OW 488
34931: IFFALSE 34950
34933: PUSH
34934: LD_VAR 0 11
34938: PPUSH
34939: LD_VAR 0 12
34943: PPUSH
34944: CALL_OW 428
34948: NOT
34949: AND
34950: IFFALSE 34973
// begin ComMoveXY ( tmp , _x , _y ) ;
34952: LD_VAR 0 13
34956: PPUSH
34957: LD_VAR 0 11
34961: PPUSH
34962: LD_VAR 0 12
34966: PPUSH
34967: CALL_OW 111
// break ;
34971: GO 34975
// end ; end ;
34973: GO 34858
34975: POP
34976: POP
// end ; end ;
34977: GO 34290
34979: POP
34980: POP
// end ;
34981: LD_VAR 0 8
34985: RET
// export function BuildingTechInvented ( side , btype ) ; begin
34986: LD_INT 0
34988: PPUSH
// result := true ;
34989: LD_ADDR_VAR 0 3
34993: PUSH
34994: LD_INT 1
34996: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
34997: LD_VAR 0 2
35001: PUSH
35002: LD_INT 24
35004: DOUBLE
35005: EQUAL
35006: IFTRUE 35016
35008: LD_INT 33
35010: DOUBLE
35011: EQUAL
35012: IFTRUE 35016
35014: GO 35041
35016: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
35017: LD_ADDR_VAR 0 3
35021: PUSH
35022: LD_INT 32
35024: PPUSH
35025: LD_VAR 0 1
35029: PPUSH
35030: CALL_OW 321
35034: PUSH
35035: LD_INT 2
35037: EQUAL
35038: ST_TO_ADDR
35039: GO 35357
35041: LD_INT 20
35043: DOUBLE
35044: EQUAL
35045: IFTRUE 35049
35047: GO 35074
35049: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
35050: LD_ADDR_VAR 0 3
35054: PUSH
35055: LD_INT 6
35057: PPUSH
35058: LD_VAR 0 1
35062: PPUSH
35063: CALL_OW 321
35067: PUSH
35068: LD_INT 2
35070: EQUAL
35071: ST_TO_ADDR
35072: GO 35357
35074: LD_INT 22
35076: DOUBLE
35077: EQUAL
35078: IFTRUE 35088
35080: LD_INT 36
35082: DOUBLE
35083: EQUAL
35084: IFTRUE 35088
35086: GO 35113
35088: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
35089: LD_ADDR_VAR 0 3
35093: PUSH
35094: LD_INT 15
35096: PPUSH
35097: LD_VAR 0 1
35101: PPUSH
35102: CALL_OW 321
35106: PUSH
35107: LD_INT 2
35109: EQUAL
35110: ST_TO_ADDR
35111: GO 35357
35113: LD_INT 30
35115: DOUBLE
35116: EQUAL
35117: IFTRUE 35121
35119: GO 35146
35121: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
35122: LD_ADDR_VAR 0 3
35126: PUSH
35127: LD_INT 20
35129: PPUSH
35130: LD_VAR 0 1
35134: PPUSH
35135: CALL_OW 321
35139: PUSH
35140: LD_INT 2
35142: EQUAL
35143: ST_TO_ADDR
35144: GO 35357
35146: LD_INT 28
35148: DOUBLE
35149: EQUAL
35150: IFTRUE 35160
35152: LD_INT 21
35154: DOUBLE
35155: EQUAL
35156: IFTRUE 35160
35158: GO 35185
35160: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
35161: LD_ADDR_VAR 0 3
35165: PUSH
35166: LD_INT 21
35168: PPUSH
35169: LD_VAR 0 1
35173: PPUSH
35174: CALL_OW 321
35178: PUSH
35179: LD_INT 2
35181: EQUAL
35182: ST_TO_ADDR
35183: GO 35357
35185: LD_INT 16
35187: DOUBLE
35188: EQUAL
35189: IFTRUE 35193
35191: GO 35218
35193: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
35194: LD_ADDR_VAR 0 3
35198: PUSH
35199: LD_INT 84
35201: PPUSH
35202: LD_VAR 0 1
35206: PPUSH
35207: CALL_OW 321
35211: PUSH
35212: LD_INT 2
35214: EQUAL
35215: ST_TO_ADDR
35216: GO 35357
35218: LD_INT 19
35220: DOUBLE
35221: EQUAL
35222: IFTRUE 35232
35224: LD_INT 23
35226: DOUBLE
35227: EQUAL
35228: IFTRUE 35232
35230: GO 35257
35232: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
35233: LD_ADDR_VAR 0 3
35237: PUSH
35238: LD_INT 83
35240: PPUSH
35241: LD_VAR 0 1
35245: PPUSH
35246: CALL_OW 321
35250: PUSH
35251: LD_INT 2
35253: EQUAL
35254: ST_TO_ADDR
35255: GO 35357
35257: LD_INT 17
35259: DOUBLE
35260: EQUAL
35261: IFTRUE 35265
35263: GO 35290
35265: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
35266: LD_ADDR_VAR 0 3
35270: PUSH
35271: LD_INT 39
35273: PPUSH
35274: LD_VAR 0 1
35278: PPUSH
35279: CALL_OW 321
35283: PUSH
35284: LD_INT 2
35286: EQUAL
35287: ST_TO_ADDR
35288: GO 35357
35290: LD_INT 18
35292: DOUBLE
35293: EQUAL
35294: IFTRUE 35298
35296: GO 35323
35298: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
35299: LD_ADDR_VAR 0 3
35303: PUSH
35304: LD_INT 40
35306: PPUSH
35307: LD_VAR 0 1
35311: PPUSH
35312: CALL_OW 321
35316: PUSH
35317: LD_INT 2
35319: EQUAL
35320: ST_TO_ADDR
35321: GO 35357
35323: LD_INT 27
35325: DOUBLE
35326: EQUAL
35327: IFTRUE 35331
35329: GO 35356
35331: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
35332: LD_ADDR_VAR 0 3
35336: PUSH
35337: LD_INT 35
35339: PPUSH
35340: LD_VAR 0 1
35344: PPUSH
35345: CALL_OW 321
35349: PUSH
35350: LD_INT 2
35352: EQUAL
35353: ST_TO_ADDR
35354: GO 35357
35356: POP
// end ;
35357: LD_VAR 0 3
35361: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
35362: LD_INT 0
35364: PPUSH
35365: PPUSH
35366: PPUSH
35367: PPUSH
35368: PPUSH
35369: PPUSH
35370: PPUSH
35371: PPUSH
35372: PPUSH
35373: PPUSH
35374: PPUSH
// result := false ;
35375: LD_ADDR_VAR 0 6
35379: PUSH
35380: LD_INT 0
35382: ST_TO_ADDR
// if btype = b_depot then
35383: LD_VAR 0 2
35387: PUSH
35388: LD_INT 0
35390: EQUAL
35391: IFFALSE 35403
// begin result := true ;
35393: LD_ADDR_VAR 0 6
35397: PUSH
35398: LD_INT 1
35400: ST_TO_ADDR
// exit ;
35401: GO 36257
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
35403: LD_VAR 0 1
35407: NOT
35408: IFTRUE 35433
35410: PUSH
35411: LD_VAR 0 1
35415: PPUSH
35416: CALL_OW 266
35420: PUSH
35421: LD_INT 0
35423: PUSH
35424: LD_INT 1
35426: PUSH
35427: EMPTY
35428: LIST
35429: LIST
35430: IN
35431: NOT
35432: OR
35433: IFTRUE 35442
35435: PUSH
35436: LD_VAR 0 2
35440: NOT
35441: OR
35442: IFTRUE 35478
35444: PUSH
35445: LD_VAR 0 5
35449: PUSH
35450: LD_INT 0
35452: PUSH
35453: LD_INT 1
35455: PUSH
35456: LD_INT 2
35458: PUSH
35459: LD_INT 3
35461: PUSH
35462: LD_INT 4
35464: PUSH
35465: LD_INT 5
35467: PUSH
35468: EMPTY
35469: LIST
35470: LIST
35471: LIST
35472: LIST
35473: LIST
35474: LIST
35475: IN
35476: NOT
35477: OR
35478: IFTRUE 35497
35480: PUSH
35481: LD_VAR 0 3
35485: PPUSH
35486: LD_VAR 0 4
35490: PPUSH
35491: CALL_OW 488
35495: NOT
35496: OR
35497: IFFALSE 35501
// exit ;
35499: GO 36257
// side := GetSide ( depot ) ;
35501: LD_ADDR_VAR 0 9
35505: PUSH
35506: LD_VAR 0 1
35510: PPUSH
35511: CALL_OW 255
35515: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
35516: LD_VAR 0 9
35520: PPUSH
35521: LD_VAR 0 2
35525: PPUSH
35526: CALL 34986 0 2
35530: NOT
35531: IFFALSE 35535
// exit ;
35533: GO 36257
// pom := GetBase ( depot ) ;
35535: LD_ADDR_VAR 0 10
35539: PUSH
35540: LD_VAR 0 1
35544: PPUSH
35545: CALL_OW 274
35549: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
35550: LD_ADDR_VAR 0 11
35554: PUSH
35555: LD_VAR 0 2
35559: PPUSH
35560: LD_VAR 0 1
35564: PPUSH
35565: CALL_OW 248
35569: PPUSH
35570: CALL_OW 450
35574: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
35575: LD_VAR 0 10
35579: PPUSH
35580: LD_INT 1
35582: PPUSH
35583: CALL_OW 275
35587: PUSH
35588: LD_VAR 0 11
35592: PUSH
35593: LD_INT 1
35595: ARRAY
35596: GREATEREQUAL
35597: IFFALSE 35623
35599: PUSH
35600: LD_VAR 0 10
35604: PPUSH
35605: LD_INT 2
35607: PPUSH
35608: CALL_OW 275
35612: PUSH
35613: LD_VAR 0 11
35617: PUSH
35618: LD_INT 2
35620: ARRAY
35621: GREATEREQUAL
35622: AND
35623: IFFALSE 35649
35625: PUSH
35626: LD_VAR 0 10
35630: PPUSH
35631: LD_INT 3
35633: PPUSH
35634: CALL_OW 275
35638: PUSH
35639: LD_VAR 0 11
35643: PUSH
35644: LD_INT 3
35646: ARRAY
35647: GREATEREQUAL
35648: AND
35649: NOT
35650: IFFALSE 35654
// exit ;
35652: GO 36257
// if GetBType ( depot ) = b_depot then
35654: LD_VAR 0 1
35658: PPUSH
35659: CALL_OW 266
35663: PUSH
35664: LD_INT 0
35666: EQUAL
35667: IFFALSE 35679
// dist := 28 else
35669: LD_ADDR_VAR 0 14
35673: PUSH
35674: LD_INT 28
35676: ST_TO_ADDR
35677: GO 35687
// dist := 36 ;
35679: LD_ADDR_VAR 0 14
35683: PUSH
35684: LD_INT 36
35686: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
35687: LD_VAR 0 1
35691: PPUSH
35692: LD_VAR 0 3
35696: PPUSH
35697: LD_VAR 0 4
35701: PPUSH
35702: CALL_OW 297
35706: PUSH
35707: LD_VAR 0 14
35711: GREATER
35712: IFFALSE 35716
// exit ;
35714: GO 36257
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
35716: LD_ADDR_VAR 0 12
35720: PUSH
35721: LD_VAR 0 2
35725: PPUSH
35726: LD_VAR 0 3
35730: PPUSH
35731: LD_VAR 0 4
35735: PPUSH
35736: LD_VAR 0 5
35740: PPUSH
35741: LD_VAR 0 1
35745: PPUSH
35746: CALL_OW 248
35750: PPUSH
35751: LD_INT 0
35753: PPUSH
35754: CALL 36262 0 6
35758: ST_TO_ADDR
// if not hexes then
35759: LD_VAR 0 12
35763: NOT
35764: IFFALSE 35768
// exit ;
35766: GO 36257
// hex := GetHexInfo ( x , y ) ;
35768: LD_ADDR_VAR 0 15
35772: PUSH
35773: LD_VAR 0 3
35777: PPUSH
35778: LD_VAR 0 4
35782: PPUSH
35783: CALL_OW 546
35787: ST_TO_ADDR
// if hex [ 1 ] then
35788: LD_VAR 0 15
35792: PUSH
35793: LD_INT 1
35795: ARRAY
35796: IFFALSE 35800
// exit ;
35798: GO 36257
// height := hex [ 2 ] ;
35800: LD_ADDR_VAR 0 13
35804: PUSH
35805: LD_VAR 0 15
35809: PUSH
35810: LD_INT 2
35812: ARRAY
35813: ST_TO_ADDR
// for i = 1 to hexes do
35814: LD_ADDR_VAR 0 7
35818: PUSH
35819: DOUBLE
35820: LD_INT 1
35822: DEC
35823: ST_TO_ADDR
35824: LD_VAR 0 12
35828: PUSH
35829: FOR_TO
35830: IFFALSE 36174
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
35832: LD_VAR 0 12
35836: PUSH
35837: LD_VAR 0 7
35841: ARRAY
35842: PUSH
35843: LD_INT 1
35845: ARRAY
35846: PPUSH
35847: LD_VAR 0 12
35851: PUSH
35852: LD_VAR 0 7
35856: ARRAY
35857: PUSH
35858: LD_INT 2
35860: ARRAY
35861: PPUSH
35862: CALL_OW 488
35866: NOT
35867: IFTRUE 35909
35869: PUSH
35870: LD_VAR 0 12
35874: PUSH
35875: LD_VAR 0 7
35879: ARRAY
35880: PUSH
35881: LD_INT 1
35883: ARRAY
35884: PPUSH
35885: LD_VAR 0 12
35889: PUSH
35890: LD_VAR 0 7
35894: ARRAY
35895: PUSH
35896: LD_INT 2
35898: ARRAY
35899: PPUSH
35900: CALL_OW 428
35904: PUSH
35905: LD_INT 0
35907: GREATER
35908: OR
35909: IFTRUE 35947
35911: PUSH
35912: LD_VAR 0 12
35916: PUSH
35917: LD_VAR 0 7
35921: ARRAY
35922: PUSH
35923: LD_INT 1
35925: ARRAY
35926: PPUSH
35927: LD_VAR 0 12
35931: PUSH
35932: LD_VAR 0 7
35936: ARRAY
35937: PUSH
35938: LD_INT 2
35940: ARRAY
35941: PPUSH
35942: CALL_OW 351
35946: OR
35947: IFFALSE 35953
// exit ;
35949: POP
35950: POP
35951: GO 36257
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
35953: LD_ADDR_VAR 0 8
35957: PUSH
35958: LD_VAR 0 12
35962: PUSH
35963: LD_VAR 0 7
35967: ARRAY
35968: PUSH
35969: LD_INT 1
35971: ARRAY
35972: PPUSH
35973: LD_VAR 0 12
35977: PUSH
35978: LD_VAR 0 7
35982: ARRAY
35983: PUSH
35984: LD_INT 2
35986: ARRAY
35987: PPUSH
35988: CALL_OW 546
35992: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
35993: LD_VAR 0 8
35997: PUSH
35998: LD_INT 1
36000: ARRAY
36001: IFTRUE 36023
36003: PUSH
36004: LD_VAR 0 8
36008: PUSH
36009: LD_INT 2
36011: ARRAY
36012: PUSH
36013: LD_VAR 0 13
36017: PUSH
36018: LD_INT 2
36020: PLUS
36021: GREATER
36022: OR
36023: IFTRUE 36045
36025: PUSH
36026: LD_VAR 0 8
36030: PUSH
36031: LD_INT 2
36033: ARRAY
36034: PUSH
36035: LD_VAR 0 13
36039: PUSH
36040: LD_INT 2
36042: MINUS
36043: LESS
36044: OR
36045: IFTRUE 36113
36047: PUSH
36048: LD_VAR 0 8
36052: PUSH
36053: LD_INT 3
36055: ARRAY
36056: PUSH
36057: LD_INT 0
36059: PUSH
36060: LD_INT 8
36062: PUSH
36063: LD_INT 9
36065: PUSH
36066: LD_INT 10
36068: PUSH
36069: LD_INT 11
36071: PUSH
36072: LD_INT 12
36074: PUSH
36075: LD_INT 13
36077: PUSH
36078: LD_INT 16
36080: PUSH
36081: LD_INT 17
36083: PUSH
36084: LD_INT 18
36086: PUSH
36087: LD_INT 19
36089: PUSH
36090: LD_INT 20
36092: PUSH
36093: LD_INT 21
36095: PUSH
36096: EMPTY
36097: LIST
36098: LIST
36099: LIST
36100: LIST
36101: LIST
36102: LIST
36103: LIST
36104: LIST
36105: LIST
36106: LIST
36107: LIST
36108: LIST
36109: LIST
36110: IN
36111: NOT
36112: OR
36113: IFTRUE 36126
36115: PUSH
36116: LD_VAR 0 8
36120: PUSH
36121: LD_INT 5
36123: ARRAY
36124: NOT
36125: OR
36126: IFTRUE 36166
36128: PUSH
36129: LD_VAR 0 8
36133: PUSH
36134: LD_INT 6
36136: ARRAY
36137: PUSH
36138: LD_INT 1
36140: PUSH
36141: LD_INT 2
36143: PUSH
36144: LD_INT 7
36146: PUSH
36147: LD_INT 9
36149: PUSH
36150: LD_INT 10
36152: PUSH
36153: LD_INT 11
36155: PUSH
36156: EMPTY
36157: LIST
36158: LIST
36159: LIST
36160: LIST
36161: LIST
36162: LIST
36163: IN
36164: NOT
36165: OR
36166: IFFALSE 36172
// exit ;
36168: POP
36169: POP
36170: GO 36257
// end ;
36172: GO 35829
36174: POP
36175: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
36176: LD_VAR 0 9
36180: PPUSH
36181: LD_VAR 0 3
36185: PPUSH
36186: LD_VAR 0 4
36190: PPUSH
36191: LD_INT 20
36193: PPUSH
36194: CALL 28076 0 4
36198: PUSH
36199: LD_INT 4
36201: ARRAY
36202: IFFALSE 36206
// exit ;
36204: GO 36257
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
36206: LD_VAR 0 2
36210: PUSH
36211: LD_INT 29
36213: PUSH
36214: LD_INT 30
36216: PUSH
36217: EMPTY
36218: LIST
36219: LIST
36220: IN
36221: IFFALSE 36245
36223: PUSH
36224: LD_VAR 0 3
36228: PPUSH
36229: LD_VAR 0 4
36233: PPUSH
36234: LD_VAR 0 9
36238: PPUSH
36239: CALL_OW 440
36243: NOT
36244: AND
36245: IFFALSE 36249
// exit ;
36247: GO 36257
// result := true ;
36249: LD_ADDR_VAR 0 6
36253: PUSH
36254: LD_INT 1
36256: ST_TO_ADDR
// end ;
36257: LD_VAR 0 6
36261: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
36262: LD_INT 0
36264: PPUSH
36265: PPUSH
36266: PPUSH
36267: PPUSH
36268: PPUSH
36269: PPUSH
36270: PPUSH
36271: PPUSH
36272: PPUSH
36273: PPUSH
36274: PPUSH
36275: PPUSH
36276: PPUSH
36277: PPUSH
36278: PPUSH
36279: PPUSH
36280: PPUSH
36281: PPUSH
36282: PPUSH
36283: PPUSH
36284: PPUSH
36285: PPUSH
36286: PPUSH
36287: PPUSH
36288: PPUSH
36289: PPUSH
36290: PPUSH
36291: PPUSH
36292: PPUSH
36293: PPUSH
36294: PPUSH
36295: PPUSH
36296: PPUSH
36297: PPUSH
36298: PPUSH
36299: PPUSH
36300: PPUSH
36301: PPUSH
36302: PPUSH
36303: PPUSH
36304: PPUSH
36305: PPUSH
36306: PPUSH
36307: PPUSH
36308: PPUSH
36309: PPUSH
36310: PPUSH
36311: PPUSH
36312: PPUSH
36313: PPUSH
36314: PPUSH
36315: PPUSH
36316: PPUSH
36317: PPUSH
36318: PPUSH
36319: PPUSH
36320: PPUSH
36321: PPUSH
// result = [ ] ;
36322: LD_ADDR_VAR 0 7
36326: PUSH
36327: EMPTY
36328: ST_TO_ADDR
// temp_list = [ ] ;
36329: LD_ADDR_VAR 0 9
36333: PUSH
36334: EMPTY
36335: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
36336: LD_VAR 0 4
36340: PUSH
36341: LD_INT 0
36343: PUSH
36344: LD_INT 1
36346: PUSH
36347: LD_INT 2
36349: PUSH
36350: LD_INT 3
36352: PUSH
36353: LD_INT 4
36355: PUSH
36356: LD_INT 5
36358: PUSH
36359: EMPTY
36360: LIST
36361: LIST
36362: LIST
36363: LIST
36364: LIST
36365: LIST
36366: IN
36367: NOT
36368: IFTRUE 36411
36370: PUSH
36371: LD_VAR 0 1
36375: PUSH
36376: LD_INT 0
36378: PUSH
36379: LD_INT 1
36381: PUSH
36382: EMPTY
36383: LIST
36384: LIST
36385: IN
36386: IFFALSE 36410
36388: PUSH
36389: LD_VAR 0 5
36393: PUSH
36394: LD_INT 1
36396: PUSH
36397: LD_INT 2
36399: PUSH
36400: LD_INT 3
36402: PUSH
36403: EMPTY
36404: LIST
36405: LIST
36406: LIST
36407: IN
36408: NOT
36409: AND
36410: OR
36411: IFFALSE 36415
// exit ;
36413: GO 54814
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
36415: LD_VAR 0 1
36419: PUSH
36420: LD_INT 6
36422: PUSH
36423: LD_INT 7
36425: PUSH
36426: LD_INT 8
36428: PUSH
36429: LD_INT 13
36431: PUSH
36432: LD_INT 12
36434: PUSH
36435: LD_INT 15
36437: PUSH
36438: LD_INT 11
36440: PUSH
36441: LD_INT 14
36443: PUSH
36444: LD_INT 10
36446: PUSH
36447: EMPTY
36448: LIST
36449: LIST
36450: LIST
36451: LIST
36452: LIST
36453: LIST
36454: LIST
36455: LIST
36456: LIST
36457: IN
36458: IFFALSE 36468
// btype = b_lab ;
36460: LD_ADDR_VAR 0 1
36464: PUSH
36465: LD_INT 6
36467: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
36468: LD_VAR 0 6
36472: PUSH
36473: LD_INT 0
36475: PUSH
36476: LD_INT 1
36478: PUSH
36479: LD_INT 2
36481: PUSH
36482: EMPTY
36483: LIST
36484: LIST
36485: LIST
36486: IN
36487: NOT
36488: IFTRUE 36556
36490: PUSH
36491: LD_VAR 0 1
36495: PUSH
36496: LD_INT 0
36498: PUSH
36499: LD_INT 1
36501: PUSH
36502: LD_INT 2
36504: PUSH
36505: LD_INT 3
36507: PUSH
36508: LD_INT 6
36510: PUSH
36511: LD_INT 36
36513: PUSH
36514: LD_INT 4
36516: PUSH
36517: LD_INT 5
36519: PUSH
36520: LD_INT 31
36522: PUSH
36523: LD_INT 32
36525: PUSH
36526: LD_INT 33
36528: PUSH
36529: EMPTY
36530: LIST
36531: LIST
36532: LIST
36533: LIST
36534: LIST
36535: LIST
36536: LIST
36537: LIST
36538: LIST
36539: LIST
36540: LIST
36541: IN
36542: NOT
36543: IFFALSE 36555
36545: PUSH
36546: LD_VAR 0 6
36550: PUSH
36551: LD_INT 1
36553: EQUAL
36554: AND
36555: OR
36556: IFTRUE 36588
36558: PUSH
36559: LD_VAR 0 1
36563: PUSH
36564: LD_INT 2
36566: PUSH
36567: LD_INT 3
36569: PUSH
36570: EMPTY
36571: LIST
36572: LIST
36573: IN
36574: NOT
36575: IFFALSE 36587
36577: PUSH
36578: LD_VAR 0 6
36582: PUSH
36583: LD_INT 2
36585: EQUAL
36586: AND
36587: OR
36588: IFFALSE 36598
// mode = 0 ;
36590: LD_ADDR_VAR 0 6
36594: PUSH
36595: LD_INT 0
36597: ST_TO_ADDR
// case mode of 0 :
36598: LD_VAR 0 6
36602: PUSH
36603: LD_INT 0
36605: DOUBLE
36606: EQUAL
36607: IFTRUE 36611
36609: GO 48064
36611: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
36612: LD_ADDR_VAR 0 11
36616: PUSH
36617: LD_INT 0
36619: PUSH
36620: LD_INT 0
36622: PUSH
36623: EMPTY
36624: LIST
36625: LIST
36626: PUSH
36627: LD_INT 0
36629: PUSH
36630: LD_INT 1
36632: NEG
36633: PUSH
36634: EMPTY
36635: LIST
36636: LIST
36637: PUSH
36638: LD_INT 1
36640: PUSH
36641: LD_INT 0
36643: PUSH
36644: EMPTY
36645: LIST
36646: LIST
36647: PUSH
36648: LD_INT 1
36650: PUSH
36651: LD_INT 1
36653: PUSH
36654: EMPTY
36655: LIST
36656: LIST
36657: PUSH
36658: LD_INT 0
36660: PUSH
36661: LD_INT 1
36663: PUSH
36664: EMPTY
36665: LIST
36666: LIST
36667: PUSH
36668: LD_INT 1
36670: NEG
36671: PUSH
36672: LD_INT 0
36674: PUSH
36675: EMPTY
36676: LIST
36677: LIST
36678: PUSH
36679: LD_INT 1
36681: NEG
36682: PUSH
36683: LD_INT 1
36685: NEG
36686: PUSH
36687: EMPTY
36688: LIST
36689: LIST
36690: PUSH
36691: LD_INT 1
36693: NEG
36694: PUSH
36695: LD_INT 2
36697: NEG
36698: PUSH
36699: EMPTY
36700: LIST
36701: LIST
36702: PUSH
36703: LD_INT 0
36705: PUSH
36706: LD_INT 2
36708: NEG
36709: PUSH
36710: EMPTY
36711: LIST
36712: LIST
36713: PUSH
36714: LD_INT 1
36716: PUSH
36717: LD_INT 1
36719: NEG
36720: PUSH
36721: EMPTY
36722: LIST
36723: LIST
36724: PUSH
36725: LD_INT 1
36727: PUSH
36728: LD_INT 2
36730: PUSH
36731: EMPTY
36732: LIST
36733: LIST
36734: PUSH
36735: LD_INT 0
36737: PUSH
36738: LD_INT 2
36740: PUSH
36741: EMPTY
36742: LIST
36743: LIST
36744: PUSH
36745: LD_INT 1
36747: NEG
36748: PUSH
36749: LD_INT 1
36751: PUSH
36752: EMPTY
36753: LIST
36754: LIST
36755: PUSH
36756: LD_INT 1
36758: PUSH
36759: LD_INT 3
36761: PUSH
36762: EMPTY
36763: LIST
36764: LIST
36765: PUSH
36766: LD_INT 0
36768: PUSH
36769: LD_INT 3
36771: PUSH
36772: EMPTY
36773: LIST
36774: LIST
36775: PUSH
36776: LD_INT 1
36778: NEG
36779: PUSH
36780: LD_INT 2
36782: PUSH
36783: EMPTY
36784: LIST
36785: LIST
36786: PUSH
36787: EMPTY
36788: LIST
36789: LIST
36790: LIST
36791: LIST
36792: LIST
36793: LIST
36794: LIST
36795: LIST
36796: LIST
36797: LIST
36798: LIST
36799: LIST
36800: LIST
36801: LIST
36802: LIST
36803: LIST
36804: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
36805: LD_ADDR_VAR 0 12
36809: PUSH
36810: LD_INT 0
36812: PUSH
36813: LD_INT 0
36815: PUSH
36816: EMPTY
36817: LIST
36818: LIST
36819: PUSH
36820: LD_INT 0
36822: PUSH
36823: LD_INT 1
36825: NEG
36826: PUSH
36827: EMPTY
36828: LIST
36829: LIST
36830: PUSH
36831: LD_INT 1
36833: PUSH
36834: LD_INT 0
36836: PUSH
36837: EMPTY
36838: LIST
36839: LIST
36840: PUSH
36841: LD_INT 1
36843: PUSH
36844: LD_INT 1
36846: PUSH
36847: EMPTY
36848: LIST
36849: LIST
36850: PUSH
36851: LD_INT 0
36853: PUSH
36854: LD_INT 1
36856: PUSH
36857: EMPTY
36858: LIST
36859: LIST
36860: PUSH
36861: LD_INT 1
36863: NEG
36864: PUSH
36865: LD_INT 0
36867: PUSH
36868: EMPTY
36869: LIST
36870: LIST
36871: PUSH
36872: LD_INT 1
36874: NEG
36875: PUSH
36876: LD_INT 1
36878: NEG
36879: PUSH
36880: EMPTY
36881: LIST
36882: LIST
36883: PUSH
36884: LD_INT 1
36886: PUSH
36887: LD_INT 1
36889: NEG
36890: PUSH
36891: EMPTY
36892: LIST
36893: LIST
36894: PUSH
36895: LD_INT 2
36897: PUSH
36898: LD_INT 0
36900: PUSH
36901: EMPTY
36902: LIST
36903: LIST
36904: PUSH
36905: LD_INT 2
36907: PUSH
36908: LD_INT 1
36910: PUSH
36911: EMPTY
36912: LIST
36913: LIST
36914: PUSH
36915: LD_INT 1
36917: NEG
36918: PUSH
36919: LD_INT 1
36921: PUSH
36922: EMPTY
36923: LIST
36924: LIST
36925: PUSH
36926: LD_INT 2
36928: NEG
36929: PUSH
36930: LD_INT 0
36932: PUSH
36933: EMPTY
36934: LIST
36935: LIST
36936: PUSH
36937: LD_INT 2
36939: NEG
36940: PUSH
36941: LD_INT 1
36943: NEG
36944: PUSH
36945: EMPTY
36946: LIST
36947: LIST
36948: PUSH
36949: LD_INT 2
36951: NEG
36952: PUSH
36953: LD_INT 1
36955: PUSH
36956: EMPTY
36957: LIST
36958: LIST
36959: PUSH
36960: LD_INT 3
36962: NEG
36963: PUSH
36964: LD_INT 0
36966: PUSH
36967: EMPTY
36968: LIST
36969: LIST
36970: PUSH
36971: LD_INT 3
36973: NEG
36974: PUSH
36975: LD_INT 1
36977: NEG
36978: PUSH
36979: EMPTY
36980: LIST
36981: LIST
36982: PUSH
36983: EMPTY
36984: LIST
36985: LIST
36986: LIST
36987: LIST
36988: LIST
36989: LIST
36990: LIST
36991: LIST
36992: LIST
36993: LIST
36994: LIST
36995: LIST
36996: LIST
36997: LIST
36998: LIST
36999: LIST
37000: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
37001: LD_ADDR_VAR 0 13
37005: PUSH
37006: LD_INT 0
37008: PUSH
37009: LD_INT 0
37011: PUSH
37012: EMPTY
37013: LIST
37014: LIST
37015: PUSH
37016: LD_INT 0
37018: PUSH
37019: LD_INT 1
37021: NEG
37022: PUSH
37023: EMPTY
37024: LIST
37025: LIST
37026: PUSH
37027: LD_INT 1
37029: PUSH
37030: LD_INT 0
37032: PUSH
37033: EMPTY
37034: LIST
37035: LIST
37036: PUSH
37037: LD_INT 1
37039: PUSH
37040: LD_INT 1
37042: PUSH
37043: EMPTY
37044: LIST
37045: LIST
37046: PUSH
37047: LD_INT 0
37049: PUSH
37050: LD_INT 1
37052: PUSH
37053: EMPTY
37054: LIST
37055: LIST
37056: PUSH
37057: LD_INT 1
37059: NEG
37060: PUSH
37061: LD_INT 0
37063: PUSH
37064: EMPTY
37065: LIST
37066: LIST
37067: PUSH
37068: LD_INT 1
37070: NEG
37071: PUSH
37072: LD_INT 1
37074: NEG
37075: PUSH
37076: EMPTY
37077: LIST
37078: LIST
37079: PUSH
37080: LD_INT 1
37082: NEG
37083: PUSH
37084: LD_INT 2
37086: NEG
37087: PUSH
37088: EMPTY
37089: LIST
37090: LIST
37091: PUSH
37092: LD_INT 2
37094: PUSH
37095: LD_INT 1
37097: PUSH
37098: EMPTY
37099: LIST
37100: LIST
37101: PUSH
37102: LD_INT 2
37104: PUSH
37105: LD_INT 2
37107: PUSH
37108: EMPTY
37109: LIST
37110: LIST
37111: PUSH
37112: LD_INT 1
37114: PUSH
37115: LD_INT 2
37117: PUSH
37118: EMPTY
37119: LIST
37120: LIST
37121: PUSH
37122: LD_INT 2
37124: NEG
37125: PUSH
37126: LD_INT 1
37128: NEG
37129: PUSH
37130: EMPTY
37131: LIST
37132: LIST
37133: PUSH
37134: LD_INT 2
37136: NEG
37137: PUSH
37138: LD_INT 2
37140: NEG
37141: PUSH
37142: EMPTY
37143: LIST
37144: LIST
37145: PUSH
37146: LD_INT 2
37148: NEG
37149: PUSH
37150: LD_INT 3
37152: NEG
37153: PUSH
37154: EMPTY
37155: LIST
37156: LIST
37157: PUSH
37158: LD_INT 3
37160: NEG
37161: PUSH
37162: LD_INT 2
37164: NEG
37165: PUSH
37166: EMPTY
37167: LIST
37168: LIST
37169: PUSH
37170: LD_INT 3
37172: NEG
37173: PUSH
37174: LD_INT 3
37176: NEG
37177: PUSH
37178: EMPTY
37179: LIST
37180: LIST
37181: PUSH
37182: EMPTY
37183: LIST
37184: LIST
37185: LIST
37186: LIST
37187: LIST
37188: LIST
37189: LIST
37190: LIST
37191: LIST
37192: LIST
37193: LIST
37194: LIST
37195: LIST
37196: LIST
37197: LIST
37198: LIST
37199: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
37200: LD_ADDR_VAR 0 14
37204: PUSH
37205: LD_INT 0
37207: PUSH
37208: LD_INT 0
37210: PUSH
37211: EMPTY
37212: LIST
37213: LIST
37214: PUSH
37215: LD_INT 0
37217: PUSH
37218: LD_INT 1
37220: NEG
37221: PUSH
37222: EMPTY
37223: LIST
37224: LIST
37225: PUSH
37226: LD_INT 1
37228: PUSH
37229: LD_INT 0
37231: PUSH
37232: EMPTY
37233: LIST
37234: LIST
37235: PUSH
37236: LD_INT 1
37238: PUSH
37239: LD_INT 1
37241: PUSH
37242: EMPTY
37243: LIST
37244: LIST
37245: PUSH
37246: LD_INT 0
37248: PUSH
37249: LD_INT 1
37251: PUSH
37252: EMPTY
37253: LIST
37254: LIST
37255: PUSH
37256: LD_INT 1
37258: NEG
37259: PUSH
37260: LD_INT 0
37262: PUSH
37263: EMPTY
37264: LIST
37265: LIST
37266: PUSH
37267: LD_INT 1
37269: NEG
37270: PUSH
37271: LD_INT 1
37273: NEG
37274: PUSH
37275: EMPTY
37276: LIST
37277: LIST
37278: PUSH
37279: LD_INT 1
37281: NEG
37282: PUSH
37283: LD_INT 2
37285: NEG
37286: PUSH
37287: EMPTY
37288: LIST
37289: LIST
37290: PUSH
37291: LD_INT 0
37293: PUSH
37294: LD_INT 2
37296: NEG
37297: PUSH
37298: EMPTY
37299: LIST
37300: LIST
37301: PUSH
37302: LD_INT 1
37304: PUSH
37305: LD_INT 1
37307: NEG
37308: PUSH
37309: EMPTY
37310: LIST
37311: LIST
37312: PUSH
37313: LD_INT 1
37315: PUSH
37316: LD_INT 2
37318: PUSH
37319: EMPTY
37320: LIST
37321: LIST
37322: PUSH
37323: LD_INT 0
37325: PUSH
37326: LD_INT 2
37328: PUSH
37329: EMPTY
37330: LIST
37331: LIST
37332: PUSH
37333: LD_INT 1
37335: NEG
37336: PUSH
37337: LD_INT 1
37339: PUSH
37340: EMPTY
37341: LIST
37342: LIST
37343: PUSH
37344: LD_INT 1
37346: NEG
37347: PUSH
37348: LD_INT 3
37350: NEG
37351: PUSH
37352: EMPTY
37353: LIST
37354: LIST
37355: PUSH
37356: LD_INT 0
37358: PUSH
37359: LD_INT 3
37361: NEG
37362: PUSH
37363: EMPTY
37364: LIST
37365: LIST
37366: PUSH
37367: LD_INT 1
37369: PUSH
37370: LD_INT 2
37372: NEG
37373: PUSH
37374: EMPTY
37375: LIST
37376: LIST
37377: PUSH
37378: EMPTY
37379: LIST
37380: LIST
37381: LIST
37382: LIST
37383: LIST
37384: LIST
37385: LIST
37386: LIST
37387: LIST
37388: LIST
37389: LIST
37390: LIST
37391: LIST
37392: LIST
37393: LIST
37394: LIST
37395: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
37396: LD_ADDR_VAR 0 15
37400: PUSH
37401: LD_INT 0
37403: PUSH
37404: LD_INT 0
37406: PUSH
37407: EMPTY
37408: LIST
37409: LIST
37410: PUSH
37411: LD_INT 0
37413: PUSH
37414: LD_INT 1
37416: NEG
37417: PUSH
37418: EMPTY
37419: LIST
37420: LIST
37421: PUSH
37422: LD_INT 1
37424: PUSH
37425: LD_INT 0
37427: PUSH
37428: EMPTY
37429: LIST
37430: LIST
37431: PUSH
37432: LD_INT 1
37434: PUSH
37435: LD_INT 1
37437: PUSH
37438: EMPTY
37439: LIST
37440: LIST
37441: PUSH
37442: LD_INT 0
37444: PUSH
37445: LD_INT 1
37447: PUSH
37448: EMPTY
37449: LIST
37450: LIST
37451: PUSH
37452: LD_INT 1
37454: NEG
37455: PUSH
37456: LD_INT 0
37458: PUSH
37459: EMPTY
37460: LIST
37461: LIST
37462: PUSH
37463: LD_INT 1
37465: NEG
37466: PUSH
37467: LD_INT 1
37469: NEG
37470: PUSH
37471: EMPTY
37472: LIST
37473: LIST
37474: PUSH
37475: LD_INT 1
37477: PUSH
37478: LD_INT 1
37480: NEG
37481: PUSH
37482: EMPTY
37483: LIST
37484: LIST
37485: PUSH
37486: LD_INT 2
37488: PUSH
37489: LD_INT 0
37491: PUSH
37492: EMPTY
37493: LIST
37494: LIST
37495: PUSH
37496: LD_INT 2
37498: PUSH
37499: LD_INT 1
37501: PUSH
37502: EMPTY
37503: LIST
37504: LIST
37505: PUSH
37506: LD_INT 1
37508: NEG
37509: PUSH
37510: LD_INT 1
37512: PUSH
37513: EMPTY
37514: LIST
37515: LIST
37516: PUSH
37517: LD_INT 2
37519: NEG
37520: PUSH
37521: LD_INT 0
37523: PUSH
37524: EMPTY
37525: LIST
37526: LIST
37527: PUSH
37528: LD_INT 2
37530: NEG
37531: PUSH
37532: LD_INT 1
37534: NEG
37535: PUSH
37536: EMPTY
37537: LIST
37538: LIST
37539: PUSH
37540: LD_INT 2
37542: PUSH
37543: LD_INT 1
37545: NEG
37546: PUSH
37547: EMPTY
37548: LIST
37549: LIST
37550: PUSH
37551: LD_INT 3
37553: PUSH
37554: LD_INT 0
37556: PUSH
37557: EMPTY
37558: LIST
37559: LIST
37560: PUSH
37561: LD_INT 3
37563: PUSH
37564: LD_INT 1
37566: PUSH
37567: EMPTY
37568: LIST
37569: LIST
37570: PUSH
37571: EMPTY
37572: LIST
37573: LIST
37574: LIST
37575: LIST
37576: LIST
37577: LIST
37578: LIST
37579: LIST
37580: LIST
37581: LIST
37582: LIST
37583: LIST
37584: LIST
37585: LIST
37586: LIST
37587: LIST
37588: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
37589: LD_ADDR_VAR 0 16
37593: PUSH
37594: LD_INT 0
37596: PUSH
37597: LD_INT 0
37599: PUSH
37600: EMPTY
37601: LIST
37602: LIST
37603: PUSH
37604: LD_INT 0
37606: PUSH
37607: LD_INT 1
37609: NEG
37610: PUSH
37611: EMPTY
37612: LIST
37613: LIST
37614: PUSH
37615: LD_INT 1
37617: PUSH
37618: LD_INT 0
37620: PUSH
37621: EMPTY
37622: LIST
37623: LIST
37624: PUSH
37625: LD_INT 1
37627: PUSH
37628: LD_INT 1
37630: PUSH
37631: EMPTY
37632: LIST
37633: LIST
37634: PUSH
37635: LD_INT 0
37637: PUSH
37638: LD_INT 1
37640: PUSH
37641: EMPTY
37642: LIST
37643: LIST
37644: PUSH
37645: LD_INT 1
37647: NEG
37648: PUSH
37649: LD_INT 0
37651: PUSH
37652: EMPTY
37653: LIST
37654: LIST
37655: PUSH
37656: LD_INT 1
37658: NEG
37659: PUSH
37660: LD_INT 1
37662: NEG
37663: PUSH
37664: EMPTY
37665: LIST
37666: LIST
37667: PUSH
37668: LD_INT 1
37670: NEG
37671: PUSH
37672: LD_INT 2
37674: NEG
37675: PUSH
37676: EMPTY
37677: LIST
37678: LIST
37679: PUSH
37680: LD_INT 2
37682: PUSH
37683: LD_INT 1
37685: PUSH
37686: EMPTY
37687: LIST
37688: LIST
37689: PUSH
37690: LD_INT 2
37692: PUSH
37693: LD_INT 2
37695: PUSH
37696: EMPTY
37697: LIST
37698: LIST
37699: PUSH
37700: LD_INT 1
37702: PUSH
37703: LD_INT 2
37705: PUSH
37706: EMPTY
37707: LIST
37708: LIST
37709: PUSH
37710: LD_INT 2
37712: NEG
37713: PUSH
37714: LD_INT 1
37716: NEG
37717: PUSH
37718: EMPTY
37719: LIST
37720: LIST
37721: PUSH
37722: LD_INT 2
37724: NEG
37725: PUSH
37726: LD_INT 2
37728: NEG
37729: PUSH
37730: EMPTY
37731: LIST
37732: LIST
37733: PUSH
37734: LD_INT 3
37736: PUSH
37737: LD_INT 2
37739: PUSH
37740: EMPTY
37741: LIST
37742: LIST
37743: PUSH
37744: LD_INT 3
37746: PUSH
37747: LD_INT 3
37749: PUSH
37750: EMPTY
37751: LIST
37752: LIST
37753: PUSH
37754: LD_INT 2
37756: PUSH
37757: LD_INT 3
37759: PUSH
37760: EMPTY
37761: LIST
37762: LIST
37763: PUSH
37764: EMPTY
37765: LIST
37766: LIST
37767: LIST
37768: LIST
37769: LIST
37770: LIST
37771: LIST
37772: LIST
37773: LIST
37774: LIST
37775: LIST
37776: LIST
37777: LIST
37778: LIST
37779: LIST
37780: LIST
37781: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37782: LD_ADDR_VAR 0 17
37786: PUSH
37787: LD_INT 0
37789: PUSH
37790: LD_INT 0
37792: PUSH
37793: EMPTY
37794: LIST
37795: LIST
37796: PUSH
37797: LD_INT 0
37799: PUSH
37800: LD_INT 1
37802: NEG
37803: PUSH
37804: EMPTY
37805: LIST
37806: LIST
37807: PUSH
37808: LD_INT 1
37810: PUSH
37811: LD_INT 0
37813: PUSH
37814: EMPTY
37815: LIST
37816: LIST
37817: PUSH
37818: LD_INT 1
37820: PUSH
37821: LD_INT 1
37823: PUSH
37824: EMPTY
37825: LIST
37826: LIST
37827: PUSH
37828: LD_INT 0
37830: PUSH
37831: LD_INT 1
37833: PUSH
37834: EMPTY
37835: LIST
37836: LIST
37837: PUSH
37838: LD_INT 1
37840: NEG
37841: PUSH
37842: LD_INT 0
37844: PUSH
37845: EMPTY
37846: LIST
37847: LIST
37848: PUSH
37849: LD_INT 1
37851: NEG
37852: PUSH
37853: LD_INT 1
37855: NEG
37856: PUSH
37857: EMPTY
37858: LIST
37859: LIST
37860: PUSH
37861: LD_INT 1
37863: NEG
37864: PUSH
37865: LD_INT 2
37867: NEG
37868: PUSH
37869: EMPTY
37870: LIST
37871: LIST
37872: PUSH
37873: LD_INT 0
37875: PUSH
37876: LD_INT 2
37878: NEG
37879: PUSH
37880: EMPTY
37881: LIST
37882: LIST
37883: PUSH
37884: LD_INT 1
37886: PUSH
37887: LD_INT 1
37889: NEG
37890: PUSH
37891: EMPTY
37892: LIST
37893: LIST
37894: PUSH
37895: LD_INT 2
37897: PUSH
37898: LD_INT 0
37900: PUSH
37901: EMPTY
37902: LIST
37903: LIST
37904: PUSH
37905: LD_INT 2
37907: PUSH
37908: LD_INT 1
37910: PUSH
37911: EMPTY
37912: LIST
37913: LIST
37914: PUSH
37915: LD_INT 2
37917: PUSH
37918: LD_INT 2
37920: PUSH
37921: EMPTY
37922: LIST
37923: LIST
37924: PUSH
37925: LD_INT 1
37927: PUSH
37928: LD_INT 2
37930: PUSH
37931: EMPTY
37932: LIST
37933: LIST
37934: PUSH
37935: LD_INT 0
37937: PUSH
37938: LD_INT 2
37940: PUSH
37941: EMPTY
37942: LIST
37943: LIST
37944: PUSH
37945: LD_INT 1
37947: NEG
37948: PUSH
37949: LD_INT 1
37951: PUSH
37952: EMPTY
37953: LIST
37954: LIST
37955: PUSH
37956: LD_INT 2
37958: NEG
37959: PUSH
37960: LD_INT 0
37962: PUSH
37963: EMPTY
37964: LIST
37965: LIST
37966: PUSH
37967: LD_INT 2
37969: NEG
37970: PUSH
37971: LD_INT 1
37973: NEG
37974: PUSH
37975: EMPTY
37976: LIST
37977: LIST
37978: PUSH
37979: LD_INT 2
37981: NEG
37982: PUSH
37983: LD_INT 2
37985: NEG
37986: PUSH
37987: EMPTY
37988: LIST
37989: LIST
37990: PUSH
37991: EMPTY
37992: LIST
37993: LIST
37994: LIST
37995: LIST
37996: LIST
37997: LIST
37998: LIST
37999: LIST
38000: LIST
38001: LIST
38002: LIST
38003: LIST
38004: LIST
38005: LIST
38006: LIST
38007: LIST
38008: LIST
38009: LIST
38010: LIST
38011: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38012: LD_ADDR_VAR 0 18
38016: PUSH
38017: LD_INT 0
38019: PUSH
38020: LD_INT 0
38022: PUSH
38023: EMPTY
38024: LIST
38025: LIST
38026: PUSH
38027: LD_INT 0
38029: PUSH
38030: LD_INT 1
38032: NEG
38033: PUSH
38034: EMPTY
38035: LIST
38036: LIST
38037: PUSH
38038: LD_INT 1
38040: PUSH
38041: LD_INT 0
38043: PUSH
38044: EMPTY
38045: LIST
38046: LIST
38047: PUSH
38048: LD_INT 1
38050: PUSH
38051: LD_INT 1
38053: PUSH
38054: EMPTY
38055: LIST
38056: LIST
38057: PUSH
38058: LD_INT 0
38060: PUSH
38061: LD_INT 1
38063: PUSH
38064: EMPTY
38065: LIST
38066: LIST
38067: PUSH
38068: LD_INT 1
38070: NEG
38071: PUSH
38072: LD_INT 0
38074: PUSH
38075: EMPTY
38076: LIST
38077: LIST
38078: PUSH
38079: LD_INT 1
38081: NEG
38082: PUSH
38083: LD_INT 1
38085: NEG
38086: PUSH
38087: EMPTY
38088: LIST
38089: LIST
38090: PUSH
38091: LD_INT 1
38093: NEG
38094: PUSH
38095: LD_INT 2
38097: NEG
38098: PUSH
38099: EMPTY
38100: LIST
38101: LIST
38102: PUSH
38103: LD_INT 0
38105: PUSH
38106: LD_INT 2
38108: NEG
38109: PUSH
38110: EMPTY
38111: LIST
38112: LIST
38113: PUSH
38114: LD_INT 1
38116: PUSH
38117: LD_INT 1
38119: NEG
38120: PUSH
38121: EMPTY
38122: LIST
38123: LIST
38124: PUSH
38125: LD_INT 2
38127: PUSH
38128: LD_INT 0
38130: PUSH
38131: EMPTY
38132: LIST
38133: LIST
38134: PUSH
38135: LD_INT 2
38137: PUSH
38138: LD_INT 1
38140: PUSH
38141: EMPTY
38142: LIST
38143: LIST
38144: PUSH
38145: LD_INT 2
38147: PUSH
38148: LD_INT 2
38150: PUSH
38151: EMPTY
38152: LIST
38153: LIST
38154: PUSH
38155: LD_INT 1
38157: PUSH
38158: LD_INT 2
38160: PUSH
38161: EMPTY
38162: LIST
38163: LIST
38164: PUSH
38165: LD_INT 0
38167: PUSH
38168: LD_INT 2
38170: PUSH
38171: EMPTY
38172: LIST
38173: LIST
38174: PUSH
38175: LD_INT 1
38177: NEG
38178: PUSH
38179: LD_INT 1
38181: PUSH
38182: EMPTY
38183: LIST
38184: LIST
38185: PUSH
38186: LD_INT 2
38188: NEG
38189: PUSH
38190: LD_INT 0
38192: PUSH
38193: EMPTY
38194: LIST
38195: LIST
38196: PUSH
38197: LD_INT 2
38199: NEG
38200: PUSH
38201: LD_INT 1
38203: NEG
38204: PUSH
38205: EMPTY
38206: LIST
38207: LIST
38208: PUSH
38209: LD_INT 2
38211: NEG
38212: PUSH
38213: LD_INT 2
38215: NEG
38216: PUSH
38217: EMPTY
38218: LIST
38219: LIST
38220: PUSH
38221: EMPTY
38222: LIST
38223: LIST
38224: LIST
38225: LIST
38226: LIST
38227: LIST
38228: LIST
38229: LIST
38230: LIST
38231: LIST
38232: LIST
38233: LIST
38234: LIST
38235: LIST
38236: LIST
38237: LIST
38238: LIST
38239: LIST
38240: LIST
38241: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38242: LD_ADDR_VAR 0 19
38246: PUSH
38247: LD_INT 0
38249: PUSH
38250: LD_INT 0
38252: PUSH
38253: EMPTY
38254: LIST
38255: LIST
38256: PUSH
38257: LD_INT 0
38259: PUSH
38260: LD_INT 1
38262: NEG
38263: PUSH
38264: EMPTY
38265: LIST
38266: LIST
38267: PUSH
38268: LD_INT 1
38270: PUSH
38271: LD_INT 0
38273: PUSH
38274: EMPTY
38275: LIST
38276: LIST
38277: PUSH
38278: LD_INT 1
38280: PUSH
38281: LD_INT 1
38283: PUSH
38284: EMPTY
38285: LIST
38286: LIST
38287: PUSH
38288: LD_INT 0
38290: PUSH
38291: LD_INT 1
38293: PUSH
38294: EMPTY
38295: LIST
38296: LIST
38297: PUSH
38298: LD_INT 1
38300: NEG
38301: PUSH
38302: LD_INT 0
38304: PUSH
38305: EMPTY
38306: LIST
38307: LIST
38308: PUSH
38309: LD_INT 1
38311: NEG
38312: PUSH
38313: LD_INT 1
38315: NEG
38316: PUSH
38317: EMPTY
38318: LIST
38319: LIST
38320: PUSH
38321: LD_INT 1
38323: NEG
38324: PUSH
38325: LD_INT 2
38327: NEG
38328: PUSH
38329: EMPTY
38330: LIST
38331: LIST
38332: PUSH
38333: LD_INT 0
38335: PUSH
38336: LD_INT 2
38338: NEG
38339: PUSH
38340: EMPTY
38341: LIST
38342: LIST
38343: PUSH
38344: LD_INT 1
38346: PUSH
38347: LD_INT 1
38349: NEG
38350: PUSH
38351: EMPTY
38352: LIST
38353: LIST
38354: PUSH
38355: LD_INT 2
38357: PUSH
38358: LD_INT 0
38360: PUSH
38361: EMPTY
38362: LIST
38363: LIST
38364: PUSH
38365: LD_INT 2
38367: PUSH
38368: LD_INT 1
38370: PUSH
38371: EMPTY
38372: LIST
38373: LIST
38374: PUSH
38375: LD_INT 2
38377: PUSH
38378: LD_INT 2
38380: PUSH
38381: EMPTY
38382: LIST
38383: LIST
38384: PUSH
38385: LD_INT 1
38387: PUSH
38388: LD_INT 2
38390: PUSH
38391: EMPTY
38392: LIST
38393: LIST
38394: PUSH
38395: LD_INT 0
38397: PUSH
38398: LD_INT 2
38400: PUSH
38401: EMPTY
38402: LIST
38403: LIST
38404: PUSH
38405: LD_INT 1
38407: NEG
38408: PUSH
38409: LD_INT 1
38411: PUSH
38412: EMPTY
38413: LIST
38414: LIST
38415: PUSH
38416: LD_INT 2
38418: NEG
38419: PUSH
38420: LD_INT 0
38422: PUSH
38423: EMPTY
38424: LIST
38425: LIST
38426: PUSH
38427: LD_INT 2
38429: NEG
38430: PUSH
38431: LD_INT 1
38433: NEG
38434: PUSH
38435: EMPTY
38436: LIST
38437: LIST
38438: PUSH
38439: LD_INT 2
38441: NEG
38442: PUSH
38443: LD_INT 2
38445: NEG
38446: PUSH
38447: EMPTY
38448: LIST
38449: LIST
38450: PUSH
38451: EMPTY
38452: LIST
38453: LIST
38454: LIST
38455: LIST
38456: LIST
38457: LIST
38458: LIST
38459: LIST
38460: LIST
38461: LIST
38462: LIST
38463: LIST
38464: LIST
38465: LIST
38466: LIST
38467: LIST
38468: LIST
38469: LIST
38470: LIST
38471: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38472: LD_ADDR_VAR 0 20
38476: PUSH
38477: LD_INT 0
38479: PUSH
38480: LD_INT 0
38482: PUSH
38483: EMPTY
38484: LIST
38485: LIST
38486: PUSH
38487: LD_INT 0
38489: PUSH
38490: LD_INT 1
38492: NEG
38493: PUSH
38494: EMPTY
38495: LIST
38496: LIST
38497: PUSH
38498: LD_INT 1
38500: PUSH
38501: LD_INT 0
38503: PUSH
38504: EMPTY
38505: LIST
38506: LIST
38507: PUSH
38508: LD_INT 1
38510: PUSH
38511: LD_INT 1
38513: PUSH
38514: EMPTY
38515: LIST
38516: LIST
38517: PUSH
38518: LD_INT 0
38520: PUSH
38521: LD_INT 1
38523: PUSH
38524: EMPTY
38525: LIST
38526: LIST
38527: PUSH
38528: LD_INT 1
38530: NEG
38531: PUSH
38532: LD_INT 0
38534: PUSH
38535: EMPTY
38536: LIST
38537: LIST
38538: PUSH
38539: LD_INT 1
38541: NEG
38542: PUSH
38543: LD_INT 1
38545: NEG
38546: PUSH
38547: EMPTY
38548: LIST
38549: LIST
38550: PUSH
38551: LD_INT 1
38553: NEG
38554: PUSH
38555: LD_INT 2
38557: NEG
38558: PUSH
38559: EMPTY
38560: LIST
38561: LIST
38562: PUSH
38563: LD_INT 0
38565: PUSH
38566: LD_INT 2
38568: NEG
38569: PUSH
38570: EMPTY
38571: LIST
38572: LIST
38573: PUSH
38574: LD_INT 1
38576: PUSH
38577: LD_INT 1
38579: NEG
38580: PUSH
38581: EMPTY
38582: LIST
38583: LIST
38584: PUSH
38585: LD_INT 2
38587: PUSH
38588: LD_INT 0
38590: PUSH
38591: EMPTY
38592: LIST
38593: LIST
38594: PUSH
38595: LD_INT 2
38597: PUSH
38598: LD_INT 1
38600: PUSH
38601: EMPTY
38602: LIST
38603: LIST
38604: PUSH
38605: LD_INT 2
38607: PUSH
38608: LD_INT 2
38610: PUSH
38611: EMPTY
38612: LIST
38613: LIST
38614: PUSH
38615: LD_INT 1
38617: PUSH
38618: LD_INT 2
38620: PUSH
38621: EMPTY
38622: LIST
38623: LIST
38624: PUSH
38625: LD_INT 0
38627: PUSH
38628: LD_INT 2
38630: PUSH
38631: EMPTY
38632: LIST
38633: LIST
38634: PUSH
38635: LD_INT 1
38637: NEG
38638: PUSH
38639: LD_INT 1
38641: PUSH
38642: EMPTY
38643: LIST
38644: LIST
38645: PUSH
38646: LD_INT 2
38648: NEG
38649: PUSH
38650: LD_INT 0
38652: PUSH
38653: EMPTY
38654: LIST
38655: LIST
38656: PUSH
38657: LD_INT 2
38659: NEG
38660: PUSH
38661: LD_INT 1
38663: NEG
38664: PUSH
38665: EMPTY
38666: LIST
38667: LIST
38668: PUSH
38669: LD_INT 2
38671: NEG
38672: PUSH
38673: LD_INT 2
38675: NEG
38676: PUSH
38677: EMPTY
38678: LIST
38679: LIST
38680: PUSH
38681: EMPTY
38682: LIST
38683: LIST
38684: LIST
38685: LIST
38686: LIST
38687: LIST
38688: LIST
38689: LIST
38690: LIST
38691: LIST
38692: LIST
38693: LIST
38694: LIST
38695: LIST
38696: LIST
38697: LIST
38698: LIST
38699: LIST
38700: LIST
38701: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38702: LD_ADDR_VAR 0 21
38706: PUSH
38707: LD_INT 0
38709: PUSH
38710: LD_INT 0
38712: PUSH
38713: EMPTY
38714: LIST
38715: LIST
38716: PUSH
38717: LD_INT 0
38719: PUSH
38720: LD_INT 1
38722: NEG
38723: PUSH
38724: EMPTY
38725: LIST
38726: LIST
38727: PUSH
38728: LD_INT 1
38730: PUSH
38731: LD_INT 0
38733: PUSH
38734: EMPTY
38735: LIST
38736: LIST
38737: PUSH
38738: LD_INT 1
38740: PUSH
38741: LD_INT 1
38743: PUSH
38744: EMPTY
38745: LIST
38746: LIST
38747: PUSH
38748: LD_INT 0
38750: PUSH
38751: LD_INT 1
38753: PUSH
38754: EMPTY
38755: LIST
38756: LIST
38757: PUSH
38758: LD_INT 1
38760: NEG
38761: PUSH
38762: LD_INT 0
38764: PUSH
38765: EMPTY
38766: LIST
38767: LIST
38768: PUSH
38769: LD_INT 1
38771: NEG
38772: PUSH
38773: LD_INT 1
38775: NEG
38776: PUSH
38777: EMPTY
38778: LIST
38779: LIST
38780: PUSH
38781: LD_INT 1
38783: NEG
38784: PUSH
38785: LD_INT 2
38787: NEG
38788: PUSH
38789: EMPTY
38790: LIST
38791: LIST
38792: PUSH
38793: LD_INT 0
38795: PUSH
38796: LD_INT 2
38798: NEG
38799: PUSH
38800: EMPTY
38801: LIST
38802: LIST
38803: PUSH
38804: LD_INT 1
38806: PUSH
38807: LD_INT 1
38809: NEG
38810: PUSH
38811: EMPTY
38812: LIST
38813: LIST
38814: PUSH
38815: LD_INT 2
38817: PUSH
38818: LD_INT 0
38820: PUSH
38821: EMPTY
38822: LIST
38823: LIST
38824: PUSH
38825: LD_INT 2
38827: PUSH
38828: LD_INT 1
38830: PUSH
38831: EMPTY
38832: LIST
38833: LIST
38834: PUSH
38835: LD_INT 2
38837: PUSH
38838: LD_INT 2
38840: PUSH
38841: EMPTY
38842: LIST
38843: LIST
38844: PUSH
38845: LD_INT 1
38847: PUSH
38848: LD_INT 2
38850: PUSH
38851: EMPTY
38852: LIST
38853: LIST
38854: PUSH
38855: LD_INT 0
38857: PUSH
38858: LD_INT 2
38860: PUSH
38861: EMPTY
38862: LIST
38863: LIST
38864: PUSH
38865: LD_INT 1
38867: NEG
38868: PUSH
38869: LD_INT 1
38871: PUSH
38872: EMPTY
38873: LIST
38874: LIST
38875: PUSH
38876: LD_INT 2
38878: NEG
38879: PUSH
38880: LD_INT 0
38882: PUSH
38883: EMPTY
38884: LIST
38885: LIST
38886: PUSH
38887: LD_INT 2
38889: NEG
38890: PUSH
38891: LD_INT 1
38893: NEG
38894: PUSH
38895: EMPTY
38896: LIST
38897: LIST
38898: PUSH
38899: LD_INT 2
38901: NEG
38902: PUSH
38903: LD_INT 2
38905: NEG
38906: PUSH
38907: EMPTY
38908: LIST
38909: LIST
38910: PUSH
38911: EMPTY
38912: LIST
38913: LIST
38914: LIST
38915: LIST
38916: LIST
38917: LIST
38918: LIST
38919: LIST
38920: LIST
38921: LIST
38922: LIST
38923: LIST
38924: LIST
38925: LIST
38926: LIST
38927: LIST
38928: LIST
38929: LIST
38930: LIST
38931: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38932: LD_ADDR_VAR 0 22
38936: PUSH
38937: LD_INT 0
38939: PUSH
38940: LD_INT 0
38942: PUSH
38943: EMPTY
38944: LIST
38945: LIST
38946: PUSH
38947: LD_INT 0
38949: PUSH
38950: LD_INT 1
38952: NEG
38953: PUSH
38954: EMPTY
38955: LIST
38956: LIST
38957: PUSH
38958: LD_INT 1
38960: PUSH
38961: LD_INT 0
38963: PUSH
38964: EMPTY
38965: LIST
38966: LIST
38967: PUSH
38968: LD_INT 1
38970: PUSH
38971: LD_INT 1
38973: PUSH
38974: EMPTY
38975: LIST
38976: LIST
38977: PUSH
38978: LD_INT 0
38980: PUSH
38981: LD_INT 1
38983: PUSH
38984: EMPTY
38985: LIST
38986: LIST
38987: PUSH
38988: LD_INT 1
38990: NEG
38991: PUSH
38992: LD_INT 0
38994: PUSH
38995: EMPTY
38996: LIST
38997: LIST
38998: PUSH
38999: LD_INT 1
39001: NEG
39002: PUSH
39003: LD_INT 1
39005: NEG
39006: PUSH
39007: EMPTY
39008: LIST
39009: LIST
39010: PUSH
39011: LD_INT 1
39013: NEG
39014: PUSH
39015: LD_INT 2
39017: NEG
39018: PUSH
39019: EMPTY
39020: LIST
39021: LIST
39022: PUSH
39023: LD_INT 0
39025: PUSH
39026: LD_INT 2
39028: NEG
39029: PUSH
39030: EMPTY
39031: LIST
39032: LIST
39033: PUSH
39034: LD_INT 1
39036: PUSH
39037: LD_INT 1
39039: NEG
39040: PUSH
39041: EMPTY
39042: LIST
39043: LIST
39044: PUSH
39045: LD_INT 2
39047: PUSH
39048: LD_INT 0
39050: PUSH
39051: EMPTY
39052: LIST
39053: LIST
39054: PUSH
39055: LD_INT 2
39057: PUSH
39058: LD_INT 1
39060: PUSH
39061: EMPTY
39062: LIST
39063: LIST
39064: PUSH
39065: LD_INT 2
39067: PUSH
39068: LD_INT 2
39070: PUSH
39071: EMPTY
39072: LIST
39073: LIST
39074: PUSH
39075: LD_INT 1
39077: PUSH
39078: LD_INT 2
39080: PUSH
39081: EMPTY
39082: LIST
39083: LIST
39084: PUSH
39085: LD_INT 0
39087: PUSH
39088: LD_INT 2
39090: PUSH
39091: EMPTY
39092: LIST
39093: LIST
39094: PUSH
39095: LD_INT 1
39097: NEG
39098: PUSH
39099: LD_INT 1
39101: PUSH
39102: EMPTY
39103: LIST
39104: LIST
39105: PUSH
39106: LD_INT 2
39108: NEG
39109: PUSH
39110: LD_INT 0
39112: PUSH
39113: EMPTY
39114: LIST
39115: LIST
39116: PUSH
39117: LD_INT 2
39119: NEG
39120: PUSH
39121: LD_INT 1
39123: NEG
39124: PUSH
39125: EMPTY
39126: LIST
39127: LIST
39128: PUSH
39129: LD_INT 2
39131: NEG
39132: PUSH
39133: LD_INT 2
39135: NEG
39136: PUSH
39137: EMPTY
39138: LIST
39139: LIST
39140: PUSH
39141: EMPTY
39142: LIST
39143: LIST
39144: LIST
39145: LIST
39146: LIST
39147: LIST
39148: LIST
39149: LIST
39150: LIST
39151: LIST
39152: LIST
39153: LIST
39154: LIST
39155: LIST
39156: LIST
39157: LIST
39158: LIST
39159: LIST
39160: LIST
39161: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
39162: LD_ADDR_VAR 0 23
39166: PUSH
39167: LD_INT 0
39169: PUSH
39170: LD_INT 0
39172: PUSH
39173: EMPTY
39174: LIST
39175: LIST
39176: PUSH
39177: LD_INT 0
39179: PUSH
39180: LD_INT 1
39182: NEG
39183: PUSH
39184: EMPTY
39185: LIST
39186: LIST
39187: PUSH
39188: LD_INT 1
39190: PUSH
39191: LD_INT 0
39193: PUSH
39194: EMPTY
39195: LIST
39196: LIST
39197: PUSH
39198: LD_INT 1
39200: PUSH
39201: LD_INT 1
39203: PUSH
39204: EMPTY
39205: LIST
39206: LIST
39207: PUSH
39208: LD_INT 0
39210: PUSH
39211: LD_INT 1
39213: PUSH
39214: EMPTY
39215: LIST
39216: LIST
39217: PUSH
39218: LD_INT 1
39220: NEG
39221: PUSH
39222: LD_INT 0
39224: PUSH
39225: EMPTY
39226: LIST
39227: LIST
39228: PUSH
39229: LD_INT 1
39231: NEG
39232: PUSH
39233: LD_INT 1
39235: NEG
39236: PUSH
39237: EMPTY
39238: LIST
39239: LIST
39240: PUSH
39241: LD_INT 1
39243: NEG
39244: PUSH
39245: LD_INT 2
39247: NEG
39248: PUSH
39249: EMPTY
39250: LIST
39251: LIST
39252: PUSH
39253: LD_INT 0
39255: PUSH
39256: LD_INT 2
39258: NEG
39259: PUSH
39260: EMPTY
39261: LIST
39262: LIST
39263: PUSH
39264: LD_INT 1
39266: PUSH
39267: LD_INT 1
39269: NEG
39270: PUSH
39271: EMPTY
39272: LIST
39273: LIST
39274: PUSH
39275: LD_INT 2
39277: PUSH
39278: LD_INT 0
39280: PUSH
39281: EMPTY
39282: LIST
39283: LIST
39284: PUSH
39285: LD_INT 2
39287: PUSH
39288: LD_INT 1
39290: PUSH
39291: EMPTY
39292: LIST
39293: LIST
39294: PUSH
39295: LD_INT 2
39297: PUSH
39298: LD_INT 2
39300: PUSH
39301: EMPTY
39302: LIST
39303: LIST
39304: PUSH
39305: LD_INT 1
39307: PUSH
39308: LD_INT 2
39310: PUSH
39311: EMPTY
39312: LIST
39313: LIST
39314: PUSH
39315: LD_INT 0
39317: PUSH
39318: LD_INT 2
39320: PUSH
39321: EMPTY
39322: LIST
39323: LIST
39324: PUSH
39325: LD_INT 1
39327: NEG
39328: PUSH
39329: LD_INT 1
39331: PUSH
39332: EMPTY
39333: LIST
39334: LIST
39335: PUSH
39336: LD_INT 2
39338: NEG
39339: PUSH
39340: LD_INT 0
39342: PUSH
39343: EMPTY
39344: LIST
39345: LIST
39346: PUSH
39347: LD_INT 2
39349: NEG
39350: PUSH
39351: LD_INT 1
39353: NEG
39354: PUSH
39355: EMPTY
39356: LIST
39357: LIST
39358: PUSH
39359: LD_INT 2
39361: NEG
39362: PUSH
39363: LD_INT 2
39365: NEG
39366: PUSH
39367: EMPTY
39368: LIST
39369: LIST
39370: PUSH
39371: LD_INT 2
39373: NEG
39374: PUSH
39375: LD_INT 3
39377: NEG
39378: PUSH
39379: EMPTY
39380: LIST
39381: LIST
39382: PUSH
39383: LD_INT 1
39385: NEG
39386: PUSH
39387: LD_INT 3
39389: NEG
39390: PUSH
39391: EMPTY
39392: LIST
39393: LIST
39394: PUSH
39395: LD_INT 1
39397: PUSH
39398: LD_INT 2
39400: NEG
39401: PUSH
39402: EMPTY
39403: LIST
39404: LIST
39405: PUSH
39406: LD_INT 2
39408: PUSH
39409: LD_INT 1
39411: NEG
39412: PUSH
39413: EMPTY
39414: LIST
39415: LIST
39416: PUSH
39417: EMPTY
39418: LIST
39419: LIST
39420: LIST
39421: LIST
39422: LIST
39423: LIST
39424: LIST
39425: LIST
39426: LIST
39427: LIST
39428: LIST
39429: LIST
39430: LIST
39431: LIST
39432: LIST
39433: LIST
39434: LIST
39435: LIST
39436: LIST
39437: LIST
39438: LIST
39439: LIST
39440: LIST
39441: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
39442: LD_ADDR_VAR 0 24
39446: PUSH
39447: LD_INT 0
39449: PUSH
39450: LD_INT 0
39452: PUSH
39453: EMPTY
39454: LIST
39455: LIST
39456: PUSH
39457: LD_INT 0
39459: PUSH
39460: LD_INT 1
39462: NEG
39463: PUSH
39464: EMPTY
39465: LIST
39466: LIST
39467: PUSH
39468: LD_INT 1
39470: PUSH
39471: LD_INT 0
39473: PUSH
39474: EMPTY
39475: LIST
39476: LIST
39477: PUSH
39478: LD_INT 1
39480: PUSH
39481: LD_INT 1
39483: PUSH
39484: EMPTY
39485: LIST
39486: LIST
39487: PUSH
39488: LD_INT 0
39490: PUSH
39491: LD_INT 1
39493: PUSH
39494: EMPTY
39495: LIST
39496: LIST
39497: PUSH
39498: LD_INT 1
39500: NEG
39501: PUSH
39502: LD_INT 0
39504: PUSH
39505: EMPTY
39506: LIST
39507: LIST
39508: PUSH
39509: LD_INT 1
39511: NEG
39512: PUSH
39513: LD_INT 1
39515: NEG
39516: PUSH
39517: EMPTY
39518: LIST
39519: LIST
39520: PUSH
39521: LD_INT 1
39523: NEG
39524: PUSH
39525: LD_INT 2
39527: NEG
39528: PUSH
39529: EMPTY
39530: LIST
39531: LIST
39532: PUSH
39533: LD_INT 0
39535: PUSH
39536: LD_INT 2
39538: NEG
39539: PUSH
39540: EMPTY
39541: LIST
39542: LIST
39543: PUSH
39544: LD_INT 1
39546: PUSH
39547: LD_INT 1
39549: NEG
39550: PUSH
39551: EMPTY
39552: LIST
39553: LIST
39554: PUSH
39555: LD_INT 2
39557: PUSH
39558: LD_INT 0
39560: PUSH
39561: EMPTY
39562: LIST
39563: LIST
39564: PUSH
39565: LD_INT 2
39567: PUSH
39568: LD_INT 1
39570: PUSH
39571: EMPTY
39572: LIST
39573: LIST
39574: PUSH
39575: LD_INT 2
39577: PUSH
39578: LD_INT 2
39580: PUSH
39581: EMPTY
39582: LIST
39583: LIST
39584: PUSH
39585: LD_INT 1
39587: PUSH
39588: LD_INT 2
39590: PUSH
39591: EMPTY
39592: LIST
39593: LIST
39594: PUSH
39595: LD_INT 0
39597: PUSH
39598: LD_INT 2
39600: PUSH
39601: EMPTY
39602: LIST
39603: LIST
39604: PUSH
39605: LD_INT 1
39607: NEG
39608: PUSH
39609: LD_INT 1
39611: PUSH
39612: EMPTY
39613: LIST
39614: LIST
39615: PUSH
39616: LD_INT 2
39618: NEG
39619: PUSH
39620: LD_INT 0
39622: PUSH
39623: EMPTY
39624: LIST
39625: LIST
39626: PUSH
39627: LD_INT 2
39629: NEG
39630: PUSH
39631: LD_INT 1
39633: NEG
39634: PUSH
39635: EMPTY
39636: LIST
39637: LIST
39638: PUSH
39639: LD_INT 2
39641: NEG
39642: PUSH
39643: LD_INT 2
39645: NEG
39646: PUSH
39647: EMPTY
39648: LIST
39649: LIST
39650: PUSH
39651: LD_INT 1
39653: PUSH
39654: LD_INT 2
39656: NEG
39657: PUSH
39658: EMPTY
39659: LIST
39660: LIST
39661: PUSH
39662: LD_INT 2
39664: PUSH
39665: LD_INT 1
39667: NEG
39668: PUSH
39669: EMPTY
39670: LIST
39671: LIST
39672: PUSH
39673: LD_INT 3
39675: PUSH
39676: LD_INT 1
39678: PUSH
39679: EMPTY
39680: LIST
39681: LIST
39682: PUSH
39683: LD_INT 3
39685: PUSH
39686: LD_INT 2
39688: PUSH
39689: EMPTY
39690: LIST
39691: LIST
39692: PUSH
39693: EMPTY
39694: LIST
39695: LIST
39696: LIST
39697: LIST
39698: LIST
39699: LIST
39700: LIST
39701: LIST
39702: LIST
39703: LIST
39704: LIST
39705: LIST
39706: LIST
39707: LIST
39708: LIST
39709: LIST
39710: LIST
39711: LIST
39712: LIST
39713: LIST
39714: LIST
39715: LIST
39716: LIST
39717: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
39718: LD_ADDR_VAR 0 25
39722: PUSH
39723: LD_INT 0
39725: PUSH
39726: LD_INT 0
39728: PUSH
39729: EMPTY
39730: LIST
39731: LIST
39732: PUSH
39733: LD_INT 0
39735: PUSH
39736: LD_INT 1
39738: NEG
39739: PUSH
39740: EMPTY
39741: LIST
39742: LIST
39743: PUSH
39744: LD_INT 1
39746: PUSH
39747: LD_INT 0
39749: PUSH
39750: EMPTY
39751: LIST
39752: LIST
39753: PUSH
39754: LD_INT 1
39756: PUSH
39757: LD_INT 1
39759: PUSH
39760: EMPTY
39761: LIST
39762: LIST
39763: PUSH
39764: LD_INT 0
39766: PUSH
39767: LD_INT 1
39769: PUSH
39770: EMPTY
39771: LIST
39772: LIST
39773: PUSH
39774: LD_INT 1
39776: NEG
39777: PUSH
39778: LD_INT 0
39780: PUSH
39781: EMPTY
39782: LIST
39783: LIST
39784: PUSH
39785: LD_INT 1
39787: NEG
39788: PUSH
39789: LD_INT 1
39791: NEG
39792: PUSH
39793: EMPTY
39794: LIST
39795: LIST
39796: PUSH
39797: LD_INT 1
39799: NEG
39800: PUSH
39801: LD_INT 2
39803: NEG
39804: PUSH
39805: EMPTY
39806: LIST
39807: LIST
39808: PUSH
39809: LD_INT 0
39811: PUSH
39812: LD_INT 2
39814: NEG
39815: PUSH
39816: EMPTY
39817: LIST
39818: LIST
39819: PUSH
39820: LD_INT 1
39822: PUSH
39823: LD_INT 1
39825: NEG
39826: PUSH
39827: EMPTY
39828: LIST
39829: LIST
39830: PUSH
39831: LD_INT 2
39833: PUSH
39834: LD_INT 0
39836: PUSH
39837: EMPTY
39838: LIST
39839: LIST
39840: PUSH
39841: LD_INT 2
39843: PUSH
39844: LD_INT 1
39846: PUSH
39847: EMPTY
39848: LIST
39849: LIST
39850: PUSH
39851: LD_INT 2
39853: PUSH
39854: LD_INT 2
39856: PUSH
39857: EMPTY
39858: LIST
39859: LIST
39860: PUSH
39861: LD_INT 1
39863: PUSH
39864: LD_INT 2
39866: PUSH
39867: EMPTY
39868: LIST
39869: LIST
39870: PUSH
39871: LD_INT 0
39873: PUSH
39874: LD_INT 2
39876: PUSH
39877: EMPTY
39878: LIST
39879: LIST
39880: PUSH
39881: LD_INT 1
39883: NEG
39884: PUSH
39885: LD_INT 1
39887: PUSH
39888: EMPTY
39889: LIST
39890: LIST
39891: PUSH
39892: LD_INT 2
39894: NEG
39895: PUSH
39896: LD_INT 0
39898: PUSH
39899: EMPTY
39900: LIST
39901: LIST
39902: PUSH
39903: LD_INT 2
39905: NEG
39906: PUSH
39907: LD_INT 1
39909: NEG
39910: PUSH
39911: EMPTY
39912: LIST
39913: LIST
39914: PUSH
39915: LD_INT 2
39917: NEG
39918: PUSH
39919: LD_INT 2
39921: NEG
39922: PUSH
39923: EMPTY
39924: LIST
39925: LIST
39926: PUSH
39927: LD_INT 3
39929: PUSH
39930: LD_INT 1
39932: PUSH
39933: EMPTY
39934: LIST
39935: LIST
39936: PUSH
39937: LD_INT 3
39939: PUSH
39940: LD_INT 2
39942: PUSH
39943: EMPTY
39944: LIST
39945: LIST
39946: PUSH
39947: LD_INT 2
39949: PUSH
39950: LD_INT 3
39952: PUSH
39953: EMPTY
39954: LIST
39955: LIST
39956: PUSH
39957: LD_INT 1
39959: PUSH
39960: LD_INT 3
39962: PUSH
39963: EMPTY
39964: LIST
39965: LIST
39966: PUSH
39967: EMPTY
39968: LIST
39969: LIST
39970: LIST
39971: LIST
39972: LIST
39973: LIST
39974: LIST
39975: LIST
39976: LIST
39977: LIST
39978: LIST
39979: LIST
39980: LIST
39981: LIST
39982: LIST
39983: LIST
39984: LIST
39985: LIST
39986: LIST
39987: LIST
39988: LIST
39989: LIST
39990: LIST
39991: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
39992: LD_ADDR_VAR 0 26
39996: PUSH
39997: LD_INT 0
39999: PUSH
40000: LD_INT 0
40002: PUSH
40003: EMPTY
40004: LIST
40005: LIST
40006: PUSH
40007: LD_INT 0
40009: PUSH
40010: LD_INT 1
40012: NEG
40013: PUSH
40014: EMPTY
40015: LIST
40016: LIST
40017: PUSH
40018: LD_INT 1
40020: PUSH
40021: LD_INT 0
40023: PUSH
40024: EMPTY
40025: LIST
40026: LIST
40027: PUSH
40028: LD_INT 1
40030: PUSH
40031: LD_INT 1
40033: PUSH
40034: EMPTY
40035: LIST
40036: LIST
40037: PUSH
40038: LD_INT 0
40040: PUSH
40041: LD_INT 1
40043: PUSH
40044: EMPTY
40045: LIST
40046: LIST
40047: PUSH
40048: LD_INT 1
40050: NEG
40051: PUSH
40052: LD_INT 0
40054: PUSH
40055: EMPTY
40056: LIST
40057: LIST
40058: PUSH
40059: LD_INT 1
40061: NEG
40062: PUSH
40063: LD_INT 1
40065: NEG
40066: PUSH
40067: EMPTY
40068: LIST
40069: LIST
40070: PUSH
40071: LD_INT 1
40073: NEG
40074: PUSH
40075: LD_INT 2
40077: NEG
40078: PUSH
40079: EMPTY
40080: LIST
40081: LIST
40082: PUSH
40083: LD_INT 0
40085: PUSH
40086: LD_INT 2
40088: NEG
40089: PUSH
40090: EMPTY
40091: LIST
40092: LIST
40093: PUSH
40094: LD_INT 1
40096: PUSH
40097: LD_INT 1
40099: NEG
40100: PUSH
40101: EMPTY
40102: LIST
40103: LIST
40104: PUSH
40105: LD_INT 2
40107: PUSH
40108: LD_INT 0
40110: PUSH
40111: EMPTY
40112: LIST
40113: LIST
40114: PUSH
40115: LD_INT 2
40117: PUSH
40118: LD_INT 1
40120: PUSH
40121: EMPTY
40122: LIST
40123: LIST
40124: PUSH
40125: LD_INT 2
40127: PUSH
40128: LD_INT 2
40130: PUSH
40131: EMPTY
40132: LIST
40133: LIST
40134: PUSH
40135: LD_INT 1
40137: PUSH
40138: LD_INT 2
40140: PUSH
40141: EMPTY
40142: LIST
40143: LIST
40144: PUSH
40145: LD_INT 0
40147: PUSH
40148: LD_INT 2
40150: PUSH
40151: EMPTY
40152: LIST
40153: LIST
40154: PUSH
40155: LD_INT 1
40157: NEG
40158: PUSH
40159: LD_INT 1
40161: PUSH
40162: EMPTY
40163: LIST
40164: LIST
40165: PUSH
40166: LD_INT 2
40168: NEG
40169: PUSH
40170: LD_INT 0
40172: PUSH
40173: EMPTY
40174: LIST
40175: LIST
40176: PUSH
40177: LD_INT 2
40179: NEG
40180: PUSH
40181: LD_INT 1
40183: NEG
40184: PUSH
40185: EMPTY
40186: LIST
40187: LIST
40188: PUSH
40189: LD_INT 2
40191: NEG
40192: PUSH
40193: LD_INT 2
40195: NEG
40196: PUSH
40197: EMPTY
40198: LIST
40199: LIST
40200: PUSH
40201: LD_INT 2
40203: PUSH
40204: LD_INT 3
40206: PUSH
40207: EMPTY
40208: LIST
40209: LIST
40210: PUSH
40211: LD_INT 1
40213: PUSH
40214: LD_INT 3
40216: PUSH
40217: EMPTY
40218: LIST
40219: LIST
40220: PUSH
40221: LD_INT 1
40223: NEG
40224: PUSH
40225: LD_INT 2
40227: PUSH
40228: EMPTY
40229: LIST
40230: LIST
40231: PUSH
40232: LD_INT 2
40234: NEG
40235: PUSH
40236: LD_INT 1
40238: PUSH
40239: EMPTY
40240: LIST
40241: LIST
40242: PUSH
40243: EMPTY
40244: LIST
40245: LIST
40246: LIST
40247: LIST
40248: LIST
40249: LIST
40250: LIST
40251: LIST
40252: LIST
40253: LIST
40254: LIST
40255: LIST
40256: LIST
40257: LIST
40258: LIST
40259: LIST
40260: LIST
40261: LIST
40262: LIST
40263: LIST
40264: LIST
40265: LIST
40266: LIST
40267: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
40268: LD_ADDR_VAR 0 27
40272: PUSH
40273: LD_INT 0
40275: PUSH
40276: LD_INT 0
40278: PUSH
40279: EMPTY
40280: LIST
40281: LIST
40282: PUSH
40283: LD_INT 0
40285: PUSH
40286: LD_INT 1
40288: NEG
40289: PUSH
40290: EMPTY
40291: LIST
40292: LIST
40293: PUSH
40294: LD_INT 1
40296: PUSH
40297: LD_INT 0
40299: PUSH
40300: EMPTY
40301: LIST
40302: LIST
40303: PUSH
40304: LD_INT 1
40306: PUSH
40307: LD_INT 1
40309: PUSH
40310: EMPTY
40311: LIST
40312: LIST
40313: PUSH
40314: LD_INT 0
40316: PUSH
40317: LD_INT 1
40319: PUSH
40320: EMPTY
40321: LIST
40322: LIST
40323: PUSH
40324: LD_INT 1
40326: NEG
40327: PUSH
40328: LD_INT 0
40330: PUSH
40331: EMPTY
40332: LIST
40333: LIST
40334: PUSH
40335: LD_INT 1
40337: NEG
40338: PUSH
40339: LD_INT 1
40341: NEG
40342: PUSH
40343: EMPTY
40344: LIST
40345: LIST
40346: PUSH
40347: LD_INT 1
40349: NEG
40350: PUSH
40351: LD_INT 2
40353: NEG
40354: PUSH
40355: EMPTY
40356: LIST
40357: LIST
40358: PUSH
40359: LD_INT 0
40361: PUSH
40362: LD_INT 2
40364: NEG
40365: PUSH
40366: EMPTY
40367: LIST
40368: LIST
40369: PUSH
40370: LD_INT 1
40372: PUSH
40373: LD_INT 1
40375: NEG
40376: PUSH
40377: EMPTY
40378: LIST
40379: LIST
40380: PUSH
40381: LD_INT 2
40383: PUSH
40384: LD_INT 0
40386: PUSH
40387: EMPTY
40388: LIST
40389: LIST
40390: PUSH
40391: LD_INT 2
40393: PUSH
40394: LD_INT 1
40396: PUSH
40397: EMPTY
40398: LIST
40399: LIST
40400: PUSH
40401: LD_INT 2
40403: PUSH
40404: LD_INT 2
40406: PUSH
40407: EMPTY
40408: LIST
40409: LIST
40410: PUSH
40411: LD_INT 1
40413: PUSH
40414: LD_INT 2
40416: PUSH
40417: EMPTY
40418: LIST
40419: LIST
40420: PUSH
40421: LD_INT 0
40423: PUSH
40424: LD_INT 2
40426: PUSH
40427: EMPTY
40428: LIST
40429: LIST
40430: PUSH
40431: LD_INT 1
40433: NEG
40434: PUSH
40435: LD_INT 1
40437: PUSH
40438: EMPTY
40439: LIST
40440: LIST
40441: PUSH
40442: LD_INT 2
40444: NEG
40445: PUSH
40446: LD_INT 0
40448: PUSH
40449: EMPTY
40450: LIST
40451: LIST
40452: PUSH
40453: LD_INT 2
40455: NEG
40456: PUSH
40457: LD_INT 1
40459: NEG
40460: PUSH
40461: EMPTY
40462: LIST
40463: LIST
40464: PUSH
40465: LD_INT 2
40467: NEG
40468: PUSH
40469: LD_INT 2
40471: NEG
40472: PUSH
40473: EMPTY
40474: LIST
40475: LIST
40476: PUSH
40477: LD_INT 1
40479: NEG
40480: PUSH
40481: LD_INT 2
40483: PUSH
40484: EMPTY
40485: LIST
40486: LIST
40487: PUSH
40488: LD_INT 2
40490: NEG
40491: PUSH
40492: LD_INT 1
40494: PUSH
40495: EMPTY
40496: LIST
40497: LIST
40498: PUSH
40499: LD_INT 3
40501: NEG
40502: PUSH
40503: LD_INT 1
40505: NEG
40506: PUSH
40507: EMPTY
40508: LIST
40509: LIST
40510: PUSH
40511: LD_INT 3
40513: NEG
40514: PUSH
40515: LD_INT 2
40517: NEG
40518: PUSH
40519: EMPTY
40520: LIST
40521: LIST
40522: PUSH
40523: EMPTY
40524: LIST
40525: LIST
40526: LIST
40527: LIST
40528: LIST
40529: LIST
40530: LIST
40531: LIST
40532: LIST
40533: LIST
40534: LIST
40535: LIST
40536: LIST
40537: LIST
40538: LIST
40539: LIST
40540: LIST
40541: LIST
40542: LIST
40543: LIST
40544: LIST
40545: LIST
40546: LIST
40547: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
40548: LD_ADDR_VAR 0 28
40552: PUSH
40553: LD_INT 0
40555: PUSH
40556: LD_INT 0
40558: PUSH
40559: EMPTY
40560: LIST
40561: LIST
40562: PUSH
40563: LD_INT 0
40565: PUSH
40566: LD_INT 1
40568: NEG
40569: PUSH
40570: EMPTY
40571: LIST
40572: LIST
40573: PUSH
40574: LD_INT 1
40576: PUSH
40577: LD_INT 0
40579: PUSH
40580: EMPTY
40581: LIST
40582: LIST
40583: PUSH
40584: LD_INT 1
40586: PUSH
40587: LD_INT 1
40589: PUSH
40590: EMPTY
40591: LIST
40592: LIST
40593: PUSH
40594: LD_INT 0
40596: PUSH
40597: LD_INT 1
40599: PUSH
40600: EMPTY
40601: LIST
40602: LIST
40603: PUSH
40604: LD_INT 1
40606: NEG
40607: PUSH
40608: LD_INT 0
40610: PUSH
40611: EMPTY
40612: LIST
40613: LIST
40614: PUSH
40615: LD_INT 1
40617: NEG
40618: PUSH
40619: LD_INT 1
40621: NEG
40622: PUSH
40623: EMPTY
40624: LIST
40625: LIST
40626: PUSH
40627: LD_INT 1
40629: NEG
40630: PUSH
40631: LD_INT 2
40633: NEG
40634: PUSH
40635: EMPTY
40636: LIST
40637: LIST
40638: PUSH
40639: LD_INT 0
40641: PUSH
40642: LD_INT 2
40644: NEG
40645: PUSH
40646: EMPTY
40647: LIST
40648: LIST
40649: PUSH
40650: LD_INT 1
40652: PUSH
40653: LD_INT 1
40655: NEG
40656: PUSH
40657: EMPTY
40658: LIST
40659: LIST
40660: PUSH
40661: LD_INT 2
40663: PUSH
40664: LD_INT 0
40666: PUSH
40667: EMPTY
40668: LIST
40669: LIST
40670: PUSH
40671: LD_INT 2
40673: PUSH
40674: LD_INT 1
40676: PUSH
40677: EMPTY
40678: LIST
40679: LIST
40680: PUSH
40681: LD_INT 2
40683: PUSH
40684: LD_INT 2
40686: PUSH
40687: EMPTY
40688: LIST
40689: LIST
40690: PUSH
40691: LD_INT 1
40693: PUSH
40694: LD_INT 2
40696: PUSH
40697: EMPTY
40698: LIST
40699: LIST
40700: PUSH
40701: LD_INT 0
40703: PUSH
40704: LD_INT 2
40706: PUSH
40707: EMPTY
40708: LIST
40709: LIST
40710: PUSH
40711: LD_INT 1
40713: NEG
40714: PUSH
40715: LD_INT 1
40717: PUSH
40718: EMPTY
40719: LIST
40720: LIST
40721: PUSH
40722: LD_INT 2
40724: NEG
40725: PUSH
40726: LD_INT 0
40728: PUSH
40729: EMPTY
40730: LIST
40731: LIST
40732: PUSH
40733: LD_INT 2
40735: NEG
40736: PUSH
40737: LD_INT 1
40739: NEG
40740: PUSH
40741: EMPTY
40742: LIST
40743: LIST
40744: PUSH
40745: LD_INT 2
40747: NEG
40748: PUSH
40749: LD_INT 2
40751: NEG
40752: PUSH
40753: EMPTY
40754: LIST
40755: LIST
40756: PUSH
40757: LD_INT 2
40759: NEG
40760: PUSH
40761: LD_INT 3
40763: NEG
40764: PUSH
40765: EMPTY
40766: LIST
40767: LIST
40768: PUSH
40769: LD_INT 1
40771: NEG
40772: PUSH
40773: LD_INT 3
40775: NEG
40776: PUSH
40777: EMPTY
40778: LIST
40779: LIST
40780: PUSH
40781: LD_INT 3
40783: NEG
40784: PUSH
40785: LD_INT 1
40787: NEG
40788: PUSH
40789: EMPTY
40790: LIST
40791: LIST
40792: PUSH
40793: LD_INT 3
40795: NEG
40796: PUSH
40797: LD_INT 2
40799: NEG
40800: PUSH
40801: EMPTY
40802: LIST
40803: LIST
40804: PUSH
40805: EMPTY
40806: LIST
40807: LIST
40808: LIST
40809: LIST
40810: LIST
40811: LIST
40812: LIST
40813: LIST
40814: LIST
40815: LIST
40816: LIST
40817: LIST
40818: LIST
40819: LIST
40820: LIST
40821: LIST
40822: LIST
40823: LIST
40824: LIST
40825: LIST
40826: LIST
40827: LIST
40828: LIST
40829: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
40830: LD_ADDR_VAR 0 29
40834: PUSH
40835: LD_INT 0
40837: PUSH
40838: LD_INT 0
40840: PUSH
40841: EMPTY
40842: LIST
40843: LIST
40844: PUSH
40845: LD_INT 0
40847: PUSH
40848: LD_INT 1
40850: NEG
40851: PUSH
40852: EMPTY
40853: LIST
40854: LIST
40855: PUSH
40856: LD_INT 1
40858: PUSH
40859: LD_INT 0
40861: PUSH
40862: EMPTY
40863: LIST
40864: LIST
40865: PUSH
40866: LD_INT 1
40868: PUSH
40869: LD_INT 1
40871: PUSH
40872: EMPTY
40873: LIST
40874: LIST
40875: PUSH
40876: LD_INT 0
40878: PUSH
40879: LD_INT 1
40881: PUSH
40882: EMPTY
40883: LIST
40884: LIST
40885: PUSH
40886: LD_INT 1
40888: NEG
40889: PUSH
40890: LD_INT 0
40892: PUSH
40893: EMPTY
40894: LIST
40895: LIST
40896: PUSH
40897: LD_INT 1
40899: NEG
40900: PUSH
40901: LD_INT 1
40903: NEG
40904: PUSH
40905: EMPTY
40906: LIST
40907: LIST
40908: PUSH
40909: LD_INT 1
40911: NEG
40912: PUSH
40913: LD_INT 2
40915: NEG
40916: PUSH
40917: EMPTY
40918: LIST
40919: LIST
40920: PUSH
40921: LD_INT 0
40923: PUSH
40924: LD_INT 2
40926: NEG
40927: PUSH
40928: EMPTY
40929: LIST
40930: LIST
40931: PUSH
40932: LD_INT 1
40934: PUSH
40935: LD_INT 1
40937: NEG
40938: PUSH
40939: EMPTY
40940: LIST
40941: LIST
40942: PUSH
40943: LD_INT 2
40945: PUSH
40946: LD_INT 0
40948: PUSH
40949: EMPTY
40950: LIST
40951: LIST
40952: PUSH
40953: LD_INT 2
40955: PUSH
40956: LD_INT 1
40958: PUSH
40959: EMPTY
40960: LIST
40961: LIST
40962: PUSH
40963: LD_INT 1
40965: PUSH
40966: LD_INT 2
40968: PUSH
40969: EMPTY
40970: LIST
40971: LIST
40972: PUSH
40973: LD_INT 0
40975: PUSH
40976: LD_INT 2
40978: PUSH
40979: EMPTY
40980: LIST
40981: LIST
40982: PUSH
40983: LD_INT 1
40985: NEG
40986: PUSH
40987: LD_INT 1
40989: PUSH
40990: EMPTY
40991: LIST
40992: LIST
40993: PUSH
40994: LD_INT 2
40996: NEG
40997: PUSH
40998: LD_INT 1
41000: NEG
41001: PUSH
41002: EMPTY
41003: LIST
41004: LIST
41005: PUSH
41006: LD_INT 2
41008: NEG
41009: PUSH
41010: LD_INT 2
41012: NEG
41013: PUSH
41014: EMPTY
41015: LIST
41016: LIST
41017: PUSH
41018: LD_INT 2
41020: NEG
41021: PUSH
41022: LD_INT 3
41024: NEG
41025: PUSH
41026: EMPTY
41027: LIST
41028: LIST
41029: PUSH
41030: LD_INT 2
41032: PUSH
41033: LD_INT 1
41035: NEG
41036: PUSH
41037: EMPTY
41038: LIST
41039: LIST
41040: PUSH
41041: LD_INT 3
41043: PUSH
41044: LD_INT 1
41046: PUSH
41047: EMPTY
41048: LIST
41049: LIST
41050: PUSH
41051: LD_INT 1
41053: PUSH
41054: LD_INT 3
41056: PUSH
41057: EMPTY
41058: LIST
41059: LIST
41060: PUSH
41061: LD_INT 1
41063: NEG
41064: PUSH
41065: LD_INT 2
41067: PUSH
41068: EMPTY
41069: LIST
41070: LIST
41071: PUSH
41072: LD_INT 3
41074: NEG
41075: PUSH
41076: LD_INT 2
41078: NEG
41079: PUSH
41080: EMPTY
41081: LIST
41082: LIST
41083: PUSH
41084: EMPTY
41085: LIST
41086: LIST
41087: LIST
41088: LIST
41089: LIST
41090: LIST
41091: LIST
41092: LIST
41093: LIST
41094: LIST
41095: LIST
41096: LIST
41097: LIST
41098: LIST
41099: LIST
41100: LIST
41101: LIST
41102: LIST
41103: LIST
41104: LIST
41105: LIST
41106: LIST
41107: LIST
41108: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
41109: LD_ADDR_VAR 0 30
41113: PUSH
41114: LD_INT 0
41116: PUSH
41117: LD_INT 0
41119: PUSH
41120: EMPTY
41121: LIST
41122: LIST
41123: PUSH
41124: LD_INT 0
41126: PUSH
41127: LD_INT 1
41129: NEG
41130: PUSH
41131: EMPTY
41132: LIST
41133: LIST
41134: PUSH
41135: LD_INT 1
41137: PUSH
41138: LD_INT 0
41140: PUSH
41141: EMPTY
41142: LIST
41143: LIST
41144: PUSH
41145: LD_INT 1
41147: PUSH
41148: LD_INT 1
41150: PUSH
41151: EMPTY
41152: LIST
41153: LIST
41154: PUSH
41155: LD_INT 0
41157: PUSH
41158: LD_INT 1
41160: PUSH
41161: EMPTY
41162: LIST
41163: LIST
41164: PUSH
41165: LD_INT 1
41167: NEG
41168: PUSH
41169: LD_INT 0
41171: PUSH
41172: EMPTY
41173: LIST
41174: LIST
41175: PUSH
41176: LD_INT 1
41178: NEG
41179: PUSH
41180: LD_INT 1
41182: NEG
41183: PUSH
41184: EMPTY
41185: LIST
41186: LIST
41187: PUSH
41188: LD_INT 1
41190: NEG
41191: PUSH
41192: LD_INT 2
41194: NEG
41195: PUSH
41196: EMPTY
41197: LIST
41198: LIST
41199: PUSH
41200: LD_INT 0
41202: PUSH
41203: LD_INT 2
41205: NEG
41206: PUSH
41207: EMPTY
41208: LIST
41209: LIST
41210: PUSH
41211: LD_INT 1
41213: PUSH
41214: LD_INT 1
41216: NEG
41217: PUSH
41218: EMPTY
41219: LIST
41220: LIST
41221: PUSH
41222: LD_INT 2
41224: PUSH
41225: LD_INT 0
41227: PUSH
41228: EMPTY
41229: LIST
41230: LIST
41231: PUSH
41232: LD_INT 2
41234: PUSH
41235: LD_INT 1
41237: PUSH
41238: EMPTY
41239: LIST
41240: LIST
41241: PUSH
41242: LD_INT 2
41244: PUSH
41245: LD_INT 2
41247: PUSH
41248: EMPTY
41249: LIST
41250: LIST
41251: PUSH
41252: LD_INT 1
41254: PUSH
41255: LD_INT 2
41257: PUSH
41258: EMPTY
41259: LIST
41260: LIST
41261: PUSH
41262: LD_INT 1
41264: NEG
41265: PUSH
41266: LD_INT 1
41268: PUSH
41269: EMPTY
41270: LIST
41271: LIST
41272: PUSH
41273: LD_INT 2
41275: NEG
41276: PUSH
41277: LD_INT 0
41279: PUSH
41280: EMPTY
41281: LIST
41282: LIST
41283: PUSH
41284: LD_INT 2
41286: NEG
41287: PUSH
41288: LD_INT 1
41290: NEG
41291: PUSH
41292: EMPTY
41293: LIST
41294: LIST
41295: PUSH
41296: LD_INT 1
41298: NEG
41299: PUSH
41300: LD_INT 3
41302: NEG
41303: PUSH
41304: EMPTY
41305: LIST
41306: LIST
41307: PUSH
41308: LD_INT 1
41310: PUSH
41311: LD_INT 2
41313: NEG
41314: PUSH
41315: EMPTY
41316: LIST
41317: LIST
41318: PUSH
41319: LD_INT 3
41321: PUSH
41322: LD_INT 2
41324: PUSH
41325: EMPTY
41326: LIST
41327: LIST
41328: PUSH
41329: LD_INT 2
41331: PUSH
41332: LD_INT 3
41334: PUSH
41335: EMPTY
41336: LIST
41337: LIST
41338: PUSH
41339: LD_INT 2
41341: NEG
41342: PUSH
41343: LD_INT 1
41345: PUSH
41346: EMPTY
41347: LIST
41348: LIST
41349: PUSH
41350: LD_INT 3
41352: NEG
41353: PUSH
41354: LD_INT 1
41356: NEG
41357: PUSH
41358: EMPTY
41359: LIST
41360: LIST
41361: PUSH
41362: EMPTY
41363: LIST
41364: LIST
41365: LIST
41366: LIST
41367: LIST
41368: LIST
41369: LIST
41370: LIST
41371: LIST
41372: LIST
41373: LIST
41374: LIST
41375: LIST
41376: LIST
41377: LIST
41378: LIST
41379: LIST
41380: LIST
41381: LIST
41382: LIST
41383: LIST
41384: LIST
41385: LIST
41386: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
41387: LD_ADDR_VAR 0 31
41391: PUSH
41392: LD_INT 0
41394: PUSH
41395: LD_INT 0
41397: PUSH
41398: EMPTY
41399: LIST
41400: LIST
41401: PUSH
41402: LD_INT 0
41404: PUSH
41405: LD_INT 1
41407: NEG
41408: PUSH
41409: EMPTY
41410: LIST
41411: LIST
41412: PUSH
41413: LD_INT 1
41415: PUSH
41416: LD_INT 0
41418: PUSH
41419: EMPTY
41420: LIST
41421: LIST
41422: PUSH
41423: LD_INT 1
41425: PUSH
41426: LD_INT 1
41428: PUSH
41429: EMPTY
41430: LIST
41431: LIST
41432: PUSH
41433: LD_INT 0
41435: PUSH
41436: LD_INT 1
41438: PUSH
41439: EMPTY
41440: LIST
41441: LIST
41442: PUSH
41443: LD_INT 1
41445: NEG
41446: PUSH
41447: LD_INT 0
41449: PUSH
41450: EMPTY
41451: LIST
41452: LIST
41453: PUSH
41454: LD_INT 1
41456: NEG
41457: PUSH
41458: LD_INT 1
41460: NEG
41461: PUSH
41462: EMPTY
41463: LIST
41464: LIST
41465: PUSH
41466: LD_INT 1
41468: NEG
41469: PUSH
41470: LD_INT 2
41472: NEG
41473: PUSH
41474: EMPTY
41475: LIST
41476: LIST
41477: PUSH
41478: LD_INT 1
41480: PUSH
41481: LD_INT 1
41483: NEG
41484: PUSH
41485: EMPTY
41486: LIST
41487: LIST
41488: PUSH
41489: LD_INT 2
41491: PUSH
41492: LD_INT 0
41494: PUSH
41495: EMPTY
41496: LIST
41497: LIST
41498: PUSH
41499: LD_INT 2
41501: PUSH
41502: LD_INT 1
41504: PUSH
41505: EMPTY
41506: LIST
41507: LIST
41508: PUSH
41509: LD_INT 2
41511: PUSH
41512: LD_INT 2
41514: PUSH
41515: EMPTY
41516: LIST
41517: LIST
41518: PUSH
41519: LD_INT 1
41521: PUSH
41522: LD_INT 2
41524: PUSH
41525: EMPTY
41526: LIST
41527: LIST
41528: PUSH
41529: LD_INT 0
41531: PUSH
41532: LD_INT 2
41534: PUSH
41535: EMPTY
41536: LIST
41537: LIST
41538: PUSH
41539: LD_INT 1
41541: NEG
41542: PUSH
41543: LD_INT 1
41545: PUSH
41546: EMPTY
41547: LIST
41548: LIST
41549: PUSH
41550: LD_INT 2
41552: NEG
41553: PUSH
41554: LD_INT 1
41556: NEG
41557: PUSH
41558: EMPTY
41559: LIST
41560: LIST
41561: PUSH
41562: LD_INT 2
41564: NEG
41565: PUSH
41566: LD_INT 2
41568: NEG
41569: PUSH
41570: EMPTY
41571: LIST
41572: LIST
41573: PUSH
41574: LD_INT 2
41576: NEG
41577: PUSH
41578: LD_INT 3
41580: NEG
41581: PUSH
41582: EMPTY
41583: LIST
41584: LIST
41585: PUSH
41586: LD_INT 2
41588: PUSH
41589: LD_INT 1
41591: NEG
41592: PUSH
41593: EMPTY
41594: LIST
41595: LIST
41596: PUSH
41597: LD_INT 3
41599: PUSH
41600: LD_INT 1
41602: PUSH
41603: EMPTY
41604: LIST
41605: LIST
41606: PUSH
41607: LD_INT 1
41609: PUSH
41610: LD_INT 3
41612: PUSH
41613: EMPTY
41614: LIST
41615: LIST
41616: PUSH
41617: LD_INT 1
41619: NEG
41620: PUSH
41621: LD_INT 2
41623: PUSH
41624: EMPTY
41625: LIST
41626: LIST
41627: PUSH
41628: LD_INT 3
41630: NEG
41631: PUSH
41632: LD_INT 2
41634: NEG
41635: PUSH
41636: EMPTY
41637: LIST
41638: LIST
41639: PUSH
41640: EMPTY
41641: LIST
41642: LIST
41643: LIST
41644: LIST
41645: LIST
41646: LIST
41647: LIST
41648: LIST
41649: LIST
41650: LIST
41651: LIST
41652: LIST
41653: LIST
41654: LIST
41655: LIST
41656: LIST
41657: LIST
41658: LIST
41659: LIST
41660: LIST
41661: LIST
41662: LIST
41663: LIST
41664: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
41665: LD_ADDR_VAR 0 32
41669: PUSH
41670: LD_INT 0
41672: PUSH
41673: LD_INT 0
41675: PUSH
41676: EMPTY
41677: LIST
41678: LIST
41679: PUSH
41680: LD_INT 0
41682: PUSH
41683: LD_INT 1
41685: NEG
41686: PUSH
41687: EMPTY
41688: LIST
41689: LIST
41690: PUSH
41691: LD_INT 1
41693: PUSH
41694: LD_INT 0
41696: PUSH
41697: EMPTY
41698: LIST
41699: LIST
41700: PUSH
41701: LD_INT 1
41703: PUSH
41704: LD_INT 1
41706: PUSH
41707: EMPTY
41708: LIST
41709: LIST
41710: PUSH
41711: LD_INT 0
41713: PUSH
41714: LD_INT 1
41716: PUSH
41717: EMPTY
41718: LIST
41719: LIST
41720: PUSH
41721: LD_INT 1
41723: NEG
41724: PUSH
41725: LD_INT 0
41727: PUSH
41728: EMPTY
41729: LIST
41730: LIST
41731: PUSH
41732: LD_INT 1
41734: NEG
41735: PUSH
41736: LD_INT 1
41738: NEG
41739: PUSH
41740: EMPTY
41741: LIST
41742: LIST
41743: PUSH
41744: LD_INT 1
41746: NEG
41747: PUSH
41748: LD_INT 2
41750: NEG
41751: PUSH
41752: EMPTY
41753: LIST
41754: LIST
41755: PUSH
41756: LD_INT 0
41758: PUSH
41759: LD_INT 2
41761: NEG
41762: PUSH
41763: EMPTY
41764: LIST
41765: LIST
41766: PUSH
41767: LD_INT 1
41769: PUSH
41770: LD_INT 1
41772: NEG
41773: PUSH
41774: EMPTY
41775: LIST
41776: LIST
41777: PUSH
41778: LD_INT 2
41780: PUSH
41781: LD_INT 1
41783: PUSH
41784: EMPTY
41785: LIST
41786: LIST
41787: PUSH
41788: LD_INT 2
41790: PUSH
41791: LD_INT 2
41793: PUSH
41794: EMPTY
41795: LIST
41796: LIST
41797: PUSH
41798: LD_INT 1
41800: PUSH
41801: LD_INT 2
41803: PUSH
41804: EMPTY
41805: LIST
41806: LIST
41807: PUSH
41808: LD_INT 0
41810: PUSH
41811: LD_INT 2
41813: PUSH
41814: EMPTY
41815: LIST
41816: LIST
41817: PUSH
41818: LD_INT 1
41820: NEG
41821: PUSH
41822: LD_INT 1
41824: PUSH
41825: EMPTY
41826: LIST
41827: LIST
41828: PUSH
41829: LD_INT 2
41831: NEG
41832: PUSH
41833: LD_INT 0
41835: PUSH
41836: EMPTY
41837: LIST
41838: LIST
41839: PUSH
41840: LD_INT 2
41842: NEG
41843: PUSH
41844: LD_INT 1
41846: NEG
41847: PUSH
41848: EMPTY
41849: LIST
41850: LIST
41851: PUSH
41852: LD_INT 1
41854: NEG
41855: PUSH
41856: LD_INT 3
41858: NEG
41859: PUSH
41860: EMPTY
41861: LIST
41862: LIST
41863: PUSH
41864: LD_INT 1
41866: PUSH
41867: LD_INT 2
41869: NEG
41870: PUSH
41871: EMPTY
41872: LIST
41873: LIST
41874: PUSH
41875: LD_INT 3
41877: PUSH
41878: LD_INT 2
41880: PUSH
41881: EMPTY
41882: LIST
41883: LIST
41884: PUSH
41885: LD_INT 2
41887: PUSH
41888: LD_INT 3
41890: PUSH
41891: EMPTY
41892: LIST
41893: LIST
41894: PUSH
41895: LD_INT 2
41897: NEG
41898: PUSH
41899: LD_INT 1
41901: PUSH
41902: EMPTY
41903: LIST
41904: LIST
41905: PUSH
41906: LD_INT 3
41908: NEG
41909: PUSH
41910: LD_INT 1
41912: NEG
41913: PUSH
41914: EMPTY
41915: LIST
41916: LIST
41917: PUSH
41918: EMPTY
41919: LIST
41920: LIST
41921: LIST
41922: LIST
41923: LIST
41924: LIST
41925: LIST
41926: LIST
41927: LIST
41928: LIST
41929: LIST
41930: LIST
41931: LIST
41932: LIST
41933: LIST
41934: LIST
41935: LIST
41936: LIST
41937: LIST
41938: LIST
41939: LIST
41940: LIST
41941: LIST
41942: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
41943: LD_ADDR_VAR 0 33
41947: PUSH
41948: LD_INT 0
41950: PUSH
41951: LD_INT 0
41953: PUSH
41954: EMPTY
41955: LIST
41956: LIST
41957: PUSH
41958: LD_INT 0
41960: PUSH
41961: LD_INT 1
41963: NEG
41964: PUSH
41965: EMPTY
41966: LIST
41967: LIST
41968: PUSH
41969: LD_INT 1
41971: PUSH
41972: LD_INT 0
41974: PUSH
41975: EMPTY
41976: LIST
41977: LIST
41978: PUSH
41979: LD_INT 1
41981: PUSH
41982: LD_INT 1
41984: PUSH
41985: EMPTY
41986: LIST
41987: LIST
41988: PUSH
41989: LD_INT 0
41991: PUSH
41992: LD_INT 1
41994: PUSH
41995: EMPTY
41996: LIST
41997: LIST
41998: PUSH
41999: LD_INT 1
42001: NEG
42002: PUSH
42003: LD_INT 0
42005: PUSH
42006: EMPTY
42007: LIST
42008: LIST
42009: PUSH
42010: LD_INT 1
42012: NEG
42013: PUSH
42014: LD_INT 1
42016: NEG
42017: PUSH
42018: EMPTY
42019: LIST
42020: LIST
42021: PUSH
42022: LD_INT 1
42024: NEG
42025: PUSH
42026: LD_INT 2
42028: NEG
42029: PUSH
42030: EMPTY
42031: LIST
42032: LIST
42033: PUSH
42034: LD_INT 1
42036: PUSH
42037: LD_INT 1
42039: NEG
42040: PUSH
42041: EMPTY
42042: LIST
42043: LIST
42044: PUSH
42045: LD_INT 2
42047: PUSH
42048: LD_INT 0
42050: PUSH
42051: EMPTY
42052: LIST
42053: LIST
42054: PUSH
42055: LD_INT 2
42057: PUSH
42058: LD_INT 1
42060: PUSH
42061: EMPTY
42062: LIST
42063: LIST
42064: PUSH
42065: LD_INT 1
42067: PUSH
42068: LD_INT 2
42070: PUSH
42071: EMPTY
42072: LIST
42073: LIST
42074: PUSH
42075: LD_INT 0
42077: PUSH
42078: LD_INT 2
42080: PUSH
42081: EMPTY
42082: LIST
42083: LIST
42084: PUSH
42085: LD_INT 1
42087: NEG
42088: PUSH
42089: LD_INT 1
42091: PUSH
42092: EMPTY
42093: LIST
42094: LIST
42095: PUSH
42096: LD_INT 2
42098: NEG
42099: PUSH
42100: LD_INT 0
42102: PUSH
42103: EMPTY
42104: LIST
42105: LIST
42106: PUSH
42107: LD_INT 2
42109: NEG
42110: PUSH
42111: LD_INT 1
42113: NEG
42114: PUSH
42115: EMPTY
42116: LIST
42117: LIST
42118: PUSH
42119: LD_INT 2
42121: NEG
42122: PUSH
42123: LD_INT 2
42125: NEG
42126: PUSH
42127: EMPTY
42128: LIST
42129: LIST
42130: PUSH
42131: LD_INT 2
42133: NEG
42134: PUSH
42135: LD_INT 3
42137: NEG
42138: PUSH
42139: EMPTY
42140: LIST
42141: LIST
42142: PUSH
42143: LD_INT 2
42145: PUSH
42146: LD_INT 1
42148: NEG
42149: PUSH
42150: EMPTY
42151: LIST
42152: LIST
42153: PUSH
42154: LD_INT 3
42156: PUSH
42157: LD_INT 1
42159: PUSH
42160: EMPTY
42161: LIST
42162: LIST
42163: PUSH
42164: LD_INT 1
42166: PUSH
42167: LD_INT 3
42169: PUSH
42170: EMPTY
42171: LIST
42172: LIST
42173: PUSH
42174: LD_INT 1
42176: NEG
42177: PUSH
42178: LD_INT 2
42180: PUSH
42181: EMPTY
42182: LIST
42183: LIST
42184: PUSH
42185: LD_INT 3
42187: NEG
42188: PUSH
42189: LD_INT 2
42191: NEG
42192: PUSH
42193: EMPTY
42194: LIST
42195: LIST
42196: PUSH
42197: EMPTY
42198: LIST
42199: LIST
42200: LIST
42201: LIST
42202: LIST
42203: LIST
42204: LIST
42205: LIST
42206: LIST
42207: LIST
42208: LIST
42209: LIST
42210: LIST
42211: LIST
42212: LIST
42213: LIST
42214: LIST
42215: LIST
42216: LIST
42217: LIST
42218: LIST
42219: LIST
42220: LIST
42221: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
42222: LD_ADDR_VAR 0 34
42226: PUSH
42227: LD_INT 0
42229: PUSH
42230: LD_INT 0
42232: PUSH
42233: EMPTY
42234: LIST
42235: LIST
42236: PUSH
42237: LD_INT 0
42239: PUSH
42240: LD_INT 1
42242: NEG
42243: PUSH
42244: EMPTY
42245: LIST
42246: LIST
42247: PUSH
42248: LD_INT 1
42250: PUSH
42251: LD_INT 0
42253: PUSH
42254: EMPTY
42255: LIST
42256: LIST
42257: PUSH
42258: LD_INT 1
42260: PUSH
42261: LD_INT 1
42263: PUSH
42264: EMPTY
42265: LIST
42266: LIST
42267: PUSH
42268: LD_INT 0
42270: PUSH
42271: LD_INT 1
42273: PUSH
42274: EMPTY
42275: LIST
42276: LIST
42277: PUSH
42278: LD_INT 1
42280: NEG
42281: PUSH
42282: LD_INT 0
42284: PUSH
42285: EMPTY
42286: LIST
42287: LIST
42288: PUSH
42289: LD_INT 1
42291: NEG
42292: PUSH
42293: LD_INT 1
42295: NEG
42296: PUSH
42297: EMPTY
42298: LIST
42299: LIST
42300: PUSH
42301: LD_INT 1
42303: NEG
42304: PUSH
42305: LD_INT 2
42307: NEG
42308: PUSH
42309: EMPTY
42310: LIST
42311: LIST
42312: PUSH
42313: LD_INT 0
42315: PUSH
42316: LD_INT 2
42318: NEG
42319: PUSH
42320: EMPTY
42321: LIST
42322: LIST
42323: PUSH
42324: LD_INT 1
42326: PUSH
42327: LD_INT 1
42329: NEG
42330: PUSH
42331: EMPTY
42332: LIST
42333: LIST
42334: PUSH
42335: LD_INT 2
42337: PUSH
42338: LD_INT 1
42340: PUSH
42341: EMPTY
42342: LIST
42343: LIST
42344: PUSH
42345: LD_INT 2
42347: PUSH
42348: LD_INT 2
42350: PUSH
42351: EMPTY
42352: LIST
42353: LIST
42354: PUSH
42355: LD_INT 1
42357: PUSH
42358: LD_INT 2
42360: PUSH
42361: EMPTY
42362: LIST
42363: LIST
42364: PUSH
42365: LD_INT 1
42367: NEG
42368: PUSH
42369: LD_INT 1
42371: PUSH
42372: EMPTY
42373: LIST
42374: LIST
42375: PUSH
42376: LD_INT 2
42378: NEG
42379: PUSH
42380: LD_INT 0
42382: PUSH
42383: EMPTY
42384: LIST
42385: LIST
42386: PUSH
42387: LD_INT 2
42389: NEG
42390: PUSH
42391: LD_INT 1
42393: NEG
42394: PUSH
42395: EMPTY
42396: LIST
42397: LIST
42398: PUSH
42399: LD_INT 2
42401: NEG
42402: PUSH
42403: LD_INT 2
42405: NEG
42406: PUSH
42407: EMPTY
42408: LIST
42409: LIST
42410: PUSH
42411: LD_INT 1
42413: NEG
42414: PUSH
42415: LD_INT 3
42417: NEG
42418: PUSH
42419: EMPTY
42420: LIST
42421: LIST
42422: PUSH
42423: LD_INT 1
42425: PUSH
42426: LD_INT 2
42428: NEG
42429: PUSH
42430: EMPTY
42431: LIST
42432: LIST
42433: PUSH
42434: LD_INT 3
42436: PUSH
42437: LD_INT 2
42439: PUSH
42440: EMPTY
42441: LIST
42442: LIST
42443: PUSH
42444: LD_INT 2
42446: PUSH
42447: LD_INT 3
42449: PUSH
42450: EMPTY
42451: LIST
42452: LIST
42453: PUSH
42454: LD_INT 2
42456: NEG
42457: PUSH
42458: LD_INT 1
42460: PUSH
42461: EMPTY
42462: LIST
42463: LIST
42464: PUSH
42465: LD_INT 3
42467: NEG
42468: PUSH
42469: LD_INT 1
42471: NEG
42472: PUSH
42473: EMPTY
42474: LIST
42475: LIST
42476: PUSH
42477: EMPTY
42478: LIST
42479: LIST
42480: LIST
42481: LIST
42482: LIST
42483: LIST
42484: LIST
42485: LIST
42486: LIST
42487: LIST
42488: LIST
42489: LIST
42490: LIST
42491: LIST
42492: LIST
42493: LIST
42494: LIST
42495: LIST
42496: LIST
42497: LIST
42498: LIST
42499: LIST
42500: LIST
42501: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
42502: LD_ADDR_VAR 0 35
42506: PUSH
42507: LD_INT 0
42509: PUSH
42510: LD_INT 0
42512: PUSH
42513: EMPTY
42514: LIST
42515: LIST
42516: PUSH
42517: LD_INT 0
42519: PUSH
42520: LD_INT 1
42522: NEG
42523: PUSH
42524: EMPTY
42525: LIST
42526: LIST
42527: PUSH
42528: LD_INT 1
42530: PUSH
42531: LD_INT 0
42533: PUSH
42534: EMPTY
42535: LIST
42536: LIST
42537: PUSH
42538: LD_INT 1
42540: PUSH
42541: LD_INT 1
42543: PUSH
42544: EMPTY
42545: LIST
42546: LIST
42547: PUSH
42548: LD_INT 0
42550: PUSH
42551: LD_INT 1
42553: PUSH
42554: EMPTY
42555: LIST
42556: LIST
42557: PUSH
42558: LD_INT 1
42560: NEG
42561: PUSH
42562: LD_INT 0
42564: PUSH
42565: EMPTY
42566: LIST
42567: LIST
42568: PUSH
42569: LD_INT 1
42571: NEG
42572: PUSH
42573: LD_INT 1
42575: NEG
42576: PUSH
42577: EMPTY
42578: LIST
42579: LIST
42580: PUSH
42581: LD_INT 2
42583: PUSH
42584: LD_INT 1
42586: PUSH
42587: EMPTY
42588: LIST
42589: LIST
42590: PUSH
42591: LD_INT 2
42593: NEG
42594: PUSH
42595: LD_INT 1
42597: NEG
42598: PUSH
42599: EMPTY
42600: LIST
42601: LIST
42602: PUSH
42603: EMPTY
42604: LIST
42605: LIST
42606: LIST
42607: LIST
42608: LIST
42609: LIST
42610: LIST
42611: LIST
42612: LIST
42613: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
42614: LD_ADDR_VAR 0 36
42618: PUSH
42619: LD_INT 0
42621: PUSH
42622: LD_INT 0
42624: PUSH
42625: EMPTY
42626: LIST
42627: LIST
42628: PUSH
42629: LD_INT 0
42631: PUSH
42632: LD_INT 1
42634: NEG
42635: PUSH
42636: EMPTY
42637: LIST
42638: LIST
42639: PUSH
42640: LD_INT 1
42642: PUSH
42643: LD_INT 0
42645: PUSH
42646: EMPTY
42647: LIST
42648: LIST
42649: PUSH
42650: LD_INT 1
42652: PUSH
42653: LD_INT 1
42655: PUSH
42656: EMPTY
42657: LIST
42658: LIST
42659: PUSH
42660: LD_INT 0
42662: PUSH
42663: LD_INT 1
42665: PUSH
42666: EMPTY
42667: LIST
42668: LIST
42669: PUSH
42670: LD_INT 1
42672: NEG
42673: PUSH
42674: LD_INT 0
42676: PUSH
42677: EMPTY
42678: LIST
42679: LIST
42680: PUSH
42681: LD_INT 1
42683: NEG
42684: PUSH
42685: LD_INT 1
42687: NEG
42688: PUSH
42689: EMPTY
42690: LIST
42691: LIST
42692: PUSH
42693: LD_INT 1
42695: NEG
42696: PUSH
42697: LD_INT 2
42699: NEG
42700: PUSH
42701: EMPTY
42702: LIST
42703: LIST
42704: PUSH
42705: LD_INT 1
42707: PUSH
42708: LD_INT 2
42710: PUSH
42711: EMPTY
42712: LIST
42713: LIST
42714: PUSH
42715: EMPTY
42716: LIST
42717: LIST
42718: LIST
42719: LIST
42720: LIST
42721: LIST
42722: LIST
42723: LIST
42724: LIST
42725: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
42726: LD_ADDR_VAR 0 37
42730: PUSH
42731: LD_INT 0
42733: PUSH
42734: LD_INT 0
42736: PUSH
42737: EMPTY
42738: LIST
42739: LIST
42740: PUSH
42741: LD_INT 0
42743: PUSH
42744: LD_INT 1
42746: NEG
42747: PUSH
42748: EMPTY
42749: LIST
42750: LIST
42751: PUSH
42752: LD_INT 1
42754: PUSH
42755: LD_INT 0
42757: PUSH
42758: EMPTY
42759: LIST
42760: LIST
42761: PUSH
42762: LD_INT 1
42764: PUSH
42765: LD_INT 1
42767: PUSH
42768: EMPTY
42769: LIST
42770: LIST
42771: PUSH
42772: LD_INT 0
42774: PUSH
42775: LD_INT 1
42777: PUSH
42778: EMPTY
42779: LIST
42780: LIST
42781: PUSH
42782: LD_INT 1
42784: NEG
42785: PUSH
42786: LD_INT 0
42788: PUSH
42789: EMPTY
42790: LIST
42791: LIST
42792: PUSH
42793: LD_INT 1
42795: NEG
42796: PUSH
42797: LD_INT 1
42799: NEG
42800: PUSH
42801: EMPTY
42802: LIST
42803: LIST
42804: PUSH
42805: LD_INT 1
42807: PUSH
42808: LD_INT 1
42810: NEG
42811: PUSH
42812: EMPTY
42813: LIST
42814: LIST
42815: PUSH
42816: LD_INT 1
42818: NEG
42819: PUSH
42820: LD_INT 1
42822: PUSH
42823: EMPTY
42824: LIST
42825: LIST
42826: PUSH
42827: EMPTY
42828: LIST
42829: LIST
42830: LIST
42831: LIST
42832: LIST
42833: LIST
42834: LIST
42835: LIST
42836: LIST
42837: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
42838: LD_ADDR_VAR 0 38
42842: PUSH
42843: LD_INT 0
42845: PUSH
42846: LD_INT 0
42848: PUSH
42849: EMPTY
42850: LIST
42851: LIST
42852: PUSH
42853: LD_INT 0
42855: PUSH
42856: LD_INT 1
42858: NEG
42859: PUSH
42860: EMPTY
42861: LIST
42862: LIST
42863: PUSH
42864: LD_INT 1
42866: PUSH
42867: LD_INT 0
42869: PUSH
42870: EMPTY
42871: LIST
42872: LIST
42873: PUSH
42874: LD_INT 1
42876: PUSH
42877: LD_INT 1
42879: PUSH
42880: EMPTY
42881: LIST
42882: LIST
42883: PUSH
42884: LD_INT 0
42886: PUSH
42887: LD_INT 1
42889: PUSH
42890: EMPTY
42891: LIST
42892: LIST
42893: PUSH
42894: LD_INT 1
42896: NEG
42897: PUSH
42898: LD_INT 0
42900: PUSH
42901: EMPTY
42902: LIST
42903: LIST
42904: PUSH
42905: LD_INT 1
42907: NEG
42908: PUSH
42909: LD_INT 1
42911: NEG
42912: PUSH
42913: EMPTY
42914: LIST
42915: LIST
42916: PUSH
42917: LD_INT 2
42919: PUSH
42920: LD_INT 1
42922: PUSH
42923: EMPTY
42924: LIST
42925: LIST
42926: PUSH
42927: LD_INT 2
42929: NEG
42930: PUSH
42931: LD_INT 1
42933: NEG
42934: PUSH
42935: EMPTY
42936: LIST
42937: LIST
42938: PUSH
42939: EMPTY
42940: LIST
42941: LIST
42942: LIST
42943: LIST
42944: LIST
42945: LIST
42946: LIST
42947: LIST
42948: LIST
42949: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
42950: LD_ADDR_VAR 0 39
42954: PUSH
42955: LD_INT 0
42957: PUSH
42958: LD_INT 0
42960: PUSH
42961: EMPTY
42962: LIST
42963: LIST
42964: PUSH
42965: LD_INT 0
42967: PUSH
42968: LD_INT 1
42970: NEG
42971: PUSH
42972: EMPTY
42973: LIST
42974: LIST
42975: PUSH
42976: LD_INT 1
42978: PUSH
42979: LD_INT 0
42981: PUSH
42982: EMPTY
42983: LIST
42984: LIST
42985: PUSH
42986: LD_INT 1
42988: PUSH
42989: LD_INT 1
42991: PUSH
42992: EMPTY
42993: LIST
42994: LIST
42995: PUSH
42996: LD_INT 0
42998: PUSH
42999: LD_INT 1
43001: PUSH
43002: EMPTY
43003: LIST
43004: LIST
43005: PUSH
43006: LD_INT 1
43008: NEG
43009: PUSH
43010: LD_INT 0
43012: PUSH
43013: EMPTY
43014: LIST
43015: LIST
43016: PUSH
43017: LD_INT 1
43019: NEG
43020: PUSH
43021: LD_INT 1
43023: NEG
43024: PUSH
43025: EMPTY
43026: LIST
43027: LIST
43028: PUSH
43029: LD_INT 1
43031: NEG
43032: PUSH
43033: LD_INT 2
43035: NEG
43036: PUSH
43037: EMPTY
43038: LIST
43039: LIST
43040: PUSH
43041: LD_INT 1
43043: PUSH
43044: LD_INT 2
43046: PUSH
43047: EMPTY
43048: LIST
43049: LIST
43050: PUSH
43051: EMPTY
43052: LIST
43053: LIST
43054: LIST
43055: LIST
43056: LIST
43057: LIST
43058: LIST
43059: LIST
43060: LIST
43061: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
43062: LD_ADDR_VAR 0 40
43066: PUSH
43067: LD_INT 0
43069: PUSH
43070: LD_INT 0
43072: PUSH
43073: EMPTY
43074: LIST
43075: LIST
43076: PUSH
43077: LD_INT 0
43079: PUSH
43080: LD_INT 1
43082: NEG
43083: PUSH
43084: EMPTY
43085: LIST
43086: LIST
43087: PUSH
43088: LD_INT 1
43090: PUSH
43091: LD_INT 0
43093: PUSH
43094: EMPTY
43095: LIST
43096: LIST
43097: PUSH
43098: LD_INT 1
43100: PUSH
43101: LD_INT 1
43103: PUSH
43104: EMPTY
43105: LIST
43106: LIST
43107: PUSH
43108: LD_INT 0
43110: PUSH
43111: LD_INT 1
43113: PUSH
43114: EMPTY
43115: LIST
43116: LIST
43117: PUSH
43118: LD_INT 1
43120: NEG
43121: PUSH
43122: LD_INT 0
43124: PUSH
43125: EMPTY
43126: LIST
43127: LIST
43128: PUSH
43129: LD_INT 1
43131: NEG
43132: PUSH
43133: LD_INT 1
43135: NEG
43136: PUSH
43137: EMPTY
43138: LIST
43139: LIST
43140: PUSH
43141: LD_INT 1
43143: PUSH
43144: LD_INT 1
43146: NEG
43147: PUSH
43148: EMPTY
43149: LIST
43150: LIST
43151: PUSH
43152: LD_INT 1
43154: NEG
43155: PUSH
43156: LD_INT 1
43158: PUSH
43159: EMPTY
43160: LIST
43161: LIST
43162: PUSH
43163: EMPTY
43164: LIST
43165: LIST
43166: LIST
43167: LIST
43168: LIST
43169: LIST
43170: LIST
43171: LIST
43172: LIST
43173: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43174: LD_ADDR_VAR 0 41
43178: PUSH
43179: LD_INT 0
43181: PUSH
43182: LD_INT 0
43184: PUSH
43185: EMPTY
43186: LIST
43187: LIST
43188: PUSH
43189: LD_INT 0
43191: PUSH
43192: LD_INT 1
43194: NEG
43195: PUSH
43196: EMPTY
43197: LIST
43198: LIST
43199: PUSH
43200: LD_INT 1
43202: PUSH
43203: LD_INT 0
43205: PUSH
43206: EMPTY
43207: LIST
43208: LIST
43209: PUSH
43210: LD_INT 1
43212: PUSH
43213: LD_INT 1
43215: PUSH
43216: EMPTY
43217: LIST
43218: LIST
43219: PUSH
43220: LD_INT 0
43222: PUSH
43223: LD_INT 1
43225: PUSH
43226: EMPTY
43227: LIST
43228: LIST
43229: PUSH
43230: LD_INT 1
43232: NEG
43233: PUSH
43234: LD_INT 0
43236: PUSH
43237: EMPTY
43238: LIST
43239: LIST
43240: PUSH
43241: LD_INT 1
43243: NEG
43244: PUSH
43245: LD_INT 1
43247: NEG
43248: PUSH
43249: EMPTY
43250: LIST
43251: LIST
43252: PUSH
43253: LD_INT 1
43255: NEG
43256: PUSH
43257: LD_INT 2
43259: NEG
43260: PUSH
43261: EMPTY
43262: LIST
43263: LIST
43264: PUSH
43265: LD_INT 1
43267: PUSH
43268: LD_INT 1
43270: NEG
43271: PUSH
43272: EMPTY
43273: LIST
43274: LIST
43275: PUSH
43276: LD_INT 2
43278: PUSH
43279: LD_INT 0
43281: PUSH
43282: EMPTY
43283: LIST
43284: LIST
43285: PUSH
43286: LD_INT 2
43288: PUSH
43289: LD_INT 1
43291: PUSH
43292: EMPTY
43293: LIST
43294: LIST
43295: PUSH
43296: LD_INT 2
43298: PUSH
43299: LD_INT 2
43301: PUSH
43302: EMPTY
43303: LIST
43304: LIST
43305: PUSH
43306: LD_INT 1
43308: PUSH
43309: LD_INT 2
43311: PUSH
43312: EMPTY
43313: LIST
43314: LIST
43315: PUSH
43316: LD_INT 1
43318: NEG
43319: PUSH
43320: LD_INT 1
43322: PUSH
43323: EMPTY
43324: LIST
43325: LIST
43326: PUSH
43327: LD_INT 2
43329: NEG
43330: PUSH
43331: LD_INT 0
43333: PUSH
43334: EMPTY
43335: LIST
43336: LIST
43337: PUSH
43338: LD_INT 2
43340: NEG
43341: PUSH
43342: LD_INT 1
43344: NEG
43345: PUSH
43346: EMPTY
43347: LIST
43348: LIST
43349: PUSH
43350: LD_INT 2
43352: NEG
43353: PUSH
43354: LD_INT 2
43356: NEG
43357: PUSH
43358: EMPTY
43359: LIST
43360: LIST
43361: PUSH
43362: LD_INT 2
43364: NEG
43365: PUSH
43366: LD_INT 3
43368: NEG
43369: PUSH
43370: EMPTY
43371: LIST
43372: LIST
43373: PUSH
43374: LD_INT 2
43376: PUSH
43377: LD_INT 1
43379: NEG
43380: PUSH
43381: EMPTY
43382: LIST
43383: LIST
43384: PUSH
43385: LD_INT 3
43387: PUSH
43388: LD_INT 0
43390: PUSH
43391: EMPTY
43392: LIST
43393: LIST
43394: PUSH
43395: LD_INT 3
43397: PUSH
43398: LD_INT 1
43400: PUSH
43401: EMPTY
43402: LIST
43403: LIST
43404: PUSH
43405: LD_INT 3
43407: PUSH
43408: LD_INT 2
43410: PUSH
43411: EMPTY
43412: LIST
43413: LIST
43414: PUSH
43415: LD_INT 3
43417: PUSH
43418: LD_INT 3
43420: PUSH
43421: EMPTY
43422: LIST
43423: LIST
43424: PUSH
43425: LD_INT 2
43427: PUSH
43428: LD_INT 3
43430: PUSH
43431: EMPTY
43432: LIST
43433: LIST
43434: PUSH
43435: LD_INT 2
43437: NEG
43438: PUSH
43439: LD_INT 1
43441: PUSH
43442: EMPTY
43443: LIST
43444: LIST
43445: PUSH
43446: LD_INT 3
43448: NEG
43449: PUSH
43450: LD_INT 0
43452: PUSH
43453: EMPTY
43454: LIST
43455: LIST
43456: PUSH
43457: LD_INT 3
43459: NEG
43460: PUSH
43461: LD_INT 1
43463: NEG
43464: PUSH
43465: EMPTY
43466: LIST
43467: LIST
43468: PUSH
43469: LD_INT 3
43471: NEG
43472: PUSH
43473: LD_INT 2
43475: NEG
43476: PUSH
43477: EMPTY
43478: LIST
43479: LIST
43480: PUSH
43481: LD_INT 3
43483: NEG
43484: PUSH
43485: LD_INT 3
43487: NEG
43488: PUSH
43489: EMPTY
43490: LIST
43491: LIST
43492: PUSH
43493: EMPTY
43494: LIST
43495: LIST
43496: LIST
43497: LIST
43498: LIST
43499: LIST
43500: LIST
43501: LIST
43502: LIST
43503: LIST
43504: LIST
43505: LIST
43506: LIST
43507: LIST
43508: LIST
43509: LIST
43510: LIST
43511: LIST
43512: LIST
43513: LIST
43514: LIST
43515: LIST
43516: LIST
43517: LIST
43518: LIST
43519: LIST
43520: LIST
43521: LIST
43522: LIST
43523: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43524: LD_ADDR_VAR 0 42
43528: PUSH
43529: LD_INT 0
43531: PUSH
43532: LD_INT 0
43534: PUSH
43535: EMPTY
43536: LIST
43537: LIST
43538: PUSH
43539: LD_INT 0
43541: PUSH
43542: LD_INT 1
43544: NEG
43545: PUSH
43546: EMPTY
43547: LIST
43548: LIST
43549: PUSH
43550: LD_INT 1
43552: PUSH
43553: LD_INT 0
43555: PUSH
43556: EMPTY
43557: LIST
43558: LIST
43559: PUSH
43560: LD_INT 1
43562: PUSH
43563: LD_INT 1
43565: PUSH
43566: EMPTY
43567: LIST
43568: LIST
43569: PUSH
43570: LD_INT 0
43572: PUSH
43573: LD_INT 1
43575: PUSH
43576: EMPTY
43577: LIST
43578: LIST
43579: PUSH
43580: LD_INT 1
43582: NEG
43583: PUSH
43584: LD_INT 0
43586: PUSH
43587: EMPTY
43588: LIST
43589: LIST
43590: PUSH
43591: LD_INT 1
43593: NEG
43594: PUSH
43595: LD_INT 1
43597: NEG
43598: PUSH
43599: EMPTY
43600: LIST
43601: LIST
43602: PUSH
43603: LD_INT 1
43605: NEG
43606: PUSH
43607: LD_INT 2
43609: NEG
43610: PUSH
43611: EMPTY
43612: LIST
43613: LIST
43614: PUSH
43615: LD_INT 0
43617: PUSH
43618: LD_INT 2
43620: NEG
43621: PUSH
43622: EMPTY
43623: LIST
43624: LIST
43625: PUSH
43626: LD_INT 1
43628: PUSH
43629: LD_INT 1
43631: NEG
43632: PUSH
43633: EMPTY
43634: LIST
43635: LIST
43636: PUSH
43637: LD_INT 2
43639: PUSH
43640: LD_INT 1
43642: PUSH
43643: EMPTY
43644: LIST
43645: LIST
43646: PUSH
43647: LD_INT 2
43649: PUSH
43650: LD_INT 2
43652: PUSH
43653: EMPTY
43654: LIST
43655: LIST
43656: PUSH
43657: LD_INT 1
43659: PUSH
43660: LD_INT 2
43662: PUSH
43663: EMPTY
43664: LIST
43665: LIST
43666: PUSH
43667: LD_INT 0
43669: PUSH
43670: LD_INT 2
43672: PUSH
43673: EMPTY
43674: LIST
43675: LIST
43676: PUSH
43677: LD_INT 1
43679: NEG
43680: PUSH
43681: LD_INT 1
43683: PUSH
43684: EMPTY
43685: LIST
43686: LIST
43687: PUSH
43688: LD_INT 2
43690: NEG
43691: PUSH
43692: LD_INT 1
43694: NEG
43695: PUSH
43696: EMPTY
43697: LIST
43698: LIST
43699: PUSH
43700: LD_INT 2
43702: NEG
43703: PUSH
43704: LD_INT 2
43706: NEG
43707: PUSH
43708: EMPTY
43709: LIST
43710: LIST
43711: PUSH
43712: LD_INT 2
43714: NEG
43715: PUSH
43716: LD_INT 3
43718: NEG
43719: PUSH
43720: EMPTY
43721: LIST
43722: LIST
43723: PUSH
43724: LD_INT 1
43726: NEG
43727: PUSH
43728: LD_INT 3
43730: NEG
43731: PUSH
43732: EMPTY
43733: LIST
43734: LIST
43735: PUSH
43736: LD_INT 0
43738: PUSH
43739: LD_INT 3
43741: NEG
43742: PUSH
43743: EMPTY
43744: LIST
43745: LIST
43746: PUSH
43747: LD_INT 1
43749: PUSH
43750: LD_INT 2
43752: NEG
43753: PUSH
43754: EMPTY
43755: LIST
43756: LIST
43757: PUSH
43758: LD_INT 3
43760: PUSH
43761: LD_INT 2
43763: PUSH
43764: EMPTY
43765: LIST
43766: LIST
43767: PUSH
43768: LD_INT 3
43770: PUSH
43771: LD_INT 3
43773: PUSH
43774: EMPTY
43775: LIST
43776: LIST
43777: PUSH
43778: LD_INT 2
43780: PUSH
43781: LD_INT 3
43783: PUSH
43784: EMPTY
43785: LIST
43786: LIST
43787: PUSH
43788: LD_INT 1
43790: PUSH
43791: LD_INT 3
43793: PUSH
43794: EMPTY
43795: LIST
43796: LIST
43797: PUSH
43798: LD_INT 0
43800: PUSH
43801: LD_INT 3
43803: PUSH
43804: EMPTY
43805: LIST
43806: LIST
43807: PUSH
43808: LD_INT 1
43810: NEG
43811: PUSH
43812: LD_INT 2
43814: PUSH
43815: EMPTY
43816: LIST
43817: LIST
43818: PUSH
43819: LD_INT 3
43821: NEG
43822: PUSH
43823: LD_INT 2
43825: NEG
43826: PUSH
43827: EMPTY
43828: LIST
43829: LIST
43830: PUSH
43831: LD_INT 3
43833: NEG
43834: PUSH
43835: LD_INT 3
43837: NEG
43838: PUSH
43839: EMPTY
43840: LIST
43841: LIST
43842: PUSH
43843: EMPTY
43844: LIST
43845: LIST
43846: LIST
43847: LIST
43848: LIST
43849: LIST
43850: LIST
43851: LIST
43852: LIST
43853: LIST
43854: LIST
43855: LIST
43856: LIST
43857: LIST
43858: LIST
43859: LIST
43860: LIST
43861: LIST
43862: LIST
43863: LIST
43864: LIST
43865: LIST
43866: LIST
43867: LIST
43868: LIST
43869: LIST
43870: LIST
43871: LIST
43872: LIST
43873: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
43874: LD_ADDR_VAR 0 43
43878: PUSH
43879: LD_INT 0
43881: PUSH
43882: LD_INT 0
43884: PUSH
43885: EMPTY
43886: LIST
43887: LIST
43888: PUSH
43889: LD_INT 0
43891: PUSH
43892: LD_INT 1
43894: NEG
43895: PUSH
43896: EMPTY
43897: LIST
43898: LIST
43899: PUSH
43900: LD_INT 1
43902: PUSH
43903: LD_INT 0
43905: PUSH
43906: EMPTY
43907: LIST
43908: LIST
43909: PUSH
43910: LD_INT 1
43912: PUSH
43913: LD_INT 1
43915: PUSH
43916: EMPTY
43917: LIST
43918: LIST
43919: PUSH
43920: LD_INT 0
43922: PUSH
43923: LD_INT 1
43925: PUSH
43926: EMPTY
43927: LIST
43928: LIST
43929: PUSH
43930: LD_INT 1
43932: NEG
43933: PUSH
43934: LD_INT 0
43936: PUSH
43937: EMPTY
43938: LIST
43939: LIST
43940: PUSH
43941: LD_INT 1
43943: NEG
43944: PUSH
43945: LD_INT 1
43947: NEG
43948: PUSH
43949: EMPTY
43950: LIST
43951: LIST
43952: PUSH
43953: LD_INT 1
43955: NEG
43956: PUSH
43957: LD_INT 2
43959: NEG
43960: PUSH
43961: EMPTY
43962: LIST
43963: LIST
43964: PUSH
43965: LD_INT 0
43967: PUSH
43968: LD_INT 2
43970: NEG
43971: PUSH
43972: EMPTY
43973: LIST
43974: LIST
43975: PUSH
43976: LD_INT 1
43978: PUSH
43979: LD_INT 1
43981: NEG
43982: PUSH
43983: EMPTY
43984: LIST
43985: LIST
43986: PUSH
43987: LD_INT 2
43989: PUSH
43990: LD_INT 0
43992: PUSH
43993: EMPTY
43994: LIST
43995: LIST
43996: PUSH
43997: LD_INT 2
43999: PUSH
44000: LD_INT 1
44002: PUSH
44003: EMPTY
44004: LIST
44005: LIST
44006: PUSH
44007: LD_INT 1
44009: PUSH
44010: LD_INT 2
44012: PUSH
44013: EMPTY
44014: LIST
44015: LIST
44016: PUSH
44017: LD_INT 0
44019: PUSH
44020: LD_INT 2
44022: PUSH
44023: EMPTY
44024: LIST
44025: LIST
44026: PUSH
44027: LD_INT 1
44029: NEG
44030: PUSH
44031: LD_INT 1
44033: PUSH
44034: EMPTY
44035: LIST
44036: LIST
44037: PUSH
44038: LD_INT 2
44040: NEG
44041: PUSH
44042: LD_INT 0
44044: PUSH
44045: EMPTY
44046: LIST
44047: LIST
44048: PUSH
44049: LD_INT 2
44051: NEG
44052: PUSH
44053: LD_INT 1
44055: NEG
44056: PUSH
44057: EMPTY
44058: LIST
44059: LIST
44060: PUSH
44061: LD_INT 1
44063: NEG
44064: PUSH
44065: LD_INT 3
44067: NEG
44068: PUSH
44069: EMPTY
44070: LIST
44071: LIST
44072: PUSH
44073: LD_INT 0
44075: PUSH
44076: LD_INT 3
44078: NEG
44079: PUSH
44080: EMPTY
44081: LIST
44082: LIST
44083: PUSH
44084: LD_INT 1
44086: PUSH
44087: LD_INT 2
44089: NEG
44090: PUSH
44091: EMPTY
44092: LIST
44093: LIST
44094: PUSH
44095: LD_INT 2
44097: PUSH
44098: LD_INT 1
44100: NEG
44101: PUSH
44102: EMPTY
44103: LIST
44104: LIST
44105: PUSH
44106: LD_INT 3
44108: PUSH
44109: LD_INT 0
44111: PUSH
44112: EMPTY
44113: LIST
44114: LIST
44115: PUSH
44116: LD_INT 3
44118: PUSH
44119: LD_INT 1
44121: PUSH
44122: EMPTY
44123: LIST
44124: LIST
44125: PUSH
44126: LD_INT 1
44128: PUSH
44129: LD_INT 3
44131: PUSH
44132: EMPTY
44133: LIST
44134: LIST
44135: PUSH
44136: LD_INT 0
44138: PUSH
44139: LD_INT 3
44141: PUSH
44142: EMPTY
44143: LIST
44144: LIST
44145: PUSH
44146: LD_INT 1
44148: NEG
44149: PUSH
44150: LD_INT 2
44152: PUSH
44153: EMPTY
44154: LIST
44155: LIST
44156: PUSH
44157: LD_INT 2
44159: NEG
44160: PUSH
44161: LD_INT 1
44163: PUSH
44164: EMPTY
44165: LIST
44166: LIST
44167: PUSH
44168: LD_INT 3
44170: NEG
44171: PUSH
44172: LD_INT 0
44174: PUSH
44175: EMPTY
44176: LIST
44177: LIST
44178: PUSH
44179: LD_INT 3
44181: NEG
44182: PUSH
44183: LD_INT 1
44185: NEG
44186: PUSH
44187: EMPTY
44188: LIST
44189: LIST
44190: PUSH
44191: EMPTY
44192: LIST
44193: LIST
44194: LIST
44195: LIST
44196: LIST
44197: LIST
44198: LIST
44199: LIST
44200: LIST
44201: LIST
44202: LIST
44203: LIST
44204: LIST
44205: LIST
44206: LIST
44207: LIST
44208: LIST
44209: LIST
44210: LIST
44211: LIST
44212: LIST
44213: LIST
44214: LIST
44215: LIST
44216: LIST
44217: LIST
44218: LIST
44219: LIST
44220: LIST
44221: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44222: LD_ADDR_VAR 0 44
44226: PUSH
44227: LD_INT 0
44229: PUSH
44230: LD_INT 0
44232: PUSH
44233: EMPTY
44234: LIST
44235: LIST
44236: PUSH
44237: LD_INT 0
44239: PUSH
44240: LD_INT 1
44242: NEG
44243: PUSH
44244: EMPTY
44245: LIST
44246: LIST
44247: PUSH
44248: LD_INT 1
44250: PUSH
44251: LD_INT 0
44253: PUSH
44254: EMPTY
44255: LIST
44256: LIST
44257: PUSH
44258: LD_INT 1
44260: PUSH
44261: LD_INT 1
44263: PUSH
44264: EMPTY
44265: LIST
44266: LIST
44267: PUSH
44268: LD_INT 0
44270: PUSH
44271: LD_INT 1
44273: PUSH
44274: EMPTY
44275: LIST
44276: LIST
44277: PUSH
44278: LD_INT 1
44280: NEG
44281: PUSH
44282: LD_INT 0
44284: PUSH
44285: EMPTY
44286: LIST
44287: LIST
44288: PUSH
44289: LD_INT 1
44291: NEG
44292: PUSH
44293: LD_INT 1
44295: NEG
44296: PUSH
44297: EMPTY
44298: LIST
44299: LIST
44300: PUSH
44301: LD_INT 1
44303: NEG
44304: PUSH
44305: LD_INT 2
44307: NEG
44308: PUSH
44309: EMPTY
44310: LIST
44311: LIST
44312: PUSH
44313: LD_INT 1
44315: PUSH
44316: LD_INT 1
44318: NEG
44319: PUSH
44320: EMPTY
44321: LIST
44322: LIST
44323: PUSH
44324: LD_INT 2
44326: PUSH
44327: LD_INT 0
44329: PUSH
44330: EMPTY
44331: LIST
44332: LIST
44333: PUSH
44334: LD_INT 2
44336: PUSH
44337: LD_INT 1
44339: PUSH
44340: EMPTY
44341: LIST
44342: LIST
44343: PUSH
44344: LD_INT 2
44346: PUSH
44347: LD_INT 2
44349: PUSH
44350: EMPTY
44351: LIST
44352: LIST
44353: PUSH
44354: LD_INT 1
44356: PUSH
44357: LD_INT 2
44359: PUSH
44360: EMPTY
44361: LIST
44362: LIST
44363: PUSH
44364: LD_INT 1
44366: NEG
44367: PUSH
44368: LD_INT 1
44370: PUSH
44371: EMPTY
44372: LIST
44373: LIST
44374: PUSH
44375: LD_INT 2
44377: NEG
44378: PUSH
44379: LD_INT 0
44381: PUSH
44382: EMPTY
44383: LIST
44384: LIST
44385: PUSH
44386: LD_INT 2
44388: NEG
44389: PUSH
44390: LD_INT 1
44392: NEG
44393: PUSH
44394: EMPTY
44395: LIST
44396: LIST
44397: PUSH
44398: LD_INT 2
44400: NEG
44401: PUSH
44402: LD_INT 2
44404: NEG
44405: PUSH
44406: EMPTY
44407: LIST
44408: LIST
44409: PUSH
44410: LD_INT 2
44412: NEG
44413: PUSH
44414: LD_INT 3
44416: NEG
44417: PUSH
44418: EMPTY
44419: LIST
44420: LIST
44421: PUSH
44422: LD_INT 2
44424: PUSH
44425: LD_INT 1
44427: NEG
44428: PUSH
44429: EMPTY
44430: LIST
44431: LIST
44432: PUSH
44433: LD_INT 3
44435: PUSH
44436: LD_INT 0
44438: PUSH
44439: EMPTY
44440: LIST
44441: LIST
44442: PUSH
44443: LD_INT 3
44445: PUSH
44446: LD_INT 1
44448: PUSH
44449: EMPTY
44450: LIST
44451: LIST
44452: PUSH
44453: LD_INT 3
44455: PUSH
44456: LD_INT 2
44458: PUSH
44459: EMPTY
44460: LIST
44461: LIST
44462: PUSH
44463: LD_INT 3
44465: PUSH
44466: LD_INT 3
44468: PUSH
44469: EMPTY
44470: LIST
44471: LIST
44472: PUSH
44473: LD_INT 2
44475: PUSH
44476: LD_INT 3
44478: PUSH
44479: EMPTY
44480: LIST
44481: LIST
44482: PUSH
44483: LD_INT 2
44485: NEG
44486: PUSH
44487: LD_INT 1
44489: PUSH
44490: EMPTY
44491: LIST
44492: LIST
44493: PUSH
44494: LD_INT 3
44496: NEG
44497: PUSH
44498: LD_INT 0
44500: PUSH
44501: EMPTY
44502: LIST
44503: LIST
44504: PUSH
44505: LD_INT 3
44507: NEG
44508: PUSH
44509: LD_INT 1
44511: NEG
44512: PUSH
44513: EMPTY
44514: LIST
44515: LIST
44516: PUSH
44517: LD_INT 3
44519: NEG
44520: PUSH
44521: LD_INT 2
44523: NEG
44524: PUSH
44525: EMPTY
44526: LIST
44527: LIST
44528: PUSH
44529: LD_INT 3
44531: NEG
44532: PUSH
44533: LD_INT 3
44535: NEG
44536: PUSH
44537: EMPTY
44538: LIST
44539: LIST
44540: PUSH
44541: EMPTY
44542: LIST
44543: LIST
44544: LIST
44545: LIST
44546: LIST
44547: LIST
44548: LIST
44549: LIST
44550: LIST
44551: LIST
44552: LIST
44553: LIST
44554: LIST
44555: LIST
44556: LIST
44557: LIST
44558: LIST
44559: LIST
44560: LIST
44561: LIST
44562: LIST
44563: LIST
44564: LIST
44565: LIST
44566: LIST
44567: LIST
44568: LIST
44569: LIST
44570: LIST
44571: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44572: LD_ADDR_VAR 0 45
44576: PUSH
44577: LD_INT 0
44579: PUSH
44580: LD_INT 0
44582: PUSH
44583: EMPTY
44584: LIST
44585: LIST
44586: PUSH
44587: LD_INT 0
44589: PUSH
44590: LD_INT 1
44592: NEG
44593: PUSH
44594: EMPTY
44595: LIST
44596: LIST
44597: PUSH
44598: LD_INT 1
44600: PUSH
44601: LD_INT 0
44603: PUSH
44604: EMPTY
44605: LIST
44606: LIST
44607: PUSH
44608: LD_INT 1
44610: PUSH
44611: LD_INT 1
44613: PUSH
44614: EMPTY
44615: LIST
44616: LIST
44617: PUSH
44618: LD_INT 0
44620: PUSH
44621: LD_INT 1
44623: PUSH
44624: EMPTY
44625: LIST
44626: LIST
44627: PUSH
44628: LD_INT 1
44630: NEG
44631: PUSH
44632: LD_INT 0
44634: PUSH
44635: EMPTY
44636: LIST
44637: LIST
44638: PUSH
44639: LD_INT 1
44641: NEG
44642: PUSH
44643: LD_INT 1
44645: NEG
44646: PUSH
44647: EMPTY
44648: LIST
44649: LIST
44650: PUSH
44651: LD_INT 1
44653: NEG
44654: PUSH
44655: LD_INT 2
44657: NEG
44658: PUSH
44659: EMPTY
44660: LIST
44661: LIST
44662: PUSH
44663: LD_INT 0
44665: PUSH
44666: LD_INT 2
44668: NEG
44669: PUSH
44670: EMPTY
44671: LIST
44672: LIST
44673: PUSH
44674: LD_INT 1
44676: PUSH
44677: LD_INT 1
44679: NEG
44680: PUSH
44681: EMPTY
44682: LIST
44683: LIST
44684: PUSH
44685: LD_INT 2
44687: PUSH
44688: LD_INT 1
44690: PUSH
44691: EMPTY
44692: LIST
44693: LIST
44694: PUSH
44695: LD_INT 2
44697: PUSH
44698: LD_INT 2
44700: PUSH
44701: EMPTY
44702: LIST
44703: LIST
44704: PUSH
44705: LD_INT 1
44707: PUSH
44708: LD_INT 2
44710: PUSH
44711: EMPTY
44712: LIST
44713: LIST
44714: PUSH
44715: LD_INT 0
44717: PUSH
44718: LD_INT 2
44720: PUSH
44721: EMPTY
44722: LIST
44723: LIST
44724: PUSH
44725: LD_INT 1
44727: NEG
44728: PUSH
44729: LD_INT 1
44731: PUSH
44732: EMPTY
44733: LIST
44734: LIST
44735: PUSH
44736: LD_INT 2
44738: NEG
44739: PUSH
44740: LD_INT 1
44742: NEG
44743: PUSH
44744: EMPTY
44745: LIST
44746: LIST
44747: PUSH
44748: LD_INT 2
44750: NEG
44751: PUSH
44752: LD_INT 2
44754: NEG
44755: PUSH
44756: EMPTY
44757: LIST
44758: LIST
44759: PUSH
44760: LD_INT 2
44762: NEG
44763: PUSH
44764: LD_INT 3
44766: NEG
44767: PUSH
44768: EMPTY
44769: LIST
44770: LIST
44771: PUSH
44772: LD_INT 1
44774: NEG
44775: PUSH
44776: LD_INT 3
44778: NEG
44779: PUSH
44780: EMPTY
44781: LIST
44782: LIST
44783: PUSH
44784: LD_INT 0
44786: PUSH
44787: LD_INT 3
44789: NEG
44790: PUSH
44791: EMPTY
44792: LIST
44793: LIST
44794: PUSH
44795: LD_INT 1
44797: PUSH
44798: LD_INT 2
44800: NEG
44801: PUSH
44802: EMPTY
44803: LIST
44804: LIST
44805: PUSH
44806: LD_INT 3
44808: PUSH
44809: LD_INT 2
44811: PUSH
44812: EMPTY
44813: LIST
44814: LIST
44815: PUSH
44816: LD_INT 3
44818: PUSH
44819: LD_INT 3
44821: PUSH
44822: EMPTY
44823: LIST
44824: LIST
44825: PUSH
44826: LD_INT 2
44828: PUSH
44829: LD_INT 3
44831: PUSH
44832: EMPTY
44833: LIST
44834: LIST
44835: PUSH
44836: LD_INT 1
44838: PUSH
44839: LD_INT 3
44841: PUSH
44842: EMPTY
44843: LIST
44844: LIST
44845: PUSH
44846: LD_INT 0
44848: PUSH
44849: LD_INT 3
44851: PUSH
44852: EMPTY
44853: LIST
44854: LIST
44855: PUSH
44856: LD_INT 1
44858: NEG
44859: PUSH
44860: LD_INT 2
44862: PUSH
44863: EMPTY
44864: LIST
44865: LIST
44866: PUSH
44867: LD_INT 3
44869: NEG
44870: PUSH
44871: LD_INT 2
44873: NEG
44874: PUSH
44875: EMPTY
44876: LIST
44877: LIST
44878: PUSH
44879: LD_INT 3
44881: NEG
44882: PUSH
44883: LD_INT 3
44885: NEG
44886: PUSH
44887: EMPTY
44888: LIST
44889: LIST
44890: PUSH
44891: EMPTY
44892: LIST
44893: LIST
44894: LIST
44895: LIST
44896: LIST
44897: LIST
44898: LIST
44899: LIST
44900: LIST
44901: LIST
44902: LIST
44903: LIST
44904: LIST
44905: LIST
44906: LIST
44907: LIST
44908: LIST
44909: LIST
44910: LIST
44911: LIST
44912: LIST
44913: LIST
44914: LIST
44915: LIST
44916: LIST
44917: LIST
44918: LIST
44919: LIST
44920: LIST
44921: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
44922: LD_ADDR_VAR 0 46
44926: PUSH
44927: LD_INT 0
44929: PUSH
44930: LD_INT 0
44932: PUSH
44933: EMPTY
44934: LIST
44935: LIST
44936: PUSH
44937: LD_INT 0
44939: PUSH
44940: LD_INT 1
44942: NEG
44943: PUSH
44944: EMPTY
44945: LIST
44946: LIST
44947: PUSH
44948: LD_INT 1
44950: PUSH
44951: LD_INT 0
44953: PUSH
44954: EMPTY
44955: LIST
44956: LIST
44957: PUSH
44958: LD_INT 1
44960: PUSH
44961: LD_INT 1
44963: PUSH
44964: EMPTY
44965: LIST
44966: LIST
44967: PUSH
44968: LD_INT 0
44970: PUSH
44971: LD_INT 1
44973: PUSH
44974: EMPTY
44975: LIST
44976: LIST
44977: PUSH
44978: LD_INT 1
44980: NEG
44981: PUSH
44982: LD_INT 0
44984: PUSH
44985: EMPTY
44986: LIST
44987: LIST
44988: PUSH
44989: LD_INT 1
44991: NEG
44992: PUSH
44993: LD_INT 1
44995: NEG
44996: PUSH
44997: EMPTY
44998: LIST
44999: LIST
45000: PUSH
45001: LD_INT 1
45003: NEG
45004: PUSH
45005: LD_INT 2
45007: NEG
45008: PUSH
45009: EMPTY
45010: LIST
45011: LIST
45012: PUSH
45013: LD_INT 0
45015: PUSH
45016: LD_INT 2
45018: NEG
45019: PUSH
45020: EMPTY
45021: LIST
45022: LIST
45023: PUSH
45024: LD_INT 1
45026: PUSH
45027: LD_INT 1
45029: NEG
45030: PUSH
45031: EMPTY
45032: LIST
45033: LIST
45034: PUSH
45035: LD_INT 2
45037: PUSH
45038: LD_INT 0
45040: PUSH
45041: EMPTY
45042: LIST
45043: LIST
45044: PUSH
45045: LD_INT 2
45047: PUSH
45048: LD_INT 1
45050: PUSH
45051: EMPTY
45052: LIST
45053: LIST
45054: PUSH
45055: LD_INT 1
45057: PUSH
45058: LD_INT 2
45060: PUSH
45061: EMPTY
45062: LIST
45063: LIST
45064: PUSH
45065: LD_INT 0
45067: PUSH
45068: LD_INT 2
45070: PUSH
45071: EMPTY
45072: LIST
45073: LIST
45074: PUSH
45075: LD_INT 1
45077: NEG
45078: PUSH
45079: LD_INT 1
45081: PUSH
45082: EMPTY
45083: LIST
45084: LIST
45085: PUSH
45086: LD_INT 2
45088: NEG
45089: PUSH
45090: LD_INT 0
45092: PUSH
45093: EMPTY
45094: LIST
45095: LIST
45096: PUSH
45097: LD_INT 2
45099: NEG
45100: PUSH
45101: LD_INT 1
45103: NEG
45104: PUSH
45105: EMPTY
45106: LIST
45107: LIST
45108: PUSH
45109: LD_INT 1
45111: NEG
45112: PUSH
45113: LD_INT 3
45115: NEG
45116: PUSH
45117: EMPTY
45118: LIST
45119: LIST
45120: PUSH
45121: LD_INT 0
45123: PUSH
45124: LD_INT 3
45126: NEG
45127: PUSH
45128: EMPTY
45129: LIST
45130: LIST
45131: PUSH
45132: LD_INT 1
45134: PUSH
45135: LD_INT 2
45137: NEG
45138: PUSH
45139: EMPTY
45140: LIST
45141: LIST
45142: PUSH
45143: LD_INT 2
45145: PUSH
45146: LD_INT 1
45148: NEG
45149: PUSH
45150: EMPTY
45151: LIST
45152: LIST
45153: PUSH
45154: LD_INT 3
45156: PUSH
45157: LD_INT 0
45159: PUSH
45160: EMPTY
45161: LIST
45162: LIST
45163: PUSH
45164: LD_INT 3
45166: PUSH
45167: LD_INT 1
45169: PUSH
45170: EMPTY
45171: LIST
45172: LIST
45173: PUSH
45174: LD_INT 1
45176: PUSH
45177: LD_INT 3
45179: PUSH
45180: EMPTY
45181: LIST
45182: LIST
45183: PUSH
45184: LD_INT 0
45186: PUSH
45187: LD_INT 3
45189: PUSH
45190: EMPTY
45191: LIST
45192: LIST
45193: PUSH
45194: LD_INT 1
45196: NEG
45197: PUSH
45198: LD_INT 2
45200: PUSH
45201: EMPTY
45202: LIST
45203: LIST
45204: PUSH
45205: LD_INT 2
45207: NEG
45208: PUSH
45209: LD_INT 1
45211: PUSH
45212: EMPTY
45213: LIST
45214: LIST
45215: PUSH
45216: LD_INT 3
45218: NEG
45219: PUSH
45220: LD_INT 0
45222: PUSH
45223: EMPTY
45224: LIST
45225: LIST
45226: PUSH
45227: LD_INT 3
45229: NEG
45230: PUSH
45231: LD_INT 1
45233: NEG
45234: PUSH
45235: EMPTY
45236: LIST
45237: LIST
45238: PUSH
45239: EMPTY
45240: LIST
45241: LIST
45242: LIST
45243: LIST
45244: LIST
45245: LIST
45246: LIST
45247: LIST
45248: LIST
45249: LIST
45250: LIST
45251: LIST
45252: LIST
45253: LIST
45254: LIST
45255: LIST
45256: LIST
45257: LIST
45258: LIST
45259: LIST
45260: LIST
45261: LIST
45262: LIST
45263: LIST
45264: LIST
45265: LIST
45266: LIST
45267: LIST
45268: LIST
45269: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45270: LD_ADDR_VAR 0 47
45274: PUSH
45275: LD_INT 0
45277: PUSH
45278: LD_INT 0
45280: PUSH
45281: EMPTY
45282: LIST
45283: LIST
45284: PUSH
45285: LD_INT 0
45287: PUSH
45288: LD_INT 1
45290: NEG
45291: PUSH
45292: EMPTY
45293: LIST
45294: LIST
45295: PUSH
45296: LD_INT 1
45298: PUSH
45299: LD_INT 0
45301: PUSH
45302: EMPTY
45303: LIST
45304: LIST
45305: PUSH
45306: LD_INT 1
45308: PUSH
45309: LD_INT 1
45311: PUSH
45312: EMPTY
45313: LIST
45314: LIST
45315: PUSH
45316: LD_INT 0
45318: PUSH
45319: LD_INT 1
45321: PUSH
45322: EMPTY
45323: LIST
45324: LIST
45325: PUSH
45326: LD_INT 1
45328: NEG
45329: PUSH
45330: LD_INT 0
45332: PUSH
45333: EMPTY
45334: LIST
45335: LIST
45336: PUSH
45337: LD_INT 1
45339: NEG
45340: PUSH
45341: LD_INT 1
45343: NEG
45344: PUSH
45345: EMPTY
45346: LIST
45347: LIST
45348: PUSH
45349: LD_INT 1
45351: NEG
45352: PUSH
45353: LD_INT 2
45355: NEG
45356: PUSH
45357: EMPTY
45358: LIST
45359: LIST
45360: PUSH
45361: LD_INT 0
45363: PUSH
45364: LD_INT 2
45366: NEG
45367: PUSH
45368: EMPTY
45369: LIST
45370: LIST
45371: PUSH
45372: LD_INT 1
45374: PUSH
45375: LD_INT 1
45377: NEG
45378: PUSH
45379: EMPTY
45380: LIST
45381: LIST
45382: PUSH
45383: LD_INT 2
45385: NEG
45386: PUSH
45387: LD_INT 1
45389: NEG
45390: PUSH
45391: EMPTY
45392: LIST
45393: LIST
45394: PUSH
45395: LD_INT 2
45397: NEG
45398: PUSH
45399: LD_INT 2
45401: NEG
45402: PUSH
45403: EMPTY
45404: LIST
45405: LIST
45406: PUSH
45407: EMPTY
45408: LIST
45409: LIST
45410: LIST
45411: LIST
45412: LIST
45413: LIST
45414: LIST
45415: LIST
45416: LIST
45417: LIST
45418: LIST
45419: LIST
45420: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
45421: LD_ADDR_VAR 0 48
45425: PUSH
45426: LD_INT 0
45428: PUSH
45429: LD_INT 0
45431: PUSH
45432: EMPTY
45433: LIST
45434: LIST
45435: PUSH
45436: LD_INT 0
45438: PUSH
45439: LD_INT 1
45441: NEG
45442: PUSH
45443: EMPTY
45444: LIST
45445: LIST
45446: PUSH
45447: LD_INT 1
45449: PUSH
45450: LD_INT 0
45452: PUSH
45453: EMPTY
45454: LIST
45455: LIST
45456: PUSH
45457: LD_INT 1
45459: PUSH
45460: LD_INT 1
45462: PUSH
45463: EMPTY
45464: LIST
45465: LIST
45466: PUSH
45467: LD_INT 0
45469: PUSH
45470: LD_INT 1
45472: PUSH
45473: EMPTY
45474: LIST
45475: LIST
45476: PUSH
45477: LD_INT 1
45479: NEG
45480: PUSH
45481: LD_INT 0
45483: PUSH
45484: EMPTY
45485: LIST
45486: LIST
45487: PUSH
45488: LD_INT 1
45490: NEG
45491: PUSH
45492: LD_INT 1
45494: NEG
45495: PUSH
45496: EMPTY
45497: LIST
45498: LIST
45499: PUSH
45500: LD_INT 1
45502: NEG
45503: PUSH
45504: LD_INT 2
45506: NEG
45507: PUSH
45508: EMPTY
45509: LIST
45510: LIST
45511: PUSH
45512: LD_INT 0
45514: PUSH
45515: LD_INT 2
45517: NEG
45518: PUSH
45519: EMPTY
45520: LIST
45521: LIST
45522: PUSH
45523: LD_INT 1
45525: PUSH
45526: LD_INT 1
45528: NEG
45529: PUSH
45530: EMPTY
45531: LIST
45532: LIST
45533: PUSH
45534: LD_INT 2
45536: PUSH
45537: LD_INT 0
45539: PUSH
45540: EMPTY
45541: LIST
45542: LIST
45543: PUSH
45544: LD_INT 2
45546: PUSH
45547: LD_INT 1
45549: PUSH
45550: EMPTY
45551: LIST
45552: LIST
45553: PUSH
45554: EMPTY
45555: LIST
45556: LIST
45557: LIST
45558: LIST
45559: LIST
45560: LIST
45561: LIST
45562: LIST
45563: LIST
45564: LIST
45565: LIST
45566: LIST
45567: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
45568: LD_ADDR_VAR 0 49
45572: PUSH
45573: LD_INT 0
45575: PUSH
45576: LD_INT 0
45578: PUSH
45579: EMPTY
45580: LIST
45581: LIST
45582: PUSH
45583: LD_INT 0
45585: PUSH
45586: LD_INT 1
45588: NEG
45589: PUSH
45590: EMPTY
45591: LIST
45592: LIST
45593: PUSH
45594: LD_INT 1
45596: PUSH
45597: LD_INT 0
45599: PUSH
45600: EMPTY
45601: LIST
45602: LIST
45603: PUSH
45604: LD_INT 1
45606: PUSH
45607: LD_INT 1
45609: PUSH
45610: EMPTY
45611: LIST
45612: LIST
45613: PUSH
45614: LD_INT 0
45616: PUSH
45617: LD_INT 1
45619: PUSH
45620: EMPTY
45621: LIST
45622: LIST
45623: PUSH
45624: LD_INT 1
45626: NEG
45627: PUSH
45628: LD_INT 0
45630: PUSH
45631: EMPTY
45632: LIST
45633: LIST
45634: PUSH
45635: LD_INT 1
45637: NEG
45638: PUSH
45639: LD_INT 1
45641: NEG
45642: PUSH
45643: EMPTY
45644: LIST
45645: LIST
45646: PUSH
45647: LD_INT 1
45649: PUSH
45650: LD_INT 1
45652: NEG
45653: PUSH
45654: EMPTY
45655: LIST
45656: LIST
45657: PUSH
45658: LD_INT 2
45660: PUSH
45661: LD_INT 0
45663: PUSH
45664: EMPTY
45665: LIST
45666: LIST
45667: PUSH
45668: LD_INT 2
45670: PUSH
45671: LD_INT 1
45673: PUSH
45674: EMPTY
45675: LIST
45676: LIST
45677: PUSH
45678: LD_INT 2
45680: PUSH
45681: LD_INT 2
45683: PUSH
45684: EMPTY
45685: LIST
45686: LIST
45687: PUSH
45688: LD_INT 1
45690: PUSH
45691: LD_INT 2
45693: PUSH
45694: EMPTY
45695: LIST
45696: LIST
45697: PUSH
45698: EMPTY
45699: LIST
45700: LIST
45701: LIST
45702: LIST
45703: LIST
45704: LIST
45705: LIST
45706: LIST
45707: LIST
45708: LIST
45709: LIST
45710: LIST
45711: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
45712: LD_ADDR_VAR 0 50
45716: PUSH
45717: LD_INT 0
45719: PUSH
45720: LD_INT 0
45722: PUSH
45723: EMPTY
45724: LIST
45725: LIST
45726: PUSH
45727: LD_INT 0
45729: PUSH
45730: LD_INT 1
45732: NEG
45733: PUSH
45734: EMPTY
45735: LIST
45736: LIST
45737: PUSH
45738: LD_INT 1
45740: PUSH
45741: LD_INT 0
45743: PUSH
45744: EMPTY
45745: LIST
45746: LIST
45747: PUSH
45748: LD_INT 1
45750: PUSH
45751: LD_INT 1
45753: PUSH
45754: EMPTY
45755: LIST
45756: LIST
45757: PUSH
45758: LD_INT 0
45760: PUSH
45761: LD_INT 1
45763: PUSH
45764: EMPTY
45765: LIST
45766: LIST
45767: PUSH
45768: LD_INT 1
45770: NEG
45771: PUSH
45772: LD_INT 0
45774: PUSH
45775: EMPTY
45776: LIST
45777: LIST
45778: PUSH
45779: LD_INT 1
45781: NEG
45782: PUSH
45783: LD_INT 1
45785: NEG
45786: PUSH
45787: EMPTY
45788: LIST
45789: LIST
45790: PUSH
45791: LD_INT 2
45793: PUSH
45794: LD_INT 1
45796: PUSH
45797: EMPTY
45798: LIST
45799: LIST
45800: PUSH
45801: LD_INT 2
45803: PUSH
45804: LD_INT 2
45806: PUSH
45807: EMPTY
45808: LIST
45809: LIST
45810: PUSH
45811: LD_INT 1
45813: PUSH
45814: LD_INT 2
45816: PUSH
45817: EMPTY
45818: LIST
45819: LIST
45820: PUSH
45821: LD_INT 0
45823: PUSH
45824: LD_INT 2
45826: PUSH
45827: EMPTY
45828: LIST
45829: LIST
45830: PUSH
45831: LD_INT 1
45833: NEG
45834: PUSH
45835: LD_INT 1
45837: PUSH
45838: EMPTY
45839: LIST
45840: LIST
45841: PUSH
45842: EMPTY
45843: LIST
45844: LIST
45845: LIST
45846: LIST
45847: LIST
45848: LIST
45849: LIST
45850: LIST
45851: LIST
45852: LIST
45853: LIST
45854: LIST
45855: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
45856: LD_ADDR_VAR 0 51
45860: PUSH
45861: LD_INT 0
45863: PUSH
45864: LD_INT 0
45866: PUSH
45867: EMPTY
45868: LIST
45869: LIST
45870: PUSH
45871: LD_INT 0
45873: PUSH
45874: LD_INT 1
45876: NEG
45877: PUSH
45878: EMPTY
45879: LIST
45880: LIST
45881: PUSH
45882: LD_INT 1
45884: PUSH
45885: LD_INT 0
45887: PUSH
45888: EMPTY
45889: LIST
45890: LIST
45891: PUSH
45892: LD_INT 1
45894: PUSH
45895: LD_INT 1
45897: PUSH
45898: EMPTY
45899: LIST
45900: LIST
45901: PUSH
45902: LD_INT 0
45904: PUSH
45905: LD_INT 1
45907: PUSH
45908: EMPTY
45909: LIST
45910: LIST
45911: PUSH
45912: LD_INT 1
45914: NEG
45915: PUSH
45916: LD_INT 0
45918: PUSH
45919: EMPTY
45920: LIST
45921: LIST
45922: PUSH
45923: LD_INT 1
45925: NEG
45926: PUSH
45927: LD_INT 1
45929: NEG
45930: PUSH
45931: EMPTY
45932: LIST
45933: LIST
45934: PUSH
45935: LD_INT 1
45937: PUSH
45938: LD_INT 2
45940: PUSH
45941: EMPTY
45942: LIST
45943: LIST
45944: PUSH
45945: LD_INT 0
45947: PUSH
45948: LD_INT 2
45950: PUSH
45951: EMPTY
45952: LIST
45953: LIST
45954: PUSH
45955: LD_INT 1
45957: NEG
45958: PUSH
45959: LD_INT 1
45961: PUSH
45962: EMPTY
45963: LIST
45964: LIST
45965: PUSH
45966: LD_INT 2
45968: NEG
45969: PUSH
45970: LD_INT 0
45972: PUSH
45973: EMPTY
45974: LIST
45975: LIST
45976: PUSH
45977: LD_INT 2
45979: NEG
45980: PUSH
45981: LD_INT 1
45983: NEG
45984: PUSH
45985: EMPTY
45986: LIST
45987: LIST
45988: PUSH
45989: EMPTY
45990: LIST
45991: LIST
45992: LIST
45993: LIST
45994: LIST
45995: LIST
45996: LIST
45997: LIST
45998: LIST
45999: LIST
46000: LIST
46001: LIST
46002: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46003: LD_ADDR_VAR 0 52
46007: PUSH
46008: LD_INT 0
46010: PUSH
46011: LD_INT 0
46013: PUSH
46014: EMPTY
46015: LIST
46016: LIST
46017: PUSH
46018: LD_INT 0
46020: PUSH
46021: LD_INT 1
46023: NEG
46024: PUSH
46025: EMPTY
46026: LIST
46027: LIST
46028: PUSH
46029: LD_INT 1
46031: PUSH
46032: LD_INT 0
46034: PUSH
46035: EMPTY
46036: LIST
46037: LIST
46038: PUSH
46039: LD_INT 1
46041: PUSH
46042: LD_INT 1
46044: PUSH
46045: EMPTY
46046: LIST
46047: LIST
46048: PUSH
46049: LD_INT 0
46051: PUSH
46052: LD_INT 1
46054: PUSH
46055: EMPTY
46056: LIST
46057: LIST
46058: PUSH
46059: LD_INT 1
46061: NEG
46062: PUSH
46063: LD_INT 0
46065: PUSH
46066: EMPTY
46067: LIST
46068: LIST
46069: PUSH
46070: LD_INT 1
46072: NEG
46073: PUSH
46074: LD_INT 1
46076: NEG
46077: PUSH
46078: EMPTY
46079: LIST
46080: LIST
46081: PUSH
46082: LD_INT 1
46084: NEG
46085: PUSH
46086: LD_INT 2
46088: NEG
46089: PUSH
46090: EMPTY
46091: LIST
46092: LIST
46093: PUSH
46094: LD_INT 1
46096: NEG
46097: PUSH
46098: LD_INT 1
46100: PUSH
46101: EMPTY
46102: LIST
46103: LIST
46104: PUSH
46105: LD_INT 2
46107: NEG
46108: PUSH
46109: LD_INT 0
46111: PUSH
46112: EMPTY
46113: LIST
46114: LIST
46115: PUSH
46116: LD_INT 2
46118: NEG
46119: PUSH
46120: LD_INT 1
46122: NEG
46123: PUSH
46124: EMPTY
46125: LIST
46126: LIST
46127: PUSH
46128: LD_INT 2
46130: NEG
46131: PUSH
46132: LD_INT 2
46134: NEG
46135: PUSH
46136: EMPTY
46137: LIST
46138: LIST
46139: PUSH
46140: EMPTY
46141: LIST
46142: LIST
46143: LIST
46144: LIST
46145: LIST
46146: LIST
46147: LIST
46148: LIST
46149: LIST
46150: LIST
46151: LIST
46152: LIST
46153: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46154: LD_ADDR_VAR 0 53
46158: PUSH
46159: LD_INT 0
46161: PUSH
46162: LD_INT 0
46164: PUSH
46165: EMPTY
46166: LIST
46167: LIST
46168: PUSH
46169: LD_INT 0
46171: PUSH
46172: LD_INT 1
46174: NEG
46175: PUSH
46176: EMPTY
46177: LIST
46178: LIST
46179: PUSH
46180: LD_INT 1
46182: PUSH
46183: LD_INT 0
46185: PUSH
46186: EMPTY
46187: LIST
46188: LIST
46189: PUSH
46190: LD_INT 1
46192: PUSH
46193: LD_INT 1
46195: PUSH
46196: EMPTY
46197: LIST
46198: LIST
46199: PUSH
46200: LD_INT 0
46202: PUSH
46203: LD_INT 1
46205: PUSH
46206: EMPTY
46207: LIST
46208: LIST
46209: PUSH
46210: LD_INT 1
46212: NEG
46213: PUSH
46214: LD_INT 0
46216: PUSH
46217: EMPTY
46218: LIST
46219: LIST
46220: PUSH
46221: LD_INT 1
46223: NEG
46224: PUSH
46225: LD_INT 1
46227: NEG
46228: PUSH
46229: EMPTY
46230: LIST
46231: LIST
46232: PUSH
46233: LD_INT 1
46235: NEG
46236: PUSH
46237: LD_INT 2
46239: NEG
46240: PUSH
46241: EMPTY
46242: LIST
46243: LIST
46244: PUSH
46245: LD_INT 0
46247: PUSH
46248: LD_INT 2
46250: NEG
46251: PUSH
46252: EMPTY
46253: LIST
46254: LIST
46255: PUSH
46256: LD_INT 1
46258: PUSH
46259: LD_INT 1
46261: NEG
46262: PUSH
46263: EMPTY
46264: LIST
46265: LIST
46266: PUSH
46267: LD_INT 2
46269: PUSH
46270: LD_INT 0
46272: PUSH
46273: EMPTY
46274: LIST
46275: LIST
46276: PUSH
46277: LD_INT 2
46279: PUSH
46280: LD_INT 1
46282: PUSH
46283: EMPTY
46284: LIST
46285: LIST
46286: PUSH
46287: LD_INT 2
46289: PUSH
46290: LD_INT 2
46292: PUSH
46293: EMPTY
46294: LIST
46295: LIST
46296: PUSH
46297: LD_INT 1
46299: PUSH
46300: LD_INT 2
46302: PUSH
46303: EMPTY
46304: LIST
46305: LIST
46306: PUSH
46307: LD_INT 0
46309: PUSH
46310: LD_INT 2
46312: PUSH
46313: EMPTY
46314: LIST
46315: LIST
46316: PUSH
46317: LD_INT 1
46319: NEG
46320: PUSH
46321: LD_INT 1
46323: PUSH
46324: EMPTY
46325: LIST
46326: LIST
46327: PUSH
46328: LD_INT 2
46330: NEG
46331: PUSH
46332: LD_INT 0
46334: PUSH
46335: EMPTY
46336: LIST
46337: LIST
46338: PUSH
46339: LD_INT 2
46341: NEG
46342: PUSH
46343: LD_INT 1
46345: NEG
46346: PUSH
46347: EMPTY
46348: LIST
46349: LIST
46350: PUSH
46351: LD_INT 2
46353: NEG
46354: PUSH
46355: LD_INT 2
46357: NEG
46358: PUSH
46359: EMPTY
46360: LIST
46361: LIST
46362: PUSH
46363: EMPTY
46364: LIST
46365: LIST
46366: LIST
46367: LIST
46368: LIST
46369: LIST
46370: LIST
46371: LIST
46372: LIST
46373: LIST
46374: LIST
46375: LIST
46376: LIST
46377: LIST
46378: LIST
46379: LIST
46380: LIST
46381: LIST
46382: LIST
46383: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46384: LD_ADDR_VAR 0 54
46388: PUSH
46389: LD_INT 0
46391: PUSH
46392: LD_INT 0
46394: PUSH
46395: EMPTY
46396: LIST
46397: LIST
46398: PUSH
46399: LD_INT 0
46401: PUSH
46402: LD_INT 1
46404: NEG
46405: PUSH
46406: EMPTY
46407: LIST
46408: LIST
46409: PUSH
46410: LD_INT 1
46412: PUSH
46413: LD_INT 0
46415: PUSH
46416: EMPTY
46417: LIST
46418: LIST
46419: PUSH
46420: LD_INT 1
46422: PUSH
46423: LD_INT 1
46425: PUSH
46426: EMPTY
46427: LIST
46428: LIST
46429: PUSH
46430: LD_INT 0
46432: PUSH
46433: LD_INT 1
46435: PUSH
46436: EMPTY
46437: LIST
46438: LIST
46439: PUSH
46440: LD_INT 1
46442: NEG
46443: PUSH
46444: LD_INT 0
46446: PUSH
46447: EMPTY
46448: LIST
46449: LIST
46450: PUSH
46451: LD_INT 1
46453: NEG
46454: PUSH
46455: LD_INT 1
46457: NEG
46458: PUSH
46459: EMPTY
46460: LIST
46461: LIST
46462: PUSH
46463: LD_INT 1
46465: NEG
46466: PUSH
46467: LD_INT 2
46469: NEG
46470: PUSH
46471: EMPTY
46472: LIST
46473: LIST
46474: PUSH
46475: LD_INT 0
46477: PUSH
46478: LD_INT 2
46480: NEG
46481: PUSH
46482: EMPTY
46483: LIST
46484: LIST
46485: PUSH
46486: LD_INT 1
46488: PUSH
46489: LD_INT 1
46491: NEG
46492: PUSH
46493: EMPTY
46494: LIST
46495: LIST
46496: PUSH
46497: LD_INT 2
46499: PUSH
46500: LD_INT 0
46502: PUSH
46503: EMPTY
46504: LIST
46505: LIST
46506: PUSH
46507: LD_INT 2
46509: PUSH
46510: LD_INT 1
46512: PUSH
46513: EMPTY
46514: LIST
46515: LIST
46516: PUSH
46517: LD_INT 2
46519: PUSH
46520: LD_INT 2
46522: PUSH
46523: EMPTY
46524: LIST
46525: LIST
46526: PUSH
46527: LD_INT 1
46529: PUSH
46530: LD_INT 2
46532: PUSH
46533: EMPTY
46534: LIST
46535: LIST
46536: PUSH
46537: LD_INT 0
46539: PUSH
46540: LD_INT 2
46542: PUSH
46543: EMPTY
46544: LIST
46545: LIST
46546: PUSH
46547: LD_INT 1
46549: NEG
46550: PUSH
46551: LD_INT 1
46553: PUSH
46554: EMPTY
46555: LIST
46556: LIST
46557: PUSH
46558: LD_INT 2
46560: NEG
46561: PUSH
46562: LD_INT 0
46564: PUSH
46565: EMPTY
46566: LIST
46567: LIST
46568: PUSH
46569: LD_INT 2
46571: NEG
46572: PUSH
46573: LD_INT 1
46575: NEG
46576: PUSH
46577: EMPTY
46578: LIST
46579: LIST
46580: PUSH
46581: LD_INT 2
46583: NEG
46584: PUSH
46585: LD_INT 2
46587: NEG
46588: PUSH
46589: EMPTY
46590: LIST
46591: LIST
46592: PUSH
46593: EMPTY
46594: LIST
46595: LIST
46596: LIST
46597: LIST
46598: LIST
46599: LIST
46600: LIST
46601: LIST
46602: LIST
46603: LIST
46604: LIST
46605: LIST
46606: LIST
46607: LIST
46608: LIST
46609: LIST
46610: LIST
46611: LIST
46612: LIST
46613: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46614: LD_ADDR_VAR 0 55
46618: PUSH
46619: LD_INT 0
46621: PUSH
46622: LD_INT 0
46624: PUSH
46625: EMPTY
46626: LIST
46627: LIST
46628: PUSH
46629: LD_INT 0
46631: PUSH
46632: LD_INT 1
46634: NEG
46635: PUSH
46636: EMPTY
46637: LIST
46638: LIST
46639: PUSH
46640: LD_INT 1
46642: PUSH
46643: LD_INT 0
46645: PUSH
46646: EMPTY
46647: LIST
46648: LIST
46649: PUSH
46650: LD_INT 1
46652: PUSH
46653: LD_INT 1
46655: PUSH
46656: EMPTY
46657: LIST
46658: LIST
46659: PUSH
46660: LD_INT 0
46662: PUSH
46663: LD_INT 1
46665: PUSH
46666: EMPTY
46667: LIST
46668: LIST
46669: PUSH
46670: LD_INT 1
46672: NEG
46673: PUSH
46674: LD_INT 0
46676: PUSH
46677: EMPTY
46678: LIST
46679: LIST
46680: PUSH
46681: LD_INT 1
46683: NEG
46684: PUSH
46685: LD_INT 1
46687: NEG
46688: PUSH
46689: EMPTY
46690: LIST
46691: LIST
46692: PUSH
46693: LD_INT 1
46695: NEG
46696: PUSH
46697: LD_INT 2
46699: NEG
46700: PUSH
46701: EMPTY
46702: LIST
46703: LIST
46704: PUSH
46705: LD_INT 0
46707: PUSH
46708: LD_INT 2
46710: NEG
46711: PUSH
46712: EMPTY
46713: LIST
46714: LIST
46715: PUSH
46716: LD_INT 1
46718: PUSH
46719: LD_INT 1
46721: NEG
46722: PUSH
46723: EMPTY
46724: LIST
46725: LIST
46726: PUSH
46727: LD_INT 2
46729: PUSH
46730: LD_INT 0
46732: PUSH
46733: EMPTY
46734: LIST
46735: LIST
46736: PUSH
46737: LD_INT 2
46739: PUSH
46740: LD_INT 1
46742: PUSH
46743: EMPTY
46744: LIST
46745: LIST
46746: PUSH
46747: LD_INT 2
46749: PUSH
46750: LD_INT 2
46752: PUSH
46753: EMPTY
46754: LIST
46755: LIST
46756: PUSH
46757: LD_INT 1
46759: PUSH
46760: LD_INT 2
46762: PUSH
46763: EMPTY
46764: LIST
46765: LIST
46766: PUSH
46767: LD_INT 0
46769: PUSH
46770: LD_INT 2
46772: PUSH
46773: EMPTY
46774: LIST
46775: LIST
46776: PUSH
46777: LD_INT 1
46779: NEG
46780: PUSH
46781: LD_INT 1
46783: PUSH
46784: EMPTY
46785: LIST
46786: LIST
46787: PUSH
46788: LD_INT 2
46790: NEG
46791: PUSH
46792: LD_INT 0
46794: PUSH
46795: EMPTY
46796: LIST
46797: LIST
46798: PUSH
46799: LD_INT 2
46801: NEG
46802: PUSH
46803: LD_INT 1
46805: NEG
46806: PUSH
46807: EMPTY
46808: LIST
46809: LIST
46810: PUSH
46811: LD_INT 2
46813: NEG
46814: PUSH
46815: LD_INT 2
46817: NEG
46818: PUSH
46819: EMPTY
46820: LIST
46821: LIST
46822: PUSH
46823: EMPTY
46824: LIST
46825: LIST
46826: LIST
46827: LIST
46828: LIST
46829: LIST
46830: LIST
46831: LIST
46832: LIST
46833: LIST
46834: LIST
46835: LIST
46836: LIST
46837: LIST
46838: LIST
46839: LIST
46840: LIST
46841: LIST
46842: LIST
46843: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46844: LD_ADDR_VAR 0 56
46848: PUSH
46849: LD_INT 0
46851: PUSH
46852: LD_INT 0
46854: PUSH
46855: EMPTY
46856: LIST
46857: LIST
46858: PUSH
46859: LD_INT 0
46861: PUSH
46862: LD_INT 1
46864: NEG
46865: PUSH
46866: EMPTY
46867: LIST
46868: LIST
46869: PUSH
46870: LD_INT 1
46872: PUSH
46873: LD_INT 0
46875: PUSH
46876: EMPTY
46877: LIST
46878: LIST
46879: PUSH
46880: LD_INT 1
46882: PUSH
46883: LD_INT 1
46885: PUSH
46886: EMPTY
46887: LIST
46888: LIST
46889: PUSH
46890: LD_INT 0
46892: PUSH
46893: LD_INT 1
46895: PUSH
46896: EMPTY
46897: LIST
46898: LIST
46899: PUSH
46900: LD_INT 1
46902: NEG
46903: PUSH
46904: LD_INT 0
46906: PUSH
46907: EMPTY
46908: LIST
46909: LIST
46910: PUSH
46911: LD_INT 1
46913: NEG
46914: PUSH
46915: LD_INT 1
46917: NEG
46918: PUSH
46919: EMPTY
46920: LIST
46921: LIST
46922: PUSH
46923: LD_INT 1
46925: NEG
46926: PUSH
46927: LD_INT 2
46929: NEG
46930: PUSH
46931: EMPTY
46932: LIST
46933: LIST
46934: PUSH
46935: LD_INT 0
46937: PUSH
46938: LD_INT 2
46940: NEG
46941: PUSH
46942: EMPTY
46943: LIST
46944: LIST
46945: PUSH
46946: LD_INT 1
46948: PUSH
46949: LD_INT 1
46951: NEG
46952: PUSH
46953: EMPTY
46954: LIST
46955: LIST
46956: PUSH
46957: LD_INT 2
46959: PUSH
46960: LD_INT 0
46962: PUSH
46963: EMPTY
46964: LIST
46965: LIST
46966: PUSH
46967: LD_INT 2
46969: PUSH
46970: LD_INT 1
46972: PUSH
46973: EMPTY
46974: LIST
46975: LIST
46976: PUSH
46977: LD_INT 2
46979: PUSH
46980: LD_INT 2
46982: PUSH
46983: EMPTY
46984: LIST
46985: LIST
46986: PUSH
46987: LD_INT 1
46989: PUSH
46990: LD_INT 2
46992: PUSH
46993: EMPTY
46994: LIST
46995: LIST
46996: PUSH
46997: LD_INT 0
46999: PUSH
47000: LD_INT 2
47002: PUSH
47003: EMPTY
47004: LIST
47005: LIST
47006: PUSH
47007: LD_INT 1
47009: NEG
47010: PUSH
47011: LD_INT 1
47013: PUSH
47014: EMPTY
47015: LIST
47016: LIST
47017: PUSH
47018: LD_INT 2
47020: NEG
47021: PUSH
47022: LD_INT 0
47024: PUSH
47025: EMPTY
47026: LIST
47027: LIST
47028: PUSH
47029: LD_INT 2
47031: NEG
47032: PUSH
47033: LD_INT 1
47035: NEG
47036: PUSH
47037: EMPTY
47038: LIST
47039: LIST
47040: PUSH
47041: LD_INT 2
47043: NEG
47044: PUSH
47045: LD_INT 2
47047: NEG
47048: PUSH
47049: EMPTY
47050: LIST
47051: LIST
47052: PUSH
47053: EMPTY
47054: LIST
47055: LIST
47056: LIST
47057: LIST
47058: LIST
47059: LIST
47060: LIST
47061: LIST
47062: LIST
47063: LIST
47064: LIST
47065: LIST
47066: LIST
47067: LIST
47068: LIST
47069: LIST
47070: LIST
47071: LIST
47072: LIST
47073: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47074: LD_ADDR_VAR 0 57
47078: PUSH
47079: LD_INT 0
47081: PUSH
47082: LD_INT 0
47084: PUSH
47085: EMPTY
47086: LIST
47087: LIST
47088: PUSH
47089: LD_INT 0
47091: PUSH
47092: LD_INT 1
47094: NEG
47095: PUSH
47096: EMPTY
47097: LIST
47098: LIST
47099: PUSH
47100: LD_INT 1
47102: PUSH
47103: LD_INT 0
47105: PUSH
47106: EMPTY
47107: LIST
47108: LIST
47109: PUSH
47110: LD_INT 1
47112: PUSH
47113: LD_INT 1
47115: PUSH
47116: EMPTY
47117: LIST
47118: LIST
47119: PUSH
47120: LD_INT 0
47122: PUSH
47123: LD_INT 1
47125: PUSH
47126: EMPTY
47127: LIST
47128: LIST
47129: PUSH
47130: LD_INT 1
47132: NEG
47133: PUSH
47134: LD_INT 0
47136: PUSH
47137: EMPTY
47138: LIST
47139: LIST
47140: PUSH
47141: LD_INT 1
47143: NEG
47144: PUSH
47145: LD_INT 1
47147: NEG
47148: PUSH
47149: EMPTY
47150: LIST
47151: LIST
47152: PUSH
47153: LD_INT 1
47155: NEG
47156: PUSH
47157: LD_INT 2
47159: NEG
47160: PUSH
47161: EMPTY
47162: LIST
47163: LIST
47164: PUSH
47165: LD_INT 0
47167: PUSH
47168: LD_INT 2
47170: NEG
47171: PUSH
47172: EMPTY
47173: LIST
47174: LIST
47175: PUSH
47176: LD_INT 1
47178: PUSH
47179: LD_INT 1
47181: NEG
47182: PUSH
47183: EMPTY
47184: LIST
47185: LIST
47186: PUSH
47187: LD_INT 2
47189: PUSH
47190: LD_INT 0
47192: PUSH
47193: EMPTY
47194: LIST
47195: LIST
47196: PUSH
47197: LD_INT 2
47199: PUSH
47200: LD_INT 1
47202: PUSH
47203: EMPTY
47204: LIST
47205: LIST
47206: PUSH
47207: LD_INT 2
47209: PUSH
47210: LD_INT 2
47212: PUSH
47213: EMPTY
47214: LIST
47215: LIST
47216: PUSH
47217: LD_INT 1
47219: PUSH
47220: LD_INT 2
47222: PUSH
47223: EMPTY
47224: LIST
47225: LIST
47226: PUSH
47227: LD_INT 0
47229: PUSH
47230: LD_INT 2
47232: PUSH
47233: EMPTY
47234: LIST
47235: LIST
47236: PUSH
47237: LD_INT 1
47239: NEG
47240: PUSH
47241: LD_INT 1
47243: PUSH
47244: EMPTY
47245: LIST
47246: LIST
47247: PUSH
47248: LD_INT 2
47250: NEG
47251: PUSH
47252: LD_INT 0
47254: PUSH
47255: EMPTY
47256: LIST
47257: LIST
47258: PUSH
47259: LD_INT 2
47261: NEG
47262: PUSH
47263: LD_INT 1
47265: NEG
47266: PUSH
47267: EMPTY
47268: LIST
47269: LIST
47270: PUSH
47271: LD_INT 2
47273: NEG
47274: PUSH
47275: LD_INT 2
47277: NEG
47278: PUSH
47279: EMPTY
47280: LIST
47281: LIST
47282: PUSH
47283: EMPTY
47284: LIST
47285: LIST
47286: LIST
47287: LIST
47288: LIST
47289: LIST
47290: LIST
47291: LIST
47292: LIST
47293: LIST
47294: LIST
47295: LIST
47296: LIST
47297: LIST
47298: LIST
47299: LIST
47300: LIST
47301: LIST
47302: LIST
47303: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47304: LD_ADDR_VAR 0 58
47308: PUSH
47309: LD_INT 0
47311: PUSH
47312: LD_INT 0
47314: PUSH
47315: EMPTY
47316: LIST
47317: LIST
47318: PUSH
47319: LD_INT 0
47321: PUSH
47322: LD_INT 1
47324: NEG
47325: PUSH
47326: EMPTY
47327: LIST
47328: LIST
47329: PUSH
47330: LD_INT 1
47332: PUSH
47333: LD_INT 0
47335: PUSH
47336: EMPTY
47337: LIST
47338: LIST
47339: PUSH
47340: LD_INT 1
47342: PUSH
47343: LD_INT 1
47345: PUSH
47346: EMPTY
47347: LIST
47348: LIST
47349: PUSH
47350: LD_INT 0
47352: PUSH
47353: LD_INT 1
47355: PUSH
47356: EMPTY
47357: LIST
47358: LIST
47359: PUSH
47360: LD_INT 1
47362: NEG
47363: PUSH
47364: LD_INT 0
47366: PUSH
47367: EMPTY
47368: LIST
47369: LIST
47370: PUSH
47371: LD_INT 1
47373: NEG
47374: PUSH
47375: LD_INT 1
47377: NEG
47378: PUSH
47379: EMPTY
47380: LIST
47381: LIST
47382: PUSH
47383: LD_INT 1
47385: NEG
47386: PUSH
47387: LD_INT 2
47389: NEG
47390: PUSH
47391: EMPTY
47392: LIST
47393: LIST
47394: PUSH
47395: LD_INT 0
47397: PUSH
47398: LD_INT 2
47400: NEG
47401: PUSH
47402: EMPTY
47403: LIST
47404: LIST
47405: PUSH
47406: LD_INT 1
47408: PUSH
47409: LD_INT 1
47411: NEG
47412: PUSH
47413: EMPTY
47414: LIST
47415: LIST
47416: PUSH
47417: LD_INT 2
47419: PUSH
47420: LD_INT 0
47422: PUSH
47423: EMPTY
47424: LIST
47425: LIST
47426: PUSH
47427: LD_INT 2
47429: PUSH
47430: LD_INT 1
47432: PUSH
47433: EMPTY
47434: LIST
47435: LIST
47436: PUSH
47437: LD_INT 2
47439: PUSH
47440: LD_INT 2
47442: PUSH
47443: EMPTY
47444: LIST
47445: LIST
47446: PUSH
47447: LD_INT 1
47449: PUSH
47450: LD_INT 2
47452: PUSH
47453: EMPTY
47454: LIST
47455: LIST
47456: PUSH
47457: LD_INT 0
47459: PUSH
47460: LD_INT 2
47462: PUSH
47463: EMPTY
47464: LIST
47465: LIST
47466: PUSH
47467: LD_INT 1
47469: NEG
47470: PUSH
47471: LD_INT 1
47473: PUSH
47474: EMPTY
47475: LIST
47476: LIST
47477: PUSH
47478: LD_INT 2
47480: NEG
47481: PUSH
47482: LD_INT 0
47484: PUSH
47485: EMPTY
47486: LIST
47487: LIST
47488: PUSH
47489: LD_INT 2
47491: NEG
47492: PUSH
47493: LD_INT 1
47495: NEG
47496: PUSH
47497: EMPTY
47498: LIST
47499: LIST
47500: PUSH
47501: LD_INT 2
47503: NEG
47504: PUSH
47505: LD_INT 2
47507: NEG
47508: PUSH
47509: EMPTY
47510: LIST
47511: LIST
47512: PUSH
47513: EMPTY
47514: LIST
47515: LIST
47516: LIST
47517: LIST
47518: LIST
47519: LIST
47520: LIST
47521: LIST
47522: LIST
47523: LIST
47524: LIST
47525: LIST
47526: LIST
47527: LIST
47528: LIST
47529: LIST
47530: LIST
47531: LIST
47532: LIST
47533: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
47534: LD_ADDR_VAR 0 59
47538: PUSH
47539: LD_INT 0
47541: PUSH
47542: LD_INT 0
47544: PUSH
47545: EMPTY
47546: LIST
47547: LIST
47548: PUSH
47549: LD_INT 0
47551: PUSH
47552: LD_INT 1
47554: NEG
47555: PUSH
47556: EMPTY
47557: LIST
47558: LIST
47559: PUSH
47560: LD_INT 1
47562: PUSH
47563: LD_INT 0
47565: PUSH
47566: EMPTY
47567: LIST
47568: LIST
47569: PUSH
47570: LD_INT 1
47572: PUSH
47573: LD_INT 1
47575: PUSH
47576: EMPTY
47577: LIST
47578: LIST
47579: PUSH
47580: LD_INT 0
47582: PUSH
47583: LD_INT 1
47585: PUSH
47586: EMPTY
47587: LIST
47588: LIST
47589: PUSH
47590: LD_INT 1
47592: NEG
47593: PUSH
47594: LD_INT 0
47596: PUSH
47597: EMPTY
47598: LIST
47599: LIST
47600: PUSH
47601: LD_INT 1
47603: NEG
47604: PUSH
47605: LD_INT 1
47607: NEG
47608: PUSH
47609: EMPTY
47610: LIST
47611: LIST
47612: PUSH
47613: EMPTY
47614: LIST
47615: LIST
47616: LIST
47617: LIST
47618: LIST
47619: LIST
47620: LIST
47621: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
47622: LD_ADDR_VAR 0 60
47626: PUSH
47627: LD_INT 0
47629: PUSH
47630: LD_INT 0
47632: PUSH
47633: EMPTY
47634: LIST
47635: LIST
47636: PUSH
47637: LD_INT 0
47639: PUSH
47640: LD_INT 1
47642: NEG
47643: PUSH
47644: EMPTY
47645: LIST
47646: LIST
47647: PUSH
47648: LD_INT 1
47650: PUSH
47651: LD_INT 0
47653: PUSH
47654: EMPTY
47655: LIST
47656: LIST
47657: PUSH
47658: LD_INT 1
47660: PUSH
47661: LD_INT 1
47663: PUSH
47664: EMPTY
47665: LIST
47666: LIST
47667: PUSH
47668: LD_INT 0
47670: PUSH
47671: LD_INT 1
47673: PUSH
47674: EMPTY
47675: LIST
47676: LIST
47677: PUSH
47678: LD_INT 1
47680: NEG
47681: PUSH
47682: LD_INT 0
47684: PUSH
47685: EMPTY
47686: LIST
47687: LIST
47688: PUSH
47689: LD_INT 1
47691: NEG
47692: PUSH
47693: LD_INT 1
47695: NEG
47696: PUSH
47697: EMPTY
47698: LIST
47699: LIST
47700: PUSH
47701: EMPTY
47702: LIST
47703: LIST
47704: LIST
47705: LIST
47706: LIST
47707: LIST
47708: LIST
47709: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
47710: LD_ADDR_VAR 0 61
47714: PUSH
47715: LD_INT 0
47717: PUSH
47718: LD_INT 0
47720: PUSH
47721: EMPTY
47722: LIST
47723: LIST
47724: PUSH
47725: LD_INT 0
47727: PUSH
47728: LD_INT 1
47730: NEG
47731: PUSH
47732: EMPTY
47733: LIST
47734: LIST
47735: PUSH
47736: LD_INT 1
47738: PUSH
47739: LD_INT 0
47741: PUSH
47742: EMPTY
47743: LIST
47744: LIST
47745: PUSH
47746: LD_INT 1
47748: PUSH
47749: LD_INT 1
47751: PUSH
47752: EMPTY
47753: LIST
47754: LIST
47755: PUSH
47756: LD_INT 0
47758: PUSH
47759: LD_INT 1
47761: PUSH
47762: EMPTY
47763: LIST
47764: LIST
47765: PUSH
47766: LD_INT 1
47768: NEG
47769: PUSH
47770: LD_INT 0
47772: PUSH
47773: EMPTY
47774: LIST
47775: LIST
47776: PUSH
47777: LD_INT 1
47779: NEG
47780: PUSH
47781: LD_INT 1
47783: NEG
47784: PUSH
47785: EMPTY
47786: LIST
47787: LIST
47788: PUSH
47789: EMPTY
47790: LIST
47791: LIST
47792: LIST
47793: LIST
47794: LIST
47795: LIST
47796: LIST
47797: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
47798: LD_ADDR_VAR 0 62
47802: PUSH
47803: LD_INT 0
47805: PUSH
47806: LD_INT 0
47808: PUSH
47809: EMPTY
47810: LIST
47811: LIST
47812: PUSH
47813: LD_INT 0
47815: PUSH
47816: LD_INT 1
47818: NEG
47819: PUSH
47820: EMPTY
47821: LIST
47822: LIST
47823: PUSH
47824: LD_INT 1
47826: PUSH
47827: LD_INT 0
47829: PUSH
47830: EMPTY
47831: LIST
47832: LIST
47833: PUSH
47834: LD_INT 1
47836: PUSH
47837: LD_INT 1
47839: PUSH
47840: EMPTY
47841: LIST
47842: LIST
47843: PUSH
47844: LD_INT 0
47846: PUSH
47847: LD_INT 1
47849: PUSH
47850: EMPTY
47851: LIST
47852: LIST
47853: PUSH
47854: LD_INT 1
47856: NEG
47857: PUSH
47858: LD_INT 0
47860: PUSH
47861: EMPTY
47862: LIST
47863: LIST
47864: PUSH
47865: LD_INT 1
47867: NEG
47868: PUSH
47869: LD_INT 1
47871: NEG
47872: PUSH
47873: EMPTY
47874: LIST
47875: LIST
47876: PUSH
47877: EMPTY
47878: LIST
47879: LIST
47880: LIST
47881: LIST
47882: LIST
47883: LIST
47884: LIST
47885: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
47886: LD_ADDR_VAR 0 63
47890: PUSH
47891: LD_INT 0
47893: PUSH
47894: LD_INT 0
47896: PUSH
47897: EMPTY
47898: LIST
47899: LIST
47900: PUSH
47901: LD_INT 0
47903: PUSH
47904: LD_INT 1
47906: NEG
47907: PUSH
47908: EMPTY
47909: LIST
47910: LIST
47911: PUSH
47912: LD_INT 1
47914: PUSH
47915: LD_INT 0
47917: PUSH
47918: EMPTY
47919: LIST
47920: LIST
47921: PUSH
47922: LD_INT 1
47924: PUSH
47925: LD_INT 1
47927: PUSH
47928: EMPTY
47929: LIST
47930: LIST
47931: PUSH
47932: LD_INT 0
47934: PUSH
47935: LD_INT 1
47937: PUSH
47938: EMPTY
47939: LIST
47940: LIST
47941: PUSH
47942: LD_INT 1
47944: NEG
47945: PUSH
47946: LD_INT 0
47948: PUSH
47949: EMPTY
47950: LIST
47951: LIST
47952: PUSH
47953: LD_INT 1
47955: NEG
47956: PUSH
47957: LD_INT 1
47959: NEG
47960: PUSH
47961: EMPTY
47962: LIST
47963: LIST
47964: PUSH
47965: EMPTY
47966: LIST
47967: LIST
47968: LIST
47969: LIST
47970: LIST
47971: LIST
47972: LIST
47973: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
47974: LD_ADDR_VAR 0 64
47978: PUSH
47979: LD_INT 0
47981: PUSH
47982: LD_INT 0
47984: PUSH
47985: EMPTY
47986: LIST
47987: LIST
47988: PUSH
47989: LD_INT 0
47991: PUSH
47992: LD_INT 1
47994: NEG
47995: PUSH
47996: EMPTY
47997: LIST
47998: LIST
47999: PUSH
48000: LD_INT 1
48002: PUSH
48003: LD_INT 0
48005: PUSH
48006: EMPTY
48007: LIST
48008: LIST
48009: PUSH
48010: LD_INT 1
48012: PUSH
48013: LD_INT 1
48015: PUSH
48016: EMPTY
48017: LIST
48018: LIST
48019: PUSH
48020: LD_INT 0
48022: PUSH
48023: LD_INT 1
48025: PUSH
48026: EMPTY
48027: LIST
48028: LIST
48029: PUSH
48030: LD_INT 1
48032: NEG
48033: PUSH
48034: LD_INT 0
48036: PUSH
48037: EMPTY
48038: LIST
48039: LIST
48040: PUSH
48041: LD_INT 1
48043: NEG
48044: PUSH
48045: LD_INT 1
48047: NEG
48048: PUSH
48049: EMPTY
48050: LIST
48051: LIST
48052: PUSH
48053: EMPTY
48054: LIST
48055: LIST
48056: LIST
48057: LIST
48058: LIST
48059: LIST
48060: LIST
48061: ST_TO_ADDR
// end ; 1 :
48062: GO 53959
48064: LD_INT 1
48066: DOUBLE
48067: EQUAL
48068: IFTRUE 48072
48070: GO 50695
48072: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
48073: LD_ADDR_VAR 0 11
48077: PUSH
48078: LD_INT 1
48080: NEG
48081: PUSH
48082: LD_INT 3
48084: NEG
48085: PUSH
48086: EMPTY
48087: LIST
48088: LIST
48089: PUSH
48090: LD_INT 0
48092: PUSH
48093: LD_INT 3
48095: NEG
48096: PUSH
48097: EMPTY
48098: LIST
48099: LIST
48100: PUSH
48101: LD_INT 1
48103: PUSH
48104: LD_INT 2
48106: NEG
48107: PUSH
48108: EMPTY
48109: LIST
48110: LIST
48111: PUSH
48112: EMPTY
48113: LIST
48114: LIST
48115: LIST
48116: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
48117: LD_ADDR_VAR 0 12
48121: PUSH
48122: LD_INT 2
48124: PUSH
48125: LD_INT 1
48127: NEG
48128: PUSH
48129: EMPTY
48130: LIST
48131: LIST
48132: PUSH
48133: LD_INT 3
48135: PUSH
48136: LD_INT 0
48138: PUSH
48139: EMPTY
48140: LIST
48141: LIST
48142: PUSH
48143: LD_INT 3
48145: PUSH
48146: LD_INT 1
48148: PUSH
48149: EMPTY
48150: LIST
48151: LIST
48152: PUSH
48153: EMPTY
48154: LIST
48155: LIST
48156: LIST
48157: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
48158: LD_ADDR_VAR 0 13
48162: PUSH
48163: LD_INT 3
48165: PUSH
48166: LD_INT 2
48168: PUSH
48169: EMPTY
48170: LIST
48171: LIST
48172: PUSH
48173: LD_INT 3
48175: PUSH
48176: LD_INT 3
48178: PUSH
48179: EMPTY
48180: LIST
48181: LIST
48182: PUSH
48183: LD_INT 2
48185: PUSH
48186: LD_INT 3
48188: PUSH
48189: EMPTY
48190: LIST
48191: LIST
48192: PUSH
48193: EMPTY
48194: LIST
48195: LIST
48196: LIST
48197: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
48198: LD_ADDR_VAR 0 14
48202: PUSH
48203: LD_INT 1
48205: PUSH
48206: LD_INT 3
48208: PUSH
48209: EMPTY
48210: LIST
48211: LIST
48212: PUSH
48213: LD_INT 0
48215: PUSH
48216: LD_INT 3
48218: PUSH
48219: EMPTY
48220: LIST
48221: LIST
48222: PUSH
48223: LD_INT 1
48225: NEG
48226: PUSH
48227: LD_INT 2
48229: PUSH
48230: EMPTY
48231: LIST
48232: LIST
48233: PUSH
48234: EMPTY
48235: LIST
48236: LIST
48237: LIST
48238: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
48239: LD_ADDR_VAR 0 15
48243: PUSH
48244: LD_INT 2
48246: NEG
48247: PUSH
48248: LD_INT 1
48250: PUSH
48251: EMPTY
48252: LIST
48253: LIST
48254: PUSH
48255: LD_INT 3
48257: NEG
48258: PUSH
48259: LD_INT 0
48261: PUSH
48262: EMPTY
48263: LIST
48264: LIST
48265: PUSH
48266: LD_INT 3
48268: NEG
48269: PUSH
48270: LD_INT 1
48272: NEG
48273: PUSH
48274: EMPTY
48275: LIST
48276: LIST
48277: PUSH
48278: EMPTY
48279: LIST
48280: LIST
48281: LIST
48282: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48283: LD_ADDR_VAR 0 16
48287: PUSH
48288: LD_INT 2
48290: NEG
48291: PUSH
48292: LD_INT 3
48294: NEG
48295: PUSH
48296: EMPTY
48297: LIST
48298: LIST
48299: PUSH
48300: LD_INT 3
48302: NEG
48303: PUSH
48304: LD_INT 2
48306: NEG
48307: PUSH
48308: EMPTY
48309: LIST
48310: LIST
48311: PUSH
48312: LD_INT 3
48314: NEG
48315: PUSH
48316: LD_INT 3
48318: NEG
48319: PUSH
48320: EMPTY
48321: LIST
48322: LIST
48323: PUSH
48324: EMPTY
48325: LIST
48326: LIST
48327: LIST
48328: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
48329: LD_ADDR_VAR 0 17
48333: PUSH
48334: LD_INT 1
48336: NEG
48337: PUSH
48338: LD_INT 3
48340: NEG
48341: PUSH
48342: EMPTY
48343: LIST
48344: LIST
48345: PUSH
48346: LD_INT 0
48348: PUSH
48349: LD_INT 3
48351: NEG
48352: PUSH
48353: EMPTY
48354: LIST
48355: LIST
48356: PUSH
48357: LD_INT 1
48359: PUSH
48360: LD_INT 2
48362: NEG
48363: PUSH
48364: EMPTY
48365: LIST
48366: LIST
48367: PUSH
48368: EMPTY
48369: LIST
48370: LIST
48371: LIST
48372: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
48373: LD_ADDR_VAR 0 18
48377: PUSH
48378: LD_INT 2
48380: PUSH
48381: LD_INT 1
48383: NEG
48384: PUSH
48385: EMPTY
48386: LIST
48387: LIST
48388: PUSH
48389: LD_INT 3
48391: PUSH
48392: LD_INT 0
48394: PUSH
48395: EMPTY
48396: LIST
48397: LIST
48398: PUSH
48399: LD_INT 3
48401: PUSH
48402: LD_INT 1
48404: PUSH
48405: EMPTY
48406: LIST
48407: LIST
48408: PUSH
48409: EMPTY
48410: LIST
48411: LIST
48412: LIST
48413: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
48414: LD_ADDR_VAR 0 19
48418: PUSH
48419: LD_INT 3
48421: PUSH
48422: LD_INT 2
48424: PUSH
48425: EMPTY
48426: LIST
48427: LIST
48428: PUSH
48429: LD_INT 3
48431: PUSH
48432: LD_INT 3
48434: PUSH
48435: EMPTY
48436: LIST
48437: LIST
48438: PUSH
48439: LD_INT 2
48441: PUSH
48442: LD_INT 3
48444: PUSH
48445: EMPTY
48446: LIST
48447: LIST
48448: PUSH
48449: EMPTY
48450: LIST
48451: LIST
48452: LIST
48453: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
48454: LD_ADDR_VAR 0 20
48458: PUSH
48459: LD_INT 1
48461: PUSH
48462: LD_INT 3
48464: PUSH
48465: EMPTY
48466: LIST
48467: LIST
48468: PUSH
48469: LD_INT 0
48471: PUSH
48472: LD_INT 3
48474: PUSH
48475: EMPTY
48476: LIST
48477: LIST
48478: PUSH
48479: LD_INT 1
48481: NEG
48482: PUSH
48483: LD_INT 2
48485: PUSH
48486: EMPTY
48487: LIST
48488: LIST
48489: PUSH
48490: EMPTY
48491: LIST
48492: LIST
48493: LIST
48494: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
48495: LD_ADDR_VAR 0 21
48499: PUSH
48500: LD_INT 2
48502: NEG
48503: PUSH
48504: LD_INT 1
48506: PUSH
48507: EMPTY
48508: LIST
48509: LIST
48510: PUSH
48511: LD_INT 3
48513: NEG
48514: PUSH
48515: LD_INT 0
48517: PUSH
48518: EMPTY
48519: LIST
48520: LIST
48521: PUSH
48522: LD_INT 3
48524: NEG
48525: PUSH
48526: LD_INT 1
48528: NEG
48529: PUSH
48530: EMPTY
48531: LIST
48532: LIST
48533: PUSH
48534: EMPTY
48535: LIST
48536: LIST
48537: LIST
48538: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48539: LD_ADDR_VAR 0 22
48543: PUSH
48544: LD_INT 2
48546: NEG
48547: PUSH
48548: LD_INT 3
48550: NEG
48551: PUSH
48552: EMPTY
48553: LIST
48554: LIST
48555: PUSH
48556: LD_INT 3
48558: NEG
48559: PUSH
48560: LD_INT 2
48562: NEG
48563: PUSH
48564: EMPTY
48565: LIST
48566: LIST
48567: PUSH
48568: LD_INT 3
48570: NEG
48571: PUSH
48572: LD_INT 3
48574: NEG
48575: PUSH
48576: EMPTY
48577: LIST
48578: LIST
48579: PUSH
48580: EMPTY
48581: LIST
48582: LIST
48583: LIST
48584: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
48585: LD_ADDR_VAR 0 23
48589: PUSH
48590: LD_INT 0
48592: PUSH
48593: LD_INT 3
48595: NEG
48596: PUSH
48597: EMPTY
48598: LIST
48599: LIST
48600: PUSH
48601: LD_INT 1
48603: NEG
48604: PUSH
48605: LD_INT 4
48607: NEG
48608: PUSH
48609: EMPTY
48610: LIST
48611: LIST
48612: PUSH
48613: LD_INT 1
48615: PUSH
48616: LD_INT 3
48618: NEG
48619: PUSH
48620: EMPTY
48621: LIST
48622: LIST
48623: PUSH
48624: EMPTY
48625: LIST
48626: LIST
48627: LIST
48628: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
48629: LD_ADDR_VAR 0 24
48633: PUSH
48634: LD_INT 3
48636: PUSH
48637: LD_INT 0
48639: PUSH
48640: EMPTY
48641: LIST
48642: LIST
48643: PUSH
48644: LD_INT 3
48646: PUSH
48647: LD_INT 1
48649: NEG
48650: PUSH
48651: EMPTY
48652: LIST
48653: LIST
48654: PUSH
48655: LD_INT 4
48657: PUSH
48658: LD_INT 1
48660: PUSH
48661: EMPTY
48662: LIST
48663: LIST
48664: PUSH
48665: EMPTY
48666: LIST
48667: LIST
48668: LIST
48669: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
48670: LD_ADDR_VAR 0 25
48674: PUSH
48675: LD_INT 3
48677: PUSH
48678: LD_INT 3
48680: PUSH
48681: EMPTY
48682: LIST
48683: LIST
48684: PUSH
48685: LD_INT 4
48687: PUSH
48688: LD_INT 3
48690: PUSH
48691: EMPTY
48692: LIST
48693: LIST
48694: PUSH
48695: LD_INT 3
48697: PUSH
48698: LD_INT 4
48700: PUSH
48701: EMPTY
48702: LIST
48703: LIST
48704: PUSH
48705: EMPTY
48706: LIST
48707: LIST
48708: LIST
48709: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
48710: LD_ADDR_VAR 0 26
48714: PUSH
48715: LD_INT 0
48717: PUSH
48718: LD_INT 3
48720: PUSH
48721: EMPTY
48722: LIST
48723: LIST
48724: PUSH
48725: LD_INT 1
48727: PUSH
48728: LD_INT 4
48730: PUSH
48731: EMPTY
48732: LIST
48733: LIST
48734: PUSH
48735: LD_INT 1
48737: NEG
48738: PUSH
48739: LD_INT 3
48741: PUSH
48742: EMPTY
48743: LIST
48744: LIST
48745: PUSH
48746: EMPTY
48747: LIST
48748: LIST
48749: LIST
48750: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
48751: LD_ADDR_VAR 0 27
48755: PUSH
48756: LD_INT 3
48758: NEG
48759: PUSH
48760: LD_INT 0
48762: PUSH
48763: EMPTY
48764: LIST
48765: LIST
48766: PUSH
48767: LD_INT 3
48769: NEG
48770: PUSH
48771: LD_INT 1
48773: PUSH
48774: EMPTY
48775: LIST
48776: LIST
48777: PUSH
48778: LD_INT 4
48780: NEG
48781: PUSH
48782: LD_INT 1
48784: NEG
48785: PUSH
48786: EMPTY
48787: LIST
48788: LIST
48789: PUSH
48790: EMPTY
48791: LIST
48792: LIST
48793: LIST
48794: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
48795: LD_ADDR_VAR 0 28
48799: PUSH
48800: LD_INT 3
48802: NEG
48803: PUSH
48804: LD_INT 3
48806: NEG
48807: PUSH
48808: EMPTY
48809: LIST
48810: LIST
48811: PUSH
48812: LD_INT 3
48814: NEG
48815: PUSH
48816: LD_INT 4
48818: NEG
48819: PUSH
48820: EMPTY
48821: LIST
48822: LIST
48823: PUSH
48824: LD_INT 4
48826: NEG
48827: PUSH
48828: LD_INT 3
48830: NEG
48831: PUSH
48832: EMPTY
48833: LIST
48834: LIST
48835: PUSH
48836: EMPTY
48837: LIST
48838: LIST
48839: LIST
48840: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
48841: LD_ADDR_VAR 0 29
48845: PUSH
48846: LD_INT 1
48848: NEG
48849: PUSH
48850: LD_INT 3
48852: NEG
48853: PUSH
48854: EMPTY
48855: LIST
48856: LIST
48857: PUSH
48858: LD_INT 0
48860: PUSH
48861: LD_INT 3
48863: NEG
48864: PUSH
48865: EMPTY
48866: LIST
48867: LIST
48868: PUSH
48869: LD_INT 1
48871: PUSH
48872: LD_INT 2
48874: NEG
48875: PUSH
48876: EMPTY
48877: LIST
48878: LIST
48879: PUSH
48880: LD_INT 1
48882: NEG
48883: PUSH
48884: LD_INT 4
48886: NEG
48887: PUSH
48888: EMPTY
48889: LIST
48890: LIST
48891: PUSH
48892: LD_INT 0
48894: PUSH
48895: LD_INT 4
48897: NEG
48898: PUSH
48899: EMPTY
48900: LIST
48901: LIST
48902: PUSH
48903: LD_INT 1
48905: PUSH
48906: LD_INT 3
48908: NEG
48909: PUSH
48910: EMPTY
48911: LIST
48912: LIST
48913: PUSH
48914: LD_INT 1
48916: NEG
48917: PUSH
48918: LD_INT 5
48920: NEG
48921: PUSH
48922: EMPTY
48923: LIST
48924: LIST
48925: PUSH
48926: LD_INT 0
48928: PUSH
48929: LD_INT 5
48931: NEG
48932: PUSH
48933: EMPTY
48934: LIST
48935: LIST
48936: PUSH
48937: LD_INT 1
48939: PUSH
48940: LD_INT 4
48942: NEG
48943: PUSH
48944: EMPTY
48945: LIST
48946: LIST
48947: PUSH
48948: LD_INT 1
48950: NEG
48951: PUSH
48952: LD_INT 6
48954: NEG
48955: PUSH
48956: EMPTY
48957: LIST
48958: LIST
48959: PUSH
48960: LD_INT 0
48962: PUSH
48963: LD_INT 6
48965: NEG
48966: PUSH
48967: EMPTY
48968: LIST
48969: LIST
48970: PUSH
48971: LD_INT 1
48973: PUSH
48974: LD_INT 5
48976: NEG
48977: PUSH
48978: EMPTY
48979: LIST
48980: LIST
48981: PUSH
48982: EMPTY
48983: LIST
48984: LIST
48985: LIST
48986: LIST
48987: LIST
48988: LIST
48989: LIST
48990: LIST
48991: LIST
48992: LIST
48993: LIST
48994: LIST
48995: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
48996: LD_ADDR_VAR 0 30
49000: PUSH
49001: LD_INT 2
49003: PUSH
49004: LD_INT 1
49006: NEG
49007: PUSH
49008: EMPTY
49009: LIST
49010: LIST
49011: PUSH
49012: LD_INT 3
49014: PUSH
49015: LD_INT 0
49017: PUSH
49018: EMPTY
49019: LIST
49020: LIST
49021: PUSH
49022: LD_INT 3
49024: PUSH
49025: LD_INT 1
49027: PUSH
49028: EMPTY
49029: LIST
49030: LIST
49031: PUSH
49032: LD_INT 3
49034: PUSH
49035: LD_INT 1
49037: NEG
49038: PUSH
49039: EMPTY
49040: LIST
49041: LIST
49042: PUSH
49043: LD_INT 4
49045: PUSH
49046: LD_INT 0
49048: PUSH
49049: EMPTY
49050: LIST
49051: LIST
49052: PUSH
49053: LD_INT 4
49055: PUSH
49056: LD_INT 1
49058: PUSH
49059: EMPTY
49060: LIST
49061: LIST
49062: PUSH
49063: LD_INT 4
49065: PUSH
49066: LD_INT 1
49068: NEG
49069: PUSH
49070: EMPTY
49071: LIST
49072: LIST
49073: PUSH
49074: LD_INT 5
49076: PUSH
49077: LD_INT 0
49079: PUSH
49080: EMPTY
49081: LIST
49082: LIST
49083: PUSH
49084: LD_INT 5
49086: PUSH
49087: LD_INT 1
49089: PUSH
49090: EMPTY
49091: LIST
49092: LIST
49093: PUSH
49094: LD_INT 5
49096: PUSH
49097: LD_INT 1
49099: NEG
49100: PUSH
49101: EMPTY
49102: LIST
49103: LIST
49104: PUSH
49105: LD_INT 6
49107: PUSH
49108: LD_INT 0
49110: PUSH
49111: EMPTY
49112: LIST
49113: LIST
49114: PUSH
49115: LD_INT 6
49117: PUSH
49118: LD_INT 1
49120: PUSH
49121: EMPTY
49122: LIST
49123: LIST
49124: PUSH
49125: EMPTY
49126: LIST
49127: LIST
49128: LIST
49129: LIST
49130: LIST
49131: LIST
49132: LIST
49133: LIST
49134: LIST
49135: LIST
49136: LIST
49137: LIST
49138: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
49139: LD_ADDR_VAR 0 31
49143: PUSH
49144: LD_INT 3
49146: PUSH
49147: LD_INT 2
49149: PUSH
49150: EMPTY
49151: LIST
49152: LIST
49153: PUSH
49154: LD_INT 3
49156: PUSH
49157: LD_INT 3
49159: PUSH
49160: EMPTY
49161: LIST
49162: LIST
49163: PUSH
49164: LD_INT 2
49166: PUSH
49167: LD_INT 3
49169: PUSH
49170: EMPTY
49171: LIST
49172: LIST
49173: PUSH
49174: LD_INT 4
49176: PUSH
49177: LD_INT 3
49179: PUSH
49180: EMPTY
49181: LIST
49182: LIST
49183: PUSH
49184: LD_INT 4
49186: PUSH
49187: LD_INT 4
49189: PUSH
49190: EMPTY
49191: LIST
49192: LIST
49193: PUSH
49194: LD_INT 3
49196: PUSH
49197: LD_INT 4
49199: PUSH
49200: EMPTY
49201: LIST
49202: LIST
49203: PUSH
49204: LD_INT 5
49206: PUSH
49207: LD_INT 4
49209: PUSH
49210: EMPTY
49211: LIST
49212: LIST
49213: PUSH
49214: LD_INT 5
49216: PUSH
49217: LD_INT 5
49219: PUSH
49220: EMPTY
49221: LIST
49222: LIST
49223: PUSH
49224: LD_INT 4
49226: PUSH
49227: LD_INT 5
49229: PUSH
49230: EMPTY
49231: LIST
49232: LIST
49233: PUSH
49234: LD_INT 6
49236: PUSH
49237: LD_INT 5
49239: PUSH
49240: EMPTY
49241: LIST
49242: LIST
49243: PUSH
49244: LD_INT 6
49246: PUSH
49247: LD_INT 6
49249: PUSH
49250: EMPTY
49251: LIST
49252: LIST
49253: PUSH
49254: LD_INT 5
49256: PUSH
49257: LD_INT 6
49259: PUSH
49260: EMPTY
49261: LIST
49262: LIST
49263: PUSH
49264: EMPTY
49265: LIST
49266: LIST
49267: LIST
49268: LIST
49269: LIST
49270: LIST
49271: LIST
49272: LIST
49273: LIST
49274: LIST
49275: LIST
49276: LIST
49277: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
49278: LD_ADDR_VAR 0 32
49282: PUSH
49283: LD_INT 1
49285: PUSH
49286: LD_INT 3
49288: PUSH
49289: EMPTY
49290: LIST
49291: LIST
49292: PUSH
49293: LD_INT 0
49295: PUSH
49296: LD_INT 3
49298: PUSH
49299: EMPTY
49300: LIST
49301: LIST
49302: PUSH
49303: LD_INT 1
49305: NEG
49306: PUSH
49307: LD_INT 2
49309: PUSH
49310: EMPTY
49311: LIST
49312: LIST
49313: PUSH
49314: LD_INT 1
49316: PUSH
49317: LD_INT 4
49319: PUSH
49320: EMPTY
49321: LIST
49322: LIST
49323: PUSH
49324: LD_INT 0
49326: PUSH
49327: LD_INT 4
49329: PUSH
49330: EMPTY
49331: LIST
49332: LIST
49333: PUSH
49334: LD_INT 1
49336: NEG
49337: PUSH
49338: LD_INT 3
49340: PUSH
49341: EMPTY
49342: LIST
49343: LIST
49344: PUSH
49345: LD_INT 1
49347: PUSH
49348: LD_INT 5
49350: PUSH
49351: EMPTY
49352: LIST
49353: LIST
49354: PUSH
49355: LD_INT 0
49357: PUSH
49358: LD_INT 5
49360: PUSH
49361: EMPTY
49362: LIST
49363: LIST
49364: PUSH
49365: LD_INT 1
49367: NEG
49368: PUSH
49369: LD_INT 4
49371: PUSH
49372: EMPTY
49373: LIST
49374: LIST
49375: PUSH
49376: LD_INT 1
49378: PUSH
49379: LD_INT 6
49381: PUSH
49382: EMPTY
49383: LIST
49384: LIST
49385: PUSH
49386: LD_INT 0
49388: PUSH
49389: LD_INT 6
49391: PUSH
49392: EMPTY
49393: LIST
49394: LIST
49395: PUSH
49396: LD_INT 1
49398: NEG
49399: PUSH
49400: LD_INT 5
49402: PUSH
49403: EMPTY
49404: LIST
49405: LIST
49406: PUSH
49407: EMPTY
49408: LIST
49409: LIST
49410: LIST
49411: LIST
49412: LIST
49413: LIST
49414: LIST
49415: LIST
49416: LIST
49417: LIST
49418: LIST
49419: LIST
49420: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
49421: LD_ADDR_VAR 0 33
49425: PUSH
49426: LD_INT 2
49428: NEG
49429: PUSH
49430: LD_INT 1
49432: PUSH
49433: EMPTY
49434: LIST
49435: LIST
49436: PUSH
49437: LD_INT 3
49439: NEG
49440: PUSH
49441: LD_INT 0
49443: PUSH
49444: EMPTY
49445: LIST
49446: LIST
49447: PUSH
49448: LD_INT 3
49450: NEG
49451: PUSH
49452: LD_INT 1
49454: NEG
49455: PUSH
49456: EMPTY
49457: LIST
49458: LIST
49459: PUSH
49460: LD_INT 3
49462: NEG
49463: PUSH
49464: LD_INT 1
49466: PUSH
49467: EMPTY
49468: LIST
49469: LIST
49470: PUSH
49471: LD_INT 4
49473: NEG
49474: PUSH
49475: LD_INT 0
49477: PUSH
49478: EMPTY
49479: LIST
49480: LIST
49481: PUSH
49482: LD_INT 4
49484: NEG
49485: PUSH
49486: LD_INT 1
49488: NEG
49489: PUSH
49490: EMPTY
49491: LIST
49492: LIST
49493: PUSH
49494: LD_INT 4
49496: NEG
49497: PUSH
49498: LD_INT 1
49500: PUSH
49501: EMPTY
49502: LIST
49503: LIST
49504: PUSH
49505: LD_INT 5
49507: NEG
49508: PUSH
49509: LD_INT 0
49511: PUSH
49512: EMPTY
49513: LIST
49514: LIST
49515: PUSH
49516: LD_INT 5
49518: NEG
49519: PUSH
49520: LD_INT 1
49522: NEG
49523: PUSH
49524: EMPTY
49525: LIST
49526: LIST
49527: PUSH
49528: LD_INT 5
49530: NEG
49531: PUSH
49532: LD_INT 1
49534: PUSH
49535: EMPTY
49536: LIST
49537: LIST
49538: PUSH
49539: LD_INT 6
49541: NEG
49542: PUSH
49543: LD_INT 0
49545: PUSH
49546: EMPTY
49547: LIST
49548: LIST
49549: PUSH
49550: LD_INT 6
49552: NEG
49553: PUSH
49554: LD_INT 1
49556: NEG
49557: PUSH
49558: EMPTY
49559: LIST
49560: LIST
49561: PUSH
49562: EMPTY
49563: LIST
49564: LIST
49565: LIST
49566: LIST
49567: LIST
49568: LIST
49569: LIST
49570: LIST
49571: LIST
49572: LIST
49573: LIST
49574: LIST
49575: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
49576: LD_ADDR_VAR 0 34
49580: PUSH
49581: LD_INT 2
49583: NEG
49584: PUSH
49585: LD_INT 3
49587: NEG
49588: PUSH
49589: EMPTY
49590: LIST
49591: LIST
49592: PUSH
49593: LD_INT 3
49595: NEG
49596: PUSH
49597: LD_INT 2
49599: NEG
49600: PUSH
49601: EMPTY
49602: LIST
49603: LIST
49604: PUSH
49605: LD_INT 3
49607: NEG
49608: PUSH
49609: LD_INT 3
49611: NEG
49612: PUSH
49613: EMPTY
49614: LIST
49615: LIST
49616: PUSH
49617: LD_INT 3
49619: NEG
49620: PUSH
49621: LD_INT 4
49623: NEG
49624: PUSH
49625: EMPTY
49626: LIST
49627: LIST
49628: PUSH
49629: LD_INT 4
49631: NEG
49632: PUSH
49633: LD_INT 3
49635: NEG
49636: PUSH
49637: EMPTY
49638: LIST
49639: LIST
49640: PUSH
49641: LD_INT 4
49643: NEG
49644: PUSH
49645: LD_INT 4
49647: NEG
49648: PUSH
49649: EMPTY
49650: LIST
49651: LIST
49652: PUSH
49653: LD_INT 4
49655: NEG
49656: PUSH
49657: LD_INT 5
49659: NEG
49660: PUSH
49661: EMPTY
49662: LIST
49663: LIST
49664: PUSH
49665: LD_INT 5
49667: NEG
49668: PUSH
49669: LD_INT 4
49671: NEG
49672: PUSH
49673: EMPTY
49674: LIST
49675: LIST
49676: PUSH
49677: LD_INT 5
49679: NEG
49680: PUSH
49681: LD_INT 5
49683: NEG
49684: PUSH
49685: EMPTY
49686: LIST
49687: LIST
49688: PUSH
49689: LD_INT 5
49691: NEG
49692: PUSH
49693: LD_INT 6
49695: NEG
49696: PUSH
49697: EMPTY
49698: LIST
49699: LIST
49700: PUSH
49701: LD_INT 6
49703: NEG
49704: PUSH
49705: LD_INT 5
49707: NEG
49708: PUSH
49709: EMPTY
49710: LIST
49711: LIST
49712: PUSH
49713: LD_INT 6
49715: NEG
49716: PUSH
49717: LD_INT 6
49719: NEG
49720: PUSH
49721: EMPTY
49722: LIST
49723: LIST
49724: PUSH
49725: EMPTY
49726: LIST
49727: LIST
49728: LIST
49729: LIST
49730: LIST
49731: LIST
49732: LIST
49733: LIST
49734: LIST
49735: LIST
49736: LIST
49737: LIST
49738: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
49739: LD_ADDR_VAR 0 41
49743: PUSH
49744: LD_INT 0
49746: PUSH
49747: LD_INT 2
49749: NEG
49750: PUSH
49751: EMPTY
49752: LIST
49753: LIST
49754: PUSH
49755: LD_INT 1
49757: NEG
49758: PUSH
49759: LD_INT 3
49761: NEG
49762: PUSH
49763: EMPTY
49764: LIST
49765: LIST
49766: PUSH
49767: LD_INT 1
49769: PUSH
49770: LD_INT 2
49772: NEG
49773: PUSH
49774: EMPTY
49775: LIST
49776: LIST
49777: PUSH
49778: EMPTY
49779: LIST
49780: LIST
49781: LIST
49782: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
49783: LD_ADDR_VAR 0 42
49787: PUSH
49788: LD_INT 2
49790: PUSH
49791: LD_INT 0
49793: PUSH
49794: EMPTY
49795: LIST
49796: LIST
49797: PUSH
49798: LD_INT 2
49800: PUSH
49801: LD_INT 1
49803: NEG
49804: PUSH
49805: EMPTY
49806: LIST
49807: LIST
49808: PUSH
49809: LD_INT 3
49811: PUSH
49812: LD_INT 1
49814: PUSH
49815: EMPTY
49816: LIST
49817: LIST
49818: PUSH
49819: EMPTY
49820: LIST
49821: LIST
49822: LIST
49823: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
49824: LD_ADDR_VAR 0 43
49828: PUSH
49829: LD_INT 2
49831: PUSH
49832: LD_INT 2
49834: PUSH
49835: EMPTY
49836: LIST
49837: LIST
49838: PUSH
49839: LD_INT 3
49841: PUSH
49842: LD_INT 2
49844: PUSH
49845: EMPTY
49846: LIST
49847: LIST
49848: PUSH
49849: LD_INT 2
49851: PUSH
49852: LD_INT 3
49854: PUSH
49855: EMPTY
49856: LIST
49857: LIST
49858: PUSH
49859: EMPTY
49860: LIST
49861: LIST
49862: LIST
49863: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
49864: LD_ADDR_VAR 0 44
49868: PUSH
49869: LD_INT 0
49871: PUSH
49872: LD_INT 2
49874: PUSH
49875: EMPTY
49876: LIST
49877: LIST
49878: PUSH
49879: LD_INT 1
49881: PUSH
49882: LD_INT 3
49884: PUSH
49885: EMPTY
49886: LIST
49887: LIST
49888: PUSH
49889: LD_INT 1
49891: NEG
49892: PUSH
49893: LD_INT 2
49895: PUSH
49896: EMPTY
49897: LIST
49898: LIST
49899: PUSH
49900: EMPTY
49901: LIST
49902: LIST
49903: LIST
49904: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
49905: LD_ADDR_VAR 0 45
49909: PUSH
49910: LD_INT 2
49912: NEG
49913: PUSH
49914: LD_INT 0
49916: PUSH
49917: EMPTY
49918: LIST
49919: LIST
49920: PUSH
49921: LD_INT 2
49923: NEG
49924: PUSH
49925: LD_INT 1
49927: PUSH
49928: EMPTY
49929: LIST
49930: LIST
49931: PUSH
49932: LD_INT 3
49934: NEG
49935: PUSH
49936: LD_INT 1
49938: NEG
49939: PUSH
49940: EMPTY
49941: LIST
49942: LIST
49943: PUSH
49944: EMPTY
49945: LIST
49946: LIST
49947: LIST
49948: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
49949: LD_ADDR_VAR 0 46
49953: PUSH
49954: LD_INT 2
49956: NEG
49957: PUSH
49958: LD_INT 2
49960: NEG
49961: PUSH
49962: EMPTY
49963: LIST
49964: LIST
49965: PUSH
49966: LD_INT 2
49968: NEG
49969: PUSH
49970: LD_INT 3
49972: NEG
49973: PUSH
49974: EMPTY
49975: LIST
49976: LIST
49977: PUSH
49978: LD_INT 3
49980: NEG
49981: PUSH
49982: LD_INT 2
49984: NEG
49985: PUSH
49986: EMPTY
49987: LIST
49988: LIST
49989: PUSH
49990: EMPTY
49991: LIST
49992: LIST
49993: LIST
49994: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
49995: LD_ADDR_VAR 0 47
49999: PUSH
50000: LD_INT 2
50002: NEG
50003: PUSH
50004: LD_INT 3
50006: NEG
50007: PUSH
50008: EMPTY
50009: LIST
50010: LIST
50011: PUSH
50012: LD_INT 1
50014: NEG
50015: PUSH
50016: LD_INT 3
50018: NEG
50019: PUSH
50020: EMPTY
50021: LIST
50022: LIST
50023: PUSH
50024: EMPTY
50025: LIST
50026: LIST
50027: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
50028: LD_ADDR_VAR 0 48
50032: PUSH
50033: LD_INT 1
50035: PUSH
50036: LD_INT 2
50038: NEG
50039: PUSH
50040: EMPTY
50041: LIST
50042: LIST
50043: PUSH
50044: LD_INT 2
50046: PUSH
50047: LD_INT 1
50049: NEG
50050: PUSH
50051: EMPTY
50052: LIST
50053: LIST
50054: PUSH
50055: EMPTY
50056: LIST
50057: LIST
50058: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
50059: LD_ADDR_VAR 0 49
50063: PUSH
50064: LD_INT 3
50066: PUSH
50067: LD_INT 1
50069: PUSH
50070: EMPTY
50071: LIST
50072: LIST
50073: PUSH
50074: LD_INT 3
50076: PUSH
50077: LD_INT 2
50079: PUSH
50080: EMPTY
50081: LIST
50082: LIST
50083: PUSH
50084: EMPTY
50085: LIST
50086: LIST
50087: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
50088: LD_ADDR_VAR 0 50
50092: PUSH
50093: LD_INT 2
50095: PUSH
50096: LD_INT 3
50098: PUSH
50099: EMPTY
50100: LIST
50101: LIST
50102: PUSH
50103: LD_INT 1
50105: PUSH
50106: LD_INT 3
50108: PUSH
50109: EMPTY
50110: LIST
50111: LIST
50112: PUSH
50113: EMPTY
50114: LIST
50115: LIST
50116: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
50117: LD_ADDR_VAR 0 51
50121: PUSH
50122: LD_INT 1
50124: NEG
50125: PUSH
50126: LD_INT 2
50128: PUSH
50129: EMPTY
50130: LIST
50131: LIST
50132: PUSH
50133: LD_INT 2
50135: NEG
50136: PUSH
50137: LD_INT 1
50139: PUSH
50140: EMPTY
50141: LIST
50142: LIST
50143: PUSH
50144: EMPTY
50145: LIST
50146: LIST
50147: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
50148: LD_ADDR_VAR 0 52
50152: PUSH
50153: LD_INT 3
50155: NEG
50156: PUSH
50157: LD_INT 1
50159: NEG
50160: PUSH
50161: EMPTY
50162: LIST
50163: LIST
50164: PUSH
50165: LD_INT 3
50167: NEG
50168: PUSH
50169: LD_INT 2
50171: NEG
50172: PUSH
50173: EMPTY
50174: LIST
50175: LIST
50176: PUSH
50177: EMPTY
50178: LIST
50179: LIST
50180: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
50181: LD_ADDR_VAR 0 53
50185: PUSH
50186: LD_INT 1
50188: NEG
50189: PUSH
50190: LD_INT 3
50192: NEG
50193: PUSH
50194: EMPTY
50195: LIST
50196: LIST
50197: PUSH
50198: LD_INT 0
50200: PUSH
50201: LD_INT 3
50203: NEG
50204: PUSH
50205: EMPTY
50206: LIST
50207: LIST
50208: PUSH
50209: LD_INT 1
50211: PUSH
50212: LD_INT 2
50214: NEG
50215: PUSH
50216: EMPTY
50217: LIST
50218: LIST
50219: PUSH
50220: EMPTY
50221: LIST
50222: LIST
50223: LIST
50224: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
50225: LD_ADDR_VAR 0 54
50229: PUSH
50230: LD_INT 2
50232: PUSH
50233: LD_INT 1
50235: NEG
50236: PUSH
50237: EMPTY
50238: LIST
50239: LIST
50240: PUSH
50241: LD_INT 3
50243: PUSH
50244: LD_INT 0
50246: PUSH
50247: EMPTY
50248: LIST
50249: LIST
50250: PUSH
50251: LD_INT 3
50253: PUSH
50254: LD_INT 1
50256: PUSH
50257: EMPTY
50258: LIST
50259: LIST
50260: PUSH
50261: EMPTY
50262: LIST
50263: LIST
50264: LIST
50265: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
50266: LD_ADDR_VAR 0 55
50270: PUSH
50271: LD_INT 3
50273: PUSH
50274: LD_INT 2
50276: PUSH
50277: EMPTY
50278: LIST
50279: LIST
50280: PUSH
50281: LD_INT 3
50283: PUSH
50284: LD_INT 3
50286: PUSH
50287: EMPTY
50288: LIST
50289: LIST
50290: PUSH
50291: LD_INT 2
50293: PUSH
50294: LD_INT 3
50296: PUSH
50297: EMPTY
50298: LIST
50299: LIST
50300: PUSH
50301: EMPTY
50302: LIST
50303: LIST
50304: LIST
50305: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
50306: LD_ADDR_VAR 0 56
50310: PUSH
50311: LD_INT 1
50313: PUSH
50314: LD_INT 3
50316: PUSH
50317: EMPTY
50318: LIST
50319: LIST
50320: PUSH
50321: LD_INT 0
50323: PUSH
50324: LD_INT 3
50326: PUSH
50327: EMPTY
50328: LIST
50329: LIST
50330: PUSH
50331: LD_INT 1
50333: NEG
50334: PUSH
50335: LD_INT 2
50337: PUSH
50338: EMPTY
50339: LIST
50340: LIST
50341: PUSH
50342: EMPTY
50343: LIST
50344: LIST
50345: LIST
50346: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50347: LD_ADDR_VAR 0 57
50351: PUSH
50352: LD_INT 2
50354: NEG
50355: PUSH
50356: LD_INT 1
50358: PUSH
50359: EMPTY
50360: LIST
50361: LIST
50362: PUSH
50363: LD_INT 3
50365: NEG
50366: PUSH
50367: LD_INT 0
50369: PUSH
50370: EMPTY
50371: LIST
50372: LIST
50373: PUSH
50374: LD_INT 3
50376: NEG
50377: PUSH
50378: LD_INT 1
50380: NEG
50381: PUSH
50382: EMPTY
50383: LIST
50384: LIST
50385: PUSH
50386: EMPTY
50387: LIST
50388: LIST
50389: LIST
50390: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50391: LD_ADDR_VAR 0 58
50395: PUSH
50396: LD_INT 2
50398: NEG
50399: PUSH
50400: LD_INT 3
50402: NEG
50403: PUSH
50404: EMPTY
50405: LIST
50406: LIST
50407: PUSH
50408: LD_INT 3
50410: NEG
50411: PUSH
50412: LD_INT 2
50414: NEG
50415: PUSH
50416: EMPTY
50417: LIST
50418: LIST
50419: PUSH
50420: LD_INT 3
50422: NEG
50423: PUSH
50424: LD_INT 3
50426: NEG
50427: PUSH
50428: EMPTY
50429: LIST
50430: LIST
50431: PUSH
50432: EMPTY
50433: LIST
50434: LIST
50435: LIST
50436: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
50437: LD_ADDR_VAR 0 59
50441: PUSH
50442: LD_INT 1
50444: NEG
50445: PUSH
50446: LD_INT 2
50448: NEG
50449: PUSH
50450: EMPTY
50451: LIST
50452: LIST
50453: PUSH
50454: LD_INT 0
50456: PUSH
50457: LD_INT 2
50459: NEG
50460: PUSH
50461: EMPTY
50462: LIST
50463: LIST
50464: PUSH
50465: LD_INT 1
50467: PUSH
50468: LD_INT 1
50470: NEG
50471: PUSH
50472: EMPTY
50473: LIST
50474: LIST
50475: PUSH
50476: EMPTY
50477: LIST
50478: LIST
50479: LIST
50480: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
50481: LD_ADDR_VAR 0 60
50485: PUSH
50486: LD_INT 1
50488: PUSH
50489: LD_INT 1
50491: NEG
50492: PUSH
50493: EMPTY
50494: LIST
50495: LIST
50496: PUSH
50497: LD_INT 2
50499: PUSH
50500: LD_INT 0
50502: PUSH
50503: EMPTY
50504: LIST
50505: LIST
50506: PUSH
50507: LD_INT 2
50509: PUSH
50510: LD_INT 1
50512: PUSH
50513: EMPTY
50514: LIST
50515: LIST
50516: PUSH
50517: EMPTY
50518: LIST
50519: LIST
50520: LIST
50521: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
50522: LD_ADDR_VAR 0 61
50526: PUSH
50527: LD_INT 2
50529: PUSH
50530: LD_INT 1
50532: PUSH
50533: EMPTY
50534: LIST
50535: LIST
50536: PUSH
50537: LD_INT 2
50539: PUSH
50540: LD_INT 2
50542: PUSH
50543: EMPTY
50544: LIST
50545: LIST
50546: PUSH
50547: LD_INT 1
50549: PUSH
50550: LD_INT 2
50552: PUSH
50553: EMPTY
50554: LIST
50555: LIST
50556: PUSH
50557: EMPTY
50558: LIST
50559: LIST
50560: LIST
50561: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
50562: LD_ADDR_VAR 0 62
50566: PUSH
50567: LD_INT 1
50569: PUSH
50570: LD_INT 2
50572: PUSH
50573: EMPTY
50574: LIST
50575: LIST
50576: PUSH
50577: LD_INT 0
50579: PUSH
50580: LD_INT 2
50582: PUSH
50583: EMPTY
50584: LIST
50585: LIST
50586: PUSH
50587: LD_INT 1
50589: NEG
50590: PUSH
50591: LD_INT 1
50593: PUSH
50594: EMPTY
50595: LIST
50596: LIST
50597: PUSH
50598: EMPTY
50599: LIST
50600: LIST
50601: LIST
50602: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
50603: LD_ADDR_VAR 0 63
50607: PUSH
50608: LD_INT 1
50610: NEG
50611: PUSH
50612: LD_INT 1
50614: PUSH
50615: EMPTY
50616: LIST
50617: LIST
50618: PUSH
50619: LD_INT 2
50621: NEG
50622: PUSH
50623: LD_INT 0
50625: PUSH
50626: EMPTY
50627: LIST
50628: LIST
50629: PUSH
50630: LD_INT 2
50632: NEG
50633: PUSH
50634: LD_INT 1
50636: NEG
50637: PUSH
50638: EMPTY
50639: LIST
50640: LIST
50641: PUSH
50642: EMPTY
50643: LIST
50644: LIST
50645: LIST
50646: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50647: LD_ADDR_VAR 0 64
50651: PUSH
50652: LD_INT 1
50654: NEG
50655: PUSH
50656: LD_INT 2
50658: NEG
50659: PUSH
50660: EMPTY
50661: LIST
50662: LIST
50663: PUSH
50664: LD_INT 2
50666: NEG
50667: PUSH
50668: LD_INT 1
50670: NEG
50671: PUSH
50672: EMPTY
50673: LIST
50674: LIST
50675: PUSH
50676: LD_INT 2
50678: NEG
50679: PUSH
50680: LD_INT 2
50682: NEG
50683: PUSH
50684: EMPTY
50685: LIST
50686: LIST
50687: PUSH
50688: EMPTY
50689: LIST
50690: LIST
50691: LIST
50692: ST_TO_ADDR
// end ; 2 :
50693: GO 53959
50695: LD_INT 2
50697: DOUBLE
50698: EQUAL
50699: IFTRUE 50703
50701: GO 53958
50703: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
50704: LD_ADDR_VAR 0 29
50708: PUSH
50709: LD_INT 4
50711: PUSH
50712: LD_INT 0
50714: PUSH
50715: EMPTY
50716: LIST
50717: LIST
50718: PUSH
50719: LD_INT 4
50721: PUSH
50722: LD_INT 1
50724: NEG
50725: PUSH
50726: EMPTY
50727: LIST
50728: LIST
50729: PUSH
50730: LD_INT 5
50732: PUSH
50733: LD_INT 0
50735: PUSH
50736: EMPTY
50737: LIST
50738: LIST
50739: PUSH
50740: LD_INT 5
50742: PUSH
50743: LD_INT 1
50745: PUSH
50746: EMPTY
50747: LIST
50748: LIST
50749: PUSH
50750: LD_INT 4
50752: PUSH
50753: LD_INT 1
50755: PUSH
50756: EMPTY
50757: LIST
50758: LIST
50759: PUSH
50760: LD_INT 3
50762: PUSH
50763: LD_INT 0
50765: PUSH
50766: EMPTY
50767: LIST
50768: LIST
50769: PUSH
50770: LD_INT 3
50772: PUSH
50773: LD_INT 1
50775: NEG
50776: PUSH
50777: EMPTY
50778: LIST
50779: LIST
50780: PUSH
50781: LD_INT 3
50783: PUSH
50784: LD_INT 2
50786: NEG
50787: PUSH
50788: EMPTY
50789: LIST
50790: LIST
50791: PUSH
50792: LD_INT 5
50794: PUSH
50795: LD_INT 2
50797: PUSH
50798: EMPTY
50799: LIST
50800: LIST
50801: PUSH
50802: LD_INT 3
50804: PUSH
50805: LD_INT 3
50807: PUSH
50808: EMPTY
50809: LIST
50810: LIST
50811: PUSH
50812: LD_INT 3
50814: PUSH
50815: LD_INT 2
50817: PUSH
50818: EMPTY
50819: LIST
50820: LIST
50821: PUSH
50822: LD_INT 4
50824: PUSH
50825: LD_INT 3
50827: PUSH
50828: EMPTY
50829: LIST
50830: LIST
50831: PUSH
50832: LD_INT 4
50834: PUSH
50835: LD_INT 4
50837: PUSH
50838: EMPTY
50839: LIST
50840: LIST
50841: PUSH
50842: LD_INT 3
50844: PUSH
50845: LD_INT 4
50847: PUSH
50848: EMPTY
50849: LIST
50850: LIST
50851: PUSH
50852: LD_INT 2
50854: PUSH
50855: LD_INT 3
50857: PUSH
50858: EMPTY
50859: LIST
50860: LIST
50861: PUSH
50862: LD_INT 2
50864: PUSH
50865: LD_INT 2
50867: PUSH
50868: EMPTY
50869: LIST
50870: LIST
50871: PUSH
50872: LD_INT 4
50874: PUSH
50875: LD_INT 2
50877: PUSH
50878: EMPTY
50879: LIST
50880: LIST
50881: PUSH
50882: LD_INT 2
50884: PUSH
50885: LD_INT 4
50887: PUSH
50888: EMPTY
50889: LIST
50890: LIST
50891: PUSH
50892: LD_INT 0
50894: PUSH
50895: LD_INT 4
50897: PUSH
50898: EMPTY
50899: LIST
50900: LIST
50901: PUSH
50902: LD_INT 0
50904: PUSH
50905: LD_INT 3
50907: PUSH
50908: EMPTY
50909: LIST
50910: LIST
50911: PUSH
50912: LD_INT 1
50914: PUSH
50915: LD_INT 4
50917: PUSH
50918: EMPTY
50919: LIST
50920: LIST
50921: PUSH
50922: LD_INT 1
50924: PUSH
50925: LD_INT 5
50927: PUSH
50928: EMPTY
50929: LIST
50930: LIST
50931: PUSH
50932: LD_INT 0
50934: PUSH
50935: LD_INT 5
50937: PUSH
50938: EMPTY
50939: LIST
50940: LIST
50941: PUSH
50942: LD_INT 1
50944: NEG
50945: PUSH
50946: LD_INT 4
50948: PUSH
50949: EMPTY
50950: LIST
50951: LIST
50952: PUSH
50953: LD_INT 1
50955: NEG
50956: PUSH
50957: LD_INT 3
50959: PUSH
50960: EMPTY
50961: LIST
50962: LIST
50963: PUSH
50964: LD_INT 2
50966: PUSH
50967: LD_INT 5
50969: PUSH
50970: EMPTY
50971: LIST
50972: LIST
50973: PUSH
50974: LD_INT 2
50976: NEG
50977: PUSH
50978: LD_INT 3
50980: PUSH
50981: EMPTY
50982: LIST
50983: LIST
50984: PUSH
50985: LD_INT 3
50987: NEG
50988: PUSH
50989: LD_INT 0
50991: PUSH
50992: EMPTY
50993: LIST
50994: LIST
50995: PUSH
50996: LD_INT 3
50998: NEG
50999: PUSH
51000: LD_INT 1
51002: NEG
51003: PUSH
51004: EMPTY
51005: LIST
51006: LIST
51007: PUSH
51008: LD_INT 2
51010: NEG
51011: PUSH
51012: LD_INT 0
51014: PUSH
51015: EMPTY
51016: LIST
51017: LIST
51018: PUSH
51019: LD_INT 2
51021: NEG
51022: PUSH
51023: LD_INT 1
51025: PUSH
51026: EMPTY
51027: LIST
51028: LIST
51029: PUSH
51030: LD_INT 3
51032: NEG
51033: PUSH
51034: LD_INT 1
51036: PUSH
51037: EMPTY
51038: LIST
51039: LIST
51040: PUSH
51041: LD_INT 4
51043: NEG
51044: PUSH
51045: LD_INT 0
51047: PUSH
51048: EMPTY
51049: LIST
51050: LIST
51051: PUSH
51052: LD_INT 4
51054: NEG
51055: PUSH
51056: LD_INT 1
51058: NEG
51059: PUSH
51060: EMPTY
51061: LIST
51062: LIST
51063: PUSH
51064: LD_INT 4
51066: NEG
51067: PUSH
51068: LD_INT 2
51070: NEG
51071: PUSH
51072: EMPTY
51073: LIST
51074: LIST
51075: PUSH
51076: LD_INT 2
51078: NEG
51079: PUSH
51080: LD_INT 2
51082: PUSH
51083: EMPTY
51084: LIST
51085: LIST
51086: PUSH
51087: LD_INT 4
51089: NEG
51090: PUSH
51091: LD_INT 4
51093: NEG
51094: PUSH
51095: EMPTY
51096: LIST
51097: LIST
51098: PUSH
51099: LD_INT 4
51101: NEG
51102: PUSH
51103: LD_INT 5
51105: NEG
51106: PUSH
51107: EMPTY
51108: LIST
51109: LIST
51110: PUSH
51111: LD_INT 3
51113: NEG
51114: PUSH
51115: LD_INT 4
51117: NEG
51118: PUSH
51119: EMPTY
51120: LIST
51121: LIST
51122: PUSH
51123: LD_INT 3
51125: NEG
51126: PUSH
51127: LD_INT 3
51129: NEG
51130: PUSH
51131: EMPTY
51132: LIST
51133: LIST
51134: PUSH
51135: LD_INT 4
51137: NEG
51138: PUSH
51139: LD_INT 3
51141: NEG
51142: PUSH
51143: EMPTY
51144: LIST
51145: LIST
51146: PUSH
51147: LD_INT 5
51149: NEG
51150: PUSH
51151: LD_INT 4
51153: NEG
51154: PUSH
51155: EMPTY
51156: LIST
51157: LIST
51158: PUSH
51159: LD_INT 5
51161: NEG
51162: PUSH
51163: LD_INT 5
51165: NEG
51166: PUSH
51167: EMPTY
51168: LIST
51169: LIST
51170: PUSH
51171: LD_INT 3
51173: NEG
51174: PUSH
51175: LD_INT 5
51177: NEG
51178: PUSH
51179: EMPTY
51180: LIST
51181: LIST
51182: PUSH
51183: LD_INT 5
51185: NEG
51186: PUSH
51187: LD_INT 3
51189: NEG
51190: PUSH
51191: EMPTY
51192: LIST
51193: LIST
51194: PUSH
51195: EMPTY
51196: LIST
51197: LIST
51198: LIST
51199: LIST
51200: LIST
51201: LIST
51202: LIST
51203: LIST
51204: LIST
51205: LIST
51206: LIST
51207: LIST
51208: LIST
51209: LIST
51210: LIST
51211: LIST
51212: LIST
51213: LIST
51214: LIST
51215: LIST
51216: LIST
51217: LIST
51218: LIST
51219: LIST
51220: LIST
51221: LIST
51222: LIST
51223: LIST
51224: LIST
51225: LIST
51226: LIST
51227: LIST
51228: LIST
51229: LIST
51230: LIST
51231: LIST
51232: LIST
51233: LIST
51234: LIST
51235: LIST
51236: LIST
51237: LIST
51238: LIST
51239: LIST
51240: LIST
51241: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
51242: LD_ADDR_VAR 0 30
51246: PUSH
51247: LD_INT 4
51249: PUSH
51250: LD_INT 4
51252: PUSH
51253: EMPTY
51254: LIST
51255: LIST
51256: PUSH
51257: LD_INT 4
51259: PUSH
51260: LD_INT 3
51262: PUSH
51263: EMPTY
51264: LIST
51265: LIST
51266: PUSH
51267: LD_INT 5
51269: PUSH
51270: LD_INT 4
51272: PUSH
51273: EMPTY
51274: LIST
51275: LIST
51276: PUSH
51277: LD_INT 5
51279: PUSH
51280: LD_INT 5
51282: PUSH
51283: EMPTY
51284: LIST
51285: LIST
51286: PUSH
51287: LD_INT 4
51289: PUSH
51290: LD_INT 5
51292: PUSH
51293: EMPTY
51294: LIST
51295: LIST
51296: PUSH
51297: LD_INT 3
51299: PUSH
51300: LD_INT 4
51302: PUSH
51303: EMPTY
51304: LIST
51305: LIST
51306: PUSH
51307: LD_INT 3
51309: PUSH
51310: LD_INT 3
51312: PUSH
51313: EMPTY
51314: LIST
51315: LIST
51316: PUSH
51317: LD_INT 5
51319: PUSH
51320: LD_INT 3
51322: PUSH
51323: EMPTY
51324: LIST
51325: LIST
51326: PUSH
51327: LD_INT 3
51329: PUSH
51330: LD_INT 5
51332: PUSH
51333: EMPTY
51334: LIST
51335: LIST
51336: PUSH
51337: LD_INT 0
51339: PUSH
51340: LD_INT 3
51342: PUSH
51343: EMPTY
51344: LIST
51345: LIST
51346: PUSH
51347: LD_INT 0
51349: PUSH
51350: LD_INT 2
51352: PUSH
51353: EMPTY
51354: LIST
51355: LIST
51356: PUSH
51357: LD_INT 1
51359: PUSH
51360: LD_INT 3
51362: PUSH
51363: EMPTY
51364: LIST
51365: LIST
51366: PUSH
51367: LD_INT 1
51369: PUSH
51370: LD_INT 4
51372: PUSH
51373: EMPTY
51374: LIST
51375: LIST
51376: PUSH
51377: LD_INT 0
51379: PUSH
51380: LD_INT 4
51382: PUSH
51383: EMPTY
51384: LIST
51385: LIST
51386: PUSH
51387: LD_INT 1
51389: NEG
51390: PUSH
51391: LD_INT 3
51393: PUSH
51394: EMPTY
51395: LIST
51396: LIST
51397: PUSH
51398: LD_INT 1
51400: NEG
51401: PUSH
51402: LD_INT 2
51404: PUSH
51405: EMPTY
51406: LIST
51407: LIST
51408: PUSH
51409: LD_INT 2
51411: PUSH
51412: LD_INT 4
51414: PUSH
51415: EMPTY
51416: LIST
51417: LIST
51418: PUSH
51419: LD_INT 2
51421: NEG
51422: PUSH
51423: LD_INT 2
51425: PUSH
51426: EMPTY
51427: LIST
51428: LIST
51429: PUSH
51430: LD_INT 4
51432: NEG
51433: PUSH
51434: LD_INT 0
51436: PUSH
51437: EMPTY
51438: LIST
51439: LIST
51440: PUSH
51441: LD_INT 4
51443: NEG
51444: PUSH
51445: LD_INT 1
51447: NEG
51448: PUSH
51449: EMPTY
51450: LIST
51451: LIST
51452: PUSH
51453: LD_INT 3
51455: NEG
51456: PUSH
51457: LD_INT 0
51459: PUSH
51460: EMPTY
51461: LIST
51462: LIST
51463: PUSH
51464: LD_INT 3
51466: NEG
51467: PUSH
51468: LD_INT 1
51470: PUSH
51471: EMPTY
51472: LIST
51473: LIST
51474: PUSH
51475: LD_INT 4
51477: NEG
51478: PUSH
51479: LD_INT 1
51481: PUSH
51482: EMPTY
51483: LIST
51484: LIST
51485: PUSH
51486: LD_INT 5
51488: NEG
51489: PUSH
51490: LD_INT 0
51492: PUSH
51493: EMPTY
51494: LIST
51495: LIST
51496: PUSH
51497: LD_INT 5
51499: NEG
51500: PUSH
51501: LD_INT 1
51503: NEG
51504: PUSH
51505: EMPTY
51506: LIST
51507: LIST
51508: PUSH
51509: LD_INT 5
51511: NEG
51512: PUSH
51513: LD_INT 2
51515: NEG
51516: PUSH
51517: EMPTY
51518: LIST
51519: LIST
51520: PUSH
51521: LD_INT 3
51523: NEG
51524: PUSH
51525: LD_INT 2
51527: PUSH
51528: EMPTY
51529: LIST
51530: LIST
51531: PUSH
51532: LD_INT 3
51534: NEG
51535: PUSH
51536: LD_INT 3
51538: NEG
51539: PUSH
51540: EMPTY
51541: LIST
51542: LIST
51543: PUSH
51544: LD_INT 3
51546: NEG
51547: PUSH
51548: LD_INT 4
51550: NEG
51551: PUSH
51552: EMPTY
51553: LIST
51554: LIST
51555: PUSH
51556: LD_INT 2
51558: NEG
51559: PUSH
51560: LD_INT 3
51562: NEG
51563: PUSH
51564: EMPTY
51565: LIST
51566: LIST
51567: PUSH
51568: LD_INT 2
51570: NEG
51571: PUSH
51572: LD_INT 2
51574: NEG
51575: PUSH
51576: EMPTY
51577: LIST
51578: LIST
51579: PUSH
51580: LD_INT 3
51582: NEG
51583: PUSH
51584: LD_INT 2
51586: NEG
51587: PUSH
51588: EMPTY
51589: LIST
51590: LIST
51591: PUSH
51592: LD_INT 4
51594: NEG
51595: PUSH
51596: LD_INT 3
51598: NEG
51599: PUSH
51600: EMPTY
51601: LIST
51602: LIST
51603: PUSH
51604: LD_INT 4
51606: NEG
51607: PUSH
51608: LD_INT 4
51610: NEG
51611: PUSH
51612: EMPTY
51613: LIST
51614: LIST
51615: PUSH
51616: LD_INT 2
51618: NEG
51619: PUSH
51620: LD_INT 4
51622: NEG
51623: PUSH
51624: EMPTY
51625: LIST
51626: LIST
51627: PUSH
51628: LD_INT 4
51630: NEG
51631: PUSH
51632: LD_INT 2
51634: NEG
51635: PUSH
51636: EMPTY
51637: LIST
51638: LIST
51639: PUSH
51640: LD_INT 0
51642: PUSH
51643: LD_INT 4
51645: NEG
51646: PUSH
51647: EMPTY
51648: LIST
51649: LIST
51650: PUSH
51651: LD_INT 0
51653: PUSH
51654: LD_INT 5
51656: NEG
51657: PUSH
51658: EMPTY
51659: LIST
51660: LIST
51661: PUSH
51662: LD_INT 1
51664: PUSH
51665: LD_INT 4
51667: NEG
51668: PUSH
51669: EMPTY
51670: LIST
51671: LIST
51672: PUSH
51673: LD_INT 1
51675: PUSH
51676: LD_INT 3
51678: NEG
51679: PUSH
51680: EMPTY
51681: LIST
51682: LIST
51683: PUSH
51684: LD_INT 0
51686: PUSH
51687: LD_INT 3
51689: NEG
51690: PUSH
51691: EMPTY
51692: LIST
51693: LIST
51694: PUSH
51695: LD_INT 1
51697: NEG
51698: PUSH
51699: LD_INT 4
51701: NEG
51702: PUSH
51703: EMPTY
51704: LIST
51705: LIST
51706: PUSH
51707: LD_INT 1
51709: NEG
51710: PUSH
51711: LD_INT 5
51713: NEG
51714: PUSH
51715: EMPTY
51716: LIST
51717: LIST
51718: PUSH
51719: LD_INT 2
51721: PUSH
51722: LD_INT 3
51724: NEG
51725: PUSH
51726: EMPTY
51727: LIST
51728: LIST
51729: PUSH
51730: LD_INT 2
51732: NEG
51733: PUSH
51734: LD_INT 5
51736: NEG
51737: PUSH
51738: EMPTY
51739: LIST
51740: LIST
51741: PUSH
51742: EMPTY
51743: LIST
51744: LIST
51745: LIST
51746: LIST
51747: LIST
51748: LIST
51749: LIST
51750: LIST
51751: LIST
51752: LIST
51753: LIST
51754: LIST
51755: LIST
51756: LIST
51757: LIST
51758: LIST
51759: LIST
51760: LIST
51761: LIST
51762: LIST
51763: LIST
51764: LIST
51765: LIST
51766: LIST
51767: LIST
51768: LIST
51769: LIST
51770: LIST
51771: LIST
51772: LIST
51773: LIST
51774: LIST
51775: LIST
51776: LIST
51777: LIST
51778: LIST
51779: LIST
51780: LIST
51781: LIST
51782: LIST
51783: LIST
51784: LIST
51785: LIST
51786: LIST
51787: LIST
51788: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
51789: LD_ADDR_VAR 0 31
51793: PUSH
51794: LD_INT 0
51796: PUSH
51797: LD_INT 4
51799: PUSH
51800: EMPTY
51801: LIST
51802: LIST
51803: PUSH
51804: LD_INT 0
51806: PUSH
51807: LD_INT 3
51809: PUSH
51810: EMPTY
51811: LIST
51812: LIST
51813: PUSH
51814: LD_INT 1
51816: PUSH
51817: LD_INT 4
51819: PUSH
51820: EMPTY
51821: LIST
51822: LIST
51823: PUSH
51824: LD_INT 1
51826: PUSH
51827: LD_INT 5
51829: PUSH
51830: EMPTY
51831: LIST
51832: LIST
51833: PUSH
51834: LD_INT 0
51836: PUSH
51837: LD_INT 5
51839: PUSH
51840: EMPTY
51841: LIST
51842: LIST
51843: PUSH
51844: LD_INT 1
51846: NEG
51847: PUSH
51848: LD_INT 4
51850: PUSH
51851: EMPTY
51852: LIST
51853: LIST
51854: PUSH
51855: LD_INT 1
51857: NEG
51858: PUSH
51859: LD_INT 3
51861: PUSH
51862: EMPTY
51863: LIST
51864: LIST
51865: PUSH
51866: LD_INT 2
51868: PUSH
51869: LD_INT 5
51871: PUSH
51872: EMPTY
51873: LIST
51874: LIST
51875: PUSH
51876: LD_INT 2
51878: NEG
51879: PUSH
51880: LD_INT 3
51882: PUSH
51883: EMPTY
51884: LIST
51885: LIST
51886: PUSH
51887: LD_INT 3
51889: NEG
51890: PUSH
51891: LD_INT 0
51893: PUSH
51894: EMPTY
51895: LIST
51896: LIST
51897: PUSH
51898: LD_INT 3
51900: NEG
51901: PUSH
51902: LD_INT 1
51904: NEG
51905: PUSH
51906: EMPTY
51907: LIST
51908: LIST
51909: PUSH
51910: LD_INT 2
51912: NEG
51913: PUSH
51914: LD_INT 0
51916: PUSH
51917: EMPTY
51918: LIST
51919: LIST
51920: PUSH
51921: LD_INT 2
51923: NEG
51924: PUSH
51925: LD_INT 1
51927: PUSH
51928: EMPTY
51929: LIST
51930: LIST
51931: PUSH
51932: LD_INT 3
51934: NEG
51935: PUSH
51936: LD_INT 1
51938: PUSH
51939: EMPTY
51940: LIST
51941: LIST
51942: PUSH
51943: LD_INT 4
51945: NEG
51946: PUSH
51947: LD_INT 0
51949: PUSH
51950: EMPTY
51951: LIST
51952: LIST
51953: PUSH
51954: LD_INT 4
51956: NEG
51957: PUSH
51958: LD_INT 1
51960: NEG
51961: PUSH
51962: EMPTY
51963: LIST
51964: LIST
51965: PUSH
51966: LD_INT 4
51968: NEG
51969: PUSH
51970: LD_INT 2
51972: NEG
51973: PUSH
51974: EMPTY
51975: LIST
51976: LIST
51977: PUSH
51978: LD_INT 2
51980: NEG
51981: PUSH
51982: LD_INT 2
51984: PUSH
51985: EMPTY
51986: LIST
51987: LIST
51988: PUSH
51989: LD_INT 4
51991: NEG
51992: PUSH
51993: LD_INT 4
51995: NEG
51996: PUSH
51997: EMPTY
51998: LIST
51999: LIST
52000: PUSH
52001: LD_INT 4
52003: NEG
52004: PUSH
52005: LD_INT 5
52007: NEG
52008: PUSH
52009: EMPTY
52010: LIST
52011: LIST
52012: PUSH
52013: LD_INT 3
52015: NEG
52016: PUSH
52017: LD_INT 4
52019: NEG
52020: PUSH
52021: EMPTY
52022: LIST
52023: LIST
52024: PUSH
52025: LD_INT 3
52027: NEG
52028: PUSH
52029: LD_INT 3
52031: NEG
52032: PUSH
52033: EMPTY
52034: LIST
52035: LIST
52036: PUSH
52037: LD_INT 4
52039: NEG
52040: PUSH
52041: LD_INT 3
52043: NEG
52044: PUSH
52045: EMPTY
52046: LIST
52047: LIST
52048: PUSH
52049: LD_INT 5
52051: NEG
52052: PUSH
52053: LD_INT 4
52055: NEG
52056: PUSH
52057: EMPTY
52058: LIST
52059: LIST
52060: PUSH
52061: LD_INT 5
52063: NEG
52064: PUSH
52065: LD_INT 5
52067: NEG
52068: PUSH
52069: EMPTY
52070: LIST
52071: LIST
52072: PUSH
52073: LD_INT 3
52075: NEG
52076: PUSH
52077: LD_INT 5
52079: NEG
52080: PUSH
52081: EMPTY
52082: LIST
52083: LIST
52084: PUSH
52085: LD_INT 5
52087: NEG
52088: PUSH
52089: LD_INT 3
52091: NEG
52092: PUSH
52093: EMPTY
52094: LIST
52095: LIST
52096: PUSH
52097: LD_INT 0
52099: PUSH
52100: LD_INT 3
52102: NEG
52103: PUSH
52104: EMPTY
52105: LIST
52106: LIST
52107: PUSH
52108: LD_INT 0
52110: PUSH
52111: LD_INT 4
52113: NEG
52114: PUSH
52115: EMPTY
52116: LIST
52117: LIST
52118: PUSH
52119: LD_INT 1
52121: PUSH
52122: LD_INT 3
52124: NEG
52125: PUSH
52126: EMPTY
52127: LIST
52128: LIST
52129: PUSH
52130: LD_INT 1
52132: PUSH
52133: LD_INT 2
52135: NEG
52136: PUSH
52137: EMPTY
52138: LIST
52139: LIST
52140: PUSH
52141: LD_INT 0
52143: PUSH
52144: LD_INT 2
52146: NEG
52147: PUSH
52148: EMPTY
52149: LIST
52150: LIST
52151: PUSH
52152: LD_INT 1
52154: NEG
52155: PUSH
52156: LD_INT 3
52158: NEG
52159: PUSH
52160: EMPTY
52161: LIST
52162: LIST
52163: PUSH
52164: LD_INT 1
52166: NEG
52167: PUSH
52168: LD_INT 4
52170: NEG
52171: PUSH
52172: EMPTY
52173: LIST
52174: LIST
52175: PUSH
52176: LD_INT 2
52178: PUSH
52179: LD_INT 2
52181: NEG
52182: PUSH
52183: EMPTY
52184: LIST
52185: LIST
52186: PUSH
52187: LD_INT 2
52189: NEG
52190: PUSH
52191: LD_INT 4
52193: NEG
52194: PUSH
52195: EMPTY
52196: LIST
52197: LIST
52198: PUSH
52199: LD_INT 4
52201: PUSH
52202: LD_INT 0
52204: PUSH
52205: EMPTY
52206: LIST
52207: LIST
52208: PUSH
52209: LD_INT 4
52211: PUSH
52212: LD_INT 1
52214: NEG
52215: PUSH
52216: EMPTY
52217: LIST
52218: LIST
52219: PUSH
52220: LD_INT 5
52222: PUSH
52223: LD_INT 0
52225: PUSH
52226: EMPTY
52227: LIST
52228: LIST
52229: PUSH
52230: LD_INT 5
52232: PUSH
52233: LD_INT 1
52235: PUSH
52236: EMPTY
52237: LIST
52238: LIST
52239: PUSH
52240: LD_INT 4
52242: PUSH
52243: LD_INT 1
52245: PUSH
52246: EMPTY
52247: LIST
52248: LIST
52249: PUSH
52250: LD_INT 3
52252: PUSH
52253: LD_INT 0
52255: PUSH
52256: EMPTY
52257: LIST
52258: LIST
52259: PUSH
52260: LD_INT 3
52262: PUSH
52263: LD_INT 1
52265: NEG
52266: PUSH
52267: EMPTY
52268: LIST
52269: LIST
52270: PUSH
52271: LD_INT 3
52273: PUSH
52274: LD_INT 2
52276: NEG
52277: PUSH
52278: EMPTY
52279: LIST
52280: LIST
52281: PUSH
52282: LD_INT 5
52284: PUSH
52285: LD_INT 2
52287: PUSH
52288: EMPTY
52289: LIST
52290: LIST
52291: PUSH
52292: EMPTY
52293: LIST
52294: LIST
52295: LIST
52296: LIST
52297: LIST
52298: LIST
52299: LIST
52300: LIST
52301: LIST
52302: LIST
52303: LIST
52304: LIST
52305: LIST
52306: LIST
52307: LIST
52308: LIST
52309: LIST
52310: LIST
52311: LIST
52312: LIST
52313: LIST
52314: LIST
52315: LIST
52316: LIST
52317: LIST
52318: LIST
52319: LIST
52320: LIST
52321: LIST
52322: LIST
52323: LIST
52324: LIST
52325: LIST
52326: LIST
52327: LIST
52328: LIST
52329: LIST
52330: LIST
52331: LIST
52332: LIST
52333: LIST
52334: LIST
52335: LIST
52336: LIST
52337: LIST
52338: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
52339: LD_ADDR_VAR 0 32
52343: PUSH
52344: LD_INT 4
52346: NEG
52347: PUSH
52348: LD_INT 0
52350: PUSH
52351: EMPTY
52352: LIST
52353: LIST
52354: PUSH
52355: LD_INT 4
52357: NEG
52358: PUSH
52359: LD_INT 1
52361: NEG
52362: PUSH
52363: EMPTY
52364: LIST
52365: LIST
52366: PUSH
52367: LD_INT 3
52369: NEG
52370: PUSH
52371: LD_INT 0
52373: PUSH
52374: EMPTY
52375: LIST
52376: LIST
52377: PUSH
52378: LD_INT 3
52380: NEG
52381: PUSH
52382: LD_INT 1
52384: PUSH
52385: EMPTY
52386: LIST
52387: LIST
52388: PUSH
52389: LD_INT 4
52391: NEG
52392: PUSH
52393: LD_INT 1
52395: PUSH
52396: EMPTY
52397: LIST
52398: LIST
52399: PUSH
52400: LD_INT 5
52402: NEG
52403: PUSH
52404: LD_INT 0
52406: PUSH
52407: EMPTY
52408: LIST
52409: LIST
52410: PUSH
52411: LD_INT 5
52413: NEG
52414: PUSH
52415: LD_INT 1
52417: NEG
52418: PUSH
52419: EMPTY
52420: LIST
52421: LIST
52422: PUSH
52423: LD_INT 5
52425: NEG
52426: PUSH
52427: LD_INT 2
52429: NEG
52430: PUSH
52431: EMPTY
52432: LIST
52433: LIST
52434: PUSH
52435: LD_INT 3
52437: NEG
52438: PUSH
52439: LD_INT 2
52441: PUSH
52442: EMPTY
52443: LIST
52444: LIST
52445: PUSH
52446: LD_INT 3
52448: NEG
52449: PUSH
52450: LD_INT 3
52452: NEG
52453: PUSH
52454: EMPTY
52455: LIST
52456: LIST
52457: PUSH
52458: LD_INT 3
52460: NEG
52461: PUSH
52462: LD_INT 4
52464: NEG
52465: PUSH
52466: EMPTY
52467: LIST
52468: LIST
52469: PUSH
52470: LD_INT 2
52472: NEG
52473: PUSH
52474: LD_INT 3
52476: NEG
52477: PUSH
52478: EMPTY
52479: LIST
52480: LIST
52481: PUSH
52482: LD_INT 2
52484: NEG
52485: PUSH
52486: LD_INT 2
52488: NEG
52489: PUSH
52490: EMPTY
52491: LIST
52492: LIST
52493: PUSH
52494: LD_INT 3
52496: NEG
52497: PUSH
52498: LD_INT 2
52500: NEG
52501: PUSH
52502: EMPTY
52503: LIST
52504: LIST
52505: PUSH
52506: LD_INT 4
52508: NEG
52509: PUSH
52510: LD_INT 3
52512: NEG
52513: PUSH
52514: EMPTY
52515: LIST
52516: LIST
52517: PUSH
52518: LD_INT 4
52520: NEG
52521: PUSH
52522: LD_INT 4
52524: NEG
52525: PUSH
52526: EMPTY
52527: LIST
52528: LIST
52529: PUSH
52530: LD_INT 2
52532: NEG
52533: PUSH
52534: LD_INT 4
52536: NEG
52537: PUSH
52538: EMPTY
52539: LIST
52540: LIST
52541: PUSH
52542: LD_INT 4
52544: NEG
52545: PUSH
52546: LD_INT 2
52548: NEG
52549: PUSH
52550: EMPTY
52551: LIST
52552: LIST
52553: PUSH
52554: LD_INT 0
52556: PUSH
52557: LD_INT 4
52559: NEG
52560: PUSH
52561: EMPTY
52562: LIST
52563: LIST
52564: PUSH
52565: LD_INT 0
52567: PUSH
52568: LD_INT 5
52570: NEG
52571: PUSH
52572: EMPTY
52573: LIST
52574: LIST
52575: PUSH
52576: LD_INT 1
52578: PUSH
52579: LD_INT 4
52581: NEG
52582: PUSH
52583: EMPTY
52584: LIST
52585: LIST
52586: PUSH
52587: LD_INT 1
52589: PUSH
52590: LD_INT 3
52592: NEG
52593: PUSH
52594: EMPTY
52595: LIST
52596: LIST
52597: PUSH
52598: LD_INT 0
52600: PUSH
52601: LD_INT 3
52603: NEG
52604: PUSH
52605: EMPTY
52606: LIST
52607: LIST
52608: PUSH
52609: LD_INT 1
52611: NEG
52612: PUSH
52613: LD_INT 4
52615: NEG
52616: PUSH
52617: EMPTY
52618: LIST
52619: LIST
52620: PUSH
52621: LD_INT 1
52623: NEG
52624: PUSH
52625: LD_INT 5
52627: NEG
52628: PUSH
52629: EMPTY
52630: LIST
52631: LIST
52632: PUSH
52633: LD_INT 2
52635: PUSH
52636: LD_INT 3
52638: NEG
52639: PUSH
52640: EMPTY
52641: LIST
52642: LIST
52643: PUSH
52644: LD_INT 2
52646: NEG
52647: PUSH
52648: LD_INT 5
52650: NEG
52651: PUSH
52652: EMPTY
52653: LIST
52654: LIST
52655: PUSH
52656: LD_INT 3
52658: PUSH
52659: LD_INT 0
52661: PUSH
52662: EMPTY
52663: LIST
52664: LIST
52665: PUSH
52666: LD_INT 3
52668: PUSH
52669: LD_INT 1
52671: NEG
52672: PUSH
52673: EMPTY
52674: LIST
52675: LIST
52676: PUSH
52677: LD_INT 4
52679: PUSH
52680: LD_INT 0
52682: PUSH
52683: EMPTY
52684: LIST
52685: LIST
52686: PUSH
52687: LD_INT 4
52689: PUSH
52690: LD_INT 1
52692: PUSH
52693: EMPTY
52694: LIST
52695: LIST
52696: PUSH
52697: LD_INT 3
52699: PUSH
52700: LD_INT 1
52702: PUSH
52703: EMPTY
52704: LIST
52705: LIST
52706: PUSH
52707: LD_INT 2
52709: PUSH
52710: LD_INT 0
52712: PUSH
52713: EMPTY
52714: LIST
52715: LIST
52716: PUSH
52717: LD_INT 2
52719: PUSH
52720: LD_INT 1
52722: NEG
52723: PUSH
52724: EMPTY
52725: LIST
52726: LIST
52727: PUSH
52728: LD_INT 2
52730: PUSH
52731: LD_INT 2
52733: NEG
52734: PUSH
52735: EMPTY
52736: LIST
52737: LIST
52738: PUSH
52739: LD_INT 4
52741: PUSH
52742: LD_INT 2
52744: PUSH
52745: EMPTY
52746: LIST
52747: LIST
52748: PUSH
52749: LD_INT 4
52751: PUSH
52752: LD_INT 4
52754: PUSH
52755: EMPTY
52756: LIST
52757: LIST
52758: PUSH
52759: LD_INT 4
52761: PUSH
52762: LD_INT 3
52764: PUSH
52765: EMPTY
52766: LIST
52767: LIST
52768: PUSH
52769: LD_INT 5
52771: PUSH
52772: LD_INT 4
52774: PUSH
52775: EMPTY
52776: LIST
52777: LIST
52778: PUSH
52779: LD_INT 5
52781: PUSH
52782: LD_INT 5
52784: PUSH
52785: EMPTY
52786: LIST
52787: LIST
52788: PUSH
52789: LD_INT 4
52791: PUSH
52792: LD_INT 5
52794: PUSH
52795: EMPTY
52796: LIST
52797: LIST
52798: PUSH
52799: LD_INT 3
52801: PUSH
52802: LD_INT 4
52804: PUSH
52805: EMPTY
52806: LIST
52807: LIST
52808: PUSH
52809: LD_INT 3
52811: PUSH
52812: LD_INT 3
52814: PUSH
52815: EMPTY
52816: LIST
52817: LIST
52818: PUSH
52819: LD_INT 5
52821: PUSH
52822: LD_INT 3
52824: PUSH
52825: EMPTY
52826: LIST
52827: LIST
52828: PUSH
52829: LD_INT 3
52831: PUSH
52832: LD_INT 5
52834: PUSH
52835: EMPTY
52836: LIST
52837: LIST
52838: PUSH
52839: EMPTY
52840: LIST
52841: LIST
52842: LIST
52843: LIST
52844: LIST
52845: LIST
52846: LIST
52847: LIST
52848: LIST
52849: LIST
52850: LIST
52851: LIST
52852: LIST
52853: LIST
52854: LIST
52855: LIST
52856: LIST
52857: LIST
52858: LIST
52859: LIST
52860: LIST
52861: LIST
52862: LIST
52863: LIST
52864: LIST
52865: LIST
52866: LIST
52867: LIST
52868: LIST
52869: LIST
52870: LIST
52871: LIST
52872: LIST
52873: LIST
52874: LIST
52875: LIST
52876: LIST
52877: LIST
52878: LIST
52879: LIST
52880: LIST
52881: LIST
52882: LIST
52883: LIST
52884: LIST
52885: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
52886: LD_ADDR_VAR 0 33
52890: PUSH
52891: LD_INT 4
52893: NEG
52894: PUSH
52895: LD_INT 4
52897: NEG
52898: PUSH
52899: EMPTY
52900: LIST
52901: LIST
52902: PUSH
52903: LD_INT 4
52905: NEG
52906: PUSH
52907: LD_INT 5
52909: NEG
52910: PUSH
52911: EMPTY
52912: LIST
52913: LIST
52914: PUSH
52915: LD_INT 3
52917: NEG
52918: PUSH
52919: LD_INT 4
52921: NEG
52922: PUSH
52923: EMPTY
52924: LIST
52925: LIST
52926: PUSH
52927: LD_INT 3
52929: NEG
52930: PUSH
52931: LD_INT 3
52933: NEG
52934: PUSH
52935: EMPTY
52936: LIST
52937: LIST
52938: PUSH
52939: LD_INT 4
52941: NEG
52942: PUSH
52943: LD_INT 3
52945: NEG
52946: PUSH
52947: EMPTY
52948: LIST
52949: LIST
52950: PUSH
52951: LD_INT 5
52953: NEG
52954: PUSH
52955: LD_INT 4
52957: NEG
52958: PUSH
52959: EMPTY
52960: LIST
52961: LIST
52962: PUSH
52963: LD_INT 5
52965: NEG
52966: PUSH
52967: LD_INT 5
52969: NEG
52970: PUSH
52971: EMPTY
52972: LIST
52973: LIST
52974: PUSH
52975: LD_INT 3
52977: NEG
52978: PUSH
52979: LD_INT 5
52981: NEG
52982: PUSH
52983: EMPTY
52984: LIST
52985: LIST
52986: PUSH
52987: LD_INT 5
52989: NEG
52990: PUSH
52991: LD_INT 3
52993: NEG
52994: PUSH
52995: EMPTY
52996: LIST
52997: LIST
52998: PUSH
52999: LD_INT 0
53001: PUSH
53002: LD_INT 3
53004: NEG
53005: PUSH
53006: EMPTY
53007: LIST
53008: LIST
53009: PUSH
53010: LD_INT 0
53012: PUSH
53013: LD_INT 4
53015: NEG
53016: PUSH
53017: EMPTY
53018: LIST
53019: LIST
53020: PUSH
53021: LD_INT 1
53023: PUSH
53024: LD_INT 3
53026: NEG
53027: PUSH
53028: EMPTY
53029: LIST
53030: LIST
53031: PUSH
53032: LD_INT 1
53034: PUSH
53035: LD_INT 2
53037: NEG
53038: PUSH
53039: EMPTY
53040: LIST
53041: LIST
53042: PUSH
53043: LD_INT 0
53045: PUSH
53046: LD_INT 2
53048: NEG
53049: PUSH
53050: EMPTY
53051: LIST
53052: LIST
53053: PUSH
53054: LD_INT 1
53056: NEG
53057: PUSH
53058: LD_INT 3
53060: NEG
53061: PUSH
53062: EMPTY
53063: LIST
53064: LIST
53065: PUSH
53066: LD_INT 1
53068: NEG
53069: PUSH
53070: LD_INT 4
53072: NEG
53073: PUSH
53074: EMPTY
53075: LIST
53076: LIST
53077: PUSH
53078: LD_INT 2
53080: PUSH
53081: LD_INT 2
53083: NEG
53084: PUSH
53085: EMPTY
53086: LIST
53087: LIST
53088: PUSH
53089: LD_INT 2
53091: NEG
53092: PUSH
53093: LD_INT 4
53095: NEG
53096: PUSH
53097: EMPTY
53098: LIST
53099: LIST
53100: PUSH
53101: LD_INT 4
53103: PUSH
53104: LD_INT 0
53106: PUSH
53107: EMPTY
53108: LIST
53109: LIST
53110: PUSH
53111: LD_INT 4
53113: PUSH
53114: LD_INT 1
53116: NEG
53117: PUSH
53118: EMPTY
53119: LIST
53120: LIST
53121: PUSH
53122: LD_INT 5
53124: PUSH
53125: LD_INT 0
53127: PUSH
53128: EMPTY
53129: LIST
53130: LIST
53131: PUSH
53132: LD_INT 5
53134: PUSH
53135: LD_INT 1
53137: PUSH
53138: EMPTY
53139: LIST
53140: LIST
53141: PUSH
53142: LD_INT 4
53144: PUSH
53145: LD_INT 1
53147: PUSH
53148: EMPTY
53149: LIST
53150: LIST
53151: PUSH
53152: LD_INT 3
53154: PUSH
53155: LD_INT 0
53157: PUSH
53158: EMPTY
53159: LIST
53160: LIST
53161: PUSH
53162: LD_INT 3
53164: PUSH
53165: LD_INT 1
53167: NEG
53168: PUSH
53169: EMPTY
53170: LIST
53171: LIST
53172: PUSH
53173: LD_INT 3
53175: PUSH
53176: LD_INT 2
53178: NEG
53179: PUSH
53180: EMPTY
53181: LIST
53182: LIST
53183: PUSH
53184: LD_INT 5
53186: PUSH
53187: LD_INT 2
53189: PUSH
53190: EMPTY
53191: LIST
53192: LIST
53193: PUSH
53194: LD_INT 3
53196: PUSH
53197: LD_INT 3
53199: PUSH
53200: EMPTY
53201: LIST
53202: LIST
53203: PUSH
53204: LD_INT 3
53206: PUSH
53207: LD_INT 2
53209: PUSH
53210: EMPTY
53211: LIST
53212: LIST
53213: PUSH
53214: LD_INT 4
53216: PUSH
53217: LD_INT 3
53219: PUSH
53220: EMPTY
53221: LIST
53222: LIST
53223: PUSH
53224: LD_INT 4
53226: PUSH
53227: LD_INT 4
53229: PUSH
53230: EMPTY
53231: LIST
53232: LIST
53233: PUSH
53234: LD_INT 3
53236: PUSH
53237: LD_INT 4
53239: PUSH
53240: EMPTY
53241: LIST
53242: LIST
53243: PUSH
53244: LD_INT 2
53246: PUSH
53247: LD_INT 3
53249: PUSH
53250: EMPTY
53251: LIST
53252: LIST
53253: PUSH
53254: LD_INT 2
53256: PUSH
53257: LD_INT 2
53259: PUSH
53260: EMPTY
53261: LIST
53262: LIST
53263: PUSH
53264: LD_INT 4
53266: PUSH
53267: LD_INT 2
53269: PUSH
53270: EMPTY
53271: LIST
53272: LIST
53273: PUSH
53274: LD_INT 2
53276: PUSH
53277: LD_INT 4
53279: PUSH
53280: EMPTY
53281: LIST
53282: LIST
53283: PUSH
53284: LD_INT 0
53286: PUSH
53287: LD_INT 4
53289: PUSH
53290: EMPTY
53291: LIST
53292: LIST
53293: PUSH
53294: LD_INT 0
53296: PUSH
53297: LD_INT 3
53299: PUSH
53300: EMPTY
53301: LIST
53302: LIST
53303: PUSH
53304: LD_INT 1
53306: PUSH
53307: LD_INT 4
53309: PUSH
53310: EMPTY
53311: LIST
53312: LIST
53313: PUSH
53314: LD_INT 1
53316: PUSH
53317: LD_INT 5
53319: PUSH
53320: EMPTY
53321: LIST
53322: LIST
53323: PUSH
53324: LD_INT 0
53326: PUSH
53327: LD_INT 5
53329: PUSH
53330: EMPTY
53331: LIST
53332: LIST
53333: PUSH
53334: LD_INT 1
53336: NEG
53337: PUSH
53338: LD_INT 4
53340: PUSH
53341: EMPTY
53342: LIST
53343: LIST
53344: PUSH
53345: LD_INT 1
53347: NEG
53348: PUSH
53349: LD_INT 3
53351: PUSH
53352: EMPTY
53353: LIST
53354: LIST
53355: PUSH
53356: LD_INT 2
53358: PUSH
53359: LD_INT 5
53361: PUSH
53362: EMPTY
53363: LIST
53364: LIST
53365: PUSH
53366: LD_INT 2
53368: NEG
53369: PUSH
53370: LD_INT 3
53372: PUSH
53373: EMPTY
53374: LIST
53375: LIST
53376: PUSH
53377: EMPTY
53378: LIST
53379: LIST
53380: LIST
53381: LIST
53382: LIST
53383: LIST
53384: LIST
53385: LIST
53386: LIST
53387: LIST
53388: LIST
53389: LIST
53390: LIST
53391: LIST
53392: LIST
53393: LIST
53394: LIST
53395: LIST
53396: LIST
53397: LIST
53398: LIST
53399: LIST
53400: LIST
53401: LIST
53402: LIST
53403: LIST
53404: LIST
53405: LIST
53406: LIST
53407: LIST
53408: LIST
53409: LIST
53410: LIST
53411: LIST
53412: LIST
53413: LIST
53414: LIST
53415: LIST
53416: LIST
53417: LIST
53418: LIST
53419: LIST
53420: LIST
53421: LIST
53422: LIST
53423: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
53424: LD_ADDR_VAR 0 34
53428: PUSH
53429: LD_INT 0
53431: PUSH
53432: LD_INT 4
53434: NEG
53435: PUSH
53436: EMPTY
53437: LIST
53438: LIST
53439: PUSH
53440: LD_INT 0
53442: PUSH
53443: LD_INT 5
53445: NEG
53446: PUSH
53447: EMPTY
53448: LIST
53449: LIST
53450: PUSH
53451: LD_INT 1
53453: PUSH
53454: LD_INT 4
53456: NEG
53457: PUSH
53458: EMPTY
53459: LIST
53460: LIST
53461: PUSH
53462: LD_INT 1
53464: PUSH
53465: LD_INT 3
53467: NEG
53468: PUSH
53469: EMPTY
53470: LIST
53471: LIST
53472: PUSH
53473: LD_INT 0
53475: PUSH
53476: LD_INT 3
53478: NEG
53479: PUSH
53480: EMPTY
53481: LIST
53482: LIST
53483: PUSH
53484: LD_INT 1
53486: NEG
53487: PUSH
53488: LD_INT 4
53490: NEG
53491: PUSH
53492: EMPTY
53493: LIST
53494: LIST
53495: PUSH
53496: LD_INT 1
53498: NEG
53499: PUSH
53500: LD_INT 5
53502: NEG
53503: PUSH
53504: EMPTY
53505: LIST
53506: LIST
53507: PUSH
53508: LD_INT 2
53510: PUSH
53511: LD_INT 3
53513: NEG
53514: PUSH
53515: EMPTY
53516: LIST
53517: LIST
53518: PUSH
53519: LD_INT 2
53521: NEG
53522: PUSH
53523: LD_INT 5
53525: NEG
53526: PUSH
53527: EMPTY
53528: LIST
53529: LIST
53530: PUSH
53531: LD_INT 3
53533: PUSH
53534: LD_INT 0
53536: PUSH
53537: EMPTY
53538: LIST
53539: LIST
53540: PUSH
53541: LD_INT 3
53543: PUSH
53544: LD_INT 1
53546: NEG
53547: PUSH
53548: EMPTY
53549: LIST
53550: LIST
53551: PUSH
53552: LD_INT 4
53554: PUSH
53555: LD_INT 0
53557: PUSH
53558: EMPTY
53559: LIST
53560: LIST
53561: PUSH
53562: LD_INT 4
53564: PUSH
53565: LD_INT 1
53567: PUSH
53568: EMPTY
53569: LIST
53570: LIST
53571: PUSH
53572: LD_INT 3
53574: PUSH
53575: LD_INT 1
53577: PUSH
53578: EMPTY
53579: LIST
53580: LIST
53581: PUSH
53582: LD_INT 2
53584: PUSH
53585: LD_INT 0
53587: PUSH
53588: EMPTY
53589: LIST
53590: LIST
53591: PUSH
53592: LD_INT 2
53594: PUSH
53595: LD_INT 1
53597: NEG
53598: PUSH
53599: EMPTY
53600: LIST
53601: LIST
53602: PUSH
53603: LD_INT 2
53605: PUSH
53606: LD_INT 2
53608: NEG
53609: PUSH
53610: EMPTY
53611: LIST
53612: LIST
53613: PUSH
53614: LD_INT 4
53616: PUSH
53617: LD_INT 2
53619: PUSH
53620: EMPTY
53621: LIST
53622: LIST
53623: PUSH
53624: LD_INT 4
53626: PUSH
53627: LD_INT 4
53629: PUSH
53630: EMPTY
53631: LIST
53632: LIST
53633: PUSH
53634: LD_INT 4
53636: PUSH
53637: LD_INT 3
53639: PUSH
53640: EMPTY
53641: LIST
53642: LIST
53643: PUSH
53644: LD_INT 5
53646: PUSH
53647: LD_INT 4
53649: PUSH
53650: EMPTY
53651: LIST
53652: LIST
53653: PUSH
53654: LD_INT 5
53656: PUSH
53657: LD_INT 5
53659: PUSH
53660: EMPTY
53661: LIST
53662: LIST
53663: PUSH
53664: LD_INT 4
53666: PUSH
53667: LD_INT 5
53669: PUSH
53670: EMPTY
53671: LIST
53672: LIST
53673: PUSH
53674: LD_INT 3
53676: PUSH
53677: LD_INT 4
53679: PUSH
53680: EMPTY
53681: LIST
53682: LIST
53683: PUSH
53684: LD_INT 3
53686: PUSH
53687: LD_INT 3
53689: PUSH
53690: EMPTY
53691: LIST
53692: LIST
53693: PUSH
53694: LD_INT 5
53696: PUSH
53697: LD_INT 3
53699: PUSH
53700: EMPTY
53701: LIST
53702: LIST
53703: PUSH
53704: LD_INT 3
53706: PUSH
53707: LD_INT 5
53709: PUSH
53710: EMPTY
53711: LIST
53712: LIST
53713: PUSH
53714: LD_INT 0
53716: PUSH
53717: LD_INT 3
53719: PUSH
53720: EMPTY
53721: LIST
53722: LIST
53723: PUSH
53724: LD_INT 0
53726: PUSH
53727: LD_INT 2
53729: PUSH
53730: EMPTY
53731: LIST
53732: LIST
53733: PUSH
53734: LD_INT 1
53736: PUSH
53737: LD_INT 3
53739: PUSH
53740: EMPTY
53741: LIST
53742: LIST
53743: PUSH
53744: LD_INT 1
53746: PUSH
53747: LD_INT 4
53749: PUSH
53750: EMPTY
53751: LIST
53752: LIST
53753: PUSH
53754: LD_INT 0
53756: PUSH
53757: LD_INT 4
53759: PUSH
53760: EMPTY
53761: LIST
53762: LIST
53763: PUSH
53764: LD_INT 1
53766: NEG
53767: PUSH
53768: LD_INT 3
53770: PUSH
53771: EMPTY
53772: LIST
53773: LIST
53774: PUSH
53775: LD_INT 1
53777: NEG
53778: PUSH
53779: LD_INT 2
53781: PUSH
53782: EMPTY
53783: LIST
53784: LIST
53785: PUSH
53786: LD_INT 2
53788: PUSH
53789: LD_INT 4
53791: PUSH
53792: EMPTY
53793: LIST
53794: LIST
53795: PUSH
53796: LD_INT 2
53798: NEG
53799: PUSH
53800: LD_INT 2
53802: PUSH
53803: EMPTY
53804: LIST
53805: LIST
53806: PUSH
53807: LD_INT 4
53809: NEG
53810: PUSH
53811: LD_INT 0
53813: PUSH
53814: EMPTY
53815: LIST
53816: LIST
53817: PUSH
53818: LD_INT 4
53820: NEG
53821: PUSH
53822: LD_INT 1
53824: NEG
53825: PUSH
53826: EMPTY
53827: LIST
53828: LIST
53829: PUSH
53830: LD_INT 3
53832: NEG
53833: PUSH
53834: LD_INT 0
53836: PUSH
53837: EMPTY
53838: LIST
53839: LIST
53840: PUSH
53841: LD_INT 3
53843: NEG
53844: PUSH
53845: LD_INT 1
53847: PUSH
53848: EMPTY
53849: LIST
53850: LIST
53851: PUSH
53852: LD_INT 4
53854: NEG
53855: PUSH
53856: LD_INT 1
53858: PUSH
53859: EMPTY
53860: LIST
53861: LIST
53862: PUSH
53863: LD_INT 5
53865: NEG
53866: PUSH
53867: LD_INT 0
53869: PUSH
53870: EMPTY
53871: LIST
53872: LIST
53873: PUSH
53874: LD_INT 5
53876: NEG
53877: PUSH
53878: LD_INT 1
53880: NEG
53881: PUSH
53882: EMPTY
53883: LIST
53884: LIST
53885: PUSH
53886: LD_INT 5
53888: NEG
53889: PUSH
53890: LD_INT 2
53892: NEG
53893: PUSH
53894: EMPTY
53895: LIST
53896: LIST
53897: PUSH
53898: LD_INT 3
53900: NEG
53901: PUSH
53902: LD_INT 2
53904: PUSH
53905: EMPTY
53906: LIST
53907: LIST
53908: PUSH
53909: EMPTY
53910: LIST
53911: LIST
53912: LIST
53913: LIST
53914: LIST
53915: LIST
53916: LIST
53917: LIST
53918: LIST
53919: LIST
53920: LIST
53921: LIST
53922: LIST
53923: LIST
53924: LIST
53925: LIST
53926: LIST
53927: LIST
53928: LIST
53929: LIST
53930: LIST
53931: LIST
53932: LIST
53933: LIST
53934: LIST
53935: LIST
53936: LIST
53937: LIST
53938: LIST
53939: LIST
53940: LIST
53941: LIST
53942: LIST
53943: LIST
53944: LIST
53945: LIST
53946: LIST
53947: LIST
53948: LIST
53949: LIST
53950: LIST
53951: LIST
53952: LIST
53953: LIST
53954: LIST
53955: ST_TO_ADDR
// end ; end ;
53956: GO 53959
53958: POP
// case btype of b_depot , b_warehouse :
53959: LD_VAR 0 1
53963: PUSH
53964: LD_INT 0
53966: DOUBLE
53967: EQUAL
53968: IFTRUE 53978
53970: LD_INT 1
53972: DOUBLE
53973: EQUAL
53974: IFTRUE 53978
53976: GO 54179
53978: POP
// case nation of nation_american :
53979: LD_VAR 0 5
53983: PUSH
53984: LD_INT 1
53986: DOUBLE
53987: EQUAL
53988: IFTRUE 53992
53990: GO 54048
53992: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
53993: LD_ADDR_VAR 0 9
53997: PUSH
53998: LD_VAR 0 11
54002: PUSH
54003: LD_VAR 0 12
54007: PUSH
54008: LD_VAR 0 13
54012: PUSH
54013: LD_VAR 0 14
54017: PUSH
54018: LD_VAR 0 15
54022: PUSH
54023: LD_VAR 0 16
54027: PUSH
54028: EMPTY
54029: LIST
54030: LIST
54031: LIST
54032: LIST
54033: LIST
54034: LIST
54035: PUSH
54036: LD_VAR 0 4
54040: PUSH
54041: LD_INT 1
54043: PLUS
54044: ARRAY
54045: ST_TO_ADDR
54046: GO 54177
54048: LD_INT 2
54050: DOUBLE
54051: EQUAL
54052: IFTRUE 54056
54054: GO 54112
54056: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
54057: LD_ADDR_VAR 0 9
54061: PUSH
54062: LD_VAR 0 17
54066: PUSH
54067: LD_VAR 0 18
54071: PUSH
54072: LD_VAR 0 19
54076: PUSH
54077: LD_VAR 0 20
54081: PUSH
54082: LD_VAR 0 21
54086: PUSH
54087: LD_VAR 0 22
54091: PUSH
54092: EMPTY
54093: LIST
54094: LIST
54095: LIST
54096: LIST
54097: LIST
54098: LIST
54099: PUSH
54100: LD_VAR 0 4
54104: PUSH
54105: LD_INT 1
54107: PLUS
54108: ARRAY
54109: ST_TO_ADDR
54110: GO 54177
54112: LD_INT 3
54114: DOUBLE
54115: EQUAL
54116: IFTRUE 54120
54118: GO 54176
54120: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
54121: LD_ADDR_VAR 0 9
54125: PUSH
54126: LD_VAR 0 23
54130: PUSH
54131: LD_VAR 0 24
54135: PUSH
54136: LD_VAR 0 25
54140: PUSH
54141: LD_VAR 0 26
54145: PUSH
54146: LD_VAR 0 27
54150: PUSH
54151: LD_VAR 0 28
54155: PUSH
54156: EMPTY
54157: LIST
54158: LIST
54159: LIST
54160: LIST
54161: LIST
54162: LIST
54163: PUSH
54164: LD_VAR 0 4
54168: PUSH
54169: LD_INT 1
54171: PLUS
54172: ARRAY
54173: ST_TO_ADDR
54174: GO 54177
54176: POP
54177: GO 54732
54179: LD_INT 2
54181: DOUBLE
54182: EQUAL
54183: IFTRUE 54193
54185: LD_INT 3
54187: DOUBLE
54188: EQUAL
54189: IFTRUE 54193
54191: GO 54249
54193: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
54194: LD_ADDR_VAR 0 9
54198: PUSH
54199: LD_VAR 0 29
54203: PUSH
54204: LD_VAR 0 30
54208: PUSH
54209: LD_VAR 0 31
54213: PUSH
54214: LD_VAR 0 32
54218: PUSH
54219: LD_VAR 0 33
54223: PUSH
54224: LD_VAR 0 34
54228: PUSH
54229: EMPTY
54230: LIST
54231: LIST
54232: LIST
54233: LIST
54234: LIST
54235: LIST
54236: PUSH
54237: LD_VAR 0 4
54241: PUSH
54242: LD_INT 1
54244: PLUS
54245: ARRAY
54246: ST_TO_ADDR
54247: GO 54732
54249: LD_INT 16
54251: DOUBLE
54252: EQUAL
54253: IFTRUE 54311
54255: LD_INT 17
54257: DOUBLE
54258: EQUAL
54259: IFTRUE 54311
54261: LD_INT 18
54263: DOUBLE
54264: EQUAL
54265: IFTRUE 54311
54267: LD_INT 19
54269: DOUBLE
54270: EQUAL
54271: IFTRUE 54311
54273: LD_INT 22
54275: DOUBLE
54276: EQUAL
54277: IFTRUE 54311
54279: LD_INT 20
54281: DOUBLE
54282: EQUAL
54283: IFTRUE 54311
54285: LD_INT 21
54287: DOUBLE
54288: EQUAL
54289: IFTRUE 54311
54291: LD_INT 23
54293: DOUBLE
54294: EQUAL
54295: IFTRUE 54311
54297: LD_INT 24
54299: DOUBLE
54300: EQUAL
54301: IFTRUE 54311
54303: LD_INT 25
54305: DOUBLE
54306: EQUAL
54307: IFTRUE 54311
54309: GO 54367
54311: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
54312: LD_ADDR_VAR 0 9
54316: PUSH
54317: LD_VAR 0 35
54321: PUSH
54322: LD_VAR 0 36
54326: PUSH
54327: LD_VAR 0 37
54331: PUSH
54332: LD_VAR 0 38
54336: PUSH
54337: LD_VAR 0 39
54341: PUSH
54342: LD_VAR 0 40
54346: PUSH
54347: EMPTY
54348: LIST
54349: LIST
54350: LIST
54351: LIST
54352: LIST
54353: LIST
54354: PUSH
54355: LD_VAR 0 4
54359: PUSH
54360: LD_INT 1
54362: PLUS
54363: ARRAY
54364: ST_TO_ADDR
54365: GO 54732
54367: LD_INT 6
54369: DOUBLE
54370: EQUAL
54371: IFTRUE 54423
54373: LD_INT 7
54375: DOUBLE
54376: EQUAL
54377: IFTRUE 54423
54379: LD_INT 8
54381: DOUBLE
54382: EQUAL
54383: IFTRUE 54423
54385: LD_INT 13
54387: DOUBLE
54388: EQUAL
54389: IFTRUE 54423
54391: LD_INT 12
54393: DOUBLE
54394: EQUAL
54395: IFTRUE 54423
54397: LD_INT 15
54399: DOUBLE
54400: EQUAL
54401: IFTRUE 54423
54403: LD_INT 11
54405: DOUBLE
54406: EQUAL
54407: IFTRUE 54423
54409: LD_INT 14
54411: DOUBLE
54412: EQUAL
54413: IFTRUE 54423
54415: LD_INT 10
54417: DOUBLE
54418: EQUAL
54419: IFTRUE 54423
54421: GO 54479
54423: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
54424: LD_ADDR_VAR 0 9
54428: PUSH
54429: LD_VAR 0 41
54433: PUSH
54434: LD_VAR 0 42
54438: PUSH
54439: LD_VAR 0 43
54443: PUSH
54444: LD_VAR 0 44
54448: PUSH
54449: LD_VAR 0 45
54453: PUSH
54454: LD_VAR 0 46
54458: PUSH
54459: EMPTY
54460: LIST
54461: LIST
54462: LIST
54463: LIST
54464: LIST
54465: LIST
54466: PUSH
54467: LD_VAR 0 4
54471: PUSH
54472: LD_INT 1
54474: PLUS
54475: ARRAY
54476: ST_TO_ADDR
54477: GO 54732
54479: LD_INT 36
54481: DOUBLE
54482: EQUAL
54483: IFTRUE 54487
54485: GO 54543
54487: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
54488: LD_ADDR_VAR 0 9
54492: PUSH
54493: LD_VAR 0 47
54497: PUSH
54498: LD_VAR 0 48
54502: PUSH
54503: LD_VAR 0 49
54507: PUSH
54508: LD_VAR 0 50
54512: PUSH
54513: LD_VAR 0 51
54517: PUSH
54518: LD_VAR 0 52
54522: PUSH
54523: EMPTY
54524: LIST
54525: LIST
54526: LIST
54527: LIST
54528: LIST
54529: LIST
54530: PUSH
54531: LD_VAR 0 4
54535: PUSH
54536: LD_INT 1
54538: PLUS
54539: ARRAY
54540: ST_TO_ADDR
54541: GO 54732
54543: LD_INT 4
54545: DOUBLE
54546: EQUAL
54547: IFTRUE 54569
54549: LD_INT 5
54551: DOUBLE
54552: EQUAL
54553: IFTRUE 54569
54555: LD_INT 34
54557: DOUBLE
54558: EQUAL
54559: IFTRUE 54569
54561: LD_INT 37
54563: DOUBLE
54564: EQUAL
54565: IFTRUE 54569
54567: GO 54625
54569: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
54570: LD_ADDR_VAR 0 9
54574: PUSH
54575: LD_VAR 0 53
54579: PUSH
54580: LD_VAR 0 54
54584: PUSH
54585: LD_VAR 0 55
54589: PUSH
54590: LD_VAR 0 56
54594: PUSH
54595: LD_VAR 0 57
54599: PUSH
54600: LD_VAR 0 58
54604: PUSH
54605: EMPTY
54606: LIST
54607: LIST
54608: LIST
54609: LIST
54610: LIST
54611: LIST
54612: PUSH
54613: LD_VAR 0 4
54617: PUSH
54618: LD_INT 1
54620: PLUS
54621: ARRAY
54622: ST_TO_ADDR
54623: GO 54732
54625: LD_INT 31
54627: DOUBLE
54628: EQUAL
54629: IFTRUE 54675
54631: LD_INT 32
54633: DOUBLE
54634: EQUAL
54635: IFTRUE 54675
54637: LD_INT 33
54639: DOUBLE
54640: EQUAL
54641: IFTRUE 54675
54643: LD_INT 27
54645: DOUBLE
54646: EQUAL
54647: IFTRUE 54675
54649: LD_INT 26
54651: DOUBLE
54652: EQUAL
54653: IFTRUE 54675
54655: LD_INT 28
54657: DOUBLE
54658: EQUAL
54659: IFTRUE 54675
54661: LD_INT 29
54663: DOUBLE
54664: EQUAL
54665: IFTRUE 54675
54667: LD_INT 30
54669: DOUBLE
54670: EQUAL
54671: IFTRUE 54675
54673: GO 54731
54675: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
54676: LD_ADDR_VAR 0 9
54680: PUSH
54681: LD_VAR 0 59
54685: PUSH
54686: LD_VAR 0 60
54690: PUSH
54691: LD_VAR 0 61
54695: PUSH
54696: LD_VAR 0 62
54700: PUSH
54701: LD_VAR 0 63
54705: PUSH
54706: LD_VAR 0 64
54710: PUSH
54711: EMPTY
54712: LIST
54713: LIST
54714: LIST
54715: LIST
54716: LIST
54717: LIST
54718: PUSH
54719: LD_VAR 0 4
54723: PUSH
54724: LD_INT 1
54726: PLUS
54727: ARRAY
54728: ST_TO_ADDR
54729: GO 54732
54731: POP
// temp_list2 = [ ] ;
54732: LD_ADDR_VAR 0 10
54736: PUSH
54737: EMPTY
54738: ST_TO_ADDR
// for i in temp_list do
54739: LD_ADDR_VAR 0 8
54743: PUSH
54744: LD_VAR 0 9
54748: PUSH
54749: FOR_IN
54750: IFFALSE 54802
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
54752: LD_ADDR_VAR 0 10
54756: PUSH
54757: LD_VAR 0 10
54761: PUSH
54762: LD_VAR 0 8
54766: PUSH
54767: LD_INT 1
54769: ARRAY
54770: PUSH
54771: LD_VAR 0 2
54775: PLUS
54776: PUSH
54777: LD_VAR 0 8
54781: PUSH
54782: LD_INT 2
54784: ARRAY
54785: PUSH
54786: LD_VAR 0 3
54790: PLUS
54791: PUSH
54792: EMPTY
54793: LIST
54794: LIST
54795: PUSH
54796: EMPTY
54797: LIST
54798: ADD
54799: ST_TO_ADDR
54800: GO 54749
54802: POP
54803: POP
// result = temp_list2 ;
54804: LD_ADDR_VAR 0 7
54808: PUSH
54809: LD_VAR 0 10
54813: ST_TO_ADDR
// end ;
54814: LD_VAR 0 7
54818: RET
// export function EnemyInRange ( unit , dist ) ; begin
54819: LD_INT 0
54821: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
54822: LD_ADDR_VAR 0 3
54826: PUSH
54827: LD_VAR 0 1
54831: PPUSH
54832: CALL_OW 255
54836: PPUSH
54837: LD_VAR 0 1
54841: PPUSH
54842: CALL_OW 250
54846: PPUSH
54847: LD_VAR 0 1
54851: PPUSH
54852: CALL_OW 251
54856: PPUSH
54857: LD_VAR 0 2
54861: PPUSH
54862: CALL 28076 0 4
54866: PUSH
54867: LD_INT 4
54869: ARRAY
54870: ST_TO_ADDR
// end ;
54871: LD_VAR 0 3
54875: RET
// export function PlayerSeeMe ( unit ) ; begin
54876: LD_INT 0
54878: PPUSH
// result := See ( your_side , unit ) ;
54879: LD_ADDR_VAR 0 2
54883: PUSH
54884: LD_OWVAR 2
54888: PPUSH
54889: LD_VAR 0 1
54893: PPUSH
54894: CALL_OW 292
54898: ST_TO_ADDR
// end ;
54899: LD_VAR 0 2
54903: RET
// export function ReverseDir ( unit ) ; begin
54904: LD_INT 0
54906: PPUSH
// if not unit then
54907: LD_VAR 0 1
54911: NOT
54912: IFFALSE 54916
// exit ;
54914: GO 54939
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
54916: LD_ADDR_VAR 0 2
54920: PUSH
54921: LD_VAR 0 1
54925: PPUSH
54926: CALL_OW 254
54930: PUSH
54931: LD_INT 3
54933: PLUS
54934: PUSH
54935: LD_INT 6
54937: MOD
54938: ST_TO_ADDR
// end ;
54939: LD_VAR 0 2
54943: RET
// export function ReverseArray ( array ) ; var i ; begin
54944: LD_INT 0
54946: PPUSH
54947: PPUSH
// if not array then
54948: LD_VAR 0 1
54952: NOT
54953: IFFALSE 54957
// exit ;
54955: GO 55012
// result := [ ] ;
54957: LD_ADDR_VAR 0 2
54961: PUSH
54962: EMPTY
54963: ST_TO_ADDR
// for i := array downto 1 do
54964: LD_ADDR_VAR 0 3
54968: PUSH
54969: DOUBLE
54970: LD_VAR 0 1
54974: INC
54975: ST_TO_ADDR
54976: LD_INT 1
54978: PUSH
54979: FOR_DOWNTO
54980: IFFALSE 55010
// result := Join ( result , array [ i ] ) ;
54982: LD_ADDR_VAR 0 2
54986: PUSH
54987: LD_VAR 0 2
54991: PPUSH
54992: LD_VAR 0 1
54996: PUSH
54997: LD_VAR 0 3
55001: ARRAY
55002: PPUSH
55003: CALL 59854 0 2
55007: ST_TO_ADDR
55008: GO 54979
55010: POP
55011: POP
// end ;
55012: LD_VAR 0 2
55016: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
55017: LD_INT 0
55019: PPUSH
55020: PPUSH
55021: PPUSH
55022: PPUSH
55023: PPUSH
55024: PPUSH
// if not unit or not hexes then
55025: LD_VAR 0 1
55029: NOT
55030: IFTRUE 55039
55032: PUSH
55033: LD_VAR 0 2
55037: NOT
55038: OR
55039: IFFALSE 55043
// exit ;
55041: GO 55166
// dist := 9999 ;
55043: LD_ADDR_VAR 0 5
55047: PUSH
55048: LD_INT 9999
55050: ST_TO_ADDR
// for i = 1 to hexes do
55051: LD_ADDR_VAR 0 4
55055: PUSH
55056: DOUBLE
55057: LD_INT 1
55059: DEC
55060: ST_TO_ADDR
55061: LD_VAR 0 2
55065: PUSH
55066: FOR_TO
55067: IFFALSE 55154
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
55069: LD_ADDR_VAR 0 6
55073: PUSH
55074: LD_VAR 0 1
55078: PPUSH
55079: LD_VAR 0 2
55083: PUSH
55084: LD_VAR 0 4
55088: ARRAY
55089: PUSH
55090: LD_INT 1
55092: ARRAY
55093: PPUSH
55094: LD_VAR 0 2
55098: PUSH
55099: LD_VAR 0 4
55103: ARRAY
55104: PUSH
55105: LD_INT 2
55107: ARRAY
55108: PPUSH
55109: CALL_OW 297
55113: ST_TO_ADDR
// if tdist < dist then
55114: LD_VAR 0 6
55118: PUSH
55119: LD_VAR 0 5
55123: LESS
55124: IFFALSE 55152
// begin hex := hexes [ i ] ;
55126: LD_ADDR_VAR 0 8
55130: PUSH
55131: LD_VAR 0 2
55135: PUSH
55136: LD_VAR 0 4
55140: ARRAY
55141: ST_TO_ADDR
// dist := tdist ;
55142: LD_ADDR_VAR 0 5
55146: PUSH
55147: LD_VAR 0 6
55151: ST_TO_ADDR
// end ; end ;
55152: GO 55066
55154: POP
55155: POP
// result := hex ;
55156: LD_ADDR_VAR 0 3
55160: PUSH
55161: LD_VAR 0 8
55165: ST_TO_ADDR
// end ;
55166: LD_VAR 0 3
55170: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
55171: LD_INT 0
55173: PPUSH
55174: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
55175: LD_VAR 0 1
55179: NOT
55180: IFTRUE 55219
55182: PUSH
55183: LD_VAR 0 1
55187: PUSH
55188: LD_INT 21
55190: PUSH
55191: LD_INT 2
55193: PUSH
55194: EMPTY
55195: LIST
55196: LIST
55197: PUSH
55198: LD_INT 23
55200: PUSH
55201: LD_INT 2
55203: PUSH
55204: EMPTY
55205: LIST
55206: LIST
55207: PUSH
55208: EMPTY
55209: LIST
55210: LIST
55211: PPUSH
55212: CALL_OW 69
55216: IN
55217: NOT
55218: OR
55219: IFFALSE 55223
// exit ;
55221: GO 55270
// for i = 1 to 3 do
55223: LD_ADDR_VAR 0 3
55227: PUSH
55228: DOUBLE
55229: LD_INT 1
55231: DEC
55232: ST_TO_ADDR
55233: LD_INT 3
55235: PUSH
55236: FOR_TO
55237: IFFALSE 55268
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
55239: LD_VAR 0 1
55243: PPUSH
55244: CALL_OW 250
55248: PPUSH
55249: LD_VAR 0 1
55253: PPUSH
55254: CALL_OW 251
55258: PPUSH
55259: LD_INT 1
55261: PPUSH
55262: CALL_OW 453
55266: GO 55236
55268: POP
55269: POP
// end ;
55270: LD_VAR 0 2
55274: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
55275: LD_INT 0
55277: PPUSH
55278: PPUSH
55279: PPUSH
55280: PPUSH
55281: PPUSH
55282: PPUSH
// if not unit or not enemy_unit then
55283: LD_VAR 0 1
55287: NOT
55288: IFTRUE 55297
55290: PUSH
55291: LD_VAR 0 2
55295: NOT
55296: OR
55297: IFFALSE 55301
// exit ;
55299: GO 55772
// if GetLives ( i ) < 250 then
55301: LD_VAR 0 4
55305: PPUSH
55306: CALL_OW 256
55310: PUSH
55311: LD_INT 250
55313: LESS
55314: IFFALSE 55327
// begin ComAutodestruct ( i ) ;
55316: LD_VAR 0 4
55320: PPUSH
55321: CALL 55171 0 1
// exit ;
55325: GO 55772
// end ; x := GetX ( enemy_unit ) ;
55327: LD_ADDR_VAR 0 7
55331: PUSH
55332: LD_VAR 0 2
55336: PPUSH
55337: CALL_OW 250
55341: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
55342: LD_ADDR_VAR 0 8
55346: PUSH
55347: LD_VAR 0 2
55351: PPUSH
55352: CALL_OW 251
55356: ST_TO_ADDR
// if not x or not y then
55357: LD_VAR 0 7
55361: NOT
55362: IFTRUE 55371
55364: PUSH
55365: LD_VAR 0 8
55369: NOT
55370: OR
55371: IFFALSE 55375
// exit ;
55373: GO 55772
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
55375: LD_ADDR_VAR 0 6
55379: PUSH
55380: LD_VAR 0 7
55384: PPUSH
55385: LD_INT 0
55387: PPUSH
55388: LD_INT 4
55390: PPUSH
55391: CALL_OW 272
55395: PUSH
55396: LD_VAR 0 8
55400: PPUSH
55401: LD_INT 0
55403: PPUSH
55404: LD_INT 4
55406: PPUSH
55407: CALL_OW 273
55411: PUSH
55412: EMPTY
55413: LIST
55414: LIST
55415: PUSH
55416: LD_VAR 0 7
55420: PPUSH
55421: LD_INT 1
55423: PPUSH
55424: LD_INT 4
55426: PPUSH
55427: CALL_OW 272
55431: PUSH
55432: LD_VAR 0 8
55436: PPUSH
55437: LD_INT 1
55439: PPUSH
55440: LD_INT 4
55442: PPUSH
55443: CALL_OW 273
55447: PUSH
55448: EMPTY
55449: LIST
55450: LIST
55451: PUSH
55452: LD_VAR 0 7
55456: PPUSH
55457: LD_INT 2
55459: PPUSH
55460: LD_INT 4
55462: PPUSH
55463: CALL_OW 272
55467: PUSH
55468: LD_VAR 0 8
55472: PPUSH
55473: LD_INT 2
55475: PPUSH
55476: LD_INT 4
55478: PPUSH
55479: CALL_OW 273
55483: PUSH
55484: EMPTY
55485: LIST
55486: LIST
55487: PUSH
55488: LD_VAR 0 7
55492: PPUSH
55493: LD_INT 3
55495: PPUSH
55496: LD_INT 4
55498: PPUSH
55499: CALL_OW 272
55503: PUSH
55504: LD_VAR 0 8
55508: PPUSH
55509: LD_INT 3
55511: PPUSH
55512: LD_INT 4
55514: PPUSH
55515: CALL_OW 273
55519: PUSH
55520: EMPTY
55521: LIST
55522: LIST
55523: PUSH
55524: LD_VAR 0 7
55528: PPUSH
55529: LD_INT 4
55531: PPUSH
55532: LD_INT 4
55534: PPUSH
55535: CALL_OW 272
55539: PUSH
55540: LD_VAR 0 8
55544: PPUSH
55545: LD_INT 4
55547: PPUSH
55548: LD_INT 4
55550: PPUSH
55551: CALL_OW 273
55555: PUSH
55556: EMPTY
55557: LIST
55558: LIST
55559: PUSH
55560: LD_VAR 0 7
55564: PPUSH
55565: LD_INT 5
55567: PPUSH
55568: LD_INT 4
55570: PPUSH
55571: CALL_OW 272
55575: PUSH
55576: LD_VAR 0 8
55580: PPUSH
55581: LD_INT 5
55583: PPUSH
55584: LD_INT 4
55586: PPUSH
55587: CALL_OW 273
55591: PUSH
55592: EMPTY
55593: LIST
55594: LIST
55595: PUSH
55596: EMPTY
55597: LIST
55598: LIST
55599: LIST
55600: LIST
55601: LIST
55602: LIST
55603: ST_TO_ADDR
// for i = tmp downto 1 do
55604: LD_ADDR_VAR 0 4
55608: PUSH
55609: DOUBLE
55610: LD_VAR 0 6
55614: INC
55615: ST_TO_ADDR
55616: LD_INT 1
55618: PUSH
55619: FOR_DOWNTO
55620: IFFALSE 55723
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
55622: LD_VAR 0 6
55626: PUSH
55627: LD_VAR 0 4
55631: ARRAY
55632: PUSH
55633: LD_INT 1
55635: ARRAY
55636: PPUSH
55637: LD_VAR 0 6
55641: PUSH
55642: LD_VAR 0 4
55646: ARRAY
55647: PUSH
55648: LD_INT 2
55650: ARRAY
55651: PPUSH
55652: CALL_OW 488
55656: NOT
55657: IFTRUE 55699
55659: PUSH
55660: LD_VAR 0 6
55664: PUSH
55665: LD_VAR 0 4
55669: ARRAY
55670: PUSH
55671: LD_INT 1
55673: ARRAY
55674: PPUSH
55675: LD_VAR 0 6
55679: PUSH
55680: LD_VAR 0 4
55684: ARRAY
55685: PUSH
55686: LD_INT 2
55688: ARRAY
55689: PPUSH
55690: CALL_OW 428
55694: PUSH
55695: LD_INT 0
55697: NONEQUAL
55698: OR
55699: IFFALSE 55721
// tmp := Delete ( tmp , i ) ;
55701: LD_ADDR_VAR 0 6
55705: PUSH
55706: LD_VAR 0 6
55710: PPUSH
55711: LD_VAR 0 4
55715: PPUSH
55716: CALL_OW 3
55720: ST_TO_ADDR
55721: GO 55619
55723: POP
55724: POP
// j := GetClosestHex ( unit , tmp ) ;
55725: LD_ADDR_VAR 0 5
55729: PUSH
55730: LD_VAR 0 1
55734: PPUSH
55735: LD_VAR 0 6
55739: PPUSH
55740: CALL 55017 0 2
55744: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
55745: LD_VAR 0 1
55749: PPUSH
55750: LD_VAR 0 5
55754: PUSH
55755: LD_INT 1
55757: ARRAY
55758: PPUSH
55759: LD_VAR 0 5
55763: PUSH
55764: LD_INT 2
55766: ARRAY
55767: PPUSH
55768: CALL_OW 111
// end ;
55772: LD_VAR 0 3
55776: RET
// export function PrepareApemanSoldier ( ) ; begin
55777: LD_INT 0
55779: PPUSH
// uc_nation := 0 ;
55780: LD_ADDR_OWVAR 21
55784: PUSH
55785: LD_INT 0
55787: ST_TO_ADDR
// hc_sex := sex_male ;
55788: LD_ADDR_OWVAR 27
55792: PUSH
55793: LD_INT 1
55795: ST_TO_ADDR
// hc_name :=  ;
55796: LD_ADDR_OWVAR 26
55800: PUSH
55801: LD_STRING 
55803: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
55804: LD_ADDR_OWVAR 28
55808: PUSH
55809: LD_INT 15
55811: ST_TO_ADDR
// hc_gallery :=  ;
55812: LD_ADDR_OWVAR 33
55816: PUSH
55817: LD_STRING 
55819: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
55820: LD_ADDR_OWVAR 31
55824: PUSH
55825: LD_INT 0
55827: PPUSH
55828: LD_INT 3
55830: PPUSH
55831: CALL_OW 12
55835: PUSH
55836: LD_INT 0
55838: PPUSH
55839: LD_INT 3
55841: PPUSH
55842: CALL_OW 12
55846: PUSH
55847: LD_INT 0
55849: PUSH
55850: LD_INT 0
55852: PUSH
55853: EMPTY
55854: LIST
55855: LIST
55856: LIST
55857: LIST
55858: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
55859: LD_ADDR_OWVAR 29
55863: PUSH
55864: LD_INT 12
55866: PUSH
55867: LD_INT 12
55869: PUSH
55870: EMPTY
55871: LIST
55872: LIST
55873: ST_TO_ADDR
// end ;
55874: LD_VAR 0 1
55878: RET
// export function PrepareApemanEngineer ( ) ; begin
55879: LD_INT 0
55881: PPUSH
// uc_nation := 0 ;
55882: LD_ADDR_OWVAR 21
55886: PUSH
55887: LD_INT 0
55889: ST_TO_ADDR
// hc_sex := sex_male ;
55890: LD_ADDR_OWVAR 27
55894: PUSH
55895: LD_INT 1
55897: ST_TO_ADDR
// hc_name :=  ;
55898: LD_ADDR_OWVAR 26
55902: PUSH
55903: LD_STRING 
55905: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
55906: LD_ADDR_OWVAR 28
55910: PUSH
55911: LD_INT 16
55913: ST_TO_ADDR
// hc_gallery :=  ;
55914: LD_ADDR_OWVAR 33
55918: PUSH
55919: LD_STRING 
55921: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
55922: LD_ADDR_OWVAR 31
55926: PUSH
55927: LD_INT 0
55929: PPUSH
55930: LD_INT 3
55932: PPUSH
55933: CALL_OW 12
55937: PUSH
55938: LD_INT 0
55940: PPUSH
55941: LD_INT 3
55943: PPUSH
55944: CALL_OW 12
55948: PUSH
55949: LD_INT 0
55951: PUSH
55952: LD_INT 0
55954: PUSH
55955: EMPTY
55956: LIST
55957: LIST
55958: LIST
55959: LIST
55960: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
55961: LD_ADDR_OWVAR 29
55965: PUSH
55966: LD_INT 12
55968: PUSH
55969: LD_INT 12
55971: PUSH
55972: EMPTY
55973: LIST
55974: LIST
55975: ST_TO_ADDR
// end ;
55976: LD_VAR 0 1
55980: RET
// export function PrepareApeman ( agressivity ) ; begin
55981: LD_INT 0
55983: PPUSH
// uc_side := 0 ;
55984: LD_ADDR_OWVAR 20
55988: PUSH
55989: LD_INT 0
55991: ST_TO_ADDR
// uc_nation := 0 ;
55992: LD_ADDR_OWVAR 21
55996: PUSH
55997: LD_INT 0
55999: ST_TO_ADDR
// hc_sex := sex_male ;
56000: LD_ADDR_OWVAR 27
56004: PUSH
56005: LD_INT 1
56007: ST_TO_ADDR
// hc_class := class_apeman ;
56008: LD_ADDR_OWVAR 28
56012: PUSH
56013: LD_INT 12
56015: ST_TO_ADDR
// hc_gallery :=  ;
56016: LD_ADDR_OWVAR 33
56020: PUSH
56021: LD_STRING 
56023: ST_TO_ADDR
// hc_name :=  ;
56024: LD_ADDR_OWVAR 26
56028: PUSH
56029: LD_STRING 
56031: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
56032: LD_ADDR_OWVAR 29
56036: PUSH
56037: LD_INT 12
56039: PUSH
56040: LD_INT 12
56042: PUSH
56043: EMPTY
56044: LIST
56045: LIST
56046: ST_TO_ADDR
// if agressivity = 0 then
56047: LD_VAR 0 1
56051: PUSH
56052: LD_INT 0
56054: EQUAL
56055: IFFALSE 56067
// hc_agressivity := 0 else
56057: LD_ADDR_OWVAR 35
56061: PUSH
56062: LD_INT 0
56064: ST_TO_ADDR
56065: GO 56088
// hc_agressivity := rand ( - agressivity , agressivity ) ;
56067: LD_ADDR_OWVAR 35
56071: PUSH
56072: LD_VAR 0 1
56076: NEG
56077: PPUSH
56078: LD_VAR 0 1
56082: PPUSH
56083: CALL_OW 12
56087: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
56088: LD_ADDR_OWVAR 31
56092: PUSH
56093: LD_INT 0
56095: PPUSH
56096: LD_INT 3
56098: PPUSH
56099: CALL_OW 12
56103: PUSH
56104: LD_INT 0
56106: PPUSH
56107: LD_INT 3
56109: PPUSH
56110: CALL_OW 12
56114: PUSH
56115: LD_INT 0
56117: PUSH
56118: LD_INT 0
56120: PUSH
56121: EMPTY
56122: LIST
56123: LIST
56124: LIST
56125: LIST
56126: ST_TO_ADDR
// end ;
56127: LD_VAR 0 2
56131: RET
// export function PrepareTiger ( agressivity ) ; begin
56132: LD_INT 0
56134: PPUSH
// uc_side := 0 ;
56135: LD_ADDR_OWVAR 20
56139: PUSH
56140: LD_INT 0
56142: ST_TO_ADDR
// uc_nation := 0 ;
56143: LD_ADDR_OWVAR 21
56147: PUSH
56148: LD_INT 0
56150: ST_TO_ADDR
// InitHc ;
56151: CALL_OW 19
// hc_class := class_tiger ;
56155: LD_ADDR_OWVAR 28
56159: PUSH
56160: LD_INT 14
56162: ST_TO_ADDR
// hc_gallery :=  ;
56163: LD_ADDR_OWVAR 33
56167: PUSH
56168: LD_STRING 
56170: ST_TO_ADDR
// hc_name :=  ;
56171: LD_ADDR_OWVAR 26
56175: PUSH
56176: LD_STRING 
56178: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
56179: LD_ADDR_OWVAR 35
56183: PUSH
56184: LD_VAR 0 1
56188: NEG
56189: PPUSH
56190: LD_VAR 0 1
56194: PPUSH
56195: CALL_OW 12
56199: ST_TO_ADDR
// end ;
56200: LD_VAR 0 2
56204: RET
// export function PrepareEnchidna ( ) ; begin
56205: LD_INT 0
56207: PPUSH
// uc_side := 0 ;
56208: LD_ADDR_OWVAR 20
56212: PUSH
56213: LD_INT 0
56215: ST_TO_ADDR
// uc_nation := 0 ;
56216: LD_ADDR_OWVAR 21
56220: PUSH
56221: LD_INT 0
56223: ST_TO_ADDR
// InitHc ;
56224: CALL_OW 19
// hc_class := class_baggie ;
56228: LD_ADDR_OWVAR 28
56232: PUSH
56233: LD_INT 13
56235: ST_TO_ADDR
// hc_gallery :=  ;
56236: LD_ADDR_OWVAR 33
56240: PUSH
56241: LD_STRING 
56243: ST_TO_ADDR
// hc_name :=  ;
56244: LD_ADDR_OWVAR 26
56248: PUSH
56249: LD_STRING 
56251: ST_TO_ADDR
// end ;
56252: LD_VAR 0 1
56256: RET
// export function PrepareFrog ( ) ; begin
56257: LD_INT 0
56259: PPUSH
// uc_side := 0 ;
56260: LD_ADDR_OWVAR 20
56264: PUSH
56265: LD_INT 0
56267: ST_TO_ADDR
// uc_nation := 0 ;
56268: LD_ADDR_OWVAR 21
56272: PUSH
56273: LD_INT 0
56275: ST_TO_ADDR
// InitHc ;
56276: CALL_OW 19
// hc_class := class_frog ;
56280: LD_ADDR_OWVAR 28
56284: PUSH
56285: LD_INT 19
56287: ST_TO_ADDR
// hc_gallery :=  ;
56288: LD_ADDR_OWVAR 33
56292: PUSH
56293: LD_STRING 
56295: ST_TO_ADDR
// hc_name :=  ;
56296: LD_ADDR_OWVAR 26
56300: PUSH
56301: LD_STRING 
56303: ST_TO_ADDR
// end ;
56304: LD_VAR 0 1
56308: RET
// export function PrepareFish ( ) ; begin
56309: LD_INT 0
56311: PPUSH
// uc_side := 0 ;
56312: LD_ADDR_OWVAR 20
56316: PUSH
56317: LD_INT 0
56319: ST_TO_ADDR
// uc_nation := 0 ;
56320: LD_ADDR_OWVAR 21
56324: PUSH
56325: LD_INT 0
56327: ST_TO_ADDR
// InitHc ;
56328: CALL_OW 19
// hc_class := class_fish ;
56332: LD_ADDR_OWVAR 28
56336: PUSH
56337: LD_INT 20
56339: ST_TO_ADDR
// hc_gallery :=  ;
56340: LD_ADDR_OWVAR 33
56344: PUSH
56345: LD_STRING 
56347: ST_TO_ADDR
// hc_name :=  ;
56348: LD_ADDR_OWVAR 26
56352: PUSH
56353: LD_STRING 
56355: ST_TO_ADDR
// end ;
56356: LD_VAR 0 1
56360: RET
// export function PrepareBird ( ) ; begin
56361: LD_INT 0
56363: PPUSH
// uc_side := 0 ;
56364: LD_ADDR_OWVAR 20
56368: PUSH
56369: LD_INT 0
56371: ST_TO_ADDR
// uc_nation := 0 ;
56372: LD_ADDR_OWVAR 21
56376: PUSH
56377: LD_INT 0
56379: ST_TO_ADDR
// InitHc ;
56380: CALL_OW 19
// hc_class := class_phororhacos ;
56384: LD_ADDR_OWVAR 28
56388: PUSH
56389: LD_INT 18
56391: ST_TO_ADDR
// hc_gallery :=  ;
56392: LD_ADDR_OWVAR 33
56396: PUSH
56397: LD_STRING 
56399: ST_TO_ADDR
// hc_name :=  ;
56400: LD_ADDR_OWVAR 26
56404: PUSH
56405: LD_STRING 
56407: ST_TO_ADDR
// end ;
56408: LD_VAR 0 1
56412: RET
// export function PrepareHorse ( ) ; begin
56413: LD_INT 0
56415: PPUSH
// uc_side := 0 ;
56416: LD_ADDR_OWVAR 20
56420: PUSH
56421: LD_INT 0
56423: ST_TO_ADDR
// uc_nation := 0 ;
56424: LD_ADDR_OWVAR 21
56428: PUSH
56429: LD_INT 0
56431: ST_TO_ADDR
// InitHc ;
56432: CALL_OW 19
// hc_class := class_horse ;
56436: LD_ADDR_OWVAR 28
56440: PUSH
56441: LD_INT 21
56443: ST_TO_ADDR
// hc_gallery :=  ;
56444: LD_ADDR_OWVAR 33
56448: PUSH
56449: LD_STRING 
56451: ST_TO_ADDR
// hc_name :=  ;
56452: LD_ADDR_OWVAR 26
56456: PUSH
56457: LD_STRING 
56459: ST_TO_ADDR
// end ;
56460: LD_VAR 0 1
56464: RET
// export function PrepareMastodont ( ) ; begin
56465: LD_INT 0
56467: PPUSH
// uc_side := 0 ;
56468: LD_ADDR_OWVAR 20
56472: PUSH
56473: LD_INT 0
56475: ST_TO_ADDR
// uc_nation := 0 ;
56476: LD_ADDR_OWVAR 21
56480: PUSH
56481: LD_INT 0
56483: ST_TO_ADDR
// vc_chassis := class_mastodont ;
56484: LD_ADDR_OWVAR 37
56488: PUSH
56489: LD_INT 31
56491: ST_TO_ADDR
// vc_control := control_rider ;
56492: LD_ADDR_OWVAR 38
56496: PUSH
56497: LD_INT 4
56499: ST_TO_ADDR
// end ;
56500: LD_VAR 0 1
56504: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
56505: LD_INT 0
56507: PPUSH
56508: PPUSH
56509: PPUSH
// uc_side = 0 ;
56510: LD_ADDR_OWVAR 20
56514: PUSH
56515: LD_INT 0
56517: ST_TO_ADDR
// uc_nation = 0 ;
56518: LD_ADDR_OWVAR 21
56522: PUSH
56523: LD_INT 0
56525: ST_TO_ADDR
// InitHc_All ( ) ;
56526: CALL_OW 584
// InitVc ;
56530: CALL_OW 20
// if mastodonts then
56534: LD_VAR 0 6
56538: IFFALSE 56605
// for i = 1 to mastodonts do
56540: LD_ADDR_VAR 0 11
56544: PUSH
56545: DOUBLE
56546: LD_INT 1
56548: DEC
56549: ST_TO_ADDR
56550: LD_VAR 0 6
56554: PUSH
56555: FOR_TO
56556: IFFALSE 56603
// begin vc_chassis := 31 ;
56558: LD_ADDR_OWVAR 37
56562: PUSH
56563: LD_INT 31
56565: ST_TO_ADDR
// vc_control := control_rider ;
56566: LD_ADDR_OWVAR 38
56570: PUSH
56571: LD_INT 4
56573: ST_TO_ADDR
// animal := CreateVehicle ;
56574: LD_ADDR_VAR 0 12
56578: PUSH
56579: CALL_OW 45
56583: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
56584: LD_VAR 0 12
56588: PPUSH
56589: LD_VAR 0 8
56593: PPUSH
56594: LD_INT 0
56596: PPUSH
56597: CALL 58747 0 3
// end ;
56601: GO 56555
56603: POP
56604: POP
// if horses then
56605: LD_VAR 0 5
56609: IFFALSE 56676
// for i = 1 to horses do
56611: LD_ADDR_VAR 0 11
56615: PUSH
56616: DOUBLE
56617: LD_INT 1
56619: DEC
56620: ST_TO_ADDR
56621: LD_VAR 0 5
56625: PUSH
56626: FOR_TO
56627: IFFALSE 56674
// begin hc_class := 21 ;
56629: LD_ADDR_OWVAR 28
56633: PUSH
56634: LD_INT 21
56636: ST_TO_ADDR
// hc_gallery :=  ;
56637: LD_ADDR_OWVAR 33
56641: PUSH
56642: LD_STRING 
56644: ST_TO_ADDR
// animal := CreateHuman ;
56645: LD_ADDR_VAR 0 12
56649: PUSH
56650: CALL_OW 44
56654: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
56655: LD_VAR 0 12
56659: PPUSH
56660: LD_VAR 0 8
56664: PPUSH
56665: LD_INT 0
56667: PPUSH
56668: CALL 58747 0 3
// end ;
56672: GO 56626
56674: POP
56675: POP
// if birds then
56676: LD_VAR 0 1
56680: IFFALSE 56747
// for i = 1 to birds do
56682: LD_ADDR_VAR 0 11
56686: PUSH
56687: DOUBLE
56688: LD_INT 1
56690: DEC
56691: ST_TO_ADDR
56692: LD_VAR 0 1
56696: PUSH
56697: FOR_TO
56698: IFFALSE 56745
// begin hc_class := 18 ;
56700: LD_ADDR_OWVAR 28
56704: PUSH
56705: LD_INT 18
56707: ST_TO_ADDR
// hc_gallery =  ;
56708: LD_ADDR_OWVAR 33
56712: PUSH
56713: LD_STRING 
56715: ST_TO_ADDR
// animal := CreateHuman ;
56716: LD_ADDR_VAR 0 12
56720: PUSH
56721: CALL_OW 44
56725: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
56726: LD_VAR 0 12
56730: PPUSH
56731: LD_VAR 0 8
56735: PPUSH
56736: LD_INT 0
56738: PPUSH
56739: CALL 58747 0 3
// end ;
56743: GO 56697
56745: POP
56746: POP
// if tigers then
56747: LD_VAR 0 2
56751: IFFALSE 56835
// for i = 1 to tigers do
56753: LD_ADDR_VAR 0 11
56757: PUSH
56758: DOUBLE
56759: LD_INT 1
56761: DEC
56762: ST_TO_ADDR
56763: LD_VAR 0 2
56767: PUSH
56768: FOR_TO
56769: IFFALSE 56833
// begin hc_class = class_tiger ;
56771: LD_ADDR_OWVAR 28
56775: PUSH
56776: LD_INT 14
56778: ST_TO_ADDR
// hc_gallery =  ;
56779: LD_ADDR_OWVAR 33
56783: PUSH
56784: LD_STRING 
56786: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
56787: LD_ADDR_OWVAR 35
56791: PUSH
56792: LD_INT 7
56794: NEG
56795: PPUSH
56796: LD_INT 7
56798: PPUSH
56799: CALL_OW 12
56803: ST_TO_ADDR
// animal := CreateHuman ;
56804: LD_ADDR_VAR 0 12
56808: PUSH
56809: CALL_OW 44
56813: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
56814: LD_VAR 0 12
56818: PPUSH
56819: LD_VAR 0 8
56823: PPUSH
56824: LD_INT 0
56826: PPUSH
56827: CALL 58747 0 3
// end ;
56831: GO 56768
56833: POP
56834: POP
// if apemans then
56835: LD_VAR 0 3
56839: IFFALSE 56962
// for i = 1 to apemans do
56841: LD_ADDR_VAR 0 11
56845: PUSH
56846: DOUBLE
56847: LD_INT 1
56849: DEC
56850: ST_TO_ADDR
56851: LD_VAR 0 3
56855: PUSH
56856: FOR_TO
56857: IFFALSE 56960
// begin hc_class = class_apeman ;
56859: LD_ADDR_OWVAR 28
56863: PUSH
56864: LD_INT 12
56866: ST_TO_ADDR
// hc_gallery =  ;
56867: LD_ADDR_OWVAR 33
56871: PUSH
56872: LD_STRING 
56874: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
56875: LD_ADDR_OWVAR 35
56879: PUSH
56880: LD_INT 2
56882: NEG
56883: PPUSH
56884: LD_INT 2
56886: PPUSH
56887: CALL_OW 12
56891: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
56892: LD_ADDR_OWVAR 31
56896: PUSH
56897: LD_INT 1
56899: PPUSH
56900: LD_INT 3
56902: PPUSH
56903: CALL_OW 12
56907: PUSH
56908: LD_INT 1
56910: PPUSH
56911: LD_INT 3
56913: PPUSH
56914: CALL_OW 12
56918: PUSH
56919: LD_INT 0
56921: PUSH
56922: LD_INT 0
56924: PUSH
56925: EMPTY
56926: LIST
56927: LIST
56928: LIST
56929: LIST
56930: ST_TO_ADDR
// animal := CreateHuman ;
56931: LD_ADDR_VAR 0 12
56935: PUSH
56936: CALL_OW 44
56940: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
56941: LD_VAR 0 12
56945: PPUSH
56946: LD_VAR 0 8
56950: PPUSH
56951: LD_INT 0
56953: PPUSH
56954: CALL 58747 0 3
// end ;
56958: GO 56856
56960: POP
56961: POP
// if enchidnas then
56962: LD_VAR 0 4
56966: IFFALSE 57033
// for i = 1 to enchidnas do
56968: LD_ADDR_VAR 0 11
56972: PUSH
56973: DOUBLE
56974: LD_INT 1
56976: DEC
56977: ST_TO_ADDR
56978: LD_VAR 0 4
56982: PUSH
56983: FOR_TO
56984: IFFALSE 57031
// begin hc_class = 13 ;
56986: LD_ADDR_OWVAR 28
56990: PUSH
56991: LD_INT 13
56993: ST_TO_ADDR
// hc_gallery =  ;
56994: LD_ADDR_OWVAR 33
56998: PUSH
56999: LD_STRING 
57001: ST_TO_ADDR
// animal := CreateHuman ;
57002: LD_ADDR_VAR 0 12
57006: PUSH
57007: CALL_OW 44
57011: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
57012: LD_VAR 0 12
57016: PPUSH
57017: LD_VAR 0 8
57021: PPUSH
57022: LD_INT 0
57024: PPUSH
57025: CALL 58747 0 3
// end ;
57029: GO 56983
57031: POP
57032: POP
// if fishes then
57033: LD_VAR 0 7
57037: IFFALSE 57104
// for i = 1 to fishes do
57039: LD_ADDR_VAR 0 11
57043: PUSH
57044: DOUBLE
57045: LD_INT 1
57047: DEC
57048: ST_TO_ADDR
57049: LD_VAR 0 7
57053: PUSH
57054: FOR_TO
57055: IFFALSE 57102
// begin hc_class = 20 ;
57057: LD_ADDR_OWVAR 28
57061: PUSH
57062: LD_INT 20
57064: ST_TO_ADDR
// hc_gallery =  ;
57065: LD_ADDR_OWVAR 33
57069: PUSH
57070: LD_STRING 
57072: ST_TO_ADDR
// animal := CreateHuman ;
57073: LD_ADDR_VAR 0 12
57077: PUSH
57078: CALL_OW 44
57082: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
57083: LD_VAR 0 12
57087: PPUSH
57088: LD_VAR 0 9
57092: PPUSH
57093: LD_INT 0
57095: PPUSH
57096: CALL 58747 0 3
// end ;
57100: GO 57054
57102: POP
57103: POP
// end ;
57104: LD_VAR 0 10
57108: RET
// export function WantHeal ( sci , unit ) ; begin
57109: LD_INT 0
57111: PPUSH
// if GetTaskList ( sci ) > 0 then
57112: LD_VAR 0 1
57116: PPUSH
57117: CALL_OW 437
57121: PUSH
57122: LD_INT 0
57124: GREATER
57125: IFFALSE 57197
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
57127: LD_VAR 0 1
57131: PPUSH
57132: CALL_OW 437
57136: PUSH
57137: LD_INT 1
57139: ARRAY
57140: PUSH
57141: LD_INT 1
57143: ARRAY
57144: PUSH
57145: LD_STRING l
57147: EQUAL
57148: IFFALSE 57175
57150: PUSH
57151: LD_VAR 0 1
57155: PPUSH
57156: CALL_OW 437
57160: PUSH
57161: LD_INT 1
57163: ARRAY
57164: PUSH
57165: LD_INT 4
57167: ARRAY
57168: PUSH
57169: LD_VAR 0 2
57173: EQUAL
57174: AND
57175: IFFALSE 57187
// result := true else
57177: LD_ADDR_VAR 0 3
57181: PUSH
57182: LD_INT 1
57184: ST_TO_ADDR
57185: GO 57195
// result := false ;
57187: LD_ADDR_VAR 0 3
57191: PUSH
57192: LD_INT 0
57194: ST_TO_ADDR
// end else
57195: GO 57205
// result := false ;
57197: LD_ADDR_VAR 0 3
57201: PUSH
57202: LD_INT 0
57204: ST_TO_ADDR
// end ;
57205: LD_VAR 0 3
57209: RET
// export function HealTarget ( sci ) ; begin
57210: LD_INT 0
57212: PPUSH
// if not sci then
57213: LD_VAR 0 1
57217: NOT
57218: IFFALSE 57222
// exit ;
57220: GO 57287
// result := 0 ;
57222: LD_ADDR_VAR 0 2
57226: PUSH
57227: LD_INT 0
57229: ST_TO_ADDR
// if GetTaskList ( sci ) then
57230: LD_VAR 0 1
57234: PPUSH
57235: CALL_OW 437
57239: IFFALSE 57287
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
57241: LD_VAR 0 1
57245: PPUSH
57246: CALL_OW 437
57250: PUSH
57251: LD_INT 1
57253: ARRAY
57254: PUSH
57255: LD_INT 1
57257: ARRAY
57258: PUSH
57259: LD_STRING l
57261: EQUAL
57262: IFFALSE 57287
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
57264: LD_ADDR_VAR 0 2
57268: PUSH
57269: LD_VAR 0 1
57273: PPUSH
57274: CALL_OW 437
57278: PUSH
57279: LD_INT 1
57281: ARRAY
57282: PUSH
57283: LD_INT 4
57285: ARRAY
57286: ST_TO_ADDR
// end ;
57287: LD_VAR 0 2
57291: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
57292: LD_INT 0
57294: PPUSH
57295: PPUSH
57296: PPUSH
57297: PPUSH
// if not base_units then
57298: LD_VAR 0 1
57302: NOT
57303: IFFALSE 57307
// exit ;
57305: GO 57394
// result := false ;
57307: LD_ADDR_VAR 0 2
57311: PUSH
57312: LD_INT 0
57314: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
57315: LD_ADDR_VAR 0 5
57319: PUSH
57320: LD_VAR 0 1
57324: PPUSH
57325: LD_INT 21
57327: PUSH
57328: LD_INT 3
57330: PUSH
57331: EMPTY
57332: LIST
57333: LIST
57334: PPUSH
57335: CALL_OW 72
57339: ST_TO_ADDR
// if not tmp then
57340: LD_VAR 0 5
57344: NOT
57345: IFFALSE 57349
// exit ;
57347: GO 57394
// for i in tmp do
57349: LD_ADDR_VAR 0 3
57353: PUSH
57354: LD_VAR 0 5
57358: PUSH
57359: FOR_IN
57360: IFFALSE 57392
// begin result := EnemyInRange ( i , 22 ) ;
57362: LD_ADDR_VAR 0 2
57366: PUSH
57367: LD_VAR 0 3
57371: PPUSH
57372: LD_INT 22
57374: PPUSH
57375: CALL 54819 0 2
57379: ST_TO_ADDR
// if result then
57380: LD_VAR 0 2
57384: IFFALSE 57390
// exit ;
57386: POP
57387: POP
57388: GO 57394
// end ;
57390: GO 57359
57392: POP
57393: POP
// end ;
57394: LD_VAR 0 2
57398: RET
// export function FilterByTag ( units , tag ) ; begin
57399: LD_INT 0
57401: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
57402: LD_ADDR_VAR 0 3
57406: PUSH
57407: LD_VAR 0 1
57411: PPUSH
57412: LD_INT 120
57414: PUSH
57415: LD_VAR 0 2
57419: PUSH
57420: EMPTY
57421: LIST
57422: LIST
57423: PPUSH
57424: CALL_OW 72
57428: ST_TO_ADDR
// end ;
57429: LD_VAR 0 3
57433: RET
// export function IsDriver ( un ) ; begin
57434: LD_INT 0
57436: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
57437: LD_ADDR_VAR 0 2
57441: PUSH
57442: LD_VAR 0 1
57446: PUSH
57447: LD_INT 55
57449: PUSH
57450: EMPTY
57451: LIST
57452: PPUSH
57453: CALL_OW 69
57457: IN
57458: ST_TO_ADDR
// end ;
57459: LD_VAR 0 2
57463: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
57464: LD_INT 0
57466: PPUSH
57467: PPUSH
// list := [ ] ;
57468: LD_ADDR_VAR 0 5
57472: PUSH
57473: EMPTY
57474: ST_TO_ADDR
// case d of 0 :
57475: LD_VAR 0 3
57479: PUSH
57480: LD_INT 0
57482: DOUBLE
57483: EQUAL
57484: IFTRUE 57488
57486: GO 57621
57488: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
57489: LD_ADDR_VAR 0 5
57493: PUSH
57494: LD_VAR 0 1
57498: PUSH
57499: LD_INT 4
57501: MINUS
57502: PUSH
57503: LD_VAR 0 2
57507: PUSH
57508: LD_INT 4
57510: MINUS
57511: PUSH
57512: LD_INT 2
57514: PUSH
57515: EMPTY
57516: LIST
57517: LIST
57518: LIST
57519: PUSH
57520: LD_VAR 0 1
57524: PUSH
57525: LD_INT 3
57527: MINUS
57528: PUSH
57529: LD_VAR 0 2
57533: PUSH
57534: LD_INT 1
57536: PUSH
57537: EMPTY
57538: LIST
57539: LIST
57540: LIST
57541: PUSH
57542: LD_VAR 0 1
57546: PUSH
57547: LD_INT 4
57549: PLUS
57550: PUSH
57551: LD_VAR 0 2
57555: PUSH
57556: LD_INT 4
57558: PUSH
57559: EMPTY
57560: LIST
57561: LIST
57562: LIST
57563: PUSH
57564: LD_VAR 0 1
57568: PUSH
57569: LD_INT 3
57571: PLUS
57572: PUSH
57573: LD_VAR 0 2
57577: PUSH
57578: LD_INT 3
57580: PLUS
57581: PUSH
57582: LD_INT 5
57584: PUSH
57585: EMPTY
57586: LIST
57587: LIST
57588: LIST
57589: PUSH
57590: LD_VAR 0 1
57594: PUSH
57595: LD_VAR 0 2
57599: PUSH
57600: LD_INT 4
57602: PLUS
57603: PUSH
57604: LD_INT 0
57606: PUSH
57607: EMPTY
57608: LIST
57609: LIST
57610: LIST
57611: PUSH
57612: EMPTY
57613: LIST
57614: LIST
57615: LIST
57616: LIST
57617: LIST
57618: ST_TO_ADDR
// end ; 1 :
57619: GO 58319
57621: LD_INT 1
57623: DOUBLE
57624: EQUAL
57625: IFTRUE 57629
57627: GO 57762
57629: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
57630: LD_ADDR_VAR 0 5
57634: PUSH
57635: LD_VAR 0 1
57639: PUSH
57640: LD_VAR 0 2
57644: PUSH
57645: LD_INT 4
57647: MINUS
57648: PUSH
57649: LD_INT 3
57651: PUSH
57652: EMPTY
57653: LIST
57654: LIST
57655: LIST
57656: PUSH
57657: LD_VAR 0 1
57661: PUSH
57662: LD_INT 3
57664: MINUS
57665: PUSH
57666: LD_VAR 0 2
57670: PUSH
57671: LD_INT 3
57673: MINUS
57674: PUSH
57675: LD_INT 2
57677: PUSH
57678: EMPTY
57679: LIST
57680: LIST
57681: LIST
57682: PUSH
57683: LD_VAR 0 1
57687: PUSH
57688: LD_INT 4
57690: MINUS
57691: PUSH
57692: LD_VAR 0 2
57696: PUSH
57697: LD_INT 1
57699: PUSH
57700: EMPTY
57701: LIST
57702: LIST
57703: LIST
57704: PUSH
57705: LD_VAR 0 1
57709: PUSH
57710: LD_VAR 0 2
57714: PUSH
57715: LD_INT 3
57717: PLUS
57718: PUSH
57719: LD_INT 0
57721: PUSH
57722: EMPTY
57723: LIST
57724: LIST
57725: LIST
57726: PUSH
57727: LD_VAR 0 1
57731: PUSH
57732: LD_INT 4
57734: PLUS
57735: PUSH
57736: LD_VAR 0 2
57740: PUSH
57741: LD_INT 4
57743: PLUS
57744: PUSH
57745: LD_INT 5
57747: PUSH
57748: EMPTY
57749: LIST
57750: LIST
57751: LIST
57752: PUSH
57753: EMPTY
57754: LIST
57755: LIST
57756: LIST
57757: LIST
57758: LIST
57759: ST_TO_ADDR
// end ; 2 :
57760: GO 58319
57762: LD_INT 2
57764: DOUBLE
57765: EQUAL
57766: IFTRUE 57770
57768: GO 57899
57770: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
57771: LD_ADDR_VAR 0 5
57775: PUSH
57776: LD_VAR 0 1
57780: PUSH
57781: LD_VAR 0 2
57785: PUSH
57786: LD_INT 3
57788: MINUS
57789: PUSH
57790: LD_INT 3
57792: PUSH
57793: EMPTY
57794: LIST
57795: LIST
57796: LIST
57797: PUSH
57798: LD_VAR 0 1
57802: PUSH
57803: LD_INT 4
57805: PLUS
57806: PUSH
57807: LD_VAR 0 2
57811: PUSH
57812: LD_INT 4
57814: PUSH
57815: EMPTY
57816: LIST
57817: LIST
57818: LIST
57819: PUSH
57820: LD_VAR 0 1
57824: PUSH
57825: LD_VAR 0 2
57829: PUSH
57830: LD_INT 4
57832: PLUS
57833: PUSH
57834: LD_INT 0
57836: PUSH
57837: EMPTY
57838: LIST
57839: LIST
57840: LIST
57841: PUSH
57842: LD_VAR 0 1
57846: PUSH
57847: LD_INT 3
57849: MINUS
57850: PUSH
57851: LD_VAR 0 2
57855: PUSH
57856: LD_INT 1
57858: PUSH
57859: EMPTY
57860: LIST
57861: LIST
57862: LIST
57863: PUSH
57864: LD_VAR 0 1
57868: PUSH
57869: LD_INT 4
57871: MINUS
57872: PUSH
57873: LD_VAR 0 2
57877: PUSH
57878: LD_INT 4
57880: MINUS
57881: PUSH
57882: LD_INT 2
57884: PUSH
57885: EMPTY
57886: LIST
57887: LIST
57888: LIST
57889: PUSH
57890: EMPTY
57891: LIST
57892: LIST
57893: LIST
57894: LIST
57895: LIST
57896: ST_TO_ADDR
// end ; 3 :
57897: GO 58319
57899: LD_INT 3
57901: DOUBLE
57902: EQUAL
57903: IFTRUE 57907
57905: GO 58040
57907: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
57908: LD_ADDR_VAR 0 5
57912: PUSH
57913: LD_VAR 0 1
57917: PUSH
57918: LD_INT 3
57920: PLUS
57921: PUSH
57922: LD_VAR 0 2
57926: PUSH
57927: LD_INT 4
57929: PUSH
57930: EMPTY
57931: LIST
57932: LIST
57933: LIST
57934: PUSH
57935: LD_VAR 0 1
57939: PUSH
57940: LD_INT 4
57942: PLUS
57943: PUSH
57944: LD_VAR 0 2
57948: PUSH
57949: LD_INT 4
57951: PLUS
57952: PUSH
57953: LD_INT 5
57955: PUSH
57956: EMPTY
57957: LIST
57958: LIST
57959: LIST
57960: PUSH
57961: LD_VAR 0 1
57965: PUSH
57966: LD_INT 4
57968: MINUS
57969: PUSH
57970: LD_VAR 0 2
57974: PUSH
57975: LD_INT 1
57977: PUSH
57978: EMPTY
57979: LIST
57980: LIST
57981: LIST
57982: PUSH
57983: LD_VAR 0 1
57987: PUSH
57988: LD_VAR 0 2
57992: PUSH
57993: LD_INT 4
57995: MINUS
57996: PUSH
57997: LD_INT 3
57999: PUSH
58000: EMPTY
58001: LIST
58002: LIST
58003: LIST
58004: PUSH
58005: LD_VAR 0 1
58009: PUSH
58010: LD_INT 3
58012: MINUS
58013: PUSH
58014: LD_VAR 0 2
58018: PUSH
58019: LD_INT 3
58021: MINUS
58022: PUSH
58023: LD_INT 2
58025: PUSH
58026: EMPTY
58027: LIST
58028: LIST
58029: LIST
58030: PUSH
58031: EMPTY
58032: LIST
58033: LIST
58034: LIST
58035: LIST
58036: LIST
58037: ST_TO_ADDR
// end ; 4 :
58038: GO 58319
58040: LD_INT 4
58042: DOUBLE
58043: EQUAL
58044: IFTRUE 58048
58046: GO 58181
58048: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
58049: LD_ADDR_VAR 0 5
58053: PUSH
58054: LD_VAR 0 1
58058: PUSH
58059: LD_VAR 0 2
58063: PUSH
58064: LD_INT 4
58066: PLUS
58067: PUSH
58068: LD_INT 0
58070: PUSH
58071: EMPTY
58072: LIST
58073: LIST
58074: LIST
58075: PUSH
58076: LD_VAR 0 1
58080: PUSH
58081: LD_INT 3
58083: PLUS
58084: PUSH
58085: LD_VAR 0 2
58089: PUSH
58090: LD_INT 3
58092: PLUS
58093: PUSH
58094: LD_INT 5
58096: PUSH
58097: EMPTY
58098: LIST
58099: LIST
58100: LIST
58101: PUSH
58102: LD_VAR 0 1
58106: PUSH
58107: LD_INT 4
58109: PLUS
58110: PUSH
58111: LD_VAR 0 2
58115: PUSH
58116: LD_INT 4
58118: PUSH
58119: EMPTY
58120: LIST
58121: LIST
58122: LIST
58123: PUSH
58124: LD_VAR 0 1
58128: PUSH
58129: LD_VAR 0 2
58133: PUSH
58134: LD_INT 3
58136: MINUS
58137: PUSH
58138: LD_INT 3
58140: PUSH
58141: EMPTY
58142: LIST
58143: LIST
58144: LIST
58145: PUSH
58146: LD_VAR 0 1
58150: PUSH
58151: LD_INT 4
58153: MINUS
58154: PUSH
58155: LD_VAR 0 2
58159: PUSH
58160: LD_INT 4
58162: MINUS
58163: PUSH
58164: LD_INT 2
58166: PUSH
58167: EMPTY
58168: LIST
58169: LIST
58170: LIST
58171: PUSH
58172: EMPTY
58173: LIST
58174: LIST
58175: LIST
58176: LIST
58177: LIST
58178: ST_TO_ADDR
// end ; 5 :
58179: GO 58319
58181: LD_INT 5
58183: DOUBLE
58184: EQUAL
58185: IFTRUE 58189
58187: GO 58318
58189: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
58190: LD_ADDR_VAR 0 5
58194: PUSH
58195: LD_VAR 0 1
58199: PUSH
58200: LD_INT 4
58202: MINUS
58203: PUSH
58204: LD_VAR 0 2
58208: PUSH
58209: LD_INT 1
58211: PUSH
58212: EMPTY
58213: LIST
58214: LIST
58215: LIST
58216: PUSH
58217: LD_VAR 0 1
58221: PUSH
58222: LD_VAR 0 2
58226: PUSH
58227: LD_INT 4
58229: MINUS
58230: PUSH
58231: LD_INT 3
58233: PUSH
58234: EMPTY
58235: LIST
58236: LIST
58237: LIST
58238: PUSH
58239: LD_VAR 0 1
58243: PUSH
58244: LD_INT 4
58246: PLUS
58247: PUSH
58248: LD_VAR 0 2
58252: PUSH
58253: LD_INT 4
58255: PLUS
58256: PUSH
58257: LD_INT 5
58259: PUSH
58260: EMPTY
58261: LIST
58262: LIST
58263: LIST
58264: PUSH
58265: LD_VAR 0 1
58269: PUSH
58270: LD_INT 3
58272: PLUS
58273: PUSH
58274: LD_VAR 0 2
58278: PUSH
58279: LD_INT 4
58281: PUSH
58282: EMPTY
58283: LIST
58284: LIST
58285: LIST
58286: PUSH
58287: LD_VAR 0 1
58291: PUSH
58292: LD_VAR 0 2
58296: PUSH
58297: LD_INT 3
58299: PLUS
58300: PUSH
58301: LD_INT 0
58303: PUSH
58304: EMPTY
58305: LIST
58306: LIST
58307: LIST
58308: PUSH
58309: EMPTY
58310: LIST
58311: LIST
58312: LIST
58313: LIST
58314: LIST
58315: ST_TO_ADDR
// end ; end ;
58316: GO 58319
58318: POP
// result := list ;
58319: LD_ADDR_VAR 0 4
58323: PUSH
58324: LD_VAR 0 5
58328: ST_TO_ADDR
// end ;
58329: LD_VAR 0 4
58333: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
58334: LD_INT 0
58336: PPUSH
58337: PPUSH
58338: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
58339: LD_VAR 0 1
58343: NOT
58344: IFTRUE 58372
58346: PUSH
58347: LD_VAR 0 2
58351: PUSH
58352: LD_INT 1
58354: PUSH
58355: LD_INT 2
58357: PUSH
58358: LD_INT 3
58360: PUSH
58361: LD_INT 4
58363: PUSH
58364: EMPTY
58365: LIST
58366: LIST
58367: LIST
58368: LIST
58369: IN
58370: NOT
58371: OR
58372: IFFALSE 58376
// exit ;
58374: GO 58459
// tmp := [ ] ;
58376: LD_ADDR_VAR 0 5
58380: PUSH
58381: EMPTY
58382: ST_TO_ADDR
// for i in units do
58383: LD_ADDR_VAR 0 4
58387: PUSH
58388: LD_VAR 0 1
58392: PUSH
58393: FOR_IN
58394: IFFALSE 58428
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
58396: LD_ADDR_VAR 0 5
58400: PUSH
58401: LD_VAR 0 5
58405: PPUSH
58406: LD_VAR 0 4
58410: PPUSH
58411: LD_VAR 0 2
58415: PPUSH
58416: CALL_OW 259
58420: PPUSH
58421: CALL 59854 0 2
58425: ST_TO_ADDR
58426: GO 58393
58428: POP
58429: POP
// if not tmp then
58430: LD_VAR 0 5
58434: NOT
58435: IFFALSE 58439
// exit ;
58437: GO 58459
// result := SortListByListDesc ( units , tmp ) ;
58439: LD_ADDR_VAR 0 3
58443: PUSH
58444: LD_VAR 0 1
58448: PPUSH
58449: LD_VAR 0 5
58453: PPUSH
58454: CALL_OW 77
58458: ST_TO_ADDR
// end ;
58459: LD_VAR 0 3
58463: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
58464: LD_INT 0
58466: PPUSH
58467: PPUSH
58468: PPUSH
// result := false ;
58469: LD_ADDR_VAR 0 3
58473: PUSH
58474: LD_INT 0
58476: ST_TO_ADDR
// if not building then
58477: LD_VAR 0 2
58481: NOT
58482: IFFALSE 58486
// exit ;
58484: GO 58630
// x := GetX ( building ) ;
58486: LD_ADDR_VAR 0 4
58490: PUSH
58491: LD_VAR 0 2
58495: PPUSH
58496: CALL_OW 250
58500: ST_TO_ADDR
// y := GetY ( building ) ;
58501: LD_ADDR_VAR 0 5
58505: PUSH
58506: LD_VAR 0 2
58510: PPUSH
58511: CALL_OW 251
58515: ST_TO_ADDR
// if not x or not y then
58516: LD_VAR 0 4
58520: NOT
58521: IFTRUE 58530
58523: PUSH
58524: LD_VAR 0 5
58528: NOT
58529: OR
58530: IFFALSE 58534
// exit ;
58532: GO 58630
// if GetTaskList ( unit ) then
58534: LD_VAR 0 1
58538: PPUSH
58539: CALL_OW 437
58543: IFFALSE 58630
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
58545: LD_STRING e
58547: PUSH
58548: LD_VAR 0 1
58552: PPUSH
58553: CALL_OW 437
58557: PUSH
58558: LD_INT 1
58560: ARRAY
58561: PUSH
58562: LD_INT 1
58564: ARRAY
58565: EQUAL
58566: IFFALSE 58593
58568: PUSH
58569: LD_VAR 0 4
58573: PUSH
58574: LD_VAR 0 1
58578: PPUSH
58579: CALL_OW 437
58583: PUSH
58584: LD_INT 1
58586: ARRAY
58587: PUSH
58588: LD_INT 2
58590: ARRAY
58591: EQUAL
58592: AND
58593: IFFALSE 58620
58595: PUSH
58596: LD_VAR 0 5
58600: PUSH
58601: LD_VAR 0 1
58605: PPUSH
58606: CALL_OW 437
58610: PUSH
58611: LD_INT 1
58613: ARRAY
58614: PUSH
58615: LD_INT 3
58617: ARRAY
58618: EQUAL
58619: AND
58620: IFFALSE 58630
// result := true end ;
58622: LD_ADDR_VAR 0 3
58626: PUSH
58627: LD_INT 1
58629: ST_TO_ADDR
// end ;
58630: LD_VAR 0 3
58634: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
58635: LD_INT 0
58637: PPUSH
// result := false ;
58638: LD_ADDR_VAR 0 4
58642: PUSH
58643: LD_INT 0
58645: ST_TO_ADDR
// if GetTaskList ( unit ) then
58646: LD_VAR 0 1
58650: PPUSH
58651: CALL_OW 437
58655: IFFALSE 58742
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
58657: LD_STRING M
58659: PUSH
58660: LD_VAR 0 1
58664: PPUSH
58665: CALL_OW 437
58669: PUSH
58670: LD_INT 1
58672: ARRAY
58673: PUSH
58674: LD_INT 1
58676: ARRAY
58677: EQUAL
58678: IFFALSE 58705
58680: PUSH
58681: LD_VAR 0 2
58685: PUSH
58686: LD_VAR 0 1
58690: PPUSH
58691: CALL_OW 437
58695: PUSH
58696: LD_INT 1
58698: ARRAY
58699: PUSH
58700: LD_INT 2
58702: ARRAY
58703: EQUAL
58704: AND
58705: IFFALSE 58732
58707: PUSH
58708: LD_VAR 0 3
58712: PUSH
58713: LD_VAR 0 1
58717: PPUSH
58718: CALL_OW 437
58722: PUSH
58723: LD_INT 1
58725: ARRAY
58726: PUSH
58727: LD_INT 3
58729: ARRAY
58730: EQUAL
58731: AND
58732: IFFALSE 58742
// result := true ;
58734: LD_ADDR_VAR 0 4
58738: PUSH
58739: LD_INT 1
58741: ST_TO_ADDR
// end ; end ;
58742: LD_VAR 0 4
58746: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
58747: LD_INT 0
58749: PPUSH
58750: PPUSH
58751: PPUSH
58752: PPUSH
// if not unit or not area then
58753: LD_VAR 0 1
58757: NOT
58758: IFTRUE 58767
58760: PUSH
58761: LD_VAR 0 2
58765: NOT
58766: OR
58767: IFFALSE 58771
// exit ;
58769: GO 58947
// tmp := AreaToList ( area , i ) ;
58771: LD_ADDR_VAR 0 6
58775: PUSH
58776: LD_VAR 0 2
58780: PPUSH
58781: LD_VAR 0 5
58785: PPUSH
58786: CALL_OW 517
58790: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
58791: LD_ADDR_VAR 0 5
58795: PUSH
58796: DOUBLE
58797: LD_INT 1
58799: DEC
58800: ST_TO_ADDR
58801: LD_VAR 0 6
58805: PUSH
58806: LD_INT 1
58808: ARRAY
58809: PUSH
58810: FOR_TO
58811: IFFALSE 58945
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
58813: LD_ADDR_VAR 0 7
58817: PUSH
58818: LD_VAR 0 6
58822: PUSH
58823: LD_INT 1
58825: ARRAY
58826: PUSH
58827: LD_VAR 0 5
58831: ARRAY
58832: PUSH
58833: LD_VAR 0 6
58837: PUSH
58838: LD_INT 2
58840: ARRAY
58841: PUSH
58842: LD_VAR 0 5
58846: ARRAY
58847: PUSH
58848: EMPTY
58849: LIST
58850: LIST
58851: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
58852: LD_INT 92
58854: PUSH
58855: LD_VAR 0 7
58859: PUSH
58860: LD_INT 1
58862: ARRAY
58863: PUSH
58864: LD_VAR 0 7
58868: PUSH
58869: LD_INT 2
58871: ARRAY
58872: PUSH
58873: LD_INT 2
58875: PUSH
58876: EMPTY
58877: LIST
58878: LIST
58879: LIST
58880: LIST
58881: PPUSH
58882: CALL_OW 69
58886: PUSH
58887: LD_INT 0
58889: EQUAL
58890: IFFALSE 58943
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
58892: LD_VAR 0 1
58896: PPUSH
58897: LD_VAR 0 7
58901: PUSH
58902: LD_INT 1
58904: ARRAY
58905: PPUSH
58906: LD_VAR 0 7
58910: PUSH
58911: LD_INT 2
58913: ARRAY
58914: PPUSH
58915: LD_VAR 0 3
58919: PPUSH
58920: CALL_OW 48
// result := IsPlaced ( unit ) ;
58924: LD_ADDR_VAR 0 4
58928: PUSH
58929: LD_VAR 0 1
58933: PPUSH
58934: CALL_OW 305
58938: ST_TO_ADDR
// exit ;
58939: POP
58940: POP
58941: GO 58947
// end ; end ;
58943: GO 58810
58945: POP
58946: POP
// end ;
58947: LD_VAR 0 4
58951: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
58952: LD_INT 0
58954: PPUSH
58955: PPUSH
58956: PPUSH
// if not side or side > 8 then
58957: LD_VAR 0 1
58961: NOT
58962: IFTRUE 58974
58964: PUSH
58965: LD_VAR 0 1
58969: PUSH
58970: LD_INT 8
58972: GREATER
58973: OR
58974: IFFALSE 58978
// exit ;
58976: GO 59165
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
58978: LD_ADDR_VAR 0 4
58982: PUSH
58983: LD_INT 22
58985: PUSH
58986: LD_VAR 0 1
58990: PUSH
58991: EMPTY
58992: LIST
58993: LIST
58994: PUSH
58995: LD_INT 21
58997: PUSH
58998: LD_INT 3
59000: PUSH
59001: EMPTY
59002: LIST
59003: LIST
59004: PUSH
59005: EMPTY
59006: LIST
59007: LIST
59008: PPUSH
59009: CALL_OW 69
59013: ST_TO_ADDR
// if not tmp then
59014: LD_VAR 0 4
59018: NOT
59019: IFFALSE 59023
// exit ;
59021: GO 59165
// enable_addtolog := true ;
59023: LD_ADDR_OWVAR 81
59027: PUSH
59028: LD_INT 1
59030: ST_TO_ADDR
// AddToLog ( [ ) ;
59031: LD_STRING [
59033: PPUSH
59034: CALL_OW 561
// for i in tmp do
59038: LD_ADDR_VAR 0 3
59042: PUSH
59043: LD_VAR 0 4
59047: PUSH
59048: FOR_IN
59049: IFFALSE 59156
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
59051: LD_STRING [
59053: PUSH
59054: LD_VAR 0 3
59058: PPUSH
59059: CALL_OW 266
59063: STR
59064: PUSH
59065: LD_STRING , 
59067: STR
59068: PUSH
59069: LD_VAR 0 3
59073: PPUSH
59074: CALL_OW 250
59078: STR
59079: PUSH
59080: LD_STRING , 
59082: STR
59083: PUSH
59084: LD_VAR 0 3
59088: PPUSH
59089: CALL_OW 251
59093: STR
59094: PUSH
59095: LD_STRING , 
59097: STR
59098: PUSH
59099: LD_VAR 0 3
59103: PPUSH
59104: CALL_OW 254
59108: STR
59109: PUSH
59110: LD_STRING , 
59112: STR
59113: PUSH
59114: LD_VAR 0 3
59118: PPUSH
59119: LD_INT 1
59121: PPUSH
59122: CALL_OW 268
59126: STR
59127: PUSH
59128: LD_STRING , 
59130: STR
59131: PUSH
59132: LD_VAR 0 3
59136: PPUSH
59137: LD_INT 2
59139: PPUSH
59140: CALL_OW 268
59144: STR
59145: PUSH
59146: LD_STRING ],
59148: STR
59149: PPUSH
59150: CALL_OW 561
// end ;
59154: GO 59048
59156: POP
59157: POP
// AddToLog ( ]; ) ;
59158: LD_STRING ];
59160: PPUSH
59161: CALL_OW 561
// end ;
59165: LD_VAR 0 2
59169: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
59170: LD_INT 0
59172: PPUSH
59173: PPUSH
59174: PPUSH
59175: PPUSH
59176: PPUSH
// if not area or not rate or not max then
59177: LD_VAR 0 1
59181: NOT
59182: IFTRUE 59191
59184: PUSH
59185: LD_VAR 0 2
59189: NOT
59190: OR
59191: IFTRUE 59200
59193: PUSH
59194: LD_VAR 0 4
59198: NOT
59199: OR
59200: IFFALSE 59204
// exit ;
59202: GO 59393
// while 1 do
59204: LD_INT 1
59206: IFFALSE 59393
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
59208: LD_ADDR_VAR 0 9
59212: PUSH
59213: LD_VAR 0 1
59217: PPUSH
59218: LD_INT 1
59220: PPUSH
59221: CALL_OW 287
59225: PUSH
59226: LD_INT 10
59228: MUL
59229: ST_TO_ADDR
// r := rate / 10 ;
59230: LD_ADDR_VAR 0 7
59234: PUSH
59235: LD_VAR 0 2
59239: PUSH
59240: LD_INT 10
59242: DIVREAL
59243: ST_TO_ADDR
// time := 1 1$00 ;
59244: LD_ADDR_VAR 0 8
59248: PUSH
59249: LD_INT 2100
59251: ST_TO_ADDR
// if amount < min then
59252: LD_VAR 0 9
59256: PUSH
59257: LD_VAR 0 3
59261: LESS
59262: IFFALSE 59280
// r := r * 2 else
59264: LD_ADDR_VAR 0 7
59268: PUSH
59269: LD_VAR 0 7
59273: PUSH
59274: LD_INT 2
59276: MUL
59277: ST_TO_ADDR
59278: GO 59306
// if amount > max then
59280: LD_VAR 0 9
59284: PUSH
59285: LD_VAR 0 4
59289: GREATER
59290: IFFALSE 59306
// r := r / 2 ;
59292: LD_ADDR_VAR 0 7
59296: PUSH
59297: LD_VAR 0 7
59301: PUSH
59302: LD_INT 2
59304: DIVREAL
59305: ST_TO_ADDR
// time := time / r ;
59306: LD_ADDR_VAR 0 8
59310: PUSH
59311: LD_VAR 0 8
59315: PUSH
59316: LD_VAR 0 7
59320: DIVREAL
59321: ST_TO_ADDR
// if time < 0 then
59322: LD_VAR 0 8
59326: PUSH
59327: LD_INT 0
59329: LESS
59330: IFFALSE 59347
// time := time * - 1 ;
59332: LD_ADDR_VAR 0 8
59336: PUSH
59337: LD_VAR 0 8
59341: PUSH
59342: LD_INT 1
59344: NEG
59345: MUL
59346: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
59347: LD_VAR 0 8
59351: PUSH
59352: LD_INT 35
59354: PPUSH
59355: LD_INT 875
59357: PPUSH
59358: CALL_OW 12
59362: PLUS
59363: PPUSH
59364: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
59368: LD_INT 1
59370: PPUSH
59371: LD_INT 5
59373: PPUSH
59374: CALL_OW 12
59378: PPUSH
59379: LD_VAR 0 1
59383: PPUSH
59384: LD_INT 1
59386: PPUSH
59387: CALL_OW 55
// end ;
59391: GO 59204
// end ;
59393: LD_VAR 0 5
59397: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
59398: LD_INT 0
59400: PPUSH
59401: PPUSH
59402: PPUSH
59403: PPUSH
59404: PPUSH
59405: PPUSH
59406: PPUSH
59407: PPUSH
// if not turrets or not factories then
59408: LD_VAR 0 1
59412: NOT
59413: IFTRUE 59422
59415: PUSH
59416: LD_VAR 0 2
59420: NOT
59421: OR
59422: IFFALSE 59426
// exit ;
59424: GO 59733
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
59426: LD_ADDR_VAR 0 10
59430: PUSH
59431: LD_INT 5
59433: PUSH
59434: LD_INT 6
59436: PUSH
59437: EMPTY
59438: LIST
59439: LIST
59440: PUSH
59441: LD_INT 2
59443: PUSH
59444: LD_INT 4
59446: PUSH
59447: EMPTY
59448: LIST
59449: LIST
59450: PUSH
59451: LD_INT 3
59453: PUSH
59454: LD_INT 5
59456: PUSH
59457: EMPTY
59458: LIST
59459: LIST
59460: PUSH
59461: EMPTY
59462: LIST
59463: LIST
59464: LIST
59465: PUSH
59466: LD_INT 24
59468: PUSH
59469: LD_INT 25
59471: PUSH
59472: EMPTY
59473: LIST
59474: LIST
59475: PUSH
59476: LD_INT 23
59478: PUSH
59479: LD_INT 27
59481: PUSH
59482: EMPTY
59483: LIST
59484: LIST
59485: PUSH
59486: EMPTY
59487: LIST
59488: LIST
59489: PUSH
59490: LD_INT 42
59492: PUSH
59493: LD_INT 43
59495: PUSH
59496: EMPTY
59497: LIST
59498: LIST
59499: PUSH
59500: LD_INT 44
59502: PUSH
59503: LD_INT 46
59505: PUSH
59506: EMPTY
59507: LIST
59508: LIST
59509: PUSH
59510: LD_INT 45
59512: PUSH
59513: LD_INT 47
59515: PUSH
59516: EMPTY
59517: LIST
59518: LIST
59519: PUSH
59520: EMPTY
59521: LIST
59522: LIST
59523: LIST
59524: PUSH
59525: EMPTY
59526: LIST
59527: LIST
59528: LIST
59529: ST_TO_ADDR
// result := [ ] ;
59530: LD_ADDR_VAR 0 3
59534: PUSH
59535: EMPTY
59536: ST_TO_ADDR
// for i in turrets do
59537: LD_ADDR_VAR 0 4
59541: PUSH
59542: LD_VAR 0 1
59546: PUSH
59547: FOR_IN
59548: IFFALSE 59731
// begin nat := GetNation ( i ) ;
59550: LD_ADDR_VAR 0 7
59554: PUSH
59555: LD_VAR 0 4
59559: PPUSH
59560: CALL_OW 248
59564: ST_TO_ADDR
// weapon := 0 ;
59565: LD_ADDR_VAR 0 8
59569: PUSH
59570: LD_INT 0
59572: ST_TO_ADDR
// if not nat then
59573: LD_VAR 0 7
59577: NOT
59578: IFFALSE 59582
// continue ;
59580: GO 59547
// for j in list [ nat ] do
59582: LD_ADDR_VAR 0 5
59586: PUSH
59587: LD_VAR 0 10
59591: PUSH
59592: LD_VAR 0 7
59596: ARRAY
59597: PUSH
59598: FOR_IN
59599: IFFALSE 59640
// if GetBWeapon ( i ) = j [ 1 ] then
59601: LD_VAR 0 4
59605: PPUSH
59606: CALL_OW 269
59610: PUSH
59611: LD_VAR 0 5
59615: PUSH
59616: LD_INT 1
59618: ARRAY
59619: EQUAL
59620: IFFALSE 59638
// begin weapon := j [ 2 ] ;
59622: LD_ADDR_VAR 0 8
59626: PUSH
59627: LD_VAR 0 5
59631: PUSH
59632: LD_INT 2
59634: ARRAY
59635: ST_TO_ADDR
// break ;
59636: GO 59640
// end ;
59638: GO 59598
59640: POP
59641: POP
// if not weapon then
59642: LD_VAR 0 8
59646: NOT
59647: IFFALSE 59651
// continue ;
59649: GO 59547
// for k in factories do
59651: LD_ADDR_VAR 0 6
59655: PUSH
59656: LD_VAR 0 2
59660: PUSH
59661: FOR_IN
59662: IFFALSE 59727
// begin weapons := AvailableWeaponList ( k ) ;
59664: LD_ADDR_VAR 0 9
59668: PUSH
59669: LD_VAR 0 6
59673: PPUSH
59674: CALL_OW 478
59678: ST_TO_ADDR
// if not weapons then
59679: LD_VAR 0 9
59683: NOT
59684: IFFALSE 59688
// continue ;
59686: GO 59661
// if weapon in weapons then
59688: LD_VAR 0 8
59692: PUSH
59693: LD_VAR 0 9
59697: IN
59698: IFFALSE 59725
// begin result := [ i , weapon ] ;
59700: LD_ADDR_VAR 0 3
59704: PUSH
59705: LD_VAR 0 4
59709: PUSH
59710: LD_VAR 0 8
59714: PUSH
59715: EMPTY
59716: LIST
59717: LIST
59718: ST_TO_ADDR
// exit ;
59719: POP
59720: POP
59721: POP
59722: POP
59723: GO 59733
// end ; end ;
59725: GO 59661
59727: POP
59728: POP
// end ;
59729: GO 59547
59731: POP
59732: POP
// end ;
59733: LD_VAR 0 3
59737: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
59738: LD_INT 0
59740: PPUSH
// if not side or side > 8 then
59741: LD_VAR 0 3
59745: NOT
59746: IFTRUE 59758
59748: PUSH
59749: LD_VAR 0 3
59753: PUSH
59754: LD_INT 8
59756: GREATER
59757: OR
59758: IFFALSE 59762
// exit ;
59760: GO 59821
// if not range then
59762: LD_VAR 0 4
59766: NOT
59767: IFFALSE 59778
// range := - 12 ;
59769: LD_ADDR_VAR 0 4
59773: PUSH
59774: LD_INT 12
59776: NEG
59777: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
59778: LD_VAR 0 1
59782: PPUSH
59783: LD_VAR 0 2
59787: PPUSH
59788: LD_VAR 0 3
59792: PPUSH
59793: LD_VAR 0 4
59797: PPUSH
59798: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
59802: LD_VAR 0 1
59806: PPUSH
59807: LD_VAR 0 2
59811: PPUSH
59812: LD_VAR 0 3
59816: PPUSH
59817: CALL_OW 331
// end ;
59821: LD_VAR 0 5
59825: RET
// export function Video ( mode ) ; begin
59826: LD_INT 0
59828: PPUSH
// ingame_video = mode ;
59829: LD_ADDR_OWVAR 52
59833: PUSH
59834: LD_VAR 0 1
59838: ST_TO_ADDR
// interface_hidden = mode ;
59839: LD_ADDR_OWVAR 54
59843: PUSH
59844: LD_VAR 0 1
59848: ST_TO_ADDR
// end ;
59849: LD_VAR 0 2
59853: RET
// export function Join ( array , element ) ; begin
59854: LD_INT 0
59856: PPUSH
// result := Replace ( array , array + 1 , element ) ;
59857: LD_ADDR_VAR 0 3
59861: PUSH
59862: LD_VAR 0 1
59866: PPUSH
59867: LD_VAR 0 1
59871: PUSH
59872: LD_INT 1
59874: PLUS
59875: PPUSH
59876: LD_VAR 0 2
59880: PPUSH
59881: CALL_OW 1
59885: ST_TO_ADDR
// end ;
59886: LD_VAR 0 3
59890: RET
// export function JoinUnion ( array , element ) ; begin
59891: LD_INT 0
59893: PPUSH
// result := array union element ;
59894: LD_ADDR_VAR 0 3
59898: PUSH
59899: LD_VAR 0 1
59903: PUSH
59904: LD_VAR 0 2
59908: UNION
59909: ST_TO_ADDR
// end ;
59910: LD_VAR 0 3
59914: RET
// export function GetBehemoths ( side ) ; begin
59915: LD_INT 0
59917: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
59918: LD_ADDR_VAR 0 2
59922: PUSH
59923: LD_INT 22
59925: PUSH
59926: LD_VAR 0 1
59930: PUSH
59931: EMPTY
59932: LIST
59933: LIST
59934: PUSH
59935: LD_INT 31
59937: PUSH
59938: LD_INT 25
59940: PUSH
59941: EMPTY
59942: LIST
59943: LIST
59944: PUSH
59945: EMPTY
59946: LIST
59947: LIST
59948: PPUSH
59949: CALL_OW 69
59953: ST_TO_ADDR
// end ;
59954: LD_VAR 0 2
59958: RET
// export function Shuffle ( array ) ; var i , index ; begin
59959: LD_INT 0
59961: PPUSH
59962: PPUSH
59963: PPUSH
// result := [ ] ;
59964: LD_ADDR_VAR 0 2
59968: PUSH
59969: EMPTY
59970: ST_TO_ADDR
// if not array then
59971: LD_VAR 0 1
59975: NOT
59976: IFFALSE 59980
// exit ;
59978: GO 60079
// Randomize ;
59980: CALL_OW 10
// for i = array downto 1 do
59984: LD_ADDR_VAR 0 3
59988: PUSH
59989: DOUBLE
59990: LD_VAR 0 1
59994: INC
59995: ST_TO_ADDR
59996: LD_INT 1
59998: PUSH
59999: FOR_DOWNTO
60000: IFFALSE 60077
// begin index := rand ( 1 , array ) ;
60002: LD_ADDR_VAR 0 4
60006: PUSH
60007: LD_INT 1
60009: PPUSH
60010: LD_VAR 0 1
60014: PPUSH
60015: CALL_OW 12
60019: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
60020: LD_ADDR_VAR 0 2
60024: PUSH
60025: LD_VAR 0 2
60029: PPUSH
60030: LD_VAR 0 2
60034: PUSH
60035: LD_INT 1
60037: PLUS
60038: PPUSH
60039: LD_VAR 0 1
60043: PUSH
60044: LD_VAR 0 4
60048: ARRAY
60049: PPUSH
60050: CALL_OW 2
60054: ST_TO_ADDR
// array := Delete ( array , index ) ;
60055: LD_ADDR_VAR 0 1
60059: PUSH
60060: LD_VAR 0 1
60064: PPUSH
60065: LD_VAR 0 4
60069: PPUSH
60070: CALL_OW 3
60074: ST_TO_ADDR
// end ;
60075: GO 59999
60077: POP
60078: POP
// end ;
60079: LD_VAR 0 2
60083: RET
// export function GetBaseMaterials ( base ) ; begin
60084: LD_INT 0
60086: PPUSH
// result := [ 0 , 0 , 0 ] ;
60087: LD_ADDR_VAR 0 2
60091: PUSH
60092: LD_INT 0
60094: PUSH
60095: LD_INT 0
60097: PUSH
60098: LD_INT 0
60100: PUSH
60101: EMPTY
60102: LIST
60103: LIST
60104: LIST
60105: ST_TO_ADDR
// if not base then
60106: LD_VAR 0 1
60110: NOT
60111: IFFALSE 60115
// exit ;
60113: GO 60164
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
60115: LD_ADDR_VAR 0 2
60119: PUSH
60120: LD_VAR 0 1
60124: PPUSH
60125: LD_INT 1
60127: PPUSH
60128: CALL_OW 275
60132: PUSH
60133: LD_VAR 0 1
60137: PPUSH
60138: LD_INT 2
60140: PPUSH
60141: CALL_OW 275
60145: PUSH
60146: LD_VAR 0 1
60150: PPUSH
60151: LD_INT 3
60153: PPUSH
60154: CALL_OW 275
60158: PUSH
60159: EMPTY
60160: LIST
60161: LIST
60162: LIST
60163: ST_TO_ADDR
// end ;
60164: LD_VAR 0 2
60168: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
60169: LD_INT 0
60171: PPUSH
60172: PPUSH
// result := array ;
60173: LD_ADDR_VAR 0 3
60177: PUSH
60178: LD_VAR 0 1
60182: ST_TO_ADDR
// if size >= result then
60183: LD_VAR 0 2
60187: PUSH
60188: LD_VAR 0 3
60192: GREATEREQUAL
60193: IFFALSE 60197
// exit ;
60195: GO 60247
// if size then
60197: LD_VAR 0 2
60201: IFFALSE 60247
// for i := array downto size do
60203: LD_ADDR_VAR 0 4
60207: PUSH
60208: DOUBLE
60209: LD_VAR 0 1
60213: INC
60214: ST_TO_ADDR
60215: LD_VAR 0 2
60219: PUSH
60220: FOR_DOWNTO
60221: IFFALSE 60245
// result := Delete ( result , result ) ;
60223: LD_ADDR_VAR 0 3
60227: PUSH
60228: LD_VAR 0 3
60232: PPUSH
60233: LD_VAR 0 3
60237: PPUSH
60238: CALL_OW 3
60242: ST_TO_ADDR
60243: GO 60220
60245: POP
60246: POP
// end ;
60247: LD_VAR 0 3
60251: RET
// export function ComExit ( unit ) ; var tmp ; begin
60252: LD_INT 0
60254: PPUSH
60255: PPUSH
// if not IsInUnit ( unit ) then
60256: LD_VAR 0 1
60260: PPUSH
60261: CALL_OW 310
60265: NOT
60266: IFFALSE 60270
// exit ;
60268: GO 60330
// tmp := IsInUnit ( unit ) ;
60270: LD_ADDR_VAR 0 3
60274: PUSH
60275: LD_VAR 0 1
60279: PPUSH
60280: CALL_OW 310
60284: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
60285: LD_VAR 0 3
60289: PPUSH
60290: CALL_OW 247
60294: PUSH
60295: LD_INT 2
60297: EQUAL
60298: IFFALSE 60311
// ComExitVehicle ( unit ) else
60300: LD_VAR 0 1
60304: PPUSH
60305: CALL_OW 121
60309: GO 60320
// ComExitBuilding ( unit ) ;
60311: LD_VAR 0 1
60315: PPUSH
60316: CALL_OW 122
// result := tmp ;
60320: LD_ADDR_VAR 0 2
60324: PUSH
60325: LD_VAR 0 3
60329: ST_TO_ADDR
// end ;
60330: LD_VAR 0 2
60334: RET
// export function ComExitAll ( units ) ; var i ; begin
60335: LD_INT 0
60337: PPUSH
60338: PPUSH
// if not units then
60339: LD_VAR 0 1
60343: NOT
60344: IFFALSE 60348
// exit ;
60346: GO 60374
// for i in units do
60348: LD_ADDR_VAR 0 3
60352: PUSH
60353: LD_VAR 0 1
60357: PUSH
60358: FOR_IN
60359: IFFALSE 60372
// ComExit ( i ) ;
60361: LD_VAR 0 3
60365: PPUSH
60366: CALL 60252 0 1
60370: GO 60358
60372: POP
60373: POP
// end ;
60374: LD_VAR 0 2
60378: RET
// export function ResetHc ; begin
60379: LD_INT 0
60381: PPUSH
// InitHc ;
60382: CALL_OW 19
// hc_importance := 0 ;
60386: LD_ADDR_OWVAR 32
60390: PUSH
60391: LD_INT 0
60393: ST_TO_ADDR
// end ;
60394: LD_VAR 0 1
60398: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
60399: LD_INT 0
60401: PPUSH
60402: PPUSH
60403: PPUSH
// _x := ( x1 + x2 ) div 2 ;
60404: LD_ADDR_VAR 0 6
60408: PUSH
60409: LD_VAR 0 1
60413: PUSH
60414: LD_VAR 0 3
60418: PLUS
60419: PUSH
60420: LD_INT 2
60422: DIV
60423: ST_TO_ADDR
// if _x < 0 then
60424: LD_VAR 0 6
60428: PUSH
60429: LD_INT 0
60431: LESS
60432: IFFALSE 60449
// _x := _x * - 1 ;
60434: LD_ADDR_VAR 0 6
60438: PUSH
60439: LD_VAR 0 6
60443: PUSH
60444: LD_INT 1
60446: NEG
60447: MUL
60448: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
60449: LD_ADDR_VAR 0 7
60453: PUSH
60454: LD_VAR 0 2
60458: PUSH
60459: LD_VAR 0 4
60463: PLUS
60464: PUSH
60465: LD_INT 2
60467: DIV
60468: ST_TO_ADDR
// if _y < 0 then
60469: LD_VAR 0 7
60473: PUSH
60474: LD_INT 0
60476: LESS
60477: IFFALSE 60494
// _y := _y * - 1 ;
60479: LD_ADDR_VAR 0 7
60483: PUSH
60484: LD_VAR 0 7
60488: PUSH
60489: LD_INT 1
60491: NEG
60492: MUL
60493: ST_TO_ADDR
// result := [ _x , _y ] ;
60494: LD_ADDR_VAR 0 5
60498: PUSH
60499: LD_VAR 0 6
60503: PUSH
60504: LD_VAR 0 7
60508: PUSH
60509: EMPTY
60510: LIST
60511: LIST
60512: ST_TO_ADDR
// end ;
60513: LD_VAR 0 5
60517: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
60518: LD_INT 0
60520: PPUSH
60521: PPUSH
60522: PPUSH
60523: PPUSH
// task := GetTaskList ( unit ) ;
60524: LD_ADDR_VAR 0 7
60528: PUSH
60529: LD_VAR 0 1
60533: PPUSH
60534: CALL_OW 437
60538: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
60539: LD_VAR 0 7
60543: NOT
60544: IFFALSE 60563
60546: PUSH
60547: LD_VAR 0 1
60551: PPUSH
60552: LD_VAR 0 2
60556: PPUSH
60557: CALL_OW 308
60561: NOT
60562: AND
60563: IFFALSE 60567
// exit ;
60565: GO 60685
// if IsInArea ( unit , area ) then
60567: LD_VAR 0 1
60571: PPUSH
60572: LD_VAR 0 2
60576: PPUSH
60577: CALL_OW 308
60581: IFFALSE 60599
// begin ComMoveToArea ( unit , goAway ) ;
60583: LD_VAR 0 1
60587: PPUSH
60588: LD_VAR 0 3
60592: PPUSH
60593: CALL_OW 113
// exit ;
60597: GO 60685
// end ; if task [ 1 ] [ 1 ] <> M then
60599: LD_VAR 0 7
60603: PUSH
60604: LD_INT 1
60606: ARRAY
60607: PUSH
60608: LD_INT 1
60610: ARRAY
60611: PUSH
60612: LD_STRING M
60614: NONEQUAL
60615: IFFALSE 60619
// exit ;
60617: GO 60685
// x := task [ 1 ] [ 2 ] ;
60619: LD_ADDR_VAR 0 5
60623: PUSH
60624: LD_VAR 0 7
60628: PUSH
60629: LD_INT 1
60631: ARRAY
60632: PUSH
60633: LD_INT 2
60635: ARRAY
60636: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
60637: LD_ADDR_VAR 0 6
60641: PUSH
60642: LD_VAR 0 7
60646: PUSH
60647: LD_INT 1
60649: ARRAY
60650: PUSH
60651: LD_INT 3
60653: ARRAY
60654: ST_TO_ADDR
// if InArea ( x , y , area ) then
60655: LD_VAR 0 5
60659: PPUSH
60660: LD_VAR 0 6
60664: PPUSH
60665: LD_VAR 0 2
60669: PPUSH
60670: CALL_OW 309
60674: IFFALSE 60685
// ComStop ( unit ) ;
60676: LD_VAR 0 1
60680: PPUSH
60681: CALL_OW 141
// end ;
60685: LD_VAR 0 4
60689: RET
// export function Abs ( value ) ; begin
60690: LD_INT 0
60692: PPUSH
// result := value ;
60693: LD_ADDR_VAR 0 2
60697: PUSH
60698: LD_VAR 0 1
60702: ST_TO_ADDR
// if value < 0 then
60703: LD_VAR 0 1
60707: PUSH
60708: LD_INT 0
60710: LESS
60711: IFFALSE 60728
// result := value * - 1 ;
60713: LD_ADDR_VAR 0 2
60717: PUSH
60718: LD_VAR 0 1
60722: PUSH
60723: LD_INT 1
60725: NEG
60726: MUL
60727: ST_TO_ADDR
// end ;
60728: LD_VAR 0 2
60732: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
60733: LD_INT 0
60735: PPUSH
60736: PPUSH
60737: PPUSH
60738: PPUSH
60739: PPUSH
60740: PPUSH
60741: PPUSH
60742: PPUSH
// if not unit or not building then
60743: LD_VAR 0 1
60747: NOT
60748: IFTRUE 60757
60750: PUSH
60751: LD_VAR 0 2
60755: NOT
60756: OR
60757: IFFALSE 60761
// exit ;
60759: GO 60989
// x := GetX ( building ) ;
60761: LD_ADDR_VAR 0 4
60765: PUSH
60766: LD_VAR 0 2
60770: PPUSH
60771: CALL_OW 250
60775: ST_TO_ADDR
// y := GetY ( building ) ;
60776: LD_ADDR_VAR 0 6
60780: PUSH
60781: LD_VAR 0 2
60785: PPUSH
60786: CALL_OW 251
60790: ST_TO_ADDR
// d := GetDir ( building ) ;
60791: LD_ADDR_VAR 0 8
60795: PUSH
60796: LD_VAR 0 2
60800: PPUSH
60801: CALL_OW 254
60805: ST_TO_ADDR
// r := 4 ;
60806: LD_ADDR_VAR 0 9
60810: PUSH
60811: LD_INT 4
60813: ST_TO_ADDR
// for i := 1 to 5 do
60814: LD_ADDR_VAR 0 10
60818: PUSH
60819: DOUBLE
60820: LD_INT 1
60822: DEC
60823: ST_TO_ADDR
60824: LD_INT 5
60826: PUSH
60827: FOR_TO
60828: IFFALSE 60987
// begin _x := ShiftX ( x , d , r + i ) ;
60830: LD_ADDR_VAR 0 5
60834: PUSH
60835: LD_VAR 0 4
60839: PPUSH
60840: LD_VAR 0 8
60844: PPUSH
60845: LD_VAR 0 9
60849: PUSH
60850: LD_VAR 0 10
60854: PLUS
60855: PPUSH
60856: CALL_OW 272
60860: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
60861: LD_ADDR_VAR 0 7
60865: PUSH
60866: LD_VAR 0 6
60870: PPUSH
60871: LD_VAR 0 8
60875: PPUSH
60876: LD_VAR 0 9
60880: PUSH
60881: LD_VAR 0 10
60885: PLUS
60886: PPUSH
60887: CALL_OW 273
60891: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
60892: LD_VAR 0 5
60896: PPUSH
60897: LD_VAR 0 7
60901: PPUSH
60902: CALL_OW 488
60906: IFFALSE 60941
60908: PUSH
60909: LD_VAR 0 5
60913: PPUSH
60914: LD_VAR 0 7
60918: PPUSH
60919: CALL_OW 428
60923: PPUSH
60924: CALL_OW 247
60928: PUSH
60929: LD_INT 3
60931: PUSH
60932: LD_INT 2
60934: PUSH
60935: EMPTY
60936: LIST
60937: LIST
60938: IN
60939: NOT
60940: AND
60941: IFFALSE 60985
// begin ComMoveXY ( unit , _x , _y ) ;
60943: LD_VAR 0 1
60947: PPUSH
60948: LD_VAR 0 5
60952: PPUSH
60953: LD_VAR 0 7
60957: PPUSH
60958: CALL_OW 111
// result := [ _x , _y ] ;
60962: LD_ADDR_VAR 0 3
60966: PUSH
60967: LD_VAR 0 5
60971: PUSH
60972: LD_VAR 0 7
60976: PUSH
60977: EMPTY
60978: LIST
60979: LIST
60980: ST_TO_ADDR
// exit ;
60981: POP
60982: POP
60983: GO 60989
// end ; end ;
60985: GO 60827
60987: POP
60988: POP
// end ;
60989: LD_VAR 0 3
60993: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
60994: LD_INT 0
60996: PPUSH
60997: PPUSH
60998: PPUSH
// result := 0 ;
60999: LD_ADDR_VAR 0 3
61003: PUSH
61004: LD_INT 0
61006: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
61007: LD_VAR 0 1
61011: PUSH
61012: LD_INT 0
61014: LESS
61015: IFTRUE 61027
61017: PUSH
61018: LD_VAR 0 1
61022: PUSH
61023: LD_INT 8
61025: GREATER
61026: OR
61027: IFTRUE 61039
61029: PUSH
61030: LD_VAR 0 2
61034: PUSH
61035: LD_INT 0
61037: LESS
61038: OR
61039: IFTRUE 61051
61041: PUSH
61042: LD_VAR 0 2
61046: PUSH
61047: LD_INT 8
61049: GREATER
61050: OR
61051: IFFALSE 61055
// exit ;
61053: GO 61130
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
61055: LD_ADDR_VAR 0 4
61059: PUSH
61060: LD_INT 22
61062: PUSH
61063: LD_VAR 0 2
61067: PUSH
61068: EMPTY
61069: LIST
61070: LIST
61071: PPUSH
61072: CALL_OW 69
61076: PUSH
61077: FOR_IN
61078: IFFALSE 61128
// begin un := UnitShoot ( i ) ;
61080: LD_ADDR_VAR 0 5
61084: PUSH
61085: LD_VAR 0 4
61089: PPUSH
61090: CALL_OW 504
61094: ST_TO_ADDR
// if GetSide ( un ) = side1 then
61095: LD_VAR 0 5
61099: PPUSH
61100: CALL_OW 255
61104: PUSH
61105: LD_VAR 0 1
61109: EQUAL
61110: IFFALSE 61126
// begin result := un ;
61112: LD_ADDR_VAR 0 3
61116: PUSH
61117: LD_VAR 0 5
61121: ST_TO_ADDR
// exit ;
61122: POP
61123: POP
61124: GO 61130
// end ; end ;
61126: GO 61077
61128: POP
61129: POP
// end ;
61130: LD_VAR 0 3
61134: RET
// export function GetCargoBay ( units ) ; begin
61135: LD_INT 0
61137: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
61138: LD_ADDR_VAR 0 2
61142: PUSH
61143: LD_VAR 0 1
61147: PPUSH
61148: LD_INT 2
61150: PUSH
61151: LD_INT 34
61153: PUSH
61154: LD_INT 12
61156: PUSH
61157: EMPTY
61158: LIST
61159: LIST
61160: PUSH
61161: LD_INT 34
61163: PUSH
61164: LD_INT 51
61166: PUSH
61167: EMPTY
61168: LIST
61169: LIST
61170: PUSH
61171: LD_INT 34
61173: PUSH
61174: LD_INT 32
61176: PUSH
61177: EMPTY
61178: LIST
61179: LIST
61180: PUSH
61181: LD_INT 34
61183: PUSH
61184: LD_INT 89
61186: PUSH
61187: EMPTY
61188: LIST
61189: LIST
61190: PUSH
61191: EMPTY
61192: LIST
61193: LIST
61194: LIST
61195: LIST
61196: LIST
61197: PPUSH
61198: CALL_OW 72
61202: ST_TO_ADDR
// end ;
61203: LD_VAR 0 2
61207: RET
// export function Negate ( value ) ; begin
61208: LD_INT 0
61210: PPUSH
// result := not value ;
61211: LD_ADDR_VAR 0 2
61215: PUSH
61216: LD_VAR 0 1
61220: NOT
61221: ST_TO_ADDR
// end ;
61222: LD_VAR 0 2
61226: RET
// export function Inc ( value ) ; begin
61227: LD_INT 0
61229: PPUSH
// result := value + 1 ;
61230: LD_ADDR_VAR 0 2
61234: PUSH
61235: LD_VAR 0 1
61239: PUSH
61240: LD_INT 1
61242: PLUS
61243: ST_TO_ADDR
// end ;
61244: LD_VAR 0 2
61248: RET
// export function Dec ( value ) ; begin
61249: LD_INT 0
61251: PPUSH
// result := value - 1 ;
61252: LD_ADDR_VAR 0 2
61256: PUSH
61257: LD_VAR 0 1
61261: PUSH
61262: LD_INT 1
61264: MINUS
61265: ST_TO_ADDR
// end ;
61266: LD_VAR 0 2
61270: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
61271: LD_INT 0
61273: PPUSH
61274: PPUSH
61275: PPUSH
61276: PPUSH
61277: PPUSH
61278: PPUSH
61279: PPUSH
61280: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
61281: LD_VAR 0 1
61285: PPUSH
61286: LD_VAR 0 2
61290: PPUSH
61291: CALL_OW 488
61295: NOT
61296: IFTRUE 61315
61298: PUSH
61299: LD_VAR 0 3
61303: PPUSH
61304: LD_VAR 0 4
61308: PPUSH
61309: CALL_OW 488
61313: NOT
61314: OR
61315: IFFALSE 61328
// begin result := - 1 ;
61317: LD_ADDR_VAR 0 5
61321: PUSH
61322: LD_INT 1
61324: NEG
61325: ST_TO_ADDR
// exit ;
61326: GO 61563
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
61328: LD_ADDR_VAR 0 12
61332: PUSH
61333: LD_VAR 0 1
61337: PPUSH
61338: LD_VAR 0 2
61342: PPUSH
61343: LD_VAR 0 3
61347: PPUSH
61348: LD_VAR 0 4
61352: PPUSH
61353: CALL 60399 0 4
61357: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
61358: LD_ADDR_VAR 0 11
61362: PUSH
61363: LD_VAR 0 1
61367: PPUSH
61368: LD_VAR 0 2
61372: PPUSH
61373: LD_VAR 0 12
61377: PUSH
61378: LD_INT 1
61380: ARRAY
61381: PPUSH
61382: LD_VAR 0 12
61386: PUSH
61387: LD_INT 2
61389: ARRAY
61390: PPUSH
61391: CALL_OW 298
61395: ST_TO_ADDR
// distance := 9999 ;
61396: LD_ADDR_VAR 0 10
61400: PUSH
61401: LD_INT 9999
61403: ST_TO_ADDR
// for i := 0 to 5 do
61404: LD_ADDR_VAR 0 6
61408: PUSH
61409: DOUBLE
61410: LD_INT 0
61412: DEC
61413: ST_TO_ADDR
61414: LD_INT 5
61416: PUSH
61417: FOR_TO
61418: IFFALSE 61561
// begin _x := ShiftX ( x1 , i , centerDist ) ;
61420: LD_ADDR_VAR 0 7
61424: PUSH
61425: LD_VAR 0 1
61429: PPUSH
61430: LD_VAR 0 6
61434: PPUSH
61435: LD_VAR 0 11
61439: PPUSH
61440: CALL_OW 272
61444: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
61445: LD_ADDR_VAR 0 8
61449: PUSH
61450: LD_VAR 0 2
61454: PPUSH
61455: LD_VAR 0 6
61459: PPUSH
61460: LD_VAR 0 11
61464: PPUSH
61465: CALL_OW 273
61469: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
61470: LD_VAR 0 7
61474: PPUSH
61475: LD_VAR 0 8
61479: PPUSH
61480: CALL_OW 488
61484: NOT
61485: IFFALSE 61489
// continue ;
61487: GO 61417
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
61489: LD_ADDR_VAR 0 9
61493: PUSH
61494: LD_VAR 0 12
61498: PUSH
61499: LD_INT 1
61501: ARRAY
61502: PPUSH
61503: LD_VAR 0 12
61507: PUSH
61508: LD_INT 2
61510: ARRAY
61511: PPUSH
61512: LD_VAR 0 7
61516: PPUSH
61517: LD_VAR 0 8
61521: PPUSH
61522: CALL_OW 298
61526: ST_TO_ADDR
// if tmp < distance then
61527: LD_VAR 0 9
61531: PUSH
61532: LD_VAR 0 10
61536: LESS
61537: IFFALSE 61559
// begin result := i ;
61539: LD_ADDR_VAR 0 5
61543: PUSH
61544: LD_VAR 0 6
61548: ST_TO_ADDR
// distance := tmp ;
61549: LD_ADDR_VAR 0 10
61553: PUSH
61554: LD_VAR 0 9
61558: ST_TO_ADDR
// end ; end ;
61559: GO 61417
61561: POP
61562: POP
// end ;
61563: LD_VAR 0 5
61567: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
61568: LD_INT 0
61570: PPUSH
61571: PPUSH
// if not driver or not IsInUnit ( driver ) then
61572: LD_VAR 0 1
61576: NOT
61577: IFTRUE 61591
61579: PUSH
61580: LD_VAR 0 1
61584: PPUSH
61585: CALL_OW 310
61589: NOT
61590: OR
61591: IFFALSE 61595
// exit ;
61593: GO 61685
// vehicle := IsInUnit ( driver ) ;
61595: LD_ADDR_VAR 0 3
61599: PUSH
61600: LD_VAR 0 1
61604: PPUSH
61605: CALL_OW 310
61609: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
61610: LD_VAR 0 1
61614: PPUSH
61615: LD_STRING \
61617: PUSH
61618: LD_INT 0
61620: PUSH
61621: LD_INT 0
61623: PUSH
61624: LD_INT 0
61626: PUSH
61627: LD_INT 0
61629: PUSH
61630: LD_INT 0
61632: PUSH
61633: LD_INT 0
61635: PUSH
61636: EMPTY
61637: LIST
61638: LIST
61639: LIST
61640: LIST
61641: LIST
61642: LIST
61643: LIST
61644: PUSH
61645: LD_STRING E
61647: PUSH
61648: LD_INT 0
61650: PUSH
61651: LD_INT 0
61653: PUSH
61654: LD_VAR 0 3
61658: PUSH
61659: LD_INT 0
61661: PUSH
61662: LD_INT 0
61664: PUSH
61665: LD_INT 0
61667: PUSH
61668: EMPTY
61669: LIST
61670: LIST
61671: LIST
61672: LIST
61673: LIST
61674: LIST
61675: LIST
61676: PUSH
61677: EMPTY
61678: LIST
61679: LIST
61680: PPUSH
61681: CALL_OW 446
// end ;
61685: LD_VAR 0 2
61689: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
61690: LD_INT 0
61692: PPUSH
61693: PPUSH
// if not driver or not IsInUnit ( driver ) then
61694: LD_VAR 0 1
61698: NOT
61699: IFTRUE 61713
61701: PUSH
61702: LD_VAR 0 1
61706: PPUSH
61707: CALL_OW 310
61711: NOT
61712: OR
61713: IFFALSE 61717
// exit ;
61715: GO 61807
// vehicle := IsInUnit ( driver ) ;
61717: LD_ADDR_VAR 0 3
61721: PUSH
61722: LD_VAR 0 1
61726: PPUSH
61727: CALL_OW 310
61731: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
61732: LD_VAR 0 1
61736: PPUSH
61737: LD_STRING \
61739: PUSH
61740: LD_INT 0
61742: PUSH
61743: LD_INT 0
61745: PUSH
61746: LD_INT 0
61748: PUSH
61749: LD_INT 0
61751: PUSH
61752: LD_INT 0
61754: PUSH
61755: LD_INT 0
61757: PUSH
61758: EMPTY
61759: LIST
61760: LIST
61761: LIST
61762: LIST
61763: LIST
61764: LIST
61765: LIST
61766: PUSH
61767: LD_STRING E
61769: PUSH
61770: LD_INT 0
61772: PUSH
61773: LD_INT 0
61775: PUSH
61776: LD_VAR 0 3
61780: PUSH
61781: LD_INT 0
61783: PUSH
61784: LD_INT 0
61786: PUSH
61787: LD_INT 0
61789: PUSH
61790: EMPTY
61791: LIST
61792: LIST
61793: LIST
61794: LIST
61795: LIST
61796: LIST
61797: LIST
61798: PUSH
61799: EMPTY
61800: LIST
61801: LIST
61802: PPUSH
61803: CALL_OW 447
// end ;
61807: LD_VAR 0 2
61811: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
61812: LD_INT 0
61814: PPUSH
61815: PPUSH
61816: PPUSH
// tmp := [ ] ;
61817: LD_ADDR_VAR 0 5
61821: PUSH
61822: EMPTY
61823: ST_TO_ADDR
// for i in units do
61824: LD_ADDR_VAR 0 4
61828: PUSH
61829: LD_VAR 0 1
61833: PUSH
61834: FOR_IN
61835: IFFALSE 61873
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
61837: LD_ADDR_VAR 0 5
61841: PUSH
61842: LD_VAR 0 5
61846: PPUSH
61847: LD_VAR 0 5
61851: PUSH
61852: LD_INT 1
61854: PLUS
61855: PPUSH
61856: LD_VAR 0 4
61860: PPUSH
61861: CALL_OW 256
61865: PPUSH
61866: CALL_OW 2
61870: ST_TO_ADDR
61871: GO 61834
61873: POP
61874: POP
// if not tmp then
61875: LD_VAR 0 5
61879: NOT
61880: IFFALSE 61884
// exit ;
61882: GO 61932
// if asc then
61884: LD_VAR 0 2
61888: IFFALSE 61912
// result := SortListByListAsc ( units , tmp ) else
61890: LD_ADDR_VAR 0 3
61894: PUSH
61895: LD_VAR 0 1
61899: PPUSH
61900: LD_VAR 0 5
61904: PPUSH
61905: CALL_OW 76
61909: ST_TO_ADDR
61910: GO 61932
// result := SortListByListDesc ( units , tmp ) ;
61912: LD_ADDR_VAR 0 3
61916: PUSH
61917: LD_VAR 0 1
61921: PPUSH
61922: LD_VAR 0 5
61926: PPUSH
61927: CALL_OW 77
61931: ST_TO_ADDR
// end ;
61932: LD_VAR 0 3
61936: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
61937: LD_INT 0
61939: PPUSH
61940: PPUSH
// task := GetTaskList ( mech ) ;
61941: LD_ADDR_VAR 0 4
61945: PUSH
61946: LD_VAR 0 1
61950: PPUSH
61951: CALL_OW 437
61955: ST_TO_ADDR
// if not task then
61956: LD_VAR 0 4
61960: NOT
61961: IFFALSE 61965
// exit ;
61963: GO 62009
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
61965: LD_ADDR_VAR 0 3
61969: PUSH
61970: LD_VAR 0 4
61974: PUSH
61975: LD_INT 1
61977: ARRAY
61978: PUSH
61979: LD_INT 1
61981: ARRAY
61982: PUSH
61983: LD_STRING r
61985: EQUAL
61986: IFFALSE 62008
61988: PUSH
61989: LD_VAR 0 4
61993: PUSH
61994: LD_INT 1
61996: ARRAY
61997: PUSH
61998: LD_INT 4
62000: ARRAY
62001: PUSH
62002: LD_VAR 0 2
62006: EQUAL
62007: AND
62008: ST_TO_ADDR
// end ;
62009: LD_VAR 0 3
62013: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
62014: LD_INT 0
62016: PPUSH
// SetDir ( unit , d ) ;
62017: LD_VAR 0 1
62021: PPUSH
62022: LD_VAR 0 4
62026: PPUSH
62027: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
62031: LD_ADDR_VAR 0 6
62035: PUSH
62036: LD_VAR 0 1
62040: PPUSH
62041: LD_VAR 0 2
62045: PPUSH
62046: LD_VAR 0 3
62050: PPUSH
62051: LD_VAR 0 5
62055: PPUSH
62056: CALL_OW 48
62060: ST_TO_ADDR
// end ;
62061: LD_VAR 0 6
62065: RET
// export function ToNaturalNumber ( number ) ; begin
62066: LD_INT 0
62068: PPUSH
// result := number div 1 ;
62069: LD_ADDR_VAR 0 2
62073: PUSH
62074: LD_VAR 0 1
62078: PUSH
62079: LD_INT 1
62081: DIV
62082: ST_TO_ADDR
// if number < 0 then
62083: LD_VAR 0 1
62087: PUSH
62088: LD_INT 0
62090: LESS
62091: IFFALSE 62101
// result := 0 ;
62093: LD_ADDR_VAR 0 2
62097: PUSH
62098: LD_INT 0
62100: ST_TO_ADDR
// end ;
62101: LD_VAR 0 2
62105: RET
// export function SortByBType ( buildings , asc ) ; var b , tmp ; begin
62106: LD_INT 0
62108: PPUSH
62109: PPUSH
62110: PPUSH
// if not buildings then
62111: LD_VAR 0 1
62115: NOT
62116: IFFALSE 62120
// exit ;
62118: GO 62235
// tmp := [ ] ;
62120: LD_ADDR_VAR 0 5
62124: PUSH
62125: EMPTY
62126: ST_TO_ADDR
// for b in buildings do
62127: LD_ADDR_VAR 0 4
62131: PUSH
62132: LD_VAR 0 1
62136: PUSH
62137: FOR_IN
62138: IFFALSE 62176
// tmp := Replace ( tmp , tmp + 1 , GetBType ( b ) ) ;
62140: LD_ADDR_VAR 0 5
62144: PUSH
62145: LD_VAR 0 5
62149: PPUSH
62150: LD_VAR 0 5
62154: PUSH
62155: LD_INT 1
62157: PLUS
62158: PPUSH
62159: LD_VAR 0 4
62163: PPUSH
62164: CALL_OW 266
62168: PPUSH
62169: CALL_OW 1
62173: ST_TO_ADDR
62174: GO 62137
62176: POP
62177: POP
// if not tmp then
62178: LD_VAR 0 5
62182: NOT
62183: IFFALSE 62187
// exit ;
62185: GO 62235
// if asc then
62187: LD_VAR 0 2
62191: IFFALSE 62215
// result := SortListByListAsc ( buildings , tmp ) else
62193: LD_ADDR_VAR 0 3
62197: PUSH
62198: LD_VAR 0 1
62202: PPUSH
62203: LD_VAR 0 5
62207: PPUSH
62208: CALL_OW 76
62212: ST_TO_ADDR
62213: GO 62235
// result := SortListByListDesc ( buildings , tmp ) ;
62215: LD_ADDR_VAR 0 3
62219: PUSH
62220: LD_VAR 0 1
62224: PPUSH
62225: LD_VAR 0 5
62229: PPUSH
62230: CALL_OW 77
62234: ST_TO_ADDR
// end ;
62235: LD_VAR 0 3
62239: RET
// export function SortByClass ( units , class ) ; var un ; begin
62240: LD_INT 0
62242: PPUSH
62243: PPUSH
// if not units or not class then
62244: LD_VAR 0 1
62248: NOT
62249: IFTRUE 62258
62251: PUSH
62252: LD_VAR 0 2
62256: NOT
62257: OR
62258: IFFALSE 62262
// exit ;
62260: GO 62357
// result := [ ] ;
62262: LD_ADDR_VAR 0 3
62266: PUSH
62267: EMPTY
62268: ST_TO_ADDR
// for un in units do
62269: LD_ADDR_VAR 0 4
62273: PUSH
62274: LD_VAR 0 1
62278: PUSH
62279: FOR_IN
62280: IFFALSE 62355
// if GetClass ( un ) = class then
62282: LD_VAR 0 4
62286: PPUSH
62287: CALL_OW 257
62291: PUSH
62292: LD_VAR 0 2
62296: EQUAL
62297: IFFALSE 62324
// result := Insert ( result , 1 , un ) else
62299: LD_ADDR_VAR 0 3
62303: PUSH
62304: LD_VAR 0 3
62308: PPUSH
62309: LD_INT 1
62311: PPUSH
62312: LD_VAR 0 4
62316: PPUSH
62317: CALL_OW 2
62321: ST_TO_ADDR
62322: GO 62353
// result := Replace ( result , result + 1 , un ) ;
62324: LD_ADDR_VAR 0 3
62328: PUSH
62329: LD_VAR 0 3
62333: PPUSH
62334: LD_VAR 0 3
62338: PUSH
62339: LD_INT 1
62341: PLUS
62342: PPUSH
62343: LD_VAR 0 4
62347: PPUSH
62348: CALL_OW 1
62352: ST_TO_ADDR
62353: GO 62279
62355: POP
62356: POP
// end ;
62357: LD_VAR 0 3
62361: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
62362: LD_INT 0
62364: PPUSH
62365: PPUSH
62366: PPUSH
62367: PPUSH
62368: PPUSH
62369: PPUSH
62370: PPUSH
// result := [ ] ;
62371: LD_ADDR_VAR 0 4
62375: PUSH
62376: EMPTY
62377: ST_TO_ADDR
// if x - r < 0 then
62378: LD_VAR 0 1
62382: PUSH
62383: LD_VAR 0 3
62387: MINUS
62388: PUSH
62389: LD_INT 0
62391: LESS
62392: IFFALSE 62404
// min_x := 0 else
62394: LD_ADDR_VAR 0 8
62398: PUSH
62399: LD_INT 0
62401: ST_TO_ADDR
62402: GO 62420
// min_x := x - r ;
62404: LD_ADDR_VAR 0 8
62408: PUSH
62409: LD_VAR 0 1
62413: PUSH
62414: LD_VAR 0 3
62418: MINUS
62419: ST_TO_ADDR
// if y - r < 0 then
62420: LD_VAR 0 2
62424: PUSH
62425: LD_VAR 0 3
62429: MINUS
62430: PUSH
62431: LD_INT 0
62433: LESS
62434: IFFALSE 62446
// min_y := 0 else
62436: LD_ADDR_VAR 0 7
62440: PUSH
62441: LD_INT 0
62443: ST_TO_ADDR
62444: GO 62462
// min_y := y - r ;
62446: LD_ADDR_VAR 0 7
62450: PUSH
62451: LD_VAR 0 2
62455: PUSH
62456: LD_VAR 0 3
62460: MINUS
62461: ST_TO_ADDR
// max_x := x + r ;
62462: LD_ADDR_VAR 0 9
62466: PUSH
62467: LD_VAR 0 1
62471: PUSH
62472: LD_VAR 0 3
62476: PLUS
62477: ST_TO_ADDR
// max_y := y + r ;
62478: LD_ADDR_VAR 0 10
62482: PUSH
62483: LD_VAR 0 2
62487: PUSH
62488: LD_VAR 0 3
62492: PLUS
62493: ST_TO_ADDR
// for _x = min_x to max_x do
62494: LD_ADDR_VAR 0 5
62498: PUSH
62499: DOUBLE
62500: LD_VAR 0 8
62504: DEC
62505: ST_TO_ADDR
62506: LD_VAR 0 9
62510: PUSH
62511: FOR_TO
62512: IFFALSE 62613
// for _y = min_y to max_y do
62514: LD_ADDR_VAR 0 6
62518: PUSH
62519: DOUBLE
62520: LD_VAR 0 7
62524: DEC
62525: ST_TO_ADDR
62526: LD_VAR 0 10
62530: PUSH
62531: FOR_TO
62532: IFFALSE 62609
// begin if not ValidHex ( _x , _y ) then
62534: LD_VAR 0 5
62538: PPUSH
62539: LD_VAR 0 6
62543: PPUSH
62544: CALL_OW 488
62548: NOT
62549: IFFALSE 62553
// continue ;
62551: GO 62531
// if GetResourceTypeXY ( _x , _y ) then
62553: LD_VAR 0 5
62557: PPUSH
62558: LD_VAR 0 6
62562: PPUSH
62563: CALL_OW 283
62567: IFFALSE 62607
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
62569: LD_ADDR_VAR 0 4
62573: PUSH
62574: LD_VAR 0 4
62578: PPUSH
62579: LD_VAR 0 4
62583: PUSH
62584: LD_INT 1
62586: PLUS
62587: PPUSH
62588: LD_VAR 0 5
62592: PUSH
62593: LD_VAR 0 6
62597: PUSH
62598: EMPTY
62599: LIST
62600: LIST
62601: PPUSH
62602: CALL_OW 1
62606: ST_TO_ADDR
// end ;
62607: GO 62531
62609: POP
62610: POP
62611: GO 62511
62613: POP
62614: POP
// end ;
62615: LD_VAR 0 4
62619: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
62620: LD_INT 0
62622: PPUSH
62623: PPUSH
62624: PPUSH
62625: PPUSH
62626: PPUSH
62627: PPUSH
62628: PPUSH
62629: PPUSH
// if not units then
62630: LD_VAR 0 1
62634: NOT
62635: IFFALSE 62639
// exit ;
62637: GO 63171
// result := UnitFilter ( units , [ f_ok ] ) ;
62639: LD_ADDR_VAR 0 3
62643: PUSH
62644: LD_VAR 0 1
62648: PPUSH
62649: LD_INT 50
62651: PUSH
62652: EMPTY
62653: LIST
62654: PPUSH
62655: CALL_OW 72
62659: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
62660: LD_ADDR_VAR 0 8
62664: PUSH
62665: LD_VAR 0 1
62669: PUSH
62670: LD_INT 1
62672: ARRAY
62673: PPUSH
62674: CALL_OW 255
62678: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
62679: LD_ADDR_VAR 0 10
62683: PUSH
62684: LD_INT 29
62686: PUSH
62687: LD_INT 91
62689: PUSH
62690: LD_INT 49
62692: PUSH
62693: EMPTY
62694: LIST
62695: LIST
62696: LIST
62697: ST_TO_ADDR
// if not result then
62698: LD_VAR 0 3
62702: NOT
62703: IFFALSE 62707
// exit ;
62705: GO 63171
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
62707: LD_ADDR_VAR 0 5
62711: PUSH
62712: LD_INT 81
62714: PUSH
62715: LD_VAR 0 8
62719: PUSH
62720: EMPTY
62721: LIST
62722: LIST
62723: PPUSH
62724: CALL_OW 69
62728: ST_TO_ADDR
// for i in result do
62729: LD_ADDR_VAR 0 4
62733: PUSH
62734: LD_VAR 0 3
62738: PUSH
62739: FOR_IN
62740: IFFALSE 63169
// begin tag := GetTag ( i ) + 1 ;
62742: LD_ADDR_VAR 0 9
62746: PUSH
62747: LD_VAR 0 4
62751: PPUSH
62752: CALL_OW 110
62756: PUSH
62757: LD_INT 1
62759: PLUS
62760: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
62761: LD_ADDR_VAR 0 7
62765: PUSH
62766: LD_VAR 0 4
62770: PPUSH
62771: CALL_OW 250
62775: PPUSH
62776: LD_VAR 0 4
62780: PPUSH
62781: CALL_OW 251
62785: PPUSH
62786: LD_INT 4
62788: PPUSH
62789: CALL 62362 0 3
62793: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
62794: LD_VAR 0 4
62798: PPUSH
62799: CALL_OW 247
62803: PUSH
62804: LD_INT 2
62806: EQUAL
62807: IFFALSE 62819
62809: PUSH
62810: LD_VAR 0 7
62814: PUSH
62815: LD_INT 2
62817: GREATER
62818: AND
62819: IFFALSE 62839
62821: PUSH
62822: LD_VAR 0 4
62826: PPUSH
62827: CALL_OW 264
62831: PUSH
62832: LD_VAR 0 10
62836: IN
62837: NOT
62838: AND
62839: IFFALSE 62878
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
62841: LD_VAR 0 4
62845: PPUSH
62846: LD_VAR 0 7
62850: PUSH
62851: LD_INT 1
62853: ARRAY
62854: PUSH
62855: LD_INT 1
62857: ARRAY
62858: PPUSH
62859: LD_VAR 0 7
62863: PUSH
62864: LD_INT 1
62866: ARRAY
62867: PUSH
62868: LD_INT 2
62870: ARRAY
62871: PPUSH
62872: CALL_OW 116
62876: GO 63167
// if path > tag then
62878: LD_VAR 0 2
62882: PUSH
62883: LD_VAR 0 9
62887: GREATER
62888: IFFALSE 63096
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
62890: LD_ADDR_VAR 0 6
62894: PUSH
62895: LD_VAR 0 5
62899: PPUSH
62900: LD_INT 91
62902: PUSH
62903: LD_VAR 0 4
62907: PUSH
62908: LD_INT 8
62910: PUSH
62911: EMPTY
62912: LIST
62913: LIST
62914: LIST
62915: PPUSH
62916: CALL_OW 72
62920: ST_TO_ADDR
// if nearEnemy then
62921: LD_VAR 0 6
62925: IFFALSE 62994
// begin if GetWeapon ( i ) = ru_time_lapser then
62927: LD_VAR 0 4
62931: PPUSH
62932: CALL_OW 264
62936: PUSH
62937: LD_INT 49
62939: EQUAL
62940: IFFALSE 62968
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
62942: LD_VAR 0 4
62946: PPUSH
62947: LD_VAR 0 6
62951: PPUSH
62952: LD_VAR 0 4
62956: PPUSH
62957: CALL_OW 74
62961: PPUSH
62962: CALL_OW 112
62966: GO 62992
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
62968: LD_VAR 0 4
62972: PPUSH
62973: LD_VAR 0 6
62977: PPUSH
62978: LD_VAR 0 4
62982: PPUSH
62983: CALL_OW 74
62987: PPUSH
62988: CALL 64252 0 2
// end else
62992: GO 63094
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
62994: LD_VAR 0 4
62998: PPUSH
62999: LD_VAR 0 2
63003: PUSH
63004: LD_VAR 0 9
63008: ARRAY
63009: PUSH
63010: LD_INT 1
63012: ARRAY
63013: PPUSH
63014: LD_VAR 0 2
63018: PUSH
63019: LD_VAR 0 9
63023: ARRAY
63024: PUSH
63025: LD_INT 2
63027: ARRAY
63028: PPUSH
63029: CALL_OW 297
63033: PUSH
63034: LD_INT 6
63036: GREATER
63037: IFFALSE 63080
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
63039: LD_VAR 0 4
63043: PPUSH
63044: LD_VAR 0 2
63048: PUSH
63049: LD_VAR 0 9
63053: ARRAY
63054: PUSH
63055: LD_INT 1
63057: ARRAY
63058: PPUSH
63059: LD_VAR 0 2
63063: PUSH
63064: LD_VAR 0 9
63068: ARRAY
63069: PUSH
63070: LD_INT 2
63072: ARRAY
63073: PPUSH
63074: CALL_OW 114
63078: GO 63094
// SetTag ( i , tag ) ;
63080: LD_VAR 0 4
63084: PPUSH
63085: LD_VAR 0 9
63089: PPUSH
63090: CALL_OW 109
// end else
63094: GO 63167
// if enemy then
63096: LD_VAR 0 5
63100: IFFALSE 63167
// begin if GetWeapon ( i ) = ru_time_lapser then
63102: LD_VAR 0 4
63106: PPUSH
63107: CALL_OW 264
63111: PUSH
63112: LD_INT 49
63114: EQUAL
63115: IFFALSE 63143
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
63117: LD_VAR 0 4
63121: PPUSH
63122: LD_VAR 0 5
63126: PPUSH
63127: LD_VAR 0 4
63131: PPUSH
63132: CALL_OW 74
63136: PPUSH
63137: CALL_OW 112
63141: GO 63167
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
63143: LD_VAR 0 4
63147: PPUSH
63148: LD_VAR 0 5
63152: PPUSH
63153: LD_VAR 0 4
63157: PPUSH
63158: CALL_OW 74
63162: PPUSH
63163: CALL 64252 0 2
// end ; end ;
63167: GO 62739
63169: POP
63170: POP
// end ;
63171: LD_VAR 0 3
63175: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
63176: LD_INT 0
63178: PPUSH
63179: PPUSH
63180: PPUSH
// if not unit or IsInUnit ( unit ) then
63181: LD_VAR 0 1
63185: NOT
63186: IFTRUE 63199
63188: PUSH
63189: LD_VAR 0 1
63193: PPUSH
63194: CALL_OW 310
63198: OR
63199: IFFALSE 63203
// exit ;
63201: GO 63294
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
63203: LD_ADDR_VAR 0 4
63207: PUSH
63208: LD_VAR 0 1
63212: PPUSH
63213: CALL_OW 250
63217: PPUSH
63218: LD_VAR 0 2
63222: PPUSH
63223: LD_INT 1
63225: PPUSH
63226: CALL_OW 272
63230: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
63231: LD_ADDR_VAR 0 5
63235: PUSH
63236: LD_VAR 0 1
63240: PPUSH
63241: CALL_OW 251
63245: PPUSH
63246: LD_VAR 0 2
63250: PPUSH
63251: LD_INT 1
63253: PPUSH
63254: CALL_OW 273
63258: ST_TO_ADDR
// if ValidHex ( x , y ) then
63259: LD_VAR 0 4
63263: PPUSH
63264: LD_VAR 0 5
63268: PPUSH
63269: CALL_OW 488
63273: IFFALSE 63294
// ComTurnXY ( unit , x , y ) ;
63275: LD_VAR 0 1
63279: PPUSH
63280: LD_VAR 0 4
63284: PPUSH
63285: LD_VAR 0 5
63289: PPUSH
63290: CALL_OW 118
// end ;
63294: LD_VAR 0 3
63298: RET
// export function SeeUnits ( side , units ) ; var i ; begin
63299: LD_INT 0
63301: PPUSH
63302: PPUSH
// result := false ;
63303: LD_ADDR_VAR 0 3
63307: PUSH
63308: LD_INT 0
63310: ST_TO_ADDR
// if not units then
63311: LD_VAR 0 2
63315: NOT
63316: IFFALSE 63320
// exit ;
63318: GO 63365
// for i in units do
63320: LD_ADDR_VAR 0 4
63324: PUSH
63325: LD_VAR 0 2
63329: PUSH
63330: FOR_IN
63331: IFFALSE 63363
// if See ( side , i ) then
63333: LD_VAR 0 1
63337: PPUSH
63338: LD_VAR 0 4
63342: PPUSH
63343: CALL_OW 292
63347: IFFALSE 63361
// begin result := true ;
63349: LD_ADDR_VAR 0 3
63353: PUSH
63354: LD_INT 1
63356: ST_TO_ADDR
// exit ;
63357: POP
63358: POP
63359: GO 63365
// end ;
63361: GO 63330
63363: POP
63364: POP
// end ;
63365: LD_VAR 0 3
63369: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
63370: LD_INT 0
63372: PPUSH
63373: PPUSH
63374: PPUSH
63375: PPUSH
// if not unit or not points then
63376: LD_VAR 0 1
63380: NOT
63381: IFTRUE 63390
63383: PUSH
63384: LD_VAR 0 2
63388: NOT
63389: OR
63390: IFFALSE 63394
// exit ;
63392: GO 63484
// dist := 99999 ;
63394: LD_ADDR_VAR 0 5
63398: PUSH
63399: LD_INT 99999
63401: ST_TO_ADDR
// for i in points do
63402: LD_ADDR_VAR 0 4
63406: PUSH
63407: LD_VAR 0 2
63411: PUSH
63412: FOR_IN
63413: IFFALSE 63482
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
63415: LD_ADDR_VAR 0 6
63419: PUSH
63420: LD_VAR 0 1
63424: PPUSH
63425: LD_VAR 0 4
63429: PUSH
63430: LD_INT 1
63432: ARRAY
63433: PPUSH
63434: LD_VAR 0 4
63438: PUSH
63439: LD_INT 2
63441: ARRAY
63442: PPUSH
63443: CALL_OW 297
63447: ST_TO_ADDR
// if tmpDist < dist then
63448: LD_VAR 0 6
63452: PUSH
63453: LD_VAR 0 5
63457: LESS
63458: IFFALSE 63480
// begin result := i ;
63460: LD_ADDR_VAR 0 3
63464: PUSH
63465: LD_VAR 0 4
63469: ST_TO_ADDR
// dist := tmpDist ;
63470: LD_ADDR_VAR 0 5
63474: PUSH
63475: LD_VAR 0 6
63479: ST_TO_ADDR
// end ; end ;
63480: GO 63412
63482: POP
63483: POP
// end ;
63484: LD_VAR 0 3
63488: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
63489: LD_INT 0
63491: PPUSH
// uc_side := side ;
63492: LD_ADDR_OWVAR 20
63496: PUSH
63497: LD_VAR 0 1
63501: ST_TO_ADDR
// uc_nation := 3 ;
63502: LD_ADDR_OWVAR 21
63506: PUSH
63507: LD_INT 3
63509: ST_TO_ADDR
// vc_chassis := 25 ;
63510: LD_ADDR_OWVAR 37
63514: PUSH
63515: LD_INT 25
63517: ST_TO_ADDR
// vc_engine := engine_siberite ;
63518: LD_ADDR_OWVAR 39
63522: PUSH
63523: LD_INT 3
63525: ST_TO_ADDR
// vc_control := control_computer ;
63526: LD_ADDR_OWVAR 38
63530: PUSH
63531: LD_INT 3
63533: ST_TO_ADDR
// vc_weapon := 59 ;
63534: LD_ADDR_OWVAR 40
63538: PUSH
63539: LD_INT 59
63541: ST_TO_ADDR
// result := CreateVehicle ;
63542: LD_ADDR_VAR 0 5
63546: PUSH
63547: CALL_OW 45
63551: ST_TO_ADDR
// SetDir ( result , d ) ;
63552: LD_VAR 0 5
63556: PPUSH
63557: LD_VAR 0 4
63561: PPUSH
63562: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
63566: LD_VAR 0 5
63570: PPUSH
63571: LD_VAR 0 2
63575: PPUSH
63576: LD_VAR 0 3
63580: PPUSH
63581: LD_INT 0
63583: PPUSH
63584: CALL_OW 48
// end ;
63588: LD_VAR 0 5
63592: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
63593: LD_INT 0
63595: PPUSH
63596: PPUSH
63597: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
63598: LD_ADDR_VAR 0 2
63602: PUSH
63603: LD_INT 0
63605: PUSH
63606: LD_INT 0
63608: PUSH
63609: LD_INT 0
63611: PUSH
63612: LD_INT 0
63614: PUSH
63615: EMPTY
63616: LIST
63617: LIST
63618: LIST
63619: LIST
63620: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
63621: LD_VAR 0 1
63625: NOT
63626: IFTRUE 63659
63628: PUSH
63629: LD_VAR 0 1
63633: PPUSH
63634: CALL_OW 264
63638: PUSH
63639: LD_INT 12
63641: PUSH
63642: LD_INT 51
63644: PUSH
63645: LD_INT 32
63647: PUSH
63648: LD_INT 89
63650: PUSH
63651: EMPTY
63652: LIST
63653: LIST
63654: LIST
63655: LIST
63656: IN
63657: NOT
63658: OR
63659: IFFALSE 63663
// exit ;
63661: GO 63761
// for i := 1 to 3 do
63663: LD_ADDR_VAR 0 3
63667: PUSH
63668: DOUBLE
63669: LD_INT 1
63671: DEC
63672: ST_TO_ADDR
63673: LD_INT 3
63675: PUSH
63676: FOR_TO
63677: IFFALSE 63759
// begin tmp := GetCargo ( cargo , i ) ;
63679: LD_ADDR_VAR 0 4
63683: PUSH
63684: LD_VAR 0 1
63688: PPUSH
63689: LD_VAR 0 3
63693: PPUSH
63694: CALL_OW 289
63698: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
63699: LD_ADDR_VAR 0 2
63703: PUSH
63704: LD_VAR 0 2
63708: PPUSH
63709: LD_VAR 0 3
63713: PPUSH
63714: LD_VAR 0 4
63718: PPUSH
63719: CALL_OW 1
63723: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
63724: LD_ADDR_VAR 0 2
63728: PUSH
63729: LD_VAR 0 2
63733: PPUSH
63734: LD_INT 4
63736: PPUSH
63737: LD_VAR 0 2
63741: PUSH
63742: LD_INT 4
63744: ARRAY
63745: PUSH
63746: LD_VAR 0 4
63750: PLUS
63751: PPUSH
63752: CALL_OW 1
63756: ST_TO_ADDR
// end ;
63757: GO 63676
63759: POP
63760: POP
// end ;
63761: LD_VAR 0 2
63765: RET
// export function Length ( array ) ; begin
63766: LD_INT 0
63768: PPUSH
// result := array + 0 ;
63769: LD_ADDR_VAR 0 2
63773: PUSH
63774: LD_VAR 0 1
63778: PUSH
63779: LD_INT 0
63781: PLUS
63782: ST_TO_ADDR
// end ;
63783: LD_VAR 0 2
63787: RET
// export function PrepareArray ( array ) ; begin
63788: LD_INT 0
63790: PPUSH
// result := array diff 0 ;
63791: LD_ADDR_VAR 0 2
63795: PUSH
63796: LD_VAR 0 1
63800: PUSH
63801: LD_INT 0
63803: DIFF
63804: ST_TO_ADDR
// if not result [ 1 ] then
63805: LD_VAR 0 2
63809: PUSH
63810: LD_INT 1
63812: ARRAY
63813: NOT
63814: IFFALSE 63834
// result := Delete ( result , 1 ) ;
63816: LD_ADDR_VAR 0 2
63820: PUSH
63821: LD_VAR 0 2
63825: PPUSH
63826: LD_INT 1
63828: PPUSH
63829: CALL_OW 3
63833: ST_TO_ADDR
// end ;
63834: LD_VAR 0 2
63838: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
63839: LD_INT 0
63841: PPUSH
63842: PPUSH
63843: PPUSH
63844: PPUSH
// sibRocketRange := 25 ;
63845: LD_ADDR_VAR 0 6
63849: PUSH
63850: LD_INT 25
63852: ST_TO_ADDR
// result := false ;
63853: LD_ADDR_VAR 0 4
63857: PUSH
63858: LD_INT 0
63860: ST_TO_ADDR
// for i := 0 to 5 do
63861: LD_ADDR_VAR 0 5
63865: PUSH
63866: DOUBLE
63867: LD_INT 0
63869: DEC
63870: ST_TO_ADDR
63871: LD_INT 5
63873: PUSH
63874: FOR_TO
63875: IFFALSE 63942
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
63877: LD_VAR 0 1
63881: PPUSH
63882: LD_VAR 0 5
63886: PPUSH
63887: LD_VAR 0 6
63891: PPUSH
63892: CALL_OW 272
63896: PPUSH
63897: LD_VAR 0 2
63901: PPUSH
63902: LD_VAR 0 5
63906: PPUSH
63907: LD_VAR 0 6
63911: PPUSH
63912: CALL_OW 273
63916: PPUSH
63917: LD_VAR 0 3
63921: PPUSH
63922: CALL_OW 309
63926: IFFALSE 63940
// begin result := true ;
63928: LD_ADDR_VAR 0 4
63932: PUSH
63933: LD_INT 1
63935: ST_TO_ADDR
// exit ;
63936: POP
63937: POP
63938: GO 63944
// end ;
63940: GO 63874
63942: POP
63943: POP
// end ;
63944: LD_VAR 0 4
63948: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
63949: LD_INT 0
63951: PPUSH
63952: PPUSH
63953: PPUSH
// if btype = b_depot then
63954: LD_VAR 0 2
63958: PUSH
63959: LD_INT 0
63961: EQUAL
63962: IFFALSE 63974
// begin result := true ;
63964: LD_ADDR_VAR 0 3
63968: PUSH
63969: LD_INT 1
63971: ST_TO_ADDR
// exit ;
63972: GO 64094
// end ; pom := GetBase ( depot ) ;
63974: LD_ADDR_VAR 0 4
63978: PUSH
63979: LD_VAR 0 1
63983: PPUSH
63984: CALL_OW 274
63988: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
63989: LD_ADDR_VAR 0 5
63993: PUSH
63994: LD_VAR 0 2
63998: PPUSH
63999: LD_VAR 0 1
64003: PPUSH
64004: CALL_OW 248
64008: PPUSH
64009: CALL_OW 450
64013: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
64014: LD_ADDR_VAR 0 3
64018: PUSH
64019: LD_VAR 0 4
64023: PPUSH
64024: LD_INT 1
64026: PPUSH
64027: CALL_OW 275
64031: PUSH
64032: LD_VAR 0 5
64036: PUSH
64037: LD_INT 1
64039: ARRAY
64040: GREATEREQUAL
64041: IFFALSE 64067
64043: PUSH
64044: LD_VAR 0 4
64048: PPUSH
64049: LD_INT 2
64051: PPUSH
64052: CALL_OW 275
64056: PUSH
64057: LD_VAR 0 5
64061: PUSH
64062: LD_INT 2
64064: ARRAY
64065: GREATEREQUAL
64066: AND
64067: IFFALSE 64093
64069: PUSH
64070: LD_VAR 0 4
64074: PPUSH
64075: LD_INT 3
64077: PPUSH
64078: CALL_OW 275
64082: PUSH
64083: LD_VAR 0 5
64087: PUSH
64088: LD_INT 3
64090: ARRAY
64091: GREATEREQUAL
64092: AND
64093: ST_TO_ADDR
// end ;
64094: LD_VAR 0 3
64098: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
64099: LD_INT 0
64101: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
64102: LD_VAR 0 1
64106: PPUSH
64107: LD_VAR 0 2
64111: PPUSH
64112: LD_INT 0
64114: PPUSH
64115: LD_INT 0
64117: PPUSH
64118: LD_INT 1
64120: PPUSH
64121: LD_INT 0
64123: PPUSH
64124: CALL_OW 587
// end ;
64128: LD_VAR 0 3
64132: RET
// export function CenterOnNow ( unit ) ; begin
64133: LD_INT 0
64135: PPUSH
// result := IsInUnit ( unit ) ;
64136: LD_ADDR_VAR 0 2
64140: PUSH
64141: LD_VAR 0 1
64145: PPUSH
64146: CALL_OW 310
64150: ST_TO_ADDR
// if not result then
64151: LD_VAR 0 2
64155: NOT
64156: IFFALSE 64168
// result := unit ;
64158: LD_ADDR_VAR 0 2
64162: PUSH
64163: LD_VAR 0 1
64167: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
64168: LD_VAR 0 1
64172: PPUSH
64173: CALL_OW 87
// end ;
64177: LD_VAR 0 2
64181: RET
// export function ComMoveHex ( unit , hex ) ; begin
64182: LD_INT 0
64184: PPUSH
// if not hex then
64185: LD_VAR 0 2
64189: NOT
64190: IFFALSE 64194
// exit ;
64192: GO 64247
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
64194: LD_VAR 0 2
64198: PUSH
64199: LD_INT 1
64201: ARRAY
64202: PPUSH
64203: LD_VAR 0 2
64207: PUSH
64208: LD_INT 2
64210: ARRAY
64211: PPUSH
64212: CALL_OW 428
64216: IFFALSE 64220
// exit ;
64218: GO 64247
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
64220: LD_VAR 0 1
64224: PPUSH
64225: LD_VAR 0 2
64229: PUSH
64230: LD_INT 1
64232: ARRAY
64233: PPUSH
64234: LD_VAR 0 2
64238: PUSH
64239: LD_INT 2
64241: ARRAY
64242: PPUSH
64243: CALL_OW 111
// end ;
64247: LD_VAR 0 3
64251: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
64252: LD_INT 0
64254: PPUSH
64255: PPUSH
64256: PPUSH
// if not unit or not enemy then
64257: LD_VAR 0 1
64261: NOT
64262: IFTRUE 64271
64264: PUSH
64265: LD_VAR 0 2
64269: NOT
64270: OR
64271: IFFALSE 64275
// exit ;
64273: GO 64401
// x := GetX ( enemy ) ;
64275: LD_ADDR_VAR 0 4
64279: PUSH
64280: LD_VAR 0 2
64284: PPUSH
64285: CALL_OW 250
64289: ST_TO_ADDR
// y := GetY ( enemy ) ;
64290: LD_ADDR_VAR 0 5
64294: PUSH
64295: LD_VAR 0 2
64299: PPUSH
64300: CALL_OW 251
64304: ST_TO_ADDR
// if ValidHex ( x , y ) then
64305: LD_VAR 0 4
64309: PPUSH
64310: LD_VAR 0 5
64314: PPUSH
64315: CALL_OW 488
64319: IFFALSE 64401
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
64321: LD_VAR 0 2
64325: PPUSH
64326: CALL_OW 247
64330: PUSH
64331: LD_INT 3
64333: PUSH
64334: LD_INT 2
64336: PUSH
64337: EMPTY
64338: LIST
64339: LIST
64340: IN
64341: IFTRUE 64364
64343: PUSH
64344: LD_VAR 0 1
64348: PPUSH
64349: CALL_OW 255
64353: PPUSH
64354: LD_VAR 0 2
64358: PPUSH
64359: CALL_OW 292
64363: OR
64364: IFFALSE 64382
// ComAttackUnit ( unit , enemy ) else
64366: LD_VAR 0 1
64370: PPUSH
64371: LD_VAR 0 2
64375: PPUSH
64376: CALL_OW 115
64380: GO 64401
// ComAgressiveMove ( unit , x , y ) ;
64382: LD_VAR 0 1
64386: PPUSH
64387: LD_VAR 0 4
64391: PPUSH
64392: LD_VAR 0 5
64396: PPUSH
64397: CALL_OW 114
// end ;
64401: LD_VAR 0 3
64405: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
64406: LD_INT 0
64408: PPUSH
64409: PPUSH
64410: PPUSH
// list := AreaToList ( area , 0 ) ;
64411: LD_ADDR_VAR 0 5
64415: PUSH
64416: LD_VAR 0 1
64420: PPUSH
64421: LD_INT 0
64423: PPUSH
64424: CALL_OW 517
64428: ST_TO_ADDR
// if not list then
64429: LD_VAR 0 5
64433: NOT
64434: IFFALSE 64438
// exit ;
64436: GO 64568
// if all then
64438: LD_VAR 0 2
64442: IFFALSE 64530
// begin for i := 1 to list [ 1 ] do
64444: LD_ADDR_VAR 0 4
64448: PUSH
64449: DOUBLE
64450: LD_INT 1
64452: DEC
64453: ST_TO_ADDR
64454: LD_VAR 0 5
64458: PUSH
64459: LD_INT 1
64461: ARRAY
64462: PUSH
64463: FOR_TO
64464: IFFALSE 64526
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
64466: LD_ADDR_VAR 0 3
64470: PUSH
64471: LD_VAR 0 3
64475: PPUSH
64476: LD_VAR 0 3
64480: PUSH
64481: LD_INT 1
64483: PLUS
64484: PPUSH
64485: LD_VAR 0 5
64489: PUSH
64490: LD_INT 1
64492: ARRAY
64493: PUSH
64494: LD_VAR 0 4
64498: ARRAY
64499: PUSH
64500: LD_VAR 0 5
64504: PUSH
64505: LD_INT 2
64507: ARRAY
64508: PUSH
64509: LD_VAR 0 4
64513: ARRAY
64514: PUSH
64515: EMPTY
64516: LIST
64517: LIST
64518: PPUSH
64519: CALL_OW 1
64523: ST_TO_ADDR
64524: GO 64463
64526: POP
64527: POP
// exit ;
64528: GO 64568
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
64530: LD_ADDR_VAR 0 3
64534: PUSH
64535: LD_VAR 0 5
64539: PUSH
64540: LD_INT 1
64542: ARRAY
64543: PUSH
64544: LD_INT 1
64546: ARRAY
64547: PUSH
64548: LD_VAR 0 5
64552: PUSH
64553: LD_INT 2
64555: ARRAY
64556: PUSH
64557: LD_INT 1
64559: ARRAY
64560: PUSH
64561: EMPTY
64562: LIST
64563: LIST
64564: PUSH
64565: EMPTY
64566: LIST
64567: ST_TO_ADDR
// end ;
64568: LD_VAR 0 3
64572: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
64573: LD_INT 0
64575: PPUSH
64576: PPUSH
// list := AreaToList ( area , 0 ) ;
64577: LD_ADDR_VAR 0 4
64581: PUSH
64582: LD_VAR 0 1
64586: PPUSH
64587: LD_INT 0
64589: PPUSH
64590: CALL_OW 517
64594: ST_TO_ADDR
// if not list then
64595: LD_VAR 0 4
64599: NOT
64600: IFFALSE 64604
// exit ;
64602: GO 64645
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
64604: LD_ADDR_VAR 0 3
64608: PUSH
64609: LD_VAR 0 4
64613: PUSH
64614: LD_INT 1
64616: ARRAY
64617: PUSH
64618: LD_INT 1
64620: ARRAY
64621: PUSH
64622: LD_VAR 0 4
64626: PUSH
64627: LD_INT 2
64629: ARRAY
64630: PUSH
64631: LD_INT 1
64633: ARRAY
64634: PUSH
64635: LD_VAR 0 2
64639: PUSH
64640: EMPTY
64641: LIST
64642: LIST
64643: LIST
64644: ST_TO_ADDR
// end ;
64645: LD_VAR 0 3
64649: RET
// export function First ( array ) ; begin
64650: LD_INT 0
64652: PPUSH
// if not array then
64653: LD_VAR 0 1
64657: NOT
64658: IFFALSE 64662
// exit ;
64660: GO 64676
// result := array [ 1 ] ;
64662: LD_ADDR_VAR 0 2
64666: PUSH
64667: LD_VAR 0 1
64671: PUSH
64672: LD_INT 1
64674: ARRAY
64675: ST_TO_ADDR
// end ;
64676: LD_VAR 0 2
64680: RET
// export function Last ( array ) ; begin
64681: LD_INT 0
64683: PPUSH
// if not array then
64684: LD_VAR 0 1
64688: NOT
64689: IFFALSE 64693
// exit ;
64691: GO 64709
// result := array [ array ] ;
64693: LD_ADDR_VAR 0 2
64697: PUSH
64698: LD_VAR 0 1
64702: PUSH
64703: LD_VAR 0 1
64707: ARRAY
64708: ST_TO_ADDR
// end ;
64709: LD_VAR 0 2
64713: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
64714: LD_INT 0
64716: PPUSH
64717: PPUSH
// result := [ ] ;
64718: LD_ADDR_VAR 0 5
64722: PUSH
64723: EMPTY
64724: ST_TO_ADDR
// if not array then
64725: LD_VAR 0 1
64729: NOT
64730: IFFALSE 64734
// exit ;
64732: GO 64846
// for i := 1 to array do
64734: LD_ADDR_VAR 0 6
64738: PUSH
64739: DOUBLE
64740: LD_INT 1
64742: DEC
64743: ST_TO_ADDR
64744: LD_VAR 0 1
64748: PUSH
64749: FOR_TO
64750: IFFALSE 64844
// if array [ i ] [ index ] = value then
64752: LD_VAR 0 1
64756: PUSH
64757: LD_VAR 0 6
64761: ARRAY
64762: PUSH
64763: LD_VAR 0 2
64767: ARRAY
64768: PUSH
64769: LD_VAR 0 3
64773: EQUAL
64774: IFFALSE 64842
// begin if indexColumn then
64776: LD_VAR 0 4
64780: IFFALSE 64816
// result := Join ( result , array [ i ] [ indexColumn ] ) else
64782: LD_ADDR_VAR 0 5
64786: PUSH
64787: LD_VAR 0 5
64791: PPUSH
64792: LD_VAR 0 1
64796: PUSH
64797: LD_VAR 0 6
64801: ARRAY
64802: PUSH
64803: LD_VAR 0 4
64807: ARRAY
64808: PPUSH
64809: CALL 59854 0 2
64813: ST_TO_ADDR
64814: GO 64842
// result := Join ( result , array [ i ] ) ;
64816: LD_ADDR_VAR 0 5
64820: PUSH
64821: LD_VAR 0 5
64825: PPUSH
64826: LD_VAR 0 1
64830: PUSH
64831: LD_VAR 0 6
64835: ARRAY
64836: PPUSH
64837: CALL 59854 0 2
64841: ST_TO_ADDR
// end ;
64842: GO 64749
64844: POP
64845: POP
// end ;
64846: LD_VAR 0 5
64850: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
64851: LD_INT 0
64853: PPUSH
// if not vehicles or not parkingPoint then
64854: LD_VAR 0 1
64858: NOT
64859: IFTRUE 64868
64861: PUSH
64862: LD_VAR 0 2
64866: NOT
64867: OR
64868: IFFALSE 64872
// exit ;
64870: GO 64970
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
64872: LD_ADDR_VAR 0 1
64876: PUSH
64877: LD_VAR 0 1
64881: PPUSH
64882: LD_INT 50
64884: PUSH
64885: EMPTY
64886: LIST
64887: PUSH
64888: LD_INT 3
64890: PUSH
64891: LD_INT 92
64893: PUSH
64894: LD_VAR 0 2
64898: PUSH
64899: LD_INT 1
64901: ARRAY
64902: PUSH
64903: LD_VAR 0 2
64907: PUSH
64908: LD_INT 2
64910: ARRAY
64911: PUSH
64912: LD_INT 8
64914: PUSH
64915: EMPTY
64916: LIST
64917: LIST
64918: LIST
64919: LIST
64920: PUSH
64921: EMPTY
64922: LIST
64923: LIST
64924: PUSH
64925: EMPTY
64926: LIST
64927: LIST
64928: PPUSH
64929: CALL_OW 72
64933: ST_TO_ADDR
// if not vehicles then
64934: LD_VAR 0 1
64938: NOT
64939: IFFALSE 64943
// exit ;
64941: GO 64970
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
64943: LD_VAR 0 1
64947: PPUSH
64948: LD_VAR 0 2
64952: PUSH
64953: LD_INT 1
64955: ARRAY
64956: PPUSH
64957: LD_VAR 0 2
64961: PUSH
64962: LD_INT 2
64964: ARRAY
64965: PPUSH
64966: CALL_OW 111
// end ;
64970: LD_VAR 0 3
64974: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
64975: LD_INT 0
64977: PPUSH
64978: PPUSH
64979: PPUSH
// if not side or not area then
64980: LD_VAR 0 1
64984: NOT
64985: IFTRUE 64994
64987: PUSH
64988: LD_VAR 0 2
64992: NOT
64993: OR
64994: IFFALSE 64998
// exit ;
64996: GO 65117
// tmp := AreaToList ( area , 0 ) ;
64998: LD_ADDR_VAR 0 5
65002: PUSH
65003: LD_VAR 0 2
65007: PPUSH
65008: LD_INT 0
65010: PPUSH
65011: CALL_OW 517
65015: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
65016: LD_ADDR_VAR 0 4
65020: PUSH
65021: DOUBLE
65022: LD_INT 1
65024: DEC
65025: ST_TO_ADDR
65026: LD_VAR 0 5
65030: PUSH
65031: LD_INT 1
65033: ARRAY
65034: PUSH
65035: FOR_TO
65036: IFFALSE 65115
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
65038: LD_VAR 0 5
65042: PUSH
65043: LD_INT 1
65045: ARRAY
65046: PUSH
65047: LD_VAR 0 4
65051: ARRAY
65052: PPUSH
65053: LD_VAR 0 5
65057: PUSH
65058: LD_INT 2
65060: ARRAY
65061: PUSH
65062: LD_VAR 0 4
65066: ARRAY
65067: PPUSH
65068: CALL_OW 351
65072: IFFALSE 65113
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
65074: LD_VAR 0 5
65078: PUSH
65079: LD_INT 1
65081: ARRAY
65082: PUSH
65083: LD_VAR 0 4
65087: ARRAY
65088: PPUSH
65089: LD_VAR 0 5
65093: PUSH
65094: LD_INT 2
65096: ARRAY
65097: PUSH
65098: LD_VAR 0 4
65102: ARRAY
65103: PPUSH
65104: LD_VAR 0 1
65108: PPUSH
65109: CALL_OW 244
// end ;
65113: GO 65035
65115: POP
65116: POP
// end ;
65117: LD_VAR 0 3
65121: RET
// export function UniqueArray ( array ) ; var i ; begin
65122: LD_INT 0
65124: PPUSH
65125: PPUSH
// result := [ ] ;
65126: LD_ADDR_VAR 0 2
65130: PUSH
65131: EMPTY
65132: ST_TO_ADDR
// if not array then
65133: LD_VAR 0 1
65137: NOT
65138: IFFALSE 65142
// exit ;
65140: GO 65203
// for i := 1 to array do
65142: LD_ADDR_VAR 0 3
65146: PUSH
65147: DOUBLE
65148: LD_INT 1
65150: DEC
65151: ST_TO_ADDR
65152: LD_VAR 0 1
65156: PUSH
65157: FOR_TO
65158: IFFALSE 65201
// if not array [ i ] in result then
65160: LD_VAR 0 1
65164: PUSH
65165: LD_VAR 0 3
65169: ARRAY
65170: PUSH
65171: LD_VAR 0 2
65175: IN
65176: NOT
65177: IFFALSE 65199
// result := Join ( result , i ) ;
65179: LD_ADDR_VAR 0 2
65183: PUSH
65184: LD_VAR 0 2
65188: PPUSH
65189: LD_VAR 0 3
65193: PPUSH
65194: CALL 59854 0 2
65198: ST_TO_ADDR
65199: GO 65157
65201: POP
65202: POP
// end ; end_of_file
65203: LD_VAR 0 2
65207: RET
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeFamine do var i , canWin ;
65208: LD_EXP 48
65212: IFFALSE 65220
65214: PUSH
65215: CALL 65430 0 0
65219: AND
65220: IFFALSE 65228
65222: PUSH
65223: LD_OWVAR 4
65227: AND
65228: IFFALSE 65427
65230: GO 65232
65232: DISABLE
65233: LD_INT 0
65235: PPUSH
65236: PPUSH
// begin canWin := false ;
65237: LD_ADDR_VAR 0 2
65241: PUSH
65242: LD_INT 0
65244: ST_TO_ADDR
// if not HasPower ( your_side ) then
65245: LD_OWVAR 2
65249: PPUSH
65250: CALL 65472 0 1
65254: NOT
65255: IFFALSE 65266
// begin Multiplayer_Loose_Message ;
65257: CALL_OW 521
// enable ( mpLose ) ;
65261: LD_INT 102
65263: ENABLE_MARKED
// end else
65264: GO 65427
// begin canWin := true ;
65266: LD_ADDR_VAR 0 2
65270: PUSH
65271: LD_INT 1
65273: ST_TO_ADDR
// for i := 1 to 8 do
65274: LD_ADDR_VAR 0 1
65278: PUSH
65279: DOUBLE
65280: LD_INT 1
65282: DEC
65283: ST_TO_ADDR
65284: LD_INT 8
65286: PUSH
65287: FOR_TO
65288: IFFALSE 65413
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
65290: LD_EXP 16
65294: PUSH
65295: LD_VAR 0 1
65299: ARRAY
65300: IFFALSE 65313
65302: PUSH
65303: LD_VAR 0 1
65307: PPUSH
65308: CALL_OW 108
65312: AND
65313: IFFALSE 65327
65315: PUSH
65316: LD_VAR 0 1
65320: PUSH
65321: LD_OWVAR 2
65325: NONEQUAL
65326: AND
65327: IFFALSE 65411
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
65329: LD_EXP 17
65333: PUSH
65334: LD_VAR 0 1
65338: ARRAY
65339: NOT
65340: IFTRUE 65388
65342: PUSH
65343: LD_EXP 17
65347: PUSH
65348: LD_VAR 0 1
65352: ARRAY
65353: PUSH
65354: LD_EXP 17
65358: PUSH
65359: LD_OWVAR 2
65363: ARRAY
65364: NONEQUAL
65365: IFFALSE 65387
65367: PUSH
65368: LD_OWVAR 2
65372: PPUSH
65373: LD_VAR 0 1
65377: PPUSH
65378: CALL_OW 81
65382: PUSH
65383: LD_INT 1
65385: NONEQUAL
65386: AND
65387: OR
65388: IFFALSE 65411
// if HasPower ( i ) then
65390: LD_VAR 0 1
65394: PPUSH
65395: CALL 65472 0 1
65399: IFFALSE 65411
// begin canWin := false ;
65401: LD_ADDR_VAR 0 2
65405: PUSH
65406: LD_INT 0
65408: ST_TO_ADDR
// break ;
65409: GO 65413
// end ;
65411: GO 65287
65413: POP
65414: POP
// if canWin then
65415: LD_VAR 0 2
65419: IFFALSE 65426
// enable ( mpWin ) else
65421: LD_INT 101
65423: ENABLE_MARKED
65424: GO 65427
// enable ;
65426: ENABLE
// end ; end ;
65427: PPOPN 2
65429: END
// function CanWinLoose ; begin
65430: LD_INT 0
65432: PPUSH
// result := true ;
65433: LD_ADDR_VAR 0 1
65437: PUSH
65438: LD_INT 1
65440: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
65441: CALL_OW 531
65445: IFFALSE 65457
65447: PUSH
65448: CALL_OW 519
65452: PUSH
65453: LD_INT 1
65455: GREATER
65456: AND
65457: IFFALSE 65467
// result := false ;
65459: LD_ADDR_VAR 0 1
65463: PUSH
65464: LD_INT 0
65466: ST_TO_ADDR
// end ;
65467: LD_VAR 0 1
65471: RET
// function HasPower ( i ) ; begin
65472: LD_INT 0
65474: PPUSH
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
65475: LD_ADDR_VAR 0 2
65479: PUSH
65480: LD_INT 22
65482: PUSH
65483: LD_VAR 0 1
65487: PUSH
65488: EMPTY
65489: LIST
65490: LIST
65491: PUSH
65492: LD_INT 2
65494: PUSH
65495: LD_INT 21
65497: PUSH
65498: LD_INT 1
65500: PUSH
65501: EMPTY
65502: LIST
65503: LIST
65504: PUSH
65505: LD_INT 33
65507: PUSH
65508: LD_INT 3
65510: PUSH
65511: EMPTY
65512: LIST
65513: LIST
65514: PUSH
65515: LD_INT 33
65517: PUSH
65518: LD_INT 5
65520: PUSH
65521: EMPTY
65522: LIST
65523: LIST
65524: PUSH
65525: EMPTY
65526: LIST
65527: LIST
65528: LIST
65529: LIST
65530: PUSH
65531: EMPTY
65532: LIST
65533: LIST
65534: PPUSH
65535: CALL_OW 69
65539: ST_TO_ADDR
// end ;
65540: LD_VAR 0 2
65544: RET
// export function FamineDeposits ( areas , values , type ) ; var i , j , list ; begin
65545: LD_INT 0
65547: PPUSH
65548: PPUSH
65549: PPUSH
65550: PPUSH
// if not areas or not values or not type in [ mat_oil , mat_siberit ] then
65551: LD_VAR 0 1
65555: NOT
65556: IFTRUE 65565
65558: PUSH
65559: LD_VAR 0 2
65563: NOT
65564: OR
65565: IFTRUE 65585
65567: PUSH
65568: LD_VAR 0 3
65572: PUSH
65573: LD_INT 2
65575: PUSH
65576: LD_INT 3
65578: PUSH
65579: EMPTY
65580: LIST
65581: LIST
65582: IN
65583: NOT
65584: OR
65585: IFFALSE 65589
// exit ;
65587: GO 65839
// for i := 1 to Count ( areas ) do
65589: LD_ADDR_VAR 0 5
65593: PUSH
65594: DOUBLE
65595: LD_INT 1
65597: DEC
65598: ST_TO_ADDR
65599: LD_VAR 0 1
65603: PPUSH
65604: CALL 23922 0 1
65608: PUSH
65609: FOR_TO
65610: IFFALSE 65837
// begin list := AreaToList ( areas [ i ] , 0 ) ;
65612: LD_ADDR_VAR 0 7
65616: PUSH
65617: LD_VAR 0 1
65621: PUSH
65622: LD_VAR 0 5
65626: ARRAY
65627: PPUSH
65628: LD_INT 0
65630: PPUSH
65631: CALL_OW 517
65635: ST_TO_ADDR
// for j := 1 to list [ 1 ] do
65636: LD_ADDR_VAR 0 6
65640: PUSH
65641: DOUBLE
65642: LD_INT 1
65644: DEC
65645: ST_TO_ADDR
65646: LD_VAR 0 7
65650: PUSH
65651: LD_INT 1
65653: ARRAY
65654: PUSH
65655: FOR_TO
65656: IFFALSE 65833
// begin CreateDepositXY ( list [ 1 ] [ j ] , list [ 2 ] [ j ] , type ) ;
65658: LD_VAR 0 7
65662: PUSH
65663: LD_INT 1
65665: ARRAY
65666: PUSH
65667: LD_VAR 0 6
65671: ARRAY
65672: PPUSH
65673: LD_VAR 0 7
65677: PUSH
65678: LD_INT 2
65680: ARRAY
65681: PUSH
65682: LD_VAR 0 6
65686: ARRAY
65687: PPUSH
65688: LD_VAR 0 3
65692: PPUSH
65693: CALL_OW 62
// if type = mat_oil then
65697: LD_VAR 0 3
65701: PUSH
65702: LD_INT 2
65704: EQUAL
65705: IFFALSE 65770
// mpGlobalOilDeposits := Join ( mpGlobalOilDeposits , [ list [ 1 ] [ j ] , list [ 2 ] [ j ] , values [ i ] ] ) else
65707: LD_ADDR_EXP 50
65711: PUSH
65712: LD_EXP 50
65716: PPUSH
65717: LD_VAR 0 7
65721: PUSH
65722: LD_INT 1
65724: ARRAY
65725: PUSH
65726: LD_VAR 0 6
65730: ARRAY
65731: PUSH
65732: LD_VAR 0 7
65736: PUSH
65737: LD_INT 2
65739: ARRAY
65740: PUSH
65741: LD_VAR 0 6
65745: ARRAY
65746: PUSH
65747: LD_VAR 0 2
65751: PUSH
65752: LD_VAR 0 5
65756: ARRAY
65757: PUSH
65758: EMPTY
65759: LIST
65760: LIST
65761: LIST
65762: PPUSH
65763: CALL 59854 0 2
65767: ST_TO_ADDR
65768: GO 65831
// mpGlobalSibDeposits := Join ( mpGlobalSibDeposits , [ list [ 1 ] [ j ] , list [ 2 ] [ j ] , values [ i ] ] ) end ;
65770: LD_ADDR_EXP 51
65774: PUSH
65775: LD_EXP 51
65779: PPUSH
65780: LD_VAR 0 7
65784: PUSH
65785: LD_INT 1
65787: ARRAY
65788: PUSH
65789: LD_VAR 0 6
65793: ARRAY
65794: PUSH
65795: LD_VAR 0 7
65799: PUSH
65800: LD_INT 2
65802: ARRAY
65803: PUSH
65804: LD_VAR 0 6
65808: ARRAY
65809: PUSH
65810: LD_VAR 0 2
65814: PUSH
65815: LD_VAR 0 5
65819: ARRAY
65820: PUSH
65821: EMPTY
65822: LIST
65823: LIST
65824: LIST
65825: PPUSH
65826: CALL 59854 0 2
65830: ST_TO_ADDR
65831: GO 65655
65833: POP
65834: POP
// end ;
65835: GO 65609
65837: POP
65838: POP
// end ; end_of_file
65839: LD_VAR 0 4
65843: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin end ;
65844: PPOPN 6
65846: END
// on MapStart ( p ) do begin if mpGameType = GameTypeCoop then
65847: LD_EXP 12
65851: PUSH
65852: LD_INT 4
65854: EQUAL
65855: IFFALSE 65891
// begin ToLua ( setGameDifficulty( & Difficulty & ) ) ;
65857: LD_STRING setGameDifficulty(
65859: PUSH
65860: LD_OWVAR 67
65864: STR
65865: PUSH
65866: LD_STRING )
65868: STR
65869: PPUSH
65870: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
65874: LD_STRING displayDifficulty(
65876: PUSH
65877: LD_OWVAR 67
65881: STR
65882: PUSH
65883: LD_STRING )
65885: STR
65886: PPUSH
65887: CALL_OW 559
// end ; SOS_MapStart ( ) ;
65891: CALL 14874 0 0
// end ;
65895: PPOPN 1
65897: END
