// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 112 0 0
// SetAreaMapShowCustom ( area2 , 1 ) ;
   8: LD_INT 2
  10: PPUSH
  11: LD_INT 1
  13: PPUSH
  14: CALL 19 0 2
// end ;
  18: END
// function SetAreaMapShowCustom ( area , mode ) ; var i , tmp ; begin
  19: LD_INT 0
  21: PPUSH
  22: PPUSH
  23: PPUSH
// tmp := AreaToList ( area , 0 ) ;
  24: LD_ADDR_VAR 0 5
  28: PUSH
  29: LD_VAR 0 1
  33: PPUSH
  34: LD_INT 0
  36: PPUSH
  37: CALL_OW 517
  41: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
  42: LD_ADDR_VAR 0 4
  46: PUSH
  47: DOUBLE
  48: LD_INT 1
  50: DEC
  51: ST_TO_ADDR
  52: LD_VAR 0 5
  56: PUSH
  57: LD_INT 1
  59: ARRAY
  60: PUSH
  61: FOR_TO
  62: IFFALSE 105
// SetAreaMapShowHex ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , mode ) ;
  64: LD_VAR 0 5
  68: PUSH
  69: LD_INT 1
  71: ARRAY
  72: PUSH
  73: LD_VAR 0 4
  77: ARRAY
  78: PPUSH
  79: LD_VAR 0 5
  83: PUSH
  84: LD_INT 2
  86: ARRAY
  87: PUSH
  88: LD_VAR 0 4
  92: ARRAY
  93: PPUSH
  94: LD_VAR 0 2
  98: PPUSH
  99: CALL_OW 598
 103: GO 61
 105: POP
 106: POP
// end ;
 107: LD_VAR 0 3
 111: RET
// var t ; function Init ; begin
 112: LD_INT 0
 114: PPUSH
// t := 0 0$0 ;
 115: LD_ADDR_LOC 1
 119: PUSH
 120: LD_INT 0
 122: ST_TO_ADDR
// CreateResourcesXY ( mat_cans , 5 , 63 , 64 , false ) ;
 123: LD_INT 1
 125: PPUSH
 126: LD_INT 5
 128: PPUSH
 129: LD_INT 63
 131: PPUSH
 132: LD_INT 64
 134: PPUSH
 135: LD_INT 0
 137: PPUSH
 138: CALL_OW 58
// wait ( 0 0$1 ) ;
 142: LD_INT 35
 144: PPUSH
 145: CALL_OW 67
// CreateResourcesXY ( mat_cans , 4 , 63 , 64 , false ) ;
 149: LD_INT 1
 151: PPUSH
 152: LD_INT 4
 154: PPUSH
 155: LD_INT 63
 157: PPUSH
 158: LD_INT 64
 160: PPUSH
 161: LD_INT 0
 163: PPUSH
 164: CALL_OW 58
// end ;
 168: LD_VAR 0 1
 172: RET
// function GetAllLabKind ( side , kinds ) ; var i , j , tmp ; begin
 173: LD_INT 0
 175: PPUSH
 176: PPUSH
 177: PPUSH
 178: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
 179: LD_ADDR_VAR 0 6
 183: PUSH
 184: LD_INT 22
 186: PUSH
 187: LD_VAR 0 1
 191: PUSH
 192: EMPTY
 193: LIST
 194: LIST
 195: PUSH
 196: LD_INT 2
 198: PUSH
 199: LD_INT 30
 201: PUSH
 202: LD_INT 7
 204: PUSH
 205: EMPTY
 206: LIST
 207: LIST
 208: PUSH
 209: LD_INT 30
 211: PUSH
 212: LD_INT 8
 214: PUSH
 215: EMPTY
 216: LIST
 217: LIST
 218: PUSH
 219: EMPTY
 220: LIST
 221: LIST
 222: LIST
 223: PUSH
 224: EMPTY
 225: LIST
 226: LIST
 227: PPUSH
 228: CALL_OW 69
 232: ST_TO_ADDR
// if not tmp or not kinds then
 233: LD_VAR 0 6
 237: NOT
 238: PUSH
 239: LD_VAR 0 2
 243: NOT
 244: OR
 245: IFFALSE 249
// exit ;
 247: GO 358
// result := 0 ;
 249: LD_ADDR_VAR 0 3
 253: PUSH
 254: LD_INT 0
 256: ST_TO_ADDR
// for i in tmp do
 257: LD_ADDR_VAR 0 4
 261: PUSH
 262: LD_VAR 0 6
 266: PUSH
 267: FOR_IN
 268: IFFALSE 356
// for j := 1 to 2 do
 270: LD_ADDR_VAR 0 5
 274: PUSH
 275: DOUBLE
 276: LD_INT 1
 278: DEC
 279: ST_TO_ADDR
 280: LD_INT 2
 282: PUSH
 283: FOR_TO
 284: IFFALSE 352
// if GetLabKind ( i , j ) in kinds then
 286: LD_VAR 0 4
 290: PPUSH
 291: LD_VAR 0 5
 295: PPUSH
 296: CALL_OW 268
 300: PUSH
 301: LD_VAR 0 2
 305: IN
 306: IFFALSE 350
// begin kinds := kinds diff GetLabKind ( i , j ) ;
 308: LD_ADDR_VAR 0 2
 312: PUSH
 313: LD_VAR 0 2
 317: PUSH
 318: LD_VAR 0 4
 322: PPUSH
 323: LD_VAR 0 5
 327: PPUSH
 328: CALL_OW 268
 332: DIFF
 333: ST_TO_ADDR
// result := result + 1 ;
 334: LD_ADDR_VAR 0 3
 338: PUSH
 339: LD_VAR 0 3
 343: PUSH
 344: LD_INT 1
 346: PLUS
 347: ST_TO_ADDR
// continue ;
 348: GO 283
// end ;
 350: GO 283
 352: POP
 353: POP
 354: GO 267
 356: POP
 357: POP
// end ;
 358: LD_VAR 0 3
 362: RET
// on VehicleRecycled ( fac , veh , side , nat , x , y , dir , chassis , control , engine , weapon ) do begin display_strings := weapon ;
 363: LD_ADDR_OWVAR 47
 367: PUSH
 368: LD_VAR 0 11
 372: ST_TO_ADDR
// end ;
 373: PPOPN 11
 375: END
// export Omar ; every 0 0$1 do
 376: GO 378
 378: DISABLE
// begin uc_side := 1 ;
 379: LD_ADDR_OWVAR 20
 383: PUSH
 384: LD_INT 1
 386: ST_TO_ADDR
// uc_nation := 2 ;
 387: LD_ADDR_OWVAR 21
 391: PUSH
 392: LD_INT 2
 394: ST_TO_ADDR
// hc_class := class_desert_warior ;
 395: LD_ADDR_OWVAR 28
 399: PUSH
 400: LD_INT 11
 402: ST_TO_ADDR
// hc_sex := sex_male ;
 403: LD_ADDR_OWVAR 27
 407: PUSH
 408: LD_INT 1
 410: ST_TO_ADDR
// hc_name := Omar ;
 411: LD_ADDR_OWVAR 26
 415: PUSH
 416: LD_STRING Omar
 418: ST_TO_ADDR
// Omar := CreateHuman ;
 419: LD_ADDR_EXP 1
 423: PUSH
 424: CALL_OW 44
 428: ST_TO_ADDR
// SetTag ( Omar , 500 ) ;
 429: LD_EXP 1
 433: PPUSH
 434: LD_INT 500
 436: PPUSH
 437: CALL_OW 109
// PlaceUnitXY ( Omar , 27 , 27 , false ) ;
 441: LD_EXP 1
 445: PPUSH
 446: LD_INT 27
 448: PPUSH
 449: LD_INT 27
 451: PPUSH
 452: LD_INT 0
 454: PPUSH
 455: CALL_OW 48
// end ; end_of_file
 459: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
 460: LD_INT 0
 462: PPUSH
 463: PPUSH
// if exist_mode then
 464: LD_VAR 0 2
 468: IFFALSE 493
// unit := CreateCharacter ( prefix & ident ) else
 470: LD_ADDR_VAR 0 5
 474: PUSH
 475: LD_VAR 0 3
 479: PUSH
 480: LD_VAR 0 1
 484: STR
 485: PPUSH
 486: CALL_OW 34
 490: ST_TO_ADDR
 491: GO 508
// unit := NewCharacter ( ident ) ;
 493: LD_ADDR_VAR 0 5
 497: PUSH
 498: LD_VAR 0 1
 502: PPUSH
 503: CALL_OW 25
 507: ST_TO_ADDR
// result := unit ;
 508: LD_ADDR_VAR 0 4
 512: PUSH
 513: LD_VAR 0 5
 517: ST_TO_ADDR
// end ;
 518: LD_VAR 0 4
 522: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
 523: LD_INT 0
 525: PPUSH
 526: PPUSH
// if not side or not nation then
 527: LD_VAR 0 1
 531: NOT
 532: PUSH
 533: LD_VAR 0 2
 537: NOT
 538: OR
 539: IFFALSE 543
// exit ;
 541: GO 1311
// case nation of nation_american :
 543: LD_VAR 0 2
 547: PUSH
 548: LD_INT 1
 550: DOUBLE
 551: EQUAL
 552: IFTRUE 556
 554: GO 770
 556: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
 557: LD_ADDR_VAR 0 4
 561: PUSH
 562: LD_INT 35
 564: PUSH
 565: LD_INT 45
 567: PUSH
 568: LD_INT 46
 570: PUSH
 571: LD_INT 47
 573: PUSH
 574: LD_INT 82
 576: PUSH
 577: LD_INT 83
 579: PUSH
 580: LD_INT 84
 582: PUSH
 583: LD_INT 85
 585: PUSH
 586: LD_INT 86
 588: PUSH
 589: LD_INT 1
 591: PUSH
 592: LD_INT 2
 594: PUSH
 595: LD_INT 6
 597: PUSH
 598: LD_INT 15
 600: PUSH
 601: LD_INT 16
 603: PUSH
 604: LD_INT 7
 606: PUSH
 607: LD_INT 12
 609: PUSH
 610: LD_INT 13
 612: PUSH
 613: LD_INT 10
 615: PUSH
 616: LD_INT 14
 618: PUSH
 619: LD_INT 20
 621: PUSH
 622: LD_INT 21
 624: PUSH
 625: LD_INT 22
 627: PUSH
 628: LD_INT 25
 630: PUSH
 631: LD_INT 32
 633: PUSH
 634: LD_INT 27
 636: PUSH
 637: LD_INT 36
 639: PUSH
 640: LD_INT 69
 642: PUSH
 643: LD_INT 39
 645: PUSH
 646: LD_INT 34
 648: PUSH
 649: LD_INT 40
 651: PUSH
 652: LD_INT 48
 654: PUSH
 655: LD_INT 49
 657: PUSH
 658: LD_INT 50
 660: PUSH
 661: LD_INT 51
 663: PUSH
 664: LD_INT 52
 666: PUSH
 667: LD_INT 53
 669: PUSH
 670: LD_INT 54
 672: PUSH
 673: LD_INT 55
 675: PUSH
 676: LD_INT 56
 678: PUSH
 679: LD_INT 57
 681: PUSH
 682: LD_INT 58
 684: PUSH
 685: LD_INT 59
 687: PUSH
 688: LD_INT 60
 690: PUSH
 691: LD_INT 61
 693: PUSH
 694: LD_INT 62
 696: PUSH
 697: LD_INT 80
 699: PUSH
 700: LD_INT 82
 702: PUSH
 703: LD_INT 83
 705: PUSH
 706: LD_INT 84
 708: PUSH
 709: LD_INT 85
 711: PUSH
 712: LD_INT 86
 714: PUSH
 715: EMPTY
 716: LIST
 717: LIST
 718: LIST
 719: LIST
 720: LIST
 721: LIST
 722: LIST
 723: LIST
 724: LIST
 725: LIST
 726: LIST
 727: LIST
 728: LIST
 729: LIST
 730: LIST
 731: LIST
 732: LIST
 733: LIST
 734: LIST
 735: LIST
 736: LIST
 737: LIST
 738: LIST
 739: LIST
 740: LIST
 741: LIST
 742: LIST
 743: LIST
 744: LIST
 745: LIST
 746: LIST
 747: LIST
 748: LIST
 749: LIST
 750: LIST
 751: LIST
 752: LIST
 753: LIST
 754: LIST
 755: LIST
 756: LIST
 757: LIST
 758: LIST
 759: LIST
 760: LIST
 761: LIST
 762: LIST
 763: LIST
 764: LIST
 765: LIST
 766: LIST
 767: ST_TO_ADDR
 768: GO 1235
 770: LD_INT 2
 772: DOUBLE
 773: EQUAL
 774: IFTRUE 778
 776: GO 1004
 778: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
 779: LD_ADDR_VAR 0 4
 783: PUSH
 784: LD_INT 35
 786: PUSH
 787: LD_INT 45
 789: PUSH
 790: LD_INT 46
 792: PUSH
 793: LD_INT 47
 795: PUSH
 796: LD_INT 82
 798: PUSH
 799: LD_INT 83
 801: PUSH
 802: LD_INT 84
 804: PUSH
 805: LD_INT 85
 807: PUSH
 808: LD_INT 87
 810: PUSH
 811: LD_INT 70
 813: PUSH
 814: LD_INT 1
 816: PUSH
 817: LD_INT 11
 819: PUSH
 820: LD_INT 3
 822: PUSH
 823: LD_INT 4
 825: PUSH
 826: LD_INT 5
 828: PUSH
 829: LD_INT 6
 831: PUSH
 832: LD_INT 15
 834: PUSH
 835: LD_INT 18
 837: PUSH
 838: LD_INT 7
 840: PUSH
 841: LD_INT 17
 843: PUSH
 844: LD_INT 8
 846: PUSH
 847: LD_INT 20
 849: PUSH
 850: LD_INT 21
 852: PUSH
 853: LD_INT 22
 855: PUSH
 856: LD_INT 72
 858: PUSH
 859: LD_INT 26
 861: PUSH
 862: LD_INT 69
 864: PUSH
 865: LD_INT 39
 867: PUSH
 868: LD_INT 40
 870: PUSH
 871: LD_INT 41
 873: PUSH
 874: LD_INT 42
 876: PUSH
 877: LD_INT 43
 879: PUSH
 880: LD_INT 48
 882: PUSH
 883: LD_INT 49
 885: PUSH
 886: LD_INT 50
 888: PUSH
 889: LD_INT 51
 891: PUSH
 892: LD_INT 52
 894: PUSH
 895: LD_INT 53
 897: PUSH
 898: LD_INT 54
 900: PUSH
 901: LD_INT 55
 903: PUSH
 904: LD_INT 56
 906: PUSH
 907: LD_INT 60
 909: PUSH
 910: LD_INT 61
 912: PUSH
 913: LD_INT 62
 915: PUSH
 916: LD_INT 66
 918: PUSH
 919: LD_INT 67
 921: PUSH
 922: LD_INT 68
 924: PUSH
 925: LD_INT 81
 927: PUSH
 928: LD_INT 82
 930: PUSH
 931: LD_INT 83
 933: PUSH
 934: LD_INT 84
 936: PUSH
 937: LD_INT 85
 939: PUSH
 940: LD_INT 87
 942: PUSH
 943: LD_INT 88
 945: PUSH
 946: EMPTY
 947: LIST
 948: LIST
 949: LIST
 950: LIST
 951: LIST
 952: LIST
 953: LIST
 954: LIST
 955: LIST
 956: LIST
 957: LIST
 958: LIST
 959: LIST
 960: LIST
 961: LIST
 962: LIST
 963: LIST
 964: LIST
 965: LIST
 966: LIST
 967: LIST
 968: LIST
 969: LIST
 970: LIST
 971: LIST
 972: LIST
 973: LIST
 974: LIST
 975: LIST
 976: LIST
 977: LIST
 978: LIST
 979: LIST
 980: LIST
 981: LIST
 982: LIST
 983: LIST
 984: LIST
 985: LIST
 986: LIST
 987: LIST
 988: LIST
 989: LIST
 990: LIST
 991: LIST
 992: LIST
 993: LIST
 994: LIST
 995: LIST
 996: LIST
 997: LIST
 998: LIST
 999: LIST
1000: LIST
1001: ST_TO_ADDR
1002: GO 1235
1004: LD_INT 3
1006: DOUBLE
1007: EQUAL
1008: IFTRUE 1012
1010: GO 1234
1012: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
1013: LD_ADDR_VAR 0 4
1017: PUSH
1018: LD_INT 46
1020: PUSH
1021: LD_INT 47
1023: PUSH
1024: LD_INT 1
1026: PUSH
1027: LD_INT 2
1029: PUSH
1030: LD_INT 82
1032: PUSH
1033: LD_INT 83
1035: PUSH
1036: LD_INT 84
1038: PUSH
1039: LD_INT 85
1041: PUSH
1042: LD_INT 86
1044: PUSH
1045: LD_INT 11
1047: PUSH
1048: LD_INT 9
1050: PUSH
1051: LD_INT 20
1053: PUSH
1054: LD_INT 19
1056: PUSH
1057: LD_INT 21
1059: PUSH
1060: LD_INT 24
1062: PUSH
1063: LD_INT 22
1065: PUSH
1066: LD_INT 25
1068: PUSH
1069: LD_INT 28
1071: PUSH
1072: LD_INT 29
1074: PUSH
1075: LD_INT 30
1077: PUSH
1078: LD_INT 31
1080: PUSH
1081: LD_INT 37
1083: PUSH
1084: LD_INT 38
1086: PUSH
1087: LD_INT 32
1089: PUSH
1090: LD_INT 27
1092: PUSH
1093: LD_INT 33
1095: PUSH
1096: LD_INT 69
1098: PUSH
1099: LD_INT 39
1101: PUSH
1102: LD_INT 34
1104: PUSH
1105: LD_INT 40
1107: PUSH
1108: LD_INT 71
1110: PUSH
1111: LD_INT 23
1113: PUSH
1114: LD_INT 44
1116: PUSH
1117: LD_INT 48
1119: PUSH
1120: LD_INT 49
1122: PUSH
1123: LD_INT 50
1125: PUSH
1126: LD_INT 51
1128: PUSH
1129: LD_INT 52
1131: PUSH
1132: LD_INT 53
1134: PUSH
1135: LD_INT 54
1137: PUSH
1138: LD_INT 55
1140: PUSH
1141: LD_INT 56
1143: PUSH
1144: LD_INT 57
1146: PUSH
1147: LD_INT 58
1149: PUSH
1150: LD_INT 59
1152: PUSH
1153: LD_INT 63
1155: PUSH
1156: LD_INT 64
1158: PUSH
1159: LD_INT 65
1161: PUSH
1162: LD_INT 82
1164: PUSH
1165: LD_INT 83
1167: PUSH
1168: LD_INT 84
1170: PUSH
1171: LD_INT 85
1173: PUSH
1174: LD_INT 86
1176: PUSH
1177: EMPTY
1178: LIST
1179: LIST
1180: LIST
1181: LIST
1182: LIST
1183: LIST
1184: LIST
1185: LIST
1186: LIST
1187: LIST
1188: LIST
1189: LIST
1190: LIST
1191: LIST
1192: LIST
1193: LIST
1194: LIST
1195: LIST
1196: LIST
1197: LIST
1198: LIST
1199: LIST
1200: LIST
1201: LIST
1202: LIST
1203: LIST
1204: LIST
1205: LIST
1206: LIST
1207: LIST
1208: LIST
1209: LIST
1210: LIST
1211: LIST
1212: LIST
1213: LIST
1214: LIST
1215: LIST
1216: LIST
1217: LIST
1218: LIST
1219: LIST
1220: LIST
1221: LIST
1222: LIST
1223: LIST
1224: LIST
1225: LIST
1226: LIST
1227: LIST
1228: LIST
1229: LIST
1230: LIST
1231: ST_TO_ADDR
1232: GO 1235
1234: POP
// if state > - 1 and state < 3 then
1235: LD_VAR 0 3
1239: PUSH
1240: LD_INT 1
1242: NEG
1243: GREATER
1244: PUSH
1245: LD_VAR 0 3
1249: PUSH
1250: LD_INT 3
1252: LESS
1253: AND
1254: IFFALSE 1311
// for i in result do
1256: LD_ADDR_VAR 0 5
1260: PUSH
1261: LD_VAR 0 4
1265: PUSH
1266: FOR_IN
1267: IFFALSE 1309
// if GetTech ( i , side ) <> state then
1269: LD_VAR 0 5
1273: PPUSH
1274: LD_VAR 0 1
1278: PPUSH
1279: CALL_OW 321
1283: PUSH
1284: LD_VAR 0 3
1288: NONEQUAL
1289: IFFALSE 1307
// result := result diff i ;
1291: LD_ADDR_VAR 0 4
1295: PUSH
1296: LD_VAR 0 4
1300: PUSH
1301: LD_VAR 0 5
1305: DIFF
1306: ST_TO_ADDR
1307: GO 1266
1309: POP
1310: POP
// end ;
1311: LD_VAR 0 4
1315: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
1316: LD_INT 0
1318: PPUSH
1319: PPUSH
1320: PPUSH
// result := true ;
1321: LD_ADDR_VAR 0 3
1325: PUSH
1326: LD_INT 1
1328: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
1329: LD_ADDR_VAR 0 5
1333: PUSH
1334: LD_VAR 0 2
1338: PPUSH
1339: CALL_OW 480
1343: ST_TO_ADDR
// if not tmp then
1344: LD_VAR 0 5
1348: NOT
1349: IFFALSE 1353
// exit ;
1351: GO 1402
// for i in tmp do
1353: LD_ADDR_VAR 0 4
1357: PUSH
1358: LD_VAR 0 5
1362: PUSH
1363: FOR_IN
1364: IFFALSE 1400
// if GetTech ( i , side ) <> state_researched then
1366: LD_VAR 0 4
1370: PPUSH
1371: LD_VAR 0 1
1375: PPUSH
1376: CALL_OW 321
1380: PUSH
1381: LD_INT 2
1383: NONEQUAL
1384: IFFALSE 1398
// begin result := false ;
1386: LD_ADDR_VAR 0 3
1390: PUSH
1391: LD_INT 0
1393: ST_TO_ADDR
// exit ;
1394: POP
1395: POP
1396: GO 1402
// end ;
1398: GO 1363
1400: POP
1401: POP
// end ;
1402: LD_VAR 0 3
1406: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
1407: LD_INT 0
1409: PPUSH
1410: PPUSH
1411: PPUSH
1412: PPUSH
1413: PPUSH
1414: PPUSH
1415: PPUSH
1416: PPUSH
1417: PPUSH
1418: PPUSH
1419: PPUSH
1420: PPUSH
1421: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
1422: LD_VAR 0 1
1426: NOT
1427: PUSH
1428: LD_VAR 0 1
1432: PPUSH
1433: CALL_OW 257
1437: PUSH
1438: LD_INT 9
1440: NONEQUAL
1441: OR
1442: IFFALSE 1446
// exit ;
1444: GO 2019
// side := GetSide ( unit ) ;
1446: LD_ADDR_VAR 0 9
1450: PUSH
1451: LD_VAR 0 1
1455: PPUSH
1456: CALL_OW 255
1460: ST_TO_ADDR
// tech_space := tech_spacanom ;
1461: LD_ADDR_VAR 0 12
1465: PUSH
1466: LD_INT 29
1468: ST_TO_ADDR
// tech_time := tech_taurad ;
1469: LD_ADDR_VAR 0 13
1473: PUSH
1474: LD_INT 28
1476: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
1477: LD_ADDR_VAR 0 11
1481: PUSH
1482: LD_VAR 0 1
1486: PPUSH
1487: CALL_OW 310
1491: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
1492: LD_VAR 0 11
1496: PPUSH
1497: CALL_OW 247
1501: PUSH
1502: LD_INT 2
1504: EQUAL
1505: IFFALSE 1509
// exit ;
1507: GO 2019
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
1509: LD_ADDR_VAR 0 8
1513: PUSH
1514: LD_INT 81
1516: PUSH
1517: LD_VAR 0 9
1521: PUSH
1522: EMPTY
1523: LIST
1524: LIST
1525: PUSH
1526: LD_INT 3
1528: PUSH
1529: LD_INT 21
1531: PUSH
1532: LD_INT 3
1534: PUSH
1535: EMPTY
1536: LIST
1537: LIST
1538: PUSH
1539: EMPTY
1540: LIST
1541: LIST
1542: PUSH
1543: EMPTY
1544: LIST
1545: LIST
1546: PPUSH
1547: CALL_OW 69
1551: ST_TO_ADDR
// if not tmp then
1552: LD_VAR 0 8
1556: NOT
1557: IFFALSE 1561
// exit ;
1559: GO 2019
// if in_unit then
1561: LD_VAR 0 11
1565: IFFALSE 1589
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
1567: LD_ADDR_VAR 0 10
1571: PUSH
1572: LD_VAR 0 8
1576: PPUSH
1577: LD_VAR 0 11
1581: PPUSH
1582: CALL_OW 74
1586: ST_TO_ADDR
1587: GO 1609
// enemy := NearestUnitToUnit ( tmp , unit ) ;
1589: LD_ADDR_VAR 0 10
1593: PUSH
1594: LD_VAR 0 8
1598: PPUSH
1599: LD_VAR 0 1
1603: PPUSH
1604: CALL_OW 74
1608: ST_TO_ADDR
// if not enemy then
1609: LD_VAR 0 10
1613: NOT
1614: IFFALSE 1618
// exit ;
1616: GO 2019
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
1618: LD_VAR 0 11
1622: PUSH
1623: LD_VAR 0 11
1627: PPUSH
1628: LD_VAR 0 10
1632: PPUSH
1633: CALL_OW 296
1637: PUSH
1638: LD_INT 13
1640: GREATER
1641: AND
1642: PUSH
1643: LD_VAR 0 1
1647: PPUSH
1648: LD_VAR 0 10
1652: PPUSH
1653: CALL_OW 296
1657: PUSH
1658: LD_INT 12
1660: GREATER
1661: OR
1662: IFFALSE 1666
// exit ;
1664: GO 2019
// missile := [ 1 ] ;
1666: LD_ADDR_VAR 0 14
1670: PUSH
1671: LD_INT 1
1673: PUSH
1674: EMPTY
1675: LIST
1676: ST_TO_ADDR
// if Researched ( side , tech_space ) then
1677: LD_VAR 0 9
1681: PPUSH
1682: LD_VAR 0 12
1686: PPUSH
1687: CALL_OW 325
1691: IFFALSE 1720
// missile := Replace ( missile , missile + 1 , 2 ) ;
1693: LD_ADDR_VAR 0 14
1697: PUSH
1698: LD_VAR 0 14
1702: PPUSH
1703: LD_VAR 0 14
1707: PUSH
1708: LD_INT 1
1710: PLUS
1711: PPUSH
1712: LD_INT 2
1714: PPUSH
1715: CALL_OW 1
1719: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
1720: LD_VAR 0 9
1724: PPUSH
1725: LD_VAR 0 13
1729: PPUSH
1730: CALL_OW 325
1734: PUSH
1735: LD_VAR 0 10
1739: PPUSH
1740: CALL_OW 255
1744: PPUSH
1745: LD_VAR 0 13
1749: PPUSH
1750: CALL_OW 325
1754: NOT
1755: AND
1756: IFFALSE 1785
// missile := Replace ( missile , missile + 1 , 3 ) ;
1758: LD_ADDR_VAR 0 14
1762: PUSH
1763: LD_VAR 0 14
1767: PPUSH
1768: LD_VAR 0 14
1772: PUSH
1773: LD_INT 1
1775: PLUS
1776: PPUSH
1777: LD_INT 3
1779: PPUSH
1780: CALL_OW 1
1784: ST_TO_ADDR
// if missile < 2 then
1785: LD_VAR 0 14
1789: PUSH
1790: LD_INT 2
1792: LESS
1793: IFFALSE 1797
// exit ;
1795: GO 2019
// x := GetX ( enemy ) ;
1797: LD_ADDR_VAR 0 4
1801: PUSH
1802: LD_VAR 0 10
1806: PPUSH
1807: CALL_OW 250
1811: ST_TO_ADDR
// y := GetY ( enemy ) ;
1812: LD_ADDR_VAR 0 5
1816: PUSH
1817: LD_VAR 0 10
1821: PPUSH
1822: CALL_OW 251
1826: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
1827: LD_ADDR_VAR 0 6
1831: PUSH
1832: LD_VAR 0 4
1836: PUSH
1837: LD_INT 1
1839: NEG
1840: PPUSH
1841: LD_INT 1
1843: PPUSH
1844: CALL_OW 12
1848: PLUS
1849: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
1850: LD_ADDR_VAR 0 7
1854: PUSH
1855: LD_VAR 0 5
1859: PUSH
1860: LD_INT 1
1862: NEG
1863: PPUSH
1864: LD_INT 1
1866: PPUSH
1867: CALL_OW 12
1871: PLUS
1872: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
1873: LD_VAR 0 6
1877: PPUSH
1878: LD_VAR 0 7
1882: PPUSH
1883: CALL_OW 488
1887: NOT
1888: IFFALSE 1910
// begin _x := x ;
1890: LD_ADDR_VAR 0 6
1894: PUSH
1895: LD_VAR 0 4
1899: ST_TO_ADDR
// _y := y ;
1900: LD_ADDR_VAR 0 7
1904: PUSH
1905: LD_VAR 0 5
1909: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
1910: LD_ADDR_VAR 0 3
1914: PUSH
1915: LD_INT 1
1917: PPUSH
1918: LD_VAR 0 14
1922: PPUSH
1923: CALL_OW 12
1927: ST_TO_ADDR
// case i of 1 :
1928: LD_VAR 0 3
1932: PUSH
1933: LD_INT 1
1935: DOUBLE
1936: EQUAL
1937: IFTRUE 1941
1939: GO 1958
1941: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
1942: LD_VAR 0 1
1946: PPUSH
1947: LD_VAR 0 10
1951: PPUSH
1952: CALL_OW 115
1956: GO 2019
1958: LD_INT 2
1960: DOUBLE
1961: EQUAL
1962: IFTRUE 1966
1964: GO 1988
1966: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
1967: LD_VAR 0 1
1971: PPUSH
1972: LD_VAR 0 6
1976: PPUSH
1977: LD_VAR 0 7
1981: PPUSH
1982: CALL_OW 153
1986: GO 2019
1988: LD_INT 3
1990: DOUBLE
1991: EQUAL
1992: IFTRUE 1996
1994: GO 2018
1996: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
1997: LD_VAR 0 1
2001: PPUSH
2002: LD_VAR 0 6
2006: PPUSH
2007: LD_VAR 0 7
2011: PPUSH
2012: CALL_OW 154
2016: GO 2019
2018: POP
// end ;
2019: LD_VAR 0 2
2023: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
2024: LD_INT 0
2026: PPUSH
2027: PPUSH
2028: PPUSH
2029: PPUSH
2030: PPUSH
2031: PPUSH
// if not unit or not building then
2032: LD_VAR 0 1
2036: NOT
2037: PUSH
2038: LD_VAR 0 2
2042: NOT
2043: OR
2044: IFFALSE 2048
// exit ;
2046: GO 2206
// x := GetX ( building ) ;
2048: LD_ADDR_VAR 0 5
2052: PUSH
2053: LD_VAR 0 2
2057: PPUSH
2058: CALL_OW 250
2062: ST_TO_ADDR
// y := GetY ( building ) ;
2063: LD_ADDR_VAR 0 6
2067: PUSH
2068: LD_VAR 0 2
2072: PPUSH
2073: CALL_OW 251
2077: ST_TO_ADDR
// for i = 0 to 5 do
2078: LD_ADDR_VAR 0 4
2082: PUSH
2083: DOUBLE
2084: LD_INT 0
2086: DEC
2087: ST_TO_ADDR
2088: LD_INT 5
2090: PUSH
2091: FOR_TO
2092: IFFALSE 2204
// begin _x := ShiftX ( x , i , 3 ) ;
2094: LD_ADDR_VAR 0 7
2098: PUSH
2099: LD_VAR 0 5
2103: PPUSH
2104: LD_VAR 0 4
2108: PPUSH
2109: LD_INT 3
2111: PPUSH
2112: CALL_OW 272
2116: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
2117: LD_ADDR_VAR 0 8
2121: PUSH
2122: LD_VAR 0 6
2126: PPUSH
2127: LD_VAR 0 4
2131: PPUSH
2132: LD_INT 3
2134: PPUSH
2135: CALL_OW 273
2139: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
2140: LD_VAR 0 7
2144: PPUSH
2145: LD_VAR 0 8
2149: PPUSH
2150: CALL_OW 488
2154: NOT
2155: IFFALSE 2159
// continue ;
2157: GO 2091
// if HexInfo ( _x , _y ) = 0 then
2159: LD_VAR 0 7
2163: PPUSH
2164: LD_VAR 0 8
2168: PPUSH
2169: CALL_OW 428
2173: PUSH
2174: LD_INT 0
2176: EQUAL
2177: IFFALSE 2202
// begin ComMoveXY ( unit , _x , _y ) ;
2179: LD_VAR 0 1
2183: PPUSH
2184: LD_VAR 0 7
2188: PPUSH
2189: LD_VAR 0 8
2193: PPUSH
2194: CALL_OW 111
// exit ;
2198: POP
2199: POP
2200: GO 2206
// end ; end ;
2202: GO 2091
2204: POP
2205: POP
// end ;
2206: LD_VAR 0 3
2210: RET
// export function ScanBase ( side , base_area ) ; begin
2211: LD_INT 0
2213: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
2214: LD_ADDR_VAR 0 3
2218: PUSH
2219: LD_VAR 0 2
2223: PPUSH
2224: LD_INT 81
2226: PUSH
2227: LD_VAR 0 1
2231: PUSH
2232: EMPTY
2233: LIST
2234: LIST
2235: PPUSH
2236: CALL_OW 70
2240: ST_TO_ADDR
// end ;
2241: LD_VAR 0 3
2245: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
2246: LD_INT 0
2248: PPUSH
2249: PPUSH
2250: PPUSH
2251: PPUSH
// result := false ;
2252: LD_ADDR_VAR 0 2
2256: PUSH
2257: LD_INT 0
2259: ST_TO_ADDR
// side := GetSide ( unit ) ;
2260: LD_ADDR_VAR 0 3
2264: PUSH
2265: LD_VAR 0 1
2269: PPUSH
2270: CALL_OW 255
2274: ST_TO_ADDR
// nat := GetNation ( unit ) ;
2275: LD_ADDR_VAR 0 4
2279: PUSH
2280: LD_VAR 0 1
2284: PPUSH
2285: CALL_OW 248
2289: ST_TO_ADDR
// case nat of 1 :
2290: LD_VAR 0 4
2294: PUSH
2295: LD_INT 1
2297: DOUBLE
2298: EQUAL
2299: IFTRUE 2303
2301: GO 2314
2303: POP
// tech := tech_lassight ; 2 :
2304: LD_ADDR_VAR 0 5
2308: PUSH
2309: LD_INT 12
2311: ST_TO_ADDR
2312: GO 2353
2314: LD_INT 2
2316: DOUBLE
2317: EQUAL
2318: IFTRUE 2322
2320: GO 2333
2322: POP
// tech := tech_mortar ; 3 :
2323: LD_ADDR_VAR 0 5
2327: PUSH
2328: LD_INT 41
2330: ST_TO_ADDR
2331: GO 2353
2333: LD_INT 3
2335: DOUBLE
2336: EQUAL
2337: IFTRUE 2341
2339: GO 2352
2341: POP
// tech := tech_bazooka ; end ;
2342: LD_ADDR_VAR 0 5
2346: PUSH
2347: LD_INT 44
2349: ST_TO_ADDR
2350: GO 2353
2352: POP
// if Researched ( side , tech ) then
2353: LD_VAR 0 3
2357: PPUSH
2358: LD_VAR 0 5
2362: PPUSH
2363: CALL_OW 325
2367: IFFALSE 2394
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
2369: LD_ADDR_VAR 0 2
2373: PUSH
2374: LD_INT 5
2376: PUSH
2377: LD_INT 8
2379: PUSH
2380: LD_INT 9
2382: PUSH
2383: EMPTY
2384: LIST
2385: LIST
2386: LIST
2387: PUSH
2388: LD_VAR 0 4
2392: ARRAY
2393: ST_TO_ADDR
// end ;
2394: LD_VAR 0 2
2398: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
2399: LD_INT 0
2401: PPUSH
2402: PPUSH
2403: PPUSH
// if not mines then
2404: LD_VAR 0 2
2408: NOT
2409: IFFALSE 2413
// exit ;
2411: GO 2557
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
2413: LD_ADDR_VAR 0 5
2417: PUSH
2418: LD_INT 81
2420: PUSH
2421: LD_VAR 0 1
2425: PUSH
2426: EMPTY
2427: LIST
2428: LIST
2429: PUSH
2430: LD_INT 3
2432: PUSH
2433: LD_INT 21
2435: PUSH
2436: LD_INT 3
2438: PUSH
2439: EMPTY
2440: LIST
2441: LIST
2442: PUSH
2443: EMPTY
2444: LIST
2445: LIST
2446: PUSH
2447: EMPTY
2448: LIST
2449: LIST
2450: PPUSH
2451: CALL_OW 69
2455: ST_TO_ADDR
// for i in mines do
2456: LD_ADDR_VAR 0 4
2460: PUSH
2461: LD_VAR 0 2
2465: PUSH
2466: FOR_IN
2467: IFFALSE 2555
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
2469: LD_VAR 0 4
2473: PUSH
2474: LD_INT 1
2476: ARRAY
2477: PPUSH
2478: LD_VAR 0 4
2482: PUSH
2483: LD_INT 2
2485: ARRAY
2486: PPUSH
2487: CALL_OW 458
2491: NOT
2492: IFFALSE 2496
// continue ;
2494: GO 2466
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
2496: LD_VAR 0 4
2500: PUSH
2501: LD_INT 1
2503: ARRAY
2504: PPUSH
2505: LD_VAR 0 4
2509: PUSH
2510: LD_INT 2
2512: ARRAY
2513: PPUSH
2514: CALL_OW 428
2518: PUSH
2519: LD_VAR 0 5
2523: IN
2524: IFFALSE 2553
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
2526: LD_VAR 0 4
2530: PUSH
2531: LD_INT 1
2533: ARRAY
2534: PPUSH
2535: LD_VAR 0 4
2539: PUSH
2540: LD_INT 2
2542: ARRAY
2543: PPUSH
2544: LD_VAR 0 1
2548: PPUSH
2549: CALL_OW 456
// end ;
2553: GO 2466
2555: POP
2556: POP
// end ;
2557: LD_VAR 0 3
2561: RET
// export function Count ( array ) ; begin
2562: LD_INT 0
2564: PPUSH
// result := array + 0 ;
2565: LD_ADDR_VAR 0 2
2569: PUSH
2570: LD_VAR 0 1
2574: PUSH
2575: LD_INT 0
2577: PLUS
2578: ST_TO_ADDR
// end ;
2579: LD_VAR 0 2
2583: RET
// export function IsEmpty ( building ) ; begin
2584: LD_INT 0
2586: PPUSH
// if not building then
2587: LD_VAR 0 1
2591: NOT
2592: IFFALSE 2596
// exit ;
2594: GO 2639
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
2596: LD_ADDR_VAR 0 2
2600: PUSH
2601: LD_VAR 0 1
2605: PUSH
2606: LD_INT 22
2608: PUSH
2609: LD_VAR 0 1
2613: PPUSH
2614: CALL_OW 255
2618: PUSH
2619: EMPTY
2620: LIST
2621: LIST
2622: PUSH
2623: LD_INT 58
2625: PUSH
2626: EMPTY
2627: LIST
2628: PUSH
2629: EMPTY
2630: LIST
2631: LIST
2632: PPUSH
2633: CALL_OW 69
2637: IN
2638: ST_TO_ADDR
// end ;
2639: LD_VAR 0 2
2643: RET
// export function IsNotFull ( building ) ; var places ; begin
2644: LD_INT 0
2646: PPUSH
2647: PPUSH
// if not building then
2648: LD_VAR 0 1
2652: NOT
2653: IFFALSE 2657
// exit ;
2655: GO 2685
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
2657: LD_ADDR_VAR 0 2
2661: PUSH
2662: LD_VAR 0 1
2666: PPUSH
2667: LD_INT 3
2669: PUSH
2670: LD_INT 62
2672: PUSH
2673: EMPTY
2674: LIST
2675: PUSH
2676: EMPTY
2677: LIST
2678: LIST
2679: PPUSH
2680: CALL_OW 72
2684: ST_TO_ADDR
// end ;
2685: LD_VAR 0 2
2689: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
2690: LD_INT 0
2692: PPUSH
2693: PPUSH
2694: PPUSH
2695: PPUSH
// tmp := [ ] ;
2696: LD_ADDR_VAR 0 3
2700: PUSH
2701: EMPTY
2702: ST_TO_ADDR
// list := [ ] ;
2703: LD_ADDR_VAR 0 5
2707: PUSH
2708: EMPTY
2709: ST_TO_ADDR
// for i = 16 to 25 do
2710: LD_ADDR_VAR 0 4
2714: PUSH
2715: DOUBLE
2716: LD_INT 16
2718: DEC
2719: ST_TO_ADDR
2720: LD_INT 25
2722: PUSH
2723: FOR_TO
2724: IFFALSE 2797
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
2726: LD_ADDR_VAR 0 3
2730: PUSH
2731: LD_VAR 0 3
2735: PUSH
2736: LD_INT 22
2738: PUSH
2739: LD_VAR 0 1
2743: PPUSH
2744: CALL_OW 255
2748: PUSH
2749: EMPTY
2750: LIST
2751: LIST
2752: PUSH
2753: LD_INT 91
2755: PUSH
2756: LD_VAR 0 1
2760: PUSH
2761: LD_INT 6
2763: PUSH
2764: EMPTY
2765: LIST
2766: LIST
2767: LIST
2768: PUSH
2769: LD_INT 30
2771: PUSH
2772: LD_VAR 0 4
2776: PUSH
2777: EMPTY
2778: LIST
2779: LIST
2780: PUSH
2781: EMPTY
2782: LIST
2783: LIST
2784: LIST
2785: PUSH
2786: EMPTY
2787: LIST
2788: PPUSH
2789: CALL_OW 69
2793: ADD
2794: ST_TO_ADDR
2795: GO 2723
2797: POP
2798: POP
// for i = 1 to tmp do
2799: LD_ADDR_VAR 0 4
2803: PUSH
2804: DOUBLE
2805: LD_INT 1
2807: DEC
2808: ST_TO_ADDR
2809: LD_VAR 0 3
2813: PUSH
2814: FOR_TO
2815: IFFALSE 2903
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
2817: LD_ADDR_VAR 0 5
2821: PUSH
2822: LD_VAR 0 5
2826: PUSH
2827: LD_VAR 0 3
2831: PUSH
2832: LD_VAR 0 4
2836: ARRAY
2837: PPUSH
2838: CALL_OW 266
2842: PUSH
2843: LD_VAR 0 3
2847: PUSH
2848: LD_VAR 0 4
2852: ARRAY
2853: PPUSH
2854: CALL_OW 250
2858: PUSH
2859: LD_VAR 0 3
2863: PUSH
2864: LD_VAR 0 4
2868: ARRAY
2869: PPUSH
2870: CALL_OW 251
2874: PUSH
2875: LD_VAR 0 3
2879: PUSH
2880: LD_VAR 0 4
2884: ARRAY
2885: PPUSH
2886: CALL_OW 254
2890: PUSH
2891: EMPTY
2892: LIST
2893: LIST
2894: LIST
2895: LIST
2896: PUSH
2897: EMPTY
2898: LIST
2899: ADD
2900: ST_TO_ADDR
2901: GO 2814
2903: POP
2904: POP
// result := list ;
2905: LD_ADDR_VAR 0 2
2909: PUSH
2910: LD_VAR 0 5
2914: ST_TO_ADDR
// end ;
2915: LD_VAR 0 2
2919: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
2920: LD_INT 0
2922: PPUSH
2923: PPUSH
2924: PPUSH
2925: PPUSH
2926: PPUSH
2927: PPUSH
2928: PPUSH
// if not factory then
2929: LD_VAR 0 1
2933: NOT
2934: IFFALSE 2938
// exit ;
2936: GO 3531
// if control = control_apeman then
2938: LD_VAR 0 4
2942: PUSH
2943: LD_INT 5
2945: EQUAL
2946: IFFALSE 3055
// begin tmp := UnitsInside ( factory ) ;
2948: LD_ADDR_VAR 0 8
2952: PUSH
2953: LD_VAR 0 1
2957: PPUSH
2958: CALL_OW 313
2962: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
2963: LD_VAR 0 8
2967: PPUSH
2968: LD_INT 25
2970: PUSH
2971: LD_INT 12
2973: PUSH
2974: EMPTY
2975: LIST
2976: LIST
2977: PPUSH
2978: CALL_OW 72
2982: NOT
2983: IFFALSE 2993
// control := control_manual ;
2985: LD_ADDR_VAR 0 4
2989: PUSH
2990: LD_INT 1
2992: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
2993: LD_ADDR_VAR 0 8
2997: PUSH
2998: LD_VAR 0 1
3002: PPUSH
3003: CALL 2690 0 1
3007: ST_TO_ADDR
// if tmp then
3008: LD_VAR 0 8
3012: IFFALSE 3055
// begin for i in tmp do
3014: LD_ADDR_VAR 0 7
3018: PUSH
3019: LD_VAR 0 8
3023: PUSH
3024: FOR_IN
3025: IFFALSE 3053
// if i [ 1 ] = b_ext_radio then
3027: LD_VAR 0 7
3031: PUSH
3032: LD_INT 1
3034: ARRAY
3035: PUSH
3036: LD_INT 22
3038: EQUAL
3039: IFFALSE 3051
// begin control := control_remote ;
3041: LD_ADDR_VAR 0 4
3045: PUSH
3046: LD_INT 2
3048: ST_TO_ADDR
// break ;
3049: GO 3053
// end ;
3051: GO 3024
3053: POP
3054: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
3055: LD_VAR 0 1
3059: PPUSH
3060: LD_VAR 0 2
3064: PPUSH
3065: LD_VAR 0 3
3069: PPUSH
3070: LD_VAR 0 4
3074: PPUSH
3075: LD_VAR 0 5
3079: PPUSH
3080: CALL_OW 448
3084: IFFALSE 3119
// begin result := [ chassis , engine , control , weapon ] ;
3086: LD_ADDR_VAR 0 6
3090: PUSH
3091: LD_VAR 0 2
3095: PUSH
3096: LD_VAR 0 3
3100: PUSH
3101: LD_VAR 0 4
3105: PUSH
3106: LD_VAR 0 5
3110: PUSH
3111: EMPTY
3112: LIST
3113: LIST
3114: LIST
3115: LIST
3116: ST_TO_ADDR
// exit ;
3117: GO 3531
// end ; _chassis := AvailableChassisList ( factory ) ;
3119: LD_ADDR_VAR 0 9
3123: PUSH
3124: LD_VAR 0 1
3128: PPUSH
3129: CALL_OW 475
3133: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
3134: LD_ADDR_VAR 0 11
3138: PUSH
3139: LD_VAR 0 1
3143: PPUSH
3144: CALL_OW 476
3148: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
3149: LD_ADDR_VAR 0 12
3153: PUSH
3154: LD_VAR 0 1
3158: PPUSH
3159: CALL_OW 477
3163: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
3164: LD_ADDR_VAR 0 10
3168: PUSH
3169: LD_VAR 0 1
3173: PPUSH
3174: CALL_OW 478
3178: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
3179: LD_VAR 0 9
3183: NOT
3184: PUSH
3185: LD_VAR 0 11
3189: NOT
3190: OR
3191: PUSH
3192: LD_VAR 0 12
3196: NOT
3197: OR
3198: PUSH
3199: LD_VAR 0 10
3203: NOT
3204: OR
3205: IFFALSE 3240
// begin result := [ chassis , engine , control , weapon ] ;
3207: LD_ADDR_VAR 0 6
3211: PUSH
3212: LD_VAR 0 2
3216: PUSH
3217: LD_VAR 0 3
3221: PUSH
3222: LD_VAR 0 4
3226: PUSH
3227: LD_VAR 0 5
3231: PUSH
3232: EMPTY
3233: LIST
3234: LIST
3235: LIST
3236: LIST
3237: ST_TO_ADDR
// exit ;
3238: GO 3531
// end ; if not chassis in _chassis then
3240: LD_VAR 0 2
3244: PUSH
3245: LD_VAR 0 9
3249: IN
3250: NOT
3251: IFFALSE 3277
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
3253: LD_ADDR_VAR 0 2
3257: PUSH
3258: LD_VAR 0 9
3262: PUSH
3263: LD_INT 1
3265: PPUSH
3266: LD_VAR 0 9
3270: PPUSH
3271: CALL_OW 12
3275: ARRAY
3276: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
3277: LD_VAR 0 2
3281: PPUSH
3282: LD_VAR 0 3
3286: PPUSH
3287: CALL 3536 0 2
3291: NOT
3292: IFFALSE 3351
// repeat engine := _engine [ 1 ] ;
3294: LD_ADDR_VAR 0 3
3298: PUSH
3299: LD_VAR 0 11
3303: PUSH
3304: LD_INT 1
3306: ARRAY
3307: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
3308: LD_ADDR_VAR 0 11
3312: PUSH
3313: LD_VAR 0 11
3317: PPUSH
3318: LD_INT 1
3320: PPUSH
3321: CALL_OW 3
3325: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
3326: LD_VAR 0 2
3330: PPUSH
3331: LD_VAR 0 3
3335: PPUSH
3336: CALL 3536 0 2
3340: PUSH
3341: LD_VAR 0 11
3345: PUSH
3346: EMPTY
3347: EQUAL
3348: OR
3349: IFFALSE 3294
// if not control in _control then
3351: LD_VAR 0 4
3355: PUSH
3356: LD_VAR 0 12
3360: IN
3361: NOT
3362: IFFALSE 3388
// control := _control [ rand ( 1 , _control ) ] ;
3364: LD_ADDR_VAR 0 4
3368: PUSH
3369: LD_VAR 0 12
3373: PUSH
3374: LD_INT 1
3376: PPUSH
3377: LD_VAR 0 12
3381: PPUSH
3382: CALL_OW 12
3386: ARRAY
3387: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
3388: LD_VAR 0 2
3392: PPUSH
3393: LD_VAR 0 5
3397: PPUSH
3398: CALL 3756 0 2
3402: NOT
3403: IFFALSE 3462
// repeat weapon := _weapon [ 1 ] ;
3405: LD_ADDR_VAR 0 5
3409: PUSH
3410: LD_VAR 0 10
3414: PUSH
3415: LD_INT 1
3417: ARRAY
3418: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
3419: LD_ADDR_VAR 0 10
3423: PUSH
3424: LD_VAR 0 10
3428: PPUSH
3429: LD_INT 1
3431: PPUSH
3432: CALL_OW 3
3436: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
3437: LD_VAR 0 2
3441: PPUSH
3442: LD_VAR 0 5
3446: PPUSH
3447: CALL 3756 0 2
3451: PUSH
3452: LD_VAR 0 10
3456: PUSH
3457: EMPTY
3458: EQUAL
3459: OR
3460: IFFALSE 3405
// result := [ ] ;
3462: LD_ADDR_VAR 0 6
3466: PUSH
3467: EMPTY
3468: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
3469: LD_VAR 0 1
3473: PPUSH
3474: LD_VAR 0 2
3478: PPUSH
3479: LD_VAR 0 3
3483: PPUSH
3484: LD_VAR 0 4
3488: PPUSH
3489: LD_VAR 0 5
3493: PPUSH
3494: CALL_OW 448
3498: IFFALSE 3531
// result := [ chassis , engine , control , weapon ] ;
3500: LD_ADDR_VAR 0 6
3504: PUSH
3505: LD_VAR 0 2
3509: PUSH
3510: LD_VAR 0 3
3514: PUSH
3515: LD_VAR 0 4
3519: PUSH
3520: LD_VAR 0 5
3524: PUSH
3525: EMPTY
3526: LIST
3527: LIST
3528: LIST
3529: LIST
3530: ST_TO_ADDR
// end ;
3531: LD_VAR 0 6
3535: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
3536: LD_INT 0
3538: PPUSH
// if not chassis or not engine then
3539: LD_VAR 0 1
3543: NOT
3544: PUSH
3545: LD_VAR 0 2
3549: NOT
3550: OR
3551: IFFALSE 3555
// exit ;
3553: GO 3751
// case engine of engine_solar :
3555: LD_VAR 0 2
3559: PUSH
3560: LD_INT 2
3562: DOUBLE
3563: EQUAL
3564: IFTRUE 3568
3566: GO 3606
3568: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
3569: LD_ADDR_VAR 0 3
3573: PUSH
3574: LD_INT 11
3576: PUSH
3577: LD_INT 12
3579: PUSH
3580: LD_INT 13
3582: PUSH
3583: LD_INT 14
3585: PUSH
3586: LD_INT 1
3588: PUSH
3589: LD_INT 2
3591: PUSH
3592: LD_INT 3
3594: PUSH
3595: EMPTY
3596: LIST
3597: LIST
3598: LIST
3599: LIST
3600: LIST
3601: LIST
3602: LIST
3603: ST_TO_ADDR
3604: GO 3735
3606: LD_INT 1
3608: DOUBLE
3609: EQUAL
3610: IFTRUE 3614
3612: GO 3676
3614: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
3615: LD_ADDR_VAR 0 3
3619: PUSH
3620: LD_INT 11
3622: PUSH
3623: LD_INT 12
3625: PUSH
3626: LD_INT 13
3628: PUSH
3629: LD_INT 14
3631: PUSH
3632: LD_INT 1
3634: PUSH
3635: LD_INT 2
3637: PUSH
3638: LD_INT 3
3640: PUSH
3641: LD_INT 4
3643: PUSH
3644: LD_INT 5
3646: PUSH
3647: LD_INT 21
3649: PUSH
3650: LD_INT 23
3652: PUSH
3653: LD_INT 22
3655: PUSH
3656: LD_INT 24
3658: PUSH
3659: EMPTY
3660: LIST
3661: LIST
3662: LIST
3663: LIST
3664: LIST
3665: LIST
3666: LIST
3667: LIST
3668: LIST
3669: LIST
3670: LIST
3671: LIST
3672: LIST
3673: ST_TO_ADDR
3674: GO 3735
3676: LD_INT 3
3678: DOUBLE
3679: EQUAL
3680: IFTRUE 3684
3682: GO 3734
3684: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
3685: LD_ADDR_VAR 0 3
3689: PUSH
3690: LD_INT 13
3692: PUSH
3693: LD_INT 14
3695: PUSH
3696: LD_INT 2
3698: PUSH
3699: LD_INT 3
3701: PUSH
3702: LD_INT 4
3704: PUSH
3705: LD_INT 5
3707: PUSH
3708: LD_INT 21
3710: PUSH
3711: LD_INT 22
3713: PUSH
3714: LD_INT 23
3716: PUSH
3717: LD_INT 24
3719: PUSH
3720: EMPTY
3721: LIST
3722: LIST
3723: LIST
3724: LIST
3725: LIST
3726: LIST
3727: LIST
3728: LIST
3729: LIST
3730: LIST
3731: ST_TO_ADDR
3732: GO 3735
3734: POP
// result := ( chassis in result ) ;
3735: LD_ADDR_VAR 0 3
3739: PUSH
3740: LD_VAR 0 1
3744: PUSH
3745: LD_VAR 0 3
3749: IN
3750: ST_TO_ADDR
// end ;
3751: LD_VAR 0 3
3755: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
3756: LD_INT 0
3758: PPUSH
// if not chassis or not weapon then
3759: LD_VAR 0 1
3763: NOT
3764: PUSH
3765: LD_VAR 0 2
3769: NOT
3770: OR
3771: IFFALSE 3775
// exit ;
3773: GO 4835
// case weapon of us_machine_gun :
3775: LD_VAR 0 2
3779: PUSH
3780: LD_INT 2
3782: DOUBLE
3783: EQUAL
3784: IFTRUE 3788
3786: GO 3818
3788: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
3789: LD_ADDR_VAR 0 3
3793: PUSH
3794: LD_INT 1
3796: PUSH
3797: LD_INT 2
3799: PUSH
3800: LD_INT 3
3802: PUSH
3803: LD_INT 4
3805: PUSH
3806: LD_INT 5
3808: PUSH
3809: EMPTY
3810: LIST
3811: LIST
3812: LIST
3813: LIST
3814: LIST
3815: ST_TO_ADDR
3816: GO 4819
3818: LD_INT 3
3820: DOUBLE
3821: EQUAL
3822: IFTRUE 3826
3824: GO 3856
3826: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
3827: LD_ADDR_VAR 0 3
3831: PUSH
3832: LD_INT 1
3834: PUSH
3835: LD_INT 2
3837: PUSH
3838: LD_INT 3
3840: PUSH
3841: LD_INT 4
3843: PUSH
3844: LD_INT 5
3846: PUSH
3847: EMPTY
3848: LIST
3849: LIST
3850: LIST
3851: LIST
3852: LIST
3853: ST_TO_ADDR
3854: GO 4819
3856: LD_INT 11
3858: DOUBLE
3859: EQUAL
3860: IFTRUE 3864
3862: GO 3894
3864: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
3865: LD_ADDR_VAR 0 3
3869: PUSH
3870: LD_INT 1
3872: PUSH
3873: LD_INT 2
3875: PUSH
3876: LD_INT 3
3878: PUSH
3879: LD_INT 4
3881: PUSH
3882: LD_INT 5
3884: PUSH
3885: EMPTY
3886: LIST
3887: LIST
3888: LIST
3889: LIST
3890: LIST
3891: ST_TO_ADDR
3892: GO 4819
3894: LD_INT 4
3896: DOUBLE
3897: EQUAL
3898: IFTRUE 3902
3900: GO 3928
3902: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
3903: LD_ADDR_VAR 0 3
3907: PUSH
3908: LD_INT 2
3910: PUSH
3911: LD_INT 3
3913: PUSH
3914: LD_INT 4
3916: PUSH
3917: LD_INT 5
3919: PUSH
3920: EMPTY
3921: LIST
3922: LIST
3923: LIST
3924: LIST
3925: ST_TO_ADDR
3926: GO 4819
3928: LD_INT 5
3930: DOUBLE
3931: EQUAL
3932: IFTRUE 3936
3934: GO 3962
3936: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
3937: LD_ADDR_VAR 0 3
3941: PUSH
3942: LD_INT 2
3944: PUSH
3945: LD_INT 3
3947: PUSH
3948: LD_INT 4
3950: PUSH
3951: LD_INT 5
3953: PUSH
3954: EMPTY
3955: LIST
3956: LIST
3957: LIST
3958: LIST
3959: ST_TO_ADDR
3960: GO 4819
3962: LD_INT 9
3964: DOUBLE
3965: EQUAL
3966: IFTRUE 3970
3968: GO 3996
3970: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
3971: LD_ADDR_VAR 0 3
3975: PUSH
3976: LD_INT 2
3978: PUSH
3979: LD_INT 3
3981: PUSH
3982: LD_INT 4
3984: PUSH
3985: LD_INT 5
3987: PUSH
3988: EMPTY
3989: LIST
3990: LIST
3991: LIST
3992: LIST
3993: ST_TO_ADDR
3994: GO 4819
3996: LD_INT 7
3998: DOUBLE
3999: EQUAL
4000: IFTRUE 4004
4002: GO 4030
4004: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
4005: LD_ADDR_VAR 0 3
4009: PUSH
4010: LD_INT 2
4012: PUSH
4013: LD_INT 3
4015: PUSH
4016: LD_INT 4
4018: PUSH
4019: LD_INT 5
4021: PUSH
4022: EMPTY
4023: LIST
4024: LIST
4025: LIST
4026: LIST
4027: ST_TO_ADDR
4028: GO 4819
4030: LD_INT 12
4032: DOUBLE
4033: EQUAL
4034: IFTRUE 4038
4036: GO 4064
4038: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
4039: LD_ADDR_VAR 0 3
4043: PUSH
4044: LD_INT 2
4046: PUSH
4047: LD_INT 3
4049: PUSH
4050: LD_INT 4
4052: PUSH
4053: LD_INT 5
4055: PUSH
4056: EMPTY
4057: LIST
4058: LIST
4059: LIST
4060: LIST
4061: ST_TO_ADDR
4062: GO 4819
4064: LD_INT 13
4066: DOUBLE
4067: EQUAL
4068: IFTRUE 4072
4070: GO 4098
4072: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
4073: LD_ADDR_VAR 0 3
4077: PUSH
4078: LD_INT 2
4080: PUSH
4081: LD_INT 3
4083: PUSH
4084: LD_INT 4
4086: PUSH
4087: LD_INT 5
4089: PUSH
4090: EMPTY
4091: LIST
4092: LIST
4093: LIST
4094: LIST
4095: ST_TO_ADDR
4096: GO 4819
4098: LD_INT 14
4100: DOUBLE
4101: EQUAL
4102: IFTRUE 4106
4104: GO 4124
4106: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
4107: LD_ADDR_VAR 0 3
4111: PUSH
4112: LD_INT 4
4114: PUSH
4115: LD_INT 5
4117: PUSH
4118: EMPTY
4119: LIST
4120: LIST
4121: ST_TO_ADDR
4122: GO 4819
4124: LD_INT 6
4126: DOUBLE
4127: EQUAL
4128: IFTRUE 4132
4130: GO 4150
4132: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
4133: LD_ADDR_VAR 0 3
4137: PUSH
4138: LD_INT 4
4140: PUSH
4141: LD_INT 5
4143: PUSH
4144: EMPTY
4145: LIST
4146: LIST
4147: ST_TO_ADDR
4148: GO 4819
4150: LD_INT 10
4152: DOUBLE
4153: EQUAL
4154: IFTRUE 4158
4156: GO 4176
4158: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
4159: LD_ADDR_VAR 0 3
4163: PUSH
4164: LD_INT 4
4166: PUSH
4167: LD_INT 5
4169: PUSH
4170: EMPTY
4171: LIST
4172: LIST
4173: ST_TO_ADDR
4174: GO 4819
4176: LD_INT 22
4178: DOUBLE
4179: EQUAL
4180: IFTRUE 4184
4182: GO 4210
4184: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
4185: LD_ADDR_VAR 0 3
4189: PUSH
4190: LD_INT 11
4192: PUSH
4193: LD_INT 12
4195: PUSH
4196: LD_INT 13
4198: PUSH
4199: LD_INT 14
4201: PUSH
4202: EMPTY
4203: LIST
4204: LIST
4205: LIST
4206: LIST
4207: ST_TO_ADDR
4208: GO 4819
4210: LD_INT 23
4212: DOUBLE
4213: EQUAL
4214: IFTRUE 4218
4216: GO 4244
4218: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
4219: LD_ADDR_VAR 0 3
4223: PUSH
4224: LD_INT 11
4226: PUSH
4227: LD_INT 12
4229: PUSH
4230: LD_INT 13
4232: PUSH
4233: LD_INT 14
4235: PUSH
4236: EMPTY
4237: LIST
4238: LIST
4239: LIST
4240: LIST
4241: ST_TO_ADDR
4242: GO 4819
4244: LD_INT 24
4246: DOUBLE
4247: EQUAL
4248: IFTRUE 4252
4250: GO 4278
4252: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
4253: LD_ADDR_VAR 0 3
4257: PUSH
4258: LD_INT 11
4260: PUSH
4261: LD_INT 12
4263: PUSH
4264: LD_INT 13
4266: PUSH
4267: LD_INT 14
4269: PUSH
4270: EMPTY
4271: LIST
4272: LIST
4273: LIST
4274: LIST
4275: ST_TO_ADDR
4276: GO 4819
4278: LD_INT 30
4280: DOUBLE
4281: EQUAL
4282: IFTRUE 4286
4284: GO 4312
4286: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
4287: LD_ADDR_VAR 0 3
4291: PUSH
4292: LD_INT 11
4294: PUSH
4295: LD_INT 12
4297: PUSH
4298: LD_INT 13
4300: PUSH
4301: LD_INT 14
4303: PUSH
4304: EMPTY
4305: LIST
4306: LIST
4307: LIST
4308: LIST
4309: ST_TO_ADDR
4310: GO 4819
4312: LD_INT 25
4314: DOUBLE
4315: EQUAL
4316: IFTRUE 4320
4318: GO 4338
4320: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
4321: LD_ADDR_VAR 0 3
4325: PUSH
4326: LD_INT 13
4328: PUSH
4329: LD_INT 14
4331: PUSH
4332: EMPTY
4333: LIST
4334: LIST
4335: ST_TO_ADDR
4336: GO 4819
4338: LD_INT 27
4340: DOUBLE
4341: EQUAL
4342: IFTRUE 4346
4344: GO 4364
4346: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
4347: LD_ADDR_VAR 0 3
4351: PUSH
4352: LD_INT 13
4354: PUSH
4355: LD_INT 14
4357: PUSH
4358: EMPTY
4359: LIST
4360: LIST
4361: ST_TO_ADDR
4362: GO 4819
4364: LD_INT 92
4366: DOUBLE
4367: EQUAL
4368: IFTRUE 4372
4370: GO 4398
4372: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
4373: LD_ADDR_VAR 0 3
4377: PUSH
4378: LD_INT 11
4380: PUSH
4381: LD_INT 12
4383: PUSH
4384: LD_INT 13
4386: PUSH
4387: LD_INT 14
4389: PUSH
4390: EMPTY
4391: LIST
4392: LIST
4393: LIST
4394: LIST
4395: ST_TO_ADDR
4396: GO 4819
4398: LD_INT 28
4400: DOUBLE
4401: EQUAL
4402: IFTRUE 4406
4404: GO 4424
4406: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
4407: LD_ADDR_VAR 0 3
4411: PUSH
4412: LD_INT 13
4414: PUSH
4415: LD_INT 14
4417: PUSH
4418: EMPTY
4419: LIST
4420: LIST
4421: ST_TO_ADDR
4422: GO 4819
4424: LD_INT 29
4426: DOUBLE
4427: EQUAL
4428: IFTRUE 4432
4430: GO 4450
4432: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
4433: LD_ADDR_VAR 0 3
4437: PUSH
4438: LD_INT 13
4440: PUSH
4441: LD_INT 14
4443: PUSH
4444: EMPTY
4445: LIST
4446: LIST
4447: ST_TO_ADDR
4448: GO 4819
4450: LD_INT 31
4452: DOUBLE
4453: EQUAL
4454: IFTRUE 4458
4456: GO 4476
4458: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
4459: LD_ADDR_VAR 0 3
4463: PUSH
4464: LD_INT 13
4466: PUSH
4467: LD_INT 14
4469: PUSH
4470: EMPTY
4471: LIST
4472: LIST
4473: ST_TO_ADDR
4474: GO 4819
4476: LD_INT 26
4478: DOUBLE
4479: EQUAL
4480: IFTRUE 4484
4482: GO 4502
4484: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
4485: LD_ADDR_VAR 0 3
4489: PUSH
4490: LD_INT 13
4492: PUSH
4493: LD_INT 14
4495: PUSH
4496: EMPTY
4497: LIST
4498: LIST
4499: ST_TO_ADDR
4500: GO 4819
4502: LD_INT 42
4504: DOUBLE
4505: EQUAL
4506: IFTRUE 4510
4508: GO 4536
4510: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
4511: LD_ADDR_VAR 0 3
4515: PUSH
4516: LD_INT 21
4518: PUSH
4519: LD_INT 22
4521: PUSH
4522: LD_INT 23
4524: PUSH
4525: LD_INT 24
4527: PUSH
4528: EMPTY
4529: LIST
4530: LIST
4531: LIST
4532: LIST
4533: ST_TO_ADDR
4534: GO 4819
4536: LD_INT 43
4538: DOUBLE
4539: EQUAL
4540: IFTRUE 4544
4542: GO 4570
4544: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
4545: LD_ADDR_VAR 0 3
4549: PUSH
4550: LD_INT 21
4552: PUSH
4553: LD_INT 22
4555: PUSH
4556: LD_INT 23
4558: PUSH
4559: LD_INT 24
4561: PUSH
4562: EMPTY
4563: LIST
4564: LIST
4565: LIST
4566: LIST
4567: ST_TO_ADDR
4568: GO 4819
4570: LD_INT 44
4572: DOUBLE
4573: EQUAL
4574: IFTRUE 4578
4576: GO 4604
4578: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
4579: LD_ADDR_VAR 0 3
4583: PUSH
4584: LD_INT 21
4586: PUSH
4587: LD_INT 22
4589: PUSH
4590: LD_INT 23
4592: PUSH
4593: LD_INT 24
4595: PUSH
4596: EMPTY
4597: LIST
4598: LIST
4599: LIST
4600: LIST
4601: ST_TO_ADDR
4602: GO 4819
4604: LD_INT 45
4606: DOUBLE
4607: EQUAL
4608: IFTRUE 4612
4610: GO 4638
4612: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
4613: LD_ADDR_VAR 0 3
4617: PUSH
4618: LD_INT 21
4620: PUSH
4621: LD_INT 22
4623: PUSH
4624: LD_INT 23
4626: PUSH
4627: LD_INT 24
4629: PUSH
4630: EMPTY
4631: LIST
4632: LIST
4633: LIST
4634: LIST
4635: ST_TO_ADDR
4636: GO 4819
4638: LD_INT 49
4640: DOUBLE
4641: EQUAL
4642: IFTRUE 4646
4644: GO 4672
4646: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
4647: LD_ADDR_VAR 0 3
4651: PUSH
4652: LD_INT 21
4654: PUSH
4655: LD_INT 22
4657: PUSH
4658: LD_INT 23
4660: PUSH
4661: LD_INT 24
4663: PUSH
4664: EMPTY
4665: LIST
4666: LIST
4667: LIST
4668: LIST
4669: ST_TO_ADDR
4670: GO 4819
4672: LD_INT 51
4674: DOUBLE
4675: EQUAL
4676: IFTRUE 4680
4678: GO 4706
4680: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
4681: LD_ADDR_VAR 0 3
4685: PUSH
4686: LD_INT 21
4688: PUSH
4689: LD_INT 22
4691: PUSH
4692: LD_INT 23
4694: PUSH
4695: LD_INT 24
4697: PUSH
4698: EMPTY
4699: LIST
4700: LIST
4701: LIST
4702: LIST
4703: ST_TO_ADDR
4704: GO 4819
4706: LD_INT 52
4708: DOUBLE
4709: EQUAL
4710: IFTRUE 4714
4712: GO 4740
4714: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
4715: LD_ADDR_VAR 0 3
4719: PUSH
4720: LD_INT 21
4722: PUSH
4723: LD_INT 22
4725: PUSH
4726: LD_INT 23
4728: PUSH
4729: LD_INT 24
4731: PUSH
4732: EMPTY
4733: LIST
4734: LIST
4735: LIST
4736: LIST
4737: ST_TO_ADDR
4738: GO 4819
4740: LD_INT 53
4742: DOUBLE
4743: EQUAL
4744: IFTRUE 4748
4746: GO 4766
4748: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
4749: LD_ADDR_VAR 0 3
4753: PUSH
4754: LD_INT 23
4756: PUSH
4757: LD_INT 24
4759: PUSH
4760: EMPTY
4761: LIST
4762: LIST
4763: ST_TO_ADDR
4764: GO 4819
4766: LD_INT 46
4768: DOUBLE
4769: EQUAL
4770: IFTRUE 4774
4772: GO 4792
4774: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
4775: LD_ADDR_VAR 0 3
4779: PUSH
4780: LD_INT 23
4782: PUSH
4783: LD_INT 24
4785: PUSH
4786: EMPTY
4787: LIST
4788: LIST
4789: ST_TO_ADDR
4790: GO 4819
4792: LD_INT 47
4794: DOUBLE
4795: EQUAL
4796: IFTRUE 4800
4798: GO 4818
4800: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
4801: LD_ADDR_VAR 0 3
4805: PUSH
4806: LD_INT 23
4808: PUSH
4809: LD_INT 24
4811: PUSH
4812: EMPTY
4813: LIST
4814: LIST
4815: ST_TO_ADDR
4816: GO 4819
4818: POP
// result := ( chassis in result ) ;
4819: LD_ADDR_VAR 0 3
4823: PUSH
4824: LD_VAR 0 1
4828: PUSH
4829: LD_VAR 0 3
4833: IN
4834: ST_TO_ADDR
// end ;
4835: LD_VAR 0 3
4839: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
4840: LD_INT 0
4842: PPUSH
4843: PPUSH
4844: PPUSH
4845: PPUSH
4846: PPUSH
4847: PPUSH
4848: PPUSH
// result := array ;
4849: LD_ADDR_VAR 0 5
4853: PUSH
4854: LD_VAR 0 1
4858: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
4859: LD_VAR 0 1
4863: NOT
4864: PUSH
4865: LD_VAR 0 2
4869: NOT
4870: OR
4871: PUSH
4872: LD_VAR 0 3
4876: NOT
4877: OR
4878: PUSH
4879: LD_VAR 0 2
4883: PUSH
4884: LD_VAR 0 1
4888: GREATER
4889: OR
4890: PUSH
4891: LD_VAR 0 3
4895: PUSH
4896: LD_VAR 0 1
4900: GREATER
4901: OR
4902: IFFALSE 4906
// exit ;
4904: GO 5202
// if direction then
4906: LD_VAR 0 4
4910: IFFALSE 4974
// begin d := 1 ;
4912: LD_ADDR_VAR 0 9
4916: PUSH
4917: LD_INT 1
4919: ST_TO_ADDR
// if i_from > i_to then
4920: LD_VAR 0 2
4924: PUSH
4925: LD_VAR 0 3
4929: GREATER
4930: IFFALSE 4956
// length := ( array - i_from ) + i_to else
4932: LD_ADDR_VAR 0 11
4936: PUSH
4937: LD_VAR 0 1
4941: PUSH
4942: LD_VAR 0 2
4946: MINUS
4947: PUSH
4948: LD_VAR 0 3
4952: PLUS
4953: ST_TO_ADDR
4954: GO 4972
// length := i_to - i_from ;
4956: LD_ADDR_VAR 0 11
4960: PUSH
4961: LD_VAR 0 3
4965: PUSH
4966: LD_VAR 0 2
4970: MINUS
4971: ST_TO_ADDR
// end else
4972: GO 5035
// begin d := - 1 ;
4974: LD_ADDR_VAR 0 9
4978: PUSH
4979: LD_INT 1
4981: NEG
4982: ST_TO_ADDR
// if i_from > i_to then
4983: LD_VAR 0 2
4987: PUSH
4988: LD_VAR 0 3
4992: GREATER
4993: IFFALSE 5013
// length := i_from - i_to else
4995: LD_ADDR_VAR 0 11
4999: PUSH
5000: LD_VAR 0 2
5004: PUSH
5005: LD_VAR 0 3
5009: MINUS
5010: ST_TO_ADDR
5011: GO 5035
// length := ( array - i_to ) + i_from ;
5013: LD_ADDR_VAR 0 11
5017: PUSH
5018: LD_VAR 0 1
5022: PUSH
5023: LD_VAR 0 3
5027: MINUS
5028: PUSH
5029: LD_VAR 0 2
5033: PLUS
5034: ST_TO_ADDR
// end ; if not length then
5035: LD_VAR 0 11
5039: NOT
5040: IFFALSE 5044
// exit ;
5042: GO 5202
// tmp := array ;
5044: LD_ADDR_VAR 0 10
5048: PUSH
5049: LD_VAR 0 1
5053: ST_TO_ADDR
// for i = 1 to length do
5054: LD_ADDR_VAR 0 6
5058: PUSH
5059: DOUBLE
5060: LD_INT 1
5062: DEC
5063: ST_TO_ADDR
5064: LD_VAR 0 11
5068: PUSH
5069: FOR_TO
5070: IFFALSE 5190
// begin for j = 1 to array do
5072: LD_ADDR_VAR 0 7
5076: PUSH
5077: DOUBLE
5078: LD_INT 1
5080: DEC
5081: ST_TO_ADDR
5082: LD_VAR 0 1
5086: PUSH
5087: FOR_TO
5088: IFFALSE 5176
// begin k := j + d ;
5090: LD_ADDR_VAR 0 8
5094: PUSH
5095: LD_VAR 0 7
5099: PUSH
5100: LD_VAR 0 9
5104: PLUS
5105: ST_TO_ADDR
// if k > array then
5106: LD_VAR 0 8
5110: PUSH
5111: LD_VAR 0 1
5115: GREATER
5116: IFFALSE 5126
// k := 1 ;
5118: LD_ADDR_VAR 0 8
5122: PUSH
5123: LD_INT 1
5125: ST_TO_ADDR
// if not k then
5126: LD_VAR 0 8
5130: NOT
5131: IFFALSE 5143
// k := array ;
5133: LD_ADDR_VAR 0 8
5137: PUSH
5138: LD_VAR 0 1
5142: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
5143: LD_ADDR_VAR 0 10
5147: PUSH
5148: LD_VAR 0 10
5152: PPUSH
5153: LD_VAR 0 8
5157: PPUSH
5158: LD_VAR 0 1
5162: PUSH
5163: LD_VAR 0 7
5167: ARRAY
5168: PPUSH
5169: CALL_OW 1
5173: ST_TO_ADDR
// end ;
5174: GO 5087
5176: POP
5177: POP
// array := tmp ;
5178: LD_ADDR_VAR 0 1
5182: PUSH
5183: LD_VAR 0 10
5187: ST_TO_ADDR
// end ;
5188: GO 5069
5190: POP
5191: POP
// result := array ;
5192: LD_ADDR_VAR 0 5
5196: PUSH
5197: LD_VAR 0 1
5201: ST_TO_ADDR
// end ;
5202: LD_VAR 0 5
5206: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
5207: LD_INT 0
5209: PPUSH
5210: PPUSH
// result := 0 ;
5211: LD_ADDR_VAR 0 3
5215: PUSH
5216: LD_INT 0
5218: ST_TO_ADDR
// if not array or not value in array then
5219: LD_VAR 0 1
5223: NOT
5224: PUSH
5225: LD_VAR 0 2
5229: PUSH
5230: LD_VAR 0 1
5234: IN
5235: NOT
5236: OR
5237: IFFALSE 5241
// exit ;
5239: GO 5295
// for i = 1 to array do
5241: LD_ADDR_VAR 0 4
5245: PUSH
5246: DOUBLE
5247: LD_INT 1
5249: DEC
5250: ST_TO_ADDR
5251: LD_VAR 0 1
5255: PUSH
5256: FOR_TO
5257: IFFALSE 5293
// if value = array [ i ] then
5259: LD_VAR 0 2
5263: PUSH
5264: LD_VAR 0 1
5268: PUSH
5269: LD_VAR 0 4
5273: ARRAY
5274: EQUAL
5275: IFFALSE 5291
// begin result := i ;
5277: LD_ADDR_VAR 0 3
5281: PUSH
5282: LD_VAR 0 4
5286: ST_TO_ADDR
// exit ;
5287: POP
5288: POP
5289: GO 5295
// end ;
5291: GO 5256
5293: POP
5294: POP
// end ;
5295: LD_VAR 0 3
5299: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
5300: LD_INT 0
5302: PPUSH
// vc_chassis := chassis ;
5303: LD_ADDR_OWVAR 37
5307: PUSH
5308: LD_VAR 0 1
5312: ST_TO_ADDR
// vc_engine := engine ;
5313: LD_ADDR_OWVAR 39
5317: PUSH
5318: LD_VAR 0 2
5322: ST_TO_ADDR
// vc_control := control ;
5323: LD_ADDR_OWVAR 38
5327: PUSH
5328: LD_VAR 0 3
5332: ST_TO_ADDR
// vc_weapon := weapon ;
5333: LD_ADDR_OWVAR 40
5337: PUSH
5338: LD_VAR 0 4
5342: ST_TO_ADDR
// vc_fuel_battery := fuel ;
5343: LD_ADDR_OWVAR 41
5347: PUSH
5348: LD_VAR 0 5
5352: ST_TO_ADDR
// end ;
5353: LD_VAR 0 6
5357: RET
// export function WantPlant ( unit ) ; var task ; begin
5358: LD_INT 0
5360: PPUSH
5361: PPUSH
// result := false ;
5362: LD_ADDR_VAR 0 2
5366: PUSH
5367: LD_INT 0
5369: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
5370: LD_ADDR_VAR 0 3
5374: PUSH
5375: LD_VAR 0 1
5379: PPUSH
5380: CALL_OW 437
5384: ST_TO_ADDR
// if task then
5385: LD_VAR 0 3
5389: IFFALSE 5417
// if task [ 1 ] [ 1 ] = p then
5391: LD_VAR 0 3
5395: PUSH
5396: LD_INT 1
5398: ARRAY
5399: PUSH
5400: LD_INT 1
5402: ARRAY
5403: PUSH
5404: LD_STRING p
5406: EQUAL
5407: IFFALSE 5417
// result := true ;
5409: LD_ADDR_VAR 0 2
5413: PUSH
5414: LD_INT 1
5416: ST_TO_ADDR
// end ;
5417: LD_VAR 0 2
5421: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
5422: LD_INT 0
5424: PPUSH
5425: PPUSH
5426: PPUSH
5427: PPUSH
// if pos < 1 then
5428: LD_VAR 0 2
5432: PUSH
5433: LD_INT 1
5435: LESS
5436: IFFALSE 5440
// exit ;
5438: GO 5743
// if pos = 1 then
5440: LD_VAR 0 2
5444: PUSH
5445: LD_INT 1
5447: EQUAL
5448: IFFALSE 5481
// result := Replace ( arr , pos [ 1 ] , value ) else
5450: LD_ADDR_VAR 0 4
5454: PUSH
5455: LD_VAR 0 1
5459: PPUSH
5460: LD_VAR 0 2
5464: PUSH
5465: LD_INT 1
5467: ARRAY
5468: PPUSH
5469: LD_VAR 0 3
5473: PPUSH
5474: CALL_OW 1
5478: ST_TO_ADDR
5479: GO 5743
// begin tmp := arr ;
5481: LD_ADDR_VAR 0 6
5485: PUSH
5486: LD_VAR 0 1
5490: ST_TO_ADDR
// s_arr := [ tmp ] ;
5491: LD_ADDR_VAR 0 7
5495: PUSH
5496: LD_VAR 0 6
5500: PUSH
5501: EMPTY
5502: LIST
5503: ST_TO_ADDR
// for i = 1 to pos - 1 do
5504: LD_ADDR_VAR 0 5
5508: PUSH
5509: DOUBLE
5510: LD_INT 1
5512: DEC
5513: ST_TO_ADDR
5514: LD_VAR 0 2
5518: PUSH
5519: LD_INT 1
5521: MINUS
5522: PUSH
5523: FOR_TO
5524: IFFALSE 5569
// begin tmp := tmp [ pos [ i ] ] ;
5526: LD_ADDR_VAR 0 6
5530: PUSH
5531: LD_VAR 0 6
5535: PUSH
5536: LD_VAR 0 2
5540: PUSH
5541: LD_VAR 0 5
5545: ARRAY
5546: ARRAY
5547: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
5548: LD_ADDR_VAR 0 7
5552: PUSH
5553: LD_VAR 0 7
5557: PUSH
5558: LD_VAR 0 6
5562: PUSH
5563: EMPTY
5564: LIST
5565: ADD
5566: ST_TO_ADDR
// end ;
5567: GO 5523
5569: POP
5570: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
5571: LD_ADDR_VAR 0 6
5575: PUSH
5576: LD_VAR 0 6
5580: PPUSH
5581: LD_VAR 0 2
5585: PUSH
5586: LD_VAR 0 2
5590: ARRAY
5591: PPUSH
5592: LD_VAR 0 3
5596: PPUSH
5597: CALL_OW 1
5601: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
5602: LD_ADDR_VAR 0 7
5606: PUSH
5607: LD_VAR 0 7
5611: PPUSH
5612: LD_VAR 0 7
5616: PPUSH
5617: LD_VAR 0 6
5621: PPUSH
5622: CALL_OW 1
5626: ST_TO_ADDR
// for i = s_arr downto 2 do
5627: LD_ADDR_VAR 0 5
5631: PUSH
5632: DOUBLE
5633: LD_VAR 0 7
5637: INC
5638: ST_TO_ADDR
5639: LD_INT 2
5641: PUSH
5642: FOR_DOWNTO
5643: IFFALSE 5727
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
5645: LD_ADDR_VAR 0 6
5649: PUSH
5650: LD_VAR 0 7
5654: PUSH
5655: LD_VAR 0 5
5659: PUSH
5660: LD_INT 1
5662: MINUS
5663: ARRAY
5664: PPUSH
5665: LD_VAR 0 2
5669: PUSH
5670: LD_VAR 0 5
5674: PUSH
5675: LD_INT 1
5677: MINUS
5678: ARRAY
5679: PPUSH
5680: LD_VAR 0 7
5684: PUSH
5685: LD_VAR 0 5
5689: ARRAY
5690: PPUSH
5691: CALL_OW 1
5695: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
5696: LD_ADDR_VAR 0 7
5700: PUSH
5701: LD_VAR 0 7
5705: PPUSH
5706: LD_VAR 0 5
5710: PUSH
5711: LD_INT 1
5713: MINUS
5714: PPUSH
5715: LD_VAR 0 6
5719: PPUSH
5720: CALL_OW 1
5724: ST_TO_ADDR
// end ;
5725: GO 5642
5727: POP
5728: POP
// result := s_arr [ 1 ] ;
5729: LD_ADDR_VAR 0 4
5733: PUSH
5734: LD_VAR 0 7
5738: PUSH
5739: LD_INT 1
5741: ARRAY
5742: ST_TO_ADDR
// end ; end ;
5743: LD_VAR 0 4
5747: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
5748: LD_INT 0
5750: PPUSH
5751: PPUSH
// if not list then
5752: LD_VAR 0 1
5756: NOT
5757: IFFALSE 5761
// exit ;
5759: GO 5852
// i := list [ pos1 ] ;
5761: LD_ADDR_VAR 0 5
5765: PUSH
5766: LD_VAR 0 1
5770: PUSH
5771: LD_VAR 0 2
5775: ARRAY
5776: ST_TO_ADDR
// if not i then
5777: LD_VAR 0 5
5781: NOT
5782: IFFALSE 5786
// exit ;
5784: GO 5852
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
5786: LD_ADDR_VAR 0 1
5790: PUSH
5791: LD_VAR 0 1
5795: PPUSH
5796: LD_VAR 0 2
5800: PPUSH
5801: LD_VAR 0 1
5805: PUSH
5806: LD_VAR 0 3
5810: ARRAY
5811: PPUSH
5812: CALL_OW 1
5816: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
5817: LD_ADDR_VAR 0 1
5821: PUSH
5822: LD_VAR 0 1
5826: PPUSH
5827: LD_VAR 0 3
5831: PPUSH
5832: LD_VAR 0 5
5836: PPUSH
5837: CALL_OW 1
5841: ST_TO_ADDR
// result := list ;
5842: LD_ADDR_VAR 0 4
5846: PUSH
5847: LD_VAR 0 1
5851: ST_TO_ADDR
// end ;
5852: LD_VAR 0 4
5856: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
5857: LD_INT 0
5859: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
5860: LD_ADDR_VAR 0 5
5864: PUSH
5865: LD_VAR 0 1
5869: PPUSH
5870: CALL_OW 250
5874: PPUSH
5875: LD_VAR 0 1
5879: PPUSH
5880: CALL_OW 251
5884: PPUSH
5885: LD_VAR 0 2
5889: PPUSH
5890: LD_VAR 0 3
5894: PPUSH
5895: LD_VAR 0 4
5899: PPUSH
5900: CALL 5910 0 5
5904: ST_TO_ADDR
// end ;
5905: LD_VAR 0 5
5909: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
5910: LD_INT 0
5912: PPUSH
5913: PPUSH
5914: PPUSH
5915: PPUSH
// if not list then
5916: LD_VAR 0 3
5920: NOT
5921: IFFALSE 5925
// exit ;
5923: GO 6313
// result := [ ] ;
5925: LD_ADDR_VAR 0 6
5929: PUSH
5930: EMPTY
5931: ST_TO_ADDR
// for i in list do
5932: LD_ADDR_VAR 0 7
5936: PUSH
5937: LD_VAR 0 3
5941: PUSH
5942: FOR_IN
5943: IFFALSE 6145
// begin tmp := GetDistUnitXY ( i , x , y ) ;
5945: LD_ADDR_VAR 0 9
5949: PUSH
5950: LD_VAR 0 7
5954: PPUSH
5955: LD_VAR 0 1
5959: PPUSH
5960: LD_VAR 0 2
5964: PPUSH
5965: CALL_OW 297
5969: ST_TO_ADDR
// if not result then
5970: LD_VAR 0 6
5974: NOT
5975: IFFALSE 6001
// result := [ [ i , tmp ] ] else
5977: LD_ADDR_VAR 0 6
5981: PUSH
5982: LD_VAR 0 7
5986: PUSH
5987: LD_VAR 0 9
5991: PUSH
5992: EMPTY
5993: LIST
5994: LIST
5995: PUSH
5996: EMPTY
5997: LIST
5998: ST_TO_ADDR
5999: GO 6143
// begin if result [ result ] [ 2 ] < tmp then
6001: LD_VAR 0 6
6005: PUSH
6006: LD_VAR 0 6
6010: ARRAY
6011: PUSH
6012: LD_INT 2
6014: ARRAY
6015: PUSH
6016: LD_VAR 0 9
6020: LESS
6021: IFFALSE 6063
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
6023: LD_ADDR_VAR 0 6
6027: PUSH
6028: LD_VAR 0 6
6032: PPUSH
6033: LD_VAR 0 6
6037: PUSH
6038: LD_INT 1
6040: PLUS
6041: PPUSH
6042: LD_VAR 0 7
6046: PUSH
6047: LD_VAR 0 9
6051: PUSH
6052: EMPTY
6053: LIST
6054: LIST
6055: PPUSH
6056: CALL_OW 2
6060: ST_TO_ADDR
6061: GO 6143
// for j = 1 to result do
6063: LD_ADDR_VAR 0 8
6067: PUSH
6068: DOUBLE
6069: LD_INT 1
6071: DEC
6072: ST_TO_ADDR
6073: LD_VAR 0 6
6077: PUSH
6078: FOR_TO
6079: IFFALSE 6141
// begin if tmp < result [ j ] [ 2 ] then
6081: LD_VAR 0 9
6085: PUSH
6086: LD_VAR 0 6
6090: PUSH
6091: LD_VAR 0 8
6095: ARRAY
6096: PUSH
6097: LD_INT 2
6099: ARRAY
6100: LESS
6101: IFFALSE 6139
// begin result := Insert ( result , j , [ i , tmp ] ) ;
6103: LD_ADDR_VAR 0 6
6107: PUSH
6108: LD_VAR 0 6
6112: PPUSH
6113: LD_VAR 0 8
6117: PPUSH
6118: LD_VAR 0 7
6122: PUSH
6123: LD_VAR 0 9
6127: PUSH
6128: EMPTY
6129: LIST
6130: LIST
6131: PPUSH
6132: CALL_OW 2
6136: ST_TO_ADDR
// break ;
6137: GO 6141
// end ; end ;
6139: GO 6078
6141: POP
6142: POP
// end ; end ;
6143: GO 5942
6145: POP
6146: POP
// if result and not asc then
6147: LD_VAR 0 6
6151: PUSH
6152: LD_VAR 0 4
6156: NOT
6157: AND
6158: IFFALSE 6233
// begin tmp := result ;
6160: LD_ADDR_VAR 0 9
6164: PUSH
6165: LD_VAR 0 6
6169: ST_TO_ADDR
// for i = tmp downto 1 do
6170: LD_ADDR_VAR 0 7
6174: PUSH
6175: DOUBLE
6176: LD_VAR 0 9
6180: INC
6181: ST_TO_ADDR
6182: LD_INT 1
6184: PUSH
6185: FOR_DOWNTO
6186: IFFALSE 6231
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
6188: LD_ADDR_VAR 0 6
6192: PUSH
6193: LD_VAR 0 6
6197: PPUSH
6198: LD_VAR 0 9
6202: PUSH
6203: LD_VAR 0 7
6207: MINUS
6208: PUSH
6209: LD_INT 1
6211: PLUS
6212: PPUSH
6213: LD_VAR 0 9
6217: PUSH
6218: LD_VAR 0 7
6222: ARRAY
6223: PPUSH
6224: CALL_OW 1
6228: ST_TO_ADDR
6229: GO 6185
6231: POP
6232: POP
// end ; tmp := [ ] ;
6233: LD_ADDR_VAR 0 9
6237: PUSH
6238: EMPTY
6239: ST_TO_ADDR
// if mode then
6240: LD_VAR 0 5
6244: IFFALSE 6313
// begin for i = 1 to result do
6246: LD_ADDR_VAR 0 7
6250: PUSH
6251: DOUBLE
6252: LD_INT 1
6254: DEC
6255: ST_TO_ADDR
6256: LD_VAR 0 6
6260: PUSH
6261: FOR_TO
6262: IFFALSE 6301
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
6264: LD_ADDR_VAR 0 9
6268: PUSH
6269: LD_VAR 0 9
6273: PPUSH
6274: LD_VAR 0 7
6278: PPUSH
6279: LD_VAR 0 6
6283: PUSH
6284: LD_VAR 0 7
6288: ARRAY
6289: PUSH
6290: LD_INT 1
6292: ARRAY
6293: PPUSH
6294: CALL_OW 1
6298: ST_TO_ADDR
6299: GO 6261
6301: POP
6302: POP
// result := tmp ;
6303: LD_ADDR_VAR 0 6
6307: PUSH
6308: LD_VAR 0 9
6312: ST_TO_ADDR
// end ; end ;
6313: LD_VAR 0 6
6317: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
6318: LD_INT 0
6320: PPUSH
6321: PPUSH
6322: PPUSH
6323: PPUSH
6324: PPUSH
6325: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
6326: LD_ADDR_VAR 0 5
6330: PUSH
6331: LD_INT 0
6333: PUSH
6334: LD_INT 0
6336: PUSH
6337: LD_INT 0
6339: PUSH
6340: EMPTY
6341: PUSH
6342: EMPTY
6343: LIST
6344: LIST
6345: LIST
6346: LIST
6347: ST_TO_ADDR
// if not x or not y then
6348: LD_VAR 0 2
6352: NOT
6353: PUSH
6354: LD_VAR 0 3
6358: NOT
6359: OR
6360: IFFALSE 6364
// exit ;
6362: GO 8014
// if not range then
6364: LD_VAR 0 4
6368: NOT
6369: IFFALSE 6379
// range := 10 ;
6371: LD_ADDR_VAR 0 4
6375: PUSH
6376: LD_INT 10
6378: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
6379: LD_ADDR_VAR 0 8
6383: PUSH
6384: LD_INT 81
6386: PUSH
6387: LD_VAR 0 1
6391: PUSH
6392: EMPTY
6393: LIST
6394: LIST
6395: PUSH
6396: LD_INT 92
6398: PUSH
6399: LD_VAR 0 2
6403: PUSH
6404: LD_VAR 0 3
6408: PUSH
6409: LD_VAR 0 4
6413: PUSH
6414: EMPTY
6415: LIST
6416: LIST
6417: LIST
6418: LIST
6419: PUSH
6420: LD_INT 3
6422: PUSH
6423: LD_INT 21
6425: PUSH
6426: LD_INT 3
6428: PUSH
6429: EMPTY
6430: LIST
6431: LIST
6432: PUSH
6433: EMPTY
6434: LIST
6435: LIST
6436: PUSH
6437: EMPTY
6438: LIST
6439: LIST
6440: LIST
6441: PPUSH
6442: CALL_OW 69
6446: ST_TO_ADDR
// if not tmp then
6447: LD_VAR 0 8
6451: NOT
6452: IFFALSE 6456
// exit ;
6454: GO 8014
// for i in tmp do
6456: LD_ADDR_VAR 0 6
6460: PUSH
6461: LD_VAR 0 8
6465: PUSH
6466: FOR_IN
6467: IFFALSE 7989
// begin points := [ 0 , 0 , 0 ] ;
6469: LD_ADDR_VAR 0 9
6473: PUSH
6474: LD_INT 0
6476: PUSH
6477: LD_INT 0
6479: PUSH
6480: LD_INT 0
6482: PUSH
6483: EMPTY
6484: LIST
6485: LIST
6486: LIST
6487: ST_TO_ADDR
// bpoints := 1 ;
6488: LD_ADDR_VAR 0 10
6492: PUSH
6493: LD_INT 1
6495: ST_TO_ADDR
// case GetType ( i ) of unit_human :
6496: LD_VAR 0 6
6500: PPUSH
6501: CALL_OW 247
6505: PUSH
6506: LD_INT 1
6508: DOUBLE
6509: EQUAL
6510: IFTRUE 6514
6512: GO 7092
6514: POP
// begin if GetClass ( i ) = 1 then
6515: LD_VAR 0 6
6519: PPUSH
6520: CALL_OW 257
6524: PUSH
6525: LD_INT 1
6527: EQUAL
6528: IFFALSE 6549
// points := [ 10 , 5 , 3 ] ;
6530: LD_ADDR_VAR 0 9
6534: PUSH
6535: LD_INT 10
6537: PUSH
6538: LD_INT 5
6540: PUSH
6541: LD_INT 3
6543: PUSH
6544: EMPTY
6545: LIST
6546: LIST
6547: LIST
6548: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
6549: LD_VAR 0 6
6553: PPUSH
6554: CALL_OW 257
6558: PUSH
6559: LD_INT 2
6561: PUSH
6562: LD_INT 3
6564: PUSH
6565: LD_INT 4
6567: PUSH
6568: EMPTY
6569: LIST
6570: LIST
6571: LIST
6572: IN
6573: IFFALSE 6594
// points := [ 3 , 2 , 1 ] ;
6575: LD_ADDR_VAR 0 9
6579: PUSH
6580: LD_INT 3
6582: PUSH
6583: LD_INT 2
6585: PUSH
6586: LD_INT 1
6588: PUSH
6589: EMPTY
6590: LIST
6591: LIST
6592: LIST
6593: ST_TO_ADDR
// if GetClass ( i ) = 5 then
6594: LD_VAR 0 6
6598: PPUSH
6599: CALL_OW 257
6603: PUSH
6604: LD_INT 5
6606: EQUAL
6607: IFFALSE 6628
// points := [ 130 , 5 , 2 ] ;
6609: LD_ADDR_VAR 0 9
6613: PUSH
6614: LD_INT 130
6616: PUSH
6617: LD_INT 5
6619: PUSH
6620: LD_INT 2
6622: PUSH
6623: EMPTY
6624: LIST
6625: LIST
6626: LIST
6627: ST_TO_ADDR
// if GetClass ( i ) = 8 then
6628: LD_VAR 0 6
6632: PPUSH
6633: CALL_OW 257
6637: PUSH
6638: LD_INT 8
6640: EQUAL
6641: IFFALSE 6662
// points := [ 35 , 35 , 30 ] ;
6643: LD_ADDR_VAR 0 9
6647: PUSH
6648: LD_INT 35
6650: PUSH
6651: LD_INT 35
6653: PUSH
6654: LD_INT 30
6656: PUSH
6657: EMPTY
6658: LIST
6659: LIST
6660: LIST
6661: ST_TO_ADDR
// if GetClass ( i ) = 9 then
6662: LD_VAR 0 6
6666: PPUSH
6667: CALL_OW 257
6671: PUSH
6672: LD_INT 9
6674: EQUAL
6675: IFFALSE 6696
// points := [ 20 , 55 , 40 ] ;
6677: LD_ADDR_VAR 0 9
6681: PUSH
6682: LD_INT 20
6684: PUSH
6685: LD_INT 55
6687: PUSH
6688: LD_INT 40
6690: PUSH
6691: EMPTY
6692: LIST
6693: LIST
6694: LIST
6695: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
6696: LD_VAR 0 6
6700: PPUSH
6701: CALL_OW 257
6705: PUSH
6706: LD_INT 12
6708: PUSH
6709: LD_INT 16
6711: PUSH
6712: EMPTY
6713: LIST
6714: LIST
6715: IN
6716: IFFALSE 6737
// points := [ 5 , 3 , 2 ] ;
6718: LD_ADDR_VAR 0 9
6722: PUSH
6723: LD_INT 5
6725: PUSH
6726: LD_INT 3
6728: PUSH
6729: LD_INT 2
6731: PUSH
6732: EMPTY
6733: LIST
6734: LIST
6735: LIST
6736: ST_TO_ADDR
// if GetClass ( i ) = 17 then
6737: LD_VAR 0 6
6741: PPUSH
6742: CALL_OW 257
6746: PUSH
6747: LD_INT 17
6749: EQUAL
6750: IFFALSE 6771
// points := [ 100 , 50 , 75 ] ;
6752: LD_ADDR_VAR 0 9
6756: PUSH
6757: LD_INT 100
6759: PUSH
6760: LD_INT 50
6762: PUSH
6763: LD_INT 75
6765: PUSH
6766: EMPTY
6767: LIST
6768: LIST
6769: LIST
6770: ST_TO_ADDR
// if GetClass ( i ) = 15 then
6771: LD_VAR 0 6
6775: PPUSH
6776: CALL_OW 257
6780: PUSH
6781: LD_INT 15
6783: EQUAL
6784: IFFALSE 6805
// points := [ 10 , 5 , 3 ] ;
6786: LD_ADDR_VAR 0 9
6790: PUSH
6791: LD_INT 10
6793: PUSH
6794: LD_INT 5
6796: PUSH
6797: LD_INT 3
6799: PUSH
6800: EMPTY
6801: LIST
6802: LIST
6803: LIST
6804: ST_TO_ADDR
// if GetClass ( i ) = 14 then
6805: LD_VAR 0 6
6809: PPUSH
6810: CALL_OW 257
6814: PUSH
6815: LD_INT 14
6817: EQUAL
6818: IFFALSE 6839
// points := [ 10 , 0 , 0 ] ;
6820: LD_ADDR_VAR 0 9
6824: PUSH
6825: LD_INT 10
6827: PUSH
6828: LD_INT 0
6830: PUSH
6831: LD_INT 0
6833: PUSH
6834: EMPTY
6835: LIST
6836: LIST
6837: LIST
6838: ST_TO_ADDR
// if GetClass ( i ) = 11 then
6839: LD_VAR 0 6
6843: PPUSH
6844: CALL_OW 257
6848: PUSH
6849: LD_INT 11
6851: EQUAL
6852: IFFALSE 6873
// points := [ 30 , 10 , 5 ] ;
6854: LD_ADDR_VAR 0 9
6858: PUSH
6859: LD_INT 30
6861: PUSH
6862: LD_INT 10
6864: PUSH
6865: LD_INT 5
6867: PUSH
6868: EMPTY
6869: LIST
6870: LIST
6871: LIST
6872: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
6873: LD_VAR 0 1
6877: PPUSH
6878: LD_INT 5
6880: PPUSH
6881: CALL_OW 321
6885: PUSH
6886: LD_INT 2
6888: EQUAL
6889: IFFALSE 6906
// bpoints := bpoints * 1.8 ;
6891: LD_ADDR_VAR 0 10
6895: PUSH
6896: LD_VAR 0 10
6900: PUSH
6901: LD_REAL  1.80000000000000E+0000
6904: MUL
6905: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
6906: LD_VAR 0 6
6910: PPUSH
6911: CALL_OW 257
6915: PUSH
6916: LD_INT 1
6918: PUSH
6919: LD_INT 2
6921: PUSH
6922: LD_INT 3
6924: PUSH
6925: LD_INT 4
6927: PUSH
6928: EMPTY
6929: LIST
6930: LIST
6931: LIST
6932: LIST
6933: IN
6934: PUSH
6935: LD_VAR 0 1
6939: PPUSH
6940: LD_INT 51
6942: PPUSH
6943: CALL_OW 321
6947: PUSH
6948: LD_INT 2
6950: EQUAL
6951: AND
6952: IFFALSE 6969
// bpoints := bpoints * 1.2 ;
6954: LD_ADDR_VAR 0 10
6958: PUSH
6959: LD_VAR 0 10
6963: PUSH
6964: LD_REAL  1.20000000000000E+0000
6967: MUL
6968: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
6969: LD_VAR 0 6
6973: PPUSH
6974: CALL_OW 257
6978: PUSH
6979: LD_INT 5
6981: PUSH
6982: LD_INT 7
6984: PUSH
6985: LD_INT 9
6987: PUSH
6988: EMPTY
6989: LIST
6990: LIST
6991: LIST
6992: IN
6993: PUSH
6994: LD_VAR 0 1
6998: PPUSH
6999: LD_INT 52
7001: PPUSH
7002: CALL_OW 321
7006: PUSH
7007: LD_INT 2
7009: EQUAL
7010: AND
7011: IFFALSE 7028
// bpoints := bpoints * 1.5 ;
7013: LD_ADDR_VAR 0 10
7017: PUSH
7018: LD_VAR 0 10
7022: PUSH
7023: LD_REAL  1.50000000000000E+0000
7026: MUL
7027: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
7028: LD_VAR 0 1
7032: PPUSH
7033: LD_INT 66
7035: PPUSH
7036: CALL_OW 321
7040: PUSH
7041: LD_INT 2
7043: EQUAL
7044: IFFALSE 7061
// bpoints := bpoints * 1.1 ;
7046: LD_ADDR_VAR 0 10
7050: PUSH
7051: LD_VAR 0 10
7055: PUSH
7056: LD_REAL  1.10000000000000E+0000
7059: MUL
7060: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
7061: LD_ADDR_VAR 0 10
7065: PUSH
7066: LD_VAR 0 10
7070: PUSH
7071: LD_VAR 0 6
7075: PPUSH
7076: LD_INT 1
7078: PPUSH
7079: CALL_OW 259
7083: PUSH
7084: LD_REAL  1.15000000000000E+0000
7087: MUL
7088: MUL
7089: ST_TO_ADDR
// end ; unit_vehicle :
7090: GO 7918
7092: LD_INT 2
7094: DOUBLE
7095: EQUAL
7096: IFTRUE 7100
7098: GO 7906
7100: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
7101: LD_VAR 0 6
7105: PPUSH
7106: CALL_OW 264
7110: PUSH
7111: LD_INT 2
7113: PUSH
7114: LD_INT 42
7116: PUSH
7117: LD_INT 24
7119: PUSH
7120: EMPTY
7121: LIST
7122: LIST
7123: LIST
7124: IN
7125: IFFALSE 7146
// points := [ 25 , 5 , 3 ] ;
7127: LD_ADDR_VAR 0 9
7131: PUSH
7132: LD_INT 25
7134: PUSH
7135: LD_INT 5
7137: PUSH
7138: LD_INT 3
7140: PUSH
7141: EMPTY
7142: LIST
7143: LIST
7144: LIST
7145: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
7146: LD_VAR 0 6
7150: PPUSH
7151: CALL_OW 264
7155: PUSH
7156: LD_INT 4
7158: PUSH
7159: LD_INT 43
7161: PUSH
7162: LD_INT 25
7164: PUSH
7165: EMPTY
7166: LIST
7167: LIST
7168: LIST
7169: IN
7170: IFFALSE 7191
// points := [ 40 , 15 , 5 ] ;
7172: LD_ADDR_VAR 0 9
7176: PUSH
7177: LD_INT 40
7179: PUSH
7180: LD_INT 15
7182: PUSH
7183: LD_INT 5
7185: PUSH
7186: EMPTY
7187: LIST
7188: LIST
7189: LIST
7190: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
7191: LD_VAR 0 6
7195: PPUSH
7196: CALL_OW 264
7200: PUSH
7201: LD_INT 3
7203: PUSH
7204: LD_INT 23
7206: PUSH
7207: EMPTY
7208: LIST
7209: LIST
7210: IN
7211: IFFALSE 7232
// points := [ 7 , 25 , 8 ] ;
7213: LD_ADDR_VAR 0 9
7217: PUSH
7218: LD_INT 7
7220: PUSH
7221: LD_INT 25
7223: PUSH
7224: LD_INT 8
7226: PUSH
7227: EMPTY
7228: LIST
7229: LIST
7230: LIST
7231: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
7232: LD_VAR 0 6
7236: PPUSH
7237: CALL_OW 264
7241: PUSH
7242: LD_INT 5
7244: PUSH
7245: LD_INT 27
7247: PUSH
7248: LD_INT 44
7250: PUSH
7251: EMPTY
7252: LIST
7253: LIST
7254: LIST
7255: IN
7256: IFFALSE 7277
// points := [ 14 , 50 , 16 ] ;
7258: LD_ADDR_VAR 0 9
7262: PUSH
7263: LD_INT 14
7265: PUSH
7266: LD_INT 50
7268: PUSH
7269: LD_INT 16
7271: PUSH
7272: EMPTY
7273: LIST
7274: LIST
7275: LIST
7276: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
7277: LD_VAR 0 6
7281: PPUSH
7282: CALL_OW 264
7286: PUSH
7287: LD_INT 6
7289: PUSH
7290: LD_INT 46
7292: PUSH
7293: EMPTY
7294: LIST
7295: LIST
7296: IN
7297: IFFALSE 7318
// points := [ 32 , 120 , 70 ] ;
7299: LD_ADDR_VAR 0 9
7303: PUSH
7304: LD_INT 32
7306: PUSH
7307: LD_INT 120
7309: PUSH
7310: LD_INT 70
7312: PUSH
7313: EMPTY
7314: LIST
7315: LIST
7316: LIST
7317: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
7318: LD_VAR 0 6
7322: PPUSH
7323: CALL_OW 264
7327: PUSH
7328: LD_INT 7
7330: PUSH
7331: LD_INT 28
7333: PUSH
7334: LD_INT 45
7336: PUSH
7337: LD_INT 92
7339: PUSH
7340: EMPTY
7341: LIST
7342: LIST
7343: LIST
7344: LIST
7345: IN
7346: IFFALSE 7367
// points := [ 35 , 20 , 45 ] ;
7348: LD_ADDR_VAR 0 9
7352: PUSH
7353: LD_INT 35
7355: PUSH
7356: LD_INT 20
7358: PUSH
7359: LD_INT 45
7361: PUSH
7362: EMPTY
7363: LIST
7364: LIST
7365: LIST
7366: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
7367: LD_VAR 0 6
7371: PPUSH
7372: CALL_OW 264
7376: PUSH
7377: LD_INT 47
7379: PUSH
7380: EMPTY
7381: LIST
7382: IN
7383: IFFALSE 7404
// points := [ 67 , 45 , 75 ] ;
7385: LD_ADDR_VAR 0 9
7389: PUSH
7390: LD_INT 67
7392: PUSH
7393: LD_INT 45
7395: PUSH
7396: LD_INT 75
7398: PUSH
7399: EMPTY
7400: LIST
7401: LIST
7402: LIST
7403: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
7404: LD_VAR 0 6
7408: PPUSH
7409: CALL_OW 264
7413: PUSH
7414: LD_INT 26
7416: PUSH
7417: EMPTY
7418: LIST
7419: IN
7420: IFFALSE 7441
// points := [ 120 , 30 , 80 ] ;
7422: LD_ADDR_VAR 0 9
7426: PUSH
7427: LD_INT 120
7429: PUSH
7430: LD_INT 30
7432: PUSH
7433: LD_INT 80
7435: PUSH
7436: EMPTY
7437: LIST
7438: LIST
7439: LIST
7440: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
7441: LD_VAR 0 6
7445: PPUSH
7446: CALL_OW 264
7450: PUSH
7451: LD_INT 22
7453: PUSH
7454: EMPTY
7455: LIST
7456: IN
7457: IFFALSE 7478
// points := [ 40 , 1 , 1 ] ;
7459: LD_ADDR_VAR 0 9
7463: PUSH
7464: LD_INT 40
7466: PUSH
7467: LD_INT 1
7469: PUSH
7470: LD_INT 1
7472: PUSH
7473: EMPTY
7474: LIST
7475: LIST
7476: LIST
7477: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
7478: LD_VAR 0 6
7482: PPUSH
7483: CALL_OW 264
7487: PUSH
7488: LD_INT 29
7490: PUSH
7491: EMPTY
7492: LIST
7493: IN
7494: IFFALSE 7515
// points := [ 70 , 200 , 400 ] ;
7496: LD_ADDR_VAR 0 9
7500: PUSH
7501: LD_INT 70
7503: PUSH
7504: LD_INT 200
7506: PUSH
7507: LD_INT 400
7509: PUSH
7510: EMPTY
7511: LIST
7512: LIST
7513: LIST
7514: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
7515: LD_VAR 0 6
7519: PPUSH
7520: CALL_OW 264
7524: PUSH
7525: LD_INT 14
7527: PUSH
7528: LD_INT 53
7530: PUSH
7531: EMPTY
7532: LIST
7533: LIST
7534: IN
7535: IFFALSE 7556
// points := [ 40 , 10 , 20 ] ;
7537: LD_ADDR_VAR 0 9
7541: PUSH
7542: LD_INT 40
7544: PUSH
7545: LD_INT 10
7547: PUSH
7548: LD_INT 20
7550: PUSH
7551: EMPTY
7552: LIST
7553: LIST
7554: LIST
7555: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
7556: LD_VAR 0 6
7560: PPUSH
7561: CALL_OW 264
7565: PUSH
7566: LD_INT 9
7568: PUSH
7569: EMPTY
7570: LIST
7571: IN
7572: IFFALSE 7593
// points := [ 5 , 70 , 20 ] ;
7574: LD_ADDR_VAR 0 9
7578: PUSH
7579: LD_INT 5
7581: PUSH
7582: LD_INT 70
7584: PUSH
7585: LD_INT 20
7587: PUSH
7588: EMPTY
7589: LIST
7590: LIST
7591: LIST
7592: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
7593: LD_VAR 0 6
7597: PPUSH
7598: CALL_OW 264
7602: PUSH
7603: LD_INT 10
7605: PUSH
7606: EMPTY
7607: LIST
7608: IN
7609: IFFALSE 7630
// points := [ 35 , 110 , 70 ] ;
7611: LD_ADDR_VAR 0 9
7615: PUSH
7616: LD_INT 35
7618: PUSH
7619: LD_INT 110
7621: PUSH
7622: LD_INT 70
7624: PUSH
7625: EMPTY
7626: LIST
7627: LIST
7628: LIST
7629: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
7630: LD_VAR 0 6
7634: PPUSH
7635: CALL_OW 265
7639: PUSH
7640: LD_INT 25
7642: EQUAL
7643: IFFALSE 7664
// points := [ 80 , 65 , 100 ] ;
7645: LD_ADDR_VAR 0 9
7649: PUSH
7650: LD_INT 80
7652: PUSH
7653: LD_INT 65
7655: PUSH
7656: LD_INT 100
7658: PUSH
7659: EMPTY
7660: LIST
7661: LIST
7662: LIST
7663: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
7664: LD_VAR 0 6
7668: PPUSH
7669: CALL_OW 263
7673: PUSH
7674: LD_INT 1
7676: EQUAL
7677: IFFALSE 7712
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
7679: LD_ADDR_VAR 0 10
7683: PUSH
7684: LD_VAR 0 10
7688: PUSH
7689: LD_VAR 0 6
7693: PPUSH
7694: CALL_OW 311
7698: PPUSH
7699: LD_INT 3
7701: PPUSH
7702: CALL_OW 259
7706: PUSH
7707: LD_INT 4
7709: MUL
7710: MUL
7711: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
7712: LD_VAR 0 6
7716: PPUSH
7717: CALL_OW 263
7721: PUSH
7722: LD_INT 2
7724: EQUAL
7725: IFFALSE 7776
// begin j := IsControledBy ( i ) ;
7727: LD_ADDR_VAR 0 7
7731: PUSH
7732: LD_VAR 0 6
7736: PPUSH
7737: CALL_OW 312
7741: ST_TO_ADDR
// if j then
7742: LD_VAR 0 7
7746: IFFALSE 7776
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
7748: LD_ADDR_VAR 0 10
7752: PUSH
7753: LD_VAR 0 10
7757: PUSH
7758: LD_VAR 0 7
7762: PPUSH
7763: LD_INT 3
7765: PPUSH
7766: CALL_OW 259
7770: PUSH
7771: LD_INT 3
7773: MUL
7774: MUL
7775: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
7776: LD_VAR 0 6
7780: PPUSH
7781: CALL_OW 264
7785: PUSH
7786: LD_INT 5
7788: PUSH
7789: LD_INT 6
7791: PUSH
7792: LD_INT 46
7794: PUSH
7795: LD_INT 44
7797: PUSH
7798: LD_INT 47
7800: PUSH
7801: LD_INT 45
7803: PUSH
7804: LD_INT 28
7806: PUSH
7807: LD_INT 7
7809: PUSH
7810: LD_INT 27
7812: PUSH
7813: LD_INT 29
7815: PUSH
7816: EMPTY
7817: LIST
7818: LIST
7819: LIST
7820: LIST
7821: LIST
7822: LIST
7823: LIST
7824: LIST
7825: LIST
7826: LIST
7827: IN
7828: PUSH
7829: LD_VAR 0 1
7833: PPUSH
7834: LD_INT 52
7836: PPUSH
7837: CALL_OW 321
7841: PUSH
7842: LD_INT 2
7844: EQUAL
7845: AND
7846: IFFALSE 7863
// bpoints := bpoints * 1.2 ;
7848: LD_ADDR_VAR 0 10
7852: PUSH
7853: LD_VAR 0 10
7857: PUSH
7858: LD_REAL  1.20000000000000E+0000
7861: MUL
7862: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
7863: LD_VAR 0 6
7867: PPUSH
7868: CALL_OW 264
7872: PUSH
7873: LD_INT 6
7875: PUSH
7876: LD_INT 46
7878: PUSH
7879: LD_INT 47
7881: PUSH
7882: EMPTY
7883: LIST
7884: LIST
7885: LIST
7886: IN
7887: IFFALSE 7904
// bpoints := bpoints * 1.2 ;
7889: LD_ADDR_VAR 0 10
7893: PUSH
7894: LD_VAR 0 10
7898: PUSH
7899: LD_REAL  1.20000000000000E+0000
7902: MUL
7903: ST_TO_ADDR
// end ; unit_building :
7904: GO 7918
7906: LD_INT 3
7908: DOUBLE
7909: EQUAL
7910: IFTRUE 7914
7912: GO 7917
7914: POP
// ; end ;
7915: GO 7918
7917: POP
// for j = 1 to 3 do
7918: LD_ADDR_VAR 0 7
7922: PUSH
7923: DOUBLE
7924: LD_INT 1
7926: DEC
7927: ST_TO_ADDR
7928: LD_INT 3
7930: PUSH
7931: FOR_TO
7932: IFFALSE 7985
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
7934: LD_ADDR_VAR 0 5
7938: PUSH
7939: LD_VAR 0 5
7943: PPUSH
7944: LD_VAR 0 7
7948: PPUSH
7949: LD_VAR 0 5
7953: PUSH
7954: LD_VAR 0 7
7958: ARRAY
7959: PUSH
7960: LD_VAR 0 9
7964: PUSH
7965: LD_VAR 0 7
7969: ARRAY
7970: PUSH
7971: LD_VAR 0 10
7975: MUL
7976: PLUS
7977: PPUSH
7978: CALL_OW 1
7982: ST_TO_ADDR
7983: GO 7931
7985: POP
7986: POP
// end ;
7987: GO 6466
7989: POP
7990: POP
// result := Replace ( result , 4 , tmp ) ;
7991: LD_ADDR_VAR 0 5
7995: PUSH
7996: LD_VAR 0 5
8000: PPUSH
8001: LD_INT 4
8003: PPUSH
8004: LD_VAR 0 8
8008: PPUSH
8009: CALL_OW 1
8013: ST_TO_ADDR
// end ;
8014: LD_VAR 0 5
8018: RET
// export function DangerAtRange ( unit , range ) ; begin
8019: LD_INT 0
8021: PPUSH
// if not unit then
8022: LD_VAR 0 1
8026: NOT
8027: IFFALSE 8031
// exit ;
8029: GO 8076
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
8031: LD_ADDR_VAR 0 3
8035: PUSH
8036: LD_VAR 0 1
8040: PPUSH
8041: CALL_OW 255
8045: PPUSH
8046: LD_VAR 0 1
8050: PPUSH
8051: CALL_OW 250
8055: PPUSH
8056: LD_VAR 0 1
8060: PPUSH
8061: CALL_OW 251
8065: PPUSH
8066: LD_VAR 0 2
8070: PPUSH
8071: CALL 6318 0 4
8075: ST_TO_ADDR
// end ;
8076: LD_VAR 0 3
8080: RET
// export function DangerInArea ( side , area ) ; begin
8081: LD_INT 0
8083: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
8084: LD_ADDR_VAR 0 3
8088: PUSH
8089: LD_VAR 0 2
8093: PPUSH
8094: LD_INT 81
8096: PUSH
8097: LD_VAR 0 1
8101: PUSH
8102: EMPTY
8103: LIST
8104: LIST
8105: PPUSH
8106: CALL_OW 70
8110: ST_TO_ADDR
// end ;
8111: LD_VAR 0 3
8115: RET
// export function IsExtension ( b ) ; begin
8116: LD_INT 0
8118: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
8119: LD_ADDR_VAR 0 2
8123: PUSH
8124: LD_VAR 0 1
8128: PUSH
8129: LD_INT 23
8131: PUSH
8132: LD_INT 20
8134: PUSH
8135: LD_INT 22
8137: PUSH
8138: LD_INT 17
8140: PUSH
8141: LD_INT 24
8143: PUSH
8144: LD_INT 21
8146: PUSH
8147: LD_INT 19
8149: PUSH
8150: LD_INT 16
8152: PUSH
8153: LD_INT 25
8155: PUSH
8156: LD_INT 18
8158: PUSH
8159: EMPTY
8160: LIST
8161: LIST
8162: LIST
8163: LIST
8164: LIST
8165: LIST
8166: LIST
8167: LIST
8168: LIST
8169: LIST
8170: IN
8171: ST_TO_ADDR
// end ;
8172: LD_VAR 0 2
8176: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
8177: LD_INT 0
8179: PPUSH
8180: PPUSH
8181: PPUSH
// result := [ ] ;
8182: LD_ADDR_VAR 0 4
8186: PUSH
8187: EMPTY
8188: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
8189: LD_ADDR_VAR 0 5
8193: PUSH
8194: LD_VAR 0 2
8198: PPUSH
8199: LD_INT 21
8201: PUSH
8202: LD_INT 3
8204: PUSH
8205: EMPTY
8206: LIST
8207: LIST
8208: PPUSH
8209: CALL_OW 70
8213: ST_TO_ADDR
// if not tmp then
8214: LD_VAR 0 5
8218: NOT
8219: IFFALSE 8223
// exit ;
8221: GO 8287
// if checkLink then
8223: LD_VAR 0 3
8227: IFFALSE 8277
// begin for i in tmp do
8229: LD_ADDR_VAR 0 6
8233: PUSH
8234: LD_VAR 0 5
8238: PUSH
8239: FOR_IN
8240: IFFALSE 8275
// if GetBase ( i ) <> base then
8242: LD_VAR 0 6
8246: PPUSH
8247: CALL_OW 274
8251: PUSH
8252: LD_VAR 0 1
8256: NONEQUAL
8257: IFFALSE 8273
// ComLinkToBase ( base , i ) ;
8259: LD_VAR 0 1
8263: PPUSH
8264: LD_VAR 0 6
8268: PPUSH
8269: CALL_OW 169
8273: GO 8239
8275: POP
8276: POP
// end ; result := tmp ;
8277: LD_ADDR_VAR 0 4
8281: PUSH
8282: LD_VAR 0 5
8286: ST_TO_ADDR
// end ;
8287: LD_VAR 0 4
8291: RET
// export function ComComplete ( units , b ) ; var i ; begin
8292: LD_INT 0
8294: PPUSH
8295: PPUSH
// if not units then
8296: LD_VAR 0 1
8300: NOT
8301: IFFALSE 8305
// exit ;
8303: GO 8395
// for i in units do
8305: LD_ADDR_VAR 0 4
8309: PUSH
8310: LD_VAR 0 1
8314: PUSH
8315: FOR_IN
8316: IFFALSE 8393
// if BuildingStatus ( b ) = bs_build then
8318: LD_VAR 0 2
8322: PPUSH
8323: CALL_OW 461
8327: PUSH
8328: LD_INT 1
8330: EQUAL
8331: IFFALSE 8391
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
8333: LD_VAR 0 4
8337: PPUSH
8338: LD_STRING h
8340: PUSH
8341: LD_VAR 0 2
8345: PPUSH
8346: CALL_OW 250
8350: PUSH
8351: LD_VAR 0 2
8355: PPUSH
8356: CALL_OW 251
8360: PUSH
8361: LD_VAR 0 2
8365: PUSH
8366: LD_INT 0
8368: PUSH
8369: LD_INT 0
8371: PUSH
8372: LD_INT 0
8374: PUSH
8375: EMPTY
8376: LIST
8377: LIST
8378: LIST
8379: LIST
8380: LIST
8381: LIST
8382: LIST
8383: PUSH
8384: EMPTY
8385: LIST
8386: PPUSH
8387: CALL_OW 446
8391: GO 8315
8393: POP
8394: POP
// end ;
8395: LD_VAR 0 3
8399: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
8400: LD_INT 0
8402: PPUSH
8403: PPUSH
8404: PPUSH
8405: PPUSH
8406: PPUSH
8407: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
8408: LD_VAR 0 1
8412: NOT
8413: PUSH
8414: LD_VAR 0 1
8418: PPUSH
8419: CALL_OW 263
8423: PUSH
8424: LD_INT 2
8426: NONEQUAL
8427: OR
8428: IFFALSE 8432
// exit ;
8430: GO 8748
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
8432: LD_ADDR_VAR 0 6
8436: PUSH
8437: LD_INT 22
8439: PUSH
8440: LD_VAR 0 1
8444: PPUSH
8445: CALL_OW 255
8449: PUSH
8450: EMPTY
8451: LIST
8452: LIST
8453: PUSH
8454: LD_INT 2
8456: PUSH
8457: LD_INT 30
8459: PUSH
8460: LD_INT 36
8462: PUSH
8463: EMPTY
8464: LIST
8465: LIST
8466: PUSH
8467: LD_INT 34
8469: PUSH
8470: LD_INT 31
8472: PUSH
8473: EMPTY
8474: LIST
8475: LIST
8476: PUSH
8477: EMPTY
8478: LIST
8479: LIST
8480: LIST
8481: PUSH
8482: EMPTY
8483: LIST
8484: LIST
8485: PPUSH
8486: CALL_OW 69
8490: ST_TO_ADDR
// if not tmp then
8491: LD_VAR 0 6
8495: NOT
8496: IFFALSE 8500
// exit ;
8498: GO 8748
// result := [ ] ;
8500: LD_ADDR_VAR 0 2
8504: PUSH
8505: EMPTY
8506: ST_TO_ADDR
// for i in tmp do
8507: LD_ADDR_VAR 0 3
8511: PUSH
8512: LD_VAR 0 6
8516: PUSH
8517: FOR_IN
8518: IFFALSE 8589
// begin t := UnitsInside ( i ) ;
8520: LD_ADDR_VAR 0 4
8524: PUSH
8525: LD_VAR 0 3
8529: PPUSH
8530: CALL_OW 313
8534: ST_TO_ADDR
// if t then
8535: LD_VAR 0 4
8539: IFFALSE 8587
// for j in t do
8541: LD_ADDR_VAR 0 7
8545: PUSH
8546: LD_VAR 0 4
8550: PUSH
8551: FOR_IN
8552: IFFALSE 8585
// result := Replace ( result , result + 1 , j ) ;
8554: LD_ADDR_VAR 0 2
8558: PUSH
8559: LD_VAR 0 2
8563: PPUSH
8564: LD_VAR 0 2
8568: PUSH
8569: LD_INT 1
8571: PLUS
8572: PPUSH
8573: LD_VAR 0 7
8577: PPUSH
8578: CALL_OW 1
8582: ST_TO_ADDR
8583: GO 8551
8585: POP
8586: POP
// end ;
8587: GO 8517
8589: POP
8590: POP
// if not result then
8591: LD_VAR 0 2
8595: NOT
8596: IFFALSE 8600
// exit ;
8598: GO 8748
// mech := result [ 1 ] ;
8600: LD_ADDR_VAR 0 5
8604: PUSH
8605: LD_VAR 0 2
8609: PUSH
8610: LD_INT 1
8612: ARRAY
8613: ST_TO_ADDR
// if result > 1 then
8614: LD_VAR 0 2
8618: PUSH
8619: LD_INT 1
8621: GREATER
8622: IFFALSE 8734
// begin for i = 2 to result do
8624: LD_ADDR_VAR 0 3
8628: PUSH
8629: DOUBLE
8630: LD_INT 2
8632: DEC
8633: ST_TO_ADDR
8634: LD_VAR 0 2
8638: PUSH
8639: FOR_TO
8640: IFFALSE 8732
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
8642: LD_ADDR_VAR 0 4
8646: PUSH
8647: LD_VAR 0 2
8651: PUSH
8652: LD_VAR 0 3
8656: ARRAY
8657: PPUSH
8658: LD_INT 3
8660: PPUSH
8661: CALL_OW 259
8665: PUSH
8666: LD_VAR 0 2
8670: PUSH
8671: LD_VAR 0 3
8675: ARRAY
8676: PPUSH
8677: CALL_OW 432
8681: MINUS
8682: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
8683: LD_VAR 0 4
8687: PUSH
8688: LD_VAR 0 5
8692: PPUSH
8693: LD_INT 3
8695: PPUSH
8696: CALL_OW 259
8700: PUSH
8701: LD_VAR 0 5
8705: PPUSH
8706: CALL_OW 432
8710: MINUS
8711: GREATEREQUAL
8712: IFFALSE 8730
// mech := result [ i ] ;
8714: LD_ADDR_VAR 0 5
8718: PUSH
8719: LD_VAR 0 2
8723: PUSH
8724: LD_VAR 0 3
8728: ARRAY
8729: ST_TO_ADDR
// end ;
8730: GO 8639
8732: POP
8733: POP
// end ; ComLinkTo ( vehicle , mech ) ;
8734: LD_VAR 0 1
8738: PPUSH
8739: LD_VAR 0 5
8743: PPUSH
8744: CALL_OW 135
// end ;
8748: LD_VAR 0 2
8752: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
8753: LD_INT 0
8755: PPUSH
8756: PPUSH
8757: PPUSH
8758: PPUSH
8759: PPUSH
8760: PPUSH
8761: PPUSH
8762: PPUSH
8763: PPUSH
8764: PPUSH
8765: PPUSH
8766: PPUSH
8767: PPUSH
// result := [ ] ;
8768: LD_ADDR_VAR 0 7
8772: PUSH
8773: EMPTY
8774: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
8775: LD_VAR 0 1
8779: PPUSH
8780: CALL_OW 266
8784: PUSH
8785: LD_INT 0
8787: PUSH
8788: LD_INT 1
8790: PUSH
8791: EMPTY
8792: LIST
8793: LIST
8794: IN
8795: NOT
8796: IFFALSE 8800
// exit ;
8798: GO 10434
// if name then
8800: LD_VAR 0 3
8804: IFFALSE 8820
// SetBName ( base_dep , name ) ;
8806: LD_VAR 0 1
8810: PPUSH
8811: LD_VAR 0 3
8815: PPUSH
8816: CALL_OW 500
// base := GetBase ( base_dep ) ;
8820: LD_ADDR_VAR 0 15
8824: PUSH
8825: LD_VAR 0 1
8829: PPUSH
8830: CALL_OW 274
8834: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
8835: LD_ADDR_VAR 0 16
8839: PUSH
8840: LD_VAR 0 1
8844: PPUSH
8845: CALL_OW 255
8849: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
8850: LD_ADDR_VAR 0 17
8854: PUSH
8855: LD_VAR 0 1
8859: PPUSH
8860: CALL_OW 248
8864: ST_TO_ADDR
// if sources then
8865: LD_VAR 0 5
8869: IFFALSE 8916
// for i = 1 to 3 do
8871: LD_ADDR_VAR 0 8
8875: PUSH
8876: DOUBLE
8877: LD_INT 1
8879: DEC
8880: ST_TO_ADDR
8881: LD_INT 3
8883: PUSH
8884: FOR_TO
8885: IFFALSE 8914
// AddResourceType ( base , i , sources [ i ] ) ;
8887: LD_VAR 0 15
8891: PPUSH
8892: LD_VAR 0 8
8896: PPUSH
8897: LD_VAR 0 5
8901: PUSH
8902: LD_VAR 0 8
8906: ARRAY
8907: PPUSH
8908: CALL_OW 276
8912: GO 8884
8914: POP
8915: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
8916: LD_ADDR_VAR 0 18
8920: PUSH
8921: LD_VAR 0 15
8925: PPUSH
8926: LD_VAR 0 2
8930: PPUSH
8931: LD_INT 1
8933: PPUSH
8934: CALL 8177 0 3
8938: ST_TO_ADDR
// InitHc ;
8939: CALL_OW 19
// InitUc ;
8943: CALL_OW 18
// uc_side := side ;
8947: LD_ADDR_OWVAR 20
8951: PUSH
8952: LD_VAR 0 16
8956: ST_TO_ADDR
// uc_nation := nation ;
8957: LD_ADDR_OWVAR 21
8961: PUSH
8962: LD_VAR 0 17
8966: ST_TO_ADDR
// if buildings then
8967: LD_VAR 0 18
8971: IFFALSE 10293
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
8973: LD_ADDR_VAR 0 19
8977: PUSH
8978: LD_VAR 0 18
8982: PPUSH
8983: LD_INT 2
8985: PUSH
8986: LD_INT 30
8988: PUSH
8989: LD_INT 29
8991: PUSH
8992: EMPTY
8993: LIST
8994: LIST
8995: PUSH
8996: LD_INT 30
8998: PUSH
8999: LD_INT 30
9001: PUSH
9002: EMPTY
9003: LIST
9004: LIST
9005: PUSH
9006: EMPTY
9007: LIST
9008: LIST
9009: LIST
9010: PPUSH
9011: CALL_OW 72
9015: ST_TO_ADDR
// if tmp then
9016: LD_VAR 0 19
9020: IFFALSE 9068
// for i in tmp do
9022: LD_ADDR_VAR 0 8
9026: PUSH
9027: LD_VAR 0 19
9031: PUSH
9032: FOR_IN
9033: IFFALSE 9066
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
9035: LD_VAR 0 8
9039: PPUSH
9040: CALL_OW 250
9044: PPUSH
9045: LD_VAR 0 8
9049: PPUSH
9050: CALL_OW 251
9054: PPUSH
9055: LD_VAR 0 16
9059: PPUSH
9060: CALL_OW 441
9064: GO 9032
9066: POP
9067: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
9068: LD_VAR 0 18
9072: PPUSH
9073: LD_INT 2
9075: PUSH
9076: LD_INT 30
9078: PUSH
9079: LD_INT 32
9081: PUSH
9082: EMPTY
9083: LIST
9084: LIST
9085: PUSH
9086: LD_INT 30
9088: PUSH
9089: LD_INT 33
9091: PUSH
9092: EMPTY
9093: LIST
9094: LIST
9095: PUSH
9096: EMPTY
9097: LIST
9098: LIST
9099: LIST
9100: PPUSH
9101: CALL_OW 72
9105: IFFALSE 9193
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
9107: LD_ADDR_VAR 0 8
9111: PUSH
9112: LD_VAR 0 18
9116: PPUSH
9117: LD_INT 2
9119: PUSH
9120: LD_INT 30
9122: PUSH
9123: LD_INT 32
9125: PUSH
9126: EMPTY
9127: LIST
9128: LIST
9129: PUSH
9130: LD_INT 30
9132: PUSH
9133: LD_INT 33
9135: PUSH
9136: EMPTY
9137: LIST
9138: LIST
9139: PUSH
9140: EMPTY
9141: LIST
9142: LIST
9143: LIST
9144: PPUSH
9145: CALL_OW 72
9149: PUSH
9150: FOR_IN
9151: IFFALSE 9191
// begin if not GetBWeapon ( i ) then
9153: LD_VAR 0 8
9157: PPUSH
9158: CALL_OW 269
9162: NOT
9163: IFFALSE 9189
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
9165: LD_VAR 0 8
9169: PPUSH
9170: LD_VAR 0 8
9174: PPUSH
9175: LD_VAR 0 2
9179: PPUSH
9180: CALL 10439 0 2
9184: PPUSH
9185: CALL_OW 431
// end ;
9189: GO 9150
9191: POP
9192: POP
// end ; for i = 1 to personel do
9193: LD_ADDR_VAR 0 8
9197: PUSH
9198: DOUBLE
9199: LD_INT 1
9201: DEC
9202: ST_TO_ADDR
9203: LD_VAR 0 6
9207: PUSH
9208: FOR_TO
9209: IFFALSE 10273
// begin if i > 4 then
9211: LD_VAR 0 8
9215: PUSH
9216: LD_INT 4
9218: GREATER
9219: IFFALSE 9223
// break ;
9221: GO 10273
// case i of 1 :
9223: LD_VAR 0 8
9227: PUSH
9228: LD_INT 1
9230: DOUBLE
9231: EQUAL
9232: IFTRUE 9236
9234: GO 9316
9236: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
9237: LD_ADDR_VAR 0 12
9241: PUSH
9242: LD_VAR 0 18
9246: PPUSH
9247: LD_INT 22
9249: PUSH
9250: LD_VAR 0 16
9254: PUSH
9255: EMPTY
9256: LIST
9257: LIST
9258: PUSH
9259: LD_INT 58
9261: PUSH
9262: EMPTY
9263: LIST
9264: PUSH
9265: LD_INT 2
9267: PUSH
9268: LD_INT 30
9270: PUSH
9271: LD_INT 32
9273: PUSH
9274: EMPTY
9275: LIST
9276: LIST
9277: PUSH
9278: LD_INT 30
9280: PUSH
9281: LD_INT 4
9283: PUSH
9284: EMPTY
9285: LIST
9286: LIST
9287: PUSH
9288: LD_INT 30
9290: PUSH
9291: LD_INT 5
9293: PUSH
9294: EMPTY
9295: LIST
9296: LIST
9297: PUSH
9298: EMPTY
9299: LIST
9300: LIST
9301: LIST
9302: LIST
9303: PUSH
9304: EMPTY
9305: LIST
9306: LIST
9307: LIST
9308: PPUSH
9309: CALL_OW 72
9313: ST_TO_ADDR
9314: GO 9538
9316: LD_INT 2
9318: DOUBLE
9319: EQUAL
9320: IFTRUE 9324
9322: GO 9386
9324: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
9325: LD_ADDR_VAR 0 12
9329: PUSH
9330: LD_VAR 0 18
9334: PPUSH
9335: LD_INT 22
9337: PUSH
9338: LD_VAR 0 16
9342: PUSH
9343: EMPTY
9344: LIST
9345: LIST
9346: PUSH
9347: LD_INT 2
9349: PUSH
9350: LD_INT 30
9352: PUSH
9353: LD_INT 0
9355: PUSH
9356: EMPTY
9357: LIST
9358: LIST
9359: PUSH
9360: LD_INT 30
9362: PUSH
9363: LD_INT 1
9365: PUSH
9366: EMPTY
9367: LIST
9368: LIST
9369: PUSH
9370: EMPTY
9371: LIST
9372: LIST
9373: LIST
9374: PUSH
9375: EMPTY
9376: LIST
9377: LIST
9378: PPUSH
9379: CALL_OW 72
9383: ST_TO_ADDR
9384: GO 9538
9386: LD_INT 3
9388: DOUBLE
9389: EQUAL
9390: IFTRUE 9394
9392: GO 9456
9394: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
9395: LD_ADDR_VAR 0 12
9399: PUSH
9400: LD_VAR 0 18
9404: PPUSH
9405: LD_INT 22
9407: PUSH
9408: LD_VAR 0 16
9412: PUSH
9413: EMPTY
9414: LIST
9415: LIST
9416: PUSH
9417: LD_INT 2
9419: PUSH
9420: LD_INT 30
9422: PUSH
9423: LD_INT 2
9425: PUSH
9426: EMPTY
9427: LIST
9428: LIST
9429: PUSH
9430: LD_INT 30
9432: PUSH
9433: LD_INT 3
9435: PUSH
9436: EMPTY
9437: LIST
9438: LIST
9439: PUSH
9440: EMPTY
9441: LIST
9442: LIST
9443: LIST
9444: PUSH
9445: EMPTY
9446: LIST
9447: LIST
9448: PPUSH
9449: CALL_OW 72
9453: ST_TO_ADDR
9454: GO 9538
9456: LD_INT 4
9458: DOUBLE
9459: EQUAL
9460: IFTRUE 9464
9462: GO 9537
9464: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
9465: LD_ADDR_VAR 0 12
9469: PUSH
9470: LD_VAR 0 18
9474: PPUSH
9475: LD_INT 22
9477: PUSH
9478: LD_VAR 0 16
9482: PUSH
9483: EMPTY
9484: LIST
9485: LIST
9486: PUSH
9487: LD_INT 2
9489: PUSH
9490: LD_INT 30
9492: PUSH
9493: LD_INT 6
9495: PUSH
9496: EMPTY
9497: LIST
9498: LIST
9499: PUSH
9500: LD_INT 30
9502: PUSH
9503: LD_INT 7
9505: PUSH
9506: EMPTY
9507: LIST
9508: LIST
9509: PUSH
9510: LD_INT 30
9512: PUSH
9513: LD_INT 8
9515: PUSH
9516: EMPTY
9517: LIST
9518: LIST
9519: PUSH
9520: EMPTY
9521: LIST
9522: LIST
9523: LIST
9524: LIST
9525: PUSH
9526: EMPTY
9527: LIST
9528: LIST
9529: PPUSH
9530: CALL_OW 72
9534: ST_TO_ADDR
9535: GO 9538
9537: POP
// if i = 1 then
9538: LD_VAR 0 8
9542: PUSH
9543: LD_INT 1
9545: EQUAL
9546: IFFALSE 9657
// begin tmp := [ ] ;
9548: LD_ADDR_VAR 0 19
9552: PUSH
9553: EMPTY
9554: ST_TO_ADDR
// for j in f do
9555: LD_ADDR_VAR 0 9
9559: PUSH
9560: LD_VAR 0 12
9564: PUSH
9565: FOR_IN
9566: IFFALSE 9639
// if GetBType ( j ) = b_bunker then
9568: LD_VAR 0 9
9572: PPUSH
9573: CALL_OW 266
9577: PUSH
9578: LD_INT 32
9580: EQUAL
9581: IFFALSE 9608
// tmp := Insert ( tmp , 1 , j ) else
9583: LD_ADDR_VAR 0 19
9587: PUSH
9588: LD_VAR 0 19
9592: PPUSH
9593: LD_INT 1
9595: PPUSH
9596: LD_VAR 0 9
9600: PPUSH
9601: CALL_OW 2
9605: ST_TO_ADDR
9606: GO 9637
// tmp := Insert ( tmp , tmp + 1 , j ) ;
9608: LD_ADDR_VAR 0 19
9612: PUSH
9613: LD_VAR 0 19
9617: PPUSH
9618: LD_VAR 0 19
9622: PUSH
9623: LD_INT 1
9625: PLUS
9626: PPUSH
9627: LD_VAR 0 9
9631: PPUSH
9632: CALL_OW 2
9636: ST_TO_ADDR
9637: GO 9565
9639: POP
9640: POP
// if tmp then
9641: LD_VAR 0 19
9645: IFFALSE 9657
// f := tmp ;
9647: LD_ADDR_VAR 0 12
9651: PUSH
9652: LD_VAR 0 19
9656: ST_TO_ADDR
// end ; x := personel [ i ] ;
9657: LD_ADDR_VAR 0 13
9661: PUSH
9662: LD_VAR 0 6
9666: PUSH
9667: LD_VAR 0 8
9671: ARRAY
9672: ST_TO_ADDR
// if x = - 1 then
9673: LD_VAR 0 13
9677: PUSH
9678: LD_INT 1
9680: NEG
9681: EQUAL
9682: IFFALSE 9891
// begin for j in f do
9684: LD_ADDR_VAR 0 9
9688: PUSH
9689: LD_VAR 0 12
9693: PUSH
9694: FOR_IN
9695: IFFALSE 9887
// repeat InitHc ;
9697: CALL_OW 19
// if GetBType ( j ) = b_barracks then
9701: LD_VAR 0 9
9705: PPUSH
9706: CALL_OW 266
9710: PUSH
9711: LD_INT 5
9713: EQUAL
9714: IFFALSE 9784
// begin if UnitsInside ( j ) < 3 then
9716: LD_VAR 0 9
9720: PPUSH
9721: CALL_OW 313
9725: PUSH
9726: LD_INT 3
9728: LESS
9729: IFFALSE 9765
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
9731: LD_INT 0
9733: PPUSH
9734: LD_INT 5
9736: PUSH
9737: LD_INT 8
9739: PUSH
9740: LD_INT 9
9742: PUSH
9743: EMPTY
9744: LIST
9745: LIST
9746: LIST
9747: PUSH
9748: LD_VAR 0 17
9752: ARRAY
9753: PPUSH
9754: LD_VAR 0 4
9758: PPUSH
9759: CALL_OW 380
9763: GO 9782
// PrepareHuman ( false , i , skill ) ;
9765: LD_INT 0
9767: PPUSH
9768: LD_VAR 0 8
9772: PPUSH
9773: LD_VAR 0 4
9777: PPUSH
9778: CALL_OW 380
// end else
9782: GO 9801
// PrepareHuman ( false , i , skill ) ;
9784: LD_INT 0
9786: PPUSH
9787: LD_VAR 0 8
9791: PPUSH
9792: LD_VAR 0 4
9796: PPUSH
9797: CALL_OW 380
// un := CreateHuman ;
9801: LD_ADDR_VAR 0 14
9805: PUSH
9806: CALL_OW 44
9810: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
9811: LD_ADDR_VAR 0 7
9815: PUSH
9816: LD_VAR 0 7
9820: PPUSH
9821: LD_INT 1
9823: PPUSH
9824: LD_VAR 0 14
9828: PPUSH
9829: CALL_OW 2
9833: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
9834: LD_VAR 0 14
9838: PPUSH
9839: LD_VAR 0 9
9843: PPUSH
9844: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
9848: LD_VAR 0 9
9852: PPUSH
9853: CALL_OW 313
9857: PUSH
9858: LD_INT 6
9860: EQUAL
9861: PUSH
9862: LD_VAR 0 9
9866: PPUSH
9867: CALL_OW 266
9871: PUSH
9872: LD_INT 32
9874: PUSH
9875: LD_INT 31
9877: PUSH
9878: EMPTY
9879: LIST
9880: LIST
9881: IN
9882: OR
9883: IFFALSE 9697
9885: GO 9694
9887: POP
9888: POP
// end else
9889: GO 10271
// for j = 1 to x do
9891: LD_ADDR_VAR 0 9
9895: PUSH
9896: DOUBLE
9897: LD_INT 1
9899: DEC
9900: ST_TO_ADDR
9901: LD_VAR 0 13
9905: PUSH
9906: FOR_TO
9907: IFFALSE 10269
// begin InitHc ;
9909: CALL_OW 19
// if not f then
9913: LD_VAR 0 12
9917: NOT
9918: IFFALSE 10007
// begin PrepareHuman ( false , i , skill ) ;
9920: LD_INT 0
9922: PPUSH
9923: LD_VAR 0 8
9927: PPUSH
9928: LD_VAR 0 4
9932: PPUSH
9933: CALL_OW 380
// un := CreateHuman ;
9937: LD_ADDR_VAR 0 14
9941: PUSH
9942: CALL_OW 44
9946: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
9947: LD_ADDR_VAR 0 7
9951: PUSH
9952: LD_VAR 0 7
9956: PPUSH
9957: LD_INT 1
9959: PPUSH
9960: LD_VAR 0 14
9964: PPUSH
9965: CALL_OW 2
9969: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
9970: LD_VAR 0 14
9974: PPUSH
9975: LD_VAR 0 1
9979: PPUSH
9980: CALL_OW 250
9984: PPUSH
9985: LD_VAR 0 1
9989: PPUSH
9990: CALL_OW 251
9994: PPUSH
9995: LD_INT 10
9997: PPUSH
9998: LD_INT 0
10000: PPUSH
10001: CALL_OW 50
// continue ;
10005: GO 9906
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
10007: LD_VAR 0 12
10011: PUSH
10012: LD_INT 1
10014: ARRAY
10015: PPUSH
10016: CALL_OW 313
10020: PUSH
10021: LD_VAR 0 12
10025: PUSH
10026: LD_INT 1
10028: ARRAY
10029: PPUSH
10030: CALL_OW 266
10034: PUSH
10035: LD_INT 32
10037: PUSH
10038: LD_INT 31
10040: PUSH
10041: EMPTY
10042: LIST
10043: LIST
10044: IN
10045: AND
10046: PUSH
10047: LD_VAR 0 12
10051: PUSH
10052: LD_INT 1
10054: ARRAY
10055: PPUSH
10056: CALL_OW 313
10060: PUSH
10061: LD_INT 6
10063: EQUAL
10064: OR
10065: IFFALSE 10085
// f := Delete ( f , 1 ) ;
10067: LD_ADDR_VAR 0 12
10071: PUSH
10072: LD_VAR 0 12
10076: PPUSH
10077: LD_INT 1
10079: PPUSH
10080: CALL_OW 3
10084: ST_TO_ADDR
// if not f then
10085: LD_VAR 0 12
10089: NOT
10090: IFFALSE 10108
// begin x := x + 2 ;
10092: LD_ADDR_VAR 0 13
10096: PUSH
10097: LD_VAR 0 13
10101: PUSH
10102: LD_INT 2
10104: PLUS
10105: ST_TO_ADDR
// continue ;
10106: GO 9906
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
10108: LD_VAR 0 12
10112: PUSH
10113: LD_INT 1
10115: ARRAY
10116: PPUSH
10117: CALL_OW 266
10121: PUSH
10122: LD_INT 5
10124: EQUAL
10125: IFFALSE 10199
// begin if UnitsInside ( f [ 1 ] ) < 3 then
10127: LD_VAR 0 12
10131: PUSH
10132: LD_INT 1
10134: ARRAY
10135: PPUSH
10136: CALL_OW 313
10140: PUSH
10141: LD_INT 3
10143: LESS
10144: IFFALSE 10180
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
10146: LD_INT 0
10148: PPUSH
10149: LD_INT 5
10151: PUSH
10152: LD_INT 8
10154: PUSH
10155: LD_INT 9
10157: PUSH
10158: EMPTY
10159: LIST
10160: LIST
10161: LIST
10162: PUSH
10163: LD_VAR 0 17
10167: ARRAY
10168: PPUSH
10169: LD_VAR 0 4
10173: PPUSH
10174: CALL_OW 380
10178: GO 10197
// PrepareHuman ( false , i , skill ) ;
10180: LD_INT 0
10182: PPUSH
10183: LD_VAR 0 8
10187: PPUSH
10188: LD_VAR 0 4
10192: PPUSH
10193: CALL_OW 380
// end else
10197: GO 10216
// PrepareHuman ( false , i , skill ) ;
10199: LD_INT 0
10201: PPUSH
10202: LD_VAR 0 8
10206: PPUSH
10207: LD_VAR 0 4
10211: PPUSH
10212: CALL_OW 380
// un := CreateHuman ;
10216: LD_ADDR_VAR 0 14
10220: PUSH
10221: CALL_OW 44
10225: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
10226: LD_ADDR_VAR 0 7
10230: PUSH
10231: LD_VAR 0 7
10235: PPUSH
10236: LD_INT 1
10238: PPUSH
10239: LD_VAR 0 14
10243: PPUSH
10244: CALL_OW 2
10248: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
10249: LD_VAR 0 14
10253: PPUSH
10254: LD_VAR 0 12
10258: PUSH
10259: LD_INT 1
10261: ARRAY
10262: PPUSH
10263: CALL_OW 52
// end ;
10267: GO 9906
10269: POP
10270: POP
// end ;
10271: GO 9208
10273: POP
10274: POP
// result := result ^ buildings ;
10275: LD_ADDR_VAR 0 7
10279: PUSH
10280: LD_VAR 0 7
10284: PUSH
10285: LD_VAR 0 18
10289: ADD
10290: ST_TO_ADDR
// end else
10291: GO 10434
// begin for i = 1 to personel do
10293: LD_ADDR_VAR 0 8
10297: PUSH
10298: DOUBLE
10299: LD_INT 1
10301: DEC
10302: ST_TO_ADDR
10303: LD_VAR 0 6
10307: PUSH
10308: FOR_TO
10309: IFFALSE 10432
// begin if i > 4 then
10311: LD_VAR 0 8
10315: PUSH
10316: LD_INT 4
10318: GREATER
10319: IFFALSE 10323
// break ;
10321: GO 10432
// x := personel [ i ] ;
10323: LD_ADDR_VAR 0 13
10327: PUSH
10328: LD_VAR 0 6
10332: PUSH
10333: LD_VAR 0 8
10337: ARRAY
10338: ST_TO_ADDR
// if x = - 1 then
10339: LD_VAR 0 13
10343: PUSH
10344: LD_INT 1
10346: NEG
10347: EQUAL
10348: IFFALSE 10352
// continue ;
10350: GO 10308
// PrepareHuman ( false , i , skill ) ;
10352: LD_INT 0
10354: PPUSH
10355: LD_VAR 0 8
10359: PPUSH
10360: LD_VAR 0 4
10364: PPUSH
10365: CALL_OW 380
// un := CreateHuman ;
10369: LD_ADDR_VAR 0 14
10373: PUSH
10374: CALL_OW 44
10378: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
10379: LD_VAR 0 14
10383: PPUSH
10384: LD_VAR 0 1
10388: PPUSH
10389: CALL_OW 250
10393: PPUSH
10394: LD_VAR 0 1
10398: PPUSH
10399: CALL_OW 251
10403: PPUSH
10404: LD_INT 10
10406: PPUSH
10407: LD_INT 0
10409: PPUSH
10410: CALL_OW 50
// result := result ^ un ;
10414: LD_ADDR_VAR 0 7
10418: PUSH
10419: LD_VAR 0 7
10423: PUSH
10424: LD_VAR 0 14
10428: ADD
10429: ST_TO_ADDR
// end ;
10430: GO 10308
10432: POP
10433: POP
// end ; end ;
10434: LD_VAR 0 7
10438: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
10439: LD_INT 0
10441: PPUSH
10442: PPUSH
10443: PPUSH
10444: PPUSH
10445: PPUSH
10446: PPUSH
10447: PPUSH
10448: PPUSH
10449: PPUSH
10450: PPUSH
10451: PPUSH
10452: PPUSH
10453: PPUSH
10454: PPUSH
10455: PPUSH
10456: PPUSH
// result := false ;
10457: LD_ADDR_VAR 0 3
10461: PUSH
10462: LD_INT 0
10464: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
10465: LD_VAR 0 1
10469: NOT
10470: PUSH
10471: LD_VAR 0 1
10475: PPUSH
10476: CALL_OW 266
10480: PUSH
10481: LD_INT 32
10483: PUSH
10484: LD_INT 33
10486: PUSH
10487: EMPTY
10488: LIST
10489: LIST
10490: IN
10491: NOT
10492: OR
10493: IFFALSE 10497
// exit ;
10495: GO 11606
// nat := GetNation ( tower ) ;
10497: LD_ADDR_VAR 0 12
10501: PUSH
10502: LD_VAR 0 1
10506: PPUSH
10507: CALL_OW 248
10511: ST_TO_ADDR
// side := GetSide ( tower ) ;
10512: LD_ADDR_VAR 0 16
10516: PUSH
10517: LD_VAR 0 1
10521: PPUSH
10522: CALL_OW 255
10526: ST_TO_ADDR
// x := GetX ( tower ) ;
10527: LD_ADDR_VAR 0 10
10531: PUSH
10532: LD_VAR 0 1
10536: PPUSH
10537: CALL_OW 250
10541: ST_TO_ADDR
// y := GetY ( tower ) ;
10542: LD_ADDR_VAR 0 11
10546: PUSH
10547: LD_VAR 0 1
10551: PPUSH
10552: CALL_OW 251
10556: ST_TO_ADDR
// if not x or not y then
10557: LD_VAR 0 10
10561: NOT
10562: PUSH
10563: LD_VAR 0 11
10567: NOT
10568: OR
10569: IFFALSE 10573
// exit ;
10571: GO 11606
// weapon := 0 ;
10573: LD_ADDR_VAR 0 18
10577: PUSH
10578: LD_INT 0
10580: ST_TO_ADDR
// fac_list := [ ] ;
10581: LD_ADDR_VAR 0 17
10585: PUSH
10586: EMPTY
10587: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
10588: LD_ADDR_VAR 0 6
10592: PUSH
10593: LD_VAR 0 1
10597: PPUSH
10598: CALL_OW 274
10602: PPUSH
10603: LD_VAR 0 2
10607: PPUSH
10608: LD_INT 0
10610: PPUSH
10611: CALL 8177 0 3
10615: PPUSH
10616: LD_INT 30
10618: PUSH
10619: LD_INT 3
10621: PUSH
10622: EMPTY
10623: LIST
10624: LIST
10625: PPUSH
10626: CALL_OW 72
10630: ST_TO_ADDR
// if not factories then
10631: LD_VAR 0 6
10635: NOT
10636: IFFALSE 10640
// exit ;
10638: GO 11606
// for i in factories do
10640: LD_ADDR_VAR 0 8
10644: PUSH
10645: LD_VAR 0 6
10649: PUSH
10650: FOR_IN
10651: IFFALSE 10676
// fac_list := fac_list union AvailableWeaponList ( i ) ;
10653: LD_ADDR_VAR 0 17
10657: PUSH
10658: LD_VAR 0 17
10662: PUSH
10663: LD_VAR 0 8
10667: PPUSH
10668: CALL_OW 478
10672: UNION
10673: ST_TO_ADDR
10674: GO 10650
10676: POP
10677: POP
// if not fac_list then
10678: LD_VAR 0 17
10682: NOT
10683: IFFALSE 10687
// exit ;
10685: GO 11606
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
10687: LD_ADDR_VAR 0 5
10691: PUSH
10692: LD_INT 4
10694: PUSH
10695: LD_INT 5
10697: PUSH
10698: LD_INT 9
10700: PUSH
10701: LD_INT 10
10703: PUSH
10704: LD_INT 6
10706: PUSH
10707: LD_INT 7
10709: PUSH
10710: LD_INT 11
10712: PUSH
10713: EMPTY
10714: LIST
10715: LIST
10716: LIST
10717: LIST
10718: LIST
10719: LIST
10720: LIST
10721: PUSH
10722: LD_INT 27
10724: PUSH
10725: LD_INT 28
10727: PUSH
10728: LD_INT 26
10730: PUSH
10731: LD_INT 30
10733: PUSH
10734: EMPTY
10735: LIST
10736: LIST
10737: LIST
10738: LIST
10739: PUSH
10740: LD_INT 43
10742: PUSH
10743: LD_INT 44
10745: PUSH
10746: LD_INT 46
10748: PUSH
10749: LD_INT 45
10751: PUSH
10752: LD_INT 47
10754: PUSH
10755: LD_INT 49
10757: PUSH
10758: EMPTY
10759: LIST
10760: LIST
10761: LIST
10762: LIST
10763: LIST
10764: LIST
10765: PUSH
10766: EMPTY
10767: LIST
10768: LIST
10769: LIST
10770: PUSH
10771: LD_VAR 0 12
10775: ARRAY
10776: ST_TO_ADDR
// list := list isect fac_list ;
10777: LD_ADDR_VAR 0 5
10781: PUSH
10782: LD_VAR 0 5
10786: PUSH
10787: LD_VAR 0 17
10791: ISECT
10792: ST_TO_ADDR
// if not list then
10793: LD_VAR 0 5
10797: NOT
10798: IFFALSE 10802
// exit ;
10800: GO 11606
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
10802: LD_VAR 0 12
10806: PUSH
10807: LD_INT 3
10809: EQUAL
10810: PUSH
10811: LD_INT 49
10813: PUSH
10814: LD_VAR 0 5
10818: IN
10819: AND
10820: PUSH
10821: LD_INT 31
10823: PPUSH
10824: LD_VAR 0 16
10828: PPUSH
10829: CALL_OW 321
10833: PUSH
10834: LD_INT 2
10836: EQUAL
10837: AND
10838: IFFALSE 10898
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
10840: LD_INT 22
10842: PUSH
10843: LD_VAR 0 16
10847: PUSH
10848: EMPTY
10849: LIST
10850: LIST
10851: PUSH
10852: LD_INT 35
10854: PUSH
10855: LD_INT 49
10857: PUSH
10858: EMPTY
10859: LIST
10860: LIST
10861: PUSH
10862: LD_INT 91
10864: PUSH
10865: LD_VAR 0 1
10869: PUSH
10870: LD_INT 10
10872: PUSH
10873: EMPTY
10874: LIST
10875: LIST
10876: LIST
10877: PUSH
10878: EMPTY
10879: LIST
10880: LIST
10881: LIST
10882: PPUSH
10883: CALL_OW 69
10887: NOT
10888: IFFALSE 10898
// weapon := ru_time_lapser ;
10890: LD_ADDR_VAR 0 18
10894: PUSH
10895: LD_INT 49
10897: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
10898: LD_VAR 0 12
10902: PUSH
10903: LD_INT 1
10905: PUSH
10906: LD_INT 2
10908: PUSH
10909: EMPTY
10910: LIST
10911: LIST
10912: IN
10913: PUSH
10914: LD_INT 11
10916: PUSH
10917: LD_VAR 0 5
10921: IN
10922: PUSH
10923: LD_INT 30
10925: PUSH
10926: LD_VAR 0 5
10930: IN
10931: OR
10932: AND
10933: PUSH
10934: LD_INT 6
10936: PPUSH
10937: LD_VAR 0 16
10941: PPUSH
10942: CALL_OW 321
10946: PUSH
10947: LD_INT 2
10949: EQUAL
10950: AND
10951: IFFALSE 11116
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
10953: LD_INT 22
10955: PUSH
10956: LD_VAR 0 16
10960: PUSH
10961: EMPTY
10962: LIST
10963: LIST
10964: PUSH
10965: LD_INT 2
10967: PUSH
10968: LD_INT 35
10970: PUSH
10971: LD_INT 11
10973: PUSH
10974: EMPTY
10975: LIST
10976: LIST
10977: PUSH
10978: LD_INT 35
10980: PUSH
10981: LD_INT 30
10983: PUSH
10984: EMPTY
10985: LIST
10986: LIST
10987: PUSH
10988: EMPTY
10989: LIST
10990: LIST
10991: LIST
10992: PUSH
10993: LD_INT 91
10995: PUSH
10996: LD_VAR 0 1
11000: PUSH
11001: LD_INT 18
11003: PUSH
11004: EMPTY
11005: LIST
11006: LIST
11007: LIST
11008: PUSH
11009: EMPTY
11010: LIST
11011: LIST
11012: LIST
11013: PPUSH
11014: CALL_OW 69
11018: NOT
11019: PUSH
11020: LD_INT 22
11022: PUSH
11023: LD_VAR 0 16
11027: PUSH
11028: EMPTY
11029: LIST
11030: LIST
11031: PUSH
11032: LD_INT 2
11034: PUSH
11035: LD_INT 30
11037: PUSH
11038: LD_INT 32
11040: PUSH
11041: EMPTY
11042: LIST
11043: LIST
11044: PUSH
11045: LD_INT 30
11047: PUSH
11048: LD_INT 33
11050: PUSH
11051: EMPTY
11052: LIST
11053: LIST
11054: PUSH
11055: EMPTY
11056: LIST
11057: LIST
11058: LIST
11059: PUSH
11060: LD_INT 91
11062: PUSH
11063: LD_VAR 0 1
11067: PUSH
11068: LD_INT 12
11070: PUSH
11071: EMPTY
11072: LIST
11073: LIST
11074: LIST
11075: PUSH
11076: EMPTY
11077: LIST
11078: LIST
11079: LIST
11080: PUSH
11081: EMPTY
11082: LIST
11083: PPUSH
11084: CALL_OW 69
11088: PUSH
11089: LD_INT 2
11091: GREATER
11092: AND
11093: IFFALSE 11116
// weapon := [ us_radar , ar_radar ] [ nat ] ;
11095: LD_ADDR_VAR 0 18
11099: PUSH
11100: LD_INT 11
11102: PUSH
11103: LD_INT 30
11105: PUSH
11106: EMPTY
11107: LIST
11108: LIST
11109: PUSH
11110: LD_VAR 0 12
11114: ARRAY
11115: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
11116: LD_VAR 0 18
11120: NOT
11121: PUSH
11122: LD_INT 40
11124: PPUSH
11125: LD_VAR 0 16
11129: PPUSH
11130: CALL_OW 321
11134: PUSH
11135: LD_INT 2
11137: EQUAL
11138: AND
11139: PUSH
11140: LD_INT 7
11142: PUSH
11143: LD_VAR 0 5
11147: IN
11148: PUSH
11149: LD_INT 28
11151: PUSH
11152: LD_VAR 0 5
11156: IN
11157: OR
11158: PUSH
11159: LD_INT 45
11161: PUSH
11162: LD_VAR 0 5
11166: IN
11167: OR
11168: AND
11169: IFFALSE 11423
// begin hex := GetHexInfo ( x , y ) ;
11171: LD_ADDR_VAR 0 4
11175: PUSH
11176: LD_VAR 0 10
11180: PPUSH
11181: LD_VAR 0 11
11185: PPUSH
11186: CALL_OW 546
11190: ST_TO_ADDR
// if hex [ 1 ] then
11191: LD_VAR 0 4
11195: PUSH
11196: LD_INT 1
11198: ARRAY
11199: IFFALSE 11203
// exit ;
11201: GO 11606
// height := hex [ 2 ] ;
11203: LD_ADDR_VAR 0 15
11207: PUSH
11208: LD_VAR 0 4
11212: PUSH
11213: LD_INT 2
11215: ARRAY
11216: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
11217: LD_ADDR_VAR 0 14
11221: PUSH
11222: LD_INT 0
11224: PUSH
11225: LD_INT 2
11227: PUSH
11228: LD_INT 3
11230: PUSH
11231: LD_INT 5
11233: PUSH
11234: EMPTY
11235: LIST
11236: LIST
11237: LIST
11238: LIST
11239: ST_TO_ADDR
// for i in tmp do
11240: LD_ADDR_VAR 0 8
11244: PUSH
11245: LD_VAR 0 14
11249: PUSH
11250: FOR_IN
11251: IFFALSE 11421
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
11253: LD_ADDR_VAR 0 9
11257: PUSH
11258: LD_VAR 0 10
11262: PPUSH
11263: LD_VAR 0 8
11267: PPUSH
11268: LD_INT 5
11270: PPUSH
11271: CALL_OW 272
11275: PUSH
11276: LD_VAR 0 11
11280: PPUSH
11281: LD_VAR 0 8
11285: PPUSH
11286: LD_INT 5
11288: PPUSH
11289: CALL_OW 273
11293: PUSH
11294: EMPTY
11295: LIST
11296: LIST
11297: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
11298: LD_VAR 0 9
11302: PUSH
11303: LD_INT 1
11305: ARRAY
11306: PPUSH
11307: LD_VAR 0 9
11311: PUSH
11312: LD_INT 2
11314: ARRAY
11315: PPUSH
11316: CALL_OW 488
11320: IFFALSE 11419
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
11322: LD_ADDR_VAR 0 4
11326: PUSH
11327: LD_VAR 0 9
11331: PUSH
11332: LD_INT 1
11334: ARRAY
11335: PPUSH
11336: LD_VAR 0 9
11340: PUSH
11341: LD_INT 2
11343: ARRAY
11344: PPUSH
11345: CALL_OW 546
11349: ST_TO_ADDR
// if hex [ 1 ] then
11350: LD_VAR 0 4
11354: PUSH
11355: LD_INT 1
11357: ARRAY
11358: IFFALSE 11362
// continue ;
11360: GO 11250
// h := hex [ 2 ] ;
11362: LD_ADDR_VAR 0 13
11366: PUSH
11367: LD_VAR 0 4
11371: PUSH
11372: LD_INT 2
11374: ARRAY
11375: ST_TO_ADDR
// if h + 7 < height then
11376: LD_VAR 0 13
11380: PUSH
11381: LD_INT 7
11383: PLUS
11384: PUSH
11385: LD_VAR 0 15
11389: LESS
11390: IFFALSE 11419
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
11392: LD_ADDR_VAR 0 18
11396: PUSH
11397: LD_INT 7
11399: PUSH
11400: LD_INT 28
11402: PUSH
11403: LD_INT 45
11405: PUSH
11406: EMPTY
11407: LIST
11408: LIST
11409: LIST
11410: PUSH
11411: LD_VAR 0 12
11415: ARRAY
11416: ST_TO_ADDR
// break ;
11417: GO 11421
// end ; end ; end ;
11419: GO 11250
11421: POP
11422: POP
// end ; if not weapon then
11423: LD_VAR 0 18
11427: NOT
11428: IFFALSE 11488
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
11430: LD_ADDR_VAR 0 5
11434: PUSH
11435: LD_VAR 0 5
11439: PUSH
11440: LD_INT 11
11442: PUSH
11443: LD_INT 30
11445: PUSH
11446: LD_INT 49
11448: PUSH
11449: EMPTY
11450: LIST
11451: LIST
11452: LIST
11453: DIFF
11454: ST_TO_ADDR
// if not list then
11455: LD_VAR 0 5
11459: NOT
11460: IFFALSE 11464
// exit ;
11462: GO 11606
// weapon := list [ rand ( 1 , list ) ] ;
11464: LD_ADDR_VAR 0 18
11468: PUSH
11469: LD_VAR 0 5
11473: PUSH
11474: LD_INT 1
11476: PPUSH
11477: LD_VAR 0 5
11481: PPUSH
11482: CALL_OW 12
11486: ARRAY
11487: ST_TO_ADDR
// end ; if weapon then
11488: LD_VAR 0 18
11492: IFFALSE 11606
// begin tmp := CostOfWeapon ( weapon ) ;
11494: LD_ADDR_VAR 0 14
11498: PUSH
11499: LD_VAR 0 18
11503: PPUSH
11504: CALL_OW 451
11508: ST_TO_ADDR
// j := GetBase ( tower ) ;
11509: LD_ADDR_VAR 0 9
11513: PUSH
11514: LD_VAR 0 1
11518: PPUSH
11519: CALL_OW 274
11523: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
11524: LD_VAR 0 9
11528: PPUSH
11529: LD_INT 1
11531: PPUSH
11532: CALL_OW 275
11536: PUSH
11537: LD_VAR 0 14
11541: PUSH
11542: LD_INT 1
11544: ARRAY
11545: GREATEREQUAL
11546: PUSH
11547: LD_VAR 0 9
11551: PPUSH
11552: LD_INT 2
11554: PPUSH
11555: CALL_OW 275
11559: PUSH
11560: LD_VAR 0 14
11564: PUSH
11565: LD_INT 2
11567: ARRAY
11568: GREATEREQUAL
11569: AND
11570: PUSH
11571: LD_VAR 0 9
11575: PPUSH
11576: LD_INT 3
11578: PPUSH
11579: CALL_OW 275
11583: PUSH
11584: LD_VAR 0 14
11588: PUSH
11589: LD_INT 3
11591: ARRAY
11592: GREATEREQUAL
11593: AND
11594: IFFALSE 11606
// result := weapon ;
11596: LD_ADDR_VAR 0 3
11600: PUSH
11601: LD_VAR 0 18
11605: ST_TO_ADDR
// end ; end ;
11606: LD_VAR 0 3
11610: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
11611: LD_INT 0
11613: PPUSH
11614: PPUSH
// result := true ;
11615: LD_ADDR_VAR 0 3
11619: PUSH
11620: LD_INT 1
11622: ST_TO_ADDR
// if array1 = array2 then
11623: LD_VAR 0 1
11627: PUSH
11628: LD_VAR 0 2
11632: EQUAL
11633: IFFALSE 11693
// begin for i = 1 to array1 do
11635: LD_ADDR_VAR 0 4
11639: PUSH
11640: DOUBLE
11641: LD_INT 1
11643: DEC
11644: ST_TO_ADDR
11645: LD_VAR 0 1
11649: PUSH
11650: FOR_TO
11651: IFFALSE 11689
// if array1 [ i ] <> array2 [ i ] then
11653: LD_VAR 0 1
11657: PUSH
11658: LD_VAR 0 4
11662: ARRAY
11663: PUSH
11664: LD_VAR 0 2
11668: PUSH
11669: LD_VAR 0 4
11673: ARRAY
11674: NONEQUAL
11675: IFFALSE 11687
// begin result := false ;
11677: LD_ADDR_VAR 0 3
11681: PUSH
11682: LD_INT 0
11684: ST_TO_ADDR
// break ;
11685: GO 11689
// end ;
11687: GO 11650
11689: POP
11690: POP
// end else
11691: GO 11701
// result := false ;
11693: LD_ADDR_VAR 0 3
11697: PUSH
11698: LD_INT 0
11700: ST_TO_ADDR
// end ;
11701: LD_VAR 0 3
11705: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
11706: LD_INT 0
11708: PPUSH
11709: PPUSH
// if not array1 or not array2 then
11710: LD_VAR 0 1
11714: NOT
11715: PUSH
11716: LD_VAR 0 2
11720: NOT
11721: OR
11722: IFFALSE 11726
// exit ;
11724: GO 11790
// result := true ;
11726: LD_ADDR_VAR 0 3
11730: PUSH
11731: LD_INT 1
11733: ST_TO_ADDR
// for i = 1 to array1 do
11734: LD_ADDR_VAR 0 4
11738: PUSH
11739: DOUBLE
11740: LD_INT 1
11742: DEC
11743: ST_TO_ADDR
11744: LD_VAR 0 1
11748: PUSH
11749: FOR_TO
11750: IFFALSE 11788
// if array1 [ i ] <> array2 [ i ] then
11752: LD_VAR 0 1
11756: PUSH
11757: LD_VAR 0 4
11761: ARRAY
11762: PUSH
11763: LD_VAR 0 2
11767: PUSH
11768: LD_VAR 0 4
11772: ARRAY
11773: NONEQUAL
11774: IFFALSE 11786
// begin result := false ;
11776: LD_ADDR_VAR 0 3
11780: PUSH
11781: LD_INT 0
11783: ST_TO_ADDR
// break ;
11784: GO 11788
// end ;
11786: GO 11749
11788: POP
11789: POP
// end ;
11790: LD_VAR 0 3
11794: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
11795: LD_INT 0
11797: PPUSH
11798: PPUSH
11799: PPUSH
// pom := GetBase ( fac ) ;
11800: LD_ADDR_VAR 0 5
11804: PUSH
11805: LD_VAR 0 1
11809: PPUSH
11810: CALL_OW 274
11814: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
11815: LD_ADDR_VAR 0 4
11819: PUSH
11820: LD_VAR 0 2
11824: PUSH
11825: LD_INT 1
11827: ARRAY
11828: PPUSH
11829: LD_VAR 0 2
11833: PUSH
11834: LD_INT 2
11836: ARRAY
11837: PPUSH
11838: LD_VAR 0 2
11842: PUSH
11843: LD_INT 3
11845: ARRAY
11846: PPUSH
11847: LD_VAR 0 2
11851: PUSH
11852: LD_INT 4
11854: ARRAY
11855: PPUSH
11856: CALL_OW 449
11860: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
11861: LD_ADDR_VAR 0 3
11865: PUSH
11866: LD_VAR 0 5
11870: PPUSH
11871: LD_INT 1
11873: PPUSH
11874: CALL_OW 275
11878: PUSH
11879: LD_VAR 0 4
11883: PUSH
11884: LD_INT 1
11886: ARRAY
11887: GREATEREQUAL
11888: PUSH
11889: LD_VAR 0 5
11893: PPUSH
11894: LD_INT 2
11896: PPUSH
11897: CALL_OW 275
11901: PUSH
11902: LD_VAR 0 4
11906: PUSH
11907: LD_INT 2
11909: ARRAY
11910: GREATEREQUAL
11911: AND
11912: PUSH
11913: LD_VAR 0 5
11917: PPUSH
11918: LD_INT 3
11920: PPUSH
11921: CALL_OW 275
11925: PUSH
11926: LD_VAR 0 4
11930: PUSH
11931: LD_INT 3
11933: ARRAY
11934: GREATEREQUAL
11935: AND
11936: ST_TO_ADDR
// end ;
11937: LD_VAR 0 3
11941: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
11942: LD_INT 0
11944: PPUSH
11945: PPUSH
11946: PPUSH
11947: PPUSH
// pom := GetBase ( building ) ;
11948: LD_ADDR_VAR 0 3
11952: PUSH
11953: LD_VAR 0 1
11957: PPUSH
11958: CALL_OW 274
11962: ST_TO_ADDR
// if not pom then
11963: LD_VAR 0 3
11967: NOT
11968: IFFALSE 11972
// exit ;
11970: GO 12142
// btype := GetBType ( building ) ;
11972: LD_ADDR_VAR 0 5
11976: PUSH
11977: LD_VAR 0 1
11981: PPUSH
11982: CALL_OW 266
11986: ST_TO_ADDR
// if btype = b_armoury then
11987: LD_VAR 0 5
11991: PUSH
11992: LD_INT 4
11994: EQUAL
11995: IFFALSE 12005
// btype := b_barracks ;
11997: LD_ADDR_VAR 0 5
12001: PUSH
12002: LD_INT 5
12004: ST_TO_ADDR
// if btype = b_depot then
12005: LD_VAR 0 5
12009: PUSH
12010: LD_INT 0
12012: EQUAL
12013: IFFALSE 12023
// btype := b_warehouse ;
12015: LD_ADDR_VAR 0 5
12019: PUSH
12020: LD_INT 1
12022: ST_TO_ADDR
// if btype = b_workshop then
12023: LD_VAR 0 5
12027: PUSH
12028: LD_INT 2
12030: EQUAL
12031: IFFALSE 12041
// btype := b_factory ;
12033: LD_ADDR_VAR 0 5
12037: PUSH
12038: LD_INT 3
12040: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
12041: LD_ADDR_VAR 0 4
12045: PUSH
12046: LD_VAR 0 5
12050: PPUSH
12051: LD_VAR 0 1
12055: PPUSH
12056: CALL_OW 248
12060: PPUSH
12061: CALL_OW 450
12065: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
12066: LD_ADDR_VAR 0 2
12070: PUSH
12071: LD_VAR 0 3
12075: PPUSH
12076: LD_INT 1
12078: PPUSH
12079: CALL_OW 275
12083: PUSH
12084: LD_VAR 0 4
12088: PUSH
12089: LD_INT 1
12091: ARRAY
12092: GREATEREQUAL
12093: PUSH
12094: LD_VAR 0 3
12098: PPUSH
12099: LD_INT 2
12101: PPUSH
12102: CALL_OW 275
12106: PUSH
12107: LD_VAR 0 4
12111: PUSH
12112: LD_INT 2
12114: ARRAY
12115: GREATEREQUAL
12116: AND
12117: PUSH
12118: LD_VAR 0 3
12122: PPUSH
12123: LD_INT 3
12125: PPUSH
12126: CALL_OW 275
12130: PUSH
12131: LD_VAR 0 4
12135: PUSH
12136: LD_INT 3
12138: ARRAY
12139: GREATEREQUAL
12140: AND
12141: ST_TO_ADDR
// end ;
12142: LD_VAR 0 2
12146: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
12147: LD_INT 0
12149: PPUSH
12150: PPUSH
12151: PPUSH
// pom := GetBase ( building ) ;
12152: LD_ADDR_VAR 0 4
12156: PUSH
12157: LD_VAR 0 1
12161: PPUSH
12162: CALL_OW 274
12166: ST_TO_ADDR
// if not pom then
12167: LD_VAR 0 4
12171: NOT
12172: IFFALSE 12176
// exit ;
12174: GO 12277
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
12176: LD_ADDR_VAR 0 5
12180: PUSH
12181: LD_VAR 0 2
12185: PPUSH
12186: LD_VAR 0 1
12190: PPUSH
12191: CALL_OW 248
12195: PPUSH
12196: CALL_OW 450
12200: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
12201: LD_ADDR_VAR 0 3
12205: PUSH
12206: LD_VAR 0 4
12210: PPUSH
12211: LD_INT 1
12213: PPUSH
12214: CALL_OW 275
12218: PUSH
12219: LD_VAR 0 5
12223: PUSH
12224: LD_INT 1
12226: ARRAY
12227: GREATEREQUAL
12228: PUSH
12229: LD_VAR 0 4
12233: PPUSH
12234: LD_INT 2
12236: PPUSH
12237: CALL_OW 275
12241: PUSH
12242: LD_VAR 0 5
12246: PUSH
12247: LD_INT 2
12249: ARRAY
12250: GREATEREQUAL
12251: AND
12252: PUSH
12253: LD_VAR 0 4
12257: PPUSH
12258: LD_INT 3
12260: PPUSH
12261: CALL_OW 275
12265: PUSH
12266: LD_VAR 0 5
12270: PUSH
12271: LD_INT 3
12273: ARRAY
12274: GREATEREQUAL
12275: AND
12276: ST_TO_ADDR
// end ;
12277: LD_VAR 0 3
12281: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
12282: LD_INT 0
12284: PPUSH
12285: PPUSH
12286: PPUSH
12287: PPUSH
12288: PPUSH
12289: PPUSH
12290: PPUSH
12291: PPUSH
12292: PPUSH
12293: PPUSH
12294: PPUSH
// result := false ;
12295: LD_ADDR_VAR 0 8
12299: PUSH
12300: LD_INT 0
12302: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
12303: LD_VAR 0 5
12307: NOT
12308: PUSH
12309: LD_VAR 0 1
12313: NOT
12314: OR
12315: PUSH
12316: LD_VAR 0 2
12320: NOT
12321: OR
12322: PUSH
12323: LD_VAR 0 3
12327: NOT
12328: OR
12329: IFFALSE 12333
// exit ;
12331: GO 13147
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
12333: LD_ADDR_VAR 0 14
12337: PUSH
12338: LD_VAR 0 1
12342: PPUSH
12343: LD_VAR 0 2
12347: PPUSH
12348: LD_VAR 0 3
12352: PPUSH
12353: LD_VAR 0 4
12357: PPUSH
12358: LD_VAR 0 5
12362: PUSH
12363: LD_INT 1
12365: ARRAY
12366: PPUSH
12367: CALL_OW 248
12371: PPUSH
12372: LD_INT 0
12374: PPUSH
12375: CALL 14400 0 6
12379: ST_TO_ADDR
// if not hexes then
12380: LD_VAR 0 14
12384: NOT
12385: IFFALSE 12389
// exit ;
12387: GO 13147
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
12389: LD_ADDR_VAR 0 17
12393: PUSH
12394: LD_VAR 0 5
12398: PPUSH
12399: LD_INT 22
12401: PUSH
12402: LD_VAR 0 13
12406: PPUSH
12407: CALL_OW 255
12411: PUSH
12412: EMPTY
12413: LIST
12414: LIST
12415: PUSH
12416: LD_INT 2
12418: PUSH
12419: LD_INT 30
12421: PUSH
12422: LD_INT 0
12424: PUSH
12425: EMPTY
12426: LIST
12427: LIST
12428: PUSH
12429: LD_INT 30
12431: PUSH
12432: LD_INT 1
12434: PUSH
12435: EMPTY
12436: LIST
12437: LIST
12438: PUSH
12439: EMPTY
12440: LIST
12441: LIST
12442: LIST
12443: PUSH
12444: EMPTY
12445: LIST
12446: LIST
12447: PPUSH
12448: CALL_OW 72
12452: ST_TO_ADDR
// for i = 1 to hexes do
12453: LD_ADDR_VAR 0 9
12457: PUSH
12458: DOUBLE
12459: LD_INT 1
12461: DEC
12462: ST_TO_ADDR
12463: LD_VAR 0 14
12467: PUSH
12468: FOR_TO
12469: IFFALSE 13145
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
12471: LD_ADDR_VAR 0 13
12475: PUSH
12476: LD_VAR 0 14
12480: PUSH
12481: LD_VAR 0 9
12485: ARRAY
12486: PUSH
12487: LD_INT 1
12489: ARRAY
12490: PPUSH
12491: LD_VAR 0 14
12495: PUSH
12496: LD_VAR 0 9
12500: ARRAY
12501: PUSH
12502: LD_INT 2
12504: ARRAY
12505: PPUSH
12506: CALL_OW 428
12510: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
12511: LD_VAR 0 14
12515: PUSH
12516: LD_VAR 0 9
12520: ARRAY
12521: PUSH
12522: LD_INT 1
12524: ARRAY
12525: PPUSH
12526: LD_VAR 0 14
12530: PUSH
12531: LD_VAR 0 9
12535: ARRAY
12536: PUSH
12537: LD_INT 2
12539: ARRAY
12540: PPUSH
12541: CALL_OW 351
12545: PUSH
12546: LD_VAR 0 14
12550: PUSH
12551: LD_VAR 0 9
12555: ARRAY
12556: PUSH
12557: LD_INT 1
12559: ARRAY
12560: PPUSH
12561: LD_VAR 0 14
12565: PUSH
12566: LD_VAR 0 9
12570: ARRAY
12571: PUSH
12572: LD_INT 2
12574: ARRAY
12575: PPUSH
12576: CALL_OW 488
12580: NOT
12581: OR
12582: PUSH
12583: LD_VAR 0 13
12587: PPUSH
12588: CALL_OW 247
12592: PUSH
12593: LD_INT 3
12595: EQUAL
12596: OR
12597: IFFALSE 12603
// exit ;
12599: POP
12600: POP
12601: GO 13147
// if not tmp then
12603: LD_VAR 0 13
12607: NOT
12608: IFFALSE 12612
// continue ;
12610: GO 12468
// result := true ;
12612: LD_ADDR_VAR 0 8
12616: PUSH
12617: LD_INT 1
12619: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
12620: LD_VAR 0 6
12624: PUSH
12625: LD_VAR 0 13
12629: PPUSH
12630: CALL_OW 247
12634: PUSH
12635: LD_INT 2
12637: EQUAL
12638: AND
12639: PUSH
12640: LD_VAR 0 13
12644: PPUSH
12645: CALL_OW 263
12649: PUSH
12650: LD_INT 1
12652: EQUAL
12653: AND
12654: IFFALSE 12818
// begin if IsDrivenBy ( tmp ) then
12656: LD_VAR 0 13
12660: PPUSH
12661: CALL_OW 311
12665: IFFALSE 12669
// continue ;
12667: GO 12468
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
12669: LD_VAR 0 6
12673: PPUSH
12674: LD_INT 3
12676: PUSH
12677: LD_INT 60
12679: PUSH
12680: EMPTY
12681: LIST
12682: PUSH
12683: EMPTY
12684: LIST
12685: LIST
12686: PUSH
12687: LD_INT 3
12689: PUSH
12690: LD_INT 55
12692: PUSH
12693: EMPTY
12694: LIST
12695: PUSH
12696: EMPTY
12697: LIST
12698: LIST
12699: PUSH
12700: EMPTY
12701: LIST
12702: LIST
12703: PPUSH
12704: CALL_OW 72
12708: IFFALSE 12816
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
12710: LD_ADDR_VAR 0 18
12714: PUSH
12715: LD_VAR 0 6
12719: PPUSH
12720: LD_INT 3
12722: PUSH
12723: LD_INT 60
12725: PUSH
12726: EMPTY
12727: LIST
12728: PUSH
12729: EMPTY
12730: LIST
12731: LIST
12732: PUSH
12733: LD_INT 3
12735: PUSH
12736: LD_INT 55
12738: PUSH
12739: EMPTY
12740: LIST
12741: PUSH
12742: EMPTY
12743: LIST
12744: LIST
12745: PUSH
12746: EMPTY
12747: LIST
12748: LIST
12749: PPUSH
12750: CALL_OW 72
12754: PUSH
12755: LD_INT 1
12757: ARRAY
12758: ST_TO_ADDR
// if IsInUnit ( driver ) then
12759: LD_VAR 0 18
12763: PPUSH
12764: CALL_OW 310
12768: IFFALSE 12779
// ComExit ( driver ) ;
12770: LD_VAR 0 18
12774: PPUSH
12775: CALL 38179 0 1
// AddComEnterUnit ( driver , tmp ) ;
12779: LD_VAR 0 18
12783: PPUSH
12784: LD_VAR 0 13
12788: PPUSH
12789: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
12793: LD_VAR 0 18
12797: PPUSH
12798: LD_VAR 0 7
12802: PPUSH
12803: CALL_OW 173
// AddComExitVehicle ( driver ) ;
12807: LD_VAR 0 18
12811: PPUSH
12812: CALL_OW 181
// end ; continue ;
12816: GO 12468
// end ; if not cleaners or not tmp in cleaners then
12818: LD_VAR 0 6
12822: NOT
12823: PUSH
12824: LD_VAR 0 13
12828: PUSH
12829: LD_VAR 0 6
12833: IN
12834: NOT
12835: OR
12836: IFFALSE 13143
// begin if dep then
12838: LD_VAR 0 17
12842: IFFALSE 12978
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
12844: LD_ADDR_VAR 0 16
12848: PUSH
12849: LD_VAR 0 17
12853: PUSH
12854: LD_INT 1
12856: ARRAY
12857: PPUSH
12858: CALL_OW 250
12862: PPUSH
12863: LD_VAR 0 17
12867: PUSH
12868: LD_INT 1
12870: ARRAY
12871: PPUSH
12872: CALL_OW 254
12876: PPUSH
12877: LD_INT 5
12879: PPUSH
12880: CALL_OW 272
12884: PUSH
12885: LD_VAR 0 17
12889: PUSH
12890: LD_INT 1
12892: ARRAY
12893: PPUSH
12894: CALL_OW 251
12898: PPUSH
12899: LD_VAR 0 17
12903: PUSH
12904: LD_INT 1
12906: ARRAY
12907: PPUSH
12908: CALL_OW 254
12912: PPUSH
12913: LD_INT 5
12915: PPUSH
12916: CALL_OW 273
12920: PUSH
12921: EMPTY
12922: LIST
12923: LIST
12924: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
12925: LD_VAR 0 16
12929: PUSH
12930: LD_INT 1
12932: ARRAY
12933: PPUSH
12934: LD_VAR 0 16
12938: PUSH
12939: LD_INT 2
12941: ARRAY
12942: PPUSH
12943: CALL_OW 488
12947: IFFALSE 12978
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
12949: LD_VAR 0 13
12953: PPUSH
12954: LD_VAR 0 16
12958: PUSH
12959: LD_INT 1
12961: ARRAY
12962: PPUSH
12963: LD_VAR 0 16
12967: PUSH
12968: LD_INT 2
12970: ARRAY
12971: PPUSH
12972: CALL_OW 111
// continue ;
12976: GO 12468
// end ; end ; r := GetDir ( tmp ) ;
12978: LD_ADDR_VAR 0 15
12982: PUSH
12983: LD_VAR 0 13
12987: PPUSH
12988: CALL_OW 254
12992: ST_TO_ADDR
// if r = 5 then
12993: LD_VAR 0 15
12997: PUSH
12998: LD_INT 5
13000: EQUAL
13001: IFFALSE 13011
// r := 0 ;
13003: LD_ADDR_VAR 0 15
13007: PUSH
13008: LD_INT 0
13010: ST_TO_ADDR
// for j = r to 5 do
13011: LD_ADDR_VAR 0 10
13015: PUSH
13016: DOUBLE
13017: LD_VAR 0 15
13021: DEC
13022: ST_TO_ADDR
13023: LD_INT 5
13025: PUSH
13026: FOR_TO
13027: IFFALSE 13141
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
13029: LD_ADDR_VAR 0 11
13033: PUSH
13034: LD_VAR 0 13
13038: PPUSH
13039: CALL_OW 250
13043: PPUSH
13044: LD_VAR 0 10
13048: PPUSH
13049: LD_INT 2
13051: PPUSH
13052: CALL_OW 272
13056: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
13057: LD_ADDR_VAR 0 12
13061: PUSH
13062: LD_VAR 0 13
13066: PPUSH
13067: CALL_OW 251
13071: PPUSH
13072: LD_VAR 0 10
13076: PPUSH
13077: LD_INT 2
13079: PPUSH
13080: CALL_OW 273
13084: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
13085: LD_VAR 0 11
13089: PPUSH
13090: LD_VAR 0 12
13094: PPUSH
13095: CALL_OW 488
13099: PUSH
13100: LD_VAR 0 11
13104: PPUSH
13105: LD_VAR 0 12
13109: PPUSH
13110: CALL_OW 428
13114: NOT
13115: AND
13116: IFFALSE 13139
// begin ComMoveXY ( tmp , _x , _y ) ;
13118: LD_VAR 0 13
13122: PPUSH
13123: LD_VAR 0 11
13127: PPUSH
13128: LD_VAR 0 12
13132: PPUSH
13133: CALL_OW 111
// break ;
13137: GO 13141
// end ; end ;
13139: GO 13026
13141: POP
13142: POP
// end ; end ;
13143: GO 12468
13145: POP
13146: POP
// end ;
13147: LD_VAR 0 8
13151: RET
// export function BuildingTechInvented ( side , btype ) ; begin
13152: LD_INT 0
13154: PPUSH
// result := true ;
13155: LD_ADDR_VAR 0 3
13159: PUSH
13160: LD_INT 1
13162: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
13163: LD_VAR 0 2
13167: PUSH
13168: LD_INT 24
13170: DOUBLE
13171: EQUAL
13172: IFTRUE 13182
13174: LD_INT 33
13176: DOUBLE
13177: EQUAL
13178: IFTRUE 13182
13180: GO 13207
13182: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
13183: LD_ADDR_VAR 0 3
13187: PUSH
13188: LD_INT 32
13190: PPUSH
13191: LD_VAR 0 1
13195: PPUSH
13196: CALL_OW 321
13200: PUSH
13201: LD_INT 2
13203: EQUAL
13204: ST_TO_ADDR
13205: GO 13523
13207: LD_INT 20
13209: DOUBLE
13210: EQUAL
13211: IFTRUE 13215
13213: GO 13240
13215: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
13216: LD_ADDR_VAR 0 3
13220: PUSH
13221: LD_INT 6
13223: PPUSH
13224: LD_VAR 0 1
13228: PPUSH
13229: CALL_OW 321
13233: PUSH
13234: LD_INT 2
13236: EQUAL
13237: ST_TO_ADDR
13238: GO 13523
13240: LD_INT 22
13242: DOUBLE
13243: EQUAL
13244: IFTRUE 13254
13246: LD_INT 36
13248: DOUBLE
13249: EQUAL
13250: IFTRUE 13254
13252: GO 13279
13254: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
13255: LD_ADDR_VAR 0 3
13259: PUSH
13260: LD_INT 15
13262: PPUSH
13263: LD_VAR 0 1
13267: PPUSH
13268: CALL_OW 321
13272: PUSH
13273: LD_INT 2
13275: EQUAL
13276: ST_TO_ADDR
13277: GO 13523
13279: LD_INT 30
13281: DOUBLE
13282: EQUAL
13283: IFTRUE 13287
13285: GO 13312
13287: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
13288: LD_ADDR_VAR 0 3
13292: PUSH
13293: LD_INT 20
13295: PPUSH
13296: LD_VAR 0 1
13300: PPUSH
13301: CALL_OW 321
13305: PUSH
13306: LD_INT 2
13308: EQUAL
13309: ST_TO_ADDR
13310: GO 13523
13312: LD_INT 28
13314: DOUBLE
13315: EQUAL
13316: IFTRUE 13326
13318: LD_INT 21
13320: DOUBLE
13321: EQUAL
13322: IFTRUE 13326
13324: GO 13351
13326: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
13327: LD_ADDR_VAR 0 3
13331: PUSH
13332: LD_INT 21
13334: PPUSH
13335: LD_VAR 0 1
13339: PPUSH
13340: CALL_OW 321
13344: PUSH
13345: LD_INT 2
13347: EQUAL
13348: ST_TO_ADDR
13349: GO 13523
13351: LD_INT 16
13353: DOUBLE
13354: EQUAL
13355: IFTRUE 13359
13357: GO 13384
13359: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
13360: LD_ADDR_VAR 0 3
13364: PUSH
13365: LD_INT 84
13367: PPUSH
13368: LD_VAR 0 1
13372: PPUSH
13373: CALL_OW 321
13377: PUSH
13378: LD_INT 2
13380: EQUAL
13381: ST_TO_ADDR
13382: GO 13523
13384: LD_INT 19
13386: DOUBLE
13387: EQUAL
13388: IFTRUE 13398
13390: LD_INT 23
13392: DOUBLE
13393: EQUAL
13394: IFTRUE 13398
13396: GO 13423
13398: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
13399: LD_ADDR_VAR 0 3
13403: PUSH
13404: LD_INT 83
13406: PPUSH
13407: LD_VAR 0 1
13411: PPUSH
13412: CALL_OW 321
13416: PUSH
13417: LD_INT 2
13419: EQUAL
13420: ST_TO_ADDR
13421: GO 13523
13423: LD_INT 17
13425: DOUBLE
13426: EQUAL
13427: IFTRUE 13431
13429: GO 13456
13431: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
13432: LD_ADDR_VAR 0 3
13436: PUSH
13437: LD_INT 39
13439: PPUSH
13440: LD_VAR 0 1
13444: PPUSH
13445: CALL_OW 321
13449: PUSH
13450: LD_INT 2
13452: EQUAL
13453: ST_TO_ADDR
13454: GO 13523
13456: LD_INT 18
13458: DOUBLE
13459: EQUAL
13460: IFTRUE 13464
13462: GO 13489
13464: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
13465: LD_ADDR_VAR 0 3
13469: PUSH
13470: LD_INT 40
13472: PPUSH
13473: LD_VAR 0 1
13477: PPUSH
13478: CALL_OW 321
13482: PUSH
13483: LD_INT 2
13485: EQUAL
13486: ST_TO_ADDR
13487: GO 13523
13489: LD_INT 27
13491: DOUBLE
13492: EQUAL
13493: IFTRUE 13497
13495: GO 13522
13497: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
13498: LD_ADDR_VAR 0 3
13502: PUSH
13503: LD_INT 35
13505: PPUSH
13506: LD_VAR 0 1
13510: PPUSH
13511: CALL_OW 321
13515: PUSH
13516: LD_INT 2
13518: EQUAL
13519: ST_TO_ADDR
13520: GO 13523
13522: POP
// end ;
13523: LD_VAR 0 3
13527: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
13528: LD_INT 0
13530: PPUSH
13531: PPUSH
13532: PPUSH
13533: PPUSH
13534: PPUSH
13535: PPUSH
13536: PPUSH
13537: PPUSH
13538: PPUSH
13539: PPUSH
13540: PPUSH
// result := false ;
13541: LD_ADDR_VAR 0 6
13545: PUSH
13546: LD_INT 0
13548: ST_TO_ADDR
// if btype = b_depot then
13549: LD_VAR 0 2
13553: PUSH
13554: LD_INT 0
13556: EQUAL
13557: IFFALSE 13569
// begin result := true ;
13559: LD_ADDR_VAR 0 6
13563: PUSH
13564: LD_INT 1
13566: ST_TO_ADDR
// exit ;
13567: GO 14395
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
13569: LD_VAR 0 1
13573: NOT
13574: PUSH
13575: LD_VAR 0 1
13579: PPUSH
13580: CALL_OW 266
13584: PUSH
13585: LD_INT 0
13587: PUSH
13588: LD_INT 1
13590: PUSH
13591: EMPTY
13592: LIST
13593: LIST
13594: IN
13595: NOT
13596: OR
13597: PUSH
13598: LD_VAR 0 2
13602: NOT
13603: OR
13604: PUSH
13605: LD_VAR 0 5
13609: PUSH
13610: LD_INT 0
13612: PUSH
13613: LD_INT 1
13615: PUSH
13616: LD_INT 2
13618: PUSH
13619: LD_INT 3
13621: PUSH
13622: LD_INT 4
13624: PUSH
13625: LD_INT 5
13627: PUSH
13628: EMPTY
13629: LIST
13630: LIST
13631: LIST
13632: LIST
13633: LIST
13634: LIST
13635: IN
13636: NOT
13637: OR
13638: PUSH
13639: LD_VAR 0 3
13643: PPUSH
13644: LD_VAR 0 4
13648: PPUSH
13649: CALL_OW 488
13653: NOT
13654: OR
13655: IFFALSE 13659
// exit ;
13657: GO 14395
// side := GetSide ( depot ) ;
13659: LD_ADDR_VAR 0 9
13663: PUSH
13664: LD_VAR 0 1
13668: PPUSH
13669: CALL_OW 255
13673: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
13674: LD_VAR 0 9
13678: PPUSH
13679: LD_VAR 0 2
13683: PPUSH
13684: CALL 13152 0 2
13688: NOT
13689: IFFALSE 13693
// exit ;
13691: GO 14395
// pom := GetBase ( depot ) ;
13693: LD_ADDR_VAR 0 10
13697: PUSH
13698: LD_VAR 0 1
13702: PPUSH
13703: CALL_OW 274
13707: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
13708: LD_ADDR_VAR 0 11
13712: PUSH
13713: LD_VAR 0 2
13717: PPUSH
13718: LD_VAR 0 1
13722: PPUSH
13723: CALL_OW 248
13727: PPUSH
13728: CALL_OW 450
13732: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
13733: LD_VAR 0 10
13737: PPUSH
13738: LD_INT 1
13740: PPUSH
13741: CALL_OW 275
13745: PUSH
13746: LD_VAR 0 11
13750: PUSH
13751: LD_INT 1
13753: ARRAY
13754: GREATEREQUAL
13755: PUSH
13756: LD_VAR 0 10
13760: PPUSH
13761: LD_INT 2
13763: PPUSH
13764: CALL_OW 275
13768: PUSH
13769: LD_VAR 0 11
13773: PUSH
13774: LD_INT 2
13776: ARRAY
13777: GREATEREQUAL
13778: AND
13779: PUSH
13780: LD_VAR 0 10
13784: PPUSH
13785: LD_INT 3
13787: PPUSH
13788: CALL_OW 275
13792: PUSH
13793: LD_VAR 0 11
13797: PUSH
13798: LD_INT 3
13800: ARRAY
13801: GREATEREQUAL
13802: AND
13803: NOT
13804: IFFALSE 13808
// exit ;
13806: GO 14395
// if GetBType ( depot ) = b_depot then
13808: LD_VAR 0 1
13812: PPUSH
13813: CALL_OW 266
13817: PUSH
13818: LD_INT 0
13820: EQUAL
13821: IFFALSE 13833
// dist := 28 else
13823: LD_ADDR_VAR 0 14
13827: PUSH
13828: LD_INT 28
13830: ST_TO_ADDR
13831: GO 13841
// dist := 36 ;
13833: LD_ADDR_VAR 0 14
13837: PUSH
13838: LD_INT 36
13840: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
13841: LD_VAR 0 1
13845: PPUSH
13846: LD_VAR 0 3
13850: PPUSH
13851: LD_VAR 0 4
13855: PPUSH
13856: CALL_OW 297
13860: PUSH
13861: LD_VAR 0 14
13865: GREATER
13866: IFFALSE 13870
// exit ;
13868: GO 14395
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
13870: LD_ADDR_VAR 0 12
13874: PUSH
13875: LD_VAR 0 2
13879: PPUSH
13880: LD_VAR 0 3
13884: PPUSH
13885: LD_VAR 0 4
13889: PPUSH
13890: LD_VAR 0 5
13894: PPUSH
13895: LD_VAR 0 1
13899: PPUSH
13900: CALL_OW 248
13904: PPUSH
13905: LD_INT 0
13907: PPUSH
13908: CALL 14400 0 6
13912: ST_TO_ADDR
// if not hexes then
13913: LD_VAR 0 12
13917: NOT
13918: IFFALSE 13922
// exit ;
13920: GO 14395
// hex := GetHexInfo ( x , y ) ;
13922: LD_ADDR_VAR 0 15
13926: PUSH
13927: LD_VAR 0 3
13931: PPUSH
13932: LD_VAR 0 4
13936: PPUSH
13937: CALL_OW 546
13941: ST_TO_ADDR
// if hex [ 1 ] then
13942: LD_VAR 0 15
13946: PUSH
13947: LD_INT 1
13949: ARRAY
13950: IFFALSE 13954
// exit ;
13952: GO 14395
// height := hex [ 2 ] ;
13954: LD_ADDR_VAR 0 13
13958: PUSH
13959: LD_VAR 0 15
13963: PUSH
13964: LD_INT 2
13966: ARRAY
13967: ST_TO_ADDR
// for i = 1 to hexes do
13968: LD_ADDR_VAR 0 7
13972: PUSH
13973: DOUBLE
13974: LD_INT 1
13976: DEC
13977: ST_TO_ADDR
13978: LD_VAR 0 12
13982: PUSH
13983: FOR_TO
13984: IFFALSE 14314
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
13986: LD_VAR 0 12
13990: PUSH
13991: LD_VAR 0 7
13995: ARRAY
13996: PUSH
13997: LD_INT 1
13999: ARRAY
14000: PPUSH
14001: LD_VAR 0 12
14005: PUSH
14006: LD_VAR 0 7
14010: ARRAY
14011: PUSH
14012: LD_INT 2
14014: ARRAY
14015: PPUSH
14016: CALL_OW 488
14020: NOT
14021: PUSH
14022: LD_VAR 0 12
14026: PUSH
14027: LD_VAR 0 7
14031: ARRAY
14032: PUSH
14033: LD_INT 1
14035: ARRAY
14036: PPUSH
14037: LD_VAR 0 12
14041: PUSH
14042: LD_VAR 0 7
14046: ARRAY
14047: PUSH
14048: LD_INT 2
14050: ARRAY
14051: PPUSH
14052: CALL_OW 428
14056: PUSH
14057: LD_INT 0
14059: GREATER
14060: OR
14061: PUSH
14062: LD_VAR 0 12
14066: PUSH
14067: LD_VAR 0 7
14071: ARRAY
14072: PUSH
14073: LD_INT 1
14075: ARRAY
14076: PPUSH
14077: LD_VAR 0 12
14081: PUSH
14082: LD_VAR 0 7
14086: ARRAY
14087: PUSH
14088: LD_INT 2
14090: ARRAY
14091: PPUSH
14092: CALL_OW 351
14096: OR
14097: IFFALSE 14103
// exit ;
14099: POP
14100: POP
14101: GO 14395
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
14103: LD_ADDR_VAR 0 8
14107: PUSH
14108: LD_VAR 0 12
14112: PUSH
14113: LD_VAR 0 7
14117: ARRAY
14118: PUSH
14119: LD_INT 1
14121: ARRAY
14122: PPUSH
14123: LD_VAR 0 12
14127: PUSH
14128: LD_VAR 0 7
14132: ARRAY
14133: PUSH
14134: LD_INT 2
14136: ARRAY
14137: PPUSH
14138: CALL_OW 546
14142: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
14143: LD_VAR 0 8
14147: PUSH
14148: LD_INT 1
14150: ARRAY
14151: PUSH
14152: LD_VAR 0 8
14156: PUSH
14157: LD_INT 2
14159: ARRAY
14160: PUSH
14161: LD_VAR 0 13
14165: PUSH
14166: LD_INT 2
14168: PLUS
14169: GREATER
14170: OR
14171: PUSH
14172: LD_VAR 0 8
14176: PUSH
14177: LD_INT 2
14179: ARRAY
14180: PUSH
14181: LD_VAR 0 13
14185: PUSH
14186: LD_INT 2
14188: MINUS
14189: LESS
14190: OR
14191: PUSH
14192: LD_VAR 0 8
14196: PUSH
14197: LD_INT 3
14199: ARRAY
14200: PUSH
14201: LD_INT 0
14203: PUSH
14204: LD_INT 8
14206: PUSH
14207: LD_INT 9
14209: PUSH
14210: LD_INT 10
14212: PUSH
14213: LD_INT 11
14215: PUSH
14216: LD_INT 12
14218: PUSH
14219: LD_INT 13
14221: PUSH
14222: LD_INT 16
14224: PUSH
14225: LD_INT 17
14227: PUSH
14228: LD_INT 18
14230: PUSH
14231: LD_INT 19
14233: PUSH
14234: LD_INT 20
14236: PUSH
14237: LD_INT 21
14239: PUSH
14240: EMPTY
14241: LIST
14242: LIST
14243: LIST
14244: LIST
14245: LIST
14246: LIST
14247: LIST
14248: LIST
14249: LIST
14250: LIST
14251: LIST
14252: LIST
14253: LIST
14254: IN
14255: NOT
14256: OR
14257: PUSH
14258: LD_VAR 0 8
14262: PUSH
14263: LD_INT 5
14265: ARRAY
14266: NOT
14267: OR
14268: PUSH
14269: LD_VAR 0 8
14273: PUSH
14274: LD_INT 6
14276: ARRAY
14277: PUSH
14278: LD_INT 1
14280: PUSH
14281: LD_INT 2
14283: PUSH
14284: LD_INT 7
14286: PUSH
14287: LD_INT 9
14289: PUSH
14290: LD_INT 10
14292: PUSH
14293: LD_INT 11
14295: PUSH
14296: EMPTY
14297: LIST
14298: LIST
14299: LIST
14300: LIST
14301: LIST
14302: LIST
14303: IN
14304: NOT
14305: OR
14306: IFFALSE 14312
// exit ;
14308: POP
14309: POP
14310: GO 14395
// end ;
14312: GO 13983
14314: POP
14315: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
14316: LD_VAR 0 9
14320: PPUSH
14321: LD_VAR 0 3
14325: PPUSH
14326: LD_VAR 0 4
14330: PPUSH
14331: LD_INT 20
14333: PPUSH
14334: CALL 6318 0 4
14338: PUSH
14339: LD_INT 4
14341: ARRAY
14342: IFFALSE 14346
// exit ;
14344: GO 14395
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
14346: LD_VAR 0 2
14350: PUSH
14351: LD_INT 29
14353: PUSH
14354: LD_INT 30
14356: PUSH
14357: EMPTY
14358: LIST
14359: LIST
14360: IN
14361: PUSH
14362: LD_VAR 0 3
14366: PPUSH
14367: LD_VAR 0 4
14371: PPUSH
14372: LD_VAR 0 9
14376: PPUSH
14377: CALL_OW 440
14381: NOT
14382: AND
14383: IFFALSE 14387
// exit ;
14385: GO 14395
// result := true ;
14387: LD_ADDR_VAR 0 6
14391: PUSH
14392: LD_INT 1
14394: ST_TO_ADDR
// end ;
14395: LD_VAR 0 6
14399: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
14400: LD_INT 0
14402: PPUSH
14403: PPUSH
14404: PPUSH
14405: PPUSH
14406: PPUSH
14407: PPUSH
14408: PPUSH
14409: PPUSH
14410: PPUSH
14411: PPUSH
14412: PPUSH
14413: PPUSH
14414: PPUSH
14415: PPUSH
14416: PPUSH
14417: PPUSH
14418: PPUSH
14419: PPUSH
14420: PPUSH
14421: PPUSH
14422: PPUSH
14423: PPUSH
14424: PPUSH
14425: PPUSH
14426: PPUSH
14427: PPUSH
14428: PPUSH
14429: PPUSH
14430: PPUSH
14431: PPUSH
14432: PPUSH
14433: PPUSH
14434: PPUSH
14435: PPUSH
14436: PPUSH
14437: PPUSH
14438: PPUSH
14439: PPUSH
14440: PPUSH
14441: PPUSH
14442: PPUSH
14443: PPUSH
14444: PPUSH
14445: PPUSH
14446: PPUSH
14447: PPUSH
14448: PPUSH
14449: PPUSH
14450: PPUSH
14451: PPUSH
14452: PPUSH
14453: PPUSH
14454: PPUSH
14455: PPUSH
14456: PPUSH
14457: PPUSH
14458: PPUSH
14459: PPUSH
// result = [ ] ;
14460: LD_ADDR_VAR 0 7
14464: PUSH
14465: EMPTY
14466: ST_TO_ADDR
// temp_list = [ ] ;
14467: LD_ADDR_VAR 0 9
14471: PUSH
14472: EMPTY
14473: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
14474: LD_VAR 0 4
14478: PUSH
14479: LD_INT 0
14481: PUSH
14482: LD_INT 1
14484: PUSH
14485: LD_INT 2
14487: PUSH
14488: LD_INT 3
14490: PUSH
14491: LD_INT 4
14493: PUSH
14494: LD_INT 5
14496: PUSH
14497: EMPTY
14498: LIST
14499: LIST
14500: LIST
14501: LIST
14502: LIST
14503: LIST
14504: IN
14505: NOT
14506: PUSH
14507: LD_VAR 0 1
14511: PUSH
14512: LD_INT 0
14514: PUSH
14515: LD_INT 1
14517: PUSH
14518: EMPTY
14519: LIST
14520: LIST
14521: IN
14522: PUSH
14523: LD_VAR 0 5
14527: PUSH
14528: LD_INT 1
14530: PUSH
14531: LD_INT 2
14533: PUSH
14534: LD_INT 3
14536: PUSH
14537: EMPTY
14538: LIST
14539: LIST
14540: LIST
14541: IN
14542: NOT
14543: AND
14544: OR
14545: IFFALSE 14549
// exit ;
14547: GO 32940
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
14549: LD_VAR 0 1
14553: PUSH
14554: LD_INT 6
14556: PUSH
14557: LD_INT 7
14559: PUSH
14560: LD_INT 8
14562: PUSH
14563: LD_INT 13
14565: PUSH
14566: LD_INT 12
14568: PUSH
14569: LD_INT 15
14571: PUSH
14572: LD_INT 11
14574: PUSH
14575: LD_INT 14
14577: PUSH
14578: LD_INT 10
14580: PUSH
14581: EMPTY
14582: LIST
14583: LIST
14584: LIST
14585: LIST
14586: LIST
14587: LIST
14588: LIST
14589: LIST
14590: LIST
14591: IN
14592: IFFALSE 14602
// btype = b_lab ;
14594: LD_ADDR_VAR 0 1
14598: PUSH
14599: LD_INT 6
14601: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
14602: LD_VAR 0 6
14606: PUSH
14607: LD_INT 0
14609: PUSH
14610: LD_INT 1
14612: PUSH
14613: LD_INT 2
14615: PUSH
14616: EMPTY
14617: LIST
14618: LIST
14619: LIST
14620: IN
14621: NOT
14622: PUSH
14623: LD_VAR 0 1
14627: PUSH
14628: LD_INT 0
14630: PUSH
14631: LD_INT 1
14633: PUSH
14634: LD_INT 2
14636: PUSH
14637: LD_INT 3
14639: PUSH
14640: LD_INT 6
14642: PUSH
14643: LD_INT 36
14645: PUSH
14646: LD_INT 4
14648: PUSH
14649: LD_INT 5
14651: PUSH
14652: LD_INT 31
14654: PUSH
14655: LD_INT 32
14657: PUSH
14658: LD_INT 33
14660: PUSH
14661: EMPTY
14662: LIST
14663: LIST
14664: LIST
14665: LIST
14666: LIST
14667: LIST
14668: LIST
14669: LIST
14670: LIST
14671: LIST
14672: LIST
14673: IN
14674: NOT
14675: PUSH
14676: LD_VAR 0 6
14680: PUSH
14681: LD_INT 1
14683: EQUAL
14684: AND
14685: OR
14686: PUSH
14687: LD_VAR 0 1
14691: PUSH
14692: LD_INT 2
14694: PUSH
14695: LD_INT 3
14697: PUSH
14698: EMPTY
14699: LIST
14700: LIST
14701: IN
14702: NOT
14703: PUSH
14704: LD_VAR 0 6
14708: PUSH
14709: LD_INT 2
14711: EQUAL
14712: AND
14713: OR
14714: IFFALSE 14724
// mode = 0 ;
14716: LD_ADDR_VAR 0 6
14720: PUSH
14721: LD_INT 0
14723: ST_TO_ADDR
// case mode of 0 :
14724: LD_VAR 0 6
14728: PUSH
14729: LD_INT 0
14731: DOUBLE
14732: EQUAL
14733: IFTRUE 14737
14735: GO 26190
14737: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
14738: LD_ADDR_VAR 0 11
14742: PUSH
14743: LD_INT 0
14745: PUSH
14746: LD_INT 0
14748: PUSH
14749: EMPTY
14750: LIST
14751: LIST
14752: PUSH
14753: LD_INT 0
14755: PUSH
14756: LD_INT 1
14758: NEG
14759: PUSH
14760: EMPTY
14761: LIST
14762: LIST
14763: PUSH
14764: LD_INT 1
14766: PUSH
14767: LD_INT 0
14769: PUSH
14770: EMPTY
14771: LIST
14772: LIST
14773: PUSH
14774: LD_INT 1
14776: PUSH
14777: LD_INT 1
14779: PUSH
14780: EMPTY
14781: LIST
14782: LIST
14783: PUSH
14784: LD_INT 0
14786: PUSH
14787: LD_INT 1
14789: PUSH
14790: EMPTY
14791: LIST
14792: LIST
14793: PUSH
14794: LD_INT 1
14796: NEG
14797: PUSH
14798: LD_INT 0
14800: PUSH
14801: EMPTY
14802: LIST
14803: LIST
14804: PUSH
14805: LD_INT 1
14807: NEG
14808: PUSH
14809: LD_INT 1
14811: NEG
14812: PUSH
14813: EMPTY
14814: LIST
14815: LIST
14816: PUSH
14817: LD_INT 1
14819: NEG
14820: PUSH
14821: LD_INT 2
14823: NEG
14824: PUSH
14825: EMPTY
14826: LIST
14827: LIST
14828: PUSH
14829: LD_INT 0
14831: PUSH
14832: LD_INT 2
14834: NEG
14835: PUSH
14836: EMPTY
14837: LIST
14838: LIST
14839: PUSH
14840: LD_INT 1
14842: PUSH
14843: LD_INT 1
14845: NEG
14846: PUSH
14847: EMPTY
14848: LIST
14849: LIST
14850: PUSH
14851: LD_INT 1
14853: PUSH
14854: LD_INT 2
14856: PUSH
14857: EMPTY
14858: LIST
14859: LIST
14860: PUSH
14861: LD_INT 0
14863: PUSH
14864: LD_INT 2
14866: PUSH
14867: EMPTY
14868: LIST
14869: LIST
14870: PUSH
14871: LD_INT 1
14873: NEG
14874: PUSH
14875: LD_INT 1
14877: PUSH
14878: EMPTY
14879: LIST
14880: LIST
14881: PUSH
14882: LD_INT 1
14884: PUSH
14885: LD_INT 3
14887: PUSH
14888: EMPTY
14889: LIST
14890: LIST
14891: PUSH
14892: LD_INT 0
14894: PUSH
14895: LD_INT 3
14897: PUSH
14898: EMPTY
14899: LIST
14900: LIST
14901: PUSH
14902: LD_INT 1
14904: NEG
14905: PUSH
14906: LD_INT 2
14908: PUSH
14909: EMPTY
14910: LIST
14911: LIST
14912: PUSH
14913: EMPTY
14914: LIST
14915: LIST
14916: LIST
14917: LIST
14918: LIST
14919: LIST
14920: LIST
14921: LIST
14922: LIST
14923: LIST
14924: LIST
14925: LIST
14926: LIST
14927: LIST
14928: LIST
14929: LIST
14930: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
14931: LD_ADDR_VAR 0 12
14935: PUSH
14936: LD_INT 0
14938: PUSH
14939: LD_INT 0
14941: PUSH
14942: EMPTY
14943: LIST
14944: LIST
14945: PUSH
14946: LD_INT 0
14948: PUSH
14949: LD_INT 1
14951: NEG
14952: PUSH
14953: EMPTY
14954: LIST
14955: LIST
14956: PUSH
14957: LD_INT 1
14959: PUSH
14960: LD_INT 0
14962: PUSH
14963: EMPTY
14964: LIST
14965: LIST
14966: PUSH
14967: LD_INT 1
14969: PUSH
14970: LD_INT 1
14972: PUSH
14973: EMPTY
14974: LIST
14975: LIST
14976: PUSH
14977: LD_INT 0
14979: PUSH
14980: LD_INT 1
14982: PUSH
14983: EMPTY
14984: LIST
14985: LIST
14986: PUSH
14987: LD_INT 1
14989: NEG
14990: PUSH
14991: LD_INT 0
14993: PUSH
14994: EMPTY
14995: LIST
14996: LIST
14997: PUSH
14998: LD_INT 1
15000: NEG
15001: PUSH
15002: LD_INT 1
15004: NEG
15005: PUSH
15006: EMPTY
15007: LIST
15008: LIST
15009: PUSH
15010: LD_INT 1
15012: PUSH
15013: LD_INT 1
15015: NEG
15016: PUSH
15017: EMPTY
15018: LIST
15019: LIST
15020: PUSH
15021: LD_INT 2
15023: PUSH
15024: LD_INT 0
15026: PUSH
15027: EMPTY
15028: LIST
15029: LIST
15030: PUSH
15031: LD_INT 2
15033: PUSH
15034: LD_INT 1
15036: PUSH
15037: EMPTY
15038: LIST
15039: LIST
15040: PUSH
15041: LD_INT 1
15043: NEG
15044: PUSH
15045: LD_INT 1
15047: PUSH
15048: EMPTY
15049: LIST
15050: LIST
15051: PUSH
15052: LD_INT 2
15054: NEG
15055: PUSH
15056: LD_INT 0
15058: PUSH
15059: EMPTY
15060: LIST
15061: LIST
15062: PUSH
15063: LD_INT 2
15065: NEG
15066: PUSH
15067: LD_INT 1
15069: NEG
15070: PUSH
15071: EMPTY
15072: LIST
15073: LIST
15074: PUSH
15075: LD_INT 2
15077: NEG
15078: PUSH
15079: LD_INT 1
15081: PUSH
15082: EMPTY
15083: LIST
15084: LIST
15085: PUSH
15086: LD_INT 3
15088: NEG
15089: PUSH
15090: LD_INT 0
15092: PUSH
15093: EMPTY
15094: LIST
15095: LIST
15096: PUSH
15097: LD_INT 3
15099: NEG
15100: PUSH
15101: LD_INT 1
15103: NEG
15104: PUSH
15105: EMPTY
15106: LIST
15107: LIST
15108: PUSH
15109: EMPTY
15110: LIST
15111: LIST
15112: LIST
15113: LIST
15114: LIST
15115: LIST
15116: LIST
15117: LIST
15118: LIST
15119: LIST
15120: LIST
15121: LIST
15122: LIST
15123: LIST
15124: LIST
15125: LIST
15126: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
15127: LD_ADDR_VAR 0 13
15131: PUSH
15132: LD_INT 0
15134: PUSH
15135: LD_INT 0
15137: PUSH
15138: EMPTY
15139: LIST
15140: LIST
15141: PUSH
15142: LD_INT 0
15144: PUSH
15145: LD_INT 1
15147: NEG
15148: PUSH
15149: EMPTY
15150: LIST
15151: LIST
15152: PUSH
15153: LD_INT 1
15155: PUSH
15156: LD_INT 0
15158: PUSH
15159: EMPTY
15160: LIST
15161: LIST
15162: PUSH
15163: LD_INT 1
15165: PUSH
15166: LD_INT 1
15168: PUSH
15169: EMPTY
15170: LIST
15171: LIST
15172: PUSH
15173: LD_INT 0
15175: PUSH
15176: LD_INT 1
15178: PUSH
15179: EMPTY
15180: LIST
15181: LIST
15182: PUSH
15183: LD_INT 1
15185: NEG
15186: PUSH
15187: LD_INT 0
15189: PUSH
15190: EMPTY
15191: LIST
15192: LIST
15193: PUSH
15194: LD_INT 1
15196: NEG
15197: PUSH
15198: LD_INT 1
15200: NEG
15201: PUSH
15202: EMPTY
15203: LIST
15204: LIST
15205: PUSH
15206: LD_INT 1
15208: NEG
15209: PUSH
15210: LD_INT 2
15212: NEG
15213: PUSH
15214: EMPTY
15215: LIST
15216: LIST
15217: PUSH
15218: LD_INT 2
15220: PUSH
15221: LD_INT 1
15223: PUSH
15224: EMPTY
15225: LIST
15226: LIST
15227: PUSH
15228: LD_INT 2
15230: PUSH
15231: LD_INT 2
15233: PUSH
15234: EMPTY
15235: LIST
15236: LIST
15237: PUSH
15238: LD_INT 1
15240: PUSH
15241: LD_INT 2
15243: PUSH
15244: EMPTY
15245: LIST
15246: LIST
15247: PUSH
15248: LD_INT 2
15250: NEG
15251: PUSH
15252: LD_INT 1
15254: NEG
15255: PUSH
15256: EMPTY
15257: LIST
15258: LIST
15259: PUSH
15260: LD_INT 2
15262: NEG
15263: PUSH
15264: LD_INT 2
15266: NEG
15267: PUSH
15268: EMPTY
15269: LIST
15270: LIST
15271: PUSH
15272: LD_INT 2
15274: NEG
15275: PUSH
15276: LD_INT 3
15278: NEG
15279: PUSH
15280: EMPTY
15281: LIST
15282: LIST
15283: PUSH
15284: LD_INT 3
15286: NEG
15287: PUSH
15288: LD_INT 2
15290: NEG
15291: PUSH
15292: EMPTY
15293: LIST
15294: LIST
15295: PUSH
15296: LD_INT 3
15298: NEG
15299: PUSH
15300: LD_INT 3
15302: NEG
15303: PUSH
15304: EMPTY
15305: LIST
15306: LIST
15307: PUSH
15308: EMPTY
15309: LIST
15310: LIST
15311: LIST
15312: LIST
15313: LIST
15314: LIST
15315: LIST
15316: LIST
15317: LIST
15318: LIST
15319: LIST
15320: LIST
15321: LIST
15322: LIST
15323: LIST
15324: LIST
15325: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
15326: LD_ADDR_VAR 0 14
15330: PUSH
15331: LD_INT 0
15333: PUSH
15334: LD_INT 0
15336: PUSH
15337: EMPTY
15338: LIST
15339: LIST
15340: PUSH
15341: LD_INT 0
15343: PUSH
15344: LD_INT 1
15346: NEG
15347: PUSH
15348: EMPTY
15349: LIST
15350: LIST
15351: PUSH
15352: LD_INT 1
15354: PUSH
15355: LD_INT 0
15357: PUSH
15358: EMPTY
15359: LIST
15360: LIST
15361: PUSH
15362: LD_INT 1
15364: PUSH
15365: LD_INT 1
15367: PUSH
15368: EMPTY
15369: LIST
15370: LIST
15371: PUSH
15372: LD_INT 0
15374: PUSH
15375: LD_INT 1
15377: PUSH
15378: EMPTY
15379: LIST
15380: LIST
15381: PUSH
15382: LD_INT 1
15384: NEG
15385: PUSH
15386: LD_INT 0
15388: PUSH
15389: EMPTY
15390: LIST
15391: LIST
15392: PUSH
15393: LD_INT 1
15395: NEG
15396: PUSH
15397: LD_INT 1
15399: NEG
15400: PUSH
15401: EMPTY
15402: LIST
15403: LIST
15404: PUSH
15405: LD_INT 1
15407: NEG
15408: PUSH
15409: LD_INT 2
15411: NEG
15412: PUSH
15413: EMPTY
15414: LIST
15415: LIST
15416: PUSH
15417: LD_INT 0
15419: PUSH
15420: LD_INT 2
15422: NEG
15423: PUSH
15424: EMPTY
15425: LIST
15426: LIST
15427: PUSH
15428: LD_INT 1
15430: PUSH
15431: LD_INT 1
15433: NEG
15434: PUSH
15435: EMPTY
15436: LIST
15437: LIST
15438: PUSH
15439: LD_INT 1
15441: PUSH
15442: LD_INT 2
15444: PUSH
15445: EMPTY
15446: LIST
15447: LIST
15448: PUSH
15449: LD_INT 0
15451: PUSH
15452: LD_INT 2
15454: PUSH
15455: EMPTY
15456: LIST
15457: LIST
15458: PUSH
15459: LD_INT 1
15461: NEG
15462: PUSH
15463: LD_INT 1
15465: PUSH
15466: EMPTY
15467: LIST
15468: LIST
15469: PUSH
15470: LD_INT 1
15472: NEG
15473: PUSH
15474: LD_INT 3
15476: NEG
15477: PUSH
15478: EMPTY
15479: LIST
15480: LIST
15481: PUSH
15482: LD_INT 0
15484: PUSH
15485: LD_INT 3
15487: NEG
15488: PUSH
15489: EMPTY
15490: LIST
15491: LIST
15492: PUSH
15493: LD_INT 1
15495: PUSH
15496: LD_INT 2
15498: NEG
15499: PUSH
15500: EMPTY
15501: LIST
15502: LIST
15503: PUSH
15504: EMPTY
15505: LIST
15506: LIST
15507: LIST
15508: LIST
15509: LIST
15510: LIST
15511: LIST
15512: LIST
15513: LIST
15514: LIST
15515: LIST
15516: LIST
15517: LIST
15518: LIST
15519: LIST
15520: LIST
15521: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
15522: LD_ADDR_VAR 0 15
15526: PUSH
15527: LD_INT 0
15529: PUSH
15530: LD_INT 0
15532: PUSH
15533: EMPTY
15534: LIST
15535: LIST
15536: PUSH
15537: LD_INT 0
15539: PUSH
15540: LD_INT 1
15542: NEG
15543: PUSH
15544: EMPTY
15545: LIST
15546: LIST
15547: PUSH
15548: LD_INT 1
15550: PUSH
15551: LD_INT 0
15553: PUSH
15554: EMPTY
15555: LIST
15556: LIST
15557: PUSH
15558: LD_INT 1
15560: PUSH
15561: LD_INT 1
15563: PUSH
15564: EMPTY
15565: LIST
15566: LIST
15567: PUSH
15568: LD_INT 0
15570: PUSH
15571: LD_INT 1
15573: PUSH
15574: EMPTY
15575: LIST
15576: LIST
15577: PUSH
15578: LD_INT 1
15580: NEG
15581: PUSH
15582: LD_INT 0
15584: PUSH
15585: EMPTY
15586: LIST
15587: LIST
15588: PUSH
15589: LD_INT 1
15591: NEG
15592: PUSH
15593: LD_INT 1
15595: NEG
15596: PUSH
15597: EMPTY
15598: LIST
15599: LIST
15600: PUSH
15601: LD_INT 1
15603: PUSH
15604: LD_INT 1
15606: NEG
15607: PUSH
15608: EMPTY
15609: LIST
15610: LIST
15611: PUSH
15612: LD_INT 2
15614: PUSH
15615: LD_INT 0
15617: PUSH
15618: EMPTY
15619: LIST
15620: LIST
15621: PUSH
15622: LD_INT 2
15624: PUSH
15625: LD_INT 1
15627: PUSH
15628: EMPTY
15629: LIST
15630: LIST
15631: PUSH
15632: LD_INT 1
15634: NEG
15635: PUSH
15636: LD_INT 1
15638: PUSH
15639: EMPTY
15640: LIST
15641: LIST
15642: PUSH
15643: LD_INT 2
15645: NEG
15646: PUSH
15647: LD_INT 0
15649: PUSH
15650: EMPTY
15651: LIST
15652: LIST
15653: PUSH
15654: LD_INT 2
15656: NEG
15657: PUSH
15658: LD_INT 1
15660: NEG
15661: PUSH
15662: EMPTY
15663: LIST
15664: LIST
15665: PUSH
15666: LD_INT 2
15668: PUSH
15669: LD_INT 1
15671: NEG
15672: PUSH
15673: EMPTY
15674: LIST
15675: LIST
15676: PUSH
15677: LD_INT 3
15679: PUSH
15680: LD_INT 0
15682: PUSH
15683: EMPTY
15684: LIST
15685: LIST
15686: PUSH
15687: LD_INT 3
15689: PUSH
15690: LD_INT 1
15692: PUSH
15693: EMPTY
15694: LIST
15695: LIST
15696: PUSH
15697: EMPTY
15698: LIST
15699: LIST
15700: LIST
15701: LIST
15702: LIST
15703: LIST
15704: LIST
15705: LIST
15706: LIST
15707: LIST
15708: LIST
15709: LIST
15710: LIST
15711: LIST
15712: LIST
15713: LIST
15714: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
15715: LD_ADDR_VAR 0 16
15719: PUSH
15720: LD_INT 0
15722: PUSH
15723: LD_INT 0
15725: PUSH
15726: EMPTY
15727: LIST
15728: LIST
15729: PUSH
15730: LD_INT 0
15732: PUSH
15733: LD_INT 1
15735: NEG
15736: PUSH
15737: EMPTY
15738: LIST
15739: LIST
15740: PUSH
15741: LD_INT 1
15743: PUSH
15744: LD_INT 0
15746: PUSH
15747: EMPTY
15748: LIST
15749: LIST
15750: PUSH
15751: LD_INT 1
15753: PUSH
15754: LD_INT 1
15756: PUSH
15757: EMPTY
15758: LIST
15759: LIST
15760: PUSH
15761: LD_INT 0
15763: PUSH
15764: LD_INT 1
15766: PUSH
15767: EMPTY
15768: LIST
15769: LIST
15770: PUSH
15771: LD_INT 1
15773: NEG
15774: PUSH
15775: LD_INT 0
15777: PUSH
15778: EMPTY
15779: LIST
15780: LIST
15781: PUSH
15782: LD_INT 1
15784: NEG
15785: PUSH
15786: LD_INT 1
15788: NEG
15789: PUSH
15790: EMPTY
15791: LIST
15792: LIST
15793: PUSH
15794: LD_INT 1
15796: NEG
15797: PUSH
15798: LD_INT 2
15800: NEG
15801: PUSH
15802: EMPTY
15803: LIST
15804: LIST
15805: PUSH
15806: LD_INT 2
15808: PUSH
15809: LD_INT 1
15811: PUSH
15812: EMPTY
15813: LIST
15814: LIST
15815: PUSH
15816: LD_INT 2
15818: PUSH
15819: LD_INT 2
15821: PUSH
15822: EMPTY
15823: LIST
15824: LIST
15825: PUSH
15826: LD_INT 1
15828: PUSH
15829: LD_INT 2
15831: PUSH
15832: EMPTY
15833: LIST
15834: LIST
15835: PUSH
15836: LD_INT 2
15838: NEG
15839: PUSH
15840: LD_INT 1
15842: NEG
15843: PUSH
15844: EMPTY
15845: LIST
15846: LIST
15847: PUSH
15848: LD_INT 2
15850: NEG
15851: PUSH
15852: LD_INT 2
15854: NEG
15855: PUSH
15856: EMPTY
15857: LIST
15858: LIST
15859: PUSH
15860: LD_INT 3
15862: PUSH
15863: LD_INT 2
15865: PUSH
15866: EMPTY
15867: LIST
15868: LIST
15869: PUSH
15870: LD_INT 3
15872: PUSH
15873: LD_INT 3
15875: PUSH
15876: EMPTY
15877: LIST
15878: LIST
15879: PUSH
15880: LD_INT 2
15882: PUSH
15883: LD_INT 3
15885: PUSH
15886: EMPTY
15887: LIST
15888: LIST
15889: PUSH
15890: EMPTY
15891: LIST
15892: LIST
15893: LIST
15894: LIST
15895: LIST
15896: LIST
15897: LIST
15898: LIST
15899: LIST
15900: LIST
15901: LIST
15902: LIST
15903: LIST
15904: LIST
15905: LIST
15906: LIST
15907: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
15908: LD_ADDR_VAR 0 17
15912: PUSH
15913: LD_INT 0
15915: PUSH
15916: LD_INT 0
15918: PUSH
15919: EMPTY
15920: LIST
15921: LIST
15922: PUSH
15923: LD_INT 0
15925: PUSH
15926: LD_INT 1
15928: NEG
15929: PUSH
15930: EMPTY
15931: LIST
15932: LIST
15933: PUSH
15934: LD_INT 1
15936: PUSH
15937: LD_INT 0
15939: PUSH
15940: EMPTY
15941: LIST
15942: LIST
15943: PUSH
15944: LD_INT 1
15946: PUSH
15947: LD_INT 1
15949: PUSH
15950: EMPTY
15951: LIST
15952: LIST
15953: PUSH
15954: LD_INT 0
15956: PUSH
15957: LD_INT 1
15959: PUSH
15960: EMPTY
15961: LIST
15962: LIST
15963: PUSH
15964: LD_INT 1
15966: NEG
15967: PUSH
15968: LD_INT 0
15970: PUSH
15971: EMPTY
15972: LIST
15973: LIST
15974: PUSH
15975: LD_INT 1
15977: NEG
15978: PUSH
15979: LD_INT 1
15981: NEG
15982: PUSH
15983: EMPTY
15984: LIST
15985: LIST
15986: PUSH
15987: LD_INT 1
15989: NEG
15990: PUSH
15991: LD_INT 2
15993: NEG
15994: PUSH
15995: EMPTY
15996: LIST
15997: LIST
15998: PUSH
15999: LD_INT 0
16001: PUSH
16002: LD_INT 2
16004: NEG
16005: PUSH
16006: EMPTY
16007: LIST
16008: LIST
16009: PUSH
16010: LD_INT 1
16012: PUSH
16013: LD_INT 1
16015: NEG
16016: PUSH
16017: EMPTY
16018: LIST
16019: LIST
16020: PUSH
16021: LD_INT 2
16023: PUSH
16024: LD_INT 0
16026: PUSH
16027: EMPTY
16028: LIST
16029: LIST
16030: PUSH
16031: LD_INT 2
16033: PUSH
16034: LD_INT 1
16036: PUSH
16037: EMPTY
16038: LIST
16039: LIST
16040: PUSH
16041: LD_INT 2
16043: PUSH
16044: LD_INT 2
16046: PUSH
16047: EMPTY
16048: LIST
16049: LIST
16050: PUSH
16051: LD_INT 1
16053: PUSH
16054: LD_INT 2
16056: PUSH
16057: EMPTY
16058: LIST
16059: LIST
16060: PUSH
16061: LD_INT 0
16063: PUSH
16064: LD_INT 2
16066: PUSH
16067: EMPTY
16068: LIST
16069: LIST
16070: PUSH
16071: LD_INT 1
16073: NEG
16074: PUSH
16075: LD_INT 1
16077: PUSH
16078: EMPTY
16079: LIST
16080: LIST
16081: PUSH
16082: LD_INT 2
16084: NEG
16085: PUSH
16086: LD_INT 0
16088: PUSH
16089: EMPTY
16090: LIST
16091: LIST
16092: PUSH
16093: LD_INT 2
16095: NEG
16096: PUSH
16097: LD_INT 1
16099: NEG
16100: PUSH
16101: EMPTY
16102: LIST
16103: LIST
16104: PUSH
16105: LD_INT 2
16107: NEG
16108: PUSH
16109: LD_INT 2
16111: NEG
16112: PUSH
16113: EMPTY
16114: LIST
16115: LIST
16116: PUSH
16117: EMPTY
16118: LIST
16119: LIST
16120: LIST
16121: LIST
16122: LIST
16123: LIST
16124: LIST
16125: LIST
16126: LIST
16127: LIST
16128: LIST
16129: LIST
16130: LIST
16131: LIST
16132: LIST
16133: LIST
16134: LIST
16135: LIST
16136: LIST
16137: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
16138: LD_ADDR_VAR 0 18
16142: PUSH
16143: LD_INT 0
16145: PUSH
16146: LD_INT 0
16148: PUSH
16149: EMPTY
16150: LIST
16151: LIST
16152: PUSH
16153: LD_INT 0
16155: PUSH
16156: LD_INT 1
16158: NEG
16159: PUSH
16160: EMPTY
16161: LIST
16162: LIST
16163: PUSH
16164: LD_INT 1
16166: PUSH
16167: LD_INT 0
16169: PUSH
16170: EMPTY
16171: LIST
16172: LIST
16173: PUSH
16174: LD_INT 1
16176: PUSH
16177: LD_INT 1
16179: PUSH
16180: EMPTY
16181: LIST
16182: LIST
16183: PUSH
16184: LD_INT 0
16186: PUSH
16187: LD_INT 1
16189: PUSH
16190: EMPTY
16191: LIST
16192: LIST
16193: PUSH
16194: LD_INT 1
16196: NEG
16197: PUSH
16198: LD_INT 0
16200: PUSH
16201: EMPTY
16202: LIST
16203: LIST
16204: PUSH
16205: LD_INT 1
16207: NEG
16208: PUSH
16209: LD_INT 1
16211: NEG
16212: PUSH
16213: EMPTY
16214: LIST
16215: LIST
16216: PUSH
16217: LD_INT 1
16219: NEG
16220: PUSH
16221: LD_INT 2
16223: NEG
16224: PUSH
16225: EMPTY
16226: LIST
16227: LIST
16228: PUSH
16229: LD_INT 0
16231: PUSH
16232: LD_INT 2
16234: NEG
16235: PUSH
16236: EMPTY
16237: LIST
16238: LIST
16239: PUSH
16240: LD_INT 1
16242: PUSH
16243: LD_INT 1
16245: NEG
16246: PUSH
16247: EMPTY
16248: LIST
16249: LIST
16250: PUSH
16251: LD_INT 2
16253: PUSH
16254: LD_INT 0
16256: PUSH
16257: EMPTY
16258: LIST
16259: LIST
16260: PUSH
16261: LD_INT 2
16263: PUSH
16264: LD_INT 1
16266: PUSH
16267: EMPTY
16268: LIST
16269: LIST
16270: PUSH
16271: LD_INT 2
16273: PUSH
16274: LD_INT 2
16276: PUSH
16277: EMPTY
16278: LIST
16279: LIST
16280: PUSH
16281: LD_INT 1
16283: PUSH
16284: LD_INT 2
16286: PUSH
16287: EMPTY
16288: LIST
16289: LIST
16290: PUSH
16291: LD_INT 0
16293: PUSH
16294: LD_INT 2
16296: PUSH
16297: EMPTY
16298: LIST
16299: LIST
16300: PUSH
16301: LD_INT 1
16303: NEG
16304: PUSH
16305: LD_INT 1
16307: PUSH
16308: EMPTY
16309: LIST
16310: LIST
16311: PUSH
16312: LD_INT 2
16314: NEG
16315: PUSH
16316: LD_INT 0
16318: PUSH
16319: EMPTY
16320: LIST
16321: LIST
16322: PUSH
16323: LD_INT 2
16325: NEG
16326: PUSH
16327: LD_INT 1
16329: NEG
16330: PUSH
16331: EMPTY
16332: LIST
16333: LIST
16334: PUSH
16335: LD_INT 2
16337: NEG
16338: PUSH
16339: LD_INT 2
16341: NEG
16342: PUSH
16343: EMPTY
16344: LIST
16345: LIST
16346: PUSH
16347: EMPTY
16348: LIST
16349: LIST
16350: LIST
16351: LIST
16352: LIST
16353: LIST
16354: LIST
16355: LIST
16356: LIST
16357: LIST
16358: LIST
16359: LIST
16360: LIST
16361: LIST
16362: LIST
16363: LIST
16364: LIST
16365: LIST
16366: LIST
16367: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
16368: LD_ADDR_VAR 0 19
16372: PUSH
16373: LD_INT 0
16375: PUSH
16376: LD_INT 0
16378: PUSH
16379: EMPTY
16380: LIST
16381: LIST
16382: PUSH
16383: LD_INT 0
16385: PUSH
16386: LD_INT 1
16388: NEG
16389: PUSH
16390: EMPTY
16391: LIST
16392: LIST
16393: PUSH
16394: LD_INT 1
16396: PUSH
16397: LD_INT 0
16399: PUSH
16400: EMPTY
16401: LIST
16402: LIST
16403: PUSH
16404: LD_INT 1
16406: PUSH
16407: LD_INT 1
16409: PUSH
16410: EMPTY
16411: LIST
16412: LIST
16413: PUSH
16414: LD_INT 0
16416: PUSH
16417: LD_INT 1
16419: PUSH
16420: EMPTY
16421: LIST
16422: LIST
16423: PUSH
16424: LD_INT 1
16426: NEG
16427: PUSH
16428: LD_INT 0
16430: PUSH
16431: EMPTY
16432: LIST
16433: LIST
16434: PUSH
16435: LD_INT 1
16437: NEG
16438: PUSH
16439: LD_INT 1
16441: NEG
16442: PUSH
16443: EMPTY
16444: LIST
16445: LIST
16446: PUSH
16447: LD_INT 1
16449: NEG
16450: PUSH
16451: LD_INT 2
16453: NEG
16454: PUSH
16455: EMPTY
16456: LIST
16457: LIST
16458: PUSH
16459: LD_INT 0
16461: PUSH
16462: LD_INT 2
16464: NEG
16465: PUSH
16466: EMPTY
16467: LIST
16468: LIST
16469: PUSH
16470: LD_INT 1
16472: PUSH
16473: LD_INT 1
16475: NEG
16476: PUSH
16477: EMPTY
16478: LIST
16479: LIST
16480: PUSH
16481: LD_INT 2
16483: PUSH
16484: LD_INT 0
16486: PUSH
16487: EMPTY
16488: LIST
16489: LIST
16490: PUSH
16491: LD_INT 2
16493: PUSH
16494: LD_INT 1
16496: PUSH
16497: EMPTY
16498: LIST
16499: LIST
16500: PUSH
16501: LD_INT 2
16503: PUSH
16504: LD_INT 2
16506: PUSH
16507: EMPTY
16508: LIST
16509: LIST
16510: PUSH
16511: LD_INT 1
16513: PUSH
16514: LD_INT 2
16516: PUSH
16517: EMPTY
16518: LIST
16519: LIST
16520: PUSH
16521: LD_INT 0
16523: PUSH
16524: LD_INT 2
16526: PUSH
16527: EMPTY
16528: LIST
16529: LIST
16530: PUSH
16531: LD_INT 1
16533: NEG
16534: PUSH
16535: LD_INT 1
16537: PUSH
16538: EMPTY
16539: LIST
16540: LIST
16541: PUSH
16542: LD_INT 2
16544: NEG
16545: PUSH
16546: LD_INT 0
16548: PUSH
16549: EMPTY
16550: LIST
16551: LIST
16552: PUSH
16553: LD_INT 2
16555: NEG
16556: PUSH
16557: LD_INT 1
16559: NEG
16560: PUSH
16561: EMPTY
16562: LIST
16563: LIST
16564: PUSH
16565: LD_INT 2
16567: NEG
16568: PUSH
16569: LD_INT 2
16571: NEG
16572: PUSH
16573: EMPTY
16574: LIST
16575: LIST
16576: PUSH
16577: EMPTY
16578: LIST
16579: LIST
16580: LIST
16581: LIST
16582: LIST
16583: LIST
16584: LIST
16585: LIST
16586: LIST
16587: LIST
16588: LIST
16589: LIST
16590: LIST
16591: LIST
16592: LIST
16593: LIST
16594: LIST
16595: LIST
16596: LIST
16597: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
16598: LD_ADDR_VAR 0 20
16602: PUSH
16603: LD_INT 0
16605: PUSH
16606: LD_INT 0
16608: PUSH
16609: EMPTY
16610: LIST
16611: LIST
16612: PUSH
16613: LD_INT 0
16615: PUSH
16616: LD_INT 1
16618: NEG
16619: PUSH
16620: EMPTY
16621: LIST
16622: LIST
16623: PUSH
16624: LD_INT 1
16626: PUSH
16627: LD_INT 0
16629: PUSH
16630: EMPTY
16631: LIST
16632: LIST
16633: PUSH
16634: LD_INT 1
16636: PUSH
16637: LD_INT 1
16639: PUSH
16640: EMPTY
16641: LIST
16642: LIST
16643: PUSH
16644: LD_INT 0
16646: PUSH
16647: LD_INT 1
16649: PUSH
16650: EMPTY
16651: LIST
16652: LIST
16653: PUSH
16654: LD_INT 1
16656: NEG
16657: PUSH
16658: LD_INT 0
16660: PUSH
16661: EMPTY
16662: LIST
16663: LIST
16664: PUSH
16665: LD_INT 1
16667: NEG
16668: PUSH
16669: LD_INT 1
16671: NEG
16672: PUSH
16673: EMPTY
16674: LIST
16675: LIST
16676: PUSH
16677: LD_INT 1
16679: NEG
16680: PUSH
16681: LD_INT 2
16683: NEG
16684: PUSH
16685: EMPTY
16686: LIST
16687: LIST
16688: PUSH
16689: LD_INT 0
16691: PUSH
16692: LD_INT 2
16694: NEG
16695: PUSH
16696: EMPTY
16697: LIST
16698: LIST
16699: PUSH
16700: LD_INT 1
16702: PUSH
16703: LD_INT 1
16705: NEG
16706: PUSH
16707: EMPTY
16708: LIST
16709: LIST
16710: PUSH
16711: LD_INT 2
16713: PUSH
16714: LD_INT 0
16716: PUSH
16717: EMPTY
16718: LIST
16719: LIST
16720: PUSH
16721: LD_INT 2
16723: PUSH
16724: LD_INT 1
16726: PUSH
16727: EMPTY
16728: LIST
16729: LIST
16730: PUSH
16731: LD_INT 2
16733: PUSH
16734: LD_INT 2
16736: PUSH
16737: EMPTY
16738: LIST
16739: LIST
16740: PUSH
16741: LD_INT 1
16743: PUSH
16744: LD_INT 2
16746: PUSH
16747: EMPTY
16748: LIST
16749: LIST
16750: PUSH
16751: LD_INT 0
16753: PUSH
16754: LD_INT 2
16756: PUSH
16757: EMPTY
16758: LIST
16759: LIST
16760: PUSH
16761: LD_INT 1
16763: NEG
16764: PUSH
16765: LD_INT 1
16767: PUSH
16768: EMPTY
16769: LIST
16770: LIST
16771: PUSH
16772: LD_INT 2
16774: NEG
16775: PUSH
16776: LD_INT 0
16778: PUSH
16779: EMPTY
16780: LIST
16781: LIST
16782: PUSH
16783: LD_INT 2
16785: NEG
16786: PUSH
16787: LD_INT 1
16789: NEG
16790: PUSH
16791: EMPTY
16792: LIST
16793: LIST
16794: PUSH
16795: LD_INT 2
16797: NEG
16798: PUSH
16799: LD_INT 2
16801: NEG
16802: PUSH
16803: EMPTY
16804: LIST
16805: LIST
16806: PUSH
16807: EMPTY
16808: LIST
16809: LIST
16810: LIST
16811: LIST
16812: LIST
16813: LIST
16814: LIST
16815: LIST
16816: LIST
16817: LIST
16818: LIST
16819: LIST
16820: LIST
16821: LIST
16822: LIST
16823: LIST
16824: LIST
16825: LIST
16826: LIST
16827: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
16828: LD_ADDR_VAR 0 21
16832: PUSH
16833: LD_INT 0
16835: PUSH
16836: LD_INT 0
16838: PUSH
16839: EMPTY
16840: LIST
16841: LIST
16842: PUSH
16843: LD_INT 0
16845: PUSH
16846: LD_INT 1
16848: NEG
16849: PUSH
16850: EMPTY
16851: LIST
16852: LIST
16853: PUSH
16854: LD_INT 1
16856: PUSH
16857: LD_INT 0
16859: PUSH
16860: EMPTY
16861: LIST
16862: LIST
16863: PUSH
16864: LD_INT 1
16866: PUSH
16867: LD_INT 1
16869: PUSH
16870: EMPTY
16871: LIST
16872: LIST
16873: PUSH
16874: LD_INT 0
16876: PUSH
16877: LD_INT 1
16879: PUSH
16880: EMPTY
16881: LIST
16882: LIST
16883: PUSH
16884: LD_INT 1
16886: NEG
16887: PUSH
16888: LD_INT 0
16890: PUSH
16891: EMPTY
16892: LIST
16893: LIST
16894: PUSH
16895: LD_INT 1
16897: NEG
16898: PUSH
16899: LD_INT 1
16901: NEG
16902: PUSH
16903: EMPTY
16904: LIST
16905: LIST
16906: PUSH
16907: LD_INT 1
16909: NEG
16910: PUSH
16911: LD_INT 2
16913: NEG
16914: PUSH
16915: EMPTY
16916: LIST
16917: LIST
16918: PUSH
16919: LD_INT 0
16921: PUSH
16922: LD_INT 2
16924: NEG
16925: PUSH
16926: EMPTY
16927: LIST
16928: LIST
16929: PUSH
16930: LD_INT 1
16932: PUSH
16933: LD_INT 1
16935: NEG
16936: PUSH
16937: EMPTY
16938: LIST
16939: LIST
16940: PUSH
16941: LD_INT 2
16943: PUSH
16944: LD_INT 0
16946: PUSH
16947: EMPTY
16948: LIST
16949: LIST
16950: PUSH
16951: LD_INT 2
16953: PUSH
16954: LD_INT 1
16956: PUSH
16957: EMPTY
16958: LIST
16959: LIST
16960: PUSH
16961: LD_INT 2
16963: PUSH
16964: LD_INT 2
16966: PUSH
16967: EMPTY
16968: LIST
16969: LIST
16970: PUSH
16971: LD_INT 1
16973: PUSH
16974: LD_INT 2
16976: PUSH
16977: EMPTY
16978: LIST
16979: LIST
16980: PUSH
16981: LD_INT 0
16983: PUSH
16984: LD_INT 2
16986: PUSH
16987: EMPTY
16988: LIST
16989: LIST
16990: PUSH
16991: LD_INT 1
16993: NEG
16994: PUSH
16995: LD_INT 1
16997: PUSH
16998: EMPTY
16999: LIST
17000: LIST
17001: PUSH
17002: LD_INT 2
17004: NEG
17005: PUSH
17006: LD_INT 0
17008: PUSH
17009: EMPTY
17010: LIST
17011: LIST
17012: PUSH
17013: LD_INT 2
17015: NEG
17016: PUSH
17017: LD_INT 1
17019: NEG
17020: PUSH
17021: EMPTY
17022: LIST
17023: LIST
17024: PUSH
17025: LD_INT 2
17027: NEG
17028: PUSH
17029: LD_INT 2
17031: NEG
17032: PUSH
17033: EMPTY
17034: LIST
17035: LIST
17036: PUSH
17037: EMPTY
17038: LIST
17039: LIST
17040: LIST
17041: LIST
17042: LIST
17043: LIST
17044: LIST
17045: LIST
17046: LIST
17047: LIST
17048: LIST
17049: LIST
17050: LIST
17051: LIST
17052: LIST
17053: LIST
17054: LIST
17055: LIST
17056: LIST
17057: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
17058: LD_ADDR_VAR 0 22
17062: PUSH
17063: LD_INT 0
17065: PUSH
17066: LD_INT 0
17068: PUSH
17069: EMPTY
17070: LIST
17071: LIST
17072: PUSH
17073: LD_INT 0
17075: PUSH
17076: LD_INT 1
17078: NEG
17079: PUSH
17080: EMPTY
17081: LIST
17082: LIST
17083: PUSH
17084: LD_INT 1
17086: PUSH
17087: LD_INT 0
17089: PUSH
17090: EMPTY
17091: LIST
17092: LIST
17093: PUSH
17094: LD_INT 1
17096: PUSH
17097: LD_INT 1
17099: PUSH
17100: EMPTY
17101: LIST
17102: LIST
17103: PUSH
17104: LD_INT 0
17106: PUSH
17107: LD_INT 1
17109: PUSH
17110: EMPTY
17111: LIST
17112: LIST
17113: PUSH
17114: LD_INT 1
17116: NEG
17117: PUSH
17118: LD_INT 0
17120: PUSH
17121: EMPTY
17122: LIST
17123: LIST
17124: PUSH
17125: LD_INT 1
17127: NEG
17128: PUSH
17129: LD_INT 1
17131: NEG
17132: PUSH
17133: EMPTY
17134: LIST
17135: LIST
17136: PUSH
17137: LD_INT 1
17139: NEG
17140: PUSH
17141: LD_INT 2
17143: NEG
17144: PUSH
17145: EMPTY
17146: LIST
17147: LIST
17148: PUSH
17149: LD_INT 0
17151: PUSH
17152: LD_INT 2
17154: NEG
17155: PUSH
17156: EMPTY
17157: LIST
17158: LIST
17159: PUSH
17160: LD_INT 1
17162: PUSH
17163: LD_INT 1
17165: NEG
17166: PUSH
17167: EMPTY
17168: LIST
17169: LIST
17170: PUSH
17171: LD_INT 2
17173: PUSH
17174: LD_INT 0
17176: PUSH
17177: EMPTY
17178: LIST
17179: LIST
17180: PUSH
17181: LD_INT 2
17183: PUSH
17184: LD_INT 1
17186: PUSH
17187: EMPTY
17188: LIST
17189: LIST
17190: PUSH
17191: LD_INT 2
17193: PUSH
17194: LD_INT 2
17196: PUSH
17197: EMPTY
17198: LIST
17199: LIST
17200: PUSH
17201: LD_INT 1
17203: PUSH
17204: LD_INT 2
17206: PUSH
17207: EMPTY
17208: LIST
17209: LIST
17210: PUSH
17211: LD_INT 0
17213: PUSH
17214: LD_INT 2
17216: PUSH
17217: EMPTY
17218: LIST
17219: LIST
17220: PUSH
17221: LD_INT 1
17223: NEG
17224: PUSH
17225: LD_INT 1
17227: PUSH
17228: EMPTY
17229: LIST
17230: LIST
17231: PUSH
17232: LD_INT 2
17234: NEG
17235: PUSH
17236: LD_INT 0
17238: PUSH
17239: EMPTY
17240: LIST
17241: LIST
17242: PUSH
17243: LD_INT 2
17245: NEG
17246: PUSH
17247: LD_INT 1
17249: NEG
17250: PUSH
17251: EMPTY
17252: LIST
17253: LIST
17254: PUSH
17255: LD_INT 2
17257: NEG
17258: PUSH
17259: LD_INT 2
17261: NEG
17262: PUSH
17263: EMPTY
17264: LIST
17265: LIST
17266: PUSH
17267: EMPTY
17268: LIST
17269: LIST
17270: LIST
17271: LIST
17272: LIST
17273: LIST
17274: LIST
17275: LIST
17276: LIST
17277: LIST
17278: LIST
17279: LIST
17280: LIST
17281: LIST
17282: LIST
17283: LIST
17284: LIST
17285: LIST
17286: LIST
17287: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
17288: LD_ADDR_VAR 0 23
17292: PUSH
17293: LD_INT 0
17295: PUSH
17296: LD_INT 0
17298: PUSH
17299: EMPTY
17300: LIST
17301: LIST
17302: PUSH
17303: LD_INT 0
17305: PUSH
17306: LD_INT 1
17308: NEG
17309: PUSH
17310: EMPTY
17311: LIST
17312: LIST
17313: PUSH
17314: LD_INT 1
17316: PUSH
17317: LD_INT 0
17319: PUSH
17320: EMPTY
17321: LIST
17322: LIST
17323: PUSH
17324: LD_INT 1
17326: PUSH
17327: LD_INT 1
17329: PUSH
17330: EMPTY
17331: LIST
17332: LIST
17333: PUSH
17334: LD_INT 0
17336: PUSH
17337: LD_INT 1
17339: PUSH
17340: EMPTY
17341: LIST
17342: LIST
17343: PUSH
17344: LD_INT 1
17346: NEG
17347: PUSH
17348: LD_INT 0
17350: PUSH
17351: EMPTY
17352: LIST
17353: LIST
17354: PUSH
17355: LD_INT 1
17357: NEG
17358: PUSH
17359: LD_INT 1
17361: NEG
17362: PUSH
17363: EMPTY
17364: LIST
17365: LIST
17366: PUSH
17367: LD_INT 1
17369: NEG
17370: PUSH
17371: LD_INT 2
17373: NEG
17374: PUSH
17375: EMPTY
17376: LIST
17377: LIST
17378: PUSH
17379: LD_INT 0
17381: PUSH
17382: LD_INT 2
17384: NEG
17385: PUSH
17386: EMPTY
17387: LIST
17388: LIST
17389: PUSH
17390: LD_INT 1
17392: PUSH
17393: LD_INT 1
17395: NEG
17396: PUSH
17397: EMPTY
17398: LIST
17399: LIST
17400: PUSH
17401: LD_INT 2
17403: PUSH
17404: LD_INT 0
17406: PUSH
17407: EMPTY
17408: LIST
17409: LIST
17410: PUSH
17411: LD_INT 2
17413: PUSH
17414: LD_INT 1
17416: PUSH
17417: EMPTY
17418: LIST
17419: LIST
17420: PUSH
17421: LD_INT 2
17423: PUSH
17424: LD_INT 2
17426: PUSH
17427: EMPTY
17428: LIST
17429: LIST
17430: PUSH
17431: LD_INT 1
17433: PUSH
17434: LD_INT 2
17436: PUSH
17437: EMPTY
17438: LIST
17439: LIST
17440: PUSH
17441: LD_INT 0
17443: PUSH
17444: LD_INT 2
17446: PUSH
17447: EMPTY
17448: LIST
17449: LIST
17450: PUSH
17451: LD_INT 1
17453: NEG
17454: PUSH
17455: LD_INT 1
17457: PUSH
17458: EMPTY
17459: LIST
17460: LIST
17461: PUSH
17462: LD_INT 2
17464: NEG
17465: PUSH
17466: LD_INT 0
17468: PUSH
17469: EMPTY
17470: LIST
17471: LIST
17472: PUSH
17473: LD_INT 2
17475: NEG
17476: PUSH
17477: LD_INT 1
17479: NEG
17480: PUSH
17481: EMPTY
17482: LIST
17483: LIST
17484: PUSH
17485: LD_INT 2
17487: NEG
17488: PUSH
17489: LD_INT 2
17491: NEG
17492: PUSH
17493: EMPTY
17494: LIST
17495: LIST
17496: PUSH
17497: LD_INT 2
17499: NEG
17500: PUSH
17501: LD_INT 3
17503: NEG
17504: PUSH
17505: EMPTY
17506: LIST
17507: LIST
17508: PUSH
17509: LD_INT 1
17511: NEG
17512: PUSH
17513: LD_INT 3
17515: NEG
17516: PUSH
17517: EMPTY
17518: LIST
17519: LIST
17520: PUSH
17521: LD_INT 1
17523: PUSH
17524: LD_INT 2
17526: NEG
17527: PUSH
17528: EMPTY
17529: LIST
17530: LIST
17531: PUSH
17532: LD_INT 2
17534: PUSH
17535: LD_INT 1
17537: NEG
17538: PUSH
17539: EMPTY
17540: LIST
17541: LIST
17542: PUSH
17543: EMPTY
17544: LIST
17545: LIST
17546: LIST
17547: LIST
17548: LIST
17549: LIST
17550: LIST
17551: LIST
17552: LIST
17553: LIST
17554: LIST
17555: LIST
17556: LIST
17557: LIST
17558: LIST
17559: LIST
17560: LIST
17561: LIST
17562: LIST
17563: LIST
17564: LIST
17565: LIST
17566: LIST
17567: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
17568: LD_ADDR_VAR 0 24
17572: PUSH
17573: LD_INT 0
17575: PUSH
17576: LD_INT 0
17578: PUSH
17579: EMPTY
17580: LIST
17581: LIST
17582: PUSH
17583: LD_INT 0
17585: PUSH
17586: LD_INT 1
17588: NEG
17589: PUSH
17590: EMPTY
17591: LIST
17592: LIST
17593: PUSH
17594: LD_INT 1
17596: PUSH
17597: LD_INT 0
17599: PUSH
17600: EMPTY
17601: LIST
17602: LIST
17603: PUSH
17604: LD_INT 1
17606: PUSH
17607: LD_INT 1
17609: PUSH
17610: EMPTY
17611: LIST
17612: LIST
17613: PUSH
17614: LD_INT 0
17616: PUSH
17617: LD_INT 1
17619: PUSH
17620: EMPTY
17621: LIST
17622: LIST
17623: PUSH
17624: LD_INT 1
17626: NEG
17627: PUSH
17628: LD_INT 0
17630: PUSH
17631: EMPTY
17632: LIST
17633: LIST
17634: PUSH
17635: LD_INT 1
17637: NEG
17638: PUSH
17639: LD_INT 1
17641: NEG
17642: PUSH
17643: EMPTY
17644: LIST
17645: LIST
17646: PUSH
17647: LD_INT 1
17649: NEG
17650: PUSH
17651: LD_INT 2
17653: NEG
17654: PUSH
17655: EMPTY
17656: LIST
17657: LIST
17658: PUSH
17659: LD_INT 0
17661: PUSH
17662: LD_INT 2
17664: NEG
17665: PUSH
17666: EMPTY
17667: LIST
17668: LIST
17669: PUSH
17670: LD_INT 1
17672: PUSH
17673: LD_INT 1
17675: NEG
17676: PUSH
17677: EMPTY
17678: LIST
17679: LIST
17680: PUSH
17681: LD_INT 2
17683: PUSH
17684: LD_INT 0
17686: PUSH
17687: EMPTY
17688: LIST
17689: LIST
17690: PUSH
17691: LD_INT 2
17693: PUSH
17694: LD_INT 1
17696: PUSH
17697: EMPTY
17698: LIST
17699: LIST
17700: PUSH
17701: LD_INT 2
17703: PUSH
17704: LD_INT 2
17706: PUSH
17707: EMPTY
17708: LIST
17709: LIST
17710: PUSH
17711: LD_INT 1
17713: PUSH
17714: LD_INT 2
17716: PUSH
17717: EMPTY
17718: LIST
17719: LIST
17720: PUSH
17721: LD_INT 0
17723: PUSH
17724: LD_INT 2
17726: PUSH
17727: EMPTY
17728: LIST
17729: LIST
17730: PUSH
17731: LD_INT 1
17733: NEG
17734: PUSH
17735: LD_INT 1
17737: PUSH
17738: EMPTY
17739: LIST
17740: LIST
17741: PUSH
17742: LD_INT 2
17744: NEG
17745: PUSH
17746: LD_INT 0
17748: PUSH
17749: EMPTY
17750: LIST
17751: LIST
17752: PUSH
17753: LD_INT 2
17755: NEG
17756: PUSH
17757: LD_INT 1
17759: NEG
17760: PUSH
17761: EMPTY
17762: LIST
17763: LIST
17764: PUSH
17765: LD_INT 2
17767: NEG
17768: PUSH
17769: LD_INT 2
17771: NEG
17772: PUSH
17773: EMPTY
17774: LIST
17775: LIST
17776: PUSH
17777: LD_INT 1
17779: PUSH
17780: LD_INT 2
17782: NEG
17783: PUSH
17784: EMPTY
17785: LIST
17786: LIST
17787: PUSH
17788: LD_INT 2
17790: PUSH
17791: LD_INT 1
17793: NEG
17794: PUSH
17795: EMPTY
17796: LIST
17797: LIST
17798: PUSH
17799: LD_INT 3
17801: PUSH
17802: LD_INT 1
17804: PUSH
17805: EMPTY
17806: LIST
17807: LIST
17808: PUSH
17809: LD_INT 3
17811: PUSH
17812: LD_INT 2
17814: PUSH
17815: EMPTY
17816: LIST
17817: LIST
17818: PUSH
17819: EMPTY
17820: LIST
17821: LIST
17822: LIST
17823: LIST
17824: LIST
17825: LIST
17826: LIST
17827: LIST
17828: LIST
17829: LIST
17830: LIST
17831: LIST
17832: LIST
17833: LIST
17834: LIST
17835: LIST
17836: LIST
17837: LIST
17838: LIST
17839: LIST
17840: LIST
17841: LIST
17842: LIST
17843: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
17844: LD_ADDR_VAR 0 25
17848: PUSH
17849: LD_INT 0
17851: PUSH
17852: LD_INT 0
17854: PUSH
17855: EMPTY
17856: LIST
17857: LIST
17858: PUSH
17859: LD_INT 0
17861: PUSH
17862: LD_INT 1
17864: NEG
17865: PUSH
17866: EMPTY
17867: LIST
17868: LIST
17869: PUSH
17870: LD_INT 1
17872: PUSH
17873: LD_INT 0
17875: PUSH
17876: EMPTY
17877: LIST
17878: LIST
17879: PUSH
17880: LD_INT 1
17882: PUSH
17883: LD_INT 1
17885: PUSH
17886: EMPTY
17887: LIST
17888: LIST
17889: PUSH
17890: LD_INT 0
17892: PUSH
17893: LD_INT 1
17895: PUSH
17896: EMPTY
17897: LIST
17898: LIST
17899: PUSH
17900: LD_INT 1
17902: NEG
17903: PUSH
17904: LD_INT 0
17906: PUSH
17907: EMPTY
17908: LIST
17909: LIST
17910: PUSH
17911: LD_INT 1
17913: NEG
17914: PUSH
17915: LD_INT 1
17917: NEG
17918: PUSH
17919: EMPTY
17920: LIST
17921: LIST
17922: PUSH
17923: LD_INT 1
17925: NEG
17926: PUSH
17927: LD_INT 2
17929: NEG
17930: PUSH
17931: EMPTY
17932: LIST
17933: LIST
17934: PUSH
17935: LD_INT 0
17937: PUSH
17938: LD_INT 2
17940: NEG
17941: PUSH
17942: EMPTY
17943: LIST
17944: LIST
17945: PUSH
17946: LD_INT 1
17948: PUSH
17949: LD_INT 1
17951: NEG
17952: PUSH
17953: EMPTY
17954: LIST
17955: LIST
17956: PUSH
17957: LD_INT 2
17959: PUSH
17960: LD_INT 0
17962: PUSH
17963: EMPTY
17964: LIST
17965: LIST
17966: PUSH
17967: LD_INT 2
17969: PUSH
17970: LD_INT 1
17972: PUSH
17973: EMPTY
17974: LIST
17975: LIST
17976: PUSH
17977: LD_INT 2
17979: PUSH
17980: LD_INT 2
17982: PUSH
17983: EMPTY
17984: LIST
17985: LIST
17986: PUSH
17987: LD_INT 1
17989: PUSH
17990: LD_INT 2
17992: PUSH
17993: EMPTY
17994: LIST
17995: LIST
17996: PUSH
17997: LD_INT 0
17999: PUSH
18000: LD_INT 2
18002: PUSH
18003: EMPTY
18004: LIST
18005: LIST
18006: PUSH
18007: LD_INT 1
18009: NEG
18010: PUSH
18011: LD_INT 1
18013: PUSH
18014: EMPTY
18015: LIST
18016: LIST
18017: PUSH
18018: LD_INT 2
18020: NEG
18021: PUSH
18022: LD_INT 0
18024: PUSH
18025: EMPTY
18026: LIST
18027: LIST
18028: PUSH
18029: LD_INT 2
18031: NEG
18032: PUSH
18033: LD_INT 1
18035: NEG
18036: PUSH
18037: EMPTY
18038: LIST
18039: LIST
18040: PUSH
18041: LD_INT 2
18043: NEG
18044: PUSH
18045: LD_INT 2
18047: NEG
18048: PUSH
18049: EMPTY
18050: LIST
18051: LIST
18052: PUSH
18053: LD_INT 3
18055: PUSH
18056: LD_INT 1
18058: PUSH
18059: EMPTY
18060: LIST
18061: LIST
18062: PUSH
18063: LD_INT 3
18065: PUSH
18066: LD_INT 2
18068: PUSH
18069: EMPTY
18070: LIST
18071: LIST
18072: PUSH
18073: LD_INT 2
18075: PUSH
18076: LD_INT 3
18078: PUSH
18079: EMPTY
18080: LIST
18081: LIST
18082: PUSH
18083: LD_INT 1
18085: PUSH
18086: LD_INT 3
18088: PUSH
18089: EMPTY
18090: LIST
18091: LIST
18092: PUSH
18093: EMPTY
18094: LIST
18095: LIST
18096: LIST
18097: LIST
18098: LIST
18099: LIST
18100: LIST
18101: LIST
18102: LIST
18103: LIST
18104: LIST
18105: LIST
18106: LIST
18107: LIST
18108: LIST
18109: LIST
18110: LIST
18111: LIST
18112: LIST
18113: LIST
18114: LIST
18115: LIST
18116: LIST
18117: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
18118: LD_ADDR_VAR 0 26
18122: PUSH
18123: LD_INT 0
18125: PUSH
18126: LD_INT 0
18128: PUSH
18129: EMPTY
18130: LIST
18131: LIST
18132: PUSH
18133: LD_INT 0
18135: PUSH
18136: LD_INT 1
18138: NEG
18139: PUSH
18140: EMPTY
18141: LIST
18142: LIST
18143: PUSH
18144: LD_INT 1
18146: PUSH
18147: LD_INT 0
18149: PUSH
18150: EMPTY
18151: LIST
18152: LIST
18153: PUSH
18154: LD_INT 1
18156: PUSH
18157: LD_INT 1
18159: PUSH
18160: EMPTY
18161: LIST
18162: LIST
18163: PUSH
18164: LD_INT 0
18166: PUSH
18167: LD_INT 1
18169: PUSH
18170: EMPTY
18171: LIST
18172: LIST
18173: PUSH
18174: LD_INT 1
18176: NEG
18177: PUSH
18178: LD_INT 0
18180: PUSH
18181: EMPTY
18182: LIST
18183: LIST
18184: PUSH
18185: LD_INT 1
18187: NEG
18188: PUSH
18189: LD_INT 1
18191: NEG
18192: PUSH
18193: EMPTY
18194: LIST
18195: LIST
18196: PUSH
18197: LD_INT 1
18199: NEG
18200: PUSH
18201: LD_INT 2
18203: NEG
18204: PUSH
18205: EMPTY
18206: LIST
18207: LIST
18208: PUSH
18209: LD_INT 0
18211: PUSH
18212: LD_INT 2
18214: NEG
18215: PUSH
18216: EMPTY
18217: LIST
18218: LIST
18219: PUSH
18220: LD_INT 1
18222: PUSH
18223: LD_INT 1
18225: NEG
18226: PUSH
18227: EMPTY
18228: LIST
18229: LIST
18230: PUSH
18231: LD_INT 2
18233: PUSH
18234: LD_INT 0
18236: PUSH
18237: EMPTY
18238: LIST
18239: LIST
18240: PUSH
18241: LD_INT 2
18243: PUSH
18244: LD_INT 1
18246: PUSH
18247: EMPTY
18248: LIST
18249: LIST
18250: PUSH
18251: LD_INT 2
18253: PUSH
18254: LD_INT 2
18256: PUSH
18257: EMPTY
18258: LIST
18259: LIST
18260: PUSH
18261: LD_INT 1
18263: PUSH
18264: LD_INT 2
18266: PUSH
18267: EMPTY
18268: LIST
18269: LIST
18270: PUSH
18271: LD_INT 0
18273: PUSH
18274: LD_INT 2
18276: PUSH
18277: EMPTY
18278: LIST
18279: LIST
18280: PUSH
18281: LD_INT 1
18283: NEG
18284: PUSH
18285: LD_INT 1
18287: PUSH
18288: EMPTY
18289: LIST
18290: LIST
18291: PUSH
18292: LD_INT 2
18294: NEG
18295: PUSH
18296: LD_INT 0
18298: PUSH
18299: EMPTY
18300: LIST
18301: LIST
18302: PUSH
18303: LD_INT 2
18305: NEG
18306: PUSH
18307: LD_INT 1
18309: NEG
18310: PUSH
18311: EMPTY
18312: LIST
18313: LIST
18314: PUSH
18315: LD_INT 2
18317: NEG
18318: PUSH
18319: LD_INT 2
18321: NEG
18322: PUSH
18323: EMPTY
18324: LIST
18325: LIST
18326: PUSH
18327: LD_INT 2
18329: PUSH
18330: LD_INT 3
18332: PUSH
18333: EMPTY
18334: LIST
18335: LIST
18336: PUSH
18337: LD_INT 1
18339: PUSH
18340: LD_INT 3
18342: PUSH
18343: EMPTY
18344: LIST
18345: LIST
18346: PUSH
18347: LD_INT 1
18349: NEG
18350: PUSH
18351: LD_INT 2
18353: PUSH
18354: EMPTY
18355: LIST
18356: LIST
18357: PUSH
18358: LD_INT 2
18360: NEG
18361: PUSH
18362: LD_INT 1
18364: PUSH
18365: EMPTY
18366: LIST
18367: LIST
18368: PUSH
18369: EMPTY
18370: LIST
18371: LIST
18372: LIST
18373: LIST
18374: LIST
18375: LIST
18376: LIST
18377: LIST
18378: LIST
18379: LIST
18380: LIST
18381: LIST
18382: LIST
18383: LIST
18384: LIST
18385: LIST
18386: LIST
18387: LIST
18388: LIST
18389: LIST
18390: LIST
18391: LIST
18392: LIST
18393: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
18394: LD_ADDR_VAR 0 27
18398: PUSH
18399: LD_INT 0
18401: PUSH
18402: LD_INT 0
18404: PUSH
18405: EMPTY
18406: LIST
18407: LIST
18408: PUSH
18409: LD_INT 0
18411: PUSH
18412: LD_INT 1
18414: NEG
18415: PUSH
18416: EMPTY
18417: LIST
18418: LIST
18419: PUSH
18420: LD_INT 1
18422: PUSH
18423: LD_INT 0
18425: PUSH
18426: EMPTY
18427: LIST
18428: LIST
18429: PUSH
18430: LD_INT 1
18432: PUSH
18433: LD_INT 1
18435: PUSH
18436: EMPTY
18437: LIST
18438: LIST
18439: PUSH
18440: LD_INT 0
18442: PUSH
18443: LD_INT 1
18445: PUSH
18446: EMPTY
18447: LIST
18448: LIST
18449: PUSH
18450: LD_INT 1
18452: NEG
18453: PUSH
18454: LD_INT 0
18456: PUSH
18457: EMPTY
18458: LIST
18459: LIST
18460: PUSH
18461: LD_INT 1
18463: NEG
18464: PUSH
18465: LD_INT 1
18467: NEG
18468: PUSH
18469: EMPTY
18470: LIST
18471: LIST
18472: PUSH
18473: LD_INT 1
18475: NEG
18476: PUSH
18477: LD_INT 2
18479: NEG
18480: PUSH
18481: EMPTY
18482: LIST
18483: LIST
18484: PUSH
18485: LD_INT 0
18487: PUSH
18488: LD_INT 2
18490: NEG
18491: PUSH
18492: EMPTY
18493: LIST
18494: LIST
18495: PUSH
18496: LD_INT 1
18498: PUSH
18499: LD_INT 1
18501: NEG
18502: PUSH
18503: EMPTY
18504: LIST
18505: LIST
18506: PUSH
18507: LD_INT 2
18509: PUSH
18510: LD_INT 0
18512: PUSH
18513: EMPTY
18514: LIST
18515: LIST
18516: PUSH
18517: LD_INT 2
18519: PUSH
18520: LD_INT 1
18522: PUSH
18523: EMPTY
18524: LIST
18525: LIST
18526: PUSH
18527: LD_INT 2
18529: PUSH
18530: LD_INT 2
18532: PUSH
18533: EMPTY
18534: LIST
18535: LIST
18536: PUSH
18537: LD_INT 1
18539: PUSH
18540: LD_INT 2
18542: PUSH
18543: EMPTY
18544: LIST
18545: LIST
18546: PUSH
18547: LD_INT 0
18549: PUSH
18550: LD_INT 2
18552: PUSH
18553: EMPTY
18554: LIST
18555: LIST
18556: PUSH
18557: LD_INT 1
18559: NEG
18560: PUSH
18561: LD_INT 1
18563: PUSH
18564: EMPTY
18565: LIST
18566: LIST
18567: PUSH
18568: LD_INT 2
18570: NEG
18571: PUSH
18572: LD_INT 0
18574: PUSH
18575: EMPTY
18576: LIST
18577: LIST
18578: PUSH
18579: LD_INT 2
18581: NEG
18582: PUSH
18583: LD_INT 1
18585: NEG
18586: PUSH
18587: EMPTY
18588: LIST
18589: LIST
18590: PUSH
18591: LD_INT 2
18593: NEG
18594: PUSH
18595: LD_INT 2
18597: NEG
18598: PUSH
18599: EMPTY
18600: LIST
18601: LIST
18602: PUSH
18603: LD_INT 1
18605: NEG
18606: PUSH
18607: LD_INT 2
18609: PUSH
18610: EMPTY
18611: LIST
18612: LIST
18613: PUSH
18614: LD_INT 2
18616: NEG
18617: PUSH
18618: LD_INT 1
18620: PUSH
18621: EMPTY
18622: LIST
18623: LIST
18624: PUSH
18625: LD_INT 3
18627: NEG
18628: PUSH
18629: LD_INT 1
18631: NEG
18632: PUSH
18633: EMPTY
18634: LIST
18635: LIST
18636: PUSH
18637: LD_INT 3
18639: NEG
18640: PUSH
18641: LD_INT 2
18643: NEG
18644: PUSH
18645: EMPTY
18646: LIST
18647: LIST
18648: PUSH
18649: EMPTY
18650: LIST
18651: LIST
18652: LIST
18653: LIST
18654: LIST
18655: LIST
18656: LIST
18657: LIST
18658: LIST
18659: LIST
18660: LIST
18661: LIST
18662: LIST
18663: LIST
18664: LIST
18665: LIST
18666: LIST
18667: LIST
18668: LIST
18669: LIST
18670: LIST
18671: LIST
18672: LIST
18673: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
18674: LD_ADDR_VAR 0 28
18678: PUSH
18679: LD_INT 0
18681: PUSH
18682: LD_INT 0
18684: PUSH
18685: EMPTY
18686: LIST
18687: LIST
18688: PUSH
18689: LD_INT 0
18691: PUSH
18692: LD_INT 1
18694: NEG
18695: PUSH
18696: EMPTY
18697: LIST
18698: LIST
18699: PUSH
18700: LD_INT 1
18702: PUSH
18703: LD_INT 0
18705: PUSH
18706: EMPTY
18707: LIST
18708: LIST
18709: PUSH
18710: LD_INT 1
18712: PUSH
18713: LD_INT 1
18715: PUSH
18716: EMPTY
18717: LIST
18718: LIST
18719: PUSH
18720: LD_INT 0
18722: PUSH
18723: LD_INT 1
18725: PUSH
18726: EMPTY
18727: LIST
18728: LIST
18729: PUSH
18730: LD_INT 1
18732: NEG
18733: PUSH
18734: LD_INT 0
18736: PUSH
18737: EMPTY
18738: LIST
18739: LIST
18740: PUSH
18741: LD_INT 1
18743: NEG
18744: PUSH
18745: LD_INT 1
18747: NEG
18748: PUSH
18749: EMPTY
18750: LIST
18751: LIST
18752: PUSH
18753: LD_INT 1
18755: NEG
18756: PUSH
18757: LD_INT 2
18759: NEG
18760: PUSH
18761: EMPTY
18762: LIST
18763: LIST
18764: PUSH
18765: LD_INT 0
18767: PUSH
18768: LD_INT 2
18770: NEG
18771: PUSH
18772: EMPTY
18773: LIST
18774: LIST
18775: PUSH
18776: LD_INT 1
18778: PUSH
18779: LD_INT 1
18781: NEG
18782: PUSH
18783: EMPTY
18784: LIST
18785: LIST
18786: PUSH
18787: LD_INT 2
18789: PUSH
18790: LD_INT 0
18792: PUSH
18793: EMPTY
18794: LIST
18795: LIST
18796: PUSH
18797: LD_INT 2
18799: PUSH
18800: LD_INT 1
18802: PUSH
18803: EMPTY
18804: LIST
18805: LIST
18806: PUSH
18807: LD_INT 2
18809: PUSH
18810: LD_INT 2
18812: PUSH
18813: EMPTY
18814: LIST
18815: LIST
18816: PUSH
18817: LD_INT 1
18819: PUSH
18820: LD_INT 2
18822: PUSH
18823: EMPTY
18824: LIST
18825: LIST
18826: PUSH
18827: LD_INT 0
18829: PUSH
18830: LD_INT 2
18832: PUSH
18833: EMPTY
18834: LIST
18835: LIST
18836: PUSH
18837: LD_INT 1
18839: NEG
18840: PUSH
18841: LD_INT 1
18843: PUSH
18844: EMPTY
18845: LIST
18846: LIST
18847: PUSH
18848: LD_INT 2
18850: NEG
18851: PUSH
18852: LD_INT 0
18854: PUSH
18855: EMPTY
18856: LIST
18857: LIST
18858: PUSH
18859: LD_INT 2
18861: NEG
18862: PUSH
18863: LD_INT 1
18865: NEG
18866: PUSH
18867: EMPTY
18868: LIST
18869: LIST
18870: PUSH
18871: LD_INT 2
18873: NEG
18874: PUSH
18875: LD_INT 2
18877: NEG
18878: PUSH
18879: EMPTY
18880: LIST
18881: LIST
18882: PUSH
18883: LD_INT 2
18885: NEG
18886: PUSH
18887: LD_INT 3
18889: NEG
18890: PUSH
18891: EMPTY
18892: LIST
18893: LIST
18894: PUSH
18895: LD_INT 1
18897: NEG
18898: PUSH
18899: LD_INT 3
18901: NEG
18902: PUSH
18903: EMPTY
18904: LIST
18905: LIST
18906: PUSH
18907: LD_INT 3
18909: NEG
18910: PUSH
18911: LD_INT 1
18913: NEG
18914: PUSH
18915: EMPTY
18916: LIST
18917: LIST
18918: PUSH
18919: LD_INT 3
18921: NEG
18922: PUSH
18923: LD_INT 2
18925: NEG
18926: PUSH
18927: EMPTY
18928: LIST
18929: LIST
18930: PUSH
18931: EMPTY
18932: LIST
18933: LIST
18934: LIST
18935: LIST
18936: LIST
18937: LIST
18938: LIST
18939: LIST
18940: LIST
18941: LIST
18942: LIST
18943: LIST
18944: LIST
18945: LIST
18946: LIST
18947: LIST
18948: LIST
18949: LIST
18950: LIST
18951: LIST
18952: LIST
18953: LIST
18954: LIST
18955: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
18956: LD_ADDR_VAR 0 29
18960: PUSH
18961: LD_INT 0
18963: PUSH
18964: LD_INT 0
18966: PUSH
18967: EMPTY
18968: LIST
18969: LIST
18970: PUSH
18971: LD_INT 0
18973: PUSH
18974: LD_INT 1
18976: NEG
18977: PUSH
18978: EMPTY
18979: LIST
18980: LIST
18981: PUSH
18982: LD_INT 1
18984: PUSH
18985: LD_INT 0
18987: PUSH
18988: EMPTY
18989: LIST
18990: LIST
18991: PUSH
18992: LD_INT 1
18994: PUSH
18995: LD_INT 1
18997: PUSH
18998: EMPTY
18999: LIST
19000: LIST
19001: PUSH
19002: LD_INT 0
19004: PUSH
19005: LD_INT 1
19007: PUSH
19008: EMPTY
19009: LIST
19010: LIST
19011: PUSH
19012: LD_INT 1
19014: NEG
19015: PUSH
19016: LD_INT 0
19018: PUSH
19019: EMPTY
19020: LIST
19021: LIST
19022: PUSH
19023: LD_INT 1
19025: NEG
19026: PUSH
19027: LD_INT 1
19029: NEG
19030: PUSH
19031: EMPTY
19032: LIST
19033: LIST
19034: PUSH
19035: LD_INT 1
19037: NEG
19038: PUSH
19039: LD_INT 2
19041: NEG
19042: PUSH
19043: EMPTY
19044: LIST
19045: LIST
19046: PUSH
19047: LD_INT 0
19049: PUSH
19050: LD_INT 2
19052: NEG
19053: PUSH
19054: EMPTY
19055: LIST
19056: LIST
19057: PUSH
19058: LD_INT 1
19060: PUSH
19061: LD_INT 1
19063: NEG
19064: PUSH
19065: EMPTY
19066: LIST
19067: LIST
19068: PUSH
19069: LD_INT 2
19071: PUSH
19072: LD_INT 0
19074: PUSH
19075: EMPTY
19076: LIST
19077: LIST
19078: PUSH
19079: LD_INT 2
19081: PUSH
19082: LD_INT 1
19084: PUSH
19085: EMPTY
19086: LIST
19087: LIST
19088: PUSH
19089: LD_INT 1
19091: PUSH
19092: LD_INT 2
19094: PUSH
19095: EMPTY
19096: LIST
19097: LIST
19098: PUSH
19099: LD_INT 0
19101: PUSH
19102: LD_INT 2
19104: PUSH
19105: EMPTY
19106: LIST
19107: LIST
19108: PUSH
19109: LD_INT 1
19111: NEG
19112: PUSH
19113: LD_INT 1
19115: PUSH
19116: EMPTY
19117: LIST
19118: LIST
19119: PUSH
19120: LD_INT 2
19122: NEG
19123: PUSH
19124: LD_INT 1
19126: NEG
19127: PUSH
19128: EMPTY
19129: LIST
19130: LIST
19131: PUSH
19132: LD_INT 2
19134: NEG
19135: PUSH
19136: LD_INT 2
19138: NEG
19139: PUSH
19140: EMPTY
19141: LIST
19142: LIST
19143: PUSH
19144: LD_INT 2
19146: NEG
19147: PUSH
19148: LD_INT 3
19150: NEG
19151: PUSH
19152: EMPTY
19153: LIST
19154: LIST
19155: PUSH
19156: LD_INT 2
19158: PUSH
19159: LD_INT 1
19161: NEG
19162: PUSH
19163: EMPTY
19164: LIST
19165: LIST
19166: PUSH
19167: LD_INT 3
19169: PUSH
19170: LD_INT 1
19172: PUSH
19173: EMPTY
19174: LIST
19175: LIST
19176: PUSH
19177: LD_INT 1
19179: PUSH
19180: LD_INT 3
19182: PUSH
19183: EMPTY
19184: LIST
19185: LIST
19186: PUSH
19187: LD_INT 1
19189: NEG
19190: PUSH
19191: LD_INT 2
19193: PUSH
19194: EMPTY
19195: LIST
19196: LIST
19197: PUSH
19198: LD_INT 3
19200: NEG
19201: PUSH
19202: LD_INT 2
19204: NEG
19205: PUSH
19206: EMPTY
19207: LIST
19208: LIST
19209: PUSH
19210: EMPTY
19211: LIST
19212: LIST
19213: LIST
19214: LIST
19215: LIST
19216: LIST
19217: LIST
19218: LIST
19219: LIST
19220: LIST
19221: LIST
19222: LIST
19223: LIST
19224: LIST
19225: LIST
19226: LIST
19227: LIST
19228: LIST
19229: LIST
19230: LIST
19231: LIST
19232: LIST
19233: LIST
19234: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
19235: LD_ADDR_VAR 0 30
19239: PUSH
19240: LD_INT 0
19242: PUSH
19243: LD_INT 0
19245: PUSH
19246: EMPTY
19247: LIST
19248: LIST
19249: PUSH
19250: LD_INT 0
19252: PUSH
19253: LD_INT 1
19255: NEG
19256: PUSH
19257: EMPTY
19258: LIST
19259: LIST
19260: PUSH
19261: LD_INT 1
19263: PUSH
19264: LD_INT 0
19266: PUSH
19267: EMPTY
19268: LIST
19269: LIST
19270: PUSH
19271: LD_INT 1
19273: PUSH
19274: LD_INT 1
19276: PUSH
19277: EMPTY
19278: LIST
19279: LIST
19280: PUSH
19281: LD_INT 0
19283: PUSH
19284: LD_INT 1
19286: PUSH
19287: EMPTY
19288: LIST
19289: LIST
19290: PUSH
19291: LD_INT 1
19293: NEG
19294: PUSH
19295: LD_INT 0
19297: PUSH
19298: EMPTY
19299: LIST
19300: LIST
19301: PUSH
19302: LD_INT 1
19304: NEG
19305: PUSH
19306: LD_INT 1
19308: NEG
19309: PUSH
19310: EMPTY
19311: LIST
19312: LIST
19313: PUSH
19314: LD_INT 1
19316: NEG
19317: PUSH
19318: LD_INT 2
19320: NEG
19321: PUSH
19322: EMPTY
19323: LIST
19324: LIST
19325: PUSH
19326: LD_INT 0
19328: PUSH
19329: LD_INT 2
19331: NEG
19332: PUSH
19333: EMPTY
19334: LIST
19335: LIST
19336: PUSH
19337: LD_INT 1
19339: PUSH
19340: LD_INT 1
19342: NEG
19343: PUSH
19344: EMPTY
19345: LIST
19346: LIST
19347: PUSH
19348: LD_INT 2
19350: PUSH
19351: LD_INT 0
19353: PUSH
19354: EMPTY
19355: LIST
19356: LIST
19357: PUSH
19358: LD_INT 2
19360: PUSH
19361: LD_INT 1
19363: PUSH
19364: EMPTY
19365: LIST
19366: LIST
19367: PUSH
19368: LD_INT 2
19370: PUSH
19371: LD_INT 2
19373: PUSH
19374: EMPTY
19375: LIST
19376: LIST
19377: PUSH
19378: LD_INT 1
19380: PUSH
19381: LD_INT 2
19383: PUSH
19384: EMPTY
19385: LIST
19386: LIST
19387: PUSH
19388: LD_INT 1
19390: NEG
19391: PUSH
19392: LD_INT 1
19394: PUSH
19395: EMPTY
19396: LIST
19397: LIST
19398: PUSH
19399: LD_INT 2
19401: NEG
19402: PUSH
19403: LD_INT 0
19405: PUSH
19406: EMPTY
19407: LIST
19408: LIST
19409: PUSH
19410: LD_INT 2
19412: NEG
19413: PUSH
19414: LD_INT 1
19416: NEG
19417: PUSH
19418: EMPTY
19419: LIST
19420: LIST
19421: PUSH
19422: LD_INT 1
19424: NEG
19425: PUSH
19426: LD_INT 3
19428: NEG
19429: PUSH
19430: EMPTY
19431: LIST
19432: LIST
19433: PUSH
19434: LD_INT 1
19436: PUSH
19437: LD_INT 2
19439: NEG
19440: PUSH
19441: EMPTY
19442: LIST
19443: LIST
19444: PUSH
19445: LD_INT 3
19447: PUSH
19448: LD_INT 2
19450: PUSH
19451: EMPTY
19452: LIST
19453: LIST
19454: PUSH
19455: LD_INT 2
19457: PUSH
19458: LD_INT 3
19460: PUSH
19461: EMPTY
19462: LIST
19463: LIST
19464: PUSH
19465: LD_INT 2
19467: NEG
19468: PUSH
19469: LD_INT 1
19471: PUSH
19472: EMPTY
19473: LIST
19474: LIST
19475: PUSH
19476: LD_INT 3
19478: NEG
19479: PUSH
19480: LD_INT 1
19482: NEG
19483: PUSH
19484: EMPTY
19485: LIST
19486: LIST
19487: PUSH
19488: EMPTY
19489: LIST
19490: LIST
19491: LIST
19492: LIST
19493: LIST
19494: LIST
19495: LIST
19496: LIST
19497: LIST
19498: LIST
19499: LIST
19500: LIST
19501: LIST
19502: LIST
19503: LIST
19504: LIST
19505: LIST
19506: LIST
19507: LIST
19508: LIST
19509: LIST
19510: LIST
19511: LIST
19512: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
19513: LD_ADDR_VAR 0 31
19517: PUSH
19518: LD_INT 0
19520: PUSH
19521: LD_INT 0
19523: PUSH
19524: EMPTY
19525: LIST
19526: LIST
19527: PUSH
19528: LD_INT 0
19530: PUSH
19531: LD_INT 1
19533: NEG
19534: PUSH
19535: EMPTY
19536: LIST
19537: LIST
19538: PUSH
19539: LD_INT 1
19541: PUSH
19542: LD_INT 0
19544: PUSH
19545: EMPTY
19546: LIST
19547: LIST
19548: PUSH
19549: LD_INT 1
19551: PUSH
19552: LD_INT 1
19554: PUSH
19555: EMPTY
19556: LIST
19557: LIST
19558: PUSH
19559: LD_INT 0
19561: PUSH
19562: LD_INT 1
19564: PUSH
19565: EMPTY
19566: LIST
19567: LIST
19568: PUSH
19569: LD_INT 1
19571: NEG
19572: PUSH
19573: LD_INT 0
19575: PUSH
19576: EMPTY
19577: LIST
19578: LIST
19579: PUSH
19580: LD_INT 1
19582: NEG
19583: PUSH
19584: LD_INT 1
19586: NEG
19587: PUSH
19588: EMPTY
19589: LIST
19590: LIST
19591: PUSH
19592: LD_INT 1
19594: NEG
19595: PUSH
19596: LD_INT 2
19598: NEG
19599: PUSH
19600: EMPTY
19601: LIST
19602: LIST
19603: PUSH
19604: LD_INT 1
19606: PUSH
19607: LD_INT 1
19609: NEG
19610: PUSH
19611: EMPTY
19612: LIST
19613: LIST
19614: PUSH
19615: LD_INT 2
19617: PUSH
19618: LD_INT 0
19620: PUSH
19621: EMPTY
19622: LIST
19623: LIST
19624: PUSH
19625: LD_INT 2
19627: PUSH
19628: LD_INT 1
19630: PUSH
19631: EMPTY
19632: LIST
19633: LIST
19634: PUSH
19635: LD_INT 2
19637: PUSH
19638: LD_INT 2
19640: PUSH
19641: EMPTY
19642: LIST
19643: LIST
19644: PUSH
19645: LD_INT 1
19647: PUSH
19648: LD_INT 2
19650: PUSH
19651: EMPTY
19652: LIST
19653: LIST
19654: PUSH
19655: LD_INT 0
19657: PUSH
19658: LD_INT 2
19660: PUSH
19661: EMPTY
19662: LIST
19663: LIST
19664: PUSH
19665: LD_INT 1
19667: NEG
19668: PUSH
19669: LD_INT 1
19671: PUSH
19672: EMPTY
19673: LIST
19674: LIST
19675: PUSH
19676: LD_INT 2
19678: NEG
19679: PUSH
19680: LD_INT 1
19682: NEG
19683: PUSH
19684: EMPTY
19685: LIST
19686: LIST
19687: PUSH
19688: LD_INT 2
19690: NEG
19691: PUSH
19692: LD_INT 2
19694: NEG
19695: PUSH
19696: EMPTY
19697: LIST
19698: LIST
19699: PUSH
19700: LD_INT 2
19702: NEG
19703: PUSH
19704: LD_INT 3
19706: NEG
19707: PUSH
19708: EMPTY
19709: LIST
19710: LIST
19711: PUSH
19712: LD_INT 2
19714: PUSH
19715: LD_INT 1
19717: NEG
19718: PUSH
19719: EMPTY
19720: LIST
19721: LIST
19722: PUSH
19723: LD_INT 3
19725: PUSH
19726: LD_INT 1
19728: PUSH
19729: EMPTY
19730: LIST
19731: LIST
19732: PUSH
19733: LD_INT 1
19735: PUSH
19736: LD_INT 3
19738: PUSH
19739: EMPTY
19740: LIST
19741: LIST
19742: PUSH
19743: LD_INT 1
19745: NEG
19746: PUSH
19747: LD_INT 2
19749: PUSH
19750: EMPTY
19751: LIST
19752: LIST
19753: PUSH
19754: LD_INT 3
19756: NEG
19757: PUSH
19758: LD_INT 2
19760: NEG
19761: PUSH
19762: EMPTY
19763: LIST
19764: LIST
19765: PUSH
19766: EMPTY
19767: LIST
19768: LIST
19769: LIST
19770: LIST
19771: LIST
19772: LIST
19773: LIST
19774: LIST
19775: LIST
19776: LIST
19777: LIST
19778: LIST
19779: LIST
19780: LIST
19781: LIST
19782: LIST
19783: LIST
19784: LIST
19785: LIST
19786: LIST
19787: LIST
19788: LIST
19789: LIST
19790: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
19791: LD_ADDR_VAR 0 32
19795: PUSH
19796: LD_INT 0
19798: PUSH
19799: LD_INT 0
19801: PUSH
19802: EMPTY
19803: LIST
19804: LIST
19805: PUSH
19806: LD_INT 0
19808: PUSH
19809: LD_INT 1
19811: NEG
19812: PUSH
19813: EMPTY
19814: LIST
19815: LIST
19816: PUSH
19817: LD_INT 1
19819: PUSH
19820: LD_INT 0
19822: PUSH
19823: EMPTY
19824: LIST
19825: LIST
19826: PUSH
19827: LD_INT 1
19829: PUSH
19830: LD_INT 1
19832: PUSH
19833: EMPTY
19834: LIST
19835: LIST
19836: PUSH
19837: LD_INT 0
19839: PUSH
19840: LD_INT 1
19842: PUSH
19843: EMPTY
19844: LIST
19845: LIST
19846: PUSH
19847: LD_INT 1
19849: NEG
19850: PUSH
19851: LD_INT 0
19853: PUSH
19854: EMPTY
19855: LIST
19856: LIST
19857: PUSH
19858: LD_INT 1
19860: NEG
19861: PUSH
19862: LD_INT 1
19864: NEG
19865: PUSH
19866: EMPTY
19867: LIST
19868: LIST
19869: PUSH
19870: LD_INT 1
19872: NEG
19873: PUSH
19874: LD_INT 2
19876: NEG
19877: PUSH
19878: EMPTY
19879: LIST
19880: LIST
19881: PUSH
19882: LD_INT 0
19884: PUSH
19885: LD_INT 2
19887: NEG
19888: PUSH
19889: EMPTY
19890: LIST
19891: LIST
19892: PUSH
19893: LD_INT 1
19895: PUSH
19896: LD_INT 1
19898: NEG
19899: PUSH
19900: EMPTY
19901: LIST
19902: LIST
19903: PUSH
19904: LD_INT 2
19906: PUSH
19907: LD_INT 1
19909: PUSH
19910: EMPTY
19911: LIST
19912: LIST
19913: PUSH
19914: LD_INT 2
19916: PUSH
19917: LD_INT 2
19919: PUSH
19920: EMPTY
19921: LIST
19922: LIST
19923: PUSH
19924: LD_INT 1
19926: PUSH
19927: LD_INT 2
19929: PUSH
19930: EMPTY
19931: LIST
19932: LIST
19933: PUSH
19934: LD_INT 0
19936: PUSH
19937: LD_INT 2
19939: PUSH
19940: EMPTY
19941: LIST
19942: LIST
19943: PUSH
19944: LD_INT 1
19946: NEG
19947: PUSH
19948: LD_INT 1
19950: PUSH
19951: EMPTY
19952: LIST
19953: LIST
19954: PUSH
19955: LD_INT 2
19957: NEG
19958: PUSH
19959: LD_INT 0
19961: PUSH
19962: EMPTY
19963: LIST
19964: LIST
19965: PUSH
19966: LD_INT 2
19968: NEG
19969: PUSH
19970: LD_INT 1
19972: NEG
19973: PUSH
19974: EMPTY
19975: LIST
19976: LIST
19977: PUSH
19978: LD_INT 1
19980: NEG
19981: PUSH
19982: LD_INT 3
19984: NEG
19985: PUSH
19986: EMPTY
19987: LIST
19988: LIST
19989: PUSH
19990: LD_INT 1
19992: PUSH
19993: LD_INT 2
19995: NEG
19996: PUSH
19997: EMPTY
19998: LIST
19999: LIST
20000: PUSH
20001: LD_INT 3
20003: PUSH
20004: LD_INT 2
20006: PUSH
20007: EMPTY
20008: LIST
20009: LIST
20010: PUSH
20011: LD_INT 2
20013: PUSH
20014: LD_INT 3
20016: PUSH
20017: EMPTY
20018: LIST
20019: LIST
20020: PUSH
20021: LD_INT 2
20023: NEG
20024: PUSH
20025: LD_INT 1
20027: PUSH
20028: EMPTY
20029: LIST
20030: LIST
20031: PUSH
20032: LD_INT 3
20034: NEG
20035: PUSH
20036: LD_INT 1
20038: NEG
20039: PUSH
20040: EMPTY
20041: LIST
20042: LIST
20043: PUSH
20044: EMPTY
20045: LIST
20046: LIST
20047: LIST
20048: LIST
20049: LIST
20050: LIST
20051: LIST
20052: LIST
20053: LIST
20054: LIST
20055: LIST
20056: LIST
20057: LIST
20058: LIST
20059: LIST
20060: LIST
20061: LIST
20062: LIST
20063: LIST
20064: LIST
20065: LIST
20066: LIST
20067: LIST
20068: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
20069: LD_ADDR_VAR 0 33
20073: PUSH
20074: LD_INT 0
20076: PUSH
20077: LD_INT 0
20079: PUSH
20080: EMPTY
20081: LIST
20082: LIST
20083: PUSH
20084: LD_INT 0
20086: PUSH
20087: LD_INT 1
20089: NEG
20090: PUSH
20091: EMPTY
20092: LIST
20093: LIST
20094: PUSH
20095: LD_INT 1
20097: PUSH
20098: LD_INT 0
20100: PUSH
20101: EMPTY
20102: LIST
20103: LIST
20104: PUSH
20105: LD_INT 1
20107: PUSH
20108: LD_INT 1
20110: PUSH
20111: EMPTY
20112: LIST
20113: LIST
20114: PUSH
20115: LD_INT 0
20117: PUSH
20118: LD_INT 1
20120: PUSH
20121: EMPTY
20122: LIST
20123: LIST
20124: PUSH
20125: LD_INT 1
20127: NEG
20128: PUSH
20129: LD_INT 0
20131: PUSH
20132: EMPTY
20133: LIST
20134: LIST
20135: PUSH
20136: LD_INT 1
20138: NEG
20139: PUSH
20140: LD_INT 1
20142: NEG
20143: PUSH
20144: EMPTY
20145: LIST
20146: LIST
20147: PUSH
20148: LD_INT 1
20150: NEG
20151: PUSH
20152: LD_INT 2
20154: NEG
20155: PUSH
20156: EMPTY
20157: LIST
20158: LIST
20159: PUSH
20160: LD_INT 1
20162: PUSH
20163: LD_INT 1
20165: NEG
20166: PUSH
20167: EMPTY
20168: LIST
20169: LIST
20170: PUSH
20171: LD_INT 2
20173: PUSH
20174: LD_INT 0
20176: PUSH
20177: EMPTY
20178: LIST
20179: LIST
20180: PUSH
20181: LD_INT 2
20183: PUSH
20184: LD_INT 1
20186: PUSH
20187: EMPTY
20188: LIST
20189: LIST
20190: PUSH
20191: LD_INT 1
20193: PUSH
20194: LD_INT 2
20196: PUSH
20197: EMPTY
20198: LIST
20199: LIST
20200: PUSH
20201: LD_INT 0
20203: PUSH
20204: LD_INT 2
20206: PUSH
20207: EMPTY
20208: LIST
20209: LIST
20210: PUSH
20211: LD_INT 1
20213: NEG
20214: PUSH
20215: LD_INT 1
20217: PUSH
20218: EMPTY
20219: LIST
20220: LIST
20221: PUSH
20222: LD_INT 2
20224: NEG
20225: PUSH
20226: LD_INT 0
20228: PUSH
20229: EMPTY
20230: LIST
20231: LIST
20232: PUSH
20233: LD_INT 2
20235: NEG
20236: PUSH
20237: LD_INT 1
20239: NEG
20240: PUSH
20241: EMPTY
20242: LIST
20243: LIST
20244: PUSH
20245: LD_INT 2
20247: NEG
20248: PUSH
20249: LD_INT 2
20251: NEG
20252: PUSH
20253: EMPTY
20254: LIST
20255: LIST
20256: PUSH
20257: LD_INT 2
20259: NEG
20260: PUSH
20261: LD_INT 3
20263: NEG
20264: PUSH
20265: EMPTY
20266: LIST
20267: LIST
20268: PUSH
20269: LD_INT 2
20271: PUSH
20272: LD_INT 1
20274: NEG
20275: PUSH
20276: EMPTY
20277: LIST
20278: LIST
20279: PUSH
20280: LD_INT 3
20282: PUSH
20283: LD_INT 1
20285: PUSH
20286: EMPTY
20287: LIST
20288: LIST
20289: PUSH
20290: LD_INT 1
20292: PUSH
20293: LD_INT 3
20295: PUSH
20296: EMPTY
20297: LIST
20298: LIST
20299: PUSH
20300: LD_INT 1
20302: NEG
20303: PUSH
20304: LD_INT 2
20306: PUSH
20307: EMPTY
20308: LIST
20309: LIST
20310: PUSH
20311: LD_INT 3
20313: NEG
20314: PUSH
20315: LD_INT 2
20317: NEG
20318: PUSH
20319: EMPTY
20320: LIST
20321: LIST
20322: PUSH
20323: EMPTY
20324: LIST
20325: LIST
20326: LIST
20327: LIST
20328: LIST
20329: LIST
20330: LIST
20331: LIST
20332: LIST
20333: LIST
20334: LIST
20335: LIST
20336: LIST
20337: LIST
20338: LIST
20339: LIST
20340: LIST
20341: LIST
20342: LIST
20343: LIST
20344: LIST
20345: LIST
20346: LIST
20347: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
20348: LD_ADDR_VAR 0 34
20352: PUSH
20353: LD_INT 0
20355: PUSH
20356: LD_INT 0
20358: PUSH
20359: EMPTY
20360: LIST
20361: LIST
20362: PUSH
20363: LD_INT 0
20365: PUSH
20366: LD_INT 1
20368: NEG
20369: PUSH
20370: EMPTY
20371: LIST
20372: LIST
20373: PUSH
20374: LD_INT 1
20376: PUSH
20377: LD_INT 0
20379: PUSH
20380: EMPTY
20381: LIST
20382: LIST
20383: PUSH
20384: LD_INT 1
20386: PUSH
20387: LD_INT 1
20389: PUSH
20390: EMPTY
20391: LIST
20392: LIST
20393: PUSH
20394: LD_INT 0
20396: PUSH
20397: LD_INT 1
20399: PUSH
20400: EMPTY
20401: LIST
20402: LIST
20403: PUSH
20404: LD_INT 1
20406: NEG
20407: PUSH
20408: LD_INT 0
20410: PUSH
20411: EMPTY
20412: LIST
20413: LIST
20414: PUSH
20415: LD_INT 1
20417: NEG
20418: PUSH
20419: LD_INT 1
20421: NEG
20422: PUSH
20423: EMPTY
20424: LIST
20425: LIST
20426: PUSH
20427: LD_INT 1
20429: NEG
20430: PUSH
20431: LD_INT 2
20433: NEG
20434: PUSH
20435: EMPTY
20436: LIST
20437: LIST
20438: PUSH
20439: LD_INT 0
20441: PUSH
20442: LD_INT 2
20444: NEG
20445: PUSH
20446: EMPTY
20447: LIST
20448: LIST
20449: PUSH
20450: LD_INT 1
20452: PUSH
20453: LD_INT 1
20455: NEG
20456: PUSH
20457: EMPTY
20458: LIST
20459: LIST
20460: PUSH
20461: LD_INT 2
20463: PUSH
20464: LD_INT 1
20466: PUSH
20467: EMPTY
20468: LIST
20469: LIST
20470: PUSH
20471: LD_INT 2
20473: PUSH
20474: LD_INT 2
20476: PUSH
20477: EMPTY
20478: LIST
20479: LIST
20480: PUSH
20481: LD_INT 1
20483: PUSH
20484: LD_INT 2
20486: PUSH
20487: EMPTY
20488: LIST
20489: LIST
20490: PUSH
20491: LD_INT 1
20493: NEG
20494: PUSH
20495: LD_INT 1
20497: PUSH
20498: EMPTY
20499: LIST
20500: LIST
20501: PUSH
20502: LD_INT 2
20504: NEG
20505: PUSH
20506: LD_INT 0
20508: PUSH
20509: EMPTY
20510: LIST
20511: LIST
20512: PUSH
20513: LD_INT 2
20515: NEG
20516: PUSH
20517: LD_INT 1
20519: NEG
20520: PUSH
20521: EMPTY
20522: LIST
20523: LIST
20524: PUSH
20525: LD_INT 2
20527: NEG
20528: PUSH
20529: LD_INT 2
20531: NEG
20532: PUSH
20533: EMPTY
20534: LIST
20535: LIST
20536: PUSH
20537: LD_INT 1
20539: NEG
20540: PUSH
20541: LD_INT 3
20543: NEG
20544: PUSH
20545: EMPTY
20546: LIST
20547: LIST
20548: PUSH
20549: LD_INT 1
20551: PUSH
20552: LD_INT 2
20554: NEG
20555: PUSH
20556: EMPTY
20557: LIST
20558: LIST
20559: PUSH
20560: LD_INT 3
20562: PUSH
20563: LD_INT 2
20565: PUSH
20566: EMPTY
20567: LIST
20568: LIST
20569: PUSH
20570: LD_INT 2
20572: PUSH
20573: LD_INT 3
20575: PUSH
20576: EMPTY
20577: LIST
20578: LIST
20579: PUSH
20580: LD_INT 2
20582: NEG
20583: PUSH
20584: LD_INT 1
20586: PUSH
20587: EMPTY
20588: LIST
20589: LIST
20590: PUSH
20591: LD_INT 3
20593: NEG
20594: PUSH
20595: LD_INT 1
20597: NEG
20598: PUSH
20599: EMPTY
20600: LIST
20601: LIST
20602: PUSH
20603: EMPTY
20604: LIST
20605: LIST
20606: LIST
20607: LIST
20608: LIST
20609: LIST
20610: LIST
20611: LIST
20612: LIST
20613: LIST
20614: LIST
20615: LIST
20616: LIST
20617: LIST
20618: LIST
20619: LIST
20620: LIST
20621: LIST
20622: LIST
20623: LIST
20624: LIST
20625: LIST
20626: LIST
20627: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
20628: LD_ADDR_VAR 0 35
20632: PUSH
20633: LD_INT 0
20635: PUSH
20636: LD_INT 0
20638: PUSH
20639: EMPTY
20640: LIST
20641: LIST
20642: PUSH
20643: LD_INT 0
20645: PUSH
20646: LD_INT 1
20648: NEG
20649: PUSH
20650: EMPTY
20651: LIST
20652: LIST
20653: PUSH
20654: LD_INT 1
20656: PUSH
20657: LD_INT 0
20659: PUSH
20660: EMPTY
20661: LIST
20662: LIST
20663: PUSH
20664: LD_INT 1
20666: PUSH
20667: LD_INT 1
20669: PUSH
20670: EMPTY
20671: LIST
20672: LIST
20673: PUSH
20674: LD_INT 0
20676: PUSH
20677: LD_INT 1
20679: PUSH
20680: EMPTY
20681: LIST
20682: LIST
20683: PUSH
20684: LD_INT 1
20686: NEG
20687: PUSH
20688: LD_INT 0
20690: PUSH
20691: EMPTY
20692: LIST
20693: LIST
20694: PUSH
20695: LD_INT 1
20697: NEG
20698: PUSH
20699: LD_INT 1
20701: NEG
20702: PUSH
20703: EMPTY
20704: LIST
20705: LIST
20706: PUSH
20707: LD_INT 2
20709: PUSH
20710: LD_INT 1
20712: PUSH
20713: EMPTY
20714: LIST
20715: LIST
20716: PUSH
20717: LD_INT 2
20719: NEG
20720: PUSH
20721: LD_INT 1
20723: NEG
20724: PUSH
20725: EMPTY
20726: LIST
20727: LIST
20728: PUSH
20729: EMPTY
20730: LIST
20731: LIST
20732: LIST
20733: LIST
20734: LIST
20735: LIST
20736: LIST
20737: LIST
20738: LIST
20739: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
20740: LD_ADDR_VAR 0 36
20744: PUSH
20745: LD_INT 0
20747: PUSH
20748: LD_INT 0
20750: PUSH
20751: EMPTY
20752: LIST
20753: LIST
20754: PUSH
20755: LD_INT 0
20757: PUSH
20758: LD_INT 1
20760: NEG
20761: PUSH
20762: EMPTY
20763: LIST
20764: LIST
20765: PUSH
20766: LD_INT 1
20768: PUSH
20769: LD_INT 0
20771: PUSH
20772: EMPTY
20773: LIST
20774: LIST
20775: PUSH
20776: LD_INT 1
20778: PUSH
20779: LD_INT 1
20781: PUSH
20782: EMPTY
20783: LIST
20784: LIST
20785: PUSH
20786: LD_INT 0
20788: PUSH
20789: LD_INT 1
20791: PUSH
20792: EMPTY
20793: LIST
20794: LIST
20795: PUSH
20796: LD_INT 1
20798: NEG
20799: PUSH
20800: LD_INT 0
20802: PUSH
20803: EMPTY
20804: LIST
20805: LIST
20806: PUSH
20807: LD_INT 1
20809: NEG
20810: PUSH
20811: LD_INT 1
20813: NEG
20814: PUSH
20815: EMPTY
20816: LIST
20817: LIST
20818: PUSH
20819: LD_INT 1
20821: NEG
20822: PUSH
20823: LD_INT 2
20825: NEG
20826: PUSH
20827: EMPTY
20828: LIST
20829: LIST
20830: PUSH
20831: LD_INT 1
20833: PUSH
20834: LD_INT 2
20836: PUSH
20837: EMPTY
20838: LIST
20839: LIST
20840: PUSH
20841: EMPTY
20842: LIST
20843: LIST
20844: LIST
20845: LIST
20846: LIST
20847: LIST
20848: LIST
20849: LIST
20850: LIST
20851: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
20852: LD_ADDR_VAR 0 37
20856: PUSH
20857: LD_INT 0
20859: PUSH
20860: LD_INT 0
20862: PUSH
20863: EMPTY
20864: LIST
20865: LIST
20866: PUSH
20867: LD_INT 0
20869: PUSH
20870: LD_INT 1
20872: NEG
20873: PUSH
20874: EMPTY
20875: LIST
20876: LIST
20877: PUSH
20878: LD_INT 1
20880: PUSH
20881: LD_INT 0
20883: PUSH
20884: EMPTY
20885: LIST
20886: LIST
20887: PUSH
20888: LD_INT 1
20890: PUSH
20891: LD_INT 1
20893: PUSH
20894: EMPTY
20895: LIST
20896: LIST
20897: PUSH
20898: LD_INT 0
20900: PUSH
20901: LD_INT 1
20903: PUSH
20904: EMPTY
20905: LIST
20906: LIST
20907: PUSH
20908: LD_INT 1
20910: NEG
20911: PUSH
20912: LD_INT 0
20914: PUSH
20915: EMPTY
20916: LIST
20917: LIST
20918: PUSH
20919: LD_INT 1
20921: NEG
20922: PUSH
20923: LD_INT 1
20925: NEG
20926: PUSH
20927: EMPTY
20928: LIST
20929: LIST
20930: PUSH
20931: LD_INT 1
20933: PUSH
20934: LD_INT 1
20936: NEG
20937: PUSH
20938: EMPTY
20939: LIST
20940: LIST
20941: PUSH
20942: LD_INT 1
20944: NEG
20945: PUSH
20946: LD_INT 1
20948: PUSH
20949: EMPTY
20950: LIST
20951: LIST
20952: PUSH
20953: EMPTY
20954: LIST
20955: LIST
20956: LIST
20957: LIST
20958: LIST
20959: LIST
20960: LIST
20961: LIST
20962: LIST
20963: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
20964: LD_ADDR_VAR 0 38
20968: PUSH
20969: LD_INT 0
20971: PUSH
20972: LD_INT 0
20974: PUSH
20975: EMPTY
20976: LIST
20977: LIST
20978: PUSH
20979: LD_INT 0
20981: PUSH
20982: LD_INT 1
20984: NEG
20985: PUSH
20986: EMPTY
20987: LIST
20988: LIST
20989: PUSH
20990: LD_INT 1
20992: PUSH
20993: LD_INT 0
20995: PUSH
20996: EMPTY
20997: LIST
20998: LIST
20999: PUSH
21000: LD_INT 1
21002: PUSH
21003: LD_INT 1
21005: PUSH
21006: EMPTY
21007: LIST
21008: LIST
21009: PUSH
21010: LD_INT 0
21012: PUSH
21013: LD_INT 1
21015: PUSH
21016: EMPTY
21017: LIST
21018: LIST
21019: PUSH
21020: LD_INT 1
21022: NEG
21023: PUSH
21024: LD_INT 0
21026: PUSH
21027: EMPTY
21028: LIST
21029: LIST
21030: PUSH
21031: LD_INT 1
21033: NEG
21034: PUSH
21035: LD_INT 1
21037: NEG
21038: PUSH
21039: EMPTY
21040: LIST
21041: LIST
21042: PUSH
21043: LD_INT 2
21045: PUSH
21046: LD_INT 1
21048: PUSH
21049: EMPTY
21050: LIST
21051: LIST
21052: PUSH
21053: LD_INT 2
21055: NEG
21056: PUSH
21057: LD_INT 1
21059: NEG
21060: PUSH
21061: EMPTY
21062: LIST
21063: LIST
21064: PUSH
21065: EMPTY
21066: LIST
21067: LIST
21068: LIST
21069: LIST
21070: LIST
21071: LIST
21072: LIST
21073: LIST
21074: LIST
21075: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
21076: LD_ADDR_VAR 0 39
21080: PUSH
21081: LD_INT 0
21083: PUSH
21084: LD_INT 0
21086: PUSH
21087: EMPTY
21088: LIST
21089: LIST
21090: PUSH
21091: LD_INT 0
21093: PUSH
21094: LD_INT 1
21096: NEG
21097: PUSH
21098: EMPTY
21099: LIST
21100: LIST
21101: PUSH
21102: LD_INT 1
21104: PUSH
21105: LD_INT 0
21107: PUSH
21108: EMPTY
21109: LIST
21110: LIST
21111: PUSH
21112: LD_INT 1
21114: PUSH
21115: LD_INT 1
21117: PUSH
21118: EMPTY
21119: LIST
21120: LIST
21121: PUSH
21122: LD_INT 0
21124: PUSH
21125: LD_INT 1
21127: PUSH
21128: EMPTY
21129: LIST
21130: LIST
21131: PUSH
21132: LD_INT 1
21134: NEG
21135: PUSH
21136: LD_INT 0
21138: PUSH
21139: EMPTY
21140: LIST
21141: LIST
21142: PUSH
21143: LD_INT 1
21145: NEG
21146: PUSH
21147: LD_INT 1
21149: NEG
21150: PUSH
21151: EMPTY
21152: LIST
21153: LIST
21154: PUSH
21155: LD_INT 1
21157: NEG
21158: PUSH
21159: LD_INT 2
21161: NEG
21162: PUSH
21163: EMPTY
21164: LIST
21165: LIST
21166: PUSH
21167: LD_INT 1
21169: PUSH
21170: LD_INT 2
21172: PUSH
21173: EMPTY
21174: LIST
21175: LIST
21176: PUSH
21177: EMPTY
21178: LIST
21179: LIST
21180: LIST
21181: LIST
21182: LIST
21183: LIST
21184: LIST
21185: LIST
21186: LIST
21187: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
21188: LD_ADDR_VAR 0 40
21192: PUSH
21193: LD_INT 0
21195: PUSH
21196: LD_INT 0
21198: PUSH
21199: EMPTY
21200: LIST
21201: LIST
21202: PUSH
21203: LD_INT 0
21205: PUSH
21206: LD_INT 1
21208: NEG
21209: PUSH
21210: EMPTY
21211: LIST
21212: LIST
21213: PUSH
21214: LD_INT 1
21216: PUSH
21217: LD_INT 0
21219: PUSH
21220: EMPTY
21221: LIST
21222: LIST
21223: PUSH
21224: LD_INT 1
21226: PUSH
21227: LD_INT 1
21229: PUSH
21230: EMPTY
21231: LIST
21232: LIST
21233: PUSH
21234: LD_INT 0
21236: PUSH
21237: LD_INT 1
21239: PUSH
21240: EMPTY
21241: LIST
21242: LIST
21243: PUSH
21244: LD_INT 1
21246: NEG
21247: PUSH
21248: LD_INT 0
21250: PUSH
21251: EMPTY
21252: LIST
21253: LIST
21254: PUSH
21255: LD_INT 1
21257: NEG
21258: PUSH
21259: LD_INT 1
21261: NEG
21262: PUSH
21263: EMPTY
21264: LIST
21265: LIST
21266: PUSH
21267: LD_INT 1
21269: PUSH
21270: LD_INT 1
21272: NEG
21273: PUSH
21274: EMPTY
21275: LIST
21276: LIST
21277: PUSH
21278: LD_INT 1
21280: NEG
21281: PUSH
21282: LD_INT 1
21284: PUSH
21285: EMPTY
21286: LIST
21287: LIST
21288: PUSH
21289: EMPTY
21290: LIST
21291: LIST
21292: LIST
21293: LIST
21294: LIST
21295: LIST
21296: LIST
21297: LIST
21298: LIST
21299: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
21300: LD_ADDR_VAR 0 41
21304: PUSH
21305: LD_INT 0
21307: PUSH
21308: LD_INT 0
21310: PUSH
21311: EMPTY
21312: LIST
21313: LIST
21314: PUSH
21315: LD_INT 0
21317: PUSH
21318: LD_INT 1
21320: NEG
21321: PUSH
21322: EMPTY
21323: LIST
21324: LIST
21325: PUSH
21326: LD_INT 1
21328: PUSH
21329: LD_INT 0
21331: PUSH
21332: EMPTY
21333: LIST
21334: LIST
21335: PUSH
21336: LD_INT 1
21338: PUSH
21339: LD_INT 1
21341: PUSH
21342: EMPTY
21343: LIST
21344: LIST
21345: PUSH
21346: LD_INT 0
21348: PUSH
21349: LD_INT 1
21351: PUSH
21352: EMPTY
21353: LIST
21354: LIST
21355: PUSH
21356: LD_INT 1
21358: NEG
21359: PUSH
21360: LD_INT 0
21362: PUSH
21363: EMPTY
21364: LIST
21365: LIST
21366: PUSH
21367: LD_INT 1
21369: NEG
21370: PUSH
21371: LD_INT 1
21373: NEG
21374: PUSH
21375: EMPTY
21376: LIST
21377: LIST
21378: PUSH
21379: LD_INT 1
21381: NEG
21382: PUSH
21383: LD_INT 2
21385: NEG
21386: PUSH
21387: EMPTY
21388: LIST
21389: LIST
21390: PUSH
21391: LD_INT 1
21393: PUSH
21394: LD_INT 1
21396: NEG
21397: PUSH
21398: EMPTY
21399: LIST
21400: LIST
21401: PUSH
21402: LD_INT 2
21404: PUSH
21405: LD_INT 0
21407: PUSH
21408: EMPTY
21409: LIST
21410: LIST
21411: PUSH
21412: LD_INT 2
21414: PUSH
21415: LD_INT 1
21417: PUSH
21418: EMPTY
21419: LIST
21420: LIST
21421: PUSH
21422: LD_INT 2
21424: PUSH
21425: LD_INT 2
21427: PUSH
21428: EMPTY
21429: LIST
21430: LIST
21431: PUSH
21432: LD_INT 1
21434: PUSH
21435: LD_INT 2
21437: PUSH
21438: EMPTY
21439: LIST
21440: LIST
21441: PUSH
21442: LD_INT 1
21444: NEG
21445: PUSH
21446: LD_INT 1
21448: PUSH
21449: EMPTY
21450: LIST
21451: LIST
21452: PUSH
21453: LD_INT 2
21455: NEG
21456: PUSH
21457: LD_INT 0
21459: PUSH
21460: EMPTY
21461: LIST
21462: LIST
21463: PUSH
21464: LD_INT 2
21466: NEG
21467: PUSH
21468: LD_INT 1
21470: NEG
21471: PUSH
21472: EMPTY
21473: LIST
21474: LIST
21475: PUSH
21476: LD_INT 2
21478: NEG
21479: PUSH
21480: LD_INT 2
21482: NEG
21483: PUSH
21484: EMPTY
21485: LIST
21486: LIST
21487: PUSH
21488: LD_INT 2
21490: NEG
21491: PUSH
21492: LD_INT 3
21494: NEG
21495: PUSH
21496: EMPTY
21497: LIST
21498: LIST
21499: PUSH
21500: LD_INT 2
21502: PUSH
21503: LD_INT 1
21505: NEG
21506: PUSH
21507: EMPTY
21508: LIST
21509: LIST
21510: PUSH
21511: LD_INT 3
21513: PUSH
21514: LD_INT 0
21516: PUSH
21517: EMPTY
21518: LIST
21519: LIST
21520: PUSH
21521: LD_INT 3
21523: PUSH
21524: LD_INT 1
21526: PUSH
21527: EMPTY
21528: LIST
21529: LIST
21530: PUSH
21531: LD_INT 3
21533: PUSH
21534: LD_INT 2
21536: PUSH
21537: EMPTY
21538: LIST
21539: LIST
21540: PUSH
21541: LD_INT 3
21543: PUSH
21544: LD_INT 3
21546: PUSH
21547: EMPTY
21548: LIST
21549: LIST
21550: PUSH
21551: LD_INT 2
21553: PUSH
21554: LD_INT 3
21556: PUSH
21557: EMPTY
21558: LIST
21559: LIST
21560: PUSH
21561: LD_INT 2
21563: NEG
21564: PUSH
21565: LD_INT 1
21567: PUSH
21568: EMPTY
21569: LIST
21570: LIST
21571: PUSH
21572: LD_INT 3
21574: NEG
21575: PUSH
21576: LD_INT 0
21578: PUSH
21579: EMPTY
21580: LIST
21581: LIST
21582: PUSH
21583: LD_INT 3
21585: NEG
21586: PUSH
21587: LD_INT 1
21589: NEG
21590: PUSH
21591: EMPTY
21592: LIST
21593: LIST
21594: PUSH
21595: LD_INT 3
21597: NEG
21598: PUSH
21599: LD_INT 2
21601: NEG
21602: PUSH
21603: EMPTY
21604: LIST
21605: LIST
21606: PUSH
21607: LD_INT 3
21609: NEG
21610: PUSH
21611: LD_INT 3
21613: NEG
21614: PUSH
21615: EMPTY
21616: LIST
21617: LIST
21618: PUSH
21619: EMPTY
21620: LIST
21621: LIST
21622: LIST
21623: LIST
21624: LIST
21625: LIST
21626: LIST
21627: LIST
21628: LIST
21629: LIST
21630: LIST
21631: LIST
21632: LIST
21633: LIST
21634: LIST
21635: LIST
21636: LIST
21637: LIST
21638: LIST
21639: LIST
21640: LIST
21641: LIST
21642: LIST
21643: LIST
21644: LIST
21645: LIST
21646: LIST
21647: LIST
21648: LIST
21649: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
21650: LD_ADDR_VAR 0 42
21654: PUSH
21655: LD_INT 0
21657: PUSH
21658: LD_INT 0
21660: PUSH
21661: EMPTY
21662: LIST
21663: LIST
21664: PUSH
21665: LD_INT 0
21667: PUSH
21668: LD_INT 1
21670: NEG
21671: PUSH
21672: EMPTY
21673: LIST
21674: LIST
21675: PUSH
21676: LD_INT 1
21678: PUSH
21679: LD_INT 0
21681: PUSH
21682: EMPTY
21683: LIST
21684: LIST
21685: PUSH
21686: LD_INT 1
21688: PUSH
21689: LD_INT 1
21691: PUSH
21692: EMPTY
21693: LIST
21694: LIST
21695: PUSH
21696: LD_INT 0
21698: PUSH
21699: LD_INT 1
21701: PUSH
21702: EMPTY
21703: LIST
21704: LIST
21705: PUSH
21706: LD_INT 1
21708: NEG
21709: PUSH
21710: LD_INT 0
21712: PUSH
21713: EMPTY
21714: LIST
21715: LIST
21716: PUSH
21717: LD_INT 1
21719: NEG
21720: PUSH
21721: LD_INT 1
21723: NEG
21724: PUSH
21725: EMPTY
21726: LIST
21727: LIST
21728: PUSH
21729: LD_INT 1
21731: NEG
21732: PUSH
21733: LD_INT 2
21735: NEG
21736: PUSH
21737: EMPTY
21738: LIST
21739: LIST
21740: PUSH
21741: LD_INT 0
21743: PUSH
21744: LD_INT 2
21746: NEG
21747: PUSH
21748: EMPTY
21749: LIST
21750: LIST
21751: PUSH
21752: LD_INT 1
21754: PUSH
21755: LD_INT 1
21757: NEG
21758: PUSH
21759: EMPTY
21760: LIST
21761: LIST
21762: PUSH
21763: LD_INT 2
21765: PUSH
21766: LD_INT 1
21768: PUSH
21769: EMPTY
21770: LIST
21771: LIST
21772: PUSH
21773: LD_INT 2
21775: PUSH
21776: LD_INT 2
21778: PUSH
21779: EMPTY
21780: LIST
21781: LIST
21782: PUSH
21783: LD_INT 1
21785: PUSH
21786: LD_INT 2
21788: PUSH
21789: EMPTY
21790: LIST
21791: LIST
21792: PUSH
21793: LD_INT 0
21795: PUSH
21796: LD_INT 2
21798: PUSH
21799: EMPTY
21800: LIST
21801: LIST
21802: PUSH
21803: LD_INT 1
21805: NEG
21806: PUSH
21807: LD_INT 1
21809: PUSH
21810: EMPTY
21811: LIST
21812: LIST
21813: PUSH
21814: LD_INT 2
21816: NEG
21817: PUSH
21818: LD_INT 1
21820: NEG
21821: PUSH
21822: EMPTY
21823: LIST
21824: LIST
21825: PUSH
21826: LD_INT 2
21828: NEG
21829: PUSH
21830: LD_INT 2
21832: NEG
21833: PUSH
21834: EMPTY
21835: LIST
21836: LIST
21837: PUSH
21838: LD_INT 2
21840: NEG
21841: PUSH
21842: LD_INT 3
21844: NEG
21845: PUSH
21846: EMPTY
21847: LIST
21848: LIST
21849: PUSH
21850: LD_INT 1
21852: NEG
21853: PUSH
21854: LD_INT 3
21856: NEG
21857: PUSH
21858: EMPTY
21859: LIST
21860: LIST
21861: PUSH
21862: LD_INT 0
21864: PUSH
21865: LD_INT 3
21867: NEG
21868: PUSH
21869: EMPTY
21870: LIST
21871: LIST
21872: PUSH
21873: LD_INT 1
21875: PUSH
21876: LD_INT 2
21878: NEG
21879: PUSH
21880: EMPTY
21881: LIST
21882: LIST
21883: PUSH
21884: LD_INT 3
21886: PUSH
21887: LD_INT 2
21889: PUSH
21890: EMPTY
21891: LIST
21892: LIST
21893: PUSH
21894: LD_INT 3
21896: PUSH
21897: LD_INT 3
21899: PUSH
21900: EMPTY
21901: LIST
21902: LIST
21903: PUSH
21904: LD_INT 2
21906: PUSH
21907: LD_INT 3
21909: PUSH
21910: EMPTY
21911: LIST
21912: LIST
21913: PUSH
21914: LD_INT 1
21916: PUSH
21917: LD_INT 3
21919: PUSH
21920: EMPTY
21921: LIST
21922: LIST
21923: PUSH
21924: LD_INT 0
21926: PUSH
21927: LD_INT 3
21929: PUSH
21930: EMPTY
21931: LIST
21932: LIST
21933: PUSH
21934: LD_INT 1
21936: NEG
21937: PUSH
21938: LD_INT 2
21940: PUSH
21941: EMPTY
21942: LIST
21943: LIST
21944: PUSH
21945: LD_INT 3
21947: NEG
21948: PUSH
21949: LD_INT 2
21951: NEG
21952: PUSH
21953: EMPTY
21954: LIST
21955: LIST
21956: PUSH
21957: LD_INT 3
21959: NEG
21960: PUSH
21961: LD_INT 3
21963: NEG
21964: PUSH
21965: EMPTY
21966: LIST
21967: LIST
21968: PUSH
21969: EMPTY
21970: LIST
21971: LIST
21972: LIST
21973: LIST
21974: LIST
21975: LIST
21976: LIST
21977: LIST
21978: LIST
21979: LIST
21980: LIST
21981: LIST
21982: LIST
21983: LIST
21984: LIST
21985: LIST
21986: LIST
21987: LIST
21988: LIST
21989: LIST
21990: LIST
21991: LIST
21992: LIST
21993: LIST
21994: LIST
21995: LIST
21996: LIST
21997: LIST
21998: LIST
21999: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
22000: LD_ADDR_VAR 0 43
22004: PUSH
22005: LD_INT 0
22007: PUSH
22008: LD_INT 0
22010: PUSH
22011: EMPTY
22012: LIST
22013: LIST
22014: PUSH
22015: LD_INT 0
22017: PUSH
22018: LD_INT 1
22020: NEG
22021: PUSH
22022: EMPTY
22023: LIST
22024: LIST
22025: PUSH
22026: LD_INT 1
22028: PUSH
22029: LD_INT 0
22031: PUSH
22032: EMPTY
22033: LIST
22034: LIST
22035: PUSH
22036: LD_INT 1
22038: PUSH
22039: LD_INT 1
22041: PUSH
22042: EMPTY
22043: LIST
22044: LIST
22045: PUSH
22046: LD_INT 0
22048: PUSH
22049: LD_INT 1
22051: PUSH
22052: EMPTY
22053: LIST
22054: LIST
22055: PUSH
22056: LD_INT 1
22058: NEG
22059: PUSH
22060: LD_INT 0
22062: PUSH
22063: EMPTY
22064: LIST
22065: LIST
22066: PUSH
22067: LD_INT 1
22069: NEG
22070: PUSH
22071: LD_INT 1
22073: NEG
22074: PUSH
22075: EMPTY
22076: LIST
22077: LIST
22078: PUSH
22079: LD_INT 1
22081: NEG
22082: PUSH
22083: LD_INT 2
22085: NEG
22086: PUSH
22087: EMPTY
22088: LIST
22089: LIST
22090: PUSH
22091: LD_INT 0
22093: PUSH
22094: LD_INT 2
22096: NEG
22097: PUSH
22098: EMPTY
22099: LIST
22100: LIST
22101: PUSH
22102: LD_INT 1
22104: PUSH
22105: LD_INT 1
22107: NEG
22108: PUSH
22109: EMPTY
22110: LIST
22111: LIST
22112: PUSH
22113: LD_INT 2
22115: PUSH
22116: LD_INT 0
22118: PUSH
22119: EMPTY
22120: LIST
22121: LIST
22122: PUSH
22123: LD_INT 2
22125: PUSH
22126: LD_INT 1
22128: PUSH
22129: EMPTY
22130: LIST
22131: LIST
22132: PUSH
22133: LD_INT 1
22135: PUSH
22136: LD_INT 2
22138: PUSH
22139: EMPTY
22140: LIST
22141: LIST
22142: PUSH
22143: LD_INT 0
22145: PUSH
22146: LD_INT 2
22148: PUSH
22149: EMPTY
22150: LIST
22151: LIST
22152: PUSH
22153: LD_INT 1
22155: NEG
22156: PUSH
22157: LD_INT 1
22159: PUSH
22160: EMPTY
22161: LIST
22162: LIST
22163: PUSH
22164: LD_INT 2
22166: NEG
22167: PUSH
22168: LD_INT 0
22170: PUSH
22171: EMPTY
22172: LIST
22173: LIST
22174: PUSH
22175: LD_INT 2
22177: NEG
22178: PUSH
22179: LD_INT 1
22181: NEG
22182: PUSH
22183: EMPTY
22184: LIST
22185: LIST
22186: PUSH
22187: LD_INT 1
22189: NEG
22190: PUSH
22191: LD_INT 3
22193: NEG
22194: PUSH
22195: EMPTY
22196: LIST
22197: LIST
22198: PUSH
22199: LD_INT 0
22201: PUSH
22202: LD_INT 3
22204: NEG
22205: PUSH
22206: EMPTY
22207: LIST
22208: LIST
22209: PUSH
22210: LD_INT 1
22212: PUSH
22213: LD_INT 2
22215: NEG
22216: PUSH
22217: EMPTY
22218: LIST
22219: LIST
22220: PUSH
22221: LD_INT 2
22223: PUSH
22224: LD_INT 1
22226: NEG
22227: PUSH
22228: EMPTY
22229: LIST
22230: LIST
22231: PUSH
22232: LD_INT 3
22234: PUSH
22235: LD_INT 0
22237: PUSH
22238: EMPTY
22239: LIST
22240: LIST
22241: PUSH
22242: LD_INT 3
22244: PUSH
22245: LD_INT 1
22247: PUSH
22248: EMPTY
22249: LIST
22250: LIST
22251: PUSH
22252: LD_INT 1
22254: PUSH
22255: LD_INT 3
22257: PUSH
22258: EMPTY
22259: LIST
22260: LIST
22261: PUSH
22262: LD_INT 0
22264: PUSH
22265: LD_INT 3
22267: PUSH
22268: EMPTY
22269: LIST
22270: LIST
22271: PUSH
22272: LD_INT 1
22274: NEG
22275: PUSH
22276: LD_INT 2
22278: PUSH
22279: EMPTY
22280: LIST
22281: LIST
22282: PUSH
22283: LD_INT 2
22285: NEG
22286: PUSH
22287: LD_INT 1
22289: PUSH
22290: EMPTY
22291: LIST
22292: LIST
22293: PUSH
22294: LD_INT 3
22296: NEG
22297: PUSH
22298: LD_INT 0
22300: PUSH
22301: EMPTY
22302: LIST
22303: LIST
22304: PUSH
22305: LD_INT 3
22307: NEG
22308: PUSH
22309: LD_INT 1
22311: NEG
22312: PUSH
22313: EMPTY
22314: LIST
22315: LIST
22316: PUSH
22317: EMPTY
22318: LIST
22319: LIST
22320: LIST
22321: LIST
22322: LIST
22323: LIST
22324: LIST
22325: LIST
22326: LIST
22327: LIST
22328: LIST
22329: LIST
22330: LIST
22331: LIST
22332: LIST
22333: LIST
22334: LIST
22335: LIST
22336: LIST
22337: LIST
22338: LIST
22339: LIST
22340: LIST
22341: LIST
22342: LIST
22343: LIST
22344: LIST
22345: LIST
22346: LIST
22347: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
22348: LD_ADDR_VAR 0 44
22352: PUSH
22353: LD_INT 0
22355: PUSH
22356: LD_INT 0
22358: PUSH
22359: EMPTY
22360: LIST
22361: LIST
22362: PUSH
22363: LD_INT 0
22365: PUSH
22366: LD_INT 1
22368: NEG
22369: PUSH
22370: EMPTY
22371: LIST
22372: LIST
22373: PUSH
22374: LD_INT 1
22376: PUSH
22377: LD_INT 0
22379: PUSH
22380: EMPTY
22381: LIST
22382: LIST
22383: PUSH
22384: LD_INT 1
22386: PUSH
22387: LD_INT 1
22389: PUSH
22390: EMPTY
22391: LIST
22392: LIST
22393: PUSH
22394: LD_INT 0
22396: PUSH
22397: LD_INT 1
22399: PUSH
22400: EMPTY
22401: LIST
22402: LIST
22403: PUSH
22404: LD_INT 1
22406: NEG
22407: PUSH
22408: LD_INT 0
22410: PUSH
22411: EMPTY
22412: LIST
22413: LIST
22414: PUSH
22415: LD_INT 1
22417: NEG
22418: PUSH
22419: LD_INT 1
22421: NEG
22422: PUSH
22423: EMPTY
22424: LIST
22425: LIST
22426: PUSH
22427: LD_INT 1
22429: NEG
22430: PUSH
22431: LD_INT 2
22433: NEG
22434: PUSH
22435: EMPTY
22436: LIST
22437: LIST
22438: PUSH
22439: LD_INT 1
22441: PUSH
22442: LD_INT 1
22444: NEG
22445: PUSH
22446: EMPTY
22447: LIST
22448: LIST
22449: PUSH
22450: LD_INT 2
22452: PUSH
22453: LD_INT 0
22455: PUSH
22456: EMPTY
22457: LIST
22458: LIST
22459: PUSH
22460: LD_INT 2
22462: PUSH
22463: LD_INT 1
22465: PUSH
22466: EMPTY
22467: LIST
22468: LIST
22469: PUSH
22470: LD_INT 2
22472: PUSH
22473: LD_INT 2
22475: PUSH
22476: EMPTY
22477: LIST
22478: LIST
22479: PUSH
22480: LD_INT 1
22482: PUSH
22483: LD_INT 2
22485: PUSH
22486: EMPTY
22487: LIST
22488: LIST
22489: PUSH
22490: LD_INT 1
22492: NEG
22493: PUSH
22494: LD_INT 1
22496: PUSH
22497: EMPTY
22498: LIST
22499: LIST
22500: PUSH
22501: LD_INT 2
22503: NEG
22504: PUSH
22505: LD_INT 0
22507: PUSH
22508: EMPTY
22509: LIST
22510: LIST
22511: PUSH
22512: LD_INT 2
22514: NEG
22515: PUSH
22516: LD_INT 1
22518: NEG
22519: PUSH
22520: EMPTY
22521: LIST
22522: LIST
22523: PUSH
22524: LD_INT 2
22526: NEG
22527: PUSH
22528: LD_INT 2
22530: NEG
22531: PUSH
22532: EMPTY
22533: LIST
22534: LIST
22535: PUSH
22536: LD_INT 2
22538: NEG
22539: PUSH
22540: LD_INT 3
22542: NEG
22543: PUSH
22544: EMPTY
22545: LIST
22546: LIST
22547: PUSH
22548: LD_INT 2
22550: PUSH
22551: LD_INT 1
22553: NEG
22554: PUSH
22555: EMPTY
22556: LIST
22557: LIST
22558: PUSH
22559: LD_INT 3
22561: PUSH
22562: LD_INT 0
22564: PUSH
22565: EMPTY
22566: LIST
22567: LIST
22568: PUSH
22569: LD_INT 3
22571: PUSH
22572: LD_INT 1
22574: PUSH
22575: EMPTY
22576: LIST
22577: LIST
22578: PUSH
22579: LD_INT 3
22581: PUSH
22582: LD_INT 2
22584: PUSH
22585: EMPTY
22586: LIST
22587: LIST
22588: PUSH
22589: LD_INT 3
22591: PUSH
22592: LD_INT 3
22594: PUSH
22595: EMPTY
22596: LIST
22597: LIST
22598: PUSH
22599: LD_INT 2
22601: PUSH
22602: LD_INT 3
22604: PUSH
22605: EMPTY
22606: LIST
22607: LIST
22608: PUSH
22609: LD_INT 2
22611: NEG
22612: PUSH
22613: LD_INT 1
22615: PUSH
22616: EMPTY
22617: LIST
22618: LIST
22619: PUSH
22620: LD_INT 3
22622: NEG
22623: PUSH
22624: LD_INT 0
22626: PUSH
22627: EMPTY
22628: LIST
22629: LIST
22630: PUSH
22631: LD_INT 3
22633: NEG
22634: PUSH
22635: LD_INT 1
22637: NEG
22638: PUSH
22639: EMPTY
22640: LIST
22641: LIST
22642: PUSH
22643: LD_INT 3
22645: NEG
22646: PUSH
22647: LD_INT 2
22649: NEG
22650: PUSH
22651: EMPTY
22652: LIST
22653: LIST
22654: PUSH
22655: LD_INT 3
22657: NEG
22658: PUSH
22659: LD_INT 3
22661: NEG
22662: PUSH
22663: EMPTY
22664: LIST
22665: LIST
22666: PUSH
22667: EMPTY
22668: LIST
22669: LIST
22670: LIST
22671: LIST
22672: LIST
22673: LIST
22674: LIST
22675: LIST
22676: LIST
22677: LIST
22678: LIST
22679: LIST
22680: LIST
22681: LIST
22682: LIST
22683: LIST
22684: LIST
22685: LIST
22686: LIST
22687: LIST
22688: LIST
22689: LIST
22690: LIST
22691: LIST
22692: LIST
22693: LIST
22694: LIST
22695: LIST
22696: LIST
22697: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
22698: LD_ADDR_VAR 0 45
22702: PUSH
22703: LD_INT 0
22705: PUSH
22706: LD_INT 0
22708: PUSH
22709: EMPTY
22710: LIST
22711: LIST
22712: PUSH
22713: LD_INT 0
22715: PUSH
22716: LD_INT 1
22718: NEG
22719: PUSH
22720: EMPTY
22721: LIST
22722: LIST
22723: PUSH
22724: LD_INT 1
22726: PUSH
22727: LD_INT 0
22729: PUSH
22730: EMPTY
22731: LIST
22732: LIST
22733: PUSH
22734: LD_INT 1
22736: PUSH
22737: LD_INT 1
22739: PUSH
22740: EMPTY
22741: LIST
22742: LIST
22743: PUSH
22744: LD_INT 0
22746: PUSH
22747: LD_INT 1
22749: PUSH
22750: EMPTY
22751: LIST
22752: LIST
22753: PUSH
22754: LD_INT 1
22756: NEG
22757: PUSH
22758: LD_INT 0
22760: PUSH
22761: EMPTY
22762: LIST
22763: LIST
22764: PUSH
22765: LD_INT 1
22767: NEG
22768: PUSH
22769: LD_INT 1
22771: NEG
22772: PUSH
22773: EMPTY
22774: LIST
22775: LIST
22776: PUSH
22777: LD_INT 1
22779: NEG
22780: PUSH
22781: LD_INT 2
22783: NEG
22784: PUSH
22785: EMPTY
22786: LIST
22787: LIST
22788: PUSH
22789: LD_INT 0
22791: PUSH
22792: LD_INT 2
22794: NEG
22795: PUSH
22796: EMPTY
22797: LIST
22798: LIST
22799: PUSH
22800: LD_INT 1
22802: PUSH
22803: LD_INT 1
22805: NEG
22806: PUSH
22807: EMPTY
22808: LIST
22809: LIST
22810: PUSH
22811: LD_INT 2
22813: PUSH
22814: LD_INT 1
22816: PUSH
22817: EMPTY
22818: LIST
22819: LIST
22820: PUSH
22821: LD_INT 2
22823: PUSH
22824: LD_INT 2
22826: PUSH
22827: EMPTY
22828: LIST
22829: LIST
22830: PUSH
22831: LD_INT 1
22833: PUSH
22834: LD_INT 2
22836: PUSH
22837: EMPTY
22838: LIST
22839: LIST
22840: PUSH
22841: LD_INT 0
22843: PUSH
22844: LD_INT 2
22846: PUSH
22847: EMPTY
22848: LIST
22849: LIST
22850: PUSH
22851: LD_INT 1
22853: NEG
22854: PUSH
22855: LD_INT 1
22857: PUSH
22858: EMPTY
22859: LIST
22860: LIST
22861: PUSH
22862: LD_INT 2
22864: NEG
22865: PUSH
22866: LD_INT 1
22868: NEG
22869: PUSH
22870: EMPTY
22871: LIST
22872: LIST
22873: PUSH
22874: LD_INT 2
22876: NEG
22877: PUSH
22878: LD_INT 2
22880: NEG
22881: PUSH
22882: EMPTY
22883: LIST
22884: LIST
22885: PUSH
22886: LD_INT 2
22888: NEG
22889: PUSH
22890: LD_INT 3
22892: NEG
22893: PUSH
22894: EMPTY
22895: LIST
22896: LIST
22897: PUSH
22898: LD_INT 1
22900: NEG
22901: PUSH
22902: LD_INT 3
22904: NEG
22905: PUSH
22906: EMPTY
22907: LIST
22908: LIST
22909: PUSH
22910: LD_INT 0
22912: PUSH
22913: LD_INT 3
22915: NEG
22916: PUSH
22917: EMPTY
22918: LIST
22919: LIST
22920: PUSH
22921: LD_INT 1
22923: PUSH
22924: LD_INT 2
22926: NEG
22927: PUSH
22928: EMPTY
22929: LIST
22930: LIST
22931: PUSH
22932: LD_INT 3
22934: PUSH
22935: LD_INT 2
22937: PUSH
22938: EMPTY
22939: LIST
22940: LIST
22941: PUSH
22942: LD_INT 3
22944: PUSH
22945: LD_INT 3
22947: PUSH
22948: EMPTY
22949: LIST
22950: LIST
22951: PUSH
22952: LD_INT 2
22954: PUSH
22955: LD_INT 3
22957: PUSH
22958: EMPTY
22959: LIST
22960: LIST
22961: PUSH
22962: LD_INT 1
22964: PUSH
22965: LD_INT 3
22967: PUSH
22968: EMPTY
22969: LIST
22970: LIST
22971: PUSH
22972: LD_INT 0
22974: PUSH
22975: LD_INT 3
22977: PUSH
22978: EMPTY
22979: LIST
22980: LIST
22981: PUSH
22982: LD_INT 1
22984: NEG
22985: PUSH
22986: LD_INT 2
22988: PUSH
22989: EMPTY
22990: LIST
22991: LIST
22992: PUSH
22993: LD_INT 3
22995: NEG
22996: PUSH
22997: LD_INT 2
22999: NEG
23000: PUSH
23001: EMPTY
23002: LIST
23003: LIST
23004: PUSH
23005: LD_INT 3
23007: NEG
23008: PUSH
23009: LD_INT 3
23011: NEG
23012: PUSH
23013: EMPTY
23014: LIST
23015: LIST
23016: PUSH
23017: EMPTY
23018: LIST
23019: LIST
23020: LIST
23021: LIST
23022: LIST
23023: LIST
23024: LIST
23025: LIST
23026: LIST
23027: LIST
23028: LIST
23029: LIST
23030: LIST
23031: LIST
23032: LIST
23033: LIST
23034: LIST
23035: LIST
23036: LIST
23037: LIST
23038: LIST
23039: LIST
23040: LIST
23041: LIST
23042: LIST
23043: LIST
23044: LIST
23045: LIST
23046: LIST
23047: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
23048: LD_ADDR_VAR 0 46
23052: PUSH
23053: LD_INT 0
23055: PUSH
23056: LD_INT 0
23058: PUSH
23059: EMPTY
23060: LIST
23061: LIST
23062: PUSH
23063: LD_INT 0
23065: PUSH
23066: LD_INT 1
23068: NEG
23069: PUSH
23070: EMPTY
23071: LIST
23072: LIST
23073: PUSH
23074: LD_INT 1
23076: PUSH
23077: LD_INT 0
23079: PUSH
23080: EMPTY
23081: LIST
23082: LIST
23083: PUSH
23084: LD_INT 1
23086: PUSH
23087: LD_INT 1
23089: PUSH
23090: EMPTY
23091: LIST
23092: LIST
23093: PUSH
23094: LD_INT 0
23096: PUSH
23097: LD_INT 1
23099: PUSH
23100: EMPTY
23101: LIST
23102: LIST
23103: PUSH
23104: LD_INT 1
23106: NEG
23107: PUSH
23108: LD_INT 0
23110: PUSH
23111: EMPTY
23112: LIST
23113: LIST
23114: PUSH
23115: LD_INT 1
23117: NEG
23118: PUSH
23119: LD_INT 1
23121: NEG
23122: PUSH
23123: EMPTY
23124: LIST
23125: LIST
23126: PUSH
23127: LD_INT 1
23129: NEG
23130: PUSH
23131: LD_INT 2
23133: NEG
23134: PUSH
23135: EMPTY
23136: LIST
23137: LIST
23138: PUSH
23139: LD_INT 0
23141: PUSH
23142: LD_INT 2
23144: NEG
23145: PUSH
23146: EMPTY
23147: LIST
23148: LIST
23149: PUSH
23150: LD_INT 1
23152: PUSH
23153: LD_INT 1
23155: NEG
23156: PUSH
23157: EMPTY
23158: LIST
23159: LIST
23160: PUSH
23161: LD_INT 2
23163: PUSH
23164: LD_INT 0
23166: PUSH
23167: EMPTY
23168: LIST
23169: LIST
23170: PUSH
23171: LD_INT 2
23173: PUSH
23174: LD_INT 1
23176: PUSH
23177: EMPTY
23178: LIST
23179: LIST
23180: PUSH
23181: LD_INT 1
23183: PUSH
23184: LD_INT 2
23186: PUSH
23187: EMPTY
23188: LIST
23189: LIST
23190: PUSH
23191: LD_INT 0
23193: PUSH
23194: LD_INT 2
23196: PUSH
23197: EMPTY
23198: LIST
23199: LIST
23200: PUSH
23201: LD_INT 1
23203: NEG
23204: PUSH
23205: LD_INT 1
23207: PUSH
23208: EMPTY
23209: LIST
23210: LIST
23211: PUSH
23212: LD_INT 2
23214: NEG
23215: PUSH
23216: LD_INT 0
23218: PUSH
23219: EMPTY
23220: LIST
23221: LIST
23222: PUSH
23223: LD_INT 2
23225: NEG
23226: PUSH
23227: LD_INT 1
23229: NEG
23230: PUSH
23231: EMPTY
23232: LIST
23233: LIST
23234: PUSH
23235: LD_INT 1
23237: NEG
23238: PUSH
23239: LD_INT 3
23241: NEG
23242: PUSH
23243: EMPTY
23244: LIST
23245: LIST
23246: PUSH
23247: LD_INT 0
23249: PUSH
23250: LD_INT 3
23252: NEG
23253: PUSH
23254: EMPTY
23255: LIST
23256: LIST
23257: PUSH
23258: LD_INT 1
23260: PUSH
23261: LD_INT 2
23263: NEG
23264: PUSH
23265: EMPTY
23266: LIST
23267: LIST
23268: PUSH
23269: LD_INT 2
23271: PUSH
23272: LD_INT 1
23274: NEG
23275: PUSH
23276: EMPTY
23277: LIST
23278: LIST
23279: PUSH
23280: LD_INT 3
23282: PUSH
23283: LD_INT 0
23285: PUSH
23286: EMPTY
23287: LIST
23288: LIST
23289: PUSH
23290: LD_INT 3
23292: PUSH
23293: LD_INT 1
23295: PUSH
23296: EMPTY
23297: LIST
23298: LIST
23299: PUSH
23300: LD_INT 1
23302: PUSH
23303: LD_INT 3
23305: PUSH
23306: EMPTY
23307: LIST
23308: LIST
23309: PUSH
23310: LD_INT 0
23312: PUSH
23313: LD_INT 3
23315: PUSH
23316: EMPTY
23317: LIST
23318: LIST
23319: PUSH
23320: LD_INT 1
23322: NEG
23323: PUSH
23324: LD_INT 2
23326: PUSH
23327: EMPTY
23328: LIST
23329: LIST
23330: PUSH
23331: LD_INT 2
23333: NEG
23334: PUSH
23335: LD_INT 1
23337: PUSH
23338: EMPTY
23339: LIST
23340: LIST
23341: PUSH
23342: LD_INT 3
23344: NEG
23345: PUSH
23346: LD_INT 0
23348: PUSH
23349: EMPTY
23350: LIST
23351: LIST
23352: PUSH
23353: LD_INT 3
23355: NEG
23356: PUSH
23357: LD_INT 1
23359: NEG
23360: PUSH
23361: EMPTY
23362: LIST
23363: LIST
23364: PUSH
23365: EMPTY
23366: LIST
23367: LIST
23368: LIST
23369: LIST
23370: LIST
23371: LIST
23372: LIST
23373: LIST
23374: LIST
23375: LIST
23376: LIST
23377: LIST
23378: LIST
23379: LIST
23380: LIST
23381: LIST
23382: LIST
23383: LIST
23384: LIST
23385: LIST
23386: LIST
23387: LIST
23388: LIST
23389: LIST
23390: LIST
23391: LIST
23392: LIST
23393: LIST
23394: LIST
23395: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
23396: LD_ADDR_VAR 0 47
23400: PUSH
23401: LD_INT 0
23403: PUSH
23404: LD_INT 0
23406: PUSH
23407: EMPTY
23408: LIST
23409: LIST
23410: PUSH
23411: LD_INT 0
23413: PUSH
23414: LD_INT 1
23416: NEG
23417: PUSH
23418: EMPTY
23419: LIST
23420: LIST
23421: PUSH
23422: LD_INT 1
23424: PUSH
23425: LD_INT 0
23427: PUSH
23428: EMPTY
23429: LIST
23430: LIST
23431: PUSH
23432: LD_INT 1
23434: PUSH
23435: LD_INT 1
23437: PUSH
23438: EMPTY
23439: LIST
23440: LIST
23441: PUSH
23442: LD_INT 0
23444: PUSH
23445: LD_INT 1
23447: PUSH
23448: EMPTY
23449: LIST
23450: LIST
23451: PUSH
23452: LD_INT 1
23454: NEG
23455: PUSH
23456: LD_INT 0
23458: PUSH
23459: EMPTY
23460: LIST
23461: LIST
23462: PUSH
23463: LD_INT 1
23465: NEG
23466: PUSH
23467: LD_INT 1
23469: NEG
23470: PUSH
23471: EMPTY
23472: LIST
23473: LIST
23474: PUSH
23475: LD_INT 1
23477: NEG
23478: PUSH
23479: LD_INT 2
23481: NEG
23482: PUSH
23483: EMPTY
23484: LIST
23485: LIST
23486: PUSH
23487: LD_INT 0
23489: PUSH
23490: LD_INT 2
23492: NEG
23493: PUSH
23494: EMPTY
23495: LIST
23496: LIST
23497: PUSH
23498: LD_INT 1
23500: PUSH
23501: LD_INT 1
23503: NEG
23504: PUSH
23505: EMPTY
23506: LIST
23507: LIST
23508: PUSH
23509: LD_INT 2
23511: NEG
23512: PUSH
23513: LD_INT 1
23515: NEG
23516: PUSH
23517: EMPTY
23518: LIST
23519: LIST
23520: PUSH
23521: LD_INT 2
23523: NEG
23524: PUSH
23525: LD_INT 2
23527: NEG
23528: PUSH
23529: EMPTY
23530: LIST
23531: LIST
23532: PUSH
23533: EMPTY
23534: LIST
23535: LIST
23536: LIST
23537: LIST
23538: LIST
23539: LIST
23540: LIST
23541: LIST
23542: LIST
23543: LIST
23544: LIST
23545: LIST
23546: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
23547: LD_ADDR_VAR 0 48
23551: PUSH
23552: LD_INT 0
23554: PUSH
23555: LD_INT 0
23557: PUSH
23558: EMPTY
23559: LIST
23560: LIST
23561: PUSH
23562: LD_INT 0
23564: PUSH
23565: LD_INT 1
23567: NEG
23568: PUSH
23569: EMPTY
23570: LIST
23571: LIST
23572: PUSH
23573: LD_INT 1
23575: PUSH
23576: LD_INT 0
23578: PUSH
23579: EMPTY
23580: LIST
23581: LIST
23582: PUSH
23583: LD_INT 1
23585: PUSH
23586: LD_INT 1
23588: PUSH
23589: EMPTY
23590: LIST
23591: LIST
23592: PUSH
23593: LD_INT 0
23595: PUSH
23596: LD_INT 1
23598: PUSH
23599: EMPTY
23600: LIST
23601: LIST
23602: PUSH
23603: LD_INT 1
23605: NEG
23606: PUSH
23607: LD_INT 0
23609: PUSH
23610: EMPTY
23611: LIST
23612: LIST
23613: PUSH
23614: LD_INT 1
23616: NEG
23617: PUSH
23618: LD_INT 1
23620: NEG
23621: PUSH
23622: EMPTY
23623: LIST
23624: LIST
23625: PUSH
23626: LD_INT 1
23628: NEG
23629: PUSH
23630: LD_INT 2
23632: NEG
23633: PUSH
23634: EMPTY
23635: LIST
23636: LIST
23637: PUSH
23638: LD_INT 0
23640: PUSH
23641: LD_INT 2
23643: NEG
23644: PUSH
23645: EMPTY
23646: LIST
23647: LIST
23648: PUSH
23649: LD_INT 1
23651: PUSH
23652: LD_INT 1
23654: NEG
23655: PUSH
23656: EMPTY
23657: LIST
23658: LIST
23659: PUSH
23660: LD_INT 2
23662: PUSH
23663: LD_INT 0
23665: PUSH
23666: EMPTY
23667: LIST
23668: LIST
23669: PUSH
23670: LD_INT 2
23672: PUSH
23673: LD_INT 1
23675: PUSH
23676: EMPTY
23677: LIST
23678: LIST
23679: PUSH
23680: EMPTY
23681: LIST
23682: LIST
23683: LIST
23684: LIST
23685: LIST
23686: LIST
23687: LIST
23688: LIST
23689: LIST
23690: LIST
23691: LIST
23692: LIST
23693: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
23694: LD_ADDR_VAR 0 49
23698: PUSH
23699: LD_INT 0
23701: PUSH
23702: LD_INT 0
23704: PUSH
23705: EMPTY
23706: LIST
23707: LIST
23708: PUSH
23709: LD_INT 0
23711: PUSH
23712: LD_INT 1
23714: NEG
23715: PUSH
23716: EMPTY
23717: LIST
23718: LIST
23719: PUSH
23720: LD_INT 1
23722: PUSH
23723: LD_INT 0
23725: PUSH
23726: EMPTY
23727: LIST
23728: LIST
23729: PUSH
23730: LD_INT 1
23732: PUSH
23733: LD_INT 1
23735: PUSH
23736: EMPTY
23737: LIST
23738: LIST
23739: PUSH
23740: LD_INT 0
23742: PUSH
23743: LD_INT 1
23745: PUSH
23746: EMPTY
23747: LIST
23748: LIST
23749: PUSH
23750: LD_INT 1
23752: NEG
23753: PUSH
23754: LD_INT 0
23756: PUSH
23757: EMPTY
23758: LIST
23759: LIST
23760: PUSH
23761: LD_INT 1
23763: NEG
23764: PUSH
23765: LD_INT 1
23767: NEG
23768: PUSH
23769: EMPTY
23770: LIST
23771: LIST
23772: PUSH
23773: LD_INT 1
23775: PUSH
23776: LD_INT 1
23778: NEG
23779: PUSH
23780: EMPTY
23781: LIST
23782: LIST
23783: PUSH
23784: LD_INT 2
23786: PUSH
23787: LD_INT 0
23789: PUSH
23790: EMPTY
23791: LIST
23792: LIST
23793: PUSH
23794: LD_INT 2
23796: PUSH
23797: LD_INT 1
23799: PUSH
23800: EMPTY
23801: LIST
23802: LIST
23803: PUSH
23804: LD_INT 2
23806: PUSH
23807: LD_INT 2
23809: PUSH
23810: EMPTY
23811: LIST
23812: LIST
23813: PUSH
23814: LD_INT 1
23816: PUSH
23817: LD_INT 2
23819: PUSH
23820: EMPTY
23821: LIST
23822: LIST
23823: PUSH
23824: EMPTY
23825: LIST
23826: LIST
23827: LIST
23828: LIST
23829: LIST
23830: LIST
23831: LIST
23832: LIST
23833: LIST
23834: LIST
23835: LIST
23836: LIST
23837: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
23838: LD_ADDR_VAR 0 50
23842: PUSH
23843: LD_INT 0
23845: PUSH
23846: LD_INT 0
23848: PUSH
23849: EMPTY
23850: LIST
23851: LIST
23852: PUSH
23853: LD_INT 0
23855: PUSH
23856: LD_INT 1
23858: NEG
23859: PUSH
23860: EMPTY
23861: LIST
23862: LIST
23863: PUSH
23864: LD_INT 1
23866: PUSH
23867: LD_INT 0
23869: PUSH
23870: EMPTY
23871: LIST
23872: LIST
23873: PUSH
23874: LD_INT 1
23876: PUSH
23877: LD_INT 1
23879: PUSH
23880: EMPTY
23881: LIST
23882: LIST
23883: PUSH
23884: LD_INT 0
23886: PUSH
23887: LD_INT 1
23889: PUSH
23890: EMPTY
23891: LIST
23892: LIST
23893: PUSH
23894: LD_INT 1
23896: NEG
23897: PUSH
23898: LD_INT 0
23900: PUSH
23901: EMPTY
23902: LIST
23903: LIST
23904: PUSH
23905: LD_INT 1
23907: NEG
23908: PUSH
23909: LD_INT 1
23911: NEG
23912: PUSH
23913: EMPTY
23914: LIST
23915: LIST
23916: PUSH
23917: LD_INT 2
23919: PUSH
23920: LD_INT 1
23922: PUSH
23923: EMPTY
23924: LIST
23925: LIST
23926: PUSH
23927: LD_INT 2
23929: PUSH
23930: LD_INT 2
23932: PUSH
23933: EMPTY
23934: LIST
23935: LIST
23936: PUSH
23937: LD_INT 1
23939: PUSH
23940: LD_INT 2
23942: PUSH
23943: EMPTY
23944: LIST
23945: LIST
23946: PUSH
23947: LD_INT 0
23949: PUSH
23950: LD_INT 2
23952: PUSH
23953: EMPTY
23954: LIST
23955: LIST
23956: PUSH
23957: LD_INT 1
23959: NEG
23960: PUSH
23961: LD_INT 1
23963: PUSH
23964: EMPTY
23965: LIST
23966: LIST
23967: PUSH
23968: EMPTY
23969: LIST
23970: LIST
23971: LIST
23972: LIST
23973: LIST
23974: LIST
23975: LIST
23976: LIST
23977: LIST
23978: LIST
23979: LIST
23980: LIST
23981: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
23982: LD_ADDR_VAR 0 51
23986: PUSH
23987: LD_INT 0
23989: PUSH
23990: LD_INT 0
23992: PUSH
23993: EMPTY
23994: LIST
23995: LIST
23996: PUSH
23997: LD_INT 0
23999: PUSH
24000: LD_INT 1
24002: NEG
24003: PUSH
24004: EMPTY
24005: LIST
24006: LIST
24007: PUSH
24008: LD_INT 1
24010: PUSH
24011: LD_INT 0
24013: PUSH
24014: EMPTY
24015: LIST
24016: LIST
24017: PUSH
24018: LD_INT 1
24020: PUSH
24021: LD_INT 1
24023: PUSH
24024: EMPTY
24025: LIST
24026: LIST
24027: PUSH
24028: LD_INT 0
24030: PUSH
24031: LD_INT 1
24033: PUSH
24034: EMPTY
24035: LIST
24036: LIST
24037: PUSH
24038: LD_INT 1
24040: NEG
24041: PUSH
24042: LD_INT 0
24044: PUSH
24045: EMPTY
24046: LIST
24047: LIST
24048: PUSH
24049: LD_INT 1
24051: NEG
24052: PUSH
24053: LD_INT 1
24055: NEG
24056: PUSH
24057: EMPTY
24058: LIST
24059: LIST
24060: PUSH
24061: LD_INT 1
24063: PUSH
24064: LD_INT 2
24066: PUSH
24067: EMPTY
24068: LIST
24069: LIST
24070: PUSH
24071: LD_INT 0
24073: PUSH
24074: LD_INT 2
24076: PUSH
24077: EMPTY
24078: LIST
24079: LIST
24080: PUSH
24081: LD_INT 1
24083: NEG
24084: PUSH
24085: LD_INT 1
24087: PUSH
24088: EMPTY
24089: LIST
24090: LIST
24091: PUSH
24092: LD_INT 2
24094: NEG
24095: PUSH
24096: LD_INT 0
24098: PUSH
24099: EMPTY
24100: LIST
24101: LIST
24102: PUSH
24103: LD_INT 2
24105: NEG
24106: PUSH
24107: LD_INT 1
24109: NEG
24110: PUSH
24111: EMPTY
24112: LIST
24113: LIST
24114: PUSH
24115: EMPTY
24116: LIST
24117: LIST
24118: LIST
24119: LIST
24120: LIST
24121: LIST
24122: LIST
24123: LIST
24124: LIST
24125: LIST
24126: LIST
24127: LIST
24128: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24129: LD_ADDR_VAR 0 52
24133: PUSH
24134: LD_INT 0
24136: PUSH
24137: LD_INT 0
24139: PUSH
24140: EMPTY
24141: LIST
24142: LIST
24143: PUSH
24144: LD_INT 0
24146: PUSH
24147: LD_INT 1
24149: NEG
24150: PUSH
24151: EMPTY
24152: LIST
24153: LIST
24154: PUSH
24155: LD_INT 1
24157: PUSH
24158: LD_INT 0
24160: PUSH
24161: EMPTY
24162: LIST
24163: LIST
24164: PUSH
24165: LD_INT 1
24167: PUSH
24168: LD_INT 1
24170: PUSH
24171: EMPTY
24172: LIST
24173: LIST
24174: PUSH
24175: LD_INT 0
24177: PUSH
24178: LD_INT 1
24180: PUSH
24181: EMPTY
24182: LIST
24183: LIST
24184: PUSH
24185: LD_INT 1
24187: NEG
24188: PUSH
24189: LD_INT 0
24191: PUSH
24192: EMPTY
24193: LIST
24194: LIST
24195: PUSH
24196: LD_INT 1
24198: NEG
24199: PUSH
24200: LD_INT 1
24202: NEG
24203: PUSH
24204: EMPTY
24205: LIST
24206: LIST
24207: PUSH
24208: LD_INT 1
24210: NEG
24211: PUSH
24212: LD_INT 2
24214: NEG
24215: PUSH
24216: EMPTY
24217: LIST
24218: LIST
24219: PUSH
24220: LD_INT 1
24222: NEG
24223: PUSH
24224: LD_INT 1
24226: PUSH
24227: EMPTY
24228: LIST
24229: LIST
24230: PUSH
24231: LD_INT 2
24233: NEG
24234: PUSH
24235: LD_INT 0
24237: PUSH
24238: EMPTY
24239: LIST
24240: LIST
24241: PUSH
24242: LD_INT 2
24244: NEG
24245: PUSH
24246: LD_INT 1
24248: NEG
24249: PUSH
24250: EMPTY
24251: LIST
24252: LIST
24253: PUSH
24254: LD_INT 2
24256: NEG
24257: PUSH
24258: LD_INT 2
24260: NEG
24261: PUSH
24262: EMPTY
24263: LIST
24264: LIST
24265: PUSH
24266: EMPTY
24267: LIST
24268: LIST
24269: LIST
24270: LIST
24271: LIST
24272: LIST
24273: LIST
24274: LIST
24275: LIST
24276: LIST
24277: LIST
24278: LIST
24279: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24280: LD_ADDR_VAR 0 53
24284: PUSH
24285: LD_INT 0
24287: PUSH
24288: LD_INT 0
24290: PUSH
24291: EMPTY
24292: LIST
24293: LIST
24294: PUSH
24295: LD_INT 0
24297: PUSH
24298: LD_INT 1
24300: NEG
24301: PUSH
24302: EMPTY
24303: LIST
24304: LIST
24305: PUSH
24306: LD_INT 1
24308: PUSH
24309: LD_INT 0
24311: PUSH
24312: EMPTY
24313: LIST
24314: LIST
24315: PUSH
24316: LD_INT 1
24318: PUSH
24319: LD_INT 1
24321: PUSH
24322: EMPTY
24323: LIST
24324: LIST
24325: PUSH
24326: LD_INT 0
24328: PUSH
24329: LD_INT 1
24331: PUSH
24332: EMPTY
24333: LIST
24334: LIST
24335: PUSH
24336: LD_INT 1
24338: NEG
24339: PUSH
24340: LD_INT 0
24342: PUSH
24343: EMPTY
24344: LIST
24345: LIST
24346: PUSH
24347: LD_INT 1
24349: NEG
24350: PUSH
24351: LD_INT 1
24353: NEG
24354: PUSH
24355: EMPTY
24356: LIST
24357: LIST
24358: PUSH
24359: LD_INT 1
24361: NEG
24362: PUSH
24363: LD_INT 2
24365: NEG
24366: PUSH
24367: EMPTY
24368: LIST
24369: LIST
24370: PUSH
24371: LD_INT 0
24373: PUSH
24374: LD_INT 2
24376: NEG
24377: PUSH
24378: EMPTY
24379: LIST
24380: LIST
24381: PUSH
24382: LD_INT 1
24384: PUSH
24385: LD_INT 1
24387: NEG
24388: PUSH
24389: EMPTY
24390: LIST
24391: LIST
24392: PUSH
24393: LD_INT 2
24395: PUSH
24396: LD_INT 0
24398: PUSH
24399: EMPTY
24400: LIST
24401: LIST
24402: PUSH
24403: LD_INT 2
24405: PUSH
24406: LD_INT 1
24408: PUSH
24409: EMPTY
24410: LIST
24411: LIST
24412: PUSH
24413: LD_INT 2
24415: PUSH
24416: LD_INT 2
24418: PUSH
24419: EMPTY
24420: LIST
24421: LIST
24422: PUSH
24423: LD_INT 1
24425: PUSH
24426: LD_INT 2
24428: PUSH
24429: EMPTY
24430: LIST
24431: LIST
24432: PUSH
24433: LD_INT 0
24435: PUSH
24436: LD_INT 2
24438: PUSH
24439: EMPTY
24440: LIST
24441: LIST
24442: PUSH
24443: LD_INT 1
24445: NEG
24446: PUSH
24447: LD_INT 1
24449: PUSH
24450: EMPTY
24451: LIST
24452: LIST
24453: PUSH
24454: LD_INT 2
24456: NEG
24457: PUSH
24458: LD_INT 0
24460: PUSH
24461: EMPTY
24462: LIST
24463: LIST
24464: PUSH
24465: LD_INT 2
24467: NEG
24468: PUSH
24469: LD_INT 1
24471: NEG
24472: PUSH
24473: EMPTY
24474: LIST
24475: LIST
24476: PUSH
24477: LD_INT 2
24479: NEG
24480: PUSH
24481: LD_INT 2
24483: NEG
24484: PUSH
24485: EMPTY
24486: LIST
24487: LIST
24488: PUSH
24489: EMPTY
24490: LIST
24491: LIST
24492: LIST
24493: LIST
24494: LIST
24495: LIST
24496: LIST
24497: LIST
24498: LIST
24499: LIST
24500: LIST
24501: LIST
24502: LIST
24503: LIST
24504: LIST
24505: LIST
24506: LIST
24507: LIST
24508: LIST
24509: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24510: LD_ADDR_VAR 0 54
24514: PUSH
24515: LD_INT 0
24517: PUSH
24518: LD_INT 0
24520: PUSH
24521: EMPTY
24522: LIST
24523: LIST
24524: PUSH
24525: LD_INT 0
24527: PUSH
24528: LD_INT 1
24530: NEG
24531: PUSH
24532: EMPTY
24533: LIST
24534: LIST
24535: PUSH
24536: LD_INT 1
24538: PUSH
24539: LD_INT 0
24541: PUSH
24542: EMPTY
24543: LIST
24544: LIST
24545: PUSH
24546: LD_INT 1
24548: PUSH
24549: LD_INT 1
24551: PUSH
24552: EMPTY
24553: LIST
24554: LIST
24555: PUSH
24556: LD_INT 0
24558: PUSH
24559: LD_INT 1
24561: PUSH
24562: EMPTY
24563: LIST
24564: LIST
24565: PUSH
24566: LD_INT 1
24568: NEG
24569: PUSH
24570: LD_INT 0
24572: PUSH
24573: EMPTY
24574: LIST
24575: LIST
24576: PUSH
24577: LD_INT 1
24579: NEG
24580: PUSH
24581: LD_INT 1
24583: NEG
24584: PUSH
24585: EMPTY
24586: LIST
24587: LIST
24588: PUSH
24589: LD_INT 1
24591: NEG
24592: PUSH
24593: LD_INT 2
24595: NEG
24596: PUSH
24597: EMPTY
24598: LIST
24599: LIST
24600: PUSH
24601: LD_INT 0
24603: PUSH
24604: LD_INT 2
24606: NEG
24607: PUSH
24608: EMPTY
24609: LIST
24610: LIST
24611: PUSH
24612: LD_INT 1
24614: PUSH
24615: LD_INT 1
24617: NEG
24618: PUSH
24619: EMPTY
24620: LIST
24621: LIST
24622: PUSH
24623: LD_INT 2
24625: PUSH
24626: LD_INT 0
24628: PUSH
24629: EMPTY
24630: LIST
24631: LIST
24632: PUSH
24633: LD_INT 2
24635: PUSH
24636: LD_INT 1
24638: PUSH
24639: EMPTY
24640: LIST
24641: LIST
24642: PUSH
24643: LD_INT 2
24645: PUSH
24646: LD_INT 2
24648: PUSH
24649: EMPTY
24650: LIST
24651: LIST
24652: PUSH
24653: LD_INT 1
24655: PUSH
24656: LD_INT 2
24658: PUSH
24659: EMPTY
24660: LIST
24661: LIST
24662: PUSH
24663: LD_INT 0
24665: PUSH
24666: LD_INT 2
24668: PUSH
24669: EMPTY
24670: LIST
24671: LIST
24672: PUSH
24673: LD_INT 1
24675: NEG
24676: PUSH
24677: LD_INT 1
24679: PUSH
24680: EMPTY
24681: LIST
24682: LIST
24683: PUSH
24684: LD_INT 2
24686: NEG
24687: PUSH
24688: LD_INT 0
24690: PUSH
24691: EMPTY
24692: LIST
24693: LIST
24694: PUSH
24695: LD_INT 2
24697: NEG
24698: PUSH
24699: LD_INT 1
24701: NEG
24702: PUSH
24703: EMPTY
24704: LIST
24705: LIST
24706: PUSH
24707: LD_INT 2
24709: NEG
24710: PUSH
24711: LD_INT 2
24713: NEG
24714: PUSH
24715: EMPTY
24716: LIST
24717: LIST
24718: PUSH
24719: EMPTY
24720: LIST
24721: LIST
24722: LIST
24723: LIST
24724: LIST
24725: LIST
24726: LIST
24727: LIST
24728: LIST
24729: LIST
24730: LIST
24731: LIST
24732: LIST
24733: LIST
24734: LIST
24735: LIST
24736: LIST
24737: LIST
24738: LIST
24739: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24740: LD_ADDR_VAR 0 55
24744: PUSH
24745: LD_INT 0
24747: PUSH
24748: LD_INT 0
24750: PUSH
24751: EMPTY
24752: LIST
24753: LIST
24754: PUSH
24755: LD_INT 0
24757: PUSH
24758: LD_INT 1
24760: NEG
24761: PUSH
24762: EMPTY
24763: LIST
24764: LIST
24765: PUSH
24766: LD_INT 1
24768: PUSH
24769: LD_INT 0
24771: PUSH
24772: EMPTY
24773: LIST
24774: LIST
24775: PUSH
24776: LD_INT 1
24778: PUSH
24779: LD_INT 1
24781: PUSH
24782: EMPTY
24783: LIST
24784: LIST
24785: PUSH
24786: LD_INT 0
24788: PUSH
24789: LD_INT 1
24791: PUSH
24792: EMPTY
24793: LIST
24794: LIST
24795: PUSH
24796: LD_INT 1
24798: NEG
24799: PUSH
24800: LD_INT 0
24802: PUSH
24803: EMPTY
24804: LIST
24805: LIST
24806: PUSH
24807: LD_INT 1
24809: NEG
24810: PUSH
24811: LD_INT 1
24813: NEG
24814: PUSH
24815: EMPTY
24816: LIST
24817: LIST
24818: PUSH
24819: LD_INT 1
24821: NEG
24822: PUSH
24823: LD_INT 2
24825: NEG
24826: PUSH
24827: EMPTY
24828: LIST
24829: LIST
24830: PUSH
24831: LD_INT 0
24833: PUSH
24834: LD_INT 2
24836: NEG
24837: PUSH
24838: EMPTY
24839: LIST
24840: LIST
24841: PUSH
24842: LD_INT 1
24844: PUSH
24845: LD_INT 1
24847: NEG
24848: PUSH
24849: EMPTY
24850: LIST
24851: LIST
24852: PUSH
24853: LD_INT 2
24855: PUSH
24856: LD_INT 0
24858: PUSH
24859: EMPTY
24860: LIST
24861: LIST
24862: PUSH
24863: LD_INT 2
24865: PUSH
24866: LD_INT 1
24868: PUSH
24869: EMPTY
24870: LIST
24871: LIST
24872: PUSH
24873: LD_INT 2
24875: PUSH
24876: LD_INT 2
24878: PUSH
24879: EMPTY
24880: LIST
24881: LIST
24882: PUSH
24883: LD_INT 1
24885: PUSH
24886: LD_INT 2
24888: PUSH
24889: EMPTY
24890: LIST
24891: LIST
24892: PUSH
24893: LD_INT 0
24895: PUSH
24896: LD_INT 2
24898: PUSH
24899: EMPTY
24900: LIST
24901: LIST
24902: PUSH
24903: LD_INT 1
24905: NEG
24906: PUSH
24907: LD_INT 1
24909: PUSH
24910: EMPTY
24911: LIST
24912: LIST
24913: PUSH
24914: LD_INT 2
24916: NEG
24917: PUSH
24918: LD_INT 0
24920: PUSH
24921: EMPTY
24922: LIST
24923: LIST
24924: PUSH
24925: LD_INT 2
24927: NEG
24928: PUSH
24929: LD_INT 1
24931: NEG
24932: PUSH
24933: EMPTY
24934: LIST
24935: LIST
24936: PUSH
24937: LD_INT 2
24939: NEG
24940: PUSH
24941: LD_INT 2
24943: NEG
24944: PUSH
24945: EMPTY
24946: LIST
24947: LIST
24948: PUSH
24949: EMPTY
24950: LIST
24951: LIST
24952: LIST
24953: LIST
24954: LIST
24955: LIST
24956: LIST
24957: LIST
24958: LIST
24959: LIST
24960: LIST
24961: LIST
24962: LIST
24963: LIST
24964: LIST
24965: LIST
24966: LIST
24967: LIST
24968: LIST
24969: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24970: LD_ADDR_VAR 0 56
24974: PUSH
24975: LD_INT 0
24977: PUSH
24978: LD_INT 0
24980: PUSH
24981: EMPTY
24982: LIST
24983: LIST
24984: PUSH
24985: LD_INT 0
24987: PUSH
24988: LD_INT 1
24990: NEG
24991: PUSH
24992: EMPTY
24993: LIST
24994: LIST
24995: PUSH
24996: LD_INT 1
24998: PUSH
24999: LD_INT 0
25001: PUSH
25002: EMPTY
25003: LIST
25004: LIST
25005: PUSH
25006: LD_INT 1
25008: PUSH
25009: LD_INT 1
25011: PUSH
25012: EMPTY
25013: LIST
25014: LIST
25015: PUSH
25016: LD_INT 0
25018: PUSH
25019: LD_INT 1
25021: PUSH
25022: EMPTY
25023: LIST
25024: LIST
25025: PUSH
25026: LD_INT 1
25028: NEG
25029: PUSH
25030: LD_INT 0
25032: PUSH
25033: EMPTY
25034: LIST
25035: LIST
25036: PUSH
25037: LD_INT 1
25039: NEG
25040: PUSH
25041: LD_INT 1
25043: NEG
25044: PUSH
25045: EMPTY
25046: LIST
25047: LIST
25048: PUSH
25049: LD_INT 1
25051: NEG
25052: PUSH
25053: LD_INT 2
25055: NEG
25056: PUSH
25057: EMPTY
25058: LIST
25059: LIST
25060: PUSH
25061: LD_INT 0
25063: PUSH
25064: LD_INT 2
25066: NEG
25067: PUSH
25068: EMPTY
25069: LIST
25070: LIST
25071: PUSH
25072: LD_INT 1
25074: PUSH
25075: LD_INT 1
25077: NEG
25078: PUSH
25079: EMPTY
25080: LIST
25081: LIST
25082: PUSH
25083: LD_INT 2
25085: PUSH
25086: LD_INT 0
25088: PUSH
25089: EMPTY
25090: LIST
25091: LIST
25092: PUSH
25093: LD_INT 2
25095: PUSH
25096: LD_INT 1
25098: PUSH
25099: EMPTY
25100: LIST
25101: LIST
25102: PUSH
25103: LD_INT 2
25105: PUSH
25106: LD_INT 2
25108: PUSH
25109: EMPTY
25110: LIST
25111: LIST
25112: PUSH
25113: LD_INT 1
25115: PUSH
25116: LD_INT 2
25118: PUSH
25119: EMPTY
25120: LIST
25121: LIST
25122: PUSH
25123: LD_INT 0
25125: PUSH
25126: LD_INT 2
25128: PUSH
25129: EMPTY
25130: LIST
25131: LIST
25132: PUSH
25133: LD_INT 1
25135: NEG
25136: PUSH
25137: LD_INT 1
25139: PUSH
25140: EMPTY
25141: LIST
25142: LIST
25143: PUSH
25144: LD_INT 2
25146: NEG
25147: PUSH
25148: LD_INT 0
25150: PUSH
25151: EMPTY
25152: LIST
25153: LIST
25154: PUSH
25155: LD_INT 2
25157: NEG
25158: PUSH
25159: LD_INT 1
25161: NEG
25162: PUSH
25163: EMPTY
25164: LIST
25165: LIST
25166: PUSH
25167: LD_INT 2
25169: NEG
25170: PUSH
25171: LD_INT 2
25173: NEG
25174: PUSH
25175: EMPTY
25176: LIST
25177: LIST
25178: PUSH
25179: EMPTY
25180: LIST
25181: LIST
25182: LIST
25183: LIST
25184: LIST
25185: LIST
25186: LIST
25187: LIST
25188: LIST
25189: LIST
25190: LIST
25191: LIST
25192: LIST
25193: LIST
25194: LIST
25195: LIST
25196: LIST
25197: LIST
25198: LIST
25199: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25200: LD_ADDR_VAR 0 57
25204: PUSH
25205: LD_INT 0
25207: PUSH
25208: LD_INT 0
25210: PUSH
25211: EMPTY
25212: LIST
25213: LIST
25214: PUSH
25215: LD_INT 0
25217: PUSH
25218: LD_INT 1
25220: NEG
25221: PUSH
25222: EMPTY
25223: LIST
25224: LIST
25225: PUSH
25226: LD_INT 1
25228: PUSH
25229: LD_INT 0
25231: PUSH
25232: EMPTY
25233: LIST
25234: LIST
25235: PUSH
25236: LD_INT 1
25238: PUSH
25239: LD_INT 1
25241: PUSH
25242: EMPTY
25243: LIST
25244: LIST
25245: PUSH
25246: LD_INT 0
25248: PUSH
25249: LD_INT 1
25251: PUSH
25252: EMPTY
25253: LIST
25254: LIST
25255: PUSH
25256: LD_INT 1
25258: NEG
25259: PUSH
25260: LD_INT 0
25262: PUSH
25263: EMPTY
25264: LIST
25265: LIST
25266: PUSH
25267: LD_INT 1
25269: NEG
25270: PUSH
25271: LD_INT 1
25273: NEG
25274: PUSH
25275: EMPTY
25276: LIST
25277: LIST
25278: PUSH
25279: LD_INT 1
25281: NEG
25282: PUSH
25283: LD_INT 2
25285: NEG
25286: PUSH
25287: EMPTY
25288: LIST
25289: LIST
25290: PUSH
25291: LD_INT 0
25293: PUSH
25294: LD_INT 2
25296: NEG
25297: PUSH
25298: EMPTY
25299: LIST
25300: LIST
25301: PUSH
25302: LD_INT 1
25304: PUSH
25305: LD_INT 1
25307: NEG
25308: PUSH
25309: EMPTY
25310: LIST
25311: LIST
25312: PUSH
25313: LD_INT 2
25315: PUSH
25316: LD_INT 0
25318: PUSH
25319: EMPTY
25320: LIST
25321: LIST
25322: PUSH
25323: LD_INT 2
25325: PUSH
25326: LD_INT 1
25328: PUSH
25329: EMPTY
25330: LIST
25331: LIST
25332: PUSH
25333: LD_INT 2
25335: PUSH
25336: LD_INT 2
25338: PUSH
25339: EMPTY
25340: LIST
25341: LIST
25342: PUSH
25343: LD_INT 1
25345: PUSH
25346: LD_INT 2
25348: PUSH
25349: EMPTY
25350: LIST
25351: LIST
25352: PUSH
25353: LD_INT 0
25355: PUSH
25356: LD_INT 2
25358: PUSH
25359: EMPTY
25360: LIST
25361: LIST
25362: PUSH
25363: LD_INT 1
25365: NEG
25366: PUSH
25367: LD_INT 1
25369: PUSH
25370: EMPTY
25371: LIST
25372: LIST
25373: PUSH
25374: LD_INT 2
25376: NEG
25377: PUSH
25378: LD_INT 0
25380: PUSH
25381: EMPTY
25382: LIST
25383: LIST
25384: PUSH
25385: LD_INT 2
25387: NEG
25388: PUSH
25389: LD_INT 1
25391: NEG
25392: PUSH
25393: EMPTY
25394: LIST
25395: LIST
25396: PUSH
25397: LD_INT 2
25399: NEG
25400: PUSH
25401: LD_INT 2
25403: NEG
25404: PUSH
25405: EMPTY
25406: LIST
25407: LIST
25408: PUSH
25409: EMPTY
25410: LIST
25411: LIST
25412: LIST
25413: LIST
25414: LIST
25415: LIST
25416: LIST
25417: LIST
25418: LIST
25419: LIST
25420: LIST
25421: LIST
25422: LIST
25423: LIST
25424: LIST
25425: LIST
25426: LIST
25427: LIST
25428: LIST
25429: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25430: LD_ADDR_VAR 0 58
25434: PUSH
25435: LD_INT 0
25437: PUSH
25438: LD_INT 0
25440: PUSH
25441: EMPTY
25442: LIST
25443: LIST
25444: PUSH
25445: LD_INT 0
25447: PUSH
25448: LD_INT 1
25450: NEG
25451: PUSH
25452: EMPTY
25453: LIST
25454: LIST
25455: PUSH
25456: LD_INT 1
25458: PUSH
25459: LD_INT 0
25461: PUSH
25462: EMPTY
25463: LIST
25464: LIST
25465: PUSH
25466: LD_INT 1
25468: PUSH
25469: LD_INT 1
25471: PUSH
25472: EMPTY
25473: LIST
25474: LIST
25475: PUSH
25476: LD_INT 0
25478: PUSH
25479: LD_INT 1
25481: PUSH
25482: EMPTY
25483: LIST
25484: LIST
25485: PUSH
25486: LD_INT 1
25488: NEG
25489: PUSH
25490: LD_INT 0
25492: PUSH
25493: EMPTY
25494: LIST
25495: LIST
25496: PUSH
25497: LD_INT 1
25499: NEG
25500: PUSH
25501: LD_INT 1
25503: NEG
25504: PUSH
25505: EMPTY
25506: LIST
25507: LIST
25508: PUSH
25509: LD_INT 1
25511: NEG
25512: PUSH
25513: LD_INT 2
25515: NEG
25516: PUSH
25517: EMPTY
25518: LIST
25519: LIST
25520: PUSH
25521: LD_INT 0
25523: PUSH
25524: LD_INT 2
25526: NEG
25527: PUSH
25528: EMPTY
25529: LIST
25530: LIST
25531: PUSH
25532: LD_INT 1
25534: PUSH
25535: LD_INT 1
25537: NEG
25538: PUSH
25539: EMPTY
25540: LIST
25541: LIST
25542: PUSH
25543: LD_INT 2
25545: PUSH
25546: LD_INT 0
25548: PUSH
25549: EMPTY
25550: LIST
25551: LIST
25552: PUSH
25553: LD_INT 2
25555: PUSH
25556: LD_INT 1
25558: PUSH
25559: EMPTY
25560: LIST
25561: LIST
25562: PUSH
25563: LD_INT 2
25565: PUSH
25566: LD_INT 2
25568: PUSH
25569: EMPTY
25570: LIST
25571: LIST
25572: PUSH
25573: LD_INT 1
25575: PUSH
25576: LD_INT 2
25578: PUSH
25579: EMPTY
25580: LIST
25581: LIST
25582: PUSH
25583: LD_INT 0
25585: PUSH
25586: LD_INT 2
25588: PUSH
25589: EMPTY
25590: LIST
25591: LIST
25592: PUSH
25593: LD_INT 1
25595: NEG
25596: PUSH
25597: LD_INT 1
25599: PUSH
25600: EMPTY
25601: LIST
25602: LIST
25603: PUSH
25604: LD_INT 2
25606: NEG
25607: PUSH
25608: LD_INT 0
25610: PUSH
25611: EMPTY
25612: LIST
25613: LIST
25614: PUSH
25615: LD_INT 2
25617: NEG
25618: PUSH
25619: LD_INT 1
25621: NEG
25622: PUSH
25623: EMPTY
25624: LIST
25625: LIST
25626: PUSH
25627: LD_INT 2
25629: NEG
25630: PUSH
25631: LD_INT 2
25633: NEG
25634: PUSH
25635: EMPTY
25636: LIST
25637: LIST
25638: PUSH
25639: EMPTY
25640: LIST
25641: LIST
25642: LIST
25643: LIST
25644: LIST
25645: LIST
25646: LIST
25647: LIST
25648: LIST
25649: LIST
25650: LIST
25651: LIST
25652: LIST
25653: LIST
25654: LIST
25655: LIST
25656: LIST
25657: LIST
25658: LIST
25659: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
25660: LD_ADDR_VAR 0 59
25664: PUSH
25665: LD_INT 0
25667: PUSH
25668: LD_INT 0
25670: PUSH
25671: EMPTY
25672: LIST
25673: LIST
25674: PUSH
25675: LD_INT 0
25677: PUSH
25678: LD_INT 1
25680: NEG
25681: PUSH
25682: EMPTY
25683: LIST
25684: LIST
25685: PUSH
25686: LD_INT 1
25688: PUSH
25689: LD_INT 0
25691: PUSH
25692: EMPTY
25693: LIST
25694: LIST
25695: PUSH
25696: LD_INT 1
25698: PUSH
25699: LD_INT 1
25701: PUSH
25702: EMPTY
25703: LIST
25704: LIST
25705: PUSH
25706: LD_INT 0
25708: PUSH
25709: LD_INT 1
25711: PUSH
25712: EMPTY
25713: LIST
25714: LIST
25715: PUSH
25716: LD_INT 1
25718: NEG
25719: PUSH
25720: LD_INT 0
25722: PUSH
25723: EMPTY
25724: LIST
25725: LIST
25726: PUSH
25727: LD_INT 1
25729: NEG
25730: PUSH
25731: LD_INT 1
25733: NEG
25734: PUSH
25735: EMPTY
25736: LIST
25737: LIST
25738: PUSH
25739: EMPTY
25740: LIST
25741: LIST
25742: LIST
25743: LIST
25744: LIST
25745: LIST
25746: LIST
25747: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
25748: LD_ADDR_VAR 0 60
25752: PUSH
25753: LD_INT 0
25755: PUSH
25756: LD_INT 0
25758: PUSH
25759: EMPTY
25760: LIST
25761: LIST
25762: PUSH
25763: LD_INT 0
25765: PUSH
25766: LD_INT 1
25768: NEG
25769: PUSH
25770: EMPTY
25771: LIST
25772: LIST
25773: PUSH
25774: LD_INT 1
25776: PUSH
25777: LD_INT 0
25779: PUSH
25780: EMPTY
25781: LIST
25782: LIST
25783: PUSH
25784: LD_INT 1
25786: PUSH
25787: LD_INT 1
25789: PUSH
25790: EMPTY
25791: LIST
25792: LIST
25793: PUSH
25794: LD_INT 0
25796: PUSH
25797: LD_INT 1
25799: PUSH
25800: EMPTY
25801: LIST
25802: LIST
25803: PUSH
25804: LD_INT 1
25806: NEG
25807: PUSH
25808: LD_INT 0
25810: PUSH
25811: EMPTY
25812: LIST
25813: LIST
25814: PUSH
25815: LD_INT 1
25817: NEG
25818: PUSH
25819: LD_INT 1
25821: NEG
25822: PUSH
25823: EMPTY
25824: LIST
25825: LIST
25826: PUSH
25827: EMPTY
25828: LIST
25829: LIST
25830: LIST
25831: LIST
25832: LIST
25833: LIST
25834: LIST
25835: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
25836: LD_ADDR_VAR 0 61
25840: PUSH
25841: LD_INT 0
25843: PUSH
25844: LD_INT 0
25846: PUSH
25847: EMPTY
25848: LIST
25849: LIST
25850: PUSH
25851: LD_INT 0
25853: PUSH
25854: LD_INT 1
25856: NEG
25857: PUSH
25858: EMPTY
25859: LIST
25860: LIST
25861: PUSH
25862: LD_INT 1
25864: PUSH
25865: LD_INT 0
25867: PUSH
25868: EMPTY
25869: LIST
25870: LIST
25871: PUSH
25872: LD_INT 1
25874: PUSH
25875: LD_INT 1
25877: PUSH
25878: EMPTY
25879: LIST
25880: LIST
25881: PUSH
25882: LD_INT 0
25884: PUSH
25885: LD_INT 1
25887: PUSH
25888: EMPTY
25889: LIST
25890: LIST
25891: PUSH
25892: LD_INT 1
25894: NEG
25895: PUSH
25896: LD_INT 0
25898: PUSH
25899: EMPTY
25900: LIST
25901: LIST
25902: PUSH
25903: LD_INT 1
25905: NEG
25906: PUSH
25907: LD_INT 1
25909: NEG
25910: PUSH
25911: EMPTY
25912: LIST
25913: LIST
25914: PUSH
25915: EMPTY
25916: LIST
25917: LIST
25918: LIST
25919: LIST
25920: LIST
25921: LIST
25922: LIST
25923: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
25924: LD_ADDR_VAR 0 62
25928: PUSH
25929: LD_INT 0
25931: PUSH
25932: LD_INT 0
25934: PUSH
25935: EMPTY
25936: LIST
25937: LIST
25938: PUSH
25939: LD_INT 0
25941: PUSH
25942: LD_INT 1
25944: NEG
25945: PUSH
25946: EMPTY
25947: LIST
25948: LIST
25949: PUSH
25950: LD_INT 1
25952: PUSH
25953: LD_INT 0
25955: PUSH
25956: EMPTY
25957: LIST
25958: LIST
25959: PUSH
25960: LD_INT 1
25962: PUSH
25963: LD_INT 1
25965: PUSH
25966: EMPTY
25967: LIST
25968: LIST
25969: PUSH
25970: LD_INT 0
25972: PUSH
25973: LD_INT 1
25975: PUSH
25976: EMPTY
25977: LIST
25978: LIST
25979: PUSH
25980: LD_INT 1
25982: NEG
25983: PUSH
25984: LD_INT 0
25986: PUSH
25987: EMPTY
25988: LIST
25989: LIST
25990: PUSH
25991: LD_INT 1
25993: NEG
25994: PUSH
25995: LD_INT 1
25997: NEG
25998: PUSH
25999: EMPTY
26000: LIST
26001: LIST
26002: PUSH
26003: EMPTY
26004: LIST
26005: LIST
26006: LIST
26007: LIST
26008: LIST
26009: LIST
26010: LIST
26011: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
26012: LD_ADDR_VAR 0 63
26016: PUSH
26017: LD_INT 0
26019: PUSH
26020: LD_INT 0
26022: PUSH
26023: EMPTY
26024: LIST
26025: LIST
26026: PUSH
26027: LD_INT 0
26029: PUSH
26030: LD_INT 1
26032: NEG
26033: PUSH
26034: EMPTY
26035: LIST
26036: LIST
26037: PUSH
26038: LD_INT 1
26040: PUSH
26041: LD_INT 0
26043: PUSH
26044: EMPTY
26045: LIST
26046: LIST
26047: PUSH
26048: LD_INT 1
26050: PUSH
26051: LD_INT 1
26053: PUSH
26054: EMPTY
26055: LIST
26056: LIST
26057: PUSH
26058: LD_INT 0
26060: PUSH
26061: LD_INT 1
26063: PUSH
26064: EMPTY
26065: LIST
26066: LIST
26067: PUSH
26068: LD_INT 1
26070: NEG
26071: PUSH
26072: LD_INT 0
26074: PUSH
26075: EMPTY
26076: LIST
26077: LIST
26078: PUSH
26079: LD_INT 1
26081: NEG
26082: PUSH
26083: LD_INT 1
26085: NEG
26086: PUSH
26087: EMPTY
26088: LIST
26089: LIST
26090: PUSH
26091: EMPTY
26092: LIST
26093: LIST
26094: LIST
26095: LIST
26096: LIST
26097: LIST
26098: LIST
26099: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
26100: LD_ADDR_VAR 0 64
26104: PUSH
26105: LD_INT 0
26107: PUSH
26108: LD_INT 0
26110: PUSH
26111: EMPTY
26112: LIST
26113: LIST
26114: PUSH
26115: LD_INT 0
26117: PUSH
26118: LD_INT 1
26120: NEG
26121: PUSH
26122: EMPTY
26123: LIST
26124: LIST
26125: PUSH
26126: LD_INT 1
26128: PUSH
26129: LD_INT 0
26131: PUSH
26132: EMPTY
26133: LIST
26134: LIST
26135: PUSH
26136: LD_INT 1
26138: PUSH
26139: LD_INT 1
26141: PUSH
26142: EMPTY
26143: LIST
26144: LIST
26145: PUSH
26146: LD_INT 0
26148: PUSH
26149: LD_INT 1
26151: PUSH
26152: EMPTY
26153: LIST
26154: LIST
26155: PUSH
26156: LD_INT 1
26158: NEG
26159: PUSH
26160: LD_INT 0
26162: PUSH
26163: EMPTY
26164: LIST
26165: LIST
26166: PUSH
26167: LD_INT 1
26169: NEG
26170: PUSH
26171: LD_INT 1
26173: NEG
26174: PUSH
26175: EMPTY
26176: LIST
26177: LIST
26178: PUSH
26179: EMPTY
26180: LIST
26181: LIST
26182: LIST
26183: LIST
26184: LIST
26185: LIST
26186: LIST
26187: ST_TO_ADDR
// end ; 1 :
26188: GO 32085
26190: LD_INT 1
26192: DOUBLE
26193: EQUAL
26194: IFTRUE 26198
26196: GO 28821
26198: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
26199: LD_ADDR_VAR 0 11
26203: PUSH
26204: LD_INT 1
26206: NEG
26207: PUSH
26208: LD_INT 3
26210: NEG
26211: PUSH
26212: EMPTY
26213: LIST
26214: LIST
26215: PUSH
26216: LD_INT 0
26218: PUSH
26219: LD_INT 3
26221: NEG
26222: PUSH
26223: EMPTY
26224: LIST
26225: LIST
26226: PUSH
26227: LD_INT 1
26229: PUSH
26230: LD_INT 2
26232: NEG
26233: PUSH
26234: EMPTY
26235: LIST
26236: LIST
26237: PUSH
26238: EMPTY
26239: LIST
26240: LIST
26241: LIST
26242: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
26243: LD_ADDR_VAR 0 12
26247: PUSH
26248: LD_INT 2
26250: PUSH
26251: LD_INT 1
26253: NEG
26254: PUSH
26255: EMPTY
26256: LIST
26257: LIST
26258: PUSH
26259: LD_INT 3
26261: PUSH
26262: LD_INT 0
26264: PUSH
26265: EMPTY
26266: LIST
26267: LIST
26268: PUSH
26269: LD_INT 3
26271: PUSH
26272: LD_INT 1
26274: PUSH
26275: EMPTY
26276: LIST
26277: LIST
26278: PUSH
26279: EMPTY
26280: LIST
26281: LIST
26282: LIST
26283: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
26284: LD_ADDR_VAR 0 13
26288: PUSH
26289: LD_INT 3
26291: PUSH
26292: LD_INT 2
26294: PUSH
26295: EMPTY
26296: LIST
26297: LIST
26298: PUSH
26299: LD_INT 3
26301: PUSH
26302: LD_INT 3
26304: PUSH
26305: EMPTY
26306: LIST
26307: LIST
26308: PUSH
26309: LD_INT 2
26311: PUSH
26312: LD_INT 3
26314: PUSH
26315: EMPTY
26316: LIST
26317: LIST
26318: PUSH
26319: EMPTY
26320: LIST
26321: LIST
26322: LIST
26323: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
26324: LD_ADDR_VAR 0 14
26328: PUSH
26329: LD_INT 1
26331: PUSH
26332: LD_INT 3
26334: PUSH
26335: EMPTY
26336: LIST
26337: LIST
26338: PUSH
26339: LD_INT 0
26341: PUSH
26342: LD_INT 3
26344: PUSH
26345: EMPTY
26346: LIST
26347: LIST
26348: PUSH
26349: LD_INT 1
26351: NEG
26352: PUSH
26353: LD_INT 2
26355: PUSH
26356: EMPTY
26357: LIST
26358: LIST
26359: PUSH
26360: EMPTY
26361: LIST
26362: LIST
26363: LIST
26364: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
26365: LD_ADDR_VAR 0 15
26369: PUSH
26370: LD_INT 2
26372: NEG
26373: PUSH
26374: LD_INT 1
26376: PUSH
26377: EMPTY
26378: LIST
26379: LIST
26380: PUSH
26381: LD_INT 3
26383: NEG
26384: PUSH
26385: LD_INT 0
26387: PUSH
26388: EMPTY
26389: LIST
26390: LIST
26391: PUSH
26392: LD_INT 3
26394: NEG
26395: PUSH
26396: LD_INT 1
26398: NEG
26399: PUSH
26400: EMPTY
26401: LIST
26402: LIST
26403: PUSH
26404: EMPTY
26405: LIST
26406: LIST
26407: LIST
26408: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
26409: LD_ADDR_VAR 0 16
26413: PUSH
26414: LD_INT 2
26416: NEG
26417: PUSH
26418: LD_INT 3
26420: NEG
26421: PUSH
26422: EMPTY
26423: LIST
26424: LIST
26425: PUSH
26426: LD_INT 3
26428: NEG
26429: PUSH
26430: LD_INT 2
26432: NEG
26433: PUSH
26434: EMPTY
26435: LIST
26436: LIST
26437: PUSH
26438: LD_INT 3
26440: NEG
26441: PUSH
26442: LD_INT 3
26444: NEG
26445: PUSH
26446: EMPTY
26447: LIST
26448: LIST
26449: PUSH
26450: EMPTY
26451: LIST
26452: LIST
26453: LIST
26454: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
26455: LD_ADDR_VAR 0 17
26459: PUSH
26460: LD_INT 1
26462: NEG
26463: PUSH
26464: LD_INT 3
26466: NEG
26467: PUSH
26468: EMPTY
26469: LIST
26470: LIST
26471: PUSH
26472: LD_INT 0
26474: PUSH
26475: LD_INT 3
26477: NEG
26478: PUSH
26479: EMPTY
26480: LIST
26481: LIST
26482: PUSH
26483: LD_INT 1
26485: PUSH
26486: LD_INT 2
26488: NEG
26489: PUSH
26490: EMPTY
26491: LIST
26492: LIST
26493: PUSH
26494: EMPTY
26495: LIST
26496: LIST
26497: LIST
26498: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
26499: LD_ADDR_VAR 0 18
26503: PUSH
26504: LD_INT 2
26506: PUSH
26507: LD_INT 1
26509: NEG
26510: PUSH
26511: EMPTY
26512: LIST
26513: LIST
26514: PUSH
26515: LD_INT 3
26517: PUSH
26518: LD_INT 0
26520: PUSH
26521: EMPTY
26522: LIST
26523: LIST
26524: PUSH
26525: LD_INT 3
26527: PUSH
26528: LD_INT 1
26530: PUSH
26531: EMPTY
26532: LIST
26533: LIST
26534: PUSH
26535: EMPTY
26536: LIST
26537: LIST
26538: LIST
26539: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
26540: LD_ADDR_VAR 0 19
26544: PUSH
26545: LD_INT 3
26547: PUSH
26548: LD_INT 2
26550: PUSH
26551: EMPTY
26552: LIST
26553: LIST
26554: PUSH
26555: LD_INT 3
26557: PUSH
26558: LD_INT 3
26560: PUSH
26561: EMPTY
26562: LIST
26563: LIST
26564: PUSH
26565: LD_INT 2
26567: PUSH
26568: LD_INT 3
26570: PUSH
26571: EMPTY
26572: LIST
26573: LIST
26574: PUSH
26575: EMPTY
26576: LIST
26577: LIST
26578: LIST
26579: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
26580: LD_ADDR_VAR 0 20
26584: PUSH
26585: LD_INT 1
26587: PUSH
26588: LD_INT 3
26590: PUSH
26591: EMPTY
26592: LIST
26593: LIST
26594: PUSH
26595: LD_INT 0
26597: PUSH
26598: LD_INT 3
26600: PUSH
26601: EMPTY
26602: LIST
26603: LIST
26604: PUSH
26605: LD_INT 1
26607: NEG
26608: PUSH
26609: LD_INT 2
26611: PUSH
26612: EMPTY
26613: LIST
26614: LIST
26615: PUSH
26616: EMPTY
26617: LIST
26618: LIST
26619: LIST
26620: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
26621: LD_ADDR_VAR 0 21
26625: PUSH
26626: LD_INT 2
26628: NEG
26629: PUSH
26630: LD_INT 1
26632: PUSH
26633: EMPTY
26634: LIST
26635: LIST
26636: PUSH
26637: LD_INT 3
26639: NEG
26640: PUSH
26641: LD_INT 0
26643: PUSH
26644: EMPTY
26645: LIST
26646: LIST
26647: PUSH
26648: LD_INT 3
26650: NEG
26651: PUSH
26652: LD_INT 1
26654: NEG
26655: PUSH
26656: EMPTY
26657: LIST
26658: LIST
26659: PUSH
26660: EMPTY
26661: LIST
26662: LIST
26663: LIST
26664: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
26665: LD_ADDR_VAR 0 22
26669: PUSH
26670: LD_INT 2
26672: NEG
26673: PUSH
26674: LD_INT 3
26676: NEG
26677: PUSH
26678: EMPTY
26679: LIST
26680: LIST
26681: PUSH
26682: LD_INT 3
26684: NEG
26685: PUSH
26686: LD_INT 2
26688: NEG
26689: PUSH
26690: EMPTY
26691: LIST
26692: LIST
26693: PUSH
26694: LD_INT 3
26696: NEG
26697: PUSH
26698: LD_INT 3
26700: NEG
26701: PUSH
26702: EMPTY
26703: LIST
26704: LIST
26705: PUSH
26706: EMPTY
26707: LIST
26708: LIST
26709: LIST
26710: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
26711: LD_ADDR_VAR 0 23
26715: PUSH
26716: LD_INT 0
26718: PUSH
26719: LD_INT 3
26721: NEG
26722: PUSH
26723: EMPTY
26724: LIST
26725: LIST
26726: PUSH
26727: LD_INT 1
26729: NEG
26730: PUSH
26731: LD_INT 4
26733: NEG
26734: PUSH
26735: EMPTY
26736: LIST
26737: LIST
26738: PUSH
26739: LD_INT 1
26741: PUSH
26742: LD_INT 3
26744: NEG
26745: PUSH
26746: EMPTY
26747: LIST
26748: LIST
26749: PUSH
26750: EMPTY
26751: LIST
26752: LIST
26753: LIST
26754: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
26755: LD_ADDR_VAR 0 24
26759: PUSH
26760: LD_INT 3
26762: PUSH
26763: LD_INT 0
26765: PUSH
26766: EMPTY
26767: LIST
26768: LIST
26769: PUSH
26770: LD_INT 3
26772: PUSH
26773: LD_INT 1
26775: NEG
26776: PUSH
26777: EMPTY
26778: LIST
26779: LIST
26780: PUSH
26781: LD_INT 4
26783: PUSH
26784: LD_INT 1
26786: PUSH
26787: EMPTY
26788: LIST
26789: LIST
26790: PUSH
26791: EMPTY
26792: LIST
26793: LIST
26794: LIST
26795: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
26796: LD_ADDR_VAR 0 25
26800: PUSH
26801: LD_INT 3
26803: PUSH
26804: LD_INT 3
26806: PUSH
26807: EMPTY
26808: LIST
26809: LIST
26810: PUSH
26811: LD_INT 4
26813: PUSH
26814: LD_INT 3
26816: PUSH
26817: EMPTY
26818: LIST
26819: LIST
26820: PUSH
26821: LD_INT 3
26823: PUSH
26824: LD_INT 4
26826: PUSH
26827: EMPTY
26828: LIST
26829: LIST
26830: PUSH
26831: EMPTY
26832: LIST
26833: LIST
26834: LIST
26835: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
26836: LD_ADDR_VAR 0 26
26840: PUSH
26841: LD_INT 0
26843: PUSH
26844: LD_INT 3
26846: PUSH
26847: EMPTY
26848: LIST
26849: LIST
26850: PUSH
26851: LD_INT 1
26853: PUSH
26854: LD_INT 4
26856: PUSH
26857: EMPTY
26858: LIST
26859: LIST
26860: PUSH
26861: LD_INT 1
26863: NEG
26864: PUSH
26865: LD_INT 3
26867: PUSH
26868: EMPTY
26869: LIST
26870: LIST
26871: PUSH
26872: EMPTY
26873: LIST
26874: LIST
26875: LIST
26876: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
26877: LD_ADDR_VAR 0 27
26881: PUSH
26882: LD_INT 3
26884: NEG
26885: PUSH
26886: LD_INT 0
26888: PUSH
26889: EMPTY
26890: LIST
26891: LIST
26892: PUSH
26893: LD_INT 3
26895: NEG
26896: PUSH
26897: LD_INT 1
26899: PUSH
26900: EMPTY
26901: LIST
26902: LIST
26903: PUSH
26904: LD_INT 4
26906: NEG
26907: PUSH
26908: LD_INT 1
26910: NEG
26911: PUSH
26912: EMPTY
26913: LIST
26914: LIST
26915: PUSH
26916: EMPTY
26917: LIST
26918: LIST
26919: LIST
26920: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
26921: LD_ADDR_VAR 0 28
26925: PUSH
26926: LD_INT 3
26928: NEG
26929: PUSH
26930: LD_INT 3
26932: NEG
26933: PUSH
26934: EMPTY
26935: LIST
26936: LIST
26937: PUSH
26938: LD_INT 3
26940: NEG
26941: PUSH
26942: LD_INT 4
26944: NEG
26945: PUSH
26946: EMPTY
26947: LIST
26948: LIST
26949: PUSH
26950: LD_INT 4
26952: NEG
26953: PUSH
26954: LD_INT 3
26956: NEG
26957: PUSH
26958: EMPTY
26959: LIST
26960: LIST
26961: PUSH
26962: EMPTY
26963: LIST
26964: LIST
26965: LIST
26966: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
26967: LD_ADDR_VAR 0 29
26971: PUSH
26972: LD_INT 1
26974: NEG
26975: PUSH
26976: LD_INT 3
26978: NEG
26979: PUSH
26980: EMPTY
26981: LIST
26982: LIST
26983: PUSH
26984: LD_INT 0
26986: PUSH
26987: LD_INT 3
26989: NEG
26990: PUSH
26991: EMPTY
26992: LIST
26993: LIST
26994: PUSH
26995: LD_INT 1
26997: PUSH
26998: LD_INT 2
27000: NEG
27001: PUSH
27002: EMPTY
27003: LIST
27004: LIST
27005: PUSH
27006: LD_INT 1
27008: NEG
27009: PUSH
27010: LD_INT 4
27012: NEG
27013: PUSH
27014: EMPTY
27015: LIST
27016: LIST
27017: PUSH
27018: LD_INT 0
27020: PUSH
27021: LD_INT 4
27023: NEG
27024: PUSH
27025: EMPTY
27026: LIST
27027: LIST
27028: PUSH
27029: LD_INT 1
27031: PUSH
27032: LD_INT 3
27034: NEG
27035: PUSH
27036: EMPTY
27037: LIST
27038: LIST
27039: PUSH
27040: LD_INT 1
27042: NEG
27043: PUSH
27044: LD_INT 5
27046: NEG
27047: PUSH
27048: EMPTY
27049: LIST
27050: LIST
27051: PUSH
27052: LD_INT 0
27054: PUSH
27055: LD_INT 5
27057: NEG
27058: PUSH
27059: EMPTY
27060: LIST
27061: LIST
27062: PUSH
27063: LD_INT 1
27065: PUSH
27066: LD_INT 4
27068: NEG
27069: PUSH
27070: EMPTY
27071: LIST
27072: LIST
27073: PUSH
27074: LD_INT 1
27076: NEG
27077: PUSH
27078: LD_INT 6
27080: NEG
27081: PUSH
27082: EMPTY
27083: LIST
27084: LIST
27085: PUSH
27086: LD_INT 0
27088: PUSH
27089: LD_INT 6
27091: NEG
27092: PUSH
27093: EMPTY
27094: LIST
27095: LIST
27096: PUSH
27097: LD_INT 1
27099: PUSH
27100: LD_INT 5
27102: NEG
27103: PUSH
27104: EMPTY
27105: LIST
27106: LIST
27107: PUSH
27108: EMPTY
27109: LIST
27110: LIST
27111: LIST
27112: LIST
27113: LIST
27114: LIST
27115: LIST
27116: LIST
27117: LIST
27118: LIST
27119: LIST
27120: LIST
27121: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
27122: LD_ADDR_VAR 0 30
27126: PUSH
27127: LD_INT 2
27129: PUSH
27130: LD_INT 1
27132: NEG
27133: PUSH
27134: EMPTY
27135: LIST
27136: LIST
27137: PUSH
27138: LD_INT 3
27140: PUSH
27141: LD_INT 0
27143: PUSH
27144: EMPTY
27145: LIST
27146: LIST
27147: PUSH
27148: LD_INT 3
27150: PUSH
27151: LD_INT 1
27153: PUSH
27154: EMPTY
27155: LIST
27156: LIST
27157: PUSH
27158: LD_INT 3
27160: PUSH
27161: LD_INT 1
27163: NEG
27164: PUSH
27165: EMPTY
27166: LIST
27167: LIST
27168: PUSH
27169: LD_INT 4
27171: PUSH
27172: LD_INT 0
27174: PUSH
27175: EMPTY
27176: LIST
27177: LIST
27178: PUSH
27179: LD_INT 4
27181: PUSH
27182: LD_INT 1
27184: PUSH
27185: EMPTY
27186: LIST
27187: LIST
27188: PUSH
27189: LD_INT 4
27191: PUSH
27192: LD_INT 1
27194: NEG
27195: PUSH
27196: EMPTY
27197: LIST
27198: LIST
27199: PUSH
27200: LD_INT 5
27202: PUSH
27203: LD_INT 0
27205: PUSH
27206: EMPTY
27207: LIST
27208: LIST
27209: PUSH
27210: LD_INT 5
27212: PUSH
27213: LD_INT 1
27215: PUSH
27216: EMPTY
27217: LIST
27218: LIST
27219: PUSH
27220: LD_INT 5
27222: PUSH
27223: LD_INT 1
27225: NEG
27226: PUSH
27227: EMPTY
27228: LIST
27229: LIST
27230: PUSH
27231: LD_INT 6
27233: PUSH
27234: LD_INT 0
27236: PUSH
27237: EMPTY
27238: LIST
27239: LIST
27240: PUSH
27241: LD_INT 6
27243: PUSH
27244: LD_INT 1
27246: PUSH
27247: EMPTY
27248: LIST
27249: LIST
27250: PUSH
27251: EMPTY
27252: LIST
27253: LIST
27254: LIST
27255: LIST
27256: LIST
27257: LIST
27258: LIST
27259: LIST
27260: LIST
27261: LIST
27262: LIST
27263: LIST
27264: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
27265: LD_ADDR_VAR 0 31
27269: PUSH
27270: LD_INT 3
27272: PUSH
27273: LD_INT 2
27275: PUSH
27276: EMPTY
27277: LIST
27278: LIST
27279: PUSH
27280: LD_INT 3
27282: PUSH
27283: LD_INT 3
27285: PUSH
27286: EMPTY
27287: LIST
27288: LIST
27289: PUSH
27290: LD_INT 2
27292: PUSH
27293: LD_INT 3
27295: PUSH
27296: EMPTY
27297: LIST
27298: LIST
27299: PUSH
27300: LD_INT 4
27302: PUSH
27303: LD_INT 3
27305: PUSH
27306: EMPTY
27307: LIST
27308: LIST
27309: PUSH
27310: LD_INT 4
27312: PUSH
27313: LD_INT 4
27315: PUSH
27316: EMPTY
27317: LIST
27318: LIST
27319: PUSH
27320: LD_INT 3
27322: PUSH
27323: LD_INT 4
27325: PUSH
27326: EMPTY
27327: LIST
27328: LIST
27329: PUSH
27330: LD_INT 5
27332: PUSH
27333: LD_INT 4
27335: PUSH
27336: EMPTY
27337: LIST
27338: LIST
27339: PUSH
27340: LD_INT 5
27342: PUSH
27343: LD_INT 5
27345: PUSH
27346: EMPTY
27347: LIST
27348: LIST
27349: PUSH
27350: LD_INT 4
27352: PUSH
27353: LD_INT 5
27355: PUSH
27356: EMPTY
27357: LIST
27358: LIST
27359: PUSH
27360: LD_INT 6
27362: PUSH
27363: LD_INT 5
27365: PUSH
27366: EMPTY
27367: LIST
27368: LIST
27369: PUSH
27370: LD_INT 6
27372: PUSH
27373: LD_INT 6
27375: PUSH
27376: EMPTY
27377: LIST
27378: LIST
27379: PUSH
27380: LD_INT 5
27382: PUSH
27383: LD_INT 6
27385: PUSH
27386: EMPTY
27387: LIST
27388: LIST
27389: PUSH
27390: EMPTY
27391: LIST
27392: LIST
27393: LIST
27394: LIST
27395: LIST
27396: LIST
27397: LIST
27398: LIST
27399: LIST
27400: LIST
27401: LIST
27402: LIST
27403: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
27404: LD_ADDR_VAR 0 32
27408: PUSH
27409: LD_INT 1
27411: PUSH
27412: LD_INT 3
27414: PUSH
27415: EMPTY
27416: LIST
27417: LIST
27418: PUSH
27419: LD_INT 0
27421: PUSH
27422: LD_INT 3
27424: PUSH
27425: EMPTY
27426: LIST
27427: LIST
27428: PUSH
27429: LD_INT 1
27431: NEG
27432: PUSH
27433: LD_INT 2
27435: PUSH
27436: EMPTY
27437: LIST
27438: LIST
27439: PUSH
27440: LD_INT 1
27442: PUSH
27443: LD_INT 4
27445: PUSH
27446: EMPTY
27447: LIST
27448: LIST
27449: PUSH
27450: LD_INT 0
27452: PUSH
27453: LD_INT 4
27455: PUSH
27456: EMPTY
27457: LIST
27458: LIST
27459: PUSH
27460: LD_INT 1
27462: NEG
27463: PUSH
27464: LD_INT 3
27466: PUSH
27467: EMPTY
27468: LIST
27469: LIST
27470: PUSH
27471: LD_INT 1
27473: PUSH
27474: LD_INT 5
27476: PUSH
27477: EMPTY
27478: LIST
27479: LIST
27480: PUSH
27481: LD_INT 0
27483: PUSH
27484: LD_INT 5
27486: PUSH
27487: EMPTY
27488: LIST
27489: LIST
27490: PUSH
27491: LD_INT 1
27493: NEG
27494: PUSH
27495: LD_INT 4
27497: PUSH
27498: EMPTY
27499: LIST
27500: LIST
27501: PUSH
27502: LD_INT 1
27504: PUSH
27505: LD_INT 6
27507: PUSH
27508: EMPTY
27509: LIST
27510: LIST
27511: PUSH
27512: LD_INT 0
27514: PUSH
27515: LD_INT 6
27517: PUSH
27518: EMPTY
27519: LIST
27520: LIST
27521: PUSH
27522: LD_INT 1
27524: NEG
27525: PUSH
27526: LD_INT 5
27528: PUSH
27529: EMPTY
27530: LIST
27531: LIST
27532: PUSH
27533: EMPTY
27534: LIST
27535: LIST
27536: LIST
27537: LIST
27538: LIST
27539: LIST
27540: LIST
27541: LIST
27542: LIST
27543: LIST
27544: LIST
27545: LIST
27546: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
27547: LD_ADDR_VAR 0 33
27551: PUSH
27552: LD_INT 2
27554: NEG
27555: PUSH
27556: LD_INT 1
27558: PUSH
27559: EMPTY
27560: LIST
27561: LIST
27562: PUSH
27563: LD_INT 3
27565: NEG
27566: PUSH
27567: LD_INT 0
27569: PUSH
27570: EMPTY
27571: LIST
27572: LIST
27573: PUSH
27574: LD_INT 3
27576: NEG
27577: PUSH
27578: LD_INT 1
27580: NEG
27581: PUSH
27582: EMPTY
27583: LIST
27584: LIST
27585: PUSH
27586: LD_INT 3
27588: NEG
27589: PUSH
27590: LD_INT 1
27592: PUSH
27593: EMPTY
27594: LIST
27595: LIST
27596: PUSH
27597: LD_INT 4
27599: NEG
27600: PUSH
27601: LD_INT 0
27603: PUSH
27604: EMPTY
27605: LIST
27606: LIST
27607: PUSH
27608: LD_INT 4
27610: NEG
27611: PUSH
27612: LD_INT 1
27614: NEG
27615: PUSH
27616: EMPTY
27617: LIST
27618: LIST
27619: PUSH
27620: LD_INT 4
27622: NEG
27623: PUSH
27624: LD_INT 1
27626: PUSH
27627: EMPTY
27628: LIST
27629: LIST
27630: PUSH
27631: LD_INT 5
27633: NEG
27634: PUSH
27635: LD_INT 0
27637: PUSH
27638: EMPTY
27639: LIST
27640: LIST
27641: PUSH
27642: LD_INT 5
27644: NEG
27645: PUSH
27646: LD_INT 1
27648: NEG
27649: PUSH
27650: EMPTY
27651: LIST
27652: LIST
27653: PUSH
27654: LD_INT 5
27656: NEG
27657: PUSH
27658: LD_INT 1
27660: PUSH
27661: EMPTY
27662: LIST
27663: LIST
27664: PUSH
27665: LD_INT 6
27667: NEG
27668: PUSH
27669: LD_INT 0
27671: PUSH
27672: EMPTY
27673: LIST
27674: LIST
27675: PUSH
27676: LD_INT 6
27678: NEG
27679: PUSH
27680: LD_INT 1
27682: NEG
27683: PUSH
27684: EMPTY
27685: LIST
27686: LIST
27687: PUSH
27688: EMPTY
27689: LIST
27690: LIST
27691: LIST
27692: LIST
27693: LIST
27694: LIST
27695: LIST
27696: LIST
27697: LIST
27698: LIST
27699: LIST
27700: LIST
27701: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
27702: LD_ADDR_VAR 0 34
27706: PUSH
27707: LD_INT 2
27709: NEG
27710: PUSH
27711: LD_INT 3
27713: NEG
27714: PUSH
27715: EMPTY
27716: LIST
27717: LIST
27718: PUSH
27719: LD_INT 3
27721: NEG
27722: PUSH
27723: LD_INT 2
27725: NEG
27726: PUSH
27727: EMPTY
27728: LIST
27729: LIST
27730: PUSH
27731: LD_INT 3
27733: NEG
27734: PUSH
27735: LD_INT 3
27737: NEG
27738: PUSH
27739: EMPTY
27740: LIST
27741: LIST
27742: PUSH
27743: LD_INT 3
27745: NEG
27746: PUSH
27747: LD_INT 4
27749: NEG
27750: PUSH
27751: EMPTY
27752: LIST
27753: LIST
27754: PUSH
27755: LD_INT 4
27757: NEG
27758: PUSH
27759: LD_INT 3
27761: NEG
27762: PUSH
27763: EMPTY
27764: LIST
27765: LIST
27766: PUSH
27767: LD_INT 4
27769: NEG
27770: PUSH
27771: LD_INT 4
27773: NEG
27774: PUSH
27775: EMPTY
27776: LIST
27777: LIST
27778: PUSH
27779: LD_INT 4
27781: NEG
27782: PUSH
27783: LD_INT 5
27785: NEG
27786: PUSH
27787: EMPTY
27788: LIST
27789: LIST
27790: PUSH
27791: LD_INT 5
27793: NEG
27794: PUSH
27795: LD_INT 4
27797: NEG
27798: PUSH
27799: EMPTY
27800: LIST
27801: LIST
27802: PUSH
27803: LD_INT 5
27805: NEG
27806: PUSH
27807: LD_INT 5
27809: NEG
27810: PUSH
27811: EMPTY
27812: LIST
27813: LIST
27814: PUSH
27815: LD_INT 5
27817: NEG
27818: PUSH
27819: LD_INT 6
27821: NEG
27822: PUSH
27823: EMPTY
27824: LIST
27825: LIST
27826: PUSH
27827: LD_INT 6
27829: NEG
27830: PUSH
27831: LD_INT 5
27833: NEG
27834: PUSH
27835: EMPTY
27836: LIST
27837: LIST
27838: PUSH
27839: LD_INT 6
27841: NEG
27842: PUSH
27843: LD_INT 6
27845: NEG
27846: PUSH
27847: EMPTY
27848: LIST
27849: LIST
27850: PUSH
27851: EMPTY
27852: LIST
27853: LIST
27854: LIST
27855: LIST
27856: LIST
27857: LIST
27858: LIST
27859: LIST
27860: LIST
27861: LIST
27862: LIST
27863: LIST
27864: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
27865: LD_ADDR_VAR 0 41
27869: PUSH
27870: LD_INT 0
27872: PUSH
27873: LD_INT 2
27875: NEG
27876: PUSH
27877: EMPTY
27878: LIST
27879: LIST
27880: PUSH
27881: LD_INT 1
27883: NEG
27884: PUSH
27885: LD_INT 3
27887: NEG
27888: PUSH
27889: EMPTY
27890: LIST
27891: LIST
27892: PUSH
27893: LD_INT 1
27895: PUSH
27896: LD_INT 2
27898: NEG
27899: PUSH
27900: EMPTY
27901: LIST
27902: LIST
27903: PUSH
27904: EMPTY
27905: LIST
27906: LIST
27907: LIST
27908: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
27909: LD_ADDR_VAR 0 42
27913: PUSH
27914: LD_INT 2
27916: PUSH
27917: LD_INT 0
27919: PUSH
27920: EMPTY
27921: LIST
27922: LIST
27923: PUSH
27924: LD_INT 2
27926: PUSH
27927: LD_INT 1
27929: NEG
27930: PUSH
27931: EMPTY
27932: LIST
27933: LIST
27934: PUSH
27935: LD_INT 3
27937: PUSH
27938: LD_INT 1
27940: PUSH
27941: EMPTY
27942: LIST
27943: LIST
27944: PUSH
27945: EMPTY
27946: LIST
27947: LIST
27948: LIST
27949: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
27950: LD_ADDR_VAR 0 43
27954: PUSH
27955: LD_INT 2
27957: PUSH
27958: LD_INT 2
27960: PUSH
27961: EMPTY
27962: LIST
27963: LIST
27964: PUSH
27965: LD_INT 3
27967: PUSH
27968: LD_INT 2
27970: PUSH
27971: EMPTY
27972: LIST
27973: LIST
27974: PUSH
27975: LD_INT 2
27977: PUSH
27978: LD_INT 3
27980: PUSH
27981: EMPTY
27982: LIST
27983: LIST
27984: PUSH
27985: EMPTY
27986: LIST
27987: LIST
27988: LIST
27989: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
27990: LD_ADDR_VAR 0 44
27994: PUSH
27995: LD_INT 0
27997: PUSH
27998: LD_INT 2
28000: PUSH
28001: EMPTY
28002: LIST
28003: LIST
28004: PUSH
28005: LD_INT 1
28007: PUSH
28008: LD_INT 3
28010: PUSH
28011: EMPTY
28012: LIST
28013: LIST
28014: PUSH
28015: LD_INT 1
28017: NEG
28018: PUSH
28019: LD_INT 2
28021: PUSH
28022: EMPTY
28023: LIST
28024: LIST
28025: PUSH
28026: EMPTY
28027: LIST
28028: LIST
28029: LIST
28030: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
28031: LD_ADDR_VAR 0 45
28035: PUSH
28036: LD_INT 2
28038: NEG
28039: PUSH
28040: LD_INT 0
28042: PUSH
28043: EMPTY
28044: LIST
28045: LIST
28046: PUSH
28047: LD_INT 2
28049: NEG
28050: PUSH
28051: LD_INT 1
28053: PUSH
28054: EMPTY
28055: LIST
28056: LIST
28057: PUSH
28058: LD_INT 3
28060: NEG
28061: PUSH
28062: LD_INT 1
28064: NEG
28065: PUSH
28066: EMPTY
28067: LIST
28068: LIST
28069: PUSH
28070: EMPTY
28071: LIST
28072: LIST
28073: LIST
28074: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
28075: LD_ADDR_VAR 0 46
28079: PUSH
28080: LD_INT 2
28082: NEG
28083: PUSH
28084: LD_INT 2
28086: NEG
28087: PUSH
28088: EMPTY
28089: LIST
28090: LIST
28091: PUSH
28092: LD_INT 2
28094: NEG
28095: PUSH
28096: LD_INT 3
28098: NEG
28099: PUSH
28100: EMPTY
28101: LIST
28102: LIST
28103: PUSH
28104: LD_INT 3
28106: NEG
28107: PUSH
28108: LD_INT 2
28110: NEG
28111: PUSH
28112: EMPTY
28113: LIST
28114: LIST
28115: PUSH
28116: EMPTY
28117: LIST
28118: LIST
28119: LIST
28120: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
28121: LD_ADDR_VAR 0 47
28125: PUSH
28126: LD_INT 2
28128: NEG
28129: PUSH
28130: LD_INT 3
28132: NEG
28133: PUSH
28134: EMPTY
28135: LIST
28136: LIST
28137: PUSH
28138: LD_INT 1
28140: NEG
28141: PUSH
28142: LD_INT 3
28144: NEG
28145: PUSH
28146: EMPTY
28147: LIST
28148: LIST
28149: PUSH
28150: EMPTY
28151: LIST
28152: LIST
28153: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
28154: LD_ADDR_VAR 0 48
28158: PUSH
28159: LD_INT 1
28161: PUSH
28162: LD_INT 2
28164: NEG
28165: PUSH
28166: EMPTY
28167: LIST
28168: LIST
28169: PUSH
28170: LD_INT 2
28172: PUSH
28173: LD_INT 1
28175: NEG
28176: PUSH
28177: EMPTY
28178: LIST
28179: LIST
28180: PUSH
28181: EMPTY
28182: LIST
28183: LIST
28184: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
28185: LD_ADDR_VAR 0 49
28189: PUSH
28190: LD_INT 3
28192: PUSH
28193: LD_INT 1
28195: PUSH
28196: EMPTY
28197: LIST
28198: LIST
28199: PUSH
28200: LD_INT 3
28202: PUSH
28203: LD_INT 2
28205: PUSH
28206: EMPTY
28207: LIST
28208: LIST
28209: PUSH
28210: EMPTY
28211: LIST
28212: LIST
28213: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
28214: LD_ADDR_VAR 0 50
28218: PUSH
28219: LD_INT 2
28221: PUSH
28222: LD_INT 3
28224: PUSH
28225: EMPTY
28226: LIST
28227: LIST
28228: PUSH
28229: LD_INT 1
28231: PUSH
28232: LD_INT 3
28234: PUSH
28235: EMPTY
28236: LIST
28237: LIST
28238: PUSH
28239: EMPTY
28240: LIST
28241: LIST
28242: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
28243: LD_ADDR_VAR 0 51
28247: PUSH
28248: LD_INT 1
28250: NEG
28251: PUSH
28252: LD_INT 2
28254: PUSH
28255: EMPTY
28256: LIST
28257: LIST
28258: PUSH
28259: LD_INT 2
28261: NEG
28262: PUSH
28263: LD_INT 1
28265: PUSH
28266: EMPTY
28267: LIST
28268: LIST
28269: PUSH
28270: EMPTY
28271: LIST
28272: LIST
28273: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
28274: LD_ADDR_VAR 0 52
28278: PUSH
28279: LD_INT 3
28281: NEG
28282: PUSH
28283: LD_INT 1
28285: NEG
28286: PUSH
28287: EMPTY
28288: LIST
28289: LIST
28290: PUSH
28291: LD_INT 3
28293: NEG
28294: PUSH
28295: LD_INT 2
28297: NEG
28298: PUSH
28299: EMPTY
28300: LIST
28301: LIST
28302: PUSH
28303: EMPTY
28304: LIST
28305: LIST
28306: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
28307: LD_ADDR_VAR 0 53
28311: PUSH
28312: LD_INT 1
28314: NEG
28315: PUSH
28316: LD_INT 3
28318: NEG
28319: PUSH
28320: EMPTY
28321: LIST
28322: LIST
28323: PUSH
28324: LD_INT 0
28326: PUSH
28327: LD_INT 3
28329: NEG
28330: PUSH
28331: EMPTY
28332: LIST
28333: LIST
28334: PUSH
28335: LD_INT 1
28337: PUSH
28338: LD_INT 2
28340: NEG
28341: PUSH
28342: EMPTY
28343: LIST
28344: LIST
28345: PUSH
28346: EMPTY
28347: LIST
28348: LIST
28349: LIST
28350: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
28351: LD_ADDR_VAR 0 54
28355: PUSH
28356: LD_INT 2
28358: PUSH
28359: LD_INT 1
28361: NEG
28362: PUSH
28363: EMPTY
28364: LIST
28365: LIST
28366: PUSH
28367: LD_INT 3
28369: PUSH
28370: LD_INT 0
28372: PUSH
28373: EMPTY
28374: LIST
28375: LIST
28376: PUSH
28377: LD_INT 3
28379: PUSH
28380: LD_INT 1
28382: PUSH
28383: EMPTY
28384: LIST
28385: LIST
28386: PUSH
28387: EMPTY
28388: LIST
28389: LIST
28390: LIST
28391: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
28392: LD_ADDR_VAR 0 55
28396: PUSH
28397: LD_INT 3
28399: PUSH
28400: LD_INT 2
28402: PUSH
28403: EMPTY
28404: LIST
28405: LIST
28406: PUSH
28407: LD_INT 3
28409: PUSH
28410: LD_INT 3
28412: PUSH
28413: EMPTY
28414: LIST
28415: LIST
28416: PUSH
28417: LD_INT 2
28419: PUSH
28420: LD_INT 3
28422: PUSH
28423: EMPTY
28424: LIST
28425: LIST
28426: PUSH
28427: EMPTY
28428: LIST
28429: LIST
28430: LIST
28431: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
28432: LD_ADDR_VAR 0 56
28436: PUSH
28437: LD_INT 1
28439: PUSH
28440: LD_INT 3
28442: PUSH
28443: EMPTY
28444: LIST
28445: LIST
28446: PUSH
28447: LD_INT 0
28449: PUSH
28450: LD_INT 3
28452: PUSH
28453: EMPTY
28454: LIST
28455: LIST
28456: PUSH
28457: LD_INT 1
28459: NEG
28460: PUSH
28461: LD_INT 2
28463: PUSH
28464: EMPTY
28465: LIST
28466: LIST
28467: PUSH
28468: EMPTY
28469: LIST
28470: LIST
28471: LIST
28472: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
28473: LD_ADDR_VAR 0 57
28477: PUSH
28478: LD_INT 2
28480: NEG
28481: PUSH
28482: LD_INT 1
28484: PUSH
28485: EMPTY
28486: LIST
28487: LIST
28488: PUSH
28489: LD_INT 3
28491: NEG
28492: PUSH
28493: LD_INT 0
28495: PUSH
28496: EMPTY
28497: LIST
28498: LIST
28499: PUSH
28500: LD_INT 3
28502: NEG
28503: PUSH
28504: LD_INT 1
28506: NEG
28507: PUSH
28508: EMPTY
28509: LIST
28510: LIST
28511: PUSH
28512: EMPTY
28513: LIST
28514: LIST
28515: LIST
28516: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
28517: LD_ADDR_VAR 0 58
28521: PUSH
28522: LD_INT 2
28524: NEG
28525: PUSH
28526: LD_INT 3
28528: NEG
28529: PUSH
28530: EMPTY
28531: LIST
28532: LIST
28533: PUSH
28534: LD_INT 3
28536: NEG
28537: PUSH
28538: LD_INT 2
28540: NEG
28541: PUSH
28542: EMPTY
28543: LIST
28544: LIST
28545: PUSH
28546: LD_INT 3
28548: NEG
28549: PUSH
28550: LD_INT 3
28552: NEG
28553: PUSH
28554: EMPTY
28555: LIST
28556: LIST
28557: PUSH
28558: EMPTY
28559: LIST
28560: LIST
28561: LIST
28562: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
28563: LD_ADDR_VAR 0 59
28567: PUSH
28568: LD_INT 1
28570: NEG
28571: PUSH
28572: LD_INT 2
28574: NEG
28575: PUSH
28576: EMPTY
28577: LIST
28578: LIST
28579: PUSH
28580: LD_INT 0
28582: PUSH
28583: LD_INT 2
28585: NEG
28586: PUSH
28587: EMPTY
28588: LIST
28589: LIST
28590: PUSH
28591: LD_INT 1
28593: PUSH
28594: LD_INT 1
28596: NEG
28597: PUSH
28598: EMPTY
28599: LIST
28600: LIST
28601: PUSH
28602: EMPTY
28603: LIST
28604: LIST
28605: LIST
28606: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
28607: LD_ADDR_VAR 0 60
28611: PUSH
28612: LD_INT 1
28614: PUSH
28615: LD_INT 1
28617: NEG
28618: PUSH
28619: EMPTY
28620: LIST
28621: LIST
28622: PUSH
28623: LD_INT 2
28625: PUSH
28626: LD_INT 0
28628: PUSH
28629: EMPTY
28630: LIST
28631: LIST
28632: PUSH
28633: LD_INT 2
28635: PUSH
28636: LD_INT 1
28638: PUSH
28639: EMPTY
28640: LIST
28641: LIST
28642: PUSH
28643: EMPTY
28644: LIST
28645: LIST
28646: LIST
28647: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
28648: LD_ADDR_VAR 0 61
28652: PUSH
28653: LD_INT 2
28655: PUSH
28656: LD_INT 1
28658: PUSH
28659: EMPTY
28660: LIST
28661: LIST
28662: PUSH
28663: LD_INT 2
28665: PUSH
28666: LD_INT 2
28668: PUSH
28669: EMPTY
28670: LIST
28671: LIST
28672: PUSH
28673: LD_INT 1
28675: PUSH
28676: LD_INT 2
28678: PUSH
28679: EMPTY
28680: LIST
28681: LIST
28682: PUSH
28683: EMPTY
28684: LIST
28685: LIST
28686: LIST
28687: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
28688: LD_ADDR_VAR 0 62
28692: PUSH
28693: LD_INT 1
28695: PUSH
28696: LD_INT 2
28698: PUSH
28699: EMPTY
28700: LIST
28701: LIST
28702: PUSH
28703: LD_INT 0
28705: PUSH
28706: LD_INT 2
28708: PUSH
28709: EMPTY
28710: LIST
28711: LIST
28712: PUSH
28713: LD_INT 1
28715: NEG
28716: PUSH
28717: LD_INT 1
28719: PUSH
28720: EMPTY
28721: LIST
28722: LIST
28723: PUSH
28724: EMPTY
28725: LIST
28726: LIST
28727: LIST
28728: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
28729: LD_ADDR_VAR 0 63
28733: PUSH
28734: LD_INT 1
28736: NEG
28737: PUSH
28738: LD_INT 1
28740: PUSH
28741: EMPTY
28742: LIST
28743: LIST
28744: PUSH
28745: LD_INT 2
28747: NEG
28748: PUSH
28749: LD_INT 0
28751: PUSH
28752: EMPTY
28753: LIST
28754: LIST
28755: PUSH
28756: LD_INT 2
28758: NEG
28759: PUSH
28760: LD_INT 1
28762: NEG
28763: PUSH
28764: EMPTY
28765: LIST
28766: LIST
28767: PUSH
28768: EMPTY
28769: LIST
28770: LIST
28771: LIST
28772: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28773: LD_ADDR_VAR 0 64
28777: PUSH
28778: LD_INT 1
28780: NEG
28781: PUSH
28782: LD_INT 2
28784: NEG
28785: PUSH
28786: EMPTY
28787: LIST
28788: LIST
28789: PUSH
28790: LD_INT 2
28792: NEG
28793: PUSH
28794: LD_INT 1
28796: NEG
28797: PUSH
28798: EMPTY
28799: LIST
28800: LIST
28801: PUSH
28802: LD_INT 2
28804: NEG
28805: PUSH
28806: LD_INT 2
28808: NEG
28809: PUSH
28810: EMPTY
28811: LIST
28812: LIST
28813: PUSH
28814: EMPTY
28815: LIST
28816: LIST
28817: LIST
28818: ST_TO_ADDR
// end ; 2 :
28819: GO 32085
28821: LD_INT 2
28823: DOUBLE
28824: EQUAL
28825: IFTRUE 28829
28827: GO 32084
28829: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
28830: LD_ADDR_VAR 0 29
28834: PUSH
28835: LD_INT 4
28837: PUSH
28838: LD_INT 0
28840: PUSH
28841: EMPTY
28842: LIST
28843: LIST
28844: PUSH
28845: LD_INT 4
28847: PUSH
28848: LD_INT 1
28850: NEG
28851: PUSH
28852: EMPTY
28853: LIST
28854: LIST
28855: PUSH
28856: LD_INT 5
28858: PUSH
28859: LD_INT 0
28861: PUSH
28862: EMPTY
28863: LIST
28864: LIST
28865: PUSH
28866: LD_INT 5
28868: PUSH
28869: LD_INT 1
28871: PUSH
28872: EMPTY
28873: LIST
28874: LIST
28875: PUSH
28876: LD_INT 4
28878: PUSH
28879: LD_INT 1
28881: PUSH
28882: EMPTY
28883: LIST
28884: LIST
28885: PUSH
28886: LD_INT 3
28888: PUSH
28889: LD_INT 0
28891: PUSH
28892: EMPTY
28893: LIST
28894: LIST
28895: PUSH
28896: LD_INT 3
28898: PUSH
28899: LD_INT 1
28901: NEG
28902: PUSH
28903: EMPTY
28904: LIST
28905: LIST
28906: PUSH
28907: LD_INT 3
28909: PUSH
28910: LD_INT 2
28912: NEG
28913: PUSH
28914: EMPTY
28915: LIST
28916: LIST
28917: PUSH
28918: LD_INT 5
28920: PUSH
28921: LD_INT 2
28923: PUSH
28924: EMPTY
28925: LIST
28926: LIST
28927: PUSH
28928: LD_INT 3
28930: PUSH
28931: LD_INT 3
28933: PUSH
28934: EMPTY
28935: LIST
28936: LIST
28937: PUSH
28938: LD_INT 3
28940: PUSH
28941: LD_INT 2
28943: PUSH
28944: EMPTY
28945: LIST
28946: LIST
28947: PUSH
28948: LD_INT 4
28950: PUSH
28951: LD_INT 3
28953: PUSH
28954: EMPTY
28955: LIST
28956: LIST
28957: PUSH
28958: LD_INT 4
28960: PUSH
28961: LD_INT 4
28963: PUSH
28964: EMPTY
28965: LIST
28966: LIST
28967: PUSH
28968: LD_INT 3
28970: PUSH
28971: LD_INT 4
28973: PUSH
28974: EMPTY
28975: LIST
28976: LIST
28977: PUSH
28978: LD_INT 2
28980: PUSH
28981: LD_INT 3
28983: PUSH
28984: EMPTY
28985: LIST
28986: LIST
28987: PUSH
28988: LD_INT 2
28990: PUSH
28991: LD_INT 2
28993: PUSH
28994: EMPTY
28995: LIST
28996: LIST
28997: PUSH
28998: LD_INT 4
29000: PUSH
29001: LD_INT 2
29003: PUSH
29004: EMPTY
29005: LIST
29006: LIST
29007: PUSH
29008: LD_INT 2
29010: PUSH
29011: LD_INT 4
29013: PUSH
29014: EMPTY
29015: LIST
29016: LIST
29017: PUSH
29018: LD_INT 0
29020: PUSH
29021: LD_INT 4
29023: PUSH
29024: EMPTY
29025: LIST
29026: LIST
29027: PUSH
29028: LD_INT 0
29030: PUSH
29031: LD_INT 3
29033: PUSH
29034: EMPTY
29035: LIST
29036: LIST
29037: PUSH
29038: LD_INT 1
29040: PUSH
29041: LD_INT 4
29043: PUSH
29044: EMPTY
29045: LIST
29046: LIST
29047: PUSH
29048: LD_INT 1
29050: PUSH
29051: LD_INT 5
29053: PUSH
29054: EMPTY
29055: LIST
29056: LIST
29057: PUSH
29058: LD_INT 0
29060: PUSH
29061: LD_INT 5
29063: PUSH
29064: EMPTY
29065: LIST
29066: LIST
29067: PUSH
29068: LD_INT 1
29070: NEG
29071: PUSH
29072: LD_INT 4
29074: PUSH
29075: EMPTY
29076: LIST
29077: LIST
29078: PUSH
29079: LD_INT 1
29081: NEG
29082: PUSH
29083: LD_INT 3
29085: PUSH
29086: EMPTY
29087: LIST
29088: LIST
29089: PUSH
29090: LD_INT 2
29092: PUSH
29093: LD_INT 5
29095: PUSH
29096: EMPTY
29097: LIST
29098: LIST
29099: PUSH
29100: LD_INT 2
29102: NEG
29103: PUSH
29104: LD_INT 3
29106: PUSH
29107: EMPTY
29108: LIST
29109: LIST
29110: PUSH
29111: LD_INT 3
29113: NEG
29114: PUSH
29115: LD_INT 0
29117: PUSH
29118: EMPTY
29119: LIST
29120: LIST
29121: PUSH
29122: LD_INT 3
29124: NEG
29125: PUSH
29126: LD_INT 1
29128: NEG
29129: PUSH
29130: EMPTY
29131: LIST
29132: LIST
29133: PUSH
29134: LD_INT 2
29136: NEG
29137: PUSH
29138: LD_INT 0
29140: PUSH
29141: EMPTY
29142: LIST
29143: LIST
29144: PUSH
29145: LD_INT 2
29147: NEG
29148: PUSH
29149: LD_INT 1
29151: PUSH
29152: EMPTY
29153: LIST
29154: LIST
29155: PUSH
29156: LD_INT 3
29158: NEG
29159: PUSH
29160: LD_INT 1
29162: PUSH
29163: EMPTY
29164: LIST
29165: LIST
29166: PUSH
29167: LD_INT 4
29169: NEG
29170: PUSH
29171: LD_INT 0
29173: PUSH
29174: EMPTY
29175: LIST
29176: LIST
29177: PUSH
29178: LD_INT 4
29180: NEG
29181: PUSH
29182: LD_INT 1
29184: NEG
29185: PUSH
29186: EMPTY
29187: LIST
29188: LIST
29189: PUSH
29190: LD_INT 4
29192: NEG
29193: PUSH
29194: LD_INT 2
29196: NEG
29197: PUSH
29198: EMPTY
29199: LIST
29200: LIST
29201: PUSH
29202: LD_INT 2
29204: NEG
29205: PUSH
29206: LD_INT 2
29208: PUSH
29209: EMPTY
29210: LIST
29211: LIST
29212: PUSH
29213: LD_INT 4
29215: NEG
29216: PUSH
29217: LD_INT 4
29219: NEG
29220: PUSH
29221: EMPTY
29222: LIST
29223: LIST
29224: PUSH
29225: LD_INT 4
29227: NEG
29228: PUSH
29229: LD_INT 5
29231: NEG
29232: PUSH
29233: EMPTY
29234: LIST
29235: LIST
29236: PUSH
29237: LD_INT 3
29239: NEG
29240: PUSH
29241: LD_INT 4
29243: NEG
29244: PUSH
29245: EMPTY
29246: LIST
29247: LIST
29248: PUSH
29249: LD_INT 3
29251: NEG
29252: PUSH
29253: LD_INT 3
29255: NEG
29256: PUSH
29257: EMPTY
29258: LIST
29259: LIST
29260: PUSH
29261: LD_INT 4
29263: NEG
29264: PUSH
29265: LD_INT 3
29267: NEG
29268: PUSH
29269: EMPTY
29270: LIST
29271: LIST
29272: PUSH
29273: LD_INT 5
29275: NEG
29276: PUSH
29277: LD_INT 4
29279: NEG
29280: PUSH
29281: EMPTY
29282: LIST
29283: LIST
29284: PUSH
29285: LD_INT 5
29287: NEG
29288: PUSH
29289: LD_INT 5
29291: NEG
29292: PUSH
29293: EMPTY
29294: LIST
29295: LIST
29296: PUSH
29297: LD_INT 3
29299: NEG
29300: PUSH
29301: LD_INT 5
29303: NEG
29304: PUSH
29305: EMPTY
29306: LIST
29307: LIST
29308: PUSH
29309: LD_INT 5
29311: NEG
29312: PUSH
29313: LD_INT 3
29315: NEG
29316: PUSH
29317: EMPTY
29318: LIST
29319: LIST
29320: PUSH
29321: EMPTY
29322: LIST
29323: LIST
29324: LIST
29325: LIST
29326: LIST
29327: LIST
29328: LIST
29329: LIST
29330: LIST
29331: LIST
29332: LIST
29333: LIST
29334: LIST
29335: LIST
29336: LIST
29337: LIST
29338: LIST
29339: LIST
29340: LIST
29341: LIST
29342: LIST
29343: LIST
29344: LIST
29345: LIST
29346: LIST
29347: LIST
29348: LIST
29349: LIST
29350: LIST
29351: LIST
29352: LIST
29353: LIST
29354: LIST
29355: LIST
29356: LIST
29357: LIST
29358: LIST
29359: LIST
29360: LIST
29361: LIST
29362: LIST
29363: LIST
29364: LIST
29365: LIST
29366: LIST
29367: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
29368: LD_ADDR_VAR 0 30
29372: PUSH
29373: LD_INT 4
29375: PUSH
29376: LD_INT 4
29378: PUSH
29379: EMPTY
29380: LIST
29381: LIST
29382: PUSH
29383: LD_INT 4
29385: PUSH
29386: LD_INT 3
29388: PUSH
29389: EMPTY
29390: LIST
29391: LIST
29392: PUSH
29393: LD_INT 5
29395: PUSH
29396: LD_INT 4
29398: PUSH
29399: EMPTY
29400: LIST
29401: LIST
29402: PUSH
29403: LD_INT 5
29405: PUSH
29406: LD_INT 5
29408: PUSH
29409: EMPTY
29410: LIST
29411: LIST
29412: PUSH
29413: LD_INT 4
29415: PUSH
29416: LD_INT 5
29418: PUSH
29419: EMPTY
29420: LIST
29421: LIST
29422: PUSH
29423: LD_INT 3
29425: PUSH
29426: LD_INT 4
29428: PUSH
29429: EMPTY
29430: LIST
29431: LIST
29432: PUSH
29433: LD_INT 3
29435: PUSH
29436: LD_INT 3
29438: PUSH
29439: EMPTY
29440: LIST
29441: LIST
29442: PUSH
29443: LD_INT 5
29445: PUSH
29446: LD_INT 3
29448: PUSH
29449: EMPTY
29450: LIST
29451: LIST
29452: PUSH
29453: LD_INT 3
29455: PUSH
29456: LD_INT 5
29458: PUSH
29459: EMPTY
29460: LIST
29461: LIST
29462: PUSH
29463: LD_INT 0
29465: PUSH
29466: LD_INT 3
29468: PUSH
29469: EMPTY
29470: LIST
29471: LIST
29472: PUSH
29473: LD_INT 0
29475: PUSH
29476: LD_INT 2
29478: PUSH
29479: EMPTY
29480: LIST
29481: LIST
29482: PUSH
29483: LD_INT 1
29485: PUSH
29486: LD_INT 3
29488: PUSH
29489: EMPTY
29490: LIST
29491: LIST
29492: PUSH
29493: LD_INT 1
29495: PUSH
29496: LD_INT 4
29498: PUSH
29499: EMPTY
29500: LIST
29501: LIST
29502: PUSH
29503: LD_INT 0
29505: PUSH
29506: LD_INT 4
29508: PUSH
29509: EMPTY
29510: LIST
29511: LIST
29512: PUSH
29513: LD_INT 1
29515: NEG
29516: PUSH
29517: LD_INT 3
29519: PUSH
29520: EMPTY
29521: LIST
29522: LIST
29523: PUSH
29524: LD_INT 1
29526: NEG
29527: PUSH
29528: LD_INT 2
29530: PUSH
29531: EMPTY
29532: LIST
29533: LIST
29534: PUSH
29535: LD_INT 2
29537: PUSH
29538: LD_INT 4
29540: PUSH
29541: EMPTY
29542: LIST
29543: LIST
29544: PUSH
29545: LD_INT 2
29547: NEG
29548: PUSH
29549: LD_INT 2
29551: PUSH
29552: EMPTY
29553: LIST
29554: LIST
29555: PUSH
29556: LD_INT 4
29558: NEG
29559: PUSH
29560: LD_INT 0
29562: PUSH
29563: EMPTY
29564: LIST
29565: LIST
29566: PUSH
29567: LD_INT 4
29569: NEG
29570: PUSH
29571: LD_INT 1
29573: NEG
29574: PUSH
29575: EMPTY
29576: LIST
29577: LIST
29578: PUSH
29579: LD_INT 3
29581: NEG
29582: PUSH
29583: LD_INT 0
29585: PUSH
29586: EMPTY
29587: LIST
29588: LIST
29589: PUSH
29590: LD_INT 3
29592: NEG
29593: PUSH
29594: LD_INT 1
29596: PUSH
29597: EMPTY
29598: LIST
29599: LIST
29600: PUSH
29601: LD_INT 4
29603: NEG
29604: PUSH
29605: LD_INT 1
29607: PUSH
29608: EMPTY
29609: LIST
29610: LIST
29611: PUSH
29612: LD_INT 5
29614: NEG
29615: PUSH
29616: LD_INT 0
29618: PUSH
29619: EMPTY
29620: LIST
29621: LIST
29622: PUSH
29623: LD_INT 5
29625: NEG
29626: PUSH
29627: LD_INT 1
29629: NEG
29630: PUSH
29631: EMPTY
29632: LIST
29633: LIST
29634: PUSH
29635: LD_INT 5
29637: NEG
29638: PUSH
29639: LD_INT 2
29641: NEG
29642: PUSH
29643: EMPTY
29644: LIST
29645: LIST
29646: PUSH
29647: LD_INT 3
29649: NEG
29650: PUSH
29651: LD_INT 2
29653: PUSH
29654: EMPTY
29655: LIST
29656: LIST
29657: PUSH
29658: LD_INT 3
29660: NEG
29661: PUSH
29662: LD_INT 3
29664: NEG
29665: PUSH
29666: EMPTY
29667: LIST
29668: LIST
29669: PUSH
29670: LD_INT 3
29672: NEG
29673: PUSH
29674: LD_INT 4
29676: NEG
29677: PUSH
29678: EMPTY
29679: LIST
29680: LIST
29681: PUSH
29682: LD_INT 2
29684: NEG
29685: PUSH
29686: LD_INT 3
29688: NEG
29689: PUSH
29690: EMPTY
29691: LIST
29692: LIST
29693: PUSH
29694: LD_INT 2
29696: NEG
29697: PUSH
29698: LD_INT 2
29700: NEG
29701: PUSH
29702: EMPTY
29703: LIST
29704: LIST
29705: PUSH
29706: LD_INT 3
29708: NEG
29709: PUSH
29710: LD_INT 2
29712: NEG
29713: PUSH
29714: EMPTY
29715: LIST
29716: LIST
29717: PUSH
29718: LD_INT 4
29720: NEG
29721: PUSH
29722: LD_INT 3
29724: NEG
29725: PUSH
29726: EMPTY
29727: LIST
29728: LIST
29729: PUSH
29730: LD_INT 4
29732: NEG
29733: PUSH
29734: LD_INT 4
29736: NEG
29737: PUSH
29738: EMPTY
29739: LIST
29740: LIST
29741: PUSH
29742: LD_INT 2
29744: NEG
29745: PUSH
29746: LD_INT 4
29748: NEG
29749: PUSH
29750: EMPTY
29751: LIST
29752: LIST
29753: PUSH
29754: LD_INT 4
29756: NEG
29757: PUSH
29758: LD_INT 2
29760: NEG
29761: PUSH
29762: EMPTY
29763: LIST
29764: LIST
29765: PUSH
29766: LD_INT 0
29768: PUSH
29769: LD_INT 4
29771: NEG
29772: PUSH
29773: EMPTY
29774: LIST
29775: LIST
29776: PUSH
29777: LD_INT 0
29779: PUSH
29780: LD_INT 5
29782: NEG
29783: PUSH
29784: EMPTY
29785: LIST
29786: LIST
29787: PUSH
29788: LD_INT 1
29790: PUSH
29791: LD_INT 4
29793: NEG
29794: PUSH
29795: EMPTY
29796: LIST
29797: LIST
29798: PUSH
29799: LD_INT 1
29801: PUSH
29802: LD_INT 3
29804: NEG
29805: PUSH
29806: EMPTY
29807: LIST
29808: LIST
29809: PUSH
29810: LD_INT 0
29812: PUSH
29813: LD_INT 3
29815: NEG
29816: PUSH
29817: EMPTY
29818: LIST
29819: LIST
29820: PUSH
29821: LD_INT 1
29823: NEG
29824: PUSH
29825: LD_INT 4
29827: NEG
29828: PUSH
29829: EMPTY
29830: LIST
29831: LIST
29832: PUSH
29833: LD_INT 1
29835: NEG
29836: PUSH
29837: LD_INT 5
29839: NEG
29840: PUSH
29841: EMPTY
29842: LIST
29843: LIST
29844: PUSH
29845: LD_INT 2
29847: PUSH
29848: LD_INT 3
29850: NEG
29851: PUSH
29852: EMPTY
29853: LIST
29854: LIST
29855: PUSH
29856: LD_INT 2
29858: NEG
29859: PUSH
29860: LD_INT 5
29862: NEG
29863: PUSH
29864: EMPTY
29865: LIST
29866: LIST
29867: PUSH
29868: EMPTY
29869: LIST
29870: LIST
29871: LIST
29872: LIST
29873: LIST
29874: LIST
29875: LIST
29876: LIST
29877: LIST
29878: LIST
29879: LIST
29880: LIST
29881: LIST
29882: LIST
29883: LIST
29884: LIST
29885: LIST
29886: LIST
29887: LIST
29888: LIST
29889: LIST
29890: LIST
29891: LIST
29892: LIST
29893: LIST
29894: LIST
29895: LIST
29896: LIST
29897: LIST
29898: LIST
29899: LIST
29900: LIST
29901: LIST
29902: LIST
29903: LIST
29904: LIST
29905: LIST
29906: LIST
29907: LIST
29908: LIST
29909: LIST
29910: LIST
29911: LIST
29912: LIST
29913: LIST
29914: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
29915: LD_ADDR_VAR 0 31
29919: PUSH
29920: LD_INT 0
29922: PUSH
29923: LD_INT 4
29925: PUSH
29926: EMPTY
29927: LIST
29928: LIST
29929: PUSH
29930: LD_INT 0
29932: PUSH
29933: LD_INT 3
29935: PUSH
29936: EMPTY
29937: LIST
29938: LIST
29939: PUSH
29940: LD_INT 1
29942: PUSH
29943: LD_INT 4
29945: PUSH
29946: EMPTY
29947: LIST
29948: LIST
29949: PUSH
29950: LD_INT 1
29952: PUSH
29953: LD_INT 5
29955: PUSH
29956: EMPTY
29957: LIST
29958: LIST
29959: PUSH
29960: LD_INT 0
29962: PUSH
29963: LD_INT 5
29965: PUSH
29966: EMPTY
29967: LIST
29968: LIST
29969: PUSH
29970: LD_INT 1
29972: NEG
29973: PUSH
29974: LD_INT 4
29976: PUSH
29977: EMPTY
29978: LIST
29979: LIST
29980: PUSH
29981: LD_INT 1
29983: NEG
29984: PUSH
29985: LD_INT 3
29987: PUSH
29988: EMPTY
29989: LIST
29990: LIST
29991: PUSH
29992: LD_INT 2
29994: PUSH
29995: LD_INT 5
29997: PUSH
29998: EMPTY
29999: LIST
30000: LIST
30001: PUSH
30002: LD_INT 2
30004: NEG
30005: PUSH
30006: LD_INT 3
30008: PUSH
30009: EMPTY
30010: LIST
30011: LIST
30012: PUSH
30013: LD_INT 3
30015: NEG
30016: PUSH
30017: LD_INT 0
30019: PUSH
30020: EMPTY
30021: LIST
30022: LIST
30023: PUSH
30024: LD_INT 3
30026: NEG
30027: PUSH
30028: LD_INT 1
30030: NEG
30031: PUSH
30032: EMPTY
30033: LIST
30034: LIST
30035: PUSH
30036: LD_INT 2
30038: NEG
30039: PUSH
30040: LD_INT 0
30042: PUSH
30043: EMPTY
30044: LIST
30045: LIST
30046: PUSH
30047: LD_INT 2
30049: NEG
30050: PUSH
30051: LD_INT 1
30053: PUSH
30054: EMPTY
30055: LIST
30056: LIST
30057: PUSH
30058: LD_INT 3
30060: NEG
30061: PUSH
30062: LD_INT 1
30064: PUSH
30065: EMPTY
30066: LIST
30067: LIST
30068: PUSH
30069: LD_INT 4
30071: NEG
30072: PUSH
30073: LD_INT 0
30075: PUSH
30076: EMPTY
30077: LIST
30078: LIST
30079: PUSH
30080: LD_INT 4
30082: NEG
30083: PUSH
30084: LD_INT 1
30086: NEG
30087: PUSH
30088: EMPTY
30089: LIST
30090: LIST
30091: PUSH
30092: LD_INT 4
30094: NEG
30095: PUSH
30096: LD_INT 2
30098: NEG
30099: PUSH
30100: EMPTY
30101: LIST
30102: LIST
30103: PUSH
30104: LD_INT 2
30106: NEG
30107: PUSH
30108: LD_INT 2
30110: PUSH
30111: EMPTY
30112: LIST
30113: LIST
30114: PUSH
30115: LD_INT 4
30117: NEG
30118: PUSH
30119: LD_INT 4
30121: NEG
30122: PUSH
30123: EMPTY
30124: LIST
30125: LIST
30126: PUSH
30127: LD_INT 4
30129: NEG
30130: PUSH
30131: LD_INT 5
30133: NEG
30134: PUSH
30135: EMPTY
30136: LIST
30137: LIST
30138: PUSH
30139: LD_INT 3
30141: NEG
30142: PUSH
30143: LD_INT 4
30145: NEG
30146: PUSH
30147: EMPTY
30148: LIST
30149: LIST
30150: PUSH
30151: LD_INT 3
30153: NEG
30154: PUSH
30155: LD_INT 3
30157: NEG
30158: PUSH
30159: EMPTY
30160: LIST
30161: LIST
30162: PUSH
30163: LD_INT 4
30165: NEG
30166: PUSH
30167: LD_INT 3
30169: NEG
30170: PUSH
30171: EMPTY
30172: LIST
30173: LIST
30174: PUSH
30175: LD_INT 5
30177: NEG
30178: PUSH
30179: LD_INT 4
30181: NEG
30182: PUSH
30183: EMPTY
30184: LIST
30185: LIST
30186: PUSH
30187: LD_INT 5
30189: NEG
30190: PUSH
30191: LD_INT 5
30193: NEG
30194: PUSH
30195: EMPTY
30196: LIST
30197: LIST
30198: PUSH
30199: LD_INT 3
30201: NEG
30202: PUSH
30203: LD_INT 5
30205: NEG
30206: PUSH
30207: EMPTY
30208: LIST
30209: LIST
30210: PUSH
30211: LD_INT 5
30213: NEG
30214: PUSH
30215: LD_INT 3
30217: NEG
30218: PUSH
30219: EMPTY
30220: LIST
30221: LIST
30222: PUSH
30223: LD_INT 0
30225: PUSH
30226: LD_INT 3
30228: NEG
30229: PUSH
30230: EMPTY
30231: LIST
30232: LIST
30233: PUSH
30234: LD_INT 0
30236: PUSH
30237: LD_INT 4
30239: NEG
30240: PUSH
30241: EMPTY
30242: LIST
30243: LIST
30244: PUSH
30245: LD_INT 1
30247: PUSH
30248: LD_INT 3
30250: NEG
30251: PUSH
30252: EMPTY
30253: LIST
30254: LIST
30255: PUSH
30256: LD_INT 1
30258: PUSH
30259: LD_INT 2
30261: NEG
30262: PUSH
30263: EMPTY
30264: LIST
30265: LIST
30266: PUSH
30267: LD_INT 0
30269: PUSH
30270: LD_INT 2
30272: NEG
30273: PUSH
30274: EMPTY
30275: LIST
30276: LIST
30277: PUSH
30278: LD_INT 1
30280: NEG
30281: PUSH
30282: LD_INT 3
30284: NEG
30285: PUSH
30286: EMPTY
30287: LIST
30288: LIST
30289: PUSH
30290: LD_INT 1
30292: NEG
30293: PUSH
30294: LD_INT 4
30296: NEG
30297: PUSH
30298: EMPTY
30299: LIST
30300: LIST
30301: PUSH
30302: LD_INT 2
30304: PUSH
30305: LD_INT 2
30307: NEG
30308: PUSH
30309: EMPTY
30310: LIST
30311: LIST
30312: PUSH
30313: LD_INT 2
30315: NEG
30316: PUSH
30317: LD_INT 4
30319: NEG
30320: PUSH
30321: EMPTY
30322: LIST
30323: LIST
30324: PUSH
30325: LD_INT 4
30327: PUSH
30328: LD_INT 0
30330: PUSH
30331: EMPTY
30332: LIST
30333: LIST
30334: PUSH
30335: LD_INT 4
30337: PUSH
30338: LD_INT 1
30340: NEG
30341: PUSH
30342: EMPTY
30343: LIST
30344: LIST
30345: PUSH
30346: LD_INT 5
30348: PUSH
30349: LD_INT 0
30351: PUSH
30352: EMPTY
30353: LIST
30354: LIST
30355: PUSH
30356: LD_INT 5
30358: PUSH
30359: LD_INT 1
30361: PUSH
30362: EMPTY
30363: LIST
30364: LIST
30365: PUSH
30366: LD_INT 4
30368: PUSH
30369: LD_INT 1
30371: PUSH
30372: EMPTY
30373: LIST
30374: LIST
30375: PUSH
30376: LD_INT 3
30378: PUSH
30379: LD_INT 0
30381: PUSH
30382: EMPTY
30383: LIST
30384: LIST
30385: PUSH
30386: LD_INT 3
30388: PUSH
30389: LD_INT 1
30391: NEG
30392: PUSH
30393: EMPTY
30394: LIST
30395: LIST
30396: PUSH
30397: LD_INT 3
30399: PUSH
30400: LD_INT 2
30402: NEG
30403: PUSH
30404: EMPTY
30405: LIST
30406: LIST
30407: PUSH
30408: LD_INT 5
30410: PUSH
30411: LD_INT 2
30413: PUSH
30414: EMPTY
30415: LIST
30416: LIST
30417: PUSH
30418: EMPTY
30419: LIST
30420: LIST
30421: LIST
30422: LIST
30423: LIST
30424: LIST
30425: LIST
30426: LIST
30427: LIST
30428: LIST
30429: LIST
30430: LIST
30431: LIST
30432: LIST
30433: LIST
30434: LIST
30435: LIST
30436: LIST
30437: LIST
30438: LIST
30439: LIST
30440: LIST
30441: LIST
30442: LIST
30443: LIST
30444: LIST
30445: LIST
30446: LIST
30447: LIST
30448: LIST
30449: LIST
30450: LIST
30451: LIST
30452: LIST
30453: LIST
30454: LIST
30455: LIST
30456: LIST
30457: LIST
30458: LIST
30459: LIST
30460: LIST
30461: LIST
30462: LIST
30463: LIST
30464: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
30465: LD_ADDR_VAR 0 32
30469: PUSH
30470: LD_INT 4
30472: NEG
30473: PUSH
30474: LD_INT 0
30476: PUSH
30477: EMPTY
30478: LIST
30479: LIST
30480: PUSH
30481: LD_INT 4
30483: NEG
30484: PUSH
30485: LD_INT 1
30487: NEG
30488: PUSH
30489: EMPTY
30490: LIST
30491: LIST
30492: PUSH
30493: LD_INT 3
30495: NEG
30496: PUSH
30497: LD_INT 0
30499: PUSH
30500: EMPTY
30501: LIST
30502: LIST
30503: PUSH
30504: LD_INT 3
30506: NEG
30507: PUSH
30508: LD_INT 1
30510: PUSH
30511: EMPTY
30512: LIST
30513: LIST
30514: PUSH
30515: LD_INT 4
30517: NEG
30518: PUSH
30519: LD_INT 1
30521: PUSH
30522: EMPTY
30523: LIST
30524: LIST
30525: PUSH
30526: LD_INT 5
30528: NEG
30529: PUSH
30530: LD_INT 0
30532: PUSH
30533: EMPTY
30534: LIST
30535: LIST
30536: PUSH
30537: LD_INT 5
30539: NEG
30540: PUSH
30541: LD_INT 1
30543: NEG
30544: PUSH
30545: EMPTY
30546: LIST
30547: LIST
30548: PUSH
30549: LD_INT 5
30551: NEG
30552: PUSH
30553: LD_INT 2
30555: NEG
30556: PUSH
30557: EMPTY
30558: LIST
30559: LIST
30560: PUSH
30561: LD_INT 3
30563: NEG
30564: PUSH
30565: LD_INT 2
30567: PUSH
30568: EMPTY
30569: LIST
30570: LIST
30571: PUSH
30572: LD_INT 3
30574: NEG
30575: PUSH
30576: LD_INT 3
30578: NEG
30579: PUSH
30580: EMPTY
30581: LIST
30582: LIST
30583: PUSH
30584: LD_INT 3
30586: NEG
30587: PUSH
30588: LD_INT 4
30590: NEG
30591: PUSH
30592: EMPTY
30593: LIST
30594: LIST
30595: PUSH
30596: LD_INT 2
30598: NEG
30599: PUSH
30600: LD_INT 3
30602: NEG
30603: PUSH
30604: EMPTY
30605: LIST
30606: LIST
30607: PUSH
30608: LD_INT 2
30610: NEG
30611: PUSH
30612: LD_INT 2
30614: NEG
30615: PUSH
30616: EMPTY
30617: LIST
30618: LIST
30619: PUSH
30620: LD_INT 3
30622: NEG
30623: PUSH
30624: LD_INT 2
30626: NEG
30627: PUSH
30628: EMPTY
30629: LIST
30630: LIST
30631: PUSH
30632: LD_INT 4
30634: NEG
30635: PUSH
30636: LD_INT 3
30638: NEG
30639: PUSH
30640: EMPTY
30641: LIST
30642: LIST
30643: PUSH
30644: LD_INT 4
30646: NEG
30647: PUSH
30648: LD_INT 4
30650: NEG
30651: PUSH
30652: EMPTY
30653: LIST
30654: LIST
30655: PUSH
30656: LD_INT 2
30658: NEG
30659: PUSH
30660: LD_INT 4
30662: NEG
30663: PUSH
30664: EMPTY
30665: LIST
30666: LIST
30667: PUSH
30668: LD_INT 4
30670: NEG
30671: PUSH
30672: LD_INT 2
30674: NEG
30675: PUSH
30676: EMPTY
30677: LIST
30678: LIST
30679: PUSH
30680: LD_INT 0
30682: PUSH
30683: LD_INT 4
30685: NEG
30686: PUSH
30687: EMPTY
30688: LIST
30689: LIST
30690: PUSH
30691: LD_INT 0
30693: PUSH
30694: LD_INT 5
30696: NEG
30697: PUSH
30698: EMPTY
30699: LIST
30700: LIST
30701: PUSH
30702: LD_INT 1
30704: PUSH
30705: LD_INT 4
30707: NEG
30708: PUSH
30709: EMPTY
30710: LIST
30711: LIST
30712: PUSH
30713: LD_INT 1
30715: PUSH
30716: LD_INT 3
30718: NEG
30719: PUSH
30720: EMPTY
30721: LIST
30722: LIST
30723: PUSH
30724: LD_INT 0
30726: PUSH
30727: LD_INT 3
30729: NEG
30730: PUSH
30731: EMPTY
30732: LIST
30733: LIST
30734: PUSH
30735: LD_INT 1
30737: NEG
30738: PUSH
30739: LD_INT 4
30741: NEG
30742: PUSH
30743: EMPTY
30744: LIST
30745: LIST
30746: PUSH
30747: LD_INT 1
30749: NEG
30750: PUSH
30751: LD_INT 5
30753: NEG
30754: PUSH
30755: EMPTY
30756: LIST
30757: LIST
30758: PUSH
30759: LD_INT 2
30761: PUSH
30762: LD_INT 3
30764: NEG
30765: PUSH
30766: EMPTY
30767: LIST
30768: LIST
30769: PUSH
30770: LD_INT 2
30772: NEG
30773: PUSH
30774: LD_INT 5
30776: NEG
30777: PUSH
30778: EMPTY
30779: LIST
30780: LIST
30781: PUSH
30782: LD_INT 3
30784: PUSH
30785: LD_INT 0
30787: PUSH
30788: EMPTY
30789: LIST
30790: LIST
30791: PUSH
30792: LD_INT 3
30794: PUSH
30795: LD_INT 1
30797: NEG
30798: PUSH
30799: EMPTY
30800: LIST
30801: LIST
30802: PUSH
30803: LD_INT 4
30805: PUSH
30806: LD_INT 0
30808: PUSH
30809: EMPTY
30810: LIST
30811: LIST
30812: PUSH
30813: LD_INT 4
30815: PUSH
30816: LD_INT 1
30818: PUSH
30819: EMPTY
30820: LIST
30821: LIST
30822: PUSH
30823: LD_INT 3
30825: PUSH
30826: LD_INT 1
30828: PUSH
30829: EMPTY
30830: LIST
30831: LIST
30832: PUSH
30833: LD_INT 2
30835: PUSH
30836: LD_INT 0
30838: PUSH
30839: EMPTY
30840: LIST
30841: LIST
30842: PUSH
30843: LD_INT 2
30845: PUSH
30846: LD_INT 1
30848: NEG
30849: PUSH
30850: EMPTY
30851: LIST
30852: LIST
30853: PUSH
30854: LD_INT 2
30856: PUSH
30857: LD_INT 2
30859: NEG
30860: PUSH
30861: EMPTY
30862: LIST
30863: LIST
30864: PUSH
30865: LD_INT 4
30867: PUSH
30868: LD_INT 2
30870: PUSH
30871: EMPTY
30872: LIST
30873: LIST
30874: PUSH
30875: LD_INT 4
30877: PUSH
30878: LD_INT 4
30880: PUSH
30881: EMPTY
30882: LIST
30883: LIST
30884: PUSH
30885: LD_INT 4
30887: PUSH
30888: LD_INT 3
30890: PUSH
30891: EMPTY
30892: LIST
30893: LIST
30894: PUSH
30895: LD_INT 5
30897: PUSH
30898: LD_INT 4
30900: PUSH
30901: EMPTY
30902: LIST
30903: LIST
30904: PUSH
30905: LD_INT 5
30907: PUSH
30908: LD_INT 5
30910: PUSH
30911: EMPTY
30912: LIST
30913: LIST
30914: PUSH
30915: LD_INT 4
30917: PUSH
30918: LD_INT 5
30920: PUSH
30921: EMPTY
30922: LIST
30923: LIST
30924: PUSH
30925: LD_INT 3
30927: PUSH
30928: LD_INT 4
30930: PUSH
30931: EMPTY
30932: LIST
30933: LIST
30934: PUSH
30935: LD_INT 3
30937: PUSH
30938: LD_INT 3
30940: PUSH
30941: EMPTY
30942: LIST
30943: LIST
30944: PUSH
30945: LD_INT 5
30947: PUSH
30948: LD_INT 3
30950: PUSH
30951: EMPTY
30952: LIST
30953: LIST
30954: PUSH
30955: LD_INT 3
30957: PUSH
30958: LD_INT 5
30960: PUSH
30961: EMPTY
30962: LIST
30963: LIST
30964: PUSH
30965: EMPTY
30966: LIST
30967: LIST
30968: LIST
30969: LIST
30970: LIST
30971: LIST
30972: LIST
30973: LIST
30974: LIST
30975: LIST
30976: LIST
30977: LIST
30978: LIST
30979: LIST
30980: LIST
30981: LIST
30982: LIST
30983: LIST
30984: LIST
30985: LIST
30986: LIST
30987: LIST
30988: LIST
30989: LIST
30990: LIST
30991: LIST
30992: LIST
30993: LIST
30994: LIST
30995: LIST
30996: LIST
30997: LIST
30998: LIST
30999: LIST
31000: LIST
31001: LIST
31002: LIST
31003: LIST
31004: LIST
31005: LIST
31006: LIST
31007: LIST
31008: LIST
31009: LIST
31010: LIST
31011: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
31012: LD_ADDR_VAR 0 33
31016: PUSH
31017: LD_INT 4
31019: NEG
31020: PUSH
31021: LD_INT 4
31023: NEG
31024: PUSH
31025: EMPTY
31026: LIST
31027: LIST
31028: PUSH
31029: LD_INT 4
31031: NEG
31032: PUSH
31033: LD_INT 5
31035: NEG
31036: PUSH
31037: EMPTY
31038: LIST
31039: LIST
31040: PUSH
31041: LD_INT 3
31043: NEG
31044: PUSH
31045: LD_INT 4
31047: NEG
31048: PUSH
31049: EMPTY
31050: LIST
31051: LIST
31052: PUSH
31053: LD_INT 3
31055: NEG
31056: PUSH
31057: LD_INT 3
31059: NEG
31060: PUSH
31061: EMPTY
31062: LIST
31063: LIST
31064: PUSH
31065: LD_INT 4
31067: NEG
31068: PUSH
31069: LD_INT 3
31071: NEG
31072: PUSH
31073: EMPTY
31074: LIST
31075: LIST
31076: PUSH
31077: LD_INT 5
31079: NEG
31080: PUSH
31081: LD_INT 4
31083: NEG
31084: PUSH
31085: EMPTY
31086: LIST
31087: LIST
31088: PUSH
31089: LD_INT 5
31091: NEG
31092: PUSH
31093: LD_INT 5
31095: NEG
31096: PUSH
31097: EMPTY
31098: LIST
31099: LIST
31100: PUSH
31101: LD_INT 3
31103: NEG
31104: PUSH
31105: LD_INT 5
31107: NEG
31108: PUSH
31109: EMPTY
31110: LIST
31111: LIST
31112: PUSH
31113: LD_INT 5
31115: NEG
31116: PUSH
31117: LD_INT 3
31119: NEG
31120: PUSH
31121: EMPTY
31122: LIST
31123: LIST
31124: PUSH
31125: LD_INT 0
31127: PUSH
31128: LD_INT 3
31130: NEG
31131: PUSH
31132: EMPTY
31133: LIST
31134: LIST
31135: PUSH
31136: LD_INT 0
31138: PUSH
31139: LD_INT 4
31141: NEG
31142: PUSH
31143: EMPTY
31144: LIST
31145: LIST
31146: PUSH
31147: LD_INT 1
31149: PUSH
31150: LD_INT 3
31152: NEG
31153: PUSH
31154: EMPTY
31155: LIST
31156: LIST
31157: PUSH
31158: LD_INT 1
31160: PUSH
31161: LD_INT 2
31163: NEG
31164: PUSH
31165: EMPTY
31166: LIST
31167: LIST
31168: PUSH
31169: LD_INT 0
31171: PUSH
31172: LD_INT 2
31174: NEG
31175: PUSH
31176: EMPTY
31177: LIST
31178: LIST
31179: PUSH
31180: LD_INT 1
31182: NEG
31183: PUSH
31184: LD_INT 3
31186: NEG
31187: PUSH
31188: EMPTY
31189: LIST
31190: LIST
31191: PUSH
31192: LD_INT 1
31194: NEG
31195: PUSH
31196: LD_INT 4
31198: NEG
31199: PUSH
31200: EMPTY
31201: LIST
31202: LIST
31203: PUSH
31204: LD_INT 2
31206: PUSH
31207: LD_INT 2
31209: NEG
31210: PUSH
31211: EMPTY
31212: LIST
31213: LIST
31214: PUSH
31215: LD_INT 2
31217: NEG
31218: PUSH
31219: LD_INT 4
31221: NEG
31222: PUSH
31223: EMPTY
31224: LIST
31225: LIST
31226: PUSH
31227: LD_INT 4
31229: PUSH
31230: LD_INT 0
31232: PUSH
31233: EMPTY
31234: LIST
31235: LIST
31236: PUSH
31237: LD_INT 4
31239: PUSH
31240: LD_INT 1
31242: NEG
31243: PUSH
31244: EMPTY
31245: LIST
31246: LIST
31247: PUSH
31248: LD_INT 5
31250: PUSH
31251: LD_INT 0
31253: PUSH
31254: EMPTY
31255: LIST
31256: LIST
31257: PUSH
31258: LD_INT 5
31260: PUSH
31261: LD_INT 1
31263: PUSH
31264: EMPTY
31265: LIST
31266: LIST
31267: PUSH
31268: LD_INT 4
31270: PUSH
31271: LD_INT 1
31273: PUSH
31274: EMPTY
31275: LIST
31276: LIST
31277: PUSH
31278: LD_INT 3
31280: PUSH
31281: LD_INT 0
31283: PUSH
31284: EMPTY
31285: LIST
31286: LIST
31287: PUSH
31288: LD_INT 3
31290: PUSH
31291: LD_INT 1
31293: NEG
31294: PUSH
31295: EMPTY
31296: LIST
31297: LIST
31298: PUSH
31299: LD_INT 3
31301: PUSH
31302: LD_INT 2
31304: NEG
31305: PUSH
31306: EMPTY
31307: LIST
31308: LIST
31309: PUSH
31310: LD_INT 5
31312: PUSH
31313: LD_INT 2
31315: PUSH
31316: EMPTY
31317: LIST
31318: LIST
31319: PUSH
31320: LD_INT 3
31322: PUSH
31323: LD_INT 3
31325: PUSH
31326: EMPTY
31327: LIST
31328: LIST
31329: PUSH
31330: LD_INT 3
31332: PUSH
31333: LD_INT 2
31335: PUSH
31336: EMPTY
31337: LIST
31338: LIST
31339: PUSH
31340: LD_INT 4
31342: PUSH
31343: LD_INT 3
31345: PUSH
31346: EMPTY
31347: LIST
31348: LIST
31349: PUSH
31350: LD_INT 4
31352: PUSH
31353: LD_INT 4
31355: PUSH
31356: EMPTY
31357: LIST
31358: LIST
31359: PUSH
31360: LD_INT 3
31362: PUSH
31363: LD_INT 4
31365: PUSH
31366: EMPTY
31367: LIST
31368: LIST
31369: PUSH
31370: LD_INT 2
31372: PUSH
31373: LD_INT 3
31375: PUSH
31376: EMPTY
31377: LIST
31378: LIST
31379: PUSH
31380: LD_INT 2
31382: PUSH
31383: LD_INT 2
31385: PUSH
31386: EMPTY
31387: LIST
31388: LIST
31389: PUSH
31390: LD_INT 4
31392: PUSH
31393: LD_INT 2
31395: PUSH
31396: EMPTY
31397: LIST
31398: LIST
31399: PUSH
31400: LD_INT 2
31402: PUSH
31403: LD_INT 4
31405: PUSH
31406: EMPTY
31407: LIST
31408: LIST
31409: PUSH
31410: LD_INT 0
31412: PUSH
31413: LD_INT 4
31415: PUSH
31416: EMPTY
31417: LIST
31418: LIST
31419: PUSH
31420: LD_INT 0
31422: PUSH
31423: LD_INT 3
31425: PUSH
31426: EMPTY
31427: LIST
31428: LIST
31429: PUSH
31430: LD_INT 1
31432: PUSH
31433: LD_INT 4
31435: PUSH
31436: EMPTY
31437: LIST
31438: LIST
31439: PUSH
31440: LD_INT 1
31442: PUSH
31443: LD_INT 5
31445: PUSH
31446: EMPTY
31447: LIST
31448: LIST
31449: PUSH
31450: LD_INT 0
31452: PUSH
31453: LD_INT 5
31455: PUSH
31456: EMPTY
31457: LIST
31458: LIST
31459: PUSH
31460: LD_INT 1
31462: NEG
31463: PUSH
31464: LD_INT 4
31466: PUSH
31467: EMPTY
31468: LIST
31469: LIST
31470: PUSH
31471: LD_INT 1
31473: NEG
31474: PUSH
31475: LD_INT 3
31477: PUSH
31478: EMPTY
31479: LIST
31480: LIST
31481: PUSH
31482: LD_INT 2
31484: PUSH
31485: LD_INT 5
31487: PUSH
31488: EMPTY
31489: LIST
31490: LIST
31491: PUSH
31492: LD_INT 2
31494: NEG
31495: PUSH
31496: LD_INT 3
31498: PUSH
31499: EMPTY
31500: LIST
31501: LIST
31502: PUSH
31503: EMPTY
31504: LIST
31505: LIST
31506: LIST
31507: LIST
31508: LIST
31509: LIST
31510: LIST
31511: LIST
31512: LIST
31513: LIST
31514: LIST
31515: LIST
31516: LIST
31517: LIST
31518: LIST
31519: LIST
31520: LIST
31521: LIST
31522: LIST
31523: LIST
31524: LIST
31525: LIST
31526: LIST
31527: LIST
31528: LIST
31529: LIST
31530: LIST
31531: LIST
31532: LIST
31533: LIST
31534: LIST
31535: LIST
31536: LIST
31537: LIST
31538: LIST
31539: LIST
31540: LIST
31541: LIST
31542: LIST
31543: LIST
31544: LIST
31545: LIST
31546: LIST
31547: LIST
31548: LIST
31549: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
31550: LD_ADDR_VAR 0 34
31554: PUSH
31555: LD_INT 0
31557: PUSH
31558: LD_INT 4
31560: NEG
31561: PUSH
31562: EMPTY
31563: LIST
31564: LIST
31565: PUSH
31566: LD_INT 0
31568: PUSH
31569: LD_INT 5
31571: NEG
31572: PUSH
31573: EMPTY
31574: LIST
31575: LIST
31576: PUSH
31577: LD_INT 1
31579: PUSH
31580: LD_INT 4
31582: NEG
31583: PUSH
31584: EMPTY
31585: LIST
31586: LIST
31587: PUSH
31588: LD_INT 1
31590: PUSH
31591: LD_INT 3
31593: NEG
31594: PUSH
31595: EMPTY
31596: LIST
31597: LIST
31598: PUSH
31599: LD_INT 0
31601: PUSH
31602: LD_INT 3
31604: NEG
31605: PUSH
31606: EMPTY
31607: LIST
31608: LIST
31609: PUSH
31610: LD_INT 1
31612: NEG
31613: PUSH
31614: LD_INT 4
31616: NEG
31617: PUSH
31618: EMPTY
31619: LIST
31620: LIST
31621: PUSH
31622: LD_INT 1
31624: NEG
31625: PUSH
31626: LD_INT 5
31628: NEG
31629: PUSH
31630: EMPTY
31631: LIST
31632: LIST
31633: PUSH
31634: LD_INT 2
31636: PUSH
31637: LD_INT 3
31639: NEG
31640: PUSH
31641: EMPTY
31642: LIST
31643: LIST
31644: PUSH
31645: LD_INT 2
31647: NEG
31648: PUSH
31649: LD_INT 5
31651: NEG
31652: PUSH
31653: EMPTY
31654: LIST
31655: LIST
31656: PUSH
31657: LD_INT 3
31659: PUSH
31660: LD_INT 0
31662: PUSH
31663: EMPTY
31664: LIST
31665: LIST
31666: PUSH
31667: LD_INT 3
31669: PUSH
31670: LD_INT 1
31672: NEG
31673: PUSH
31674: EMPTY
31675: LIST
31676: LIST
31677: PUSH
31678: LD_INT 4
31680: PUSH
31681: LD_INT 0
31683: PUSH
31684: EMPTY
31685: LIST
31686: LIST
31687: PUSH
31688: LD_INT 4
31690: PUSH
31691: LD_INT 1
31693: PUSH
31694: EMPTY
31695: LIST
31696: LIST
31697: PUSH
31698: LD_INT 3
31700: PUSH
31701: LD_INT 1
31703: PUSH
31704: EMPTY
31705: LIST
31706: LIST
31707: PUSH
31708: LD_INT 2
31710: PUSH
31711: LD_INT 0
31713: PUSH
31714: EMPTY
31715: LIST
31716: LIST
31717: PUSH
31718: LD_INT 2
31720: PUSH
31721: LD_INT 1
31723: NEG
31724: PUSH
31725: EMPTY
31726: LIST
31727: LIST
31728: PUSH
31729: LD_INT 2
31731: PUSH
31732: LD_INT 2
31734: NEG
31735: PUSH
31736: EMPTY
31737: LIST
31738: LIST
31739: PUSH
31740: LD_INT 4
31742: PUSH
31743: LD_INT 2
31745: PUSH
31746: EMPTY
31747: LIST
31748: LIST
31749: PUSH
31750: LD_INT 4
31752: PUSH
31753: LD_INT 4
31755: PUSH
31756: EMPTY
31757: LIST
31758: LIST
31759: PUSH
31760: LD_INT 4
31762: PUSH
31763: LD_INT 3
31765: PUSH
31766: EMPTY
31767: LIST
31768: LIST
31769: PUSH
31770: LD_INT 5
31772: PUSH
31773: LD_INT 4
31775: PUSH
31776: EMPTY
31777: LIST
31778: LIST
31779: PUSH
31780: LD_INT 5
31782: PUSH
31783: LD_INT 5
31785: PUSH
31786: EMPTY
31787: LIST
31788: LIST
31789: PUSH
31790: LD_INT 4
31792: PUSH
31793: LD_INT 5
31795: PUSH
31796: EMPTY
31797: LIST
31798: LIST
31799: PUSH
31800: LD_INT 3
31802: PUSH
31803: LD_INT 4
31805: PUSH
31806: EMPTY
31807: LIST
31808: LIST
31809: PUSH
31810: LD_INT 3
31812: PUSH
31813: LD_INT 3
31815: PUSH
31816: EMPTY
31817: LIST
31818: LIST
31819: PUSH
31820: LD_INT 5
31822: PUSH
31823: LD_INT 3
31825: PUSH
31826: EMPTY
31827: LIST
31828: LIST
31829: PUSH
31830: LD_INT 3
31832: PUSH
31833: LD_INT 5
31835: PUSH
31836: EMPTY
31837: LIST
31838: LIST
31839: PUSH
31840: LD_INT 0
31842: PUSH
31843: LD_INT 3
31845: PUSH
31846: EMPTY
31847: LIST
31848: LIST
31849: PUSH
31850: LD_INT 0
31852: PUSH
31853: LD_INT 2
31855: PUSH
31856: EMPTY
31857: LIST
31858: LIST
31859: PUSH
31860: LD_INT 1
31862: PUSH
31863: LD_INT 3
31865: PUSH
31866: EMPTY
31867: LIST
31868: LIST
31869: PUSH
31870: LD_INT 1
31872: PUSH
31873: LD_INT 4
31875: PUSH
31876: EMPTY
31877: LIST
31878: LIST
31879: PUSH
31880: LD_INT 0
31882: PUSH
31883: LD_INT 4
31885: PUSH
31886: EMPTY
31887: LIST
31888: LIST
31889: PUSH
31890: LD_INT 1
31892: NEG
31893: PUSH
31894: LD_INT 3
31896: PUSH
31897: EMPTY
31898: LIST
31899: LIST
31900: PUSH
31901: LD_INT 1
31903: NEG
31904: PUSH
31905: LD_INT 2
31907: PUSH
31908: EMPTY
31909: LIST
31910: LIST
31911: PUSH
31912: LD_INT 2
31914: PUSH
31915: LD_INT 4
31917: PUSH
31918: EMPTY
31919: LIST
31920: LIST
31921: PUSH
31922: LD_INT 2
31924: NEG
31925: PUSH
31926: LD_INT 2
31928: PUSH
31929: EMPTY
31930: LIST
31931: LIST
31932: PUSH
31933: LD_INT 4
31935: NEG
31936: PUSH
31937: LD_INT 0
31939: PUSH
31940: EMPTY
31941: LIST
31942: LIST
31943: PUSH
31944: LD_INT 4
31946: NEG
31947: PUSH
31948: LD_INT 1
31950: NEG
31951: PUSH
31952: EMPTY
31953: LIST
31954: LIST
31955: PUSH
31956: LD_INT 3
31958: NEG
31959: PUSH
31960: LD_INT 0
31962: PUSH
31963: EMPTY
31964: LIST
31965: LIST
31966: PUSH
31967: LD_INT 3
31969: NEG
31970: PUSH
31971: LD_INT 1
31973: PUSH
31974: EMPTY
31975: LIST
31976: LIST
31977: PUSH
31978: LD_INT 4
31980: NEG
31981: PUSH
31982: LD_INT 1
31984: PUSH
31985: EMPTY
31986: LIST
31987: LIST
31988: PUSH
31989: LD_INT 5
31991: NEG
31992: PUSH
31993: LD_INT 0
31995: PUSH
31996: EMPTY
31997: LIST
31998: LIST
31999: PUSH
32000: LD_INT 5
32002: NEG
32003: PUSH
32004: LD_INT 1
32006: NEG
32007: PUSH
32008: EMPTY
32009: LIST
32010: LIST
32011: PUSH
32012: LD_INT 5
32014: NEG
32015: PUSH
32016: LD_INT 2
32018: NEG
32019: PUSH
32020: EMPTY
32021: LIST
32022: LIST
32023: PUSH
32024: LD_INT 3
32026: NEG
32027: PUSH
32028: LD_INT 2
32030: PUSH
32031: EMPTY
32032: LIST
32033: LIST
32034: PUSH
32035: EMPTY
32036: LIST
32037: LIST
32038: LIST
32039: LIST
32040: LIST
32041: LIST
32042: LIST
32043: LIST
32044: LIST
32045: LIST
32046: LIST
32047: LIST
32048: LIST
32049: LIST
32050: LIST
32051: LIST
32052: LIST
32053: LIST
32054: LIST
32055: LIST
32056: LIST
32057: LIST
32058: LIST
32059: LIST
32060: LIST
32061: LIST
32062: LIST
32063: LIST
32064: LIST
32065: LIST
32066: LIST
32067: LIST
32068: LIST
32069: LIST
32070: LIST
32071: LIST
32072: LIST
32073: LIST
32074: LIST
32075: LIST
32076: LIST
32077: LIST
32078: LIST
32079: LIST
32080: LIST
32081: ST_TO_ADDR
// end ; end ;
32082: GO 32085
32084: POP
// case btype of b_depot , b_warehouse :
32085: LD_VAR 0 1
32089: PUSH
32090: LD_INT 0
32092: DOUBLE
32093: EQUAL
32094: IFTRUE 32104
32096: LD_INT 1
32098: DOUBLE
32099: EQUAL
32100: IFTRUE 32104
32102: GO 32305
32104: POP
// case nation of nation_american :
32105: LD_VAR 0 5
32109: PUSH
32110: LD_INT 1
32112: DOUBLE
32113: EQUAL
32114: IFTRUE 32118
32116: GO 32174
32118: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
32119: LD_ADDR_VAR 0 9
32123: PUSH
32124: LD_VAR 0 11
32128: PUSH
32129: LD_VAR 0 12
32133: PUSH
32134: LD_VAR 0 13
32138: PUSH
32139: LD_VAR 0 14
32143: PUSH
32144: LD_VAR 0 15
32148: PUSH
32149: LD_VAR 0 16
32153: PUSH
32154: EMPTY
32155: LIST
32156: LIST
32157: LIST
32158: LIST
32159: LIST
32160: LIST
32161: PUSH
32162: LD_VAR 0 4
32166: PUSH
32167: LD_INT 1
32169: PLUS
32170: ARRAY
32171: ST_TO_ADDR
32172: GO 32303
32174: LD_INT 2
32176: DOUBLE
32177: EQUAL
32178: IFTRUE 32182
32180: GO 32238
32182: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
32183: LD_ADDR_VAR 0 9
32187: PUSH
32188: LD_VAR 0 17
32192: PUSH
32193: LD_VAR 0 18
32197: PUSH
32198: LD_VAR 0 19
32202: PUSH
32203: LD_VAR 0 20
32207: PUSH
32208: LD_VAR 0 21
32212: PUSH
32213: LD_VAR 0 22
32217: PUSH
32218: EMPTY
32219: LIST
32220: LIST
32221: LIST
32222: LIST
32223: LIST
32224: LIST
32225: PUSH
32226: LD_VAR 0 4
32230: PUSH
32231: LD_INT 1
32233: PLUS
32234: ARRAY
32235: ST_TO_ADDR
32236: GO 32303
32238: LD_INT 3
32240: DOUBLE
32241: EQUAL
32242: IFTRUE 32246
32244: GO 32302
32246: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
32247: LD_ADDR_VAR 0 9
32251: PUSH
32252: LD_VAR 0 23
32256: PUSH
32257: LD_VAR 0 24
32261: PUSH
32262: LD_VAR 0 25
32266: PUSH
32267: LD_VAR 0 26
32271: PUSH
32272: LD_VAR 0 27
32276: PUSH
32277: LD_VAR 0 28
32281: PUSH
32282: EMPTY
32283: LIST
32284: LIST
32285: LIST
32286: LIST
32287: LIST
32288: LIST
32289: PUSH
32290: LD_VAR 0 4
32294: PUSH
32295: LD_INT 1
32297: PLUS
32298: ARRAY
32299: ST_TO_ADDR
32300: GO 32303
32302: POP
32303: GO 32858
32305: LD_INT 2
32307: DOUBLE
32308: EQUAL
32309: IFTRUE 32319
32311: LD_INT 3
32313: DOUBLE
32314: EQUAL
32315: IFTRUE 32319
32317: GO 32375
32319: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
32320: LD_ADDR_VAR 0 9
32324: PUSH
32325: LD_VAR 0 29
32329: PUSH
32330: LD_VAR 0 30
32334: PUSH
32335: LD_VAR 0 31
32339: PUSH
32340: LD_VAR 0 32
32344: PUSH
32345: LD_VAR 0 33
32349: PUSH
32350: LD_VAR 0 34
32354: PUSH
32355: EMPTY
32356: LIST
32357: LIST
32358: LIST
32359: LIST
32360: LIST
32361: LIST
32362: PUSH
32363: LD_VAR 0 4
32367: PUSH
32368: LD_INT 1
32370: PLUS
32371: ARRAY
32372: ST_TO_ADDR
32373: GO 32858
32375: LD_INT 16
32377: DOUBLE
32378: EQUAL
32379: IFTRUE 32437
32381: LD_INT 17
32383: DOUBLE
32384: EQUAL
32385: IFTRUE 32437
32387: LD_INT 18
32389: DOUBLE
32390: EQUAL
32391: IFTRUE 32437
32393: LD_INT 19
32395: DOUBLE
32396: EQUAL
32397: IFTRUE 32437
32399: LD_INT 22
32401: DOUBLE
32402: EQUAL
32403: IFTRUE 32437
32405: LD_INT 20
32407: DOUBLE
32408: EQUAL
32409: IFTRUE 32437
32411: LD_INT 21
32413: DOUBLE
32414: EQUAL
32415: IFTRUE 32437
32417: LD_INT 23
32419: DOUBLE
32420: EQUAL
32421: IFTRUE 32437
32423: LD_INT 24
32425: DOUBLE
32426: EQUAL
32427: IFTRUE 32437
32429: LD_INT 25
32431: DOUBLE
32432: EQUAL
32433: IFTRUE 32437
32435: GO 32493
32437: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
32438: LD_ADDR_VAR 0 9
32442: PUSH
32443: LD_VAR 0 35
32447: PUSH
32448: LD_VAR 0 36
32452: PUSH
32453: LD_VAR 0 37
32457: PUSH
32458: LD_VAR 0 38
32462: PUSH
32463: LD_VAR 0 39
32467: PUSH
32468: LD_VAR 0 40
32472: PUSH
32473: EMPTY
32474: LIST
32475: LIST
32476: LIST
32477: LIST
32478: LIST
32479: LIST
32480: PUSH
32481: LD_VAR 0 4
32485: PUSH
32486: LD_INT 1
32488: PLUS
32489: ARRAY
32490: ST_TO_ADDR
32491: GO 32858
32493: LD_INT 6
32495: DOUBLE
32496: EQUAL
32497: IFTRUE 32549
32499: LD_INT 7
32501: DOUBLE
32502: EQUAL
32503: IFTRUE 32549
32505: LD_INT 8
32507: DOUBLE
32508: EQUAL
32509: IFTRUE 32549
32511: LD_INT 13
32513: DOUBLE
32514: EQUAL
32515: IFTRUE 32549
32517: LD_INT 12
32519: DOUBLE
32520: EQUAL
32521: IFTRUE 32549
32523: LD_INT 15
32525: DOUBLE
32526: EQUAL
32527: IFTRUE 32549
32529: LD_INT 11
32531: DOUBLE
32532: EQUAL
32533: IFTRUE 32549
32535: LD_INT 14
32537: DOUBLE
32538: EQUAL
32539: IFTRUE 32549
32541: LD_INT 10
32543: DOUBLE
32544: EQUAL
32545: IFTRUE 32549
32547: GO 32605
32549: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
32550: LD_ADDR_VAR 0 9
32554: PUSH
32555: LD_VAR 0 41
32559: PUSH
32560: LD_VAR 0 42
32564: PUSH
32565: LD_VAR 0 43
32569: PUSH
32570: LD_VAR 0 44
32574: PUSH
32575: LD_VAR 0 45
32579: PUSH
32580: LD_VAR 0 46
32584: PUSH
32585: EMPTY
32586: LIST
32587: LIST
32588: LIST
32589: LIST
32590: LIST
32591: LIST
32592: PUSH
32593: LD_VAR 0 4
32597: PUSH
32598: LD_INT 1
32600: PLUS
32601: ARRAY
32602: ST_TO_ADDR
32603: GO 32858
32605: LD_INT 36
32607: DOUBLE
32608: EQUAL
32609: IFTRUE 32613
32611: GO 32669
32613: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
32614: LD_ADDR_VAR 0 9
32618: PUSH
32619: LD_VAR 0 47
32623: PUSH
32624: LD_VAR 0 48
32628: PUSH
32629: LD_VAR 0 49
32633: PUSH
32634: LD_VAR 0 50
32638: PUSH
32639: LD_VAR 0 51
32643: PUSH
32644: LD_VAR 0 52
32648: PUSH
32649: EMPTY
32650: LIST
32651: LIST
32652: LIST
32653: LIST
32654: LIST
32655: LIST
32656: PUSH
32657: LD_VAR 0 4
32661: PUSH
32662: LD_INT 1
32664: PLUS
32665: ARRAY
32666: ST_TO_ADDR
32667: GO 32858
32669: LD_INT 4
32671: DOUBLE
32672: EQUAL
32673: IFTRUE 32695
32675: LD_INT 5
32677: DOUBLE
32678: EQUAL
32679: IFTRUE 32695
32681: LD_INT 34
32683: DOUBLE
32684: EQUAL
32685: IFTRUE 32695
32687: LD_INT 37
32689: DOUBLE
32690: EQUAL
32691: IFTRUE 32695
32693: GO 32751
32695: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
32696: LD_ADDR_VAR 0 9
32700: PUSH
32701: LD_VAR 0 53
32705: PUSH
32706: LD_VAR 0 54
32710: PUSH
32711: LD_VAR 0 55
32715: PUSH
32716: LD_VAR 0 56
32720: PUSH
32721: LD_VAR 0 57
32725: PUSH
32726: LD_VAR 0 58
32730: PUSH
32731: EMPTY
32732: LIST
32733: LIST
32734: LIST
32735: LIST
32736: LIST
32737: LIST
32738: PUSH
32739: LD_VAR 0 4
32743: PUSH
32744: LD_INT 1
32746: PLUS
32747: ARRAY
32748: ST_TO_ADDR
32749: GO 32858
32751: LD_INT 31
32753: DOUBLE
32754: EQUAL
32755: IFTRUE 32801
32757: LD_INT 32
32759: DOUBLE
32760: EQUAL
32761: IFTRUE 32801
32763: LD_INT 33
32765: DOUBLE
32766: EQUAL
32767: IFTRUE 32801
32769: LD_INT 27
32771: DOUBLE
32772: EQUAL
32773: IFTRUE 32801
32775: LD_INT 26
32777: DOUBLE
32778: EQUAL
32779: IFTRUE 32801
32781: LD_INT 28
32783: DOUBLE
32784: EQUAL
32785: IFTRUE 32801
32787: LD_INT 29
32789: DOUBLE
32790: EQUAL
32791: IFTRUE 32801
32793: LD_INT 30
32795: DOUBLE
32796: EQUAL
32797: IFTRUE 32801
32799: GO 32857
32801: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
32802: LD_ADDR_VAR 0 9
32806: PUSH
32807: LD_VAR 0 59
32811: PUSH
32812: LD_VAR 0 60
32816: PUSH
32817: LD_VAR 0 61
32821: PUSH
32822: LD_VAR 0 62
32826: PUSH
32827: LD_VAR 0 63
32831: PUSH
32832: LD_VAR 0 64
32836: PUSH
32837: EMPTY
32838: LIST
32839: LIST
32840: LIST
32841: LIST
32842: LIST
32843: LIST
32844: PUSH
32845: LD_VAR 0 4
32849: PUSH
32850: LD_INT 1
32852: PLUS
32853: ARRAY
32854: ST_TO_ADDR
32855: GO 32858
32857: POP
// temp_list2 = [ ] ;
32858: LD_ADDR_VAR 0 10
32862: PUSH
32863: EMPTY
32864: ST_TO_ADDR
// for i in temp_list do
32865: LD_ADDR_VAR 0 8
32869: PUSH
32870: LD_VAR 0 9
32874: PUSH
32875: FOR_IN
32876: IFFALSE 32928
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
32878: LD_ADDR_VAR 0 10
32882: PUSH
32883: LD_VAR 0 10
32887: PUSH
32888: LD_VAR 0 8
32892: PUSH
32893: LD_INT 1
32895: ARRAY
32896: PUSH
32897: LD_VAR 0 2
32901: PLUS
32902: PUSH
32903: LD_VAR 0 8
32907: PUSH
32908: LD_INT 2
32910: ARRAY
32911: PUSH
32912: LD_VAR 0 3
32916: PLUS
32917: PUSH
32918: EMPTY
32919: LIST
32920: LIST
32921: PUSH
32922: EMPTY
32923: LIST
32924: ADD
32925: ST_TO_ADDR
32926: GO 32875
32928: POP
32929: POP
// result = temp_list2 ;
32930: LD_ADDR_VAR 0 7
32934: PUSH
32935: LD_VAR 0 10
32939: ST_TO_ADDR
// end ;
32940: LD_VAR 0 7
32944: RET
// export function EnemyInRange ( unit , dist ) ; begin
32945: LD_INT 0
32947: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
32948: LD_ADDR_VAR 0 3
32952: PUSH
32953: LD_VAR 0 1
32957: PPUSH
32958: CALL_OW 255
32962: PPUSH
32963: LD_VAR 0 1
32967: PPUSH
32968: CALL_OW 250
32972: PPUSH
32973: LD_VAR 0 1
32977: PPUSH
32978: CALL_OW 251
32982: PPUSH
32983: LD_VAR 0 2
32987: PPUSH
32988: CALL 6318 0 4
32992: PUSH
32993: LD_INT 4
32995: ARRAY
32996: ST_TO_ADDR
// end ;
32997: LD_VAR 0 3
33001: RET
// export function PlayerSeeMe ( unit ) ; begin
33002: LD_INT 0
33004: PPUSH
// result := See ( your_side , unit ) ;
33005: LD_ADDR_VAR 0 2
33009: PUSH
33010: LD_OWVAR 2
33014: PPUSH
33015: LD_VAR 0 1
33019: PPUSH
33020: CALL_OW 292
33024: ST_TO_ADDR
// end ;
33025: LD_VAR 0 2
33029: RET
// export function ReverseDir ( unit ) ; begin
33030: LD_INT 0
33032: PPUSH
// if not unit then
33033: LD_VAR 0 1
33037: NOT
33038: IFFALSE 33042
// exit ;
33040: GO 33065
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
33042: LD_ADDR_VAR 0 2
33046: PUSH
33047: LD_VAR 0 1
33051: PPUSH
33052: CALL_OW 254
33056: PUSH
33057: LD_INT 3
33059: PLUS
33060: PUSH
33061: LD_INT 6
33063: MOD
33064: ST_TO_ADDR
// end ;
33065: LD_VAR 0 2
33069: RET
// export function ReverseArray ( array ) ; var i ; begin
33070: LD_INT 0
33072: PPUSH
33073: PPUSH
// if not array then
33074: LD_VAR 0 1
33078: NOT
33079: IFFALSE 33083
// exit ;
33081: GO 33138
// result := [ ] ;
33083: LD_ADDR_VAR 0 2
33087: PUSH
33088: EMPTY
33089: ST_TO_ADDR
// for i := array downto 1 do
33090: LD_ADDR_VAR 0 3
33094: PUSH
33095: DOUBLE
33096: LD_VAR 0 1
33100: INC
33101: ST_TO_ADDR
33102: LD_INT 1
33104: PUSH
33105: FOR_DOWNTO
33106: IFFALSE 33136
// result := Join ( result , array [ i ] ) ;
33108: LD_ADDR_VAR 0 2
33112: PUSH
33113: LD_VAR 0 2
33117: PPUSH
33118: LD_VAR 0 1
33122: PUSH
33123: LD_VAR 0 3
33127: ARRAY
33128: PPUSH
33129: CALL 37781 0 2
33133: ST_TO_ADDR
33134: GO 33105
33136: POP
33137: POP
// end ;
33138: LD_VAR 0 2
33142: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
33143: LD_INT 0
33145: PPUSH
33146: PPUSH
33147: PPUSH
33148: PPUSH
33149: PPUSH
33150: PPUSH
// if not unit or not hexes then
33151: LD_VAR 0 1
33155: NOT
33156: PUSH
33157: LD_VAR 0 2
33161: NOT
33162: OR
33163: IFFALSE 33167
// exit ;
33165: GO 33290
// dist := 9999 ;
33167: LD_ADDR_VAR 0 5
33171: PUSH
33172: LD_INT 9999
33174: ST_TO_ADDR
// for i = 1 to hexes do
33175: LD_ADDR_VAR 0 4
33179: PUSH
33180: DOUBLE
33181: LD_INT 1
33183: DEC
33184: ST_TO_ADDR
33185: LD_VAR 0 2
33189: PUSH
33190: FOR_TO
33191: IFFALSE 33278
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
33193: LD_ADDR_VAR 0 6
33197: PUSH
33198: LD_VAR 0 1
33202: PPUSH
33203: LD_VAR 0 2
33207: PUSH
33208: LD_VAR 0 4
33212: ARRAY
33213: PUSH
33214: LD_INT 1
33216: ARRAY
33217: PPUSH
33218: LD_VAR 0 2
33222: PUSH
33223: LD_VAR 0 4
33227: ARRAY
33228: PUSH
33229: LD_INT 2
33231: ARRAY
33232: PPUSH
33233: CALL_OW 297
33237: ST_TO_ADDR
// if tdist < dist then
33238: LD_VAR 0 6
33242: PUSH
33243: LD_VAR 0 5
33247: LESS
33248: IFFALSE 33276
// begin hex := hexes [ i ] ;
33250: LD_ADDR_VAR 0 8
33254: PUSH
33255: LD_VAR 0 2
33259: PUSH
33260: LD_VAR 0 4
33264: ARRAY
33265: ST_TO_ADDR
// dist := tdist ;
33266: LD_ADDR_VAR 0 5
33270: PUSH
33271: LD_VAR 0 6
33275: ST_TO_ADDR
// end ; end ;
33276: GO 33190
33278: POP
33279: POP
// result := hex ;
33280: LD_ADDR_VAR 0 3
33284: PUSH
33285: LD_VAR 0 8
33289: ST_TO_ADDR
// end ;
33290: LD_VAR 0 3
33294: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
33295: LD_INT 0
33297: PPUSH
33298: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
33299: LD_VAR 0 1
33303: NOT
33304: PUSH
33305: LD_VAR 0 1
33309: PUSH
33310: LD_INT 21
33312: PUSH
33313: LD_INT 2
33315: PUSH
33316: EMPTY
33317: LIST
33318: LIST
33319: PUSH
33320: LD_INT 23
33322: PUSH
33323: LD_INT 2
33325: PUSH
33326: EMPTY
33327: LIST
33328: LIST
33329: PUSH
33330: EMPTY
33331: LIST
33332: LIST
33333: PPUSH
33334: CALL_OW 69
33338: IN
33339: NOT
33340: OR
33341: IFFALSE 33345
// exit ;
33343: GO 33392
// for i = 1 to 3 do
33345: LD_ADDR_VAR 0 3
33349: PUSH
33350: DOUBLE
33351: LD_INT 1
33353: DEC
33354: ST_TO_ADDR
33355: LD_INT 3
33357: PUSH
33358: FOR_TO
33359: IFFALSE 33390
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
33361: LD_VAR 0 1
33365: PPUSH
33366: CALL_OW 250
33370: PPUSH
33371: LD_VAR 0 1
33375: PPUSH
33376: CALL_OW 251
33380: PPUSH
33381: LD_INT 1
33383: PPUSH
33384: CALL_OW 453
33388: GO 33358
33390: POP
33391: POP
// end ;
33392: LD_VAR 0 2
33396: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
33397: LD_INT 0
33399: PPUSH
33400: PPUSH
33401: PPUSH
33402: PPUSH
33403: PPUSH
33404: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
33405: LD_VAR 0 1
33409: NOT
33410: PUSH
33411: LD_VAR 0 2
33415: NOT
33416: OR
33417: PUSH
33418: LD_VAR 0 1
33422: PPUSH
33423: CALL_OW 314
33427: OR
33428: IFFALSE 33432
// exit ;
33430: GO 33899
// if GetLives ( i ) < 250 then
33432: LD_VAR 0 4
33436: PPUSH
33437: CALL_OW 256
33441: PUSH
33442: LD_INT 250
33444: LESS
33445: IFFALSE 33458
// begin ComAutodestruct ( i ) ;
33447: LD_VAR 0 4
33451: PPUSH
33452: CALL 33295 0 1
// exit ;
33456: GO 33899
// end ; x := GetX ( enemy_unit ) ;
33458: LD_ADDR_VAR 0 7
33462: PUSH
33463: LD_VAR 0 2
33467: PPUSH
33468: CALL_OW 250
33472: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
33473: LD_ADDR_VAR 0 8
33477: PUSH
33478: LD_VAR 0 2
33482: PPUSH
33483: CALL_OW 251
33487: ST_TO_ADDR
// if not x or not y then
33488: LD_VAR 0 7
33492: NOT
33493: PUSH
33494: LD_VAR 0 8
33498: NOT
33499: OR
33500: IFFALSE 33504
// exit ;
33502: GO 33899
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
33504: LD_ADDR_VAR 0 6
33508: PUSH
33509: LD_VAR 0 7
33513: PPUSH
33514: LD_INT 0
33516: PPUSH
33517: LD_INT 4
33519: PPUSH
33520: CALL_OW 272
33524: PUSH
33525: LD_VAR 0 8
33529: PPUSH
33530: LD_INT 0
33532: PPUSH
33533: LD_INT 4
33535: PPUSH
33536: CALL_OW 273
33540: PUSH
33541: EMPTY
33542: LIST
33543: LIST
33544: PUSH
33545: LD_VAR 0 7
33549: PPUSH
33550: LD_INT 1
33552: PPUSH
33553: LD_INT 4
33555: PPUSH
33556: CALL_OW 272
33560: PUSH
33561: LD_VAR 0 8
33565: PPUSH
33566: LD_INT 1
33568: PPUSH
33569: LD_INT 4
33571: PPUSH
33572: CALL_OW 273
33576: PUSH
33577: EMPTY
33578: LIST
33579: LIST
33580: PUSH
33581: LD_VAR 0 7
33585: PPUSH
33586: LD_INT 2
33588: PPUSH
33589: LD_INT 4
33591: PPUSH
33592: CALL_OW 272
33596: PUSH
33597: LD_VAR 0 8
33601: PPUSH
33602: LD_INT 2
33604: PPUSH
33605: LD_INT 4
33607: PPUSH
33608: CALL_OW 273
33612: PUSH
33613: EMPTY
33614: LIST
33615: LIST
33616: PUSH
33617: LD_VAR 0 7
33621: PPUSH
33622: LD_INT 3
33624: PPUSH
33625: LD_INT 4
33627: PPUSH
33628: CALL_OW 272
33632: PUSH
33633: LD_VAR 0 8
33637: PPUSH
33638: LD_INT 3
33640: PPUSH
33641: LD_INT 4
33643: PPUSH
33644: CALL_OW 273
33648: PUSH
33649: EMPTY
33650: LIST
33651: LIST
33652: PUSH
33653: LD_VAR 0 7
33657: PPUSH
33658: LD_INT 4
33660: PPUSH
33661: LD_INT 4
33663: PPUSH
33664: CALL_OW 272
33668: PUSH
33669: LD_VAR 0 8
33673: PPUSH
33674: LD_INT 4
33676: PPUSH
33677: LD_INT 4
33679: PPUSH
33680: CALL_OW 273
33684: PUSH
33685: EMPTY
33686: LIST
33687: LIST
33688: PUSH
33689: LD_VAR 0 7
33693: PPUSH
33694: LD_INT 5
33696: PPUSH
33697: LD_INT 4
33699: PPUSH
33700: CALL_OW 272
33704: PUSH
33705: LD_VAR 0 8
33709: PPUSH
33710: LD_INT 5
33712: PPUSH
33713: LD_INT 4
33715: PPUSH
33716: CALL_OW 273
33720: PUSH
33721: EMPTY
33722: LIST
33723: LIST
33724: PUSH
33725: EMPTY
33726: LIST
33727: LIST
33728: LIST
33729: LIST
33730: LIST
33731: LIST
33732: ST_TO_ADDR
// for i = tmp downto 1 do
33733: LD_ADDR_VAR 0 4
33737: PUSH
33738: DOUBLE
33739: LD_VAR 0 6
33743: INC
33744: ST_TO_ADDR
33745: LD_INT 1
33747: PUSH
33748: FOR_DOWNTO
33749: IFFALSE 33850
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
33751: LD_VAR 0 6
33755: PUSH
33756: LD_VAR 0 4
33760: ARRAY
33761: PUSH
33762: LD_INT 1
33764: ARRAY
33765: PPUSH
33766: LD_VAR 0 6
33770: PUSH
33771: LD_VAR 0 4
33775: ARRAY
33776: PUSH
33777: LD_INT 2
33779: ARRAY
33780: PPUSH
33781: CALL_OW 488
33785: NOT
33786: PUSH
33787: LD_VAR 0 6
33791: PUSH
33792: LD_VAR 0 4
33796: ARRAY
33797: PUSH
33798: LD_INT 1
33800: ARRAY
33801: PPUSH
33802: LD_VAR 0 6
33806: PUSH
33807: LD_VAR 0 4
33811: ARRAY
33812: PUSH
33813: LD_INT 2
33815: ARRAY
33816: PPUSH
33817: CALL_OW 428
33821: PUSH
33822: LD_INT 0
33824: NONEQUAL
33825: OR
33826: IFFALSE 33848
// tmp := Delete ( tmp , i ) ;
33828: LD_ADDR_VAR 0 6
33832: PUSH
33833: LD_VAR 0 6
33837: PPUSH
33838: LD_VAR 0 4
33842: PPUSH
33843: CALL_OW 3
33847: ST_TO_ADDR
33848: GO 33748
33850: POP
33851: POP
// j := GetClosestHex ( unit , tmp ) ;
33852: LD_ADDR_VAR 0 5
33856: PUSH
33857: LD_VAR 0 1
33861: PPUSH
33862: LD_VAR 0 6
33866: PPUSH
33867: CALL 33143 0 2
33871: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
33872: LD_VAR 0 1
33876: PPUSH
33877: LD_VAR 0 5
33881: PUSH
33882: LD_INT 1
33884: ARRAY
33885: PPUSH
33886: LD_VAR 0 5
33890: PUSH
33891: LD_INT 2
33893: ARRAY
33894: PPUSH
33895: CALL_OW 111
// end ;
33899: LD_VAR 0 3
33903: RET
// export function PrepareApemanSoldier ( ) ; begin
33904: LD_INT 0
33906: PPUSH
// uc_nation := 0 ;
33907: LD_ADDR_OWVAR 21
33911: PUSH
33912: LD_INT 0
33914: ST_TO_ADDR
// hc_sex := sex_male ;
33915: LD_ADDR_OWVAR 27
33919: PUSH
33920: LD_INT 1
33922: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
33923: LD_ADDR_OWVAR 28
33927: PUSH
33928: LD_INT 15
33930: ST_TO_ADDR
// hc_gallery :=  ;
33931: LD_ADDR_OWVAR 33
33935: PUSH
33936: LD_STRING 
33938: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
33939: LD_ADDR_OWVAR 31
33943: PUSH
33944: LD_INT 0
33946: PPUSH
33947: LD_INT 3
33949: PPUSH
33950: CALL_OW 12
33954: PUSH
33955: LD_INT 0
33957: PPUSH
33958: LD_INT 3
33960: PPUSH
33961: CALL_OW 12
33965: PUSH
33966: LD_INT 0
33968: PUSH
33969: LD_INT 0
33971: PUSH
33972: EMPTY
33973: LIST
33974: LIST
33975: LIST
33976: LIST
33977: ST_TO_ADDR
// end ;
33978: LD_VAR 0 1
33982: RET
// export function PrepareApemanEngineer ( ) ; begin
33983: LD_INT 0
33985: PPUSH
// uc_nation := 0 ;
33986: LD_ADDR_OWVAR 21
33990: PUSH
33991: LD_INT 0
33993: ST_TO_ADDR
// hc_sex := sex_male ;
33994: LD_ADDR_OWVAR 27
33998: PUSH
33999: LD_INT 1
34001: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
34002: LD_ADDR_OWVAR 28
34006: PUSH
34007: LD_INT 16
34009: ST_TO_ADDR
// hc_gallery :=  ;
34010: LD_ADDR_OWVAR 33
34014: PUSH
34015: LD_STRING 
34017: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
34018: LD_ADDR_OWVAR 31
34022: PUSH
34023: LD_INT 0
34025: PPUSH
34026: LD_INT 3
34028: PPUSH
34029: CALL_OW 12
34033: PUSH
34034: LD_INT 0
34036: PPUSH
34037: LD_INT 3
34039: PPUSH
34040: CALL_OW 12
34044: PUSH
34045: LD_INT 0
34047: PUSH
34048: LD_INT 0
34050: PUSH
34051: EMPTY
34052: LIST
34053: LIST
34054: LIST
34055: LIST
34056: ST_TO_ADDR
// end ;
34057: LD_VAR 0 1
34061: RET
// export function PrepareApeman ( agressivity ) ; begin
34062: LD_INT 0
34064: PPUSH
// uc_side := 0 ;
34065: LD_ADDR_OWVAR 20
34069: PUSH
34070: LD_INT 0
34072: ST_TO_ADDR
// uc_nation := 0 ;
34073: LD_ADDR_OWVAR 21
34077: PUSH
34078: LD_INT 0
34080: ST_TO_ADDR
// hc_sex := sex_male ;
34081: LD_ADDR_OWVAR 27
34085: PUSH
34086: LD_INT 1
34088: ST_TO_ADDR
// hc_class := class_apeman ;
34089: LD_ADDR_OWVAR 28
34093: PUSH
34094: LD_INT 12
34096: ST_TO_ADDR
// hc_gallery :=  ;
34097: LD_ADDR_OWVAR 33
34101: PUSH
34102: LD_STRING 
34104: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
34105: LD_ADDR_OWVAR 35
34109: PUSH
34110: LD_VAR 0 1
34114: NEG
34115: PPUSH
34116: LD_VAR 0 1
34120: PPUSH
34121: CALL_OW 12
34125: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
34126: LD_ADDR_OWVAR 31
34130: PUSH
34131: LD_INT 0
34133: PPUSH
34134: LD_INT 3
34136: PPUSH
34137: CALL_OW 12
34141: PUSH
34142: LD_INT 0
34144: PPUSH
34145: LD_INT 3
34147: PPUSH
34148: CALL_OW 12
34152: PUSH
34153: LD_INT 0
34155: PUSH
34156: LD_INT 0
34158: PUSH
34159: EMPTY
34160: LIST
34161: LIST
34162: LIST
34163: LIST
34164: ST_TO_ADDR
// end ;
34165: LD_VAR 0 2
34169: RET
// export function PrepareTiger ( agressivity ) ; begin
34170: LD_INT 0
34172: PPUSH
// uc_side := 0 ;
34173: LD_ADDR_OWVAR 20
34177: PUSH
34178: LD_INT 0
34180: ST_TO_ADDR
// uc_nation := 0 ;
34181: LD_ADDR_OWVAR 21
34185: PUSH
34186: LD_INT 0
34188: ST_TO_ADDR
// hc_class := class_tiger ;
34189: LD_ADDR_OWVAR 28
34193: PUSH
34194: LD_INT 14
34196: ST_TO_ADDR
// hc_gallery :=  ;
34197: LD_ADDR_OWVAR 33
34201: PUSH
34202: LD_STRING 
34204: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
34205: LD_ADDR_OWVAR 35
34209: PUSH
34210: LD_VAR 0 1
34214: NEG
34215: PPUSH
34216: LD_VAR 0 1
34220: PPUSH
34221: CALL_OW 12
34225: ST_TO_ADDR
// end ;
34226: LD_VAR 0 2
34230: RET
// export function PrepareEnchidna ( ) ; begin
34231: LD_INT 0
34233: PPUSH
// uc_side := 0 ;
34234: LD_ADDR_OWVAR 20
34238: PUSH
34239: LD_INT 0
34241: ST_TO_ADDR
// uc_nation := 0 ;
34242: LD_ADDR_OWVAR 21
34246: PUSH
34247: LD_INT 0
34249: ST_TO_ADDR
// hc_class := class_baggie ;
34250: LD_ADDR_OWVAR 28
34254: PUSH
34255: LD_INT 13
34257: ST_TO_ADDR
// hc_gallery :=  ;
34258: LD_ADDR_OWVAR 33
34262: PUSH
34263: LD_STRING 
34265: ST_TO_ADDR
// end ;
34266: LD_VAR 0 1
34270: RET
// export function PrepareFrog ( ) ; begin
34271: LD_INT 0
34273: PPUSH
// uc_side := 0 ;
34274: LD_ADDR_OWVAR 20
34278: PUSH
34279: LD_INT 0
34281: ST_TO_ADDR
// uc_nation := 0 ;
34282: LD_ADDR_OWVAR 21
34286: PUSH
34287: LD_INT 0
34289: ST_TO_ADDR
// hc_class := class_frog ;
34290: LD_ADDR_OWVAR 28
34294: PUSH
34295: LD_INT 19
34297: ST_TO_ADDR
// hc_gallery :=  ;
34298: LD_ADDR_OWVAR 33
34302: PUSH
34303: LD_STRING 
34305: ST_TO_ADDR
// end ;
34306: LD_VAR 0 1
34310: RET
// export function PrepareFish ( ) ; begin
34311: LD_INT 0
34313: PPUSH
// uc_side := 0 ;
34314: LD_ADDR_OWVAR 20
34318: PUSH
34319: LD_INT 0
34321: ST_TO_ADDR
// uc_nation := 0 ;
34322: LD_ADDR_OWVAR 21
34326: PUSH
34327: LD_INT 0
34329: ST_TO_ADDR
// hc_class := class_fish ;
34330: LD_ADDR_OWVAR 28
34334: PUSH
34335: LD_INT 20
34337: ST_TO_ADDR
// hc_gallery :=  ;
34338: LD_ADDR_OWVAR 33
34342: PUSH
34343: LD_STRING 
34345: ST_TO_ADDR
// end ;
34346: LD_VAR 0 1
34350: RET
// export function PrepareBird ( ) ; begin
34351: LD_INT 0
34353: PPUSH
// uc_side := 0 ;
34354: LD_ADDR_OWVAR 20
34358: PUSH
34359: LD_INT 0
34361: ST_TO_ADDR
// uc_nation := 0 ;
34362: LD_ADDR_OWVAR 21
34366: PUSH
34367: LD_INT 0
34369: ST_TO_ADDR
// hc_class := class_phororhacos ;
34370: LD_ADDR_OWVAR 28
34374: PUSH
34375: LD_INT 18
34377: ST_TO_ADDR
// hc_gallery :=  ;
34378: LD_ADDR_OWVAR 33
34382: PUSH
34383: LD_STRING 
34385: ST_TO_ADDR
// end ;
34386: LD_VAR 0 1
34390: RET
// export function PrepareHorse ( ) ; begin
34391: LD_INT 0
34393: PPUSH
// uc_side := 0 ;
34394: LD_ADDR_OWVAR 20
34398: PUSH
34399: LD_INT 0
34401: ST_TO_ADDR
// uc_nation := 0 ;
34402: LD_ADDR_OWVAR 21
34406: PUSH
34407: LD_INT 0
34409: ST_TO_ADDR
// hc_class := class_horse ;
34410: LD_ADDR_OWVAR 28
34414: PUSH
34415: LD_INT 21
34417: ST_TO_ADDR
// hc_gallery :=  ;
34418: LD_ADDR_OWVAR 33
34422: PUSH
34423: LD_STRING 
34425: ST_TO_ADDR
// end ;
34426: LD_VAR 0 1
34430: RET
// export function PrepareMastodont ( ) ; begin
34431: LD_INT 0
34433: PPUSH
// uc_side := 0 ;
34434: LD_ADDR_OWVAR 20
34438: PUSH
34439: LD_INT 0
34441: ST_TO_ADDR
// uc_nation := 0 ;
34442: LD_ADDR_OWVAR 21
34446: PUSH
34447: LD_INT 0
34449: ST_TO_ADDR
// vc_chassis := class_mastodont ;
34450: LD_ADDR_OWVAR 37
34454: PUSH
34455: LD_INT 31
34457: ST_TO_ADDR
// vc_control := control_rider ;
34458: LD_ADDR_OWVAR 38
34462: PUSH
34463: LD_INT 4
34465: ST_TO_ADDR
// end ;
34466: LD_VAR 0 1
34470: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
34471: LD_INT 0
34473: PPUSH
34474: PPUSH
34475: PPUSH
// uc_side = 0 ;
34476: LD_ADDR_OWVAR 20
34480: PUSH
34481: LD_INT 0
34483: ST_TO_ADDR
// uc_nation = 0 ;
34484: LD_ADDR_OWVAR 21
34488: PUSH
34489: LD_INT 0
34491: ST_TO_ADDR
// InitHc_All ( ) ;
34492: CALL_OW 584
// InitVc ;
34496: CALL_OW 20
// if mastodonts then
34500: LD_VAR 0 6
34504: IFFALSE 34571
// for i = 1 to mastodonts do
34506: LD_ADDR_VAR 0 11
34510: PUSH
34511: DOUBLE
34512: LD_INT 1
34514: DEC
34515: ST_TO_ADDR
34516: LD_VAR 0 6
34520: PUSH
34521: FOR_TO
34522: IFFALSE 34569
// begin vc_chassis := 31 ;
34524: LD_ADDR_OWVAR 37
34528: PUSH
34529: LD_INT 31
34531: ST_TO_ADDR
// vc_control := control_rider ;
34532: LD_ADDR_OWVAR 38
34536: PUSH
34537: LD_INT 4
34539: ST_TO_ADDR
// animal := CreateVehicle ;
34540: LD_ADDR_VAR 0 12
34544: PUSH
34545: CALL_OW 45
34549: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
34550: LD_VAR 0 12
34554: PPUSH
34555: LD_VAR 0 8
34559: PPUSH
34560: LD_INT 0
34562: PPUSH
34563: CALL 36699 0 3
// end ;
34567: GO 34521
34569: POP
34570: POP
// if horses then
34571: LD_VAR 0 5
34575: IFFALSE 34642
// for i = 1 to horses do
34577: LD_ADDR_VAR 0 11
34581: PUSH
34582: DOUBLE
34583: LD_INT 1
34585: DEC
34586: ST_TO_ADDR
34587: LD_VAR 0 5
34591: PUSH
34592: FOR_TO
34593: IFFALSE 34640
// begin hc_class := 21 ;
34595: LD_ADDR_OWVAR 28
34599: PUSH
34600: LD_INT 21
34602: ST_TO_ADDR
// hc_gallery :=  ;
34603: LD_ADDR_OWVAR 33
34607: PUSH
34608: LD_STRING 
34610: ST_TO_ADDR
// animal := CreateHuman ;
34611: LD_ADDR_VAR 0 12
34615: PUSH
34616: CALL_OW 44
34620: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
34621: LD_VAR 0 12
34625: PPUSH
34626: LD_VAR 0 8
34630: PPUSH
34631: LD_INT 0
34633: PPUSH
34634: CALL 36699 0 3
// end ;
34638: GO 34592
34640: POP
34641: POP
// if birds then
34642: LD_VAR 0 1
34646: IFFALSE 34713
// for i = 1 to birds do
34648: LD_ADDR_VAR 0 11
34652: PUSH
34653: DOUBLE
34654: LD_INT 1
34656: DEC
34657: ST_TO_ADDR
34658: LD_VAR 0 1
34662: PUSH
34663: FOR_TO
34664: IFFALSE 34711
// begin hc_class := 18 ;
34666: LD_ADDR_OWVAR 28
34670: PUSH
34671: LD_INT 18
34673: ST_TO_ADDR
// hc_gallery =  ;
34674: LD_ADDR_OWVAR 33
34678: PUSH
34679: LD_STRING 
34681: ST_TO_ADDR
// animal := CreateHuman ;
34682: LD_ADDR_VAR 0 12
34686: PUSH
34687: CALL_OW 44
34691: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
34692: LD_VAR 0 12
34696: PPUSH
34697: LD_VAR 0 8
34701: PPUSH
34702: LD_INT 0
34704: PPUSH
34705: CALL 36699 0 3
// end ;
34709: GO 34663
34711: POP
34712: POP
// if tigers then
34713: LD_VAR 0 2
34717: IFFALSE 34801
// for i = 1 to tigers do
34719: LD_ADDR_VAR 0 11
34723: PUSH
34724: DOUBLE
34725: LD_INT 1
34727: DEC
34728: ST_TO_ADDR
34729: LD_VAR 0 2
34733: PUSH
34734: FOR_TO
34735: IFFALSE 34799
// begin hc_class = class_tiger ;
34737: LD_ADDR_OWVAR 28
34741: PUSH
34742: LD_INT 14
34744: ST_TO_ADDR
// hc_gallery =  ;
34745: LD_ADDR_OWVAR 33
34749: PUSH
34750: LD_STRING 
34752: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
34753: LD_ADDR_OWVAR 35
34757: PUSH
34758: LD_INT 7
34760: NEG
34761: PPUSH
34762: LD_INT 7
34764: PPUSH
34765: CALL_OW 12
34769: ST_TO_ADDR
// animal := CreateHuman ;
34770: LD_ADDR_VAR 0 12
34774: PUSH
34775: CALL_OW 44
34779: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
34780: LD_VAR 0 12
34784: PPUSH
34785: LD_VAR 0 8
34789: PPUSH
34790: LD_INT 0
34792: PPUSH
34793: CALL 36699 0 3
// end ;
34797: GO 34734
34799: POP
34800: POP
// if apemans then
34801: LD_VAR 0 3
34805: IFFALSE 34928
// for i = 1 to apemans do
34807: LD_ADDR_VAR 0 11
34811: PUSH
34812: DOUBLE
34813: LD_INT 1
34815: DEC
34816: ST_TO_ADDR
34817: LD_VAR 0 3
34821: PUSH
34822: FOR_TO
34823: IFFALSE 34926
// begin hc_class = class_apeman ;
34825: LD_ADDR_OWVAR 28
34829: PUSH
34830: LD_INT 12
34832: ST_TO_ADDR
// hc_gallery =  ;
34833: LD_ADDR_OWVAR 33
34837: PUSH
34838: LD_STRING 
34840: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
34841: LD_ADDR_OWVAR 35
34845: PUSH
34846: LD_INT 2
34848: NEG
34849: PPUSH
34850: LD_INT 2
34852: PPUSH
34853: CALL_OW 12
34857: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
34858: LD_ADDR_OWVAR 31
34862: PUSH
34863: LD_INT 1
34865: PPUSH
34866: LD_INT 3
34868: PPUSH
34869: CALL_OW 12
34873: PUSH
34874: LD_INT 1
34876: PPUSH
34877: LD_INT 3
34879: PPUSH
34880: CALL_OW 12
34884: PUSH
34885: LD_INT 0
34887: PUSH
34888: LD_INT 0
34890: PUSH
34891: EMPTY
34892: LIST
34893: LIST
34894: LIST
34895: LIST
34896: ST_TO_ADDR
// animal := CreateHuman ;
34897: LD_ADDR_VAR 0 12
34901: PUSH
34902: CALL_OW 44
34906: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
34907: LD_VAR 0 12
34911: PPUSH
34912: LD_VAR 0 8
34916: PPUSH
34917: LD_INT 0
34919: PPUSH
34920: CALL 36699 0 3
// end ;
34924: GO 34822
34926: POP
34927: POP
// if enchidnas then
34928: LD_VAR 0 4
34932: IFFALSE 34999
// for i = 1 to enchidnas do
34934: LD_ADDR_VAR 0 11
34938: PUSH
34939: DOUBLE
34940: LD_INT 1
34942: DEC
34943: ST_TO_ADDR
34944: LD_VAR 0 4
34948: PUSH
34949: FOR_TO
34950: IFFALSE 34997
// begin hc_class = 13 ;
34952: LD_ADDR_OWVAR 28
34956: PUSH
34957: LD_INT 13
34959: ST_TO_ADDR
// hc_gallery =  ;
34960: LD_ADDR_OWVAR 33
34964: PUSH
34965: LD_STRING 
34967: ST_TO_ADDR
// animal := CreateHuman ;
34968: LD_ADDR_VAR 0 12
34972: PUSH
34973: CALL_OW 44
34977: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
34978: LD_VAR 0 12
34982: PPUSH
34983: LD_VAR 0 8
34987: PPUSH
34988: LD_INT 0
34990: PPUSH
34991: CALL 36699 0 3
// end ;
34995: GO 34949
34997: POP
34998: POP
// if fishes then
34999: LD_VAR 0 7
35003: IFFALSE 35070
// for i = 1 to fishes do
35005: LD_ADDR_VAR 0 11
35009: PUSH
35010: DOUBLE
35011: LD_INT 1
35013: DEC
35014: ST_TO_ADDR
35015: LD_VAR 0 7
35019: PUSH
35020: FOR_TO
35021: IFFALSE 35068
// begin hc_class = 20 ;
35023: LD_ADDR_OWVAR 28
35027: PUSH
35028: LD_INT 20
35030: ST_TO_ADDR
// hc_gallery =  ;
35031: LD_ADDR_OWVAR 33
35035: PUSH
35036: LD_STRING 
35038: ST_TO_ADDR
// animal := CreateHuman ;
35039: LD_ADDR_VAR 0 12
35043: PUSH
35044: CALL_OW 44
35048: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
35049: LD_VAR 0 12
35053: PPUSH
35054: LD_VAR 0 9
35058: PPUSH
35059: LD_INT 0
35061: PPUSH
35062: CALL 36699 0 3
// end ;
35066: GO 35020
35068: POP
35069: POP
// end ;
35070: LD_VAR 0 10
35074: RET
// export function WantHeal ( sci , unit ) ; begin
35075: LD_INT 0
35077: PPUSH
// if GetTaskList ( sci ) > 0 then
35078: LD_VAR 0 1
35082: PPUSH
35083: CALL_OW 437
35087: PUSH
35088: LD_INT 0
35090: GREATER
35091: IFFALSE 35161
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
35093: LD_VAR 0 1
35097: PPUSH
35098: CALL_OW 437
35102: PUSH
35103: LD_INT 1
35105: ARRAY
35106: PUSH
35107: LD_INT 1
35109: ARRAY
35110: PUSH
35111: LD_STRING l
35113: EQUAL
35114: PUSH
35115: LD_VAR 0 1
35119: PPUSH
35120: CALL_OW 437
35124: PUSH
35125: LD_INT 1
35127: ARRAY
35128: PUSH
35129: LD_INT 4
35131: ARRAY
35132: PUSH
35133: LD_VAR 0 2
35137: EQUAL
35138: AND
35139: IFFALSE 35151
// result := true else
35141: LD_ADDR_VAR 0 3
35145: PUSH
35146: LD_INT 1
35148: ST_TO_ADDR
35149: GO 35159
// result := false ;
35151: LD_ADDR_VAR 0 3
35155: PUSH
35156: LD_INT 0
35158: ST_TO_ADDR
// end else
35159: GO 35169
// result := false ;
35161: LD_ADDR_VAR 0 3
35165: PUSH
35166: LD_INT 0
35168: ST_TO_ADDR
// end ;
35169: LD_VAR 0 3
35173: RET
// export function HealTarget ( sci ) ; begin
35174: LD_INT 0
35176: PPUSH
// if not sci then
35177: LD_VAR 0 1
35181: NOT
35182: IFFALSE 35186
// exit ;
35184: GO 35251
// result := 0 ;
35186: LD_ADDR_VAR 0 2
35190: PUSH
35191: LD_INT 0
35193: ST_TO_ADDR
// if GetTaskList ( sci ) then
35194: LD_VAR 0 1
35198: PPUSH
35199: CALL_OW 437
35203: IFFALSE 35251
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
35205: LD_VAR 0 1
35209: PPUSH
35210: CALL_OW 437
35214: PUSH
35215: LD_INT 1
35217: ARRAY
35218: PUSH
35219: LD_INT 1
35221: ARRAY
35222: PUSH
35223: LD_STRING l
35225: EQUAL
35226: IFFALSE 35251
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
35228: LD_ADDR_VAR 0 2
35232: PUSH
35233: LD_VAR 0 1
35237: PPUSH
35238: CALL_OW 437
35242: PUSH
35243: LD_INT 1
35245: ARRAY
35246: PUSH
35247: LD_INT 4
35249: ARRAY
35250: ST_TO_ADDR
// end ;
35251: LD_VAR 0 2
35255: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
35256: LD_INT 0
35258: PPUSH
35259: PPUSH
35260: PPUSH
35261: PPUSH
// if not base_units then
35262: LD_VAR 0 1
35266: NOT
35267: IFFALSE 35271
// exit ;
35269: GO 35358
// result := false ;
35271: LD_ADDR_VAR 0 2
35275: PUSH
35276: LD_INT 0
35278: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
35279: LD_ADDR_VAR 0 5
35283: PUSH
35284: LD_VAR 0 1
35288: PPUSH
35289: LD_INT 21
35291: PUSH
35292: LD_INT 3
35294: PUSH
35295: EMPTY
35296: LIST
35297: LIST
35298: PPUSH
35299: CALL_OW 72
35303: ST_TO_ADDR
// if not tmp then
35304: LD_VAR 0 5
35308: NOT
35309: IFFALSE 35313
// exit ;
35311: GO 35358
// for i in tmp do
35313: LD_ADDR_VAR 0 3
35317: PUSH
35318: LD_VAR 0 5
35322: PUSH
35323: FOR_IN
35324: IFFALSE 35356
// begin result := EnemyInRange ( i , 22 ) ;
35326: LD_ADDR_VAR 0 2
35330: PUSH
35331: LD_VAR 0 3
35335: PPUSH
35336: LD_INT 22
35338: PPUSH
35339: CALL 32945 0 2
35343: ST_TO_ADDR
// if result then
35344: LD_VAR 0 2
35348: IFFALSE 35354
// exit ;
35350: POP
35351: POP
35352: GO 35358
// end ;
35354: GO 35323
35356: POP
35357: POP
// end ;
35358: LD_VAR 0 2
35362: RET
// export function FilterByTag ( units , tag ) ; begin
35363: LD_INT 0
35365: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
35366: LD_ADDR_VAR 0 3
35370: PUSH
35371: LD_VAR 0 1
35375: PPUSH
35376: LD_INT 120
35378: PUSH
35379: LD_VAR 0 2
35383: PUSH
35384: EMPTY
35385: LIST
35386: LIST
35387: PPUSH
35388: CALL_OW 72
35392: ST_TO_ADDR
// end ;
35393: LD_VAR 0 3
35397: RET
// export function IsDriver ( un ) ; begin
35398: LD_INT 0
35400: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
35401: LD_ADDR_VAR 0 2
35405: PUSH
35406: LD_VAR 0 1
35410: PUSH
35411: LD_INT 55
35413: PUSH
35414: EMPTY
35415: LIST
35416: PPUSH
35417: CALL_OW 69
35421: IN
35422: ST_TO_ADDR
// end ;
35423: LD_VAR 0 2
35427: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
35428: LD_INT 0
35430: PPUSH
35431: PPUSH
// list := [ ] ;
35432: LD_ADDR_VAR 0 5
35436: PUSH
35437: EMPTY
35438: ST_TO_ADDR
// case d of 0 :
35439: LD_VAR 0 3
35443: PUSH
35444: LD_INT 0
35446: DOUBLE
35447: EQUAL
35448: IFTRUE 35452
35450: GO 35585
35452: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
35453: LD_ADDR_VAR 0 5
35457: PUSH
35458: LD_VAR 0 1
35462: PUSH
35463: LD_INT 4
35465: MINUS
35466: PUSH
35467: LD_VAR 0 2
35471: PUSH
35472: LD_INT 4
35474: MINUS
35475: PUSH
35476: LD_INT 2
35478: PUSH
35479: EMPTY
35480: LIST
35481: LIST
35482: LIST
35483: PUSH
35484: LD_VAR 0 1
35488: PUSH
35489: LD_INT 3
35491: MINUS
35492: PUSH
35493: LD_VAR 0 2
35497: PUSH
35498: LD_INT 1
35500: PUSH
35501: EMPTY
35502: LIST
35503: LIST
35504: LIST
35505: PUSH
35506: LD_VAR 0 1
35510: PUSH
35511: LD_INT 4
35513: PLUS
35514: PUSH
35515: LD_VAR 0 2
35519: PUSH
35520: LD_INT 4
35522: PUSH
35523: EMPTY
35524: LIST
35525: LIST
35526: LIST
35527: PUSH
35528: LD_VAR 0 1
35532: PUSH
35533: LD_INT 3
35535: PLUS
35536: PUSH
35537: LD_VAR 0 2
35541: PUSH
35542: LD_INT 3
35544: PLUS
35545: PUSH
35546: LD_INT 5
35548: PUSH
35549: EMPTY
35550: LIST
35551: LIST
35552: LIST
35553: PUSH
35554: LD_VAR 0 1
35558: PUSH
35559: LD_VAR 0 2
35563: PUSH
35564: LD_INT 4
35566: PLUS
35567: PUSH
35568: LD_INT 0
35570: PUSH
35571: EMPTY
35572: LIST
35573: LIST
35574: LIST
35575: PUSH
35576: EMPTY
35577: LIST
35578: LIST
35579: LIST
35580: LIST
35581: LIST
35582: ST_TO_ADDR
// end ; 1 :
35583: GO 36283
35585: LD_INT 1
35587: DOUBLE
35588: EQUAL
35589: IFTRUE 35593
35591: GO 35726
35593: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
35594: LD_ADDR_VAR 0 5
35598: PUSH
35599: LD_VAR 0 1
35603: PUSH
35604: LD_VAR 0 2
35608: PUSH
35609: LD_INT 4
35611: MINUS
35612: PUSH
35613: LD_INT 3
35615: PUSH
35616: EMPTY
35617: LIST
35618: LIST
35619: LIST
35620: PUSH
35621: LD_VAR 0 1
35625: PUSH
35626: LD_INT 3
35628: MINUS
35629: PUSH
35630: LD_VAR 0 2
35634: PUSH
35635: LD_INT 3
35637: MINUS
35638: PUSH
35639: LD_INT 2
35641: PUSH
35642: EMPTY
35643: LIST
35644: LIST
35645: LIST
35646: PUSH
35647: LD_VAR 0 1
35651: PUSH
35652: LD_INT 4
35654: MINUS
35655: PUSH
35656: LD_VAR 0 2
35660: PUSH
35661: LD_INT 1
35663: PUSH
35664: EMPTY
35665: LIST
35666: LIST
35667: LIST
35668: PUSH
35669: LD_VAR 0 1
35673: PUSH
35674: LD_VAR 0 2
35678: PUSH
35679: LD_INT 3
35681: PLUS
35682: PUSH
35683: LD_INT 0
35685: PUSH
35686: EMPTY
35687: LIST
35688: LIST
35689: LIST
35690: PUSH
35691: LD_VAR 0 1
35695: PUSH
35696: LD_INT 4
35698: PLUS
35699: PUSH
35700: LD_VAR 0 2
35704: PUSH
35705: LD_INT 4
35707: PLUS
35708: PUSH
35709: LD_INT 5
35711: PUSH
35712: EMPTY
35713: LIST
35714: LIST
35715: LIST
35716: PUSH
35717: EMPTY
35718: LIST
35719: LIST
35720: LIST
35721: LIST
35722: LIST
35723: ST_TO_ADDR
// end ; 2 :
35724: GO 36283
35726: LD_INT 2
35728: DOUBLE
35729: EQUAL
35730: IFTRUE 35734
35732: GO 35863
35734: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
35735: LD_ADDR_VAR 0 5
35739: PUSH
35740: LD_VAR 0 1
35744: PUSH
35745: LD_VAR 0 2
35749: PUSH
35750: LD_INT 3
35752: MINUS
35753: PUSH
35754: LD_INT 3
35756: PUSH
35757: EMPTY
35758: LIST
35759: LIST
35760: LIST
35761: PUSH
35762: LD_VAR 0 1
35766: PUSH
35767: LD_INT 4
35769: PLUS
35770: PUSH
35771: LD_VAR 0 2
35775: PUSH
35776: LD_INT 4
35778: PUSH
35779: EMPTY
35780: LIST
35781: LIST
35782: LIST
35783: PUSH
35784: LD_VAR 0 1
35788: PUSH
35789: LD_VAR 0 2
35793: PUSH
35794: LD_INT 4
35796: PLUS
35797: PUSH
35798: LD_INT 0
35800: PUSH
35801: EMPTY
35802: LIST
35803: LIST
35804: LIST
35805: PUSH
35806: LD_VAR 0 1
35810: PUSH
35811: LD_INT 3
35813: MINUS
35814: PUSH
35815: LD_VAR 0 2
35819: PUSH
35820: LD_INT 1
35822: PUSH
35823: EMPTY
35824: LIST
35825: LIST
35826: LIST
35827: PUSH
35828: LD_VAR 0 1
35832: PUSH
35833: LD_INT 4
35835: MINUS
35836: PUSH
35837: LD_VAR 0 2
35841: PUSH
35842: LD_INT 4
35844: MINUS
35845: PUSH
35846: LD_INT 2
35848: PUSH
35849: EMPTY
35850: LIST
35851: LIST
35852: LIST
35853: PUSH
35854: EMPTY
35855: LIST
35856: LIST
35857: LIST
35858: LIST
35859: LIST
35860: ST_TO_ADDR
// end ; 3 :
35861: GO 36283
35863: LD_INT 3
35865: DOUBLE
35866: EQUAL
35867: IFTRUE 35871
35869: GO 36004
35871: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
35872: LD_ADDR_VAR 0 5
35876: PUSH
35877: LD_VAR 0 1
35881: PUSH
35882: LD_INT 3
35884: PLUS
35885: PUSH
35886: LD_VAR 0 2
35890: PUSH
35891: LD_INT 4
35893: PUSH
35894: EMPTY
35895: LIST
35896: LIST
35897: LIST
35898: PUSH
35899: LD_VAR 0 1
35903: PUSH
35904: LD_INT 4
35906: PLUS
35907: PUSH
35908: LD_VAR 0 2
35912: PUSH
35913: LD_INT 4
35915: PLUS
35916: PUSH
35917: LD_INT 5
35919: PUSH
35920: EMPTY
35921: LIST
35922: LIST
35923: LIST
35924: PUSH
35925: LD_VAR 0 1
35929: PUSH
35930: LD_INT 4
35932: MINUS
35933: PUSH
35934: LD_VAR 0 2
35938: PUSH
35939: LD_INT 1
35941: PUSH
35942: EMPTY
35943: LIST
35944: LIST
35945: LIST
35946: PUSH
35947: LD_VAR 0 1
35951: PUSH
35952: LD_VAR 0 2
35956: PUSH
35957: LD_INT 4
35959: MINUS
35960: PUSH
35961: LD_INT 3
35963: PUSH
35964: EMPTY
35965: LIST
35966: LIST
35967: LIST
35968: PUSH
35969: LD_VAR 0 1
35973: PUSH
35974: LD_INT 3
35976: MINUS
35977: PUSH
35978: LD_VAR 0 2
35982: PUSH
35983: LD_INT 3
35985: MINUS
35986: PUSH
35987: LD_INT 2
35989: PUSH
35990: EMPTY
35991: LIST
35992: LIST
35993: LIST
35994: PUSH
35995: EMPTY
35996: LIST
35997: LIST
35998: LIST
35999: LIST
36000: LIST
36001: ST_TO_ADDR
// end ; 4 :
36002: GO 36283
36004: LD_INT 4
36006: DOUBLE
36007: EQUAL
36008: IFTRUE 36012
36010: GO 36145
36012: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
36013: LD_ADDR_VAR 0 5
36017: PUSH
36018: LD_VAR 0 1
36022: PUSH
36023: LD_VAR 0 2
36027: PUSH
36028: LD_INT 4
36030: PLUS
36031: PUSH
36032: LD_INT 0
36034: PUSH
36035: EMPTY
36036: LIST
36037: LIST
36038: LIST
36039: PUSH
36040: LD_VAR 0 1
36044: PUSH
36045: LD_INT 3
36047: PLUS
36048: PUSH
36049: LD_VAR 0 2
36053: PUSH
36054: LD_INT 3
36056: PLUS
36057: PUSH
36058: LD_INT 5
36060: PUSH
36061: EMPTY
36062: LIST
36063: LIST
36064: LIST
36065: PUSH
36066: LD_VAR 0 1
36070: PUSH
36071: LD_INT 4
36073: PLUS
36074: PUSH
36075: LD_VAR 0 2
36079: PUSH
36080: LD_INT 4
36082: PUSH
36083: EMPTY
36084: LIST
36085: LIST
36086: LIST
36087: PUSH
36088: LD_VAR 0 1
36092: PUSH
36093: LD_VAR 0 2
36097: PUSH
36098: LD_INT 3
36100: MINUS
36101: PUSH
36102: LD_INT 3
36104: PUSH
36105: EMPTY
36106: LIST
36107: LIST
36108: LIST
36109: PUSH
36110: LD_VAR 0 1
36114: PUSH
36115: LD_INT 4
36117: MINUS
36118: PUSH
36119: LD_VAR 0 2
36123: PUSH
36124: LD_INT 4
36126: MINUS
36127: PUSH
36128: LD_INT 2
36130: PUSH
36131: EMPTY
36132: LIST
36133: LIST
36134: LIST
36135: PUSH
36136: EMPTY
36137: LIST
36138: LIST
36139: LIST
36140: LIST
36141: LIST
36142: ST_TO_ADDR
// end ; 5 :
36143: GO 36283
36145: LD_INT 5
36147: DOUBLE
36148: EQUAL
36149: IFTRUE 36153
36151: GO 36282
36153: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
36154: LD_ADDR_VAR 0 5
36158: PUSH
36159: LD_VAR 0 1
36163: PUSH
36164: LD_INT 4
36166: MINUS
36167: PUSH
36168: LD_VAR 0 2
36172: PUSH
36173: LD_INT 1
36175: PUSH
36176: EMPTY
36177: LIST
36178: LIST
36179: LIST
36180: PUSH
36181: LD_VAR 0 1
36185: PUSH
36186: LD_VAR 0 2
36190: PUSH
36191: LD_INT 4
36193: MINUS
36194: PUSH
36195: LD_INT 3
36197: PUSH
36198: EMPTY
36199: LIST
36200: LIST
36201: LIST
36202: PUSH
36203: LD_VAR 0 1
36207: PUSH
36208: LD_INT 4
36210: PLUS
36211: PUSH
36212: LD_VAR 0 2
36216: PUSH
36217: LD_INT 4
36219: PLUS
36220: PUSH
36221: LD_INT 5
36223: PUSH
36224: EMPTY
36225: LIST
36226: LIST
36227: LIST
36228: PUSH
36229: LD_VAR 0 1
36233: PUSH
36234: LD_INT 3
36236: PLUS
36237: PUSH
36238: LD_VAR 0 2
36242: PUSH
36243: LD_INT 4
36245: PUSH
36246: EMPTY
36247: LIST
36248: LIST
36249: LIST
36250: PUSH
36251: LD_VAR 0 1
36255: PUSH
36256: LD_VAR 0 2
36260: PUSH
36261: LD_INT 3
36263: PLUS
36264: PUSH
36265: LD_INT 0
36267: PUSH
36268: EMPTY
36269: LIST
36270: LIST
36271: LIST
36272: PUSH
36273: EMPTY
36274: LIST
36275: LIST
36276: LIST
36277: LIST
36278: LIST
36279: ST_TO_ADDR
// end ; end ;
36280: GO 36283
36282: POP
// result := list ;
36283: LD_ADDR_VAR 0 4
36287: PUSH
36288: LD_VAR 0 5
36292: ST_TO_ADDR
// end ;
36293: LD_VAR 0 4
36297: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
36298: LD_INT 0
36300: PPUSH
36301: PPUSH
36302: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
36303: LD_VAR 0 1
36307: NOT
36308: PUSH
36309: LD_VAR 0 2
36313: PUSH
36314: LD_INT 1
36316: PUSH
36317: LD_INT 2
36319: PUSH
36320: LD_INT 3
36322: PUSH
36323: LD_INT 4
36325: PUSH
36326: EMPTY
36327: LIST
36328: LIST
36329: LIST
36330: LIST
36331: IN
36332: NOT
36333: OR
36334: IFFALSE 36338
// exit ;
36336: GO 36421
// tmp := [ ] ;
36338: LD_ADDR_VAR 0 5
36342: PUSH
36343: EMPTY
36344: ST_TO_ADDR
// for i in units do
36345: LD_ADDR_VAR 0 4
36349: PUSH
36350: LD_VAR 0 1
36354: PUSH
36355: FOR_IN
36356: IFFALSE 36390
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
36358: LD_ADDR_VAR 0 5
36362: PUSH
36363: LD_VAR 0 5
36367: PPUSH
36368: LD_VAR 0 4
36372: PPUSH
36373: LD_VAR 0 2
36377: PPUSH
36378: CALL_OW 259
36382: PPUSH
36383: CALL 37781 0 2
36387: ST_TO_ADDR
36388: GO 36355
36390: POP
36391: POP
// if not tmp then
36392: LD_VAR 0 5
36396: NOT
36397: IFFALSE 36401
// exit ;
36399: GO 36421
// result := SortListByListDesc ( units , tmp ) ;
36401: LD_ADDR_VAR 0 3
36405: PUSH
36406: LD_VAR 0 1
36410: PPUSH
36411: LD_VAR 0 5
36415: PPUSH
36416: CALL_OW 77
36420: ST_TO_ADDR
// end ;
36421: LD_VAR 0 3
36425: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
36426: LD_INT 0
36428: PPUSH
36429: PPUSH
36430: PPUSH
// result := false ;
36431: LD_ADDR_VAR 0 3
36435: PUSH
36436: LD_INT 0
36438: ST_TO_ADDR
// if not building then
36439: LD_VAR 0 2
36443: NOT
36444: IFFALSE 36448
// exit ;
36446: GO 36586
// x := GetX ( building ) ;
36448: LD_ADDR_VAR 0 4
36452: PUSH
36453: LD_VAR 0 2
36457: PPUSH
36458: CALL_OW 250
36462: ST_TO_ADDR
// y := GetY ( building ) ;
36463: LD_ADDR_VAR 0 5
36467: PUSH
36468: LD_VAR 0 2
36472: PPUSH
36473: CALL_OW 251
36477: ST_TO_ADDR
// if not x or not y then
36478: LD_VAR 0 4
36482: NOT
36483: PUSH
36484: LD_VAR 0 5
36488: NOT
36489: OR
36490: IFFALSE 36494
// exit ;
36492: GO 36586
// if GetTaskList ( unit ) then
36494: LD_VAR 0 1
36498: PPUSH
36499: CALL_OW 437
36503: IFFALSE 36586
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
36505: LD_STRING e
36507: PUSH
36508: LD_VAR 0 1
36512: PPUSH
36513: CALL_OW 437
36517: PUSH
36518: LD_INT 1
36520: ARRAY
36521: PUSH
36522: LD_INT 1
36524: ARRAY
36525: EQUAL
36526: PUSH
36527: LD_VAR 0 4
36531: PUSH
36532: LD_VAR 0 1
36536: PPUSH
36537: CALL_OW 437
36541: PUSH
36542: LD_INT 1
36544: ARRAY
36545: PUSH
36546: LD_INT 2
36548: ARRAY
36549: EQUAL
36550: AND
36551: PUSH
36552: LD_VAR 0 5
36556: PUSH
36557: LD_VAR 0 1
36561: PPUSH
36562: CALL_OW 437
36566: PUSH
36567: LD_INT 1
36569: ARRAY
36570: PUSH
36571: LD_INT 3
36573: ARRAY
36574: EQUAL
36575: AND
36576: IFFALSE 36586
// result := true end ;
36578: LD_ADDR_VAR 0 3
36582: PUSH
36583: LD_INT 1
36585: ST_TO_ADDR
// end ;
36586: LD_VAR 0 3
36590: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
36591: LD_INT 0
36593: PPUSH
// result := false ;
36594: LD_ADDR_VAR 0 4
36598: PUSH
36599: LD_INT 0
36601: ST_TO_ADDR
// if GetTaskList ( unit ) then
36602: LD_VAR 0 1
36606: PPUSH
36607: CALL_OW 437
36611: IFFALSE 36694
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
36613: LD_STRING M
36615: PUSH
36616: LD_VAR 0 1
36620: PPUSH
36621: CALL_OW 437
36625: PUSH
36626: LD_INT 1
36628: ARRAY
36629: PUSH
36630: LD_INT 1
36632: ARRAY
36633: EQUAL
36634: PUSH
36635: LD_VAR 0 2
36639: PUSH
36640: LD_VAR 0 1
36644: PPUSH
36645: CALL_OW 437
36649: PUSH
36650: LD_INT 1
36652: ARRAY
36653: PUSH
36654: LD_INT 2
36656: ARRAY
36657: EQUAL
36658: AND
36659: PUSH
36660: LD_VAR 0 3
36664: PUSH
36665: LD_VAR 0 1
36669: PPUSH
36670: CALL_OW 437
36674: PUSH
36675: LD_INT 1
36677: ARRAY
36678: PUSH
36679: LD_INT 3
36681: ARRAY
36682: EQUAL
36683: AND
36684: IFFALSE 36694
// result := true ;
36686: LD_ADDR_VAR 0 4
36690: PUSH
36691: LD_INT 1
36693: ST_TO_ADDR
// end ; end ;
36694: LD_VAR 0 4
36698: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
36699: LD_INT 0
36701: PPUSH
36702: PPUSH
36703: PPUSH
36704: PPUSH
// if not unit or not area then
36705: LD_VAR 0 1
36709: NOT
36710: PUSH
36711: LD_VAR 0 2
36715: NOT
36716: OR
36717: IFFALSE 36721
// exit ;
36719: GO 36884
// tmp := AreaToList ( area , i ) ;
36721: LD_ADDR_VAR 0 6
36725: PUSH
36726: LD_VAR 0 2
36730: PPUSH
36731: LD_VAR 0 5
36735: PPUSH
36736: CALL_OW 517
36740: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
36741: LD_ADDR_VAR 0 5
36745: PUSH
36746: DOUBLE
36747: LD_INT 1
36749: DEC
36750: ST_TO_ADDR
36751: LD_VAR 0 6
36755: PUSH
36756: LD_INT 1
36758: ARRAY
36759: PUSH
36760: FOR_TO
36761: IFFALSE 36882
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
36763: LD_ADDR_VAR 0 7
36767: PUSH
36768: LD_VAR 0 6
36772: PUSH
36773: LD_INT 1
36775: ARRAY
36776: PUSH
36777: LD_VAR 0 5
36781: ARRAY
36782: PUSH
36783: LD_VAR 0 6
36787: PUSH
36788: LD_INT 2
36790: ARRAY
36791: PUSH
36792: LD_VAR 0 5
36796: ARRAY
36797: PUSH
36798: EMPTY
36799: LIST
36800: LIST
36801: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 3 ] ) = 0 then
36802: LD_INT 92
36804: PUSH
36805: LD_VAR 0 7
36809: PUSH
36810: LD_INT 1
36812: ARRAY
36813: PUSH
36814: LD_VAR 0 7
36818: PUSH
36819: LD_INT 2
36821: ARRAY
36822: PUSH
36823: LD_INT 3
36825: PUSH
36826: EMPTY
36827: LIST
36828: LIST
36829: LIST
36830: LIST
36831: PPUSH
36832: CALL_OW 69
36836: PUSH
36837: LD_INT 0
36839: EQUAL
36840: IFFALSE 36880
// begin PlaceUnitArea ( unit , area , mode ) ;
36842: LD_VAR 0 1
36846: PPUSH
36847: LD_VAR 0 2
36851: PPUSH
36852: LD_VAR 0 3
36856: PPUSH
36857: CALL_OW 49
// result := IsPlaced ( unit ) ;
36861: LD_ADDR_VAR 0 4
36865: PUSH
36866: LD_VAR 0 1
36870: PPUSH
36871: CALL_OW 305
36875: ST_TO_ADDR
// exit ;
36876: POP
36877: POP
36878: GO 36884
// end ; end ;
36880: GO 36760
36882: POP
36883: POP
// end ;
36884: LD_VAR 0 4
36888: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
36889: LD_INT 0
36891: PPUSH
36892: PPUSH
36893: PPUSH
// if not side or side > 8 then
36894: LD_VAR 0 1
36898: NOT
36899: PUSH
36900: LD_VAR 0 1
36904: PUSH
36905: LD_INT 8
36907: GREATER
36908: OR
36909: IFFALSE 36913
// exit ;
36911: GO 37100
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
36913: LD_ADDR_VAR 0 4
36917: PUSH
36918: LD_INT 22
36920: PUSH
36921: LD_VAR 0 1
36925: PUSH
36926: EMPTY
36927: LIST
36928: LIST
36929: PUSH
36930: LD_INT 21
36932: PUSH
36933: LD_INT 3
36935: PUSH
36936: EMPTY
36937: LIST
36938: LIST
36939: PUSH
36940: EMPTY
36941: LIST
36942: LIST
36943: PPUSH
36944: CALL_OW 69
36948: ST_TO_ADDR
// if not tmp then
36949: LD_VAR 0 4
36953: NOT
36954: IFFALSE 36958
// exit ;
36956: GO 37100
// enable_addtolog := true ;
36958: LD_ADDR_OWVAR 81
36962: PUSH
36963: LD_INT 1
36965: ST_TO_ADDR
// AddToLog ( [ ) ;
36966: LD_STRING [
36968: PPUSH
36969: CALL_OW 561
// for i in tmp do
36973: LD_ADDR_VAR 0 3
36977: PUSH
36978: LD_VAR 0 4
36982: PUSH
36983: FOR_IN
36984: IFFALSE 37091
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
36986: LD_STRING [
36988: PUSH
36989: LD_VAR 0 3
36993: PPUSH
36994: CALL_OW 266
36998: STR
36999: PUSH
37000: LD_STRING , 
37002: STR
37003: PUSH
37004: LD_VAR 0 3
37008: PPUSH
37009: CALL_OW 250
37013: STR
37014: PUSH
37015: LD_STRING , 
37017: STR
37018: PUSH
37019: LD_VAR 0 3
37023: PPUSH
37024: CALL_OW 251
37028: STR
37029: PUSH
37030: LD_STRING , 
37032: STR
37033: PUSH
37034: LD_VAR 0 3
37038: PPUSH
37039: CALL_OW 254
37043: STR
37044: PUSH
37045: LD_STRING , 
37047: STR
37048: PUSH
37049: LD_VAR 0 3
37053: PPUSH
37054: LD_INT 1
37056: PPUSH
37057: CALL_OW 268
37061: STR
37062: PUSH
37063: LD_STRING , 
37065: STR
37066: PUSH
37067: LD_VAR 0 3
37071: PPUSH
37072: LD_INT 2
37074: PPUSH
37075: CALL_OW 268
37079: STR
37080: PUSH
37081: LD_STRING ],
37083: STR
37084: PPUSH
37085: CALL_OW 561
// end ;
37089: GO 36983
37091: POP
37092: POP
// AddToLog ( ]; ) ;
37093: LD_STRING ];
37095: PPUSH
37096: CALL_OW 561
// end ;
37100: LD_VAR 0 2
37104: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
37105: LD_INT 0
37107: PPUSH
37108: PPUSH
37109: PPUSH
37110: PPUSH
37111: PPUSH
// if not area or not rate or not max then
37112: LD_VAR 0 1
37116: NOT
37117: PUSH
37118: LD_VAR 0 2
37122: NOT
37123: OR
37124: PUSH
37125: LD_VAR 0 4
37129: NOT
37130: OR
37131: IFFALSE 37135
// exit ;
37133: GO 37324
// while 1 do
37135: LD_INT 1
37137: IFFALSE 37324
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
37139: LD_ADDR_VAR 0 9
37143: PUSH
37144: LD_VAR 0 1
37148: PPUSH
37149: LD_INT 1
37151: PPUSH
37152: CALL_OW 287
37156: PUSH
37157: LD_INT 10
37159: MUL
37160: ST_TO_ADDR
// r := rate / 10 ;
37161: LD_ADDR_VAR 0 7
37165: PUSH
37166: LD_VAR 0 2
37170: PUSH
37171: LD_INT 10
37173: DIVREAL
37174: ST_TO_ADDR
// time := 1 1$00 ;
37175: LD_ADDR_VAR 0 8
37179: PUSH
37180: LD_INT 2100
37182: ST_TO_ADDR
// if amount < min then
37183: LD_VAR 0 9
37187: PUSH
37188: LD_VAR 0 3
37192: LESS
37193: IFFALSE 37211
// r := r * 2 else
37195: LD_ADDR_VAR 0 7
37199: PUSH
37200: LD_VAR 0 7
37204: PUSH
37205: LD_INT 2
37207: MUL
37208: ST_TO_ADDR
37209: GO 37237
// if amount > max then
37211: LD_VAR 0 9
37215: PUSH
37216: LD_VAR 0 4
37220: GREATER
37221: IFFALSE 37237
// r := r / 2 ;
37223: LD_ADDR_VAR 0 7
37227: PUSH
37228: LD_VAR 0 7
37232: PUSH
37233: LD_INT 2
37235: DIVREAL
37236: ST_TO_ADDR
// time := time / r ;
37237: LD_ADDR_VAR 0 8
37241: PUSH
37242: LD_VAR 0 8
37246: PUSH
37247: LD_VAR 0 7
37251: DIVREAL
37252: ST_TO_ADDR
// if time < 0 then
37253: LD_VAR 0 8
37257: PUSH
37258: LD_INT 0
37260: LESS
37261: IFFALSE 37278
// time := time * - 1 ;
37263: LD_ADDR_VAR 0 8
37267: PUSH
37268: LD_VAR 0 8
37272: PUSH
37273: LD_INT 1
37275: NEG
37276: MUL
37277: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
37278: LD_VAR 0 8
37282: PUSH
37283: LD_INT 35
37285: PPUSH
37286: LD_INT 875
37288: PPUSH
37289: CALL_OW 12
37293: PLUS
37294: PPUSH
37295: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
37299: LD_INT 1
37301: PPUSH
37302: LD_INT 5
37304: PPUSH
37305: CALL_OW 12
37309: PPUSH
37310: LD_VAR 0 1
37314: PPUSH
37315: LD_INT 1
37317: PPUSH
37318: CALL_OW 55
// end ;
37322: GO 37135
// end ;
37324: LD_VAR 0 5
37328: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
37329: LD_INT 0
37331: PPUSH
37332: PPUSH
37333: PPUSH
37334: PPUSH
37335: PPUSH
37336: PPUSH
37337: PPUSH
37338: PPUSH
// if not turrets or not factories then
37339: LD_VAR 0 1
37343: NOT
37344: PUSH
37345: LD_VAR 0 2
37349: NOT
37350: OR
37351: IFFALSE 37355
// exit ;
37353: GO 37662
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
37355: LD_ADDR_VAR 0 10
37359: PUSH
37360: LD_INT 5
37362: PUSH
37363: LD_INT 6
37365: PUSH
37366: EMPTY
37367: LIST
37368: LIST
37369: PUSH
37370: LD_INT 2
37372: PUSH
37373: LD_INT 4
37375: PUSH
37376: EMPTY
37377: LIST
37378: LIST
37379: PUSH
37380: LD_INT 3
37382: PUSH
37383: LD_INT 5
37385: PUSH
37386: EMPTY
37387: LIST
37388: LIST
37389: PUSH
37390: EMPTY
37391: LIST
37392: LIST
37393: LIST
37394: PUSH
37395: LD_INT 24
37397: PUSH
37398: LD_INT 25
37400: PUSH
37401: EMPTY
37402: LIST
37403: LIST
37404: PUSH
37405: LD_INT 23
37407: PUSH
37408: LD_INT 27
37410: PUSH
37411: EMPTY
37412: LIST
37413: LIST
37414: PUSH
37415: EMPTY
37416: LIST
37417: LIST
37418: PUSH
37419: LD_INT 42
37421: PUSH
37422: LD_INT 43
37424: PUSH
37425: EMPTY
37426: LIST
37427: LIST
37428: PUSH
37429: LD_INT 44
37431: PUSH
37432: LD_INT 46
37434: PUSH
37435: EMPTY
37436: LIST
37437: LIST
37438: PUSH
37439: LD_INT 45
37441: PUSH
37442: LD_INT 47
37444: PUSH
37445: EMPTY
37446: LIST
37447: LIST
37448: PUSH
37449: EMPTY
37450: LIST
37451: LIST
37452: LIST
37453: PUSH
37454: EMPTY
37455: LIST
37456: LIST
37457: LIST
37458: ST_TO_ADDR
// result := [ ] ;
37459: LD_ADDR_VAR 0 3
37463: PUSH
37464: EMPTY
37465: ST_TO_ADDR
// for i in turrets do
37466: LD_ADDR_VAR 0 4
37470: PUSH
37471: LD_VAR 0 1
37475: PUSH
37476: FOR_IN
37477: IFFALSE 37660
// begin nat := GetNation ( i ) ;
37479: LD_ADDR_VAR 0 7
37483: PUSH
37484: LD_VAR 0 4
37488: PPUSH
37489: CALL_OW 248
37493: ST_TO_ADDR
// weapon := 0 ;
37494: LD_ADDR_VAR 0 8
37498: PUSH
37499: LD_INT 0
37501: ST_TO_ADDR
// if not nat then
37502: LD_VAR 0 7
37506: NOT
37507: IFFALSE 37511
// continue ;
37509: GO 37476
// for j in list [ nat ] do
37511: LD_ADDR_VAR 0 5
37515: PUSH
37516: LD_VAR 0 10
37520: PUSH
37521: LD_VAR 0 7
37525: ARRAY
37526: PUSH
37527: FOR_IN
37528: IFFALSE 37569
// if GetBWeapon ( i ) = j [ 1 ] then
37530: LD_VAR 0 4
37534: PPUSH
37535: CALL_OW 269
37539: PUSH
37540: LD_VAR 0 5
37544: PUSH
37545: LD_INT 1
37547: ARRAY
37548: EQUAL
37549: IFFALSE 37567
// begin weapon := j [ 2 ] ;
37551: LD_ADDR_VAR 0 8
37555: PUSH
37556: LD_VAR 0 5
37560: PUSH
37561: LD_INT 2
37563: ARRAY
37564: ST_TO_ADDR
// break ;
37565: GO 37569
// end ;
37567: GO 37527
37569: POP
37570: POP
// if not weapon then
37571: LD_VAR 0 8
37575: NOT
37576: IFFALSE 37580
// continue ;
37578: GO 37476
// for k in factories do
37580: LD_ADDR_VAR 0 6
37584: PUSH
37585: LD_VAR 0 2
37589: PUSH
37590: FOR_IN
37591: IFFALSE 37656
// begin weapons := AvailableWeaponList ( k ) ;
37593: LD_ADDR_VAR 0 9
37597: PUSH
37598: LD_VAR 0 6
37602: PPUSH
37603: CALL_OW 478
37607: ST_TO_ADDR
// if not weapons then
37608: LD_VAR 0 9
37612: NOT
37613: IFFALSE 37617
// continue ;
37615: GO 37590
// if weapon in weapons then
37617: LD_VAR 0 8
37621: PUSH
37622: LD_VAR 0 9
37626: IN
37627: IFFALSE 37654
// begin result := [ i , weapon ] ;
37629: LD_ADDR_VAR 0 3
37633: PUSH
37634: LD_VAR 0 4
37638: PUSH
37639: LD_VAR 0 8
37643: PUSH
37644: EMPTY
37645: LIST
37646: LIST
37647: ST_TO_ADDR
// exit ;
37648: POP
37649: POP
37650: POP
37651: POP
37652: GO 37662
// end ; end ;
37654: GO 37590
37656: POP
37657: POP
// end ;
37658: GO 37476
37660: POP
37661: POP
// end ;
37662: LD_VAR 0 3
37666: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
37667: LD_INT 0
37669: PPUSH
// if not side or side > 8 then
37670: LD_VAR 0 3
37674: NOT
37675: PUSH
37676: LD_VAR 0 3
37680: PUSH
37681: LD_INT 8
37683: GREATER
37684: OR
37685: IFFALSE 37689
// exit ;
37687: GO 37748
// if not range then
37689: LD_VAR 0 4
37693: NOT
37694: IFFALSE 37705
// range := - 12 ;
37696: LD_ADDR_VAR 0 4
37700: PUSH
37701: LD_INT 12
37703: NEG
37704: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
37705: LD_VAR 0 1
37709: PPUSH
37710: LD_VAR 0 2
37714: PPUSH
37715: LD_VAR 0 3
37719: PPUSH
37720: LD_VAR 0 4
37724: PPUSH
37725: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
37729: LD_VAR 0 1
37733: PPUSH
37734: LD_VAR 0 2
37738: PPUSH
37739: LD_VAR 0 3
37743: PPUSH
37744: CALL_OW 331
// end ;
37748: LD_VAR 0 5
37752: RET
// export function Video ( mode ) ; begin
37753: LD_INT 0
37755: PPUSH
// ingame_video = mode ;
37756: LD_ADDR_OWVAR 52
37760: PUSH
37761: LD_VAR 0 1
37765: ST_TO_ADDR
// interface_hidden = mode ;
37766: LD_ADDR_OWVAR 54
37770: PUSH
37771: LD_VAR 0 1
37775: ST_TO_ADDR
// end ;
37776: LD_VAR 0 2
37780: RET
// export function Join ( array , element ) ; begin
37781: LD_INT 0
37783: PPUSH
// result := Replace ( array , array + 1 , element ) ;
37784: LD_ADDR_VAR 0 3
37788: PUSH
37789: LD_VAR 0 1
37793: PPUSH
37794: LD_VAR 0 1
37798: PUSH
37799: LD_INT 1
37801: PLUS
37802: PPUSH
37803: LD_VAR 0 2
37807: PPUSH
37808: CALL_OW 1
37812: ST_TO_ADDR
// end ;
37813: LD_VAR 0 3
37817: RET
// export function JoinUnion ( array , element ) ; begin
37818: LD_INT 0
37820: PPUSH
// result := array union element ;
37821: LD_ADDR_VAR 0 3
37825: PUSH
37826: LD_VAR 0 1
37830: PUSH
37831: LD_VAR 0 2
37835: UNION
37836: ST_TO_ADDR
// end ;
37837: LD_VAR 0 3
37841: RET
// export function GetBehemoths ( side ) ; begin
37842: LD_INT 0
37844: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
37845: LD_ADDR_VAR 0 2
37849: PUSH
37850: LD_INT 22
37852: PUSH
37853: LD_VAR 0 1
37857: PUSH
37858: EMPTY
37859: LIST
37860: LIST
37861: PUSH
37862: LD_INT 31
37864: PUSH
37865: LD_INT 25
37867: PUSH
37868: EMPTY
37869: LIST
37870: LIST
37871: PUSH
37872: EMPTY
37873: LIST
37874: LIST
37875: PPUSH
37876: CALL_OW 69
37880: ST_TO_ADDR
// end ;
37881: LD_VAR 0 2
37885: RET
// export function Shuffle ( array ) ; var i , index ; begin
37886: LD_INT 0
37888: PPUSH
37889: PPUSH
37890: PPUSH
// result := [ ] ;
37891: LD_ADDR_VAR 0 2
37895: PUSH
37896: EMPTY
37897: ST_TO_ADDR
// if not array then
37898: LD_VAR 0 1
37902: NOT
37903: IFFALSE 37907
// exit ;
37905: GO 38006
// Randomize ;
37907: CALL_OW 10
// for i = array downto 1 do
37911: LD_ADDR_VAR 0 3
37915: PUSH
37916: DOUBLE
37917: LD_VAR 0 1
37921: INC
37922: ST_TO_ADDR
37923: LD_INT 1
37925: PUSH
37926: FOR_DOWNTO
37927: IFFALSE 38004
// begin index := rand ( 1 , array ) ;
37929: LD_ADDR_VAR 0 4
37933: PUSH
37934: LD_INT 1
37936: PPUSH
37937: LD_VAR 0 1
37941: PPUSH
37942: CALL_OW 12
37946: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
37947: LD_ADDR_VAR 0 2
37951: PUSH
37952: LD_VAR 0 2
37956: PPUSH
37957: LD_VAR 0 2
37961: PUSH
37962: LD_INT 1
37964: PLUS
37965: PPUSH
37966: LD_VAR 0 1
37970: PUSH
37971: LD_VAR 0 4
37975: ARRAY
37976: PPUSH
37977: CALL_OW 2
37981: ST_TO_ADDR
// array := Delete ( array , index ) ;
37982: LD_ADDR_VAR 0 1
37986: PUSH
37987: LD_VAR 0 1
37991: PPUSH
37992: LD_VAR 0 4
37996: PPUSH
37997: CALL_OW 3
38001: ST_TO_ADDR
// end ;
38002: GO 37926
38004: POP
38005: POP
// end ;
38006: LD_VAR 0 2
38010: RET
// export function GetBaseMaterials ( base ) ; begin
38011: LD_INT 0
38013: PPUSH
// result := [ 0 , 0 , 0 ] ;
38014: LD_ADDR_VAR 0 2
38018: PUSH
38019: LD_INT 0
38021: PUSH
38022: LD_INT 0
38024: PUSH
38025: LD_INT 0
38027: PUSH
38028: EMPTY
38029: LIST
38030: LIST
38031: LIST
38032: ST_TO_ADDR
// if not base then
38033: LD_VAR 0 1
38037: NOT
38038: IFFALSE 38042
// exit ;
38040: GO 38091
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
38042: LD_ADDR_VAR 0 2
38046: PUSH
38047: LD_VAR 0 1
38051: PPUSH
38052: LD_INT 1
38054: PPUSH
38055: CALL_OW 275
38059: PUSH
38060: LD_VAR 0 1
38064: PPUSH
38065: LD_INT 2
38067: PPUSH
38068: CALL_OW 275
38072: PUSH
38073: LD_VAR 0 1
38077: PPUSH
38078: LD_INT 3
38080: PPUSH
38081: CALL_OW 275
38085: PUSH
38086: EMPTY
38087: LIST
38088: LIST
38089: LIST
38090: ST_TO_ADDR
// end ;
38091: LD_VAR 0 2
38095: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
38096: LD_INT 0
38098: PPUSH
38099: PPUSH
// result := array ;
38100: LD_ADDR_VAR 0 3
38104: PUSH
38105: LD_VAR 0 1
38109: ST_TO_ADDR
// if size >= result then
38110: LD_VAR 0 2
38114: PUSH
38115: LD_VAR 0 3
38119: GREATEREQUAL
38120: IFFALSE 38124
// exit ;
38122: GO 38174
// if size then
38124: LD_VAR 0 2
38128: IFFALSE 38174
// for i := array downto size do
38130: LD_ADDR_VAR 0 4
38134: PUSH
38135: DOUBLE
38136: LD_VAR 0 1
38140: INC
38141: ST_TO_ADDR
38142: LD_VAR 0 2
38146: PUSH
38147: FOR_DOWNTO
38148: IFFALSE 38172
// result := Delete ( result , result ) ;
38150: LD_ADDR_VAR 0 3
38154: PUSH
38155: LD_VAR 0 3
38159: PPUSH
38160: LD_VAR 0 3
38164: PPUSH
38165: CALL_OW 3
38169: ST_TO_ADDR
38170: GO 38147
38172: POP
38173: POP
// end ;
38174: LD_VAR 0 3
38178: RET
// export function ComExit ( unit ) ; var tmp ; begin
38179: LD_INT 0
38181: PPUSH
38182: PPUSH
// if not IsInUnit ( unit ) then
38183: LD_VAR 0 1
38187: PPUSH
38188: CALL_OW 310
38192: NOT
38193: IFFALSE 38197
// exit ;
38195: GO 38257
// tmp := IsInUnit ( unit ) ;
38197: LD_ADDR_VAR 0 3
38201: PUSH
38202: LD_VAR 0 1
38206: PPUSH
38207: CALL_OW 310
38211: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
38212: LD_VAR 0 3
38216: PPUSH
38217: CALL_OW 247
38221: PUSH
38222: LD_INT 2
38224: EQUAL
38225: IFFALSE 38238
// ComExitVehicle ( unit ) else
38227: LD_VAR 0 1
38231: PPUSH
38232: CALL_OW 121
38236: GO 38247
// ComExitBuilding ( unit ) ;
38238: LD_VAR 0 1
38242: PPUSH
38243: CALL_OW 122
// result := tmp ;
38247: LD_ADDR_VAR 0 2
38251: PUSH
38252: LD_VAR 0 3
38256: ST_TO_ADDR
// end ;
38257: LD_VAR 0 2
38261: RET
// export function ComExitAll ( units ) ; var i ; begin
38262: LD_INT 0
38264: PPUSH
38265: PPUSH
// if not units then
38266: LD_VAR 0 1
38270: NOT
38271: IFFALSE 38275
// exit ;
38273: GO 38301
// for i in units do
38275: LD_ADDR_VAR 0 3
38279: PUSH
38280: LD_VAR 0 1
38284: PUSH
38285: FOR_IN
38286: IFFALSE 38299
// ComExit ( i ) ;
38288: LD_VAR 0 3
38292: PPUSH
38293: CALL 38179 0 1
38297: GO 38285
38299: POP
38300: POP
// end ;
38301: LD_VAR 0 2
38305: RET
// export function ResetHc ; begin
38306: LD_INT 0
38308: PPUSH
// InitHc ;
38309: CALL_OW 19
// hc_importance := 0 ;
38313: LD_ADDR_OWVAR 32
38317: PUSH
38318: LD_INT 0
38320: ST_TO_ADDR
// end ;
38321: LD_VAR 0 1
38325: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
38326: LD_INT 0
38328: PPUSH
38329: PPUSH
38330: PPUSH
// _x := ( x1 + x2 ) div 2 ;
38331: LD_ADDR_VAR 0 6
38335: PUSH
38336: LD_VAR 0 1
38340: PUSH
38341: LD_VAR 0 3
38345: PLUS
38346: PUSH
38347: LD_INT 2
38349: DIV
38350: ST_TO_ADDR
// if _x < 0 then
38351: LD_VAR 0 6
38355: PUSH
38356: LD_INT 0
38358: LESS
38359: IFFALSE 38376
// _x := _x * - 1 ;
38361: LD_ADDR_VAR 0 6
38365: PUSH
38366: LD_VAR 0 6
38370: PUSH
38371: LD_INT 1
38373: NEG
38374: MUL
38375: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
38376: LD_ADDR_VAR 0 7
38380: PUSH
38381: LD_VAR 0 2
38385: PUSH
38386: LD_VAR 0 4
38390: PLUS
38391: PUSH
38392: LD_INT 2
38394: DIV
38395: ST_TO_ADDR
// if _y < 0 then
38396: LD_VAR 0 7
38400: PUSH
38401: LD_INT 0
38403: LESS
38404: IFFALSE 38421
// _y := _y * - 1 ;
38406: LD_ADDR_VAR 0 7
38410: PUSH
38411: LD_VAR 0 7
38415: PUSH
38416: LD_INT 1
38418: NEG
38419: MUL
38420: ST_TO_ADDR
// result := [ _x , _y ] ;
38421: LD_ADDR_VAR 0 5
38425: PUSH
38426: LD_VAR 0 6
38430: PUSH
38431: LD_VAR 0 7
38435: PUSH
38436: EMPTY
38437: LIST
38438: LIST
38439: ST_TO_ADDR
// end ;
38440: LD_VAR 0 5
38444: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
38445: LD_INT 0
38447: PPUSH
38448: PPUSH
38449: PPUSH
38450: PPUSH
// task := GetTaskList ( unit ) ;
38451: LD_ADDR_VAR 0 7
38455: PUSH
38456: LD_VAR 0 1
38460: PPUSH
38461: CALL_OW 437
38465: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
38466: LD_VAR 0 7
38470: NOT
38471: PUSH
38472: LD_VAR 0 1
38476: PPUSH
38477: LD_VAR 0 2
38481: PPUSH
38482: CALL_OW 308
38486: NOT
38487: AND
38488: IFFALSE 38492
// exit ;
38490: GO 38610
// if IsInArea ( unit , area ) then
38492: LD_VAR 0 1
38496: PPUSH
38497: LD_VAR 0 2
38501: PPUSH
38502: CALL_OW 308
38506: IFFALSE 38524
// begin ComMoveToArea ( unit , goAway ) ;
38508: LD_VAR 0 1
38512: PPUSH
38513: LD_VAR 0 3
38517: PPUSH
38518: CALL_OW 113
// exit ;
38522: GO 38610
// end ; if task [ 1 ] [ 1 ] <> M then
38524: LD_VAR 0 7
38528: PUSH
38529: LD_INT 1
38531: ARRAY
38532: PUSH
38533: LD_INT 1
38535: ARRAY
38536: PUSH
38537: LD_STRING M
38539: NONEQUAL
38540: IFFALSE 38544
// exit ;
38542: GO 38610
// x := task [ 1 ] [ 2 ] ;
38544: LD_ADDR_VAR 0 5
38548: PUSH
38549: LD_VAR 0 7
38553: PUSH
38554: LD_INT 1
38556: ARRAY
38557: PUSH
38558: LD_INT 2
38560: ARRAY
38561: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
38562: LD_ADDR_VAR 0 6
38566: PUSH
38567: LD_VAR 0 7
38571: PUSH
38572: LD_INT 1
38574: ARRAY
38575: PUSH
38576: LD_INT 3
38578: ARRAY
38579: ST_TO_ADDR
// if InArea ( x , y , area ) then
38580: LD_VAR 0 5
38584: PPUSH
38585: LD_VAR 0 6
38589: PPUSH
38590: LD_VAR 0 2
38594: PPUSH
38595: CALL_OW 309
38599: IFFALSE 38610
// ComStop ( unit ) ;
38601: LD_VAR 0 1
38605: PPUSH
38606: CALL_OW 141
// end ;
38610: LD_VAR 0 4
38614: RET
// export function Abs ( value ) ; begin
38615: LD_INT 0
38617: PPUSH
// result := value ;
38618: LD_ADDR_VAR 0 2
38622: PUSH
38623: LD_VAR 0 1
38627: ST_TO_ADDR
// if value < 0 then
38628: LD_VAR 0 1
38632: PUSH
38633: LD_INT 0
38635: LESS
38636: IFFALSE 38653
// result := value * - 1 ;
38638: LD_ADDR_VAR 0 2
38642: PUSH
38643: LD_VAR 0 1
38647: PUSH
38648: LD_INT 1
38650: NEG
38651: MUL
38652: ST_TO_ADDR
// end ;
38653: LD_VAR 0 2
38657: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
38658: LD_INT 0
38660: PPUSH
38661: PPUSH
38662: PPUSH
38663: PPUSH
38664: PPUSH
38665: PPUSH
38666: PPUSH
38667: PPUSH
// if not unit or not building then
38668: LD_VAR 0 1
38672: NOT
38673: PUSH
38674: LD_VAR 0 2
38678: NOT
38679: OR
38680: IFFALSE 38684
// exit ;
38682: GO 38910
// x := GetX ( building ) ;
38684: LD_ADDR_VAR 0 4
38688: PUSH
38689: LD_VAR 0 2
38693: PPUSH
38694: CALL_OW 250
38698: ST_TO_ADDR
// y := GetY ( building ) ;
38699: LD_ADDR_VAR 0 6
38703: PUSH
38704: LD_VAR 0 2
38708: PPUSH
38709: CALL_OW 251
38713: ST_TO_ADDR
// d := GetDir ( building ) ;
38714: LD_ADDR_VAR 0 8
38718: PUSH
38719: LD_VAR 0 2
38723: PPUSH
38724: CALL_OW 254
38728: ST_TO_ADDR
// r := 4 ;
38729: LD_ADDR_VAR 0 9
38733: PUSH
38734: LD_INT 4
38736: ST_TO_ADDR
// for i := 1 to 5 do
38737: LD_ADDR_VAR 0 10
38741: PUSH
38742: DOUBLE
38743: LD_INT 1
38745: DEC
38746: ST_TO_ADDR
38747: LD_INT 5
38749: PUSH
38750: FOR_TO
38751: IFFALSE 38908
// begin _x := ShiftX ( x , d , r + i ) ;
38753: LD_ADDR_VAR 0 5
38757: PUSH
38758: LD_VAR 0 4
38762: PPUSH
38763: LD_VAR 0 8
38767: PPUSH
38768: LD_VAR 0 9
38772: PUSH
38773: LD_VAR 0 10
38777: PLUS
38778: PPUSH
38779: CALL_OW 272
38783: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
38784: LD_ADDR_VAR 0 7
38788: PUSH
38789: LD_VAR 0 6
38793: PPUSH
38794: LD_VAR 0 8
38798: PPUSH
38799: LD_VAR 0 9
38803: PUSH
38804: LD_VAR 0 10
38808: PLUS
38809: PPUSH
38810: CALL_OW 273
38814: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
38815: LD_VAR 0 5
38819: PPUSH
38820: LD_VAR 0 7
38824: PPUSH
38825: CALL_OW 488
38829: PUSH
38830: LD_VAR 0 5
38834: PPUSH
38835: LD_VAR 0 7
38839: PPUSH
38840: CALL_OW 428
38844: PPUSH
38845: CALL_OW 247
38849: PUSH
38850: LD_INT 3
38852: PUSH
38853: LD_INT 2
38855: PUSH
38856: EMPTY
38857: LIST
38858: LIST
38859: IN
38860: NOT
38861: AND
38862: IFFALSE 38906
// begin ComMoveXY ( unit , _x , _y ) ;
38864: LD_VAR 0 1
38868: PPUSH
38869: LD_VAR 0 5
38873: PPUSH
38874: LD_VAR 0 7
38878: PPUSH
38879: CALL_OW 111
// result := [ _x , _y ] ;
38883: LD_ADDR_VAR 0 3
38887: PUSH
38888: LD_VAR 0 5
38892: PUSH
38893: LD_VAR 0 7
38897: PUSH
38898: EMPTY
38899: LIST
38900: LIST
38901: ST_TO_ADDR
// exit ;
38902: POP
38903: POP
38904: GO 38910
// end ; end ;
38906: GO 38750
38908: POP
38909: POP
// end ;
38910: LD_VAR 0 3
38914: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
38915: LD_INT 0
38917: PPUSH
38918: PPUSH
38919: PPUSH
// result := 0 ;
38920: LD_ADDR_VAR 0 3
38924: PUSH
38925: LD_INT 0
38927: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
38928: LD_VAR 0 1
38932: PUSH
38933: LD_INT 0
38935: LESS
38936: PUSH
38937: LD_VAR 0 1
38941: PUSH
38942: LD_INT 8
38944: GREATER
38945: OR
38946: PUSH
38947: LD_VAR 0 2
38951: PUSH
38952: LD_INT 0
38954: LESS
38955: OR
38956: PUSH
38957: LD_VAR 0 2
38961: PUSH
38962: LD_INT 8
38964: GREATER
38965: OR
38966: IFFALSE 38970
// exit ;
38968: GO 39045
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
38970: LD_ADDR_VAR 0 4
38974: PUSH
38975: LD_INT 22
38977: PUSH
38978: LD_VAR 0 2
38982: PUSH
38983: EMPTY
38984: LIST
38985: LIST
38986: PPUSH
38987: CALL_OW 69
38991: PUSH
38992: FOR_IN
38993: IFFALSE 39043
// begin un := UnitShoot ( i ) ;
38995: LD_ADDR_VAR 0 5
38999: PUSH
39000: LD_VAR 0 4
39004: PPUSH
39005: CALL_OW 504
39009: ST_TO_ADDR
// if GetSide ( un ) = side1 then
39010: LD_VAR 0 5
39014: PPUSH
39015: CALL_OW 255
39019: PUSH
39020: LD_VAR 0 1
39024: EQUAL
39025: IFFALSE 39041
// begin result := un ;
39027: LD_ADDR_VAR 0 3
39031: PUSH
39032: LD_VAR 0 5
39036: ST_TO_ADDR
// exit ;
39037: POP
39038: POP
39039: GO 39045
// end ; end ;
39041: GO 38992
39043: POP
39044: POP
// end ;
39045: LD_VAR 0 3
39049: RET
// export function GetCargoBay ( units ) ; begin
39050: LD_INT 0
39052: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
39053: LD_ADDR_VAR 0 2
39057: PUSH
39058: LD_VAR 0 1
39062: PPUSH
39063: LD_INT 2
39065: PUSH
39066: LD_INT 34
39068: PUSH
39069: LD_INT 12
39071: PUSH
39072: EMPTY
39073: LIST
39074: LIST
39075: PUSH
39076: LD_INT 34
39078: PUSH
39079: LD_INT 51
39081: PUSH
39082: EMPTY
39083: LIST
39084: LIST
39085: PUSH
39086: LD_INT 34
39088: PUSH
39089: LD_INT 32
39091: PUSH
39092: EMPTY
39093: LIST
39094: LIST
39095: PUSH
39096: LD_INT 34
39098: PUSH
39099: LD_INT 89
39101: PUSH
39102: EMPTY
39103: LIST
39104: LIST
39105: PUSH
39106: EMPTY
39107: LIST
39108: LIST
39109: LIST
39110: LIST
39111: LIST
39112: PPUSH
39113: CALL_OW 72
39117: ST_TO_ADDR
// end ;
39118: LD_VAR 0 2
39122: RET
// export function Negate ( value ) ; begin
39123: LD_INT 0
39125: PPUSH
// result := not value ;
39126: LD_ADDR_VAR 0 2
39130: PUSH
39131: LD_VAR 0 1
39135: NOT
39136: ST_TO_ADDR
// end ;
39137: LD_VAR 0 2
39141: RET
// export function Inc ( value ) ; begin
39142: LD_INT 0
39144: PPUSH
// result := value + 1 ;
39145: LD_ADDR_VAR 0 2
39149: PUSH
39150: LD_VAR 0 1
39154: PUSH
39155: LD_INT 1
39157: PLUS
39158: ST_TO_ADDR
// end ;
39159: LD_VAR 0 2
39163: RET
// export function Dec ( value ) ; begin
39164: LD_INT 0
39166: PPUSH
// result := value - 1 ;
39167: LD_ADDR_VAR 0 2
39171: PUSH
39172: LD_VAR 0 1
39176: PUSH
39177: LD_INT 1
39179: MINUS
39180: ST_TO_ADDR
// end ;
39181: LD_VAR 0 2
39185: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
39186: LD_INT 0
39188: PPUSH
39189: PPUSH
39190: PPUSH
39191: PPUSH
39192: PPUSH
39193: PPUSH
39194: PPUSH
39195: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
39196: LD_VAR 0 1
39200: PPUSH
39201: LD_VAR 0 2
39205: PPUSH
39206: CALL_OW 488
39210: NOT
39211: PUSH
39212: LD_VAR 0 3
39216: PPUSH
39217: LD_VAR 0 4
39221: PPUSH
39222: CALL_OW 488
39226: NOT
39227: OR
39228: IFFALSE 39241
// begin result := - 1 ;
39230: LD_ADDR_VAR 0 5
39234: PUSH
39235: LD_INT 1
39237: NEG
39238: ST_TO_ADDR
// exit ;
39239: GO 39476
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
39241: LD_ADDR_VAR 0 12
39245: PUSH
39246: LD_VAR 0 1
39250: PPUSH
39251: LD_VAR 0 2
39255: PPUSH
39256: LD_VAR 0 3
39260: PPUSH
39261: LD_VAR 0 4
39265: PPUSH
39266: CALL 38326 0 4
39270: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
39271: LD_ADDR_VAR 0 11
39275: PUSH
39276: LD_VAR 0 1
39280: PPUSH
39281: LD_VAR 0 2
39285: PPUSH
39286: LD_VAR 0 12
39290: PUSH
39291: LD_INT 1
39293: ARRAY
39294: PPUSH
39295: LD_VAR 0 12
39299: PUSH
39300: LD_INT 2
39302: ARRAY
39303: PPUSH
39304: CALL_OW 298
39308: ST_TO_ADDR
// distance := 9999 ;
39309: LD_ADDR_VAR 0 10
39313: PUSH
39314: LD_INT 9999
39316: ST_TO_ADDR
// for i := 0 to 5 do
39317: LD_ADDR_VAR 0 6
39321: PUSH
39322: DOUBLE
39323: LD_INT 0
39325: DEC
39326: ST_TO_ADDR
39327: LD_INT 5
39329: PUSH
39330: FOR_TO
39331: IFFALSE 39474
// begin _x := ShiftX ( x1 , i , centerDist ) ;
39333: LD_ADDR_VAR 0 7
39337: PUSH
39338: LD_VAR 0 1
39342: PPUSH
39343: LD_VAR 0 6
39347: PPUSH
39348: LD_VAR 0 11
39352: PPUSH
39353: CALL_OW 272
39357: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
39358: LD_ADDR_VAR 0 8
39362: PUSH
39363: LD_VAR 0 2
39367: PPUSH
39368: LD_VAR 0 6
39372: PPUSH
39373: LD_VAR 0 11
39377: PPUSH
39378: CALL_OW 273
39382: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
39383: LD_VAR 0 7
39387: PPUSH
39388: LD_VAR 0 8
39392: PPUSH
39393: CALL_OW 488
39397: NOT
39398: IFFALSE 39402
// continue ;
39400: GO 39330
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
39402: LD_ADDR_VAR 0 9
39406: PUSH
39407: LD_VAR 0 12
39411: PUSH
39412: LD_INT 1
39414: ARRAY
39415: PPUSH
39416: LD_VAR 0 12
39420: PUSH
39421: LD_INT 2
39423: ARRAY
39424: PPUSH
39425: LD_VAR 0 7
39429: PPUSH
39430: LD_VAR 0 8
39434: PPUSH
39435: CALL_OW 298
39439: ST_TO_ADDR
// if tmp < distance then
39440: LD_VAR 0 9
39444: PUSH
39445: LD_VAR 0 10
39449: LESS
39450: IFFALSE 39472
// begin result := i ;
39452: LD_ADDR_VAR 0 5
39456: PUSH
39457: LD_VAR 0 6
39461: ST_TO_ADDR
// distance := tmp ;
39462: LD_ADDR_VAR 0 10
39466: PUSH
39467: LD_VAR 0 9
39471: ST_TO_ADDR
// end ; end ;
39472: GO 39330
39474: POP
39475: POP
// end ;
39476: LD_VAR 0 5
39480: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
39481: LD_INT 0
39483: PPUSH
39484: PPUSH
// if not driver or not IsInUnit ( driver ) then
39485: LD_VAR 0 1
39489: NOT
39490: PUSH
39491: LD_VAR 0 1
39495: PPUSH
39496: CALL_OW 310
39500: NOT
39501: OR
39502: IFFALSE 39506
// exit ;
39504: GO 39596
// vehicle := IsInUnit ( driver ) ;
39506: LD_ADDR_VAR 0 3
39510: PUSH
39511: LD_VAR 0 1
39515: PPUSH
39516: CALL_OW 310
39520: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
39521: LD_VAR 0 1
39525: PPUSH
39526: LD_STRING \
39528: PUSH
39529: LD_INT 0
39531: PUSH
39532: LD_INT 0
39534: PUSH
39535: LD_INT 0
39537: PUSH
39538: LD_INT 0
39540: PUSH
39541: LD_INT 0
39543: PUSH
39544: LD_INT 0
39546: PUSH
39547: EMPTY
39548: LIST
39549: LIST
39550: LIST
39551: LIST
39552: LIST
39553: LIST
39554: LIST
39555: PUSH
39556: LD_STRING E
39558: PUSH
39559: LD_INT 0
39561: PUSH
39562: LD_INT 0
39564: PUSH
39565: LD_VAR 0 3
39569: PUSH
39570: LD_INT 0
39572: PUSH
39573: LD_INT 0
39575: PUSH
39576: LD_INT 0
39578: PUSH
39579: EMPTY
39580: LIST
39581: LIST
39582: LIST
39583: LIST
39584: LIST
39585: LIST
39586: LIST
39587: PUSH
39588: EMPTY
39589: LIST
39590: LIST
39591: PPUSH
39592: CALL_OW 446
// end ;
39596: LD_VAR 0 2
39600: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
39601: LD_INT 0
39603: PPUSH
39604: PPUSH
// if not driver or not IsInUnit ( driver ) then
39605: LD_VAR 0 1
39609: NOT
39610: PUSH
39611: LD_VAR 0 1
39615: PPUSH
39616: CALL_OW 310
39620: NOT
39621: OR
39622: IFFALSE 39626
// exit ;
39624: GO 39716
// vehicle := IsInUnit ( driver ) ;
39626: LD_ADDR_VAR 0 3
39630: PUSH
39631: LD_VAR 0 1
39635: PPUSH
39636: CALL_OW 310
39640: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
39641: LD_VAR 0 1
39645: PPUSH
39646: LD_STRING \
39648: PUSH
39649: LD_INT 0
39651: PUSH
39652: LD_INT 0
39654: PUSH
39655: LD_INT 0
39657: PUSH
39658: LD_INT 0
39660: PUSH
39661: LD_INT 0
39663: PUSH
39664: LD_INT 0
39666: PUSH
39667: EMPTY
39668: LIST
39669: LIST
39670: LIST
39671: LIST
39672: LIST
39673: LIST
39674: LIST
39675: PUSH
39676: LD_STRING E
39678: PUSH
39679: LD_INT 0
39681: PUSH
39682: LD_INT 0
39684: PUSH
39685: LD_VAR 0 3
39689: PUSH
39690: LD_INT 0
39692: PUSH
39693: LD_INT 0
39695: PUSH
39696: LD_INT 0
39698: PUSH
39699: EMPTY
39700: LIST
39701: LIST
39702: LIST
39703: LIST
39704: LIST
39705: LIST
39706: LIST
39707: PUSH
39708: EMPTY
39709: LIST
39710: LIST
39711: PPUSH
39712: CALL_OW 447
// end ;
39716: LD_VAR 0 2
39720: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
39721: LD_INT 0
39723: PPUSH
39724: PPUSH
39725: PPUSH
// tmp := [ ] ;
39726: LD_ADDR_VAR 0 5
39730: PUSH
39731: EMPTY
39732: ST_TO_ADDR
// for i in units do
39733: LD_ADDR_VAR 0 4
39737: PUSH
39738: LD_VAR 0 1
39742: PUSH
39743: FOR_IN
39744: IFFALSE 39782
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
39746: LD_ADDR_VAR 0 5
39750: PUSH
39751: LD_VAR 0 5
39755: PPUSH
39756: LD_VAR 0 5
39760: PUSH
39761: LD_INT 1
39763: PLUS
39764: PPUSH
39765: LD_VAR 0 4
39769: PPUSH
39770: CALL_OW 256
39774: PPUSH
39775: CALL_OW 2
39779: ST_TO_ADDR
39780: GO 39743
39782: POP
39783: POP
// if not tmp then
39784: LD_VAR 0 5
39788: NOT
39789: IFFALSE 39793
// exit ;
39791: GO 39841
// if asc then
39793: LD_VAR 0 2
39797: IFFALSE 39821
// result := SortListByListAsc ( units , tmp ) else
39799: LD_ADDR_VAR 0 3
39803: PUSH
39804: LD_VAR 0 1
39808: PPUSH
39809: LD_VAR 0 5
39813: PPUSH
39814: CALL_OW 76
39818: ST_TO_ADDR
39819: GO 39841
// result := SortListByListDesc ( units , tmp ) ;
39821: LD_ADDR_VAR 0 3
39825: PUSH
39826: LD_VAR 0 1
39830: PPUSH
39831: LD_VAR 0 5
39835: PPUSH
39836: CALL_OW 77
39840: ST_TO_ADDR
// end ;
39841: LD_VAR 0 3
39845: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
39846: LD_INT 0
39848: PPUSH
39849: PPUSH
// task := GetTaskList ( mech ) ;
39850: LD_ADDR_VAR 0 4
39854: PUSH
39855: LD_VAR 0 1
39859: PPUSH
39860: CALL_OW 437
39864: ST_TO_ADDR
// if not task then
39865: LD_VAR 0 4
39869: NOT
39870: IFFALSE 39874
// exit ;
39872: GO 39916
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
39874: LD_ADDR_VAR 0 3
39878: PUSH
39879: LD_VAR 0 4
39883: PUSH
39884: LD_INT 1
39886: ARRAY
39887: PUSH
39888: LD_INT 1
39890: ARRAY
39891: PUSH
39892: LD_STRING r
39894: EQUAL
39895: PUSH
39896: LD_VAR 0 4
39900: PUSH
39901: LD_INT 1
39903: ARRAY
39904: PUSH
39905: LD_INT 4
39907: ARRAY
39908: PUSH
39909: LD_VAR 0 2
39913: EQUAL
39914: AND
39915: ST_TO_ADDR
// end ;
39916: LD_VAR 0 3
39920: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
39921: LD_INT 0
39923: PPUSH
// SetDir ( unit , d ) ;
39924: LD_VAR 0 1
39928: PPUSH
39929: LD_VAR 0 4
39933: PPUSH
39934: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
39938: LD_VAR 0 1
39942: PPUSH
39943: LD_VAR 0 2
39947: PPUSH
39948: LD_VAR 0 3
39952: PPUSH
39953: LD_VAR 0 5
39957: PPUSH
39958: CALL_OW 48
// end ;
39962: LD_VAR 0 6
39966: RET
// export function ToNaturalNumber ( number ) ; begin
39967: LD_INT 0
39969: PPUSH
// result := number div 1 ;
39970: LD_ADDR_VAR 0 2
39974: PUSH
39975: LD_VAR 0 1
39979: PUSH
39980: LD_INT 1
39982: DIV
39983: ST_TO_ADDR
// if number < 0 then
39984: LD_VAR 0 1
39988: PUSH
39989: LD_INT 0
39991: LESS
39992: IFFALSE 40002
// result := 0 ;
39994: LD_ADDR_VAR 0 2
39998: PUSH
39999: LD_INT 0
40001: ST_TO_ADDR
// end ;
40002: LD_VAR 0 2
40006: RET
// export function SortByClass ( units , class ) ; var un ; begin
40007: LD_INT 0
40009: PPUSH
40010: PPUSH
// if not units or not class then
40011: LD_VAR 0 1
40015: NOT
40016: PUSH
40017: LD_VAR 0 2
40021: NOT
40022: OR
40023: IFFALSE 40027
// exit ;
40025: GO 40122
// result := [ ] ;
40027: LD_ADDR_VAR 0 3
40031: PUSH
40032: EMPTY
40033: ST_TO_ADDR
// for un in units do
40034: LD_ADDR_VAR 0 4
40038: PUSH
40039: LD_VAR 0 1
40043: PUSH
40044: FOR_IN
40045: IFFALSE 40120
// if GetClass ( un ) = class then
40047: LD_VAR 0 4
40051: PPUSH
40052: CALL_OW 257
40056: PUSH
40057: LD_VAR 0 2
40061: EQUAL
40062: IFFALSE 40089
// result := Insert ( result , 1 , un ) else
40064: LD_ADDR_VAR 0 3
40068: PUSH
40069: LD_VAR 0 3
40073: PPUSH
40074: LD_INT 1
40076: PPUSH
40077: LD_VAR 0 4
40081: PPUSH
40082: CALL_OW 2
40086: ST_TO_ADDR
40087: GO 40118
// result := Replace ( result , result + 1 , un ) ;
40089: LD_ADDR_VAR 0 3
40093: PUSH
40094: LD_VAR 0 3
40098: PPUSH
40099: LD_VAR 0 3
40103: PUSH
40104: LD_INT 1
40106: PLUS
40107: PPUSH
40108: LD_VAR 0 4
40112: PPUSH
40113: CALL_OW 1
40117: ST_TO_ADDR
40118: GO 40044
40120: POP
40121: POP
// end ;
40122: LD_VAR 0 3
40126: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
40127: LD_INT 0
40129: PPUSH
40130: PPUSH
40131: PPUSH
40132: PPUSH
40133: PPUSH
40134: PPUSH
40135: PPUSH
// result := [ ] ;
40136: LD_ADDR_VAR 0 4
40140: PUSH
40141: EMPTY
40142: ST_TO_ADDR
// if x - r < 0 then
40143: LD_VAR 0 1
40147: PUSH
40148: LD_VAR 0 3
40152: MINUS
40153: PUSH
40154: LD_INT 0
40156: LESS
40157: IFFALSE 40169
// min_x := 0 else
40159: LD_ADDR_VAR 0 8
40163: PUSH
40164: LD_INT 0
40166: ST_TO_ADDR
40167: GO 40185
// min_x := x - r ;
40169: LD_ADDR_VAR 0 8
40173: PUSH
40174: LD_VAR 0 1
40178: PUSH
40179: LD_VAR 0 3
40183: MINUS
40184: ST_TO_ADDR
// if y - r < 0 then
40185: LD_VAR 0 2
40189: PUSH
40190: LD_VAR 0 3
40194: MINUS
40195: PUSH
40196: LD_INT 0
40198: LESS
40199: IFFALSE 40211
// min_y := 0 else
40201: LD_ADDR_VAR 0 7
40205: PUSH
40206: LD_INT 0
40208: ST_TO_ADDR
40209: GO 40227
// min_y := y - r ;
40211: LD_ADDR_VAR 0 7
40215: PUSH
40216: LD_VAR 0 2
40220: PUSH
40221: LD_VAR 0 3
40225: MINUS
40226: ST_TO_ADDR
// max_x := x + r ;
40227: LD_ADDR_VAR 0 9
40231: PUSH
40232: LD_VAR 0 1
40236: PUSH
40237: LD_VAR 0 3
40241: PLUS
40242: ST_TO_ADDR
// max_y := y + r ;
40243: LD_ADDR_VAR 0 10
40247: PUSH
40248: LD_VAR 0 2
40252: PUSH
40253: LD_VAR 0 3
40257: PLUS
40258: ST_TO_ADDR
// for _x = min_x to max_x do
40259: LD_ADDR_VAR 0 5
40263: PUSH
40264: DOUBLE
40265: LD_VAR 0 8
40269: DEC
40270: ST_TO_ADDR
40271: LD_VAR 0 9
40275: PUSH
40276: FOR_TO
40277: IFFALSE 40378
// for _y = min_y to max_y do
40279: LD_ADDR_VAR 0 6
40283: PUSH
40284: DOUBLE
40285: LD_VAR 0 7
40289: DEC
40290: ST_TO_ADDR
40291: LD_VAR 0 10
40295: PUSH
40296: FOR_TO
40297: IFFALSE 40374
// begin if not ValidHex ( _x , _y ) then
40299: LD_VAR 0 5
40303: PPUSH
40304: LD_VAR 0 6
40308: PPUSH
40309: CALL_OW 488
40313: NOT
40314: IFFALSE 40318
// continue ;
40316: GO 40296
// if GetResourceTypeXY ( _x , _y ) then
40318: LD_VAR 0 5
40322: PPUSH
40323: LD_VAR 0 6
40327: PPUSH
40328: CALL_OW 283
40332: IFFALSE 40372
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
40334: LD_ADDR_VAR 0 4
40338: PUSH
40339: LD_VAR 0 4
40343: PPUSH
40344: LD_VAR 0 4
40348: PUSH
40349: LD_INT 1
40351: PLUS
40352: PPUSH
40353: LD_VAR 0 5
40357: PUSH
40358: LD_VAR 0 6
40362: PUSH
40363: EMPTY
40364: LIST
40365: LIST
40366: PPUSH
40367: CALL_OW 1
40371: ST_TO_ADDR
// end ;
40372: GO 40296
40374: POP
40375: POP
40376: GO 40276
40378: POP
40379: POP
// end ;
40380: LD_VAR 0 4
40384: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
40385: LD_INT 0
40387: PPUSH
40388: PPUSH
40389: PPUSH
40390: PPUSH
40391: PPUSH
40392: PPUSH
40393: PPUSH
40394: PPUSH
// if not units then
40395: LD_VAR 0 1
40399: NOT
40400: IFFALSE 40404
// exit ;
40402: GO 40928
// result := UnitFilter ( units , [ f_ok ] ) ;
40404: LD_ADDR_VAR 0 3
40408: PUSH
40409: LD_VAR 0 1
40413: PPUSH
40414: LD_INT 50
40416: PUSH
40417: EMPTY
40418: LIST
40419: PPUSH
40420: CALL_OW 72
40424: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
40425: LD_ADDR_VAR 0 8
40429: PUSH
40430: LD_VAR 0 1
40434: PUSH
40435: LD_INT 1
40437: ARRAY
40438: PPUSH
40439: CALL_OW 255
40443: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
40444: LD_ADDR_VAR 0 10
40448: PUSH
40449: LD_INT 29
40451: PUSH
40452: LD_INT 91
40454: PUSH
40455: LD_INT 49
40457: PUSH
40458: EMPTY
40459: LIST
40460: LIST
40461: LIST
40462: ST_TO_ADDR
// if not result then
40463: LD_VAR 0 3
40467: NOT
40468: IFFALSE 40472
// exit ;
40470: GO 40928
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
40472: LD_ADDR_VAR 0 5
40476: PUSH
40477: LD_INT 81
40479: PUSH
40480: LD_VAR 0 8
40484: PUSH
40485: EMPTY
40486: LIST
40487: LIST
40488: PPUSH
40489: CALL_OW 69
40493: ST_TO_ADDR
// for i in result do
40494: LD_ADDR_VAR 0 4
40498: PUSH
40499: LD_VAR 0 3
40503: PUSH
40504: FOR_IN
40505: IFFALSE 40926
// begin tag := GetTag ( i ) + 1 ;
40507: LD_ADDR_VAR 0 9
40511: PUSH
40512: LD_VAR 0 4
40516: PPUSH
40517: CALL_OW 110
40521: PUSH
40522: LD_INT 1
40524: PLUS
40525: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
40526: LD_ADDR_VAR 0 7
40530: PUSH
40531: LD_VAR 0 4
40535: PPUSH
40536: CALL_OW 250
40540: PPUSH
40541: LD_VAR 0 4
40545: PPUSH
40546: CALL_OW 251
40550: PPUSH
40551: LD_INT 6
40553: PPUSH
40554: CALL 40127 0 3
40558: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
40559: LD_VAR 0 4
40563: PPUSH
40564: CALL_OW 247
40568: PUSH
40569: LD_INT 2
40571: EQUAL
40572: PUSH
40573: LD_VAR 0 7
40577: AND
40578: PUSH
40579: LD_VAR 0 4
40583: PPUSH
40584: CALL_OW 264
40588: PUSH
40589: LD_VAR 0 10
40593: IN
40594: NOT
40595: AND
40596: IFFALSE 40635
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
40598: LD_VAR 0 4
40602: PPUSH
40603: LD_VAR 0 7
40607: PUSH
40608: LD_INT 1
40610: ARRAY
40611: PUSH
40612: LD_INT 1
40614: ARRAY
40615: PPUSH
40616: LD_VAR 0 7
40620: PUSH
40621: LD_INT 1
40623: ARRAY
40624: PUSH
40625: LD_INT 2
40627: ARRAY
40628: PPUSH
40629: CALL_OW 116
40633: GO 40924
// if path > tag then
40635: LD_VAR 0 2
40639: PUSH
40640: LD_VAR 0 9
40644: GREATER
40645: IFFALSE 40853
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
40647: LD_ADDR_VAR 0 6
40651: PUSH
40652: LD_VAR 0 5
40656: PPUSH
40657: LD_INT 91
40659: PUSH
40660: LD_VAR 0 4
40664: PUSH
40665: LD_INT 8
40667: PUSH
40668: EMPTY
40669: LIST
40670: LIST
40671: LIST
40672: PPUSH
40673: CALL_OW 72
40677: ST_TO_ADDR
// if nearEnemy then
40678: LD_VAR 0 6
40682: IFFALSE 40751
// begin if GetWeapon ( i ) = ru_time_lapser then
40684: LD_VAR 0 4
40688: PPUSH
40689: CALL_OW 264
40693: PUSH
40694: LD_INT 49
40696: EQUAL
40697: IFFALSE 40725
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
40699: LD_VAR 0 4
40703: PPUSH
40704: LD_VAR 0 6
40708: PPUSH
40709: LD_VAR 0 4
40713: PPUSH
40714: CALL_OW 74
40718: PPUSH
40719: CALL_OW 112
40723: GO 40749
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
40725: LD_VAR 0 4
40729: PPUSH
40730: LD_VAR 0 6
40734: PPUSH
40735: LD_VAR 0 4
40739: PPUSH
40740: CALL_OW 74
40744: PPUSH
40745: CALL 41853 0 2
// end else
40749: GO 40851
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
40751: LD_VAR 0 4
40755: PPUSH
40756: LD_VAR 0 2
40760: PUSH
40761: LD_VAR 0 9
40765: ARRAY
40766: PUSH
40767: LD_INT 1
40769: ARRAY
40770: PPUSH
40771: LD_VAR 0 2
40775: PUSH
40776: LD_VAR 0 9
40780: ARRAY
40781: PUSH
40782: LD_INT 2
40784: ARRAY
40785: PPUSH
40786: CALL_OW 297
40790: PUSH
40791: LD_INT 6
40793: GREATER
40794: IFFALSE 40837
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
40796: LD_VAR 0 4
40800: PPUSH
40801: LD_VAR 0 2
40805: PUSH
40806: LD_VAR 0 9
40810: ARRAY
40811: PUSH
40812: LD_INT 1
40814: ARRAY
40815: PPUSH
40816: LD_VAR 0 2
40820: PUSH
40821: LD_VAR 0 9
40825: ARRAY
40826: PUSH
40827: LD_INT 2
40829: ARRAY
40830: PPUSH
40831: CALL_OW 114
40835: GO 40851
// SetTag ( i , tag ) ;
40837: LD_VAR 0 4
40841: PPUSH
40842: LD_VAR 0 9
40846: PPUSH
40847: CALL_OW 109
// end else
40851: GO 40924
// if enemy then
40853: LD_VAR 0 5
40857: IFFALSE 40924
// begin if GetWeapon ( i ) = ru_time_lapser then
40859: LD_VAR 0 4
40863: PPUSH
40864: CALL_OW 264
40868: PUSH
40869: LD_INT 49
40871: EQUAL
40872: IFFALSE 40900
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
40874: LD_VAR 0 4
40878: PPUSH
40879: LD_VAR 0 5
40883: PPUSH
40884: LD_VAR 0 4
40888: PPUSH
40889: CALL_OW 74
40893: PPUSH
40894: CALL_OW 112
40898: GO 40924
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
40900: LD_VAR 0 4
40904: PPUSH
40905: LD_VAR 0 5
40909: PPUSH
40910: LD_VAR 0 4
40914: PPUSH
40915: CALL_OW 74
40919: PPUSH
40920: CALL 41853 0 2
// end ; end ;
40924: GO 40504
40926: POP
40927: POP
// end ;
40928: LD_VAR 0 3
40932: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
40933: LD_INT 0
40935: PPUSH
40936: PPUSH
40937: PPUSH
// if not unit or IsInUnit ( unit ) then
40938: LD_VAR 0 1
40942: NOT
40943: PUSH
40944: LD_VAR 0 1
40948: PPUSH
40949: CALL_OW 310
40953: OR
40954: IFFALSE 40958
// exit ;
40956: GO 41049
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
40958: LD_ADDR_VAR 0 4
40962: PUSH
40963: LD_VAR 0 1
40967: PPUSH
40968: CALL_OW 250
40972: PPUSH
40973: LD_VAR 0 2
40977: PPUSH
40978: LD_INT 1
40980: PPUSH
40981: CALL_OW 272
40985: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
40986: LD_ADDR_VAR 0 5
40990: PUSH
40991: LD_VAR 0 1
40995: PPUSH
40996: CALL_OW 251
41000: PPUSH
41001: LD_VAR 0 2
41005: PPUSH
41006: LD_INT 1
41008: PPUSH
41009: CALL_OW 273
41013: ST_TO_ADDR
// if ValidHex ( x , y ) then
41014: LD_VAR 0 4
41018: PPUSH
41019: LD_VAR 0 5
41023: PPUSH
41024: CALL_OW 488
41028: IFFALSE 41049
// ComTurnXY ( unit , x , y ) ;
41030: LD_VAR 0 1
41034: PPUSH
41035: LD_VAR 0 4
41039: PPUSH
41040: LD_VAR 0 5
41044: PPUSH
41045: CALL_OW 118
// end ;
41049: LD_VAR 0 3
41053: RET
// export function SeeUnits ( side , units ) ; var i ; begin
41054: LD_INT 0
41056: PPUSH
41057: PPUSH
// result := false ;
41058: LD_ADDR_VAR 0 3
41062: PUSH
41063: LD_INT 0
41065: ST_TO_ADDR
// if not units then
41066: LD_VAR 0 2
41070: NOT
41071: IFFALSE 41075
// exit ;
41073: GO 41120
// for i in units do
41075: LD_ADDR_VAR 0 4
41079: PUSH
41080: LD_VAR 0 2
41084: PUSH
41085: FOR_IN
41086: IFFALSE 41118
// if See ( side , i ) then
41088: LD_VAR 0 1
41092: PPUSH
41093: LD_VAR 0 4
41097: PPUSH
41098: CALL_OW 292
41102: IFFALSE 41116
// begin result := true ;
41104: LD_ADDR_VAR 0 3
41108: PUSH
41109: LD_INT 1
41111: ST_TO_ADDR
// exit ;
41112: POP
41113: POP
41114: GO 41120
// end ;
41116: GO 41085
41118: POP
41119: POP
// end ;
41120: LD_VAR 0 3
41124: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
41125: LD_INT 0
41127: PPUSH
41128: PPUSH
41129: PPUSH
41130: PPUSH
// if not unit or not points then
41131: LD_VAR 0 1
41135: NOT
41136: PUSH
41137: LD_VAR 0 2
41141: NOT
41142: OR
41143: IFFALSE 41147
// exit ;
41145: GO 41237
// dist := 99999 ;
41147: LD_ADDR_VAR 0 5
41151: PUSH
41152: LD_INT 99999
41154: ST_TO_ADDR
// for i in points do
41155: LD_ADDR_VAR 0 4
41159: PUSH
41160: LD_VAR 0 2
41164: PUSH
41165: FOR_IN
41166: IFFALSE 41235
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
41168: LD_ADDR_VAR 0 6
41172: PUSH
41173: LD_VAR 0 1
41177: PPUSH
41178: LD_VAR 0 4
41182: PUSH
41183: LD_INT 1
41185: ARRAY
41186: PPUSH
41187: LD_VAR 0 4
41191: PUSH
41192: LD_INT 2
41194: ARRAY
41195: PPUSH
41196: CALL_OW 297
41200: ST_TO_ADDR
// if tmpDist < dist then
41201: LD_VAR 0 6
41205: PUSH
41206: LD_VAR 0 5
41210: LESS
41211: IFFALSE 41233
// begin result := i ;
41213: LD_ADDR_VAR 0 3
41217: PUSH
41218: LD_VAR 0 4
41222: ST_TO_ADDR
// dist := tmpDist ;
41223: LD_ADDR_VAR 0 5
41227: PUSH
41228: LD_VAR 0 6
41232: ST_TO_ADDR
// end ; end ;
41233: GO 41165
41235: POP
41236: POP
// end ;
41237: LD_VAR 0 3
41241: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
41242: LD_INT 0
41244: PPUSH
// uc_side := side ;
41245: LD_ADDR_OWVAR 20
41249: PUSH
41250: LD_VAR 0 1
41254: ST_TO_ADDR
// uc_nation := 3 ;
41255: LD_ADDR_OWVAR 21
41259: PUSH
41260: LD_INT 3
41262: ST_TO_ADDR
// vc_chassis := 25 ;
41263: LD_ADDR_OWVAR 37
41267: PUSH
41268: LD_INT 25
41270: ST_TO_ADDR
// vc_engine := engine_siberite ;
41271: LD_ADDR_OWVAR 39
41275: PUSH
41276: LD_INT 3
41278: ST_TO_ADDR
// vc_control := control_computer ;
41279: LD_ADDR_OWVAR 38
41283: PUSH
41284: LD_INT 3
41286: ST_TO_ADDR
// vc_weapon := 59 ;
41287: LD_ADDR_OWVAR 40
41291: PUSH
41292: LD_INT 59
41294: ST_TO_ADDR
// result := CreateVehicle ;
41295: LD_ADDR_VAR 0 5
41299: PUSH
41300: CALL_OW 45
41304: ST_TO_ADDR
// SetDir ( result , d ) ;
41305: LD_VAR 0 5
41309: PPUSH
41310: LD_VAR 0 4
41314: PPUSH
41315: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
41319: LD_VAR 0 5
41323: PPUSH
41324: LD_VAR 0 2
41328: PPUSH
41329: LD_VAR 0 3
41333: PPUSH
41334: LD_INT 0
41336: PPUSH
41337: CALL_OW 48
// end ;
41341: LD_VAR 0 5
41345: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
41346: LD_INT 0
41348: PPUSH
41349: PPUSH
41350: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
41351: LD_ADDR_VAR 0 2
41355: PUSH
41356: LD_INT 0
41358: PUSH
41359: LD_INT 0
41361: PUSH
41362: LD_INT 0
41364: PUSH
41365: LD_INT 0
41367: PUSH
41368: EMPTY
41369: LIST
41370: LIST
41371: LIST
41372: LIST
41373: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
41374: LD_VAR 0 1
41378: NOT
41379: PUSH
41380: LD_VAR 0 1
41384: PPUSH
41385: CALL_OW 264
41389: PUSH
41390: LD_INT 12
41392: PUSH
41393: LD_INT 51
41395: PUSH
41396: LD_INT 32
41398: PUSH
41399: LD_INT 89
41401: PUSH
41402: EMPTY
41403: LIST
41404: LIST
41405: LIST
41406: LIST
41407: IN
41408: NOT
41409: OR
41410: IFFALSE 41414
// exit ;
41412: GO 41512
// for i := 1 to 3 do
41414: LD_ADDR_VAR 0 3
41418: PUSH
41419: DOUBLE
41420: LD_INT 1
41422: DEC
41423: ST_TO_ADDR
41424: LD_INT 3
41426: PUSH
41427: FOR_TO
41428: IFFALSE 41510
// begin tmp := GetCargo ( cargo , i ) ;
41430: LD_ADDR_VAR 0 4
41434: PUSH
41435: LD_VAR 0 1
41439: PPUSH
41440: LD_VAR 0 3
41444: PPUSH
41445: CALL_OW 289
41449: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
41450: LD_ADDR_VAR 0 2
41454: PUSH
41455: LD_VAR 0 2
41459: PPUSH
41460: LD_VAR 0 3
41464: PPUSH
41465: LD_VAR 0 4
41469: PPUSH
41470: CALL_OW 1
41474: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
41475: LD_ADDR_VAR 0 2
41479: PUSH
41480: LD_VAR 0 2
41484: PPUSH
41485: LD_INT 4
41487: PPUSH
41488: LD_VAR 0 2
41492: PUSH
41493: LD_INT 4
41495: ARRAY
41496: PUSH
41497: LD_VAR 0 4
41501: PLUS
41502: PPUSH
41503: CALL_OW 1
41507: ST_TO_ADDR
// end ;
41508: GO 41427
41510: POP
41511: POP
// end ;
41512: LD_VAR 0 2
41516: RET
// export function Length ( array ) ; begin
41517: LD_INT 0
41519: PPUSH
// result := array + 0 ;
41520: LD_ADDR_VAR 0 2
41524: PUSH
41525: LD_VAR 0 1
41529: PUSH
41530: LD_INT 0
41532: PLUS
41533: ST_TO_ADDR
// end ;
41534: LD_VAR 0 2
41538: RET
// export function PrepareArray ( array ) ; begin
41539: LD_INT 0
41541: PPUSH
// result := array diff 0 ;
41542: LD_ADDR_VAR 0 2
41546: PUSH
41547: LD_VAR 0 1
41551: PUSH
41552: LD_INT 0
41554: DIFF
41555: ST_TO_ADDR
// if not result [ 1 ] then
41556: LD_VAR 0 2
41560: PUSH
41561: LD_INT 1
41563: ARRAY
41564: NOT
41565: IFFALSE 41585
// result := Delete ( result , 1 ) ;
41567: LD_ADDR_VAR 0 2
41571: PUSH
41572: LD_VAR 0 2
41576: PPUSH
41577: LD_INT 1
41579: PPUSH
41580: CALL_OW 3
41584: ST_TO_ADDR
// end ;
41585: LD_VAR 0 2
41589: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
41590: LD_INT 0
41592: PPUSH
41593: PPUSH
41594: PPUSH
41595: PPUSH
// sibRocketRange := 25 ;
41596: LD_ADDR_VAR 0 6
41600: PUSH
41601: LD_INT 25
41603: ST_TO_ADDR
// result := false ;
41604: LD_ADDR_VAR 0 4
41608: PUSH
41609: LD_INT 0
41611: ST_TO_ADDR
// for i := 0 to 5 do
41612: LD_ADDR_VAR 0 5
41616: PUSH
41617: DOUBLE
41618: LD_INT 0
41620: DEC
41621: ST_TO_ADDR
41622: LD_INT 5
41624: PUSH
41625: FOR_TO
41626: IFFALSE 41693
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
41628: LD_VAR 0 1
41632: PPUSH
41633: LD_VAR 0 5
41637: PPUSH
41638: LD_VAR 0 6
41642: PPUSH
41643: CALL_OW 272
41647: PPUSH
41648: LD_VAR 0 2
41652: PPUSH
41653: LD_VAR 0 5
41657: PPUSH
41658: LD_VAR 0 6
41662: PPUSH
41663: CALL_OW 273
41667: PPUSH
41668: LD_VAR 0 3
41672: PPUSH
41673: CALL_OW 309
41677: IFFALSE 41691
// begin result := true ;
41679: LD_ADDR_VAR 0 4
41683: PUSH
41684: LD_INT 1
41686: ST_TO_ADDR
// exit ;
41687: POP
41688: POP
41689: GO 41695
// end ;
41691: GO 41625
41693: POP
41694: POP
// end ;
41695: LD_VAR 0 4
41699: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
41700: LD_INT 0
41702: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
41703: LD_VAR 0 1
41707: PPUSH
41708: LD_VAR 0 2
41712: PPUSH
41713: LD_INT 0
41715: PPUSH
41716: LD_INT 0
41718: PPUSH
41719: LD_INT 1
41721: PPUSH
41722: LD_INT 0
41724: PPUSH
41725: CALL_OW 587
// end ;
41729: LD_VAR 0 3
41733: RET
// export function CenterOnNow ( unit ) ; begin
41734: LD_INT 0
41736: PPUSH
// result := IsInUnit ( unit ) ;
41737: LD_ADDR_VAR 0 2
41741: PUSH
41742: LD_VAR 0 1
41746: PPUSH
41747: CALL_OW 310
41751: ST_TO_ADDR
// if not result then
41752: LD_VAR 0 2
41756: NOT
41757: IFFALSE 41769
// result := unit ;
41759: LD_ADDR_VAR 0 2
41763: PUSH
41764: LD_VAR 0 1
41768: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
41769: LD_VAR 0 1
41773: PPUSH
41774: CALL_OW 87
// end ;
41778: LD_VAR 0 2
41782: RET
// export function ComMoveHex ( unit , hex ) ; begin
41783: LD_INT 0
41785: PPUSH
// if not hex then
41786: LD_VAR 0 2
41790: NOT
41791: IFFALSE 41795
// exit ;
41793: GO 41848
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
41795: LD_VAR 0 2
41799: PUSH
41800: LD_INT 1
41802: ARRAY
41803: PPUSH
41804: LD_VAR 0 2
41808: PUSH
41809: LD_INT 2
41811: ARRAY
41812: PPUSH
41813: CALL_OW 428
41817: IFFALSE 41821
// exit ;
41819: GO 41848
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
41821: LD_VAR 0 1
41825: PPUSH
41826: LD_VAR 0 2
41830: PUSH
41831: LD_INT 1
41833: ARRAY
41834: PPUSH
41835: LD_VAR 0 2
41839: PUSH
41840: LD_INT 2
41842: ARRAY
41843: PPUSH
41844: CALL_OW 111
// end ;
41848: LD_VAR 0 3
41852: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
41853: LD_INT 0
41855: PPUSH
41856: PPUSH
41857: PPUSH
// if not unit or not enemy then
41858: LD_VAR 0 1
41862: NOT
41863: PUSH
41864: LD_VAR 0 2
41868: NOT
41869: OR
41870: IFFALSE 41874
// exit ;
41872: GO 41998
// x := GetX ( enemy ) ;
41874: LD_ADDR_VAR 0 4
41878: PUSH
41879: LD_VAR 0 2
41883: PPUSH
41884: CALL_OW 250
41888: ST_TO_ADDR
// y := GetY ( enemy ) ;
41889: LD_ADDR_VAR 0 5
41893: PUSH
41894: LD_VAR 0 2
41898: PPUSH
41899: CALL_OW 251
41903: ST_TO_ADDR
// if ValidHex ( x , y ) then
41904: LD_VAR 0 4
41908: PPUSH
41909: LD_VAR 0 5
41913: PPUSH
41914: CALL_OW 488
41918: IFFALSE 41998
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] and See ( GetSide ( unit ) , enemy ) then
41920: LD_VAR 0 2
41924: PPUSH
41925: CALL_OW 247
41929: PUSH
41930: LD_INT 3
41932: PUSH
41933: LD_INT 2
41935: PUSH
41936: EMPTY
41937: LIST
41938: LIST
41939: IN
41940: PUSH
41941: LD_VAR 0 1
41945: PPUSH
41946: CALL_OW 255
41950: PPUSH
41951: LD_VAR 0 2
41955: PPUSH
41956: CALL_OW 292
41960: AND
41961: IFFALSE 41979
// ComAttackUnit ( unit , enemy ) else
41963: LD_VAR 0 1
41967: PPUSH
41968: LD_VAR 0 2
41972: PPUSH
41973: CALL_OW 115
41977: GO 41998
// ComAgressiveMove ( unit , x , y ) ;
41979: LD_VAR 0 1
41983: PPUSH
41984: LD_VAR 0 4
41988: PPUSH
41989: LD_VAR 0 5
41993: PPUSH
41994: CALL_OW 114
// end ;
41998: LD_VAR 0 3
42002: RET
