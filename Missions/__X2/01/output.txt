// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 112 0 0
// SetAreaMapShowCustom ( area2 , 1 ) ;
   8: LD_INT 2
  10: PPUSH
  11: LD_INT 1
  13: PPUSH
  14: CALL 19 0 2
// end ;
  18: END
// function SetAreaMapShowCustom ( area , mode ) ; var i , tmp ; begin
  19: LD_INT 0
  21: PPUSH
  22: PPUSH
  23: PPUSH
// tmp := AreaToList ( area , 0 ) ;
  24: LD_ADDR_VAR 0 5
  28: PUSH
  29: LD_VAR 0 1
  33: PPUSH
  34: LD_INT 0
  36: PPUSH
  37: CALL_OW 517
  41: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
  42: LD_ADDR_VAR 0 4
  46: PUSH
  47: DOUBLE
  48: LD_INT 1
  50: DEC
  51: ST_TO_ADDR
  52: LD_VAR 0 5
  56: PUSH
  57: LD_INT 1
  59: ARRAY
  60: PUSH
  61: FOR_TO
  62: IFFALSE 105
// SetAreaMapShowHex ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , mode ) ;
  64: LD_VAR 0 5
  68: PUSH
  69: LD_INT 1
  71: ARRAY
  72: PUSH
  73: LD_VAR 0 4
  77: ARRAY
  78: PPUSH
  79: LD_VAR 0 5
  83: PUSH
  84: LD_INT 2
  86: ARRAY
  87: PUSH
  88: LD_VAR 0 4
  92: ARRAY
  93: PPUSH
  94: LD_VAR 0 2
  98: PPUSH
  99: CALL_OW 598
 103: GO 61
 105: POP
 106: POP
// end ;
 107: LD_VAR 0 3
 111: RET
// var t ; function Init ; begin
 112: LD_INT 0
 114: PPUSH
// t := 0 0$0 ;
 115: LD_ADDR_LOC 1
 119: PUSH
 120: LD_INT 0
 122: ST_TO_ADDR
// CreateResourcesXY ( mat_cans , 5 , 63 , 64 , false ) ;
 123: LD_INT 1
 125: PPUSH
 126: LD_INT 5
 128: PPUSH
 129: LD_INT 63
 131: PPUSH
 132: LD_INT 64
 134: PPUSH
 135: LD_INT 0
 137: PPUSH
 138: CALL_OW 58
// wait ( 0 0$1 ) ;
 142: LD_INT 35
 144: PPUSH
 145: CALL_OW 67
// CreateResourcesXY ( mat_cans , 4 , 63 , 64 , false ) ;
 149: LD_INT 1
 151: PPUSH
 152: LD_INT 4
 154: PPUSH
 155: LD_INT 63
 157: PPUSH
 158: LD_INT 64
 160: PPUSH
 161: LD_INT 0
 163: PPUSH
 164: CALL_OW 58
// end ;
 168: LD_VAR 0 1
 172: RET
// function GetAllLabKind ( side , kinds ) ; var i , j , tmp ; begin
 173: LD_INT 0
 175: PPUSH
 176: PPUSH
 177: PPUSH
 178: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
 179: LD_ADDR_VAR 0 6
 183: PUSH
 184: LD_INT 22
 186: PUSH
 187: LD_VAR 0 1
 191: PUSH
 192: EMPTY
 193: LIST
 194: LIST
 195: PUSH
 196: LD_INT 2
 198: PUSH
 199: LD_INT 30
 201: PUSH
 202: LD_INT 7
 204: PUSH
 205: EMPTY
 206: LIST
 207: LIST
 208: PUSH
 209: LD_INT 30
 211: PUSH
 212: LD_INT 8
 214: PUSH
 215: EMPTY
 216: LIST
 217: LIST
 218: PUSH
 219: EMPTY
 220: LIST
 221: LIST
 222: LIST
 223: PUSH
 224: EMPTY
 225: LIST
 226: LIST
 227: PPUSH
 228: CALL_OW 69
 232: ST_TO_ADDR
// if not tmp or not kinds then
 233: LD_VAR 0 6
 237: NOT
 238: PUSH
 239: LD_VAR 0 2
 243: NOT
 244: OR
 245: IFFALSE 249
// exit ;
 247: GO 358
// result := 0 ;
 249: LD_ADDR_VAR 0 3
 253: PUSH
 254: LD_INT 0
 256: ST_TO_ADDR
// for i in tmp do
 257: LD_ADDR_VAR 0 4
 261: PUSH
 262: LD_VAR 0 6
 266: PUSH
 267: FOR_IN
 268: IFFALSE 356
// for j := 1 to 2 do
 270: LD_ADDR_VAR 0 5
 274: PUSH
 275: DOUBLE
 276: LD_INT 1
 278: DEC
 279: ST_TO_ADDR
 280: LD_INT 2
 282: PUSH
 283: FOR_TO
 284: IFFALSE 352
// if GetLabKind ( i , j ) in kinds then
 286: LD_VAR 0 4
 290: PPUSH
 291: LD_VAR 0 5
 295: PPUSH
 296: CALL_OW 268
 300: PUSH
 301: LD_VAR 0 2
 305: IN
 306: IFFALSE 350
// begin kinds := kinds diff GetLabKind ( i , j ) ;
 308: LD_ADDR_VAR 0 2
 312: PUSH
 313: LD_VAR 0 2
 317: PUSH
 318: LD_VAR 0 4
 322: PPUSH
 323: LD_VAR 0 5
 327: PPUSH
 328: CALL_OW 268
 332: DIFF
 333: ST_TO_ADDR
// result := result + 1 ;
 334: LD_ADDR_VAR 0 3
 338: PUSH
 339: LD_VAR 0 3
 343: PUSH
 344: LD_INT 1
 346: PLUS
 347: ST_TO_ADDR
// continue ;
 348: GO 283
// end ;
 350: GO 283
 352: POP
 353: POP
 354: GO 267
 356: POP
 357: POP
// end ;
 358: LD_VAR 0 3
 362: RET
// on VehicleRecycled ( fac , veh , side , nat , x , y , dir , chassis , control , engine , weapon ) do begin display_strings := weapon ;
 363: LD_ADDR_OWVAR 47
 367: PUSH
 368: LD_VAR 0 11
 372: ST_TO_ADDR
// end ;
 373: PPOPN 11
 375: END
// export Omar ; every 0 0$1 do
 376: GO 378
 378: DISABLE
// begin uc_side := 1 ;
 379: LD_ADDR_OWVAR 20
 383: PUSH
 384: LD_INT 1
 386: ST_TO_ADDR
// uc_nation := 2 ;
 387: LD_ADDR_OWVAR 21
 391: PUSH
 392: LD_INT 2
 394: ST_TO_ADDR
// hc_class := class_desert_warior ;
 395: LD_ADDR_OWVAR 28
 399: PUSH
 400: LD_INT 11
 402: ST_TO_ADDR
// hc_sex := sex_male ;
 403: LD_ADDR_OWVAR 27
 407: PUSH
 408: LD_INT 1
 410: ST_TO_ADDR
// hc_name := Omar ;
 411: LD_ADDR_OWVAR 26
 415: PUSH
 416: LD_STRING Omar
 418: ST_TO_ADDR
// Omar := CreateHuman ;
 419: LD_ADDR_EXP 1
 423: PUSH
 424: CALL_OW 44
 428: ST_TO_ADDR
// SetTag ( Omar , 500 ) ;
 429: LD_EXP 1
 433: PPUSH
 434: LD_INT 500
 436: PPUSH
 437: CALL_OW 109
// PlaceUnitXY ( Omar , 27 , 27 , false ) ;
 441: LD_EXP 1
 445: PPUSH
 446: LD_INT 27
 448: PPUSH
 449: LD_INT 27
 451: PPUSH
 452: LD_INT 0
 454: PPUSH
 455: CALL_OW 48
// end ;
 459: END
// every 0 0$1 do var i ;
 460: GO 462
 462: DISABLE
 463: LD_INT 0
 465: PPUSH
// begin for i := 1 to 3 do
 466: LD_ADDR_VAR 0 1
 470: PUSH
 471: DOUBLE
 472: LD_INT 1
 474: DEC
 475: ST_TO_ADDR
 476: LD_INT 3
 478: PUSH
 479: FOR_TO
 480: IFFALSE 511
// AddComAttackPlace ( ar1 , 59 + ( ( i - 1 ) * 2 ) , 74 ) ;
 482: LD_INT 67
 484: PPUSH
 485: LD_INT 59
 487: PUSH
 488: LD_VAR 0 1
 492: PUSH
 493: LD_INT 1
 495: MINUS
 496: PUSH
 497: LD_INT 2
 499: MUL
 500: PLUS
 501: PPUSH
 502: LD_INT 74
 504: PPUSH
 505: CALL_OW 176
 509: GO 479
 511: POP
 512: POP
// end ; end_of_file
 513: PPOPN 1
 515: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
 516: LD_INT 0
 518: PPUSH
 519: PPUSH
// if exist_mode then
 520: LD_VAR 0 2
 524: IFFALSE 549
// unit := CreateCharacter ( prefix & ident ) else
 526: LD_ADDR_VAR 0 5
 530: PUSH
 531: LD_VAR 0 3
 535: PUSH
 536: LD_VAR 0 1
 540: STR
 541: PPUSH
 542: CALL_OW 34
 546: ST_TO_ADDR
 547: GO 564
// unit := NewCharacter ( ident ) ;
 549: LD_ADDR_VAR 0 5
 553: PUSH
 554: LD_VAR 0 1
 558: PPUSH
 559: CALL_OW 25
 563: ST_TO_ADDR
// result := unit ;
 564: LD_ADDR_VAR 0 4
 568: PUSH
 569: LD_VAR 0 5
 573: ST_TO_ADDR
// end ;
 574: LD_VAR 0 4
 578: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
 579: LD_INT 0
 581: PPUSH
 582: PPUSH
// if not side or not nation then
 583: LD_VAR 0 1
 587: NOT
 588: PUSH
 589: LD_VAR 0 2
 593: NOT
 594: OR
 595: IFFALSE 599
// exit ;
 597: GO 1367
// case nation of nation_american :
 599: LD_VAR 0 2
 603: PUSH
 604: LD_INT 1
 606: DOUBLE
 607: EQUAL
 608: IFTRUE 612
 610: GO 826
 612: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
 613: LD_ADDR_VAR 0 4
 617: PUSH
 618: LD_INT 35
 620: PUSH
 621: LD_INT 45
 623: PUSH
 624: LD_INT 46
 626: PUSH
 627: LD_INT 47
 629: PUSH
 630: LD_INT 82
 632: PUSH
 633: LD_INT 83
 635: PUSH
 636: LD_INT 84
 638: PUSH
 639: LD_INT 85
 641: PUSH
 642: LD_INT 86
 644: PUSH
 645: LD_INT 1
 647: PUSH
 648: LD_INT 2
 650: PUSH
 651: LD_INT 6
 653: PUSH
 654: LD_INT 15
 656: PUSH
 657: LD_INT 16
 659: PUSH
 660: LD_INT 7
 662: PUSH
 663: LD_INT 12
 665: PUSH
 666: LD_INT 13
 668: PUSH
 669: LD_INT 10
 671: PUSH
 672: LD_INT 14
 674: PUSH
 675: LD_INT 20
 677: PUSH
 678: LD_INT 21
 680: PUSH
 681: LD_INT 22
 683: PUSH
 684: LD_INT 25
 686: PUSH
 687: LD_INT 32
 689: PUSH
 690: LD_INT 27
 692: PUSH
 693: LD_INT 36
 695: PUSH
 696: LD_INT 69
 698: PUSH
 699: LD_INT 39
 701: PUSH
 702: LD_INT 34
 704: PUSH
 705: LD_INT 40
 707: PUSH
 708: LD_INT 48
 710: PUSH
 711: LD_INT 49
 713: PUSH
 714: LD_INT 50
 716: PUSH
 717: LD_INT 51
 719: PUSH
 720: LD_INT 52
 722: PUSH
 723: LD_INT 53
 725: PUSH
 726: LD_INT 54
 728: PUSH
 729: LD_INT 55
 731: PUSH
 732: LD_INT 56
 734: PUSH
 735: LD_INT 57
 737: PUSH
 738: LD_INT 58
 740: PUSH
 741: LD_INT 59
 743: PUSH
 744: LD_INT 60
 746: PUSH
 747: LD_INT 61
 749: PUSH
 750: LD_INT 62
 752: PUSH
 753: LD_INT 80
 755: PUSH
 756: LD_INT 82
 758: PUSH
 759: LD_INT 83
 761: PUSH
 762: LD_INT 84
 764: PUSH
 765: LD_INT 85
 767: PUSH
 768: LD_INT 86
 770: PUSH
 771: EMPTY
 772: LIST
 773: LIST
 774: LIST
 775: LIST
 776: LIST
 777: LIST
 778: LIST
 779: LIST
 780: LIST
 781: LIST
 782: LIST
 783: LIST
 784: LIST
 785: LIST
 786: LIST
 787: LIST
 788: LIST
 789: LIST
 790: LIST
 791: LIST
 792: LIST
 793: LIST
 794: LIST
 795: LIST
 796: LIST
 797: LIST
 798: LIST
 799: LIST
 800: LIST
 801: LIST
 802: LIST
 803: LIST
 804: LIST
 805: LIST
 806: LIST
 807: LIST
 808: LIST
 809: LIST
 810: LIST
 811: LIST
 812: LIST
 813: LIST
 814: LIST
 815: LIST
 816: LIST
 817: LIST
 818: LIST
 819: LIST
 820: LIST
 821: LIST
 822: LIST
 823: ST_TO_ADDR
 824: GO 1291
 826: LD_INT 2
 828: DOUBLE
 829: EQUAL
 830: IFTRUE 834
 832: GO 1060
 834: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
 835: LD_ADDR_VAR 0 4
 839: PUSH
 840: LD_INT 35
 842: PUSH
 843: LD_INT 45
 845: PUSH
 846: LD_INT 46
 848: PUSH
 849: LD_INT 47
 851: PUSH
 852: LD_INT 82
 854: PUSH
 855: LD_INT 83
 857: PUSH
 858: LD_INT 84
 860: PUSH
 861: LD_INT 85
 863: PUSH
 864: LD_INT 87
 866: PUSH
 867: LD_INT 70
 869: PUSH
 870: LD_INT 1
 872: PUSH
 873: LD_INT 11
 875: PUSH
 876: LD_INT 3
 878: PUSH
 879: LD_INT 4
 881: PUSH
 882: LD_INT 5
 884: PUSH
 885: LD_INT 6
 887: PUSH
 888: LD_INT 15
 890: PUSH
 891: LD_INT 18
 893: PUSH
 894: LD_INT 7
 896: PUSH
 897: LD_INT 17
 899: PUSH
 900: LD_INT 8
 902: PUSH
 903: LD_INT 20
 905: PUSH
 906: LD_INT 21
 908: PUSH
 909: LD_INT 22
 911: PUSH
 912: LD_INT 72
 914: PUSH
 915: LD_INT 26
 917: PUSH
 918: LD_INT 69
 920: PUSH
 921: LD_INT 39
 923: PUSH
 924: LD_INT 40
 926: PUSH
 927: LD_INT 41
 929: PUSH
 930: LD_INT 42
 932: PUSH
 933: LD_INT 43
 935: PUSH
 936: LD_INT 48
 938: PUSH
 939: LD_INT 49
 941: PUSH
 942: LD_INT 50
 944: PUSH
 945: LD_INT 51
 947: PUSH
 948: LD_INT 52
 950: PUSH
 951: LD_INT 53
 953: PUSH
 954: LD_INT 54
 956: PUSH
 957: LD_INT 55
 959: PUSH
 960: LD_INT 56
 962: PUSH
 963: LD_INT 60
 965: PUSH
 966: LD_INT 61
 968: PUSH
 969: LD_INT 62
 971: PUSH
 972: LD_INT 66
 974: PUSH
 975: LD_INT 67
 977: PUSH
 978: LD_INT 68
 980: PUSH
 981: LD_INT 81
 983: PUSH
 984: LD_INT 82
 986: PUSH
 987: LD_INT 83
 989: PUSH
 990: LD_INT 84
 992: PUSH
 993: LD_INT 85
 995: PUSH
 996: LD_INT 87
 998: PUSH
 999: LD_INT 88
1001: PUSH
1002: EMPTY
1003: LIST
1004: LIST
1005: LIST
1006: LIST
1007: LIST
1008: LIST
1009: LIST
1010: LIST
1011: LIST
1012: LIST
1013: LIST
1014: LIST
1015: LIST
1016: LIST
1017: LIST
1018: LIST
1019: LIST
1020: LIST
1021: LIST
1022: LIST
1023: LIST
1024: LIST
1025: LIST
1026: LIST
1027: LIST
1028: LIST
1029: LIST
1030: LIST
1031: LIST
1032: LIST
1033: LIST
1034: LIST
1035: LIST
1036: LIST
1037: LIST
1038: LIST
1039: LIST
1040: LIST
1041: LIST
1042: LIST
1043: LIST
1044: LIST
1045: LIST
1046: LIST
1047: LIST
1048: LIST
1049: LIST
1050: LIST
1051: LIST
1052: LIST
1053: LIST
1054: LIST
1055: LIST
1056: LIST
1057: ST_TO_ADDR
1058: GO 1291
1060: LD_INT 3
1062: DOUBLE
1063: EQUAL
1064: IFTRUE 1068
1066: GO 1290
1068: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
1069: LD_ADDR_VAR 0 4
1073: PUSH
1074: LD_INT 46
1076: PUSH
1077: LD_INT 47
1079: PUSH
1080: LD_INT 1
1082: PUSH
1083: LD_INT 2
1085: PUSH
1086: LD_INT 82
1088: PUSH
1089: LD_INT 83
1091: PUSH
1092: LD_INT 84
1094: PUSH
1095: LD_INT 85
1097: PUSH
1098: LD_INT 86
1100: PUSH
1101: LD_INT 11
1103: PUSH
1104: LD_INT 9
1106: PUSH
1107: LD_INT 20
1109: PUSH
1110: LD_INT 19
1112: PUSH
1113: LD_INT 21
1115: PUSH
1116: LD_INT 24
1118: PUSH
1119: LD_INT 22
1121: PUSH
1122: LD_INT 25
1124: PUSH
1125: LD_INT 28
1127: PUSH
1128: LD_INT 29
1130: PUSH
1131: LD_INT 30
1133: PUSH
1134: LD_INT 31
1136: PUSH
1137: LD_INT 37
1139: PUSH
1140: LD_INT 38
1142: PUSH
1143: LD_INT 32
1145: PUSH
1146: LD_INT 27
1148: PUSH
1149: LD_INT 33
1151: PUSH
1152: LD_INT 69
1154: PUSH
1155: LD_INT 39
1157: PUSH
1158: LD_INT 34
1160: PUSH
1161: LD_INT 40
1163: PUSH
1164: LD_INT 71
1166: PUSH
1167: LD_INT 23
1169: PUSH
1170: LD_INT 44
1172: PUSH
1173: LD_INT 48
1175: PUSH
1176: LD_INT 49
1178: PUSH
1179: LD_INT 50
1181: PUSH
1182: LD_INT 51
1184: PUSH
1185: LD_INT 52
1187: PUSH
1188: LD_INT 53
1190: PUSH
1191: LD_INT 54
1193: PUSH
1194: LD_INT 55
1196: PUSH
1197: LD_INT 56
1199: PUSH
1200: LD_INT 57
1202: PUSH
1203: LD_INT 58
1205: PUSH
1206: LD_INT 59
1208: PUSH
1209: LD_INT 63
1211: PUSH
1212: LD_INT 64
1214: PUSH
1215: LD_INT 65
1217: PUSH
1218: LD_INT 82
1220: PUSH
1221: LD_INT 83
1223: PUSH
1224: LD_INT 84
1226: PUSH
1227: LD_INT 85
1229: PUSH
1230: LD_INT 86
1232: PUSH
1233: EMPTY
1234: LIST
1235: LIST
1236: LIST
1237: LIST
1238: LIST
1239: LIST
1240: LIST
1241: LIST
1242: LIST
1243: LIST
1244: LIST
1245: LIST
1246: LIST
1247: LIST
1248: LIST
1249: LIST
1250: LIST
1251: LIST
1252: LIST
1253: LIST
1254: LIST
1255: LIST
1256: LIST
1257: LIST
1258: LIST
1259: LIST
1260: LIST
1261: LIST
1262: LIST
1263: LIST
1264: LIST
1265: LIST
1266: LIST
1267: LIST
1268: LIST
1269: LIST
1270: LIST
1271: LIST
1272: LIST
1273: LIST
1274: LIST
1275: LIST
1276: LIST
1277: LIST
1278: LIST
1279: LIST
1280: LIST
1281: LIST
1282: LIST
1283: LIST
1284: LIST
1285: LIST
1286: LIST
1287: ST_TO_ADDR
1288: GO 1291
1290: POP
// if state > - 1 and state < 3 then
1291: LD_VAR 0 3
1295: PUSH
1296: LD_INT 1
1298: NEG
1299: GREATER
1300: PUSH
1301: LD_VAR 0 3
1305: PUSH
1306: LD_INT 3
1308: LESS
1309: AND
1310: IFFALSE 1367
// for i in result do
1312: LD_ADDR_VAR 0 5
1316: PUSH
1317: LD_VAR 0 4
1321: PUSH
1322: FOR_IN
1323: IFFALSE 1365
// if GetTech ( i , side ) <> state then
1325: LD_VAR 0 5
1329: PPUSH
1330: LD_VAR 0 1
1334: PPUSH
1335: CALL_OW 321
1339: PUSH
1340: LD_VAR 0 3
1344: NONEQUAL
1345: IFFALSE 1363
// result := result diff i ;
1347: LD_ADDR_VAR 0 4
1351: PUSH
1352: LD_VAR 0 4
1356: PUSH
1357: LD_VAR 0 5
1361: DIFF
1362: ST_TO_ADDR
1363: GO 1322
1365: POP
1366: POP
// end ;
1367: LD_VAR 0 4
1371: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
1372: LD_INT 0
1374: PPUSH
1375: PPUSH
1376: PPUSH
// result := true ;
1377: LD_ADDR_VAR 0 3
1381: PUSH
1382: LD_INT 1
1384: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
1385: LD_ADDR_VAR 0 5
1389: PUSH
1390: LD_VAR 0 2
1394: PPUSH
1395: CALL_OW 480
1399: ST_TO_ADDR
// if not tmp then
1400: LD_VAR 0 5
1404: NOT
1405: IFFALSE 1409
// exit ;
1407: GO 1458
// for i in tmp do
1409: LD_ADDR_VAR 0 4
1413: PUSH
1414: LD_VAR 0 5
1418: PUSH
1419: FOR_IN
1420: IFFALSE 1456
// if GetTech ( i , side ) <> state_researched then
1422: LD_VAR 0 4
1426: PPUSH
1427: LD_VAR 0 1
1431: PPUSH
1432: CALL_OW 321
1436: PUSH
1437: LD_INT 2
1439: NONEQUAL
1440: IFFALSE 1454
// begin result := false ;
1442: LD_ADDR_VAR 0 3
1446: PUSH
1447: LD_INT 0
1449: ST_TO_ADDR
// exit ;
1450: POP
1451: POP
1452: GO 1458
// end ;
1454: GO 1419
1456: POP
1457: POP
// end ;
1458: LD_VAR 0 3
1462: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
1463: LD_INT 0
1465: PPUSH
1466: PPUSH
1467: PPUSH
1468: PPUSH
1469: PPUSH
1470: PPUSH
1471: PPUSH
1472: PPUSH
1473: PPUSH
1474: PPUSH
1475: PPUSH
1476: PPUSH
1477: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
1478: LD_VAR 0 1
1482: NOT
1483: PUSH
1484: LD_VAR 0 1
1488: PPUSH
1489: CALL_OW 257
1493: PUSH
1494: LD_INT 9
1496: NONEQUAL
1497: OR
1498: IFFALSE 1502
// exit ;
1500: GO 2075
// side := GetSide ( unit ) ;
1502: LD_ADDR_VAR 0 9
1506: PUSH
1507: LD_VAR 0 1
1511: PPUSH
1512: CALL_OW 255
1516: ST_TO_ADDR
// tech_space := tech_spacanom ;
1517: LD_ADDR_VAR 0 12
1521: PUSH
1522: LD_INT 29
1524: ST_TO_ADDR
// tech_time := tech_taurad ;
1525: LD_ADDR_VAR 0 13
1529: PUSH
1530: LD_INT 28
1532: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
1533: LD_ADDR_VAR 0 11
1537: PUSH
1538: LD_VAR 0 1
1542: PPUSH
1543: CALL_OW 310
1547: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
1548: LD_VAR 0 11
1552: PPUSH
1553: CALL_OW 247
1557: PUSH
1558: LD_INT 2
1560: EQUAL
1561: IFFALSE 1565
// exit ;
1563: GO 2075
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
1565: LD_ADDR_VAR 0 8
1569: PUSH
1570: LD_INT 81
1572: PUSH
1573: LD_VAR 0 9
1577: PUSH
1578: EMPTY
1579: LIST
1580: LIST
1581: PUSH
1582: LD_INT 3
1584: PUSH
1585: LD_INT 21
1587: PUSH
1588: LD_INT 3
1590: PUSH
1591: EMPTY
1592: LIST
1593: LIST
1594: PUSH
1595: EMPTY
1596: LIST
1597: LIST
1598: PUSH
1599: EMPTY
1600: LIST
1601: LIST
1602: PPUSH
1603: CALL_OW 69
1607: ST_TO_ADDR
// if not tmp then
1608: LD_VAR 0 8
1612: NOT
1613: IFFALSE 1617
// exit ;
1615: GO 2075
// if in_unit then
1617: LD_VAR 0 11
1621: IFFALSE 1645
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
1623: LD_ADDR_VAR 0 10
1627: PUSH
1628: LD_VAR 0 8
1632: PPUSH
1633: LD_VAR 0 11
1637: PPUSH
1638: CALL_OW 74
1642: ST_TO_ADDR
1643: GO 1665
// enemy := NearestUnitToUnit ( tmp , unit ) ;
1645: LD_ADDR_VAR 0 10
1649: PUSH
1650: LD_VAR 0 8
1654: PPUSH
1655: LD_VAR 0 1
1659: PPUSH
1660: CALL_OW 74
1664: ST_TO_ADDR
// if not enemy then
1665: LD_VAR 0 10
1669: NOT
1670: IFFALSE 1674
// exit ;
1672: GO 2075
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
1674: LD_VAR 0 11
1678: PUSH
1679: LD_VAR 0 11
1683: PPUSH
1684: LD_VAR 0 10
1688: PPUSH
1689: CALL_OW 296
1693: PUSH
1694: LD_INT 13
1696: GREATER
1697: AND
1698: PUSH
1699: LD_VAR 0 1
1703: PPUSH
1704: LD_VAR 0 10
1708: PPUSH
1709: CALL_OW 296
1713: PUSH
1714: LD_INT 12
1716: GREATER
1717: OR
1718: IFFALSE 1722
// exit ;
1720: GO 2075
// missile := [ 1 ] ;
1722: LD_ADDR_VAR 0 14
1726: PUSH
1727: LD_INT 1
1729: PUSH
1730: EMPTY
1731: LIST
1732: ST_TO_ADDR
// if Researched ( side , tech_space ) then
1733: LD_VAR 0 9
1737: PPUSH
1738: LD_VAR 0 12
1742: PPUSH
1743: CALL_OW 325
1747: IFFALSE 1776
// missile := Replace ( missile , missile + 1 , 2 ) ;
1749: LD_ADDR_VAR 0 14
1753: PUSH
1754: LD_VAR 0 14
1758: PPUSH
1759: LD_VAR 0 14
1763: PUSH
1764: LD_INT 1
1766: PLUS
1767: PPUSH
1768: LD_INT 2
1770: PPUSH
1771: CALL_OW 1
1775: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
1776: LD_VAR 0 9
1780: PPUSH
1781: LD_VAR 0 13
1785: PPUSH
1786: CALL_OW 325
1790: PUSH
1791: LD_VAR 0 10
1795: PPUSH
1796: CALL_OW 255
1800: PPUSH
1801: LD_VAR 0 13
1805: PPUSH
1806: CALL_OW 325
1810: NOT
1811: AND
1812: IFFALSE 1841
// missile := Replace ( missile , missile + 1 , 3 ) ;
1814: LD_ADDR_VAR 0 14
1818: PUSH
1819: LD_VAR 0 14
1823: PPUSH
1824: LD_VAR 0 14
1828: PUSH
1829: LD_INT 1
1831: PLUS
1832: PPUSH
1833: LD_INT 3
1835: PPUSH
1836: CALL_OW 1
1840: ST_TO_ADDR
// if missile < 2 then
1841: LD_VAR 0 14
1845: PUSH
1846: LD_INT 2
1848: LESS
1849: IFFALSE 1853
// exit ;
1851: GO 2075
// x := GetX ( enemy ) ;
1853: LD_ADDR_VAR 0 4
1857: PUSH
1858: LD_VAR 0 10
1862: PPUSH
1863: CALL_OW 250
1867: ST_TO_ADDR
// y := GetY ( enemy ) ;
1868: LD_ADDR_VAR 0 5
1872: PUSH
1873: LD_VAR 0 10
1877: PPUSH
1878: CALL_OW 251
1882: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
1883: LD_ADDR_VAR 0 6
1887: PUSH
1888: LD_VAR 0 4
1892: PUSH
1893: LD_INT 1
1895: NEG
1896: PPUSH
1897: LD_INT 1
1899: PPUSH
1900: CALL_OW 12
1904: PLUS
1905: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
1906: LD_ADDR_VAR 0 7
1910: PUSH
1911: LD_VAR 0 5
1915: PUSH
1916: LD_INT 1
1918: NEG
1919: PPUSH
1920: LD_INT 1
1922: PPUSH
1923: CALL_OW 12
1927: PLUS
1928: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
1929: LD_VAR 0 6
1933: PPUSH
1934: LD_VAR 0 7
1938: PPUSH
1939: CALL_OW 488
1943: NOT
1944: IFFALSE 1966
// begin _x := x ;
1946: LD_ADDR_VAR 0 6
1950: PUSH
1951: LD_VAR 0 4
1955: ST_TO_ADDR
// _y := y ;
1956: LD_ADDR_VAR 0 7
1960: PUSH
1961: LD_VAR 0 5
1965: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
1966: LD_ADDR_VAR 0 3
1970: PUSH
1971: LD_INT 1
1973: PPUSH
1974: LD_VAR 0 14
1978: PPUSH
1979: CALL_OW 12
1983: ST_TO_ADDR
// case i of 1 :
1984: LD_VAR 0 3
1988: PUSH
1989: LD_INT 1
1991: DOUBLE
1992: EQUAL
1993: IFTRUE 1997
1995: GO 2014
1997: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
1998: LD_VAR 0 1
2002: PPUSH
2003: LD_VAR 0 10
2007: PPUSH
2008: CALL_OW 115
2012: GO 2075
2014: LD_INT 2
2016: DOUBLE
2017: EQUAL
2018: IFTRUE 2022
2020: GO 2044
2022: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
2023: LD_VAR 0 1
2027: PPUSH
2028: LD_VAR 0 6
2032: PPUSH
2033: LD_VAR 0 7
2037: PPUSH
2038: CALL_OW 153
2042: GO 2075
2044: LD_INT 3
2046: DOUBLE
2047: EQUAL
2048: IFTRUE 2052
2050: GO 2074
2052: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
2053: LD_VAR 0 1
2057: PPUSH
2058: LD_VAR 0 6
2062: PPUSH
2063: LD_VAR 0 7
2067: PPUSH
2068: CALL_OW 154
2072: GO 2075
2074: POP
// end ;
2075: LD_VAR 0 2
2079: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
2080: LD_INT 0
2082: PPUSH
2083: PPUSH
2084: PPUSH
2085: PPUSH
2086: PPUSH
2087: PPUSH
// if not unit or not building then
2088: LD_VAR 0 1
2092: NOT
2093: PUSH
2094: LD_VAR 0 2
2098: NOT
2099: OR
2100: IFFALSE 2104
// exit ;
2102: GO 2262
// x := GetX ( building ) ;
2104: LD_ADDR_VAR 0 5
2108: PUSH
2109: LD_VAR 0 2
2113: PPUSH
2114: CALL_OW 250
2118: ST_TO_ADDR
// y := GetY ( building ) ;
2119: LD_ADDR_VAR 0 6
2123: PUSH
2124: LD_VAR 0 2
2128: PPUSH
2129: CALL_OW 251
2133: ST_TO_ADDR
// for i = 0 to 5 do
2134: LD_ADDR_VAR 0 4
2138: PUSH
2139: DOUBLE
2140: LD_INT 0
2142: DEC
2143: ST_TO_ADDR
2144: LD_INT 5
2146: PUSH
2147: FOR_TO
2148: IFFALSE 2260
// begin _x := ShiftX ( x , i , 3 ) ;
2150: LD_ADDR_VAR 0 7
2154: PUSH
2155: LD_VAR 0 5
2159: PPUSH
2160: LD_VAR 0 4
2164: PPUSH
2165: LD_INT 3
2167: PPUSH
2168: CALL_OW 272
2172: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
2173: LD_ADDR_VAR 0 8
2177: PUSH
2178: LD_VAR 0 6
2182: PPUSH
2183: LD_VAR 0 4
2187: PPUSH
2188: LD_INT 3
2190: PPUSH
2191: CALL_OW 273
2195: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
2196: LD_VAR 0 7
2200: PPUSH
2201: LD_VAR 0 8
2205: PPUSH
2206: CALL_OW 488
2210: NOT
2211: IFFALSE 2215
// continue ;
2213: GO 2147
// if HexInfo ( _x , _y ) = 0 then
2215: LD_VAR 0 7
2219: PPUSH
2220: LD_VAR 0 8
2224: PPUSH
2225: CALL_OW 428
2229: PUSH
2230: LD_INT 0
2232: EQUAL
2233: IFFALSE 2258
// begin ComMoveXY ( unit , _x , _y ) ;
2235: LD_VAR 0 1
2239: PPUSH
2240: LD_VAR 0 7
2244: PPUSH
2245: LD_VAR 0 8
2249: PPUSH
2250: CALL_OW 111
// exit ;
2254: POP
2255: POP
2256: GO 2262
// end ; end ;
2258: GO 2147
2260: POP
2261: POP
// end ;
2262: LD_VAR 0 3
2266: RET
// export function ScanBase ( side , base_area ) ; begin
2267: LD_INT 0
2269: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
2270: LD_ADDR_VAR 0 3
2274: PUSH
2275: LD_VAR 0 2
2279: PPUSH
2280: LD_INT 81
2282: PUSH
2283: LD_VAR 0 1
2287: PUSH
2288: EMPTY
2289: LIST
2290: LIST
2291: PPUSH
2292: CALL_OW 70
2296: ST_TO_ADDR
// end ;
2297: LD_VAR 0 3
2301: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
2302: LD_INT 0
2304: PPUSH
2305: PPUSH
2306: PPUSH
2307: PPUSH
// result := false ;
2308: LD_ADDR_VAR 0 2
2312: PUSH
2313: LD_INT 0
2315: ST_TO_ADDR
// side := GetSide ( unit ) ;
2316: LD_ADDR_VAR 0 3
2320: PUSH
2321: LD_VAR 0 1
2325: PPUSH
2326: CALL_OW 255
2330: ST_TO_ADDR
// nat := GetNation ( unit ) ;
2331: LD_ADDR_VAR 0 4
2335: PUSH
2336: LD_VAR 0 1
2340: PPUSH
2341: CALL_OW 248
2345: ST_TO_ADDR
// case nat of 1 :
2346: LD_VAR 0 4
2350: PUSH
2351: LD_INT 1
2353: DOUBLE
2354: EQUAL
2355: IFTRUE 2359
2357: GO 2370
2359: POP
// tech := tech_lassight ; 2 :
2360: LD_ADDR_VAR 0 5
2364: PUSH
2365: LD_INT 12
2367: ST_TO_ADDR
2368: GO 2409
2370: LD_INT 2
2372: DOUBLE
2373: EQUAL
2374: IFTRUE 2378
2376: GO 2389
2378: POP
// tech := tech_mortar ; 3 :
2379: LD_ADDR_VAR 0 5
2383: PUSH
2384: LD_INT 41
2386: ST_TO_ADDR
2387: GO 2409
2389: LD_INT 3
2391: DOUBLE
2392: EQUAL
2393: IFTRUE 2397
2395: GO 2408
2397: POP
// tech := tech_bazooka ; end ;
2398: LD_ADDR_VAR 0 5
2402: PUSH
2403: LD_INT 44
2405: ST_TO_ADDR
2406: GO 2409
2408: POP
// if Researched ( side , tech ) then
2409: LD_VAR 0 3
2413: PPUSH
2414: LD_VAR 0 5
2418: PPUSH
2419: CALL_OW 325
2423: IFFALSE 2450
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
2425: LD_ADDR_VAR 0 2
2429: PUSH
2430: LD_INT 5
2432: PUSH
2433: LD_INT 8
2435: PUSH
2436: LD_INT 9
2438: PUSH
2439: EMPTY
2440: LIST
2441: LIST
2442: LIST
2443: PUSH
2444: LD_VAR 0 4
2448: ARRAY
2449: ST_TO_ADDR
// end ;
2450: LD_VAR 0 2
2454: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
2455: LD_INT 0
2457: PPUSH
2458: PPUSH
2459: PPUSH
// if not mines then
2460: LD_VAR 0 2
2464: NOT
2465: IFFALSE 2469
// exit ;
2467: GO 2613
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
2469: LD_ADDR_VAR 0 5
2473: PUSH
2474: LD_INT 81
2476: PUSH
2477: LD_VAR 0 1
2481: PUSH
2482: EMPTY
2483: LIST
2484: LIST
2485: PUSH
2486: LD_INT 3
2488: PUSH
2489: LD_INT 21
2491: PUSH
2492: LD_INT 3
2494: PUSH
2495: EMPTY
2496: LIST
2497: LIST
2498: PUSH
2499: EMPTY
2500: LIST
2501: LIST
2502: PUSH
2503: EMPTY
2504: LIST
2505: LIST
2506: PPUSH
2507: CALL_OW 69
2511: ST_TO_ADDR
// for i in mines do
2512: LD_ADDR_VAR 0 4
2516: PUSH
2517: LD_VAR 0 2
2521: PUSH
2522: FOR_IN
2523: IFFALSE 2611
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
2525: LD_VAR 0 4
2529: PUSH
2530: LD_INT 1
2532: ARRAY
2533: PPUSH
2534: LD_VAR 0 4
2538: PUSH
2539: LD_INT 2
2541: ARRAY
2542: PPUSH
2543: CALL_OW 458
2547: NOT
2548: IFFALSE 2552
// continue ;
2550: GO 2522
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
2552: LD_VAR 0 4
2556: PUSH
2557: LD_INT 1
2559: ARRAY
2560: PPUSH
2561: LD_VAR 0 4
2565: PUSH
2566: LD_INT 2
2568: ARRAY
2569: PPUSH
2570: CALL_OW 428
2574: PUSH
2575: LD_VAR 0 5
2579: IN
2580: IFFALSE 2609
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
2582: LD_VAR 0 4
2586: PUSH
2587: LD_INT 1
2589: ARRAY
2590: PPUSH
2591: LD_VAR 0 4
2595: PUSH
2596: LD_INT 2
2598: ARRAY
2599: PPUSH
2600: LD_VAR 0 1
2604: PPUSH
2605: CALL_OW 456
// end ;
2609: GO 2522
2611: POP
2612: POP
// end ;
2613: LD_VAR 0 3
2617: RET
// export function Count ( array ) ; begin
2618: LD_INT 0
2620: PPUSH
// result := array + 0 ;
2621: LD_ADDR_VAR 0 2
2625: PUSH
2626: LD_VAR 0 1
2630: PUSH
2631: LD_INT 0
2633: PLUS
2634: ST_TO_ADDR
// end ;
2635: LD_VAR 0 2
2639: RET
// export function IsEmpty ( building ) ; begin
2640: LD_INT 0
2642: PPUSH
// if not building then
2643: LD_VAR 0 1
2647: NOT
2648: IFFALSE 2652
// exit ;
2650: GO 2695
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
2652: LD_ADDR_VAR 0 2
2656: PUSH
2657: LD_VAR 0 1
2661: PUSH
2662: LD_INT 22
2664: PUSH
2665: LD_VAR 0 1
2669: PPUSH
2670: CALL_OW 255
2674: PUSH
2675: EMPTY
2676: LIST
2677: LIST
2678: PUSH
2679: LD_INT 58
2681: PUSH
2682: EMPTY
2683: LIST
2684: PUSH
2685: EMPTY
2686: LIST
2687: LIST
2688: PPUSH
2689: CALL_OW 69
2693: IN
2694: ST_TO_ADDR
// end ;
2695: LD_VAR 0 2
2699: RET
// export function IsNotFull ( building ) ; var places ; begin
2700: LD_INT 0
2702: PPUSH
2703: PPUSH
// if not building then
2704: LD_VAR 0 1
2708: NOT
2709: IFFALSE 2713
// exit ;
2711: GO 2741
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
2713: LD_ADDR_VAR 0 2
2717: PUSH
2718: LD_VAR 0 1
2722: PPUSH
2723: LD_INT 3
2725: PUSH
2726: LD_INT 62
2728: PUSH
2729: EMPTY
2730: LIST
2731: PUSH
2732: EMPTY
2733: LIST
2734: LIST
2735: PPUSH
2736: CALL_OW 72
2740: ST_TO_ADDR
// end ;
2741: LD_VAR 0 2
2745: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
2746: LD_INT 0
2748: PPUSH
2749: PPUSH
2750: PPUSH
2751: PPUSH
// tmp := [ ] ;
2752: LD_ADDR_VAR 0 3
2756: PUSH
2757: EMPTY
2758: ST_TO_ADDR
// list := [ ] ;
2759: LD_ADDR_VAR 0 5
2763: PUSH
2764: EMPTY
2765: ST_TO_ADDR
// for i = 16 to 25 do
2766: LD_ADDR_VAR 0 4
2770: PUSH
2771: DOUBLE
2772: LD_INT 16
2774: DEC
2775: ST_TO_ADDR
2776: LD_INT 25
2778: PUSH
2779: FOR_TO
2780: IFFALSE 2853
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
2782: LD_ADDR_VAR 0 3
2786: PUSH
2787: LD_VAR 0 3
2791: PUSH
2792: LD_INT 22
2794: PUSH
2795: LD_VAR 0 1
2799: PPUSH
2800: CALL_OW 255
2804: PUSH
2805: EMPTY
2806: LIST
2807: LIST
2808: PUSH
2809: LD_INT 91
2811: PUSH
2812: LD_VAR 0 1
2816: PUSH
2817: LD_INT 6
2819: PUSH
2820: EMPTY
2821: LIST
2822: LIST
2823: LIST
2824: PUSH
2825: LD_INT 30
2827: PUSH
2828: LD_VAR 0 4
2832: PUSH
2833: EMPTY
2834: LIST
2835: LIST
2836: PUSH
2837: EMPTY
2838: LIST
2839: LIST
2840: LIST
2841: PUSH
2842: EMPTY
2843: LIST
2844: PPUSH
2845: CALL_OW 69
2849: ADD
2850: ST_TO_ADDR
2851: GO 2779
2853: POP
2854: POP
// for i = 1 to tmp do
2855: LD_ADDR_VAR 0 4
2859: PUSH
2860: DOUBLE
2861: LD_INT 1
2863: DEC
2864: ST_TO_ADDR
2865: LD_VAR 0 3
2869: PUSH
2870: FOR_TO
2871: IFFALSE 2959
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
2873: LD_ADDR_VAR 0 5
2877: PUSH
2878: LD_VAR 0 5
2882: PUSH
2883: LD_VAR 0 3
2887: PUSH
2888: LD_VAR 0 4
2892: ARRAY
2893: PPUSH
2894: CALL_OW 266
2898: PUSH
2899: LD_VAR 0 3
2903: PUSH
2904: LD_VAR 0 4
2908: ARRAY
2909: PPUSH
2910: CALL_OW 250
2914: PUSH
2915: LD_VAR 0 3
2919: PUSH
2920: LD_VAR 0 4
2924: ARRAY
2925: PPUSH
2926: CALL_OW 251
2930: PUSH
2931: LD_VAR 0 3
2935: PUSH
2936: LD_VAR 0 4
2940: ARRAY
2941: PPUSH
2942: CALL_OW 254
2946: PUSH
2947: EMPTY
2948: LIST
2949: LIST
2950: LIST
2951: LIST
2952: PUSH
2953: EMPTY
2954: LIST
2955: ADD
2956: ST_TO_ADDR
2957: GO 2870
2959: POP
2960: POP
// result := list ;
2961: LD_ADDR_VAR 0 2
2965: PUSH
2966: LD_VAR 0 5
2970: ST_TO_ADDR
// end ;
2971: LD_VAR 0 2
2975: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
2976: LD_INT 0
2978: PPUSH
2979: PPUSH
2980: PPUSH
2981: PPUSH
2982: PPUSH
2983: PPUSH
2984: PPUSH
// if not factory then
2985: LD_VAR 0 1
2989: NOT
2990: IFFALSE 2994
// exit ;
2992: GO 3587
// if control = control_apeman then
2994: LD_VAR 0 4
2998: PUSH
2999: LD_INT 5
3001: EQUAL
3002: IFFALSE 3111
// begin tmp := UnitsInside ( factory ) ;
3004: LD_ADDR_VAR 0 8
3008: PUSH
3009: LD_VAR 0 1
3013: PPUSH
3014: CALL_OW 313
3018: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
3019: LD_VAR 0 8
3023: PPUSH
3024: LD_INT 25
3026: PUSH
3027: LD_INT 12
3029: PUSH
3030: EMPTY
3031: LIST
3032: LIST
3033: PPUSH
3034: CALL_OW 72
3038: NOT
3039: IFFALSE 3049
// control := control_manual ;
3041: LD_ADDR_VAR 0 4
3045: PUSH
3046: LD_INT 1
3048: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
3049: LD_ADDR_VAR 0 8
3053: PUSH
3054: LD_VAR 0 1
3058: PPUSH
3059: CALL 2746 0 1
3063: ST_TO_ADDR
// if tmp then
3064: LD_VAR 0 8
3068: IFFALSE 3111
// begin for i in tmp do
3070: LD_ADDR_VAR 0 7
3074: PUSH
3075: LD_VAR 0 8
3079: PUSH
3080: FOR_IN
3081: IFFALSE 3109
// if i [ 1 ] = b_ext_radio then
3083: LD_VAR 0 7
3087: PUSH
3088: LD_INT 1
3090: ARRAY
3091: PUSH
3092: LD_INT 22
3094: EQUAL
3095: IFFALSE 3107
// begin control := control_remote ;
3097: LD_ADDR_VAR 0 4
3101: PUSH
3102: LD_INT 2
3104: ST_TO_ADDR
// break ;
3105: GO 3109
// end ;
3107: GO 3080
3109: POP
3110: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
3111: LD_VAR 0 1
3115: PPUSH
3116: LD_VAR 0 2
3120: PPUSH
3121: LD_VAR 0 3
3125: PPUSH
3126: LD_VAR 0 4
3130: PPUSH
3131: LD_VAR 0 5
3135: PPUSH
3136: CALL_OW 448
3140: IFFALSE 3175
// begin result := [ chassis , engine , control , weapon ] ;
3142: LD_ADDR_VAR 0 6
3146: PUSH
3147: LD_VAR 0 2
3151: PUSH
3152: LD_VAR 0 3
3156: PUSH
3157: LD_VAR 0 4
3161: PUSH
3162: LD_VAR 0 5
3166: PUSH
3167: EMPTY
3168: LIST
3169: LIST
3170: LIST
3171: LIST
3172: ST_TO_ADDR
// exit ;
3173: GO 3587
// end ; _chassis := AvailableChassisList ( factory ) ;
3175: LD_ADDR_VAR 0 9
3179: PUSH
3180: LD_VAR 0 1
3184: PPUSH
3185: CALL_OW 475
3189: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
3190: LD_ADDR_VAR 0 11
3194: PUSH
3195: LD_VAR 0 1
3199: PPUSH
3200: CALL_OW 476
3204: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
3205: LD_ADDR_VAR 0 12
3209: PUSH
3210: LD_VAR 0 1
3214: PPUSH
3215: CALL_OW 477
3219: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
3220: LD_ADDR_VAR 0 10
3224: PUSH
3225: LD_VAR 0 1
3229: PPUSH
3230: CALL_OW 478
3234: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
3235: LD_VAR 0 9
3239: NOT
3240: PUSH
3241: LD_VAR 0 11
3245: NOT
3246: OR
3247: PUSH
3248: LD_VAR 0 12
3252: NOT
3253: OR
3254: PUSH
3255: LD_VAR 0 10
3259: NOT
3260: OR
3261: IFFALSE 3296
// begin result := [ chassis , engine , control , weapon ] ;
3263: LD_ADDR_VAR 0 6
3267: PUSH
3268: LD_VAR 0 2
3272: PUSH
3273: LD_VAR 0 3
3277: PUSH
3278: LD_VAR 0 4
3282: PUSH
3283: LD_VAR 0 5
3287: PUSH
3288: EMPTY
3289: LIST
3290: LIST
3291: LIST
3292: LIST
3293: ST_TO_ADDR
// exit ;
3294: GO 3587
// end ; if not chassis in _chassis then
3296: LD_VAR 0 2
3300: PUSH
3301: LD_VAR 0 9
3305: IN
3306: NOT
3307: IFFALSE 3333
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
3309: LD_ADDR_VAR 0 2
3313: PUSH
3314: LD_VAR 0 9
3318: PUSH
3319: LD_INT 1
3321: PPUSH
3322: LD_VAR 0 9
3326: PPUSH
3327: CALL_OW 12
3331: ARRAY
3332: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
3333: LD_VAR 0 2
3337: PPUSH
3338: LD_VAR 0 3
3342: PPUSH
3343: CALL 3592 0 2
3347: NOT
3348: IFFALSE 3407
// repeat engine := _engine [ 1 ] ;
3350: LD_ADDR_VAR 0 3
3354: PUSH
3355: LD_VAR 0 11
3359: PUSH
3360: LD_INT 1
3362: ARRAY
3363: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
3364: LD_ADDR_VAR 0 11
3368: PUSH
3369: LD_VAR 0 11
3373: PPUSH
3374: LD_INT 1
3376: PPUSH
3377: CALL_OW 3
3381: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
3382: LD_VAR 0 2
3386: PPUSH
3387: LD_VAR 0 3
3391: PPUSH
3392: CALL 3592 0 2
3396: PUSH
3397: LD_VAR 0 11
3401: PUSH
3402: EMPTY
3403: EQUAL
3404: OR
3405: IFFALSE 3350
// if not control in _control then
3407: LD_VAR 0 4
3411: PUSH
3412: LD_VAR 0 12
3416: IN
3417: NOT
3418: IFFALSE 3444
// control := _control [ rand ( 1 , _control ) ] ;
3420: LD_ADDR_VAR 0 4
3424: PUSH
3425: LD_VAR 0 12
3429: PUSH
3430: LD_INT 1
3432: PPUSH
3433: LD_VAR 0 12
3437: PPUSH
3438: CALL_OW 12
3442: ARRAY
3443: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
3444: LD_VAR 0 2
3448: PPUSH
3449: LD_VAR 0 5
3453: PPUSH
3454: CALL 3812 0 2
3458: NOT
3459: IFFALSE 3518
// repeat weapon := _weapon [ 1 ] ;
3461: LD_ADDR_VAR 0 5
3465: PUSH
3466: LD_VAR 0 10
3470: PUSH
3471: LD_INT 1
3473: ARRAY
3474: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
3475: LD_ADDR_VAR 0 10
3479: PUSH
3480: LD_VAR 0 10
3484: PPUSH
3485: LD_INT 1
3487: PPUSH
3488: CALL_OW 3
3492: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
3493: LD_VAR 0 2
3497: PPUSH
3498: LD_VAR 0 5
3502: PPUSH
3503: CALL 3812 0 2
3507: PUSH
3508: LD_VAR 0 10
3512: PUSH
3513: EMPTY
3514: EQUAL
3515: OR
3516: IFFALSE 3461
// result := [ ] ;
3518: LD_ADDR_VAR 0 6
3522: PUSH
3523: EMPTY
3524: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
3525: LD_VAR 0 1
3529: PPUSH
3530: LD_VAR 0 2
3534: PPUSH
3535: LD_VAR 0 3
3539: PPUSH
3540: LD_VAR 0 4
3544: PPUSH
3545: LD_VAR 0 5
3549: PPUSH
3550: CALL_OW 448
3554: IFFALSE 3587
// result := [ chassis , engine , control , weapon ] ;
3556: LD_ADDR_VAR 0 6
3560: PUSH
3561: LD_VAR 0 2
3565: PUSH
3566: LD_VAR 0 3
3570: PUSH
3571: LD_VAR 0 4
3575: PUSH
3576: LD_VAR 0 5
3580: PUSH
3581: EMPTY
3582: LIST
3583: LIST
3584: LIST
3585: LIST
3586: ST_TO_ADDR
// end ;
3587: LD_VAR 0 6
3591: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
3592: LD_INT 0
3594: PPUSH
// if not chassis or not engine then
3595: LD_VAR 0 1
3599: NOT
3600: PUSH
3601: LD_VAR 0 2
3605: NOT
3606: OR
3607: IFFALSE 3611
// exit ;
3609: GO 3807
// case engine of engine_solar :
3611: LD_VAR 0 2
3615: PUSH
3616: LD_INT 2
3618: DOUBLE
3619: EQUAL
3620: IFTRUE 3624
3622: GO 3662
3624: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
3625: LD_ADDR_VAR 0 3
3629: PUSH
3630: LD_INT 11
3632: PUSH
3633: LD_INT 12
3635: PUSH
3636: LD_INT 13
3638: PUSH
3639: LD_INT 14
3641: PUSH
3642: LD_INT 1
3644: PUSH
3645: LD_INT 2
3647: PUSH
3648: LD_INT 3
3650: PUSH
3651: EMPTY
3652: LIST
3653: LIST
3654: LIST
3655: LIST
3656: LIST
3657: LIST
3658: LIST
3659: ST_TO_ADDR
3660: GO 3791
3662: LD_INT 1
3664: DOUBLE
3665: EQUAL
3666: IFTRUE 3670
3668: GO 3732
3670: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
3671: LD_ADDR_VAR 0 3
3675: PUSH
3676: LD_INT 11
3678: PUSH
3679: LD_INT 12
3681: PUSH
3682: LD_INT 13
3684: PUSH
3685: LD_INT 14
3687: PUSH
3688: LD_INT 1
3690: PUSH
3691: LD_INT 2
3693: PUSH
3694: LD_INT 3
3696: PUSH
3697: LD_INT 4
3699: PUSH
3700: LD_INT 5
3702: PUSH
3703: LD_INT 21
3705: PUSH
3706: LD_INT 23
3708: PUSH
3709: LD_INT 22
3711: PUSH
3712: LD_INT 24
3714: PUSH
3715: EMPTY
3716: LIST
3717: LIST
3718: LIST
3719: LIST
3720: LIST
3721: LIST
3722: LIST
3723: LIST
3724: LIST
3725: LIST
3726: LIST
3727: LIST
3728: LIST
3729: ST_TO_ADDR
3730: GO 3791
3732: LD_INT 3
3734: DOUBLE
3735: EQUAL
3736: IFTRUE 3740
3738: GO 3790
3740: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
3741: LD_ADDR_VAR 0 3
3745: PUSH
3746: LD_INT 13
3748: PUSH
3749: LD_INT 14
3751: PUSH
3752: LD_INT 2
3754: PUSH
3755: LD_INT 3
3757: PUSH
3758: LD_INT 4
3760: PUSH
3761: LD_INT 5
3763: PUSH
3764: LD_INT 21
3766: PUSH
3767: LD_INT 22
3769: PUSH
3770: LD_INT 23
3772: PUSH
3773: LD_INT 24
3775: PUSH
3776: EMPTY
3777: LIST
3778: LIST
3779: LIST
3780: LIST
3781: LIST
3782: LIST
3783: LIST
3784: LIST
3785: LIST
3786: LIST
3787: ST_TO_ADDR
3788: GO 3791
3790: POP
// result := ( chassis in result ) ;
3791: LD_ADDR_VAR 0 3
3795: PUSH
3796: LD_VAR 0 1
3800: PUSH
3801: LD_VAR 0 3
3805: IN
3806: ST_TO_ADDR
// end ;
3807: LD_VAR 0 3
3811: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
3812: LD_INT 0
3814: PPUSH
// if not chassis or not weapon then
3815: LD_VAR 0 1
3819: NOT
3820: PUSH
3821: LD_VAR 0 2
3825: NOT
3826: OR
3827: IFFALSE 3831
// exit ;
3829: GO 4891
// case weapon of us_machine_gun :
3831: LD_VAR 0 2
3835: PUSH
3836: LD_INT 2
3838: DOUBLE
3839: EQUAL
3840: IFTRUE 3844
3842: GO 3874
3844: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
3845: LD_ADDR_VAR 0 3
3849: PUSH
3850: LD_INT 1
3852: PUSH
3853: LD_INT 2
3855: PUSH
3856: LD_INT 3
3858: PUSH
3859: LD_INT 4
3861: PUSH
3862: LD_INT 5
3864: PUSH
3865: EMPTY
3866: LIST
3867: LIST
3868: LIST
3869: LIST
3870: LIST
3871: ST_TO_ADDR
3872: GO 4875
3874: LD_INT 3
3876: DOUBLE
3877: EQUAL
3878: IFTRUE 3882
3880: GO 3912
3882: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
3883: LD_ADDR_VAR 0 3
3887: PUSH
3888: LD_INT 1
3890: PUSH
3891: LD_INT 2
3893: PUSH
3894: LD_INT 3
3896: PUSH
3897: LD_INT 4
3899: PUSH
3900: LD_INT 5
3902: PUSH
3903: EMPTY
3904: LIST
3905: LIST
3906: LIST
3907: LIST
3908: LIST
3909: ST_TO_ADDR
3910: GO 4875
3912: LD_INT 11
3914: DOUBLE
3915: EQUAL
3916: IFTRUE 3920
3918: GO 3950
3920: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
3921: LD_ADDR_VAR 0 3
3925: PUSH
3926: LD_INT 1
3928: PUSH
3929: LD_INT 2
3931: PUSH
3932: LD_INT 3
3934: PUSH
3935: LD_INT 4
3937: PUSH
3938: LD_INT 5
3940: PUSH
3941: EMPTY
3942: LIST
3943: LIST
3944: LIST
3945: LIST
3946: LIST
3947: ST_TO_ADDR
3948: GO 4875
3950: LD_INT 4
3952: DOUBLE
3953: EQUAL
3954: IFTRUE 3958
3956: GO 3984
3958: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
3959: LD_ADDR_VAR 0 3
3963: PUSH
3964: LD_INT 2
3966: PUSH
3967: LD_INT 3
3969: PUSH
3970: LD_INT 4
3972: PUSH
3973: LD_INT 5
3975: PUSH
3976: EMPTY
3977: LIST
3978: LIST
3979: LIST
3980: LIST
3981: ST_TO_ADDR
3982: GO 4875
3984: LD_INT 5
3986: DOUBLE
3987: EQUAL
3988: IFTRUE 3992
3990: GO 4018
3992: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
3993: LD_ADDR_VAR 0 3
3997: PUSH
3998: LD_INT 2
4000: PUSH
4001: LD_INT 3
4003: PUSH
4004: LD_INT 4
4006: PUSH
4007: LD_INT 5
4009: PUSH
4010: EMPTY
4011: LIST
4012: LIST
4013: LIST
4014: LIST
4015: ST_TO_ADDR
4016: GO 4875
4018: LD_INT 9
4020: DOUBLE
4021: EQUAL
4022: IFTRUE 4026
4024: GO 4052
4026: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
4027: LD_ADDR_VAR 0 3
4031: PUSH
4032: LD_INT 2
4034: PUSH
4035: LD_INT 3
4037: PUSH
4038: LD_INT 4
4040: PUSH
4041: LD_INT 5
4043: PUSH
4044: EMPTY
4045: LIST
4046: LIST
4047: LIST
4048: LIST
4049: ST_TO_ADDR
4050: GO 4875
4052: LD_INT 7
4054: DOUBLE
4055: EQUAL
4056: IFTRUE 4060
4058: GO 4086
4060: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
4061: LD_ADDR_VAR 0 3
4065: PUSH
4066: LD_INT 2
4068: PUSH
4069: LD_INT 3
4071: PUSH
4072: LD_INT 4
4074: PUSH
4075: LD_INT 5
4077: PUSH
4078: EMPTY
4079: LIST
4080: LIST
4081: LIST
4082: LIST
4083: ST_TO_ADDR
4084: GO 4875
4086: LD_INT 12
4088: DOUBLE
4089: EQUAL
4090: IFTRUE 4094
4092: GO 4120
4094: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
4095: LD_ADDR_VAR 0 3
4099: PUSH
4100: LD_INT 2
4102: PUSH
4103: LD_INT 3
4105: PUSH
4106: LD_INT 4
4108: PUSH
4109: LD_INT 5
4111: PUSH
4112: EMPTY
4113: LIST
4114: LIST
4115: LIST
4116: LIST
4117: ST_TO_ADDR
4118: GO 4875
4120: LD_INT 13
4122: DOUBLE
4123: EQUAL
4124: IFTRUE 4128
4126: GO 4154
4128: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
4129: LD_ADDR_VAR 0 3
4133: PUSH
4134: LD_INT 2
4136: PUSH
4137: LD_INT 3
4139: PUSH
4140: LD_INT 4
4142: PUSH
4143: LD_INT 5
4145: PUSH
4146: EMPTY
4147: LIST
4148: LIST
4149: LIST
4150: LIST
4151: ST_TO_ADDR
4152: GO 4875
4154: LD_INT 14
4156: DOUBLE
4157: EQUAL
4158: IFTRUE 4162
4160: GO 4180
4162: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
4163: LD_ADDR_VAR 0 3
4167: PUSH
4168: LD_INT 4
4170: PUSH
4171: LD_INT 5
4173: PUSH
4174: EMPTY
4175: LIST
4176: LIST
4177: ST_TO_ADDR
4178: GO 4875
4180: LD_INT 6
4182: DOUBLE
4183: EQUAL
4184: IFTRUE 4188
4186: GO 4206
4188: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
4189: LD_ADDR_VAR 0 3
4193: PUSH
4194: LD_INT 4
4196: PUSH
4197: LD_INT 5
4199: PUSH
4200: EMPTY
4201: LIST
4202: LIST
4203: ST_TO_ADDR
4204: GO 4875
4206: LD_INT 10
4208: DOUBLE
4209: EQUAL
4210: IFTRUE 4214
4212: GO 4232
4214: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
4215: LD_ADDR_VAR 0 3
4219: PUSH
4220: LD_INT 4
4222: PUSH
4223: LD_INT 5
4225: PUSH
4226: EMPTY
4227: LIST
4228: LIST
4229: ST_TO_ADDR
4230: GO 4875
4232: LD_INT 22
4234: DOUBLE
4235: EQUAL
4236: IFTRUE 4240
4238: GO 4266
4240: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
4241: LD_ADDR_VAR 0 3
4245: PUSH
4246: LD_INT 11
4248: PUSH
4249: LD_INT 12
4251: PUSH
4252: LD_INT 13
4254: PUSH
4255: LD_INT 14
4257: PUSH
4258: EMPTY
4259: LIST
4260: LIST
4261: LIST
4262: LIST
4263: ST_TO_ADDR
4264: GO 4875
4266: LD_INT 23
4268: DOUBLE
4269: EQUAL
4270: IFTRUE 4274
4272: GO 4300
4274: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
4275: LD_ADDR_VAR 0 3
4279: PUSH
4280: LD_INT 11
4282: PUSH
4283: LD_INT 12
4285: PUSH
4286: LD_INT 13
4288: PUSH
4289: LD_INT 14
4291: PUSH
4292: EMPTY
4293: LIST
4294: LIST
4295: LIST
4296: LIST
4297: ST_TO_ADDR
4298: GO 4875
4300: LD_INT 24
4302: DOUBLE
4303: EQUAL
4304: IFTRUE 4308
4306: GO 4334
4308: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
4309: LD_ADDR_VAR 0 3
4313: PUSH
4314: LD_INT 11
4316: PUSH
4317: LD_INT 12
4319: PUSH
4320: LD_INT 13
4322: PUSH
4323: LD_INT 14
4325: PUSH
4326: EMPTY
4327: LIST
4328: LIST
4329: LIST
4330: LIST
4331: ST_TO_ADDR
4332: GO 4875
4334: LD_INT 30
4336: DOUBLE
4337: EQUAL
4338: IFTRUE 4342
4340: GO 4368
4342: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
4343: LD_ADDR_VAR 0 3
4347: PUSH
4348: LD_INT 11
4350: PUSH
4351: LD_INT 12
4353: PUSH
4354: LD_INT 13
4356: PUSH
4357: LD_INT 14
4359: PUSH
4360: EMPTY
4361: LIST
4362: LIST
4363: LIST
4364: LIST
4365: ST_TO_ADDR
4366: GO 4875
4368: LD_INT 25
4370: DOUBLE
4371: EQUAL
4372: IFTRUE 4376
4374: GO 4394
4376: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
4377: LD_ADDR_VAR 0 3
4381: PUSH
4382: LD_INT 13
4384: PUSH
4385: LD_INT 14
4387: PUSH
4388: EMPTY
4389: LIST
4390: LIST
4391: ST_TO_ADDR
4392: GO 4875
4394: LD_INT 27
4396: DOUBLE
4397: EQUAL
4398: IFTRUE 4402
4400: GO 4420
4402: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
4403: LD_ADDR_VAR 0 3
4407: PUSH
4408: LD_INT 13
4410: PUSH
4411: LD_INT 14
4413: PUSH
4414: EMPTY
4415: LIST
4416: LIST
4417: ST_TO_ADDR
4418: GO 4875
4420: LD_INT 92
4422: DOUBLE
4423: EQUAL
4424: IFTRUE 4428
4426: GO 4454
4428: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
4429: LD_ADDR_VAR 0 3
4433: PUSH
4434: LD_INT 11
4436: PUSH
4437: LD_INT 12
4439: PUSH
4440: LD_INT 13
4442: PUSH
4443: LD_INT 14
4445: PUSH
4446: EMPTY
4447: LIST
4448: LIST
4449: LIST
4450: LIST
4451: ST_TO_ADDR
4452: GO 4875
4454: LD_INT 28
4456: DOUBLE
4457: EQUAL
4458: IFTRUE 4462
4460: GO 4480
4462: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
4463: LD_ADDR_VAR 0 3
4467: PUSH
4468: LD_INT 13
4470: PUSH
4471: LD_INT 14
4473: PUSH
4474: EMPTY
4475: LIST
4476: LIST
4477: ST_TO_ADDR
4478: GO 4875
4480: LD_INT 29
4482: DOUBLE
4483: EQUAL
4484: IFTRUE 4488
4486: GO 4506
4488: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
4489: LD_ADDR_VAR 0 3
4493: PUSH
4494: LD_INT 13
4496: PUSH
4497: LD_INT 14
4499: PUSH
4500: EMPTY
4501: LIST
4502: LIST
4503: ST_TO_ADDR
4504: GO 4875
4506: LD_INT 31
4508: DOUBLE
4509: EQUAL
4510: IFTRUE 4514
4512: GO 4532
4514: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
4515: LD_ADDR_VAR 0 3
4519: PUSH
4520: LD_INT 13
4522: PUSH
4523: LD_INT 14
4525: PUSH
4526: EMPTY
4527: LIST
4528: LIST
4529: ST_TO_ADDR
4530: GO 4875
4532: LD_INT 26
4534: DOUBLE
4535: EQUAL
4536: IFTRUE 4540
4538: GO 4558
4540: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
4541: LD_ADDR_VAR 0 3
4545: PUSH
4546: LD_INT 13
4548: PUSH
4549: LD_INT 14
4551: PUSH
4552: EMPTY
4553: LIST
4554: LIST
4555: ST_TO_ADDR
4556: GO 4875
4558: LD_INT 42
4560: DOUBLE
4561: EQUAL
4562: IFTRUE 4566
4564: GO 4592
4566: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
4567: LD_ADDR_VAR 0 3
4571: PUSH
4572: LD_INT 21
4574: PUSH
4575: LD_INT 22
4577: PUSH
4578: LD_INT 23
4580: PUSH
4581: LD_INT 24
4583: PUSH
4584: EMPTY
4585: LIST
4586: LIST
4587: LIST
4588: LIST
4589: ST_TO_ADDR
4590: GO 4875
4592: LD_INT 43
4594: DOUBLE
4595: EQUAL
4596: IFTRUE 4600
4598: GO 4626
4600: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
4601: LD_ADDR_VAR 0 3
4605: PUSH
4606: LD_INT 21
4608: PUSH
4609: LD_INT 22
4611: PUSH
4612: LD_INT 23
4614: PUSH
4615: LD_INT 24
4617: PUSH
4618: EMPTY
4619: LIST
4620: LIST
4621: LIST
4622: LIST
4623: ST_TO_ADDR
4624: GO 4875
4626: LD_INT 44
4628: DOUBLE
4629: EQUAL
4630: IFTRUE 4634
4632: GO 4660
4634: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
4635: LD_ADDR_VAR 0 3
4639: PUSH
4640: LD_INT 21
4642: PUSH
4643: LD_INT 22
4645: PUSH
4646: LD_INT 23
4648: PUSH
4649: LD_INT 24
4651: PUSH
4652: EMPTY
4653: LIST
4654: LIST
4655: LIST
4656: LIST
4657: ST_TO_ADDR
4658: GO 4875
4660: LD_INT 45
4662: DOUBLE
4663: EQUAL
4664: IFTRUE 4668
4666: GO 4694
4668: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
4669: LD_ADDR_VAR 0 3
4673: PUSH
4674: LD_INT 21
4676: PUSH
4677: LD_INT 22
4679: PUSH
4680: LD_INT 23
4682: PUSH
4683: LD_INT 24
4685: PUSH
4686: EMPTY
4687: LIST
4688: LIST
4689: LIST
4690: LIST
4691: ST_TO_ADDR
4692: GO 4875
4694: LD_INT 49
4696: DOUBLE
4697: EQUAL
4698: IFTRUE 4702
4700: GO 4728
4702: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
4703: LD_ADDR_VAR 0 3
4707: PUSH
4708: LD_INT 21
4710: PUSH
4711: LD_INT 22
4713: PUSH
4714: LD_INT 23
4716: PUSH
4717: LD_INT 24
4719: PUSH
4720: EMPTY
4721: LIST
4722: LIST
4723: LIST
4724: LIST
4725: ST_TO_ADDR
4726: GO 4875
4728: LD_INT 51
4730: DOUBLE
4731: EQUAL
4732: IFTRUE 4736
4734: GO 4762
4736: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
4737: LD_ADDR_VAR 0 3
4741: PUSH
4742: LD_INT 21
4744: PUSH
4745: LD_INT 22
4747: PUSH
4748: LD_INT 23
4750: PUSH
4751: LD_INT 24
4753: PUSH
4754: EMPTY
4755: LIST
4756: LIST
4757: LIST
4758: LIST
4759: ST_TO_ADDR
4760: GO 4875
4762: LD_INT 52
4764: DOUBLE
4765: EQUAL
4766: IFTRUE 4770
4768: GO 4796
4770: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
4771: LD_ADDR_VAR 0 3
4775: PUSH
4776: LD_INT 21
4778: PUSH
4779: LD_INT 22
4781: PUSH
4782: LD_INT 23
4784: PUSH
4785: LD_INT 24
4787: PUSH
4788: EMPTY
4789: LIST
4790: LIST
4791: LIST
4792: LIST
4793: ST_TO_ADDR
4794: GO 4875
4796: LD_INT 53
4798: DOUBLE
4799: EQUAL
4800: IFTRUE 4804
4802: GO 4822
4804: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
4805: LD_ADDR_VAR 0 3
4809: PUSH
4810: LD_INT 23
4812: PUSH
4813: LD_INT 24
4815: PUSH
4816: EMPTY
4817: LIST
4818: LIST
4819: ST_TO_ADDR
4820: GO 4875
4822: LD_INT 46
4824: DOUBLE
4825: EQUAL
4826: IFTRUE 4830
4828: GO 4848
4830: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
4831: LD_ADDR_VAR 0 3
4835: PUSH
4836: LD_INT 23
4838: PUSH
4839: LD_INT 24
4841: PUSH
4842: EMPTY
4843: LIST
4844: LIST
4845: ST_TO_ADDR
4846: GO 4875
4848: LD_INT 47
4850: DOUBLE
4851: EQUAL
4852: IFTRUE 4856
4854: GO 4874
4856: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
4857: LD_ADDR_VAR 0 3
4861: PUSH
4862: LD_INT 23
4864: PUSH
4865: LD_INT 24
4867: PUSH
4868: EMPTY
4869: LIST
4870: LIST
4871: ST_TO_ADDR
4872: GO 4875
4874: POP
// result := ( chassis in result ) ;
4875: LD_ADDR_VAR 0 3
4879: PUSH
4880: LD_VAR 0 1
4884: PUSH
4885: LD_VAR 0 3
4889: IN
4890: ST_TO_ADDR
// end ;
4891: LD_VAR 0 3
4895: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
4896: LD_INT 0
4898: PPUSH
4899: PPUSH
4900: PPUSH
4901: PPUSH
4902: PPUSH
4903: PPUSH
4904: PPUSH
// result := array ;
4905: LD_ADDR_VAR 0 5
4909: PUSH
4910: LD_VAR 0 1
4914: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
4915: LD_VAR 0 1
4919: NOT
4920: PUSH
4921: LD_VAR 0 2
4925: NOT
4926: OR
4927: PUSH
4928: LD_VAR 0 3
4932: NOT
4933: OR
4934: PUSH
4935: LD_VAR 0 2
4939: PUSH
4940: LD_VAR 0 1
4944: GREATER
4945: OR
4946: PUSH
4947: LD_VAR 0 3
4951: PUSH
4952: LD_VAR 0 1
4956: GREATER
4957: OR
4958: IFFALSE 4962
// exit ;
4960: GO 5258
// if direction then
4962: LD_VAR 0 4
4966: IFFALSE 5030
// begin d := 1 ;
4968: LD_ADDR_VAR 0 9
4972: PUSH
4973: LD_INT 1
4975: ST_TO_ADDR
// if i_from > i_to then
4976: LD_VAR 0 2
4980: PUSH
4981: LD_VAR 0 3
4985: GREATER
4986: IFFALSE 5012
// length := ( array - i_from ) + i_to else
4988: LD_ADDR_VAR 0 11
4992: PUSH
4993: LD_VAR 0 1
4997: PUSH
4998: LD_VAR 0 2
5002: MINUS
5003: PUSH
5004: LD_VAR 0 3
5008: PLUS
5009: ST_TO_ADDR
5010: GO 5028
// length := i_to - i_from ;
5012: LD_ADDR_VAR 0 11
5016: PUSH
5017: LD_VAR 0 3
5021: PUSH
5022: LD_VAR 0 2
5026: MINUS
5027: ST_TO_ADDR
// end else
5028: GO 5091
// begin d := - 1 ;
5030: LD_ADDR_VAR 0 9
5034: PUSH
5035: LD_INT 1
5037: NEG
5038: ST_TO_ADDR
// if i_from > i_to then
5039: LD_VAR 0 2
5043: PUSH
5044: LD_VAR 0 3
5048: GREATER
5049: IFFALSE 5069
// length := i_from - i_to else
5051: LD_ADDR_VAR 0 11
5055: PUSH
5056: LD_VAR 0 2
5060: PUSH
5061: LD_VAR 0 3
5065: MINUS
5066: ST_TO_ADDR
5067: GO 5091
// length := ( array - i_to ) + i_from ;
5069: LD_ADDR_VAR 0 11
5073: PUSH
5074: LD_VAR 0 1
5078: PUSH
5079: LD_VAR 0 3
5083: MINUS
5084: PUSH
5085: LD_VAR 0 2
5089: PLUS
5090: ST_TO_ADDR
// end ; if not length then
5091: LD_VAR 0 11
5095: NOT
5096: IFFALSE 5100
// exit ;
5098: GO 5258
// tmp := array ;
5100: LD_ADDR_VAR 0 10
5104: PUSH
5105: LD_VAR 0 1
5109: ST_TO_ADDR
// for i = 1 to length do
5110: LD_ADDR_VAR 0 6
5114: PUSH
5115: DOUBLE
5116: LD_INT 1
5118: DEC
5119: ST_TO_ADDR
5120: LD_VAR 0 11
5124: PUSH
5125: FOR_TO
5126: IFFALSE 5246
// begin for j = 1 to array do
5128: LD_ADDR_VAR 0 7
5132: PUSH
5133: DOUBLE
5134: LD_INT 1
5136: DEC
5137: ST_TO_ADDR
5138: LD_VAR 0 1
5142: PUSH
5143: FOR_TO
5144: IFFALSE 5232
// begin k := j + d ;
5146: LD_ADDR_VAR 0 8
5150: PUSH
5151: LD_VAR 0 7
5155: PUSH
5156: LD_VAR 0 9
5160: PLUS
5161: ST_TO_ADDR
// if k > array then
5162: LD_VAR 0 8
5166: PUSH
5167: LD_VAR 0 1
5171: GREATER
5172: IFFALSE 5182
// k := 1 ;
5174: LD_ADDR_VAR 0 8
5178: PUSH
5179: LD_INT 1
5181: ST_TO_ADDR
// if not k then
5182: LD_VAR 0 8
5186: NOT
5187: IFFALSE 5199
// k := array ;
5189: LD_ADDR_VAR 0 8
5193: PUSH
5194: LD_VAR 0 1
5198: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
5199: LD_ADDR_VAR 0 10
5203: PUSH
5204: LD_VAR 0 10
5208: PPUSH
5209: LD_VAR 0 8
5213: PPUSH
5214: LD_VAR 0 1
5218: PUSH
5219: LD_VAR 0 7
5223: ARRAY
5224: PPUSH
5225: CALL_OW 1
5229: ST_TO_ADDR
// end ;
5230: GO 5143
5232: POP
5233: POP
// array := tmp ;
5234: LD_ADDR_VAR 0 1
5238: PUSH
5239: LD_VAR 0 10
5243: ST_TO_ADDR
// end ;
5244: GO 5125
5246: POP
5247: POP
// result := array ;
5248: LD_ADDR_VAR 0 5
5252: PUSH
5253: LD_VAR 0 1
5257: ST_TO_ADDR
// end ;
5258: LD_VAR 0 5
5262: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
5263: LD_INT 0
5265: PPUSH
5266: PPUSH
// result := 0 ;
5267: LD_ADDR_VAR 0 3
5271: PUSH
5272: LD_INT 0
5274: ST_TO_ADDR
// if not array or not value in array then
5275: LD_VAR 0 1
5279: NOT
5280: PUSH
5281: LD_VAR 0 2
5285: PUSH
5286: LD_VAR 0 1
5290: IN
5291: NOT
5292: OR
5293: IFFALSE 5297
// exit ;
5295: GO 5351
// for i = 1 to array do
5297: LD_ADDR_VAR 0 4
5301: PUSH
5302: DOUBLE
5303: LD_INT 1
5305: DEC
5306: ST_TO_ADDR
5307: LD_VAR 0 1
5311: PUSH
5312: FOR_TO
5313: IFFALSE 5349
// if value = array [ i ] then
5315: LD_VAR 0 2
5319: PUSH
5320: LD_VAR 0 1
5324: PUSH
5325: LD_VAR 0 4
5329: ARRAY
5330: EQUAL
5331: IFFALSE 5347
// begin result := i ;
5333: LD_ADDR_VAR 0 3
5337: PUSH
5338: LD_VAR 0 4
5342: ST_TO_ADDR
// exit ;
5343: POP
5344: POP
5345: GO 5351
// end ;
5347: GO 5312
5349: POP
5350: POP
// end ;
5351: LD_VAR 0 3
5355: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
5356: LD_INT 0
5358: PPUSH
// vc_chassis := chassis ;
5359: LD_ADDR_OWVAR 37
5363: PUSH
5364: LD_VAR 0 1
5368: ST_TO_ADDR
// vc_engine := engine ;
5369: LD_ADDR_OWVAR 39
5373: PUSH
5374: LD_VAR 0 2
5378: ST_TO_ADDR
// vc_control := control ;
5379: LD_ADDR_OWVAR 38
5383: PUSH
5384: LD_VAR 0 3
5388: ST_TO_ADDR
// vc_weapon := weapon ;
5389: LD_ADDR_OWVAR 40
5393: PUSH
5394: LD_VAR 0 4
5398: ST_TO_ADDR
// vc_fuel_battery := fuel ;
5399: LD_ADDR_OWVAR 41
5403: PUSH
5404: LD_VAR 0 5
5408: ST_TO_ADDR
// end ;
5409: LD_VAR 0 6
5413: RET
// export function WantPlant ( unit ) ; var task ; begin
5414: LD_INT 0
5416: PPUSH
5417: PPUSH
// result := false ;
5418: LD_ADDR_VAR 0 2
5422: PUSH
5423: LD_INT 0
5425: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
5426: LD_ADDR_VAR 0 3
5430: PUSH
5431: LD_VAR 0 1
5435: PPUSH
5436: CALL_OW 437
5440: ST_TO_ADDR
// if task then
5441: LD_VAR 0 3
5445: IFFALSE 5473
// if task [ 1 ] [ 1 ] = p then
5447: LD_VAR 0 3
5451: PUSH
5452: LD_INT 1
5454: ARRAY
5455: PUSH
5456: LD_INT 1
5458: ARRAY
5459: PUSH
5460: LD_STRING p
5462: EQUAL
5463: IFFALSE 5473
// result := true ;
5465: LD_ADDR_VAR 0 2
5469: PUSH
5470: LD_INT 1
5472: ST_TO_ADDR
// end ;
5473: LD_VAR 0 2
5477: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
5478: LD_INT 0
5480: PPUSH
5481: PPUSH
5482: PPUSH
5483: PPUSH
// if pos < 1 then
5484: LD_VAR 0 2
5488: PUSH
5489: LD_INT 1
5491: LESS
5492: IFFALSE 5496
// exit ;
5494: GO 5799
// if pos = 1 then
5496: LD_VAR 0 2
5500: PUSH
5501: LD_INT 1
5503: EQUAL
5504: IFFALSE 5537
// result := Replace ( arr , pos [ 1 ] , value ) else
5506: LD_ADDR_VAR 0 4
5510: PUSH
5511: LD_VAR 0 1
5515: PPUSH
5516: LD_VAR 0 2
5520: PUSH
5521: LD_INT 1
5523: ARRAY
5524: PPUSH
5525: LD_VAR 0 3
5529: PPUSH
5530: CALL_OW 1
5534: ST_TO_ADDR
5535: GO 5799
// begin tmp := arr ;
5537: LD_ADDR_VAR 0 6
5541: PUSH
5542: LD_VAR 0 1
5546: ST_TO_ADDR
// s_arr := [ tmp ] ;
5547: LD_ADDR_VAR 0 7
5551: PUSH
5552: LD_VAR 0 6
5556: PUSH
5557: EMPTY
5558: LIST
5559: ST_TO_ADDR
// for i = 1 to pos - 1 do
5560: LD_ADDR_VAR 0 5
5564: PUSH
5565: DOUBLE
5566: LD_INT 1
5568: DEC
5569: ST_TO_ADDR
5570: LD_VAR 0 2
5574: PUSH
5575: LD_INT 1
5577: MINUS
5578: PUSH
5579: FOR_TO
5580: IFFALSE 5625
// begin tmp := tmp [ pos [ i ] ] ;
5582: LD_ADDR_VAR 0 6
5586: PUSH
5587: LD_VAR 0 6
5591: PUSH
5592: LD_VAR 0 2
5596: PUSH
5597: LD_VAR 0 5
5601: ARRAY
5602: ARRAY
5603: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
5604: LD_ADDR_VAR 0 7
5608: PUSH
5609: LD_VAR 0 7
5613: PUSH
5614: LD_VAR 0 6
5618: PUSH
5619: EMPTY
5620: LIST
5621: ADD
5622: ST_TO_ADDR
// end ;
5623: GO 5579
5625: POP
5626: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
5627: LD_ADDR_VAR 0 6
5631: PUSH
5632: LD_VAR 0 6
5636: PPUSH
5637: LD_VAR 0 2
5641: PUSH
5642: LD_VAR 0 2
5646: ARRAY
5647: PPUSH
5648: LD_VAR 0 3
5652: PPUSH
5653: CALL_OW 1
5657: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
5658: LD_ADDR_VAR 0 7
5662: PUSH
5663: LD_VAR 0 7
5667: PPUSH
5668: LD_VAR 0 7
5672: PPUSH
5673: LD_VAR 0 6
5677: PPUSH
5678: CALL_OW 1
5682: ST_TO_ADDR
// for i = s_arr downto 2 do
5683: LD_ADDR_VAR 0 5
5687: PUSH
5688: DOUBLE
5689: LD_VAR 0 7
5693: INC
5694: ST_TO_ADDR
5695: LD_INT 2
5697: PUSH
5698: FOR_DOWNTO
5699: IFFALSE 5783
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
5701: LD_ADDR_VAR 0 6
5705: PUSH
5706: LD_VAR 0 7
5710: PUSH
5711: LD_VAR 0 5
5715: PUSH
5716: LD_INT 1
5718: MINUS
5719: ARRAY
5720: PPUSH
5721: LD_VAR 0 2
5725: PUSH
5726: LD_VAR 0 5
5730: PUSH
5731: LD_INT 1
5733: MINUS
5734: ARRAY
5735: PPUSH
5736: LD_VAR 0 7
5740: PUSH
5741: LD_VAR 0 5
5745: ARRAY
5746: PPUSH
5747: CALL_OW 1
5751: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
5752: LD_ADDR_VAR 0 7
5756: PUSH
5757: LD_VAR 0 7
5761: PPUSH
5762: LD_VAR 0 5
5766: PUSH
5767: LD_INT 1
5769: MINUS
5770: PPUSH
5771: LD_VAR 0 6
5775: PPUSH
5776: CALL_OW 1
5780: ST_TO_ADDR
// end ;
5781: GO 5698
5783: POP
5784: POP
// result := s_arr [ 1 ] ;
5785: LD_ADDR_VAR 0 4
5789: PUSH
5790: LD_VAR 0 7
5794: PUSH
5795: LD_INT 1
5797: ARRAY
5798: ST_TO_ADDR
// end ; end ;
5799: LD_VAR 0 4
5803: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
5804: LD_INT 0
5806: PPUSH
5807: PPUSH
// if not list then
5808: LD_VAR 0 1
5812: NOT
5813: IFFALSE 5817
// exit ;
5815: GO 5908
// i := list [ pos1 ] ;
5817: LD_ADDR_VAR 0 5
5821: PUSH
5822: LD_VAR 0 1
5826: PUSH
5827: LD_VAR 0 2
5831: ARRAY
5832: ST_TO_ADDR
// if not i then
5833: LD_VAR 0 5
5837: NOT
5838: IFFALSE 5842
// exit ;
5840: GO 5908
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
5842: LD_ADDR_VAR 0 1
5846: PUSH
5847: LD_VAR 0 1
5851: PPUSH
5852: LD_VAR 0 2
5856: PPUSH
5857: LD_VAR 0 1
5861: PUSH
5862: LD_VAR 0 3
5866: ARRAY
5867: PPUSH
5868: CALL_OW 1
5872: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
5873: LD_ADDR_VAR 0 1
5877: PUSH
5878: LD_VAR 0 1
5882: PPUSH
5883: LD_VAR 0 3
5887: PPUSH
5888: LD_VAR 0 5
5892: PPUSH
5893: CALL_OW 1
5897: ST_TO_ADDR
// result := list ;
5898: LD_ADDR_VAR 0 4
5902: PUSH
5903: LD_VAR 0 1
5907: ST_TO_ADDR
// end ;
5908: LD_VAR 0 4
5912: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
5913: LD_INT 0
5915: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
5916: LD_ADDR_VAR 0 5
5920: PUSH
5921: LD_VAR 0 1
5925: PPUSH
5926: CALL_OW 250
5930: PPUSH
5931: LD_VAR 0 1
5935: PPUSH
5936: CALL_OW 251
5940: PPUSH
5941: LD_VAR 0 2
5945: PPUSH
5946: LD_VAR 0 3
5950: PPUSH
5951: LD_VAR 0 4
5955: PPUSH
5956: CALL 6334 0 5
5960: ST_TO_ADDR
// end ;
5961: LD_VAR 0 5
5965: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
5966: LD_INT 0
5968: PPUSH
5969: PPUSH
5970: PPUSH
5971: PPUSH
// if not list or not unit then
5972: LD_VAR 0 2
5976: NOT
5977: PUSH
5978: LD_VAR 0 1
5982: NOT
5983: OR
5984: IFFALSE 5988
// exit ;
5986: GO 6329
// result := [ ] ;
5988: LD_ADDR_VAR 0 5
5992: PUSH
5993: EMPTY
5994: ST_TO_ADDR
// for i in list do
5995: LD_ADDR_VAR 0 6
5999: PUSH
6000: LD_VAR 0 2
6004: PUSH
6005: FOR_IN
6006: IFFALSE 6224
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
6008: LD_ADDR_VAR 0 8
6012: PUSH
6013: LD_VAR 0 1
6017: PPUSH
6018: LD_VAR 0 6
6022: PUSH
6023: LD_INT 1
6025: ARRAY
6026: PPUSH
6027: LD_VAR 0 6
6031: PUSH
6032: LD_INT 2
6034: ARRAY
6035: PPUSH
6036: CALL_OW 297
6040: ST_TO_ADDR
// if not Count ( result ) then
6041: LD_VAR 0 5
6045: PPUSH
6046: CALL 2618 0 1
6050: NOT
6051: IFFALSE 6084
// begin result := Join ( result , [ i , tmp ] ) ;
6053: LD_ADDR_VAR 0 5
6057: PUSH
6058: LD_VAR 0 5
6062: PPUSH
6063: LD_VAR 0 6
6067: PUSH
6068: LD_VAR 0 8
6072: PUSH
6073: EMPTY
6074: LIST
6075: LIST
6076: PPUSH
6077: CALL 38218 0 2
6081: ST_TO_ADDR
// continue ;
6082: GO 6005
// end ; if result [ result ] [ 2 ] <= tmp then
6084: LD_VAR 0 5
6088: PUSH
6089: LD_VAR 0 5
6093: ARRAY
6094: PUSH
6095: LD_INT 2
6097: ARRAY
6098: PUSH
6099: LD_VAR 0 8
6103: LESSEQUAL
6104: IFFALSE 6137
// result := Join ( result , [ i , tmp ] ) else
6106: LD_ADDR_VAR 0 5
6110: PUSH
6111: LD_VAR 0 5
6115: PPUSH
6116: LD_VAR 0 6
6120: PUSH
6121: LD_VAR 0 8
6125: PUSH
6126: EMPTY
6127: LIST
6128: LIST
6129: PPUSH
6130: CALL 38218 0 2
6134: ST_TO_ADDR
6135: GO 6222
// begin for j := 1 to Count ( result ) do
6137: LD_ADDR_VAR 0 7
6141: PUSH
6142: DOUBLE
6143: LD_INT 1
6145: DEC
6146: ST_TO_ADDR
6147: LD_VAR 0 5
6151: PPUSH
6152: CALL 2618 0 1
6156: PUSH
6157: FOR_TO
6158: IFFALSE 6220
// begin if tmp < result [ j ] [ 2 ] then
6160: LD_VAR 0 8
6164: PUSH
6165: LD_VAR 0 5
6169: PUSH
6170: LD_VAR 0 7
6174: ARRAY
6175: PUSH
6176: LD_INT 2
6178: ARRAY
6179: LESS
6180: IFFALSE 6218
// begin result := Insert ( result , j , [ i , tmp ] ) ;
6182: LD_ADDR_VAR 0 5
6186: PUSH
6187: LD_VAR 0 5
6191: PPUSH
6192: LD_VAR 0 7
6196: PPUSH
6197: LD_VAR 0 6
6201: PUSH
6202: LD_VAR 0 8
6206: PUSH
6207: EMPTY
6208: LIST
6209: LIST
6210: PPUSH
6211: CALL_OW 2
6215: ST_TO_ADDR
// break ;
6216: GO 6220
// end ; end ;
6218: GO 6157
6220: POP
6221: POP
// end ; end ;
6222: GO 6005
6224: POP
6225: POP
// if result and not asc then
6226: LD_VAR 0 5
6230: PUSH
6231: LD_VAR 0 3
6235: NOT
6236: AND
6237: IFFALSE 6254
// result := ReverseArray ( result ) ;
6239: LD_ADDR_VAR 0 5
6243: PUSH
6244: LD_VAR 0 5
6248: PPUSH
6249: CALL 33494 0 1
6253: ST_TO_ADDR
// tmp := [ ] ;
6254: LD_ADDR_VAR 0 8
6258: PUSH
6259: EMPTY
6260: ST_TO_ADDR
// if mode then
6261: LD_VAR 0 4
6265: IFFALSE 6329
// begin for i := 1 to result do
6267: LD_ADDR_VAR 0 6
6271: PUSH
6272: DOUBLE
6273: LD_INT 1
6275: DEC
6276: ST_TO_ADDR
6277: LD_VAR 0 5
6281: PUSH
6282: FOR_TO
6283: IFFALSE 6317
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
6285: LD_ADDR_VAR 0 8
6289: PUSH
6290: LD_VAR 0 8
6294: PPUSH
6295: LD_VAR 0 5
6299: PUSH
6300: LD_VAR 0 6
6304: ARRAY
6305: PUSH
6306: LD_INT 1
6308: ARRAY
6309: PPUSH
6310: CALL 38218 0 2
6314: ST_TO_ADDR
6315: GO 6282
6317: POP
6318: POP
// result := tmp ;
6319: LD_ADDR_VAR 0 5
6323: PUSH
6324: LD_VAR 0 8
6328: ST_TO_ADDR
// end ; end ;
6329: LD_VAR 0 5
6333: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
6334: LD_INT 0
6336: PPUSH
6337: PPUSH
6338: PPUSH
6339: PPUSH
// if not list then
6340: LD_VAR 0 3
6344: NOT
6345: IFFALSE 6349
// exit ;
6347: GO 6737
// result := [ ] ;
6349: LD_ADDR_VAR 0 6
6353: PUSH
6354: EMPTY
6355: ST_TO_ADDR
// for i in list do
6356: LD_ADDR_VAR 0 7
6360: PUSH
6361: LD_VAR 0 3
6365: PUSH
6366: FOR_IN
6367: IFFALSE 6569
// begin tmp := GetDistUnitXY ( i , x , y ) ;
6369: LD_ADDR_VAR 0 9
6373: PUSH
6374: LD_VAR 0 7
6378: PPUSH
6379: LD_VAR 0 1
6383: PPUSH
6384: LD_VAR 0 2
6388: PPUSH
6389: CALL_OW 297
6393: ST_TO_ADDR
// if not result then
6394: LD_VAR 0 6
6398: NOT
6399: IFFALSE 6425
// result := [ [ i , tmp ] ] else
6401: LD_ADDR_VAR 0 6
6405: PUSH
6406: LD_VAR 0 7
6410: PUSH
6411: LD_VAR 0 9
6415: PUSH
6416: EMPTY
6417: LIST
6418: LIST
6419: PUSH
6420: EMPTY
6421: LIST
6422: ST_TO_ADDR
6423: GO 6567
// begin if result [ result ] [ 2 ] < tmp then
6425: LD_VAR 0 6
6429: PUSH
6430: LD_VAR 0 6
6434: ARRAY
6435: PUSH
6436: LD_INT 2
6438: ARRAY
6439: PUSH
6440: LD_VAR 0 9
6444: LESS
6445: IFFALSE 6487
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
6447: LD_ADDR_VAR 0 6
6451: PUSH
6452: LD_VAR 0 6
6456: PPUSH
6457: LD_VAR 0 6
6461: PUSH
6462: LD_INT 1
6464: PLUS
6465: PPUSH
6466: LD_VAR 0 7
6470: PUSH
6471: LD_VAR 0 9
6475: PUSH
6476: EMPTY
6477: LIST
6478: LIST
6479: PPUSH
6480: CALL_OW 2
6484: ST_TO_ADDR
6485: GO 6567
// for j = 1 to result do
6487: LD_ADDR_VAR 0 8
6491: PUSH
6492: DOUBLE
6493: LD_INT 1
6495: DEC
6496: ST_TO_ADDR
6497: LD_VAR 0 6
6501: PUSH
6502: FOR_TO
6503: IFFALSE 6565
// begin if tmp < result [ j ] [ 2 ] then
6505: LD_VAR 0 9
6509: PUSH
6510: LD_VAR 0 6
6514: PUSH
6515: LD_VAR 0 8
6519: ARRAY
6520: PUSH
6521: LD_INT 2
6523: ARRAY
6524: LESS
6525: IFFALSE 6563
// begin result := Insert ( result , j , [ i , tmp ] ) ;
6527: LD_ADDR_VAR 0 6
6531: PUSH
6532: LD_VAR 0 6
6536: PPUSH
6537: LD_VAR 0 8
6541: PPUSH
6542: LD_VAR 0 7
6546: PUSH
6547: LD_VAR 0 9
6551: PUSH
6552: EMPTY
6553: LIST
6554: LIST
6555: PPUSH
6556: CALL_OW 2
6560: ST_TO_ADDR
// break ;
6561: GO 6565
// end ; end ;
6563: GO 6502
6565: POP
6566: POP
// end ; end ;
6567: GO 6366
6569: POP
6570: POP
// if result and not asc then
6571: LD_VAR 0 6
6575: PUSH
6576: LD_VAR 0 4
6580: NOT
6581: AND
6582: IFFALSE 6657
// begin tmp := result ;
6584: LD_ADDR_VAR 0 9
6588: PUSH
6589: LD_VAR 0 6
6593: ST_TO_ADDR
// for i = tmp downto 1 do
6594: LD_ADDR_VAR 0 7
6598: PUSH
6599: DOUBLE
6600: LD_VAR 0 9
6604: INC
6605: ST_TO_ADDR
6606: LD_INT 1
6608: PUSH
6609: FOR_DOWNTO
6610: IFFALSE 6655
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
6612: LD_ADDR_VAR 0 6
6616: PUSH
6617: LD_VAR 0 6
6621: PPUSH
6622: LD_VAR 0 9
6626: PUSH
6627: LD_VAR 0 7
6631: MINUS
6632: PUSH
6633: LD_INT 1
6635: PLUS
6636: PPUSH
6637: LD_VAR 0 9
6641: PUSH
6642: LD_VAR 0 7
6646: ARRAY
6647: PPUSH
6648: CALL_OW 1
6652: ST_TO_ADDR
6653: GO 6609
6655: POP
6656: POP
// end ; tmp := [ ] ;
6657: LD_ADDR_VAR 0 9
6661: PUSH
6662: EMPTY
6663: ST_TO_ADDR
// if mode then
6664: LD_VAR 0 5
6668: IFFALSE 6737
// begin for i = 1 to result do
6670: LD_ADDR_VAR 0 7
6674: PUSH
6675: DOUBLE
6676: LD_INT 1
6678: DEC
6679: ST_TO_ADDR
6680: LD_VAR 0 6
6684: PUSH
6685: FOR_TO
6686: IFFALSE 6725
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
6688: LD_ADDR_VAR 0 9
6692: PUSH
6693: LD_VAR 0 9
6697: PPUSH
6698: LD_VAR 0 7
6702: PPUSH
6703: LD_VAR 0 6
6707: PUSH
6708: LD_VAR 0 7
6712: ARRAY
6713: PUSH
6714: LD_INT 1
6716: ARRAY
6717: PPUSH
6718: CALL_OW 1
6722: ST_TO_ADDR
6723: GO 6685
6725: POP
6726: POP
// result := tmp ;
6727: LD_ADDR_VAR 0 6
6731: PUSH
6732: LD_VAR 0 9
6736: ST_TO_ADDR
// end ; end ;
6737: LD_VAR 0 6
6741: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
6742: LD_INT 0
6744: PPUSH
6745: PPUSH
6746: PPUSH
6747: PPUSH
6748: PPUSH
6749: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
6750: LD_ADDR_VAR 0 5
6754: PUSH
6755: LD_INT 0
6757: PUSH
6758: LD_INT 0
6760: PUSH
6761: LD_INT 0
6763: PUSH
6764: EMPTY
6765: PUSH
6766: EMPTY
6767: LIST
6768: LIST
6769: LIST
6770: LIST
6771: ST_TO_ADDR
// if not x or not y then
6772: LD_VAR 0 2
6776: NOT
6777: PUSH
6778: LD_VAR 0 3
6782: NOT
6783: OR
6784: IFFALSE 6788
// exit ;
6786: GO 8438
// if not range then
6788: LD_VAR 0 4
6792: NOT
6793: IFFALSE 6803
// range := 10 ;
6795: LD_ADDR_VAR 0 4
6799: PUSH
6800: LD_INT 10
6802: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
6803: LD_ADDR_VAR 0 8
6807: PUSH
6808: LD_INT 81
6810: PUSH
6811: LD_VAR 0 1
6815: PUSH
6816: EMPTY
6817: LIST
6818: LIST
6819: PUSH
6820: LD_INT 92
6822: PUSH
6823: LD_VAR 0 2
6827: PUSH
6828: LD_VAR 0 3
6832: PUSH
6833: LD_VAR 0 4
6837: PUSH
6838: EMPTY
6839: LIST
6840: LIST
6841: LIST
6842: LIST
6843: PUSH
6844: LD_INT 3
6846: PUSH
6847: LD_INT 21
6849: PUSH
6850: LD_INT 3
6852: PUSH
6853: EMPTY
6854: LIST
6855: LIST
6856: PUSH
6857: EMPTY
6858: LIST
6859: LIST
6860: PUSH
6861: EMPTY
6862: LIST
6863: LIST
6864: LIST
6865: PPUSH
6866: CALL_OW 69
6870: ST_TO_ADDR
// if not tmp then
6871: LD_VAR 0 8
6875: NOT
6876: IFFALSE 6880
// exit ;
6878: GO 8438
// for i in tmp do
6880: LD_ADDR_VAR 0 6
6884: PUSH
6885: LD_VAR 0 8
6889: PUSH
6890: FOR_IN
6891: IFFALSE 8413
// begin points := [ 0 , 0 , 0 ] ;
6893: LD_ADDR_VAR 0 9
6897: PUSH
6898: LD_INT 0
6900: PUSH
6901: LD_INT 0
6903: PUSH
6904: LD_INT 0
6906: PUSH
6907: EMPTY
6908: LIST
6909: LIST
6910: LIST
6911: ST_TO_ADDR
// bpoints := 1 ;
6912: LD_ADDR_VAR 0 10
6916: PUSH
6917: LD_INT 1
6919: ST_TO_ADDR
// case GetType ( i ) of unit_human :
6920: LD_VAR 0 6
6924: PPUSH
6925: CALL_OW 247
6929: PUSH
6930: LD_INT 1
6932: DOUBLE
6933: EQUAL
6934: IFTRUE 6938
6936: GO 7516
6938: POP
// begin if GetClass ( i ) = 1 then
6939: LD_VAR 0 6
6943: PPUSH
6944: CALL_OW 257
6948: PUSH
6949: LD_INT 1
6951: EQUAL
6952: IFFALSE 6973
// points := [ 10 , 5 , 3 ] ;
6954: LD_ADDR_VAR 0 9
6958: PUSH
6959: LD_INT 10
6961: PUSH
6962: LD_INT 5
6964: PUSH
6965: LD_INT 3
6967: PUSH
6968: EMPTY
6969: LIST
6970: LIST
6971: LIST
6972: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
6973: LD_VAR 0 6
6977: PPUSH
6978: CALL_OW 257
6982: PUSH
6983: LD_INT 2
6985: PUSH
6986: LD_INT 3
6988: PUSH
6989: LD_INT 4
6991: PUSH
6992: EMPTY
6993: LIST
6994: LIST
6995: LIST
6996: IN
6997: IFFALSE 7018
// points := [ 3 , 2 , 1 ] ;
6999: LD_ADDR_VAR 0 9
7003: PUSH
7004: LD_INT 3
7006: PUSH
7007: LD_INT 2
7009: PUSH
7010: LD_INT 1
7012: PUSH
7013: EMPTY
7014: LIST
7015: LIST
7016: LIST
7017: ST_TO_ADDR
// if GetClass ( i ) = 5 then
7018: LD_VAR 0 6
7022: PPUSH
7023: CALL_OW 257
7027: PUSH
7028: LD_INT 5
7030: EQUAL
7031: IFFALSE 7052
// points := [ 130 , 5 , 2 ] ;
7033: LD_ADDR_VAR 0 9
7037: PUSH
7038: LD_INT 130
7040: PUSH
7041: LD_INT 5
7043: PUSH
7044: LD_INT 2
7046: PUSH
7047: EMPTY
7048: LIST
7049: LIST
7050: LIST
7051: ST_TO_ADDR
// if GetClass ( i ) = 8 then
7052: LD_VAR 0 6
7056: PPUSH
7057: CALL_OW 257
7061: PUSH
7062: LD_INT 8
7064: EQUAL
7065: IFFALSE 7086
// points := [ 35 , 35 , 30 ] ;
7067: LD_ADDR_VAR 0 9
7071: PUSH
7072: LD_INT 35
7074: PUSH
7075: LD_INT 35
7077: PUSH
7078: LD_INT 30
7080: PUSH
7081: EMPTY
7082: LIST
7083: LIST
7084: LIST
7085: ST_TO_ADDR
// if GetClass ( i ) = 9 then
7086: LD_VAR 0 6
7090: PPUSH
7091: CALL_OW 257
7095: PUSH
7096: LD_INT 9
7098: EQUAL
7099: IFFALSE 7120
// points := [ 20 , 55 , 40 ] ;
7101: LD_ADDR_VAR 0 9
7105: PUSH
7106: LD_INT 20
7108: PUSH
7109: LD_INT 55
7111: PUSH
7112: LD_INT 40
7114: PUSH
7115: EMPTY
7116: LIST
7117: LIST
7118: LIST
7119: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
7120: LD_VAR 0 6
7124: PPUSH
7125: CALL_OW 257
7129: PUSH
7130: LD_INT 12
7132: PUSH
7133: LD_INT 16
7135: PUSH
7136: EMPTY
7137: LIST
7138: LIST
7139: IN
7140: IFFALSE 7161
// points := [ 5 , 3 , 2 ] ;
7142: LD_ADDR_VAR 0 9
7146: PUSH
7147: LD_INT 5
7149: PUSH
7150: LD_INT 3
7152: PUSH
7153: LD_INT 2
7155: PUSH
7156: EMPTY
7157: LIST
7158: LIST
7159: LIST
7160: ST_TO_ADDR
// if GetClass ( i ) = 17 then
7161: LD_VAR 0 6
7165: PPUSH
7166: CALL_OW 257
7170: PUSH
7171: LD_INT 17
7173: EQUAL
7174: IFFALSE 7195
// points := [ 100 , 50 , 75 ] ;
7176: LD_ADDR_VAR 0 9
7180: PUSH
7181: LD_INT 100
7183: PUSH
7184: LD_INT 50
7186: PUSH
7187: LD_INT 75
7189: PUSH
7190: EMPTY
7191: LIST
7192: LIST
7193: LIST
7194: ST_TO_ADDR
// if GetClass ( i ) = 15 then
7195: LD_VAR 0 6
7199: PPUSH
7200: CALL_OW 257
7204: PUSH
7205: LD_INT 15
7207: EQUAL
7208: IFFALSE 7229
// points := [ 10 , 5 , 3 ] ;
7210: LD_ADDR_VAR 0 9
7214: PUSH
7215: LD_INT 10
7217: PUSH
7218: LD_INT 5
7220: PUSH
7221: LD_INT 3
7223: PUSH
7224: EMPTY
7225: LIST
7226: LIST
7227: LIST
7228: ST_TO_ADDR
// if GetClass ( i ) = 14 then
7229: LD_VAR 0 6
7233: PPUSH
7234: CALL_OW 257
7238: PUSH
7239: LD_INT 14
7241: EQUAL
7242: IFFALSE 7263
// points := [ 10 , 0 , 0 ] ;
7244: LD_ADDR_VAR 0 9
7248: PUSH
7249: LD_INT 10
7251: PUSH
7252: LD_INT 0
7254: PUSH
7255: LD_INT 0
7257: PUSH
7258: EMPTY
7259: LIST
7260: LIST
7261: LIST
7262: ST_TO_ADDR
// if GetClass ( i ) = 11 then
7263: LD_VAR 0 6
7267: PPUSH
7268: CALL_OW 257
7272: PUSH
7273: LD_INT 11
7275: EQUAL
7276: IFFALSE 7297
// points := [ 30 , 10 , 5 ] ;
7278: LD_ADDR_VAR 0 9
7282: PUSH
7283: LD_INT 30
7285: PUSH
7286: LD_INT 10
7288: PUSH
7289: LD_INT 5
7291: PUSH
7292: EMPTY
7293: LIST
7294: LIST
7295: LIST
7296: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
7297: LD_VAR 0 1
7301: PPUSH
7302: LD_INT 5
7304: PPUSH
7305: CALL_OW 321
7309: PUSH
7310: LD_INT 2
7312: EQUAL
7313: IFFALSE 7330
// bpoints := bpoints * 1.8 ;
7315: LD_ADDR_VAR 0 10
7319: PUSH
7320: LD_VAR 0 10
7324: PUSH
7325: LD_REAL  1.80000000000000E+0000
7328: MUL
7329: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
7330: LD_VAR 0 6
7334: PPUSH
7335: CALL_OW 257
7339: PUSH
7340: LD_INT 1
7342: PUSH
7343: LD_INT 2
7345: PUSH
7346: LD_INT 3
7348: PUSH
7349: LD_INT 4
7351: PUSH
7352: EMPTY
7353: LIST
7354: LIST
7355: LIST
7356: LIST
7357: IN
7358: PUSH
7359: LD_VAR 0 1
7363: PPUSH
7364: LD_INT 51
7366: PPUSH
7367: CALL_OW 321
7371: PUSH
7372: LD_INT 2
7374: EQUAL
7375: AND
7376: IFFALSE 7393
// bpoints := bpoints * 1.2 ;
7378: LD_ADDR_VAR 0 10
7382: PUSH
7383: LD_VAR 0 10
7387: PUSH
7388: LD_REAL  1.20000000000000E+0000
7391: MUL
7392: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
7393: LD_VAR 0 6
7397: PPUSH
7398: CALL_OW 257
7402: PUSH
7403: LD_INT 5
7405: PUSH
7406: LD_INT 7
7408: PUSH
7409: LD_INT 9
7411: PUSH
7412: EMPTY
7413: LIST
7414: LIST
7415: LIST
7416: IN
7417: PUSH
7418: LD_VAR 0 1
7422: PPUSH
7423: LD_INT 52
7425: PPUSH
7426: CALL_OW 321
7430: PUSH
7431: LD_INT 2
7433: EQUAL
7434: AND
7435: IFFALSE 7452
// bpoints := bpoints * 1.5 ;
7437: LD_ADDR_VAR 0 10
7441: PUSH
7442: LD_VAR 0 10
7446: PUSH
7447: LD_REAL  1.50000000000000E+0000
7450: MUL
7451: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
7452: LD_VAR 0 1
7456: PPUSH
7457: LD_INT 66
7459: PPUSH
7460: CALL_OW 321
7464: PUSH
7465: LD_INT 2
7467: EQUAL
7468: IFFALSE 7485
// bpoints := bpoints * 1.1 ;
7470: LD_ADDR_VAR 0 10
7474: PUSH
7475: LD_VAR 0 10
7479: PUSH
7480: LD_REAL  1.10000000000000E+0000
7483: MUL
7484: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
7485: LD_ADDR_VAR 0 10
7489: PUSH
7490: LD_VAR 0 10
7494: PUSH
7495: LD_VAR 0 6
7499: PPUSH
7500: LD_INT 1
7502: PPUSH
7503: CALL_OW 259
7507: PUSH
7508: LD_REAL  1.15000000000000E+0000
7511: MUL
7512: MUL
7513: ST_TO_ADDR
// end ; unit_vehicle :
7514: GO 8342
7516: LD_INT 2
7518: DOUBLE
7519: EQUAL
7520: IFTRUE 7524
7522: GO 8330
7524: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
7525: LD_VAR 0 6
7529: PPUSH
7530: CALL_OW 264
7534: PUSH
7535: LD_INT 2
7537: PUSH
7538: LD_INT 42
7540: PUSH
7541: LD_INT 24
7543: PUSH
7544: EMPTY
7545: LIST
7546: LIST
7547: LIST
7548: IN
7549: IFFALSE 7570
// points := [ 25 , 5 , 3 ] ;
7551: LD_ADDR_VAR 0 9
7555: PUSH
7556: LD_INT 25
7558: PUSH
7559: LD_INT 5
7561: PUSH
7562: LD_INT 3
7564: PUSH
7565: EMPTY
7566: LIST
7567: LIST
7568: LIST
7569: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
7570: LD_VAR 0 6
7574: PPUSH
7575: CALL_OW 264
7579: PUSH
7580: LD_INT 4
7582: PUSH
7583: LD_INT 43
7585: PUSH
7586: LD_INT 25
7588: PUSH
7589: EMPTY
7590: LIST
7591: LIST
7592: LIST
7593: IN
7594: IFFALSE 7615
// points := [ 40 , 15 , 5 ] ;
7596: LD_ADDR_VAR 0 9
7600: PUSH
7601: LD_INT 40
7603: PUSH
7604: LD_INT 15
7606: PUSH
7607: LD_INT 5
7609: PUSH
7610: EMPTY
7611: LIST
7612: LIST
7613: LIST
7614: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
7615: LD_VAR 0 6
7619: PPUSH
7620: CALL_OW 264
7624: PUSH
7625: LD_INT 3
7627: PUSH
7628: LD_INT 23
7630: PUSH
7631: EMPTY
7632: LIST
7633: LIST
7634: IN
7635: IFFALSE 7656
// points := [ 7 , 25 , 8 ] ;
7637: LD_ADDR_VAR 0 9
7641: PUSH
7642: LD_INT 7
7644: PUSH
7645: LD_INT 25
7647: PUSH
7648: LD_INT 8
7650: PUSH
7651: EMPTY
7652: LIST
7653: LIST
7654: LIST
7655: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
7656: LD_VAR 0 6
7660: PPUSH
7661: CALL_OW 264
7665: PUSH
7666: LD_INT 5
7668: PUSH
7669: LD_INT 27
7671: PUSH
7672: LD_INT 44
7674: PUSH
7675: EMPTY
7676: LIST
7677: LIST
7678: LIST
7679: IN
7680: IFFALSE 7701
// points := [ 14 , 50 , 16 ] ;
7682: LD_ADDR_VAR 0 9
7686: PUSH
7687: LD_INT 14
7689: PUSH
7690: LD_INT 50
7692: PUSH
7693: LD_INT 16
7695: PUSH
7696: EMPTY
7697: LIST
7698: LIST
7699: LIST
7700: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
7701: LD_VAR 0 6
7705: PPUSH
7706: CALL_OW 264
7710: PUSH
7711: LD_INT 6
7713: PUSH
7714: LD_INT 46
7716: PUSH
7717: EMPTY
7718: LIST
7719: LIST
7720: IN
7721: IFFALSE 7742
// points := [ 32 , 120 , 70 ] ;
7723: LD_ADDR_VAR 0 9
7727: PUSH
7728: LD_INT 32
7730: PUSH
7731: LD_INT 120
7733: PUSH
7734: LD_INT 70
7736: PUSH
7737: EMPTY
7738: LIST
7739: LIST
7740: LIST
7741: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
7742: LD_VAR 0 6
7746: PPUSH
7747: CALL_OW 264
7751: PUSH
7752: LD_INT 7
7754: PUSH
7755: LD_INT 28
7757: PUSH
7758: LD_INT 45
7760: PUSH
7761: LD_INT 92
7763: PUSH
7764: EMPTY
7765: LIST
7766: LIST
7767: LIST
7768: LIST
7769: IN
7770: IFFALSE 7791
// points := [ 35 , 20 , 45 ] ;
7772: LD_ADDR_VAR 0 9
7776: PUSH
7777: LD_INT 35
7779: PUSH
7780: LD_INT 20
7782: PUSH
7783: LD_INT 45
7785: PUSH
7786: EMPTY
7787: LIST
7788: LIST
7789: LIST
7790: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
7791: LD_VAR 0 6
7795: PPUSH
7796: CALL_OW 264
7800: PUSH
7801: LD_INT 47
7803: PUSH
7804: EMPTY
7805: LIST
7806: IN
7807: IFFALSE 7828
// points := [ 67 , 45 , 75 ] ;
7809: LD_ADDR_VAR 0 9
7813: PUSH
7814: LD_INT 67
7816: PUSH
7817: LD_INT 45
7819: PUSH
7820: LD_INT 75
7822: PUSH
7823: EMPTY
7824: LIST
7825: LIST
7826: LIST
7827: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
7828: LD_VAR 0 6
7832: PPUSH
7833: CALL_OW 264
7837: PUSH
7838: LD_INT 26
7840: PUSH
7841: EMPTY
7842: LIST
7843: IN
7844: IFFALSE 7865
// points := [ 120 , 30 , 80 ] ;
7846: LD_ADDR_VAR 0 9
7850: PUSH
7851: LD_INT 120
7853: PUSH
7854: LD_INT 30
7856: PUSH
7857: LD_INT 80
7859: PUSH
7860: EMPTY
7861: LIST
7862: LIST
7863: LIST
7864: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
7865: LD_VAR 0 6
7869: PPUSH
7870: CALL_OW 264
7874: PUSH
7875: LD_INT 22
7877: PUSH
7878: EMPTY
7879: LIST
7880: IN
7881: IFFALSE 7902
// points := [ 40 , 1 , 1 ] ;
7883: LD_ADDR_VAR 0 9
7887: PUSH
7888: LD_INT 40
7890: PUSH
7891: LD_INT 1
7893: PUSH
7894: LD_INT 1
7896: PUSH
7897: EMPTY
7898: LIST
7899: LIST
7900: LIST
7901: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
7902: LD_VAR 0 6
7906: PPUSH
7907: CALL_OW 264
7911: PUSH
7912: LD_INT 29
7914: PUSH
7915: EMPTY
7916: LIST
7917: IN
7918: IFFALSE 7939
// points := [ 70 , 200 , 400 ] ;
7920: LD_ADDR_VAR 0 9
7924: PUSH
7925: LD_INT 70
7927: PUSH
7928: LD_INT 200
7930: PUSH
7931: LD_INT 400
7933: PUSH
7934: EMPTY
7935: LIST
7936: LIST
7937: LIST
7938: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
7939: LD_VAR 0 6
7943: PPUSH
7944: CALL_OW 264
7948: PUSH
7949: LD_INT 14
7951: PUSH
7952: LD_INT 53
7954: PUSH
7955: EMPTY
7956: LIST
7957: LIST
7958: IN
7959: IFFALSE 7980
// points := [ 40 , 10 , 20 ] ;
7961: LD_ADDR_VAR 0 9
7965: PUSH
7966: LD_INT 40
7968: PUSH
7969: LD_INT 10
7971: PUSH
7972: LD_INT 20
7974: PUSH
7975: EMPTY
7976: LIST
7977: LIST
7978: LIST
7979: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
7980: LD_VAR 0 6
7984: PPUSH
7985: CALL_OW 264
7989: PUSH
7990: LD_INT 9
7992: PUSH
7993: EMPTY
7994: LIST
7995: IN
7996: IFFALSE 8017
// points := [ 5 , 70 , 20 ] ;
7998: LD_ADDR_VAR 0 9
8002: PUSH
8003: LD_INT 5
8005: PUSH
8006: LD_INT 70
8008: PUSH
8009: LD_INT 20
8011: PUSH
8012: EMPTY
8013: LIST
8014: LIST
8015: LIST
8016: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
8017: LD_VAR 0 6
8021: PPUSH
8022: CALL_OW 264
8026: PUSH
8027: LD_INT 10
8029: PUSH
8030: EMPTY
8031: LIST
8032: IN
8033: IFFALSE 8054
// points := [ 35 , 110 , 70 ] ;
8035: LD_ADDR_VAR 0 9
8039: PUSH
8040: LD_INT 35
8042: PUSH
8043: LD_INT 110
8045: PUSH
8046: LD_INT 70
8048: PUSH
8049: EMPTY
8050: LIST
8051: LIST
8052: LIST
8053: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
8054: LD_VAR 0 6
8058: PPUSH
8059: CALL_OW 265
8063: PUSH
8064: LD_INT 25
8066: EQUAL
8067: IFFALSE 8088
// points := [ 80 , 65 , 100 ] ;
8069: LD_ADDR_VAR 0 9
8073: PUSH
8074: LD_INT 80
8076: PUSH
8077: LD_INT 65
8079: PUSH
8080: LD_INT 100
8082: PUSH
8083: EMPTY
8084: LIST
8085: LIST
8086: LIST
8087: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
8088: LD_VAR 0 6
8092: PPUSH
8093: CALL_OW 263
8097: PUSH
8098: LD_INT 1
8100: EQUAL
8101: IFFALSE 8136
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
8103: LD_ADDR_VAR 0 10
8107: PUSH
8108: LD_VAR 0 10
8112: PUSH
8113: LD_VAR 0 6
8117: PPUSH
8118: CALL_OW 311
8122: PPUSH
8123: LD_INT 3
8125: PPUSH
8126: CALL_OW 259
8130: PUSH
8131: LD_INT 4
8133: MUL
8134: MUL
8135: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
8136: LD_VAR 0 6
8140: PPUSH
8141: CALL_OW 263
8145: PUSH
8146: LD_INT 2
8148: EQUAL
8149: IFFALSE 8200
// begin j := IsControledBy ( i ) ;
8151: LD_ADDR_VAR 0 7
8155: PUSH
8156: LD_VAR 0 6
8160: PPUSH
8161: CALL_OW 312
8165: ST_TO_ADDR
// if j then
8166: LD_VAR 0 7
8170: IFFALSE 8200
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
8172: LD_ADDR_VAR 0 10
8176: PUSH
8177: LD_VAR 0 10
8181: PUSH
8182: LD_VAR 0 7
8186: PPUSH
8187: LD_INT 3
8189: PPUSH
8190: CALL_OW 259
8194: PUSH
8195: LD_INT 3
8197: MUL
8198: MUL
8199: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
8200: LD_VAR 0 6
8204: PPUSH
8205: CALL_OW 264
8209: PUSH
8210: LD_INT 5
8212: PUSH
8213: LD_INT 6
8215: PUSH
8216: LD_INT 46
8218: PUSH
8219: LD_INT 44
8221: PUSH
8222: LD_INT 47
8224: PUSH
8225: LD_INT 45
8227: PUSH
8228: LD_INT 28
8230: PUSH
8231: LD_INT 7
8233: PUSH
8234: LD_INT 27
8236: PUSH
8237: LD_INT 29
8239: PUSH
8240: EMPTY
8241: LIST
8242: LIST
8243: LIST
8244: LIST
8245: LIST
8246: LIST
8247: LIST
8248: LIST
8249: LIST
8250: LIST
8251: IN
8252: PUSH
8253: LD_VAR 0 1
8257: PPUSH
8258: LD_INT 52
8260: PPUSH
8261: CALL_OW 321
8265: PUSH
8266: LD_INT 2
8268: EQUAL
8269: AND
8270: IFFALSE 8287
// bpoints := bpoints * 1.2 ;
8272: LD_ADDR_VAR 0 10
8276: PUSH
8277: LD_VAR 0 10
8281: PUSH
8282: LD_REAL  1.20000000000000E+0000
8285: MUL
8286: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
8287: LD_VAR 0 6
8291: PPUSH
8292: CALL_OW 264
8296: PUSH
8297: LD_INT 6
8299: PUSH
8300: LD_INT 46
8302: PUSH
8303: LD_INT 47
8305: PUSH
8306: EMPTY
8307: LIST
8308: LIST
8309: LIST
8310: IN
8311: IFFALSE 8328
// bpoints := bpoints * 1.2 ;
8313: LD_ADDR_VAR 0 10
8317: PUSH
8318: LD_VAR 0 10
8322: PUSH
8323: LD_REAL  1.20000000000000E+0000
8326: MUL
8327: ST_TO_ADDR
// end ; unit_building :
8328: GO 8342
8330: LD_INT 3
8332: DOUBLE
8333: EQUAL
8334: IFTRUE 8338
8336: GO 8341
8338: POP
// ; end ;
8339: GO 8342
8341: POP
// for j = 1 to 3 do
8342: LD_ADDR_VAR 0 7
8346: PUSH
8347: DOUBLE
8348: LD_INT 1
8350: DEC
8351: ST_TO_ADDR
8352: LD_INT 3
8354: PUSH
8355: FOR_TO
8356: IFFALSE 8409
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
8358: LD_ADDR_VAR 0 5
8362: PUSH
8363: LD_VAR 0 5
8367: PPUSH
8368: LD_VAR 0 7
8372: PPUSH
8373: LD_VAR 0 5
8377: PUSH
8378: LD_VAR 0 7
8382: ARRAY
8383: PUSH
8384: LD_VAR 0 9
8388: PUSH
8389: LD_VAR 0 7
8393: ARRAY
8394: PUSH
8395: LD_VAR 0 10
8399: MUL
8400: PLUS
8401: PPUSH
8402: CALL_OW 1
8406: ST_TO_ADDR
8407: GO 8355
8409: POP
8410: POP
// end ;
8411: GO 6890
8413: POP
8414: POP
// result := Replace ( result , 4 , tmp ) ;
8415: LD_ADDR_VAR 0 5
8419: PUSH
8420: LD_VAR 0 5
8424: PPUSH
8425: LD_INT 4
8427: PPUSH
8428: LD_VAR 0 8
8432: PPUSH
8433: CALL_OW 1
8437: ST_TO_ADDR
// end ;
8438: LD_VAR 0 5
8442: RET
// export function DangerAtRange ( unit , range ) ; begin
8443: LD_INT 0
8445: PPUSH
// if not unit then
8446: LD_VAR 0 1
8450: NOT
8451: IFFALSE 8455
// exit ;
8453: GO 8500
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
8455: LD_ADDR_VAR 0 3
8459: PUSH
8460: LD_VAR 0 1
8464: PPUSH
8465: CALL_OW 255
8469: PPUSH
8470: LD_VAR 0 1
8474: PPUSH
8475: CALL_OW 250
8479: PPUSH
8480: LD_VAR 0 1
8484: PPUSH
8485: CALL_OW 251
8489: PPUSH
8490: LD_VAR 0 2
8494: PPUSH
8495: CALL 6742 0 4
8499: ST_TO_ADDR
// end ;
8500: LD_VAR 0 3
8504: RET
// export function DangerInArea ( side , area ) ; begin
8505: LD_INT 0
8507: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
8508: LD_ADDR_VAR 0 3
8512: PUSH
8513: LD_VAR 0 2
8517: PPUSH
8518: LD_INT 81
8520: PUSH
8521: LD_VAR 0 1
8525: PUSH
8526: EMPTY
8527: LIST
8528: LIST
8529: PPUSH
8530: CALL_OW 70
8534: ST_TO_ADDR
// end ;
8535: LD_VAR 0 3
8539: RET
// export function IsExtension ( b ) ; begin
8540: LD_INT 0
8542: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
8543: LD_ADDR_VAR 0 2
8547: PUSH
8548: LD_VAR 0 1
8552: PUSH
8553: LD_INT 23
8555: PUSH
8556: LD_INT 20
8558: PUSH
8559: LD_INT 22
8561: PUSH
8562: LD_INT 17
8564: PUSH
8565: LD_INT 24
8567: PUSH
8568: LD_INT 21
8570: PUSH
8571: LD_INT 19
8573: PUSH
8574: LD_INT 16
8576: PUSH
8577: LD_INT 25
8579: PUSH
8580: LD_INT 18
8582: PUSH
8583: EMPTY
8584: LIST
8585: LIST
8586: LIST
8587: LIST
8588: LIST
8589: LIST
8590: LIST
8591: LIST
8592: LIST
8593: LIST
8594: IN
8595: ST_TO_ADDR
// end ;
8596: LD_VAR 0 2
8600: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
8601: LD_INT 0
8603: PPUSH
8604: PPUSH
8605: PPUSH
// result := [ ] ;
8606: LD_ADDR_VAR 0 4
8610: PUSH
8611: EMPTY
8612: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
8613: LD_ADDR_VAR 0 5
8617: PUSH
8618: LD_VAR 0 2
8622: PPUSH
8623: LD_INT 21
8625: PUSH
8626: LD_INT 3
8628: PUSH
8629: EMPTY
8630: LIST
8631: LIST
8632: PPUSH
8633: CALL_OW 70
8637: ST_TO_ADDR
// if not tmp then
8638: LD_VAR 0 5
8642: NOT
8643: IFFALSE 8647
// exit ;
8645: GO 8711
// if checkLink then
8647: LD_VAR 0 3
8651: IFFALSE 8701
// begin for i in tmp do
8653: LD_ADDR_VAR 0 6
8657: PUSH
8658: LD_VAR 0 5
8662: PUSH
8663: FOR_IN
8664: IFFALSE 8699
// if GetBase ( i ) <> base then
8666: LD_VAR 0 6
8670: PPUSH
8671: CALL_OW 274
8675: PUSH
8676: LD_VAR 0 1
8680: NONEQUAL
8681: IFFALSE 8697
// ComLinkToBase ( base , i ) ;
8683: LD_VAR 0 1
8687: PPUSH
8688: LD_VAR 0 6
8692: PPUSH
8693: CALL_OW 169
8697: GO 8663
8699: POP
8700: POP
// end ; result := tmp ;
8701: LD_ADDR_VAR 0 4
8705: PUSH
8706: LD_VAR 0 5
8710: ST_TO_ADDR
// end ;
8711: LD_VAR 0 4
8715: RET
// export function ComComplete ( units , b ) ; var i ; begin
8716: LD_INT 0
8718: PPUSH
8719: PPUSH
// if not units then
8720: LD_VAR 0 1
8724: NOT
8725: IFFALSE 8729
// exit ;
8727: GO 8819
// for i in units do
8729: LD_ADDR_VAR 0 4
8733: PUSH
8734: LD_VAR 0 1
8738: PUSH
8739: FOR_IN
8740: IFFALSE 8817
// if BuildingStatus ( b ) = bs_build then
8742: LD_VAR 0 2
8746: PPUSH
8747: CALL_OW 461
8751: PUSH
8752: LD_INT 1
8754: EQUAL
8755: IFFALSE 8815
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
8757: LD_VAR 0 4
8761: PPUSH
8762: LD_STRING h
8764: PUSH
8765: LD_VAR 0 2
8769: PPUSH
8770: CALL_OW 250
8774: PUSH
8775: LD_VAR 0 2
8779: PPUSH
8780: CALL_OW 251
8784: PUSH
8785: LD_VAR 0 2
8789: PUSH
8790: LD_INT 0
8792: PUSH
8793: LD_INT 0
8795: PUSH
8796: LD_INT 0
8798: PUSH
8799: EMPTY
8800: LIST
8801: LIST
8802: LIST
8803: LIST
8804: LIST
8805: LIST
8806: LIST
8807: PUSH
8808: EMPTY
8809: LIST
8810: PPUSH
8811: CALL_OW 446
8815: GO 8739
8817: POP
8818: POP
// end ;
8819: LD_VAR 0 3
8823: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
8824: LD_INT 0
8826: PPUSH
8827: PPUSH
8828: PPUSH
8829: PPUSH
8830: PPUSH
8831: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
8832: LD_VAR 0 1
8836: NOT
8837: PUSH
8838: LD_VAR 0 1
8842: PPUSH
8843: CALL_OW 263
8847: PUSH
8848: LD_INT 2
8850: NONEQUAL
8851: OR
8852: IFFALSE 8856
// exit ;
8854: GO 9172
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
8856: LD_ADDR_VAR 0 6
8860: PUSH
8861: LD_INT 22
8863: PUSH
8864: LD_VAR 0 1
8868: PPUSH
8869: CALL_OW 255
8873: PUSH
8874: EMPTY
8875: LIST
8876: LIST
8877: PUSH
8878: LD_INT 2
8880: PUSH
8881: LD_INT 30
8883: PUSH
8884: LD_INT 36
8886: PUSH
8887: EMPTY
8888: LIST
8889: LIST
8890: PUSH
8891: LD_INT 34
8893: PUSH
8894: LD_INT 31
8896: PUSH
8897: EMPTY
8898: LIST
8899: LIST
8900: PUSH
8901: EMPTY
8902: LIST
8903: LIST
8904: LIST
8905: PUSH
8906: EMPTY
8907: LIST
8908: LIST
8909: PPUSH
8910: CALL_OW 69
8914: ST_TO_ADDR
// if not tmp then
8915: LD_VAR 0 6
8919: NOT
8920: IFFALSE 8924
// exit ;
8922: GO 9172
// result := [ ] ;
8924: LD_ADDR_VAR 0 2
8928: PUSH
8929: EMPTY
8930: ST_TO_ADDR
// for i in tmp do
8931: LD_ADDR_VAR 0 3
8935: PUSH
8936: LD_VAR 0 6
8940: PUSH
8941: FOR_IN
8942: IFFALSE 9013
// begin t := UnitsInside ( i ) ;
8944: LD_ADDR_VAR 0 4
8948: PUSH
8949: LD_VAR 0 3
8953: PPUSH
8954: CALL_OW 313
8958: ST_TO_ADDR
// if t then
8959: LD_VAR 0 4
8963: IFFALSE 9011
// for j in t do
8965: LD_ADDR_VAR 0 7
8969: PUSH
8970: LD_VAR 0 4
8974: PUSH
8975: FOR_IN
8976: IFFALSE 9009
// result := Replace ( result , result + 1 , j ) ;
8978: LD_ADDR_VAR 0 2
8982: PUSH
8983: LD_VAR 0 2
8987: PPUSH
8988: LD_VAR 0 2
8992: PUSH
8993: LD_INT 1
8995: PLUS
8996: PPUSH
8997: LD_VAR 0 7
9001: PPUSH
9002: CALL_OW 1
9006: ST_TO_ADDR
9007: GO 8975
9009: POP
9010: POP
// end ;
9011: GO 8941
9013: POP
9014: POP
// if not result then
9015: LD_VAR 0 2
9019: NOT
9020: IFFALSE 9024
// exit ;
9022: GO 9172
// mech := result [ 1 ] ;
9024: LD_ADDR_VAR 0 5
9028: PUSH
9029: LD_VAR 0 2
9033: PUSH
9034: LD_INT 1
9036: ARRAY
9037: ST_TO_ADDR
// if result > 1 then
9038: LD_VAR 0 2
9042: PUSH
9043: LD_INT 1
9045: GREATER
9046: IFFALSE 9158
// begin for i = 2 to result do
9048: LD_ADDR_VAR 0 3
9052: PUSH
9053: DOUBLE
9054: LD_INT 2
9056: DEC
9057: ST_TO_ADDR
9058: LD_VAR 0 2
9062: PUSH
9063: FOR_TO
9064: IFFALSE 9156
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
9066: LD_ADDR_VAR 0 4
9070: PUSH
9071: LD_VAR 0 2
9075: PUSH
9076: LD_VAR 0 3
9080: ARRAY
9081: PPUSH
9082: LD_INT 3
9084: PPUSH
9085: CALL_OW 259
9089: PUSH
9090: LD_VAR 0 2
9094: PUSH
9095: LD_VAR 0 3
9099: ARRAY
9100: PPUSH
9101: CALL_OW 432
9105: MINUS
9106: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
9107: LD_VAR 0 4
9111: PUSH
9112: LD_VAR 0 5
9116: PPUSH
9117: LD_INT 3
9119: PPUSH
9120: CALL_OW 259
9124: PUSH
9125: LD_VAR 0 5
9129: PPUSH
9130: CALL_OW 432
9134: MINUS
9135: GREATEREQUAL
9136: IFFALSE 9154
// mech := result [ i ] ;
9138: LD_ADDR_VAR 0 5
9142: PUSH
9143: LD_VAR 0 2
9147: PUSH
9148: LD_VAR 0 3
9152: ARRAY
9153: ST_TO_ADDR
// end ;
9154: GO 9063
9156: POP
9157: POP
// end ; ComLinkTo ( vehicle , mech ) ;
9158: LD_VAR 0 1
9162: PPUSH
9163: LD_VAR 0 5
9167: PPUSH
9168: CALL_OW 135
// end ;
9172: LD_VAR 0 2
9176: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
9177: LD_INT 0
9179: PPUSH
9180: PPUSH
9181: PPUSH
9182: PPUSH
9183: PPUSH
9184: PPUSH
9185: PPUSH
9186: PPUSH
9187: PPUSH
9188: PPUSH
9189: PPUSH
9190: PPUSH
9191: PPUSH
// result := [ ] ;
9192: LD_ADDR_VAR 0 7
9196: PUSH
9197: EMPTY
9198: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
9199: LD_VAR 0 1
9203: PPUSH
9204: CALL_OW 266
9208: PUSH
9209: LD_INT 0
9211: PUSH
9212: LD_INT 1
9214: PUSH
9215: EMPTY
9216: LIST
9217: LIST
9218: IN
9219: NOT
9220: IFFALSE 9224
// exit ;
9222: GO 10858
// if name then
9224: LD_VAR 0 3
9228: IFFALSE 9244
// SetBName ( base_dep , name ) ;
9230: LD_VAR 0 1
9234: PPUSH
9235: LD_VAR 0 3
9239: PPUSH
9240: CALL_OW 500
// base := GetBase ( base_dep ) ;
9244: LD_ADDR_VAR 0 15
9248: PUSH
9249: LD_VAR 0 1
9253: PPUSH
9254: CALL_OW 274
9258: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
9259: LD_ADDR_VAR 0 16
9263: PUSH
9264: LD_VAR 0 1
9268: PPUSH
9269: CALL_OW 255
9273: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
9274: LD_ADDR_VAR 0 17
9278: PUSH
9279: LD_VAR 0 1
9283: PPUSH
9284: CALL_OW 248
9288: ST_TO_ADDR
// if sources then
9289: LD_VAR 0 5
9293: IFFALSE 9340
// for i = 1 to 3 do
9295: LD_ADDR_VAR 0 8
9299: PUSH
9300: DOUBLE
9301: LD_INT 1
9303: DEC
9304: ST_TO_ADDR
9305: LD_INT 3
9307: PUSH
9308: FOR_TO
9309: IFFALSE 9338
// AddResourceType ( base , i , sources [ i ] ) ;
9311: LD_VAR 0 15
9315: PPUSH
9316: LD_VAR 0 8
9320: PPUSH
9321: LD_VAR 0 5
9325: PUSH
9326: LD_VAR 0 8
9330: ARRAY
9331: PPUSH
9332: CALL_OW 276
9336: GO 9308
9338: POP
9339: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
9340: LD_ADDR_VAR 0 18
9344: PUSH
9345: LD_VAR 0 15
9349: PPUSH
9350: LD_VAR 0 2
9354: PPUSH
9355: LD_INT 1
9357: PPUSH
9358: CALL 8601 0 3
9362: ST_TO_ADDR
// InitHc ;
9363: CALL_OW 19
// InitUc ;
9367: CALL_OW 18
// uc_side := side ;
9371: LD_ADDR_OWVAR 20
9375: PUSH
9376: LD_VAR 0 16
9380: ST_TO_ADDR
// uc_nation := nation ;
9381: LD_ADDR_OWVAR 21
9385: PUSH
9386: LD_VAR 0 17
9390: ST_TO_ADDR
// if buildings then
9391: LD_VAR 0 18
9395: IFFALSE 10717
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
9397: LD_ADDR_VAR 0 19
9401: PUSH
9402: LD_VAR 0 18
9406: PPUSH
9407: LD_INT 2
9409: PUSH
9410: LD_INT 30
9412: PUSH
9413: LD_INT 29
9415: PUSH
9416: EMPTY
9417: LIST
9418: LIST
9419: PUSH
9420: LD_INT 30
9422: PUSH
9423: LD_INT 30
9425: PUSH
9426: EMPTY
9427: LIST
9428: LIST
9429: PUSH
9430: EMPTY
9431: LIST
9432: LIST
9433: LIST
9434: PPUSH
9435: CALL_OW 72
9439: ST_TO_ADDR
// if tmp then
9440: LD_VAR 0 19
9444: IFFALSE 9492
// for i in tmp do
9446: LD_ADDR_VAR 0 8
9450: PUSH
9451: LD_VAR 0 19
9455: PUSH
9456: FOR_IN
9457: IFFALSE 9490
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
9459: LD_VAR 0 8
9463: PPUSH
9464: CALL_OW 250
9468: PPUSH
9469: LD_VAR 0 8
9473: PPUSH
9474: CALL_OW 251
9478: PPUSH
9479: LD_VAR 0 16
9483: PPUSH
9484: CALL_OW 441
9488: GO 9456
9490: POP
9491: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
9492: LD_VAR 0 18
9496: PPUSH
9497: LD_INT 2
9499: PUSH
9500: LD_INT 30
9502: PUSH
9503: LD_INT 32
9505: PUSH
9506: EMPTY
9507: LIST
9508: LIST
9509: PUSH
9510: LD_INT 30
9512: PUSH
9513: LD_INT 33
9515: PUSH
9516: EMPTY
9517: LIST
9518: LIST
9519: PUSH
9520: EMPTY
9521: LIST
9522: LIST
9523: LIST
9524: PPUSH
9525: CALL_OW 72
9529: IFFALSE 9617
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
9531: LD_ADDR_VAR 0 8
9535: PUSH
9536: LD_VAR 0 18
9540: PPUSH
9541: LD_INT 2
9543: PUSH
9544: LD_INT 30
9546: PUSH
9547: LD_INT 32
9549: PUSH
9550: EMPTY
9551: LIST
9552: LIST
9553: PUSH
9554: LD_INT 30
9556: PUSH
9557: LD_INT 33
9559: PUSH
9560: EMPTY
9561: LIST
9562: LIST
9563: PUSH
9564: EMPTY
9565: LIST
9566: LIST
9567: LIST
9568: PPUSH
9569: CALL_OW 72
9573: PUSH
9574: FOR_IN
9575: IFFALSE 9615
// begin if not GetBWeapon ( i ) then
9577: LD_VAR 0 8
9581: PPUSH
9582: CALL_OW 269
9586: NOT
9587: IFFALSE 9613
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
9589: LD_VAR 0 8
9593: PPUSH
9594: LD_VAR 0 8
9598: PPUSH
9599: LD_VAR 0 2
9603: PPUSH
9604: CALL 10863 0 2
9608: PPUSH
9609: CALL_OW 431
// end ;
9613: GO 9574
9615: POP
9616: POP
// end ; for i = 1 to personel do
9617: LD_ADDR_VAR 0 8
9621: PUSH
9622: DOUBLE
9623: LD_INT 1
9625: DEC
9626: ST_TO_ADDR
9627: LD_VAR 0 6
9631: PUSH
9632: FOR_TO
9633: IFFALSE 10697
// begin if i > 4 then
9635: LD_VAR 0 8
9639: PUSH
9640: LD_INT 4
9642: GREATER
9643: IFFALSE 9647
// break ;
9645: GO 10697
// case i of 1 :
9647: LD_VAR 0 8
9651: PUSH
9652: LD_INT 1
9654: DOUBLE
9655: EQUAL
9656: IFTRUE 9660
9658: GO 9740
9660: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
9661: LD_ADDR_VAR 0 12
9665: PUSH
9666: LD_VAR 0 18
9670: PPUSH
9671: LD_INT 22
9673: PUSH
9674: LD_VAR 0 16
9678: PUSH
9679: EMPTY
9680: LIST
9681: LIST
9682: PUSH
9683: LD_INT 58
9685: PUSH
9686: EMPTY
9687: LIST
9688: PUSH
9689: LD_INT 2
9691: PUSH
9692: LD_INT 30
9694: PUSH
9695: LD_INT 32
9697: PUSH
9698: EMPTY
9699: LIST
9700: LIST
9701: PUSH
9702: LD_INT 30
9704: PUSH
9705: LD_INT 4
9707: PUSH
9708: EMPTY
9709: LIST
9710: LIST
9711: PUSH
9712: LD_INT 30
9714: PUSH
9715: LD_INT 5
9717: PUSH
9718: EMPTY
9719: LIST
9720: LIST
9721: PUSH
9722: EMPTY
9723: LIST
9724: LIST
9725: LIST
9726: LIST
9727: PUSH
9728: EMPTY
9729: LIST
9730: LIST
9731: LIST
9732: PPUSH
9733: CALL_OW 72
9737: ST_TO_ADDR
9738: GO 9962
9740: LD_INT 2
9742: DOUBLE
9743: EQUAL
9744: IFTRUE 9748
9746: GO 9810
9748: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
9749: LD_ADDR_VAR 0 12
9753: PUSH
9754: LD_VAR 0 18
9758: PPUSH
9759: LD_INT 22
9761: PUSH
9762: LD_VAR 0 16
9766: PUSH
9767: EMPTY
9768: LIST
9769: LIST
9770: PUSH
9771: LD_INT 2
9773: PUSH
9774: LD_INT 30
9776: PUSH
9777: LD_INT 0
9779: PUSH
9780: EMPTY
9781: LIST
9782: LIST
9783: PUSH
9784: LD_INT 30
9786: PUSH
9787: LD_INT 1
9789: PUSH
9790: EMPTY
9791: LIST
9792: LIST
9793: PUSH
9794: EMPTY
9795: LIST
9796: LIST
9797: LIST
9798: PUSH
9799: EMPTY
9800: LIST
9801: LIST
9802: PPUSH
9803: CALL_OW 72
9807: ST_TO_ADDR
9808: GO 9962
9810: LD_INT 3
9812: DOUBLE
9813: EQUAL
9814: IFTRUE 9818
9816: GO 9880
9818: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
9819: LD_ADDR_VAR 0 12
9823: PUSH
9824: LD_VAR 0 18
9828: PPUSH
9829: LD_INT 22
9831: PUSH
9832: LD_VAR 0 16
9836: PUSH
9837: EMPTY
9838: LIST
9839: LIST
9840: PUSH
9841: LD_INT 2
9843: PUSH
9844: LD_INT 30
9846: PUSH
9847: LD_INT 2
9849: PUSH
9850: EMPTY
9851: LIST
9852: LIST
9853: PUSH
9854: LD_INT 30
9856: PUSH
9857: LD_INT 3
9859: PUSH
9860: EMPTY
9861: LIST
9862: LIST
9863: PUSH
9864: EMPTY
9865: LIST
9866: LIST
9867: LIST
9868: PUSH
9869: EMPTY
9870: LIST
9871: LIST
9872: PPUSH
9873: CALL_OW 72
9877: ST_TO_ADDR
9878: GO 9962
9880: LD_INT 4
9882: DOUBLE
9883: EQUAL
9884: IFTRUE 9888
9886: GO 9961
9888: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
9889: LD_ADDR_VAR 0 12
9893: PUSH
9894: LD_VAR 0 18
9898: PPUSH
9899: LD_INT 22
9901: PUSH
9902: LD_VAR 0 16
9906: PUSH
9907: EMPTY
9908: LIST
9909: LIST
9910: PUSH
9911: LD_INT 2
9913: PUSH
9914: LD_INT 30
9916: PUSH
9917: LD_INT 6
9919: PUSH
9920: EMPTY
9921: LIST
9922: LIST
9923: PUSH
9924: LD_INT 30
9926: PUSH
9927: LD_INT 7
9929: PUSH
9930: EMPTY
9931: LIST
9932: LIST
9933: PUSH
9934: LD_INT 30
9936: PUSH
9937: LD_INT 8
9939: PUSH
9940: EMPTY
9941: LIST
9942: LIST
9943: PUSH
9944: EMPTY
9945: LIST
9946: LIST
9947: LIST
9948: LIST
9949: PUSH
9950: EMPTY
9951: LIST
9952: LIST
9953: PPUSH
9954: CALL_OW 72
9958: ST_TO_ADDR
9959: GO 9962
9961: POP
// if i = 1 then
9962: LD_VAR 0 8
9966: PUSH
9967: LD_INT 1
9969: EQUAL
9970: IFFALSE 10081
// begin tmp := [ ] ;
9972: LD_ADDR_VAR 0 19
9976: PUSH
9977: EMPTY
9978: ST_TO_ADDR
// for j in f do
9979: LD_ADDR_VAR 0 9
9983: PUSH
9984: LD_VAR 0 12
9988: PUSH
9989: FOR_IN
9990: IFFALSE 10063
// if GetBType ( j ) = b_bunker then
9992: LD_VAR 0 9
9996: PPUSH
9997: CALL_OW 266
10001: PUSH
10002: LD_INT 32
10004: EQUAL
10005: IFFALSE 10032
// tmp := Insert ( tmp , 1 , j ) else
10007: LD_ADDR_VAR 0 19
10011: PUSH
10012: LD_VAR 0 19
10016: PPUSH
10017: LD_INT 1
10019: PPUSH
10020: LD_VAR 0 9
10024: PPUSH
10025: CALL_OW 2
10029: ST_TO_ADDR
10030: GO 10061
// tmp := Insert ( tmp , tmp + 1 , j ) ;
10032: LD_ADDR_VAR 0 19
10036: PUSH
10037: LD_VAR 0 19
10041: PPUSH
10042: LD_VAR 0 19
10046: PUSH
10047: LD_INT 1
10049: PLUS
10050: PPUSH
10051: LD_VAR 0 9
10055: PPUSH
10056: CALL_OW 2
10060: ST_TO_ADDR
10061: GO 9989
10063: POP
10064: POP
// if tmp then
10065: LD_VAR 0 19
10069: IFFALSE 10081
// f := tmp ;
10071: LD_ADDR_VAR 0 12
10075: PUSH
10076: LD_VAR 0 19
10080: ST_TO_ADDR
// end ; x := personel [ i ] ;
10081: LD_ADDR_VAR 0 13
10085: PUSH
10086: LD_VAR 0 6
10090: PUSH
10091: LD_VAR 0 8
10095: ARRAY
10096: ST_TO_ADDR
// if x = - 1 then
10097: LD_VAR 0 13
10101: PUSH
10102: LD_INT 1
10104: NEG
10105: EQUAL
10106: IFFALSE 10315
// begin for j in f do
10108: LD_ADDR_VAR 0 9
10112: PUSH
10113: LD_VAR 0 12
10117: PUSH
10118: FOR_IN
10119: IFFALSE 10311
// repeat InitHc ;
10121: CALL_OW 19
// if GetBType ( j ) = b_barracks then
10125: LD_VAR 0 9
10129: PPUSH
10130: CALL_OW 266
10134: PUSH
10135: LD_INT 5
10137: EQUAL
10138: IFFALSE 10208
// begin if UnitsInside ( j ) < 3 then
10140: LD_VAR 0 9
10144: PPUSH
10145: CALL_OW 313
10149: PUSH
10150: LD_INT 3
10152: LESS
10153: IFFALSE 10189
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
10155: LD_INT 0
10157: PPUSH
10158: LD_INT 5
10160: PUSH
10161: LD_INT 8
10163: PUSH
10164: LD_INT 9
10166: PUSH
10167: EMPTY
10168: LIST
10169: LIST
10170: LIST
10171: PUSH
10172: LD_VAR 0 17
10176: ARRAY
10177: PPUSH
10178: LD_VAR 0 4
10182: PPUSH
10183: CALL_OW 380
10187: GO 10206
// PrepareHuman ( false , i , skill ) ;
10189: LD_INT 0
10191: PPUSH
10192: LD_VAR 0 8
10196: PPUSH
10197: LD_VAR 0 4
10201: PPUSH
10202: CALL_OW 380
// end else
10206: GO 10225
// PrepareHuman ( false , i , skill ) ;
10208: LD_INT 0
10210: PPUSH
10211: LD_VAR 0 8
10215: PPUSH
10216: LD_VAR 0 4
10220: PPUSH
10221: CALL_OW 380
// un := CreateHuman ;
10225: LD_ADDR_VAR 0 14
10229: PUSH
10230: CALL_OW 44
10234: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
10235: LD_ADDR_VAR 0 7
10239: PUSH
10240: LD_VAR 0 7
10244: PPUSH
10245: LD_INT 1
10247: PPUSH
10248: LD_VAR 0 14
10252: PPUSH
10253: CALL_OW 2
10257: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
10258: LD_VAR 0 14
10262: PPUSH
10263: LD_VAR 0 9
10267: PPUSH
10268: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
10272: LD_VAR 0 9
10276: PPUSH
10277: CALL_OW 313
10281: PUSH
10282: LD_INT 6
10284: EQUAL
10285: PUSH
10286: LD_VAR 0 9
10290: PPUSH
10291: CALL_OW 266
10295: PUSH
10296: LD_INT 32
10298: PUSH
10299: LD_INT 31
10301: PUSH
10302: EMPTY
10303: LIST
10304: LIST
10305: IN
10306: OR
10307: IFFALSE 10121
10309: GO 10118
10311: POP
10312: POP
// end else
10313: GO 10695
// for j = 1 to x do
10315: LD_ADDR_VAR 0 9
10319: PUSH
10320: DOUBLE
10321: LD_INT 1
10323: DEC
10324: ST_TO_ADDR
10325: LD_VAR 0 13
10329: PUSH
10330: FOR_TO
10331: IFFALSE 10693
// begin InitHc ;
10333: CALL_OW 19
// if not f then
10337: LD_VAR 0 12
10341: NOT
10342: IFFALSE 10431
// begin PrepareHuman ( false , i , skill ) ;
10344: LD_INT 0
10346: PPUSH
10347: LD_VAR 0 8
10351: PPUSH
10352: LD_VAR 0 4
10356: PPUSH
10357: CALL_OW 380
// un := CreateHuman ;
10361: LD_ADDR_VAR 0 14
10365: PUSH
10366: CALL_OW 44
10370: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
10371: LD_ADDR_VAR 0 7
10375: PUSH
10376: LD_VAR 0 7
10380: PPUSH
10381: LD_INT 1
10383: PPUSH
10384: LD_VAR 0 14
10388: PPUSH
10389: CALL_OW 2
10393: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
10394: LD_VAR 0 14
10398: PPUSH
10399: LD_VAR 0 1
10403: PPUSH
10404: CALL_OW 250
10408: PPUSH
10409: LD_VAR 0 1
10413: PPUSH
10414: CALL_OW 251
10418: PPUSH
10419: LD_INT 10
10421: PPUSH
10422: LD_INT 0
10424: PPUSH
10425: CALL_OW 50
// continue ;
10429: GO 10330
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
10431: LD_VAR 0 12
10435: PUSH
10436: LD_INT 1
10438: ARRAY
10439: PPUSH
10440: CALL_OW 313
10444: PUSH
10445: LD_VAR 0 12
10449: PUSH
10450: LD_INT 1
10452: ARRAY
10453: PPUSH
10454: CALL_OW 266
10458: PUSH
10459: LD_INT 32
10461: PUSH
10462: LD_INT 31
10464: PUSH
10465: EMPTY
10466: LIST
10467: LIST
10468: IN
10469: AND
10470: PUSH
10471: LD_VAR 0 12
10475: PUSH
10476: LD_INT 1
10478: ARRAY
10479: PPUSH
10480: CALL_OW 313
10484: PUSH
10485: LD_INT 6
10487: EQUAL
10488: OR
10489: IFFALSE 10509
// f := Delete ( f , 1 ) ;
10491: LD_ADDR_VAR 0 12
10495: PUSH
10496: LD_VAR 0 12
10500: PPUSH
10501: LD_INT 1
10503: PPUSH
10504: CALL_OW 3
10508: ST_TO_ADDR
// if not f then
10509: LD_VAR 0 12
10513: NOT
10514: IFFALSE 10532
// begin x := x + 2 ;
10516: LD_ADDR_VAR 0 13
10520: PUSH
10521: LD_VAR 0 13
10525: PUSH
10526: LD_INT 2
10528: PLUS
10529: ST_TO_ADDR
// continue ;
10530: GO 10330
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
10532: LD_VAR 0 12
10536: PUSH
10537: LD_INT 1
10539: ARRAY
10540: PPUSH
10541: CALL_OW 266
10545: PUSH
10546: LD_INT 5
10548: EQUAL
10549: IFFALSE 10623
// begin if UnitsInside ( f [ 1 ] ) < 3 then
10551: LD_VAR 0 12
10555: PUSH
10556: LD_INT 1
10558: ARRAY
10559: PPUSH
10560: CALL_OW 313
10564: PUSH
10565: LD_INT 3
10567: LESS
10568: IFFALSE 10604
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
10570: LD_INT 0
10572: PPUSH
10573: LD_INT 5
10575: PUSH
10576: LD_INT 8
10578: PUSH
10579: LD_INT 9
10581: PUSH
10582: EMPTY
10583: LIST
10584: LIST
10585: LIST
10586: PUSH
10587: LD_VAR 0 17
10591: ARRAY
10592: PPUSH
10593: LD_VAR 0 4
10597: PPUSH
10598: CALL_OW 380
10602: GO 10621
// PrepareHuman ( false , i , skill ) ;
10604: LD_INT 0
10606: PPUSH
10607: LD_VAR 0 8
10611: PPUSH
10612: LD_VAR 0 4
10616: PPUSH
10617: CALL_OW 380
// end else
10621: GO 10640
// PrepareHuman ( false , i , skill ) ;
10623: LD_INT 0
10625: PPUSH
10626: LD_VAR 0 8
10630: PPUSH
10631: LD_VAR 0 4
10635: PPUSH
10636: CALL_OW 380
// un := CreateHuman ;
10640: LD_ADDR_VAR 0 14
10644: PUSH
10645: CALL_OW 44
10649: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
10650: LD_ADDR_VAR 0 7
10654: PUSH
10655: LD_VAR 0 7
10659: PPUSH
10660: LD_INT 1
10662: PPUSH
10663: LD_VAR 0 14
10667: PPUSH
10668: CALL_OW 2
10672: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
10673: LD_VAR 0 14
10677: PPUSH
10678: LD_VAR 0 12
10682: PUSH
10683: LD_INT 1
10685: ARRAY
10686: PPUSH
10687: CALL_OW 52
// end ;
10691: GO 10330
10693: POP
10694: POP
// end ;
10695: GO 9632
10697: POP
10698: POP
// result := result ^ buildings ;
10699: LD_ADDR_VAR 0 7
10703: PUSH
10704: LD_VAR 0 7
10708: PUSH
10709: LD_VAR 0 18
10713: ADD
10714: ST_TO_ADDR
// end else
10715: GO 10858
// begin for i = 1 to personel do
10717: LD_ADDR_VAR 0 8
10721: PUSH
10722: DOUBLE
10723: LD_INT 1
10725: DEC
10726: ST_TO_ADDR
10727: LD_VAR 0 6
10731: PUSH
10732: FOR_TO
10733: IFFALSE 10856
// begin if i > 4 then
10735: LD_VAR 0 8
10739: PUSH
10740: LD_INT 4
10742: GREATER
10743: IFFALSE 10747
// break ;
10745: GO 10856
// x := personel [ i ] ;
10747: LD_ADDR_VAR 0 13
10751: PUSH
10752: LD_VAR 0 6
10756: PUSH
10757: LD_VAR 0 8
10761: ARRAY
10762: ST_TO_ADDR
// if x = - 1 then
10763: LD_VAR 0 13
10767: PUSH
10768: LD_INT 1
10770: NEG
10771: EQUAL
10772: IFFALSE 10776
// continue ;
10774: GO 10732
// PrepareHuman ( false , i , skill ) ;
10776: LD_INT 0
10778: PPUSH
10779: LD_VAR 0 8
10783: PPUSH
10784: LD_VAR 0 4
10788: PPUSH
10789: CALL_OW 380
// un := CreateHuman ;
10793: LD_ADDR_VAR 0 14
10797: PUSH
10798: CALL_OW 44
10802: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
10803: LD_VAR 0 14
10807: PPUSH
10808: LD_VAR 0 1
10812: PPUSH
10813: CALL_OW 250
10817: PPUSH
10818: LD_VAR 0 1
10822: PPUSH
10823: CALL_OW 251
10827: PPUSH
10828: LD_INT 10
10830: PPUSH
10831: LD_INT 0
10833: PPUSH
10834: CALL_OW 50
// result := result ^ un ;
10838: LD_ADDR_VAR 0 7
10842: PUSH
10843: LD_VAR 0 7
10847: PUSH
10848: LD_VAR 0 14
10852: ADD
10853: ST_TO_ADDR
// end ;
10854: GO 10732
10856: POP
10857: POP
// end ; end ;
10858: LD_VAR 0 7
10862: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
10863: LD_INT 0
10865: PPUSH
10866: PPUSH
10867: PPUSH
10868: PPUSH
10869: PPUSH
10870: PPUSH
10871: PPUSH
10872: PPUSH
10873: PPUSH
10874: PPUSH
10875: PPUSH
10876: PPUSH
10877: PPUSH
10878: PPUSH
10879: PPUSH
10880: PPUSH
// result := false ;
10881: LD_ADDR_VAR 0 3
10885: PUSH
10886: LD_INT 0
10888: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
10889: LD_VAR 0 1
10893: NOT
10894: PUSH
10895: LD_VAR 0 1
10899: PPUSH
10900: CALL_OW 266
10904: PUSH
10905: LD_INT 32
10907: PUSH
10908: LD_INT 33
10910: PUSH
10911: EMPTY
10912: LIST
10913: LIST
10914: IN
10915: NOT
10916: OR
10917: IFFALSE 10921
// exit ;
10919: GO 12030
// nat := GetNation ( tower ) ;
10921: LD_ADDR_VAR 0 12
10925: PUSH
10926: LD_VAR 0 1
10930: PPUSH
10931: CALL_OW 248
10935: ST_TO_ADDR
// side := GetSide ( tower ) ;
10936: LD_ADDR_VAR 0 16
10940: PUSH
10941: LD_VAR 0 1
10945: PPUSH
10946: CALL_OW 255
10950: ST_TO_ADDR
// x := GetX ( tower ) ;
10951: LD_ADDR_VAR 0 10
10955: PUSH
10956: LD_VAR 0 1
10960: PPUSH
10961: CALL_OW 250
10965: ST_TO_ADDR
// y := GetY ( tower ) ;
10966: LD_ADDR_VAR 0 11
10970: PUSH
10971: LD_VAR 0 1
10975: PPUSH
10976: CALL_OW 251
10980: ST_TO_ADDR
// if not x or not y then
10981: LD_VAR 0 10
10985: NOT
10986: PUSH
10987: LD_VAR 0 11
10991: NOT
10992: OR
10993: IFFALSE 10997
// exit ;
10995: GO 12030
// weapon := 0 ;
10997: LD_ADDR_VAR 0 18
11001: PUSH
11002: LD_INT 0
11004: ST_TO_ADDR
// fac_list := [ ] ;
11005: LD_ADDR_VAR 0 17
11009: PUSH
11010: EMPTY
11011: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
11012: LD_ADDR_VAR 0 6
11016: PUSH
11017: LD_VAR 0 1
11021: PPUSH
11022: CALL_OW 274
11026: PPUSH
11027: LD_VAR 0 2
11031: PPUSH
11032: LD_INT 0
11034: PPUSH
11035: CALL 8601 0 3
11039: PPUSH
11040: LD_INT 30
11042: PUSH
11043: LD_INT 3
11045: PUSH
11046: EMPTY
11047: LIST
11048: LIST
11049: PPUSH
11050: CALL_OW 72
11054: ST_TO_ADDR
// if not factories then
11055: LD_VAR 0 6
11059: NOT
11060: IFFALSE 11064
// exit ;
11062: GO 12030
// for i in factories do
11064: LD_ADDR_VAR 0 8
11068: PUSH
11069: LD_VAR 0 6
11073: PUSH
11074: FOR_IN
11075: IFFALSE 11100
// fac_list := fac_list union AvailableWeaponList ( i ) ;
11077: LD_ADDR_VAR 0 17
11081: PUSH
11082: LD_VAR 0 17
11086: PUSH
11087: LD_VAR 0 8
11091: PPUSH
11092: CALL_OW 478
11096: UNION
11097: ST_TO_ADDR
11098: GO 11074
11100: POP
11101: POP
// if not fac_list then
11102: LD_VAR 0 17
11106: NOT
11107: IFFALSE 11111
// exit ;
11109: GO 12030
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
11111: LD_ADDR_VAR 0 5
11115: PUSH
11116: LD_INT 4
11118: PUSH
11119: LD_INT 5
11121: PUSH
11122: LD_INT 9
11124: PUSH
11125: LD_INT 10
11127: PUSH
11128: LD_INT 6
11130: PUSH
11131: LD_INT 7
11133: PUSH
11134: LD_INT 11
11136: PUSH
11137: EMPTY
11138: LIST
11139: LIST
11140: LIST
11141: LIST
11142: LIST
11143: LIST
11144: LIST
11145: PUSH
11146: LD_INT 27
11148: PUSH
11149: LD_INT 28
11151: PUSH
11152: LD_INT 26
11154: PUSH
11155: LD_INT 30
11157: PUSH
11158: EMPTY
11159: LIST
11160: LIST
11161: LIST
11162: LIST
11163: PUSH
11164: LD_INT 43
11166: PUSH
11167: LD_INT 44
11169: PUSH
11170: LD_INT 46
11172: PUSH
11173: LD_INT 45
11175: PUSH
11176: LD_INT 47
11178: PUSH
11179: LD_INT 49
11181: PUSH
11182: EMPTY
11183: LIST
11184: LIST
11185: LIST
11186: LIST
11187: LIST
11188: LIST
11189: PUSH
11190: EMPTY
11191: LIST
11192: LIST
11193: LIST
11194: PUSH
11195: LD_VAR 0 12
11199: ARRAY
11200: ST_TO_ADDR
// list := list isect fac_list ;
11201: LD_ADDR_VAR 0 5
11205: PUSH
11206: LD_VAR 0 5
11210: PUSH
11211: LD_VAR 0 17
11215: ISECT
11216: ST_TO_ADDR
// if not list then
11217: LD_VAR 0 5
11221: NOT
11222: IFFALSE 11226
// exit ;
11224: GO 12030
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
11226: LD_VAR 0 12
11230: PUSH
11231: LD_INT 3
11233: EQUAL
11234: PUSH
11235: LD_INT 49
11237: PUSH
11238: LD_VAR 0 5
11242: IN
11243: AND
11244: PUSH
11245: LD_INT 31
11247: PPUSH
11248: LD_VAR 0 16
11252: PPUSH
11253: CALL_OW 321
11257: PUSH
11258: LD_INT 2
11260: EQUAL
11261: AND
11262: IFFALSE 11322
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
11264: LD_INT 22
11266: PUSH
11267: LD_VAR 0 16
11271: PUSH
11272: EMPTY
11273: LIST
11274: LIST
11275: PUSH
11276: LD_INT 35
11278: PUSH
11279: LD_INT 49
11281: PUSH
11282: EMPTY
11283: LIST
11284: LIST
11285: PUSH
11286: LD_INT 91
11288: PUSH
11289: LD_VAR 0 1
11293: PUSH
11294: LD_INT 10
11296: PUSH
11297: EMPTY
11298: LIST
11299: LIST
11300: LIST
11301: PUSH
11302: EMPTY
11303: LIST
11304: LIST
11305: LIST
11306: PPUSH
11307: CALL_OW 69
11311: NOT
11312: IFFALSE 11322
// weapon := ru_time_lapser ;
11314: LD_ADDR_VAR 0 18
11318: PUSH
11319: LD_INT 49
11321: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
11322: LD_VAR 0 12
11326: PUSH
11327: LD_INT 1
11329: PUSH
11330: LD_INT 2
11332: PUSH
11333: EMPTY
11334: LIST
11335: LIST
11336: IN
11337: PUSH
11338: LD_INT 11
11340: PUSH
11341: LD_VAR 0 5
11345: IN
11346: PUSH
11347: LD_INT 30
11349: PUSH
11350: LD_VAR 0 5
11354: IN
11355: OR
11356: AND
11357: PUSH
11358: LD_INT 6
11360: PPUSH
11361: LD_VAR 0 16
11365: PPUSH
11366: CALL_OW 321
11370: PUSH
11371: LD_INT 2
11373: EQUAL
11374: AND
11375: IFFALSE 11540
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
11377: LD_INT 22
11379: PUSH
11380: LD_VAR 0 16
11384: PUSH
11385: EMPTY
11386: LIST
11387: LIST
11388: PUSH
11389: LD_INT 2
11391: PUSH
11392: LD_INT 35
11394: PUSH
11395: LD_INT 11
11397: PUSH
11398: EMPTY
11399: LIST
11400: LIST
11401: PUSH
11402: LD_INT 35
11404: PUSH
11405: LD_INT 30
11407: PUSH
11408: EMPTY
11409: LIST
11410: LIST
11411: PUSH
11412: EMPTY
11413: LIST
11414: LIST
11415: LIST
11416: PUSH
11417: LD_INT 91
11419: PUSH
11420: LD_VAR 0 1
11424: PUSH
11425: LD_INT 18
11427: PUSH
11428: EMPTY
11429: LIST
11430: LIST
11431: LIST
11432: PUSH
11433: EMPTY
11434: LIST
11435: LIST
11436: LIST
11437: PPUSH
11438: CALL_OW 69
11442: NOT
11443: PUSH
11444: LD_INT 22
11446: PUSH
11447: LD_VAR 0 16
11451: PUSH
11452: EMPTY
11453: LIST
11454: LIST
11455: PUSH
11456: LD_INT 2
11458: PUSH
11459: LD_INT 30
11461: PUSH
11462: LD_INT 32
11464: PUSH
11465: EMPTY
11466: LIST
11467: LIST
11468: PUSH
11469: LD_INT 30
11471: PUSH
11472: LD_INT 33
11474: PUSH
11475: EMPTY
11476: LIST
11477: LIST
11478: PUSH
11479: EMPTY
11480: LIST
11481: LIST
11482: LIST
11483: PUSH
11484: LD_INT 91
11486: PUSH
11487: LD_VAR 0 1
11491: PUSH
11492: LD_INT 12
11494: PUSH
11495: EMPTY
11496: LIST
11497: LIST
11498: LIST
11499: PUSH
11500: EMPTY
11501: LIST
11502: LIST
11503: LIST
11504: PUSH
11505: EMPTY
11506: LIST
11507: PPUSH
11508: CALL_OW 69
11512: PUSH
11513: LD_INT 2
11515: GREATER
11516: AND
11517: IFFALSE 11540
// weapon := [ us_radar , ar_radar ] [ nat ] ;
11519: LD_ADDR_VAR 0 18
11523: PUSH
11524: LD_INT 11
11526: PUSH
11527: LD_INT 30
11529: PUSH
11530: EMPTY
11531: LIST
11532: LIST
11533: PUSH
11534: LD_VAR 0 12
11538: ARRAY
11539: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
11540: LD_VAR 0 18
11544: NOT
11545: PUSH
11546: LD_INT 40
11548: PPUSH
11549: LD_VAR 0 16
11553: PPUSH
11554: CALL_OW 321
11558: PUSH
11559: LD_INT 2
11561: EQUAL
11562: AND
11563: PUSH
11564: LD_INT 7
11566: PUSH
11567: LD_VAR 0 5
11571: IN
11572: PUSH
11573: LD_INT 28
11575: PUSH
11576: LD_VAR 0 5
11580: IN
11581: OR
11582: PUSH
11583: LD_INT 45
11585: PUSH
11586: LD_VAR 0 5
11590: IN
11591: OR
11592: AND
11593: IFFALSE 11847
// begin hex := GetHexInfo ( x , y ) ;
11595: LD_ADDR_VAR 0 4
11599: PUSH
11600: LD_VAR 0 10
11604: PPUSH
11605: LD_VAR 0 11
11609: PPUSH
11610: CALL_OW 546
11614: ST_TO_ADDR
// if hex [ 1 ] then
11615: LD_VAR 0 4
11619: PUSH
11620: LD_INT 1
11622: ARRAY
11623: IFFALSE 11627
// exit ;
11625: GO 12030
// height := hex [ 2 ] ;
11627: LD_ADDR_VAR 0 15
11631: PUSH
11632: LD_VAR 0 4
11636: PUSH
11637: LD_INT 2
11639: ARRAY
11640: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
11641: LD_ADDR_VAR 0 14
11645: PUSH
11646: LD_INT 0
11648: PUSH
11649: LD_INT 2
11651: PUSH
11652: LD_INT 3
11654: PUSH
11655: LD_INT 5
11657: PUSH
11658: EMPTY
11659: LIST
11660: LIST
11661: LIST
11662: LIST
11663: ST_TO_ADDR
// for i in tmp do
11664: LD_ADDR_VAR 0 8
11668: PUSH
11669: LD_VAR 0 14
11673: PUSH
11674: FOR_IN
11675: IFFALSE 11845
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
11677: LD_ADDR_VAR 0 9
11681: PUSH
11682: LD_VAR 0 10
11686: PPUSH
11687: LD_VAR 0 8
11691: PPUSH
11692: LD_INT 5
11694: PPUSH
11695: CALL_OW 272
11699: PUSH
11700: LD_VAR 0 11
11704: PPUSH
11705: LD_VAR 0 8
11709: PPUSH
11710: LD_INT 5
11712: PPUSH
11713: CALL_OW 273
11717: PUSH
11718: EMPTY
11719: LIST
11720: LIST
11721: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
11722: LD_VAR 0 9
11726: PUSH
11727: LD_INT 1
11729: ARRAY
11730: PPUSH
11731: LD_VAR 0 9
11735: PUSH
11736: LD_INT 2
11738: ARRAY
11739: PPUSH
11740: CALL_OW 488
11744: IFFALSE 11843
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
11746: LD_ADDR_VAR 0 4
11750: PUSH
11751: LD_VAR 0 9
11755: PUSH
11756: LD_INT 1
11758: ARRAY
11759: PPUSH
11760: LD_VAR 0 9
11764: PUSH
11765: LD_INT 2
11767: ARRAY
11768: PPUSH
11769: CALL_OW 546
11773: ST_TO_ADDR
// if hex [ 1 ] then
11774: LD_VAR 0 4
11778: PUSH
11779: LD_INT 1
11781: ARRAY
11782: IFFALSE 11786
// continue ;
11784: GO 11674
// h := hex [ 2 ] ;
11786: LD_ADDR_VAR 0 13
11790: PUSH
11791: LD_VAR 0 4
11795: PUSH
11796: LD_INT 2
11798: ARRAY
11799: ST_TO_ADDR
// if h + 7 < height then
11800: LD_VAR 0 13
11804: PUSH
11805: LD_INT 7
11807: PLUS
11808: PUSH
11809: LD_VAR 0 15
11813: LESS
11814: IFFALSE 11843
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
11816: LD_ADDR_VAR 0 18
11820: PUSH
11821: LD_INT 7
11823: PUSH
11824: LD_INT 28
11826: PUSH
11827: LD_INT 45
11829: PUSH
11830: EMPTY
11831: LIST
11832: LIST
11833: LIST
11834: PUSH
11835: LD_VAR 0 12
11839: ARRAY
11840: ST_TO_ADDR
// break ;
11841: GO 11845
// end ; end ; end ;
11843: GO 11674
11845: POP
11846: POP
// end ; if not weapon then
11847: LD_VAR 0 18
11851: NOT
11852: IFFALSE 11912
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
11854: LD_ADDR_VAR 0 5
11858: PUSH
11859: LD_VAR 0 5
11863: PUSH
11864: LD_INT 11
11866: PUSH
11867: LD_INT 30
11869: PUSH
11870: LD_INT 49
11872: PUSH
11873: EMPTY
11874: LIST
11875: LIST
11876: LIST
11877: DIFF
11878: ST_TO_ADDR
// if not list then
11879: LD_VAR 0 5
11883: NOT
11884: IFFALSE 11888
// exit ;
11886: GO 12030
// weapon := list [ rand ( 1 , list ) ] ;
11888: LD_ADDR_VAR 0 18
11892: PUSH
11893: LD_VAR 0 5
11897: PUSH
11898: LD_INT 1
11900: PPUSH
11901: LD_VAR 0 5
11905: PPUSH
11906: CALL_OW 12
11910: ARRAY
11911: ST_TO_ADDR
// end ; if weapon then
11912: LD_VAR 0 18
11916: IFFALSE 12030
// begin tmp := CostOfWeapon ( weapon ) ;
11918: LD_ADDR_VAR 0 14
11922: PUSH
11923: LD_VAR 0 18
11927: PPUSH
11928: CALL_OW 451
11932: ST_TO_ADDR
// j := GetBase ( tower ) ;
11933: LD_ADDR_VAR 0 9
11937: PUSH
11938: LD_VAR 0 1
11942: PPUSH
11943: CALL_OW 274
11947: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
11948: LD_VAR 0 9
11952: PPUSH
11953: LD_INT 1
11955: PPUSH
11956: CALL_OW 275
11960: PUSH
11961: LD_VAR 0 14
11965: PUSH
11966: LD_INT 1
11968: ARRAY
11969: GREATEREQUAL
11970: PUSH
11971: LD_VAR 0 9
11975: PPUSH
11976: LD_INT 2
11978: PPUSH
11979: CALL_OW 275
11983: PUSH
11984: LD_VAR 0 14
11988: PUSH
11989: LD_INT 2
11991: ARRAY
11992: GREATEREQUAL
11993: AND
11994: PUSH
11995: LD_VAR 0 9
11999: PPUSH
12000: LD_INT 3
12002: PPUSH
12003: CALL_OW 275
12007: PUSH
12008: LD_VAR 0 14
12012: PUSH
12013: LD_INT 3
12015: ARRAY
12016: GREATEREQUAL
12017: AND
12018: IFFALSE 12030
// result := weapon ;
12020: LD_ADDR_VAR 0 3
12024: PUSH
12025: LD_VAR 0 18
12029: ST_TO_ADDR
// end ; end ;
12030: LD_VAR 0 3
12034: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
12035: LD_INT 0
12037: PPUSH
12038: PPUSH
// result := true ;
12039: LD_ADDR_VAR 0 3
12043: PUSH
12044: LD_INT 1
12046: ST_TO_ADDR
// if array1 = array2 then
12047: LD_VAR 0 1
12051: PUSH
12052: LD_VAR 0 2
12056: EQUAL
12057: IFFALSE 12117
// begin for i = 1 to array1 do
12059: LD_ADDR_VAR 0 4
12063: PUSH
12064: DOUBLE
12065: LD_INT 1
12067: DEC
12068: ST_TO_ADDR
12069: LD_VAR 0 1
12073: PUSH
12074: FOR_TO
12075: IFFALSE 12113
// if array1 [ i ] <> array2 [ i ] then
12077: LD_VAR 0 1
12081: PUSH
12082: LD_VAR 0 4
12086: ARRAY
12087: PUSH
12088: LD_VAR 0 2
12092: PUSH
12093: LD_VAR 0 4
12097: ARRAY
12098: NONEQUAL
12099: IFFALSE 12111
// begin result := false ;
12101: LD_ADDR_VAR 0 3
12105: PUSH
12106: LD_INT 0
12108: ST_TO_ADDR
// break ;
12109: GO 12113
// end ;
12111: GO 12074
12113: POP
12114: POP
// end else
12115: GO 12125
// result := false ;
12117: LD_ADDR_VAR 0 3
12121: PUSH
12122: LD_INT 0
12124: ST_TO_ADDR
// end ;
12125: LD_VAR 0 3
12129: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
12130: LD_INT 0
12132: PPUSH
12133: PPUSH
// if not array1 or not array2 then
12134: LD_VAR 0 1
12138: NOT
12139: PUSH
12140: LD_VAR 0 2
12144: NOT
12145: OR
12146: IFFALSE 12150
// exit ;
12148: GO 12214
// result := true ;
12150: LD_ADDR_VAR 0 3
12154: PUSH
12155: LD_INT 1
12157: ST_TO_ADDR
// for i = 1 to array1 do
12158: LD_ADDR_VAR 0 4
12162: PUSH
12163: DOUBLE
12164: LD_INT 1
12166: DEC
12167: ST_TO_ADDR
12168: LD_VAR 0 1
12172: PUSH
12173: FOR_TO
12174: IFFALSE 12212
// if array1 [ i ] <> array2 [ i ] then
12176: LD_VAR 0 1
12180: PUSH
12181: LD_VAR 0 4
12185: ARRAY
12186: PUSH
12187: LD_VAR 0 2
12191: PUSH
12192: LD_VAR 0 4
12196: ARRAY
12197: NONEQUAL
12198: IFFALSE 12210
// begin result := false ;
12200: LD_ADDR_VAR 0 3
12204: PUSH
12205: LD_INT 0
12207: ST_TO_ADDR
// break ;
12208: GO 12212
// end ;
12210: GO 12173
12212: POP
12213: POP
// end ;
12214: LD_VAR 0 3
12218: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
12219: LD_INT 0
12221: PPUSH
12222: PPUSH
12223: PPUSH
// pom := GetBase ( fac ) ;
12224: LD_ADDR_VAR 0 5
12228: PUSH
12229: LD_VAR 0 1
12233: PPUSH
12234: CALL_OW 274
12238: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
12239: LD_ADDR_VAR 0 4
12243: PUSH
12244: LD_VAR 0 2
12248: PUSH
12249: LD_INT 1
12251: ARRAY
12252: PPUSH
12253: LD_VAR 0 2
12257: PUSH
12258: LD_INT 2
12260: ARRAY
12261: PPUSH
12262: LD_VAR 0 2
12266: PUSH
12267: LD_INT 3
12269: ARRAY
12270: PPUSH
12271: LD_VAR 0 2
12275: PUSH
12276: LD_INT 4
12278: ARRAY
12279: PPUSH
12280: CALL_OW 449
12284: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
12285: LD_ADDR_VAR 0 3
12289: PUSH
12290: LD_VAR 0 5
12294: PPUSH
12295: LD_INT 1
12297: PPUSH
12298: CALL_OW 275
12302: PUSH
12303: LD_VAR 0 4
12307: PUSH
12308: LD_INT 1
12310: ARRAY
12311: GREATEREQUAL
12312: PUSH
12313: LD_VAR 0 5
12317: PPUSH
12318: LD_INT 2
12320: PPUSH
12321: CALL_OW 275
12325: PUSH
12326: LD_VAR 0 4
12330: PUSH
12331: LD_INT 2
12333: ARRAY
12334: GREATEREQUAL
12335: AND
12336: PUSH
12337: LD_VAR 0 5
12341: PPUSH
12342: LD_INT 3
12344: PPUSH
12345: CALL_OW 275
12349: PUSH
12350: LD_VAR 0 4
12354: PUSH
12355: LD_INT 3
12357: ARRAY
12358: GREATEREQUAL
12359: AND
12360: ST_TO_ADDR
// end ;
12361: LD_VAR 0 3
12365: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
12366: LD_INT 0
12368: PPUSH
12369: PPUSH
12370: PPUSH
12371: PPUSH
// pom := GetBase ( building ) ;
12372: LD_ADDR_VAR 0 3
12376: PUSH
12377: LD_VAR 0 1
12381: PPUSH
12382: CALL_OW 274
12386: ST_TO_ADDR
// if not pom then
12387: LD_VAR 0 3
12391: NOT
12392: IFFALSE 12396
// exit ;
12394: GO 12566
// btype := GetBType ( building ) ;
12396: LD_ADDR_VAR 0 5
12400: PUSH
12401: LD_VAR 0 1
12405: PPUSH
12406: CALL_OW 266
12410: ST_TO_ADDR
// if btype = b_armoury then
12411: LD_VAR 0 5
12415: PUSH
12416: LD_INT 4
12418: EQUAL
12419: IFFALSE 12429
// btype := b_barracks ;
12421: LD_ADDR_VAR 0 5
12425: PUSH
12426: LD_INT 5
12428: ST_TO_ADDR
// if btype = b_depot then
12429: LD_VAR 0 5
12433: PUSH
12434: LD_INT 0
12436: EQUAL
12437: IFFALSE 12447
// btype := b_warehouse ;
12439: LD_ADDR_VAR 0 5
12443: PUSH
12444: LD_INT 1
12446: ST_TO_ADDR
// if btype = b_workshop then
12447: LD_VAR 0 5
12451: PUSH
12452: LD_INT 2
12454: EQUAL
12455: IFFALSE 12465
// btype := b_factory ;
12457: LD_ADDR_VAR 0 5
12461: PUSH
12462: LD_INT 3
12464: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
12465: LD_ADDR_VAR 0 4
12469: PUSH
12470: LD_VAR 0 5
12474: PPUSH
12475: LD_VAR 0 1
12479: PPUSH
12480: CALL_OW 248
12484: PPUSH
12485: CALL_OW 450
12489: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
12490: LD_ADDR_VAR 0 2
12494: PUSH
12495: LD_VAR 0 3
12499: PPUSH
12500: LD_INT 1
12502: PPUSH
12503: CALL_OW 275
12507: PUSH
12508: LD_VAR 0 4
12512: PUSH
12513: LD_INT 1
12515: ARRAY
12516: GREATEREQUAL
12517: PUSH
12518: LD_VAR 0 3
12522: PPUSH
12523: LD_INT 2
12525: PPUSH
12526: CALL_OW 275
12530: PUSH
12531: LD_VAR 0 4
12535: PUSH
12536: LD_INT 2
12538: ARRAY
12539: GREATEREQUAL
12540: AND
12541: PUSH
12542: LD_VAR 0 3
12546: PPUSH
12547: LD_INT 3
12549: PPUSH
12550: CALL_OW 275
12554: PUSH
12555: LD_VAR 0 4
12559: PUSH
12560: LD_INT 3
12562: ARRAY
12563: GREATEREQUAL
12564: AND
12565: ST_TO_ADDR
// end ;
12566: LD_VAR 0 2
12570: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
12571: LD_INT 0
12573: PPUSH
12574: PPUSH
12575: PPUSH
// pom := GetBase ( building ) ;
12576: LD_ADDR_VAR 0 4
12580: PUSH
12581: LD_VAR 0 1
12585: PPUSH
12586: CALL_OW 274
12590: ST_TO_ADDR
// if not pom then
12591: LD_VAR 0 4
12595: NOT
12596: IFFALSE 12600
// exit ;
12598: GO 12701
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
12600: LD_ADDR_VAR 0 5
12604: PUSH
12605: LD_VAR 0 2
12609: PPUSH
12610: LD_VAR 0 1
12614: PPUSH
12615: CALL_OW 248
12619: PPUSH
12620: CALL_OW 450
12624: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
12625: LD_ADDR_VAR 0 3
12629: PUSH
12630: LD_VAR 0 4
12634: PPUSH
12635: LD_INT 1
12637: PPUSH
12638: CALL_OW 275
12642: PUSH
12643: LD_VAR 0 5
12647: PUSH
12648: LD_INT 1
12650: ARRAY
12651: GREATEREQUAL
12652: PUSH
12653: LD_VAR 0 4
12657: PPUSH
12658: LD_INT 2
12660: PPUSH
12661: CALL_OW 275
12665: PUSH
12666: LD_VAR 0 5
12670: PUSH
12671: LD_INT 2
12673: ARRAY
12674: GREATEREQUAL
12675: AND
12676: PUSH
12677: LD_VAR 0 4
12681: PPUSH
12682: LD_INT 3
12684: PPUSH
12685: CALL_OW 275
12689: PUSH
12690: LD_VAR 0 5
12694: PUSH
12695: LD_INT 3
12697: ARRAY
12698: GREATEREQUAL
12699: AND
12700: ST_TO_ADDR
// end ;
12701: LD_VAR 0 3
12705: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
12706: LD_INT 0
12708: PPUSH
12709: PPUSH
12710: PPUSH
12711: PPUSH
12712: PPUSH
12713: PPUSH
12714: PPUSH
12715: PPUSH
12716: PPUSH
12717: PPUSH
12718: PPUSH
// result := false ;
12719: LD_ADDR_VAR 0 8
12723: PUSH
12724: LD_INT 0
12726: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
12727: LD_VAR 0 5
12731: NOT
12732: PUSH
12733: LD_VAR 0 1
12737: NOT
12738: OR
12739: PUSH
12740: LD_VAR 0 2
12744: NOT
12745: OR
12746: PUSH
12747: LD_VAR 0 3
12751: NOT
12752: OR
12753: IFFALSE 12757
// exit ;
12755: GO 13571
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
12757: LD_ADDR_VAR 0 14
12761: PUSH
12762: LD_VAR 0 1
12766: PPUSH
12767: LD_VAR 0 2
12771: PPUSH
12772: LD_VAR 0 3
12776: PPUSH
12777: LD_VAR 0 4
12781: PPUSH
12782: LD_VAR 0 5
12786: PUSH
12787: LD_INT 1
12789: ARRAY
12790: PPUSH
12791: CALL_OW 248
12795: PPUSH
12796: LD_INT 0
12798: PPUSH
12799: CALL 14824 0 6
12803: ST_TO_ADDR
// if not hexes then
12804: LD_VAR 0 14
12808: NOT
12809: IFFALSE 12813
// exit ;
12811: GO 13571
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
12813: LD_ADDR_VAR 0 17
12817: PUSH
12818: LD_VAR 0 5
12822: PPUSH
12823: LD_INT 22
12825: PUSH
12826: LD_VAR 0 13
12830: PPUSH
12831: CALL_OW 255
12835: PUSH
12836: EMPTY
12837: LIST
12838: LIST
12839: PUSH
12840: LD_INT 2
12842: PUSH
12843: LD_INT 30
12845: PUSH
12846: LD_INT 0
12848: PUSH
12849: EMPTY
12850: LIST
12851: LIST
12852: PUSH
12853: LD_INT 30
12855: PUSH
12856: LD_INT 1
12858: PUSH
12859: EMPTY
12860: LIST
12861: LIST
12862: PUSH
12863: EMPTY
12864: LIST
12865: LIST
12866: LIST
12867: PUSH
12868: EMPTY
12869: LIST
12870: LIST
12871: PPUSH
12872: CALL_OW 72
12876: ST_TO_ADDR
// for i = 1 to hexes do
12877: LD_ADDR_VAR 0 9
12881: PUSH
12882: DOUBLE
12883: LD_INT 1
12885: DEC
12886: ST_TO_ADDR
12887: LD_VAR 0 14
12891: PUSH
12892: FOR_TO
12893: IFFALSE 13569
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
12895: LD_ADDR_VAR 0 13
12899: PUSH
12900: LD_VAR 0 14
12904: PUSH
12905: LD_VAR 0 9
12909: ARRAY
12910: PUSH
12911: LD_INT 1
12913: ARRAY
12914: PPUSH
12915: LD_VAR 0 14
12919: PUSH
12920: LD_VAR 0 9
12924: ARRAY
12925: PUSH
12926: LD_INT 2
12928: ARRAY
12929: PPUSH
12930: CALL_OW 428
12934: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
12935: LD_VAR 0 14
12939: PUSH
12940: LD_VAR 0 9
12944: ARRAY
12945: PUSH
12946: LD_INT 1
12948: ARRAY
12949: PPUSH
12950: LD_VAR 0 14
12954: PUSH
12955: LD_VAR 0 9
12959: ARRAY
12960: PUSH
12961: LD_INT 2
12963: ARRAY
12964: PPUSH
12965: CALL_OW 351
12969: PUSH
12970: LD_VAR 0 14
12974: PUSH
12975: LD_VAR 0 9
12979: ARRAY
12980: PUSH
12981: LD_INT 1
12983: ARRAY
12984: PPUSH
12985: LD_VAR 0 14
12989: PUSH
12990: LD_VAR 0 9
12994: ARRAY
12995: PUSH
12996: LD_INT 2
12998: ARRAY
12999: PPUSH
13000: CALL_OW 488
13004: NOT
13005: OR
13006: PUSH
13007: LD_VAR 0 13
13011: PPUSH
13012: CALL_OW 247
13016: PUSH
13017: LD_INT 3
13019: EQUAL
13020: OR
13021: IFFALSE 13027
// exit ;
13023: POP
13024: POP
13025: GO 13571
// if not tmp then
13027: LD_VAR 0 13
13031: NOT
13032: IFFALSE 13036
// continue ;
13034: GO 12892
// result := true ;
13036: LD_ADDR_VAR 0 8
13040: PUSH
13041: LD_INT 1
13043: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
13044: LD_VAR 0 6
13048: PUSH
13049: LD_VAR 0 13
13053: PPUSH
13054: CALL_OW 247
13058: PUSH
13059: LD_INT 2
13061: EQUAL
13062: AND
13063: PUSH
13064: LD_VAR 0 13
13068: PPUSH
13069: CALL_OW 263
13073: PUSH
13074: LD_INT 1
13076: EQUAL
13077: AND
13078: IFFALSE 13242
// begin if IsDrivenBy ( tmp ) then
13080: LD_VAR 0 13
13084: PPUSH
13085: CALL_OW 311
13089: IFFALSE 13093
// continue ;
13091: GO 12892
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
13093: LD_VAR 0 6
13097: PPUSH
13098: LD_INT 3
13100: PUSH
13101: LD_INT 60
13103: PUSH
13104: EMPTY
13105: LIST
13106: PUSH
13107: EMPTY
13108: LIST
13109: LIST
13110: PUSH
13111: LD_INT 3
13113: PUSH
13114: LD_INT 55
13116: PUSH
13117: EMPTY
13118: LIST
13119: PUSH
13120: EMPTY
13121: LIST
13122: LIST
13123: PUSH
13124: EMPTY
13125: LIST
13126: LIST
13127: PPUSH
13128: CALL_OW 72
13132: IFFALSE 13240
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
13134: LD_ADDR_VAR 0 18
13138: PUSH
13139: LD_VAR 0 6
13143: PPUSH
13144: LD_INT 3
13146: PUSH
13147: LD_INT 60
13149: PUSH
13150: EMPTY
13151: LIST
13152: PUSH
13153: EMPTY
13154: LIST
13155: LIST
13156: PUSH
13157: LD_INT 3
13159: PUSH
13160: LD_INT 55
13162: PUSH
13163: EMPTY
13164: LIST
13165: PUSH
13166: EMPTY
13167: LIST
13168: LIST
13169: PUSH
13170: EMPTY
13171: LIST
13172: LIST
13173: PPUSH
13174: CALL_OW 72
13178: PUSH
13179: LD_INT 1
13181: ARRAY
13182: ST_TO_ADDR
// if IsInUnit ( driver ) then
13183: LD_VAR 0 18
13187: PPUSH
13188: CALL_OW 310
13192: IFFALSE 13203
// ComExit ( driver ) ;
13194: LD_VAR 0 18
13198: PPUSH
13199: CALL 38616 0 1
// AddComEnterUnit ( driver , tmp ) ;
13203: LD_VAR 0 18
13207: PPUSH
13208: LD_VAR 0 13
13212: PPUSH
13213: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
13217: LD_VAR 0 18
13221: PPUSH
13222: LD_VAR 0 7
13226: PPUSH
13227: CALL_OW 173
// AddComExitVehicle ( driver ) ;
13231: LD_VAR 0 18
13235: PPUSH
13236: CALL_OW 181
// end ; continue ;
13240: GO 12892
// end ; if not cleaners or not tmp in cleaners then
13242: LD_VAR 0 6
13246: NOT
13247: PUSH
13248: LD_VAR 0 13
13252: PUSH
13253: LD_VAR 0 6
13257: IN
13258: NOT
13259: OR
13260: IFFALSE 13567
// begin if dep then
13262: LD_VAR 0 17
13266: IFFALSE 13402
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
13268: LD_ADDR_VAR 0 16
13272: PUSH
13273: LD_VAR 0 17
13277: PUSH
13278: LD_INT 1
13280: ARRAY
13281: PPUSH
13282: CALL_OW 250
13286: PPUSH
13287: LD_VAR 0 17
13291: PUSH
13292: LD_INT 1
13294: ARRAY
13295: PPUSH
13296: CALL_OW 254
13300: PPUSH
13301: LD_INT 5
13303: PPUSH
13304: CALL_OW 272
13308: PUSH
13309: LD_VAR 0 17
13313: PUSH
13314: LD_INT 1
13316: ARRAY
13317: PPUSH
13318: CALL_OW 251
13322: PPUSH
13323: LD_VAR 0 17
13327: PUSH
13328: LD_INT 1
13330: ARRAY
13331: PPUSH
13332: CALL_OW 254
13336: PPUSH
13337: LD_INT 5
13339: PPUSH
13340: CALL_OW 273
13344: PUSH
13345: EMPTY
13346: LIST
13347: LIST
13348: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
13349: LD_VAR 0 16
13353: PUSH
13354: LD_INT 1
13356: ARRAY
13357: PPUSH
13358: LD_VAR 0 16
13362: PUSH
13363: LD_INT 2
13365: ARRAY
13366: PPUSH
13367: CALL_OW 488
13371: IFFALSE 13402
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
13373: LD_VAR 0 13
13377: PPUSH
13378: LD_VAR 0 16
13382: PUSH
13383: LD_INT 1
13385: ARRAY
13386: PPUSH
13387: LD_VAR 0 16
13391: PUSH
13392: LD_INT 2
13394: ARRAY
13395: PPUSH
13396: CALL_OW 111
// continue ;
13400: GO 12892
// end ; end ; r := GetDir ( tmp ) ;
13402: LD_ADDR_VAR 0 15
13406: PUSH
13407: LD_VAR 0 13
13411: PPUSH
13412: CALL_OW 254
13416: ST_TO_ADDR
// if r = 5 then
13417: LD_VAR 0 15
13421: PUSH
13422: LD_INT 5
13424: EQUAL
13425: IFFALSE 13435
// r := 0 ;
13427: LD_ADDR_VAR 0 15
13431: PUSH
13432: LD_INT 0
13434: ST_TO_ADDR
// for j = r to 5 do
13435: LD_ADDR_VAR 0 10
13439: PUSH
13440: DOUBLE
13441: LD_VAR 0 15
13445: DEC
13446: ST_TO_ADDR
13447: LD_INT 5
13449: PUSH
13450: FOR_TO
13451: IFFALSE 13565
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
13453: LD_ADDR_VAR 0 11
13457: PUSH
13458: LD_VAR 0 13
13462: PPUSH
13463: CALL_OW 250
13467: PPUSH
13468: LD_VAR 0 10
13472: PPUSH
13473: LD_INT 2
13475: PPUSH
13476: CALL_OW 272
13480: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
13481: LD_ADDR_VAR 0 12
13485: PUSH
13486: LD_VAR 0 13
13490: PPUSH
13491: CALL_OW 251
13495: PPUSH
13496: LD_VAR 0 10
13500: PPUSH
13501: LD_INT 2
13503: PPUSH
13504: CALL_OW 273
13508: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
13509: LD_VAR 0 11
13513: PPUSH
13514: LD_VAR 0 12
13518: PPUSH
13519: CALL_OW 488
13523: PUSH
13524: LD_VAR 0 11
13528: PPUSH
13529: LD_VAR 0 12
13533: PPUSH
13534: CALL_OW 428
13538: NOT
13539: AND
13540: IFFALSE 13563
// begin ComMoveXY ( tmp , _x , _y ) ;
13542: LD_VAR 0 13
13546: PPUSH
13547: LD_VAR 0 11
13551: PPUSH
13552: LD_VAR 0 12
13556: PPUSH
13557: CALL_OW 111
// break ;
13561: GO 13565
// end ; end ;
13563: GO 13450
13565: POP
13566: POP
// end ; end ;
13567: GO 12892
13569: POP
13570: POP
// end ;
13571: LD_VAR 0 8
13575: RET
// export function BuildingTechInvented ( side , btype ) ; begin
13576: LD_INT 0
13578: PPUSH
// result := true ;
13579: LD_ADDR_VAR 0 3
13583: PUSH
13584: LD_INT 1
13586: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
13587: LD_VAR 0 2
13591: PUSH
13592: LD_INT 24
13594: DOUBLE
13595: EQUAL
13596: IFTRUE 13606
13598: LD_INT 33
13600: DOUBLE
13601: EQUAL
13602: IFTRUE 13606
13604: GO 13631
13606: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
13607: LD_ADDR_VAR 0 3
13611: PUSH
13612: LD_INT 32
13614: PPUSH
13615: LD_VAR 0 1
13619: PPUSH
13620: CALL_OW 321
13624: PUSH
13625: LD_INT 2
13627: EQUAL
13628: ST_TO_ADDR
13629: GO 13947
13631: LD_INT 20
13633: DOUBLE
13634: EQUAL
13635: IFTRUE 13639
13637: GO 13664
13639: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
13640: LD_ADDR_VAR 0 3
13644: PUSH
13645: LD_INT 6
13647: PPUSH
13648: LD_VAR 0 1
13652: PPUSH
13653: CALL_OW 321
13657: PUSH
13658: LD_INT 2
13660: EQUAL
13661: ST_TO_ADDR
13662: GO 13947
13664: LD_INT 22
13666: DOUBLE
13667: EQUAL
13668: IFTRUE 13678
13670: LD_INT 36
13672: DOUBLE
13673: EQUAL
13674: IFTRUE 13678
13676: GO 13703
13678: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
13679: LD_ADDR_VAR 0 3
13683: PUSH
13684: LD_INT 15
13686: PPUSH
13687: LD_VAR 0 1
13691: PPUSH
13692: CALL_OW 321
13696: PUSH
13697: LD_INT 2
13699: EQUAL
13700: ST_TO_ADDR
13701: GO 13947
13703: LD_INT 30
13705: DOUBLE
13706: EQUAL
13707: IFTRUE 13711
13709: GO 13736
13711: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
13712: LD_ADDR_VAR 0 3
13716: PUSH
13717: LD_INT 20
13719: PPUSH
13720: LD_VAR 0 1
13724: PPUSH
13725: CALL_OW 321
13729: PUSH
13730: LD_INT 2
13732: EQUAL
13733: ST_TO_ADDR
13734: GO 13947
13736: LD_INT 28
13738: DOUBLE
13739: EQUAL
13740: IFTRUE 13750
13742: LD_INT 21
13744: DOUBLE
13745: EQUAL
13746: IFTRUE 13750
13748: GO 13775
13750: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
13751: LD_ADDR_VAR 0 3
13755: PUSH
13756: LD_INT 21
13758: PPUSH
13759: LD_VAR 0 1
13763: PPUSH
13764: CALL_OW 321
13768: PUSH
13769: LD_INT 2
13771: EQUAL
13772: ST_TO_ADDR
13773: GO 13947
13775: LD_INT 16
13777: DOUBLE
13778: EQUAL
13779: IFTRUE 13783
13781: GO 13808
13783: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
13784: LD_ADDR_VAR 0 3
13788: PUSH
13789: LD_INT 84
13791: PPUSH
13792: LD_VAR 0 1
13796: PPUSH
13797: CALL_OW 321
13801: PUSH
13802: LD_INT 2
13804: EQUAL
13805: ST_TO_ADDR
13806: GO 13947
13808: LD_INT 19
13810: DOUBLE
13811: EQUAL
13812: IFTRUE 13822
13814: LD_INT 23
13816: DOUBLE
13817: EQUAL
13818: IFTRUE 13822
13820: GO 13847
13822: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
13823: LD_ADDR_VAR 0 3
13827: PUSH
13828: LD_INT 83
13830: PPUSH
13831: LD_VAR 0 1
13835: PPUSH
13836: CALL_OW 321
13840: PUSH
13841: LD_INT 2
13843: EQUAL
13844: ST_TO_ADDR
13845: GO 13947
13847: LD_INT 17
13849: DOUBLE
13850: EQUAL
13851: IFTRUE 13855
13853: GO 13880
13855: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
13856: LD_ADDR_VAR 0 3
13860: PUSH
13861: LD_INT 39
13863: PPUSH
13864: LD_VAR 0 1
13868: PPUSH
13869: CALL_OW 321
13873: PUSH
13874: LD_INT 2
13876: EQUAL
13877: ST_TO_ADDR
13878: GO 13947
13880: LD_INT 18
13882: DOUBLE
13883: EQUAL
13884: IFTRUE 13888
13886: GO 13913
13888: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
13889: LD_ADDR_VAR 0 3
13893: PUSH
13894: LD_INT 40
13896: PPUSH
13897: LD_VAR 0 1
13901: PPUSH
13902: CALL_OW 321
13906: PUSH
13907: LD_INT 2
13909: EQUAL
13910: ST_TO_ADDR
13911: GO 13947
13913: LD_INT 27
13915: DOUBLE
13916: EQUAL
13917: IFTRUE 13921
13919: GO 13946
13921: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
13922: LD_ADDR_VAR 0 3
13926: PUSH
13927: LD_INT 35
13929: PPUSH
13930: LD_VAR 0 1
13934: PPUSH
13935: CALL_OW 321
13939: PUSH
13940: LD_INT 2
13942: EQUAL
13943: ST_TO_ADDR
13944: GO 13947
13946: POP
// end ;
13947: LD_VAR 0 3
13951: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
13952: LD_INT 0
13954: PPUSH
13955: PPUSH
13956: PPUSH
13957: PPUSH
13958: PPUSH
13959: PPUSH
13960: PPUSH
13961: PPUSH
13962: PPUSH
13963: PPUSH
13964: PPUSH
// result := false ;
13965: LD_ADDR_VAR 0 6
13969: PUSH
13970: LD_INT 0
13972: ST_TO_ADDR
// if btype = b_depot then
13973: LD_VAR 0 2
13977: PUSH
13978: LD_INT 0
13980: EQUAL
13981: IFFALSE 13993
// begin result := true ;
13983: LD_ADDR_VAR 0 6
13987: PUSH
13988: LD_INT 1
13990: ST_TO_ADDR
// exit ;
13991: GO 14819
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
13993: LD_VAR 0 1
13997: NOT
13998: PUSH
13999: LD_VAR 0 1
14003: PPUSH
14004: CALL_OW 266
14008: PUSH
14009: LD_INT 0
14011: PUSH
14012: LD_INT 1
14014: PUSH
14015: EMPTY
14016: LIST
14017: LIST
14018: IN
14019: NOT
14020: OR
14021: PUSH
14022: LD_VAR 0 2
14026: NOT
14027: OR
14028: PUSH
14029: LD_VAR 0 5
14033: PUSH
14034: LD_INT 0
14036: PUSH
14037: LD_INT 1
14039: PUSH
14040: LD_INT 2
14042: PUSH
14043: LD_INT 3
14045: PUSH
14046: LD_INT 4
14048: PUSH
14049: LD_INT 5
14051: PUSH
14052: EMPTY
14053: LIST
14054: LIST
14055: LIST
14056: LIST
14057: LIST
14058: LIST
14059: IN
14060: NOT
14061: OR
14062: PUSH
14063: LD_VAR 0 3
14067: PPUSH
14068: LD_VAR 0 4
14072: PPUSH
14073: CALL_OW 488
14077: NOT
14078: OR
14079: IFFALSE 14083
// exit ;
14081: GO 14819
// side := GetSide ( depot ) ;
14083: LD_ADDR_VAR 0 9
14087: PUSH
14088: LD_VAR 0 1
14092: PPUSH
14093: CALL_OW 255
14097: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
14098: LD_VAR 0 9
14102: PPUSH
14103: LD_VAR 0 2
14107: PPUSH
14108: CALL 13576 0 2
14112: NOT
14113: IFFALSE 14117
// exit ;
14115: GO 14819
// pom := GetBase ( depot ) ;
14117: LD_ADDR_VAR 0 10
14121: PUSH
14122: LD_VAR 0 1
14126: PPUSH
14127: CALL_OW 274
14131: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
14132: LD_ADDR_VAR 0 11
14136: PUSH
14137: LD_VAR 0 2
14141: PPUSH
14142: LD_VAR 0 1
14146: PPUSH
14147: CALL_OW 248
14151: PPUSH
14152: CALL_OW 450
14156: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
14157: LD_VAR 0 10
14161: PPUSH
14162: LD_INT 1
14164: PPUSH
14165: CALL_OW 275
14169: PUSH
14170: LD_VAR 0 11
14174: PUSH
14175: LD_INT 1
14177: ARRAY
14178: GREATEREQUAL
14179: PUSH
14180: LD_VAR 0 10
14184: PPUSH
14185: LD_INT 2
14187: PPUSH
14188: CALL_OW 275
14192: PUSH
14193: LD_VAR 0 11
14197: PUSH
14198: LD_INT 2
14200: ARRAY
14201: GREATEREQUAL
14202: AND
14203: PUSH
14204: LD_VAR 0 10
14208: PPUSH
14209: LD_INT 3
14211: PPUSH
14212: CALL_OW 275
14216: PUSH
14217: LD_VAR 0 11
14221: PUSH
14222: LD_INT 3
14224: ARRAY
14225: GREATEREQUAL
14226: AND
14227: NOT
14228: IFFALSE 14232
// exit ;
14230: GO 14819
// if GetBType ( depot ) = b_depot then
14232: LD_VAR 0 1
14236: PPUSH
14237: CALL_OW 266
14241: PUSH
14242: LD_INT 0
14244: EQUAL
14245: IFFALSE 14257
// dist := 28 else
14247: LD_ADDR_VAR 0 14
14251: PUSH
14252: LD_INT 28
14254: ST_TO_ADDR
14255: GO 14265
// dist := 36 ;
14257: LD_ADDR_VAR 0 14
14261: PUSH
14262: LD_INT 36
14264: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
14265: LD_VAR 0 1
14269: PPUSH
14270: LD_VAR 0 3
14274: PPUSH
14275: LD_VAR 0 4
14279: PPUSH
14280: CALL_OW 297
14284: PUSH
14285: LD_VAR 0 14
14289: GREATER
14290: IFFALSE 14294
// exit ;
14292: GO 14819
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
14294: LD_ADDR_VAR 0 12
14298: PUSH
14299: LD_VAR 0 2
14303: PPUSH
14304: LD_VAR 0 3
14308: PPUSH
14309: LD_VAR 0 4
14313: PPUSH
14314: LD_VAR 0 5
14318: PPUSH
14319: LD_VAR 0 1
14323: PPUSH
14324: CALL_OW 248
14328: PPUSH
14329: LD_INT 0
14331: PPUSH
14332: CALL 14824 0 6
14336: ST_TO_ADDR
// if not hexes then
14337: LD_VAR 0 12
14341: NOT
14342: IFFALSE 14346
// exit ;
14344: GO 14819
// hex := GetHexInfo ( x , y ) ;
14346: LD_ADDR_VAR 0 15
14350: PUSH
14351: LD_VAR 0 3
14355: PPUSH
14356: LD_VAR 0 4
14360: PPUSH
14361: CALL_OW 546
14365: ST_TO_ADDR
// if hex [ 1 ] then
14366: LD_VAR 0 15
14370: PUSH
14371: LD_INT 1
14373: ARRAY
14374: IFFALSE 14378
// exit ;
14376: GO 14819
// height := hex [ 2 ] ;
14378: LD_ADDR_VAR 0 13
14382: PUSH
14383: LD_VAR 0 15
14387: PUSH
14388: LD_INT 2
14390: ARRAY
14391: ST_TO_ADDR
// for i = 1 to hexes do
14392: LD_ADDR_VAR 0 7
14396: PUSH
14397: DOUBLE
14398: LD_INT 1
14400: DEC
14401: ST_TO_ADDR
14402: LD_VAR 0 12
14406: PUSH
14407: FOR_TO
14408: IFFALSE 14738
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
14410: LD_VAR 0 12
14414: PUSH
14415: LD_VAR 0 7
14419: ARRAY
14420: PUSH
14421: LD_INT 1
14423: ARRAY
14424: PPUSH
14425: LD_VAR 0 12
14429: PUSH
14430: LD_VAR 0 7
14434: ARRAY
14435: PUSH
14436: LD_INT 2
14438: ARRAY
14439: PPUSH
14440: CALL_OW 488
14444: NOT
14445: PUSH
14446: LD_VAR 0 12
14450: PUSH
14451: LD_VAR 0 7
14455: ARRAY
14456: PUSH
14457: LD_INT 1
14459: ARRAY
14460: PPUSH
14461: LD_VAR 0 12
14465: PUSH
14466: LD_VAR 0 7
14470: ARRAY
14471: PUSH
14472: LD_INT 2
14474: ARRAY
14475: PPUSH
14476: CALL_OW 428
14480: PUSH
14481: LD_INT 0
14483: GREATER
14484: OR
14485: PUSH
14486: LD_VAR 0 12
14490: PUSH
14491: LD_VAR 0 7
14495: ARRAY
14496: PUSH
14497: LD_INT 1
14499: ARRAY
14500: PPUSH
14501: LD_VAR 0 12
14505: PUSH
14506: LD_VAR 0 7
14510: ARRAY
14511: PUSH
14512: LD_INT 2
14514: ARRAY
14515: PPUSH
14516: CALL_OW 351
14520: OR
14521: IFFALSE 14527
// exit ;
14523: POP
14524: POP
14525: GO 14819
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
14527: LD_ADDR_VAR 0 8
14531: PUSH
14532: LD_VAR 0 12
14536: PUSH
14537: LD_VAR 0 7
14541: ARRAY
14542: PUSH
14543: LD_INT 1
14545: ARRAY
14546: PPUSH
14547: LD_VAR 0 12
14551: PUSH
14552: LD_VAR 0 7
14556: ARRAY
14557: PUSH
14558: LD_INT 2
14560: ARRAY
14561: PPUSH
14562: CALL_OW 546
14566: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
14567: LD_VAR 0 8
14571: PUSH
14572: LD_INT 1
14574: ARRAY
14575: PUSH
14576: LD_VAR 0 8
14580: PUSH
14581: LD_INT 2
14583: ARRAY
14584: PUSH
14585: LD_VAR 0 13
14589: PUSH
14590: LD_INT 2
14592: PLUS
14593: GREATER
14594: OR
14595: PUSH
14596: LD_VAR 0 8
14600: PUSH
14601: LD_INT 2
14603: ARRAY
14604: PUSH
14605: LD_VAR 0 13
14609: PUSH
14610: LD_INT 2
14612: MINUS
14613: LESS
14614: OR
14615: PUSH
14616: LD_VAR 0 8
14620: PUSH
14621: LD_INT 3
14623: ARRAY
14624: PUSH
14625: LD_INT 0
14627: PUSH
14628: LD_INT 8
14630: PUSH
14631: LD_INT 9
14633: PUSH
14634: LD_INT 10
14636: PUSH
14637: LD_INT 11
14639: PUSH
14640: LD_INT 12
14642: PUSH
14643: LD_INT 13
14645: PUSH
14646: LD_INT 16
14648: PUSH
14649: LD_INT 17
14651: PUSH
14652: LD_INT 18
14654: PUSH
14655: LD_INT 19
14657: PUSH
14658: LD_INT 20
14660: PUSH
14661: LD_INT 21
14663: PUSH
14664: EMPTY
14665: LIST
14666: LIST
14667: LIST
14668: LIST
14669: LIST
14670: LIST
14671: LIST
14672: LIST
14673: LIST
14674: LIST
14675: LIST
14676: LIST
14677: LIST
14678: IN
14679: NOT
14680: OR
14681: PUSH
14682: LD_VAR 0 8
14686: PUSH
14687: LD_INT 5
14689: ARRAY
14690: NOT
14691: OR
14692: PUSH
14693: LD_VAR 0 8
14697: PUSH
14698: LD_INT 6
14700: ARRAY
14701: PUSH
14702: LD_INT 1
14704: PUSH
14705: LD_INT 2
14707: PUSH
14708: LD_INT 7
14710: PUSH
14711: LD_INT 9
14713: PUSH
14714: LD_INT 10
14716: PUSH
14717: LD_INT 11
14719: PUSH
14720: EMPTY
14721: LIST
14722: LIST
14723: LIST
14724: LIST
14725: LIST
14726: LIST
14727: IN
14728: NOT
14729: OR
14730: IFFALSE 14736
// exit ;
14732: POP
14733: POP
14734: GO 14819
// end ;
14736: GO 14407
14738: POP
14739: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
14740: LD_VAR 0 9
14744: PPUSH
14745: LD_VAR 0 3
14749: PPUSH
14750: LD_VAR 0 4
14754: PPUSH
14755: LD_INT 20
14757: PPUSH
14758: CALL 6742 0 4
14762: PUSH
14763: LD_INT 4
14765: ARRAY
14766: IFFALSE 14770
// exit ;
14768: GO 14819
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
14770: LD_VAR 0 2
14774: PUSH
14775: LD_INT 29
14777: PUSH
14778: LD_INT 30
14780: PUSH
14781: EMPTY
14782: LIST
14783: LIST
14784: IN
14785: PUSH
14786: LD_VAR 0 3
14790: PPUSH
14791: LD_VAR 0 4
14795: PPUSH
14796: LD_VAR 0 9
14800: PPUSH
14801: CALL_OW 440
14805: NOT
14806: AND
14807: IFFALSE 14811
// exit ;
14809: GO 14819
// result := true ;
14811: LD_ADDR_VAR 0 6
14815: PUSH
14816: LD_INT 1
14818: ST_TO_ADDR
// end ;
14819: LD_VAR 0 6
14823: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
14824: LD_INT 0
14826: PPUSH
14827: PPUSH
14828: PPUSH
14829: PPUSH
14830: PPUSH
14831: PPUSH
14832: PPUSH
14833: PPUSH
14834: PPUSH
14835: PPUSH
14836: PPUSH
14837: PPUSH
14838: PPUSH
14839: PPUSH
14840: PPUSH
14841: PPUSH
14842: PPUSH
14843: PPUSH
14844: PPUSH
14845: PPUSH
14846: PPUSH
14847: PPUSH
14848: PPUSH
14849: PPUSH
14850: PPUSH
14851: PPUSH
14852: PPUSH
14853: PPUSH
14854: PPUSH
14855: PPUSH
14856: PPUSH
14857: PPUSH
14858: PPUSH
14859: PPUSH
14860: PPUSH
14861: PPUSH
14862: PPUSH
14863: PPUSH
14864: PPUSH
14865: PPUSH
14866: PPUSH
14867: PPUSH
14868: PPUSH
14869: PPUSH
14870: PPUSH
14871: PPUSH
14872: PPUSH
14873: PPUSH
14874: PPUSH
14875: PPUSH
14876: PPUSH
14877: PPUSH
14878: PPUSH
14879: PPUSH
14880: PPUSH
14881: PPUSH
14882: PPUSH
14883: PPUSH
// result = [ ] ;
14884: LD_ADDR_VAR 0 7
14888: PUSH
14889: EMPTY
14890: ST_TO_ADDR
// temp_list = [ ] ;
14891: LD_ADDR_VAR 0 9
14895: PUSH
14896: EMPTY
14897: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
14898: LD_VAR 0 4
14902: PUSH
14903: LD_INT 0
14905: PUSH
14906: LD_INT 1
14908: PUSH
14909: LD_INT 2
14911: PUSH
14912: LD_INT 3
14914: PUSH
14915: LD_INT 4
14917: PUSH
14918: LD_INT 5
14920: PUSH
14921: EMPTY
14922: LIST
14923: LIST
14924: LIST
14925: LIST
14926: LIST
14927: LIST
14928: IN
14929: NOT
14930: PUSH
14931: LD_VAR 0 1
14935: PUSH
14936: LD_INT 0
14938: PUSH
14939: LD_INT 1
14941: PUSH
14942: EMPTY
14943: LIST
14944: LIST
14945: IN
14946: PUSH
14947: LD_VAR 0 5
14951: PUSH
14952: LD_INT 1
14954: PUSH
14955: LD_INT 2
14957: PUSH
14958: LD_INT 3
14960: PUSH
14961: EMPTY
14962: LIST
14963: LIST
14964: LIST
14965: IN
14966: NOT
14967: AND
14968: OR
14969: IFFALSE 14973
// exit ;
14971: GO 33364
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
14973: LD_VAR 0 1
14977: PUSH
14978: LD_INT 6
14980: PUSH
14981: LD_INT 7
14983: PUSH
14984: LD_INT 8
14986: PUSH
14987: LD_INT 13
14989: PUSH
14990: LD_INT 12
14992: PUSH
14993: LD_INT 15
14995: PUSH
14996: LD_INT 11
14998: PUSH
14999: LD_INT 14
15001: PUSH
15002: LD_INT 10
15004: PUSH
15005: EMPTY
15006: LIST
15007: LIST
15008: LIST
15009: LIST
15010: LIST
15011: LIST
15012: LIST
15013: LIST
15014: LIST
15015: IN
15016: IFFALSE 15026
// btype = b_lab ;
15018: LD_ADDR_VAR 0 1
15022: PUSH
15023: LD_INT 6
15025: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
15026: LD_VAR 0 6
15030: PUSH
15031: LD_INT 0
15033: PUSH
15034: LD_INT 1
15036: PUSH
15037: LD_INT 2
15039: PUSH
15040: EMPTY
15041: LIST
15042: LIST
15043: LIST
15044: IN
15045: NOT
15046: PUSH
15047: LD_VAR 0 1
15051: PUSH
15052: LD_INT 0
15054: PUSH
15055: LD_INT 1
15057: PUSH
15058: LD_INT 2
15060: PUSH
15061: LD_INT 3
15063: PUSH
15064: LD_INT 6
15066: PUSH
15067: LD_INT 36
15069: PUSH
15070: LD_INT 4
15072: PUSH
15073: LD_INT 5
15075: PUSH
15076: LD_INT 31
15078: PUSH
15079: LD_INT 32
15081: PUSH
15082: LD_INT 33
15084: PUSH
15085: EMPTY
15086: LIST
15087: LIST
15088: LIST
15089: LIST
15090: LIST
15091: LIST
15092: LIST
15093: LIST
15094: LIST
15095: LIST
15096: LIST
15097: IN
15098: NOT
15099: PUSH
15100: LD_VAR 0 6
15104: PUSH
15105: LD_INT 1
15107: EQUAL
15108: AND
15109: OR
15110: PUSH
15111: LD_VAR 0 1
15115: PUSH
15116: LD_INT 2
15118: PUSH
15119: LD_INT 3
15121: PUSH
15122: EMPTY
15123: LIST
15124: LIST
15125: IN
15126: NOT
15127: PUSH
15128: LD_VAR 0 6
15132: PUSH
15133: LD_INT 2
15135: EQUAL
15136: AND
15137: OR
15138: IFFALSE 15148
// mode = 0 ;
15140: LD_ADDR_VAR 0 6
15144: PUSH
15145: LD_INT 0
15147: ST_TO_ADDR
// case mode of 0 :
15148: LD_VAR 0 6
15152: PUSH
15153: LD_INT 0
15155: DOUBLE
15156: EQUAL
15157: IFTRUE 15161
15159: GO 26614
15161: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
15162: LD_ADDR_VAR 0 11
15166: PUSH
15167: LD_INT 0
15169: PUSH
15170: LD_INT 0
15172: PUSH
15173: EMPTY
15174: LIST
15175: LIST
15176: PUSH
15177: LD_INT 0
15179: PUSH
15180: LD_INT 1
15182: NEG
15183: PUSH
15184: EMPTY
15185: LIST
15186: LIST
15187: PUSH
15188: LD_INT 1
15190: PUSH
15191: LD_INT 0
15193: PUSH
15194: EMPTY
15195: LIST
15196: LIST
15197: PUSH
15198: LD_INT 1
15200: PUSH
15201: LD_INT 1
15203: PUSH
15204: EMPTY
15205: LIST
15206: LIST
15207: PUSH
15208: LD_INT 0
15210: PUSH
15211: LD_INT 1
15213: PUSH
15214: EMPTY
15215: LIST
15216: LIST
15217: PUSH
15218: LD_INT 1
15220: NEG
15221: PUSH
15222: LD_INT 0
15224: PUSH
15225: EMPTY
15226: LIST
15227: LIST
15228: PUSH
15229: LD_INT 1
15231: NEG
15232: PUSH
15233: LD_INT 1
15235: NEG
15236: PUSH
15237: EMPTY
15238: LIST
15239: LIST
15240: PUSH
15241: LD_INT 1
15243: NEG
15244: PUSH
15245: LD_INT 2
15247: NEG
15248: PUSH
15249: EMPTY
15250: LIST
15251: LIST
15252: PUSH
15253: LD_INT 0
15255: PUSH
15256: LD_INT 2
15258: NEG
15259: PUSH
15260: EMPTY
15261: LIST
15262: LIST
15263: PUSH
15264: LD_INT 1
15266: PUSH
15267: LD_INT 1
15269: NEG
15270: PUSH
15271: EMPTY
15272: LIST
15273: LIST
15274: PUSH
15275: LD_INT 1
15277: PUSH
15278: LD_INT 2
15280: PUSH
15281: EMPTY
15282: LIST
15283: LIST
15284: PUSH
15285: LD_INT 0
15287: PUSH
15288: LD_INT 2
15290: PUSH
15291: EMPTY
15292: LIST
15293: LIST
15294: PUSH
15295: LD_INT 1
15297: NEG
15298: PUSH
15299: LD_INT 1
15301: PUSH
15302: EMPTY
15303: LIST
15304: LIST
15305: PUSH
15306: LD_INT 1
15308: PUSH
15309: LD_INT 3
15311: PUSH
15312: EMPTY
15313: LIST
15314: LIST
15315: PUSH
15316: LD_INT 0
15318: PUSH
15319: LD_INT 3
15321: PUSH
15322: EMPTY
15323: LIST
15324: LIST
15325: PUSH
15326: LD_INT 1
15328: NEG
15329: PUSH
15330: LD_INT 2
15332: PUSH
15333: EMPTY
15334: LIST
15335: LIST
15336: PUSH
15337: EMPTY
15338: LIST
15339: LIST
15340: LIST
15341: LIST
15342: LIST
15343: LIST
15344: LIST
15345: LIST
15346: LIST
15347: LIST
15348: LIST
15349: LIST
15350: LIST
15351: LIST
15352: LIST
15353: LIST
15354: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
15355: LD_ADDR_VAR 0 12
15359: PUSH
15360: LD_INT 0
15362: PUSH
15363: LD_INT 0
15365: PUSH
15366: EMPTY
15367: LIST
15368: LIST
15369: PUSH
15370: LD_INT 0
15372: PUSH
15373: LD_INT 1
15375: NEG
15376: PUSH
15377: EMPTY
15378: LIST
15379: LIST
15380: PUSH
15381: LD_INT 1
15383: PUSH
15384: LD_INT 0
15386: PUSH
15387: EMPTY
15388: LIST
15389: LIST
15390: PUSH
15391: LD_INT 1
15393: PUSH
15394: LD_INT 1
15396: PUSH
15397: EMPTY
15398: LIST
15399: LIST
15400: PUSH
15401: LD_INT 0
15403: PUSH
15404: LD_INT 1
15406: PUSH
15407: EMPTY
15408: LIST
15409: LIST
15410: PUSH
15411: LD_INT 1
15413: NEG
15414: PUSH
15415: LD_INT 0
15417: PUSH
15418: EMPTY
15419: LIST
15420: LIST
15421: PUSH
15422: LD_INT 1
15424: NEG
15425: PUSH
15426: LD_INT 1
15428: NEG
15429: PUSH
15430: EMPTY
15431: LIST
15432: LIST
15433: PUSH
15434: LD_INT 1
15436: PUSH
15437: LD_INT 1
15439: NEG
15440: PUSH
15441: EMPTY
15442: LIST
15443: LIST
15444: PUSH
15445: LD_INT 2
15447: PUSH
15448: LD_INT 0
15450: PUSH
15451: EMPTY
15452: LIST
15453: LIST
15454: PUSH
15455: LD_INT 2
15457: PUSH
15458: LD_INT 1
15460: PUSH
15461: EMPTY
15462: LIST
15463: LIST
15464: PUSH
15465: LD_INT 1
15467: NEG
15468: PUSH
15469: LD_INT 1
15471: PUSH
15472: EMPTY
15473: LIST
15474: LIST
15475: PUSH
15476: LD_INT 2
15478: NEG
15479: PUSH
15480: LD_INT 0
15482: PUSH
15483: EMPTY
15484: LIST
15485: LIST
15486: PUSH
15487: LD_INT 2
15489: NEG
15490: PUSH
15491: LD_INT 1
15493: NEG
15494: PUSH
15495: EMPTY
15496: LIST
15497: LIST
15498: PUSH
15499: LD_INT 2
15501: NEG
15502: PUSH
15503: LD_INT 1
15505: PUSH
15506: EMPTY
15507: LIST
15508: LIST
15509: PUSH
15510: LD_INT 3
15512: NEG
15513: PUSH
15514: LD_INT 0
15516: PUSH
15517: EMPTY
15518: LIST
15519: LIST
15520: PUSH
15521: LD_INT 3
15523: NEG
15524: PUSH
15525: LD_INT 1
15527: NEG
15528: PUSH
15529: EMPTY
15530: LIST
15531: LIST
15532: PUSH
15533: EMPTY
15534: LIST
15535: LIST
15536: LIST
15537: LIST
15538: LIST
15539: LIST
15540: LIST
15541: LIST
15542: LIST
15543: LIST
15544: LIST
15545: LIST
15546: LIST
15547: LIST
15548: LIST
15549: LIST
15550: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
15551: LD_ADDR_VAR 0 13
15555: PUSH
15556: LD_INT 0
15558: PUSH
15559: LD_INT 0
15561: PUSH
15562: EMPTY
15563: LIST
15564: LIST
15565: PUSH
15566: LD_INT 0
15568: PUSH
15569: LD_INT 1
15571: NEG
15572: PUSH
15573: EMPTY
15574: LIST
15575: LIST
15576: PUSH
15577: LD_INT 1
15579: PUSH
15580: LD_INT 0
15582: PUSH
15583: EMPTY
15584: LIST
15585: LIST
15586: PUSH
15587: LD_INT 1
15589: PUSH
15590: LD_INT 1
15592: PUSH
15593: EMPTY
15594: LIST
15595: LIST
15596: PUSH
15597: LD_INT 0
15599: PUSH
15600: LD_INT 1
15602: PUSH
15603: EMPTY
15604: LIST
15605: LIST
15606: PUSH
15607: LD_INT 1
15609: NEG
15610: PUSH
15611: LD_INT 0
15613: PUSH
15614: EMPTY
15615: LIST
15616: LIST
15617: PUSH
15618: LD_INT 1
15620: NEG
15621: PUSH
15622: LD_INT 1
15624: NEG
15625: PUSH
15626: EMPTY
15627: LIST
15628: LIST
15629: PUSH
15630: LD_INT 1
15632: NEG
15633: PUSH
15634: LD_INT 2
15636: NEG
15637: PUSH
15638: EMPTY
15639: LIST
15640: LIST
15641: PUSH
15642: LD_INT 2
15644: PUSH
15645: LD_INT 1
15647: PUSH
15648: EMPTY
15649: LIST
15650: LIST
15651: PUSH
15652: LD_INT 2
15654: PUSH
15655: LD_INT 2
15657: PUSH
15658: EMPTY
15659: LIST
15660: LIST
15661: PUSH
15662: LD_INT 1
15664: PUSH
15665: LD_INT 2
15667: PUSH
15668: EMPTY
15669: LIST
15670: LIST
15671: PUSH
15672: LD_INT 2
15674: NEG
15675: PUSH
15676: LD_INT 1
15678: NEG
15679: PUSH
15680: EMPTY
15681: LIST
15682: LIST
15683: PUSH
15684: LD_INT 2
15686: NEG
15687: PUSH
15688: LD_INT 2
15690: NEG
15691: PUSH
15692: EMPTY
15693: LIST
15694: LIST
15695: PUSH
15696: LD_INT 2
15698: NEG
15699: PUSH
15700: LD_INT 3
15702: NEG
15703: PUSH
15704: EMPTY
15705: LIST
15706: LIST
15707: PUSH
15708: LD_INT 3
15710: NEG
15711: PUSH
15712: LD_INT 2
15714: NEG
15715: PUSH
15716: EMPTY
15717: LIST
15718: LIST
15719: PUSH
15720: LD_INT 3
15722: NEG
15723: PUSH
15724: LD_INT 3
15726: NEG
15727: PUSH
15728: EMPTY
15729: LIST
15730: LIST
15731: PUSH
15732: EMPTY
15733: LIST
15734: LIST
15735: LIST
15736: LIST
15737: LIST
15738: LIST
15739: LIST
15740: LIST
15741: LIST
15742: LIST
15743: LIST
15744: LIST
15745: LIST
15746: LIST
15747: LIST
15748: LIST
15749: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
15750: LD_ADDR_VAR 0 14
15754: PUSH
15755: LD_INT 0
15757: PUSH
15758: LD_INT 0
15760: PUSH
15761: EMPTY
15762: LIST
15763: LIST
15764: PUSH
15765: LD_INT 0
15767: PUSH
15768: LD_INT 1
15770: NEG
15771: PUSH
15772: EMPTY
15773: LIST
15774: LIST
15775: PUSH
15776: LD_INT 1
15778: PUSH
15779: LD_INT 0
15781: PUSH
15782: EMPTY
15783: LIST
15784: LIST
15785: PUSH
15786: LD_INT 1
15788: PUSH
15789: LD_INT 1
15791: PUSH
15792: EMPTY
15793: LIST
15794: LIST
15795: PUSH
15796: LD_INT 0
15798: PUSH
15799: LD_INT 1
15801: PUSH
15802: EMPTY
15803: LIST
15804: LIST
15805: PUSH
15806: LD_INT 1
15808: NEG
15809: PUSH
15810: LD_INT 0
15812: PUSH
15813: EMPTY
15814: LIST
15815: LIST
15816: PUSH
15817: LD_INT 1
15819: NEG
15820: PUSH
15821: LD_INT 1
15823: NEG
15824: PUSH
15825: EMPTY
15826: LIST
15827: LIST
15828: PUSH
15829: LD_INT 1
15831: NEG
15832: PUSH
15833: LD_INT 2
15835: NEG
15836: PUSH
15837: EMPTY
15838: LIST
15839: LIST
15840: PUSH
15841: LD_INT 0
15843: PUSH
15844: LD_INT 2
15846: NEG
15847: PUSH
15848: EMPTY
15849: LIST
15850: LIST
15851: PUSH
15852: LD_INT 1
15854: PUSH
15855: LD_INT 1
15857: NEG
15858: PUSH
15859: EMPTY
15860: LIST
15861: LIST
15862: PUSH
15863: LD_INT 1
15865: PUSH
15866: LD_INT 2
15868: PUSH
15869: EMPTY
15870: LIST
15871: LIST
15872: PUSH
15873: LD_INT 0
15875: PUSH
15876: LD_INT 2
15878: PUSH
15879: EMPTY
15880: LIST
15881: LIST
15882: PUSH
15883: LD_INT 1
15885: NEG
15886: PUSH
15887: LD_INT 1
15889: PUSH
15890: EMPTY
15891: LIST
15892: LIST
15893: PUSH
15894: LD_INT 1
15896: NEG
15897: PUSH
15898: LD_INT 3
15900: NEG
15901: PUSH
15902: EMPTY
15903: LIST
15904: LIST
15905: PUSH
15906: LD_INT 0
15908: PUSH
15909: LD_INT 3
15911: NEG
15912: PUSH
15913: EMPTY
15914: LIST
15915: LIST
15916: PUSH
15917: LD_INT 1
15919: PUSH
15920: LD_INT 2
15922: NEG
15923: PUSH
15924: EMPTY
15925: LIST
15926: LIST
15927: PUSH
15928: EMPTY
15929: LIST
15930: LIST
15931: LIST
15932: LIST
15933: LIST
15934: LIST
15935: LIST
15936: LIST
15937: LIST
15938: LIST
15939: LIST
15940: LIST
15941: LIST
15942: LIST
15943: LIST
15944: LIST
15945: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
15946: LD_ADDR_VAR 0 15
15950: PUSH
15951: LD_INT 0
15953: PUSH
15954: LD_INT 0
15956: PUSH
15957: EMPTY
15958: LIST
15959: LIST
15960: PUSH
15961: LD_INT 0
15963: PUSH
15964: LD_INT 1
15966: NEG
15967: PUSH
15968: EMPTY
15969: LIST
15970: LIST
15971: PUSH
15972: LD_INT 1
15974: PUSH
15975: LD_INT 0
15977: PUSH
15978: EMPTY
15979: LIST
15980: LIST
15981: PUSH
15982: LD_INT 1
15984: PUSH
15985: LD_INT 1
15987: PUSH
15988: EMPTY
15989: LIST
15990: LIST
15991: PUSH
15992: LD_INT 0
15994: PUSH
15995: LD_INT 1
15997: PUSH
15998: EMPTY
15999: LIST
16000: LIST
16001: PUSH
16002: LD_INT 1
16004: NEG
16005: PUSH
16006: LD_INT 0
16008: PUSH
16009: EMPTY
16010: LIST
16011: LIST
16012: PUSH
16013: LD_INT 1
16015: NEG
16016: PUSH
16017: LD_INT 1
16019: NEG
16020: PUSH
16021: EMPTY
16022: LIST
16023: LIST
16024: PUSH
16025: LD_INT 1
16027: PUSH
16028: LD_INT 1
16030: NEG
16031: PUSH
16032: EMPTY
16033: LIST
16034: LIST
16035: PUSH
16036: LD_INT 2
16038: PUSH
16039: LD_INT 0
16041: PUSH
16042: EMPTY
16043: LIST
16044: LIST
16045: PUSH
16046: LD_INT 2
16048: PUSH
16049: LD_INT 1
16051: PUSH
16052: EMPTY
16053: LIST
16054: LIST
16055: PUSH
16056: LD_INT 1
16058: NEG
16059: PUSH
16060: LD_INT 1
16062: PUSH
16063: EMPTY
16064: LIST
16065: LIST
16066: PUSH
16067: LD_INT 2
16069: NEG
16070: PUSH
16071: LD_INT 0
16073: PUSH
16074: EMPTY
16075: LIST
16076: LIST
16077: PUSH
16078: LD_INT 2
16080: NEG
16081: PUSH
16082: LD_INT 1
16084: NEG
16085: PUSH
16086: EMPTY
16087: LIST
16088: LIST
16089: PUSH
16090: LD_INT 2
16092: PUSH
16093: LD_INT 1
16095: NEG
16096: PUSH
16097: EMPTY
16098: LIST
16099: LIST
16100: PUSH
16101: LD_INT 3
16103: PUSH
16104: LD_INT 0
16106: PUSH
16107: EMPTY
16108: LIST
16109: LIST
16110: PUSH
16111: LD_INT 3
16113: PUSH
16114: LD_INT 1
16116: PUSH
16117: EMPTY
16118: LIST
16119: LIST
16120: PUSH
16121: EMPTY
16122: LIST
16123: LIST
16124: LIST
16125: LIST
16126: LIST
16127: LIST
16128: LIST
16129: LIST
16130: LIST
16131: LIST
16132: LIST
16133: LIST
16134: LIST
16135: LIST
16136: LIST
16137: LIST
16138: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
16139: LD_ADDR_VAR 0 16
16143: PUSH
16144: LD_INT 0
16146: PUSH
16147: LD_INT 0
16149: PUSH
16150: EMPTY
16151: LIST
16152: LIST
16153: PUSH
16154: LD_INT 0
16156: PUSH
16157: LD_INT 1
16159: NEG
16160: PUSH
16161: EMPTY
16162: LIST
16163: LIST
16164: PUSH
16165: LD_INT 1
16167: PUSH
16168: LD_INT 0
16170: PUSH
16171: EMPTY
16172: LIST
16173: LIST
16174: PUSH
16175: LD_INT 1
16177: PUSH
16178: LD_INT 1
16180: PUSH
16181: EMPTY
16182: LIST
16183: LIST
16184: PUSH
16185: LD_INT 0
16187: PUSH
16188: LD_INT 1
16190: PUSH
16191: EMPTY
16192: LIST
16193: LIST
16194: PUSH
16195: LD_INT 1
16197: NEG
16198: PUSH
16199: LD_INT 0
16201: PUSH
16202: EMPTY
16203: LIST
16204: LIST
16205: PUSH
16206: LD_INT 1
16208: NEG
16209: PUSH
16210: LD_INT 1
16212: NEG
16213: PUSH
16214: EMPTY
16215: LIST
16216: LIST
16217: PUSH
16218: LD_INT 1
16220: NEG
16221: PUSH
16222: LD_INT 2
16224: NEG
16225: PUSH
16226: EMPTY
16227: LIST
16228: LIST
16229: PUSH
16230: LD_INT 2
16232: PUSH
16233: LD_INT 1
16235: PUSH
16236: EMPTY
16237: LIST
16238: LIST
16239: PUSH
16240: LD_INT 2
16242: PUSH
16243: LD_INT 2
16245: PUSH
16246: EMPTY
16247: LIST
16248: LIST
16249: PUSH
16250: LD_INT 1
16252: PUSH
16253: LD_INT 2
16255: PUSH
16256: EMPTY
16257: LIST
16258: LIST
16259: PUSH
16260: LD_INT 2
16262: NEG
16263: PUSH
16264: LD_INT 1
16266: NEG
16267: PUSH
16268: EMPTY
16269: LIST
16270: LIST
16271: PUSH
16272: LD_INT 2
16274: NEG
16275: PUSH
16276: LD_INT 2
16278: NEG
16279: PUSH
16280: EMPTY
16281: LIST
16282: LIST
16283: PUSH
16284: LD_INT 3
16286: PUSH
16287: LD_INT 2
16289: PUSH
16290: EMPTY
16291: LIST
16292: LIST
16293: PUSH
16294: LD_INT 3
16296: PUSH
16297: LD_INT 3
16299: PUSH
16300: EMPTY
16301: LIST
16302: LIST
16303: PUSH
16304: LD_INT 2
16306: PUSH
16307: LD_INT 3
16309: PUSH
16310: EMPTY
16311: LIST
16312: LIST
16313: PUSH
16314: EMPTY
16315: LIST
16316: LIST
16317: LIST
16318: LIST
16319: LIST
16320: LIST
16321: LIST
16322: LIST
16323: LIST
16324: LIST
16325: LIST
16326: LIST
16327: LIST
16328: LIST
16329: LIST
16330: LIST
16331: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
16332: LD_ADDR_VAR 0 17
16336: PUSH
16337: LD_INT 0
16339: PUSH
16340: LD_INT 0
16342: PUSH
16343: EMPTY
16344: LIST
16345: LIST
16346: PUSH
16347: LD_INT 0
16349: PUSH
16350: LD_INT 1
16352: NEG
16353: PUSH
16354: EMPTY
16355: LIST
16356: LIST
16357: PUSH
16358: LD_INT 1
16360: PUSH
16361: LD_INT 0
16363: PUSH
16364: EMPTY
16365: LIST
16366: LIST
16367: PUSH
16368: LD_INT 1
16370: PUSH
16371: LD_INT 1
16373: PUSH
16374: EMPTY
16375: LIST
16376: LIST
16377: PUSH
16378: LD_INT 0
16380: PUSH
16381: LD_INT 1
16383: PUSH
16384: EMPTY
16385: LIST
16386: LIST
16387: PUSH
16388: LD_INT 1
16390: NEG
16391: PUSH
16392: LD_INT 0
16394: PUSH
16395: EMPTY
16396: LIST
16397: LIST
16398: PUSH
16399: LD_INT 1
16401: NEG
16402: PUSH
16403: LD_INT 1
16405: NEG
16406: PUSH
16407: EMPTY
16408: LIST
16409: LIST
16410: PUSH
16411: LD_INT 1
16413: NEG
16414: PUSH
16415: LD_INT 2
16417: NEG
16418: PUSH
16419: EMPTY
16420: LIST
16421: LIST
16422: PUSH
16423: LD_INT 0
16425: PUSH
16426: LD_INT 2
16428: NEG
16429: PUSH
16430: EMPTY
16431: LIST
16432: LIST
16433: PUSH
16434: LD_INT 1
16436: PUSH
16437: LD_INT 1
16439: NEG
16440: PUSH
16441: EMPTY
16442: LIST
16443: LIST
16444: PUSH
16445: LD_INT 2
16447: PUSH
16448: LD_INT 0
16450: PUSH
16451: EMPTY
16452: LIST
16453: LIST
16454: PUSH
16455: LD_INT 2
16457: PUSH
16458: LD_INT 1
16460: PUSH
16461: EMPTY
16462: LIST
16463: LIST
16464: PUSH
16465: LD_INT 2
16467: PUSH
16468: LD_INT 2
16470: PUSH
16471: EMPTY
16472: LIST
16473: LIST
16474: PUSH
16475: LD_INT 1
16477: PUSH
16478: LD_INT 2
16480: PUSH
16481: EMPTY
16482: LIST
16483: LIST
16484: PUSH
16485: LD_INT 0
16487: PUSH
16488: LD_INT 2
16490: PUSH
16491: EMPTY
16492: LIST
16493: LIST
16494: PUSH
16495: LD_INT 1
16497: NEG
16498: PUSH
16499: LD_INT 1
16501: PUSH
16502: EMPTY
16503: LIST
16504: LIST
16505: PUSH
16506: LD_INT 2
16508: NEG
16509: PUSH
16510: LD_INT 0
16512: PUSH
16513: EMPTY
16514: LIST
16515: LIST
16516: PUSH
16517: LD_INT 2
16519: NEG
16520: PUSH
16521: LD_INT 1
16523: NEG
16524: PUSH
16525: EMPTY
16526: LIST
16527: LIST
16528: PUSH
16529: LD_INT 2
16531: NEG
16532: PUSH
16533: LD_INT 2
16535: NEG
16536: PUSH
16537: EMPTY
16538: LIST
16539: LIST
16540: PUSH
16541: EMPTY
16542: LIST
16543: LIST
16544: LIST
16545: LIST
16546: LIST
16547: LIST
16548: LIST
16549: LIST
16550: LIST
16551: LIST
16552: LIST
16553: LIST
16554: LIST
16555: LIST
16556: LIST
16557: LIST
16558: LIST
16559: LIST
16560: LIST
16561: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
16562: LD_ADDR_VAR 0 18
16566: PUSH
16567: LD_INT 0
16569: PUSH
16570: LD_INT 0
16572: PUSH
16573: EMPTY
16574: LIST
16575: LIST
16576: PUSH
16577: LD_INT 0
16579: PUSH
16580: LD_INT 1
16582: NEG
16583: PUSH
16584: EMPTY
16585: LIST
16586: LIST
16587: PUSH
16588: LD_INT 1
16590: PUSH
16591: LD_INT 0
16593: PUSH
16594: EMPTY
16595: LIST
16596: LIST
16597: PUSH
16598: LD_INT 1
16600: PUSH
16601: LD_INT 1
16603: PUSH
16604: EMPTY
16605: LIST
16606: LIST
16607: PUSH
16608: LD_INT 0
16610: PUSH
16611: LD_INT 1
16613: PUSH
16614: EMPTY
16615: LIST
16616: LIST
16617: PUSH
16618: LD_INT 1
16620: NEG
16621: PUSH
16622: LD_INT 0
16624: PUSH
16625: EMPTY
16626: LIST
16627: LIST
16628: PUSH
16629: LD_INT 1
16631: NEG
16632: PUSH
16633: LD_INT 1
16635: NEG
16636: PUSH
16637: EMPTY
16638: LIST
16639: LIST
16640: PUSH
16641: LD_INT 1
16643: NEG
16644: PUSH
16645: LD_INT 2
16647: NEG
16648: PUSH
16649: EMPTY
16650: LIST
16651: LIST
16652: PUSH
16653: LD_INT 0
16655: PUSH
16656: LD_INT 2
16658: NEG
16659: PUSH
16660: EMPTY
16661: LIST
16662: LIST
16663: PUSH
16664: LD_INT 1
16666: PUSH
16667: LD_INT 1
16669: NEG
16670: PUSH
16671: EMPTY
16672: LIST
16673: LIST
16674: PUSH
16675: LD_INT 2
16677: PUSH
16678: LD_INT 0
16680: PUSH
16681: EMPTY
16682: LIST
16683: LIST
16684: PUSH
16685: LD_INT 2
16687: PUSH
16688: LD_INT 1
16690: PUSH
16691: EMPTY
16692: LIST
16693: LIST
16694: PUSH
16695: LD_INT 2
16697: PUSH
16698: LD_INT 2
16700: PUSH
16701: EMPTY
16702: LIST
16703: LIST
16704: PUSH
16705: LD_INT 1
16707: PUSH
16708: LD_INT 2
16710: PUSH
16711: EMPTY
16712: LIST
16713: LIST
16714: PUSH
16715: LD_INT 0
16717: PUSH
16718: LD_INT 2
16720: PUSH
16721: EMPTY
16722: LIST
16723: LIST
16724: PUSH
16725: LD_INT 1
16727: NEG
16728: PUSH
16729: LD_INT 1
16731: PUSH
16732: EMPTY
16733: LIST
16734: LIST
16735: PUSH
16736: LD_INT 2
16738: NEG
16739: PUSH
16740: LD_INT 0
16742: PUSH
16743: EMPTY
16744: LIST
16745: LIST
16746: PUSH
16747: LD_INT 2
16749: NEG
16750: PUSH
16751: LD_INT 1
16753: NEG
16754: PUSH
16755: EMPTY
16756: LIST
16757: LIST
16758: PUSH
16759: LD_INT 2
16761: NEG
16762: PUSH
16763: LD_INT 2
16765: NEG
16766: PUSH
16767: EMPTY
16768: LIST
16769: LIST
16770: PUSH
16771: EMPTY
16772: LIST
16773: LIST
16774: LIST
16775: LIST
16776: LIST
16777: LIST
16778: LIST
16779: LIST
16780: LIST
16781: LIST
16782: LIST
16783: LIST
16784: LIST
16785: LIST
16786: LIST
16787: LIST
16788: LIST
16789: LIST
16790: LIST
16791: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
16792: LD_ADDR_VAR 0 19
16796: PUSH
16797: LD_INT 0
16799: PUSH
16800: LD_INT 0
16802: PUSH
16803: EMPTY
16804: LIST
16805: LIST
16806: PUSH
16807: LD_INT 0
16809: PUSH
16810: LD_INT 1
16812: NEG
16813: PUSH
16814: EMPTY
16815: LIST
16816: LIST
16817: PUSH
16818: LD_INT 1
16820: PUSH
16821: LD_INT 0
16823: PUSH
16824: EMPTY
16825: LIST
16826: LIST
16827: PUSH
16828: LD_INT 1
16830: PUSH
16831: LD_INT 1
16833: PUSH
16834: EMPTY
16835: LIST
16836: LIST
16837: PUSH
16838: LD_INT 0
16840: PUSH
16841: LD_INT 1
16843: PUSH
16844: EMPTY
16845: LIST
16846: LIST
16847: PUSH
16848: LD_INT 1
16850: NEG
16851: PUSH
16852: LD_INT 0
16854: PUSH
16855: EMPTY
16856: LIST
16857: LIST
16858: PUSH
16859: LD_INT 1
16861: NEG
16862: PUSH
16863: LD_INT 1
16865: NEG
16866: PUSH
16867: EMPTY
16868: LIST
16869: LIST
16870: PUSH
16871: LD_INT 1
16873: NEG
16874: PUSH
16875: LD_INT 2
16877: NEG
16878: PUSH
16879: EMPTY
16880: LIST
16881: LIST
16882: PUSH
16883: LD_INT 0
16885: PUSH
16886: LD_INT 2
16888: NEG
16889: PUSH
16890: EMPTY
16891: LIST
16892: LIST
16893: PUSH
16894: LD_INT 1
16896: PUSH
16897: LD_INT 1
16899: NEG
16900: PUSH
16901: EMPTY
16902: LIST
16903: LIST
16904: PUSH
16905: LD_INT 2
16907: PUSH
16908: LD_INT 0
16910: PUSH
16911: EMPTY
16912: LIST
16913: LIST
16914: PUSH
16915: LD_INT 2
16917: PUSH
16918: LD_INT 1
16920: PUSH
16921: EMPTY
16922: LIST
16923: LIST
16924: PUSH
16925: LD_INT 2
16927: PUSH
16928: LD_INT 2
16930: PUSH
16931: EMPTY
16932: LIST
16933: LIST
16934: PUSH
16935: LD_INT 1
16937: PUSH
16938: LD_INT 2
16940: PUSH
16941: EMPTY
16942: LIST
16943: LIST
16944: PUSH
16945: LD_INT 0
16947: PUSH
16948: LD_INT 2
16950: PUSH
16951: EMPTY
16952: LIST
16953: LIST
16954: PUSH
16955: LD_INT 1
16957: NEG
16958: PUSH
16959: LD_INT 1
16961: PUSH
16962: EMPTY
16963: LIST
16964: LIST
16965: PUSH
16966: LD_INT 2
16968: NEG
16969: PUSH
16970: LD_INT 0
16972: PUSH
16973: EMPTY
16974: LIST
16975: LIST
16976: PUSH
16977: LD_INT 2
16979: NEG
16980: PUSH
16981: LD_INT 1
16983: NEG
16984: PUSH
16985: EMPTY
16986: LIST
16987: LIST
16988: PUSH
16989: LD_INT 2
16991: NEG
16992: PUSH
16993: LD_INT 2
16995: NEG
16996: PUSH
16997: EMPTY
16998: LIST
16999: LIST
17000: PUSH
17001: EMPTY
17002: LIST
17003: LIST
17004: LIST
17005: LIST
17006: LIST
17007: LIST
17008: LIST
17009: LIST
17010: LIST
17011: LIST
17012: LIST
17013: LIST
17014: LIST
17015: LIST
17016: LIST
17017: LIST
17018: LIST
17019: LIST
17020: LIST
17021: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
17022: LD_ADDR_VAR 0 20
17026: PUSH
17027: LD_INT 0
17029: PUSH
17030: LD_INT 0
17032: PUSH
17033: EMPTY
17034: LIST
17035: LIST
17036: PUSH
17037: LD_INT 0
17039: PUSH
17040: LD_INT 1
17042: NEG
17043: PUSH
17044: EMPTY
17045: LIST
17046: LIST
17047: PUSH
17048: LD_INT 1
17050: PUSH
17051: LD_INT 0
17053: PUSH
17054: EMPTY
17055: LIST
17056: LIST
17057: PUSH
17058: LD_INT 1
17060: PUSH
17061: LD_INT 1
17063: PUSH
17064: EMPTY
17065: LIST
17066: LIST
17067: PUSH
17068: LD_INT 0
17070: PUSH
17071: LD_INT 1
17073: PUSH
17074: EMPTY
17075: LIST
17076: LIST
17077: PUSH
17078: LD_INT 1
17080: NEG
17081: PUSH
17082: LD_INT 0
17084: PUSH
17085: EMPTY
17086: LIST
17087: LIST
17088: PUSH
17089: LD_INT 1
17091: NEG
17092: PUSH
17093: LD_INT 1
17095: NEG
17096: PUSH
17097: EMPTY
17098: LIST
17099: LIST
17100: PUSH
17101: LD_INT 1
17103: NEG
17104: PUSH
17105: LD_INT 2
17107: NEG
17108: PUSH
17109: EMPTY
17110: LIST
17111: LIST
17112: PUSH
17113: LD_INT 0
17115: PUSH
17116: LD_INT 2
17118: NEG
17119: PUSH
17120: EMPTY
17121: LIST
17122: LIST
17123: PUSH
17124: LD_INT 1
17126: PUSH
17127: LD_INT 1
17129: NEG
17130: PUSH
17131: EMPTY
17132: LIST
17133: LIST
17134: PUSH
17135: LD_INT 2
17137: PUSH
17138: LD_INT 0
17140: PUSH
17141: EMPTY
17142: LIST
17143: LIST
17144: PUSH
17145: LD_INT 2
17147: PUSH
17148: LD_INT 1
17150: PUSH
17151: EMPTY
17152: LIST
17153: LIST
17154: PUSH
17155: LD_INT 2
17157: PUSH
17158: LD_INT 2
17160: PUSH
17161: EMPTY
17162: LIST
17163: LIST
17164: PUSH
17165: LD_INT 1
17167: PUSH
17168: LD_INT 2
17170: PUSH
17171: EMPTY
17172: LIST
17173: LIST
17174: PUSH
17175: LD_INT 0
17177: PUSH
17178: LD_INT 2
17180: PUSH
17181: EMPTY
17182: LIST
17183: LIST
17184: PUSH
17185: LD_INT 1
17187: NEG
17188: PUSH
17189: LD_INT 1
17191: PUSH
17192: EMPTY
17193: LIST
17194: LIST
17195: PUSH
17196: LD_INT 2
17198: NEG
17199: PUSH
17200: LD_INT 0
17202: PUSH
17203: EMPTY
17204: LIST
17205: LIST
17206: PUSH
17207: LD_INT 2
17209: NEG
17210: PUSH
17211: LD_INT 1
17213: NEG
17214: PUSH
17215: EMPTY
17216: LIST
17217: LIST
17218: PUSH
17219: LD_INT 2
17221: NEG
17222: PUSH
17223: LD_INT 2
17225: NEG
17226: PUSH
17227: EMPTY
17228: LIST
17229: LIST
17230: PUSH
17231: EMPTY
17232: LIST
17233: LIST
17234: LIST
17235: LIST
17236: LIST
17237: LIST
17238: LIST
17239: LIST
17240: LIST
17241: LIST
17242: LIST
17243: LIST
17244: LIST
17245: LIST
17246: LIST
17247: LIST
17248: LIST
17249: LIST
17250: LIST
17251: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
17252: LD_ADDR_VAR 0 21
17256: PUSH
17257: LD_INT 0
17259: PUSH
17260: LD_INT 0
17262: PUSH
17263: EMPTY
17264: LIST
17265: LIST
17266: PUSH
17267: LD_INT 0
17269: PUSH
17270: LD_INT 1
17272: NEG
17273: PUSH
17274: EMPTY
17275: LIST
17276: LIST
17277: PUSH
17278: LD_INT 1
17280: PUSH
17281: LD_INT 0
17283: PUSH
17284: EMPTY
17285: LIST
17286: LIST
17287: PUSH
17288: LD_INT 1
17290: PUSH
17291: LD_INT 1
17293: PUSH
17294: EMPTY
17295: LIST
17296: LIST
17297: PUSH
17298: LD_INT 0
17300: PUSH
17301: LD_INT 1
17303: PUSH
17304: EMPTY
17305: LIST
17306: LIST
17307: PUSH
17308: LD_INT 1
17310: NEG
17311: PUSH
17312: LD_INT 0
17314: PUSH
17315: EMPTY
17316: LIST
17317: LIST
17318: PUSH
17319: LD_INT 1
17321: NEG
17322: PUSH
17323: LD_INT 1
17325: NEG
17326: PUSH
17327: EMPTY
17328: LIST
17329: LIST
17330: PUSH
17331: LD_INT 1
17333: NEG
17334: PUSH
17335: LD_INT 2
17337: NEG
17338: PUSH
17339: EMPTY
17340: LIST
17341: LIST
17342: PUSH
17343: LD_INT 0
17345: PUSH
17346: LD_INT 2
17348: NEG
17349: PUSH
17350: EMPTY
17351: LIST
17352: LIST
17353: PUSH
17354: LD_INT 1
17356: PUSH
17357: LD_INT 1
17359: NEG
17360: PUSH
17361: EMPTY
17362: LIST
17363: LIST
17364: PUSH
17365: LD_INT 2
17367: PUSH
17368: LD_INT 0
17370: PUSH
17371: EMPTY
17372: LIST
17373: LIST
17374: PUSH
17375: LD_INT 2
17377: PUSH
17378: LD_INT 1
17380: PUSH
17381: EMPTY
17382: LIST
17383: LIST
17384: PUSH
17385: LD_INT 2
17387: PUSH
17388: LD_INT 2
17390: PUSH
17391: EMPTY
17392: LIST
17393: LIST
17394: PUSH
17395: LD_INT 1
17397: PUSH
17398: LD_INT 2
17400: PUSH
17401: EMPTY
17402: LIST
17403: LIST
17404: PUSH
17405: LD_INT 0
17407: PUSH
17408: LD_INT 2
17410: PUSH
17411: EMPTY
17412: LIST
17413: LIST
17414: PUSH
17415: LD_INT 1
17417: NEG
17418: PUSH
17419: LD_INT 1
17421: PUSH
17422: EMPTY
17423: LIST
17424: LIST
17425: PUSH
17426: LD_INT 2
17428: NEG
17429: PUSH
17430: LD_INT 0
17432: PUSH
17433: EMPTY
17434: LIST
17435: LIST
17436: PUSH
17437: LD_INT 2
17439: NEG
17440: PUSH
17441: LD_INT 1
17443: NEG
17444: PUSH
17445: EMPTY
17446: LIST
17447: LIST
17448: PUSH
17449: LD_INT 2
17451: NEG
17452: PUSH
17453: LD_INT 2
17455: NEG
17456: PUSH
17457: EMPTY
17458: LIST
17459: LIST
17460: PUSH
17461: EMPTY
17462: LIST
17463: LIST
17464: LIST
17465: LIST
17466: LIST
17467: LIST
17468: LIST
17469: LIST
17470: LIST
17471: LIST
17472: LIST
17473: LIST
17474: LIST
17475: LIST
17476: LIST
17477: LIST
17478: LIST
17479: LIST
17480: LIST
17481: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
17482: LD_ADDR_VAR 0 22
17486: PUSH
17487: LD_INT 0
17489: PUSH
17490: LD_INT 0
17492: PUSH
17493: EMPTY
17494: LIST
17495: LIST
17496: PUSH
17497: LD_INT 0
17499: PUSH
17500: LD_INT 1
17502: NEG
17503: PUSH
17504: EMPTY
17505: LIST
17506: LIST
17507: PUSH
17508: LD_INT 1
17510: PUSH
17511: LD_INT 0
17513: PUSH
17514: EMPTY
17515: LIST
17516: LIST
17517: PUSH
17518: LD_INT 1
17520: PUSH
17521: LD_INT 1
17523: PUSH
17524: EMPTY
17525: LIST
17526: LIST
17527: PUSH
17528: LD_INT 0
17530: PUSH
17531: LD_INT 1
17533: PUSH
17534: EMPTY
17535: LIST
17536: LIST
17537: PUSH
17538: LD_INT 1
17540: NEG
17541: PUSH
17542: LD_INT 0
17544: PUSH
17545: EMPTY
17546: LIST
17547: LIST
17548: PUSH
17549: LD_INT 1
17551: NEG
17552: PUSH
17553: LD_INT 1
17555: NEG
17556: PUSH
17557: EMPTY
17558: LIST
17559: LIST
17560: PUSH
17561: LD_INT 1
17563: NEG
17564: PUSH
17565: LD_INT 2
17567: NEG
17568: PUSH
17569: EMPTY
17570: LIST
17571: LIST
17572: PUSH
17573: LD_INT 0
17575: PUSH
17576: LD_INT 2
17578: NEG
17579: PUSH
17580: EMPTY
17581: LIST
17582: LIST
17583: PUSH
17584: LD_INT 1
17586: PUSH
17587: LD_INT 1
17589: NEG
17590: PUSH
17591: EMPTY
17592: LIST
17593: LIST
17594: PUSH
17595: LD_INT 2
17597: PUSH
17598: LD_INT 0
17600: PUSH
17601: EMPTY
17602: LIST
17603: LIST
17604: PUSH
17605: LD_INT 2
17607: PUSH
17608: LD_INT 1
17610: PUSH
17611: EMPTY
17612: LIST
17613: LIST
17614: PUSH
17615: LD_INT 2
17617: PUSH
17618: LD_INT 2
17620: PUSH
17621: EMPTY
17622: LIST
17623: LIST
17624: PUSH
17625: LD_INT 1
17627: PUSH
17628: LD_INT 2
17630: PUSH
17631: EMPTY
17632: LIST
17633: LIST
17634: PUSH
17635: LD_INT 0
17637: PUSH
17638: LD_INT 2
17640: PUSH
17641: EMPTY
17642: LIST
17643: LIST
17644: PUSH
17645: LD_INT 1
17647: NEG
17648: PUSH
17649: LD_INT 1
17651: PUSH
17652: EMPTY
17653: LIST
17654: LIST
17655: PUSH
17656: LD_INT 2
17658: NEG
17659: PUSH
17660: LD_INT 0
17662: PUSH
17663: EMPTY
17664: LIST
17665: LIST
17666: PUSH
17667: LD_INT 2
17669: NEG
17670: PUSH
17671: LD_INT 1
17673: NEG
17674: PUSH
17675: EMPTY
17676: LIST
17677: LIST
17678: PUSH
17679: LD_INT 2
17681: NEG
17682: PUSH
17683: LD_INT 2
17685: NEG
17686: PUSH
17687: EMPTY
17688: LIST
17689: LIST
17690: PUSH
17691: EMPTY
17692: LIST
17693: LIST
17694: LIST
17695: LIST
17696: LIST
17697: LIST
17698: LIST
17699: LIST
17700: LIST
17701: LIST
17702: LIST
17703: LIST
17704: LIST
17705: LIST
17706: LIST
17707: LIST
17708: LIST
17709: LIST
17710: LIST
17711: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
17712: LD_ADDR_VAR 0 23
17716: PUSH
17717: LD_INT 0
17719: PUSH
17720: LD_INT 0
17722: PUSH
17723: EMPTY
17724: LIST
17725: LIST
17726: PUSH
17727: LD_INT 0
17729: PUSH
17730: LD_INT 1
17732: NEG
17733: PUSH
17734: EMPTY
17735: LIST
17736: LIST
17737: PUSH
17738: LD_INT 1
17740: PUSH
17741: LD_INT 0
17743: PUSH
17744: EMPTY
17745: LIST
17746: LIST
17747: PUSH
17748: LD_INT 1
17750: PUSH
17751: LD_INT 1
17753: PUSH
17754: EMPTY
17755: LIST
17756: LIST
17757: PUSH
17758: LD_INT 0
17760: PUSH
17761: LD_INT 1
17763: PUSH
17764: EMPTY
17765: LIST
17766: LIST
17767: PUSH
17768: LD_INT 1
17770: NEG
17771: PUSH
17772: LD_INT 0
17774: PUSH
17775: EMPTY
17776: LIST
17777: LIST
17778: PUSH
17779: LD_INT 1
17781: NEG
17782: PUSH
17783: LD_INT 1
17785: NEG
17786: PUSH
17787: EMPTY
17788: LIST
17789: LIST
17790: PUSH
17791: LD_INT 1
17793: NEG
17794: PUSH
17795: LD_INT 2
17797: NEG
17798: PUSH
17799: EMPTY
17800: LIST
17801: LIST
17802: PUSH
17803: LD_INT 0
17805: PUSH
17806: LD_INT 2
17808: NEG
17809: PUSH
17810: EMPTY
17811: LIST
17812: LIST
17813: PUSH
17814: LD_INT 1
17816: PUSH
17817: LD_INT 1
17819: NEG
17820: PUSH
17821: EMPTY
17822: LIST
17823: LIST
17824: PUSH
17825: LD_INT 2
17827: PUSH
17828: LD_INT 0
17830: PUSH
17831: EMPTY
17832: LIST
17833: LIST
17834: PUSH
17835: LD_INT 2
17837: PUSH
17838: LD_INT 1
17840: PUSH
17841: EMPTY
17842: LIST
17843: LIST
17844: PUSH
17845: LD_INT 2
17847: PUSH
17848: LD_INT 2
17850: PUSH
17851: EMPTY
17852: LIST
17853: LIST
17854: PUSH
17855: LD_INT 1
17857: PUSH
17858: LD_INT 2
17860: PUSH
17861: EMPTY
17862: LIST
17863: LIST
17864: PUSH
17865: LD_INT 0
17867: PUSH
17868: LD_INT 2
17870: PUSH
17871: EMPTY
17872: LIST
17873: LIST
17874: PUSH
17875: LD_INT 1
17877: NEG
17878: PUSH
17879: LD_INT 1
17881: PUSH
17882: EMPTY
17883: LIST
17884: LIST
17885: PUSH
17886: LD_INT 2
17888: NEG
17889: PUSH
17890: LD_INT 0
17892: PUSH
17893: EMPTY
17894: LIST
17895: LIST
17896: PUSH
17897: LD_INT 2
17899: NEG
17900: PUSH
17901: LD_INT 1
17903: NEG
17904: PUSH
17905: EMPTY
17906: LIST
17907: LIST
17908: PUSH
17909: LD_INT 2
17911: NEG
17912: PUSH
17913: LD_INT 2
17915: NEG
17916: PUSH
17917: EMPTY
17918: LIST
17919: LIST
17920: PUSH
17921: LD_INT 2
17923: NEG
17924: PUSH
17925: LD_INT 3
17927: NEG
17928: PUSH
17929: EMPTY
17930: LIST
17931: LIST
17932: PUSH
17933: LD_INT 1
17935: NEG
17936: PUSH
17937: LD_INT 3
17939: NEG
17940: PUSH
17941: EMPTY
17942: LIST
17943: LIST
17944: PUSH
17945: LD_INT 1
17947: PUSH
17948: LD_INT 2
17950: NEG
17951: PUSH
17952: EMPTY
17953: LIST
17954: LIST
17955: PUSH
17956: LD_INT 2
17958: PUSH
17959: LD_INT 1
17961: NEG
17962: PUSH
17963: EMPTY
17964: LIST
17965: LIST
17966: PUSH
17967: EMPTY
17968: LIST
17969: LIST
17970: LIST
17971: LIST
17972: LIST
17973: LIST
17974: LIST
17975: LIST
17976: LIST
17977: LIST
17978: LIST
17979: LIST
17980: LIST
17981: LIST
17982: LIST
17983: LIST
17984: LIST
17985: LIST
17986: LIST
17987: LIST
17988: LIST
17989: LIST
17990: LIST
17991: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
17992: LD_ADDR_VAR 0 24
17996: PUSH
17997: LD_INT 0
17999: PUSH
18000: LD_INT 0
18002: PUSH
18003: EMPTY
18004: LIST
18005: LIST
18006: PUSH
18007: LD_INT 0
18009: PUSH
18010: LD_INT 1
18012: NEG
18013: PUSH
18014: EMPTY
18015: LIST
18016: LIST
18017: PUSH
18018: LD_INT 1
18020: PUSH
18021: LD_INT 0
18023: PUSH
18024: EMPTY
18025: LIST
18026: LIST
18027: PUSH
18028: LD_INT 1
18030: PUSH
18031: LD_INT 1
18033: PUSH
18034: EMPTY
18035: LIST
18036: LIST
18037: PUSH
18038: LD_INT 0
18040: PUSH
18041: LD_INT 1
18043: PUSH
18044: EMPTY
18045: LIST
18046: LIST
18047: PUSH
18048: LD_INT 1
18050: NEG
18051: PUSH
18052: LD_INT 0
18054: PUSH
18055: EMPTY
18056: LIST
18057: LIST
18058: PUSH
18059: LD_INT 1
18061: NEG
18062: PUSH
18063: LD_INT 1
18065: NEG
18066: PUSH
18067: EMPTY
18068: LIST
18069: LIST
18070: PUSH
18071: LD_INT 1
18073: NEG
18074: PUSH
18075: LD_INT 2
18077: NEG
18078: PUSH
18079: EMPTY
18080: LIST
18081: LIST
18082: PUSH
18083: LD_INT 0
18085: PUSH
18086: LD_INT 2
18088: NEG
18089: PUSH
18090: EMPTY
18091: LIST
18092: LIST
18093: PUSH
18094: LD_INT 1
18096: PUSH
18097: LD_INT 1
18099: NEG
18100: PUSH
18101: EMPTY
18102: LIST
18103: LIST
18104: PUSH
18105: LD_INT 2
18107: PUSH
18108: LD_INT 0
18110: PUSH
18111: EMPTY
18112: LIST
18113: LIST
18114: PUSH
18115: LD_INT 2
18117: PUSH
18118: LD_INT 1
18120: PUSH
18121: EMPTY
18122: LIST
18123: LIST
18124: PUSH
18125: LD_INT 2
18127: PUSH
18128: LD_INT 2
18130: PUSH
18131: EMPTY
18132: LIST
18133: LIST
18134: PUSH
18135: LD_INT 1
18137: PUSH
18138: LD_INT 2
18140: PUSH
18141: EMPTY
18142: LIST
18143: LIST
18144: PUSH
18145: LD_INT 0
18147: PUSH
18148: LD_INT 2
18150: PUSH
18151: EMPTY
18152: LIST
18153: LIST
18154: PUSH
18155: LD_INT 1
18157: NEG
18158: PUSH
18159: LD_INT 1
18161: PUSH
18162: EMPTY
18163: LIST
18164: LIST
18165: PUSH
18166: LD_INT 2
18168: NEG
18169: PUSH
18170: LD_INT 0
18172: PUSH
18173: EMPTY
18174: LIST
18175: LIST
18176: PUSH
18177: LD_INT 2
18179: NEG
18180: PUSH
18181: LD_INT 1
18183: NEG
18184: PUSH
18185: EMPTY
18186: LIST
18187: LIST
18188: PUSH
18189: LD_INT 2
18191: NEG
18192: PUSH
18193: LD_INT 2
18195: NEG
18196: PUSH
18197: EMPTY
18198: LIST
18199: LIST
18200: PUSH
18201: LD_INT 1
18203: PUSH
18204: LD_INT 2
18206: NEG
18207: PUSH
18208: EMPTY
18209: LIST
18210: LIST
18211: PUSH
18212: LD_INT 2
18214: PUSH
18215: LD_INT 1
18217: NEG
18218: PUSH
18219: EMPTY
18220: LIST
18221: LIST
18222: PUSH
18223: LD_INT 3
18225: PUSH
18226: LD_INT 1
18228: PUSH
18229: EMPTY
18230: LIST
18231: LIST
18232: PUSH
18233: LD_INT 3
18235: PUSH
18236: LD_INT 2
18238: PUSH
18239: EMPTY
18240: LIST
18241: LIST
18242: PUSH
18243: EMPTY
18244: LIST
18245: LIST
18246: LIST
18247: LIST
18248: LIST
18249: LIST
18250: LIST
18251: LIST
18252: LIST
18253: LIST
18254: LIST
18255: LIST
18256: LIST
18257: LIST
18258: LIST
18259: LIST
18260: LIST
18261: LIST
18262: LIST
18263: LIST
18264: LIST
18265: LIST
18266: LIST
18267: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
18268: LD_ADDR_VAR 0 25
18272: PUSH
18273: LD_INT 0
18275: PUSH
18276: LD_INT 0
18278: PUSH
18279: EMPTY
18280: LIST
18281: LIST
18282: PUSH
18283: LD_INT 0
18285: PUSH
18286: LD_INT 1
18288: NEG
18289: PUSH
18290: EMPTY
18291: LIST
18292: LIST
18293: PUSH
18294: LD_INT 1
18296: PUSH
18297: LD_INT 0
18299: PUSH
18300: EMPTY
18301: LIST
18302: LIST
18303: PUSH
18304: LD_INT 1
18306: PUSH
18307: LD_INT 1
18309: PUSH
18310: EMPTY
18311: LIST
18312: LIST
18313: PUSH
18314: LD_INT 0
18316: PUSH
18317: LD_INT 1
18319: PUSH
18320: EMPTY
18321: LIST
18322: LIST
18323: PUSH
18324: LD_INT 1
18326: NEG
18327: PUSH
18328: LD_INT 0
18330: PUSH
18331: EMPTY
18332: LIST
18333: LIST
18334: PUSH
18335: LD_INT 1
18337: NEG
18338: PUSH
18339: LD_INT 1
18341: NEG
18342: PUSH
18343: EMPTY
18344: LIST
18345: LIST
18346: PUSH
18347: LD_INT 1
18349: NEG
18350: PUSH
18351: LD_INT 2
18353: NEG
18354: PUSH
18355: EMPTY
18356: LIST
18357: LIST
18358: PUSH
18359: LD_INT 0
18361: PUSH
18362: LD_INT 2
18364: NEG
18365: PUSH
18366: EMPTY
18367: LIST
18368: LIST
18369: PUSH
18370: LD_INT 1
18372: PUSH
18373: LD_INT 1
18375: NEG
18376: PUSH
18377: EMPTY
18378: LIST
18379: LIST
18380: PUSH
18381: LD_INT 2
18383: PUSH
18384: LD_INT 0
18386: PUSH
18387: EMPTY
18388: LIST
18389: LIST
18390: PUSH
18391: LD_INT 2
18393: PUSH
18394: LD_INT 1
18396: PUSH
18397: EMPTY
18398: LIST
18399: LIST
18400: PUSH
18401: LD_INT 2
18403: PUSH
18404: LD_INT 2
18406: PUSH
18407: EMPTY
18408: LIST
18409: LIST
18410: PUSH
18411: LD_INT 1
18413: PUSH
18414: LD_INT 2
18416: PUSH
18417: EMPTY
18418: LIST
18419: LIST
18420: PUSH
18421: LD_INT 0
18423: PUSH
18424: LD_INT 2
18426: PUSH
18427: EMPTY
18428: LIST
18429: LIST
18430: PUSH
18431: LD_INT 1
18433: NEG
18434: PUSH
18435: LD_INT 1
18437: PUSH
18438: EMPTY
18439: LIST
18440: LIST
18441: PUSH
18442: LD_INT 2
18444: NEG
18445: PUSH
18446: LD_INT 0
18448: PUSH
18449: EMPTY
18450: LIST
18451: LIST
18452: PUSH
18453: LD_INT 2
18455: NEG
18456: PUSH
18457: LD_INT 1
18459: NEG
18460: PUSH
18461: EMPTY
18462: LIST
18463: LIST
18464: PUSH
18465: LD_INT 2
18467: NEG
18468: PUSH
18469: LD_INT 2
18471: NEG
18472: PUSH
18473: EMPTY
18474: LIST
18475: LIST
18476: PUSH
18477: LD_INT 3
18479: PUSH
18480: LD_INT 1
18482: PUSH
18483: EMPTY
18484: LIST
18485: LIST
18486: PUSH
18487: LD_INT 3
18489: PUSH
18490: LD_INT 2
18492: PUSH
18493: EMPTY
18494: LIST
18495: LIST
18496: PUSH
18497: LD_INT 2
18499: PUSH
18500: LD_INT 3
18502: PUSH
18503: EMPTY
18504: LIST
18505: LIST
18506: PUSH
18507: LD_INT 1
18509: PUSH
18510: LD_INT 3
18512: PUSH
18513: EMPTY
18514: LIST
18515: LIST
18516: PUSH
18517: EMPTY
18518: LIST
18519: LIST
18520: LIST
18521: LIST
18522: LIST
18523: LIST
18524: LIST
18525: LIST
18526: LIST
18527: LIST
18528: LIST
18529: LIST
18530: LIST
18531: LIST
18532: LIST
18533: LIST
18534: LIST
18535: LIST
18536: LIST
18537: LIST
18538: LIST
18539: LIST
18540: LIST
18541: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
18542: LD_ADDR_VAR 0 26
18546: PUSH
18547: LD_INT 0
18549: PUSH
18550: LD_INT 0
18552: PUSH
18553: EMPTY
18554: LIST
18555: LIST
18556: PUSH
18557: LD_INT 0
18559: PUSH
18560: LD_INT 1
18562: NEG
18563: PUSH
18564: EMPTY
18565: LIST
18566: LIST
18567: PUSH
18568: LD_INT 1
18570: PUSH
18571: LD_INT 0
18573: PUSH
18574: EMPTY
18575: LIST
18576: LIST
18577: PUSH
18578: LD_INT 1
18580: PUSH
18581: LD_INT 1
18583: PUSH
18584: EMPTY
18585: LIST
18586: LIST
18587: PUSH
18588: LD_INT 0
18590: PUSH
18591: LD_INT 1
18593: PUSH
18594: EMPTY
18595: LIST
18596: LIST
18597: PUSH
18598: LD_INT 1
18600: NEG
18601: PUSH
18602: LD_INT 0
18604: PUSH
18605: EMPTY
18606: LIST
18607: LIST
18608: PUSH
18609: LD_INT 1
18611: NEG
18612: PUSH
18613: LD_INT 1
18615: NEG
18616: PUSH
18617: EMPTY
18618: LIST
18619: LIST
18620: PUSH
18621: LD_INT 1
18623: NEG
18624: PUSH
18625: LD_INT 2
18627: NEG
18628: PUSH
18629: EMPTY
18630: LIST
18631: LIST
18632: PUSH
18633: LD_INT 0
18635: PUSH
18636: LD_INT 2
18638: NEG
18639: PUSH
18640: EMPTY
18641: LIST
18642: LIST
18643: PUSH
18644: LD_INT 1
18646: PUSH
18647: LD_INT 1
18649: NEG
18650: PUSH
18651: EMPTY
18652: LIST
18653: LIST
18654: PUSH
18655: LD_INT 2
18657: PUSH
18658: LD_INT 0
18660: PUSH
18661: EMPTY
18662: LIST
18663: LIST
18664: PUSH
18665: LD_INT 2
18667: PUSH
18668: LD_INT 1
18670: PUSH
18671: EMPTY
18672: LIST
18673: LIST
18674: PUSH
18675: LD_INT 2
18677: PUSH
18678: LD_INT 2
18680: PUSH
18681: EMPTY
18682: LIST
18683: LIST
18684: PUSH
18685: LD_INT 1
18687: PUSH
18688: LD_INT 2
18690: PUSH
18691: EMPTY
18692: LIST
18693: LIST
18694: PUSH
18695: LD_INT 0
18697: PUSH
18698: LD_INT 2
18700: PUSH
18701: EMPTY
18702: LIST
18703: LIST
18704: PUSH
18705: LD_INT 1
18707: NEG
18708: PUSH
18709: LD_INT 1
18711: PUSH
18712: EMPTY
18713: LIST
18714: LIST
18715: PUSH
18716: LD_INT 2
18718: NEG
18719: PUSH
18720: LD_INT 0
18722: PUSH
18723: EMPTY
18724: LIST
18725: LIST
18726: PUSH
18727: LD_INT 2
18729: NEG
18730: PUSH
18731: LD_INT 1
18733: NEG
18734: PUSH
18735: EMPTY
18736: LIST
18737: LIST
18738: PUSH
18739: LD_INT 2
18741: NEG
18742: PUSH
18743: LD_INT 2
18745: NEG
18746: PUSH
18747: EMPTY
18748: LIST
18749: LIST
18750: PUSH
18751: LD_INT 2
18753: PUSH
18754: LD_INT 3
18756: PUSH
18757: EMPTY
18758: LIST
18759: LIST
18760: PUSH
18761: LD_INT 1
18763: PUSH
18764: LD_INT 3
18766: PUSH
18767: EMPTY
18768: LIST
18769: LIST
18770: PUSH
18771: LD_INT 1
18773: NEG
18774: PUSH
18775: LD_INT 2
18777: PUSH
18778: EMPTY
18779: LIST
18780: LIST
18781: PUSH
18782: LD_INT 2
18784: NEG
18785: PUSH
18786: LD_INT 1
18788: PUSH
18789: EMPTY
18790: LIST
18791: LIST
18792: PUSH
18793: EMPTY
18794: LIST
18795: LIST
18796: LIST
18797: LIST
18798: LIST
18799: LIST
18800: LIST
18801: LIST
18802: LIST
18803: LIST
18804: LIST
18805: LIST
18806: LIST
18807: LIST
18808: LIST
18809: LIST
18810: LIST
18811: LIST
18812: LIST
18813: LIST
18814: LIST
18815: LIST
18816: LIST
18817: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
18818: LD_ADDR_VAR 0 27
18822: PUSH
18823: LD_INT 0
18825: PUSH
18826: LD_INT 0
18828: PUSH
18829: EMPTY
18830: LIST
18831: LIST
18832: PUSH
18833: LD_INT 0
18835: PUSH
18836: LD_INT 1
18838: NEG
18839: PUSH
18840: EMPTY
18841: LIST
18842: LIST
18843: PUSH
18844: LD_INT 1
18846: PUSH
18847: LD_INT 0
18849: PUSH
18850: EMPTY
18851: LIST
18852: LIST
18853: PUSH
18854: LD_INT 1
18856: PUSH
18857: LD_INT 1
18859: PUSH
18860: EMPTY
18861: LIST
18862: LIST
18863: PUSH
18864: LD_INT 0
18866: PUSH
18867: LD_INT 1
18869: PUSH
18870: EMPTY
18871: LIST
18872: LIST
18873: PUSH
18874: LD_INT 1
18876: NEG
18877: PUSH
18878: LD_INT 0
18880: PUSH
18881: EMPTY
18882: LIST
18883: LIST
18884: PUSH
18885: LD_INT 1
18887: NEG
18888: PUSH
18889: LD_INT 1
18891: NEG
18892: PUSH
18893: EMPTY
18894: LIST
18895: LIST
18896: PUSH
18897: LD_INT 1
18899: NEG
18900: PUSH
18901: LD_INT 2
18903: NEG
18904: PUSH
18905: EMPTY
18906: LIST
18907: LIST
18908: PUSH
18909: LD_INT 0
18911: PUSH
18912: LD_INT 2
18914: NEG
18915: PUSH
18916: EMPTY
18917: LIST
18918: LIST
18919: PUSH
18920: LD_INT 1
18922: PUSH
18923: LD_INT 1
18925: NEG
18926: PUSH
18927: EMPTY
18928: LIST
18929: LIST
18930: PUSH
18931: LD_INT 2
18933: PUSH
18934: LD_INT 0
18936: PUSH
18937: EMPTY
18938: LIST
18939: LIST
18940: PUSH
18941: LD_INT 2
18943: PUSH
18944: LD_INT 1
18946: PUSH
18947: EMPTY
18948: LIST
18949: LIST
18950: PUSH
18951: LD_INT 2
18953: PUSH
18954: LD_INT 2
18956: PUSH
18957: EMPTY
18958: LIST
18959: LIST
18960: PUSH
18961: LD_INT 1
18963: PUSH
18964: LD_INT 2
18966: PUSH
18967: EMPTY
18968: LIST
18969: LIST
18970: PUSH
18971: LD_INT 0
18973: PUSH
18974: LD_INT 2
18976: PUSH
18977: EMPTY
18978: LIST
18979: LIST
18980: PUSH
18981: LD_INT 1
18983: NEG
18984: PUSH
18985: LD_INT 1
18987: PUSH
18988: EMPTY
18989: LIST
18990: LIST
18991: PUSH
18992: LD_INT 2
18994: NEG
18995: PUSH
18996: LD_INT 0
18998: PUSH
18999: EMPTY
19000: LIST
19001: LIST
19002: PUSH
19003: LD_INT 2
19005: NEG
19006: PUSH
19007: LD_INT 1
19009: NEG
19010: PUSH
19011: EMPTY
19012: LIST
19013: LIST
19014: PUSH
19015: LD_INT 2
19017: NEG
19018: PUSH
19019: LD_INT 2
19021: NEG
19022: PUSH
19023: EMPTY
19024: LIST
19025: LIST
19026: PUSH
19027: LD_INT 1
19029: NEG
19030: PUSH
19031: LD_INT 2
19033: PUSH
19034: EMPTY
19035: LIST
19036: LIST
19037: PUSH
19038: LD_INT 2
19040: NEG
19041: PUSH
19042: LD_INT 1
19044: PUSH
19045: EMPTY
19046: LIST
19047: LIST
19048: PUSH
19049: LD_INT 3
19051: NEG
19052: PUSH
19053: LD_INT 1
19055: NEG
19056: PUSH
19057: EMPTY
19058: LIST
19059: LIST
19060: PUSH
19061: LD_INT 3
19063: NEG
19064: PUSH
19065: LD_INT 2
19067: NEG
19068: PUSH
19069: EMPTY
19070: LIST
19071: LIST
19072: PUSH
19073: EMPTY
19074: LIST
19075: LIST
19076: LIST
19077: LIST
19078: LIST
19079: LIST
19080: LIST
19081: LIST
19082: LIST
19083: LIST
19084: LIST
19085: LIST
19086: LIST
19087: LIST
19088: LIST
19089: LIST
19090: LIST
19091: LIST
19092: LIST
19093: LIST
19094: LIST
19095: LIST
19096: LIST
19097: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
19098: LD_ADDR_VAR 0 28
19102: PUSH
19103: LD_INT 0
19105: PUSH
19106: LD_INT 0
19108: PUSH
19109: EMPTY
19110: LIST
19111: LIST
19112: PUSH
19113: LD_INT 0
19115: PUSH
19116: LD_INT 1
19118: NEG
19119: PUSH
19120: EMPTY
19121: LIST
19122: LIST
19123: PUSH
19124: LD_INT 1
19126: PUSH
19127: LD_INT 0
19129: PUSH
19130: EMPTY
19131: LIST
19132: LIST
19133: PUSH
19134: LD_INT 1
19136: PUSH
19137: LD_INT 1
19139: PUSH
19140: EMPTY
19141: LIST
19142: LIST
19143: PUSH
19144: LD_INT 0
19146: PUSH
19147: LD_INT 1
19149: PUSH
19150: EMPTY
19151: LIST
19152: LIST
19153: PUSH
19154: LD_INT 1
19156: NEG
19157: PUSH
19158: LD_INT 0
19160: PUSH
19161: EMPTY
19162: LIST
19163: LIST
19164: PUSH
19165: LD_INT 1
19167: NEG
19168: PUSH
19169: LD_INT 1
19171: NEG
19172: PUSH
19173: EMPTY
19174: LIST
19175: LIST
19176: PUSH
19177: LD_INT 1
19179: NEG
19180: PUSH
19181: LD_INT 2
19183: NEG
19184: PUSH
19185: EMPTY
19186: LIST
19187: LIST
19188: PUSH
19189: LD_INT 0
19191: PUSH
19192: LD_INT 2
19194: NEG
19195: PUSH
19196: EMPTY
19197: LIST
19198: LIST
19199: PUSH
19200: LD_INT 1
19202: PUSH
19203: LD_INT 1
19205: NEG
19206: PUSH
19207: EMPTY
19208: LIST
19209: LIST
19210: PUSH
19211: LD_INT 2
19213: PUSH
19214: LD_INT 0
19216: PUSH
19217: EMPTY
19218: LIST
19219: LIST
19220: PUSH
19221: LD_INT 2
19223: PUSH
19224: LD_INT 1
19226: PUSH
19227: EMPTY
19228: LIST
19229: LIST
19230: PUSH
19231: LD_INT 2
19233: PUSH
19234: LD_INT 2
19236: PUSH
19237: EMPTY
19238: LIST
19239: LIST
19240: PUSH
19241: LD_INT 1
19243: PUSH
19244: LD_INT 2
19246: PUSH
19247: EMPTY
19248: LIST
19249: LIST
19250: PUSH
19251: LD_INT 0
19253: PUSH
19254: LD_INT 2
19256: PUSH
19257: EMPTY
19258: LIST
19259: LIST
19260: PUSH
19261: LD_INT 1
19263: NEG
19264: PUSH
19265: LD_INT 1
19267: PUSH
19268: EMPTY
19269: LIST
19270: LIST
19271: PUSH
19272: LD_INT 2
19274: NEG
19275: PUSH
19276: LD_INT 0
19278: PUSH
19279: EMPTY
19280: LIST
19281: LIST
19282: PUSH
19283: LD_INT 2
19285: NEG
19286: PUSH
19287: LD_INT 1
19289: NEG
19290: PUSH
19291: EMPTY
19292: LIST
19293: LIST
19294: PUSH
19295: LD_INT 2
19297: NEG
19298: PUSH
19299: LD_INT 2
19301: NEG
19302: PUSH
19303: EMPTY
19304: LIST
19305: LIST
19306: PUSH
19307: LD_INT 2
19309: NEG
19310: PUSH
19311: LD_INT 3
19313: NEG
19314: PUSH
19315: EMPTY
19316: LIST
19317: LIST
19318: PUSH
19319: LD_INT 1
19321: NEG
19322: PUSH
19323: LD_INT 3
19325: NEG
19326: PUSH
19327: EMPTY
19328: LIST
19329: LIST
19330: PUSH
19331: LD_INT 3
19333: NEG
19334: PUSH
19335: LD_INT 1
19337: NEG
19338: PUSH
19339: EMPTY
19340: LIST
19341: LIST
19342: PUSH
19343: LD_INT 3
19345: NEG
19346: PUSH
19347: LD_INT 2
19349: NEG
19350: PUSH
19351: EMPTY
19352: LIST
19353: LIST
19354: PUSH
19355: EMPTY
19356: LIST
19357: LIST
19358: LIST
19359: LIST
19360: LIST
19361: LIST
19362: LIST
19363: LIST
19364: LIST
19365: LIST
19366: LIST
19367: LIST
19368: LIST
19369: LIST
19370: LIST
19371: LIST
19372: LIST
19373: LIST
19374: LIST
19375: LIST
19376: LIST
19377: LIST
19378: LIST
19379: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
19380: LD_ADDR_VAR 0 29
19384: PUSH
19385: LD_INT 0
19387: PUSH
19388: LD_INT 0
19390: PUSH
19391: EMPTY
19392: LIST
19393: LIST
19394: PUSH
19395: LD_INT 0
19397: PUSH
19398: LD_INT 1
19400: NEG
19401: PUSH
19402: EMPTY
19403: LIST
19404: LIST
19405: PUSH
19406: LD_INT 1
19408: PUSH
19409: LD_INT 0
19411: PUSH
19412: EMPTY
19413: LIST
19414: LIST
19415: PUSH
19416: LD_INT 1
19418: PUSH
19419: LD_INT 1
19421: PUSH
19422: EMPTY
19423: LIST
19424: LIST
19425: PUSH
19426: LD_INT 0
19428: PUSH
19429: LD_INT 1
19431: PUSH
19432: EMPTY
19433: LIST
19434: LIST
19435: PUSH
19436: LD_INT 1
19438: NEG
19439: PUSH
19440: LD_INT 0
19442: PUSH
19443: EMPTY
19444: LIST
19445: LIST
19446: PUSH
19447: LD_INT 1
19449: NEG
19450: PUSH
19451: LD_INT 1
19453: NEG
19454: PUSH
19455: EMPTY
19456: LIST
19457: LIST
19458: PUSH
19459: LD_INT 1
19461: NEG
19462: PUSH
19463: LD_INT 2
19465: NEG
19466: PUSH
19467: EMPTY
19468: LIST
19469: LIST
19470: PUSH
19471: LD_INT 0
19473: PUSH
19474: LD_INT 2
19476: NEG
19477: PUSH
19478: EMPTY
19479: LIST
19480: LIST
19481: PUSH
19482: LD_INT 1
19484: PUSH
19485: LD_INT 1
19487: NEG
19488: PUSH
19489: EMPTY
19490: LIST
19491: LIST
19492: PUSH
19493: LD_INT 2
19495: PUSH
19496: LD_INT 0
19498: PUSH
19499: EMPTY
19500: LIST
19501: LIST
19502: PUSH
19503: LD_INT 2
19505: PUSH
19506: LD_INT 1
19508: PUSH
19509: EMPTY
19510: LIST
19511: LIST
19512: PUSH
19513: LD_INT 1
19515: PUSH
19516: LD_INT 2
19518: PUSH
19519: EMPTY
19520: LIST
19521: LIST
19522: PUSH
19523: LD_INT 0
19525: PUSH
19526: LD_INT 2
19528: PUSH
19529: EMPTY
19530: LIST
19531: LIST
19532: PUSH
19533: LD_INT 1
19535: NEG
19536: PUSH
19537: LD_INT 1
19539: PUSH
19540: EMPTY
19541: LIST
19542: LIST
19543: PUSH
19544: LD_INT 2
19546: NEG
19547: PUSH
19548: LD_INT 1
19550: NEG
19551: PUSH
19552: EMPTY
19553: LIST
19554: LIST
19555: PUSH
19556: LD_INT 2
19558: NEG
19559: PUSH
19560: LD_INT 2
19562: NEG
19563: PUSH
19564: EMPTY
19565: LIST
19566: LIST
19567: PUSH
19568: LD_INT 2
19570: NEG
19571: PUSH
19572: LD_INT 3
19574: NEG
19575: PUSH
19576: EMPTY
19577: LIST
19578: LIST
19579: PUSH
19580: LD_INT 2
19582: PUSH
19583: LD_INT 1
19585: NEG
19586: PUSH
19587: EMPTY
19588: LIST
19589: LIST
19590: PUSH
19591: LD_INT 3
19593: PUSH
19594: LD_INT 1
19596: PUSH
19597: EMPTY
19598: LIST
19599: LIST
19600: PUSH
19601: LD_INT 1
19603: PUSH
19604: LD_INT 3
19606: PUSH
19607: EMPTY
19608: LIST
19609: LIST
19610: PUSH
19611: LD_INT 1
19613: NEG
19614: PUSH
19615: LD_INT 2
19617: PUSH
19618: EMPTY
19619: LIST
19620: LIST
19621: PUSH
19622: LD_INT 3
19624: NEG
19625: PUSH
19626: LD_INT 2
19628: NEG
19629: PUSH
19630: EMPTY
19631: LIST
19632: LIST
19633: PUSH
19634: EMPTY
19635: LIST
19636: LIST
19637: LIST
19638: LIST
19639: LIST
19640: LIST
19641: LIST
19642: LIST
19643: LIST
19644: LIST
19645: LIST
19646: LIST
19647: LIST
19648: LIST
19649: LIST
19650: LIST
19651: LIST
19652: LIST
19653: LIST
19654: LIST
19655: LIST
19656: LIST
19657: LIST
19658: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
19659: LD_ADDR_VAR 0 30
19663: PUSH
19664: LD_INT 0
19666: PUSH
19667: LD_INT 0
19669: PUSH
19670: EMPTY
19671: LIST
19672: LIST
19673: PUSH
19674: LD_INT 0
19676: PUSH
19677: LD_INT 1
19679: NEG
19680: PUSH
19681: EMPTY
19682: LIST
19683: LIST
19684: PUSH
19685: LD_INT 1
19687: PUSH
19688: LD_INT 0
19690: PUSH
19691: EMPTY
19692: LIST
19693: LIST
19694: PUSH
19695: LD_INT 1
19697: PUSH
19698: LD_INT 1
19700: PUSH
19701: EMPTY
19702: LIST
19703: LIST
19704: PUSH
19705: LD_INT 0
19707: PUSH
19708: LD_INT 1
19710: PUSH
19711: EMPTY
19712: LIST
19713: LIST
19714: PUSH
19715: LD_INT 1
19717: NEG
19718: PUSH
19719: LD_INT 0
19721: PUSH
19722: EMPTY
19723: LIST
19724: LIST
19725: PUSH
19726: LD_INT 1
19728: NEG
19729: PUSH
19730: LD_INT 1
19732: NEG
19733: PUSH
19734: EMPTY
19735: LIST
19736: LIST
19737: PUSH
19738: LD_INT 1
19740: NEG
19741: PUSH
19742: LD_INT 2
19744: NEG
19745: PUSH
19746: EMPTY
19747: LIST
19748: LIST
19749: PUSH
19750: LD_INT 0
19752: PUSH
19753: LD_INT 2
19755: NEG
19756: PUSH
19757: EMPTY
19758: LIST
19759: LIST
19760: PUSH
19761: LD_INT 1
19763: PUSH
19764: LD_INT 1
19766: NEG
19767: PUSH
19768: EMPTY
19769: LIST
19770: LIST
19771: PUSH
19772: LD_INT 2
19774: PUSH
19775: LD_INT 0
19777: PUSH
19778: EMPTY
19779: LIST
19780: LIST
19781: PUSH
19782: LD_INT 2
19784: PUSH
19785: LD_INT 1
19787: PUSH
19788: EMPTY
19789: LIST
19790: LIST
19791: PUSH
19792: LD_INT 2
19794: PUSH
19795: LD_INT 2
19797: PUSH
19798: EMPTY
19799: LIST
19800: LIST
19801: PUSH
19802: LD_INT 1
19804: PUSH
19805: LD_INT 2
19807: PUSH
19808: EMPTY
19809: LIST
19810: LIST
19811: PUSH
19812: LD_INT 1
19814: NEG
19815: PUSH
19816: LD_INT 1
19818: PUSH
19819: EMPTY
19820: LIST
19821: LIST
19822: PUSH
19823: LD_INT 2
19825: NEG
19826: PUSH
19827: LD_INT 0
19829: PUSH
19830: EMPTY
19831: LIST
19832: LIST
19833: PUSH
19834: LD_INT 2
19836: NEG
19837: PUSH
19838: LD_INT 1
19840: NEG
19841: PUSH
19842: EMPTY
19843: LIST
19844: LIST
19845: PUSH
19846: LD_INT 1
19848: NEG
19849: PUSH
19850: LD_INT 3
19852: NEG
19853: PUSH
19854: EMPTY
19855: LIST
19856: LIST
19857: PUSH
19858: LD_INT 1
19860: PUSH
19861: LD_INT 2
19863: NEG
19864: PUSH
19865: EMPTY
19866: LIST
19867: LIST
19868: PUSH
19869: LD_INT 3
19871: PUSH
19872: LD_INT 2
19874: PUSH
19875: EMPTY
19876: LIST
19877: LIST
19878: PUSH
19879: LD_INT 2
19881: PUSH
19882: LD_INT 3
19884: PUSH
19885: EMPTY
19886: LIST
19887: LIST
19888: PUSH
19889: LD_INT 2
19891: NEG
19892: PUSH
19893: LD_INT 1
19895: PUSH
19896: EMPTY
19897: LIST
19898: LIST
19899: PUSH
19900: LD_INT 3
19902: NEG
19903: PUSH
19904: LD_INT 1
19906: NEG
19907: PUSH
19908: EMPTY
19909: LIST
19910: LIST
19911: PUSH
19912: EMPTY
19913: LIST
19914: LIST
19915: LIST
19916: LIST
19917: LIST
19918: LIST
19919: LIST
19920: LIST
19921: LIST
19922: LIST
19923: LIST
19924: LIST
19925: LIST
19926: LIST
19927: LIST
19928: LIST
19929: LIST
19930: LIST
19931: LIST
19932: LIST
19933: LIST
19934: LIST
19935: LIST
19936: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
19937: LD_ADDR_VAR 0 31
19941: PUSH
19942: LD_INT 0
19944: PUSH
19945: LD_INT 0
19947: PUSH
19948: EMPTY
19949: LIST
19950: LIST
19951: PUSH
19952: LD_INT 0
19954: PUSH
19955: LD_INT 1
19957: NEG
19958: PUSH
19959: EMPTY
19960: LIST
19961: LIST
19962: PUSH
19963: LD_INT 1
19965: PUSH
19966: LD_INT 0
19968: PUSH
19969: EMPTY
19970: LIST
19971: LIST
19972: PUSH
19973: LD_INT 1
19975: PUSH
19976: LD_INT 1
19978: PUSH
19979: EMPTY
19980: LIST
19981: LIST
19982: PUSH
19983: LD_INT 0
19985: PUSH
19986: LD_INT 1
19988: PUSH
19989: EMPTY
19990: LIST
19991: LIST
19992: PUSH
19993: LD_INT 1
19995: NEG
19996: PUSH
19997: LD_INT 0
19999: PUSH
20000: EMPTY
20001: LIST
20002: LIST
20003: PUSH
20004: LD_INT 1
20006: NEG
20007: PUSH
20008: LD_INT 1
20010: NEG
20011: PUSH
20012: EMPTY
20013: LIST
20014: LIST
20015: PUSH
20016: LD_INT 1
20018: NEG
20019: PUSH
20020: LD_INT 2
20022: NEG
20023: PUSH
20024: EMPTY
20025: LIST
20026: LIST
20027: PUSH
20028: LD_INT 1
20030: PUSH
20031: LD_INT 1
20033: NEG
20034: PUSH
20035: EMPTY
20036: LIST
20037: LIST
20038: PUSH
20039: LD_INT 2
20041: PUSH
20042: LD_INT 0
20044: PUSH
20045: EMPTY
20046: LIST
20047: LIST
20048: PUSH
20049: LD_INT 2
20051: PUSH
20052: LD_INT 1
20054: PUSH
20055: EMPTY
20056: LIST
20057: LIST
20058: PUSH
20059: LD_INT 2
20061: PUSH
20062: LD_INT 2
20064: PUSH
20065: EMPTY
20066: LIST
20067: LIST
20068: PUSH
20069: LD_INT 1
20071: PUSH
20072: LD_INT 2
20074: PUSH
20075: EMPTY
20076: LIST
20077: LIST
20078: PUSH
20079: LD_INT 0
20081: PUSH
20082: LD_INT 2
20084: PUSH
20085: EMPTY
20086: LIST
20087: LIST
20088: PUSH
20089: LD_INT 1
20091: NEG
20092: PUSH
20093: LD_INT 1
20095: PUSH
20096: EMPTY
20097: LIST
20098: LIST
20099: PUSH
20100: LD_INT 2
20102: NEG
20103: PUSH
20104: LD_INT 1
20106: NEG
20107: PUSH
20108: EMPTY
20109: LIST
20110: LIST
20111: PUSH
20112: LD_INT 2
20114: NEG
20115: PUSH
20116: LD_INT 2
20118: NEG
20119: PUSH
20120: EMPTY
20121: LIST
20122: LIST
20123: PUSH
20124: LD_INT 2
20126: NEG
20127: PUSH
20128: LD_INT 3
20130: NEG
20131: PUSH
20132: EMPTY
20133: LIST
20134: LIST
20135: PUSH
20136: LD_INT 2
20138: PUSH
20139: LD_INT 1
20141: NEG
20142: PUSH
20143: EMPTY
20144: LIST
20145: LIST
20146: PUSH
20147: LD_INT 3
20149: PUSH
20150: LD_INT 1
20152: PUSH
20153: EMPTY
20154: LIST
20155: LIST
20156: PUSH
20157: LD_INT 1
20159: PUSH
20160: LD_INT 3
20162: PUSH
20163: EMPTY
20164: LIST
20165: LIST
20166: PUSH
20167: LD_INT 1
20169: NEG
20170: PUSH
20171: LD_INT 2
20173: PUSH
20174: EMPTY
20175: LIST
20176: LIST
20177: PUSH
20178: LD_INT 3
20180: NEG
20181: PUSH
20182: LD_INT 2
20184: NEG
20185: PUSH
20186: EMPTY
20187: LIST
20188: LIST
20189: PUSH
20190: EMPTY
20191: LIST
20192: LIST
20193: LIST
20194: LIST
20195: LIST
20196: LIST
20197: LIST
20198: LIST
20199: LIST
20200: LIST
20201: LIST
20202: LIST
20203: LIST
20204: LIST
20205: LIST
20206: LIST
20207: LIST
20208: LIST
20209: LIST
20210: LIST
20211: LIST
20212: LIST
20213: LIST
20214: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
20215: LD_ADDR_VAR 0 32
20219: PUSH
20220: LD_INT 0
20222: PUSH
20223: LD_INT 0
20225: PUSH
20226: EMPTY
20227: LIST
20228: LIST
20229: PUSH
20230: LD_INT 0
20232: PUSH
20233: LD_INT 1
20235: NEG
20236: PUSH
20237: EMPTY
20238: LIST
20239: LIST
20240: PUSH
20241: LD_INT 1
20243: PUSH
20244: LD_INT 0
20246: PUSH
20247: EMPTY
20248: LIST
20249: LIST
20250: PUSH
20251: LD_INT 1
20253: PUSH
20254: LD_INT 1
20256: PUSH
20257: EMPTY
20258: LIST
20259: LIST
20260: PUSH
20261: LD_INT 0
20263: PUSH
20264: LD_INT 1
20266: PUSH
20267: EMPTY
20268: LIST
20269: LIST
20270: PUSH
20271: LD_INT 1
20273: NEG
20274: PUSH
20275: LD_INT 0
20277: PUSH
20278: EMPTY
20279: LIST
20280: LIST
20281: PUSH
20282: LD_INT 1
20284: NEG
20285: PUSH
20286: LD_INT 1
20288: NEG
20289: PUSH
20290: EMPTY
20291: LIST
20292: LIST
20293: PUSH
20294: LD_INT 1
20296: NEG
20297: PUSH
20298: LD_INT 2
20300: NEG
20301: PUSH
20302: EMPTY
20303: LIST
20304: LIST
20305: PUSH
20306: LD_INT 0
20308: PUSH
20309: LD_INT 2
20311: NEG
20312: PUSH
20313: EMPTY
20314: LIST
20315: LIST
20316: PUSH
20317: LD_INT 1
20319: PUSH
20320: LD_INT 1
20322: NEG
20323: PUSH
20324: EMPTY
20325: LIST
20326: LIST
20327: PUSH
20328: LD_INT 2
20330: PUSH
20331: LD_INT 1
20333: PUSH
20334: EMPTY
20335: LIST
20336: LIST
20337: PUSH
20338: LD_INT 2
20340: PUSH
20341: LD_INT 2
20343: PUSH
20344: EMPTY
20345: LIST
20346: LIST
20347: PUSH
20348: LD_INT 1
20350: PUSH
20351: LD_INT 2
20353: PUSH
20354: EMPTY
20355: LIST
20356: LIST
20357: PUSH
20358: LD_INT 0
20360: PUSH
20361: LD_INT 2
20363: PUSH
20364: EMPTY
20365: LIST
20366: LIST
20367: PUSH
20368: LD_INT 1
20370: NEG
20371: PUSH
20372: LD_INT 1
20374: PUSH
20375: EMPTY
20376: LIST
20377: LIST
20378: PUSH
20379: LD_INT 2
20381: NEG
20382: PUSH
20383: LD_INT 0
20385: PUSH
20386: EMPTY
20387: LIST
20388: LIST
20389: PUSH
20390: LD_INT 2
20392: NEG
20393: PUSH
20394: LD_INT 1
20396: NEG
20397: PUSH
20398: EMPTY
20399: LIST
20400: LIST
20401: PUSH
20402: LD_INT 1
20404: NEG
20405: PUSH
20406: LD_INT 3
20408: NEG
20409: PUSH
20410: EMPTY
20411: LIST
20412: LIST
20413: PUSH
20414: LD_INT 1
20416: PUSH
20417: LD_INT 2
20419: NEG
20420: PUSH
20421: EMPTY
20422: LIST
20423: LIST
20424: PUSH
20425: LD_INT 3
20427: PUSH
20428: LD_INT 2
20430: PUSH
20431: EMPTY
20432: LIST
20433: LIST
20434: PUSH
20435: LD_INT 2
20437: PUSH
20438: LD_INT 3
20440: PUSH
20441: EMPTY
20442: LIST
20443: LIST
20444: PUSH
20445: LD_INT 2
20447: NEG
20448: PUSH
20449: LD_INT 1
20451: PUSH
20452: EMPTY
20453: LIST
20454: LIST
20455: PUSH
20456: LD_INT 3
20458: NEG
20459: PUSH
20460: LD_INT 1
20462: NEG
20463: PUSH
20464: EMPTY
20465: LIST
20466: LIST
20467: PUSH
20468: EMPTY
20469: LIST
20470: LIST
20471: LIST
20472: LIST
20473: LIST
20474: LIST
20475: LIST
20476: LIST
20477: LIST
20478: LIST
20479: LIST
20480: LIST
20481: LIST
20482: LIST
20483: LIST
20484: LIST
20485: LIST
20486: LIST
20487: LIST
20488: LIST
20489: LIST
20490: LIST
20491: LIST
20492: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
20493: LD_ADDR_VAR 0 33
20497: PUSH
20498: LD_INT 0
20500: PUSH
20501: LD_INT 0
20503: PUSH
20504: EMPTY
20505: LIST
20506: LIST
20507: PUSH
20508: LD_INT 0
20510: PUSH
20511: LD_INT 1
20513: NEG
20514: PUSH
20515: EMPTY
20516: LIST
20517: LIST
20518: PUSH
20519: LD_INT 1
20521: PUSH
20522: LD_INT 0
20524: PUSH
20525: EMPTY
20526: LIST
20527: LIST
20528: PUSH
20529: LD_INT 1
20531: PUSH
20532: LD_INT 1
20534: PUSH
20535: EMPTY
20536: LIST
20537: LIST
20538: PUSH
20539: LD_INT 0
20541: PUSH
20542: LD_INT 1
20544: PUSH
20545: EMPTY
20546: LIST
20547: LIST
20548: PUSH
20549: LD_INT 1
20551: NEG
20552: PUSH
20553: LD_INT 0
20555: PUSH
20556: EMPTY
20557: LIST
20558: LIST
20559: PUSH
20560: LD_INT 1
20562: NEG
20563: PUSH
20564: LD_INT 1
20566: NEG
20567: PUSH
20568: EMPTY
20569: LIST
20570: LIST
20571: PUSH
20572: LD_INT 1
20574: NEG
20575: PUSH
20576: LD_INT 2
20578: NEG
20579: PUSH
20580: EMPTY
20581: LIST
20582: LIST
20583: PUSH
20584: LD_INT 1
20586: PUSH
20587: LD_INT 1
20589: NEG
20590: PUSH
20591: EMPTY
20592: LIST
20593: LIST
20594: PUSH
20595: LD_INT 2
20597: PUSH
20598: LD_INT 0
20600: PUSH
20601: EMPTY
20602: LIST
20603: LIST
20604: PUSH
20605: LD_INT 2
20607: PUSH
20608: LD_INT 1
20610: PUSH
20611: EMPTY
20612: LIST
20613: LIST
20614: PUSH
20615: LD_INT 1
20617: PUSH
20618: LD_INT 2
20620: PUSH
20621: EMPTY
20622: LIST
20623: LIST
20624: PUSH
20625: LD_INT 0
20627: PUSH
20628: LD_INT 2
20630: PUSH
20631: EMPTY
20632: LIST
20633: LIST
20634: PUSH
20635: LD_INT 1
20637: NEG
20638: PUSH
20639: LD_INT 1
20641: PUSH
20642: EMPTY
20643: LIST
20644: LIST
20645: PUSH
20646: LD_INT 2
20648: NEG
20649: PUSH
20650: LD_INT 0
20652: PUSH
20653: EMPTY
20654: LIST
20655: LIST
20656: PUSH
20657: LD_INT 2
20659: NEG
20660: PUSH
20661: LD_INT 1
20663: NEG
20664: PUSH
20665: EMPTY
20666: LIST
20667: LIST
20668: PUSH
20669: LD_INT 2
20671: NEG
20672: PUSH
20673: LD_INT 2
20675: NEG
20676: PUSH
20677: EMPTY
20678: LIST
20679: LIST
20680: PUSH
20681: LD_INT 2
20683: NEG
20684: PUSH
20685: LD_INT 3
20687: NEG
20688: PUSH
20689: EMPTY
20690: LIST
20691: LIST
20692: PUSH
20693: LD_INT 2
20695: PUSH
20696: LD_INT 1
20698: NEG
20699: PUSH
20700: EMPTY
20701: LIST
20702: LIST
20703: PUSH
20704: LD_INT 3
20706: PUSH
20707: LD_INT 1
20709: PUSH
20710: EMPTY
20711: LIST
20712: LIST
20713: PUSH
20714: LD_INT 1
20716: PUSH
20717: LD_INT 3
20719: PUSH
20720: EMPTY
20721: LIST
20722: LIST
20723: PUSH
20724: LD_INT 1
20726: NEG
20727: PUSH
20728: LD_INT 2
20730: PUSH
20731: EMPTY
20732: LIST
20733: LIST
20734: PUSH
20735: LD_INT 3
20737: NEG
20738: PUSH
20739: LD_INT 2
20741: NEG
20742: PUSH
20743: EMPTY
20744: LIST
20745: LIST
20746: PUSH
20747: EMPTY
20748: LIST
20749: LIST
20750: LIST
20751: LIST
20752: LIST
20753: LIST
20754: LIST
20755: LIST
20756: LIST
20757: LIST
20758: LIST
20759: LIST
20760: LIST
20761: LIST
20762: LIST
20763: LIST
20764: LIST
20765: LIST
20766: LIST
20767: LIST
20768: LIST
20769: LIST
20770: LIST
20771: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
20772: LD_ADDR_VAR 0 34
20776: PUSH
20777: LD_INT 0
20779: PUSH
20780: LD_INT 0
20782: PUSH
20783: EMPTY
20784: LIST
20785: LIST
20786: PUSH
20787: LD_INT 0
20789: PUSH
20790: LD_INT 1
20792: NEG
20793: PUSH
20794: EMPTY
20795: LIST
20796: LIST
20797: PUSH
20798: LD_INT 1
20800: PUSH
20801: LD_INT 0
20803: PUSH
20804: EMPTY
20805: LIST
20806: LIST
20807: PUSH
20808: LD_INT 1
20810: PUSH
20811: LD_INT 1
20813: PUSH
20814: EMPTY
20815: LIST
20816: LIST
20817: PUSH
20818: LD_INT 0
20820: PUSH
20821: LD_INT 1
20823: PUSH
20824: EMPTY
20825: LIST
20826: LIST
20827: PUSH
20828: LD_INT 1
20830: NEG
20831: PUSH
20832: LD_INT 0
20834: PUSH
20835: EMPTY
20836: LIST
20837: LIST
20838: PUSH
20839: LD_INT 1
20841: NEG
20842: PUSH
20843: LD_INT 1
20845: NEG
20846: PUSH
20847: EMPTY
20848: LIST
20849: LIST
20850: PUSH
20851: LD_INT 1
20853: NEG
20854: PUSH
20855: LD_INT 2
20857: NEG
20858: PUSH
20859: EMPTY
20860: LIST
20861: LIST
20862: PUSH
20863: LD_INT 0
20865: PUSH
20866: LD_INT 2
20868: NEG
20869: PUSH
20870: EMPTY
20871: LIST
20872: LIST
20873: PUSH
20874: LD_INT 1
20876: PUSH
20877: LD_INT 1
20879: NEG
20880: PUSH
20881: EMPTY
20882: LIST
20883: LIST
20884: PUSH
20885: LD_INT 2
20887: PUSH
20888: LD_INT 1
20890: PUSH
20891: EMPTY
20892: LIST
20893: LIST
20894: PUSH
20895: LD_INT 2
20897: PUSH
20898: LD_INT 2
20900: PUSH
20901: EMPTY
20902: LIST
20903: LIST
20904: PUSH
20905: LD_INT 1
20907: PUSH
20908: LD_INT 2
20910: PUSH
20911: EMPTY
20912: LIST
20913: LIST
20914: PUSH
20915: LD_INT 1
20917: NEG
20918: PUSH
20919: LD_INT 1
20921: PUSH
20922: EMPTY
20923: LIST
20924: LIST
20925: PUSH
20926: LD_INT 2
20928: NEG
20929: PUSH
20930: LD_INT 0
20932: PUSH
20933: EMPTY
20934: LIST
20935: LIST
20936: PUSH
20937: LD_INT 2
20939: NEG
20940: PUSH
20941: LD_INT 1
20943: NEG
20944: PUSH
20945: EMPTY
20946: LIST
20947: LIST
20948: PUSH
20949: LD_INT 2
20951: NEG
20952: PUSH
20953: LD_INT 2
20955: NEG
20956: PUSH
20957: EMPTY
20958: LIST
20959: LIST
20960: PUSH
20961: LD_INT 1
20963: NEG
20964: PUSH
20965: LD_INT 3
20967: NEG
20968: PUSH
20969: EMPTY
20970: LIST
20971: LIST
20972: PUSH
20973: LD_INT 1
20975: PUSH
20976: LD_INT 2
20978: NEG
20979: PUSH
20980: EMPTY
20981: LIST
20982: LIST
20983: PUSH
20984: LD_INT 3
20986: PUSH
20987: LD_INT 2
20989: PUSH
20990: EMPTY
20991: LIST
20992: LIST
20993: PUSH
20994: LD_INT 2
20996: PUSH
20997: LD_INT 3
20999: PUSH
21000: EMPTY
21001: LIST
21002: LIST
21003: PUSH
21004: LD_INT 2
21006: NEG
21007: PUSH
21008: LD_INT 1
21010: PUSH
21011: EMPTY
21012: LIST
21013: LIST
21014: PUSH
21015: LD_INT 3
21017: NEG
21018: PUSH
21019: LD_INT 1
21021: NEG
21022: PUSH
21023: EMPTY
21024: LIST
21025: LIST
21026: PUSH
21027: EMPTY
21028: LIST
21029: LIST
21030: LIST
21031: LIST
21032: LIST
21033: LIST
21034: LIST
21035: LIST
21036: LIST
21037: LIST
21038: LIST
21039: LIST
21040: LIST
21041: LIST
21042: LIST
21043: LIST
21044: LIST
21045: LIST
21046: LIST
21047: LIST
21048: LIST
21049: LIST
21050: LIST
21051: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
21052: LD_ADDR_VAR 0 35
21056: PUSH
21057: LD_INT 0
21059: PUSH
21060: LD_INT 0
21062: PUSH
21063: EMPTY
21064: LIST
21065: LIST
21066: PUSH
21067: LD_INT 0
21069: PUSH
21070: LD_INT 1
21072: NEG
21073: PUSH
21074: EMPTY
21075: LIST
21076: LIST
21077: PUSH
21078: LD_INT 1
21080: PUSH
21081: LD_INT 0
21083: PUSH
21084: EMPTY
21085: LIST
21086: LIST
21087: PUSH
21088: LD_INT 1
21090: PUSH
21091: LD_INT 1
21093: PUSH
21094: EMPTY
21095: LIST
21096: LIST
21097: PUSH
21098: LD_INT 0
21100: PUSH
21101: LD_INT 1
21103: PUSH
21104: EMPTY
21105: LIST
21106: LIST
21107: PUSH
21108: LD_INT 1
21110: NEG
21111: PUSH
21112: LD_INT 0
21114: PUSH
21115: EMPTY
21116: LIST
21117: LIST
21118: PUSH
21119: LD_INT 1
21121: NEG
21122: PUSH
21123: LD_INT 1
21125: NEG
21126: PUSH
21127: EMPTY
21128: LIST
21129: LIST
21130: PUSH
21131: LD_INT 2
21133: PUSH
21134: LD_INT 1
21136: PUSH
21137: EMPTY
21138: LIST
21139: LIST
21140: PUSH
21141: LD_INT 2
21143: NEG
21144: PUSH
21145: LD_INT 1
21147: NEG
21148: PUSH
21149: EMPTY
21150: LIST
21151: LIST
21152: PUSH
21153: EMPTY
21154: LIST
21155: LIST
21156: LIST
21157: LIST
21158: LIST
21159: LIST
21160: LIST
21161: LIST
21162: LIST
21163: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
21164: LD_ADDR_VAR 0 36
21168: PUSH
21169: LD_INT 0
21171: PUSH
21172: LD_INT 0
21174: PUSH
21175: EMPTY
21176: LIST
21177: LIST
21178: PUSH
21179: LD_INT 0
21181: PUSH
21182: LD_INT 1
21184: NEG
21185: PUSH
21186: EMPTY
21187: LIST
21188: LIST
21189: PUSH
21190: LD_INT 1
21192: PUSH
21193: LD_INT 0
21195: PUSH
21196: EMPTY
21197: LIST
21198: LIST
21199: PUSH
21200: LD_INT 1
21202: PUSH
21203: LD_INT 1
21205: PUSH
21206: EMPTY
21207: LIST
21208: LIST
21209: PUSH
21210: LD_INT 0
21212: PUSH
21213: LD_INT 1
21215: PUSH
21216: EMPTY
21217: LIST
21218: LIST
21219: PUSH
21220: LD_INT 1
21222: NEG
21223: PUSH
21224: LD_INT 0
21226: PUSH
21227: EMPTY
21228: LIST
21229: LIST
21230: PUSH
21231: LD_INT 1
21233: NEG
21234: PUSH
21235: LD_INT 1
21237: NEG
21238: PUSH
21239: EMPTY
21240: LIST
21241: LIST
21242: PUSH
21243: LD_INT 1
21245: NEG
21246: PUSH
21247: LD_INT 2
21249: NEG
21250: PUSH
21251: EMPTY
21252: LIST
21253: LIST
21254: PUSH
21255: LD_INT 1
21257: PUSH
21258: LD_INT 2
21260: PUSH
21261: EMPTY
21262: LIST
21263: LIST
21264: PUSH
21265: EMPTY
21266: LIST
21267: LIST
21268: LIST
21269: LIST
21270: LIST
21271: LIST
21272: LIST
21273: LIST
21274: LIST
21275: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
21276: LD_ADDR_VAR 0 37
21280: PUSH
21281: LD_INT 0
21283: PUSH
21284: LD_INT 0
21286: PUSH
21287: EMPTY
21288: LIST
21289: LIST
21290: PUSH
21291: LD_INT 0
21293: PUSH
21294: LD_INT 1
21296: NEG
21297: PUSH
21298: EMPTY
21299: LIST
21300: LIST
21301: PUSH
21302: LD_INT 1
21304: PUSH
21305: LD_INT 0
21307: PUSH
21308: EMPTY
21309: LIST
21310: LIST
21311: PUSH
21312: LD_INT 1
21314: PUSH
21315: LD_INT 1
21317: PUSH
21318: EMPTY
21319: LIST
21320: LIST
21321: PUSH
21322: LD_INT 0
21324: PUSH
21325: LD_INT 1
21327: PUSH
21328: EMPTY
21329: LIST
21330: LIST
21331: PUSH
21332: LD_INT 1
21334: NEG
21335: PUSH
21336: LD_INT 0
21338: PUSH
21339: EMPTY
21340: LIST
21341: LIST
21342: PUSH
21343: LD_INT 1
21345: NEG
21346: PUSH
21347: LD_INT 1
21349: NEG
21350: PUSH
21351: EMPTY
21352: LIST
21353: LIST
21354: PUSH
21355: LD_INT 1
21357: PUSH
21358: LD_INT 1
21360: NEG
21361: PUSH
21362: EMPTY
21363: LIST
21364: LIST
21365: PUSH
21366: LD_INT 1
21368: NEG
21369: PUSH
21370: LD_INT 1
21372: PUSH
21373: EMPTY
21374: LIST
21375: LIST
21376: PUSH
21377: EMPTY
21378: LIST
21379: LIST
21380: LIST
21381: LIST
21382: LIST
21383: LIST
21384: LIST
21385: LIST
21386: LIST
21387: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
21388: LD_ADDR_VAR 0 38
21392: PUSH
21393: LD_INT 0
21395: PUSH
21396: LD_INT 0
21398: PUSH
21399: EMPTY
21400: LIST
21401: LIST
21402: PUSH
21403: LD_INT 0
21405: PUSH
21406: LD_INT 1
21408: NEG
21409: PUSH
21410: EMPTY
21411: LIST
21412: LIST
21413: PUSH
21414: LD_INT 1
21416: PUSH
21417: LD_INT 0
21419: PUSH
21420: EMPTY
21421: LIST
21422: LIST
21423: PUSH
21424: LD_INT 1
21426: PUSH
21427: LD_INT 1
21429: PUSH
21430: EMPTY
21431: LIST
21432: LIST
21433: PUSH
21434: LD_INT 0
21436: PUSH
21437: LD_INT 1
21439: PUSH
21440: EMPTY
21441: LIST
21442: LIST
21443: PUSH
21444: LD_INT 1
21446: NEG
21447: PUSH
21448: LD_INT 0
21450: PUSH
21451: EMPTY
21452: LIST
21453: LIST
21454: PUSH
21455: LD_INT 1
21457: NEG
21458: PUSH
21459: LD_INT 1
21461: NEG
21462: PUSH
21463: EMPTY
21464: LIST
21465: LIST
21466: PUSH
21467: LD_INT 2
21469: PUSH
21470: LD_INT 1
21472: PUSH
21473: EMPTY
21474: LIST
21475: LIST
21476: PUSH
21477: LD_INT 2
21479: NEG
21480: PUSH
21481: LD_INT 1
21483: NEG
21484: PUSH
21485: EMPTY
21486: LIST
21487: LIST
21488: PUSH
21489: EMPTY
21490: LIST
21491: LIST
21492: LIST
21493: LIST
21494: LIST
21495: LIST
21496: LIST
21497: LIST
21498: LIST
21499: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
21500: LD_ADDR_VAR 0 39
21504: PUSH
21505: LD_INT 0
21507: PUSH
21508: LD_INT 0
21510: PUSH
21511: EMPTY
21512: LIST
21513: LIST
21514: PUSH
21515: LD_INT 0
21517: PUSH
21518: LD_INT 1
21520: NEG
21521: PUSH
21522: EMPTY
21523: LIST
21524: LIST
21525: PUSH
21526: LD_INT 1
21528: PUSH
21529: LD_INT 0
21531: PUSH
21532: EMPTY
21533: LIST
21534: LIST
21535: PUSH
21536: LD_INT 1
21538: PUSH
21539: LD_INT 1
21541: PUSH
21542: EMPTY
21543: LIST
21544: LIST
21545: PUSH
21546: LD_INT 0
21548: PUSH
21549: LD_INT 1
21551: PUSH
21552: EMPTY
21553: LIST
21554: LIST
21555: PUSH
21556: LD_INT 1
21558: NEG
21559: PUSH
21560: LD_INT 0
21562: PUSH
21563: EMPTY
21564: LIST
21565: LIST
21566: PUSH
21567: LD_INT 1
21569: NEG
21570: PUSH
21571: LD_INT 1
21573: NEG
21574: PUSH
21575: EMPTY
21576: LIST
21577: LIST
21578: PUSH
21579: LD_INT 1
21581: NEG
21582: PUSH
21583: LD_INT 2
21585: NEG
21586: PUSH
21587: EMPTY
21588: LIST
21589: LIST
21590: PUSH
21591: LD_INT 1
21593: PUSH
21594: LD_INT 2
21596: PUSH
21597: EMPTY
21598: LIST
21599: LIST
21600: PUSH
21601: EMPTY
21602: LIST
21603: LIST
21604: LIST
21605: LIST
21606: LIST
21607: LIST
21608: LIST
21609: LIST
21610: LIST
21611: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
21612: LD_ADDR_VAR 0 40
21616: PUSH
21617: LD_INT 0
21619: PUSH
21620: LD_INT 0
21622: PUSH
21623: EMPTY
21624: LIST
21625: LIST
21626: PUSH
21627: LD_INT 0
21629: PUSH
21630: LD_INT 1
21632: NEG
21633: PUSH
21634: EMPTY
21635: LIST
21636: LIST
21637: PUSH
21638: LD_INT 1
21640: PUSH
21641: LD_INT 0
21643: PUSH
21644: EMPTY
21645: LIST
21646: LIST
21647: PUSH
21648: LD_INT 1
21650: PUSH
21651: LD_INT 1
21653: PUSH
21654: EMPTY
21655: LIST
21656: LIST
21657: PUSH
21658: LD_INT 0
21660: PUSH
21661: LD_INT 1
21663: PUSH
21664: EMPTY
21665: LIST
21666: LIST
21667: PUSH
21668: LD_INT 1
21670: NEG
21671: PUSH
21672: LD_INT 0
21674: PUSH
21675: EMPTY
21676: LIST
21677: LIST
21678: PUSH
21679: LD_INT 1
21681: NEG
21682: PUSH
21683: LD_INT 1
21685: NEG
21686: PUSH
21687: EMPTY
21688: LIST
21689: LIST
21690: PUSH
21691: LD_INT 1
21693: PUSH
21694: LD_INT 1
21696: NEG
21697: PUSH
21698: EMPTY
21699: LIST
21700: LIST
21701: PUSH
21702: LD_INT 1
21704: NEG
21705: PUSH
21706: LD_INT 1
21708: PUSH
21709: EMPTY
21710: LIST
21711: LIST
21712: PUSH
21713: EMPTY
21714: LIST
21715: LIST
21716: LIST
21717: LIST
21718: LIST
21719: LIST
21720: LIST
21721: LIST
21722: LIST
21723: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
21724: LD_ADDR_VAR 0 41
21728: PUSH
21729: LD_INT 0
21731: PUSH
21732: LD_INT 0
21734: PUSH
21735: EMPTY
21736: LIST
21737: LIST
21738: PUSH
21739: LD_INT 0
21741: PUSH
21742: LD_INT 1
21744: NEG
21745: PUSH
21746: EMPTY
21747: LIST
21748: LIST
21749: PUSH
21750: LD_INT 1
21752: PUSH
21753: LD_INT 0
21755: PUSH
21756: EMPTY
21757: LIST
21758: LIST
21759: PUSH
21760: LD_INT 1
21762: PUSH
21763: LD_INT 1
21765: PUSH
21766: EMPTY
21767: LIST
21768: LIST
21769: PUSH
21770: LD_INT 0
21772: PUSH
21773: LD_INT 1
21775: PUSH
21776: EMPTY
21777: LIST
21778: LIST
21779: PUSH
21780: LD_INT 1
21782: NEG
21783: PUSH
21784: LD_INT 0
21786: PUSH
21787: EMPTY
21788: LIST
21789: LIST
21790: PUSH
21791: LD_INT 1
21793: NEG
21794: PUSH
21795: LD_INT 1
21797: NEG
21798: PUSH
21799: EMPTY
21800: LIST
21801: LIST
21802: PUSH
21803: LD_INT 1
21805: NEG
21806: PUSH
21807: LD_INT 2
21809: NEG
21810: PUSH
21811: EMPTY
21812: LIST
21813: LIST
21814: PUSH
21815: LD_INT 1
21817: PUSH
21818: LD_INT 1
21820: NEG
21821: PUSH
21822: EMPTY
21823: LIST
21824: LIST
21825: PUSH
21826: LD_INT 2
21828: PUSH
21829: LD_INT 0
21831: PUSH
21832: EMPTY
21833: LIST
21834: LIST
21835: PUSH
21836: LD_INT 2
21838: PUSH
21839: LD_INT 1
21841: PUSH
21842: EMPTY
21843: LIST
21844: LIST
21845: PUSH
21846: LD_INT 2
21848: PUSH
21849: LD_INT 2
21851: PUSH
21852: EMPTY
21853: LIST
21854: LIST
21855: PUSH
21856: LD_INT 1
21858: PUSH
21859: LD_INT 2
21861: PUSH
21862: EMPTY
21863: LIST
21864: LIST
21865: PUSH
21866: LD_INT 1
21868: NEG
21869: PUSH
21870: LD_INT 1
21872: PUSH
21873: EMPTY
21874: LIST
21875: LIST
21876: PUSH
21877: LD_INT 2
21879: NEG
21880: PUSH
21881: LD_INT 0
21883: PUSH
21884: EMPTY
21885: LIST
21886: LIST
21887: PUSH
21888: LD_INT 2
21890: NEG
21891: PUSH
21892: LD_INT 1
21894: NEG
21895: PUSH
21896: EMPTY
21897: LIST
21898: LIST
21899: PUSH
21900: LD_INT 2
21902: NEG
21903: PUSH
21904: LD_INT 2
21906: NEG
21907: PUSH
21908: EMPTY
21909: LIST
21910: LIST
21911: PUSH
21912: LD_INT 2
21914: NEG
21915: PUSH
21916: LD_INT 3
21918: NEG
21919: PUSH
21920: EMPTY
21921: LIST
21922: LIST
21923: PUSH
21924: LD_INT 2
21926: PUSH
21927: LD_INT 1
21929: NEG
21930: PUSH
21931: EMPTY
21932: LIST
21933: LIST
21934: PUSH
21935: LD_INT 3
21937: PUSH
21938: LD_INT 0
21940: PUSH
21941: EMPTY
21942: LIST
21943: LIST
21944: PUSH
21945: LD_INT 3
21947: PUSH
21948: LD_INT 1
21950: PUSH
21951: EMPTY
21952: LIST
21953: LIST
21954: PUSH
21955: LD_INT 3
21957: PUSH
21958: LD_INT 2
21960: PUSH
21961: EMPTY
21962: LIST
21963: LIST
21964: PUSH
21965: LD_INT 3
21967: PUSH
21968: LD_INT 3
21970: PUSH
21971: EMPTY
21972: LIST
21973: LIST
21974: PUSH
21975: LD_INT 2
21977: PUSH
21978: LD_INT 3
21980: PUSH
21981: EMPTY
21982: LIST
21983: LIST
21984: PUSH
21985: LD_INT 2
21987: NEG
21988: PUSH
21989: LD_INT 1
21991: PUSH
21992: EMPTY
21993: LIST
21994: LIST
21995: PUSH
21996: LD_INT 3
21998: NEG
21999: PUSH
22000: LD_INT 0
22002: PUSH
22003: EMPTY
22004: LIST
22005: LIST
22006: PUSH
22007: LD_INT 3
22009: NEG
22010: PUSH
22011: LD_INT 1
22013: NEG
22014: PUSH
22015: EMPTY
22016: LIST
22017: LIST
22018: PUSH
22019: LD_INT 3
22021: NEG
22022: PUSH
22023: LD_INT 2
22025: NEG
22026: PUSH
22027: EMPTY
22028: LIST
22029: LIST
22030: PUSH
22031: LD_INT 3
22033: NEG
22034: PUSH
22035: LD_INT 3
22037: NEG
22038: PUSH
22039: EMPTY
22040: LIST
22041: LIST
22042: PUSH
22043: EMPTY
22044: LIST
22045: LIST
22046: LIST
22047: LIST
22048: LIST
22049: LIST
22050: LIST
22051: LIST
22052: LIST
22053: LIST
22054: LIST
22055: LIST
22056: LIST
22057: LIST
22058: LIST
22059: LIST
22060: LIST
22061: LIST
22062: LIST
22063: LIST
22064: LIST
22065: LIST
22066: LIST
22067: LIST
22068: LIST
22069: LIST
22070: LIST
22071: LIST
22072: LIST
22073: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
22074: LD_ADDR_VAR 0 42
22078: PUSH
22079: LD_INT 0
22081: PUSH
22082: LD_INT 0
22084: PUSH
22085: EMPTY
22086: LIST
22087: LIST
22088: PUSH
22089: LD_INT 0
22091: PUSH
22092: LD_INT 1
22094: NEG
22095: PUSH
22096: EMPTY
22097: LIST
22098: LIST
22099: PUSH
22100: LD_INT 1
22102: PUSH
22103: LD_INT 0
22105: PUSH
22106: EMPTY
22107: LIST
22108: LIST
22109: PUSH
22110: LD_INT 1
22112: PUSH
22113: LD_INT 1
22115: PUSH
22116: EMPTY
22117: LIST
22118: LIST
22119: PUSH
22120: LD_INT 0
22122: PUSH
22123: LD_INT 1
22125: PUSH
22126: EMPTY
22127: LIST
22128: LIST
22129: PUSH
22130: LD_INT 1
22132: NEG
22133: PUSH
22134: LD_INT 0
22136: PUSH
22137: EMPTY
22138: LIST
22139: LIST
22140: PUSH
22141: LD_INT 1
22143: NEG
22144: PUSH
22145: LD_INT 1
22147: NEG
22148: PUSH
22149: EMPTY
22150: LIST
22151: LIST
22152: PUSH
22153: LD_INT 1
22155: NEG
22156: PUSH
22157: LD_INT 2
22159: NEG
22160: PUSH
22161: EMPTY
22162: LIST
22163: LIST
22164: PUSH
22165: LD_INT 0
22167: PUSH
22168: LD_INT 2
22170: NEG
22171: PUSH
22172: EMPTY
22173: LIST
22174: LIST
22175: PUSH
22176: LD_INT 1
22178: PUSH
22179: LD_INT 1
22181: NEG
22182: PUSH
22183: EMPTY
22184: LIST
22185: LIST
22186: PUSH
22187: LD_INT 2
22189: PUSH
22190: LD_INT 1
22192: PUSH
22193: EMPTY
22194: LIST
22195: LIST
22196: PUSH
22197: LD_INT 2
22199: PUSH
22200: LD_INT 2
22202: PUSH
22203: EMPTY
22204: LIST
22205: LIST
22206: PUSH
22207: LD_INT 1
22209: PUSH
22210: LD_INT 2
22212: PUSH
22213: EMPTY
22214: LIST
22215: LIST
22216: PUSH
22217: LD_INT 0
22219: PUSH
22220: LD_INT 2
22222: PUSH
22223: EMPTY
22224: LIST
22225: LIST
22226: PUSH
22227: LD_INT 1
22229: NEG
22230: PUSH
22231: LD_INT 1
22233: PUSH
22234: EMPTY
22235: LIST
22236: LIST
22237: PUSH
22238: LD_INT 2
22240: NEG
22241: PUSH
22242: LD_INT 1
22244: NEG
22245: PUSH
22246: EMPTY
22247: LIST
22248: LIST
22249: PUSH
22250: LD_INT 2
22252: NEG
22253: PUSH
22254: LD_INT 2
22256: NEG
22257: PUSH
22258: EMPTY
22259: LIST
22260: LIST
22261: PUSH
22262: LD_INT 2
22264: NEG
22265: PUSH
22266: LD_INT 3
22268: NEG
22269: PUSH
22270: EMPTY
22271: LIST
22272: LIST
22273: PUSH
22274: LD_INT 1
22276: NEG
22277: PUSH
22278: LD_INT 3
22280: NEG
22281: PUSH
22282: EMPTY
22283: LIST
22284: LIST
22285: PUSH
22286: LD_INT 0
22288: PUSH
22289: LD_INT 3
22291: NEG
22292: PUSH
22293: EMPTY
22294: LIST
22295: LIST
22296: PUSH
22297: LD_INT 1
22299: PUSH
22300: LD_INT 2
22302: NEG
22303: PUSH
22304: EMPTY
22305: LIST
22306: LIST
22307: PUSH
22308: LD_INT 3
22310: PUSH
22311: LD_INT 2
22313: PUSH
22314: EMPTY
22315: LIST
22316: LIST
22317: PUSH
22318: LD_INT 3
22320: PUSH
22321: LD_INT 3
22323: PUSH
22324: EMPTY
22325: LIST
22326: LIST
22327: PUSH
22328: LD_INT 2
22330: PUSH
22331: LD_INT 3
22333: PUSH
22334: EMPTY
22335: LIST
22336: LIST
22337: PUSH
22338: LD_INT 1
22340: PUSH
22341: LD_INT 3
22343: PUSH
22344: EMPTY
22345: LIST
22346: LIST
22347: PUSH
22348: LD_INT 0
22350: PUSH
22351: LD_INT 3
22353: PUSH
22354: EMPTY
22355: LIST
22356: LIST
22357: PUSH
22358: LD_INT 1
22360: NEG
22361: PUSH
22362: LD_INT 2
22364: PUSH
22365: EMPTY
22366: LIST
22367: LIST
22368: PUSH
22369: LD_INT 3
22371: NEG
22372: PUSH
22373: LD_INT 2
22375: NEG
22376: PUSH
22377: EMPTY
22378: LIST
22379: LIST
22380: PUSH
22381: LD_INT 3
22383: NEG
22384: PUSH
22385: LD_INT 3
22387: NEG
22388: PUSH
22389: EMPTY
22390: LIST
22391: LIST
22392: PUSH
22393: EMPTY
22394: LIST
22395: LIST
22396: LIST
22397: LIST
22398: LIST
22399: LIST
22400: LIST
22401: LIST
22402: LIST
22403: LIST
22404: LIST
22405: LIST
22406: LIST
22407: LIST
22408: LIST
22409: LIST
22410: LIST
22411: LIST
22412: LIST
22413: LIST
22414: LIST
22415: LIST
22416: LIST
22417: LIST
22418: LIST
22419: LIST
22420: LIST
22421: LIST
22422: LIST
22423: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
22424: LD_ADDR_VAR 0 43
22428: PUSH
22429: LD_INT 0
22431: PUSH
22432: LD_INT 0
22434: PUSH
22435: EMPTY
22436: LIST
22437: LIST
22438: PUSH
22439: LD_INT 0
22441: PUSH
22442: LD_INT 1
22444: NEG
22445: PUSH
22446: EMPTY
22447: LIST
22448: LIST
22449: PUSH
22450: LD_INT 1
22452: PUSH
22453: LD_INT 0
22455: PUSH
22456: EMPTY
22457: LIST
22458: LIST
22459: PUSH
22460: LD_INT 1
22462: PUSH
22463: LD_INT 1
22465: PUSH
22466: EMPTY
22467: LIST
22468: LIST
22469: PUSH
22470: LD_INT 0
22472: PUSH
22473: LD_INT 1
22475: PUSH
22476: EMPTY
22477: LIST
22478: LIST
22479: PUSH
22480: LD_INT 1
22482: NEG
22483: PUSH
22484: LD_INT 0
22486: PUSH
22487: EMPTY
22488: LIST
22489: LIST
22490: PUSH
22491: LD_INT 1
22493: NEG
22494: PUSH
22495: LD_INT 1
22497: NEG
22498: PUSH
22499: EMPTY
22500: LIST
22501: LIST
22502: PUSH
22503: LD_INT 1
22505: NEG
22506: PUSH
22507: LD_INT 2
22509: NEG
22510: PUSH
22511: EMPTY
22512: LIST
22513: LIST
22514: PUSH
22515: LD_INT 0
22517: PUSH
22518: LD_INT 2
22520: NEG
22521: PUSH
22522: EMPTY
22523: LIST
22524: LIST
22525: PUSH
22526: LD_INT 1
22528: PUSH
22529: LD_INT 1
22531: NEG
22532: PUSH
22533: EMPTY
22534: LIST
22535: LIST
22536: PUSH
22537: LD_INT 2
22539: PUSH
22540: LD_INT 0
22542: PUSH
22543: EMPTY
22544: LIST
22545: LIST
22546: PUSH
22547: LD_INT 2
22549: PUSH
22550: LD_INT 1
22552: PUSH
22553: EMPTY
22554: LIST
22555: LIST
22556: PUSH
22557: LD_INT 1
22559: PUSH
22560: LD_INT 2
22562: PUSH
22563: EMPTY
22564: LIST
22565: LIST
22566: PUSH
22567: LD_INT 0
22569: PUSH
22570: LD_INT 2
22572: PUSH
22573: EMPTY
22574: LIST
22575: LIST
22576: PUSH
22577: LD_INT 1
22579: NEG
22580: PUSH
22581: LD_INT 1
22583: PUSH
22584: EMPTY
22585: LIST
22586: LIST
22587: PUSH
22588: LD_INT 2
22590: NEG
22591: PUSH
22592: LD_INT 0
22594: PUSH
22595: EMPTY
22596: LIST
22597: LIST
22598: PUSH
22599: LD_INT 2
22601: NEG
22602: PUSH
22603: LD_INT 1
22605: NEG
22606: PUSH
22607: EMPTY
22608: LIST
22609: LIST
22610: PUSH
22611: LD_INT 1
22613: NEG
22614: PUSH
22615: LD_INT 3
22617: NEG
22618: PUSH
22619: EMPTY
22620: LIST
22621: LIST
22622: PUSH
22623: LD_INT 0
22625: PUSH
22626: LD_INT 3
22628: NEG
22629: PUSH
22630: EMPTY
22631: LIST
22632: LIST
22633: PUSH
22634: LD_INT 1
22636: PUSH
22637: LD_INT 2
22639: NEG
22640: PUSH
22641: EMPTY
22642: LIST
22643: LIST
22644: PUSH
22645: LD_INT 2
22647: PUSH
22648: LD_INT 1
22650: NEG
22651: PUSH
22652: EMPTY
22653: LIST
22654: LIST
22655: PUSH
22656: LD_INT 3
22658: PUSH
22659: LD_INT 0
22661: PUSH
22662: EMPTY
22663: LIST
22664: LIST
22665: PUSH
22666: LD_INT 3
22668: PUSH
22669: LD_INT 1
22671: PUSH
22672: EMPTY
22673: LIST
22674: LIST
22675: PUSH
22676: LD_INT 1
22678: PUSH
22679: LD_INT 3
22681: PUSH
22682: EMPTY
22683: LIST
22684: LIST
22685: PUSH
22686: LD_INT 0
22688: PUSH
22689: LD_INT 3
22691: PUSH
22692: EMPTY
22693: LIST
22694: LIST
22695: PUSH
22696: LD_INT 1
22698: NEG
22699: PUSH
22700: LD_INT 2
22702: PUSH
22703: EMPTY
22704: LIST
22705: LIST
22706: PUSH
22707: LD_INT 2
22709: NEG
22710: PUSH
22711: LD_INT 1
22713: PUSH
22714: EMPTY
22715: LIST
22716: LIST
22717: PUSH
22718: LD_INT 3
22720: NEG
22721: PUSH
22722: LD_INT 0
22724: PUSH
22725: EMPTY
22726: LIST
22727: LIST
22728: PUSH
22729: LD_INT 3
22731: NEG
22732: PUSH
22733: LD_INT 1
22735: NEG
22736: PUSH
22737: EMPTY
22738: LIST
22739: LIST
22740: PUSH
22741: EMPTY
22742: LIST
22743: LIST
22744: LIST
22745: LIST
22746: LIST
22747: LIST
22748: LIST
22749: LIST
22750: LIST
22751: LIST
22752: LIST
22753: LIST
22754: LIST
22755: LIST
22756: LIST
22757: LIST
22758: LIST
22759: LIST
22760: LIST
22761: LIST
22762: LIST
22763: LIST
22764: LIST
22765: LIST
22766: LIST
22767: LIST
22768: LIST
22769: LIST
22770: LIST
22771: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
22772: LD_ADDR_VAR 0 44
22776: PUSH
22777: LD_INT 0
22779: PUSH
22780: LD_INT 0
22782: PUSH
22783: EMPTY
22784: LIST
22785: LIST
22786: PUSH
22787: LD_INT 0
22789: PUSH
22790: LD_INT 1
22792: NEG
22793: PUSH
22794: EMPTY
22795: LIST
22796: LIST
22797: PUSH
22798: LD_INT 1
22800: PUSH
22801: LD_INT 0
22803: PUSH
22804: EMPTY
22805: LIST
22806: LIST
22807: PUSH
22808: LD_INT 1
22810: PUSH
22811: LD_INT 1
22813: PUSH
22814: EMPTY
22815: LIST
22816: LIST
22817: PUSH
22818: LD_INT 0
22820: PUSH
22821: LD_INT 1
22823: PUSH
22824: EMPTY
22825: LIST
22826: LIST
22827: PUSH
22828: LD_INT 1
22830: NEG
22831: PUSH
22832: LD_INT 0
22834: PUSH
22835: EMPTY
22836: LIST
22837: LIST
22838: PUSH
22839: LD_INT 1
22841: NEG
22842: PUSH
22843: LD_INT 1
22845: NEG
22846: PUSH
22847: EMPTY
22848: LIST
22849: LIST
22850: PUSH
22851: LD_INT 1
22853: NEG
22854: PUSH
22855: LD_INT 2
22857: NEG
22858: PUSH
22859: EMPTY
22860: LIST
22861: LIST
22862: PUSH
22863: LD_INT 1
22865: PUSH
22866: LD_INT 1
22868: NEG
22869: PUSH
22870: EMPTY
22871: LIST
22872: LIST
22873: PUSH
22874: LD_INT 2
22876: PUSH
22877: LD_INT 0
22879: PUSH
22880: EMPTY
22881: LIST
22882: LIST
22883: PUSH
22884: LD_INT 2
22886: PUSH
22887: LD_INT 1
22889: PUSH
22890: EMPTY
22891: LIST
22892: LIST
22893: PUSH
22894: LD_INT 2
22896: PUSH
22897: LD_INT 2
22899: PUSH
22900: EMPTY
22901: LIST
22902: LIST
22903: PUSH
22904: LD_INT 1
22906: PUSH
22907: LD_INT 2
22909: PUSH
22910: EMPTY
22911: LIST
22912: LIST
22913: PUSH
22914: LD_INT 1
22916: NEG
22917: PUSH
22918: LD_INT 1
22920: PUSH
22921: EMPTY
22922: LIST
22923: LIST
22924: PUSH
22925: LD_INT 2
22927: NEG
22928: PUSH
22929: LD_INT 0
22931: PUSH
22932: EMPTY
22933: LIST
22934: LIST
22935: PUSH
22936: LD_INT 2
22938: NEG
22939: PUSH
22940: LD_INT 1
22942: NEG
22943: PUSH
22944: EMPTY
22945: LIST
22946: LIST
22947: PUSH
22948: LD_INT 2
22950: NEG
22951: PUSH
22952: LD_INT 2
22954: NEG
22955: PUSH
22956: EMPTY
22957: LIST
22958: LIST
22959: PUSH
22960: LD_INT 2
22962: NEG
22963: PUSH
22964: LD_INT 3
22966: NEG
22967: PUSH
22968: EMPTY
22969: LIST
22970: LIST
22971: PUSH
22972: LD_INT 2
22974: PUSH
22975: LD_INT 1
22977: NEG
22978: PUSH
22979: EMPTY
22980: LIST
22981: LIST
22982: PUSH
22983: LD_INT 3
22985: PUSH
22986: LD_INT 0
22988: PUSH
22989: EMPTY
22990: LIST
22991: LIST
22992: PUSH
22993: LD_INT 3
22995: PUSH
22996: LD_INT 1
22998: PUSH
22999: EMPTY
23000: LIST
23001: LIST
23002: PUSH
23003: LD_INT 3
23005: PUSH
23006: LD_INT 2
23008: PUSH
23009: EMPTY
23010: LIST
23011: LIST
23012: PUSH
23013: LD_INT 3
23015: PUSH
23016: LD_INT 3
23018: PUSH
23019: EMPTY
23020: LIST
23021: LIST
23022: PUSH
23023: LD_INT 2
23025: PUSH
23026: LD_INT 3
23028: PUSH
23029: EMPTY
23030: LIST
23031: LIST
23032: PUSH
23033: LD_INT 2
23035: NEG
23036: PUSH
23037: LD_INT 1
23039: PUSH
23040: EMPTY
23041: LIST
23042: LIST
23043: PUSH
23044: LD_INT 3
23046: NEG
23047: PUSH
23048: LD_INT 0
23050: PUSH
23051: EMPTY
23052: LIST
23053: LIST
23054: PUSH
23055: LD_INT 3
23057: NEG
23058: PUSH
23059: LD_INT 1
23061: NEG
23062: PUSH
23063: EMPTY
23064: LIST
23065: LIST
23066: PUSH
23067: LD_INT 3
23069: NEG
23070: PUSH
23071: LD_INT 2
23073: NEG
23074: PUSH
23075: EMPTY
23076: LIST
23077: LIST
23078: PUSH
23079: LD_INT 3
23081: NEG
23082: PUSH
23083: LD_INT 3
23085: NEG
23086: PUSH
23087: EMPTY
23088: LIST
23089: LIST
23090: PUSH
23091: EMPTY
23092: LIST
23093: LIST
23094: LIST
23095: LIST
23096: LIST
23097: LIST
23098: LIST
23099: LIST
23100: LIST
23101: LIST
23102: LIST
23103: LIST
23104: LIST
23105: LIST
23106: LIST
23107: LIST
23108: LIST
23109: LIST
23110: LIST
23111: LIST
23112: LIST
23113: LIST
23114: LIST
23115: LIST
23116: LIST
23117: LIST
23118: LIST
23119: LIST
23120: LIST
23121: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
23122: LD_ADDR_VAR 0 45
23126: PUSH
23127: LD_INT 0
23129: PUSH
23130: LD_INT 0
23132: PUSH
23133: EMPTY
23134: LIST
23135: LIST
23136: PUSH
23137: LD_INT 0
23139: PUSH
23140: LD_INT 1
23142: NEG
23143: PUSH
23144: EMPTY
23145: LIST
23146: LIST
23147: PUSH
23148: LD_INT 1
23150: PUSH
23151: LD_INT 0
23153: PUSH
23154: EMPTY
23155: LIST
23156: LIST
23157: PUSH
23158: LD_INT 1
23160: PUSH
23161: LD_INT 1
23163: PUSH
23164: EMPTY
23165: LIST
23166: LIST
23167: PUSH
23168: LD_INT 0
23170: PUSH
23171: LD_INT 1
23173: PUSH
23174: EMPTY
23175: LIST
23176: LIST
23177: PUSH
23178: LD_INT 1
23180: NEG
23181: PUSH
23182: LD_INT 0
23184: PUSH
23185: EMPTY
23186: LIST
23187: LIST
23188: PUSH
23189: LD_INT 1
23191: NEG
23192: PUSH
23193: LD_INT 1
23195: NEG
23196: PUSH
23197: EMPTY
23198: LIST
23199: LIST
23200: PUSH
23201: LD_INT 1
23203: NEG
23204: PUSH
23205: LD_INT 2
23207: NEG
23208: PUSH
23209: EMPTY
23210: LIST
23211: LIST
23212: PUSH
23213: LD_INT 0
23215: PUSH
23216: LD_INT 2
23218: NEG
23219: PUSH
23220: EMPTY
23221: LIST
23222: LIST
23223: PUSH
23224: LD_INT 1
23226: PUSH
23227: LD_INT 1
23229: NEG
23230: PUSH
23231: EMPTY
23232: LIST
23233: LIST
23234: PUSH
23235: LD_INT 2
23237: PUSH
23238: LD_INT 1
23240: PUSH
23241: EMPTY
23242: LIST
23243: LIST
23244: PUSH
23245: LD_INT 2
23247: PUSH
23248: LD_INT 2
23250: PUSH
23251: EMPTY
23252: LIST
23253: LIST
23254: PUSH
23255: LD_INT 1
23257: PUSH
23258: LD_INT 2
23260: PUSH
23261: EMPTY
23262: LIST
23263: LIST
23264: PUSH
23265: LD_INT 0
23267: PUSH
23268: LD_INT 2
23270: PUSH
23271: EMPTY
23272: LIST
23273: LIST
23274: PUSH
23275: LD_INT 1
23277: NEG
23278: PUSH
23279: LD_INT 1
23281: PUSH
23282: EMPTY
23283: LIST
23284: LIST
23285: PUSH
23286: LD_INT 2
23288: NEG
23289: PUSH
23290: LD_INT 1
23292: NEG
23293: PUSH
23294: EMPTY
23295: LIST
23296: LIST
23297: PUSH
23298: LD_INT 2
23300: NEG
23301: PUSH
23302: LD_INT 2
23304: NEG
23305: PUSH
23306: EMPTY
23307: LIST
23308: LIST
23309: PUSH
23310: LD_INT 2
23312: NEG
23313: PUSH
23314: LD_INT 3
23316: NEG
23317: PUSH
23318: EMPTY
23319: LIST
23320: LIST
23321: PUSH
23322: LD_INT 1
23324: NEG
23325: PUSH
23326: LD_INT 3
23328: NEG
23329: PUSH
23330: EMPTY
23331: LIST
23332: LIST
23333: PUSH
23334: LD_INT 0
23336: PUSH
23337: LD_INT 3
23339: NEG
23340: PUSH
23341: EMPTY
23342: LIST
23343: LIST
23344: PUSH
23345: LD_INT 1
23347: PUSH
23348: LD_INT 2
23350: NEG
23351: PUSH
23352: EMPTY
23353: LIST
23354: LIST
23355: PUSH
23356: LD_INT 3
23358: PUSH
23359: LD_INT 2
23361: PUSH
23362: EMPTY
23363: LIST
23364: LIST
23365: PUSH
23366: LD_INT 3
23368: PUSH
23369: LD_INT 3
23371: PUSH
23372: EMPTY
23373: LIST
23374: LIST
23375: PUSH
23376: LD_INT 2
23378: PUSH
23379: LD_INT 3
23381: PUSH
23382: EMPTY
23383: LIST
23384: LIST
23385: PUSH
23386: LD_INT 1
23388: PUSH
23389: LD_INT 3
23391: PUSH
23392: EMPTY
23393: LIST
23394: LIST
23395: PUSH
23396: LD_INT 0
23398: PUSH
23399: LD_INT 3
23401: PUSH
23402: EMPTY
23403: LIST
23404: LIST
23405: PUSH
23406: LD_INT 1
23408: NEG
23409: PUSH
23410: LD_INT 2
23412: PUSH
23413: EMPTY
23414: LIST
23415: LIST
23416: PUSH
23417: LD_INT 3
23419: NEG
23420: PUSH
23421: LD_INT 2
23423: NEG
23424: PUSH
23425: EMPTY
23426: LIST
23427: LIST
23428: PUSH
23429: LD_INT 3
23431: NEG
23432: PUSH
23433: LD_INT 3
23435: NEG
23436: PUSH
23437: EMPTY
23438: LIST
23439: LIST
23440: PUSH
23441: EMPTY
23442: LIST
23443: LIST
23444: LIST
23445: LIST
23446: LIST
23447: LIST
23448: LIST
23449: LIST
23450: LIST
23451: LIST
23452: LIST
23453: LIST
23454: LIST
23455: LIST
23456: LIST
23457: LIST
23458: LIST
23459: LIST
23460: LIST
23461: LIST
23462: LIST
23463: LIST
23464: LIST
23465: LIST
23466: LIST
23467: LIST
23468: LIST
23469: LIST
23470: LIST
23471: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
23472: LD_ADDR_VAR 0 46
23476: PUSH
23477: LD_INT 0
23479: PUSH
23480: LD_INT 0
23482: PUSH
23483: EMPTY
23484: LIST
23485: LIST
23486: PUSH
23487: LD_INT 0
23489: PUSH
23490: LD_INT 1
23492: NEG
23493: PUSH
23494: EMPTY
23495: LIST
23496: LIST
23497: PUSH
23498: LD_INT 1
23500: PUSH
23501: LD_INT 0
23503: PUSH
23504: EMPTY
23505: LIST
23506: LIST
23507: PUSH
23508: LD_INT 1
23510: PUSH
23511: LD_INT 1
23513: PUSH
23514: EMPTY
23515: LIST
23516: LIST
23517: PUSH
23518: LD_INT 0
23520: PUSH
23521: LD_INT 1
23523: PUSH
23524: EMPTY
23525: LIST
23526: LIST
23527: PUSH
23528: LD_INT 1
23530: NEG
23531: PUSH
23532: LD_INT 0
23534: PUSH
23535: EMPTY
23536: LIST
23537: LIST
23538: PUSH
23539: LD_INT 1
23541: NEG
23542: PUSH
23543: LD_INT 1
23545: NEG
23546: PUSH
23547: EMPTY
23548: LIST
23549: LIST
23550: PUSH
23551: LD_INT 1
23553: NEG
23554: PUSH
23555: LD_INT 2
23557: NEG
23558: PUSH
23559: EMPTY
23560: LIST
23561: LIST
23562: PUSH
23563: LD_INT 0
23565: PUSH
23566: LD_INT 2
23568: NEG
23569: PUSH
23570: EMPTY
23571: LIST
23572: LIST
23573: PUSH
23574: LD_INT 1
23576: PUSH
23577: LD_INT 1
23579: NEG
23580: PUSH
23581: EMPTY
23582: LIST
23583: LIST
23584: PUSH
23585: LD_INT 2
23587: PUSH
23588: LD_INT 0
23590: PUSH
23591: EMPTY
23592: LIST
23593: LIST
23594: PUSH
23595: LD_INT 2
23597: PUSH
23598: LD_INT 1
23600: PUSH
23601: EMPTY
23602: LIST
23603: LIST
23604: PUSH
23605: LD_INT 1
23607: PUSH
23608: LD_INT 2
23610: PUSH
23611: EMPTY
23612: LIST
23613: LIST
23614: PUSH
23615: LD_INT 0
23617: PUSH
23618: LD_INT 2
23620: PUSH
23621: EMPTY
23622: LIST
23623: LIST
23624: PUSH
23625: LD_INT 1
23627: NEG
23628: PUSH
23629: LD_INT 1
23631: PUSH
23632: EMPTY
23633: LIST
23634: LIST
23635: PUSH
23636: LD_INT 2
23638: NEG
23639: PUSH
23640: LD_INT 0
23642: PUSH
23643: EMPTY
23644: LIST
23645: LIST
23646: PUSH
23647: LD_INT 2
23649: NEG
23650: PUSH
23651: LD_INT 1
23653: NEG
23654: PUSH
23655: EMPTY
23656: LIST
23657: LIST
23658: PUSH
23659: LD_INT 1
23661: NEG
23662: PUSH
23663: LD_INT 3
23665: NEG
23666: PUSH
23667: EMPTY
23668: LIST
23669: LIST
23670: PUSH
23671: LD_INT 0
23673: PUSH
23674: LD_INT 3
23676: NEG
23677: PUSH
23678: EMPTY
23679: LIST
23680: LIST
23681: PUSH
23682: LD_INT 1
23684: PUSH
23685: LD_INT 2
23687: NEG
23688: PUSH
23689: EMPTY
23690: LIST
23691: LIST
23692: PUSH
23693: LD_INT 2
23695: PUSH
23696: LD_INT 1
23698: NEG
23699: PUSH
23700: EMPTY
23701: LIST
23702: LIST
23703: PUSH
23704: LD_INT 3
23706: PUSH
23707: LD_INT 0
23709: PUSH
23710: EMPTY
23711: LIST
23712: LIST
23713: PUSH
23714: LD_INT 3
23716: PUSH
23717: LD_INT 1
23719: PUSH
23720: EMPTY
23721: LIST
23722: LIST
23723: PUSH
23724: LD_INT 1
23726: PUSH
23727: LD_INT 3
23729: PUSH
23730: EMPTY
23731: LIST
23732: LIST
23733: PUSH
23734: LD_INT 0
23736: PUSH
23737: LD_INT 3
23739: PUSH
23740: EMPTY
23741: LIST
23742: LIST
23743: PUSH
23744: LD_INT 1
23746: NEG
23747: PUSH
23748: LD_INT 2
23750: PUSH
23751: EMPTY
23752: LIST
23753: LIST
23754: PUSH
23755: LD_INT 2
23757: NEG
23758: PUSH
23759: LD_INT 1
23761: PUSH
23762: EMPTY
23763: LIST
23764: LIST
23765: PUSH
23766: LD_INT 3
23768: NEG
23769: PUSH
23770: LD_INT 0
23772: PUSH
23773: EMPTY
23774: LIST
23775: LIST
23776: PUSH
23777: LD_INT 3
23779: NEG
23780: PUSH
23781: LD_INT 1
23783: NEG
23784: PUSH
23785: EMPTY
23786: LIST
23787: LIST
23788: PUSH
23789: EMPTY
23790: LIST
23791: LIST
23792: LIST
23793: LIST
23794: LIST
23795: LIST
23796: LIST
23797: LIST
23798: LIST
23799: LIST
23800: LIST
23801: LIST
23802: LIST
23803: LIST
23804: LIST
23805: LIST
23806: LIST
23807: LIST
23808: LIST
23809: LIST
23810: LIST
23811: LIST
23812: LIST
23813: LIST
23814: LIST
23815: LIST
23816: LIST
23817: LIST
23818: LIST
23819: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
23820: LD_ADDR_VAR 0 47
23824: PUSH
23825: LD_INT 0
23827: PUSH
23828: LD_INT 0
23830: PUSH
23831: EMPTY
23832: LIST
23833: LIST
23834: PUSH
23835: LD_INT 0
23837: PUSH
23838: LD_INT 1
23840: NEG
23841: PUSH
23842: EMPTY
23843: LIST
23844: LIST
23845: PUSH
23846: LD_INT 1
23848: PUSH
23849: LD_INT 0
23851: PUSH
23852: EMPTY
23853: LIST
23854: LIST
23855: PUSH
23856: LD_INT 1
23858: PUSH
23859: LD_INT 1
23861: PUSH
23862: EMPTY
23863: LIST
23864: LIST
23865: PUSH
23866: LD_INT 0
23868: PUSH
23869: LD_INT 1
23871: PUSH
23872: EMPTY
23873: LIST
23874: LIST
23875: PUSH
23876: LD_INT 1
23878: NEG
23879: PUSH
23880: LD_INT 0
23882: PUSH
23883: EMPTY
23884: LIST
23885: LIST
23886: PUSH
23887: LD_INT 1
23889: NEG
23890: PUSH
23891: LD_INT 1
23893: NEG
23894: PUSH
23895: EMPTY
23896: LIST
23897: LIST
23898: PUSH
23899: LD_INT 1
23901: NEG
23902: PUSH
23903: LD_INT 2
23905: NEG
23906: PUSH
23907: EMPTY
23908: LIST
23909: LIST
23910: PUSH
23911: LD_INT 0
23913: PUSH
23914: LD_INT 2
23916: NEG
23917: PUSH
23918: EMPTY
23919: LIST
23920: LIST
23921: PUSH
23922: LD_INT 1
23924: PUSH
23925: LD_INT 1
23927: NEG
23928: PUSH
23929: EMPTY
23930: LIST
23931: LIST
23932: PUSH
23933: LD_INT 2
23935: NEG
23936: PUSH
23937: LD_INT 1
23939: NEG
23940: PUSH
23941: EMPTY
23942: LIST
23943: LIST
23944: PUSH
23945: LD_INT 2
23947: NEG
23948: PUSH
23949: LD_INT 2
23951: NEG
23952: PUSH
23953: EMPTY
23954: LIST
23955: LIST
23956: PUSH
23957: EMPTY
23958: LIST
23959: LIST
23960: LIST
23961: LIST
23962: LIST
23963: LIST
23964: LIST
23965: LIST
23966: LIST
23967: LIST
23968: LIST
23969: LIST
23970: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
23971: LD_ADDR_VAR 0 48
23975: PUSH
23976: LD_INT 0
23978: PUSH
23979: LD_INT 0
23981: PUSH
23982: EMPTY
23983: LIST
23984: LIST
23985: PUSH
23986: LD_INT 0
23988: PUSH
23989: LD_INT 1
23991: NEG
23992: PUSH
23993: EMPTY
23994: LIST
23995: LIST
23996: PUSH
23997: LD_INT 1
23999: PUSH
24000: LD_INT 0
24002: PUSH
24003: EMPTY
24004: LIST
24005: LIST
24006: PUSH
24007: LD_INT 1
24009: PUSH
24010: LD_INT 1
24012: PUSH
24013: EMPTY
24014: LIST
24015: LIST
24016: PUSH
24017: LD_INT 0
24019: PUSH
24020: LD_INT 1
24022: PUSH
24023: EMPTY
24024: LIST
24025: LIST
24026: PUSH
24027: LD_INT 1
24029: NEG
24030: PUSH
24031: LD_INT 0
24033: PUSH
24034: EMPTY
24035: LIST
24036: LIST
24037: PUSH
24038: LD_INT 1
24040: NEG
24041: PUSH
24042: LD_INT 1
24044: NEG
24045: PUSH
24046: EMPTY
24047: LIST
24048: LIST
24049: PUSH
24050: LD_INT 1
24052: NEG
24053: PUSH
24054: LD_INT 2
24056: NEG
24057: PUSH
24058: EMPTY
24059: LIST
24060: LIST
24061: PUSH
24062: LD_INT 0
24064: PUSH
24065: LD_INT 2
24067: NEG
24068: PUSH
24069: EMPTY
24070: LIST
24071: LIST
24072: PUSH
24073: LD_INT 1
24075: PUSH
24076: LD_INT 1
24078: NEG
24079: PUSH
24080: EMPTY
24081: LIST
24082: LIST
24083: PUSH
24084: LD_INT 2
24086: PUSH
24087: LD_INT 0
24089: PUSH
24090: EMPTY
24091: LIST
24092: LIST
24093: PUSH
24094: LD_INT 2
24096: PUSH
24097: LD_INT 1
24099: PUSH
24100: EMPTY
24101: LIST
24102: LIST
24103: PUSH
24104: EMPTY
24105: LIST
24106: LIST
24107: LIST
24108: LIST
24109: LIST
24110: LIST
24111: LIST
24112: LIST
24113: LIST
24114: LIST
24115: LIST
24116: LIST
24117: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
24118: LD_ADDR_VAR 0 49
24122: PUSH
24123: LD_INT 0
24125: PUSH
24126: LD_INT 0
24128: PUSH
24129: EMPTY
24130: LIST
24131: LIST
24132: PUSH
24133: LD_INT 0
24135: PUSH
24136: LD_INT 1
24138: NEG
24139: PUSH
24140: EMPTY
24141: LIST
24142: LIST
24143: PUSH
24144: LD_INT 1
24146: PUSH
24147: LD_INT 0
24149: PUSH
24150: EMPTY
24151: LIST
24152: LIST
24153: PUSH
24154: LD_INT 1
24156: PUSH
24157: LD_INT 1
24159: PUSH
24160: EMPTY
24161: LIST
24162: LIST
24163: PUSH
24164: LD_INT 0
24166: PUSH
24167: LD_INT 1
24169: PUSH
24170: EMPTY
24171: LIST
24172: LIST
24173: PUSH
24174: LD_INT 1
24176: NEG
24177: PUSH
24178: LD_INT 0
24180: PUSH
24181: EMPTY
24182: LIST
24183: LIST
24184: PUSH
24185: LD_INT 1
24187: NEG
24188: PUSH
24189: LD_INT 1
24191: NEG
24192: PUSH
24193: EMPTY
24194: LIST
24195: LIST
24196: PUSH
24197: LD_INT 1
24199: PUSH
24200: LD_INT 1
24202: NEG
24203: PUSH
24204: EMPTY
24205: LIST
24206: LIST
24207: PUSH
24208: LD_INT 2
24210: PUSH
24211: LD_INT 0
24213: PUSH
24214: EMPTY
24215: LIST
24216: LIST
24217: PUSH
24218: LD_INT 2
24220: PUSH
24221: LD_INT 1
24223: PUSH
24224: EMPTY
24225: LIST
24226: LIST
24227: PUSH
24228: LD_INT 2
24230: PUSH
24231: LD_INT 2
24233: PUSH
24234: EMPTY
24235: LIST
24236: LIST
24237: PUSH
24238: LD_INT 1
24240: PUSH
24241: LD_INT 2
24243: PUSH
24244: EMPTY
24245: LIST
24246: LIST
24247: PUSH
24248: EMPTY
24249: LIST
24250: LIST
24251: LIST
24252: LIST
24253: LIST
24254: LIST
24255: LIST
24256: LIST
24257: LIST
24258: LIST
24259: LIST
24260: LIST
24261: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
24262: LD_ADDR_VAR 0 50
24266: PUSH
24267: LD_INT 0
24269: PUSH
24270: LD_INT 0
24272: PUSH
24273: EMPTY
24274: LIST
24275: LIST
24276: PUSH
24277: LD_INT 0
24279: PUSH
24280: LD_INT 1
24282: NEG
24283: PUSH
24284: EMPTY
24285: LIST
24286: LIST
24287: PUSH
24288: LD_INT 1
24290: PUSH
24291: LD_INT 0
24293: PUSH
24294: EMPTY
24295: LIST
24296: LIST
24297: PUSH
24298: LD_INT 1
24300: PUSH
24301: LD_INT 1
24303: PUSH
24304: EMPTY
24305: LIST
24306: LIST
24307: PUSH
24308: LD_INT 0
24310: PUSH
24311: LD_INT 1
24313: PUSH
24314: EMPTY
24315: LIST
24316: LIST
24317: PUSH
24318: LD_INT 1
24320: NEG
24321: PUSH
24322: LD_INT 0
24324: PUSH
24325: EMPTY
24326: LIST
24327: LIST
24328: PUSH
24329: LD_INT 1
24331: NEG
24332: PUSH
24333: LD_INT 1
24335: NEG
24336: PUSH
24337: EMPTY
24338: LIST
24339: LIST
24340: PUSH
24341: LD_INT 2
24343: PUSH
24344: LD_INT 1
24346: PUSH
24347: EMPTY
24348: LIST
24349: LIST
24350: PUSH
24351: LD_INT 2
24353: PUSH
24354: LD_INT 2
24356: PUSH
24357: EMPTY
24358: LIST
24359: LIST
24360: PUSH
24361: LD_INT 1
24363: PUSH
24364: LD_INT 2
24366: PUSH
24367: EMPTY
24368: LIST
24369: LIST
24370: PUSH
24371: LD_INT 0
24373: PUSH
24374: LD_INT 2
24376: PUSH
24377: EMPTY
24378: LIST
24379: LIST
24380: PUSH
24381: LD_INT 1
24383: NEG
24384: PUSH
24385: LD_INT 1
24387: PUSH
24388: EMPTY
24389: LIST
24390: LIST
24391: PUSH
24392: EMPTY
24393: LIST
24394: LIST
24395: LIST
24396: LIST
24397: LIST
24398: LIST
24399: LIST
24400: LIST
24401: LIST
24402: LIST
24403: LIST
24404: LIST
24405: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
24406: LD_ADDR_VAR 0 51
24410: PUSH
24411: LD_INT 0
24413: PUSH
24414: LD_INT 0
24416: PUSH
24417: EMPTY
24418: LIST
24419: LIST
24420: PUSH
24421: LD_INT 0
24423: PUSH
24424: LD_INT 1
24426: NEG
24427: PUSH
24428: EMPTY
24429: LIST
24430: LIST
24431: PUSH
24432: LD_INT 1
24434: PUSH
24435: LD_INT 0
24437: PUSH
24438: EMPTY
24439: LIST
24440: LIST
24441: PUSH
24442: LD_INT 1
24444: PUSH
24445: LD_INT 1
24447: PUSH
24448: EMPTY
24449: LIST
24450: LIST
24451: PUSH
24452: LD_INT 0
24454: PUSH
24455: LD_INT 1
24457: PUSH
24458: EMPTY
24459: LIST
24460: LIST
24461: PUSH
24462: LD_INT 1
24464: NEG
24465: PUSH
24466: LD_INT 0
24468: PUSH
24469: EMPTY
24470: LIST
24471: LIST
24472: PUSH
24473: LD_INT 1
24475: NEG
24476: PUSH
24477: LD_INT 1
24479: NEG
24480: PUSH
24481: EMPTY
24482: LIST
24483: LIST
24484: PUSH
24485: LD_INT 1
24487: PUSH
24488: LD_INT 2
24490: PUSH
24491: EMPTY
24492: LIST
24493: LIST
24494: PUSH
24495: LD_INT 0
24497: PUSH
24498: LD_INT 2
24500: PUSH
24501: EMPTY
24502: LIST
24503: LIST
24504: PUSH
24505: LD_INT 1
24507: NEG
24508: PUSH
24509: LD_INT 1
24511: PUSH
24512: EMPTY
24513: LIST
24514: LIST
24515: PUSH
24516: LD_INT 2
24518: NEG
24519: PUSH
24520: LD_INT 0
24522: PUSH
24523: EMPTY
24524: LIST
24525: LIST
24526: PUSH
24527: LD_INT 2
24529: NEG
24530: PUSH
24531: LD_INT 1
24533: NEG
24534: PUSH
24535: EMPTY
24536: LIST
24537: LIST
24538: PUSH
24539: EMPTY
24540: LIST
24541: LIST
24542: LIST
24543: LIST
24544: LIST
24545: LIST
24546: LIST
24547: LIST
24548: LIST
24549: LIST
24550: LIST
24551: LIST
24552: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24553: LD_ADDR_VAR 0 52
24557: PUSH
24558: LD_INT 0
24560: PUSH
24561: LD_INT 0
24563: PUSH
24564: EMPTY
24565: LIST
24566: LIST
24567: PUSH
24568: LD_INT 0
24570: PUSH
24571: LD_INT 1
24573: NEG
24574: PUSH
24575: EMPTY
24576: LIST
24577: LIST
24578: PUSH
24579: LD_INT 1
24581: PUSH
24582: LD_INT 0
24584: PUSH
24585: EMPTY
24586: LIST
24587: LIST
24588: PUSH
24589: LD_INT 1
24591: PUSH
24592: LD_INT 1
24594: PUSH
24595: EMPTY
24596: LIST
24597: LIST
24598: PUSH
24599: LD_INT 0
24601: PUSH
24602: LD_INT 1
24604: PUSH
24605: EMPTY
24606: LIST
24607: LIST
24608: PUSH
24609: LD_INT 1
24611: NEG
24612: PUSH
24613: LD_INT 0
24615: PUSH
24616: EMPTY
24617: LIST
24618: LIST
24619: PUSH
24620: LD_INT 1
24622: NEG
24623: PUSH
24624: LD_INT 1
24626: NEG
24627: PUSH
24628: EMPTY
24629: LIST
24630: LIST
24631: PUSH
24632: LD_INT 1
24634: NEG
24635: PUSH
24636: LD_INT 2
24638: NEG
24639: PUSH
24640: EMPTY
24641: LIST
24642: LIST
24643: PUSH
24644: LD_INT 1
24646: NEG
24647: PUSH
24648: LD_INT 1
24650: PUSH
24651: EMPTY
24652: LIST
24653: LIST
24654: PUSH
24655: LD_INT 2
24657: NEG
24658: PUSH
24659: LD_INT 0
24661: PUSH
24662: EMPTY
24663: LIST
24664: LIST
24665: PUSH
24666: LD_INT 2
24668: NEG
24669: PUSH
24670: LD_INT 1
24672: NEG
24673: PUSH
24674: EMPTY
24675: LIST
24676: LIST
24677: PUSH
24678: LD_INT 2
24680: NEG
24681: PUSH
24682: LD_INT 2
24684: NEG
24685: PUSH
24686: EMPTY
24687: LIST
24688: LIST
24689: PUSH
24690: EMPTY
24691: LIST
24692: LIST
24693: LIST
24694: LIST
24695: LIST
24696: LIST
24697: LIST
24698: LIST
24699: LIST
24700: LIST
24701: LIST
24702: LIST
24703: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24704: LD_ADDR_VAR 0 53
24708: PUSH
24709: LD_INT 0
24711: PUSH
24712: LD_INT 0
24714: PUSH
24715: EMPTY
24716: LIST
24717: LIST
24718: PUSH
24719: LD_INT 0
24721: PUSH
24722: LD_INT 1
24724: NEG
24725: PUSH
24726: EMPTY
24727: LIST
24728: LIST
24729: PUSH
24730: LD_INT 1
24732: PUSH
24733: LD_INT 0
24735: PUSH
24736: EMPTY
24737: LIST
24738: LIST
24739: PUSH
24740: LD_INT 1
24742: PUSH
24743: LD_INT 1
24745: PUSH
24746: EMPTY
24747: LIST
24748: LIST
24749: PUSH
24750: LD_INT 0
24752: PUSH
24753: LD_INT 1
24755: PUSH
24756: EMPTY
24757: LIST
24758: LIST
24759: PUSH
24760: LD_INT 1
24762: NEG
24763: PUSH
24764: LD_INT 0
24766: PUSH
24767: EMPTY
24768: LIST
24769: LIST
24770: PUSH
24771: LD_INT 1
24773: NEG
24774: PUSH
24775: LD_INT 1
24777: NEG
24778: PUSH
24779: EMPTY
24780: LIST
24781: LIST
24782: PUSH
24783: LD_INT 1
24785: NEG
24786: PUSH
24787: LD_INT 2
24789: NEG
24790: PUSH
24791: EMPTY
24792: LIST
24793: LIST
24794: PUSH
24795: LD_INT 0
24797: PUSH
24798: LD_INT 2
24800: NEG
24801: PUSH
24802: EMPTY
24803: LIST
24804: LIST
24805: PUSH
24806: LD_INT 1
24808: PUSH
24809: LD_INT 1
24811: NEG
24812: PUSH
24813: EMPTY
24814: LIST
24815: LIST
24816: PUSH
24817: LD_INT 2
24819: PUSH
24820: LD_INT 0
24822: PUSH
24823: EMPTY
24824: LIST
24825: LIST
24826: PUSH
24827: LD_INT 2
24829: PUSH
24830: LD_INT 1
24832: PUSH
24833: EMPTY
24834: LIST
24835: LIST
24836: PUSH
24837: LD_INT 2
24839: PUSH
24840: LD_INT 2
24842: PUSH
24843: EMPTY
24844: LIST
24845: LIST
24846: PUSH
24847: LD_INT 1
24849: PUSH
24850: LD_INT 2
24852: PUSH
24853: EMPTY
24854: LIST
24855: LIST
24856: PUSH
24857: LD_INT 0
24859: PUSH
24860: LD_INT 2
24862: PUSH
24863: EMPTY
24864: LIST
24865: LIST
24866: PUSH
24867: LD_INT 1
24869: NEG
24870: PUSH
24871: LD_INT 1
24873: PUSH
24874: EMPTY
24875: LIST
24876: LIST
24877: PUSH
24878: LD_INT 2
24880: NEG
24881: PUSH
24882: LD_INT 0
24884: PUSH
24885: EMPTY
24886: LIST
24887: LIST
24888: PUSH
24889: LD_INT 2
24891: NEG
24892: PUSH
24893: LD_INT 1
24895: NEG
24896: PUSH
24897: EMPTY
24898: LIST
24899: LIST
24900: PUSH
24901: LD_INT 2
24903: NEG
24904: PUSH
24905: LD_INT 2
24907: NEG
24908: PUSH
24909: EMPTY
24910: LIST
24911: LIST
24912: PUSH
24913: EMPTY
24914: LIST
24915: LIST
24916: LIST
24917: LIST
24918: LIST
24919: LIST
24920: LIST
24921: LIST
24922: LIST
24923: LIST
24924: LIST
24925: LIST
24926: LIST
24927: LIST
24928: LIST
24929: LIST
24930: LIST
24931: LIST
24932: LIST
24933: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24934: LD_ADDR_VAR 0 54
24938: PUSH
24939: LD_INT 0
24941: PUSH
24942: LD_INT 0
24944: PUSH
24945: EMPTY
24946: LIST
24947: LIST
24948: PUSH
24949: LD_INT 0
24951: PUSH
24952: LD_INT 1
24954: NEG
24955: PUSH
24956: EMPTY
24957: LIST
24958: LIST
24959: PUSH
24960: LD_INT 1
24962: PUSH
24963: LD_INT 0
24965: PUSH
24966: EMPTY
24967: LIST
24968: LIST
24969: PUSH
24970: LD_INT 1
24972: PUSH
24973: LD_INT 1
24975: PUSH
24976: EMPTY
24977: LIST
24978: LIST
24979: PUSH
24980: LD_INT 0
24982: PUSH
24983: LD_INT 1
24985: PUSH
24986: EMPTY
24987: LIST
24988: LIST
24989: PUSH
24990: LD_INT 1
24992: NEG
24993: PUSH
24994: LD_INT 0
24996: PUSH
24997: EMPTY
24998: LIST
24999: LIST
25000: PUSH
25001: LD_INT 1
25003: NEG
25004: PUSH
25005: LD_INT 1
25007: NEG
25008: PUSH
25009: EMPTY
25010: LIST
25011: LIST
25012: PUSH
25013: LD_INT 1
25015: NEG
25016: PUSH
25017: LD_INT 2
25019: NEG
25020: PUSH
25021: EMPTY
25022: LIST
25023: LIST
25024: PUSH
25025: LD_INT 0
25027: PUSH
25028: LD_INT 2
25030: NEG
25031: PUSH
25032: EMPTY
25033: LIST
25034: LIST
25035: PUSH
25036: LD_INT 1
25038: PUSH
25039: LD_INT 1
25041: NEG
25042: PUSH
25043: EMPTY
25044: LIST
25045: LIST
25046: PUSH
25047: LD_INT 2
25049: PUSH
25050: LD_INT 0
25052: PUSH
25053: EMPTY
25054: LIST
25055: LIST
25056: PUSH
25057: LD_INT 2
25059: PUSH
25060: LD_INT 1
25062: PUSH
25063: EMPTY
25064: LIST
25065: LIST
25066: PUSH
25067: LD_INT 2
25069: PUSH
25070: LD_INT 2
25072: PUSH
25073: EMPTY
25074: LIST
25075: LIST
25076: PUSH
25077: LD_INT 1
25079: PUSH
25080: LD_INT 2
25082: PUSH
25083: EMPTY
25084: LIST
25085: LIST
25086: PUSH
25087: LD_INT 0
25089: PUSH
25090: LD_INT 2
25092: PUSH
25093: EMPTY
25094: LIST
25095: LIST
25096: PUSH
25097: LD_INT 1
25099: NEG
25100: PUSH
25101: LD_INT 1
25103: PUSH
25104: EMPTY
25105: LIST
25106: LIST
25107: PUSH
25108: LD_INT 2
25110: NEG
25111: PUSH
25112: LD_INT 0
25114: PUSH
25115: EMPTY
25116: LIST
25117: LIST
25118: PUSH
25119: LD_INT 2
25121: NEG
25122: PUSH
25123: LD_INT 1
25125: NEG
25126: PUSH
25127: EMPTY
25128: LIST
25129: LIST
25130: PUSH
25131: LD_INT 2
25133: NEG
25134: PUSH
25135: LD_INT 2
25137: NEG
25138: PUSH
25139: EMPTY
25140: LIST
25141: LIST
25142: PUSH
25143: EMPTY
25144: LIST
25145: LIST
25146: LIST
25147: LIST
25148: LIST
25149: LIST
25150: LIST
25151: LIST
25152: LIST
25153: LIST
25154: LIST
25155: LIST
25156: LIST
25157: LIST
25158: LIST
25159: LIST
25160: LIST
25161: LIST
25162: LIST
25163: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25164: LD_ADDR_VAR 0 55
25168: PUSH
25169: LD_INT 0
25171: PUSH
25172: LD_INT 0
25174: PUSH
25175: EMPTY
25176: LIST
25177: LIST
25178: PUSH
25179: LD_INT 0
25181: PUSH
25182: LD_INT 1
25184: NEG
25185: PUSH
25186: EMPTY
25187: LIST
25188: LIST
25189: PUSH
25190: LD_INT 1
25192: PUSH
25193: LD_INT 0
25195: PUSH
25196: EMPTY
25197: LIST
25198: LIST
25199: PUSH
25200: LD_INT 1
25202: PUSH
25203: LD_INT 1
25205: PUSH
25206: EMPTY
25207: LIST
25208: LIST
25209: PUSH
25210: LD_INT 0
25212: PUSH
25213: LD_INT 1
25215: PUSH
25216: EMPTY
25217: LIST
25218: LIST
25219: PUSH
25220: LD_INT 1
25222: NEG
25223: PUSH
25224: LD_INT 0
25226: PUSH
25227: EMPTY
25228: LIST
25229: LIST
25230: PUSH
25231: LD_INT 1
25233: NEG
25234: PUSH
25235: LD_INT 1
25237: NEG
25238: PUSH
25239: EMPTY
25240: LIST
25241: LIST
25242: PUSH
25243: LD_INT 1
25245: NEG
25246: PUSH
25247: LD_INT 2
25249: NEG
25250: PUSH
25251: EMPTY
25252: LIST
25253: LIST
25254: PUSH
25255: LD_INT 0
25257: PUSH
25258: LD_INT 2
25260: NEG
25261: PUSH
25262: EMPTY
25263: LIST
25264: LIST
25265: PUSH
25266: LD_INT 1
25268: PUSH
25269: LD_INT 1
25271: NEG
25272: PUSH
25273: EMPTY
25274: LIST
25275: LIST
25276: PUSH
25277: LD_INT 2
25279: PUSH
25280: LD_INT 0
25282: PUSH
25283: EMPTY
25284: LIST
25285: LIST
25286: PUSH
25287: LD_INT 2
25289: PUSH
25290: LD_INT 1
25292: PUSH
25293: EMPTY
25294: LIST
25295: LIST
25296: PUSH
25297: LD_INT 2
25299: PUSH
25300: LD_INT 2
25302: PUSH
25303: EMPTY
25304: LIST
25305: LIST
25306: PUSH
25307: LD_INT 1
25309: PUSH
25310: LD_INT 2
25312: PUSH
25313: EMPTY
25314: LIST
25315: LIST
25316: PUSH
25317: LD_INT 0
25319: PUSH
25320: LD_INT 2
25322: PUSH
25323: EMPTY
25324: LIST
25325: LIST
25326: PUSH
25327: LD_INT 1
25329: NEG
25330: PUSH
25331: LD_INT 1
25333: PUSH
25334: EMPTY
25335: LIST
25336: LIST
25337: PUSH
25338: LD_INT 2
25340: NEG
25341: PUSH
25342: LD_INT 0
25344: PUSH
25345: EMPTY
25346: LIST
25347: LIST
25348: PUSH
25349: LD_INT 2
25351: NEG
25352: PUSH
25353: LD_INT 1
25355: NEG
25356: PUSH
25357: EMPTY
25358: LIST
25359: LIST
25360: PUSH
25361: LD_INT 2
25363: NEG
25364: PUSH
25365: LD_INT 2
25367: NEG
25368: PUSH
25369: EMPTY
25370: LIST
25371: LIST
25372: PUSH
25373: EMPTY
25374: LIST
25375: LIST
25376: LIST
25377: LIST
25378: LIST
25379: LIST
25380: LIST
25381: LIST
25382: LIST
25383: LIST
25384: LIST
25385: LIST
25386: LIST
25387: LIST
25388: LIST
25389: LIST
25390: LIST
25391: LIST
25392: LIST
25393: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25394: LD_ADDR_VAR 0 56
25398: PUSH
25399: LD_INT 0
25401: PUSH
25402: LD_INT 0
25404: PUSH
25405: EMPTY
25406: LIST
25407: LIST
25408: PUSH
25409: LD_INT 0
25411: PUSH
25412: LD_INT 1
25414: NEG
25415: PUSH
25416: EMPTY
25417: LIST
25418: LIST
25419: PUSH
25420: LD_INT 1
25422: PUSH
25423: LD_INT 0
25425: PUSH
25426: EMPTY
25427: LIST
25428: LIST
25429: PUSH
25430: LD_INT 1
25432: PUSH
25433: LD_INT 1
25435: PUSH
25436: EMPTY
25437: LIST
25438: LIST
25439: PUSH
25440: LD_INT 0
25442: PUSH
25443: LD_INT 1
25445: PUSH
25446: EMPTY
25447: LIST
25448: LIST
25449: PUSH
25450: LD_INT 1
25452: NEG
25453: PUSH
25454: LD_INT 0
25456: PUSH
25457: EMPTY
25458: LIST
25459: LIST
25460: PUSH
25461: LD_INT 1
25463: NEG
25464: PUSH
25465: LD_INT 1
25467: NEG
25468: PUSH
25469: EMPTY
25470: LIST
25471: LIST
25472: PUSH
25473: LD_INT 1
25475: NEG
25476: PUSH
25477: LD_INT 2
25479: NEG
25480: PUSH
25481: EMPTY
25482: LIST
25483: LIST
25484: PUSH
25485: LD_INT 0
25487: PUSH
25488: LD_INT 2
25490: NEG
25491: PUSH
25492: EMPTY
25493: LIST
25494: LIST
25495: PUSH
25496: LD_INT 1
25498: PUSH
25499: LD_INT 1
25501: NEG
25502: PUSH
25503: EMPTY
25504: LIST
25505: LIST
25506: PUSH
25507: LD_INT 2
25509: PUSH
25510: LD_INT 0
25512: PUSH
25513: EMPTY
25514: LIST
25515: LIST
25516: PUSH
25517: LD_INT 2
25519: PUSH
25520: LD_INT 1
25522: PUSH
25523: EMPTY
25524: LIST
25525: LIST
25526: PUSH
25527: LD_INT 2
25529: PUSH
25530: LD_INT 2
25532: PUSH
25533: EMPTY
25534: LIST
25535: LIST
25536: PUSH
25537: LD_INT 1
25539: PUSH
25540: LD_INT 2
25542: PUSH
25543: EMPTY
25544: LIST
25545: LIST
25546: PUSH
25547: LD_INT 0
25549: PUSH
25550: LD_INT 2
25552: PUSH
25553: EMPTY
25554: LIST
25555: LIST
25556: PUSH
25557: LD_INT 1
25559: NEG
25560: PUSH
25561: LD_INT 1
25563: PUSH
25564: EMPTY
25565: LIST
25566: LIST
25567: PUSH
25568: LD_INT 2
25570: NEG
25571: PUSH
25572: LD_INT 0
25574: PUSH
25575: EMPTY
25576: LIST
25577: LIST
25578: PUSH
25579: LD_INT 2
25581: NEG
25582: PUSH
25583: LD_INT 1
25585: NEG
25586: PUSH
25587: EMPTY
25588: LIST
25589: LIST
25590: PUSH
25591: LD_INT 2
25593: NEG
25594: PUSH
25595: LD_INT 2
25597: NEG
25598: PUSH
25599: EMPTY
25600: LIST
25601: LIST
25602: PUSH
25603: EMPTY
25604: LIST
25605: LIST
25606: LIST
25607: LIST
25608: LIST
25609: LIST
25610: LIST
25611: LIST
25612: LIST
25613: LIST
25614: LIST
25615: LIST
25616: LIST
25617: LIST
25618: LIST
25619: LIST
25620: LIST
25621: LIST
25622: LIST
25623: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25624: LD_ADDR_VAR 0 57
25628: PUSH
25629: LD_INT 0
25631: PUSH
25632: LD_INT 0
25634: PUSH
25635: EMPTY
25636: LIST
25637: LIST
25638: PUSH
25639: LD_INT 0
25641: PUSH
25642: LD_INT 1
25644: NEG
25645: PUSH
25646: EMPTY
25647: LIST
25648: LIST
25649: PUSH
25650: LD_INT 1
25652: PUSH
25653: LD_INT 0
25655: PUSH
25656: EMPTY
25657: LIST
25658: LIST
25659: PUSH
25660: LD_INT 1
25662: PUSH
25663: LD_INT 1
25665: PUSH
25666: EMPTY
25667: LIST
25668: LIST
25669: PUSH
25670: LD_INT 0
25672: PUSH
25673: LD_INT 1
25675: PUSH
25676: EMPTY
25677: LIST
25678: LIST
25679: PUSH
25680: LD_INT 1
25682: NEG
25683: PUSH
25684: LD_INT 0
25686: PUSH
25687: EMPTY
25688: LIST
25689: LIST
25690: PUSH
25691: LD_INT 1
25693: NEG
25694: PUSH
25695: LD_INT 1
25697: NEG
25698: PUSH
25699: EMPTY
25700: LIST
25701: LIST
25702: PUSH
25703: LD_INT 1
25705: NEG
25706: PUSH
25707: LD_INT 2
25709: NEG
25710: PUSH
25711: EMPTY
25712: LIST
25713: LIST
25714: PUSH
25715: LD_INT 0
25717: PUSH
25718: LD_INT 2
25720: NEG
25721: PUSH
25722: EMPTY
25723: LIST
25724: LIST
25725: PUSH
25726: LD_INT 1
25728: PUSH
25729: LD_INT 1
25731: NEG
25732: PUSH
25733: EMPTY
25734: LIST
25735: LIST
25736: PUSH
25737: LD_INT 2
25739: PUSH
25740: LD_INT 0
25742: PUSH
25743: EMPTY
25744: LIST
25745: LIST
25746: PUSH
25747: LD_INT 2
25749: PUSH
25750: LD_INT 1
25752: PUSH
25753: EMPTY
25754: LIST
25755: LIST
25756: PUSH
25757: LD_INT 2
25759: PUSH
25760: LD_INT 2
25762: PUSH
25763: EMPTY
25764: LIST
25765: LIST
25766: PUSH
25767: LD_INT 1
25769: PUSH
25770: LD_INT 2
25772: PUSH
25773: EMPTY
25774: LIST
25775: LIST
25776: PUSH
25777: LD_INT 0
25779: PUSH
25780: LD_INT 2
25782: PUSH
25783: EMPTY
25784: LIST
25785: LIST
25786: PUSH
25787: LD_INT 1
25789: NEG
25790: PUSH
25791: LD_INT 1
25793: PUSH
25794: EMPTY
25795: LIST
25796: LIST
25797: PUSH
25798: LD_INT 2
25800: NEG
25801: PUSH
25802: LD_INT 0
25804: PUSH
25805: EMPTY
25806: LIST
25807: LIST
25808: PUSH
25809: LD_INT 2
25811: NEG
25812: PUSH
25813: LD_INT 1
25815: NEG
25816: PUSH
25817: EMPTY
25818: LIST
25819: LIST
25820: PUSH
25821: LD_INT 2
25823: NEG
25824: PUSH
25825: LD_INT 2
25827: NEG
25828: PUSH
25829: EMPTY
25830: LIST
25831: LIST
25832: PUSH
25833: EMPTY
25834: LIST
25835: LIST
25836: LIST
25837: LIST
25838: LIST
25839: LIST
25840: LIST
25841: LIST
25842: LIST
25843: LIST
25844: LIST
25845: LIST
25846: LIST
25847: LIST
25848: LIST
25849: LIST
25850: LIST
25851: LIST
25852: LIST
25853: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25854: LD_ADDR_VAR 0 58
25858: PUSH
25859: LD_INT 0
25861: PUSH
25862: LD_INT 0
25864: PUSH
25865: EMPTY
25866: LIST
25867: LIST
25868: PUSH
25869: LD_INT 0
25871: PUSH
25872: LD_INT 1
25874: NEG
25875: PUSH
25876: EMPTY
25877: LIST
25878: LIST
25879: PUSH
25880: LD_INT 1
25882: PUSH
25883: LD_INT 0
25885: PUSH
25886: EMPTY
25887: LIST
25888: LIST
25889: PUSH
25890: LD_INT 1
25892: PUSH
25893: LD_INT 1
25895: PUSH
25896: EMPTY
25897: LIST
25898: LIST
25899: PUSH
25900: LD_INT 0
25902: PUSH
25903: LD_INT 1
25905: PUSH
25906: EMPTY
25907: LIST
25908: LIST
25909: PUSH
25910: LD_INT 1
25912: NEG
25913: PUSH
25914: LD_INT 0
25916: PUSH
25917: EMPTY
25918: LIST
25919: LIST
25920: PUSH
25921: LD_INT 1
25923: NEG
25924: PUSH
25925: LD_INT 1
25927: NEG
25928: PUSH
25929: EMPTY
25930: LIST
25931: LIST
25932: PUSH
25933: LD_INT 1
25935: NEG
25936: PUSH
25937: LD_INT 2
25939: NEG
25940: PUSH
25941: EMPTY
25942: LIST
25943: LIST
25944: PUSH
25945: LD_INT 0
25947: PUSH
25948: LD_INT 2
25950: NEG
25951: PUSH
25952: EMPTY
25953: LIST
25954: LIST
25955: PUSH
25956: LD_INT 1
25958: PUSH
25959: LD_INT 1
25961: NEG
25962: PUSH
25963: EMPTY
25964: LIST
25965: LIST
25966: PUSH
25967: LD_INT 2
25969: PUSH
25970: LD_INT 0
25972: PUSH
25973: EMPTY
25974: LIST
25975: LIST
25976: PUSH
25977: LD_INT 2
25979: PUSH
25980: LD_INT 1
25982: PUSH
25983: EMPTY
25984: LIST
25985: LIST
25986: PUSH
25987: LD_INT 2
25989: PUSH
25990: LD_INT 2
25992: PUSH
25993: EMPTY
25994: LIST
25995: LIST
25996: PUSH
25997: LD_INT 1
25999: PUSH
26000: LD_INT 2
26002: PUSH
26003: EMPTY
26004: LIST
26005: LIST
26006: PUSH
26007: LD_INT 0
26009: PUSH
26010: LD_INT 2
26012: PUSH
26013: EMPTY
26014: LIST
26015: LIST
26016: PUSH
26017: LD_INT 1
26019: NEG
26020: PUSH
26021: LD_INT 1
26023: PUSH
26024: EMPTY
26025: LIST
26026: LIST
26027: PUSH
26028: LD_INT 2
26030: NEG
26031: PUSH
26032: LD_INT 0
26034: PUSH
26035: EMPTY
26036: LIST
26037: LIST
26038: PUSH
26039: LD_INT 2
26041: NEG
26042: PUSH
26043: LD_INT 1
26045: NEG
26046: PUSH
26047: EMPTY
26048: LIST
26049: LIST
26050: PUSH
26051: LD_INT 2
26053: NEG
26054: PUSH
26055: LD_INT 2
26057: NEG
26058: PUSH
26059: EMPTY
26060: LIST
26061: LIST
26062: PUSH
26063: EMPTY
26064: LIST
26065: LIST
26066: LIST
26067: LIST
26068: LIST
26069: LIST
26070: LIST
26071: LIST
26072: LIST
26073: LIST
26074: LIST
26075: LIST
26076: LIST
26077: LIST
26078: LIST
26079: LIST
26080: LIST
26081: LIST
26082: LIST
26083: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
26084: LD_ADDR_VAR 0 59
26088: PUSH
26089: LD_INT 0
26091: PUSH
26092: LD_INT 0
26094: PUSH
26095: EMPTY
26096: LIST
26097: LIST
26098: PUSH
26099: LD_INT 0
26101: PUSH
26102: LD_INT 1
26104: NEG
26105: PUSH
26106: EMPTY
26107: LIST
26108: LIST
26109: PUSH
26110: LD_INT 1
26112: PUSH
26113: LD_INT 0
26115: PUSH
26116: EMPTY
26117: LIST
26118: LIST
26119: PUSH
26120: LD_INT 1
26122: PUSH
26123: LD_INT 1
26125: PUSH
26126: EMPTY
26127: LIST
26128: LIST
26129: PUSH
26130: LD_INT 0
26132: PUSH
26133: LD_INT 1
26135: PUSH
26136: EMPTY
26137: LIST
26138: LIST
26139: PUSH
26140: LD_INT 1
26142: NEG
26143: PUSH
26144: LD_INT 0
26146: PUSH
26147: EMPTY
26148: LIST
26149: LIST
26150: PUSH
26151: LD_INT 1
26153: NEG
26154: PUSH
26155: LD_INT 1
26157: NEG
26158: PUSH
26159: EMPTY
26160: LIST
26161: LIST
26162: PUSH
26163: EMPTY
26164: LIST
26165: LIST
26166: LIST
26167: LIST
26168: LIST
26169: LIST
26170: LIST
26171: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
26172: LD_ADDR_VAR 0 60
26176: PUSH
26177: LD_INT 0
26179: PUSH
26180: LD_INT 0
26182: PUSH
26183: EMPTY
26184: LIST
26185: LIST
26186: PUSH
26187: LD_INT 0
26189: PUSH
26190: LD_INT 1
26192: NEG
26193: PUSH
26194: EMPTY
26195: LIST
26196: LIST
26197: PUSH
26198: LD_INT 1
26200: PUSH
26201: LD_INT 0
26203: PUSH
26204: EMPTY
26205: LIST
26206: LIST
26207: PUSH
26208: LD_INT 1
26210: PUSH
26211: LD_INT 1
26213: PUSH
26214: EMPTY
26215: LIST
26216: LIST
26217: PUSH
26218: LD_INT 0
26220: PUSH
26221: LD_INT 1
26223: PUSH
26224: EMPTY
26225: LIST
26226: LIST
26227: PUSH
26228: LD_INT 1
26230: NEG
26231: PUSH
26232: LD_INT 0
26234: PUSH
26235: EMPTY
26236: LIST
26237: LIST
26238: PUSH
26239: LD_INT 1
26241: NEG
26242: PUSH
26243: LD_INT 1
26245: NEG
26246: PUSH
26247: EMPTY
26248: LIST
26249: LIST
26250: PUSH
26251: EMPTY
26252: LIST
26253: LIST
26254: LIST
26255: LIST
26256: LIST
26257: LIST
26258: LIST
26259: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
26260: LD_ADDR_VAR 0 61
26264: PUSH
26265: LD_INT 0
26267: PUSH
26268: LD_INT 0
26270: PUSH
26271: EMPTY
26272: LIST
26273: LIST
26274: PUSH
26275: LD_INT 0
26277: PUSH
26278: LD_INT 1
26280: NEG
26281: PUSH
26282: EMPTY
26283: LIST
26284: LIST
26285: PUSH
26286: LD_INT 1
26288: PUSH
26289: LD_INT 0
26291: PUSH
26292: EMPTY
26293: LIST
26294: LIST
26295: PUSH
26296: LD_INT 1
26298: PUSH
26299: LD_INT 1
26301: PUSH
26302: EMPTY
26303: LIST
26304: LIST
26305: PUSH
26306: LD_INT 0
26308: PUSH
26309: LD_INT 1
26311: PUSH
26312: EMPTY
26313: LIST
26314: LIST
26315: PUSH
26316: LD_INT 1
26318: NEG
26319: PUSH
26320: LD_INT 0
26322: PUSH
26323: EMPTY
26324: LIST
26325: LIST
26326: PUSH
26327: LD_INT 1
26329: NEG
26330: PUSH
26331: LD_INT 1
26333: NEG
26334: PUSH
26335: EMPTY
26336: LIST
26337: LIST
26338: PUSH
26339: EMPTY
26340: LIST
26341: LIST
26342: LIST
26343: LIST
26344: LIST
26345: LIST
26346: LIST
26347: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
26348: LD_ADDR_VAR 0 62
26352: PUSH
26353: LD_INT 0
26355: PUSH
26356: LD_INT 0
26358: PUSH
26359: EMPTY
26360: LIST
26361: LIST
26362: PUSH
26363: LD_INT 0
26365: PUSH
26366: LD_INT 1
26368: NEG
26369: PUSH
26370: EMPTY
26371: LIST
26372: LIST
26373: PUSH
26374: LD_INT 1
26376: PUSH
26377: LD_INT 0
26379: PUSH
26380: EMPTY
26381: LIST
26382: LIST
26383: PUSH
26384: LD_INT 1
26386: PUSH
26387: LD_INT 1
26389: PUSH
26390: EMPTY
26391: LIST
26392: LIST
26393: PUSH
26394: LD_INT 0
26396: PUSH
26397: LD_INT 1
26399: PUSH
26400: EMPTY
26401: LIST
26402: LIST
26403: PUSH
26404: LD_INT 1
26406: NEG
26407: PUSH
26408: LD_INT 0
26410: PUSH
26411: EMPTY
26412: LIST
26413: LIST
26414: PUSH
26415: LD_INT 1
26417: NEG
26418: PUSH
26419: LD_INT 1
26421: NEG
26422: PUSH
26423: EMPTY
26424: LIST
26425: LIST
26426: PUSH
26427: EMPTY
26428: LIST
26429: LIST
26430: LIST
26431: LIST
26432: LIST
26433: LIST
26434: LIST
26435: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
26436: LD_ADDR_VAR 0 63
26440: PUSH
26441: LD_INT 0
26443: PUSH
26444: LD_INT 0
26446: PUSH
26447: EMPTY
26448: LIST
26449: LIST
26450: PUSH
26451: LD_INT 0
26453: PUSH
26454: LD_INT 1
26456: NEG
26457: PUSH
26458: EMPTY
26459: LIST
26460: LIST
26461: PUSH
26462: LD_INT 1
26464: PUSH
26465: LD_INT 0
26467: PUSH
26468: EMPTY
26469: LIST
26470: LIST
26471: PUSH
26472: LD_INT 1
26474: PUSH
26475: LD_INT 1
26477: PUSH
26478: EMPTY
26479: LIST
26480: LIST
26481: PUSH
26482: LD_INT 0
26484: PUSH
26485: LD_INT 1
26487: PUSH
26488: EMPTY
26489: LIST
26490: LIST
26491: PUSH
26492: LD_INT 1
26494: NEG
26495: PUSH
26496: LD_INT 0
26498: PUSH
26499: EMPTY
26500: LIST
26501: LIST
26502: PUSH
26503: LD_INT 1
26505: NEG
26506: PUSH
26507: LD_INT 1
26509: NEG
26510: PUSH
26511: EMPTY
26512: LIST
26513: LIST
26514: PUSH
26515: EMPTY
26516: LIST
26517: LIST
26518: LIST
26519: LIST
26520: LIST
26521: LIST
26522: LIST
26523: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
26524: LD_ADDR_VAR 0 64
26528: PUSH
26529: LD_INT 0
26531: PUSH
26532: LD_INT 0
26534: PUSH
26535: EMPTY
26536: LIST
26537: LIST
26538: PUSH
26539: LD_INT 0
26541: PUSH
26542: LD_INT 1
26544: NEG
26545: PUSH
26546: EMPTY
26547: LIST
26548: LIST
26549: PUSH
26550: LD_INT 1
26552: PUSH
26553: LD_INT 0
26555: PUSH
26556: EMPTY
26557: LIST
26558: LIST
26559: PUSH
26560: LD_INT 1
26562: PUSH
26563: LD_INT 1
26565: PUSH
26566: EMPTY
26567: LIST
26568: LIST
26569: PUSH
26570: LD_INT 0
26572: PUSH
26573: LD_INT 1
26575: PUSH
26576: EMPTY
26577: LIST
26578: LIST
26579: PUSH
26580: LD_INT 1
26582: NEG
26583: PUSH
26584: LD_INT 0
26586: PUSH
26587: EMPTY
26588: LIST
26589: LIST
26590: PUSH
26591: LD_INT 1
26593: NEG
26594: PUSH
26595: LD_INT 1
26597: NEG
26598: PUSH
26599: EMPTY
26600: LIST
26601: LIST
26602: PUSH
26603: EMPTY
26604: LIST
26605: LIST
26606: LIST
26607: LIST
26608: LIST
26609: LIST
26610: LIST
26611: ST_TO_ADDR
// end ; 1 :
26612: GO 32509
26614: LD_INT 1
26616: DOUBLE
26617: EQUAL
26618: IFTRUE 26622
26620: GO 29245
26622: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
26623: LD_ADDR_VAR 0 11
26627: PUSH
26628: LD_INT 1
26630: NEG
26631: PUSH
26632: LD_INT 3
26634: NEG
26635: PUSH
26636: EMPTY
26637: LIST
26638: LIST
26639: PUSH
26640: LD_INT 0
26642: PUSH
26643: LD_INT 3
26645: NEG
26646: PUSH
26647: EMPTY
26648: LIST
26649: LIST
26650: PUSH
26651: LD_INT 1
26653: PUSH
26654: LD_INT 2
26656: NEG
26657: PUSH
26658: EMPTY
26659: LIST
26660: LIST
26661: PUSH
26662: EMPTY
26663: LIST
26664: LIST
26665: LIST
26666: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
26667: LD_ADDR_VAR 0 12
26671: PUSH
26672: LD_INT 2
26674: PUSH
26675: LD_INT 1
26677: NEG
26678: PUSH
26679: EMPTY
26680: LIST
26681: LIST
26682: PUSH
26683: LD_INT 3
26685: PUSH
26686: LD_INT 0
26688: PUSH
26689: EMPTY
26690: LIST
26691: LIST
26692: PUSH
26693: LD_INT 3
26695: PUSH
26696: LD_INT 1
26698: PUSH
26699: EMPTY
26700: LIST
26701: LIST
26702: PUSH
26703: EMPTY
26704: LIST
26705: LIST
26706: LIST
26707: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
26708: LD_ADDR_VAR 0 13
26712: PUSH
26713: LD_INT 3
26715: PUSH
26716: LD_INT 2
26718: PUSH
26719: EMPTY
26720: LIST
26721: LIST
26722: PUSH
26723: LD_INT 3
26725: PUSH
26726: LD_INT 3
26728: PUSH
26729: EMPTY
26730: LIST
26731: LIST
26732: PUSH
26733: LD_INT 2
26735: PUSH
26736: LD_INT 3
26738: PUSH
26739: EMPTY
26740: LIST
26741: LIST
26742: PUSH
26743: EMPTY
26744: LIST
26745: LIST
26746: LIST
26747: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
26748: LD_ADDR_VAR 0 14
26752: PUSH
26753: LD_INT 1
26755: PUSH
26756: LD_INT 3
26758: PUSH
26759: EMPTY
26760: LIST
26761: LIST
26762: PUSH
26763: LD_INT 0
26765: PUSH
26766: LD_INT 3
26768: PUSH
26769: EMPTY
26770: LIST
26771: LIST
26772: PUSH
26773: LD_INT 1
26775: NEG
26776: PUSH
26777: LD_INT 2
26779: PUSH
26780: EMPTY
26781: LIST
26782: LIST
26783: PUSH
26784: EMPTY
26785: LIST
26786: LIST
26787: LIST
26788: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
26789: LD_ADDR_VAR 0 15
26793: PUSH
26794: LD_INT 2
26796: NEG
26797: PUSH
26798: LD_INT 1
26800: PUSH
26801: EMPTY
26802: LIST
26803: LIST
26804: PUSH
26805: LD_INT 3
26807: NEG
26808: PUSH
26809: LD_INT 0
26811: PUSH
26812: EMPTY
26813: LIST
26814: LIST
26815: PUSH
26816: LD_INT 3
26818: NEG
26819: PUSH
26820: LD_INT 1
26822: NEG
26823: PUSH
26824: EMPTY
26825: LIST
26826: LIST
26827: PUSH
26828: EMPTY
26829: LIST
26830: LIST
26831: LIST
26832: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
26833: LD_ADDR_VAR 0 16
26837: PUSH
26838: LD_INT 2
26840: NEG
26841: PUSH
26842: LD_INT 3
26844: NEG
26845: PUSH
26846: EMPTY
26847: LIST
26848: LIST
26849: PUSH
26850: LD_INT 3
26852: NEG
26853: PUSH
26854: LD_INT 2
26856: NEG
26857: PUSH
26858: EMPTY
26859: LIST
26860: LIST
26861: PUSH
26862: LD_INT 3
26864: NEG
26865: PUSH
26866: LD_INT 3
26868: NEG
26869: PUSH
26870: EMPTY
26871: LIST
26872: LIST
26873: PUSH
26874: EMPTY
26875: LIST
26876: LIST
26877: LIST
26878: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
26879: LD_ADDR_VAR 0 17
26883: PUSH
26884: LD_INT 1
26886: NEG
26887: PUSH
26888: LD_INT 3
26890: NEG
26891: PUSH
26892: EMPTY
26893: LIST
26894: LIST
26895: PUSH
26896: LD_INT 0
26898: PUSH
26899: LD_INT 3
26901: NEG
26902: PUSH
26903: EMPTY
26904: LIST
26905: LIST
26906: PUSH
26907: LD_INT 1
26909: PUSH
26910: LD_INT 2
26912: NEG
26913: PUSH
26914: EMPTY
26915: LIST
26916: LIST
26917: PUSH
26918: EMPTY
26919: LIST
26920: LIST
26921: LIST
26922: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
26923: LD_ADDR_VAR 0 18
26927: PUSH
26928: LD_INT 2
26930: PUSH
26931: LD_INT 1
26933: NEG
26934: PUSH
26935: EMPTY
26936: LIST
26937: LIST
26938: PUSH
26939: LD_INT 3
26941: PUSH
26942: LD_INT 0
26944: PUSH
26945: EMPTY
26946: LIST
26947: LIST
26948: PUSH
26949: LD_INT 3
26951: PUSH
26952: LD_INT 1
26954: PUSH
26955: EMPTY
26956: LIST
26957: LIST
26958: PUSH
26959: EMPTY
26960: LIST
26961: LIST
26962: LIST
26963: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
26964: LD_ADDR_VAR 0 19
26968: PUSH
26969: LD_INT 3
26971: PUSH
26972: LD_INT 2
26974: PUSH
26975: EMPTY
26976: LIST
26977: LIST
26978: PUSH
26979: LD_INT 3
26981: PUSH
26982: LD_INT 3
26984: PUSH
26985: EMPTY
26986: LIST
26987: LIST
26988: PUSH
26989: LD_INT 2
26991: PUSH
26992: LD_INT 3
26994: PUSH
26995: EMPTY
26996: LIST
26997: LIST
26998: PUSH
26999: EMPTY
27000: LIST
27001: LIST
27002: LIST
27003: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
27004: LD_ADDR_VAR 0 20
27008: PUSH
27009: LD_INT 1
27011: PUSH
27012: LD_INT 3
27014: PUSH
27015: EMPTY
27016: LIST
27017: LIST
27018: PUSH
27019: LD_INT 0
27021: PUSH
27022: LD_INT 3
27024: PUSH
27025: EMPTY
27026: LIST
27027: LIST
27028: PUSH
27029: LD_INT 1
27031: NEG
27032: PUSH
27033: LD_INT 2
27035: PUSH
27036: EMPTY
27037: LIST
27038: LIST
27039: PUSH
27040: EMPTY
27041: LIST
27042: LIST
27043: LIST
27044: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
27045: LD_ADDR_VAR 0 21
27049: PUSH
27050: LD_INT 2
27052: NEG
27053: PUSH
27054: LD_INT 1
27056: PUSH
27057: EMPTY
27058: LIST
27059: LIST
27060: PUSH
27061: LD_INT 3
27063: NEG
27064: PUSH
27065: LD_INT 0
27067: PUSH
27068: EMPTY
27069: LIST
27070: LIST
27071: PUSH
27072: LD_INT 3
27074: NEG
27075: PUSH
27076: LD_INT 1
27078: NEG
27079: PUSH
27080: EMPTY
27081: LIST
27082: LIST
27083: PUSH
27084: EMPTY
27085: LIST
27086: LIST
27087: LIST
27088: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
27089: LD_ADDR_VAR 0 22
27093: PUSH
27094: LD_INT 2
27096: NEG
27097: PUSH
27098: LD_INT 3
27100: NEG
27101: PUSH
27102: EMPTY
27103: LIST
27104: LIST
27105: PUSH
27106: LD_INT 3
27108: NEG
27109: PUSH
27110: LD_INT 2
27112: NEG
27113: PUSH
27114: EMPTY
27115: LIST
27116: LIST
27117: PUSH
27118: LD_INT 3
27120: NEG
27121: PUSH
27122: LD_INT 3
27124: NEG
27125: PUSH
27126: EMPTY
27127: LIST
27128: LIST
27129: PUSH
27130: EMPTY
27131: LIST
27132: LIST
27133: LIST
27134: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
27135: LD_ADDR_VAR 0 23
27139: PUSH
27140: LD_INT 0
27142: PUSH
27143: LD_INT 3
27145: NEG
27146: PUSH
27147: EMPTY
27148: LIST
27149: LIST
27150: PUSH
27151: LD_INT 1
27153: NEG
27154: PUSH
27155: LD_INT 4
27157: NEG
27158: PUSH
27159: EMPTY
27160: LIST
27161: LIST
27162: PUSH
27163: LD_INT 1
27165: PUSH
27166: LD_INT 3
27168: NEG
27169: PUSH
27170: EMPTY
27171: LIST
27172: LIST
27173: PUSH
27174: EMPTY
27175: LIST
27176: LIST
27177: LIST
27178: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
27179: LD_ADDR_VAR 0 24
27183: PUSH
27184: LD_INT 3
27186: PUSH
27187: LD_INT 0
27189: PUSH
27190: EMPTY
27191: LIST
27192: LIST
27193: PUSH
27194: LD_INT 3
27196: PUSH
27197: LD_INT 1
27199: NEG
27200: PUSH
27201: EMPTY
27202: LIST
27203: LIST
27204: PUSH
27205: LD_INT 4
27207: PUSH
27208: LD_INT 1
27210: PUSH
27211: EMPTY
27212: LIST
27213: LIST
27214: PUSH
27215: EMPTY
27216: LIST
27217: LIST
27218: LIST
27219: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
27220: LD_ADDR_VAR 0 25
27224: PUSH
27225: LD_INT 3
27227: PUSH
27228: LD_INT 3
27230: PUSH
27231: EMPTY
27232: LIST
27233: LIST
27234: PUSH
27235: LD_INT 4
27237: PUSH
27238: LD_INT 3
27240: PUSH
27241: EMPTY
27242: LIST
27243: LIST
27244: PUSH
27245: LD_INT 3
27247: PUSH
27248: LD_INT 4
27250: PUSH
27251: EMPTY
27252: LIST
27253: LIST
27254: PUSH
27255: EMPTY
27256: LIST
27257: LIST
27258: LIST
27259: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
27260: LD_ADDR_VAR 0 26
27264: PUSH
27265: LD_INT 0
27267: PUSH
27268: LD_INT 3
27270: PUSH
27271: EMPTY
27272: LIST
27273: LIST
27274: PUSH
27275: LD_INT 1
27277: PUSH
27278: LD_INT 4
27280: PUSH
27281: EMPTY
27282: LIST
27283: LIST
27284: PUSH
27285: LD_INT 1
27287: NEG
27288: PUSH
27289: LD_INT 3
27291: PUSH
27292: EMPTY
27293: LIST
27294: LIST
27295: PUSH
27296: EMPTY
27297: LIST
27298: LIST
27299: LIST
27300: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
27301: LD_ADDR_VAR 0 27
27305: PUSH
27306: LD_INT 3
27308: NEG
27309: PUSH
27310: LD_INT 0
27312: PUSH
27313: EMPTY
27314: LIST
27315: LIST
27316: PUSH
27317: LD_INT 3
27319: NEG
27320: PUSH
27321: LD_INT 1
27323: PUSH
27324: EMPTY
27325: LIST
27326: LIST
27327: PUSH
27328: LD_INT 4
27330: NEG
27331: PUSH
27332: LD_INT 1
27334: NEG
27335: PUSH
27336: EMPTY
27337: LIST
27338: LIST
27339: PUSH
27340: EMPTY
27341: LIST
27342: LIST
27343: LIST
27344: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
27345: LD_ADDR_VAR 0 28
27349: PUSH
27350: LD_INT 3
27352: NEG
27353: PUSH
27354: LD_INT 3
27356: NEG
27357: PUSH
27358: EMPTY
27359: LIST
27360: LIST
27361: PUSH
27362: LD_INT 3
27364: NEG
27365: PUSH
27366: LD_INT 4
27368: NEG
27369: PUSH
27370: EMPTY
27371: LIST
27372: LIST
27373: PUSH
27374: LD_INT 4
27376: NEG
27377: PUSH
27378: LD_INT 3
27380: NEG
27381: PUSH
27382: EMPTY
27383: LIST
27384: LIST
27385: PUSH
27386: EMPTY
27387: LIST
27388: LIST
27389: LIST
27390: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
27391: LD_ADDR_VAR 0 29
27395: PUSH
27396: LD_INT 1
27398: NEG
27399: PUSH
27400: LD_INT 3
27402: NEG
27403: PUSH
27404: EMPTY
27405: LIST
27406: LIST
27407: PUSH
27408: LD_INT 0
27410: PUSH
27411: LD_INT 3
27413: NEG
27414: PUSH
27415: EMPTY
27416: LIST
27417: LIST
27418: PUSH
27419: LD_INT 1
27421: PUSH
27422: LD_INT 2
27424: NEG
27425: PUSH
27426: EMPTY
27427: LIST
27428: LIST
27429: PUSH
27430: LD_INT 1
27432: NEG
27433: PUSH
27434: LD_INT 4
27436: NEG
27437: PUSH
27438: EMPTY
27439: LIST
27440: LIST
27441: PUSH
27442: LD_INT 0
27444: PUSH
27445: LD_INT 4
27447: NEG
27448: PUSH
27449: EMPTY
27450: LIST
27451: LIST
27452: PUSH
27453: LD_INT 1
27455: PUSH
27456: LD_INT 3
27458: NEG
27459: PUSH
27460: EMPTY
27461: LIST
27462: LIST
27463: PUSH
27464: LD_INT 1
27466: NEG
27467: PUSH
27468: LD_INT 5
27470: NEG
27471: PUSH
27472: EMPTY
27473: LIST
27474: LIST
27475: PUSH
27476: LD_INT 0
27478: PUSH
27479: LD_INT 5
27481: NEG
27482: PUSH
27483: EMPTY
27484: LIST
27485: LIST
27486: PUSH
27487: LD_INT 1
27489: PUSH
27490: LD_INT 4
27492: NEG
27493: PUSH
27494: EMPTY
27495: LIST
27496: LIST
27497: PUSH
27498: LD_INT 1
27500: NEG
27501: PUSH
27502: LD_INT 6
27504: NEG
27505: PUSH
27506: EMPTY
27507: LIST
27508: LIST
27509: PUSH
27510: LD_INT 0
27512: PUSH
27513: LD_INT 6
27515: NEG
27516: PUSH
27517: EMPTY
27518: LIST
27519: LIST
27520: PUSH
27521: LD_INT 1
27523: PUSH
27524: LD_INT 5
27526: NEG
27527: PUSH
27528: EMPTY
27529: LIST
27530: LIST
27531: PUSH
27532: EMPTY
27533: LIST
27534: LIST
27535: LIST
27536: LIST
27537: LIST
27538: LIST
27539: LIST
27540: LIST
27541: LIST
27542: LIST
27543: LIST
27544: LIST
27545: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
27546: LD_ADDR_VAR 0 30
27550: PUSH
27551: LD_INT 2
27553: PUSH
27554: LD_INT 1
27556: NEG
27557: PUSH
27558: EMPTY
27559: LIST
27560: LIST
27561: PUSH
27562: LD_INT 3
27564: PUSH
27565: LD_INT 0
27567: PUSH
27568: EMPTY
27569: LIST
27570: LIST
27571: PUSH
27572: LD_INT 3
27574: PUSH
27575: LD_INT 1
27577: PUSH
27578: EMPTY
27579: LIST
27580: LIST
27581: PUSH
27582: LD_INT 3
27584: PUSH
27585: LD_INT 1
27587: NEG
27588: PUSH
27589: EMPTY
27590: LIST
27591: LIST
27592: PUSH
27593: LD_INT 4
27595: PUSH
27596: LD_INT 0
27598: PUSH
27599: EMPTY
27600: LIST
27601: LIST
27602: PUSH
27603: LD_INT 4
27605: PUSH
27606: LD_INT 1
27608: PUSH
27609: EMPTY
27610: LIST
27611: LIST
27612: PUSH
27613: LD_INT 4
27615: PUSH
27616: LD_INT 1
27618: NEG
27619: PUSH
27620: EMPTY
27621: LIST
27622: LIST
27623: PUSH
27624: LD_INT 5
27626: PUSH
27627: LD_INT 0
27629: PUSH
27630: EMPTY
27631: LIST
27632: LIST
27633: PUSH
27634: LD_INT 5
27636: PUSH
27637: LD_INT 1
27639: PUSH
27640: EMPTY
27641: LIST
27642: LIST
27643: PUSH
27644: LD_INT 5
27646: PUSH
27647: LD_INT 1
27649: NEG
27650: PUSH
27651: EMPTY
27652: LIST
27653: LIST
27654: PUSH
27655: LD_INT 6
27657: PUSH
27658: LD_INT 0
27660: PUSH
27661: EMPTY
27662: LIST
27663: LIST
27664: PUSH
27665: LD_INT 6
27667: PUSH
27668: LD_INT 1
27670: PUSH
27671: EMPTY
27672: LIST
27673: LIST
27674: PUSH
27675: EMPTY
27676: LIST
27677: LIST
27678: LIST
27679: LIST
27680: LIST
27681: LIST
27682: LIST
27683: LIST
27684: LIST
27685: LIST
27686: LIST
27687: LIST
27688: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
27689: LD_ADDR_VAR 0 31
27693: PUSH
27694: LD_INT 3
27696: PUSH
27697: LD_INT 2
27699: PUSH
27700: EMPTY
27701: LIST
27702: LIST
27703: PUSH
27704: LD_INT 3
27706: PUSH
27707: LD_INT 3
27709: PUSH
27710: EMPTY
27711: LIST
27712: LIST
27713: PUSH
27714: LD_INT 2
27716: PUSH
27717: LD_INT 3
27719: PUSH
27720: EMPTY
27721: LIST
27722: LIST
27723: PUSH
27724: LD_INT 4
27726: PUSH
27727: LD_INT 3
27729: PUSH
27730: EMPTY
27731: LIST
27732: LIST
27733: PUSH
27734: LD_INT 4
27736: PUSH
27737: LD_INT 4
27739: PUSH
27740: EMPTY
27741: LIST
27742: LIST
27743: PUSH
27744: LD_INT 3
27746: PUSH
27747: LD_INT 4
27749: PUSH
27750: EMPTY
27751: LIST
27752: LIST
27753: PUSH
27754: LD_INT 5
27756: PUSH
27757: LD_INT 4
27759: PUSH
27760: EMPTY
27761: LIST
27762: LIST
27763: PUSH
27764: LD_INT 5
27766: PUSH
27767: LD_INT 5
27769: PUSH
27770: EMPTY
27771: LIST
27772: LIST
27773: PUSH
27774: LD_INT 4
27776: PUSH
27777: LD_INT 5
27779: PUSH
27780: EMPTY
27781: LIST
27782: LIST
27783: PUSH
27784: LD_INT 6
27786: PUSH
27787: LD_INT 5
27789: PUSH
27790: EMPTY
27791: LIST
27792: LIST
27793: PUSH
27794: LD_INT 6
27796: PUSH
27797: LD_INT 6
27799: PUSH
27800: EMPTY
27801: LIST
27802: LIST
27803: PUSH
27804: LD_INT 5
27806: PUSH
27807: LD_INT 6
27809: PUSH
27810: EMPTY
27811: LIST
27812: LIST
27813: PUSH
27814: EMPTY
27815: LIST
27816: LIST
27817: LIST
27818: LIST
27819: LIST
27820: LIST
27821: LIST
27822: LIST
27823: LIST
27824: LIST
27825: LIST
27826: LIST
27827: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
27828: LD_ADDR_VAR 0 32
27832: PUSH
27833: LD_INT 1
27835: PUSH
27836: LD_INT 3
27838: PUSH
27839: EMPTY
27840: LIST
27841: LIST
27842: PUSH
27843: LD_INT 0
27845: PUSH
27846: LD_INT 3
27848: PUSH
27849: EMPTY
27850: LIST
27851: LIST
27852: PUSH
27853: LD_INT 1
27855: NEG
27856: PUSH
27857: LD_INT 2
27859: PUSH
27860: EMPTY
27861: LIST
27862: LIST
27863: PUSH
27864: LD_INT 1
27866: PUSH
27867: LD_INT 4
27869: PUSH
27870: EMPTY
27871: LIST
27872: LIST
27873: PUSH
27874: LD_INT 0
27876: PUSH
27877: LD_INT 4
27879: PUSH
27880: EMPTY
27881: LIST
27882: LIST
27883: PUSH
27884: LD_INT 1
27886: NEG
27887: PUSH
27888: LD_INT 3
27890: PUSH
27891: EMPTY
27892: LIST
27893: LIST
27894: PUSH
27895: LD_INT 1
27897: PUSH
27898: LD_INT 5
27900: PUSH
27901: EMPTY
27902: LIST
27903: LIST
27904: PUSH
27905: LD_INT 0
27907: PUSH
27908: LD_INT 5
27910: PUSH
27911: EMPTY
27912: LIST
27913: LIST
27914: PUSH
27915: LD_INT 1
27917: NEG
27918: PUSH
27919: LD_INT 4
27921: PUSH
27922: EMPTY
27923: LIST
27924: LIST
27925: PUSH
27926: LD_INT 1
27928: PUSH
27929: LD_INT 6
27931: PUSH
27932: EMPTY
27933: LIST
27934: LIST
27935: PUSH
27936: LD_INT 0
27938: PUSH
27939: LD_INT 6
27941: PUSH
27942: EMPTY
27943: LIST
27944: LIST
27945: PUSH
27946: LD_INT 1
27948: NEG
27949: PUSH
27950: LD_INT 5
27952: PUSH
27953: EMPTY
27954: LIST
27955: LIST
27956: PUSH
27957: EMPTY
27958: LIST
27959: LIST
27960: LIST
27961: LIST
27962: LIST
27963: LIST
27964: LIST
27965: LIST
27966: LIST
27967: LIST
27968: LIST
27969: LIST
27970: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
27971: LD_ADDR_VAR 0 33
27975: PUSH
27976: LD_INT 2
27978: NEG
27979: PUSH
27980: LD_INT 1
27982: PUSH
27983: EMPTY
27984: LIST
27985: LIST
27986: PUSH
27987: LD_INT 3
27989: NEG
27990: PUSH
27991: LD_INT 0
27993: PUSH
27994: EMPTY
27995: LIST
27996: LIST
27997: PUSH
27998: LD_INT 3
28000: NEG
28001: PUSH
28002: LD_INT 1
28004: NEG
28005: PUSH
28006: EMPTY
28007: LIST
28008: LIST
28009: PUSH
28010: LD_INT 3
28012: NEG
28013: PUSH
28014: LD_INT 1
28016: PUSH
28017: EMPTY
28018: LIST
28019: LIST
28020: PUSH
28021: LD_INT 4
28023: NEG
28024: PUSH
28025: LD_INT 0
28027: PUSH
28028: EMPTY
28029: LIST
28030: LIST
28031: PUSH
28032: LD_INT 4
28034: NEG
28035: PUSH
28036: LD_INT 1
28038: NEG
28039: PUSH
28040: EMPTY
28041: LIST
28042: LIST
28043: PUSH
28044: LD_INT 4
28046: NEG
28047: PUSH
28048: LD_INT 1
28050: PUSH
28051: EMPTY
28052: LIST
28053: LIST
28054: PUSH
28055: LD_INT 5
28057: NEG
28058: PUSH
28059: LD_INT 0
28061: PUSH
28062: EMPTY
28063: LIST
28064: LIST
28065: PUSH
28066: LD_INT 5
28068: NEG
28069: PUSH
28070: LD_INT 1
28072: NEG
28073: PUSH
28074: EMPTY
28075: LIST
28076: LIST
28077: PUSH
28078: LD_INT 5
28080: NEG
28081: PUSH
28082: LD_INT 1
28084: PUSH
28085: EMPTY
28086: LIST
28087: LIST
28088: PUSH
28089: LD_INT 6
28091: NEG
28092: PUSH
28093: LD_INT 0
28095: PUSH
28096: EMPTY
28097: LIST
28098: LIST
28099: PUSH
28100: LD_INT 6
28102: NEG
28103: PUSH
28104: LD_INT 1
28106: NEG
28107: PUSH
28108: EMPTY
28109: LIST
28110: LIST
28111: PUSH
28112: EMPTY
28113: LIST
28114: LIST
28115: LIST
28116: LIST
28117: LIST
28118: LIST
28119: LIST
28120: LIST
28121: LIST
28122: LIST
28123: LIST
28124: LIST
28125: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
28126: LD_ADDR_VAR 0 34
28130: PUSH
28131: LD_INT 2
28133: NEG
28134: PUSH
28135: LD_INT 3
28137: NEG
28138: PUSH
28139: EMPTY
28140: LIST
28141: LIST
28142: PUSH
28143: LD_INT 3
28145: NEG
28146: PUSH
28147: LD_INT 2
28149: NEG
28150: PUSH
28151: EMPTY
28152: LIST
28153: LIST
28154: PUSH
28155: LD_INT 3
28157: NEG
28158: PUSH
28159: LD_INT 3
28161: NEG
28162: PUSH
28163: EMPTY
28164: LIST
28165: LIST
28166: PUSH
28167: LD_INT 3
28169: NEG
28170: PUSH
28171: LD_INT 4
28173: NEG
28174: PUSH
28175: EMPTY
28176: LIST
28177: LIST
28178: PUSH
28179: LD_INT 4
28181: NEG
28182: PUSH
28183: LD_INT 3
28185: NEG
28186: PUSH
28187: EMPTY
28188: LIST
28189: LIST
28190: PUSH
28191: LD_INT 4
28193: NEG
28194: PUSH
28195: LD_INT 4
28197: NEG
28198: PUSH
28199: EMPTY
28200: LIST
28201: LIST
28202: PUSH
28203: LD_INT 4
28205: NEG
28206: PUSH
28207: LD_INT 5
28209: NEG
28210: PUSH
28211: EMPTY
28212: LIST
28213: LIST
28214: PUSH
28215: LD_INT 5
28217: NEG
28218: PUSH
28219: LD_INT 4
28221: NEG
28222: PUSH
28223: EMPTY
28224: LIST
28225: LIST
28226: PUSH
28227: LD_INT 5
28229: NEG
28230: PUSH
28231: LD_INT 5
28233: NEG
28234: PUSH
28235: EMPTY
28236: LIST
28237: LIST
28238: PUSH
28239: LD_INT 5
28241: NEG
28242: PUSH
28243: LD_INT 6
28245: NEG
28246: PUSH
28247: EMPTY
28248: LIST
28249: LIST
28250: PUSH
28251: LD_INT 6
28253: NEG
28254: PUSH
28255: LD_INT 5
28257: NEG
28258: PUSH
28259: EMPTY
28260: LIST
28261: LIST
28262: PUSH
28263: LD_INT 6
28265: NEG
28266: PUSH
28267: LD_INT 6
28269: NEG
28270: PUSH
28271: EMPTY
28272: LIST
28273: LIST
28274: PUSH
28275: EMPTY
28276: LIST
28277: LIST
28278: LIST
28279: LIST
28280: LIST
28281: LIST
28282: LIST
28283: LIST
28284: LIST
28285: LIST
28286: LIST
28287: LIST
28288: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
28289: LD_ADDR_VAR 0 41
28293: PUSH
28294: LD_INT 0
28296: PUSH
28297: LD_INT 2
28299: NEG
28300: PUSH
28301: EMPTY
28302: LIST
28303: LIST
28304: PUSH
28305: LD_INT 1
28307: NEG
28308: PUSH
28309: LD_INT 3
28311: NEG
28312: PUSH
28313: EMPTY
28314: LIST
28315: LIST
28316: PUSH
28317: LD_INT 1
28319: PUSH
28320: LD_INT 2
28322: NEG
28323: PUSH
28324: EMPTY
28325: LIST
28326: LIST
28327: PUSH
28328: EMPTY
28329: LIST
28330: LIST
28331: LIST
28332: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
28333: LD_ADDR_VAR 0 42
28337: PUSH
28338: LD_INT 2
28340: PUSH
28341: LD_INT 0
28343: PUSH
28344: EMPTY
28345: LIST
28346: LIST
28347: PUSH
28348: LD_INT 2
28350: PUSH
28351: LD_INT 1
28353: NEG
28354: PUSH
28355: EMPTY
28356: LIST
28357: LIST
28358: PUSH
28359: LD_INT 3
28361: PUSH
28362: LD_INT 1
28364: PUSH
28365: EMPTY
28366: LIST
28367: LIST
28368: PUSH
28369: EMPTY
28370: LIST
28371: LIST
28372: LIST
28373: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
28374: LD_ADDR_VAR 0 43
28378: PUSH
28379: LD_INT 2
28381: PUSH
28382: LD_INT 2
28384: PUSH
28385: EMPTY
28386: LIST
28387: LIST
28388: PUSH
28389: LD_INT 3
28391: PUSH
28392: LD_INT 2
28394: PUSH
28395: EMPTY
28396: LIST
28397: LIST
28398: PUSH
28399: LD_INT 2
28401: PUSH
28402: LD_INT 3
28404: PUSH
28405: EMPTY
28406: LIST
28407: LIST
28408: PUSH
28409: EMPTY
28410: LIST
28411: LIST
28412: LIST
28413: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
28414: LD_ADDR_VAR 0 44
28418: PUSH
28419: LD_INT 0
28421: PUSH
28422: LD_INT 2
28424: PUSH
28425: EMPTY
28426: LIST
28427: LIST
28428: PUSH
28429: LD_INT 1
28431: PUSH
28432: LD_INT 3
28434: PUSH
28435: EMPTY
28436: LIST
28437: LIST
28438: PUSH
28439: LD_INT 1
28441: NEG
28442: PUSH
28443: LD_INT 2
28445: PUSH
28446: EMPTY
28447: LIST
28448: LIST
28449: PUSH
28450: EMPTY
28451: LIST
28452: LIST
28453: LIST
28454: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
28455: LD_ADDR_VAR 0 45
28459: PUSH
28460: LD_INT 2
28462: NEG
28463: PUSH
28464: LD_INT 0
28466: PUSH
28467: EMPTY
28468: LIST
28469: LIST
28470: PUSH
28471: LD_INT 2
28473: NEG
28474: PUSH
28475: LD_INT 1
28477: PUSH
28478: EMPTY
28479: LIST
28480: LIST
28481: PUSH
28482: LD_INT 3
28484: NEG
28485: PUSH
28486: LD_INT 1
28488: NEG
28489: PUSH
28490: EMPTY
28491: LIST
28492: LIST
28493: PUSH
28494: EMPTY
28495: LIST
28496: LIST
28497: LIST
28498: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
28499: LD_ADDR_VAR 0 46
28503: PUSH
28504: LD_INT 2
28506: NEG
28507: PUSH
28508: LD_INT 2
28510: NEG
28511: PUSH
28512: EMPTY
28513: LIST
28514: LIST
28515: PUSH
28516: LD_INT 2
28518: NEG
28519: PUSH
28520: LD_INT 3
28522: NEG
28523: PUSH
28524: EMPTY
28525: LIST
28526: LIST
28527: PUSH
28528: LD_INT 3
28530: NEG
28531: PUSH
28532: LD_INT 2
28534: NEG
28535: PUSH
28536: EMPTY
28537: LIST
28538: LIST
28539: PUSH
28540: EMPTY
28541: LIST
28542: LIST
28543: LIST
28544: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
28545: LD_ADDR_VAR 0 47
28549: PUSH
28550: LD_INT 2
28552: NEG
28553: PUSH
28554: LD_INT 3
28556: NEG
28557: PUSH
28558: EMPTY
28559: LIST
28560: LIST
28561: PUSH
28562: LD_INT 1
28564: NEG
28565: PUSH
28566: LD_INT 3
28568: NEG
28569: PUSH
28570: EMPTY
28571: LIST
28572: LIST
28573: PUSH
28574: EMPTY
28575: LIST
28576: LIST
28577: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
28578: LD_ADDR_VAR 0 48
28582: PUSH
28583: LD_INT 1
28585: PUSH
28586: LD_INT 2
28588: NEG
28589: PUSH
28590: EMPTY
28591: LIST
28592: LIST
28593: PUSH
28594: LD_INT 2
28596: PUSH
28597: LD_INT 1
28599: NEG
28600: PUSH
28601: EMPTY
28602: LIST
28603: LIST
28604: PUSH
28605: EMPTY
28606: LIST
28607: LIST
28608: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
28609: LD_ADDR_VAR 0 49
28613: PUSH
28614: LD_INT 3
28616: PUSH
28617: LD_INT 1
28619: PUSH
28620: EMPTY
28621: LIST
28622: LIST
28623: PUSH
28624: LD_INT 3
28626: PUSH
28627: LD_INT 2
28629: PUSH
28630: EMPTY
28631: LIST
28632: LIST
28633: PUSH
28634: EMPTY
28635: LIST
28636: LIST
28637: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
28638: LD_ADDR_VAR 0 50
28642: PUSH
28643: LD_INT 2
28645: PUSH
28646: LD_INT 3
28648: PUSH
28649: EMPTY
28650: LIST
28651: LIST
28652: PUSH
28653: LD_INT 1
28655: PUSH
28656: LD_INT 3
28658: PUSH
28659: EMPTY
28660: LIST
28661: LIST
28662: PUSH
28663: EMPTY
28664: LIST
28665: LIST
28666: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
28667: LD_ADDR_VAR 0 51
28671: PUSH
28672: LD_INT 1
28674: NEG
28675: PUSH
28676: LD_INT 2
28678: PUSH
28679: EMPTY
28680: LIST
28681: LIST
28682: PUSH
28683: LD_INT 2
28685: NEG
28686: PUSH
28687: LD_INT 1
28689: PUSH
28690: EMPTY
28691: LIST
28692: LIST
28693: PUSH
28694: EMPTY
28695: LIST
28696: LIST
28697: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
28698: LD_ADDR_VAR 0 52
28702: PUSH
28703: LD_INT 3
28705: NEG
28706: PUSH
28707: LD_INT 1
28709: NEG
28710: PUSH
28711: EMPTY
28712: LIST
28713: LIST
28714: PUSH
28715: LD_INT 3
28717: NEG
28718: PUSH
28719: LD_INT 2
28721: NEG
28722: PUSH
28723: EMPTY
28724: LIST
28725: LIST
28726: PUSH
28727: EMPTY
28728: LIST
28729: LIST
28730: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
28731: LD_ADDR_VAR 0 53
28735: PUSH
28736: LD_INT 1
28738: NEG
28739: PUSH
28740: LD_INT 3
28742: NEG
28743: PUSH
28744: EMPTY
28745: LIST
28746: LIST
28747: PUSH
28748: LD_INT 0
28750: PUSH
28751: LD_INT 3
28753: NEG
28754: PUSH
28755: EMPTY
28756: LIST
28757: LIST
28758: PUSH
28759: LD_INT 1
28761: PUSH
28762: LD_INT 2
28764: NEG
28765: PUSH
28766: EMPTY
28767: LIST
28768: LIST
28769: PUSH
28770: EMPTY
28771: LIST
28772: LIST
28773: LIST
28774: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
28775: LD_ADDR_VAR 0 54
28779: PUSH
28780: LD_INT 2
28782: PUSH
28783: LD_INT 1
28785: NEG
28786: PUSH
28787: EMPTY
28788: LIST
28789: LIST
28790: PUSH
28791: LD_INT 3
28793: PUSH
28794: LD_INT 0
28796: PUSH
28797: EMPTY
28798: LIST
28799: LIST
28800: PUSH
28801: LD_INT 3
28803: PUSH
28804: LD_INT 1
28806: PUSH
28807: EMPTY
28808: LIST
28809: LIST
28810: PUSH
28811: EMPTY
28812: LIST
28813: LIST
28814: LIST
28815: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
28816: LD_ADDR_VAR 0 55
28820: PUSH
28821: LD_INT 3
28823: PUSH
28824: LD_INT 2
28826: PUSH
28827: EMPTY
28828: LIST
28829: LIST
28830: PUSH
28831: LD_INT 3
28833: PUSH
28834: LD_INT 3
28836: PUSH
28837: EMPTY
28838: LIST
28839: LIST
28840: PUSH
28841: LD_INT 2
28843: PUSH
28844: LD_INT 3
28846: PUSH
28847: EMPTY
28848: LIST
28849: LIST
28850: PUSH
28851: EMPTY
28852: LIST
28853: LIST
28854: LIST
28855: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
28856: LD_ADDR_VAR 0 56
28860: PUSH
28861: LD_INT 1
28863: PUSH
28864: LD_INT 3
28866: PUSH
28867: EMPTY
28868: LIST
28869: LIST
28870: PUSH
28871: LD_INT 0
28873: PUSH
28874: LD_INT 3
28876: PUSH
28877: EMPTY
28878: LIST
28879: LIST
28880: PUSH
28881: LD_INT 1
28883: NEG
28884: PUSH
28885: LD_INT 2
28887: PUSH
28888: EMPTY
28889: LIST
28890: LIST
28891: PUSH
28892: EMPTY
28893: LIST
28894: LIST
28895: LIST
28896: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
28897: LD_ADDR_VAR 0 57
28901: PUSH
28902: LD_INT 2
28904: NEG
28905: PUSH
28906: LD_INT 1
28908: PUSH
28909: EMPTY
28910: LIST
28911: LIST
28912: PUSH
28913: LD_INT 3
28915: NEG
28916: PUSH
28917: LD_INT 0
28919: PUSH
28920: EMPTY
28921: LIST
28922: LIST
28923: PUSH
28924: LD_INT 3
28926: NEG
28927: PUSH
28928: LD_INT 1
28930: NEG
28931: PUSH
28932: EMPTY
28933: LIST
28934: LIST
28935: PUSH
28936: EMPTY
28937: LIST
28938: LIST
28939: LIST
28940: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
28941: LD_ADDR_VAR 0 58
28945: PUSH
28946: LD_INT 2
28948: NEG
28949: PUSH
28950: LD_INT 3
28952: NEG
28953: PUSH
28954: EMPTY
28955: LIST
28956: LIST
28957: PUSH
28958: LD_INT 3
28960: NEG
28961: PUSH
28962: LD_INT 2
28964: NEG
28965: PUSH
28966: EMPTY
28967: LIST
28968: LIST
28969: PUSH
28970: LD_INT 3
28972: NEG
28973: PUSH
28974: LD_INT 3
28976: NEG
28977: PUSH
28978: EMPTY
28979: LIST
28980: LIST
28981: PUSH
28982: EMPTY
28983: LIST
28984: LIST
28985: LIST
28986: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
28987: LD_ADDR_VAR 0 59
28991: PUSH
28992: LD_INT 1
28994: NEG
28995: PUSH
28996: LD_INT 2
28998: NEG
28999: PUSH
29000: EMPTY
29001: LIST
29002: LIST
29003: PUSH
29004: LD_INT 0
29006: PUSH
29007: LD_INT 2
29009: NEG
29010: PUSH
29011: EMPTY
29012: LIST
29013: LIST
29014: PUSH
29015: LD_INT 1
29017: PUSH
29018: LD_INT 1
29020: NEG
29021: PUSH
29022: EMPTY
29023: LIST
29024: LIST
29025: PUSH
29026: EMPTY
29027: LIST
29028: LIST
29029: LIST
29030: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
29031: LD_ADDR_VAR 0 60
29035: PUSH
29036: LD_INT 1
29038: PUSH
29039: LD_INT 1
29041: NEG
29042: PUSH
29043: EMPTY
29044: LIST
29045: LIST
29046: PUSH
29047: LD_INT 2
29049: PUSH
29050: LD_INT 0
29052: PUSH
29053: EMPTY
29054: LIST
29055: LIST
29056: PUSH
29057: LD_INT 2
29059: PUSH
29060: LD_INT 1
29062: PUSH
29063: EMPTY
29064: LIST
29065: LIST
29066: PUSH
29067: EMPTY
29068: LIST
29069: LIST
29070: LIST
29071: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
29072: LD_ADDR_VAR 0 61
29076: PUSH
29077: LD_INT 2
29079: PUSH
29080: LD_INT 1
29082: PUSH
29083: EMPTY
29084: LIST
29085: LIST
29086: PUSH
29087: LD_INT 2
29089: PUSH
29090: LD_INT 2
29092: PUSH
29093: EMPTY
29094: LIST
29095: LIST
29096: PUSH
29097: LD_INT 1
29099: PUSH
29100: LD_INT 2
29102: PUSH
29103: EMPTY
29104: LIST
29105: LIST
29106: PUSH
29107: EMPTY
29108: LIST
29109: LIST
29110: LIST
29111: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
29112: LD_ADDR_VAR 0 62
29116: PUSH
29117: LD_INT 1
29119: PUSH
29120: LD_INT 2
29122: PUSH
29123: EMPTY
29124: LIST
29125: LIST
29126: PUSH
29127: LD_INT 0
29129: PUSH
29130: LD_INT 2
29132: PUSH
29133: EMPTY
29134: LIST
29135: LIST
29136: PUSH
29137: LD_INT 1
29139: NEG
29140: PUSH
29141: LD_INT 1
29143: PUSH
29144: EMPTY
29145: LIST
29146: LIST
29147: PUSH
29148: EMPTY
29149: LIST
29150: LIST
29151: LIST
29152: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
29153: LD_ADDR_VAR 0 63
29157: PUSH
29158: LD_INT 1
29160: NEG
29161: PUSH
29162: LD_INT 1
29164: PUSH
29165: EMPTY
29166: LIST
29167: LIST
29168: PUSH
29169: LD_INT 2
29171: NEG
29172: PUSH
29173: LD_INT 0
29175: PUSH
29176: EMPTY
29177: LIST
29178: LIST
29179: PUSH
29180: LD_INT 2
29182: NEG
29183: PUSH
29184: LD_INT 1
29186: NEG
29187: PUSH
29188: EMPTY
29189: LIST
29190: LIST
29191: PUSH
29192: EMPTY
29193: LIST
29194: LIST
29195: LIST
29196: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
29197: LD_ADDR_VAR 0 64
29201: PUSH
29202: LD_INT 1
29204: NEG
29205: PUSH
29206: LD_INT 2
29208: NEG
29209: PUSH
29210: EMPTY
29211: LIST
29212: LIST
29213: PUSH
29214: LD_INT 2
29216: NEG
29217: PUSH
29218: LD_INT 1
29220: NEG
29221: PUSH
29222: EMPTY
29223: LIST
29224: LIST
29225: PUSH
29226: LD_INT 2
29228: NEG
29229: PUSH
29230: LD_INT 2
29232: NEG
29233: PUSH
29234: EMPTY
29235: LIST
29236: LIST
29237: PUSH
29238: EMPTY
29239: LIST
29240: LIST
29241: LIST
29242: ST_TO_ADDR
// end ; 2 :
29243: GO 32509
29245: LD_INT 2
29247: DOUBLE
29248: EQUAL
29249: IFTRUE 29253
29251: GO 32508
29253: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
29254: LD_ADDR_VAR 0 29
29258: PUSH
29259: LD_INT 4
29261: PUSH
29262: LD_INT 0
29264: PUSH
29265: EMPTY
29266: LIST
29267: LIST
29268: PUSH
29269: LD_INT 4
29271: PUSH
29272: LD_INT 1
29274: NEG
29275: PUSH
29276: EMPTY
29277: LIST
29278: LIST
29279: PUSH
29280: LD_INT 5
29282: PUSH
29283: LD_INT 0
29285: PUSH
29286: EMPTY
29287: LIST
29288: LIST
29289: PUSH
29290: LD_INT 5
29292: PUSH
29293: LD_INT 1
29295: PUSH
29296: EMPTY
29297: LIST
29298: LIST
29299: PUSH
29300: LD_INT 4
29302: PUSH
29303: LD_INT 1
29305: PUSH
29306: EMPTY
29307: LIST
29308: LIST
29309: PUSH
29310: LD_INT 3
29312: PUSH
29313: LD_INT 0
29315: PUSH
29316: EMPTY
29317: LIST
29318: LIST
29319: PUSH
29320: LD_INT 3
29322: PUSH
29323: LD_INT 1
29325: NEG
29326: PUSH
29327: EMPTY
29328: LIST
29329: LIST
29330: PUSH
29331: LD_INT 3
29333: PUSH
29334: LD_INT 2
29336: NEG
29337: PUSH
29338: EMPTY
29339: LIST
29340: LIST
29341: PUSH
29342: LD_INT 5
29344: PUSH
29345: LD_INT 2
29347: PUSH
29348: EMPTY
29349: LIST
29350: LIST
29351: PUSH
29352: LD_INT 3
29354: PUSH
29355: LD_INT 3
29357: PUSH
29358: EMPTY
29359: LIST
29360: LIST
29361: PUSH
29362: LD_INT 3
29364: PUSH
29365: LD_INT 2
29367: PUSH
29368: EMPTY
29369: LIST
29370: LIST
29371: PUSH
29372: LD_INT 4
29374: PUSH
29375: LD_INT 3
29377: PUSH
29378: EMPTY
29379: LIST
29380: LIST
29381: PUSH
29382: LD_INT 4
29384: PUSH
29385: LD_INT 4
29387: PUSH
29388: EMPTY
29389: LIST
29390: LIST
29391: PUSH
29392: LD_INT 3
29394: PUSH
29395: LD_INT 4
29397: PUSH
29398: EMPTY
29399: LIST
29400: LIST
29401: PUSH
29402: LD_INT 2
29404: PUSH
29405: LD_INT 3
29407: PUSH
29408: EMPTY
29409: LIST
29410: LIST
29411: PUSH
29412: LD_INT 2
29414: PUSH
29415: LD_INT 2
29417: PUSH
29418: EMPTY
29419: LIST
29420: LIST
29421: PUSH
29422: LD_INT 4
29424: PUSH
29425: LD_INT 2
29427: PUSH
29428: EMPTY
29429: LIST
29430: LIST
29431: PUSH
29432: LD_INT 2
29434: PUSH
29435: LD_INT 4
29437: PUSH
29438: EMPTY
29439: LIST
29440: LIST
29441: PUSH
29442: LD_INT 0
29444: PUSH
29445: LD_INT 4
29447: PUSH
29448: EMPTY
29449: LIST
29450: LIST
29451: PUSH
29452: LD_INT 0
29454: PUSH
29455: LD_INT 3
29457: PUSH
29458: EMPTY
29459: LIST
29460: LIST
29461: PUSH
29462: LD_INT 1
29464: PUSH
29465: LD_INT 4
29467: PUSH
29468: EMPTY
29469: LIST
29470: LIST
29471: PUSH
29472: LD_INT 1
29474: PUSH
29475: LD_INT 5
29477: PUSH
29478: EMPTY
29479: LIST
29480: LIST
29481: PUSH
29482: LD_INT 0
29484: PUSH
29485: LD_INT 5
29487: PUSH
29488: EMPTY
29489: LIST
29490: LIST
29491: PUSH
29492: LD_INT 1
29494: NEG
29495: PUSH
29496: LD_INT 4
29498: PUSH
29499: EMPTY
29500: LIST
29501: LIST
29502: PUSH
29503: LD_INT 1
29505: NEG
29506: PUSH
29507: LD_INT 3
29509: PUSH
29510: EMPTY
29511: LIST
29512: LIST
29513: PUSH
29514: LD_INT 2
29516: PUSH
29517: LD_INT 5
29519: PUSH
29520: EMPTY
29521: LIST
29522: LIST
29523: PUSH
29524: LD_INT 2
29526: NEG
29527: PUSH
29528: LD_INT 3
29530: PUSH
29531: EMPTY
29532: LIST
29533: LIST
29534: PUSH
29535: LD_INT 3
29537: NEG
29538: PUSH
29539: LD_INT 0
29541: PUSH
29542: EMPTY
29543: LIST
29544: LIST
29545: PUSH
29546: LD_INT 3
29548: NEG
29549: PUSH
29550: LD_INT 1
29552: NEG
29553: PUSH
29554: EMPTY
29555: LIST
29556: LIST
29557: PUSH
29558: LD_INT 2
29560: NEG
29561: PUSH
29562: LD_INT 0
29564: PUSH
29565: EMPTY
29566: LIST
29567: LIST
29568: PUSH
29569: LD_INT 2
29571: NEG
29572: PUSH
29573: LD_INT 1
29575: PUSH
29576: EMPTY
29577: LIST
29578: LIST
29579: PUSH
29580: LD_INT 3
29582: NEG
29583: PUSH
29584: LD_INT 1
29586: PUSH
29587: EMPTY
29588: LIST
29589: LIST
29590: PUSH
29591: LD_INT 4
29593: NEG
29594: PUSH
29595: LD_INT 0
29597: PUSH
29598: EMPTY
29599: LIST
29600: LIST
29601: PUSH
29602: LD_INT 4
29604: NEG
29605: PUSH
29606: LD_INT 1
29608: NEG
29609: PUSH
29610: EMPTY
29611: LIST
29612: LIST
29613: PUSH
29614: LD_INT 4
29616: NEG
29617: PUSH
29618: LD_INT 2
29620: NEG
29621: PUSH
29622: EMPTY
29623: LIST
29624: LIST
29625: PUSH
29626: LD_INT 2
29628: NEG
29629: PUSH
29630: LD_INT 2
29632: PUSH
29633: EMPTY
29634: LIST
29635: LIST
29636: PUSH
29637: LD_INT 4
29639: NEG
29640: PUSH
29641: LD_INT 4
29643: NEG
29644: PUSH
29645: EMPTY
29646: LIST
29647: LIST
29648: PUSH
29649: LD_INT 4
29651: NEG
29652: PUSH
29653: LD_INT 5
29655: NEG
29656: PUSH
29657: EMPTY
29658: LIST
29659: LIST
29660: PUSH
29661: LD_INT 3
29663: NEG
29664: PUSH
29665: LD_INT 4
29667: NEG
29668: PUSH
29669: EMPTY
29670: LIST
29671: LIST
29672: PUSH
29673: LD_INT 3
29675: NEG
29676: PUSH
29677: LD_INT 3
29679: NEG
29680: PUSH
29681: EMPTY
29682: LIST
29683: LIST
29684: PUSH
29685: LD_INT 4
29687: NEG
29688: PUSH
29689: LD_INT 3
29691: NEG
29692: PUSH
29693: EMPTY
29694: LIST
29695: LIST
29696: PUSH
29697: LD_INT 5
29699: NEG
29700: PUSH
29701: LD_INT 4
29703: NEG
29704: PUSH
29705: EMPTY
29706: LIST
29707: LIST
29708: PUSH
29709: LD_INT 5
29711: NEG
29712: PUSH
29713: LD_INT 5
29715: NEG
29716: PUSH
29717: EMPTY
29718: LIST
29719: LIST
29720: PUSH
29721: LD_INT 3
29723: NEG
29724: PUSH
29725: LD_INT 5
29727: NEG
29728: PUSH
29729: EMPTY
29730: LIST
29731: LIST
29732: PUSH
29733: LD_INT 5
29735: NEG
29736: PUSH
29737: LD_INT 3
29739: NEG
29740: PUSH
29741: EMPTY
29742: LIST
29743: LIST
29744: PUSH
29745: EMPTY
29746: LIST
29747: LIST
29748: LIST
29749: LIST
29750: LIST
29751: LIST
29752: LIST
29753: LIST
29754: LIST
29755: LIST
29756: LIST
29757: LIST
29758: LIST
29759: LIST
29760: LIST
29761: LIST
29762: LIST
29763: LIST
29764: LIST
29765: LIST
29766: LIST
29767: LIST
29768: LIST
29769: LIST
29770: LIST
29771: LIST
29772: LIST
29773: LIST
29774: LIST
29775: LIST
29776: LIST
29777: LIST
29778: LIST
29779: LIST
29780: LIST
29781: LIST
29782: LIST
29783: LIST
29784: LIST
29785: LIST
29786: LIST
29787: LIST
29788: LIST
29789: LIST
29790: LIST
29791: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
29792: LD_ADDR_VAR 0 30
29796: PUSH
29797: LD_INT 4
29799: PUSH
29800: LD_INT 4
29802: PUSH
29803: EMPTY
29804: LIST
29805: LIST
29806: PUSH
29807: LD_INT 4
29809: PUSH
29810: LD_INT 3
29812: PUSH
29813: EMPTY
29814: LIST
29815: LIST
29816: PUSH
29817: LD_INT 5
29819: PUSH
29820: LD_INT 4
29822: PUSH
29823: EMPTY
29824: LIST
29825: LIST
29826: PUSH
29827: LD_INT 5
29829: PUSH
29830: LD_INT 5
29832: PUSH
29833: EMPTY
29834: LIST
29835: LIST
29836: PUSH
29837: LD_INT 4
29839: PUSH
29840: LD_INT 5
29842: PUSH
29843: EMPTY
29844: LIST
29845: LIST
29846: PUSH
29847: LD_INT 3
29849: PUSH
29850: LD_INT 4
29852: PUSH
29853: EMPTY
29854: LIST
29855: LIST
29856: PUSH
29857: LD_INT 3
29859: PUSH
29860: LD_INT 3
29862: PUSH
29863: EMPTY
29864: LIST
29865: LIST
29866: PUSH
29867: LD_INT 5
29869: PUSH
29870: LD_INT 3
29872: PUSH
29873: EMPTY
29874: LIST
29875: LIST
29876: PUSH
29877: LD_INT 3
29879: PUSH
29880: LD_INT 5
29882: PUSH
29883: EMPTY
29884: LIST
29885: LIST
29886: PUSH
29887: LD_INT 0
29889: PUSH
29890: LD_INT 3
29892: PUSH
29893: EMPTY
29894: LIST
29895: LIST
29896: PUSH
29897: LD_INT 0
29899: PUSH
29900: LD_INT 2
29902: PUSH
29903: EMPTY
29904: LIST
29905: LIST
29906: PUSH
29907: LD_INT 1
29909: PUSH
29910: LD_INT 3
29912: PUSH
29913: EMPTY
29914: LIST
29915: LIST
29916: PUSH
29917: LD_INT 1
29919: PUSH
29920: LD_INT 4
29922: PUSH
29923: EMPTY
29924: LIST
29925: LIST
29926: PUSH
29927: LD_INT 0
29929: PUSH
29930: LD_INT 4
29932: PUSH
29933: EMPTY
29934: LIST
29935: LIST
29936: PUSH
29937: LD_INT 1
29939: NEG
29940: PUSH
29941: LD_INT 3
29943: PUSH
29944: EMPTY
29945: LIST
29946: LIST
29947: PUSH
29948: LD_INT 1
29950: NEG
29951: PUSH
29952: LD_INT 2
29954: PUSH
29955: EMPTY
29956: LIST
29957: LIST
29958: PUSH
29959: LD_INT 2
29961: PUSH
29962: LD_INT 4
29964: PUSH
29965: EMPTY
29966: LIST
29967: LIST
29968: PUSH
29969: LD_INT 2
29971: NEG
29972: PUSH
29973: LD_INT 2
29975: PUSH
29976: EMPTY
29977: LIST
29978: LIST
29979: PUSH
29980: LD_INT 4
29982: NEG
29983: PUSH
29984: LD_INT 0
29986: PUSH
29987: EMPTY
29988: LIST
29989: LIST
29990: PUSH
29991: LD_INT 4
29993: NEG
29994: PUSH
29995: LD_INT 1
29997: NEG
29998: PUSH
29999: EMPTY
30000: LIST
30001: LIST
30002: PUSH
30003: LD_INT 3
30005: NEG
30006: PUSH
30007: LD_INT 0
30009: PUSH
30010: EMPTY
30011: LIST
30012: LIST
30013: PUSH
30014: LD_INT 3
30016: NEG
30017: PUSH
30018: LD_INT 1
30020: PUSH
30021: EMPTY
30022: LIST
30023: LIST
30024: PUSH
30025: LD_INT 4
30027: NEG
30028: PUSH
30029: LD_INT 1
30031: PUSH
30032: EMPTY
30033: LIST
30034: LIST
30035: PUSH
30036: LD_INT 5
30038: NEG
30039: PUSH
30040: LD_INT 0
30042: PUSH
30043: EMPTY
30044: LIST
30045: LIST
30046: PUSH
30047: LD_INT 5
30049: NEG
30050: PUSH
30051: LD_INT 1
30053: NEG
30054: PUSH
30055: EMPTY
30056: LIST
30057: LIST
30058: PUSH
30059: LD_INT 5
30061: NEG
30062: PUSH
30063: LD_INT 2
30065: NEG
30066: PUSH
30067: EMPTY
30068: LIST
30069: LIST
30070: PUSH
30071: LD_INT 3
30073: NEG
30074: PUSH
30075: LD_INT 2
30077: PUSH
30078: EMPTY
30079: LIST
30080: LIST
30081: PUSH
30082: LD_INT 3
30084: NEG
30085: PUSH
30086: LD_INT 3
30088: NEG
30089: PUSH
30090: EMPTY
30091: LIST
30092: LIST
30093: PUSH
30094: LD_INT 3
30096: NEG
30097: PUSH
30098: LD_INT 4
30100: NEG
30101: PUSH
30102: EMPTY
30103: LIST
30104: LIST
30105: PUSH
30106: LD_INT 2
30108: NEG
30109: PUSH
30110: LD_INT 3
30112: NEG
30113: PUSH
30114: EMPTY
30115: LIST
30116: LIST
30117: PUSH
30118: LD_INT 2
30120: NEG
30121: PUSH
30122: LD_INT 2
30124: NEG
30125: PUSH
30126: EMPTY
30127: LIST
30128: LIST
30129: PUSH
30130: LD_INT 3
30132: NEG
30133: PUSH
30134: LD_INT 2
30136: NEG
30137: PUSH
30138: EMPTY
30139: LIST
30140: LIST
30141: PUSH
30142: LD_INT 4
30144: NEG
30145: PUSH
30146: LD_INT 3
30148: NEG
30149: PUSH
30150: EMPTY
30151: LIST
30152: LIST
30153: PUSH
30154: LD_INT 4
30156: NEG
30157: PUSH
30158: LD_INT 4
30160: NEG
30161: PUSH
30162: EMPTY
30163: LIST
30164: LIST
30165: PUSH
30166: LD_INT 2
30168: NEG
30169: PUSH
30170: LD_INT 4
30172: NEG
30173: PUSH
30174: EMPTY
30175: LIST
30176: LIST
30177: PUSH
30178: LD_INT 4
30180: NEG
30181: PUSH
30182: LD_INT 2
30184: NEG
30185: PUSH
30186: EMPTY
30187: LIST
30188: LIST
30189: PUSH
30190: LD_INT 0
30192: PUSH
30193: LD_INT 4
30195: NEG
30196: PUSH
30197: EMPTY
30198: LIST
30199: LIST
30200: PUSH
30201: LD_INT 0
30203: PUSH
30204: LD_INT 5
30206: NEG
30207: PUSH
30208: EMPTY
30209: LIST
30210: LIST
30211: PUSH
30212: LD_INT 1
30214: PUSH
30215: LD_INT 4
30217: NEG
30218: PUSH
30219: EMPTY
30220: LIST
30221: LIST
30222: PUSH
30223: LD_INT 1
30225: PUSH
30226: LD_INT 3
30228: NEG
30229: PUSH
30230: EMPTY
30231: LIST
30232: LIST
30233: PUSH
30234: LD_INT 0
30236: PUSH
30237: LD_INT 3
30239: NEG
30240: PUSH
30241: EMPTY
30242: LIST
30243: LIST
30244: PUSH
30245: LD_INT 1
30247: NEG
30248: PUSH
30249: LD_INT 4
30251: NEG
30252: PUSH
30253: EMPTY
30254: LIST
30255: LIST
30256: PUSH
30257: LD_INT 1
30259: NEG
30260: PUSH
30261: LD_INT 5
30263: NEG
30264: PUSH
30265: EMPTY
30266: LIST
30267: LIST
30268: PUSH
30269: LD_INT 2
30271: PUSH
30272: LD_INT 3
30274: NEG
30275: PUSH
30276: EMPTY
30277: LIST
30278: LIST
30279: PUSH
30280: LD_INT 2
30282: NEG
30283: PUSH
30284: LD_INT 5
30286: NEG
30287: PUSH
30288: EMPTY
30289: LIST
30290: LIST
30291: PUSH
30292: EMPTY
30293: LIST
30294: LIST
30295: LIST
30296: LIST
30297: LIST
30298: LIST
30299: LIST
30300: LIST
30301: LIST
30302: LIST
30303: LIST
30304: LIST
30305: LIST
30306: LIST
30307: LIST
30308: LIST
30309: LIST
30310: LIST
30311: LIST
30312: LIST
30313: LIST
30314: LIST
30315: LIST
30316: LIST
30317: LIST
30318: LIST
30319: LIST
30320: LIST
30321: LIST
30322: LIST
30323: LIST
30324: LIST
30325: LIST
30326: LIST
30327: LIST
30328: LIST
30329: LIST
30330: LIST
30331: LIST
30332: LIST
30333: LIST
30334: LIST
30335: LIST
30336: LIST
30337: LIST
30338: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
30339: LD_ADDR_VAR 0 31
30343: PUSH
30344: LD_INT 0
30346: PUSH
30347: LD_INT 4
30349: PUSH
30350: EMPTY
30351: LIST
30352: LIST
30353: PUSH
30354: LD_INT 0
30356: PUSH
30357: LD_INT 3
30359: PUSH
30360: EMPTY
30361: LIST
30362: LIST
30363: PUSH
30364: LD_INT 1
30366: PUSH
30367: LD_INT 4
30369: PUSH
30370: EMPTY
30371: LIST
30372: LIST
30373: PUSH
30374: LD_INT 1
30376: PUSH
30377: LD_INT 5
30379: PUSH
30380: EMPTY
30381: LIST
30382: LIST
30383: PUSH
30384: LD_INT 0
30386: PUSH
30387: LD_INT 5
30389: PUSH
30390: EMPTY
30391: LIST
30392: LIST
30393: PUSH
30394: LD_INT 1
30396: NEG
30397: PUSH
30398: LD_INT 4
30400: PUSH
30401: EMPTY
30402: LIST
30403: LIST
30404: PUSH
30405: LD_INT 1
30407: NEG
30408: PUSH
30409: LD_INT 3
30411: PUSH
30412: EMPTY
30413: LIST
30414: LIST
30415: PUSH
30416: LD_INT 2
30418: PUSH
30419: LD_INT 5
30421: PUSH
30422: EMPTY
30423: LIST
30424: LIST
30425: PUSH
30426: LD_INT 2
30428: NEG
30429: PUSH
30430: LD_INT 3
30432: PUSH
30433: EMPTY
30434: LIST
30435: LIST
30436: PUSH
30437: LD_INT 3
30439: NEG
30440: PUSH
30441: LD_INT 0
30443: PUSH
30444: EMPTY
30445: LIST
30446: LIST
30447: PUSH
30448: LD_INT 3
30450: NEG
30451: PUSH
30452: LD_INT 1
30454: NEG
30455: PUSH
30456: EMPTY
30457: LIST
30458: LIST
30459: PUSH
30460: LD_INT 2
30462: NEG
30463: PUSH
30464: LD_INT 0
30466: PUSH
30467: EMPTY
30468: LIST
30469: LIST
30470: PUSH
30471: LD_INT 2
30473: NEG
30474: PUSH
30475: LD_INT 1
30477: PUSH
30478: EMPTY
30479: LIST
30480: LIST
30481: PUSH
30482: LD_INT 3
30484: NEG
30485: PUSH
30486: LD_INT 1
30488: PUSH
30489: EMPTY
30490: LIST
30491: LIST
30492: PUSH
30493: LD_INT 4
30495: NEG
30496: PUSH
30497: LD_INT 0
30499: PUSH
30500: EMPTY
30501: LIST
30502: LIST
30503: PUSH
30504: LD_INT 4
30506: NEG
30507: PUSH
30508: LD_INT 1
30510: NEG
30511: PUSH
30512: EMPTY
30513: LIST
30514: LIST
30515: PUSH
30516: LD_INT 4
30518: NEG
30519: PUSH
30520: LD_INT 2
30522: NEG
30523: PUSH
30524: EMPTY
30525: LIST
30526: LIST
30527: PUSH
30528: LD_INT 2
30530: NEG
30531: PUSH
30532: LD_INT 2
30534: PUSH
30535: EMPTY
30536: LIST
30537: LIST
30538: PUSH
30539: LD_INT 4
30541: NEG
30542: PUSH
30543: LD_INT 4
30545: NEG
30546: PUSH
30547: EMPTY
30548: LIST
30549: LIST
30550: PUSH
30551: LD_INT 4
30553: NEG
30554: PUSH
30555: LD_INT 5
30557: NEG
30558: PUSH
30559: EMPTY
30560: LIST
30561: LIST
30562: PUSH
30563: LD_INT 3
30565: NEG
30566: PUSH
30567: LD_INT 4
30569: NEG
30570: PUSH
30571: EMPTY
30572: LIST
30573: LIST
30574: PUSH
30575: LD_INT 3
30577: NEG
30578: PUSH
30579: LD_INT 3
30581: NEG
30582: PUSH
30583: EMPTY
30584: LIST
30585: LIST
30586: PUSH
30587: LD_INT 4
30589: NEG
30590: PUSH
30591: LD_INT 3
30593: NEG
30594: PUSH
30595: EMPTY
30596: LIST
30597: LIST
30598: PUSH
30599: LD_INT 5
30601: NEG
30602: PUSH
30603: LD_INT 4
30605: NEG
30606: PUSH
30607: EMPTY
30608: LIST
30609: LIST
30610: PUSH
30611: LD_INT 5
30613: NEG
30614: PUSH
30615: LD_INT 5
30617: NEG
30618: PUSH
30619: EMPTY
30620: LIST
30621: LIST
30622: PUSH
30623: LD_INT 3
30625: NEG
30626: PUSH
30627: LD_INT 5
30629: NEG
30630: PUSH
30631: EMPTY
30632: LIST
30633: LIST
30634: PUSH
30635: LD_INT 5
30637: NEG
30638: PUSH
30639: LD_INT 3
30641: NEG
30642: PUSH
30643: EMPTY
30644: LIST
30645: LIST
30646: PUSH
30647: LD_INT 0
30649: PUSH
30650: LD_INT 3
30652: NEG
30653: PUSH
30654: EMPTY
30655: LIST
30656: LIST
30657: PUSH
30658: LD_INT 0
30660: PUSH
30661: LD_INT 4
30663: NEG
30664: PUSH
30665: EMPTY
30666: LIST
30667: LIST
30668: PUSH
30669: LD_INT 1
30671: PUSH
30672: LD_INT 3
30674: NEG
30675: PUSH
30676: EMPTY
30677: LIST
30678: LIST
30679: PUSH
30680: LD_INT 1
30682: PUSH
30683: LD_INT 2
30685: NEG
30686: PUSH
30687: EMPTY
30688: LIST
30689: LIST
30690: PUSH
30691: LD_INT 0
30693: PUSH
30694: LD_INT 2
30696: NEG
30697: PUSH
30698: EMPTY
30699: LIST
30700: LIST
30701: PUSH
30702: LD_INT 1
30704: NEG
30705: PUSH
30706: LD_INT 3
30708: NEG
30709: PUSH
30710: EMPTY
30711: LIST
30712: LIST
30713: PUSH
30714: LD_INT 1
30716: NEG
30717: PUSH
30718: LD_INT 4
30720: NEG
30721: PUSH
30722: EMPTY
30723: LIST
30724: LIST
30725: PUSH
30726: LD_INT 2
30728: PUSH
30729: LD_INT 2
30731: NEG
30732: PUSH
30733: EMPTY
30734: LIST
30735: LIST
30736: PUSH
30737: LD_INT 2
30739: NEG
30740: PUSH
30741: LD_INT 4
30743: NEG
30744: PUSH
30745: EMPTY
30746: LIST
30747: LIST
30748: PUSH
30749: LD_INT 4
30751: PUSH
30752: LD_INT 0
30754: PUSH
30755: EMPTY
30756: LIST
30757: LIST
30758: PUSH
30759: LD_INT 4
30761: PUSH
30762: LD_INT 1
30764: NEG
30765: PUSH
30766: EMPTY
30767: LIST
30768: LIST
30769: PUSH
30770: LD_INT 5
30772: PUSH
30773: LD_INT 0
30775: PUSH
30776: EMPTY
30777: LIST
30778: LIST
30779: PUSH
30780: LD_INT 5
30782: PUSH
30783: LD_INT 1
30785: PUSH
30786: EMPTY
30787: LIST
30788: LIST
30789: PUSH
30790: LD_INT 4
30792: PUSH
30793: LD_INT 1
30795: PUSH
30796: EMPTY
30797: LIST
30798: LIST
30799: PUSH
30800: LD_INT 3
30802: PUSH
30803: LD_INT 0
30805: PUSH
30806: EMPTY
30807: LIST
30808: LIST
30809: PUSH
30810: LD_INT 3
30812: PUSH
30813: LD_INT 1
30815: NEG
30816: PUSH
30817: EMPTY
30818: LIST
30819: LIST
30820: PUSH
30821: LD_INT 3
30823: PUSH
30824: LD_INT 2
30826: NEG
30827: PUSH
30828: EMPTY
30829: LIST
30830: LIST
30831: PUSH
30832: LD_INT 5
30834: PUSH
30835: LD_INT 2
30837: PUSH
30838: EMPTY
30839: LIST
30840: LIST
30841: PUSH
30842: EMPTY
30843: LIST
30844: LIST
30845: LIST
30846: LIST
30847: LIST
30848: LIST
30849: LIST
30850: LIST
30851: LIST
30852: LIST
30853: LIST
30854: LIST
30855: LIST
30856: LIST
30857: LIST
30858: LIST
30859: LIST
30860: LIST
30861: LIST
30862: LIST
30863: LIST
30864: LIST
30865: LIST
30866: LIST
30867: LIST
30868: LIST
30869: LIST
30870: LIST
30871: LIST
30872: LIST
30873: LIST
30874: LIST
30875: LIST
30876: LIST
30877: LIST
30878: LIST
30879: LIST
30880: LIST
30881: LIST
30882: LIST
30883: LIST
30884: LIST
30885: LIST
30886: LIST
30887: LIST
30888: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
30889: LD_ADDR_VAR 0 32
30893: PUSH
30894: LD_INT 4
30896: NEG
30897: PUSH
30898: LD_INT 0
30900: PUSH
30901: EMPTY
30902: LIST
30903: LIST
30904: PUSH
30905: LD_INT 4
30907: NEG
30908: PUSH
30909: LD_INT 1
30911: NEG
30912: PUSH
30913: EMPTY
30914: LIST
30915: LIST
30916: PUSH
30917: LD_INT 3
30919: NEG
30920: PUSH
30921: LD_INT 0
30923: PUSH
30924: EMPTY
30925: LIST
30926: LIST
30927: PUSH
30928: LD_INT 3
30930: NEG
30931: PUSH
30932: LD_INT 1
30934: PUSH
30935: EMPTY
30936: LIST
30937: LIST
30938: PUSH
30939: LD_INT 4
30941: NEG
30942: PUSH
30943: LD_INT 1
30945: PUSH
30946: EMPTY
30947: LIST
30948: LIST
30949: PUSH
30950: LD_INT 5
30952: NEG
30953: PUSH
30954: LD_INT 0
30956: PUSH
30957: EMPTY
30958: LIST
30959: LIST
30960: PUSH
30961: LD_INT 5
30963: NEG
30964: PUSH
30965: LD_INT 1
30967: NEG
30968: PUSH
30969: EMPTY
30970: LIST
30971: LIST
30972: PUSH
30973: LD_INT 5
30975: NEG
30976: PUSH
30977: LD_INT 2
30979: NEG
30980: PUSH
30981: EMPTY
30982: LIST
30983: LIST
30984: PUSH
30985: LD_INT 3
30987: NEG
30988: PUSH
30989: LD_INT 2
30991: PUSH
30992: EMPTY
30993: LIST
30994: LIST
30995: PUSH
30996: LD_INT 3
30998: NEG
30999: PUSH
31000: LD_INT 3
31002: NEG
31003: PUSH
31004: EMPTY
31005: LIST
31006: LIST
31007: PUSH
31008: LD_INT 3
31010: NEG
31011: PUSH
31012: LD_INT 4
31014: NEG
31015: PUSH
31016: EMPTY
31017: LIST
31018: LIST
31019: PUSH
31020: LD_INT 2
31022: NEG
31023: PUSH
31024: LD_INT 3
31026: NEG
31027: PUSH
31028: EMPTY
31029: LIST
31030: LIST
31031: PUSH
31032: LD_INT 2
31034: NEG
31035: PUSH
31036: LD_INT 2
31038: NEG
31039: PUSH
31040: EMPTY
31041: LIST
31042: LIST
31043: PUSH
31044: LD_INT 3
31046: NEG
31047: PUSH
31048: LD_INT 2
31050: NEG
31051: PUSH
31052: EMPTY
31053: LIST
31054: LIST
31055: PUSH
31056: LD_INT 4
31058: NEG
31059: PUSH
31060: LD_INT 3
31062: NEG
31063: PUSH
31064: EMPTY
31065: LIST
31066: LIST
31067: PUSH
31068: LD_INT 4
31070: NEG
31071: PUSH
31072: LD_INT 4
31074: NEG
31075: PUSH
31076: EMPTY
31077: LIST
31078: LIST
31079: PUSH
31080: LD_INT 2
31082: NEG
31083: PUSH
31084: LD_INT 4
31086: NEG
31087: PUSH
31088: EMPTY
31089: LIST
31090: LIST
31091: PUSH
31092: LD_INT 4
31094: NEG
31095: PUSH
31096: LD_INT 2
31098: NEG
31099: PUSH
31100: EMPTY
31101: LIST
31102: LIST
31103: PUSH
31104: LD_INT 0
31106: PUSH
31107: LD_INT 4
31109: NEG
31110: PUSH
31111: EMPTY
31112: LIST
31113: LIST
31114: PUSH
31115: LD_INT 0
31117: PUSH
31118: LD_INT 5
31120: NEG
31121: PUSH
31122: EMPTY
31123: LIST
31124: LIST
31125: PUSH
31126: LD_INT 1
31128: PUSH
31129: LD_INT 4
31131: NEG
31132: PUSH
31133: EMPTY
31134: LIST
31135: LIST
31136: PUSH
31137: LD_INT 1
31139: PUSH
31140: LD_INT 3
31142: NEG
31143: PUSH
31144: EMPTY
31145: LIST
31146: LIST
31147: PUSH
31148: LD_INT 0
31150: PUSH
31151: LD_INT 3
31153: NEG
31154: PUSH
31155: EMPTY
31156: LIST
31157: LIST
31158: PUSH
31159: LD_INT 1
31161: NEG
31162: PUSH
31163: LD_INT 4
31165: NEG
31166: PUSH
31167: EMPTY
31168: LIST
31169: LIST
31170: PUSH
31171: LD_INT 1
31173: NEG
31174: PUSH
31175: LD_INT 5
31177: NEG
31178: PUSH
31179: EMPTY
31180: LIST
31181: LIST
31182: PUSH
31183: LD_INT 2
31185: PUSH
31186: LD_INT 3
31188: NEG
31189: PUSH
31190: EMPTY
31191: LIST
31192: LIST
31193: PUSH
31194: LD_INT 2
31196: NEG
31197: PUSH
31198: LD_INT 5
31200: NEG
31201: PUSH
31202: EMPTY
31203: LIST
31204: LIST
31205: PUSH
31206: LD_INT 3
31208: PUSH
31209: LD_INT 0
31211: PUSH
31212: EMPTY
31213: LIST
31214: LIST
31215: PUSH
31216: LD_INT 3
31218: PUSH
31219: LD_INT 1
31221: NEG
31222: PUSH
31223: EMPTY
31224: LIST
31225: LIST
31226: PUSH
31227: LD_INT 4
31229: PUSH
31230: LD_INT 0
31232: PUSH
31233: EMPTY
31234: LIST
31235: LIST
31236: PUSH
31237: LD_INT 4
31239: PUSH
31240: LD_INT 1
31242: PUSH
31243: EMPTY
31244: LIST
31245: LIST
31246: PUSH
31247: LD_INT 3
31249: PUSH
31250: LD_INT 1
31252: PUSH
31253: EMPTY
31254: LIST
31255: LIST
31256: PUSH
31257: LD_INT 2
31259: PUSH
31260: LD_INT 0
31262: PUSH
31263: EMPTY
31264: LIST
31265: LIST
31266: PUSH
31267: LD_INT 2
31269: PUSH
31270: LD_INT 1
31272: NEG
31273: PUSH
31274: EMPTY
31275: LIST
31276: LIST
31277: PUSH
31278: LD_INT 2
31280: PUSH
31281: LD_INT 2
31283: NEG
31284: PUSH
31285: EMPTY
31286: LIST
31287: LIST
31288: PUSH
31289: LD_INT 4
31291: PUSH
31292: LD_INT 2
31294: PUSH
31295: EMPTY
31296: LIST
31297: LIST
31298: PUSH
31299: LD_INT 4
31301: PUSH
31302: LD_INT 4
31304: PUSH
31305: EMPTY
31306: LIST
31307: LIST
31308: PUSH
31309: LD_INT 4
31311: PUSH
31312: LD_INT 3
31314: PUSH
31315: EMPTY
31316: LIST
31317: LIST
31318: PUSH
31319: LD_INT 5
31321: PUSH
31322: LD_INT 4
31324: PUSH
31325: EMPTY
31326: LIST
31327: LIST
31328: PUSH
31329: LD_INT 5
31331: PUSH
31332: LD_INT 5
31334: PUSH
31335: EMPTY
31336: LIST
31337: LIST
31338: PUSH
31339: LD_INT 4
31341: PUSH
31342: LD_INT 5
31344: PUSH
31345: EMPTY
31346: LIST
31347: LIST
31348: PUSH
31349: LD_INT 3
31351: PUSH
31352: LD_INT 4
31354: PUSH
31355: EMPTY
31356: LIST
31357: LIST
31358: PUSH
31359: LD_INT 3
31361: PUSH
31362: LD_INT 3
31364: PUSH
31365: EMPTY
31366: LIST
31367: LIST
31368: PUSH
31369: LD_INT 5
31371: PUSH
31372: LD_INT 3
31374: PUSH
31375: EMPTY
31376: LIST
31377: LIST
31378: PUSH
31379: LD_INT 3
31381: PUSH
31382: LD_INT 5
31384: PUSH
31385: EMPTY
31386: LIST
31387: LIST
31388: PUSH
31389: EMPTY
31390: LIST
31391: LIST
31392: LIST
31393: LIST
31394: LIST
31395: LIST
31396: LIST
31397: LIST
31398: LIST
31399: LIST
31400: LIST
31401: LIST
31402: LIST
31403: LIST
31404: LIST
31405: LIST
31406: LIST
31407: LIST
31408: LIST
31409: LIST
31410: LIST
31411: LIST
31412: LIST
31413: LIST
31414: LIST
31415: LIST
31416: LIST
31417: LIST
31418: LIST
31419: LIST
31420: LIST
31421: LIST
31422: LIST
31423: LIST
31424: LIST
31425: LIST
31426: LIST
31427: LIST
31428: LIST
31429: LIST
31430: LIST
31431: LIST
31432: LIST
31433: LIST
31434: LIST
31435: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
31436: LD_ADDR_VAR 0 33
31440: PUSH
31441: LD_INT 4
31443: NEG
31444: PUSH
31445: LD_INT 4
31447: NEG
31448: PUSH
31449: EMPTY
31450: LIST
31451: LIST
31452: PUSH
31453: LD_INT 4
31455: NEG
31456: PUSH
31457: LD_INT 5
31459: NEG
31460: PUSH
31461: EMPTY
31462: LIST
31463: LIST
31464: PUSH
31465: LD_INT 3
31467: NEG
31468: PUSH
31469: LD_INT 4
31471: NEG
31472: PUSH
31473: EMPTY
31474: LIST
31475: LIST
31476: PUSH
31477: LD_INT 3
31479: NEG
31480: PUSH
31481: LD_INT 3
31483: NEG
31484: PUSH
31485: EMPTY
31486: LIST
31487: LIST
31488: PUSH
31489: LD_INT 4
31491: NEG
31492: PUSH
31493: LD_INT 3
31495: NEG
31496: PUSH
31497: EMPTY
31498: LIST
31499: LIST
31500: PUSH
31501: LD_INT 5
31503: NEG
31504: PUSH
31505: LD_INT 4
31507: NEG
31508: PUSH
31509: EMPTY
31510: LIST
31511: LIST
31512: PUSH
31513: LD_INT 5
31515: NEG
31516: PUSH
31517: LD_INT 5
31519: NEG
31520: PUSH
31521: EMPTY
31522: LIST
31523: LIST
31524: PUSH
31525: LD_INT 3
31527: NEG
31528: PUSH
31529: LD_INT 5
31531: NEG
31532: PUSH
31533: EMPTY
31534: LIST
31535: LIST
31536: PUSH
31537: LD_INT 5
31539: NEG
31540: PUSH
31541: LD_INT 3
31543: NEG
31544: PUSH
31545: EMPTY
31546: LIST
31547: LIST
31548: PUSH
31549: LD_INT 0
31551: PUSH
31552: LD_INT 3
31554: NEG
31555: PUSH
31556: EMPTY
31557: LIST
31558: LIST
31559: PUSH
31560: LD_INT 0
31562: PUSH
31563: LD_INT 4
31565: NEG
31566: PUSH
31567: EMPTY
31568: LIST
31569: LIST
31570: PUSH
31571: LD_INT 1
31573: PUSH
31574: LD_INT 3
31576: NEG
31577: PUSH
31578: EMPTY
31579: LIST
31580: LIST
31581: PUSH
31582: LD_INT 1
31584: PUSH
31585: LD_INT 2
31587: NEG
31588: PUSH
31589: EMPTY
31590: LIST
31591: LIST
31592: PUSH
31593: LD_INT 0
31595: PUSH
31596: LD_INT 2
31598: NEG
31599: PUSH
31600: EMPTY
31601: LIST
31602: LIST
31603: PUSH
31604: LD_INT 1
31606: NEG
31607: PUSH
31608: LD_INT 3
31610: NEG
31611: PUSH
31612: EMPTY
31613: LIST
31614: LIST
31615: PUSH
31616: LD_INT 1
31618: NEG
31619: PUSH
31620: LD_INT 4
31622: NEG
31623: PUSH
31624: EMPTY
31625: LIST
31626: LIST
31627: PUSH
31628: LD_INT 2
31630: PUSH
31631: LD_INT 2
31633: NEG
31634: PUSH
31635: EMPTY
31636: LIST
31637: LIST
31638: PUSH
31639: LD_INT 2
31641: NEG
31642: PUSH
31643: LD_INT 4
31645: NEG
31646: PUSH
31647: EMPTY
31648: LIST
31649: LIST
31650: PUSH
31651: LD_INT 4
31653: PUSH
31654: LD_INT 0
31656: PUSH
31657: EMPTY
31658: LIST
31659: LIST
31660: PUSH
31661: LD_INT 4
31663: PUSH
31664: LD_INT 1
31666: NEG
31667: PUSH
31668: EMPTY
31669: LIST
31670: LIST
31671: PUSH
31672: LD_INT 5
31674: PUSH
31675: LD_INT 0
31677: PUSH
31678: EMPTY
31679: LIST
31680: LIST
31681: PUSH
31682: LD_INT 5
31684: PUSH
31685: LD_INT 1
31687: PUSH
31688: EMPTY
31689: LIST
31690: LIST
31691: PUSH
31692: LD_INT 4
31694: PUSH
31695: LD_INT 1
31697: PUSH
31698: EMPTY
31699: LIST
31700: LIST
31701: PUSH
31702: LD_INT 3
31704: PUSH
31705: LD_INT 0
31707: PUSH
31708: EMPTY
31709: LIST
31710: LIST
31711: PUSH
31712: LD_INT 3
31714: PUSH
31715: LD_INT 1
31717: NEG
31718: PUSH
31719: EMPTY
31720: LIST
31721: LIST
31722: PUSH
31723: LD_INT 3
31725: PUSH
31726: LD_INT 2
31728: NEG
31729: PUSH
31730: EMPTY
31731: LIST
31732: LIST
31733: PUSH
31734: LD_INT 5
31736: PUSH
31737: LD_INT 2
31739: PUSH
31740: EMPTY
31741: LIST
31742: LIST
31743: PUSH
31744: LD_INT 3
31746: PUSH
31747: LD_INT 3
31749: PUSH
31750: EMPTY
31751: LIST
31752: LIST
31753: PUSH
31754: LD_INT 3
31756: PUSH
31757: LD_INT 2
31759: PUSH
31760: EMPTY
31761: LIST
31762: LIST
31763: PUSH
31764: LD_INT 4
31766: PUSH
31767: LD_INT 3
31769: PUSH
31770: EMPTY
31771: LIST
31772: LIST
31773: PUSH
31774: LD_INT 4
31776: PUSH
31777: LD_INT 4
31779: PUSH
31780: EMPTY
31781: LIST
31782: LIST
31783: PUSH
31784: LD_INT 3
31786: PUSH
31787: LD_INT 4
31789: PUSH
31790: EMPTY
31791: LIST
31792: LIST
31793: PUSH
31794: LD_INT 2
31796: PUSH
31797: LD_INT 3
31799: PUSH
31800: EMPTY
31801: LIST
31802: LIST
31803: PUSH
31804: LD_INT 2
31806: PUSH
31807: LD_INT 2
31809: PUSH
31810: EMPTY
31811: LIST
31812: LIST
31813: PUSH
31814: LD_INT 4
31816: PUSH
31817: LD_INT 2
31819: PUSH
31820: EMPTY
31821: LIST
31822: LIST
31823: PUSH
31824: LD_INT 2
31826: PUSH
31827: LD_INT 4
31829: PUSH
31830: EMPTY
31831: LIST
31832: LIST
31833: PUSH
31834: LD_INT 0
31836: PUSH
31837: LD_INT 4
31839: PUSH
31840: EMPTY
31841: LIST
31842: LIST
31843: PUSH
31844: LD_INT 0
31846: PUSH
31847: LD_INT 3
31849: PUSH
31850: EMPTY
31851: LIST
31852: LIST
31853: PUSH
31854: LD_INT 1
31856: PUSH
31857: LD_INT 4
31859: PUSH
31860: EMPTY
31861: LIST
31862: LIST
31863: PUSH
31864: LD_INT 1
31866: PUSH
31867: LD_INT 5
31869: PUSH
31870: EMPTY
31871: LIST
31872: LIST
31873: PUSH
31874: LD_INT 0
31876: PUSH
31877: LD_INT 5
31879: PUSH
31880: EMPTY
31881: LIST
31882: LIST
31883: PUSH
31884: LD_INT 1
31886: NEG
31887: PUSH
31888: LD_INT 4
31890: PUSH
31891: EMPTY
31892: LIST
31893: LIST
31894: PUSH
31895: LD_INT 1
31897: NEG
31898: PUSH
31899: LD_INT 3
31901: PUSH
31902: EMPTY
31903: LIST
31904: LIST
31905: PUSH
31906: LD_INT 2
31908: PUSH
31909: LD_INT 5
31911: PUSH
31912: EMPTY
31913: LIST
31914: LIST
31915: PUSH
31916: LD_INT 2
31918: NEG
31919: PUSH
31920: LD_INT 3
31922: PUSH
31923: EMPTY
31924: LIST
31925: LIST
31926: PUSH
31927: EMPTY
31928: LIST
31929: LIST
31930: LIST
31931: LIST
31932: LIST
31933: LIST
31934: LIST
31935: LIST
31936: LIST
31937: LIST
31938: LIST
31939: LIST
31940: LIST
31941: LIST
31942: LIST
31943: LIST
31944: LIST
31945: LIST
31946: LIST
31947: LIST
31948: LIST
31949: LIST
31950: LIST
31951: LIST
31952: LIST
31953: LIST
31954: LIST
31955: LIST
31956: LIST
31957: LIST
31958: LIST
31959: LIST
31960: LIST
31961: LIST
31962: LIST
31963: LIST
31964: LIST
31965: LIST
31966: LIST
31967: LIST
31968: LIST
31969: LIST
31970: LIST
31971: LIST
31972: LIST
31973: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
31974: LD_ADDR_VAR 0 34
31978: PUSH
31979: LD_INT 0
31981: PUSH
31982: LD_INT 4
31984: NEG
31985: PUSH
31986: EMPTY
31987: LIST
31988: LIST
31989: PUSH
31990: LD_INT 0
31992: PUSH
31993: LD_INT 5
31995: NEG
31996: PUSH
31997: EMPTY
31998: LIST
31999: LIST
32000: PUSH
32001: LD_INT 1
32003: PUSH
32004: LD_INT 4
32006: NEG
32007: PUSH
32008: EMPTY
32009: LIST
32010: LIST
32011: PUSH
32012: LD_INT 1
32014: PUSH
32015: LD_INT 3
32017: NEG
32018: PUSH
32019: EMPTY
32020: LIST
32021: LIST
32022: PUSH
32023: LD_INT 0
32025: PUSH
32026: LD_INT 3
32028: NEG
32029: PUSH
32030: EMPTY
32031: LIST
32032: LIST
32033: PUSH
32034: LD_INT 1
32036: NEG
32037: PUSH
32038: LD_INT 4
32040: NEG
32041: PUSH
32042: EMPTY
32043: LIST
32044: LIST
32045: PUSH
32046: LD_INT 1
32048: NEG
32049: PUSH
32050: LD_INT 5
32052: NEG
32053: PUSH
32054: EMPTY
32055: LIST
32056: LIST
32057: PUSH
32058: LD_INT 2
32060: PUSH
32061: LD_INT 3
32063: NEG
32064: PUSH
32065: EMPTY
32066: LIST
32067: LIST
32068: PUSH
32069: LD_INT 2
32071: NEG
32072: PUSH
32073: LD_INT 5
32075: NEG
32076: PUSH
32077: EMPTY
32078: LIST
32079: LIST
32080: PUSH
32081: LD_INT 3
32083: PUSH
32084: LD_INT 0
32086: PUSH
32087: EMPTY
32088: LIST
32089: LIST
32090: PUSH
32091: LD_INT 3
32093: PUSH
32094: LD_INT 1
32096: NEG
32097: PUSH
32098: EMPTY
32099: LIST
32100: LIST
32101: PUSH
32102: LD_INT 4
32104: PUSH
32105: LD_INT 0
32107: PUSH
32108: EMPTY
32109: LIST
32110: LIST
32111: PUSH
32112: LD_INT 4
32114: PUSH
32115: LD_INT 1
32117: PUSH
32118: EMPTY
32119: LIST
32120: LIST
32121: PUSH
32122: LD_INT 3
32124: PUSH
32125: LD_INT 1
32127: PUSH
32128: EMPTY
32129: LIST
32130: LIST
32131: PUSH
32132: LD_INT 2
32134: PUSH
32135: LD_INT 0
32137: PUSH
32138: EMPTY
32139: LIST
32140: LIST
32141: PUSH
32142: LD_INT 2
32144: PUSH
32145: LD_INT 1
32147: NEG
32148: PUSH
32149: EMPTY
32150: LIST
32151: LIST
32152: PUSH
32153: LD_INT 2
32155: PUSH
32156: LD_INT 2
32158: NEG
32159: PUSH
32160: EMPTY
32161: LIST
32162: LIST
32163: PUSH
32164: LD_INT 4
32166: PUSH
32167: LD_INT 2
32169: PUSH
32170: EMPTY
32171: LIST
32172: LIST
32173: PUSH
32174: LD_INT 4
32176: PUSH
32177: LD_INT 4
32179: PUSH
32180: EMPTY
32181: LIST
32182: LIST
32183: PUSH
32184: LD_INT 4
32186: PUSH
32187: LD_INT 3
32189: PUSH
32190: EMPTY
32191: LIST
32192: LIST
32193: PUSH
32194: LD_INT 5
32196: PUSH
32197: LD_INT 4
32199: PUSH
32200: EMPTY
32201: LIST
32202: LIST
32203: PUSH
32204: LD_INT 5
32206: PUSH
32207: LD_INT 5
32209: PUSH
32210: EMPTY
32211: LIST
32212: LIST
32213: PUSH
32214: LD_INT 4
32216: PUSH
32217: LD_INT 5
32219: PUSH
32220: EMPTY
32221: LIST
32222: LIST
32223: PUSH
32224: LD_INT 3
32226: PUSH
32227: LD_INT 4
32229: PUSH
32230: EMPTY
32231: LIST
32232: LIST
32233: PUSH
32234: LD_INT 3
32236: PUSH
32237: LD_INT 3
32239: PUSH
32240: EMPTY
32241: LIST
32242: LIST
32243: PUSH
32244: LD_INT 5
32246: PUSH
32247: LD_INT 3
32249: PUSH
32250: EMPTY
32251: LIST
32252: LIST
32253: PUSH
32254: LD_INT 3
32256: PUSH
32257: LD_INT 5
32259: PUSH
32260: EMPTY
32261: LIST
32262: LIST
32263: PUSH
32264: LD_INT 0
32266: PUSH
32267: LD_INT 3
32269: PUSH
32270: EMPTY
32271: LIST
32272: LIST
32273: PUSH
32274: LD_INT 0
32276: PUSH
32277: LD_INT 2
32279: PUSH
32280: EMPTY
32281: LIST
32282: LIST
32283: PUSH
32284: LD_INT 1
32286: PUSH
32287: LD_INT 3
32289: PUSH
32290: EMPTY
32291: LIST
32292: LIST
32293: PUSH
32294: LD_INT 1
32296: PUSH
32297: LD_INT 4
32299: PUSH
32300: EMPTY
32301: LIST
32302: LIST
32303: PUSH
32304: LD_INT 0
32306: PUSH
32307: LD_INT 4
32309: PUSH
32310: EMPTY
32311: LIST
32312: LIST
32313: PUSH
32314: LD_INT 1
32316: NEG
32317: PUSH
32318: LD_INT 3
32320: PUSH
32321: EMPTY
32322: LIST
32323: LIST
32324: PUSH
32325: LD_INT 1
32327: NEG
32328: PUSH
32329: LD_INT 2
32331: PUSH
32332: EMPTY
32333: LIST
32334: LIST
32335: PUSH
32336: LD_INT 2
32338: PUSH
32339: LD_INT 4
32341: PUSH
32342: EMPTY
32343: LIST
32344: LIST
32345: PUSH
32346: LD_INT 2
32348: NEG
32349: PUSH
32350: LD_INT 2
32352: PUSH
32353: EMPTY
32354: LIST
32355: LIST
32356: PUSH
32357: LD_INT 4
32359: NEG
32360: PUSH
32361: LD_INT 0
32363: PUSH
32364: EMPTY
32365: LIST
32366: LIST
32367: PUSH
32368: LD_INT 4
32370: NEG
32371: PUSH
32372: LD_INT 1
32374: NEG
32375: PUSH
32376: EMPTY
32377: LIST
32378: LIST
32379: PUSH
32380: LD_INT 3
32382: NEG
32383: PUSH
32384: LD_INT 0
32386: PUSH
32387: EMPTY
32388: LIST
32389: LIST
32390: PUSH
32391: LD_INT 3
32393: NEG
32394: PUSH
32395: LD_INT 1
32397: PUSH
32398: EMPTY
32399: LIST
32400: LIST
32401: PUSH
32402: LD_INT 4
32404: NEG
32405: PUSH
32406: LD_INT 1
32408: PUSH
32409: EMPTY
32410: LIST
32411: LIST
32412: PUSH
32413: LD_INT 5
32415: NEG
32416: PUSH
32417: LD_INT 0
32419: PUSH
32420: EMPTY
32421: LIST
32422: LIST
32423: PUSH
32424: LD_INT 5
32426: NEG
32427: PUSH
32428: LD_INT 1
32430: NEG
32431: PUSH
32432: EMPTY
32433: LIST
32434: LIST
32435: PUSH
32436: LD_INT 5
32438: NEG
32439: PUSH
32440: LD_INT 2
32442: NEG
32443: PUSH
32444: EMPTY
32445: LIST
32446: LIST
32447: PUSH
32448: LD_INT 3
32450: NEG
32451: PUSH
32452: LD_INT 2
32454: PUSH
32455: EMPTY
32456: LIST
32457: LIST
32458: PUSH
32459: EMPTY
32460: LIST
32461: LIST
32462: LIST
32463: LIST
32464: LIST
32465: LIST
32466: LIST
32467: LIST
32468: LIST
32469: LIST
32470: LIST
32471: LIST
32472: LIST
32473: LIST
32474: LIST
32475: LIST
32476: LIST
32477: LIST
32478: LIST
32479: LIST
32480: LIST
32481: LIST
32482: LIST
32483: LIST
32484: LIST
32485: LIST
32486: LIST
32487: LIST
32488: LIST
32489: LIST
32490: LIST
32491: LIST
32492: LIST
32493: LIST
32494: LIST
32495: LIST
32496: LIST
32497: LIST
32498: LIST
32499: LIST
32500: LIST
32501: LIST
32502: LIST
32503: LIST
32504: LIST
32505: ST_TO_ADDR
// end ; end ;
32506: GO 32509
32508: POP
// case btype of b_depot , b_warehouse :
32509: LD_VAR 0 1
32513: PUSH
32514: LD_INT 0
32516: DOUBLE
32517: EQUAL
32518: IFTRUE 32528
32520: LD_INT 1
32522: DOUBLE
32523: EQUAL
32524: IFTRUE 32528
32526: GO 32729
32528: POP
// case nation of nation_american :
32529: LD_VAR 0 5
32533: PUSH
32534: LD_INT 1
32536: DOUBLE
32537: EQUAL
32538: IFTRUE 32542
32540: GO 32598
32542: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
32543: LD_ADDR_VAR 0 9
32547: PUSH
32548: LD_VAR 0 11
32552: PUSH
32553: LD_VAR 0 12
32557: PUSH
32558: LD_VAR 0 13
32562: PUSH
32563: LD_VAR 0 14
32567: PUSH
32568: LD_VAR 0 15
32572: PUSH
32573: LD_VAR 0 16
32577: PUSH
32578: EMPTY
32579: LIST
32580: LIST
32581: LIST
32582: LIST
32583: LIST
32584: LIST
32585: PUSH
32586: LD_VAR 0 4
32590: PUSH
32591: LD_INT 1
32593: PLUS
32594: ARRAY
32595: ST_TO_ADDR
32596: GO 32727
32598: LD_INT 2
32600: DOUBLE
32601: EQUAL
32602: IFTRUE 32606
32604: GO 32662
32606: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
32607: LD_ADDR_VAR 0 9
32611: PUSH
32612: LD_VAR 0 17
32616: PUSH
32617: LD_VAR 0 18
32621: PUSH
32622: LD_VAR 0 19
32626: PUSH
32627: LD_VAR 0 20
32631: PUSH
32632: LD_VAR 0 21
32636: PUSH
32637: LD_VAR 0 22
32641: PUSH
32642: EMPTY
32643: LIST
32644: LIST
32645: LIST
32646: LIST
32647: LIST
32648: LIST
32649: PUSH
32650: LD_VAR 0 4
32654: PUSH
32655: LD_INT 1
32657: PLUS
32658: ARRAY
32659: ST_TO_ADDR
32660: GO 32727
32662: LD_INT 3
32664: DOUBLE
32665: EQUAL
32666: IFTRUE 32670
32668: GO 32726
32670: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
32671: LD_ADDR_VAR 0 9
32675: PUSH
32676: LD_VAR 0 23
32680: PUSH
32681: LD_VAR 0 24
32685: PUSH
32686: LD_VAR 0 25
32690: PUSH
32691: LD_VAR 0 26
32695: PUSH
32696: LD_VAR 0 27
32700: PUSH
32701: LD_VAR 0 28
32705: PUSH
32706: EMPTY
32707: LIST
32708: LIST
32709: LIST
32710: LIST
32711: LIST
32712: LIST
32713: PUSH
32714: LD_VAR 0 4
32718: PUSH
32719: LD_INT 1
32721: PLUS
32722: ARRAY
32723: ST_TO_ADDR
32724: GO 32727
32726: POP
32727: GO 33282
32729: LD_INT 2
32731: DOUBLE
32732: EQUAL
32733: IFTRUE 32743
32735: LD_INT 3
32737: DOUBLE
32738: EQUAL
32739: IFTRUE 32743
32741: GO 32799
32743: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
32744: LD_ADDR_VAR 0 9
32748: PUSH
32749: LD_VAR 0 29
32753: PUSH
32754: LD_VAR 0 30
32758: PUSH
32759: LD_VAR 0 31
32763: PUSH
32764: LD_VAR 0 32
32768: PUSH
32769: LD_VAR 0 33
32773: PUSH
32774: LD_VAR 0 34
32778: PUSH
32779: EMPTY
32780: LIST
32781: LIST
32782: LIST
32783: LIST
32784: LIST
32785: LIST
32786: PUSH
32787: LD_VAR 0 4
32791: PUSH
32792: LD_INT 1
32794: PLUS
32795: ARRAY
32796: ST_TO_ADDR
32797: GO 33282
32799: LD_INT 16
32801: DOUBLE
32802: EQUAL
32803: IFTRUE 32861
32805: LD_INT 17
32807: DOUBLE
32808: EQUAL
32809: IFTRUE 32861
32811: LD_INT 18
32813: DOUBLE
32814: EQUAL
32815: IFTRUE 32861
32817: LD_INT 19
32819: DOUBLE
32820: EQUAL
32821: IFTRUE 32861
32823: LD_INT 22
32825: DOUBLE
32826: EQUAL
32827: IFTRUE 32861
32829: LD_INT 20
32831: DOUBLE
32832: EQUAL
32833: IFTRUE 32861
32835: LD_INT 21
32837: DOUBLE
32838: EQUAL
32839: IFTRUE 32861
32841: LD_INT 23
32843: DOUBLE
32844: EQUAL
32845: IFTRUE 32861
32847: LD_INT 24
32849: DOUBLE
32850: EQUAL
32851: IFTRUE 32861
32853: LD_INT 25
32855: DOUBLE
32856: EQUAL
32857: IFTRUE 32861
32859: GO 32917
32861: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
32862: LD_ADDR_VAR 0 9
32866: PUSH
32867: LD_VAR 0 35
32871: PUSH
32872: LD_VAR 0 36
32876: PUSH
32877: LD_VAR 0 37
32881: PUSH
32882: LD_VAR 0 38
32886: PUSH
32887: LD_VAR 0 39
32891: PUSH
32892: LD_VAR 0 40
32896: PUSH
32897: EMPTY
32898: LIST
32899: LIST
32900: LIST
32901: LIST
32902: LIST
32903: LIST
32904: PUSH
32905: LD_VAR 0 4
32909: PUSH
32910: LD_INT 1
32912: PLUS
32913: ARRAY
32914: ST_TO_ADDR
32915: GO 33282
32917: LD_INT 6
32919: DOUBLE
32920: EQUAL
32921: IFTRUE 32973
32923: LD_INT 7
32925: DOUBLE
32926: EQUAL
32927: IFTRUE 32973
32929: LD_INT 8
32931: DOUBLE
32932: EQUAL
32933: IFTRUE 32973
32935: LD_INT 13
32937: DOUBLE
32938: EQUAL
32939: IFTRUE 32973
32941: LD_INT 12
32943: DOUBLE
32944: EQUAL
32945: IFTRUE 32973
32947: LD_INT 15
32949: DOUBLE
32950: EQUAL
32951: IFTRUE 32973
32953: LD_INT 11
32955: DOUBLE
32956: EQUAL
32957: IFTRUE 32973
32959: LD_INT 14
32961: DOUBLE
32962: EQUAL
32963: IFTRUE 32973
32965: LD_INT 10
32967: DOUBLE
32968: EQUAL
32969: IFTRUE 32973
32971: GO 33029
32973: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
32974: LD_ADDR_VAR 0 9
32978: PUSH
32979: LD_VAR 0 41
32983: PUSH
32984: LD_VAR 0 42
32988: PUSH
32989: LD_VAR 0 43
32993: PUSH
32994: LD_VAR 0 44
32998: PUSH
32999: LD_VAR 0 45
33003: PUSH
33004: LD_VAR 0 46
33008: PUSH
33009: EMPTY
33010: LIST
33011: LIST
33012: LIST
33013: LIST
33014: LIST
33015: LIST
33016: PUSH
33017: LD_VAR 0 4
33021: PUSH
33022: LD_INT 1
33024: PLUS
33025: ARRAY
33026: ST_TO_ADDR
33027: GO 33282
33029: LD_INT 36
33031: DOUBLE
33032: EQUAL
33033: IFTRUE 33037
33035: GO 33093
33037: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
33038: LD_ADDR_VAR 0 9
33042: PUSH
33043: LD_VAR 0 47
33047: PUSH
33048: LD_VAR 0 48
33052: PUSH
33053: LD_VAR 0 49
33057: PUSH
33058: LD_VAR 0 50
33062: PUSH
33063: LD_VAR 0 51
33067: PUSH
33068: LD_VAR 0 52
33072: PUSH
33073: EMPTY
33074: LIST
33075: LIST
33076: LIST
33077: LIST
33078: LIST
33079: LIST
33080: PUSH
33081: LD_VAR 0 4
33085: PUSH
33086: LD_INT 1
33088: PLUS
33089: ARRAY
33090: ST_TO_ADDR
33091: GO 33282
33093: LD_INT 4
33095: DOUBLE
33096: EQUAL
33097: IFTRUE 33119
33099: LD_INT 5
33101: DOUBLE
33102: EQUAL
33103: IFTRUE 33119
33105: LD_INT 34
33107: DOUBLE
33108: EQUAL
33109: IFTRUE 33119
33111: LD_INT 37
33113: DOUBLE
33114: EQUAL
33115: IFTRUE 33119
33117: GO 33175
33119: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
33120: LD_ADDR_VAR 0 9
33124: PUSH
33125: LD_VAR 0 53
33129: PUSH
33130: LD_VAR 0 54
33134: PUSH
33135: LD_VAR 0 55
33139: PUSH
33140: LD_VAR 0 56
33144: PUSH
33145: LD_VAR 0 57
33149: PUSH
33150: LD_VAR 0 58
33154: PUSH
33155: EMPTY
33156: LIST
33157: LIST
33158: LIST
33159: LIST
33160: LIST
33161: LIST
33162: PUSH
33163: LD_VAR 0 4
33167: PUSH
33168: LD_INT 1
33170: PLUS
33171: ARRAY
33172: ST_TO_ADDR
33173: GO 33282
33175: LD_INT 31
33177: DOUBLE
33178: EQUAL
33179: IFTRUE 33225
33181: LD_INT 32
33183: DOUBLE
33184: EQUAL
33185: IFTRUE 33225
33187: LD_INT 33
33189: DOUBLE
33190: EQUAL
33191: IFTRUE 33225
33193: LD_INT 27
33195: DOUBLE
33196: EQUAL
33197: IFTRUE 33225
33199: LD_INT 26
33201: DOUBLE
33202: EQUAL
33203: IFTRUE 33225
33205: LD_INT 28
33207: DOUBLE
33208: EQUAL
33209: IFTRUE 33225
33211: LD_INT 29
33213: DOUBLE
33214: EQUAL
33215: IFTRUE 33225
33217: LD_INT 30
33219: DOUBLE
33220: EQUAL
33221: IFTRUE 33225
33223: GO 33281
33225: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
33226: LD_ADDR_VAR 0 9
33230: PUSH
33231: LD_VAR 0 59
33235: PUSH
33236: LD_VAR 0 60
33240: PUSH
33241: LD_VAR 0 61
33245: PUSH
33246: LD_VAR 0 62
33250: PUSH
33251: LD_VAR 0 63
33255: PUSH
33256: LD_VAR 0 64
33260: PUSH
33261: EMPTY
33262: LIST
33263: LIST
33264: LIST
33265: LIST
33266: LIST
33267: LIST
33268: PUSH
33269: LD_VAR 0 4
33273: PUSH
33274: LD_INT 1
33276: PLUS
33277: ARRAY
33278: ST_TO_ADDR
33279: GO 33282
33281: POP
// temp_list2 = [ ] ;
33282: LD_ADDR_VAR 0 10
33286: PUSH
33287: EMPTY
33288: ST_TO_ADDR
// for i in temp_list do
33289: LD_ADDR_VAR 0 8
33293: PUSH
33294: LD_VAR 0 9
33298: PUSH
33299: FOR_IN
33300: IFFALSE 33352
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
33302: LD_ADDR_VAR 0 10
33306: PUSH
33307: LD_VAR 0 10
33311: PUSH
33312: LD_VAR 0 8
33316: PUSH
33317: LD_INT 1
33319: ARRAY
33320: PUSH
33321: LD_VAR 0 2
33325: PLUS
33326: PUSH
33327: LD_VAR 0 8
33331: PUSH
33332: LD_INT 2
33334: ARRAY
33335: PUSH
33336: LD_VAR 0 3
33340: PLUS
33341: PUSH
33342: EMPTY
33343: LIST
33344: LIST
33345: PUSH
33346: EMPTY
33347: LIST
33348: ADD
33349: ST_TO_ADDR
33350: GO 33299
33352: POP
33353: POP
// result = temp_list2 ;
33354: LD_ADDR_VAR 0 7
33358: PUSH
33359: LD_VAR 0 10
33363: ST_TO_ADDR
// end ;
33364: LD_VAR 0 7
33368: RET
// export function EnemyInRange ( unit , dist ) ; begin
33369: LD_INT 0
33371: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
33372: LD_ADDR_VAR 0 3
33376: PUSH
33377: LD_VAR 0 1
33381: PPUSH
33382: CALL_OW 255
33386: PPUSH
33387: LD_VAR 0 1
33391: PPUSH
33392: CALL_OW 250
33396: PPUSH
33397: LD_VAR 0 1
33401: PPUSH
33402: CALL_OW 251
33406: PPUSH
33407: LD_VAR 0 2
33411: PPUSH
33412: CALL 6742 0 4
33416: PUSH
33417: LD_INT 4
33419: ARRAY
33420: ST_TO_ADDR
// end ;
33421: LD_VAR 0 3
33425: RET
// export function PlayerSeeMe ( unit ) ; begin
33426: LD_INT 0
33428: PPUSH
// result := See ( your_side , unit ) ;
33429: LD_ADDR_VAR 0 2
33433: PUSH
33434: LD_OWVAR 2
33438: PPUSH
33439: LD_VAR 0 1
33443: PPUSH
33444: CALL_OW 292
33448: ST_TO_ADDR
// end ;
33449: LD_VAR 0 2
33453: RET
// export function ReverseDir ( unit ) ; begin
33454: LD_INT 0
33456: PPUSH
// if not unit then
33457: LD_VAR 0 1
33461: NOT
33462: IFFALSE 33466
// exit ;
33464: GO 33489
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
33466: LD_ADDR_VAR 0 2
33470: PUSH
33471: LD_VAR 0 1
33475: PPUSH
33476: CALL_OW 254
33480: PUSH
33481: LD_INT 3
33483: PLUS
33484: PUSH
33485: LD_INT 6
33487: MOD
33488: ST_TO_ADDR
// end ;
33489: LD_VAR 0 2
33493: RET
// export function ReverseArray ( array ) ; var i ; begin
33494: LD_INT 0
33496: PPUSH
33497: PPUSH
// if not array then
33498: LD_VAR 0 1
33502: NOT
33503: IFFALSE 33507
// exit ;
33505: GO 33562
// result := [ ] ;
33507: LD_ADDR_VAR 0 2
33511: PUSH
33512: EMPTY
33513: ST_TO_ADDR
// for i := array downto 1 do
33514: LD_ADDR_VAR 0 3
33518: PUSH
33519: DOUBLE
33520: LD_VAR 0 1
33524: INC
33525: ST_TO_ADDR
33526: LD_INT 1
33528: PUSH
33529: FOR_DOWNTO
33530: IFFALSE 33560
// result := Join ( result , array [ i ] ) ;
33532: LD_ADDR_VAR 0 2
33536: PUSH
33537: LD_VAR 0 2
33541: PPUSH
33542: LD_VAR 0 1
33546: PUSH
33547: LD_VAR 0 3
33551: ARRAY
33552: PPUSH
33553: CALL 38218 0 2
33557: ST_TO_ADDR
33558: GO 33529
33560: POP
33561: POP
// end ;
33562: LD_VAR 0 2
33566: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
33567: LD_INT 0
33569: PPUSH
33570: PPUSH
33571: PPUSH
33572: PPUSH
33573: PPUSH
33574: PPUSH
// if not unit or not hexes then
33575: LD_VAR 0 1
33579: NOT
33580: PUSH
33581: LD_VAR 0 2
33585: NOT
33586: OR
33587: IFFALSE 33591
// exit ;
33589: GO 33714
// dist := 9999 ;
33591: LD_ADDR_VAR 0 5
33595: PUSH
33596: LD_INT 9999
33598: ST_TO_ADDR
// for i = 1 to hexes do
33599: LD_ADDR_VAR 0 4
33603: PUSH
33604: DOUBLE
33605: LD_INT 1
33607: DEC
33608: ST_TO_ADDR
33609: LD_VAR 0 2
33613: PUSH
33614: FOR_TO
33615: IFFALSE 33702
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
33617: LD_ADDR_VAR 0 6
33621: PUSH
33622: LD_VAR 0 1
33626: PPUSH
33627: LD_VAR 0 2
33631: PUSH
33632: LD_VAR 0 4
33636: ARRAY
33637: PUSH
33638: LD_INT 1
33640: ARRAY
33641: PPUSH
33642: LD_VAR 0 2
33646: PUSH
33647: LD_VAR 0 4
33651: ARRAY
33652: PUSH
33653: LD_INT 2
33655: ARRAY
33656: PPUSH
33657: CALL_OW 297
33661: ST_TO_ADDR
// if tdist < dist then
33662: LD_VAR 0 6
33666: PUSH
33667: LD_VAR 0 5
33671: LESS
33672: IFFALSE 33700
// begin hex := hexes [ i ] ;
33674: LD_ADDR_VAR 0 8
33678: PUSH
33679: LD_VAR 0 2
33683: PUSH
33684: LD_VAR 0 4
33688: ARRAY
33689: ST_TO_ADDR
// dist := tdist ;
33690: LD_ADDR_VAR 0 5
33694: PUSH
33695: LD_VAR 0 6
33699: ST_TO_ADDR
// end ; end ;
33700: GO 33614
33702: POP
33703: POP
// result := hex ;
33704: LD_ADDR_VAR 0 3
33708: PUSH
33709: LD_VAR 0 8
33713: ST_TO_ADDR
// end ;
33714: LD_VAR 0 3
33718: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
33719: LD_INT 0
33721: PPUSH
33722: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
33723: LD_VAR 0 1
33727: NOT
33728: PUSH
33729: LD_VAR 0 1
33733: PUSH
33734: LD_INT 21
33736: PUSH
33737: LD_INT 2
33739: PUSH
33740: EMPTY
33741: LIST
33742: LIST
33743: PUSH
33744: LD_INT 23
33746: PUSH
33747: LD_INT 2
33749: PUSH
33750: EMPTY
33751: LIST
33752: LIST
33753: PUSH
33754: EMPTY
33755: LIST
33756: LIST
33757: PPUSH
33758: CALL_OW 69
33762: IN
33763: NOT
33764: OR
33765: IFFALSE 33769
// exit ;
33767: GO 33816
// for i = 1 to 3 do
33769: LD_ADDR_VAR 0 3
33773: PUSH
33774: DOUBLE
33775: LD_INT 1
33777: DEC
33778: ST_TO_ADDR
33779: LD_INT 3
33781: PUSH
33782: FOR_TO
33783: IFFALSE 33814
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
33785: LD_VAR 0 1
33789: PPUSH
33790: CALL_OW 250
33794: PPUSH
33795: LD_VAR 0 1
33799: PPUSH
33800: CALL_OW 251
33804: PPUSH
33805: LD_INT 1
33807: PPUSH
33808: CALL_OW 453
33812: GO 33782
33814: POP
33815: POP
// end ;
33816: LD_VAR 0 2
33820: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
33821: LD_INT 0
33823: PPUSH
33824: PPUSH
33825: PPUSH
33826: PPUSH
33827: PPUSH
33828: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
33829: LD_VAR 0 1
33833: NOT
33834: PUSH
33835: LD_VAR 0 2
33839: NOT
33840: OR
33841: PUSH
33842: LD_VAR 0 1
33846: PPUSH
33847: CALL_OW 314
33851: OR
33852: IFFALSE 33856
// exit ;
33854: GO 34323
// if GetLives ( i ) < 250 then
33856: LD_VAR 0 4
33860: PPUSH
33861: CALL_OW 256
33865: PUSH
33866: LD_INT 250
33868: LESS
33869: IFFALSE 33882
// begin ComAutodestruct ( i ) ;
33871: LD_VAR 0 4
33875: PPUSH
33876: CALL 33719 0 1
// exit ;
33880: GO 34323
// end ; x := GetX ( enemy_unit ) ;
33882: LD_ADDR_VAR 0 7
33886: PUSH
33887: LD_VAR 0 2
33891: PPUSH
33892: CALL_OW 250
33896: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
33897: LD_ADDR_VAR 0 8
33901: PUSH
33902: LD_VAR 0 2
33906: PPUSH
33907: CALL_OW 251
33911: ST_TO_ADDR
// if not x or not y then
33912: LD_VAR 0 7
33916: NOT
33917: PUSH
33918: LD_VAR 0 8
33922: NOT
33923: OR
33924: IFFALSE 33928
// exit ;
33926: GO 34323
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
33928: LD_ADDR_VAR 0 6
33932: PUSH
33933: LD_VAR 0 7
33937: PPUSH
33938: LD_INT 0
33940: PPUSH
33941: LD_INT 4
33943: PPUSH
33944: CALL_OW 272
33948: PUSH
33949: LD_VAR 0 8
33953: PPUSH
33954: LD_INT 0
33956: PPUSH
33957: LD_INT 4
33959: PPUSH
33960: CALL_OW 273
33964: PUSH
33965: EMPTY
33966: LIST
33967: LIST
33968: PUSH
33969: LD_VAR 0 7
33973: PPUSH
33974: LD_INT 1
33976: PPUSH
33977: LD_INT 4
33979: PPUSH
33980: CALL_OW 272
33984: PUSH
33985: LD_VAR 0 8
33989: PPUSH
33990: LD_INT 1
33992: PPUSH
33993: LD_INT 4
33995: PPUSH
33996: CALL_OW 273
34000: PUSH
34001: EMPTY
34002: LIST
34003: LIST
34004: PUSH
34005: LD_VAR 0 7
34009: PPUSH
34010: LD_INT 2
34012: PPUSH
34013: LD_INT 4
34015: PPUSH
34016: CALL_OW 272
34020: PUSH
34021: LD_VAR 0 8
34025: PPUSH
34026: LD_INT 2
34028: PPUSH
34029: LD_INT 4
34031: PPUSH
34032: CALL_OW 273
34036: PUSH
34037: EMPTY
34038: LIST
34039: LIST
34040: PUSH
34041: LD_VAR 0 7
34045: PPUSH
34046: LD_INT 3
34048: PPUSH
34049: LD_INT 4
34051: PPUSH
34052: CALL_OW 272
34056: PUSH
34057: LD_VAR 0 8
34061: PPUSH
34062: LD_INT 3
34064: PPUSH
34065: LD_INT 4
34067: PPUSH
34068: CALL_OW 273
34072: PUSH
34073: EMPTY
34074: LIST
34075: LIST
34076: PUSH
34077: LD_VAR 0 7
34081: PPUSH
34082: LD_INT 4
34084: PPUSH
34085: LD_INT 4
34087: PPUSH
34088: CALL_OW 272
34092: PUSH
34093: LD_VAR 0 8
34097: PPUSH
34098: LD_INT 4
34100: PPUSH
34101: LD_INT 4
34103: PPUSH
34104: CALL_OW 273
34108: PUSH
34109: EMPTY
34110: LIST
34111: LIST
34112: PUSH
34113: LD_VAR 0 7
34117: PPUSH
34118: LD_INT 5
34120: PPUSH
34121: LD_INT 4
34123: PPUSH
34124: CALL_OW 272
34128: PUSH
34129: LD_VAR 0 8
34133: PPUSH
34134: LD_INT 5
34136: PPUSH
34137: LD_INT 4
34139: PPUSH
34140: CALL_OW 273
34144: PUSH
34145: EMPTY
34146: LIST
34147: LIST
34148: PUSH
34149: EMPTY
34150: LIST
34151: LIST
34152: LIST
34153: LIST
34154: LIST
34155: LIST
34156: ST_TO_ADDR
// for i = tmp downto 1 do
34157: LD_ADDR_VAR 0 4
34161: PUSH
34162: DOUBLE
34163: LD_VAR 0 6
34167: INC
34168: ST_TO_ADDR
34169: LD_INT 1
34171: PUSH
34172: FOR_DOWNTO
34173: IFFALSE 34274
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
34175: LD_VAR 0 6
34179: PUSH
34180: LD_VAR 0 4
34184: ARRAY
34185: PUSH
34186: LD_INT 1
34188: ARRAY
34189: PPUSH
34190: LD_VAR 0 6
34194: PUSH
34195: LD_VAR 0 4
34199: ARRAY
34200: PUSH
34201: LD_INT 2
34203: ARRAY
34204: PPUSH
34205: CALL_OW 488
34209: NOT
34210: PUSH
34211: LD_VAR 0 6
34215: PUSH
34216: LD_VAR 0 4
34220: ARRAY
34221: PUSH
34222: LD_INT 1
34224: ARRAY
34225: PPUSH
34226: LD_VAR 0 6
34230: PUSH
34231: LD_VAR 0 4
34235: ARRAY
34236: PUSH
34237: LD_INT 2
34239: ARRAY
34240: PPUSH
34241: CALL_OW 428
34245: PUSH
34246: LD_INT 0
34248: NONEQUAL
34249: OR
34250: IFFALSE 34272
// tmp := Delete ( tmp , i ) ;
34252: LD_ADDR_VAR 0 6
34256: PUSH
34257: LD_VAR 0 6
34261: PPUSH
34262: LD_VAR 0 4
34266: PPUSH
34267: CALL_OW 3
34271: ST_TO_ADDR
34272: GO 34172
34274: POP
34275: POP
// j := GetClosestHex ( unit , tmp ) ;
34276: LD_ADDR_VAR 0 5
34280: PUSH
34281: LD_VAR 0 1
34285: PPUSH
34286: LD_VAR 0 6
34290: PPUSH
34291: CALL 33567 0 2
34295: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
34296: LD_VAR 0 1
34300: PPUSH
34301: LD_VAR 0 5
34305: PUSH
34306: LD_INT 1
34308: ARRAY
34309: PPUSH
34310: LD_VAR 0 5
34314: PUSH
34315: LD_INT 2
34317: ARRAY
34318: PPUSH
34319: CALL_OW 111
// end ;
34323: LD_VAR 0 3
34327: RET
// export function PrepareApemanSoldier ( ) ; begin
34328: LD_INT 0
34330: PPUSH
// uc_nation := 0 ;
34331: LD_ADDR_OWVAR 21
34335: PUSH
34336: LD_INT 0
34338: ST_TO_ADDR
// hc_sex := sex_male ;
34339: LD_ADDR_OWVAR 27
34343: PUSH
34344: LD_INT 1
34346: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
34347: LD_ADDR_OWVAR 28
34351: PUSH
34352: LD_INT 15
34354: ST_TO_ADDR
// hc_gallery :=  ;
34355: LD_ADDR_OWVAR 33
34359: PUSH
34360: LD_STRING 
34362: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
34363: LD_ADDR_OWVAR 31
34367: PUSH
34368: LD_INT 0
34370: PPUSH
34371: LD_INT 3
34373: PPUSH
34374: CALL_OW 12
34378: PUSH
34379: LD_INT 0
34381: PPUSH
34382: LD_INT 3
34384: PPUSH
34385: CALL_OW 12
34389: PUSH
34390: LD_INT 0
34392: PUSH
34393: LD_INT 0
34395: PUSH
34396: EMPTY
34397: LIST
34398: LIST
34399: LIST
34400: LIST
34401: ST_TO_ADDR
// end ;
34402: LD_VAR 0 1
34406: RET
// export function PrepareApemanEngineer ( ) ; begin
34407: LD_INT 0
34409: PPUSH
// uc_nation := 0 ;
34410: LD_ADDR_OWVAR 21
34414: PUSH
34415: LD_INT 0
34417: ST_TO_ADDR
// hc_sex := sex_male ;
34418: LD_ADDR_OWVAR 27
34422: PUSH
34423: LD_INT 1
34425: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
34426: LD_ADDR_OWVAR 28
34430: PUSH
34431: LD_INT 16
34433: ST_TO_ADDR
// hc_gallery :=  ;
34434: LD_ADDR_OWVAR 33
34438: PUSH
34439: LD_STRING 
34441: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
34442: LD_ADDR_OWVAR 31
34446: PUSH
34447: LD_INT 0
34449: PPUSH
34450: LD_INT 3
34452: PPUSH
34453: CALL_OW 12
34457: PUSH
34458: LD_INT 0
34460: PPUSH
34461: LD_INT 3
34463: PPUSH
34464: CALL_OW 12
34468: PUSH
34469: LD_INT 0
34471: PUSH
34472: LD_INT 0
34474: PUSH
34475: EMPTY
34476: LIST
34477: LIST
34478: LIST
34479: LIST
34480: ST_TO_ADDR
// end ;
34481: LD_VAR 0 1
34485: RET
// export function PrepareApeman ( agressivity ) ; begin
34486: LD_INT 0
34488: PPUSH
// uc_side := 0 ;
34489: LD_ADDR_OWVAR 20
34493: PUSH
34494: LD_INT 0
34496: ST_TO_ADDR
// uc_nation := 0 ;
34497: LD_ADDR_OWVAR 21
34501: PUSH
34502: LD_INT 0
34504: ST_TO_ADDR
// hc_sex := sex_male ;
34505: LD_ADDR_OWVAR 27
34509: PUSH
34510: LD_INT 1
34512: ST_TO_ADDR
// hc_class := class_apeman ;
34513: LD_ADDR_OWVAR 28
34517: PUSH
34518: LD_INT 12
34520: ST_TO_ADDR
// hc_gallery :=  ;
34521: LD_ADDR_OWVAR 33
34525: PUSH
34526: LD_STRING 
34528: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
34529: LD_ADDR_OWVAR 35
34533: PUSH
34534: LD_VAR 0 1
34538: NEG
34539: PPUSH
34540: LD_VAR 0 1
34544: PPUSH
34545: CALL_OW 12
34549: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
34550: LD_ADDR_OWVAR 31
34554: PUSH
34555: LD_INT 0
34557: PPUSH
34558: LD_INT 3
34560: PPUSH
34561: CALL_OW 12
34565: PUSH
34566: LD_INT 0
34568: PPUSH
34569: LD_INT 3
34571: PPUSH
34572: CALL_OW 12
34576: PUSH
34577: LD_INT 0
34579: PUSH
34580: LD_INT 0
34582: PUSH
34583: EMPTY
34584: LIST
34585: LIST
34586: LIST
34587: LIST
34588: ST_TO_ADDR
// end ;
34589: LD_VAR 0 2
34593: RET
// export function PrepareTiger ( agressivity ) ; begin
34594: LD_INT 0
34596: PPUSH
// uc_side := 0 ;
34597: LD_ADDR_OWVAR 20
34601: PUSH
34602: LD_INT 0
34604: ST_TO_ADDR
// uc_nation := 0 ;
34605: LD_ADDR_OWVAR 21
34609: PUSH
34610: LD_INT 0
34612: ST_TO_ADDR
// hc_class := class_tiger ;
34613: LD_ADDR_OWVAR 28
34617: PUSH
34618: LD_INT 14
34620: ST_TO_ADDR
// hc_gallery :=  ;
34621: LD_ADDR_OWVAR 33
34625: PUSH
34626: LD_STRING 
34628: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
34629: LD_ADDR_OWVAR 35
34633: PUSH
34634: LD_VAR 0 1
34638: NEG
34639: PPUSH
34640: LD_VAR 0 1
34644: PPUSH
34645: CALL_OW 12
34649: ST_TO_ADDR
// end ;
34650: LD_VAR 0 2
34654: RET
// export function PrepareEnchidna ( ) ; begin
34655: LD_INT 0
34657: PPUSH
// uc_side := 0 ;
34658: LD_ADDR_OWVAR 20
34662: PUSH
34663: LD_INT 0
34665: ST_TO_ADDR
// uc_nation := 0 ;
34666: LD_ADDR_OWVAR 21
34670: PUSH
34671: LD_INT 0
34673: ST_TO_ADDR
// hc_class := class_baggie ;
34674: LD_ADDR_OWVAR 28
34678: PUSH
34679: LD_INT 13
34681: ST_TO_ADDR
// hc_gallery :=  ;
34682: LD_ADDR_OWVAR 33
34686: PUSH
34687: LD_STRING 
34689: ST_TO_ADDR
// end ;
34690: LD_VAR 0 1
34694: RET
// export function PrepareFrog ( ) ; begin
34695: LD_INT 0
34697: PPUSH
// uc_side := 0 ;
34698: LD_ADDR_OWVAR 20
34702: PUSH
34703: LD_INT 0
34705: ST_TO_ADDR
// uc_nation := 0 ;
34706: LD_ADDR_OWVAR 21
34710: PUSH
34711: LD_INT 0
34713: ST_TO_ADDR
// hc_class := class_frog ;
34714: LD_ADDR_OWVAR 28
34718: PUSH
34719: LD_INT 19
34721: ST_TO_ADDR
// hc_gallery :=  ;
34722: LD_ADDR_OWVAR 33
34726: PUSH
34727: LD_STRING 
34729: ST_TO_ADDR
// end ;
34730: LD_VAR 0 1
34734: RET
// export function PrepareFish ( ) ; begin
34735: LD_INT 0
34737: PPUSH
// uc_side := 0 ;
34738: LD_ADDR_OWVAR 20
34742: PUSH
34743: LD_INT 0
34745: ST_TO_ADDR
// uc_nation := 0 ;
34746: LD_ADDR_OWVAR 21
34750: PUSH
34751: LD_INT 0
34753: ST_TO_ADDR
// hc_class := class_fish ;
34754: LD_ADDR_OWVAR 28
34758: PUSH
34759: LD_INT 20
34761: ST_TO_ADDR
// hc_gallery :=  ;
34762: LD_ADDR_OWVAR 33
34766: PUSH
34767: LD_STRING 
34769: ST_TO_ADDR
// end ;
34770: LD_VAR 0 1
34774: RET
// export function PrepareBird ( ) ; begin
34775: LD_INT 0
34777: PPUSH
// uc_side := 0 ;
34778: LD_ADDR_OWVAR 20
34782: PUSH
34783: LD_INT 0
34785: ST_TO_ADDR
// uc_nation := 0 ;
34786: LD_ADDR_OWVAR 21
34790: PUSH
34791: LD_INT 0
34793: ST_TO_ADDR
// hc_class := class_phororhacos ;
34794: LD_ADDR_OWVAR 28
34798: PUSH
34799: LD_INT 18
34801: ST_TO_ADDR
// hc_gallery :=  ;
34802: LD_ADDR_OWVAR 33
34806: PUSH
34807: LD_STRING 
34809: ST_TO_ADDR
// end ;
34810: LD_VAR 0 1
34814: RET
// export function PrepareHorse ( ) ; begin
34815: LD_INT 0
34817: PPUSH
// uc_side := 0 ;
34818: LD_ADDR_OWVAR 20
34822: PUSH
34823: LD_INT 0
34825: ST_TO_ADDR
// uc_nation := 0 ;
34826: LD_ADDR_OWVAR 21
34830: PUSH
34831: LD_INT 0
34833: ST_TO_ADDR
// hc_class := class_horse ;
34834: LD_ADDR_OWVAR 28
34838: PUSH
34839: LD_INT 21
34841: ST_TO_ADDR
// hc_gallery :=  ;
34842: LD_ADDR_OWVAR 33
34846: PUSH
34847: LD_STRING 
34849: ST_TO_ADDR
// end ;
34850: LD_VAR 0 1
34854: RET
// export function PrepareMastodont ( ) ; begin
34855: LD_INT 0
34857: PPUSH
// uc_side := 0 ;
34858: LD_ADDR_OWVAR 20
34862: PUSH
34863: LD_INT 0
34865: ST_TO_ADDR
// uc_nation := 0 ;
34866: LD_ADDR_OWVAR 21
34870: PUSH
34871: LD_INT 0
34873: ST_TO_ADDR
// vc_chassis := class_mastodont ;
34874: LD_ADDR_OWVAR 37
34878: PUSH
34879: LD_INT 31
34881: ST_TO_ADDR
// vc_control := control_rider ;
34882: LD_ADDR_OWVAR 38
34886: PUSH
34887: LD_INT 4
34889: ST_TO_ADDR
// end ;
34890: LD_VAR 0 1
34894: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
34895: LD_INT 0
34897: PPUSH
34898: PPUSH
34899: PPUSH
// uc_side = 0 ;
34900: LD_ADDR_OWVAR 20
34904: PUSH
34905: LD_INT 0
34907: ST_TO_ADDR
// uc_nation = 0 ;
34908: LD_ADDR_OWVAR 21
34912: PUSH
34913: LD_INT 0
34915: ST_TO_ADDR
// InitHc_All ( ) ;
34916: CALL_OW 584
// InitVc ;
34920: CALL_OW 20
// if mastodonts then
34924: LD_VAR 0 6
34928: IFFALSE 34995
// for i = 1 to mastodonts do
34930: LD_ADDR_VAR 0 11
34934: PUSH
34935: DOUBLE
34936: LD_INT 1
34938: DEC
34939: ST_TO_ADDR
34940: LD_VAR 0 6
34944: PUSH
34945: FOR_TO
34946: IFFALSE 34993
// begin vc_chassis := 31 ;
34948: LD_ADDR_OWVAR 37
34952: PUSH
34953: LD_INT 31
34955: ST_TO_ADDR
// vc_control := control_rider ;
34956: LD_ADDR_OWVAR 38
34960: PUSH
34961: LD_INT 4
34963: ST_TO_ADDR
// animal := CreateVehicle ;
34964: LD_ADDR_VAR 0 12
34968: PUSH
34969: CALL_OW 45
34973: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
34974: LD_VAR 0 12
34978: PPUSH
34979: LD_VAR 0 8
34983: PPUSH
34984: LD_INT 0
34986: PPUSH
34987: CALL 37123 0 3
// end ;
34991: GO 34945
34993: POP
34994: POP
// if horses then
34995: LD_VAR 0 5
34999: IFFALSE 35066
// for i = 1 to horses do
35001: LD_ADDR_VAR 0 11
35005: PUSH
35006: DOUBLE
35007: LD_INT 1
35009: DEC
35010: ST_TO_ADDR
35011: LD_VAR 0 5
35015: PUSH
35016: FOR_TO
35017: IFFALSE 35064
// begin hc_class := 21 ;
35019: LD_ADDR_OWVAR 28
35023: PUSH
35024: LD_INT 21
35026: ST_TO_ADDR
// hc_gallery :=  ;
35027: LD_ADDR_OWVAR 33
35031: PUSH
35032: LD_STRING 
35034: ST_TO_ADDR
// animal := CreateHuman ;
35035: LD_ADDR_VAR 0 12
35039: PUSH
35040: CALL_OW 44
35044: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
35045: LD_VAR 0 12
35049: PPUSH
35050: LD_VAR 0 8
35054: PPUSH
35055: LD_INT 0
35057: PPUSH
35058: CALL 37123 0 3
// end ;
35062: GO 35016
35064: POP
35065: POP
// if birds then
35066: LD_VAR 0 1
35070: IFFALSE 35137
// for i = 1 to birds do
35072: LD_ADDR_VAR 0 11
35076: PUSH
35077: DOUBLE
35078: LD_INT 1
35080: DEC
35081: ST_TO_ADDR
35082: LD_VAR 0 1
35086: PUSH
35087: FOR_TO
35088: IFFALSE 35135
// begin hc_class := 18 ;
35090: LD_ADDR_OWVAR 28
35094: PUSH
35095: LD_INT 18
35097: ST_TO_ADDR
// hc_gallery =  ;
35098: LD_ADDR_OWVAR 33
35102: PUSH
35103: LD_STRING 
35105: ST_TO_ADDR
// animal := CreateHuman ;
35106: LD_ADDR_VAR 0 12
35110: PUSH
35111: CALL_OW 44
35115: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
35116: LD_VAR 0 12
35120: PPUSH
35121: LD_VAR 0 8
35125: PPUSH
35126: LD_INT 0
35128: PPUSH
35129: CALL 37123 0 3
// end ;
35133: GO 35087
35135: POP
35136: POP
// if tigers then
35137: LD_VAR 0 2
35141: IFFALSE 35225
// for i = 1 to tigers do
35143: LD_ADDR_VAR 0 11
35147: PUSH
35148: DOUBLE
35149: LD_INT 1
35151: DEC
35152: ST_TO_ADDR
35153: LD_VAR 0 2
35157: PUSH
35158: FOR_TO
35159: IFFALSE 35223
// begin hc_class = class_tiger ;
35161: LD_ADDR_OWVAR 28
35165: PUSH
35166: LD_INT 14
35168: ST_TO_ADDR
// hc_gallery =  ;
35169: LD_ADDR_OWVAR 33
35173: PUSH
35174: LD_STRING 
35176: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
35177: LD_ADDR_OWVAR 35
35181: PUSH
35182: LD_INT 7
35184: NEG
35185: PPUSH
35186: LD_INT 7
35188: PPUSH
35189: CALL_OW 12
35193: ST_TO_ADDR
// animal := CreateHuman ;
35194: LD_ADDR_VAR 0 12
35198: PUSH
35199: CALL_OW 44
35203: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
35204: LD_VAR 0 12
35208: PPUSH
35209: LD_VAR 0 8
35213: PPUSH
35214: LD_INT 0
35216: PPUSH
35217: CALL 37123 0 3
// end ;
35221: GO 35158
35223: POP
35224: POP
// if apemans then
35225: LD_VAR 0 3
35229: IFFALSE 35352
// for i = 1 to apemans do
35231: LD_ADDR_VAR 0 11
35235: PUSH
35236: DOUBLE
35237: LD_INT 1
35239: DEC
35240: ST_TO_ADDR
35241: LD_VAR 0 3
35245: PUSH
35246: FOR_TO
35247: IFFALSE 35350
// begin hc_class = class_apeman ;
35249: LD_ADDR_OWVAR 28
35253: PUSH
35254: LD_INT 12
35256: ST_TO_ADDR
// hc_gallery =  ;
35257: LD_ADDR_OWVAR 33
35261: PUSH
35262: LD_STRING 
35264: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
35265: LD_ADDR_OWVAR 35
35269: PUSH
35270: LD_INT 2
35272: NEG
35273: PPUSH
35274: LD_INT 2
35276: PPUSH
35277: CALL_OW 12
35281: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
35282: LD_ADDR_OWVAR 31
35286: PUSH
35287: LD_INT 1
35289: PPUSH
35290: LD_INT 3
35292: PPUSH
35293: CALL_OW 12
35297: PUSH
35298: LD_INT 1
35300: PPUSH
35301: LD_INT 3
35303: PPUSH
35304: CALL_OW 12
35308: PUSH
35309: LD_INT 0
35311: PUSH
35312: LD_INT 0
35314: PUSH
35315: EMPTY
35316: LIST
35317: LIST
35318: LIST
35319: LIST
35320: ST_TO_ADDR
// animal := CreateHuman ;
35321: LD_ADDR_VAR 0 12
35325: PUSH
35326: CALL_OW 44
35330: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
35331: LD_VAR 0 12
35335: PPUSH
35336: LD_VAR 0 8
35340: PPUSH
35341: LD_INT 0
35343: PPUSH
35344: CALL 37123 0 3
// end ;
35348: GO 35246
35350: POP
35351: POP
// if enchidnas then
35352: LD_VAR 0 4
35356: IFFALSE 35423
// for i = 1 to enchidnas do
35358: LD_ADDR_VAR 0 11
35362: PUSH
35363: DOUBLE
35364: LD_INT 1
35366: DEC
35367: ST_TO_ADDR
35368: LD_VAR 0 4
35372: PUSH
35373: FOR_TO
35374: IFFALSE 35421
// begin hc_class = 13 ;
35376: LD_ADDR_OWVAR 28
35380: PUSH
35381: LD_INT 13
35383: ST_TO_ADDR
// hc_gallery =  ;
35384: LD_ADDR_OWVAR 33
35388: PUSH
35389: LD_STRING 
35391: ST_TO_ADDR
// animal := CreateHuman ;
35392: LD_ADDR_VAR 0 12
35396: PUSH
35397: CALL_OW 44
35401: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
35402: LD_VAR 0 12
35406: PPUSH
35407: LD_VAR 0 8
35411: PPUSH
35412: LD_INT 0
35414: PPUSH
35415: CALL 37123 0 3
// end ;
35419: GO 35373
35421: POP
35422: POP
// if fishes then
35423: LD_VAR 0 7
35427: IFFALSE 35494
// for i = 1 to fishes do
35429: LD_ADDR_VAR 0 11
35433: PUSH
35434: DOUBLE
35435: LD_INT 1
35437: DEC
35438: ST_TO_ADDR
35439: LD_VAR 0 7
35443: PUSH
35444: FOR_TO
35445: IFFALSE 35492
// begin hc_class = 20 ;
35447: LD_ADDR_OWVAR 28
35451: PUSH
35452: LD_INT 20
35454: ST_TO_ADDR
// hc_gallery =  ;
35455: LD_ADDR_OWVAR 33
35459: PUSH
35460: LD_STRING 
35462: ST_TO_ADDR
// animal := CreateHuman ;
35463: LD_ADDR_VAR 0 12
35467: PUSH
35468: CALL_OW 44
35472: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
35473: LD_VAR 0 12
35477: PPUSH
35478: LD_VAR 0 9
35482: PPUSH
35483: LD_INT 0
35485: PPUSH
35486: CALL 37123 0 3
// end ;
35490: GO 35444
35492: POP
35493: POP
// end ;
35494: LD_VAR 0 10
35498: RET
// export function WantHeal ( sci , unit ) ; begin
35499: LD_INT 0
35501: PPUSH
// if GetTaskList ( sci ) > 0 then
35502: LD_VAR 0 1
35506: PPUSH
35507: CALL_OW 437
35511: PUSH
35512: LD_INT 0
35514: GREATER
35515: IFFALSE 35585
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
35517: LD_VAR 0 1
35521: PPUSH
35522: CALL_OW 437
35526: PUSH
35527: LD_INT 1
35529: ARRAY
35530: PUSH
35531: LD_INT 1
35533: ARRAY
35534: PUSH
35535: LD_STRING l
35537: EQUAL
35538: PUSH
35539: LD_VAR 0 1
35543: PPUSH
35544: CALL_OW 437
35548: PUSH
35549: LD_INT 1
35551: ARRAY
35552: PUSH
35553: LD_INT 4
35555: ARRAY
35556: PUSH
35557: LD_VAR 0 2
35561: EQUAL
35562: AND
35563: IFFALSE 35575
// result := true else
35565: LD_ADDR_VAR 0 3
35569: PUSH
35570: LD_INT 1
35572: ST_TO_ADDR
35573: GO 35583
// result := false ;
35575: LD_ADDR_VAR 0 3
35579: PUSH
35580: LD_INT 0
35582: ST_TO_ADDR
// end else
35583: GO 35593
// result := false ;
35585: LD_ADDR_VAR 0 3
35589: PUSH
35590: LD_INT 0
35592: ST_TO_ADDR
// end ;
35593: LD_VAR 0 3
35597: RET
// export function HealTarget ( sci ) ; begin
35598: LD_INT 0
35600: PPUSH
// if not sci then
35601: LD_VAR 0 1
35605: NOT
35606: IFFALSE 35610
// exit ;
35608: GO 35675
// result := 0 ;
35610: LD_ADDR_VAR 0 2
35614: PUSH
35615: LD_INT 0
35617: ST_TO_ADDR
// if GetTaskList ( sci ) then
35618: LD_VAR 0 1
35622: PPUSH
35623: CALL_OW 437
35627: IFFALSE 35675
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
35629: LD_VAR 0 1
35633: PPUSH
35634: CALL_OW 437
35638: PUSH
35639: LD_INT 1
35641: ARRAY
35642: PUSH
35643: LD_INT 1
35645: ARRAY
35646: PUSH
35647: LD_STRING l
35649: EQUAL
35650: IFFALSE 35675
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
35652: LD_ADDR_VAR 0 2
35656: PUSH
35657: LD_VAR 0 1
35661: PPUSH
35662: CALL_OW 437
35666: PUSH
35667: LD_INT 1
35669: ARRAY
35670: PUSH
35671: LD_INT 4
35673: ARRAY
35674: ST_TO_ADDR
// end ;
35675: LD_VAR 0 2
35679: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
35680: LD_INT 0
35682: PPUSH
35683: PPUSH
35684: PPUSH
35685: PPUSH
// if not base_units then
35686: LD_VAR 0 1
35690: NOT
35691: IFFALSE 35695
// exit ;
35693: GO 35782
// result := false ;
35695: LD_ADDR_VAR 0 2
35699: PUSH
35700: LD_INT 0
35702: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
35703: LD_ADDR_VAR 0 5
35707: PUSH
35708: LD_VAR 0 1
35712: PPUSH
35713: LD_INT 21
35715: PUSH
35716: LD_INT 3
35718: PUSH
35719: EMPTY
35720: LIST
35721: LIST
35722: PPUSH
35723: CALL_OW 72
35727: ST_TO_ADDR
// if not tmp then
35728: LD_VAR 0 5
35732: NOT
35733: IFFALSE 35737
// exit ;
35735: GO 35782
// for i in tmp do
35737: LD_ADDR_VAR 0 3
35741: PUSH
35742: LD_VAR 0 5
35746: PUSH
35747: FOR_IN
35748: IFFALSE 35780
// begin result := EnemyInRange ( i , 22 ) ;
35750: LD_ADDR_VAR 0 2
35754: PUSH
35755: LD_VAR 0 3
35759: PPUSH
35760: LD_INT 22
35762: PPUSH
35763: CALL 33369 0 2
35767: ST_TO_ADDR
// if result then
35768: LD_VAR 0 2
35772: IFFALSE 35778
// exit ;
35774: POP
35775: POP
35776: GO 35782
// end ;
35778: GO 35747
35780: POP
35781: POP
// end ;
35782: LD_VAR 0 2
35786: RET
// export function FilterByTag ( units , tag ) ; begin
35787: LD_INT 0
35789: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
35790: LD_ADDR_VAR 0 3
35794: PUSH
35795: LD_VAR 0 1
35799: PPUSH
35800: LD_INT 120
35802: PUSH
35803: LD_VAR 0 2
35807: PUSH
35808: EMPTY
35809: LIST
35810: LIST
35811: PPUSH
35812: CALL_OW 72
35816: ST_TO_ADDR
// end ;
35817: LD_VAR 0 3
35821: RET
// export function IsDriver ( un ) ; begin
35822: LD_INT 0
35824: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
35825: LD_ADDR_VAR 0 2
35829: PUSH
35830: LD_VAR 0 1
35834: PUSH
35835: LD_INT 55
35837: PUSH
35838: EMPTY
35839: LIST
35840: PPUSH
35841: CALL_OW 69
35845: IN
35846: ST_TO_ADDR
// end ;
35847: LD_VAR 0 2
35851: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
35852: LD_INT 0
35854: PPUSH
35855: PPUSH
// list := [ ] ;
35856: LD_ADDR_VAR 0 5
35860: PUSH
35861: EMPTY
35862: ST_TO_ADDR
// case d of 0 :
35863: LD_VAR 0 3
35867: PUSH
35868: LD_INT 0
35870: DOUBLE
35871: EQUAL
35872: IFTRUE 35876
35874: GO 36009
35876: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
35877: LD_ADDR_VAR 0 5
35881: PUSH
35882: LD_VAR 0 1
35886: PUSH
35887: LD_INT 4
35889: MINUS
35890: PUSH
35891: LD_VAR 0 2
35895: PUSH
35896: LD_INT 4
35898: MINUS
35899: PUSH
35900: LD_INT 2
35902: PUSH
35903: EMPTY
35904: LIST
35905: LIST
35906: LIST
35907: PUSH
35908: LD_VAR 0 1
35912: PUSH
35913: LD_INT 3
35915: MINUS
35916: PUSH
35917: LD_VAR 0 2
35921: PUSH
35922: LD_INT 1
35924: PUSH
35925: EMPTY
35926: LIST
35927: LIST
35928: LIST
35929: PUSH
35930: LD_VAR 0 1
35934: PUSH
35935: LD_INT 4
35937: PLUS
35938: PUSH
35939: LD_VAR 0 2
35943: PUSH
35944: LD_INT 4
35946: PUSH
35947: EMPTY
35948: LIST
35949: LIST
35950: LIST
35951: PUSH
35952: LD_VAR 0 1
35956: PUSH
35957: LD_INT 3
35959: PLUS
35960: PUSH
35961: LD_VAR 0 2
35965: PUSH
35966: LD_INT 3
35968: PLUS
35969: PUSH
35970: LD_INT 5
35972: PUSH
35973: EMPTY
35974: LIST
35975: LIST
35976: LIST
35977: PUSH
35978: LD_VAR 0 1
35982: PUSH
35983: LD_VAR 0 2
35987: PUSH
35988: LD_INT 4
35990: PLUS
35991: PUSH
35992: LD_INT 0
35994: PUSH
35995: EMPTY
35996: LIST
35997: LIST
35998: LIST
35999: PUSH
36000: EMPTY
36001: LIST
36002: LIST
36003: LIST
36004: LIST
36005: LIST
36006: ST_TO_ADDR
// end ; 1 :
36007: GO 36707
36009: LD_INT 1
36011: DOUBLE
36012: EQUAL
36013: IFTRUE 36017
36015: GO 36150
36017: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
36018: LD_ADDR_VAR 0 5
36022: PUSH
36023: LD_VAR 0 1
36027: PUSH
36028: LD_VAR 0 2
36032: PUSH
36033: LD_INT 4
36035: MINUS
36036: PUSH
36037: LD_INT 3
36039: PUSH
36040: EMPTY
36041: LIST
36042: LIST
36043: LIST
36044: PUSH
36045: LD_VAR 0 1
36049: PUSH
36050: LD_INT 3
36052: MINUS
36053: PUSH
36054: LD_VAR 0 2
36058: PUSH
36059: LD_INT 3
36061: MINUS
36062: PUSH
36063: LD_INT 2
36065: PUSH
36066: EMPTY
36067: LIST
36068: LIST
36069: LIST
36070: PUSH
36071: LD_VAR 0 1
36075: PUSH
36076: LD_INT 4
36078: MINUS
36079: PUSH
36080: LD_VAR 0 2
36084: PUSH
36085: LD_INT 1
36087: PUSH
36088: EMPTY
36089: LIST
36090: LIST
36091: LIST
36092: PUSH
36093: LD_VAR 0 1
36097: PUSH
36098: LD_VAR 0 2
36102: PUSH
36103: LD_INT 3
36105: PLUS
36106: PUSH
36107: LD_INT 0
36109: PUSH
36110: EMPTY
36111: LIST
36112: LIST
36113: LIST
36114: PUSH
36115: LD_VAR 0 1
36119: PUSH
36120: LD_INT 4
36122: PLUS
36123: PUSH
36124: LD_VAR 0 2
36128: PUSH
36129: LD_INT 4
36131: PLUS
36132: PUSH
36133: LD_INT 5
36135: PUSH
36136: EMPTY
36137: LIST
36138: LIST
36139: LIST
36140: PUSH
36141: EMPTY
36142: LIST
36143: LIST
36144: LIST
36145: LIST
36146: LIST
36147: ST_TO_ADDR
// end ; 2 :
36148: GO 36707
36150: LD_INT 2
36152: DOUBLE
36153: EQUAL
36154: IFTRUE 36158
36156: GO 36287
36158: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
36159: LD_ADDR_VAR 0 5
36163: PUSH
36164: LD_VAR 0 1
36168: PUSH
36169: LD_VAR 0 2
36173: PUSH
36174: LD_INT 3
36176: MINUS
36177: PUSH
36178: LD_INT 3
36180: PUSH
36181: EMPTY
36182: LIST
36183: LIST
36184: LIST
36185: PUSH
36186: LD_VAR 0 1
36190: PUSH
36191: LD_INT 4
36193: PLUS
36194: PUSH
36195: LD_VAR 0 2
36199: PUSH
36200: LD_INT 4
36202: PUSH
36203: EMPTY
36204: LIST
36205: LIST
36206: LIST
36207: PUSH
36208: LD_VAR 0 1
36212: PUSH
36213: LD_VAR 0 2
36217: PUSH
36218: LD_INT 4
36220: PLUS
36221: PUSH
36222: LD_INT 0
36224: PUSH
36225: EMPTY
36226: LIST
36227: LIST
36228: LIST
36229: PUSH
36230: LD_VAR 0 1
36234: PUSH
36235: LD_INT 3
36237: MINUS
36238: PUSH
36239: LD_VAR 0 2
36243: PUSH
36244: LD_INT 1
36246: PUSH
36247: EMPTY
36248: LIST
36249: LIST
36250: LIST
36251: PUSH
36252: LD_VAR 0 1
36256: PUSH
36257: LD_INT 4
36259: MINUS
36260: PUSH
36261: LD_VAR 0 2
36265: PUSH
36266: LD_INT 4
36268: MINUS
36269: PUSH
36270: LD_INT 2
36272: PUSH
36273: EMPTY
36274: LIST
36275: LIST
36276: LIST
36277: PUSH
36278: EMPTY
36279: LIST
36280: LIST
36281: LIST
36282: LIST
36283: LIST
36284: ST_TO_ADDR
// end ; 3 :
36285: GO 36707
36287: LD_INT 3
36289: DOUBLE
36290: EQUAL
36291: IFTRUE 36295
36293: GO 36428
36295: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
36296: LD_ADDR_VAR 0 5
36300: PUSH
36301: LD_VAR 0 1
36305: PUSH
36306: LD_INT 3
36308: PLUS
36309: PUSH
36310: LD_VAR 0 2
36314: PUSH
36315: LD_INT 4
36317: PUSH
36318: EMPTY
36319: LIST
36320: LIST
36321: LIST
36322: PUSH
36323: LD_VAR 0 1
36327: PUSH
36328: LD_INT 4
36330: PLUS
36331: PUSH
36332: LD_VAR 0 2
36336: PUSH
36337: LD_INT 4
36339: PLUS
36340: PUSH
36341: LD_INT 5
36343: PUSH
36344: EMPTY
36345: LIST
36346: LIST
36347: LIST
36348: PUSH
36349: LD_VAR 0 1
36353: PUSH
36354: LD_INT 4
36356: MINUS
36357: PUSH
36358: LD_VAR 0 2
36362: PUSH
36363: LD_INT 1
36365: PUSH
36366: EMPTY
36367: LIST
36368: LIST
36369: LIST
36370: PUSH
36371: LD_VAR 0 1
36375: PUSH
36376: LD_VAR 0 2
36380: PUSH
36381: LD_INT 4
36383: MINUS
36384: PUSH
36385: LD_INT 3
36387: PUSH
36388: EMPTY
36389: LIST
36390: LIST
36391: LIST
36392: PUSH
36393: LD_VAR 0 1
36397: PUSH
36398: LD_INT 3
36400: MINUS
36401: PUSH
36402: LD_VAR 0 2
36406: PUSH
36407: LD_INT 3
36409: MINUS
36410: PUSH
36411: LD_INT 2
36413: PUSH
36414: EMPTY
36415: LIST
36416: LIST
36417: LIST
36418: PUSH
36419: EMPTY
36420: LIST
36421: LIST
36422: LIST
36423: LIST
36424: LIST
36425: ST_TO_ADDR
// end ; 4 :
36426: GO 36707
36428: LD_INT 4
36430: DOUBLE
36431: EQUAL
36432: IFTRUE 36436
36434: GO 36569
36436: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
36437: LD_ADDR_VAR 0 5
36441: PUSH
36442: LD_VAR 0 1
36446: PUSH
36447: LD_VAR 0 2
36451: PUSH
36452: LD_INT 4
36454: PLUS
36455: PUSH
36456: LD_INT 0
36458: PUSH
36459: EMPTY
36460: LIST
36461: LIST
36462: LIST
36463: PUSH
36464: LD_VAR 0 1
36468: PUSH
36469: LD_INT 3
36471: PLUS
36472: PUSH
36473: LD_VAR 0 2
36477: PUSH
36478: LD_INT 3
36480: PLUS
36481: PUSH
36482: LD_INT 5
36484: PUSH
36485: EMPTY
36486: LIST
36487: LIST
36488: LIST
36489: PUSH
36490: LD_VAR 0 1
36494: PUSH
36495: LD_INT 4
36497: PLUS
36498: PUSH
36499: LD_VAR 0 2
36503: PUSH
36504: LD_INT 4
36506: PUSH
36507: EMPTY
36508: LIST
36509: LIST
36510: LIST
36511: PUSH
36512: LD_VAR 0 1
36516: PUSH
36517: LD_VAR 0 2
36521: PUSH
36522: LD_INT 3
36524: MINUS
36525: PUSH
36526: LD_INT 3
36528: PUSH
36529: EMPTY
36530: LIST
36531: LIST
36532: LIST
36533: PUSH
36534: LD_VAR 0 1
36538: PUSH
36539: LD_INT 4
36541: MINUS
36542: PUSH
36543: LD_VAR 0 2
36547: PUSH
36548: LD_INT 4
36550: MINUS
36551: PUSH
36552: LD_INT 2
36554: PUSH
36555: EMPTY
36556: LIST
36557: LIST
36558: LIST
36559: PUSH
36560: EMPTY
36561: LIST
36562: LIST
36563: LIST
36564: LIST
36565: LIST
36566: ST_TO_ADDR
// end ; 5 :
36567: GO 36707
36569: LD_INT 5
36571: DOUBLE
36572: EQUAL
36573: IFTRUE 36577
36575: GO 36706
36577: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
36578: LD_ADDR_VAR 0 5
36582: PUSH
36583: LD_VAR 0 1
36587: PUSH
36588: LD_INT 4
36590: MINUS
36591: PUSH
36592: LD_VAR 0 2
36596: PUSH
36597: LD_INT 1
36599: PUSH
36600: EMPTY
36601: LIST
36602: LIST
36603: LIST
36604: PUSH
36605: LD_VAR 0 1
36609: PUSH
36610: LD_VAR 0 2
36614: PUSH
36615: LD_INT 4
36617: MINUS
36618: PUSH
36619: LD_INT 3
36621: PUSH
36622: EMPTY
36623: LIST
36624: LIST
36625: LIST
36626: PUSH
36627: LD_VAR 0 1
36631: PUSH
36632: LD_INT 4
36634: PLUS
36635: PUSH
36636: LD_VAR 0 2
36640: PUSH
36641: LD_INT 4
36643: PLUS
36644: PUSH
36645: LD_INT 5
36647: PUSH
36648: EMPTY
36649: LIST
36650: LIST
36651: LIST
36652: PUSH
36653: LD_VAR 0 1
36657: PUSH
36658: LD_INT 3
36660: PLUS
36661: PUSH
36662: LD_VAR 0 2
36666: PUSH
36667: LD_INT 4
36669: PUSH
36670: EMPTY
36671: LIST
36672: LIST
36673: LIST
36674: PUSH
36675: LD_VAR 0 1
36679: PUSH
36680: LD_VAR 0 2
36684: PUSH
36685: LD_INT 3
36687: PLUS
36688: PUSH
36689: LD_INT 0
36691: PUSH
36692: EMPTY
36693: LIST
36694: LIST
36695: LIST
36696: PUSH
36697: EMPTY
36698: LIST
36699: LIST
36700: LIST
36701: LIST
36702: LIST
36703: ST_TO_ADDR
// end ; end ;
36704: GO 36707
36706: POP
// result := list ;
36707: LD_ADDR_VAR 0 4
36711: PUSH
36712: LD_VAR 0 5
36716: ST_TO_ADDR
// end ;
36717: LD_VAR 0 4
36721: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
36722: LD_INT 0
36724: PPUSH
36725: PPUSH
36726: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
36727: LD_VAR 0 1
36731: NOT
36732: PUSH
36733: LD_VAR 0 2
36737: PUSH
36738: LD_INT 1
36740: PUSH
36741: LD_INT 2
36743: PUSH
36744: LD_INT 3
36746: PUSH
36747: LD_INT 4
36749: PUSH
36750: EMPTY
36751: LIST
36752: LIST
36753: LIST
36754: LIST
36755: IN
36756: NOT
36757: OR
36758: IFFALSE 36762
// exit ;
36760: GO 36845
// tmp := [ ] ;
36762: LD_ADDR_VAR 0 5
36766: PUSH
36767: EMPTY
36768: ST_TO_ADDR
// for i in units do
36769: LD_ADDR_VAR 0 4
36773: PUSH
36774: LD_VAR 0 1
36778: PUSH
36779: FOR_IN
36780: IFFALSE 36814
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
36782: LD_ADDR_VAR 0 5
36786: PUSH
36787: LD_VAR 0 5
36791: PPUSH
36792: LD_VAR 0 4
36796: PPUSH
36797: LD_VAR 0 2
36801: PPUSH
36802: CALL_OW 259
36806: PPUSH
36807: CALL 38218 0 2
36811: ST_TO_ADDR
36812: GO 36779
36814: POP
36815: POP
// if not tmp then
36816: LD_VAR 0 5
36820: NOT
36821: IFFALSE 36825
// exit ;
36823: GO 36845
// result := SortListByListDesc ( units , tmp ) ;
36825: LD_ADDR_VAR 0 3
36829: PUSH
36830: LD_VAR 0 1
36834: PPUSH
36835: LD_VAR 0 5
36839: PPUSH
36840: CALL_OW 77
36844: ST_TO_ADDR
// end ;
36845: LD_VAR 0 3
36849: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
36850: LD_INT 0
36852: PPUSH
36853: PPUSH
36854: PPUSH
// result := false ;
36855: LD_ADDR_VAR 0 3
36859: PUSH
36860: LD_INT 0
36862: ST_TO_ADDR
// if not building then
36863: LD_VAR 0 2
36867: NOT
36868: IFFALSE 36872
// exit ;
36870: GO 37010
// x := GetX ( building ) ;
36872: LD_ADDR_VAR 0 4
36876: PUSH
36877: LD_VAR 0 2
36881: PPUSH
36882: CALL_OW 250
36886: ST_TO_ADDR
// y := GetY ( building ) ;
36887: LD_ADDR_VAR 0 5
36891: PUSH
36892: LD_VAR 0 2
36896: PPUSH
36897: CALL_OW 251
36901: ST_TO_ADDR
// if not x or not y then
36902: LD_VAR 0 4
36906: NOT
36907: PUSH
36908: LD_VAR 0 5
36912: NOT
36913: OR
36914: IFFALSE 36918
// exit ;
36916: GO 37010
// if GetTaskList ( unit ) then
36918: LD_VAR 0 1
36922: PPUSH
36923: CALL_OW 437
36927: IFFALSE 37010
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
36929: LD_STRING e
36931: PUSH
36932: LD_VAR 0 1
36936: PPUSH
36937: CALL_OW 437
36941: PUSH
36942: LD_INT 1
36944: ARRAY
36945: PUSH
36946: LD_INT 1
36948: ARRAY
36949: EQUAL
36950: PUSH
36951: LD_VAR 0 4
36955: PUSH
36956: LD_VAR 0 1
36960: PPUSH
36961: CALL_OW 437
36965: PUSH
36966: LD_INT 1
36968: ARRAY
36969: PUSH
36970: LD_INT 2
36972: ARRAY
36973: EQUAL
36974: AND
36975: PUSH
36976: LD_VAR 0 5
36980: PUSH
36981: LD_VAR 0 1
36985: PPUSH
36986: CALL_OW 437
36990: PUSH
36991: LD_INT 1
36993: ARRAY
36994: PUSH
36995: LD_INT 3
36997: ARRAY
36998: EQUAL
36999: AND
37000: IFFALSE 37010
// result := true end ;
37002: LD_ADDR_VAR 0 3
37006: PUSH
37007: LD_INT 1
37009: ST_TO_ADDR
// end ;
37010: LD_VAR 0 3
37014: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
37015: LD_INT 0
37017: PPUSH
// result := false ;
37018: LD_ADDR_VAR 0 4
37022: PUSH
37023: LD_INT 0
37025: ST_TO_ADDR
// if GetTaskList ( unit ) then
37026: LD_VAR 0 1
37030: PPUSH
37031: CALL_OW 437
37035: IFFALSE 37118
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
37037: LD_STRING M
37039: PUSH
37040: LD_VAR 0 1
37044: PPUSH
37045: CALL_OW 437
37049: PUSH
37050: LD_INT 1
37052: ARRAY
37053: PUSH
37054: LD_INT 1
37056: ARRAY
37057: EQUAL
37058: PUSH
37059: LD_VAR 0 2
37063: PUSH
37064: LD_VAR 0 1
37068: PPUSH
37069: CALL_OW 437
37073: PUSH
37074: LD_INT 1
37076: ARRAY
37077: PUSH
37078: LD_INT 2
37080: ARRAY
37081: EQUAL
37082: AND
37083: PUSH
37084: LD_VAR 0 3
37088: PUSH
37089: LD_VAR 0 1
37093: PPUSH
37094: CALL_OW 437
37098: PUSH
37099: LD_INT 1
37101: ARRAY
37102: PUSH
37103: LD_INT 3
37105: ARRAY
37106: EQUAL
37107: AND
37108: IFFALSE 37118
// result := true ;
37110: LD_ADDR_VAR 0 4
37114: PUSH
37115: LD_INT 1
37117: ST_TO_ADDR
// end ; end ;
37118: LD_VAR 0 4
37122: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
37123: LD_INT 0
37125: PPUSH
37126: PPUSH
37127: PPUSH
37128: PPUSH
// if not unit or not area then
37129: LD_VAR 0 1
37133: NOT
37134: PUSH
37135: LD_VAR 0 2
37139: NOT
37140: OR
37141: IFFALSE 37145
// exit ;
37143: GO 37321
// tmp := AreaToList ( area , i ) ;
37145: LD_ADDR_VAR 0 6
37149: PUSH
37150: LD_VAR 0 2
37154: PPUSH
37155: LD_VAR 0 5
37159: PPUSH
37160: CALL_OW 517
37164: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
37165: LD_ADDR_VAR 0 5
37169: PUSH
37170: DOUBLE
37171: LD_INT 1
37173: DEC
37174: ST_TO_ADDR
37175: LD_VAR 0 6
37179: PUSH
37180: LD_INT 1
37182: ARRAY
37183: PUSH
37184: FOR_TO
37185: IFFALSE 37319
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
37187: LD_ADDR_VAR 0 7
37191: PUSH
37192: LD_VAR 0 6
37196: PUSH
37197: LD_INT 1
37199: ARRAY
37200: PUSH
37201: LD_VAR 0 5
37205: ARRAY
37206: PUSH
37207: LD_VAR 0 6
37211: PUSH
37212: LD_INT 2
37214: ARRAY
37215: PUSH
37216: LD_VAR 0 5
37220: ARRAY
37221: PUSH
37222: EMPTY
37223: LIST
37224: LIST
37225: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
37226: LD_INT 92
37228: PUSH
37229: LD_VAR 0 7
37233: PUSH
37234: LD_INT 1
37236: ARRAY
37237: PUSH
37238: LD_VAR 0 7
37242: PUSH
37243: LD_INT 2
37245: ARRAY
37246: PUSH
37247: LD_INT 2
37249: PUSH
37250: EMPTY
37251: LIST
37252: LIST
37253: LIST
37254: LIST
37255: PPUSH
37256: CALL_OW 69
37260: PUSH
37261: LD_INT 0
37263: EQUAL
37264: IFFALSE 37317
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
37266: LD_VAR 0 1
37270: PPUSH
37271: LD_VAR 0 7
37275: PUSH
37276: LD_INT 1
37278: ARRAY
37279: PPUSH
37280: LD_VAR 0 7
37284: PUSH
37285: LD_INT 2
37287: ARRAY
37288: PPUSH
37289: LD_VAR 0 3
37293: PPUSH
37294: CALL_OW 48
// result := IsPlaced ( unit ) ;
37298: LD_ADDR_VAR 0 4
37302: PUSH
37303: LD_VAR 0 1
37307: PPUSH
37308: CALL_OW 305
37312: ST_TO_ADDR
// exit ;
37313: POP
37314: POP
37315: GO 37321
// end ; end ;
37317: GO 37184
37319: POP
37320: POP
// end ;
37321: LD_VAR 0 4
37325: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
37326: LD_INT 0
37328: PPUSH
37329: PPUSH
37330: PPUSH
// if not side or side > 8 then
37331: LD_VAR 0 1
37335: NOT
37336: PUSH
37337: LD_VAR 0 1
37341: PUSH
37342: LD_INT 8
37344: GREATER
37345: OR
37346: IFFALSE 37350
// exit ;
37348: GO 37537
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
37350: LD_ADDR_VAR 0 4
37354: PUSH
37355: LD_INT 22
37357: PUSH
37358: LD_VAR 0 1
37362: PUSH
37363: EMPTY
37364: LIST
37365: LIST
37366: PUSH
37367: LD_INT 21
37369: PUSH
37370: LD_INT 3
37372: PUSH
37373: EMPTY
37374: LIST
37375: LIST
37376: PUSH
37377: EMPTY
37378: LIST
37379: LIST
37380: PPUSH
37381: CALL_OW 69
37385: ST_TO_ADDR
// if not tmp then
37386: LD_VAR 0 4
37390: NOT
37391: IFFALSE 37395
// exit ;
37393: GO 37537
// enable_addtolog := true ;
37395: LD_ADDR_OWVAR 81
37399: PUSH
37400: LD_INT 1
37402: ST_TO_ADDR
// AddToLog ( [ ) ;
37403: LD_STRING [
37405: PPUSH
37406: CALL_OW 561
// for i in tmp do
37410: LD_ADDR_VAR 0 3
37414: PUSH
37415: LD_VAR 0 4
37419: PUSH
37420: FOR_IN
37421: IFFALSE 37528
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
37423: LD_STRING [
37425: PUSH
37426: LD_VAR 0 3
37430: PPUSH
37431: CALL_OW 266
37435: STR
37436: PUSH
37437: LD_STRING , 
37439: STR
37440: PUSH
37441: LD_VAR 0 3
37445: PPUSH
37446: CALL_OW 250
37450: STR
37451: PUSH
37452: LD_STRING , 
37454: STR
37455: PUSH
37456: LD_VAR 0 3
37460: PPUSH
37461: CALL_OW 251
37465: STR
37466: PUSH
37467: LD_STRING , 
37469: STR
37470: PUSH
37471: LD_VAR 0 3
37475: PPUSH
37476: CALL_OW 254
37480: STR
37481: PUSH
37482: LD_STRING , 
37484: STR
37485: PUSH
37486: LD_VAR 0 3
37490: PPUSH
37491: LD_INT 1
37493: PPUSH
37494: CALL_OW 268
37498: STR
37499: PUSH
37500: LD_STRING , 
37502: STR
37503: PUSH
37504: LD_VAR 0 3
37508: PPUSH
37509: LD_INT 2
37511: PPUSH
37512: CALL_OW 268
37516: STR
37517: PUSH
37518: LD_STRING ],
37520: STR
37521: PPUSH
37522: CALL_OW 561
// end ;
37526: GO 37420
37528: POP
37529: POP
// AddToLog ( ]; ) ;
37530: LD_STRING ];
37532: PPUSH
37533: CALL_OW 561
// end ;
37537: LD_VAR 0 2
37541: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
37542: LD_INT 0
37544: PPUSH
37545: PPUSH
37546: PPUSH
37547: PPUSH
37548: PPUSH
// if not area or not rate or not max then
37549: LD_VAR 0 1
37553: NOT
37554: PUSH
37555: LD_VAR 0 2
37559: NOT
37560: OR
37561: PUSH
37562: LD_VAR 0 4
37566: NOT
37567: OR
37568: IFFALSE 37572
// exit ;
37570: GO 37761
// while 1 do
37572: LD_INT 1
37574: IFFALSE 37761
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
37576: LD_ADDR_VAR 0 9
37580: PUSH
37581: LD_VAR 0 1
37585: PPUSH
37586: LD_INT 1
37588: PPUSH
37589: CALL_OW 287
37593: PUSH
37594: LD_INT 10
37596: MUL
37597: ST_TO_ADDR
// r := rate / 10 ;
37598: LD_ADDR_VAR 0 7
37602: PUSH
37603: LD_VAR 0 2
37607: PUSH
37608: LD_INT 10
37610: DIVREAL
37611: ST_TO_ADDR
// time := 1 1$00 ;
37612: LD_ADDR_VAR 0 8
37616: PUSH
37617: LD_INT 2100
37619: ST_TO_ADDR
// if amount < min then
37620: LD_VAR 0 9
37624: PUSH
37625: LD_VAR 0 3
37629: LESS
37630: IFFALSE 37648
// r := r * 2 else
37632: LD_ADDR_VAR 0 7
37636: PUSH
37637: LD_VAR 0 7
37641: PUSH
37642: LD_INT 2
37644: MUL
37645: ST_TO_ADDR
37646: GO 37674
// if amount > max then
37648: LD_VAR 0 9
37652: PUSH
37653: LD_VAR 0 4
37657: GREATER
37658: IFFALSE 37674
// r := r / 2 ;
37660: LD_ADDR_VAR 0 7
37664: PUSH
37665: LD_VAR 0 7
37669: PUSH
37670: LD_INT 2
37672: DIVREAL
37673: ST_TO_ADDR
// time := time / r ;
37674: LD_ADDR_VAR 0 8
37678: PUSH
37679: LD_VAR 0 8
37683: PUSH
37684: LD_VAR 0 7
37688: DIVREAL
37689: ST_TO_ADDR
// if time < 0 then
37690: LD_VAR 0 8
37694: PUSH
37695: LD_INT 0
37697: LESS
37698: IFFALSE 37715
// time := time * - 1 ;
37700: LD_ADDR_VAR 0 8
37704: PUSH
37705: LD_VAR 0 8
37709: PUSH
37710: LD_INT 1
37712: NEG
37713: MUL
37714: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
37715: LD_VAR 0 8
37719: PUSH
37720: LD_INT 35
37722: PPUSH
37723: LD_INT 875
37725: PPUSH
37726: CALL_OW 12
37730: PLUS
37731: PPUSH
37732: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
37736: LD_INT 1
37738: PPUSH
37739: LD_INT 5
37741: PPUSH
37742: CALL_OW 12
37746: PPUSH
37747: LD_VAR 0 1
37751: PPUSH
37752: LD_INT 1
37754: PPUSH
37755: CALL_OW 55
// end ;
37759: GO 37572
// end ;
37761: LD_VAR 0 5
37765: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
37766: LD_INT 0
37768: PPUSH
37769: PPUSH
37770: PPUSH
37771: PPUSH
37772: PPUSH
37773: PPUSH
37774: PPUSH
37775: PPUSH
// if not turrets or not factories then
37776: LD_VAR 0 1
37780: NOT
37781: PUSH
37782: LD_VAR 0 2
37786: NOT
37787: OR
37788: IFFALSE 37792
// exit ;
37790: GO 38099
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
37792: LD_ADDR_VAR 0 10
37796: PUSH
37797: LD_INT 5
37799: PUSH
37800: LD_INT 6
37802: PUSH
37803: EMPTY
37804: LIST
37805: LIST
37806: PUSH
37807: LD_INT 2
37809: PUSH
37810: LD_INT 4
37812: PUSH
37813: EMPTY
37814: LIST
37815: LIST
37816: PUSH
37817: LD_INT 3
37819: PUSH
37820: LD_INT 5
37822: PUSH
37823: EMPTY
37824: LIST
37825: LIST
37826: PUSH
37827: EMPTY
37828: LIST
37829: LIST
37830: LIST
37831: PUSH
37832: LD_INT 24
37834: PUSH
37835: LD_INT 25
37837: PUSH
37838: EMPTY
37839: LIST
37840: LIST
37841: PUSH
37842: LD_INT 23
37844: PUSH
37845: LD_INT 27
37847: PUSH
37848: EMPTY
37849: LIST
37850: LIST
37851: PUSH
37852: EMPTY
37853: LIST
37854: LIST
37855: PUSH
37856: LD_INT 42
37858: PUSH
37859: LD_INT 43
37861: PUSH
37862: EMPTY
37863: LIST
37864: LIST
37865: PUSH
37866: LD_INT 44
37868: PUSH
37869: LD_INT 46
37871: PUSH
37872: EMPTY
37873: LIST
37874: LIST
37875: PUSH
37876: LD_INT 45
37878: PUSH
37879: LD_INT 47
37881: PUSH
37882: EMPTY
37883: LIST
37884: LIST
37885: PUSH
37886: EMPTY
37887: LIST
37888: LIST
37889: LIST
37890: PUSH
37891: EMPTY
37892: LIST
37893: LIST
37894: LIST
37895: ST_TO_ADDR
// result := [ ] ;
37896: LD_ADDR_VAR 0 3
37900: PUSH
37901: EMPTY
37902: ST_TO_ADDR
// for i in turrets do
37903: LD_ADDR_VAR 0 4
37907: PUSH
37908: LD_VAR 0 1
37912: PUSH
37913: FOR_IN
37914: IFFALSE 38097
// begin nat := GetNation ( i ) ;
37916: LD_ADDR_VAR 0 7
37920: PUSH
37921: LD_VAR 0 4
37925: PPUSH
37926: CALL_OW 248
37930: ST_TO_ADDR
// weapon := 0 ;
37931: LD_ADDR_VAR 0 8
37935: PUSH
37936: LD_INT 0
37938: ST_TO_ADDR
// if not nat then
37939: LD_VAR 0 7
37943: NOT
37944: IFFALSE 37948
// continue ;
37946: GO 37913
// for j in list [ nat ] do
37948: LD_ADDR_VAR 0 5
37952: PUSH
37953: LD_VAR 0 10
37957: PUSH
37958: LD_VAR 0 7
37962: ARRAY
37963: PUSH
37964: FOR_IN
37965: IFFALSE 38006
// if GetBWeapon ( i ) = j [ 1 ] then
37967: LD_VAR 0 4
37971: PPUSH
37972: CALL_OW 269
37976: PUSH
37977: LD_VAR 0 5
37981: PUSH
37982: LD_INT 1
37984: ARRAY
37985: EQUAL
37986: IFFALSE 38004
// begin weapon := j [ 2 ] ;
37988: LD_ADDR_VAR 0 8
37992: PUSH
37993: LD_VAR 0 5
37997: PUSH
37998: LD_INT 2
38000: ARRAY
38001: ST_TO_ADDR
// break ;
38002: GO 38006
// end ;
38004: GO 37964
38006: POP
38007: POP
// if not weapon then
38008: LD_VAR 0 8
38012: NOT
38013: IFFALSE 38017
// continue ;
38015: GO 37913
// for k in factories do
38017: LD_ADDR_VAR 0 6
38021: PUSH
38022: LD_VAR 0 2
38026: PUSH
38027: FOR_IN
38028: IFFALSE 38093
// begin weapons := AvailableWeaponList ( k ) ;
38030: LD_ADDR_VAR 0 9
38034: PUSH
38035: LD_VAR 0 6
38039: PPUSH
38040: CALL_OW 478
38044: ST_TO_ADDR
// if not weapons then
38045: LD_VAR 0 9
38049: NOT
38050: IFFALSE 38054
// continue ;
38052: GO 38027
// if weapon in weapons then
38054: LD_VAR 0 8
38058: PUSH
38059: LD_VAR 0 9
38063: IN
38064: IFFALSE 38091
// begin result := [ i , weapon ] ;
38066: LD_ADDR_VAR 0 3
38070: PUSH
38071: LD_VAR 0 4
38075: PUSH
38076: LD_VAR 0 8
38080: PUSH
38081: EMPTY
38082: LIST
38083: LIST
38084: ST_TO_ADDR
// exit ;
38085: POP
38086: POP
38087: POP
38088: POP
38089: GO 38099
// end ; end ;
38091: GO 38027
38093: POP
38094: POP
// end ;
38095: GO 37913
38097: POP
38098: POP
// end ;
38099: LD_VAR 0 3
38103: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
38104: LD_INT 0
38106: PPUSH
// if not side or side > 8 then
38107: LD_VAR 0 3
38111: NOT
38112: PUSH
38113: LD_VAR 0 3
38117: PUSH
38118: LD_INT 8
38120: GREATER
38121: OR
38122: IFFALSE 38126
// exit ;
38124: GO 38185
// if not range then
38126: LD_VAR 0 4
38130: NOT
38131: IFFALSE 38142
// range := - 12 ;
38133: LD_ADDR_VAR 0 4
38137: PUSH
38138: LD_INT 12
38140: NEG
38141: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
38142: LD_VAR 0 1
38146: PPUSH
38147: LD_VAR 0 2
38151: PPUSH
38152: LD_VAR 0 3
38156: PPUSH
38157: LD_VAR 0 4
38161: PPUSH
38162: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
38166: LD_VAR 0 1
38170: PPUSH
38171: LD_VAR 0 2
38175: PPUSH
38176: LD_VAR 0 3
38180: PPUSH
38181: CALL_OW 331
// end ;
38185: LD_VAR 0 5
38189: RET
// export function Video ( mode ) ; begin
38190: LD_INT 0
38192: PPUSH
// ingame_video = mode ;
38193: LD_ADDR_OWVAR 52
38197: PUSH
38198: LD_VAR 0 1
38202: ST_TO_ADDR
// interface_hidden = mode ;
38203: LD_ADDR_OWVAR 54
38207: PUSH
38208: LD_VAR 0 1
38212: ST_TO_ADDR
// end ;
38213: LD_VAR 0 2
38217: RET
// export function Join ( array , element ) ; begin
38218: LD_INT 0
38220: PPUSH
// result := Replace ( array , array + 1 , element ) ;
38221: LD_ADDR_VAR 0 3
38225: PUSH
38226: LD_VAR 0 1
38230: PPUSH
38231: LD_VAR 0 1
38235: PUSH
38236: LD_INT 1
38238: PLUS
38239: PPUSH
38240: LD_VAR 0 2
38244: PPUSH
38245: CALL_OW 1
38249: ST_TO_ADDR
// end ;
38250: LD_VAR 0 3
38254: RET
// export function JoinUnion ( array , element ) ; begin
38255: LD_INT 0
38257: PPUSH
// result := array union element ;
38258: LD_ADDR_VAR 0 3
38262: PUSH
38263: LD_VAR 0 1
38267: PUSH
38268: LD_VAR 0 2
38272: UNION
38273: ST_TO_ADDR
// end ;
38274: LD_VAR 0 3
38278: RET
// export function GetBehemoths ( side ) ; begin
38279: LD_INT 0
38281: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
38282: LD_ADDR_VAR 0 2
38286: PUSH
38287: LD_INT 22
38289: PUSH
38290: LD_VAR 0 1
38294: PUSH
38295: EMPTY
38296: LIST
38297: LIST
38298: PUSH
38299: LD_INT 31
38301: PUSH
38302: LD_INT 25
38304: PUSH
38305: EMPTY
38306: LIST
38307: LIST
38308: PUSH
38309: EMPTY
38310: LIST
38311: LIST
38312: PPUSH
38313: CALL_OW 69
38317: ST_TO_ADDR
// end ;
38318: LD_VAR 0 2
38322: RET
// export function Shuffle ( array ) ; var i , index ; begin
38323: LD_INT 0
38325: PPUSH
38326: PPUSH
38327: PPUSH
// result := [ ] ;
38328: LD_ADDR_VAR 0 2
38332: PUSH
38333: EMPTY
38334: ST_TO_ADDR
// if not array then
38335: LD_VAR 0 1
38339: NOT
38340: IFFALSE 38344
// exit ;
38342: GO 38443
// Randomize ;
38344: CALL_OW 10
// for i = array downto 1 do
38348: LD_ADDR_VAR 0 3
38352: PUSH
38353: DOUBLE
38354: LD_VAR 0 1
38358: INC
38359: ST_TO_ADDR
38360: LD_INT 1
38362: PUSH
38363: FOR_DOWNTO
38364: IFFALSE 38441
// begin index := rand ( 1 , array ) ;
38366: LD_ADDR_VAR 0 4
38370: PUSH
38371: LD_INT 1
38373: PPUSH
38374: LD_VAR 0 1
38378: PPUSH
38379: CALL_OW 12
38383: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
38384: LD_ADDR_VAR 0 2
38388: PUSH
38389: LD_VAR 0 2
38393: PPUSH
38394: LD_VAR 0 2
38398: PUSH
38399: LD_INT 1
38401: PLUS
38402: PPUSH
38403: LD_VAR 0 1
38407: PUSH
38408: LD_VAR 0 4
38412: ARRAY
38413: PPUSH
38414: CALL_OW 2
38418: ST_TO_ADDR
// array := Delete ( array , index ) ;
38419: LD_ADDR_VAR 0 1
38423: PUSH
38424: LD_VAR 0 1
38428: PPUSH
38429: LD_VAR 0 4
38433: PPUSH
38434: CALL_OW 3
38438: ST_TO_ADDR
// end ;
38439: GO 38363
38441: POP
38442: POP
// end ;
38443: LD_VAR 0 2
38447: RET
// export function GetBaseMaterials ( base ) ; begin
38448: LD_INT 0
38450: PPUSH
// result := [ 0 , 0 , 0 ] ;
38451: LD_ADDR_VAR 0 2
38455: PUSH
38456: LD_INT 0
38458: PUSH
38459: LD_INT 0
38461: PUSH
38462: LD_INT 0
38464: PUSH
38465: EMPTY
38466: LIST
38467: LIST
38468: LIST
38469: ST_TO_ADDR
// if not base then
38470: LD_VAR 0 1
38474: NOT
38475: IFFALSE 38479
// exit ;
38477: GO 38528
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
38479: LD_ADDR_VAR 0 2
38483: PUSH
38484: LD_VAR 0 1
38488: PPUSH
38489: LD_INT 1
38491: PPUSH
38492: CALL_OW 275
38496: PUSH
38497: LD_VAR 0 1
38501: PPUSH
38502: LD_INT 2
38504: PPUSH
38505: CALL_OW 275
38509: PUSH
38510: LD_VAR 0 1
38514: PPUSH
38515: LD_INT 3
38517: PPUSH
38518: CALL_OW 275
38522: PUSH
38523: EMPTY
38524: LIST
38525: LIST
38526: LIST
38527: ST_TO_ADDR
// end ;
38528: LD_VAR 0 2
38532: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
38533: LD_INT 0
38535: PPUSH
38536: PPUSH
// result := array ;
38537: LD_ADDR_VAR 0 3
38541: PUSH
38542: LD_VAR 0 1
38546: ST_TO_ADDR
// if size >= result then
38547: LD_VAR 0 2
38551: PUSH
38552: LD_VAR 0 3
38556: GREATEREQUAL
38557: IFFALSE 38561
// exit ;
38559: GO 38611
// if size then
38561: LD_VAR 0 2
38565: IFFALSE 38611
// for i := array downto size do
38567: LD_ADDR_VAR 0 4
38571: PUSH
38572: DOUBLE
38573: LD_VAR 0 1
38577: INC
38578: ST_TO_ADDR
38579: LD_VAR 0 2
38583: PUSH
38584: FOR_DOWNTO
38585: IFFALSE 38609
// result := Delete ( result , result ) ;
38587: LD_ADDR_VAR 0 3
38591: PUSH
38592: LD_VAR 0 3
38596: PPUSH
38597: LD_VAR 0 3
38601: PPUSH
38602: CALL_OW 3
38606: ST_TO_ADDR
38607: GO 38584
38609: POP
38610: POP
// end ;
38611: LD_VAR 0 3
38615: RET
// export function ComExit ( unit ) ; var tmp ; begin
38616: LD_INT 0
38618: PPUSH
38619: PPUSH
// if not IsInUnit ( unit ) then
38620: LD_VAR 0 1
38624: PPUSH
38625: CALL_OW 310
38629: NOT
38630: IFFALSE 38634
// exit ;
38632: GO 38694
// tmp := IsInUnit ( unit ) ;
38634: LD_ADDR_VAR 0 3
38638: PUSH
38639: LD_VAR 0 1
38643: PPUSH
38644: CALL_OW 310
38648: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
38649: LD_VAR 0 3
38653: PPUSH
38654: CALL_OW 247
38658: PUSH
38659: LD_INT 2
38661: EQUAL
38662: IFFALSE 38675
// ComExitVehicle ( unit ) else
38664: LD_VAR 0 1
38668: PPUSH
38669: CALL_OW 121
38673: GO 38684
// ComExitBuilding ( unit ) ;
38675: LD_VAR 0 1
38679: PPUSH
38680: CALL_OW 122
// result := tmp ;
38684: LD_ADDR_VAR 0 2
38688: PUSH
38689: LD_VAR 0 3
38693: ST_TO_ADDR
// end ;
38694: LD_VAR 0 2
38698: RET
// export function ComExitAll ( units ) ; var i ; begin
38699: LD_INT 0
38701: PPUSH
38702: PPUSH
// if not units then
38703: LD_VAR 0 1
38707: NOT
38708: IFFALSE 38712
// exit ;
38710: GO 38738
// for i in units do
38712: LD_ADDR_VAR 0 3
38716: PUSH
38717: LD_VAR 0 1
38721: PUSH
38722: FOR_IN
38723: IFFALSE 38736
// ComExit ( i ) ;
38725: LD_VAR 0 3
38729: PPUSH
38730: CALL 38616 0 1
38734: GO 38722
38736: POP
38737: POP
// end ;
38738: LD_VAR 0 2
38742: RET
// export function ResetHc ; begin
38743: LD_INT 0
38745: PPUSH
// InitHc ;
38746: CALL_OW 19
// hc_importance := 0 ;
38750: LD_ADDR_OWVAR 32
38754: PUSH
38755: LD_INT 0
38757: ST_TO_ADDR
// end ;
38758: LD_VAR 0 1
38762: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
38763: LD_INT 0
38765: PPUSH
38766: PPUSH
38767: PPUSH
// _x := ( x1 + x2 ) div 2 ;
38768: LD_ADDR_VAR 0 6
38772: PUSH
38773: LD_VAR 0 1
38777: PUSH
38778: LD_VAR 0 3
38782: PLUS
38783: PUSH
38784: LD_INT 2
38786: DIV
38787: ST_TO_ADDR
// if _x < 0 then
38788: LD_VAR 0 6
38792: PUSH
38793: LD_INT 0
38795: LESS
38796: IFFALSE 38813
// _x := _x * - 1 ;
38798: LD_ADDR_VAR 0 6
38802: PUSH
38803: LD_VAR 0 6
38807: PUSH
38808: LD_INT 1
38810: NEG
38811: MUL
38812: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
38813: LD_ADDR_VAR 0 7
38817: PUSH
38818: LD_VAR 0 2
38822: PUSH
38823: LD_VAR 0 4
38827: PLUS
38828: PUSH
38829: LD_INT 2
38831: DIV
38832: ST_TO_ADDR
// if _y < 0 then
38833: LD_VAR 0 7
38837: PUSH
38838: LD_INT 0
38840: LESS
38841: IFFALSE 38858
// _y := _y * - 1 ;
38843: LD_ADDR_VAR 0 7
38847: PUSH
38848: LD_VAR 0 7
38852: PUSH
38853: LD_INT 1
38855: NEG
38856: MUL
38857: ST_TO_ADDR
// result := [ _x , _y ] ;
38858: LD_ADDR_VAR 0 5
38862: PUSH
38863: LD_VAR 0 6
38867: PUSH
38868: LD_VAR 0 7
38872: PUSH
38873: EMPTY
38874: LIST
38875: LIST
38876: ST_TO_ADDR
// end ;
38877: LD_VAR 0 5
38881: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
38882: LD_INT 0
38884: PPUSH
38885: PPUSH
38886: PPUSH
38887: PPUSH
// task := GetTaskList ( unit ) ;
38888: LD_ADDR_VAR 0 7
38892: PUSH
38893: LD_VAR 0 1
38897: PPUSH
38898: CALL_OW 437
38902: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
38903: LD_VAR 0 7
38907: NOT
38908: PUSH
38909: LD_VAR 0 1
38913: PPUSH
38914: LD_VAR 0 2
38918: PPUSH
38919: CALL_OW 308
38923: NOT
38924: AND
38925: IFFALSE 38929
// exit ;
38927: GO 39047
// if IsInArea ( unit , area ) then
38929: LD_VAR 0 1
38933: PPUSH
38934: LD_VAR 0 2
38938: PPUSH
38939: CALL_OW 308
38943: IFFALSE 38961
// begin ComMoveToArea ( unit , goAway ) ;
38945: LD_VAR 0 1
38949: PPUSH
38950: LD_VAR 0 3
38954: PPUSH
38955: CALL_OW 113
// exit ;
38959: GO 39047
// end ; if task [ 1 ] [ 1 ] <> M then
38961: LD_VAR 0 7
38965: PUSH
38966: LD_INT 1
38968: ARRAY
38969: PUSH
38970: LD_INT 1
38972: ARRAY
38973: PUSH
38974: LD_STRING M
38976: NONEQUAL
38977: IFFALSE 38981
// exit ;
38979: GO 39047
// x := task [ 1 ] [ 2 ] ;
38981: LD_ADDR_VAR 0 5
38985: PUSH
38986: LD_VAR 0 7
38990: PUSH
38991: LD_INT 1
38993: ARRAY
38994: PUSH
38995: LD_INT 2
38997: ARRAY
38998: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
38999: LD_ADDR_VAR 0 6
39003: PUSH
39004: LD_VAR 0 7
39008: PUSH
39009: LD_INT 1
39011: ARRAY
39012: PUSH
39013: LD_INT 3
39015: ARRAY
39016: ST_TO_ADDR
// if InArea ( x , y , area ) then
39017: LD_VAR 0 5
39021: PPUSH
39022: LD_VAR 0 6
39026: PPUSH
39027: LD_VAR 0 2
39031: PPUSH
39032: CALL_OW 309
39036: IFFALSE 39047
// ComStop ( unit ) ;
39038: LD_VAR 0 1
39042: PPUSH
39043: CALL_OW 141
// end ;
39047: LD_VAR 0 4
39051: RET
// export function Abs ( value ) ; begin
39052: LD_INT 0
39054: PPUSH
// result := value ;
39055: LD_ADDR_VAR 0 2
39059: PUSH
39060: LD_VAR 0 1
39064: ST_TO_ADDR
// if value < 0 then
39065: LD_VAR 0 1
39069: PUSH
39070: LD_INT 0
39072: LESS
39073: IFFALSE 39090
// result := value * - 1 ;
39075: LD_ADDR_VAR 0 2
39079: PUSH
39080: LD_VAR 0 1
39084: PUSH
39085: LD_INT 1
39087: NEG
39088: MUL
39089: ST_TO_ADDR
// end ;
39090: LD_VAR 0 2
39094: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
39095: LD_INT 0
39097: PPUSH
39098: PPUSH
39099: PPUSH
39100: PPUSH
39101: PPUSH
39102: PPUSH
39103: PPUSH
39104: PPUSH
// if not unit or not building then
39105: LD_VAR 0 1
39109: NOT
39110: PUSH
39111: LD_VAR 0 2
39115: NOT
39116: OR
39117: IFFALSE 39121
// exit ;
39119: GO 39347
// x := GetX ( building ) ;
39121: LD_ADDR_VAR 0 4
39125: PUSH
39126: LD_VAR 0 2
39130: PPUSH
39131: CALL_OW 250
39135: ST_TO_ADDR
// y := GetY ( building ) ;
39136: LD_ADDR_VAR 0 6
39140: PUSH
39141: LD_VAR 0 2
39145: PPUSH
39146: CALL_OW 251
39150: ST_TO_ADDR
// d := GetDir ( building ) ;
39151: LD_ADDR_VAR 0 8
39155: PUSH
39156: LD_VAR 0 2
39160: PPUSH
39161: CALL_OW 254
39165: ST_TO_ADDR
// r := 4 ;
39166: LD_ADDR_VAR 0 9
39170: PUSH
39171: LD_INT 4
39173: ST_TO_ADDR
// for i := 1 to 5 do
39174: LD_ADDR_VAR 0 10
39178: PUSH
39179: DOUBLE
39180: LD_INT 1
39182: DEC
39183: ST_TO_ADDR
39184: LD_INT 5
39186: PUSH
39187: FOR_TO
39188: IFFALSE 39345
// begin _x := ShiftX ( x , d , r + i ) ;
39190: LD_ADDR_VAR 0 5
39194: PUSH
39195: LD_VAR 0 4
39199: PPUSH
39200: LD_VAR 0 8
39204: PPUSH
39205: LD_VAR 0 9
39209: PUSH
39210: LD_VAR 0 10
39214: PLUS
39215: PPUSH
39216: CALL_OW 272
39220: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
39221: LD_ADDR_VAR 0 7
39225: PUSH
39226: LD_VAR 0 6
39230: PPUSH
39231: LD_VAR 0 8
39235: PPUSH
39236: LD_VAR 0 9
39240: PUSH
39241: LD_VAR 0 10
39245: PLUS
39246: PPUSH
39247: CALL_OW 273
39251: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
39252: LD_VAR 0 5
39256: PPUSH
39257: LD_VAR 0 7
39261: PPUSH
39262: CALL_OW 488
39266: PUSH
39267: LD_VAR 0 5
39271: PPUSH
39272: LD_VAR 0 7
39276: PPUSH
39277: CALL_OW 428
39281: PPUSH
39282: CALL_OW 247
39286: PUSH
39287: LD_INT 3
39289: PUSH
39290: LD_INT 2
39292: PUSH
39293: EMPTY
39294: LIST
39295: LIST
39296: IN
39297: NOT
39298: AND
39299: IFFALSE 39343
// begin ComMoveXY ( unit , _x , _y ) ;
39301: LD_VAR 0 1
39305: PPUSH
39306: LD_VAR 0 5
39310: PPUSH
39311: LD_VAR 0 7
39315: PPUSH
39316: CALL_OW 111
// result := [ _x , _y ] ;
39320: LD_ADDR_VAR 0 3
39324: PUSH
39325: LD_VAR 0 5
39329: PUSH
39330: LD_VAR 0 7
39334: PUSH
39335: EMPTY
39336: LIST
39337: LIST
39338: ST_TO_ADDR
// exit ;
39339: POP
39340: POP
39341: GO 39347
// end ; end ;
39343: GO 39187
39345: POP
39346: POP
// end ;
39347: LD_VAR 0 3
39351: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
39352: LD_INT 0
39354: PPUSH
39355: PPUSH
39356: PPUSH
// result := 0 ;
39357: LD_ADDR_VAR 0 3
39361: PUSH
39362: LD_INT 0
39364: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
39365: LD_VAR 0 1
39369: PUSH
39370: LD_INT 0
39372: LESS
39373: PUSH
39374: LD_VAR 0 1
39378: PUSH
39379: LD_INT 8
39381: GREATER
39382: OR
39383: PUSH
39384: LD_VAR 0 2
39388: PUSH
39389: LD_INT 0
39391: LESS
39392: OR
39393: PUSH
39394: LD_VAR 0 2
39398: PUSH
39399: LD_INT 8
39401: GREATER
39402: OR
39403: IFFALSE 39407
// exit ;
39405: GO 39482
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
39407: LD_ADDR_VAR 0 4
39411: PUSH
39412: LD_INT 22
39414: PUSH
39415: LD_VAR 0 2
39419: PUSH
39420: EMPTY
39421: LIST
39422: LIST
39423: PPUSH
39424: CALL_OW 69
39428: PUSH
39429: FOR_IN
39430: IFFALSE 39480
// begin un := UnitShoot ( i ) ;
39432: LD_ADDR_VAR 0 5
39436: PUSH
39437: LD_VAR 0 4
39441: PPUSH
39442: CALL_OW 504
39446: ST_TO_ADDR
// if GetSide ( un ) = side1 then
39447: LD_VAR 0 5
39451: PPUSH
39452: CALL_OW 255
39456: PUSH
39457: LD_VAR 0 1
39461: EQUAL
39462: IFFALSE 39478
// begin result := un ;
39464: LD_ADDR_VAR 0 3
39468: PUSH
39469: LD_VAR 0 5
39473: ST_TO_ADDR
// exit ;
39474: POP
39475: POP
39476: GO 39482
// end ; end ;
39478: GO 39429
39480: POP
39481: POP
// end ;
39482: LD_VAR 0 3
39486: RET
// export function GetCargoBay ( units ) ; begin
39487: LD_INT 0
39489: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
39490: LD_ADDR_VAR 0 2
39494: PUSH
39495: LD_VAR 0 1
39499: PPUSH
39500: LD_INT 2
39502: PUSH
39503: LD_INT 34
39505: PUSH
39506: LD_INT 12
39508: PUSH
39509: EMPTY
39510: LIST
39511: LIST
39512: PUSH
39513: LD_INT 34
39515: PUSH
39516: LD_INT 51
39518: PUSH
39519: EMPTY
39520: LIST
39521: LIST
39522: PUSH
39523: LD_INT 34
39525: PUSH
39526: LD_INT 32
39528: PUSH
39529: EMPTY
39530: LIST
39531: LIST
39532: PUSH
39533: LD_INT 34
39535: PUSH
39536: LD_INT 89
39538: PUSH
39539: EMPTY
39540: LIST
39541: LIST
39542: PUSH
39543: EMPTY
39544: LIST
39545: LIST
39546: LIST
39547: LIST
39548: LIST
39549: PPUSH
39550: CALL_OW 72
39554: ST_TO_ADDR
// end ;
39555: LD_VAR 0 2
39559: RET
// export function Negate ( value ) ; begin
39560: LD_INT 0
39562: PPUSH
// result := not value ;
39563: LD_ADDR_VAR 0 2
39567: PUSH
39568: LD_VAR 0 1
39572: NOT
39573: ST_TO_ADDR
// end ;
39574: LD_VAR 0 2
39578: RET
// export function Inc ( value ) ; begin
39579: LD_INT 0
39581: PPUSH
// result := value + 1 ;
39582: LD_ADDR_VAR 0 2
39586: PUSH
39587: LD_VAR 0 1
39591: PUSH
39592: LD_INT 1
39594: PLUS
39595: ST_TO_ADDR
// end ;
39596: LD_VAR 0 2
39600: RET
// export function Dec ( value ) ; begin
39601: LD_INT 0
39603: PPUSH
// result := value - 1 ;
39604: LD_ADDR_VAR 0 2
39608: PUSH
39609: LD_VAR 0 1
39613: PUSH
39614: LD_INT 1
39616: MINUS
39617: ST_TO_ADDR
// end ;
39618: LD_VAR 0 2
39622: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
39623: LD_INT 0
39625: PPUSH
39626: PPUSH
39627: PPUSH
39628: PPUSH
39629: PPUSH
39630: PPUSH
39631: PPUSH
39632: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
39633: LD_VAR 0 1
39637: PPUSH
39638: LD_VAR 0 2
39642: PPUSH
39643: CALL_OW 488
39647: NOT
39648: PUSH
39649: LD_VAR 0 3
39653: PPUSH
39654: LD_VAR 0 4
39658: PPUSH
39659: CALL_OW 488
39663: NOT
39664: OR
39665: IFFALSE 39678
// begin result := - 1 ;
39667: LD_ADDR_VAR 0 5
39671: PUSH
39672: LD_INT 1
39674: NEG
39675: ST_TO_ADDR
// exit ;
39676: GO 39913
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
39678: LD_ADDR_VAR 0 12
39682: PUSH
39683: LD_VAR 0 1
39687: PPUSH
39688: LD_VAR 0 2
39692: PPUSH
39693: LD_VAR 0 3
39697: PPUSH
39698: LD_VAR 0 4
39702: PPUSH
39703: CALL 38763 0 4
39707: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
39708: LD_ADDR_VAR 0 11
39712: PUSH
39713: LD_VAR 0 1
39717: PPUSH
39718: LD_VAR 0 2
39722: PPUSH
39723: LD_VAR 0 12
39727: PUSH
39728: LD_INT 1
39730: ARRAY
39731: PPUSH
39732: LD_VAR 0 12
39736: PUSH
39737: LD_INT 2
39739: ARRAY
39740: PPUSH
39741: CALL_OW 298
39745: ST_TO_ADDR
// distance := 9999 ;
39746: LD_ADDR_VAR 0 10
39750: PUSH
39751: LD_INT 9999
39753: ST_TO_ADDR
// for i := 0 to 5 do
39754: LD_ADDR_VAR 0 6
39758: PUSH
39759: DOUBLE
39760: LD_INT 0
39762: DEC
39763: ST_TO_ADDR
39764: LD_INT 5
39766: PUSH
39767: FOR_TO
39768: IFFALSE 39911
// begin _x := ShiftX ( x1 , i , centerDist ) ;
39770: LD_ADDR_VAR 0 7
39774: PUSH
39775: LD_VAR 0 1
39779: PPUSH
39780: LD_VAR 0 6
39784: PPUSH
39785: LD_VAR 0 11
39789: PPUSH
39790: CALL_OW 272
39794: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
39795: LD_ADDR_VAR 0 8
39799: PUSH
39800: LD_VAR 0 2
39804: PPUSH
39805: LD_VAR 0 6
39809: PPUSH
39810: LD_VAR 0 11
39814: PPUSH
39815: CALL_OW 273
39819: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
39820: LD_VAR 0 7
39824: PPUSH
39825: LD_VAR 0 8
39829: PPUSH
39830: CALL_OW 488
39834: NOT
39835: IFFALSE 39839
// continue ;
39837: GO 39767
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
39839: LD_ADDR_VAR 0 9
39843: PUSH
39844: LD_VAR 0 12
39848: PUSH
39849: LD_INT 1
39851: ARRAY
39852: PPUSH
39853: LD_VAR 0 12
39857: PUSH
39858: LD_INT 2
39860: ARRAY
39861: PPUSH
39862: LD_VAR 0 7
39866: PPUSH
39867: LD_VAR 0 8
39871: PPUSH
39872: CALL_OW 298
39876: ST_TO_ADDR
// if tmp < distance then
39877: LD_VAR 0 9
39881: PUSH
39882: LD_VAR 0 10
39886: LESS
39887: IFFALSE 39909
// begin result := i ;
39889: LD_ADDR_VAR 0 5
39893: PUSH
39894: LD_VAR 0 6
39898: ST_TO_ADDR
// distance := tmp ;
39899: LD_ADDR_VAR 0 10
39903: PUSH
39904: LD_VAR 0 9
39908: ST_TO_ADDR
// end ; end ;
39909: GO 39767
39911: POP
39912: POP
// end ;
39913: LD_VAR 0 5
39917: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
39918: LD_INT 0
39920: PPUSH
39921: PPUSH
// if not driver or not IsInUnit ( driver ) then
39922: LD_VAR 0 1
39926: NOT
39927: PUSH
39928: LD_VAR 0 1
39932: PPUSH
39933: CALL_OW 310
39937: NOT
39938: OR
39939: IFFALSE 39943
// exit ;
39941: GO 40033
// vehicle := IsInUnit ( driver ) ;
39943: LD_ADDR_VAR 0 3
39947: PUSH
39948: LD_VAR 0 1
39952: PPUSH
39953: CALL_OW 310
39957: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
39958: LD_VAR 0 1
39962: PPUSH
39963: LD_STRING \
39965: PUSH
39966: LD_INT 0
39968: PUSH
39969: LD_INT 0
39971: PUSH
39972: LD_INT 0
39974: PUSH
39975: LD_INT 0
39977: PUSH
39978: LD_INT 0
39980: PUSH
39981: LD_INT 0
39983: PUSH
39984: EMPTY
39985: LIST
39986: LIST
39987: LIST
39988: LIST
39989: LIST
39990: LIST
39991: LIST
39992: PUSH
39993: LD_STRING E
39995: PUSH
39996: LD_INT 0
39998: PUSH
39999: LD_INT 0
40001: PUSH
40002: LD_VAR 0 3
40006: PUSH
40007: LD_INT 0
40009: PUSH
40010: LD_INT 0
40012: PUSH
40013: LD_INT 0
40015: PUSH
40016: EMPTY
40017: LIST
40018: LIST
40019: LIST
40020: LIST
40021: LIST
40022: LIST
40023: LIST
40024: PUSH
40025: EMPTY
40026: LIST
40027: LIST
40028: PPUSH
40029: CALL_OW 446
// end ;
40033: LD_VAR 0 2
40037: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
40038: LD_INT 0
40040: PPUSH
40041: PPUSH
// if not driver or not IsInUnit ( driver ) then
40042: LD_VAR 0 1
40046: NOT
40047: PUSH
40048: LD_VAR 0 1
40052: PPUSH
40053: CALL_OW 310
40057: NOT
40058: OR
40059: IFFALSE 40063
// exit ;
40061: GO 40153
// vehicle := IsInUnit ( driver ) ;
40063: LD_ADDR_VAR 0 3
40067: PUSH
40068: LD_VAR 0 1
40072: PPUSH
40073: CALL_OW 310
40077: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
40078: LD_VAR 0 1
40082: PPUSH
40083: LD_STRING \
40085: PUSH
40086: LD_INT 0
40088: PUSH
40089: LD_INT 0
40091: PUSH
40092: LD_INT 0
40094: PUSH
40095: LD_INT 0
40097: PUSH
40098: LD_INT 0
40100: PUSH
40101: LD_INT 0
40103: PUSH
40104: EMPTY
40105: LIST
40106: LIST
40107: LIST
40108: LIST
40109: LIST
40110: LIST
40111: LIST
40112: PUSH
40113: LD_STRING E
40115: PUSH
40116: LD_INT 0
40118: PUSH
40119: LD_INT 0
40121: PUSH
40122: LD_VAR 0 3
40126: PUSH
40127: LD_INT 0
40129: PUSH
40130: LD_INT 0
40132: PUSH
40133: LD_INT 0
40135: PUSH
40136: EMPTY
40137: LIST
40138: LIST
40139: LIST
40140: LIST
40141: LIST
40142: LIST
40143: LIST
40144: PUSH
40145: EMPTY
40146: LIST
40147: LIST
40148: PPUSH
40149: CALL_OW 447
// end ;
40153: LD_VAR 0 2
40157: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
40158: LD_INT 0
40160: PPUSH
40161: PPUSH
40162: PPUSH
// tmp := [ ] ;
40163: LD_ADDR_VAR 0 5
40167: PUSH
40168: EMPTY
40169: ST_TO_ADDR
// for i in units do
40170: LD_ADDR_VAR 0 4
40174: PUSH
40175: LD_VAR 0 1
40179: PUSH
40180: FOR_IN
40181: IFFALSE 40219
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
40183: LD_ADDR_VAR 0 5
40187: PUSH
40188: LD_VAR 0 5
40192: PPUSH
40193: LD_VAR 0 5
40197: PUSH
40198: LD_INT 1
40200: PLUS
40201: PPUSH
40202: LD_VAR 0 4
40206: PPUSH
40207: CALL_OW 256
40211: PPUSH
40212: CALL_OW 2
40216: ST_TO_ADDR
40217: GO 40180
40219: POP
40220: POP
// if not tmp then
40221: LD_VAR 0 5
40225: NOT
40226: IFFALSE 40230
// exit ;
40228: GO 40278
// if asc then
40230: LD_VAR 0 2
40234: IFFALSE 40258
// result := SortListByListAsc ( units , tmp ) else
40236: LD_ADDR_VAR 0 3
40240: PUSH
40241: LD_VAR 0 1
40245: PPUSH
40246: LD_VAR 0 5
40250: PPUSH
40251: CALL_OW 76
40255: ST_TO_ADDR
40256: GO 40278
// result := SortListByListDesc ( units , tmp ) ;
40258: LD_ADDR_VAR 0 3
40262: PUSH
40263: LD_VAR 0 1
40267: PPUSH
40268: LD_VAR 0 5
40272: PPUSH
40273: CALL_OW 77
40277: ST_TO_ADDR
// end ;
40278: LD_VAR 0 3
40282: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
40283: LD_INT 0
40285: PPUSH
40286: PPUSH
// task := GetTaskList ( mech ) ;
40287: LD_ADDR_VAR 0 4
40291: PUSH
40292: LD_VAR 0 1
40296: PPUSH
40297: CALL_OW 437
40301: ST_TO_ADDR
// if not task then
40302: LD_VAR 0 4
40306: NOT
40307: IFFALSE 40311
// exit ;
40309: GO 40353
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
40311: LD_ADDR_VAR 0 3
40315: PUSH
40316: LD_VAR 0 4
40320: PUSH
40321: LD_INT 1
40323: ARRAY
40324: PUSH
40325: LD_INT 1
40327: ARRAY
40328: PUSH
40329: LD_STRING r
40331: EQUAL
40332: PUSH
40333: LD_VAR 0 4
40337: PUSH
40338: LD_INT 1
40340: ARRAY
40341: PUSH
40342: LD_INT 4
40344: ARRAY
40345: PUSH
40346: LD_VAR 0 2
40350: EQUAL
40351: AND
40352: ST_TO_ADDR
// end ;
40353: LD_VAR 0 3
40357: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
40358: LD_INT 0
40360: PPUSH
// SetDir ( unit , d ) ;
40361: LD_VAR 0 1
40365: PPUSH
40366: LD_VAR 0 4
40370: PPUSH
40371: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
40375: LD_VAR 0 1
40379: PPUSH
40380: LD_VAR 0 2
40384: PPUSH
40385: LD_VAR 0 3
40389: PPUSH
40390: LD_VAR 0 5
40394: PPUSH
40395: CALL_OW 48
// end ;
40399: LD_VAR 0 6
40403: RET
// export function ToNaturalNumber ( number ) ; begin
40404: LD_INT 0
40406: PPUSH
// result := number div 1 ;
40407: LD_ADDR_VAR 0 2
40411: PUSH
40412: LD_VAR 0 1
40416: PUSH
40417: LD_INT 1
40419: DIV
40420: ST_TO_ADDR
// if number < 0 then
40421: LD_VAR 0 1
40425: PUSH
40426: LD_INT 0
40428: LESS
40429: IFFALSE 40439
// result := 0 ;
40431: LD_ADDR_VAR 0 2
40435: PUSH
40436: LD_INT 0
40438: ST_TO_ADDR
// end ;
40439: LD_VAR 0 2
40443: RET
// export function SortByClass ( units , class ) ; var un ; begin
40444: LD_INT 0
40446: PPUSH
40447: PPUSH
// if not units or not class then
40448: LD_VAR 0 1
40452: NOT
40453: PUSH
40454: LD_VAR 0 2
40458: NOT
40459: OR
40460: IFFALSE 40464
// exit ;
40462: GO 40559
// result := [ ] ;
40464: LD_ADDR_VAR 0 3
40468: PUSH
40469: EMPTY
40470: ST_TO_ADDR
// for un in units do
40471: LD_ADDR_VAR 0 4
40475: PUSH
40476: LD_VAR 0 1
40480: PUSH
40481: FOR_IN
40482: IFFALSE 40557
// if GetClass ( un ) = class then
40484: LD_VAR 0 4
40488: PPUSH
40489: CALL_OW 257
40493: PUSH
40494: LD_VAR 0 2
40498: EQUAL
40499: IFFALSE 40526
// result := Insert ( result , 1 , un ) else
40501: LD_ADDR_VAR 0 3
40505: PUSH
40506: LD_VAR 0 3
40510: PPUSH
40511: LD_INT 1
40513: PPUSH
40514: LD_VAR 0 4
40518: PPUSH
40519: CALL_OW 2
40523: ST_TO_ADDR
40524: GO 40555
// result := Replace ( result , result + 1 , un ) ;
40526: LD_ADDR_VAR 0 3
40530: PUSH
40531: LD_VAR 0 3
40535: PPUSH
40536: LD_VAR 0 3
40540: PUSH
40541: LD_INT 1
40543: PLUS
40544: PPUSH
40545: LD_VAR 0 4
40549: PPUSH
40550: CALL_OW 1
40554: ST_TO_ADDR
40555: GO 40481
40557: POP
40558: POP
// end ;
40559: LD_VAR 0 3
40563: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
40564: LD_INT 0
40566: PPUSH
40567: PPUSH
40568: PPUSH
40569: PPUSH
40570: PPUSH
40571: PPUSH
40572: PPUSH
// result := [ ] ;
40573: LD_ADDR_VAR 0 4
40577: PUSH
40578: EMPTY
40579: ST_TO_ADDR
// if x - r < 0 then
40580: LD_VAR 0 1
40584: PUSH
40585: LD_VAR 0 3
40589: MINUS
40590: PUSH
40591: LD_INT 0
40593: LESS
40594: IFFALSE 40606
// min_x := 0 else
40596: LD_ADDR_VAR 0 8
40600: PUSH
40601: LD_INT 0
40603: ST_TO_ADDR
40604: GO 40622
// min_x := x - r ;
40606: LD_ADDR_VAR 0 8
40610: PUSH
40611: LD_VAR 0 1
40615: PUSH
40616: LD_VAR 0 3
40620: MINUS
40621: ST_TO_ADDR
// if y - r < 0 then
40622: LD_VAR 0 2
40626: PUSH
40627: LD_VAR 0 3
40631: MINUS
40632: PUSH
40633: LD_INT 0
40635: LESS
40636: IFFALSE 40648
// min_y := 0 else
40638: LD_ADDR_VAR 0 7
40642: PUSH
40643: LD_INT 0
40645: ST_TO_ADDR
40646: GO 40664
// min_y := y - r ;
40648: LD_ADDR_VAR 0 7
40652: PUSH
40653: LD_VAR 0 2
40657: PUSH
40658: LD_VAR 0 3
40662: MINUS
40663: ST_TO_ADDR
// max_x := x + r ;
40664: LD_ADDR_VAR 0 9
40668: PUSH
40669: LD_VAR 0 1
40673: PUSH
40674: LD_VAR 0 3
40678: PLUS
40679: ST_TO_ADDR
// max_y := y + r ;
40680: LD_ADDR_VAR 0 10
40684: PUSH
40685: LD_VAR 0 2
40689: PUSH
40690: LD_VAR 0 3
40694: PLUS
40695: ST_TO_ADDR
// for _x = min_x to max_x do
40696: LD_ADDR_VAR 0 5
40700: PUSH
40701: DOUBLE
40702: LD_VAR 0 8
40706: DEC
40707: ST_TO_ADDR
40708: LD_VAR 0 9
40712: PUSH
40713: FOR_TO
40714: IFFALSE 40815
// for _y = min_y to max_y do
40716: LD_ADDR_VAR 0 6
40720: PUSH
40721: DOUBLE
40722: LD_VAR 0 7
40726: DEC
40727: ST_TO_ADDR
40728: LD_VAR 0 10
40732: PUSH
40733: FOR_TO
40734: IFFALSE 40811
// begin if not ValidHex ( _x , _y ) then
40736: LD_VAR 0 5
40740: PPUSH
40741: LD_VAR 0 6
40745: PPUSH
40746: CALL_OW 488
40750: NOT
40751: IFFALSE 40755
// continue ;
40753: GO 40733
// if GetResourceTypeXY ( _x , _y ) then
40755: LD_VAR 0 5
40759: PPUSH
40760: LD_VAR 0 6
40764: PPUSH
40765: CALL_OW 283
40769: IFFALSE 40809
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
40771: LD_ADDR_VAR 0 4
40775: PUSH
40776: LD_VAR 0 4
40780: PPUSH
40781: LD_VAR 0 4
40785: PUSH
40786: LD_INT 1
40788: PLUS
40789: PPUSH
40790: LD_VAR 0 5
40794: PUSH
40795: LD_VAR 0 6
40799: PUSH
40800: EMPTY
40801: LIST
40802: LIST
40803: PPUSH
40804: CALL_OW 1
40808: ST_TO_ADDR
// end ;
40809: GO 40733
40811: POP
40812: POP
40813: GO 40713
40815: POP
40816: POP
// end ;
40817: LD_VAR 0 4
40821: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
40822: LD_INT 0
40824: PPUSH
40825: PPUSH
40826: PPUSH
40827: PPUSH
40828: PPUSH
40829: PPUSH
40830: PPUSH
40831: PPUSH
// if not units then
40832: LD_VAR 0 1
40836: NOT
40837: IFFALSE 40841
// exit ;
40839: GO 41365
// result := UnitFilter ( units , [ f_ok ] ) ;
40841: LD_ADDR_VAR 0 3
40845: PUSH
40846: LD_VAR 0 1
40850: PPUSH
40851: LD_INT 50
40853: PUSH
40854: EMPTY
40855: LIST
40856: PPUSH
40857: CALL_OW 72
40861: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
40862: LD_ADDR_VAR 0 8
40866: PUSH
40867: LD_VAR 0 1
40871: PUSH
40872: LD_INT 1
40874: ARRAY
40875: PPUSH
40876: CALL_OW 255
40880: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
40881: LD_ADDR_VAR 0 10
40885: PUSH
40886: LD_INT 29
40888: PUSH
40889: LD_INT 91
40891: PUSH
40892: LD_INT 49
40894: PUSH
40895: EMPTY
40896: LIST
40897: LIST
40898: LIST
40899: ST_TO_ADDR
// if not result then
40900: LD_VAR 0 3
40904: NOT
40905: IFFALSE 40909
// exit ;
40907: GO 41365
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
40909: LD_ADDR_VAR 0 5
40913: PUSH
40914: LD_INT 81
40916: PUSH
40917: LD_VAR 0 8
40921: PUSH
40922: EMPTY
40923: LIST
40924: LIST
40925: PPUSH
40926: CALL_OW 69
40930: ST_TO_ADDR
// for i in result do
40931: LD_ADDR_VAR 0 4
40935: PUSH
40936: LD_VAR 0 3
40940: PUSH
40941: FOR_IN
40942: IFFALSE 41363
// begin tag := GetTag ( i ) + 1 ;
40944: LD_ADDR_VAR 0 9
40948: PUSH
40949: LD_VAR 0 4
40953: PPUSH
40954: CALL_OW 110
40958: PUSH
40959: LD_INT 1
40961: PLUS
40962: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
40963: LD_ADDR_VAR 0 7
40967: PUSH
40968: LD_VAR 0 4
40972: PPUSH
40973: CALL_OW 250
40977: PPUSH
40978: LD_VAR 0 4
40982: PPUSH
40983: CALL_OW 251
40987: PPUSH
40988: LD_INT 6
40990: PPUSH
40991: CALL 40564 0 3
40995: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
40996: LD_VAR 0 4
41000: PPUSH
41001: CALL_OW 247
41005: PUSH
41006: LD_INT 2
41008: EQUAL
41009: PUSH
41010: LD_VAR 0 7
41014: AND
41015: PUSH
41016: LD_VAR 0 4
41020: PPUSH
41021: CALL_OW 264
41025: PUSH
41026: LD_VAR 0 10
41030: IN
41031: NOT
41032: AND
41033: IFFALSE 41072
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
41035: LD_VAR 0 4
41039: PPUSH
41040: LD_VAR 0 7
41044: PUSH
41045: LD_INT 1
41047: ARRAY
41048: PUSH
41049: LD_INT 1
41051: ARRAY
41052: PPUSH
41053: LD_VAR 0 7
41057: PUSH
41058: LD_INT 1
41060: ARRAY
41061: PUSH
41062: LD_INT 2
41064: ARRAY
41065: PPUSH
41066: CALL_OW 116
41070: GO 41361
// if path > tag then
41072: LD_VAR 0 2
41076: PUSH
41077: LD_VAR 0 9
41081: GREATER
41082: IFFALSE 41290
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
41084: LD_ADDR_VAR 0 6
41088: PUSH
41089: LD_VAR 0 5
41093: PPUSH
41094: LD_INT 91
41096: PUSH
41097: LD_VAR 0 4
41101: PUSH
41102: LD_INT 8
41104: PUSH
41105: EMPTY
41106: LIST
41107: LIST
41108: LIST
41109: PPUSH
41110: CALL_OW 72
41114: ST_TO_ADDR
// if nearEnemy then
41115: LD_VAR 0 6
41119: IFFALSE 41188
// begin if GetWeapon ( i ) = ru_time_lapser then
41121: LD_VAR 0 4
41125: PPUSH
41126: CALL_OW 264
41130: PUSH
41131: LD_INT 49
41133: EQUAL
41134: IFFALSE 41162
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
41136: LD_VAR 0 4
41140: PPUSH
41141: LD_VAR 0 6
41145: PPUSH
41146: LD_VAR 0 4
41150: PPUSH
41151: CALL_OW 74
41155: PPUSH
41156: CALL_OW 112
41160: GO 41186
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
41162: LD_VAR 0 4
41166: PPUSH
41167: LD_VAR 0 6
41171: PPUSH
41172: LD_VAR 0 4
41176: PPUSH
41177: CALL_OW 74
41181: PPUSH
41182: CALL 42290 0 2
// end else
41186: GO 41288
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
41188: LD_VAR 0 4
41192: PPUSH
41193: LD_VAR 0 2
41197: PUSH
41198: LD_VAR 0 9
41202: ARRAY
41203: PUSH
41204: LD_INT 1
41206: ARRAY
41207: PPUSH
41208: LD_VAR 0 2
41212: PUSH
41213: LD_VAR 0 9
41217: ARRAY
41218: PUSH
41219: LD_INT 2
41221: ARRAY
41222: PPUSH
41223: CALL_OW 297
41227: PUSH
41228: LD_INT 6
41230: GREATER
41231: IFFALSE 41274
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
41233: LD_VAR 0 4
41237: PPUSH
41238: LD_VAR 0 2
41242: PUSH
41243: LD_VAR 0 9
41247: ARRAY
41248: PUSH
41249: LD_INT 1
41251: ARRAY
41252: PPUSH
41253: LD_VAR 0 2
41257: PUSH
41258: LD_VAR 0 9
41262: ARRAY
41263: PUSH
41264: LD_INT 2
41266: ARRAY
41267: PPUSH
41268: CALL_OW 114
41272: GO 41288
// SetTag ( i , tag ) ;
41274: LD_VAR 0 4
41278: PPUSH
41279: LD_VAR 0 9
41283: PPUSH
41284: CALL_OW 109
// end else
41288: GO 41361
// if enemy then
41290: LD_VAR 0 5
41294: IFFALSE 41361
// begin if GetWeapon ( i ) = ru_time_lapser then
41296: LD_VAR 0 4
41300: PPUSH
41301: CALL_OW 264
41305: PUSH
41306: LD_INT 49
41308: EQUAL
41309: IFFALSE 41337
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
41311: LD_VAR 0 4
41315: PPUSH
41316: LD_VAR 0 5
41320: PPUSH
41321: LD_VAR 0 4
41325: PPUSH
41326: CALL_OW 74
41330: PPUSH
41331: CALL_OW 112
41335: GO 41361
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
41337: LD_VAR 0 4
41341: PPUSH
41342: LD_VAR 0 5
41346: PPUSH
41347: LD_VAR 0 4
41351: PPUSH
41352: CALL_OW 74
41356: PPUSH
41357: CALL 42290 0 2
// end ; end ;
41361: GO 40941
41363: POP
41364: POP
// end ;
41365: LD_VAR 0 3
41369: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
41370: LD_INT 0
41372: PPUSH
41373: PPUSH
41374: PPUSH
// if not unit or IsInUnit ( unit ) then
41375: LD_VAR 0 1
41379: NOT
41380: PUSH
41381: LD_VAR 0 1
41385: PPUSH
41386: CALL_OW 310
41390: OR
41391: IFFALSE 41395
// exit ;
41393: GO 41486
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
41395: LD_ADDR_VAR 0 4
41399: PUSH
41400: LD_VAR 0 1
41404: PPUSH
41405: CALL_OW 250
41409: PPUSH
41410: LD_VAR 0 2
41414: PPUSH
41415: LD_INT 1
41417: PPUSH
41418: CALL_OW 272
41422: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
41423: LD_ADDR_VAR 0 5
41427: PUSH
41428: LD_VAR 0 1
41432: PPUSH
41433: CALL_OW 251
41437: PPUSH
41438: LD_VAR 0 2
41442: PPUSH
41443: LD_INT 1
41445: PPUSH
41446: CALL_OW 273
41450: ST_TO_ADDR
// if ValidHex ( x , y ) then
41451: LD_VAR 0 4
41455: PPUSH
41456: LD_VAR 0 5
41460: PPUSH
41461: CALL_OW 488
41465: IFFALSE 41486
// ComTurnXY ( unit , x , y ) ;
41467: LD_VAR 0 1
41471: PPUSH
41472: LD_VAR 0 4
41476: PPUSH
41477: LD_VAR 0 5
41481: PPUSH
41482: CALL_OW 118
// end ;
41486: LD_VAR 0 3
41490: RET
// export function SeeUnits ( side , units ) ; var i ; begin
41491: LD_INT 0
41493: PPUSH
41494: PPUSH
// result := false ;
41495: LD_ADDR_VAR 0 3
41499: PUSH
41500: LD_INT 0
41502: ST_TO_ADDR
// if not units then
41503: LD_VAR 0 2
41507: NOT
41508: IFFALSE 41512
// exit ;
41510: GO 41557
// for i in units do
41512: LD_ADDR_VAR 0 4
41516: PUSH
41517: LD_VAR 0 2
41521: PUSH
41522: FOR_IN
41523: IFFALSE 41555
// if See ( side , i ) then
41525: LD_VAR 0 1
41529: PPUSH
41530: LD_VAR 0 4
41534: PPUSH
41535: CALL_OW 292
41539: IFFALSE 41553
// begin result := true ;
41541: LD_ADDR_VAR 0 3
41545: PUSH
41546: LD_INT 1
41548: ST_TO_ADDR
// exit ;
41549: POP
41550: POP
41551: GO 41557
// end ;
41553: GO 41522
41555: POP
41556: POP
// end ;
41557: LD_VAR 0 3
41561: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
41562: LD_INT 0
41564: PPUSH
41565: PPUSH
41566: PPUSH
41567: PPUSH
// if not unit or not points then
41568: LD_VAR 0 1
41572: NOT
41573: PUSH
41574: LD_VAR 0 2
41578: NOT
41579: OR
41580: IFFALSE 41584
// exit ;
41582: GO 41674
// dist := 99999 ;
41584: LD_ADDR_VAR 0 5
41588: PUSH
41589: LD_INT 99999
41591: ST_TO_ADDR
// for i in points do
41592: LD_ADDR_VAR 0 4
41596: PUSH
41597: LD_VAR 0 2
41601: PUSH
41602: FOR_IN
41603: IFFALSE 41672
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
41605: LD_ADDR_VAR 0 6
41609: PUSH
41610: LD_VAR 0 1
41614: PPUSH
41615: LD_VAR 0 4
41619: PUSH
41620: LD_INT 1
41622: ARRAY
41623: PPUSH
41624: LD_VAR 0 4
41628: PUSH
41629: LD_INT 2
41631: ARRAY
41632: PPUSH
41633: CALL_OW 297
41637: ST_TO_ADDR
// if tmpDist < dist then
41638: LD_VAR 0 6
41642: PUSH
41643: LD_VAR 0 5
41647: LESS
41648: IFFALSE 41670
// begin result := i ;
41650: LD_ADDR_VAR 0 3
41654: PUSH
41655: LD_VAR 0 4
41659: ST_TO_ADDR
// dist := tmpDist ;
41660: LD_ADDR_VAR 0 5
41664: PUSH
41665: LD_VAR 0 6
41669: ST_TO_ADDR
// end ; end ;
41670: GO 41602
41672: POP
41673: POP
// end ;
41674: LD_VAR 0 3
41678: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
41679: LD_INT 0
41681: PPUSH
// uc_side := side ;
41682: LD_ADDR_OWVAR 20
41686: PUSH
41687: LD_VAR 0 1
41691: ST_TO_ADDR
// uc_nation := 3 ;
41692: LD_ADDR_OWVAR 21
41696: PUSH
41697: LD_INT 3
41699: ST_TO_ADDR
// vc_chassis := 25 ;
41700: LD_ADDR_OWVAR 37
41704: PUSH
41705: LD_INT 25
41707: ST_TO_ADDR
// vc_engine := engine_siberite ;
41708: LD_ADDR_OWVAR 39
41712: PUSH
41713: LD_INT 3
41715: ST_TO_ADDR
// vc_control := control_computer ;
41716: LD_ADDR_OWVAR 38
41720: PUSH
41721: LD_INT 3
41723: ST_TO_ADDR
// vc_weapon := 59 ;
41724: LD_ADDR_OWVAR 40
41728: PUSH
41729: LD_INT 59
41731: ST_TO_ADDR
// result := CreateVehicle ;
41732: LD_ADDR_VAR 0 5
41736: PUSH
41737: CALL_OW 45
41741: ST_TO_ADDR
// SetDir ( result , d ) ;
41742: LD_VAR 0 5
41746: PPUSH
41747: LD_VAR 0 4
41751: PPUSH
41752: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
41756: LD_VAR 0 5
41760: PPUSH
41761: LD_VAR 0 2
41765: PPUSH
41766: LD_VAR 0 3
41770: PPUSH
41771: LD_INT 0
41773: PPUSH
41774: CALL_OW 48
// end ;
41778: LD_VAR 0 5
41782: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
41783: LD_INT 0
41785: PPUSH
41786: PPUSH
41787: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
41788: LD_ADDR_VAR 0 2
41792: PUSH
41793: LD_INT 0
41795: PUSH
41796: LD_INT 0
41798: PUSH
41799: LD_INT 0
41801: PUSH
41802: LD_INT 0
41804: PUSH
41805: EMPTY
41806: LIST
41807: LIST
41808: LIST
41809: LIST
41810: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
41811: LD_VAR 0 1
41815: NOT
41816: PUSH
41817: LD_VAR 0 1
41821: PPUSH
41822: CALL_OW 264
41826: PUSH
41827: LD_INT 12
41829: PUSH
41830: LD_INT 51
41832: PUSH
41833: LD_INT 32
41835: PUSH
41836: LD_INT 89
41838: PUSH
41839: EMPTY
41840: LIST
41841: LIST
41842: LIST
41843: LIST
41844: IN
41845: NOT
41846: OR
41847: IFFALSE 41851
// exit ;
41849: GO 41949
// for i := 1 to 3 do
41851: LD_ADDR_VAR 0 3
41855: PUSH
41856: DOUBLE
41857: LD_INT 1
41859: DEC
41860: ST_TO_ADDR
41861: LD_INT 3
41863: PUSH
41864: FOR_TO
41865: IFFALSE 41947
// begin tmp := GetCargo ( cargo , i ) ;
41867: LD_ADDR_VAR 0 4
41871: PUSH
41872: LD_VAR 0 1
41876: PPUSH
41877: LD_VAR 0 3
41881: PPUSH
41882: CALL_OW 289
41886: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
41887: LD_ADDR_VAR 0 2
41891: PUSH
41892: LD_VAR 0 2
41896: PPUSH
41897: LD_VAR 0 3
41901: PPUSH
41902: LD_VAR 0 4
41906: PPUSH
41907: CALL_OW 1
41911: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
41912: LD_ADDR_VAR 0 2
41916: PUSH
41917: LD_VAR 0 2
41921: PPUSH
41922: LD_INT 4
41924: PPUSH
41925: LD_VAR 0 2
41929: PUSH
41930: LD_INT 4
41932: ARRAY
41933: PUSH
41934: LD_VAR 0 4
41938: PLUS
41939: PPUSH
41940: CALL_OW 1
41944: ST_TO_ADDR
// end ;
41945: GO 41864
41947: POP
41948: POP
// end ;
41949: LD_VAR 0 2
41953: RET
// export function Length ( array ) ; begin
41954: LD_INT 0
41956: PPUSH
// result := array + 0 ;
41957: LD_ADDR_VAR 0 2
41961: PUSH
41962: LD_VAR 0 1
41966: PUSH
41967: LD_INT 0
41969: PLUS
41970: ST_TO_ADDR
// end ;
41971: LD_VAR 0 2
41975: RET
// export function PrepareArray ( array ) ; begin
41976: LD_INT 0
41978: PPUSH
// result := array diff 0 ;
41979: LD_ADDR_VAR 0 2
41983: PUSH
41984: LD_VAR 0 1
41988: PUSH
41989: LD_INT 0
41991: DIFF
41992: ST_TO_ADDR
// if not result [ 1 ] then
41993: LD_VAR 0 2
41997: PUSH
41998: LD_INT 1
42000: ARRAY
42001: NOT
42002: IFFALSE 42022
// result := Delete ( result , 1 ) ;
42004: LD_ADDR_VAR 0 2
42008: PUSH
42009: LD_VAR 0 2
42013: PPUSH
42014: LD_INT 1
42016: PPUSH
42017: CALL_OW 3
42021: ST_TO_ADDR
// end ;
42022: LD_VAR 0 2
42026: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
42027: LD_INT 0
42029: PPUSH
42030: PPUSH
42031: PPUSH
42032: PPUSH
// sibRocketRange := 25 ;
42033: LD_ADDR_VAR 0 6
42037: PUSH
42038: LD_INT 25
42040: ST_TO_ADDR
// result := false ;
42041: LD_ADDR_VAR 0 4
42045: PUSH
42046: LD_INT 0
42048: ST_TO_ADDR
// for i := 0 to 5 do
42049: LD_ADDR_VAR 0 5
42053: PUSH
42054: DOUBLE
42055: LD_INT 0
42057: DEC
42058: ST_TO_ADDR
42059: LD_INT 5
42061: PUSH
42062: FOR_TO
42063: IFFALSE 42130
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
42065: LD_VAR 0 1
42069: PPUSH
42070: LD_VAR 0 5
42074: PPUSH
42075: LD_VAR 0 6
42079: PPUSH
42080: CALL_OW 272
42084: PPUSH
42085: LD_VAR 0 2
42089: PPUSH
42090: LD_VAR 0 5
42094: PPUSH
42095: LD_VAR 0 6
42099: PPUSH
42100: CALL_OW 273
42104: PPUSH
42105: LD_VAR 0 3
42109: PPUSH
42110: CALL_OW 309
42114: IFFALSE 42128
// begin result := true ;
42116: LD_ADDR_VAR 0 4
42120: PUSH
42121: LD_INT 1
42123: ST_TO_ADDR
// exit ;
42124: POP
42125: POP
42126: GO 42132
// end ;
42128: GO 42062
42130: POP
42131: POP
// end ;
42132: LD_VAR 0 4
42136: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
42137: LD_INT 0
42139: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
42140: LD_VAR 0 1
42144: PPUSH
42145: LD_VAR 0 2
42149: PPUSH
42150: LD_INT 0
42152: PPUSH
42153: LD_INT 0
42155: PPUSH
42156: LD_INT 1
42158: PPUSH
42159: LD_INT 0
42161: PPUSH
42162: CALL_OW 587
// end ;
42166: LD_VAR 0 3
42170: RET
// export function CenterOnNow ( unit ) ; begin
42171: LD_INT 0
42173: PPUSH
// result := IsInUnit ( unit ) ;
42174: LD_ADDR_VAR 0 2
42178: PUSH
42179: LD_VAR 0 1
42183: PPUSH
42184: CALL_OW 310
42188: ST_TO_ADDR
// if not result then
42189: LD_VAR 0 2
42193: NOT
42194: IFFALSE 42206
// result := unit ;
42196: LD_ADDR_VAR 0 2
42200: PUSH
42201: LD_VAR 0 1
42205: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
42206: LD_VAR 0 1
42210: PPUSH
42211: CALL_OW 87
// end ;
42215: LD_VAR 0 2
42219: RET
// export function ComMoveHex ( unit , hex ) ; begin
42220: LD_INT 0
42222: PPUSH
// if not hex then
42223: LD_VAR 0 2
42227: NOT
42228: IFFALSE 42232
// exit ;
42230: GO 42285
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
42232: LD_VAR 0 2
42236: PUSH
42237: LD_INT 1
42239: ARRAY
42240: PPUSH
42241: LD_VAR 0 2
42245: PUSH
42246: LD_INT 2
42248: ARRAY
42249: PPUSH
42250: CALL_OW 428
42254: IFFALSE 42258
// exit ;
42256: GO 42285
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
42258: LD_VAR 0 1
42262: PPUSH
42263: LD_VAR 0 2
42267: PUSH
42268: LD_INT 1
42270: ARRAY
42271: PPUSH
42272: LD_VAR 0 2
42276: PUSH
42277: LD_INT 2
42279: ARRAY
42280: PPUSH
42281: CALL_OW 111
// end ;
42285: LD_VAR 0 3
42289: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
42290: LD_INT 0
42292: PPUSH
42293: PPUSH
42294: PPUSH
// if not unit or not enemy then
42295: LD_VAR 0 1
42299: NOT
42300: PUSH
42301: LD_VAR 0 2
42305: NOT
42306: OR
42307: IFFALSE 42311
// exit ;
42309: GO 42435
// x := GetX ( enemy ) ;
42311: LD_ADDR_VAR 0 4
42315: PUSH
42316: LD_VAR 0 2
42320: PPUSH
42321: CALL_OW 250
42325: ST_TO_ADDR
// y := GetY ( enemy ) ;
42326: LD_ADDR_VAR 0 5
42330: PUSH
42331: LD_VAR 0 2
42335: PPUSH
42336: CALL_OW 251
42340: ST_TO_ADDR
// if ValidHex ( x , y ) then
42341: LD_VAR 0 4
42345: PPUSH
42346: LD_VAR 0 5
42350: PPUSH
42351: CALL_OW 488
42355: IFFALSE 42435
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] and See ( GetSide ( unit ) , enemy ) then
42357: LD_VAR 0 2
42361: PPUSH
42362: CALL_OW 247
42366: PUSH
42367: LD_INT 3
42369: PUSH
42370: LD_INT 2
42372: PUSH
42373: EMPTY
42374: LIST
42375: LIST
42376: IN
42377: PUSH
42378: LD_VAR 0 1
42382: PPUSH
42383: CALL_OW 255
42387: PPUSH
42388: LD_VAR 0 2
42392: PPUSH
42393: CALL_OW 292
42397: AND
42398: IFFALSE 42416
// ComAttackUnit ( unit , enemy ) else
42400: LD_VAR 0 1
42404: PPUSH
42405: LD_VAR 0 2
42409: PPUSH
42410: CALL_OW 115
42414: GO 42435
// ComAgressiveMove ( unit , x , y ) ;
42416: LD_VAR 0 1
42420: PPUSH
42421: LD_VAR 0 4
42425: PPUSH
42426: LD_VAR 0 5
42430: PPUSH
42431: CALL_OW 114
// end ; end_of_file
42435: LD_VAR 0 3
42439: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
42440: LD_VAR 0 1
42444: PPUSH
42445: LD_VAR 0 2
42449: PPUSH
42450: LD_VAR 0 3
42454: PPUSH
42455: LD_VAR 0 4
42459: PPUSH
42460: LD_VAR 0 5
42464: PPUSH
42465: LD_VAR 0 6
42469: PPUSH
42470: CALL 47545 0 6
// end ;
42474: PPOPN 6
42476: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
42477: LD_INT 0
42479: PPUSH
// begin if not units then
42480: LD_VAR 0 1
42484: NOT
42485: IFFALSE 42489
// exit ;
42487: GO 42489
// end ;
42489: PPOPN 7
42491: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
42492: CALL 47449 0 0
// end ; end_of_file
42496: PPOPN 1
42498: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
42499: LD_VAR 0 1
42503: PUSH
42504: LD_INT 200
42506: DOUBLE
42507: GREATEREQUAL
42508: IFFALSE 42516
42510: LD_INT 299
42512: DOUBLE
42513: LESSEQUAL
42514: IFTRUE 42518
42516: GO 42550
42518: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
42519: LD_VAR 0 1
42523: PPUSH
42524: LD_VAR 0 2
42528: PPUSH
42529: LD_VAR 0 3
42533: PPUSH
42534: LD_VAR 0 4
42538: PPUSH
42539: LD_VAR 0 5
42543: PPUSH
42544: CALL 43038 0 5
42548: GO 42627
42550: LD_INT 300
42552: DOUBLE
42553: GREATEREQUAL
42554: IFFALSE 42562
42556: LD_INT 399
42558: DOUBLE
42559: LESSEQUAL
42560: IFTRUE 42564
42562: GO 42626
42564: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
42565: LD_VAR 0 1
42569: PPUSH
42570: LD_VAR 0 2
42574: PPUSH
42575: LD_VAR 0 3
42579: PPUSH
42580: LD_VAR 0 4
42584: PPUSH
42585: LD_VAR 0 5
42589: PPUSH
42590: LD_VAR 0 6
42594: PPUSH
42595: LD_VAR 0 7
42599: PPUSH
42600: LD_VAR 0 8
42604: PPUSH
42605: LD_VAR 0 9
42609: PPUSH
42610: LD_VAR 0 10
42614: PPUSH
42615: LD_VAR 0 11
42619: PPUSH
42620: CALL 59893 0 11
42624: GO 42627
42626: POP
// end ;
42627: PPOPN 11
42629: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
42630: LD_VAR 0 1
42634: PPUSH
42635: LD_VAR 0 2
42639: PPUSH
42640: LD_VAR 0 3
42644: PPUSH
42645: LD_VAR 0 4
42649: PPUSH
42650: LD_VAR 0 5
42654: PPUSH
42655: CALL 42774 0 5
// end ; end_of_file
42659: PPOPN 5
42661: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
42662: LD_INT 0
42664: PPUSH
42665: PPUSH
42666: PPUSH
42667: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
42668: LD_VAR 0 1
42672: PPUSH
42673: CALL_OW 264
42677: PUSH
42678: LD_INT 91
42680: EQUAL
42681: IFFALSE 42753
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
42683: LD_INT 68
42685: PPUSH
42686: LD_VAR 0 1
42690: PPUSH
42691: CALL_OW 255
42695: PPUSH
42696: CALL_OW 321
42700: PUSH
42701: LD_INT 2
42703: EQUAL
42704: IFFALSE 42716
// eff := 70 else
42706: LD_ADDR_VAR 0 4
42710: PUSH
42711: LD_INT 70
42713: ST_TO_ADDR
42714: GO 42724
// eff := 30 ;
42716: LD_ADDR_VAR 0 4
42720: PUSH
42721: LD_INT 30
42723: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
42724: LD_VAR 0 1
42728: PPUSH
42729: CALL_OW 250
42733: PPUSH
42734: LD_VAR 0 1
42738: PPUSH
42739: CALL_OW 251
42743: PPUSH
42744: LD_VAR 0 4
42748: PPUSH
42749: CALL_OW 495
// end ; end ;
42753: LD_VAR 0 2
42757: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
42758: LD_INT 0
42760: PPUSH
// end ;
42761: LD_VAR 0 4
42765: RET
// export function SOS_Command ( cmd ) ; begin
42766: LD_INT 0
42768: PPUSH
// end ;
42769: LD_VAR 0 2
42773: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
42774: LD_INT 0
42776: PPUSH
// end ;
42777: LD_VAR 0 6
42781: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
42782: LD_INT 0
42784: PPUSH
42785: PPUSH
// if not vehicle or not factory then
42786: LD_VAR 0 1
42790: NOT
42791: PUSH
42792: LD_VAR 0 2
42796: NOT
42797: OR
42798: IFFALSE 42802
// exit ;
42800: GO 43033
// if factoryWaypoints >= factory then
42802: LD_EXP 71
42806: PUSH
42807: LD_VAR 0 2
42811: GREATEREQUAL
42812: IFFALSE 43033
// if factoryWaypoints [ factory ] then
42814: LD_EXP 71
42818: PUSH
42819: LD_VAR 0 2
42823: ARRAY
42824: IFFALSE 43033
// begin if GetControl ( vehicle ) = control_manual then
42826: LD_VAR 0 1
42830: PPUSH
42831: CALL_OW 263
42835: PUSH
42836: LD_INT 1
42838: EQUAL
42839: IFFALSE 42920
// begin driver := IsDrivenBy ( vehicle ) ;
42841: LD_ADDR_VAR 0 4
42845: PUSH
42846: LD_VAR 0 1
42850: PPUSH
42851: CALL_OW 311
42855: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
42856: LD_VAR 0 4
42860: PPUSH
42861: LD_EXP 71
42865: PUSH
42866: LD_VAR 0 2
42870: ARRAY
42871: PUSH
42872: LD_INT 3
42874: ARRAY
42875: PPUSH
42876: LD_EXP 71
42880: PUSH
42881: LD_VAR 0 2
42885: ARRAY
42886: PUSH
42887: LD_INT 4
42889: ARRAY
42890: PPUSH
42891: CALL_OW 171
// AddComExitVehicle ( driver ) ;
42895: LD_VAR 0 4
42899: PPUSH
42900: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
42904: LD_VAR 0 4
42908: PPUSH
42909: LD_VAR 0 2
42913: PPUSH
42914: CALL_OW 180
// end else
42918: GO 43033
// if GetControl ( vehicle ) = control_remote then
42920: LD_VAR 0 1
42924: PPUSH
42925: CALL_OW 263
42929: PUSH
42930: LD_INT 2
42932: EQUAL
42933: IFFALSE 42994
// begin wait ( 0 0$2 ) ;
42935: LD_INT 70
42937: PPUSH
42938: CALL_OW 67
// if Connect ( vehicle ) then
42942: LD_VAR 0 1
42946: PPUSH
42947: CALL 8824 0 1
42951: IFFALSE 42992
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
42953: LD_VAR 0 1
42957: PPUSH
42958: LD_EXP 71
42962: PUSH
42963: LD_VAR 0 2
42967: ARRAY
42968: PUSH
42969: LD_INT 3
42971: ARRAY
42972: PPUSH
42973: LD_EXP 71
42977: PUSH
42978: LD_VAR 0 2
42982: ARRAY
42983: PUSH
42984: LD_INT 4
42986: ARRAY
42987: PPUSH
42988: CALL_OW 171
// end else
42992: GO 43033
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
42994: LD_VAR 0 1
42998: PPUSH
42999: LD_EXP 71
43003: PUSH
43004: LD_VAR 0 2
43008: ARRAY
43009: PUSH
43010: LD_INT 3
43012: ARRAY
43013: PPUSH
43014: LD_EXP 71
43018: PUSH
43019: LD_VAR 0 2
43023: ARRAY
43024: PUSH
43025: LD_INT 4
43027: ARRAY
43028: PPUSH
43029: CALL_OW 171
// end ; end ;
43033: LD_VAR 0 3
43037: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
43038: LD_INT 0
43040: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
43041: LD_VAR 0 1
43045: PUSH
43046: LD_INT 250
43048: EQUAL
43049: PUSH
43050: LD_VAR 0 2
43054: PPUSH
43055: CALL_OW 264
43059: PUSH
43060: LD_INT 81
43062: EQUAL
43063: AND
43064: IFFALSE 43085
// MinerPlaceMine ( unit , x , y ) ;
43066: LD_VAR 0 2
43070: PPUSH
43071: LD_VAR 0 4
43075: PPUSH
43076: LD_VAR 0 5
43080: PPUSH
43081: CALL 45909 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
43085: LD_VAR 0 1
43089: PUSH
43090: LD_INT 251
43092: EQUAL
43093: PUSH
43094: LD_VAR 0 2
43098: PPUSH
43099: CALL_OW 264
43103: PUSH
43104: LD_INT 81
43106: EQUAL
43107: AND
43108: IFFALSE 43129
// MinerDetonateMine ( unit , x , y ) ;
43110: LD_VAR 0 2
43114: PPUSH
43115: LD_VAR 0 4
43119: PPUSH
43120: LD_VAR 0 5
43124: PPUSH
43125: CALL 46184 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
43129: LD_VAR 0 1
43133: PUSH
43134: LD_INT 252
43136: EQUAL
43137: PUSH
43138: LD_VAR 0 2
43142: PPUSH
43143: CALL_OW 264
43147: PUSH
43148: LD_INT 81
43150: EQUAL
43151: AND
43152: IFFALSE 43173
// MinerCreateMinefield ( unit , x , y ) ;
43154: LD_VAR 0 2
43158: PPUSH
43159: LD_VAR 0 4
43163: PPUSH
43164: LD_VAR 0 5
43168: PPUSH
43169: CALL 46601 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
43173: LD_VAR 0 1
43177: PUSH
43178: LD_INT 253
43180: EQUAL
43181: PUSH
43182: LD_VAR 0 2
43186: PPUSH
43187: CALL_OW 257
43191: PUSH
43192: LD_INT 5
43194: EQUAL
43195: AND
43196: IFFALSE 43217
// ComBinocular ( unit , x , y ) ;
43198: LD_VAR 0 2
43202: PPUSH
43203: LD_VAR 0 4
43207: PPUSH
43208: LD_VAR 0 5
43212: PPUSH
43213: CALL 46970 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
43217: LD_VAR 0 1
43221: PUSH
43222: LD_INT 254
43224: EQUAL
43225: PUSH
43226: LD_VAR 0 2
43230: PPUSH
43231: CALL_OW 264
43235: PUSH
43236: LD_INT 99
43238: EQUAL
43239: AND
43240: PUSH
43241: LD_VAR 0 3
43245: PPUSH
43246: CALL_OW 263
43250: PUSH
43251: LD_INT 3
43253: EQUAL
43254: AND
43255: IFFALSE 43271
// HackDestroyVehicle ( unit , selectedUnit ) ;
43257: LD_VAR 0 2
43261: PPUSH
43262: LD_VAR 0 3
43266: PPUSH
43267: CALL 45273 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
43271: LD_VAR 0 1
43275: PUSH
43276: LD_INT 255
43278: EQUAL
43279: PUSH
43280: LD_VAR 0 2
43284: PPUSH
43285: CALL_OW 264
43289: PUSH
43290: LD_INT 14
43292: PUSH
43293: LD_INT 53
43295: PUSH
43296: EMPTY
43297: LIST
43298: LIST
43299: IN
43300: AND
43301: PUSH
43302: LD_VAR 0 4
43306: PPUSH
43307: LD_VAR 0 5
43311: PPUSH
43312: CALL_OW 488
43316: AND
43317: IFFALSE 43341
// CutTreeXYR ( unit , x , y , 12 ) ;
43319: LD_VAR 0 2
43323: PPUSH
43324: LD_VAR 0 4
43328: PPUSH
43329: LD_VAR 0 5
43333: PPUSH
43334: LD_INT 12
43336: PPUSH
43337: CALL 43436 0 4
// if cmd = 256 then
43341: LD_VAR 0 1
43345: PUSH
43346: LD_INT 256
43348: EQUAL
43349: IFFALSE 43370
// SetFactoryWaypoint ( unit , x , y ) ;
43351: LD_VAR 0 2
43355: PPUSH
43356: LD_VAR 0 4
43360: PPUSH
43361: LD_VAR 0 5
43365: PPUSH
43366: CALL 61881 0 3
// if cmd = 257 then
43370: LD_VAR 0 1
43374: PUSH
43375: LD_INT 257
43377: EQUAL
43378: IFFALSE 43399
// SetWarehouseGatheringPoint ( unit , x , y ) ;
43380: LD_VAR 0 2
43384: PPUSH
43385: LD_VAR 0 4
43389: PPUSH
43390: LD_VAR 0 5
43394: PPUSH
43395: CALL 62243 0 3
// if cmd = 258 then
43399: LD_VAR 0 1
43403: PUSH
43404: LD_INT 258
43406: EQUAL
43407: IFFALSE 43431
// BurnTreeXYR ( unit , x , y , 8 ) ;
43409: LD_VAR 0 2
43413: PPUSH
43414: LD_VAR 0 4
43418: PPUSH
43419: LD_VAR 0 5
43423: PPUSH
43424: LD_INT 8
43426: PPUSH
43427: CALL 43830 0 4
// end ;
43431: LD_VAR 0 6
43435: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
43436: LD_INT 0
43438: PPUSH
43439: PPUSH
43440: PPUSH
43441: PPUSH
43442: PPUSH
43443: PPUSH
43444: PPUSH
43445: PPUSH
43446: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
43447: LD_VAR 0 1
43451: PPUSH
43452: CALL_OW 302
43456: NOT
43457: PUSH
43458: LD_VAR 0 2
43462: PPUSH
43463: LD_VAR 0 3
43467: PPUSH
43468: CALL_OW 488
43472: NOT
43473: OR
43474: PUSH
43475: LD_VAR 0 4
43479: NOT
43480: OR
43481: IFFALSE 43485
// exit ;
43483: GO 43825
// list := [ ] ;
43485: LD_ADDR_VAR 0 13
43489: PUSH
43490: EMPTY
43491: ST_TO_ADDR
// if x - r < 0 then
43492: LD_VAR 0 2
43496: PUSH
43497: LD_VAR 0 4
43501: MINUS
43502: PUSH
43503: LD_INT 0
43505: LESS
43506: IFFALSE 43518
// min_x := 0 else
43508: LD_ADDR_VAR 0 7
43512: PUSH
43513: LD_INT 0
43515: ST_TO_ADDR
43516: GO 43534
// min_x := x - r ;
43518: LD_ADDR_VAR 0 7
43522: PUSH
43523: LD_VAR 0 2
43527: PUSH
43528: LD_VAR 0 4
43532: MINUS
43533: ST_TO_ADDR
// if y - r < 0 then
43534: LD_VAR 0 3
43538: PUSH
43539: LD_VAR 0 4
43543: MINUS
43544: PUSH
43545: LD_INT 0
43547: LESS
43548: IFFALSE 43560
// min_y := 0 else
43550: LD_ADDR_VAR 0 8
43554: PUSH
43555: LD_INT 0
43557: ST_TO_ADDR
43558: GO 43576
// min_y := y - r ;
43560: LD_ADDR_VAR 0 8
43564: PUSH
43565: LD_VAR 0 3
43569: PUSH
43570: LD_VAR 0 4
43574: MINUS
43575: ST_TO_ADDR
// max_x := x + r ;
43576: LD_ADDR_VAR 0 9
43580: PUSH
43581: LD_VAR 0 2
43585: PUSH
43586: LD_VAR 0 4
43590: PLUS
43591: ST_TO_ADDR
// max_y := y + r ;
43592: LD_ADDR_VAR 0 10
43596: PUSH
43597: LD_VAR 0 3
43601: PUSH
43602: LD_VAR 0 4
43606: PLUS
43607: ST_TO_ADDR
// for _x = min_x to max_x do
43608: LD_ADDR_VAR 0 11
43612: PUSH
43613: DOUBLE
43614: LD_VAR 0 7
43618: DEC
43619: ST_TO_ADDR
43620: LD_VAR 0 9
43624: PUSH
43625: FOR_TO
43626: IFFALSE 43743
// for _y = min_y to max_y do
43628: LD_ADDR_VAR 0 12
43632: PUSH
43633: DOUBLE
43634: LD_VAR 0 8
43638: DEC
43639: ST_TO_ADDR
43640: LD_VAR 0 10
43644: PUSH
43645: FOR_TO
43646: IFFALSE 43739
// begin if not ValidHex ( _x , _y ) then
43648: LD_VAR 0 11
43652: PPUSH
43653: LD_VAR 0 12
43657: PPUSH
43658: CALL_OW 488
43662: NOT
43663: IFFALSE 43667
// continue ;
43665: GO 43645
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
43667: LD_VAR 0 11
43671: PPUSH
43672: LD_VAR 0 12
43676: PPUSH
43677: CALL_OW 351
43681: PUSH
43682: LD_VAR 0 11
43686: PPUSH
43687: LD_VAR 0 12
43691: PPUSH
43692: CALL_OW 554
43696: AND
43697: IFFALSE 43737
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
43699: LD_ADDR_VAR 0 13
43703: PUSH
43704: LD_VAR 0 13
43708: PPUSH
43709: LD_VAR 0 13
43713: PUSH
43714: LD_INT 1
43716: PLUS
43717: PPUSH
43718: LD_VAR 0 11
43722: PUSH
43723: LD_VAR 0 12
43727: PUSH
43728: EMPTY
43729: LIST
43730: LIST
43731: PPUSH
43732: CALL_OW 2
43736: ST_TO_ADDR
// end ;
43737: GO 43645
43739: POP
43740: POP
43741: GO 43625
43743: POP
43744: POP
// if not list then
43745: LD_VAR 0 13
43749: NOT
43750: IFFALSE 43754
// exit ;
43752: GO 43825
// for i in list do
43754: LD_ADDR_VAR 0 6
43758: PUSH
43759: LD_VAR 0 13
43763: PUSH
43764: FOR_IN
43765: IFFALSE 43823
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
43767: LD_VAR 0 1
43771: PPUSH
43772: LD_STRING M
43774: PUSH
43775: LD_VAR 0 6
43779: PUSH
43780: LD_INT 1
43782: ARRAY
43783: PUSH
43784: LD_VAR 0 6
43788: PUSH
43789: LD_INT 2
43791: ARRAY
43792: PUSH
43793: LD_INT 0
43795: PUSH
43796: LD_INT 0
43798: PUSH
43799: LD_INT 0
43801: PUSH
43802: LD_INT 0
43804: PUSH
43805: EMPTY
43806: LIST
43807: LIST
43808: LIST
43809: LIST
43810: LIST
43811: LIST
43812: LIST
43813: PUSH
43814: EMPTY
43815: LIST
43816: PPUSH
43817: CALL_OW 447
43821: GO 43764
43823: POP
43824: POP
// end ;
43825: LD_VAR 0 5
43829: RET
// function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
43830: LD_INT 0
43832: PPUSH
43833: PPUSH
43834: PPUSH
43835: PPUSH
43836: PPUSH
43837: PPUSH
43838: PPUSH
43839: PPUSH
43840: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
43841: LD_VAR 0 1
43845: PPUSH
43846: CALL_OW 302
43850: NOT
43851: PUSH
43852: LD_VAR 0 2
43856: PPUSH
43857: LD_VAR 0 3
43861: PPUSH
43862: CALL_OW 488
43866: NOT
43867: OR
43868: PUSH
43869: LD_VAR 0 4
43873: NOT
43874: OR
43875: IFFALSE 43879
// exit ;
43877: GO 44227
// list := [ ] ;
43879: LD_ADDR_VAR 0 13
43883: PUSH
43884: EMPTY
43885: ST_TO_ADDR
// if x - r < 0 then
43886: LD_VAR 0 2
43890: PUSH
43891: LD_VAR 0 4
43895: MINUS
43896: PUSH
43897: LD_INT 0
43899: LESS
43900: IFFALSE 43912
// min_x := 0 else
43902: LD_ADDR_VAR 0 7
43906: PUSH
43907: LD_INT 0
43909: ST_TO_ADDR
43910: GO 43928
// min_x := x - r ;
43912: LD_ADDR_VAR 0 7
43916: PUSH
43917: LD_VAR 0 2
43921: PUSH
43922: LD_VAR 0 4
43926: MINUS
43927: ST_TO_ADDR
// if y - r < 0 then
43928: LD_VAR 0 3
43932: PUSH
43933: LD_VAR 0 4
43937: MINUS
43938: PUSH
43939: LD_INT 0
43941: LESS
43942: IFFALSE 43954
// min_y := 0 else
43944: LD_ADDR_VAR 0 8
43948: PUSH
43949: LD_INT 0
43951: ST_TO_ADDR
43952: GO 43970
// min_y := y - r ;
43954: LD_ADDR_VAR 0 8
43958: PUSH
43959: LD_VAR 0 3
43963: PUSH
43964: LD_VAR 0 4
43968: MINUS
43969: ST_TO_ADDR
// max_x := x + r ;
43970: LD_ADDR_VAR 0 9
43974: PUSH
43975: LD_VAR 0 2
43979: PUSH
43980: LD_VAR 0 4
43984: PLUS
43985: ST_TO_ADDR
// max_y := y + r ;
43986: LD_ADDR_VAR 0 10
43990: PUSH
43991: LD_VAR 0 3
43995: PUSH
43996: LD_VAR 0 4
44000: PLUS
44001: ST_TO_ADDR
// for _x = min_x to max_x do
44002: LD_ADDR_VAR 0 11
44006: PUSH
44007: DOUBLE
44008: LD_VAR 0 7
44012: DEC
44013: ST_TO_ADDR
44014: LD_VAR 0 9
44018: PUSH
44019: FOR_TO
44020: IFFALSE 44137
// for _y = min_y to max_y do
44022: LD_ADDR_VAR 0 12
44026: PUSH
44027: DOUBLE
44028: LD_VAR 0 8
44032: DEC
44033: ST_TO_ADDR
44034: LD_VAR 0 10
44038: PUSH
44039: FOR_TO
44040: IFFALSE 44133
// begin if not ValidHex ( _x , _y ) then
44042: LD_VAR 0 11
44046: PPUSH
44047: LD_VAR 0 12
44051: PPUSH
44052: CALL_OW 488
44056: NOT
44057: IFFALSE 44061
// continue ;
44059: GO 44039
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
44061: LD_VAR 0 11
44065: PPUSH
44066: LD_VAR 0 12
44070: PPUSH
44071: CALL_OW 351
44075: PUSH
44076: LD_VAR 0 11
44080: PPUSH
44081: LD_VAR 0 12
44085: PPUSH
44086: CALL_OW 554
44090: AND
44091: IFFALSE 44131
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
44093: LD_ADDR_VAR 0 13
44097: PUSH
44098: LD_VAR 0 13
44102: PPUSH
44103: LD_VAR 0 13
44107: PUSH
44108: LD_INT 1
44110: PLUS
44111: PPUSH
44112: LD_VAR 0 11
44116: PUSH
44117: LD_VAR 0 12
44121: PUSH
44122: EMPTY
44123: LIST
44124: LIST
44125: PPUSH
44126: CALL_OW 2
44130: ST_TO_ADDR
// end ;
44131: GO 44039
44133: POP
44134: POP
44135: GO 44019
44137: POP
44138: POP
// if not list then
44139: LD_VAR 0 13
44143: NOT
44144: IFFALSE 44148
// exit ;
44146: GO 44227
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
44148: LD_ADDR_VAR 0 13
44152: PUSH
44153: LD_VAR 0 1
44157: PPUSH
44158: LD_VAR 0 13
44162: PPUSH
44163: LD_INT 1
44165: PPUSH
44166: LD_INT 1
44168: PPUSH
44169: CALL 5966 0 4
44173: ST_TO_ADDR
// ComStop ( flame ) ;
44174: LD_VAR 0 1
44178: PPUSH
44179: CALL_OW 141
// for i in list do
44183: LD_ADDR_VAR 0 6
44187: PUSH
44188: LD_VAR 0 13
44192: PUSH
44193: FOR_IN
44194: IFFALSE 44225
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
44196: LD_VAR 0 1
44200: PPUSH
44201: LD_VAR 0 6
44205: PUSH
44206: LD_INT 1
44208: ARRAY
44209: PPUSH
44210: LD_VAR 0 6
44214: PUSH
44215: LD_INT 2
44217: ARRAY
44218: PPUSH
44219: CALL_OW 176
44223: GO 44193
44225: POP
44226: POP
// end ;
44227: LD_VAR 0 5
44231: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
44232: LD_EXP 2
44236: NOT
44237: IFFALSE 44287
44239: GO 44241
44241: DISABLE
// begin initHack := true ;
44242: LD_ADDR_EXP 2
44246: PUSH
44247: LD_INT 1
44249: ST_TO_ADDR
// hackTanks := [ ] ;
44250: LD_ADDR_EXP 3
44254: PUSH
44255: EMPTY
44256: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
44257: LD_ADDR_EXP 4
44261: PUSH
44262: EMPTY
44263: ST_TO_ADDR
// hackLimit := 3 ;
44264: LD_ADDR_EXP 5
44268: PUSH
44269: LD_INT 3
44271: ST_TO_ADDR
// hackDist := 12 ;
44272: LD_ADDR_EXP 6
44276: PUSH
44277: LD_INT 12
44279: ST_TO_ADDR
// hackCounter := [ ] ;
44280: LD_ADDR_EXP 7
44284: PUSH
44285: EMPTY
44286: ST_TO_ADDR
// end ;
44287: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
44288: LD_EXP 2
44292: PUSH
44293: LD_INT 34
44295: PUSH
44296: LD_INT 99
44298: PUSH
44299: EMPTY
44300: LIST
44301: LIST
44302: PPUSH
44303: CALL_OW 69
44307: AND
44308: IFFALSE 44561
44310: GO 44312
44312: DISABLE
44313: LD_INT 0
44315: PPUSH
44316: PPUSH
// begin enable ;
44317: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
44318: LD_ADDR_VAR 0 1
44322: PUSH
44323: LD_INT 34
44325: PUSH
44326: LD_INT 99
44328: PUSH
44329: EMPTY
44330: LIST
44331: LIST
44332: PPUSH
44333: CALL_OW 69
44337: PUSH
44338: FOR_IN
44339: IFFALSE 44559
// begin if not i in hackTanks then
44341: LD_VAR 0 1
44345: PUSH
44346: LD_EXP 3
44350: IN
44351: NOT
44352: IFFALSE 44435
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
44354: LD_ADDR_EXP 3
44358: PUSH
44359: LD_EXP 3
44363: PPUSH
44364: LD_EXP 3
44368: PUSH
44369: LD_INT 1
44371: PLUS
44372: PPUSH
44373: LD_VAR 0 1
44377: PPUSH
44378: CALL_OW 1
44382: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
44383: LD_ADDR_EXP 4
44387: PUSH
44388: LD_EXP 4
44392: PPUSH
44393: LD_EXP 4
44397: PUSH
44398: LD_INT 1
44400: PLUS
44401: PPUSH
44402: EMPTY
44403: PPUSH
44404: CALL_OW 1
44408: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
44409: LD_ADDR_EXP 7
44413: PUSH
44414: LD_EXP 7
44418: PPUSH
44419: LD_EXP 7
44423: PUSH
44424: LD_INT 1
44426: PLUS
44427: PPUSH
44428: EMPTY
44429: PPUSH
44430: CALL_OW 1
44434: ST_TO_ADDR
// end ; if not IsOk ( i ) then
44435: LD_VAR 0 1
44439: PPUSH
44440: CALL_OW 302
44444: NOT
44445: IFFALSE 44458
// begin HackUnlinkAll ( i ) ;
44447: LD_VAR 0 1
44451: PPUSH
44452: CALL 44564 0 1
// continue ;
44456: GO 44338
// end ; HackCheckCapturedStatus ( i ) ;
44458: LD_VAR 0 1
44462: PPUSH
44463: CALL 45007 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
44467: LD_ADDR_VAR 0 2
44471: PUSH
44472: LD_INT 81
44474: PUSH
44475: LD_VAR 0 1
44479: PPUSH
44480: CALL_OW 255
44484: PUSH
44485: EMPTY
44486: LIST
44487: LIST
44488: PUSH
44489: LD_INT 33
44491: PUSH
44492: LD_INT 3
44494: PUSH
44495: EMPTY
44496: LIST
44497: LIST
44498: PUSH
44499: LD_INT 91
44501: PUSH
44502: LD_VAR 0 1
44506: PUSH
44507: LD_EXP 6
44511: PUSH
44512: EMPTY
44513: LIST
44514: LIST
44515: LIST
44516: PUSH
44517: LD_INT 50
44519: PUSH
44520: EMPTY
44521: LIST
44522: PUSH
44523: EMPTY
44524: LIST
44525: LIST
44526: LIST
44527: LIST
44528: PPUSH
44529: CALL_OW 69
44533: ST_TO_ADDR
// if not tmp then
44534: LD_VAR 0 2
44538: NOT
44539: IFFALSE 44543
// continue ;
44541: GO 44338
// HackLink ( i , tmp ) ;
44543: LD_VAR 0 1
44547: PPUSH
44548: LD_VAR 0 2
44552: PPUSH
44553: CALL 44700 0 2
// end ;
44557: GO 44338
44559: POP
44560: POP
// end ;
44561: PPOPN 2
44563: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
44564: LD_INT 0
44566: PPUSH
44567: PPUSH
44568: PPUSH
// if not hack in hackTanks then
44569: LD_VAR 0 1
44573: PUSH
44574: LD_EXP 3
44578: IN
44579: NOT
44580: IFFALSE 44584
// exit ;
44582: GO 44695
// index := GetElementIndex ( hackTanks , hack ) ;
44584: LD_ADDR_VAR 0 4
44588: PUSH
44589: LD_EXP 3
44593: PPUSH
44594: LD_VAR 0 1
44598: PPUSH
44599: CALL 5263 0 2
44603: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
44604: LD_EXP 4
44608: PUSH
44609: LD_VAR 0 4
44613: ARRAY
44614: IFFALSE 44695
// begin for i in hackTanksCaptured [ index ] do
44616: LD_ADDR_VAR 0 3
44620: PUSH
44621: LD_EXP 4
44625: PUSH
44626: LD_VAR 0 4
44630: ARRAY
44631: PUSH
44632: FOR_IN
44633: IFFALSE 44659
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
44635: LD_VAR 0 3
44639: PUSH
44640: LD_INT 1
44642: ARRAY
44643: PPUSH
44644: LD_VAR 0 3
44648: PUSH
44649: LD_INT 2
44651: ARRAY
44652: PPUSH
44653: CALL_OW 235
44657: GO 44632
44659: POP
44660: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
44661: LD_ADDR_EXP 4
44665: PUSH
44666: LD_EXP 4
44670: PPUSH
44671: LD_VAR 0 4
44675: PPUSH
44676: EMPTY
44677: PPUSH
44678: CALL_OW 1
44682: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
44683: LD_VAR 0 1
44687: PPUSH
44688: LD_INT 0
44690: PPUSH
44691: CALL_OW 505
// end ; end ;
44695: LD_VAR 0 2
44699: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
44700: LD_INT 0
44702: PPUSH
44703: PPUSH
44704: PPUSH
// if not hack in hackTanks or not vehicles then
44705: LD_VAR 0 1
44709: PUSH
44710: LD_EXP 3
44714: IN
44715: NOT
44716: PUSH
44717: LD_VAR 0 2
44721: NOT
44722: OR
44723: IFFALSE 44727
// exit ;
44725: GO 45002
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
44727: LD_ADDR_VAR 0 2
44731: PUSH
44732: LD_VAR 0 1
44736: PPUSH
44737: LD_VAR 0 2
44741: PPUSH
44742: LD_INT 1
44744: PPUSH
44745: LD_INT 1
44747: PPUSH
44748: CALL 5913 0 4
44752: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
44753: LD_ADDR_VAR 0 5
44757: PUSH
44758: LD_EXP 3
44762: PPUSH
44763: LD_VAR 0 1
44767: PPUSH
44768: CALL 5263 0 2
44772: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
44773: LD_EXP 4
44777: PUSH
44778: LD_VAR 0 5
44782: ARRAY
44783: PUSH
44784: LD_EXP 5
44788: LESS
44789: IFFALSE 44978
// begin for i := 1 to vehicles do
44791: LD_ADDR_VAR 0 4
44795: PUSH
44796: DOUBLE
44797: LD_INT 1
44799: DEC
44800: ST_TO_ADDR
44801: LD_VAR 0 2
44805: PUSH
44806: FOR_TO
44807: IFFALSE 44976
// begin if hackTanksCaptured [ index ] = hackLimit then
44809: LD_EXP 4
44813: PUSH
44814: LD_VAR 0 5
44818: ARRAY
44819: PUSH
44820: LD_EXP 5
44824: EQUAL
44825: IFFALSE 44829
// break ;
44827: GO 44976
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
44829: LD_ADDR_EXP 7
44833: PUSH
44834: LD_EXP 7
44838: PPUSH
44839: LD_VAR 0 5
44843: PPUSH
44844: LD_EXP 7
44848: PUSH
44849: LD_VAR 0 5
44853: ARRAY
44854: PUSH
44855: LD_INT 1
44857: PLUS
44858: PPUSH
44859: CALL_OW 1
44863: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
44864: LD_ADDR_EXP 4
44868: PUSH
44869: LD_EXP 4
44873: PPUSH
44874: LD_VAR 0 5
44878: PUSH
44879: LD_EXP 4
44883: PUSH
44884: LD_VAR 0 5
44888: ARRAY
44889: PUSH
44890: LD_INT 1
44892: PLUS
44893: PUSH
44894: EMPTY
44895: LIST
44896: LIST
44897: PPUSH
44898: LD_VAR 0 2
44902: PUSH
44903: LD_VAR 0 4
44907: ARRAY
44908: PUSH
44909: LD_VAR 0 2
44913: PUSH
44914: LD_VAR 0 4
44918: ARRAY
44919: PPUSH
44920: CALL_OW 255
44924: PUSH
44925: EMPTY
44926: LIST
44927: LIST
44928: PPUSH
44929: CALL 5478 0 3
44933: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
44934: LD_VAR 0 2
44938: PUSH
44939: LD_VAR 0 4
44943: ARRAY
44944: PPUSH
44945: LD_VAR 0 1
44949: PPUSH
44950: CALL_OW 255
44954: PPUSH
44955: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
44959: LD_VAR 0 2
44963: PUSH
44964: LD_VAR 0 4
44968: ARRAY
44969: PPUSH
44970: CALL_OW 141
// end ;
44974: GO 44806
44976: POP
44977: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
44978: LD_VAR 0 1
44982: PPUSH
44983: LD_EXP 4
44987: PUSH
44988: LD_VAR 0 5
44992: ARRAY
44993: PUSH
44994: LD_INT 0
44996: PLUS
44997: PPUSH
44998: CALL_OW 505
// end ;
45002: LD_VAR 0 3
45006: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
45007: LD_INT 0
45009: PPUSH
45010: PPUSH
45011: PPUSH
45012: PPUSH
// if not hack in hackTanks then
45013: LD_VAR 0 1
45017: PUSH
45018: LD_EXP 3
45022: IN
45023: NOT
45024: IFFALSE 45028
// exit ;
45026: GO 45268
// index := GetElementIndex ( hackTanks , hack ) ;
45028: LD_ADDR_VAR 0 4
45032: PUSH
45033: LD_EXP 3
45037: PPUSH
45038: LD_VAR 0 1
45042: PPUSH
45043: CALL 5263 0 2
45047: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
45048: LD_ADDR_VAR 0 3
45052: PUSH
45053: DOUBLE
45054: LD_EXP 4
45058: PUSH
45059: LD_VAR 0 4
45063: ARRAY
45064: INC
45065: ST_TO_ADDR
45066: LD_INT 1
45068: PUSH
45069: FOR_DOWNTO
45070: IFFALSE 45242
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
45072: LD_ADDR_VAR 0 5
45076: PUSH
45077: LD_EXP 4
45081: PUSH
45082: LD_VAR 0 4
45086: ARRAY
45087: PUSH
45088: LD_VAR 0 3
45092: ARRAY
45093: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
45094: LD_VAR 0 5
45098: PUSH
45099: LD_INT 1
45101: ARRAY
45102: PPUSH
45103: CALL_OW 302
45107: NOT
45108: PUSH
45109: LD_VAR 0 5
45113: PUSH
45114: LD_INT 1
45116: ARRAY
45117: PPUSH
45118: CALL_OW 255
45122: PUSH
45123: LD_VAR 0 1
45127: PPUSH
45128: CALL_OW 255
45132: NONEQUAL
45133: OR
45134: IFFALSE 45240
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
45136: LD_VAR 0 5
45140: PUSH
45141: LD_INT 1
45143: ARRAY
45144: PPUSH
45145: CALL_OW 305
45149: PUSH
45150: LD_VAR 0 5
45154: PUSH
45155: LD_INT 1
45157: ARRAY
45158: PPUSH
45159: CALL_OW 255
45163: PUSH
45164: LD_VAR 0 1
45168: PPUSH
45169: CALL_OW 255
45173: EQUAL
45174: AND
45175: IFFALSE 45199
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
45177: LD_VAR 0 5
45181: PUSH
45182: LD_INT 1
45184: ARRAY
45185: PPUSH
45186: LD_VAR 0 5
45190: PUSH
45191: LD_INT 2
45193: ARRAY
45194: PPUSH
45195: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
45199: LD_ADDR_EXP 4
45203: PUSH
45204: LD_EXP 4
45208: PPUSH
45209: LD_VAR 0 4
45213: PPUSH
45214: LD_EXP 4
45218: PUSH
45219: LD_VAR 0 4
45223: ARRAY
45224: PPUSH
45225: LD_VAR 0 3
45229: PPUSH
45230: CALL_OW 3
45234: PPUSH
45235: CALL_OW 1
45239: ST_TO_ADDR
// end ; end ;
45240: GO 45069
45242: POP
45243: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
45244: LD_VAR 0 1
45248: PPUSH
45249: LD_EXP 4
45253: PUSH
45254: LD_VAR 0 4
45258: ARRAY
45259: PUSH
45260: LD_INT 0
45262: PLUS
45263: PPUSH
45264: CALL_OW 505
// end ;
45268: LD_VAR 0 2
45272: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
45273: LD_INT 0
45275: PPUSH
45276: PPUSH
45277: PPUSH
45278: PPUSH
// if not hack in hackTanks then
45279: LD_VAR 0 1
45283: PUSH
45284: LD_EXP 3
45288: IN
45289: NOT
45290: IFFALSE 45294
// exit ;
45292: GO 45379
// index := GetElementIndex ( hackTanks , hack ) ;
45294: LD_ADDR_VAR 0 5
45298: PUSH
45299: LD_EXP 3
45303: PPUSH
45304: LD_VAR 0 1
45308: PPUSH
45309: CALL 5263 0 2
45313: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
45314: LD_ADDR_VAR 0 4
45318: PUSH
45319: DOUBLE
45320: LD_INT 1
45322: DEC
45323: ST_TO_ADDR
45324: LD_EXP 4
45328: PUSH
45329: LD_VAR 0 5
45333: ARRAY
45334: PUSH
45335: FOR_TO
45336: IFFALSE 45377
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
45338: LD_EXP 4
45342: PUSH
45343: LD_VAR 0 5
45347: ARRAY
45348: PUSH
45349: LD_VAR 0 4
45353: ARRAY
45354: PUSH
45355: LD_INT 1
45357: ARRAY
45358: PUSH
45359: LD_VAR 0 2
45363: EQUAL
45364: IFFALSE 45375
// KillUnit ( vehicle ) ;
45366: LD_VAR 0 2
45370: PPUSH
45371: CALL_OW 66
45375: GO 45335
45377: POP
45378: POP
// end ;
45379: LD_VAR 0 3
45383: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
45384: LD_EXP 8
45388: NOT
45389: IFFALSE 45424
45391: GO 45393
45393: DISABLE
// begin initMiner := true ;
45394: LD_ADDR_EXP 8
45398: PUSH
45399: LD_INT 1
45401: ST_TO_ADDR
// minersList := [ ] ;
45402: LD_ADDR_EXP 9
45406: PUSH
45407: EMPTY
45408: ST_TO_ADDR
// minerMinesList := [ ] ;
45409: LD_ADDR_EXP 10
45413: PUSH
45414: EMPTY
45415: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
45416: LD_ADDR_EXP 11
45420: PUSH
45421: LD_INT 5
45423: ST_TO_ADDR
// end ;
45424: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
45425: LD_EXP 8
45429: PUSH
45430: LD_INT 34
45432: PUSH
45433: LD_INT 81
45435: PUSH
45436: EMPTY
45437: LIST
45438: LIST
45439: PPUSH
45440: CALL_OW 69
45444: AND
45445: IFFALSE 45906
45447: GO 45449
45449: DISABLE
45450: LD_INT 0
45452: PPUSH
45453: PPUSH
45454: PPUSH
45455: PPUSH
// begin enable ;
45456: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
45457: LD_ADDR_VAR 0 1
45461: PUSH
45462: LD_INT 34
45464: PUSH
45465: LD_INT 81
45467: PUSH
45468: EMPTY
45469: LIST
45470: LIST
45471: PPUSH
45472: CALL_OW 69
45476: PUSH
45477: FOR_IN
45478: IFFALSE 45550
// begin if not i in minersList then
45480: LD_VAR 0 1
45484: PUSH
45485: LD_EXP 9
45489: IN
45490: NOT
45491: IFFALSE 45548
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
45493: LD_ADDR_EXP 9
45497: PUSH
45498: LD_EXP 9
45502: PPUSH
45503: LD_EXP 9
45507: PUSH
45508: LD_INT 1
45510: PLUS
45511: PPUSH
45512: LD_VAR 0 1
45516: PPUSH
45517: CALL_OW 1
45521: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
45522: LD_ADDR_EXP 10
45526: PUSH
45527: LD_EXP 10
45531: PPUSH
45532: LD_EXP 10
45536: PUSH
45537: LD_INT 1
45539: PLUS
45540: PPUSH
45541: EMPTY
45542: PPUSH
45543: CALL_OW 1
45547: ST_TO_ADDR
// end end ;
45548: GO 45477
45550: POP
45551: POP
// for i := minerMinesList downto 1 do
45552: LD_ADDR_VAR 0 1
45556: PUSH
45557: DOUBLE
45558: LD_EXP 10
45562: INC
45563: ST_TO_ADDR
45564: LD_INT 1
45566: PUSH
45567: FOR_DOWNTO
45568: IFFALSE 45904
// begin if IsLive ( minersList [ i ] ) then
45570: LD_EXP 9
45574: PUSH
45575: LD_VAR 0 1
45579: ARRAY
45580: PPUSH
45581: CALL_OW 300
45585: IFFALSE 45613
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
45587: LD_EXP 9
45591: PUSH
45592: LD_VAR 0 1
45596: ARRAY
45597: PPUSH
45598: LD_EXP 10
45602: PUSH
45603: LD_VAR 0 1
45607: ARRAY
45608: PPUSH
45609: CALL_OW 505
// if not minerMinesList [ i ] then
45613: LD_EXP 10
45617: PUSH
45618: LD_VAR 0 1
45622: ARRAY
45623: NOT
45624: IFFALSE 45628
// continue ;
45626: GO 45567
// for j := minerMinesList [ i ] downto 1 do
45628: LD_ADDR_VAR 0 2
45632: PUSH
45633: DOUBLE
45634: LD_EXP 10
45638: PUSH
45639: LD_VAR 0 1
45643: ARRAY
45644: INC
45645: ST_TO_ADDR
45646: LD_INT 1
45648: PUSH
45649: FOR_DOWNTO
45650: IFFALSE 45900
// begin side := GetSide ( minersList [ i ] ) ;
45652: LD_ADDR_VAR 0 3
45656: PUSH
45657: LD_EXP 9
45661: PUSH
45662: LD_VAR 0 1
45666: ARRAY
45667: PPUSH
45668: CALL_OW 255
45672: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
45673: LD_ADDR_VAR 0 4
45677: PUSH
45678: LD_EXP 10
45682: PUSH
45683: LD_VAR 0 1
45687: ARRAY
45688: PUSH
45689: LD_VAR 0 2
45693: ARRAY
45694: PUSH
45695: LD_INT 1
45697: ARRAY
45698: PPUSH
45699: LD_EXP 10
45703: PUSH
45704: LD_VAR 0 1
45708: ARRAY
45709: PUSH
45710: LD_VAR 0 2
45714: ARRAY
45715: PUSH
45716: LD_INT 2
45718: ARRAY
45719: PPUSH
45720: CALL_OW 428
45724: ST_TO_ADDR
// if not tmp then
45725: LD_VAR 0 4
45729: NOT
45730: IFFALSE 45734
// continue ;
45732: GO 45649
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
45734: LD_VAR 0 4
45738: PUSH
45739: LD_INT 81
45741: PUSH
45742: LD_VAR 0 3
45746: PUSH
45747: EMPTY
45748: LIST
45749: LIST
45750: PPUSH
45751: CALL_OW 69
45755: IN
45756: PUSH
45757: LD_EXP 10
45761: PUSH
45762: LD_VAR 0 1
45766: ARRAY
45767: PUSH
45768: LD_VAR 0 2
45772: ARRAY
45773: PUSH
45774: LD_INT 1
45776: ARRAY
45777: PPUSH
45778: LD_EXP 10
45782: PUSH
45783: LD_VAR 0 1
45787: ARRAY
45788: PUSH
45789: LD_VAR 0 2
45793: ARRAY
45794: PUSH
45795: LD_INT 2
45797: ARRAY
45798: PPUSH
45799: CALL_OW 458
45803: AND
45804: IFFALSE 45898
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
45806: LD_EXP 10
45810: PUSH
45811: LD_VAR 0 1
45815: ARRAY
45816: PUSH
45817: LD_VAR 0 2
45821: ARRAY
45822: PUSH
45823: LD_INT 1
45825: ARRAY
45826: PPUSH
45827: LD_EXP 10
45831: PUSH
45832: LD_VAR 0 1
45836: ARRAY
45837: PUSH
45838: LD_VAR 0 2
45842: ARRAY
45843: PUSH
45844: LD_INT 2
45846: ARRAY
45847: PPUSH
45848: LD_VAR 0 3
45852: PPUSH
45853: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
45857: LD_ADDR_EXP 10
45861: PUSH
45862: LD_EXP 10
45866: PPUSH
45867: LD_VAR 0 1
45871: PPUSH
45872: LD_EXP 10
45876: PUSH
45877: LD_VAR 0 1
45881: ARRAY
45882: PPUSH
45883: LD_VAR 0 2
45887: PPUSH
45888: CALL_OW 3
45892: PPUSH
45893: CALL_OW 1
45897: ST_TO_ADDR
// end ; end ;
45898: GO 45649
45900: POP
45901: POP
// end ;
45902: GO 45567
45904: POP
45905: POP
// end ;
45906: PPOPN 4
45908: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
45909: LD_INT 0
45911: PPUSH
45912: PPUSH
// result := false ;
45913: LD_ADDR_VAR 0 4
45917: PUSH
45918: LD_INT 0
45920: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
45921: LD_VAR 0 1
45925: PPUSH
45926: CALL_OW 264
45930: PUSH
45931: LD_INT 81
45933: EQUAL
45934: NOT
45935: IFFALSE 45939
// exit ;
45937: GO 46179
// index := GetElementIndex ( minersList , unit ) ;
45939: LD_ADDR_VAR 0 5
45943: PUSH
45944: LD_EXP 9
45948: PPUSH
45949: LD_VAR 0 1
45953: PPUSH
45954: CALL 5263 0 2
45958: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
45959: LD_EXP 10
45963: PUSH
45964: LD_VAR 0 5
45968: ARRAY
45969: PUSH
45970: LD_EXP 11
45974: GREATEREQUAL
45975: IFFALSE 45979
// exit ;
45977: GO 46179
// ComMoveXY ( unit , x , y ) ;
45979: LD_VAR 0 1
45983: PPUSH
45984: LD_VAR 0 2
45988: PPUSH
45989: LD_VAR 0 3
45993: PPUSH
45994: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
45998: LD_INT 35
46000: PPUSH
46001: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
46005: LD_VAR 0 1
46009: PPUSH
46010: LD_VAR 0 2
46014: PPUSH
46015: LD_VAR 0 3
46019: PPUSH
46020: CALL 37015 0 3
46024: NOT
46025: PUSH
46026: LD_VAR 0 1
46030: PPUSH
46031: CALL_OW 314
46035: AND
46036: IFFALSE 46040
// exit ;
46038: GO 46179
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
46040: LD_VAR 0 2
46044: PPUSH
46045: LD_VAR 0 3
46049: PPUSH
46050: CALL_OW 428
46054: PUSH
46055: LD_VAR 0 1
46059: EQUAL
46060: PUSH
46061: LD_VAR 0 1
46065: PPUSH
46066: CALL_OW 314
46070: NOT
46071: AND
46072: IFFALSE 45998
// PlaySoundXY ( x , y , PlantMine ) ;
46074: LD_VAR 0 2
46078: PPUSH
46079: LD_VAR 0 3
46083: PPUSH
46084: LD_STRING PlantMine
46086: PPUSH
46087: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
46091: LD_VAR 0 2
46095: PPUSH
46096: LD_VAR 0 3
46100: PPUSH
46101: LD_VAR 0 1
46105: PPUSH
46106: CALL_OW 255
46110: PPUSH
46111: LD_INT 0
46113: PPUSH
46114: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
46118: LD_ADDR_EXP 10
46122: PUSH
46123: LD_EXP 10
46127: PPUSH
46128: LD_VAR 0 5
46132: PUSH
46133: LD_EXP 10
46137: PUSH
46138: LD_VAR 0 5
46142: ARRAY
46143: PUSH
46144: LD_INT 1
46146: PLUS
46147: PUSH
46148: EMPTY
46149: LIST
46150: LIST
46151: PPUSH
46152: LD_VAR 0 2
46156: PUSH
46157: LD_VAR 0 3
46161: PUSH
46162: EMPTY
46163: LIST
46164: LIST
46165: PPUSH
46166: CALL 5478 0 3
46170: ST_TO_ADDR
// result := true ;
46171: LD_ADDR_VAR 0 4
46175: PUSH
46176: LD_INT 1
46178: ST_TO_ADDR
// end ;
46179: LD_VAR 0 4
46183: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
46184: LD_INT 0
46186: PPUSH
46187: PPUSH
46188: PPUSH
// if not unit in minersList then
46189: LD_VAR 0 1
46193: PUSH
46194: LD_EXP 9
46198: IN
46199: NOT
46200: IFFALSE 46204
// exit ;
46202: GO 46596
// index := GetElementIndex ( minersList , unit ) ;
46204: LD_ADDR_VAR 0 6
46208: PUSH
46209: LD_EXP 9
46213: PPUSH
46214: LD_VAR 0 1
46218: PPUSH
46219: CALL 5263 0 2
46223: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
46224: LD_ADDR_VAR 0 5
46228: PUSH
46229: DOUBLE
46230: LD_EXP 10
46234: PUSH
46235: LD_VAR 0 6
46239: ARRAY
46240: INC
46241: ST_TO_ADDR
46242: LD_INT 1
46244: PUSH
46245: FOR_DOWNTO
46246: IFFALSE 46407
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
46248: LD_EXP 10
46252: PUSH
46253: LD_VAR 0 6
46257: ARRAY
46258: PUSH
46259: LD_VAR 0 5
46263: ARRAY
46264: PUSH
46265: LD_INT 1
46267: ARRAY
46268: PUSH
46269: LD_VAR 0 2
46273: EQUAL
46274: PUSH
46275: LD_EXP 10
46279: PUSH
46280: LD_VAR 0 6
46284: ARRAY
46285: PUSH
46286: LD_VAR 0 5
46290: ARRAY
46291: PUSH
46292: LD_INT 2
46294: ARRAY
46295: PUSH
46296: LD_VAR 0 3
46300: EQUAL
46301: AND
46302: IFFALSE 46405
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
46304: LD_EXP 10
46308: PUSH
46309: LD_VAR 0 6
46313: ARRAY
46314: PUSH
46315: LD_VAR 0 5
46319: ARRAY
46320: PUSH
46321: LD_INT 1
46323: ARRAY
46324: PPUSH
46325: LD_EXP 10
46329: PUSH
46330: LD_VAR 0 6
46334: ARRAY
46335: PUSH
46336: LD_VAR 0 5
46340: ARRAY
46341: PUSH
46342: LD_INT 2
46344: ARRAY
46345: PPUSH
46346: LD_VAR 0 1
46350: PPUSH
46351: CALL_OW 255
46355: PPUSH
46356: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
46360: LD_ADDR_EXP 10
46364: PUSH
46365: LD_EXP 10
46369: PPUSH
46370: LD_VAR 0 6
46374: PPUSH
46375: LD_EXP 10
46379: PUSH
46380: LD_VAR 0 6
46384: ARRAY
46385: PPUSH
46386: LD_VAR 0 5
46390: PPUSH
46391: CALL_OW 3
46395: PPUSH
46396: CALL_OW 1
46400: ST_TO_ADDR
// exit ;
46401: POP
46402: POP
46403: GO 46596
// end ; end ;
46405: GO 46245
46407: POP
46408: POP
// for i := minerMinesList [ index ] downto 1 do
46409: LD_ADDR_VAR 0 5
46413: PUSH
46414: DOUBLE
46415: LD_EXP 10
46419: PUSH
46420: LD_VAR 0 6
46424: ARRAY
46425: INC
46426: ST_TO_ADDR
46427: LD_INT 1
46429: PUSH
46430: FOR_DOWNTO
46431: IFFALSE 46594
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
46433: LD_EXP 10
46437: PUSH
46438: LD_VAR 0 6
46442: ARRAY
46443: PUSH
46444: LD_VAR 0 5
46448: ARRAY
46449: PUSH
46450: LD_INT 1
46452: ARRAY
46453: PPUSH
46454: LD_EXP 10
46458: PUSH
46459: LD_VAR 0 6
46463: ARRAY
46464: PUSH
46465: LD_VAR 0 5
46469: ARRAY
46470: PUSH
46471: LD_INT 2
46473: ARRAY
46474: PPUSH
46475: LD_VAR 0 2
46479: PPUSH
46480: LD_VAR 0 3
46484: PPUSH
46485: CALL_OW 298
46489: PUSH
46490: LD_INT 6
46492: LESS
46493: IFFALSE 46592
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
46495: LD_EXP 10
46499: PUSH
46500: LD_VAR 0 6
46504: ARRAY
46505: PUSH
46506: LD_VAR 0 5
46510: ARRAY
46511: PUSH
46512: LD_INT 1
46514: ARRAY
46515: PPUSH
46516: LD_EXP 10
46520: PUSH
46521: LD_VAR 0 6
46525: ARRAY
46526: PUSH
46527: LD_VAR 0 5
46531: ARRAY
46532: PUSH
46533: LD_INT 2
46535: ARRAY
46536: PPUSH
46537: LD_VAR 0 1
46541: PPUSH
46542: CALL_OW 255
46546: PPUSH
46547: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
46551: LD_ADDR_EXP 10
46555: PUSH
46556: LD_EXP 10
46560: PPUSH
46561: LD_VAR 0 6
46565: PPUSH
46566: LD_EXP 10
46570: PUSH
46571: LD_VAR 0 6
46575: ARRAY
46576: PPUSH
46577: LD_VAR 0 5
46581: PPUSH
46582: CALL_OW 3
46586: PPUSH
46587: CALL_OW 1
46591: ST_TO_ADDR
// end ; end ;
46592: GO 46430
46594: POP
46595: POP
// end ;
46596: LD_VAR 0 4
46600: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
46601: LD_INT 0
46603: PPUSH
46604: PPUSH
46605: PPUSH
46606: PPUSH
46607: PPUSH
46608: PPUSH
46609: PPUSH
46610: PPUSH
46611: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
46612: LD_VAR 0 1
46616: PPUSH
46617: CALL_OW 264
46621: PUSH
46622: LD_INT 81
46624: EQUAL
46625: NOT
46626: PUSH
46627: LD_VAR 0 1
46631: PUSH
46632: LD_EXP 9
46636: IN
46637: NOT
46638: OR
46639: IFFALSE 46643
// exit ;
46641: GO 46965
// index := GetElementIndex ( minersList , unit ) ;
46643: LD_ADDR_VAR 0 6
46647: PUSH
46648: LD_EXP 9
46652: PPUSH
46653: LD_VAR 0 1
46657: PPUSH
46658: CALL 5263 0 2
46662: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
46663: LD_ADDR_VAR 0 8
46667: PUSH
46668: LD_EXP 11
46672: PUSH
46673: LD_EXP 10
46677: PUSH
46678: LD_VAR 0 6
46682: ARRAY
46683: MINUS
46684: ST_TO_ADDR
// if not minesFreeAmount then
46685: LD_VAR 0 8
46689: NOT
46690: IFFALSE 46694
// exit ;
46692: GO 46965
// tmp := [ ] ;
46694: LD_ADDR_VAR 0 7
46698: PUSH
46699: EMPTY
46700: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
46701: LD_ADDR_VAR 0 5
46705: PUSH
46706: DOUBLE
46707: LD_INT 1
46709: DEC
46710: ST_TO_ADDR
46711: LD_VAR 0 8
46715: PUSH
46716: FOR_TO
46717: IFFALSE 46912
// begin _d := rand ( 0 , 5 ) ;
46719: LD_ADDR_VAR 0 11
46723: PUSH
46724: LD_INT 0
46726: PPUSH
46727: LD_INT 5
46729: PPUSH
46730: CALL_OW 12
46734: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
46735: LD_ADDR_VAR 0 12
46739: PUSH
46740: LD_INT 2
46742: PPUSH
46743: LD_INT 6
46745: PPUSH
46746: CALL_OW 12
46750: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
46751: LD_ADDR_VAR 0 9
46755: PUSH
46756: LD_VAR 0 2
46760: PPUSH
46761: LD_VAR 0 11
46765: PPUSH
46766: LD_VAR 0 12
46770: PPUSH
46771: CALL_OW 272
46775: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
46776: LD_ADDR_VAR 0 10
46780: PUSH
46781: LD_VAR 0 3
46785: PPUSH
46786: LD_VAR 0 11
46790: PPUSH
46791: LD_VAR 0 12
46795: PPUSH
46796: CALL_OW 273
46800: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
46801: LD_VAR 0 9
46805: PPUSH
46806: LD_VAR 0 10
46810: PPUSH
46811: CALL_OW 488
46815: PUSH
46816: LD_VAR 0 9
46820: PUSH
46821: LD_VAR 0 10
46825: PUSH
46826: EMPTY
46827: LIST
46828: LIST
46829: PUSH
46830: LD_VAR 0 7
46834: IN
46835: NOT
46836: AND
46837: PUSH
46838: LD_VAR 0 9
46842: PPUSH
46843: LD_VAR 0 10
46847: PPUSH
46848: CALL_OW 458
46852: NOT
46853: AND
46854: IFFALSE 46896
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
46856: LD_ADDR_VAR 0 7
46860: PUSH
46861: LD_VAR 0 7
46865: PPUSH
46866: LD_VAR 0 7
46870: PUSH
46871: LD_INT 1
46873: PLUS
46874: PPUSH
46875: LD_VAR 0 9
46879: PUSH
46880: LD_VAR 0 10
46884: PUSH
46885: EMPTY
46886: LIST
46887: LIST
46888: PPUSH
46889: CALL_OW 1
46893: ST_TO_ADDR
46894: GO 46910
// i := i - 1 ;
46896: LD_ADDR_VAR 0 5
46900: PUSH
46901: LD_VAR 0 5
46905: PUSH
46906: LD_INT 1
46908: MINUS
46909: ST_TO_ADDR
// end ;
46910: GO 46716
46912: POP
46913: POP
// for i in tmp do
46914: LD_ADDR_VAR 0 5
46918: PUSH
46919: LD_VAR 0 7
46923: PUSH
46924: FOR_IN
46925: IFFALSE 46963
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
46927: LD_VAR 0 1
46931: PPUSH
46932: LD_VAR 0 5
46936: PUSH
46937: LD_INT 1
46939: ARRAY
46940: PPUSH
46941: LD_VAR 0 5
46945: PUSH
46946: LD_INT 2
46948: ARRAY
46949: PPUSH
46950: CALL 45909 0 3
46954: NOT
46955: IFFALSE 46961
// exit ;
46957: POP
46958: POP
46959: GO 46965
46961: GO 46924
46963: POP
46964: POP
// end ;
46965: LD_VAR 0 4
46969: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
46970: LD_INT 0
46972: PPUSH
46973: PPUSH
46974: PPUSH
46975: PPUSH
46976: PPUSH
46977: PPUSH
46978: PPUSH
// if not GetClass ( unit ) = class_sniper then
46979: LD_VAR 0 1
46983: PPUSH
46984: CALL_OW 257
46988: PUSH
46989: LD_INT 5
46991: EQUAL
46992: NOT
46993: IFFALSE 46997
// exit ;
46995: GO 47385
// dist := 8 ;
46997: LD_ADDR_VAR 0 5
47001: PUSH
47002: LD_INT 8
47004: ST_TO_ADDR
// viewRange := 12 ;
47005: LD_ADDR_VAR 0 7
47009: PUSH
47010: LD_INT 12
47012: ST_TO_ADDR
// side := GetSide ( unit ) ;
47013: LD_ADDR_VAR 0 6
47017: PUSH
47018: LD_VAR 0 1
47022: PPUSH
47023: CALL_OW 255
47027: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
47028: LD_INT 61
47030: PPUSH
47031: LD_VAR 0 6
47035: PPUSH
47036: CALL_OW 321
47040: PUSH
47041: LD_INT 2
47043: EQUAL
47044: IFFALSE 47054
// viewRange := 16 ;
47046: LD_ADDR_VAR 0 7
47050: PUSH
47051: LD_INT 16
47053: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
47054: LD_VAR 0 1
47058: PPUSH
47059: LD_VAR 0 2
47063: PPUSH
47064: LD_VAR 0 3
47068: PPUSH
47069: CALL_OW 297
47073: PUSH
47074: LD_VAR 0 5
47078: GREATER
47079: IFFALSE 47158
// begin ComMoveXY ( unit , x , y ) ;
47081: LD_VAR 0 1
47085: PPUSH
47086: LD_VAR 0 2
47090: PPUSH
47091: LD_VAR 0 3
47095: PPUSH
47096: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
47100: LD_INT 35
47102: PPUSH
47103: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
47107: LD_VAR 0 1
47111: PPUSH
47112: LD_VAR 0 2
47116: PPUSH
47117: LD_VAR 0 3
47121: PPUSH
47122: CALL 37015 0 3
47126: NOT
47127: IFFALSE 47131
// exit ;
47129: GO 47385
// until GetDistUnitXY ( unit , x , y ) < dist ;
47131: LD_VAR 0 1
47135: PPUSH
47136: LD_VAR 0 2
47140: PPUSH
47141: LD_VAR 0 3
47145: PPUSH
47146: CALL_OW 297
47150: PUSH
47151: LD_VAR 0 5
47155: LESS
47156: IFFALSE 47100
// end ; ComTurnXY ( unit , x , y ) ;
47158: LD_VAR 0 1
47162: PPUSH
47163: LD_VAR 0 2
47167: PPUSH
47168: LD_VAR 0 3
47172: PPUSH
47173: CALL_OW 118
// wait ( 5 ) ;
47177: LD_INT 5
47179: PPUSH
47180: CALL_OW 67
// _d := GetDir ( unit ) ;
47184: LD_ADDR_VAR 0 10
47188: PUSH
47189: LD_VAR 0 1
47193: PPUSH
47194: CALL_OW 254
47198: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
47199: LD_ADDR_VAR 0 8
47203: PUSH
47204: LD_VAR 0 1
47208: PPUSH
47209: CALL_OW 250
47213: PPUSH
47214: LD_VAR 0 10
47218: PPUSH
47219: LD_VAR 0 5
47223: PPUSH
47224: CALL_OW 272
47228: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
47229: LD_ADDR_VAR 0 9
47233: PUSH
47234: LD_VAR 0 1
47238: PPUSH
47239: CALL_OW 251
47243: PPUSH
47244: LD_VAR 0 10
47248: PPUSH
47249: LD_VAR 0 5
47253: PPUSH
47254: CALL_OW 273
47258: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
47259: LD_VAR 0 8
47263: PPUSH
47264: LD_VAR 0 9
47268: PPUSH
47269: CALL_OW 488
47273: NOT
47274: IFFALSE 47278
// exit ;
47276: GO 47385
// ComAnimCustom ( unit , 1 ) ;
47278: LD_VAR 0 1
47282: PPUSH
47283: LD_INT 1
47285: PPUSH
47286: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
47290: LD_VAR 0 8
47294: PPUSH
47295: LD_VAR 0 9
47299: PPUSH
47300: LD_VAR 0 6
47304: PPUSH
47305: LD_VAR 0 7
47309: PPUSH
47310: CALL_OW 330
// repeat wait ( 1 ) ;
47314: LD_INT 1
47316: PPUSH
47317: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
47321: LD_VAR 0 1
47325: PPUSH
47326: CALL_OW 316
47330: PUSH
47331: LD_VAR 0 1
47335: PPUSH
47336: CALL_OW 314
47340: OR
47341: PUSH
47342: LD_VAR 0 1
47346: PPUSH
47347: CALL_OW 302
47351: NOT
47352: OR
47353: PUSH
47354: LD_VAR 0 1
47358: PPUSH
47359: CALL_OW 301
47363: OR
47364: IFFALSE 47314
// RemoveSeeing ( _x , _y , side ) ;
47366: LD_VAR 0 8
47370: PPUSH
47371: LD_VAR 0 9
47375: PPUSH
47376: LD_VAR 0 6
47380: PPUSH
47381: CALL_OW 331
// end ; end_of_file
47385: LD_VAR 0 4
47389: RET
// export globalGameSaveCounter ; every 0 0$1 do
47390: GO 47392
47392: DISABLE
// begin enable ;
47393: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
47394: LD_STRING updateTimer(
47396: PUSH
47397: LD_OWVAR 1
47401: STR
47402: PUSH
47403: LD_STRING );
47405: STR
47406: PPUSH
47407: CALL_OW 559
// end ;
47411: END
// every 0 0$1 do
47412: GO 47414
47414: DISABLE
// begin globalGameSaveCounter := 0 ;
47415: LD_ADDR_EXP 12
47419: PUSH
47420: LD_INT 0
47422: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
47423: LD_STRING setGameSaveCounter(0)
47425: PPUSH
47426: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
47430: LD_STRING initStreamRollete();
47432: PPUSH
47433: CALL_OW 559
// InitStreamMode ;
47437: CALL 48763 0 0
// DefineStreamItems ( false ) ;
47441: LD_INT 0
47443: PPUSH
47444: CALL 49227 0 1
// end ;
47448: END
// export function SOS_MapStart ( ) ; begin
47449: LD_INT 0
47451: PPUSH
// if streamModeActive then
47452: LD_EXP 13
47456: IFFALSE 47465
// DefineStreamItems ( true ) ;
47458: LD_INT 1
47460: PPUSH
47461: CALL 49227 0 1
// UpdateLuaVariables ( ) ;
47465: CALL 47482 0 0
// UpdateFactoryWaypoints ( ) ;
47469: CALL 62096 0 0
// UpdateWarehouseGatheringPoints ( ) ;
47473: CALL 62353 0 0
// end ;
47477: LD_VAR 0 1
47481: RET
// function UpdateLuaVariables ( ) ; begin
47482: LD_INT 0
47484: PPUSH
// if globalGameSaveCounter then
47485: LD_EXP 12
47489: IFFALSE 47523
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
47491: LD_ADDR_EXP 12
47495: PUSH
47496: LD_EXP 12
47500: PPUSH
47501: CALL 39579 0 1
47505: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
47506: LD_STRING setGameSaveCounter(
47508: PUSH
47509: LD_EXP 12
47513: STR
47514: PUSH
47515: LD_STRING )
47517: STR
47518: PPUSH
47519: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
47523: LD_STRING setGameDifficulty(
47525: PUSH
47526: LD_OWVAR 67
47530: STR
47531: PUSH
47532: LD_STRING )
47534: STR
47535: PPUSH
47536: CALL_OW 559
// end ;
47540: LD_VAR 0 1
47544: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
47545: LD_INT 0
47547: PPUSH
// if p2 = stream_mode then
47548: LD_VAR 0 2
47552: PUSH
47553: LD_INT 100
47555: EQUAL
47556: IFFALSE 48559
// begin if not StreamModeActive then
47558: LD_EXP 13
47562: NOT
47563: IFFALSE 47573
// StreamModeActive := true ;
47565: LD_ADDR_EXP 13
47569: PUSH
47570: LD_INT 1
47572: ST_TO_ADDR
// if p3 = 0 then
47573: LD_VAR 0 3
47577: PUSH
47578: LD_INT 0
47580: EQUAL
47581: IFFALSE 47587
// InitStreamMode ;
47583: CALL 48763 0 0
// if p3 = 1 then
47587: LD_VAR 0 3
47591: PUSH
47592: LD_INT 1
47594: EQUAL
47595: IFFALSE 47605
// sRocket := true ;
47597: LD_ADDR_EXP 18
47601: PUSH
47602: LD_INT 1
47604: ST_TO_ADDR
// if p3 = 2 then
47605: LD_VAR 0 3
47609: PUSH
47610: LD_INT 2
47612: EQUAL
47613: IFFALSE 47623
// sSpeed := true ;
47615: LD_ADDR_EXP 17
47619: PUSH
47620: LD_INT 1
47622: ST_TO_ADDR
// if p3 = 3 then
47623: LD_VAR 0 3
47627: PUSH
47628: LD_INT 3
47630: EQUAL
47631: IFFALSE 47641
// sEngine := true ;
47633: LD_ADDR_EXP 19
47637: PUSH
47638: LD_INT 1
47640: ST_TO_ADDR
// if p3 = 4 then
47641: LD_VAR 0 3
47645: PUSH
47646: LD_INT 4
47648: EQUAL
47649: IFFALSE 47659
// sSpec := true ;
47651: LD_ADDR_EXP 16
47655: PUSH
47656: LD_INT 1
47658: ST_TO_ADDR
// if p3 = 5 then
47659: LD_VAR 0 3
47663: PUSH
47664: LD_INT 5
47666: EQUAL
47667: IFFALSE 47677
// sLevel := true ;
47669: LD_ADDR_EXP 20
47673: PUSH
47674: LD_INT 1
47676: ST_TO_ADDR
// if p3 = 6 then
47677: LD_VAR 0 3
47681: PUSH
47682: LD_INT 6
47684: EQUAL
47685: IFFALSE 47695
// sArmoury := true ;
47687: LD_ADDR_EXP 21
47691: PUSH
47692: LD_INT 1
47694: ST_TO_ADDR
// if p3 = 7 then
47695: LD_VAR 0 3
47699: PUSH
47700: LD_INT 7
47702: EQUAL
47703: IFFALSE 47713
// sRadar := true ;
47705: LD_ADDR_EXP 22
47709: PUSH
47710: LD_INT 1
47712: ST_TO_ADDR
// if p3 = 8 then
47713: LD_VAR 0 3
47717: PUSH
47718: LD_INT 8
47720: EQUAL
47721: IFFALSE 47731
// sBunker := true ;
47723: LD_ADDR_EXP 23
47727: PUSH
47728: LD_INT 1
47730: ST_TO_ADDR
// if p3 = 9 then
47731: LD_VAR 0 3
47735: PUSH
47736: LD_INT 9
47738: EQUAL
47739: IFFALSE 47749
// sHack := true ;
47741: LD_ADDR_EXP 24
47745: PUSH
47746: LD_INT 1
47748: ST_TO_ADDR
// if p3 = 10 then
47749: LD_VAR 0 3
47753: PUSH
47754: LD_INT 10
47756: EQUAL
47757: IFFALSE 47767
// sFire := true ;
47759: LD_ADDR_EXP 25
47763: PUSH
47764: LD_INT 1
47766: ST_TO_ADDR
// if p3 = 11 then
47767: LD_VAR 0 3
47771: PUSH
47772: LD_INT 11
47774: EQUAL
47775: IFFALSE 47785
// sRefresh := true ;
47777: LD_ADDR_EXP 26
47781: PUSH
47782: LD_INT 1
47784: ST_TO_ADDR
// if p3 = 12 then
47785: LD_VAR 0 3
47789: PUSH
47790: LD_INT 12
47792: EQUAL
47793: IFFALSE 47803
// sExp := true ;
47795: LD_ADDR_EXP 27
47799: PUSH
47800: LD_INT 1
47802: ST_TO_ADDR
// if p3 = 13 then
47803: LD_VAR 0 3
47807: PUSH
47808: LD_INT 13
47810: EQUAL
47811: IFFALSE 47821
// sDepot := true ;
47813: LD_ADDR_EXP 28
47817: PUSH
47818: LD_INT 1
47820: ST_TO_ADDR
// if p3 = 14 then
47821: LD_VAR 0 3
47825: PUSH
47826: LD_INT 14
47828: EQUAL
47829: IFFALSE 47839
// sFlag := true ;
47831: LD_ADDR_EXP 29
47835: PUSH
47836: LD_INT 1
47838: ST_TO_ADDR
// if p3 = 15 then
47839: LD_VAR 0 3
47843: PUSH
47844: LD_INT 15
47846: EQUAL
47847: IFFALSE 47857
// sKamikadze := true ;
47849: LD_ADDR_EXP 37
47853: PUSH
47854: LD_INT 1
47856: ST_TO_ADDR
// if p3 = 16 then
47857: LD_VAR 0 3
47861: PUSH
47862: LD_INT 16
47864: EQUAL
47865: IFFALSE 47875
// sTroll := true ;
47867: LD_ADDR_EXP 38
47871: PUSH
47872: LD_INT 1
47874: ST_TO_ADDR
// if p3 = 17 then
47875: LD_VAR 0 3
47879: PUSH
47880: LD_INT 17
47882: EQUAL
47883: IFFALSE 47893
// sSlow := true ;
47885: LD_ADDR_EXP 39
47889: PUSH
47890: LD_INT 1
47892: ST_TO_ADDR
// if p3 = 18 then
47893: LD_VAR 0 3
47897: PUSH
47898: LD_INT 18
47900: EQUAL
47901: IFFALSE 47911
// sLack := true ;
47903: LD_ADDR_EXP 40
47907: PUSH
47908: LD_INT 1
47910: ST_TO_ADDR
// if p3 = 19 then
47911: LD_VAR 0 3
47915: PUSH
47916: LD_INT 19
47918: EQUAL
47919: IFFALSE 47929
// sTank := true ;
47921: LD_ADDR_EXP 42
47925: PUSH
47926: LD_INT 1
47928: ST_TO_ADDR
// if p3 = 20 then
47929: LD_VAR 0 3
47933: PUSH
47934: LD_INT 20
47936: EQUAL
47937: IFFALSE 47947
// sRemote := true ;
47939: LD_ADDR_EXP 43
47943: PUSH
47944: LD_INT 1
47946: ST_TO_ADDR
// if p3 = 21 then
47947: LD_VAR 0 3
47951: PUSH
47952: LD_INT 21
47954: EQUAL
47955: IFFALSE 47965
// sPowell := true ;
47957: LD_ADDR_EXP 44
47961: PUSH
47962: LD_INT 1
47964: ST_TO_ADDR
// if p3 = 22 then
47965: LD_VAR 0 3
47969: PUSH
47970: LD_INT 22
47972: EQUAL
47973: IFFALSE 47983
// sTeleport := true ;
47975: LD_ADDR_EXP 47
47979: PUSH
47980: LD_INT 1
47982: ST_TO_ADDR
// if p3 = 23 then
47983: LD_VAR 0 3
47987: PUSH
47988: LD_INT 23
47990: EQUAL
47991: IFFALSE 48001
// sOilTower := true ;
47993: LD_ADDR_EXP 49
47997: PUSH
47998: LD_INT 1
48000: ST_TO_ADDR
// if p3 = 24 then
48001: LD_VAR 0 3
48005: PUSH
48006: LD_INT 24
48008: EQUAL
48009: IFFALSE 48019
// sShovel := true ;
48011: LD_ADDR_EXP 50
48015: PUSH
48016: LD_INT 1
48018: ST_TO_ADDR
// if p3 = 25 then
48019: LD_VAR 0 3
48023: PUSH
48024: LD_INT 25
48026: EQUAL
48027: IFFALSE 48037
// sSheik := true ;
48029: LD_ADDR_EXP 51
48033: PUSH
48034: LD_INT 1
48036: ST_TO_ADDR
// if p3 = 26 then
48037: LD_VAR 0 3
48041: PUSH
48042: LD_INT 26
48044: EQUAL
48045: IFFALSE 48055
// sEarthquake := true ;
48047: LD_ADDR_EXP 53
48051: PUSH
48052: LD_INT 1
48054: ST_TO_ADDR
// if p3 = 27 then
48055: LD_VAR 0 3
48059: PUSH
48060: LD_INT 27
48062: EQUAL
48063: IFFALSE 48073
// sAI := true ;
48065: LD_ADDR_EXP 54
48069: PUSH
48070: LD_INT 1
48072: ST_TO_ADDR
// if p3 = 28 then
48073: LD_VAR 0 3
48077: PUSH
48078: LD_INT 28
48080: EQUAL
48081: IFFALSE 48091
// sCargo := true ;
48083: LD_ADDR_EXP 57
48087: PUSH
48088: LD_INT 1
48090: ST_TO_ADDR
// if p3 = 29 then
48091: LD_VAR 0 3
48095: PUSH
48096: LD_INT 29
48098: EQUAL
48099: IFFALSE 48109
// sDLaser := true ;
48101: LD_ADDR_EXP 58
48105: PUSH
48106: LD_INT 1
48108: ST_TO_ADDR
// if p3 = 30 then
48109: LD_VAR 0 3
48113: PUSH
48114: LD_INT 30
48116: EQUAL
48117: IFFALSE 48127
// sExchange := true ;
48119: LD_ADDR_EXP 59
48123: PUSH
48124: LD_INT 1
48126: ST_TO_ADDR
// if p3 = 31 then
48127: LD_VAR 0 3
48131: PUSH
48132: LD_INT 31
48134: EQUAL
48135: IFFALSE 48145
// sFac := true ;
48137: LD_ADDR_EXP 60
48141: PUSH
48142: LD_INT 1
48144: ST_TO_ADDR
// if p3 = 32 then
48145: LD_VAR 0 3
48149: PUSH
48150: LD_INT 32
48152: EQUAL
48153: IFFALSE 48163
// sPower := true ;
48155: LD_ADDR_EXP 61
48159: PUSH
48160: LD_INT 1
48162: ST_TO_ADDR
// if p3 = 33 then
48163: LD_VAR 0 3
48167: PUSH
48168: LD_INT 33
48170: EQUAL
48171: IFFALSE 48181
// sRandom := true ;
48173: LD_ADDR_EXP 62
48177: PUSH
48178: LD_INT 1
48180: ST_TO_ADDR
// if p3 = 34 then
48181: LD_VAR 0 3
48185: PUSH
48186: LD_INT 34
48188: EQUAL
48189: IFFALSE 48199
// sShield := true ;
48191: LD_ADDR_EXP 63
48195: PUSH
48196: LD_INT 1
48198: ST_TO_ADDR
// if p3 = 35 then
48199: LD_VAR 0 3
48203: PUSH
48204: LD_INT 35
48206: EQUAL
48207: IFFALSE 48217
// sTime := true ;
48209: LD_ADDR_EXP 64
48213: PUSH
48214: LD_INT 1
48216: ST_TO_ADDR
// if p3 = 36 then
48217: LD_VAR 0 3
48221: PUSH
48222: LD_INT 36
48224: EQUAL
48225: IFFALSE 48235
// sTools := true ;
48227: LD_ADDR_EXP 65
48231: PUSH
48232: LD_INT 1
48234: ST_TO_ADDR
// if p3 = 101 then
48235: LD_VAR 0 3
48239: PUSH
48240: LD_INT 101
48242: EQUAL
48243: IFFALSE 48253
// sSold := true ;
48245: LD_ADDR_EXP 30
48249: PUSH
48250: LD_INT 1
48252: ST_TO_ADDR
// if p3 = 102 then
48253: LD_VAR 0 3
48257: PUSH
48258: LD_INT 102
48260: EQUAL
48261: IFFALSE 48271
// sDiff := true ;
48263: LD_ADDR_EXP 31
48267: PUSH
48268: LD_INT 1
48270: ST_TO_ADDR
// if p3 = 103 then
48271: LD_VAR 0 3
48275: PUSH
48276: LD_INT 103
48278: EQUAL
48279: IFFALSE 48289
// sFog := true ;
48281: LD_ADDR_EXP 34
48285: PUSH
48286: LD_INT 1
48288: ST_TO_ADDR
// if p3 = 104 then
48289: LD_VAR 0 3
48293: PUSH
48294: LD_INT 104
48296: EQUAL
48297: IFFALSE 48307
// sReset := true ;
48299: LD_ADDR_EXP 35
48303: PUSH
48304: LD_INT 1
48306: ST_TO_ADDR
// if p3 = 105 then
48307: LD_VAR 0 3
48311: PUSH
48312: LD_INT 105
48314: EQUAL
48315: IFFALSE 48325
// sSun := true ;
48317: LD_ADDR_EXP 36
48321: PUSH
48322: LD_INT 1
48324: ST_TO_ADDR
// if p3 = 106 then
48325: LD_VAR 0 3
48329: PUSH
48330: LD_INT 106
48332: EQUAL
48333: IFFALSE 48343
// sTiger := true ;
48335: LD_ADDR_EXP 32
48339: PUSH
48340: LD_INT 1
48342: ST_TO_ADDR
// if p3 = 107 then
48343: LD_VAR 0 3
48347: PUSH
48348: LD_INT 107
48350: EQUAL
48351: IFFALSE 48361
// sBomb := true ;
48353: LD_ADDR_EXP 33
48357: PUSH
48358: LD_INT 1
48360: ST_TO_ADDR
// if p3 = 108 then
48361: LD_VAR 0 3
48365: PUSH
48366: LD_INT 108
48368: EQUAL
48369: IFFALSE 48379
// sWound := true ;
48371: LD_ADDR_EXP 41
48375: PUSH
48376: LD_INT 1
48378: ST_TO_ADDR
// if p3 = 109 then
48379: LD_VAR 0 3
48383: PUSH
48384: LD_INT 109
48386: EQUAL
48387: IFFALSE 48397
// sBetray := true ;
48389: LD_ADDR_EXP 45
48393: PUSH
48394: LD_INT 1
48396: ST_TO_ADDR
// if p3 = 110 then
48397: LD_VAR 0 3
48401: PUSH
48402: LD_INT 110
48404: EQUAL
48405: IFFALSE 48415
// sContamin := true ;
48407: LD_ADDR_EXP 46
48411: PUSH
48412: LD_INT 1
48414: ST_TO_ADDR
// if p3 = 111 then
48415: LD_VAR 0 3
48419: PUSH
48420: LD_INT 111
48422: EQUAL
48423: IFFALSE 48433
// sOil := true ;
48425: LD_ADDR_EXP 48
48429: PUSH
48430: LD_INT 1
48432: ST_TO_ADDR
// if p3 = 112 then
48433: LD_VAR 0 3
48437: PUSH
48438: LD_INT 112
48440: EQUAL
48441: IFFALSE 48451
// sStu := true ;
48443: LD_ADDR_EXP 52
48447: PUSH
48448: LD_INT 1
48450: ST_TO_ADDR
// if p3 = 113 then
48451: LD_VAR 0 3
48455: PUSH
48456: LD_INT 113
48458: EQUAL
48459: IFFALSE 48469
// sBazooka := true ;
48461: LD_ADDR_EXP 55
48465: PUSH
48466: LD_INT 1
48468: ST_TO_ADDR
// if p3 = 114 then
48469: LD_VAR 0 3
48473: PUSH
48474: LD_INT 114
48476: EQUAL
48477: IFFALSE 48487
// sMortar := true ;
48479: LD_ADDR_EXP 56
48483: PUSH
48484: LD_INT 1
48486: ST_TO_ADDR
// if p3 = 115 then
48487: LD_VAR 0 3
48491: PUSH
48492: LD_INT 115
48494: EQUAL
48495: IFFALSE 48505
// sRanger := true ;
48497: LD_ADDR_EXP 66
48501: PUSH
48502: LD_INT 1
48504: ST_TO_ADDR
// if p3 = 116 then
48505: LD_VAR 0 3
48509: PUSH
48510: LD_INT 116
48512: EQUAL
48513: IFFALSE 48523
// sComputer := true ;
48515: LD_ADDR_EXP 67
48519: PUSH
48520: LD_INT 1
48522: ST_TO_ADDR
// if p3 = 117 then
48523: LD_VAR 0 3
48527: PUSH
48528: LD_INT 117
48530: EQUAL
48531: IFFALSE 48541
// s30 := true ;
48533: LD_ADDR_EXP 68
48537: PUSH
48538: LD_INT 1
48540: ST_TO_ADDR
// if p3 = 118 then
48541: LD_VAR 0 3
48545: PUSH
48546: LD_INT 118
48548: EQUAL
48549: IFFALSE 48559
// s60 := true ;
48551: LD_ADDR_EXP 69
48555: PUSH
48556: LD_INT 1
48558: ST_TO_ADDR
// end ; if p2 = hack_mode then
48559: LD_VAR 0 2
48563: PUSH
48564: LD_INT 101
48566: EQUAL
48567: IFFALSE 48695
// begin case p3 of 1 :
48569: LD_VAR 0 3
48573: PUSH
48574: LD_INT 1
48576: DOUBLE
48577: EQUAL
48578: IFTRUE 48582
48580: GO 48589
48582: POP
// hHackUnlimitedResources ; 2 :
48583: CALL 60842 0 0
48587: GO 48695
48589: LD_INT 2
48591: DOUBLE
48592: EQUAL
48593: IFTRUE 48597
48595: GO 48604
48597: POP
// hHackSetLevel10 ; 3 :
48598: CALL 60975 0 0
48602: GO 48695
48604: LD_INT 3
48606: DOUBLE
48607: EQUAL
48608: IFTRUE 48612
48610: GO 48619
48612: POP
// hHackSetLevel10YourUnits ; 4 :
48613: CALL 61060 0 0
48617: GO 48695
48619: LD_INT 4
48621: DOUBLE
48622: EQUAL
48623: IFTRUE 48627
48625: GO 48634
48627: POP
// hHackInvincible ; 5 :
48628: CALL 61508 0 0
48632: GO 48695
48634: LD_INT 5
48636: DOUBLE
48637: EQUAL
48638: IFTRUE 48642
48640: GO 48649
48642: POP
// hHackInvisible ; 6 :
48643: CALL 61619 0 0
48647: GO 48695
48649: LD_INT 6
48651: DOUBLE
48652: EQUAL
48653: IFTRUE 48657
48655: GO 48664
48657: POP
// hHackChangeYourSide ; 7 :
48658: CALL 61676 0 0
48662: GO 48695
48664: LD_INT 7
48666: DOUBLE
48667: EQUAL
48668: IFTRUE 48672
48670: GO 48679
48672: POP
// hHackChangeUnitSide ; 8 :
48673: CALL 61718 0 0
48677: GO 48695
48679: LD_INT 8
48681: DOUBLE
48682: EQUAL
48683: IFTRUE 48687
48685: GO 48694
48687: POP
// hHackFog ; end ;
48688: CALL 61819 0 0
48692: GO 48695
48694: POP
// end ; if p2 = game_save_mode then
48695: LD_VAR 0 2
48699: PUSH
48700: LD_INT 102
48702: EQUAL
48703: IFFALSE 48758
// begin if p3 = 1 then
48705: LD_VAR 0 3
48709: PUSH
48710: LD_INT 1
48712: EQUAL
48713: IFFALSE 48725
// globalGameSaveCounter := p4 ;
48715: LD_ADDR_EXP 12
48719: PUSH
48720: LD_VAR 0 4
48724: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
48725: LD_VAR 0 3
48729: PUSH
48730: LD_INT 2
48732: EQUAL
48733: PUSH
48734: LD_EXP 12
48738: AND
48739: IFFALSE 48758
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
48741: LD_STRING setGameSaveCounter(
48743: PUSH
48744: LD_EXP 12
48748: STR
48749: PUSH
48750: LD_STRING )
48752: STR
48753: PPUSH
48754: CALL_OW 559
// end ; end ;
48758: LD_VAR 0 7
48762: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
48763: LD_INT 0
48765: PPUSH
// streamModeActive := false ;
48766: LD_ADDR_EXP 13
48770: PUSH
48771: LD_INT 0
48773: ST_TO_ADDR
// normalCounter := 36 ;
48774: LD_ADDR_EXP 14
48778: PUSH
48779: LD_INT 36
48781: ST_TO_ADDR
// hardcoreCounter := 18 ;
48782: LD_ADDR_EXP 15
48786: PUSH
48787: LD_INT 18
48789: ST_TO_ADDR
// sRocket := false ;
48790: LD_ADDR_EXP 18
48794: PUSH
48795: LD_INT 0
48797: ST_TO_ADDR
// sSpeed := false ;
48798: LD_ADDR_EXP 17
48802: PUSH
48803: LD_INT 0
48805: ST_TO_ADDR
// sEngine := false ;
48806: LD_ADDR_EXP 19
48810: PUSH
48811: LD_INT 0
48813: ST_TO_ADDR
// sSpec := false ;
48814: LD_ADDR_EXP 16
48818: PUSH
48819: LD_INT 0
48821: ST_TO_ADDR
// sLevel := false ;
48822: LD_ADDR_EXP 20
48826: PUSH
48827: LD_INT 0
48829: ST_TO_ADDR
// sArmoury := false ;
48830: LD_ADDR_EXP 21
48834: PUSH
48835: LD_INT 0
48837: ST_TO_ADDR
// sRadar := false ;
48838: LD_ADDR_EXP 22
48842: PUSH
48843: LD_INT 0
48845: ST_TO_ADDR
// sBunker := false ;
48846: LD_ADDR_EXP 23
48850: PUSH
48851: LD_INT 0
48853: ST_TO_ADDR
// sHack := false ;
48854: LD_ADDR_EXP 24
48858: PUSH
48859: LD_INT 0
48861: ST_TO_ADDR
// sFire := false ;
48862: LD_ADDR_EXP 25
48866: PUSH
48867: LD_INT 0
48869: ST_TO_ADDR
// sRefresh := false ;
48870: LD_ADDR_EXP 26
48874: PUSH
48875: LD_INT 0
48877: ST_TO_ADDR
// sExp := false ;
48878: LD_ADDR_EXP 27
48882: PUSH
48883: LD_INT 0
48885: ST_TO_ADDR
// sDepot := false ;
48886: LD_ADDR_EXP 28
48890: PUSH
48891: LD_INT 0
48893: ST_TO_ADDR
// sFlag := false ;
48894: LD_ADDR_EXP 29
48898: PUSH
48899: LD_INT 0
48901: ST_TO_ADDR
// sKamikadze := false ;
48902: LD_ADDR_EXP 37
48906: PUSH
48907: LD_INT 0
48909: ST_TO_ADDR
// sTroll := false ;
48910: LD_ADDR_EXP 38
48914: PUSH
48915: LD_INT 0
48917: ST_TO_ADDR
// sSlow := false ;
48918: LD_ADDR_EXP 39
48922: PUSH
48923: LD_INT 0
48925: ST_TO_ADDR
// sLack := false ;
48926: LD_ADDR_EXP 40
48930: PUSH
48931: LD_INT 0
48933: ST_TO_ADDR
// sTank := false ;
48934: LD_ADDR_EXP 42
48938: PUSH
48939: LD_INT 0
48941: ST_TO_ADDR
// sRemote := false ;
48942: LD_ADDR_EXP 43
48946: PUSH
48947: LD_INT 0
48949: ST_TO_ADDR
// sPowell := false ;
48950: LD_ADDR_EXP 44
48954: PUSH
48955: LD_INT 0
48957: ST_TO_ADDR
// sTeleport := false ;
48958: LD_ADDR_EXP 47
48962: PUSH
48963: LD_INT 0
48965: ST_TO_ADDR
// sOilTower := false ;
48966: LD_ADDR_EXP 49
48970: PUSH
48971: LD_INT 0
48973: ST_TO_ADDR
// sShovel := false ;
48974: LD_ADDR_EXP 50
48978: PUSH
48979: LD_INT 0
48981: ST_TO_ADDR
// sSheik := false ;
48982: LD_ADDR_EXP 51
48986: PUSH
48987: LD_INT 0
48989: ST_TO_ADDR
// sEarthquake := false ;
48990: LD_ADDR_EXP 53
48994: PUSH
48995: LD_INT 0
48997: ST_TO_ADDR
// sAI := false ;
48998: LD_ADDR_EXP 54
49002: PUSH
49003: LD_INT 0
49005: ST_TO_ADDR
// sCargo := false ;
49006: LD_ADDR_EXP 57
49010: PUSH
49011: LD_INT 0
49013: ST_TO_ADDR
// sDLaser := false ;
49014: LD_ADDR_EXP 58
49018: PUSH
49019: LD_INT 0
49021: ST_TO_ADDR
// sExchange := false ;
49022: LD_ADDR_EXP 59
49026: PUSH
49027: LD_INT 0
49029: ST_TO_ADDR
// sFac := false ;
49030: LD_ADDR_EXP 60
49034: PUSH
49035: LD_INT 0
49037: ST_TO_ADDR
// sPower := false ;
49038: LD_ADDR_EXP 61
49042: PUSH
49043: LD_INT 0
49045: ST_TO_ADDR
// sRandom := false ;
49046: LD_ADDR_EXP 62
49050: PUSH
49051: LD_INT 0
49053: ST_TO_ADDR
// sShield := false ;
49054: LD_ADDR_EXP 63
49058: PUSH
49059: LD_INT 0
49061: ST_TO_ADDR
// sTime := false ;
49062: LD_ADDR_EXP 64
49066: PUSH
49067: LD_INT 0
49069: ST_TO_ADDR
// sTools := false ;
49070: LD_ADDR_EXP 65
49074: PUSH
49075: LD_INT 0
49077: ST_TO_ADDR
// sSold := false ;
49078: LD_ADDR_EXP 30
49082: PUSH
49083: LD_INT 0
49085: ST_TO_ADDR
// sDiff := false ;
49086: LD_ADDR_EXP 31
49090: PUSH
49091: LD_INT 0
49093: ST_TO_ADDR
// sFog := false ;
49094: LD_ADDR_EXP 34
49098: PUSH
49099: LD_INT 0
49101: ST_TO_ADDR
// sReset := false ;
49102: LD_ADDR_EXP 35
49106: PUSH
49107: LD_INT 0
49109: ST_TO_ADDR
// sSun := false ;
49110: LD_ADDR_EXP 36
49114: PUSH
49115: LD_INT 0
49117: ST_TO_ADDR
// sTiger := false ;
49118: LD_ADDR_EXP 32
49122: PUSH
49123: LD_INT 0
49125: ST_TO_ADDR
// sBomb := false ;
49126: LD_ADDR_EXP 33
49130: PUSH
49131: LD_INT 0
49133: ST_TO_ADDR
// sWound := false ;
49134: LD_ADDR_EXP 41
49138: PUSH
49139: LD_INT 0
49141: ST_TO_ADDR
// sBetray := false ;
49142: LD_ADDR_EXP 45
49146: PUSH
49147: LD_INT 0
49149: ST_TO_ADDR
// sContamin := false ;
49150: LD_ADDR_EXP 46
49154: PUSH
49155: LD_INT 0
49157: ST_TO_ADDR
// sOil := false ;
49158: LD_ADDR_EXP 48
49162: PUSH
49163: LD_INT 0
49165: ST_TO_ADDR
// sStu := false ;
49166: LD_ADDR_EXP 52
49170: PUSH
49171: LD_INT 0
49173: ST_TO_ADDR
// sBazooka := false ;
49174: LD_ADDR_EXP 55
49178: PUSH
49179: LD_INT 0
49181: ST_TO_ADDR
// sMortar := false ;
49182: LD_ADDR_EXP 56
49186: PUSH
49187: LD_INT 0
49189: ST_TO_ADDR
// sRanger := false ;
49190: LD_ADDR_EXP 66
49194: PUSH
49195: LD_INT 0
49197: ST_TO_ADDR
// sComputer := false ;
49198: LD_ADDR_EXP 67
49202: PUSH
49203: LD_INT 0
49205: ST_TO_ADDR
// s30 := false ;
49206: LD_ADDR_EXP 68
49210: PUSH
49211: LD_INT 0
49213: ST_TO_ADDR
// s60 := false ;
49214: LD_ADDR_EXP 69
49218: PUSH
49219: LD_INT 0
49221: ST_TO_ADDR
// end ;
49222: LD_VAR 0 1
49226: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
49227: LD_INT 0
49229: PPUSH
49230: PPUSH
49231: PPUSH
49232: PPUSH
49233: PPUSH
49234: PPUSH
49235: PPUSH
// result := [ ] ;
49236: LD_ADDR_VAR 0 2
49240: PUSH
49241: EMPTY
49242: ST_TO_ADDR
// if campaign_id = 1 then
49243: LD_OWVAR 69
49247: PUSH
49248: LD_INT 1
49250: EQUAL
49251: IFFALSE 52417
// begin case mission_number of 1 :
49253: LD_OWVAR 70
49257: PUSH
49258: LD_INT 1
49260: DOUBLE
49261: EQUAL
49262: IFTRUE 49266
49264: GO 49342
49266: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
49267: LD_ADDR_VAR 0 2
49271: PUSH
49272: LD_INT 2
49274: PUSH
49275: LD_INT 4
49277: PUSH
49278: LD_INT 11
49280: PUSH
49281: LD_INT 12
49283: PUSH
49284: LD_INT 15
49286: PUSH
49287: LD_INT 16
49289: PUSH
49290: LD_INT 22
49292: PUSH
49293: LD_INT 23
49295: PUSH
49296: LD_INT 26
49298: PUSH
49299: EMPTY
49300: LIST
49301: LIST
49302: LIST
49303: LIST
49304: LIST
49305: LIST
49306: LIST
49307: LIST
49308: LIST
49309: PUSH
49310: LD_INT 101
49312: PUSH
49313: LD_INT 102
49315: PUSH
49316: LD_INT 106
49318: PUSH
49319: LD_INT 116
49321: PUSH
49322: LD_INT 117
49324: PUSH
49325: LD_INT 118
49327: PUSH
49328: EMPTY
49329: LIST
49330: LIST
49331: LIST
49332: LIST
49333: LIST
49334: LIST
49335: PUSH
49336: EMPTY
49337: LIST
49338: LIST
49339: ST_TO_ADDR
49340: GO 52415
49342: LD_INT 2
49344: DOUBLE
49345: EQUAL
49346: IFTRUE 49350
49348: GO 49434
49350: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
49351: LD_ADDR_VAR 0 2
49355: PUSH
49356: LD_INT 2
49358: PUSH
49359: LD_INT 4
49361: PUSH
49362: LD_INT 11
49364: PUSH
49365: LD_INT 12
49367: PUSH
49368: LD_INT 15
49370: PUSH
49371: LD_INT 16
49373: PUSH
49374: LD_INT 22
49376: PUSH
49377: LD_INT 23
49379: PUSH
49380: LD_INT 26
49382: PUSH
49383: EMPTY
49384: LIST
49385: LIST
49386: LIST
49387: LIST
49388: LIST
49389: LIST
49390: LIST
49391: LIST
49392: LIST
49393: PUSH
49394: LD_INT 101
49396: PUSH
49397: LD_INT 102
49399: PUSH
49400: LD_INT 105
49402: PUSH
49403: LD_INT 106
49405: PUSH
49406: LD_INT 108
49408: PUSH
49409: LD_INT 116
49411: PUSH
49412: LD_INT 117
49414: PUSH
49415: LD_INT 118
49417: PUSH
49418: EMPTY
49419: LIST
49420: LIST
49421: LIST
49422: LIST
49423: LIST
49424: LIST
49425: LIST
49426: LIST
49427: PUSH
49428: EMPTY
49429: LIST
49430: LIST
49431: ST_TO_ADDR
49432: GO 52415
49434: LD_INT 3
49436: DOUBLE
49437: EQUAL
49438: IFTRUE 49442
49440: GO 49530
49442: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
49443: LD_ADDR_VAR 0 2
49447: PUSH
49448: LD_INT 2
49450: PUSH
49451: LD_INT 4
49453: PUSH
49454: LD_INT 5
49456: PUSH
49457: LD_INT 11
49459: PUSH
49460: LD_INT 12
49462: PUSH
49463: LD_INT 15
49465: PUSH
49466: LD_INT 16
49468: PUSH
49469: LD_INT 22
49471: PUSH
49472: LD_INT 26
49474: PUSH
49475: LD_INT 36
49477: PUSH
49478: EMPTY
49479: LIST
49480: LIST
49481: LIST
49482: LIST
49483: LIST
49484: LIST
49485: LIST
49486: LIST
49487: LIST
49488: LIST
49489: PUSH
49490: LD_INT 101
49492: PUSH
49493: LD_INT 102
49495: PUSH
49496: LD_INT 105
49498: PUSH
49499: LD_INT 106
49501: PUSH
49502: LD_INT 108
49504: PUSH
49505: LD_INT 116
49507: PUSH
49508: LD_INT 117
49510: PUSH
49511: LD_INT 118
49513: PUSH
49514: EMPTY
49515: LIST
49516: LIST
49517: LIST
49518: LIST
49519: LIST
49520: LIST
49521: LIST
49522: LIST
49523: PUSH
49524: EMPTY
49525: LIST
49526: LIST
49527: ST_TO_ADDR
49528: GO 52415
49530: LD_INT 4
49532: DOUBLE
49533: EQUAL
49534: IFTRUE 49538
49536: GO 49634
49538: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
49539: LD_ADDR_VAR 0 2
49543: PUSH
49544: LD_INT 2
49546: PUSH
49547: LD_INT 4
49549: PUSH
49550: LD_INT 5
49552: PUSH
49553: LD_INT 8
49555: PUSH
49556: LD_INT 11
49558: PUSH
49559: LD_INT 12
49561: PUSH
49562: LD_INT 15
49564: PUSH
49565: LD_INT 16
49567: PUSH
49568: LD_INT 22
49570: PUSH
49571: LD_INT 23
49573: PUSH
49574: LD_INT 26
49576: PUSH
49577: LD_INT 36
49579: PUSH
49580: EMPTY
49581: LIST
49582: LIST
49583: LIST
49584: LIST
49585: LIST
49586: LIST
49587: LIST
49588: LIST
49589: LIST
49590: LIST
49591: LIST
49592: LIST
49593: PUSH
49594: LD_INT 101
49596: PUSH
49597: LD_INT 102
49599: PUSH
49600: LD_INT 105
49602: PUSH
49603: LD_INT 106
49605: PUSH
49606: LD_INT 108
49608: PUSH
49609: LD_INT 116
49611: PUSH
49612: LD_INT 117
49614: PUSH
49615: LD_INT 118
49617: PUSH
49618: EMPTY
49619: LIST
49620: LIST
49621: LIST
49622: LIST
49623: LIST
49624: LIST
49625: LIST
49626: LIST
49627: PUSH
49628: EMPTY
49629: LIST
49630: LIST
49631: ST_TO_ADDR
49632: GO 52415
49634: LD_INT 5
49636: DOUBLE
49637: EQUAL
49638: IFTRUE 49642
49640: GO 49754
49642: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
49643: LD_ADDR_VAR 0 2
49647: PUSH
49648: LD_INT 2
49650: PUSH
49651: LD_INT 4
49653: PUSH
49654: LD_INT 5
49656: PUSH
49657: LD_INT 6
49659: PUSH
49660: LD_INT 8
49662: PUSH
49663: LD_INT 11
49665: PUSH
49666: LD_INT 12
49668: PUSH
49669: LD_INT 15
49671: PUSH
49672: LD_INT 16
49674: PUSH
49675: LD_INT 22
49677: PUSH
49678: LD_INT 23
49680: PUSH
49681: LD_INT 25
49683: PUSH
49684: LD_INT 26
49686: PUSH
49687: LD_INT 36
49689: PUSH
49690: EMPTY
49691: LIST
49692: LIST
49693: LIST
49694: LIST
49695: LIST
49696: LIST
49697: LIST
49698: LIST
49699: LIST
49700: LIST
49701: LIST
49702: LIST
49703: LIST
49704: LIST
49705: PUSH
49706: LD_INT 101
49708: PUSH
49709: LD_INT 102
49711: PUSH
49712: LD_INT 105
49714: PUSH
49715: LD_INT 106
49717: PUSH
49718: LD_INT 108
49720: PUSH
49721: LD_INT 109
49723: PUSH
49724: LD_INT 112
49726: PUSH
49727: LD_INT 116
49729: PUSH
49730: LD_INT 117
49732: PUSH
49733: LD_INT 118
49735: PUSH
49736: EMPTY
49737: LIST
49738: LIST
49739: LIST
49740: LIST
49741: LIST
49742: LIST
49743: LIST
49744: LIST
49745: LIST
49746: LIST
49747: PUSH
49748: EMPTY
49749: LIST
49750: LIST
49751: ST_TO_ADDR
49752: GO 52415
49754: LD_INT 6
49756: DOUBLE
49757: EQUAL
49758: IFTRUE 49762
49760: GO 49894
49762: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
49763: LD_ADDR_VAR 0 2
49767: PUSH
49768: LD_INT 2
49770: PUSH
49771: LD_INT 4
49773: PUSH
49774: LD_INT 5
49776: PUSH
49777: LD_INT 6
49779: PUSH
49780: LD_INT 8
49782: PUSH
49783: LD_INT 11
49785: PUSH
49786: LD_INT 12
49788: PUSH
49789: LD_INT 15
49791: PUSH
49792: LD_INT 16
49794: PUSH
49795: LD_INT 20
49797: PUSH
49798: LD_INT 21
49800: PUSH
49801: LD_INT 22
49803: PUSH
49804: LD_INT 23
49806: PUSH
49807: LD_INT 25
49809: PUSH
49810: LD_INT 26
49812: PUSH
49813: LD_INT 30
49815: PUSH
49816: LD_INT 31
49818: PUSH
49819: LD_INT 32
49821: PUSH
49822: LD_INT 36
49824: PUSH
49825: EMPTY
49826: LIST
49827: LIST
49828: LIST
49829: LIST
49830: LIST
49831: LIST
49832: LIST
49833: LIST
49834: LIST
49835: LIST
49836: LIST
49837: LIST
49838: LIST
49839: LIST
49840: LIST
49841: LIST
49842: LIST
49843: LIST
49844: LIST
49845: PUSH
49846: LD_INT 101
49848: PUSH
49849: LD_INT 102
49851: PUSH
49852: LD_INT 105
49854: PUSH
49855: LD_INT 106
49857: PUSH
49858: LD_INT 108
49860: PUSH
49861: LD_INT 109
49863: PUSH
49864: LD_INT 112
49866: PUSH
49867: LD_INT 116
49869: PUSH
49870: LD_INT 117
49872: PUSH
49873: LD_INT 118
49875: PUSH
49876: EMPTY
49877: LIST
49878: LIST
49879: LIST
49880: LIST
49881: LIST
49882: LIST
49883: LIST
49884: LIST
49885: LIST
49886: LIST
49887: PUSH
49888: EMPTY
49889: LIST
49890: LIST
49891: ST_TO_ADDR
49892: GO 52415
49894: LD_INT 7
49896: DOUBLE
49897: EQUAL
49898: IFTRUE 49902
49900: GO 50014
49902: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
49903: LD_ADDR_VAR 0 2
49907: PUSH
49908: LD_INT 2
49910: PUSH
49911: LD_INT 4
49913: PUSH
49914: LD_INT 5
49916: PUSH
49917: LD_INT 7
49919: PUSH
49920: LD_INT 11
49922: PUSH
49923: LD_INT 12
49925: PUSH
49926: LD_INT 15
49928: PUSH
49929: LD_INT 16
49931: PUSH
49932: LD_INT 20
49934: PUSH
49935: LD_INT 21
49937: PUSH
49938: LD_INT 22
49940: PUSH
49941: LD_INT 23
49943: PUSH
49944: LD_INT 25
49946: PUSH
49947: LD_INT 26
49949: PUSH
49950: EMPTY
49951: LIST
49952: LIST
49953: LIST
49954: LIST
49955: LIST
49956: LIST
49957: LIST
49958: LIST
49959: LIST
49960: LIST
49961: LIST
49962: LIST
49963: LIST
49964: LIST
49965: PUSH
49966: LD_INT 101
49968: PUSH
49969: LD_INT 102
49971: PUSH
49972: LD_INT 103
49974: PUSH
49975: LD_INT 105
49977: PUSH
49978: LD_INT 106
49980: PUSH
49981: LD_INT 108
49983: PUSH
49984: LD_INT 112
49986: PUSH
49987: LD_INT 116
49989: PUSH
49990: LD_INT 117
49992: PUSH
49993: LD_INT 118
49995: PUSH
49996: EMPTY
49997: LIST
49998: LIST
49999: LIST
50000: LIST
50001: LIST
50002: LIST
50003: LIST
50004: LIST
50005: LIST
50006: LIST
50007: PUSH
50008: EMPTY
50009: LIST
50010: LIST
50011: ST_TO_ADDR
50012: GO 52415
50014: LD_INT 8
50016: DOUBLE
50017: EQUAL
50018: IFTRUE 50022
50020: GO 50162
50022: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
50023: LD_ADDR_VAR 0 2
50027: PUSH
50028: LD_INT 2
50030: PUSH
50031: LD_INT 4
50033: PUSH
50034: LD_INT 5
50036: PUSH
50037: LD_INT 6
50039: PUSH
50040: LD_INT 7
50042: PUSH
50043: LD_INT 8
50045: PUSH
50046: LD_INT 11
50048: PUSH
50049: LD_INT 12
50051: PUSH
50052: LD_INT 15
50054: PUSH
50055: LD_INT 16
50057: PUSH
50058: LD_INT 20
50060: PUSH
50061: LD_INT 21
50063: PUSH
50064: LD_INT 22
50066: PUSH
50067: LD_INT 23
50069: PUSH
50070: LD_INT 25
50072: PUSH
50073: LD_INT 26
50075: PUSH
50076: LD_INT 30
50078: PUSH
50079: LD_INT 31
50081: PUSH
50082: LD_INT 32
50084: PUSH
50085: LD_INT 36
50087: PUSH
50088: EMPTY
50089: LIST
50090: LIST
50091: LIST
50092: LIST
50093: LIST
50094: LIST
50095: LIST
50096: LIST
50097: LIST
50098: LIST
50099: LIST
50100: LIST
50101: LIST
50102: LIST
50103: LIST
50104: LIST
50105: LIST
50106: LIST
50107: LIST
50108: LIST
50109: PUSH
50110: LD_INT 101
50112: PUSH
50113: LD_INT 102
50115: PUSH
50116: LD_INT 103
50118: PUSH
50119: LD_INT 105
50121: PUSH
50122: LD_INT 106
50124: PUSH
50125: LD_INT 108
50127: PUSH
50128: LD_INT 109
50130: PUSH
50131: LD_INT 112
50133: PUSH
50134: LD_INT 116
50136: PUSH
50137: LD_INT 117
50139: PUSH
50140: LD_INT 118
50142: PUSH
50143: EMPTY
50144: LIST
50145: LIST
50146: LIST
50147: LIST
50148: LIST
50149: LIST
50150: LIST
50151: LIST
50152: LIST
50153: LIST
50154: LIST
50155: PUSH
50156: EMPTY
50157: LIST
50158: LIST
50159: ST_TO_ADDR
50160: GO 52415
50162: LD_INT 9
50164: DOUBLE
50165: EQUAL
50166: IFTRUE 50170
50168: GO 50318
50170: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
50171: LD_ADDR_VAR 0 2
50175: PUSH
50176: LD_INT 2
50178: PUSH
50179: LD_INT 4
50181: PUSH
50182: LD_INT 5
50184: PUSH
50185: LD_INT 6
50187: PUSH
50188: LD_INT 7
50190: PUSH
50191: LD_INT 8
50193: PUSH
50194: LD_INT 11
50196: PUSH
50197: LD_INT 12
50199: PUSH
50200: LD_INT 15
50202: PUSH
50203: LD_INT 16
50205: PUSH
50206: LD_INT 20
50208: PUSH
50209: LD_INT 21
50211: PUSH
50212: LD_INT 22
50214: PUSH
50215: LD_INT 23
50217: PUSH
50218: LD_INT 25
50220: PUSH
50221: LD_INT 26
50223: PUSH
50224: LD_INT 28
50226: PUSH
50227: LD_INT 30
50229: PUSH
50230: LD_INT 31
50232: PUSH
50233: LD_INT 32
50235: PUSH
50236: LD_INT 36
50238: PUSH
50239: EMPTY
50240: LIST
50241: LIST
50242: LIST
50243: LIST
50244: LIST
50245: LIST
50246: LIST
50247: LIST
50248: LIST
50249: LIST
50250: LIST
50251: LIST
50252: LIST
50253: LIST
50254: LIST
50255: LIST
50256: LIST
50257: LIST
50258: LIST
50259: LIST
50260: LIST
50261: PUSH
50262: LD_INT 101
50264: PUSH
50265: LD_INT 102
50267: PUSH
50268: LD_INT 103
50270: PUSH
50271: LD_INT 105
50273: PUSH
50274: LD_INT 106
50276: PUSH
50277: LD_INT 108
50279: PUSH
50280: LD_INT 109
50282: PUSH
50283: LD_INT 112
50285: PUSH
50286: LD_INT 114
50288: PUSH
50289: LD_INT 116
50291: PUSH
50292: LD_INT 117
50294: PUSH
50295: LD_INT 118
50297: PUSH
50298: EMPTY
50299: LIST
50300: LIST
50301: LIST
50302: LIST
50303: LIST
50304: LIST
50305: LIST
50306: LIST
50307: LIST
50308: LIST
50309: LIST
50310: LIST
50311: PUSH
50312: EMPTY
50313: LIST
50314: LIST
50315: ST_TO_ADDR
50316: GO 52415
50318: LD_INT 10
50320: DOUBLE
50321: EQUAL
50322: IFTRUE 50326
50324: GO 50522
50326: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
50327: LD_ADDR_VAR 0 2
50331: PUSH
50332: LD_INT 2
50334: PUSH
50335: LD_INT 4
50337: PUSH
50338: LD_INT 5
50340: PUSH
50341: LD_INT 6
50343: PUSH
50344: LD_INT 7
50346: PUSH
50347: LD_INT 8
50349: PUSH
50350: LD_INT 9
50352: PUSH
50353: LD_INT 10
50355: PUSH
50356: LD_INT 11
50358: PUSH
50359: LD_INT 12
50361: PUSH
50362: LD_INT 13
50364: PUSH
50365: LD_INT 14
50367: PUSH
50368: LD_INT 15
50370: PUSH
50371: LD_INT 16
50373: PUSH
50374: LD_INT 17
50376: PUSH
50377: LD_INT 18
50379: PUSH
50380: LD_INT 19
50382: PUSH
50383: LD_INT 20
50385: PUSH
50386: LD_INT 21
50388: PUSH
50389: LD_INT 22
50391: PUSH
50392: LD_INT 23
50394: PUSH
50395: LD_INT 24
50397: PUSH
50398: LD_INT 25
50400: PUSH
50401: LD_INT 26
50403: PUSH
50404: LD_INT 28
50406: PUSH
50407: LD_INT 30
50409: PUSH
50410: LD_INT 31
50412: PUSH
50413: LD_INT 32
50415: PUSH
50416: LD_INT 36
50418: PUSH
50419: EMPTY
50420: LIST
50421: LIST
50422: LIST
50423: LIST
50424: LIST
50425: LIST
50426: LIST
50427: LIST
50428: LIST
50429: LIST
50430: LIST
50431: LIST
50432: LIST
50433: LIST
50434: LIST
50435: LIST
50436: LIST
50437: LIST
50438: LIST
50439: LIST
50440: LIST
50441: LIST
50442: LIST
50443: LIST
50444: LIST
50445: LIST
50446: LIST
50447: LIST
50448: LIST
50449: PUSH
50450: LD_INT 101
50452: PUSH
50453: LD_INT 102
50455: PUSH
50456: LD_INT 103
50458: PUSH
50459: LD_INT 104
50461: PUSH
50462: LD_INT 105
50464: PUSH
50465: LD_INT 106
50467: PUSH
50468: LD_INT 107
50470: PUSH
50471: LD_INT 108
50473: PUSH
50474: LD_INT 109
50476: PUSH
50477: LD_INT 110
50479: PUSH
50480: LD_INT 111
50482: PUSH
50483: LD_INT 112
50485: PUSH
50486: LD_INT 114
50488: PUSH
50489: LD_INT 116
50491: PUSH
50492: LD_INT 117
50494: PUSH
50495: LD_INT 118
50497: PUSH
50498: EMPTY
50499: LIST
50500: LIST
50501: LIST
50502: LIST
50503: LIST
50504: LIST
50505: LIST
50506: LIST
50507: LIST
50508: LIST
50509: LIST
50510: LIST
50511: LIST
50512: LIST
50513: LIST
50514: LIST
50515: PUSH
50516: EMPTY
50517: LIST
50518: LIST
50519: ST_TO_ADDR
50520: GO 52415
50522: LD_INT 11
50524: DOUBLE
50525: EQUAL
50526: IFTRUE 50530
50528: GO 50734
50530: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
50531: LD_ADDR_VAR 0 2
50535: PUSH
50536: LD_INT 2
50538: PUSH
50539: LD_INT 3
50541: PUSH
50542: LD_INT 4
50544: PUSH
50545: LD_INT 5
50547: PUSH
50548: LD_INT 6
50550: PUSH
50551: LD_INT 7
50553: PUSH
50554: LD_INT 8
50556: PUSH
50557: LD_INT 9
50559: PUSH
50560: LD_INT 10
50562: PUSH
50563: LD_INT 11
50565: PUSH
50566: LD_INT 12
50568: PUSH
50569: LD_INT 13
50571: PUSH
50572: LD_INT 14
50574: PUSH
50575: LD_INT 15
50577: PUSH
50578: LD_INT 16
50580: PUSH
50581: LD_INT 17
50583: PUSH
50584: LD_INT 18
50586: PUSH
50587: LD_INT 19
50589: PUSH
50590: LD_INT 20
50592: PUSH
50593: LD_INT 21
50595: PUSH
50596: LD_INT 22
50598: PUSH
50599: LD_INT 23
50601: PUSH
50602: LD_INT 24
50604: PUSH
50605: LD_INT 25
50607: PUSH
50608: LD_INT 26
50610: PUSH
50611: LD_INT 28
50613: PUSH
50614: LD_INT 30
50616: PUSH
50617: LD_INT 31
50619: PUSH
50620: LD_INT 32
50622: PUSH
50623: LD_INT 34
50625: PUSH
50626: LD_INT 36
50628: PUSH
50629: EMPTY
50630: LIST
50631: LIST
50632: LIST
50633: LIST
50634: LIST
50635: LIST
50636: LIST
50637: LIST
50638: LIST
50639: LIST
50640: LIST
50641: LIST
50642: LIST
50643: LIST
50644: LIST
50645: LIST
50646: LIST
50647: LIST
50648: LIST
50649: LIST
50650: LIST
50651: LIST
50652: LIST
50653: LIST
50654: LIST
50655: LIST
50656: LIST
50657: LIST
50658: LIST
50659: LIST
50660: LIST
50661: PUSH
50662: LD_INT 101
50664: PUSH
50665: LD_INT 102
50667: PUSH
50668: LD_INT 103
50670: PUSH
50671: LD_INT 104
50673: PUSH
50674: LD_INT 105
50676: PUSH
50677: LD_INT 106
50679: PUSH
50680: LD_INT 107
50682: PUSH
50683: LD_INT 108
50685: PUSH
50686: LD_INT 109
50688: PUSH
50689: LD_INT 110
50691: PUSH
50692: LD_INT 111
50694: PUSH
50695: LD_INT 112
50697: PUSH
50698: LD_INT 114
50700: PUSH
50701: LD_INT 116
50703: PUSH
50704: LD_INT 117
50706: PUSH
50707: LD_INT 118
50709: PUSH
50710: EMPTY
50711: LIST
50712: LIST
50713: LIST
50714: LIST
50715: LIST
50716: LIST
50717: LIST
50718: LIST
50719: LIST
50720: LIST
50721: LIST
50722: LIST
50723: LIST
50724: LIST
50725: LIST
50726: LIST
50727: PUSH
50728: EMPTY
50729: LIST
50730: LIST
50731: ST_TO_ADDR
50732: GO 52415
50734: LD_INT 12
50736: DOUBLE
50737: EQUAL
50738: IFTRUE 50742
50740: GO 50962
50742: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
50743: LD_ADDR_VAR 0 2
50747: PUSH
50748: LD_INT 1
50750: PUSH
50751: LD_INT 2
50753: PUSH
50754: LD_INT 3
50756: PUSH
50757: LD_INT 4
50759: PUSH
50760: LD_INT 5
50762: PUSH
50763: LD_INT 6
50765: PUSH
50766: LD_INT 7
50768: PUSH
50769: LD_INT 8
50771: PUSH
50772: LD_INT 9
50774: PUSH
50775: LD_INT 10
50777: PUSH
50778: LD_INT 11
50780: PUSH
50781: LD_INT 12
50783: PUSH
50784: LD_INT 13
50786: PUSH
50787: LD_INT 14
50789: PUSH
50790: LD_INT 15
50792: PUSH
50793: LD_INT 16
50795: PUSH
50796: LD_INT 17
50798: PUSH
50799: LD_INT 18
50801: PUSH
50802: LD_INT 19
50804: PUSH
50805: LD_INT 20
50807: PUSH
50808: LD_INT 21
50810: PUSH
50811: LD_INT 22
50813: PUSH
50814: LD_INT 23
50816: PUSH
50817: LD_INT 24
50819: PUSH
50820: LD_INT 25
50822: PUSH
50823: LD_INT 26
50825: PUSH
50826: LD_INT 27
50828: PUSH
50829: LD_INT 28
50831: PUSH
50832: LD_INT 30
50834: PUSH
50835: LD_INT 31
50837: PUSH
50838: LD_INT 32
50840: PUSH
50841: LD_INT 33
50843: PUSH
50844: LD_INT 34
50846: PUSH
50847: LD_INT 36
50849: PUSH
50850: EMPTY
50851: LIST
50852: LIST
50853: LIST
50854: LIST
50855: LIST
50856: LIST
50857: LIST
50858: LIST
50859: LIST
50860: LIST
50861: LIST
50862: LIST
50863: LIST
50864: LIST
50865: LIST
50866: LIST
50867: LIST
50868: LIST
50869: LIST
50870: LIST
50871: LIST
50872: LIST
50873: LIST
50874: LIST
50875: LIST
50876: LIST
50877: LIST
50878: LIST
50879: LIST
50880: LIST
50881: LIST
50882: LIST
50883: LIST
50884: LIST
50885: PUSH
50886: LD_INT 101
50888: PUSH
50889: LD_INT 102
50891: PUSH
50892: LD_INT 103
50894: PUSH
50895: LD_INT 104
50897: PUSH
50898: LD_INT 105
50900: PUSH
50901: LD_INT 106
50903: PUSH
50904: LD_INT 107
50906: PUSH
50907: LD_INT 108
50909: PUSH
50910: LD_INT 109
50912: PUSH
50913: LD_INT 110
50915: PUSH
50916: LD_INT 111
50918: PUSH
50919: LD_INT 112
50921: PUSH
50922: LD_INT 113
50924: PUSH
50925: LD_INT 114
50927: PUSH
50928: LD_INT 116
50930: PUSH
50931: LD_INT 117
50933: PUSH
50934: LD_INT 118
50936: PUSH
50937: EMPTY
50938: LIST
50939: LIST
50940: LIST
50941: LIST
50942: LIST
50943: LIST
50944: LIST
50945: LIST
50946: LIST
50947: LIST
50948: LIST
50949: LIST
50950: LIST
50951: LIST
50952: LIST
50953: LIST
50954: LIST
50955: PUSH
50956: EMPTY
50957: LIST
50958: LIST
50959: ST_TO_ADDR
50960: GO 52415
50962: LD_INT 13
50964: DOUBLE
50965: EQUAL
50966: IFTRUE 50970
50968: GO 51178
50970: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
50971: LD_ADDR_VAR 0 2
50975: PUSH
50976: LD_INT 1
50978: PUSH
50979: LD_INT 2
50981: PUSH
50982: LD_INT 3
50984: PUSH
50985: LD_INT 4
50987: PUSH
50988: LD_INT 5
50990: PUSH
50991: LD_INT 8
50993: PUSH
50994: LD_INT 9
50996: PUSH
50997: LD_INT 10
50999: PUSH
51000: LD_INT 11
51002: PUSH
51003: LD_INT 12
51005: PUSH
51006: LD_INT 14
51008: PUSH
51009: LD_INT 15
51011: PUSH
51012: LD_INT 16
51014: PUSH
51015: LD_INT 17
51017: PUSH
51018: LD_INT 18
51020: PUSH
51021: LD_INT 19
51023: PUSH
51024: LD_INT 20
51026: PUSH
51027: LD_INT 21
51029: PUSH
51030: LD_INT 22
51032: PUSH
51033: LD_INT 23
51035: PUSH
51036: LD_INT 24
51038: PUSH
51039: LD_INT 25
51041: PUSH
51042: LD_INT 26
51044: PUSH
51045: LD_INT 27
51047: PUSH
51048: LD_INT 28
51050: PUSH
51051: LD_INT 30
51053: PUSH
51054: LD_INT 31
51056: PUSH
51057: LD_INT 32
51059: PUSH
51060: LD_INT 33
51062: PUSH
51063: LD_INT 34
51065: PUSH
51066: LD_INT 36
51068: PUSH
51069: EMPTY
51070: LIST
51071: LIST
51072: LIST
51073: LIST
51074: LIST
51075: LIST
51076: LIST
51077: LIST
51078: LIST
51079: LIST
51080: LIST
51081: LIST
51082: LIST
51083: LIST
51084: LIST
51085: LIST
51086: LIST
51087: LIST
51088: LIST
51089: LIST
51090: LIST
51091: LIST
51092: LIST
51093: LIST
51094: LIST
51095: LIST
51096: LIST
51097: LIST
51098: LIST
51099: LIST
51100: LIST
51101: PUSH
51102: LD_INT 101
51104: PUSH
51105: LD_INT 102
51107: PUSH
51108: LD_INT 103
51110: PUSH
51111: LD_INT 104
51113: PUSH
51114: LD_INT 105
51116: PUSH
51117: LD_INT 106
51119: PUSH
51120: LD_INT 107
51122: PUSH
51123: LD_INT 108
51125: PUSH
51126: LD_INT 109
51128: PUSH
51129: LD_INT 110
51131: PUSH
51132: LD_INT 111
51134: PUSH
51135: LD_INT 112
51137: PUSH
51138: LD_INT 113
51140: PUSH
51141: LD_INT 114
51143: PUSH
51144: LD_INT 116
51146: PUSH
51147: LD_INT 117
51149: PUSH
51150: LD_INT 118
51152: PUSH
51153: EMPTY
51154: LIST
51155: LIST
51156: LIST
51157: LIST
51158: LIST
51159: LIST
51160: LIST
51161: LIST
51162: LIST
51163: LIST
51164: LIST
51165: LIST
51166: LIST
51167: LIST
51168: LIST
51169: LIST
51170: LIST
51171: PUSH
51172: EMPTY
51173: LIST
51174: LIST
51175: ST_TO_ADDR
51176: GO 52415
51178: LD_INT 14
51180: DOUBLE
51181: EQUAL
51182: IFTRUE 51186
51184: GO 51410
51186: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
51187: LD_ADDR_VAR 0 2
51191: PUSH
51192: LD_INT 1
51194: PUSH
51195: LD_INT 2
51197: PUSH
51198: LD_INT 3
51200: PUSH
51201: LD_INT 4
51203: PUSH
51204: LD_INT 5
51206: PUSH
51207: LD_INT 6
51209: PUSH
51210: LD_INT 7
51212: PUSH
51213: LD_INT 8
51215: PUSH
51216: LD_INT 9
51218: PUSH
51219: LD_INT 10
51221: PUSH
51222: LD_INT 11
51224: PUSH
51225: LD_INT 12
51227: PUSH
51228: LD_INT 13
51230: PUSH
51231: LD_INT 14
51233: PUSH
51234: LD_INT 15
51236: PUSH
51237: LD_INT 16
51239: PUSH
51240: LD_INT 17
51242: PUSH
51243: LD_INT 18
51245: PUSH
51246: LD_INT 19
51248: PUSH
51249: LD_INT 20
51251: PUSH
51252: LD_INT 21
51254: PUSH
51255: LD_INT 22
51257: PUSH
51258: LD_INT 23
51260: PUSH
51261: LD_INT 24
51263: PUSH
51264: LD_INT 25
51266: PUSH
51267: LD_INT 26
51269: PUSH
51270: LD_INT 27
51272: PUSH
51273: LD_INT 28
51275: PUSH
51276: LD_INT 29
51278: PUSH
51279: LD_INT 30
51281: PUSH
51282: LD_INT 31
51284: PUSH
51285: LD_INT 32
51287: PUSH
51288: LD_INT 33
51290: PUSH
51291: LD_INT 34
51293: PUSH
51294: LD_INT 36
51296: PUSH
51297: EMPTY
51298: LIST
51299: LIST
51300: LIST
51301: LIST
51302: LIST
51303: LIST
51304: LIST
51305: LIST
51306: LIST
51307: LIST
51308: LIST
51309: LIST
51310: LIST
51311: LIST
51312: LIST
51313: LIST
51314: LIST
51315: LIST
51316: LIST
51317: LIST
51318: LIST
51319: LIST
51320: LIST
51321: LIST
51322: LIST
51323: LIST
51324: LIST
51325: LIST
51326: LIST
51327: LIST
51328: LIST
51329: LIST
51330: LIST
51331: LIST
51332: LIST
51333: PUSH
51334: LD_INT 101
51336: PUSH
51337: LD_INT 102
51339: PUSH
51340: LD_INT 103
51342: PUSH
51343: LD_INT 104
51345: PUSH
51346: LD_INT 105
51348: PUSH
51349: LD_INT 106
51351: PUSH
51352: LD_INT 107
51354: PUSH
51355: LD_INT 108
51357: PUSH
51358: LD_INT 109
51360: PUSH
51361: LD_INT 110
51363: PUSH
51364: LD_INT 111
51366: PUSH
51367: LD_INT 112
51369: PUSH
51370: LD_INT 113
51372: PUSH
51373: LD_INT 114
51375: PUSH
51376: LD_INT 116
51378: PUSH
51379: LD_INT 117
51381: PUSH
51382: LD_INT 118
51384: PUSH
51385: EMPTY
51386: LIST
51387: LIST
51388: LIST
51389: LIST
51390: LIST
51391: LIST
51392: LIST
51393: LIST
51394: LIST
51395: LIST
51396: LIST
51397: LIST
51398: LIST
51399: LIST
51400: LIST
51401: LIST
51402: LIST
51403: PUSH
51404: EMPTY
51405: LIST
51406: LIST
51407: ST_TO_ADDR
51408: GO 52415
51410: LD_INT 15
51412: DOUBLE
51413: EQUAL
51414: IFTRUE 51418
51416: GO 51642
51418: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
51419: LD_ADDR_VAR 0 2
51423: PUSH
51424: LD_INT 1
51426: PUSH
51427: LD_INT 2
51429: PUSH
51430: LD_INT 3
51432: PUSH
51433: LD_INT 4
51435: PUSH
51436: LD_INT 5
51438: PUSH
51439: LD_INT 6
51441: PUSH
51442: LD_INT 7
51444: PUSH
51445: LD_INT 8
51447: PUSH
51448: LD_INT 9
51450: PUSH
51451: LD_INT 10
51453: PUSH
51454: LD_INT 11
51456: PUSH
51457: LD_INT 12
51459: PUSH
51460: LD_INT 13
51462: PUSH
51463: LD_INT 14
51465: PUSH
51466: LD_INT 15
51468: PUSH
51469: LD_INT 16
51471: PUSH
51472: LD_INT 17
51474: PUSH
51475: LD_INT 18
51477: PUSH
51478: LD_INT 19
51480: PUSH
51481: LD_INT 20
51483: PUSH
51484: LD_INT 21
51486: PUSH
51487: LD_INT 22
51489: PUSH
51490: LD_INT 23
51492: PUSH
51493: LD_INT 24
51495: PUSH
51496: LD_INT 25
51498: PUSH
51499: LD_INT 26
51501: PUSH
51502: LD_INT 27
51504: PUSH
51505: LD_INT 28
51507: PUSH
51508: LD_INT 29
51510: PUSH
51511: LD_INT 30
51513: PUSH
51514: LD_INT 31
51516: PUSH
51517: LD_INT 32
51519: PUSH
51520: LD_INT 33
51522: PUSH
51523: LD_INT 34
51525: PUSH
51526: LD_INT 36
51528: PUSH
51529: EMPTY
51530: LIST
51531: LIST
51532: LIST
51533: LIST
51534: LIST
51535: LIST
51536: LIST
51537: LIST
51538: LIST
51539: LIST
51540: LIST
51541: LIST
51542: LIST
51543: LIST
51544: LIST
51545: LIST
51546: LIST
51547: LIST
51548: LIST
51549: LIST
51550: LIST
51551: LIST
51552: LIST
51553: LIST
51554: LIST
51555: LIST
51556: LIST
51557: LIST
51558: LIST
51559: LIST
51560: LIST
51561: LIST
51562: LIST
51563: LIST
51564: LIST
51565: PUSH
51566: LD_INT 101
51568: PUSH
51569: LD_INT 102
51571: PUSH
51572: LD_INT 103
51574: PUSH
51575: LD_INT 104
51577: PUSH
51578: LD_INT 105
51580: PUSH
51581: LD_INT 106
51583: PUSH
51584: LD_INT 107
51586: PUSH
51587: LD_INT 108
51589: PUSH
51590: LD_INT 109
51592: PUSH
51593: LD_INT 110
51595: PUSH
51596: LD_INT 111
51598: PUSH
51599: LD_INT 112
51601: PUSH
51602: LD_INT 113
51604: PUSH
51605: LD_INT 114
51607: PUSH
51608: LD_INT 116
51610: PUSH
51611: LD_INT 117
51613: PUSH
51614: LD_INT 118
51616: PUSH
51617: EMPTY
51618: LIST
51619: LIST
51620: LIST
51621: LIST
51622: LIST
51623: LIST
51624: LIST
51625: LIST
51626: LIST
51627: LIST
51628: LIST
51629: LIST
51630: LIST
51631: LIST
51632: LIST
51633: LIST
51634: LIST
51635: PUSH
51636: EMPTY
51637: LIST
51638: LIST
51639: ST_TO_ADDR
51640: GO 52415
51642: LD_INT 16
51644: DOUBLE
51645: EQUAL
51646: IFTRUE 51650
51648: GO 51786
51650: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
51651: LD_ADDR_VAR 0 2
51655: PUSH
51656: LD_INT 2
51658: PUSH
51659: LD_INT 4
51661: PUSH
51662: LD_INT 5
51664: PUSH
51665: LD_INT 7
51667: PUSH
51668: LD_INT 11
51670: PUSH
51671: LD_INT 12
51673: PUSH
51674: LD_INT 15
51676: PUSH
51677: LD_INT 16
51679: PUSH
51680: LD_INT 20
51682: PUSH
51683: LD_INT 21
51685: PUSH
51686: LD_INT 22
51688: PUSH
51689: LD_INT 23
51691: PUSH
51692: LD_INT 25
51694: PUSH
51695: LD_INT 26
51697: PUSH
51698: LD_INT 30
51700: PUSH
51701: LD_INT 31
51703: PUSH
51704: LD_INT 32
51706: PUSH
51707: LD_INT 33
51709: PUSH
51710: LD_INT 34
51712: PUSH
51713: EMPTY
51714: LIST
51715: LIST
51716: LIST
51717: LIST
51718: LIST
51719: LIST
51720: LIST
51721: LIST
51722: LIST
51723: LIST
51724: LIST
51725: LIST
51726: LIST
51727: LIST
51728: LIST
51729: LIST
51730: LIST
51731: LIST
51732: LIST
51733: PUSH
51734: LD_INT 101
51736: PUSH
51737: LD_INT 102
51739: PUSH
51740: LD_INT 103
51742: PUSH
51743: LD_INT 106
51745: PUSH
51746: LD_INT 108
51748: PUSH
51749: LD_INT 112
51751: PUSH
51752: LD_INT 113
51754: PUSH
51755: LD_INT 114
51757: PUSH
51758: LD_INT 116
51760: PUSH
51761: LD_INT 117
51763: PUSH
51764: LD_INT 118
51766: PUSH
51767: EMPTY
51768: LIST
51769: LIST
51770: LIST
51771: LIST
51772: LIST
51773: LIST
51774: LIST
51775: LIST
51776: LIST
51777: LIST
51778: LIST
51779: PUSH
51780: EMPTY
51781: LIST
51782: LIST
51783: ST_TO_ADDR
51784: GO 52415
51786: LD_INT 17
51788: DOUBLE
51789: EQUAL
51790: IFTRUE 51794
51792: GO 52018
51794: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
51795: LD_ADDR_VAR 0 2
51799: PUSH
51800: LD_INT 1
51802: PUSH
51803: LD_INT 2
51805: PUSH
51806: LD_INT 3
51808: PUSH
51809: LD_INT 4
51811: PUSH
51812: LD_INT 5
51814: PUSH
51815: LD_INT 6
51817: PUSH
51818: LD_INT 7
51820: PUSH
51821: LD_INT 8
51823: PUSH
51824: LD_INT 9
51826: PUSH
51827: LD_INT 10
51829: PUSH
51830: LD_INT 11
51832: PUSH
51833: LD_INT 12
51835: PUSH
51836: LD_INT 13
51838: PUSH
51839: LD_INT 14
51841: PUSH
51842: LD_INT 15
51844: PUSH
51845: LD_INT 16
51847: PUSH
51848: LD_INT 17
51850: PUSH
51851: LD_INT 18
51853: PUSH
51854: LD_INT 19
51856: PUSH
51857: LD_INT 20
51859: PUSH
51860: LD_INT 21
51862: PUSH
51863: LD_INT 22
51865: PUSH
51866: LD_INT 23
51868: PUSH
51869: LD_INT 24
51871: PUSH
51872: LD_INT 25
51874: PUSH
51875: LD_INT 26
51877: PUSH
51878: LD_INT 27
51880: PUSH
51881: LD_INT 28
51883: PUSH
51884: LD_INT 29
51886: PUSH
51887: LD_INT 30
51889: PUSH
51890: LD_INT 31
51892: PUSH
51893: LD_INT 32
51895: PUSH
51896: LD_INT 33
51898: PUSH
51899: LD_INT 34
51901: PUSH
51902: LD_INT 36
51904: PUSH
51905: EMPTY
51906: LIST
51907: LIST
51908: LIST
51909: LIST
51910: LIST
51911: LIST
51912: LIST
51913: LIST
51914: LIST
51915: LIST
51916: LIST
51917: LIST
51918: LIST
51919: LIST
51920: LIST
51921: LIST
51922: LIST
51923: LIST
51924: LIST
51925: LIST
51926: LIST
51927: LIST
51928: LIST
51929: LIST
51930: LIST
51931: LIST
51932: LIST
51933: LIST
51934: LIST
51935: LIST
51936: LIST
51937: LIST
51938: LIST
51939: LIST
51940: LIST
51941: PUSH
51942: LD_INT 101
51944: PUSH
51945: LD_INT 102
51947: PUSH
51948: LD_INT 103
51950: PUSH
51951: LD_INT 104
51953: PUSH
51954: LD_INT 105
51956: PUSH
51957: LD_INT 106
51959: PUSH
51960: LD_INT 107
51962: PUSH
51963: LD_INT 108
51965: PUSH
51966: LD_INT 109
51968: PUSH
51969: LD_INT 110
51971: PUSH
51972: LD_INT 111
51974: PUSH
51975: LD_INT 112
51977: PUSH
51978: LD_INT 113
51980: PUSH
51981: LD_INT 114
51983: PUSH
51984: LD_INT 116
51986: PUSH
51987: LD_INT 117
51989: PUSH
51990: LD_INT 118
51992: PUSH
51993: EMPTY
51994: LIST
51995: LIST
51996: LIST
51997: LIST
51998: LIST
51999: LIST
52000: LIST
52001: LIST
52002: LIST
52003: LIST
52004: LIST
52005: LIST
52006: LIST
52007: LIST
52008: LIST
52009: LIST
52010: LIST
52011: PUSH
52012: EMPTY
52013: LIST
52014: LIST
52015: ST_TO_ADDR
52016: GO 52415
52018: LD_INT 18
52020: DOUBLE
52021: EQUAL
52022: IFTRUE 52026
52024: GO 52174
52026: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
52027: LD_ADDR_VAR 0 2
52031: PUSH
52032: LD_INT 2
52034: PUSH
52035: LD_INT 4
52037: PUSH
52038: LD_INT 5
52040: PUSH
52041: LD_INT 7
52043: PUSH
52044: LD_INT 11
52046: PUSH
52047: LD_INT 12
52049: PUSH
52050: LD_INT 15
52052: PUSH
52053: LD_INT 16
52055: PUSH
52056: LD_INT 20
52058: PUSH
52059: LD_INT 21
52061: PUSH
52062: LD_INT 22
52064: PUSH
52065: LD_INT 23
52067: PUSH
52068: LD_INT 25
52070: PUSH
52071: LD_INT 26
52073: PUSH
52074: LD_INT 30
52076: PUSH
52077: LD_INT 31
52079: PUSH
52080: LD_INT 32
52082: PUSH
52083: LD_INT 33
52085: PUSH
52086: LD_INT 34
52088: PUSH
52089: LD_INT 35
52091: PUSH
52092: LD_INT 36
52094: PUSH
52095: EMPTY
52096: LIST
52097: LIST
52098: LIST
52099: LIST
52100: LIST
52101: LIST
52102: LIST
52103: LIST
52104: LIST
52105: LIST
52106: LIST
52107: LIST
52108: LIST
52109: LIST
52110: LIST
52111: LIST
52112: LIST
52113: LIST
52114: LIST
52115: LIST
52116: LIST
52117: PUSH
52118: LD_INT 101
52120: PUSH
52121: LD_INT 102
52123: PUSH
52124: LD_INT 103
52126: PUSH
52127: LD_INT 106
52129: PUSH
52130: LD_INT 108
52132: PUSH
52133: LD_INT 112
52135: PUSH
52136: LD_INT 113
52138: PUSH
52139: LD_INT 114
52141: PUSH
52142: LD_INT 115
52144: PUSH
52145: LD_INT 116
52147: PUSH
52148: LD_INT 117
52150: PUSH
52151: LD_INT 118
52153: PUSH
52154: EMPTY
52155: LIST
52156: LIST
52157: LIST
52158: LIST
52159: LIST
52160: LIST
52161: LIST
52162: LIST
52163: LIST
52164: LIST
52165: LIST
52166: LIST
52167: PUSH
52168: EMPTY
52169: LIST
52170: LIST
52171: ST_TO_ADDR
52172: GO 52415
52174: LD_INT 19
52176: DOUBLE
52177: EQUAL
52178: IFTRUE 52182
52180: GO 52414
52182: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
52183: LD_ADDR_VAR 0 2
52187: PUSH
52188: LD_INT 1
52190: PUSH
52191: LD_INT 2
52193: PUSH
52194: LD_INT 3
52196: PUSH
52197: LD_INT 4
52199: PUSH
52200: LD_INT 5
52202: PUSH
52203: LD_INT 6
52205: PUSH
52206: LD_INT 7
52208: PUSH
52209: LD_INT 8
52211: PUSH
52212: LD_INT 9
52214: PUSH
52215: LD_INT 10
52217: PUSH
52218: LD_INT 11
52220: PUSH
52221: LD_INT 12
52223: PUSH
52224: LD_INT 13
52226: PUSH
52227: LD_INT 14
52229: PUSH
52230: LD_INT 15
52232: PUSH
52233: LD_INT 16
52235: PUSH
52236: LD_INT 17
52238: PUSH
52239: LD_INT 18
52241: PUSH
52242: LD_INT 19
52244: PUSH
52245: LD_INT 20
52247: PUSH
52248: LD_INT 21
52250: PUSH
52251: LD_INT 22
52253: PUSH
52254: LD_INT 23
52256: PUSH
52257: LD_INT 24
52259: PUSH
52260: LD_INT 25
52262: PUSH
52263: LD_INT 26
52265: PUSH
52266: LD_INT 27
52268: PUSH
52269: LD_INT 28
52271: PUSH
52272: LD_INT 29
52274: PUSH
52275: LD_INT 30
52277: PUSH
52278: LD_INT 31
52280: PUSH
52281: LD_INT 32
52283: PUSH
52284: LD_INT 33
52286: PUSH
52287: LD_INT 34
52289: PUSH
52290: LD_INT 35
52292: PUSH
52293: LD_INT 36
52295: PUSH
52296: EMPTY
52297: LIST
52298: LIST
52299: LIST
52300: LIST
52301: LIST
52302: LIST
52303: LIST
52304: LIST
52305: LIST
52306: LIST
52307: LIST
52308: LIST
52309: LIST
52310: LIST
52311: LIST
52312: LIST
52313: LIST
52314: LIST
52315: LIST
52316: LIST
52317: LIST
52318: LIST
52319: LIST
52320: LIST
52321: LIST
52322: LIST
52323: LIST
52324: LIST
52325: LIST
52326: LIST
52327: LIST
52328: LIST
52329: LIST
52330: LIST
52331: LIST
52332: LIST
52333: PUSH
52334: LD_INT 101
52336: PUSH
52337: LD_INT 102
52339: PUSH
52340: LD_INT 103
52342: PUSH
52343: LD_INT 104
52345: PUSH
52346: LD_INT 105
52348: PUSH
52349: LD_INT 106
52351: PUSH
52352: LD_INT 107
52354: PUSH
52355: LD_INT 108
52357: PUSH
52358: LD_INT 109
52360: PUSH
52361: LD_INT 110
52363: PUSH
52364: LD_INT 111
52366: PUSH
52367: LD_INT 112
52369: PUSH
52370: LD_INT 113
52372: PUSH
52373: LD_INT 114
52375: PUSH
52376: LD_INT 115
52378: PUSH
52379: LD_INT 116
52381: PUSH
52382: LD_INT 117
52384: PUSH
52385: LD_INT 118
52387: PUSH
52388: EMPTY
52389: LIST
52390: LIST
52391: LIST
52392: LIST
52393: LIST
52394: LIST
52395: LIST
52396: LIST
52397: LIST
52398: LIST
52399: LIST
52400: LIST
52401: LIST
52402: LIST
52403: LIST
52404: LIST
52405: LIST
52406: LIST
52407: PUSH
52408: EMPTY
52409: LIST
52410: LIST
52411: ST_TO_ADDR
52412: GO 52415
52414: POP
// end else
52415: GO 52646
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
52417: LD_ADDR_VAR 0 2
52421: PUSH
52422: LD_INT 1
52424: PUSH
52425: LD_INT 2
52427: PUSH
52428: LD_INT 3
52430: PUSH
52431: LD_INT 4
52433: PUSH
52434: LD_INT 5
52436: PUSH
52437: LD_INT 6
52439: PUSH
52440: LD_INT 7
52442: PUSH
52443: LD_INT 8
52445: PUSH
52446: LD_INT 9
52448: PUSH
52449: LD_INT 10
52451: PUSH
52452: LD_INT 11
52454: PUSH
52455: LD_INT 12
52457: PUSH
52458: LD_INT 13
52460: PUSH
52461: LD_INT 14
52463: PUSH
52464: LD_INT 15
52466: PUSH
52467: LD_INT 16
52469: PUSH
52470: LD_INT 17
52472: PUSH
52473: LD_INT 18
52475: PUSH
52476: LD_INT 19
52478: PUSH
52479: LD_INT 20
52481: PUSH
52482: LD_INT 21
52484: PUSH
52485: LD_INT 22
52487: PUSH
52488: LD_INT 23
52490: PUSH
52491: LD_INT 24
52493: PUSH
52494: LD_INT 25
52496: PUSH
52497: LD_INT 26
52499: PUSH
52500: LD_INT 27
52502: PUSH
52503: LD_INT 28
52505: PUSH
52506: LD_INT 29
52508: PUSH
52509: LD_INT 30
52511: PUSH
52512: LD_INT 31
52514: PUSH
52515: LD_INT 32
52517: PUSH
52518: LD_INT 33
52520: PUSH
52521: LD_INT 34
52523: PUSH
52524: LD_INT 35
52526: PUSH
52527: LD_INT 36
52529: PUSH
52530: EMPTY
52531: LIST
52532: LIST
52533: LIST
52534: LIST
52535: LIST
52536: LIST
52537: LIST
52538: LIST
52539: LIST
52540: LIST
52541: LIST
52542: LIST
52543: LIST
52544: LIST
52545: LIST
52546: LIST
52547: LIST
52548: LIST
52549: LIST
52550: LIST
52551: LIST
52552: LIST
52553: LIST
52554: LIST
52555: LIST
52556: LIST
52557: LIST
52558: LIST
52559: LIST
52560: LIST
52561: LIST
52562: LIST
52563: LIST
52564: LIST
52565: LIST
52566: LIST
52567: PUSH
52568: LD_INT 101
52570: PUSH
52571: LD_INT 102
52573: PUSH
52574: LD_INT 103
52576: PUSH
52577: LD_INT 104
52579: PUSH
52580: LD_INT 105
52582: PUSH
52583: LD_INT 106
52585: PUSH
52586: LD_INT 107
52588: PUSH
52589: LD_INT 108
52591: PUSH
52592: LD_INT 109
52594: PUSH
52595: LD_INT 110
52597: PUSH
52598: LD_INT 111
52600: PUSH
52601: LD_INT 112
52603: PUSH
52604: LD_INT 113
52606: PUSH
52607: LD_INT 114
52609: PUSH
52610: LD_INT 115
52612: PUSH
52613: LD_INT 116
52615: PUSH
52616: LD_INT 117
52618: PUSH
52619: LD_INT 118
52621: PUSH
52622: EMPTY
52623: LIST
52624: LIST
52625: LIST
52626: LIST
52627: LIST
52628: LIST
52629: LIST
52630: LIST
52631: LIST
52632: LIST
52633: LIST
52634: LIST
52635: LIST
52636: LIST
52637: LIST
52638: LIST
52639: LIST
52640: LIST
52641: PUSH
52642: EMPTY
52643: LIST
52644: LIST
52645: ST_TO_ADDR
// if result then
52646: LD_VAR 0 2
52650: IFFALSE 53436
// begin normal :=  ;
52652: LD_ADDR_VAR 0 5
52656: PUSH
52657: LD_STRING 
52659: ST_TO_ADDR
// hardcore :=  ;
52660: LD_ADDR_VAR 0 6
52664: PUSH
52665: LD_STRING 
52667: ST_TO_ADDR
// active :=  ;
52668: LD_ADDR_VAR 0 7
52672: PUSH
52673: LD_STRING 
52675: ST_TO_ADDR
// for i = 1 to normalCounter do
52676: LD_ADDR_VAR 0 8
52680: PUSH
52681: DOUBLE
52682: LD_INT 1
52684: DEC
52685: ST_TO_ADDR
52686: LD_EXP 14
52690: PUSH
52691: FOR_TO
52692: IFFALSE 52793
// begin tmp := 0 ;
52694: LD_ADDR_VAR 0 3
52698: PUSH
52699: LD_STRING 0
52701: ST_TO_ADDR
// if result [ 1 ] then
52702: LD_VAR 0 2
52706: PUSH
52707: LD_INT 1
52709: ARRAY
52710: IFFALSE 52775
// if result [ 1 ] [ 1 ] = i then
52712: LD_VAR 0 2
52716: PUSH
52717: LD_INT 1
52719: ARRAY
52720: PUSH
52721: LD_INT 1
52723: ARRAY
52724: PUSH
52725: LD_VAR 0 8
52729: EQUAL
52730: IFFALSE 52775
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
52732: LD_ADDR_VAR 0 2
52736: PUSH
52737: LD_VAR 0 2
52741: PPUSH
52742: LD_INT 1
52744: PPUSH
52745: LD_VAR 0 2
52749: PUSH
52750: LD_INT 1
52752: ARRAY
52753: PPUSH
52754: LD_INT 1
52756: PPUSH
52757: CALL_OW 3
52761: PPUSH
52762: CALL_OW 1
52766: ST_TO_ADDR
// tmp := 1 ;
52767: LD_ADDR_VAR 0 3
52771: PUSH
52772: LD_STRING 1
52774: ST_TO_ADDR
// end ; normal := normal & tmp ;
52775: LD_ADDR_VAR 0 5
52779: PUSH
52780: LD_VAR 0 5
52784: PUSH
52785: LD_VAR 0 3
52789: STR
52790: ST_TO_ADDR
// end ;
52791: GO 52691
52793: POP
52794: POP
// for i = 1 to hardcoreCounter do
52795: LD_ADDR_VAR 0 8
52799: PUSH
52800: DOUBLE
52801: LD_INT 1
52803: DEC
52804: ST_TO_ADDR
52805: LD_EXP 15
52809: PUSH
52810: FOR_TO
52811: IFFALSE 52916
// begin tmp := 0 ;
52813: LD_ADDR_VAR 0 3
52817: PUSH
52818: LD_STRING 0
52820: ST_TO_ADDR
// if result [ 2 ] then
52821: LD_VAR 0 2
52825: PUSH
52826: LD_INT 2
52828: ARRAY
52829: IFFALSE 52898
// if result [ 2 ] [ 1 ] = 100 + i then
52831: LD_VAR 0 2
52835: PUSH
52836: LD_INT 2
52838: ARRAY
52839: PUSH
52840: LD_INT 1
52842: ARRAY
52843: PUSH
52844: LD_INT 100
52846: PUSH
52847: LD_VAR 0 8
52851: PLUS
52852: EQUAL
52853: IFFALSE 52898
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
52855: LD_ADDR_VAR 0 2
52859: PUSH
52860: LD_VAR 0 2
52864: PPUSH
52865: LD_INT 2
52867: PPUSH
52868: LD_VAR 0 2
52872: PUSH
52873: LD_INT 2
52875: ARRAY
52876: PPUSH
52877: LD_INT 1
52879: PPUSH
52880: CALL_OW 3
52884: PPUSH
52885: CALL_OW 1
52889: ST_TO_ADDR
// tmp := 1 ;
52890: LD_ADDR_VAR 0 3
52894: PUSH
52895: LD_STRING 1
52897: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
52898: LD_ADDR_VAR 0 6
52902: PUSH
52903: LD_VAR 0 6
52907: PUSH
52908: LD_VAR 0 3
52912: STR
52913: ST_TO_ADDR
// end ;
52914: GO 52810
52916: POP
52917: POP
// if isGameLoad then
52918: LD_VAR 0 1
52922: IFFALSE 53397
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
52924: LD_ADDR_VAR 0 4
52928: PUSH
52929: LD_EXP 18
52933: PUSH
52934: LD_EXP 17
52938: PUSH
52939: LD_EXP 19
52943: PUSH
52944: LD_EXP 16
52948: PUSH
52949: LD_EXP 20
52953: PUSH
52954: LD_EXP 21
52958: PUSH
52959: LD_EXP 22
52963: PUSH
52964: LD_EXP 23
52968: PUSH
52969: LD_EXP 24
52973: PUSH
52974: LD_EXP 25
52978: PUSH
52979: LD_EXP 26
52983: PUSH
52984: LD_EXP 27
52988: PUSH
52989: LD_EXP 28
52993: PUSH
52994: LD_EXP 29
52998: PUSH
52999: LD_EXP 37
53003: PUSH
53004: LD_EXP 38
53008: PUSH
53009: LD_EXP 39
53013: PUSH
53014: LD_EXP 40
53018: PUSH
53019: LD_EXP 42
53023: PUSH
53024: LD_EXP 43
53028: PUSH
53029: LD_EXP 44
53033: PUSH
53034: LD_EXP 47
53038: PUSH
53039: LD_EXP 49
53043: PUSH
53044: LD_EXP 50
53048: PUSH
53049: LD_EXP 51
53053: PUSH
53054: LD_EXP 53
53058: PUSH
53059: LD_EXP 54
53063: PUSH
53064: LD_EXP 57
53068: PUSH
53069: LD_EXP 58
53073: PUSH
53074: LD_EXP 59
53078: PUSH
53079: LD_EXP 60
53083: PUSH
53084: LD_EXP 61
53088: PUSH
53089: LD_EXP 62
53093: PUSH
53094: LD_EXP 63
53098: PUSH
53099: LD_EXP 64
53103: PUSH
53104: LD_EXP 65
53108: PUSH
53109: LD_EXP 30
53113: PUSH
53114: LD_EXP 31
53118: PUSH
53119: LD_EXP 34
53123: PUSH
53124: LD_EXP 35
53128: PUSH
53129: LD_EXP 36
53133: PUSH
53134: LD_EXP 32
53138: PUSH
53139: LD_EXP 33
53143: PUSH
53144: LD_EXP 41
53148: PUSH
53149: LD_EXP 45
53153: PUSH
53154: LD_EXP 46
53158: PUSH
53159: LD_EXP 48
53163: PUSH
53164: LD_EXP 52
53168: PUSH
53169: LD_EXP 55
53173: PUSH
53174: LD_EXP 56
53178: PUSH
53179: LD_EXP 66
53183: PUSH
53184: LD_EXP 67
53188: PUSH
53189: LD_EXP 68
53193: PUSH
53194: LD_EXP 69
53198: PUSH
53199: EMPTY
53200: LIST
53201: LIST
53202: LIST
53203: LIST
53204: LIST
53205: LIST
53206: LIST
53207: LIST
53208: LIST
53209: LIST
53210: LIST
53211: LIST
53212: LIST
53213: LIST
53214: LIST
53215: LIST
53216: LIST
53217: LIST
53218: LIST
53219: LIST
53220: LIST
53221: LIST
53222: LIST
53223: LIST
53224: LIST
53225: LIST
53226: LIST
53227: LIST
53228: LIST
53229: LIST
53230: LIST
53231: LIST
53232: LIST
53233: LIST
53234: LIST
53235: LIST
53236: LIST
53237: LIST
53238: LIST
53239: LIST
53240: LIST
53241: LIST
53242: LIST
53243: LIST
53244: LIST
53245: LIST
53246: LIST
53247: LIST
53248: LIST
53249: LIST
53250: LIST
53251: LIST
53252: LIST
53253: LIST
53254: ST_TO_ADDR
// tmp :=  ;
53255: LD_ADDR_VAR 0 3
53259: PUSH
53260: LD_STRING 
53262: ST_TO_ADDR
// for i = 1 to normalCounter do
53263: LD_ADDR_VAR 0 8
53267: PUSH
53268: DOUBLE
53269: LD_INT 1
53271: DEC
53272: ST_TO_ADDR
53273: LD_EXP 14
53277: PUSH
53278: FOR_TO
53279: IFFALSE 53315
// begin if flags [ i ] then
53281: LD_VAR 0 4
53285: PUSH
53286: LD_VAR 0 8
53290: ARRAY
53291: IFFALSE 53313
// tmp := tmp & i & ; ;
53293: LD_ADDR_VAR 0 3
53297: PUSH
53298: LD_VAR 0 3
53302: PUSH
53303: LD_VAR 0 8
53307: STR
53308: PUSH
53309: LD_STRING ;
53311: STR
53312: ST_TO_ADDR
// end ;
53313: GO 53278
53315: POP
53316: POP
// for i = 1 to hardcoreCounter do
53317: LD_ADDR_VAR 0 8
53321: PUSH
53322: DOUBLE
53323: LD_INT 1
53325: DEC
53326: ST_TO_ADDR
53327: LD_EXP 15
53331: PUSH
53332: FOR_TO
53333: IFFALSE 53379
// begin if flags [ normalCounter + i ] then
53335: LD_VAR 0 4
53339: PUSH
53340: LD_EXP 14
53344: PUSH
53345: LD_VAR 0 8
53349: PLUS
53350: ARRAY
53351: IFFALSE 53377
// tmp := tmp & ( 100 + i ) & ; ;
53353: LD_ADDR_VAR 0 3
53357: PUSH
53358: LD_VAR 0 3
53362: PUSH
53363: LD_INT 100
53365: PUSH
53366: LD_VAR 0 8
53370: PLUS
53371: STR
53372: PUSH
53373: LD_STRING ;
53375: STR
53376: ST_TO_ADDR
// end ;
53377: GO 53332
53379: POP
53380: POP
// if tmp then
53381: LD_VAR 0 3
53385: IFFALSE 53397
// active := tmp ;
53387: LD_ADDR_VAR 0 7
53391: PUSH
53392: LD_VAR 0 3
53396: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
53397: LD_STRING getStreamItemsFromMission("
53399: PUSH
53400: LD_VAR 0 5
53404: STR
53405: PUSH
53406: LD_STRING ","
53408: STR
53409: PUSH
53410: LD_VAR 0 6
53414: STR
53415: PUSH
53416: LD_STRING ","
53418: STR
53419: PUSH
53420: LD_VAR 0 7
53424: STR
53425: PUSH
53426: LD_STRING ")
53428: STR
53429: PPUSH
53430: CALL_OW 559
// end else
53434: GO 53443
// ToLua ( getStreamItemsFromMission("","","") ) ;
53436: LD_STRING getStreamItemsFromMission("","","")
53438: PPUSH
53439: CALL_OW 559
// end ;
53443: LD_VAR 0 2
53447: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
53448: LD_EXP 13
53452: PUSH
53453: LD_EXP 18
53457: AND
53458: IFFALSE 53582
53460: GO 53462
53462: DISABLE
53463: LD_INT 0
53465: PPUSH
53466: PPUSH
// begin enable ;
53467: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
53468: LD_ADDR_VAR 0 2
53472: PUSH
53473: LD_INT 22
53475: PUSH
53476: LD_OWVAR 2
53480: PUSH
53481: EMPTY
53482: LIST
53483: LIST
53484: PUSH
53485: LD_INT 2
53487: PUSH
53488: LD_INT 34
53490: PUSH
53491: LD_INT 7
53493: PUSH
53494: EMPTY
53495: LIST
53496: LIST
53497: PUSH
53498: LD_INT 34
53500: PUSH
53501: LD_INT 45
53503: PUSH
53504: EMPTY
53505: LIST
53506: LIST
53507: PUSH
53508: LD_INT 34
53510: PUSH
53511: LD_INT 28
53513: PUSH
53514: EMPTY
53515: LIST
53516: LIST
53517: PUSH
53518: LD_INT 34
53520: PUSH
53521: LD_INT 47
53523: PUSH
53524: EMPTY
53525: LIST
53526: LIST
53527: PUSH
53528: EMPTY
53529: LIST
53530: LIST
53531: LIST
53532: LIST
53533: LIST
53534: PUSH
53535: EMPTY
53536: LIST
53537: LIST
53538: PPUSH
53539: CALL_OW 69
53543: ST_TO_ADDR
// if not tmp then
53544: LD_VAR 0 2
53548: NOT
53549: IFFALSE 53553
// exit ;
53551: GO 53582
// for i in tmp do
53553: LD_ADDR_VAR 0 1
53557: PUSH
53558: LD_VAR 0 2
53562: PUSH
53563: FOR_IN
53564: IFFALSE 53580
// begin SetLives ( i , 0 ) ;
53566: LD_VAR 0 1
53570: PPUSH
53571: LD_INT 0
53573: PPUSH
53574: CALL_OW 234
// end ;
53578: GO 53563
53580: POP
53581: POP
// end ;
53582: PPOPN 2
53584: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
53585: LD_EXP 13
53589: PUSH
53590: LD_EXP 19
53594: AND
53595: IFFALSE 53679
53597: GO 53599
53599: DISABLE
53600: LD_INT 0
53602: PPUSH
53603: PPUSH
// begin enable ;
53604: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
53605: LD_ADDR_VAR 0 2
53609: PUSH
53610: LD_INT 22
53612: PUSH
53613: LD_OWVAR 2
53617: PUSH
53618: EMPTY
53619: LIST
53620: LIST
53621: PUSH
53622: LD_INT 32
53624: PUSH
53625: LD_INT 3
53627: PUSH
53628: EMPTY
53629: LIST
53630: LIST
53631: PUSH
53632: EMPTY
53633: LIST
53634: LIST
53635: PPUSH
53636: CALL_OW 69
53640: ST_TO_ADDR
// if not tmp then
53641: LD_VAR 0 2
53645: NOT
53646: IFFALSE 53650
// exit ;
53648: GO 53679
// for i in tmp do
53650: LD_ADDR_VAR 0 1
53654: PUSH
53655: LD_VAR 0 2
53659: PUSH
53660: FOR_IN
53661: IFFALSE 53677
// begin SetLives ( i , 0 ) ;
53663: LD_VAR 0 1
53667: PPUSH
53668: LD_INT 0
53670: PPUSH
53671: CALL_OW 234
// end ;
53675: GO 53660
53677: POP
53678: POP
// end ;
53679: PPOPN 2
53681: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
53682: LD_EXP 13
53686: PUSH
53687: LD_EXP 16
53691: AND
53692: IFFALSE 53785
53694: GO 53696
53696: DISABLE
53697: LD_INT 0
53699: PPUSH
// begin enable ;
53700: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
53701: LD_ADDR_VAR 0 1
53705: PUSH
53706: LD_INT 22
53708: PUSH
53709: LD_OWVAR 2
53713: PUSH
53714: EMPTY
53715: LIST
53716: LIST
53717: PUSH
53718: LD_INT 2
53720: PUSH
53721: LD_INT 25
53723: PUSH
53724: LD_INT 5
53726: PUSH
53727: EMPTY
53728: LIST
53729: LIST
53730: PUSH
53731: LD_INT 25
53733: PUSH
53734: LD_INT 9
53736: PUSH
53737: EMPTY
53738: LIST
53739: LIST
53740: PUSH
53741: LD_INT 25
53743: PUSH
53744: LD_INT 8
53746: PUSH
53747: EMPTY
53748: LIST
53749: LIST
53750: PUSH
53751: EMPTY
53752: LIST
53753: LIST
53754: LIST
53755: LIST
53756: PUSH
53757: EMPTY
53758: LIST
53759: LIST
53760: PPUSH
53761: CALL_OW 69
53765: PUSH
53766: FOR_IN
53767: IFFALSE 53783
// begin SetClass ( i , 1 ) ;
53769: LD_VAR 0 1
53773: PPUSH
53774: LD_INT 1
53776: PPUSH
53777: CALL_OW 336
// end ;
53781: GO 53766
53783: POP
53784: POP
// end ;
53785: PPOPN 1
53787: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
53788: LD_EXP 13
53792: PUSH
53793: LD_EXP 17
53797: AND
53798: PUSH
53799: LD_OWVAR 65
53803: PUSH
53804: LD_INT 7
53806: LESS
53807: AND
53808: IFFALSE 53822
53810: GO 53812
53812: DISABLE
// begin enable ;
53813: ENABLE
// game_speed := 7 ;
53814: LD_ADDR_OWVAR 65
53818: PUSH
53819: LD_INT 7
53821: ST_TO_ADDR
// end ;
53822: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
53823: LD_EXP 13
53827: PUSH
53828: LD_EXP 20
53832: AND
53833: IFFALSE 54035
53835: GO 53837
53837: DISABLE
53838: LD_INT 0
53840: PPUSH
53841: PPUSH
53842: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
53843: LD_ADDR_VAR 0 3
53847: PUSH
53848: LD_INT 81
53850: PUSH
53851: LD_OWVAR 2
53855: PUSH
53856: EMPTY
53857: LIST
53858: LIST
53859: PUSH
53860: LD_INT 21
53862: PUSH
53863: LD_INT 1
53865: PUSH
53866: EMPTY
53867: LIST
53868: LIST
53869: PUSH
53870: EMPTY
53871: LIST
53872: LIST
53873: PPUSH
53874: CALL_OW 69
53878: ST_TO_ADDR
// if not tmp then
53879: LD_VAR 0 3
53883: NOT
53884: IFFALSE 53888
// exit ;
53886: GO 54035
// if tmp > 5 then
53888: LD_VAR 0 3
53892: PUSH
53893: LD_INT 5
53895: GREATER
53896: IFFALSE 53908
// k := 5 else
53898: LD_ADDR_VAR 0 2
53902: PUSH
53903: LD_INT 5
53905: ST_TO_ADDR
53906: GO 53918
// k := tmp ;
53908: LD_ADDR_VAR 0 2
53912: PUSH
53913: LD_VAR 0 3
53917: ST_TO_ADDR
// for i := 1 to k do
53918: LD_ADDR_VAR 0 1
53922: PUSH
53923: DOUBLE
53924: LD_INT 1
53926: DEC
53927: ST_TO_ADDR
53928: LD_VAR 0 2
53932: PUSH
53933: FOR_TO
53934: IFFALSE 54033
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
53936: LD_VAR 0 3
53940: PUSH
53941: LD_VAR 0 1
53945: ARRAY
53946: PPUSH
53947: LD_VAR 0 1
53951: PUSH
53952: LD_INT 4
53954: MOD
53955: PUSH
53956: LD_INT 1
53958: PLUS
53959: PPUSH
53960: CALL_OW 259
53964: PUSH
53965: LD_INT 10
53967: LESS
53968: IFFALSE 54031
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
53970: LD_VAR 0 3
53974: PUSH
53975: LD_VAR 0 1
53979: ARRAY
53980: PPUSH
53981: LD_VAR 0 1
53985: PUSH
53986: LD_INT 4
53988: MOD
53989: PUSH
53990: LD_INT 1
53992: PLUS
53993: PPUSH
53994: LD_VAR 0 3
53998: PUSH
53999: LD_VAR 0 1
54003: ARRAY
54004: PPUSH
54005: LD_VAR 0 1
54009: PUSH
54010: LD_INT 4
54012: MOD
54013: PUSH
54014: LD_INT 1
54016: PLUS
54017: PPUSH
54018: CALL_OW 259
54022: PUSH
54023: LD_INT 1
54025: PLUS
54026: PPUSH
54027: CALL_OW 237
54031: GO 53933
54033: POP
54034: POP
// end ;
54035: PPOPN 3
54037: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
54038: LD_EXP 13
54042: PUSH
54043: LD_EXP 21
54047: AND
54048: IFFALSE 54068
54050: GO 54052
54052: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
54053: LD_INT 4
54055: PPUSH
54056: LD_OWVAR 2
54060: PPUSH
54061: LD_INT 0
54063: PPUSH
54064: CALL_OW 324
54068: END
// every 0 0$1 trigger StreamModeActive and sShovel do
54069: LD_EXP 13
54073: PUSH
54074: LD_EXP 50
54078: AND
54079: IFFALSE 54099
54081: GO 54083
54083: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
54084: LD_INT 19
54086: PPUSH
54087: LD_OWVAR 2
54091: PPUSH
54092: LD_INT 0
54094: PPUSH
54095: CALL_OW 324
54099: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
54100: LD_EXP 13
54104: PUSH
54105: LD_EXP 22
54109: AND
54110: IFFALSE 54212
54112: GO 54114
54114: DISABLE
54115: LD_INT 0
54117: PPUSH
54118: PPUSH
// begin enable ;
54119: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
54120: LD_ADDR_VAR 0 2
54124: PUSH
54125: LD_INT 22
54127: PUSH
54128: LD_OWVAR 2
54132: PUSH
54133: EMPTY
54134: LIST
54135: LIST
54136: PUSH
54137: LD_INT 2
54139: PUSH
54140: LD_INT 34
54142: PUSH
54143: LD_INT 11
54145: PUSH
54146: EMPTY
54147: LIST
54148: LIST
54149: PUSH
54150: LD_INT 34
54152: PUSH
54153: LD_INT 30
54155: PUSH
54156: EMPTY
54157: LIST
54158: LIST
54159: PUSH
54160: EMPTY
54161: LIST
54162: LIST
54163: LIST
54164: PUSH
54165: EMPTY
54166: LIST
54167: LIST
54168: PPUSH
54169: CALL_OW 69
54173: ST_TO_ADDR
// if not tmp then
54174: LD_VAR 0 2
54178: NOT
54179: IFFALSE 54183
// exit ;
54181: GO 54212
// for i in tmp do
54183: LD_ADDR_VAR 0 1
54187: PUSH
54188: LD_VAR 0 2
54192: PUSH
54193: FOR_IN
54194: IFFALSE 54210
// begin SetLives ( i , 0 ) ;
54196: LD_VAR 0 1
54200: PPUSH
54201: LD_INT 0
54203: PPUSH
54204: CALL_OW 234
// end ;
54208: GO 54193
54210: POP
54211: POP
// end ;
54212: PPOPN 2
54214: END
// every 0 0$1 trigger StreamModeActive and sBunker do
54215: LD_EXP 13
54219: PUSH
54220: LD_EXP 23
54224: AND
54225: IFFALSE 54245
54227: GO 54229
54229: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
54230: LD_INT 32
54232: PPUSH
54233: LD_OWVAR 2
54237: PPUSH
54238: LD_INT 0
54240: PPUSH
54241: CALL_OW 324
54245: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
54246: LD_EXP 13
54250: PUSH
54251: LD_EXP 24
54255: AND
54256: IFFALSE 54437
54258: GO 54260
54260: DISABLE
54261: LD_INT 0
54263: PPUSH
54264: PPUSH
54265: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
54266: LD_ADDR_VAR 0 2
54270: PUSH
54271: LD_INT 22
54273: PUSH
54274: LD_OWVAR 2
54278: PUSH
54279: EMPTY
54280: LIST
54281: LIST
54282: PUSH
54283: LD_INT 33
54285: PUSH
54286: LD_INT 3
54288: PUSH
54289: EMPTY
54290: LIST
54291: LIST
54292: PUSH
54293: EMPTY
54294: LIST
54295: LIST
54296: PPUSH
54297: CALL_OW 69
54301: ST_TO_ADDR
// if not tmp then
54302: LD_VAR 0 2
54306: NOT
54307: IFFALSE 54311
// exit ;
54309: GO 54437
// side := 0 ;
54311: LD_ADDR_VAR 0 3
54315: PUSH
54316: LD_INT 0
54318: ST_TO_ADDR
// for i := 1 to 8 do
54319: LD_ADDR_VAR 0 1
54323: PUSH
54324: DOUBLE
54325: LD_INT 1
54327: DEC
54328: ST_TO_ADDR
54329: LD_INT 8
54331: PUSH
54332: FOR_TO
54333: IFFALSE 54381
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
54335: LD_OWVAR 2
54339: PUSH
54340: LD_VAR 0 1
54344: NONEQUAL
54345: PUSH
54346: LD_OWVAR 2
54350: PPUSH
54351: LD_VAR 0 1
54355: PPUSH
54356: CALL_OW 81
54360: PUSH
54361: LD_INT 2
54363: EQUAL
54364: AND
54365: IFFALSE 54379
// begin side := i ;
54367: LD_ADDR_VAR 0 3
54371: PUSH
54372: LD_VAR 0 1
54376: ST_TO_ADDR
// break ;
54377: GO 54381
// end ;
54379: GO 54332
54381: POP
54382: POP
// if not side then
54383: LD_VAR 0 3
54387: NOT
54388: IFFALSE 54392
// exit ;
54390: GO 54437
// for i := 1 to tmp do
54392: LD_ADDR_VAR 0 1
54396: PUSH
54397: DOUBLE
54398: LD_INT 1
54400: DEC
54401: ST_TO_ADDR
54402: LD_VAR 0 2
54406: PUSH
54407: FOR_TO
54408: IFFALSE 54435
// if Prob ( 60 ) then
54410: LD_INT 60
54412: PPUSH
54413: CALL_OW 13
54417: IFFALSE 54433
// SetSide ( i , side ) ;
54419: LD_VAR 0 1
54423: PPUSH
54424: LD_VAR 0 3
54428: PPUSH
54429: CALL_OW 235
54433: GO 54407
54435: POP
54436: POP
// end ;
54437: PPOPN 3
54439: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
54440: LD_EXP 13
54444: PUSH
54445: LD_EXP 26
54449: AND
54450: IFFALSE 54569
54452: GO 54454
54454: DISABLE
54455: LD_INT 0
54457: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
54458: LD_ADDR_VAR 0 1
54462: PUSH
54463: LD_INT 22
54465: PUSH
54466: LD_OWVAR 2
54470: PUSH
54471: EMPTY
54472: LIST
54473: LIST
54474: PUSH
54475: LD_INT 21
54477: PUSH
54478: LD_INT 1
54480: PUSH
54481: EMPTY
54482: LIST
54483: LIST
54484: PUSH
54485: LD_INT 3
54487: PUSH
54488: LD_INT 23
54490: PUSH
54491: LD_INT 0
54493: PUSH
54494: EMPTY
54495: LIST
54496: LIST
54497: PUSH
54498: EMPTY
54499: LIST
54500: LIST
54501: PUSH
54502: EMPTY
54503: LIST
54504: LIST
54505: LIST
54506: PPUSH
54507: CALL_OW 69
54511: PUSH
54512: FOR_IN
54513: IFFALSE 54567
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
54515: LD_VAR 0 1
54519: PPUSH
54520: CALL_OW 257
54524: PUSH
54525: LD_INT 1
54527: PUSH
54528: LD_INT 2
54530: PUSH
54531: LD_INT 3
54533: PUSH
54534: LD_INT 4
54536: PUSH
54537: EMPTY
54538: LIST
54539: LIST
54540: LIST
54541: LIST
54542: IN
54543: IFFALSE 54565
// SetClass ( un , rand ( 1 , 4 ) ) ;
54545: LD_VAR 0 1
54549: PPUSH
54550: LD_INT 1
54552: PPUSH
54553: LD_INT 4
54555: PPUSH
54556: CALL_OW 12
54560: PPUSH
54561: CALL_OW 336
54565: GO 54512
54567: POP
54568: POP
// end ;
54569: PPOPN 1
54571: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
54572: LD_EXP 13
54576: PUSH
54577: LD_EXP 25
54581: AND
54582: IFFALSE 54661
54584: GO 54586
54586: DISABLE
54587: LD_INT 0
54589: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
54590: LD_ADDR_VAR 0 1
54594: PUSH
54595: LD_INT 22
54597: PUSH
54598: LD_OWVAR 2
54602: PUSH
54603: EMPTY
54604: LIST
54605: LIST
54606: PUSH
54607: LD_INT 21
54609: PUSH
54610: LD_INT 3
54612: PUSH
54613: EMPTY
54614: LIST
54615: LIST
54616: PUSH
54617: EMPTY
54618: LIST
54619: LIST
54620: PPUSH
54621: CALL_OW 69
54625: ST_TO_ADDR
// if not tmp then
54626: LD_VAR 0 1
54630: NOT
54631: IFFALSE 54635
// exit ;
54633: GO 54661
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
54635: LD_VAR 0 1
54639: PUSH
54640: LD_INT 1
54642: PPUSH
54643: LD_VAR 0 1
54647: PPUSH
54648: CALL_OW 12
54652: ARRAY
54653: PPUSH
54654: LD_INT 100
54656: PPUSH
54657: CALL_OW 234
// end ;
54661: PPOPN 1
54663: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
54664: LD_EXP 13
54668: PUSH
54669: LD_EXP 27
54673: AND
54674: IFFALSE 54772
54676: GO 54678
54678: DISABLE
54679: LD_INT 0
54681: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
54682: LD_ADDR_VAR 0 1
54686: PUSH
54687: LD_INT 22
54689: PUSH
54690: LD_OWVAR 2
54694: PUSH
54695: EMPTY
54696: LIST
54697: LIST
54698: PUSH
54699: LD_INT 21
54701: PUSH
54702: LD_INT 1
54704: PUSH
54705: EMPTY
54706: LIST
54707: LIST
54708: PUSH
54709: EMPTY
54710: LIST
54711: LIST
54712: PPUSH
54713: CALL_OW 69
54717: ST_TO_ADDR
// if not tmp then
54718: LD_VAR 0 1
54722: NOT
54723: IFFALSE 54727
// exit ;
54725: GO 54772
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
54727: LD_VAR 0 1
54731: PUSH
54732: LD_INT 1
54734: PPUSH
54735: LD_VAR 0 1
54739: PPUSH
54740: CALL_OW 12
54744: ARRAY
54745: PPUSH
54746: LD_INT 1
54748: PPUSH
54749: LD_INT 4
54751: PPUSH
54752: CALL_OW 12
54756: PPUSH
54757: LD_INT 3000
54759: PPUSH
54760: LD_INT 9000
54762: PPUSH
54763: CALL_OW 12
54767: PPUSH
54768: CALL_OW 492
// end ;
54772: PPOPN 1
54774: END
// every 0 0$1 trigger StreamModeActive and sDepot do
54775: LD_EXP 13
54779: PUSH
54780: LD_EXP 28
54784: AND
54785: IFFALSE 54805
54787: GO 54789
54789: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
54790: LD_INT 1
54792: PPUSH
54793: LD_OWVAR 2
54797: PPUSH
54798: LD_INT 0
54800: PPUSH
54801: CALL_OW 324
54805: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
54806: LD_EXP 13
54810: PUSH
54811: LD_EXP 29
54815: AND
54816: IFFALSE 54899
54818: GO 54820
54820: DISABLE
54821: LD_INT 0
54823: PPUSH
54824: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
54825: LD_ADDR_VAR 0 2
54829: PUSH
54830: LD_INT 22
54832: PUSH
54833: LD_OWVAR 2
54837: PUSH
54838: EMPTY
54839: LIST
54840: LIST
54841: PUSH
54842: LD_INT 21
54844: PUSH
54845: LD_INT 3
54847: PUSH
54848: EMPTY
54849: LIST
54850: LIST
54851: PUSH
54852: EMPTY
54853: LIST
54854: LIST
54855: PPUSH
54856: CALL_OW 69
54860: ST_TO_ADDR
// if not tmp then
54861: LD_VAR 0 2
54865: NOT
54866: IFFALSE 54870
// exit ;
54868: GO 54899
// for i in tmp do
54870: LD_ADDR_VAR 0 1
54874: PUSH
54875: LD_VAR 0 2
54879: PUSH
54880: FOR_IN
54881: IFFALSE 54897
// SetBLevel ( i , 10 ) ;
54883: LD_VAR 0 1
54887: PPUSH
54888: LD_INT 10
54890: PPUSH
54891: CALL_OW 241
54895: GO 54880
54897: POP
54898: POP
// end ;
54899: PPOPN 2
54901: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
54902: LD_EXP 13
54906: PUSH
54907: LD_EXP 30
54911: AND
54912: IFFALSE 55023
54914: GO 54916
54916: DISABLE
54917: LD_INT 0
54919: PPUSH
54920: PPUSH
54921: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
54922: LD_ADDR_VAR 0 3
54926: PUSH
54927: LD_INT 22
54929: PUSH
54930: LD_OWVAR 2
54934: PUSH
54935: EMPTY
54936: LIST
54937: LIST
54938: PUSH
54939: LD_INT 25
54941: PUSH
54942: LD_INT 1
54944: PUSH
54945: EMPTY
54946: LIST
54947: LIST
54948: PUSH
54949: EMPTY
54950: LIST
54951: LIST
54952: PPUSH
54953: CALL_OW 69
54957: ST_TO_ADDR
// if not tmp then
54958: LD_VAR 0 3
54962: NOT
54963: IFFALSE 54967
// exit ;
54965: GO 55023
// un := tmp [ rand ( 1 , tmp ) ] ;
54967: LD_ADDR_VAR 0 2
54971: PUSH
54972: LD_VAR 0 3
54976: PUSH
54977: LD_INT 1
54979: PPUSH
54980: LD_VAR 0 3
54984: PPUSH
54985: CALL_OW 12
54989: ARRAY
54990: ST_TO_ADDR
// if Crawls ( un ) then
54991: LD_VAR 0 2
54995: PPUSH
54996: CALL_OW 318
55000: IFFALSE 55011
// ComWalk ( un ) ;
55002: LD_VAR 0 2
55006: PPUSH
55007: CALL_OW 138
// SetClass ( un , class_sniper ) ;
55011: LD_VAR 0 2
55015: PPUSH
55016: LD_INT 5
55018: PPUSH
55019: CALL_OW 336
// end ;
55023: PPOPN 3
55025: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
55026: LD_EXP 13
55030: PUSH
55031: LD_EXP 31
55035: AND
55036: PUSH
55037: LD_OWVAR 67
55041: PUSH
55042: LD_INT 4
55044: LESS
55045: AND
55046: IFFALSE 55065
55048: GO 55050
55050: DISABLE
// begin Difficulty := Difficulty + 1 ;
55051: LD_ADDR_OWVAR 67
55055: PUSH
55056: LD_OWVAR 67
55060: PUSH
55061: LD_INT 1
55063: PLUS
55064: ST_TO_ADDR
// end ;
55065: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
55066: LD_EXP 13
55070: PUSH
55071: LD_EXP 32
55075: AND
55076: IFFALSE 55179
55078: GO 55080
55080: DISABLE
55081: LD_INT 0
55083: PPUSH
// begin for i := 1 to 5 do
55084: LD_ADDR_VAR 0 1
55088: PUSH
55089: DOUBLE
55090: LD_INT 1
55092: DEC
55093: ST_TO_ADDR
55094: LD_INT 5
55096: PUSH
55097: FOR_TO
55098: IFFALSE 55177
// begin uc_nation := nation_nature ;
55100: LD_ADDR_OWVAR 21
55104: PUSH
55105: LD_INT 0
55107: ST_TO_ADDR
// uc_side := 0 ;
55108: LD_ADDR_OWVAR 20
55112: PUSH
55113: LD_INT 0
55115: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
55116: LD_ADDR_OWVAR 29
55120: PUSH
55121: LD_INT 12
55123: PUSH
55124: LD_INT 12
55126: PUSH
55127: EMPTY
55128: LIST
55129: LIST
55130: ST_TO_ADDR
// hc_agressivity := 20 ;
55131: LD_ADDR_OWVAR 35
55135: PUSH
55136: LD_INT 20
55138: ST_TO_ADDR
// hc_class := class_tiger ;
55139: LD_ADDR_OWVAR 28
55143: PUSH
55144: LD_INT 14
55146: ST_TO_ADDR
// hc_gallery :=  ;
55147: LD_ADDR_OWVAR 33
55151: PUSH
55152: LD_STRING 
55154: ST_TO_ADDR
// hc_name :=  ;
55155: LD_ADDR_OWVAR 26
55159: PUSH
55160: LD_STRING 
55162: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
55163: CALL_OW 44
55167: PPUSH
55168: LD_INT 0
55170: PPUSH
55171: CALL_OW 51
// end ;
55175: GO 55097
55177: POP
55178: POP
// end ;
55179: PPOPN 1
55181: END
// every 0 0$1 trigger StreamModeActive and sBomb do
55182: LD_EXP 13
55186: PUSH
55187: LD_EXP 33
55191: AND
55192: IFFALSE 55201
55194: GO 55196
55196: DISABLE
// StreamSibBomb ;
55197: CALL 55202 0 0
55201: END
// export function StreamSibBomb ; var i , x , y ; begin
55202: LD_INT 0
55204: PPUSH
55205: PPUSH
55206: PPUSH
55207: PPUSH
// result := false ;
55208: LD_ADDR_VAR 0 1
55212: PUSH
55213: LD_INT 0
55215: ST_TO_ADDR
// for i := 1 to 16 do
55216: LD_ADDR_VAR 0 2
55220: PUSH
55221: DOUBLE
55222: LD_INT 1
55224: DEC
55225: ST_TO_ADDR
55226: LD_INT 16
55228: PUSH
55229: FOR_TO
55230: IFFALSE 55429
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
55232: LD_ADDR_VAR 0 3
55236: PUSH
55237: LD_INT 10
55239: PUSH
55240: LD_INT 20
55242: PUSH
55243: LD_INT 30
55245: PUSH
55246: LD_INT 40
55248: PUSH
55249: LD_INT 50
55251: PUSH
55252: LD_INT 60
55254: PUSH
55255: LD_INT 70
55257: PUSH
55258: LD_INT 80
55260: PUSH
55261: LD_INT 90
55263: PUSH
55264: LD_INT 100
55266: PUSH
55267: LD_INT 110
55269: PUSH
55270: LD_INT 120
55272: PUSH
55273: LD_INT 130
55275: PUSH
55276: LD_INT 140
55278: PUSH
55279: LD_INT 150
55281: PUSH
55282: EMPTY
55283: LIST
55284: LIST
55285: LIST
55286: LIST
55287: LIST
55288: LIST
55289: LIST
55290: LIST
55291: LIST
55292: LIST
55293: LIST
55294: LIST
55295: LIST
55296: LIST
55297: LIST
55298: PUSH
55299: LD_INT 1
55301: PPUSH
55302: LD_INT 15
55304: PPUSH
55305: CALL_OW 12
55309: ARRAY
55310: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
55311: LD_ADDR_VAR 0 4
55315: PUSH
55316: LD_INT 10
55318: PUSH
55319: LD_INT 20
55321: PUSH
55322: LD_INT 30
55324: PUSH
55325: LD_INT 40
55327: PUSH
55328: LD_INT 50
55330: PUSH
55331: LD_INT 60
55333: PUSH
55334: LD_INT 70
55336: PUSH
55337: LD_INT 80
55339: PUSH
55340: LD_INT 90
55342: PUSH
55343: LD_INT 100
55345: PUSH
55346: LD_INT 110
55348: PUSH
55349: LD_INT 120
55351: PUSH
55352: LD_INT 130
55354: PUSH
55355: LD_INT 140
55357: PUSH
55358: LD_INT 150
55360: PUSH
55361: EMPTY
55362: LIST
55363: LIST
55364: LIST
55365: LIST
55366: LIST
55367: LIST
55368: LIST
55369: LIST
55370: LIST
55371: LIST
55372: LIST
55373: LIST
55374: LIST
55375: LIST
55376: LIST
55377: PUSH
55378: LD_INT 1
55380: PPUSH
55381: LD_INT 15
55383: PPUSH
55384: CALL_OW 12
55388: ARRAY
55389: ST_TO_ADDR
// if ValidHex ( x , y ) then
55390: LD_VAR 0 3
55394: PPUSH
55395: LD_VAR 0 4
55399: PPUSH
55400: CALL_OW 488
55404: IFFALSE 55427
// begin result := [ x , y ] ;
55406: LD_ADDR_VAR 0 1
55410: PUSH
55411: LD_VAR 0 3
55415: PUSH
55416: LD_VAR 0 4
55420: PUSH
55421: EMPTY
55422: LIST
55423: LIST
55424: ST_TO_ADDR
// break ;
55425: GO 55429
// end ; end ;
55427: GO 55229
55429: POP
55430: POP
// if result then
55431: LD_VAR 0 1
55435: IFFALSE 55495
// begin ToLua ( playSibBomb() ) ;
55437: LD_STRING playSibBomb()
55439: PPUSH
55440: CALL_OW 559
// wait ( 0 0$14 ) ;
55444: LD_INT 490
55446: PPUSH
55447: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
55451: LD_VAR 0 1
55455: PUSH
55456: LD_INT 1
55458: ARRAY
55459: PPUSH
55460: LD_VAR 0 1
55464: PUSH
55465: LD_INT 2
55467: ARRAY
55468: PPUSH
55469: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
55473: LD_VAR 0 1
55477: PUSH
55478: LD_INT 1
55480: ARRAY
55481: PPUSH
55482: LD_VAR 0 1
55486: PUSH
55487: LD_INT 2
55489: ARRAY
55490: PPUSH
55491: CALL_OW 429
// end ; end ;
55495: LD_VAR 0 1
55499: RET
// every 0 0$1 trigger StreamModeActive and sReset do
55500: LD_EXP 13
55504: PUSH
55505: LD_EXP 35
55509: AND
55510: IFFALSE 55522
55512: GO 55514
55514: DISABLE
// YouLost (  ) ;
55515: LD_STRING 
55517: PPUSH
55518: CALL_OW 104
55522: END
// every 0 0$1 trigger StreamModeActive and sFog do
55523: LD_EXP 13
55527: PUSH
55528: LD_EXP 34
55532: AND
55533: IFFALSE 55547
55535: GO 55537
55537: DISABLE
// FogOff ( your_side ) ;
55538: LD_OWVAR 2
55542: PPUSH
55543: CALL_OW 344
55547: END
// every 0 0$1 trigger StreamModeActive and sSun do
55548: LD_EXP 13
55552: PUSH
55553: LD_EXP 36
55557: AND
55558: IFFALSE 55586
55560: GO 55562
55562: DISABLE
// begin solar_recharge_percent := 0 ;
55563: LD_ADDR_OWVAR 79
55567: PUSH
55568: LD_INT 0
55570: ST_TO_ADDR
// wait ( 5 5$00 ) ;
55571: LD_INT 10500
55573: PPUSH
55574: CALL_OW 67
// solar_recharge_percent := 100 ;
55578: LD_ADDR_OWVAR 79
55582: PUSH
55583: LD_INT 100
55585: ST_TO_ADDR
// end ;
55586: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
55587: LD_EXP 13
55591: PUSH
55592: LD_EXP 37
55596: AND
55597: IFFALSE 55836
55599: GO 55601
55601: DISABLE
55602: LD_INT 0
55604: PPUSH
55605: PPUSH
55606: PPUSH
// begin tmp := [ ] ;
55607: LD_ADDR_VAR 0 3
55611: PUSH
55612: EMPTY
55613: ST_TO_ADDR
// for i := 1 to 6 do
55614: LD_ADDR_VAR 0 1
55618: PUSH
55619: DOUBLE
55620: LD_INT 1
55622: DEC
55623: ST_TO_ADDR
55624: LD_INT 6
55626: PUSH
55627: FOR_TO
55628: IFFALSE 55733
// begin uc_nation := nation_nature ;
55630: LD_ADDR_OWVAR 21
55634: PUSH
55635: LD_INT 0
55637: ST_TO_ADDR
// uc_side := 0 ;
55638: LD_ADDR_OWVAR 20
55642: PUSH
55643: LD_INT 0
55645: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
55646: LD_ADDR_OWVAR 29
55650: PUSH
55651: LD_INT 12
55653: PUSH
55654: LD_INT 12
55656: PUSH
55657: EMPTY
55658: LIST
55659: LIST
55660: ST_TO_ADDR
// hc_agressivity := 20 ;
55661: LD_ADDR_OWVAR 35
55665: PUSH
55666: LD_INT 20
55668: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
55669: LD_ADDR_OWVAR 28
55673: PUSH
55674: LD_INT 17
55676: ST_TO_ADDR
// hc_gallery :=  ;
55677: LD_ADDR_OWVAR 33
55681: PUSH
55682: LD_STRING 
55684: ST_TO_ADDR
// hc_name :=  ;
55685: LD_ADDR_OWVAR 26
55689: PUSH
55690: LD_STRING 
55692: ST_TO_ADDR
// un := CreateHuman ;
55693: LD_ADDR_VAR 0 2
55697: PUSH
55698: CALL_OW 44
55702: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
55703: LD_VAR 0 2
55707: PPUSH
55708: LD_INT 1
55710: PPUSH
55711: CALL_OW 51
// tmp := tmp ^ un ;
55715: LD_ADDR_VAR 0 3
55719: PUSH
55720: LD_VAR 0 3
55724: PUSH
55725: LD_VAR 0 2
55729: ADD
55730: ST_TO_ADDR
// end ;
55731: GO 55627
55733: POP
55734: POP
// repeat wait ( 0 0$1 ) ;
55735: LD_INT 35
55737: PPUSH
55738: CALL_OW 67
// for un in tmp do
55742: LD_ADDR_VAR 0 2
55746: PUSH
55747: LD_VAR 0 3
55751: PUSH
55752: FOR_IN
55753: IFFALSE 55827
// begin if IsDead ( un ) then
55755: LD_VAR 0 2
55759: PPUSH
55760: CALL_OW 301
55764: IFFALSE 55784
// begin tmp := tmp diff un ;
55766: LD_ADDR_VAR 0 3
55770: PUSH
55771: LD_VAR 0 3
55775: PUSH
55776: LD_VAR 0 2
55780: DIFF
55781: ST_TO_ADDR
// continue ;
55782: GO 55752
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
55784: LD_VAR 0 2
55788: PPUSH
55789: LD_INT 3
55791: PUSH
55792: LD_INT 22
55794: PUSH
55795: LD_INT 0
55797: PUSH
55798: EMPTY
55799: LIST
55800: LIST
55801: PUSH
55802: EMPTY
55803: LIST
55804: LIST
55805: PPUSH
55806: CALL_OW 69
55810: PPUSH
55811: LD_VAR 0 2
55815: PPUSH
55816: CALL_OW 74
55820: PPUSH
55821: CALL_OW 115
// end ;
55825: GO 55752
55827: POP
55828: POP
// until not tmp ;
55829: LD_VAR 0 3
55833: NOT
55834: IFFALSE 55735
// end ;
55836: PPOPN 3
55838: END
// every 0 0$1 trigger StreamModeActive and sTroll do
55839: LD_EXP 13
55843: PUSH
55844: LD_EXP 38
55848: AND
55849: IFFALSE 55903
55851: GO 55853
55853: DISABLE
// begin ToLua ( displayTroll(); ) ;
55854: LD_STRING displayTroll();
55856: PPUSH
55857: CALL_OW 559
// wait ( 3 3$00 ) ;
55861: LD_INT 6300
55863: PPUSH
55864: CALL_OW 67
// ToLua ( hideTroll(); ) ;
55868: LD_STRING hideTroll();
55870: PPUSH
55871: CALL_OW 559
// wait ( 1 1$00 ) ;
55875: LD_INT 2100
55877: PPUSH
55878: CALL_OW 67
// ToLua ( displayTroll(); ) ;
55882: LD_STRING displayTroll();
55884: PPUSH
55885: CALL_OW 559
// wait ( 1 1$00 ) ;
55889: LD_INT 2100
55891: PPUSH
55892: CALL_OW 67
// ToLua ( hideTroll(); ) ;
55896: LD_STRING hideTroll();
55898: PPUSH
55899: CALL_OW 559
// end ;
55903: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
55904: LD_EXP 13
55908: PUSH
55909: LD_EXP 39
55913: AND
55914: IFFALSE 55977
55916: GO 55918
55918: DISABLE
55919: LD_INT 0
55921: PPUSH
// begin p := 0 ;
55922: LD_ADDR_VAR 0 1
55926: PUSH
55927: LD_INT 0
55929: ST_TO_ADDR
// repeat game_speed := 1 ;
55930: LD_ADDR_OWVAR 65
55934: PUSH
55935: LD_INT 1
55937: ST_TO_ADDR
// wait ( 0 0$1 ) ;
55938: LD_INT 35
55940: PPUSH
55941: CALL_OW 67
// p := p + 1 ;
55945: LD_ADDR_VAR 0 1
55949: PUSH
55950: LD_VAR 0 1
55954: PUSH
55955: LD_INT 1
55957: PLUS
55958: ST_TO_ADDR
// until p >= 60 ;
55959: LD_VAR 0 1
55963: PUSH
55964: LD_INT 60
55966: GREATEREQUAL
55967: IFFALSE 55930
// game_speed := 4 ;
55969: LD_ADDR_OWVAR 65
55973: PUSH
55974: LD_INT 4
55976: ST_TO_ADDR
// end ;
55977: PPOPN 1
55979: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
55980: LD_EXP 13
55984: PUSH
55985: LD_EXP 40
55989: AND
55990: IFFALSE 56136
55992: GO 55994
55994: DISABLE
55995: LD_INT 0
55997: PPUSH
55998: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
55999: LD_ADDR_VAR 0 1
56003: PUSH
56004: LD_INT 22
56006: PUSH
56007: LD_OWVAR 2
56011: PUSH
56012: EMPTY
56013: LIST
56014: LIST
56015: PUSH
56016: LD_INT 2
56018: PUSH
56019: LD_INT 30
56021: PUSH
56022: LD_INT 0
56024: PUSH
56025: EMPTY
56026: LIST
56027: LIST
56028: PUSH
56029: LD_INT 30
56031: PUSH
56032: LD_INT 1
56034: PUSH
56035: EMPTY
56036: LIST
56037: LIST
56038: PUSH
56039: EMPTY
56040: LIST
56041: LIST
56042: LIST
56043: PUSH
56044: EMPTY
56045: LIST
56046: LIST
56047: PPUSH
56048: CALL_OW 69
56052: ST_TO_ADDR
// if not depot then
56053: LD_VAR 0 1
56057: NOT
56058: IFFALSE 56062
// exit ;
56060: GO 56136
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
56062: LD_ADDR_VAR 0 2
56066: PUSH
56067: LD_VAR 0 1
56071: PUSH
56072: LD_INT 1
56074: PPUSH
56075: LD_VAR 0 1
56079: PPUSH
56080: CALL_OW 12
56084: ARRAY
56085: PPUSH
56086: CALL_OW 274
56090: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
56091: LD_VAR 0 2
56095: PPUSH
56096: LD_INT 1
56098: PPUSH
56099: LD_INT 0
56101: PPUSH
56102: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
56106: LD_VAR 0 2
56110: PPUSH
56111: LD_INT 2
56113: PPUSH
56114: LD_INT 0
56116: PPUSH
56117: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
56121: LD_VAR 0 2
56125: PPUSH
56126: LD_INT 3
56128: PPUSH
56129: LD_INT 0
56131: PPUSH
56132: CALL_OW 277
// end ;
56136: PPOPN 2
56138: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
56139: LD_EXP 13
56143: PUSH
56144: LD_EXP 41
56148: AND
56149: IFFALSE 56246
56151: GO 56153
56153: DISABLE
56154: LD_INT 0
56156: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
56157: LD_ADDR_VAR 0 1
56161: PUSH
56162: LD_INT 22
56164: PUSH
56165: LD_OWVAR 2
56169: PUSH
56170: EMPTY
56171: LIST
56172: LIST
56173: PUSH
56174: LD_INT 21
56176: PUSH
56177: LD_INT 1
56179: PUSH
56180: EMPTY
56181: LIST
56182: LIST
56183: PUSH
56184: LD_INT 3
56186: PUSH
56187: LD_INT 23
56189: PUSH
56190: LD_INT 0
56192: PUSH
56193: EMPTY
56194: LIST
56195: LIST
56196: PUSH
56197: EMPTY
56198: LIST
56199: LIST
56200: PUSH
56201: EMPTY
56202: LIST
56203: LIST
56204: LIST
56205: PPUSH
56206: CALL_OW 69
56210: ST_TO_ADDR
// if not tmp then
56211: LD_VAR 0 1
56215: NOT
56216: IFFALSE 56220
// exit ;
56218: GO 56246
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
56220: LD_VAR 0 1
56224: PUSH
56225: LD_INT 1
56227: PPUSH
56228: LD_VAR 0 1
56232: PPUSH
56233: CALL_OW 12
56237: ARRAY
56238: PPUSH
56239: LD_INT 200
56241: PPUSH
56242: CALL_OW 234
// end ;
56246: PPOPN 1
56248: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
56249: LD_EXP 13
56253: PUSH
56254: LD_EXP 42
56258: AND
56259: IFFALSE 56338
56261: GO 56263
56263: DISABLE
56264: LD_INT 0
56266: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
56267: LD_ADDR_VAR 0 1
56271: PUSH
56272: LD_INT 22
56274: PUSH
56275: LD_OWVAR 2
56279: PUSH
56280: EMPTY
56281: LIST
56282: LIST
56283: PUSH
56284: LD_INT 21
56286: PUSH
56287: LD_INT 2
56289: PUSH
56290: EMPTY
56291: LIST
56292: LIST
56293: PUSH
56294: EMPTY
56295: LIST
56296: LIST
56297: PPUSH
56298: CALL_OW 69
56302: ST_TO_ADDR
// if not tmp then
56303: LD_VAR 0 1
56307: NOT
56308: IFFALSE 56312
// exit ;
56310: GO 56338
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
56312: LD_VAR 0 1
56316: PUSH
56317: LD_INT 1
56319: PPUSH
56320: LD_VAR 0 1
56324: PPUSH
56325: CALL_OW 12
56329: ARRAY
56330: PPUSH
56331: LD_INT 60
56333: PPUSH
56334: CALL_OW 234
// end ;
56338: PPOPN 1
56340: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
56341: LD_EXP 13
56345: PUSH
56346: LD_EXP 43
56350: AND
56351: IFFALSE 56450
56353: GO 56355
56355: DISABLE
56356: LD_INT 0
56358: PPUSH
56359: PPUSH
// begin enable ;
56360: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
56361: LD_ADDR_VAR 0 1
56365: PUSH
56366: LD_INT 22
56368: PUSH
56369: LD_OWVAR 2
56373: PUSH
56374: EMPTY
56375: LIST
56376: LIST
56377: PUSH
56378: LD_INT 61
56380: PUSH
56381: EMPTY
56382: LIST
56383: PUSH
56384: LD_INT 33
56386: PUSH
56387: LD_INT 2
56389: PUSH
56390: EMPTY
56391: LIST
56392: LIST
56393: PUSH
56394: EMPTY
56395: LIST
56396: LIST
56397: LIST
56398: PPUSH
56399: CALL_OW 69
56403: ST_TO_ADDR
// if not tmp then
56404: LD_VAR 0 1
56408: NOT
56409: IFFALSE 56413
// exit ;
56411: GO 56450
// for i in tmp do
56413: LD_ADDR_VAR 0 2
56417: PUSH
56418: LD_VAR 0 1
56422: PUSH
56423: FOR_IN
56424: IFFALSE 56448
// if IsControledBy ( i ) then
56426: LD_VAR 0 2
56430: PPUSH
56431: CALL_OW 312
56435: IFFALSE 56446
// ComUnlink ( i ) ;
56437: LD_VAR 0 2
56441: PPUSH
56442: CALL_OW 136
56446: GO 56423
56448: POP
56449: POP
// end ;
56450: PPOPN 2
56452: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
56453: LD_EXP 13
56457: PUSH
56458: LD_EXP 44
56462: AND
56463: IFFALSE 56603
56465: GO 56467
56467: DISABLE
56468: LD_INT 0
56470: PPUSH
56471: PPUSH
// begin ToLua ( displayPowell(); ) ;
56472: LD_STRING displayPowell();
56474: PPUSH
56475: CALL_OW 559
// uc_side := 0 ;
56479: LD_ADDR_OWVAR 20
56483: PUSH
56484: LD_INT 0
56486: ST_TO_ADDR
// uc_nation := 2 ;
56487: LD_ADDR_OWVAR 21
56491: PUSH
56492: LD_INT 2
56494: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
56495: LD_ADDR_OWVAR 37
56499: PUSH
56500: LD_INT 14
56502: ST_TO_ADDR
// vc_engine := engine_siberite ;
56503: LD_ADDR_OWVAR 39
56507: PUSH
56508: LD_INT 3
56510: ST_TO_ADDR
// vc_control := control_apeman ;
56511: LD_ADDR_OWVAR 38
56515: PUSH
56516: LD_INT 5
56518: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
56519: LD_ADDR_OWVAR 40
56523: PUSH
56524: LD_INT 29
56526: ST_TO_ADDR
// un := CreateVehicle ;
56527: LD_ADDR_VAR 0 2
56531: PUSH
56532: CALL_OW 45
56536: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
56537: LD_VAR 0 2
56541: PPUSH
56542: LD_INT 1
56544: PPUSH
56545: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
56549: LD_INT 35
56551: PPUSH
56552: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
56556: LD_VAR 0 2
56560: PPUSH
56561: LD_INT 22
56563: PUSH
56564: LD_OWVAR 2
56568: PUSH
56569: EMPTY
56570: LIST
56571: LIST
56572: PPUSH
56573: CALL_OW 69
56577: PPUSH
56578: LD_VAR 0 2
56582: PPUSH
56583: CALL_OW 74
56587: PPUSH
56588: CALL_OW 115
// until IsDead ( un ) ;
56592: LD_VAR 0 2
56596: PPUSH
56597: CALL_OW 301
56601: IFFALSE 56549
// end ;
56603: PPOPN 2
56605: END
// every 0 0$1 trigger StreamModeActive and sStu do
56606: LD_EXP 13
56610: PUSH
56611: LD_EXP 52
56615: AND
56616: IFFALSE 56632
56618: GO 56620
56620: DISABLE
// begin ToLua ( displayStucuk(); ) ;
56621: LD_STRING displayStucuk();
56623: PPUSH
56624: CALL_OW 559
// ResetFog ;
56628: CALL_OW 335
// end ;
56632: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
56633: LD_EXP 13
56637: PUSH
56638: LD_EXP 45
56642: AND
56643: IFFALSE 56784
56645: GO 56647
56647: DISABLE
56648: LD_INT 0
56650: PPUSH
56651: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
56652: LD_ADDR_VAR 0 2
56656: PUSH
56657: LD_INT 22
56659: PUSH
56660: LD_OWVAR 2
56664: PUSH
56665: EMPTY
56666: LIST
56667: LIST
56668: PUSH
56669: LD_INT 21
56671: PUSH
56672: LD_INT 1
56674: PUSH
56675: EMPTY
56676: LIST
56677: LIST
56678: PUSH
56679: EMPTY
56680: LIST
56681: LIST
56682: PPUSH
56683: CALL_OW 69
56687: ST_TO_ADDR
// if not tmp then
56688: LD_VAR 0 2
56692: NOT
56693: IFFALSE 56697
// exit ;
56695: GO 56784
// un := tmp [ rand ( 1 , tmp ) ] ;
56697: LD_ADDR_VAR 0 1
56701: PUSH
56702: LD_VAR 0 2
56706: PUSH
56707: LD_INT 1
56709: PPUSH
56710: LD_VAR 0 2
56714: PPUSH
56715: CALL_OW 12
56719: ARRAY
56720: ST_TO_ADDR
// SetSide ( un , 0 ) ;
56721: LD_VAR 0 1
56725: PPUSH
56726: LD_INT 0
56728: PPUSH
56729: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
56733: LD_VAR 0 1
56737: PPUSH
56738: LD_OWVAR 3
56742: PUSH
56743: LD_VAR 0 1
56747: DIFF
56748: PPUSH
56749: LD_VAR 0 1
56753: PPUSH
56754: CALL_OW 74
56758: PPUSH
56759: CALL_OW 115
// wait ( 0 0$20 ) ;
56763: LD_INT 700
56765: PPUSH
56766: CALL_OW 67
// SetSide ( un , your_side ) ;
56770: LD_VAR 0 1
56774: PPUSH
56775: LD_OWVAR 2
56779: PPUSH
56780: CALL_OW 235
// end ;
56784: PPOPN 2
56786: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
56787: LD_EXP 13
56791: PUSH
56792: LD_EXP 46
56796: AND
56797: IFFALSE 56903
56799: GO 56801
56801: DISABLE
56802: LD_INT 0
56804: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
56805: LD_ADDR_VAR 0 1
56809: PUSH
56810: LD_INT 22
56812: PUSH
56813: LD_OWVAR 2
56817: PUSH
56818: EMPTY
56819: LIST
56820: LIST
56821: PUSH
56822: LD_INT 2
56824: PUSH
56825: LD_INT 30
56827: PUSH
56828: LD_INT 0
56830: PUSH
56831: EMPTY
56832: LIST
56833: LIST
56834: PUSH
56835: LD_INT 30
56837: PUSH
56838: LD_INT 1
56840: PUSH
56841: EMPTY
56842: LIST
56843: LIST
56844: PUSH
56845: EMPTY
56846: LIST
56847: LIST
56848: LIST
56849: PUSH
56850: EMPTY
56851: LIST
56852: LIST
56853: PPUSH
56854: CALL_OW 69
56858: ST_TO_ADDR
// if not depot then
56859: LD_VAR 0 1
56863: NOT
56864: IFFALSE 56868
// exit ;
56866: GO 56903
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
56868: LD_VAR 0 1
56872: PUSH
56873: LD_INT 1
56875: ARRAY
56876: PPUSH
56877: CALL_OW 250
56881: PPUSH
56882: LD_VAR 0 1
56886: PUSH
56887: LD_INT 1
56889: ARRAY
56890: PPUSH
56891: CALL_OW 251
56895: PPUSH
56896: LD_INT 70
56898: PPUSH
56899: CALL_OW 495
// end ;
56903: PPOPN 1
56905: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
56906: LD_EXP 13
56910: PUSH
56911: LD_EXP 47
56915: AND
56916: IFFALSE 57127
56918: GO 56920
56920: DISABLE
56921: LD_INT 0
56923: PPUSH
56924: PPUSH
56925: PPUSH
56926: PPUSH
56927: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
56928: LD_ADDR_VAR 0 5
56932: PUSH
56933: LD_INT 22
56935: PUSH
56936: LD_OWVAR 2
56940: PUSH
56941: EMPTY
56942: LIST
56943: LIST
56944: PUSH
56945: LD_INT 21
56947: PUSH
56948: LD_INT 1
56950: PUSH
56951: EMPTY
56952: LIST
56953: LIST
56954: PUSH
56955: EMPTY
56956: LIST
56957: LIST
56958: PPUSH
56959: CALL_OW 69
56963: ST_TO_ADDR
// if not tmp then
56964: LD_VAR 0 5
56968: NOT
56969: IFFALSE 56973
// exit ;
56971: GO 57127
// for i in tmp do
56973: LD_ADDR_VAR 0 1
56977: PUSH
56978: LD_VAR 0 5
56982: PUSH
56983: FOR_IN
56984: IFFALSE 57125
// begin d := rand ( 0 , 5 ) ;
56986: LD_ADDR_VAR 0 4
56990: PUSH
56991: LD_INT 0
56993: PPUSH
56994: LD_INT 5
56996: PPUSH
56997: CALL_OW 12
57001: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
57002: LD_ADDR_VAR 0 2
57006: PUSH
57007: LD_VAR 0 1
57011: PPUSH
57012: CALL_OW 250
57016: PPUSH
57017: LD_VAR 0 4
57021: PPUSH
57022: LD_INT 3
57024: PPUSH
57025: LD_INT 12
57027: PPUSH
57028: CALL_OW 12
57032: PPUSH
57033: CALL_OW 272
57037: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
57038: LD_ADDR_VAR 0 3
57042: PUSH
57043: LD_VAR 0 1
57047: PPUSH
57048: CALL_OW 251
57052: PPUSH
57053: LD_VAR 0 4
57057: PPUSH
57058: LD_INT 3
57060: PPUSH
57061: LD_INT 12
57063: PPUSH
57064: CALL_OW 12
57068: PPUSH
57069: CALL_OW 273
57073: ST_TO_ADDR
// if ValidHex ( x , y ) then
57074: LD_VAR 0 2
57078: PPUSH
57079: LD_VAR 0 3
57083: PPUSH
57084: CALL_OW 488
57088: IFFALSE 57123
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
57090: LD_VAR 0 1
57094: PPUSH
57095: LD_VAR 0 2
57099: PPUSH
57100: LD_VAR 0 3
57104: PPUSH
57105: LD_INT 3
57107: PPUSH
57108: LD_INT 6
57110: PPUSH
57111: CALL_OW 12
57115: PPUSH
57116: LD_INT 1
57118: PPUSH
57119: CALL_OW 483
// end ;
57123: GO 56983
57125: POP
57126: POP
// end ;
57127: PPOPN 5
57129: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
57130: LD_EXP 13
57134: PUSH
57135: LD_EXP 48
57139: AND
57140: IFFALSE 57234
57142: GO 57144
57144: DISABLE
57145: LD_INT 0
57147: PPUSH
57148: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
57149: LD_ADDR_VAR 0 2
57153: PUSH
57154: LD_INT 22
57156: PUSH
57157: LD_OWVAR 2
57161: PUSH
57162: EMPTY
57163: LIST
57164: LIST
57165: PUSH
57166: LD_INT 32
57168: PUSH
57169: LD_INT 1
57171: PUSH
57172: EMPTY
57173: LIST
57174: LIST
57175: PUSH
57176: LD_INT 21
57178: PUSH
57179: LD_INT 2
57181: PUSH
57182: EMPTY
57183: LIST
57184: LIST
57185: PUSH
57186: EMPTY
57187: LIST
57188: LIST
57189: LIST
57190: PPUSH
57191: CALL_OW 69
57195: ST_TO_ADDR
// if not tmp then
57196: LD_VAR 0 2
57200: NOT
57201: IFFALSE 57205
// exit ;
57203: GO 57234
// for i in tmp do
57205: LD_ADDR_VAR 0 1
57209: PUSH
57210: LD_VAR 0 2
57214: PUSH
57215: FOR_IN
57216: IFFALSE 57232
// SetFuel ( i , 0 ) ;
57218: LD_VAR 0 1
57222: PPUSH
57223: LD_INT 0
57225: PPUSH
57226: CALL_OW 240
57230: GO 57215
57232: POP
57233: POP
// end ;
57234: PPOPN 2
57236: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
57237: LD_EXP 13
57241: PUSH
57242: LD_EXP 49
57246: AND
57247: IFFALSE 57313
57249: GO 57251
57251: DISABLE
57252: LD_INT 0
57254: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
57255: LD_ADDR_VAR 0 1
57259: PUSH
57260: LD_INT 22
57262: PUSH
57263: LD_OWVAR 2
57267: PUSH
57268: EMPTY
57269: LIST
57270: LIST
57271: PUSH
57272: LD_INT 30
57274: PUSH
57275: LD_INT 29
57277: PUSH
57278: EMPTY
57279: LIST
57280: LIST
57281: PUSH
57282: EMPTY
57283: LIST
57284: LIST
57285: PPUSH
57286: CALL_OW 69
57290: ST_TO_ADDR
// if not tmp then
57291: LD_VAR 0 1
57295: NOT
57296: IFFALSE 57300
// exit ;
57298: GO 57313
// DestroyUnit ( tmp [ 1 ] ) ;
57300: LD_VAR 0 1
57304: PUSH
57305: LD_INT 1
57307: ARRAY
57308: PPUSH
57309: CALL_OW 65
// end ;
57313: PPOPN 1
57315: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
57316: LD_EXP 13
57320: PUSH
57321: LD_EXP 51
57325: AND
57326: IFFALSE 57455
57328: GO 57330
57330: DISABLE
57331: LD_INT 0
57333: PPUSH
// begin uc_side := 0 ;
57334: LD_ADDR_OWVAR 20
57338: PUSH
57339: LD_INT 0
57341: ST_TO_ADDR
// uc_nation := nation_arabian ;
57342: LD_ADDR_OWVAR 21
57346: PUSH
57347: LD_INT 2
57349: ST_TO_ADDR
// hc_gallery :=  ;
57350: LD_ADDR_OWVAR 33
57354: PUSH
57355: LD_STRING 
57357: ST_TO_ADDR
// hc_name :=  ;
57358: LD_ADDR_OWVAR 26
57362: PUSH
57363: LD_STRING 
57365: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
57366: LD_INT 1
57368: PPUSH
57369: LD_INT 11
57371: PPUSH
57372: LD_INT 10
57374: PPUSH
57375: CALL_OW 380
// un := CreateHuman ;
57379: LD_ADDR_VAR 0 1
57383: PUSH
57384: CALL_OW 44
57388: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
57389: LD_VAR 0 1
57393: PPUSH
57394: LD_INT 1
57396: PPUSH
57397: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
57401: LD_INT 35
57403: PPUSH
57404: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
57408: LD_VAR 0 1
57412: PPUSH
57413: LD_INT 22
57415: PUSH
57416: LD_OWVAR 2
57420: PUSH
57421: EMPTY
57422: LIST
57423: LIST
57424: PPUSH
57425: CALL_OW 69
57429: PPUSH
57430: LD_VAR 0 1
57434: PPUSH
57435: CALL_OW 74
57439: PPUSH
57440: CALL_OW 115
// until IsDead ( un ) ;
57444: LD_VAR 0 1
57448: PPUSH
57449: CALL_OW 301
57453: IFFALSE 57401
// end ;
57455: PPOPN 1
57457: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
57458: LD_EXP 13
57462: PUSH
57463: LD_EXP 53
57467: AND
57468: IFFALSE 57480
57470: GO 57472
57472: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
57473: LD_STRING earthquake(getX(game), 0, 32)
57475: PPUSH
57476: CALL_OW 559
57480: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
57481: LD_EXP 13
57485: PUSH
57486: LD_EXP 54
57490: AND
57491: IFFALSE 57582
57493: GO 57495
57495: DISABLE
57496: LD_INT 0
57498: PPUSH
// begin enable ;
57499: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
57500: LD_ADDR_VAR 0 1
57504: PUSH
57505: LD_INT 22
57507: PUSH
57508: LD_OWVAR 2
57512: PUSH
57513: EMPTY
57514: LIST
57515: LIST
57516: PUSH
57517: LD_INT 21
57519: PUSH
57520: LD_INT 2
57522: PUSH
57523: EMPTY
57524: LIST
57525: LIST
57526: PUSH
57527: LD_INT 33
57529: PUSH
57530: LD_INT 3
57532: PUSH
57533: EMPTY
57534: LIST
57535: LIST
57536: PUSH
57537: EMPTY
57538: LIST
57539: LIST
57540: LIST
57541: PPUSH
57542: CALL_OW 69
57546: ST_TO_ADDR
// if not tmp then
57547: LD_VAR 0 1
57551: NOT
57552: IFFALSE 57556
// exit ;
57554: GO 57582
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
57556: LD_VAR 0 1
57560: PUSH
57561: LD_INT 1
57563: PPUSH
57564: LD_VAR 0 1
57568: PPUSH
57569: CALL_OW 12
57573: ARRAY
57574: PPUSH
57575: LD_INT 1
57577: PPUSH
57578: CALL_OW 234
// end ;
57582: PPOPN 1
57584: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
57585: LD_EXP 13
57589: PUSH
57590: LD_EXP 55
57594: AND
57595: IFFALSE 57736
57597: GO 57599
57599: DISABLE
57600: LD_INT 0
57602: PPUSH
57603: PPUSH
57604: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
57605: LD_ADDR_VAR 0 3
57609: PUSH
57610: LD_INT 22
57612: PUSH
57613: LD_OWVAR 2
57617: PUSH
57618: EMPTY
57619: LIST
57620: LIST
57621: PUSH
57622: LD_INT 25
57624: PUSH
57625: LD_INT 1
57627: PUSH
57628: EMPTY
57629: LIST
57630: LIST
57631: PUSH
57632: EMPTY
57633: LIST
57634: LIST
57635: PPUSH
57636: CALL_OW 69
57640: ST_TO_ADDR
// if not tmp then
57641: LD_VAR 0 3
57645: NOT
57646: IFFALSE 57650
// exit ;
57648: GO 57736
// un := tmp [ rand ( 1 , tmp ) ] ;
57650: LD_ADDR_VAR 0 2
57654: PUSH
57655: LD_VAR 0 3
57659: PUSH
57660: LD_INT 1
57662: PPUSH
57663: LD_VAR 0 3
57667: PPUSH
57668: CALL_OW 12
57672: ARRAY
57673: ST_TO_ADDR
// if Crawls ( un ) then
57674: LD_VAR 0 2
57678: PPUSH
57679: CALL_OW 318
57683: IFFALSE 57694
// ComWalk ( un ) ;
57685: LD_VAR 0 2
57689: PPUSH
57690: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
57694: LD_VAR 0 2
57698: PPUSH
57699: LD_INT 9
57701: PPUSH
57702: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
57706: LD_INT 28
57708: PPUSH
57709: LD_OWVAR 2
57713: PPUSH
57714: LD_INT 2
57716: PPUSH
57717: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
57721: LD_INT 29
57723: PPUSH
57724: LD_OWVAR 2
57728: PPUSH
57729: LD_INT 2
57731: PPUSH
57732: CALL_OW 322
// end ;
57736: PPOPN 3
57738: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
57739: LD_EXP 13
57743: PUSH
57744: LD_EXP 56
57748: AND
57749: IFFALSE 57860
57751: GO 57753
57753: DISABLE
57754: LD_INT 0
57756: PPUSH
57757: PPUSH
57758: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
57759: LD_ADDR_VAR 0 3
57763: PUSH
57764: LD_INT 22
57766: PUSH
57767: LD_OWVAR 2
57771: PUSH
57772: EMPTY
57773: LIST
57774: LIST
57775: PUSH
57776: LD_INT 25
57778: PUSH
57779: LD_INT 1
57781: PUSH
57782: EMPTY
57783: LIST
57784: LIST
57785: PUSH
57786: EMPTY
57787: LIST
57788: LIST
57789: PPUSH
57790: CALL_OW 69
57794: ST_TO_ADDR
// if not tmp then
57795: LD_VAR 0 3
57799: NOT
57800: IFFALSE 57804
// exit ;
57802: GO 57860
// un := tmp [ rand ( 1 , tmp ) ] ;
57804: LD_ADDR_VAR 0 2
57808: PUSH
57809: LD_VAR 0 3
57813: PUSH
57814: LD_INT 1
57816: PPUSH
57817: LD_VAR 0 3
57821: PPUSH
57822: CALL_OW 12
57826: ARRAY
57827: ST_TO_ADDR
// if Crawls ( un ) then
57828: LD_VAR 0 2
57832: PPUSH
57833: CALL_OW 318
57837: IFFALSE 57848
// ComWalk ( un ) ;
57839: LD_VAR 0 2
57843: PPUSH
57844: CALL_OW 138
// SetClass ( un , class_mortar ) ;
57848: LD_VAR 0 2
57852: PPUSH
57853: LD_INT 8
57855: PPUSH
57856: CALL_OW 336
// end ;
57860: PPOPN 3
57862: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
57863: LD_EXP 13
57867: PUSH
57868: LD_EXP 57
57872: AND
57873: IFFALSE 58017
57875: GO 57877
57877: DISABLE
57878: LD_INT 0
57880: PPUSH
57881: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
57882: LD_ADDR_VAR 0 2
57886: PUSH
57887: LD_INT 22
57889: PUSH
57890: LD_OWVAR 2
57894: PUSH
57895: EMPTY
57896: LIST
57897: LIST
57898: PUSH
57899: LD_INT 21
57901: PUSH
57902: LD_INT 2
57904: PUSH
57905: EMPTY
57906: LIST
57907: LIST
57908: PUSH
57909: LD_INT 2
57911: PUSH
57912: LD_INT 34
57914: PUSH
57915: LD_INT 12
57917: PUSH
57918: EMPTY
57919: LIST
57920: LIST
57921: PUSH
57922: LD_INT 34
57924: PUSH
57925: LD_INT 51
57927: PUSH
57928: EMPTY
57929: LIST
57930: LIST
57931: PUSH
57932: LD_INT 34
57934: PUSH
57935: LD_INT 32
57937: PUSH
57938: EMPTY
57939: LIST
57940: LIST
57941: PUSH
57942: EMPTY
57943: LIST
57944: LIST
57945: LIST
57946: LIST
57947: PUSH
57948: EMPTY
57949: LIST
57950: LIST
57951: LIST
57952: PPUSH
57953: CALL_OW 69
57957: ST_TO_ADDR
// if not tmp then
57958: LD_VAR 0 2
57962: NOT
57963: IFFALSE 57967
// exit ;
57965: GO 58017
// for i in tmp do
57967: LD_ADDR_VAR 0 1
57971: PUSH
57972: LD_VAR 0 2
57976: PUSH
57977: FOR_IN
57978: IFFALSE 58015
// if GetCargo ( i , mat_artifact ) = 0 then
57980: LD_VAR 0 1
57984: PPUSH
57985: LD_INT 4
57987: PPUSH
57988: CALL_OW 289
57992: PUSH
57993: LD_INT 0
57995: EQUAL
57996: IFFALSE 58013
// SetCargo ( i , mat_siberit , 100 ) ;
57998: LD_VAR 0 1
58002: PPUSH
58003: LD_INT 3
58005: PPUSH
58006: LD_INT 100
58008: PPUSH
58009: CALL_OW 290
58013: GO 57977
58015: POP
58016: POP
// end ;
58017: PPOPN 2
58019: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
58020: LD_EXP 13
58024: PUSH
58025: LD_EXP 58
58029: AND
58030: IFFALSE 58213
58032: GO 58034
58034: DISABLE
58035: LD_INT 0
58037: PPUSH
58038: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
58039: LD_ADDR_VAR 0 2
58043: PUSH
58044: LD_INT 22
58046: PUSH
58047: LD_OWVAR 2
58051: PUSH
58052: EMPTY
58053: LIST
58054: LIST
58055: PPUSH
58056: CALL_OW 69
58060: ST_TO_ADDR
// if not tmp then
58061: LD_VAR 0 2
58065: NOT
58066: IFFALSE 58070
// exit ;
58068: GO 58213
// for i := 1 to 2 do
58070: LD_ADDR_VAR 0 1
58074: PUSH
58075: DOUBLE
58076: LD_INT 1
58078: DEC
58079: ST_TO_ADDR
58080: LD_INT 2
58082: PUSH
58083: FOR_TO
58084: IFFALSE 58211
// begin uc_side := your_side ;
58086: LD_ADDR_OWVAR 20
58090: PUSH
58091: LD_OWVAR 2
58095: ST_TO_ADDR
// uc_nation := nation_american ;
58096: LD_ADDR_OWVAR 21
58100: PUSH
58101: LD_INT 1
58103: ST_TO_ADDR
// vc_chassis := us_morphling ;
58104: LD_ADDR_OWVAR 37
58108: PUSH
58109: LD_INT 5
58111: ST_TO_ADDR
// vc_engine := engine_siberite ;
58112: LD_ADDR_OWVAR 39
58116: PUSH
58117: LD_INT 3
58119: ST_TO_ADDR
// vc_control := control_computer ;
58120: LD_ADDR_OWVAR 38
58124: PUSH
58125: LD_INT 3
58127: ST_TO_ADDR
// vc_weapon := us_double_laser ;
58128: LD_ADDR_OWVAR 40
58132: PUSH
58133: LD_INT 10
58135: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
58136: LD_VAR 0 2
58140: PUSH
58141: LD_INT 1
58143: ARRAY
58144: PPUSH
58145: CALL_OW 310
58149: NOT
58150: IFFALSE 58197
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
58152: CALL_OW 45
58156: PPUSH
58157: LD_VAR 0 2
58161: PUSH
58162: LD_INT 1
58164: ARRAY
58165: PPUSH
58166: CALL_OW 250
58170: PPUSH
58171: LD_VAR 0 2
58175: PUSH
58176: LD_INT 1
58178: ARRAY
58179: PPUSH
58180: CALL_OW 251
58184: PPUSH
58185: LD_INT 12
58187: PPUSH
58188: LD_INT 1
58190: PPUSH
58191: CALL_OW 50
58195: GO 58209
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
58197: CALL_OW 45
58201: PPUSH
58202: LD_INT 1
58204: PPUSH
58205: CALL_OW 51
// end ;
58209: GO 58083
58211: POP
58212: POP
// end ;
58213: PPOPN 2
58215: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
58216: LD_EXP 13
58220: PUSH
58221: LD_EXP 59
58225: AND
58226: IFFALSE 58448
58228: GO 58230
58230: DISABLE
58231: LD_INT 0
58233: PPUSH
58234: PPUSH
58235: PPUSH
58236: PPUSH
58237: PPUSH
58238: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
58239: LD_ADDR_VAR 0 6
58243: PUSH
58244: LD_INT 22
58246: PUSH
58247: LD_OWVAR 2
58251: PUSH
58252: EMPTY
58253: LIST
58254: LIST
58255: PUSH
58256: LD_INT 21
58258: PUSH
58259: LD_INT 1
58261: PUSH
58262: EMPTY
58263: LIST
58264: LIST
58265: PUSH
58266: LD_INT 3
58268: PUSH
58269: LD_INT 23
58271: PUSH
58272: LD_INT 0
58274: PUSH
58275: EMPTY
58276: LIST
58277: LIST
58278: PUSH
58279: EMPTY
58280: LIST
58281: LIST
58282: PUSH
58283: EMPTY
58284: LIST
58285: LIST
58286: LIST
58287: PPUSH
58288: CALL_OW 69
58292: ST_TO_ADDR
// if not tmp then
58293: LD_VAR 0 6
58297: NOT
58298: IFFALSE 58302
// exit ;
58300: GO 58448
// s1 := rand ( 1 , 4 ) ;
58302: LD_ADDR_VAR 0 2
58306: PUSH
58307: LD_INT 1
58309: PPUSH
58310: LD_INT 4
58312: PPUSH
58313: CALL_OW 12
58317: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
58318: LD_ADDR_VAR 0 4
58322: PUSH
58323: LD_VAR 0 6
58327: PUSH
58328: LD_INT 1
58330: ARRAY
58331: PPUSH
58332: LD_VAR 0 2
58336: PPUSH
58337: CALL_OW 259
58341: ST_TO_ADDR
// if s1 = 1 then
58342: LD_VAR 0 2
58346: PUSH
58347: LD_INT 1
58349: EQUAL
58350: IFFALSE 58370
// s2 := rand ( 2 , 4 ) else
58352: LD_ADDR_VAR 0 3
58356: PUSH
58357: LD_INT 2
58359: PPUSH
58360: LD_INT 4
58362: PPUSH
58363: CALL_OW 12
58367: ST_TO_ADDR
58368: GO 58378
// s2 := 1 ;
58370: LD_ADDR_VAR 0 3
58374: PUSH
58375: LD_INT 1
58377: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
58378: LD_ADDR_VAR 0 5
58382: PUSH
58383: LD_VAR 0 6
58387: PUSH
58388: LD_INT 1
58390: ARRAY
58391: PPUSH
58392: LD_VAR 0 3
58396: PPUSH
58397: CALL_OW 259
58401: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
58402: LD_VAR 0 6
58406: PUSH
58407: LD_INT 1
58409: ARRAY
58410: PPUSH
58411: LD_VAR 0 2
58415: PPUSH
58416: LD_VAR 0 5
58420: PPUSH
58421: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
58425: LD_VAR 0 6
58429: PUSH
58430: LD_INT 1
58432: ARRAY
58433: PPUSH
58434: LD_VAR 0 3
58438: PPUSH
58439: LD_VAR 0 4
58443: PPUSH
58444: CALL_OW 237
// end ;
58448: PPOPN 6
58450: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
58451: LD_EXP 13
58455: PUSH
58456: LD_EXP 60
58460: AND
58461: IFFALSE 58540
58463: GO 58465
58465: DISABLE
58466: LD_INT 0
58468: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
58469: LD_ADDR_VAR 0 1
58473: PUSH
58474: LD_INT 22
58476: PUSH
58477: LD_OWVAR 2
58481: PUSH
58482: EMPTY
58483: LIST
58484: LIST
58485: PUSH
58486: LD_INT 30
58488: PUSH
58489: LD_INT 3
58491: PUSH
58492: EMPTY
58493: LIST
58494: LIST
58495: PUSH
58496: EMPTY
58497: LIST
58498: LIST
58499: PPUSH
58500: CALL_OW 69
58504: ST_TO_ADDR
// if not tmp then
58505: LD_VAR 0 1
58509: NOT
58510: IFFALSE 58514
// exit ;
58512: GO 58540
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
58514: LD_VAR 0 1
58518: PUSH
58519: LD_INT 1
58521: PPUSH
58522: LD_VAR 0 1
58526: PPUSH
58527: CALL_OW 12
58531: ARRAY
58532: PPUSH
58533: LD_INT 1
58535: PPUSH
58536: CALL_OW 234
// end ;
58540: PPOPN 1
58542: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
58543: LD_EXP 13
58547: PUSH
58548: LD_EXP 61
58552: AND
58553: IFFALSE 58665
58555: GO 58557
58557: DISABLE
58558: LD_INT 0
58560: PPUSH
58561: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
58562: LD_ADDR_VAR 0 2
58566: PUSH
58567: LD_INT 22
58569: PUSH
58570: LD_OWVAR 2
58574: PUSH
58575: EMPTY
58576: LIST
58577: LIST
58578: PUSH
58579: LD_INT 2
58581: PUSH
58582: LD_INT 30
58584: PUSH
58585: LD_INT 27
58587: PUSH
58588: EMPTY
58589: LIST
58590: LIST
58591: PUSH
58592: LD_INT 30
58594: PUSH
58595: LD_INT 26
58597: PUSH
58598: EMPTY
58599: LIST
58600: LIST
58601: PUSH
58602: LD_INT 30
58604: PUSH
58605: LD_INT 28
58607: PUSH
58608: EMPTY
58609: LIST
58610: LIST
58611: PUSH
58612: EMPTY
58613: LIST
58614: LIST
58615: LIST
58616: LIST
58617: PUSH
58618: EMPTY
58619: LIST
58620: LIST
58621: PPUSH
58622: CALL_OW 69
58626: ST_TO_ADDR
// if not tmp then
58627: LD_VAR 0 2
58631: NOT
58632: IFFALSE 58636
// exit ;
58634: GO 58665
// for i in tmp do
58636: LD_ADDR_VAR 0 1
58640: PUSH
58641: LD_VAR 0 2
58645: PUSH
58646: FOR_IN
58647: IFFALSE 58663
// SetLives ( i , 1 ) ;
58649: LD_VAR 0 1
58653: PPUSH
58654: LD_INT 1
58656: PPUSH
58657: CALL_OW 234
58661: GO 58646
58663: POP
58664: POP
// end ;
58665: PPOPN 2
58667: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
58668: LD_EXP 13
58672: PUSH
58673: LD_EXP 62
58677: AND
58678: IFFALSE 58965
58680: GO 58682
58682: DISABLE
58683: LD_INT 0
58685: PPUSH
58686: PPUSH
58687: PPUSH
// begin i := rand ( 1 , 7 ) ;
58688: LD_ADDR_VAR 0 1
58692: PUSH
58693: LD_INT 1
58695: PPUSH
58696: LD_INT 7
58698: PPUSH
58699: CALL_OW 12
58703: ST_TO_ADDR
// case i of 1 :
58704: LD_VAR 0 1
58708: PUSH
58709: LD_INT 1
58711: DOUBLE
58712: EQUAL
58713: IFTRUE 58717
58715: GO 58727
58717: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
58718: LD_STRING earthquake(getX(game), 0, 32)
58720: PPUSH
58721: CALL_OW 559
58725: GO 58965
58727: LD_INT 2
58729: DOUBLE
58730: EQUAL
58731: IFTRUE 58735
58733: GO 58749
58735: POP
// begin ToLua ( displayStucuk(); ) ;
58736: LD_STRING displayStucuk();
58738: PPUSH
58739: CALL_OW 559
// ResetFog ;
58743: CALL_OW 335
// end ; 3 :
58747: GO 58965
58749: LD_INT 3
58751: DOUBLE
58752: EQUAL
58753: IFTRUE 58757
58755: GO 58861
58757: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
58758: LD_ADDR_VAR 0 2
58762: PUSH
58763: LD_INT 22
58765: PUSH
58766: LD_OWVAR 2
58770: PUSH
58771: EMPTY
58772: LIST
58773: LIST
58774: PUSH
58775: LD_INT 25
58777: PUSH
58778: LD_INT 1
58780: PUSH
58781: EMPTY
58782: LIST
58783: LIST
58784: PUSH
58785: EMPTY
58786: LIST
58787: LIST
58788: PPUSH
58789: CALL_OW 69
58793: ST_TO_ADDR
// if not tmp then
58794: LD_VAR 0 2
58798: NOT
58799: IFFALSE 58803
// exit ;
58801: GO 58965
// un := tmp [ rand ( 1 , tmp ) ] ;
58803: LD_ADDR_VAR 0 3
58807: PUSH
58808: LD_VAR 0 2
58812: PUSH
58813: LD_INT 1
58815: PPUSH
58816: LD_VAR 0 2
58820: PPUSH
58821: CALL_OW 12
58825: ARRAY
58826: ST_TO_ADDR
// if Crawls ( un ) then
58827: LD_VAR 0 3
58831: PPUSH
58832: CALL_OW 318
58836: IFFALSE 58847
// ComWalk ( un ) ;
58838: LD_VAR 0 3
58842: PPUSH
58843: CALL_OW 138
// SetClass ( un , class_mortar ) ;
58847: LD_VAR 0 3
58851: PPUSH
58852: LD_INT 8
58854: PPUSH
58855: CALL_OW 336
// end ; 4 :
58859: GO 58965
58861: LD_INT 4
58863: DOUBLE
58864: EQUAL
58865: IFTRUE 58869
58867: GO 58943
58869: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
58870: LD_ADDR_VAR 0 2
58874: PUSH
58875: LD_INT 22
58877: PUSH
58878: LD_OWVAR 2
58882: PUSH
58883: EMPTY
58884: LIST
58885: LIST
58886: PUSH
58887: LD_INT 30
58889: PUSH
58890: LD_INT 29
58892: PUSH
58893: EMPTY
58894: LIST
58895: LIST
58896: PUSH
58897: EMPTY
58898: LIST
58899: LIST
58900: PPUSH
58901: CALL_OW 69
58905: ST_TO_ADDR
// if not tmp then
58906: LD_VAR 0 2
58910: NOT
58911: IFFALSE 58915
// exit ;
58913: GO 58965
// CenterNowOnUnits ( tmp [ 1 ] ) ;
58915: LD_VAR 0 2
58919: PUSH
58920: LD_INT 1
58922: ARRAY
58923: PPUSH
58924: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
58928: LD_VAR 0 2
58932: PUSH
58933: LD_INT 1
58935: ARRAY
58936: PPUSH
58937: CALL_OW 65
// end ; 5 .. 7 :
58941: GO 58965
58943: LD_INT 5
58945: DOUBLE
58946: GREATEREQUAL
58947: IFFALSE 58955
58949: LD_INT 7
58951: DOUBLE
58952: LESSEQUAL
58953: IFTRUE 58957
58955: GO 58964
58957: POP
// StreamSibBomb ; end ;
58958: CALL 55202 0 0
58962: GO 58965
58964: POP
// end ;
58965: PPOPN 3
58967: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
58968: LD_EXP 13
58972: PUSH
58973: LD_EXP 63
58977: AND
58978: IFFALSE 59134
58980: GO 58982
58982: DISABLE
58983: LD_INT 0
58985: PPUSH
58986: PPUSH
58987: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
58988: LD_ADDR_VAR 0 2
58992: PUSH
58993: LD_INT 81
58995: PUSH
58996: LD_OWVAR 2
59000: PUSH
59001: EMPTY
59002: LIST
59003: LIST
59004: PUSH
59005: LD_INT 2
59007: PUSH
59008: LD_INT 21
59010: PUSH
59011: LD_INT 1
59013: PUSH
59014: EMPTY
59015: LIST
59016: LIST
59017: PUSH
59018: LD_INT 21
59020: PUSH
59021: LD_INT 2
59023: PUSH
59024: EMPTY
59025: LIST
59026: LIST
59027: PUSH
59028: EMPTY
59029: LIST
59030: LIST
59031: LIST
59032: PUSH
59033: EMPTY
59034: LIST
59035: LIST
59036: PPUSH
59037: CALL_OW 69
59041: ST_TO_ADDR
// if not tmp then
59042: LD_VAR 0 2
59046: NOT
59047: IFFALSE 59051
// exit ;
59049: GO 59134
// p := 0 ;
59051: LD_ADDR_VAR 0 3
59055: PUSH
59056: LD_INT 0
59058: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
59059: LD_INT 35
59061: PPUSH
59062: CALL_OW 67
// p := p + 1 ;
59066: LD_ADDR_VAR 0 3
59070: PUSH
59071: LD_VAR 0 3
59075: PUSH
59076: LD_INT 1
59078: PLUS
59079: ST_TO_ADDR
// for i in tmp do
59080: LD_ADDR_VAR 0 1
59084: PUSH
59085: LD_VAR 0 2
59089: PUSH
59090: FOR_IN
59091: IFFALSE 59122
// if GetLives ( i ) < 1000 then
59093: LD_VAR 0 1
59097: PPUSH
59098: CALL_OW 256
59102: PUSH
59103: LD_INT 1000
59105: LESS
59106: IFFALSE 59120
// SetLives ( i , 1000 ) ;
59108: LD_VAR 0 1
59112: PPUSH
59113: LD_INT 1000
59115: PPUSH
59116: CALL_OW 234
59120: GO 59090
59122: POP
59123: POP
// until p > 20 ;
59124: LD_VAR 0 3
59128: PUSH
59129: LD_INT 20
59131: GREATER
59132: IFFALSE 59059
// end ;
59134: PPOPN 3
59136: END
// every 0 0$1 trigger StreamModeActive and sTime do
59137: LD_EXP 13
59141: PUSH
59142: LD_EXP 64
59146: AND
59147: IFFALSE 59182
59149: GO 59151
59151: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
59152: LD_INT 28
59154: PPUSH
59155: LD_OWVAR 2
59159: PPUSH
59160: LD_INT 2
59162: PPUSH
59163: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
59167: LD_INT 30
59169: PPUSH
59170: LD_OWVAR 2
59174: PPUSH
59175: LD_INT 2
59177: PPUSH
59178: CALL_OW 322
// end ;
59182: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
59183: LD_EXP 13
59187: PUSH
59188: LD_EXP 65
59192: AND
59193: IFFALSE 59314
59195: GO 59197
59197: DISABLE
59198: LD_INT 0
59200: PPUSH
59201: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
59202: LD_ADDR_VAR 0 2
59206: PUSH
59207: LD_INT 22
59209: PUSH
59210: LD_OWVAR 2
59214: PUSH
59215: EMPTY
59216: LIST
59217: LIST
59218: PUSH
59219: LD_INT 21
59221: PUSH
59222: LD_INT 1
59224: PUSH
59225: EMPTY
59226: LIST
59227: LIST
59228: PUSH
59229: LD_INT 3
59231: PUSH
59232: LD_INT 23
59234: PUSH
59235: LD_INT 0
59237: PUSH
59238: EMPTY
59239: LIST
59240: LIST
59241: PUSH
59242: EMPTY
59243: LIST
59244: LIST
59245: PUSH
59246: EMPTY
59247: LIST
59248: LIST
59249: LIST
59250: PPUSH
59251: CALL_OW 69
59255: ST_TO_ADDR
// if not tmp then
59256: LD_VAR 0 2
59260: NOT
59261: IFFALSE 59265
// exit ;
59263: GO 59314
// for i in tmp do
59265: LD_ADDR_VAR 0 1
59269: PUSH
59270: LD_VAR 0 2
59274: PUSH
59275: FOR_IN
59276: IFFALSE 59312
// begin if Crawls ( i ) then
59278: LD_VAR 0 1
59282: PPUSH
59283: CALL_OW 318
59287: IFFALSE 59298
// ComWalk ( i ) ;
59289: LD_VAR 0 1
59293: PPUSH
59294: CALL_OW 138
// SetClass ( i , 2 ) ;
59298: LD_VAR 0 1
59302: PPUSH
59303: LD_INT 2
59305: PPUSH
59306: CALL_OW 336
// end ;
59310: GO 59275
59312: POP
59313: POP
// end ;
59314: PPOPN 2
59316: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
59317: LD_EXP 13
59321: PUSH
59322: LD_EXP 66
59326: AND
59327: IFFALSE 59615
59329: GO 59331
59331: DISABLE
59332: LD_INT 0
59334: PPUSH
59335: PPUSH
59336: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
59337: LD_OWVAR 2
59341: PPUSH
59342: LD_INT 9
59344: PPUSH
59345: LD_INT 1
59347: PPUSH
59348: LD_INT 1
59350: PPUSH
59351: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
59355: LD_INT 9
59357: PPUSH
59358: LD_OWVAR 2
59362: PPUSH
59363: CALL_OW 343
// uc_side := 9 ;
59367: LD_ADDR_OWVAR 20
59371: PUSH
59372: LD_INT 9
59374: ST_TO_ADDR
// uc_nation := 2 ;
59375: LD_ADDR_OWVAR 21
59379: PUSH
59380: LD_INT 2
59382: ST_TO_ADDR
// hc_name := Dark Warrior ;
59383: LD_ADDR_OWVAR 26
59387: PUSH
59388: LD_STRING Dark Warrior
59390: ST_TO_ADDR
// hc_gallery :=  ;
59391: LD_ADDR_OWVAR 33
59395: PUSH
59396: LD_STRING 
59398: ST_TO_ADDR
// hc_noskilllimit := true ;
59399: LD_ADDR_OWVAR 76
59403: PUSH
59404: LD_INT 1
59406: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
59407: LD_ADDR_OWVAR 31
59411: PUSH
59412: LD_INT 30
59414: PUSH
59415: LD_INT 30
59417: PUSH
59418: LD_INT 30
59420: PUSH
59421: LD_INT 30
59423: PUSH
59424: EMPTY
59425: LIST
59426: LIST
59427: LIST
59428: LIST
59429: ST_TO_ADDR
// un := CreateHuman ;
59430: LD_ADDR_VAR 0 3
59434: PUSH
59435: CALL_OW 44
59439: ST_TO_ADDR
// hc_noskilllimit := false ;
59440: LD_ADDR_OWVAR 76
59444: PUSH
59445: LD_INT 0
59447: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
59448: LD_VAR 0 3
59452: PPUSH
59453: LD_INT 1
59455: PPUSH
59456: CALL_OW 51
// ToLua ( playRanger() ) ;
59460: LD_STRING playRanger()
59462: PPUSH
59463: CALL_OW 559
// p := 0 ;
59467: LD_ADDR_VAR 0 2
59471: PUSH
59472: LD_INT 0
59474: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
59475: LD_INT 35
59477: PPUSH
59478: CALL_OW 67
// p := p + 1 ;
59482: LD_ADDR_VAR 0 2
59486: PUSH
59487: LD_VAR 0 2
59491: PUSH
59492: LD_INT 1
59494: PLUS
59495: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
59496: LD_VAR 0 3
59500: PPUSH
59501: CALL_OW 256
59505: PUSH
59506: LD_INT 1000
59508: LESS
59509: IFFALSE 59523
// SetLives ( un , 1000 ) ;
59511: LD_VAR 0 3
59515: PPUSH
59516: LD_INT 1000
59518: PPUSH
59519: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
59523: LD_VAR 0 3
59527: PPUSH
59528: LD_INT 81
59530: PUSH
59531: LD_OWVAR 2
59535: PUSH
59536: EMPTY
59537: LIST
59538: LIST
59539: PUSH
59540: LD_INT 91
59542: PUSH
59543: LD_VAR 0 3
59547: PUSH
59548: LD_INT 30
59550: PUSH
59551: EMPTY
59552: LIST
59553: LIST
59554: LIST
59555: PUSH
59556: EMPTY
59557: LIST
59558: LIST
59559: PPUSH
59560: CALL_OW 69
59564: PPUSH
59565: LD_VAR 0 3
59569: PPUSH
59570: CALL_OW 74
59574: PPUSH
59575: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
59579: LD_VAR 0 2
59583: PUSH
59584: LD_INT 80
59586: GREATER
59587: PUSH
59588: LD_VAR 0 3
59592: PPUSH
59593: CALL_OW 301
59597: OR
59598: IFFALSE 59475
// if un then
59600: LD_VAR 0 3
59604: IFFALSE 59615
// RemoveUnit ( un ) ;
59606: LD_VAR 0 3
59610: PPUSH
59611: CALL_OW 64
// end ;
59615: PPOPN 3
59617: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
59618: LD_EXP 67
59622: IFFALSE 59738
59624: GO 59626
59626: DISABLE
59627: LD_INT 0
59629: PPUSH
59630: PPUSH
59631: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
59632: LD_ADDR_VAR 0 2
59636: PUSH
59637: LD_INT 81
59639: PUSH
59640: LD_OWVAR 2
59644: PUSH
59645: EMPTY
59646: LIST
59647: LIST
59648: PUSH
59649: LD_INT 21
59651: PUSH
59652: LD_INT 1
59654: PUSH
59655: EMPTY
59656: LIST
59657: LIST
59658: PUSH
59659: EMPTY
59660: LIST
59661: LIST
59662: PPUSH
59663: CALL_OW 69
59667: ST_TO_ADDR
// ToLua ( playComputer() ) ;
59668: LD_STRING playComputer()
59670: PPUSH
59671: CALL_OW 559
// if not tmp then
59675: LD_VAR 0 2
59679: NOT
59680: IFFALSE 59684
// exit ;
59682: GO 59738
// for i in tmp do
59684: LD_ADDR_VAR 0 1
59688: PUSH
59689: LD_VAR 0 2
59693: PUSH
59694: FOR_IN
59695: IFFALSE 59736
// for j := 1 to 4 do
59697: LD_ADDR_VAR 0 3
59701: PUSH
59702: DOUBLE
59703: LD_INT 1
59705: DEC
59706: ST_TO_ADDR
59707: LD_INT 4
59709: PUSH
59710: FOR_TO
59711: IFFALSE 59732
// SetSkill ( i , j , 10 ) ;
59713: LD_VAR 0 1
59717: PPUSH
59718: LD_VAR 0 3
59722: PPUSH
59723: LD_INT 10
59725: PPUSH
59726: CALL_OW 237
59730: GO 59710
59732: POP
59733: POP
59734: GO 59694
59736: POP
59737: POP
// end ;
59738: PPOPN 3
59740: END
// every 0 0$1 trigger s30 do var i , tmp ;
59741: LD_EXP 68
59745: IFFALSE 59814
59747: GO 59749
59749: DISABLE
59750: LD_INT 0
59752: PPUSH
59753: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
59754: LD_ADDR_VAR 0 2
59758: PUSH
59759: LD_INT 22
59761: PUSH
59762: LD_OWVAR 2
59766: PUSH
59767: EMPTY
59768: LIST
59769: LIST
59770: PPUSH
59771: CALL_OW 69
59775: ST_TO_ADDR
// if not tmp then
59776: LD_VAR 0 2
59780: NOT
59781: IFFALSE 59785
// exit ;
59783: GO 59814
// for i in tmp do
59785: LD_ADDR_VAR 0 1
59789: PUSH
59790: LD_VAR 0 2
59794: PUSH
59795: FOR_IN
59796: IFFALSE 59812
// SetLives ( i , 300 ) ;
59798: LD_VAR 0 1
59802: PPUSH
59803: LD_INT 300
59805: PPUSH
59806: CALL_OW 234
59810: GO 59795
59812: POP
59813: POP
// end ;
59814: PPOPN 2
59816: END
// every 0 0$1 trigger s60 do var i , tmp ;
59817: LD_EXP 69
59821: IFFALSE 59890
59823: GO 59825
59825: DISABLE
59826: LD_INT 0
59828: PPUSH
59829: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
59830: LD_ADDR_VAR 0 2
59834: PUSH
59835: LD_INT 22
59837: PUSH
59838: LD_OWVAR 2
59842: PUSH
59843: EMPTY
59844: LIST
59845: LIST
59846: PPUSH
59847: CALL_OW 69
59851: ST_TO_ADDR
// if not tmp then
59852: LD_VAR 0 2
59856: NOT
59857: IFFALSE 59861
// exit ;
59859: GO 59890
// for i in tmp do
59861: LD_ADDR_VAR 0 1
59865: PUSH
59866: LD_VAR 0 2
59870: PUSH
59871: FOR_IN
59872: IFFALSE 59888
// SetLives ( i , 600 ) ;
59874: LD_VAR 0 1
59878: PPUSH
59879: LD_INT 600
59881: PPUSH
59882: CALL_OW 234
59886: GO 59871
59888: POP
59889: POP
// end ;
59890: PPOPN 2
59892: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
59893: LD_INT 0
59895: PPUSH
// case cmd of 301 :
59896: LD_VAR 0 1
59900: PUSH
59901: LD_INT 301
59903: DOUBLE
59904: EQUAL
59905: IFTRUE 59909
59907: GO 59941
59909: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
59910: LD_VAR 0 6
59914: PPUSH
59915: LD_VAR 0 7
59919: PPUSH
59920: LD_VAR 0 8
59924: PPUSH
59925: LD_VAR 0 4
59929: PPUSH
59930: LD_VAR 0 5
59934: PPUSH
59935: CALL 61150 0 5
59939: GO 60062
59941: LD_INT 302
59943: DOUBLE
59944: EQUAL
59945: IFTRUE 59949
59947: GO 59986
59949: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
59950: LD_VAR 0 6
59954: PPUSH
59955: LD_VAR 0 7
59959: PPUSH
59960: LD_VAR 0 8
59964: PPUSH
59965: LD_VAR 0 9
59969: PPUSH
59970: LD_VAR 0 4
59974: PPUSH
59975: LD_VAR 0 5
59979: PPUSH
59980: CALL 61241 0 6
59984: GO 60062
59986: LD_INT 303
59988: DOUBLE
59989: EQUAL
59990: IFTRUE 59994
59992: GO 60031
59994: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
59995: LD_VAR 0 6
59999: PPUSH
60000: LD_VAR 0 7
60004: PPUSH
60005: LD_VAR 0 8
60009: PPUSH
60010: LD_VAR 0 9
60014: PPUSH
60015: LD_VAR 0 4
60019: PPUSH
60020: LD_VAR 0 5
60024: PPUSH
60025: CALL 60067 0 6
60029: GO 60062
60031: LD_INT 304
60033: DOUBLE
60034: EQUAL
60035: IFTRUE 60039
60037: GO 60061
60039: POP
// hHackTeleport ( unit , x , y ) ; end ;
60040: LD_VAR 0 2
60044: PPUSH
60045: LD_VAR 0 4
60049: PPUSH
60050: LD_VAR 0 5
60054: PPUSH
60055: CALL 61834 0 3
60059: GO 60062
60061: POP
// end ;
60062: LD_VAR 0 12
60066: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
60067: LD_INT 0
60069: PPUSH
60070: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
60071: LD_VAR 0 1
60075: PUSH
60076: LD_INT 1
60078: LESS
60079: PUSH
60080: LD_VAR 0 1
60084: PUSH
60085: LD_INT 3
60087: GREATER
60088: OR
60089: PUSH
60090: LD_VAR 0 5
60094: PPUSH
60095: LD_VAR 0 6
60099: PPUSH
60100: CALL_OW 428
60104: OR
60105: IFFALSE 60109
// exit ;
60107: GO 60837
// uc_side := your_side ;
60109: LD_ADDR_OWVAR 20
60113: PUSH
60114: LD_OWVAR 2
60118: ST_TO_ADDR
// uc_nation := nation ;
60119: LD_ADDR_OWVAR 21
60123: PUSH
60124: LD_VAR 0 1
60128: ST_TO_ADDR
// bc_level = 1 ;
60129: LD_ADDR_OWVAR 43
60133: PUSH
60134: LD_INT 1
60136: ST_TO_ADDR
// case btype of 1 :
60137: LD_VAR 0 2
60141: PUSH
60142: LD_INT 1
60144: DOUBLE
60145: EQUAL
60146: IFTRUE 60150
60148: GO 60161
60150: POP
// bc_type := b_depot ; 2 :
60151: LD_ADDR_OWVAR 42
60155: PUSH
60156: LD_INT 0
60158: ST_TO_ADDR
60159: GO 60781
60161: LD_INT 2
60163: DOUBLE
60164: EQUAL
60165: IFTRUE 60169
60167: GO 60180
60169: POP
// bc_type := b_warehouse ; 3 :
60170: LD_ADDR_OWVAR 42
60174: PUSH
60175: LD_INT 1
60177: ST_TO_ADDR
60178: GO 60781
60180: LD_INT 3
60182: DOUBLE
60183: EQUAL
60184: IFTRUE 60188
60186: GO 60199
60188: POP
// bc_type := b_lab ; 4 .. 9 :
60189: LD_ADDR_OWVAR 42
60193: PUSH
60194: LD_INT 6
60196: ST_TO_ADDR
60197: GO 60781
60199: LD_INT 4
60201: DOUBLE
60202: GREATEREQUAL
60203: IFFALSE 60211
60205: LD_INT 9
60207: DOUBLE
60208: LESSEQUAL
60209: IFTRUE 60213
60211: GO 60273
60213: POP
// begin bc_type := b_lab_half ;
60214: LD_ADDR_OWVAR 42
60218: PUSH
60219: LD_INT 7
60221: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
60222: LD_ADDR_OWVAR 44
60226: PUSH
60227: LD_INT 10
60229: PUSH
60230: LD_INT 11
60232: PUSH
60233: LD_INT 12
60235: PUSH
60236: LD_INT 15
60238: PUSH
60239: LD_INT 14
60241: PUSH
60242: LD_INT 13
60244: PUSH
60245: EMPTY
60246: LIST
60247: LIST
60248: LIST
60249: LIST
60250: LIST
60251: LIST
60252: PUSH
60253: LD_VAR 0 2
60257: PUSH
60258: LD_INT 3
60260: MINUS
60261: ARRAY
60262: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
60263: LD_ADDR_OWVAR 45
60267: PUSH
60268: LD_INT 9
60270: ST_TO_ADDR
// end ; 10 .. 13 :
60271: GO 60781
60273: LD_INT 10
60275: DOUBLE
60276: GREATEREQUAL
60277: IFFALSE 60285
60279: LD_INT 13
60281: DOUBLE
60282: LESSEQUAL
60283: IFTRUE 60287
60285: GO 60364
60287: POP
// begin bc_type := b_lab_full ;
60288: LD_ADDR_OWVAR 42
60292: PUSH
60293: LD_INT 8
60295: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
60296: LD_ADDR_OWVAR 44
60300: PUSH
60301: LD_INT 10
60303: PUSH
60304: LD_INT 12
60306: PUSH
60307: LD_INT 14
60309: PUSH
60310: LD_INT 13
60312: PUSH
60313: EMPTY
60314: LIST
60315: LIST
60316: LIST
60317: LIST
60318: PUSH
60319: LD_VAR 0 2
60323: PUSH
60324: LD_INT 9
60326: MINUS
60327: ARRAY
60328: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
60329: LD_ADDR_OWVAR 45
60333: PUSH
60334: LD_INT 11
60336: PUSH
60337: LD_INT 15
60339: PUSH
60340: LD_INT 12
60342: PUSH
60343: LD_INT 15
60345: PUSH
60346: EMPTY
60347: LIST
60348: LIST
60349: LIST
60350: LIST
60351: PUSH
60352: LD_VAR 0 2
60356: PUSH
60357: LD_INT 9
60359: MINUS
60360: ARRAY
60361: ST_TO_ADDR
// end ; 14 :
60362: GO 60781
60364: LD_INT 14
60366: DOUBLE
60367: EQUAL
60368: IFTRUE 60372
60370: GO 60383
60372: POP
// bc_type := b_workshop ; 15 :
60373: LD_ADDR_OWVAR 42
60377: PUSH
60378: LD_INT 2
60380: ST_TO_ADDR
60381: GO 60781
60383: LD_INT 15
60385: DOUBLE
60386: EQUAL
60387: IFTRUE 60391
60389: GO 60402
60391: POP
// bc_type := b_factory ; 16 :
60392: LD_ADDR_OWVAR 42
60396: PUSH
60397: LD_INT 3
60399: ST_TO_ADDR
60400: GO 60781
60402: LD_INT 16
60404: DOUBLE
60405: EQUAL
60406: IFTRUE 60410
60408: GO 60421
60410: POP
// bc_type := b_ext_gun ; 17 :
60411: LD_ADDR_OWVAR 42
60415: PUSH
60416: LD_INT 17
60418: ST_TO_ADDR
60419: GO 60781
60421: LD_INT 17
60423: DOUBLE
60424: EQUAL
60425: IFTRUE 60429
60427: GO 60457
60429: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
60430: LD_ADDR_OWVAR 42
60434: PUSH
60435: LD_INT 19
60437: PUSH
60438: LD_INT 23
60440: PUSH
60441: LD_INT 19
60443: PUSH
60444: EMPTY
60445: LIST
60446: LIST
60447: LIST
60448: PUSH
60449: LD_VAR 0 1
60453: ARRAY
60454: ST_TO_ADDR
60455: GO 60781
60457: LD_INT 18
60459: DOUBLE
60460: EQUAL
60461: IFTRUE 60465
60463: GO 60476
60465: POP
// bc_type := b_ext_radar ; 19 :
60466: LD_ADDR_OWVAR 42
60470: PUSH
60471: LD_INT 20
60473: ST_TO_ADDR
60474: GO 60781
60476: LD_INT 19
60478: DOUBLE
60479: EQUAL
60480: IFTRUE 60484
60482: GO 60495
60484: POP
// bc_type := b_ext_radio ; 20 :
60485: LD_ADDR_OWVAR 42
60489: PUSH
60490: LD_INT 22
60492: ST_TO_ADDR
60493: GO 60781
60495: LD_INT 20
60497: DOUBLE
60498: EQUAL
60499: IFTRUE 60503
60501: GO 60514
60503: POP
// bc_type := b_ext_siberium ; 21 :
60504: LD_ADDR_OWVAR 42
60508: PUSH
60509: LD_INT 21
60511: ST_TO_ADDR
60512: GO 60781
60514: LD_INT 21
60516: DOUBLE
60517: EQUAL
60518: IFTRUE 60522
60520: GO 60533
60522: POP
// bc_type := b_ext_computer ; 22 :
60523: LD_ADDR_OWVAR 42
60527: PUSH
60528: LD_INT 24
60530: ST_TO_ADDR
60531: GO 60781
60533: LD_INT 22
60535: DOUBLE
60536: EQUAL
60537: IFTRUE 60541
60539: GO 60552
60541: POP
// bc_type := b_ext_track ; 23 :
60542: LD_ADDR_OWVAR 42
60546: PUSH
60547: LD_INT 16
60549: ST_TO_ADDR
60550: GO 60781
60552: LD_INT 23
60554: DOUBLE
60555: EQUAL
60556: IFTRUE 60560
60558: GO 60571
60560: POP
// bc_type := b_ext_laser ; 24 :
60561: LD_ADDR_OWVAR 42
60565: PUSH
60566: LD_INT 25
60568: ST_TO_ADDR
60569: GO 60781
60571: LD_INT 24
60573: DOUBLE
60574: EQUAL
60575: IFTRUE 60579
60577: GO 60590
60579: POP
// bc_type := b_control_tower ; 25 :
60580: LD_ADDR_OWVAR 42
60584: PUSH
60585: LD_INT 36
60587: ST_TO_ADDR
60588: GO 60781
60590: LD_INT 25
60592: DOUBLE
60593: EQUAL
60594: IFTRUE 60598
60596: GO 60609
60598: POP
// bc_type := b_breastwork ; 26 :
60599: LD_ADDR_OWVAR 42
60603: PUSH
60604: LD_INT 31
60606: ST_TO_ADDR
60607: GO 60781
60609: LD_INT 26
60611: DOUBLE
60612: EQUAL
60613: IFTRUE 60617
60615: GO 60628
60617: POP
// bc_type := b_bunker ; 27 :
60618: LD_ADDR_OWVAR 42
60622: PUSH
60623: LD_INT 32
60625: ST_TO_ADDR
60626: GO 60781
60628: LD_INT 27
60630: DOUBLE
60631: EQUAL
60632: IFTRUE 60636
60634: GO 60647
60636: POP
// bc_type := b_turret ; 28 :
60637: LD_ADDR_OWVAR 42
60641: PUSH
60642: LD_INT 33
60644: ST_TO_ADDR
60645: GO 60781
60647: LD_INT 28
60649: DOUBLE
60650: EQUAL
60651: IFTRUE 60655
60653: GO 60666
60655: POP
// bc_type := b_armoury ; 29 :
60656: LD_ADDR_OWVAR 42
60660: PUSH
60661: LD_INT 4
60663: ST_TO_ADDR
60664: GO 60781
60666: LD_INT 29
60668: DOUBLE
60669: EQUAL
60670: IFTRUE 60674
60672: GO 60685
60674: POP
// bc_type := b_barracks ; 30 :
60675: LD_ADDR_OWVAR 42
60679: PUSH
60680: LD_INT 5
60682: ST_TO_ADDR
60683: GO 60781
60685: LD_INT 30
60687: DOUBLE
60688: EQUAL
60689: IFTRUE 60693
60691: GO 60704
60693: POP
// bc_type := b_solar_power ; 31 :
60694: LD_ADDR_OWVAR 42
60698: PUSH
60699: LD_INT 27
60701: ST_TO_ADDR
60702: GO 60781
60704: LD_INT 31
60706: DOUBLE
60707: EQUAL
60708: IFTRUE 60712
60710: GO 60723
60712: POP
// bc_type := b_oil_power ; 32 :
60713: LD_ADDR_OWVAR 42
60717: PUSH
60718: LD_INT 26
60720: ST_TO_ADDR
60721: GO 60781
60723: LD_INT 32
60725: DOUBLE
60726: EQUAL
60727: IFTRUE 60731
60729: GO 60742
60731: POP
// bc_type := b_siberite_power ; 33 :
60732: LD_ADDR_OWVAR 42
60736: PUSH
60737: LD_INT 28
60739: ST_TO_ADDR
60740: GO 60781
60742: LD_INT 33
60744: DOUBLE
60745: EQUAL
60746: IFTRUE 60750
60748: GO 60761
60750: POP
// bc_type := b_oil_mine ; 34 :
60751: LD_ADDR_OWVAR 42
60755: PUSH
60756: LD_INT 29
60758: ST_TO_ADDR
60759: GO 60781
60761: LD_INT 34
60763: DOUBLE
60764: EQUAL
60765: IFTRUE 60769
60767: GO 60780
60769: POP
// bc_type := b_siberite_mine ; end ;
60770: LD_ADDR_OWVAR 42
60774: PUSH
60775: LD_INT 30
60777: ST_TO_ADDR
60778: GO 60781
60780: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
60781: LD_ADDR_VAR 0 8
60785: PUSH
60786: LD_VAR 0 5
60790: PPUSH
60791: LD_VAR 0 6
60795: PPUSH
60796: LD_VAR 0 3
60800: PPUSH
60801: CALL_OW 47
60805: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
60806: LD_OWVAR 42
60810: PUSH
60811: LD_INT 32
60813: PUSH
60814: LD_INT 33
60816: PUSH
60817: EMPTY
60818: LIST
60819: LIST
60820: IN
60821: IFFALSE 60837
// PlaceWeaponTurret ( b , weapon ) ;
60823: LD_VAR 0 8
60827: PPUSH
60828: LD_VAR 0 4
60832: PPUSH
60833: CALL_OW 431
// end ;
60837: LD_VAR 0 7
60841: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
60842: LD_INT 0
60844: PPUSH
60845: PPUSH
60846: PPUSH
60847: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
60848: LD_ADDR_VAR 0 4
60852: PUSH
60853: LD_INT 22
60855: PUSH
60856: LD_OWVAR 2
60860: PUSH
60861: EMPTY
60862: LIST
60863: LIST
60864: PUSH
60865: LD_INT 2
60867: PUSH
60868: LD_INT 30
60870: PUSH
60871: LD_INT 0
60873: PUSH
60874: EMPTY
60875: LIST
60876: LIST
60877: PUSH
60878: LD_INT 30
60880: PUSH
60881: LD_INT 1
60883: PUSH
60884: EMPTY
60885: LIST
60886: LIST
60887: PUSH
60888: EMPTY
60889: LIST
60890: LIST
60891: LIST
60892: PUSH
60893: EMPTY
60894: LIST
60895: LIST
60896: PPUSH
60897: CALL_OW 69
60901: ST_TO_ADDR
// if not tmp then
60902: LD_VAR 0 4
60906: NOT
60907: IFFALSE 60911
// exit ;
60909: GO 60970
// for i in tmp do
60911: LD_ADDR_VAR 0 2
60915: PUSH
60916: LD_VAR 0 4
60920: PUSH
60921: FOR_IN
60922: IFFALSE 60968
// for j = 1 to 3 do
60924: LD_ADDR_VAR 0 3
60928: PUSH
60929: DOUBLE
60930: LD_INT 1
60932: DEC
60933: ST_TO_ADDR
60934: LD_INT 3
60936: PUSH
60937: FOR_TO
60938: IFFALSE 60964
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
60940: LD_VAR 0 2
60944: PPUSH
60945: CALL_OW 274
60949: PPUSH
60950: LD_VAR 0 3
60954: PPUSH
60955: LD_INT 99999
60957: PPUSH
60958: CALL_OW 277
60962: GO 60937
60964: POP
60965: POP
60966: GO 60921
60968: POP
60969: POP
// end ;
60970: LD_VAR 0 1
60974: RET
// export function hHackSetLevel10 ; var i , j ; begin
60975: LD_INT 0
60977: PPUSH
60978: PPUSH
60979: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
60980: LD_ADDR_VAR 0 2
60984: PUSH
60985: LD_INT 21
60987: PUSH
60988: LD_INT 1
60990: PUSH
60991: EMPTY
60992: LIST
60993: LIST
60994: PPUSH
60995: CALL_OW 69
60999: PUSH
61000: FOR_IN
61001: IFFALSE 61053
// if IsSelected ( i ) then
61003: LD_VAR 0 2
61007: PPUSH
61008: CALL_OW 306
61012: IFFALSE 61051
// begin for j := 1 to 4 do
61014: LD_ADDR_VAR 0 3
61018: PUSH
61019: DOUBLE
61020: LD_INT 1
61022: DEC
61023: ST_TO_ADDR
61024: LD_INT 4
61026: PUSH
61027: FOR_TO
61028: IFFALSE 61049
// SetSkill ( i , j , 10 ) ;
61030: LD_VAR 0 2
61034: PPUSH
61035: LD_VAR 0 3
61039: PPUSH
61040: LD_INT 10
61042: PPUSH
61043: CALL_OW 237
61047: GO 61027
61049: POP
61050: POP
// end ;
61051: GO 61000
61053: POP
61054: POP
// end ;
61055: LD_VAR 0 1
61059: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
61060: LD_INT 0
61062: PPUSH
61063: PPUSH
61064: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
61065: LD_ADDR_VAR 0 2
61069: PUSH
61070: LD_INT 22
61072: PUSH
61073: LD_OWVAR 2
61077: PUSH
61078: EMPTY
61079: LIST
61080: LIST
61081: PUSH
61082: LD_INT 21
61084: PUSH
61085: LD_INT 1
61087: PUSH
61088: EMPTY
61089: LIST
61090: LIST
61091: PUSH
61092: EMPTY
61093: LIST
61094: LIST
61095: PPUSH
61096: CALL_OW 69
61100: PUSH
61101: FOR_IN
61102: IFFALSE 61143
// begin for j := 1 to 4 do
61104: LD_ADDR_VAR 0 3
61108: PUSH
61109: DOUBLE
61110: LD_INT 1
61112: DEC
61113: ST_TO_ADDR
61114: LD_INT 4
61116: PUSH
61117: FOR_TO
61118: IFFALSE 61139
// SetSkill ( i , j , 10 ) ;
61120: LD_VAR 0 2
61124: PPUSH
61125: LD_VAR 0 3
61129: PPUSH
61130: LD_INT 10
61132: PPUSH
61133: CALL_OW 237
61137: GO 61117
61139: POP
61140: POP
// end ;
61141: GO 61101
61143: POP
61144: POP
// end ;
61145: LD_VAR 0 1
61149: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
61150: LD_INT 0
61152: PPUSH
// uc_side := your_side ;
61153: LD_ADDR_OWVAR 20
61157: PUSH
61158: LD_OWVAR 2
61162: ST_TO_ADDR
// uc_nation := nation ;
61163: LD_ADDR_OWVAR 21
61167: PUSH
61168: LD_VAR 0 1
61172: ST_TO_ADDR
// InitHc ;
61173: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
61177: LD_INT 0
61179: PPUSH
61180: LD_VAR 0 2
61184: PPUSH
61185: LD_VAR 0 3
61189: PPUSH
61190: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
61194: LD_VAR 0 4
61198: PPUSH
61199: LD_VAR 0 5
61203: PPUSH
61204: CALL_OW 428
61208: PUSH
61209: LD_INT 0
61211: EQUAL
61212: IFFALSE 61236
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
61214: CALL_OW 44
61218: PPUSH
61219: LD_VAR 0 4
61223: PPUSH
61224: LD_VAR 0 5
61228: PPUSH
61229: LD_INT 1
61231: PPUSH
61232: CALL_OW 48
// end ;
61236: LD_VAR 0 6
61240: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
61241: LD_INT 0
61243: PPUSH
61244: PPUSH
// uc_side := your_side ;
61245: LD_ADDR_OWVAR 20
61249: PUSH
61250: LD_OWVAR 2
61254: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
61255: LD_VAR 0 1
61259: PUSH
61260: LD_INT 1
61262: PUSH
61263: LD_INT 2
61265: PUSH
61266: LD_INT 3
61268: PUSH
61269: LD_INT 4
61271: PUSH
61272: LD_INT 5
61274: PUSH
61275: EMPTY
61276: LIST
61277: LIST
61278: LIST
61279: LIST
61280: LIST
61281: IN
61282: IFFALSE 61294
// uc_nation := nation_american else
61284: LD_ADDR_OWVAR 21
61288: PUSH
61289: LD_INT 1
61291: ST_TO_ADDR
61292: GO 61337
// if chassis in [ 11 , 12 , 13 , 14 ] then
61294: LD_VAR 0 1
61298: PUSH
61299: LD_INT 11
61301: PUSH
61302: LD_INT 12
61304: PUSH
61305: LD_INT 13
61307: PUSH
61308: LD_INT 14
61310: PUSH
61311: EMPTY
61312: LIST
61313: LIST
61314: LIST
61315: LIST
61316: IN
61317: IFFALSE 61329
// uc_nation := nation_arabian else
61319: LD_ADDR_OWVAR 21
61323: PUSH
61324: LD_INT 2
61326: ST_TO_ADDR
61327: GO 61337
// uc_nation := nation_russian ;
61329: LD_ADDR_OWVAR 21
61333: PUSH
61334: LD_INT 3
61336: ST_TO_ADDR
// vc_chassis := chassis ;
61337: LD_ADDR_OWVAR 37
61341: PUSH
61342: LD_VAR 0 1
61346: ST_TO_ADDR
// vc_engine := engine ;
61347: LD_ADDR_OWVAR 39
61351: PUSH
61352: LD_VAR 0 2
61356: ST_TO_ADDR
// vc_control := control ;
61357: LD_ADDR_OWVAR 38
61361: PUSH
61362: LD_VAR 0 3
61366: ST_TO_ADDR
// vc_weapon := weapon ;
61367: LD_ADDR_OWVAR 40
61371: PUSH
61372: LD_VAR 0 4
61376: ST_TO_ADDR
// un := CreateVehicle ;
61377: LD_ADDR_VAR 0 8
61381: PUSH
61382: CALL_OW 45
61386: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
61387: LD_VAR 0 8
61391: PPUSH
61392: LD_INT 0
61394: PPUSH
61395: LD_INT 5
61397: PPUSH
61398: CALL_OW 12
61402: PPUSH
61403: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
61407: LD_VAR 0 8
61411: PPUSH
61412: LD_VAR 0 5
61416: PPUSH
61417: LD_VAR 0 6
61421: PPUSH
61422: LD_INT 1
61424: PPUSH
61425: CALL_OW 48
// end ;
61429: LD_VAR 0 7
61433: RET
// export hInvincible ; every 1 do
61434: GO 61436
61436: DISABLE
// hInvincible := [ ] ;
61437: LD_ADDR_EXP 70
61441: PUSH
61442: EMPTY
61443: ST_TO_ADDR
61444: END
// every 10 do var i ;
61445: GO 61447
61447: DISABLE
61448: LD_INT 0
61450: PPUSH
// begin enable ;
61451: ENABLE
// if not hInvincible then
61452: LD_EXP 70
61456: NOT
61457: IFFALSE 61461
// exit ;
61459: GO 61505
// for i in hInvincible do
61461: LD_ADDR_VAR 0 1
61465: PUSH
61466: LD_EXP 70
61470: PUSH
61471: FOR_IN
61472: IFFALSE 61503
// if GetLives ( i ) < 1000 then
61474: LD_VAR 0 1
61478: PPUSH
61479: CALL_OW 256
61483: PUSH
61484: LD_INT 1000
61486: LESS
61487: IFFALSE 61501
// SetLives ( i , 1000 ) ;
61489: LD_VAR 0 1
61493: PPUSH
61494: LD_INT 1000
61496: PPUSH
61497: CALL_OW 234
61501: GO 61471
61503: POP
61504: POP
// end ;
61505: PPOPN 1
61507: END
// export function hHackInvincible ; var i ; begin
61508: LD_INT 0
61510: PPUSH
61511: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
61512: LD_ADDR_VAR 0 2
61516: PUSH
61517: LD_INT 2
61519: PUSH
61520: LD_INT 21
61522: PUSH
61523: LD_INT 1
61525: PUSH
61526: EMPTY
61527: LIST
61528: LIST
61529: PUSH
61530: LD_INT 21
61532: PUSH
61533: LD_INT 2
61535: PUSH
61536: EMPTY
61537: LIST
61538: LIST
61539: PUSH
61540: EMPTY
61541: LIST
61542: LIST
61543: LIST
61544: PPUSH
61545: CALL_OW 69
61549: PUSH
61550: FOR_IN
61551: IFFALSE 61612
// if IsSelected ( i ) then
61553: LD_VAR 0 2
61557: PPUSH
61558: CALL_OW 306
61562: IFFALSE 61610
// begin if i in hInvincible then
61564: LD_VAR 0 2
61568: PUSH
61569: LD_EXP 70
61573: IN
61574: IFFALSE 61594
// hInvincible := hInvincible diff i else
61576: LD_ADDR_EXP 70
61580: PUSH
61581: LD_EXP 70
61585: PUSH
61586: LD_VAR 0 2
61590: DIFF
61591: ST_TO_ADDR
61592: GO 61610
// hInvincible := hInvincible union i ;
61594: LD_ADDR_EXP 70
61598: PUSH
61599: LD_EXP 70
61603: PUSH
61604: LD_VAR 0 2
61608: UNION
61609: ST_TO_ADDR
// end ;
61610: GO 61550
61612: POP
61613: POP
// end ;
61614: LD_VAR 0 1
61618: RET
// export function hHackInvisible ; var i , j ; begin
61619: LD_INT 0
61621: PPUSH
61622: PPUSH
61623: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
61624: LD_ADDR_VAR 0 2
61628: PUSH
61629: LD_INT 21
61631: PUSH
61632: LD_INT 1
61634: PUSH
61635: EMPTY
61636: LIST
61637: LIST
61638: PPUSH
61639: CALL_OW 69
61643: PUSH
61644: FOR_IN
61645: IFFALSE 61669
// if IsSelected ( i ) then
61647: LD_VAR 0 2
61651: PPUSH
61652: CALL_OW 306
61656: IFFALSE 61667
// ComForceInvisible ( i ) ;
61658: LD_VAR 0 2
61662: PPUSH
61663: CALL_OW 496
61667: GO 61644
61669: POP
61670: POP
// end ;
61671: LD_VAR 0 1
61675: RET
// export function hHackChangeYourSide ; begin
61676: LD_INT 0
61678: PPUSH
// if your_side = 8 then
61679: LD_OWVAR 2
61683: PUSH
61684: LD_INT 8
61686: EQUAL
61687: IFFALSE 61699
// your_side := 0 else
61689: LD_ADDR_OWVAR 2
61693: PUSH
61694: LD_INT 0
61696: ST_TO_ADDR
61697: GO 61713
// your_side := your_side + 1 ;
61699: LD_ADDR_OWVAR 2
61703: PUSH
61704: LD_OWVAR 2
61708: PUSH
61709: LD_INT 1
61711: PLUS
61712: ST_TO_ADDR
// end ;
61713: LD_VAR 0 1
61717: RET
// export function hHackChangeUnitSide ; var i , j ; begin
61718: LD_INT 0
61720: PPUSH
61721: PPUSH
61722: PPUSH
// for i in all_units do
61723: LD_ADDR_VAR 0 2
61727: PUSH
61728: LD_OWVAR 3
61732: PUSH
61733: FOR_IN
61734: IFFALSE 61812
// if IsSelected ( i ) then
61736: LD_VAR 0 2
61740: PPUSH
61741: CALL_OW 306
61745: IFFALSE 61810
// begin j := GetSide ( i ) ;
61747: LD_ADDR_VAR 0 3
61751: PUSH
61752: LD_VAR 0 2
61756: PPUSH
61757: CALL_OW 255
61761: ST_TO_ADDR
// if j = 8 then
61762: LD_VAR 0 3
61766: PUSH
61767: LD_INT 8
61769: EQUAL
61770: IFFALSE 61782
// j := 0 else
61772: LD_ADDR_VAR 0 3
61776: PUSH
61777: LD_INT 0
61779: ST_TO_ADDR
61780: GO 61796
// j := j + 1 ;
61782: LD_ADDR_VAR 0 3
61786: PUSH
61787: LD_VAR 0 3
61791: PUSH
61792: LD_INT 1
61794: PLUS
61795: ST_TO_ADDR
// SetSide ( i , j ) ;
61796: LD_VAR 0 2
61800: PPUSH
61801: LD_VAR 0 3
61805: PPUSH
61806: CALL_OW 235
// end ;
61810: GO 61733
61812: POP
61813: POP
// end ;
61814: LD_VAR 0 1
61818: RET
// export function hHackFog ; begin
61819: LD_INT 0
61821: PPUSH
// FogOff ( true ) ;
61822: LD_INT 1
61824: PPUSH
61825: CALL_OW 344
// end ;
61829: LD_VAR 0 1
61833: RET
// export function hHackTeleport ( unit , x , y ) ; begin
61834: LD_INT 0
61836: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
61837: LD_VAR 0 1
61841: PPUSH
61842: LD_VAR 0 2
61846: PPUSH
61847: LD_VAR 0 3
61851: PPUSH
61852: LD_INT 1
61854: PPUSH
61855: LD_INT 1
61857: PPUSH
61858: CALL_OW 483
// CenterOnXY ( x , y ) ;
61862: LD_VAR 0 2
61866: PPUSH
61867: LD_VAR 0 3
61871: PPUSH
61872: CALL_OW 84
// end ;
61876: LD_VAR 0 4
61880: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
61881: LD_INT 0
61883: PPUSH
61884: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
61885: LD_VAR 0 1
61889: NOT
61890: PUSH
61891: LD_VAR 0 2
61895: PPUSH
61896: LD_VAR 0 3
61900: PPUSH
61901: CALL_OW 488
61905: NOT
61906: OR
61907: PUSH
61908: LD_VAR 0 1
61912: PPUSH
61913: CALL_OW 266
61917: PUSH
61918: LD_INT 3
61920: NONEQUAL
61921: PUSH
61922: LD_VAR 0 1
61926: PPUSH
61927: CALL_OW 247
61931: PUSH
61932: LD_INT 1
61934: EQUAL
61935: NOT
61936: AND
61937: OR
61938: IFFALSE 61942
// exit ;
61940: GO 62091
// if GetType ( factory ) = unit_human then
61942: LD_VAR 0 1
61946: PPUSH
61947: CALL_OW 247
61951: PUSH
61952: LD_INT 1
61954: EQUAL
61955: IFFALSE 61972
// factory := IsInUnit ( factory ) ;
61957: LD_ADDR_VAR 0 1
61961: PUSH
61962: LD_VAR 0 1
61966: PPUSH
61967: CALL_OW 310
61971: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
61972: LD_VAR 0 1
61976: PPUSH
61977: CALL_OW 266
61981: PUSH
61982: LD_INT 3
61984: NONEQUAL
61985: IFFALSE 61989
// exit ;
61987: GO 62091
// if HexInfo ( x , y ) = factory then
61989: LD_VAR 0 2
61993: PPUSH
61994: LD_VAR 0 3
61998: PPUSH
61999: CALL_OW 428
62003: PUSH
62004: LD_VAR 0 1
62008: EQUAL
62009: IFFALSE 62036
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
62011: LD_ADDR_EXP 71
62015: PUSH
62016: LD_EXP 71
62020: PPUSH
62021: LD_VAR 0 1
62025: PPUSH
62026: LD_INT 0
62028: PPUSH
62029: CALL_OW 1
62033: ST_TO_ADDR
62034: GO 62087
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
62036: LD_ADDR_EXP 71
62040: PUSH
62041: LD_EXP 71
62045: PPUSH
62046: LD_VAR 0 1
62050: PPUSH
62051: LD_VAR 0 1
62055: PPUSH
62056: CALL_OW 255
62060: PUSH
62061: LD_VAR 0 1
62065: PUSH
62066: LD_VAR 0 2
62070: PUSH
62071: LD_VAR 0 3
62075: PUSH
62076: EMPTY
62077: LIST
62078: LIST
62079: LIST
62080: LIST
62081: PPUSH
62082: CALL_OW 1
62086: ST_TO_ADDR
// UpdateFactoryWaypoints ;
62087: CALL 62096 0 0
// end ;
62091: LD_VAR 0 4
62095: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
62096: LD_INT 0
62098: PPUSH
62099: PPUSH
62100: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
62101: LD_STRING resetFactoryWaypoint();
62103: PPUSH
62104: CALL_OW 559
// if factoryWaypoints then
62108: LD_EXP 71
62112: IFFALSE 62238
// begin list := PrepareArray ( factoryWaypoints ) ;
62114: LD_ADDR_VAR 0 3
62118: PUSH
62119: LD_EXP 71
62123: PPUSH
62124: CALL 41976 0 1
62128: ST_TO_ADDR
// for i := 1 to list do
62129: LD_ADDR_VAR 0 2
62133: PUSH
62134: DOUBLE
62135: LD_INT 1
62137: DEC
62138: ST_TO_ADDR
62139: LD_VAR 0 3
62143: PUSH
62144: FOR_TO
62145: IFFALSE 62236
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
62147: LD_STRING setFactoryWaypointXY(
62149: PUSH
62150: LD_VAR 0 3
62154: PUSH
62155: LD_VAR 0 2
62159: ARRAY
62160: PUSH
62161: LD_INT 1
62163: ARRAY
62164: STR
62165: PUSH
62166: LD_STRING ,
62168: STR
62169: PUSH
62170: LD_VAR 0 3
62174: PUSH
62175: LD_VAR 0 2
62179: ARRAY
62180: PUSH
62181: LD_INT 2
62183: ARRAY
62184: STR
62185: PUSH
62186: LD_STRING ,
62188: STR
62189: PUSH
62190: LD_VAR 0 3
62194: PUSH
62195: LD_VAR 0 2
62199: ARRAY
62200: PUSH
62201: LD_INT 3
62203: ARRAY
62204: STR
62205: PUSH
62206: LD_STRING ,
62208: STR
62209: PUSH
62210: LD_VAR 0 3
62214: PUSH
62215: LD_VAR 0 2
62219: ARRAY
62220: PUSH
62221: LD_INT 4
62223: ARRAY
62224: STR
62225: PUSH
62226: LD_STRING )
62228: STR
62229: PPUSH
62230: CALL_OW 559
62234: GO 62144
62236: POP
62237: POP
// end ; end ;
62238: LD_VAR 0 1
62242: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
62243: LD_INT 0
62245: PPUSH
// if HexInfo ( x , y ) = warehouse then
62246: LD_VAR 0 2
62250: PPUSH
62251: LD_VAR 0 3
62255: PPUSH
62256: CALL_OW 428
62260: PUSH
62261: LD_VAR 0 1
62265: EQUAL
62266: IFFALSE 62293
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
62268: LD_ADDR_EXP 72
62272: PUSH
62273: LD_EXP 72
62277: PPUSH
62278: LD_VAR 0 1
62282: PPUSH
62283: LD_INT 0
62285: PPUSH
62286: CALL_OW 1
62290: ST_TO_ADDR
62291: GO 62344
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
62293: LD_ADDR_EXP 72
62297: PUSH
62298: LD_EXP 72
62302: PPUSH
62303: LD_VAR 0 1
62307: PPUSH
62308: LD_VAR 0 1
62312: PPUSH
62313: CALL_OW 255
62317: PUSH
62318: LD_VAR 0 1
62322: PUSH
62323: LD_VAR 0 2
62327: PUSH
62328: LD_VAR 0 3
62332: PUSH
62333: EMPTY
62334: LIST
62335: LIST
62336: LIST
62337: LIST
62338: PPUSH
62339: CALL_OW 1
62343: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
62344: CALL 62353 0 0
// end ;
62348: LD_VAR 0 4
62352: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
62353: LD_INT 0
62355: PPUSH
62356: PPUSH
62357: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
62358: LD_STRING resetWarehouseGatheringPoints();
62360: PPUSH
62361: CALL_OW 559
// if warehouseGatheringPoints then
62365: LD_EXP 72
62369: IFFALSE 62495
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
62371: LD_ADDR_VAR 0 3
62375: PUSH
62376: LD_EXP 72
62380: PPUSH
62381: CALL 41976 0 1
62385: ST_TO_ADDR
// for i := 1 to list do
62386: LD_ADDR_VAR 0 2
62390: PUSH
62391: DOUBLE
62392: LD_INT 1
62394: DEC
62395: ST_TO_ADDR
62396: LD_VAR 0 3
62400: PUSH
62401: FOR_TO
62402: IFFALSE 62493
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
62404: LD_STRING setWarehouseGatheringPointXY(
62406: PUSH
62407: LD_VAR 0 3
62411: PUSH
62412: LD_VAR 0 2
62416: ARRAY
62417: PUSH
62418: LD_INT 1
62420: ARRAY
62421: STR
62422: PUSH
62423: LD_STRING ,
62425: STR
62426: PUSH
62427: LD_VAR 0 3
62431: PUSH
62432: LD_VAR 0 2
62436: ARRAY
62437: PUSH
62438: LD_INT 2
62440: ARRAY
62441: STR
62442: PUSH
62443: LD_STRING ,
62445: STR
62446: PUSH
62447: LD_VAR 0 3
62451: PUSH
62452: LD_VAR 0 2
62456: ARRAY
62457: PUSH
62458: LD_INT 3
62460: ARRAY
62461: STR
62462: PUSH
62463: LD_STRING ,
62465: STR
62466: PUSH
62467: LD_VAR 0 3
62471: PUSH
62472: LD_VAR 0 2
62476: ARRAY
62477: PUSH
62478: LD_INT 4
62480: ARRAY
62481: STR
62482: PUSH
62483: LD_STRING )
62485: STR
62486: PPUSH
62487: CALL_OW 559
62491: GO 62401
62493: POP
62494: POP
// end ; end ;
62495: LD_VAR 0 1
62499: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
62500: LD_EXP 72
62504: IFFALSE 63189
62506: GO 62508
62508: DISABLE
62509: LD_INT 0
62511: PPUSH
62512: PPUSH
62513: PPUSH
62514: PPUSH
62515: PPUSH
62516: PPUSH
62517: PPUSH
62518: PPUSH
62519: PPUSH
// begin enable ;
62520: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
62521: LD_ADDR_VAR 0 3
62525: PUSH
62526: LD_EXP 72
62530: PPUSH
62531: CALL 41976 0 1
62535: ST_TO_ADDR
// if not list then
62536: LD_VAR 0 3
62540: NOT
62541: IFFALSE 62545
// exit ;
62543: GO 63189
// for i := 1 to list do
62545: LD_ADDR_VAR 0 1
62549: PUSH
62550: DOUBLE
62551: LD_INT 1
62553: DEC
62554: ST_TO_ADDR
62555: LD_VAR 0 3
62559: PUSH
62560: FOR_TO
62561: IFFALSE 63187
// begin depot := list [ i ] [ 2 ] ;
62563: LD_ADDR_VAR 0 8
62567: PUSH
62568: LD_VAR 0 3
62572: PUSH
62573: LD_VAR 0 1
62577: ARRAY
62578: PUSH
62579: LD_INT 2
62581: ARRAY
62582: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
62583: LD_ADDR_VAR 0 5
62587: PUSH
62588: LD_VAR 0 3
62592: PUSH
62593: LD_VAR 0 1
62597: ARRAY
62598: PUSH
62599: LD_INT 1
62601: ARRAY
62602: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
62603: LD_VAR 0 8
62607: PPUSH
62608: CALL_OW 301
62612: PUSH
62613: LD_VAR 0 5
62617: PUSH
62618: LD_VAR 0 8
62622: PPUSH
62623: CALL_OW 255
62627: NONEQUAL
62628: OR
62629: IFFALSE 62658
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
62631: LD_ADDR_EXP 72
62635: PUSH
62636: LD_EXP 72
62640: PPUSH
62641: LD_VAR 0 8
62645: PPUSH
62646: LD_INT 0
62648: PPUSH
62649: CALL_OW 1
62653: ST_TO_ADDR
// exit ;
62654: POP
62655: POP
62656: GO 63189
// end ; x := list [ i ] [ 3 ] ;
62658: LD_ADDR_VAR 0 6
62662: PUSH
62663: LD_VAR 0 3
62667: PUSH
62668: LD_VAR 0 1
62672: ARRAY
62673: PUSH
62674: LD_INT 3
62676: ARRAY
62677: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
62678: LD_ADDR_VAR 0 7
62682: PUSH
62683: LD_VAR 0 3
62687: PUSH
62688: LD_VAR 0 1
62692: ARRAY
62693: PUSH
62694: LD_INT 4
62696: ARRAY
62697: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
62698: LD_ADDR_VAR 0 9
62702: PUSH
62703: LD_VAR 0 6
62707: PPUSH
62708: LD_VAR 0 7
62712: PPUSH
62713: LD_INT 16
62715: PPUSH
62716: CALL 40564 0 3
62720: ST_TO_ADDR
// if not cratesNearbyPoint then
62721: LD_VAR 0 9
62725: NOT
62726: IFFALSE 62732
// exit ;
62728: POP
62729: POP
62730: GO 63189
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
62732: LD_ADDR_VAR 0 4
62736: PUSH
62737: LD_INT 22
62739: PUSH
62740: LD_VAR 0 5
62744: PUSH
62745: EMPTY
62746: LIST
62747: LIST
62748: PUSH
62749: LD_INT 3
62751: PUSH
62752: LD_INT 60
62754: PUSH
62755: EMPTY
62756: LIST
62757: PUSH
62758: EMPTY
62759: LIST
62760: LIST
62761: PUSH
62762: LD_INT 91
62764: PUSH
62765: LD_VAR 0 8
62769: PUSH
62770: LD_INT 6
62772: PUSH
62773: EMPTY
62774: LIST
62775: LIST
62776: LIST
62777: PUSH
62778: LD_INT 2
62780: PUSH
62781: LD_INT 25
62783: PUSH
62784: LD_INT 2
62786: PUSH
62787: EMPTY
62788: LIST
62789: LIST
62790: PUSH
62791: LD_INT 25
62793: PUSH
62794: LD_INT 16
62796: PUSH
62797: EMPTY
62798: LIST
62799: LIST
62800: PUSH
62801: EMPTY
62802: LIST
62803: LIST
62804: LIST
62805: PUSH
62806: EMPTY
62807: LIST
62808: LIST
62809: LIST
62810: LIST
62811: PPUSH
62812: CALL_OW 69
62816: PUSH
62817: LD_VAR 0 8
62821: PPUSH
62822: CALL_OW 313
62826: PPUSH
62827: LD_INT 3
62829: PUSH
62830: LD_INT 60
62832: PUSH
62833: EMPTY
62834: LIST
62835: PUSH
62836: EMPTY
62837: LIST
62838: LIST
62839: PUSH
62840: LD_INT 2
62842: PUSH
62843: LD_INT 25
62845: PUSH
62846: LD_INT 2
62848: PUSH
62849: EMPTY
62850: LIST
62851: LIST
62852: PUSH
62853: LD_INT 25
62855: PUSH
62856: LD_INT 16
62858: PUSH
62859: EMPTY
62860: LIST
62861: LIST
62862: PUSH
62863: EMPTY
62864: LIST
62865: LIST
62866: LIST
62867: PUSH
62868: EMPTY
62869: LIST
62870: LIST
62871: PPUSH
62872: CALL_OW 72
62876: UNION
62877: ST_TO_ADDR
// if tmp then
62878: LD_VAR 0 4
62882: IFFALSE 62962
// begin tmp := ShrinkArray ( tmp , 3 ) ;
62884: LD_ADDR_VAR 0 4
62888: PUSH
62889: LD_VAR 0 4
62893: PPUSH
62894: LD_INT 3
62896: PPUSH
62897: CALL 38533 0 2
62901: ST_TO_ADDR
// for j in tmp do
62902: LD_ADDR_VAR 0 2
62906: PUSH
62907: LD_VAR 0 4
62911: PUSH
62912: FOR_IN
62913: IFFALSE 62956
// begin if IsInUnit ( j ) then
62915: LD_VAR 0 2
62919: PPUSH
62920: CALL_OW 310
62924: IFFALSE 62935
// ComExit ( j ) ;
62926: LD_VAR 0 2
62930: PPUSH
62931: CALL 38616 0 1
// AddComCollect ( j , x , y ) ;
62935: LD_VAR 0 2
62939: PPUSH
62940: LD_VAR 0 6
62944: PPUSH
62945: LD_VAR 0 7
62949: PPUSH
62950: CALL_OW 177
// end ;
62954: GO 62912
62956: POP
62957: POP
// exit ;
62958: POP
62959: POP
62960: GO 63189
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
62962: LD_ADDR_VAR 0 4
62966: PUSH
62967: LD_INT 22
62969: PUSH
62970: LD_VAR 0 5
62974: PUSH
62975: EMPTY
62976: LIST
62977: LIST
62978: PUSH
62979: LD_INT 91
62981: PUSH
62982: LD_VAR 0 8
62986: PUSH
62987: LD_INT 8
62989: PUSH
62990: EMPTY
62991: LIST
62992: LIST
62993: LIST
62994: PUSH
62995: LD_INT 2
62997: PUSH
62998: LD_INT 34
63000: PUSH
63001: LD_INT 12
63003: PUSH
63004: EMPTY
63005: LIST
63006: LIST
63007: PUSH
63008: LD_INT 34
63010: PUSH
63011: LD_INT 51
63013: PUSH
63014: EMPTY
63015: LIST
63016: LIST
63017: PUSH
63018: LD_INT 34
63020: PUSH
63021: LD_INT 32
63023: PUSH
63024: EMPTY
63025: LIST
63026: LIST
63027: PUSH
63028: LD_INT 34
63030: PUSH
63031: LD_INT 89
63033: PUSH
63034: EMPTY
63035: LIST
63036: LIST
63037: PUSH
63038: EMPTY
63039: LIST
63040: LIST
63041: LIST
63042: LIST
63043: LIST
63044: PUSH
63045: EMPTY
63046: LIST
63047: LIST
63048: LIST
63049: PPUSH
63050: CALL_OW 69
63054: ST_TO_ADDR
// if tmp then
63055: LD_VAR 0 4
63059: IFFALSE 63185
// begin for j in tmp do
63061: LD_ADDR_VAR 0 2
63065: PUSH
63066: LD_VAR 0 4
63070: PUSH
63071: FOR_IN
63072: IFFALSE 63183
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
63074: LD_VAR 0 2
63078: PPUSH
63079: CALL_OW 262
63083: PUSH
63084: LD_INT 3
63086: EQUAL
63087: PUSH
63088: LD_VAR 0 2
63092: PPUSH
63093: CALL_OW 261
63097: PUSH
63098: LD_INT 20
63100: GREATER
63101: OR
63102: PUSH
63103: LD_VAR 0 2
63107: PPUSH
63108: CALL_OW 314
63112: NOT
63113: AND
63114: PUSH
63115: LD_VAR 0 2
63119: PPUSH
63120: CALL_OW 263
63124: PUSH
63125: LD_INT 1
63127: NONEQUAL
63128: PUSH
63129: LD_VAR 0 2
63133: PPUSH
63134: CALL_OW 311
63138: OR
63139: AND
63140: IFFALSE 63181
// begin ComCollect ( j , x , y ) ;
63142: LD_VAR 0 2
63146: PPUSH
63147: LD_VAR 0 6
63151: PPUSH
63152: LD_VAR 0 7
63156: PPUSH
63157: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
63161: LD_VAR 0 2
63165: PPUSH
63166: LD_VAR 0 8
63170: PPUSH
63171: CALL_OW 172
// exit ;
63175: POP
63176: POP
63177: POP
63178: POP
63179: GO 63189
// end ;
63181: GO 63071
63183: POP
63184: POP
// end ; end ;
63185: GO 62560
63187: POP
63188: POP
// end ;
63189: PPOPN 9
63191: END
