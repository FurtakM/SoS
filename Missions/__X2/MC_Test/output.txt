// starting begin ResetFog ;
   0: CALL_OW 335
// MC_Init ( ) ;
   4: CALL 438 0 0
// PrepareTestBase ;
   8: CALL 132 0 0
// mc_debug := true ;
  12: LD_ADDR_EXP 5
  16: PUSH
  17: LD_INT 1
  19: ST_TO_ADDR
// MC_Start ( ) ;
  20: CALL 462 0 0
// end ;
  24: END
// export function MC_CustomMacro ( ) ; begin
  25: LD_INT 0
  27: PPUSH
// MC_Add ( 1 , FilterAllUnits ( [ f_side , 1 ] ) ) ;
  28: LD_INT 1
  30: PPUSH
  31: LD_INT 22
  33: PUSH
  34: LD_INT 1
  36: PUSH
  37: EMPTY
  38: LIST
  39: LIST
  40: PPUSH
  41: CALL_OW 69
  45: PPUSH
  46: CALL 517 0 2
// MC_SetParkingArea ( 1 , parkingArea1 ) ;
  50: LD_INT 1
  52: PPUSH
  53: LD_INT 4
  55: PPUSH
  56: CALL 2337 0 2
// MC_SetCratesArea ( 1 , cratesArea1 ) ;
  60: LD_INT 1
  62: PPUSH
  63: LD_INT 2
  65: PPUSH
  66: CALL 1914 0 2
// MC_SetScanArea ( 1 , baseArea1 ) ;
  70: LD_INT 1
  72: PPUSH
  73: LD_INT 1
  75: PPUSH
  76: CALL 2386 0 2
// MC_SetBuildingList ( 1 , [ [ b_barracks , 37 , 33 , 5 ] , [ b_lab , 12 , 17 , 1 ] ] ) ;
  80: LD_INT 1
  82: PPUSH
  83: LD_INT 5
  85: PUSH
  86: LD_INT 37
  88: PUSH
  89: LD_INT 33
  91: PUSH
  92: LD_INT 5
  94: PUSH
  95: EMPTY
  96: LIST
  97: LIST
  98: LIST
  99: LIST
 100: PUSH
 101: LD_INT 6
 103: PUSH
 104: LD_INT 12
 106: PUSH
 107: LD_INT 17
 109: PUSH
 110: LD_INT 1
 112: PUSH
 113: EMPTY
 114: LIST
 115: LIST
 116: LIST
 117: LIST
 118: PUSH
 119: EMPTY
 120: LIST
 121: LIST
 122: PPUSH
 123: CALL 1014 0 2
// end ;
 127: LD_VAR 0 1
 131: RET
// export function PrepareTestBase ; var i , un ; begin
 132: LD_INT 0
 134: PPUSH
 135: PPUSH
 136: PPUSH
// InitHc_All ;
 137: CALL_OW 584
// uc_side := 1 ;
 141: LD_ADDR_OWVAR 20
 145: PUSH
 146: LD_INT 1
 148: ST_TO_ADDR
// uc_nation := 1 ;
 149: LD_ADDR_OWVAR 21
 153: PUSH
 154: LD_INT 1
 156: ST_TO_ADDR
// for i := 1 to 12 do
 157: LD_ADDR_VAR 0 2
 161: PUSH
 162: DOUBLE
 163: LD_INT 1
 165: DEC
 166: ST_TO_ADDR
 167: LD_INT 12
 169: PUSH
 170: FOR_TO
 171: IFFALSE 238
// begin PrepareHuman ( false , i mod 4 + 1 , 3 ) ;
 173: LD_INT 0
 175: PPUSH
 176: LD_VAR 0 2
 180: PUSH
 181: LD_INT 4
 183: MOD
 184: PUSH
 185: LD_INT 1
 187: PLUS
 188: PPUSH
 189: LD_INT 3
 191: PPUSH
 192: CALL_OW 380
// un := CreateHuman ;
 196: LD_ADDR_VAR 0 3
 200: PUSH
 201: CALL_OW 44
 205: ST_TO_ADDR
// PlaceUnitXYR ( un , 21 , 16 , 8 , false ) ;
 206: LD_VAR 0 3
 210: PPUSH
 211: LD_INT 21
 213: PPUSH
 214: LD_INT 16
 216: PPUSH
 217: LD_INT 8
 219: PPUSH
 220: LD_INT 0
 222: PPUSH
 223: CALL_OW 50
// ComHold ( un ) ;
 227: LD_VAR 0 3
 231: PPUSH
 232: CALL_OW 140
// end ;
 236: GO 170
 238: POP
 239: POP
// end ;
 240: LD_VAR 0 1
 244: RET
// every 0 0$50 trigger mc_debug do
 245: LD_EXP 5
 249: IFFALSE 276
 251: GO 253
 253: DISABLE
// begin enable ;
 254: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , cratesArea1 , true ) ;
 255: LD_INT 1
 257: PPUSH
 258: LD_INT 5
 260: PPUSH
 261: CALL_OW 12
 265: PPUSH
 266: LD_INT 2
 268: PPUSH
 269: LD_INT 1
 271: PPUSH
 272: CALL_OW 55
// end ;
 276: END
// every 0 0$1 trigger mc_debug do
 277: LD_EXP 5
 281: IFFALSE 307
 283: GO 285
 285: DISABLE
// begin enable ;
 286: ENABLE
// display_strings := FilterAllUnits ( [ f_tag , 3 ] ) ;
 287: LD_ADDR_OWVAR 47
 291: PUSH
 292: LD_INT 120
 294: PUSH
 295: LD_INT 3
 297: PUSH
 298: EMPTY
 299: LIST
 300: LIST
 301: PPUSH
 302: CALL_OW 69
 306: ST_TO_ADDR
// end ; end_of_file
 307: END
// on SailEventCustom ( event , p1 , p2 , p3 , p4 , p5 , p6 ) do begin MCE_SailEventCustom ( event , p1 , p2 , p3 , p4 , p5 , p6 ) ;
 308: LD_VAR 0 1
 312: PPUSH
 313: LD_VAR 0 2
 317: PPUSH
 318: LD_VAR 0 3
 322: PPUSH
 323: LD_VAR 0 4
 327: PPUSH
 328: LD_VAR 0 5
 332: PPUSH
 333: LD_VAR 0 6
 337: PPUSH
 338: LD_VAR 0 7
 342: PPUSH
 343: CALL 4765 0 7
// end ;
 347: PPOPN 7
 349: END
// on ClassChanged ( unit , old_class , new_class ) do begin MCE_ClassChanged ( unit , old_class , new_class ) ;
 350: LD_VAR 0 1
 354: PPUSH
 355: LD_VAR 0 2
 359: PPUSH
 360: LD_VAR 0 3
 364: PPUSH
 365: CALL 4818 0 3
// end ;
 369: PPOPN 3
 371: END
// on UnitDestroyed ( unit ) do begin MCE_UnitDestroyed ( unit ) ;
 372: LD_VAR 0 1
 376: PPUSH
 377: CALL 4840 0 1
// end ;
 381: PPOPN 1
 383: END
// on EvacuateVehicle ( driver , vehicle , p1 , p2 ) do begin MCE_EvacuateVehicle ( driver , vehicle , p1 , p2 ) ;
 384: LD_VAR 0 1
 388: PPUSH
 389: LD_VAR 0 2
 393: PPUSH
 394: LD_VAR 0 3
 398: PPUSH
 399: LD_VAR 0 4
 403: PPUSH
 404: CALL 4985 0 4
// end ;
 408: PPOPN 4
 410: END
// on BuildingComplete ( building ) do begin MCE_BuildingComplete ( building ) ;
 411: LD_VAR 0 1
 415: PPUSH
 416: CALL 5058 0 1
// end ;
 420: PPOPN 1
 422: END
// on UpgradeComplete ( building ) do begin MCE_BuildingUpgradeComplete ( building ) ;
 423: LD_VAR 0 1
 427: PPUSH
 428: CALL 5777 0 1
// end ;
 432: PPOPN 1
 434: END
// on CommandUnitXY ( comand , unit , x , y , z ) do begin end ; end_of_file
 435: PPOPN 5
 437: END
// export function MC_Init ( ) ; begin
 438: LD_INT 0
 440: PPUSH
// MC_InitVariables ( ) ;
 441: CALL 6038 0 0
// MCE_InitEvents ( ) ;
 445: CALL 4741 0 0
// MCT_InitTags ( ) ;
 449: CALL 6214 0 0
// MCTM_InitTaskManager ( ) end ;
 453: CALL 7795 0 0
 457: LD_VAR 0 1
 461: RET
// export function MC_Start ( ) ; begin
 462: LD_INT 0
 464: PPUSH
// mc_active := true ;
 465: LD_ADDR_EXP 4
 469: PUSH
 470: LD_INT 1
 472: ST_TO_ADDR
// MC_CustomMacro ( ) ;
 473: CALL 25 0 0
// MCE_SailEventCustom ( mce_start , 0 , 0 , 0 , 0 , 0 , 0 ) ;
 477: LD_EXP 1
 481: PPUSH
 482: LD_INT 0
 484: PPUSH
 485: LD_INT 0
 487: PPUSH
 488: LD_INT 0
 490: PPUSH
 491: LD_INT 0
 493: PPUSH
 494: LD_INT 0
 496: PPUSH
 497: LD_INT 0
 499: PPUSH
 500: CALL 4765 0 7
// end ;
 504: LD_VAR 0 1
 508: RET
// export function MC_Kill ( base ) ; begin
 509: LD_INT 0
 511: PPUSH
// end ;
 512: LD_VAR 0 2
 516: RET
// export function MC_Add ( side , units ) ; begin
 517: LD_INT 0
 519: PPUSH
// mc_bases := Replace ( mc_bases , mc_bases + 1 , side ) ;
 520: LD_ADDR_EXP 6
 524: PUSH
 525: LD_EXP 6
 529: PPUSH
 530: LD_EXP 6
 534: PUSH
 535: LD_INT 1
 537: PLUS
 538: PPUSH
 539: LD_VAR 0 1
 543: PPUSH
 544: CALL_OW 1
 548: ST_TO_ADDR
// mc_task := Replace ( mc_task , mc_task + 1 , [ ] ) ;
 549: LD_ADDR_EXP 8
 553: PUSH
 554: LD_EXP 8
 558: PPUSH
 559: LD_EXP 8
 563: PUSH
 564: LD_INT 1
 566: PLUS
 567: PPUSH
 568: EMPTY
 569: PPUSH
 570: CALL_OW 1
 574: ST_TO_ADDR
// mc_people := Replace ( mc_people , mc_people + 1 , UnitFilter ( units , [ [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ) ;
 575: LD_ADDR_EXP 9
 579: PUSH
 580: LD_EXP 9
 584: PPUSH
 585: LD_EXP 9
 589: PUSH
 590: LD_INT 1
 592: PLUS
 593: PPUSH
 594: LD_VAR 0 2
 598: PPUSH
 599: LD_INT 21
 601: PUSH
 602: LD_INT 1
 604: PUSH
 605: EMPTY
 606: LIST
 607: LIST
 608: PUSH
 609: LD_INT 3
 611: PUSH
 612: LD_INT 23
 614: PUSH
 615: LD_INT 0
 617: PUSH
 618: EMPTY
 619: LIST
 620: LIST
 621: PUSH
 622: EMPTY
 623: LIST
 624: LIST
 625: PUSH
 626: EMPTY
 627: LIST
 628: LIST
 629: PPUSH
 630: CALL_OW 72
 634: PPUSH
 635: CALL_OW 1
 639: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , mc_ape + 1 , UnitFilter ( units , [ f_nation , 0 ] ) ) ;
 640: LD_ADDR_EXP 19
 644: PUSH
 645: LD_EXP 19
 649: PPUSH
 650: LD_EXP 19
 654: PUSH
 655: LD_INT 1
 657: PLUS
 658: PPUSH
 659: LD_VAR 0 2
 663: PPUSH
 664: LD_INT 23
 666: PUSH
 667: LD_INT 0
 669: PUSH
 670: EMPTY
 671: LIST
 672: LIST
 673: PPUSH
 674: CALL_OW 72
 678: PPUSH
 679: CALL_OW 1
 683: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , mc_vehicles + 1 , UnitFilter ( units , [ f_type , unit_vehicle ] ) ) ;
 684: LD_ADDR_EXP 11
 688: PUSH
 689: LD_EXP 11
 693: PPUSH
 694: LD_EXP 11
 698: PUSH
 699: LD_INT 1
 701: PLUS
 702: PPUSH
 703: LD_VAR 0 2
 707: PPUSH
 708: LD_INT 21
 710: PUSH
 711: LD_INT 2
 713: PUSH
 714: EMPTY
 715: LIST
 716: LIST
 717: PPUSH
 718: CALL_OW 72
 722: PPUSH
 723: CALL_OW 1
 727: ST_TO_ADDR
// mc_buildings := Replace ( mc_buildings , mc_buildings + 1 , UnitFilter ( units , [ f_type , unit_building ] ) ) ;
 728: LD_ADDR_EXP 10
 732: PUSH
 733: LD_EXP 10
 737: PPUSH
 738: LD_EXP 10
 742: PUSH
 743: LD_INT 1
 745: PLUS
 746: PPUSH
 747: LD_VAR 0 2
 751: PPUSH
 752: LD_INT 21
 754: PUSH
 755: LD_INT 3
 757: PUSH
 758: EMPTY
 759: LIST
 760: LIST
 761: PPUSH
 762: CALL_OW 72
 766: PPUSH
 767: CALL_OW 1
 771: ST_TO_ADDR
// mc_defense_status := Replace ( mc_defense_status , mc_defense_status + 1 , false ) ;
 772: LD_ADDR_EXP 16
 776: PUSH
 777: LD_EXP 16
 781: PPUSH
 782: LD_EXP 16
 786: PUSH
 787: LD_INT 1
 789: PLUS
 790: PPUSH
 791: LD_INT 0
 793: PPUSH
 794: CALL_OW 1
 798: ST_TO_ADDR
// end ;
 799: LD_VAR 0 3
 803: RET
// export function MC_SetMinesField ( base , amount , area ) ; var i , tmp , list , x , j ; begin
 804: LD_INT 0
 806: PPUSH
 807: PPUSH
 808: PPUSH
 809: PPUSH
 810: PPUSH
 811: PPUSH
// if not mc_bases [ base ] then
 812: LD_EXP 6
 816: PUSH
 817: LD_VAR 0 1
 821: ARRAY
 822: NOT
 823: IFFALSE 827
// exit ;
 825: GO 1009
// tmp := [ ] ;
 827: LD_ADDR_VAR 0 6
 831: PUSH
 832: EMPTY
 833: ST_TO_ADDR
// list := AreaToList ( area , 0 ) ;
 834: LD_ADDR_VAR 0 7
 838: PUSH
 839: LD_VAR 0 3
 843: PPUSH
 844: LD_INT 0
 846: PPUSH
 847: CALL_OW 517
 851: ST_TO_ADDR
// if not list then
 852: LD_VAR 0 7
 856: NOT
 857: IFFALSE 861
// exit ;
 859: GO 1009
// for i = 1 to amount do
 861: LD_ADDR_VAR 0 5
 865: PUSH
 866: DOUBLE
 867: LD_INT 1
 869: DEC
 870: ST_TO_ADDR
 871: LD_VAR 0 2
 875: PUSH
 876: FOR_TO
 877: IFFALSE 957
// begin x := rand ( 1 , list [ 1 ] ) ;
 879: LD_ADDR_VAR 0 8
 883: PUSH
 884: LD_INT 1
 886: PPUSH
 887: LD_VAR 0 7
 891: PUSH
 892: LD_INT 1
 894: ARRAY
 895: PPUSH
 896: CALL_OW 12
 900: ST_TO_ADDR
// tmp := Replace ( tmp , i , [ list [ 1 ] [ x ] , list [ 2 ] [ x ] ] ) ;
 901: LD_ADDR_VAR 0 6
 905: PUSH
 906: LD_VAR 0 6
 910: PPUSH
 911: LD_VAR 0 5
 915: PPUSH
 916: LD_VAR 0 7
 920: PUSH
 921: LD_INT 1
 923: ARRAY
 924: PUSH
 925: LD_VAR 0 8
 929: ARRAY
 930: PUSH
 931: LD_VAR 0 7
 935: PUSH
 936: LD_INT 2
 938: ARRAY
 939: PUSH
 940: LD_VAR 0 8
 944: ARRAY
 945: PUSH
 946: EMPTY
 947: LIST
 948: LIST
 949: PPUSH
 950: CALL_OW 1
 954: ST_TO_ADDR
// end ;
 955: GO 876
 957: POP
 958: POP
// mc_mines := Replace ( mc_mines , base , tmp ) ;
 959: LD_ADDR_EXP 12
 963: PUSH
 964: LD_EXP 12
 968: PPUSH
 969: LD_VAR 0 1
 973: PPUSH
 974: LD_VAR 0 6
 978: PPUSH
 979: CALL_OW 1
 983: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , area ) ;
 984: LD_ADDR_EXP 13
 988: PUSH
 989: LD_EXP 13
 993: PPUSH
 994: LD_VAR 0 1
 998: PPUSH
 999: LD_VAR 0 3
1003: PPUSH
1004: CALL_OW 1
1008: ST_TO_ADDR
// end ;
1009: LD_VAR 0 4
1013: RET
// export function MC_SetBuildingList ( base , construct_list ) ; var i , btype ; begin
1014: LD_INT 0
1016: PPUSH
1017: PPUSH
1018: PPUSH
// if not construct_list then
1019: LD_VAR 0 2
1023: NOT
1024: IFFALSE 1028
// exit ;
1026: GO 1254
// for i := 1 to construct_list do
1028: LD_ADDR_VAR 0 4
1032: PUSH
1033: DOUBLE
1034: LD_INT 1
1036: DEC
1037: ST_TO_ADDR
1038: LD_VAR 0 2
1042: PUSH
1043: FOR_TO
1044: IFFALSE 1227
// if construct_list [ i ] [ 1 ] in [ b_factory , b_barracks ] then
1046: LD_VAR 0 2
1050: PUSH
1051: LD_VAR 0 4
1055: ARRAY
1056: PUSH
1057: LD_INT 1
1059: ARRAY
1060: PUSH
1061: LD_INT 3
1063: PUSH
1064: LD_INT 5
1066: PUSH
1067: EMPTY
1068: LIST
1069: LIST
1070: IN
1071: IFFALSE 1225
// begin case construct_list [ i ] [ 1 ] of b_factory :
1073: LD_VAR 0 2
1077: PUSH
1078: LD_VAR 0 4
1082: ARRAY
1083: PUSH
1084: LD_INT 1
1086: ARRAY
1087: PUSH
1088: LD_INT 3
1090: DOUBLE
1091: EQUAL
1092: IFTRUE 1096
1094: GO 1107
1096: POP
// btype := b_workshop ; b_barracks :
1097: LD_ADDR_VAR 0 5
1101: PUSH
1102: LD_INT 2
1104: ST_TO_ADDR
1105: GO 1127
1107: LD_INT 5
1109: DOUBLE
1110: EQUAL
1111: IFTRUE 1115
1113: GO 1126
1115: POP
// btype := b_armoury ; end ;
1116: LD_ADDR_VAR 0 5
1120: PUSH
1121: LD_INT 4
1123: ST_TO_ADDR
1124: GO 1127
1126: POP
// construct_list := Replace ( construct_list , i , Replace ( construct_list [ i ] , 5 , construct_list [ i ] [ 1 ] ) ) ;
1127: LD_ADDR_VAR 0 2
1131: PUSH
1132: LD_VAR 0 2
1136: PPUSH
1137: LD_VAR 0 4
1141: PPUSH
1142: LD_VAR 0 2
1146: PUSH
1147: LD_VAR 0 4
1151: ARRAY
1152: PPUSH
1153: LD_INT 5
1155: PPUSH
1156: LD_VAR 0 2
1160: PUSH
1161: LD_VAR 0 4
1165: ARRAY
1166: PUSH
1167: LD_INT 1
1169: ARRAY
1170: PPUSH
1171: CALL_OW 1
1175: PPUSH
1176: CALL_OW 1
1180: ST_TO_ADDR
// construct_list := Replace ( construct_list , i , Replace ( construct_list [ i ] , 1 , btype ) ) ;
1181: LD_ADDR_VAR 0 2
1185: PUSH
1186: LD_VAR 0 2
1190: PPUSH
1191: LD_VAR 0 4
1195: PPUSH
1196: LD_VAR 0 2
1200: PUSH
1201: LD_VAR 0 4
1205: ARRAY
1206: PPUSH
1207: LD_INT 1
1209: PPUSH
1210: LD_VAR 0 5
1214: PPUSH
1215: CALL_OW 1
1219: PPUSH
1220: CALL_OW 1
1224: ST_TO_ADDR
// end ;
1225: GO 1043
1227: POP
1228: POP
// mc_build_list := Replace ( mc_build_list , base , construct_list ) ;
1229: LD_ADDR_EXP 14
1233: PUSH
1234: LD_EXP 14
1238: PPUSH
1239: LD_VAR 0 1
1243: PPUSH
1244: LD_VAR 0 2
1248: PPUSH
1249: CALL_OW 1
1253: ST_TO_ADDR
// end ;
1254: LD_VAR 0 3
1258: RET
// export function MC_InsertBuildingList ( base , construct_list ) ; var i , btype ; begin
1259: LD_INT 0
1261: PPUSH
1262: PPUSH
1263: PPUSH
// if not construct_list then
1264: LD_VAR 0 2
1268: NOT
1269: IFFALSE 1273
// exit ;
1271: GO 1511
// for i := 1 to construct_list do
1273: LD_ADDR_VAR 0 4
1277: PUSH
1278: DOUBLE
1279: LD_INT 1
1281: DEC
1282: ST_TO_ADDR
1283: LD_VAR 0 2
1287: PUSH
1288: FOR_TO
1289: IFFALSE 1472
// if construct_list [ i ] [ 1 ] in [ b_factory , b_barracks ] then
1291: LD_VAR 0 2
1295: PUSH
1296: LD_VAR 0 4
1300: ARRAY
1301: PUSH
1302: LD_INT 1
1304: ARRAY
1305: PUSH
1306: LD_INT 3
1308: PUSH
1309: LD_INT 5
1311: PUSH
1312: EMPTY
1313: LIST
1314: LIST
1315: IN
1316: IFFALSE 1470
// begin case construct_list [ i ] [ 1 ] of b_factory :
1318: LD_VAR 0 2
1322: PUSH
1323: LD_VAR 0 4
1327: ARRAY
1328: PUSH
1329: LD_INT 1
1331: ARRAY
1332: PUSH
1333: LD_INT 3
1335: DOUBLE
1336: EQUAL
1337: IFTRUE 1341
1339: GO 1352
1341: POP
// btype := b_workshop ; b_barracks :
1342: LD_ADDR_VAR 0 5
1346: PUSH
1347: LD_INT 2
1349: ST_TO_ADDR
1350: GO 1372
1352: LD_INT 5
1354: DOUBLE
1355: EQUAL
1356: IFTRUE 1360
1358: GO 1371
1360: POP
// btype := b_armoury ; end ;
1361: LD_ADDR_VAR 0 5
1365: PUSH
1366: LD_INT 4
1368: ST_TO_ADDR
1369: GO 1372
1371: POP
// construct_list := Replace ( construct_list , i , Replace ( construct_list [ i ] , 5 , construct_list [ i ] [ 1 ] ) ) ;
1372: LD_ADDR_VAR 0 2
1376: PUSH
1377: LD_VAR 0 2
1381: PPUSH
1382: LD_VAR 0 4
1386: PPUSH
1387: LD_VAR 0 2
1391: PUSH
1392: LD_VAR 0 4
1396: ARRAY
1397: PPUSH
1398: LD_INT 5
1400: PPUSH
1401: LD_VAR 0 2
1405: PUSH
1406: LD_VAR 0 4
1410: ARRAY
1411: PUSH
1412: LD_INT 1
1414: ARRAY
1415: PPUSH
1416: CALL_OW 1
1420: PPUSH
1421: CALL_OW 1
1425: ST_TO_ADDR
// construct_list := Replace ( construct_list , i , Replace ( construct_list [ i ] , 1 , btype ) ) ;
1426: LD_ADDR_VAR 0 2
1430: PUSH
1431: LD_VAR 0 2
1435: PPUSH
1436: LD_VAR 0 4
1440: PPUSH
1441: LD_VAR 0 2
1445: PUSH
1446: LD_VAR 0 4
1450: ARRAY
1451: PPUSH
1452: LD_INT 1
1454: PPUSH
1455: LD_VAR 0 5
1459: PPUSH
1460: CALL_OW 1
1464: PPUSH
1465: CALL_OW 1
1469: ST_TO_ADDR
// end ;
1470: GO 1288
1472: POP
1473: POP
// mc_build_list := Replace ( mc_build_list , base , mc_build_list [ base ] union construct_list ) ;
1474: LD_ADDR_EXP 14
1478: PUSH
1479: LD_EXP 14
1483: PPUSH
1484: LD_VAR 0 1
1488: PPUSH
1489: LD_EXP 14
1493: PUSH
1494: LD_VAR 0 1
1498: ARRAY
1499: PUSH
1500: LD_VAR 0 2
1504: UNION
1505: PPUSH
1506: CALL_OW 1
1510: ST_TO_ADDR
// end ;
1511: LD_VAR 0 3
1515: RET
// export function MC_SetProduceList ( base , produce_list ) ; begin
1516: LD_INT 0
1518: PPUSH
// mc_produce_list := Replace ( mc_produce_list , base , produce_list ) ;
1519: LD_ADDR_EXP 15
1523: PUSH
1524: LD_EXP 15
1528: PPUSH
1529: LD_VAR 0 1
1533: PPUSH
1534: LD_VAR 0 2
1538: PPUSH
1539: CALL_OW 1
1543: ST_TO_ADDR
// end ;
1544: LD_VAR 0 3
1548: RET
// export function MC_InsertProduceList ( base , components ) ; begin
1549: LD_INT 0
1551: PPUSH
// mc_produce_list := Replace ( mc_produce_list , base , mc_produce_list [ base ] ^ components ) ;
1552: LD_ADDR_EXP 15
1556: PUSH
1557: LD_EXP 15
1561: PPUSH
1562: LD_VAR 0 1
1566: PPUSH
1567: LD_EXP 15
1571: PUSH
1572: LD_VAR 0 1
1576: ARRAY
1577: PUSH
1578: LD_VAR 0 2
1582: ADD
1583: PPUSH
1584: CALL_OW 1
1588: ST_TO_ADDR
// end ;
1589: LD_VAR 0 3
1593: RET
// export function MC_SetDefenderList ( base , deflist ) ; begin
1594: LD_INT 0
1596: PPUSH
// mc_defender := Replace ( mc_defender , base , deflist ) ;
1597: LD_ADDR_EXP 17
1601: PUSH
1602: LD_EXP 17
1606: PPUSH
1607: LD_VAR 0 1
1611: PPUSH
1612: LD_VAR 0 2
1616: PPUSH
1617: CALL_OW 1
1621: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , base , deflist + 0 ) ;
1622: LD_ADDR_EXP 18
1626: PUSH
1627: LD_EXP 18
1631: PPUSH
1632: LD_VAR 0 1
1636: PPUSH
1637: LD_VAR 0 2
1641: PUSH
1642: LD_INT 0
1644: PLUS
1645: PPUSH
1646: CALL_OW 1
1650: ST_TO_ADDR
// end ;
1651: LD_VAR 0 3
1655: RET
// export function MC_SetDefenderLimit ( base , limit ) ; begin
1656: LD_INT 0
1658: PPUSH
// mc_defender_limit := Replace ( mc_defender_limit , base , limit ) ;
1659: LD_ADDR_EXP 18
1663: PUSH
1664: LD_EXP 18
1668: PPUSH
1669: LD_VAR 0 1
1673: PPUSH
1674: LD_VAR 0 2
1678: PPUSH
1679: CALL_OW 1
1683: ST_TO_ADDR
// end ;
1684: LD_VAR 0 3
1688: RET
// export function MC_PrepareAttack ( base , group , path , flags ) ; begin
1689: LD_INT 0
1691: PPUSH
// mc_attack := ReplaceIn ( mc_attack , [ base , mc_attack [ base ] + 1 ] , [ base , group , path , flags ] ) ;
1692: LD_ADDR_EXP 21
1696: PUSH
1697: LD_EXP 21
1701: PPUSH
1702: LD_VAR 0 1
1706: PUSH
1707: LD_EXP 21
1711: PUSH
1712: LD_VAR 0 1
1716: ARRAY
1717: PUSH
1718: LD_INT 1
1720: PLUS
1721: PUSH
1722: EMPTY
1723: LIST
1724: LIST
1725: PPUSH
1726: LD_VAR 0 1
1730: PUSH
1731: LD_VAR 0 2
1735: PUSH
1736: LD_VAR 0 3
1740: PUSH
1741: LD_VAR 0 4
1745: PUSH
1746: EMPTY
1747: LIST
1748: LIST
1749: LIST
1750: LIST
1751: PPUSH
1752: CALL 13095 0 3
1756: ST_TO_ADDR
// end ;
1757: LD_VAR 0 5
1761: RET
// export function MC_SetDepositsXY ( base , deposits_list ) ; begin
1762: LD_INT 0
1764: PPUSH
// mc_deposits_xy := Replace ( mc_deposits_xy , base , deposits_list ) ;
1765: LD_ADDR_EXP 22
1769: PUSH
1770: LD_EXP 22
1774: PPUSH
1775: LD_VAR 0 1
1779: PPUSH
1780: LD_VAR 0 2
1784: PPUSH
1785: CALL_OW 1
1789: ST_TO_ADDR
// end ;
1790: LD_VAR 0 3
1794: RET
// export function MC_SetTame ( base , area ) ; begin
1795: LD_INT 0
1797: PPUSH
// mc_can_tame := Replace ( mc_can_tame , base , area ) ;
1798: LD_ADDR_EXP 23
1802: PUSH
1803: LD_EXP 23
1807: PPUSH
1808: LD_VAR 0 1
1812: PPUSH
1813: LD_VAR 0 2
1817: PPUSH
1818: CALL_OW 1
1822: ST_TO_ADDR
// end ;
1823: LD_VAR 0 3
1827: RET
// export function MC_SetLabKind ( base , kinds ) ; var i ; begin
1828: LD_INT 0
1830: PPUSH
1831: PPUSH
// if not base or not kinds then
1832: LD_VAR 0 1
1836: NOT
1837: PUSH
1838: LD_VAR 0 2
1842: NOT
1843: OR
1844: IFFALSE 1848
// exit ;
1846: GO 1909
// for i in kinds do
1848: LD_ADDR_VAR 0 4
1852: PUSH
1853: LD_VAR 0 2
1857: PUSH
1858: FOR_IN
1859: IFFALSE 1907
// mc_lab_upgrade := ReplaceIn ( mc_lab_upgrade , [ base , mc_lab_upgrade [ base ] + 1 ] , i ) ;
1861: LD_ADDR_EXP 24
1865: PUSH
1866: LD_EXP 24
1870: PPUSH
1871: LD_VAR 0 1
1875: PUSH
1876: LD_EXP 24
1880: PUSH
1881: LD_VAR 0 1
1885: ARRAY
1886: PUSH
1887: LD_INT 1
1889: PLUS
1890: PUSH
1891: EMPTY
1892: LIST
1893: LIST
1894: PPUSH
1895: LD_VAR 0 4
1899: PPUSH
1900: CALL 13095 0 3
1904: ST_TO_ADDR
1905: GO 1858
1907: POP
1908: POP
// end ;
1909: LD_VAR 0 3
1913: RET
// export function MC_SetCratesArea ( base , areas ) ; begin
1914: LD_INT 0
1916: PPUSH
// if not mc_bases or not base or not areas then
1917: LD_EXP 6
1921: NOT
1922: PUSH
1923: LD_VAR 0 1
1927: NOT
1928: OR
1929: PUSH
1930: LD_VAR 0 2
1934: NOT
1935: OR
1936: IFFALSE 1940
// exit ;
1938: GO 1965
// mc_crates_area := Replace ( mc_crates_area , base , areas ) ;
1940: LD_ADDR_EXP 25
1944: PUSH
1945: LD_EXP 25
1949: PPUSH
1950: LD_VAR 0 1
1954: PPUSH
1955: LD_VAR 0 2
1959: PPUSH
1960: CALL_OW 1
1964: ST_TO_ADDR
// end ;
1965: LD_VAR 0 3
1969: RET
// export function MC_SetTeleportExit ( base , teleports_exit ) ; begin
1970: LD_INT 0
1972: PPUSH
// if not mc_bases or not base or not teleports_exit then
1973: LD_EXP 6
1977: NOT
1978: PUSH
1979: LD_VAR 0 1
1983: NOT
1984: OR
1985: PUSH
1986: LD_VAR 0 2
1990: NOT
1991: OR
1992: IFFALSE 1996
// exit ;
1994: GO 2021
// mc_teleport_exit := Replace ( mc_teleport_exit , base , teleports_exit ) ;
1996: LD_ADDR_EXP 26
2000: PUSH
2001: LD_EXP 26
2005: PPUSH
2006: LD_VAR 0 1
2010: PPUSH
2011: LD_VAR 0 2
2015: PPUSH
2016: CALL_OW 1
2020: ST_TO_ADDR
// end ;
2021: LD_VAR 0 3
2025: RET
// export function MC_SetFactoryExtension ( base , x , y , d , ext_list ) ; var i , tmp ; begin
2026: LD_INT 0
2028: PPUSH
2029: PPUSH
2030: PPUSH
// if not base or not ext_list then
2031: LD_VAR 0 1
2035: NOT
2036: PUSH
2037: LD_VAR 0 5
2041: NOT
2042: OR
2043: IFFALSE 2047
// exit ;
2045: GO 2220
// tmp := GetFacExtXYD ( x , y , d ) ;
2047: LD_ADDR_VAR 0 8
2051: PUSH
2052: LD_VAR 0 2
2056: PPUSH
2057: LD_VAR 0 3
2061: PPUSH
2062: LD_VAR 0 4
2066: PPUSH
2067: CALL 43072 0 3
2071: ST_TO_ADDR
// if not tmp then
2072: LD_VAR 0 8
2076: NOT
2077: IFFALSE 2081
// exit ;
2079: GO 2220
// for i in tmp do
2081: LD_ADDR_VAR 0 7
2085: PUSH
2086: LD_VAR 0 8
2090: PUSH
2091: FOR_IN
2092: IFFALSE 2218
// begin mc_build_list := Replace ( mc_build_list , base , Insert ( mc_build_list [ base ] , mc_build_list [ base ] + 1 , [ ext_list [ 1 ] , i [ 1 ] , i [ 2 ] , i [ 3 ] ] ) ) ;
2094: LD_ADDR_EXP 14
2098: PUSH
2099: LD_EXP 14
2103: PPUSH
2104: LD_VAR 0 1
2108: PPUSH
2109: LD_EXP 14
2113: PUSH
2114: LD_VAR 0 1
2118: ARRAY
2119: PPUSH
2120: LD_EXP 14
2124: PUSH
2125: LD_VAR 0 1
2129: ARRAY
2130: PUSH
2131: LD_INT 1
2133: PLUS
2134: PPUSH
2135: LD_VAR 0 5
2139: PUSH
2140: LD_INT 1
2142: ARRAY
2143: PUSH
2144: LD_VAR 0 7
2148: PUSH
2149: LD_INT 1
2151: ARRAY
2152: PUSH
2153: LD_VAR 0 7
2157: PUSH
2158: LD_INT 2
2160: ARRAY
2161: PUSH
2162: LD_VAR 0 7
2166: PUSH
2167: LD_INT 3
2169: ARRAY
2170: PUSH
2171: EMPTY
2172: LIST
2173: LIST
2174: LIST
2175: LIST
2176: PPUSH
2177: CALL_OW 2
2181: PPUSH
2182: CALL_OW 1
2186: ST_TO_ADDR
// ext_list := Delete ( ext_list , 1 ) ;
2187: LD_ADDR_VAR 0 5
2191: PUSH
2192: LD_VAR 0 5
2196: PPUSH
2197: LD_INT 1
2199: PPUSH
2200: CALL_OW 3
2204: ST_TO_ADDR
// if not ext_list then
2205: LD_VAR 0 5
2209: NOT
2210: IFFALSE 2216
// exit ;
2212: POP
2213: POP
2214: GO 2220
// end ;
2216: GO 2091
2218: POP
2219: POP
// end ;
2220: LD_VAR 0 6
2224: RET
// export function MC_SetAllowedTurretWeapons ( base , weapon_list ) ; begin
2225: LD_INT 0
2227: PPUSH
// if not mc_bases or not base or not weapon_list then
2228: LD_EXP 6
2232: NOT
2233: PUSH
2234: LD_VAR 0 1
2238: NOT
2239: OR
2240: PUSH
2241: LD_VAR 0 2
2245: NOT
2246: OR
2247: IFFALSE 2251
// exit ;
2249: GO 2276
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , base , weapon_list ) ;
2251: LD_ADDR_EXP 27
2255: PUSH
2256: LD_EXP 27
2260: PPUSH
2261: LD_VAR 0 1
2265: PPUSH
2266: LD_VAR 0 2
2270: PPUSH
2271: CALL_OW 1
2275: ST_TO_ADDR
// end ;
2276: LD_VAR 0 3
2280: RET
// export function MC_SetTechList ( base , tech_list ) ; begin
2281: LD_INT 0
2283: PPUSH
// if not mc_bases or not base or not tech_list then
2284: LD_EXP 6
2288: NOT
2289: PUSH
2290: LD_VAR 0 1
2294: NOT
2295: OR
2296: PUSH
2297: LD_VAR 0 2
2301: NOT
2302: OR
2303: IFFALSE 2307
// exit ;
2305: GO 2332
// mc_tech := Replace ( mc_tech , base , tech_list ) ;
2307: LD_ADDR_EXP 20
2311: PUSH
2312: LD_EXP 20
2316: PPUSH
2317: LD_VAR 0 1
2321: PPUSH
2322: LD_VAR 0 2
2326: PPUSH
2327: CALL_OW 1
2331: ST_TO_ADDR
// end ;
2332: LD_VAR 0 3
2336: RET
// export function MC_SetParkingArea ( base , parking_area ) ; begin
2337: LD_INT 0
2339: PPUSH
// if not parking_area or not base then
2340: LD_VAR 0 2
2344: NOT
2345: PUSH
2346: LD_VAR 0 1
2350: NOT
2351: OR
2352: IFFALSE 2356
// exit ;
2354: GO 2381
// mc_parking := Replace ( mc_parking , base , parking_area ) ;
2356: LD_ADDR_EXP 28
2360: PUSH
2361: LD_EXP 28
2365: PPUSH
2366: LD_VAR 0 1
2370: PPUSH
2371: LD_VAR 0 2
2375: PPUSH
2376: CALL_OW 1
2380: ST_TO_ADDR
// end ;
2381: LD_VAR 0 3
2385: RET
// export function MC_SetScanArea ( base , scan_area ) ; begin
2386: LD_INT 0
2388: PPUSH
// if not base or not scan_area then
2389: LD_VAR 0 1
2393: NOT
2394: PUSH
2395: LD_VAR 0 2
2399: NOT
2400: OR
2401: IFFALSE 2405
// exit ;
2403: GO 2430
// mc_scan_area := Replace ( mc_scan_area , base , scan_area ) ;
2405: LD_ADDR_EXP 29
2409: PUSH
2410: LD_EXP 29
2414: PPUSH
2415: LD_VAR 0 1
2419: PPUSH
2420: LD_VAR 0 2
2424: PPUSH
2425: CALL_OW 1
2429: ST_TO_ADDR
// end ; end_of_file
2430: LD_VAR 0 3
2434: RET
// export function MC_Monitor ( ) ; var i , active_players ; begin
2435: LD_INT 0
2437: PPUSH
2438: PPUSH
2439: PPUSH
// while mc_active do
2440: LD_EXP 4
2444: IFFALSE 2554
// begin wait ( 0 0$1 ) ;
2446: LD_INT 35
2448: PPUSH
2449: CALL_OW 67
// active_players := 0 ;
2453: LD_ADDR_VAR 0 3
2457: PUSH
2458: LD_INT 0
2460: ST_TO_ADDR
// for i := 1 to mc_bases do
2461: LD_ADDR_VAR 0 2
2465: PUSH
2466: DOUBLE
2467: LD_INT 1
2469: DEC
2470: ST_TO_ADDR
2471: LD_EXP 6
2475: PUSH
2476: FOR_TO
2477: IFFALSE 2535
// begin if MC_Exist ( i ) then
2479: LD_VAR 0 2
2483: PPUSH
2484: CALL 6471 0 1
2488: IFFALSE 2533
// begin MCE_SailEventCustom ( mce_monitor_base , i , 0 , 0 , 0 , 0 , 0 ) ;
2490: LD_EXP 2
2494: PPUSH
2495: LD_VAR 0 2
2499: PPUSH
2500: LD_INT 0
2502: PPUSH
2503: LD_INT 0
2505: PPUSH
2506: LD_INT 0
2508: PPUSH
2509: LD_INT 0
2511: PPUSH
2512: LD_INT 0
2514: PPUSH
2515: CALL 4765 0 7
// active_players := active_players + 1 ;
2519: LD_ADDR_VAR 0 3
2523: PUSH
2524: LD_VAR 0 3
2528: PUSH
2529: LD_INT 1
2531: PLUS
2532: ST_TO_ADDR
// end ; end ;
2533: GO 2476
2535: POP
2536: POP
// if not active_players then
2537: LD_VAR 0 3
2541: NOT
2542: IFFALSE 2552
// mc_active := false ;
2544: LD_ADDR_EXP 4
2548: PUSH
2549: LD_INT 0
2551: ST_TO_ADDR
// end ;
2552: GO 2440
// end ;
2554: LD_VAR 0 1
2558: RET
// export function MC_MonitorBase ( base ) ; begin
2559: LD_INT 0
2561: PPUSH
// if not mc_people [ base ] then
2562: LD_EXP 9
2566: PUSH
2567: LD_VAR 0 1
2571: ARRAY
2572: NOT
2573: IFFALSE 2598
// mc_bases := Replace ( mc_bases , base , 0 ) ;
2575: LD_ADDR_EXP 6
2579: PUSH
2580: LD_EXP 6
2584: PPUSH
2585: LD_VAR 0 1
2589: PPUSH
2590: LD_INT 0
2592: PPUSH
2593: CALL_OW 1
2597: ST_TO_ADDR
// mc_danger := Replace ( mc_danger , base , DangerInArea ( mc_bases [ base ] , mc_scan_area [ base ] ) ) ;
2598: LD_ADDR_EXP 30
2602: PUSH
2603: LD_EXP 30
2607: PPUSH
2608: LD_VAR 0 1
2612: PPUSH
2613: LD_EXP 6
2617: PUSH
2618: LD_VAR 0 1
2622: ARRAY
2623: PPUSH
2624: LD_EXP 29
2628: PUSH
2629: LD_VAR 0 1
2633: ARRAY
2634: PPUSH
2635: CALL 15745 0 2
2639: PPUSH
2640: CALL_OW 1
2644: ST_TO_ADDR
// if mc_danger [ base ] then
2645: LD_EXP 30
2649: PUSH
2650: LD_VAR 0 1
2654: ARRAY
2655: IFFALSE 2668
// MC_Defend ( base ) else
2657: LD_VAR 0 1
2661: PPUSH
2662: CALL 2682 0 1
2666: GO 2677
// MC_TaskManager ( base ) ;
2668: LD_VAR 0 1
2672: PPUSH
2673: CALL 2744 0 1
// end ;
2677: LD_VAR 0 2
2681: RET
// export function MC_Defend ( base ) ; var defender_vehicles ; begin
2682: LD_INT 0
2684: PPUSH
2685: PPUSH
// if mc_defense_status [ base ] then
2686: LD_EXP 16
2690: PUSH
2691: LD_VAR 0 1
2695: ARRAY
2696: IFFALSE 2700
// exit ;
2698: GO 2739
// mc_defense_status := Replace ( mc_defense_status , base , true ) ;
2700: LD_ADDR_EXP 16
2704: PUSH
2705: LD_EXP 16
2709: PPUSH
2710: LD_VAR 0 1
2714: PPUSH
2715: LD_INT 1
2717: PPUSH
2718: CALL_OW 1
2722: ST_TO_ADDR
// defender_vehicles := mc_defender [ base ] ;
2723: LD_ADDR_VAR 0 3
2727: PUSH
2728: LD_EXP 17
2732: PUSH
2733: LD_VAR 0 1
2737: ARRAY
2738: ST_TO_ADDR
// end ;
2739: LD_VAR 0 2
2743: RET
// export function MC_TaskManager ( base ) ; var crates_list ; begin
2744: LD_INT 0
2746: PPUSH
2747: PPUSH
// MC_CollectCrates ( base , GetListOfCratesInArea ( mc_crates_area [ base ] ) ) ;
2748: LD_VAR 0 1
2752: PPUSH
2753: LD_EXP 25
2757: PUSH
2758: LD_VAR 0 1
2762: ARRAY
2763: PPUSH
2764: CALL_OW 435
2768: PPUSH
2769: CALL 2787 0 2
// MC_Build ( base ) ;
2773: LD_VAR 0 1
2777: PPUSH
2778: CALL 4133 0 1
// end ;
2782: LD_VAR 0 2
2786: RET
// export function MC_CollectCrates ( base , crates ) ; var i , j , amount , cargo_bays , apes , engs , collectors , number_of_crates , driver , drivers , depot , mechanic_used ; begin
2787: LD_INT 0
2789: PPUSH
2790: PPUSH
2791: PPUSH
2792: PPUSH
2793: PPUSH
2794: PPUSH
2795: PPUSH
2796: PPUSH
2797: PPUSH
2798: PPUSH
2799: PPUSH
2800: PPUSH
2801: PPUSH
// if MCTM_HasActiveTask ( base , mctm_collect_crates ) or not crates or not MC_GetDepot ( base ) then
2802: LD_VAR 0 1
2806: PPUSH
2807: LD_EXP 36
2811: PPUSH
2812: CALL 7819 0 2
2816: PUSH
2817: LD_VAR 0 2
2821: NOT
2822: OR
2823: PUSH
2824: LD_VAR 0 1
2828: PPUSH
2829: CALL 7446 0 1
2833: NOT
2834: OR
2835: IFFALSE 2839
// exit ;
2837: GO 4128
// MCTM_SetActiveTask ( base , mctm_collect_crates ) ;
2839: LD_VAR 0 1
2843: PPUSH
2844: LD_EXP 36
2848: PPUSH
2849: CALL 7849 0 2
// collectors := [ ] ;
2853: LD_ADDR_VAR 0 10
2857: PUSH
2858: EMPTY
2859: ST_TO_ADDR
// cargo_bays := GetCargoBay ( mc_vehicles [ base ] ) ;
2860: LD_ADDR_VAR 0 7
2864: PUSH
2865: LD_EXP 11
2869: PUSH
2870: LD_VAR 0 1
2874: ARRAY
2875: PPUSH
2876: CALL 46695 0 1
2880: ST_TO_ADDR
// if cargo_bays then
2881: LD_VAR 0 7
2885: IFFALSE 3566
// begin collectors := collectors union cargo_bays ;
2887: LD_ADDR_VAR 0 10
2891: PUSH
2892: LD_VAR 0 10
2896: PUSH
2897: LD_VAR 0 7
2901: UNION
2902: ST_TO_ADDR
// while crates and collectors do
2903: LD_VAR 0 2
2907: PUSH
2908: LD_VAR 0 10
2912: AND
2913: IFFALSE 3463
// begin wait ( 0 0$1 ) ;
2915: LD_INT 35
2917: PPUSH
2918: CALL_OW 67
// for i in collectors do
2922: LD_ADDR_VAR 0 4
2926: PUSH
2927: LD_VAR 0 10
2931: PUSH
2932: FOR_IN
2933: IFFALSE 3459
// begin driver := 0 ;
2935: LD_ADDR_VAR 0 12
2939: PUSH
2940: LD_INT 0
2942: ST_TO_ADDR
// if GetControl ( i ) = control_manual and not IsDrivenBy ( i ) then
2943: LD_VAR 0 4
2947: PPUSH
2948: CALL_OW 263
2952: PUSH
2953: LD_INT 1
2955: EQUAL
2956: PUSH
2957: LD_VAR 0 4
2961: PPUSH
2962: CALL_OW 311
2966: NOT
2967: AND
2968: IFFALSE 3152
// begin driver := MC_GetOneByClass ( base , 3 , mct_none ) ;
2970: LD_ADDR_VAR 0 12
2974: PUSH
2975: LD_VAR 0 1
2979: PPUSH
2980: LD_INT 3
2982: PPUSH
2983: LD_EXP 31
2987: PPUSH
2988: CALL 7352 0 3
2992: ST_TO_ADDR
// if not driver then
2993: LD_VAR 0 12
2997: NOT
2998: IFFALSE 3067
// begin driver := MC_GetBestForClass ( base , 3 , 1 ) ;
3000: LD_ADDR_VAR 0 12
3004: PUSH
3005: LD_VAR 0 1
3009: PPUSH
3010: LD_INT 3
3012: PPUSH
3013: LD_INT 1
3015: PPUSH
3016: CALL 6511 0 3
3020: ST_TO_ADDR
// if driver then
3021: LD_VAR 0 12
3025: IFFALSE 3067
// begin driver := driver [ 1 ] ;
3027: LD_ADDR_VAR 0 12
3031: PUSH
3032: LD_VAR 0 12
3036: PUSH
3037: LD_INT 1
3039: ARRAY
3040: ST_TO_ADDR
// MC_ChangeClass ( base , 3 , driver ) ;
3041: LD_VAR 0 1
3045: PPUSH
3046: LD_INT 3
3048: PPUSH
3049: LD_VAR 0 12
3053: PPUSH
3054: CALL 6741 0 3
// AddComExitBuilding ( driver ) ;
3058: LD_VAR 0 12
3062: PPUSH
3063: CALL_OW 182
// end ; end ; if IsInUnit ( driver ) then
3067: LD_VAR 0 12
3071: PPUSH
3072: CALL_OW 310
3076: IFFALSE 3087
// ComExit ( driver ) ;
3078: LD_VAR 0 12
3082: PPUSH
3083: CALL 45824 0 1
// SetTag ( driver , mct_collect_crates ) ;
3087: LD_VAR 0 12
3091: PPUSH
3092: LD_EXP 34
3096: PPUSH
3097: CALL_OW 109
// if GetLives ( i ) < 1000 then
3101: LD_VAR 0 4
3105: PPUSH
3106: CALL_OW 256
3110: PUSH
3111: LD_INT 1000
3113: LESS
3114: IFFALSE 3130
// AddComRepairVehicle ( driver , i ) ;
3116: LD_VAR 0 12
3120: PPUSH
3121: LD_VAR 0 4
3125: PPUSH
3126: CALL_OW 189
// AddComEnterUnit ( driver , i ) ;
3130: LD_VAR 0 12
3134: PPUSH
3135: LD_VAR 0 4
3139: PPUSH
3140: CALL_OW 180
// mechanic_used := true ;
3144: LD_ADDR_VAR 0 15
3148: PUSH
3149: LD_INT 1
3151: ST_TO_ADDR
// end ; repeat wait ( 0 0$1 ) ;
3152: LD_INT 35
3154: PPUSH
3155: CALL_OW 67
// if IsDead ( i ) then
3159: LD_VAR 0 4
3163: PPUSH
3164: CALL_OW 301
3168: IFFALSE 3188
// begin collectors := collectors diff i ;
3170: LD_ADDR_VAR 0 10
3174: PUSH
3175: LD_VAR 0 10
3179: PUSH
3180: LD_VAR 0 4
3184: DIFF
3185: ST_TO_ADDR
// continue ;
3186: GO 3152
// end ; if GetEngine ( i ) = engine_combustion and GetFuel ( i ) < 20 then
3188: LD_VAR 0 4
3192: PPUSH
3193: CALL_OW 262
3197: PUSH
3198: LD_INT 1
3200: EQUAL
3201: PUSH
3202: LD_VAR 0 4
3206: PPUSH
3207: CALL_OW 261
3211: PUSH
3212: LD_INT 20
3214: LESS
3215: AND
3216: IFFALSE 3277
// begin depot := NearestUnitToUnit ( MC_GetDepot ( base ) , i ) ;
3218: LD_ADDR_VAR 0 14
3222: PUSH
3223: LD_VAR 0 1
3227: PPUSH
3228: CALL 7446 0 1
3232: PPUSH
3233: LD_VAR 0 4
3237: PPUSH
3238: CALL_OW 74
3242: ST_TO_ADDR
// if GetDistUnits ( i , depot ) < 6 then
3243: LD_VAR 0 4
3247: PPUSH
3248: LD_VAR 0 14
3252: PPUSH
3253: CALL_OW 296
3257: PUSH
3258: LD_INT 6
3260: LESS
3261: IFFALSE 3277
// ComMoveUnit ( i , depot ) ;
3263: LD_VAR 0 4
3267: PPUSH
3268: LD_VAR 0 14
3272: PPUSH
3273: CALL_OW 112
// end ; if GetControl ( i ) = control_manual then
3277: LD_VAR 0 4
3281: PPUSH
3282: CALL_OW 263
3286: PUSH
3287: LD_INT 1
3289: EQUAL
3290: IFFALSE 3355
// begin if not driver then
3292: LD_VAR 0 12
3296: NOT
3297: IFFALSE 3314
// driver := IsDrivenBy ( i ) ;
3299: LD_ADDR_VAR 0 12
3303: PUSH
3304: LD_VAR 0 4
3308: PPUSH
3309: CALL_OW 311
3313: ST_TO_ADDR
// if not HasTask ( driver ) then
3314: LD_VAR 0 12
3318: PPUSH
3319: CALL_OW 314
3323: NOT
3324: IFFALSE 3353
// ComCollect ( driver , crates [ 1 ] , crates [ 2 ] ) ;
3326: LD_VAR 0 12
3330: PPUSH
3331: LD_VAR 0 2
3335: PUSH
3336: LD_INT 1
3338: ARRAY
3339: PPUSH
3340: LD_VAR 0 2
3344: PUSH
3345: LD_INT 2
3347: ARRAY
3348: PPUSH
3349: CALL_OW 117
// end else
3353: GO 3394
// if not HasTask ( i ) then
3355: LD_VAR 0 4
3359: PPUSH
3360: CALL_OW 314
3364: NOT
3365: IFFALSE 3394
// ComCollect ( i , crates [ 1 ] , crates [ 2 ] ) ;
3367: LD_VAR 0 4
3371: PPUSH
3372: LD_VAR 0 2
3376: PUSH
3377: LD_INT 1
3379: ARRAY
3380: PPUSH
3381: LD_VAR 0 2
3385: PUSH
3386: LD_INT 2
3388: ARRAY
3389: PPUSH
3390: CALL_OW 117
// until not GetResourceAmountXY ( crates [ 1 ] , crates [ 2 ] ) ;
3394: LD_VAR 0 2
3398: PUSH
3399: LD_INT 1
3401: ARRAY
3402: PPUSH
3403: LD_VAR 0 2
3407: PUSH
3408: LD_INT 2
3410: ARRAY
3411: PPUSH
3412: CALL_OW 284
3416: NOT
3417: IFFALSE 3152
// for j := 1 to 2 do
3419: LD_ADDR_VAR 0 5
3423: PUSH
3424: DOUBLE
3425: LD_INT 1
3427: DEC
3428: ST_TO_ADDR
3429: LD_INT 2
3431: PUSH
3432: FOR_TO
3433: IFFALSE 3455
// crates := Delete ( crates , 1 ) ;
3435: LD_ADDR_VAR 0 2
3439: PUSH
3440: LD_VAR 0 2
3444: PPUSH
3445: LD_INT 1
3447: PPUSH
3448: CALL_OW 3
3452: ST_TO_ADDR
3453: GO 3432
3455: POP
3456: POP
// end ;
3457: GO 2932
3459: POP
3460: POP
// end ;
3461: GO 2903
// if mechanic_used then
3463: LD_VAR 0 15
3467: IFFALSE 3564
// begin repeat wait ( 0 0$1 ) ;
3469: LD_INT 35
3471: PPUSH
3472: CALL_OW 67
// until not GetCargo ( collectors , mat_cans ) or not collectors ;
3476: LD_VAR 0 10
3480: PPUSH
3481: LD_INT 1
3483: PPUSH
3484: CALL_OW 289
3488: NOT
3489: PUSH
3490: LD_VAR 0 10
3494: NOT
3495: OR
3496: IFFALSE 3469
// drivers := MCT_ResetTag ( base , mct_collect_crates ) ;
3498: LD_ADDR_VAR 0 13
3502: PUSH
3503: LD_VAR 0 1
3507: PPUSH
3508: LD_EXP 34
3512: PPUSH
3513: CALL 6356 0 2
3517: ST_TO_ADDR
// if drivers then
3518: LD_VAR 0 13
3522: IFFALSE 3550
// for i in drivers do
3524: LD_ADDR_VAR 0 4
3528: PUSH
3529: LD_VAR 0 13
3533: PUSH
3534: FOR_IN
3535: IFFALSE 3548
// ComExit ( i ) ;
3537: LD_VAR 0 4
3541: PPUSH
3542: CALL 45824 0 1
3546: GO 3534
3548: POP
3549: POP
// MCTM_DeleteActiveTask ( base , mctm_collect_crates ) ;
3550: LD_VAR 0 1
3554: PPUSH
3555: LD_EXP 36
3559: PPUSH
3560: CALL 7913 0 2
// end ; end else
3564: GO 4128
// begin apes := MC_GetByClass ( base , class_apeman_engineer , mct_none ) ;
3566: LD_ADDR_VAR 0 8
3570: PUSH
3571: LD_VAR 0 1
3575: PPUSH
3576: LD_INT 16
3578: PPUSH
3579: LD_EXP 31
3583: PPUSH
3584: CALL 7249 0 3
3588: ST_TO_ADDR
// if apes then
3589: LD_VAR 0 8
3593: IFFALSE 3611
// collectors := collectors union apes ;
3595: LD_ADDR_VAR 0 10
3599: PUSH
3600: LD_VAR 0 10
3604: PUSH
3605: LD_VAR 0 8
3609: UNION
3610: ST_TO_ADDR
// engs := MC_GetByClass ( base , class_engineer , mct_none ) ;
3611: LD_ADDR_VAR 0 9
3615: PUSH
3616: LD_VAR 0 1
3620: PPUSH
3621: LD_INT 2
3623: PPUSH
3624: LD_EXP 31
3628: PPUSH
3629: CALL 7249 0 3
3633: ST_TO_ADDR
// if engs then
3634: LD_VAR 0 9
3638: IFFALSE 3656
// collectors := collectors union engs ;
3640: LD_ADDR_VAR 0 10
3644: PUSH
3645: LD_VAR 0 10
3649: PUSH
3650: LD_VAR 0 9
3654: UNION
3655: ST_TO_ADDR
// if not collectors then
3656: LD_VAR 0 10
3660: NOT
3661: IFFALSE 3761
// begin engs := MC_GetBestForClass ( base , 2 , 3 ) ;
3663: LD_ADDR_VAR 0 9
3667: PUSH
3668: LD_VAR 0 1
3672: PPUSH
3673: LD_INT 2
3675: PPUSH
3676: LD_INT 3
3678: PPUSH
3679: CALL 6511 0 3
3683: ST_TO_ADDR
// if engs then
3684: LD_VAR 0 9
3688: IFFALSE 3707
// MC_ChangeClass ( base , 2 , engs ) ;
3690: LD_VAR 0 1
3694: PPUSH
3695: LD_INT 2
3697: PPUSH
3698: LD_VAR 0 9
3702: PPUSH
3703: CALL 6741 0 3
// repeat wait ( 0 0$1 ) ;
3707: LD_INT 35
3709: PPUSH
3710: CALL_OW 67
// if not UnitFilter ( engs , [ f_ok ] ) then
3714: LD_VAR 0 9
3718: PPUSH
3719: LD_INT 50
3721: PUSH
3722: EMPTY
3723: LIST
3724: PPUSH
3725: CALL_OW 72
3729: NOT
3730: IFFALSE 3734
// break ;
3732: GO 3761
// until UnitFilter ( engs , [ f_class , 2 ] ) = engs ;
3734: LD_VAR 0 9
3738: PPUSH
3739: LD_INT 25
3741: PUSH
3742: LD_INT 2
3744: PUSH
3745: EMPTY
3746: LIST
3747: LIST
3748: PPUSH
3749: CALL_OW 72
3753: PUSH
3754: LD_VAR 0 9
3758: EQUAL
3759: IFFALSE 3707
// end ; if not collectors then
3761: LD_VAR 0 10
3765: NOT
3766: IFFALSE 3784
// begin MCTM_DeleteActiveTask ( base , mctm_collect_crates ) ;
3768: LD_VAR 0 1
3772: PPUSH
3773: LD_EXP 36
3777: PPUSH
3778: CALL 7913 0 2
// exit ;
3782: GO 4128
// end ; if collectors > 5 then
3784: LD_VAR 0 10
3788: PUSH
3789: LD_INT 5
3791: GREATER
3792: IFFALSE 3848
// for i := collectors downto 5 do
3794: LD_ADDR_VAR 0 4
3798: PUSH
3799: DOUBLE
3800: LD_VAR 0 10
3804: INC
3805: ST_TO_ADDR
3806: LD_INT 5
3808: PUSH
3809: FOR_DOWNTO
3810: IFFALSE 3846
// begin SetTag ( i , 0 ) ;
3812: LD_VAR 0 4
3816: PPUSH
3817: LD_INT 0
3819: PPUSH
3820: CALL_OW 109
// collectors := Delete ( collectors , i ) ;
3824: LD_ADDR_VAR 0 10
3828: PUSH
3829: LD_VAR 0 10
3833: PPUSH
3834: LD_VAR 0 4
3838: PPUSH
3839: CALL_OW 3
3843: ST_TO_ADDR
// end ;
3844: GO 3809
3846: POP
3847: POP
// ComExitAll ( collectors ) ;
3848: LD_VAR 0 10
3852: PPUSH
3853: CALL 45907 0 1
// MCT_SetTag ( collectors , mct_collect_crates ) ;
3857: LD_VAR 0 10
3861: PPUSH
3862: LD_EXP 34
3866: PPUSH
3867: CALL 6422 0 2
// while crates and collectors do
3871: LD_VAR 0 2
3875: PUSH
3876: LD_VAR 0 10
3880: AND
3881: IFFALSE 4100
// begin wait ( 0 0$1 ) ;
3883: LD_INT 35
3885: PPUSH
3886: CALL_OW 67
// amount := GetResourceAmountXY ( crates [ 1 ] , crates [ 2 ] ) ;
3890: LD_ADDR_VAR 0 6
3894: PUSH
3895: LD_VAR 0 2
3899: PUSH
3900: LD_INT 1
3902: ARRAY
3903: PPUSH
3904: LD_VAR 0 2
3908: PUSH
3909: LD_INT 2
3911: ARRAY
3912: PPUSH
3913: CALL_OW 284
3917: ST_TO_ADDR
// j := 0 ;
3918: LD_ADDR_VAR 0 5
3922: PUSH
3923: LD_INT 0
3925: ST_TO_ADDR
// for i in collectors do
3926: LD_ADDR_VAR 0 4
3930: PUSH
3931: LD_VAR 0 10
3935: PUSH
3936: FOR_IN
3937: IFFALSE 4033
// begin if IsDead ( i ) then
3939: LD_VAR 0 4
3943: PPUSH
3944: CALL_OW 301
3948: IFFALSE 3966
// collectors := collectors diff i ;
3950: LD_ADDR_VAR 0 10
3954: PUSH
3955: LD_VAR 0 10
3959: PUSH
3960: LD_VAR 0 4
3964: DIFF
3965: ST_TO_ADDR
// if j < amount and not HasTask ( i ) then
3966: LD_VAR 0 5
3970: PUSH
3971: LD_VAR 0 6
3975: LESS
3976: PUSH
3977: LD_VAR 0 4
3981: PPUSH
3982: CALL_OW 314
3986: NOT
3987: AND
3988: IFFALSE 4031
// begin j := j + 1 ;
3990: LD_ADDR_VAR 0 5
3994: PUSH
3995: LD_VAR 0 5
3999: PUSH
4000: LD_INT 1
4002: PLUS
4003: ST_TO_ADDR
// ComCollect ( i , crates [ 1 ] , crates [ 2 ] ) ;
4004: LD_VAR 0 4
4008: PPUSH
4009: LD_VAR 0 2
4013: PUSH
4014: LD_INT 1
4016: ARRAY
4017: PPUSH
4018: LD_VAR 0 2
4022: PUSH
4023: LD_INT 2
4025: ARRAY
4026: PPUSH
4027: CALL_OW 117
// end ; end ;
4031: GO 3936
4033: POP
4034: POP
// if not GetResourceAmountXY ( crates [ 1 ] , crates [ 2 ] ) then
4035: LD_VAR 0 2
4039: PUSH
4040: LD_INT 1
4042: ARRAY
4043: PPUSH
4044: LD_VAR 0 2
4048: PUSH
4049: LD_INT 2
4051: ARRAY
4052: PPUSH
4053: CALL_OW 284
4057: NOT
4058: IFFALSE 4098
// for j := 1 to 2 do
4060: LD_ADDR_VAR 0 5
4064: PUSH
4065: DOUBLE
4066: LD_INT 1
4068: DEC
4069: ST_TO_ADDR
4070: LD_INT 2
4072: PUSH
4073: FOR_TO
4074: IFFALSE 4096
// crates := Delete ( crates , 1 ) ;
4076: LD_ADDR_VAR 0 2
4080: PUSH
4081: LD_VAR 0 2
4085: PPUSH
4086: LD_INT 1
4088: PPUSH
4089: CALL_OW 3
4093: ST_TO_ADDR
4094: GO 4073
4096: POP
4097: POP
// end ;
4098: GO 3871
// MCT_ResetTag ( base , mct_collect_crates ) ;
4100: LD_VAR 0 1
4104: PPUSH
4105: LD_EXP 34
4109: PPUSH
4110: CALL 6356 0 2
// MCTM_DeleteActiveTask ( base , mctm_collect_crates ) ;
4114: LD_VAR 0 1
4118: PPUSH
4119: LD_EXP 36
4123: PPUSH
4124: CALL 7913 0 2
// end ; end ;
4128: LD_VAR 0 3
4132: RET
// export function MC_Build ( base ) ; var depot , btype , x , y , d , engs ; begin
4133: LD_INT 0
4135: PPUSH
4136: PPUSH
4137: PPUSH
4138: PPUSH
4139: PPUSH
4140: PPUSH
4141: PPUSH
// if MCTM_HasActiveTask ( base , mctm_build ) or not mc_build_list [ base ] or not MC_GetDepot ( base ) then
4142: LD_VAR 0 1
4146: PPUSH
4147: LD_EXP 37
4151: PPUSH
4152: CALL 7819 0 2
4156: PUSH
4157: LD_EXP 14
4161: PUSH
4162: LD_VAR 0 1
4166: ARRAY
4167: NOT
4168: OR
4169: PUSH
4170: LD_VAR 0 1
4174: PPUSH
4175: CALL 7446 0 1
4179: NOT
4180: OR
4181: IFFALSE 4185
// exit ;
4183: GO 4736
// MCTM_SetActiveTask ( base , mctm_build ) ;
4185: LD_VAR 0 1
4189: PPUSH
4190: LD_EXP 37
4194: PPUSH
4195: CALL 7849 0 2
// engs := MC_GetByClass ( base , 2 , mct_none ) ;
4199: LD_ADDR_VAR 0 8
4203: PUSH
4204: LD_VAR 0 1
4208: PPUSH
4209: LD_INT 2
4211: PPUSH
4212: LD_EXP 31
4216: PPUSH
4217: CALL 7249 0 3
4221: ST_TO_ADDR
// if not engs then
4222: LD_VAR 0 8
4226: NOT
4227: IFFALSE 4339
// begin engs := MC_GetBestForClass ( base , 2 , 6 ) ;
4229: LD_ADDR_VAR 0 8
4233: PUSH
4234: LD_VAR 0 1
4238: PPUSH
4239: LD_INT 2
4241: PPUSH
4242: LD_INT 6
4244: PPUSH
4245: CALL 6511 0 3
4249: ST_TO_ADDR
// if not engs then
4250: LD_VAR 0 8
4254: NOT
4255: IFFALSE 4273
// begin MCTM_DeleteActiveTask ( base , mctm_build ) ;
4257: LD_VAR 0 1
4261: PPUSH
4262: LD_EXP 37
4266: PPUSH
4267: CALL 7913 0 2
// exit ;
4271: GO 4736
// end ; MC_ChangeClass ( base , 2 , engs ) ;
4273: LD_VAR 0 1
4277: PPUSH
4278: LD_INT 2
4280: PPUSH
4281: LD_VAR 0 8
4285: PPUSH
4286: CALL 6741 0 3
// repeat wait ( 0 0$1 ) ;
4290: LD_INT 35
4292: PPUSH
4293: CALL_OW 67
// if not mc_people [ base ] then
4297: LD_EXP 9
4301: PUSH
4302: LD_VAR 0 1
4306: ARRAY
4307: NOT
4308: IFFALSE 4312
// exit ;
4310: GO 4736
// until UnitFilter ( engs , [ f_class , 2 ] ) = engs ;
4312: LD_VAR 0 8
4316: PPUSH
4317: LD_INT 25
4319: PUSH
4320: LD_INT 2
4322: PUSH
4323: EMPTY
4324: LIST
4325: LIST
4326: PPUSH
4327: CALL_OW 72
4331: PUSH
4332: LD_VAR 0 8
4336: EQUAL
4337: IFFALSE 4290
// end ; ComExitAll ( engs ) ;
4339: LD_VAR 0 8
4343: PPUSH
4344: CALL 45907 0 1
// MCT_SetTag ( engs , mct_build ) ;
4348: LD_VAR 0 8
4352: PPUSH
4353: LD_EXP 33
4357: PPUSH
4358: CALL 6422 0 2
// btype := mc_build_list [ base ] [ 1 ] [ 1 ] ;
4362: LD_ADDR_VAR 0 4
4366: PUSH
4367: LD_EXP 14
4371: PUSH
4372: LD_VAR 0 1
4376: ARRAY
4377: PUSH
4378: LD_INT 1
4380: ARRAY
4381: PUSH
4382: LD_INT 1
4384: ARRAY
4385: ST_TO_ADDR
// x := mc_build_list [ base ] [ 1 ] [ 2 ] ;
4386: LD_ADDR_VAR 0 5
4390: PUSH
4391: LD_EXP 14
4395: PUSH
4396: LD_VAR 0 1
4400: ARRAY
4401: PUSH
4402: LD_INT 1
4404: ARRAY
4405: PUSH
4406: LD_INT 2
4408: ARRAY
4409: ST_TO_ADDR
// y := mc_build_list [ base ] [ 1 ] [ 3 ] ;
4410: LD_ADDR_VAR 0 6
4414: PUSH
4415: LD_EXP 14
4419: PUSH
4420: LD_VAR 0 1
4424: ARRAY
4425: PUSH
4426: LD_INT 1
4428: ARRAY
4429: PUSH
4430: LD_INT 3
4432: ARRAY
4433: ST_TO_ADDR
// d := mc_build_list [ base ] [ 1 ] [ 4 ] ;
4434: LD_ADDR_VAR 0 7
4438: PUSH
4439: LD_EXP 14
4443: PUSH
4444: LD_VAR 0 1
4448: ARRAY
4449: PUSH
4450: LD_INT 1
4452: ARRAY
4453: PUSH
4454: LD_INT 4
4456: ARRAY
4457: ST_TO_ADDR
// if GetType ( HexInfo ( x , y ) ) = unit_building then
4458: LD_VAR 0 5
4462: PPUSH
4463: LD_VAR 0 6
4467: PPUSH
4468: CALL_OW 428
4472: PPUSH
4473: CALL_OW 247
4477: PUSH
4478: LD_INT 3
4480: EQUAL
4481: IFFALSE 4516
// begin wait ( 0 0$1 ) ;
4483: LD_INT 35
4485: PPUSH
4486: CALL_OW 67
// ComComplete ( engs , HexInfo ( x , y ) ) ;
4490: LD_VAR 0 8
4494: PPUSH
4495: LD_VAR 0 5
4499: PPUSH
4500: LD_VAR 0 6
4504: PPUSH
4505: CALL_OW 428
4509: PPUSH
4510: CALL 15956 0 2
// end else
4514: GO 4736
// begin depot := NearestUnitToXY ( MC_GetDepot ( base ) , x , y ) ;
4516: LD_ADDR_VAR 0 3
4520: PUSH
4521: LD_VAR 0 1
4525: PPUSH
4526: CALL 7446 0 1
4530: PPUSH
4531: LD_VAR 0 5
4535: PPUSH
4536: LD_VAR 0 6
4540: PPUSH
4541: CALL_OW 73
4545: ST_TO_ADDR
// if not HexInfo ( x , y ) and CanBeBuilt ( depot , btype , x , y , d ) then
4546: LD_VAR 0 5
4550: PPUSH
4551: LD_VAR 0 6
4555: PPUSH
4556: CALL_OW 428
4560: NOT
4561: PUSH
4562: LD_VAR 0 3
4566: PPUSH
4567: LD_VAR 0 4
4571: PPUSH
4572: LD_VAR 0 5
4576: PPUSH
4577: LD_VAR 0 6
4581: PPUSH
4582: LD_VAR 0 7
4586: PPUSH
4587: CALL 21192 0 5
4591: AND
4592: IFFALSE 4625
// ComBuild ( engs , btype , x , y , d ) else
4594: LD_VAR 0 8
4598: PPUSH
4599: LD_VAR 0 4
4603: PPUSH
4604: LD_VAR 0 5
4608: PPUSH
4609: LD_VAR 0 6
4613: PPUSH
4614: LD_VAR 0 7
4618: PPUSH
4619: CALL_OW 145
4623: GO 4736
// begin if GetType ( HexInfo ( x , y ) ) <> unit_building then
4625: LD_VAR 0 5
4629: PPUSH
4630: LD_VAR 0 6
4634: PPUSH
4635: CALL_OW 428
4639: PPUSH
4640: CALL_OW 247
4644: PUSH
4645: LD_INT 3
4647: NONEQUAL
4648: IFFALSE 4708
// begin TryClearPlaceForBuilding ( btype , x , y , d , mc_buildings [ base ] , engs , mc_parking [ base ] ) ;
4650: LD_VAR 0 4
4654: PPUSH
4655: LD_VAR 0 5
4659: PPUSH
4660: LD_VAR 0 6
4664: PPUSH
4665: LD_VAR 0 7
4669: PPUSH
4670: LD_EXP 10
4674: PUSH
4675: LD_VAR 0 1
4679: ARRAY
4680: PPUSH
4681: LD_VAR 0 8
4685: PPUSH
4686: LD_EXP 28
4690: PUSH
4691: LD_VAR 0 1
4695: ARRAY
4696: PPUSH
4697: CALL 19946 0 7
// wait ( 0 0$10 ) ;
4701: LD_INT 350
4703: PPUSH
4704: CALL_OW 67
// end ; MCTM_DeleteActiveTask ( base , mctm_build ) ;
4708: LD_VAR 0 1
4712: PPUSH
4713: LD_EXP 37
4717: PPUSH
4718: CALL 7913 0 2
// MCT_ResetTag ( base , mctm_build ) ;
4722: LD_VAR 0 1
4726: PPUSH
4727: LD_EXP 37
4731: PPUSH
4732: CALL 6356 0 2
// end ; end ; end ; end_of_file
4736: LD_VAR 0 2
4740: RET
// export mce_start , mce_monitor_base , mce_ ; export function MCE_InitEvents ( ) ; begin
4741: LD_INT 0
4743: PPUSH
// mce_start := 1 ;
4744: LD_ADDR_EXP 1
4748: PUSH
4749: LD_INT 1
4751: ST_TO_ADDR
// mce_monitor_base := 2 ;
4752: LD_ADDR_EXP 2
4756: PUSH
4757: LD_INT 2
4759: ST_TO_ADDR
// end ;
4760: LD_VAR 0 1
4764: RET
// export function MCE_SailEventCustom ( event , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
4765: LD_INT 0
4767: PPUSH
// case event of mce_start :
4768: LD_VAR 0 1
4772: PUSH
4773: LD_EXP 1
4777: DOUBLE
4778: EQUAL
4779: IFTRUE 4783
4781: GO 4790
4783: POP
// MC_Monitor ( ) ; mce_monitor_base :
4784: CALL 2435 0 0
4788: GO 4813
4790: LD_EXP 2
4794: DOUBLE
4795: EQUAL
4796: IFTRUE 4800
4798: GO 4812
4800: POP
// MC_MonitorBase ( p1 ) ; end ;
4801: LD_VAR 0 2
4805: PPUSH
4806: CALL 2559 0 1
4810: GO 4813
4812: POP
// end ;
4813: LD_VAR 0 8
4817: RET
// export function MCE_ClassChanged ( unit , old_class , new_class ) ; begin
4818: LD_INT 0
4820: PPUSH
// SetTag ( unit , mct_none ) ;
4821: LD_VAR 0 1
4825: PPUSH
4826: LD_EXP 31
4830: PPUSH
4831: CALL_OW 109
// end ;
4835: LD_VAR 0 4
4839: RET
// export function MCE_UnitDestroyed ( un ) ; begin
4840: LD_INT 0
4842: PPUSH
// case GetType ( un ) of unit_human :
4843: LD_VAR 0 1
4847: PPUSH
4848: CALL_OW 247
4852: PUSH
4853: LD_INT 1
4855: DOUBLE
4856: EQUAL
4857: IFTRUE 4861
4859: GO 4873
4861: POP
// MCE_HumanKilled ( un ) ; unit_building :
4862: LD_VAR 0 1
4866: PPUSH
4867: CALL 4899 0 1
4871: GO 4894
4873: LD_INT 3
4875: DOUBLE
4876: EQUAL
4877: IFTRUE 4881
4879: GO 4893
4881: POP
// MCE_BuildingDestroyed ( un ) ; end ;
4882: LD_VAR 0 1
4886: PPUSH
4887: CALL 5456 0 1
4891: GO 4894
4893: POP
// end ;
4894: LD_VAR 0 2
4898: RET
// export function MCE_HumanKilled ( un ) ; var i ; begin
4899: LD_INT 0
4901: PPUSH
4902: PPUSH
// for i := 1 to mc_people do
4903: LD_ADDR_VAR 0 3
4907: PUSH
4908: DOUBLE
4909: LD_INT 1
4911: DEC
4912: ST_TO_ADDR
4913: LD_EXP 9
4917: PUSH
4918: FOR_TO
4919: IFFALSE 4978
// if un in mc_people [ i ] then
4921: LD_VAR 0 1
4925: PUSH
4926: LD_EXP 9
4930: PUSH
4931: LD_VAR 0 3
4935: ARRAY
4936: IN
4937: IFFALSE 4976
// mc_people := Replace ( mc_people , i , mc_people [ i ] diff un ) ;
4939: LD_ADDR_EXP 9
4943: PUSH
4944: LD_EXP 9
4948: PPUSH
4949: LD_VAR 0 3
4953: PPUSH
4954: LD_EXP 9
4958: PUSH
4959: LD_VAR 0 3
4963: ARRAY
4964: PUSH
4965: LD_VAR 0 1
4969: DIFF
4970: PPUSH
4971: CALL_OW 1
4975: ST_TO_ADDR
4976: GO 4918
4978: POP
4979: POP
// end ;
4980: LD_VAR 0 2
4984: RET
// export function MCE_EvacuateVehicle ( driver , vehicle , p1 , p2 ) ; var base ; begin
4985: LD_INT 0
4987: PPUSH
4988: PPUSH
// if GetTag ( driver ) = mct_collect_crates then
4989: LD_VAR 0 1
4993: PPUSH
4994: CALL_OW 110
4998: PUSH
4999: LD_EXP 34
5003: EQUAL
5004: IFFALSE 5053
// begin base := MC_GetHumanBase ( driver ) ;
5006: LD_ADDR_VAR 0 6
5010: PUSH
5011: LD_VAR 0 1
5015: PPUSH
5016: CALL 6678 0 1
5020: ST_TO_ADDR
// if base then
5021: LD_VAR 0 6
5025: IFFALSE 5053
// begin SetTag ( driver , 0 ) ;
5027: LD_VAR 0 1
5031: PPUSH
5032: LD_INT 0
5034: PPUSH
5035: CALL_OW 109
// MC_Retreat ( base , driver ) ;
5039: LD_VAR 0 6
5043: PPUSH
5044: LD_VAR 0 1
5048: PPUSH
5049: CALL 7703 0 2
// end ; end ; end ;
5053: LD_VAR 0 5
5057: RET
// export function MCE_BuildingComplete ( building ) ; var base , btype , x , y , d ; begin
5058: LD_INT 0
5060: PPUSH
5061: PPUSH
5062: PPUSH
5063: PPUSH
5064: PPUSH
5065: PPUSH
// btype := GetBType ( building ) ;
5066: LD_ADDR_VAR 0 4
5070: PUSH
5071: LD_VAR 0 1
5075: PPUSH
5076: CALL_OW 266
5080: ST_TO_ADDR
// x := GetX ( building ) ;
5081: LD_ADDR_VAR 0 5
5085: PUSH
5086: LD_VAR 0 1
5090: PPUSH
5091: CALL_OW 250
5095: ST_TO_ADDR
// y := GetY ( building ) ;
5096: LD_ADDR_VAR 0 6
5100: PUSH
5101: LD_VAR 0 1
5105: PPUSH
5106: CALL_OW 251
5110: ST_TO_ADDR
// d := GetDir ( building ) ;
5111: LD_ADDR_VAR 0 7
5115: PUSH
5116: LD_VAR 0 1
5120: PPUSH
5121: CALL_OW 254
5125: ST_TO_ADDR
// for base := 1 to mc_build_list do
5126: LD_ADDR_VAR 0 3
5130: PUSH
5131: DOUBLE
5132: LD_INT 1
5134: DEC
5135: ST_TO_ADDR
5136: LD_EXP 14
5140: PUSH
5141: FOR_TO
5142: IFFALSE 5449
// begin if not mc_build_list [ base ] then
5144: LD_EXP 14
5148: PUSH
5149: LD_VAR 0 3
5153: ARRAY
5154: NOT
5155: IFFALSE 5159
// continue ;
5157: GO 5141
// if CompareArrayValues ( [ btype , x , y , d ] , mc_build_list [ base ] [ 1 ] ) and GetSide ( building ) = mc_bases [ base ] then
5159: LD_VAR 0 4
5163: PUSH
5164: LD_VAR 0 5
5168: PUSH
5169: LD_VAR 0 6
5173: PUSH
5174: LD_VAR 0 7
5178: PUSH
5179: EMPTY
5180: LIST
5181: LIST
5182: LIST
5183: LIST
5184: PPUSH
5185: LD_EXP 14
5189: PUSH
5190: LD_VAR 0 3
5194: ARRAY
5195: PUSH
5196: LD_INT 1
5198: ARRAY
5199: PPUSH
5200: CALL 19370 0 2
5204: PUSH
5205: LD_VAR 0 1
5209: PPUSH
5210: CALL_OW 255
5214: PUSH
5215: LD_EXP 6
5219: PUSH
5220: LD_VAR 0 3
5224: ARRAY
5225: EQUAL
5226: AND
5227: IFFALSE 5447
// begin if mc_build_list [ base ] [ 1 ] > 4 then
5229: LD_EXP 14
5233: PUSH
5234: LD_VAR 0 3
5238: ARRAY
5239: PUSH
5240: LD_INT 1
5242: ARRAY
5243: PUSH
5244: LD_INT 4
5246: GREATER
5247: IFFALSE 5320
// begin repeat wait ( 0 0$1 ) ;
5249: LD_INT 35
5251: PPUSH
5252: CALL_OW 67
// until not UpgradeCost ( mc_build_list [ base ] [ 1 ] [ 5 ] ) or not IsDead ( building ) ;
5256: LD_EXP 14
5260: PUSH
5261: LD_VAR 0 3
5265: ARRAY
5266: PUSH
5267: LD_INT 1
5269: ARRAY
5270: PUSH
5271: LD_INT 5
5273: ARRAY
5274: PPUSH
5275: CALL 19606 0 1
5279: NOT
5280: PUSH
5281: LD_VAR 0 1
5285: PPUSH
5286: CALL_OW 301
5290: NOT
5291: OR
5292: IFFALSE 5249
// if IsDead ( building ) then
5294: LD_VAR 0 1
5298: PPUSH
5299: CALL_OW 301
5303: IFFALSE 5309
// exit ;
5305: POP
5306: POP
5307: GO 5451
// ComUpgrade ( building ) ;
5309: LD_VAR 0 1
5313: PPUSH
5314: CALL_OW 146
// end else
5318: GO 5359
// mc_build_list := Replace ( mc_build_list , base , Delete ( mc_build_list [ base ] , 1 ) ) ;
5320: LD_ADDR_EXP 14
5324: PUSH
5325: LD_EXP 14
5329: PPUSH
5330: LD_VAR 0 3
5334: PPUSH
5335: LD_EXP 14
5339: PUSH
5340: LD_VAR 0 3
5344: ARRAY
5345: PPUSH
5346: LD_INT 1
5348: PPUSH
5349: CALL_OW 3
5353: PPUSH
5354: CALL_OW 1
5358: ST_TO_ADDR
// mc_buildings := Replace ( mc_buildings , base , Replace ( mc_buildings [ base ] , mc_buildings [ base ] + 1 , building ) ) ;
5359: LD_ADDR_EXP 10
5363: PUSH
5364: LD_EXP 10
5368: PPUSH
5369: LD_VAR 0 3
5373: PPUSH
5374: LD_EXP 10
5378: PUSH
5379: LD_VAR 0 3
5383: ARRAY
5384: PPUSH
5385: LD_EXP 10
5389: PUSH
5390: LD_VAR 0 3
5394: ARRAY
5395: PUSH
5396: LD_INT 1
5398: PLUS
5399: PPUSH
5400: LD_VAR 0 1
5404: PPUSH
5405: CALL_OW 1
5409: PPUSH
5410: CALL_OW 1
5414: ST_TO_ADDR
// MCTM_DeleteActiveTask ( base , mctm_build ) ;
5415: LD_VAR 0 3
5419: PPUSH
5420: LD_EXP 37
5424: PPUSH
5425: CALL 7913 0 2
// MCT_ResetTag ( base , mctm_build ) ;
5429: LD_VAR 0 3
5433: PPUSH
5434: LD_EXP 37
5438: PPUSH
5439: CALL 6356 0 2
// exit ;
5443: POP
5444: POP
5445: GO 5451
// end ; end ;
5447: GO 5141
5449: POP
5450: POP
// end ;
5451: LD_VAR 0 2
5455: RET
// export function MCE_BuildingDestroyed ( building ) ; var base , x , y , d , btype ; begin
5456: LD_INT 0
5458: PPUSH
5459: PPUSH
5460: PPUSH
5461: PPUSH
5462: PPUSH
5463: PPUSH
// btype := GetBType ( building ) ;
5464: LD_ADDR_VAR 0 7
5468: PUSH
5469: LD_VAR 0 1
5473: PPUSH
5474: CALL_OW 266
5478: ST_TO_ADDR
// x := GetX ( building ) ;
5479: LD_ADDR_VAR 0 4
5483: PUSH
5484: LD_VAR 0 1
5488: PPUSH
5489: CALL_OW 250
5493: ST_TO_ADDR
// y := GetY ( building ) ;
5494: LD_ADDR_VAR 0 5
5498: PUSH
5499: LD_VAR 0 1
5503: PPUSH
5504: CALL_OW 251
5508: ST_TO_ADDR
// d := GetDir ( building ) ;
5509: LD_ADDR_VAR 0 6
5513: PUSH
5514: LD_VAR 0 1
5518: PPUSH
5519: CALL_OW 254
5523: ST_TO_ADDR
// for base := 1 to mc_buildings do
5524: LD_ADDR_VAR 0 3
5528: PUSH
5529: DOUBLE
5530: LD_INT 1
5532: DEC
5533: ST_TO_ADDR
5534: LD_EXP 10
5538: PUSH
5539: FOR_TO
5540: IFFALSE 5770
// begin if not mc_buildings [ base ] then
5542: LD_EXP 10
5546: PUSH
5547: LD_VAR 0 3
5551: ARRAY
5552: NOT
5553: IFFALSE 5557
// continue ;
5555: GO 5539
// if building in mc_buildings [ base ] then
5557: LD_VAR 0 1
5561: PUSH
5562: LD_EXP 10
5566: PUSH
5567: LD_VAR 0 3
5571: ARRAY
5572: IN
5573: IFFALSE 5768
// begin mc_buildings := Replace ( mc_buildings , base , mc_buildings [ base ] diff building ) ;
5575: LD_ADDR_EXP 10
5579: PUSH
5580: LD_EXP 10
5584: PPUSH
5585: LD_VAR 0 3
5589: PPUSH
5590: LD_EXP 10
5594: PUSH
5595: LD_VAR 0 3
5599: ARRAY
5600: PUSH
5601: LD_VAR 0 1
5605: DIFF
5606: PPUSH
5607: CALL_OW 1
5611: ST_TO_ADDR
// if mc_build_list [ base ] then
5612: LD_EXP 14
5616: PUSH
5617: LD_VAR 0 3
5621: ARRAY
5622: IFFALSE 5706
// if mc_build_list [ base ] [ 1 ] [ 1 ] = btype and mc_build_list [ base ] [ 1 ] [ 2 ] = x and mc_build_list [ base ] [ 1 ] [ 3 ] = y then
5624: LD_EXP 14
5628: PUSH
5629: LD_VAR 0 3
5633: ARRAY
5634: PUSH
5635: LD_INT 1
5637: ARRAY
5638: PUSH
5639: LD_INT 1
5641: ARRAY
5642: PUSH
5643: LD_VAR 0 7
5647: EQUAL
5648: PUSH
5649: LD_EXP 14
5653: PUSH
5654: LD_VAR 0 3
5658: ARRAY
5659: PUSH
5660: LD_INT 1
5662: ARRAY
5663: PUSH
5664: LD_INT 2
5666: ARRAY
5667: PUSH
5668: LD_VAR 0 4
5672: EQUAL
5673: AND
5674: PUSH
5675: LD_EXP 14
5679: PUSH
5680: LD_VAR 0 3
5684: ARRAY
5685: PUSH
5686: LD_INT 1
5688: ARRAY
5689: PUSH
5690: LD_INT 3
5692: ARRAY
5693: PUSH
5694: LD_VAR 0 5
5698: EQUAL
5699: AND
5700: IFFALSE 5706
// exit ;
5702: POP
5703: POP
5704: GO 5772
// mc_build_list := Replace ( mc_build_list , base , mc_build_list [ base ] ^ [ btype , x , y , d ] ) ;
5706: LD_ADDR_EXP 14
5710: PUSH
5711: LD_EXP 14
5715: PPUSH
5716: LD_VAR 0 3
5720: PPUSH
5721: LD_EXP 14
5725: PUSH
5726: LD_VAR 0 3
5730: ARRAY
5731: PUSH
5732: LD_VAR 0 7
5736: PUSH
5737: LD_VAR 0 4
5741: PUSH
5742: LD_VAR 0 5
5746: PUSH
5747: LD_VAR 0 6
5751: PUSH
5752: EMPTY
5753: LIST
5754: LIST
5755: LIST
5756: LIST
5757: ADD
5758: PPUSH
5759: CALL_OW 1
5763: ST_TO_ADDR
// exit ;
5764: POP
5765: POP
5766: GO 5772
// end ; end ;
5768: GO 5539
5770: POP
5771: POP
// end ;
5772: LD_VAR 0 2
5776: RET
// export function MCE_BuildingUpgradeComplete ( building ) ; var base , btype , x , y , d ; begin
5777: LD_INT 0
5779: PPUSH
5780: PPUSH
5781: PPUSH
5782: PPUSH
5783: PPUSH
5784: PPUSH
// btype := GetBType ( building ) ;
5785: LD_ADDR_VAR 0 4
5789: PUSH
5790: LD_VAR 0 1
5794: PPUSH
5795: CALL_OW 266
5799: ST_TO_ADDR
// x := GetX ( building ) ;
5800: LD_ADDR_VAR 0 5
5804: PUSH
5805: LD_VAR 0 1
5809: PPUSH
5810: CALL_OW 250
5814: ST_TO_ADDR
// y := GetY ( building ) ;
5815: LD_ADDR_VAR 0 6
5819: PUSH
5820: LD_VAR 0 1
5824: PPUSH
5825: CALL_OW 251
5829: ST_TO_ADDR
// d := GetDir ( building ) ;
5830: LD_ADDR_VAR 0 7
5834: PUSH
5835: LD_VAR 0 1
5839: PPUSH
5840: CALL_OW 254
5844: ST_TO_ADDR
// for base = 1 to mc_build_list do
5845: LD_ADDR_VAR 0 3
5849: PUSH
5850: DOUBLE
5851: LD_INT 1
5853: DEC
5854: ST_TO_ADDR
5855: LD_EXP 14
5859: PUSH
5860: FOR_TO
5861: IFFALSE 6031
// begin if not mc_build_list [ base ] then
5863: LD_EXP 14
5867: PUSH
5868: LD_VAR 0 3
5872: ARRAY
5873: NOT
5874: IFFALSE 5878
// continue ;
5876: GO 5860
// if CompareArrayValues ( [ btype - 1 , x , y , d , btype ] , mc_build_list [ base ] [ 1 ] ) and GetSide ( building ) = mc_bases [ base ] then
5878: LD_VAR 0 4
5882: PUSH
5883: LD_INT 1
5885: MINUS
5886: PUSH
5887: LD_VAR 0 5
5891: PUSH
5892: LD_VAR 0 6
5896: PUSH
5897: LD_VAR 0 7
5901: PUSH
5902: LD_VAR 0 4
5906: PUSH
5907: EMPTY
5908: LIST
5909: LIST
5910: LIST
5911: LIST
5912: LIST
5913: PPUSH
5914: LD_EXP 14
5918: PUSH
5919: LD_VAR 0 3
5923: ARRAY
5924: PUSH
5925: LD_INT 1
5927: ARRAY
5928: PPUSH
5929: CALL 19370 0 2
5933: PUSH
5934: LD_VAR 0 1
5938: PPUSH
5939: CALL_OW 255
5943: PUSH
5944: LD_EXP 6
5948: PUSH
5949: LD_VAR 0 3
5953: ARRAY
5954: EQUAL
5955: AND
5956: IFFALSE 6029
// begin mc_build_list := Replace ( mc_build_list , base , Delete ( mc_build_list [ base ] , 1 ) ) ;
5958: LD_ADDR_EXP 14
5962: PUSH
5963: LD_EXP 14
5967: PPUSH
5968: LD_VAR 0 3
5972: PPUSH
5973: LD_EXP 14
5977: PUSH
5978: LD_VAR 0 3
5982: ARRAY
5983: PPUSH
5984: LD_INT 1
5986: PPUSH
5987: CALL_OW 3
5991: PPUSH
5992: CALL_OW 1
5996: ST_TO_ADDR
// MCTM_DeleteActiveTask ( base , mctm_build ) ;
5997: LD_VAR 0 3
6001: PPUSH
6002: LD_EXP 37
6006: PPUSH
6007: CALL 7913 0 2
// MCT_ResetTag ( base , mctm_build ) ;
6011: LD_VAR 0 3
6015: PPUSH
6016: LD_EXP 37
6020: PPUSH
6021: CALL 6356 0 2
// exit ;
6025: POP
6026: POP
6027: GO 6033
// end ; end ;
6029: GO 5860
6031: POP
6032: POP
// end ; end_of_file
6033: LD_VAR 0 2
6037: RET
// export mc_active , mc_debug , mc_bases , mc_tag , mc_task , mc_people , mc_buildings , mc_vehicles , mc_mines , mc_minefields , mc_build_list , mc_produce_list , mc_defense_status , mc_defender , mc_defender_limit , mc_ape , mc_tech , mc_attack , mc_deposits_xy , mc_can_tame , mc_lab_upgrade , mc_crates_area , mc_teleport_exit , mc_allowed_tower_weapons , mc_parking , mc_scan_area , mc_danger ; export function MC_InitVariables ( ) ; begin
6038: LD_INT 0
6040: PPUSH
// mc_bases := [ ] ;
6041: LD_ADDR_EXP 6
6045: PUSH
6046: EMPTY
6047: ST_TO_ADDR
// mc_tag := [ ] ;
6048: LD_ADDR_EXP 7
6052: PUSH
6053: EMPTY
6054: ST_TO_ADDR
// mc_task := [ ] ;
6055: LD_ADDR_EXP 8
6059: PUSH
6060: EMPTY
6061: ST_TO_ADDR
// mc_people := [ ] ;
6062: LD_ADDR_EXP 9
6066: PUSH
6067: EMPTY
6068: ST_TO_ADDR
// mc_buildings := [ ] ;
6069: LD_ADDR_EXP 10
6073: PUSH
6074: EMPTY
6075: ST_TO_ADDR
// mc_vehicles := [ ] ;
6076: LD_ADDR_EXP 11
6080: PUSH
6081: EMPTY
6082: ST_TO_ADDR
// mc_mines := [ ] ;
6083: LD_ADDR_EXP 12
6087: PUSH
6088: EMPTY
6089: ST_TO_ADDR
// mc_minefields := [ ] ;
6090: LD_ADDR_EXP 13
6094: PUSH
6095: EMPTY
6096: ST_TO_ADDR
// mc_build_list := [ ] ;
6097: LD_ADDR_EXP 14
6101: PUSH
6102: EMPTY
6103: ST_TO_ADDR
// mc_produce_list := [ ] ;
6104: LD_ADDR_EXP 15
6108: PUSH
6109: EMPTY
6110: ST_TO_ADDR
// mc_defense_status := [ ] ;
6111: LD_ADDR_EXP 16
6115: PUSH
6116: EMPTY
6117: ST_TO_ADDR
// mc_defender := [ ] ;
6118: LD_ADDR_EXP 17
6122: PUSH
6123: EMPTY
6124: ST_TO_ADDR
// mc_defender_limit := [ ] ;
6125: LD_ADDR_EXP 18
6129: PUSH
6130: EMPTY
6131: ST_TO_ADDR
// mc_ape := [ ] ;
6132: LD_ADDR_EXP 19
6136: PUSH
6137: EMPTY
6138: ST_TO_ADDR
// mc_tech := [ ] ;
6139: LD_ADDR_EXP 20
6143: PUSH
6144: EMPTY
6145: ST_TO_ADDR
// mc_attack := [ ] ;
6146: LD_ADDR_EXP 21
6150: PUSH
6151: EMPTY
6152: ST_TO_ADDR
// mc_deposits_xy := [ ] ;
6153: LD_ADDR_EXP 22
6157: PUSH
6158: EMPTY
6159: ST_TO_ADDR
// mc_can_tame := [ ] ;
6160: LD_ADDR_EXP 23
6164: PUSH
6165: EMPTY
6166: ST_TO_ADDR
// mc_crates_area := [ ] ;
6167: LD_ADDR_EXP 25
6171: PUSH
6172: EMPTY
6173: ST_TO_ADDR
// mc_teleport_exit := [ ] ;
6174: LD_ADDR_EXP 26
6178: PUSH
6179: EMPTY
6180: ST_TO_ADDR
// mc_allowed_tower_weapons := [ ] ;
6181: LD_ADDR_EXP 27
6185: PUSH
6186: EMPTY
6187: ST_TO_ADDR
// mc_parking := [ ] ;
6188: LD_ADDR_EXP 28
6192: PUSH
6193: EMPTY
6194: ST_TO_ADDR
// mc_scan_area := [ ] ;
6195: LD_ADDR_EXP 29
6199: PUSH
6200: EMPTY
6201: ST_TO_ADDR
// mc_danger := [ ] ;
6202: LD_ADDR_EXP 30
6206: PUSH
6207: EMPTY
6208: ST_TO_ADDR
// end ; end_of_file
6209: LD_VAR 0 1
6213: RET
// export mct_none , mct_change_class , mct_build , mct_collect_crates , mct_heal ; export function MCT_InitTags ; begin
6214: LD_INT 0
6216: PPUSH
// mct_none := 0 ;
6217: LD_ADDR_EXP 31
6221: PUSH
6222: LD_INT 0
6224: ST_TO_ADDR
// mct_change_class := 1 ;
6225: LD_ADDR_EXP 32
6229: PUSH
6230: LD_INT 1
6232: ST_TO_ADDR
// mct_build := 2 ;
6233: LD_ADDR_EXP 33
6237: PUSH
6238: LD_INT 2
6240: ST_TO_ADDR
// mct_collect_crates := 3 ;
6241: LD_ADDR_EXP 34
6245: PUSH
6246: LD_INT 3
6248: ST_TO_ADDR
// mct_heal := 4 ;
6249: LD_ADDR_EXP 35
6253: PUSH
6254: LD_INT 4
6256: ST_TO_ADDR
// end ;
6257: LD_VAR 0 1
6261: RET
// export function MCT_GetByTag ( base , tag ) ; var i ; begin
6262: LD_INT 0
6264: PPUSH
6265: PPUSH
// result := [ ] ;
6266: LD_ADDR_VAR 0 3
6270: PUSH
6271: EMPTY
6272: ST_TO_ADDR
// if not base then
6273: LD_VAR 0 1
6277: NOT
6278: IFFALSE 6282
// exit ;
6280: GO 6351
// for i in mc_people [ base ] do
6282: LD_ADDR_VAR 0 4
6286: PUSH
6287: LD_EXP 9
6291: PUSH
6292: LD_VAR 0 1
6296: ARRAY
6297: PUSH
6298: FOR_IN
6299: IFFALSE 6349
// if GetTag ( i ) = tag then
6301: LD_VAR 0 4
6305: PPUSH
6306: CALL_OW 110
6310: PUSH
6311: LD_VAR 0 2
6315: EQUAL
6316: IFFALSE 6347
// result := Replace ( result , result + 1 , i ) ;
6318: LD_ADDR_VAR 0 3
6322: PUSH
6323: LD_VAR 0 3
6327: PPUSH
6328: LD_VAR 0 3
6332: PUSH
6333: LD_INT 1
6335: PLUS
6336: PPUSH
6337: LD_VAR 0 4
6341: PPUSH
6342: CALL_OW 1
6346: ST_TO_ADDR
6347: GO 6298
6349: POP
6350: POP
// end ;
6351: LD_VAR 0 3
6355: RET
// export function MCT_ResetTag ( base , tag ) ; var i ; begin
6356: LD_INT 0
6358: PPUSH
6359: PPUSH
// result := MCT_GetByTag ( base , tag ) ;
6360: LD_ADDR_VAR 0 3
6364: PUSH
6365: LD_VAR 0 1
6369: PPUSH
6370: LD_VAR 0 2
6374: PPUSH
6375: CALL 6262 0 2
6379: ST_TO_ADDR
// if result then
6380: LD_VAR 0 3
6384: IFFALSE 6417
// for i in result do
6386: LD_ADDR_VAR 0 4
6390: PUSH
6391: LD_VAR 0 3
6395: PUSH
6396: FOR_IN
6397: IFFALSE 6415
// SetTag ( i , mct_none ) ;
6399: LD_VAR 0 4
6403: PPUSH
6404: LD_EXP 31
6408: PPUSH
6409: CALL_OW 109
6413: GO 6396
6415: POP
6416: POP
// end ;
6417: LD_VAR 0 3
6421: RET
// export function MCT_SetTag ( units , tag ) ; var i ; begin
6422: LD_INT 0
6424: PPUSH
6425: PPUSH
// if not units then
6426: LD_VAR 0 1
6430: NOT
6431: IFFALSE 6435
// exit ;
6433: GO 6466
// for i in units do
6435: LD_ADDR_VAR 0 4
6439: PUSH
6440: LD_VAR 0 1
6444: PUSH
6445: FOR_IN
6446: IFFALSE 6464
// SetTag ( i , tag ) ;
6448: LD_VAR 0 4
6452: PPUSH
6453: LD_VAR 0 2
6457: PPUSH
6458: CALL_OW 109
6462: GO 6445
6464: POP
6465: POP
// end ; end_of_file
6466: LD_VAR 0 3
6470: RET
// export function MC_Exist ( base ) ; begin
6471: LD_INT 0
6473: PPUSH
// result := mc_bases >= base and mc_bases [ base ] > 0 ;
6474: LD_ADDR_VAR 0 2
6478: PUSH
6479: LD_EXP 6
6483: PUSH
6484: LD_VAR 0 1
6488: GREATEREQUAL
6489: PUSH
6490: LD_EXP 6
6494: PUSH
6495: LD_VAR 0 1
6499: ARRAY
6500: PUSH
6501: LD_INT 0
6503: GREATER
6504: AND
6505: ST_TO_ADDR
// end ;
6506: LD_VAR 0 2
6510: RET
// export function MC_GetBestForClass ( base , class , amount ) ; var i , units ; begin
6511: LD_INT 0
6513: PPUSH
6514: PPUSH
6515: PPUSH
// result := [ ] ;
6516: LD_ADDR_VAR 0 4
6520: PUSH
6521: EMPTY
6522: ST_TO_ADDR
// units := SortBySkill ( UnitFilter ( mc_people [ base ] , [ f_not , [ f_class , class ] ] ) , class ) ;
6523: LD_ADDR_VAR 0 6
6527: PUSH
6528: LD_EXP 9
6532: PUSH
6533: LD_VAR 0 1
6537: ARRAY
6538: PPUSH
6539: LD_INT 3
6541: PUSH
6542: LD_INT 25
6544: PUSH
6545: LD_VAR 0 2
6549: PUSH
6550: EMPTY
6551: LIST
6552: LIST
6553: PUSH
6554: EMPTY
6555: LIST
6556: LIST
6557: PPUSH
6558: CALL_OW 72
6562: PPUSH
6563: LD_VAR 0 2
6567: PPUSH
6568: CALL 43942 0 2
6572: ST_TO_ADDR
// if not units then
6573: LD_VAR 0 6
6577: NOT
6578: IFFALSE 6582
// exit ;
6580: GO 6673
// for i := 1 to amount do
6582: LD_ADDR_VAR 0 5
6586: PUSH
6587: DOUBLE
6588: LD_INT 1
6590: DEC
6591: ST_TO_ADDR
6592: LD_VAR 0 3
6596: PUSH
6597: FOR_TO
6598: IFFALSE 6671
// begin if i > units then
6600: LD_VAR 0 5
6604: PUSH
6605: LD_VAR 0 6
6609: GREATER
6610: IFFALSE 6616
// exit ;
6612: POP
6613: POP
6614: GO 6673
// if not GetTag ( units [ i ] ) then
6616: LD_VAR 0 6
6620: PUSH
6621: LD_VAR 0 5
6625: ARRAY
6626: PPUSH
6627: CALL_OW 110
6631: NOT
6632: IFFALSE 6669
// result := Replace ( result , result + 1 , units [ i ] ) ;
6634: LD_ADDR_VAR 0 4
6638: PUSH
6639: LD_VAR 0 4
6643: PPUSH
6644: LD_VAR 0 4
6648: PUSH
6649: LD_INT 1
6651: PLUS
6652: PPUSH
6653: LD_VAR 0 6
6657: PUSH
6658: LD_VAR 0 5
6662: ARRAY
6663: PPUSH
6664: CALL_OW 1
6668: ST_TO_ADDR
// end ;
6669: GO 6597
6671: POP
6672: POP
// end ;
6673: LD_VAR 0 4
6677: RET
// export function MC_GetHumanBase ( human ) ; var i ; begin
6678: LD_INT 0
6680: PPUSH
6681: PPUSH
// for i := 1 to mc_people do
6682: LD_ADDR_VAR 0 3
6686: PUSH
6687: DOUBLE
6688: LD_INT 1
6690: DEC
6691: ST_TO_ADDR
6692: LD_EXP 9
6696: PUSH
6697: FOR_TO
6698: IFFALSE 6734
// if human in mc_people [ i ] then
6700: LD_VAR 0 1
6704: PUSH
6705: LD_EXP 9
6709: PUSH
6710: LD_VAR 0 3
6714: ARRAY
6715: IN
6716: IFFALSE 6732
// begin result := i ;
6718: LD_ADDR_VAR 0 2
6722: PUSH
6723: LD_VAR 0 3
6727: ST_TO_ADDR
// exit ;
6728: POP
6729: POP
6730: GO 6736
// end ;
6732: GO 6697
6734: POP
6735: POP
// end ;
6736: LD_VAR 0 2
6740: RET
// export function MC_ChangeClass ( base , class , units ) ; var i , buildings , b ; begin
6741: LD_INT 0
6743: PPUSH
6744: PPUSH
6745: PPUSH
6746: PPUSH
// if not base or not units then
6747: LD_VAR 0 1
6751: NOT
6752: PUSH
6753: LD_VAR 0 3
6757: NOT
6758: OR
6759: IFFALSE 6763
// exit ;
6761: GO 7244
// case class of 1 , 5 , 6 , 7 , 8 :
6763: LD_VAR 0 2
6767: PUSH
6768: LD_INT 1
6770: DOUBLE
6771: EQUAL
6772: IFTRUE 6800
6774: LD_INT 5
6776: DOUBLE
6777: EQUAL
6778: IFTRUE 6800
6780: LD_INT 6
6782: DOUBLE
6783: EQUAL
6784: IFTRUE 6800
6786: LD_INT 7
6788: DOUBLE
6789: EQUAL
6790: IFTRUE 6800
6792: LD_INT 8
6794: DOUBLE
6795: EQUAL
6796: IFTRUE 6800
6798: GO 6852
6800: POP
// buildings := UnitFilter ( mc_buildings [ base ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ; 2 :
6801: LD_ADDR_VAR 0 6
6805: PUSH
6806: LD_EXP 10
6810: PUSH
6811: LD_VAR 0 1
6815: ARRAY
6816: PPUSH
6817: LD_INT 2
6819: PUSH
6820: LD_INT 30
6822: PUSH
6823: LD_INT 4
6825: PUSH
6826: EMPTY
6827: LIST
6828: LIST
6829: PUSH
6830: LD_INT 30
6832: PUSH
6833: LD_INT 5
6835: PUSH
6836: EMPTY
6837: LIST
6838: LIST
6839: PUSH
6840: EMPTY
6841: LIST
6842: LIST
6843: LIST
6844: PPUSH
6845: CALL_OW 72
6849: ST_TO_ADDR
6850: GO 7044
6852: LD_INT 2
6854: DOUBLE
6855: EQUAL
6856: IFTRUE 6860
6858: GO 6912
6860: POP
// buildings := UnitFilter ( mc_buildings [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ; 3 :
6861: LD_ADDR_VAR 0 6
6865: PUSH
6866: LD_EXP 10
6870: PUSH
6871: LD_VAR 0 1
6875: ARRAY
6876: PPUSH
6877: LD_INT 2
6879: PUSH
6880: LD_INT 30
6882: PUSH
6883: LD_INT 0
6885: PUSH
6886: EMPTY
6887: LIST
6888: LIST
6889: PUSH
6890: LD_INT 30
6892: PUSH
6893: LD_INT 1
6895: PUSH
6896: EMPTY
6897: LIST
6898: LIST
6899: PUSH
6900: EMPTY
6901: LIST
6902: LIST
6903: LIST
6904: PPUSH
6905: CALL_OW 72
6909: ST_TO_ADDR
6910: GO 7044
6912: LD_INT 3
6914: DOUBLE
6915: EQUAL
6916: IFTRUE 6920
6918: GO 6972
6920: POP
// buildings := UnitFilter ( mc_buildings [ base ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ) ; 4 :
6921: LD_ADDR_VAR 0 6
6925: PUSH
6926: LD_EXP 10
6930: PUSH
6931: LD_VAR 0 1
6935: ARRAY
6936: PPUSH
6937: LD_INT 2
6939: PUSH
6940: LD_INT 30
6942: PUSH
6943: LD_INT 2
6945: PUSH
6946: EMPTY
6947: LIST
6948: LIST
6949: PUSH
6950: LD_INT 30
6952: PUSH
6953: LD_INT 3
6955: PUSH
6956: EMPTY
6957: LIST
6958: LIST
6959: PUSH
6960: EMPTY
6961: LIST
6962: LIST
6963: LIST
6964: PPUSH
6965: CALL_OW 72
6969: ST_TO_ADDR
6970: GO 7044
6972: LD_INT 4
6974: DOUBLE
6975: EQUAL
6976: IFTRUE 6980
6978: GO 7043
6980: POP
// buildings := UnitFilter ( mc_buildings [ base ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ; end ;
6981: LD_ADDR_VAR 0 6
6985: PUSH
6986: LD_EXP 10
6990: PUSH
6991: LD_VAR 0 1
6995: ARRAY
6996: PPUSH
6997: LD_INT 2
6999: PUSH
7000: LD_INT 30
7002: PUSH
7003: LD_INT 6
7005: PUSH
7006: EMPTY
7007: LIST
7008: LIST
7009: PUSH
7010: LD_INT 30
7012: PUSH
7013: LD_INT 7
7015: PUSH
7016: EMPTY
7017: LIST
7018: LIST
7019: PUSH
7020: LD_INT 30
7022: PUSH
7023: LD_INT 8
7025: PUSH
7026: EMPTY
7027: LIST
7028: LIST
7029: PUSH
7030: EMPTY
7031: LIST
7032: LIST
7033: LIST
7034: LIST
7035: PPUSH
7036: CALL_OW 72
7040: ST_TO_ADDR
7041: GO 7044
7043: POP
// if not buildings then
7044: LD_VAR 0 6
7048: NOT
7049: IFFALSE 7053
// exit ;
7051: GO 7244
// for i := 1 to units do
7053: LD_ADDR_VAR 0 5
7057: PUSH
7058: DOUBLE
7059: LD_INT 1
7061: DEC
7062: ST_TO_ADDR
7063: LD_VAR 0 3
7067: PUSH
7068: FOR_TO
7069: IFFALSE 7242
// begin if GetClass ( units [ i ] ) = class then
7071: LD_VAR 0 3
7075: PUSH
7076: LD_VAR 0 5
7080: ARRAY
7081: PPUSH
7082: CALL_OW 257
7086: PUSH
7087: LD_VAR 0 2
7091: EQUAL
7092: IFFALSE 7096
// continue ;
7094: GO 7068
// SetTag ( units [ i ] , mct_change_class ) ;
7096: LD_VAR 0 3
7100: PUSH
7101: LD_VAR 0 5
7105: ARRAY
7106: PPUSH
7107: LD_EXP 32
7111: PPUSH
7112: CALL_OW 109
// if buildings > i div 6 then
7116: LD_VAR 0 6
7120: PUSH
7121: LD_VAR 0 5
7125: PUSH
7126: LD_INT 6
7128: DIV
7129: GREATER
7130: IFFALSE 7154
// b := buildings [ i div 6 ] else
7132: LD_ADDR_VAR 0 7
7136: PUSH
7137: LD_VAR 0 6
7141: PUSH
7142: LD_VAR 0 5
7146: PUSH
7147: LD_INT 6
7149: DIV
7150: ARRAY
7151: ST_TO_ADDR
7152: GO 7168
// b := buildings [ 1 ] ;
7154: LD_ADDR_VAR 0 7
7158: PUSH
7159: LD_VAR 0 6
7163: PUSH
7164: LD_INT 1
7166: ARRAY
7167: ST_TO_ADDR
// if IsInUnit ( units [ i ] ) then
7168: LD_VAR 0 3
7172: PUSH
7173: LD_VAR 0 5
7177: ARRAY
7178: PPUSH
7179: CALL_OW 310
7183: IFFALSE 7200
// ComExit ( units [ i ] ) ;
7185: LD_VAR 0 3
7189: PUSH
7190: LD_VAR 0 5
7194: ARRAY
7195: PPUSH
7196: CALL 45824 0 1
// AddComEnterUnit ( units [ i ] , b ) ;
7200: LD_VAR 0 3
7204: PUSH
7205: LD_VAR 0 5
7209: ARRAY
7210: PPUSH
7211: LD_VAR 0 7
7215: PPUSH
7216: CALL_OW 180
// AddComChangeProfession ( units [ i ] , class ) ;
7220: LD_VAR 0 3
7224: PUSH
7225: LD_VAR 0 5
7229: ARRAY
7230: PPUSH
7231: LD_VAR 0 2
7235: PPUSH
7236: CALL_OW 183
// end ;
7240: GO 7068
7242: POP
7243: POP
// end ;
7244: LD_VAR 0 4
7248: RET
// export function MC_GetByClass ( base , class , tag ) ; var i ; begin
7249: LD_INT 0
7251: PPUSH
7252: PPUSH
// result := UnitFilter ( mc_people [ base ] , [ f_class , class ] ) ;
7253: LD_ADDR_VAR 0 4
7257: PUSH
7258: LD_EXP 9
7262: PUSH
7263: LD_VAR 0 1
7267: ARRAY
7268: PPUSH
7269: LD_INT 25
7271: PUSH
7272: LD_VAR 0 2
7276: PUSH
7277: EMPTY
7278: LIST
7279: LIST
7280: PPUSH
7281: CALL_OW 72
7285: ST_TO_ADDR
// if tag > - 1 then
7286: LD_VAR 0 3
7290: PUSH
7291: LD_INT 1
7293: NEG
7294: GREATER
7295: IFFALSE 7347
// for i in result do
7297: LD_ADDR_VAR 0 5
7301: PUSH
7302: LD_VAR 0 4
7306: PUSH
7307: FOR_IN
7308: IFFALSE 7345
// if GetTag ( i ) <> tag then
7310: LD_VAR 0 5
7314: PPUSH
7315: CALL_OW 110
7319: PUSH
7320: LD_VAR 0 3
7324: NONEQUAL
7325: IFFALSE 7343
// result := result diff i ;
7327: LD_ADDR_VAR 0 4
7331: PUSH
7332: LD_VAR 0 4
7336: PUSH
7337: LD_VAR 0 5
7341: DIFF
7342: ST_TO_ADDR
7343: GO 7307
7345: POP
7346: POP
// end ;
7347: LD_VAR 0 4
7351: RET
// export function MC_GetOneByClass ( base , class , tag ) ; begin
7352: LD_INT 0
7354: PPUSH
// result := MC_GetByClass ( base , class , tag ) ;
7355: LD_ADDR_VAR 0 4
7359: PUSH
7360: LD_VAR 0 1
7364: PPUSH
7365: LD_VAR 0 2
7369: PPUSH
7370: LD_VAR 0 3
7374: PPUSH
7375: CALL 7249 0 3
7379: ST_TO_ADDR
// if result then
7380: LD_VAR 0 4
7384: IFFALSE 7400
// result := result [ 1 ] ;
7386: LD_ADDR_VAR 0 4
7390: PUSH
7391: LD_VAR 0 4
7395: PUSH
7396: LD_INT 1
7398: ARRAY
7399: ST_TO_ADDR
// end ;
7400: LD_VAR 0 4
7404: RET
// export function MC_GetBuilding ( base , btype ) ; begin
7405: LD_INT 0
7407: PPUSH
// result := UnitFilter ( mc_buildings [ base ] , [ f_btype , btype ] ) ;
7408: LD_ADDR_VAR 0 3
7412: PUSH
7413: LD_EXP 10
7417: PUSH
7418: LD_VAR 0 1
7422: ARRAY
7423: PPUSH
7424: LD_INT 30
7426: PUSH
7427: LD_VAR 0 2
7431: PUSH
7432: EMPTY
7433: LIST
7434: LIST
7435: PPUSH
7436: CALL_OW 72
7440: ST_TO_ADDR
// end ;
7441: LD_VAR 0 3
7445: RET
// export function MC_GetDepot ( base ) ; begin
7446: LD_INT 0
7448: PPUSH
// result := UnitFilter ( mc_buildings [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
7449: LD_ADDR_VAR 0 2
7453: PUSH
7454: LD_EXP 10
7458: PUSH
7459: LD_VAR 0 1
7463: ARRAY
7464: PPUSH
7465: LD_INT 2
7467: PUSH
7468: LD_INT 30
7470: PUSH
7471: LD_INT 0
7473: PUSH
7474: EMPTY
7475: LIST
7476: LIST
7477: PUSH
7478: LD_INT 30
7480: PUSH
7481: LD_INT 1
7483: PUSH
7484: EMPTY
7485: LIST
7486: LIST
7487: PUSH
7488: EMPTY
7489: LIST
7490: LIST
7491: LIST
7492: PPUSH
7493: CALL_OW 72
7497: ST_TO_ADDR
// end ;
7498: LD_VAR 0 2
7502: RET
// export function MC_GetVehicles ( base , onlyCombat ) ; begin
7503: LD_INT 0
7505: PPUSH
// result := mc_vehicles [ base ] ;
7506: LD_ADDR_VAR 0 3
7510: PUSH
7511: LD_EXP 11
7515: PUSH
7516: LD_VAR 0 1
7520: ARRAY
7521: ST_TO_ADDR
// if onlyCombat then
7522: LD_VAR 0 2
7526: IFFALSE 7698
// result := result diff UnitFilter ( result , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , us_crane ] , [ f_weapon , ru_crane ] , [ f_weapon , ar_crane ] , [ f_weapon , us_bulldozer ] , [ f_weapon , ru_bulldozer ] , [ f_weapon , ru_radar ] , [ f_weapon , ar_control_tower ] , [ f_weapon , ru_siberium_rocket ] , [ f_weapon , us_siberium_rocket ] ] ) ;
7528: LD_ADDR_VAR 0 3
7532: PUSH
7533: LD_VAR 0 3
7537: PUSH
7538: LD_VAR 0 3
7542: PPUSH
7543: LD_INT 2
7545: PUSH
7546: LD_INT 34
7548: PUSH
7549: LD_INT 12
7551: PUSH
7552: EMPTY
7553: LIST
7554: LIST
7555: PUSH
7556: LD_INT 34
7558: PUSH
7559: LD_INT 51
7561: PUSH
7562: EMPTY
7563: LIST
7564: LIST
7565: PUSH
7566: LD_INT 34
7568: PUSH
7569: LD_INT 89
7571: PUSH
7572: EMPTY
7573: LIST
7574: LIST
7575: PUSH
7576: LD_INT 34
7578: PUSH
7579: LD_INT 32
7581: PUSH
7582: EMPTY
7583: LIST
7584: LIST
7585: PUSH
7586: LD_INT 34
7588: PUSH
7589: LD_INT 13
7591: PUSH
7592: EMPTY
7593: LIST
7594: LIST
7595: PUSH
7596: LD_INT 34
7598: PUSH
7599: LD_INT 52
7601: PUSH
7602: EMPTY
7603: LIST
7604: LIST
7605: PUSH
7606: LD_INT 34
7608: PUSH
7609: LD_INT 88
7611: PUSH
7612: EMPTY
7613: LIST
7614: LIST
7615: PUSH
7616: LD_INT 34
7618: PUSH
7619: LD_INT 14
7621: PUSH
7622: EMPTY
7623: LIST
7624: LIST
7625: PUSH
7626: LD_INT 34
7628: PUSH
7629: LD_INT 53
7631: PUSH
7632: EMPTY
7633: LIST
7634: LIST
7635: PUSH
7636: LD_INT 34
7638: PUSH
7639: LD_INT 98
7641: PUSH
7642: EMPTY
7643: LIST
7644: LIST
7645: PUSH
7646: LD_INT 34
7648: PUSH
7649: LD_INT 31
7651: PUSH
7652: EMPTY
7653: LIST
7654: LIST
7655: PUSH
7656: LD_INT 34
7658: PUSH
7659: LD_INT 48
7661: PUSH
7662: EMPTY
7663: LIST
7664: LIST
7665: PUSH
7666: LD_INT 34
7668: PUSH
7669: LD_INT 8
7671: PUSH
7672: EMPTY
7673: LIST
7674: LIST
7675: PUSH
7676: EMPTY
7677: LIST
7678: LIST
7679: LIST
7680: LIST
7681: LIST
7682: LIST
7683: LIST
7684: LIST
7685: LIST
7686: LIST
7687: LIST
7688: LIST
7689: LIST
7690: LIST
7691: PPUSH
7692: CALL_OW 72
7696: DIFF
7697: ST_TO_ADDR
// end ;
7698: LD_VAR 0 3
7702: RET
// export function MC_Retreat ( base , unit ) ; var depot ; begin
7703: LD_INT 0
7705: PPUSH
7706: PPUSH
// if not base or not unit then
7707: LD_VAR 0 1
7711: NOT
7712: PUSH
7713: LD_VAR 0 2
7717: NOT
7718: OR
7719: IFFALSE 7723
// exit ;
7721: GO 7790
// depot := NearestUnitToUnit ( MC_GetDepot ( base ) , unit ) ;
7723: LD_ADDR_VAR 0 4
7727: PUSH
7728: LD_VAR 0 1
7732: PPUSH
7733: CALL 7446 0 1
7737: PPUSH
7738: LD_VAR 0 2
7742: PPUSH
7743: CALL_OW 74
7747: ST_TO_ADDR
// if depot then
7748: LD_VAR 0 4
7752: IFFALSE 7770
// ComStandNearbyBuilding ( unit , depot ) else
7754: LD_VAR 0 2
7758: PPUSH
7759: LD_VAR 0 4
7763: PPUSH
7764: CALL 9522 0 2
7768: GO 7790
// ComMoveToArea ( unit , mc_scan_area [ base ] ) ;
7770: LD_VAR 0 2
7774: PPUSH
7775: LD_EXP 29
7779: PUSH
7780: LD_VAR 0 1
7784: ARRAY
7785: PPUSH
7786: CALL_OW 113
// end ; end_of_file
7790: LD_VAR 0 3
7794: RET
// export mctm_collect_crates , mctm_build , mctm_ ; export function MCTM_InitTaskManager ( ) ; begin
7795: LD_INT 0
7797: PPUSH
// mctm_collect_crates := 1 ;
7798: LD_ADDR_EXP 36
7802: PUSH
7803: LD_INT 1
7805: ST_TO_ADDR
// mctm_build := 2 ;
7806: LD_ADDR_EXP 37
7810: PUSH
7811: LD_INT 2
7813: ST_TO_ADDR
// end ;
7814: LD_VAR 0 1
7818: RET
// export function MCTM_HasActiveTask ( base , task ) ; begin
7819: LD_INT 0
7821: PPUSH
// result := task in mc_task [ base ] ;
7822: LD_ADDR_VAR 0 3
7826: PUSH
7827: LD_VAR 0 2
7831: PUSH
7832: LD_EXP 8
7836: PUSH
7837: LD_VAR 0 1
7841: ARRAY
7842: IN
7843: ST_TO_ADDR
// end ;
7844: LD_VAR 0 3
7848: RET
// export function MCTM_SetActiveTask ( base , task ) ; begin
7849: LD_INT 0
7851: PPUSH
// mc_task := Replace ( mc_task , base , Replace ( mc_task [ base ] , mc_task [ base ] + 1 , task ) ) ;
7852: LD_ADDR_EXP 8
7856: PUSH
7857: LD_EXP 8
7861: PPUSH
7862: LD_VAR 0 1
7866: PPUSH
7867: LD_EXP 8
7871: PUSH
7872: LD_VAR 0 1
7876: ARRAY
7877: PPUSH
7878: LD_EXP 8
7882: PUSH
7883: LD_VAR 0 1
7887: ARRAY
7888: PUSH
7889: LD_INT 1
7891: PLUS
7892: PPUSH
7893: LD_VAR 0 2
7897: PPUSH
7898: CALL_OW 1
7902: PPUSH
7903: CALL_OW 1
7907: ST_TO_ADDR
// end ;
7908: LD_VAR 0 3
7912: RET
// export function MCTM_DeleteActiveTask ( base , task ) ; begin
7913: LD_INT 0
7915: PPUSH
// mc_task := Replace ( mc_task , base , mc_task [ base ] diff task ) ;
7916: LD_ADDR_EXP 8
7920: PUSH
7921: LD_EXP 8
7925: PPUSH
7926: LD_VAR 0 1
7930: PPUSH
7931: LD_EXP 8
7935: PUSH
7936: LD_VAR 0 1
7940: ARRAY
7941: PUSH
7942: LD_VAR 0 2
7946: DIFF
7947: PPUSH
7948: CALL_OW 1
7952: ST_TO_ADDR
// end ; end_of_file
7953: LD_VAR 0 3
7957: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
7958: LD_INT 0
7960: PPUSH
7961: PPUSH
// if exist_mode then
7962: LD_VAR 0 2
7966: IFFALSE 7991
// unit := CreateCharacter ( prefix & ident ) else
7968: LD_ADDR_VAR 0 5
7972: PUSH
7973: LD_VAR 0 3
7977: PUSH
7978: LD_VAR 0 1
7982: STR
7983: PPUSH
7984: CALL_OW 34
7988: ST_TO_ADDR
7989: GO 8006
// unit := NewCharacter ( ident ) ;
7991: LD_ADDR_VAR 0 5
7995: PUSH
7996: LD_VAR 0 1
8000: PPUSH
8001: CALL_OW 25
8005: ST_TO_ADDR
// result := unit ;
8006: LD_ADDR_VAR 0 4
8010: PUSH
8011: LD_VAR 0 5
8015: ST_TO_ADDR
// end ;
8016: LD_VAR 0 4
8020: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
8021: LD_INT 0
8023: PPUSH
8024: PPUSH
// if not side or not nation then
8025: LD_VAR 0 1
8029: NOT
8030: PUSH
8031: LD_VAR 0 2
8035: NOT
8036: OR
8037: IFFALSE 8041
// exit ;
8039: GO 8809
// case nation of nation_american :
8041: LD_VAR 0 2
8045: PUSH
8046: LD_INT 1
8048: DOUBLE
8049: EQUAL
8050: IFTRUE 8054
8052: GO 8268
8054: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
8055: LD_ADDR_VAR 0 4
8059: PUSH
8060: LD_INT 35
8062: PUSH
8063: LD_INT 45
8065: PUSH
8066: LD_INT 46
8068: PUSH
8069: LD_INT 47
8071: PUSH
8072: LD_INT 82
8074: PUSH
8075: LD_INT 83
8077: PUSH
8078: LD_INT 84
8080: PUSH
8081: LD_INT 85
8083: PUSH
8084: LD_INT 86
8086: PUSH
8087: LD_INT 1
8089: PUSH
8090: LD_INT 2
8092: PUSH
8093: LD_INT 6
8095: PUSH
8096: LD_INT 15
8098: PUSH
8099: LD_INT 16
8101: PUSH
8102: LD_INT 7
8104: PUSH
8105: LD_INT 12
8107: PUSH
8108: LD_INT 13
8110: PUSH
8111: LD_INT 10
8113: PUSH
8114: LD_INT 14
8116: PUSH
8117: LD_INT 20
8119: PUSH
8120: LD_INT 21
8122: PUSH
8123: LD_INT 22
8125: PUSH
8126: LD_INT 25
8128: PUSH
8129: LD_INT 32
8131: PUSH
8132: LD_INT 27
8134: PUSH
8135: LD_INT 36
8137: PUSH
8138: LD_INT 69
8140: PUSH
8141: LD_INT 39
8143: PUSH
8144: LD_INT 34
8146: PUSH
8147: LD_INT 40
8149: PUSH
8150: LD_INT 48
8152: PUSH
8153: LD_INT 49
8155: PUSH
8156: LD_INT 50
8158: PUSH
8159: LD_INT 51
8161: PUSH
8162: LD_INT 52
8164: PUSH
8165: LD_INT 53
8167: PUSH
8168: LD_INT 54
8170: PUSH
8171: LD_INT 55
8173: PUSH
8174: LD_INT 56
8176: PUSH
8177: LD_INT 57
8179: PUSH
8180: LD_INT 58
8182: PUSH
8183: LD_INT 59
8185: PUSH
8186: LD_INT 60
8188: PUSH
8189: LD_INT 61
8191: PUSH
8192: LD_INT 62
8194: PUSH
8195: LD_INT 80
8197: PUSH
8198: LD_INT 82
8200: PUSH
8201: LD_INT 83
8203: PUSH
8204: LD_INT 84
8206: PUSH
8207: LD_INT 85
8209: PUSH
8210: LD_INT 86
8212: PUSH
8213: EMPTY
8214: LIST
8215: LIST
8216: LIST
8217: LIST
8218: LIST
8219: LIST
8220: LIST
8221: LIST
8222: LIST
8223: LIST
8224: LIST
8225: LIST
8226: LIST
8227: LIST
8228: LIST
8229: LIST
8230: LIST
8231: LIST
8232: LIST
8233: LIST
8234: LIST
8235: LIST
8236: LIST
8237: LIST
8238: LIST
8239: LIST
8240: LIST
8241: LIST
8242: LIST
8243: LIST
8244: LIST
8245: LIST
8246: LIST
8247: LIST
8248: LIST
8249: LIST
8250: LIST
8251: LIST
8252: LIST
8253: LIST
8254: LIST
8255: LIST
8256: LIST
8257: LIST
8258: LIST
8259: LIST
8260: LIST
8261: LIST
8262: LIST
8263: LIST
8264: LIST
8265: ST_TO_ADDR
8266: GO 8733
8268: LD_INT 2
8270: DOUBLE
8271: EQUAL
8272: IFTRUE 8276
8274: GO 8502
8276: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
8277: LD_ADDR_VAR 0 4
8281: PUSH
8282: LD_INT 35
8284: PUSH
8285: LD_INT 45
8287: PUSH
8288: LD_INT 46
8290: PUSH
8291: LD_INT 47
8293: PUSH
8294: LD_INT 82
8296: PUSH
8297: LD_INT 83
8299: PUSH
8300: LD_INT 84
8302: PUSH
8303: LD_INT 85
8305: PUSH
8306: LD_INT 87
8308: PUSH
8309: LD_INT 70
8311: PUSH
8312: LD_INT 1
8314: PUSH
8315: LD_INT 11
8317: PUSH
8318: LD_INT 3
8320: PUSH
8321: LD_INT 4
8323: PUSH
8324: LD_INT 5
8326: PUSH
8327: LD_INT 6
8329: PUSH
8330: LD_INT 15
8332: PUSH
8333: LD_INT 18
8335: PUSH
8336: LD_INT 7
8338: PUSH
8339: LD_INT 17
8341: PUSH
8342: LD_INT 8
8344: PUSH
8345: LD_INT 20
8347: PUSH
8348: LD_INT 21
8350: PUSH
8351: LD_INT 22
8353: PUSH
8354: LD_INT 72
8356: PUSH
8357: LD_INT 26
8359: PUSH
8360: LD_INT 69
8362: PUSH
8363: LD_INT 39
8365: PUSH
8366: LD_INT 40
8368: PUSH
8369: LD_INT 41
8371: PUSH
8372: LD_INT 42
8374: PUSH
8375: LD_INT 43
8377: PUSH
8378: LD_INT 48
8380: PUSH
8381: LD_INT 49
8383: PUSH
8384: LD_INT 50
8386: PUSH
8387: LD_INT 51
8389: PUSH
8390: LD_INT 52
8392: PUSH
8393: LD_INT 53
8395: PUSH
8396: LD_INT 54
8398: PUSH
8399: LD_INT 55
8401: PUSH
8402: LD_INT 56
8404: PUSH
8405: LD_INT 60
8407: PUSH
8408: LD_INT 61
8410: PUSH
8411: LD_INT 62
8413: PUSH
8414: LD_INT 66
8416: PUSH
8417: LD_INT 67
8419: PUSH
8420: LD_INT 68
8422: PUSH
8423: LD_INT 81
8425: PUSH
8426: LD_INT 82
8428: PUSH
8429: LD_INT 83
8431: PUSH
8432: LD_INT 84
8434: PUSH
8435: LD_INT 85
8437: PUSH
8438: LD_INT 87
8440: PUSH
8441: LD_INT 88
8443: PUSH
8444: EMPTY
8445: LIST
8446: LIST
8447: LIST
8448: LIST
8449: LIST
8450: LIST
8451: LIST
8452: LIST
8453: LIST
8454: LIST
8455: LIST
8456: LIST
8457: LIST
8458: LIST
8459: LIST
8460: LIST
8461: LIST
8462: LIST
8463: LIST
8464: LIST
8465: LIST
8466: LIST
8467: LIST
8468: LIST
8469: LIST
8470: LIST
8471: LIST
8472: LIST
8473: LIST
8474: LIST
8475: LIST
8476: LIST
8477: LIST
8478: LIST
8479: LIST
8480: LIST
8481: LIST
8482: LIST
8483: LIST
8484: LIST
8485: LIST
8486: LIST
8487: LIST
8488: LIST
8489: LIST
8490: LIST
8491: LIST
8492: LIST
8493: LIST
8494: LIST
8495: LIST
8496: LIST
8497: LIST
8498: LIST
8499: ST_TO_ADDR
8500: GO 8733
8502: LD_INT 3
8504: DOUBLE
8505: EQUAL
8506: IFTRUE 8510
8508: GO 8732
8510: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
8511: LD_ADDR_VAR 0 4
8515: PUSH
8516: LD_INT 46
8518: PUSH
8519: LD_INT 47
8521: PUSH
8522: LD_INT 1
8524: PUSH
8525: LD_INT 2
8527: PUSH
8528: LD_INT 82
8530: PUSH
8531: LD_INT 83
8533: PUSH
8534: LD_INT 84
8536: PUSH
8537: LD_INT 85
8539: PUSH
8540: LD_INT 86
8542: PUSH
8543: LD_INT 11
8545: PUSH
8546: LD_INT 9
8548: PUSH
8549: LD_INT 20
8551: PUSH
8552: LD_INT 19
8554: PUSH
8555: LD_INT 21
8557: PUSH
8558: LD_INT 24
8560: PUSH
8561: LD_INT 22
8563: PUSH
8564: LD_INT 25
8566: PUSH
8567: LD_INT 28
8569: PUSH
8570: LD_INT 29
8572: PUSH
8573: LD_INT 30
8575: PUSH
8576: LD_INT 31
8578: PUSH
8579: LD_INT 37
8581: PUSH
8582: LD_INT 38
8584: PUSH
8585: LD_INT 32
8587: PUSH
8588: LD_INT 27
8590: PUSH
8591: LD_INT 33
8593: PUSH
8594: LD_INT 69
8596: PUSH
8597: LD_INT 39
8599: PUSH
8600: LD_INT 34
8602: PUSH
8603: LD_INT 40
8605: PUSH
8606: LD_INT 71
8608: PUSH
8609: LD_INT 23
8611: PUSH
8612: LD_INT 44
8614: PUSH
8615: LD_INT 48
8617: PUSH
8618: LD_INT 49
8620: PUSH
8621: LD_INT 50
8623: PUSH
8624: LD_INT 51
8626: PUSH
8627: LD_INT 52
8629: PUSH
8630: LD_INT 53
8632: PUSH
8633: LD_INT 54
8635: PUSH
8636: LD_INT 55
8638: PUSH
8639: LD_INT 56
8641: PUSH
8642: LD_INT 57
8644: PUSH
8645: LD_INT 58
8647: PUSH
8648: LD_INT 59
8650: PUSH
8651: LD_INT 63
8653: PUSH
8654: LD_INT 64
8656: PUSH
8657: LD_INT 65
8659: PUSH
8660: LD_INT 82
8662: PUSH
8663: LD_INT 83
8665: PUSH
8666: LD_INT 84
8668: PUSH
8669: LD_INT 85
8671: PUSH
8672: LD_INT 86
8674: PUSH
8675: EMPTY
8676: LIST
8677: LIST
8678: LIST
8679: LIST
8680: LIST
8681: LIST
8682: LIST
8683: LIST
8684: LIST
8685: LIST
8686: LIST
8687: LIST
8688: LIST
8689: LIST
8690: LIST
8691: LIST
8692: LIST
8693: LIST
8694: LIST
8695: LIST
8696: LIST
8697: LIST
8698: LIST
8699: LIST
8700: LIST
8701: LIST
8702: LIST
8703: LIST
8704: LIST
8705: LIST
8706: LIST
8707: LIST
8708: LIST
8709: LIST
8710: LIST
8711: LIST
8712: LIST
8713: LIST
8714: LIST
8715: LIST
8716: LIST
8717: LIST
8718: LIST
8719: LIST
8720: LIST
8721: LIST
8722: LIST
8723: LIST
8724: LIST
8725: LIST
8726: LIST
8727: LIST
8728: LIST
8729: ST_TO_ADDR
8730: GO 8733
8732: POP
// if state > - 1 and state < 3 then
8733: LD_VAR 0 3
8737: PUSH
8738: LD_INT 1
8740: NEG
8741: GREATER
8742: PUSH
8743: LD_VAR 0 3
8747: PUSH
8748: LD_INT 3
8750: LESS
8751: AND
8752: IFFALSE 8809
// for i in result do
8754: LD_ADDR_VAR 0 5
8758: PUSH
8759: LD_VAR 0 4
8763: PUSH
8764: FOR_IN
8765: IFFALSE 8807
// if GetTech ( i , side ) <> state then
8767: LD_VAR 0 5
8771: PPUSH
8772: LD_VAR 0 1
8776: PPUSH
8777: CALL_OW 321
8781: PUSH
8782: LD_VAR 0 3
8786: NONEQUAL
8787: IFFALSE 8805
// result := result diff i ;
8789: LD_ADDR_VAR 0 4
8793: PUSH
8794: LD_VAR 0 4
8798: PUSH
8799: LD_VAR 0 5
8803: DIFF
8804: ST_TO_ADDR
8805: GO 8764
8807: POP
8808: POP
// end ;
8809: LD_VAR 0 4
8813: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
8814: LD_INT 0
8816: PPUSH
8817: PPUSH
8818: PPUSH
// result := true ;
8819: LD_ADDR_VAR 0 3
8823: PUSH
8824: LD_INT 1
8826: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
8827: LD_ADDR_VAR 0 5
8831: PUSH
8832: LD_VAR 0 2
8836: PPUSH
8837: CALL_OW 480
8841: ST_TO_ADDR
// if not tmp then
8842: LD_VAR 0 5
8846: NOT
8847: IFFALSE 8851
// exit ;
8849: GO 8900
// for i in tmp do
8851: LD_ADDR_VAR 0 4
8855: PUSH
8856: LD_VAR 0 5
8860: PUSH
8861: FOR_IN
8862: IFFALSE 8898
// if GetTech ( i , side ) <> state_researched then
8864: LD_VAR 0 4
8868: PPUSH
8869: LD_VAR 0 1
8873: PPUSH
8874: CALL_OW 321
8878: PUSH
8879: LD_INT 2
8881: NONEQUAL
8882: IFFALSE 8896
// begin result := false ;
8884: LD_ADDR_VAR 0 3
8888: PUSH
8889: LD_INT 0
8891: ST_TO_ADDR
// exit ;
8892: POP
8893: POP
8894: GO 8900
// end ;
8896: GO 8861
8898: POP
8899: POP
// end ;
8900: LD_VAR 0 3
8904: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
8905: LD_INT 0
8907: PPUSH
8908: PPUSH
8909: PPUSH
8910: PPUSH
8911: PPUSH
8912: PPUSH
8913: PPUSH
8914: PPUSH
8915: PPUSH
8916: PPUSH
8917: PPUSH
8918: PPUSH
8919: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
8920: LD_VAR 0 1
8924: NOT
8925: PUSH
8926: LD_VAR 0 1
8930: PPUSH
8931: CALL_OW 257
8935: PUSH
8936: LD_INT 9
8938: NONEQUAL
8939: OR
8940: IFFALSE 8944
// exit ;
8942: GO 9517
// side := GetSide ( unit ) ;
8944: LD_ADDR_VAR 0 9
8948: PUSH
8949: LD_VAR 0 1
8953: PPUSH
8954: CALL_OW 255
8958: ST_TO_ADDR
// tech_space := tech_spacanom ;
8959: LD_ADDR_VAR 0 12
8963: PUSH
8964: LD_INT 29
8966: ST_TO_ADDR
// tech_time := tech_taurad ;
8967: LD_ADDR_VAR 0 13
8971: PUSH
8972: LD_INT 28
8974: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
8975: LD_ADDR_VAR 0 11
8979: PUSH
8980: LD_VAR 0 1
8984: PPUSH
8985: CALL_OW 310
8989: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
8990: LD_VAR 0 11
8994: PPUSH
8995: CALL_OW 247
8999: PUSH
9000: LD_INT 2
9002: EQUAL
9003: IFFALSE 9007
// exit ;
9005: GO 9517
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
9007: LD_ADDR_VAR 0 8
9011: PUSH
9012: LD_INT 81
9014: PUSH
9015: LD_VAR 0 9
9019: PUSH
9020: EMPTY
9021: LIST
9022: LIST
9023: PUSH
9024: LD_INT 3
9026: PUSH
9027: LD_INT 21
9029: PUSH
9030: LD_INT 3
9032: PUSH
9033: EMPTY
9034: LIST
9035: LIST
9036: PUSH
9037: EMPTY
9038: LIST
9039: LIST
9040: PUSH
9041: EMPTY
9042: LIST
9043: LIST
9044: PPUSH
9045: CALL_OW 69
9049: ST_TO_ADDR
// if not tmp then
9050: LD_VAR 0 8
9054: NOT
9055: IFFALSE 9059
// exit ;
9057: GO 9517
// if in_unit then
9059: LD_VAR 0 11
9063: IFFALSE 9087
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
9065: LD_ADDR_VAR 0 10
9069: PUSH
9070: LD_VAR 0 8
9074: PPUSH
9075: LD_VAR 0 11
9079: PPUSH
9080: CALL_OW 74
9084: ST_TO_ADDR
9085: GO 9107
// enemy := NearestUnitToUnit ( tmp , unit ) ;
9087: LD_ADDR_VAR 0 10
9091: PUSH
9092: LD_VAR 0 8
9096: PPUSH
9097: LD_VAR 0 1
9101: PPUSH
9102: CALL_OW 74
9106: ST_TO_ADDR
// if not enemy then
9107: LD_VAR 0 10
9111: NOT
9112: IFFALSE 9116
// exit ;
9114: GO 9517
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
9116: LD_VAR 0 11
9120: PUSH
9121: LD_VAR 0 11
9125: PPUSH
9126: LD_VAR 0 10
9130: PPUSH
9131: CALL_OW 296
9135: PUSH
9136: LD_INT 13
9138: GREATER
9139: AND
9140: PUSH
9141: LD_VAR 0 1
9145: PPUSH
9146: LD_VAR 0 10
9150: PPUSH
9151: CALL_OW 296
9155: PUSH
9156: LD_INT 12
9158: GREATER
9159: OR
9160: IFFALSE 9164
// exit ;
9162: GO 9517
// missile := [ 1 ] ;
9164: LD_ADDR_VAR 0 14
9168: PUSH
9169: LD_INT 1
9171: PUSH
9172: EMPTY
9173: LIST
9174: ST_TO_ADDR
// if Researched ( side , tech_space ) then
9175: LD_VAR 0 9
9179: PPUSH
9180: LD_VAR 0 12
9184: PPUSH
9185: CALL_OW 325
9189: IFFALSE 9218
// missile := Replace ( missile , missile + 1 , 2 ) ;
9191: LD_ADDR_VAR 0 14
9195: PUSH
9196: LD_VAR 0 14
9200: PPUSH
9201: LD_VAR 0 14
9205: PUSH
9206: LD_INT 1
9208: PLUS
9209: PPUSH
9210: LD_INT 2
9212: PPUSH
9213: CALL_OW 1
9217: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
9218: LD_VAR 0 9
9222: PPUSH
9223: LD_VAR 0 13
9227: PPUSH
9228: CALL_OW 325
9232: PUSH
9233: LD_VAR 0 10
9237: PPUSH
9238: CALL_OW 255
9242: PPUSH
9243: LD_VAR 0 13
9247: PPUSH
9248: CALL_OW 325
9252: NOT
9253: AND
9254: IFFALSE 9283
// missile := Replace ( missile , missile + 1 , 3 ) ;
9256: LD_ADDR_VAR 0 14
9260: PUSH
9261: LD_VAR 0 14
9265: PPUSH
9266: LD_VAR 0 14
9270: PUSH
9271: LD_INT 1
9273: PLUS
9274: PPUSH
9275: LD_INT 3
9277: PPUSH
9278: CALL_OW 1
9282: ST_TO_ADDR
// if missile < 2 then
9283: LD_VAR 0 14
9287: PUSH
9288: LD_INT 2
9290: LESS
9291: IFFALSE 9295
// exit ;
9293: GO 9517
// x := GetX ( enemy ) ;
9295: LD_ADDR_VAR 0 4
9299: PUSH
9300: LD_VAR 0 10
9304: PPUSH
9305: CALL_OW 250
9309: ST_TO_ADDR
// y := GetY ( enemy ) ;
9310: LD_ADDR_VAR 0 5
9314: PUSH
9315: LD_VAR 0 10
9319: PPUSH
9320: CALL_OW 251
9324: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
9325: LD_ADDR_VAR 0 6
9329: PUSH
9330: LD_VAR 0 4
9334: PUSH
9335: LD_INT 1
9337: NEG
9338: PPUSH
9339: LD_INT 1
9341: PPUSH
9342: CALL_OW 12
9346: PLUS
9347: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
9348: LD_ADDR_VAR 0 7
9352: PUSH
9353: LD_VAR 0 5
9357: PUSH
9358: LD_INT 1
9360: NEG
9361: PPUSH
9362: LD_INT 1
9364: PPUSH
9365: CALL_OW 12
9369: PLUS
9370: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
9371: LD_VAR 0 6
9375: PPUSH
9376: LD_VAR 0 7
9380: PPUSH
9381: CALL_OW 488
9385: NOT
9386: IFFALSE 9408
// begin _x := x ;
9388: LD_ADDR_VAR 0 6
9392: PUSH
9393: LD_VAR 0 4
9397: ST_TO_ADDR
// _y := y ;
9398: LD_ADDR_VAR 0 7
9402: PUSH
9403: LD_VAR 0 5
9407: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
9408: LD_ADDR_VAR 0 3
9412: PUSH
9413: LD_INT 1
9415: PPUSH
9416: LD_VAR 0 14
9420: PPUSH
9421: CALL_OW 12
9425: ST_TO_ADDR
// case i of 1 :
9426: LD_VAR 0 3
9430: PUSH
9431: LD_INT 1
9433: DOUBLE
9434: EQUAL
9435: IFTRUE 9439
9437: GO 9456
9439: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
9440: LD_VAR 0 1
9444: PPUSH
9445: LD_VAR 0 10
9449: PPUSH
9450: CALL_OW 115
9454: GO 9517
9456: LD_INT 2
9458: DOUBLE
9459: EQUAL
9460: IFTRUE 9464
9462: GO 9486
9464: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
9465: LD_VAR 0 1
9469: PPUSH
9470: LD_VAR 0 6
9474: PPUSH
9475: LD_VAR 0 7
9479: PPUSH
9480: CALL_OW 153
9484: GO 9517
9486: LD_INT 3
9488: DOUBLE
9489: EQUAL
9490: IFTRUE 9494
9492: GO 9516
9494: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
9495: LD_VAR 0 1
9499: PPUSH
9500: LD_VAR 0 6
9504: PPUSH
9505: LD_VAR 0 7
9509: PPUSH
9510: CALL_OW 154
9514: GO 9517
9516: POP
// end ;
9517: LD_VAR 0 2
9521: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
9522: LD_INT 0
9524: PPUSH
9525: PPUSH
9526: PPUSH
9527: PPUSH
9528: PPUSH
9529: PPUSH
// if not unit or not building then
9530: LD_VAR 0 1
9534: NOT
9535: PUSH
9536: LD_VAR 0 2
9540: NOT
9541: OR
9542: IFFALSE 9546
// exit ;
9544: GO 9704
// x := GetX ( building ) ;
9546: LD_ADDR_VAR 0 5
9550: PUSH
9551: LD_VAR 0 2
9555: PPUSH
9556: CALL_OW 250
9560: ST_TO_ADDR
// y := GetY ( building ) ;
9561: LD_ADDR_VAR 0 6
9565: PUSH
9566: LD_VAR 0 2
9570: PPUSH
9571: CALL_OW 251
9575: ST_TO_ADDR
// for i = 0 to 5 do
9576: LD_ADDR_VAR 0 4
9580: PUSH
9581: DOUBLE
9582: LD_INT 0
9584: DEC
9585: ST_TO_ADDR
9586: LD_INT 5
9588: PUSH
9589: FOR_TO
9590: IFFALSE 9702
// begin _x := ShiftX ( x , i , 3 ) ;
9592: LD_ADDR_VAR 0 7
9596: PUSH
9597: LD_VAR 0 5
9601: PPUSH
9602: LD_VAR 0 4
9606: PPUSH
9607: LD_INT 3
9609: PPUSH
9610: CALL_OW 272
9614: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
9615: LD_ADDR_VAR 0 8
9619: PUSH
9620: LD_VAR 0 6
9624: PPUSH
9625: LD_VAR 0 4
9629: PPUSH
9630: LD_INT 3
9632: PPUSH
9633: CALL_OW 273
9637: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
9638: LD_VAR 0 7
9642: PPUSH
9643: LD_VAR 0 8
9647: PPUSH
9648: CALL_OW 488
9652: NOT
9653: IFFALSE 9657
// continue ;
9655: GO 9589
// if HexInfo ( _x , _y ) = 0 then
9657: LD_VAR 0 7
9661: PPUSH
9662: LD_VAR 0 8
9666: PPUSH
9667: CALL_OW 428
9671: PUSH
9672: LD_INT 0
9674: EQUAL
9675: IFFALSE 9700
// begin ComMoveXY ( unit , _x , _y ) ;
9677: LD_VAR 0 1
9681: PPUSH
9682: LD_VAR 0 7
9686: PPUSH
9687: LD_VAR 0 8
9691: PPUSH
9692: CALL_OW 111
// exit ;
9696: POP
9697: POP
9698: GO 9704
// end ; end ;
9700: GO 9589
9702: POP
9703: POP
// end ;
9704: LD_VAR 0 3
9708: RET
// export function ScanBase ( side , base_area ) ; begin
9709: LD_INT 0
9711: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
9712: LD_ADDR_VAR 0 3
9716: PUSH
9717: LD_VAR 0 2
9721: PPUSH
9722: LD_INT 81
9724: PUSH
9725: LD_VAR 0 1
9729: PUSH
9730: EMPTY
9731: LIST
9732: LIST
9733: PPUSH
9734: CALL_OW 70
9738: ST_TO_ADDR
// end ;
9739: LD_VAR 0 3
9743: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
9744: LD_INT 0
9746: PPUSH
9747: PPUSH
9748: PPUSH
9749: PPUSH
// result := false ;
9750: LD_ADDR_VAR 0 2
9754: PUSH
9755: LD_INT 0
9757: ST_TO_ADDR
// side := GetSide ( unit ) ;
9758: LD_ADDR_VAR 0 3
9762: PUSH
9763: LD_VAR 0 1
9767: PPUSH
9768: CALL_OW 255
9772: ST_TO_ADDR
// nat := GetNation ( unit ) ;
9773: LD_ADDR_VAR 0 4
9777: PUSH
9778: LD_VAR 0 1
9782: PPUSH
9783: CALL_OW 248
9787: ST_TO_ADDR
// case nat of 1 :
9788: LD_VAR 0 4
9792: PUSH
9793: LD_INT 1
9795: DOUBLE
9796: EQUAL
9797: IFTRUE 9801
9799: GO 9812
9801: POP
// tech := tech_lassight ; 2 :
9802: LD_ADDR_VAR 0 5
9806: PUSH
9807: LD_INT 12
9809: ST_TO_ADDR
9810: GO 9851
9812: LD_INT 2
9814: DOUBLE
9815: EQUAL
9816: IFTRUE 9820
9818: GO 9831
9820: POP
// tech := tech_mortar ; 3 :
9821: LD_ADDR_VAR 0 5
9825: PUSH
9826: LD_INT 41
9828: ST_TO_ADDR
9829: GO 9851
9831: LD_INT 3
9833: DOUBLE
9834: EQUAL
9835: IFTRUE 9839
9837: GO 9850
9839: POP
// tech := tech_bazooka ; end ;
9840: LD_ADDR_VAR 0 5
9844: PUSH
9845: LD_INT 44
9847: ST_TO_ADDR
9848: GO 9851
9850: POP
// if Researched ( side , tech ) then
9851: LD_VAR 0 3
9855: PPUSH
9856: LD_VAR 0 5
9860: PPUSH
9861: CALL_OW 325
9865: IFFALSE 9892
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
9867: LD_ADDR_VAR 0 2
9871: PUSH
9872: LD_INT 5
9874: PUSH
9875: LD_INT 8
9877: PUSH
9878: LD_INT 9
9880: PUSH
9881: EMPTY
9882: LIST
9883: LIST
9884: LIST
9885: PUSH
9886: LD_VAR 0 4
9890: ARRAY
9891: ST_TO_ADDR
// end ;
9892: LD_VAR 0 2
9896: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
9897: LD_INT 0
9899: PPUSH
9900: PPUSH
9901: PPUSH
// if not mines then
9902: LD_VAR 0 2
9906: NOT
9907: IFFALSE 9911
// exit ;
9909: GO 10055
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
9911: LD_ADDR_VAR 0 5
9915: PUSH
9916: LD_INT 81
9918: PUSH
9919: LD_VAR 0 1
9923: PUSH
9924: EMPTY
9925: LIST
9926: LIST
9927: PUSH
9928: LD_INT 3
9930: PUSH
9931: LD_INT 21
9933: PUSH
9934: LD_INT 3
9936: PUSH
9937: EMPTY
9938: LIST
9939: LIST
9940: PUSH
9941: EMPTY
9942: LIST
9943: LIST
9944: PUSH
9945: EMPTY
9946: LIST
9947: LIST
9948: PPUSH
9949: CALL_OW 69
9953: ST_TO_ADDR
// for i in mines do
9954: LD_ADDR_VAR 0 4
9958: PUSH
9959: LD_VAR 0 2
9963: PUSH
9964: FOR_IN
9965: IFFALSE 10053
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
9967: LD_VAR 0 4
9971: PUSH
9972: LD_INT 1
9974: ARRAY
9975: PPUSH
9976: LD_VAR 0 4
9980: PUSH
9981: LD_INT 2
9983: ARRAY
9984: PPUSH
9985: CALL_OW 458
9989: NOT
9990: IFFALSE 9994
// continue ;
9992: GO 9964
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
9994: LD_VAR 0 4
9998: PUSH
9999: LD_INT 1
10001: ARRAY
10002: PPUSH
10003: LD_VAR 0 4
10007: PUSH
10008: LD_INT 2
10010: ARRAY
10011: PPUSH
10012: CALL_OW 428
10016: PUSH
10017: LD_VAR 0 5
10021: IN
10022: IFFALSE 10051
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
10024: LD_VAR 0 4
10028: PUSH
10029: LD_INT 1
10031: ARRAY
10032: PPUSH
10033: LD_VAR 0 4
10037: PUSH
10038: LD_INT 2
10040: ARRAY
10041: PPUSH
10042: LD_VAR 0 1
10046: PPUSH
10047: CALL_OW 456
// end ;
10051: GO 9964
10053: POP
10054: POP
// end ;
10055: LD_VAR 0 3
10059: RET
// export function Count ( array ) ; var i ; begin
10060: LD_INT 0
10062: PPUSH
10063: PPUSH
// result := 0 ;
10064: LD_ADDR_VAR 0 2
10068: PUSH
10069: LD_INT 0
10071: ST_TO_ADDR
// for i in array do
10072: LD_ADDR_VAR 0 3
10076: PUSH
10077: LD_VAR 0 1
10081: PUSH
10082: FOR_IN
10083: IFFALSE 10107
// if i then
10085: LD_VAR 0 3
10089: IFFALSE 10105
// result := result + 1 ;
10091: LD_ADDR_VAR 0 2
10095: PUSH
10096: LD_VAR 0 2
10100: PUSH
10101: LD_INT 1
10103: PLUS
10104: ST_TO_ADDR
10105: GO 10082
10107: POP
10108: POP
// end ;
10109: LD_VAR 0 2
10113: RET
// export function IsEmpty ( building ) ; begin
10114: LD_INT 0
10116: PPUSH
// if not building then
10117: LD_VAR 0 1
10121: NOT
10122: IFFALSE 10126
// exit ;
10124: GO 10169
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
10126: LD_ADDR_VAR 0 2
10130: PUSH
10131: LD_VAR 0 1
10135: PUSH
10136: LD_INT 22
10138: PUSH
10139: LD_VAR 0 1
10143: PPUSH
10144: CALL_OW 255
10148: PUSH
10149: EMPTY
10150: LIST
10151: LIST
10152: PUSH
10153: LD_INT 58
10155: PUSH
10156: EMPTY
10157: LIST
10158: PUSH
10159: EMPTY
10160: LIST
10161: LIST
10162: PPUSH
10163: CALL_OW 69
10167: IN
10168: ST_TO_ADDR
// end ;
10169: LD_VAR 0 2
10173: RET
// export function IsNotFull ( building ) ; var places ; begin
10174: LD_INT 0
10176: PPUSH
10177: PPUSH
// if not building then
10178: LD_VAR 0 1
10182: NOT
10183: IFFALSE 10187
// exit ;
10185: GO 10358
// result := false ;
10187: LD_ADDR_VAR 0 2
10191: PUSH
10192: LD_INT 0
10194: ST_TO_ADDR
// places := 0 ;
10195: LD_ADDR_VAR 0 3
10199: PUSH
10200: LD_INT 0
10202: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
10203: LD_VAR 0 1
10207: PPUSH
10208: CALL_OW 266
10212: PUSH
10213: LD_INT 0
10215: DOUBLE
10216: EQUAL
10217: IFTRUE 10275
10219: LD_INT 1
10221: DOUBLE
10222: EQUAL
10223: IFTRUE 10275
10225: LD_INT 6
10227: DOUBLE
10228: EQUAL
10229: IFTRUE 10275
10231: LD_INT 7
10233: DOUBLE
10234: EQUAL
10235: IFTRUE 10275
10237: LD_INT 8
10239: DOUBLE
10240: EQUAL
10241: IFTRUE 10275
10243: LD_INT 4
10245: DOUBLE
10246: EQUAL
10247: IFTRUE 10275
10249: LD_INT 5
10251: DOUBLE
10252: EQUAL
10253: IFTRUE 10275
10255: LD_INT 2
10257: DOUBLE
10258: EQUAL
10259: IFTRUE 10275
10261: LD_INT 3
10263: DOUBLE
10264: EQUAL
10265: IFTRUE 10275
10267: LD_INT 35
10269: DOUBLE
10270: EQUAL
10271: IFTRUE 10275
10273: GO 10286
10275: POP
// places := 6 ; b_bunker , b_breastwork :
10276: LD_ADDR_VAR 0 3
10280: PUSH
10281: LD_INT 6
10283: ST_TO_ADDR
10284: GO 10331
10286: LD_INT 32
10288: DOUBLE
10289: EQUAL
10290: IFTRUE 10300
10292: LD_INT 31
10294: DOUBLE
10295: EQUAL
10296: IFTRUE 10300
10298: GO 10311
10300: POP
// places := 1 ; b_control_tower :
10301: LD_ADDR_VAR 0 3
10305: PUSH
10306: LD_INT 1
10308: ST_TO_ADDR
10309: GO 10331
10311: LD_INT 36
10313: DOUBLE
10314: EQUAL
10315: IFTRUE 10319
10317: GO 10330
10319: POP
// places := 3 ; end ;
10320: LD_ADDR_VAR 0 3
10324: PUSH
10325: LD_INT 3
10327: ST_TO_ADDR
10328: GO 10331
10330: POP
// if places then
10331: LD_VAR 0 3
10335: IFFALSE 10358
// result := UnitsInside ( building ) < places ;
10337: LD_ADDR_VAR 0 2
10341: PUSH
10342: LD_VAR 0 1
10346: PPUSH
10347: CALL_OW 313
10351: PUSH
10352: LD_VAR 0 3
10356: LESS
10357: ST_TO_ADDR
// end ;
10358: LD_VAR 0 2
10362: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
10363: LD_INT 0
10365: PPUSH
10366: PPUSH
10367: PPUSH
10368: PPUSH
// tmp := [ ] ;
10369: LD_ADDR_VAR 0 3
10373: PUSH
10374: EMPTY
10375: ST_TO_ADDR
// list := [ ] ;
10376: LD_ADDR_VAR 0 5
10380: PUSH
10381: EMPTY
10382: ST_TO_ADDR
// for i = 16 to 25 do
10383: LD_ADDR_VAR 0 4
10387: PUSH
10388: DOUBLE
10389: LD_INT 16
10391: DEC
10392: ST_TO_ADDR
10393: LD_INT 25
10395: PUSH
10396: FOR_TO
10397: IFFALSE 10470
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
10399: LD_ADDR_VAR 0 3
10403: PUSH
10404: LD_VAR 0 3
10408: PUSH
10409: LD_INT 22
10411: PUSH
10412: LD_VAR 0 1
10416: PPUSH
10417: CALL_OW 255
10421: PUSH
10422: EMPTY
10423: LIST
10424: LIST
10425: PUSH
10426: LD_INT 91
10428: PUSH
10429: LD_VAR 0 1
10433: PUSH
10434: LD_INT 6
10436: PUSH
10437: EMPTY
10438: LIST
10439: LIST
10440: LIST
10441: PUSH
10442: LD_INT 30
10444: PUSH
10445: LD_VAR 0 4
10449: PUSH
10450: EMPTY
10451: LIST
10452: LIST
10453: PUSH
10454: EMPTY
10455: LIST
10456: LIST
10457: LIST
10458: PUSH
10459: EMPTY
10460: LIST
10461: PPUSH
10462: CALL_OW 69
10466: ADD
10467: ST_TO_ADDR
10468: GO 10396
10470: POP
10471: POP
// for i = 1 to tmp do
10472: LD_ADDR_VAR 0 4
10476: PUSH
10477: DOUBLE
10478: LD_INT 1
10480: DEC
10481: ST_TO_ADDR
10482: LD_VAR 0 3
10486: PUSH
10487: FOR_TO
10488: IFFALSE 10576
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
10490: LD_ADDR_VAR 0 5
10494: PUSH
10495: LD_VAR 0 5
10499: PUSH
10500: LD_VAR 0 3
10504: PUSH
10505: LD_VAR 0 4
10509: ARRAY
10510: PPUSH
10511: CALL_OW 266
10515: PUSH
10516: LD_VAR 0 3
10520: PUSH
10521: LD_VAR 0 4
10525: ARRAY
10526: PPUSH
10527: CALL_OW 250
10531: PUSH
10532: LD_VAR 0 3
10536: PUSH
10537: LD_VAR 0 4
10541: ARRAY
10542: PPUSH
10543: CALL_OW 251
10547: PUSH
10548: LD_VAR 0 3
10552: PUSH
10553: LD_VAR 0 4
10557: ARRAY
10558: PPUSH
10559: CALL_OW 254
10563: PUSH
10564: EMPTY
10565: LIST
10566: LIST
10567: LIST
10568: LIST
10569: PUSH
10570: EMPTY
10571: LIST
10572: ADD
10573: ST_TO_ADDR
10574: GO 10487
10576: POP
10577: POP
// result := list ;
10578: LD_ADDR_VAR 0 2
10582: PUSH
10583: LD_VAR 0 5
10587: ST_TO_ADDR
// end ;
10588: LD_VAR 0 2
10592: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
10593: LD_INT 0
10595: PPUSH
10596: PPUSH
10597: PPUSH
10598: PPUSH
10599: PPUSH
10600: PPUSH
10601: PPUSH
// if not factory then
10602: LD_VAR 0 1
10606: NOT
10607: IFFALSE 10611
// exit ;
10609: GO 11204
// if control = control_apeman then
10611: LD_VAR 0 4
10615: PUSH
10616: LD_INT 5
10618: EQUAL
10619: IFFALSE 10728
// begin tmp := UnitsInside ( factory ) ;
10621: LD_ADDR_VAR 0 8
10625: PUSH
10626: LD_VAR 0 1
10630: PPUSH
10631: CALL_OW 313
10635: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
10636: LD_VAR 0 8
10640: PPUSH
10641: LD_INT 25
10643: PUSH
10644: LD_INT 12
10646: PUSH
10647: EMPTY
10648: LIST
10649: LIST
10650: PPUSH
10651: CALL_OW 72
10655: NOT
10656: IFFALSE 10666
// control := control_manual ;
10658: LD_ADDR_VAR 0 4
10662: PUSH
10663: LD_INT 1
10665: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
10666: LD_ADDR_VAR 0 8
10670: PUSH
10671: LD_VAR 0 1
10675: PPUSH
10676: CALL 10363 0 1
10680: ST_TO_ADDR
// if tmp then
10681: LD_VAR 0 8
10685: IFFALSE 10728
// begin for i in tmp do
10687: LD_ADDR_VAR 0 7
10691: PUSH
10692: LD_VAR 0 8
10696: PUSH
10697: FOR_IN
10698: IFFALSE 10726
// if i [ 1 ] = b_ext_radio then
10700: LD_VAR 0 7
10704: PUSH
10705: LD_INT 1
10707: ARRAY
10708: PUSH
10709: LD_INT 22
10711: EQUAL
10712: IFFALSE 10724
// begin control := control_remote ;
10714: LD_ADDR_VAR 0 4
10718: PUSH
10719: LD_INT 2
10721: ST_TO_ADDR
// break ;
10722: GO 10726
// end ;
10724: GO 10697
10726: POP
10727: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
10728: LD_VAR 0 1
10732: PPUSH
10733: LD_VAR 0 2
10737: PPUSH
10738: LD_VAR 0 3
10742: PPUSH
10743: LD_VAR 0 4
10747: PPUSH
10748: LD_VAR 0 5
10752: PPUSH
10753: CALL_OW 448
10757: IFFALSE 10792
// begin result := [ chassis , engine , control , weapon ] ;
10759: LD_ADDR_VAR 0 6
10763: PUSH
10764: LD_VAR 0 2
10768: PUSH
10769: LD_VAR 0 3
10773: PUSH
10774: LD_VAR 0 4
10778: PUSH
10779: LD_VAR 0 5
10783: PUSH
10784: EMPTY
10785: LIST
10786: LIST
10787: LIST
10788: LIST
10789: ST_TO_ADDR
// exit ;
10790: GO 11204
// end ; _chassis := AvailableChassisList ( factory ) ;
10792: LD_ADDR_VAR 0 9
10796: PUSH
10797: LD_VAR 0 1
10801: PPUSH
10802: CALL_OW 475
10806: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
10807: LD_ADDR_VAR 0 11
10811: PUSH
10812: LD_VAR 0 1
10816: PPUSH
10817: CALL_OW 476
10821: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
10822: LD_ADDR_VAR 0 12
10826: PUSH
10827: LD_VAR 0 1
10831: PPUSH
10832: CALL_OW 477
10836: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
10837: LD_ADDR_VAR 0 10
10841: PUSH
10842: LD_VAR 0 1
10846: PPUSH
10847: CALL_OW 478
10851: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
10852: LD_VAR 0 9
10856: NOT
10857: PUSH
10858: LD_VAR 0 11
10862: NOT
10863: OR
10864: PUSH
10865: LD_VAR 0 12
10869: NOT
10870: OR
10871: PUSH
10872: LD_VAR 0 10
10876: NOT
10877: OR
10878: IFFALSE 10913
// begin result := [ chassis , engine , control , weapon ] ;
10880: LD_ADDR_VAR 0 6
10884: PUSH
10885: LD_VAR 0 2
10889: PUSH
10890: LD_VAR 0 3
10894: PUSH
10895: LD_VAR 0 4
10899: PUSH
10900: LD_VAR 0 5
10904: PUSH
10905: EMPTY
10906: LIST
10907: LIST
10908: LIST
10909: LIST
10910: ST_TO_ADDR
// exit ;
10911: GO 11204
// end ; if not chassis in _chassis then
10913: LD_VAR 0 2
10917: PUSH
10918: LD_VAR 0 9
10922: IN
10923: NOT
10924: IFFALSE 10950
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
10926: LD_ADDR_VAR 0 2
10930: PUSH
10931: LD_VAR 0 9
10935: PUSH
10936: LD_INT 1
10938: PPUSH
10939: LD_VAR 0 9
10943: PPUSH
10944: CALL_OW 12
10948: ARRAY
10949: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
10950: LD_VAR 0 2
10954: PPUSH
10955: LD_VAR 0 3
10959: PPUSH
10960: CALL 11209 0 2
10964: NOT
10965: IFFALSE 11024
// repeat engine := _engine [ 1 ] ;
10967: LD_ADDR_VAR 0 3
10971: PUSH
10972: LD_VAR 0 11
10976: PUSH
10977: LD_INT 1
10979: ARRAY
10980: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
10981: LD_ADDR_VAR 0 11
10985: PUSH
10986: LD_VAR 0 11
10990: PPUSH
10991: LD_INT 1
10993: PPUSH
10994: CALL_OW 3
10998: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
10999: LD_VAR 0 2
11003: PPUSH
11004: LD_VAR 0 3
11008: PPUSH
11009: CALL 11209 0 2
11013: PUSH
11014: LD_VAR 0 11
11018: PUSH
11019: EMPTY
11020: EQUAL
11021: OR
11022: IFFALSE 10967
// if not control in _control then
11024: LD_VAR 0 4
11028: PUSH
11029: LD_VAR 0 12
11033: IN
11034: NOT
11035: IFFALSE 11061
// control := _control [ rand ( 1 , _control ) ] ;
11037: LD_ADDR_VAR 0 4
11041: PUSH
11042: LD_VAR 0 12
11046: PUSH
11047: LD_INT 1
11049: PPUSH
11050: LD_VAR 0 12
11054: PPUSH
11055: CALL_OW 12
11059: ARRAY
11060: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
11061: LD_VAR 0 2
11065: PPUSH
11066: LD_VAR 0 5
11070: PPUSH
11071: CALL 11429 0 2
11075: NOT
11076: IFFALSE 11135
// repeat weapon := _weapon [ 1 ] ;
11078: LD_ADDR_VAR 0 5
11082: PUSH
11083: LD_VAR 0 10
11087: PUSH
11088: LD_INT 1
11090: ARRAY
11091: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
11092: LD_ADDR_VAR 0 10
11096: PUSH
11097: LD_VAR 0 10
11101: PPUSH
11102: LD_INT 1
11104: PPUSH
11105: CALL_OW 3
11109: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
11110: LD_VAR 0 2
11114: PPUSH
11115: LD_VAR 0 5
11119: PPUSH
11120: CALL 11429 0 2
11124: PUSH
11125: LD_VAR 0 10
11129: PUSH
11130: EMPTY
11131: EQUAL
11132: OR
11133: IFFALSE 11078
// result := [ ] ;
11135: LD_ADDR_VAR 0 6
11139: PUSH
11140: EMPTY
11141: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
11142: LD_VAR 0 1
11146: PPUSH
11147: LD_VAR 0 2
11151: PPUSH
11152: LD_VAR 0 3
11156: PPUSH
11157: LD_VAR 0 4
11161: PPUSH
11162: LD_VAR 0 5
11166: PPUSH
11167: CALL_OW 448
11171: IFFALSE 11204
// result := [ chassis , engine , control , weapon ] ;
11173: LD_ADDR_VAR 0 6
11177: PUSH
11178: LD_VAR 0 2
11182: PUSH
11183: LD_VAR 0 3
11187: PUSH
11188: LD_VAR 0 4
11192: PUSH
11193: LD_VAR 0 5
11197: PUSH
11198: EMPTY
11199: LIST
11200: LIST
11201: LIST
11202: LIST
11203: ST_TO_ADDR
// end ;
11204: LD_VAR 0 6
11208: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
11209: LD_INT 0
11211: PPUSH
// if not chassis or not engine then
11212: LD_VAR 0 1
11216: NOT
11217: PUSH
11218: LD_VAR 0 2
11222: NOT
11223: OR
11224: IFFALSE 11228
// exit ;
11226: GO 11424
// case engine of engine_solar :
11228: LD_VAR 0 2
11232: PUSH
11233: LD_INT 2
11235: DOUBLE
11236: EQUAL
11237: IFTRUE 11241
11239: GO 11279
11241: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
11242: LD_ADDR_VAR 0 3
11246: PUSH
11247: LD_INT 11
11249: PUSH
11250: LD_INT 12
11252: PUSH
11253: LD_INT 13
11255: PUSH
11256: LD_INT 14
11258: PUSH
11259: LD_INT 1
11261: PUSH
11262: LD_INT 2
11264: PUSH
11265: LD_INT 3
11267: PUSH
11268: EMPTY
11269: LIST
11270: LIST
11271: LIST
11272: LIST
11273: LIST
11274: LIST
11275: LIST
11276: ST_TO_ADDR
11277: GO 11408
11279: LD_INT 1
11281: DOUBLE
11282: EQUAL
11283: IFTRUE 11287
11285: GO 11349
11287: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
11288: LD_ADDR_VAR 0 3
11292: PUSH
11293: LD_INT 11
11295: PUSH
11296: LD_INT 12
11298: PUSH
11299: LD_INT 13
11301: PUSH
11302: LD_INT 14
11304: PUSH
11305: LD_INT 1
11307: PUSH
11308: LD_INT 2
11310: PUSH
11311: LD_INT 3
11313: PUSH
11314: LD_INT 4
11316: PUSH
11317: LD_INT 5
11319: PUSH
11320: LD_INT 21
11322: PUSH
11323: LD_INT 23
11325: PUSH
11326: LD_INT 22
11328: PUSH
11329: LD_INT 24
11331: PUSH
11332: EMPTY
11333: LIST
11334: LIST
11335: LIST
11336: LIST
11337: LIST
11338: LIST
11339: LIST
11340: LIST
11341: LIST
11342: LIST
11343: LIST
11344: LIST
11345: LIST
11346: ST_TO_ADDR
11347: GO 11408
11349: LD_INT 3
11351: DOUBLE
11352: EQUAL
11353: IFTRUE 11357
11355: GO 11407
11357: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
11358: LD_ADDR_VAR 0 3
11362: PUSH
11363: LD_INT 13
11365: PUSH
11366: LD_INT 14
11368: PUSH
11369: LD_INT 2
11371: PUSH
11372: LD_INT 3
11374: PUSH
11375: LD_INT 4
11377: PUSH
11378: LD_INT 5
11380: PUSH
11381: LD_INT 21
11383: PUSH
11384: LD_INT 22
11386: PUSH
11387: LD_INT 23
11389: PUSH
11390: LD_INT 24
11392: PUSH
11393: EMPTY
11394: LIST
11395: LIST
11396: LIST
11397: LIST
11398: LIST
11399: LIST
11400: LIST
11401: LIST
11402: LIST
11403: LIST
11404: ST_TO_ADDR
11405: GO 11408
11407: POP
// result := ( chassis in result ) ;
11408: LD_ADDR_VAR 0 3
11412: PUSH
11413: LD_VAR 0 1
11417: PUSH
11418: LD_VAR 0 3
11422: IN
11423: ST_TO_ADDR
// end ;
11424: LD_VAR 0 3
11428: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
11429: LD_INT 0
11431: PPUSH
// if not chassis or not weapon then
11432: LD_VAR 0 1
11436: NOT
11437: PUSH
11438: LD_VAR 0 2
11442: NOT
11443: OR
11444: IFFALSE 11448
// exit ;
11446: GO 12508
// case weapon of us_machine_gun :
11448: LD_VAR 0 2
11452: PUSH
11453: LD_INT 2
11455: DOUBLE
11456: EQUAL
11457: IFTRUE 11461
11459: GO 11491
11461: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
11462: LD_ADDR_VAR 0 3
11466: PUSH
11467: LD_INT 1
11469: PUSH
11470: LD_INT 2
11472: PUSH
11473: LD_INT 3
11475: PUSH
11476: LD_INT 4
11478: PUSH
11479: LD_INT 5
11481: PUSH
11482: EMPTY
11483: LIST
11484: LIST
11485: LIST
11486: LIST
11487: LIST
11488: ST_TO_ADDR
11489: GO 12492
11491: LD_INT 3
11493: DOUBLE
11494: EQUAL
11495: IFTRUE 11499
11497: GO 11529
11499: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
11500: LD_ADDR_VAR 0 3
11504: PUSH
11505: LD_INT 1
11507: PUSH
11508: LD_INT 2
11510: PUSH
11511: LD_INT 3
11513: PUSH
11514: LD_INT 4
11516: PUSH
11517: LD_INT 5
11519: PUSH
11520: EMPTY
11521: LIST
11522: LIST
11523: LIST
11524: LIST
11525: LIST
11526: ST_TO_ADDR
11527: GO 12492
11529: LD_INT 11
11531: DOUBLE
11532: EQUAL
11533: IFTRUE 11537
11535: GO 11567
11537: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
11538: LD_ADDR_VAR 0 3
11542: PUSH
11543: LD_INT 1
11545: PUSH
11546: LD_INT 2
11548: PUSH
11549: LD_INT 3
11551: PUSH
11552: LD_INT 4
11554: PUSH
11555: LD_INT 5
11557: PUSH
11558: EMPTY
11559: LIST
11560: LIST
11561: LIST
11562: LIST
11563: LIST
11564: ST_TO_ADDR
11565: GO 12492
11567: LD_INT 4
11569: DOUBLE
11570: EQUAL
11571: IFTRUE 11575
11573: GO 11601
11575: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
11576: LD_ADDR_VAR 0 3
11580: PUSH
11581: LD_INT 2
11583: PUSH
11584: LD_INT 3
11586: PUSH
11587: LD_INT 4
11589: PUSH
11590: LD_INT 5
11592: PUSH
11593: EMPTY
11594: LIST
11595: LIST
11596: LIST
11597: LIST
11598: ST_TO_ADDR
11599: GO 12492
11601: LD_INT 5
11603: DOUBLE
11604: EQUAL
11605: IFTRUE 11609
11607: GO 11635
11609: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
11610: LD_ADDR_VAR 0 3
11614: PUSH
11615: LD_INT 2
11617: PUSH
11618: LD_INT 3
11620: PUSH
11621: LD_INT 4
11623: PUSH
11624: LD_INT 5
11626: PUSH
11627: EMPTY
11628: LIST
11629: LIST
11630: LIST
11631: LIST
11632: ST_TO_ADDR
11633: GO 12492
11635: LD_INT 9
11637: DOUBLE
11638: EQUAL
11639: IFTRUE 11643
11641: GO 11669
11643: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
11644: LD_ADDR_VAR 0 3
11648: PUSH
11649: LD_INT 2
11651: PUSH
11652: LD_INT 3
11654: PUSH
11655: LD_INT 4
11657: PUSH
11658: LD_INT 5
11660: PUSH
11661: EMPTY
11662: LIST
11663: LIST
11664: LIST
11665: LIST
11666: ST_TO_ADDR
11667: GO 12492
11669: LD_INT 7
11671: DOUBLE
11672: EQUAL
11673: IFTRUE 11677
11675: GO 11703
11677: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
11678: LD_ADDR_VAR 0 3
11682: PUSH
11683: LD_INT 2
11685: PUSH
11686: LD_INT 3
11688: PUSH
11689: LD_INT 4
11691: PUSH
11692: LD_INT 5
11694: PUSH
11695: EMPTY
11696: LIST
11697: LIST
11698: LIST
11699: LIST
11700: ST_TO_ADDR
11701: GO 12492
11703: LD_INT 12
11705: DOUBLE
11706: EQUAL
11707: IFTRUE 11711
11709: GO 11737
11711: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
11712: LD_ADDR_VAR 0 3
11716: PUSH
11717: LD_INT 2
11719: PUSH
11720: LD_INT 3
11722: PUSH
11723: LD_INT 4
11725: PUSH
11726: LD_INT 5
11728: PUSH
11729: EMPTY
11730: LIST
11731: LIST
11732: LIST
11733: LIST
11734: ST_TO_ADDR
11735: GO 12492
11737: LD_INT 13
11739: DOUBLE
11740: EQUAL
11741: IFTRUE 11745
11743: GO 11771
11745: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
11746: LD_ADDR_VAR 0 3
11750: PUSH
11751: LD_INT 2
11753: PUSH
11754: LD_INT 3
11756: PUSH
11757: LD_INT 4
11759: PUSH
11760: LD_INT 5
11762: PUSH
11763: EMPTY
11764: LIST
11765: LIST
11766: LIST
11767: LIST
11768: ST_TO_ADDR
11769: GO 12492
11771: LD_INT 14
11773: DOUBLE
11774: EQUAL
11775: IFTRUE 11779
11777: GO 11797
11779: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
11780: LD_ADDR_VAR 0 3
11784: PUSH
11785: LD_INT 4
11787: PUSH
11788: LD_INT 5
11790: PUSH
11791: EMPTY
11792: LIST
11793: LIST
11794: ST_TO_ADDR
11795: GO 12492
11797: LD_INT 6
11799: DOUBLE
11800: EQUAL
11801: IFTRUE 11805
11803: GO 11823
11805: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
11806: LD_ADDR_VAR 0 3
11810: PUSH
11811: LD_INT 4
11813: PUSH
11814: LD_INT 5
11816: PUSH
11817: EMPTY
11818: LIST
11819: LIST
11820: ST_TO_ADDR
11821: GO 12492
11823: LD_INT 10
11825: DOUBLE
11826: EQUAL
11827: IFTRUE 11831
11829: GO 11849
11831: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
11832: LD_ADDR_VAR 0 3
11836: PUSH
11837: LD_INT 4
11839: PUSH
11840: LD_INT 5
11842: PUSH
11843: EMPTY
11844: LIST
11845: LIST
11846: ST_TO_ADDR
11847: GO 12492
11849: LD_INT 22
11851: DOUBLE
11852: EQUAL
11853: IFTRUE 11857
11855: GO 11883
11857: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
11858: LD_ADDR_VAR 0 3
11862: PUSH
11863: LD_INT 11
11865: PUSH
11866: LD_INT 12
11868: PUSH
11869: LD_INT 13
11871: PUSH
11872: LD_INT 14
11874: PUSH
11875: EMPTY
11876: LIST
11877: LIST
11878: LIST
11879: LIST
11880: ST_TO_ADDR
11881: GO 12492
11883: LD_INT 23
11885: DOUBLE
11886: EQUAL
11887: IFTRUE 11891
11889: GO 11917
11891: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
11892: LD_ADDR_VAR 0 3
11896: PUSH
11897: LD_INT 11
11899: PUSH
11900: LD_INT 12
11902: PUSH
11903: LD_INT 13
11905: PUSH
11906: LD_INT 14
11908: PUSH
11909: EMPTY
11910: LIST
11911: LIST
11912: LIST
11913: LIST
11914: ST_TO_ADDR
11915: GO 12492
11917: LD_INT 24
11919: DOUBLE
11920: EQUAL
11921: IFTRUE 11925
11923: GO 11951
11925: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
11926: LD_ADDR_VAR 0 3
11930: PUSH
11931: LD_INT 11
11933: PUSH
11934: LD_INT 12
11936: PUSH
11937: LD_INT 13
11939: PUSH
11940: LD_INT 14
11942: PUSH
11943: EMPTY
11944: LIST
11945: LIST
11946: LIST
11947: LIST
11948: ST_TO_ADDR
11949: GO 12492
11951: LD_INT 30
11953: DOUBLE
11954: EQUAL
11955: IFTRUE 11959
11957: GO 11985
11959: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
11960: LD_ADDR_VAR 0 3
11964: PUSH
11965: LD_INT 11
11967: PUSH
11968: LD_INT 12
11970: PUSH
11971: LD_INT 13
11973: PUSH
11974: LD_INT 14
11976: PUSH
11977: EMPTY
11978: LIST
11979: LIST
11980: LIST
11981: LIST
11982: ST_TO_ADDR
11983: GO 12492
11985: LD_INT 25
11987: DOUBLE
11988: EQUAL
11989: IFTRUE 11993
11991: GO 12011
11993: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
11994: LD_ADDR_VAR 0 3
11998: PUSH
11999: LD_INT 13
12001: PUSH
12002: LD_INT 14
12004: PUSH
12005: EMPTY
12006: LIST
12007: LIST
12008: ST_TO_ADDR
12009: GO 12492
12011: LD_INT 27
12013: DOUBLE
12014: EQUAL
12015: IFTRUE 12019
12017: GO 12037
12019: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
12020: LD_ADDR_VAR 0 3
12024: PUSH
12025: LD_INT 13
12027: PUSH
12028: LD_INT 14
12030: PUSH
12031: EMPTY
12032: LIST
12033: LIST
12034: ST_TO_ADDR
12035: GO 12492
12037: LD_INT 92
12039: DOUBLE
12040: EQUAL
12041: IFTRUE 12045
12043: GO 12071
12045: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
12046: LD_ADDR_VAR 0 3
12050: PUSH
12051: LD_INT 11
12053: PUSH
12054: LD_INT 12
12056: PUSH
12057: LD_INT 13
12059: PUSH
12060: LD_INT 14
12062: PUSH
12063: EMPTY
12064: LIST
12065: LIST
12066: LIST
12067: LIST
12068: ST_TO_ADDR
12069: GO 12492
12071: LD_INT 28
12073: DOUBLE
12074: EQUAL
12075: IFTRUE 12079
12077: GO 12097
12079: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
12080: LD_ADDR_VAR 0 3
12084: PUSH
12085: LD_INT 13
12087: PUSH
12088: LD_INT 14
12090: PUSH
12091: EMPTY
12092: LIST
12093: LIST
12094: ST_TO_ADDR
12095: GO 12492
12097: LD_INT 29
12099: DOUBLE
12100: EQUAL
12101: IFTRUE 12105
12103: GO 12123
12105: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
12106: LD_ADDR_VAR 0 3
12110: PUSH
12111: LD_INT 13
12113: PUSH
12114: LD_INT 14
12116: PUSH
12117: EMPTY
12118: LIST
12119: LIST
12120: ST_TO_ADDR
12121: GO 12492
12123: LD_INT 31
12125: DOUBLE
12126: EQUAL
12127: IFTRUE 12131
12129: GO 12149
12131: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
12132: LD_ADDR_VAR 0 3
12136: PUSH
12137: LD_INT 13
12139: PUSH
12140: LD_INT 14
12142: PUSH
12143: EMPTY
12144: LIST
12145: LIST
12146: ST_TO_ADDR
12147: GO 12492
12149: LD_INT 26
12151: DOUBLE
12152: EQUAL
12153: IFTRUE 12157
12155: GO 12175
12157: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
12158: LD_ADDR_VAR 0 3
12162: PUSH
12163: LD_INT 13
12165: PUSH
12166: LD_INT 14
12168: PUSH
12169: EMPTY
12170: LIST
12171: LIST
12172: ST_TO_ADDR
12173: GO 12492
12175: LD_INT 42
12177: DOUBLE
12178: EQUAL
12179: IFTRUE 12183
12181: GO 12209
12183: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
12184: LD_ADDR_VAR 0 3
12188: PUSH
12189: LD_INT 21
12191: PUSH
12192: LD_INT 22
12194: PUSH
12195: LD_INT 23
12197: PUSH
12198: LD_INT 24
12200: PUSH
12201: EMPTY
12202: LIST
12203: LIST
12204: LIST
12205: LIST
12206: ST_TO_ADDR
12207: GO 12492
12209: LD_INT 43
12211: DOUBLE
12212: EQUAL
12213: IFTRUE 12217
12215: GO 12243
12217: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
12218: LD_ADDR_VAR 0 3
12222: PUSH
12223: LD_INT 21
12225: PUSH
12226: LD_INT 22
12228: PUSH
12229: LD_INT 23
12231: PUSH
12232: LD_INT 24
12234: PUSH
12235: EMPTY
12236: LIST
12237: LIST
12238: LIST
12239: LIST
12240: ST_TO_ADDR
12241: GO 12492
12243: LD_INT 44
12245: DOUBLE
12246: EQUAL
12247: IFTRUE 12251
12249: GO 12277
12251: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
12252: LD_ADDR_VAR 0 3
12256: PUSH
12257: LD_INT 21
12259: PUSH
12260: LD_INT 22
12262: PUSH
12263: LD_INT 23
12265: PUSH
12266: LD_INT 24
12268: PUSH
12269: EMPTY
12270: LIST
12271: LIST
12272: LIST
12273: LIST
12274: ST_TO_ADDR
12275: GO 12492
12277: LD_INT 45
12279: DOUBLE
12280: EQUAL
12281: IFTRUE 12285
12283: GO 12311
12285: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
12286: LD_ADDR_VAR 0 3
12290: PUSH
12291: LD_INT 21
12293: PUSH
12294: LD_INT 22
12296: PUSH
12297: LD_INT 23
12299: PUSH
12300: LD_INT 24
12302: PUSH
12303: EMPTY
12304: LIST
12305: LIST
12306: LIST
12307: LIST
12308: ST_TO_ADDR
12309: GO 12492
12311: LD_INT 49
12313: DOUBLE
12314: EQUAL
12315: IFTRUE 12319
12317: GO 12345
12319: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
12320: LD_ADDR_VAR 0 3
12324: PUSH
12325: LD_INT 21
12327: PUSH
12328: LD_INT 22
12330: PUSH
12331: LD_INT 23
12333: PUSH
12334: LD_INT 24
12336: PUSH
12337: EMPTY
12338: LIST
12339: LIST
12340: LIST
12341: LIST
12342: ST_TO_ADDR
12343: GO 12492
12345: LD_INT 51
12347: DOUBLE
12348: EQUAL
12349: IFTRUE 12353
12351: GO 12379
12353: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
12354: LD_ADDR_VAR 0 3
12358: PUSH
12359: LD_INT 21
12361: PUSH
12362: LD_INT 22
12364: PUSH
12365: LD_INT 23
12367: PUSH
12368: LD_INT 24
12370: PUSH
12371: EMPTY
12372: LIST
12373: LIST
12374: LIST
12375: LIST
12376: ST_TO_ADDR
12377: GO 12492
12379: LD_INT 52
12381: DOUBLE
12382: EQUAL
12383: IFTRUE 12387
12385: GO 12413
12387: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
12388: LD_ADDR_VAR 0 3
12392: PUSH
12393: LD_INT 21
12395: PUSH
12396: LD_INT 22
12398: PUSH
12399: LD_INT 23
12401: PUSH
12402: LD_INT 24
12404: PUSH
12405: EMPTY
12406: LIST
12407: LIST
12408: LIST
12409: LIST
12410: ST_TO_ADDR
12411: GO 12492
12413: LD_INT 53
12415: DOUBLE
12416: EQUAL
12417: IFTRUE 12421
12419: GO 12439
12421: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
12422: LD_ADDR_VAR 0 3
12426: PUSH
12427: LD_INT 23
12429: PUSH
12430: LD_INT 24
12432: PUSH
12433: EMPTY
12434: LIST
12435: LIST
12436: ST_TO_ADDR
12437: GO 12492
12439: LD_INT 46
12441: DOUBLE
12442: EQUAL
12443: IFTRUE 12447
12445: GO 12465
12447: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
12448: LD_ADDR_VAR 0 3
12452: PUSH
12453: LD_INT 23
12455: PUSH
12456: LD_INT 24
12458: PUSH
12459: EMPTY
12460: LIST
12461: LIST
12462: ST_TO_ADDR
12463: GO 12492
12465: LD_INT 47
12467: DOUBLE
12468: EQUAL
12469: IFTRUE 12473
12471: GO 12491
12473: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
12474: LD_ADDR_VAR 0 3
12478: PUSH
12479: LD_INT 23
12481: PUSH
12482: LD_INT 24
12484: PUSH
12485: EMPTY
12486: LIST
12487: LIST
12488: ST_TO_ADDR
12489: GO 12492
12491: POP
// result := ( chassis in result ) ;
12492: LD_ADDR_VAR 0 3
12496: PUSH
12497: LD_VAR 0 1
12501: PUSH
12502: LD_VAR 0 3
12506: IN
12507: ST_TO_ADDR
// end ;
12508: LD_VAR 0 3
12512: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
12513: LD_INT 0
12515: PPUSH
12516: PPUSH
12517: PPUSH
12518: PPUSH
12519: PPUSH
12520: PPUSH
12521: PPUSH
// result := array ;
12522: LD_ADDR_VAR 0 5
12526: PUSH
12527: LD_VAR 0 1
12531: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
12532: LD_VAR 0 1
12536: NOT
12537: PUSH
12538: LD_VAR 0 2
12542: NOT
12543: OR
12544: PUSH
12545: LD_VAR 0 3
12549: NOT
12550: OR
12551: PUSH
12552: LD_VAR 0 2
12556: PUSH
12557: LD_VAR 0 1
12561: GREATER
12562: OR
12563: PUSH
12564: LD_VAR 0 3
12568: PUSH
12569: LD_VAR 0 1
12573: GREATER
12574: OR
12575: IFFALSE 12579
// exit ;
12577: GO 12875
// if direction then
12579: LD_VAR 0 4
12583: IFFALSE 12647
// begin d := 1 ;
12585: LD_ADDR_VAR 0 9
12589: PUSH
12590: LD_INT 1
12592: ST_TO_ADDR
// if i_from > i_to then
12593: LD_VAR 0 2
12597: PUSH
12598: LD_VAR 0 3
12602: GREATER
12603: IFFALSE 12629
// length := ( array - i_from ) + i_to else
12605: LD_ADDR_VAR 0 11
12609: PUSH
12610: LD_VAR 0 1
12614: PUSH
12615: LD_VAR 0 2
12619: MINUS
12620: PUSH
12621: LD_VAR 0 3
12625: PLUS
12626: ST_TO_ADDR
12627: GO 12645
// length := i_to - i_from ;
12629: LD_ADDR_VAR 0 11
12633: PUSH
12634: LD_VAR 0 3
12638: PUSH
12639: LD_VAR 0 2
12643: MINUS
12644: ST_TO_ADDR
// end else
12645: GO 12708
// begin d := - 1 ;
12647: LD_ADDR_VAR 0 9
12651: PUSH
12652: LD_INT 1
12654: NEG
12655: ST_TO_ADDR
// if i_from > i_to then
12656: LD_VAR 0 2
12660: PUSH
12661: LD_VAR 0 3
12665: GREATER
12666: IFFALSE 12686
// length := i_from - i_to else
12668: LD_ADDR_VAR 0 11
12672: PUSH
12673: LD_VAR 0 2
12677: PUSH
12678: LD_VAR 0 3
12682: MINUS
12683: ST_TO_ADDR
12684: GO 12708
// length := ( array - i_to ) + i_from ;
12686: LD_ADDR_VAR 0 11
12690: PUSH
12691: LD_VAR 0 1
12695: PUSH
12696: LD_VAR 0 3
12700: MINUS
12701: PUSH
12702: LD_VAR 0 2
12706: PLUS
12707: ST_TO_ADDR
// end ; if not length then
12708: LD_VAR 0 11
12712: NOT
12713: IFFALSE 12717
// exit ;
12715: GO 12875
// tmp := array ;
12717: LD_ADDR_VAR 0 10
12721: PUSH
12722: LD_VAR 0 1
12726: ST_TO_ADDR
// for i = 1 to length do
12727: LD_ADDR_VAR 0 6
12731: PUSH
12732: DOUBLE
12733: LD_INT 1
12735: DEC
12736: ST_TO_ADDR
12737: LD_VAR 0 11
12741: PUSH
12742: FOR_TO
12743: IFFALSE 12863
// begin for j = 1 to array do
12745: LD_ADDR_VAR 0 7
12749: PUSH
12750: DOUBLE
12751: LD_INT 1
12753: DEC
12754: ST_TO_ADDR
12755: LD_VAR 0 1
12759: PUSH
12760: FOR_TO
12761: IFFALSE 12849
// begin k := j + d ;
12763: LD_ADDR_VAR 0 8
12767: PUSH
12768: LD_VAR 0 7
12772: PUSH
12773: LD_VAR 0 9
12777: PLUS
12778: ST_TO_ADDR
// if k > array then
12779: LD_VAR 0 8
12783: PUSH
12784: LD_VAR 0 1
12788: GREATER
12789: IFFALSE 12799
// k := 1 ;
12791: LD_ADDR_VAR 0 8
12795: PUSH
12796: LD_INT 1
12798: ST_TO_ADDR
// if not k then
12799: LD_VAR 0 8
12803: NOT
12804: IFFALSE 12816
// k := array ;
12806: LD_ADDR_VAR 0 8
12810: PUSH
12811: LD_VAR 0 1
12815: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
12816: LD_ADDR_VAR 0 10
12820: PUSH
12821: LD_VAR 0 10
12825: PPUSH
12826: LD_VAR 0 8
12830: PPUSH
12831: LD_VAR 0 1
12835: PUSH
12836: LD_VAR 0 7
12840: ARRAY
12841: PPUSH
12842: CALL_OW 1
12846: ST_TO_ADDR
// end ;
12847: GO 12760
12849: POP
12850: POP
// array := tmp ;
12851: LD_ADDR_VAR 0 1
12855: PUSH
12856: LD_VAR 0 10
12860: ST_TO_ADDR
// end ;
12861: GO 12742
12863: POP
12864: POP
// result := array ;
12865: LD_ADDR_VAR 0 5
12869: PUSH
12870: LD_VAR 0 1
12874: ST_TO_ADDR
// end ;
12875: LD_VAR 0 5
12879: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
12880: LD_INT 0
12882: PPUSH
12883: PPUSH
// result := 0 ;
12884: LD_ADDR_VAR 0 3
12888: PUSH
12889: LD_INT 0
12891: ST_TO_ADDR
// if not array or not value in array then
12892: LD_VAR 0 1
12896: NOT
12897: PUSH
12898: LD_VAR 0 2
12902: PUSH
12903: LD_VAR 0 1
12907: IN
12908: NOT
12909: OR
12910: IFFALSE 12914
// exit ;
12912: GO 12968
// for i = 1 to array do
12914: LD_ADDR_VAR 0 4
12918: PUSH
12919: DOUBLE
12920: LD_INT 1
12922: DEC
12923: ST_TO_ADDR
12924: LD_VAR 0 1
12928: PUSH
12929: FOR_TO
12930: IFFALSE 12966
// if value = array [ i ] then
12932: LD_VAR 0 2
12936: PUSH
12937: LD_VAR 0 1
12941: PUSH
12942: LD_VAR 0 4
12946: ARRAY
12947: EQUAL
12948: IFFALSE 12964
// begin result := i ;
12950: LD_ADDR_VAR 0 3
12954: PUSH
12955: LD_VAR 0 4
12959: ST_TO_ADDR
// exit ;
12960: POP
12961: POP
12962: GO 12968
// end ;
12964: GO 12929
12966: POP
12967: POP
// end ;
12968: LD_VAR 0 3
12972: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
12973: LD_INT 0
12975: PPUSH
// vc_chassis := chassis ;
12976: LD_ADDR_OWVAR 37
12980: PUSH
12981: LD_VAR 0 1
12985: ST_TO_ADDR
// vc_engine := engine ;
12986: LD_ADDR_OWVAR 39
12990: PUSH
12991: LD_VAR 0 2
12995: ST_TO_ADDR
// vc_control := control ;
12996: LD_ADDR_OWVAR 38
13000: PUSH
13001: LD_VAR 0 3
13005: ST_TO_ADDR
// vc_weapon := weapon ;
13006: LD_ADDR_OWVAR 40
13010: PUSH
13011: LD_VAR 0 4
13015: ST_TO_ADDR
// vc_fuel_battery := fuel ;
13016: LD_ADDR_OWVAR 41
13020: PUSH
13021: LD_VAR 0 5
13025: ST_TO_ADDR
// end ;
13026: LD_VAR 0 6
13030: RET
// export function WantPlant ( unit ) ; var task ; begin
13031: LD_INT 0
13033: PPUSH
13034: PPUSH
// result := false ;
13035: LD_ADDR_VAR 0 2
13039: PUSH
13040: LD_INT 0
13042: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
13043: LD_ADDR_VAR 0 3
13047: PUSH
13048: LD_VAR 0 1
13052: PPUSH
13053: CALL_OW 437
13057: ST_TO_ADDR
// if task then
13058: LD_VAR 0 3
13062: IFFALSE 13090
// if task [ 1 ] [ 1 ] = p then
13064: LD_VAR 0 3
13068: PUSH
13069: LD_INT 1
13071: ARRAY
13072: PUSH
13073: LD_INT 1
13075: ARRAY
13076: PUSH
13077: LD_STRING p
13079: EQUAL
13080: IFFALSE 13090
// result := true ;
13082: LD_ADDR_VAR 0 2
13086: PUSH
13087: LD_INT 1
13089: ST_TO_ADDR
// end ;
13090: LD_VAR 0 2
13094: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
13095: LD_INT 0
13097: PPUSH
13098: PPUSH
13099: PPUSH
13100: PPUSH
// if pos < 1 then
13101: LD_VAR 0 2
13105: PUSH
13106: LD_INT 1
13108: LESS
13109: IFFALSE 13113
// exit ;
13111: GO 13416
// if pos = 1 then
13113: LD_VAR 0 2
13117: PUSH
13118: LD_INT 1
13120: EQUAL
13121: IFFALSE 13154
// result := Replace ( arr , pos [ 1 ] , value ) else
13123: LD_ADDR_VAR 0 4
13127: PUSH
13128: LD_VAR 0 1
13132: PPUSH
13133: LD_VAR 0 2
13137: PUSH
13138: LD_INT 1
13140: ARRAY
13141: PPUSH
13142: LD_VAR 0 3
13146: PPUSH
13147: CALL_OW 1
13151: ST_TO_ADDR
13152: GO 13416
// begin tmp := arr ;
13154: LD_ADDR_VAR 0 6
13158: PUSH
13159: LD_VAR 0 1
13163: ST_TO_ADDR
// s_arr := [ tmp ] ;
13164: LD_ADDR_VAR 0 7
13168: PUSH
13169: LD_VAR 0 6
13173: PUSH
13174: EMPTY
13175: LIST
13176: ST_TO_ADDR
// for i = 1 to pos - 1 do
13177: LD_ADDR_VAR 0 5
13181: PUSH
13182: DOUBLE
13183: LD_INT 1
13185: DEC
13186: ST_TO_ADDR
13187: LD_VAR 0 2
13191: PUSH
13192: LD_INT 1
13194: MINUS
13195: PUSH
13196: FOR_TO
13197: IFFALSE 13242
// begin tmp := tmp [ pos [ i ] ] ;
13199: LD_ADDR_VAR 0 6
13203: PUSH
13204: LD_VAR 0 6
13208: PUSH
13209: LD_VAR 0 2
13213: PUSH
13214: LD_VAR 0 5
13218: ARRAY
13219: ARRAY
13220: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
13221: LD_ADDR_VAR 0 7
13225: PUSH
13226: LD_VAR 0 7
13230: PUSH
13231: LD_VAR 0 6
13235: PUSH
13236: EMPTY
13237: LIST
13238: ADD
13239: ST_TO_ADDR
// end ;
13240: GO 13196
13242: POP
13243: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
13244: LD_ADDR_VAR 0 6
13248: PUSH
13249: LD_VAR 0 6
13253: PPUSH
13254: LD_VAR 0 2
13258: PUSH
13259: LD_VAR 0 2
13263: ARRAY
13264: PPUSH
13265: LD_VAR 0 3
13269: PPUSH
13270: CALL_OW 1
13274: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
13275: LD_ADDR_VAR 0 7
13279: PUSH
13280: LD_VAR 0 7
13284: PPUSH
13285: LD_VAR 0 7
13289: PPUSH
13290: LD_VAR 0 6
13294: PPUSH
13295: CALL_OW 1
13299: ST_TO_ADDR
// for i = s_arr downto 2 do
13300: LD_ADDR_VAR 0 5
13304: PUSH
13305: DOUBLE
13306: LD_VAR 0 7
13310: INC
13311: ST_TO_ADDR
13312: LD_INT 2
13314: PUSH
13315: FOR_DOWNTO
13316: IFFALSE 13400
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
13318: LD_ADDR_VAR 0 6
13322: PUSH
13323: LD_VAR 0 7
13327: PUSH
13328: LD_VAR 0 5
13332: PUSH
13333: LD_INT 1
13335: MINUS
13336: ARRAY
13337: PPUSH
13338: LD_VAR 0 2
13342: PUSH
13343: LD_VAR 0 5
13347: PUSH
13348: LD_INT 1
13350: MINUS
13351: ARRAY
13352: PPUSH
13353: LD_VAR 0 7
13357: PUSH
13358: LD_VAR 0 5
13362: ARRAY
13363: PPUSH
13364: CALL_OW 1
13368: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
13369: LD_ADDR_VAR 0 7
13373: PUSH
13374: LD_VAR 0 7
13378: PPUSH
13379: LD_VAR 0 5
13383: PUSH
13384: LD_INT 1
13386: MINUS
13387: PPUSH
13388: LD_VAR 0 6
13392: PPUSH
13393: CALL_OW 1
13397: ST_TO_ADDR
// end ;
13398: GO 13315
13400: POP
13401: POP
// result := s_arr [ 1 ] ;
13402: LD_ADDR_VAR 0 4
13406: PUSH
13407: LD_VAR 0 7
13411: PUSH
13412: LD_INT 1
13414: ARRAY
13415: ST_TO_ADDR
// end ; end ;
13416: LD_VAR 0 4
13420: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
13421: LD_INT 0
13423: PPUSH
13424: PPUSH
// if not list then
13425: LD_VAR 0 1
13429: NOT
13430: IFFALSE 13434
// exit ;
13432: GO 13525
// i := list [ pos1 ] ;
13434: LD_ADDR_VAR 0 5
13438: PUSH
13439: LD_VAR 0 1
13443: PUSH
13444: LD_VAR 0 2
13448: ARRAY
13449: ST_TO_ADDR
// if not i then
13450: LD_VAR 0 5
13454: NOT
13455: IFFALSE 13459
// exit ;
13457: GO 13525
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
13459: LD_ADDR_VAR 0 1
13463: PUSH
13464: LD_VAR 0 1
13468: PPUSH
13469: LD_VAR 0 2
13473: PPUSH
13474: LD_VAR 0 1
13478: PUSH
13479: LD_VAR 0 3
13483: ARRAY
13484: PPUSH
13485: CALL_OW 1
13489: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
13490: LD_ADDR_VAR 0 1
13494: PUSH
13495: LD_VAR 0 1
13499: PPUSH
13500: LD_VAR 0 3
13504: PPUSH
13505: LD_VAR 0 5
13509: PPUSH
13510: CALL_OW 1
13514: ST_TO_ADDR
// result := list ;
13515: LD_ADDR_VAR 0 4
13519: PUSH
13520: LD_VAR 0 1
13524: ST_TO_ADDR
// end ;
13525: LD_VAR 0 4
13529: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
13530: LD_INT 0
13532: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
13533: LD_ADDR_VAR 0 5
13537: PUSH
13538: LD_VAR 0 1
13542: PPUSH
13543: CALL_OW 250
13547: PPUSH
13548: LD_VAR 0 1
13552: PPUSH
13553: CALL_OW 251
13557: PPUSH
13558: LD_VAR 0 2
13562: PPUSH
13563: LD_VAR 0 3
13567: PPUSH
13568: LD_VAR 0 4
13572: PPUSH
13573: CALL 13583 0 5
13577: ST_TO_ADDR
// end ;
13578: LD_VAR 0 5
13582: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
13583: LD_INT 0
13585: PPUSH
13586: PPUSH
13587: PPUSH
13588: PPUSH
// if not list then
13589: LD_VAR 0 3
13593: NOT
13594: IFFALSE 13598
// exit ;
13596: GO 13986
// result := [ ] ;
13598: LD_ADDR_VAR 0 6
13602: PUSH
13603: EMPTY
13604: ST_TO_ADDR
// for i in list do
13605: LD_ADDR_VAR 0 7
13609: PUSH
13610: LD_VAR 0 3
13614: PUSH
13615: FOR_IN
13616: IFFALSE 13818
// begin tmp := GetDistUnitXY ( i , x , y ) ;
13618: LD_ADDR_VAR 0 9
13622: PUSH
13623: LD_VAR 0 7
13627: PPUSH
13628: LD_VAR 0 1
13632: PPUSH
13633: LD_VAR 0 2
13637: PPUSH
13638: CALL_OW 297
13642: ST_TO_ADDR
// if not result then
13643: LD_VAR 0 6
13647: NOT
13648: IFFALSE 13674
// result := [ [ i , tmp ] ] else
13650: LD_ADDR_VAR 0 6
13654: PUSH
13655: LD_VAR 0 7
13659: PUSH
13660: LD_VAR 0 9
13664: PUSH
13665: EMPTY
13666: LIST
13667: LIST
13668: PUSH
13669: EMPTY
13670: LIST
13671: ST_TO_ADDR
13672: GO 13816
// begin if result [ result ] [ 2 ] < tmp then
13674: LD_VAR 0 6
13678: PUSH
13679: LD_VAR 0 6
13683: ARRAY
13684: PUSH
13685: LD_INT 2
13687: ARRAY
13688: PUSH
13689: LD_VAR 0 9
13693: LESS
13694: IFFALSE 13736
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
13696: LD_ADDR_VAR 0 6
13700: PUSH
13701: LD_VAR 0 6
13705: PPUSH
13706: LD_VAR 0 6
13710: PUSH
13711: LD_INT 1
13713: PLUS
13714: PPUSH
13715: LD_VAR 0 7
13719: PUSH
13720: LD_VAR 0 9
13724: PUSH
13725: EMPTY
13726: LIST
13727: LIST
13728: PPUSH
13729: CALL_OW 2
13733: ST_TO_ADDR
13734: GO 13816
// for j = 1 to result do
13736: LD_ADDR_VAR 0 8
13740: PUSH
13741: DOUBLE
13742: LD_INT 1
13744: DEC
13745: ST_TO_ADDR
13746: LD_VAR 0 6
13750: PUSH
13751: FOR_TO
13752: IFFALSE 13814
// begin if tmp < result [ j ] [ 2 ] then
13754: LD_VAR 0 9
13758: PUSH
13759: LD_VAR 0 6
13763: PUSH
13764: LD_VAR 0 8
13768: ARRAY
13769: PUSH
13770: LD_INT 2
13772: ARRAY
13773: LESS
13774: IFFALSE 13812
// begin result := Insert ( result , j , [ i , tmp ] ) ;
13776: LD_ADDR_VAR 0 6
13780: PUSH
13781: LD_VAR 0 6
13785: PPUSH
13786: LD_VAR 0 8
13790: PPUSH
13791: LD_VAR 0 7
13795: PUSH
13796: LD_VAR 0 9
13800: PUSH
13801: EMPTY
13802: LIST
13803: LIST
13804: PPUSH
13805: CALL_OW 2
13809: ST_TO_ADDR
// break ;
13810: GO 13814
// end ; end ;
13812: GO 13751
13814: POP
13815: POP
// end ; end ;
13816: GO 13615
13818: POP
13819: POP
// if result and not asc then
13820: LD_VAR 0 6
13824: PUSH
13825: LD_VAR 0 4
13829: NOT
13830: AND
13831: IFFALSE 13906
// begin tmp := result ;
13833: LD_ADDR_VAR 0 9
13837: PUSH
13838: LD_VAR 0 6
13842: ST_TO_ADDR
// for i = tmp downto 1 do
13843: LD_ADDR_VAR 0 7
13847: PUSH
13848: DOUBLE
13849: LD_VAR 0 9
13853: INC
13854: ST_TO_ADDR
13855: LD_INT 1
13857: PUSH
13858: FOR_DOWNTO
13859: IFFALSE 13904
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
13861: LD_ADDR_VAR 0 6
13865: PUSH
13866: LD_VAR 0 6
13870: PPUSH
13871: LD_VAR 0 9
13875: PUSH
13876: LD_VAR 0 7
13880: MINUS
13881: PUSH
13882: LD_INT 1
13884: PLUS
13885: PPUSH
13886: LD_VAR 0 9
13890: PUSH
13891: LD_VAR 0 7
13895: ARRAY
13896: PPUSH
13897: CALL_OW 1
13901: ST_TO_ADDR
13902: GO 13858
13904: POP
13905: POP
// end ; tmp := [ ] ;
13906: LD_ADDR_VAR 0 9
13910: PUSH
13911: EMPTY
13912: ST_TO_ADDR
// if mode then
13913: LD_VAR 0 5
13917: IFFALSE 13986
// begin for i = 1 to result do
13919: LD_ADDR_VAR 0 7
13923: PUSH
13924: DOUBLE
13925: LD_INT 1
13927: DEC
13928: ST_TO_ADDR
13929: LD_VAR 0 6
13933: PUSH
13934: FOR_TO
13935: IFFALSE 13974
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
13937: LD_ADDR_VAR 0 9
13941: PUSH
13942: LD_VAR 0 9
13946: PPUSH
13947: LD_VAR 0 7
13951: PPUSH
13952: LD_VAR 0 6
13956: PUSH
13957: LD_VAR 0 7
13961: ARRAY
13962: PUSH
13963: LD_INT 1
13965: ARRAY
13966: PPUSH
13967: CALL_OW 1
13971: ST_TO_ADDR
13972: GO 13934
13974: POP
13975: POP
// result := tmp ;
13976: LD_ADDR_VAR 0 6
13980: PUSH
13981: LD_VAR 0 9
13985: ST_TO_ADDR
// end ; end ;
13986: LD_VAR 0 6
13990: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
13991: LD_INT 0
13993: PPUSH
13994: PPUSH
13995: PPUSH
13996: PPUSH
13997: PPUSH
13998: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
13999: LD_ADDR_VAR 0 5
14003: PUSH
14004: LD_INT 0
14006: PUSH
14007: LD_INT 0
14009: PUSH
14010: LD_INT 0
14012: PUSH
14013: EMPTY
14014: PUSH
14015: EMPTY
14016: LIST
14017: LIST
14018: LIST
14019: LIST
14020: ST_TO_ADDR
// if not x or not y then
14021: LD_VAR 0 2
14025: NOT
14026: PUSH
14027: LD_VAR 0 3
14031: NOT
14032: OR
14033: IFFALSE 14037
// exit ;
14035: GO 15687
// if not range then
14037: LD_VAR 0 4
14041: NOT
14042: IFFALSE 14052
// range := 10 ;
14044: LD_ADDR_VAR 0 4
14048: PUSH
14049: LD_INT 10
14051: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
14052: LD_ADDR_VAR 0 8
14056: PUSH
14057: LD_INT 81
14059: PUSH
14060: LD_VAR 0 1
14064: PUSH
14065: EMPTY
14066: LIST
14067: LIST
14068: PUSH
14069: LD_INT 92
14071: PUSH
14072: LD_VAR 0 2
14076: PUSH
14077: LD_VAR 0 3
14081: PUSH
14082: LD_VAR 0 4
14086: PUSH
14087: EMPTY
14088: LIST
14089: LIST
14090: LIST
14091: LIST
14092: PUSH
14093: LD_INT 3
14095: PUSH
14096: LD_INT 21
14098: PUSH
14099: LD_INT 3
14101: PUSH
14102: EMPTY
14103: LIST
14104: LIST
14105: PUSH
14106: EMPTY
14107: LIST
14108: LIST
14109: PUSH
14110: EMPTY
14111: LIST
14112: LIST
14113: LIST
14114: PPUSH
14115: CALL_OW 69
14119: ST_TO_ADDR
// if not tmp then
14120: LD_VAR 0 8
14124: NOT
14125: IFFALSE 14129
// exit ;
14127: GO 15687
// for i in tmp do
14129: LD_ADDR_VAR 0 6
14133: PUSH
14134: LD_VAR 0 8
14138: PUSH
14139: FOR_IN
14140: IFFALSE 15662
// begin points := [ 0 , 0 , 0 ] ;
14142: LD_ADDR_VAR 0 9
14146: PUSH
14147: LD_INT 0
14149: PUSH
14150: LD_INT 0
14152: PUSH
14153: LD_INT 0
14155: PUSH
14156: EMPTY
14157: LIST
14158: LIST
14159: LIST
14160: ST_TO_ADDR
// bpoints := 1 ;
14161: LD_ADDR_VAR 0 10
14165: PUSH
14166: LD_INT 1
14168: ST_TO_ADDR
// case GetType ( i ) of unit_human :
14169: LD_VAR 0 6
14173: PPUSH
14174: CALL_OW 247
14178: PUSH
14179: LD_INT 1
14181: DOUBLE
14182: EQUAL
14183: IFTRUE 14187
14185: GO 14765
14187: POP
// begin if GetClass ( i ) = 1 then
14188: LD_VAR 0 6
14192: PPUSH
14193: CALL_OW 257
14197: PUSH
14198: LD_INT 1
14200: EQUAL
14201: IFFALSE 14222
// points := [ 10 , 5 , 3 ] ;
14203: LD_ADDR_VAR 0 9
14207: PUSH
14208: LD_INT 10
14210: PUSH
14211: LD_INT 5
14213: PUSH
14214: LD_INT 3
14216: PUSH
14217: EMPTY
14218: LIST
14219: LIST
14220: LIST
14221: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
14222: LD_VAR 0 6
14226: PPUSH
14227: CALL_OW 257
14231: PUSH
14232: LD_INT 2
14234: PUSH
14235: LD_INT 3
14237: PUSH
14238: LD_INT 4
14240: PUSH
14241: EMPTY
14242: LIST
14243: LIST
14244: LIST
14245: IN
14246: IFFALSE 14267
// points := [ 3 , 2 , 1 ] ;
14248: LD_ADDR_VAR 0 9
14252: PUSH
14253: LD_INT 3
14255: PUSH
14256: LD_INT 2
14258: PUSH
14259: LD_INT 1
14261: PUSH
14262: EMPTY
14263: LIST
14264: LIST
14265: LIST
14266: ST_TO_ADDR
// if GetClass ( i ) = 5 then
14267: LD_VAR 0 6
14271: PPUSH
14272: CALL_OW 257
14276: PUSH
14277: LD_INT 5
14279: EQUAL
14280: IFFALSE 14301
// points := [ 130 , 5 , 2 ] ;
14282: LD_ADDR_VAR 0 9
14286: PUSH
14287: LD_INT 130
14289: PUSH
14290: LD_INT 5
14292: PUSH
14293: LD_INT 2
14295: PUSH
14296: EMPTY
14297: LIST
14298: LIST
14299: LIST
14300: ST_TO_ADDR
// if GetClass ( i ) = 8 then
14301: LD_VAR 0 6
14305: PPUSH
14306: CALL_OW 257
14310: PUSH
14311: LD_INT 8
14313: EQUAL
14314: IFFALSE 14335
// points := [ 35 , 35 , 30 ] ;
14316: LD_ADDR_VAR 0 9
14320: PUSH
14321: LD_INT 35
14323: PUSH
14324: LD_INT 35
14326: PUSH
14327: LD_INT 30
14329: PUSH
14330: EMPTY
14331: LIST
14332: LIST
14333: LIST
14334: ST_TO_ADDR
// if GetClass ( i ) = 9 then
14335: LD_VAR 0 6
14339: PPUSH
14340: CALL_OW 257
14344: PUSH
14345: LD_INT 9
14347: EQUAL
14348: IFFALSE 14369
// points := [ 20 , 55 , 40 ] ;
14350: LD_ADDR_VAR 0 9
14354: PUSH
14355: LD_INT 20
14357: PUSH
14358: LD_INT 55
14360: PUSH
14361: LD_INT 40
14363: PUSH
14364: EMPTY
14365: LIST
14366: LIST
14367: LIST
14368: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
14369: LD_VAR 0 6
14373: PPUSH
14374: CALL_OW 257
14378: PUSH
14379: LD_INT 12
14381: PUSH
14382: LD_INT 16
14384: PUSH
14385: EMPTY
14386: LIST
14387: LIST
14388: IN
14389: IFFALSE 14410
// points := [ 5 , 3 , 2 ] ;
14391: LD_ADDR_VAR 0 9
14395: PUSH
14396: LD_INT 5
14398: PUSH
14399: LD_INT 3
14401: PUSH
14402: LD_INT 2
14404: PUSH
14405: EMPTY
14406: LIST
14407: LIST
14408: LIST
14409: ST_TO_ADDR
// if GetClass ( i ) = 17 then
14410: LD_VAR 0 6
14414: PPUSH
14415: CALL_OW 257
14419: PUSH
14420: LD_INT 17
14422: EQUAL
14423: IFFALSE 14444
// points := [ 100 , 50 , 75 ] ;
14425: LD_ADDR_VAR 0 9
14429: PUSH
14430: LD_INT 100
14432: PUSH
14433: LD_INT 50
14435: PUSH
14436: LD_INT 75
14438: PUSH
14439: EMPTY
14440: LIST
14441: LIST
14442: LIST
14443: ST_TO_ADDR
// if GetClass ( i ) = 15 then
14444: LD_VAR 0 6
14448: PPUSH
14449: CALL_OW 257
14453: PUSH
14454: LD_INT 15
14456: EQUAL
14457: IFFALSE 14478
// points := [ 10 , 5 , 3 ] ;
14459: LD_ADDR_VAR 0 9
14463: PUSH
14464: LD_INT 10
14466: PUSH
14467: LD_INT 5
14469: PUSH
14470: LD_INT 3
14472: PUSH
14473: EMPTY
14474: LIST
14475: LIST
14476: LIST
14477: ST_TO_ADDR
// if GetClass ( i ) = 14 then
14478: LD_VAR 0 6
14482: PPUSH
14483: CALL_OW 257
14487: PUSH
14488: LD_INT 14
14490: EQUAL
14491: IFFALSE 14512
// points := [ 10 , 0 , 0 ] ;
14493: LD_ADDR_VAR 0 9
14497: PUSH
14498: LD_INT 10
14500: PUSH
14501: LD_INT 0
14503: PUSH
14504: LD_INT 0
14506: PUSH
14507: EMPTY
14508: LIST
14509: LIST
14510: LIST
14511: ST_TO_ADDR
// if GetClass ( i ) = 11 then
14512: LD_VAR 0 6
14516: PPUSH
14517: CALL_OW 257
14521: PUSH
14522: LD_INT 11
14524: EQUAL
14525: IFFALSE 14546
// points := [ 30 , 10 , 5 ] ;
14527: LD_ADDR_VAR 0 9
14531: PUSH
14532: LD_INT 30
14534: PUSH
14535: LD_INT 10
14537: PUSH
14538: LD_INT 5
14540: PUSH
14541: EMPTY
14542: LIST
14543: LIST
14544: LIST
14545: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
14546: LD_VAR 0 1
14550: PPUSH
14551: LD_INT 5
14553: PPUSH
14554: CALL_OW 321
14558: PUSH
14559: LD_INT 2
14561: EQUAL
14562: IFFALSE 14579
// bpoints := bpoints * 1.8 ;
14564: LD_ADDR_VAR 0 10
14568: PUSH
14569: LD_VAR 0 10
14573: PUSH
14574: LD_REAL  1.80000000000000E+0000
14577: MUL
14578: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
14579: LD_VAR 0 6
14583: PPUSH
14584: CALL_OW 257
14588: PUSH
14589: LD_INT 1
14591: PUSH
14592: LD_INT 2
14594: PUSH
14595: LD_INT 3
14597: PUSH
14598: LD_INT 4
14600: PUSH
14601: EMPTY
14602: LIST
14603: LIST
14604: LIST
14605: LIST
14606: IN
14607: PUSH
14608: LD_VAR 0 1
14612: PPUSH
14613: LD_INT 51
14615: PPUSH
14616: CALL_OW 321
14620: PUSH
14621: LD_INT 2
14623: EQUAL
14624: AND
14625: IFFALSE 14642
// bpoints := bpoints * 1.2 ;
14627: LD_ADDR_VAR 0 10
14631: PUSH
14632: LD_VAR 0 10
14636: PUSH
14637: LD_REAL  1.20000000000000E+0000
14640: MUL
14641: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
14642: LD_VAR 0 6
14646: PPUSH
14647: CALL_OW 257
14651: PUSH
14652: LD_INT 5
14654: PUSH
14655: LD_INT 7
14657: PUSH
14658: LD_INT 9
14660: PUSH
14661: EMPTY
14662: LIST
14663: LIST
14664: LIST
14665: IN
14666: PUSH
14667: LD_VAR 0 1
14671: PPUSH
14672: LD_INT 52
14674: PPUSH
14675: CALL_OW 321
14679: PUSH
14680: LD_INT 2
14682: EQUAL
14683: AND
14684: IFFALSE 14701
// bpoints := bpoints * 1.5 ;
14686: LD_ADDR_VAR 0 10
14690: PUSH
14691: LD_VAR 0 10
14695: PUSH
14696: LD_REAL  1.50000000000000E+0000
14699: MUL
14700: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
14701: LD_VAR 0 1
14705: PPUSH
14706: LD_INT 66
14708: PPUSH
14709: CALL_OW 321
14713: PUSH
14714: LD_INT 2
14716: EQUAL
14717: IFFALSE 14734
// bpoints := bpoints * 1.1 ;
14719: LD_ADDR_VAR 0 10
14723: PUSH
14724: LD_VAR 0 10
14728: PUSH
14729: LD_REAL  1.10000000000000E+0000
14732: MUL
14733: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
14734: LD_ADDR_VAR 0 10
14738: PUSH
14739: LD_VAR 0 10
14743: PUSH
14744: LD_VAR 0 6
14748: PPUSH
14749: LD_INT 1
14751: PPUSH
14752: CALL_OW 259
14756: PUSH
14757: LD_REAL  1.15000000000000E+0000
14760: MUL
14761: MUL
14762: ST_TO_ADDR
// end ; unit_vehicle :
14763: GO 15591
14765: LD_INT 2
14767: DOUBLE
14768: EQUAL
14769: IFTRUE 14773
14771: GO 15579
14773: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
14774: LD_VAR 0 6
14778: PPUSH
14779: CALL_OW 264
14783: PUSH
14784: LD_INT 2
14786: PUSH
14787: LD_INT 42
14789: PUSH
14790: LD_INT 24
14792: PUSH
14793: EMPTY
14794: LIST
14795: LIST
14796: LIST
14797: IN
14798: IFFALSE 14819
// points := [ 25 , 5 , 3 ] ;
14800: LD_ADDR_VAR 0 9
14804: PUSH
14805: LD_INT 25
14807: PUSH
14808: LD_INT 5
14810: PUSH
14811: LD_INT 3
14813: PUSH
14814: EMPTY
14815: LIST
14816: LIST
14817: LIST
14818: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
14819: LD_VAR 0 6
14823: PPUSH
14824: CALL_OW 264
14828: PUSH
14829: LD_INT 4
14831: PUSH
14832: LD_INT 43
14834: PUSH
14835: LD_INT 25
14837: PUSH
14838: EMPTY
14839: LIST
14840: LIST
14841: LIST
14842: IN
14843: IFFALSE 14864
// points := [ 40 , 15 , 5 ] ;
14845: LD_ADDR_VAR 0 9
14849: PUSH
14850: LD_INT 40
14852: PUSH
14853: LD_INT 15
14855: PUSH
14856: LD_INT 5
14858: PUSH
14859: EMPTY
14860: LIST
14861: LIST
14862: LIST
14863: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
14864: LD_VAR 0 6
14868: PPUSH
14869: CALL_OW 264
14873: PUSH
14874: LD_INT 3
14876: PUSH
14877: LD_INT 23
14879: PUSH
14880: EMPTY
14881: LIST
14882: LIST
14883: IN
14884: IFFALSE 14905
// points := [ 7 , 25 , 8 ] ;
14886: LD_ADDR_VAR 0 9
14890: PUSH
14891: LD_INT 7
14893: PUSH
14894: LD_INT 25
14896: PUSH
14897: LD_INT 8
14899: PUSH
14900: EMPTY
14901: LIST
14902: LIST
14903: LIST
14904: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
14905: LD_VAR 0 6
14909: PPUSH
14910: CALL_OW 264
14914: PUSH
14915: LD_INT 5
14917: PUSH
14918: LD_INT 27
14920: PUSH
14921: LD_INT 44
14923: PUSH
14924: EMPTY
14925: LIST
14926: LIST
14927: LIST
14928: IN
14929: IFFALSE 14950
// points := [ 14 , 50 , 16 ] ;
14931: LD_ADDR_VAR 0 9
14935: PUSH
14936: LD_INT 14
14938: PUSH
14939: LD_INT 50
14941: PUSH
14942: LD_INT 16
14944: PUSH
14945: EMPTY
14946: LIST
14947: LIST
14948: LIST
14949: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
14950: LD_VAR 0 6
14954: PPUSH
14955: CALL_OW 264
14959: PUSH
14960: LD_INT 6
14962: PUSH
14963: LD_INT 46
14965: PUSH
14966: EMPTY
14967: LIST
14968: LIST
14969: IN
14970: IFFALSE 14991
// points := [ 32 , 120 , 70 ] ;
14972: LD_ADDR_VAR 0 9
14976: PUSH
14977: LD_INT 32
14979: PUSH
14980: LD_INT 120
14982: PUSH
14983: LD_INT 70
14985: PUSH
14986: EMPTY
14987: LIST
14988: LIST
14989: LIST
14990: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
14991: LD_VAR 0 6
14995: PPUSH
14996: CALL_OW 264
15000: PUSH
15001: LD_INT 7
15003: PUSH
15004: LD_INT 28
15006: PUSH
15007: LD_INT 45
15009: PUSH
15010: LD_INT 92
15012: PUSH
15013: EMPTY
15014: LIST
15015: LIST
15016: LIST
15017: LIST
15018: IN
15019: IFFALSE 15040
// points := [ 35 , 20 , 45 ] ;
15021: LD_ADDR_VAR 0 9
15025: PUSH
15026: LD_INT 35
15028: PUSH
15029: LD_INT 20
15031: PUSH
15032: LD_INT 45
15034: PUSH
15035: EMPTY
15036: LIST
15037: LIST
15038: LIST
15039: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
15040: LD_VAR 0 6
15044: PPUSH
15045: CALL_OW 264
15049: PUSH
15050: LD_INT 47
15052: PUSH
15053: EMPTY
15054: LIST
15055: IN
15056: IFFALSE 15077
// points := [ 67 , 45 , 75 ] ;
15058: LD_ADDR_VAR 0 9
15062: PUSH
15063: LD_INT 67
15065: PUSH
15066: LD_INT 45
15068: PUSH
15069: LD_INT 75
15071: PUSH
15072: EMPTY
15073: LIST
15074: LIST
15075: LIST
15076: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
15077: LD_VAR 0 6
15081: PPUSH
15082: CALL_OW 264
15086: PUSH
15087: LD_INT 26
15089: PUSH
15090: EMPTY
15091: LIST
15092: IN
15093: IFFALSE 15114
// points := [ 120 , 30 , 80 ] ;
15095: LD_ADDR_VAR 0 9
15099: PUSH
15100: LD_INT 120
15102: PUSH
15103: LD_INT 30
15105: PUSH
15106: LD_INT 80
15108: PUSH
15109: EMPTY
15110: LIST
15111: LIST
15112: LIST
15113: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
15114: LD_VAR 0 6
15118: PPUSH
15119: CALL_OW 264
15123: PUSH
15124: LD_INT 22
15126: PUSH
15127: EMPTY
15128: LIST
15129: IN
15130: IFFALSE 15151
// points := [ 40 , 1 , 1 ] ;
15132: LD_ADDR_VAR 0 9
15136: PUSH
15137: LD_INT 40
15139: PUSH
15140: LD_INT 1
15142: PUSH
15143: LD_INT 1
15145: PUSH
15146: EMPTY
15147: LIST
15148: LIST
15149: LIST
15150: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
15151: LD_VAR 0 6
15155: PPUSH
15156: CALL_OW 264
15160: PUSH
15161: LD_INT 29
15163: PUSH
15164: EMPTY
15165: LIST
15166: IN
15167: IFFALSE 15188
// points := [ 70 , 200 , 400 ] ;
15169: LD_ADDR_VAR 0 9
15173: PUSH
15174: LD_INT 70
15176: PUSH
15177: LD_INT 200
15179: PUSH
15180: LD_INT 400
15182: PUSH
15183: EMPTY
15184: LIST
15185: LIST
15186: LIST
15187: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
15188: LD_VAR 0 6
15192: PPUSH
15193: CALL_OW 264
15197: PUSH
15198: LD_INT 14
15200: PUSH
15201: LD_INT 53
15203: PUSH
15204: EMPTY
15205: LIST
15206: LIST
15207: IN
15208: IFFALSE 15229
// points := [ 40 , 10 , 20 ] ;
15210: LD_ADDR_VAR 0 9
15214: PUSH
15215: LD_INT 40
15217: PUSH
15218: LD_INT 10
15220: PUSH
15221: LD_INT 20
15223: PUSH
15224: EMPTY
15225: LIST
15226: LIST
15227: LIST
15228: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
15229: LD_VAR 0 6
15233: PPUSH
15234: CALL_OW 264
15238: PUSH
15239: LD_INT 9
15241: PUSH
15242: EMPTY
15243: LIST
15244: IN
15245: IFFALSE 15266
// points := [ 5 , 70 , 20 ] ;
15247: LD_ADDR_VAR 0 9
15251: PUSH
15252: LD_INT 5
15254: PUSH
15255: LD_INT 70
15257: PUSH
15258: LD_INT 20
15260: PUSH
15261: EMPTY
15262: LIST
15263: LIST
15264: LIST
15265: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
15266: LD_VAR 0 6
15270: PPUSH
15271: CALL_OW 264
15275: PUSH
15276: LD_INT 10
15278: PUSH
15279: EMPTY
15280: LIST
15281: IN
15282: IFFALSE 15303
// points := [ 35 , 110 , 70 ] ;
15284: LD_ADDR_VAR 0 9
15288: PUSH
15289: LD_INT 35
15291: PUSH
15292: LD_INT 110
15294: PUSH
15295: LD_INT 70
15297: PUSH
15298: EMPTY
15299: LIST
15300: LIST
15301: LIST
15302: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
15303: LD_VAR 0 6
15307: PPUSH
15308: CALL_OW 265
15312: PUSH
15313: LD_INT 25
15315: EQUAL
15316: IFFALSE 15337
// points := [ 80 , 65 , 100 ] ;
15318: LD_ADDR_VAR 0 9
15322: PUSH
15323: LD_INT 80
15325: PUSH
15326: LD_INT 65
15328: PUSH
15329: LD_INT 100
15331: PUSH
15332: EMPTY
15333: LIST
15334: LIST
15335: LIST
15336: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
15337: LD_VAR 0 6
15341: PPUSH
15342: CALL_OW 263
15346: PUSH
15347: LD_INT 1
15349: EQUAL
15350: IFFALSE 15385
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
15352: LD_ADDR_VAR 0 10
15356: PUSH
15357: LD_VAR 0 10
15361: PUSH
15362: LD_VAR 0 6
15366: PPUSH
15367: CALL_OW 311
15371: PPUSH
15372: LD_INT 3
15374: PPUSH
15375: CALL_OW 259
15379: PUSH
15380: LD_INT 4
15382: MUL
15383: MUL
15384: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
15385: LD_VAR 0 6
15389: PPUSH
15390: CALL_OW 263
15394: PUSH
15395: LD_INT 2
15397: EQUAL
15398: IFFALSE 15449
// begin j := IsControledBy ( i ) ;
15400: LD_ADDR_VAR 0 7
15404: PUSH
15405: LD_VAR 0 6
15409: PPUSH
15410: CALL_OW 312
15414: ST_TO_ADDR
// if j then
15415: LD_VAR 0 7
15419: IFFALSE 15449
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
15421: LD_ADDR_VAR 0 10
15425: PUSH
15426: LD_VAR 0 10
15430: PUSH
15431: LD_VAR 0 7
15435: PPUSH
15436: LD_INT 3
15438: PPUSH
15439: CALL_OW 259
15443: PUSH
15444: LD_INT 3
15446: MUL
15447: MUL
15448: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
15449: LD_VAR 0 6
15453: PPUSH
15454: CALL_OW 264
15458: PUSH
15459: LD_INT 5
15461: PUSH
15462: LD_INT 6
15464: PUSH
15465: LD_INT 46
15467: PUSH
15468: LD_INT 44
15470: PUSH
15471: LD_INT 47
15473: PUSH
15474: LD_INT 45
15476: PUSH
15477: LD_INT 28
15479: PUSH
15480: LD_INT 7
15482: PUSH
15483: LD_INT 27
15485: PUSH
15486: LD_INT 29
15488: PUSH
15489: EMPTY
15490: LIST
15491: LIST
15492: LIST
15493: LIST
15494: LIST
15495: LIST
15496: LIST
15497: LIST
15498: LIST
15499: LIST
15500: IN
15501: PUSH
15502: LD_VAR 0 1
15506: PPUSH
15507: LD_INT 52
15509: PPUSH
15510: CALL_OW 321
15514: PUSH
15515: LD_INT 2
15517: EQUAL
15518: AND
15519: IFFALSE 15536
// bpoints := bpoints * 1.2 ;
15521: LD_ADDR_VAR 0 10
15525: PUSH
15526: LD_VAR 0 10
15530: PUSH
15531: LD_REAL  1.20000000000000E+0000
15534: MUL
15535: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
15536: LD_VAR 0 6
15540: PPUSH
15541: CALL_OW 264
15545: PUSH
15546: LD_INT 6
15548: PUSH
15549: LD_INT 46
15551: PUSH
15552: LD_INT 47
15554: PUSH
15555: EMPTY
15556: LIST
15557: LIST
15558: LIST
15559: IN
15560: IFFALSE 15577
// bpoints := bpoints * 1.2 ;
15562: LD_ADDR_VAR 0 10
15566: PUSH
15567: LD_VAR 0 10
15571: PUSH
15572: LD_REAL  1.20000000000000E+0000
15575: MUL
15576: ST_TO_ADDR
// end ; unit_building :
15577: GO 15591
15579: LD_INT 3
15581: DOUBLE
15582: EQUAL
15583: IFTRUE 15587
15585: GO 15590
15587: POP
// ; end ;
15588: GO 15591
15590: POP
// for j = 1 to 3 do
15591: LD_ADDR_VAR 0 7
15595: PUSH
15596: DOUBLE
15597: LD_INT 1
15599: DEC
15600: ST_TO_ADDR
15601: LD_INT 3
15603: PUSH
15604: FOR_TO
15605: IFFALSE 15658
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
15607: LD_ADDR_VAR 0 5
15611: PUSH
15612: LD_VAR 0 5
15616: PPUSH
15617: LD_VAR 0 7
15621: PPUSH
15622: LD_VAR 0 5
15626: PUSH
15627: LD_VAR 0 7
15631: ARRAY
15632: PUSH
15633: LD_VAR 0 9
15637: PUSH
15638: LD_VAR 0 7
15642: ARRAY
15643: PUSH
15644: LD_VAR 0 10
15648: MUL
15649: PLUS
15650: PPUSH
15651: CALL_OW 1
15655: ST_TO_ADDR
15656: GO 15604
15658: POP
15659: POP
// end ;
15660: GO 14139
15662: POP
15663: POP
// result := Replace ( result , 4 , tmp ) ;
15664: LD_ADDR_VAR 0 5
15668: PUSH
15669: LD_VAR 0 5
15673: PPUSH
15674: LD_INT 4
15676: PPUSH
15677: LD_VAR 0 8
15681: PPUSH
15682: CALL_OW 1
15686: ST_TO_ADDR
// end ;
15687: LD_VAR 0 5
15691: RET
// export function DangerAtRange ( unit , range ) ; begin
15692: LD_INT 0
15694: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
15695: LD_ADDR_VAR 0 3
15699: PUSH
15700: LD_VAR 0 1
15704: PPUSH
15705: CALL_OW 255
15709: PPUSH
15710: LD_VAR 0 1
15714: PPUSH
15715: CALL_OW 250
15719: PPUSH
15720: LD_VAR 0 1
15724: PPUSH
15725: CALL_OW 251
15729: PPUSH
15730: LD_VAR 0 2
15734: PPUSH
15735: CALL 13991 0 4
15739: ST_TO_ADDR
// end ;
15740: LD_VAR 0 3
15744: RET
// export function DangerInArea ( side , area ) ; begin
15745: LD_INT 0
15747: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
15748: LD_ADDR_VAR 0 3
15752: PUSH
15753: LD_VAR 0 2
15757: PPUSH
15758: LD_INT 81
15760: PUSH
15761: LD_VAR 0 1
15765: PUSH
15766: EMPTY
15767: LIST
15768: LIST
15769: PPUSH
15770: CALL_OW 70
15774: ST_TO_ADDR
// end ;
15775: LD_VAR 0 3
15779: RET
// export function IsExtension ( b ) ; begin
15780: LD_INT 0
15782: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
15783: LD_ADDR_VAR 0 2
15787: PUSH
15788: LD_VAR 0 1
15792: PUSH
15793: LD_INT 23
15795: PUSH
15796: LD_INT 20
15798: PUSH
15799: LD_INT 22
15801: PUSH
15802: LD_INT 17
15804: PUSH
15805: LD_INT 24
15807: PUSH
15808: LD_INT 21
15810: PUSH
15811: LD_INT 19
15813: PUSH
15814: LD_INT 16
15816: PUSH
15817: LD_INT 25
15819: PUSH
15820: LD_INT 18
15822: PUSH
15823: EMPTY
15824: LIST
15825: LIST
15826: LIST
15827: LIST
15828: LIST
15829: LIST
15830: LIST
15831: LIST
15832: LIST
15833: LIST
15834: IN
15835: ST_TO_ADDR
// end ;
15836: LD_VAR 0 2
15840: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
15841: LD_INT 0
15843: PPUSH
15844: PPUSH
15845: PPUSH
// result := [ ] ;
15846: LD_ADDR_VAR 0 4
15850: PUSH
15851: EMPTY
15852: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
15853: LD_ADDR_VAR 0 5
15857: PUSH
15858: LD_VAR 0 2
15862: PPUSH
15863: LD_INT 21
15865: PUSH
15866: LD_INT 3
15868: PUSH
15869: EMPTY
15870: LIST
15871: LIST
15872: PPUSH
15873: CALL_OW 70
15877: ST_TO_ADDR
// if not tmp then
15878: LD_VAR 0 5
15882: NOT
15883: IFFALSE 15887
// exit ;
15885: GO 15951
// if checkLink then
15887: LD_VAR 0 3
15891: IFFALSE 15941
// begin for i in tmp do
15893: LD_ADDR_VAR 0 6
15897: PUSH
15898: LD_VAR 0 5
15902: PUSH
15903: FOR_IN
15904: IFFALSE 15939
// if GetBase ( i ) <> base then
15906: LD_VAR 0 6
15910: PPUSH
15911: CALL_OW 274
15915: PUSH
15916: LD_VAR 0 1
15920: NONEQUAL
15921: IFFALSE 15937
// ComLinkToBase ( base , i ) ;
15923: LD_VAR 0 1
15927: PPUSH
15928: LD_VAR 0 6
15932: PPUSH
15933: CALL_OW 169
15937: GO 15903
15939: POP
15940: POP
// end ; result := tmp ;
15941: LD_ADDR_VAR 0 4
15945: PUSH
15946: LD_VAR 0 5
15950: ST_TO_ADDR
// end ;
15951: LD_VAR 0 4
15955: RET
// export function ComComplete ( units , b ) ; var i ; begin
15956: LD_INT 0
15958: PPUSH
15959: PPUSH
// if not units then
15960: LD_VAR 0 1
15964: NOT
15965: IFFALSE 15969
// exit ;
15967: GO 16059
// for i in units do
15969: LD_ADDR_VAR 0 4
15973: PUSH
15974: LD_VAR 0 1
15978: PUSH
15979: FOR_IN
15980: IFFALSE 16057
// if BuildingStatus ( b ) = bs_build then
15982: LD_VAR 0 2
15986: PPUSH
15987: CALL_OW 461
15991: PUSH
15992: LD_INT 1
15994: EQUAL
15995: IFFALSE 16055
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
15997: LD_VAR 0 4
16001: PPUSH
16002: LD_STRING h
16004: PUSH
16005: LD_VAR 0 2
16009: PPUSH
16010: CALL_OW 250
16014: PUSH
16015: LD_VAR 0 2
16019: PPUSH
16020: CALL_OW 251
16024: PUSH
16025: LD_VAR 0 2
16029: PUSH
16030: LD_INT 0
16032: PUSH
16033: LD_INT 0
16035: PUSH
16036: LD_INT 0
16038: PUSH
16039: EMPTY
16040: LIST
16041: LIST
16042: LIST
16043: LIST
16044: LIST
16045: LIST
16046: LIST
16047: PUSH
16048: EMPTY
16049: LIST
16050: PPUSH
16051: CALL_OW 446
16055: GO 15979
16057: POP
16058: POP
// end ;
16059: LD_VAR 0 3
16063: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
16064: LD_INT 0
16066: PPUSH
16067: PPUSH
16068: PPUSH
16069: PPUSH
16070: PPUSH
16071: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
16072: LD_VAR 0 1
16076: NOT
16077: PUSH
16078: LD_VAR 0 1
16082: PPUSH
16083: CALL_OW 263
16087: PUSH
16088: LD_INT 2
16090: NONEQUAL
16091: OR
16092: IFFALSE 16096
// exit ;
16094: GO 16412
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
16096: LD_ADDR_VAR 0 6
16100: PUSH
16101: LD_INT 22
16103: PUSH
16104: LD_VAR 0 1
16108: PPUSH
16109: CALL_OW 255
16113: PUSH
16114: EMPTY
16115: LIST
16116: LIST
16117: PUSH
16118: LD_INT 2
16120: PUSH
16121: LD_INT 30
16123: PUSH
16124: LD_INT 36
16126: PUSH
16127: EMPTY
16128: LIST
16129: LIST
16130: PUSH
16131: LD_INT 34
16133: PUSH
16134: LD_INT 31
16136: PUSH
16137: EMPTY
16138: LIST
16139: LIST
16140: PUSH
16141: EMPTY
16142: LIST
16143: LIST
16144: LIST
16145: PUSH
16146: EMPTY
16147: LIST
16148: LIST
16149: PPUSH
16150: CALL_OW 69
16154: ST_TO_ADDR
// if not tmp then
16155: LD_VAR 0 6
16159: NOT
16160: IFFALSE 16164
// exit ;
16162: GO 16412
// result := [ ] ;
16164: LD_ADDR_VAR 0 2
16168: PUSH
16169: EMPTY
16170: ST_TO_ADDR
// for i in tmp do
16171: LD_ADDR_VAR 0 3
16175: PUSH
16176: LD_VAR 0 6
16180: PUSH
16181: FOR_IN
16182: IFFALSE 16253
// begin t := UnitsInside ( i ) ;
16184: LD_ADDR_VAR 0 4
16188: PUSH
16189: LD_VAR 0 3
16193: PPUSH
16194: CALL_OW 313
16198: ST_TO_ADDR
// if t then
16199: LD_VAR 0 4
16203: IFFALSE 16251
// for j in t do
16205: LD_ADDR_VAR 0 7
16209: PUSH
16210: LD_VAR 0 4
16214: PUSH
16215: FOR_IN
16216: IFFALSE 16249
// result := Replace ( result , result + 1 , j ) ;
16218: LD_ADDR_VAR 0 2
16222: PUSH
16223: LD_VAR 0 2
16227: PPUSH
16228: LD_VAR 0 2
16232: PUSH
16233: LD_INT 1
16235: PLUS
16236: PPUSH
16237: LD_VAR 0 7
16241: PPUSH
16242: CALL_OW 1
16246: ST_TO_ADDR
16247: GO 16215
16249: POP
16250: POP
// end ;
16251: GO 16181
16253: POP
16254: POP
// if not result then
16255: LD_VAR 0 2
16259: NOT
16260: IFFALSE 16264
// exit ;
16262: GO 16412
// mech := result [ 1 ] ;
16264: LD_ADDR_VAR 0 5
16268: PUSH
16269: LD_VAR 0 2
16273: PUSH
16274: LD_INT 1
16276: ARRAY
16277: ST_TO_ADDR
// if result > 1 then
16278: LD_VAR 0 2
16282: PUSH
16283: LD_INT 1
16285: GREATER
16286: IFFALSE 16398
// begin for i = 2 to result do
16288: LD_ADDR_VAR 0 3
16292: PUSH
16293: DOUBLE
16294: LD_INT 2
16296: DEC
16297: ST_TO_ADDR
16298: LD_VAR 0 2
16302: PUSH
16303: FOR_TO
16304: IFFALSE 16396
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
16306: LD_ADDR_VAR 0 4
16310: PUSH
16311: LD_VAR 0 2
16315: PUSH
16316: LD_VAR 0 3
16320: ARRAY
16321: PPUSH
16322: LD_INT 3
16324: PPUSH
16325: CALL_OW 259
16329: PUSH
16330: LD_VAR 0 2
16334: PUSH
16335: LD_VAR 0 3
16339: ARRAY
16340: PPUSH
16341: CALL_OW 432
16345: MINUS
16346: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
16347: LD_VAR 0 4
16351: PUSH
16352: LD_VAR 0 5
16356: PPUSH
16357: LD_INT 3
16359: PPUSH
16360: CALL_OW 259
16364: PUSH
16365: LD_VAR 0 5
16369: PPUSH
16370: CALL_OW 432
16374: MINUS
16375: GREATEREQUAL
16376: IFFALSE 16394
// mech := result [ i ] ;
16378: LD_ADDR_VAR 0 5
16382: PUSH
16383: LD_VAR 0 2
16387: PUSH
16388: LD_VAR 0 3
16392: ARRAY
16393: ST_TO_ADDR
// end ;
16394: GO 16303
16396: POP
16397: POP
// end ; ComLinkTo ( vehicle , mech ) ;
16398: LD_VAR 0 1
16402: PPUSH
16403: LD_VAR 0 5
16407: PPUSH
16408: CALL_OW 135
// end ;
16412: LD_VAR 0 2
16416: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
16417: LD_INT 0
16419: PPUSH
16420: PPUSH
16421: PPUSH
16422: PPUSH
16423: PPUSH
16424: PPUSH
16425: PPUSH
16426: PPUSH
16427: PPUSH
16428: PPUSH
16429: PPUSH
16430: PPUSH
16431: PPUSH
// result := [ ] ;
16432: LD_ADDR_VAR 0 7
16436: PUSH
16437: EMPTY
16438: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
16439: LD_VAR 0 1
16443: PPUSH
16444: CALL_OW 266
16448: PUSH
16449: LD_INT 0
16451: PUSH
16452: LD_INT 1
16454: PUSH
16455: EMPTY
16456: LIST
16457: LIST
16458: IN
16459: NOT
16460: IFFALSE 16464
// exit ;
16462: GO 18098
// if name then
16464: LD_VAR 0 3
16468: IFFALSE 16484
// SetBName ( base_dep , name ) ;
16470: LD_VAR 0 1
16474: PPUSH
16475: LD_VAR 0 3
16479: PPUSH
16480: CALL_OW 500
// base := GetBase ( base_dep ) ;
16484: LD_ADDR_VAR 0 15
16488: PUSH
16489: LD_VAR 0 1
16493: PPUSH
16494: CALL_OW 274
16498: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
16499: LD_ADDR_VAR 0 16
16503: PUSH
16504: LD_VAR 0 1
16508: PPUSH
16509: CALL_OW 255
16513: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
16514: LD_ADDR_VAR 0 17
16518: PUSH
16519: LD_VAR 0 1
16523: PPUSH
16524: CALL_OW 248
16528: ST_TO_ADDR
// if sources then
16529: LD_VAR 0 5
16533: IFFALSE 16580
// for i = 1 to 3 do
16535: LD_ADDR_VAR 0 8
16539: PUSH
16540: DOUBLE
16541: LD_INT 1
16543: DEC
16544: ST_TO_ADDR
16545: LD_INT 3
16547: PUSH
16548: FOR_TO
16549: IFFALSE 16578
// AddResourceType ( base , i , sources [ i ] ) ;
16551: LD_VAR 0 15
16555: PPUSH
16556: LD_VAR 0 8
16560: PPUSH
16561: LD_VAR 0 5
16565: PUSH
16566: LD_VAR 0 8
16570: ARRAY
16571: PPUSH
16572: CALL_OW 276
16576: GO 16548
16578: POP
16579: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
16580: LD_ADDR_VAR 0 18
16584: PUSH
16585: LD_VAR 0 15
16589: PPUSH
16590: LD_VAR 0 2
16594: PPUSH
16595: LD_INT 1
16597: PPUSH
16598: CALL 15841 0 3
16602: ST_TO_ADDR
// InitHc ;
16603: CALL_OW 19
// InitUc ;
16607: CALL_OW 18
// uc_side := side ;
16611: LD_ADDR_OWVAR 20
16615: PUSH
16616: LD_VAR 0 16
16620: ST_TO_ADDR
// uc_nation := nation ;
16621: LD_ADDR_OWVAR 21
16625: PUSH
16626: LD_VAR 0 17
16630: ST_TO_ADDR
// if buildings then
16631: LD_VAR 0 18
16635: IFFALSE 17957
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
16637: LD_ADDR_VAR 0 19
16641: PUSH
16642: LD_VAR 0 18
16646: PPUSH
16647: LD_INT 2
16649: PUSH
16650: LD_INT 30
16652: PUSH
16653: LD_INT 29
16655: PUSH
16656: EMPTY
16657: LIST
16658: LIST
16659: PUSH
16660: LD_INT 30
16662: PUSH
16663: LD_INT 30
16665: PUSH
16666: EMPTY
16667: LIST
16668: LIST
16669: PUSH
16670: EMPTY
16671: LIST
16672: LIST
16673: LIST
16674: PPUSH
16675: CALL_OW 72
16679: ST_TO_ADDR
// if tmp then
16680: LD_VAR 0 19
16684: IFFALSE 16732
// for i in tmp do
16686: LD_ADDR_VAR 0 8
16690: PUSH
16691: LD_VAR 0 19
16695: PUSH
16696: FOR_IN
16697: IFFALSE 16730
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
16699: LD_VAR 0 8
16703: PPUSH
16704: CALL_OW 250
16708: PPUSH
16709: LD_VAR 0 8
16713: PPUSH
16714: CALL_OW 251
16718: PPUSH
16719: LD_VAR 0 16
16723: PPUSH
16724: CALL_OW 441
16728: GO 16696
16730: POP
16731: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
16732: LD_VAR 0 18
16736: PPUSH
16737: LD_INT 2
16739: PUSH
16740: LD_INT 30
16742: PUSH
16743: LD_INT 32
16745: PUSH
16746: EMPTY
16747: LIST
16748: LIST
16749: PUSH
16750: LD_INT 30
16752: PUSH
16753: LD_INT 33
16755: PUSH
16756: EMPTY
16757: LIST
16758: LIST
16759: PUSH
16760: EMPTY
16761: LIST
16762: LIST
16763: LIST
16764: PPUSH
16765: CALL_OW 72
16769: IFFALSE 16857
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
16771: LD_ADDR_VAR 0 8
16775: PUSH
16776: LD_VAR 0 18
16780: PPUSH
16781: LD_INT 2
16783: PUSH
16784: LD_INT 30
16786: PUSH
16787: LD_INT 32
16789: PUSH
16790: EMPTY
16791: LIST
16792: LIST
16793: PUSH
16794: LD_INT 30
16796: PUSH
16797: LD_INT 33
16799: PUSH
16800: EMPTY
16801: LIST
16802: LIST
16803: PUSH
16804: EMPTY
16805: LIST
16806: LIST
16807: LIST
16808: PPUSH
16809: CALL_OW 72
16813: PUSH
16814: FOR_IN
16815: IFFALSE 16855
// begin if not GetBWeapon ( i ) then
16817: LD_VAR 0 8
16821: PPUSH
16822: CALL_OW 269
16826: NOT
16827: IFFALSE 16853
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
16829: LD_VAR 0 8
16833: PPUSH
16834: LD_VAR 0 8
16838: PPUSH
16839: LD_VAR 0 2
16843: PPUSH
16844: CALL 18103 0 2
16848: PPUSH
16849: CALL_OW 431
// end ;
16853: GO 16814
16855: POP
16856: POP
// end ; for i = 1 to personel do
16857: LD_ADDR_VAR 0 8
16861: PUSH
16862: DOUBLE
16863: LD_INT 1
16865: DEC
16866: ST_TO_ADDR
16867: LD_VAR 0 6
16871: PUSH
16872: FOR_TO
16873: IFFALSE 17937
// begin if i > 4 then
16875: LD_VAR 0 8
16879: PUSH
16880: LD_INT 4
16882: GREATER
16883: IFFALSE 16887
// break ;
16885: GO 17937
// case i of 1 :
16887: LD_VAR 0 8
16891: PUSH
16892: LD_INT 1
16894: DOUBLE
16895: EQUAL
16896: IFTRUE 16900
16898: GO 16980
16900: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
16901: LD_ADDR_VAR 0 12
16905: PUSH
16906: LD_VAR 0 18
16910: PPUSH
16911: LD_INT 22
16913: PUSH
16914: LD_VAR 0 16
16918: PUSH
16919: EMPTY
16920: LIST
16921: LIST
16922: PUSH
16923: LD_INT 58
16925: PUSH
16926: EMPTY
16927: LIST
16928: PUSH
16929: LD_INT 2
16931: PUSH
16932: LD_INT 30
16934: PUSH
16935: LD_INT 32
16937: PUSH
16938: EMPTY
16939: LIST
16940: LIST
16941: PUSH
16942: LD_INT 30
16944: PUSH
16945: LD_INT 4
16947: PUSH
16948: EMPTY
16949: LIST
16950: LIST
16951: PUSH
16952: LD_INT 30
16954: PUSH
16955: LD_INT 5
16957: PUSH
16958: EMPTY
16959: LIST
16960: LIST
16961: PUSH
16962: EMPTY
16963: LIST
16964: LIST
16965: LIST
16966: LIST
16967: PUSH
16968: EMPTY
16969: LIST
16970: LIST
16971: LIST
16972: PPUSH
16973: CALL_OW 72
16977: ST_TO_ADDR
16978: GO 17202
16980: LD_INT 2
16982: DOUBLE
16983: EQUAL
16984: IFTRUE 16988
16986: GO 17050
16988: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
16989: LD_ADDR_VAR 0 12
16993: PUSH
16994: LD_VAR 0 18
16998: PPUSH
16999: LD_INT 22
17001: PUSH
17002: LD_VAR 0 16
17006: PUSH
17007: EMPTY
17008: LIST
17009: LIST
17010: PUSH
17011: LD_INT 2
17013: PUSH
17014: LD_INT 30
17016: PUSH
17017: LD_INT 0
17019: PUSH
17020: EMPTY
17021: LIST
17022: LIST
17023: PUSH
17024: LD_INT 30
17026: PUSH
17027: LD_INT 1
17029: PUSH
17030: EMPTY
17031: LIST
17032: LIST
17033: PUSH
17034: EMPTY
17035: LIST
17036: LIST
17037: LIST
17038: PUSH
17039: EMPTY
17040: LIST
17041: LIST
17042: PPUSH
17043: CALL_OW 72
17047: ST_TO_ADDR
17048: GO 17202
17050: LD_INT 3
17052: DOUBLE
17053: EQUAL
17054: IFTRUE 17058
17056: GO 17120
17058: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
17059: LD_ADDR_VAR 0 12
17063: PUSH
17064: LD_VAR 0 18
17068: PPUSH
17069: LD_INT 22
17071: PUSH
17072: LD_VAR 0 16
17076: PUSH
17077: EMPTY
17078: LIST
17079: LIST
17080: PUSH
17081: LD_INT 2
17083: PUSH
17084: LD_INT 30
17086: PUSH
17087: LD_INT 2
17089: PUSH
17090: EMPTY
17091: LIST
17092: LIST
17093: PUSH
17094: LD_INT 30
17096: PUSH
17097: LD_INT 3
17099: PUSH
17100: EMPTY
17101: LIST
17102: LIST
17103: PUSH
17104: EMPTY
17105: LIST
17106: LIST
17107: LIST
17108: PUSH
17109: EMPTY
17110: LIST
17111: LIST
17112: PPUSH
17113: CALL_OW 72
17117: ST_TO_ADDR
17118: GO 17202
17120: LD_INT 4
17122: DOUBLE
17123: EQUAL
17124: IFTRUE 17128
17126: GO 17201
17128: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
17129: LD_ADDR_VAR 0 12
17133: PUSH
17134: LD_VAR 0 18
17138: PPUSH
17139: LD_INT 22
17141: PUSH
17142: LD_VAR 0 16
17146: PUSH
17147: EMPTY
17148: LIST
17149: LIST
17150: PUSH
17151: LD_INT 2
17153: PUSH
17154: LD_INT 30
17156: PUSH
17157: LD_INT 6
17159: PUSH
17160: EMPTY
17161: LIST
17162: LIST
17163: PUSH
17164: LD_INT 30
17166: PUSH
17167: LD_INT 7
17169: PUSH
17170: EMPTY
17171: LIST
17172: LIST
17173: PUSH
17174: LD_INT 30
17176: PUSH
17177: LD_INT 8
17179: PUSH
17180: EMPTY
17181: LIST
17182: LIST
17183: PUSH
17184: EMPTY
17185: LIST
17186: LIST
17187: LIST
17188: LIST
17189: PUSH
17190: EMPTY
17191: LIST
17192: LIST
17193: PPUSH
17194: CALL_OW 72
17198: ST_TO_ADDR
17199: GO 17202
17201: POP
// if i = 1 then
17202: LD_VAR 0 8
17206: PUSH
17207: LD_INT 1
17209: EQUAL
17210: IFFALSE 17321
// begin tmp := [ ] ;
17212: LD_ADDR_VAR 0 19
17216: PUSH
17217: EMPTY
17218: ST_TO_ADDR
// for j in f do
17219: LD_ADDR_VAR 0 9
17223: PUSH
17224: LD_VAR 0 12
17228: PUSH
17229: FOR_IN
17230: IFFALSE 17303
// if GetBType ( j ) = b_bunker then
17232: LD_VAR 0 9
17236: PPUSH
17237: CALL_OW 266
17241: PUSH
17242: LD_INT 32
17244: EQUAL
17245: IFFALSE 17272
// tmp := Insert ( tmp , 1 , j ) else
17247: LD_ADDR_VAR 0 19
17251: PUSH
17252: LD_VAR 0 19
17256: PPUSH
17257: LD_INT 1
17259: PPUSH
17260: LD_VAR 0 9
17264: PPUSH
17265: CALL_OW 2
17269: ST_TO_ADDR
17270: GO 17301
// tmp := Insert ( tmp , tmp + 1 , j ) ;
17272: LD_ADDR_VAR 0 19
17276: PUSH
17277: LD_VAR 0 19
17281: PPUSH
17282: LD_VAR 0 19
17286: PUSH
17287: LD_INT 1
17289: PLUS
17290: PPUSH
17291: LD_VAR 0 9
17295: PPUSH
17296: CALL_OW 2
17300: ST_TO_ADDR
17301: GO 17229
17303: POP
17304: POP
// if tmp then
17305: LD_VAR 0 19
17309: IFFALSE 17321
// f := tmp ;
17311: LD_ADDR_VAR 0 12
17315: PUSH
17316: LD_VAR 0 19
17320: ST_TO_ADDR
// end ; x := personel [ i ] ;
17321: LD_ADDR_VAR 0 13
17325: PUSH
17326: LD_VAR 0 6
17330: PUSH
17331: LD_VAR 0 8
17335: ARRAY
17336: ST_TO_ADDR
// if x = - 1 then
17337: LD_VAR 0 13
17341: PUSH
17342: LD_INT 1
17344: NEG
17345: EQUAL
17346: IFFALSE 17555
// begin for j in f do
17348: LD_ADDR_VAR 0 9
17352: PUSH
17353: LD_VAR 0 12
17357: PUSH
17358: FOR_IN
17359: IFFALSE 17551
// repeat InitHc ;
17361: CALL_OW 19
// if GetBType ( j ) = b_barracks then
17365: LD_VAR 0 9
17369: PPUSH
17370: CALL_OW 266
17374: PUSH
17375: LD_INT 5
17377: EQUAL
17378: IFFALSE 17448
// begin if UnitsInside ( j ) < 3 then
17380: LD_VAR 0 9
17384: PPUSH
17385: CALL_OW 313
17389: PUSH
17390: LD_INT 3
17392: LESS
17393: IFFALSE 17429
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
17395: LD_INT 0
17397: PPUSH
17398: LD_INT 5
17400: PUSH
17401: LD_INT 8
17403: PUSH
17404: LD_INT 9
17406: PUSH
17407: EMPTY
17408: LIST
17409: LIST
17410: LIST
17411: PUSH
17412: LD_VAR 0 17
17416: ARRAY
17417: PPUSH
17418: LD_VAR 0 4
17422: PPUSH
17423: CALL_OW 380
17427: GO 17446
// PrepareHuman ( false , i , skill ) ;
17429: LD_INT 0
17431: PPUSH
17432: LD_VAR 0 8
17436: PPUSH
17437: LD_VAR 0 4
17441: PPUSH
17442: CALL_OW 380
// end else
17446: GO 17465
// PrepareHuman ( false , i , skill ) ;
17448: LD_INT 0
17450: PPUSH
17451: LD_VAR 0 8
17455: PPUSH
17456: LD_VAR 0 4
17460: PPUSH
17461: CALL_OW 380
// un := CreateHuman ;
17465: LD_ADDR_VAR 0 14
17469: PUSH
17470: CALL_OW 44
17474: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
17475: LD_ADDR_VAR 0 7
17479: PUSH
17480: LD_VAR 0 7
17484: PPUSH
17485: LD_INT 1
17487: PPUSH
17488: LD_VAR 0 14
17492: PPUSH
17493: CALL_OW 2
17497: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
17498: LD_VAR 0 14
17502: PPUSH
17503: LD_VAR 0 9
17507: PPUSH
17508: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
17512: LD_VAR 0 9
17516: PPUSH
17517: CALL_OW 313
17521: PUSH
17522: LD_INT 6
17524: EQUAL
17525: PUSH
17526: LD_VAR 0 9
17530: PPUSH
17531: CALL_OW 266
17535: PUSH
17536: LD_INT 32
17538: PUSH
17539: LD_INT 31
17541: PUSH
17542: EMPTY
17543: LIST
17544: LIST
17545: IN
17546: OR
17547: IFFALSE 17361
17549: GO 17358
17551: POP
17552: POP
// end else
17553: GO 17935
// for j = 1 to x do
17555: LD_ADDR_VAR 0 9
17559: PUSH
17560: DOUBLE
17561: LD_INT 1
17563: DEC
17564: ST_TO_ADDR
17565: LD_VAR 0 13
17569: PUSH
17570: FOR_TO
17571: IFFALSE 17933
// begin InitHc ;
17573: CALL_OW 19
// if not f then
17577: LD_VAR 0 12
17581: NOT
17582: IFFALSE 17671
// begin PrepareHuman ( false , i , skill ) ;
17584: LD_INT 0
17586: PPUSH
17587: LD_VAR 0 8
17591: PPUSH
17592: LD_VAR 0 4
17596: PPUSH
17597: CALL_OW 380
// un := CreateHuman ;
17601: LD_ADDR_VAR 0 14
17605: PUSH
17606: CALL_OW 44
17610: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
17611: LD_ADDR_VAR 0 7
17615: PUSH
17616: LD_VAR 0 7
17620: PPUSH
17621: LD_INT 1
17623: PPUSH
17624: LD_VAR 0 14
17628: PPUSH
17629: CALL_OW 2
17633: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
17634: LD_VAR 0 14
17638: PPUSH
17639: LD_VAR 0 1
17643: PPUSH
17644: CALL_OW 250
17648: PPUSH
17649: LD_VAR 0 1
17653: PPUSH
17654: CALL_OW 251
17658: PPUSH
17659: LD_INT 10
17661: PPUSH
17662: LD_INT 0
17664: PPUSH
17665: CALL_OW 50
// continue ;
17669: GO 17570
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
17671: LD_VAR 0 12
17675: PUSH
17676: LD_INT 1
17678: ARRAY
17679: PPUSH
17680: CALL_OW 313
17684: PUSH
17685: LD_VAR 0 12
17689: PUSH
17690: LD_INT 1
17692: ARRAY
17693: PPUSH
17694: CALL_OW 266
17698: PUSH
17699: LD_INT 32
17701: PUSH
17702: LD_INT 31
17704: PUSH
17705: EMPTY
17706: LIST
17707: LIST
17708: IN
17709: AND
17710: PUSH
17711: LD_VAR 0 12
17715: PUSH
17716: LD_INT 1
17718: ARRAY
17719: PPUSH
17720: CALL_OW 313
17724: PUSH
17725: LD_INT 6
17727: EQUAL
17728: OR
17729: IFFALSE 17749
// f := Delete ( f , 1 ) ;
17731: LD_ADDR_VAR 0 12
17735: PUSH
17736: LD_VAR 0 12
17740: PPUSH
17741: LD_INT 1
17743: PPUSH
17744: CALL_OW 3
17748: ST_TO_ADDR
// if not f then
17749: LD_VAR 0 12
17753: NOT
17754: IFFALSE 17772
// begin x := x + 2 ;
17756: LD_ADDR_VAR 0 13
17760: PUSH
17761: LD_VAR 0 13
17765: PUSH
17766: LD_INT 2
17768: PLUS
17769: ST_TO_ADDR
// continue ;
17770: GO 17570
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
17772: LD_VAR 0 12
17776: PUSH
17777: LD_INT 1
17779: ARRAY
17780: PPUSH
17781: CALL_OW 266
17785: PUSH
17786: LD_INT 5
17788: EQUAL
17789: IFFALSE 17863
// begin if UnitsInside ( f [ 1 ] ) < 3 then
17791: LD_VAR 0 12
17795: PUSH
17796: LD_INT 1
17798: ARRAY
17799: PPUSH
17800: CALL_OW 313
17804: PUSH
17805: LD_INT 3
17807: LESS
17808: IFFALSE 17844
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
17810: LD_INT 0
17812: PPUSH
17813: LD_INT 5
17815: PUSH
17816: LD_INT 8
17818: PUSH
17819: LD_INT 9
17821: PUSH
17822: EMPTY
17823: LIST
17824: LIST
17825: LIST
17826: PUSH
17827: LD_VAR 0 17
17831: ARRAY
17832: PPUSH
17833: LD_VAR 0 4
17837: PPUSH
17838: CALL_OW 380
17842: GO 17861
// PrepareHuman ( false , i , skill ) ;
17844: LD_INT 0
17846: PPUSH
17847: LD_VAR 0 8
17851: PPUSH
17852: LD_VAR 0 4
17856: PPUSH
17857: CALL_OW 380
// end else
17861: GO 17880
// PrepareHuman ( false , i , skill ) ;
17863: LD_INT 0
17865: PPUSH
17866: LD_VAR 0 8
17870: PPUSH
17871: LD_VAR 0 4
17875: PPUSH
17876: CALL_OW 380
// un := CreateHuman ;
17880: LD_ADDR_VAR 0 14
17884: PUSH
17885: CALL_OW 44
17889: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
17890: LD_ADDR_VAR 0 7
17894: PUSH
17895: LD_VAR 0 7
17899: PPUSH
17900: LD_INT 1
17902: PPUSH
17903: LD_VAR 0 14
17907: PPUSH
17908: CALL_OW 2
17912: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
17913: LD_VAR 0 14
17917: PPUSH
17918: LD_VAR 0 12
17922: PUSH
17923: LD_INT 1
17925: ARRAY
17926: PPUSH
17927: CALL_OW 52
// end ;
17931: GO 17570
17933: POP
17934: POP
// end ;
17935: GO 16872
17937: POP
17938: POP
// result := result ^ buildings ;
17939: LD_ADDR_VAR 0 7
17943: PUSH
17944: LD_VAR 0 7
17948: PUSH
17949: LD_VAR 0 18
17953: ADD
17954: ST_TO_ADDR
// end else
17955: GO 18098
// begin for i = 1 to personel do
17957: LD_ADDR_VAR 0 8
17961: PUSH
17962: DOUBLE
17963: LD_INT 1
17965: DEC
17966: ST_TO_ADDR
17967: LD_VAR 0 6
17971: PUSH
17972: FOR_TO
17973: IFFALSE 18096
// begin if i > 4 then
17975: LD_VAR 0 8
17979: PUSH
17980: LD_INT 4
17982: GREATER
17983: IFFALSE 17987
// break ;
17985: GO 18096
// x := personel [ i ] ;
17987: LD_ADDR_VAR 0 13
17991: PUSH
17992: LD_VAR 0 6
17996: PUSH
17997: LD_VAR 0 8
18001: ARRAY
18002: ST_TO_ADDR
// if x = - 1 then
18003: LD_VAR 0 13
18007: PUSH
18008: LD_INT 1
18010: NEG
18011: EQUAL
18012: IFFALSE 18016
// continue ;
18014: GO 17972
// PrepareHuman ( false , i , skill ) ;
18016: LD_INT 0
18018: PPUSH
18019: LD_VAR 0 8
18023: PPUSH
18024: LD_VAR 0 4
18028: PPUSH
18029: CALL_OW 380
// un := CreateHuman ;
18033: LD_ADDR_VAR 0 14
18037: PUSH
18038: CALL_OW 44
18042: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
18043: LD_VAR 0 14
18047: PPUSH
18048: LD_VAR 0 1
18052: PPUSH
18053: CALL_OW 250
18057: PPUSH
18058: LD_VAR 0 1
18062: PPUSH
18063: CALL_OW 251
18067: PPUSH
18068: LD_INT 10
18070: PPUSH
18071: LD_INT 0
18073: PPUSH
18074: CALL_OW 50
// result := result ^ un ;
18078: LD_ADDR_VAR 0 7
18082: PUSH
18083: LD_VAR 0 7
18087: PUSH
18088: LD_VAR 0 14
18092: ADD
18093: ST_TO_ADDR
// end ;
18094: GO 17972
18096: POP
18097: POP
// end ; end ;
18098: LD_VAR 0 7
18102: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
18103: LD_INT 0
18105: PPUSH
18106: PPUSH
18107: PPUSH
18108: PPUSH
18109: PPUSH
18110: PPUSH
18111: PPUSH
18112: PPUSH
18113: PPUSH
18114: PPUSH
18115: PPUSH
18116: PPUSH
18117: PPUSH
18118: PPUSH
18119: PPUSH
18120: PPUSH
// result := false ;
18121: LD_ADDR_VAR 0 3
18125: PUSH
18126: LD_INT 0
18128: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
18129: LD_VAR 0 1
18133: NOT
18134: PUSH
18135: LD_VAR 0 1
18139: PPUSH
18140: CALL_OW 266
18144: PUSH
18145: LD_INT 32
18147: PUSH
18148: LD_INT 33
18150: PUSH
18151: EMPTY
18152: LIST
18153: LIST
18154: IN
18155: NOT
18156: OR
18157: IFFALSE 18161
// exit ;
18159: GO 19270
// nat := GetNation ( tower ) ;
18161: LD_ADDR_VAR 0 12
18165: PUSH
18166: LD_VAR 0 1
18170: PPUSH
18171: CALL_OW 248
18175: ST_TO_ADDR
// side := GetSide ( tower ) ;
18176: LD_ADDR_VAR 0 16
18180: PUSH
18181: LD_VAR 0 1
18185: PPUSH
18186: CALL_OW 255
18190: ST_TO_ADDR
// x := GetX ( tower ) ;
18191: LD_ADDR_VAR 0 10
18195: PUSH
18196: LD_VAR 0 1
18200: PPUSH
18201: CALL_OW 250
18205: ST_TO_ADDR
// y := GetY ( tower ) ;
18206: LD_ADDR_VAR 0 11
18210: PUSH
18211: LD_VAR 0 1
18215: PPUSH
18216: CALL_OW 251
18220: ST_TO_ADDR
// if not x or not y then
18221: LD_VAR 0 10
18225: NOT
18226: PUSH
18227: LD_VAR 0 11
18231: NOT
18232: OR
18233: IFFALSE 18237
// exit ;
18235: GO 19270
// weapon := 0 ;
18237: LD_ADDR_VAR 0 18
18241: PUSH
18242: LD_INT 0
18244: ST_TO_ADDR
// fac_list := [ ] ;
18245: LD_ADDR_VAR 0 17
18249: PUSH
18250: EMPTY
18251: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
18252: LD_ADDR_VAR 0 6
18256: PUSH
18257: LD_VAR 0 1
18261: PPUSH
18262: CALL_OW 274
18266: PPUSH
18267: LD_VAR 0 2
18271: PPUSH
18272: LD_INT 0
18274: PPUSH
18275: CALL 15841 0 3
18279: PPUSH
18280: LD_INT 30
18282: PUSH
18283: LD_INT 3
18285: PUSH
18286: EMPTY
18287: LIST
18288: LIST
18289: PPUSH
18290: CALL_OW 72
18294: ST_TO_ADDR
// if not factories then
18295: LD_VAR 0 6
18299: NOT
18300: IFFALSE 18304
// exit ;
18302: GO 19270
// for i in factories do
18304: LD_ADDR_VAR 0 8
18308: PUSH
18309: LD_VAR 0 6
18313: PUSH
18314: FOR_IN
18315: IFFALSE 18340
// fac_list := fac_list union AvailableWeaponList ( i ) ;
18317: LD_ADDR_VAR 0 17
18321: PUSH
18322: LD_VAR 0 17
18326: PUSH
18327: LD_VAR 0 8
18331: PPUSH
18332: CALL_OW 478
18336: UNION
18337: ST_TO_ADDR
18338: GO 18314
18340: POP
18341: POP
// if not fac_list then
18342: LD_VAR 0 17
18346: NOT
18347: IFFALSE 18351
// exit ;
18349: GO 19270
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
18351: LD_ADDR_VAR 0 5
18355: PUSH
18356: LD_INT 4
18358: PUSH
18359: LD_INT 5
18361: PUSH
18362: LD_INT 9
18364: PUSH
18365: LD_INT 10
18367: PUSH
18368: LD_INT 6
18370: PUSH
18371: LD_INT 7
18373: PUSH
18374: LD_INT 11
18376: PUSH
18377: EMPTY
18378: LIST
18379: LIST
18380: LIST
18381: LIST
18382: LIST
18383: LIST
18384: LIST
18385: PUSH
18386: LD_INT 27
18388: PUSH
18389: LD_INT 28
18391: PUSH
18392: LD_INT 26
18394: PUSH
18395: LD_INT 30
18397: PUSH
18398: EMPTY
18399: LIST
18400: LIST
18401: LIST
18402: LIST
18403: PUSH
18404: LD_INT 43
18406: PUSH
18407: LD_INT 44
18409: PUSH
18410: LD_INT 46
18412: PUSH
18413: LD_INT 45
18415: PUSH
18416: LD_INT 47
18418: PUSH
18419: LD_INT 49
18421: PUSH
18422: EMPTY
18423: LIST
18424: LIST
18425: LIST
18426: LIST
18427: LIST
18428: LIST
18429: PUSH
18430: EMPTY
18431: LIST
18432: LIST
18433: LIST
18434: PUSH
18435: LD_VAR 0 12
18439: ARRAY
18440: ST_TO_ADDR
// list := list isect fac_list ;
18441: LD_ADDR_VAR 0 5
18445: PUSH
18446: LD_VAR 0 5
18450: PUSH
18451: LD_VAR 0 17
18455: ISECT
18456: ST_TO_ADDR
// if not list then
18457: LD_VAR 0 5
18461: NOT
18462: IFFALSE 18466
// exit ;
18464: GO 19270
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
18466: LD_VAR 0 12
18470: PUSH
18471: LD_INT 3
18473: EQUAL
18474: PUSH
18475: LD_INT 49
18477: PUSH
18478: LD_VAR 0 5
18482: IN
18483: AND
18484: PUSH
18485: LD_INT 31
18487: PPUSH
18488: LD_VAR 0 16
18492: PPUSH
18493: CALL_OW 321
18497: PUSH
18498: LD_INT 2
18500: EQUAL
18501: AND
18502: IFFALSE 18562
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
18504: LD_INT 22
18506: PUSH
18507: LD_VAR 0 16
18511: PUSH
18512: EMPTY
18513: LIST
18514: LIST
18515: PUSH
18516: LD_INT 35
18518: PUSH
18519: LD_INT 49
18521: PUSH
18522: EMPTY
18523: LIST
18524: LIST
18525: PUSH
18526: LD_INT 91
18528: PUSH
18529: LD_VAR 0 1
18533: PUSH
18534: LD_INT 10
18536: PUSH
18537: EMPTY
18538: LIST
18539: LIST
18540: LIST
18541: PUSH
18542: EMPTY
18543: LIST
18544: LIST
18545: LIST
18546: PPUSH
18547: CALL_OW 69
18551: NOT
18552: IFFALSE 18562
// weapon := ru_time_lapser ;
18554: LD_ADDR_VAR 0 18
18558: PUSH
18559: LD_INT 49
18561: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
18562: LD_VAR 0 12
18566: PUSH
18567: LD_INT 1
18569: PUSH
18570: LD_INT 2
18572: PUSH
18573: EMPTY
18574: LIST
18575: LIST
18576: IN
18577: PUSH
18578: LD_INT 11
18580: PUSH
18581: LD_VAR 0 5
18585: IN
18586: PUSH
18587: LD_INT 30
18589: PUSH
18590: LD_VAR 0 5
18594: IN
18595: OR
18596: AND
18597: PUSH
18598: LD_INT 6
18600: PPUSH
18601: LD_VAR 0 16
18605: PPUSH
18606: CALL_OW 321
18610: PUSH
18611: LD_INT 2
18613: EQUAL
18614: AND
18615: IFFALSE 18780
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
18617: LD_INT 22
18619: PUSH
18620: LD_VAR 0 16
18624: PUSH
18625: EMPTY
18626: LIST
18627: LIST
18628: PUSH
18629: LD_INT 2
18631: PUSH
18632: LD_INT 35
18634: PUSH
18635: LD_INT 11
18637: PUSH
18638: EMPTY
18639: LIST
18640: LIST
18641: PUSH
18642: LD_INT 35
18644: PUSH
18645: LD_INT 30
18647: PUSH
18648: EMPTY
18649: LIST
18650: LIST
18651: PUSH
18652: EMPTY
18653: LIST
18654: LIST
18655: LIST
18656: PUSH
18657: LD_INT 91
18659: PUSH
18660: LD_VAR 0 1
18664: PUSH
18665: LD_INT 18
18667: PUSH
18668: EMPTY
18669: LIST
18670: LIST
18671: LIST
18672: PUSH
18673: EMPTY
18674: LIST
18675: LIST
18676: LIST
18677: PPUSH
18678: CALL_OW 69
18682: NOT
18683: PUSH
18684: LD_INT 22
18686: PUSH
18687: LD_VAR 0 16
18691: PUSH
18692: EMPTY
18693: LIST
18694: LIST
18695: PUSH
18696: LD_INT 2
18698: PUSH
18699: LD_INT 30
18701: PUSH
18702: LD_INT 32
18704: PUSH
18705: EMPTY
18706: LIST
18707: LIST
18708: PUSH
18709: LD_INT 30
18711: PUSH
18712: LD_INT 33
18714: PUSH
18715: EMPTY
18716: LIST
18717: LIST
18718: PUSH
18719: EMPTY
18720: LIST
18721: LIST
18722: LIST
18723: PUSH
18724: LD_INT 91
18726: PUSH
18727: LD_VAR 0 1
18731: PUSH
18732: LD_INT 12
18734: PUSH
18735: EMPTY
18736: LIST
18737: LIST
18738: LIST
18739: PUSH
18740: EMPTY
18741: LIST
18742: LIST
18743: LIST
18744: PUSH
18745: EMPTY
18746: LIST
18747: PPUSH
18748: CALL_OW 69
18752: PUSH
18753: LD_INT 2
18755: GREATER
18756: AND
18757: IFFALSE 18780
// weapon := [ us_radar , ar_radar ] [ nat ] ;
18759: LD_ADDR_VAR 0 18
18763: PUSH
18764: LD_INT 11
18766: PUSH
18767: LD_INT 30
18769: PUSH
18770: EMPTY
18771: LIST
18772: LIST
18773: PUSH
18774: LD_VAR 0 12
18778: ARRAY
18779: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
18780: LD_VAR 0 18
18784: NOT
18785: PUSH
18786: LD_INT 40
18788: PPUSH
18789: LD_VAR 0 16
18793: PPUSH
18794: CALL_OW 321
18798: PUSH
18799: LD_INT 2
18801: EQUAL
18802: AND
18803: PUSH
18804: LD_INT 7
18806: PUSH
18807: LD_VAR 0 5
18811: IN
18812: PUSH
18813: LD_INT 28
18815: PUSH
18816: LD_VAR 0 5
18820: IN
18821: OR
18822: PUSH
18823: LD_INT 45
18825: PUSH
18826: LD_VAR 0 5
18830: IN
18831: OR
18832: AND
18833: IFFALSE 19087
// begin hex := GetHexInfo ( x , y ) ;
18835: LD_ADDR_VAR 0 4
18839: PUSH
18840: LD_VAR 0 10
18844: PPUSH
18845: LD_VAR 0 11
18849: PPUSH
18850: CALL_OW 546
18854: ST_TO_ADDR
// if hex [ 1 ] then
18855: LD_VAR 0 4
18859: PUSH
18860: LD_INT 1
18862: ARRAY
18863: IFFALSE 18867
// exit ;
18865: GO 19270
// height := hex [ 2 ] ;
18867: LD_ADDR_VAR 0 15
18871: PUSH
18872: LD_VAR 0 4
18876: PUSH
18877: LD_INT 2
18879: ARRAY
18880: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
18881: LD_ADDR_VAR 0 14
18885: PUSH
18886: LD_INT 0
18888: PUSH
18889: LD_INT 2
18891: PUSH
18892: LD_INT 3
18894: PUSH
18895: LD_INT 5
18897: PUSH
18898: EMPTY
18899: LIST
18900: LIST
18901: LIST
18902: LIST
18903: ST_TO_ADDR
// for i in tmp do
18904: LD_ADDR_VAR 0 8
18908: PUSH
18909: LD_VAR 0 14
18913: PUSH
18914: FOR_IN
18915: IFFALSE 19085
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
18917: LD_ADDR_VAR 0 9
18921: PUSH
18922: LD_VAR 0 10
18926: PPUSH
18927: LD_VAR 0 8
18931: PPUSH
18932: LD_INT 5
18934: PPUSH
18935: CALL_OW 272
18939: PUSH
18940: LD_VAR 0 11
18944: PPUSH
18945: LD_VAR 0 8
18949: PPUSH
18950: LD_INT 5
18952: PPUSH
18953: CALL_OW 273
18957: PUSH
18958: EMPTY
18959: LIST
18960: LIST
18961: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
18962: LD_VAR 0 9
18966: PUSH
18967: LD_INT 1
18969: ARRAY
18970: PPUSH
18971: LD_VAR 0 9
18975: PUSH
18976: LD_INT 2
18978: ARRAY
18979: PPUSH
18980: CALL_OW 488
18984: IFFALSE 19083
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
18986: LD_ADDR_VAR 0 4
18990: PUSH
18991: LD_VAR 0 9
18995: PUSH
18996: LD_INT 1
18998: ARRAY
18999: PPUSH
19000: LD_VAR 0 9
19004: PUSH
19005: LD_INT 2
19007: ARRAY
19008: PPUSH
19009: CALL_OW 546
19013: ST_TO_ADDR
// if hex [ 1 ] then
19014: LD_VAR 0 4
19018: PUSH
19019: LD_INT 1
19021: ARRAY
19022: IFFALSE 19026
// continue ;
19024: GO 18914
// h := hex [ 2 ] ;
19026: LD_ADDR_VAR 0 13
19030: PUSH
19031: LD_VAR 0 4
19035: PUSH
19036: LD_INT 2
19038: ARRAY
19039: ST_TO_ADDR
// if h + 7 < height then
19040: LD_VAR 0 13
19044: PUSH
19045: LD_INT 7
19047: PLUS
19048: PUSH
19049: LD_VAR 0 15
19053: LESS
19054: IFFALSE 19083
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
19056: LD_ADDR_VAR 0 18
19060: PUSH
19061: LD_INT 7
19063: PUSH
19064: LD_INT 28
19066: PUSH
19067: LD_INT 45
19069: PUSH
19070: EMPTY
19071: LIST
19072: LIST
19073: LIST
19074: PUSH
19075: LD_VAR 0 12
19079: ARRAY
19080: ST_TO_ADDR
// break ;
19081: GO 19085
// end ; end ; end ;
19083: GO 18914
19085: POP
19086: POP
// end ; if not weapon then
19087: LD_VAR 0 18
19091: NOT
19092: IFFALSE 19152
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
19094: LD_ADDR_VAR 0 5
19098: PUSH
19099: LD_VAR 0 5
19103: PUSH
19104: LD_INT 11
19106: PUSH
19107: LD_INT 30
19109: PUSH
19110: LD_INT 49
19112: PUSH
19113: EMPTY
19114: LIST
19115: LIST
19116: LIST
19117: DIFF
19118: ST_TO_ADDR
// if not list then
19119: LD_VAR 0 5
19123: NOT
19124: IFFALSE 19128
// exit ;
19126: GO 19270
// weapon := list [ rand ( 1 , list ) ] ;
19128: LD_ADDR_VAR 0 18
19132: PUSH
19133: LD_VAR 0 5
19137: PUSH
19138: LD_INT 1
19140: PPUSH
19141: LD_VAR 0 5
19145: PPUSH
19146: CALL_OW 12
19150: ARRAY
19151: ST_TO_ADDR
// end ; if weapon then
19152: LD_VAR 0 18
19156: IFFALSE 19270
// begin tmp := CostOfWeapon ( weapon ) ;
19158: LD_ADDR_VAR 0 14
19162: PUSH
19163: LD_VAR 0 18
19167: PPUSH
19168: CALL_OW 451
19172: ST_TO_ADDR
// j := GetBase ( tower ) ;
19173: LD_ADDR_VAR 0 9
19177: PUSH
19178: LD_VAR 0 1
19182: PPUSH
19183: CALL_OW 274
19187: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
19188: LD_VAR 0 9
19192: PPUSH
19193: LD_INT 1
19195: PPUSH
19196: CALL_OW 275
19200: PUSH
19201: LD_VAR 0 14
19205: PUSH
19206: LD_INT 1
19208: ARRAY
19209: GREATEREQUAL
19210: PUSH
19211: LD_VAR 0 9
19215: PPUSH
19216: LD_INT 2
19218: PPUSH
19219: CALL_OW 275
19223: PUSH
19224: LD_VAR 0 14
19228: PUSH
19229: LD_INT 2
19231: ARRAY
19232: GREATEREQUAL
19233: AND
19234: PUSH
19235: LD_VAR 0 9
19239: PPUSH
19240: LD_INT 3
19242: PPUSH
19243: CALL_OW 275
19247: PUSH
19248: LD_VAR 0 14
19252: PUSH
19253: LD_INT 3
19255: ARRAY
19256: GREATEREQUAL
19257: AND
19258: IFFALSE 19270
// result := weapon ;
19260: LD_ADDR_VAR 0 3
19264: PUSH
19265: LD_VAR 0 18
19269: ST_TO_ADDR
// end ; end ;
19270: LD_VAR 0 3
19274: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
19275: LD_INT 0
19277: PPUSH
19278: PPUSH
// result := true ;
19279: LD_ADDR_VAR 0 3
19283: PUSH
19284: LD_INT 1
19286: ST_TO_ADDR
// if array1 = array2 then
19287: LD_VAR 0 1
19291: PUSH
19292: LD_VAR 0 2
19296: EQUAL
19297: IFFALSE 19357
// begin for i = 1 to array1 do
19299: LD_ADDR_VAR 0 4
19303: PUSH
19304: DOUBLE
19305: LD_INT 1
19307: DEC
19308: ST_TO_ADDR
19309: LD_VAR 0 1
19313: PUSH
19314: FOR_TO
19315: IFFALSE 19353
// if array1 [ i ] <> array2 [ i ] then
19317: LD_VAR 0 1
19321: PUSH
19322: LD_VAR 0 4
19326: ARRAY
19327: PUSH
19328: LD_VAR 0 2
19332: PUSH
19333: LD_VAR 0 4
19337: ARRAY
19338: NONEQUAL
19339: IFFALSE 19351
// begin result := false ;
19341: LD_ADDR_VAR 0 3
19345: PUSH
19346: LD_INT 0
19348: ST_TO_ADDR
// break ;
19349: GO 19353
// end ;
19351: GO 19314
19353: POP
19354: POP
// end else
19355: GO 19365
// result := false ;
19357: LD_ADDR_VAR 0 3
19361: PUSH
19362: LD_INT 0
19364: ST_TO_ADDR
// end ;
19365: LD_VAR 0 3
19369: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
19370: LD_INT 0
19372: PPUSH
19373: PPUSH
// if not array1 or not array2 then
19374: LD_VAR 0 1
19378: NOT
19379: PUSH
19380: LD_VAR 0 2
19384: NOT
19385: OR
19386: IFFALSE 19390
// exit ;
19388: GO 19454
// result := true ;
19390: LD_ADDR_VAR 0 3
19394: PUSH
19395: LD_INT 1
19397: ST_TO_ADDR
// for i = 1 to array1 do
19398: LD_ADDR_VAR 0 4
19402: PUSH
19403: DOUBLE
19404: LD_INT 1
19406: DEC
19407: ST_TO_ADDR
19408: LD_VAR 0 1
19412: PUSH
19413: FOR_TO
19414: IFFALSE 19452
// if array1 [ i ] <> array2 [ i ] then
19416: LD_VAR 0 1
19420: PUSH
19421: LD_VAR 0 4
19425: ARRAY
19426: PUSH
19427: LD_VAR 0 2
19431: PUSH
19432: LD_VAR 0 4
19436: ARRAY
19437: NONEQUAL
19438: IFFALSE 19450
// begin result := false ;
19440: LD_ADDR_VAR 0 3
19444: PUSH
19445: LD_INT 0
19447: ST_TO_ADDR
// break ;
19448: GO 19452
// end ;
19450: GO 19413
19452: POP
19453: POP
// end ;
19454: LD_VAR 0 3
19458: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
19459: LD_INT 0
19461: PPUSH
19462: PPUSH
19463: PPUSH
// pom := GetBase ( fac ) ;
19464: LD_ADDR_VAR 0 5
19468: PUSH
19469: LD_VAR 0 1
19473: PPUSH
19474: CALL_OW 274
19478: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
19479: LD_ADDR_VAR 0 4
19483: PUSH
19484: LD_VAR 0 2
19488: PUSH
19489: LD_INT 1
19491: ARRAY
19492: PPUSH
19493: LD_VAR 0 2
19497: PUSH
19498: LD_INT 2
19500: ARRAY
19501: PPUSH
19502: LD_VAR 0 2
19506: PUSH
19507: LD_INT 3
19509: ARRAY
19510: PPUSH
19511: LD_VAR 0 2
19515: PUSH
19516: LD_INT 4
19518: ARRAY
19519: PPUSH
19520: CALL_OW 449
19524: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
19525: LD_ADDR_VAR 0 3
19529: PUSH
19530: LD_VAR 0 5
19534: PPUSH
19535: LD_INT 1
19537: PPUSH
19538: CALL_OW 275
19542: PUSH
19543: LD_VAR 0 4
19547: PUSH
19548: LD_INT 1
19550: ARRAY
19551: GREATEREQUAL
19552: PUSH
19553: LD_VAR 0 5
19557: PPUSH
19558: LD_INT 2
19560: PPUSH
19561: CALL_OW 275
19565: PUSH
19566: LD_VAR 0 4
19570: PUSH
19571: LD_INT 2
19573: ARRAY
19574: GREATEREQUAL
19575: AND
19576: PUSH
19577: LD_VAR 0 5
19581: PPUSH
19582: LD_INT 3
19584: PPUSH
19585: CALL_OW 275
19589: PUSH
19590: LD_VAR 0 4
19594: PUSH
19595: LD_INT 3
19597: ARRAY
19598: GREATEREQUAL
19599: AND
19600: ST_TO_ADDR
// end ;
19601: LD_VAR 0 3
19605: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
19606: LD_INT 0
19608: PPUSH
19609: PPUSH
19610: PPUSH
19611: PPUSH
// pom := GetBase ( building ) ;
19612: LD_ADDR_VAR 0 3
19616: PUSH
19617: LD_VAR 0 1
19621: PPUSH
19622: CALL_OW 274
19626: ST_TO_ADDR
// if not pom then
19627: LD_VAR 0 3
19631: NOT
19632: IFFALSE 19636
// exit ;
19634: GO 19806
// btype := GetBType ( building ) ;
19636: LD_ADDR_VAR 0 5
19640: PUSH
19641: LD_VAR 0 1
19645: PPUSH
19646: CALL_OW 266
19650: ST_TO_ADDR
// if btype = b_armoury then
19651: LD_VAR 0 5
19655: PUSH
19656: LD_INT 4
19658: EQUAL
19659: IFFALSE 19669
// btype := b_barracks ;
19661: LD_ADDR_VAR 0 5
19665: PUSH
19666: LD_INT 5
19668: ST_TO_ADDR
// if btype = b_depot then
19669: LD_VAR 0 5
19673: PUSH
19674: LD_INT 0
19676: EQUAL
19677: IFFALSE 19687
// btype := b_warehouse ;
19679: LD_ADDR_VAR 0 5
19683: PUSH
19684: LD_INT 1
19686: ST_TO_ADDR
// if btype = b_workshop then
19687: LD_VAR 0 5
19691: PUSH
19692: LD_INT 2
19694: EQUAL
19695: IFFALSE 19705
// btype := b_factory ;
19697: LD_ADDR_VAR 0 5
19701: PUSH
19702: LD_INT 3
19704: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
19705: LD_ADDR_VAR 0 4
19709: PUSH
19710: LD_VAR 0 5
19714: PPUSH
19715: LD_VAR 0 1
19719: PPUSH
19720: CALL_OW 248
19724: PPUSH
19725: CALL_OW 450
19729: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
19730: LD_ADDR_VAR 0 2
19734: PUSH
19735: LD_VAR 0 3
19739: PPUSH
19740: LD_INT 1
19742: PPUSH
19743: CALL_OW 275
19747: PUSH
19748: LD_VAR 0 4
19752: PUSH
19753: LD_INT 1
19755: ARRAY
19756: GREATEREQUAL
19757: PUSH
19758: LD_VAR 0 3
19762: PPUSH
19763: LD_INT 2
19765: PPUSH
19766: CALL_OW 275
19770: PUSH
19771: LD_VAR 0 4
19775: PUSH
19776: LD_INT 2
19778: ARRAY
19779: GREATEREQUAL
19780: AND
19781: PUSH
19782: LD_VAR 0 3
19786: PPUSH
19787: LD_INT 3
19789: PPUSH
19790: CALL_OW 275
19794: PUSH
19795: LD_VAR 0 4
19799: PUSH
19800: LD_INT 3
19802: ARRAY
19803: GREATEREQUAL
19804: AND
19805: ST_TO_ADDR
// end ;
19806: LD_VAR 0 2
19810: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
19811: LD_INT 0
19813: PPUSH
19814: PPUSH
19815: PPUSH
// pom := GetBase ( building ) ;
19816: LD_ADDR_VAR 0 4
19820: PUSH
19821: LD_VAR 0 1
19825: PPUSH
19826: CALL_OW 274
19830: ST_TO_ADDR
// if not pom then
19831: LD_VAR 0 4
19835: NOT
19836: IFFALSE 19840
// exit ;
19838: GO 19941
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
19840: LD_ADDR_VAR 0 5
19844: PUSH
19845: LD_VAR 0 2
19849: PPUSH
19850: LD_VAR 0 1
19854: PPUSH
19855: CALL_OW 248
19859: PPUSH
19860: CALL_OW 450
19864: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
19865: LD_ADDR_VAR 0 3
19869: PUSH
19870: LD_VAR 0 4
19874: PPUSH
19875: LD_INT 1
19877: PPUSH
19878: CALL_OW 275
19882: PUSH
19883: LD_VAR 0 5
19887: PUSH
19888: LD_INT 1
19890: ARRAY
19891: GREATEREQUAL
19892: PUSH
19893: LD_VAR 0 4
19897: PPUSH
19898: LD_INT 2
19900: PPUSH
19901: CALL_OW 275
19905: PUSH
19906: LD_VAR 0 5
19910: PUSH
19911: LD_INT 2
19913: ARRAY
19914: GREATEREQUAL
19915: AND
19916: PUSH
19917: LD_VAR 0 4
19921: PPUSH
19922: LD_INT 3
19924: PPUSH
19925: CALL_OW 275
19929: PUSH
19930: LD_VAR 0 5
19934: PUSH
19935: LD_INT 3
19937: ARRAY
19938: GREATEREQUAL
19939: AND
19940: ST_TO_ADDR
// end ;
19941: LD_VAR 0 3
19945: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
19946: LD_INT 0
19948: PPUSH
19949: PPUSH
19950: PPUSH
19951: PPUSH
19952: PPUSH
19953: PPUSH
19954: PPUSH
19955: PPUSH
19956: PPUSH
19957: PPUSH
19958: PPUSH
// result := false ;
19959: LD_ADDR_VAR 0 8
19963: PUSH
19964: LD_INT 0
19966: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
19967: LD_VAR 0 5
19971: NOT
19972: PUSH
19973: LD_VAR 0 1
19977: NOT
19978: OR
19979: PUSH
19980: LD_VAR 0 2
19984: NOT
19985: OR
19986: PUSH
19987: LD_VAR 0 3
19991: NOT
19992: OR
19993: IFFALSE 19997
// exit ;
19995: GO 20811
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
19997: LD_ADDR_VAR 0 14
20001: PUSH
20002: LD_VAR 0 1
20006: PPUSH
20007: LD_VAR 0 2
20011: PPUSH
20012: LD_VAR 0 3
20016: PPUSH
20017: LD_VAR 0 4
20021: PPUSH
20022: LD_VAR 0 5
20026: PUSH
20027: LD_INT 1
20029: ARRAY
20030: PPUSH
20031: CALL_OW 248
20035: PPUSH
20036: LD_INT 0
20038: PPUSH
20039: CALL 22044 0 6
20043: ST_TO_ADDR
// if not hexes then
20044: LD_VAR 0 14
20048: NOT
20049: IFFALSE 20053
// exit ;
20051: GO 20811
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
20053: LD_ADDR_VAR 0 17
20057: PUSH
20058: LD_VAR 0 5
20062: PPUSH
20063: LD_INT 22
20065: PUSH
20066: LD_VAR 0 13
20070: PPUSH
20071: CALL_OW 255
20075: PUSH
20076: EMPTY
20077: LIST
20078: LIST
20079: PUSH
20080: LD_INT 2
20082: PUSH
20083: LD_INT 30
20085: PUSH
20086: LD_INT 0
20088: PUSH
20089: EMPTY
20090: LIST
20091: LIST
20092: PUSH
20093: LD_INT 30
20095: PUSH
20096: LD_INT 1
20098: PUSH
20099: EMPTY
20100: LIST
20101: LIST
20102: PUSH
20103: EMPTY
20104: LIST
20105: LIST
20106: LIST
20107: PUSH
20108: EMPTY
20109: LIST
20110: LIST
20111: PPUSH
20112: CALL_OW 72
20116: ST_TO_ADDR
// for i = 1 to hexes do
20117: LD_ADDR_VAR 0 9
20121: PUSH
20122: DOUBLE
20123: LD_INT 1
20125: DEC
20126: ST_TO_ADDR
20127: LD_VAR 0 14
20131: PUSH
20132: FOR_TO
20133: IFFALSE 20809
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
20135: LD_ADDR_VAR 0 13
20139: PUSH
20140: LD_VAR 0 14
20144: PUSH
20145: LD_VAR 0 9
20149: ARRAY
20150: PUSH
20151: LD_INT 1
20153: ARRAY
20154: PPUSH
20155: LD_VAR 0 14
20159: PUSH
20160: LD_VAR 0 9
20164: ARRAY
20165: PUSH
20166: LD_INT 2
20168: ARRAY
20169: PPUSH
20170: CALL_OW 428
20174: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
20175: LD_VAR 0 14
20179: PUSH
20180: LD_VAR 0 9
20184: ARRAY
20185: PUSH
20186: LD_INT 1
20188: ARRAY
20189: PPUSH
20190: LD_VAR 0 14
20194: PUSH
20195: LD_VAR 0 9
20199: ARRAY
20200: PUSH
20201: LD_INT 2
20203: ARRAY
20204: PPUSH
20205: CALL_OW 351
20209: PUSH
20210: LD_VAR 0 14
20214: PUSH
20215: LD_VAR 0 9
20219: ARRAY
20220: PUSH
20221: LD_INT 1
20223: ARRAY
20224: PPUSH
20225: LD_VAR 0 14
20229: PUSH
20230: LD_VAR 0 9
20234: ARRAY
20235: PUSH
20236: LD_INT 2
20238: ARRAY
20239: PPUSH
20240: CALL_OW 488
20244: NOT
20245: OR
20246: PUSH
20247: LD_VAR 0 13
20251: PPUSH
20252: CALL_OW 247
20256: PUSH
20257: LD_INT 3
20259: EQUAL
20260: OR
20261: IFFALSE 20267
// exit ;
20263: POP
20264: POP
20265: GO 20811
// if not tmp then
20267: LD_VAR 0 13
20271: NOT
20272: IFFALSE 20276
// continue ;
20274: GO 20132
// result := true ;
20276: LD_ADDR_VAR 0 8
20280: PUSH
20281: LD_INT 1
20283: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
20284: LD_VAR 0 6
20288: PUSH
20289: LD_VAR 0 13
20293: PPUSH
20294: CALL_OW 247
20298: PUSH
20299: LD_INT 2
20301: EQUAL
20302: AND
20303: PUSH
20304: LD_VAR 0 13
20308: PPUSH
20309: CALL_OW 263
20313: PUSH
20314: LD_INT 1
20316: EQUAL
20317: AND
20318: IFFALSE 20482
// begin if IsDrivenBy ( tmp ) then
20320: LD_VAR 0 13
20324: PPUSH
20325: CALL_OW 311
20329: IFFALSE 20333
// continue ;
20331: GO 20132
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
20333: LD_VAR 0 6
20337: PPUSH
20338: LD_INT 3
20340: PUSH
20341: LD_INT 60
20343: PUSH
20344: EMPTY
20345: LIST
20346: PUSH
20347: EMPTY
20348: LIST
20349: LIST
20350: PUSH
20351: LD_INT 3
20353: PUSH
20354: LD_INT 55
20356: PUSH
20357: EMPTY
20358: LIST
20359: PUSH
20360: EMPTY
20361: LIST
20362: LIST
20363: PUSH
20364: EMPTY
20365: LIST
20366: LIST
20367: PPUSH
20368: CALL_OW 72
20372: IFFALSE 20480
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
20374: LD_ADDR_VAR 0 18
20378: PUSH
20379: LD_VAR 0 6
20383: PPUSH
20384: LD_INT 3
20386: PUSH
20387: LD_INT 60
20389: PUSH
20390: EMPTY
20391: LIST
20392: PUSH
20393: EMPTY
20394: LIST
20395: LIST
20396: PUSH
20397: LD_INT 3
20399: PUSH
20400: LD_INT 55
20402: PUSH
20403: EMPTY
20404: LIST
20405: PUSH
20406: EMPTY
20407: LIST
20408: LIST
20409: PUSH
20410: EMPTY
20411: LIST
20412: LIST
20413: PPUSH
20414: CALL_OW 72
20418: PUSH
20419: LD_INT 1
20421: ARRAY
20422: ST_TO_ADDR
// if IsInUnit ( driver ) then
20423: LD_VAR 0 18
20427: PPUSH
20428: CALL_OW 310
20432: IFFALSE 20443
// ComExit ( driver ) ;
20434: LD_VAR 0 18
20438: PPUSH
20439: CALL 45824 0 1
// AddComEnterUnit ( driver , tmp ) ;
20443: LD_VAR 0 18
20447: PPUSH
20448: LD_VAR 0 13
20452: PPUSH
20453: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
20457: LD_VAR 0 18
20461: PPUSH
20462: LD_VAR 0 7
20466: PPUSH
20467: CALL_OW 173
// AddComExitVehicle ( driver ) ;
20471: LD_VAR 0 18
20475: PPUSH
20476: CALL_OW 181
// end ; continue ;
20480: GO 20132
// end ; if not cleaners or not tmp in cleaners then
20482: LD_VAR 0 6
20486: NOT
20487: PUSH
20488: LD_VAR 0 13
20492: PUSH
20493: LD_VAR 0 6
20497: IN
20498: NOT
20499: OR
20500: IFFALSE 20807
// begin if dep then
20502: LD_VAR 0 17
20506: IFFALSE 20642
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
20508: LD_ADDR_VAR 0 16
20512: PUSH
20513: LD_VAR 0 17
20517: PUSH
20518: LD_INT 1
20520: ARRAY
20521: PPUSH
20522: CALL_OW 250
20526: PPUSH
20527: LD_VAR 0 17
20531: PUSH
20532: LD_INT 1
20534: ARRAY
20535: PPUSH
20536: CALL_OW 254
20540: PPUSH
20541: LD_INT 5
20543: PPUSH
20544: CALL_OW 272
20548: PUSH
20549: LD_VAR 0 17
20553: PUSH
20554: LD_INT 1
20556: ARRAY
20557: PPUSH
20558: CALL_OW 251
20562: PPUSH
20563: LD_VAR 0 17
20567: PUSH
20568: LD_INT 1
20570: ARRAY
20571: PPUSH
20572: CALL_OW 254
20576: PPUSH
20577: LD_INT 5
20579: PPUSH
20580: CALL_OW 273
20584: PUSH
20585: EMPTY
20586: LIST
20587: LIST
20588: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
20589: LD_VAR 0 16
20593: PUSH
20594: LD_INT 1
20596: ARRAY
20597: PPUSH
20598: LD_VAR 0 16
20602: PUSH
20603: LD_INT 2
20605: ARRAY
20606: PPUSH
20607: CALL_OW 488
20611: IFFALSE 20642
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
20613: LD_VAR 0 13
20617: PPUSH
20618: LD_VAR 0 16
20622: PUSH
20623: LD_INT 1
20625: ARRAY
20626: PPUSH
20627: LD_VAR 0 16
20631: PUSH
20632: LD_INT 2
20634: ARRAY
20635: PPUSH
20636: CALL_OW 111
// continue ;
20640: GO 20132
// end ; end ; r := GetDir ( tmp ) ;
20642: LD_ADDR_VAR 0 15
20646: PUSH
20647: LD_VAR 0 13
20651: PPUSH
20652: CALL_OW 254
20656: ST_TO_ADDR
// if r = 5 then
20657: LD_VAR 0 15
20661: PUSH
20662: LD_INT 5
20664: EQUAL
20665: IFFALSE 20675
// r := 0 ;
20667: LD_ADDR_VAR 0 15
20671: PUSH
20672: LD_INT 0
20674: ST_TO_ADDR
// for j = r to 5 do
20675: LD_ADDR_VAR 0 10
20679: PUSH
20680: DOUBLE
20681: LD_VAR 0 15
20685: DEC
20686: ST_TO_ADDR
20687: LD_INT 5
20689: PUSH
20690: FOR_TO
20691: IFFALSE 20805
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
20693: LD_ADDR_VAR 0 11
20697: PUSH
20698: LD_VAR 0 13
20702: PPUSH
20703: CALL_OW 250
20707: PPUSH
20708: LD_VAR 0 10
20712: PPUSH
20713: LD_INT 2
20715: PPUSH
20716: CALL_OW 272
20720: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
20721: LD_ADDR_VAR 0 12
20725: PUSH
20726: LD_VAR 0 13
20730: PPUSH
20731: CALL_OW 251
20735: PPUSH
20736: LD_VAR 0 10
20740: PPUSH
20741: LD_INT 2
20743: PPUSH
20744: CALL_OW 273
20748: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
20749: LD_VAR 0 11
20753: PPUSH
20754: LD_VAR 0 12
20758: PPUSH
20759: CALL_OW 488
20763: PUSH
20764: LD_VAR 0 11
20768: PPUSH
20769: LD_VAR 0 12
20773: PPUSH
20774: CALL_OW 428
20778: NOT
20779: AND
20780: IFFALSE 20803
// begin ComMoveXY ( tmp , _x , _y ) ;
20782: LD_VAR 0 13
20786: PPUSH
20787: LD_VAR 0 11
20791: PPUSH
20792: LD_VAR 0 12
20796: PPUSH
20797: CALL_OW 111
// break ;
20801: GO 20805
// end ; end ;
20803: GO 20690
20805: POP
20806: POP
// end ; end ;
20807: GO 20132
20809: POP
20810: POP
// end ;
20811: LD_VAR 0 8
20815: RET
// export function BuildingTechInvented ( side , btype ) ; begin
20816: LD_INT 0
20818: PPUSH
// result := true ;
20819: LD_ADDR_VAR 0 3
20823: PUSH
20824: LD_INT 1
20826: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
20827: LD_VAR 0 2
20831: PUSH
20832: LD_INT 24
20834: DOUBLE
20835: EQUAL
20836: IFTRUE 20846
20838: LD_INT 33
20840: DOUBLE
20841: EQUAL
20842: IFTRUE 20846
20844: GO 20871
20846: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
20847: LD_ADDR_VAR 0 3
20851: PUSH
20852: LD_INT 32
20854: PPUSH
20855: LD_VAR 0 1
20859: PPUSH
20860: CALL_OW 321
20864: PUSH
20865: LD_INT 2
20867: EQUAL
20868: ST_TO_ADDR
20869: GO 21187
20871: LD_INT 20
20873: DOUBLE
20874: EQUAL
20875: IFTRUE 20879
20877: GO 20904
20879: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
20880: LD_ADDR_VAR 0 3
20884: PUSH
20885: LD_INT 6
20887: PPUSH
20888: LD_VAR 0 1
20892: PPUSH
20893: CALL_OW 321
20897: PUSH
20898: LD_INT 2
20900: EQUAL
20901: ST_TO_ADDR
20902: GO 21187
20904: LD_INT 22
20906: DOUBLE
20907: EQUAL
20908: IFTRUE 20918
20910: LD_INT 36
20912: DOUBLE
20913: EQUAL
20914: IFTRUE 20918
20916: GO 20943
20918: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
20919: LD_ADDR_VAR 0 3
20923: PUSH
20924: LD_INT 15
20926: PPUSH
20927: LD_VAR 0 1
20931: PPUSH
20932: CALL_OW 321
20936: PUSH
20937: LD_INT 2
20939: EQUAL
20940: ST_TO_ADDR
20941: GO 21187
20943: LD_INT 30
20945: DOUBLE
20946: EQUAL
20947: IFTRUE 20951
20949: GO 20976
20951: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
20952: LD_ADDR_VAR 0 3
20956: PUSH
20957: LD_INT 20
20959: PPUSH
20960: LD_VAR 0 1
20964: PPUSH
20965: CALL_OW 321
20969: PUSH
20970: LD_INT 2
20972: EQUAL
20973: ST_TO_ADDR
20974: GO 21187
20976: LD_INT 28
20978: DOUBLE
20979: EQUAL
20980: IFTRUE 20990
20982: LD_INT 21
20984: DOUBLE
20985: EQUAL
20986: IFTRUE 20990
20988: GO 21015
20990: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
20991: LD_ADDR_VAR 0 3
20995: PUSH
20996: LD_INT 21
20998: PPUSH
20999: LD_VAR 0 1
21003: PPUSH
21004: CALL_OW 321
21008: PUSH
21009: LD_INT 2
21011: EQUAL
21012: ST_TO_ADDR
21013: GO 21187
21015: LD_INT 16
21017: DOUBLE
21018: EQUAL
21019: IFTRUE 21023
21021: GO 21048
21023: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
21024: LD_ADDR_VAR 0 3
21028: PUSH
21029: LD_INT 84
21031: PPUSH
21032: LD_VAR 0 1
21036: PPUSH
21037: CALL_OW 321
21041: PUSH
21042: LD_INT 2
21044: EQUAL
21045: ST_TO_ADDR
21046: GO 21187
21048: LD_INT 19
21050: DOUBLE
21051: EQUAL
21052: IFTRUE 21062
21054: LD_INT 23
21056: DOUBLE
21057: EQUAL
21058: IFTRUE 21062
21060: GO 21087
21062: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
21063: LD_ADDR_VAR 0 3
21067: PUSH
21068: LD_INT 83
21070: PPUSH
21071: LD_VAR 0 1
21075: PPUSH
21076: CALL_OW 321
21080: PUSH
21081: LD_INT 2
21083: EQUAL
21084: ST_TO_ADDR
21085: GO 21187
21087: LD_INT 17
21089: DOUBLE
21090: EQUAL
21091: IFTRUE 21095
21093: GO 21120
21095: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
21096: LD_ADDR_VAR 0 3
21100: PUSH
21101: LD_INT 39
21103: PPUSH
21104: LD_VAR 0 1
21108: PPUSH
21109: CALL_OW 321
21113: PUSH
21114: LD_INT 2
21116: EQUAL
21117: ST_TO_ADDR
21118: GO 21187
21120: LD_INT 18
21122: DOUBLE
21123: EQUAL
21124: IFTRUE 21128
21126: GO 21153
21128: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
21129: LD_ADDR_VAR 0 3
21133: PUSH
21134: LD_INT 40
21136: PPUSH
21137: LD_VAR 0 1
21141: PPUSH
21142: CALL_OW 321
21146: PUSH
21147: LD_INT 2
21149: EQUAL
21150: ST_TO_ADDR
21151: GO 21187
21153: LD_INT 27
21155: DOUBLE
21156: EQUAL
21157: IFTRUE 21161
21159: GO 21186
21161: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
21162: LD_ADDR_VAR 0 3
21166: PUSH
21167: LD_INT 35
21169: PPUSH
21170: LD_VAR 0 1
21174: PPUSH
21175: CALL_OW 321
21179: PUSH
21180: LD_INT 2
21182: EQUAL
21183: ST_TO_ADDR
21184: GO 21187
21186: POP
// end ;
21187: LD_VAR 0 3
21191: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
21192: LD_INT 0
21194: PPUSH
21195: PPUSH
21196: PPUSH
21197: PPUSH
21198: PPUSH
21199: PPUSH
21200: PPUSH
21201: PPUSH
21202: PPUSH
21203: PPUSH
21204: PPUSH
// result := false ;
21205: LD_ADDR_VAR 0 6
21209: PUSH
21210: LD_INT 0
21212: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
21213: LD_VAR 0 1
21217: NOT
21218: PUSH
21219: LD_VAR 0 1
21223: PPUSH
21224: CALL_OW 266
21228: PUSH
21229: LD_INT 0
21231: PUSH
21232: LD_INT 1
21234: PUSH
21235: EMPTY
21236: LIST
21237: LIST
21238: IN
21239: NOT
21240: OR
21241: PUSH
21242: LD_VAR 0 2
21246: NOT
21247: OR
21248: PUSH
21249: LD_VAR 0 5
21253: PUSH
21254: LD_INT 0
21256: PUSH
21257: LD_INT 1
21259: PUSH
21260: LD_INT 2
21262: PUSH
21263: LD_INT 3
21265: PUSH
21266: LD_INT 4
21268: PUSH
21269: LD_INT 5
21271: PUSH
21272: EMPTY
21273: LIST
21274: LIST
21275: LIST
21276: LIST
21277: LIST
21278: LIST
21279: IN
21280: NOT
21281: OR
21282: PUSH
21283: LD_VAR 0 3
21287: PPUSH
21288: LD_VAR 0 4
21292: PPUSH
21293: CALL_OW 488
21297: NOT
21298: OR
21299: IFFALSE 21303
// exit ;
21301: GO 22039
// side := GetSide ( depot ) ;
21303: LD_ADDR_VAR 0 9
21307: PUSH
21308: LD_VAR 0 1
21312: PPUSH
21313: CALL_OW 255
21317: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
21318: LD_VAR 0 9
21322: PPUSH
21323: LD_VAR 0 2
21327: PPUSH
21328: CALL 20816 0 2
21332: NOT
21333: IFFALSE 21337
// exit ;
21335: GO 22039
// pom := GetBase ( depot ) ;
21337: LD_ADDR_VAR 0 10
21341: PUSH
21342: LD_VAR 0 1
21346: PPUSH
21347: CALL_OW 274
21351: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
21352: LD_ADDR_VAR 0 11
21356: PUSH
21357: LD_VAR 0 2
21361: PPUSH
21362: LD_VAR 0 1
21366: PPUSH
21367: CALL_OW 248
21371: PPUSH
21372: CALL_OW 450
21376: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
21377: LD_VAR 0 10
21381: PPUSH
21382: LD_INT 1
21384: PPUSH
21385: CALL_OW 275
21389: PUSH
21390: LD_VAR 0 11
21394: PUSH
21395: LD_INT 1
21397: ARRAY
21398: GREATEREQUAL
21399: PUSH
21400: LD_VAR 0 10
21404: PPUSH
21405: LD_INT 2
21407: PPUSH
21408: CALL_OW 275
21412: PUSH
21413: LD_VAR 0 11
21417: PUSH
21418: LD_INT 2
21420: ARRAY
21421: GREATEREQUAL
21422: AND
21423: PUSH
21424: LD_VAR 0 10
21428: PPUSH
21429: LD_INT 3
21431: PPUSH
21432: CALL_OW 275
21436: PUSH
21437: LD_VAR 0 11
21441: PUSH
21442: LD_INT 3
21444: ARRAY
21445: GREATEREQUAL
21446: AND
21447: NOT
21448: IFFALSE 21452
// exit ;
21450: GO 22039
// if GetBType ( depot ) = b_depot then
21452: LD_VAR 0 1
21456: PPUSH
21457: CALL_OW 266
21461: PUSH
21462: LD_INT 0
21464: EQUAL
21465: IFFALSE 21477
// dist := 28 else
21467: LD_ADDR_VAR 0 14
21471: PUSH
21472: LD_INT 28
21474: ST_TO_ADDR
21475: GO 21485
// dist := 36 ;
21477: LD_ADDR_VAR 0 14
21481: PUSH
21482: LD_INT 36
21484: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
21485: LD_VAR 0 1
21489: PPUSH
21490: LD_VAR 0 3
21494: PPUSH
21495: LD_VAR 0 4
21499: PPUSH
21500: CALL_OW 297
21504: PUSH
21505: LD_VAR 0 14
21509: GREATER
21510: IFFALSE 21514
// exit ;
21512: GO 22039
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
21514: LD_ADDR_VAR 0 12
21518: PUSH
21519: LD_VAR 0 2
21523: PPUSH
21524: LD_VAR 0 3
21528: PPUSH
21529: LD_VAR 0 4
21533: PPUSH
21534: LD_VAR 0 5
21538: PPUSH
21539: LD_VAR 0 1
21543: PPUSH
21544: CALL_OW 248
21548: PPUSH
21549: LD_INT 0
21551: PPUSH
21552: CALL 22044 0 6
21556: ST_TO_ADDR
// if not hexes then
21557: LD_VAR 0 12
21561: NOT
21562: IFFALSE 21566
// exit ;
21564: GO 22039
// hex := GetHexInfo ( x , y ) ;
21566: LD_ADDR_VAR 0 15
21570: PUSH
21571: LD_VAR 0 3
21575: PPUSH
21576: LD_VAR 0 4
21580: PPUSH
21581: CALL_OW 546
21585: ST_TO_ADDR
// if hex [ 1 ] then
21586: LD_VAR 0 15
21590: PUSH
21591: LD_INT 1
21593: ARRAY
21594: IFFALSE 21598
// exit ;
21596: GO 22039
// height := hex [ 2 ] ;
21598: LD_ADDR_VAR 0 13
21602: PUSH
21603: LD_VAR 0 15
21607: PUSH
21608: LD_INT 2
21610: ARRAY
21611: ST_TO_ADDR
// for i = 1 to hexes do
21612: LD_ADDR_VAR 0 7
21616: PUSH
21617: DOUBLE
21618: LD_INT 1
21620: DEC
21621: ST_TO_ADDR
21622: LD_VAR 0 12
21626: PUSH
21627: FOR_TO
21628: IFFALSE 21958
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
21630: LD_VAR 0 12
21634: PUSH
21635: LD_VAR 0 7
21639: ARRAY
21640: PUSH
21641: LD_INT 1
21643: ARRAY
21644: PPUSH
21645: LD_VAR 0 12
21649: PUSH
21650: LD_VAR 0 7
21654: ARRAY
21655: PUSH
21656: LD_INT 2
21658: ARRAY
21659: PPUSH
21660: CALL_OW 488
21664: NOT
21665: PUSH
21666: LD_VAR 0 12
21670: PUSH
21671: LD_VAR 0 7
21675: ARRAY
21676: PUSH
21677: LD_INT 1
21679: ARRAY
21680: PPUSH
21681: LD_VAR 0 12
21685: PUSH
21686: LD_VAR 0 7
21690: ARRAY
21691: PUSH
21692: LD_INT 2
21694: ARRAY
21695: PPUSH
21696: CALL_OW 428
21700: PUSH
21701: LD_INT 0
21703: GREATER
21704: OR
21705: PUSH
21706: LD_VAR 0 12
21710: PUSH
21711: LD_VAR 0 7
21715: ARRAY
21716: PUSH
21717: LD_INT 1
21719: ARRAY
21720: PPUSH
21721: LD_VAR 0 12
21725: PUSH
21726: LD_VAR 0 7
21730: ARRAY
21731: PUSH
21732: LD_INT 2
21734: ARRAY
21735: PPUSH
21736: CALL_OW 351
21740: OR
21741: IFFALSE 21747
// exit ;
21743: POP
21744: POP
21745: GO 22039
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
21747: LD_ADDR_VAR 0 8
21751: PUSH
21752: LD_VAR 0 12
21756: PUSH
21757: LD_VAR 0 7
21761: ARRAY
21762: PUSH
21763: LD_INT 1
21765: ARRAY
21766: PPUSH
21767: LD_VAR 0 12
21771: PUSH
21772: LD_VAR 0 7
21776: ARRAY
21777: PUSH
21778: LD_INT 2
21780: ARRAY
21781: PPUSH
21782: CALL_OW 546
21786: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
21787: LD_VAR 0 8
21791: PUSH
21792: LD_INT 1
21794: ARRAY
21795: PUSH
21796: LD_VAR 0 8
21800: PUSH
21801: LD_INT 2
21803: ARRAY
21804: PUSH
21805: LD_VAR 0 13
21809: PUSH
21810: LD_INT 2
21812: PLUS
21813: GREATER
21814: OR
21815: PUSH
21816: LD_VAR 0 8
21820: PUSH
21821: LD_INT 2
21823: ARRAY
21824: PUSH
21825: LD_VAR 0 13
21829: PUSH
21830: LD_INT 2
21832: MINUS
21833: LESS
21834: OR
21835: PUSH
21836: LD_VAR 0 8
21840: PUSH
21841: LD_INT 3
21843: ARRAY
21844: PUSH
21845: LD_INT 0
21847: PUSH
21848: LD_INT 8
21850: PUSH
21851: LD_INT 9
21853: PUSH
21854: LD_INT 10
21856: PUSH
21857: LD_INT 11
21859: PUSH
21860: LD_INT 12
21862: PUSH
21863: LD_INT 13
21865: PUSH
21866: LD_INT 16
21868: PUSH
21869: LD_INT 17
21871: PUSH
21872: LD_INT 18
21874: PUSH
21875: LD_INT 19
21877: PUSH
21878: LD_INT 20
21880: PUSH
21881: LD_INT 21
21883: PUSH
21884: EMPTY
21885: LIST
21886: LIST
21887: LIST
21888: LIST
21889: LIST
21890: LIST
21891: LIST
21892: LIST
21893: LIST
21894: LIST
21895: LIST
21896: LIST
21897: LIST
21898: IN
21899: NOT
21900: OR
21901: PUSH
21902: LD_VAR 0 8
21906: PUSH
21907: LD_INT 5
21909: ARRAY
21910: NOT
21911: OR
21912: PUSH
21913: LD_VAR 0 8
21917: PUSH
21918: LD_INT 6
21920: ARRAY
21921: PUSH
21922: LD_INT 1
21924: PUSH
21925: LD_INT 2
21927: PUSH
21928: LD_INT 7
21930: PUSH
21931: LD_INT 9
21933: PUSH
21934: LD_INT 10
21936: PUSH
21937: LD_INT 11
21939: PUSH
21940: EMPTY
21941: LIST
21942: LIST
21943: LIST
21944: LIST
21945: LIST
21946: LIST
21947: IN
21948: NOT
21949: OR
21950: IFFALSE 21956
// exit ;
21952: POP
21953: POP
21954: GO 22039
// end ;
21956: GO 21627
21958: POP
21959: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
21960: LD_VAR 0 9
21964: PPUSH
21965: LD_VAR 0 3
21969: PPUSH
21970: LD_VAR 0 4
21974: PPUSH
21975: LD_INT 20
21977: PPUSH
21978: CALL 13991 0 4
21982: PUSH
21983: LD_INT 4
21985: ARRAY
21986: IFFALSE 21990
// exit ;
21988: GO 22039
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
21990: LD_VAR 0 2
21994: PUSH
21995: LD_INT 29
21997: PUSH
21998: LD_INT 30
22000: PUSH
22001: EMPTY
22002: LIST
22003: LIST
22004: IN
22005: PUSH
22006: LD_VAR 0 3
22010: PPUSH
22011: LD_VAR 0 4
22015: PPUSH
22016: LD_VAR 0 9
22020: PPUSH
22021: CALL_OW 440
22025: NOT
22026: AND
22027: IFFALSE 22031
// exit ;
22029: GO 22039
// result := true ;
22031: LD_ADDR_VAR 0 6
22035: PUSH
22036: LD_INT 1
22038: ST_TO_ADDR
// end ;
22039: LD_VAR 0 6
22043: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
22044: LD_INT 0
22046: PPUSH
22047: PPUSH
22048: PPUSH
22049: PPUSH
22050: PPUSH
22051: PPUSH
22052: PPUSH
22053: PPUSH
22054: PPUSH
22055: PPUSH
22056: PPUSH
22057: PPUSH
22058: PPUSH
22059: PPUSH
22060: PPUSH
22061: PPUSH
22062: PPUSH
22063: PPUSH
22064: PPUSH
22065: PPUSH
22066: PPUSH
22067: PPUSH
22068: PPUSH
22069: PPUSH
22070: PPUSH
22071: PPUSH
22072: PPUSH
22073: PPUSH
22074: PPUSH
22075: PPUSH
22076: PPUSH
22077: PPUSH
22078: PPUSH
22079: PPUSH
22080: PPUSH
22081: PPUSH
22082: PPUSH
22083: PPUSH
22084: PPUSH
22085: PPUSH
22086: PPUSH
22087: PPUSH
22088: PPUSH
22089: PPUSH
22090: PPUSH
22091: PPUSH
22092: PPUSH
22093: PPUSH
22094: PPUSH
22095: PPUSH
22096: PPUSH
22097: PPUSH
22098: PPUSH
22099: PPUSH
22100: PPUSH
22101: PPUSH
22102: PPUSH
22103: PPUSH
// result = [ ] ;
22104: LD_ADDR_VAR 0 7
22108: PUSH
22109: EMPTY
22110: ST_TO_ADDR
// temp_list = [ ] ;
22111: LD_ADDR_VAR 0 9
22115: PUSH
22116: EMPTY
22117: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
22118: LD_VAR 0 4
22122: PUSH
22123: LD_INT 0
22125: PUSH
22126: LD_INT 1
22128: PUSH
22129: LD_INT 2
22131: PUSH
22132: LD_INT 3
22134: PUSH
22135: LD_INT 4
22137: PUSH
22138: LD_INT 5
22140: PUSH
22141: EMPTY
22142: LIST
22143: LIST
22144: LIST
22145: LIST
22146: LIST
22147: LIST
22148: IN
22149: NOT
22150: PUSH
22151: LD_VAR 0 1
22155: PUSH
22156: LD_INT 0
22158: PUSH
22159: LD_INT 1
22161: PUSH
22162: EMPTY
22163: LIST
22164: LIST
22165: IN
22166: PUSH
22167: LD_VAR 0 5
22171: PUSH
22172: LD_INT 1
22174: PUSH
22175: LD_INT 2
22177: PUSH
22178: LD_INT 3
22180: PUSH
22181: EMPTY
22182: LIST
22183: LIST
22184: LIST
22185: IN
22186: NOT
22187: AND
22188: OR
22189: IFFALSE 22193
// exit ;
22191: GO 40584
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
22193: LD_VAR 0 1
22197: PUSH
22198: LD_INT 6
22200: PUSH
22201: LD_INT 7
22203: PUSH
22204: LD_INT 8
22206: PUSH
22207: LD_INT 13
22209: PUSH
22210: LD_INT 12
22212: PUSH
22213: LD_INT 15
22215: PUSH
22216: LD_INT 11
22218: PUSH
22219: LD_INT 14
22221: PUSH
22222: LD_INT 10
22224: PUSH
22225: EMPTY
22226: LIST
22227: LIST
22228: LIST
22229: LIST
22230: LIST
22231: LIST
22232: LIST
22233: LIST
22234: LIST
22235: IN
22236: IFFALSE 22246
// btype = b_lab ;
22238: LD_ADDR_VAR 0 1
22242: PUSH
22243: LD_INT 6
22245: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
22246: LD_VAR 0 6
22250: PUSH
22251: LD_INT 0
22253: PUSH
22254: LD_INT 1
22256: PUSH
22257: LD_INT 2
22259: PUSH
22260: EMPTY
22261: LIST
22262: LIST
22263: LIST
22264: IN
22265: NOT
22266: PUSH
22267: LD_VAR 0 1
22271: PUSH
22272: LD_INT 0
22274: PUSH
22275: LD_INT 1
22277: PUSH
22278: LD_INT 2
22280: PUSH
22281: LD_INT 3
22283: PUSH
22284: LD_INT 6
22286: PUSH
22287: LD_INT 36
22289: PUSH
22290: LD_INT 4
22292: PUSH
22293: LD_INT 5
22295: PUSH
22296: LD_INT 31
22298: PUSH
22299: LD_INT 32
22301: PUSH
22302: LD_INT 33
22304: PUSH
22305: EMPTY
22306: LIST
22307: LIST
22308: LIST
22309: LIST
22310: LIST
22311: LIST
22312: LIST
22313: LIST
22314: LIST
22315: LIST
22316: LIST
22317: IN
22318: NOT
22319: PUSH
22320: LD_VAR 0 6
22324: PUSH
22325: LD_INT 1
22327: EQUAL
22328: AND
22329: OR
22330: PUSH
22331: LD_VAR 0 1
22335: PUSH
22336: LD_INT 2
22338: PUSH
22339: LD_INT 3
22341: PUSH
22342: EMPTY
22343: LIST
22344: LIST
22345: IN
22346: NOT
22347: PUSH
22348: LD_VAR 0 6
22352: PUSH
22353: LD_INT 2
22355: EQUAL
22356: AND
22357: OR
22358: IFFALSE 22368
// mode = 0 ;
22360: LD_ADDR_VAR 0 6
22364: PUSH
22365: LD_INT 0
22367: ST_TO_ADDR
// case mode of 0 :
22368: LD_VAR 0 6
22372: PUSH
22373: LD_INT 0
22375: DOUBLE
22376: EQUAL
22377: IFTRUE 22381
22379: GO 33834
22381: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
22382: LD_ADDR_VAR 0 11
22386: PUSH
22387: LD_INT 0
22389: PUSH
22390: LD_INT 0
22392: PUSH
22393: EMPTY
22394: LIST
22395: LIST
22396: PUSH
22397: LD_INT 0
22399: PUSH
22400: LD_INT 1
22402: NEG
22403: PUSH
22404: EMPTY
22405: LIST
22406: LIST
22407: PUSH
22408: LD_INT 1
22410: PUSH
22411: LD_INT 0
22413: PUSH
22414: EMPTY
22415: LIST
22416: LIST
22417: PUSH
22418: LD_INT 1
22420: PUSH
22421: LD_INT 1
22423: PUSH
22424: EMPTY
22425: LIST
22426: LIST
22427: PUSH
22428: LD_INT 0
22430: PUSH
22431: LD_INT 1
22433: PUSH
22434: EMPTY
22435: LIST
22436: LIST
22437: PUSH
22438: LD_INT 1
22440: NEG
22441: PUSH
22442: LD_INT 0
22444: PUSH
22445: EMPTY
22446: LIST
22447: LIST
22448: PUSH
22449: LD_INT 1
22451: NEG
22452: PUSH
22453: LD_INT 1
22455: NEG
22456: PUSH
22457: EMPTY
22458: LIST
22459: LIST
22460: PUSH
22461: LD_INT 1
22463: NEG
22464: PUSH
22465: LD_INT 2
22467: NEG
22468: PUSH
22469: EMPTY
22470: LIST
22471: LIST
22472: PUSH
22473: LD_INT 0
22475: PUSH
22476: LD_INT 2
22478: NEG
22479: PUSH
22480: EMPTY
22481: LIST
22482: LIST
22483: PUSH
22484: LD_INT 1
22486: PUSH
22487: LD_INT 1
22489: NEG
22490: PUSH
22491: EMPTY
22492: LIST
22493: LIST
22494: PUSH
22495: LD_INT 1
22497: PUSH
22498: LD_INT 2
22500: PUSH
22501: EMPTY
22502: LIST
22503: LIST
22504: PUSH
22505: LD_INT 0
22507: PUSH
22508: LD_INT 2
22510: PUSH
22511: EMPTY
22512: LIST
22513: LIST
22514: PUSH
22515: LD_INT 1
22517: NEG
22518: PUSH
22519: LD_INT 1
22521: PUSH
22522: EMPTY
22523: LIST
22524: LIST
22525: PUSH
22526: LD_INT 1
22528: PUSH
22529: LD_INT 3
22531: PUSH
22532: EMPTY
22533: LIST
22534: LIST
22535: PUSH
22536: LD_INT 0
22538: PUSH
22539: LD_INT 3
22541: PUSH
22542: EMPTY
22543: LIST
22544: LIST
22545: PUSH
22546: LD_INT 1
22548: NEG
22549: PUSH
22550: LD_INT 2
22552: PUSH
22553: EMPTY
22554: LIST
22555: LIST
22556: PUSH
22557: EMPTY
22558: LIST
22559: LIST
22560: LIST
22561: LIST
22562: LIST
22563: LIST
22564: LIST
22565: LIST
22566: LIST
22567: LIST
22568: LIST
22569: LIST
22570: LIST
22571: LIST
22572: LIST
22573: LIST
22574: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
22575: LD_ADDR_VAR 0 12
22579: PUSH
22580: LD_INT 0
22582: PUSH
22583: LD_INT 0
22585: PUSH
22586: EMPTY
22587: LIST
22588: LIST
22589: PUSH
22590: LD_INT 0
22592: PUSH
22593: LD_INT 1
22595: NEG
22596: PUSH
22597: EMPTY
22598: LIST
22599: LIST
22600: PUSH
22601: LD_INT 1
22603: PUSH
22604: LD_INT 0
22606: PUSH
22607: EMPTY
22608: LIST
22609: LIST
22610: PUSH
22611: LD_INT 1
22613: PUSH
22614: LD_INT 1
22616: PUSH
22617: EMPTY
22618: LIST
22619: LIST
22620: PUSH
22621: LD_INT 0
22623: PUSH
22624: LD_INT 1
22626: PUSH
22627: EMPTY
22628: LIST
22629: LIST
22630: PUSH
22631: LD_INT 1
22633: NEG
22634: PUSH
22635: LD_INT 0
22637: PUSH
22638: EMPTY
22639: LIST
22640: LIST
22641: PUSH
22642: LD_INT 1
22644: NEG
22645: PUSH
22646: LD_INT 1
22648: NEG
22649: PUSH
22650: EMPTY
22651: LIST
22652: LIST
22653: PUSH
22654: LD_INT 1
22656: PUSH
22657: LD_INT 1
22659: NEG
22660: PUSH
22661: EMPTY
22662: LIST
22663: LIST
22664: PUSH
22665: LD_INT 2
22667: PUSH
22668: LD_INT 0
22670: PUSH
22671: EMPTY
22672: LIST
22673: LIST
22674: PUSH
22675: LD_INT 2
22677: PUSH
22678: LD_INT 1
22680: PUSH
22681: EMPTY
22682: LIST
22683: LIST
22684: PUSH
22685: LD_INT 1
22687: NEG
22688: PUSH
22689: LD_INT 1
22691: PUSH
22692: EMPTY
22693: LIST
22694: LIST
22695: PUSH
22696: LD_INT 2
22698: NEG
22699: PUSH
22700: LD_INT 0
22702: PUSH
22703: EMPTY
22704: LIST
22705: LIST
22706: PUSH
22707: LD_INT 2
22709: NEG
22710: PUSH
22711: LD_INT 1
22713: NEG
22714: PUSH
22715: EMPTY
22716: LIST
22717: LIST
22718: PUSH
22719: LD_INT 2
22721: NEG
22722: PUSH
22723: LD_INT 1
22725: PUSH
22726: EMPTY
22727: LIST
22728: LIST
22729: PUSH
22730: LD_INT 3
22732: NEG
22733: PUSH
22734: LD_INT 0
22736: PUSH
22737: EMPTY
22738: LIST
22739: LIST
22740: PUSH
22741: LD_INT 3
22743: NEG
22744: PUSH
22745: LD_INT 1
22747: NEG
22748: PUSH
22749: EMPTY
22750: LIST
22751: LIST
22752: PUSH
22753: EMPTY
22754: LIST
22755: LIST
22756: LIST
22757: LIST
22758: LIST
22759: LIST
22760: LIST
22761: LIST
22762: LIST
22763: LIST
22764: LIST
22765: LIST
22766: LIST
22767: LIST
22768: LIST
22769: LIST
22770: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
22771: LD_ADDR_VAR 0 13
22775: PUSH
22776: LD_INT 0
22778: PUSH
22779: LD_INT 0
22781: PUSH
22782: EMPTY
22783: LIST
22784: LIST
22785: PUSH
22786: LD_INT 0
22788: PUSH
22789: LD_INT 1
22791: NEG
22792: PUSH
22793: EMPTY
22794: LIST
22795: LIST
22796: PUSH
22797: LD_INT 1
22799: PUSH
22800: LD_INT 0
22802: PUSH
22803: EMPTY
22804: LIST
22805: LIST
22806: PUSH
22807: LD_INT 1
22809: PUSH
22810: LD_INT 1
22812: PUSH
22813: EMPTY
22814: LIST
22815: LIST
22816: PUSH
22817: LD_INT 0
22819: PUSH
22820: LD_INT 1
22822: PUSH
22823: EMPTY
22824: LIST
22825: LIST
22826: PUSH
22827: LD_INT 1
22829: NEG
22830: PUSH
22831: LD_INT 0
22833: PUSH
22834: EMPTY
22835: LIST
22836: LIST
22837: PUSH
22838: LD_INT 1
22840: NEG
22841: PUSH
22842: LD_INT 1
22844: NEG
22845: PUSH
22846: EMPTY
22847: LIST
22848: LIST
22849: PUSH
22850: LD_INT 1
22852: NEG
22853: PUSH
22854: LD_INT 2
22856: NEG
22857: PUSH
22858: EMPTY
22859: LIST
22860: LIST
22861: PUSH
22862: LD_INT 2
22864: PUSH
22865: LD_INT 1
22867: PUSH
22868: EMPTY
22869: LIST
22870: LIST
22871: PUSH
22872: LD_INT 2
22874: PUSH
22875: LD_INT 2
22877: PUSH
22878: EMPTY
22879: LIST
22880: LIST
22881: PUSH
22882: LD_INT 1
22884: PUSH
22885: LD_INT 2
22887: PUSH
22888: EMPTY
22889: LIST
22890: LIST
22891: PUSH
22892: LD_INT 2
22894: NEG
22895: PUSH
22896: LD_INT 1
22898: NEG
22899: PUSH
22900: EMPTY
22901: LIST
22902: LIST
22903: PUSH
22904: LD_INT 2
22906: NEG
22907: PUSH
22908: LD_INT 2
22910: NEG
22911: PUSH
22912: EMPTY
22913: LIST
22914: LIST
22915: PUSH
22916: LD_INT 2
22918: NEG
22919: PUSH
22920: LD_INT 3
22922: NEG
22923: PUSH
22924: EMPTY
22925: LIST
22926: LIST
22927: PUSH
22928: LD_INT 3
22930: NEG
22931: PUSH
22932: LD_INT 2
22934: NEG
22935: PUSH
22936: EMPTY
22937: LIST
22938: LIST
22939: PUSH
22940: LD_INT 3
22942: NEG
22943: PUSH
22944: LD_INT 3
22946: NEG
22947: PUSH
22948: EMPTY
22949: LIST
22950: LIST
22951: PUSH
22952: EMPTY
22953: LIST
22954: LIST
22955: LIST
22956: LIST
22957: LIST
22958: LIST
22959: LIST
22960: LIST
22961: LIST
22962: LIST
22963: LIST
22964: LIST
22965: LIST
22966: LIST
22967: LIST
22968: LIST
22969: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
22970: LD_ADDR_VAR 0 14
22974: PUSH
22975: LD_INT 0
22977: PUSH
22978: LD_INT 0
22980: PUSH
22981: EMPTY
22982: LIST
22983: LIST
22984: PUSH
22985: LD_INT 0
22987: PUSH
22988: LD_INT 1
22990: NEG
22991: PUSH
22992: EMPTY
22993: LIST
22994: LIST
22995: PUSH
22996: LD_INT 1
22998: PUSH
22999: LD_INT 0
23001: PUSH
23002: EMPTY
23003: LIST
23004: LIST
23005: PUSH
23006: LD_INT 1
23008: PUSH
23009: LD_INT 1
23011: PUSH
23012: EMPTY
23013: LIST
23014: LIST
23015: PUSH
23016: LD_INT 0
23018: PUSH
23019: LD_INT 1
23021: PUSH
23022: EMPTY
23023: LIST
23024: LIST
23025: PUSH
23026: LD_INT 1
23028: NEG
23029: PUSH
23030: LD_INT 0
23032: PUSH
23033: EMPTY
23034: LIST
23035: LIST
23036: PUSH
23037: LD_INT 1
23039: NEG
23040: PUSH
23041: LD_INT 1
23043: NEG
23044: PUSH
23045: EMPTY
23046: LIST
23047: LIST
23048: PUSH
23049: LD_INT 1
23051: NEG
23052: PUSH
23053: LD_INT 2
23055: NEG
23056: PUSH
23057: EMPTY
23058: LIST
23059: LIST
23060: PUSH
23061: LD_INT 0
23063: PUSH
23064: LD_INT 2
23066: NEG
23067: PUSH
23068: EMPTY
23069: LIST
23070: LIST
23071: PUSH
23072: LD_INT 1
23074: PUSH
23075: LD_INT 1
23077: NEG
23078: PUSH
23079: EMPTY
23080: LIST
23081: LIST
23082: PUSH
23083: LD_INT 1
23085: PUSH
23086: LD_INT 2
23088: PUSH
23089: EMPTY
23090: LIST
23091: LIST
23092: PUSH
23093: LD_INT 0
23095: PUSH
23096: LD_INT 2
23098: PUSH
23099: EMPTY
23100: LIST
23101: LIST
23102: PUSH
23103: LD_INT 1
23105: NEG
23106: PUSH
23107: LD_INT 1
23109: PUSH
23110: EMPTY
23111: LIST
23112: LIST
23113: PUSH
23114: LD_INT 1
23116: NEG
23117: PUSH
23118: LD_INT 3
23120: NEG
23121: PUSH
23122: EMPTY
23123: LIST
23124: LIST
23125: PUSH
23126: LD_INT 0
23128: PUSH
23129: LD_INT 3
23131: NEG
23132: PUSH
23133: EMPTY
23134: LIST
23135: LIST
23136: PUSH
23137: LD_INT 1
23139: PUSH
23140: LD_INT 2
23142: NEG
23143: PUSH
23144: EMPTY
23145: LIST
23146: LIST
23147: PUSH
23148: EMPTY
23149: LIST
23150: LIST
23151: LIST
23152: LIST
23153: LIST
23154: LIST
23155: LIST
23156: LIST
23157: LIST
23158: LIST
23159: LIST
23160: LIST
23161: LIST
23162: LIST
23163: LIST
23164: LIST
23165: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
23166: LD_ADDR_VAR 0 15
23170: PUSH
23171: LD_INT 0
23173: PUSH
23174: LD_INT 0
23176: PUSH
23177: EMPTY
23178: LIST
23179: LIST
23180: PUSH
23181: LD_INT 0
23183: PUSH
23184: LD_INT 1
23186: NEG
23187: PUSH
23188: EMPTY
23189: LIST
23190: LIST
23191: PUSH
23192: LD_INT 1
23194: PUSH
23195: LD_INT 0
23197: PUSH
23198: EMPTY
23199: LIST
23200: LIST
23201: PUSH
23202: LD_INT 1
23204: PUSH
23205: LD_INT 1
23207: PUSH
23208: EMPTY
23209: LIST
23210: LIST
23211: PUSH
23212: LD_INT 0
23214: PUSH
23215: LD_INT 1
23217: PUSH
23218: EMPTY
23219: LIST
23220: LIST
23221: PUSH
23222: LD_INT 1
23224: NEG
23225: PUSH
23226: LD_INT 0
23228: PUSH
23229: EMPTY
23230: LIST
23231: LIST
23232: PUSH
23233: LD_INT 1
23235: NEG
23236: PUSH
23237: LD_INT 1
23239: NEG
23240: PUSH
23241: EMPTY
23242: LIST
23243: LIST
23244: PUSH
23245: LD_INT 1
23247: PUSH
23248: LD_INT 1
23250: NEG
23251: PUSH
23252: EMPTY
23253: LIST
23254: LIST
23255: PUSH
23256: LD_INT 2
23258: PUSH
23259: LD_INT 0
23261: PUSH
23262: EMPTY
23263: LIST
23264: LIST
23265: PUSH
23266: LD_INT 2
23268: PUSH
23269: LD_INT 1
23271: PUSH
23272: EMPTY
23273: LIST
23274: LIST
23275: PUSH
23276: LD_INT 1
23278: NEG
23279: PUSH
23280: LD_INT 1
23282: PUSH
23283: EMPTY
23284: LIST
23285: LIST
23286: PUSH
23287: LD_INT 2
23289: NEG
23290: PUSH
23291: LD_INT 0
23293: PUSH
23294: EMPTY
23295: LIST
23296: LIST
23297: PUSH
23298: LD_INT 2
23300: NEG
23301: PUSH
23302: LD_INT 1
23304: NEG
23305: PUSH
23306: EMPTY
23307: LIST
23308: LIST
23309: PUSH
23310: LD_INT 2
23312: PUSH
23313: LD_INT 1
23315: NEG
23316: PUSH
23317: EMPTY
23318: LIST
23319: LIST
23320: PUSH
23321: LD_INT 3
23323: PUSH
23324: LD_INT 0
23326: PUSH
23327: EMPTY
23328: LIST
23329: LIST
23330: PUSH
23331: LD_INT 3
23333: PUSH
23334: LD_INT 1
23336: PUSH
23337: EMPTY
23338: LIST
23339: LIST
23340: PUSH
23341: EMPTY
23342: LIST
23343: LIST
23344: LIST
23345: LIST
23346: LIST
23347: LIST
23348: LIST
23349: LIST
23350: LIST
23351: LIST
23352: LIST
23353: LIST
23354: LIST
23355: LIST
23356: LIST
23357: LIST
23358: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
23359: LD_ADDR_VAR 0 16
23363: PUSH
23364: LD_INT 0
23366: PUSH
23367: LD_INT 0
23369: PUSH
23370: EMPTY
23371: LIST
23372: LIST
23373: PUSH
23374: LD_INT 0
23376: PUSH
23377: LD_INT 1
23379: NEG
23380: PUSH
23381: EMPTY
23382: LIST
23383: LIST
23384: PUSH
23385: LD_INT 1
23387: PUSH
23388: LD_INT 0
23390: PUSH
23391: EMPTY
23392: LIST
23393: LIST
23394: PUSH
23395: LD_INT 1
23397: PUSH
23398: LD_INT 1
23400: PUSH
23401: EMPTY
23402: LIST
23403: LIST
23404: PUSH
23405: LD_INT 0
23407: PUSH
23408: LD_INT 1
23410: PUSH
23411: EMPTY
23412: LIST
23413: LIST
23414: PUSH
23415: LD_INT 1
23417: NEG
23418: PUSH
23419: LD_INT 0
23421: PUSH
23422: EMPTY
23423: LIST
23424: LIST
23425: PUSH
23426: LD_INT 1
23428: NEG
23429: PUSH
23430: LD_INT 1
23432: NEG
23433: PUSH
23434: EMPTY
23435: LIST
23436: LIST
23437: PUSH
23438: LD_INT 1
23440: NEG
23441: PUSH
23442: LD_INT 2
23444: NEG
23445: PUSH
23446: EMPTY
23447: LIST
23448: LIST
23449: PUSH
23450: LD_INT 2
23452: PUSH
23453: LD_INT 1
23455: PUSH
23456: EMPTY
23457: LIST
23458: LIST
23459: PUSH
23460: LD_INT 2
23462: PUSH
23463: LD_INT 2
23465: PUSH
23466: EMPTY
23467: LIST
23468: LIST
23469: PUSH
23470: LD_INT 1
23472: PUSH
23473: LD_INT 2
23475: PUSH
23476: EMPTY
23477: LIST
23478: LIST
23479: PUSH
23480: LD_INT 2
23482: NEG
23483: PUSH
23484: LD_INT 1
23486: NEG
23487: PUSH
23488: EMPTY
23489: LIST
23490: LIST
23491: PUSH
23492: LD_INT 2
23494: NEG
23495: PUSH
23496: LD_INT 2
23498: NEG
23499: PUSH
23500: EMPTY
23501: LIST
23502: LIST
23503: PUSH
23504: LD_INT 3
23506: PUSH
23507: LD_INT 2
23509: PUSH
23510: EMPTY
23511: LIST
23512: LIST
23513: PUSH
23514: LD_INT 3
23516: PUSH
23517: LD_INT 3
23519: PUSH
23520: EMPTY
23521: LIST
23522: LIST
23523: PUSH
23524: LD_INT 2
23526: PUSH
23527: LD_INT 3
23529: PUSH
23530: EMPTY
23531: LIST
23532: LIST
23533: PUSH
23534: EMPTY
23535: LIST
23536: LIST
23537: LIST
23538: LIST
23539: LIST
23540: LIST
23541: LIST
23542: LIST
23543: LIST
23544: LIST
23545: LIST
23546: LIST
23547: LIST
23548: LIST
23549: LIST
23550: LIST
23551: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
23552: LD_ADDR_VAR 0 17
23556: PUSH
23557: LD_INT 0
23559: PUSH
23560: LD_INT 0
23562: PUSH
23563: EMPTY
23564: LIST
23565: LIST
23566: PUSH
23567: LD_INT 0
23569: PUSH
23570: LD_INT 1
23572: NEG
23573: PUSH
23574: EMPTY
23575: LIST
23576: LIST
23577: PUSH
23578: LD_INT 1
23580: PUSH
23581: LD_INT 0
23583: PUSH
23584: EMPTY
23585: LIST
23586: LIST
23587: PUSH
23588: LD_INT 1
23590: PUSH
23591: LD_INT 1
23593: PUSH
23594: EMPTY
23595: LIST
23596: LIST
23597: PUSH
23598: LD_INT 0
23600: PUSH
23601: LD_INT 1
23603: PUSH
23604: EMPTY
23605: LIST
23606: LIST
23607: PUSH
23608: LD_INT 1
23610: NEG
23611: PUSH
23612: LD_INT 0
23614: PUSH
23615: EMPTY
23616: LIST
23617: LIST
23618: PUSH
23619: LD_INT 1
23621: NEG
23622: PUSH
23623: LD_INT 1
23625: NEG
23626: PUSH
23627: EMPTY
23628: LIST
23629: LIST
23630: PUSH
23631: LD_INT 1
23633: NEG
23634: PUSH
23635: LD_INT 2
23637: NEG
23638: PUSH
23639: EMPTY
23640: LIST
23641: LIST
23642: PUSH
23643: LD_INT 0
23645: PUSH
23646: LD_INT 2
23648: NEG
23649: PUSH
23650: EMPTY
23651: LIST
23652: LIST
23653: PUSH
23654: LD_INT 1
23656: PUSH
23657: LD_INT 1
23659: NEG
23660: PUSH
23661: EMPTY
23662: LIST
23663: LIST
23664: PUSH
23665: LD_INT 2
23667: PUSH
23668: LD_INT 0
23670: PUSH
23671: EMPTY
23672: LIST
23673: LIST
23674: PUSH
23675: LD_INT 2
23677: PUSH
23678: LD_INT 1
23680: PUSH
23681: EMPTY
23682: LIST
23683: LIST
23684: PUSH
23685: LD_INT 2
23687: PUSH
23688: LD_INT 2
23690: PUSH
23691: EMPTY
23692: LIST
23693: LIST
23694: PUSH
23695: LD_INT 1
23697: PUSH
23698: LD_INT 2
23700: PUSH
23701: EMPTY
23702: LIST
23703: LIST
23704: PUSH
23705: LD_INT 0
23707: PUSH
23708: LD_INT 2
23710: PUSH
23711: EMPTY
23712: LIST
23713: LIST
23714: PUSH
23715: LD_INT 1
23717: NEG
23718: PUSH
23719: LD_INT 1
23721: PUSH
23722: EMPTY
23723: LIST
23724: LIST
23725: PUSH
23726: LD_INT 2
23728: NEG
23729: PUSH
23730: LD_INT 0
23732: PUSH
23733: EMPTY
23734: LIST
23735: LIST
23736: PUSH
23737: LD_INT 2
23739: NEG
23740: PUSH
23741: LD_INT 1
23743: NEG
23744: PUSH
23745: EMPTY
23746: LIST
23747: LIST
23748: PUSH
23749: LD_INT 2
23751: NEG
23752: PUSH
23753: LD_INT 2
23755: NEG
23756: PUSH
23757: EMPTY
23758: LIST
23759: LIST
23760: PUSH
23761: EMPTY
23762: LIST
23763: LIST
23764: LIST
23765: LIST
23766: LIST
23767: LIST
23768: LIST
23769: LIST
23770: LIST
23771: LIST
23772: LIST
23773: LIST
23774: LIST
23775: LIST
23776: LIST
23777: LIST
23778: LIST
23779: LIST
23780: LIST
23781: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
23782: LD_ADDR_VAR 0 18
23786: PUSH
23787: LD_INT 0
23789: PUSH
23790: LD_INT 0
23792: PUSH
23793: EMPTY
23794: LIST
23795: LIST
23796: PUSH
23797: LD_INT 0
23799: PUSH
23800: LD_INT 1
23802: NEG
23803: PUSH
23804: EMPTY
23805: LIST
23806: LIST
23807: PUSH
23808: LD_INT 1
23810: PUSH
23811: LD_INT 0
23813: PUSH
23814: EMPTY
23815: LIST
23816: LIST
23817: PUSH
23818: LD_INT 1
23820: PUSH
23821: LD_INT 1
23823: PUSH
23824: EMPTY
23825: LIST
23826: LIST
23827: PUSH
23828: LD_INT 0
23830: PUSH
23831: LD_INT 1
23833: PUSH
23834: EMPTY
23835: LIST
23836: LIST
23837: PUSH
23838: LD_INT 1
23840: NEG
23841: PUSH
23842: LD_INT 0
23844: PUSH
23845: EMPTY
23846: LIST
23847: LIST
23848: PUSH
23849: LD_INT 1
23851: NEG
23852: PUSH
23853: LD_INT 1
23855: NEG
23856: PUSH
23857: EMPTY
23858: LIST
23859: LIST
23860: PUSH
23861: LD_INT 1
23863: NEG
23864: PUSH
23865: LD_INT 2
23867: NEG
23868: PUSH
23869: EMPTY
23870: LIST
23871: LIST
23872: PUSH
23873: LD_INT 0
23875: PUSH
23876: LD_INT 2
23878: NEG
23879: PUSH
23880: EMPTY
23881: LIST
23882: LIST
23883: PUSH
23884: LD_INT 1
23886: PUSH
23887: LD_INT 1
23889: NEG
23890: PUSH
23891: EMPTY
23892: LIST
23893: LIST
23894: PUSH
23895: LD_INT 2
23897: PUSH
23898: LD_INT 0
23900: PUSH
23901: EMPTY
23902: LIST
23903: LIST
23904: PUSH
23905: LD_INT 2
23907: PUSH
23908: LD_INT 1
23910: PUSH
23911: EMPTY
23912: LIST
23913: LIST
23914: PUSH
23915: LD_INT 2
23917: PUSH
23918: LD_INT 2
23920: PUSH
23921: EMPTY
23922: LIST
23923: LIST
23924: PUSH
23925: LD_INT 1
23927: PUSH
23928: LD_INT 2
23930: PUSH
23931: EMPTY
23932: LIST
23933: LIST
23934: PUSH
23935: LD_INT 0
23937: PUSH
23938: LD_INT 2
23940: PUSH
23941: EMPTY
23942: LIST
23943: LIST
23944: PUSH
23945: LD_INT 1
23947: NEG
23948: PUSH
23949: LD_INT 1
23951: PUSH
23952: EMPTY
23953: LIST
23954: LIST
23955: PUSH
23956: LD_INT 2
23958: NEG
23959: PUSH
23960: LD_INT 0
23962: PUSH
23963: EMPTY
23964: LIST
23965: LIST
23966: PUSH
23967: LD_INT 2
23969: NEG
23970: PUSH
23971: LD_INT 1
23973: NEG
23974: PUSH
23975: EMPTY
23976: LIST
23977: LIST
23978: PUSH
23979: LD_INT 2
23981: NEG
23982: PUSH
23983: LD_INT 2
23985: NEG
23986: PUSH
23987: EMPTY
23988: LIST
23989: LIST
23990: PUSH
23991: EMPTY
23992: LIST
23993: LIST
23994: LIST
23995: LIST
23996: LIST
23997: LIST
23998: LIST
23999: LIST
24000: LIST
24001: LIST
24002: LIST
24003: LIST
24004: LIST
24005: LIST
24006: LIST
24007: LIST
24008: LIST
24009: LIST
24010: LIST
24011: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24012: LD_ADDR_VAR 0 19
24016: PUSH
24017: LD_INT 0
24019: PUSH
24020: LD_INT 0
24022: PUSH
24023: EMPTY
24024: LIST
24025: LIST
24026: PUSH
24027: LD_INT 0
24029: PUSH
24030: LD_INT 1
24032: NEG
24033: PUSH
24034: EMPTY
24035: LIST
24036: LIST
24037: PUSH
24038: LD_INT 1
24040: PUSH
24041: LD_INT 0
24043: PUSH
24044: EMPTY
24045: LIST
24046: LIST
24047: PUSH
24048: LD_INT 1
24050: PUSH
24051: LD_INT 1
24053: PUSH
24054: EMPTY
24055: LIST
24056: LIST
24057: PUSH
24058: LD_INT 0
24060: PUSH
24061: LD_INT 1
24063: PUSH
24064: EMPTY
24065: LIST
24066: LIST
24067: PUSH
24068: LD_INT 1
24070: NEG
24071: PUSH
24072: LD_INT 0
24074: PUSH
24075: EMPTY
24076: LIST
24077: LIST
24078: PUSH
24079: LD_INT 1
24081: NEG
24082: PUSH
24083: LD_INT 1
24085: NEG
24086: PUSH
24087: EMPTY
24088: LIST
24089: LIST
24090: PUSH
24091: LD_INT 1
24093: NEG
24094: PUSH
24095: LD_INT 2
24097: NEG
24098: PUSH
24099: EMPTY
24100: LIST
24101: LIST
24102: PUSH
24103: LD_INT 0
24105: PUSH
24106: LD_INT 2
24108: NEG
24109: PUSH
24110: EMPTY
24111: LIST
24112: LIST
24113: PUSH
24114: LD_INT 1
24116: PUSH
24117: LD_INT 1
24119: NEG
24120: PUSH
24121: EMPTY
24122: LIST
24123: LIST
24124: PUSH
24125: LD_INT 2
24127: PUSH
24128: LD_INT 0
24130: PUSH
24131: EMPTY
24132: LIST
24133: LIST
24134: PUSH
24135: LD_INT 2
24137: PUSH
24138: LD_INT 1
24140: PUSH
24141: EMPTY
24142: LIST
24143: LIST
24144: PUSH
24145: LD_INT 2
24147: PUSH
24148: LD_INT 2
24150: PUSH
24151: EMPTY
24152: LIST
24153: LIST
24154: PUSH
24155: LD_INT 1
24157: PUSH
24158: LD_INT 2
24160: PUSH
24161: EMPTY
24162: LIST
24163: LIST
24164: PUSH
24165: LD_INT 0
24167: PUSH
24168: LD_INT 2
24170: PUSH
24171: EMPTY
24172: LIST
24173: LIST
24174: PUSH
24175: LD_INT 1
24177: NEG
24178: PUSH
24179: LD_INT 1
24181: PUSH
24182: EMPTY
24183: LIST
24184: LIST
24185: PUSH
24186: LD_INT 2
24188: NEG
24189: PUSH
24190: LD_INT 0
24192: PUSH
24193: EMPTY
24194: LIST
24195: LIST
24196: PUSH
24197: LD_INT 2
24199: NEG
24200: PUSH
24201: LD_INT 1
24203: NEG
24204: PUSH
24205: EMPTY
24206: LIST
24207: LIST
24208: PUSH
24209: LD_INT 2
24211: NEG
24212: PUSH
24213: LD_INT 2
24215: NEG
24216: PUSH
24217: EMPTY
24218: LIST
24219: LIST
24220: PUSH
24221: EMPTY
24222: LIST
24223: LIST
24224: LIST
24225: LIST
24226: LIST
24227: LIST
24228: LIST
24229: LIST
24230: LIST
24231: LIST
24232: LIST
24233: LIST
24234: LIST
24235: LIST
24236: LIST
24237: LIST
24238: LIST
24239: LIST
24240: LIST
24241: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24242: LD_ADDR_VAR 0 20
24246: PUSH
24247: LD_INT 0
24249: PUSH
24250: LD_INT 0
24252: PUSH
24253: EMPTY
24254: LIST
24255: LIST
24256: PUSH
24257: LD_INT 0
24259: PUSH
24260: LD_INT 1
24262: NEG
24263: PUSH
24264: EMPTY
24265: LIST
24266: LIST
24267: PUSH
24268: LD_INT 1
24270: PUSH
24271: LD_INT 0
24273: PUSH
24274: EMPTY
24275: LIST
24276: LIST
24277: PUSH
24278: LD_INT 1
24280: PUSH
24281: LD_INT 1
24283: PUSH
24284: EMPTY
24285: LIST
24286: LIST
24287: PUSH
24288: LD_INT 0
24290: PUSH
24291: LD_INT 1
24293: PUSH
24294: EMPTY
24295: LIST
24296: LIST
24297: PUSH
24298: LD_INT 1
24300: NEG
24301: PUSH
24302: LD_INT 0
24304: PUSH
24305: EMPTY
24306: LIST
24307: LIST
24308: PUSH
24309: LD_INT 1
24311: NEG
24312: PUSH
24313: LD_INT 1
24315: NEG
24316: PUSH
24317: EMPTY
24318: LIST
24319: LIST
24320: PUSH
24321: LD_INT 1
24323: NEG
24324: PUSH
24325: LD_INT 2
24327: NEG
24328: PUSH
24329: EMPTY
24330: LIST
24331: LIST
24332: PUSH
24333: LD_INT 0
24335: PUSH
24336: LD_INT 2
24338: NEG
24339: PUSH
24340: EMPTY
24341: LIST
24342: LIST
24343: PUSH
24344: LD_INT 1
24346: PUSH
24347: LD_INT 1
24349: NEG
24350: PUSH
24351: EMPTY
24352: LIST
24353: LIST
24354: PUSH
24355: LD_INT 2
24357: PUSH
24358: LD_INT 0
24360: PUSH
24361: EMPTY
24362: LIST
24363: LIST
24364: PUSH
24365: LD_INT 2
24367: PUSH
24368: LD_INT 1
24370: PUSH
24371: EMPTY
24372: LIST
24373: LIST
24374: PUSH
24375: LD_INT 2
24377: PUSH
24378: LD_INT 2
24380: PUSH
24381: EMPTY
24382: LIST
24383: LIST
24384: PUSH
24385: LD_INT 1
24387: PUSH
24388: LD_INT 2
24390: PUSH
24391: EMPTY
24392: LIST
24393: LIST
24394: PUSH
24395: LD_INT 0
24397: PUSH
24398: LD_INT 2
24400: PUSH
24401: EMPTY
24402: LIST
24403: LIST
24404: PUSH
24405: LD_INT 1
24407: NEG
24408: PUSH
24409: LD_INT 1
24411: PUSH
24412: EMPTY
24413: LIST
24414: LIST
24415: PUSH
24416: LD_INT 2
24418: NEG
24419: PUSH
24420: LD_INT 0
24422: PUSH
24423: EMPTY
24424: LIST
24425: LIST
24426: PUSH
24427: LD_INT 2
24429: NEG
24430: PUSH
24431: LD_INT 1
24433: NEG
24434: PUSH
24435: EMPTY
24436: LIST
24437: LIST
24438: PUSH
24439: LD_INT 2
24441: NEG
24442: PUSH
24443: LD_INT 2
24445: NEG
24446: PUSH
24447: EMPTY
24448: LIST
24449: LIST
24450: PUSH
24451: EMPTY
24452: LIST
24453: LIST
24454: LIST
24455: LIST
24456: LIST
24457: LIST
24458: LIST
24459: LIST
24460: LIST
24461: LIST
24462: LIST
24463: LIST
24464: LIST
24465: LIST
24466: LIST
24467: LIST
24468: LIST
24469: LIST
24470: LIST
24471: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24472: LD_ADDR_VAR 0 21
24476: PUSH
24477: LD_INT 0
24479: PUSH
24480: LD_INT 0
24482: PUSH
24483: EMPTY
24484: LIST
24485: LIST
24486: PUSH
24487: LD_INT 0
24489: PUSH
24490: LD_INT 1
24492: NEG
24493: PUSH
24494: EMPTY
24495: LIST
24496: LIST
24497: PUSH
24498: LD_INT 1
24500: PUSH
24501: LD_INT 0
24503: PUSH
24504: EMPTY
24505: LIST
24506: LIST
24507: PUSH
24508: LD_INT 1
24510: PUSH
24511: LD_INT 1
24513: PUSH
24514: EMPTY
24515: LIST
24516: LIST
24517: PUSH
24518: LD_INT 0
24520: PUSH
24521: LD_INT 1
24523: PUSH
24524: EMPTY
24525: LIST
24526: LIST
24527: PUSH
24528: LD_INT 1
24530: NEG
24531: PUSH
24532: LD_INT 0
24534: PUSH
24535: EMPTY
24536: LIST
24537: LIST
24538: PUSH
24539: LD_INT 1
24541: NEG
24542: PUSH
24543: LD_INT 1
24545: NEG
24546: PUSH
24547: EMPTY
24548: LIST
24549: LIST
24550: PUSH
24551: LD_INT 1
24553: NEG
24554: PUSH
24555: LD_INT 2
24557: NEG
24558: PUSH
24559: EMPTY
24560: LIST
24561: LIST
24562: PUSH
24563: LD_INT 0
24565: PUSH
24566: LD_INT 2
24568: NEG
24569: PUSH
24570: EMPTY
24571: LIST
24572: LIST
24573: PUSH
24574: LD_INT 1
24576: PUSH
24577: LD_INT 1
24579: NEG
24580: PUSH
24581: EMPTY
24582: LIST
24583: LIST
24584: PUSH
24585: LD_INT 2
24587: PUSH
24588: LD_INT 0
24590: PUSH
24591: EMPTY
24592: LIST
24593: LIST
24594: PUSH
24595: LD_INT 2
24597: PUSH
24598: LD_INT 1
24600: PUSH
24601: EMPTY
24602: LIST
24603: LIST
24604: PUSH
24605: LD_INT 2
24607: PUSH
24608: LD_INT 2
24610: PUSH
24611: EMPTY
24612: LIST
24613: LIST
24614: PUSH
24615: LD_INT 1
24617: PUSH
24618: LD_INT 2
24620: PUSH
24621: EMPTY
24622: LIST
24623: LIST
24624: PUSH
24625: LD_INT 0
24627: PUSH
24628: LD_INT 2
24630: PUSH
24631: EMPTY
24632: LIST
24633: LIST
24634: PUSH
24635: LD_INT 1
24637: NEG
24638: PUSH
24639: LD_INT 1
24641: PUSH
24642: EMPTY
24643: LIST
24644: LIST
24645: PUSH
24646: LD_INT 2
24648: NEG
24649: PUSH
24650: LD_INT 0
24652: PUSH
24653: EMPTY
24654: LIST
24655: LIST
24656: PUSH
24657: LD_INT 2
24659: NEG
24660: PUSH
24661: LD_INT 1
24663: NEG
24664: PUSH
24665: EMPTY
24666: LIST
24667: LIST
24668: PUSH
24669: LD_INT 2
24671: NEG
24672: PUSH
24673: LD_INT 2
24675: NEG
24676: PUSH
24677: EMPTY
24678: LIST
24679: LIST
24680: PUSH
24681: EMPTY
24682: LIST
24683: LIST
24684: LIST
24685: LIST
24686: LIST
24687: LIST
24688: LIST
24689: LIST
24690: LIST
24691: LIST
24692: LIST
24693: LIST
24694: LIST
24695: LIST
24696: LIST
24697: LIST
24698: LIST
24699: LIST
24700: LIST
24701: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24702: LD_ADDR_VAR 0 22
24706: PUSH
24707: LD_INT 0
24709: PUSH
24710: LD_INT 0
24712: PUSH
24713: EMPTY
24714: LIST
24715: LIST
24716: PUSH
24717: LD_INT 0
24719: PUSH
24720: LD_INT 1
24722: NEG
24723: PUSH
24724: EMPTY
24725: LIST
24726: LIST
24727: PUSH
24728: LD_INT 1
24730: PUSH
24731: LD_INT 0
24733: PUSH
24734: EMPTY
24735: LIST
24736: LIST
24737: PUSH
24738: LD_INT 1
24740: PUSH
24741: LD_INT 1
24743: PUSH
24744: EMPTY
24745: LIST
24746: LIST
24747: PUSH
24748: LD_INT 0
24750: PUSH
24751: LD_INT 1
24753: PUSH
24754: EMPTY
24755: LIST
24756: LIST
24757: PUSH
24758: LD_INT 1
24760: NEG
24761: PUSH
24762: LD_INT 0
24764: PUSH
24765: EMPTY
24766: LIST
24767: LIST
24768: PUSH
24769: LD_INT 1
24771: NEG
24772: PUSH
24773: LD_INT 1
24775: NEG
24776: PUSH
24777: EMPTY
24778: LIST
24779: LIST
24780: PUSH
24781: LD_INT 1
24783: NEG
24784: PUSH
24785: LD_INT 2
24787: NEG
24788: PUSH
24789: EMPTY
24790: LIST
24791: LIST
24792: PUSH
24793: LD_INT 0
24795: PUSH
24796: LD_INT 2
24798: NEG
24799: PUSH
24800: EMPTY
24801: LIST
24802: LIST
24803: PUSH
24804: LD_INT 1
24806: PUSH
24807: LD_INT 1
24809: NEG
24810: PUSH
24811: EMPTY
24812: LIST
24813: LIST
24814: PUSH
24815: LD_INT 2
24817: PUSH
24818: LD_INT 0
24820: PUSH
24821: EMPTY
24822: LIST
24823: LIST
24824: PUSH
24825: LD_INT 2
24827: PUSH
24828: LD_INT 1
24830: PUSH
24831: EMPTY
24832: LIST
24833: LIST
24834: PUSH
24835: LD_INT 2
24837: PUSH
24838: LD_INT 2
24840: PUSH
24841: EMPTY
24842: LIST
24843: LIST
24844: PUSH
24845: LD_INT 1
24847: PUSH
24848: LD_INT 2
24850: PUSH
24851: EMPTY
24852: LIST
24853: LIST
24854: PUSH
24855: LD_INT 0
24857: PUSH
24858: LD_INT 2
24860: PUSH
24861: EMPTY
24862: LIST
24863: LIST
24864: PUSH
24865: LD_INT 1
24867: NEG
24868: PUSH
24869: LD_INT 1
24871: PUSH
24872: EMPTY
24873: LIST
24874: LIST
24875: PUSH
24876: LD_INT 2
24878: NEG
24879: PUSH
24880: LD_INT 0
24882: PUSH
24883: EMPTY
24884: LIST
24885: LIST
24886: PUSH
24887: LD_INT 2
24889: NEG
24890: PUSH
24891: LD_INT 1
24893: NEG
24894: PUSH
24895: EMPTY
24896: LIST
24897: LIST
24898: PUSH
24899: LD_INT 2
24901: NEG
24902: PUSH
24903: LD_INT 2
24905: NEG
24906: PUSH
24907: EMPTY
24908: LIST
24909: LIST
24910: PUSH
24911: EMPTY
24912: LIST
24913: LIST
24914: LIST
24915: LIST
24916: LIST
24917: LIST
24918: LIST
24919: LIST
24920: LIST
24921: LIST
24922: LIST
24923: LIST
24924: LIST
24925: LIST
24926: LIST
24927: LIST
24928: LIST
24929: LIST
24930: LIST
24931: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
24932: LD_ADDR_VAR 0 23
24936: PUSH
24937: LD_INT 0
24939: PUSH
24940: LD_INT 0
24942: PUSH
24943: EMPTY
24944: LIST
24945: LIST
24946: PUSH
24947: LD_INT 0
24949: PUSH
24950: LD_INT 1
24952: NEG
24953: PUSH
24954: EMPTY
24955: LIST
24956: LIST
24957: PUSH
24958: LD_INT 1
24960: PUSH
24961: LD_INT 0
24963: PUSH
24964: EMPTY
24965: LIST
24966: LIST
24967: PUSH
24968: LD_INT 1
24970: PUSH
24971: LD_INT 1
24973: PUSH
24974: EMPTY
24975: LIST
24976: LIST
24977: PUSH
24978: LD_INT 0
24980: PUSH
24981: LD_INT 1
24983: PUSH
24984: EMPTY
24985: LIST
24986: LIST
24987: PUSH
24988: LD_INT 1
24990: NEG
24991: PUSH
24992: LD_INT 0
24994: PUSH
24995: EMPTY
24996: LIST
24997: LIST
24998: PUSH
24999: LD_INT 1
25001: NEG
25002: PUSH
25003: LD_INT 1
25005: NEG
25006: PUSH
25007: EMPTY
25008: LIST
25009: LIST
25010: PUSH
25011: LD_INT 1
25013: NEG
25014: PUSH
25015: LD_INT 2
25017: NEG
25018: PUSH
25019: EMPTY
25020: LIST
25021: LIST
25022: PUSH
25023: LD_INT 0
25025: PUSH
25026: LD_INT 2
25028: NEG
25029: PUSH
25030: EMPTY
25031: LIST
25032: LIST
25033: PUSH
25034: LD_INT 1
25036: PUSH
25037: LD_INT 1
25039: NEG
25040: PUSH
25041: EMPTY
25042: LIST
25043: LIST
25044: PUSH
25045: LD_INT 2
25047: PUSH
25048: LD_INT 0
25050: PUSH
25051: EMPTY
25052: LIST
25053: LIST
25054: PUSH
25055: LD_INT 2
25057: PUSH
25058: LD_INT 1
25060: PUSH
25061: EMPTY
25062: LIST
25063: LIST
25064: PUSH
25065: LD_INT 2
25067: PUSH
25068: LD_INT 2
25070: PUSH
25071: EMPTY
25072: LIST
25073: LIST
25074: PUSH
25075: LD_INT 1
25077: PUSH
25078: LD_INT 2
25080: PUSH
25081: EMPTY
25082: LIST
25083: LIST
25084: PUSH
25085: LD_INT 0
25087: PUSH
25088: LD_INT 2
25090: PUSH
25091: EMPTY
25092: LIST
25093: LIST
25094: PUSH
25095: LD_INT 1
25097: NEG
25098: PUSH
25099: LD_INT 1
25101: PUSH
25102: EMPTY
25103: LIST
25104: LIST
25105: PUSH
25106: LD_INT 2
25108: NEG
25109: PUSH
25110: LD_INT 0
25112: PUSH
25113: EMPTY
25114: LIST
25115: LIST
25116: PUSH
25117: LD_INT 2
25119: NEG
25120: PUSH
25121: LD_INT 1
25123: NEG
25124: PUSH
25125: EMPTY
25126: LIST
25127: LIST
25128: PUSH
25129: LD_INT 2
25131: NEG
25132: PUSH
25133: LD_INT 2
25135: NEG
25136: PUSH
25137: EMPTY
25138: LIST
25139: LIST
25140: PUSH
25141: LD_INT 2
25143: NEG
25144: PUSH
25145: LD_INT 3
25147: NEG
25148: PUSH
25149: EMPTY
25150: LIST
25151: LIST
25152: PUSH
25153: LD_INT 1
25155: NEG
25156: PUSH
25157: LD_INT 3
25159: NEG
25160: PUSH
25161: EMPTY
25162: LIST
25163: LIST
25164: PUSH
25165: LD_INT 1
25167: PUSH
25168: LD_INT 2
25170: NEG
25171: PUSH
25172: EMPTY
25173: LIST
25174: LIST
25175: PUSH
25176: LD_INT 2
25178: PUSH
25179: LD_INT 1
25181: NEG
25182: PUSH
25183: EMPTY
25184: LIST
25185: LIST
25186: PUSH
25187: EMPTY
25188: LIST
25189: LIST
25190: LIST
25191: LIST
25192: LIST
25193: LIST
25194: LIST
25195: LIST
25196: LIST
25197: LIST
25198: LIST
25199: LIST
25200: LIST
25201: LIST
25202: LIST
25203: LIST
25204: LIST
25205: LIST
25206: LIST
25207: LIST
25208: LIST
25209: LIST
25210: LIST
25211: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
25212: LD_ADDR_VAR 0 24
25216: PUSH
25217: LD_INT 0
25219: PUSH
25220: LD_INT 0
25222: PUSH
25223: EMPTY
25224: LIST
25225: LIST
25226: PUSH
25227: LD_INT 0
25229: PUSH
25230: LD_INT 1
25232: NEG
25233: PUSH
25234: EMPTY
25235: LIST
25236: LIST
25237: PUSH
25238: LD_INT 1
25240: PUSH
25241: LD_INT 0
25243: PUSH
25244: EMPTY
25245: LIST
25246: LIST
25247: PUSH
25248: LD_INT 1
25250: PUSH
25251: LD_INT 1
25253: PUSH
25254: EMPTY
25255: LIST
25256: LIST
25257: PUSH
25258: LD_INT 0
25260: PUSH
25261: LD_INT 1
25263: PUSH
25264: EMPTY
25265: LIST
25266: LIST
25267: PUSH
25268: LD_INT 1
25270: NEG
25271: PUSH
25272: LD_INT 0
25274: PUSH
25275: EMPTY
25276: LIST
25277: LIST
25278: PUSH
25279: LD_INT 1
25281: NEG
25282: PUSH
25283: LD_INT 1
25285: NEG
25286: PUSH
25287: EMPTY
25288: LIST
25289: LIST
25290: PUSH
25291: LD_INT 1
25293: NEG
25294: PUSH
25295: LD_INT 2
25297: NEG
25298: PUSH
25299: EMPTY
25300: LIST
25301: LIST
25302: PUSH
25303: LD_INT 0
25305: PUSH
25306: LD_INT 2
25308: NEG
25309: PUSH
25310: EMPTY
25311: LIST
25312: LIST
25313: PUSH
25314: LD_INT 1
25316: PUSH
25317: LD_INT 1
25319: NEG
25320: PUSH
25321: EMPTY
25322: LIST
25323: LIST
25324: PUSH
25325: LD_INT 2
25327: PUSH
25328: LD_INT 0
25330: PUSH
25331: EMPTY
25332: LIST
25333: LIST
25334: PUSH
25335: LD_INT 2
25337: PUSH
25338: LD_INT 1
25340: PUSH
25341: EMPTY
25342: LIST
25343: LIST
25344: PUSH
25345: LD_INT 2
25347: PUSH
25348: LD_INT 2
25350: PUSH
25351: EMPTY
25352: LIST
25353: LIST
25354: PUSH
25355: LD_INT 1
25357: PUSH
25358: LD_INT 2
25360: PUSH
25361: EMPTY
25362: LIST
25363: LIST
25364: PUSH
25365: LD_INT 0
25367: PUSH
25368: LD_INT 2
25370: PUSH
25371: EMPTY
25372: LIST
25373: LIST
25374: PUSH
25375: LD_INT 1
25377: NEG
25378: PUSH
25379: LD_INT 1
25381: PUSH
25382: EMPTY
25383: LIST
25384: LIST
25385: PUSH
25386: LD_INT 2
25388: NEG
25389: PUSH
25390: LD_INT 0
25392: PUSH
25393: EMPTY
25394: LIST
25395: LIST
25396: PUSH
25397: LD_INT 2
25399: NEG
25400: PUSH
25401: LD_INT 1
25403: NEG
25404: PUSH
25405: EMPTY
25406: LIST
25407: LIST
25408: PUSH
25409: LD_INT 2
25411: NEG
25412: PUSH
25413: LD_INT 2
25415: NEG
25416: PUSH
25417: EMPTY
25418: LIST
25419: LIST
25420: PUSH
25421: LD_INT 1
25423: PUSH
25424: LD_INT 2
25426: NEG
25427: PUSH
25428: EMPTY
25429: LIST
25430: LIST
25431: PUSH
25432: LD_INT 2
25434: PUSH
25435: LD_INT 1
25437: NEG
25438: PUSH
25439: EMPTY
25440: LIST
25441: LIST
25442: PUSH
25443: LD_INT 3
25445: PUSH
25446: LD_INT 1
25448: PUSH
25449: EMPTY
25450: LIST
25451: LIST
25452: PUSH
25453: LD_INT 3
25455: PUSH
25456: LD_INT 2
25458: PUSH
25459: EMPTY
25460: LIST
25461: LIST
25462: PUSH
25463: EMPTY
25464: LIST
25465: LIST
25466: LIST
25467: LIST
25468: LIST
25469: LIST
25470: LIST
25471: LIST
25472: LIST
25473: LIST
25474: LIST
25475: LIST
25476: LIST
25477: LIST
25478: LIST
25479: LIST
25480: LIST
25481: LIST
25482: LIST
25483: LIST
25484: LIST
25485: LIST
25486: LIST
25487: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
25488: LD_ADDR_VAR 0 25
25492: PUSH
25493: LD_INT 0
25495: PUSH
25496: LD_INT 0
25498: PUSH
25499: EMPTY
25500: LIST
25501: LIST
25502: PUSH
25503: LD_INT 0
25505: PUSH
25506: LD_INT 1
25508: NEG
25509: PUSH
25510: EMPTY
25511: LIST
25512: LIST
25513: PUSH
25514: LD_INT 1
25516: PUSH
25517: LD_INT 0
25519: PUSH
25520: EMPTY
25521: LIST
25522: LIST
25523: PUSH
25524: LD_INT 1
25526: PUSH
25527: LD_INT 1
25529: PUSH
25530: EMPTY
25531: LIST
25532: LIST
25533: PUSH
25534: LD_INT 0
25536: PUSH
25537: LD_INT 1
25539: PUSH
25540: EMPTY
25541: LIST
25542: LIST
25543: PUSH
25544: LD_INT 1
25546: NEG
25547: PUSH
25548: LD_INT 0
25550: PUSH
25551: EMPTY
25552: LIST
25553: LIST
25554: PUSH
25555: LD_INT 1
25557: NEG
25558: PUSH
25559: LD_INT 1
25561: NEG
25562: PUSH
25563: EMPTY
25564: LIST
25565: LIST
25566: PUSH
25567: LD_INT 1
25569: NEG
25570: PUSH
25571: LD_INT 2
25573: NEG
25574: PUSH
25575: EMPTY
25576: LIST
25577: LIST
25578: PUSH
25579: LD_INT 0
25581: PUSH
25582: LD_INT 2
25584: NEG
25585: PUSH
25586: EMPTY
25587: LIST
25588: LIST
25589: PUSH
25590: LD_INT 1
25592: PUSH
25593: LD_INT 1
25595: NEG
25596: PUSH
25597: EMPTY
25598: LIST
25599: LIST
25600: PUSH
25601: LD_INT 2
25603: PUSH
25604: LD_INT 0
25606: PUSH
25607: EMPTY
25608: LIST
25609: LIST
25610: PUSH
25611: LD_INT 2
25613: PUSH
25614: LD_INT 1
25616: PUSH
25617: EMPTY
25618: LIST
25619: LIST
25620: PUSH
25621: LD_INT 2
25623: PUSH
25624: LD_INT 2
25626: PUSH
25627: EMPTY
25628: LIST
25629: LIST
25630: PUSH
25631: LD_INT 1
25633: PUSH
25634: LD_INT 2
25636: PUSH
25637: EMPTY
25638: LIST
25639: LIST
25640: PUSH
25641: LD_INT 0
25643: PUSH
25644: LD_INT 2
25646: PUSH
25647: EMPTY
25648: LIST
25649: LIST
25650: PUSH
25651: LD_INT 1
25653: NEG
25654: PUSH
25655: LD_INT 1
25657: PUSH
25658: EMPTY
25659: LIST
25660: LIST
25661: PUSH
25662: LD_INT 2
25664: NEG
25665: PUSH
25666: LD_INT 0
25668: PUSH
25669: EMPTY
25670: LIST
25671: LIST
25672: PUSH
25673: LD_INT 2
25675: NEG
25676: PUSH
25677: LD_INT 1
25679: NEG
25680: PUSH
25681: EMPTY
25682: LIST
25683: LIST
25684: PUSH
25685: LD_INT 2
25687: NEG
25688: PUSH
25689: LD_INT 2
25691: NEG
25692: PUSH
25693: EMPTY
25694: LIST
25695: LIST
25696: PUSH
25697: LD_INT 3
25699: PUSH
25700: LD_INT 1
25702: PUSH
25703: EMPTY
25704: LIST
25705: LIST
25706: PUSH
25707: LD_INT 3
25709: PUSH
25710: LD_INT 2
25712: PUSH
25713: EMPTY
25714: LIST
25715: LIST
25716: PUSH
25717: LD_INT 2
25719: PUSH
25720: LD_INT 3
25722: PUSH
25723: EMPTY
25724: LIST
25725: LIST
25726: PUSH
25727: LD_INT 1
25729: PUSH
25730: LD_INT 3
25732: PUSH
25733: EMPTY
25734: LIST
25735: LIST
25736: PUSH
25737: EMPTY
25738: LIST
25739: LIST
25740: LIST
25741: LIST
25742: LIST
25743: LIST
25744: LIST
25745: LIST
25746: LIST
25747: LIST
25748: LIST
25749: LIST
25750: LIST
25751: LIST
25752: LIST
25753: LIST
25754: LIST
25755: LIST
25756: LIST
25757: LIST
25758: LIST
25759: LIST
25760: LIST
25761: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
25762: LD_ADDR_VAR 0 26
25766: PUSH
25767: LD_INT 0
25769: PUSH
25770: LD_INT 0
25772: PUSH
25773: EMPTY
25774: LIST
25775: LIST
25776: PUSH
25777: LD_INT 0
25779: PUSH
25780: LD_INT 1
25782: NEG
25783: PUSH
25784: EMPTY
25785: LIST
25786: LIST
25787: PUSH
25788: LD_INT 1
25790: PUSH
25791: LD_INT 0
25793: PUSH
25794: EMPTY
25795: LIST
25796: LIST
25797: PUSH
25798: LD_INT 1
25800: PUSH
25801: LD_INT 1
25803: PUSH
25804: EMPTY
25805: LIST
25806: LIST
25807: PUSH
25808: LD_INT 0
25810: PUSH
25811: LD_INT 1
25813: PUSH
25814: EMPTY
25815: LIST
25816: LIST
25817: PUSH
25818: LD_INT 1
25820: NEG
25821: PUSH
25822: LD_INT 0
25824: PUSH
25825: EMPTY
25826: LIST
25827: LIST
25828: PUSH
25829: LD_INT 1
25831: NEG
25832: PUSH
25833: LD_INT 1
25835: NEG
25836: PUSH
25837: EMPTY
25838: LIST
25839: LIST
25840: PUSH
25841: LD_INT 1
25843: NEG
25844: PUSH
25845: LD_INT 2
25847: NEG
25848: PUSH
25849: EMPTY
25850: LIST
25851: LIST
25852: PUSH
25853: LD_INT 0
25855: PUSH
25856: LD_INT 2
25858: NEG
25859: PUSH
25860: EMPTY
25861: LIST
25862: LIST
25863: PUSH
25864: LD_INT 1
25866: PUSH
25867: LD_INT 1
25869: NEG
25870: PUSH
25871: EMPTY
25872: LIST
25873: LIST
25874: PUSH
25875: LD_INT 2
25877: PUSH
25878: LD_INT 0
25880: PUSH
25881: EMPTY
25882: LIST
25883: LIST
25884: PUSH
25885: LD_INT 2
25887: PUSH
25888: LD_INT 1
25890: PUSH
25891: EMPTY
25892: LIST
25893: LIST
25894: PUSH
25895: LD_INT 2
25897: PUSH
25898: LD_INT 2
25900: PUSH
25901: EMPTY
25902: LIST
25903: LIST
25904: PUSH
25905: LD_INT 1
25907: PUSH
25908: LD_INT 2
25910: PUSH
25911: EMPTY
25912: LIST
25913: LIST
25914: PUSH
25915: LD_INT 0
25917: PUSH
25918: LD_INT 2
25920: PUSH
25921: EMPTY
25922: LIST
25923: LIST
25924: PUSH
25925: LD_INT 1
25927: NEG
25928: PUSH
25929: LD_INT 1
25931: PUSH
25932: EMPTY
25933: LIST
25934: LIST
25935: PUSH
25936: LD_INT 2
25938: NEG
25939: PUSH
25940: LD_INT 0
25942: PUSH
25943: EMPTY
25944: LIST
25945: LIST
25946: PUSH
25947: LD_INT 2
25949: NEG
25950: PUSH
25951: LD_INT 1
25953: NEG
25954: PUSH
25955: EMPTY
25956: LIST
25957: LIST
25958: PUSH
25959: LD_INT 2
25961: NEG
25962: PUSH
25963: LD_INT 2
25965: NEG
25966: PUSH
25967: EMPTY
25968: LIST
25969: LIST
25970: PUSH
25971: LD_INT 2
25973: PUSH
25974: LD_INT 3
25976: PUSH
25977: EMPTY
25978: LIST
25979: LIST
25980: PUSH
25981: LD_INT 1
25983: PUSH
25984: LD_INT 3
25986: PUSH
25987: EMPTY
25988: LIST
25989: LIST
25990: PUSH
25991: LD_INT 1
25993: NEG
25994: PUSH
25995: LD_INT 2
25997: PUSH
25998: EMPTY
25999: LIST
26000: LIST
26001: PUSH
26002: LD_INT 2
26004: NEG
26005: PUSH
26006: LD_INT 1
26008: PUSH
26009: EMPTY
26010: LIST
26011: LIST
26012: PUSH
26013: EMPTY
26014: LIST
26015: LIST
26016: LIST
26017: LIST
26018: LIST
26019: LIST
26020: LIST
26021: LIST
26022: LIST
26023: LIST
26024: LIST
26025: LIST
26026: LIST
26027: LIST
26028: LIST
26029: LIST
26030: LIST
26031: LIST
26032: LIST
26033: LIST
26034: LIST
26035: LIST
26036: LIST
26037: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
26038: LD_ADDR_VAR 0 27
26042: PUSH
26043: LD_INT 0
26045: PUSH
26046: LD_INT 0
26048: PUSH
26049: EMPTY
26050: LIST
26051: LIST
26052: PUSH
26053: LD_INT 0
26055: PUSH
26056: LD_INT 1
26058: NEG
26059: PUSH
26060: EMPTY
26061: LIST
26062: LIST
26063: PUSH
26064: LD_INT 1
26066: PUSH
26067: LD_INT 0
26069: PUSH
26070: EMPTY
26071: LIST
26072: LIST
26073: PUSH
26074: LD_INT 1
26076: PUSH
26077: LD_INT 1
26079: PUSH
26080: EMPTY
26081: LIST
26082: LIST
26083: PUSH
26084: LD_INT 0
26086: PUSH
26087: LD_INT 1
26089: PUSH
26090: EMPTY
26091: LIST
26092: LIST
26093: PUSH
26094: LD_INT 1
26096: NEG
26097: PUSH
26098: LD_INT 0
26100: PUSH
26101: EMPTY
26102: LIST
26103: LIST
26104: PUSH
26105: LD_INT 1
26107: NEG
26108: PUSH
26109: LD_INT 1
26111: NEG
26112: PUSH
26113: EMPTY
26114: LIST
26115: LIST
26116: PUSH
26117: LD_INT 1
26119: NEG
26120: PUSH
26121: LD_INT 2
26123: NEG
26124: PUSH
26125: EMPTY
26126: LIST
26127: LIST
26128: PUSH
26129: LD_INT 0
26131: PUSH
26132: LD_INT 2
26134: NEG
26135: PUSH
26136: EMPTY
26137: LIST
26138: LIST
26139: PUSH
26140: LD_INT 1
26142: PUSH
26143: LD_INT 1
26145: NEG
26146: PUSH
26147: EMPTY
26148: LIST
26149: LIST
26150: PUSH
26151: LD_INT 2
26153: PUSH
26154: LD_INT 0
26156: PUSH
26157: EMPTY
26158: LIST
26159: LIST
26160: PUSH
26161: LD_INT 2
26163: PUSH
26164: LD_INT 1
26166: PUSH
26167: EMPTY
26168: LIST
26169: LIST
26170: PUSH
26171: LD_INT 2
26173: PUSH
26174: LD_INT 2
26176: PUSH
26177: EMPTY
26178: LIST
26179: LIST
26180: PUSH
26181: LD_INT 1
26183: PUSH
26184: LD_INT 2
26186: PUSH
26187: EMPTY
26188: LIST
26189: LIST
26190: PUSH
26191: LD_INT 0
26193: PUSH
26194: LD_INT 2
26196: PUSH
26197: EMPTY
26198: LIST
26199: LIST
26200: PUSH
26201: LD_INT 1
26203: NEG
26204: PUSH
26205: LD_INT 1
26207: PUSH
26208: EMPTY
26209: LIST
26210: LIST
26211: PUSH
26212: LD_INT 2
26214: NEG
26215: PUSH
26216: LD_INT 0
26218: PUSH
26219: EMPTY
26220: LIST
26221: LIST
26222: PUSH
26223: LD_INT 2
26225: NEG
26226: PUSH
26227: LD_INT 1
26229: NEG
26230: PUSH
26231: EMPTY
26232: LIST
26233: LIST
26234: PUSH
26235: LD_INT 2
26237: NEG
26238: PUSH
26239: LD_INT 2
26241: NEG
26242: PUSH
26243: EMPTY
26244: LIST
26245: LIST
26246: PUSH
26247: LD_INT 1
26249: NEG
26250: PUSH
26251: LD_INT 2
26253: PUSH
26254: EMPTY
26255: LIST
26256: LIST
26257: PUSH
26258: LD_INT 2
26260: NEG
26261: PUSH
26262: LD_INT 1
26264: PUSH
26265: EMPTY
26266: LIST
26267: LIST
26268: PUSH
26269: LD_INT 3
26271: NEG
26272: PUSH
26273: LD_INT 1
26275: NEG
26276: PUSH
26277: EMPTY
26278: LIST
26279: LIST
26280: PUSH
26281: LD_INT 3
26283: NEG
26284: PUSH
26285: LD_INT 2
26287: NEG
26288: PUSH
26289: EMPTY
26290: LIST
26291: LIST
26292: PUSH
26293: EMPTY
26294: LIST
26295: LIST
26296: LIST
26297: LIST
26298: LIST
26299: LIST
26300: LIST
26301: LIST
26302: LIST
26303: LIST
26304: LIST
26305: LIST
26306: LIST
26307: LIST
26308: LIST
26309: LIST
26310: LIST
26311: LIST
26312: LIST
26313: LIST
26314: LIST
26315: LIST
26316: LIST
26317: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
26318: LD_ADDR_VAR 0 28
26322: PUSH
26323: LD_INT 0
26325: PUSH
26326: LD_INT 0
26328: PUSH
26329: EMPTY
26330: LIST
26331: LIST
26332: PUSH
26333: LD_INT 0
26335: PUSH
26336: LD_INT 1
26338: NEG
26339: PUSH
26340: EMPTY
26341: LIST
26342: LIST
26343: PUSH
26344: LD_INT 1
26346: PUSH
26347: LD_INT 0
26349: PUSH
26350: EMPTY
26351: LIST
26352: LIST
26353: PUSH
26354: LD_INT 1
26356: PUSH
26357: LD_INT 1
26359: PUSH
26360: EMPTY
26361: LIST
26362: LIST
26363: PUSH
26364: LD_INT 0
26366: PUSH
26367: LD_INT 1
26369: PUSH
26370: EMPTY
26371: LIST
26372: LIST
26373: PUSH
26374: LD_INT 1
26376: NEG
26377: PUSH
26378: LD_INT 0
26380: PUSH
26381: EMPTY
26382: LIST
26383: LIST
26384: PUSH
26385: LD_INT 1
26387: NEG
26388: PUSH
26389: LD_INT 1
26391: NEG
26392: PUSH
26393: EMPTY
26394: LIST
26395: LIST
26396: PUSH
26397: LD_INT 1
26399: NEG
26400: PUSH
26401: LD_INT 2
26403: NEG
26404: PUSH
26405: EMPTY
26406: LIST
26407: LIST
26408: PUSH
26409: LD_INT 0
26411: PUSH
26412: LD_INT 2
26414: NEG
26415: PUSH
26416: EMPTY
26417: LIST
26418: LIST
26419: PUSH
26420: LD_INT 1
26422: PUSH
26423: LD_INT 1
26425: NEG
26426: PUSH
26427: EMPTY
26428: LIST
26429: LIST
26430: PUSH
26431: LD_INT 2
26433: PUSH
26434: LD_INT 0
26436: PUSH
26437: EMPTY
26438: LIST
26439: LIST
26440: PUSH
26441: LD_INT 2
26443: PUSH
26444: LD_INT 1
26446: PUSH
26447: EMPTY
26448: LIST
26449: LIST
26450: PUSH
26451: LD_INT 2
26453: PUSH
26454: LD_INT 2
26456: PUSH
26457: EMPTY
26458: LIST
26459: LIST
26460: PUSH
26461: LD_INT 1
26463: PUSH
26464: LD_INT 2
26466: PUSH
26467: EMPTY
26468: LIST
26469: LIST
26470: PUSH
26471: LD_INT 0
26473: PUSH
26474: LD_INT 2
26476: PUSH
26477: EMPTY
26478: LIST
26479: LIST
26480: PUSH
26481: LD_INT 1
26483: NEG
26484: PUSH
26485: LD_INT 1
26487: PUSH
26488: EMPTY
26489: LIST
26490: LIST
26491: PUSH
26492: LD_INT 2
26494: NEG
26495: PUSH
26496: LD_INT 0
26498: PUSH
26499: EMPTY
26500: LIST
26501: LIST
26502: PUSH
26503: LD_INT 2
26505: NEG
26506: PUSH
26507: LD_INT 1
26509: NEG
26510: PUSH
26511: EMPTY
26512: LIST
26513: LIST
26514: PUSH
26515: LD_INT 2
26517: NEG
26518: PUSH
26519: LD_INT 2
26521: NEG
26522: PUSH
26523: EMPTY
26524: LIST
26525: LIST
26526: PUSH
26527: LD_INT 2
26529: NEG
26530: PUSH
26531: LD_INT 3
26533: NEG
26534: PUSH
26535: EMPTY
26536: LIST
26537: LIST
26538: PUSH
26539: LD_INT 1
26541: NEG
26542: PUSH
26543: LD_INT 3
26545: NEG
26546: PUSH
26547: EMPTY
26548: LIST
26549: LIST
26550: PUSH
26551: LD_INT 3
26553: NEG
26554: PUSH
26555: LD_INT 1
26557: NEG
26558: PUSH
26559: EMPTY
26560: LIST
26561: LIST
26562: PUSH
26563: LD_INT 3
26565: NEG
26566: PUSH
26567: LD_INT 2
26569: NEG
26570: PUSH
26571: EMPTY
26572: LIST
26573: LIST
26574: PUSH
26575: EMPTY
26576: LIST
26577: LIST
26578: LIST
26579: LIST
26580: LIST
26581: LIST
26582: LIST
26583: LIST
26584: LIST
26585: LIST
26586: LIST
26587: LIST
26588: LIST
26589: LIST
26590: LIST
26591: LIST
26592: LIST
26593: LIST
26594: LIST
26595: LIST
26596: LIST
26597: LIST
26598: LIST
26599: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
26600: LD_ADDR_VAR 0 29
26604: PUSH
26605: LD_INT 0
26607: PUSH
26608: LD_INT 0
26610: PUSH
26611: EMPTY
26612: LIST
26613: LIST
26614: PUSH
26615: LD_INT 0
26617: PUSH
26618: LD_INT 1
26620: NEG
26621: PUSH
26622: EMPTY
26623: LIST
26624: LIST
26625: PUSH
26626: LD_INT 1
26628: PUSH
26629: LD_INT 0
26631: PUSH
26632: EMPTY
26633: LIST
26634: LIST
26635: PUSH
26636: LD_INT 1
26638: PUSH
26639: LD_INT 1
26641: PUSH
26642: EMPTY
26643: LIST
26644: LIST
26645: PUSH
26646: LD_INT 0
26648: PUSH
26649: LD_INT 1
26651: PUSH
26652: EMPTY
26653: LIST
26654: LIST
26655: PUSH
26656: LD_INT 1
26658: NEG
26659: PUSH
26660: LD_INT 0
26662: PUSH
26663: EMPTY
26664: LIST
26665: LIST
26666: PUSH
26667: LD_INT 1
26669: NEG
26670: PUSH
26671: LD_INT 1
26673: NEG
26674: PUSH
26675: EMPTY
26676: LIST
26677: LIST
26678: PUSH
26679: LD_INT 1
26681: NEG
26682: PUSH
26683: LD_INT 2
26685: NEG
26686: PUSH
26687: EMPTY
26688: LIST
26689: LIST
26690: PUSH
26691: LD_INT 0
26693: PUSH
26694: LD_INT 2
26696: NEG
26697: PUSH
26698: EMPTY
26699: LIST
26700: LIST
26701: PUSH
26702: LD_INT 1
26704: PUSH
26705: LD_INT 1
26707: NEG
26708: PUSH
26709: EMPTY
26710: LIST
26711: LIST
26712: PUSH
26713: LD_INT 2
26715: PUSH
26716: LD_INT 0
26718: PUSH
26719: EMPTY
26720: LIST
26721: LIST
26722: PUSH
26723: LD_INT 2
26725: PUSH
26726: LD_INT 1
26728: PUSH
26729: EMPTY
26730: LIST
26731: LIST
26732: PUSH
26733: LD_INT 1
26735: PUSH
26736: LD_INT 2
26738: PUSH
26739: EMPTY
26740: LIST
26741: LIST
26742: PUSH
26743: LD_INT 0
26745: PUSH
26746: LD_INT 2
26748: PUSH
26749: EMPTY
26750: LIST
26751: LIST
26752: PUSH
26753: LD_INT 1
26755: NEG
26756: PUSH
26757: LD_INT 1
26759: PUSH
26760: EMPTY
26761: LIST
26762: LIST
26763: PUSH
26764: LD_INT 2
26766: NEG
26767: PUSH
26768: LD_INT 1
26770: NEG
26771: PUSH
26772: EMPTY
26773: LIST
26774: LIST
26775: PUSH
26776: LD_INT 2
26778: NEG
26779: PUSH
26780: LD_INT 2
26782: NEG
26783: PUSH
26784: EMPTY
26785: LIST
26786: LIST
26787: PUSH
26788: LD_INT 2
26790: NEG
26791: PUSH
26792: LD_INT 3
26794: NEG
26795: PUSH
26796: EMPTY
26797: LIST
26798: LIST
26799: PUSH
26800: LD_INT 2
26802: PUSH
26803: LD_INT 1
26805: NEG
26806: PUSH
26807: EMPTY
26808: LIST
26809: LIST
26810: PUSH
26811: LD_INT 3
26813: PUSH
26814: LD_INT 1
26816: PUSH
26817: EMPTY
26818: LIST
26819: LIST
26820: PUSH
26821: LD_INT 1
26823: PUSH
26824: LD_INT 3
26826: PUSH
26827: EMPTY
26828: LIST
26829: LIST
26830: PUSH
26831: LD_INT 1
26833: NEG
26834: PUSH
26835: LD_INT 2
26837: PUSH
26838: EMPTY
26839: LIST
26840: LIST
26841: PUSH
26842: LD_INT 3
26844: NEG
26845: PUSH
26846: LD_INT 2
26848: NEG
26849: PUSH
26850: EMPTY
26851: LIST
26852: LIST
26853: PUSH
26854: EMPTY
26855: LIST
26856: LIST
26857: LIST
26858: LIST
26859: LIST
26860: LIST
26861: LIST
26862: LIST
26863: LIST
26864: LIST
26865: LIST
26866: LIST
26867: LIST
26868: LIST
26869: LIST
26870: LIST
26871: LIST
26872: LIST
26873: LIST
26874: LIST
26875: LIST
26876: LIST
26877: LIST
26878: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
26879: LD_ADDR_VAR 0 30
26883: PUSH
26884: LD_INT 0
26886: PUSH
26887: LD_INT 0
26889: PUSH
26890: EMPTY
26891: LIST
26892: LIST
26893: PUSH
26894: LD_INT 0
26896: PUSH
26897: LD_INT 1
26899: NEG
26900: PUSH
26901: EMPTY
26902: LIST
26903: LIST
26904: PUSH
26905: LD_INT 1
26907: PUSH
26908: LD_INT 0
26910: PUSH
26911: EMPTY
26912: LIST
26913: LIST
26914: PUSH
26915: LD_INT 1
26917: PUSH
26918: LD_INT 1
26920: PUSH
26921: EMPTY
26922: LIST
26923: LIST
26924: PUSH
26925: LD_INT 0
26927: PUSH
26928: LD_INT 1
26930: PUSH
26931: EMPTY
26932: LIST
26933: LIST
26934: PUSH
26935: LD_INT 1
26937: NEG
26938: PUSH
26939: LD_INT 0
26941: PUSH
26942: EMPTY
26943: LIST
26944: LIST
26945: PUSH
26946: LD_INT 1
26948: NEG
26949: PUSH
26950: LD_INT 1
26952: NEG
26953: PUSH
26954: EMPTY
26955: LIST
26956: LIST
26957: PUSH
26958: LD_INT 1
26960: NEG
26961: PUSH
26962: LD_INT 2
26964: NEG
26965: PUSH
26966: EMPTY
26967: LIST
26968: LIST
26969: PUSH
26970: LD_INT 0
26972: PUSH
26973: LD_INT 2
26975: NEG
26976: PUSH
26977: EMPTY
26978: LIST
26979: LIST
26980: PUSH
26981: LD_INT 1
26983: PUSH
26984: LD_INT 1
26986: NEG
26987: PUSH
26988: EMPTY
26989: LIST
26990: LIST
26991: PUSH
26992: LD_INT 2
26994: PUSH
26995: LD_INT 0
26997: PUSH
26998: EMPTY
26999: LIST
27000: LIST
27001: PUSH
27002: LD_INT 2
27004: PUSH
27005: LD_INT 1
27007: PUSH
27008: EMPTY
27009: LIST
27010: LIST
27011: PUSH
27012: LD_INT 2
27014: PUSH
27015: LD_INT 2
27017: PUSH
27018: EMPTY
27019: LIST
27020: LIST
27021: PUSH
27022: LD_INT 1
27024: PUSH
27025: LD_INT 2
27027: PUSH
27028: EMPTY
27029: LIST
27030: LIST
27031: PUSH
27032: LD_INT 1
27034: NEG
27035: PUSH
27036: LD_INT 1
27038: PUSH
27039: EMPTY
27040: LIST
27041: LIST
27042: PUSH
27043: LD_INT 2
27045: NEG
27046: PUSH
27047: LD_INT 0
27049: PUSH
27050: EMPTY
27051: LIST
27052: LIST
27053: PUSH
27054: LD_INT 2
27056: NEG
27057: PUSH
27058: LD_INT 1
27060: NEG
27061: PUSH
27062: EMPTY
27063: LIST
27064: LIST
27065: PUSH
27066: LD_INT 1
27068: NEG
27069: PUSH
27070: LD_INT 3
27072: NEG
27073: PUSH
27074: EMPTY
27075: LIST
27076: LIST
27077: PUSH
27078: LD_INT 1
27080: PUSH
27081: LD_INT 2
27083: NEG
27084: PUSH
27085: EMPTY
27086: LIST
27087: LIST
27088: PUSH
27089: LD_INT 3
27091: PUSH
27092: LD_INT 2
27094: PUSH
27095: EMPTY
27096: LIST
27097: LIST
27098: PUSH
27099: LD_INT 2
27101: PUSH
27102: LD_INT 3
27104: PUSH
27105: EMPTY
27106: LIST
27107: LIST
27108: PUSH
27109: LD_INT 2
27111: NEG
27112: PUSH
27113: LD_INT 1
27115: PUSH
27116: EMPTY
27117: LIST
27118: LIST
27119: PUSH
27120: LD_INT 3
27122: NEG
27123: PUSH
27124: LD_INT 1
27126: NEG
27127: PUSH
27128: EMPTY
27129: LIST
27130: LIST
27131: PUSH
27132: EMPTY
27133: LIST
27134: LIST
27135: LIST
27136: LIST
27137: LIST
27138: LIST
27139: LIST
27140: LIST
27141: LIST
27142: LIST
27143: LIST
27144: LIST
27145: LIST
27146: LIST
27147: LIST
27148: LIST
27149: LIST
27150: LIST
27151: LIST
27152: LIST
27153: LIST
27154: LIST
27155: LIST
27156: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
27157: LD_ADDR_VAR 0 31
27161: PUSH
27162: LD_INT 0
27164: PUSH
27165: LD_INT 0
27167: PUSH
27168: EMPTY
27169: LIST
27170: LIST
27171: PUSH
27172: LD_INT 0
27174: PUSH
27175: LD_INT 1
27177: NEG
27178: PUSH
27179: EMPTY
27180: LIST
27181: LIST
27182: PUSH
27183: LD_INT 1
27185: PUSH
27186: LD_INT 0
27188: PUSH
27189: EMPTY
27190: LIST
27191: LIST
27192: PUSH
27193: LD_INT 1
27195: PUSH
27196: LD_INT 1
27198: PUSH
27199: EMPTY
27200: LIST
27201: LIST
27202: PUSH
27203: LD_INT 0
27205: PUSH
27206: LD_INT 1
27208: PUSH
27209: EMPTY
27210: LIST
27211: LIST
27212: PUSH
27213: LD_INT 1
27215: NEG
27216: PUSH
27217: LD_INT 0
27219: PUSH
27220: EMPTY
27221: LIST
27222: LIST
27223: PUSH
27224: LD_INT 1
27226: NEG
27227: PUSH
27228: LD_INT 1
27230: NEG
27231: PUSH
27232: EMPTY
27233: LIST
27234: LIST
27235: PUSH
27236: LD_INT 1
27238: NEG
27239: PUSH
27240: LD_INT 2
27242: NEG
27243: PUSH
27244: EMPTY
27245: LIST
27246: LIST
27247: PUSH
27248: LD_INT 1
27250: PUSH
27251: LD_INT 1
27253: NEG
27254: PUSH
27255: EMPTY
27256: LIST
27257: LIST
27258: PUSH
27259: LD_INT 2
27261: PUSH
27262: LD_INT 0
27264: PUSH
27265: EMPTY
27266: LIST
27267: LIST
27268: PUSH
27269: LD_INT 2
27271: PUSH
27272: LD_INT 1
27274: PUSH
27275: EMPTY
27276: LIST
27277: LIST
27278: PUSH
27279: LD_INT 2
27281: PUSH
27282: LD_INT 2
27284: PUSH
27285: EMPTY
27286: LIST
27287: LIST
27288: PUSH
27289: LD_INT 1
27291: PUSH
27292: LD_INT 2
27294: PUSH
27295: EMPTY
27296: LIST
27297: LIST
27298: PUSH
27299: LD_INT 0
27301: PUSH
27302: LD_INT 2
27304: PUSH
27305: EMPTY
27306: LIST
27307: LIST
27308: PUSH
27309: LD_INT 1
27311: NEG
27312: PUSH
27313: LD_INT 1
27315: PUSH
27316: EMPTY
27317: LIST
27318: LIST
27319: PUSH
27320: LD_INT 2
27322: NEG
27323: PUSH
27324: LD_INT 1
27326: NEG
27327: PUSH
27328: EMPTY
27329: LIST
27330: LIST
27331: PUSH
27332: LD_INT 2
27334: NEG
27335: PUSH
27336: LD_INT 2
27338: NEG
27339: PUSH
27340: EMPTY
27341: LIST
27342: LIST
27343: PUSH
27344: LD_INT 2
27346: NEG
27347: PUSH
27348: LD_INT 3
27350: NEG
27351: PUSH
27352: EMPTY
27353: LIST
27354: LIST
27355: PUSH
27356: LD_INT 2
27358: PUSH
27359: LD_INT 1
27361: NEG
27362: PUSH
27363: EMPTY
27364: LIST
27365: LIST
27366: PUSH
27367: LD_INT 3
27369: PUSH
27370: LD_INT 1
27372: PUSH
27373: EMPTY
27374: LIST
27375: LIST
27376: PUSH
27377: LD_INT 1
27379: PUSH
27380: LD_INT 3
27382: PUSH
27383: EMPTY
27384: LIST
27385: LIST
27386: PUSH
27387: LD_INT 1
27389: NEG
27390: PUSH
27391: LD_INT 2
27393: PUSH
27394: EMPTY
27395: LIST
27396: LIST
27397: PUSH
27398: LD_INT 3
27400: NEG
27401: PUSH
27402: LD_INT 2
27404: NEG
27405: PUSH
27406: EMPTY
27407: LIST
27408: LIST
27409: PUSH
27410: EMPTY
27411: LIST
27412: LIST
27413: LIST
27414: LIST
27415: LIST
27416: LIST
27417: LIST
27418: LIST
27419: LIST
27420: LIST
27421: LIST
27422: LIST
27423: LIST
27424: LIST
27425: LIST
27426: LIST
27427: LIST
27428: LIST
27429: LIST
27430: LIST
27431: LIST
27432: LIST
27433: LIST
27434: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
27435: LD_ADDR_VAR 0 32
27439: PUSH
27440: LD_INT 0
27442: PUSH
27443: LD_INT 0
27445: PUSH
27446: EMPTY
27447: LIST
27448: LIST
27449: PUSH
27450: LD_INT 0
27452: PUSH
27453: LD_INT 1
27455: NEG
27456: PUSH
27457: EMPTY
27458: LIST
27459: LIST
27460: PUSH
27461: LD_INT 1
27463: PUSH
27464: LD_INT 0
27466: PUSH
27467: EMPTY
27468: LIST
27469: LIST
27470: PUSH
27471: LD_INT 1
27473: PUSH
27474: LD_INT 1
27476: PUSH
27477: EMPTY
27478: LIST
27479: LIST
27480: PUSH
27481: LD_INT 0
27483: PUSH
27484: LD_INT 1
27486: PUSH
27487: EMPTY
27488: LIST
27489: LIST
27490: PUSH
27491: LD_INT 1
27493: NEG
27494: PUSH
27495: LD_INT 0
27497: PUSH
27498: EMPTY
27499: LIST
27500: LIST
27501: PUSH
27502: LD_INT 1
27504: NEG
27505: PUSH
27506: LD_INT 1
27508: NEG
27509: PUSH
27510: EMPTY
27511: LIST
27512: LIST
27513: PUSH
27514: LD_INT 1
27516: NEG
27517: PUSH
27518: LD_INT 2
27520: NEG
27521: PUSH
27522: EMPTY
27523: LIST
27524: LIST
27525: PUSH
27526: LD_INT 0
27528: PUSH
27529: LD_INT 2
27531: NEG
27532: PUSH
27533: EMPTY
27534: LIST
27535: LIST
27536: PUSH
27537: LD_INT 1
27539: PUSH
27540: LD_INT 1
27542: NEG
27543: PUSH
27544: EMPTY
27545: LIST
27546: LIST
27547: PUSH
27548: LD_INT 2
27550: PUSH
27551: LD_INT 1
27553: PUSH
27554: EMPTY
27555: LIST
27556: LIST
27557: PUSH
27558: LD_INT 2
27560: PUSH
27561: LD_INT 2
27563: PUSH
27564: EMPTY
27565: LIST
27566: LIST
27567: PUSH
27568: LD_INT 1
27570: PUSH
27571: LD_INT 2
27573: PUSH
27574: EMPTY
27575: LIST
27576: LIST
27577: PUSH
27578: LD_INT 0
27580: PUSH
27581: LD_INT 2
27583: PUSH
27584: EMPTY
27585: LIST
27586: LIST
27587: PUSH
27588: LD_INT 1
27590: NEG
27591: PUSH
27592: LD_INT 1
27594: PUSH
27595: EMPTY
27596: LIST
27597: LIST
27598: PUSH
27599: LD_INT 2
27601: NEG
27602: PUSH
27603: LD_INT 0
27605: PUSH
27606: EMPTY
27607: LIST
27608: LIST
27609: PUSH
27610: LD_INT 2
27612: NEG
27613: PUSH
27614: LD_INT 1
27616: NEG
27617: PUSH
27618: EMPTY
27619: LIST
27620: LIST
27621: PUSH
27622: LD_INT 1
27624: NEG
27625: PUSH
27626: LD_INT 3
27628: NEG
27629: PUSH
27630: EMPTY
27631: LIST
27632: LIST
27633: PUSH
27634: LD_INT 1
27636: PUSH
27637: LD_INT 2
27639: NEG
27640: PUSH
27641: EMPTY
27642: LIST
27643: LIST
27644: PUSH
27645: LD_INT 3
27647: PUSH
27648: LD_INT 2
27650: PUSH
27651: EMPTY
27652: LIST
27653: LIST
27654: PUSH
27655: LD_INT 2
27657: PUSH
27658: LD_INT 3
27660: PUSH
27661: EMPTY
27662: LIST
27663: LIST
27664: PUSH
27665: LD_INT 2
27667: NEG
27668: PUSH
27669: LD_INT 1
27671: PUSH
27672: EMPTY
27673: LIST
27674: LIST
27675: PUSH
27676: LD_INT 3
27678: NEG
27679: PUSH
27680: LD_INT 1
27682: NEG
27683: PUSH
27684: EMPTY
27685: LIST
27686: LIST
27687: PUSH
27688: EMPTY
27689: LIST
27690: LIST
27691: LIST
27692: LIST
27693: LIST
27694: LIST
27695: LIST
27696: LIST
27697: LIST
27698: LIST
27699: LIST
27700: LIST
27701: LIST
27702: LIST
27703: LIST
27704: LIST
27705: LIST
27706: LIST
27707: LIST
27708: LIST
27709: LIST
27710: LIST
27711: LIST
27712: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
27713: LD_ADDR_VAR 0 33
27717: PUSH
27718: LD_INT 0
27720: PUSH
27721: LD_INT 0
27723: PUSH
27724: EMPTY
27725: LIST
27726: LIST
27727: PUSH
27728: LD_INT 0
27730: PUSH
27731: LD_INT 1
27733: NEG
27734: PUSH
27735: EMPTY
27736: LIST
27737: LIST
27738: PUSH
27739: LD_INT 1
27741: PUSH
27742: LD_INT 0
27744: PUSH
27745: EMPTY
27746: LIST
27747: LIST
27748: PUSH
27749: LD_INT 1
27751: PUSH
27752: LD_INT 1
27754: PUSH
27755: EMPTY
27756: LIST
27757: LIST
27758: PUSH
27759: LD_INT 0
27761: PUSH
27762: LD_INT 1
27764: PUSH
27765: EMPTY
27766: LIST
27767: LIST
27768: PUSH
27769: LD_INT 1
27771: NEG
27772: PUSH
27773: LD_INT 0
27775: PUSH
27776: EMPTY
27777: LIST
27778: LIST
27779: PUSH
27780: LD_INT 1
27782: NEG
27783: PUSH
27784: LD_INT 1
27786: NEG
27787: PUSH
27788: EMPTY
27789: LIST
27790: LIST
27791: PUSH
27792: LD_INT 1
27794: NEG
27795: PUSH
27796: LD_INT 2
27798: NEG
27799: PUSH
27800: EMPTY
27801: LIST
27802: LIST
27803: PUSH
27804: LD_INT 1
27806: PUSH
27807: LD_INT 1
27809: NEG
27810: PUSH
27811: EMPTY
27812: LIST
27813: LIST
27814: PUSH
27815: LD_INT 2
27817: PUSH
27818: LD_INT 0
27820: PUSH
27821: EMPTY
27822: LIST
27823: LIST
27824: PUSH
27825: LD_INT 2
27827: PUSH
27828: LD_INT 1
27830: PUSH
27831: EMPTY
27832: LIST
27833: LIST
27834: PUSH
27835: LD_INT 1
27837: PUSH
27838: LD_INT 2
27840: PUSH
27841: EMPTY
27842: LIST
27843: LIST
27844: PUSH
27845: LD_INT 0
27847: PUSH
27848: LD_INT 2
27850: PUSH
27851: EMPTY
27852: LIST
27853: LIST
27854: PUSH
27855: LD_INT 1
27857: NEG
27858: PUSH
27859: LD_INT 1
27861: PUSH
27862: EMPTY
27863: LIST
27864: LIST
27865: PUSH
27866: LD_INT 2
27868: NEG
27869: PUSH
27870: LD_INT 0
27872: PUSH
27873: EMPTY
27874: LIST
27875: LIST
27876: PUSH
27877: LD_INT 2
27879: NEG
27880: PUSH
27881: LD_INT 1
27883: NEG
27884: PUSH
27885: EMPTY
27886: LIST
27887: LIST
27888: PUSH
27889: LD_INT 2
27891: NEG
27892: PUSH
27893: LD_INT 2
27895: NEG
27896: PUSH
27897: EMPTY
27898: LIST
27899: LIST
27900: PUSH
27901: LD_INT 2
27903: NEG
27904: PUSH
27905: LD_INT 3
27907: NEG
27908: PUSH
27909: EMPTY
27910: LIST
27911: LIST
27912: PUSH
27913: LD_INT 2
27915: PUSH
27916: LD_INT 1
27918: NEG
27919: PUSH
27920: EMPTY
27921: LIST
27922: LIST
27923: PUSH
27924: LD_INT 3
27926: PUSH
27927: LD_INT 1
27929: PUSH
27930: EMPTY
27931: LIST
27932: LIST
27933: PUSH
27934: LD_INT 1
27936: PUSH
27937: LD_INT 3
27939: PUSH
27940: EMPTY
27941: LIST
27942: LIST
27943: PUSH
27944: LD_INT 1
27946: NEG
27947: PUSH
27948: LD_INT 2
27950: PUSH
27951: EMPTY
27952: LIST
27953: LIST
27954: PUSH
27955: LD_INT 3
27957: NEG
27958: PUSH
27959: LD_INT 2
27961: NEG
27962: PUSH
27963: EMPTY
27964: LIST
27965: LIST
27966: PUSH
27967: EMPTY
27968: LIST
27969: LIST
27970: LIST
27971: LIST
27972: LIST
27973: LIST
27974: LIST
27975: LIST
27976: LIST
27977: LIST
27978: LIST
27979: LIST
27980: LIST
27981: LIST
27982: LIST
27983: LIST
27984: LIST
27985: LIST
27986: LIST
27987: LIST
27988: LIST
27989: LIST
27990: LIST
27991: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
27992: LD_ADDR_VAR 0 34
27996: PUSH
27997: LD_INT 0
27999: PUSH
28000: LD_INT 0
28002: PUSH
28003: EMPTY
28004: LIST
28005: LIST
28006: PUSH
28007: LD_INT 0
28009: PUSH
28010: LD_INT 1
28012: NEG
28013: PUSH
28014: EMPTY
28015: LIST
28016: LIST
28017: PUSH
28018: LD_INT 1
28020: PUSH
28021: LD_INT 0
28023: PUSH
28024: EMPTY
28025: LIST
28026: LIST
28027: PUSH
28028: LD_INT 1
28030: PUSH
28031: LD_INT 1
28033: PUSH
28034: EMPTY
28035: LIST
28036: LIST
28037: PUSH
28038: LD_INT 0
28040: PUSH
28041: LD_INT 1
28043: PUSH
28044: EMPTY
28045: LIST
28046: LIST
28047: PUSH
28048: LD_INT 1
28050: NEG
28051: PUSH
28052: LD_INT 0
28054: PUSH
28055: EMPTY
28056: LIST
28057: LIST
28058: PUSH
28059: LD_INT 1
28061: NEG
28062: PUSH
28063: LD_INT 1
28065: NEG
28066: PUSH
28067: EMPTY
28068: LIST
28069: LIST
28070: PUSH
28071: LD_INT 1
28073: NEG
28074: PUSH
28075: LD_INT 2
28077: NEG
28078: PUSH
28079: EMPTY
28080: LIST
28081: LIST
28082: PUSH
28083: LD_INT 0
28085: PUSH
28086: LD_INT 2
28088: NEG
28089: PUSH
28090: EMPTY
28091: LIST
28092: LIST
28093: PUSH
28094: LD_INT 1
28096: PUSH
28097: LD_INT 1
28099: NEG
28100: PUSH
28101: EMPTY
28102: LIST
28103: LIST
28104: PUSH
28105: LD_INT 2
28107: PUSH
28108: LD_INT 1
28110: PUSH
28111: EMPTY
28112: LIST
28113: LIST
28114: PUSH
28115: LD_INT 2
28117: PUSH
28118: LD_INT 2
28120: PUSH
28121: EMPTY
28122: LIST
28123: LIST
28124: PUSH
28125: LD_INT 1
28127: PUSH
28128: LD_INT 2
28130: PUSH
28131: EMPTY
28132: LIST
28133: LIST
28134: PUSH
28135: LD_INT 1
28137: NEG
28138: PUSH
28139: LD_INT 1
28141: PUSH
28142: EMPTY
28143: LIST
28144: LIST
28145: PUSH
28146: LD_INT 2
28148: NEG
28149: PUSH
28150: LD_INT 0
28152: PUSH
28153: EMPTY
28154: LIST
28155: LIST
28156: PUSH
28157: LD_INT 2
28159: NEG
28160: PUSH
28161: LD_INT 1
28163: NEG
28164: PUSH
28165: EMPTY
28166: LIST
28167: LIST
28168: PUSH
28169: LD_INT 2
28171: NEG
28172: PUSH
28173: LD_INT 2
28175: NEG
28176: PUSH
28177: EMPTY
28178: LIST
28179: LIST
28180: PUSH
28181: LD_INT 1
28183: NEG
28184: PUSH
28185: LD_INT 3
28187: NEG
28188: PUSH
28189: EMPTY
28190: LIST
28191: LIST
28192: PUSH
28193: LD_INT 1
28195: PUSH
28196: LD_INT 2
28198: NEG
28199: PUSH
28200: EMPTY
28201: LIST
28202: LIST
28203: PUSH
28204: LD_INT 3
28206: PUSH
28207: LD_INT 2
28209: PUSH
28210: EMPTY
28211: LIST
28212: LIST
28213: PUSH
28214: LD_INT 2
28216: PUSH
28217: LD_INT 3
28219: PUSH
28220: EMPTY
28221: LIST
28222: LIST
28223: PUSH
28224: LD_INT 2
28226: NEG
28227: PUSH
28228: LD_INT 1
28230: PUSH
28231: EMPTY
28232: LIST
28233: LIST
28234: PUSH
28235: LD_INT 3
28237: NEG
28238: PUSH
28239: LD_INT 1
28241: NEG
28242: PUSH
28243: EMPTY
28244: LIST
28245: LIST
28246: PUSH
28247: EMPTY
28248: LIST
28249: LIST
28250: LIST
28251: LIST
28252: LIST
28253: LIST
28254: LIST
28255: LIST
28256: LIST
28257: LIST
28258: LIST
28259: LIST
28260: LIST
28261: LIST
28262: LIST
28263: LIST
28264: LIST
28265: LIST
28266: LIST
28267: LIST
28268: LIST
28269: LIST
28270: LIST
28271: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
28272: LD_ADDR_VAR 0 35
28276: PUSH
28277: LD_INT 0
28279: PUSH
28280: LD_INT 0
28282: PUSH
28283: EMPTY
28284: LIST
28285: LIST
28286: PUSH
28287: LD_INT 0
28289: PUSH
28290: LD_INT 1
28292: NEG
28293: PUSH
28294: EMPTY
28295: LIST
28296: LIST
28297: PUSH
28298: LD_INT 1
28300: PUSH
28301: LD_INT 0
28303: PUSH
28304: EMPTY
28305: LIST
28306: LIST
28307: PUSH
28308: LD_INT 1
28310: PUSH
28311: LD_INT 1
28313: PUSH
28314: EMPTY
28315: LIST
28316: LIST
28317: PUSH
28318: LD_INT 0
28320: PUSH
28321: LD_INT 1
28323: PUSH
28324: EMPTY
28325: LIST
28326: LIST
28327: PUSH
28328: LD_INT 1
28330: NEG
28331: PUSH
28332: LD_INT 0
28334: PUSH
28335: EMPTY
28336: LIST
28337: LIST
28338: PUSH
28339: LD_INT 1
28341: NEG
28342: PUSH
28343: LD_INT 1
28345: NEG
28346: PUSH
28347: EMPTY
28348: LIST
28349: LIST
28350: PUSH
28351: LD_INT 2
28353: PUSH
28354: LD_INT 1
28356: PUSH
28357: EMPTY
28358: LIST
28359: LIST
28360: PUSH
28361: LD_INT 2
28363: NEG
28364: PUSH
28365: LD_INT 1
28367: NEG
28368: PUSH
28369: EMPTY
28370: LIST
28371: LIST
28372: PUSH
28373: EMPTY
28374: LIST
28375: LIST
28376: LIST
28377: LIST
28378: LIST
28379: LIST
28380: LIST
28381: LIST
28382: LIST
28383: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
28384: LD_ADDR_VAR 0 36
28388: PUSH
28389: LD_INT 0
28391: PUSH
28392: LD_INT 0
28394: PUSH
28395: EMPTY
28396: LIST
28397: LIST
28398: PUSH
28399: LD_INT 0
28401: PUSH
28402: LD_INT 1
28404: NEG
28405: PUSH
28406: EMPTY
28407: LIST
28408: LIST
28409: PUSH
28410: LD_INT 1
28412: PUSH
28413: LD_INT 0
28415: PUSH
28416: EMPTY
28417: LIST
28418: LIST
28419: PUSH
28420: LD_INT 1
28422: PUSH
28423: LD_INT 1
28425: PUSH
28426: EMPTY
28427: LIST
28428: LIST
28429: PUSH
28430: LD_INT 0
28432: PUSH
28433: LD_INT 1
28435: PUSH
28436: EMPTY
28437: LIST
28438: LIST
28439: PUSH
28440: LD_INT 1
28442: NEG
28443: PUSH
28444: LD_INT 0
28446: PUSH
28447: EMPTY
28448: LIST
28449: LIST
28450: PUSH
28451: LD_INT 1
28453: NEG
28454: PUSH
28455: LD_INT 1
28457: NEG
28458: PUSH
28459: EMPTY
28460: LIST
28461: LIST
28462: PUSH
28463: LD_INT 1
28465: NEG
28466: PUSH
28467: LD_INT 2
28469: NEG
28470: PUSH
28471: EMPTY
28472: LIST
28473: LIST
28474: PUSH
28475: LD_INT 1
28477: PUSH
28478: LD_INT 2
28480: PUSH
28481: EMPTY
28482: LIST
28483: LIST
28484: PUSH
28485: EMPTY
28486: LIST
28487: LIST
28488: LIST
28489: LIST
28490: LIST
28491: LIST
28492: LIST
28493: LIST
28494: LIST
28495: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
28496: LD_ADDR_VAR 0 37
28500: PUSH
28501: LD_INT 0
28503: PUSH
28504: LD_INT 0
28506: PUSH
28507: EMPTY
28508: LIST
28509: LIST
28510: PUSH
28511: LD_INT 0
28513: PUSH
28514: LD_INT 1
28516: NEG
28517: PUSH
28518: EMPTY
28519: LIST
28520: LIST
28521: PUSH
28522: LD_INT 1
28524: PUSH
28525: LD_INT 0
28527: PUSH
28528: EMPTY
28529: LIST
28530: LIST
28531: PUSH
28532: LD_INT 1
28534: PUSH
28535: LD_INT 1
28537: PUSH
28538: EMPTY
28539: LIST
28540: LIST
28541: PUSH
28542: LD_INT 0
28544: PUSH
28545: LD_INT 1
28547: PUSH
28548: EMPTY
28549: LIST
28550: LIST
28551: PUSH
28552: LD_INT 1
28554: NEG
28555: PUSH
28556: LD_INT 0
28558: PUSH
28559: EMPTY
28560: LIST
28561: LIST
28562: PUSH
28563: LD_INT 1
28565: NEG
28566: PUSH
28567: LD_INT 1
28569: NEG
28570: PUSH
28571: EMPTY
28572: LIST
28573: LIST
28574: PUSH
28575: LD_INT 1
28577: PUSH
28578: LD_INT 1
28580: NEG
28581: PUSH
28582: EMPTY
28583: LIST
28584: LIST
28585: PUSH
28586: LD_INT 1
28588: NEG
28589: PUSH
28590: LD_INT 1
28592: PUSH
28593: EMPTY
28594: LIST
28595: LIST
28596: PUSH
28597: EMPTY
28598: LIST
28599: LIST
28600: LIST
28601: LIST
28602: LIST
28603: LIST
28604: LIST
28605: LIST
28606: LIST
28607: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
28608: LD_ADDR_VAR 0 38
28612: PUSH
28613: LD_INT 0
28615: PUSH
28616: LD_INT 0
28618: PUSH
28619: EMPTY
28620: LIST
28621: LIST
28622: PUSH
28623: LD_INT 0
28625: PUSH
28626: LD_INT 1
28628: NEG
28629: PUSH
28630: EMPTY
28631: LIST
28632: LIST
28633: PUSH
28634: LD_INT 1
28636: PUSH
28637: LD_INT 0
28639: PUSH
28640: EMPTY
28641: LIST
28642: LIST
28643: PUSH
28644: LD_INT 1
28646: PUSH
28647: LD_INT 1
28649: PUSH
28650: EMPTY
28651: LIST
28652: LIST
28653: PUSH
28654: LD_INT 0
28656: PUSH
28657: LD_INT 1
28659: PUSH
28660: EMPTY
28661: LIST
28662: LIST
28663: PUSH
28664: LD_INT 1
28666: NEG
28667: PUSH
28668: LD_INT 0
28670: PUSH
28671: EMPTY
28672: LIST
28673: LIST
28674: PUSH
28675: LD_INT 1
28677: NEG
28678: PUSH
28679: LD_INT 1
28681: NEG
28682: PUSH
28683: EMPTY
28684: LIST
28685: LIST
28686: PUSH
28687: LD_INT 2
28689: PUSH
28690: LD_INT 1
28692: PUSH
28693: EMPTY
28694: LIST
28695: LIST
28696: PUSH
28697: LD_INT 2
28699: NEG
28700: PUSH
28701: LD_INT 1
28703: NEG
28704: PUSH
28705: EMPTY
28706: LIST
28707: LIST
28708: PUSH
28709: EMPTY
28710: LIST
28711: LIST
28712: LIST
28713: LIST
28714: LIST
28715: LIST
28716: LIST
28717: LIST
28718: LIST
28719: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
28720: LD_ADDR_VAR 0 39
28724: PUSH
28725: LD_INT 0
28727: PUSH
28728: LD_INT 0
28730: PUSH
28731: EMPTY
28732: LIST
28733: LIST
28734: PUSH
28735: LD_INT 0
28737: PUSH
28738: LD_INT 1
28740: NEG
28741: PUSH
28742: EMPTY
28743: LIST
28744: LIST
28745: PUSH
28746: LD_INT 1
28748: PUSH
28749: LD_INT 0
28751: PUSH
28752: EMPTY
28753: LIST
28754: LIST
28755: PUSH
28756: LD_INT 1
28758: PUSH
28759: LD_INT 1
28761: PUSH
28762: EMPTY
28763: LIST
28764: LIST
28765: PUSH
28766: LD_INT 0
28768: PUSH
28769: LD_INT 1
28771: PUSH
28772: EMPTY
28773: LIST
28774: LIST
28775: PUSH
28776: LD_INT 1
28778: NEG
28779: PUSH
28780: LD_INT 0
28782: PUSH
28783: EMPTY
28784: LIST
28785: LIST
28786: PUSH
28787: LD_INT 1
28789: NEG
28790: PUSH
28791: LD_INT 1
28793: NEG
28794: PUSH
28795: EMPTY
28796: LIST
28797: LIST
28798: PUSH
28799: LD_INT 1
28801: NEG
28802: PUSH
28803: LD_INT 2
28805: NEG
28806: PUSH
28807: EMPTY
28808: LIST
28809: LIST
28810: PUSH
28811: LD_INT 1
28813: PUSH
28814: LD_INT 2
28816: PUSH
28817: EMPTY
28818: LIST
28819: LIST
28820: PUSH
28821: EMPTY
28822: LIST
28823: LIST
28824: LIST
28825: LIST
28826: LIST
28827: LIST
28828: LIST
28829: LIST
28830: LIST
28831: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
28832: LD_ADDR_VAR 0 40
28836: PUSH
28837: LD_INT 0
28839: PUSH
28840: LD_INT 0
28842: PUSH
28843: EMPTY
28844: LIST
28845: LIST
28846: PUSH
28847: LD_INT 0
28849: PUSH
28850: LD_INT 1
28852: NEG
28853: PUSH
28854: EMPTY
28855: LIST
28856: LIST
28857: PUSH
28858: LD_INT 1
28860: PUSH
28861: LD_INT 0
28863: PUSH
28864: EMPTY
28865: LIST
28866: LIST
28867: PUSH
28868: LD_INT 1
28870: PUSH
28871: LD_INT 1
28873: PUSH
28874: EMPTY
28875: LIST
28876: LIST
28877: PUSH
28878: LD_INT 0
28880: PUSH
28881: LD_INT 1
28883: PUSH
28884: EMPTY
28885: LIST
28886: LIST
28887: PUSH
28888: LD_INT 1
28890: NEG
28891: PUSH
28892: LD_INT 0
28894: PUSH
28895: EMPTY
28896: LIST
28897: LIST
28898: PUSH
28899: LD_INT 1
28901: NEG
28902: PUSH
28903: LD_INT 1
28905: NEG
28906: PUSH
28907: EMPTY
28908: LIST
28909: LIST
28910: PUSH
28911: LD_INT 1
28913: PUSH
28914: LD_INT 1
28916: NEG
28917: PUSH
28918: EMPTY
28919: LIST
28920: LIST
28921: PUSH
28922: LD_INT 1
28924: NEG
28925: PUSH
28926: LD_INT 1
28928: PUSH
28929: EMPTY
28930: LIST
28931: LIST
28932: PUSH
28933: EMPTY
28934: LIST
28935: LIST
28936: LIST
28937: LIST
28938: LIST
28939: LIST
28940: LIST
28941: LIST
28942: LIST
28943: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
28944: LD_ADDR_VAR 0 41
28948: PUSH
28949: LD_INT 0
28951: PUSH
28952: LD_INT 0
28954: PUSH
28955: EMPTY
28956: LIST
28957: LIST
28958: PUSH
28959: LD_INT 0
28961: PUSH
28962: LD_INT 1
28964: NEG
28965: PUSH
28966: EMPTY
28967: LIST
28968: LIST
28969: PUSH
28970: LD_INT 1
28972: PUSH
28973: LD_INT 0
28975: PUSH
28976: EMPTY
28977: LIST
28978: LIST
28979: PUSH
28980: LD_INT 1
28982: PUSH
28983: LD_INT 1
28985: PUSH
28986: EMPTY
28987: LIST
28988: LIST
28989: PUSH
28990: LD_INT 0
28992: PUSH
28993: LD_INT 1
28995: PUSH
28996: EMPTY
28997: LIST
28998: LIST
28999: PUSH
29000: LD_INT 1
29002: NEG
29003: PUSH
29004: LD_INT 0
29006: PUSH
29007: EMPTY
29008: LIST
29009: LIST
29010: PUSH
29011: LD_INT 1
29013: NEG
29014: PUSH
29015: LD_INT 1
29017: NEG
29018: PUSH
29019: EMPTY
29020: LIST
29021: LIST
29022: PUSH
29023: LD_INT 1
29025: NEG
29026: PUSH
29027: LD_INT 2
29029: NEG
29030: PUSH
29031: EMPTY
29032: LIST
29033: LIST
29034: PUSH
29035: LD_INT 1
29037: PUSH
29038: LD_INT 1
29040: NEG
29041: PUSH
29042: EMPTY
29043: LIST
29044: LIST
29045: PUSH
29046: LD_INT 2
29048: PUSH
29049: LD_INT 0
29051: PUSH
29052: EMPTY
29053: LIST
29054: LIST
29055: PUSH
29056: LD_INT 2
29058: PUSH
29059: LD_INT 1
29061: PUSH
29062: EMPTY
29063: LIST
29064: LIST
29065: PUSH
29066: LD_INT 2
29068: PUSH
29069: LD_INT 2
29071: PUSH
29072: EMPTY
29073: LIST
29074: LIST
29075: PUSH
29076: LD_INT 1
29078: PUSH
29079: LD_INT 2
29081: PUSH
29082: EMPTY
29083: LIST
29084: LIST
29085: PUSH
29086: LD_INT 1
29088: NEG
29089: PUSH
29090: LD_INT 1
29092: PUSH
29093: EMPTY
29094: LIST
29095: LIST
29096: PUSH
29097: LD_INT 2
29099: NEG
29100: PUSH
29101: LD_INT 0
29103: PUSH
29104: EMPTY
29105: LIST
29106: LIST
29107: PUSH
29108: LD_INT 2
29110: NEG
29111: PUSH
29112: LD_INT 1
29114: NEG
29115: PUSH
29116: EMPTY
29117: LIST
29118: LIST
29119: PUSH
29120: LD_INT 2
29122: NEG
29123: PUSH
29124: LD_INT 2
29126: NEG
29127: PUSH
29128: EMPTY
29129: LIST
29130: LIST
29131: PUSH
29132: LD_INT 2
29134: NEG
29135: PUSH
29136: LD_INT 3
29138: NEG
29139: PUSH
29140: EMPTY
29141: LIST
29142: LIST
29143: PUSH
29144: LD_INT 2
29146: PUSH
29147: LD_INT 1
29149: NEG
29150: PUSH
29151: EMPTY
29152: LIST
29153: LIST
29154: PUSH
29155: LD_INT 3
29157: PUSH
29158: LD_INT 0
29160: PUSH
29161: EMPTY
29162: LIST
29163: LIST
29164: PUSH
29165: LD_INT 3
29167: PUSH
29168: LD_INT 1
29170: PUSH
29171: EMPTY
29172: LIST
29173: LIST
29174: PUSH
29175: LD_INT 3
29177: PUSH
29178: LD_INT 2
29180: PUSH
29181: EMPTY
29182: LIST
29183: LIST
29184: PUSH
29185: LD_INT 3
29187: PUSH
29188: LD_INT 3
29190: PUSH
29191: EMPTY
29192: LIST
29193: LIST
29194: PUSH
29195: LD_INT 2
29197: PUSH
29198: LD_INT 3
29200: PUSH
29201: EMPTY
29202: LIST
29203: LIST
29204: PUSH
29205: LD_INT 2
29207: NEG
29208: PUSH
29209: LD_INT 1
29211: PUSH
29212: EMPTY
29213: LIST
29214: LIST
29215: PUSH
29216: LD_INT 3
29218: NEG
29219: PUSH
29220: LD_INT 0
29222: PUSH
29223: EMPTY
29224: LIST
29225: LIST
29226: PUSH
29227: LD_INT 3
29229: NEG
29230: PUSH
29231: LD_INT 1
29233: NEG
29234: PUSH
29235: EMPTY
29236: LIST
29237: LIST
29238: PUSH
29239: LD_INT 3
29241: NEG
29242: PUSH
29243: LD_INT 2
29245: NEG
29246: PUSH
29247: EMPTY
29248: LIST
29249: LIST
29250: PUSH
29251: LD_INT 3
29253: NEG
29254: PUSH
29255: LD_INT 3
29257: NEG
29258: PUSH
29259: EMPTY
29260: LIST
29261: LIST
29262: PUSH
29263: EMPTY
29264: LIST
29265: LIST
29266: LIST
29267: LIST
29268: LIST
29269: LIST
29270: LIST
29271: LIST
29272: LIST
29273: LIST
29274: LIST
29275: LIST
29276: LIST
29277: LIST
29278: LIST
29279: LIST
29280: LIST
29281: LIST
29282: LIST
29283: LIST
29284: LIST
29285: LIST
29286: LIST
29287: LIST
29288: LIST
29289: LIST
29290: LIST
29291: LIST
29292: LIST
29293: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
29294: LD_ADDR_VAR 0 42
29298: PUSH
29299: LD_INT 0
29301: PUSH
29302: LD_INT 0
29304: PUSH
29305: EMPTY
29306: LIST
29307: LIST
29308: PUSH
29309: LD_INT 0
29311: PUSH
29312: LD_INT 1
29314: NEG
29315: PUSH
29316: EMPTY
29317: LIST
29318: LIST
29319: PUSH
29320: LD_INT 1
29322: PUSH
29323: LD_INT 0
29325: PUSH
29326: EMPTY
29327: LIST
29328: LIST
29329: PUSH
29330: LD_INT 1
29332: PUSH
29333: LD_INT 1
29335: PUSH
29336: EMPTY
29337: LIST
29338: LIST
29339: PUSH
29340: LD_INT 0
29342: PUSH
29343: LD_INT 1
29345: PUSH
29346: EMPTY
29347: LIST
29348: LIST
29349: PUSH
29350: LD_INT 1
29352: NEG
29353: PUSH
29354: LD_INT 0
29356: PUSH
29357: EMPTY
29358: LIST
29359: LIST
29360: PUSH
29361: LD_INT 1
29363: NEG
29364: PUSH
29365: LD_INT 1
29367: NEG
29368: PUSH
29369: EMPTY
29370: LIST
29371: LIST
29372: PUSH
29373: LD_INT 1
29375: NEG
29376: PUSH
29377: LD_INT 2
29379: NEG
29380: PUSH
29381: EMPTY
29382: LIST
29383: LIST
29384: PUSH
29385: LD_INT 0
29387: PUSH
29388: LD_INT 2
29390: NEG
29391: PUSH
29392: EMPTY
29393: LIST
29394: LIST
29395: PUSH
29396: LD_INT 1
29398: PUSH
29399: LD_INT 1
29401: NEG
29402: PUSH
29403: EMPTY
29404: LIST
29405: LIST
29406: PUSH
29407: LD_INT 2
29409: PUSH
29410: LD_INT 1
29412: PUSH
29413: EMPTY
29414: LIST
29415: LIST
29416: PUSH
29417: LD_INT 2
29419: PUSH
29420: LD_INT 2
29422: PUSH
29423: EMPTY
29424: LIST
29425: LIST
29426: PUSH
29427: LD_INT 1
29429: PUSH
29430: LD_INT 2
29432: PUSH
29433: EMPTY
29434: LIST
29435: LIST
29436: PUSH
29437: LD_INT 0
29439: PUSH
29440: LD_INT 2
29442: PUSH
29443: EMPTY
29444: LIST
29445: LIST
29446: PUSH
29447: LD_INT 1
29449: NEG
29450: PUSH
29451: LD_INT 1
29453: PUSH
29454: EMPTY
29455: LIST
29456: LIST
29457: PUSH
29458: LD_INT 2
29460: NEG
29461: PUSH
29462: LD_INT 1
29464: NEG
29465: PUSH
29466: EMPTY
29467: LIST
29468: LIST
29469: PUSH
29470: LD_INT 2
29472: NEG
29473: PUSH
29474: LD_INT 2
29476: NEG
29477: PUSH
29478: EMPTY
29479: LIST
29480: LIST
29481: PUSH
29482: LD_INT 2
29484: NEG
29485: PUSH
29486: LD_INT 3
29488: NEG
29489: PUSH
29490: EMPTY
29491: LIST
29492: LIST
29493: PUSH
29494: LD_INT 1
29496: NEG
29497: PUSH
29498: LD_INT 3
29500: NEG
29501: PUSH
29502: EMPTY
29503: LIST
29504: LIST
29505: PUSH
29506: LD_INT 0
29508: PUSH
29509: LD_INT 3
29511: NEG
29512: PUSH
29513: EMPTY
29514: LIST
29515: LIST
29516: PUSH
29517: LD_INT 1
29519: PUSH
29520: LD_INT 2
29522: NEG
29523: PUSH
29524: EMPTY
29525: LIST
29526: LIST
29527: PUSH
29528: LD_INT 3
29530: PUSH
29531: LD_INT 2
29533: PUSH
29534: EMPTY
29535: LIST
29536: LIST
29537: PUSH
29538: LD_INT 3
29540: PUSH
29541: LD_INT 3
29543: PUSH
29544: EMPTY
29545: LIST
29546: LIST
29547: PUSH
29548: LD_INT 2
29550: PUSH
29551: LD_INT 3
29553: PUSH
29554: EMPTY
29555: LIST
29556: LIST
29557: PUSH
29558: LD_INT 1
29560: PUSH
29561: LD_INT 3
29563: PUSH
29564: EMPTY
29565: LIST
29566: LIST
29567: PUSH
29568: LD_INT 0
29570: PUSH
29571: LD_INT 3
29573: PUSH
29574: EMPTY
29575: LIST
29576: LIST
29577: PUSH
29578: LD_INT 1
29580: NEG
29581: PUSH
29582: LD_INT 2
29584: PUSH
29585: EMPTY
29586: LIST
29587: LIST
29588: PUSH
29589: LD_INT 3
29591: NEG
29592: PUSH
29593: LD_INT 2
29595: NEG
29596: PUSH
29597: EMPTY
29598: LIST
29599: LIST
29600: PUSH
29601: LD_INT 3
29603: NEG
29604: PUSH
29605: LD_INT 3
29607: NEG
29608: PUSH
29609: EMPTY
29610: LIST
29611: LIST
29612: PUSH
29613: EMPTY
29614: LIST
29615: LIST
29616: LIST
29617: LIST
29618: LIST
29619: LIST
29620: LIST
29621: LIST
29622: LIST
29623: LIST
29624: LIST
29625: LIST
29626: LIST
29627: LIST
29628: LIST
29629: LIST
29630: LIST
29631: LIST
29632: LIST
29633: LIST
29634: LIST
29635: LIST
29636: LIST
29637: LIST
29638: LIST
29639: LIST
29640: LIST
29641: LIST
29642: LIST
29643: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
29644: LD_ADDR_VAR 0 43
29648: PUSH
29649: LD_INT 0
29651: PUSH
29652: LD_INT 0
29654: PUSH
29655: EMPTY
29656: LIST
29657: LIST
29658: PUSH
29659: LD_INT 0
29661: PUSH
29662: LD_INT 1
29664: NEG
29665: PUSH
29666: EMPTY
29667: LIST
29668: LIST
29669: PUSH
29670: LD_INT 1
29672: PUSH
29673: LD_INT 0
29675: PUSH
29676: EMPTY
29677: LIST
29678: LIST
29679: PUSH
29680: LD_INT 1
29682: PUSH
29683: LD_INT 1
29685: PUSH
29686: EMPTY
29687: LIST
29688: LIST
29689: PUSH
29690: LD_INT 0
29692: PUSH
29693: LD_INT 1
29695: PUSH
29696: EMPTY
29697: LIST
29698: LIST
29699: PUSH
29700: LD_INT 1
29702: NEG
29703: PUSH
29704: LD_INT 0
29706: PUSH
29707: EMPTY
29708: LIST
29709: LIST
29710: PUSH
29711: LD_INT 1
29713: NEG
29714: PUSH
29715: LD_INT 1
29717: NEG
29718: PUSH
29719: EMPTY
29720: LIST
29721: LIST
29722: PUSH
29723: LD_INT 1
29725: NEG
29726: PUSH
29727: LD_INT 2
29729: NEG
29730: PUSH
29731: EMPTY
29732: LIST
29733: LIST
29734: PUSH
29735: LD_INT 0
29737: PUSH
29738: LD_INT 2
29740: NEG
29741: PUSH
29742: EMPTY
29743: LIST
29744: LIST
29745: PUSH
29746: LD_INT 1
29748: PUSH
29749: LD_INT 1
29751: NEG
29752: PUSH
29753: EMPTY
29754: LIST
29755: LIST
29756: PUSH
29757: LD_INT 2
29759: PUSH
29760: LD_INT 0
29762: PUSH
29763: EMPTY
29764: LIST
29765: LIST
29766: PUSH
29767: LD_INT 2
29769: PUSH
29770: LD_INT 1
29772: PUSH
29773: EMPTY
29774: LIST
29775: LIST
29776: PUSH
29777: LD_INT 1
29779: PUSH
29780: LD_INT 2
29782: PUSH
29783: EMPTY
29784: LIST
29785: LIST
29786: PUSH
29787: LD_INT 0
29789: PUSH
29790: LD_INT 2
29792: PUSH
29793: EMPTY
29794: LIST
29795: LIST
29796: PUSH
29797: LD_INT 1
29799: NEG
29800: PUSH
29801: LD_INT 1
29803: PUSH
29804: EMPTY
29805: LIST
29806: LIST
29807: PUSH
29808: LD_INT 2
29810: NEG
29811: PUSH
29812: LD_INT 0
29814: PUSH
29815: EMPTY
29816: LIST
29817: LIST
29818: PUSH
29819: LD_INT 2
29821: NEG
29822: PUSH
29823: LD_INT 1
29825: NEG
29826: PUSH
29827: EMPTY
29828: LIST
29829: LIST
29830: PUSH
29831: LD_INT 1
29833: NEG
29834: PUSH
29835: LD_INT 3
29837: NEG
29838: PUSH
29839: EMPTY
29840: LIST
29841: LIST
29842: PUSH
29843: LD_INT 0
29845: PUSH
29846: LD_INT 3
29848: NEG
29849: PUSH
29850: EMPTY
29851: LIST
29852: LIST
29853: PUSH
29854: LD_INT 1
29856: PUSH
29857: LD_INT 2
29859: NEG
29860: PUSH
29861: EMPTY
29862: LIST
29863: LIST
29864: PUSH
29865: LD_INT 2
29867: PUSH
29868: LD_INT 1
29870: NEG
29871: PUSH
29872: EMPTY
29873: LIST
29874: LIST
29875: PUSH
29876: LD_INT 3
29878: PUSH
29879: LD_INT 0
29881: PUSH
29882: EMPTY
29883: LIST
29884: LIST
29885: PUSH
29886: LD_INT 3
29888: PUSH
29889: LD_INT 1
29891: PUSH
29892: EMPTY
29893: LIST
29894: LIST
29895: PUSH
29896: LD_INT 1
29898: PUSH
29899: LD_INT 3
29901: PUSH
29902: EMPTY
29903: LIST
29904: LIST
29905: PUSH
29906: LD_INT 0
29908: PUSH
29909: LD_INT 3
29911: PUSH
29912: EMPTY
29913: LIST
29914: LIST
29915: PUSH
29916: LD_INT 1
29918: NEG
29919: PUSH
29920: LD_INT 2
29922: PUSH
29923: EMPTY
29924: LIST
29925: LIST
29926: PUSH
29927: LD_INT 2
29929: NEG
29930: PUSH
29931: LD_INT 1
29933: PUSH
29934: EMPTY
29935: LIST
29936: LIST
29937: PUSH
29938: LD_INT 3
29940: NEG
29941: PUSH
29942: LD_INT 0
29944: PUSH
29945: EMPTY
29946: LIST
29947: LIST
29948: PUSH
29949: LD_INT 3
29951: NEG
29952: PUSH
29953: LD_INT 1
29955: NEG
29956: PUSH
29957: EMPTY
29958: LIST
29959: LIST
29960: PUSH
29961: EMPTY
29962: LIST
29963: LIST
29964: LIST
29965: LIST
29966: LIST
29967: LIST
29968: LIST
29969: LIST
29970: LIST
29971: LIST
29972: LIST
29973: LIST
29974: LIST
29975: LIST
29976: LIST
29977: LIST
29978: LIST
29979: LIST
29980: LIST
29981: LIST
29982: LIST
29983: LIST
29984: LIST
29985: LIST
29986: LIST
29987: LIST
29988: LIST
29989: LIST
29990: LIST
29991: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
29992: LD_ADDR_VAR 0 44
29996: PUSH
29997: LD_INT 0
29999: PUSH
30000: LD_INT 0
30002: PUSH
30003: EMPTY
30004: LIST
30005: LIST
30006: PUSH
30007: LD_INT 0
30009: PUSH
30010: LD_INT 1
30012: NEG
30013: PUSH
30014: EMPTY
30015: LIST
30016: LIST
30017: PUSH
30018: LD_INT 1
30020: PUSH
30021: LD_INT 0
30023: PUSH
30024: EMPTY
30025: LIST
30026: LIST
30027: PUSH
30028: LD_INT 1
30030: PUSH
30031: LD_INT 1
30033: PUSH
30034: EMPTY
30035: LIST
30036: LIST
30037: PUSH
30038: LD_INT 0
30040: PUSH
30041: LD_INT 1
30043: PUSH
30044: EMPTY
30045: LIST
30046: LIST
30047: PUSH
30048: LD_INT 1
30050: NEG
30051: PUSH
30052: LD_INT 0
30054: PUSH
30055: EMPTY
30056: LIST
30057: LIST
30058: PUSH
30059: LD_INT 1
30061: NEG
30062: PUSH
30063: LD_INT 1
30065: NEG
30066: PUSH
30067: EMPTY
30068: LIST
30069: LIST
30070: PUSH
30071: LD_INT 1
30073: NEG
30074: PUSH
30075: LD_INT 2
30077: NEG
30078: PUSH
30079: EMPTY
30080: LIST
30081: LIST
30082: PUSH
30083: LD_INT 1
30085: PUSH
30086: LD_INT 1
30088: NEG
30089: PUSH
30090: EMPTY
30091: LIST
30092: LIST
30093: PUSH
30094: LD_INT 2
30096: PUSH
30097: LD_INT 0
30099: PUSH
30100: EMPTY
30101: LIST
30102: LIST
30103: PUSH
30104: LD_INT 2
30106: PUSH
30107: LD_INT 1
30109: PUSH
30110: EMPTY
30111: LIST
30112: LIST
30113: PUSH
30114: LD_INT 2
30116: PUSH
30117: LD_INT 2
30119: PUSH
30120: EMPTY
30121: LIST
30122: LIST
30123: PUSH
30124: LD_INT 1
30126: PUSH
30127: LD_INT 2
30129: PUSH
30130: EMPTY
30131: LIST
30132: LIST
30133: PUSH
30134: LD_INT 1
30136: NEG
30137: PUSH
30138: LD_INT 1
30140: PUSH
30141: EMPTY
30142: LIST
30143: LIST
30144: PUSH
30145: LD_INT 2
30147: NEG
30148: PUSH
30149: LD_INT 0
30151: PUSH
30152: EMPTY
30153: LIST
30154: LIST
30155: PUSH
30156: LD_INT 2
30158: NEG
30159: PUSH
30160: LD_INT 1
30162: NEG
30163: PUSH
30164: EMPTY
30165: LIST
30166: LIST
30167: PUSH
30168: LD_INT 2
30170: NEG
30171: PUSH
30172: LD_INT 2
30174: NEG
30175: PUSH
30176: EMPTY
30177: LIST
30178: LIST
30179: PUSH
30180: LD_INT 2
30182: NEG
30183: PUSH
30184: LD_INT 3
30186: NEG
30187: PUSH
30188: EMPTY
30189: LIST
30190: LIST
30191: PUSH
30192: LD_INT 2
30194: PUSH
30195: LD_INT 1
30197: NEG
30198: PUSH
30199: EMPTY
30200: LIST
30201: LIST
30202: PUSH
30203: LD_INT 3
30205: PUSH
30206: LD_INT 0
30208: PUSH
30209: EMPTY
30210: LIST
30211: LIST
30212: PUSH
30213: LD_INT 3
30215: PUSH
30216: LD_INT 1
30218: PUSH
30219: EMPTY
30220: LIST
30221: LIST
30222: PUSH
30223: LD_INT 3
30225: PUSH
30226: LD_INT 2
30228: PUSH
30229: EMPTY
30230: LIST
30231: LIST
30232: PUSH
30233: LD_INT 3
30235: PUSH
30236: LD_INT 3
30238: PUSH
30239: EMPTY
30240: LIST
30241: LIST
30242: PUSH
30243: LD_INT 2
30245: PUSH
30246: LD_INT 3
30248: PUSH
30249: EMPTY
30250: LIST
30251: LIST
30252: PUSH
30253: LD_INT 2
30255: NEG
30256: PUSH
30257: LD_INT 1
30259: PUSH
30260: EMPTY
30261: LIST
30262: LIST
30263: PUSH
30264: LD_INT 3
30266: NEG
30267: PUSH
30268: LD_INT 0
30270: PUSH
30271: EMPTY
30272: LIST
30273: LIST
30274: PUSH
30275: LD_INT 3
30277: NEG
30278: PUSH
30279: LD_INT 1
30281: NEG
30282: PUSH
30283: EMPTY
30284: LIST
30285: LIST
30286: PUSH
30287: LD_INT 3
30289: NEG
30290: PUSH
30291: LD_INT 2
30293: NEG
30294: PUSH
30295: EMPTY
30296: LIST
30297: LIST
30298: PUSH
30299: LD_INT 3
30301: NEG
30302: PUSH
30303: LD_INT 3
30305: NEG
30306: PUSH
30307: EMPTY
30308: LIST
30309: LIST
30310: PUSH
30311: EMPTY
30312: LIST
30313: LIST
30314: LIST
30315: LIST
30316: LIST
30317: LIST
30318: LIST
30319: LIST
30320: LIST
30321: LIST
30322: LIST
30323: LIST
30324: LIST
30325: LIST
30326: LIST
30327: LIST
30328: LIST
30329: LIST
30330: LIST
30331: LIST
30332: LIST
30333: LIST
30334: LIST
30335: LIST
30336: LIST
30337: LIST
30338: LIST
30339: LIST
30340: LIST
30341: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
30342: LD_ADDR_VAR 0 45
30346: PUSH
30347: LD_INT 0
30349: PUSH
30350: LD_INT 0
30352: PUSH
30353: EMPTY
30354: LIST
30355: LIST
30356: PUSH
30357: LD_INT 0
30359: PUSH
30360: LD_INT 1
30362: NEG
30363: PUSH
30364: EMPTY
30365: LIST
30366: LIST
30367: PUSH
30368: LD_INT 1
30370: PUSH
30371: LD_INT 0
30373: PUSH
30374: EMPTY
30375: LIST
30376: LIST
30377: PUSH
30378: LD_INT 1
30380: PUSH
30381: LD_INT 1
30383: PUSH
30384: EMPTY
30385: LIST
30386: LIST
30387: PUSH
30388: LD_INT 0
30390: PUSH
30391: LD_INT 1
30393: PUSH
30394: EMPTY
30395: LIST
30396: LIST
30397: PUSH
30398: LD_INT 1
30400: NEG
30401: PUSH
30402: LD_INT 0
30404: PUSH
30405: EMPTY
30406: LIST
30407: LIST
30408: PUSH
30409: LD_INT 1
30411: NEG
30412: PUSH
30413: LD_INT 1
30415: NEG
30416: PUSH
30417: EMPTY
30418: LIST
30419: LIST
30420: PUSH
30421: LD_INT 1
30423: NEG
30424: PUSH
30425: LD_INT 2
30427: NEG
30428: PUSH
30429: EMPTY
30430: LIST
30431: LIST
30432: PUSH
30433: LD_INT 0
30435: PUSH
30436: LD_INT 2
30438: NEG
30439: PUSH
30440: EMPTY
30441: LIST
30442: LIST
30443: PUSH
30444: LD_INT 1
30446: PUSH
30447: LD_INT 1
30449: NEG
30450: PUSH
30451: EMPTY
30452: LIST
30453: LIST
30454: PUSH
30455: LD_INT 2
30457: PUSH
30458: LD_INT 1
30460: PUSH
30461: EMPTY
30462: LIST
30463: LIST
30464: PUSH
30465: LD_INT 2
30467: PUSH
30468: LD_INT 2
30470: PUSH
30471: EMPTY
30472: LIST
30473: LIST
30474: PUSH
30475: LD_INT 1
30477: PUSH
30478: LD_INT 2
30480: PUSH
30481: EMPTY
30482: LIST
30483: LIST
30484: PUSH
30485: LD_INT 0
30487: PUSH
30488: LD_INT 2
30490: PUSH
30491: EMPTY
30492: LIST
30493: LIST
30494: PUSH
30495: LD_INT 1
30497: NEG
30498: PUSH
30499: LD_INT 1
30501: PUSH
30502: EMPTY
30503: LIST
30504: LIST
30505: PUSH
30506: LD_INT 2
30508: NEG
30509: PUSH
30510: LD_INT 1
30512: NEG
30513: PUSH
30514: EMPTY
30515: LIST
30516: LIST
30517: PUSH
30518: LD_INT 2
30520: NEG
30521: PUSH
30522: LD_INT 2
30524: NEG
30525: PUSH
30526: EMPTY
30527: LIST
30528: LIST
30529: PUSH
30530: LD_INT 2
30532: NEG
30533: PUSH
30534: LD_INT 3
30536: NEG
30537: PUSH
30538: EMPTY
30539: LIST
30540: LIST
30541: PUSH
30542: LD_INT 1
30544: NEG
30545: PUSH
30546: LD_INT 3
30548: NEG
30549: PUSH
30550: EMPTY
30551: LIST
30552: LIST
30553: PUSH
30554: LD_INT 0
30556: PUSH
30557: LD_INT 3
30559: NEG
30560: PUSH
30561: EMPTY
30562: LIST
30563: LIST
30564: PUSH
30565: LD_INT 1
30567: PUSH
30568: LD_INT 2
30570: NEG
30571: PUSH
30572: EMPTY
30573: LIST
30574: LIST
30575: PUSH
30576: LD_INT 3
30578: PUSH
30579: LD_INT 2
30581: PUSH
30582: EMPTY
30583: LIST
30584: LIST
30585: PUSH
30586: LD_INT 3
30588: PUSH
30589: LD_INT 3
30591: PUSH
30592: EMPTY
30593: LIST
30594: LIST
30595: PUSH
30596: LD_INT 2
30598: PUSH
30599: LD_INT 3
30601: PUSH
30602: EMPTY
30603: LIST
30604: LIST
30605: PUSH
30606: LD_INT 1
30608: PUSH
30609: LD_INT 3
30611: PUSH
30612: EMPTY
30613: LIST
30614: LIST
30615: PUSH
30616: LD_INT 0
30618: PUSH
30619: LD_INT 3
30621: PUSH
30622: EMPTY
30623: LIST
30624: LIST
30625: PUSH
30626: LD_INT 1
30628: NEG
30629: PUSH
30630: LD_INT 2
30632: PUSH
30633: EMPTY
30634: LIST
30635: LIST
30636: PUSH
30637: LD_INT 3
30639: NEG
30640: PUSH
30641: LD_INT 2
30643: NEG
30644: PUSH
30645: EMPTY
30646: LIST
30647: LIST
30648: PUSH
30649: LD_INT 3
30651: NEG
30652: PUSH
30653: LD_INT 3
30655: NEG
30656: PUSH
30657: EMPTY
30658: LIST
30659: LIST
30660: PUSH
30661: EMPTY
30662: LIST
30663: LIST
30664: LIST
30665: LIST
30666: LIST
30667: LIST
30668: LIST
30669: LIST
30670: LIST
30671: LIST
30672: LIST
30673: LIST
30674: LIST
30675: LIST
30676: LIST
30677: LIST
30678: LIST
30679: LIST
30680: LIST
30681: LIST
30682: LIST
30683: LIST
30684: LIST
30685: LIST
30686: LIST
30687: LIST
30688: LIST
30689: LIST
30690: LIST
30691: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
30692: LD_ADDR_VAR 0 46
30696: PUSH
30697: LD_INT 0
30699: PUSH
30700: LD_INT 0
30702: PUSH
30703: EMPTY
30704: LIST
30705: LIST
30706: PUSH
30707: LD_INT 0
30709: PUSH
30710: LD_INT 1
30712: NEG
30713: PUSH
30714: EMPTY
30715: LIST
30716: LIST
30717: PUSH
30718: LD_INT 1
30720: PUSH
30721: LD_INT 0
30723: PUSH
30724: EMPTY
30725: LIST
30726: LIST
30727: PUSH
30728: LD_INT 1
30730: PUSH
30731: LD_INT 1
30733: PUSH
30734: EMPTY
30735: LIST
30736: LIST
30737: PUSH
30738: LD_INT 0
30740: PUSH
30741: LD_INT 1
30743: PUSH
30744: EMPTY
30745: LIST
30746: LIST
30747: PUSH
30748: LD_INT 1
30750: NEG
30751: PUSH
30752: LD_INT 0
30754: PUSH
30755: EMPTY
30756: LIST
30757: LIST
30758: PUSH
30759: LD_INT 1
30761: NEG
30762: PUSH
30763: LD_INT 1
30765: NEG
30766: PUSH
30767: EMPTY
30768: LIST
30769: LIST
30770: PUSH
30771: LD_INT 1
30773: NEG
30774: PUSH
30775: LD_INT 2
30777: NEG
30778: PUSH
30779: EMPTY
30780: LIST
30781: LIST
30782: PUSH
30783: LD_INT 0
30785: PUSH
30786: LD_INT 2
30788: NEG
30789: PUSH
30790: EMPTY
30791: LIST
30792: LIST
30793: PUSH
30794: LD_INT 1
30796: PUSH
30797: LD_INT 1
30799: NEG
30800: PUSH
30801: EMPTY
30802: LIST
30803: LIST
30804: PUSH
30805: LD_INT 2
30807: PUSH
30808: LD_INT 0
30810: PUSH
30811: EMPTY
30812: LIST
30813: LIST
30814: PUSH
30815: LD_INT 2
30817: PUSH
30818: LD_INT 1
30820: PUSH
30821: EMPTY
30822: LIST
30823: LIST
30824: PUSH
30825: LD_INT 1
30827: PUSH
30828: LD_INT 2
30830: PUSH
30831: EMPTY
30832: LIST
30833: LIST
30834: PUSH
30835: LD_INT 0
30837: PUSH
30838: LD_INT 2
30840: PUSH
30841: EMPTY
30842: LIST
30843: LIST
30844: PUSH
30845: LD_INT 1
30847: NEG
30848: PUSH
30849: LD_INT 1
30851: PUSH
30852: EMPTY
30853: LIST
30854: LIST
30855: PUSH
30856: LD_INT 2
30858: NEG
30859: PUSH
30860: LD_INT 0
30862: PUSH
30863: EMPTY
30864: LIST
30865: LIST
30866: PUSH
30867: LD_INT 2
30869: NEG
30870: PUSH
30871: LD_INT 1
30873: NEG
30874: PUSH
30875: EMPTY
30876: LIST
30877: LIST
30878: PUSH
30879: LD_INT 1
30881: NEG
30882: PUSH
30883: LD_INT 3
30885: NEG
30886: PUSH
30887: EMPTY
30888: LIST
30889: LIST
30890: PUSH
30891: LD_INT 0
30893: PUSH
30894: LD_INT 3
30896: NEG
30897: PUSH
30898: EMPTY
30899: LIST
30900: LIST
30901: PUSH
30902: LD_INT 1
30904: PUSH
30905: LD_INT 2
30907: NEG
30908: PUSH
30909: EMPTY
30910: LIST
30911: LIST
30912: PUSH
30913: LD_INT 2
30915: PUSH
30916: LD_INT 1
30918: NEG
30919: PUSH
30920: EMPTY
30921: LIST
30922: LIST
30923: PUSH
30924: LD_INT 3
30926: PUSH
30927: LD_INT 0
30929: PUSH
30930: EMPTY
30931: LIST
30932: LIST
30933: PUSH
30934: LD_INT 3
30936: PUSH
30937: LD_INT 1
30939: PUSH
30940: EMPTY
30941: LIST
30942: LIST
30943: PUSH
30944: LD_INT 1
30946: PUSH
30947: LD_INT 3
30949: PUSH
30950: EMPTY
30951: LIST
30952: LIST
30953: PUSH
30954: LD_INT 0
30956: PUSH
30957: LD_INT 3
30959: PUSH
30960: EMPTY
30961: LIST
30962: LIST
30963: PUSH
30964: LD_INT 1
30966: NEG
30967: PUSH
30968: LD_INT 2
30970: PUSH
30971: EMPTY
30972: LIST
30973: LIST
30974: PUSH
30975: LD_INT 2
30977: NEG
30978: PUSH
30979: LD_INT 1
30981: PUSH
30982: EMPTY
30983: LIST
30984: LIST
30985: PUSH
30986: LD_INT 3
30988: NEG
30989: PUSH
30990: LD_INT 0
30992: PUSH
30993: EMPTY
30994: LIST
30995: LIST
30996: PUSH
30997: LD_INT 3
30999: NEG
31000: PUSH
31001: LD_INT 1
31003: NEG
31004: PUSH
31005: EMPTY
31006: LIST
31007: LIST
31008: PUSH
31009: EMPTY
31010: LIST
31011: LIST
31012: LIST
31013: LIST
31014: LIST
31015: LIST
31016: LIST
31017: LIST
31018: LIST
31019: LIST
31020: LIST
31021: LIST
31022: LIST
31023: LIST
31024: LIST
31025: LIST
31026: LIST
31027: LIST
31028: LIST
31029: LIST
31030: LIST
31031: LIST
31032: LIST
31033: LIST
31034: LIST
31035: LIST
31036: LIST
31037: LIST
31038: LIST
31039: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31040: LD_ADDR_VAR 0 47
31044: PUSH
31045: LD_INT 0
31047: PUSH
31048: LD_INT 0
31050: PUSH
31051: EMPTY
31052: LIST
31053: LIST
31054: PUSH
31055: LD_INT 0
31057: PUSH
31058: LD_INT 1
31060: NEG
31061: PUSH
31062: EMPTY
31063: LIST
31064: LIST
31065: PUSH
31066: LD_INT 1
31068: PUSH
31069: LD_INT 0
31071: PUSH
31072: EMPTY
31073: LIST
31074: LIST
31075: PUSH
31076: LD_INT 1
31078: PUSH
31079: LD_INT 1
31081: PUSH
31082: EMPTY
31083: LIST
31084: LIST
31085: PUSH
31086: LD_INT 0
31088: PUSH
31089: LD_INT 1
31091: PUSH
31092: EMPTY
31093: LIST
31094: LIST
31095: PUSH
31096: LD_INT 1
31098: NEG
31099: PUSH
31100: LD_INT 0
31102: PUSH
31103: EMPTY
31104: LIST
31105: LIST
31106: PUSH
31107: LD_INT 1
31109: NEG
31110: PUSH
31111: LD_INT 1
31113: NEG
31114: PUSH
31115: EMPTY
31116: LIST
31117: LIST
31118: PUSH
31119: LD_INT 1
31121: NEG
31122: PUSH
31123: LD_INT 2
31125: NEG
31126: PUSH
31127: EMPTY
31128: LIST
31129: LIST
31130: PUSH
31131: LD_INT 0
31133: PUSH
31134: LD_INT 2
31136: NEG
31137: PUSH
31138: EMPTY
31139: LIST
31140: LIST
31141: PUSH
31142: LD_INT 1
31144: PUSH
31145: LD_INT 1
31147: NEG
31148: PUSH
31149: EMPTY
31150: LIST
31151: LIST
31152: PUSH
31153: LD_INT 2
31155: NEG
31156: PUSH
31157: LD_INT 1
31159: NEG
31160: PUSH
31161: EMPTY
31162: LIST
31163: LIST
31164: PUSH
31165: LD_INT 2
31167: NEG
31168: PUSH
31169: LD_INT 2
31171: NEG
31172: PUSH
31173: EMPTY
31174: LIST
31175: LIST
31176: PUSH
31177: EMPTY
31178: LIST
31179: LIST
31180: LIST
31181: LIST
31182: LIST
31183: LIST
31184: LIST
31185: LIST
31186: LIST
31187: LIST
31188: LIST
31189: LIST
31190: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
31191: LD_ADDR_VAR 0 48
31195: PUSH
31196: LD_INT 0
31198: PUSH
31199: LD_INT 0
31201: PUSH
31202: EMPTY
31203: LIST
31204: LIST
31205: PUSH
31206: LD_INT 0
31208: PUSH
31209: LD_INT 1
31211: NEG
31212: PUSH
31213: EMPTY
31214: LIST
31215: LIST
31216: PUSH
31217: LD_INT 1
31219: PUSH
31220: LD_INT 0
31222: PUSH
31223: EMPTY
31224: LIST
31225: LIST
31226: PUSH
31227: LD_INT 1
31229: PUSH
31230: LD_INT 1
31232: PUSH
31233: EMPTY
31234: LIST
31235: LIST
31236: PUSH
31237: LD_INT 0
31239: PUSH
31240: LD_INT 1
31242: PUSH
31243: EMPTY
31244: LIST
31245: LIST
31246: PUSH
31247: LD_INT 1
31249: NEG
31250: PUSH
31251: LD_INT 0
31253: PUSH
31254: EMPTY
31255: LIST
31256: LIST
31257: PUSH
31258: LD_INT 1
31260: NEG
31261: PUSH
31262: LD_INT 1
31264: NEG
31265: PUSH
31266: EMPTY
31267: LIST
31268: LIST
31269: PUSH
31270: LD_INT 1
31272: NEG
31273: PUSH
31274: LD_INT 2
31276: NEG
31277: PUSH
31278: EMPTY
31279: LIST
31280: LIST
31281: PUSH
31282: LD_INT 0
31284: PUSH
31285: LD_INT 2
31287: NEG
31288: PUSH
31289: EMPTY
31290: LIST
31291: LIST
31292: PUSH
31293: LD_INT 1
31295: PUSH
31296: LD_INT 1
31298: NEG
31299: PUSH
31300: EMPTY
31301: LIST
31302: LIST
31303: PUSH
31304: LD_INT 2
31306: PUSH
31307: LD_INT 0
31309: PUSH
31310: EMPTY
31311: LIST
31312: LIST
31313: PUSH
31314: LD_INT 2
31316: PUSH
31317: LD_INT 1
31319: PUSH
31320: EMPTY
31321: LIST
31322: LIST
31323: PUSH
31324: EMPTY
31325: LIST
31326: LIST
31327: LIST
31328: LIST
31329: LIST
31330: LIST
31331: LIST
31332: LIST
31333: LIST
31334: LIST
31335: LIST
31336: LIST
31337: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
31338: LD_ADDR_VAR 0 49
31342: PUSH
31343: LD_INT 0
31345: PUSH
31346: LD_INT 0
31348: PUSH
31349: EMPTY
31350: LIST
31351: LIST
31352: PUSH
31353: LD_INT 0
31355: PUSH
31356: LD_INT 1
31358: NEG
31359: PUSH
31360: EMPTY
31361: LIST
31362: LIST
31363: PUSH
31364: LD_INT 1
31366: PUSH
31367: LD_INT 0
31369: PUSH
31370: EMPTY
31371: LIST
31372: LIST
31373: PUSH
31374: LD_INT 1
31376: PUSH
31377: LD_INT 1
31379: PUSH
31380: EMPTY
31381: LIST
31382: LIST
31383: PUSH
31384: LD_INT 0
31386: PUSH
31387: LD_INT 1
31389: PUSH
31390: EMPTY
31391: LIST
31392: LIST
31393: PUSH
31394: LD_INT 1
31396: NEG
31397: PUSH
31398: LD_INT 0
31400: PUSH
31401: EMPTY
31402: LIST
31403: LIST
31404: PUSH
31405: LD_INT 1
31407: NEG
31408: PUSH
31409: LD_INT 1
31411: NEG
31412: PUSH
31413: EMPTY
31414: LIST
31415: LIST
31416: PUSH
31417: LD_INT 1
31419: PUSH
31420: LD_INT 1
31422: NEG
31423: PUSH
31424: EMPTY
31425: LIST
31426: LIST
31427: PUSH
31428: LD_INT 2
31430: PUSH
31431: LD_INT 0
31433: PUSH
31434: EMPTY
31435: LIST
31436: LIST
31437: PUSH
31438: LD_INT 2
31440: PUSH
31441: LD_INT 1
31443: PUSH
31444: EMPTY
31445: LIST
31446: LIST
31447: PUSH
31448: LD_INT 2
31450: PUSH
31451: LD_INT 2
31453: PUSH
31454: EMPTY
31455: LIST
31456: LIST
31457: PUSH
31458: LD_INT 1
31460: PUSH
31461: LD_INT 2
31463: PUSH
31464: EMPTY
31465: LIST
31466: LIST
31467: PUSH
31468: EMPTY
31469: LIST
31470: LIST
31471: LIST
31472: LIST
31473: LIST
31474: LIST
31475: LIST
31476: LIST
31477: LIST
31478: LIST
31479: LIST
31480: LIST
31481: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
31482: LD_ADDR_VAR 0 50
31486: PUSH
31487: LD_INT 0
31489: PUSH
31490: LD_INT 0
31492: PUSH
31493: EMPTY
31494: LIST
31495: LIST
31496: PUSH
31497: LD_INT 0
31499: PUSH
31500: LD_INT 1
31502: NEG
31503: PUSH
31504: EMPTY
31505: LIST
31506: LIST
31507: PUSH
31508: LD_INT 1
31510: PUSH
31511: LD_INT 0
31513: PUSH
31514: EMPTY
31515: LIST
31516: LIST
31517: PUSH
31518: LD_INT 1
31520: PUSH
31521: LD_INT 1
31523: PUSH
31524: EMPTY
31525: LIST
31526: LIST
31527: PUSH
31528: LD_INT 0
31530: PUSH
31531: LD_INT 1
31533: PUSH
31534: EMPTY
31535: LIST
31536: LIST
31537: PUSH
31538: LD_INT 1
31540: NEG
31541: PUSH
31542: LD_INT 0
31544: PUSH
31545: EMPTY
31546: LIST
31547: LIST
31548: PUSH
31549: LD_INT 1
31551: NEG
31552: PUSH
31553: LD_INT 1
31555: NEG
31556: PUSH
31557: EMPTY
31558: LIST
31559: LIST
31560: PUSH
31561: LD_INT 2
31563: PUSH
31564: LD_INT 1
31566: PUSH
31567: EMPTY
31568: LIST
31569: LIST
31570: PUSH
31571: LD_INT 2
31573: PUSH
31574: LD_INT 2
31576: PUSH
31577: EMPTY
31578: LIST
31579: LIST
31580: PUSH
31581: LD_INT 1
31583: PUSH
31584: LD_INT 2
31586: PUSH
31587: EMPTY
31588: LIST
31589: LIST
31590: PUSH
31591: LD_INT 0
31593: PUSH
31594: LD_INT 2
31596: PUSH
31597: EMPTY
31598: LIST
31599: LIST
31600: PUSH
31601: LD_INT 1
31603: NEG
31604: PUSH
31605: LD_INT 1
31607: PUSH
31608: EMPTY
31609: LIST
31610: LIST
31611: PUSH
31612: EMPTY
31613: LIST
31614: LIST
31615: LIST
31616: LIST
31617: LIST
31618: LIST
31619: LIST
31620: LIST
31621: LIST
31622: LIST
31623: LIST
31624: LIST
31625: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
31626: LD_ADDR_VAR 0 51
31630: PUSH
31631: LD_INT 0
31633: PUSH
31634: LD_INT 0
31636: PUSH
31637: EMPTY
31638: LIST
31639: LIST
31640: PUSH
31641: LD_INT 0
31643: PUSH
31644: LD_INT 1
31646: NEG
31647: PUSH
31648: EMPTY
31649: LIST
31650: LIST
31651: PUSH
31652: LD_INT 1
31654: PUSH
31655: LD_INT 0
31657: PUSH
31658: EMPTY
31659: LIST
31660: LIST
31661: PUSH
31662: LD_INT 1
31664: PUSH
31665: LD_INT 1
31667: PUSH
31668: EMPTY
31669: LIST
31670: LIST
31671: PUSH
31672: LD_INT 0
31674: PUSH
31675: LD_INT 1
31677: PUSH
31678: EMPTY
31679: LIST
31680: LIST
31681: PUSH
31682: LD_INT 1
31684: NEG
31685: PUSH
31686: LD_INT 0
31688: PUSH
31689: EMPTY
31690: LIST
31691: LIST
31692: PUSH
31693: LD_INT 1
31695: NEG
31696: PUSH
31697: LD_INT 1
31699: NEG
31700: PUSH
31701: EMPTY
31702: LIST
31703: LIST
31704: PUSH
31705: LD_INT 1
31707: PUSH
31708: LD_INT 2
31710: PUSH
31711: EMPTY
31712: LIST
31713: LIST
31714: PUSH
31715: LD_INT 0
31717: PUSH
31718: LD_INT 2
31720: PUSH
31721: EMPTY
31722: LIST
31723: LIST
31724: PUSH
31725: LD_INT 1
31727: NEG
31728: PUSH
31729: LD_INT 1
31731: PUSH
31732: EMPTY
31733: LIST
31734: LIST
31735: PUSH
31736: LD_INT 2
31738: NEG
31739: PUSH
31740: LD_INT 0
31742: PUSH
31743: EMPTY
31744: LIST
31745: LIST
31746: PUSH
31747: LD_INT 2
31749: NEG
31750: PUSH
31751: LD_INT 1
31753: NEG
31754: PUSH
31755: EMPTY
31756: LIST
31757: LIST
31758: PUSH
31759: EMPTY
31760: LIST
31761: LIST
31762: LIST
31763: LIST
31764: LIST
31765: LIST
31766: LIST
31767: LIST
31768: LIST
31769: LIST
31770: LIST
31771: LIST
31772: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31773: LD_ADDR_VAR 0 52
31777: PUSH
31778: LD_INT 0
31780: PUSH
31781: LD_INT 0
31783: PUSH
31784: EMPTY
31785: LIST
31786: LIST
31787: PUSH
31788: LD_INT 0
31790: PUSH
31791: LD_INT 1
31793: NEG
31794: PUSH
31795: EMPTY
31796: LIST
31797: LIST
31798: PUSH
31799: LD_INT 1
31801: PUSH
31802: LD_INT 0
31804: PUSH
31805: EMPTY
31806: LIST
31807: LIST
31808: PUSH
31809: LD_INT 1
31811: PUSH
31812: LD_INT 1
31814: PUSH
31815: EMPTY
31816: LIST
31817: LIST
31818: PUSH
31819: LD_INT 0
31821: PUSH
31822: LD_INT 1
31824: PUSH
31825: EMPTY
31826: LIST
31827: LIST
31828: PUSH
31829: LD_INT 1
31831: NEG
31832: PUSH
31833: LD_INT 0
31835: PUSH
31836: EMPTY
31837: LIST
31838: LIST
31839: PUSH
31840: LD_INT 1
31842: NEG
31843: PUSH
31844: LD_INT 1
31846: NEG
31847: PUSH
31848: EMPTY
31849: LIST
31850: LIST
31851: PUSH
31852: LD_INT 1
31854: NEG
31855: PUSH
31856: LD_INT 2
31858: NEG
31859: PUSH
31860: EMPTY
31861: LIST
31862: LIST
31863: PUSH
31864: LD_INT 1
31866: NEG
31867: PUSH
31868: LD_INT 1
31870: PUSH
31871: EMPTY
31872: LIST
31873: LIST
31874: PUSH
31875: LD_INT 2
31877: NEG
31878: PUSH
31879: LD_INT 0
31881: PUSH
31882: EMPTY
31883: LIST
31884: LIST
31885: PUSH
31886: LD_INT 2
31888: NEG
31889: PUSH
31890: LD_INT 1
31892: NEG
31893: PUSH
31894: EMPTY
31895: LIST
31896: LIST
31897: PUSH
31898: LD_INT 2
31900: NEG
31901: PUSH
31902: LD_INT 2
31904: NEG
31905: PUSH
31906: EMPTY
31907: LIST
31908: LIST
31909: PUSH
31910: EMPTY
31911: LIST
31912: LIST
31913: LIST
31914: LIST
31915: LIST
31916: LIST
31917: LIST
31918: LIST
31919: LIST
31920: LIST
31921: LIST
31922: LIST
31923: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31924: LD_ADDR_VAR 0 53
31928: PUSH
31929: LD_INT 0
31931: PUSH
31932: LD_INT 0
31934: PUSH
31935: EMPTY
31936: LIST
31937: LIST
31938: PUSH
31939: LD_INT 0
31941: PUSH
31942: LD_INT 1
31944: NEG
31945: PUSH
31946: EMPTY
31947: LIST
31948: LIST
31949: PUSH
31950: LD_INT 1
31952: PUSH
31953: LD_INT 0
31955: PUSH
31956: EMPTY
31957: LIST
31958: LIST
31959: PUSH
31960: LD_INT 1
31962: PUSH
31963: LD_INT 1
31965: PUSH
31966: EMPTY
31967: LIST
31968: LIST
31969: PUSH
31970: LD_INT 0
31972: PUSH
31973: LD_INT 1
31975: PUSH
31976: EMPTY
31977: LIST
31978: LIST
31979: PUSH
31980: LD_INT 1
31982: NEG
31983: PUSH
31984: LD_INT 0
31986: PUSH
31987: EMPTY
31988: LIST
31989: LIST
31990: PUSH
31991: LD_INT 1
31993: NEG
31994: PUSH
31995: LD_INT 1
31997: NEG
31998: PUSH
31999: EMPTY
32000: LIST
32001: LIST
32002: PUSH
32003: LD_INT 1
32005: NEG
32006: PUSH
32007: LD_INT 2
32009: NEG
32010: PUSH
32011: EMPTY
32012: LIST
32013: LIST
32014: PUSH
32015: LD_INT 0
32017: PUSH
32018: LD_INT 2
32020: NEG
32021: PUSH
32022: EMPTY
32023: LIST
32024: LIST
32025: PUSH
32026: LD_INT 1
32028: PUSH
32029: LD_INT 1
32031: NEG
32032: PUSH
32033: EMPTY
32034: LIST
32035: LIST
32036: PUSH
32037: LD_INT 2
32039: PUSH
32040: LD_INT 0
32042: PUSH
32043: EMPTY
32044: LIST
32045: LIST
32046: PUSH
32047: LD_INT 2
32049: PUSH
32050: LD_INT 1
32052: PUSH
32053: EMPTY
32054: LIST
32055: LIST
32056: PUSH
32057: LD_INT 2
32059: PUSH
32060: LD_INT 2
32062: PUSH
32063: EMPTY
32064: LIST
32065: LIST
32066: PUSH
32067: LD_INT 1
32069: PUSH
32070: LD_INT 2
32072: PUSH
32073: EMPTY
32074: LIST
32075: LIST
32076: PUSH
32077: LD_INT 0
32079: PUSH
32080: LD_INT 2
32082: PUSH
32083: EMPTY
32084: LIST
32085: LIST
32086: PUSH
32087: LD_INT 1
32089: NEG
32090: PUSH
32091: LD_INT 1
32093: PUSH
32094: EMPTY
32095: LIST
32096: LIST
32097: PUSH
32098: LD_INT 2
32100: NEG
32101: PUSH
32102: LD_INT 0
32104: PUSH
32105: EMPTY
32106: LIST
32107: LIST
32108: PUSH
32109: LD_INT 2
32111: NEG
32112: PUSH
32113: LD_INT 1
32115: NEG
32116: PUSH
32117: EMPTY
32118: LIST
32119: LIST
32120: PUSH
32121: LD_INT 2
32123: NEG
32124: PUSH
32125: LD_INT 2
32127: NEG
32128: PUSH
32129: EMPTY
32130: LIST
32131: LIST
32132: PUSH
32133: EMPTY
32134: LIST
32135: LIST
32136: LIST
32137: LIST
32138: LIST
32139: LIST
32140: LIST
32141: LIST
32142: LIST
32143: LIST
32144: LIST
32145: LIST
32146: LIST
32147: LIST
32148: LIST
32149: LIST
32150: LIST
32151: LIST
32152: LIST
32153: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32154: LD_ADDR_VAR 0 54
32158: PUSH
32159: LD_INT 0
32161: PUSH
32162: LD_INT 0
32164: PUSH
32165: EMPTY
32166: LIST
32167: LIST
32168: PUSH
32169: LD_INT 0
32171: PUSH
32172: LD_INT 1
32174: NEG
32175: PUSH
32176: EMPTY
32177: LIST
32178: LIST
32179: PUSH
32180: LD_INT 1
32182: PUSH
32183: LD_INT 0
32185: PUSH
32186: EMPTY
32187: LIST
32188: LIST
32189: PUSH
32190: LD_INT 1
32192: PUSH
32193: LD_INT 1
32195: PUSH
32196: EMPTY
32197: LIST
32198: LIST
32199: PUSH
32200: LD_INT 0
32202: PUSH
32203: LD_INT 1
32205: PUSH
32206: EMPTY
32207: LIST
32208: LIST
32209: PUSH
32210: LD_INT 1
32212: NEG
32213: PUSH
32214: LD_INT 0
32216: PUSH
32217: EMPTY
32218: LIST
32219: LIST
32220: PUSH
32221: LD_INT 1
32223: NEG
32224: PUSH
32225: LD_INT 1
32227: NEG
32228: PUSH
32229: EMPTY
32230: LIST
32231: LIST
32232: PUSH
32233: LD_INT 1
32235: NEG
32236: PUSH
32237: LD_INT 2
32239: NEG
32240: PUSH
32241: EMPTY
32242: LIST
32243: LIST
32244: PUSH
32245: LD_INT 0
32247: PUSH
32248: LD_INT 2
32250: NEG
32251: PUSH
32252: EMPTY
32253: LIST
32254: LIST
32255: PUSH
32256: LD_INT 1
32258: PUSH
32259: LD_INT 1
32261: NEG
32262: PUSH
32263: EMPTY
32264: LIST
32265: LIST
32266: PUSH
32267: LD_INT 2
32269: PUSH
32270: LD_INT 0
32272: PUSH
32273: EMPTY
32274: LIST
32275: LIST
32276: PUSH
32277: LD_INT 2
32279: PUSH
32280: LD_INT 1
32282: PUSH
32283: EMPTY
32284: LIST
32285: LIST
32286: PUSH
32287: LD_INT 2
32289: PUSH
32290: LD_INT 2
32292: PUSH
32293: EMPTY
32294: LIST
32295: LIST
32296: PUSH
32297: LD_INT 1
32299: PUSH
32300: LD_INT 2
32302: PUSH
32303: EMPTY
32304: LIST
32305: LIST
32306: PUSH
32307: LD_INT 0
32309: PUSH
32310: LD_INT 2
32312: PUSH
32313: EMPTY
32314: LIST
32315: LIST
32316: PUSH
32317: LD_INT 1
32319: NEG
32320: PUSH
32321: LD_INT 1
32323: PUSH
32324: EMPTY
32325: LIST
32326: LIST
32327: PUSH
32328: LD_INT 2
32330: NEG
32331: PUSH
32332: LD_INT 0
32334: PUSH
32335: EMPTY
32336: LIST
32337: LIST
32338: PUSH
32339: LD_INT 2
32341: NEG
32342: PUSH
32343: LD_INT 1
32345: NEG
32346: PUSH
32347: EMPTY
32348: LIST
32349: LIST
32350: PUSH
32351: LD_INT 2
32353: NEG
32354: PUSH
32355: LD_INT 2
32357: NEG
32358: PUSH
32359: EMPTY
32360: LIST
32361: LIST
32362: PUSH
32363: EMPTY
32364: LIST
32365: LIST
32366: LIST
32367: LIST
32368: LIST
32369: LIST
32370: LIST
32371: LIST
32372: LIST
32373: LIST
32374: LIST
32375: LIST
32376: LIST
32377: LIST
32378: LIST
32379: LIST
32380: LIST
32381: LIST
32382: LIST
32383: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32384: LD_ADDR_VAR 0 55
32388: PUSH
32389: LD_INT 0
32391: PUSH
32392: LD_INT 0
32394: PUSH
32395: EMPTY
32396: LIST
32397: LIST
32398: PUSH
32399: LD_INT 0
32401: PUSH
32402: LD_INT 1
32404: NEG
32405: PUSH
32406: EMPTY
32407: LIST
32408: LIST
32409: PUSH
32410: LD_INT 1
32412: PUSH
32413: LD_INT 0
32415: PUSH
32416: EMPTY
32417: LIST
32418: LIST
32419: PUSH
32420: LD_INT 1
32422: PUSH
32423: LD_INT 1
32425: PUSH
32426: EMPTY
32427: LIST
32428: LIST
32429: PUSH
32430: LD_INT 0
32432: PUSH
32433: LD_INT 1
32435: PUSH
32436: EMPTY
32437: LIST
32438: LIST
32439: PUSH
32440: LD_INT 1
32442: NEG
32443: PUSH
32444: LD_INT 0
32446: PUSH
32447: EMPTY
32448: LIST
32449: LIST
32450: PUSH
32451: LD_INT 1
32453: NEG
32454: PUSH
32455: LD_INT 1
32457: NEG
32458: PUSH
32459: EMPTY
32460: LIST
32461: LIST
32462: PUSH
32463: LD_INT 1
32465: NEG
32466: PUSH
32467: LD_INT 2
32469: NEG
32470: PUSH
32471: EMPTY
32472: LIST
32473: LIST
32474: PUSH
32475: LD_INT 0
32477: PUSH
32478: LD_INT 2
32480: NEG
32481: PUSH
32482: EMPTY
32483: LIST
32484: LIST
32485: PUSH
32486: LD_INT 1
32488: PUSH
32489: LD_INT 1
32491: NEG
32492: PUSH
32493: EMPTY
32494: LIST
32495: LIST
32496: PUSH
32497: LD_INT 2
32499: PUSH
32500: LD_INT 0
32502: PUSH
32503: EMPTY
32504: LIST
32505: LIST
32506: PUSH
32507: LD_INT 2
32509: PUSH
32510: LD_INT 1
32512: PUSH
32513: EMPTY
32514: LIST
32515: LIST
32516: PUSH
32517: LD_INT 2
32519: PUSH
32520: LD_INT 2
32522: PUSH
32523: EMPTY
32524: LIST
32525: LIST
32526: PUSH
32527: LD_INT 1
32529: PUSH
32530: LD_INT 2
32532: PUSH
32533: EMPTY
32534: LIST
32535: LIST
32536: PUSH
32537: LD_INT 0
32539: PUSH
32540: LD_INT 2
32542: PUSH
32543: EMPTY
32544: LIST
32545: LIST
32546: PUSH
32547: LD_INT 1
32549: NEG
32550: PUSH
32551: LD_INT 1
32553: PUSH
32554: EMPTY
32555: LIST
32556: LIST
32557: PUSH
32558: LD_INT 2
32560: NEG
32561: PUSH
32562: LD_INT 0
32564: PUSH
32565: EMPTY
32566: LIST
32567: LIST
32568: PUSH
32569: LD_INT 2
32571: NEG
32572: PUSH
32573: LD_INT 1
32575: NEG
32576: PUSH
32577: EMPTY
32578: LIST
32579: LIST
32580: PUSH
32581: LD_INT 2
32583: NEG
32584: PUSH
32585: LD_INT 2
32587: NEG
32588: PUSH
32589: EMPTY
32590: LIST
32591: LIST
32592: PUSH
32593: EMPTY
32594: LIST
32595: LIST
32596: LIST
32597: LIST
32598: LIST
32599: LIST
32600: LIST
32601: LIST
32602: LIST
32603: LIST
32604: LIST
32605: LIST
32606: LIST
32607: LIST
32608: LIST
32609: LIST
32610: LIST
32611: LIST
32612: LIST
32613: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32614: LD_ADDR_VAR 0 56
32618: PUSH
32619: LD_INT 0
32621: PUSH
32622: LD_INT 0
32624: PUSH
32625: EMPTY
32626: LIST
32627: LIST
32628: PUSH
32629: LD_INT 0
32631: PUSH
32632: LD_INT 1
32634: NEG
32635: PUSH
32636: EMPTY
32637: LIST
32638: LIST
32639: PUSH
32640: LD_INT 1
32642: PUSH
32643: LD_INT 0
32645: PUSH
32646: EMPTY
32647: LIST
32648: LIST
32649: PUSH
32650: LD_INT 1
32652: PUSH
32653: LD_INT 1
32655: PUSH
32656: EMPTY
32657: LIST
32658: LIST
32659: PUSH
32660: LD_INT 0
32662: PUSH
32663: LD_INT 1
32665: PUSH
32666: EMPTY
32667: LIST
32668: LIST
32669: PUSH
32670: LD_INT 1
32672: NEG
32673: PUSH
32674: LD_INT 0
32676: PUSH
32677: EMPTY
32678: LIST
32679: LIST
32680: PUSH
32681: LD_INT 1
32683: NEG
32684: PUSH
32685: LD_INT 1
32687: NEG
32688: PUSH
32689: EMPTY
32690: LIST
32691: LIST
32692: PUSH
32693: LD_INT 1
32695: NEG
32696: PUSH
32697: LD_INT 2
32699: NEG
32700: PUSH
32701: EMPTY
32702: LIST
32703: LIST
32704: PUSH
32705: LD_INT 0
32707: PUSH
32708: LD_INT 2
32710: NEG
32711: PUSH
32712: EMPTY
32713: LIST
32714: LIST
32715: PUSH
32716: LD_INT 1
32718: PUSH
32719: LD_INT 1
32721: NEG
32722: PUSH
32723: EMPTY
32724: LIST
32725: LIST
32726: PUSH
32727: LD_INT 2
32729: PUSH
32730: LD_INT 0
32732: PUSH
32733: EMPTY
32734: LIST
32735: LIST
32736: PUSH
32737: LD_INT 2
32739: PUSH
32740: LD_INT 1
32742: PUSH
32743: EMPTY
32744: LIST
32745: LIST
32746: PUSH
32747: LD_INT 2
32749: PUSH
32750: LD_INT 2
32752: PUSH
32753: EMPTY
32754: LIST
32755: LIST
32756: PUSH
32757: LD_INT 1
32759: PUSH
32760: LD_INT 2
32762: PUSH
32763: EMPTY
32764: LIST
32765: LIST
32766: PUSH
32767: LD_INT 0
32769: PUSH
32770: LD_INT 2
32772: PUSH
32773: EMPTY
32774: LIST
32775: LIST
32776: PUSH
32777: LD_INT 1
32779: NEG
32780: PUSH
32781: LD_INT 1
32783: PUSH
32784: EMPTY
32785: LIST
32786: LIST
32787: PUSH
32788: LD_INT 2
32790: NEG
32791: PUSH
32792: LD_INT 0
32794: PUSH
32795: EMPTY
32796: LIST
32797: LIST
32798: PUSH
32799: LD_INT 2
32801: NEG
32802: PUSH
32803: LD_INT 1
32805: NEG
32806: PUSH
32807: EMPTY
32808: LIST
32809: LIST
32810: PUSH
32811: LD_INT 2
32813: NEG
32814: PUSH
32815: LD_INT 2
32817: NEG
32818: PUSH
32819: EMPTY
32820: LIST
32821: LIST
32822: PUSH
32823: EMPTY
32824: LIST
32825: LIST
32826: LIST
32827: LIST
32828: LIST
32829: LIST
32830: LIST
32831: LIST
32832: LIST
32833: LIST
32834: LIST
32835: LIST
32836: LIST
32837: LIST
32838: LIST
32839: LIST
32840: LIST
32841: LIST
32842: LIST
32843: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32844: LD_ADDR_VAR 0 57
32848: PUSH
32849: LD_INT 0
32851: PUSH
32852: LD_INT 0
32854: PUSH
32855: EMPTY
32856: LIST
32857: LIST
32858: PUSH
32859: LD_INT 0
32861: PUSH
32862: LD_INT 1
32864: NEG
32865: PUSH
32866: EMPTY
32867: LIST
32868: LIST
32869: PUSH
32870: LD_INT 1
32872: PUSH
32873: LD_INT 0
32875: PUSH
32876: EMPTY
32877: LIST
32878: LIST
32879: PUSH
32880: LD_INT 1
32882: PUSH
32883: LD_INT 1
32885: PUSH
32886: EMPTY
32887: LIST
32888: LIST
32889: PUSH
32890: LD_INT 0
32892: PUSH
32893: LD_INT 1
32895: PUSH
32896: EMPTY
32897: LIST
32898: LIST
32899: PUSH
32900: LD_INT 1
32902: NEG
32903: PUSH
32904: LD_INT 0
32906: PUSH
32907: EMPTY
32908: LIST
32909: LIST
32910: PUSH
32911: LD_INT 1
32913: NEG
32914: PUSH
32915: LD_INT 1
32917: NEG
32918: PUSH
32919: EMPTY
32920: LIST
32921: LIST
32922: PUSH
32923: LD_INT 1
32925: NEG
32926: PUSH
32927: LD_INT 2
32929: NEG
32930: PUSH
32931: EMPTY
32932: LIST
32933: LIST
32934: PUSH
32935: LD_INT 0
32937: PUSH
32938: LD_INT 2
32940: NEG
32941: PUSH
32942: EMPTY
32943: LIST
32944: LIST
32945: PUSH
32946: LD_INT 1
32948: PUSH
32949: LD_INT 1
32951: NEG
32952: PUSH
32953: EMPTY
32954: LIST
32955: LIST
32956: PUSH
32957: LD_INT 2
32959: PUSH
32960: LD_INT 0
32962: PUSH
32963: EMPTY
32964: LIST
32965: LIST
32966: PUSH
32967: LD_INT 2
32969: PUSH
32970: LD_INT 1
32972: PUSH
32973: EMPTY
32974: LIST
32975: LIST
32976: PUSH
32977: LD_INT 2
32979: PUSH
32980: LD_INT 2
32982: PUSH
32983: EMPTY
32984: LIST
32985: LIST
32986: PUSH
32987: LD_INT 1
32989: PUSH
32990: LD_INT 2
32992: PUSH
32993: EMPTY
32994: LIST
32995: LIST
32996: PUSH
32997: LD_INT 0
32999: PUSH
33000: LD_INT 2
33002: PUSH
33003: EMPTY
33004: LIST
33005: LIST
33006: PUSH
33007: LD_INT 1
33009: NEG
33010: PUSH
33011: LD_INT 1
33013: PUSH
33014: EMPTY
33015: LIST
33016: LIST
33017: PUSH
33018: LD_INT 2
33020: NEG
33021: PUSH
33022: LD_INT 0
33024: PUSH
33025: EMPTY
33026: LIST
33027: LIST
33028: PUSH
33029: LD_INT 2
33031: NEG
33032: PUSH
33033: LD_INT 1
33035: NEG
33036: PUSH
33037: EMPTY
33038: LIST
33039: LIST
33040: PUSH
33041: LD_INT 2
33043: NEG
33044: PUSH
33045: LD_INT 2
33047: NEG
33048: PUSH
33049: EMPTY
33050: LIST
33051: LIST
33052: PUSH
33053: EMPTY
33054: LIST
33055: LIST
33056: LIST
33057: LIST
33058: LIST
33059: LIST
33060: LIST
33061: LIST
33062: LIST
33063: LIST
33064: LIST
33065: LIST
33066: LIST
33067: LIST
33068: LIST
33069: LIST
33070: LIST
33071: LIST
33072: LIST
33073: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33074: LD_ADDR_VAR 0 58
33078: PUSH
33079: LD_INT 0
33081: PUSH
33082: LD_INT 0
33084: PUSH
33085: EMPTY
33086: LIST
33087: LIST
33088: PUSH
33089: LD_INT 0
33091: PUSH
33092: LD_INT 1
33094: NEG
33095: PUSH
33096: EMPTY
33097: LIST
33098: LIST
33099: PUSH
33100: LD_INT 1
33102: PUSH
33103: LD_INT 0
33105: PUSH
33106: EMPTY
33107: LIST
33108: LIST
33109: PUSH
33110: LD_INT 1
33112: PUSH
33113: LD_INT 1
33115: PUSH
33116: EMPTY
33117: LIST
33118: LIST
33119: PUSH
33120: LD_INT 0
33122: PUSH
33123: LD_INT 1
33125: PUSH
33126: EMPTY
33127: LIST
33128: LIST
33129: PUSH
33130: LD_INT 1
33132: NEG
33133: PUSH
33134: LD_INT 0
33136: PUSH
33137: EMPTY
33138: LIST
33139: LIST
33140: PUSH
33141: LD_INT 1
33143: NEG
33144: PUSH
33145: LD_INT 1
33147: NEG
33148: PUSH
33149: EMPTY
33150: LIST
33151: LIST
33152: PUSH
33153: LD_INT 1
33155: NEG
33156: PUSH
33157: LD_INT 2
33159: NEG
33160: PUSH
33161: EMPTY
33162: LIST
33163: LIST
33164: PUSH
33165: LD_INT 0
33167: PUSH
33168: LD_INT 2
33170: NEG
33171: PUSH
33172: EMPTY
33173: LIST
33174: LIST
33175: PUSH
33176: LD_INT 1
33178: PUSH
33179: LD_INT 1
33181: NEG
33182: PUSH
33183: EMPTY
33184: LIST
33185: LIST
33186: PUSH
33187: LD_INT 2
33189: PUSH
33190: LD_INT 0
33192: PUSH
33193: EMPTY
33194: LIST
33195: LIST
33196: PUSH
33197: LD_INT 2
33199: PUSH
33200: LD_INT 1
33202: PUSH
33203: EMPTY
33204: LIST
33205: LIST
33206: PUSH
33207: LD_INT 2
33209: PUSH
33210: LD_INT 2
33212: PUSH
33213: EMPTY
33214: LIST
33215: LIST
33216: PUSH
33217: LD_INT 1
33219: PUSH
33220: LD_INT 2
33222: PUSH
33223: EMPTY
33224: LIST
33225: LIST
33226: PUSH
33227: LD_INT 0
33229: PUSH
33230: LD_INT 2
33232: PUSH
33233: EMPTY
33234: LIST
33235: LIST
33236: PUSH
33237: LD_INT 1
33239: NEG
33240: PUSH
33241: LD_INT 1
33243: PUSH
33244: EMPTY
33245: LIST
33246: LIST
33247: PUSH
33248: LD_INT 2
33250: NEG
33251: PUSH
33252: LD_INT 0
33254: PUSH
33255: EMPTY
33256: LIST
33257: LIST
33258: PUSH
33259: LD_INT 2
33261: NEG
33262: PUSH
33263: LD_INT 1
33265: NEG
33266: PUSH
33267: EMPTY
33268: LIST
33269: LIST
33270: PUSH
33271: LD_INT 2
33273: NEG
33274: PUSH
33275: LD_INT 2
33277: NEG
33278: PUSH
33279: EMPTY
33280: LIST
33281: LIST
33282: PUSH
33283: EMPTY
33284: LIST
33285: LIST
33286: LIST
33287: LIST
33288: LIST
33289: LIST
33290: LIST
33291: LIST
33292: LIST
33293: LIST
33294: LIST
33295: LIST
33296: LIST
33297: LIST
33298: LIST
33299: LIST
33300: LIST
33301: LIST
33302: LIST
33303: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
33304: LD_ADDR_VAR 0 59
33308: PUSH
33309: LD_INT 0
33311: PUSH
33312: LD_INT 0
33314: PUSH
33315: EMPTY
33316: LIST
33317: LIST
33318: PUSH
33319: LD_INT 0
33321: PUSH
33322: LD_INT 1
33324: NEG
33325: PUSH
33326: EMPTY
33327: LIST
33328: LIST
33329: PUSH
33330: LD_INT 1
33332: PUSH
33333: LD_INT 0
33335: PUSH
33336: EMPTY
33337: LIST
33338: LIST
33339: PUSH
33340: LD_INT 1
33342: PUSH
33343: LD_INT 1
33345: PUSH
33346: EMPTY
33347: LIST
33348: LIST
33349: PUSH
33350: LD_INT 0
33352: PUSH
33353: LD_INT 1
33355: PUSH
33356: EMPTY
33357: LIST
33358: LIST
33359: PUSH
33360: LD_INT 1
33362: NEG
33363: PUSH
33364: LD_INT 0
33366: PUSH
33367: EMPTY
33368: LIST
33369: LIST
33370: PUSH
33371: LD_INT 1
33373: NEG
33374: PUSH
33375: LD_INT 1
33377: NEG
33378: PUSH
33379: EMPTY
33380: LIST
33381: LIST
33382: PUSH
33383: EMPTY
33384: LIST
33385: LIST
33386: LIST
33387: LIST
33388: LIST
33389: LIST
33390: LIST
33391: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
33392: LD_ADDR_VAR 0 60
33396: PUSH
33397: LD_INT 0
33399: PUSH
33400: LD_INT 0
33402: PUSH
33403: EMPTY
33404: LIST
33405: LIST
33406: PUSH
33407: LD_INT 0
33409: PUSH
33410: LD_INT 1
33412: NEG
33413: PUSH
33414: EMPTY
33415: LIST
33416: LIST
33417: PUSH
33418: LD_INT 1
33420: PUSH
33421: LD_INT 0
33423: PUSH
33424: EMPTY
33425: LIST
33426: LIST
33427: PUSH
33428: LD_INT 1
33430: PUSH
33431: LD_INT 1
33433: PUSH
33434: EMPTY
33435: LIST
33436: LIST
33437: PUSH
33438: LD_INT 0
33440: PUSH
33441: LD_INT 1
33443: PUSH
33444: EMPTY
33445: LIST
33446: LIST
33447: PUSH
33448: LD_INT 1
33450: NEG
33451: PUSH
33452: LD_INT 0
33454: PUSH
33455: EMPTY
33456: LIST
33457: LIST
33458: PUSH
33459: LD_INT 1
33461: NEG
33462: PUSH
33463: LD_INT 1
33465: NEG
33466: PUSH
33467: EMPTY
33468: LIST
33469: LIST
33470: PUSH
33471: EMPTY
33472: LIST
33473: LIST
33474: LIST
33475: LIST
33476: LIST
33477: LIST
33478: LIST
33479: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
33480: LD_ADDR_VAR 0 61
33484: PUSH
33485: LD_INT 0
33487: PUSH
33488: LD_INT 0
33490: PUSH
33491: EMPTY
33492: LIST
33493: LIST
33494: PUSH
33495: LD_INT 0
33497: PUSH
33498: LD_INT 1
33500: NEG
33501: PUSH
33502: EMPTY
33503: LIST
33504: LIST
33505: PUSH
33506: LD_INT 1
33508: PUSH
33509: LD_INT 0
33511: PUSH
33512: EMPTY
33513: LIST
33514: LIST
33515: PUSH
33516: LD_INT 1
33518: PUSH
33519: LD_INT 1
33521: PUSH
33522: EMPTY
33523: LIST
33524: LIST
33525: PUSH
33526: LD_INT 0
33528: PUSH
33529: LD_INT 1
33531: PUSH
33532: EMPTY
33533: LIST
33534: LIST
33535: PUSH
33536: LD_INT 1
33538: NEG
33539: PUSH
33540: LD_INT 0
33542: PUSH
33543: EMPTY
33544: LIST
33545: LIST
33546: PUSH
33547: LD_INT 1
33549: NEG
33550: PUSH
33551: LD_INT 1
33553: NEG
33554: PUSH
33555: EMPTY
33556: LIST
33557: LIST
33558: PUSH
33559: EMPTY
33560: LIST
33561: LIST
33562: LIST
33563: LIST
33564: LIST
33565: LIST
33566: LIST
33567: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
33568: LD_ADDR_VAR 0 62
33572: PUSH
33573: LD_INT 0
33575: PUSH
33576: LD_INT 0
33578: PUSH
33579: EMPTY
33580: LIST
33581: LIST
33582: PUSH
33583: LD_INT 0
33585: PUSH
33586: LD_INT 1
33588: NEG
33589: PUSH
33590: EMPTY
33591: LIST
33592: LIST
33593: PUSH
33594: LD_INT 1
33596: PUSH
33597: LD_INT 0
33599: PUSH
33600: EMPTY
33601: LIST
33602: LIST
33603: PUSH
33604: LD_INT 1
33606: PUSH
33607: LD_INT 1
33609: PUSH
33610: EMPTY
33611: LIST
33612: LIST
33613: PUSH
33614: LD_INT 0
33616: PUSH
33617: LD_INT 1
33619: PUSH
33620: EMPTY
33621: LIST
33622: LIST
33623: PUSH
33624: LD_INT 1
33626: NEG
33627: PUSH
33628: LD_INT 0
33630: PUSH
33631: EMPTY
33632: LIST
33633: LIST
33634: PUSH
33635: LD_INT 1
33637: NEG
33638: PUSH
33639: LD_INT 1
33641: NEG
33642: PUSH
33643: EMPTY
33644: LIST
33645: LIST
33646: PUSH
33647: EMPTY
33648: LIST
33649: LIST
33650: LIST
33651: LIST
33652: LIST
33653: LIST
33654: LIST
33655: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
33656: LD_ADDR_VAR 0 63
33660: PUSH
33661: LD_INT 0
33663: PUSH
33664: LD_INT 0
33666: PUSH
33667: EMPTY
33668: LIST
33669: LIST
33670: PUSH
33671: LD_INT 0
33673: PUSH
33674: LD_INT 1
33676: NEG
33677: PUSH
33678: EMPTY
33679: LIST
33680: LIST
33681: PUSH
33682: LD_INT 1
33684: PUSH
33685: LD_INT 0
33687: PUSH
33688: EMPTY
33689: LIST
33690: LIST
33691: PUSH
33692: LD_INT 1
33694: PUSH
33695: LD_INT 1
33697: PUSH
33698: EMPTY
33699: LIST
33700: LIST
33701: PUSH
33702: LD_INT 0
33704: PUSH
33705: LD_INT 1
33707: PUSH
33708: EMPTY
33709: LIST
33710: LIST
33711: PUSH
33712: LD_INT 1
33714: NEG
33715: PUSH
33716: LD_INT 0
33718: PUSH
33719: EMPTY
33720: LIST
33721: LIST
33722: PUSH
33723: LD_INT 1
33725: NEG
33726: PUSH
33727: LD_INT 1
33729: NEG
33730: PUSH
33731: EMPTY
33732: LIST
33733: LIST
33734: PUSH
33735: EMPTY
33736: LIST
33737: LIST
33738: LIST
33739: LIST
33740: LIST
33741: LIST
33742: LIST
33743: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
33744: LD_ADDR_VAR 0 64
33748: PUSH
33749: LD_INT 0
33751: PUSH
33752: LD_INT 0
33754: PUSH
33755: EMPTY
33756: LIST
33757: LIST
33758: PUSH
33759: LD_INT 0
33761: PUSH
33762: LD_INT 1
33764: NEG
33765: PUSH
33766: EMPTY
33767: LIST
33768: LIST
33769: PUSH
33770: LD_INT 1
33772: PUSH
33773: LD_INT 0
33775: PUSH
33776: EMPTY
33777: LIST
33778: LIST
33779: PUSH
33780: LD_INT 1
33782: PUSH
33783: LD_INT 1
33785: PUSH
33786: EMPTY
33787: LIST
33788: LIST
33789: PUSH
33790: LD_INT 0
33792: PUSH
33793: LD_INT 1
33795: PUSH
33796: EMPTY
33797: LIST
33798: LIST
33799: PUSH
33800: LD_INT 1
33802: NEG
33803: PUSH
33804: LD_INT 0
33806: PUSH
33807: EMPTY
33808: LIST
33809: LIST
33810: PUSH
33811: LD_INT 1
33813: NEG
33814: PUSH
33815: LD_INT 1
33817: NEG
33818: PUSH
33819: EMPTY
33820: LIST
33821: LIST
33822: PUSH
33823: EMPTY
33824: LIST
33825: LIST
33826: LIST
33827: LIST
33828: LIST
33829: LIST
33830: LIST
33831: ST_TO_ADDR
// end ; 1 :
33832: GO 39729
33834: LD_INT 1
33836: DOUBLE
33837: EQUAL
33838: IFTRUE 33842
33840: GO 36465
33842: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
33843: LD_ADDR_VAR 0 11
33847: PUSH
33848: LD_INT 1
33850: NEG
33851: PUSH
33852: LD_INT 3
33854: NEG
33855: PUSH
33856: EMPTY
33857: LIST
33858: LIST
33859: PUSH
33860: LD_INT 0
33862: PUSH
33863: LD_INT 3
33865: NEG
33866: PUSH
33867: EMPTY
33868: LIST
33869: LIST
33870: PUSH
33871: LD_INT 1
33873: PUSH
33874: LD_INT 2
33876: NEG
33877: PUSH
33878: EMPTY
33879: LIST
33880: LIST
33881: PUSH
33882: EMPTY
33883: LIST
33884: LIST
33885: LIST
33886: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
33887: LD_ADDR_VAR 0 12
33891: PUSH
33892: LD_INT 2
33894: PUSH
33895: LD_INT 1
33897: NEG
33898: PUSH
33899: EMPTY
33900: LIST
33901: LIST
33902: PUSH
33903: LD_INT 3
33905: PUSH
33906: LD_INT 0
33908: PUSH
33909: EMPTY
33910: LIST
33911: LIST
33912: PUSH
33913: LD_INT 3
33915: PUSH
33916: LD_INT 1
33918: PUSH
33919: EMPTY
33920: LIST
33921: LIST
33922: PUSH
33923: EMPTY
33924: LIST
33925: LIST
33926: LIST
33927: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
33928: LD_ADDR_VAR 0 13
33932: PUSH
33933: LD_INT 3
33935: PUSH
33936: LD_INT 2
33938: PUSH
33939: EMPTY
33940: LIST
33941: LIST
33942: PUSH
33943: LD_INT 3
33945: PUSH
33946: LD_INT 3
33948: PUSH
33949: EMPTY
33950: LIST
33951: LIST
33952: PUSH
33953: LD_INT 2
33955: PUSH
33956: LD_INT 3
33958: PUSH
33959: EMPTY
33960: LIST
33961: LIST
33962: PUSH
33963: EMPTY
33964: LIST
33965: LIST
33966: LIST
33967: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
33968: LD_ADDR_VAR 0 14
33972: PUSH
33973: LD_INT 1
33975: PUSH
33976: LD_INT 3
33978: PUSH
33979: EMPTY
33980: LIST
33981: LIST
33982: PUSH
33983: LD_INT 0
33985: PUSH
33986: LD_INT 3
33988: PUSH
33989: EMPTY
33990: LIST
33991: LIST
33992: PUSH
33993: LD_INT 1
33995: NEG
33996: PUSH
33997: LD_INT 2
33999: PUSH
34000: EMPTY
34001: LIST
34002: LIST
34003: PUSH
34004: EMPTY
34005: LIST
34006: LIST
34007: LIST
34008: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
34009: LD_ADDR_VAR 0 15
34013: PUSH
34014: LD_INT 2
34016: NEG
34017: PUSH
34018: LD_INT 1
34020: PUSH
34021: EMPTY
34022: LIST
34023: LIST
34024: PUSH
34025: LD_INT 3
34027: NEG
34028: PUSH
34029: LD_INT 0
34031: PUSH
34032: EMPTY
34033: LIST
34034: LIST
34035: PUSH
34036: LD_INT 3
34038: NEG
34039: PUSH
34040: LD_INT 1
34042: NEG
34043: PUSH
34044: EMPTY
34045: LIST
34046: LIST
34047: PUSH
34048: EMPTY
34049: LIST
34050: LIST
34051: LIST
34052: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
34053: LD_ADDR_VAR 0 16
34057: PUSH
34058: LD_INT 2
34060: NEG
34061: PUSH
34062: LD_INT 3
34064: NEG
34065: PUSH
34066: EMPTY
34067: LIST
34068: LIST
34069: PUSH
34070: LD_INT 3
34072: NEG
34073: PUSH
34074: LD_INT 2
34076: NEG
34077: PUSH
34078: EMPTY
34079: LIST
34080: LIST
34081: PUSH
34082: LD_INT 3
34084: NEG
34085: PUSH
34086: LD_INT 3
34088: NEG
34089: PUSH
34090: EMPTY
34091: LIST
34092: LIST
34093: PUSH
34094: EMPTY
34095: LIST
34096: LIST
34097: LIST
34098: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
34099: LD_ADDR_VAR 0 17
34103: PUSH
34104: LD_INT 1
34106: NEG
34107: PUSH
34108: LD_INT 3
34110: NEG
34111: PUSH
34112: EMPTY
34113: LIST
34114: LIST
34115: PUSH
34116: LD_INT 0
34118: PUSH
34119: LD_INT 3
34121: NEG
34122: PUSH
34123: EMPTY
34124: LIST
34125: LIST
34126: PUSH
34127: LD_INT 1
34129: PUSH
34130: LD_INT 2
34132: NEG
34133: PUSH
34134: EMPTY
34135: LIST
34136: LIST
34137: PUSH
34138: EMPTY
34139: LIST
34140: LIST
34141: LIST
34142: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
34143: LD_ADDR_VAR 0 18
34147: PUSH
34148: LD_INT 2
34150: PUSH
34151: LD_INT 1
34153: NEG
34154: PUSH
34155: EMPTY
34156: LIST
34157: LIST
34158: PUSH
34159: LD_INT 3
34161: PUSH
34162: LD_INT 0
34164: PUSH
34165: EMPTY
34166: LIST
34167: LIST
34168: PUSH
34169: LD_INT 3
34171: PUSH
34172: LD_INT 1
34174: PUSH
34175: EMPTY
34176: LIST
34177: LIST
34178: PUSH
34179: EMPTY
34180: LIST
34181: LIST
34182: LIST
34183: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
34184: LD_ADDR_VAR 0 19
34188: PUSH
34189: LD_INT 3
34191: PUSH
34192: LD_INT 2
34194: PUSH
34195: EMPTY
34196: LIST
34197: LIST
34198: PUSH
34199: LD_INT 3
34201: PUSH
34202: LD_INT 3
34204: PUSH
34205: EMPTY
34206: LIST
34207: LIST
34208: PUSH
34209: LD_INT 2
34211: PUSH
34212: LD_INT 3
34214: PUSH
34215: EMPTY
34216: LIST
34217: LIST
34218: PUSH
34219: EMPTY
34220: LIST
34221: LIST
34222: LIST
34223: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
34224: LD_ADDR_VAR 0 20
34228: PUSH
34229: LD_INT 1
34231: PUSH
34232: LD_INT 3
34234: PUSH
34235: EMPTY
34236: LIST
34237: LIST
34238: PUSH
34239: LD_INT 0
34241: PUSH
34242: LD_INT 3
34244: PUSH
34245: EMPTY
34246: LIST
34247: LIST
34248: PUSH
34249: LD_INT 1
34251: NEG
34252: PUSH
34253: LD_INT 2
34255: PUSH
34256: EMPTY
34257: LIST
34258: LIST
34259: PUSH
34260: EMPTY
34261: LIST
34262: LIST
34263: LIST
34264: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
34265: LD_ADDR_VAR 0 21
34269: PUSH
34270: LD_INT 2
34272: NEG
34273: PUSH
34274: LD_INT 1
34276: PUSH
34277: EMPTY
34278: LIST
34279: LIST
34280: PUSH
34281: LD_INT 3
34283: NEG
34284: PUSH
34285: LD_INT 0
34287: PUSH
34288: EMPTY
34289: LIST
34290: LIST
34291: PUSH
34292: LD_INT 3
34294: NEG
34295: PUSH
34296: LD_INT 1
34298: NEG
34299: PUSH
34300: EMPTY
34301: LIST
34302: LIST
34303: PUSH
34304: EMPTY
34305: LIST
34306: LIST
34307: LIST
34308: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
34309: LD_ADDR_VAR 0 22
34313: PUSH
34314: LD_INT 2
34316: NEG
34317: PUSH
34318: LD_INT 3
34320: NEG
34321: PUSH
34322: EMPTY
34323: LIST
34324: LIST
34325: PUSH
34326: LD_INT 3
34328: NEG
34329: PUSH
34330: LD_INT 2
34332: NEG
34333: PUSH
34334: EMPTY
34335: LIST
34336: LIST
34337: PUSH
34338: LD_INT 3
34340: NEG
34341: PUSH
34342: LD_INT 3
34344: NEG
34345: PUSH
34346: EMPTY
34347: LIST
34348: LIST
34349: PUSH
34350: EMPTY
34351: LIST
34352: LIST
34353: LIST
34354: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
34355: LD_ADDR_VAR 0 23
34359: PUSH
34360: LD_INT 0
34362: PUSH
34363: LD_INT 3
34365: NEG
34366: PUSH
34367: EMPTY
34368: LIST
34369: LIST
34370: PUSH
34371: LD_INT 1
34373: NEG
34374: PUSH
34375: LD_INT 4
34377: NEG
34378: PUSH
34379: EMPTY
34380: LIST
34381: LIST
34382: PUSH
34383: LD_INT 1
34385: PUSH
34386: LD_INT 3
34388: NEG
34389: PUSH
34390: EMPTY
34391: LIST
34392: LIST
34393: PUSH
34394: EMPTY
34395: LIST
34396: LIST
34397: LIST
34398: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
34399: LD_ADDR_VAR 0 24
34403: PUSH
34404: LD_INT 3
34406: PUSH
34407: LD_INT 0
34409: PUSH
34410: EMPTY
34411: LIST
34412: LIST
34413: PUSH
34414: LD_INT 3
34416: PUSH
34417: LD_INT 1
34419: NEG
34420: PUSH
34421: EMPTY
34422: LIST
34423: LIST
34424: PUSH
34425: LD_INT 4
34427: PUSH
34428: LD_INT 1
34430: PUSH
34431: EMPTY
34432: LIST
34433: LIST
34434: PUSH
34435: EMPTY
34436: LIST
34437: LIST
34438: LIST
34439: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
34440: LD_ADDR_VAR 0 25
34444: PUSH
34445: LD_INT 3
34447: PUSH
34448: LD_INT 3
34450: PUSH
34451: EMPTY
34452: LIST
34453: LIST
34454: PUSH
34455: LD_INT 4
34457: PUSH
34458: LD_INT 3
34460: PUSH
34461: EMPTY
34462: LIST
34463: LIST
34464: PUSH
34465: LD_INT 3
34467: PUSH
34468: LD_INT 4
34470: PUSH
34471: EMPTY
34472: LIST
34473: LIST
34474: PUSH
34475: EMPTY
34476: LIST
34477: LIST
34478: LIST
34479: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
34480: LD_ADDR_VAR 0 26
34484: PUSH
34485: LD_INT 0
34487: PUSH
34488: LD_INT 3
34490: PUSH
34491: EMPTY
34492: LIST
34493: LIST
34494: PUSH
34495: LD_INT 1
34497: PUSH
34498: LD_INT 4
34500: PUSH
34501: EMPTY
34502: LIST
34503: LIST
34504: PUSH
34505: LD_INT 1
34507: NEG
34508: PUSH
34509: LD_INT 3
34511: PUSH
34512: EMPTY
34513: LIST
34514: LIST
34515: PUSH
34516: EMPTY
34517: LIST
34518: LIST
34519: LIST
34520: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
34521: LD_ADDR_VAR 0 27
34525: PUSH
34526: LD_INT 3
34528: NEG
34529: PUSH
34530: LD_INT 0
34532: PUSH
34533: EMPTY
34534: LIST
34535: LIST
34536: PUSH
34537: LD_INT 3
34539: NEG
34540: PUSH
34541: LD_INT 1
34543: PUSH
34544: EMPTY
34545: LIST
34546: LIST
34547: PUSH
34548: LD_INT 4
34550: NEG
34551: PUSH
34552: LD_INT 1
34554: NEG
34555: PUSH
34556: EMPTY
34557: LIST
34558: LIST
34559: PUSH
34560: EMPTY
34561: LIST
34562: LIST
34563: LIST
34564: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
34565: LD_ADDR_VAR 0 28
34569: PUSH
34570: LD_INT 3
34572: NEG
34573: PUSH
34574: LD_INT 3
34576: NEG
34577: PUSH
34578: EMPTY
34579: LIST
34580: LIST
34581: PUSH
34582: LD_INT 3
34584: NEG
34585: PUSH
34586: LD_INT 4
34588: NEG
34589: PUSH
34590: EMPTY
34591: LIST
34592: LIST
34593: PUSH
34594: LD_INT 4
34596: NEG
34597: PUSH
34598: LD_INT 3
34600: NEG
34601: PUSH
34602: EMPTY
34603: LIST
34604: LIST
34605: PUSH
34606: EMPTY
34607: LIST
34608: LIST
34609: LIST
34610: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
34611: LD_ADDR_VAR 0 29
34615: PUSH
34616: LD_INT 1
34618: NEG
34619: PUSH
34620: LD_INT 3
34622: NEG
34623: PUSH
34624: EMPTY
34625: LIST
34626: LIST
34627: PUSH
34628: LD_INT 0
34630: PUSH
34631: LD_INT 3
34633: NEG
34634: PUSH
34635: EMPTY
34636: LIST
34637: LIST
34638: PUSH
34639: LD_INT 1
34641: PUSH
34642: LD_INT 2
34644: NEG
34645: PUSH
34646: EMPTY
34647: LIST
34648: LIST
34649: PUSH
34650: LD_INT 1
34652: NEG
34653: PUSH
34654: LD_INT 4
34656: NEG
34657: PUSH
34658: EMPTY
34659: LIST
34660: LIST
34661: PUSH
34662: LD_INT 0
34664: PUSH
34665: LD_INT 4
34667: NEG
34668: PUSH
34669: EMPTY
34670: LIST
34671: LIST
34672: PUSH
34673: LD_INT 1
34675: PUSH
34676: LD_INT 3
34678: NEG
34679: PUSH
34680: EMPTY
34681: LIST
34682: LIST
34683: PUSH
34684: LD_INT 1
34686: NEG
34687: PUSH
34688: LD_INT 5
34690: NEG
34691: PUSH
34692: EMPTY
34693: LIST
34694: LIST
34695: PUSH
34696: LD_INT 0
34698: PUSH
34699: LD_INT 5
34701: NEG
34702: PUSH
34703: EMPTY
34704: LIST
34705: LIST
34706: PUSH
34707: LD_INT 1
34709: PUSH
34710: LD_INT 4
34712: NEG
34713: PUSH
34714: EMPTY
34715: LIST
34716: LIST
34717: PUSH
34718: LD_INT 1
34720: NEG
34721: PUSH
34722: LD_INT 6
34724: NEG
34725: PUSH
34726: EMPTY
34727: LIST
34728: LIST
34729: PUSH
34730: LD_INT 0
34732: PUSH
34733: LD_INT 6
34735: NEG
34736: PUSH
34737: EMPTY
34738: LIST
34739: LIST
34740: PUSH
34741: LD_INT 1
34743: PUSH
34744: LD_INT 5
34746: NEG
34747: PUSH
34748: EMPTY
34749: LIST
34750: LIST
34751: PUSH
34752: EMPTY
34753: LIST
34754: LIST
34755: LIST
34756: LIST
34757: LIST
34758: LIST
34759: LIST
34760: LIST
34761: LIST
34762: LIST
34763: LIST
34764: LIST
34765: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
34766: LD_ADDR_VAR 0 30
34770: PUSH
34771: LD_INT 2
34773: PUSH
34774: LD_INT 1
34776: NEG
34777: PUSH
34778: EMPTY
34779: LIST
34780: LIST
34781: PUSH
34782: LD_INT 3
34784: PUSH
34785: LD_INT 0
34787: PUSH
34788: EMPTY
34789: LIST
34790: LIST
34791: PUSH
34792: LD_INT 3
34794: PUSH
34795: LD_INT 1
34797: PUSH
34798: EMPTY
34799: LIST
34800: LIST
34801: PUSH
34802: LD_INT 3
34804: PUSH
34805: LD_INT 1
34807: NEG
34808: PUSH
34809: EMPTY
34810: LIST
34811: LIST
34812: PUSH
34813: LD_INT 4
34815: PUSH
34816: LD_INT 0
34818: PUSH
34819: EMPTY
34820: LIST
34821: LIST
34822: PUSH
34823: LD_INT 4
34825: PUSH
34826: LD_INT 1
34828: PUSH
34829: EMPTY
34830: LIST
34831: LIST
34832: PUSH
34833: LD_INT 4
34835: PUSH
34836: LD_INT 1
34838: NEG
34839: PUSH
34840: EMPTY
34841: LIST
34842: LIST
34843: PUSH
34844: LD_INT 5
34846: PUSH
34847: LD_INT 0
34849: PUSH
34850: EMPTY
34851: LIST
34852: LIST
34853: PUSH
34854: LD_INT 5
34856: PUSH
34857: LD_INT 1
34859: PUSH
34860: EMPTY
34861: LIST
34862: LIST
34863: PUSH
34864: LD_INT 5
34866: PUSH
34867: LD_INT 1
34869: NEG
34870: PUSH
34871: EMPTY
34872: LIST
34873: LIST
34874: PUSH
34875: LD_INT 6
34877: PUSH
34878: LD_INT 0
34880: PUSH
34881: EMPTY
34882: LIST
34883: LIST
34884: PUSH
34885: LD_INT 6
34887: PUSH
34888: LD_INT 1
34890: PUSH
34891: EMPTY
34892: LIST
34893: LIST
34894: PUSH
34895: EMPTY
34896: LIST
34897: LIST
34898: LIST
34899: LIST
34900: LIST
34901: LIST
34902: LIST
34903: LIST
34904: LIST
34905: LIST
34906: LIST
34907: LIST
34908: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
34909: LD_ADDR_VAR 0 31
34913: PUSH
34914: LD_INT 3
34916: PUSH
34917: LD_INT 2
34919: PUSH
34920: EMPTY
34921: LIST
34922: LIST
34923: PUSH
34924: LD_INT 3
34926: PUSH
34927: LD_INT 3
34929: PUSH
34930: EMPTY
34931: LIST
34932: LIST
34933: PUSH
34934: LD_INT 2
34936: PUSH
34937: LD_INT 3
34939: PUSH
34940: EMPTY
34941: LIST
34942: LIST
34943: PUSH
34944: LD_INT 4
34946: PUSH
34947: LD_INT 3
34949: PUSH
34950: EMPTY
34951: LIST
34952: LIST
34953: PUSH
34954: LD_INT 4
34956: PUSH
34957: LD_INT 4
34959: PUSH
34960: EMPTY
34961: LIST
34962: LIST
34963: PUSH
34964: LD_INT 3
34966: PUSH
34967: LD_INT 4
34969: PUSH
34970: EMPTY
34971: LIST
34972: LIST
34973: PUSH
34974: LD_INT 5
34976: PUSH
34977: LD_INT 4
34979: PUSH
34980: EMPTY
34981: LIST
34982: LIST
34983: PUSH
34984: LD_INT 5
34986: PUSH
34987: LD_INT 5
34989: PUSH
34990: EMPTY
34991: LIST
34992: LIST
34993: PUSH
34994: LD_INT 4
34996: PUSH
34997: LD_INT 5
34999: PUSH
35000: EMPTY
35001: LIST
35002: LIST
35003: PUSH
35004: LD_INT 6
35006: PUSH
35007: LD_INT 5
35009: PUSH
35010: EMPTY
35011: LIST
35012: LIST
35013: PUSH
35014: LD_INT 6
35016: PUSH
35017: LD_INT 6
35019: PUSH
35020: EMPTY
35021: LIST
35022: LIST
35023: PUSH
35024: LD_INT 5
35026: PUSH
35027: LD_INT 6
35029: PUSH
35030: EMPTY
35031: LIST
35032: LIST
35033: PUSH
35034: EMPTY
35035: LIST
35036: LIST
35037: LIST
35038: LIST
35039: LIST
35040: LIST
35041: LIST
35042: LIST
35043: LIST
35044: LIST
35045: LIST
35046: LIST
35047: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
35048: LD_ADDR_VAR 0 32
35052: PUSH
35053: LD_INT 1
35055: PUSH
35056: LD_INT 3
35058: PUSH
35059: EMPTY
35060: LIST
35061: LIST
35062: PUSH
35063: LD_INT 0
35065: PUSH
35066: LD_INT 3
35068: PUSH
35069: EMPTY
35070: LIST
35071: LIST
35072: PUSH
35073: LD_INT 1
35075: NEG
35076: PUSH
35077: LD_INT 2
35079: PUSH
35080: EMPTY
35081: LIST
35082: LIST
35083: PUSH
35084: LD_INT 1
35086: PUSH
35087: LD_INT 4
35089: PUSH
35090: EMPTY
35091: LIST
35092: LIST
35093: PUSH
35094: LD_INT 0
35096: PUSH
35097: LD_INT 4
35099: PUSH
35100: EMPTY
35101: LIST
35102: LIST
35103: PUSH
35104: LD_INT 1
35106: NEG
35107: PUSH
35108: LD_INT 3
35110: PUSH
35111: EMPTY
35112: LIST
35113: LIST
35114: PUSH
35115: LD_INT 1
35117: PUSH
35118: LD_INT 5
35120: PUSH
35121: EMPTY
35122: LIST
35123: LIST
35124: PUSH
35125: LD_INT 0
35127: PUSH
35128: LD_INT 5
35130: PUSH
35131: EMPTY
35132: LIST
35133: LIST
35134: PUSH
35135: LD_INT 1
35137: NEG
35138: PUSH
35139: LD_INT 4
35141: PUSH
35142: EMPTY
35143: LIST
35144: LIST
35145: PUSH
35146: LD_INT 1
35148: PUSH
35149: LD_INT 6
35151: PUSH
35152: EMPTY
35153: LIST
35154: LIST
35155: PUSH
35156: LD_INT 0
35158: PUSH
35159: LD_INT 6
35161: PUSH
35162: EMPTY
35163: LIST
35164: LIST
35165: PUSH
35166: LD_INT 1
35168: NEG
35169: PUSH
35170: LD_INT 5
35172: PUSH
35173: EMPTY
35174: LIST
35175: LIST
35176: PUSH
35177: EMPTY
35178: LIST
35179: LIST
35180: LIST
35181: LIST
35182: LIST
35183: LIST
35184: LIST
35185: LIST
35186: LIST
35187: LIST
35188: LIST
35189: LIST
35190: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
35191: LD_ADDR_VAR 0 33
35195: PUSH
35196: LD_INT 2
35198: NEG
35199: PUSH
35200: LD_INT 1
35202: PUSH
35203: EMPTY
35204: LIST
35205: LIST
35206: PUSH
35207: LD_INT 3
35209: NEG
35210: PUSH
35211: LD_INT 0
35213: PUSH
35214: EMPTY
35215: LIST
35216: LIST
35217: PUSH
35218: LD_INT 3
35220: NEG
35221: PUSH
35222: LD_INT 1
35224: NEG
35225: PUSH
35226: EMPTY
35227: LIST
35228: LIST
35229: PUSH
35230: LD_INT 3
35232: NEG
35233: PUSH
35234: LD_INT 1
35236: PUSH
35237: EMPTY
35238: LIST
35239: LIST
35240: PUSH
35241: LD_INT 4
35243: NEG
35244: PUSH
35245: LD_INT 0
35247: PUSH
35248: EMPTY
35249: LIST
35250: LIST
35251: PUSH
35252: LD_INT 4
35254: NEG
35255: PUSH
35256: LD_INT 1
35258: NEG
35259: PUSH
35260: EMPTY
35261: LIST
35262: LIST
35263: PUSH
35264: LD_INT 4
35266: NEG
35267: PUSH
35268: LD_INT 1
35270: PUSH
35271: EMPTY
35272: LIST
35273: LIST
35274: PUSH
35275: LD_INT 5
35277: NEG
35278: PUSH
35279: LD_INT 0
35281: PUSH
35282: EMPTY
35283: LIST
35284: LIST
35285: PUSH
35286: LD_INT 5
35288: NEG
35289: PUSH
35290: LD_INT 1
35292: NEG
35293: PUSH
35294: EMPTY
35295: LIST
35296: LIST
35297: PUSH
35298: LD_INT 5
35300: NEG
35301: PUSH
35302: LD_INT 1
35304: PUSH
35305: EMPTY
35306: LIST
35307: LIST
35308: PUSH
35309: LD_INT 6
35311: NEG
35312: PUSH
35313: LD_INT 0
35315: PUSH
35316: EMPTY
35317: LIST
35318: LIST
35319: PUSH
35320: LD_INT 6
35322: NEG
35323: PUSH
35324: LD_INT 1
35326: NEG
35327: PUSH
35328: EMPTY
35329: LIST
35330: LIST
35331: PUSH
35332: EMPTY
35333: LIST
35334: LIST
35335: LIST
35336: LIST
35337: LIST
35338: LIST
35339: LIST
35340: LIST
35341: LIST
35342: LIST
35343: LIST
35344: LIST
35345: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
35346: LD_ADDR_VAR 0 34
35350: PUSH
35351: LD_INT 2
35353: NEG
35354: PUSH
35355: LD_INT 3
35357: NEG
35358: PUSH
35359: EMPTY
35360: LIST
35361: LIST
35362: PUSH
35363: LD_INT 3
35365: NEG
35366: PUSH
35367: LD_INT 2
35369: NEG
35370: PUSH
35371: EMPTY
35372: LIST
35373: LIST
35374: PUSH
35375: LD_INT 3
35377: NEG
35378: PUSH
35379: LD_INT 3
35381: NEG
35382: PUSH
35383: EMPTY
35384: LIST
35385: LIST
35386: PUSH
35387: LD_INT 3
35389: NEG
35390: PUSH
35391: LD_INT 4
35393: NEG
35394: PUSH
35395: EMPTY
35396: LIST
35397: LIST
35398: PUSH
35399: LD_INT 4
35401: NEG
35402: PUSH
35403: LD_INT 3
35405: NEG
35406: PUSH
35407: EMPTY
35408: LIST
35409: LIST
35410: PUSH
35411: LD_INT 4
35413: NEG
35414: PUSH
35415: LD_INT 4
35417: NEG
35418: PUSH
35419: EMPTY
35420: LIST
35421: LIST
35422: PUSH
35423: LD_INT 4
35425: NEG
35426: PUSH
35427: LD_INT 5
35429: NEG
35430: PUSH
35431: EMPTY
35432: LIST
35433: LIST
35434: PUSH
35435: LD_INT 5
35437: NEG
35438: PUSH
35439: LD_INT 4
35441: NEG
35442: PUSH
35443: EMPTY
35444: LIST
35445: LIST
35446: PUSH
35447: LD_INT 5
35449: NEG
35450: PUSH
35451: LD_INT 5
35453: NEG
35454: PUSH
35455: EMPTY
35456: LIST
35457: LIST
35458: PUSH
35459: LD_INT 5
35461: NEG
35462: PUSH
35463: LD_INT 6
35465: NEG
35466: PUSH
35467: EMPTY
35468: LIST
35469: LIST
35470: PUSH
35471: LD_INT 6
35473: NEG
35474: PUSH
35475: LD_INT 5
35477: NEG
35478: PUSH
35479: EMPTY
35480: LIST
35481: LIST
35482: PUSH
35483: LD_INT 6
35485: NEG
35486: PUSH
35487: LD_INT 6
35489: NEG
35490: PUSH
35491: EMPTY
35492: LIST
35493: LIST
35494: PUSH
35495: EMPTY
35496: LIST
35497: LIST
35498: LIST
35499: LIST
35500: LIST
35501: LIST
35502: LIST
35503: LIST
35504: LIST
35505: LIST
35506: LIST
35507: LIST
35508: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
35509: LD_ADDR_VAR 0 41
35513: PUSH
35514: LD_INT 0
35516: PUSH
35517: LD_INT 2
35519: NEG
35520: PUSH
35521: EMPTY
35522: LIST
35523: LIST
35524: PUSH
35525: LD_INT 1
35527: NEG
35528: PUSH
35529: LD_INT 3
35531: NEG
35532: PUSH
35533: EMPTY
35534: LIST
35535: LIST
35536: PUSH
35537: LD_INT 1
35539: PUSH
35540: LD_INT 2
35542: NEG
35543: PUSH
35544: EMPTY
35545: LIST
35546: LIST
35547: PUSH
35548: EMPTY
35549: LIST
35550: LIST
35551: LIST
35552: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
35553: LD_ADDR_VAR 0 42
35557: PUSH
35558: LD_INT 2
35560: PUSH
35561: LD_INT 0
35563: PUSH
35564: EMPTY
35565: LIST
35566: LIST
35567: PUSH
35568: LD_INT 2
35570: PUSH
35571: LD_INT 1
35573: NEG
35574: PUSH
35575: EMPTY
35576: LIST
35577: LIST
35578: PUSH
35579: LD_INT 3
35581: PUSH
35582: LD_INT 1
35584: PUSH
35585: EMPTY
35586: LIST
35587: LIST
35588: PUSH
35589: EMPTY
35590: LIST
35591: LIST
35592: LIST
35593: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
35594: LD_ADDR_VAR 0 43
35598: PUSH
35599: LD_INT 2
35601: PUSH
35602: LD_INT 2
35604: PUSH
35605: EMPTY
35606: LIST
35607: LIST
35608: PUSH
35609: LD_INT 3
35611: PUSH
35612: LD_INT 2
35614: PUSH
35615: EMPTY
35616: LIST
35617: LIST
35618: PUSH
35619: LD_INT 2
35621: PUSH
35622: LD_INT 3
35624: PUSH
35625: EMPTY
35626: LIST
35627: LIST
35628: PUSH
35629: EMPTY
35630: LIST
35631: LIST
35632: LIST
35633: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
35634: LD_ADDR_VAR 0 44
35638: PUSH
35639: LD_INT 0
35641: PUSH
35642: LD_INT 2
35644: PUSH
35645: EMPTY
35646: LIST
35647: LIST
35648: PUSH
35649: LD_INT 1
35651: PUSH
35652: LD_INT 3
35654: PUSH
35655: EMPTY
35656: LIST
35657: LIST
35658: PUSH
35659: LD_INT 1
35661: NEG
35662: PUSH
35663: LD_INT 2
35665: PUSH
35666: EMPTY
35667: LIST
35668: LIST
35669: PUSH
35670: EMPTY
35671: LIST
35672: LIST
35673: LIST
35674: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
35675: LD_ADDR_VAR 0 45
35679: PUSH
35680: LD_INT 2
35682: NEG
35683: PUSH
35684: LD_INT 0
35686: PUSH
35687: EMPTY
35688: LIST
35689: LIST
35690: PUSH
35691: LD_INT 2
35693: NEG
35694: PUSH
35695: LD_INT 1
35697: PUSH
35698: EMPTY
35699: LIST
35700: LIST
35701: PUSH
35702: LD_INT 3
35704: NEG
35705: PUSH
35706: LD_INT 1
35708: NEG
35709: PUSH
35710: EMPTY
35711: LIST
35712: LIST
35713: PUSH
35714: EMPTY
35715: LIST
35716: LIST
35717: LIST
35718: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
35719: LD_ADDR_VAR 0 46
35723: PUSH
35724: LD_INT 2
35726: NEG
35727: PUSH
35728: LD_INT 2
35730: NEG
35731: PUSH
35732: EMPTY
35733: LIST
35734: LIST
35735: PUSH
35736: LD_INT 2
35738: NEG
35739: PUSH
35740: LD_INT 3
35742: NEG
35743: PUSH
35744: EMPTY
35745: LIST
35746: LIST
35747: PUSH
35748: LD_INT 3
35750: NEG
35751: PUSH
35752: LD_INT 2
35754: NEG
35755: PUSH
35756: EMPTY
35757: LIST
35758: LIST
35759: PUSH
35760: EMPTY
35761: LIST
35762: LIST
35763: LIST
35764: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
35765: LD_ADDR_VAR 0 47
35769: PUSH
35770: LD_INT 2
35772: NEG
35773: PUSH
35774: LD_INT 3
35776: NEG
35777: PUSH
35778: EMPTY
35779: LIST
35780: LIST
35781: PUSH
35782: LD_INT 1
35784: NEG
35785: PUSH
35786: LD_INT 3
35788: NEG
35789: PUSH
35790: EMPTY
35791: LIST
35792: LIST
35793: PUSH
35794: EMPTY
35795: LIST
35796: LIST
35797: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
35798: LD_ADDR_VAR 0 48
35802: PUSH
35803: LD_INT 1
35805: PUSH
35806: LD_INT 2
35808: NEG
35809: PUSH
35810: EMPTY
35811: LIST
35812: LIST
35813: PUSH
35814: LD_INT 2
35816: PUSH
35817: LD_INT 1
35819: NEG
35820: PUSH
35821: EMPTY
35822: LIST
35823: LIST
35824: PUSH
35825: EMPTY
35826: LIST
35827: LIST
35828: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
35829: LD_ADDR_VAR 0 49
35833: PUSH
35834: LD_INT 3
35836: PUSH
35837: LD_INT 1
35839: PUSH
35840: EMPTY
35841: LIST
35842: LIST
35843: PUSH
35844: LD_INT 3
35846: PUSH
35847: LD_INT 2
35849: PUSH
35850: EMPTY
35851: LIST
35852: LIST
35853: PUSH
35854: EMPTY
35855: LIST
35856: LIST
35857: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
35858: LD_ADDR_VAR 0 50
35862: PUSH
35863: LD_INT 2
35865: PUSH
35866: LD_INT 3
35868: PUSH
35869: EMPTY
35870: LIST
35871: LIST
35872: PUSH
35873: LD_INT 1
35875: PUSH
35876: LD_INT 3
35878: PUSH
35879: EMPTY
35880: LIST
35881: LIST
35882: PUSH
35883: EMPTY
35884: LIST
35885: LIST
35886: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
35887: LD_ADDR_VAR 0 51
35891: PUSH
35892: LD_INT 1
35894: NEG
35895: PUSH
35896: LD_INT 2
35898: PUSH
35899: EMPTY
35900: LIST
35901: LIST
35902: PUSH
35903: LD_INT 2
35905: NEG
35906: PUSH
35907: LD_INT 1
35909: PUSH
35910: EMPTY
35911: LIST
35912: LIST
35913: PUSH
35914: EMPTY
35915: LIST
35916: LIST
35917: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
35918: LD_ADDR_VAR 0 52
35922: PUSH
35923: LD_INT 3
35925: NEG
35926: PUSH
35927: LD_INT 1
35929: NEG
35930: PUSH
35931: EMPTY
35932: LIST
35933: LIST
35934: PUSH
35935: LD_INT 3
35937: NEG
35938: PUSH
35939: LD_INT 2
35941: NEG
35942: PUSH
35943: EMPTY
35944: LIST
35945: LIST
35946: PUSH
35947: EMPTY
35948: LIST
35949: LIST
35950: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
35951: LD_ADDR_VAR 0 53
35955: PUSH
35956: LD_INT 1
35958: NEG
35959: PUSH
35960: LD_INT 3
35962: NEG
35963: PUSH
35964: EMPTY
35965: LIST
35966: LIST
35967: PUSH
35968: LD_INT 0
35970: PUSH
35971: LD_INT 3
35973: NEG
35974: PUSH
35975: EMPTY
35976: LIST
35977: LIST
35978: PUSH
35979: LD_INT 1
35981: PUSH
35982: LD_INT 2
35984: NEG
35985: PUSH
35986: EMPTY
35987: LIST
35988: LIST
35989: PUSH
35990: EMPTY
35991: LIST
35992: LIST
35993: LIST
35994: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
35995: LD_ADDR_VAR 0 54
35999: PUSH
36000: LD_INT 2
36002: PUSH
36003: LD_INT 1
36005: NEG
36006: PUSH
36007: EMPTY
36008: LIST
36009: LIST
36010: PUSH
36011: LD_INT 3
36013: PUSH
36014: LD_INT 0
36016: PUSH
36017: EMPTY
36018: LIST
36019: LIST
36020: PUSH
36021: LD_INT 3
36023: PUSH
36024: LD_INT 1
36026: PUSH
36027: EMPTY
36028: LIST
36029: LIST
36030: PUSH
36031: EMPTY
36032: LIST
36033: LIST
36034: LIST
36035: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
36036: LD_ADDR_VAR 0 55
36040: PUSH
36041: LD_INT 3
36043: PUSH
36044: LD_INT 2
36046: PUSH
36047: EMPTY
36048: LIST
36049: LIST
36050: PUSH
36051: LD_INT 3
36053: PUSH
36054: LD_INT 3
36056: PUSH
36057: EMPTY
36058: LIST
36059: LIST
36060: PUSH
36061: LD_INT 2
36063: PUSH
36064: LD_INT 3
36066: PUSH
36067: EMPTY
36068: LIST
36069: LIST
36070: PUSH
36071: EMPTY
36072: LIST
36073: LIST
36074: LIST
36075: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
36076: LD_ADDR_VAR 0 56
36080: PUSH
36081: LD_INT 1
36083: PUSH
36084: LD_INT 3
36086: PUSH
36087: EMPTY
36088: LIST
36089: LIST
36090: PUSH
36091: LD_INT 0
36093: PUSH
36094: LD_INT 3
36096: PUSH
36097: EMPTY
36098: LIST
36099: LIST
36100: PUSH
36101: LD_INT 1
36103: NEG
36104: PUSH
36105: LD_INT 2
36107: PUSH
36108: EMPTY
36109: LIST
36110: LIST
36111: PUSH
36112: EMPTY
36113: LIST
36114: LIST
36115: LIST
36116: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
36117: LD_ADDR_VAR 0 57
36121: PUSH
36122: LD_INT 2
36124: NEG
36125: PUSH
36126: LD_INT 1
36128: PUSH
36129: EMPTY
36130: LIST
36131: LIST
36132: PUSH
36133: LD_INT 3
36135: NEG
36136: PUSH
36137: LD_INT 0
36139: PUSH
36140: EMPTY
36141: LIST
36142: LIST
36143: PUSH
36144: LD_INT 3
36146: NEG
36147: PUSH
36148: LD_INT 1
36150: NEG
36151: PUSH
36152: EMPTY
36153: LIST
36154: LIST
36155: PUSH
36156: EMPTY
36157: LIST
36158: LIST
36159: LIST
36160: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
36161: LD_ADDR_VAR 0 58
36165: PUSH
36166: LD_INT 2
36168: NEG
36169: PUSH
36170: LD_INT 3
36172: NEG
36173: PUSH
36174: EMPTY
36175: LIST
36176: LIST
36177: PUSH
36178: LD_INT 3
36180: NEG
36181: PUSH
36182: LD_INT 2
36184: NEG
36185: PUSH
36186: EMPTY
36187: LIST
36188: LIST
36189: PUSH
36190: LD_INT 3
36192: NEG
36193: PUSH
36194: LD_INT 3
36196: NEG
36197: PUSH
36198: EMPTY
36199: LIST
36200: LIST
36201: PUSH
36202: EMPTY
36203: LIST
36204: LIST
36205: LIST
36206: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
36207: LD_ADDR_VAR 0 59
36211: PUSH
36212: LD_INT 1
36214: NEG
36215: PUSH
36216: LD_INT 2
36218: NEG
36219: PUSH
36220: EMPTY
36221: LIST
36222: LIST
36223: PUSH
36224: LD_INT 0
36226: PUSH
36227: LD_INT 2
36229: NEG
36230: PUSH
36231: EMPTY
36232: LIST
36233: LIST
36234: PUSH
36235: LD_INT 1
36237: PUSH
36238: LD_INT 1
36240: NEG
36241: PUSH
36242: EMPTY
36243: LIST
36244: LIST
36245: PUSH
36246: EMPTY
36247: LIST
36248: LIST
36249: LIST
36250: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
36251: LD_ADDR_VAR 0 60
36255: PUSH
36256: LD_INT 1
36258: PUSH
36259: LD_INT 1
36261: NEG
36262: PUSH
36263: EMPTY
36264: LIST
36265: LIST
36266: PUSH
36267: LD_INT 2
36269: PUSH
36270: LD_INT 0
36272: PUSH
36273: EMPTY
36274: LIST
36275: LIST
36276: PUSH
36277: LD_INT 2
36279: PUSH
36280: LD_INT 1
36282: PUSH
36283: EMPTY
36284: LIST
36285: LIST
36286: PUSH
36287: EMPTY
36288: LIST
36289: LIST
36290: LIST
36291: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
36292: LD_ADDR_VAR 0 61
36296: PUSH
36297: LD_INT 2
36299: PUSH
36300: LD_INT 1
36302: PUSH
36303: EMPTY
36304: LIST
36305: LIST
36306: PUSH
36307: LD_INT 2
36309: PUSH
36310: LD_INT 2
36312: PUSH
36313: EMPTY
36314: LIST
36315: LIST
36316: PUSH
36317: LD_INT 1
36319: PUSH
36320: LD_INT 2
36322: PUSH
36323: EMPTY
36324: LIST
36325: LIST
36326: PUSH
36327: EMPTY
36328: LIST
36329: LIST
36330: LIST
36331: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
36332: LD_ADDR_VAR 0 62
36336: PUSH
36337: LD_INT 1
36339: PUSH
36340: LD_INT 2
36342: PUSH
36343: EMPTY
36344: LIST
36345: LIST
36346: PUSH
36347: LD_INT 0
36349: PUSH
36350: LD_INT 2
36352: PUSH
36353: EMPTY
36354: LIST
36355: LIST
36356: PUSH
36357: LD_INT 1
36359: NEG
36360: PUSH
36361: LD_INT 1
36363: PUSH
36364: EMPTY
36365: LIST
36366: LIST
36367: PUSH
36368: EMPTY
36369: LIST
36370: LIST
36371: LIST
36372: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
36373: LD_ADDR_VAR 0 63
36377: PUSH
36378: LD_INT 1
36380: NEG
36381: PUSH
36382: LD_INT 1
36384: PUSH
36385: EMPTY
36386: LIST
36387: LIST
36388: PUSH
36389: LD_INT 2
36391: NEG
36392: PUSH
36393: LD_INT 0
36395: PUSH
36396: EMPTY
36397: LIST
36398: LIST
36399: PUSH
36400: LD_INT 2
36402: NEG
36403: PUSH
36404: LD_INT 1
36406: NEG
36407: PUSH
36408: EMPTY
36409: LIST
36410: LIST
36411: PUSH
36412: EMPTY
36413: LIST
36414: LIST
36415: LIST
36416: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36417: LD_ADDR_VAR 0 64
36421: PUSH
36422: LD_INT 1
36424: NEG
36425: PUSH
36426: LD_INT 2
36428: NEG
36429: PUSH
36430: EMPTY
36431: LIST
36432: LIST
36433: PUSH
36434: LD_INT 2
36436: NEG
36437: PUSH
36438: LD_INT 1
36440: NEG
36441: PUSH
36442: EMPTY
36443: LIST
36444: LIST
36445: PUSH
36446: LD_INT 2
36448: NEG
36449: PUSH
36450: LD_INT 2
36452: NEG
36453: PUSH
36454: EMPTY
36455: LIST
36456: LIST
36457: PUSH
36458: EMPTY
36459: LIST
36460: LIST
36461: LIST
36462: ST_TO_ADDR
// end ; 2 :
36463: GO 39729
36465: LD_INT 2
36467: DOUBLE
36468: EQUAL
36469: IFTRUE 36473
36471: GO 39728
36473: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
36474: LD_ADDR_VAR 0 29
36478: PUSH
36479: LD_INT 4
36481: PUSH
36482: LD_INT 0
36484: PUSH
36485: EMPTY
36486: LIST
36487: LIST
36488: PUSH
36489: LD_INT 4
36491: PUSH
36492: LD_INT 1
36494: NEG
36495: PUSH
36496: EMPTY
36497: LIST
36498: LIST
36499: PUSH
36500: LD_INT 5
36502: PUSH
36503: LD_INT 0
36505: PUSH
36506: EMPTY
36507: LIST
36508: LIST
36509: PUSH
36510: LD_INT 5
36512: PUSH
36513: LD_INT 1
36515: PUSH
36516: EMPTY
36517: LIST
36518: LIST
36519: PUSH
36520: LD_INT 4
36522: PUSH
36523: LD_INT 1
36525: PUSH
36526: EMPTY
36527: LIST
36528: LIST
36529: PUSH
36530: LD_INT 3
36532: PUSH
36533: LD_INT 0
36535: PUSH
36536: EMPTY
36537: LIST
36538: LIST
36539: PUSH
36540: LD_INT 3
36542: PUSH
36543: LD_INT 1
36545: NEG
36546: PUSH
36547: EMPTY
36548: LIST
36549: LIST
36550: PUSH
36551: LD_INT 3
36553: PUSH
36554: LD_INT 2
36556: NEG
36557: PUSH
36558: EMPTY
36559: LIST
36560: LIST
36561: PUSH
36562: LD_INT 5
36564: PUSH
36565: LD_INT 2
36567: PUSH
36568: EMPTY
36569: LIST
36570: LIST
36571: PUSH
36572: LD_INT 3
36574: PUSH
36575: LD_INT 3
36577: PUSH
36578: EMPTY
36579: LIST
36580: LIST
36581: PUSH
36582: LD_INT 3
36584: PUSH
36585: LD_INT 2
36587: PUSH
36588: EMPTY
36589: LIST
36590: LIST
36591: PUSH
36592: LD_INT 4
36594: PUSH
36595: LD_INT 3
36597: PUSH
36598: EMPTY
36599: LIST
36600: LIST
36601: PUSH
36602: LD_INT 4
36604: PUSH
36605: LD_INT 4
36607: PUSH
36608: EMPTY
36609: LIST
36610: LIST
36611: PUSH
36612: LD_INT 3
36614: PUSH
36615: LD_INT 4
36617: PUSH
36618: EMPTY
36619: LIST
36620: LIST
36621: PUSH
36622: LD_INT 2
36624: PUSH
36625: LD_INT 3
36627: PUSH
36628: EMPTY
36629: LIST
36630: LIST
36631: PUSH
36632: LD_INT 2
36634: PUSH
36635: LD_INT 2
36637: PUSH
36638: EMPTY
36639: LIST
36640: LIST
36641: PUSH
36642: LD_INT 4
36644: PUSH
36645: LD_INT 2
36647: PUSH
36648: EMPTY
36649: LIST
36650: LIST
36651: PUSH
36652: LD_INT 2
36654: PUSH
36655: LD_INT 4
36657: PUSH
36658: EMPTY
36659: LIST
36660: LIST
36661: PUSH
36662: LD_INT 0
36664: PUSH
36665: LD_INT 4
36667: PUSH
36668: EMPTY
36669: LIST
36670: LIST
36671: PUSH
36672: LD_INT 0
36674: PUSH
36675: LD_INT 3
36677: PUSH
36678: EMPTY
36679: LIST
36680: LIST
36681: PUSH
36682: LD_INT 1
36684: PUSH
36685: LD_INT 4
36687: PUSH
36688: EMPTY
36689: LIST
36690: LIST
36691: PUSH
36692: LD_INT 1
36694: PUSH
36695: LD_INT 5
36697: PUSH
36698: EMPTY
36699: LIST
36700: LIST
36701: PUSH
36702: LD_INT 0
36704: PUSH
36705: LD_INT 5
36707: PUSH
36708: EMPTY
36709: LIST
36710: LIST
36711: PUSH
36712: LD_INT 1
36714: NEG
36715: PUSH
36716: LD_INT 4
36718: PUSH
36719: EMPTY
36720: LIST
36721: LIST
36722: PUSH
36723: LD_INT 1
36725: NEG
36726: PUSH
36727: LD_INT 3
36729: PUSH
36730: EMPTY
36731: LIST
36732: LIST
36733: PUSH
36734: LD_INT 2
36736: PUSH
36737: LD_INT 5
36739: PUSH
36740: EMPTY
36741: LIST
36742: LIST
36743: PUSH
36744: LD_INT 2
36746: NEG
36747: PUSH
36748: LD_INT 3
36750: PUSH
36751: EMPTY
36752: LIST
36753: LIST
36754: PUSH
36755: LD_INT 3
36757: NEG
36758: PUSH
36759: LD_INT 0
36761: PUSH
36762: EMPTY
36763: LIST
36764: LIST
36765: PUSH
36766: LD_INT 3
36768: NEG
36769: PUSH
36770: LD_INT 1
36772: NEG
36773: PUSH
36774: EMPTY
36775: LIST
36776: LIST
36777: PUSH
36778: LD_INT 2
36780: NEG
36781: PUSH
36782: LD_INT 0
36784: PUSH
36785: EMPTY
36786: LIST
36787: LIST
36788: PUSH
36789: LD_INT 2
36791: NEG
36792: PUSH
36793: LD_INT 1
36795: PUSH
36796: EMPTY
36797: LIST
36798: LIST
36799: PUSH
36800: LD_INT 3
36802: NEG
36803: PUSH
36804: LD_INT 1
36806: PUSH
36807: EMPTY
36808: LIST
36809: LIST
36810: PUSH
36811: LD_INT 4
36813: NEG
36814: PUSH
36815: LD_INT 0
36817: PUSH
36818: EMPTY
36819: LIST
36820: LIST
36821: PUSH
36822: LD_INT 4
36824: NEG
36825: PUSH
36826: LD_INT 1
36828: NEG
36829: PUSH
36830: EMPTY
36831: LIST
36832: LIST
36833: PUSH
36834: LD_INT 4
36836: NEG
36837: PUSH
36838: LD_INT 2
36840: NEG
36841: PUSH
36842: EMPTY
36843: LIST
36844: LIST
36845: PUSH
36846: LD_INT 2
36848: NEG
36849: PUSH
36850: LD_INT 2
36852: PUSH
36853: EMPTY
36854: LIST
36855: LIST
36856: PUSH
36857: LD_INT 4
36859: NEG
36860: PUSH
36861: LD_INT 4
36863: NEG
36864: PUSH
36865: EMPTY
36866: LIST
36867: LIST
36868: PUSH
36869: LD_INT 4
36871: NEG
36872: PUSH
36873: LD_INT 5
36875: NEG
36876: PUSH
36877: EMPTY
36878: LIST
36879: LIST
36880: PUSH
36881: LD_INT 3
36883: NEG
36884: PUSH
36885: LD_INT 4
36887: NEG
36888: PUSH
36889: EMPTY
36890: LIST
36891: LIST
36892: PUSH
36893: LD_INT 3
36895: NEG
36896: PUSH
36897: LD_INT 3
36899: NEG
36900: PUSH
36901: EMPTY
36902: LIST
36903: LIST
36904: PUSH
36905: LD_INT 4
36907: NEG
36908: PUSH
36909: LD_INT 3
36911: NEG
36912: PUSH
36913: EMPTY
36914: LIST
36915: LIST
36916: PUSH
36917: LD_INT 5
36919: NEG
36920: PUSH
36921: LD_INT 4
36923: NEG
36924: PUSH
36925: EMPTY
36926: LIST
36927: LIST
36928: PUSH
36929: LD_INT 5
36931: NEG
36932: PUSH
36933: LD_INT 5
36935: NEG
36936: PUSH
36937: EMPTY
36938: LIST
36939: LIST
36940: PUSH
36941: LD_INT 3
36943: NEG
36944: PUSH
36945: LD_INT 5
36947: NEG
36948: PUSH
36949: EMPTY
36950: LIST
36951: LIST
36952: PUSH
36953: LD_INT 5
36955: NEG
36956: PUSH
36957: LD_INT 3
36959: NEG
36960: PUSH
36961: EMPTY
36962: LIST
36963: LIST
36964: PUSH
36965: EMPTY
36966: LIST
36967: LIST
36968: LIST
36969: LIST
36970: LIST
36971: LIST
36972: LIST
36973: LIST
36974: LIST
36975: LIST
36976: LIST
36977: LIST
36978: LIST
36979: LIST
36980: LIST
36981: LIST
36982: LIST
36983: LIST
36984: LIST
36985: LIST
36986: LIST
36987: LIST
36988: LIST
36989: LIST
36990: LIST
36991: LIST
36992: LIST
36993: LIST
36994: LIST
36995: LIST
36996: LIST
36997: LIST
36998: LIST
36999: LIST
37000: LIST
37001: LIST
37002: LIST
37003: LIST
37004: LIST
37005: LIST
37006: LIST
37007: LIST
37008: LIST
37009: LIST
37010: LIST
37011: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
37012: LD_ADDR_VAR 0 30
37016: PUSH
37017: LD_INT 4
37019: PUSH
37020: LD_INT 4
37022: PUSH
37023: EMPTY
37024: LIST
37025: LIST
37026: PUSH
37027: LD_INT 4
37029: PUSH
37030: LD_INT 3
37032: PUSH
37033: EMPTY
37034: LIST
37035: LIST
37036: PUSH
37037: LD_INT 5
37039: PUSH
37040: LD_INT 4
37042: PUSH
37043: EMPTY
37044: LIST
37045: LIST
37046: PUSH
37047: LD_INT 5
37049: PUSH
37050: LD_INT 5
37052: PUSH
37053: EMPTY
37054: LIST
37055: LIST
37056: PUSH
37057: LD_INT 4
37059: PUSH
37060: LD_INT 5
37062: PUSH
37063: EMPTY
37064: LIST
37065: LIST
37066: PUSH
37067: LD_INT 3
37069: PUSH
37070: LD_INT 4
37072: PUSH
37073: EMPTY
37074: LIST
37075: LIST
37076: PUSH
37077: LD_INT 3
37079: PUSH
37080: LD_INT 3
37082: PUSH
37083: EMPTY
37084: LIST
37085: LIST
37086: PUSH
37087: LD_INT 5
37089: PUSH
37090: LD_INT 3
37092: PUSH
37093: EMPTY
37094: LIST
37095: LIST
37096: PUSH
37097: LD_INT 3
37099: PUSH
37100: LD_INT 5
37102: PUSH
37103: EMPTY
37104: LIST
37105: LIST
37106: PUSH
37107: LD_INT 0
37109: PUSH
37110: LD_INT 3
37112: PUSH
37113: EMPTY
37114: LIST
37115: LIST
37116: PUSH
37117: LD_INT 0
37119: PUSH
37120: LD_INT 2
37122: PUSH
37123: EMPTY
37124: LIST
37125: LIST
37126: PUSH
37127: LD_INT 1
37129: PUSH
37130: LD_INT 3
37132: PUSH
37133: EMPTY
37134: LIST
37135: LIST
37136: PUSH
37137: LD_INT 1
37139: PUSH
37140: LD_INT 4
37142: PUSH
37143: EMPTY
37144: LIST
37145: LIST
37146: PUSH
37147: LD_INT 0
37149: PUSH
37150: LD_INT 4
37152: PUSH
37153: EMPTY
37154: LIST
37155: LIST
37156: PUSH
37157: LD_INT 1
37159: NEG
37160: PUSH
37161: LD_INT 3
37163: PUSH
37164: EMPTY
37165: LIST
37166: LIST
37167: PUSH
37168: LD_INT 1
37170: NEG
37171: PUSH
37172: LD_INT 2
37174: PUSH
37175: EMPTY
37176: LIST
37177: LIST
37178: PUSH
37179: LD_INT 2
37181: PUSH
37182: LD_INT 4
37184: PUSH
37185: EMPTY
37186: LIST
37187: LIST
37188: PUSH
37189: LD_INT 2
37191: NEG
37192: PUSH
37193: LD_INT 2
37195: PUSH
37196: EMPTY
37197: LIST
37198: LIST
37199: PUSH
37200: LD_INT 4
37202: NEG
37203: PUSH
37204: LD_INT 0
37206: PUSH
37207: EMPTY
37208: LIST
37209: LIST
37210: PUSH
37211: LD_INT 4
37213: NEG
37214: PUSH
37215: LD_INT 1
37217: NEG
37218: PUSH
37219: EMPTY
37220: LIST
37221: LIST
37222: PUSH
37223: LD_INT 3
37225: NEG
37226: PUSH
37227: LD_INT 0
37229: PUSH
37230: EMPTY
37231: LIST
37232: LIST
37233: PUSH
37234: LD_INT 3
37236: NEG
37237: PUSH
37238: LD_INT 1
37240: PUSH
37241: EMPTY
37242: LIST
37243: LIST
37244: PUSH
37245: LD_INT 4
37247: NEG
37248: PUSH
37249: LD_INT 1
37251: PUSH
37252: EMPTY
37253: LIST
37254: LIST
37255: PUSH
37256: LD_INT 5
37258: NEG
37259: PUSH
37260: LD_INT 0
37262: PUSH
37263: EMPTY
37264: LIST
37265: LIST
37266: PUSH
37267: LD_INT 5
37269: NEG
37270: PUSH
37271: LD_INT 1
37273: NEG
37274: PUSH
37275: EMPTY
37276: LIST
37277: LIST
37278: PUSH
37279: LD_INT 5
37281: NEG
37282: PUSH
37283: LD_INT 2
37285: NEG
37286: PUSH
37287: EMPTY
37288: LIST
37289: LIST
37290: PUSH
37291: LD_INT 3
37293: NEG
37294: PUSH
37295: LD_INT 2
37297: PUSH
37298: EMPTY
37299: LIST
37300: LIST
37301: PUSH
37302: LD_INT 3
37304: NEG
37305: PUSH
37306: LD_INT 3
37308: NEG
37309: PUSH
37310: EMPTY
37311: LIST
37312: LIST
37313: PUSH
37314: LD_INT 3
37316: NEG
37317: PUSH
37318: LD_INT 4
37320: NEG
37321: PUSH
37322: EMPTY
37323: LIST
37324: LIST
37325: PUSH
37326: LD_INT 2
37328: NEG
37329: PUSH
37330: LD_INT 3
37332: NEG
37333: PUSH
37334: EMPTY
37335: LIST
37336: LIST
37337: PUSH
37338: LD_INT 2
37340: NEG
37341: PUSH
37342: LD_INT 2
37344: NEG
37345: PUSH
37346: EMPTY
37347: LIST
37348: LIST
37349: PUSH
37350: LD_INT 3
37352: NEG
37353: PUSH
37354: LD_INT 2
37356: NEG
37357: PUSH
37358: EMPTY
37359: LIST
37360: LIST
37361: PUSH
37362: LD_INT 4
37364: NEG
37365: PUSH
37366: LD_INT 3
37368: NEG
37369: PUSH
37370: EMPTY
37371: LIST
37372: LIST
37373: PUSH
37374: LD_INT 4
37376: NEG
37377: PUSH
37378: LD_INT 4
37380: NEG
37381: PUSH
37382: EMPTY
37383: LIST
37384: LIST
37385: PUSH
37386: LD_INT 2
37388: NEG
37389: PUSH
37390: LD_INT 4
37392: NEG
37393: PUSH
37394: EMPTY
37395: LIST
37396: LIST
37397: PUSH
37398: LD_INT 4
37400: NEG
37401: PUSH
37402: LD_INT 2
37404: NEG
37405: PUSH
37406: EMPTY
37407: LIST
37408: LIST
37409: PUSH
37410: LD_INT 0
37412: PUSH
37413: LD_INT 4
37415: NEG
37416: PUSH
37417: EMPTY
37418: LIST
37419: LIST
37420: PUSH
37421: LD_INT 0
37423: PUSH
37424: LD_INT 5
37426: NEG
37427: PUSH
37428: EMPTY
37429: LIST
37430: LIST
37431: PUSH
37432: LD_INT 1
37434: PUSH
37435: LD_INT 4
37437: NEG
37438: PUSH
37439: EMPTY
37440: LIST
37441: LIST
37442: PUSH
37443: LD_INT 1
37445: PUSH
37446: LD_INT 3
37448: NEG
37449: PUSH
37450: EMPTY
37451: LIST
37452: LIST
37453: PUSH
37454: LD_INT 0
37456: PUSH
37457: LD_INT 3
37459: NEG
37460: PUSH
37461: EMPTY
37462: LIST
37463: LIST
37464: PUSH
37465: LD_INT 1
37467: NEG
37468: PUSH
37469: LD_INT 4
37471: NEG
37472: PUSH
37473: EMPTY
37474: LIST
37475: LIST
37476: PUSH
37477: LD_INT 1
37479: NEG
37480: PUSH
37481: LD_INT 5
37483: NEG
37484: PUSH
37485: EMPTY
37486: LIST
37487: LIST
37488: PUSH
37489: LD_INT 2
37491: PUSH
37492: LD_INT 3
37494: NEG
37495: PUSH
37496: EMPTY
37497: LIST
37498: LIST
37499: PUSH
37500: LD_INT 2
37502: NEG
37503: PUSH
37504: LD_INT 5
37506: NEG
37507: PUSH
37508: EMPTY
37509: LIST
37510: LIST
37511: PUSH
37512: EMPTY
37513: LIST
37514: LIST
37515: LIST
37516: LIST
37517: LIST
37518: LIST
37519: LIST
37520: LIST
37521: LIST
37522: LIST
37523: LIST
37524: LIST
37525: LIST
37526: LIST
37527: LIST
37528: LIST
37529: LIST
37530: LIST
37531: LIST
37532: LIST
37533: LIST
37534: LIST
37535: LIST
37536: LIST
37537: LIST
37538: LIST
37539: LIST
37540: LIST
37541: LIST
37542: LIST
37543: LIST
37544: LIST
37545: LIST
37546: LIST
37547: LIST
37548: LIST
37549: LIST
37550: LIST
37551: LIST
37552: LIST
37553: LIST
37554: LIST
37555: LIST
37556: LIST
37557: LIST
37558: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
37559: LD_ADDR_VAR 0 31
37563: PUSH
37564: LD_INT 0
37566: PUSH
37567: LD_INT 4
37569: PUSH
37570: EMPTY
37571: LIST
37572: LIST
37573: PUSH
37574: LD_INT 0
37576: PUSH
37577: LD_INT 3
37579: PUSH
37580: EMPTY
37581: LIST
37582: LIST
37583: PUSH
37584: LD_INT 1
37586: PUSH
37587: LD_INT 4
37589: PUSH
37590: EMPTY
37591: LIST
37592: LIST
37593: PUSH
37594: LD_INT 1
37596: PUSH
37597: LD_INT 5
37599: PUSH
37600: EMPTY
37601: LIST
37602: LIST
37603: PUSH
37604: LD_INT 0
37606: PUSH
37607: LD_INT 5
37609: PUSH
37610: EMPTY
37611: LIST
37612: LIST
37613: PUSH
37614: LD_INT 1
37616: NEG
37617: PUSH
37618: LD_INT 4
37620: PUSH
37621: EMPTY
37622: LIST
37623: LIST
37624: PUSH
37625: LD_INT 1
37627: NEG
37628: PUSH
37629: LD_INT 3
37631: PUSH
37632: EMPTY
37633: LIST
37634: LIST
37635: PUSH
37636: LD_INT 2
37638: PUSH
37639: LD_INT 5
37641: PUSH
37642: EMPTY
37643: LIST
37644: LIST
37645: PUSH
37646: LD_INT 2
37648: NEG
37649: PUSH
37650: LD_INT 3
37652: PUSH
37653: EMPTY
37654: LIST
37655: LIST
37656: PUSH
37657: LD_INT 3
37659: NEG
37660: PUSH
37661: LD_INT 0
37663: PUSH
37664: EMPTY
37665: LIST
37666: LIST
37667: PUSH
37668: LD_INT 3
37670: NEG
37671: PUSH
37672: LD_INT 1
37674: NEG
37675: PUSH
37676: EMPTY
37677: LIST
37678: LIST
37679: PUSH
37680: LD_INT 2
37682: NEG
37683: PUSH
37684: LD_INT 0
37686: PUSH
37687: EMPTY
37688: LIST
37689: LIST
37690: PUSH
37691: LD_INT 2
37693: NEG
37694: PUSH
37695: LD_INT 1
37697: PUSH
37698: EMPTY
37699: LIST
37700: LIST
37701: PUSH
37702: LD_INT 3
37704: NEG
37705: PUSH
37706: LD_INT 1
37708: PUSH
37709: EMPTY
37710: LIST
37711: LIST
37712: PUSH
37713: LD_INT 4
37715: NEG
37716: PUSH
37717: LD_INT 0
37719: PUSH
37720: EMPTY
37721: LIST
37722: LIST
37723: PUSH
37724: LD_INT 4
37726: NEG
37727: PUSH
37728: LD_INT 1
37730: NEG
37731: PUSH
37732: EMPTY
37733: LIST
37734: LIST
37735: PUSH
37736: LD_INT 4
37738: NEG
37739: PUSH
37740: LD_INT 2
37742: NEG
37743: PUSH
37744: EMPTY
37745: LIST
37746: LIST
37747: PUSH
37748: LD_INT 2
37750: NEG
37751: PUSH
37752: LD_INT 2
37754: PUSH
37755: EMPTY
37756: LIST
37757: LIST
37758: PUSH
37759: LD_INT 4
37761: NEG
37762: PUSH
37763: LD_INT 4
37765: NEG
37766: PUSH
37767: EMPTY
37768: LIST
37769: LIST
37770: PUSH
37771: LD_INT 4
37773: NEG
37774: PUSH
37775: LD_INT 5
37777: NEG
37778: PUSH
37779: EMPTY
37780: LIST
37781: LIST
37782: PUSH
37783: LD_INT 3
37785: NEG
37786: PUSH
37787: LD_INT 4
37789: NEG
37790: PUSH
37791: EMPTY
37792: LIST
37793: LIST
37794: PUSH
37795: LD_INT 3
37797: NEG
37798: PUSH
37799: LD_INT 3
37801: NEG
37802: PUSH
37803: EMPTY
37804: LIST
37805: LIST
37806: PUSH
37807: LD_INT 4
37809: NEG
37810: PUSH
37811: LD_INT 3
37813: NEG
37814: PUSH
37815: EMPTY
37816: LIST
37817: LIST
37818: PUSH
37819: LD_INT 5
37821: NEG
37822: PUSH
37823: LD_INT 4
37825: NEG
37826: PUSH
37827: EMPTY
37828: LIST
37829: LIST
37830: PUSH
37831: LD_INT 5
37833: NEG
37834: PUSH
37835: LD_INT 5
37837: NEG
37838: PUSH
37839: EMPTY
37840: LIST
37841: LIST
37842: PUSH
37843: LD_INT 3
37845: NEG
37846: PUSH
37847: LD_INT 5
37849: NEG
37850: PUSH
37851: EMPTY
37852: LIST
37853: LIST
37854: PUSH
37855: LD_INT 5
37857: NEG
37858: PUSH
37859: LD_INT 3
37861: NEG
37862: PUSH
37863: EMPTY
37864: LIST
37865: LIST
37866: PUSH
37867: LD_INT 0
37869: PUSH
37870: LD_INT 3
37872: NEG
37873: PUSH
37874: EMPTY
37875: LIST
37876: LIST
37877: PUSH
37878: LD_INT 0
37880: PUSH
37881: LD_INT 4
37883: NEG
37884: PUSH
37885: EMPTY
37886: LIST
37887: LIST
37888: PUSH
37889: LD_INT 1
37891: PUSH
37892: LD_INT 3
37894: NEG
37895: PUSH
37896: EMPTY
37897: LIST
37898: LIST
37899: PUSH
37900: LD_INT 1
37902: PUSH
37903: LD_INT 2
37905: NEG
37906: PUSH
37907: EMPTY
37908: LIST
37909: LIST
37910: PUSH
37911: LD_INT 0
37913: PUSH
37914: LD_INT 2
37916: NEG
37917: PUSH
37918: EMPTY
37919: LIST
37920: LIST
37921: PUSH
37922: LD_INT 1
37924: NEG
37925: PUSH
37926: LD_INT 3
37928: NEG
37929: PUSH
37930: EMPTY
37931: LIST
37932: LIST
37933: PUSH
37934: LD_INT 1
37936: NEG
37937: PUSH
37938: LD_INT 4
37940: NEG
37941: PUSH
37942: EMPTY
37943: LIST
37944: LIST
37945: PUSH
37946: LD_INT 2
37948: PUSH
37949: LD_INT 2
37951: NEG
37952: PUSH
37953: EMPTY
37954: LIST
37955: LIST
37956: PUSH
37957: LD_INT 2
37959: NEG
37960: PUSH
37961: LD_INT 4
37963: NEG
37964: PUSH
37965: EMPTY
37966: LIST
37967: LIST
37968: PUSH
37969: LD_INT 4
37971: PUSH
37972: LD_INT 0
37974: PUSH
37975: EMPTY
37976: LIST
37977: LIST
37978: PUSH
37979: LD_INT 4
37981: PUSH
37982: LD_INT 1
37984: NEG
37985: PUSH
37986: EMPTY
37987: LIST
37988: LIST
37989: PUSH
37990: LD_INT 5
37992: PUSH
37993: LD_INT 0
37995: PUSH
37996: EMPTY
37997: LIST
37998: LIST
37999: PUSH
38000: LD_INT 5
38002: PUSH
38003: LD_INT 1
38005: PUSH
38006: EMPTY
38007: LIST
38008: LIST
38009: PUSH
38010: LD_INT 4
38012: PUSH
38013: LD_INT 1
38015: PUSH
38016: EMPTY
38017: LIST
38018: LIST
38019: PUSH
38020: LD_INT 3
38022: PUSH
38023: LD_INT 0
38025: PUSH
38026: EMPTY
38027: LIST
38028: LIST
38029: PUSH
38030: LD_INT 3
38032: PUSH
38033: LD_INT 1
38035: NEG
38036: PUSH
38037: EMPTY
38038: LIST
38039: LIST
38040: PUSH
38041: LD_INT 3
38043: PUSH
38044: LD_INT 2
38046: NEG
38047: PUSH
38048: EMPTY
38049: LIST
38050: LIST
38051: PUSH
38052: LD_INT 5
38054: PUSH
38055: LD_INT 2
38057: PUSH
38058: EMPTY
38059: LIST
38060: LIST
38061: PUSH
38062: EMPTY
38063: LIST
38064: LIST
38065: LIST
38066: LIST
38067: LIST
38068: LIST
38069: LIST
38070: LIST
38071: LIST
38072: LIST
38073: LIST
38074: LIST
38075: LIST
38076: LIST
38077: LIST
38078: LIST
38079: LIST
38080: LIST
38081: LIST
38082: LIST
38083: LIST
38084: LIST
38085: LIST
38086: LIST
38087: LIST
38088: LIST
38089: LIST
38090: LIST
38091: LIST
38092: LIST
38093: LIST
38094: LIST
38095: LIST
38096: LIST
38097: LIST
38098: LIST
38099: LIST
38100: LIST
38101: LIST
38102: LIST
38103: LIST
38104: LIST
38105: LIST
38106: LIST
38107: LIST
38108: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
38109: LD_ADDR_VAR 0 32
38113: PUSH
38114: LD_INT 4
38116: NEG
38117: PUSH
38118: LD_INT 0
38120: PUSH
38121: EMPTY
38122: LIST
38123: LIST
38124: PUSH
38125: LD_INT 4
38127: NEG
38128: PUSH
38129: LD_INT 1
38131: NEG
38132: PUSH
38133: EMPTY
38134: LIST
38135: LIST
38136: PUSH
38137: LD_INT 3
38139: NEG
38140: PUSH
38141: LD_INT 0
38143: PUSH
38144: EMPTY
38145: LIST
38146: LIST
38147: PUSH
38148: LD_INT 3
38150: NEG
38151: PUSH
38152: LD_INT 1
38154: PUSH
38155: EMPTY
38156: LIST
38157: LIST
38158: PUSH
38159: LD_INT 4
38161: NEG
38162: PUSH
38163: LD_INT 1
38165: PUSH
38166: EMPTY
38167: LIST
38168: LIST
38169: PUSH
38170: LD_INT 5
38172: NEG
38173: PUSH
38174: LD_INT 0
38176: PUSH
38177: EMPTY
38178: LIST
38179: LIST
38180: PUSH
38181: LD_INT 5
38183: NEG
38184: PUSH
38185: LD_INT 1
38187: NEG
38188: PUSH
38189: EMPTY
38190: LIST
38191: LIST
38192: PUSH
38193: LD_INT 5
38195: NEG
38196: PUSH
38197: LD_INT 2
38199: NEG
38200: PUSH
38201: EMPTY
38202: LIST
38203: LIST
38204: PUSH
38205: LD_INT 3
38207: NEG
38208: PUSH
38209: LD_INT 2
38211: PUSH
38212: EMPTY
38213: LIST
38214: LIST
38215: PUSH
38216: LD_INT 3
38218: NEG
38219: PUSH
38220: LD_INT 3
38222: NEG
38223: PUSH
38224: EMPTY
38225: LIST
38226: LIST
38227: PUSH
38228: LD_INT 3
38230: NEG
38231: PUSH
38232: LD_INT 4
38234: NEG
38235: PUSH
38236: EMPTY
38237: LIST
38238: LIST
38239: PUSH
38240: LD_INT 2
38242: NEG
38243: PUSH
38244: LD_INT 3
38246: NEG
38247: PUSH
38248: EMPTY
38249: LIST
38250: LIST
38251: PUSH
38252: LD_INT 2
38254: NEG
38255: PUSH
38256: LD_INT 2
38258: NEG
38259: PUSH
38260: EMPTY
38261: LIST
38262: LIST
38263: PUSH
38264: LD_INT 3
38266: NEG
38267: PUSH
38268: LD_INT 2
38270: NEG
38271: PUSH
38272: EMPTY
38273: LIST
38274: LIST
38275: PUSH
38276: LD_INT 4
38278: NEG
38279: PUSH
38280: LD_INT 3
38282: NEG
38283: PUSH
38284: EMPTY
38285: LIST
38286: LIST
38287: PUSH
38288: LD_INT 4
38290: NEG
38291: PUSH
38292: LD_INT 4
38294: NEG
38295: PUSH
38296: EMPTY
38297: LIST
38298: LIST
38299: PUSH
38300: LD_INT 2
38302: NEG
38303: PUSH
38304: LD_INT 4
38306: NEG
38307: PUSH
38308: EMPTY
38309: LIST
38310: LIST
38311: PUSH
38312: LD_INT 4
38314: NEG
38315: PUSH
38316: LD_INT 2
38318: NEG
38319: PUSH
38320: EMPTY
38321: LIST
38322: LIST
38323: PUSH
38324: LD_INT 0
38326: PUSH
38327: LD_INT 4
38329: NEG
38330: PUSH
38331: EMPTY
38332: LIST
38333: LIST
38334: PUSH
38335: LD_INT 0
38337: PUSH
38338: LD_INT 5
38340: NEG
38341: PUSH
38342: EMPTY
38343: LIST
38344: LIST
38345: PUSH
38346: LD_INT 1
38348: PUSH
38349: LD_INT 4
38351: NEG
38352: PUSH
38353: EMPTY
38354: LIST
38355: LIST
38356: PUSH
38357: LD_INT 1
38359: PUSH
38360: LD_INT 3
38362: NEG
38363: PUSH
38364: EMPTY
38365: LIST
38366: LIST
38367: PUSH
38368: LD_INT 0
38370: PUSH
38371: LD_INT 3
38373: NEG
38374: PUSH
38375: EMPTY
38376: LIST
38377: LIST
38378: PUSH
38379: LD_INT 1
38381: NEG
38382: PUSH
38383: LD_INT 4
38385: NEG
38386: PUSH
38387: EMPTY
38388: LIST
38389: LIST
38390: PUSH
38391: LD_INT 1
38393: NEG
38394: PUSH
38395: LD_INT 5
38397: NEG
38398: PUSH
38399: EMPTY
38400: LIST
38401: LIST
38402: PUSH
38403: LD_INT 2
38405: PUSH
38406: LD_INT 3
38408: NEG
38409: PUSH
38410: EMPTY
38411: LIST
38412: LIST
38413: PUSH
38414: LD_INT 2
38416: NEG
38417: PUSH
38418: LD_INT 5
38420: NEG
38421: PUSH
38422: EMPTY
38423: LIST
38424: LIST
38425: PUSH
38426: LD_INT 3
38428: PUSH
38429: LD_INT 0
38431: PUSH
38432: EMPTY
38433: LIST
38434: LIST
38435: PUSH
38436: LD_INT 3
38438: PUSH
38439: LD_INT 1
38441: NEG
38442: PUSH
38443: EMPTY
38444: LIST
38445: LIST
38446: PUSH
38447: LD_INT 4
38449: PUSH
38450: LD_INT 0
38452: PUSH
38453: EMPTY
38454: LIST
38455: LIST
38456: PUSH
38457: LD_INT 4
38459: PUSH
38460: LD_INT 1
38462: PUSH
38463: EMPTY
38464: LIST
38465: LIST
38466: PUSH
38467: LD_INT 3
38469: PUSH
38470: LD_INT 1
38472: PUSH
38473: EMPTY
38474: LIST
38475: LIST
38476: PUSH
38477: LD_INT 2
38479: PUSH
38480: LD_INT 0
38482: PUSH
38483: EMPTY
38484: LIST
38485: LIST
38486: PUSH
38487: LD_INT 2
38489: PUSH
38490: LD_INT 1
38492: NEG
38493: PUSH
38494: EMPTY
38495: LIST
38496: LIST
38497: PUSH
38498: LD_INT 2
38500: PUSH
38501: LD_INT 2
38503: NEG
38504: PUSH
38505: EMPTY
38506: LIST
38507: LIST
38508: PUSH
38509: LD_INT 4
38511: PUSH
38512: LD_INT 2
38514: PUSH
38515: EMPTY
38516: LIST
38517: LIST
38518: PUSH
38519: LD_INT 4
38521: PUSH
38522: LD_INT 4
38524: PUSH
38525: EMPTY
38526: LIST
38527: LIST
38528: PUSH
38529: LD_INT 4
38531: PUSH
38532: LD_INT 3
38534: PUSH
38535: EMPTY
38536: LIST
38537: LIST
38538: PUSH
38539: LD_INT 5
38541: PUSH
38542: LD_INT 4
38544: PUSH
38545: EMPTY
38546: LIST
38547: LIST
38548: PUSH
38549: LD_INT 5
38551: PUSH
38552: LD_INT 5
38554: PUSH
38555: EMPTY
38556: LIST
38557: LIST
38558: PUSH
38559: LD_INT 4
38561: PUSH
38562: LD_INT 5
38564: PUSH
38565: EMPTY
38566: LIST
38567: LIST
38568: PUSH
38569: LD_INT 3
38571: PUSH
38572: LD_INT 4
38574: PUSH
38575: EMPTY
38576: LIST
38577: LIST
38578: PUSH
38579: LD_INT 3
38581: PUSH
38582: LD_INT 3
38584: PUSH
38585: EMPTY
38586: LIST
38587: LIST
38588: PUSH
38589: LD_INT 5
38591: PUSH
38592: LD_INT 3
38594: PUSH
38595: EMPTY
38596: LIST
38597: LIST
38598: PUSH
38599: LD_INT 3
38601: PUSH
38602: LD_INT 5
38604: PUSH
38605: EMPTY
38606: LIST
38607: LIST
38608: PUSH
38609: EMPTY
38610: LIST
38611: LIST
38612: LIST
38613: LIST
38614: LIST
38615: LIST
38616: LIST
38617: LIST
38618: LIST
38619: LIST
38620: LIST
38621: LIST
38622: LIST
38623: LIST
38624: LIST
38625: LIST
38626: LIST
38627: LIST
38628: LIST
38629: LIST
38630: LIST
38631: LIST
38632: LIST
38633: LIST
38634: LIST
38635: LIST
38636: LIST
38637: LIST
38638: LIST
38639: LIST
38640: LIST
38641: LIST
38642: LIST
38643: LIST
38644: LIST
38645: LIST
38646: LIST
38647: LIST
38648: LIST
38649: LIST
38650: LIST
38651: LIST
38652: LIST
38653: LIST
38654: LIST
38655: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
38656: LD_ADDR_VAR 0 33
38660: PUSH
38661: LD_INT 4
38663: NEG
38664: PUSH
38665: LD_INT 4
38667: NEG
38668: PUSH
38669: EMPTY
38670: LIST
38671: LIST
38672: PUSH
38673: LD_INT 4
38675: NEG
38676: PUSH
38677: LD_INT 5
38679: NEG
38680: PUSH
38681: EMPTY
38682: LIST
38683: LIST
38684: PUSH
38685: LD_INT 3
38687: NEG
38688: PUSH
38689: LD_INT 4
38691: NEG
38692: PUSH
38693: EMPTY
38694: LIST
38695: LIST
38696: PUSH
38697: LD_INT 3
38699: NEG
38700: PUSH
38701: LD_INT 3
38703: NEG
38704: PUSH
38705: EMPTY
38706: LIST
38707: LIST
38708: PUSH
38709: LD_INT 4
38711: NEG
38712: PUSH
38713: LD_INT 3
38715: NEG
38716: PUSH
38717: EMPTY
38718: LIST
38719: LIST
38720: PUSH
38721: LD_INT 5
38723: NEG
38724: PUSH
38725: LD_INT 4
38727: NEG
38728: PUSH
38729: EMPTY
38730: LIST
38731: LIST
38732: PUSH
38733: LD_INT 5
38735: NEG
38736: PUSH
38737: LD_INT 5
38739: NEG
38740: PUSH
38741: EMPTY
38742: LIST
38743: LIST
38744: PUSH
38745: LD_INT 3
38747: NEG
38748: PUSH
38749: LD_INT 5
38751: NEG
38752: PUSH
38753: EMPTY
38754: LIST
38755: LIST
38756: PUSH
38757: LD_INT 5
38759: NEG
38760: PUSH
38761: LD_INT 3
38763: NEG
38764: PUSH
38765: EMPTY
38766: LIST
38767: LIST
38768: PUSH
38769: LD_INT 0
38771: PUSH
38772: LD_INT 3
38774: NEG
38775: PUSH
38776: EMPTY
38777: LIST
38778: LIST
38779: PUSH
38780: LD_INT 0
38782: PUSH
38783: LD_INT 4
38785: NEG
38786: PUSH
38787: EMPTY
38788: LIST
38789: LIST
38790: PUSH
38791: LD_INT 1
38793: PUSH
38794: LD_INT 3
38796: NEG
38797: PUSH
38798: EMPTY
38799: LIST
38800: LIST
38801: PUSH
38802: LD_INT 1
38804: PUSH
38805: LD_INT 2
38807: NEG
38808: PUSH
38809: EMPTY
38810: LIST
38811: LIST
38812: PUSH
38813: LD_INT 0
38815: PUSH
38816: LD_INT 2
38818: NEG
38819: PUSH
38820: EMPTY
38821: LIST
38822: LIST
38823: PUSH
38824: LD_INT 1
38826: NEG
38827: PUSH
38828: LD_INT 3
38830: NEG
38831: PUSH
38832: EMPTY
38833: LIST
38834: LIST
38835: PUSH
38836: LD_INT 1
38838: NEG
38839: PUSH
38840: LD_INT 4
38842: NEG
38843: PUSH
38844: EMPTY
38845: LIST
38846: LIST
38847: PUSH
38848: LD_INT 2
38850: PUSH
38851: LD_INT 2
38853: NEG
38854: PUSH
38855: EMPTY
38856: LIST
38857: LIST
38858: PUSH
38859: LD_INT 2
38861: NEG
38862: PUSH
38863: LD_INT 4
38865: NEG
38866: PUSH
38867: EMPTY
38868: LIST
38869: LIST
38870: PUSH
38871: LD_INT 4
38873: PUSH
38874: LD_INT 0
38876: PUSH
38877: EMPTY
38878: LIST
38879: LIST
38880: PUSH
38881: LD_INT 4
38883: PUSH
38884: LD_INT 1
38886: NEG
38887: PUSH
38888: EMPTY
38889: LIST
38890: LIST
38891: PUSH
38892: LD_INT 5
38894: PUSH
38895: LD_INT 0
38897: PUSH
38898: EMPTY
38899: LIST
38900: LIST
38901: PUSH
38902: LD_INT 5
38904: PUSH
38905: LD_INT 1
38907: PUSH
38908: EMPTY
38909: LIST
38910: LIST
38911: PUSH
38912: LD_INT 4
38914: PUSH
38915: LD_INT 1
38917: PUSH
38918: EMPTY
38919: LIST
38920: LIST
38921: PUSH
38922: LD_INT 3
38924: PUSH
38925: LD_INT 0
38927: PUSH
38928: EMPTY
38929: LIST
38930: LIST
38931: PUSH
38932: LD_INT 3
38934: PUSH
38935: LD_INT 1
38937: NEG
38938: PUSH
38939: EMPTY
38940: LIST
38941: LIST
38942: PUSH
38943: LD_INT 3
38945: PUSH
38946: LD_INT 2
38948: NEG
38949: PUSH
38950: EMPTY
38951: LIST
38952: LIST
38953: PUSH
38954: LD_INT 5
38956: PUSH
38957: LD_INT 2
38959: PUSH
38960: EMPTY
38961: LIST
38962: LIST
38963: PUSH
38964: LD_INT 3
38966: PUSH
38967: LD_INT 3
38969: PUSH
38970: EMPTY
38971: LIST
38972: LIST
38973: PUSH
38974: LD_INT 3
38976: PUSH
38977: LD_INT 2
38979: PUSH
38980: EMPTY
38981: LIST
38982: LIST
38983: PUSH
38984: LD_INT 4
38986: PUSH
38987: LD_INT 3
38989: PUSH
38990: EMPTY
38991: LIST
38992: LIST
38993: PUSH
38994: LD_INT 4
38996: PUSH
38997: LD_INT 4
38999: PUSH
39000: EMPTY
39001: LIST
39002: LIST
39003: PUSH
39004: LD_INT 3
39006: PUSH
39007: LD_INT 4
39009: PUSH
39010: EMPTY
39011: LIST
39012: LIST
39013: PUSH
39014: LD_INT 2
39016: PUSH
39017: LD_INT 3
39019: PUSH
39020: EMPTY
39021: LIST
39022: LIST
39023: PUSH
39024: LD_INT 2
39026: PUSH
39027: LD_INT 2
39029: PUSH
39030: EMPTY
39031: LIST
39032: LIST
39033: PUSH
39034: LD_INT 4
39036: PUSH
39037: LD_INT 2
39039: PUSH
39040: EMPTY
39041: LIST
39042: LIST
39043: PUSH
39044: LD_INT 2
39046: PUSH
39047: LD_INT 4
39049: PUSH
39050: EMPTY
39051: LIST
39052: LIST
39053: PUSH
39054: LD_INT 0
39056: PUSH
39057: LD_INT 4
39059: PUSH
39060: EMPTY
39061: LIST
39062: LIST
39063: PUSH
39064: LD_INT 0
39066: PUSH
39067: LD_INT 3
39069: PUSH
39070: EMPTY
39071: LIST
39072: LIST
39073: PUSH
39074: LD_INT 1
39076: PUSH
39077: LD_INT 4
39079: PUSH
39080: EMPTY
39081: LIST
39082: LIST
39083: PUSH
39084: LD_INT 1
39086: PUSH
39087: LD_INT 5
39089: PUSH
39090: EMPTY
39091: LIST
39092: LIST
39093: PUSH
39094: LD_INT 0
39096: PUSH
39097: LD_INT 5
39099: PUSH
39100: EMPTY
39101: LIST
39102: LIST
39103: PUSH
39104: LD_INT 1
39106: NEG
39107: PUSH
39108: LD_INT 4
39110: PUSH
39111: EMPTY
39112: LIST
39113: LIST
39114: PUSH
39115: LD_INT 1
39117: NEG
39118: PUSH
39119: LD_INT 3
39121: PUSH
39122: EMPTY
39123: LIST
39124: LIST
39125: PUSH
39126: LD_INT 2
39128: PUSH
39129: LD_INT 5
39131: PUSH
39132: EMPTY
39133: LIST
39134: LIST
39135: PUSH
39136: LD_INT 2
39138: NEG
39139: PUSH
39140: LD_INT 3
39142: PUSH
39143: EMPTY
39144: LIST
39145: LIST
39146: PUSH
39147: EMPTY
39148: LIST
39149: LIST
39150: LIST
39151: LIST
39152: LIST
39153: LIST
39154: LIST
39155: LIST
39156: LIST
39157: LIST
39158: LIST
39159: LIST
39160: LIST
39161: LIST
39162: LIST
39163: LIST
39164: LIST
39165: LIST
39166: LIST
39167: LIST
39168: LIST
39169: LIST
39170: LIST
39171: LIST
39172: LIST
39173: LIST
39174: LIST
39175: LIST
39176: LIST
39177: LIST
39178: LIST
39179: LIST
39180: LIST
39181: LIST
39182: LIST
39183: LIST
39184: LIST
39185: LIST
39186: LIST
39187: LIST
39188: LIST
39189: LIST
39190: LIST
39191: LIST
39192: LIST
39193: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
39194: LD_ADDR_VAR 0 34
39198: PUSH
39199: LD_INT 0
39201: PUSH
39202: LD_INT 4
39204: NEG
39205: PUSH
39206: EMPTY
39207: LIST
39208: LIST
39209: PUSH
39210: LD_INT 0
39212: PUSH
39213: LD_INT 5
39215: NEG
39216: PUSH
39217: EMPTY
39218: LIST
39219: LIST
39220: PUSH
39221: LD_INT 1
39223: PUSH
39224: LD_INT 4
39226: NEG
39227: PUSH
39228: EMPTY
39229: LIST
39230: LIST
39231: PUSH
39232: LD_INT 1
39234: PUSH
39235: LD_INT 3
39237: NEG
39238: PUSH
39239: EMPTY
39240: LIST
39241: LIST
39242: PUSH
39243: LD_INT 0
39245: PUSH
39246: LD_INT 3
39248: NEG
39249: PUSH
39250: EMPTY
39251: LIST
39252: LIST
39253: PUSH
39254: LD_INT 1
39256: NEG
39257: PUSH
39258: LD_INT 4
39260: NEG
39261: PUSH
39262: EMPTY
39263: LIST
39264: LIST
39265: PUSH
39266: LD_INT 1
39268: NEG
39269: PUSH
39270: LD_INT 5
39272: NEG
39273: PUSH
39274: EMPTY
39275: LIST
39276: LIST
39277: PUSH
39278: LD_INT 2
39280: PUSH
39281: LD_INT 3
39283: NEG
39284: PUSH
39285: EMPTY
39286: LIST
39287: LIST
39288: PUSH
39289: LD_INT 2
39291: NEG
39292: PUSH
39293: LD_INT 5
39295: NEG
39296: PUSH
39297: EMPTY
39298: LIST
39299: LIST
39300: PUSH
39301: LD_INT 3
39303: PUSH
39304: LD_INT 0
39306: PUSH
39307: EMPTY
39308: LIST
39309: LIST
39310: PUSH
39311: LD_INT 3
39313: PUSH
39314: LD_INT 1
39316: NEG
39317: PUSH
39318: EMPTY
39319: LIST
39320: LIST
39321: PUSH
39322: LD_INT 4
39324: PUSH
39325: LD_INT 0
39327: PUSH
39328: EMPTY
39329: LIST
39330: LIST
39331: PUSH
39332: LD_INT 4
39334: PUSH
39335: LD_INT 1
39337: PUSH
39338: EMPTY
39339: LIST
39340: LIST
39341: PUSH
39342: LD_INT 3
39344: PUSH
39345: LD_INT 1
39347: PUSH
39348: EMPTY
39349: LIST
39350: LIST
39351: PUSH
39352: LD_INT 2
39354: PUSH
39355: LD_INT 0
39357: PUSH
39358: EMPTY
39359: LIST
39360: LIST
39361: PUSH
39362: LD_INT 2
39364: PUSH
39365: LD_INT 1
39367: NEG
39368: PUSH
39369: EMPTY
39370: LIST
39371: LIST
39372: PUSH
39373: LD_INT 2
39375: PUSH
39376: LD_INT 2
39378: NEG
39379: PUSH
39380: EMPTY
39381: LIST
39382: LIST
39383: PUSH
39384: LD_INT 4
39386: PUSH
39387: LD_INT 2
39389: PUSH
39390: EMPTY
39391: LIST
39392: LIST
39393: PUSH
39394: LD_INT 4
39396: PUSH
39397: LD_INT 4
39399: PUSH
39400: EMPTY
39401: LIST
39402: LIST
39403: PUSH
39404: LD_INT 4
39406: PUSH
39407: LD_INT 3
39409: PUSH
39410: EMPTY
39411: LIST
39412: LIST
39413: PUSH
39414: LD_INT 5
39416: PUSH
39417: LD_INT 4
39419: PUSH
39420: EMPTY
39421: LIST
39422: LIST
39423: PUSH
39424: LD_INT 5
39426: PUSH
39427: LD_INT 5
39429: PUSH
39430: EMPTY
39431: LIST
39432: LIST
39433: PUSH
39434: LD_INT 4
39436: PUSH
39437: LD_INT 5
39439: PUSH
39440: EMPTY
39441: LIST
39442: LIST
39443: PUSH
39444: LD_INT 3
39446: PUSH
39447: LD_INT 4
39449: PUSH
39450: EMPTY
39451: LIST
39452: LIST
39453: PUSH
39454: LD_INT 3
39456: PUSH
39457: LD_INT 3
39459: PUSH
39460: EMPTY
39461: LIST
39462: LIST
39463: PUSH
39464: LD_INT 5
39466: PUSH
39467: LD_INT 3
39469: PUSH
39470: EMPTY
39471: LIST
39472: LIST
39473: PUSH
39474: LD_INT 3
39476: PUSH
39477: LD_INT 5
39479: PUSH
39480: EMPTY
39481: LIST
39482: LIST
39483: PUSH
39484: LD_INT 0
39486: PUSH
39487: LD_INT 3
39489: PUSH
39490: EMPTY
39491: LIST
39492: LIST
39493: PUSH
39494: LD_INT 0
39496: PUSH
39497: LD_INT 2
39499: PUSH
39500: EMPTY
39501: LIST
39502: LIST
39503: PUSH
39504: LD_INT 1
39506: PUSH
39507: LD_INT 3
39509: PUSH
39510: EMPTY
39511: LIST
39512: LIST
39513: PUSH
39514: LD_INT 1
39516: PUSH
39517: LD_INT 4
39519: PUSH
39520: EMPTY
39521: LIST
39522: LIST
39523: PUSH
39524: LD_INT 0
39526: PUSH
39527: LD_INT 4
39529: PUSH
39530: EMPTY
39531: LIST
39532: LIST
39533: PUSH
39534: LD_INT 1
39536: NEG
39537: PUSH
39538: LD_INT 3
39540: PUSH
39541: EMPTY
39542: LIST
39543: LIST
39544: PUSH
39545: LD_INT 1
39547: NEG
39548: PUSH
39549: LD_INT 2
39551: PUSH
39552: EMPTY
39553: LIST
39554: LIST
39555: PUSH
39556: LD_INT 2
39558: PUSH
39559: LD_INT 4
39561: PUSH
39562: EMPTY
39563: LIST
39564: LIST
39565: PUSH
39566: LD_INT 2
39568: NEG
39569: PUSH
39570: LD_INT 2
39572: PUSH
39573: EMPTY
39574: LIST
39575: LIST
39576: PUSH
39577: LD_INT 4
39579: NEG
39580: PUSH
39581: LD_INT 0
39583: PUSH
39584: EMPTY
39585: LIST
39586: LIST
39587: PUSH
39588: LD_INT 4
39590: NEG
39591: PUSH
39592: LD_INT 1
39594: NEG
39595: PUSH
39596: EMPTY
39597: LIST
39598: LIST
39599: PUSH
39600: LD_INT 3
39602: NEG
39603: PUSH
39604: LD_INT 0
39606: PUSH
39607: EMPTY
39608: LIST
39609: LIST
39610: PUSH
39611: LD_INT 3
39613: NEG
39614: PUSH
39615: LD_INT 1
39617: PUSH
39618: EMPTY
39619: LIST
39620: LIST
39621: PUSH
39622: LD_INT 4
39624: NEG
39625: PUSH
39626: LD_INT 1
39628: PUSH
39629: EMPTY
39630: LIST
39631: LIST
39632: PUSH
39633: LD_INT 5
39635: NEG
39636: PUSH
39637: LD_INT 0
39639: PUSH
39640: EMPTY
39641: LIST
39642: LIST
39643: PUSH
39644: LD_INT 5
39646: NEG
39647: PUSH
39648: LD_INT 1
39650: NEG
39651: PUSH
39652: EMPTY
39653: LIST
39654: LIST
39655: PUSH
39656: LD_INT 5
39658: NEG
39659: PUSH
39660: LD_INT 2
39662: NEG
39663: PUSH
39664: EMPTY
39665: LIST
39666: LIST
39667: PUSH
39668: LD_INT 3
39670: NEG
39671: PUSH
39672: LD_INT 2
39674: PUSH
39675: EMPTY
39676: LIST
39677: LIST
39678: PUSH
39679: EMPTY
39680: LIST
39681: LIST
39682: LIST
39683: LIST
39684: LIST
39685: LIST
39686: LIST
39687: LIST
39688: LIST
39689: LIST
39690: LIST
39691: LIST
39692: LIST
39693: LIST
39694: LIST
39695: LIST
39696: LIST
39697: LIST
39698: LIST
39699: LIST
39700: LIST
39701: LIST
39702: LIST
39703: LIST
39704: LIST
39705: LIST
39706: LIST
39707: LIST
39708: LIST
39709: LIST
39710: LIST
39711: LIST
39712: LIST
39713: LIST
39714: LIST
39715: LIST
39716: LIST
39717: LIST
39718: LIST
39719: LIST
39720: LIST
39721: LIST
39722: LIST
39723: LIST
39724: LIST
39725: ST_TO_ADDR
// end ; end ;
39726: GO 39729
39728: POP
// case btype of b_depot , b_warehouse :
39729: LD_VAR 0 1
39733: PUSH
39734: LD_INT 0
39736: DOUBLE
39737: EQUAL
39738: IFTRUE 39748
39740: LD_INT 1
39742: DOUBLE
39743: EQUAL
39744: IFTRUE 39748
39746: GO 39949
39748: POP
// case nation of nation_american :
39749: LD_VAR 0 5
39753: PUSH
39754: LD_INT 1
39756: DOUBLE
39757: EQUAL
39758: IFTRUE 39762
39760: GO 39818
39762: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
39763: LD_ADDR_VAR 0 9
39767: PUSH
39768: LD_VAR 0 11
39772: PUSH
39773: LD_VAR 0 12
39777: PUSH
39778: LD_VAR 0 13
39782: PUSH
39783: LD_VAR 0 14
39787: PUSH
39788: LD_VAR 0 15
39792: PUSH
39793: LD_VAR 0 16
39797: PUSH
39798: EMPTY
39799: LIST
39800: LIST
39801: LIST
39802: LIST
39803: LIST
39804: LIST
39805: PUSH
39806: LD_VAR 0 4
39810: PUSH
39811: LD_INT 1
39813: PLUS
39814: ARRAY
39815: ST_TO_ADDR
39816: GO 39947
39818: LD_INT 2
39820: DOUBLE
39821: EQUAL
39822: IFTRUE 39826
39824: GO 39882
39826: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
39827: LD_ADDR_VAR 0 9
39831: PUSH
39832: LD_VAR 0 17
39836: PUSH
39837: LD_VAR 0 18
39841: PUSH
39842: LD_VAR 0 19
39846: PUSH
39847: LD_VAR 0 20
39851: PUSH
39852: LD_VAR 0 21
39856: PUSH
39857: LD_VAR 0 22
39861: PUSH
39862: EMPTY
39863: LIST
39864: LIST
39865: LIST
39866: LIST
39867: LIST
39868: LIST
39869: PUSH
39870: LD_VAR 0 4
39874: PUSH
39875: LD_INT 1
39877: PLUS
39878: ARRAY
39879: ST_TO_ADDR
39880: GO 39947
39882: LD_INT 3
39884: DOUBLE
39885: EQUAL
39886: IFTRUE 39890
39888: GO 39946
39890: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
39891: LD_ADDR_VAR 0 9
39895: PUSH
39896: LD_VAR 0 23
39900: PUSH
39901: LD_VAR 0 24
39905: PUSH
39906: LD_VAR 0 25
39910: PUSH
39911: LD_VAR 0 26
39915: PUSH
39916: LD_VAR 0 27
39920: PUSH
39921: LD_VAR 0 28
39925: PUSH
39926: EMPTY
39927: LIST
39928: LIST
39929: LIST
39930: LIST
39931: LIST
39932: LIST
39933: PUSH
39934: LD_VAR 0 4
39938: PUSH
39939: LD_INT 1
39941: PLUS
39942: ARRAY
39943: ST_TO_ADDR
39944: GO 39947
39946: POP
39947: GO 40502
39949: LD_INT 2
39951: DOUBLE
39952: EQUAL
39953: IFTRUE 39963
39955: LD_INT 3
39957: DOUBLE
39958: EQUAL
39959: IFTRUE 39963
39961: GO 40019
39963: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
39964: LD_ADDR_VAR 0 9
39968: PUSH
39969: LD_VAR 0 29
39973: PUSH
39974: LD_VAR 0 30
39978: PUSH
39979: LD_VAR 0 31
39983: PUSH
39984: LD_VAR 0 32
39988: PUSH
39989: LD_VAR 0 33
39993: PUSH
39994: LD_VAR 0 34
39998: PUSH
39999: EMPTY
40000: LIST
40001: LIST
40002: LIST
40003: LIST
40004: LIST
40005: LIST
40006: PUSH
40007: LD_VAR 0 4
40011: PUSH
40012: LD_INT 1
40014: PLUS
40015: ARRAY
40016: ST_TO_ADDR
40017: GO 40502
40019: LD_INT 16
40021: DOUBLE
40022: EQUAL
40023: IFTRUE 40081
40025: LD_INT 17
40027: DOUBLE
40028: EQUAL
40029: IFTRUE 40081
40031: LD_INT 18
40033: DOUBLE
40034: EQUAL
40035: IFTRUE 40081
40037: LD_INT 19
40039: DOUBLE
40040: EQUAL
40041: IFTRUE 40081
40043: LD_INT 22
40045: DOUBLE
40046: EQUAL
40047: IFTRUE 40081
40049: LD_INT 20
40051: DOUBLE
40052: EQUAL
40053: IFTRUE 40081
40055: LD_INT 21
40057: DOUBLE
40058: EQUAL
40059: IFTRUE 40081
40061: LD_INT 23
40063: DOUBLE
40064: EQUAL
40065: IFTRUE 40081
40067: LD_INT 24
40069: DOUBLE
40070: EQUAL
40071: IFTRUE 40081
40073: LD_INT 25
40075: DOUBLE
40076: EQUAL
40077: IFTRUE 40081
40079: GO 40137
40081: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
40082: LD_ADDR_VAR 0 9
40086: PUSH
40087: LD_VAR 0 35
40091: PUSH
40092: LD_VAR 0 36
40096: PUSH
40097: LD_VAR 0 37
40101: PUSH
40102: LD_VAR 0 38
40106: PUSH
40107: LD_VAR 0 39
40111: PUSH
40112: LD_VAR 0 40
40116: PUSH
40117: EMPTY
40118: LIST
40119: LIST
40120: LIST
40121: LIST
40122: LIST
40123: LIST
40124: PUSH
40125: LD_VAR 0 4
40129: PUSH
40130: LD_INT 1
40132: PLUS
40133: ARRAY
40134: ST_TO_ADDR
40135: GO 40502
40137: LD_INT 6
40139: DOUBLE
40140: EQUAL
40141: IFTRUE 40193
40143: LD_INT 7
40145: DOUBLE
40146: EQUAL
40147: IFTRUE 40193
40149: LD_INT 8
40151: DOUBLE
40152: EQUAL
40153: IFTRUE 40193
40155: LD_INT 13
40157: DOUBLE
40158: EQUAL
40159: IFTRUE 40193
40161: LD_INT 12
40163: DOUBLE
40164: EQUAL
40165: IFTRUE 40193
40167: LD_INT 15
40169: DOUBLE
40170: EQUAL
40171: IFTRUE 40193
40173: LD_INT 11
40175: DOUBLE
40176: EQUAL
40177: IFTRUE 40193
40179: LD_INT 14
40181: DOUBLE
40182: EQUAL
40183: IFTRUE 40193
40185: LD_INT 10
40187: DOUBLE
40188: EQUAL
40189: IFTRUE 40193
40191: GO 40249
40193: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
40194: LD_ADDR_VAR 0 9
40198: PUSH
40199: LD_VAR 0 41
40203: PUSH
40204: LD_VAR 0 42
40208: PUSH
40209: LD_VAR 0 43
40213: PUSH
40214: LD_VAR 0 44
40218: PUSH
40219: LD_VAR 0 45
40223: PUSH
40224: LD_VAR 0 46
40228: PUSH
40229: EMPTY
40230: LIST
40231: LIST
40232: LIST
40233: LIST
40234: LIST
40235: LIST
40236: PUSH
40237: LD_VAR 0 4
40241: PUSH
40242: LD_INT 1
40244: PLUS
40245: ARRAY
40246: ST_TO_ADDR
40247: GO 40502
40249: LD_INT 36
40251: DOUBLE
40252: EQUAL
40253: IFTRUE 40257
40255: GO 40313
40257: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
40258: LD_ADDR_VAR 0 9
40262: PUSH
40263: LD_VAR 0 47
40267: PUSH
40268: LD_VAR 0 48
40272: PUSH
40273: LD_VAR 0 49
40277: PUSH
40278: LD_VAR 0 50
40282: PUSH
40283: LD_VAR 0 51
40287: PUSH
40288: LD_VAR 0 52
40292: PUSH
40293: EMPTY
40294: LIST
40295: LIST
40296: LIST
40297: LIST
40298: LIST
40299: LIST
40300: PUSH
40301: LD_VAR 0 4
40305: PUSH
40306: LD_INT 1
40308: PLUS
40309: ARRAY
40310: ST_TO_ADDR
40311: GO 40502
40313: LD_INT 4
40315: DOUBLE
40316: EQUAL
40317: IFTRUE 40339
40319: LD_INT 5
40321: DOUBLE
40322: EQUAL
40323: IFTRUE 40339
40325: LD_INT 34
40327: DOUBLE
40328: EQUAL
40329: IFTRUE 40339
40331: LD_INT 37
40333: DOUBLE
40334: EQUAL
40335: IFTRUE 40339
40337: GO 40395
40339: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
40340: LD_ADDR_VAR 0 9
40344: PUSH
40345: LD_VAR 0 53
40349: PUSH
40350: LD_VAR 0 54
40354: PUSH
40355: LD_VAR 0 55
40359: PUSH
40360: LD_VAR 0 56
40364: PUSH
40365: LD_VAR 0 57
40369: PUSH
40370: LD_VAR 0 58
40374: PUSH
40375: EMPTY
40376: LIST
40377: LIST
40378: LIST
40379: LIST
40380: LIST
40381: LIST
40382: PUSH
40383: LD_VAR 0 4
40387: PUSH
40388: LD_INT 1
40390: PLUS
40391: ARRAY
40392: ST_TO_ADDR
40393: GO 40502
40395: LD_INT 31
40397: DOUBLE
40398: EQUAL
40399: IFTRUE 40445
40401: LD_INT 32
40403: DOUBLE
40404: EQUAL
40405: IFTRUE 40445
40407: LD_INT 33
40409: DOUBLE
40410: EQUAL
40411: IFTRUE 40445
40413: LD_INT 27
40415: DOUBLE
40416: EQUAL
40417: IFTRUE 40445
40419: LD_INT 26
40421: DOUBLE
40422: EQUAL
40423: IFTRUE 40445
40425: LD_INT 28
40427: DOUBLE
40428: EQUAL
40429: IFTRUE 40445
40431: LD_INT 29
40433: DOUBLE
40434: EQUAL
40435: IFTRUE 40445
40437: LD_INT 30
40439: DOUBLE
40440: EQUAL
40441: IFTRUE 40445
40443: GO 40501
40445: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
40446: LD_ADDR_VAR 0 9
40450: PUSH
40451: LD_VAR 0 59
40455: PUSH
40456: LD_VAR 0 60
40460: PUSH
40461: LD_VAR 0 61
40465: PUSH
40466: LD_VAR 0 62
40470: PUSH
40471: LD_VAR 0 63
40475: PUSH
40476: LD_VAR 0 64
40480: PUSH
40481: EMPTY
40482: LIST
40483: LIST
40484: LIST
40485: LIST
40486: LIST
40487: LIST
40488: PUSH
40489: LD_VAR 0 4
40493: PUSH
40494: LD_INT 1
40496: PLUS
40497: ARRAY
40498: ST_TO_ADDR
40499: GO 40502
40501: POP
// temp_list2 = [ ] ;
40502: LD_ADDR_VAR 0 10
40506: PUSH
40507: EMPTY
40508: ST_TO_ADDR
// for i in temp_list do
40509: LD_ADDR_VAR 0 8
40513: PUSH
40514: LD_VAR 0 9
40518: PUSH
40519: FOR_IN
40520: IFFALSE 40572
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
40522: LD_ADDR_VAR 0 10
40526: PUSH
40527: LD_VAR 0 10
40531: PUSH
40532: LD_VAR 0 8
40536: PUSH
40537: LD_INT 1
40539: ARRAY
40540: PUSH
40541: LD_VAR 0 2
40545: PLUS
40546: PUSH
40547: LD_VAR 0 8
40551: PUSH
40552: LD_INT 2
40554: ARRAY
40555: PUSH
40556: LD_VAR 0 3
40560: PLUS
40561: PUSH
40562: EMPTY
40563: LIST
40564: LIST
40565: PUSH
40566: EMPTY
40567: LIST
40568: ADD
40569: ST_TO_ADDR
40570: GO 40519
40572: POP
40573: POP
// result = temp_list2 ;
40574: LD_ADDR_VAR 0 7
40578: PUSH
40579: LD_VAR 0 10
40583: ST_TO_ADDR
// end ;
40584: LD_VAR 0 7
40588: RET
// export function EnemyInRange ( unit , dist ) ; begin
40589: LD_INT 0
40591: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
40592: LD_ADDR_VAR 0 3
40596: PUSH
40597: LD_VAR 0 1
40601: PPUSH
40602: CALL_OW 255
40606: PPUSH
40607: LD_VAR 0 1
40611: PPUSH
40612: CALL_OW 250
40616: PPUSH
40617: LD_VAR 0 1
40621: PPUSH
40622: CALL_OW 251
40626: PPUSH
40627: LD_VAR 0 2
40631: PPUSH
40632: CALL 13991 0 4
40636: PUSH
40637: LD_INT 4
40639: ARRAY
40640: ST_TO_ADDR
// end ;
40641: LD_VAR 0 3
40645: RET
// export function PlayerSeeMe ( unit ) ; begin
40646: LD_INT 0
40648: PPUSH
// result := See ( your_side , unit ) ;
40649: LD_ADDR_VAR 0 2
40653: PUSH
40654: LD_OWVAR 2
40658: PPUSH
40659: LD_VAR 0 1
40663: PPUSH
40664: CALL_OW 292
40668: ST_TO_ADDR
// end ;
40669: LD_VAR 0 2
40673: RET
// export function ReverseDir ( unit ) ; begin
40674: LD_INT 0
40676: PPUSH
// if not unit then
40677: LD_VAR 0 1
40681: NOT
40682: IFFALSE 40686
// exit ;
40684: GO 40709
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
40686: LD_ADDR_VAR 0 2
40690: PUSH
40691: LD_VAR 0 1
40695: PPUSH
40696: CALL_OW 254
40700: PUSH
40701: LD_INT 3
40703: PLUS
40704: PUSH
40705: LD_INT 6
40707: MOD
40708: ST_TO_ADDR
// end ;
40709: LD_VAR 0 2
40713: RET
// export function ReverseArray ( array ) ; var i ; begin
40714: LD_INT 0
40716: PPUSH
40717: PPUSH
// if not array then
40718: LD_VAR 0 1
40722: NOT
40723: IFFALSE 40727
// exit ;
40725: GO 40782
// result := [ ] ;
40727: LD_ADDR_VAR 0 2
40731: PUSH
40732: EMPTY
40733: ST_TO_ADDR
// for i := array downto 1 do
40734: LD_ADDR_VAR 0 3
40738: PUSH
40739: DOUBLE
40740: LD_VAR 0 1
40744: INC
40745: ST_TO_ADDR
40746: LD_INT 1
40748: PUSH
40749: FOR_DOWNTO
40750: IFFALSE 40780
// result := Join ( result , array [ i ] ) ;
40752: LD_ADDR_VAR 0 2
40756: PUSH
40757: LD_VAR 0 2
40761: PPUSH
40762: LD_VAR 0 1
40766: PUSH
40767: LD_VAR 0 3
40771: ARRAY
40772: PPUSH
40773: CALL 45426 0 2
40777: ST_TO_ADDR
40778: GO 40749
40780: POP
40781: POP
// end ;
40782: LD_VAR 0 2
40786: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
40787: LD_INT 0
40789: PPUSH
40790: PPUSH
40791: PPUSH
40792: PPUSH
40793: PPUSH
40794: PPUSH
// if not unit or not hexes then
40795: LD_VAR 0 1
40799: NOT
40800: PUSH
40801: LD_VAR 0 2
40805: NOT
40806: OR
40807: IFFALSE 40811
// exit ;
40809: GO 40934
// dist := 9999 ;
40811: LD_ADDR_VAR 0 5
40815: PUSH
40816: LD_INT 9999
40818: ST_TO_ADDR
// for i = 1 to hexes do
40819: LD_ADDR_VAR 0 4
40823: PUSH
40824: DOUBLE
40825: LD_INT 1
40827: DEC
40828: ST_TO_ADDR
40829: LD_VAR 0 2
40833: PUSH
40834: FOR_TO
40835: IFFALSE 40922
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
40837: LD_ADDR_VAR 0 6
40841: PUSH
40842: LD_VAR 0 1
40846: PPUSH
40847: LD_VAR 0 2
40851: PUSH
40852: LD_VAR 0 4
40856: ARRAY
40857: PUSH
40858: LD_INT 1
40860: ARRAY
40861: PPUSH
40862: LD_VAR 0 2
40866: PUSH
40867: LD_VAR 0 4
40871: ARRAY
40872: PUSH
40873: LD_INT 2
40875: ARRAY
40876: PPUSH
40877: CALL_OW 297
40881: ST_TO_ADDR
// if tdist < dist then
40882: LD_VAR 0 6
40886: PUSH
40887: LD_VAR 0 5
40891: LESS
40892: IFFALSE 40920
// begin hex := hexes [ i ] ;
40894: LD_ADDR_VAR 0 8
40898: PUSH
40899: LD_VAR 0 2
40903: PUSH
40904: LD_VAR 0 4
40908: ARRAY
40909: ST_TO_ADDR
// dist := tdist ;
40910: LD_ADDR_VAR 0 5
40914: PUSH
40915: LD_VAR 0 6
40919: ST_TO_ADDR
// end ; end ;
40920: GO 40834
40922: POP
40923: POP
// result := hex ;
40924: LD_ADDR_VAR 0 3
40928: PUSH
40929: LD_VAR 0 8
40933: ST_TO_ADDR
// end ;
40934: LD_VAR 0 3
40938: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
40939: LD_INT 0
40941: PPUSH
40942: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
40943: LD_VAR 0 1
40947: NOT
40948: PUSH
40949: LD_VAR 0 1
40953: PUSH
40954: LD_INT 21
40956: PUSH
40957: LD_INT 2
40959: PUSH
40960: EMPTY
40961: LIST
40962: LIST
40963: PUSH
40964: LD_INT 23
40966: PUSH
40967: LD_INT 2
40969: PUSH
40970: EMPTY
40971: LIST
40972: LIST
40973: PUSH
40974: EMPTY
40975: LIST
40976: LIST
40977: PPUSH
40978: CALL_OW 69
40982: IN
40983: NOT
40984: OR
40985: IFFALSE 40989
// exit ;
40987: GO 41036
// for i = 1 to 3 do
40989: LD_ADDR_VAR 0 3
40993: PUSH
40994: DOUBLE
40995: LD_INT 1
40997: DEC
40998: ST_TO_ADDR
40999: LD_INT 3
41001: PUSH
41002: FOR_TO
41003: IFFALSE 41034
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
41005: LD_VAR 0 1
41009: PPUSH
41010: CALL_OW 250
41014: PPUSH
41015: LD_VAR 0 1
41019: PPUSH
41020: CALL_OW 251
41024: PPUSH
41025: LD_INT 1
41027: PPUSH
41028: CALL_OW 453
41032: GO 41002
41034: POP
41035: POP
// end ;
41036: LD_VAR 0 2
41040: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
41041: LD_INT 0
41043: PPUSH
41044: PPUSH
41045: PPUSH
41046: PPUSH
41047: PPUSH
41048: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
41049: LD_VAR 0 1
41053: NOT
41054: PUSH
41055: LD_VAR 0 2
41059: NOT
41060: OR
41061: PUSH
41062: LD_VAR 0 1
41066: PPUSH
41067: CALL_OW 314
41071: OR
41072: IFFALSE 41076
// exit ;
41074: GO 41543
// if GetLives ( i ) < 250 then
41076: LD_VAR 0 4
41080: PPUSH
41081: CALL_OW 256
41085: PUSH
41086: LD_INT 250
41088: LESS
41089: IFFALSE 41102
// begin ComAutodestruct ( i ) ;
41091: LD_VAR 0 4
41095: PPUSH
41096: CALL 40939 0 1
// exit ;
41100: GO 41543
// end ; x := GetX ( enemy_unit ) ;
41102: LD_ADDR_VAR 0 7
41106: PUSH
41107: LD_VAR 0 2
41111: PPUSH
41112: CALL_OW 250
41116: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
41117: LD_ADDR_VAR 0 8
41121: PUSH
41122: LD_VAR 0 2
41126: PPUSH
41127: CALL_OW 251
41131: ST_TO_ADDR
// if not x or not y then
41132: LD_VAR 0 7
41136: NOT
41137: PUSH
41138: LD_VAR 0 8
41142: NOT
41143: OR
41144: IFFALSE 41148
// exit ;
41146: GO 41543
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
41148: LD_ADDR_VAR 0 6
41152: PUSH
41153: LD_VAR 0 7
41157: PPUSH
41158: LD_INT 0
41160: PPUSH
41161: LD_INT 4
41163: PPUSH
41164: CALL_OW 272
41168: PUSH
41169: LD_VAR 0 8
41173: PPUSH
41174: LD_INT 0
41176: PPUSH
41177: LD_INT 4
41179: PPUSH
41180: CALL_OW 273
41184: PUSH
41185: EMPTY
41186: LIST
41187: LIST
41188: PUSH
41189: LD_VAR 0 7
41193: PPUSH
41194: LD_INT 1
41196: PPUSH
41197: LD_INT 4
41199: PPUSH
41200: CALL_OW 272
41204: PUSH
41205: LD_VAR 0 8
41209: PPUSH
41210: LD_INT 1
41212: PPUSH
41213: LD_INT 4
41215: PPUSH
41216: CALL_OW 273
41220: PUSH
41221: EMPTY
41222: LIST
41223: LIST
41224: PUSH
41225: LD_VAR 0 7
41229: PPUSH
41230: LD_INT 2
41232: PPUSH
41233: LD_INT 4
41235: PPUSH
41236: CALL_OW 272
41240: PUSH
41241: LD_VAR 0 8
41245: PPUSH
41246: LD_INT 2
41248: PPUSH
41249: LD_INT 4
41251: PPUSH
41252: CALL_OW 273
41256: PUSH
41257: EMPTY
41258: LIST
41259: LIST
41260: PUSH
41261: LD_VAR 0 7
41265: PPUSH
41266: LD_INT 3
41268: PPUSH
41269: LD_INT 4
41271: PPUSH
41272: CALL_OW 272
41276: PUSH
41277: LD_VAR 0 8
41281: PPUSH
41282: LD_INT 3
41284: PPUSH
41285: LD_INT 4
41287: PPUSH
41288: CALL_OW 273
41292: PUSH
41293: EMPTY
41294: LIST
41295: LIST
41296: PUSH
41297: LD_VAR 0 7
41301: PPUSH
41302: LD_INT 4
41304: PPUSH
41305: LD_INT 4
41307: PPUSH
41308: CALL_OW 272
41312: PUSH
41313: LD_VAR 0 8
41317: PPUSH
41318: LD_INT 4
41320: PPUSH
41321: LD_INT 4
41323: PPUSH
41324: CALL_OW 273
41328: PUSH
41329: EMPTY
41330: LIST
41331: LIST
41332: PUSH
41333: LD_VAR 0 7
41337: PPUSH
41338: LD_INT 5
41340: PPUSH
41341: LD_INT 4
41343: PPUSH
41344: CALL_OW 272
41348: PUSH
41349: LD_VAR 0 8
41353: PPUSH
41354: LD_INT 5
41356: PPUSH
41357: LD_INT 4
41359: PPUSH
41360: CALL_OW 273
41364: PUSH
41365: EMPTY
41366: LIST
41367: LIST
41368: PUSH
41369: EMPTY
41370: LIST
41371: LIST
41372: LIST
41373: LIST
41374: LIST
41375: LIST
41376: ST_TO_ADDR
// for i = tmp downto 1 do
41377: LD_ADDR_VAR 0 4
41381: PUSH
41382: DOUBLE
41383: LD_VAR 0 6
41387: INC
41388: ST_TO_ADDR
41389: LD_INT 1
41391: PUSH
41392: FOR_DOWNTO
41393: IFFALSE 41494
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
41395: LD_VAR 0 6
41399: PUSH
41400: LD_VAR 0 4
41404: ARRAY
41405: PUSH
41406: LD_INT 1
41408: ARRAY
41409: PPUSH
41410: LD_VAR 0 6
41414: PUSH
41415: LD_VAR 0 4
41419: ARRAY
41420: PUSH
41421: LD_INT 2
41423: ARRAY
41424: PPUSH
41425: CALL_OW 488
41429: NOT
41430: PUSH
41431: LD_VAR 0 6
41435: PUSH
41436: LD_VAR 0 4
41440: ARRAY
41441: PUSH
41442: LD_INT 1
41444: ARRAY
41445: PPUSH
41446: LD_VAR 0 6
41450: PUSH
41451: LD_VAR 0 4
41455: ARRAY
41456: PUSH
41457: LD_INT 2
41459: ARRAY
41460: PPUSH
41461: CALL_OW 428
41465: PUSH
41466: LD_INT 0
41468: NONEQUAL
41469: OR
41470: IFFALSE 41492
// tmp := Delete ( tmp , i ) ;
41472: LD_ADDR_VAR 0 6
41476: PUSH
41477: LD_VAR 0 6
41481: PPUSH
41482: LD_VAR 0 4
41486: PPUSH
41487: CALL_OW 3
41491: ST_TO_ADDR
41492: GO 41392
41494: POP
41495: POP
// j := GetClosestHex ( unit , tmp ) ;
41496: LD_ADDR_VAR 0 5
41500: PUSH
41501: LD_VAR 0 1
41505: PPUSH
41506: LD_VAR 0 6
41510: PPUSH
41511: CALL 40787 0 2
41515: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
41516: LD_VAR 0 1
41520: PPUSH
41521: LD_VAR 0 5
41525: PUSH
41526: LD_INT 1
41528: ARRAY
41529: PPUSH
41530: LD_VAR 0 5
41534: PUSH
41535: LD_INT 2
41537: ARRAY
41538: PPUSH
41539: CALL_OW 111
// end ;
41543: LD_VAR 0 3
41547: RET
// export function PrepareApemanSoldier ( ) ; begin
41548: LD_INT 0
41550: PPUSH
// uc_nation := 0 ;
41551: LD_ADDR_OWVAR 21
41555: PUSH
41556: LD_INT 0
41558: ST_TO_ADDR
// hc_sex := sex_male ;
41559: LD_ADDR_OWVAR 27
41563: PUSH
41564: LD_INT 1
41566: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
41567: LD_ADDR_OWVAR 28
41571: PUSH
41572: LD_INT 15
41574: ST_TO_ADDR
// hc_gallery :=  ;
41575: LD_ADDR_OWVAR 33
41579: PUSH
41580: LD_STRING 
41582: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
41583: LD_ADDR_OWVAR 31
41587: PUSH
41588: LD_INT 0
41590: PPUSH
41591: LD_INT 3
41593: PPUSH
41594: CALL_OW 12
41598: PUSH
41599: LD_INT 0
41601: PPUSH
41602: LD_INT 3
41604: PPUSH
41605: CALL_OW 12
41609: PUSH
41610: LD_INT 0
41612: PUSH
41613: LD_INT 0
41615: PUSH
41616: EMPTY
41617: LIST
41618: LIST
41619: LIST
41620: LIST
41621: ST_TO_ADDR
// end ;
41622: LD_VAR 0 1
41626: RET
// export function PrepareApemanEngineer ( ) ; begin
41627: LD_INT 0
41629: PPUSH
// uc_nation := 0 ;
41630: LD_ADDR_OWVAR 21
41634: PUSH
41635: LD_INT 0
41637: ST_TO_ADDR
// hc_sex := sex_male ;
41638: LD_ADDR_OWVAR 27
41642: PUSH
41643: LD_INT 1
41645: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
41646: LD_ADDR_OWVAR 28
41650: PUSH
41651: LD_INT 16
41653: ST_TO_ADDR
// hc_gallery :=  ;
41654: LD_ADDR_OWVAR 33
41658: PUSH
41659: LD_STRING 
41661: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
41662: LD_ADDR_OWVAR 31
41666: PUSH
41667: LD_INT 0
41669: PPUSH
41670: LD_INT 3
41672: PPUSH
41673: CALL_OW 12
41677: PUSH
41678: LD_INT 0
41680: PPUSH
41681: LD_INT 3
41683: PPUSH
41684: CALL_OW 12
41688: PUSH
41689: LD_INT 0
41691: PUSH
41692: LD_INT 0
41694: PUSH
41695: EMPTY
41696: LIST
41697: LIST
41698: LIST
41699: LIST
41700: ST_TO_ADDR
// end ;
41701: LD_VAR 0 1
41705: RET
// export function PrepareApeman ( agressivity ) ; begin
41706: LD_INT 0
41708: PPUSH
// uc_side := 0 ;
41709: LD_ADDR_OWVAR 20
41713: PUSH
41714: LD_INT 0
41716: ST_TO_ADDR
// uc_nation := 0 ;
41717: LD_ADDR_OWVAR 21
41721: PUSH
41722: LD_INT 0
41724: ST_TO_ADDR
// hc_sex := sex_male ;
41725: LD_ADDR_OWVAR 27
41729: PUSH
41730: LD_INT 1
41732: ST_TO_ADDR
// hc_class := class_apeman ;
41733: LD_ADDR_OWVAR 28
41737: PUSH
41738: LD_INT 12
41740: ST_TO_ADDR
// hc_gallery :=  ;
41741: LD_ADDR_OWVAR 33
41745: PUSH
41746: LD_STRING 
41748: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
41749: LD_ADDR_OWVAR 35
41753: PUSH
41754: LD_VAR 0 1
41758: NEG
41759: PPUSH
41760: LD_VAR 0 1
41764: PPUSH
41765: CALL_OW 12
41769: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
41770: LD_ADDR_OWVAR 31
41774: PUSH
41775: LD_INT 0
41777: PPUSH
41778: LD_INT 3
41780: PPUSH
41781: CALL_OW 12
41785: PUSH
41786: LD_INT 0
41788: PPUSH
41789: LD_INT 3
41791: PPUSH
41792: CALL_OW 12
41796: PUSH
41797: LD_INT 0
41799: PUSH
41800: LD_INT 0
41802: PUSH
41803: EMPTY
41804: LIST
41805: LIST
41806: LIST
41807: LIST
41808: ST_TO_ADDR
// end ;
41809: LD_VAR 0 2
41813: RET
// export function PrepareTiger ( agressivity ) ; begin
41814: LD_INT 0
41816: PPUSH
// uc_side := 0 ;
41817: LD_ADDR_OWVAR 20
41821: PUSH
41822: LD_INT 0
41824: ST_TO_ADDR
// uc_nation := 0 ;
41825: LD_ADDR_OWVAR 21
41829: PUSH
41830: LD_INT 0
41832: ST_TO_ADDR
// hc_class := class_tiger ;
41833: LD_ADDR_OWVAR 28
41837: PUSH
41838: LD_INT 14
41840: ST_TO_ADDR
// hc_gallery :=  ;
41841: LD_ADDR_OWVAR 33
41845: PUSH
41846: LD_STRING 
41848: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
41849: LD_ADDR_OWVAR 35
41853: PUSH
41854: LD_VAR 0 1
41858: NEG
41859: PPUSH
41860: LD_VAR 0 1
41864: PPUSH
41865: CALL_OW 12
41869: ST_TO_ADDR
// end ;
41870: LD_VAR 0 2
41874: RET
// export function PrepareEnchidna ( ) ; begin
41875: LD_INT 0
41877: PPUSH
// uc_side := 0 ;
41878: LD_ADDR_OWVAR 20
41882: PUSH
41883: LD_INT 0
41885: ST_TO_ADDR
// uc_nation := 0 ;
41886: LD_ADDR_OWVAR 21
41890: PUSH
41891: LD_INT 0
41893: ST_TO_ADDR
// hc_class := class_baggie ;
41894: LD_ADDR_OWVAR 28
41898: PUSH
41899: LD_INT 13
41901: ST_TO_ADDR
// hc_gallery :=  ;
41902: LD_ADDR_OWVAR 33
41906: PUSH
41907: LD_STRING 
41909: ST_TO_ADDR
// end ;
41910: LD_VAR 0 1
41914: RET
// export function PrepareFrog ( ) ; begin
41915: LD_INT 0
41917: PPUSH
// uc_side := 0 ;
41918: LD_ADDR_OWVAR 20
41922: PUSH
41923: LD_INT 0
41925: ST_TO_ADDR
// uc_nation := 0 ;
41926: LD_ADDR_OWVAR 21
41930: PUSH
41931: LD_INT 0
41933: ST_TO_ADDR
// hc_class := class_frog ;
41934: LD_ADDR_OWVAR 28
41938: PUSH
41939: LD_INT 19
41941: ST_TO_ADDR
// hc_gallery :=  ;
41942: LD_ADDR_OWVAR 33
41946: PUSH
41947: LD_STRING 
41949: ST_TO_ADDR
// end ;
41950: LD_VAR 0 1
41954: RET
// export function PrepareFish ( ) ; begin
41955: LD_INT 0
41957: PPUSH
// uc_side := 0 ;
41958: LD_ADDR_OWVAR 20
41962: PUSH
41963: LD_INT 0
41965: ST_TO_ADDR
// uc_nation := 0 ;
41966: LD_ADDR_OWVAR 21
41970: PUSH
41971: LD_INT 0
41973: ST_TO_ADDR
// hc_class := class_fish ;
41974: LD_ADDR_OWVAR 28
41978: PUSH
41979: LD_INT 20
41981: ST_TO_ADDR
// hc_gallery :=  ;
41982: LD_ADDR_OWVAR 33
41986: PUSH
41987: LD_STRING 
41989: ST_TO_ADDR
// end ;
41990: LD_VAR 0 1
41994: RET
// export function PrepareBird ( ) ; begin
41995: LD_INT 0
41997: PPUSH
// uc_side := 0 ;
41998: LD_ADDR_OWVAR 20
42002: PUSH
42003: LD_INT 0
42005: ST_TO_ADDR
// uc_nation := 0 ;
42006: LD_ADDR_OWVAR 21
42010: PUSH
42011: LD_INT 0
42013: ST_TO_ADDR
// hc_class := class_phororhacos ;
42014: LD_ADDR_OWVAR 28
42018: PUSH
42019: LD_INT 18
42021: ST_TO_ADDR
// hc_gallery :=  ;
42022: LD_ADDR_OWVAR 33
42026: PUSH
42027: LD_STRING 
42029: ST_TO_ADDR
// end ;
42030: LD_VAR 0 1
42034: RET
// export function PrepareHorse ( ) ; begin
42035: LD_INT 0
42037: PPUSH
// uc_side := 0 ;
42038: LD_ADDR_OWVAR 20
42042: PUSH
42043: LD_INT 0
42045: ST_TO_ADDR
// uc_nation := 0 ;
42046: LD_ADDR_OWVAR 21
42050: PUSH
42051: LD_INT 0
42053: ST_TO_ADDR
// hc_class := class_horse ;
42054: LD_ADDR_OWVAR 28
42058: PUSH
42059: LD_INT 21
42061: ST_TO_ADDR
// hc_gallery :=  ;
42062: LD_ADDR_OWVAR 33
42066: PUSH
42067: LD_STRING 
42069: ST_TO_ADDR
// end ;
42070: LD_VAR 0 1
42074: RET
// export function PrepareMastodont ( ) ; begin
42075: LD_INT 0
42077: PPUSH
// uc_side := 0 ;
42078: LD_ADDR_OWVAR 20
42082: PUSH
42083: LD_INT 0
42085: ST_TO_ADDR
// uc_nation := 0 ;
42086: LD_ADDR_OWVAR 21
42090: PUSH
42091: LD_INT 0
42093: ST_TO_ADDR
// vc_chassis := class_mastodont ;
42094: LD_ADDR_OWVAR 37
42098: PUSH
42099: LD_INT 31
42101: ST_TO_ADDR
// vc_control := control_rider ;
42102: LD_ADDR_OWVAR 38
42106: PUSH
42107: LD_INT 4
42109: ST_TO_ADDR
// end ;
42110: LD_VAR 0 1
42114: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
42115: LD_INT 0
42117: PPUSH
42118: PPUSH
42119: PPUSH
// uc_side = 0 ;
42120: LD_ADDR_OWVAR 20
42124: PUSH
42125: LD_INT 0
42127: ST_TO_ADDR
// uc_nation = 0 ;
42128: LD_ADDR_OWVAR 21
42132: PUSH
42133: LD_INT 0
42135: ST_TO_ADDR
// InitHc_All ( ) ;
42136: CALL_OW 584
// InitVc ;
42140: CALL_OW 20
// if mastodonts then
42144: LD_VAR 0 6
42148: IFFALSE 42215
// for i = 1 to mastodonts do
42150: LD_ADDR_VAR 0 11
42154: PUSH
42155: DOUBLE
42156: LD_INT 1
42158: DEC
42159: ST_TO_ADDR
42160: LD_VAR 0 6
42164: PUSH
42165: FOR_TO
42166: IFFALSE 42213
// begin vc_chassis := 31 ;
42168: LD_ADDR_OWVAR 37
42172: PUSH
42173: LD_INT 31
42175: ST_TO_ADDR
// vc_control := control_rider ;
42176: LD_ADDR_OWVAR 38
42180: PUSH
42181: LD_INT 4
42183: ST_TO_ADDR
// animal := CreateVehicle ;
42184: LD_ADDR_VAR 0 12
42188: PUSH
42189: CALL_OW 45
42193: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
42194: LD_VAR 0 12
42198: PPUSH
42199: LD_VAR 0 8
42203: PPUSH
42204: LD_INT 0
42206: PPUSH
42207: CALL 44343 0 3
// end ;
42211: GO 42165
42213: POP
42214: POP
// if horses then
42215: LD_VAR 0 5
42219: IFFALSE 42286
// for i = 1 to horses do
42221: LD_ADDR_VAR 0 11
42225: PUSH
42226: DOUBLE
42227: LD_INT 1
42229: DEC
42230: ST_TO_ADDR
42231: LD_VAR 0 5
42235: PUSH
42236: FOR_TO
42237: IFFALSE 42284
// begin hc_class := 21 ;
42239: LD_ADDR_OWVAR 28
42243: PUSH
42244: LD_INT 21
42246: ST_TO_ADDR
// hc_gallery :=  ;
42247: LD_ADDR_OWVAR 33
42251: PUSH
42252: LD_STRING 
42254: ST_TO_ADDR
// animal := CreateHuman ;
42255: LD_ADDR_VAR 0 12
42259: PUSH
42260: CALL_OW 44
42264: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
42265: LD_VAR 0 12
42269: PPUSH
42270: LD_VAR 0 8
42274: PPUSH
42275: LD_INT 0
42277: PPUSH
42278: CALL 44343 0 3
// end ;
42282: GO 42236
42284: POP
42285: POP
// if birds then
42286: LD_VAR 0 1
42290: IFFALSE 42357
// for i = 1 to birds do
42292: LD_ADDR_VAR 0 11
42296: PUSH
42297: DOUBLE
42298: LD_INT 1
42300: DEC
42301: ST_TO_ADDR
42302: LD_VAR 0 1
42306: PUSH
42307: FOR_TO
42308: IFFALSE 42355
// begin hc_class = 18 ;
42310: LD_ADDR_OWVAR 28
42314: PUSH
42315: LD_INT 18
42317: ST_TO_ADDR
// hc_gallery =  ;
42318: LD_ADDR_OWVAR 33
42322: PUSH
42323: LD_STRING 
42325: ST_TO_ADDR
// animal := CreateHuman ;
42326: LD_ADDR_VAR 0 12
42330: PUSH
42331: CALL_OW 44
42335: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
42336: LD_VAR 0 12
42340: PPUSH
42341: LD_VAR 0 8
42345: PPUSH
42346: LD_INT 0
42348: PPUSH
42349: CALL 44343 0 3
// end ;
42353: GO 42307
42355: POP
42356: POP
// if tigers then
42357: LD_VAR 0 2
42361: IFFALSE 42445
// for i = 1 to tigers do
42363: LD_ADDR_VAR 0 11
42367: PUSH
42368: DOUBLE
42369: LD_INT 1
42371: DEC
42372: ST_TO_ADDR
42373: LD_VAR 0 2
42377: PUSH
42378: FOR_TO
42379: IFFALSE 42443
// begin hc_class = class_tiger ;
42381: LD_ADDR_OWVAR 28
42385: PUSH
42386: LD_INT 14
42388: ST_TO_ADDR
// hc_gallery =  ;
42389: LD_ADDR_OWVAR 33
42393: PUSH
42394: LD_STRING 
42396: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
42397: LD_ADDR_OWVAR 35
42401: PUSH
42402: LD_INT 7
42404: NEG
42405: PPUSH
42406: LD_INT 7
42408: PPUSH
42409: CALL_OW 12
42413: ST_TO_ADDR
// animal := CreateHuman ;
42414: LD_ADDR_VAR 0 12
42418: PUSH
42419: CALL_OW 44
42423: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
42424: LD_VAR 0 12
42428: PPUSH
42429: LD_VAR 0 8
42433: PPUSH
42434: LD_INT 0
42436: PPUSH
42437: CALL 44343 0 3
// end ;
42441: GO 42378
42443: POP
42444: POP
// if apemans then
42445: LD_VAR 0 3
42449: IFFALSE 42572
// for i = 1 to apemans do
42451: LD_ADDR_VAR 0 11
42455: PUSH
42456: DOUBLE
42457: LD_INT 1
42459: DEC
42460: ST_TO_ADDR
42461: LD_VAR 0 3
42465: PUSH
42466: FOR_TO
42467: IFFALSE 42570
// begin hc_class = class_apeman ;
42469: LD_ADDR_OWVAR 28
42473: PUSH
42474: LD_INT 12
42476: ST_TO_ADDR
// hc_gallery =  ;
42477: LD_ADDR_OWVAR 33
42481: PUSH
42482: LD_STRING 
42484: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
42485: LD_ADDR_OWVAR 35
42489: PUSH
42490: LD_INT 2
42492: NEG
42493: PPUSH
42494: LD_INT 2
42496: PPUSH
42497: CALL_OW 12
42501: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
42502: LD_ADDR_OWVAR 31
42506: PUSH
42507: LD_INT 1
42509: PPUSH
42510: LD_INT 3
42512: PPUSH
42513: CALL_OW 12
42517: PUSH
42518: LD_INT 1
42520: PPUSH
42521: LD_INT 3
42523: PPUSH
42524: CALL_OW 12
42528: PUSH
42529: LD_INT 0
42531: PUSH
42532: LD_INT 0
42534: PUSH
42535: EMPTY
42536: LIST
42537: LIST
42538: LIST
42539: LIST
42540: ST_TO_ADDR
// animal := CreateHuman ;
42541: LD_ADDR_VAR 0 12
42545: PUSH
42546: CALL_OW 44
42550: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
42551: LD_VAR 0 12
42555: PPUSH
42556: LD_VAR 0 8
42560: PPUSH
42561: LD_INT 0
42563: PPUSH
42564: CALL 44343 0 3
// end ;
42568: GO 42466
42570: POP
42571: POP
// if enchidnas then
42572: LD_VAR 0 4
42576: IFFALSE 42643
// for i = 1 to enchidnas do
42578: LD_ADDR_VAR 0 11
42582: PUSH
42583: DOUBLE
42584: LD_INT 1
42586: DEC
42587: ST_TO_ADDR
42588: LD_VAR 0 4
42592: PUSH
42593: FOR_TO
42594: IFFALSE 42641
// begin hc_class = 13 ;
42596: LD_ADDR_OWVAR 28
42600: PUSH
42601: LD_INT 13
42603: ST_TO_ADDR
// hc_gallery =  ;
42604: LD_ADDR_OWVAR 33
42608: PUSH
42609: LD_STRING 
42611: ST_TO_ADDR
// animal := CreateHuman ;
42612: LD_ADDR_VAR 0 12
42616: PUSH
42617: CALL_OW 44
42621: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
42622: LD_VAR 0 12
42626: PPUSH
42627: LD_VAR 0 8
42631: PPUSH
42632: LD_INT 0
42634: PPUSH
42635: CALL 44343 0 3
// end ;
42639: GO 42593
42641: POP
42642: POP
// if fishes then
42643: LD_VAR 0 7
42647: IFFALSE 42714
// for i = 1 to fishes do
42649: LD_ADDR_VAR 0 11
42653: PUSH
42654: DOUBLE
42655: LD_INT 1
42657: DEC
42658: ST_TO_ADDR
42659: LD_VAR 0 7
42663: PUSH
42664: FOR_TO
42665: IFFALSE 42712
// begin hc_class = 20 ;
42667: LD_ADDR_OWVAR 28
42671: PUSH
42672: LD_INT 20
42674: ST_TO_ADDR
// hc_gallery =  ;
42675: LD_ADDR_OWVAR 33
42679: PUSH
42680: LD_STRING 
42682: ST_TO_ADDR
// animal := CreateHuman ;
42683: LD_ADDR_VAR 0 12
42687: PUSH
42688: CALL_OW 44
42692: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
42693: LD_VAR 0 12
42697: PPUSH
42698: LD_VAR 0 9
42702: PPUSH
42703: LD_INT 0
42705: PPUSH
42706: CALL 44343 0 3
// end ;
42710: GO 42664
42712: POP
42713: POP
// end ;
42714: LD_VAR 0 10
42718: RET
// export function WantHeal ( sci , unit ) ; begin
42719: LD_INT 0
42721: PPUSH
// if GetTaskList ( sci ) > 0 then
42722: LD_VAR 0 1
42726: PPUSH
42727: CALL_OW 437
42731: PUSH
42732: LD_INT 0
42734: GREATER
42735: IFFALSE 42805
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
42737: LD_VAR 0 1
42741: PPUSH
42742: CALL_OW 437
42746: PUSH
42747: LD_INT 1
42749: ARRAY
42750: PUSH
42751: LD_INT 1
42753: ARRAY
42754: PUSH
42755: LD_STRING l
42757: EQUAL
42758: PUSH
42759: LD_VAR 0 1
42763: PPUSH
42764: CALL_OW 437
42768: PUSH
42769: LD_INT 1
42771: ARRAY
42772: PUSH
42773: LD_INT 4
42775: ARRAY
42776: PUSH
42777: LD_VAR 0 2
42781: EQUAL
42782: AND
42783: IFFALSE 42795
// result := true else
42785: LD_ADDR_VAR 0 3
42789: PUSH
42790: LD_INT 1
42792: ST_TO_ADDR
42793: GO 42803
// result := false ;
42795: LD_ADDR_VAR 0 3
42799: PUSH
42800: LD_INT 0
42802: ST_TO_ADDR
// end else
42803: GO 42813
// result := false ;
42805: LD_ADDR_VAR 0 3
42809: PUSH
42810: LD_INT 0
42812: ST_TO_ADDR
// end ;
42813: LD_VAR 0 3
42817: RET
// export function HealTarget ( sci ) ; begin
42818: LD_INT 0
42820: PPUSH
// if not sci then
42821: LD_VAR 0 1
42825: NOT
42826: IFFALSE 42830
// exit ;
42828: GO 42895
// result := 0 ;
42830: LD_ADDR_VAR 0 2
42834: PUSH
42835: LD_INT 0
42837: ST_TO_ADDR
// if GetTaskList ( sci ) then
42838: LD_VAR 0 1
42842: PPUSH
42843: CALL_OW 437
42847: IFFALSE 42895
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
42849: LD_VAR 0 1
42853: PPUSH
42854: CALL_OW 437
42858: PUSH
42859: LD_INT 1
42861: ARRAY
42862: PUSH
42863: LD_INT 1
42865: ARRAY
42866: PUSH
42867: LD_STRING l
42869: EQUAL
42870: IFFALSE 42895
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
42872: LD_ADDR_VAR 0 2
42876: PUSH
42877: LD_VAR 0 1
42881: PPUSH
42882: CALL_OW 437
42886: PUSH
42887: LD_INT 1
42889: ARRAY
42890: PUSH
42891: LD_INT 4
42893: ARRAY
42894: ST_TO_ADDR
// end ;
42895: LD_VAR 0 2
42899: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
42900: LD_INT 0
42902: PPUSH
42903: PPUSH
42904: PPUSH
42905: PPUSH
// if not base_units then
42906: LD_VAR 0 1
42910: NOT
42911: IFFALSE 42915
// exit ;
42913: GO 43002
// result := false ;
42915: LD_ADDR_VAR 0 2
42919: PUSH
42920: LD_INT 0
42922: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
42923: LD_ADDR_VAR 0 5
42927: PUSH
42928: LD_VAR 0 1
42932: PPUSH
42933: LD_INT 21
42935: PUSH
42936: LD_INT 3
42938: PUSH
42939: EMPTY
42940: LIST
42941: LIST
42942: PPUSH
42943: CALL_OW 72
42947: ST_TO_ADDR
// if not tmp then
42948: LD_VAR 0 5
42952: NOT
42953: IFFALSE 42957
// exit ;
42955: GO 43002
// for i in tmp do
42957: LD_ADDR_VAR 0 3
42961: PUSH
42962: LD_VAR 0 5
42966: PUSH
42967: FOR_IN
42968: IFFALSE 43000
// begin result := EnemyInRange ( i , 22 ) ;
42970: LD_ADDR_VAR 0 2
42974: PUSH
42975: LD_VAR 0 3
42979: PPUSH
42980: LD_INT 22
42982: PPUSH
42983: CALL 40589 0 2
42987: ST_TO_ADDR
// if result then
42988: LD_VAR 0 2
42992: IFFALSE 42998
// exit ;
42994: POP
42995: POP
42996: GO 43002
// end ;
42998: GO 42967
43000: POP
43001: POP
// end ;
43002: LD_VAR 0 2
43006: RET
// export function FilterByTag ( units , tag ) ; begin
43007: LD_INT 0
43009: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
43010: LD_ADDR_VAR 0 3
43014: PUSH
43015: LD_VAR 0 1
43019: PPUSH
43020: LD_INT 120
43022: PUSH
43023: LD_VAR 0 2
43027: PUSH
43028: EMPTY
43029: LIST
43030: LIST
43031: PPUSH
43032: CALL_OW 72
43036: ST_TO_ADDR
// end ;
43037: LD_VAR 0 3
43041: RET
// export function IsDriver ( un ) ; begin
43042: LD_INT 0
43044: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
43045: LD_ADDR_VAR 0 2
43049: PUSH
43050: LD_VAR 0 1
43054: PUSH
43055: LD_INT 55
43057: PUSH
43058: EMPTY
43059: LIST
43060: PPUSH
43061: CALL_OW 69
43065: IN
43066: ST_TO_ADDR
// end ;
43067: LD_VAR 0 2
43071: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
43072: LD_INT 0
43074: PPUSH
43075: PPUSH
// list := [ ] ;
43076: LD_ADDR_VAR 0 5
43080: PUSH
43081: EMPTY
43082: ST_TO_ADDR
// case d of 0 :
43083: LD_VAR 0 3
43087: PUSH
43088: LD_INT 0
43090: DOUBLE
43091: EQUAL
43092: IFTRUE 43096
43094: GO 43229
43096: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
43097: LD_ADDR_VAR 0 5
43101: PUSH
43102: LD_VAR 0 1
43106: PUSH
43107: LD_INT 4
43109: MINUS
43110: PUSH
43111: LD_VAR 0 2
43115: PUSH
43116: LD_INT 4
43118: MINUS
43119: PUSH
43120: LD_INT 2
43122: PUSH
43123: EMPTY
43124: LIST
43125: LIST
43126: LIST
43127: PUSH
43128: LD_VAR 0 1
43132: PUSH
43133: LD_INT 3
43135: MINUS
43136: PUSH
43137: LD_VAR 0 2
43141: PUSH
43142: LD_INT 1
43144: PUSH
43145: EMPTY
43146: LIST
43147: LIST
43148: LIST
43149: PUSH
43150: LD_VAR 0 1
43154: PUSH
43155: LD_INT 4
43157: PLUS
43158: PUSH
43159: LD_VAR 0 2
43163: PUSH
43164: LD_INT 4
43166: PUSH
43167: EMPTY
43168: LIST
43169: LIST
43170: LIST
43171: PUSH
43172: LD_VAR 0 1
43176: PUSH
43177: LD_INT 3
43179: PLUS
43180: PUSH
43181: LD_VAR 0 2
43185: PUSH
43186: LD_INT 3
43188: PLUS
43189: PUSH
43190: LD_INT 5
43192: PUSH
43193: EMPTY
43194: LIST
43195: LIST
43196: LIST
43197: PUSH
43198: LD_VAR 0 1
43202: PUSH
43203: LD_VAR 0 2
43207: PUSH
43208: LD_INT 4
43210: PLUS
43211: PUSH
43212: LD_INT 0
43214: PUSH
43215: EMPTY
43216: LIST
43217: LIST
43218: LIST
43219: PUSH
43220: EMPTY
43221: LIST
43222: LIST
43223: LIST
43224: LIST
43225: LIST
43226: ST_TO_ADDR
// end ; 1 :
43227: GO 43927
43229: LD_INT 1
43231: DOUBLE
43232: EQUAL
43233: IFTRUE 43237
43235: GO 43370
43237: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
43238: LD_ADDR_VAR 0 5
43242: PUSH
43243: LD_VAR 0 1
43247: PUSH
43248: LD_VAR 0 2
43252: PUSH
43253: LD_INT 4
43255: MINUS
43256: PUSH
43257: LD_INT 3
43259: PUSH
43260: EMPTY
43261: LIST
43262: LIST
43263: LIST
43264: PUSH
43265: LD_VAR 0 1
43269: PUSH
43270: LD_INT 3
43272: MINUS
43273: PUSH
43274: LD_VAR 0 2
43278: PUSH
43279: LD_INT 3
43281: MINUS
43282: PUSH
43283: LD_INT 2
43285: PUSH
43286: EMPTY
43287: LIST
43288: LIST
43289: LIST
43290: PUSH
43291: LD_VAR 0 1
43295: PUSH
43296: LD_INT 4
43298: MINUS
43299: PUSH
43300: LD_VAR 0 2
43304: PUSH
43305: LD_INT 1
43307: PUSH
43308: EMPTY
43309: LIST
43310: LIST
43311: LIST
43312: PUSH
43313: LD_VAR 0 1
43317: PUSH
43318: LD_VAR 0 2
43322: PUSH
43323: LD_INT 3
43325: PLUS
43326: PUSH
43327: LD_INT 0
43329: PUSH
43330: EMPTY
43331: LIST
43332: LIST
43333: LIST
43334: PUSH
43335: LD_VAR 0 1
43339: PUSH
43340: LD_INT 4
43342: PLUS
43343: PUSH
43344: LD_VAR 0 2
43348: PUSH
43349: LD_INT 4
43351: PLUS
43352: PUSH
43353: LD_INT 5
43355: PUSH
43356: EMPTY
43357: LIST
43358: LIST
43359: LIST
43360: PUSH
43361: EMPTY
43362: LIST
43363: LIST
43364: LIST
43365: LIST
43366: LIST
43367: ST_TO_ADDR
// end ; 2 :
43368: GO 43927
43370: LD_INT 2
43372: DOUBLE
43373: EQUAL
43374: IFTRUE 43378
43376: GO 43507
43378: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
43379: LD_ADDR_VAR 0 5
43383: PUSH
43384: LD_VAR 0 1
43388: PUSH
43389: LD_VAR 0 2
43393: PUSH
43394: LD_INT 3
43396: MINUS
43397: PUSH
43398: LD_INT 3
43400: PUSH
43401: EMPTY
43402: LIST
43403: LIST
43404: LIST
43405: PUSH
43406: LD_VAR 0 1
43410: PUSH
43411: LD_INT 4
43413: PLUS
43414: PUSH
43415: LD_VAR 0 2
43419: PUSH
43420: LD_INT 4
43422: PUSH
43423: EMPTY
43424: LIST
43425: LIST
43426: LIST
43427: PUSH
43428: LD_VAR 0 1
43432: PUSH
43433: LD_VAR 0 2
43437: PUSH
43438: LD_INT 4
43440: PLUS
43441: PUSH
43442: LD_INT 0
43444: PUSH
43445: EMPTY
43446: LIST
43447: LIST
43448: LIST
43449: PUSH
43450: LD_VAR 0 1
43454: PUSH
43455: LD_INT 3
43457: MINUS
43458: PUSH
43459: LD_VAR 0 2
43463: PUSH
43464: LD_INT 1
43466: PUSH
43467: EMPTY
43468: LIST
43469: LIST
43470: LIST
43471: PUSH
43472: LD_VAR 0 1
43476: PUSH
43477: LD_INT 4
43479: MINUS
43480: PUSH
43481: LD_VAR 0 2
43485: PUSH
43486: LD_INT 4
43488: MINUS
43489: PUSH
43490: LD_INT 2
43492: PUSH
43493: EMPTY
43494: LIST
43495: LIST
43496: LIST
43497: PUSH
43498: EMPTY
43499: LIST
43500: LIST
43501: LIST
43502: LIST
43503: LIST
43504: ST_TO_ADDR
// end ; 3 :
43505: GO 43927
43507: LD_INT 3
43509: DOUBLE
43510: EQUAL
43511: IFTRUE 43515
43513: GO 43648
43515: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
43516: LD_ADDR_VAR 0 5
43520: PUSH
43521: LD_VAR 0 1
43525: PUSH
43526: LD_INT 3
43528: PLUS
43529: PUSH
43530: LD_VAR 0 2
43534: PUSH
43535: LD_INT 4
43537: PUSH
43538: EMPTY
43539: LIST
43540: LIST
43541: LIST
43542: PUSH
43543: LD_VAR 0 1
43547: PUSH
43548: LD_INT 4
43550: PLUS
43551: PUSH
43552: LD_VAR 0 2
43556: PUSH
43557: LD_INT 4
43559: PLUS
43560: PUSH
43561: LD_INT 5
43563: PUSH
43564: EMPTY
43565: LIST
43566: LIST
43567: LIST
43568: PUSH
43569: LD_VAR 0 1
43573: PUSH
43574: LD_INT 4
43576: MINUS
43577: PUSH
43578: LD_VAR 0 2
43582: PUSH
43583: LD_INT 1
43585: PUSH
43586: EMPTY
43587: LIST
43588: LIST
43589: LIST
43590: PUSH
43591: LD_VAR 0 1
43595: PUSH
43596: LD_VAR 0 2
43600: PUSH
43601: LD_INT 4
43603: MINUS
43604: PUSH
43605: LD_INT 3
43607: PUSH
43608: EMPTY
43609: LIST
43610: LIST
43611: LIST
43612: PUSH
43613: LD_VAR 0 1
43617: PUSH
43618: LD_INT 3
43620: MINUS
43621: PUSH
43622: LD_VAR 0 2
43626: PUSH
43627: LD_INT 3
43629: MINUS
43630: PUSH
43631: LD_INT 2
43633: PUSH
43634: EMPTY
43635: LIST
43636: LIST
43637: LIST
43638: PUSH
43639: EMPTY
43640: LIST
43641: LIST
43642: LIST
43643: LIST
43644: LIST
43645: ST_TO_ADDR
// end ; 4 :
43646: GO 43927
43648: LD_INT 4
43650: DOUBLE
43651: EQUAL
43652: IFTRUE 43656
43654: GO 43789
43656: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
43657: LD_ADDR_VAR 0 5
43661: PUSH
43662: LD_VAR 0 1
43666: PUSH
43667: LD_VAR 0 2
43671: PUSH
43672: LD_INT 4
43674: PLUS
43675: PUSH
43676: LD_INT 0
43678: PUSH
43679: EMPTY
43680: LIST
43681: LIST
43682: LIST
43683: PUSH
43684: LD_VAR 0 1
43688: PUSH
43689: LD_INT 3
43691: PLUS
43692: PUSH
43693: LD_VAR 0 2
43697: PUSH
43698: LD_INT 3
43700: PLUS
43701: PUSH
43702: LD_INT 5
43704: PUSH
43705: EMPTY
43706: LIST
43707: LIST
43708: LIST
43709: PUSH
43710: LD_VAR 0 1
43714: PUSH
43715: LD_INT 4
43717: PLUS
43718: PUSH
43719: LD_VAR 0 2
43723: PUSH
43724: LD_INT 4
43726: PUSH
43727: EMPTY
43728: LIST
43729: LIST
43730: LIST
43731: PUSH
43732: LD_VAR 0 1
43736: PUSH
43737: LD_VAR 0 2
43741: PUSH
43742: LD_INT 3
43744: MINUS
43745: PUSH
43746: LD_INT 3
43748: PUSH
43749: EMPTY
43750: LIST
43751: LIST
43752: LIST
43753: PUSH
43754: LD_VAR 0 1
43758: PUSH
43759: LD_INT 4
43761: MINUS
43762: PUSH
43763: LD_VAR 0 2
43767: PUSH
43768: LD_INT 4
43770: MINUS
43771: PUSH
43772: LD_INT 2
43774: PUSH
43775: EMPTY
43776: LIST
43777: LIST
43778: LIST
43779: PUSH
43780: EMPTY
43781: LIST
43782: LIST
43783: LIST
43784: LIST
43785: LIST
43786: ST_TO_ADDR
// end ; 5 :
43787: GO 43927
43789: LD_INT 5
43791: DOUBLE
43792: EQUAL
43793: IFTRUE 43797
43795: GO 43926
43797: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
43798: LD_ADDR_VAR 0 5
43802: PUSH
43803: LD_VAR 0 1
43807: PUSH
43808: LD_INT 4
43810: MINUS
43811: PUSH
43812: LD_VAR 0 2
43816: PUSH
43817: LD_INT 1
43819: PUSH
43820: EMPTY
43821: LIST
43822: LIST
43823: LIST
43824: PUSH
43825: LD_VAR 0 1
43829: PUSH
43830: LD_VAR 0 2
43834: PUSH
43835: LD_INT 4
43837: MINUS
43838: PUSH
43839: LD_INT 3
43841: PUSH
43842: EMPTY
43843: LIST
43844: LIST
43845: LIST
43846: PUSH
43847: LD_VAR 0 1
43851: PUSH
43852: LD_INT 4
43854: PLUS
43855: PUSH
43856: LD_VAR 0 2
43860: PUSH
43861: LD_INT 4
43863: PLUS
43864: PUSH
43865: LD_INT 5
43867: PUSH
43868: EMPTY
43869: LIST
43870: LIST
43871: LIST
43872: PUSH
43873: LD_VAR 0 1
43877: PUSH
43878: LD_INT 3
43880: PLUS
43881: PUSH
43882: LD_VAR 0 2
43886: PUSH
43887: LD_INT 4
43889: PUSH
43890: EMPTY
43891: LIST
43892: LIST
43893: LIST
43894: PUSH
43895: LD_VAR 0 1
43899: PUSH
43900: LD_VAR 0 2
43904: PUSH
43905: LD_INT 3
43907: PLUS
43908: PUSH
43909: LD_INT 0
43911: PUSH
43912: EMPTY
43913: LIST
43914: LIST
43915: LIST
43916: PUSH
43917: EMPTY
43918: LIST
43919: LIST
43920: LIST
43921: LIST
43922: LIST
43923: ST_TO_ADDR
// end ; end ;
43924: GO 43927
43926: POP
// result := list ;
43927: LD_ADDR_VAR 0 4
43931: PUSH
43932: LD_VAR 0 5
43936: ST_TO_ADDR
// end ;
43937: LD_VAR 0 4
43941: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
43942: LD_INT 0
43944: PPUSH
43945: PPUSH
43946: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
43947: LD_VAR 0 1
43951: NOT
43952: PUSH
43953: LD_VAR 0 2
43957: PUSH
43958: LD_INT 1
43960: PUSH
43961: LD_INT 2
43963: PUSH
43964: LD_INT 3
43966: PUSH
43967: LD_INT 4
43969: PUSH
43970: EMPTY
43971: LIST
43972: LIST
43973: LIST
43974: LIST
43975: IN
43976: NOT
43977: OR
43978: IFFALSE 43982
// exit ;
43980: GO 44065
// tmp := [ ] ;
43982: LD_ADDR_VAR 0 5
43986: PUSH
43987: EMPTY
43988: ST_TO_ADDR
// for i in units do
43989: LD_ADDR_VAR 0 4
43993: PUSH
43994: LD_VAR 0 1
43998: PUSH
43999: FOR_IN
44000: IFFALSE 44034
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
44002: LD_ADDR_VAR 0 5
44006: PUSH
44007: LD_VAR 0 5
44011: PPUSH
44012: LD_VAR 0 4
44016: PPUSH
44017: LD_VAR 0 2
44021: PPUSH
44022: CALL_OW 259
44026: PPUSH
44027: CALL 45426 0 2
44031: ST_TO_ADDR
44032: GO 43999
44034: POP
44035: POP
// if not tmp then
44036: LD_VAR 0 5
44040: NOT
44041: IFFALSE 44045
// exit ;
44043: GO 44065
// result := SortListByListDesc ( units , tmp ) ;
44045: LD_ADDR_VAR 0 3
44049: PUSH
44050: LD_VAR 0 1
44054: PPUSH
44055: LD_VAR 0 5
44059: PPUSH
44060: CALL_OW 77
44064: ST_TO_ADDR
// end ;
44065: LD_VAR 0 3
44069: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
44070: LD_INT 0
44072: PPUSH
44073: PPUSH
44074: PPUSH
// result := false ;
44075: LD_ADDR_VAR 0 3
44079: PUSH
44080: LD_INT 0
44082: ST_TO_ADDR
// if not building then
44083: LD_VAR 0 2
44087: NOT
44088: IFFALSE 44092
// exit ;
44090: GO 44230
// x := GetX ( building ) ;
44092: LD_ADDR_VAR 0 4
44096: PUSH
44097: LD_VAR 0 2
44101: PPUSH
44102: CALL_OW 250
44106: ST_TO_ADDR
// y := GetY ( building ) ;
44107: LD_ADDR_VAR 0 5
44111: PUSH
44112: LD_VAR 0 2
44116: PPUSH
44117: CALL_OW 251
44121: ST_TO_ADDR
// if not x or not y then
44122: LD_VAR 0 4
44126: NOT
44127: PUSH
44128: LD_VAR 0 5
44132: NOT
44133: OR
44134: IFFALSE 44138
// exit ;
44136: GO 44230
// if GetTaskList ( unit ) then
44138: LD_VAR 0 1
44142: PPUSH
44143: CALL_OW 437
44147: IFFALSE 44230
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
44149: LD_STRING e
44151: PUSH
44152: LD_VAR 0 1
44156: PPUSH
44157: CALL_OW 437
44161: PUSH
44162: LD_INT 1
44164: ARRAY
44165: PUSH
44166: LD_INT 1
44168: ARRAY
44169: EQUAL
44170: PUSH
44171: LD_VAR 0 4
44175: PUSH
44176: LD_VAR 0 1
44180: PPUSH
44181: CALL_OW 437
44185: PUSH
44186: LD_INT 1
44188: ARRAY
44189: PUSH
44190: LD_INT 2
44192: ARRAY
44193: EQUAL
44194: AND
44195: PUSH
44196: LD_VAR 0 5
44200: PUSH
44201: LD_VAR 0 1
44205: PPUSH
44206: CALL_OW 437
44210: PUSH
44211: LD_INT 1
44213: ARRAY
44214: PUSH
44215: LD_INT 3
44217: ARRAY
44218: EQUAL
44219: AND
44220: IFFALSE 44230
// result := true end ;
44222: LD_ADDR_VAR 0 3
44226: PUSH
44227: LD_INT 1
44229: ST_TO_ADDR
// end ;
44230: LD_VAR 0 3
44234: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
44235: LD_INT 0
44237: PPUSH
// result := false ;
44238: LD_ADDR_VAR 0 4
44242: PUSH
44243: LD_INT 0
44245: ST_TO_ADDR
// if GetTaskList ( unit ) then
44246: LD_VAR 0 1
44250: PPUSH
44251: CALL_OW 437
44255: IFFALSE 44338
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
44257: LD_STRING M
44259: PUSH
44260: LD_VAR 0 1
44264: PPUSH
44265: CALL_OW 437
44269: PUSH
44270: LD_INT 1
44272: ARRAY
44273: PUSH
44274: LD_INT 1
44276: ARRAY
44277: EQUAL
44278: PUSH
44279: LD_VAR 0 2
44283: PUSH
44284: LD_VAR 0 1
44288: PPUSH
44289: CALL_OW 437
44293: PUSH
44294: LD_INT 1
44296: ARRAY
44297: PUSH
44298: LD_INT 2
44300: ARRAY
44301: EQUAL
44302: AND
44303: PUSH
44304: LD_VAR 0 3
44308: PUSH
44309: LD_VAR 0 1
44313: PPUSH
44314: CALL_OW 437
44318: PUSH
44319: LD_INT 1
44321: ARRAY
44322: PUSH
44323: LD_INT 3
44325: ARRAY
44326: EQUAL
44327: AND
44328: IFFALSE 44338
// result := true ;
44330: LD_ADDR_VAR 0 4
44334: PUSH
44335: LD_INT 1
44337: ST_TO_ADDR
// end ; end ;
44338: LD_VAR 0 4
44342: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
44343: LD_INT 0
44345: PPUSH
44346: PPUSH
44347: PPUSH
44348: PPUSH
// if not unit or not area then
44349: LD_VAR 0 1
44353: NOT
44354: PUSH
44355: LD_VAR 0 2
44359: NOT
44360: OR
44361: IFFALSE 44365
// exit ;
44363: GO 44529
// tmp := AreaToList ( area , i ) ;
44365: LD_ADDR_VAR 0 6
44369: PUSH
44370: LD_VAR 0 2
44374: PPUSH
44375: LD_VAR 0 5
44379: PPUSH
44380: CALL_OW 517
44384: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
44385: LD_ADDR_VAR 0 5
44389: PUSH
44390: DOUBLE
44391: LD_INT 1
44393: DEC
44394: ST_TO_ADDR
44395: LD_VAR 0 6
44399: PUSH
44400: LD_INT 1
44402: ARRAY
44403: PUSH
44404: FOR_TO
44405: IFFALSE 44527
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
44407: LD_ADDR_VAR 0 7
44411: PUSH
44412: LD_VAR 0 6
44416: PUSH
44417: LD_INT 1
44419: ARRAY
44420: PUSH
44421: LD_VAR 0 5
44425: ARRAY
44426: PUSH
44427: LD_VAR 0 6
44431: PUSH
44432: LD_INT 2
44434: ARRAY
44435: PUSH
44436: LD_VAR 0 5
44440: ARRAY
44441: PUSH
44442: EMPTY
44443: LIST
44444: LIST
44445: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
44446: LD_VAR 0 7
44450: PUSH
44451: LD_INT 1
44453: ARRAY
44454: PPUSH
44455: LD_VAR 0 7
44459: PUSH
44460: LD_INT 2
44462: ARRAY
44463: PPUSH
44464: CALL_OW 428
44468: PUSH
44469: LD_INT 0
44471: EQUAL
44472: IFFALSE 44525
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
44474: LD_VAR 0 1
44478: PPUSH
44479: LD_VAR 0 7
44483: PUSH
44484: LD_INT 1
44486: ARRAY
44487: PPUSH
44488: LD_VAR 0 7
44492: PUSH
44493: LD_INT 2
44495: ARRAY
44496: PPUSH
44497: LD_VAR 0 3
44501: PPUSH
44502: CALL_OW 48
// result := IsPlaced ( unit ) ;
44506: LD_ADDR_VAR 0 4
44510: PUSH
44511: LD_VAR 0 1
44515: PPUSH
44516: CALL_OW 305
44520: ST_TO_ADDR
// exit ;
44521: POP
44522: POP
44523: GO 44529
// end ; end ;
44525: GO 44404
44527: POP
44528: POP
// end ;
44529: LD_VAR 0 4
44533: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
44534: LD_INT 0
44536: PPUSH
44537: PPUSH
44538: PPUSH
// if not side or side > 8 then
44539: LD_VAR 0 1
44543: NOT
44544: PUSH
44545: LD_VAR 0 1
44549: PUSH
44550: LD_INT 8
44552: GREATER
44553: OR
44554: IFFALSE 44558
// exit ;
44556: GO 44745
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
44558: LD_ADDR_VAR 0 4
44562: PUSH
44563: LD_INT 22
44565: PUSH
44566: LD_VAR 0 1
44570: PUSH
44571: EMPTY
44572: LIST
44573: LIST
44574: PUSH
44575: LD_INT 21
44577: PUSH
44578: LD_INT 3
44580: PUSH
44581: EMPTY
44582: LIST
44583: LIST
44584: PUSH
44585: EMPTY
44586: LIST
44587: LIST
44588: PPUSH
44589: CALL_OW 69
44593: ST_TO_ADDR
// if not tmp then
44594: LD_VAR 0 4
44598: NOT
44599: IFFALSE 44603
// exit ;
44601: GO 44745
// enable_addtolog := true ;
44603: LD_ADDR_OWVAR 81
44607: PUSH
44608: LD_INT 1
44610: ST_TO_ADDR
// AddToLog ( [ ) ;
44611: LD_STRING [
44613: PPUSH
44614: CALL_OW 561
// for i in tmp do
44618: LD_ADDR_VAR 0 3
44622: PUSH
44623: LD_VAR 0 4
44627: PUSH
44628: FOR_IN
44629: IFFALSE 44736
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
44631: LD_STRING [
44633: PUSH
44634: LD_VAR 0 3
44638: PPUSH
44639: CALL_OW 266
44643: STR
44644: PUSH
44645: LD_STRING , 
44647: STR
44648: PUSH
44649: LD_VAR 0 3
44653: PPUSH
44654: CALL_OW 250
44658: STR
44659: PUSH
44660: LD_STRING , 
44662: STR
44663: PUSH
44664: LD_VAR 0 3
44668: PPUSH
44669: CALL_OW 251
44673: STR
44674: PUSH
44675: LD_STRING , 
44677: STR
44678: PUSH
44679: LD_VAR 0 3
44683: PPUSH
44684: CALL_OW 254
44688: STR
44689: PUSH
44690: LD_STRING , 
44692: STR
44693: PUSH
44694: LD_VAR 0 3
44698: PPUSH
44699: LD_INT 1
44701: PPUSH
44702: CALL_OW 268
44706: STR
44707: PUSH
44708: LD_STRING , 
44710: STR
44711: PUSH
44712: LD_VAR 0 3
44716: PPUSH
44717: LD_INT 2
44719: PPUSH
44720: CALL_OW 268
44724: STR
44725: PUSH
44726: LD_STRING ],
44728: STR
44729: PPUSH
44730: CALL_OW 561
// end ;
44734: GO 44628
44736: POP
44737: POP
// AddToLog ( ]; ) ;
44738: LD_STRING ];
44740: PPUSH
44741: CALL_OW 561
// end ;
44745: LD_VAR 0 2
44749: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
44750: LD_INT 0
44752: PPUSH
44753: PPUSH
44754: PPUSH
44755: PPUSH
44756: PPUSH
// if not area or not rate or not max then
44757: LD_VAR 0 1
44761: NOT
44762: PUSH
44763: LD_VAR 0 2
44767: NOT
44768: OR
44769: PUSH
44770: LD_VAR 0 4
44774: NOT
44775: OR
44776: IFFALSE 44780
// exit ;
44778: GO 44969
// while 1 do
44780: LD_INT 1
44782: IFFALSE 44969
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
44784: LD_ADDR_VAR 0 9
44788: PUSH
44789: LD_VAR 0 1
44793: PPUSH
44794: LD_INT 1
44796: PPUSH
44797: CALL_OW 287
44801: PUSH
44802: LD_INT 10
44804: MUL
44805: ST_TO_ADDR
// r := rate / 10 ;
44806: LD_ADDR_VAR 0 7
44810: PUSH
44811: LD_VAR 0 2
44815: PUSH
44816: LD_INT 10
44818: DIVREAL
44819: ST_TO_ADDR
// time := 1 1$00 ;
44820: LD_ADDR_VAR 0 8
44824: PUSH
44825: LD_INT 2100
44827: ST_TO_ADDR
// if amount < min then
44828: LD_VAR 0 9
44832: PUSH
44833: LD_VAR 0 3
44837: LESS
44838: IFFALSE 44856
// r := r * 2 else
44840: LD_ADDR_VAR 0 7
44844: PUSH
44845: LD_VAR 0 7
44849: PUSH
44850: LD_INT 2
44852: MUL
44853: ST_TO_ADDR
44854: GO 44882
// if amount > max then
44856: LD_VAR 0 9
44860: PUSH
44861: LD_VAR 0 4
44865: GREATER
44866: IFFALSE 44882
// r := r / 2 ;
44868: LD_ADDR_VAR 0 7
44872: PUSH
44873: LD_VAR 0 7
44877: PUSH
44878: LD_INT 2
44880: DIVREAL
44881: ST_TO_ADDR
// time := time / r ;
44882: LD_ADDR_VAR 0 8
44886: PUSH
44887: LD_VAR 0 8
44891: PUSH
44892: LD_VAR 0 7
44896: DIVREAL
44897: ST_TO_ADDR
// if time < 0 then
44898: LD_VAR 0 8
44902: PUSH
44903: LD_INT 0
44905: LESS
44906: IFFALSE 44923
// time := time * - 1 ;
44908: LD_ADDR_VAR 0 8
44912: PUSH
44913: LD_VAR 0 8
44917: PUSH
44918: LD_INT 1
44920: NEG
44921: MUL
44922: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
44923: LD_VAR 0 8
44927: PUSH
44928: LD_INT 35
44930: PPUSH
44931: LD_INT 875
44933: PPUSH
44934: CALL_OW 12
44938: PLUS
44939: PPUSH
44940: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
44944: LD_INT 1
44946: PPUSH
44947: LD_INT 5
44949: PPUSH
44950: CALL_OW 12
44954: PPUSH
44955: LD_VAR 0 1
44959: PPUSH
44960: LD_INT 1
44962: PPUSH
44963: CALL_OW 55
// end ;
44967: GO 44780
// end ;
44969: LD_VAR 0 5
44973: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
44974: LD_INT 0
44976: PPUSH
44977: PPUSH
44978: PPUSH
44979: PPUSH
44980: PPUSH
44981: PPUSH
44982: PPUSH
44983: PPUSH
// if not turrets or not factories then
44984: LD_VAR 0 1
44988: NOT
44989: PUSH
44990: LD_VAR 0 2
44994: NOT
44995: OR
44996: IFFALSE 45000
// exit ;
44998: GO 45307
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
45000: LD_ADDR_VAR 0 10
45004: PUSH
45005: LD_INT 5
45007: PUSH
45008: LD_INT 6
45010: PUSH
45011: EMPTY
45012: LIST
45013: LIST
45014: PUSH
45015: LD_INT 2
45017: PUSH
45018: LD_INT 4
45020: PUSH
45021: EMPTY
45022: LIST
45023: LIST
45024: PUSH
45025: LD_INT 3
45027: PUSH
45028: LD_INT 5
45030: PUSH
45031: EMPTY
45032: LIST
45033: LIST
45034: PUSH
45035: EMPTY
45036: LIST
45037: LIST
45038: LIST
45039: PUSH
45040: LD_INT 24
45042: PUSH
45043: LD_INT 25
45045: PUSH
45046: EMPTY
45047: LIST
45048: LIST
45049: PUSH
45050: LD_INT 23
45052: PUSH
45053: LD_INT 27
45055: PUSH
45056: EMPTY
45057: LIST
45058: LIST
45059: PUSH
45060: EMPTY
45061: LIST
45062: LIST
45063: PUSH
45064: LD_INT 42
45066: PUSH
45067: LD_INT 43
45069: PUSH
45070: EMPTY
45071: LIST
45072: LIST
45073: PUSH
45074: LD_INT 44
45076: PUSH
45077: LD_INT 46
45079: PUSH
45080: EMPTY
45081: LIST
45082: LIST
45083: PUSH
45084: LD_INT 45
45086: PUSH
45087: LD_INT 47
45089: PUSH
45090: EMPTY
45091: LIST
45092: LIST
45093: PUSH
45094: EMPTY
45095: LIST
45096: LIST
45097: LIST
45098: PUSH
45099: EMPTY
45100: LIST
45101: LIST
45102: LIST
45103: ST_TO_ADDR
// result := [ ] ;
45104: LD_ADDR_VAR 0 3
45108: PUSH
45109: EMPTY
45110: ST_TO_ADDR
// for i in turrets do
45111: LD_ADDR_VAR 0 4
45115: PUSH
45116: LD_VAR 0 1
45120: PUSH
45121: FOR_IN
45122: IFFALSE 45305
// begin nat := GetNation ( i ) ;
45124: LD_ADDR_VAR 0 7
45128: PUSH
45129: LD_VAR 0 4
45133: PPUSH
45134: CALL_OW 248
45138: ST_TO_ADDR
// weapon := 0 ;
45139: LD_ADDR_VAR 0 8
45143: PUSH
45144: LD_INT 0
45146: ST_TO_ADDR
// if not nat then
45147: LD_VAR 0 7
45151: NOT
45152: IFFALSE 45156
// continue ;
45154: GO 45121
// for j in list [ nat ] do
45156: LD_ADDR_VAR 0 5
45160: PUSH
45161: LD_VAR 0 10
45165: PUSH
45166: LD_VAR 0 7
45170: ARRAY
45171: PUSH
45172: FOR_IN
45173: IFFALSE 45214
// if GetBWeapon ( i ) = j [ 1 ] then
45175: LD_VAR 0 4
45179: PPUSH
45180: CALL_OW 269
45184: PUSH
45185: LD_VAR 0 5
45189: PUSH
45190: LD_INT 1
45192: ARRAY
45193: EQUAL
45194: IFFALSE 45212
// begin weapon := j [ 2 ] ;
45196: LD_ADDR_VAR 0 8
45200: PUSH
45201: LD_VAR 0 5
45205: PUSH
45206: LD_INT 2
45208: ARRAY
45209: ST_TO_ADDR
// break ;
45210: GO 45214
// end ;
45212: GO 45172
45214: POP
45215: POP
// if not weapon then
45216: LD_VAR 0 8
45220: NOT
45221: IFFALSE 45225
// continue ;
45223: GO 45121
// for k in factories do
45225: LD_ADDR_VAR 0 6
45229: PUSH
45230: LD_VAR 0 2
45234: PUSH
45235: FOR_IN
45236: IFFALSE 45301
// begin weapons := AvailableWeaponList ( k ) ;
45238: LD_ADDR_VAR 0 9
45242: PUSH
45243: LD_VAR 0 6
45247: PPUSH
45248: CALL_OW 478
45252: ST_TO_ADDR
// if not weapons then
45253: LD_VAR 0 9
45257: NOT
45258: IFFALSE 45262
// continue ;
45260: GO 45235
// if weapon in weapons then
45262: LD_VAR 0 8
45266: PUSH
45267: LD_VAR 0 9
45271: IN
45272: IFFALSE 45299
// begin result := [ i , weapon ] ;
45274: LD_ADDR_VAR 0 3
45278: PUSH
45279: LD_VAR 0 4
45283: PUSH
45284: LD_VAR 0 8
45288: PUSH
45289: EMPTY
45290: LIST
45291: LIST
45292: ST_TO_ADDR
// exit ;
45293: POP
45294: POP
45295: POP
45296: POP
45297: GO 45307
// end ; end ;
45299: GO 45235
45301: POP
45302: POP
// end ;
45303: GO 45121
45305: POP
45306: POP
// end ;
45307: LD_VAR 0 3
45311: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
45312: LD_INT 0
45314: PPUSH
// if not side or side > 8 then
45315: LD_VAR 0 3
45319: NOT
45320: PUSH
45321: LD_VAR 0 3
45325: PUSH
45326: LD_INT 8
45328: GREATER
45329: OR
45330: IFFALSE 45334
// exit ;
45332: GO 45393
// if not range then
45334: LD_VAR 0 4
45338: NOT
45339: IFFALSE 45350
// range := - 12 ;
45341: LD_ADDR_VAR 0 4
45345: PUSH
45346: LD_INT 12
45348: NEG
45349: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
45350: LD_VAR 0 1
45354: PPUSH
45355: LD_VAR 0 2
45359: PPUSH
45360: LD_VAR 0 3
45364: PPUSH
45365: LD_VAR 0 4
45369: PPUSH
45370: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
45374: LD_VAR 0 1
45378: PPUSH
45379: LD_VAR 0 2
45383: PPUSH
45384: LD_VAR 0 3
45388: PPUSH
45389: CALL_OW 331
// end ;
45393: LD_VAR 0 5
45397: RET
// export function Video ( mode ) ; begin
45398: LD_INT 0
45400: PPUSH
// ingame_video = mode ;
45401: LD_ADDR_OWVAR 52
45405: PUSH
45406: LD_VAR 0 1
45410: ST_TO_ADDR
// interface_hidden = mode ;
45411: LD_ADDR_OWVAR 54
45415: PUSH
45416: LD_VAR 0 1
45420: ST_TO_ADDR
// end ;
45421: LD_VAR 0 2
45425: RET
// export function Join ( array , element ) ; begin
45426: LD_INT 0
45428: PPUSH
// result := Replace ( array , array + 1 , element ) ;
45429: LD_ADDR_VAR 0 3
45433: PUSH
45434: LD_VAR 0 1
45438: PPUSH
45439: LD_VAR 0 1
45443: PUSH
45444: LD_INT 1
45446: PLUS
45447: PPUSH
45448: LD_VAR 0 2
45452: PPUSH
45453: CALL_OW 1
45457: ST_TO_ADDR
// end ;
45458: LD_VAR 0 3
45462: RET
// export function JoinUnion ( array , element ) ; begin
45463: LD_INT 0
45465: PPUSH
// result := array union element ;
45466: LD_ADDR_VAR 0 3
45470: PUSH
45471: LD_VAR 0 1
45475: PUSH
45476: LD_VAR 0 2
45480: UNION
45481: ST_TO_ADDR
// end ;
45482: LD_VAR 0 3
45486: RET
// export function GetBehemoths ( side ) ; begin
45487: LD_INT 0
45489: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
45490: LD_ADDR_VAR 0 2
45494: PUSH
45495: LD_INT 22
45497: PUSH
45498: LD_VAR 0 1
45502: PUSH
45503: EMPTY
45504: LIST
45505: LIST
45506: PUSH
45507: LD_INT 31
45509: PUSH
45510: LD_INT 25
45512: PUSH
45513: EMPTY
45514: LIST
45515: LIST
45516: PUSH
45517: EMPTY
45518: LIST
45519: LIST
45520: PPUSH
45521: CALL_OW 69
45525: ST_TO_ADDR
// end ;
45526: LD_VAR 0 2
45530: RET
// export function Shuffle ( array ) ; var i , index ; begin
45531: LD_INT 0
45533: PPUSH
45534: PPUSH
45535: PPUSH
// result := [ ] ;
45536: LD_ADDR_VAR 0 2
45540: PUSH
45541: EMPTY
45542: ST_TO_ADDR
// if not array then
45543: LD_VAR 0 1
45547: NOT
45548: IFFALSE 45552
// exit ;
45550: GO 45651
// Randomize ;
45552: CALL_OW 10
// for i = array downto 1 do
45556: LD_ADDR_VAR 0 3
45560: PUSH
45561: DOUBLE
45562: LD_VAR 0 1
45566: INC
45567: ST_TO_ADDR
45568: LD_INT 1
45570: PUSH
45571: FOR_DOWNTO
45572: IFFALSE 45649
// begin index := rand ( 1 , array ) ;
45574: LD_ADDR_VAR 0 4
45578: PUSH
45579: LD_INT 1
45581: PPUSH
45582: LD_VAR 0 1
45586: PPUSH
45587: CALL_OW 12
45591: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
45592: LD_ADDR_VAR 0 2
45596: PUSH
45597: LD_VAR 0 2
45601: PPUSH
45602: LD_VAR 0 2
45606: PUSH
45607: LD_INT 1
45609: PLUS
45610: PPUSH
45611: LD_VAR 0 1
45615: PUSH
45616: LD_VAR 0 4
45620: ARRAY
45621: PPUSH
45622: CALL_OW 2
45626: ST_TO_ADDR
// array := Delete ( array , index ) ;
45627: LD_ADDR_VAR 0 1
45631: PUSH
45632: LD_VAR 0 1
45636: PPUSH
45637: LD_VAR 0 4
45641: PPUSH
45642: CALL_OW 3
45646: ST_TO_ADDR
// end ;
45647: GO 45571
45649: POP
45650: POP
// end ;
45651: LD_VAR 0 2
45655: RET
// export function GetBaseMaterials ( base ) ; begin
45656: LD_INT 0
45658: PPUSH
// result := [ 0 , 0 , 0 ] ;
45659: LD_ADDR_VAR 0 2
45663: PUSH
45664: LD_INT 0
45666: PUSH
45667: LD_INT 0
45669: PUSH
45670: LD_INT 0
45672: PUSH
45673: EMPTY
45674: LIST
45675: LIST
45676: LIST
45677: ST_TO_ADDR
// if not base then
45678: LD_VAR 0 1
45682: NOT
45683: IFFALSE 45687
// exit ;
45685: GO 45736
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
45687: LD_ADDR_VAR 0 2
45691: PUSH
45692: LD_VAR 0 1
45696: PPUSH
45697: LD_INT 1
45699: PPUSH
45700: CALL_OW 275
45704: PUSH
45705: LD_VAR 0 1
45709: PPUSH
45710: LD_INT 2
45712: PPUSH
45713: CALL_OW 275
45717: PUSH
45718: LD_VAR 0 1
45722: PPUSH
45723: LD_INT 3
45725: PPUSH
45726: CALL_OW 275
45730: PUSH
45731: EMPTY
45732: LIST
45733: LIST
45734: LIST
45735: ST_TO_ADDR
// end ;
45736: LD_VAR 0 2
45740: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
45741: LD_INT 0
45743: PPUSH
45744: PPUSH
// result := array ;
45745: LD_ADDR_VAR 0 3
45749: PUSH
45750: LD_VAR 0 1
45754: ST_TO_ADDR
// if size >= result then
45755: LD_VAR 0 2
45759: PUSH
45760: LD_VAR 0 3
45764: GREATEREQUAL
45765: IFFALSE 45769
// exit ;
45767: GO 45819
// if size then
45769: LD_VAR 0 2
45773: IFFALSE 45819
// for i := array downto size do
45775: LD_ADDR_VAR 0 4
45779: PUSH
45780: DOUBLE
45781: LD_VAR 0 1
45785: INC
45786: ST_TO_ADDR
45787: LD_VAR 0 2
45791: PUSH
45792: FOR_DOWNTO
45793: IFFALSE 45817
// result := Delete ( result , result ) ;
45795: LD_ADDR_VAR 0 3
45799: PUSH
45800: LD_VAR 0 3
45804: PPUSH
45805: LD_VAR 0 3
45809: PPUSH
45810: CALL_OW 3
45814: ST_TO_ADDR
45815: GO 45792
45817: POP
45818: POP
// end ;
45819: LD_VAR 0 3
45823: RET
// export function ComExit ( unit ) ; var tmp ; begin
45824: LD_INT 0
45826: PPUSH
45827: PPUSH
// if not IsInUnit ( unit ) then
45828: LD_VAR 0 1
45832: PPUSH
45833: CALL_OW 310
45837: NOT
45838: IFFALSE 45842
// exit ;
45840: GO 45902
// tmp := IsInUnit ( unit ) ;
45842: LD_ADDR_VAR 0 3
45846: PUSH
45847: LD_VAR 0 1
45851: PPUSH
45852: CALL_OW 310
45856: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
45857: LD_VAR 0 3
45861: PPUSH
45862: CALL_OW 247
45866: PUSH
45867: LD_INT 2
45869: EQUAL
45870: IFFALSE 45883
// ComExitVehicle ( unit ) else
45872: LD_VAR 0 1
45876: PPUSH
45877: CALL_OW 121
45881: GO 45892
// ComExitBuilding ( unit ) ;
45883: LD_VAR 0 1
45887: PPUSH
45888: CALL_OW 122
// result := tmp ;
45892: LD_ADDR_VAR 0 2
45896: PUSH
45897: LD_VAR 0 3
45901: ST_TO_ADDR
// end ;
45902: LD_VAR 0 2
45906: RET
// export function ComExitAll ( units ) ; var i ; begin
45907: LD_INT 0
45909: PPUSH
45910: PPUSH
// if not units then
45911: LD_VAR 0 1
45915: NOT
45916: IFFALSE 45920
// exit ;
45918: GO 45946
// for i in units do
45920: LD_ADDR_VAR 0 3
45924: PUSH
45925: LD_VAR 0 1
45929: PUSH
45930: FOR_IN
45931: IFFALSE 45944
// ComExit ( i ) ;
45933: LD_VAR 0 3
45937: PPUSH
45938: CALL 45824 0 1
45942: GO 45930
45944: POP
45945: POP
// end ;
45946: LD_VAR 0 2
45950: RET
// export function ResetHc ; begin
45951: LD_INT 0
45953: PPUSH
// InitHc ;
45954: CALL_OW 19
// hc_importance := 0 ;
45958: LD_ADDR_OWVAR 32
45962: PUSH
45963: LD_INT 0
45965: ST_TO_ADDR
// end ;
45966: LD_VAR 0 1
45970: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
45971: LD_INT 0
45973: PPUSH
45974: PPUSH
45975: PPUSH
// _x := ( x1 + x2 ) div 2 ;
45976: LD_ADDR_VAR 0 6
45980: PUSH
45981: LD_VAR 0 1
45985: PUSH
45986: LD_VAR 0 3
45990: PLUS
45991: PUSH
45992: LD_INT 2
45994: DIV
45995: ST_TO_ADDR
// if _x < 0 then
45996: LD_VAR 0 6
46000: PUSH
46001: LD_INT 0
46003: LESS
46004: IFFALSE 46021
// _x := _x * - 1 ;
46006: LD_ADDR_VAR 0 6
46010: PUSH
46011: LD_VAR 0 6
46015: PUSH
46016: LD_INT 1
46018: NEG
46019: MUL
46020: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
46021: LD_ADDR_VAR 0 7
46025: PUSH
46026: LD_VAR 0 2
46030: PUSH
46031: LD_VAR 0 4
46035: PLUS
46036: PUSH
46037: LD_INT 2
46039: DIV
46040: ST_TO_ADDR
// if _y < 0 then
46041: LD_VAR 0 7
46045: PUSH
46046: LD_INT 0
46048: LESS
46049: IFFALSE 46066
// _y := _y * - 1 ;
46051: LD_ADDR_VAR 0 7
46055: PUSH
46056: LD_VAR 0 7
46060: PUSH
46061: LD_INT 1
46063: NEG
46064: MUL
46065: ST_TO_ADDR
// result := [ _x , _y ] ;
46066: LD_ADDR_VAR 0 5
46070: PUSH
46071: LD_VAR 0 6
46075: PUSH
46076: LD_VAR 0 7
46080: PUSH
46081: EMPTY
46082: LIST
46083: LIST
46084: ST_TO_ADDR
// end ;
46085: LD_VAR 0 5
46089: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
46090: LD_INT 0
46092: PPUSH
46093: PPUSH
46094: PPUSH
46095: PPUSH
// task := GetTaskList ( unit ) ;
46096: LD_ADDR_VAR 0 7
46100: PUSH
46101: LD_VAR 0 1
46105: PPUSH
46106: CALL_OW 437
46110: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
46111: LD_VAR 0 7
46115: NOT
46116: PUSH
46117: LD_VAR 0 1
46121: PPUSH
46122: LD_VAR 0 2
46126: PPUSH
46127: CALL_OW 308
46131: NOT
46132: AND
46133: IFFALSE 46137
// exit ;
46135: GO 46255
// if IsInArea ( unit , area ) then
46137: LD_VAR 0 1
46141: PPUSH
46142: LD_VAR 0 2
46146: PPUSH
46147: CALL_OW 308
46151: IFFALSE 46169
// begin ComMoveToArea ( unit , goAway ) ;
46153: LD_VAR 0 1
46157: PPUSH
46158: LD_VAR 0 3
46162: PPUSH
46163: CALL_OW 113
// exit ;
46167: GO 46255
// end ; if task [ 1 ] [ 1 ] <> M then
46169: LD_VAR 0 7
46173: PUSH
46174: LD_INT 1
46176: ARRAY
46177: PUSH
46178: LD_INT 1
46180: ARRAY
46181: PUSH
46182: LD_STRING M
46184: NONEQUAL
46185: IFFALSE 46189
// exit ;
46187: GO 46255
// x := task [ 1 ] [ 2 ] ;
46189: LD_ADDR_VAR 0 5
46193: PUSH
46194: LD_VAR 0 7
46198: PUSH
46199: LD_INT 1
46201: ARRAY
46202: PUSH
46203: LD_INT 2
46205: ARRAY
46206: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
46207: LD_ADDR_VAR 0 6
46211: PUSH
46212: LD_VAR 0 7
46216: PUSH
46217: LD_INT 1
46219: ARRAY
46220: PUSH
46221: LD_INT 3
46223: ARRAY
46224: ST_TO_ADDR
// if InArea ( x , y , area ) then
46225: LD_VAR 0 5
46229: PPUSH
46230: LD_VAR 0 6
46234: PPUSH
46235: LD_VAR 0 2
46239: PPUSH
46240: CALL_OW 309
46244: IFFALSE 46255
// ComStop ( unit ) ;
46246: LD_VAR 0 1
46250: PPUSH
46251: CALL_OW 141
// end ;
46255: LD_VAR 0 4
46259: RET
// export function Abs ( value ) ; begin
46260: LD_INT 0
46262: PPUSH
// result := value ;
46263: LD_ADDR_VAR 0 2
46267: PUSH
46268: LD_VAR 0 1
46272: ST_TO_ADDR
// if value < 0 then
46273: LD_VAR 0 1
46277: PUSH
46278: LD_INT 0
46280: LESS
46281: IFFALSE 46298
// result := value * - 1 ;
46283: LD_ADDR_VAR 0 2
46287: PUSH
46288: LD_VAR 0 1
46292: PUSH
46293: LD_INT 1
46295: NEG
46296: MUL
46297: ST_TO_ADDR
// end ;
46298: LD_VAR 0 2
46302: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
46303: LD_INT 0
46305: PPUSH
46306: PPUSH
46307: PPUSH
46308: PPUSH
46309: PPUSH
46310: PPUSH
46311: PPUSH
46312: PPUSH
// if not unit or not building then
46313: LD_VAR 0 1
46317: NOT
46318: PUSH
46319: LD_VAR 0 2
46323: NOT
46324: OR
46325: IFFALSE 46329
// exit ;
46327: GO 46555
// x := GetX ( building ) ;
46329: LD_ADDR_VAR 0 4
46333: PUSH
46334: LD_VAR 0 2
46338: PPUSH
46339: CALL_OW 250
46343: ST_TO_ADDR
// y := GetY ( building ) ;
46344: LD_ADDR_VAR 0 6
46348: PUSH
46349: LD_VAR 0 2
46353: PPUSH
46354: CALL_OW 251
46358: ST_TO_ADDR
// d := GetDir ( building ) ;
46359: LD_ADDR_VAR 0 8
46363: PUSH
46364: LD_VAR 0 2
46368: PPUSH
46369: CALL_OW 254
46373: ST_TO_ADDR
// r := 4 ;
46374: LD_ADDR_VAR 0 9
46378: PUSH
46379: LD_INT 4
46381: ST_TO_ADDR
// for i := 1 to 5 do
46382: LD_ADDR_VAR 0 10
46386: PUSH
46387: DOUBLE
46388: LD_INT 1
46390: DEC
46391: ST_TO_ADDR
46392: LD_INT 5
46394: PUSH
46395: FOR_TO
46396: IFFALSE 46553
// begin _x := ShiftX ( x , d , r + i ) ;
46398: LD_ADDR_VAR 0 5
46402: PUSH
46403: LD_VAR 0 4
46407: PPUSH
46408: LD_VAR 0 8
46412: PPUSH
46413: LD_VAR 0 9
46417: PUSH
46418: LD_VAR 0 10
46422: PLUS
46423: PPUSH
46424: CALL_OW 272
46428: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
46429: LD_ADDR_VAR 0 7
46433: PUSH
46434: LD_VAR 0 6
46438: PPUSH
46439: LD_VAR 0 8
46443: PPUSH
46444: LD_VAR 0 9
46448: PUSH
46449: LD_VAR 0 10
46453: PLUS
46454: PPUSH
46455: CALL_OW 273
46459: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
46460: LD_VAR 0 5
46464: PPUSH
46465: LD_VAR 0 7
46469: PPUSH
46470: CALL_OW 488
46474: PUSH
46475: LD_VAR 0 5
46479: PPUSH
46480: LD_VAR 0 7
46484: PPUSH
46485: CALL_OW 428
46489: PPUSH
46490: CALL_OW 247
46494: PUSH
46495: LD_INT 3
46497: PUSH
46498: LD_INT 2
46500: PUSH
46501: EMPTY
46502: LIST
46503: LIST
46504: IN
46505: NOT
46506: AND
46507: IFFALSE 46551
// begin ComMoveXY ( unit , _x , _y ) ;
46509: LD_VAR 0 1
46513: PPUSH
46514: LD_VAR 0 5
46518: PPUSH
46519: LD_VAR 0 7
46523: PPUSH
46524: CALL_OW 111
// result := [ _x , _y ] ;
46528: LD_ADDR_VAR 0 3
46532: PUSH
46533: LD_VAR 0 5
46537: PUSH
46538: LD_VAR 0 7
46542: PUSH
46543: EMPTY
46544: LIST
46545: LIST
46546: ST_TO_ADDR
// exit ;
46547: POP
46548: POP
46549: GO 46555
// end ; end ;
46551: GO 46395
46553: POP
46554: POP
// end ;
46555: LD_VAR 0 3
46559: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
46560: LD_INT 0
46562: PPUSH
46563: PPUSH
46564: PPUSH
// result := 0 ;
46565: LD_ADDR_VAR 0 3
46569: PUSH
46570: LD_INT 0
46572: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
46573: LD_VAR 0 1
46577: PUSH
46578: LD_INT 0
46580: LESS
46581: PUSH
46582: LD_VAR 0 1
46586: PUSH
46587: LD_INT 8
46589: GREATER
46590: OR
46591: PUSH
46592: LD_VAR 0 2
46596: PUSH
46597: LD_INT 0
46599: LESS
46600: OR
46601: PUSH
46602: LD_VAR 0 2
46606: PUSH
46607: LD_INT 8
46609: GREATER
46610: OR
46611: IFFALSE 46615
// exit ;
46613: GO 46690
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
46615: LD_ADDR_VAR 0 4
46619: PUSH
46620: LD_INT 22
46622: PUSH
46623: LD_VAR 0 2
46627: PUSH
46628: EMPTY
46629: LIST
46630: LIST
46631: PPUSH
46632: CALL_OW 69
46636: PUSH
46637: FOR_IN
46638: IFFALSE 46688
// begin un := UnitShoot ( i ) ;
46640: LD_ADDR_VAR 0 5
46644: PUSH
46645: LD_VAR 0 4
46649: PPUSH
46650: CALL_OW 504
46654: ST_TO_ADDR
// if GetSide ( un ) = side1 then
46655: LD_VAR 0 5
46659: PPUSH
46660: CALL_OW 255
46664: PUSH
46665: LD_VAR 0 1
46669: EQUAL
46670: IFFALSE 46686
// begin result := un ;
46672: LD_ADDR_VAR 0 3
46676: PUSH
46677: LD_VAR 0 5
46681: ST_TO_ADDR
// exit ;
46682: POP
46683: POP
46684: GO 46690
// end ; end ;
46686: GO 46637
46688: POP
46689: POP
// end ;
46690: LD_VAR 0 3
46694: RET
// export function GetCargoBay ( units ) ; begin
46695: LD_INT 0
46697: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
46698: LD_ADDR_VAR 0 2
46702: PUSH
46703: LD_VAR 0 1
46707: PPUSH
46708: LD_INT 2
46710: PUSH
46711: LD_INT 34
46713: PUSH
46714: LD_INT 12
46716: PUSH
46717: EMPTY
46718: LIST
46719: LIST
46720: PUSH
46721: LD_INT 34
46723: PUSH
46724: LD_INT 51
46726: PUSH
46727: EMPTY
46728: LIST
46729: LIST
46730: PUSH
46731: LD_INT 34
46733: PUSH
46734: LD_INT 32
46736: PUSH
46737: EMPTY
46738: LIST
46739: LIST
46740: PUSH
46741: LD_INT 34
46743: PUSH
46744: LD_INT 89
46746: PUSH
46747: EMPTY
46748: LIST
46749: LIST
46750: PUSH
46751: EMPTY
46752: LIST
46753: LIST
46754: LIST
46755: LIST
46756: LIST
46757: PPUSH
46758: CALL_OW 72
46762: ST_TO_ADDR
// end ;
46763: LD_VAR 0 2
46767: RET
// export function Negate ( value ) ; begin
46768: LD_INT 0
46770: PPUSH
// result := not value ;
46771: LD_ADDR_VAR 0 2
46775: PUSH
46776: LD_VAR 0 1
46780: NOT
46781: ST_TO_ADDR
// end ;
46782: LD_VAR 0 2
46786: RET
// export function Inc ( value ) ; begin
46787: LD_INT 0
46789: PPUSH
// result := value + 1 ;
46790: LD_ADDR_VAR 0 2
46794: PUSH
46795: LD_VAR 0 1
46799: PUSH
46800: LD_INT 1
46802: PLUS
46803: ST_TO_ADDR
// end ;
46804: LD_VAR 0 2
46808: RET
// export function Dec ( value ) ; begin
46809: LD_INT 0
46811: PPUSH
// result := value - 1 ;
46812: LD_ADDR_VAR 0 2
46816: PUSH
46817: LD_VAR 0 1
46821: PUSH
46822: LD_INT 1
46824: MINUS
46825: ST_TO_ADDR
// end ;
46826: LD_VAR 0 2
46830: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
46831: LD_INT 0
46833: PPUSH
46834: PPUSH
46835: PPUSH
46836: PPUSH
46837: PPUSH
46838: PPUSH
46839: PPUSH
46840: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
46841: LD_VAR 0 1
46845: PPUSH
46846: LD_VAR 0 2
46850: PPUSH
46851: CALL_OW 488
46855: NOT
46856: PUSH
46857: LD_VAR 0 3
46861: PPUSH
46862: LD_VAR 0 4
46866: PPUSH
46867: CALL_OW 488
46871: NOT
46872: OR
46873: IFFALSE 46886
// begin result := - 1 ;
46875: LD_ADDR_VAR 0 5
46879: PUSH
46880: LD_INT 1
46882: NEG
46883: ST_TO_ADDR
// exit ;
46884: GO 47121
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
46886: LD_ADDR_VAR 0 12
46890: PUSH
46891: LD_VAR 0 1
46895: PPUSH
46896: LD_VAR 0 2
46900: PPUSH
46901: LD_VAR 0 3
46905: PPUSH
46906: LD_VAR 0 4
46910: PPUSH
46911: CALL 45971 0 4
46915: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
46916: LD_ADDR_VAR 0 11
46920: PUSH
46921: LD_VAR 0 1
46925: PPUSH
46926: LD_VAR 0 2
46930: PPUSH
46931: LD_VAR 0 12
46935: PUSH
46936: LD_INT 1
46938: ARRAY
46939: PPUSH
46940: LD_VAR 0 12
46944: PUSH
46945: LD_INT 2
46947: ARRAY
46948: PPUSH
46949: CALL_OW 298
46953: ST_TO_ADDR
// distance := 9999 ;
46954: LD_ADDR_VAR 0 10
46958: PUSH
46959: LD_INT 9999
46961: ST_TO_ADDR
// for i := 0 to 5 do
46962: LD_ADDR_VAR 0 6
46966: PUSH
46967: DOUBLE
46968: LD_INT 0
46970: DEC
46971: ST_TO_ADDR
46972: LD_INT 5
46974: PUSH
46975: FOR_TO
46976: IFFALSE 47119
// begin _x := ShiftX ( x1 , i , centerDist ) ;
46978: LD_ADDR_VAR 0 7
46982: PUSH
46983: LD_VAR 0 1
46987: PPUSH
46988: LD_VAR 0 6
46992: PPUSH
46993: LD_VAR 0 11
46997: PPUSH
46998: CALL_OW 272
47002: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
47003: LD_ADDR_VAR 0 8
47007: PUSH
47008: LD_VAR 0 2
47012: PPUSH
47013: LD_VAR 0 6
47017: PPUSH
47018: LD_VAR 0 11
47022: PPUSH
47023: CALL_OW 273
47027: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
47028: LD_VAR 0 7
47032: PPUSH
47033: LD_VAR 0 8
47037: PPUSH
47038: CALL_OW 488
47042: NOT
47043: IFFALSE 47047
// continue ;
47045: GO 46975
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
47047: LD_ADDR_VAR 0 9
47051: PUSH
47052: LD_VAR 0 12
47056: PUSH
47057: LD_INT 1
47059: ARRAY
47060: PPUSH
47061: LD_VAR 0 12
47065: PUSH
47066: LD_INT 2
47068: ARRAY
47069: PPUSH
47070: LD_VAR 0 7
47074: PPUSH
47075: LD_VAR 0 8
47079: PPUSH
47080: CALL_OW 298
47084: ST_TO_ADDR
// if tmp < distance then
47085: LD_VAR 0 9
47089: PUSH
47090: LD_VAR 0 10
47094: LESS
47095: IFFALSE 47117
// begin result := i ;
47097: LD_ADDR_VAR 0 5
47101: PUSH
47102: LD_VAR 0 6
47106: ST_TO_ADDR
// distance := tmp ;
47107: LD_ADDR_VAR 0 10
47111: PUSH
47112: LD_VAR 0 9
47116: ST_TO_ADDR
// end ; end ;
47117: GO 46975
47119: POP
47120: POP
// end ;
47121: LD_VAR 0 5
47125: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
47126: LD_INT 0
47128: PPUSH
47129: PPUSH
// if not driver or not IsInUnit ( driver ) then
47130: LD_VAR 0 1
47134: NOT
47135: PUSH
47136: LD_VAR 0 1
47140: PPUSH
47141: CALL_OW 310
47145: NOT
47146: OR
47147: IFFALSE 47151
// exit ;
47149: GO 47241
// vehicle := IsInUnit ( driver ) ;
47151: LD_ADDR_VAR 0 3
47155: PUSH
47156: LD_VAR 0 1
47160: PPUSH
47161: CALL_OW 310
47165: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
47166: LD_VAR 0 1
47170: PPUSH
47171: LD_STRING \
47173: PUSH
47174: LD_INT 0
47176: PUSH
47177: LD_INT 0
47179: PUSH
47180: LD_INT 0
47182: PUSH
47183: LD_INT 0
47185: PUSH
47186: LD_INT 0
47188: PUSH
47189: LD_INT 0
47191: PUSH
47192: EMPTY
47193: LIST
47194: LIST
47195: LIST
47196: LIST
47197: LIST
47198: LIST
47199: LIST
47200: PUSH
47201: LD_STRING E
47203: PUSH
47204: LD_INT 0
47206: PUSH
47207: LD_INT 0
47209: PUSH
47210: LD_VAR 0 3
47214: PUSH
47215: LD_INT 0
47217: PUSH
47218: LD_INT 0
47220: PUSH
47221: LD_INT 0
47223: PUSH
47224: EMPTY
47225: LIST
47226: LIST
47227: LIST
47228: LIST
47229: LIST
47230: LIST
47231: LIST
47232: PUSH
47233: EMPTY
47234: LIST
47235: LIST
47236: PPUSH
47237: CALL_OW 446
// end ;
47241: LD_VAR 0 2
47245: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
47246: LD_INT 0
47248: PPUSH
47249: PPUSH
// if not driver or not IsInUnit ( driver ) then
47250: LD_VAR 0 1
47254: NOT
47255: PUSH
47256: LD_VAR 0 1
47260: PPUSH
47261: CALL_OW 310
47265: NOT
47266: OR
47267: IFFALSE 47271
// exit ;
47269: GO 47361
// vehicle := IsInUnit ( driver ) ;
47271: LD_ADDR_VAR 0 3
47275: PUSH
47276: LD_VAR 0 1
47280: PPUSH
47281: CALL_OW 310
47285: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
47286: LD_VAR 0 1
47290: PPUSH
47291: LD_STRING \
47293: PUSH
47294: LD_INT 0
47296: PUSH
47297: LD_INT 0
47299: PUSH
47300: LD_INT 0
47302: PUSH
47303: LD_INT 0
47305: PUSH
47306: LD_INT 0
47308: PUSH
47309: LD_INT 0
47311: PUSH
47312: EMPTY
47313: LIST
47314: LIST
47315: LIST
47316: LIST
47317: LIST
47318: LIST
47319: LIST
47320: PUSH
47321: LD_STRING E
47323: PUSH
47324: LD_INT 0
47326: PUSH
47327: LD_INT 0
47329: PUSH
47330: LD_VAR 0 3
47334: PUSH
47335: LD_INT 0
47337: PUSH
47338: LD_INT 0
47340: PUSH
47341: LD_INT 0
47343: PUSH
47344: EMPTY
47345: LIST
47346: LIST
47347: LIST
47348: LIST
47349: LIST
47350: LIST
47351: LIST
47352: PUSH
47353: EMPTY
47354: LIST
47355: LIST
47356: PPUSH
47357: CALL_OW 447
// end ;
47361: LD_VAR 0 2
47365: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
47366: LD_INT 0
47368: PPUSH
47369: PPUSH
47370: PPUSH
// tmp := [ ] ;
47371: LD_ADDR_VAR 0 5
47375: PUSH
47376: EMPTY
47377: ST_TO_ADDR
// for i in units do
47378: LD_ADDR_VAR 0 4
47382: PUSH
47383: LD_VAR 0 1
47387: PUSH
47388: FOR_IN
47389: IFFALSE 47427
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
47391: LD_ADDR_VAR 0 5
47395: PUSH
47396: LD_VAR 0 5
47400: PPUSH
47401: LD_VAR 0 5
47405: PUSH
47406: LD_INT 1
47408: PLUS
47409: PPUSH
47410: LD_VAR 0 4
47414: PPUSH
47415: CALL_OW 256
47419: PPUSH
47420: CALL_OW 2
47424: ST_TO_ADDR
47425: GO 47388
47427: POP
47428: POP
// if not tmp then
47429: LD_VAR 0 5
47433: NOT
47434: IFFALSE 47438
// exit ;
47436: GO 47486
// if asc then
47438: LD_VAR 0 2
47442: IFFALSE 47466
// result := SortListByListAsc ( units , tmp ) else
47444: LD_ADDR_VAR 0 3
47448: PUSH
47449: LD_VAR 0 1
47453: PPUSH
47454: LD_VAR 0 5
47458: PPUSH
47459: CALL_OW 76
47463: ST_TO_ADDR
47464: GO 47486
// result := SortListByListDesc ( units , tmp ) ;
47466: LD_ADDR_VAR 0 3
47470: PUSH
47471: LD_VAR 0 1
47475: PPUSH
47476: LD_VAR 0 5
47480: PPUSH
47481: CALL_OW 77
47485: ST_TO_ADDR
// end ;
47486: LD_VAR 0 3
47490: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
47491: LD_INT 0
47493: PPUSH
47494: PPUSH
// task := GetTaskList ( mech ) ;
47495: LD_ADDR_VAR 0 4
47499: PUSH
47500: LD_VAR 0 1
47504: PPUSH
47505: CALL_OW 437
47509: ST_TO_ADDR
// if not task then
47510: LD_VAR 0 4
47514: NOT
47515: IFFALSE 47519
// exit ;
47517: GO 47561
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
47519: LD_ADDR_VAR 0 3
47523: PUSH
47524: LD_VAR 0 4
47528: PUSH
47529: LD_INT 1
47531: ARRAY
47532: PUSH
47533: LD_INT 1
47535: ARRAY
47536: PUSH
47537: LD_STRING r
47539: EQUAL
47540: PUSH
47541: LD_VAR 0 4
47545: PUSH
47546: LD_INT 1
47548: ARRAY
47549: PUSH
47550: LD_INT 4
47552: ARRAY
47553: PUSH
47554: LD_VAR 0 2
47558: EQUAL
47559: AND
47560: ST_TO_ADDR
// end ;
47561: LD_VAR 0 3
47565: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
47566: LD_INT 0
47568: PPUSH
// SetDir ( unit , d ) ;
47569: LD_VAR 0 1
47573: PPUSH
47574: LD_VAR 0 4
47578: PPUSH
47579: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
47583: LD_VAR 0 1
47587: PPUSH
47588: LD_VAR 0 2
47592: PPUSH
47593: LD_VAR 0 3
47597: PPUSH
47598: LD_VAR 0 5
47602: PPUSH
47603: CALL_OW 48
// end ;
47607: LD_VAR 0 6
47611: RET
// export function ToNaturalNumber ( number ) ; begin
47612: LD_INT 0
47614: PPUSH
// result := number div 1 ;
47615: LD_ADDR_VAR 0 2
47619: PUSH
47620: LD_VAR 0 1
47624: PUSH
47625: LD_INT 1
47627: DIV
47628: ST_TO_ADDR
// if number < 0 then
47629: LD_VAR 0 1
47633: PUSH
47634: LD_INT 0
47636: LESS
47637: IFFALSE 47647
// result := 0 ;
47639: LD_ADDR_VAR 0 2
47643: PUSH
47644: LD_INT 0
47646: ST_TO_ADDR
// end ;
47647: LD_VAR 0 2
47651: RET
// export function SortByClass ( units , class ) ; var un ; begin
47652: LD_INT 0
47654: PPUSH
47655: PPUSH
// if not units or not class then
47656: LD_VAR 0 1
47660: NOT
47661: PUSH
47662: LD_VAR 0 2
47666: NOT
47667: OR
47668: IFFALSE 47672
// exit ;
47670: GO 47767
// result := [ ] ;
47672: LD_ADDR_VAR 0 3
47676: PUSH
47677: EMPTY
47678: ST_TO_ADDR
// for un in units do
47679: LD_ADDR_VAR 0 4
47683: PUSH
47684: LD_VAR 0 1
47688: PUSH
47689: FOR_IN
47690: IFFALSE 47765
// if GetClass ( un ) = class then
47692: LD_VAR 0 4
47696: PPUSH
47697: CALL_OW 257
47701: PUSH
47702: LD_VAR 0 2
47706: EQUAL
47707: IFFALSE 47734
// result := Insert ( result , 1 , un ) else
47709: LD_ADDR_VAR 0 3
47713: PUSH
47714: LD_VAR 0 3
47718: PPUSH
47719: LD_INT 1
47721: PPUSH
47722: LD_VAR 0 4
47726: PPUSH
47727: CALL_OW 2
47731: ST_TO_ADDR
47732: GO 47763
// result := Replace ( result , result + 1 , un ) ;
47734: LD_ADDR_VAR 0 3
47738: PUSH
47739: LD_VAR 0 3
47743: PPUSH
47744: LD_VAR 0 3
47748: PUSH
47749: LD_INT 1
47751: PLUS
47752: PPUSH
47753: LD_VAR 0 4
47757: PPUSH
47758: CALL_OW 1
47762: ST_TO_ADDR
47763: GO 47689
47765: POP
47766: POP
// end ;
47767: LD_VAR 0 3
47771: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
47772: LD_INT 0
47774: PPUSH
47775: PPUSH
47776: PPUSH
47777: PPUSH
47778: PPUSH
47779: PPUSH
47780: PPUSH
// result := [ ] ;
47781: LD_ADDR_VAR 0 4
47785: PUSH
47786: EMPTY
47787: ST_TO_ADDR
// if x - r < 0 then
47788: LD_VAR 0 1
47792: PUSH
47793: LD_VAR 0 3
47797: MINUS
47798: PUSH
47799: LD_INT 0
47801: LESS
47802: IFFALSE 47814
// min_x := 0 else
47804: LD_ADDR_VAR 0 8
47808: PUSH
47809: LD_INT 0
47811: ST_TO_ADDR
47812: GO 47830
// min_x := x - r ;
47814: LD_ADDR_VAR 0 8
47818: PUSH
47819: LD_VAR 0 1
47823: PUSH
47824: LD_VAR 0 3
47828: MINUS
47829: ST_TO_ADDR
// if y - r < 0 then
47830: LD_VAR 0 2
47834: PUSH
47835: LD_VAR 0 3
47839: MINUS
47840: PUSH
47841: LD_INT 0
47843: LESS
47844: IFFALSE 47856
// min_y := 0 else
47846: LD_ADDR_VAR 0 7
47850: PUSH
47851: LD_INT 0
47853: ST_TO_ADDR
47854: GO 47872
// min_y := y - r ;
47856: LD_ADDR_VAR 0 7
47860: PUSH
47861: LD_VAR 0 2
47865: PUSH
47866: LD_VAR 0 3
47870: MINUS
47871: ST_TO_ADDR
// max_x := x + r ;
47872: LD_ADDR_VAR 0 9
47876: PUSH
47877: LD_VAR 0 1
47881: PUSH
47882: LD_VAR 0 3
47886: PLUS
47887: ST_TO_ADDR
// max_y := y + r ;
47888: LD_ADDR_VAR 0 10
47892: PUSH
47893: LD_VAR 0 2
47897: PUSH
47898: LD_VAR 0 3
47902: PLUS
47903: ST_TO_ADDR
// for _x = min_x to max_x do
47904: LD_ADDR_VAR 0 5
47908: PUSH
47909: DOUBLE
47910: LD_VAR 0 8
47914: DEC
47915: ST_TO_ADDR
47916: LD_VAR 0 9
47920: PUSH
47921: FOR_TO
47922: IFFALSE 48023
// for _y = min_y to max_y do
47924: LD_ADDR_VAR 0 6
47928: PUSH
47929: DOUBLE
47930: LD_VAR 0 7
47934: DEC
47935: ST_TO_ADDR
47936: LD_VAR 0 10
47940: PUSH
47941: FOR_TO
47942: IFFALSE 48019
// begin if not ValidHex ( _x , _y ) then
47944: LD_VAR 0 5
47948: PPUSH
47949: LD_VAR 0 6
47953: PPUSH
47954: CALL_OW 488
47958: NOT
47959: IFFALSE 47963
// continue ;
47961: GO 47941
// if GetResourceTypeXY ( _x , _y ) then
47963: LD_VAR 0 5
47967: PPUSH
47968: LD_VAR 0 6
47972: PPUSH
47973: CALL_OW 283
47977: IFFALSE 48017
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
47979: LD_ADDR_VAR 0 4
47983: PUSH
47984: LD_VAR 0 4
47988: PPUSH
47989: LD_VAR 0 4
47993: PUSH
47994: LD_INT 1
47996: PLUS
47997: PPUSH
47998: LD_VAR 0 5
48002: PUSH
48003: LD_VAR 0 6
48007: PUSH
48008: EMPTY
48009: LIST
48010: LIST
48011: PPUSH
48012: CALL_OW 1
48016: ST_TO_ADDR
// end ;
48017: GO 47941
48019: POP
48020: POP
48021: GO 47921
48023: POP
48024: POP
// end ;
48025: LD_VAR 0 4
48029: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
48030: LD_INT 0
48032: PPUSH
48033: PPUSH
48034: PPUSH
48035: PPUSH
48036: PPUSH
48037: PPUSH
48038: PPUSH
48039: PPUSH
// if not units then
48040: LD_VAR 0 1
48044: NOT
48045: IFFALSE 48049
// exit ;
48047: GO 48573
// result := UnitFilter ( units , [ f_ok ] ) ;
48049: LD_ADDR_VAR 0 3
48053: PUSH
48054: LD_VAR 0 1
48058: PPUSH
48059: LD_INT 50
48061: PUSH
48062: EMPTY
48063: LIST
48064: PPUSH
48065: CALL_OW 72
48069: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
48070: LD_ADDR_VAR 0 8
48074: PUSH
48075: LD_VAR 0 1
48079: PUSH
48080: LD_INT 1
48082: ARRAY
48083: PPUSH
48084: CALL_OW 255
48088: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
48089: LD_ADDR_VAR 0 10
48093: PUSH
48094: LD_INT 29
48096: PUSH
48097: LD_INT 91
48099: PUSH
48100: LD_INT 49
48102: PUSH
48103: EMPTY
48104: LIST
48105: LIST
48106: LIST
48107: ST_TO_ADDR
// if not result then
48108: LD_VAR 0 3
48112: NOT
48113: IFFALSE 48117
// exit ;
48115: GO 48573
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
48117: LD_ADDR_VAR 0 5
48121: PUSH
48122: LD_INT 81
48124: PUSH
48125: LD_VAR 0 8
48129: PUSH
48130: EMPTY
48131: LIST
48132: LIST
48133: PPUSH
48134: CALL_OW 69
48138: ST_TO_ADDR
// for i in result do
48139: LD_ADDR_VAR 0 4
48143: PUSH
48144: LD_VAR 0 3
48148: PUSH
48149: FOR_IN
48150: IFFALSE 48571
// begin tag := GetTag ( i ) + 1 ;
48152: LD_ADDR_VAR 0 9
48156: PUSH
48157: LD_VAR 0 4
48161: PPUSH
48162: CALL_OW 110
48166: PUSH
48167: LD_INT 1
48169: PLUS
48170: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
48171: LD_ADDR_VAR 0 7
48175: PUSH
48176: LD_VAR 0 4
48180: PPUSH
48181: CALL_OW 250
48185: PPUSH
48186: LD_VAR 0 4
48190: PPUSH
48191: CALL_OW 251
48195: PPUSH
48196: LD_INT 6
48198: PPUSH
48199: CALL 47772 0 3
48203: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
48204: LD_VAR 0 4
48208: PPUSH
48209: CALL_OW 247
48213: PUSH
48214: LD_INT 2
48216: EQUAL
48217: PUSH
48218: LD_VAR 0 7
48222: AND
48223: PUSH
48224: LD_VAR 0 4
48228: PPUSH
48229: CALL_OW 264
48233: PUSH
48234: LD_VAR 0 10
48238: IN
48239: NOT
48240: AND
48241: IFFALSE 48280
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
48243: LD_VAR 0 4
48247: PPUSH
48248: LD_VAR 0 7
48252: PUSH
48253: LD_INT 1
48255: ARRAY
48256: PUSH
48257: LD_INT 1
48259: ARRAY
48260: PPUSH
48261: LD_VAR 0 7
48265: PUSH
48266: LD_INT 1
48268: ARRAY
48269: PUSH
48270: LD_INT 2
48272: ARRAY
48273: PPUSH
48274: CALL_OW 116
48278: GO 48569
// if path > tag then
48280: LD_VAR 0 2
48284: PUSH
48285: LD_VAR 0 9
48289: GREATER
48290: IFFALSE 48498
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
48292: LD_ADDR_VAR 0 6
48296: PUSH
48297: LD_VAR 0 5
48301: PPUSH
48302: LD_INT 91
48304: PUSH
48305: LD_VAR 0 4
48309: PUSH
48310: LD_INT 8
48312: PUSH
48313: EMPTY
48314: LIST
48315: LIST
48316: LIST
48317: PPUSH
48318: CALL_OW 72
48322: ST_TO_ADDR
// if nearEnemy then
48323: LD_VAR 0 6
48327: IFFALSE 48396
// begin if GetWeapon ( i ) = ru_time_lapser then
48329: LD_VAR 0 4
48333: PPUSH
48334: CALL_OW 264
48338: PUSH
48339: LD_INT 49
48341: EQUAL
48342: IFFALSE 48370
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
48344: LD_VAR 0 4
48348: PPUSH
48349: LD_VAR 0 6
48353: PPUSH
48354: LD_VAR 0 4
48358: PPUSH
48359: CALL_OW 74
48363: PPUSH
48364: CALL_OW 112
48368: GO 48394
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
48370: LD_VAR 0 4
48374: PPUSH
48375: LD_VAR 0 6
48379: PPUSH
48380: LD_VAR 0 4
48384: PPUSH
48385: CALL_OW 74
48389: PPUSH
48390: CALL_OW 115
// end else
48394: GO 48496
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
48396: LD_VAR 0 4
48400: PPUSH
48401: LD_VAR 0 2
48405: PUSH
48406: LD_VAR 0 9
48410: ARRAY
48411: PUSH
48412: LD_INT 1
48414: ARRAY
48415: PPUSH
48416: LD_VAR 0 2
48420: PUSH
48421: LD_VAR 0 9
48425: ARRAY
48426: PUSH
48427: LD_INT 2
48429: ARRAY
48430: PPUSH
48431: CALL_OW 297
48435: PUSH
48436: LD_INT 6
48438: GREATER
48439: IFFALSE 48482
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
48441: LD_VAR 0 4
48445: PPUSH
48446: LD_VAR 0 2
48450: PUSH
48451: LD_VAR 0 9
48455: ARRAY
48456: PUSH
48457: LD_INT 1
48459: ARRAY
48460: PPUSH
48461: LD_VAR 0 2
48465: PUSH
48466: LD_VAR 0 9
48470: ARRAY
48471: PUSH
48472: LD_INT 2
48474: ARRAY
48475: PPUSH
48476: CALL_OW 114
48480: GO 48496
// SetTag ( i , tag ) ;
48482: LD_VAR 0 4
48486: PPUSH
48487: LD_VAR 0 9
48491: PPUSH
48492: CALL_OW 109
// end else
48496: GO 48569
// if enemy then
48498: LD_VAR 0 5
48502: IFFALSE 48569
// begin if GetWeapon ( i ) = ru_time_lapser then
48504: LD_VAR 0 4
48508: PPUSH
48509: CALL_OW 264
48513: PUSH
48514: LD_INT 49
48516: EQUAL
48517: IFFALSE 48545
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
48519: LD_VAR 0 4
48523: PPUSH
48524: LD_VAR 0 5
48528: PPUSH
48529: LD_VAR 0 4
48533: PPUSH
48534: CALL_OW 74
48538: PPUSH
48539: CALL_OW 112
48543: GO 48569
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
48545: LD_VAR 0 4
48549: PPUSH
48550: LD_VAR 0 5
48554: PPUSH
48555: LD_VAR 0 4
48559: PPUSH
48560: CALL_OW 74
48564: PPUSH
48565: CALL_OW 115
// end ; end ;
48569: GO 48149
48571: POP
48572: POP
// end ;
48573: LD_VAR 0 3
48577: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
48578: LD_INT 0
48580: PPUSH
48581: PPUSH
48582: PPUSH
// if not unit or IsInUnit ( unit ) then
48583: LD_VAR 0 1
48587: NOT
48588: PUSH
48589: LD_VAR 0 1
48593: PPUSH
48594: CALL_OW 310
48598: OR
48599: IFFALSE 48603
// exit ;
48601: GO 48694
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
48603: LD_ADDR_VAR 0 4
48607: PUSH
48608: LD_VAR 0 1
48612: PPUSH
48613: CALL_OW 250
48617: PPUSH
48618: LD_VAR 0 2
48622: PPUSH
48623: LD_INT 1
48625: PPUSH
48626: CALL_OW 272
48630: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
48631: LD_ADDR_VAR 0 5
48635: PUSH
48636: LD_VAR 0 1
48640: PPUSH
48641: CALL_OW 251
48645: PPUSH
48646: LD_VAR 0 2
48650: PPUSH
48651: LD_INT 1
48653: PPUSH
48654: CALL_OW 273
48658: ST_TO_ADDR
// if ValidHex ( x , y ) then
48659: LD_VAR 0 4
48663: PPUSH
48664: LD_VAR 0 5
48668: PPUSH
48669: CALL_OW 488
48673: IFFALSE 48694
// ComTurnXY ( unit , x , y ) ;
48675: LD_VAR 0 1
48679: PPUSH
48680: LD_VAR 0 4
48684: PPUSH
48685: LD_VAR 0 5
48689: PPUSH
48690: CALL_OW 118
// end ;
48694: LD_VAR 0 3
48698: RET
// export function SeeUnits ( side , units ) ; var i ; begin
48699: LD_INT 0
48701: PPUSH
48702: PPUSH
// result := false ;
48703: LD_ADDR_VAR 0 3
48707: PUSH
48708: LD_INT 0
48710: ST_TO_ADDR
// if not units then
48711: LD_VAR 0 2
48715: NOT
48716: IFFALSE 48720
// exit ;
48718: GO 48765
// for i in units do
48720: LD_ADDR_VAR 0 4
48724: PUSH
48725: LD_VAR 0 2
48729: PUSH
48730: FOR_IN
48731: IFFALSE 48763
// if See ( side , i ) then
48733: LD_VAR 0 1
48737: PPUSH
48738: LD_VAR 0 4
48742: PPUSH
48743: CALL_OW 292
48747: IFFALSE 48761
// begin result := true ;
48749: LD_ADDR_VAR 0 3
48753: PUSH
48754: LD_INT 1
48756: ST_TO_ADDR
// exit ;
48757: POP
48758: POP
48759: GO 48765
// end ;
48761: GO 48730
48763: POP
48764: POP
// end ;
48765: LD_VAR 0 3
48769: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
48770: LD_INT 0
48772: PPUSH
48773: PPUSH
48774: PPUSH
48775: PPUSH
// if not unit or not points then
48776: LD_VAR 0 1
48780: NOT
48781: PUSH
48782: LD_VAR 0 2
48786: NOT
48787: OR
48788: IFFALSE 48792
// exit ;
48790: GO 48882
// dist := 99999 ;
48792: LD_ADDR_VAR 0 5
48796: PUSH
48797: LD_INT 99999
48799: ST_TO_ADDR
// for i in points do
48800: LD_ADDR_VAR 0 4
48804: PUSH
48805: LD_VAR 0 2
48809: PUSH
48810: FOR_IN
48811: IFFALSE 48880
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
48813: LD_ADDR_VAR 0 6
48817: PUSH
48818: LD_VAR 0 1
48822: PPUSH
48823: LD_VAR 0 4
48827: PUSH
48828: LD_INT 1
48830: ARRAY
48831: PPUSH
48832: LD_VAR 0 4
48836: PUSH
48837: LD_INT 2
48839: ARRAY
48840: PPUSH
48841: CALL_OW 297
48845: ST_TO_ADDR
// if tmpDist < dist then
48846: LD_VAR 0 6
48850: PUSH
48851: LD_VAR 0 5
48855: LESS
48856: IFFALSE 48878
// begin result := i ;
48858: LD_ADDR_VAR 0 3
48862: PUSH
48863: LD_VAR 0 4
48867: ST_TO_ADDR
// dist := tmpDist ;
48868: LD_ADDR_VAR 0 5
48872: PUSH
48873: LD_VAR 0 6
48877: ST_TO_ADDR
// end ; end ;
48878: GO 48810
48880: POP
48881: POP
// end ;
48882: LD_VAR 0 3
48886: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
48887: LD_INT 0
48889: PPUSH
// uc_side := side ;
48890: LD_ADDR_OWVAR 20
48894: PUSH
48895: LD_VAR 0 1
48899: ST_TO_ADDR
// uc_nation := 3 ;
48900: LD_ADDR_OWVAR 21
48904: PUSH
48905: LD_INT 3
48907: ST_TO_ADDR
// vc_chassis := 25 ;
48908: LD_ADDR_OWVAR 37
48912: PUSH
48913: LD_INT 25
48915: ST_TO_ADDR
// vc_engine := engine_siberite ;
48916: LD_ADDR_OWVAR 39
48920: PUSH
48921: LD_INT 3
48923: ST_TO_ADDR
// vc_control := control_computer ;
48924: LD_ADDR_OWVAR 38
48928: PUSH
48929: LD_INT 3
48931: ST_TO_ADDR
// vc_weapon := 59 ;
48932: LD_ADDR_OWVAR 40
48936: PUSH
48937: LD_INT 59
48939: ST_TO_ADDR
// result := CreateVehicle ;
48940: LD_ADDR_VAR 0 5
48944: PUSH
48945: CALL_OW 45
48949: ST_TO_ADDR
// SetDir ( result , d ) ;
48950: LD_VAR 0 5
48954: PPUSH
48955: LD_VAR 0 4
48959: PPUSH
48960: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
48964: LD_VAR 0 5
48968: PPUSH
48969: LD_VAR 0 2
48973: PPUSH
48974: LD_VAR 0 3
48978: PPUSH
48979: LD_INT 0
48981: PPUSH
48982: CALL_OW 48
// end ;
48986: LD_VAR 0 5
48990: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
48991: LD_INT 0
48993: PPUSH
48994: PPUSH
48995: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
48996: LD_ADDR_VAR 0 2
49000: PUSH
49001: LD_INT 0
49003: PUSH
49004: LD_INT 0
49006: PUSH
49007: LD_INT 0
49009: PUSH
49010: LD_INT 0
49012: PUSH
49013: EMPTY
49014: LIST
49015: LIST
49016: LIST
49017: LIST
49018: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
49019: LD_VAR 0 1
49023: NOT
49024: PUSH
49025: LD_VAR 0 1
49029: PPUSH
49030: CALL_OW 264
49034: PUSH
49035: LD_INT 12
49037: PUSH
49038: LD_INT 51
49040: PUSH
49041: LD_INT 32
49043: PUSH
49044: LD_INT 89
49046: PUSH
49047: EMPTY
49048: LIST
49049: LIST
49050: LIST
49051: LIST
49052: IN
49053: NOT
49054: OR
49055: IFFALSE 49059
// exit ;
49057: GO 49157
// for i := 1 to 3 do
49059: LD_ADDR_VAR 0 3
49063: PUSH
49064: DOUBLE
49065: LD_INT 1
49067: DEC
49068: ST_TO_ADDR
49069: LD_INT 3
49071: PUSH
49072: FOR_TO
49073: IFFALSE 49155
// begin tmp := GetCargo ( cargo , i ) ;
49075: LD_ADDR_VAR 0 4
49079: PUSH
49080: LD_VAR 0 1
49084: PPUSH
49085: LD_VAR 0 3
49089: PPUSH
49090: CALL_OW 289
49094: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
49095: LD_ADDR_VAR 0 2
49099: PUSH
49100: LD_VAR 0 2
49104: PPUSH
49105: LD_VAR 0 3
49109: PPUSH
49110: LD_VAR 0 4
49114: PPUSH
49115: CALL_OW 1
49119: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
49120: LD_ADDR_VAR 0 2
49124: PUSH
49125: LD_VAR 0 2
49129: PPUSH
49130: LD_INT 4
49132: PPUSH
49133: LD_VAR 0 2
49137: PUSH
49138: LD_INT 4
49140: ARRAY
49141: PUSH
49142: LD_VAR 0 4
49146: PLUS
49147: PPUSH
49148: CALL_OW 1
49152: ST_TO_ADDR
// end ;
49153: GO 49072
49155: POP
49156: POP
// end ;
49157: LD_VAR 0 2
49161: RET
// export function Length ( array ) ; begin
49162: LD_INT 0
49164: PPUSH
// result := array + 0 ;
49165: LD_ADDR_VAR 0 2
49169: PUSH
49170: LD_VAR 0 1
49174: PUSH
49175: LD_INT 0
49177: PLUS
49178: ST_TO_ADDR
// end ;
49179: LD_VAR 0 2
49183: RET
// export function PrepareArray ( array ) ; begin
49184: LD_INT 0
49186: PPUSH
// result := array diff 0 ;
49187: LD_ADDR_VAR 0 2
49191: PUSH
49192: LD_VAR 0 1
49196: PUSH
49197: LD_INT 0
49199: DIFF
49200: ST_TO_ADDR
// if not result [ 1 ] then
49201: LD_VAR 0 2
49205: PUSH
49206: LD_INT 1
49208: ARRAY
49209: NOT
49210: IFFALSE 49230
// result := Delete ( result , 1 ) ;
49212: LD_ADDR_VAR 0 2
49216: PUSH
49217: LD_VAR 0 2
49221: PPUSH
49222: LD_INT 1
49224: PPUSH
49225: CALL_OW 3
49229: ST_TO_ADDR
// end ;
49230: LD_VAR 0 2
49234: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
49235: LD_INT 0
49237: PPUSH
49238: PPUSH
49239: PPUSH
49240: PPUSH
// sibRocketRange := 25 ;
49241: LD_ADDR_VAR 0 6
49245: PUSH
49246: LD_INT 25
49248: ST_TO_ADDR
// result := false ;
49249: LD_ADDR_VAR 0 4
49253: PUSH
49254: LD_INT 0
49256: ST_TO_ADDR
// for i := 0 to 5 do
49257: LD_ADDR_VAR 0 5
49261: PUSH
49262: DOUBLE
49263: LD_INT 0
49265: DEC
49266: ST_TO_ADDR
49267: LD_INT 5
49269: PUSH
49270: FOR_TO
49271: IFFALSE 49338
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
49273: LD_VAR 0 1
49277: PPUSH
49278: LD_VAR 0 5
49282: PPUSH
49283: LD_VAR 0 6
49287: PPUSH
49288: CALL_OW 272
49292: PPUSH
49293: LD_VAR 0 2
49297: PPUSH
49298: LD_VAR 0 5
49302: PPUSH
49303: LD_VAR 0 6
49307: PPUSH
49308: CALL_OW 273
49312: PPUSH
49313: LD_VAR 0 3
49317: PPUSH
49318: CALL_OW 309
49322: IFFALSE 49336
// begin result := true ;
49324: LD_ADDR_VAR 0 4
49328: PUSH
49329: LD_INT 1
49331: ST_TO_ADDR
// exit ;
49332: POP
49333: POP
49334: GO 49340
// end ;
49336: GO 49270
49338: POP
49339: POP
// end ;
49340: LD_VAR 0 4
49344: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
49345: LD_INT 0
49347: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
49348: LD_VAR 0 1
49352: PPUSH
49353: LD_VAR 0 2
49357: PPUSH
49358: LD_INT 0
49360: PPUSH
49361: LD_INT 0
49363: PPUSH
49364: LD_INT 1
49366: PPUSH
49367: LD_INT 0
49369: PPUSH
49370: CALL_OW 587
// end ; end_of_file
49374: LD_VAR 0 3
49378: RET
