// starting begin ResetFog ;
   0: CALL_OW 335
// end ;
   4: END
// every 0 0$1 do
   5: GO 7
   7: DISABLE
// begin MC_RaiseSailEvent ( 1 , 200 ) ;
   8: LD_INT 1
  10: PPUSH
  11: LD_INT 200
  13: PPUSH
  14: CALL 29 0 2
// MC_RaiseSailEvent ( 2 , 300 ) ;
  18: LD_INT 2
  20: PPUSH
  21: LD_INT 300
  23: PPUSH
  24: CALL 29 0 2
// end ;
  28: END
// export function MC_RaiseSailEvent ( base , event ) ; begin
  29: LD_INT 0
  31: PPUSH
// async ;
  32: ASYNC
// case base of 1 :
  33: LD_VAR 0 1
  37: PUSH
  38: LD_INT 1
  40: DOUBLE
  41: EQUAL
  42: IFTRUE 46
  44: GO 53
  46: POP
// Fun1 ; 2 :
  47: CALL 106 0 0
  51: GO 69
  53: LD_INT 2
  55: DOUBLE
  56: EQUAL
  57: IFTRUE 61
  59: GO 68
  61: POP
// Fun2 ; end ;
  62: CALL 121 0 0
  66: GO 69
  68: POP
// display_strings := display_strings ^ [ base , event , tick ] ;
  69: LD_ADDR_OWVAR 47
  73: PUSH
  74: LD_OWVAR 47
  78: PUSH
  79: LD_VAR 0 1
  83: PUSH
  84: LD_VAR 0 2
  88: PUSH
  89: LD_OWVAR 1
  93: PUSH
  94: EMPTY
  95: LIST
  96: LIST
  97: LIST
  98: ADD
  99: ST_TO_ADDR
// sync ;
 100: SYNC
// end ;
 101: LD_VAR 0 3
 105: RET
// function Fun1 ; begin
 106: LD_INT 0
 108: PPUSH
// wait ( 0 0$10 ) ;
 109: LD_INT 350
 111: PPUSH
 112: CALL_OW 67
// end ;
 116: LD_VAR 0 1
 120: RET
// function Fun2 ; begin
 121: LD_INT 0
 123: PPUSH
// display_strings := display_strings ^ test ;
 124: LD_ADDR_OWVAR 47
 128: PUSH
 129: LD_OWVAR 47
 133: PUSH
 134: LD_STRING test
 136: ADD
 137: ST_TO_ADDR
// end ;
 138: LD_VAR 0 1
 142: RET
