// starting begin ResetFog ;
   0: CALL_OW 335
// MC_Init ( ) ;
   4: CALL 542 0 0
// PrepareTestBase ;
   8: CALL 123 0 0
// PlaceDepositsArea ( mat_oil , Area03 ) ;
  12: LD_INT 2
  14: PPUSH
  15: LD_INT 3
  17: PPUSH
  18: CALL 268 0 2
// mc_debug := true ;
  22: LD_ADDR_EXP 5
  26: PUSH
  27: LD_INT 1
  29: ST_TO_ADDR
// MC_Start ( ) ;
  30: CALL 566 0 0
// end ;
  34: END
// export function MC_CustomMacro ( ) ; begin
  35: LD_INT 0
  37: PPUSH
// MC_Add ( 1 , FilterAllUnits ( [ f_side , 1 ] ) ) ;
  38: LD_INT 1
  40: PPUSH
  41: LD_INT 22
  43: PUSH
  44: LD_INT 1
  46: PUSH
  47: EMPTY
  48: LIST
  49: LIST
  50: PPUSH
  51: CALL_OW 69
  55: PPUSH
  56: CALL 621 0 2
// MC_SetParkingArea ( 1 , parkingArea1 ) ;
  60: LD_INT 1
  62: PPUSH
  63: LD_INT 4
  65: PPUSH
  66: CALL 2441 0 2
// MC_SetCratesArea ( 1 , cratesArea1 ) ;
  70: LD_INT 1
  72: PPUSH
  73: LD_INT 2
  75: PPUSH
  76: CALL 2018 0 2
// MC_SetScanArea ( 1 , baseArea1 ) ;
  80: LD_INT 1
  82: PPUSH
  83: LD_INT 1
  85: PPUSH
  86: CALL 2490 0 2
// MC_SetBuildingList ( 1 , [ [ b_barracks , 37 , 33 , 5 ] ] ) ;
  90: LD_INT 1
  92: PPUSH
  93: LD_INT 5
  95: PUSH
  96: LD_INT 37
  98: PUSH
  99: LD_INT 33
 101: PUSH
 102: LD_INT 5
 104: PUSH
 105: EMPTY
 106: LIST
 107: LIST
 108: LIST
 109: LIST
 110: PUSH
 111: EMPTY
 112: LIST
 113: PPUSH
 114: CALL 1118 0 2
// end ;
 118: LD_VAR 0 1
 122: RET
// export function PrepareTestBase ; var i , un ; begin
 123: LD_INT 0
 125: PPUSH
 126: PPUSH
 127: PPUSH
// InitHc_All ;
 128: CALL_OW 584
// uc_side := 1 ;
 132: LD_ADDR_OWVAR 20
 136: PUSH
 137: LD_INT 1
 139: ST_TO_ADDR
// uc_nation := 1 ;
 140: LD_ADDR_OWVAR 21
 144: PUSH
 145: LD_INT 1
 147: ST_TO_ADDR
// for i := 1 to 12 do
 148: LD_ADDR_VAR 0 2
 152: PUSH
 153: DOUBLE
 154: LD_INT 1
 156: DEC
 157: ST_TO_ADDR
 158: LD_INT 12
 160: PUSH
 161: FOR_TO
 162: IFFALSE 229
// begin PrepareHuman ( false , i mod 4 + 1 , 3 ) ;
 164: LD_INT 0
 166: PPUSH
 167: LD_VAR 0 2
 171: PUSH
 172: LD_INT 4
 174: MOD
 175: PUSH
 176: LD_INT 1
 178: PLUS
 179: PPUSH
 180: LD_INT 3
 182: PPUSH
 183: CALL_OW 380
// un := CreateHuman ;
 187: LD_ADDR_VAR 0 3
 191: PUSH
 192: CALL_OW 44
 196: ST_TO_ADDR
// PlaceUnitXYR ( un , 21 , 16 , 8 , false ) ;
 197: LD_VAR 0 3
 201: PPUSH
 202: LD_INT 21
 204: PPUSH
 205: LD_INT 16
 207: PPUSH
 208: LD_INT 8
 210: PPUSH
 211: LD_INT 0
 213: PPUSH
 214: CALL_OW 50
// ComHold ( un ) ;
 218: LD_VAR 0 3
 222: PPUSH
 223: CALL_OW 140
// end ;
 227: GO 161
 229: POP
 230: POP
// end ;
 231: LD_VAR 0 1
 235: RET
// every 0 0$50 trigger mc_debug do
 236: LD_EXP 5
 240: IFFALSE 267
 242: GO 244
 244: DISABLE
// begin enable ;
 245: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , cratesArea1 , true ) ;
 246: LD_INT 1
 248: PPUSH
 249: LD_INT 5
 251: PPUSH
 252: CALL_OW 12
 256: PPUSH
 257: LD_INT 2
 259: PPUSH
 260: LD_INT 1
 262: PPUSH
 263: CALL_OW 55
// end ;
 267: END
// export function PlaceDepositsArea ( type , area ) ; var xy , i ; begin
 268: LD_INT 0
 270: PPUSH
 271: PPUSH
 272: PPUSH
// if not type in [ mat_oil , mat_siberit ] then
 273: LD_VAR 0 1
 277: PUSH
 278: LD_INT 2
 280: PUSH
 281: LD_INT 3
 283: PUSH
 284: EMPTY
 285: LIST
 286: LIST
 287: IN
 288: NOT
 289: IFFALSE 293
// exit ;
 291: GO 407
// xy := AreaToList ( area , 0 ) ;
 293: LD_ADDR_VAR 0 4
 297: PUSH
 298: LD_VAR 0 2
 302: PPUSH
 303: LD_INT 0
 305: PPUSH
 306: CALL_OW 517
 310: ST_TO_ADDR
// if not xy then
 311: LD_VAR 0 4
 315: NOT
 316: IFFALSE 320
// exit ;
 318: GO 407
// result := 0 ;
 320: LD_ADDR_VAR 0 3
 324: PUSH
 325: LD_INT 0
 327: ST_TO_ADDR
// for i := 1 to xy [ 1 ] do
 328: LD_ADDR_VAR 0 5
 332: PUSH
 333: DOUBLE
 334: LD_INT 1
 336: DEC
 337: ST_TO_ADDR
 338: LD_VAR 0 4
 342: PUSH
 343: LD_INT 1
 345: ARRAY
 346: PUSH
 347: FOR_TO
 348: IFFALSE 405
// begin result := result + 1 ;
 350: LD_ADDR_VAR 0 3
 354: PUSH
 355: LD_VAR 0 3
 359: PUSH
 360: LD_INT 1
 362: PLUS
 363: ST_TO_ADDR
// CreateDepositXY ( xy [ 1 ] [ i ] , xy [ 2 ] [ i ] , type ) ;
 364: LD_VAR 0 4
 368: PUSH
 369: LD_INT 1
 371: ARRAY
 372: PUSH
 373: LD_VAR 0 5
 377: ARRAY
 378: PPUSH
 379: LD_VAR 0 4
 383: PUSH
 384: LD_INT 2
 386: ARRAY
 387: PUSH
 388: LD_VAR 0 5
 392: ARRAY
 393: PPUSH
 394: LD_VAR 0 1
 398: PPUSH
 399: CALL_OW 62
// end ;
 403: GO 347
 405: POP
 406: POP
// end ; end_of_file
 407: LD_VAR 0 3
 411: RET
// on SailEventCustom ( event , p1 , p2 , p3 , p4 , p5 , p6 ) do begin MCE_SailEventCustom ( event , p1 , p2 , p3 , p4 , p5 , p6 ) ;
 412: LD_VAR 0 1
 416: PPUSH
 417: LD_VAR 0 2
 421: PPUSH
 422: LD_VAR 0 3
 426: PPUSH
 427: LD_VAR 0 4
 431: PPUSH
 432: LD_VAR 0 5
 436: PPUSH
 437: LD_VAR 0 6
 441: PPUSH
 442: LD_VAR 0 7
 446: PPUSH
 447: CALL 4869 0 7
// end ;
 451: PPOPN 7
 453: END
// on ClassChanged ( unit , old_class , new_class ) do begin MCE_ClassChanged ( unit , old_class , new_class ) ;
 454: LD_VAR 0 1
 458: PPUSH
 459: LD_VAR 0 2
 463: PPUSH
 464: LD_VAR 0 3
 468: PPUSH
 469: CALL 4922 0 3
// end ;
 473: PPOPN 3
 475: END
// on UnitDestroyed ( unit ) do begin MCE_UnitDestroyed ( unit ) ;
 476: LD_VAR 0 1
 480: PPUSH
 481: CALL 4944 0 1
// end ;
 485: PPOPN 1
 487: END
// on EvacuateVehicle ( driver , vehicle , p1 , p2 ) do begin MCE_EvacuateVehicle ( driver , vehicle , p1 , p2 ) ;
 488: LD_VAR 0 1
 492: PPUSH
 493: LD_VAR 0 2
 497: PPUSH
 498: LD_VAR 0 3
 502: PPUSH
 503: LD_VAR 0 4
 507: PPUSH
 508: CALL 5089 0 4
// end ;
 512: PPOPN 4
 514: END
// on BuildingComplete ( building ) do begin MCE_BuildingComplete ( building ) ;
 515: LD_VAR 0 1
 519: PPUSH
 520: CALL 5162 0 1
// end ;
 524: PPOPN 1
 526: END
// on UpgradeComplete ( building ) do begin MCE_BuildingUpgradeComplete ( building ) ;
 527: LD_VAR 0 1
 531: PPUSH
 532: CALL 5881 0 1
// end ;
 536: PPOPN 1
 538: END
// on CommandUnitXY ( comand , unit , x , y , z ) do begin end ; end_of_file
 539: PPOPN 5
 541: END
// export function MC_Init ( ) ; begin
 542: LD_INT 0
 544: PPUSH
// MC_InitVariables ( ) ;
 545: CALL 6142 0 0
// MCE_InitEvents ( ) ;
 549: CALL 4845 0 0
// MCT_InitTags ( ) ;
 553: CALL 6318 0 0
// MCTM_InitTaskManager ( ) end ;
 557: CALL 7905 0 0
 561: LD_VAR 0 1
 565: RET
// export function MC_Start ( ) ; begin
 566: LD_INT 0
 568: PPUSH
// mc_active := true ;
 569: LD_ADDR_EXP 4
 573: PUSH
 574: LD_INT 1
 576: ST_TO_ADDR
// MC_CustomMacro ( ) ;
 577: CALL 35 0 0
// MCE_SailEventCustom ( mce_start , 0 , 0 , 0 , 0 , 0 , 0 ) ;
 581: LD_EXP 1
 585: PPUSH
 586: LD_INT 0
 588: PPUSH
 589: LD_INT 0
 591: PPUSH
 592: LD_INT 0
 594: PPUSH
 595: LD_INT 0
 597: PPUSH
 598: LD_INT 0
 600: PPUSH
 601: LD_INT 0
 603: PPUSH
 604: CALL 4869 0 7
// end ;
 608: LD_VAR 0 1
 612: RET
// export function MC_Kill ( base ) ; begin
 613: LD_INT 0
 615: PPUSH
// end ;
 616: LD_VAR 0 2
 620: RET
// export function MC_Add ( side , units ) ; begin
 621: LD_INT 0
 623: PPUSH
// mc_bases := Replace ( mc_bases , mc_bases + 1 , side ) ;
 624: LD_ADDR_EXP 6
 628: PUSH
 629: LD_EXP 6
 633: PPUSH
 634: LD_EXP 6
 638: PUSH
 639: LD_INT 1
 641: PLUS
 642: PPUSH
 643: LD_VAR 0 1
 647: PPUSH
 648: CALL_OW 1
 652: ST_TO_ADDR
// mc_task := Replace ( mc_task , mc_task + 1 , [ ] ) ;
 653: LD_ADDR_EXP 8
 657: PUSH
 658: LD_EXP 8
 662: PPUSH
 663: LD_EXP 8
 667: PUSH
 668: LD_INT 1
 670: PLUS
 671: PPUSH
 672: EMPTY
 673: PPUSH
 674: CALL_OW 1
 678: ST_TO_ADDR
// mc_people := Replace ( mc_people , mc_people + 1 , UnitFilter ( units , [ [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ) ;
 679: LD_ADDR_EXP 9
 683: PUSH
 684: LD_EXP 9
 688: PPUSH
 689: LD_EXP 9
 693: PUSH
 694: LD_INT 1
 696: PLUS
 697: PPUSH
 698: LD_VAR 0 2
 702: PPUSH
 703: LD_INT 21
 705: PUSH
 706: LD_INT 1
 708: PUSH
 709: EMPTY
 710: LIST
 711: LIST
 712: PUSH
 713: LD_INT 3
 715: PUSH
 716: LD_INT 23
 718: PUSH
 719: LD_INT 0
 721: PUSH
 722: EMPTY
 723: LIST
 724: LIST
 725: PUSH
 726: EMPTY
 727: LIST
 728: LIST
 729: PUSH
 730: EMPTY
 731: LIST
 732: LIST
 733: PPUSH
 734: CALL_OW 72
 738: PPUSH
 739: CALL_OW 1
 743: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , mc_ape + 1 , UnitFilter ( units , [ f_nation , 0 ] ) ) ;
 744: LD_ADDR_EXP 19
 748: PUSH
 749: LD_EXP 19
 753: PPUSH
 754: LD_EXP 19
 758: PUSH
 759: LD_INT 1
 761: PLUS
 762: PPUSH
 763: LD_VAR 0 2
 767: PPUSH
 768: LD_INT 23
 770: PUSH
 771: LD_INT 0
 773: PUSH
 774: EMPTY
 775: LIST
 776: LIST
 777: PPUSH
 778: CALL_OW 72
 782: PPUSH
 783: CALL_OW 1
 787: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , mc_vehicles + 1 , UnitFilter ( units , [ f_type , unit_vehicle ] ) ) ;
 788: LD_ADDR_EXP 11
 792: PUSH
 793: LD_EXP 11
 797: PPUSH
 798: LD_EXP 11
 802: PUSH
 803: LD_INT 1
 805: PLUS
 806: PPUSH
 807: LD_VAR 0 2
 811: PPUSH
 812: LD_INT 21
 814: PUSH
 815: LD_INT 2
 817: PUSH
 818: EMPTY
 819: LIST
 820: LIST
 821: PPUSH
 822: CALL_OW 72
 826: PPUSH
 827: CALL_OW 1
 831: ST_TO_ADDR
// mc_buildings := Replace ( mc_buildings , mc_buildings + 1 , UnitFilter ( units , [ f_type , unit_building ] ) ) ;
 832: LD_ADDR_EXP 10
 836: PUSH
 837: LD_EXP 10
 841: PPUSH
 842: LD_EXP 10
 846: PUSH
 847: LD_INT 1
 849: PLUS
 850: PPUSH
 851: LD_VAR 0 2
 855: PPUSH
 856: LD_INT 21
 858: PUSH
 859: LD_INT 3
 861: PUSH
 862: EMPTY
 863: LIST
 864: LIST
 865: PPUSH
 866: CALL_OW 72
 870: PPUSH
 871: CALL_OW 1
 875: ST_TO_ADDR
// mc_defense_status := Replace ( mc_defense_status , mc_defense_status + 1 , false ) ;
 876: LD_ADDR_EXP 16
 880: PUSH
 881: LD_EXP 16
 885: PPUSH
 886: LD_EXP 16
 890: PUSH
 891: LD_INT 1
 893: PLUS
 894: PPUSH
 895: LD_INT 0
 897: PPUSH
 898: CALL_OW 1
 902: ST_TO_ADDR
// end ;
 903: LD_VAR 0 3
 907: RET
// export function MC_SetMinesField ( base , amount , area ) ; var i , tmp , list , x , j ; begin
 908: LD_INT 0
 910: PPUSH
 911: PPUSH
 912: PPUSH
 913: PPUSH
 914: PPUSH
 915: PPUSH
// if not mc_bases [ base ] then
 916: LD_EXP 6
 920: PUSH
 921: LD_VAR 0 1
 925: ARRAY
 926: NOT
 927: IFFALSE 931
// exit ;
 929: GO 1113
// tmp := [ ] ;
 931: LD_ADDR_VAR 0 6
 935: PUSH
 936: EMPTY
 937: ST_TO_ADDR
// list := AreaToList ( area , 0 ) ;
 938: LD_ADDR_VAR 0 7
 942: PUSH
 943: LD_VAR 0 3
 947: PPUSH
 948: LD_INT 0
 950: PPUSH
 951: CALL_OW 517
 955: ST_TO_ADDR
// if not list then
 956: LD_VAR 0 7
 960: NOT
 961: IFFALSE 965
// exit ;
 963: GO 1113
// for i = 1 to amount do
 965: LD_ADDR_VAR 0 5
 969: PUSH
 970: DOUBLE
 971: LD_INT 1
 973: DEC
 974: ST_TO_ADDR
 975: LD_VAR 0 2
 979: PUSH
 980: FOR_TO
 981: IFFALSE 1061
// begin x := rand ( 1 , list [ 1 ] ) ;
 983: LD_ADDR_VAR 0 8
 987: PUSH
 988: LD_INT 1
 990: PPUSH
 991: LD_VAR 0 7
 995: PUSH
 996: LD_INT 1
 998: ARRAY
 999: PPUSH
1000: CALL_OW 12
1004: ST_TO_ADDR
// tmp := Replace ( tmp , i , [ list [ 1 ] [ x ] , list [ 2 ] [ x ] ] ) ;
1005: LD_ADDR_VAR 0 6
1009: PUSH
1010: LD_VAR 0 6
1014: PPUSH
1015: LD_VAR 0 5
1019: PPUSH
1020: LD_VAR 0 7
1024: PUSH
1025: LD_INT 1
1027: ARRAY
1028: PUSH
1029: LD_VAR 0 8
1033: ARRAY
1034: PUSH
1035: LD_VAR 0 7
1039: PUSH
1040: LD_INT 2
1042: ARRAY
1043: PUSH
1044: LD_VAR 0 8
1048: ARRAY
1049: PUSH
1050: EMPTY
1051: LIST
1052: LIST
1053: PPUSH
1054: CALL_OW 1
1058: ST_TO_ADDR
// end ;
1059: GO 980
1061: POP
1062: POP
// mc_mines := Replace ( mc_mines , base , tmp ) ;
1063: LD_ADDR_EXP 12
1067: PUSH
1068: LD_EXP 12
1072: PPUSH
1073: LD_VAR 0 1
1077: PPUSH
1078: LD_VAR 0 6
1082: PPUSH
1083: CALL_OW 1
1087: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , area ) ;
1088: LD_ADDR_EXP 13
1092: PUSH
1093: LD_EXP 13
1097: PPUSH
1098: LD_VAR 0 1
1102: PPUSH
1103: LD_VAR 0 3
1107: PPUSH
1108: CALL_OW 1
1112: ST_TO_ADDR
// end ;
1113: LD_VAR 0 4
1117: RET
// export function MC_SetBuildingList ( base , construct_list ) ; var i , btype ; begin
1118: LD_INT 0
1120: PPUSH
1121: PPUSH
1122: PPUSH
// if not construct_list then
1123: LD_VAR 0 2
1127: NOT
1128: IFFALSE 1132
// exit ;
1130: GO 1358
// for i := 1 to construct_list do
1132: LD_ADDR_VAR 0 4
1136: PUSH
1137: DOUBLE
1138: LD_INT 1
1140: DEC
1141: ST_TO_ADDR
1142: LD_VAR 0 2
1146: PUSH
1147: FOR_TO
1148: IFFALSE 1331
// if construct_list [ i ] [ 1 ] in [ b_factory , b_barracks ] then
1150: LD_VAR 0 2
1154: PUSH
1155: LD_VAR 0 4
1159: ARRAY
1160: PUSH
1161: LD_INT 1
1163: ARRAY
1164: PUSH
1165: LD_INT 3
1167: PUSH
1168: LD_INT 5
1170: PUSH
1171: EMPTY
1172: LIST
1173: LIST
1174: IN
1175: IFFALSE 1329
// begin case construct_list [ i ] [ 1 ] of b_factory :
1177: LD_VAR 0 2
1181: PUSH
1182: LD_VAR 0 4
1186: ARRAY
1187: PUSH
1188: LD_INT 1
1190: ARRAY
1191: PUSH
1192: LD_INT 3
1194: DOUBLE
1195: EQUAL
1196: IFTRUE 1200
1198: GO 1211
1200: POP
// btype := b_workshop ; b_barracks :
1201: LD_ADDR_VAR 0 5
1205: PUSH
1206: LD_INT 2
1208: ST_TO_ADDR
1209: GO 1231
1211: LD_INT 5
1213: DOUBLE
1214: EQUAL
1215: IFTRUE 1219
1217: GO 1230
1219: POP
// btype := b_armoury ; end ;
1220: LD_ADDR_VAR 0 5
1224: PUSH
1225: LD_INT 4
1227: ST_TO_ADDR
1228: GO 1231
1230: POP
// construct_list := Replace ( construct_list , i , Replace ( construct_list [ i ] , 5 , construct_list [ i ] [ 1 ] ) ) ;
1231: LD_ADDR_VAR 0 2
1235: PUSH
1236: LD_VAR 0 2
1240: PPUSH
1241: LD_VAR 0 4
1245: PPUSH
1246: LD_VAR 0 2
1250: PUSH
1251: LD_VAR 0 4
1255: ARRAY
1256: PPUSH
1257: LD_INT 5
1259: PPUSH
1260: LD_VAR 0 2
1264: PUSH
1265: LD_VAR 0 4
1269: ARRAY
1270: PUSH
1271: LD_INT 1
1273: ARRAY
1274: PPUSH
1275: CALL_OW 1
1279: PPUSH
1280: CALL_OW 1
1284: ST_TO_ADDR
// construct_list := Replace ( construct_list , i , Replace ( construct_list [ i ] , 1 , btype ) ) ;
1285: LD_ADDR_VAR 0 2
1289: PUSH
1290: LD_VAR 0 2
1294: PPUSH
1295: LD_VAR 0 4
1299: PPUSH
1300: LD_VAR 0 2
1304: PUSH
1305: LD_VAR 0 4
1309: ARRAY
1310: PPUSH
1311: LD_INT 1
1313: PPUSH
1314: LD_VAR 0 5
1318: PPUSH
1319: CALL_OW 1
1323: PPUSH
1324: CALL_OW 1
1328: ST_TO_ADDR
// end ;
1329: GO 1147
1331: POP
1332: POP
// mc_build_list := Replace ( mc_build_list , base , construct_list ) ;
1333: LD_ADDR_EXP 14
1337: PUSH
1338: LD_EXP 14
1342: PPUSH
1343: LD_VAR 0 1
1347: PPUSH
1348: LD_VAR 0 2
1352: PPUSH
1353: CALL_OW 1
1357: ST_TO_ADDR
// end ;
1358: LD_VAR 0 3
1362: RET
// export function MC_InsertBuildingList ( base , construct_list ) ; var i , btype ; begin
1363: LD_INT 0
1365: PPUSH
1366: PPUSH
1367: PPUSH
// if not construct_list then
1368: LD_VAR 0 2
1372: NOT
1373: IFFALSE 1377
// exit ;
1375: GO 1615
// for i := 1 to construct_list do
1377: LD_ADDR_VAR 0 4
1381: PUSH
1382: DOUBLE
1383: LD_INT 1
1385: DEC
1386: ST_TO_ADDR
1387: LD_VAR 0 2
1391: PUSH
1392: FOR_TO
1393: IFFALSE 1576
// if construct_list [ i ] [ 1 ] in [ b_factory , b_barracks ] then
1395: LD_VAR 0 2
1399: PUSH
1400: LD_VAR 0 4
1404: ARRAY
1405: PUSH
1406: LD_INT 1
1408: ARRAY
1409: PUSH
1410: LD_INT 3
1412: PUSH
1413: LD_INT 5
1415: PUSH
1416: EMPTY
1417: LIST
1418: LIST
1419: IN
1420: IFFALSE 1574
// begin case construct_list [ i ] [ 1 ] of b_factory :
1422: LD_VAR 0 2
1426: PUSH
1427: LD_VAR 0 4
1431: ARRAY
1432: PUSH
1433: LD_INT 1
1435: ARRAY
1436: PUSH
1437: LD_INT 3
1439: DOUBLE
1440: EQUAL
1441: IFTRUE 1445
1443: GO 1456
1445: POP
// btype := b_workshop ; b_barracks :
1446: LD_ADDR_VAR 0 5
1450: PUSH
1451: LD_INT 2
1453: ST_TO_ADDR
1454: GO 1476
1456: LD_INT 5
1458: DOUBLE
1459: EQUAL
1460: IFTRUE 1464
1462: GO 1475
1464: POP
// btype := b_armoury ; end ;
1465: LD_ADDR_VAR 0 5
1469: PUSH
1470: LD_INT 4
1472: ST_TO_ADDR
1473: GO 1476
1475: POP
// construct_list := Replace ( construct_list , i , Replace ( construct_list [ i ] , 5 , construct_list [ i ] [ 1 ] ) ) ;
1476: LD_ADDR_VAR 0 2
1480: PUSH
1481: LD_VAR 0 2
1485: PPUSH
1486: LD_VAR 0 4
1490: PPUSH
1491: LD_VAR 0 2
1495: PUSH
1496: LD_VAR 0 4
1500: ARRAY
1501: PPUSH
1502: LD_INT 5
1504: PPUSH
1505: LD_VAR 0 2
1509: PUSH
1510: LD_VAR 0 4
1514: ARRAY
1515: PUSH
1516: LD_INT 1
1518: ARRAY
1519: PPUSH
1520: CALL_OW 1
1524: PPUSH
1525: CALL_OW 1
1529: ST_TO_ADDR
// construct_list := Replace ( construct_list , i , Replace ( construct_list [ i ] , 1 , btype ) ) ;
1530: LD_ADDR_VAR 0 2
1534: PUSH
1535: LD_VAR 0 2
1539: PPUSH
1540: LD_VAR 0 4
1544: PPUSH
1545: LD_VAR 0 2
1549: PUSH
1550: LD_VAR 0 4
1554: ARRAY
1555: PPUSH
1556: LD_INT 1
1558: PPUSH
1559: LD_VAR 0 5
1563: PPUSH
1564: CALL_OW 1
1568: PPUSH
1569: CALL_OW 1
1573: ST_TO_ADDR
// end ;
1574: GO 1392
1576: POP
1577: POP
// mc_build_list := Replace ( mc_build_list , base , mc_build_list [ base ] union construct_list ) ;
1578: LD_ADDR_EXP 14
1582: PUSH
1583: LD_EXP 14
1587: PPUSH
1588: LD_VAR 0 1
1592: PPUSH
1593: LD_EXP 14
1597: PUSH
1598: LD_VAR 0 1
1602: ARRAY
1603: PUSH
1604: LD_VAR 0 2
1608: UNION
1609: PPUSH
1610: CALL_OW 1
1614: ST_TO_ADDR
// end ;
1615: LD_VAR 0 3
1619: RET
// export function MC_SetProduceList ( base , produce_list ) ; begin
1620: LD_INT 0
1622: PPUSH
// mc_produce_list := Replace ( mc_produce_list , base , produce_list ) ;
1623: LD_ADDR_EXP 15
1627: PUSH
1628: LD_EXP 15
1632: PPUSH
1633: LD_VAR 0 1
1637: PPUSH
1638: LD_VAR 0 2
1642: PPUSH
1643: CALL_OW 1
1647: ST_TO_ADDR
// end ;
1648: LD_VAR 0 3
1652: RET
// export function MC_InsertProduceList ( base , components ) ; begin
1653: LD_INT 0
1655: PPUSH
// mc_produce_list := Replace ( mc_produce_list , base , mc_produce_list [ base ] ^ components ) ;
1656: LD_ADDR_EXP 15
1660: PUSH
1661: LD_EXP 15
1665: PPUSH
1666: LD_VAR 0 1
1670: PPUSH
1671: LD_EXP 15
1675: PUSH
1676: LD_VAR 0 1
1680: ARRAY
1681: PUSH
1682: LD_VAR 0 2
1686: ADD
1687: PPUSH
1688: CALL_OW 1
1692: ST_TO_ADDR
// end ;
1693: LD_VAR 0 3
1697: RET
// export function MC_SetDefenderList ( base , deflist ) ; begin
1698: LD_INT 0
1700: PPUSH
// mc_defender := Replace ( mc_defender , base , deflist ) ;
1701: LD_ADDR_EXP 17
1705: PUSH
1706: LD_EXP 17
1710: PPUSH
1711: LD_VAR 0 1
1715: PPUSH
1716: LD_VAR 0 2
1720: PPUSH
1721: CALL_OW 1
1725: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , base , deflist + 0 ) ;
1726: LD_ADDR_EXP 18
1730: PUSH
1731: LD_EXP 18
1735: PPUSH
1736: LD_VAR 0 1
1740: PPUSH
1741: LD_VAR 0 2
1745: PUSH
1746: LD_INT 0
1748: PLUS
1749: PPUSH
1750: CALL_OW 1
1754: ST_TO_ADDR
// end ;
1755: LD_VAR 0 3
1759: RET
// export function MC_SetDefenderLimit ( base , limit ) ; begin
1760: LD_INT 0
1762: PPUSH
// mc_defender_limit := Replace ( mc_defender_limit , base , limit ) ;
1763: LD_ADDR_EXP 18
1767: PUSH
1768: LD_EXP 18
1772: PPUSH
1773: LD_VAR 0 1
1777: PPUSH
1778: LD_VAR 0 2
1782: PPUSH
1783: CALL_OW 1
1787: ST_TO_ADDR
// end ;
1788: LD_VAR 0 3
1792: RET
// export function MC_PrepareAttack ( base , group , path , flags ) ; begin
1793: LD_INT 0
1795: PPUSH
// mc_attack := ReplaceIn ( mc_attack , [ base , mc_attack [ base ] + 1 ] , [ base , group , path , flags ] ) ;
1796: LD_ADDR_EXP 21
1800: PUSH
1801: LD_EXP 21
1805: PPUSH
1806: LD_VAR 0 1
1810: PUSH
1811: LD_EXP 21
1815: PUSH
1816: LD_VAR 0 1
1820: ARRAY
1821: PUSH
1822: LD_INT 1
1824: PLUS
1825: PUSH
1826: EMPTY
1827: LIST
1828: LIST
1829: PPUSH
1830: LD_VAR 0 1
1834: PUSH
1835: LD_VAR 0 2
1839: PUSH
1840: LD_VAR 0 3
1844: PUSH
1845: LD_VAR 0 4
1849: PUSH
1850: EMPTY
1851: LIST
1852: LIST
1853: LIST
1854: LIST
1855: PPUSH
1856: CALL 13014 0 3
1860: ST_TO_ADDR
// end ;
1861: LD_VAR 0 5
1865: RET
// export function MC_SetDepositsXY ( base , deposits_list ) ; begin
1866: LD_INT 0
1868: PPUSH
// mc_deposits_xy := Replace ( mc_deposits_xy , base , deposits_list ) ;
1869: LD_ADDR_EXP 22
1873: PUSH
1874: LD_EXP 22
1878: PPUSH
1879: LD_VAR 0 1
1883: PPUSH
1884: LD_VAR 0 2
1888: PPUSH
1889: CALL_OW 1
1893: ST_TO_ADDR
// end ;
1894: LD_VAR 0 3
1898: RET
// export function MC_SetTame ( base , area ) ; begin
1899: LD_INT 0
1901: PPUSH
// mc_can_tame := Replace ( mc_can_tame , base , area ) ;
1902: LD_ADDR_EXP 23
1906: PUSH
1907: LD_EXP 23
1911: PPUSH
1912: LD_VAR 0 1
1916: PPUSH
1917: LD_VAR 0 2
1921: PPUSH
1922: CALL_OW 1
1926: ST_TO_ADDR
// end ;
1927: LD_VAR 0 3
1931: RET
// export function MC_SetLabKind ( base , kinds ) ; var i ; begin
1932: LD_INT 0
1934: PPUSH
1935: PPUSH
// if not base or not kinds then
1936: LD_VAR 0 1
1940: NOT
1941: PUSH
1942: LD_VAR 0 2
1946: NOT
1947: OR
1948: IFFALSE 1952
// exit ;
1950: GO 2013
// for i in kinds do
1952: LD_ADDR_VAR 0 4
1956: PUSH
1957: LD_VAR 0 2
1961: PUSH
1962: FOR_IN
1963: IFFALSE 2011
// mc_lab_upgrade := ReplaceIn ( mc_lab_upgrade , [ base , mc_lab_upgrade [ base ] + 1 ] , i ) ;
1965: LD_ADDR_EXP 24
1969: PUSH
1970: LD_EXP 24
1974: PPUSH
1975: LD_VAR 0 1
1979: PUSH
1980: LD_EXP 24
1984: PUSH
1985: LD_VAR 0 1
1989: ARRAY
1990: PUSH
1991: LD_INT 1
1993: PLUS
1994: PUSH
1995: EMPTY
1996: LIST
1997: LIST
1998: PPUSH
1999: LD_VAR 0 4
2003: PPUSH
2004: CALL 13014 0 3
2008: ST_TO_ADDR
2009: GO 1962
2011: POP
2012: POP
// end ;
2013: LD_VAR 0 3
2017: RET
// export function MC_SetCratesArea ( base , areas ) ; begin
2018: LD_INT 0
2020: PPUSH
// if not mc_bases or not base or not areas then
2021: LD_EXP 6
2025: NOT
2026: PUSH
2027: LD_VAR 0 1
2031: NOT
2032: OR
2033: PUSH
2034: LD_VAR 0 2
2038: NOT
2039: OR
2040: IFFALSE 2044
// exit ;
2042: GO 2069
// mc_crates_area := Replace ( mc_crates_area , base , areas ) ;
2044: LD_ADDR_EXP 25
2048: PUSH
2049: LD_EXP 25
2053: PPUSH
2054: LD_VAR 0 1
2058: PPUSH
2059: LD_VAR 0 2
2063: PPUSH
2064: CALL_OW 1
2068: ST_TO_ADDR
// end ;
2069: LD_VAR 0 3
2073: RET
// export function MC_SetTeleportExit ( base , teleports_exit ) ; begin
2074: LD_INT 0
2076: PPUSH
// if not mc_bases or not base or not teleports_exit then
2077: LD_EXP 6
2081: NOT
2082: PUSH
2083: LD_VAR 0 1
2087: NOT
2088: OR
2089: PUSH
2090: LD_VAR 0 2
2094: NOT
2095: OR
2096: IFFALSE 2100
// exit ;
2098: GO 2125
// mc_teleport_exit := Replace ( mc_teleport_exit , base , teleports_exit ) ;
2100: LD_ADDR_EXP 26
2104: PUSH
2105: LD_EXP 26
2109: PPUSH
2110: LD_VAR 0 1
2114: PPUSH
2115: LD_VAR 0 2
2119: PPUSH
2120: CALL_OW 1
2124: ST_TO_ADDR
// end ;
2125: LD_VAR 0 3
2129: RET
// export function MC_SetFactoryExtension ( base , x , y , d , ext_list ) ; var i , tmp ; begin
2130: LD_INT 0
2132: PPUSH
2133: PPUSH
2134: PPUSH
// if not base or not ext_list then
2135: LD_VAR 0 1
2139: NOT
2140: PUSH
2141: LD_VAR 0 5
2145: NOT
2146: OR
2147: IFFALSE 2151
// exit ;
2149: GO 2324
// tmp := GetFacExtXYD ( x , y , d ) ;
2151: LD_ADDR_VAR 0 8
2155: PUSH
2156: LD_VAR 0 2
2160: PPUSH
2161: LD_VAR 0 3
2165: PPUSH
2166: LD_VAR 0 4
2170: PPUSH
2171: CALL 41996 0 3
2175: ST_TO_ADDR
// if not tmp then
2176: LD_VAR 0 8
2180: NOT
2181: IFFALSE 2185
// exit ;
2183: GO 2324
// for i in tmp do
2185: LD_ADDR_VAR 0 7
2189: PUSH
2190: LD_VAR 0 8
2194: PUSH
2195: FOR_IN
2196: IFFALSE 2322
// begin mc_build_list := Replace ( mc_build_list , base , Insert ( mc_build_list [ base ] , mc_build_list [ base ] + 1 , [ ext_list [ 1 ] , i [ 1 ] , i [ 2 ] , i [ 3 ] ] ) ) ;
2198: LD_ADDR_EXP 14
2202: PUSH
2203: LD_EXP 14
2207: PPUSH
2208: LD_VAR 0 1
2212: PPUSH
2213: LD_EXP 14
2217: PUSH
2218: LD_VAR 0 1
2222: ARRAY
2223: PPUSH
2224: LD_EXP 14
2228: PUSH
2229: LD_VAR 0 1
2233: ARRAY
2234: PUSH
2235: LD_INT 1
2237: PLUS
2238: PPUSH
2239: LD_VAR 0 5
2243: PUSH
2244: LD_INT 1
2246: ARRAY
2247: PUSH
2248: LD_VAR 0 7
2252: PUSH
2253: LD_INT 1
2255: ARRAY
2256: PUSH
2257: LD_VAR 0 7
2261: PUSH
2262: LD_INT 2
2264: ARRAY
2265: PUSH
2266: LD_VAR 0 7
2270: PUSH
2271: LD_INT 3
2273: ARRAY
2274: PUSH
2275: EMPTY
2276: LIST
2277: LIST
2278: LIST
2279: LIST
2280: PPUSH
2281: CALL_OW 2
2285: PPUSH
2286: CALL_OW 1
2290: ST_TO_ADDR
// ext_list := Delete ( ext_list , 1 ) ;
2291: LD_ADDR_VAR 0 5
2295: PUSH
2296: LD_VAR 0 5
2300: PPUSH
2301: LD_INT 1
2303: PPUSH
2304: CALL_OW 3
2308: ST_TO_ADDR
// if not ext_list then
2309: LD_VAR 0 5
2313: NOT
2314: IFFALSE 2320
// exit ;
2316: POP
2317: POP
2318: GO 2324
// end ;
2320: GO 2195
2322: POP
2323: POP
// end ;
2324: LD_VAR 0 6
2328: RET
// export function MC_SetAllowedTurretWeapons ( base , weapon_list ) ; begin
2329: LD_INT 0
2331: PPUSH
// if not mc_bases or not base or not weapon_list then
2332: LD_EXP 6
2336: NOT
2337: PUSH
2338: LD_VAR 0 1
2342: NOT
2343: OR
2344: PUSH
2345: LD_VAR 0 2
2349: NOT
2350: OR
2351: IFFALSE 2355
// exit ;
2353: GO 2380
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , base , weapon_list ) ;
2355: LD_ADDR_EXP 27
2359: PUSH
2360: LD_EXP 27
2364: PPUSH
2365: LD_VAR 0 1
2369: PPUSH
2370: LD_VAR 0 2
2374: PPUSH
2375: CALL_OW 1
2379: ST_TO_ADDR
// end ;
2380: LD_VAR 0 3
2384: RET
// export function MC_SetTechList ( base , tech_list ) ; begin
2385: LD_INT 0
2387: PPUSH
// if not mc_bases or not base or not tech_list then
2388: LD_EXP 6
2392: NOT
2393: PUSH
2394: LD_VAR 0 1
2398: NOT
2399: OR
2400: PUSH
2401: LD_VAR 0 2
2405: NOT
2406: OR
2407: IFFALSE 2411
// exit ;
2409: GO 2436
// mc_tech := Replace ( mc_tech , base , tech_list ) ;
2411: LD_ADDR_EXP 20
2415: PUSH
2416: LD_EXP 20
2420: PPUSH
2421: LD_VAR 0 1
2425: PPUSH
2426: LD_VAR 0 2
2430: PPUSH
2431: CALL_OW 1
2435: ST_TO_ADDR
// end ;
2436: LD_VAR 0 3
2440: RET
// export function MC_SetParkingArea ( base , parking_area ) ; begin
2441: LD_INT 0
2443: PPUSH
// if not parking_area or not base then
2444: LD_VAR 0 2
2448: NOT
2449: PUSH
2450: LD_VAR 0 1
2454: NOT
2455: OR
2456: IFFALSE 2460
// exit ;
2458: GO 2485
// mc_parking := Replace ( mc_parking , base , parking_area ) ;
2460: LD_ADDR_EXP 28
2464: PUSH
2465: LD_EXP 28
2469: PPUSH
2470: LD_VAR 0 1
2474: PPUSH
2475: LD_VAR 0 2
2479: PPUSH
2480: CALL_OW 1
2484: ST_TO_ADDR
// end ;
2485: LD_VAR 0 3
2489: RET
// export function MC_SetScanArea ( base , scan_area ) ; begin
2490: LD_INT 0
2492: PPUSH
// if not base or not scan_area then
2493: LD_VAR 0 1
2497: NOT
2498: PUSH
2499: LD_VAR 0 2
2503: NOT
2504: OR
2505: IFFALSE 2509
// exit ;
2507: GO 2534
// mc_scan_area := Replace ( mc_scan_area , base , scan_area ) ;
2509: LD_ADDR_EXP 29
2513: PUSH
2514: LD_EXP 29
2518: PPUSH
2519: LD_VAR 0 1
2523: PPUSH
2524: LD_VAR 0 2
2528: PPUSH
2529: CALL_OW 1
2533: ST_TO_ADDR
// end ; end_of_file
2534: LD_VAR 0 3
2538: RET
// export function MC_Monitor ( ) ; var i , active_players ; begin
2539: LD_INT 0
2541: PPUSH
2542: PPUSH
2543: PPUSH
// while mc_active do
2544: LD_EXP 4
2548: IFFALSE 2658
// begin wait ( 0 0$1 ) ;
2550: LD_INT 35
2552: PPUSH
2553: CALL_OW 67
// active_players := 0 ;
2557: LD_ADDR_VAR 0 3
2561: PUSH
2562: LD_INT 0
2564: ST_TO_ADDR
// for i := 1 to mc_bases do
2565: LD_ADDR_VAR 0 2
2569: PUSH
2570: DOUBLE
2571: LD_INT 1
2573: DEC
2574: ST_TO_ADDR
2575: LD_EXP 6
2579: PUSH
2580: FOR_TO
2581: IFFALSE 2639
// begin if MC_Exist ( i ) then
2583: LD_VAR 0 2
2587: PPUSH
2588: CALL 6575 0 1
2592: IFFALSE 2637
// begin MCE_SailEventCustom ( mce_monitor_base , i , 0 , 0 , 0 , 0 , 0 ) ;
2594: LD_EXP 2
2598: PPUSH
2599: LD_VAR 0 2
2603: PPUSH
2604: LD_INT 0
2606: PPUSH
2607: LD_INT 0
2609: PPUSH
2610: LD_INT 0
2612: PPUSH
2613: LD_INT 0
2615: PPUSH
2616: LD_INT 0
2618: PPUSH
2619: CALL 4869 0 7
// active_players := active_players + 1 ;
2623: LD_ADDR_VAR 0 3
2627: PUSH
2628: LD_VAR 0 3
2632: PUSH
2633: LD_INT 1
2635: PLUS
2636: ST_TO_ADDR
// end ; end ;
2637: GO 2580
2639: POP
2640: POP
// if not active_players then
2641: LD_VAR 0 3
2645: NOT
2646: IFFALSE 2656
// mc_active := false ;
2648: LD_ADDR_EXP 4
2652: PUSH
2653: LD_INT 0
2655: ST_TO_ADDR
// end ;
2656: GO 2544
// end ;
2658: LD_VAR 0 1
2662: RET
// export function MC_MonitorBase ( base ) ; begin
2663: LD_INT 0
2665: PPUSH
// if not mc_people [ base ] then
2666: LD_EXP 9
2670: PUSH
2671: LD_VAR 0 1
2675: ARRAY
2676: NOT
2677: IFFALSE 2702
// mc_bases := Replace ( mc_bases , base , 0 ) ;
2679: LD_ADDR_EXP 6
2683: PUSH
2684: LD_EXP 6
2688: PPUSH
2689: LD_VAR 0 1
2693: PPUSH
2694: LD_INT 0
2696: PPUSH
2697: CALL_OW 1
2701: ST_TO_ADDR
// mc_danger := Replace ( mc_danger , base , DangerInArea ( mc_bases [ base ] , mc_scan_area [ base ] ) ) ;
2702: LD_ADDR_EXP 30
2706: PUSH
2707: LD_EXP 30
2711: PPUSH
2712: LD_VAR 0 1
2716: PPUSH
2717: LD_EXP 6
2721: PUSH
2722: LD_VAR 0 1
2726: ARRAY
2727: PPUSH
2728: LD_EXP 29
2732: PUSH
2733: LD_VAR 0 1
2737: ARRAY
2738: PPUSH
2739: CALL 15660 0 2
2743: PPUSH
2744: CALL_OW 1
2748: ST_TO_ADDR
// if mc_danger [ base ] then
2749: LD_EXP 30
2753: PUSH
2754: LD_VAR 0 1
2758: ARRAY
2759: IFFALSE 2772
// MC_Defend ( base ) else
2761: LD_VAR 0 1
2765: PPUSH
2766: CALL 2786 0 1
2770: GO 2781
// MC_TaskManager ( base ) ;
2772: LD_VAR 0 1
2776: PPUSH
2777: CALL 2848 0 1
// end ;
2781: LD_VAR 0 2
2785: RET
// export function MC_Defend ( base ) ; var defender_vehicles ; begin
2786: LD_INT 0
2788: PPUSH
2789: PPUSH
// if mc_defense_status [ base ] then
2790: LD_EXP 16
2794: PUSH
2795: LD_VAR 0 1
2799: ARRAY
2800: IFFALSE 2804
// exit ;
2802: GO 2843
// mc_defense_status := Replace ( mc_defense_status , base , true ) ;
2804: LD_ADDR_EXP 16
2808: PUSH
2809: LD_EXP 16
2813: PPUSH
2814: LD_VAR 0 1
2818: PPUSH
2819: LD_INT 1
2821: PPUSH
2822: CALL_OW 1
2826: ST_TO_ADDR
// defender_vehicles := mc_defender [ base ] ;
2827: LD_ADDR_VAR 0 3
2831: PUSH
2832: LD_EXP 17
2836: PUSH
2837: LD_VAR 0 1
2841: ARRAY
2842: ST_TO_ADDR
// end ;
2843: LD_VAR 0 2
2847: RET
// export function MC_TaskManager ( base ) ; var crates_list ; begin
2848: LD_INT 0
2850: PPUSH
2851: PPUSH
// MC_CollectCrates ( base , GetListOfCratesInArea ( mc_crates_area [ base ] ) ) ;
2852: LD_VAR 0 1
2856: PPUSH
2857: LD_EXP 25
2861: PUSH
2862: LD_VAR 0 1
2866: ARRAY
2867: PPUSH
2868: CALL_OW 435
2872: PPUSH
2873: CALL 2891 0 2
// MC_Build ( base ) ;
2877: LD_VAR 0 1
2881: PPUSH
2882: CALL 4237 0 1
// end ;
2886: LD_VAR 0 2
2890: RET
// export function MC_CollectCrates ( base , crates ) ; var i , j , amount , cargo_bays , apes , engs , collectors , number_of_crates , driver , drivers , depot , mechanic_used ; begin
2891: LD_INT 0
2893: PPUSH
2894: PPUSH
2895: PPUSH
2896: PPUSH
2897: PPUSH
2898: PPUSH
2899: PPUSH
2900: PPUSH
2901: PPUSH
2902: PPUSH
2903: PPUSH
2904: PPUSH
2905: PPUSH
// if MCTM_HasActiveTask ( base , mctm_collect_crates ) or not crates or not MC_GetDepot ( base ) then
2906: LD_VAR 0 1
2910: PPUSH
2911: LD_EXP 36
2915: PPUSH
2916: CALL 7929 0 2
2920: PUSH
2921: LD_VAR 0 2
2925: NOT
2926: OR
2927: PUSH
2928: LD_VAR 0 1
2932: PPUSH
2933: CALL 7550 0 1
2937: NOT
2938: OR
2939: IFFALSE 2943
// exit ;
2941: GO 4232
// MCTM_SetActiveTask ( base , mctm_collect_crates ) ;
2943: LD_VAR 0 1
2947: PPUSH
2948: LD_EXP 36
2952: PPUSH
2953: CALL 7959 0 2
// collectors := [ ] ;
2957: LD_ADDR_VAR 0 10
2961: PUSH
2962: EMPTY
2963: ST_TO_ADDR
// cargo_bays := GetCargoBay ( mc_vehicles [ base ] ) ;
2964: LD_ADDR_VAR 0 7
2968: PUSH
2969: LD_EXP 11
2973: PUSH
2974: LD_VAR 0 1
2978: ARRAY
2979: PPUSH
2980: CALL 45619 0 1
2984: ST_TO_ADDR
// if cargo_bays then
2985: LD_VAR 0 7
2989: IFFALSE 3670
// begin collectors := collectors union cargo_bays ;
2991: LD_ADDR_VAR 0 10
2995: PUSH
2996: LD_VAR 0 10
3000: PUSH
3001: LD_VAR 0 7
3005: UNION
3006: ST_TO_ADDR
// while crates and collectors do
3007: LD_VAR 0 2
3011: PUSH
3012: LD_VAR 0 10
3016: AND
3017: IFFALSE 3567
// begin wait ( 0 0$1 ) ;
3019: LD_INT 35
3021: PPUSH
3022: CALL_OW 67
// for i in collectors do
3026: LD_ADDR_VAR 0 4
3030: PUSH
3031: LD_VAR 0 10
3035: PUSH
3036: FOR_IN
3037: IFFALSE 3563
// begin driver := 0 ;
3039: LD_ADDR_VAR 0 12
3043: PUSH
3044: LD_INT 0
3046: ST_TO_ADDR
// if GetControl ( i ) = control_manual and not IsDrivenBy ( i ) then
3047: LD_VAR 0 4
3051: PPUSH
3052: CALL_OW 263
3056: PUSH
3057: LD_INT 1
3059: EQUAL
3060: PUSH
3061: LD_VAR 0 4
3065: PPUSH
3066: CALL_OW 311
3070: NOT
3071: AND
3072: IFFALSE 3256
// begin driver := MC_GetOneByClass ( base , 3 , mct_none ) ;
3074: LD_ADDR_VAR 0 12
3078: PUSH
3079: LD_VAR 0 1
3083: PPUSH
3084: LD_INT 3
3086: PPUSH
3087: LD_EXP 31
3091: PPUSH
3092: CALL 7456 0 3
3096: ST_TO_ADDR
// if not driver then
3097: LD_VAR 0 12
3101: NOT
3102: IFFALSE 3171
// begin driver := MC_GetBestForClass ( base , 3 , 1 ) ;
3104: LD_ADDR_VAR 0 12
3108: PUSH
3109: LD_VAR 0 1
3113: PPUSH
3114: LD_INT 3
3116: PPUSH
3117: LD_INT 1
3119: PPUSH
3120: CALL 6615 0 3
3124: ST_TO_ADDR
// if driver then
3125: LD_VAR 0 12
3129: IFFALSE 3171
// begin driver := driver [ 1 ] ;
3131: LD_ADDR_VAR 0 12
3135: PUSH
3136: LD_VAR 0 12
3140: PUSH
3141: LD_INT 1
3143: ARRAY
3144: ST_TO_ADDR
// MC_ChangeClass ( base , 3 , driver ) ;
3145: LD_VAR 0 1
3149: PPUSH
3150: LD_INT 3
3152: PPUSH
3153: LD_VAR 0 12
3157: PPUSH
3158: CALL 6845 0 3
// AddComExitBuilding ( driver ) ;
3162: LD_VAR 0 12
3166: PPUSH
3167: CALL_OW 182
// end ; end ; if IsInUnit ( driver ) then
3171: LD_VAR 0 12
3175: PPUSH
3176: CALL_OW 310
3180: IFFALSE 3191
// ComExit ( driver ) ;
3182: LD_VAR 0 12
3186: PPUSH
3187: CALL 44748 0 1
// SetTag ( driver , mct_collect_crates ) ;
3191: LD_VAR 0 12
3195: PPUSH
3196: LD_EXP 34
3200: PPUSH
3201: CALL_OW 109
// if GetLives ( i ) < 1000 then
3205: LD_VAR 0 4
3209: PPUSH
3210: CALL_OW 256
3214: PUSH
3215: LD_INT 1000
3217: LESS
3218: IFFALSE 3234
// AddComRepairVehicle ( driver , i ) ;
3220: LD_VAR 0 12
3224: PPUSH
3225: LD_VAR 0 4
3229: PPUSH
3230: CALL_OW 189
// AddComEnterUnit ( driver , i ) ;
3234: LD_VAR 0 12
3238: PPUSH
3239: LD_VAR 0 4
3243: PPUSH
3244: CALL_OW 180
// mechanic_used := true ;
3248: LD_ADDR_VAR 0 15
3252: PUSH
3253: LD_INT 1
3255: ST_TO_ADDR
// end ; repeat wait ( 0 0$1 ) ;
3256: LD_INT 35
3258: PPUSH
3259: CALL_OW 67
// if IsDead ( i ) then
3263: LD_VAR 0 4
3267: PPUSH
3268: CALL_OW 301
3272: IFFALSE 3292
// begin collectors := collectors diff i ;
3274: LD_ADDR_VAR 0 10
3278: PUSH
3279: LD_VAR 0 10
3283: PUSH
3284: LD_VAR 0 4
3288: DIFF
3289: ST_TO_ADDR
// continue ;
3290: GO 3256
// end ; if GetEngine ( i ) = engine_combustion and GetFuel ( i ) < 20 then
3292: LD_VAR 0 4
3296: PPUSH
3297: CALL_OW 262
3301: PUSH
3302: LD_INT 1
3304: EQUAL
3305: PUSH
3306: LD_VAR 0 4
3310: PPUSH
3311: CALL_OW 261
3315: PUSH
3316: LD_INT 20
3318: LESS
3319: AND
3320: IFFALSE 3381
// begin depot := NearestUnitToUnit ( MC_GetDepot ( base ) , i ) ;
3322: LD_ADDR_VAR 0 14
3326: PUSH
3327: LD_VAR 0 1
3331: PPUSH
3332: CALL 7550 0 1
3336: PPUSH
3337: LD_VAR 0 4
3341: PPUSH
3342: CALL_OW 74
3346: ST_TO_ADDR
// if GetDistUnits ( i , depot ) < 6 then
3347: LD_VAR 0 4
3351: PPUSH
3352: LD_VAR 0 14
3356: PPUSH
3357: CALL_OW 296
3361: PUSH
3362: LD_INT 6
3364: LESS
3365: IFFALSE 3381
// ComMoveUnit ( i , depot ) ;
3367: LD_VAR 0 4
3371: PPUSH
3372: LD_VAR 0 14
3376: PPUSH
3377: CALL_OW 112
// end ; if GetControl ( i ) = control_manual then
3381: LD_VAR 0 4
3385: PPUSH
3386: CALL_OW 263
3390: PUSH
3391: LD_INT 1
3393: EQUAL
3394: IFFALSE 3459
// begin if not driver then
3396: LD_VAR 0 12
3400: NOT
3401: IFFALSE 3418
// driver := IsDrivenBy ( i ) ;
3403: LD_ADDR_VAR 0 12
3407: PUSH
3408: LD_VAR 0 4
3412: PPUSH
3413: CALL_OW 311
3417: ST_TO_ADDR
// if not HasTask ( driver ) then
3418: LD_VAR 0 12
3422: PPUSH
3423: CALL_OW 314
3427: NOT
3428: IFFALSE 3457
// ComCollect ( driver , crates [ 1 ] , crates [ 2 ] ) ;
3430: LD_VAR 0 12
3434: PPUSH
3435: LD_VAR 0 2
3439: PUSH
3440: LD_INT 1
3442: ARRAY
3443: PPUSH
3444: LD_VAR 0 2
3448: PUSH
3449: LD_INT 2
3451: ARRAY
3452: PPUSH
3453: CALL_OW 117
// end else
3457: GO 3498
// if not HasTask ( i ) then
3459: LD_VAR 0 4
3463: PPUSH
3464: CALL_OW 314
3468: NOT
3469: IFFALSE 3498
// ComCollect ( i , crates [ 1 ] , crates [ 2 ] ) ;
3471: LD_VAR 0 4
3475: PPUSH
3476: LD_VAR 0 2
3480: PUSH
3481: LD_INT 1
3483: ARRAY
3484: PPUSH
3485: LD_VAR 0 2
3489: PUSH
3490: LD_INT 2
3492: ARRAY
3493: PPUSH
3494: CALL_OW 117
// until not GetResourceAmountXY ( crates [ 1 ] , crates [ 2 ] ) ;
3498: LD_VAR 0 2
3502: PUSH
3503: LD_INT 1
3505: ARRAY
3506: PPUSH
3507: LD_VAR 0 2
3511: PUSH
3512: LD_INT 2
3514: ARRAY
3515: PPUSH
3516: CALL_OW 284
3520: NOT
3521: IFFALSE 3256
// for j := 1 to 2 do
3523: LD_ADDR_VAR 0 5
3527: PUSH
3528: DOUBLE
3529: LD_INT 1
3531: DEC
3532: ST_TO_ADDR
3533: LD_INT 2
3535: PUSH
3536: FOR_TO
3537: IFFALSE 3559
// crates := Delete ( crates , 1 ) ;
3539: LD_ADDR_VAR 0 2
3543: PUSH
3544: LD_VAR 0 2
3548: PPUSH
3549: LD_INT 1
3551: PPUSH
3552: CALL_OW 3
3556: ST_TO_ADDR
3557: GO 3536
3559: POP
3560: POP
// end ;
3561: GO 3036
3563: POP
3564: POP
// end ;
3565: GO 3007
// if mechanic_used then
3567: LD_VAR 0 15
3571: IFFALSE 3668
// begin repeat wait ( 0 0$1 ) ;
3573: LD_INT 35
3575: PPUSH
3576: CALL_OW 67
// until not GetCargo ( collectors , mat_cans ) or not collectors ;
3580: LD_VAR 0 10
3584: PPUSH
3585: LD_INT 1
3587: PPUSH
3588: CALL_OW 289
3592: NOT
3593: PUSH
3594: LD_VAR 0 10
3598: NOT
3599: OR
3600: IFFALSE 3573
// drivers := MCT_ResetTag ( base , mct_collect_crates ) ;
3602: LD_ADDR_VAR 0 13
3606: PUSH
3607: LD_VAR 0 1
3611: PPUSH
3612: LD_EXP 34
3616: PPUSH
3617: CALL 6460 0 2
3621: ST_TO_ADDR
// if drivers then
3622: LD_VAR 0 13
3626: IFFALSE 3654
// for i in drivers do
3628: LD_ADDR_VAR 0 4
3632: PUSH
3633: LD_VAR 0 13
3637: PUSH
3638: FOR_IN
3639: IFFALSE 3652
// ComExit ( i ) ;
3641: LD_VAR 0 4
3645: PPUSH
3646: CALL 44748 0 1
3650: GO 3638
3652: POP
3653: POP
// MCTM_DeleteActiveTask ( base , mctm_collect_crates ) ;
3654: LD_VAR 0 1
3658: PPUSH
3659: LD_EXP 36
3663: PPUSH
3664: CALL 8023 0 2
// end ; end else
3668: GO 4232
// begin apes := MC_GetByClass ( base , class_apeman_engineer , mct_none ) ;
3670: LD_ADDR_VAR 0 8
3674: PUSH
3675: LD_VAR 0 1
3679: PPUSH
3680: LD_INT 16
3682: PPUSH
3683: LD_EXP 31
3687: PPUSH
3688: CALL 7353 0 3
3692: ST_TO_ADDR
// if apes then
3693: LD_VAR 0 8
3697: IFFALSE 3715
// collectors := collectors union apes ;
3699: LD_ADDR_VAR 0 10
3703: PUSH
3704: LD_VAR 0 10
3708: PUSH
3709: LD_VAR 0 8
3713: UNION
3714: ST_TO_ADDR
// engs := MC_GetByClass ( base , class_engineer , mct_none ) ;
3715: LD_ADDR_VAR 0 9
3719: PUSH
3720: LD_VAR 0 1
3724: PPUSH
3725: LD_INT 2
3727: PPUSH
3728: LD_EXP 31
3732: PPUSH
3733: CALL 7353 0 3
3737: ST_TO_ADDR
// if engs then
3738: LD_VAR 0 9
3742: IFFALSE 3760
// collectors := collectors union engs ;
3744: LD_ADDR_VAR 0 10
3748: PUSH
3749: LD_VAR 0 10
3753: PUSH
3754: LD_VAR 0 9
3758: UNION
3759: ST_TO_ADDR
// if not collectors then
3760: LD_VAR 0 10
3764: NOT
3765: IFFALSE 3865
// begin engs := MC_GetBestForClass ( base , 2 , 3 ) ;
3767: LD_ADDR_VAR 0 9
3771: PUSH
3772: LD_VAR 0 1
3776: PPUSH
3777: LD_INT 2
3779: PPUSH
3780: LD_INT 3
3782: PPUSH
3783: CALL 6615 0 3
3787: ST_TO_ADDR
// if engs then
3788: LD_VAR 0 9
3792: IFFALSE 3811
// MC_ChangeClass ( base , 2 , engs ) ;
3794: LD_VAR 0 1
3798: PPUSH
3799: LD_INT 2
3801: PPUSH
3802: LD_VAR 0 9
3806: PPUSH
3807: CALL 6845 0 3
// repeat wait ( 0 0$1 ) ;
3811: LD_INT 35
3813: PPUSH
3814: CALL_OW 67
// if not UnitFilter ( engs , [ f_ok ] ) then
3818: LD_VAR 0 9
3822: PPUSH
3823: LD_INT 50
3825: PUSH
3826: EMPTY
3827: LIST
3828: PPUSH
3829: CALL_OW 72
3833: NOT
3834: IFFALSE 3838
// break ;
3836: GO 3865
// until UnitFilter ( engs , [ f_class , 2 ] ) = engs ;
3838: LD_VAR 0 9
3842: PPUSH
3843: LD_INT 25
3845: PUSH
3846: LD_INT 2
3848: PUSH
3849: EMPTY
3850: LIST
3851: LIST
3852: PPUSH
3853: CALL_OW 72
3857: PUSH
3858: LD_VAR 0 9
3862: EQUAL
3863: IFFALSE 3811
// end ; if not collectors then
3865: LD_VAR 0 10
3869: NOT
3870: IFFALSE 3888
// begin MCTM_DeleteActiveTask ( base , mctm_collect_crates ) ;
3872: LD_VAR 0 1
3876: PPUSH
3877: LD_EXP 36
3881: PPUSH
3882: CALL 8023 0 2
// exit ;
3886: GO 4232
// end ; if collectors > 5 then
3888: LD_VAR 0 10
3892: PUSH
3893: LD_INT 5
3895: GREATER
3896: IFFALSE 3952
// for i := collectors downto 5 do
3898: LD_ADDR_VAR 0 4
3902: PUSH
3903: DOUBLE
3904: LD_VAR 0 10
3908: INC
3909: ST_TO_ADDR
3910: LD_INT 5
3912: PUSH
3913: FOR_DOWNTO
3914: IFFALSE 3950
// begin SetTag ( i , 0 ) ;
3916: LD_VAR 0 4
3920: PPUSH
3921: LD_INT 0
3923: PPUSH
3924: CALL_OW 109
// collectors := Delete ( collectors , i ) ;
3928: LD_ADDR_VAR 0 10
3932: PUSH
3933: LD_VAR 0 10
3937: PPUSH
3938: LD_VAR 0 4
3942: PPUSH
3943: CALL_OW 3
3947: ST_TO_ADDR
// end ;
3948: GO 3913
3950: POP
3951: POP
// ComExitAll ( collectors ) ;
3952: LD_VAR 0 10
3956: PPUSH
3957: CALL 44831 0 1
// MCT_SetTag ( collectors , mct_collect_crates ) ;
3961: LD_VAR 0 10
3965: PPUSH
3966: LD_EXP 34
3970: PPUSH
3971: CALL 6526 0 2
// while crates and collectors do
3975: LD_VAR 0 2
3979: PUSH
3980: LD_VAR 0 10
3984: AND
3985: IFFALSE 4204
// begin wait ( 0 0$1 ) ;
3987: LD_INT 35
3989: PPUSH
3990: CALL_OW 67
// amount := GetResourceAmountXY ( crates [ 1 ] , crates [ 2 ] ) ;
3994: LD_ADDR_VAR 0 6
3998: PUSH
3999: LD_VAR 0 2
4003: PUSH
4004: LD_INT 1
4006: ARRAY
4007: PPUSH
4008: LD_VAR 0 2
4012: PUSH
4013: LD_INT 2
4015: ARRAY
4016: PPUSH
4017: CALL_OW 284
4021: ST_TO_ADDR
// j := 0 ;
4022: LD_ADDR_VAR 0 5
4026: PUSH
4027: LD_INT 0
4029: ST_TO_ADDR
// for i in collectors do
4030: LD_ADDR_VAR 0 4
4034: PUSH
4035: LD_VAR 0 10
4039: PUSH
4040: FOR_IN
4041: IFFALSE 4137
// begin if IsDead ( i ) then
4043: LD_VAR 0 4
4047: PPUSH
4048: CALL_OW 301
4052: IFFALSE 4070
// collectors := collectors diff i ;
4054: LD_ADDR_VAR 0 10
4058: PUSH
4059: LD_VAR 0 10
4063: PUSH
4064: LD_VAR 0 4
4068: DIFF
4069: ST_TO_ADDR
// if j < amount and not HasTask ( i ) then
4070: LD_VAR 0 5
4074: PUSH
4075: LD_VAR 0 6
4079: LESS
4080: PUSH
4081: LD_VAR 0 4
4085: PPUSH
4086: CALL_OW 314
4090: NOT
4091: AND
4092: IFFALSE 4135
// begin j := j + 1 ;
4094: LD_ADDR_VAR 0 5
4098: PUSH
4099: LD_VAR 0 5
4103: PUSH
4104: LD_INT 1
4106: PLUS
4107: ST_TO_ADDR
// ComCollect ( i , crates [ 1 ] , crates [ 2 ] ) ;
4108: LD_VAR 0 4
4112: PPUSH
4113: LD_VAR 0 2
4117: PUSH
4118: LD_INT 1
4120: ARRAY
4121: PPUSH
4122: LD_VAR 0 2
4126: PUSH
4127: LD_INT 2
4129: ARRAY
4130: PPUSH
4131: CALL_OW 117
// end ; end ;
4135: GO 4040
4137: POP
4138: POP
// if not GetResourceAmountXY ( crates [ 1 ] , crates [ 2 ] ) then
4139: LD_VAR 0 2
4143: PUSH
4144: LD_INT 1
4146: ARRAY
4147: PPUSH
4148: LD_VAR 0 2
4152: PUSH
4153: LD_INT 2
4155: ARRAY
4156: PPUSH
4157: CALL_OW 284
4161: NOT
4162: IFFALSE 4202
// for j := 1 to 2 do
4164: LD_ADDR_VAR 0 5
4168: PUSH
4169: DOUBLE
4170: LD_INT 1
4172: DEC
4173: ST_TO_ADDR
4174: LD_INT 2
4176: PUSH
4177: FOR_TO
4178: IFFALSE 4200
// crates := Delete ( crates , 1 ) ;
4180: LD_ADDR_VAR 0 2
4184: PUSH
4185: LD_VAR 0 2
4189: PPUSH
4190: LD_INT 1
4192: PPUSH
4193: CALL_OW 3
4197: ST_TO_ADDR
4198: GO 4177
4200: POP
4201: POP
// end ;
4202: GO 3975
// MCT_ResetTag ( base , mct_collect_crates ) ;
4204: LD_VAR 0 1
4208: PPUSH
4209: LD_EXP 34
4213: PPUSH
4214: CALL 6460 0 2
// MCTM_DeleteActiveTask ( base , mctm_collect_crates ) ;
4218: LD_VAR 0 1
4222: PPUSH
4223: LD_EXP 36
4227: PPUSH
4228: CALL 8023 0 2
// end ; end ;
4232: LD_VAR 0 3
4236: RET
// export function MC_Build ( base ) ; var depot , btype , x , y , d , engs ; begin
4237: LD_INT 0
4239: PPUSH
4240: PPUSH
4241: PPUSH
4242: PPUSH
4243: PPUSH
4244: PPUSH
4245: PPUSH
// if MCTM_HasActiveTask ( base , mctm_build ) or not mc_build_list [ base ] or not MC_GetDepot ( base ) then
4246: LD_VAR 0 1
4250: PPUSH
4251: LD_EXP 37
4255: PPUSH
4256: CALL 7929 0 2
4260: PUSH
4261: LD_EXP 14
4265: PUSH
4266: LD_VAR 0 1
4270: ARRAY
4271: NOT
4272: OR
4273: PUSH
4274: LD_VAR 0 1
4278: PPUSH
4279: CALL 7550 0 1
4283: NOT
4284: OR
4285: IFFALSE 4289
// exit ;
4287: GO 4840
// MCTM_SetActiveTask ( base , mctm_build ) ;
4289: LD_VAR 0 1
4293: PPUSH
4294: LD_EXP 37
4298: PPUSH
4299: CALL 7959 0 2
// engs := MC_GetByClass ( base , 2 , mct_none ) ;
4303: LD_ADDR_VAR 0 8
4307: PUSH
4308: LD_VAR 0 1
4312: PPUSH
4313: LD_INT 2
4315: PPUSH
4316: LD_EXP 31
4320: PPUSH
4321: CALL 7353 0 3
4325: ST_TO_ADDR
// if not engs then
4326: LD_VAR 0 8
4330: NOT
4331: IFFALSE 4443
// begin engs := MC_GetBestForClass ( base , 2 , 6 ) ;
4333: LD_ADDR_VAR 0 8
4337: PUSH
4338: LD_VAR 0 1
4342: PPUSH
4343: LD_INT 2
4345: PPUSH
4346: LD_INT 6
4348: PPUSH
4349: CALL 6615 0 3
4353: ST_TO_ADDR
// if not engs then
4354: LD_VAR 0 8
4358: NOT
4359: IFFALSE 4377
// begin MCTM_DeleteActiveTask ( base , mctm_build ) ;
4361: LD_VAR 0 1
4365: PPUSH
4366: LD_EXP 37
4370: PPUSH
4371: CALL 8023 0 2
// exit ;
4375: GO 4840
// end ; MC_ChangeClass ( base , 2 , engs ) ;
4377: LD_VAR 0 1
4381: PPUSH
4382: LD_INT 2
4384: PPUSH
4385: LD_VAR 0 8
4389: PPUSH
4390: CALL 6845 0 3
// repeat wait ( 0 0$1 ) ;
4394: LD_INT 35
4396: PPUSH
4397: CALL_OW 67
// if not mc_people [ base ] then
4401: LD_EXP 9
4405: PUSH
4406: LD_VAR 0 1
4410: ARRAY
4411: NOT
4412: IFFALSE 4416
// exit ;
4414: GO 4840
// until UnitFilter ( engs , [ f_class , 2 ] ) = engs ;
4416: LD_VAR 0 8
4420: PPUSH
4421: LD_INT 25
4423: PUSH
4424: LD_INT 2
4426: PUSH
4427: EMPTY
4428: LIST
4429: LIST
4430: PPUSH
4431: CALL_OW 72
4435: PUSH
4436: LD_VAR 0 8
4440: EQUAL
4441: IFFALSE 4394
// end ; ComExitAll ( engs ) ;
4443: LD_VAR 0 8
4447: PPUSH
4448: CALL 44831 0 1
// MCT_SetTag ( engs , mct_build ) ;
4452: LD_VAR 0 8
4456: PPUSH
4457: LD_EXP 33
4461: PPUSH
4462: CALL 6526 0 2
// btype := mc_build_list [ base ] [ 1 ] [ 1 ] ;
4466: LD_ADDR_VAR 0 4
4470: PUSH
4471: LD_EXP 14
4475: PUSH
4476: LD_VAR 0 1
4480: ARRAY
4481: PUSH
4482: LD_INT 1
4484: ARRAY
4485: PUSH
4486: LD_INT 1
4488: ARRAY
4489: ST_TO_ADDR
// x := mc_build_list [ base ] [ 1 ] [ 2 ] ;
4490: LD_ADDR_VAR 0 5
4494: PUSH
4495: LD_EXP 14
4499: PUSH
4500: LD_VAR 0 1
4504: ARRAY
4505: PUSH
4506: LD_INT 1
4508: ARRAY
4509: PUSH
4510: LD_INT 2
4512: ARRAY
4513: ST_TO_ADDR
// y := mc_build_list [ base ] [ 1 ] [ 3 ] ;
4514: LD_ADDR_VAR 0 6
4518: PUSH
4519: LD_EXP 14
4523: PUSH
4524: LD_VAR 0 1
4528: ARRAY
4529: PUSH
4530: LD_INT 1
4532: ARRAY
4533: PUSH
4534: LD_INT 3
4536: ARRAY
4537: ST_TO_ADDR
// d := mc_build_list [ base ] [ 1 ] [ 4 ] ;
4538: LD_ADDR_VAR 0 7
4542: PUSH
4543: LD_EXP 14
4547: PUSH
4548: LD_VAR 0 1
4552: ARRAY
4553: PUSH
4554: LD_INT 1
4556: ARRAY
4557: PUSH
4558: LD_INT 4
4560: ARRAY
4561: ST_TO_ADDR
// if GetType ( HexInfo ( x , y ) ) = unit_building then
4562: LD_VAR 0 5
4566: PPUSH
4567: LD_VAR 0 6
4571: PPUSH
4572: CALL_OW 428
4576: PPUSH
4577: CALL_OW 247
4581: PUSH
4582: LD_INT 3
4584: EQUAL
4585: IFFALSE 4620
// begin wait ( 0 0$1 ) ;
4587: LD_INT 35
4589: PPUSH
4590: CALL_OW 67
// ComComplete ( engs , HexInfo ( x , y ) ) ;
4594: LD_VAR 0 8
4598: PPUSH
4599: LD_VAR 0 5
4603: PPUSH
4604: LD_VAR 0 6
4608: PPUSH
4609: CALL_OW 428
4613: PPUSH
4614: CALL 15871 0 2
// end else
4618: GO 4840
// begin depot := NearestUnitToXY ( MC_GetDepot ( base ) , x , y ) ;
4620: LD_ADDR_VAR 0 3
4624: PUSH
4625: LD_VAR 0 1
4629: PPUSH
4630: CALL 7550 0 1
4634: PPUSH
4635: LD_VAR 0 5
4639: PPUSH
4640: LD_VAR 0 6
4644: PPUSH
4645: CALL_OW 73
4649: ST_TO_ADDR
// if not HexInfo ( x , y ) and CanBeBuilt ( depot , btype , x , y , d ) then
4650: LD_VAR 0 5
4654: PPUSH
4655: LD_VAR 0 6
4659: PPUSH
4660: CALL_OW 428
4664: NOT
4665: PUSH
4666: LD_VAR 0 3
4670: PPUSH
4671: LD_VAR 0 4
4675: PPUSH
4676: LD_VAR 0 5
4680: PPUSH
4681: LD_VAR 0 6
4685: PPUSH
4686: LD_VAR 0 7
4690: PPUSH
4691: CALL 20732 0 5
4695: AND
4696: IFFALSE 4729
// ComBuild ( engs , btype , x , y , d ) else
4698: LD_VAR 0 8
4702: PPUSH
4703: LD_VAR 0 4
4707: PPUSH
4708: LD_VAR 0 5
4712: PPUSH
4713: LD_VAR 0 6
4717: PPUSH
4718: LD_VAR 0 7
4722: PPUSH
4723: CALL_OW 145
4727: GO 4840
// begin if GetType ( HexInfo ( x , y ) ) <> unit_building then
4729: LD_VAR 0 5
4733: PPUSH
4734: LD_VAR 0 6
4738: PPUSH
4739: CALL_OW 428
4743: PPUSH
4744: CALL_OW 247
4748: PUSH
4749: LD_INT 3
4751: NONEQUAL
4752: IFFALSE 4812
// begin TryClearPlaceForBuilding ( btype , x , y , d , mc_buildings [ base ] , engs , mc_parking [ base ] ) ;
4754: LD_VAR 0 4
4758: PPUSH
4759: LD_VAR 0 5
4763: PPUSH
4764: LD_VAR 0 6
4768: PPUSH
4769: LD_VAR 0 7
4773: PPUSH
4774: LD_EXP 10
4778: PUSH
4779: LD_VAR 0 1
4783: ARRAY
4784: PPUSH
4785: LD_VAR 0 8
4789: PPUSH
4790: LD_EXP 28
4794: PUSH
4795: LD_VAR 0 1
4799: ARRAY
4800: PPUSH
4801: CALL 19862 0 7
// wait ( 0 0$10 ) ;
4805: LD_INT 350
4807: PPUSH
4808: CALL_OW 67
// end ; MCTM_DeleteActiveTask ( base , mctm_build ) ;
4812: LD_VAR 0 1
4816: PPUSH
4817: LD_EXP 37
4821: PPUSH
4822: CALL 8023 0 2
// MCT_ResetTag ( base , mctm_build ) ;
4826: LD_VAR 0 1
4830: PPUSH
4831: LD_EXP 37
4835: PPUSH
4836: CALL 6460 0 2
// end ; end ; end ; end_of_file
4840: LD_VAR 0 2
4844: RET
// export mce_start , mce_monitor_base , mce_ ; export function MCE_InitEvents ( ) ; begin
4845: LD_INT 0
4847: PPUSH
// mce_start := 1 ;
4848: LD_ADDR_EXP 1
4852: PUSH
4853: LD_INT 1
4855: ST_TO_ADDR
// mce_monitor_base := 2 ;
4856: LD_ADDR_EXP 2
4860: PUSH
4861: LD_INT 2
4863: ST_TO_ADDR
// end ;
4864: LD_VAR 0 1
4868: RET
// export function MCE_SailEventCustom ( event , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
4869: LD_INT 0
4871: PPUSH
// case event of mce_start :
4872: LD_VAR 0 1
4876: PUSH
4877: LD_EXP 1
4881: DOUBLE
4882: EQUAL
4883: IFTRUE 4887
4885: GO 4894
4887: POP
// MC_Monitor ( ) ; mce_monitor_base :
4888: CALL 2539 0 0
4892: GO 4917
4894: LD_EXP 2
4898: DOUBLE
4899: EQUAL
4900: IFTRUE 4904
4902: GO 4916
4904: POP
// MC_MonitorBase ( p1 ) ; end ;
4905: LD_VAR 0 2
4909: PPUSH
4910: CALL 2663 0 1
4914: GO 4917
4916: POP
// end ;
4917: LD_VAR 0 8
4921: RET
// export function MCE_ClassChanged ( unit , old_class , new_class ) ; begin
4922: LD_INT 0
4924: PPUSH
// SetTag ( unit , mct_none ) ;
4925: LD_VAR 0 1
4929: PPUSH
4930: LD_EXP 31
4934: PPUSH
4935: CALL_OW 109
// end ;
4939: LD_VAR 0 4
4943: RET
// export function MCE_UnitDestroyed ( un ) ; begin
4944: LD_INT 0
4946: PPUSH
// case GetType ( un ) of unit_human :
4947: LD_VAR 0 1
4951: PPUSH
4952: CALL_OW 247
4956: PUSH
4957: LD_INT 1
4959: DOUBLE
4960: EQUAL
4961: IFTRUE 4965
4963: GO 4977
4965: POP
// MCE_HumanKilled ( un ) ; unit_building :
4966: LD_VAR 0 1
4970: PPUSH
4971: CALL 5003 0 1
4975: GO 4998
4977: LD_INT 3
4979: DOUBLE
4980: EQUAL
4981: IFTRUE 4985
4983: GO 4997
4985: POP
// MCE_BuildingDestroyed ( un ) ; end ;
4986: LD_VAR 0 1
4990: PPUSH
4991: CALL 5560 0 1
4995: GO 4998
4997: POP
// end ;
4998: LD_VAR 0 2
5002: RET
// export function MCE_HumanKilled ( un ) ; var i ; begin
5003: LD_INT 0
5005: PPUSH
5006: PPUSH
// for i := 1 to mc_people do
5007: LD_ADDR_VAR 0 3
5011: PUSH
5012: DOUBLE
5013: LD_INT 1
5015: DEC
5016: ST_TO_ADDR
5017: LD_EXP 9
5021: PUSH
5022: FOR_TO
5023: IFFALSE 5082
// if un in mc_people [ i ] then
5025: LD_VAR 0 1
5029: PUSH
5030: LD_EXP 9
5034: PUSH
5035: LD_VAR 0 3
5039: ARRAY
5040: IN
5041: IFFALSE 5080
// mc_people := Replace ( mc_people , i , mc_people [ i ] diff un ) ;
5043: LD_ADDR_EXP 9
5047: PUSH
5048: LD_EXP 9
5052: PPUSH
5053: LD_VAR 0 3
5057: PPUSH
5058: LD_EXP 9
5062: PUSH
5063: LD_VAR 0 3
5067: ARRAY
5068: PUSH
5069: LD_VAR 0 1
5073: DIFF
5074: PPUSH
5075: CALL_OW 1
5079: ST_TO_ADDR
5080: GO 5022
5082: POP
5083: POP
// end ;
5084: LD_VAR 0 2
5088: RET
// export function MCE_EvacuateVehicle ( driver , vehicle , p1 , p2 ) ; var base ; begin
5089: LD_INT 0
5091: PPUSH
5092: PPUSH
// if GetTag ( driver ) = mct_collect_crates then
5093: LD_VAR 0 1
5097: PPUSH
5098: CALL_OW 110
5102: PUSH
5103: LD_EXP 34
5107: EQUAL
5108: IFFALSE 5157
// begin base := MC_GetHumanBase ( driver ) ;
5110: LD_ADDR_VAR 0 6
5114: PUSH
5115: LD_VAR 0 1
5119: PPUSH
5120: CALL 6782 0 1
5124: ST_TO_ADDR
// if base then
5125: LD_VAR 0 6
5129: IFFALSE 5157
// begin SetTag ( driver , 0 ) ;
5131: LD_VAR 0 1
5135: PPUSH
5136: LD_INT 0
5138: PPUSH
5139: CALL_OW 109
// MC_Retreat ( base , driver ) ;
5143: LD_VAR 0 6
5147: PPUSH
5148: LD_VAR 0 1
5152: PPUSH
5153: CALL 7813 0 2
// end ; end ; end ;
5157: LD_VAR 0 5
5161: RET
// export function MCE_BuildingComplete ( building ) ; var base , btype , x , y , d ; begin
5162: LD_INT 0
5164: PPUSH
5165: PPUSH
5166: PPUSH
5167: PPUSH
5168: PPUSH
5169: PPUSH
// btype := GetBType ( building ) ;
5170: LD_ADDR_VAR 0 4
5174: PUSH
5175: LD_VAR 0 1
5179: PPUSH
5180: CALL_OW 266
5184: ST_TO_ADDR
// x := GetX ( building ) ;
5185: LD_ADDR_VAR 0 5
5189: PUSH
5190: LD_VAR 0 1
5194: PPUSH
5195: CALL_OW 250
5199: ST_TO_ADDR
// y := GetY ( building ) ;
5200: LD_ADDR_VAR 0 6
5204: PUSH
5205: LD_VAR 0 1
5209: PPUSH
5210: CALL_OW 251
5214: ST_TO_ADDR
// d := GetDir ( building ) ;
5215: LD_ADDR_VAR 0 7
5219: PUSH
5220: LD_VAR 0 1
5224: PPUSH
5225: CALL_OW 254
5229: ST_TO_ADDR
// for base = 1 to mc_build_list do
5230: LD_ADDR_VAR 0 3
5234: PUSH
5235: DOUBLE
5236: LD_INT 1
5238: DEC
5239: ST_TO_ADDR
5240: LD_EXP 14
5244: PUSH
5245: FOR_TO
5246: IFFALSE 5553
// begin if not mc_build_list [ base ] then
5248: LD_EXP 14
5252: PUSH
5253: LD_VAR 0 3
5257: ARRAY
5258: NOT
5259: IFFALSE 5263
// continue ;
5261: GO 5245
// if CompareArrayValues ( [ btype , x , y , d ] , mc_build_list [ base ] [ 1 ] ) and GetSide ( building ) = mc_bases [ base ] then
5263: LD_VAR 0 4
5267: PUSH
5268: LD_VAR 0 5
5272: PUSH
5273: LD_VAR 0 6
5277: PUSH
5278: LD_VAR 0 7
5282: PUSH
5283: EMPTY
5284: LIST
5285: LIST
5286: LIST
5287: LIST
5288: PPUSH
5289: LD_EXP 14
5293: PUSH
5294: LD_VAR 0 3
5298: ARRAY
5299: PUSH
5300: LD_INT 1
5302: ARRAY
5303: PPUSH
5304: CALL 19286 0 2
5308: PUSH
5309: LD_VAR 0 1
5313: PPUSH
5314: CALL_OW 255
5318: PUSH
5319: LD_EXP 6
5323: PUSH
5324: LD_VAR 0 3
5328: ARRAY
5329: EQUAL
5330: AND
5331: IFFALSE 5551
// begin if mc_build_list [ base ] [ 1 ] > 4 then
5333: LD_EXP 14
5337: PUSH
5338: LD_VAR 0 3
5342: ARRAY
5343: PUSH
5344: LD_INT 1
5346: ARRAY
5347: PUSH
5348: LD_INT 4
5350: GREATER
5351: IFFALSE 5424
// begin repeat wait ( 0 0$1 ) ;
5353: LD_INT 35
5355: PPUSH
5356: CALL_OW 67
// until not UpgradeCost ( mc_build_list [ base ] [ 1 ] [ 5 ] ) or not IsDead ( building ) ;
5360: LD_EXP 14
5364: PUSH
5365: LD_VAR 0 3
5369: ARRAY
5370: PUSH
5371: LD_INT 1
5373: ARRAY
5374: PUSH
5375: LD_INT 5
5377: ARRAY
5378: PPUSH
5379: CALL 19522 0 1
5383: NOT
5384: PUSH
5385: LD_VAR 0 1
5389: PPUSH
5390: CALL_OW 301
5394: NOT
5395: OR
5396: IFFALSE 5353
// if IsDead ( building ) then
5398: LD_VAR 0 1
5402: PPUSH
5403: CALL_OW 301
5407: IFFALSE 5413
// exit ;
5409: POP
5410: POP
5411: GO 5555
// ComUpgrade ( building ) ;
5413: LD_VAR 0 1
5417: PPUSH
5418: CALL_OW 146
// end else
5422: GO 5463
// mc_build_list := Replace ( mc_build_list , base , Delete ( mc_build_list [ base ] , 1 ) ) ;
5424: LD_ADDR_EXP 14
5428: PUSH
5429: LD_EXP 14
5433: PPUSH
5434: LD_VAR 0 3
5438: PPUSH
5439: LD_EXP 14
5443: PUSH
5444: LD_VAR 0 3
5448: ARRAY
5449: PPUSH
5450: LD_INT 1
5452: PPUSH
5453: CALL_OW 3
5457: PPUSH
5458: CALL_OW 1
5462: ST_TO_ADDR
// mc_buildings := Replace ( mc_buildings , base , Replace ( mc_buildings [ base ] , mc_buildings [ base ] + 1 , building ) ) ;
5463: LD_ADDR_EXP 10
5467: PUSH
5468: LD_EXP 10
5472: PPUSH
5473: LD_VAR 0 3
5477: PPUSH
5478: LD_EXP 10
5482: PUSH
5483: LD_VAR 0 3
5487: ARRAY
5488: PPUSH
5489: LD_EXP 10
5493: PUSH
5494: LD_VAR 0 3
5498: ARRAY
5499: PUSH
5500: LD_INT 1
5502: PLUS
5503: PPUSH
5504: LD_VAR 0 1
5508: PPUSH
5509: CALL_OW 1
5513: PPUSH
5514: CALL_OW 1
5518: ST_TO_ADDR
// MCTM_DeleteActiveTask ( base , mctm_build ) ;
5519: LD_VAR 0 3
5523: PPUSH
5524: LD_EXP 37
5528: PPUSH
5529: CALL 8023 0 2
// MCT_ResetTag ( base , mctm_build ) ;
5533: LD_VAR 0 3
5537: PPUSH
5538: LD_EXP 37
5542: PPUSH
5543: CALL 6460 0 2
// exit ;
5547: POP
5548: POP
5549: GO 5555
// end ; end ;
5551: GO 5245
5553: POP
5554: POP
// end ;
5555: LD_VAR 0 2
5559: RET
// export function MCE_BuildingDestroyed ( building ) ; var base , x , y , d , btype ; begin
5560: LD_INT 0
5562: PPUSH
5563: PPUSH
5564: PPUSH
5565: PPUSH
5566: PPUSH
5567: PPUSH
// btype := GetBType ( building ) ;
5568: LD_ADDR_VAR 0 7
5572: PUSH
5573: LD_VAR 0 1
5577: PPUSH
5578: CALL_OW 266
5582: ST_TO_ADDR
// x := GetX ( building ) ;
5583: LD_ADDR_VAR 0 4
5587: PUSH
5588: LD_VAR 0 1
5592: PPUSH
5593: CALL_OW 250
5597: ST_TO_ADDR
// y := GetY ( building ) ;
5598: LD_ADDR_VAR 0 5
5602: PUSH
5603: LD_VAR 0 1
5607: PPUSH
5608: CALL_OW 251
5612: ST_TO_ADDR
// d := GetDir ( building ) ;
5613: LD_ADDR_VAR 0 6
5617: PUSH
5618: LD_VAR 0 1
5622: PPUSH
5623: CALL_OW 254
5627: ST_TO_ADDR
// for base := 1 to mc_buildings do
5628: LD_ADDR_VAR 0 3
5632: PUSH
5633: DOUBLE
5634: LD_INT 1
5636: DEC
5637: ST_TO_ADDR
5638: LD_EXP 10
5642: PUSH
5643: FOR_TO
5644: IFFALSE 5874
// begin if not mc_buildings [ base ] then
5646: LD_EXP 10
5650: PUSH
5651: LD_VAR 0 3
5655: ARRAY
5656: NOT
5657: IFFALSE 5661
// continue ;
5659: GO 5643
// if building in mc_buildings [ base ] then
5661: LD_VAR 0 1
5665: PUSH
5666: LD_EXP 10
5670: PUSH
5671: LD_VAR 0 3
5675: ARRAY
5676: IN
5677: IFFALSE 5872
// begin mc_buildings := Replace ( mc_buildings , base , mc_buildings [ base ] diff building ) ;
5679: LD_ADDR_EXP 10
5683: PUSH
5684: LD_EXP 10
5688: PPUSH
5689: LD_VAR 0 3
5693: PPUSH
5694: LD_EXP 10
5698: PUSH
5699: LD_VAR 0 3
5703: ARRAY
5704: PUSH
5705: LD_VAR 0 1
5709: DIFF
5710: PPUSH
5711: CALL_OW 1
5715: ST_TO_ADDR
// if mc_build_list [ base ] then
5716: LD_EXP 14
5720: PUSH
5721: LD_VAR 0 3
5725: ARRAY
5726: IFFALSE 5810
// if mc_build_list [ base ] [ 1 ] [ 1 ] = btype and mc_build_list [ base ] [ 1 ] [ 2 ] = x and mc_build_list [ base ] [ 1 ] [ 3 ] = y then
5728: LD_EXP 14
5732: PUSH
5733: LD_VAR 0 3
5737: ARRAY
5738: PUSH
5739: LD_INT 1
5741: ARRAY
5742: PUSH
5743: LD_INT 1
5745: ARRAY
5746: PUSH
5747: LD_VAR 0 7
5751: EQUAL
5752: PUSH
5753: LD_EXP 14
5757: PUSH
5758: LD_VAR 0 3
5762: ARRAY
5763: PUSH
5764: LD_INT 1
5766: ARRAY
5767: PUSH
5768: LD_INT 2
5770: ARRAY
5771: PUSH
5772: LD_VAR 0 4
5776: EQUAL
5777: AND
5778: PUSH
5779: LD_EXP 14
5783: PUSH
5784: LD_VAR 0 3
5788: ARRAY
5789: PUSH
5790: LD_INT 1
5792: ARRAY
5793: PUSH
5794: LD_INT 3
5796: ARRAY
5797: PUSH
5798: LD_VAR 0 5
5802: EQUAL
5803: AND
5804: IFFALSE 5810
// exit ;
5806: POP
5807: POP
5808: GO 5876
// mc_build_list := Replace ( mc_build_list , base , mc_build_list [ base ] ^ [ btype , x , y , d ] ) ;
5810: LD_ADDR_EXP 14
5814: PUSH
5815: LD_EXP 14
5819: PPUSH
5820: LD_VAR 0 3
5824: PPUSH
5825: LD_EXP 14
5829: PUSH
5830: LD_VAR 0 3
5834: ARRAY
5835: PUSH
5836: LD_VAR 0 7
5840: PUSH
5841: LD_VAR 0 4
5845: PUSH
5846: LD_VAR 0 5
5850: PUSH
5851: LD_VAR 0 6
5855: PUSH
5856: EMPTY
5857: LIST
5858: LIST
5859: LIST
5860: LIST
5861: ADD
5862: PPUSH
5863: CALL_OW 1
5867: ST_TO_ADDR
// exit ;
5868: POP
5869: POP
5870: GO 5876
// end ; end ;
5872: GO 5643
5874: POP
5875: POP
// end ;
5876: LD_VAR 0 2
5880: RET
// export function MCE_BuildingUpgradeComplete ( building ) ; var base , btype , x , y , d ; begin
5881: LD_INT 0
5883: PPUSH
5884: PPUSH
5885: PPUSH
5886: PPUSH
5887: PPUSH
5888: PPUSH
// btype := GetBType ( building ) ;
5889: LD_ADDR_VAR 0 4
5893: PUSH
5894: LD_VAR 0 1
5898: PPUSH
5899: CALL_OW 266
5903: ST_TO_ADDR
// x := GetX ( building ) ;
5904: LD_ADDR_VAR 0 5
5908: PUSH
5909: LD_VAR 0 1
5913: PPUSH
5914: CALL_OW 250
5918: ST_TO_ADDR
// y := GetY ( building ) ;
5919: LD_ADDR_VAR 0 6
5923: PUSH
5924: LD_VAR 0 1
5928: PPUSH
5929: CALL_OW 251
5933: ST_TO_ADDR
// d := GetDir ( building ) ;
5934: LD_ADDR_VAR 0 7
5938: PUSH
5939: LD_VAR 0 1
5943: PPUSH
5944: CALL_OW 254
5948: ST_TO_ADDR
// for base = 1 to mc_build_list do
5949: LD_ADDR_VAR 0 3
5953: PUSH
5954: DOUBLE
5955: LD_INT 1
5957: DEC
5958: ST_TO_ADDR
5959: LD_EXP 14
5963: PUSH
5964: FOR_TO
5965: IFFALSE 6135
// begin if not mc_build_list [ base ] then
5967: LD_EXP 14
5971: PUSH
5972: LD_VAR 0 3
5976: ARRAY
5977: NOT
5978: IFFALSE 5982
// continue ;
5980: GO 5964
// if CompareArrayValues ( [ btype - 1 , x , y , d , btype ] , mc_build_list [ base ] [ 1 ] ) and GetSide ( building ) = mc_bases [ base ] then
5982: LD_VAR 0 4
5986: PUSH
5987: LD_INT 1
5989: MINUS
5990: PUSH
5991: LD_VAR 0 5
5995: PUSH
5996: LD_VAR 0 6
6000: PUSH
6001: LD_VAR 0 7
6005: PUSH
6006: LD_VAR 0 4
6010: PUSH
6011: EMPTY
6012: LIST
6013: LIST
6014: LIST
6015: LIST
6016: LIST
6017: PPUSH
6018: LD_EXP 14
6022: PUSH
6023: LD_VAR 0 3
6027: ARRAY
6028: PUSH
6029: LD_INT 1
6031: ARRAY
6032: PPUSH
6033: CALL 19286 0 2
6037: PUSH
6038: LD_VAR 0 1
6042: PPUSH
6043: CALL_OW 255
6047: PUSH
6048: LD_EXP 6
6052: PUSH
6053: LD_VAR 0 3
6057: ARRAY
6058: EQUAL
6059: AND
6060: IFFALSE 6133
// begin mc_build_list := Replace ( mc_build_list , base , Delete ( mc_build_list [ base ] , 1 ) ) ;
6062: LD_ADDR_EXP 14
6066: PUSH
6067: LD_EXP 14
6071: PPUSH
6072: LD_VAR 0 3
6076: PPUSH
6077: LD_EXP 14
6081: PUSH
6082: LD_VAR 0 3
6086: ARRAY
6087: PPUSH
6088: LD_INT 1
6090: PPUSH
6091: CALL_OW 3
6095: PPUSH
6096: CALL_OW 1
6100: ST_TO_ADDR
// MCTM_DeleteActiveTask ( base , mctm_build ) ;
6101: LD_VAR 0 3
6105: PPUSH
6106: LD_EXP 37
6110: PPUSH
6111: CALL 8023 0 2
// MCT_ResetTag ( base , mctm_build ) ;
6115: LD_VAR 0 3
6119: PPUSH
6120: LD_EXP 37
6124: PPUSH
6125: CALL 6460 0 2
// exit ;
6129: POP
6130: POP
6131: GO 6137
// end ; end ;
6133: GO 5964
6135: POP
6136: POP
// end ; end_of_file
6137: LD_VAR 0 2
6141: RET
// export mc_active , mc_debug , mc_bases , mc_tag , mc_task , mc_people , mc_buildings , mc_vehicles , mc_mines , mc_minefields , mc_build_list , mc_produce_list , mc_defense_status , mc_defender , mc_defender_limit , mc_ape , mc_tech , mc_attack , mc_deposits_xy , mc_can_tame , mc_lab_upgrade , mc_crates_area , mc_teleport_exit , mc_allowed_tower_weapons , mc_parking , mc_scan_area , mc_danger ; export function MC_InitVariables ( ) ; begin
6142: LD_INT 0
6144: PPUSH
// mc_bases := [ ] ;
6145: LD_ADDR_EXP 6
6149: PUSH
6150: EMPTY
6151: ST_TO_ADDR
// mc_tag := [ ] ;
6152: LD_ADDR_EXP 7
6156: PUSH
6157: EMPTY
6158: ST_TO_ADDR
// mc_task := [ ] ;
6159: LD_ADDR_EXP 8
6163: PUSH
6164: EMPTY
6165: ST_TO_ADDR
// mc_people := [ ] ;
6166: LD_ADDR_EXP 9
6170: PUSH
6171: EMPTY
6172: ST_TO_ADDR
// mc_buildings := [ ] ;
6173: LD_ADDR_EXP 10
6177: PUSH
6178: EMPTY
6179: ST_TO_ADDR
// mc_vehicles := [ ] ;
6180: LD_ADDR_EXP 11
6184: PUSH
6185: EMPTY
6186: ST_TO_ADDR
// mc_mines := [ ] ;
6187: LD_ADDR_EXP 12
6191: PUSH
6192: EMPTY
6193: ST_TO_ADDR
// mc_minefields := [ ] ;
6194: LD_ADDR_EXP 13
6198: PUSH
6199: EMPTY
6200: ST_TO_ADDR
// mc_build_list := [ ] ;
6201: LD_ADDR_EXP 14
6205: PUSH
6206: EMPTY
6207: ST_TO_ADDR
// mc_produce_list := [ ] ;
6208: LD_ADDR_EXP 15
6212: PUSH
6213: EMPTY
6214: ST_TO_ADDR
// mc_defense_status := [ ] ;
6215: LD_ADDR_EXP 16
6219: PUSH
6220: EMPTY
6221: ST_TO_ADDR
// mc_defender := [ ] ;
6222: LD_ADDR_EXP 17
6226: PUSH
6227: EMPTY
6228: ST_TO_ADDR
// mc_defender_limit := [ ] ;
6229: LD_ADDR_EXP 18
6233: PUSH
6234: EMPTY
6235: ST_TO_ADDR
// mc_ape := [ ] ;
6236: LD_ADDR_EXP 19
6240: PUSH
6241: EMPTY
6242: ST_TO_ADDR
// mc_tech := [ ] ;
6243: LD_ADDR_EXP 20
6247: PUSH
6248: EMPTY
6249: ST_TO_ADDR
// mc_attack := [ ] ;
6250: LD_ADDR_EXP 21
6254: PUSH
6255: EMPTY
6256: ST_TO_ADDR
// mc_deposits_xy := [ ] ;
6257: LD_ADDR_EXP 22
6261: PUSH
6262: EMPTY
6263: ST_TO_ADDR
// mc_can_tame := [ ] ;
6264: LD_ADDR_EXP 23
6268: PUSH
6269: EMPTY
6270: ST_TO_ADDR
// mc_crates_area := [ ] ;
6271: LD_ADDR_EXP 25
6275: PUSH
6276: EMPTY
6277: ST_TO_ADDR
// mc_teleport_exit := [ ] ;
6278: LD_ADDR_EXP 26
6282: PUSH
6283: EMPTY
6284: ST_TO_ADDR
// mc_allowed_tower_weapons := [ ] ;
6285: LD_ADDR_EXP 27
6289: PUSH
6290: EMPTY
6291: ST_TO_ADDR
// mc_parking := [ ] ;
6292: LD_ADDR_EXP 28
6296: PUSH
6297: EMPTY
6298: ST_TO_ADDR
// mc_scan_area := [ ] ;
6299: LD_ADDR_EXP 29
6303: PUSH
6304: EMPTY
6305: ST_TO_ADDR
// mc_danger := [ ] ;
6306: LD_ADDR_EXP 30
6310: PUSH
6311: EMPTY
6312: ST_TO_ADDR
// end ; end_of_file
6313: LD_VAR 0 1
6317: RET
// export mct_none , mct_change_class , mct_build , mct_collect_crates , mct_heal ; export function MCT_InitTags ; begin
6318: LD_INT 0
6320: PPUSH
// mct_none := 0 ;
6321: LD_ADDR_EXP 31
6325: PUSH
6326: LD_INT 0
6328: ST_TO_ADDR
// mct_change_class := 1 ;
6329: LD_ADDR_EXP 32
6333: PUSH
6334: LD_INT 1
6336: ST_TO_ADDR
// mct_build := 2 ;
6337: LD_ADDR_EXP 33
6341: PUSH
6342: LD_INT 2
6344: ST_TO_ADDR
// mct_collect_crates := 3 ;
6345: LD_ADDR_EXP 34
6349: PUSH
6350: LD_INT 3
6352: ST_TO_ADDR
// mct_heal := 4 ;
6353: LD_ADDR_EXP 35
6357: PUSH
6358: LD_INT 4
6360: ST_TO_ADDR
// end ;
6361: LD_VAR 0 1
6365: RET
// export function MCT_GetByTag ( base , tag ) ; var i ; begin
6366: LD_INT 0
6368: PPUSH
6369: PPUSH
// result := [ ] ;
6370: LD_ADDR_VAR 0 3
6374: PUSH
6375: EMPTY
6376: ST_TO_ADDR
// if not base then
6377: LD_VAR 0 1
6381: NOT
6382: IFFALSE 6386
// exit ;
6384: GO 6455
// for i in mc_people [ base ] do
6386: LD_ADDR_VAR 0 4
6390: PUSH
6391: LD_EXP 9
6395: PUSH
6396: LD_VAR 0 1
6400: ARRAY
6401: PUSH
6402: FOR_IN
6403: IFFALSE 6453
// if GetTag ( i ) = tag then
6405: LD_VAR 0 4
6409: PPUSH
6410: CALL_OW 110
6414: PUSH
6415: LD_VAR 0 2
6419: EQUAL
6420: IFFALSE 6451
// result := Replace ( result , result + 1 , i ) ;
6422: LD_ADDR_VAR 0 3
6426: PUSH
6427: LD_VAR 0 3
6431: PPUSH
6432: LD_VAR 0 3
6436: PUSH
6437: LD_INT 1
6439: PLUS
6440: PPUSH
6441: LD_VAR 0 4
6445: PPUSH
6446: CALL_OW 1
6450: ST_TO_ADDR
6451: GO 6402
6453: POP
6454: POP
// end ;
6455: LD_VAR 0 3
6459: RET
// export function MCT_ResetTag ( base , tag ) ; var i ; begin
6460: LD_INT 0
6462: PPUSH
6463: PPUSH
// result := MCT_GetByTag ( base , tag ) ;
6464: LD_ADDR_VAR 0 3
6468: PUSH
6469: LD_VAR 0 1
6473: PPUSH
6474: LD_VAR 0 2
6478: PPUSH
6479: CALL 6366 0 2
6483: ST_TO_ADDR
// if result then
6484: LD_VAR 0 3
6488: IFFALSE 6521
// for i in result do
6490: LD_ADDR_VAR 0 4
6494: PUSH
6495: LD_VAR 0 3
6499: PUSH
6500: FOR_IN
6501: IFFALSE 6519
// SetTag ( i , mct_none ) ;
6503: LD_VAR 0 4
6507: PPUSH
6508: LD_EXP 31
6512: PPUSH
6513: CALL_OW 109
6517: GO 6500
6519: POP
6520: POP
// end ;
6521: LD_VAR 0 3
6525: RET
// export function MCT_SetTag ( units , tag ) ; var i ; begin
6526: LD_INT 0
6528: PPUSH
6529: PPUSH
// if not units then
6530: LD_VAR 0 1
6534: NOT
6535: IFFALSE 6539
// exit ;
6537: GO 6570
// for i in units do
6539: LD_ADDR_VAR 0 4
6543: PUSH
6544: LD_VAR 0 1
6548: PUSH
6549: FOR_IN
6550: IFFALSE 6568
// SetTag ( i , tag ) ;
6552: LD_VAR 0 4
6556: PPUSH
6557: LD_VAR 0 2
6561: PPUSH
6562: CALL_OW 109
6566: GO 6549
6568: POP
6569: POP
// end ; end_of_file
6570: LD_VAR 0 3
6574: RET
// export function MC_Exist ( base ) ; begin
6575: LD_INT 0
6577: PPUSH
// result := mc_bases >= base and mc_bases [ base ] > 0 ;
6578: LD_ADDR_VAR 0 2
6582: PUSH
6583: LD_EXP 6
6587: PUSH
6588: LD_VAR 0 1
6592: GREATEREQUAL
6593: PUSH
6594: LD_EXP 6
6598: PUSH
6599: LD_VAR 0 1
6603: ARRAY
6604: PUSH
6605: LD_INT 0
6607: GREATER
6608: AND
6609: ST_TO_ADDR
// end ;
6610: LD_VAR 0 2
6614: RET
// export function MC_GetBestForClass ( base , class , amount ) ; var i , units ; begin
6615: LD_INT 0
6617: PPUSH
6618: PPUSH
6619: PPUSH
// result := [ ] ;
6620: LD_ADDR_VAR 0 4
6624: PUSH
6625: EMPTY
6626: ST_TO_ADDR
// units := SortBySkill ( UnitFilter ( mc_people [ base ] , [ f_not , [ f_class , class ] ] ) , class ) ;
6627: LD_ADDR_VAR 0 6
6631: PUSH
6632: LD_EXP 9
6636: PUSH
6637: LD_VAR 0 1
6641: ARRAY
6642: PPUSH
6643: LD_INT 3
6645: PUSH
6646: LD_INT 25
6648: PUSH
6649: LD_VAR 0 2
6653: PUSH
6654: EMPTY
6655: LIST
6656: LIST
6657: PUSH
6658: EMPTY
6659: LIST
6660: LIST
6661: PPUSH
6662: CALL_OW 72
6666: PPUSH
6667: LD_VAR 0 2
6671: PPUSH
6672: CALL 42866 0 2
6676: ST_TO_ADDR
// if not units then
6677: LD_VAR 0 6
6681: NOT
6682: IFFALSE 6686
// exit ;
6684: GO 6777
// for i := 1 to amount do
6686: LD_ADDR_VAR 0 5
6690: PUSH
6691: DOUBLE
6692: LD_INT 1
6694: DEC
6695: ST_TO_ADDR
6696: LD_VAR 0 3
6700: PUSH
6701: FOR_TO
6702: IFFALSE 6775
// begin if i > units then
6704: LD_VAR 0 5
6708: PUSH
6709: LD_VAR 0 6
6713: GREATER
6714: IFFALSE 6720
// exit ;
6716: POP
6717: POP
6718: GO 6777
// if not GetTag ( units [ i ] ) then
6720: LD_VAR 0 6
6724: PUSH
6725: LD_VAR 0 5
6729: ARRAY
6730: PPUSH
6731: CALL_OW 110
6735: NOT
6736: IFFALSE 6773
// result := Replace ( result , result + 1 , units [ i ] ) ;
6738: LD_ADDR_VAR 0 4
6742: PUSH
6743: LD_VAR 0 4
6747: PPUSH
6748: LD_VAR 0 4
6752: PUSH
6753: LD_INT 1
6755: PLUS
6756: PPUSH
6757: LD_VAR 0 6
6761: PUSH
6762: LD_VAR 0 5
6766: ARRAY
6767: PPUSH
6768: CALL_OW 1
6772: ST_TO_ADDR
// end ;
6773: GO 6701
6775: POP
6776: POP
// end ;
6777: LD_VAR 0 4
6781: RET
// export function MC_GetHumanBase ( human ) ; var i ; begin
6782: LD_INT 0
6784: PPUSH
6785: PPUSH
// for i := 1 to mc_people do
6786: LD_ADDR_VAR 0 3
6790: PUSH
6791: DOUBLE
6792: LD_INT 1
6794: DEC
6795: ST_TO_ADDR
6796: LD_EXP 9
6800: PUSH
6801: FOR_TO
6802: IFFALSE 6838
// if human in mc_people [ i ] then
6804: LD_VAR 0 1
6808: PUSH
6809: LD_EXP 9
6813: PUSH
6814: LD_VAR 0 3
6818: ARRAY
6819: IN
6820: IFFALSE 6836
// begin result := i ;
6822: LD_ADDR_VAR 0 2
6826: PUSH
6827: LD_VAR 0 3
6831: ST_TO_ADDR
// exit ;
6832: POP
6833: POP
6834: GO 6840
// end ;
6836: GO 6801
6838: POP
6839: POP
// end ;
6840: LD_VAR 0 2
6844: RET
// export function MC_ChangeClass ( base , class , units ) ; var i , buildings , b ; begin
6845: LD_INT 0
6847: PPUSH
6848: PPUSH
6849: PPUSH
6850: PPUSH
// if not base or not units then
6851: LD_VAR 0 1
6855: NOT
6856: PUSH
6857: LD_VAR 0 3
6861: NOT
6862: OR
6863: IFFALSE 6867
// exit ;
6865: GO 7348
// case class of 1 , 5 , 6 , 7 , 8 :
6867: LD_VAR 0 2
6871: PUSH
6872: LD_INT 1
6874: DOUBLE
6875: EQUAL
6876: IFTRUE 6904
6878: LD_INT 5
6880: DOUBLE
6881: EQUAL
6882: IFTRUE 6904
6884: LD_INT 6
6886: DOUBLE
6887: EQUAL
6888: IFTRUE 6904
6890: LD_INT 7
6892: DOUBLE
6893: EQUAL
6894: IFTRUE 6904
6896: LD_INT 8
6898: DOUBLE
6899: EQUAL
6900: IFTRUE 6904
6902: GO 6956
6904: POP
// buildings := UnitFilter ( mc_buildings [ base ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ; 2 :
6905: LD_ADDR_VAR 0 6
6909: PUSH
6910: LD_EXP 10
6914: PUSH
6915: LD_VAR 0 1
6919: ARRAY
6920: PPUSH
6921: LD_INT 2
6923: PUSH
6924: LD_INT 30
6926: PUSH
6927: LD_INT 4
6929: PUSH
6930: EMPTY
6931: LIST
6932: LIST
6933: PUSH
6934: LD_INT 30
6936: PUSH
6937: LD_INT 5
6939: PUSH
6940: EMPTY
6941: LIST
6942: LIST
6943: PUSH
6944: EMPTY
6945: LIST
6946: LIST
6947: LIST
6948: PPUSH
6949: CALL_OW 72
6953: ST_TO_ADDR
6954: GO 7148
6956: LD_INT 2
6958: DOUBLE
6959: EQUAL
6960: IFTRUE 6964
6962: GO 7016
6964: POP
// buildings := UnitFilter ( mc_buildings [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ; 3 :
6965: LD_ADDR_VAR 0 6
6969: PUSH
6970: LD_EXP 10
6974: PUSH
6975: LD_VAR 0 1
6979: ARRAY
6980: PPUSH
6981: LD_INT 2
6983: PUSH
6984: LD_INT 30
6986: PUSH
6987: LD_INT 0
6989: PUSH
6990: EMPTY
6991: LIST
6992: LIST
6993: PUSH
6994: LD_INT 30
6996: PUSH
6997: LD_INT 1
6999: PUSH
7000: EMPTY
7001: LIST
7002: LIST
7003: PUSH
7004: EMPTY
7005: LIST
7006: LIST
7007: LIST
7008: PPUSH
7009: CALL_OW 72
7013: ST_TO_ADDR
7014: GO 7148
7016: LD_INT 3
7018: DOUBLE
7019: EQUAL
7020: IFTRUE 7024
7022: GO 7076
7024: POP
// buildings := UnitFilter ( mc_buildings [ base ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ) ; 4 :
7025: LD_ADDR_VAR 0 6
7029: PUSH
7030: LD_EXP 10
7034: PUSH
7035: LD_VAR 0 1
7039: ARRAY
7040: PPUSH
7041: LD_INT 2
7043: PUSH
7044: LD_INT 30
7046: PUSH
7047: LD_INT 2
7049: PUSH
7050: EMPTY
7051: LIST
7052: LIST
7053: PUSH
7054: LD_INT 30
7056: PUSH
7057: LD_INT 3
7059: PUSH
7060: EMPTY
7061: LIST
7062: LIST
7063: PUSH
7064: EMPTY
7065: LIST
7066: LIST
7067: LIST
7068: PPUSH
7069: CALL_OW 72
7073: ST_TO_ADDR
7074: GO 7148
7076: LD_INT 4
7078: DOUBLE
7079: EQUAL
7080: IFTRUE 7084
7082: GO 7147
7084: POP
// buildings := UnitFilter ( mc_buildings [ base ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ; end ;
7085: LD_ADDR_VAR 0 6
7089: PUSH
7090: LD_EXP 10
7094: PUSH
7095: LD_VAR 0 1
7099: ARRAY
7100: PPUSH
7101: LD_INT 2
7103: PUSH
7104: LD_INT 30
7106: PUSH
7107: LD_INT 6
7109: PUSH
7110: EMPTY
7111: LIST
7112: LIST
7113: PUSH
7114: LD_INT 30
7116: PUSH
7117: LD_INT 7
7119: PUSH
7120: EMPTY
7121: LIST
7122: LIST
7123: PUSH
7124: LD_INT 30
7126: PUSH
7127: LD_INT 8
7129: PUSH
7130: EMPTY
7131: LIST
7132: LIST
7133: PUSH
7134: EMPTY
7135: LIST
7136: LIST
7137: LIST
7138: LIST
7139: PPUSH
7140: CALL_OW 72
7144: ST_TO_ADDR
7145: GO 7148
7147: POP
// if not buildings then
7148: LD_VAR 0 6
7152: NOT
7153: IFFALSE 7157
// exit ;
7155: GO 7348
// for i := 1 to units do
7157: LD_ADDR_VAR 0 5
7161: PUSH
7162: DOUBLE
7163: LD_INT 1
7165: DEC
7166: ST_TO_ADDR
7167: LD_VAR 0 3
7171: PUSH
7172: FOR_TO
7173: IFFALSE 7346
// begin if GetClass ( units [ i ] ) = class then
7175: LD_VAR 0 3
7179: PUSH
7180: LD_VAR 0 5
7184: ARRAY
7185: PPUSH
7186: CALL_OW 257
7190: PUSH
7191: LD_VAR 0 2
7195: EQUAL
7196: IFFALSE 7200
// continue ;
7198: GO 7172
// SetTag ( units [ i ] , mct_change_class ) ;
7200: LD_VAR 0 3
7204: PUSH
7205: LD_VAR 0 5
7209: ARRAY
7210: PPUSH
7211: LD_EXP 32
7215: PPUSH
7216: CALL_OW 109
// if buildings > i div 6 then
7220: LD_VAR 0 6
7224: PUSH
7225: LD_VAR 0 5
7229: PUSH
7230: LD_INT 6
7232: DIV
7233: GREATER
7234: IFFALSE 7258
// b := buildings [ i div 6 ] else
7236: LD_ADDR_VAR 0 7
7240: PUSH
7241: LD_VAR 0 6
7245: PUSH
7246: LD_VAR 0 5
7250: PUSH
7251: LD_INT 6
7253: DIV
7254: ARRAY
7255: ST_TO_ADDR
7256: GO 7272
// b := buildings [ 1 ] ;
7258: LD_ADDR_VAR 0 7
7262: PUSH
7263: LD_VAR 0 6
7267: PUSH
7268: LD_INT 1
7270: ARRAY
7271: ST_TO_ADDR
// if IsInUnit ( units [ i ] ) then
7272: LD_VAR 0 3
7276: PUSH
7277: LD_VAR 0 5
7281: ARRAY
7282: PPUSH
7283: CALL_OW 310
7287: IFFALSE 7304
// ComExit ( units [ i ] ) ;
7289: LD_VAR 0 3
7293: PUSH
7294: LD_VAR 0 5
7298: ARRAY
7299: PPUSH
7300: CALL 44748 0 1
// AddComEnterUnit ( units [ i ] , b ) ;
7304: LD_VAR 0 3
7308: PUSH
7309: LD_VAR 0 5
7313: ARRAY
7314: PPUSH
7315: LD_VAR 0 7
7319: PPUSH
7320: CALL_OW 180
// AddComChangeProfession ( units [ i ] , class ) ;
7324: LD_VAR 0 3
7328: PUSH
7329: LD_VAR 0 5
7333: ARRAY
7334: PPUSH
7335: LD_VAR 0 2
7339: PPUSH
7340: CALL_OW 183
// end ;
7344: GO 7172
7346: POP
7347: POP
// end ;
7348: LD_VAR 0 4
7352: RET
// export function MC_GetByClass ( base , class , tag ) ; var i ; begin
7353: LD_INT 0
7355: PPUSH
7356: PPUSH
// result := UnitFilter ( mc_people [ base ] , [ f_class , class ] ) ;
7357: LD_ADDR_VAR 0 4
7361: PUSH
7362: LD_EXP 9
7366: PUSH
7367: LD_VAR 0 1
7371: ARRAY
7372: PPUSH
7373: LD_INT 25
7375: PUSH
7376: LD_VAR 0 2
7380: PUSH
7381: EMPTY
7382: LIST
7383: LIST
7384: PPUSH
7385: CALL_OW 72
7389: ST_TO_ADDR
// if tag > - 1 then
7390: LD_VAR 0 3
7394: PUSH
7395: LD_INT 1
7397: NEG
7398: GREATER
7399: IFFALSE 7451
// for i in result do
7401: LD_ADDR_VAR 0 5
7405: PUSH
7406: LD_VAR 0 4
7410: PUSH
7411: FOR_IN
7412: IFFALSE 7449
// if GetTag ( i ) <> tag then
7414: LD_VAR 0 5
7418: PPUSH
7419: CALL_OW 110
7423: PUSH
7424: LD_VAR 0 3
7428: NONEQUAL
7429: IFFALSE 7447
// result := result diff i ;
7431: LD_ADDR_VAR 0 4
7435: PUSH
7436: LD_VAR 0 4
7440: PUSH
7441: LD_VAR 0 5
7445: DIFF
7446: ST_TO_ADDR
7447: GO 7411
7449: POP
7450: POP
// end ;
7451: LD_VAR 0 4
7455: RET
// export function MC_GetOneByClass ( base , class , tag ) ; begin
7456: LD_INT 0
7458: PPUSH
// result := MC_GetByClass ( base , class , tag ) ;
7459: LD_ADDR_VAR 0 4
7463: PUSH
7464: LD_VAR 0 1
7468: PPUSH
7469: LD_VAR 0 2
7473: PPUSH
7474: LD_VAR 0 3
7478: PPUSH
7479: CALL 7353 0 3
7483: ST_TO_ADDR
// if result then
7484: LD_VAR 0 4
7488: IFFALSE 7504
// result := result [ 1 ] ;
7490: LD_ADDR_VAR 0 4
7494: PUSH
7495: LD_VAR 0 4
7499: PUSH
7500: LD_INT 1
7502: ARRAY
7503: ST_TO_ADDR
// end ;
7504: LD_VAR 0 4
7508: RET
// export function MC_GetBuilding ( base , btype ) ; begin
7509: LD_INT 0
7511: PPUSH
// result := UnitFilter ( mc_buildings [ base ] , [ f_btype , btype ] ) ;
7512: LD_ADDR_VAR 0 3
7516: PUSH
7517: LD_EXP 10
7521: PUSH
7522: LD_VAR 0 1
7526: ARRAY
7527: PPUSH
7528: LD_INT 30
7530: PUSH
7531: LD_VAR 0 2
7535: PUSH
7536: EMPTY
7537: LIST
7538: LIST
7539: PPUSH
7540: CALL_OW 72
7544: ST_TO_ADDR
// end ;
7545: LD_VAR 0 3
7549: RET
// export function MC_GetDepot ( base ) ; begin
7550: LD_INT 0
7552: PPUSH
// result := UnitFilter ( mc_buildings [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
7553: LD_ADDR_VAR 0 2
7557: PUSH
7558: LD_EXP 10
7562: PUSH
7563: LD_VAR 0 1
7567: ARRAY
7568: PPUSH
7569: LD_INT 2
7571: PUSH
7572: LD_INT 30
7574: PUSH
7575: LD_INT 0
7577: PUSH
7578: EMPTY
7579: LIST
7580: LIST
7581: PUSH
7582: LD_INT 30
7584: PUSH
7585: LD_INT 1
7587: PUSH
7588: EMPTY
7589: LIST
7590: LIST
7591: PUSH
7592: EMPTY
7593: LIST
7594: LIST
7595: LIST
7596: PPUSH
7597: CALL_OW 72
7601: ST_TO_ADDR
// end ;
7602: LD_VAR 0 2
7606: RET
// export function MC_GetVehicles ( base , onlyCombat ) ; begin
7607: LD_INT 0
7609: PPUSH
// result := mc_vehicles [ base ] ;
7610: LD_ADDR_VAR 0 3
7614: PUSH
7615: LD_EXP 11
7619: PUSH
7620: LD_VAR 0 1
7624: ARRAY
7625: ST_TO_ADDR
// if onlyCombat then
7626: LD_VAR 0 2
7630: IFFALSE 7808
// result := result diff UnitFilter ( result , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , us_crane ] , [ f_weapon , ru_crane ] , [ f_weapon , ar_crane ] , [ f_weapon , us_bulldozer ] , [ f_weapon , ru_bulldozer ] , [ f_weapon , ru_radar ] , [ f_weapon , ar_control_tower ] , [ f_weapon , ru_siberium_rocket ] , [ f_weapon , us_siberium_rocket ] ] ) ;
7632: LD_ADDR_VAR 0 3
7636: PUSH
7637: LD_VAR 0 3
7641: PUSH
7642: LD_VAR 0 3
7646: PPUSH
7647: LD_INT 2
7649: PUSH
7650: LD_INT 34
7652: PUSH
7653: LD_INT 12
7655: PUSH
7656: EMPTY
7657: LIST
7658: LIST
7659: PUSH
7660: LD_INT 34
7662: PUSH
7663: LD_INT 51
7665: PUSH
7666: EMPTY
7667: LIST
7668: LIST
7669: PUSH
7670: LD_INT 34
7672: PUSH
7673: LD_EXP 40
7677: PUSH
7678: EMPTY
7679: LIST
7680: LIST
7681: PUSH
7682: LD_INT 34
7684: PUSH
7685: LD_INT 32
7687: PUSH
7688: EMPTY
7689: LIST
7690: LIST
7691: PUSH
7692: LD_INT 34
7694: PUSH
7695: LD_INT 13
7697: PUSH
7698: EMPTY
7699: LIST
7700: LIST
7701: PUSH
7702: LD_INT 34
7704: PUSH
7705: LD_INT 52
7707: PUSH
7708: EMPTY
7709: LIST
7710: LIST
7711: PUSH
7712: LD_INT 34
7714: PUSH
7715: LD_EXP 45
7719: PUSH
7720: EMPTY
7721: LIST
7722: LIST
7723: PUSH
7724: LD_INT 34
7726: PUSH
7727: LD_INT 14
7729: PUSH
7730: EMPTY
7731: LIST
7732: LIST
7733: PUSH
7734: LD_INT 34
7736: PUSH
7737: LD_INT 53
7739: PUSH
7740: EMPTY
7741: LIST
7742: LIST
7743: PUSH
7744: LD_INT 34
7746: PUSH
7747: LD_EXP 39
7751: PUSH
7752: EMPTY
7753: LIST
7754: LIST
7755: PUSH
7756: LD_INT 34
7758: PUSH
7759: LD_INT 31
7761: PUSH
7762: EMPTY
7763: LIST
7764: LIST
7765: PUSH
7766: LD_INT 34
7768: PUSH
7769: LD_INT 48
7771: PUSH
7772: EMPTY
7773: LIST
7774: LIST
7775: PUSH
7776: LD_INT 34
7778: PUSH
7779: LD_INT 8
7781: PUSH
7782: EMPTY
7783: LIST
7784: LIST
7785: PUSH
7786: EMPTY
7787: LIST
7788: LIST
7789: LIST
7790: LIST
7791: LIST
7792: LIST
7793: LIST
7794: LIST
7795: LIST
7796: LIST
7797: LIST
7798: LIST
7799: LIST
7800: LIST
7801: PPUSH
7802: CALL_OW 72
7806: DIFF
7807: ST_TO_ADDR
// end ;
7808: LD_VAR 0 3
7812: RET
// export function MC_Retreat ( base , unit ) ; var depot ; begin
7813: LD_INT 0
7815: PPUSH
7816: PPUSH
// if not base or not unit then
7817: LD_VAR 0 1
7821: NOT
7822: PUSH
7823: LD_VAR 0 2
7827: NOT
7828: OR
7829: IFFALSE 7833
// exit ;
7831: GO 7900
// depot := NearestUnitToUnit ( MC_GetDepot ( base ) , unit ) ;
7833: LD_ADDR_VAR 0 4
7837: PUSH
7838: LD_VAR 0 1
7842: PPUSH
7843: CALL 7550 0 1
7847: PPUSH
7848: LD_VAR 0 2
7852: PPUSH
7853: CALL_OW 74
7857: ST_TO_ADDR
// if depot then
7858: LD_VAR 0 4
7862: IFFALSE 7880
// ComStandNearbyBuilding ( unit , depot ) else
7864: LD_VAR 0 2
7868: PPUSH
7869: LD_VAR 0 4
7873: PPUSH
7874: CALL 9628 0 2
7878: GO 7900
// ComMoveToArea ( unit , mc_scan_area [ base ] ) ;
7880: LD_VAR 0 2
7884: PPUSH
7885: LD_EXP 29
7889: PUSH
7890: LD_VAR 0 1
7894: ARRAY
7895: PPUSH
7896: CALL_OW 113
// end ; end_of_file
7900: LD_VAR 0 3
7904: RET
// export mctm_collect_crates , mctm_build , mctm_ ; export function MCTM_InitTaskManager ( ) ; begin
7905: LD_INT 0
7907: PPUSH
// mctm_collect_crates := 1 ;
7908: LD_ADDR_EXP 36
7912: PUSH
7913: LD_INT 1
7915: ST_TO_ADDR
// mctm_build := 2 ;
7916: LD_ADDR_EXP 37
7920: PUSH
7921: LD_INT 2
7923: ST_TO_ADDR
// end ;
7924: LD_VAR 0 1
7928: RET
// export function MCTM_HasActiveTask ( base , task ) ; begin
7929: LD_INT 0
7931: PPUSH
// result := task in mc_task [ base ] ;
7932: LD_ADDR_VAR 0 3
7936: PUSH
7937: LD_VAR 0 2
7941: PUSH
7942: LD_EXP 8
7946: PUSH
7947: LD_VAR 0 1
7951: ARRAY
7952: IN
7953: ST_TO_ADDR
// end ;
7954: LD_VAR 0 3
7958: RET
// export function MCTM_SetActiveTask ( base , task ) ; begin
7959: LD_INT 0
7961: PPUSH
// mc_task := Replace ( mc_task , base , Replace ( mc_task [ base ] , mc_task [ base ] + 1 , task ) ) ;
7962: LD_ADDR_EXP 8
7966: PUSH
7967: LD_EXP 8
7971: PPUSH
7972: LD_VAR 0 1
7976: PPUSH
7977: LD_EXP 8
7981: PUSH
7982: LD_VAR 0 1
7986: ARRAY
7987: PPUSH
7988: LD_EXP 8
7992: PUSH
7993: LD_VAR 0 1
7997: ARRAY
7998: PUSH
7999: LD_INT 1
8001: PLUS
8002: PPUSH
8003: LD_VAR 0 2
8007: PPUSH
8008: CALL_OW 1
8012: PPUSH
8013: CALL_OW 1
8017: ST_TO_ADDR
// end ;
8018: LD_VAR 0 3
8022: RET
// export function MCTM_DeleteActiveTask ( base , task ) ; begin
8023: LD_INT 0
8025: PPUSH
// mc_task := Replace ( mc_task , base , mc_task [ base ] diff task ) ;
8026: LD_ADDR_EXP 8
8030: PUSH
8031: LD_EXP 8
8035: PPUSH
8036: LD_VAR 0 1
8040: PPUSH
8041: LD_EXP 8
8045: PUSH
8046: LD_VAR 0 1
8050: ARRAY
8051: PUSH
8052: LD_VAR 0 2
8056: DIFF
8057: PPUSH
8058: CALL_OW 1
8062: ST_TO_ADDR
// end ; end_of_file
8063: LD_VAR 0 3
8067: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
8068: LD_INT 0
8070: PPUSH
8071: PPUSH
// if exist_mode then
8072: LD_VAR 0 2
8076: IFFALSE 8101
// unit := CreateCharacter ( prefix & ident ) else
8078: LD_ADDR_VAR 0 5
8082: PUSH
8083: LD_VAR 0 3
8087: PUSH
8088: LD_VAR 0 1
8092: STR
8093: PPUSH
8094: CALL_OW 34
8098: ST_TO_ADDR
8099: GO 8116
// unit := NewCharacter ( ident ) ;
8101: LD_ADDR_VAR 0 5
8105: PUSH
8106: LD_VAR 0 1
8110: PPUSH
8111: CALL_OW 25
8115: ST_TO_ADDR
// result := unit ;
8116: LD_ADDR_VAR 0 4
8120: PUSH
8121: LD_VAR 0 5
8125: ST_TO_ADDR
// end ;
8126: LD_VAR 0 4
8130: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
8131: LD_INT 0
8133: PPUSH
8134: PPUSH
// if not side or not nation then
8135: LD_VAR 0 1
8139: NOT
8140: PUSH
8141: LD_VAR 0 2
8145: NOT
8146: OR
8147: IFFALSE 8151
// exit ;
8149: GO 8915
// case nation of nation_american :
8151: LD_VAR 0 2
8155: PUSH
8156: LD_INT 1
8158: DOUBLE
8159: EQUAL
8160: IFTRUE 8164
8162: GO 8378
8164: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
8165: LD_ADDR_VAR 0 4
8169: PUSH
8170: LD_INT 35
8172: PUSH
8173: LD_INT 45
8175: PUSH
8176: LD_INT 46
8178: PUSH
8179: LD_INT 47
8181: PUSH
8182: LD_INT 82
8184: PUSH
8185: LD_INT 83
8187: PUSH
8188: LD_INT 84
8190: PUSH
8191: LD_INT 85
8193: PUSH
8194: LD_INT 86
8196: PUSH
8197: LD_INT 1
8199: PUSH
8200: LD_INT 2
8202: PUSH
8203: LD_INT 6
8205: PUSH
8206: LD_INT 15
8208: PUSH
8209: LD_INT 16
8211: PUSH
8212: LD_INT 7
8214: PUSH
8215: LD_INT 12
8217: PUSH
8218: LD_INT 13
8220: PUSH
8221: LD_INT 10
8223: PUSH
8224: LD_INT 14
8226: PUSH
8227: LD_INT 20
8229: PUSH
8230: LD_INT 21
8232: PUSH
8233: LD_INT 22
8235: PUSH
8236: LD_INT 25
8238: PUSH
8239: LD_INT 32
8241: PUSH
8242: LD_INT 27
8244: PUSH
8245: LD_INT 36
8247: PUSH
8248: LD_INT 69
8250: PUSH
8251: LD_INT 39
8253: PUSH
8254: LD_INT 34
8256: PUSH
8257: LD_INT 40
8259: PUSH
8260: LD_INT 48
8262: PUSH
8263: LD_INT 49
8265: PUSH
8266: LD_INT 50
8268: PUSH
8269: LD_INT 51
8271: PUSH
8272: LD_INT 52
8274: PUSH
8275: LD_INT 53
8277: PUSH
8278: LD_INT 54
8280: PUSH
8281: LD_INT 55
8283: PUSH
8284: LD_INT 56
8286: PUSH
8287: LD_INT 57
8289: PUSH
8290: LD_INT 58
8292: PUSH
8293: LD_INT 59
8295: PUSH
8296: LD_INT 60
8298: PUSH
8299: LD_INT 61
8301: PUSH
8302: LD_INT 62
8304: PUSH
8305: LD_INT 80
8307: PUSH
8308: LD_INT 82
8310: PUSH
8311: LD_INT 83
8313: PUSH
8314: LD_INT 84
8316: PUSH
8317: LD_INT 85
8319: PUSH
8320: LD_INT 86
8322: PUSH
8323: EMPTY
8324: LIST
8325: LIST
8326: LIST
8327: LIST
8328: LIST
8329: LIST
8330: LIST
8331: LIST
8332: LIST
8333: LIST
8334: LIST
8335: LIST
8336: LIST
8337: LIST
8338: LIST
8339: LIST
8340: LIST
8341: LIST
8342: LIST
8343: LIST
8344: LIST
8345: LIST
8346: LIST
8347: LIST
8348: LIST
8349: LIST
8350: LIST
8351: LIST
8352: LIST
8353: LIST
8354: LIST
8355: LIST
8356: LIST
8357: LIST
8358: LIST
8359: LIST
8360: LIST
8361: LIST
8362: LIST
8363: LIST
8364: LIST
8365: LIST
8366: LIST
8367: LIST
8368: LIST
8369: LIST
8370: LIST
8371: LIST
8372: LIST
8373: LIST
8374: LIST
8375: ST_TO_ADDR
8376: GO 8839
8378: LD_INT 2
8380: DOUBLE
8381: EQUAL
8382: IFTRUE 8386
8384: GO 8608
8386: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
8387: LD_ADDR_VAR 0 4
8391: PUSH
8392: LD_INT 35
8394: PUSH
8395: LD_INT 45
8397: PUSH
8398: LD_INT 46
8400: PUSH
8401: LD_INT 47
8403: PUSH
8404: LD_INT 82
8406: PUSH
8407: LD_INT 83
8409: PUSH
8410: LD_INT 84
8412: PUSH
8413: LD_INT 85
8415: PUSH
8416: LD_INT 87
8418: PUSH
8419: LD_INT 70
8421: PUSH
8422: LD_INT 1
8424: PUSH
8425: LD_INT 11
8427: PUSH
8428: LD_INT 3
8430: PUSH
8431: LD_INT 4
8433: PUSH
8434: LD_INT 5
8436: PUSH
8437: LD_INT 6
8439: PUSH
8440: LD_INT 15
8442: PUSH
8443: LD_INT 18
8445: PUSH
8446: LD_INT 7
8448: PUSH
8449: LD_INT 17
8451: PUSH
8452: LD_INT 8
8454: PUSH
8455: LD_INT 20
8457: PUSH
8458: LD_INT 21
8460: PUSH
8461: LD_INT 22
8463: PUSH
8464: LD_INT 72
8466: PUSH
8467: LD_INT 26
8469: PUSH
8470: LD_INT 69
8472: PUSH
8473: LD_INT 39
8475: PUSH
8476: LD_INT 40
8478: PUSH
8479: LD_INT 41
8481: PUSH
8482: LD_INT 42
8484: PUSH
8485: LD_INT 43
8487: PUSH
8488: LD_INT 48
8490: PUSH
8491: LD_INT 49
8493: PUSH
8494: LD_INT 50
8496: PUSH
8497: LD_INT 51
8499: PUSH
8500: LD_INT 52
8502: PUSH
8503: LD_INT 53
8505: PUSH
8506: LD_INT 54
8508: PUSH
8509: LD_INT 55
8511: PUSH
8512: LD_INT 56
8514: PUSH
8515: LD_INT 60
8517: PUSH
8518: LD_INT 61
8520: PUSH
8521: LD_INT 62
8523: PUSH
8524: LD_INT 66
8526: PUSH
8527: LD_INT 67
8529: PUSH
8530: LD_INT 68
8532: PUSH
8533: LD_INT 81
8535: PUSH
8536: LD_INT 82
8538: PUSH
8539: LD_INT 83
8541: PUSH
8542: LD_INT 84
8544: PUSH
8545: LD_INT 85
8547: PUSH
8548: LD_INT 87
8550: PUSH
8551: EMPTY
8552: LIST
8553: LIST
8554: LIST
8555: LIST
8556: LIST
8557: LIST
8558: LIST
8559: LIST
8560: LIST
8561: LIST
8562: LIST
8563: LIST
8564: LIST
8565: LIST
8566: LIST
8567: LIST
8568: LIST
8569: LIST
8570: LIST
8571: LIST
8572: LIST
8573: LIST
8574: LIST
8575: LIST
8576: LIST
8577: LIST
8578: LIST
8579: LIST
8580: LIST
8581: LIST
8582: LIST
8583: LIST
8584: LIST
8585: LIST
8586: LIST
8587: LIST
8588: LIST
8589: LIST
8590: LIST
8591: LIST
8592: LIST
8593: LIST
8594: LIST
8595: LIST
8596: LIST
8597: LIST
8598: LIST
8599: LIST
8600: LIST
8601: LIST
8602: LIST
8603: LIST
8604: LIST
8605: ST_TO_ADDR
8606: GO 8839
8608: LD_INT 3
8610: DOUBLE
8611: EQUAL
8612: IFTRUE 8616
8614: GO 8838
8616: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
8617: LD_ADDR_VAR 0 4
8621: PUSH
8622: LD_INT 46
8624: PUSH
8625: LD_INT 47
8627: PUSH
8628: LD_INT 1
8630: PUSH
8631: LD_INT 2
8633: PUSH
8634: LD_INT 82
8636: PUSH
8637: LD_INT 83
8639: PUSH
8640: LD_INT 84
8642: PUSH
8643: LD_INT 85
8645: PUSH
8646: LD_INT 86
8648: PUSH
8649: LD_INT 11
8651: PUSH
8652: LD_INT 9
8654: PUSH
8655: LD_INT 20
8657: PUSH
8658: LD_INT 19
8660: PUSH
8661: LD_INT 21
8663: PUSH
8664: LD_INT 24
8666: PUSH
8667: LD_INT 22
8669: PUSH
8670: LD_INT 25
8672: PUSH
8673: LD_INT 28
8675: PUSH
8676: LD_INT 29
8678: PUSH
8679: LD_INT 30
8681: PUSH
8682: LD_INT 31
8684: PUSH
8685: LD_INT 37
8687: PUSH
8688: LD_INT 38
8690: PUSH
8691: LD_INT 32
8693: PUSH
8694: LD_INT 27
8696: PUSH
8697: LD_INT 33
8699: PUSH
8700: LD_INT 69
8702: PUSH
8703: LD_INT 39
8705: PUSH
8706: LD_INT 34
8708: PUSH
8709: LD_INT 40
8711: PUSH
8712: LD_INT 71
8714: PUSH
8715: LD_INT 23
8717: PUSH
8718: LD_INT 44
8720: PUSH
8721: LD_INT 48
8723: PUSH
8724: LD_INT 49
8726: PUSH
8727: LD_INT 50
8729: PUSH
8730: LD_INT 51
8732: PUSH
8733: LD_INT 52
8735: PUSH
8736: LD_INT 53
8738: PUSH
8739: LD_INT 54
8741: PUSH
8742: LD_INT 55
8744: PUSH
8745: LD_INT 56
8747: PUSH
8748: LD_INT 57
8750: PUSH
8751: LD_INT 58
8753: PUSH
8754: LD_INT 59
8756: PUSH
8757: LD_INT 63
8759: PUSH
8760: LD_INT 64
8762: PUSH
8763: LD_INT 65
8765: PUSH
8766: LD_INT 82
8768: PUSH
8769: LD_INT 83
8771: PUSH
8772: LD_INT 84
8774: PUSH
8775: LD_INT 85
8777: PUSH
8778: LD_INT 86
8780: PUSH
8781: EMPTY
8782: LIST
8783: LIST
8784: LIST
8785: LIST
8786: LIST
8787: LIST
8788: LIST
8789: LIST
8790: LIST
8791: LIST
8792: LIST
8793: LIST
8794: LIST
8795: LIST
8796: LIST
8797: LIST
8798: LIST
8799: LIST
8800: LIST
8801: LIST
8802: LIST
8803: LIST
8804: LIST
8805: LIST
8806: LIST
8807: LIST
8808: LIST
8809: LIST
8810: LIST
8811: LIST
8812: LIST
8813: LIST
8814: LIST
8815: LIST
8816: LIST
8817: LIST
8818: LIST
8819: LIST
8820: LIST
8821: LIST
8822: LIST
8823: LIST
8824: LIST
8825: LIST
8826: LIST
8827: LIST
8828: LIST
8829: LIST
8830: LIST
8831: LIST
8832: LIST
8833: LIST
8834: LIST
8835: ST_TO_ADDR
8836: GO 8839
8838: POP
// if state > - 1 and state < 3 then
8839: LD_VAR 0 3
8843: PUSH
8844: LD_INT 1
8846: NEG
8847: GREATER
8848: PUSH
8849: LD_VAR 0 3
8853: PUSH
8854: LD_INT 3
8856: LESS
8857: AND
8858: IFFALSE 8915
// for i in result do
8860: LD_ADDR_VAR 0 5
8864: PUSH
8865: LD_VAR 0 4
8869: PUSH
8870: FOR_IN
8871: IFFALSE 8913
// if GetTech ( i , side ) <> state then
8873: LD_VAR 0 5
8877: PPUSH
8878: LD_VAR 0 1
8882: PPUSH
8883: CALL_OW 321
8887: PUSH
8888: LD_VAR 0 3
8892: NONEQUAL
8893: IFFALSE 8911
// result := result diff i ;
8895: LD_ADDR_VAR 0 4
8899: PUSH
8900: LD_VAR 0 4
8904: PUSH
8905: LD_VAR 0 5
8909: DIFF
8910: ST_TO_ADDR
8911: GO 8870
8913: POP
8914: POP
// end ;
8915: LD_VAR 0 4
8919: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
8920: LD_INT 0
8922: PPUSH
8923: PPUSH
8924: PPUSH
// result := true ;
8925: LD_ADDR_VAR 0 3
8929: PUSH
8930: LD_INT 1
8932: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
8933: LD_ADDR_VAR 0 5
8937: PUSH
8938: LD_VAR 0 2
8942: PPUSH
8943: CALL_OW 480
8947: ST_TO_ADDR
// if not tmp then
8948: LD_VAR 0 5
8952: NOT
8953: IFFALSE 8957
// exit ;
8955: GO 9006
// for i in tmp do
8957: LD_ADDR_VAR 0 4
8961: PUSH
8962: LD_VAR 0 5
8966: PUSH
8967: FOR_IN
8968: IFFALSE 9004
// if GetTech ( i , side ) <> state_researched then
8970: LD_VAR 0 4
8974: PPUSH
8975: LD_VAR 0 1
8979: PPUSH
8980: CALL_OW 321
8984: PUSH
8985: LD_INT 2
8987: NONEQUAL
8988: IFFALSE 9002
// begin result := false ;
8990: LD_ADDR_VAR 0 3
8994: PUSH
8995: LD_INT 0
8997: ST_TO_ADDR
// exit ;
8998: POP
8999: POP
9000: GO 9006
// end ;
9002: GO 8967
9004: POP
9005: POP
// end ;
9006: LD_VAR 0 3
9010: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
9011: LD_INT 0
9013: PPUSH
9014: PPUSH
9015: PPUSH
9016: PPUSH
9017: PPUSH
9018: PPUSH
9019: PPUSH
9020: PPUSH
9021: PPUSH
9022: PPUSH
9023: PPUSH
9024: PPUSH
9025: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
9026: LD_VAR 0 1
9030: NOT
9031: PUSH
9032: LD_VAR 0 1
9036: PPUSH
9037: CALL_OW 257
9041: PUSH
9042: LD_INT 9
9044: NONEQUAL
9045: OR
9046: IFFALSE 9050
// exit ;
9048: GO 9623
// side := GetSide ( unit ) ;
9050: LD_ADDR_VAR 0 9
9054: PUSH
9055: LD_VAR 0 1
9059: PPUSH
9060: CALL_OW 255
9064: ST_TO_ADDR
// tech_space := tech_spacanom ;
9065: LD_ADDR_VAR 0 12
9069: PUSH
9070: LD_INT 29
9072: ST_TO_ADDR
// tech_time := tech_taurad ;
9073: LD_ADDR_VAR 0 13
9077: PUSH
9078: LD_INT 28
9080: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
9081: LD_ADDR_VAR 0 11
9085: PUSH
9086: LD_VAR 0 1
9090: PPUSH
9091: CALL_OW 310
9095: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
9096: LD_VAR 0 11
9100: PPUSH
9101: CALL_OW 247
9105: PUSH
9106: LD_INT 2
9108: EQUAL
9109: IFFALSE 9113
// exit ;
9111: GO 9623
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
9113: LD_ADDR_VAR 0 8
9117: PUSH
9118: LD_INT 81
9120: PUSH
9121: LD_VAR 0 9
9125: PUSH
9126: EMPTY
9127: LIST
9128: LIST
9129: PUSH
9130: LD_INT 3
9132: PUSH
9133: LD_INT 21
9135: PUSH
9136: LD_INT 3
9138: PUSH
9139: EMPTY
9140: LIST
9141: LIST
9142: PUSH
9143: EMPTY
9144: LIST
9145: LIST
9146: PUSH
9147: EMPTY
9148: LIST
9149: LIST
9150: PPUSH
9151: CALL_OW 69
9155: ST_TO_ADDR
// if not tmp then
9156: LD_VAR 0 8
9160: NOT
9161: IFFALSE 9165
// exit ;
9163: GO 9623
// if in_unit then
9165: LD_VAR 0 11
9169: IFFALSE 9193
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
9171: LD_ADDR_VAR 0 10
9175: PUSH
9176: LD_VAR 0 8
9180: PPUSH
9181: LD_VAR 0 11
9185: PPUSH
9186: CALL_OW 74
9190: ST_TO_ADDR
9191: GO 9213
// enemy := NearestUnitToUnit ( tmp , unit ) ;
9193: LD_ADDR_VAR 0 10
9197: PUSH
9198: LD_VAR 0 8
9202: PPUSH
9203: LD_VAR 0 1
9207: PPUSH
9208: CALL_OW 74
9212: ST_TO_ADDR
// if not enemy then
9213: LD_VAR 0 10
9217: NOT
9218: IFFALSE 9222
// exit ;
9220: GO 9623
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
9222: LD_VAR 0 11
9226: PUSH
9227: LD_VAR 0 11
9231: PPUSH
9232: LD_VAR 0 10
9236: PPUSH
9237: CALL_OW 296
9241: PUSH
9242: LD_INT 13
9244: GREATER
9245: AND
9246: PUSH
9247: LD_VAR 0 1
9251: PPUSH
9252: LD_VAR 0 10
9256: PPUSH
9257: CALL_OW 296
9261: PUSH
9262: LD_INT 12
9264: GREATER
9265: OR
9266: IFFALSE 9270
// exit ;
9268: GO 9623
// missile := [ 1 ] ;
9270: LD_ADDR_VAR 0 14
9274: PUSH
9275: LD_INT 1
9277: PUSH
9278: EMPTY
9279: LIST
9280: ST_TO_ADDR
// if Researched ( side , tech_space ) then
9281: LD_VAR 0 9
9285: PPUSH
9286: LD_VAR 0 12
9290: PPUSH
9291: CALL_OW 325
9295: IFFALSE 9324
// missile := Insert ( missile , missile + 1 , 2 ) ;
9297: LD_ADDR_VAR 0 14
9301: PUSH
9302: LD_VAR 0 14
9306: PPUSH
9307: LD_VAR 0 14
9311: PUSH
9312: LD_INT 1
9314: PLUS
9315: PPUSH
9316: LD_INT 2
9318: PPUSH
9319: CALL_OW 2
9323: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
9324: LD_VAR 0 9
9328: PPUSH
9329: LD_VAR 0 13
9333: PPUSH
9334: CALL_OW 325
9338: PUSH
9339: LD_VAR 0 10
9343: PPUSH
9344: CALL_OW 255
9348: PPUSH
9349: LD_VAR 0 13
9353: PPUSH
9354: CALL_OW 325
9358: NOT
9359: AND
9360: IFFALSE 9389
// missile := Insert ( missile , missile + 1 , 3 ) ;
9362: LD_ADDR_VAR 0 14
9366: PUSH
9367: LD_VAR 0 14
9371: PPUSH
9372: LD_VAR 0 14
9376: PUSH
9377: LD_INT 1
9379: PLUS
9380: PPUSH
9381: LD_INT 3
9383: PPUSH
9384: CALL_OW 2
9388: ST_TO_ADDR
// if missile < 2 then
9389: LD_VAR 0 14
9393: PUSH
9394: LD_INT 2
9396: LESS
9397: IFFALSE 9401
// exit ;
9399: GO 9623
// x := GetX ( enemy ) ;
9401: LD_ADDR_VAR 0 4
9405: PUSH
9406: LD_VAR 0 10
9410: PPUSH
9411: CALL_OW 250
9415: ST_TO_ADDR
// y := GetY ( enemy ) ;
9416: LD_ADDR_VAR 0 5
9420: PUSH
9421: LD_VAR 0 10
9425: PPUSH
9426: CALL_OW 251
9430: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
9431: LD_ADDR_VAR 0 6
9435: PUSH
9436: LD_VAR 0 4
9440: PUSH
9441: LD_INT 1
9443: NEG
9444: PPUSH
9445: LD_INT 1
9447: PPUSH
9448: CALL_OW 12
9452: PLUS
9453: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
9454: LD_ADDR_VAR 0 7
9458: PUSH
9459: LD_VAR 0 5
9463: PUSH
9464: LD_INT 1
9466: NEG
9467: PPUSH
9468: LD_INT 1
9470: PPUSH
9471: CALL_OW 12
9475: PLUS
9476: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
9477: LD_VAR 0 6
9481: PPUSH
9482: LD_VAR 0 7
9486: PPUSH
9487: CALL_OW 488
9491: NOT
9492: IFFALSE 9514
// begin _x := x ;
9494: LD_ADDR_VAR 0 6
9498: PUSH
9499: LD_VAR 0 4
9503: ST_TO_ADDR
// _y := y ;
9504: LD_ADDR_VAR 0 7
9508: PUSH
9509: LD_VAR 0 5
9513: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
9514: LD_ADDR_VAR 0 3
9518: PUSH
9519: LD_INT 1
9521: PPUSH
9522: LD_VAR 0 14
9526: PPUSH
9527: CALL_OW 12
9531: ST_TO_ADDR
// case i of 1 :
9532: LD_VAR 0 3
9536: PUSH
9537: LD_INT 1
9539: DOUBLE
9540: EQUAL
9541: IFTRUE 9545
9543: GO 9562
9545: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
9546: LD_VAR 0 1
9550: PPUSH
9551: LD_VAR 0 10
9555: PPUSH
9556: CALL_OW 115
9560: GO 9623
9562: LD_INT 2
9564: DOUBLE
9565: EQUAL
9566: IFTRUE 9570
9568: GO 9592
9570: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
9571: LD_VAR 0 1
9575: PPUSH
9576: LD_VAR 0 6
9580: PPUSH
9581: LD_VAR 0 7
9585: PPUSH
9586: CALL_OW 153
9590: GO 9623
9592: LD_INT 3
9594: DOUBLE
9595: EQUAL
9596: IFTRUE 9600
9598: GO 9622
9600: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
9601: LD_VAR 0 1
9605: PPUSH
9606: LD_VAR 0 6
9610: PPUSH
9611: LD_VAR 0 7
9615: PPUSH
9616: CALL_OW 154
9620: GO 9623
9622: POP
// end ;
9623: LD_VAR 0 2
9627: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
9628: LD_INT 0
9630: PPUSH
9631: PPUSH
9632: PPUSH
9633: PPUSH
9634: PPUSH
9635: PPUSH
// if not unit or not building then
9636: LD_VAR 0 1
9640: NOT
9641: PUSH
9642: LD_VAR 0 2
9646: NOT
9647: OR
9648: IFFALSE 9652
// exit ;
9650: GO 9810
// x := GetX ( building ) ;
9652: LD_ADDR_VAR 0 5
9656: PUSH
9657: LD_VAR 0 2
9661: PPUSH
9662: CALL_OW 250
9666: ST_TO_ADDR
// y := GetY ( building ) ;
9667: LD_ADDR_VAR 0 6
9671: PUSH
9672: LD_VAR 0 2
9676: PPUSH
9677: CALL_OW 251
9681: ST_TO_ADDR
// for i = 0 to 5 do
9682: LD_ADDR_VAR 0 4
9686: PUSH
9687: DOUBLE
9688: LD_INT 0
9690: DEC
9691: ST_TO_ADDR
9692: LD_INT 5
9694: PUSH
9695: FOR_TO
9696: IFFALSE 9808
// begin _x := ShiftX ( x , i , 3 ) ;
9698: LD_ADDR_VAR 0 7
9702: PUSH
9703: LD_VAR 0 5
9707: PPUSH
9708: LD_VAR 0 4
9712: PPUSH
9713: LD_INT 3
9715: PPUSH
9716: CALL_OW 272
9720: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
9721: LD_ADDR_VAR 0 8
9725: PUSH
9726: LD_VAR 0 6
9730: PPUSH
9731: LD_VAR 0 4
9735: PPUSH
9736: LD_INT 3
9738: PPUSH
9739: CALL_OW 273
9743: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
9744: LD_VAR 0 7
9748: PPUSH
9749: LD_VAR 0 8
9753: PPUSH
9754: CALL_OW 488
9758: NOT
9759: IFFALSE 9763
// continue ;
9761: GO 9695
// if HexInfo ( _x , _y ) = 0 then
9763: LD_VAR 0 7
9767: PPUSH
9768: LD_VAR 0 8
9772: PPUSH
9773: CALL_OW 428
9777: PUSH
9778: LD_INT 0
9780: EQUAL
9781: IFFALSE 9806
// begin ComMoveXY ( unit , _x , _y ) ;
9783: LD_VAR 0 1
9787: PPUSH
9788: LD_VAR 0 7
9792: PPUSH
9793: LD_VAR 0 8
9797: PPUSH
9798: CALL_OW 111
// exit ;
9802: POP
9803: POP
9804: GO 9810
// end ; end ;
9806: GO 9695
9808: POP
9809: POP
// end ;
9810: LD_VAR 0 3
9814: RET
// export function ScanBase ( side , base_area ) ; begin
9815: LD_INT 0
9817: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
9818: LD_ADDR_VAR 0 3
9822: PUSH
9823: LD_VAR 0 2
9827: PPUSH
9828: LD_INT 81
9830: PUSH
9831: LD_VAR 0 1
9835: PUSH
9836: EMPTY
9837: LIST
9838: LIST
9839: PPUSH
9840: CALL_OW 70
9844: ST_TO_ADDR
// end ;
9845: LD_VAR 0 3
9849: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
9850: LD_INT 0
9852: PPUSH
9853: PPUSH
9854: PPUSH
9855: PPUSH
// result := false ;
9856: LD_ADDR_VAR 0 2
9860: PUSH
9861: LD_INT 0
9863: ST_TO_ADDR
// side := GetSide ( unit ) ;
9864: LD_ADDR_VAR 0 3
9868: PUSH
9869: LD_VAR 0 1
9873: PPUSH
9874: CALL_OW 255
9878: ST_TO_ADDR
// nat := GetNation ( unit ) ;
9879: LD_ADDR_VAR 0 4
9883: PUSH
9884: LD_VAR 0 1
9888: PPUSH
9889: CALL_OW 248
9893: ST_TO_ADDR
// case nat of 1 :
9894: LD_VAR 0 4
9898: PUSH
9899: LD_INT 1
9901: DOUBLE
9902: EQUAL
9903: IFTRUE 9907
9905: GO 9918
9907: POP
// tech := tech_lassight ; 2 :
9908: LD_ADDR_VAR 0 5
9912: PUSH
9913: LD_INT 12
9915: ST_TO_ADDR
9916: GO 9957
9918: LD_INT 2
9920: DOUBLE
9921: EQUAL
9922: IFTRUE 9926
9924: GO 9937
9926: POP
// tech := tech_mortar ; 3 :
9927: LD_ADDR_VAR 0 5
9931: PUSH
9932: LD_INT 41
9934: ST_TO_ADDR
9935: GO 9957
9937: LD_INT 3
9939: DOUBLE
9940: EQUAL
9941: IFTRUE 9945
9943: GO 9956
9945: POP
// tech := tech_bazooka ; end ;
9946: LD_ADDR_VAR 0 5
9950: PUSH
9951: LD_INT 44
9953: ST_TO_ADDR
9954: GO 9957
9956: POP
// if Researched ( side , tech ) then
9957: LD_VAR 0 3
9961: PPUSH
9962: LD_VAR 0 5
9966: PPUSH
9967: CALL_OW 325
9971: IFFALSE 9998
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
9973: LD_ADDR_VAR 0 2
9977: PUSH
9978: LD_INT 5
9980: PUSH
9981: LD_INT 8
9983: PUSH
9984: LD_INT 9
9986: PUSH
9987: EMPTY
9988: LIST
9989: LIST
9990: LIST
9991: PUSH
9992: LD_VAR 0 4
9996: ARRAY
9997: ST_TO_ADDR
// end ;
9998: LD_VAR 0 2
10002: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
10003: LD_INT 0
10005: PPUSH
10006: PPUSH
10007: PPUSH
// if not mines then
10008: LD_VAR 0 2
10012: NOT
10013: IFFALSE 10017
// exit ;
10015: GO 10161
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
10017: LD_ADDR_VAR 0 5
10021: PUSH
10022: LD_INT 81
10024: PUSH
10025: LD_VAR 0 1
10029: PUSH
10030: EMPTY
10031: LIST
10032: LIST
10033: PUSH
10034: LD_INT 3
10036: PUSH
10037: LD_INT 21
10039: PUSH
10040: LD_INT 3
10042: PUSH
10043: EMPTY
10044: LIST
10045: LIST
10046: PUSH
10047: EMPTY
10048: LIST
10049: LIST
10050: PUSH
10051: EMPTY
10052: LIST
10053: LIST
10054: PPUSH
10055: CALL_OW 69
10059: ST_TO_ADDR
// for i in mines do
10060: LD_ADDR_VAR 0 4
10064: PUSH
10065: LD_VAR 0 2
10069: PUSH
10070: FOR_IN
10071: IFFALSE 10159
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
10073: LD_VAR 0 4
10077: PUSH
10078: LD_INT 1
10080: ARRAY
10081: PPUSH
10082: LD_VAR 0 4
10086: PUSH
10087: LD_INT 2
10089: ARRAY
10090: PPUSH
10091: CALL_OW 458
10095: NOT
10096: IFFALSE 10100
// continue ;
10098: GO 10070
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
10100: LD_VAR 0 4
10104: PUSH
10105: LD_INT 1
10107: ARRAY
10108: PPUSH
10109: LD_VAR 0 4
10113: PUSH
10114: LD_INT 2
10116: ARRAY
10117: PPUSH
10118: CALL_OW 428
10122: PUSH
10123: LD_VAR 0 5
10127: IN
10128: IFFALSE 10157
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
10130: LD_VAR 0 4
10134: PUSH
10135: LD_INT 1
10137: ARRAY
10138: PPUSH
10139: LD_VAR 0 4
10143: PUSH
10144: LD_INT 2
10146: ARRAY
10147: PPUSH
10148: LD_VAR 0 1
10152: PPUSH
10153: CALL_OW 456
// end ;
10157: GO 10070
10159: POP
10160: POP
// end ;
10161: LD_VAR 0 3
10165: RET
// export function Count ( array ) ; var i ; begin
10166: LD_INT 0
10168: PPUSH
10169: PPUSH
// result := 0 ;
10170: LD_ADDR_VAR 0 2
10174: PUSH
10175: LD_INT 0
10177: ST_TO_ADDR
// for i in array do
10178: LD_ADDR_VAR 0 3
10182: PUSH
10183: LD_VAR 0 1
10187: PUSH
10188: FOR_IN
10189: IFFALSE 10213
// if i then
10191: LD_VAR 0 3
10195: IFFALSE 10211
// result := result + 1 ;
10197: LD_ADDR_VAR 0 2
10201: PUSH
10202: LD_VAR 0 2
10206: PUSH
10207: LD_INT 1
10209: PLUS
10210: ST_TO_ADDR
10211: GO 10188
10213: POP
10214: POP
// end ;
10215: LD_VAR 0 2
10219: RET
// export function IsEmpty ( building ) ; begin
10220: LD_INT 0
10222: PPUSH
// if not building then
10223: LD_VAR 0 1
10227: NOT
10228: IFFALSE 10232
// exit ;
10230: GO 10275
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
10232: LD_ADDR_VAR 0 2
10236: PUSH
10237: LD_VAR 0 1
10241: PUSH
10242: LD_INT 22
10244: PUSH
10245: LD_VAR 0 1
10249: PPUSH
10250: CALL_OW 255
10254: PUSH
10255: EMPTY
10256: LIST
10257: LIST
10258: PUSH
10259: LD_INT 58
10261: PUSH
10262: EMPTY
10263: LIST
10264: PUSH
10265: EMPTY
10266: LIST
10267: LIST
10268: PPUSH
10269: CALL_OW 69
10273: IN
10274: ST_TO_ADDR
// end ;
10275: LD_VAR 0 2
10279: RET
// export function IsNotFull ( building ) ; begin
10280: LD_INT 0
10282: PPUSH
// if not building then
10283: LD_VAR 0 1
10287: NOT
10288: IFFALSE 10292
// exit ;
10290: GO 10311
// result := UnitsInside ( building ) < 6 ;
10292: LD_ADDR_VAR 0 2
10296: PUSH
10297: LD_VAR 0 1
10301: PPUSH
10302: CALL_OW 313
10306: PUSH
10307: LD_INT 6
10309: LESS
10310: ST_TO_ADDR
// end ;
10311: LD_VAR 0 2
10315: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
10316: LD_INT 0
10318: PPUSH
10319: PPUSH
10320: PPUSH
10321: PPUSH
// tmp := [ ] ;
10322: LD_ADDR_VAR 0 3
10326: PUSH
10327: EMPTY
10328: ST_TO_ADDR
// list := [ ] ;
10329: LD_ADDR_VAR 0 5
10333: PUSH
10334: EMPTY
10335: ST_TO_ADDR
// for i = 16 to 25 do
10336: LD_ADDR_VAR 0 4
10340: PUSH
10341: DOUBLE
10342: LD_INT 16
10344: DEC
10345: ST_TO_ADDR
10346: LD_INT 25
10348: PUSH
10349: FOR_TO
10350: IFFALSE 10423
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
10352: LD_ADDR_VAR 0 3
10356: PUSH
10357: LD_VAR 0 3
10361: PUSH
10362: LD_INT 22
10364: PUSH
10365: LD_VAR 0 1
10369: PPUSH
10370: CALL_OW 255
10374: PUSH
10375: EMPTY
10376: LIST
10377: LIST
10378: PUSH
10379: LD_INT 91
10381: PUSH
10382: LD_VAR 0 1
10386: PUSH
10387: LD_INT 6
10389: PUSH
10390: EMPTY
10391: LIST
10392: LIST
10393: LIST
10394: PUSH
10395: LD_INT 30
10397: PUSH
10398: LD_VAR 0 4
10402: PUSH
10403: EMPTY
10404: LIST
10405: LIST
10406: PUSH
10407: EMPTY
10408: LIST
10409: LIST
10410: LIST
10411: PUSH
10412: EMPTY
10413: LIST
10414: PPUSH
10415: CALL_OW 69
10419: ADD
10420: ST_TO_ADDR
10421: GO 10349
10423: POP
10424: POP
// for i = 1 to tmp do
10425: LD_ADDR_VAR 0 4
10429: PUSH
10430: DOUBLE
10431: LD_INT 1
10433: DEC
10434: ST_TO_ADDR
10435: LD_VAR 0 3
10439: PUSH
10440: FOR_TO
10441: IFFALSE 10529
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
10443: LD_ADDR_VAR 0 5
10447: PUSH
10448: LD_VAR 0 5
10452: PUSH
10453: LD_VAR 0 3
10457: PUSH
10458: LD_VAR 0 4
10462: ARRAY
10463: PPUSH
10464: CALL_OW 266
10468: PUSH
10469: LD_VAR 0 3
10473: PUSH
10474: LD_VAR 0 4
10478: ARRAY
10479: PPUSH
10480: CALL_OW 250
10484: PUSH
10485: LD_VAR 0 3
10489: PUSH
10490: LD_VAR 0 4
10494: ARRAY
10495: PPUSH
10496: CALL_OW 251
10500: PUSH
10501: LD_VAR 0 3
10505: PUSH
10506: LD_VAR 0 4
10510: ARRAY
10511: PPUSH
10512: CALL_OW 254
10516: PUSH
10517: EMPTY
10518: LIST
10519: LIST
10520: LIST
10521: LIST
10522: PUSH
10523: EMPTY
10524: LIST
10525: ADD
10526: ST_TO_ADDR
10527: GO 10440
10529: POP
10530: POP
// result := list ;
10531: LD_ADDR_VAR 0 2
10535: PUSH
10536: LD_VAR 0 5
10540: ST_TO_ADDR
// end ;
10541: LD_VAR 0 2
10545: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
10546: LD_INT 0
10548: PPUSH
10549: PPUSH
10550: PPUSH
10551: PPUSH
10552: PPUSH
10553: PPUSH
10554: PPUSH
// if not factory then
10555: LD_VAR 0 1
10559: NOT
10560: IFFALSE 10564
// exit ;
10562: GO 11157
// if control = control_apeman then
10564: LD_VAR 0 4
10568: PUSH
10569: LD_INT 5
10571: EQUAL
10572: IFFALSE 10681
// begin tmp := UnitsInside ( factory ) ;
10574: LD_ADDR_VAR 0 8
10578: PUSH
10579: LD_VAR 0 1
10583: PPUSH
10584: CALL_OW 313
10588: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
10589: LD_VAR 0 8
10593: PPUSH
10594: LD_INT 25
10596: PUSH
10597: LD_INT 12
10599: PUSH
10600: EMPTY
10601: LIST
10602: LIST
10603: PPUSH
10604: CALL_OW 72
10608: NOT
10609: IFFALSE 10619
// control := control_manual ;
10611: LD_ADDR_VAR 0 4
10615: PUSH
10616: LD_INT 1
10618: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
10619: LD_ADDR_VAR 0 8
10623: PUSH
10624: LD_VAR 0 1
10628: PPUSH
10629: CALL 10316 0 1
10633: ST_TO_ADDR
// if tmp then
10634: LD_VAR 0 8
10638: IFFALSE 10681
// begin for i in tmp do
10640: LD_ADDR_VAR 0 7
10644: PUSH
10645: LD_VAR 0 8
10649: PUSH
10650: FOR_IN
10651: IFFALSE 10679
// if i [ 1 ] = b_ext_radio then
10653: LD_VAR 0 7
10657: PUSH
10658: LD_INT 1
10660: ARRAY
10661: PUSH
10662: LD_INT 22
10664: EQUAL
10665: IFFALSE 10677
// begin control := control_remote ;
10667: LD_ADDR_VAR 0 4
10671: PUSH
10672: LD_INT 2
10674: ST_TO_ADDR
// break ;
10675: GO 10679
// end ;
10677: GO 10650
10679: POP
10680: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
10681: LD_VAR 0 1
10685: PPUSH
10686: LD_VAR 0 2
10690: PPUSH
10691: LD_VAR 0 3
10695: PPUSH
10696: LD_VAR 0 4
10700: PPUSH
10701: LD_VAR 0 5
10705: PPUSH
10706: CALL_OW 448
10710: IFFALSE 10745
// begin result := [ chassis , engine , control , weapon ] ;
10712: LD_ADDR_VAR 0 6
10716: PUSH
10717: LD_VAR 0 2
10721: PUSH
10722: LD_VAR 0 3
10726: PUSH
10727: LD_VAR 0 4
10731: PUSH
10732: LD_VAR 0 5
10736: PUSH
10737: EMPTY
10738: LIST
10739: LIST
10740: LIST
10741: LIST
10742: ST_TO_ADDR
// exit ;
10743: GO 11157
// end ; _chassis := AvailableChassisList ( factory ) ;
10745: LD_ADDR_VAR 0 9
10749: PUSH
10750: LD_VAR 0 1
10754: PPUSH
10755: CALL_OW 475
10759: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
10760: LD_ADDR_VAR 0 11
10764: PUSH
10765: LD_VAR 0 1
10769: PPUSH
10770: CALL_OW 476
10774: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
10775: LD_ADDR_VAR 0 12
10779: PUSH
10780: LD_VAR 0 1
10784: PPUSH
10785: CALL_OW 477
10789: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
10790: LD_ADDR_VAR 0 10
10794: PUSH
10795: LD_VAR 0 1
10799: PPUSH
10800: CALL_OW 478
10804: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
10805: LD_VAR 0 9
10809: NOT
10810: PUSH
10811: LD_VAR 0 11
10815: NOT
10816: OR
10817: PUSH
10818: LD_VAR 0 12
10822: NOT
10823: OR
10824: PUSH
10825: LD_VAR 0 10
10829: NOT
10830: OR
10831: IFFALSE 10866
// begin result := [ chassis , engine , control , weapon ] ;
10833: LD_ADDR_VAR 0 6
10837: PUSH
10838: LD_VAR 0 2
10842: PUSH
10843: LD_VAR 0 3
10847: PUSH
10848: LD_VAR 0 4
10852: PUSH
10853: LD_VAR 0 5
10857: PUSH
10858: EMPTY
10859: LIST
10860: LIST
10861: LIST
10862: LIST
10863: ST_TO_ADDR
// exit ;
10864: GO 11157
// end ; if not chassis in _chassis then
10866: LD_VAR 0 2
10870: PUSH
10871: LD_VAR 0 9
10875: IN
10876: NOT
10877: IFFALSE 10903
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
10879: LD_ADDR_VAR 0 2
10883: PUSH
10884: LD_VAR 0 9
10888: PUSH
10889: LD_INT 1
10891: PPUSH
10892: LD_VAR 0 9
10896: PPUSH
10897: CALL_OW 12
10901: ARRAY
10902: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
10903: LD_VAR 0 2
10907: PPUSH
10908: LD_VAR 0 3
10912: PPUSH
10913: CALL 11162 0 2
10917: NOT
10918: IFFALSE 10977
// repeat engine := _engine [ 1 ] ;
10920: LD_ADDR_VAR 0 3
10924: PUSH
10925: LD_VAR 0 11
10929: PUSH
10930: LD_INT 1
10932: ARRAY
10933: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
10934: LD_ADDR_VAR 0 11
10938: PUSH
10939: LD_VAR 0 11
10943: PPUSH
10944: LD_INT 1
10946: PPUSH
10947: CALL_OW 3
10951: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
10952: LD_VAR 0 2
10956: PPUSH
10957: LD_VAR 0 3
10961: PPUSH
10962: CALL 11162 0 2
10966: PUSH
10967: LD_VAR 0 11
10971: PUSH
10972: EMPTY
10973: EQUAL
10974: OR
10975: IFFALSE 10920
// if not control in _control then
10977: LD_VAR 0 4
10981: PUSH
10982: LD_VAR 0 12
10986: IN
10987: NOT
10988: IFFALSE 11014
// control := _control [ rand ( 1 , _control ) ] ;
10990: LD_ADDR_VAR 0 4
10994: PUSH
10995: LD_VAR 0 12
10999: PUSH
11000: LD_INT 1
11002: PPUSH
11003: LD_VAR 0 12
11007: PPUSH
11008: CALL_OW 12
11012: ARRAY
11013: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
11014: LD_VAR 0 2
11018: PPUSH
11019: LD_VAR 0 5
11023: PPUSH
11024: CALL 11382 0 2
11028: NOT
11029: IFFALSE 11088
// repeat weapon := _weapon [ 1 ] ;
11031: LD_ADDR_VAR 0 5
11035: PUSH
11036: LD_VAR 0 10
11040: PUSH
11041: LD_INT 1
11043: ARRAY
11044: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
11045: LD_ADDR_VAR 0 10
11049: PUSH
11050: LD_VAR 0 10
11054: PPUSH
11055: LD_INT 1
11057: PPUSH
11058: CALL_OW 3
11062: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
11063: LD_VAR 0 2
11067: PPUSH
11068: LD_VAR 0 5
11072: PPUSH
11073: CALL 11382 0 2
11077: PUSH
11078: LD_VAR 0 10
11082: PUSH
11083: EMPTY
11084: EQUAL
11085: OR
11086: IFFALSE 11031
// result := [ ] ;
11088: LD_ADDR_VAR 0 6
11092: PUSH
11093: EMPTY
11094: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
11095: LD_VAR 0 1
11099: PPUSH
11100: LD_VAR 0 2
11104: PPUSH
11105: LD_VAR 0 3
11109: PPUSH
11110: LD_VAR 0 4
11114: PPUSH
11115: LD_VAR 0 5
11119: PPUSH
11120: CALL_OW 448
11124: IFFALSE 11157
// result := [ chassis , engine , control , weapon ] ;
11126: LD_ADDR_VAR 0 6
11130: PUSH
11131: LD_VAR 0 2
11135: PUSH
11136: LD_VAR 0 3
11140: PUSH
11141: LD_VAR 0 4
11145: PUSH
11146: LD_VAR 0 5
11150: PUSH
11151: EMPTY
11152: LIST
11153: LIST
11154: LIST
11155: LIST
11156: ST_TO_ADDR
// end ;
11157: LD_VAR 0 6
11161: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
11162: LD_INT 0
11164: PPUSH
// if not chassis or not engine then
11165: LD_VAR 0 1
11169: NOT
11170: PUSH
11171: LD_VAR 0 2
11175: NOT
11176: OR
11177: IFFALSE 11181
// exit ;
11179: GO 11377
// case engine of engine_solar :
11181: LD_VAR 0 2
11185: PUSH
11186: LD_INT 2
11188: DOUBLE
11189: EQUAL
11190: IFTRUE 11194
11192: GO 11232
11194: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
11195: LD_ADDR_VAR 0 3
11199: PUSH
11200: LD_INT 11
11202: PUSH
11203: LD_INT 12
11205: PUSH
11206: LD_INT 13
11208: PUSH
11209: LD_INT 14
11211: PUSH
11212: LD_INT 1
11214: PUSH
11215: LD_INT 2
11217: PUSH
11218: LD_INT 3
11220: PUSH
11221: EMPTY
11222: LIST
11223: LIST
11224: LIST
11225: LIST
11226: LIST
11227: LIST
11228: LIST
11229: ST_TO_ADDR
11230: GO 11361
11232: LD_INT 1
11234: DOUBLE
11235: EQUAL
11236: IFTRUE 11240
11238: GO 11302
11240: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
11241: LD_ADDR_VAR 0 3
11245: PUSH
11246: LD_INT 11
11248: PUSH
11249: LD_INT 12
11251: PUSH
11252: LD_INT 13
11254: PUSH
11255: LD_INT 14
11257: PUSH
11258: LD_INT 1
11260: PUSH
11261: LD_INT 2
11263: PUSH
11264: LD_INT 3
11266: PUSH
11267: LD_INT 4
11269: PUSH
11270: LD_INT 5
11272: PUSH
11273: LD_INT 21
11275: PUSH
11276: LD_INT 23
11278: PUSH
11279: LD_INT 22
11281: PUSH
11282: LD_INT 24
11284: PUSH
11285: EMPTY
11286: LIST
11287: LIST
11288: LIST
11289: LIST
11290: LIST
11291: LIST
11292: LIST
11293: LIST
11294: LIST
11295: LIST
11296: LIST
11297: LIST
11298: LIST
11299: ST_TO_ADDR
11300: GO 11361
11302: LD_INT 3
11304: DOUBLE
11305: EQUAL
11306: IFTRUE 11310
11308: GO 11360
11310: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
11311: LD_ADDR_VAR 0 3
11315: PUSH
11316: LD_INT 13
11318: PUSH
11319: LD_INT 14
11321: PUSH
11322: LD_INT 2
11324: PUSH
11325: LD_INT 3
11327: PUSH
11328: LD_INT 4
11330: PUSH
11331: LD_INT 5
11333: PUSH
11334: LD_INT 21
11336: PUSH
11337: LD_INT 22
11339: PUSH
11340: LD_INT 23
11342: PUSH
11343: LD_INT 24
11345: PUSH
11346: EMPTY
11347: LIST
11348: LIST
11349: LIST
11350: LIST
11351: LIST
11352: LIST
11353: LIST
11354: LIST
11355: LIST
11356: LIST
11357: ST_TO_ADDR
11358: GO 11361
11360: POP
// result := ( chassis in result ) ;
11361: LD_ADDR_VAR 0 3
11365: PUSH
11366: LD_VAR 0 1
11370: PUSH
11371: LD_VAR 0 3
11375: IN
11376: ST_TO_ADDR
// end ;
11377: LD_VAR 0 3
11381: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
11382: LD_INT 0
11384: PPUSH
// if not chassis or not weapon then
11385: LD_VAR 0 1
11389: NOT
11390: PUSH
11391: LD_VAR 0 2
11395: NOT
11396: OR
11397: IFFALSE 11401
// exit ;
11399: GO 12427
// case weapon of us_machine_gun :
11401: LD_VAR 0 2
11405: PUSH
11406: LD_INT 2
11408: DOUBLE
11409: EQUAL
11410: IFTRUE 11414
11412: GO 11444
11414: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
11415: LD_ADDR_VAR 0 3
11419: PUSH
11420: LD_INT 1
11422: PUSH
11423: LD_INT 2
11425: PUSH
11426: LD_INT 3
11428: PUSH
11429: LD_INT 4
11431: PUSH
11432: LD_INT 5
11434: PUSH
11435: EMPTY
11436: LIST
11437: LIST
11438: LIST
11439: LIST
11440: LIST
11441: ST_TO_ADDR
11442: GO 12411
11444: LD_INT 3
11446: DOUBLE
11447: EQUAL
11448: IFTRUE 11452
11450: GO 11482
11452: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
11453: LD_ADDR_VAR 0 3
11457: PUSH
11458: LD_INT 1
11460: PUSH
11461: LD_INT 2
11463: PUSH
11464: LD_INT 3
11466: PUSH
11467: LD_INT 4
11469: PUSH
11470: LD_INT 5
11472: PUSH
11473: EMPTY
11474: LIST
11475: LIST
11476: LIST
11477: LIST
11478: LIST
11479: ST_TO_ADDR
11480: GO 12411
11482: LD_INT 11
11484: DOUBLE
11485: EQUAL
11486: IFTRUE 11490
11488: GO 11520
11490: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
11491: LD_ADDR_VAR 0 3
11495: PUSH
11496: LD_INT 1
11498: PUSH
11499: LD_INT 2
11501: PUSH
11502: LD_INT 3
11504: PUSH
11505: LD_INT 4
11507: PUSH
11508: LD_INT 5
11510: PUSH
11511: EMPTY
11512: LIST
11513: LIST
11514: LIST
11515: LIST
11516: LIST
11517: ST_TO_ADDR
11518: GO 12411
11520: LD_INT 4
11522: DOUBLE
11523: EQUAL
11524: IFTRUE 11528
11526: GO 11554
11528: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
11529: LD_ADDR_VAR 0 3
11533: PUSH
11534: LD_INT 2
11536: PUSH
11537: LD_INT 3
11539: PUSH
11540: LD_INT 4
11542: PUSH
11543: LD_INT 5
11545: PUSH
11546: EMPTY
11547: LIST
11548: LIST
11549: LIST
11550: LIST
11551: ST_TO_ADDR
11552: GO 12411
11554: LD_INT 5
11556: DOUBLE
11557: EQUAL
11558: IFTRUE 11562
11560: GO 11588
11562: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
11563: LD_ADDR_VAR 0 3
11567: PUSH
11568: LD_INT 2
11570: PUSH
11571: LD_INT 3
11573: PUSH
11574: LD_INT 4
11576: PUSH
11577: LD_INT 5
11579: PUSH
11580: EMPTY
11581: LIST
11582: LIST
11583: LIST
11584: LIST
11585: ST_TO_ADDR
11586: GO 12411
11588: LD_INT 9
11590: DOUBLE
11591: EQUAL
11592: IFTRUE 11596
11594: GO 11622
11596: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
11597: LD_ADDR_VAR 0 3
11601: PUSH
11602: LD_INT 2
11604: PUSH
11605: LD_INT 3
11607: PUSH
11608: LD_INT 4
11610: PUSH
11611: LD_INT 5
11613: PUSH
11614: EMPTY
11615: LIST
11616: LIST
11617: LIST
11618: LIST
11619: ST_TO_ADDR
11620: GO 12411
11622: LD_INT 7
11624: DOUBLE
11625: EQUAL
11626: IFTRUE 11630
11628: GO 11656
11630: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
11631: LD_ADDR_VAR 0 3
11635: PUSH
11636: LD_INT 2
11638: PUSH
11639: LD_INT 3
11641: PUSH
11642: LD_INT 4
11644: PUSH
11645: LD_INT 5
11647: PUSH
11648: EMPTY
11649: LIST
11650: LIST
11651: LIST
11652: LIST
11653: ST_TO_ADDR
11654: GO 12411
11656: LD_INT 12
11658: DOUBLE
11659: EQUAL
11660: IFTRUE 11664
11662: GO 11690
11664: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
11665: LD_ADDR_VAR 0 3
11669: PUSH
11670: LD_INT 2
11672: PUSH
11673: LD_INT 3
11675: PUSH
11676: LD_INT 4
11678: PUSH
11679: LD_INT 5
11681: PUSH
11682: EMPTY
11683: LIST
11684: LIST
11685: LIST
11686: LIST
11687: ST_TO_ADDR
11688: GO 12411
11690: LD_INT 13
11692: DOUBLE
11693: EQUAL
11694: IFTRUE 11698
11696: GO 11724
11698: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
11699: LD_ADDR_VAR 0 3
11703: PUSH
11704: LD_INT 2
11706: PUSH
11707: LD_INT 3
11709: PUSH
11710: LD_INT 4
11712: PUSH
11713: LD_INT 5
11715: PUSH
11716: EMPTY
11717: LIST
11718: LIST
11719: LIST
11720: LIST
11721: ST_TO_ADDR
11722: GO 12411
11724: LD_INT 14
11726: DOUBLE
11727: EQUAL
11728: IFTRUE 11732
11730: GO 11750
11732: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
11733: LD_ADDR_VAR 0 3
11737: PUSH
11738: LD_INT 4
11740: PUSH
11741: LD_INT 5
11743: PUSH
11744: EMPTY
11745: LIST
11746: LIST
11747: ST_TO_ADDR
11748: GO 12411
11750: LD_INT 6
11752: DOUBLE
11753: EQUAL
11754: IFTRUE 11758
11756: GO 11776
11758: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
11759: LD_ADDR_VAR 0 3
11763: PUSH
11764: LD_INT 4
11766: PUSH
11767: LD_INT 5
11769: PUSH
11770: EMPTY
11771: LIST
11772: LIST
11773: ST_TO_ADDR
11774: GO 12411
11776: LD_INT 10
11778: DOUBLE
11779: EQUAL
11780: IFTRUE 11784
11782: GO 11802
11784: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
11785: LD_ADDR_VAR 0 3
11789: PUSH
11790: LD_INT 4
11792: PUSH
11793: LD_INT 5
11795: PUSH
11796: EMPTY
11797: LIST
11798: LIST
11799: ST_TO_ADDR
11800: GO 12411
11802: LD_INT 22
11804: DOUBLE
11805: EQUAL
11806: IFTRUE 11810
11808: GO 11836
11810: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
11811: LD_ADDR_VAR 0 3
11815: PUSH
11816: LD_INT 11
11818: PUSH
11819: LD_INT 12
11821: PUSH
11822: LD_INT 13
11824: PUSH
11825: LD_INT 14
11827: PUSH
11828: EMPTY
11829: LIST
11830: LIST
11831: LIST
11832: LIST
11833: ST_TO_ADDR
11834: GO 12411
11836: LD_INT 23
11838: DOUBLE
11839: EQUAL
11840: IFTRUE 11844
11842: GO 11870
11844: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
11845: LD_ADDR_VAR 0 3
11849: PUSH
11850: LD_INT 11
11852: PUSH
11853: LD_INT 12
11855: PUSH
11856: LD_INT 13
11858: PUSH
11859: LD_INT 14
11861: PUSH
11862: EMPTY
11863: LIST
11864: LIST
11865: LIST
11866: LIST
11867: ST_TO_ADDR
11868: GO 12411
11870: LD_INT 24
11872: DOUBLE
11873: EQUAL
11874: IFTRUE 11878
11876: GO 11904
11878: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
11879: LD_ADDR_VAR 0 3
11883: PUSH
11884: LD_INT 11
11886: PUSH
11887: LD_INT 12
11889: PUSH
11890: LD_INT 13
11892: PUSH
11893: LD_INT 14
11895: PUSH
11896: EMPTY
11897: LIST
11898: LIST
11899: LIST
11900: LIST
11901: ST_TO_ADDR
11902: GO 12411
11904: LD_INT 30
11906: DOUBLE
11907: EQUAL
11908: IFTRUE 11912
11910: GO 11938
11912: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
11913: LD_ADDR_VAR 0 3
11917: PUSH
11918: LD_INT 11
11920: PUSH
11921: LD_INT 12
11923: PUSH
11924: LD_INT 13
11926: PUSH
11927: LD_INT 14
11929: PUSH
11930: EMPTY
11931: LIST
11932: LIST
11933: LIST
11934: LIST
11935: ST_TO_ADDR
11936: GO 12411
11938: LD_INT 25
11940: DOUBLE
11941: EQUAL
11942: IFTRUE 11946
11944: GO 11964
11946: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
11947: LD_ADDR_VAR 0 3
11951: PUSH
11952: LD_INT 13
11954: PUSH
11955: LD_INT 14
11957: PUSH
11958: EMPTY
11959: LIST
11960: LIST
11961: ST_TO_ADDR
11962: GO 12411
11964: LD_INT 27
11966: DOUBLE
11967: EQUAL
11968: IFTRUE 11972
11970: GO 11990
11972: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
11973: LD_ADDR_VAR 0 3
11977: PUSH
11978: LD_INT 13
11980: PUSH
11981: LD_INT 14
11983: PUSH
11984: EMPTY
11985: LIST
11986: LIST
11987: ST_TO_ADDR
11988: GO 12411
11990: LD_INT 28
11992: DOUBLE
11993: EQUAL
11994: IFTRUE 11998
11996: GO 12016
11998: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
11999: LD_ADDR_VAR 0 3
12003: PUSH
12004: LD_INT 13
12006: PUSH
12007: LD_INT 14
12009: PUSH
12010: EMPTY
12011: LIST
12012: LIST
12013: ST_TO_ADDR
12014: GO 12411
12016: LD_INT 29
12018: DOUBLE
12019: EQUAL
12020: IFTRUE 12024
12022: GO 12042
12024: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
12025: LD_ADDR_VAR 0 3
12029: PUSH
12030: LD_INT 13
12032: PUSH
12033: LD_INT 14
12035: PUSH
12036: EMPTY
12037: LIST
12038: LIST
12039: ST_TO_ADDR
12040: GO 12411
12042: LD_INT 31
12044: DOUBLE
12045: EQUAL
12046: IFTRUE 12050
12048: GO 12068
12050: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
12051: LD_ADDR_VAR 0 3
12055: PUSH
12056: LD_INT 13
12058: PUSH
12059: LD_INT 14
12061: PUSH
12062: EMPTY
12063: LIST
12064: LIST
12065: ST_TO_ADDR
12066: GO 12411
12068: LD_INT 26
12070: DOUBLE
12071: EQUAL
12072: IFTRUE 12076
12074: GO 12094
12076: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
12077: LD_ADDR_VAR 0 3
12081: PUSH
12082: LD_INT 13
12084: PUSH
12085: LD_INT 14
12087: PUSH
12088: EMPTY
12089: LIST
12090: LIST
12091: ST_TO_ADDR
12092: GO 12411
12094: LD_INT 42
12096: DOUBLE
12097: EQUAL
12098: IFTRUE 12102
12100: GO 12128
12102: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
12103: LD_ADDR_VAR 0 3
12107: PUSH
12108: LD_INT 21
12110: PUSH
12111: LD_INT 22
12113: PUSH
12114: LD_INT 23
12116: PUSH
12117: LD_INT 24
12119: PUSH
12120: EMPTY
12121: LIST
12122: LIST
12123: LIST
12124: LIST
12125: ST_TO_ADDR
12126: GO 12411
12128: LD_INT 43
12130: DOUBLE
12131: EQUAL
12132: IFTRUE 12136
12134: GO 12162
12136: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
12137: LD_ADDR_VAR 0 3
12141: PUSH
12142: LD_INT 21
12144: PUSH
12145: LD_INT 22
12147: PUSH
12148: LD_INT 23
12150: PUSH
12151: LD_INT 24
12153: PUSH
12154: EMPTY
12155: LIST
12156: LIST
12157: LIST
12158: LIST
12159: ST_TO_ADDR
12160: GO 12411
12162: LD_INT 44
12164: DOUBLE
12165: EQUAL
12166: IFTRUE 12170
12168: GO 12196
12170: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
12171: LD_ADDR_VAR 0 3
12175: PUSH
12176: LD_INT 21
12178: PUSH
12179: LD_INT 22
12181: PUSH
12182: LD_INT 23
12184: PUSH
12185: LD_INT 24
12187: PUSH
12188: EMPTY
12189: LIST
12190: LIST
12191: LIST
12192: LIST
12193: ST_TO_ADDR
12194: GO 12411
12196: LD_INT 45
12198: DOUBLE
12199: EQUAL
12200: IFTRUE 12204
12202: GO 12230
12204: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
12205: LD_ADDR_VAR 0 3
12209: PUSH
12210: LD_INT 21
12212: PUSH
12213: LD_INT 22
12215: PUSH
12216: LD_INT 23
12218: PUSH
12219: LD_INT 24
12221: PUSH
12222: EMPTY
12223: LIST
12224: LIST
12225: LIST
12226: LIST
12227: ST_TO_ADDR
12228: GO 12411
12230: LD_INT 49
12232: DOUBLE
12233: EQUAL
12234: IFTRUE 12238
12236: GO 12264
12238: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
12239: LD_ADDR_VAR 0 3
12243: PUSH
12244: LD_INT 21
12246: PUSH
12247: LD_INT 22
12249: PUSH
12250: LD_INT 23
12252: PUSH
12253: LD_INT 24
12255: PUSH
12256: EMPTY
12257: LIST
12258: LIST
12259: LIST
12260: LIST
12261: ST_TO_ADDR
12262: GO 12411
12264: LD_INT 51
12266: DOUBLE
12267: EQUAL
12268: IFTRUE 12272
12270: GO 12298
12272: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
12273: LD_ADDR_VAR 0 3
12277: PUSH
12278: LD_INT 21
12280: PUSH
12281: LD_INT 22
12283: PUSH
12284: LD_INT 23
12286: PUSH
12287: LD_INT 24
12289: PUSH
12290: EMPTY
12291: LIST
12292: LIST
12293: LIST
12294: LIST
12295: ST_TO_ADDR
12296: GO 12411
12298: LD_INT 52
12300: DOUBLE
12301: EQUAL
12302: IFTRUE 12306
12304: GO 12332
12306: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
12307: LD_ADDR_VAR 0 3
12311: PUSH
12312: LD_INT 21
12314: PUSH
12315: LD_INT 22
12317: PUSH
12318: LD_INT 23
12320: PUSH
12321: LD_INT 24
12323: PUSH
12324: EMPTY
12325: LIST
12326: LIST
12327: LIST
12328: LIST
12329: ST_TO_ADDR
12330: GO 12411
12332: LD_INT 53
12334: DOUBLE
12335: EQUAL
12336: IFTRUE 12340
12338: GO 12358
12340: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
12341: LD_ADDR_VAR 0 3
12345: PUSH
12346: LD_INT 23
12348: PUSH
12349: LD_INT 24
12351: PUSH
12352: EMPTY
12353: LIST
12354: LIST
12355: ST_TO_ADDR
12356: GO 12411
12358: LD_INT 46
12360: DOUBLE
12361: EQUAL
12362: IFTRUE 12366
12364: GO 12384
12366: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
12367: LD_ADDR_VAR 0 3
12371: PUSH
12372: LD_INT 23
12374: PUSH
12375: LD_INT 24
12377: PUSH
12378: EMPTY
12379: LIST
12380: LIST
12381: ST_TO_ADDR
12382: GO 12411
12384: LD_INT 47
12386: DOUBLE
12387: EQUAL
12388: IFTRUE 12392
12390: GO 12410
12392: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
12393: LD_ADDR_VAR 0 3
12397: PUSH
12398: LD_INT 23
12400: PUSH
12401: LD_INT 24
12403: PUSH
12404: EMPTY
12405: LIST
12406: LIST
12407: ST_TO_ADDR
12408: GO 12411
12410: POP
// result := ( chassis in result ) ;
12411: LD_ADDR_VAR 0 3
12415: PUSH
12416: LD_VAR 0 1
12420: PUSH
12421: LD_VAR 0 3
12425: IN
12426: ST_TO_ADDR
// end ;
12427: LD_VAR 0 3
12431: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
12432: LD_INT 0
12434: PPUSH
12435: PPUSH
12436: PPUSH
12437: PPUSH
12438: PPUSH
12439: PPUSH
12440: PPUSH
// result := array ;
12441: LD_ADDR_VAR 0 5
12445: PUSH
12446: LD_VAR 0 1
12450: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
12451: LD_VAR 0 1
12455: NOT
12456: PUSH
12457: LD_VAR 0 2
12461: NOT
12462: OR
12463: PUSH
12464: LD_VAR 0 3
12468: NOT
12469: OR
12470: PUSH
12471: LD_VAR 0 2
12475: PUSH
12476: LD_VAR 0 1
12480: GREATER
12481: OR
12482: PUSH
12483: LD_VAR 0 3
12487: PUSH
12488: LD_VAR 0 1
12492: GREATER
12493: OR
12494: IFFALSE 12498
// exit ;
12496: GO 12794
// if direction then
12498: LD_VAR 0 4
12502: IFFALSE 12566
// begin d := 1 ;
12504: LD_ADDR_VAR 0 9
12508: PUSH
12509: LD_INT 1
12511: ST_TO_ADDR
// if i_from > i_to then
12512: LD_VAR 0 2
12516: PUSH
12517: LD_VAR 0 3
12521: GREATER
12522: IFFALSE 12548
// length := ( array - i_from ) + i_to else
12524: LD_ADDR_VAR 0 11
12528: PUSH
12529: LD_VAR 0 1
12533: PUSH
12534: LD_VAR 0 2
12538: MINUS
12539: PUSH
12540: LD_VAR 0 3
12544: PLUS
12545: ST_TO_ADDR
12546: GO 12564
// length := i_to - i_from ;
12548: LD_ADDR_VAR 0 11
12552: PUSH
12553: LD_VAR 0 3
12557: PUSH
12558: LD_VAR 0 2
12562: MINUS
12563: ST_TO_ADDR
// end else
12564: GO 12627
// begin d := - 1 ;
12566: LD_ADDR_VAR 0 9
12570: PUSH
12571: LD_INT 1
12573: NEG
12574: ST_TO_ADDR
// if i_from > i_to then
12575: LD_VAR 0 2
12579: PUSH
12580: LD_VAR 0 3
12584: GREATER
12585: IFFALSE 12605
// length := i_from - i_to else
12587: LD_ADDR_VAR 0 11
12591: PUSH
12592: LD_VAR 0 2
12596: PUSH
12597: LD_VAR 0 3
12601: MINUS
12602: ST_TO_ADDR
12603: GO 12627
// length := ( array - i_to ) + i_from ;
12605: LD_ADDR_VAR 0 11
12609: PUSH
12610: LD_VAR 0 1
12614: PUSH
12615: LD_VAR 0 3
12619: MINUS
12620: PUSH
12621: LD_VAR 0 2
12625: PLUS
12626: ST_TO_ADDR
// end ; if not length then
12627: LD_VAR 0 11
12631: NOT
12632: IFFALSE 12636
// exit ;
12634: GO 12794
// tmp := array ;
12636: LD_ADDR_VAR 0 10
12640: PUSH
12641: LD_VAR 0 1
12645: ST_TO_ADDR
// for i = 1 to length do
12646: LD_ADDR_VAR 0 6
12650: PUSH
12651: DOUBLE
12652: LD_INT 1
12654: DEC
12655: ST_TO_ADDR
12656: LD_VAR 0 11
12660: PUSH
12661: FOR_TO
12662: IFFALSE 12782
// begin for j = 1 to array do
12664: LD_ADDR_VAR 0 7
12668: PUSH
12669: DOUBLE
12670: LD_INT 1
12672: DEC
12673: ST_TO_ADDR
12674: LD_VAR 0 1
12678: PUSH
12679: FOR_TO
12680: IFFALSE 12768
// begin k := j + d ;
12682: LD_ADDR_VAR 0 8
12686: PUSH
12687: LD_VAR 0 7
12691: PUSH
12692: LD_VAR 0 9
12696: PLUS
12697: ST_TO_ADDR
// if k > array then
12698: LD_VAR 0 8
12702: PUSH
12703: LD_VAR 0 1
12707: GREATER
12708: IFFALSE 12718
// k := 1 ;
12710: LD_ADDR_VAR 0 8
12714: PUSH
12715: LD_INT 1
12717: ST_TO_ADDR
// if not k then
12718: LD_VAR 0 8
12722: NOT
12723: IFFALSE 12735
// k := array ;
12725: LD_ADDR_VAR 0 8
12729: PUSH
12730: LD_VAR 0 1
12734: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
12735: LD_ADDR_VAR 0 10
12739: PUSH
12740: LD_VAR 0 10
12744: PPUSH
12745: LD_VAR 0 8
12749: PPUSH
12750: LD_VAR 0 1
12754: PUSH
12755: LD_VAR 0 7
12759: ARRAY
12760: PPUSH
12761: CALL_OW 1
12765: ST_TO_ADDR
// end ;
12766: GO 12679
12768: POP
12769: POP
// array := tmp ;
12770: LD_ADDR_VAR 0 1
12774: PUSH
12775: LD_VAR 0 10
12779: ST_TO_ADDR
// end ;
12780: GO 12661
12782: POP
12783: POP
// result := array ;
12784: LD_ADDR_VAR 0 5
12788: PUSH
12789: LD_VAR 0 1
12793: ST_TO_ADDR
// end ;
12794: LD_VAR 0 5
12798: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
12799: LD_INT 0
12801: PPUSH
12802: PPUSH
// result := 0 ;
12803: LD_ADDR_VAR 0 3
12807: PUSH
12808: LD_INT 0
12810: ST_TO_ADDR
// if not array or not value in array then
12811: LD_VAR 0 1
12815: NOT
12816: PUSH
12817: LD_VAR 0 2
12821: PUSH
12822: LD_VAR 0 1
12826: IN
12827: NOT
12828: OR
12829: IFFALSE 12833
// exit ;
12831: GO 12887
// for i = 1 to array do
12833: LD_ADDR_VAR 0 4
12837: PUSH
12838: DOUBLE
12839: LD_INT 1
12841: DEC
12842: ST_TO_ADDR
12843: LD_VAR 0 1
12847: PUSH
12848: FOR_TO
12849: IFFALSE 12885
// if value = array [ i ] then
12851: LD_VAR 0 2
12855: PUSH
12856: LD_VAR 0 1
12860: PUSH
12861: LD_VAR 0 4
12865: ARRAY
12866: EQUAL
12867: IFFALSE 12883
// begin result := i ;
12869: LD_ADDR_VAR 0 3
12873: PUSH
12874: LD_VAR 0 4
12878: ST_TO_ADDR
// exit ;
12879: POP
12880: POP
12881: GO 12887
// end ;
12883: GO 12848
12885: POP
12886: POP
// end ;
12887: LD_VAR 0 3
12891: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
12892: LD_INT 0
12894: PPUSH
// vc_chassis := chassis ;
12895: LD_ADDR_OWVAR 37
12899: PUSH
12900: LD_VAR 0 1
12904: ST_TO_ADDR
// vc_engine := engine ;
12905: LD_ADDR_OWVAR 39
12909: PUSH
12910: LD_VAR 0 2
12914: ST_TO_ADDR
// vc_control := control ;
12915: LD_ADDR_OWVAR 38
12919: PUSH
12920: LD_VAR 0 3
12924: ST_TO_ADDR
// vc_weapon := weapon ;
12925: LD_ADDR_OWVAR 40
12929: PUSH
12930: LD_VAR 0 4
12934: ST_TO_ADDR
// vc_fuel_battery := fuel ;
12935: LD_ADDR_OWVAR 41
12939: PUSH
12940: LD_VAR 0 5
12944: ST_TO_ADDR
// end ;
12945: LD_VAR 0 6
12949: RET
// export function WantPlant ( unit ) ; var task ; begin
12950: LD_INT 0
12952: PPUSH
12953: PPUSH
// result := false ;
12954: LD_ADDR_VAR 0 2
12958: PUSH
12959: LD_INT 0
12961: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
12962: LD_ADDR_VAR 0 3
12966: PUSH
12967: LD_VAR 0 1
12971: PPUSH
12972: CALL_OW 437
12976: ST_TO_ADDR
// if task then
12977: LD_VAR 0 3
12981: IFFALSE 13009
// if task [ 1 ] [ 1 ] = p then
12983: LD_VAR 0 3
12987: PUSH
12988: LD_INT 1
12990: ARRAY
12991: PUSH
12992: LD_INT 1
12994: ARRAY
12995: PUSH
12996: LD_STRING p
12998: EQUAL
12999: IFFALSE 13009
// result := true ;
13001: LD_ADDR_VAR 0 2
13005: PUSH
13006: LD_INT 1
13008: ST_TO_ADDR
// end ;
13009: LD_VAR 0 2
13013: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
13014: LD_INT 0
13016: PPUSH
13017: PPUSH
13018: PPUSH
13019: PPUSH
// if pos < 1 then
13020: LD_VAR 0 2
13024: PUSH
13025: LD_INT 1
13027: LESS
13028: IFFALSE 13032
// exit ;
13030: GO 13335
// if pos = 1 then
13032: LD_VAR 0 2
13036: PUSH
13037: LD_INT 1
13039: EQUAL
13040: IFFALSE 13073
// result := Replace ( arr , pos [ 1 ] , value ) else
13042: LD_ADDR_VAR 0 4
13046: PUSH
13047: LD_VAR 0 1
13051: PPUSH
13052: LD_VAR 0 2
13056: PUSH
13057: LD_INT 1
13059: ARRAY
13060: PPUSH
13061: LD_VAR 0 3
13065: PPUSH
13066: CALL_OW 1
13070: ST_TO_ADDR
13071: GO 13335
// begin tmp := arr ;
13073: LD_ADDR_VAR 0 6
13077: PUSH
13078: LD_VAR 0 1
13082: ST_TO_ADDR
// s_arr := [ tmp ] ;
13083: LD_ADDR_VAR 0 7
13087: PUSH
13088: LD_VAR 0 6
13092: PUSH
13093: EMPTY
13094: LIST
13095: ST_TO_ADDR
// for i = 1 to pos - 1 do
13096: LD_ADDR_VAR 0 5
13100: PUSH
13101: DOUBLE
13102: LD_INT 1
13104: DEC
13105: ST_TO_ADDR
13106: LD_VAR 0 2
13110: PUSH
13111: LD_INT 1
13113: MINUS
13114: PUSH
13115: FOR_TO
13116: IFFALSE 13161
// begin tmp := tmp [ pos [ i ] ] ;
13118: LD_ADDR_VAR 0 6
13122: PUSH
13123: LD_VAR 0 6
13127: PUSH
13128: LD_VAR 0 2
13132: PUSH
13133: LD_VAR 0 5
13137: ARRAY
13138: ARRAY
13139: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
13140: LD_ADDR_VAR 0 7
13144: PUSH
13145: LD_VAR 0 7
13149: PUSH
13150: LD_VAR 0 6
13154: PUSH
13155: EMPTY
13156: LIST
13157: ADD
13158: ST_TO_ADDR
// end ;
13159: GO 13115
13161: POP
13162: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
13163: LD_ADDR_VAR 0 6
13167: PUSH
13168: LD_VAR 0 6
13172: PPUSH
13173: LD_VAR 0 2
13177: PUSH
13178: LD_VAR 0 2
13182: ARRAY
13183: PPUSH
13184: LD_VAR 0 3
13188: PPUSH
13189: CALL_OW 1
13193: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
13194: LD_ADDR_VAR 0 7
13198: PUSH
13199: LD_VAR 0 7
13203: PPUSH
13204: LD_VAR 0 7
13208: PPUSH
13209: LD_VAR 0 6
13213: PPUSH
13214: CALL_OW 1
13218: ST_TO_ADDR
// for i = s_arr downto 2 do
13219: LD_ADDR_VAR 0 5
13223: PUSH
13224: DOUBLE
13225: LD_VAR 0 7
13229: INC
13230: ST_TO_ADDR
13231: LD_INT 2
13233: PUSH
13234: FOR_DOWNTO
13235: IFFALSE 13319
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
13237: LD_ADDR_VAR 0 6
13241: PUSH
13242: LD_VAR 0 7
13246: PUSH
13247: LD_VAR 0 5
13251: PUSH
13252: LD_INT 1
13254: MINUS
13255: ARRAY
13256: PPUSH
13257: LD_VAR 0 2
13261: PUSH
13262: LD_VAR 0 5
13266: PUSH
13267: LD_INT 1
13269: MINUS
13270: ARRAY
13271: PPUSH
13272: LD_VAR 0 7
13276: PUSH
13277: LD_VAR 0 5
13281: ARRAY
13282: PPUSH
13283: CALL_OW 1
13287: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
13288: LD_ADDR_VAR 0 7
13292: PUSH
13293: LD_VAR 0 7
13297: PPUSH
13298: LD_VAR 0 5
13302: PUSH
13303: LD_INT 1
13305: MINUS
13306: PPUSH
13307: LD_VAR 0 6
13311: PPUSH
13312: CALL_OW 1
13316: ST_TO_ADDR
// end ;
13317: GO 13234
13319: POP
13320: POP
// result := s_arr [ 1 ] ;
13321: LD_ADDR_VAR 0 4
13325: PUSH
13326: LD_VAR 0 7
13330: PUSH
13331: LD_INT 1
13333: ARRAY
13334: ST_TO_ADDR
// end ; end ;
13335: LD_VAR 0 4
13339: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
13340: LD_INT 0
13342: PPUSH
13343: PPUSH
// if not list then
13344: LD_VAR 0 1
13348: NOT
13349: IFFALSE 13353
// exit ;
13351: GO 13444
// i := list [ pos1 ] ;
13353: LD_ADDR_VAR 0 5
13357: PUSH
13358: LD_VAR 0 1
13362: PUSH
13363: LD_VAR 0 2
13367: ARRAY
13368: ST_TO_ADDR
// if not i then
13369: LD_VAR 0 5
13373: NOT
13374: IFFALSE 13378
// exit ;
13376: GO 13444
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
13378: LD_ADDR_VAR 0 1
13382: PUSH
13383: LD_VAR 0 1
13387: PPUSH
13388: LD_VAR 0 2
13392: PPUSH
13393: LD_VAR 0 1
13397: PUSH
13398: LD_VAR 0 3
13402: ARRAY
13403: PPUSH
13404: CALL_OW 1
13408: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
13409: LD_ADDR_VAR 0 1
13413: PUSH
13414: LD_VAR 0 1
13418: PPUSH
13419: LD_VAR 0 3
13423: PPUSH
13424: LD_VAR 0 5
13428: PPUSH
13429: CALL_OW 1
13433: ST_TO_ADDR
// result := list ;
13434: LD_ADDR_VAR 0 4
13438: PUSH
13439: LD_VAR 0 1
13443: ST_TO_ADDR
// end ;
13444: LD_VAR 0 4
13448: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
13449: LD_INT 0
13451: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
13452: LD_ADDR_VAR 0 5
13456: PUSH
13457: LD_VAR 0 1
13461: PPUSH
13462: CALL_OW 250
13466: PPUSH
13467: LD_VAR 0 1
13471: PPUSH
13472: CALL_OW 251
13476: PPUSH
13477: LD_VAR 0 2
13481: PPUSH
13482: LD_VAR 0 3
13486: PPUSH
13487: LD_VAR 0 4
13491: PPUSH
13492: CALL 13502 0 5
13496: ST_TO_ADDR
// end ;
13497: LD_VAR 0 5
13501: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
13502: LD_INT 0
13504: PPUSH
13505: PPUSH
13506: PPUSH
13507: PPUSH
// if not list then
13508: LD_VAR 0 3
13512: NOT
13513: IFFALSE 13517
// exit ;
13515: GO 13905
// result := [ ] ;
13517: LD_ADDR_VAR 0 6
13521: PUSH
13522: EMPTY
13523: ST_TO_ADDR
// for i in list do
13524: LD_ADDR_VAR 0 7
13528: PUSH
13529: LD_VAR 0 3
13533: PUSH
13534: FOR_IN
13535: IFFALSE 13737
// begin tmp := GetDistUnitXY ( i , x , y ) ;
13537: LD_ADDR_VAR 0 9
13541: PUSH
13542: LD_VAR 0 7
13546: PPUSH
13547: LD_VAR 0 1
13551: PPUSH
13552: LD_VAR 0 2
13556: PPUSH
13557: CALL_OW 297
13561: ST_TO_ADDR
// if not result then
13562: LD_VAR 0 6
13566: NOT
13567: IFFALSE 13593
// result := [ [ i , tmp ] ] else
13569: LD_ADDR_VAR 0 6
13573: PUSH
13574: LD_VAR 0 7
13578: PUSH
13579: LD_VAR 0 9
13583: PUSH
13584: EMPTY
13585: LIST
13586: LIST
13587: PUSH
13588: EMPTY
13589: LIST
13590: ST_TO_ADDR
13591: GO 13735
// begin if result [ result ] [ 2 ] < tmp then
13593: LD_VAR 0 6
13597: PUSH
13598: LD_VAR 0 6
13602: ARRAY
13603: PUSH
13604: LD_INT 2
13606: ARRAY
13607: PUSH
13608: LD_VAR 0 9
13612: LESS
13613: IFFALSE 13655
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
13615: LD_ADDR_VAR 0 6
13619: PUSH
13620: LD_VAR 0 6
13624: PPUSH
13625: LD_VAR 0 6
13629: PUSH
13630: LD_INT 1
13632: PLUS
13633: PPUSH
13634: LD_VAR 0 7
13638: PUSH
13639: LD_VAR 0 9
13643: PUSH
13644: EMPTY
13645: LIST
13646: LIST
13647: PPUSH
13648: CALL_OW 2
13652: ST_TO_ADDR
13653: GO 13735
// for j = 1 to result do
13655: LD_ADDR_VAR 0 8
13659: PUSH
13660: DOUBLE
13661: LD_INT 1
13663: DEC
13664: ST_TO_ADDR
13665: LD_VAR 0 6
13669: PUSH
13670: FOR_TO
13671: IFFALSE 13733
// begin if tmp < result [ j ] [ 2 ] then
13673: LD_VAR 0 9
13677: PUSH
13678: LD_VAR 0 6
13682: PUSH
13683: LD_VAR 0 8
13687: ARRAY
13688: PUSH
13689: LD_INT 2
13691: ARRAY
13692: LESS
13693: IFFALSE 13731
// begin result := Insert ( result , j , [ i , tmp ] ) ;
13695: LD_ADDR_VAR 0 6
13699: PUSH
13700: LD_VAR 0 6
13704: PPUSH
13705: LD_VAR 0 8
13709: PPUSH
13710: LD_VAR 0 7
13714: PUSH
13715: LD_VAR 0 9
13719: PUSH
13720: EMPTY
13721: LIST
13722: LIST
13723: PPUSH
13724: CALL_OW 2
13728: ST_TO_ADDR
// break ;
13729: GO 13733
// end ; end ;
13731: GO 13670
13733: POP
13734: POP
// end ; end ;
13735: GO 13534
13737: POP
13738: POP
// if result and not asc then
13739: LD_VAR 0 6
13743: PUSH
13744: LD_VAR 0 4
13748: NOT
13749: AND
13750: IFFALSE 13825
// begin tmp := result ;
13752: LD_ADDR_VAR 0 9
13756: PUSH
13757: LD_VAR 0 6
13761: ST_TO_ADDR
// for i = tmp downto 1 do
13762: LD_ADDR_VAR 0 7
13766: PUSH
13767: DOUBLE
13768: LD_VAR 0 9
13772: INC
13773: ST_TO_ADDR
13774: LD_INT 1
13776: PUSH
13777: FOR_DOWNTO
13778: IFFALSE 13823
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
13780: LD_ADDR_VAR 0 6
13784: PUSH
13785: LD_VAR 0 6
13789: PPUSH
13790: LD_VAR 0 9
13794: PUSH
13795: LD_VAR 0 7
13799: MINUS
13800: PUSH
13801: LD_INT 1
13803: PLUS
13804: PPUSH
13805: LD_VAR 0 9
13809: PUSH
13810: LD_VAR 0 7
13814: ARRAY
13815: PPUSH
13816: CALL_OW 1
13820: ST_TO_ADDR
13821: GO 13777
13823: POP
13824: POP
// end ; tmp := [ ] ;
13825: LD_ADDR_VAR 0 9
13829: PUSH
13830: EMPTY
13831: ST_TO_ADDR
// if mode then
13832: LD_VAR 0 5
13836: IFFALSE 13905
// begin for i = 1 to result do
13838: LD_ADDR_VAR 0 7
13842: PUSH
13843: DOUBLE
13844: LD_INT 1
13846: DEC
13847: ST_TO_ADDR
13848: LD_VAR 0 6
13852: PUSH
13853: FOR_TO
13854: IFFALSE 13893
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
13856: LD_ADDR_VAR 0 9
13860: PUSH
13861: LD_VAR 0 9
13865: PPUSH
13866: LD_VAR 0 7
13870: PPUSH
13871: LD_VAR 0 6
13875: PUSH
13876: LD_VAR 0 7
13880: ARRAY
13881: PUSH
13882: LD_INT 1
13884: ARRAY
13885: PPUSH
13886: CALL_OW 1
13890: ST_TO_ADDR
13891: GO 13853
13893: POP
13894: POP
// result := tmp ;
13895: LD_ADDR_VAR 0 6
13899: PUSH
13900: LD_VAR 0 9
13904: ST_TO_ADDR
// end ; end ;
13905: LD_VAR 0 6
13909: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
13910: LD_INT 0
13912: PPUSH
13913: PPUSH
13914: PPUSH
13915: PPUSH
13916: PPUSH
13917: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
13918: LD_ADDR_VAR 0 5
13922: PUSH
13923: LD_INT 0
13925: PUSH
13926: LD_INT 0
13928: PUSH
13929: LD_INT 0
13931: PUSH
13932: EMPTY
13933: PUSH
13934: EMPTY
13935: LIST
13936: LIST
13937: LIST
13938: LIST
13939: ST_TO_ADDR
// if not x or not y then
13940: LD_VAR 0 2
13944: NOT
13945: PUSH
13946: LD_VAR 0 3
13950: NOT
13951: OR
13952: IFFALSE 13956
// exit ;
13954: GO 15602
// if not range then
13956: LD_VAR 0 4
13960: NOT
13961: IFFALSE 13971
// range := 10 ;
13963: LD_ADDR_VAR 0 4
13967: PUSH
13968: LD_INT 10
13970: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
13971: LD_ADDR_VAR 0 8
13975: PUSH
13976: LD_INT 81
13978: PUSH
13979: LD_VAR 0 1
13983: PUSH
13984: EMPTY
13985: LIST
13986: LIST
13987: PUSH
13988: LD_INT 92
13990: PUSH
13991: LD_VAR 0 2
13995: PUSH
13996: LD_VAR 0 3
14000: PUSH
14001: LD_VAR 0 4
14005: PUSH
14006: EMPTY
14007: LIST
14008: LIST
14009: LIST
14010: LIST
14011: PUSH
14012: LD_INT 3
14014: PUSH
14015: LD_INT 21
14017: PUSH
14018: LD_INT 3
14020: PUSH
14021: EMPTY
14022: LIST
14023: LIST
14024: PUSH
14025: EMPTY
14026: LIST
14027: LIST
14028: PUSH
14029: EMPTY
14030: LIST
14031: LIST
14032: LIST
14033: PPUSH
14034: CALL_OW 69
14038: ST_TO_ADDR
// if not tmp then
14039: LD_VAR 0 8
14043: NOT
14044: IFFALSE 14048
// exit ;
14046: GO 15602
// for i in tmp do
14048: LD_ADDR_VAR 0 6
14052: PUSH
14053: LD_VAR 0 8
14057: PUSH
14058: FOR_IN
14059: IFFALSE 15577
// begin points := [ 0 , 0 , 0 ] ;
14061: LD_ADDR_VAR 0 9
14065: PUSH
14066: LD_INT 0
14068: PUSH
14069: LD_INT 0
14071: PUSH
14072: LD_INT 0
14074: PUSH
14075: EMPTY
14076: LIST
14077: LIST
14078: LIST
14079: ST_TO_ADDR
// bpoints := 1 ;
14080: LD_ADDR_VAR 0 10
14084: PUSH
14085: LD_INT 1
14087: ST_TO_ADDR
// case GetType ( i ) of unit_human :
14088: LD_VAR 0 6
14092: PPUSH
14093: CALL_OW 247
14097: PUSH
14098: LD_INT 1
14100: DOUBLE
14101: EQUAL
14102: IFTRUE 14106
14104: GO 14684
14106: POP
// begin if GetClass ( i ) = 1 then
14107: LD_VAR 0 6
14111: PPUSH
14112: CALL_OW 257
14116: PUSH
14117: LD_INT 1
14119: EQUAL
14120: IFFALSE 14141
// points := [ 10 , 5 , 3 ] ;
14122: LD_ADDR_VAR 0 9
14126: PUSH
14127: LD_INT 10
14129: PUSH
14130: LD_INT 5
14132: PUSH
14133: LD_INT 3
14135: PUSH
14136: EMPTY
14137: LIST
14138: LIST
14139: LIST
14140: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
14141: LD_VAR 0 6
14145: PPUSH
14146: CALL_OW 257
14150: PUSH
14151: LD_INT 2
14153: PUSH
14154: LD_INT 3
14156: PUSH
14157: LD_INT 4
14159: PUSH
14160: EMPTY
14161: LIST
14162: LIST
14163: LIST
14164: IN
14165: IFFALSE 14186
// points := [ 3 , 2 , 1 ] ;
14167: LD_ADDR_VAR 0 9
14171: PUSH
14172: LD_INT 3
14174: PUSH
14175: LD_INT 2
14177: PUSH
14178: LD_INT 1
14180: PUSH
14181: EMPTY
14182: LIST
14183: LIST
14184: LIST
14185: ST_TO_ADDR
// if GetClass ( i ) = 5 then
14186: LD_VAR 0 6
14190: PPUSH
14191: CALL_OW 257
14195: PUSH
14196: LD_INT 5
14198: EQUAL
14199: IFFALSE 14220
// points := [ 130 , 5 , 2 ] ;
14201: LD_ADDR_VAR 0 9
14205: PUSH
14206: LD_INT 130
14208: PUSH
14209: LD_INT 5
14211: PUSH
14212: LD_INT 2
14214: PUSH
14215: EMPTY
14216: LIST
14217: LIST
14218: LIST
14219: ST_TO_ADDR
// if GetClass ( i ) = 8 then
14220: LD_VAR 0 6
14224: PPUSH
14225: CALL_OW 257
14229: PUSH
14230: LD_INT 8
14232: EQUAL
14233: IFFALSE 14254
// points := [ 35 , 35 , 30 ] ;
14235: LD_ADDR_VAR 0 9
14239: PUSH
14240: LD_INT 35
14242: PUSH
14243: LD_INT 35
14245: PUSH
14246: LD_INT 30
14248: PUSH
14249: EMPTY
14250: LIST
14251: LIST
14252: LIST
14253: ST_TO_ADDR
// if GetClass ( i ) = 9 then
14254: LD_VAR 0 6
14258: PPUSH
14259: CALL_OW 257
14263: PUSH
14264: LD_INT 9
14266: EQUAL
14267: IFFALSE 14288
// points := [ 20 , 55 , 40 ] ;
14269: LD_ADDR_VAR 0 9
14273: PUSH
14274: LD_INT 20
14276: PUSH
14277: LD_INT 55
14279: PUSH
14280: LD_INT 40
14282: PUSH
14283: EMPTY
14284: LIST
14285: LIST
14286: LIST
14287: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
14288: LD_VAR 0 6
14292: PPUSH
14293: CALL_OW 257
14297: PUSH
14298: LD_INT 12
14300: PUSH
14301: LD_INT 16
14303: PUSH
14304: EMPTY
14305: LIST
14306: LIST
14307: IN
14308: IFFALSE 14329
// points := [ 5 , 3 , 2 ] ;
14310: LD_ADDR_VAR 0 9
14314: PUSH
14315: LD_INT 5
14317: PUSH
14318: LD_INT 3
14320: PUSH
14321: LD_INT 2
14323: PUSH
14324: EMPTY
14325: LIST
14326: LIST
14327: LIST
14328: ST_TO_ADDR
// if GetClass ( i ) = 17 then
14329: LD_VAR 0 6
14333: PPUSH
14334: CALL_OW 257
14338: PUSH
14339: LD_INT 17
14341: EQUAL
14342: IFFALSE 14363
// points := [ 100 , 50 , 75 ] ;
14344: LD_ADDR_VAR 0 9
14348: PUSH
14349: LD_INT 100
14351: PUSH
14352: LD_INT 50
14354: PUSH
14355: LD_INT 75
14357: PUSH
14358: EMPTY
14359: LIST
14360: LIST
14361: LIST
14362: ST_TO_ADDR
// if GetClass ( i ) = 15 then
14363: LD_VAR 0 6
14367: PPUSH
14368: CALL_OW 257
14372: PUSH
14373: LD_INT 15
14375: EQUAL
14376: IFFALSE 14397
// points := [ 10 , 5 , 3 ] ;
14378: LD_ADDR_VAR 0 9
14382: PUSH
14383: LD_INT 10
14385: PUSH
14386: LD_INT 5
14388: PUSH
14389: LD_INT 3
14391: PUSH
14392: EMPTY
14393: LIST
14394: LIST
14395: LIST
14396: ST_TO_ADDR
// if GetClass ( i ) = 14 then
14397: LD_VAR 0 6
14401: PPUSH
14402: CALL_OW 257
14406: PUSH
14407: LD_INT 14
14409: EQUAL
14410: IFFALSE 14431
// points := [ 10 , 0 , 0 ] ;
14412: LD_ADDR_VAR 0 9
14416: PUSH
14417: LD_INT 10
14419: PUSH
14420: LD_INT 0
14422: PUSH
14423: LD_INT 0
14425: PUSH
14426: EMPTY
14427: LIST
14428: LIST
14429: LIST
14430: ST_TO_ADDR
// if GetClass ( i ) = 11 then
14431: LD_VAR 0 6
14435: PPUSH
14436: CALL_OW 257
14440: PUSH
14441: LD_INT 11
14443: EQUAL
14444: IFFALSE 14465
// points := [ 30 , 10 , 5 ] ;
14446: LD_ADDR_VAR 0 9
14450: PUSH
14451: LD_INT 30
14453: PUSH
14454: LD_INT 10
14456: PUSH
14457: LD_INT 5
14459: PUSH
14460: EMPTY
14461: LIST
14462: LIST
14463: LIST
14464: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
14465: LD_VAR 0 1
14469: PPUSH
14470: LD_INT 5
14472: PPUSH
14473: CALL_OW 321
14477: PUSH
14478: LD_INT 2
14480: EQUAL
14481: IFFALSE 14498
// bpoints := bpoints * 1.8 ;
14483: LD_ADDR_VAR 0 10
14487: PUSH
14488: LD_VAR 0 10
14492: PUSH
14493: LD_REAL  1.80000000000000E+0000
14496: MUL
14497: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
14498: LD_VAR 0 6
14502: PPUSH
14503: CALL_OW 257
14507: PUSH
14508: LD_INT 1
14510: PUSH
14511: LD_INT 2
14513: PUSH
14514: LD_INT 3
14516: PUSH
14517: LD_INT 4
14519: PUSH
14520: EMPTY
14521: LIST
14522: LIST
14523: LIST
14524: LIST
14525: IN
14526: PUSH
14527: LD_VAR 0 1
14531: PPUSH
14532: LD_INT 51
14534: PPUSH
14535: CALL_OW 321
14539: PUSH
14540: LD_INT 2
14542: EQUAL
14543: AND
14544: IFFALSE 14561
// bpoints := bpoints * 1.2 ;
14546: LD_ADDR_VAR 0 10
14550: PUSH
14551: LD_VAR 0 10
14555: PUSH
14556: LD_REAL  1.20000000000000E+0000
14559: MUL
14560: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
14561: LD_VAR 0 6
14565: PPUSH
14566: CALL_OW 257
14570: PUSH
14571: LD_INT 5
14573: PUSH
14574: LD_INT 7
14576: PUSH
14577: LD_INT 9
14579: PUSH
14580: EMPTY
14581: LIST
14582: LIST
14583: LIST
14584: IN
14585: PUSH
14586: LD_VAR 0 1
14590: PPUSH
14591: LD_INT 52
14593: PPUSH
14594: CALL_OW 321
14598: PUSH
14599: LD_INT 2
14601: EQUAL
14602: AND
14603: IFFALSE 14620
// bpoints := bpoints * 1.5 ;
14605: LD_ADDR_VAR 0 10
14609: PUSH
14610: LD_VAR 0 10
14614: PUSH
14615: LD_REAL  1.50000000000000E+0000
14618: MUL
14619: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
14620: LD_VAR 0 1
14624: PPUSH
14625: LD_INT 66
14627: PPUSH
14628: CALL_OW 321
14632: PUSH
14633: LD_INT 2
14635: EQUAL
14636: IFFALSE 14653
// bpoints := bpoints * 1.1 ;
14638: LD_ADDR_VAR 0 10
14642: PUSH
14643: LD_VAR 0 10
14647: PUSH
14648: LD_REAL  1.10000000000000E+0000
14651: MUL
14652: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
14653: LD_ADDR_VAR 0 10
14657: PUSH
14658: LD_VAR 0 10
14662: PUSH
14663: LD_VAR 0 6
14667: PPUSH
14668: LD_INT 1
14670: PPUSH
14671: CALL_OW 259
14675: PUSH
14676: LD_REAL  1.15000000000000E+0000
14679: MUL
14680: MUL
14681: ST_TO_ADDR
// end ; unit_vehicle :
14682: GO 15506
14684: LD_INT 2
14686: DOUBLE
14687: EQUAL
14688: IFTRUE 14692
14690: GO 15494
14692: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
14693: LD_VAR 0 6
14697: PPUSH
14698: CALL_OW 264
14702: PUSH
14703: LD_INT 2
14705: PUSH
14706: LD_INT 42
14708: PUSH
14709: LD_INT 24
14711: PUSH
14712: EMPTY
14713: LIST
14714: LIST
14715: LIST
14716: IN
14717: IFFALSE 14738
// points := [ 25 , 5 , 3 ] ;
14719: LD_ADDR_VAR 0 9
14723: PUSH
14724: LD_INT 25
14726: PUSH
14727: LD_INT 5
14729: PUSH
14730: LD_INT 3
14732: PUSH
14733: EMPTY
14734: LIST
14735: LIST
14736: LIST
14737: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
14738: LD_VAR 0 6
14742: PPUSH
14743: CALL_OW 264
14747: PUSH
14748: LD_INT 4
14750: PUSH
14751: LD_INT 43
14753: PUSH
14754: LD_INT 25
14756: PUSH
14757: EMPTY
14758: LIST
14759: LIST
14760: LIST
14761: IN
14762: IFFALSE 14783
// points := [ 40 , 15 , 5 ] ;
14764: LD_ADDR_VAR 0 9
14768: PUSH
14769: LD_INT 40
14771: PUSH
14772: LD_INT 15
14774: PUSH
14775: LD_INT 5
14777: PUSH
14778: EMPTY
14779: LIST
14780: LIST
14781: LIST
14782: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
14783: LD_VAR 0 6
14787: PPUSH
14788: CALL_OW 264
14792: PUSH
14793: LD_INT 3
14795: PUSH
14796: LD_INT 23
14798: PUSH
14799: EMPTY
14800: LIST
14801: LIST
14802: IN
14803: IFFALSE 14824
// points := [ 7 , 25 , 8 ] ;
14805: LD_ADDR_VAR 0 9
14809: PUSH
14810: LD_INT 7
14812: PUSH
14813: LD_INT 25
14815: PUSH
14816: LD_INT 8
14818: PUSH
14819: EMPTY
14820: LIST
14821: LIST
14822: LIST
14823: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
14824: LD_VAR 0 6
14828: PPUSH
14829: CALL_OW 264
14833: PUSH
14834: LD_INT 5
14836: PUSH
14837: LD_INT 27
14839: PUSH
14840: LD_INT 44
14842: PUSH
14843: EMPTY
14844: LIST
14845: LIST
14846: LIST
14847: IN
14848: IFFALSE 14869
// points := [ 14 , 50 , 16 ] ;
14850: LD_ADDR_VAR 0 9
14854: PUSH
14855: LD_INT 14
14857: PUSH
14858: LD_INT 50
14860: PUSH
14861: LD_INT 16
14863: PUSH
14864: EMPTY
14865: LIST
14866: LIST
14867: LIST
14868: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
14869: LD_VAR 0 6
14873: PPUSH
14874: CALL_OW 264
14878: PUSH
14879: LD_INT 6
14881: PUSH
14882: LD_INT 46
14884: PUSH
14885: EMPTY
14886: LIST
14887: LIST
14888: IN
14889: IFFALSE 14910
// points := [ 32 , 120 , 70 ] ;
14891: LD_ADDR_VAR 0 9
14895: PUSH
14896: LD_INT 32
14898: PUSH
14899: LD_INT 120
14901: PUSH
14902: LD_INT 70
14904: PUSH
14905: EMPTY
14906: LIST
14907: LIST
14908: LIST
14909: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
14910: LD_VAR 0 6
14914: PPUSH
14915: CALL_OW 264
14919: PUSH
14920: LD_INT 7
14922: PUSH
14923: LD_INT 28
14925: PUSH
14926: LD_INT 45
14928: PUSH
14929: EMPTY
14930: LIST
14931: LIST
14932: LIST
14933: IN
14934: IFFALSE 14955
// points := [ 35 , 20 , 45 ] ;
14936: LD_ADDR_VAR 0 9
14940: PUSH
14941: LD_INT 35
14943: PUSH
14944: LD_INT 20
14946: PUSH
14947: LD_INT 45
14949: PUSH
14950: EMPTY
14951: LIST
14952: LIST
14953: LIST
14954: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
14955: LD_VAR 0 6
14959: PPUSH
14960: CALL_OW 264
14964: PUSH
14965: LD_INT 47
14967: PUSH
14968: EMPTY
14969: LIST
14970: IN
14971: IFFALSE 14992
// points := [ 67 , 45 , 75 ] ;
14973: LD_ADDR_VAR 0 9
14977: PUSH
14978: LD_INT 67
14980: PUSH
14981: LD_INT 45
14983: PUSH
14984: LD_INT 75
14986: PUSH
14987: EMPTY
14988: LIST
14989: LIST
14990: LIST
14991: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
14992: LD_VAR 0 6
14996: PPUSH
14997: CALL_OW 264
15001: PUSH
15002: LD_INT 26
15004: PUSH
15005: EMPTY
15006: LIST
15007: IN
15008: IFFALSE 15029
// points := [ 120 , 30 , 80 ] ;
15010: LD_ADDR_VAR 0 9
15014: PUSH
15015: LD_INT 120
15017: PUSH
15018: LD_INT 30
15020: PUSH
15021: LD_INT 80
15023: PUSH
15024: EMPTY
15025: LIST
15026: LIST
15027: LIST
15028: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
15029: LD_VAR 0 6
15033: PPUSH
15034: CALL_OW 264
15038: PUSH
15039: LD_INT 22
15041: PUSH
15042: EMPTY
15043: LIST
15044: IN
15045: IFFALSE 15066
// points := [ 40 , 1 , 1 ] ;
15047: LD_ADDR_VAR 0 9
15051: PUSH
15052: LD_INT 40
15054: PUSH
15055: LD_INT 1
15057: PUSH
15058: LD_INT 1
15060: PUSH
15061: EMPTY
15062: LIST
15063: LIST
15064: LIST
15065: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
15066: LD_VAR 0 6
15070: PPUSH
15071: CALL_OW 264
15075: PUSH
15076: LD_INT 29
15078: PUSH
15079: EMPTY
15080: LIST
15081: IN
15082: IFFALSE 15103
// points := [ 70 , 200 , 400 ] ;
15084: LD_ADDR_VAR 0 9
15088: PUSH
15089: LD_INT 70
15091: PUSH
15092: LD_INT 200
15094: PUSH
15095: LD_INT 400
15097: PUSH
15098: EMPTY
15099: LIST
15100: LIST
15101: LIST
15102: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
15103: LD_VAR 0 6
15107: PPUSH
15108: CALL_OW 264
15112: PUSH
15113: LD_INT 14
15115: PUSH
15116: LD_INT 53
15118: PUSH
15119: EMPTY
15120: LIST
15121: LIST
15122: IN
15123: IFFALSE 15144
// points := [ 40 , 10 , 20 ] ;
15125: LD_ADDR_VAR 0 9
15129: PUSH
15130: LD_INT 40
15132: PUSH
15133: LD_INT 10
15135: PUSH
15136: LD_INT 20
15138: PUSH
15139: EMPTY
15140: LIST
15141: LIST
15142: LIST
15143: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
15144: LD_VAR 0 6
15148: PPUSH
15149: CALL_OW 264
15153: PUSH
15154: LD_INT 9
15156: PUSH
15157: EMPTY
15158: LIST
15159: IN
15160: IFFALSE 15181
// points := [ 5 , 70 , 20 ] ;
15162: LD_ADDR_VAR 0 9
15166: PUSH
15167: LD_INT 5
15169: PUSH
15170: LD_INT 70
15172: PUSH
15173: LD_INT 20
15175: PUSH
15176: EMPTY
15177: LIST
15178: LIST
15179: LIST
15180: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
15181: LD_VAR 0 6
15185: PPUSH
15186: CALL_OW 264
15190: PUSH
15191: LD_INT 10
15193: PUSH
15194: EMPTY
15195: LIST
15196: IN
15197: IFFALSE 15218
// points := [ 35 , 110 , 70 ] ;
15199: LD_ADDR_VAR 0 9
15203: PUSH
15204: LD_INT 35
15206: PUSH
15207: LD_INT 110
15209: PUSH
15210: LD_INT 70
15212: PUSH
15213: EMPTY
15214: LIST
15215: LIST
15216: LIST
15217: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
15218: LD_VAR 0 6
15222: PPUSH
15223: CALL_OW 265
15227: PUSH
15228: LD_INT 25
15230: EQUAL
15231: IFFALSE 15252
// points := [ 80 , 65 , 100 ] ;
15233: LD_ADDR_VAR 0 9
15237: PUSH
15238: LD_INT 80
15240: PUSH
15241: LD_INT 65
15243: PUSH
15244: LD_INT 100
15246: PUSH
15247: EMPTY
15248: LIST
15249: LIST
15250: LIST
15251: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
15252: LD_VAR 0 6
15256: PPUSH
15257: CALL_OW 263
15261: PUSH
15262: LD_INT 1
15264: EQUAL
15265: IFFALSE 15300
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
15267: LD_ADDR_VAR 0 10
15271: PUSH
15272: LD_VAR 0 10
15276: PUSH
15277: LD_VAR 0 6
15281: PPUSH
15282: CALL_OW 311
15286: PPUSH
15287: LD_INT 3
15289: PPUSH
15290: CALL_OW 259
15294: PUSH
15295: LD_INT 4
15297: MUL
15298: MUL
15299: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
15300: LD_VAR 0 6
15304: PPUSH
15305: CALL_OW 263
15309: PUSH
15310: LD_INT 2
15312: EQUAL
15313: IFFALSE 15364
// begin j := IsControledBy ( i ) ;
15315: LD_ADDR_VAR 0 7
15319: PUSH
15320: LD_VAR 0 6
15324: PPUSH
15325: CALL_OW 312
15329: ST_TO_ADDR
// if j then
15330: LD_VAR 0 7
15334: IFFALSE 15364
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
15336: LD_ADDR_VAR 0 10
15340: PUSH
15341: LD_VAR 0 10
15345: PUSH
15346: LD_VAR 0 7
15350: PPUSH
15351: LD_INT 3
15353: PPUSH
15354: CALL_OW 259
15358: PUSH
15359: LD_INT 3
15361: MUL
15362: MUL
15363: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
15364: LD_VAR 0 6
15368: PPUSH
15369: CALL_OW 264
15373: PUSH
15374: LD_INT 5
15376: PUSH
15377: LD_INT 6
15379: PUSH
15380: LD_INT 46
15382: PUSH
15383: LD_INT 44
15385: PUSH
15386: LD_INT 47
15388: PUSH
15389: LD_INT 45
15391: PUSH
15392: LD_INT 28
15394: PUSH
15395: LD_INT 7
15397: PUSH
15398: LD_INT 27
15400: PUSH
15401: LD_INT 29
15403: PUSH
15404: EMPTY
15405: LIST
15406: LIST
15407: LIST
15408: LIST
15409: LIST
15410: LIST
15411: LIST
15412: LIST
15413: LIST
15414: LIST
15415: IN
15416: PUSH
15417: LD_VAR 0 1
15421: PPUSH
15422: LD_INT 52
15424: PPUSH
15425: CALL_OW 321
15429: PUSH
15430: LD_INT 2
15432: EQUAL
15433: AND
15434: IFFALSE 15451
// bpoints := bpoints * 1.2 ;
15436: LD_ADDR_VAR 0 10
15440: PUSH
15441: LD_VAR 0 10
15445: PUSH
15446: LD_REAL  1.20000000000000E+0000
15449: MUL
15450: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
15451: LD_VAR 0 6
15455: PPUSH
15456: CALL_OW 264
15460: PUSH
15461: LD_INT 6
15463: PUSH
15464: LD_INT 46
15466: PUSH
15467: LD_INT 47
15469: PUSH
15470: EMPTY
15471: LIST
15472: LIST
15473: LIST
15474: IN
15475: IFFALSE 15492
// bpoints := bpoints * 1.2 ;
15477: LD_ADDR_VAR 0 10
15481: PUSH
15482: LD_VAR 0 10
15486: PUSH
15487: LD_REAL  1.20000000000000E+0000
15490: MUL
15491: ST_TO_ADDR
// end ; unit_building :
15492: GO 15506
15494: LD_INT 3
15496: DOUBLE
15497: EQUAL
15498: IFTRUE 15502
15500: GO 15505
15502: POP
// ; end ;
15503: GO 15506
15505: POP
// for j = 1 to 3 do
15506: LD_ADDR_VAR 0 7
15510: PUSH
15511: DOUBLE
15512: LD_INT 1
15514: DEC
15515: ST_TO_ADDR
15516: LD_INT 3
15518: PUSH
15519: FOR_TO
15520: IFFALSE 15573
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
15522: LD_ADDR_VAR 0 5
15526: PUSH
15527: LD_VAR 0 5
15531: PPUSH
15532: LD_VAR 0 7
15536: PPUSH
15537: LD_VAR 0 5
15541: PUSH
15542: LD_VAR 0 7
15546: ARRAY
15547: PUSH
15548: LD_VAR 0 9
15552: PUSH
15553: LD_VAR 0 7
15557: ARRAY
15558: PUSH
15559: LD_VAR 0 10
15563: MUL
15564: PLUS
15565: PPUSH
15566: CALL_OW 1
15570: ST_TO_ADDR
15571: GO 15519
15573: POP
15574: POP
// end ;
15575: GO 14058
15577: POP
15578: POP
// result := Replace ( result , 4 , tmp ) ;
15579: LD_ADDR_VAR 0 5
15583: PUSH
15584: LD_VAR 0 5
15588: PPUSH
15589: LD_INT 4
15591: PPUSH
15592: LD_VAR 0 8
15596: PPUSH
15597: CALL_OW 1
15601: ST_TO_ADDR
// end ;
15602: LD_VAR 0 5
15606: RET
// export function DangerAtRange ( unit , range ) ; begin
15607: LD_INT 0
15609: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
15610: LD_ADDR_VAR 0 3
15614: PUSH
15615: LD_VAR 0 1
15619: PPUSH
15620: CALL_OW 255
15624: PPUSH
15625: LD_VAR 0 1
15629: PPUSH
15630: CALL_OW 250
15634: PPUSH
15635: LD_VAR 0 1
15639: PPUSH
15640: CALL_OW 251
15644: PPUSH
15645: LD_VAR 0 2
15649: PPUSH
15650: CALL 13910 0 4
15654: ST_TO_ADDR
// end ;
15655: LD_VAR 0 3
15659: RET
// export function DangerInArea ( side , area ) ; begin
15660: LD_INT 0
15662: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
15663: LD_ADDR_VAR 0 3
15667: PUSH
15668: LD_VAR 0 2
15672: PPUSH
15673: LD_INT 81
15675: PUSH
15676: LD_VAR 0 1
15680: PUSH
15681: EMPTY
15682: LIST
15683: LIST
15684: PPUSH
15685: CALL_OW 70
15689: ST_TO_ADDR
// end ;
15690: LD_VAR 0 3
15694: RET
// export function IsExtension ( b ) ; begin
15695: LD_INT 0
15697: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
15698: LD_ADDR_VAR 0 2
15702: PUSH
15703: LD_VAR 0 1
15707: PUSH
15708: LD_INT 23
15710: PUSH
15711: LD_INT 20
15713: PUSH
15714: LD_INT 22
15716: PUSH
15717: LD_INT 17
15719: PUSH
15720: LD_INT 24
15722: PUSH
15723: LD_INT 21
15725: PUSH
15726: LD_INT 19
15728: PUSH
15729: LD_INT 16
15731: PUSH
15732: LD_INT 25
15734: PUSH
15735: LD_INT 18
15737: PUSH
15738: EMPTY
15739: LIST
15740: LIST
15741: LIST
15742: LIST
15743: LIST
15744: LIST
15745: LIST
15746: LIST
15747: LIST
15748: LIST
15749: IN
15750: ST_TO_ADDR
// end ;
15751: LD_VAR 0 2
15755: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
15756: LD_INT 0
15758: PPUSH
15759: PPUSH
15760: PPUSH
// result := [ ] ;
15761: LD_ADDR_VAR 0 4
15765: PUSH
15766: EMPTY
15767: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
15768: LD_ADDR_VAR 0 5
15772: PUSH
15773: LD_VAR 0 2
15777: PPUSH
15778: LD_INT 21
15780: PUSH
15781: LD_INT 3
15783: PUSH
15784: EMPTY
15785: LIST
15786: LIST
15787: PPUSH
15788: CALL_OW 70
15792: ST_TO_ADDR
// if not tmp then
15793: LD_VAR 0 5
15797: NOT
15798: IFFALSE 15802
// exit ;
15800: GO 15866
// if checkLink then
15802: LD_VAR 0 3
15806: IFFALSE 15856
// begin for i in tmp do
15808: LD_ADDR_VAR 0 6
15812: PUSH
15813: LD_VAR 0 5
15817: PUSH
15818: FOR_IN
15819: IFFALSE 15854
// if GetBase ( i ) <> base then
15821: LD_VAR 0 6
15825: PPUSH
15826: CALL_OW 274
15830: PUSH
15831: LD_VAR 0 1
15835: NONEQUAL
15836: IFFALSE 15852
// ComLinkToBase ( base , i ) ;
15838: LD_VAR 0 1
15842: PPUSH
15843: LD_VAR 0 6
15847: PPUSH
15848: CALL_OW 169
15852: GO 15818
15854: POP
15855: POP
// end ; result := tmp ;
15856: LD_ADDR_VAR 0 4
15860: PUSH
15861: LD_VAR 0 5
15865: ST_TO_ADDR
// end ;
15866: LD_VAR 0 4
15870: RET
// export function ComComplete ( units , b ) ; var i ; begin
15871: LD_INT 0
15873: PPUSH
15874: PPUSH
// if not units then
15875: LD_VAR 0 1
15879: NOT
15880: IFFALSE 15884
// exit ;
15882: GO 15974
// for i in units do
15884: LD_ADDR_VAR 0 4
15888: PUSH
15889: LD_VAR 0 1
15893: PUSH
15894: FOR_IN
15895: IFFALSE 15972
// if BuildingStatus ( b ) = bs_build then
15897: LD_VAR 0 2
15901: PPUSH
15902: CALL_OW 461
15906: PUSH
15907: LD_INT 1
15909: EQUAL
15910: IFFALSE 15970
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
15912: LD_VAR 0 4
15916: PPUSH
15917: LD_STRING h
15919: PUSH
15920: LD_VAR 0 2
15924: PPUSH
15925: CALL_OW 250
15929: PUSH
15930: LD_VAR 0 2
15934: PPUSH
15935: CALL_OW 251
15939: PUSH
15940: LD_VAR 0 2
15944: PUSH
15945: LD_INT 0
15947: PUSH
15948: LD_INT 0
15950: PUSH
15951: LD_INT 0
15953: PUSH
15954: EMPTY
15955: LIST
15956: LIST
15957: LIST
15958: LIST
15959: LIST
15960: LIST
15961: LIST
15962: PUSH
15963: EMPTY
15964: LIST
15965: PPUSH
15966: CALL_OW 446
15970: GO 15894
15972: POP
15973: POP
// end ;
15974: LD_VAR 0 3
15978: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
15979: LD_INT 0
15981: PPUSH
15982: PPUSH
15983: PPUSH
15984: PPUSH
15985: PPUSH
15986: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
15987: LD_VAR 0 1
15991: NOT
15992: PUSH
15993: LD_VAR 0 1
15997: PPUSH
15998: CALL_OW 263
16002: PUSH
16003: LD_INT 2
16005: EQUAL
16006: NOT
16007: OR
16008: IFFALSE 16012
// exit ;
16010: GO 16328
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
16012: LD_ADDR_VAR 0 6
16016: PUSH
16017: LD_INT 22
16019: PUSH
16020: LD_VAR 0 1
16024: PPUSH
16025: CALL_OW 255
16029: PUSH
16030: EMPTY
16031: LIST
16032: LIST
16033: PUSH
16034: LD_INT 2
16036: PUSH
16037: LD_INT 30
16039: PUSH
16040: LD_INT 36
16042: PUSH
16043: EMPTY
16044: LIST
16045: LIST
16046: PUSH
16047: LD_INT 34
16049: PUSH
16050: LD_INT 31
16052: PUSH
16053: EMPTY
16054: LIST
16055: LIST
16056: PUSH
16057: EMPTY
16058: LIST
16059: LIST
16060: LIST
16061: PUSH
16062: EMPTY
16063: LIST
16064: LIST
16065: PPUSH
16066: CALL_OW 69
16070: ST_TO_ADDR
// if not tmp then
16071: LD_VAR 0 6
16075: NOT
16076: IFFALSE 16080
// exit ;
16078: GO 16328
// result := [ ] ;
16080: LD_ADDR_VAR 0 2
16084: PUSH
16085: EMPTY
16086: ST_TO_ADDR
// for i in tmp do
16087: LD_ADDR_VAR 0 3
16091: PUSH
16092: LD_VAR 0 6
16096: PUSH
16097: FOR_IN
16098: IFFALSE 16169
// begin t := UnitsInside ( i ) ;
16100: LD_ADDR_VAR 0 4
16104: PUSH
16105: LD_VAR 0 3
16109: PPUSH
16110: CALL_OW 313
16114: ST_TO_ADDR
// if t then
16115: LD_VAR 0 4
16119: IFFALSE 16167
// for j in t do
16121: LD_ADDR_VAR 0 7
16125: PUSH
16126: LD_VAR 0 4
16130: PUSH
16131: FOR_IN
16132: IFFALSE 16165
// result := Insert ( result , result + 1 , j ) ;
16134: LD_ADDR_VAR 0 2
16138: PUSH
16139: LD_VAR 0 2
16143: PPUSH
16144: LD_VAR 0 2
16148: PUSH
16149: LD_INT 1
16151: PLUS
16152: PPUSH
16153: LD_VAR 0 7
16157: PPUSH
16158: CALL_OW 2
16162: ST_TO_ADDR
16163: GO 16131
16165: POP
16166: POP
// end ;
16167: GO 16097
16169: POP
16170: POP
// if not result then
16171: LD_VAR 0 2
16175: NOT
16176: IFFALSE 16180
// exit ;
16178: GO 16328
// mech := result [ 1 ] ;
16180: LD_ADDR_VAR 0 5
16184: PUSH
16185: LD_VAR 0 2
16189: PUSH
16190: LD_INT 1
16192: ARRAY
16193: ST_TO_ADDR
// if result > 1 then
16194: LD_VAR 0 2
16198: PUSH
16199: LD_INT 1
16201: GREATER
16202: IFFALSE 16314
// for i = 2 to result do
16204: LD_ADDR_VAR 0 3
16208: PUSH
16209: DOUBLE
16210: LD_INT 2
16212: DEC
16213: ST_TO_ADDR
16214: LD_VAR 0 2
16218: PUSH
16219: FOR_TO
16220: IFFALSE 16312
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
16222: LD_ADDR_VAR 0 4
16226: PUSH
16227: LD_VAR 0 2
16231: PUSH
16232: LD_VAR 0 3
16236: ARRAY
16237: PPUSH
16238: LD_INT 3
16240: PPUSH
16241: CALL_OW 259
16245: PUSH
16246: LD_VAR 0 2
16250: PUSH
16251: LD_VAR 0 3
16255: ARRAY
16256: PPUSH
16257: CALL_OW 432
16261: MINUS
16262: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
16263: LD_VAR 0 4
16267: PUSH
16268: LD_VAR 0 5
16272: PPUSH
16273: LD_INT 3
16275: PPUSH
16276: CALL_OW 259
16280: PUSH
16281: LD_VAR 0 5
16285: PPUSH
16286: CALL_OW 432
16290: MINUS
16291: GREATEREQUAL
16292: IFFALSE 16310
// mech := result [ i ] ;
16294: LD_ADDR_VAR 0 5
16298: PUSH
16299: LD_VAR 0 2
16303: PUSH
16304: LD_VAR 0 3
16308: ARRAY
16309: ST_TO_ADDR
// end ;
16310: GO 16219
16312: POP
16313: POP
// ComLinkTo ( vehicle , mech ) ;
16314: LD_VAR 0 1
16318: PPUSH
16319: LD_VAR 0 5
16323: PPUSH
16324: CALL_OW 135
// end ;
16328: LD_VAR 0 2
16332: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
16333: LD_INT 0
16335: PPUSH
16336: PPUSH
16337: PPUSH
16338: PPUSH
16339: PPUSH
16340: PPUSH
16341: PPUSH
16342: PPUSH
16343: PPUSH
16344: PPUSH
16345: PPUSH
16346: PPUSH
16347: PPUSH
// result := [ ] ;
16348: LD_ADDR_VAR 0 7
16352: PUSH
16353: EMPTY
16354: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
16355: LD_VAR 0 1
16359: PPUSH
16360: CALL_OW 266
16364: PUSH
16365: LD_INT 0
16367: PUSH
16368: LD_INT 1
16370: PUSH
16371: EMPTY
16372: LIST
16373: LIST
16374: IN
16375: NOT
16376: IFFALSE 16380
// exit ;
16378: GO 18014
// if name then
16380: LD_VAR 0 3
16384: IFFALSE 16400
// SetBName ( base_dep , name ) ;
16386: LD_VAR 0 1
16390: PPUSH
16391: LD_VAR 0 3
16395: PPUSH
16396: CALL_OW 500
// base := GetBase ( base_dep ) ;
16400: LD_ADDR_VAR 0 15
16404: PUSH
16405: LD_VAR 0 1
16409: PPUSH
16410: CALL_OW 274
16414: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
16415: LD_ADDR_VAR 0 16
16419: PUSH
16420: LD_VAR 0 1
16424: PPUSH
16425: CALL_OW 255
16429: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
16430: LD_ADDR_VAR 0 17
16434: PUSH
16435: LD_VAR 0 1
16439: PPUSH
16440: CALL_OW 248
16444: ST_TO_ADDR
// if sources then
16445: LD_VAR 0 5
16449: IFFALSE 16496
// for i = 1 to 3 do
16451: LD_ADDR_VAR 0 8
16455: PUSH
16456: DOUBLE
16457: LD_INT 1
16459: DEC
16460: ST_TO_ADDR
16461: LD_INT 3
16463: PUSH
16464: FOR_TO
16465: IFFALSE 16494
// AddResourceType ( base , i , sources [ i ] ) ;
16467: LD_VAR 0 15
16471: PPUSH
16472: LD_VAR 0 8
16476: PPUSH
16477: LD_VAR 0 5
16481: PUSH
16482: LD_VAR 0 8
16486: ARRAY
16487: PPUSH
16488: CALL_OW 276
16492: GO 16464
16494: POP
16495: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
16496: LD_ADDR_VAR 0 18
16500: PUSH
16501: LD_VAR 0 15
16505: PPUSH
16506: LD_VAR 0 2
16510: PPUSH
16511: LD_INT 1
16513: PPUSH
16514: CALL 15756 0 3
16518: ST_TO_ADDR
// InitHc ;
16519: CALL_OW 19
// InitUc ;
16523: CALL_OW 18
// uc_side := side ;
16527: LD_ADDR_OWVAR 20
16531: PUSH
16532: LD_VAR 0 16
16536: ST_TO_ADDR
// uc_nation := nation ;
16537: LD_ADDR_OWVAR 21
16541: PUSH
16542: LD_VAR 0 17
16546: ST_TO_ADDR
// if buildings then
16547: LD_VAR 0 18
16551: IFFALSE 17873
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
16553: LD_ADDR_VAR 0 19
16557: PUSH
16558: LD_VAR 0 18
16562: PPUSH
16563: LD_INT 2
16565: PUSH
16566: LD_INT 30
16568: PUSH
16569: LD_INT 29
16571: PUSH
16572: EMPTY
16573: LIST
16574: LIST
16575: PUSH
16576: LD_INT 30
16578: PUSH
16579: LD_INT 30
16581: PUSH
16582: EMPTY
16583: LIST
16584: LIST
16585: PUSH
16586: EMPTY
16587: LIST
16588: LIST
16589: LIST
16590: PPUSH
16591: CALL_OW 72
16595: ST_TO_ADDR
// if tmp then
16596: LD_VAR 0 19
16600: IFFALSE 16648
// for i in tmp do
16602: LD_ADDR_VAR 0 8
16606: PUSH
16607: LD_VAR 0 19
16611: PUSH
16612: FOR_IN
16613: IFFALSE 16646
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
16615: LD_VAR 0 8
16619: PPUSH
16620: CALL_OW 250
16624: PPUSH
16625: LD_VAR 0 8
16629: PPUSH
16630: CALL_OW 251
16634: PPUSH
16635: LD_VAR 0 16
16639: PPUSH
16640: CALL_OW 441
16644: GO 16612
16646: POP
16647: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
16648: LD_VAR 0 18
16652: PPUSH
16653: LD_INT 2
16655: PUSH
16656: LD_INT 30
16658: PUSH
16659: LD_INT 32
16661: PUSH
16662: EMPTY
16663: LIST
16664: LIST
16665: PUSH
16666: LD_INT 30
16668: PUSH
16669: LD_INT 33
16671: PUSH
16672: EMPTY
16673: LIST
16674: LIST
16675: PUSH
16676: EMPTY
16677: LIST
16678: LIST
16679: LIST
16680: PPUSH
16681: CALL_OW 72
16685: IFFALSE 16773
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
16687: LD_ADDR_VAR 0 8
16691: PUSH
16692: LD_VAR 0 18
16696: PPUSH
16697: LD_INT 2
16699: PUSH
16700: LD_INT 30
16702: PUSH
16703: LD_INT 32
16705: PUSH
16706: EMPTY
16707: LIST
16708: LIST
16709: PUSH
16710: LD_INT 30
16712: PUSH
16713: LD_INT 33
16715: PUSH
16716: EMPTY
16717: LIST
16718: LIST
16719: PUSH
16720: EMPTY
16721: LIST
16722: LIST
16723: LIST
16724: PPUSH
16725: CALL_OW 72
16729: PUSH
16730: FOR_IN
16731: IFFALSE 16771
// begin if not GetBWeapon ( i ) then
16733: LD_VAR 0 8
16737: PPUSH
16738: CALL_OW 269
16742: NOT
16743: IFFALSE 16769
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
16745: LD_VAR 0 8
16749: PPUSH
16750: LD_VAR 0 8
16754: PPUSH
16755: LD_VAR 0 2
16759: PPUSH
16760: CALL 18019 0 2
16764: PPUSH
16765: CALL_OW 431
// end ;
16769: GO 16730
16771: POP
16772: POP
// end ; for i = 1 to personel do
16773: LD_ADDR_VAR 0 8
16777: PUSH
16778: DOUBLE
16779: LD_INT 1
16781: DEC
16782: ST_TO_ADDR
16783: LD_VAR 0 6
16787: PUSH
16788: FOR_TO
16789: IFFALSE 17853
// begin if i > 4 then
16791: LD_VAR 0 8
16795: PUSH
16796: LD_INT 4
16798: GREATER
16799: IFFALSE 16803
// break ;
16801: GO 17853
// case i of 1 :
16803: LD_VAR 0 8
16807: PUSH
16808: LD_INT 1
16810: DOUBLE
16811: EQUAL
16812: IFTRUE 16816
16814: GO 16896
16816: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
16817: LD_ADDR_VAR 0 12
16821: PUSH
16822: LD_VAR 0 18
16826: PPUSH
16827: LD_INT 22
16829: PUSH
16830: LD_VAR 0 16
16834: PUSH
16835: EMPTY
16836: LIST
16837: LIST
16838: PUSH
16839: LD_INT 58
16841: PUSH
16842: EMPTY
16843: LIST
16844: PUSH
16845: LD_INT 2
16847: PUSH
16848: LD_INT 30
16850: PUSH
16851: LD_INT 32
16853: PUSH
16854: EMPTY
16855: LIST
16856: LIST
16857: PUSH
16858: LD_INT 30
16860: PUSH
16861: LD_INT 4
16863: PUSH
16864: EMPTY
16865: LIST
16866: LIST
16867: PUSH
16868: LD_INT 30
16870: PUSH
16871: LD_INT 5
16873: PUSH
16874: EMPTY
16875: LIST
16876: LIST
16877: PUSH
16878: EMPTY
16879: LIST
16880: LIST
16881: LIST
16882: LIST
16883: PUSH
16884: EMPTY
16885: LIST
16886: LIST
16887: LIST
16888: PPUSH
16889: CALL_OW 72
16893: ST_TO_ADDR
16894: GO 17118
16896: LD_INT 2
16898: DOUBLE
16899: EQUAL
16900: IFTRUE 16904
16902: GO 16966
16904: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
16905: LD_ADDR_VAR 0 12
16909: PUSH
16910: LD_VAR 0 18
16914: PPUSH
16915: LD_INT 22
16917: PUSH
16918: LD_VAR 0 16
16922: PUSH
16923: EMPTY
16924: LIST
16925: LIST
16926: PUSH
16927: LD_INT 2
16929: PUSH
16930: LD_INT 30
16932: PUSH
16933: LD_INT 0
16935: PUSH
16936: EMPTY
16937: LIST
16938: LIST
16939: PUSH
16940: LD_INT 30
16942: PUSH
16943: LD_INT 1
16945: PUSH
16946: EMPTY
16947: LIST
16948: LIST
16949: PUSH
16950: EMPTY
16951: LIST
16952: LIST
16953: LIST
16954: PUSH
16955: EMPTY
16956: LIST
16957: LIST
16958: PPUSH
16959: CALL_OW 72
16963: ST_TO_ADDR
16964: GO 17118
16966: LD_INT 3
16968: DOUBLE
16969: EQUAL
16970: IFTRUE 16974
16972: GO 17036
16974: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
16975: LD_ADDR_VAR 0 12
16979: PUSH
16980: LD_VAR 0 18
16984: PPUSH
16985: LD_INT 22
16987: PUSH
16988: LD_VAR 0 16
16992: PUSH
16993: EMPTY
16994: LIST
16995: LIST
16996: PUSH
16997: LD_INT 2
16999: PUSH
17000: LD_INT 30
17002: PUSH
17003: LD_INT 2
17005: PUSH
17006: EMPTY
17007: LIST
17008: LIST
17009: PUSH
17010: LD_INT 30
17012: PUSH
17013: LD_INT 3
17015: PUSH
17016: EMPTY
17017: LIST
17018: LIST
17019: PUSH
17020: EMPTY
17021: LIST
17022: LIST
17023: LIST
17024: PUSH
17025: EMPTY
17026: LIST
17027: LIST
17028: PPUSH
17029: CALL_OW 72
17033: ST_TO_ADDR
17034: GO 17118
17036: LD_INT 4
17038: DOUBLE
17039: EQUAL
17040: IFTRUE 17044
17042: GO 17117
17044: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
17045: LD_ADDR_VAR 0 12
17049: PUSH
17050: LD_VAR 0 18
17054: PPUSH
17055: LD_INT 22
17057: PUSH
17058: LD_VAR 0 16
17062: PUSH
17063: EMPTY
17064: LIST
17065: LIST
17066: PUSH
17067: LD_INT 2
17069: PUSH
17070: LD_INT 30
17072: PUSH
17073: LD_INT 6
17075: PUSH
17076: EMPTY
17077: LIST
17078: LIST
17079: PUSH
17080: LD_INT 30
17082: PUSH
17083: LD_INT 7
17085: PUSH
17086: EMPTY
17087: LIST
17088: LIST
17089: PUSH
17090: LD_INT 30
17092: PUSH
17093: LD_INT 8
17095: PUSH
17096: EMPTY
17097: LIST
17098: LIST
17099: PUSH
17100: EMPTY
17101: LIST
17102: LIST
17103: LIST
17104: LIST
17105: PUSH
17106: EMPTY
17107: LIST
17108: LIST
17109: PPUSH
17110: CALL_OW 72
17114: ST_TO_ADDR
17115: GO 17118
17117: POP
// if i = 1 then
17118: LD_VAR 0 8
17122: PUSH
17123: LD_INT 1
17125: EQUAL
17126: IFFALSE 17237
// begin tmp := [ ] ;
17128: LD_ADDR_VAR 0 19
17132: PUSH
17133: EMPTY
17134: ST_TO_ADDR
// for j in f do
17135: LD_ADDR_VAR 0 9
17139: PUSH
17140: LD_VAR 0 12
17144: PUSH
17145: FOR_IN
17146: IFFALSE 17219
// if GetBType ( j ) = b_bunker then
17148: LD_VAR 0 9
17152: PPUSH
17153: CALL_OW 266
17157: PUSH
17158: LD_INT 32
17160: EQUAL
17161: IFFALSE 17188
// tmp := Insert ( tmp , 1 , j ) else
17163: LD_ADDR_VAR 0 19
17167: PUSH
17168: LD_VAR 0 19
17172: PPUSH
17173: LD_INT 1
17175: PPUSH
17176: LD_VAR 0 9
17180: PPUSH
17181: CALL_OW 2
17185: ST_TO_ADDR
17186: GO 17217
// tmp := Insert ( tmp , tmp + 1 , j ) ;
17188: LD_ADDR_VAR 0 19
17192: PUSH
17193: LD_VAR 0 19
17197: PPUSH
17198: LD_VAR 0 19
17202: PUSH
17203: LD_INT 1
17205: PLUS
17206: PPUSH
17207: LD_VAR 0 9
17211: PPUSH
17212: CALL_OW 2
17216: ST_TO_ADDR
17217: GO 17145
17219: POP
17220: POP
// if tmp then
17221: LD_VAR 0 19
17225: IFFALSE 17237
// f := tmp ;
17227: LD_ADDR_VAR 0 12
17231: PUSH
17232: LD_VAR 0 19
17236: ST_TO_ADDR
// end ; x := personel [ i ] ;
17237: LD_ADDR_VAR 0 13
17241: PUSH
17242: LD_VAR 0 6
17246: PUSH
17247: LD_VAR 0 8
17251: ARRAY
17252: ST_TO_ADDR
// if x = - 1 then
17253: LD_VAR 0 13
17257: PUSH
17258: LD_INT 1
17260: NEG
17261: EQUAL
17262: IFFALSE 17471
// begin for j in f do
17264: LD_ADDR_VAR 0 9
17268: PUSH
17269: LD_VAR 0 12
17273: PUSH
17274: FOR_IN
17275: IFFALSE 17467
// repeat InitHc ;
17277: CALL_OW 19
// if GetBType ( j ) = b_barracks then
17281: LD_VAR 0 9
17285: PPUSH
17286: CALL_OW 266
17290: PUSH
17291: LD_INT 5
17293: EQUAL
17294: IFFALSE 17364
// begin if UnitsInside ( j ) < 3 then
17296: LD_VAR 0 9
17300: PPUSH
17301: CALL_OW 313
17305: PUSH
17306: LD_INT 3
17308: LESS
17309: IFFALSE 17345
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
17311: LD_INT 0
17313: PPUSH
17314: LD_INT 5
17316: PUSH
17317: LD_INT 8
17319: PUSH
17320: LD_INT 9
17322: PUSH
17323: EMPTY
17324: LIST
17325: LIST
17326: LIST
17327: PUSH
17328: LD_VAR 0 17
17332: ARRAY
17333: PPUSH
17334: LD_VAR 0 4
17338: PPUSH
17339: CALL_OW 380
17343: GO 17362
// PrepareHuman ( false , i , skill ) ;
17345: LD_INT 0
17347: PPUSH
17348: LD_VAR 0 8
17352: PPUSH
17353: LD_VAR 0 4
17357: PPUSH
17358: CALL_OW 380
// end else
17362: GO 17381
// PrepareHuman ( false , i , skill ) ;
17364: LD_INT 0
17366: PPUSH
17367: LD_VAR 0 8
17371: PPUSH
17372: LD_VAR 0 4
17376: PPUSH
17377: CALL_OW 380
// un := CreateHuman ;
17381: LD_ADDR_VAR 0 14
17385: PUSH
17386: CALL_OW 44
17390: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
17391: LD_ADDR_VAR 0 7
17395: PUSH
17396: LD_VAR 0 7
17400: PPUSH
17401: LD_INT 1
17403: PPUSH
17404: LD_VAR 0 14
17408: PPUSH
17409: CALL_OW 2
17413: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
17414: LD_VAR 0 14
17418: PPUSH
17419: LD_VAR 0 9
17423: PPUSH
17424: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
17428: LD_VAR 0 9
17432: PPUSH
17433: CALL_OW 313
17437: PUSH
17438: LD_INT 6
17440: EQUAL
17441: PUSH
17442: LD_VAR 0 9
17446: PPUSH
17447: CALL_OW 266
17451: PUSH
17452: LD_INT 32
17454: PUSH
17455: LD_INT 31
17457: PUSH
17458: EMPTY
17459: LIST
17460: LIST
17461: IN
17462: OR
17463: IFFALSE 17277
17465: GO 17274
17467: POP
17468: POP
// end else
17469: GO 17851
// for j = 1 to x do
17471: LD_ADDR_VAR 0 9
17475: PUSH
17476: DOUBLE
17477: LD_INT 1
17479: DEC
17480: ST_TO_ADDR
17481: LD_VAR 0 13
17485: PUSH
17486: FOR_TO
17487: IFFALSE 17849
// begin InitHc ;
17489: CALL_OW 19
// if not f then
17493: LD_VAR 0 12
17497: NOT
17498: IFFALSE 17587
// begin PrepareHuman ( false , i , skill ) ;
17500: LD_INT 0
17502: PPUSH
17503: LD_VAR 0 8
17507: PPUSH
17508: LD_VAR 0 4
17512: PPUSH
17513: CALL_OW 380
// un := CreateHuman ;
17517: LD_ADDR_VAR 0 14
17521: PUSH
17522: CALL_OW 44
17526: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
17527: LD_ADDR_VAR 0 7
17531: PUSH
17532: LD_VAR 0 7
17536: PPUSH
17537: LD_INT 1
17539: PPUSH
17540: LD_VAR 0 14
17544: PPUSH
17545: CALL_OW 2
17549: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
17550: LD_VAR 0 14
17554: PPUSH
17555: LD_VAR 0 1
17559: PPUSH
17560: CALL_OW 250
17564: PPUSH
17565: LD_VAR 0 1
17569: PPUSH
17570: CALL_OW 251
17574: PPUSH
17575: LD_INT 10
17577: PPUSH
17578: LD_INT 0
17580: PPUSH
17581: CALL_OW 50
// continue ;
17585: GO 17486
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
17587: LD_VAR 0 12
17591: PUSH
17592: LD_INT 1
17594: ARRAY
17595: PPUSH
17596: CALL_OW 313
17600: PUSH
17601: LD_VAR 0 12
17605: PUSH
17606: LD_INT 1
17608: ARRAY
17609: PPUSH
17610: CALL_OW 266
17614: PUSH
17615: LD_INT 32
17617: PUSH
17618: LD_INT 31
17620: PUSH
17621: EMPTY
17622: LIST
17623: LIST
17624: IN
17625: AND
17626: PUSH
17627: LD_VAR 0 12
17631: PUSH
17632: LD_INT 1
17634: ARRAY
17635: PPUSH
17636: CALL_OW 313
17640: PUSH
17641: LD_INT 6
17643: EQUAL
17644: OR
17645: IFFALSE 17665
// f := Delete ( f , 1 ) ;
17647: LD_ADDR_VAR 0 12
17651: PUSH
17652: LD_VAR 0 12
17656: PPUSH
17657: LD_INT 1
17659: PPUSH
17660: CALL_OW 3
17664: ST_TO_ADDR
// if not f then
17665: LD_VAR 0 12
17669: NOT
17670: IFFALSE 17688
// begin x := x + 2 ;
17672: LD_ADDR_VAR 0 13
17676: PUSH
17677: LD_VAR 0 13
17681: PUSH
17682: LD_INT 2
17684: PLUS
17685: ST_TO_ADDR
// continue ;
17686: GO 17486
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
17688: LD_VAR 0 12
17692: PUSH
17693: LD_INT 1
17695: ARRAY
17696: PPUSH
17697: CALL_OW 266
17701: PUSH
17702: LD_INT 5
17704: EQUAL
17705: IFFALSE 17779
// begin if UnitsInside ( f [ 1 ] ) < 3 then
17707: LD_VAR 0 12
17711: PUSH
17712: LD_INT 1
17714: ARRAY
17715: PPUSH
17716: CALL_OW 313
17720: PUSH
17721: LD_INT 3
17723: LESS
17724: IFFALSE 17760
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
17726: LD_INT 0
17728: PPUSH
17729: LD_INT 5
17731: PUSH
17732: LD_INT 8
17734: PUSH
17735: LD_INT 9
17737: PUSH
17738: EMPTY
17739: LIST
17740: LIST
17741: LIST
17742: PUSH
17743: LD_VAR 0 17
17747: ARRAY
17748: PPUSH
17749: LD_VAR 0 4
17753: PPUSH
17754: CALL_OW 380
17758: GO 17777
// PrepareHuman ( false , i , skill ) ;
17760: LD_INT 0
17762: PPUSH
17763: LD_VAR 0 8
17767: PPUSH
17768: LD_VAR 0 4
17772: PPUSH
17773: CALL_OW 380
// end else
17777: GO 17796
// PrepareHuman ( false , i , skill ) ;
17779: LD_INT 0
17781: PPUSH
17782: LD_VAR 0 8
17786: PPUSH
17787: LD_VAR 0 4
17791: PPUSH
17792: CALL_OW 380
// un := CreateHuman ;
17796: LD_ADDR_VAR 0 14
17800: PUSH
17801: CALL_OW 44
17805: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
17806: LD_ADDR_VAR 0 7
17810: PUSH
17811: LD_VAR 0 7
17815: PPUSH
17816: LD_INT 1
17818: PPUSH
17819: LD_VAR 0 14
17823: PPUSH
17824: CALL_OW 2
17828: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
17829: LD_VAR 0 14
17833: PPUSH
17834: LD_VAR 0 12
17838: PUSH
17839: LD_INT 1
17841: ARRAY
17842: PPUSH
17843: CALL_OW 52
// end ;
17847: GO 17486
17849: POP
17850: POP
// end ;
17851: GO 16788
17853: POP
17854: POP
// result := result ^ buildings ;
17855: LD_ADDR_VAR 0 7
17859: PUSH
17860: LD_VAR 0 7
17864: PUSH
17865: LD_VAR 0 18
17869: ADD
17870: ST_TO_ADDR
// end else
17871: GO 18014
// begin for i = 1 to personel do
17873: LD_ADDR_VAR 0 8
17877: PUSH
17878: DOUBLE
17879: LD_INT 1
17881: DEC
17882: ST_TO_ADDR
17883: LD_VAR 0 6
17887: PUSH
17888: FOR_TO
17889: IFFALSE 18012
// begin if i > 4 then
17891: LD_VAR 0 8
17895: PUSH
17896: LD_INT 4
17898: GREATER
17899: IFFALSE 17903
// break ;
17901: GO 18012
// x := personel [ i ] ;
17903: LD_ADDR_VAR 0 13
17907: PUSH
17908: LD_VAR 0 6
17912: PUSH
17913: LD_VAR 0 8
17917: ARRAY
17918: ST_TO_ADDR
// if x = - 1 then
17919: LD_VAR 0 13
17923: PUSH
17924: LD_INT 1
17926: NEG
17927: EQUAL
17928: IFFALSE 17932
// continue ;
17930: GO 17888
// PrepareHuman ( false , i , skill ) ;
17932: LD_INT 0
17934: PPUSH
17935: LD_VAR 0 8
17939: PPUSH
17940: LD_VAR 0 4
17944: PPUSH
17945: CALL_OW 380
// un := CreateHuman ;
17949: LD_ADDR_VAR 0 14
17953: PUSH
17954: CALL_OW 44
17958: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
17959: LD_VAR 0 14
17963: PPUSH
17964: LD_VAR 0 1
17968: PPUSH
17969: CALL_OW 250
17973: PPUSH
17974: LD_VAR 0 1
17978: PPUSH
17979: CALL_OW 251
17983: PPUSH
17984: LD_INT 10
17986: PPUSH
17987: LD_INT 0
17989: PPUSH
17990: CALL_OW 50
// result := result ^ un ;
17994: LD_ADDR_VAR 0 7
17998: PUSH
17999: LD_VAR 0 7
18003: PUSH
18004: LD_VAR 0 14
18008: ADD
18009: ST_TO_ADDR
// end ;
18010: GO 17888
18012: POP
18013: POP
// end ; end ;
18014: LD_VAR 0 7
18018: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
18019: LD_INT 0
18021: PPUSH
18022: PPUSH
18023: PPUSH
18024: PPUSH
18025: PPUSH
18026: PPUSH
18027: PPUSH
18028: PPUSH
18029: PPUSH
18030: PPUSH
18031: PPUSH
18032: PPUSH
18033: PPUSH
18034: PPUSH
18035: PPUSH
18036: PPUSH
// result := false ;
18037: LD_ADDR_VAR 0 3
18041: PUSH
18042: LD_INT 0
18044: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
18045: LD_VAR 0 1
18049: NOT
18050: PUSH
18051: LD_VAR 0 1
18055: PPUSH
18056: CALL_OW 266
18060: PUSH
18061: LD_INT 32
18063: PUSH
18064: LD_INT 33
18066: PUSH
18067: EMPTY
18068: LIST
18069: LIST
18070: IN
18071: NOT
18072: OR
18073: IFFALSE 18077
// exit ;
18075: GO 19186
// nat := GetNation ( tower ) ;
18077: LD_ADDR_VAR 0 12
18081: PUSH
18082: LD_VAR 0 1
18086: PPUSH
18087: CALL_OW 248
18091: ST_TO_ADDR
// side := GetSide ( tower ) ;
18092: LD_ADDR_VAR 0 16
18096: PUSH
18097: LD_VAR 0 1
18101: PPUSH
18102: CALL_OW 255
18106: ST_TO_ADDR
// x := GetX ( tower ) ;
18107: LD_ADDR_VAR 0 10
18111: PUSH
18112: LD_VAR 0 1
18116: PPUSH
18117: CALL_OW 250
18121: ST_TO_ADDR
// y := GetY ( tower ) ;
18122: LD_ADDR_VAR 0 11
18126: PUSH
18127: LD_VAR 0 1
18131: PPUSH
18132: CALL_OW 251
18136: ST_TO_ADDR
// if not x or not y then
18137: LD_VAR 0 10
18141: NOT
18142: PUSH
18143: LD_VAR 0 11
18147: NOT
18148: OR
18149: IFFALSE 18153
// exit ;
18151: GO 19186
// weapon := 0 ;
18153: LD_ADDR_VAR 0 18
18157: PUSH
18158: LD_INT 0
18160: ST_TO_ADDR
// fac_list := [ ] ;
18161: LD_ADDR_VAR 0 17
18165: PUSH
18166: EMPTY
18167: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
18168: LD_ADDR_VAR 0 6
18172: PUSH
18173: LD_VAR 0 1
18177: PPUSH
18178: CALL_OW 274
18182: PPUSH
18183: LD_VAR 0 2
18187: PPUSH
18188: LD_INT 0
18190: PPUSH
18191: CALL 15756 0 3
18195: PPUSH
18196: LD_INT 30
18198: PUSH
18199: LD_INT 3
18201: PUSH
18202: EMPTY
18203: LIST
18204: LIST
18205: PPUSH
18206: CALL_OW 72
18210: ST_TO_ADDR
// if not factories then
18211: LD_VAR 0 6
18215: NOT
18216: IFFALSE 18220
// exit ;
18218: GO 19186
// for i in factories do
18220: LD_ADDR_VAR 0 8
18224: PUSH
18225: LD_VAR 0 6
18229: PUSH
18230: FOR_IN
18231: IFFALSE 18256
// fac_list := fac_list union AvailableWeaponList ( i ) ;
18233: LD_ADDR_VAR 0 17
18237: PUSH
18238: LD_VAR 0 17
18242: PUSH
18243: LD_VAR 0 8
18247: PPUSH
18248: CALL_OW 478
18252: UNION
18253: ST_TO_ADDR
18254: GO 18230
18256: POP
18257: POP
// if not fac_list then
18258: LD_VAR 0 17
18262: NOT
18263: IFFALSE 18267
// exit ;
18265: GO 19186
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
18267: LD_ADDR_VAR 0 5
18271: PUSH
18272: LD_INT 4
18274: PUSH
18275: LD_INT 5
18277: PUSH
18278: LD_INT 9
18280: PUSH
18281: LD_INT 10
18283: PUSH
18284: LD_INT 6
18286: PUSH
18287: LD_INT 7
18289: PUSH
18290: LD_INT 11
18292: PUSH
18293: EMPTY
18294: LIST
18295: LIST
18296: LIST
18297: LIST
18298: LIST
18299: LIST
18300: LIST
18301: PUSH
18302: LD_INT 27
18304: PUSH
18305: LD_INT 28
18307: PUSH
18308: LD_INT 26
18310: PUSH
18311: LD_INT 30
18313: PUSH
18314: EMPTY
18315: LIST
18316: LIST
18317: LIST
18318: LIST
18319: PUSH
18320: LD_INT 43
18322: PUSH
18323: LD_INT 44
18325: PUSH
18326: LD_INT 46
18328: PUSH
18329: LD_INT 45
18331: PUSH
18332: LD_INT 47
18334: PUSH
18335: LD_INT 49
18337: PUSH
18338: EMPTY
18339: LIST
18340: LIST
18341: LIST
18342: LIST
18343: LIST
18344: LIST
18345: PUSH
18346: EMPTY
18347: LIST
18348: LIST
18349: LIST
18350: PUSH
18351: LD_VAR 0 12
18355: ARRAY
18356: ST_TO_ADDR
// list := list isect fac_list ;
18357: LD_ADDR_VAR 0 5
18361: PUSH
18362: LD_VAR 0 5
18366: PUSH
18367: LD_VAR 0 17
18371: ISECT
18372: ST_TO_ADDR
// if not list then
18373: LD_VAR 0 5
18377: NOT
18378: IFFALSE 18382
// exit ;
18380: GO 19186
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
18382: LD_VAR 0 12
18386: PUSH
18387: LD_INT 3
18389: EQUAL
18390: PUSH
18391: LD_INT 49
18393: PUSH
18394: LD_VAR 0 5
18398: IN
18399: AND
18400: PUSH
18401: LD_INT 31
18403: PPUSH
18404: LD_VAR 0 16
18408: PPUSH
18409: CALL_OW 321
18413: PUSH
18414: LD_INT 2
18416: EQUAL
18417: AND
18418: IFFALSE 18478
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
18420: LD_INT 22
18422: PUSH
18423: LD_VAR 0 16
18427: PUSH
18428: EMPTY
18429: LIST
18430: LIST
18431: PUSH
18432: LD_INT 35
18434: PUSH
18435: LD_INT 49
18437: PUSH
18438: EMPTY
18439: LIST
18440: LIST
18441: PUSH
18442: LD_INT 91
18444: PUSH
18445: LD_VAR 0 1
18449: PUSH
18450: LD_INT 10
18452: PUSH
18453: EMPTY
18454: LIST
18455: LIST
18456: LIST
18457: PUSH
18458: EMPTY
18459: LIST
18460: LIST
18461: LIST
18462: PPUSH
18463: CALL_OW 69
18467: NOT
18468: IFFALSE 18478
// weapon := ru_time_lapser ;
18470: LD_ADDR_VAR 0 18
18474: PUSH
18475: LD_INT 49
18477: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
18478: LD_VAR 0 12
18482: PUSH
18483: LD_INT 1
18485: PUSH
18486: LD_INT 2
18488: PUSH
18489: EMPTY
18490: LIST
18491: LIST
18492: IN
18493: PUSH
18494: LD_INT 11
18496: PUSH
18497: LD_VAR 0 5
18501: IN
18502: PUSH
18503: LD_INT 30
18505: PUSH
18506: LD_VAR 0 5
18510: IN
18511: OR
18512: AND
18513: PUSH
18514: LD_INT 6
18516: PPUSH
18517: LD_VAR 0 16
18521: PPUSH
18522: CALL_OW 321
18526: PUSH
18527: LD_INT 2
18529: EQUAL
18530: AND
18531: IFFALSE 18696
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
18533: LD_INT 22
18535: PUSH
18536: LD_VAR 0 16
18540: PUSH
18541: EMPTY
18542: LIST
18543: LIST
18544: PUSH
18545: LD_INT 2
18547: PUSH
18548: LD_INT 35
18550: PUSH
18551: LD_INT 11
18553: PUSH
18554: EMPTY
18555: LIST
18556: LIST
18557: PUSH
18558: LD_INT 35
18560: PUSH
18561: LD_INT 30
18563: PUSH
18564: EMPTY
18565: LIST
18566: LIST
18567: PUSH
18568: EMPTY
18569: LIST
18570: LIST
18571: LIST
18572: PUSH
18573: LD_INT 91
18575: PUSH
18576: LD_VAR 0 1
18580: PUSH
18581: LD_INT 18
18583: PUSH
18584: EMPTY
18585: LIST
18586: LIST
18587: LIST
18588: PUSH
18589: EMPTY
18590: LIST
18591: LIST
18592: LIST
18593: PPUSH
18594: CALL_OW 69
18598: NOT
18599: PUSH
18600: LD_INT 22
18602: PUSH
18603: LD_VAR 0 16
18607: PUSH
18608: EMPTY
18609: LIST
18610: LIST
18611: PUSH
18612: LD_INT 2
18614: PUSH
18615: LD_INT 30
18617: PUSH
18618: LD_INT 32
18620: PUSH
18621: EMPTY
18622: LIST
18623: LIST
18624: PUSH
18625: LD_INT 30
18627: PUSH
18628: LD_INT 33
18630: PUSH
18631: EMPTY
18632: LIST
18633: LIST
18634: PUSH
18635: EMPTY
18636: LIST
18637: LIST
18638: LIST
18639: PUSH
18640: LD_INT 91
18642: PUSH
18643: LD_VAR 0 1
18647: PUSH
18648: LD_INT 12
18650: PUSH
18651: EMPTY
18652: LIST
18653: LIST
18654: LIST
18655: PUSH
18656: EMPTY
18657: LIST
18658: LIST
18659: LIST
18660: PUSH
18661: EMPTY
18662: LIST
18663: PPUSH
18664: CALL_OW 69
18668: PUSH
18669: LD_INT 2
18671: GREATER
18672: AND
18673: IFFALSE 18696
// weapon := [ us_radar , ar_radar ] [ nat ] ;
18675: LD_ADDR_VAR 0 18
18679: PUSH
18680: LD_INT 11
18682: PUSH
18683: LD_INT 30
18685: PUSH
18686: EMPTY
18687: LIST
18688: LIST
18689: PUSH
18690: LD_VAR 0 12
18694: ARRAY
18695: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
18696: LD_VAR 0 18
18700: NOT
18701: PUSH
18702: LD_INT 40
18704: PPUSH
18705: LD_VAR 0 16
18709: PPUSH
18710: CALL_OW 321
18714: PUSH
18715: LD_INT 2
18717: EQUAL
18718: AND
18719: PUSH
18720: LD_INT 7
18722: PUSH
18723: LD_VAR 0 5
18727: IN
18728: PUSH
18729: LD_INT 28
18731: PUSH
18732: LD_VAR 0 5
18736: IN
18737: OR
18738: PUSH
18739: LD_INT 45
18741: PUSH
18742: LD_VAR 0 5
18746: IN
18747: OR
18748: AND
18749: IFFALSE 19003
// begin hex := GetHexInfo ( x , y ) ;
18751: LD_ADDR_VAR 0 4
18755: PUSH
18756: LD_VAR 0 10
18760: PPUSH
18761: LD_VAR 0 11
18765: PPUSH
18766: CALL_OW 546
18770: ST_TO_ADDR
// if hex [ 1 ] then
18771: LD_VAR 0 4
18775: PUSH
18776: LD_INT 1
18778: ARRAY
18779: IFFALSE 18783
// exit ;
18781: GO 19186
// height := hex [ 2 ] ;
18783: LD_ADDR_VAR 0 15
18787: PUSH
18788: LD_VAR 0 4
18792: PUSH
18793: LD_INT 2
18795: ARRAY
18796: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
18797: LD_ADDR_VAR 0 14
18801: PUSH
18802: LD_INT 0
18804: PUSH
18805: LD_INT 2
18807: PUSH
18808: LD_INT 3
18810: PUSH
18811: LD_INT 5
18813: PUSH
18814: EMPTY
18815: LIST
18816: LIST
18817: LIST
18818: LIST
18819: ST_TO_ADDR
// for i in tmp do
18820: LD_ADDR_VAR 0 8
18824: PUSH
18825: LD_VAR 0 14
18829: PUSH
18830: FOR_IN
18831: IFFALSE 19001
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
18833: LD_ADDR_VAR 0 9
18837: PUSH
18838: LD_VAR 0 10
18842: PPUSH
18843: LD_VAR 0 8
18847: PPUSH
18848: LD_INT 5
18850: PPUSH
18851: CALL_OW 272
18855: PUSH
18856: LD_VAR 0 11
18860: PPUSH
18861: LD_VAR 0 8
18865: PPUSH
18866: LD_INT 5
18868: PPUSH
18869: CALL_OW 273
18873: PUSH
18874: EMPTY
18875: LIST
18876: LIST
18877: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
18878: LD_VAR 0 9
18882: PUSH
18883: LD_INT 1
18885: ARRAY
18886: PPUSH
18887: LD_VAR 0 9
18891: PUSH
18892: LD_INT 2
18894: ARRAY
18895: PPUSH
18896: CALL_OW 488
18900: IFFALSE 18999
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
18902: LD_ADDR_VAR 0 4
18906: PUSH
18907: LD_VAR 0 9
18911: PUSH
18912: LD_INT 1
18914: ARRAY
18915: PPUSH
18916: LD_VAR 0 9
18920: PUSH
18921: LD_INT 2
18923: ARRAY
18924: PPUSH
18925: CALL_OW 546
18929: ST_TO_ADDR
// if hex [ 1 ] then
18930: LD_VAR 0 4
18934: PUSH
18935: LD_INT 1
18937: ARRAY
18938: IFFALSE 18942
// continue ;
18940: GO 18830
// h := hex [ 2 ] ;
18942: LD_ADDR_VAR 0 13
18946: PUSH
18947: LD_VAR 0 4
18951: PUSH
18952: LD_INT 2
18954: ARRAY
18955: ST_TO_ADDR
// if h + 7 < height then
18956: LD_VAR 0 13
18960: PUSH
18961: LD_INT 7
18963: PLUS
18964: PUSH
18965: LD_VAR 0 15
18969: LESS
18970: IFFALSE 18999
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
18972: LD_ADDR_VAR 0 18
18976: PUSH
18977: LD_INT 7
18979: PUSH
18980: LD_INT 28
18982: PUSH
18983: LD_INT 45
18985: PUSH
18986: EMPTY
18987: LIST
18988: LIST
18989: LIST
18990: PUSH
18991: LD_VAR 0 12
18995: ARRAY
18996: ST_TO_ADDR
// break ;
18997: GO 19001
// end ; end ; end ;
18999: GO 18830
19001: POP
19002: POP
// end ; if not weapon then
19003: LD_VAR 0 18
19007: NOT
19008: IFFALSE 19068
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
19010: LD_ADDR_VAR 0 5
19014: PUSH
19015: LD_VAR 0 5
19019: PUSH
19020: LD_INT 11
19022: PUSH
19023: LD_INT 30
19025: PUSH
19026: LD_INT 49
19028: PUSH
19029: EMPTY
19030: LIST
19031: LIST
19032: LIST
19033: DIFF
19034: ST_TO_ADDR
// if not list then
19035: LD_VAR 0 5
19039: NOT
19040: IFFALSE 19044
// exit ;
19042: GO 19186
// weapon := list [ rand ( 1 , list ) ] ;
19044: LD_ADDR_VAR 0 18
19048: PUSH
19049: LD_VAR 0 5
19053: PUSH
19054: LD_INT 1
19056: PPUSH
19057: LD_VAR 0 5
19061: PPUSH
19062: CALL_OW 12
19066: ARRAY
19067: ST_TO_ADDR
// end ; if weapon then
19068: LD_VAR 0 18
19072: IFFALSE 19186
// begin tmp := CostOfWeapon ( weapon ) ;
19074: LD_ADDR_VAR 0 14
19078: PUSH
19079: LD_VAR 0 18
19083: PPUSH
19084: CALL_OW 451
19088: ST_TO_ADDR
// j := GetBase ( tower ) ;
19089: LD_ADDR_VAR 0 9
19093: PUSH
19094: LD_VAR 0 1
19098: PPUSH
19099: CALL_OW 274
19103: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
19104: LD_VAR 0 9
19108: PPUSH
19109: LD_INT 1
19111: PPUSH
19112: CALL_OW 275
19116: PUSH
19117: LD_VAR 0 14
19121: PUSH
19122: LD_INT 1
19124: ARRAY
19125: GREATEREQUAL
19126: PUSH
19127: LD_VAR 0 9
19131: PPUSH
19132: LD_INT 2
19134: PPUSH
19135: CALL_OW 275
19139: PUSH
19140: LD_VAR 0 14
19144: PUSH
19145: LD_INT 2
19147: ARRAY
19148: GREATEREQUAL
19149: AND
19150: PUSH
19151: LD_VAR 0 9
19155: PPUSH
19156: LD_INT 3
19158: PPUSH
19159: CALL_OW 275
19163: PUSH
19164: LD_VAR 0 14
19168: PUSH
19169: LD_INT 3
19171: ARRAY
19172: GREATEREQUAL
19173: AND
19174: IFFALSE 19186
// result := weapon ;
19176: LD_ADDR_VAR 0 3
19180: PUSH
19181: LD_VAR 0 18
19185: ST_TO_ADDR
// end ; end ;
19186: LD_VAR 0 3
19190: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
19191: LD_INT 0
19193: PPUSH
19194: PPUSH
// result := true ;
19195: LD_ADDR_VAR 0 3
19199: PUSH
19200: LD_INT 1
19202: ST_TO_ADDR
// if array1 = array2 then
19203: LD_VAR 0 1
19207: PUSH
19208: LD_VAR 0 2
19212: EQUAL
19213: IFFALSE 19273
// begin for i = 1 to array1 do
19215: LD_ADDR_VAR 0 4
19219: PUSH
19220: DOUBLE
19221: LD_INT 1
19223: DEC
19224: ST_TO_ADDR
19225: LD_VAR 0 1
19229: PUSH
19230: FOR_TO
19231: IFFALSE 19269
// if array1 [ i ] <> array2 [ i ] then
19233: LD_VAR 0 1
19237: PUSH
19238: LD_VAR 0 4
19242: ARRAY
19243: PUSH
19244: LD_VAR 0 2
19248: PUSH
19249: LD_VAR 0 4
19253: ARRAY
19254: NONEQUAL
19255: IFFALSE 19267
// begin result := false ;
19257: LD_ADDR_VAR 0 3
19261: PUSH
19262: LD_INT 0
19264: ST_TO_ADDR
// break ;
19265: GO 19269
// end ;
19267: GO 19230
19269: POP
19270: POP
// end else
19271: GO 19281
// result := false ;
19273: LD_ADDR_VAR 0 3
19277: PUSH
19278: LD_INT 0
19280: ST_TO_ADDR
// end ;
19281: LD_VAR 0 3
19285: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
19286: LD_INT 0
19288: PPUSH
19289: PPUSH
// if not array1 or not array2 then
19290: LD_VAR 0 1
19294: NOT
19295: PUSH
19296: LD_VAR 0 2
19300: NOT
19301: OR
19302: IFFALSE 19306
// exit ;
19304: GO 19370
// result := true ;
19306: LD_ADDR_VAR 0 3
19310: PUSH
19311: LD_INT 1
19313: ST_TO_ADDR
// for i = 1 to array1 do
19314: LD_ADDR_VAR 0 4
19318: PUSH
19319: DOUBLE
19320: LD_INT 1
19322: DEC
19323: ST_TO_ADDR
19324: LD_VAR 0 1
19328: PUSH
19329: FOR_TO
19330: IFFALSE 19368
// if array1 [ i ] <> array2 [ i ] then
19332: LD_VAR 0 1
19336: PUSH
19337: LD_VAR 0 4
19341: ARRAY
19342: PUSH
19343: LD_VAR 0 2
19347: PUSH
19348: LD_VAR 0 4
19352: ARRAY
19353: NONEQUAL
19354: IFFALSE 19366
// begin result := false ;
19356: LD_ADDR_VAR 0 3
19360: PUSH
19361: LD_INT 0
19363: ST_TO_ADDR
// break ;
19364: GO 19368
// end ;
19366: GO 19329
19368: POP
19369: POP
// end ;
19370: LD_VAR 0 3
19374: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
19375: LD_INT 0
19377: PPUSH
19378: PPUSH
19379: PPUSH
// pom := GetBase ( fac ) ;
19380: LD_ADDR_VAR 0 5
19384: PUSH
19385: LD_VAR 0 1
19389: PPUSH
19390: CALL_OW 274
19394: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
19395: LD_ADDR_VAR 0 4
19399: PUSH
19400: LD_VAR 0 2
19404: PUSH
19405: LD_INT 1
19407: ARRAY
19408: PPUSH
19409: LD_VAR 0 2
19413: PUSH
19414: LD_INT 2
19416: ARRAY
19417: PPUSH
19418: LD_VAR 0 2
19422: PUSH
19423: LD_INT 3
19425: ARRAY
19426: PPUSH
19427: LD_VAR 0 2
19431: PUSH
19432: LD_INT 4
19434: ARRAY
19435: PPUSH
19436: CALL_OW 449
19440: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
19441: LD_ADDR_VAR 0 3
19445: PUSH
19446: LD_VAR 0 5
19450: PPUSH
19451: LD_INT 1
19453: PPUSH
19454: CALL_OW 275
19458: PUSH
19459: LD_VAR 0 4
19463: PUSH
19464: LD_INT 1
19466: ARRAY
19467: GREATEREQUAL
19468: PUSH
19469: LD_VAR 0 5
19473: PPUSH
19474: LD_INT 2
19476: PPUSH
19477: CALL_OW 275
19481: PUSH
19482: LD_VAR 0 4
19486: PUSH
19487: LD_INT 2
19489: ARRAY
19490: GREATEREQUAL
19491: AND
19492: PUSH
19493: LD_VAR 0 5
19497: PPUSH
19498: LD_INT 3
19500: PPUSH
19501: CALL_OW 275
19505: PUSH
19506: LD_VAR 0 4
19510: PUSH
19511: LD_INT 3
19513: ARRAY
19514: GREATEREQUAL
19515: AND
19516: ST_TO_ADDR
// end ;
19517: LD_VAR 0 3
19521: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
19522: LD_INT 0
19524: PPUSH
19525: PPUSH
19526: PPUSH
19527: PPUSH
// pom := GetBase ( building ) ;
19528: LD_ADDR_VAR 0 3
19532: PUSH
19533: LD_VAR 0 1
19537: PPUSH
19538: CALL_OW 274
19542: ST_TO_ADDR
// if not pom then
19543: LD_VAR 0 3
19547: NOT
19548: IFFALSE 19552
// exit ;
19550: GO 19722
// btype := GetBType ( building ) ;
19552: LD_ADDR_VAR 0 5
19556: PUSH
19557: LD_VAR 0 1
19561: PPUSH
19562: CALL_OW 266
19566: ST_TO_ADDR
// if btype = b_armoury then
19567: LD_VAR 0 5
19571: PUSH
19572: LD_INT 4
19574: EQUAL
19575: IFFALSE 19585
// btype := b_barracks ;
19577: LD_ADDR_VAR 0 5
19581: PUSH
19582: LD_INT 5
19584: ST_TO_ADDR
// if btype = b_depot then
19585: LD_VAR 0 5
19589: PUSH
19590: LD_INT 0
19592: EQUAL
19593: IFFALSE 19603
// btype := b_warehouse ;
19595: LD_ADDR_VAR 0 5
19599: PUSH
19600: LD_INT 1
19602: ST_TO_ADDR
// if btype = b_workshop then
19603: LD_VAR 0 5
19607: PUSH
19608: LD_INT 2
19610: EQUAL
19611: IFFALSE 19621
// btype := b_factory ;
19613: LD_ADDR_VAR 0 5
19617: PUSH
19618: LD_INT 3
19620: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
19621: LD_ADDR_VAR 0 4
19625: PUSH
19626: LD_VAR 0 5
19630: PPUSH
19631: LD_VAR 0 1
19635: PPUSH
19636: CALL_OW 248
19640: PPUSH
19641: CALL_OW 450
19645: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
19646: LD_ADDR_VAR 0 2
19650: PUSH
19651: LD_VAR 0 3
19655: PPUSH
19656: LD_INT 1
19658: PPUSH
19659: CALL_OW 275
19663: PUSH
19664: LD_VAR 0 4
19668: PUSH
19669: LD_INT 1
19671: ARRAY
19672: GREATEREQUAL
19673: PUSH
19674: LD_VAR 0 3
19678: PPUSH
19679: LD_INT 2
19681: PPUSH
19682: CALL_OW 275
19686: PUSH
19687: LD_VAR 0 4
19691: PUSH
19692: LD_INT 2
19694: ARRAY
19695: GREATEREQUAL
19696: AND
19697: PUSH
19698: LD_VAR 0 3
19702: PPUSH
19703: LD_INT 3
19705: PPUSH
19706: CALL_OW 275
19710: PUSH
19711: LD_VAR 0 4
19715: PUSH
19716: LD_INT 3
19718: ARRAY
19719: GREATEREQUAL
19720: AND
19721: ST_TO_ADDR
// end ;
19722: LD_VAR 0 2
19726: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
19727: LD_INT 0
19729: PPUSH
19730: PPUSH
19731: PPUSH
// pom := GetBase ( building ) ;
19732: LD_ADDR_VAR 0 4
19736: PUSH
19737: LD_VAR 0 1
19741: PPUSH
19742: CALL_OW 274
19746: ST_TO_ADDR
// if not pom then
19747: LD_VAR 0 4
19751: NOT
19752: IFFALSE 19756
// exit ;
19754: GO 19857
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
19756: LD_ADDR_VAR 0 5
19760: PUSH
19761: LD_VAR 0 2
19765: PPUSH
19766: LD_VAR 0 1
19770: PPUSH
19771: CALL_OW 248
19775: PPUSH
19776: CALL_OW 450
19780: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
19781: LD_ADDR_VAR 0 3
19785: PUSH
19786: LD_VAR 0 4
19790: PPUSH
19791: LD_INT 1
19793: PPUSH
19794: CALL_OW 275
19798: PUSH
19799: LD_VAR 0 5
19803: PUSH
19804: LD_INT 1
19806: ARRAY
19807: GREATEREQUAL
19808: PUSH
19809: LD_VAR 0 4
19813: PPUSH
19814: LD_INT 2
19816: PPUSH
19817: CALL_OW 275
19821: PUSH
19822: LD_VAR 0 5
19826: PUSH
19827: LD_INT 2
19829: ARRAY
19830: GREATEREQUAL
19831: AND
19832: PUSH
19833: LD_VAR 0 4
19837: PPUSH
19838: LD_INT 3
19840: PPUSH
19841: CALL_OW 275
19845: PUSH
19846: LD_VAR 0 5
19850: PUSH
19851: LD_INT 3
19853: ARRAY
19854: GREATEREQUAL
19855: AND
19856: ST_TO_ADDR
// end ;
19857: LD_VAR 0 3
19861: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
19862: LD_INT 0
19864: PPUSH
19865: PPUSH
19866: PPUSH
19867: PPUSH
19868: PPUSH
19869: PPUSH
19870: PPUSH
19871: PPUSH
19872: PPUSH
19873: PPUSH
19874: PPUSH
// result := false ;
19875: LD_ADDR_VAR 0 8
19879: PUSH
19880: LD_INT 0
19882: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
19883: LD_VAR 0 5
19887: NOT
19888: PUSH
19889: LD_VAR 0 1
19893: NOT
19894: OR
19895: PUSH
19896: LD_VAR 0 2
19900: NOT
19901: OR
19902: PUSH
19903: LD_VAR 0 3
19907: NOT
19908: OR
19909: IFFALSE 19913
// exit ;
19911: GO 20727
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
19913: LD_ADDR_VAR 0 14
19917: PUSH
19918: LD_VAR 0 1
19922: PPUSH
19923: LD_VAR 0 2
19927: PPUSH
19928: LD_VAR 0 3
19932: PPUSH
19933: LD_VAR 0 4
19937: PPUSH
19938: LD_VAR 0 5
19942: PUSH
19943: LD_INT 1
19945: ARRAY
19946: PPUSH
19947: CALL_OW 248
19951: PPUSH
19952: LD_INT 0
19954: PPUSH
19955: CALL 21564 0 6
19959: ST_TO_ADDR
// if not hexes then
19960: LD_VAR 0 14
19964: NOT
19965: IFFALSE 19969
// exit ;
19967: GO 20727
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
19969: LD_ADDR_VAR 0 17
19973: PUSH
19974: LD_VAR 0 5
19978: PPUSH
19979: LD_INT 22
19981: PUSH
19982: LD_VAR 0 13
19986: PPUSH
19987: CALL_OW 255
19991: PUSH
19992: EMPTY
19993: LIST
19994: LIST
19995: PUSH
19996: LD_INT 2
19998: PUSH
19999: LD_INT 30
20001: PUSH
20002: LD_INT 0
20004: PUSH
20005: EMPTY
20006: LIST
20007: LIST
20008: PUSH
20009: LD_INT 30
20011: PUSH
20012: LD_INT 1
20014: PUSH
20015: EMPTY
20016: LIST
20017: LIST
20018: PUSH
20019: EMPTY
20020: LIST
20021: LIST
20022: LIST
20023: PUSH
20024: EMPTY
20025: LIST
20026: LIST
20027: PPUSH
20028: CALL_OW 72
20032: ST_TO_ADDR
// for i = 1 to hexes do
20033: LD_ADDR_VAR 0 9
20037: PUSH
20038: DOUBLE
20039: LD_INT 1
20041: DEC
20042: ST_TO_ADDR
20043: LD_VAR 0 14
20047: PUSH
20048: FOR_TO
20049: IFFALSE 20725
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
20051: LD_ADDR_VAR 0 13
20055: PUSH
20056: LD_VAR 0 14
20060: PUSH
20061: LD_VAR 0 9
20065: ARRAY
20066: PUSH
20067: LD_INT 1
20069: ARRAY
20070: PPUSH
20071: LD_VAR 0 14
20075: PUSH
20076: LD_VAR 0 9
20080: ARRAY
20081: PUSH
20082: LD_INT 2
20084: ARRAY
20085: PPUSH
20086: CALL_OW 428
20090: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
20091: LD_VAR 0 14
20095: PUSH
20096: LD_VAR 0 9
20100: ARRAY
20101: PUSH
20102: LD_INT 1
20104: ARRAY
20105: PPUSH
20106: LD_VAR 0 14
20110: PUSH
20111: LD_VAR 0 9
20115: ARRAY
20116: PUSH
20117: LD_INT 2
20119: ARRAY
20120: PPUSH
20121: CALL_OW 351
20125: PUSH
20126: LD_VAR 0 14
20130: PUSH
20131: LD_VAR 0 9
20135: ARRAY
20136: PUSH
20137: LD_INT 1
20139: ARRAY
20140: PPUSH
20141: LD_VAR 0 14
20145: PUSH
20146: LD_VAR 0 9
20150: ARRAY
20151: PUSH
20152: LD_INT 2
20154: ARRAY
20155: PPUSH
20156: CALL_OW 488
20160: NOT
20161: OR
20162: PUSH
20163: LD_VAR 0 13
20167: PPUSH
20168: CALL_OW 247
20172: PUSH
20173: LD_INT 3
20175: EQUAL
20176: OR
20177: IFFALSE 20183
// exit ;
20179: POP
20180: POP
20181: GO 20727
// if not tmp then
20183: LD_VAR 0 13
20187: NOT
20188: IFFALSE 20192
// continue ;
20190: GO 20048
// result := true ;
20192: LD_ADDR_VAR 0 8
20196: PUSH
20197: LD_INT 1
20199: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
20200: LD_VAR 0 6
20204: PUSH
20205: LD_VAR 0 13
20209: PPUSH
20210: CALL_OW 247
20214: PUSH
20215: LD_INT 2
20217: EQUAL
20218: AND
20219: PUSH
20220: LD_VAR 0 13
20224: PPUSH
20225: CALL_OW 263
20229: PUSH
20230: LD_INT 1
20232: EQUAL
20233: AND
20234: IFFALSE 20398
// begin if IsDrivenBy ( tmp ) then
20236: LD_VAR 0 13
20240: PPUSH
20241: CALL_OW 311
20245: IFFALSE 20249
// continue ;
20247: GO 20048
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
20249: LD_VAR 0 6
20253: PPUSH
20254: LD_INT 3
20256: PUSH
20257: LD_INT 60
20259: PUSH
20260: EMPTY
20261: LIST
20262: PUSH
20263: EMPTY
20264: LIST
20265: LIST
20266: PUSH
20267: LD_INT 3
20269: PUSH
20270: LD_INT 55
20272: PUSH
20273: EMPTY
20274: LIST
20275: PUSH
20276: EMPTY
20277: LIST
20278: LIST
20279: PUSH
20280: EMPTY
20281: LIST
20282: LIST
20283: PPUSH
20284: CALL_OW 72
20288: IFFALSE 20396
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
20290: LD_ADDR_VAR 0 18
20294: PUSH
20295: LD_VAR 0 6
20299: PPUSH
20300: LD_INT 3
20302: PUSH
20303: LD_INT 60
20305: PUSH
20306: EMPTY
20307: LIST
20308: PUSH
20309: EMPTY
20310: LIST
20311: LIST
20312: PUSH
20313: LD_INT 3
20315: PUSH
20316: LD_INT 55
20318: PUSH
20319: EMPTY
20320: LIST
20321: PUSH
20322: EMPTY
20323: LIST
20324: LIST
20325: PUSH
20326: EMPTY
20327: LIST
20328: LIST
20329: PPUSH
20330: CALL_OW 72
20334: PUSH
20335: LD_INT 1
20337: ARRAY
20338: ST_TO_ADDR
// if IsInUnit ( driver ) then
20339: LD_VAR 0 18
20343: PPUSH
20344: CALL_OW 310
20348: IFFALSE 20359
// ComExit ( driver ) ;
20350: LD_VAR 0 18
20354: PPUSH
20355: CALL 44748 0 1
// AddComEnterUnit ( driver , tmp ) ;
20359: LD_VAR 0 18
20363: PPUSH
20364: LD_VAR 0 13
20368: PPUSH
20369: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
20373: LD_VAR 0 18
20377: PPUSH
20378: LD_VAR 0 7
20382: PPUSH
20383: CALL_OW 173
// AddComExitVehicle ( driver ) ;
20387: LD_VAR 0 18
20391: PPUSH
20392: CALL_OW 181
// end ; continue ;
20396: GO 20048
// end ; if not cleaners or not tmp in cleaners then
20398: LD_VAR 0 6
20402: NOT
20403: PUSH
20404: LD_VAR 0 13
20408: PUSH
20409: LD_VAR 0 6
20413: IN
20414: NOT
20415: OR
20416: IFFALSE 20723
// begin if dep then
20418: LD_VAR 0 17
20422: IFFALSE 20558
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
20424: LD_ADDR_VAR 0 16
20428: PUSH
20429: LD_VAR 0 17
20433: PUSH
20434: LD_INT 1
20436: ARRAY
20437: PPUSH
20438: CALL_OW 250
20442: PPUSH
20443: LD_VAR 0 17
20447: PUSH
20448: LD_INT 1
20450: ARRAY
20451: PPUSH
20452: CALL_OW 254
20456: PPUSH
20457: LD_INT 5
20459: PPUSH
20460: CALL_OW 272
20464: PUSH
20465: LD_VAR 0 17
20469: PUSH
20470: LD_INT 1
20472: ARRAY
20473: PPUSH
20474: CALL_OW 251
20478: PPUSH
20479: LD_VAR 0 17
20483: PUSH
20484: LD_INT 1
20486: ARRAY
20487: PPUSH
20488: CALL_OW 254
20492: PPUSH
20493: LD_INT 5
20495: PPUSH
20496: CALL_OW 273
20500: PUSH
20501: EMPTY
20502: LIST
20503: LIST
20504: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
20505: LD_VAR 0 16
20509: PUSH
20510: LD_INT 1
20512: ARRAY
20513: PPUSH
20514: LD_VAR 0 16
20518: PUSH
20519: LD_INT 2
20521: ARRAY
20522: PPUSH
20523: CALL_OW 488
20527: IFFALSE 20558
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
20529: LD_VAR 0 13
20533: PPUSH
20534: LD_VAR 0 16
20538: PUSH
20539: LD_INT 1
20541: ARRAY
20542: PPUSH
20543: LD_VAR 0 16
20547: PUSH
20548: LD_INT 2
20550: ARRAY
20551: PPUSH
20552: CALL_OW 111
// continue ;
20556: GO 20048
// end ; end ; r := GetDir ( tmp ) ;
20558: LD_ADDR_VAR 0 15
20562: PUSH
20563: LD_VAR 0 13
20567: PPUSH
20568: CALL_OW 254
20572: ST_TO_ADDR
// if r = 5 then
20573: LD_VAR 0 15
20577: PUSH
20578: LD_INT 5
20580: EQUAL
20581: IFFALSE 20591
// r := 0 ;
20583: LD_ADDR_VAR 0 15
20587: PUSH
20588: LD_INT 0
20590: ST_TO_ADDR
// for j = r to 5 do
20591: LD_ADDR_VAR 0 10
20595: PUSH
20596: DOUBLE
20597: LD_VAR 0 15
20601: DEC
20602: ST_TO_ADDR
20603: LD_INT 5
20605: PUSH
20606: FOR_TO
20607: IFFALSE 20721
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
20609: LD_ADDR_VAR 0 11
20613: PUSH
20614: LD_VAR 0 13
20618: PPUSH
20619: CALL_OW 250
20623: PPUSH
20624: LD_VAR 0 10
20628: PPUSH
20629: LD_INT 2
20631: PPUSH
20632: CALL_OW 272
20636: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
20637: LD_ADDR_VAR 0 12
20641: PUSH
20642: LD_VAR 0 13
20646: PPUSH
20647: CALL_OW 251
20651: PPUSH
20652: LD_VAR 0 10
20656: PPUSH
20657: LD_INT 2
20659: PPUSH
20660: CALL_OW 273
20664: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
20665: LD_VAR 0 11
20669: PPUSH
20670: LD_VAR 0 12
20674: PPUSH
20675: CALL_OW 488
20679: PUSH
20680: LD_VAR 0 11
20684: PPUSH
20685: LD_VAR 0 12
20689: PPUSH
20690: CALL_OW 428
20694: NOT
20695: AND
20696: IFFALSE 20719
// begin ComMoveXY ( tmp , _x , _y ) ;
20698: LD_VAR 0 13
20702: PPUSH
20703: LD_VAR 0 11
20707: PPUSH
20708: LD_VAR 0 12
20712: PPUSH
20713: CALL_OW 111
// break ;
20717: GO 20721
// end ; end ;
20719: GO 20606
20721: POP
20722: POP
// end ; end ;
20723: GO 20048
20725: POP
20726: POP
// end ;
20727: LD_VAR 0 8
20731: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
20732: LD_INT 0
20734: PPUSH
20735: PPUSH
20736: PPUSH
20737: PPUSH
20738: PPUSH
20739: PPUSH
20740: PPUSH
20741: PPUSH
20742: PPUSH
20743: PPUSH
// result := false ;
20744: LD_ADDR_VAR 0 6
20748: PUSH
20749: LD_INT 0
20751: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
20752: LD_VAR 0 1
20756: NOT
20757: PUSH
20758: LD_VAR 0 1
20762: PPUSH
20763: CALL_OW 266
20767: PUSH
20768: LD_INT 0
20770: PUSH
20771: LD_INT 1
20773: PUSH
20774: EMPTY
20775: LIST
20776: LIST
20777: IN
20778: NOT
20779: OR
20780: PUSH
20781: LD_VAR 0 2
20785: NOT
20786: OR
20787: PUSH
20788: LD_VAR 0 5
20792: PUSH
20793: LD_INT 0
20795: PUSH
20796: LD_INT 1
20798: PUSH
20799: LD_INT 2
20801: PUSH
20802: LD_INT 3
20804: PUSH
20805: LD_INT 4
20807: PUSH
20808: LD_INT 5
20810: PUSH
20811: EMPTY
20812: LIST
20813: LIST
20814: LIST
20815: LIST
20816: LIST
20817: LIST
20818: IN
20819: NOT
20820: OR
20821: PUSH
20822: LD_VAR 0 3
20826: PPUSH
20827: LD_VAR 0 4
20831: PPUSH
20832: CALL_OW 488
20836: NOT
20837: OR
20838: IFFALSE 20842
// exit ;
20840: GO 21559
// pom := GetBase ( depot ) ;
20842: LD_ADDR_VAR 0 10
20846: PUSH
20847: LD_VAR 0 1
20851: PPUSH
20852: CALL_OW 274
20856: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
20857: LD_ADDR_VAR 0 11
20861: PUSH
20862: LD_VAR 0 2
20866: PPUSH
20867: LD_VAR 0 1
20871: PPUSH
20872: CALL_OW 248
20876: PPUSH
20877: CALL_OW 450
20881: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
20882: LD_VAR 0 10
20886: PPUSH
20887: LD_INT 1
20889: PPUSH
20890: CALL_OW 275
20894: PUSH
20895: LD_VAR 0 11
20899: PUSH
20900: LD_INT 1
20902: ARRAY
20903: GREATEREQUAL
20904: PUSH
20905: LD_VAR 0 10
20909: PPUSH
20910: LD_INT 2
20912: PPUSH
20913: CALL_OW 275
20917: PUSH
20918: LD_VAR 0 11
20922: PUSH
20923: LD_INT 2
20925: ARRAY
20926: GREATEREQUAL
20927: AND
20928: PUSH
20929: LD_VAR 0 10
20933: PPUSH
20934: LD_INT 3
20936: PPUSH
20937: CALL_OW 275
20941: PUSH
20942: LD_VAR 0 11
20946: PUSH
20947: LD_INT 3
20949: ARRAY
20950: GREATEREQUAL
20951: AND
20952: NOT
20953: IFFALSE 20957
// exit ;
20955: GO 21559
// if GetBType ( depot ) = b_depot then
20957: LD_VAR 0 1
20961: PPUSH
20962: CALL_OW 266
20966: PUSH
20967: LD_INT 0
20969: EQUAL
20970: IFFALSE 20982
// dist := 28 else
20972: LD_ADDR_VAR 0 14
20976: PUSH
20977: LD_INT 28
20979: ST_TO_ADDR
20980: GO 20990
// dist := 36 ;
20982: LD_ADDR_VAR 0 14
20986: PUSH
20987: LD_INT 36
20989: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
20990: LD_VAR 0 1
20994: PPUSH
20995: LD_VAR 0 3
20999: PPUSH
21000: LD_VAR 0 4
21004: PPUSH
21005: CALL_OW 297
21009: PUSH
21010: LD_VAR 0 14
21014: GREATER
21015: IFFALSE 21019
// exit ;
21017: GO 21559
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
21019: LD_ADDR_VAR 0 12
21023: PUSH
21024: LD_VAR 0 2
21028: PPUSH
21029: LD_VAR 0 3
21033: PPUSH
21034: LD_VAR 0 4
21038: PPUSH
21039: LD_VAR 0 5
21043: PPUSH
21044: LD_VAR 0 1
21048: PPUSH
21049: CALL_OW 248
21053: PPUSH
21054: LD_INT 0
21056: PPUSH
21057: CALL 21564 0 6
21061: ST_TO_ADDR
// if not hexes then
21062: LD_VAR 0 12
21066: NOT
21067: IFFALSE 21071
// exit ;
21069: GO 21559
// hex := GetHexInfo ( x , y ) ;
21071: LD_ADDR_VAR 0 15
21075: PUSH
21076: LD_VAR 0 3
21080: PPUSH
21081: LD_VAR 0 4
21085: PPUSH
21086: CALL_OW 546
21090: ST_TO_ADDR
// if hex [ 1 ] then
21091: LD_VAR 0 15
21095: PUSH
21096: LD_INT 1
21098: ARRAY
21099: IFFALSE 21103
// exit ;
21101: GO 21559
// height := hex [ 2 ] ;
21103: LD_ADDR_VAR 0 13
21107: PUSH
21108: LD_VAR 0 15
21112: PUSH
21113: LD_INT 2
21115: ARRAY
21116: ST_TO_ADDR
// for i = 1 to hexes do
21117: LD_ADDR_VAR 0 7
21121: PUSH
21122: DOUBLE
21123: LD_INT 1
21125: DEC
21126: ST_TO_ADDR
21127: LD_VAR 0 12
21131: PUSH
21132: FOR_TO
21133: IFFALSE 21463
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
21135: LD_VAR 0 12
21139: PUSH
21140: LD_VAR 0 7
21144: ARRAY
21145: PUSH
21146: LD_INT 1
21148: ARRAY
21149: PPUSH
21150: LD_VAR 0 12
21154: PUSH
21155: LD_VAR 0 7
21159: ARRAY
21160: PUSH
21161: LD_INT 2
21163: ARRAY
21164: PPUSH
21165: CALL_OW 488
21169: NOT
21170: PUSH
21171: LD_VAR 0 12
21175: PUSH
21176: LD_VAR 0 7
21180: ARRAY
21181: PUSH
21182: LD_INT 1
21184: ARRAY
21185: PPUSH
21186: LD_VAR 0 12
21190: PUSH
21191: LD_VAR 0 7
21195: ARRAY
21196: PUSH
21197: LD_INT 2
21199: ARRAY
21200: PPUSH
21201: CALL_OW 428
21205: PUSH
21206: LD_INT 0
21208: GREATER
21209: OR
21210: PUSH
21211: LD_VAR 0 12
21215: PUSH
21216: LD_VAR 0 7
21220: ARRAY
21221: PUSH
21222: LD_INT 1
21224: ARRAY
21225: PPUSH
21226: LD_VAR 0 12
21230: PUSH
21231: LD_VAR 0 7
21235: ARRAY
21236: PUSH
21237: LD_INT 2
21239: ARRAY
21240: PPUSH
21241: CALL_OW 351
21245: OR
21246: IFFALSE 21252
// exit ;
21248: POP
21249: POP
21250: GO 21559
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
21252: LD_ADDR_VAR 0 8
21256: PUSH
21257: LD_VAR 0 12
21261: PUSH
21262: LD_VAR 0 7
21266: ARRAY
21267: PUSH
21268: LD_INT 1
21270: ARRAY
21271: PPUSH
21272: LD_VAR 0 12
21276: PUSH
21277: LD_VAR 0 7
21281: ARRAY
21282: PUSH
21283: LD_INT 2
21285: ARRAY
21286: PPUSH
21287: CALL_OW 546
21291: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
21292: LD_VAR 0 8
21296: PUSH
21297: LD_INT 1
21299: ARRAY
21300: PUSH
21301: LD_VAR 0 8
21305: PUSH
21306: LD_INT 2
21308: ARRAY
21309: PUSH
21310: LD_VAR 0 13
21314: PUSH
21315: LD_INT 2
21317: PLUS
21318: GREATER
21319: OR
21320: PUSH
21321: LD_VAR 0 8
21325: PUSH
21326: LD_INT 2
21328: ARRAY
21329: PUSH
21330: LD_VAR 0 13
21334: PUSH
21335: LD_INT 2
21337: MINUS
21338: LESS
21339: OR
21340: PUSH
21341: LD_VAR 0 8
21345: PUSH
21346: LD_INT 3
21348: ARRAY
21349: PUSH
21350: LD_INT 0
21352: PUSH
21353: LD_INT 8
21355: PUSH
21356: LD_INT 9
21358: PUSH
21359: LD_INT 10
21361: PUSH
21362: LD_INT 11
21364: PUSH
21365: LD_INT 12
21367: PUSH
21368: LD_INT 13
21370: PUSH
21371: LD_INT 16
21373: PUSH
21374: LD_INT 17
21376: PUSH
21377: LD_INT 18
21379: PUSH
21380: LD_INT 19
21382: PUSH
21383: LD_INT 20
21385: PUSH
21386: LD_INT 21
21388: PUSH
21389: EMPTY
21390: LIST
21391: LIST
21392: LIST
21393: LIST
21394: LIST
21395: LIST
21396: LIST
21397: LIST
21398: LIST
21399: LIST
21400: LIST
21401: LIST
21402: LIST
21403: IN
21404: NOT
21405: OR
21406: PUSH
21407: LD_VAR 0 8
21411: PUSH
21412: LD_INT 5
21414: ARRAY
21415: NOT
21416: OR
21417: PUSH
21418: LD_VAR 0 8
21422: PUSH
21423: LD_INT 6
21425: ARRAY
21426: PUSH
21427: LD_INT 1
21429: PUSH
21430: LD_INT 2
21432: PUSH
21433: LD_INT 7
21435: PUSH
21436: LD_INT 9
21438: PUSH
21439: LD_INT 10
21441: PUSH
21442: LD_INT 11
21444: PUSH
21445: EMPTY
21446: LIST
21447: LIST
21448: LIST
21449: LIST
21450: LIST
21451: LIST
21452: IN
21453: NOT
21454: OR
21455: IFFALSE 21461
// exit ;
21457: POP
21458: POP
21459: GO 21559
// end ;
21461: GO 21132
21463: POP
21464: POP
// side := GetSide ( depot ) ;
21465: LD_ADDR_VAR 0 9
21469: PUSH
21470: LD_VAR 0 1
21474: PPUSH
21475: CALL_OW 255
21479: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
21480: LD_VAR 0 9
21484: PPUSH
21485: LD_VAR 0 3
21489: PPUSH
21490: LD_VAR 0 4
21494: PPUSH
21495: LD_INT 20
21497: PPUSH
21498: CALL 13910 0 4
21502: PUSH
21503: LD_INT 4
21505: ARRAY
21506: IFFALSE 21510
// exit ;
21508: GO 21559
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
21510: LD_VAR 0 2
21514: PUSH
21515: LD_INT 29
21517: PUSH
21518: LD_INT 30
21520: PUSH
21521: EMPTY
21522: LIST
21523: LIST
21524: IN
21525: PUSH
21526: LD_VAR 0 3
21530: PPUSH
21531: LD_VAR 0 4
21535: PPUSH
21536: LD_VAR 0 9
21540: PPUSH
21541: CALL_OW 440
21545: NOT
21546: AND
21547: IFFALSE 21551
// exit ;
21549: GO 21559
// result := true ;
21551: LD_ADDR_VAR 0 6
21555: PUSH
21556: LD_INT 1
21558: ST_TO_ADDR
// end ;
21559: LD_VAR 0 6
21563: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
21564: LD_INT 0
21566: PPUSH
21567: PPUSH
21568: PPUSH
21569: PPUSH
21570: PPUSH
21571: PPUSH
21572: PPUSH
21573: PPUSH
21574: PPUSH
21575: PPUSH
21576: PPUSH
21577: PPUSH
21578: PPUSH
21579: PPUSH
21580: PPUSH
21581: PPUSH
21582: PPUSH
21583: PPUSH
21584: PPUSH
21585: PPUSH
21586: PPUSH
21587: PPUSH
21588: PPUSH
21589: PPUSH
21590: PPUSH
21591: PPUSH
21592: PPUSH
21593: PPUSH
21594: PPUSH
21595: PPUSH
21596: PPUSH
21597: PPUSH
21598: PPUSH
21599: PPUSH
21600: PPUSH
21601: PPUSH
21602: PPUSH
21603: PPUSH
21604: PPUSH
21605: PPUSH
21606: PPUSH
21607: PPUSH
21608: PPUSH
21609: PPUSH
21610: PPUSH
21611: PPUSH
21612: PPUSH
21613: PPUSH
21614: PPUSH
21615: PPUSH
21616: PPUSH
21617: PPUSH
21618: PPUSH
21619: PPUSH
21620: PPUSH
21621: PPUSH
21622: PPUSH
21623: PPUSH
// result = [ ] ;
21624: LD_ADDR_VAR 0 7
21628: PUSH
21629: EMPTY
21630: ST_TO_ADDR
// temp_list = [ ] ;
21631: LD_ADDR_VAR 0 9
21635: PUSH
21636: EMPTY
21637: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
21638: LD_VAR 0 4
21642: PUSH
21643: LD_INT 0
21645: PUSH
21646: LD_INT 1
21648: PUSH
21649: LD_INT 2
21651: PUSH
21652: LD_INT 3
21654: PUSH
21655: LD_INT 4
21657: PUSH
21658: LD_INT 5
21660: PUSH
21661: EMPTY
21662: LIST
21663: LIST
21664: LIST
21665: LIST
21666: LIST
21667: LIST
21668: IN
21669: NOT
21670: PUSH
21671: LD_VAR 0 1
21675: PUSH
21676: LD_INT 0
21678: PUSH
21679: LD_INT 1
21681: PUSH
21682: EMPTY
21683: LIST
21684: LIST
21685: IN
21686: PUSH
21687: LD_VAR 0 5
21691: PUSH
21692: LD_INT 1
21694: PUSH
21695: LD_INT 2
21697: PUSH
21698: LD_INT 3
21700: PUSH
21701: EMPTY
21702: LIST
21703: LIST
21704: LIST
21705: IN
21706: NOT
21707: AND
21708: OR
21709: IFFALSE 21713
// exit ;
21711: GO 40104
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
21713: LD_VAR 0 1
21717: PUSH
21718: LD_INT 6
21720: PUSH
21721: LD_INT 7
21723: PUSH
21724: LD_INT 8
21726: PUSH
21727: LD_INT 13
21729: PUSH
21730: LD_INT 12
21732: PUSH
21733: LD_INT 15
21735: PUSH
21736: LD_INT 11
21738: PUSH
21739: LD_INT 14
21741: PUSH
21742: LD_INT 10
21744: PUSH
21745: EMPTY
21746: LIST
21747: LIST
21748: LIST
21749: LIST
21750: LIST
21751: LIST
21752: LIST
21753: LIST
21754: LIST
21755: IN
21756: IFFALSE 21766
// btype = b_lab ;
21758: LD_ADDR_VAR 0 1
21762: PUSH
21763: LD_INT 6
21765: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
21766: LD_VAR 0 6
21770: PUSH
21771: LD_INT 0
21773: PUSH
21774: LD_INT 1
21776: PUSH
21777: LD_INT 2
21779: PUSH
21780: EMPTY
21781: LIST
21782: LIST
21783: LIST
21784: IN
21785: NOT
21786: PUSH
21787: LD_VAR 0 1
21791: PUSH
21792: LD_INT 0
21794: PUSH
21795: LD_INT 1
21797: PUSH
21798: LD_INT 2
21800: PUSH
21801: LD_INT 3
21803: PUSH
21804: LD_INT 6
21806: PUSH
21807: LD_INT 36
21809: PUSH
21810: LD_INT 4
21812: PUSH
21813: LD_INT 5
21815: PUSH
21816: LD_INT 31
21818: PUSH
21819: LD_INT 32
21821: PUSH
21822: LD_INT 33
21824: PUSH
21825: EMPTY
21826: LIST
21827: LIST
21828: LIST
21829: LIST
21830: LIST
21831: LIST
21832: LIST
21833: LIST
21834: LIST
21835: LIST
21836: LIST
21837: IN
21838: NOT
21839: PUSH
21840: LD_VAR 0 6
21844: PUSH
21845: LD_INT 1
21847: EQUAL
21848: AND
21849: OR
21850: PUSH
21851: LD_VAR 0 1
21855: PUSH
21856: LD_INT 2
21858: PUSH
21859: LD_INT 3
21861: PUSH
21862: EMPTY
21863: LIST
21864: LIST
21865: IN
21866: NOT
21867: PUSH
21868: LD_VAR 0 6
21872: PUSH
21873: LD_INT 2
21875: EQUAL
21876: AND
21877: OR
21878: IFFALSE 21888
// mode = 0 ;
21880: LD_ADDR_VAR 0 6
21884: PUSH
21885: LD_INT 0
21887: ST_TO_ADDR
// case mode of 0 :
21888: LD_VAR 0 6
21892: PUSH
21893: LD_INT 0
21895: DOUBLE
21896: EQUAL
21897: IFTRUE 21901
21899: GO 33354
21901: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
21902: LD_ADDR_VAR 0 11
21906: PUSH
21907: LD_INT 0
21909: PUSH
21910: LD_INT 0
21912: PUSH
21913: EMPTY
21914: LIST
21915: LIST
21916: PUSH
21917: LD_INT 0
21919: PUSH
21920: LD_INT 1
21922: NEG
21923: PUSH
21924: EMPTY
21925: LIST
21926: LIST
21927: PUSH
21928: LD_INT 1
21930: PUSH
21931: LD_INT 0
21933: PUSH
21934: EMPTY
21935: LIST
21936: LIST
21937: PUSH
21938: LD_INT 1
21940: PUSH
21941: LD_INT 1
21943: PUSH
21944: EMPTY
21945: LIST
21946: LIST
21947: PUSH
21948: LD_INT 0
21950: PUSH
21951: LD_INT 1
21953: PUSH
21954: EMPTY
21955: LIST
21956: LIST
21957: PUSH
21958: LD_INT 1
21960: NEG
21961: PUSH
21962: LD_INT 0
21964: PUSH
21965: EMPTY
21966: LIST
21967: LIST
21968: PUSH
21969: LD_INT 1
21971: NEG
21972: PUSH
21973: LD_INT 1
21975: NEG
21976: PUSH
21977: EMPTY
21978: LIST
21979: LIST
21980: PUSH
21981: LD_INT 1
21983: NEG
21984: PUSH
21985: LD_INT 2
21987: NEG
21988: PUSH
21989: EMPTY
21990: LIST
21991: LIST
21992: PUSH
21993: LD_INT 0
21995: PUSH
21996: LD_INT 2
21998: NEG
21999: PUSH
22000: EMPTY
22001: LIST
22002: LIST
22003: PUSH
22004: LD_INT 1
22006: PUSH
22007: LD_INT 1
22009: NEG
22010: PUSH
22011: EMPTY
22012: LIST
22013: LIST
22014: PUSH
22015: LD_INT 1
22017: PUSH
22018: LD_INT 2
22020: PUSH
22021: EMPTY
22022: LIST
22023: LIST
22024: PUSH
22025: LD_INT 0
22027: PUSH
22028: LD_INT 2
22030: PUSH
22031: EMPTY
22032: LIST
22033: LIST
22034: PUSH
22035: LD_INT 1
22037: NEG
22038: PUSH
22039: LD_INT 1
22041: PUSH
22042: EMPTY
22043: LIST
22044: LIST
22045: PUSH
22046: LD_INT 1
22048: PUSH
22049: LD_INT 3
22051: PUSH
22052: EMPTY
22053: LIST
22054: LIST
22055: PUSH
22056: LD_INT 0
22058: PUSH
22059: LD_INT 3
22061: PUSH
22062: EMPTY
22063: LIST
22064: LIST
22065: PUSH
22066: LD_INT 1
22068: NEG
22069: PUSH
22070: LD_INT 2
22072: PUSH
22073: EMPTY
22074: LIST
22075: LIST
22076: PUSH
22077: EMPTY
22078: LIST
22079: LIST
22080: LIST
22081: LIST
22082: LIST
22083: LIST
22084: LIST
22085: LIST
22086: LIST
22087: LIST
22088: LIST
22089: LIST
22090: LIST
22091: LIST
22092: LIST
22093: LIST
22094: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
22095: LD_ADDR_VAR 0 12
22099: PUSH
22100: LD_INT 0
22102: PUSH
22103: LD_INT 0
22105: PUSH
22106: EMPTY
22107: LIST
22108: LIST
22109: PUSH
22110: LD_INT 0
22112: PUSH
22113: LD_INT 1
22115: NEG
22116: PUSH
22117: EMPTY
22118: LIST
22119: LIST
22120: PUSH
22121: LD_INT 1
22123: PUSH
22124: LD_INT 0
22126: PUSH
22127: EMPTY
22128: LIST
22129: LIST
22130: PUSH
22131: LD_INT 1
22133: PUSH
22134: LD_INT 1
22136: PUSH
22137: EMPTY
22138: LIST
22139: LIST
22140: PUSH
22141: LD_INT 0
22143: PUSH
22144: LD_INT 1
22146: PUSH
22147: EMPTY
22148: LIST
22149: LIST
22150: PUSH
22151: LD_INT 1
22153: NEG
22154: PUSH
22155: LD_INT 0
22157: PUSH
22158: EMPTY
22159: LIST
22160: LIST
22161: PUSH
22162: LD_INT 1
22164: NEG
22165: PUSH
22166: LD_INT 1
22168: NEG
22169: PUSH
22170: EMPTY
22171: LIST
22172: LIST
22173: PUSH
22174: LD_INT 1
22176: PUSH
22177: LD_INT 1
22179: NEG
22180: PUSH
22181: EMPTY
22182: LIST
22183: LIST
22184: PUSH
22185: LD_INT 2
22187: PUSH
22188: LD_INT 0
22190: PUSH
22191: EMPTY
22192: LIST
22193: LIST
22194: PUSH
22195: LD_INT 2
22197: PUSH
22198: LD_INT 1
22200: PUSH
22201: EMPTY
22202: LIST
22203: LIST
22204: PUSH
22205: LD_INT 1
22207: NEG
22208: PUSH
22209: LD_INT 1
22211: PUSH
22212: EMPTY
22213: LIST
22214: LIST
22215: PUSH
22216: LD_INT 2
22218: NEG
22219: PUSH
22220: LD_INT 0
22222: PUSH
22223: EMPTY
22224: LIST
22225: LIST
22226: PUSH
22227: LD_INT 2
22229: NEG
22230: PUSH
22231: LD_INT 1
22233: NEG
22234: PUSH
22235: EMPTY
22236: LIST
22237: LIST
22238: PUSH
22239: LD_INT 2
22241: NEG
22242: PUSH
22243: LD_INT 1
22245: PUSH
22246: EMPTY
22247: LIST
22248: LIST
22249: PUSH
22250: LD_INT 3
22252: NEG
22253: PUSH
22254: LD_INT 0
22256: PUSH
22257: EMPTY
22258: LIST
22259: LIST
22260: PUSH
22261: LD_INT 3
22263: NEG
22264: PUSH
22265: LD_INT 1
22267: NEG
22268: PUSH
22269: EMPTY
22270: LIST
22271: LIST
22272: PUSH
22273: EMPTY
22274: LIST
22275: LIST
22276: LIST
22277: LIST
22278: LIST
22279: LIST
22280: LIST
22281: LIST
22282: LIST
22283: LIST
22284: LIST
22285: LIST
22286: LIST
22287: LIST
22288: LIST
22289: LIST
22290: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
22291: LD_ADDR_VAR 0 13
22295: PUSH
22296: LD_INT 0
22298: PUSH
22299: LD_INT 0
22301: PUSH
22302: EMPTY
22303: LIST
22304: LIST
22305: PUSH
22306: LD_INT 0
22308: PUSH
22309: LD_INT 1
22311: NEG
22312: PUSH
22313: EMPTY
22314: LIST
22315: LIST
22316: PUSH
22317: LD_INT 1
22319: PUSH
22320: LD_INT 0
22322: PUSH
22323: EMPTY
22324: LIST
22325: LIST
22326: PUSH
22327: LD_INT 1
22329: PUSH
22330: LD_INT 1
22332: PUSH
22333: EMPTY
22334: LIST
22335: LIST
22336: PUSH
22337: LD_INT 0
22339: PUSH
22340: LD_INT 1
22342: PUSH
22343: EMPTY
22344: LIST
22345: LIST
22346: PUSH
22347: LD_INT 1
22349: NEG
22350: PUSH
22351: LD_INT 0
22353: PUSH
22354: EMPTY
22355: LIST
22356: LIST
22357: PUSH
22358: LD_INT 1
22360: NEG
22361: PUSH
22362: LD_INT 1
22364: NEG
22365: PUSH
22366: EMPTY
22367: LIST
22368: LIST
22369: PUSH
22370: LD_INT 1
22372: NEG
22373: PUSH
22374: LD_INT 2
22376: NEG
22377: PUSH
22378: EMPTY
22379: LIST
22380: LIST
22381: PUSH
22382: LD_INT 2
22384: PUSH
22385: LD_INT 1
22387: PUSH
22388: EMPTY
22389: LIST
22390: LIST
22391: PUSH
22392: LD_INT 2
22394: PUSH
22395: LD_INT 2
22397: PUSH
22398: EMPTY
22399: LIST
22400: LIST
22401: PUSH
22402: LD_INT 1
22404: PUSH
22405: LD_INT 2
22407: PUSH
22408: EMPTY
22409: LIST
22410: LIST
22411: PUSH
22412: LD_INT 2
22414: NEG
22415: PUSH
22416: LD_INT 1
22418: NEG
22419: PUSH
22420: EMPTY
22421: LIST
22422: LIST
22423: PUSH
22424: LD_INT 2
22426: NEG
22427: PUSH
22428: LD_INT 2
22430: NEG
22431: PUSH
22432: EMPTY
22433: LIST
22434: LIST
22435: PUSH
22436: LD_INT 2
22438: NEG
22439: PUSH
22440: LD_INT 3
22442: NEG
22443: PUSH
22444: EMPTY
22445: LIST
22446: LIST
22447: PUSH
22448: LD_INT 3
22450: NEG
22451: PUSH
22452: LD_INT 2
22454: NEG
22455: PUSH
22456: EMPTY
22457: LIST
22458: LIST
22459: PUSH
22460: LD_INT 3
22462: NEG
22463: PUSH
22464: LD_INT 3
22466: NEG
22467: PUSH
22468: EMPTY
22469: LIST
22470: LIST
22471: PUSH
22472: EMPTY
22473: LIST
22474: LIST
22475: LIST
22476: LIST
22477: LIST
22478: LIST
22479: LIST
22480: LIST
22481: LIST
22482: LIST
22483: LIST
22484: LIST
22485: LIST
22486: LIST
22487: LIST
22488: LIST
22489: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
22490: LD_ADDR_VAR 0 14
22494: PUSH
22495: LD_INT 0
22497: PUSH
22498: LD_INT 0
22500: PUSH
22501: EMPTY
22502: LIST
22503: LIST
22504: PUSH
22505: LD_INT 0
22507: PUSH
22508: LD_INT 1
22510: NEG
22511: PUSH
22512: EMPTY
22513: LIST
22514: LIST
22515: PUSH
22516: LD_INT 1
22518: PUSH
22519: LD_INT 0
22521: PUSH
22522: EMPTY
22523: LIST
22524: LIST
22525: PUSH
22526: LD_INT 1
22528: PUSH
22529: LD_INT 1
22531: PUSH
22532: EMPTY
22533: LIST
22534: LIST
22535: PUSH
22536: LD_INT 0
22538: PUSH
22539: LD_INT 1
22541: PUSH
22542: EMPTY
22543: LIST
22544: LIST
22545: PUSH
22546: LD_INT 1
22548: NEG
22549: PUSH
22550: LD_INT 0
22552: PUSH
22553: EMPTY
22554: LIST
22555: LIST
22556: PUSH
22557: LD_INT 1
22559: NEG
22560: PUSH
22561: LD_INT 1
22563: NEG
22564: PUSH
22565: EMPTY
22566: LIST
22567: LIST
22568: PUSH
22569: LD_INT 1
22571: NEG
22572: PUSH
22573: LD_INT 2
22575: NEG
22576: PUSH
22577: EMPTY
22578: LIST
22579: LIST
22580: PUSH
22581: LD_INT 0
22583: PUSH
22584: LD_INT 2
22586: NEG
22587: PUSH
22588: EMPTY
22589: LIST
22590: LIST
22591: PUSH
22592: LD_INT 1
22594: PUSH
22595: LD_INT 1
22597: NEG
22598: PUSH
22599: EMPTY
22600: LIST
22601: LIST
22602: PUSH
22603: LD_INT 1
22605: PUSH
22606: LD_INT 2
22608: PUSH
22609: EMPTY
22610: LIST
22611: LIST
22612: PUSH
22613: LD_INT 0
22615: PUSH
22616: LD_INT 2
22618: PUSH
22619: EMPTY
22620: LIST
22621: LIST
22622: PUSH
22623: LD_INT 1
22625: NEG
22626: PUSH
22627: LD_INT 1
22629: PUSH
22630: EMPTY
22631: LIST
22632: LIST
22633: PUSH
22634: LD_INT 1
22636: NEG
22637: PUSH
22638: LD_INT 3
22640: NEG
22641: PUSH
22642: EMPTY
22643: LIST
22644: LIST
22645: PUSH
22646: LD_INT 0
22648: PUSH
22649: LD_INT 3
22651: NEG
22652: PUSH
22653: EMPTY
22654: LIST
22655: LIST
22656: PUSH
22657: LD_INT 1
22659: PUSH
22660: LD_INT 2
22662: NEG
22663: PUSH
22664: EMPTY
22665: LIST
22666: LIST
22667: PUSH
22668: EMPTY
22669: LIST
22670: LIST
22671: LIST
22672: LIST
22673: LIST
22674: LIST
22675: LIST
22676: LIST
22677: LIST
22678: LIST
22679: LIST
22680: LIST
22681: LIST
22682: LIST
22683: LIST
22684: LIST
22685: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
22686: LD_ADDR_VAR 0 15
22690: PUSH
22691: LD_INT 0
22693: PUSH
22694: LD_INT 0
22696: PUSH
22697: EMPTY
22698: LIST
22699: LIST
22700: PUSH
22701: LD_INT 0
22703: PUSH
22704: LD_INT 1
22706: NEG
22707: PUSH
22708: EMPTY
22709: LIST
22710: LIST
22711: PUSH
22712: LD_INT 1
22714: PUSH
22715: LD_INT 0
22717: PUSH
22718: EMPTY
22719: LIST
22720: LIST
22721: PUSH
22722: LD_INT 1
22724: PUSH
22725: LD_INT 1
22727: PUSH
22728: EMPTY
22729: LIST
22730: LIST
22731: PUSH
22732: LD_INT 0
22734: PUSH
22735: LD_INT 1
22737: PUSH
22738: EMPTY
22739: LIST
22740: LIST
22741: PUSH
22742: LD_INT 1
22744: NEG
22745: PUSH
22746: LD_INT 0
22748: PUSH
22749: EMPTY
22750: LIST
22751: LIST
22752: PUSH
22753: LD_INT 1
22755: NEG
22756: PUSH
22757: LD_INT 1
22759: NEG
22760: PUSH
22761: EMPTY
22762: LIST
22763: LIST
22764: PUSH
22765: LD_INT 1
22767: PUSH
22768: LD_INT 1
22770: NEG
22771: PUSH
22772: EMPTY
22773: LIST
22774: LIST
22775: PUSH
22776: LD_INT 2
22778: PUSH
22779: LD_INT 0
22781: PUSH
22782: EMPTY
22783: LIST
22784: LIST
22785: PUSH
22786: LD_INT 2
22788: PUSH
22789: LD_INT 1
22791: PUSH
22792: EMPTY
22793: LIST
22794: LIST
22795: PUSH
22796: LD_INT 1
22798: NEG
22799: PUSH
22800: LD_INT 1
22802: PUSH
22803: EMPTY
22804: LIST
22805: LIST
22806: PUSH
22807: LD_INT 2
22809: NEG
22810: PUSH
22811: LD_INT 0
22813: PUSH
22814: EMPTY
22815: LIST
22816: LIST
22817: PUSH
22818: LD_INT 2
22820: NEG
22821: PUSH
22822: LD_INT 1
22824: NEG
22825: PUSH
22826: EMPTY
22827: LIST
22828: LIST
22829: PUSH
22830: LD_INT 2
22832: PUSH
22833: LD_INT 1
22835: NEG
22836: PUSH
22837: EMPTY
22838: LIST
22839: LIST
22840: PUSH
22841: LD_INT 3
22843: PUSH
22844: LD_INT 0
22846: PUSH
22847: EMPTY
22848: LIST
22849: LIST
22850: PUSH
22851: LD_INT 3
22853: PUSH
22854: LD_INT 1
22856: PUSH
22857: EMPTY
22858: LIST
22859: LIST
22860: PUSH
22861: EMPTY
22862: LIST
22863: LIST
22864: LIST
22865: LIST
22866: LIST
22867: LIST
22868: LIST
22869: LIST
22870: LIST
22871: LIST
22872: LIST
22873: LIST
22874: LIST
22875: LIST
22876: LIST
22877: LIST
22878: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
22879: LD_ADDR_VAR 0 16
22883: PUSH
22884: LD_INT 0
22886: PUSH
22887: LD_INT 0
22889: PUSH
22890: EMPTY
22891: LIST
22892: LIST
22893: PUSH
22894: LD_INT 0
22896: PUSH
22897: LD_INT 1
22899: NEG
22900: PUSH
22901: EMPTY
22902: LIST
22903: LIST
22904: PUSH
22905: LD_INT 1
22907: PUSH
22908: LD_INT 0
22910: PUSH
22911: EMPTY
22912: LIST
22913: LIST
22914: PUSH
22915: LD_INT 1
22917: PUSH
22918: LD_INT 1
22920: PUSH
22921: EMPTY
22922: LIST
22923: LIST
22924: PUSH
22925: LD_INT 0
22927: PUSH
22928: LD_INT 1
22930: PUSH
22931: EMPTY
22932: LIST
22933: LIST
22934: PUSH
22935: LD_INT 1
22937: NEG
22938: PUSH
22939: LD_INT 0
22941: PUSH
22942: EMPTY
22943: LIST
22944: LIST
22945: PUSH
22946: LD_INT 1
22948: NEG
22949: PUSH
22950: LD_INT 1
22952: NEG
22953: PUSH
22954: EMPTY
22955: LIST
22956: LIST
22957: PUSH
22958: LD_INT 1
22960: NEG
22961: PUSH
22962: LD_INT 2
22964: NEG
22965: PUSH
22966: EMPTY
22967: LIST
22968: LIST
22969: PUSH
22970: LD_INT 2
22972: PUSH
22973: LD_INT 1
22975: PUSH
22976: EMPTY
22977: LIST
22978: LIST
22979: PUSH
22980: LD_INT 2
22982: PUSH
22983: LD_INT 2
22985: PUSH
22986: EMPTY
22987: LIST
22988: LIST
22989: PUSH
22990: LD_INT 1
22992: PUSH
22993: LD_INT 2
22995: PUSH
22996: EMPTY
22997: LIST
22998: LIST
22999: PUSH
23000: LD_INT 2
23002: NEG
23003: PUSH
23004: LD_INT 1
23006: NEG
23007: PUSH
23008: EMPTY
23009: LIST
23010: LIST
23011: PUSH
23012: LD_INT 2
23014: NEG
23015: PUSH
23016: LD_INT 2
23018: NEG
23019: PUSH
23020: EMPTY
23021: LIST
23022: LIST
23023: PUSH
23024: LD_INT 3
23026: PUSH
23027: LD_INT 2
23029: PUSH
23030: EMPTY
23031: LIST
23032: LIST
23033: PUSH
23034: LD_INT 3
23036: PUSH
23037: LD_INT 3
23039: PUSH
23040: EMPTY
23041: LIST
23042: LIST
23043: PUSH
23044: LD_INT 2
23046: PUSH
23047: LD_INT 3
23049: PUSH
23050: EMPTY
23051: LIST
23052: LIST
23053: PUSH
23054: EMPTY
23055: LIST
23056: LIST
23057: LIST
23058: LIST
23059: LIST
23060: LIST
23061: LIST
23062: LIST
23063: LIST
23064: LIST
23065: LIST
23066: LIST
23067: LIST
23068: LIST
23069: LIST
23070: LIST
23071: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
23072: LD_ADDR_VAR 0 17
23076: PUSH
23077: LD_INT 0
23079: PUSH
23080: LD_INT 0
23082: PUSH
23083: EMPTY
23084: LIST
23085: LIST
23086: PUSH
23087: LD_INT 0
23089: PUSH
23090: LD_INT 1
23092: NEG
23093: PUSH
23094: EMPTY
23095: LIST
23096: LIST
23097: PUSH
23098: LD_INT 1
23100: PUSH
23101: LD_INT 0
23103: PUSH
23104: EMPTY
23105: LIST
23106: LIST
23107: PUSH
23108: LD_INT 1
23110: PUSH
23111: LD_INT 1
23113: PUSH
23114: EMPTY
23115: LIST
23116: LIST
23117: PUSH
23118: LD_INT 0
23120: PUSH
23121: LD_INT 1
23123: PUSH
23124: EMPTY
23125: LIST
23126: LIST
23127: PUSH
23128: LD_INT 1
23130: NEG
23131: PUSH
23132: LD_INT 0
23134: PUSH
23135: EMPTY
23136: LIST
23137: LIST
23138: PUSH
23139: LD_INT 1
23141: NEG
23142: PUSH
23143: LD_INT 1
23145: NEG
23146: PUSH
23147: EMPTY
23148: LIST
23149: LIST
23150: PUSH
23151: LD_INT 1
23153: NEG
23154: PUSH
23155: LD_INT 2
23157: NEG
23158: PUSH
23159: EMPTY
23160: LIST
23161: LIST
23162: PUSH
23163: LD_INT 0
23165: PUSH
23166: LD_INT 2
23168: NEG
23169: PUSH
23170: EMPTY
23171: LIST
23172: LIST
23173: PUSH
23174: LD_INT 1
23176: PUSH
23177: LD_INT 1
23179: NEG
23180: PUSH
23181: EMPTY
23182: LIST
23183: LIST
23184: PUSH
23185: LD_INT 2
23187: PUSH
23188: LD_INT 0
23190: PUSH
23191: EMPTY
23192: LIST
23193: LIST
23194: PUSH
23195: LD_INT 2
23197: PUSH
23198: LD_INT 1
23200: PUSH
23201: EMPTY
23202: LIST
23203: LIST
23204: PUSH
23205: LD_INT 2
23207: PUSH
23208: LD_INT 2
23210: PUSH
23211: EMPTY
23212: LIST
23213: LIST
23214: PUSH
23215: LD_INT 1
23217: PUSH
23218: LD_INT 2
23220: PUSH
23221: EMPTY
23222: LIST
23223: LIST
23224: PUSH
23225: LD_INT 0
23227: PUSH
23228: LD_INT 2
23230: PUSH
23231: EMPTY
23232: LIST
23233: LIST
23234: PUSH
23235: LD_INT 1
23237: NEG
23238: PUSH
23239: LD_INT 1
23241: PUSH
23242: EMPTY
23243: LIST
23244: LIST
23245: PUSH
23246: LD_INT 2
23248: NEG
23249: PUSH
23250: LD_INT 0
23252: PUSH
23253: EMPTY
23254: LIST
23255: LIST
23256: PUSH
23257: LD_INT 2
23259: NEG
23260: PUSH
23261: LD_INT 1
23263: NEG
23264: PUSH
23265: EMPTY
23266: LIST
23267: LIST
23268: PUSH
23269: LD_INT 2
23271: NEG
23272: PUSH
23273: LD_INT 2
23275: NEG
23276: PUSH
23277: EMPTY
23278: LIST
23279: LIST
23280: PUSH
23281: EMPTY
23282: LIST
23283: LIST
23284: LIST
23285: LIST
23286: LIST
23287: LIST
23288: LIST
23289: LIST
23290: LIST
23291: LIST
23292: LIST
23293: LIST
23294: LIST
23295: LIST
23296: LIST
23297: LIST
23298: LIST
23299: LIST
23300: LIST
23301: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
23302: LD_ADDR_VAR 0 18
23306: PUSH
23307: LD_INT 0
23309: PUSH
23310: LD_INT 0
23312: PUSH
23313: EMPTY
23314: LIST
23315: LIST
23316: PUSH
23317: LD_INT 0
23319: PUSH
23320: LD_INT 1
23322: NEG
23323: PUSH
23324: EMPTY
23325: LIST
23326: LIST
23327: PUSH
23328: LD_INT 1
23330: PUSH
23331: LD_INT 0
23333: PUSH
23334: EMPTY
23335: LIST
23336: LIST
23337: PUSH
23338: LD_INT 1
23340: PUSH
23341: LD_INT 1
23343: PUSH
23344: EMPTY
23345: LIST
23346: LIST
23347: PUSH
23348: LD_INT 0
23350: PUSH
23351: LD_INT 1
23353: PUSH
23354: EMPTY
23355: LIST
23356: LIST
23357: PUSH
23358: LD_INT 1
23360: NEG
23361: PUSH
23362: LD_INT 0
23364: PUSH
23365: EMPTY
23366: LIST
23367: LIST
23368: PUSH
23369: LD_INT 1
23371: NEG
23372: PUSH
23373: LD_INT 1
23375: NEG
23376: PUSH
23377: EMPTY
23378: LIST
23379: LIST
23380: PUSH
23381: LD_INT 1
23383: NEG
23384: PUSH
23385: LD_INT 2
23387: NEG
23388: PUSH
23389: EMPTY
23390: LIST
23391: LIST
23392: PUSH
23393: LD_INT 0
23395: PUSH
23396: LD_INT 2
23398: NEG
23399: PUSH
23400: EMPTY
23401: LIST
23402: LIST
23403: PUSH
23404: LD_INT 1
23406: PUSH
23407: LD_INT 1
23409: NEG
23410: PUSH
23411: EMPTY
23412: LIST
23413: LIST
23414: PUSH
23415: LD_INT 2
23417: PUSH
23418: LD_INT 0
23420: PUSH
23421: EMPTY
23422: LIST
23423: LIST
23424: PUSH
23425: LD_INT 2
23427: PUSH
23428: LD_INT 1
23430: PUSH
23431: EMPTY
23432: LIST
23433: LIST
23434: PUSH
23435: LD_INT 2
23437: PUSH
23438: LD_INT 2
23440: PUSH
23441: EMPTY
23442: LIST
23443: LIST
23444: PUSH
23445: LD_INT 1
23447: PUSH
23448: LD_INT 2
23450: PUSH
23451: EMPTY
23452: LIST
23453: LIST
23454: PUSH
23455: LD_INT 0
23457: PUSH
23458: LD_INT 2
23460: PUSH
23461: EMPTY
23462: LIST
23463: LIST
23464: PUSH
23465: LD_INT 1
23467: NEG
23468: PUSH
23469: LD_INT 1
23471: PUSH
23472: EMPTY
23473: LIST
23474: LIST
23475: PUSH
23476: LD_INT 2
23478: NEG
23479: PUSH
23480: LD_INT 0
23482: PUSH
23483: EMPTY
23484: LIST
23485: LIST
23486: PUSH
23487: LD_INT 2
23489: NEG
23490: PUSH
23491: LD_INT 1
23493: NEG
23494: PUSH
23495: EMPTY
23496: LIST
23497: LIST
23498: PUSH
23499: LD_INT 2
23501: NEG
23502: PUSH
23503: LD_INT 2
23505: NEG
23506: PUSH
23507: EMPTY
23508: LIST
23509: LIST
23510: PUSH
23511: EMPTY
23512: LIST
23513: LIST
23514: LIST
23515: LIST
23516: LIST
23517: LIST
23518: LIST
23519: LIST
23520: LIST
23521: LIST
23522: LIST
23523: LIST
23524: LIST
23525: LIST
23526: LIST
23527: LIST
23528: LIST
23529: LIST
23530: LIST
23531: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
23532: LD_ADDR_VAR 0 19
23536: PUSH
23537: LD_INT 0
23539: PUSH
23540: LD_INT 0
23542: PUSH
23543: EMPTY
23544: LIST
23545: LIST
23546: PUSH
23547: LD_INT 0
23549: PUSH
23550: LD_INT 1
23552: NEG
23553: PUSH
23554: EMPTY
23555: LIST
23556: LIST
23557: PUSH
23558: LD_INT 1
23560: PUSH
23561: LD_INT 0
23563: PUSH
23564: EMPTY
23565: LIST
23566: LIST
23567: PUSH
23568: LD_INT 1
23570: PUSH
23571: LD_INT 1
23573: PUSH
23574: EMPTY
23575: LIST
23576: LIST
23577: PUSH
23578: LD_INT 0
23580: PUSH
23581: LD_INT 1
23583: PUSH
23584: EMPTY
23585: LIST
23586: LIST
23587: PUSH
23588: LD_INT 1
23590: NEG
23591: PUSH
23592: LD_INT 0
23594: PUSH
23595: EMPTY
23596: LIST
23597: LIST
23598: PUSH
23599: LD_INT 1
23601: NEG
23602: PUSH
23603: LD_INT 1
23605: NEG
23606: PUSH
23607: EMPTY
23608: LIST
23609: LIST
23610: PUSH
23611: LD_INT 1
23613: NEG
23614: PUSH
23615: LD_INT 2
23617: NEG
23618: PUSH
23619: EMPTY
23620: LIST
23621: LIST
23622: PUSH
23623: LD_INT 0
23625: PUSH
23626: LD_INT 2
23628: NEG
23629: PUSH
23630: EMPTY
23631: LIST
23632: LIST
23633: PUSH
23634: LD_INT 1
23636: PUSH
23637: LD_INT 1
23639: NEG
23640: PUSH
23641: EMPTY
23642: LIST
23643: LIST
23644: PUSH
23645: LD_INT 2
23647: PUSH
23648: LD_INT 0
23650: PUSH
23651: EMPTY
23652: LIST
23653: LIST
23654: PUSH
23655: LD_INT 2
23657: PUSH
23658: LD_INT 1
23660: PUSH
23661: EMPTY
23662: LIST
23663: LIST
23664: PUSH
23665: LD_INT 2
23667: PUSH
23668: LD_INT 2
23670: PUSH
23671: EMPTY
23672: LIST
23673: LIST
23674: PUSH
23675: LD_INT 1
23677: PUSH
23678: LD_INT 2
23680: PUSH
23681: EMPTY
23682: LIST
23683: LIST
23684: PUSH
23685: LD_INT 0
23687: PUSH
23688: LD_INT 2
23690: PUSH
23691: EMPTY
23692: LIST
23693: LIST
23694: PUSH
23695: LD_INT 1
23697: NEG
23698: PUSH
23699: LD_INT 1
23701: PUSH
23702: EMPTY
23703: LIST
23704: LIST
23705: PUSH
23706: LD_INT 2
23708: NEG
23709: PUSH
23710: LD_INT 0
23712: PUSH
23713: EMPTY
23714: LIST
23715: LIST
23716: PUSH
23717: LD_INT 2
23719: NEG
23720: PUSH
23721: LD_INT 1
23723: NEG
23724: PUSH
23725: EMPTY
23726: LIST
23727: LIST
23728: PUSH
23729: LD_INT 2
23731: NEG
23732: PUSH
23733: LD_INT 2
23735: NEG
23736: PUSH
23737: EMPTY
23738: LIST
23739: LIST
23740: PUSH
23741: EMPTY
23742: LIST
23743: LIST
23744: LIST
23745: LIST
23746: LIST
23747: LIST
23748: LIST
23749: LIST
23750: LIST
23751: LIST
23752: LIST
23753: LIST
23754: LIST
23755: LIST
23756: LIST
23757: LIST
23758: LIST
23759: LIST
23760: LIST
23761: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
23762: LD_ADDR_VAR 0 20
23766: PUSH
23767: LD_INT 0
23769: PUSH
23770: LD_INT 0
23772: PUSH
23773: EMPTY
23774: LIST
23775: LIST
23776: PUSH
23777: LD_INT 0
23779: PUSH
23780: LD_INT 1
23782: NEG
23783: PUSH
23784: EMPTY
23785: LIST
23786: LIST
23787: PUSH
23788: LD_INT 1
23790: PUSH
23791: LD_INT 0
23793: PUSH
23794: EMPTY
23795: LIST
23796: LIST
23797: PUSH
23798: LD_INT 1
23800: PUSH
23801: LD_INT 1
23803: PUSH
23804: EMPTY
23805: LIST
23806: LIST
23807: PUSH
23808: LD_INT 0
23810: PUSH
23811: LD_INT 1
23813: PUSH
23814: EMPTY
23815: LIST
23816: LIST
23817: PUSH
23818: LD_INT 1
23820: NEG
23821: PUSH
23822: LD_INT 0
23824: PUSH
23825: EMPTY
23826: LIST
23827: LIST
23828: PUSH
23829: LD_INT 1
23831: NEG
23832: PUSH
23833: LD_INT 1
23835: NEG
23836: PUSH
23837: EMPTY
23838: LIST
23839: LIST
23840: PUSH
23841: LD_INT 1
23843: NEG
23844: PUSH
23845: LD_INT 2
23847: NEG
23848: PUSH
23849: EMPTY
23850: LIST
23851: LIST
23852: PUSH
23853: LD_INT 0
23855: PUSH
23856: LD_INT 2
23858: NEG
23859: PUSH
23860: EMPTY
23861: LIST
23862: LIST
23863: PUSH
23864: LD_INT 1
23866: PUSH
23867: LD_INT 1
23869: NEG
23870: PUSH
23871: EMPTY
23872: LIST
23873: LIST
23874: PUSH
23875: LD_INT 2
23877: PUSH
23878: LD_INT 0
23880: PUSH
23881: EMPTY
23882: LIST
23883: LIST
23884: PUSH
23885: LD_INT 2
23887: PUSH
23888: LD_INT 1
23890: PUSH
23891: EMPTY
23892: LIST
23893: LIST
23894: PUSH
23895: LD_INT 2
23897: PUSH
23898: LD_INT 2
23900: PUSH
23901: EMPTY
23902: LIST
23903: LIST
23904: PUSH
23905: LD_INT 1
23907: PUSH
23908: LD_INT 2
23910: PUSH
23911: EMPTY
23912: LIST
23913: LIST
23914: PUSH
23915: LD_INT 0
23917: PUSH
23918: LD_INT 2
23920: PUSH
23921: EMPTY
23922: LIST
23923: LIST
23924: PUSH
23925: LD_INT 1
23927: NEG
23928: PUSH
23929: LD_INT 1
23931: PUSH
23932: EMPTY
23933: LIST
23934: LIST
23935: PUSH
23936: LD_INT 2
23938: NEG
23939: PUSH
23940: LD_INT 0
23942: PUSH
23943: EMPTY
23944: LIST
23945: LIST
23946: PUSH
23947: LD_INT 2
23949: NEG
23950: PUSH
23951: LD_INT 1
23953: NEG
23954: PUSH
23955: EMPTY
23956: LIST
23957: LIST
23958: PUSH
23959: LD_INT 2
23961: NEG
23962: PUSH
23963: LD_INT 2
23965: NEG
23966: PUSH
23967: EMPTY
23968: LIST
23969: LIST
23970: PUSH
23971: EMPTY
23972: LIST
23973: LIST
23974: LIST
23975: LIST
23976: LIST
23977: LIST
23978: LIST
23979: LIST
23980: LIST
23981: LIST
23982: LIST
23983: LIST
23984: LIST
23985: LIST
23986: LIST
23987: LIST
23988: LIST
23989: LIST
23990: LIST
23991: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
23992: LD_ADDR_VAR 0 21
23996: PUSH
23997: LD_INT 0
23999: PUSH
24000: LD_INT 0
24002: PUSH
24003: EMPTY
24004: LIST
24005: LIST
24006: PUSH
24007: LD_INT 0
24009: PUSH
24010: LD_INT 1
24012: NEG
24013: PUSH
24014: EMPTY
24015: LIST
24016: LIST
24017: PUSH
24018: LD_INT 1
24020: PUSH
24021: LD_INT 0
24023: PUSH
24024: EMPTY
24025: LIST
24026: LIST
24027: PUSH
24028: LD_INT 1
24030: PUSH
24031: LD_INT 1
24033: PUSH
24034: EMPTY
24035: LIST
24036: LIST
24037: PUSH
24038: LD_INT 0
24040: PUSH
24041: LD_INT 1
24043: PUSH
24044: EMPTY
24045: LIST
24046: LIST
24047: PUSH
24048: LD_INT 1
24050: NEG
24051: PUSH
24052: LD_INT 0
24054: PUSH
24055: EMPTY
24056: LIST
24057: LIST
24058: PUSH
24059: LD_INT 1
24061: NEG
24062: PUSH
24063: LD_INT 1
24065: NEG
24066: PUSH
24067: EMPTY
24068: LIST
24069: LIST
24070: PUSH
24071: LD_INT 1
24073: NEG
24074: PUSH
24075: LD_INT 2
24077: NEG
24078: PUSH
24079: EMPTY
24080: LIST
24081: LIST
24082: PUSH
24083: LD_INT 0
24085: PUSH
24086: LD_INT 2
24088: NEG
24089: PUSH
24090: EMPTY
24091: LIST
24092: LIST
24093: PUSH
24094: LD_INT 1
24096: PUSH
24097: LD_INT 1
24099: NEG
24100: PUSH
24101: EMPTY
24102: LIST
24103: LIST
24104: PUSH
24105: LD_INT 2
24107: PUSH
24108: LD_INT 0
24110: PUSH
24111: EMPTY
24112: LIST
24113: LIST
24114: PUSH
24115: LD_INT 2
24117: PUSH
24118: LD_INT 1
24120: PUSH
24121: EMPTY
24122: LIST
24123: LIST
24124: PUSH
24125: LD_INT 2
24127: PUSH
24128: LD_INT 2
24130: PUSH
24131: EMPTY
24132: LIST
24133: LIST
24134: PUSH
24135: LD_INT 1
24137: PUSH
24138: LD_INT 2
24140: PUSH
24141: EMPTY
24142: LIST
24143: LIST
24144: PUSH
24145: LD_INT 0
24147: PUSH
24148: LD_INT 2
24150: PUSH
24151: EMPTY
24152: LIST
24153: LIST
24154: PUSH
24155: LD_INT 1
24157: NEG
24158: PUSH
24159: LD_INT 1
24161: PUSH
24162: EMPTY
24163: LIST
24164: LIST
24165: PUSH
24166: LD_INT 2
24168: NEG
24169: PUSH
24170: LD_INT 0
24172: PUSH
24173: EMPTY
24174: LIST
24175: LIST
24176: PUSH
24177: LD_INT 2
24179: NEG
24180: PUSH
24181: LD_INT 1
24183: NEG
24184: PUSH
24185: EMPTY
24186: LIST
24187: LIST
24188: PUSH
24189: LD_INT 2
24191: NEG
24192: PUSH
24193: LD_INT 2
24195: NEG
24196: PUSH
24197: EMPTY
24198: LIST
24199: LIST
24200: PUSH
24201: EMPTY
24202: LIST
24203: LIST
24204: LIST
24205: LIST
24206: LIST
24207: LIST
24208: LIST
24209: LIST
24210: LIST
24211: LIST
24212: LIST
24213: LIST
24214: LIST
24215: LIST
24216: LIST
24217: LIST
24218: LIST
24219: LIST
24220: LIST
24221: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24222: LD_ADDR_VAR 0 22
24226: PUSH
24227: LD_INT 0
24229: PUSH
24230: LD_INT 0
24232: PUSH
24233: EMPTY
24234: LIST
24235: LIST
24236: PUSH
24237: LD_INT 0
24239: PUSH
24240: LD_INT 1
24242: NEG
24243: PUSH
24244: EMPTY
24245: LIST
24246: LIST
24247: PUSH
24248: LD_INT 1
24250: PUSH
24251: LD_INT 0
24253: PUSH
24254: EMPTY
24255: LIST
24256: LIST
24257: PUSH
24258: LD_INT 1
24260: PUSH
24261: LD_INT 1
24263: PUSH
24264: EMPTY
24265: LIST
24266: LIST
24267: PUSH
24268: LD_INT 0
24270: PUSH
24271: LD_INT 1
24273: PUSH
24274: EMPTY
24275: LIST
24276: LIST
24277: PUSH
24278: LD_INT 1
24280: NEG
24281: PUSH
24282: LD_INT 0
24284: PUSH
24285: EMPTY
24286: LIST
24287: LIST
24288: PUSH
24289: LD_INT 1
24291: NEG
24292: PUSH
24293: LD_INT 1
24295: NEG
24296: PUSH
24297: EMPTY
24298: LIST
24299: LIST
24300: PUSH
24301: LD_INT 1
24303: NEG
24304: PUSH
24305: LD_INT 2
24307: NEG
24308: PUSH
24309: EMPTY
24310: LIST
24311: LIST
24312: PUSH
24313: LD_INT 0
24315: PUSH
24316: LD_INT 2
24318: NEG
24319: PUSH
24320: EMPTY
24321: LIST
24322: LIST
24323: PUSH
24324: LD_INT 1
24326: PUSH
24327: LD_INT 1
24329: NEG
24330: PUSH
24331: EMPTY
24332: LIST
24333: LIST
24334: PUSH
24335: LD_INT 2
24337: PUSH
24338: LD_INT 0
24340: PUSH
24341: EMPTY
24342: LIST
24343: LIST
24344: PUSH
24345: LD_INT 2
24347: PUSH
24348: LD_INT 1
24350: PUSH
24351: EMPTY
24352: LIST
24353: LIST
24354: PUSH
24355: LD_INT 2
24357: PUSH
24358: LD_INT 2
24360: PUSH
24361: EMPTY
24362: LIST
24363: LIST
24364: PUSH
24365: LD_INT 1
24367: PUSH
24368: LD_INT 2
24370: PUSH
24371: EMPTY
24372: LIST
24373: LIST
24374: PUSH
24375: LD_INT 0
24377: PUSH
24378: LD_INT 2
24380: PUSH
24381: EMPTY
24382: LIST
24383: LIST
24384: PUSH
24385: LD_INT 1
24387: NEG
24388: PUSH
24389: LD_INT 1
24391: PUSH
24392: EMPTY
24393: LIST
24394: LIST
24395: PUSH
24396: LD_INT 2
24398: NEG
24399: PUSH
24400: LD_INT 0
24402: PUSH
24403: EMPTY
24404: LIST
24405: LIST
24406: PUSH
24407: LD_INT 2
24409: NEG
24410: PUSH
24411: LD_INT 1
24413: NEG
24414: PUSH
24415: EMPTY
24416: LIST
24417: LIST
24418: PUSH
24419: LD_INT 2
24421: NEG
24422: PUSH
24423: LD_INT 2
24425: NEG
24426: PUSH
24427: EMPTY
24428: LIST
24429: LIST
24430: PUSH
24431: EMPTY
24432: LIST
24433: LIST
24434: LIST
24435: LIST
24436: LIST
24437: LIST
24438: LIST
24439: LIST
24440: LIST
24441: LIST
24442: LIST
24443: LIST
24444: LIST
24445: LIST
24446: LIST
24447: LIST
24448: LIST
24449: LIST
24450: LIST
24451: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
24452: LD_ADDR_VAR 0 23
24456: PUSH
24457: LD_INT 0
24459: PUSH
24460: LD_INT 0
24462: PUSH
24463: EMPTY
24464: LIST
24465: LIST
24466: PUSH
24467: LD_INT 0
24469: PUSH
24470: LD_INT 1
24472: NEG
24473: PUSH
24474: EMPTY
24475: LIST
24476: LIST
24477: PUSH
24478: LD_INT 1
24480: PUSH
24481: LD_INT 0
24483: PUSH
24484: EMPTY
24485: LIST
24486: LIST
24487: PUSH
24488: LD_INT 1
24490: PUSH
24491: LD_INT 1
24493: PUSH
24494: EMPTY
24495: LIST
24496: LIST
24497: PUSH
24498: LD_INT 0
24500: PUSH
24501: LD_INT 1
24503: PUSH
24504: EMPTY
24505: LIST
24506: LIST
24507: PUSH
24508: LD_INT 1
24510: NEG
24511: PUSH
24512: LD_INT 0
24514: PUSH
24515: EMPTY
24516: LIST
24517: LIST
24518: PUSH
24519: LD_INT 1
24521: NEG
24522: PUSH
24523: LD_INT 1
24525: NEG
24526: PUSH
24527: EMPTY
24528: LIST
24529: LIST
24530: PUSH
24531: LD_INT 1
24533: NEG
24534: PUSH
24535: LD_INT 2
24537: NEG
24538: PUSH
24539: EMPTY
24540: LIST
24541: LIST
24542: PUSH
24543: LD_INT 0
24545: PUSH
24546: LD_INT 2
24548: NEG
24549: PUSH
24550: EMPTY
24551: LIST
24552: LIST
24553: PUSH
24554: LD_INT 1
24556: PUSH
24557: LD_INT 1
24559: NEG
24560: PUSH
24561: EMPTY
24562: LIST
24563: LIST
24564: PUSH
24565: LD_INT 2
24567: PUSH
24568: LD_INT 0
24570: PUSH
24571: EMPTY
24572: LIST
24573: LIST
24574: PUSH
24575: LD_INT 2
24577: PUSH
24578: LD_INT 1
24580: PUSH
24581: EMPTY
24582: LIST
24583: LIST
24584: PUSH
24585: LD_INT 2
24587: PUSH
24588: LD_INT 2
24590: PUSH
24591: EMPTY
24592: LIST
24593: LIST
24594: PUSH
24595: LD_INT 1
24597: PUSH
24598: LD_INT 2
24600: PUSH
24601: EMPTY
24602: LIST
24603: LIST
24604: PUSH
24605: LD_INT 0
24607: PUSH
24608: LD_INT 2
24610: PUSH
24611: EMPTY
24612: LIST
24613: LIST
24614: PUSH
24615: LD_INT 1
24617: NEG
24618: PUSH
24619: LD_INT 1
24621: PUSH
24622: EMPTY
24623: LIST
24624: LIST
24625: PUSH
24626: LD_INT 2
24628: NEG
24629: PUSH
24630: LD_INT 0
24632: PUSH
24633: EMPTY
24634: LIST
24635: LIST
24636: PUSH
24637: LD_INT 2
24639: NEG
24640: PUSH
24641: LD_INT 1
24643: NEG
24644: PUSH
24645: EMPTY
24646: LIST
24647: LIST
24648: PUSH
24649: LD_INT 2
24651: NEG
24652: PUSH
24653: LD_INT 2
24655: NEG
24656: PUSH
24657: EMPTY
24658: LIST
24659: LIST
24660: PUSH
24661: LD_INT 2
24663: NEG
24664: PUSH
24665: LD_INT 3
24667: NEG
24668: PUSH
24669: EMPTY
24670: LIST
24671: LIST
24672: PUSH
24673: LD_INT 1
24675: NEG
24676: PUSH
24677: LD_INT 3
24679: NEG
24680: PUSH
24681: EMPTY
24682: LIST
24683: LIST
24684: PUSH
24685: LD_INT 1
24687: PUSH
24688: LD_INT 2
24690: NEG
24691: PUSH
24692: EMPTY
24693: LIST
24694: LIST
24695: PUSH
24696: LD_INT 2
24698: PUSH
24699: LD_INT 1
24701: NEG
24702: PUSH
24703: EMPTY
24704: LIST
24705: LIST
24706: PUSH
24707: EMPTY
24708: LIST
24709: LIST
24710: LIST
24711: LIST
24712: LIST
24713: LIST
24714: LIST
24715: LIST
24716: LIST
24717: LIST
24718: LIST
24719: LIST
24720: LIST
24721: LIST
24722: LIST
24723: LIST
24724: LIST
24725: LIST
24726: LIST
24727: LIST
24728: LIST
24729: LIST
24730: LIST
24731: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
24732: LD_ADDR_VAR 0 24
24736: PUSH
24737: LD_INT 0
24739: PUSH
24740: LD_INT 0
24742: PUSH
24743: EMPTY
24744: LIST
24745: LIST
24746: PUSH
24747: LD_INT 0
24749: PUSH
24750: LD_INT 1
24752: NEG
24753: PUSH
24754: EMPTY
24755: LIST
24756: LIST
24757: PUSH
24758: LD_INT 1
24760: PUSH
24761: LD_INT 0
24763: PUSH
24764: EMPTY
24765: LIST
24766: LIST
24767: PUSH
24768: LD_INT 1
24770: PUSH
24771: LD_INT 1
24773: PUSH
24774: EMPTY
24775: LIST
24776: LIST
24777: PUSH
24778: LD_INT 0
24780: PUSH
24781: LD_INT 1
24783: PUSH
24784: EMPTY
24785: LIST
24786: LIST
24787: PUSH
24788: LD_INT 1
24790: NEG
24791: PUSH
24792: LD_INT 0
24794: PUSH
24795: EMPTY
24796: LIST
24797: LIST
24798: PUSH
24799: LD_INT 1
24801: NEG
24802: PUSH
24803: LD_INT 1
24805: NEG
24806: PUSH
24807: EMPTY
24808: LIST
24809: LIST
24810: PUSH
24811: LD_INT 1
24813: NEG
24814: PUSH
24815: LD_INT 2
24817: NEG
24818: PUSH
24819: EMPTY
24820: LIST
24821: LIST
24822: PUSH
24823: LD_INT 0
24825: PUSH
24826: LD_INT 2
24828: NEG
24829: PUSH
24830: EMPTY
24831: LIST
24832: LIST
24833: PUSH
24834: LD_INT 1
24836: PUSH
24837: LD_INT 1
24839: NEG
24840: PUSH
24841: EMPTY
24842: LIST
24843: LIST
24844: PUSH
24845: LD_INT 2
24847: PUSH
24848: LD_INT 0
24850: PUSH
24851: EMPTY
24852: LIST
24853: LIST
24854: PUSH
24855: LD_INT 2
24857: PUSH
24858: LD_INT 1
24860: PUSH
24861: EMPTY
24862: LIST
24863: LIST
24864: PUSH
24865: LD_INT 2
24867: PUSH
24868: LD_INT 2
24870: PUSH
24871: EMPTY
24872: LIST
24873: LIST
24874: PUSH
24875: LD_INT 1
24877: PUSH
24878: LD_INT 2
24880: PUSH
24881: EMPTY
24882: LIST
24883: LIST
24884: PUSH
24885: LD_INT 0
24887: PUSH
24888: LD_INT 2
24890: PUSH
24891: EMPTY
24892: LIST
24893: LIST
24894: PUSH
24895: LD_INT 1
24897: NEG
24898: PUSH
24899: LD_INT 1
24901: PUSH
24902: EMPTY
24903: LIST
24904: LIST
24905: PUSH
24906: LD_INT 2
24908: NEG
24909: PUSH
24910: LD_INT 0
24912: PUSH
24913: EMPTY
24914: LIST
24915: LIST
24916: PUSH
24917: LD_INT 2
24919: NEG
24920: PUSH
24921: LD_INT 1
24923: NEG
24924: PUSH
24925: EMPTY
24926: LIST
24927: LIST
24928: PUSH
24929: LD_INT 2
24931: NEG
24932: PUSH
24933: LD_INT 2
24935: NEG
24936: PUSH
24937: EMPTY
24938: LIST
24939: LIST
24940: PUSH
24941: LD_INT 1
24943: PUSH
24944: LD_INT 2
24946: NEG
24947: PUSH
24948: EMPTY
24949: LIST
24950: LIST
24951: PUSH
24952: LD_INT 2
24954: PUSH
24955: LD_INT 1
24957: NEG
24958: PUSH
24959: EMPTY
24960: LIST
24961: LIST
24962: PUSH
24963: LD_INT 3
24965: PUSH
24966: LD_INT 1
24968: PUSH
24969: EMPTY
24970: LIST
24971: LIST
24972: PUSH
24973: LD_INT 3
24975: PUSH
24976: LD_INT 2
24978: PUSH
24979: EMPTY
24980: LIST
24981: LIST
24982: PUSH
24983: EMPTY
24984: LIST
24985: LIST
24986: LIST
24987: LIST
24988: LIST
24989: LIST
24990: LIST
24991: LIST
24992: LIST
24993: LIST
24994: LIST
24995: LIST
24996: LIST
24997: LIST
24998: LIST
24999: LIST
25000: LIST
25001: LIST
25002: LIST
25003: LIST
25004: LIST
25005: LIST
25006: LIST
25007: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
25008: LD_ADDR_VAR 0 25
25012: PUSH
25013: LD_INT 0
25015: PUSH
25016: LD_INT 0
25018: PUSH
25019: EMPTY
25020: LIST
25021: LIST
25022: PUSH
25023: LD_INT 0
25025: PUSH
25026: LD_INT 1
25028: NEG
25029: PUSH
25030: EMPTY
25031: LIST
25032: LIST
25033: PUSH
25034: LD_INT 1
25036: PUSH
25037: LD_INT 0
25039: PUSH
25040: EMPTY
25041: LIST
25042: LIST
25043: PUSH
25044: LD_INT 1
25046: PUSH
25047: LD_INT 1
25049: PUSH
25050: EMPTY
25051: LIST
25052: LIST
25053: PUSH
25054: LD_INT 0
25056: PUSH
25057: LD_INT 1
25059: PUSH
25060: EMPTY
25061: LIST
25062: LIST
25063: PUSH
25064: LD_INT 1
25066: NEG
25067: PUSH
25068: LD_INT 0
25070: PUSH
25071: EMPTY
25072: LIST
25073: LIST
25074: PUSH
25075: LD_INT 1
25077: NEG
25078: PUSH
25079: LD_INT 1
25081: NEG
25082: PUSH
25083: EMPTY
25084: LIST
25085: LIST
25086: PUSH
25087: LD_INT 1
25089: NEG
25090: PUSH
25091: LD_INT 2
25093: NEG
25094: PUSH
25095: EMPTY
25096: LIST
25097: LIST
25098: PUSH
25099: LD_INT 0
25101: PUSH
25102: LD_INT 2
25104: NEG
25105: PUSH
25106: EMPTY
25107: LIST
25108: LIST
25109: PUSH
25110: LD_INT 1
25112: PUSH
25113: LD_INT 1
25115: NEG
25116: PUSH
25117: EMPTY
25118: LIST
25119: LIST
25120: PUSH
25121: LD_INT 2
25123: PUSH
25124: LD_INT 0
25126: PUSH
25127: EMPTY
25128: LIST
25129: LIST
25130: PUSH
25131: LD_INT 2
25133: PUSH
25134: LD_INT 1
25136: PUSH
25137: EMPTY
25138: LIST
25139: LIST
25140: PUSH
25141: LD_INT 2
25143: PUSH
25144: LD_INT 2
25146: PUSH
25147: EMPTY
25148: LIST
25149: LIST
25150: PUSH
25151: LD_INT 1
25153: PUSH
25154: LD_INT 2
25156: PUSH
25157: EMPTY
25158: LIST
25159: LIST
25160: PUSH
25161: LD_INT 0
25163: PUSH
25164: LD_INT 2
25166: PUSH
25167: EMPTY
25168: LIST
25169: LIST
25170: PUSH
25171: LD_INT 1
25173: NEG
25174: PUSH
25175: LD_INT 1
25177: PUSH
25178: EMPTY
25179: LIST
25180: LIST
25181: PUSH
25182: LD_INT 2
25184: NEG
25185: PUSH
25186: LD_INT 0
25188: PUSH
25189: EMPTY
25190: LIST
25191: LIST
25192: PUSH
25193: LD_INT 2
25195: NEG
25196: PUSH
25197: LD_INT 1
25199: NEG
25200: PUSH
25201: EMPTY
25202: LIST
25203: LIST
25204: PUSH
25205: LD_INT 2
25207: NEG
25208: PUSH
25209: LD_INT 2
25211: NEG
25212: PUSH
25213: EMPTY
25214: LIST
25215: LIST
25216: PUSH
25217: LD_INT 3
25219: PUSH
25220: LD_INT 1
25222: PUSH
25223: EMPTY
25224: LIST
25225: LIST
25226: PUSH
25227: LD_INT 3
25229: PUSH
25230: LD_INT 2
25232: PUSH
25233: EMPTY
25234: LIST
25235: LIST
25236: PUSH
25237: LD_INT 2
25239: PUSH
25240: LD_INT 3
25242: PUSH
25243: EMPTY
25244: LIST
25245: LIST
25246: PUSH
25247: LD_INT 1
25249: PUSH
25250: LD_INT 3
25252: PUSH
25253: EMPTY
25254: LIST
25255: LIST
25256: PUSH
25257: EMPTY
25258: LIST
25259: LIST
25260: LIST
25261: LIST
25262: LIST
25263: LIST
25264: LIST
25265: LIST
25266: LIST
25267: LIST
25268: LIST
25269: LIST
25270: LIST
25271: LIST
25272: LIST
25273: LIST
25274: LIST
25275: LIST
25276: LIST
25277: LIST
25278: LIST
25279: LIST
25280: LIST
25281: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
25282: LD_ADDR_VAR 0 26
25286: PUSH
25287: LD_INT 0
25289: PUSH
25290: LD_INT 0
25292: PUSH
25293: EMPTY
25294: LIST
25295: LIST
25296: PUSH
25297: LD_INT 0
25299: PUSH
25300: LD_INT 1
25302: NEG
25303: PUSH
25304: EMPTY
25305: LIST
25306: LIST
25307: PUSH
25308: LD_INT 1
25310: PUSH
25311: LD_INT 0
25313: PUSH
25314: EMPTY
25315: LIST
25316: LIST
25317: PUSH
25318: LD_INT 1
25320: PUSH
25321: LD_INT 1
25323: PUSH
25324: EMPTY
25325: LIST
25326: LIST
25327: PUSH
25328: LD_INT 0
25330: PUSH
25331: LD_INT 1
25333: PUSH
25334: EMPTY
25335: LIST
25336: LIST
25337: PUSH
25338: LD_INT 1
25340: NEG
25341: PUSH
25342: LD_INT 0
25344: PUSH
25345: EMPTY
25346: LIST
25347: LIST
25348: PUSH
25349: LD_INT 1
25351: NEG
25352: PUSH
25353: LD_INT 1
25355: NEG
25356: PUSH
25357: EMPTY
25358: LIST
25359: LIST
25360: PUSH
25361: LD_INT 1
25363: NEG
25364: PUSH
25365: LD_INT 2
25367: NEG
25368: PUSH
25369: EMPTY
25370: LIST
25371: LIST
25372: PUSH
25373: LD_INT 0
25375: PUSH
25376: LD_INT 2
25378: NEG
25379: PUSH
25380: EMPTY
25381: LIST
25382: LIST
25383: PUSH
25384: LD_INT 1
25386: PUSH
25387: LD_INT 1
25389: NEG
25390: PUSH
25391: EMPTY
25392: LIST
25393: LIST
25394: PUSH
25395: LD_INT 2
25397: PUSH
25398: LD_INT 0
25400: PUSH
25401: EMPTY
25402: LIST
25403: LIST
25404: PUSH
25405: LD_INT 2
25407: PUSH
25408: LD_INT 1
25410: PUSH
25411: EMPTY
25412: LIST
25413: LIST
25414: PUSH
25415: LD_INT 2
25417: PUSH
25418: LD_INT 2
25420: PUSH
25421: EMPTY
25422: LIST
25423: LIST
25424: PUSH
25425: LD_INT 1
25427: PUSH
25428: LD_INT 2
25430: PUSH
25431: EMPTY
25432: LIST
25433: LIST
25434: PUSH
25435: LD_INT 0
25437: PUSH
25438: LD_INT 2
25440: PUSH
25441: EMPTY
25442: LIST
25443: LIST
25444: PUSH
25445: LD_INT 1
25447: NEG
25448: PUSH
25449: LD_INT 1
25451: PUSH
25452: EMPTY
25453: LIST
25454: LIST
25455: PUSH
25456: LD_INT 2
25458: NEG
25459: PUSH
25460: LD_INT 0
25462: PUSH
25463: EMPTY
25464: LIST
25465: LIST
25466: PUSH
25467: LD_INT 2
25469: NEG
25470: PUSH
25471: LD_INT 1
25473: NEG
25474: PUSH
25475: EMPTY
25476: LIST
25477: LIST
25478: PUSH
25479: LD_INT 2
25481: NEG
25482: PUSH
25483: LD_INT 2
25485: NEG
25486: PUSH
25487: EMPTY
25488: LIST
25489: LIST
25490: PUSH
25491: LD_INT 2
25493: PUSH
25494: LD_INT 3
25496: PUSH
25497: EMPTY
25498: LIST
25499: LIST
25500: PUSH
25501: LD_INT 1
25503: PUSH
25504: LD_INT 3
25506: PUSH
25507: EMPTY
25508: LIST
25509: LIST
25510: PUSH
25511: LD_INT 1
25513: NEG
25514: PUSH
25515: LD_INT 2
25517: PUSH
25518: EMPTY
25519: LIST
25520: LIST
25521: PUSH
25522: LD_INT 2
25524: NEG
25525: PUSH
25526: LD_INT 1
25528: PUSH
25529: EMPTY
25530: LIST
25531: LIST
25532: PUSH
25533: EMPTY
25534: LIST
25535: LIST
25536: LIST
25537: LIST
25538: LIST
25539: LIST
25540: LIST
25541: LIST
25542: LIST
25543: LIST
25544: LIST
25545: LIST
25546: LIST
25547: LIST
25548: LIST
25549: LIST
25550: LIST
25551: LIST
25552: LIST
25553: LIST
25554: LIST
25555: LIST
25556: LIST
25557: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
25558: LD_ADDR_VAR 0 27
25562: PUSH
25563: LD_INT 0
25565: PUSH
25566: LD_INT 0
25568: PUSH
25569: EMPTY
25570: LIST
25571: LIST
25572: PUSH
25573: LD_INT 0
25575: PUSH
25576: LD_INT 1
25578: NEG
25579: PUSH
25580: EMPTY
25581: LIST
25582: LIST
25583: PUSH
25584: LD_INT 1
25586: PUSH
25587: LD_INT 0
25589: PUSH
25590: EMPTY
25591: LIST
25592: LIST
25593: PUSH
25594: LD_INT 1
25596: PUSH
25597: LD_INT 1
25599: PUSH
25600: EMPTY
25601: LIST
25602: LIST
25603: PUSH
25604: LD_INT 0
25606: PUSH
25607: LD_INT 1
25609: PUSH
25610: EMPTY
25611: LIST
25612: LIST
25613: PUSH
25614: LD_INT 1
25616: NEG
25617: PUSH
25618: LD_INT 0
25620: PUSH
25621: EMPTY
25622: LIST
25623: LIST
25624: PUSH
25625: LD_INT 1
25627: NEG
25628: PUSH
25629: LD_INT 1
25631: NEG
25632: PUSH
25633: EMPTY
25634: LIST
25635: LIST
25636: PUSH
25637: LD_INT 1
25639: NEG
25640: PUSH
25641: LD_INT 2
25643: NEG
25644: PUSH
25645: EMPTY
25646: LIST
25647: LIST
25648: PUSH
25649: LD_INT 0
25651: PUSH
25652: LD_INT 2
25654: NEG
25655: PUSH
25656: EMPTY
25657: LIST
25658: LIST
25659: PUSH
25660: LD_INT 1
25662: PUSH
25663: LD_INT 1
25665: NEG
25666: PUSH
25667: EMPTY
25668: LIST
25669: LIST
25670: PUSH
25671: LD_INT 2
25673: PUSH
25674: LD_INT 0
25676: PUSH
25677: EMPTY
25678: LIST
25679: LIST
25680: PUSH
25681: LD_INT 2
25683: PUSH
25684: LD_INT 1
25686: PUSH
25687: EMPTY
25688: LIST
25689: LIST
25690: PUSH
25691: LD_INT 2
25693: PUSH
25694: LD_INT 2
25696: PUSH
25697: EMPTY
25698: LIST
25699: LIST
25700: PUSH
25701: LD_INT 1
25703: PUSH
25704: LD_INT 2
25706: PUSH
25707: EMPTY
25708: LIST
25709: LIST
25710: PUSH
25711: LD_INT 0
25713: PUSH
25714: LD_INT 2
25716: PUSH
25717: EMPTY
25718: LIST
25719: LIST
25720: PUSH
25721: LD_INT 1
25723: NEG
25724: PUSH
25725: LD_INT 1
25727: PUSH
25728: EMPTY
25729: LIST
25730: LIST
25731: PUSH
25732: LD_INT 2
25734: NEG
25735: PUSH
25736: LD_INT 0
25738: PUSH
25739: EMPTY
25740: LIST
25741: LIST
25742: PUSH
25743: LD_INT 2
25745: NEG
25746: PUSH
25747: LD_INT 1
25749: NEG
25750: PUSH
25751: EMPTY
25752: LIST
25753: LIST
25754: PUSH
25755: LD_INT 2
25757: NEG
25758: PUSH
25759: LD_INT 2
25761: NEG
25762: PUSH
25763: EMPTY
25764: LIST
25765: LIST
25766: PUSH
25767: LD_INT 1
25769: NEG
25770: PUSH
25771: LD_INT 2
25773: PUSH
25774: EMPTY
25775: LIST
25776: LIST
25777: PUSH
25778: LD_INT 2
25780: NEG
25781: PUSH
25782: LD_INT 1
25784: PUSH
25785: EMPTY
25786: LIST
25787: LIST
25788: PUSH
25789: LD_INT 3
25791: NEG
25792: PUSH
25793: LD_INT 1
25795: NEG
25796: PUSH
25797: EMPTY
25798: LIST
25799: LIST
25800: PUSH
25801: LD_INT 3
25803: NEG
25804: PUSH
25805: LD_INT 2
25807: NEG
25808: PUSH
25809: EMPTY
25810: LIST
25811: LIST
25812: PUSH
25813: EMPTY
25814: LIST
25815: LIST
25816: LIST
25817: LIST
25818: LIST
25819: LIST
25820: LIST
25821: LIST
25822: LIST
25823: LIST
25824: LIST
25825: LIST
25826: LIST
25827: LIST
25828: LIST
25829: LIST
25830: LIST
25831: LIST
25832: LIST
25833: LIST
25834: LIST
25835: LIST
25836: LIST
25837: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
25838: LD_ADDR_VAR 0 28
25842: PUSH
25843: LD_INT 0
25845: PUSH
25846: LD_INT 0
25848: PUSH
25849: EMPTY
25850: LIST
25851: LIST
25852: PUSH
25853: LD_INT 0
25855: PUSH
25856: LD_INT 1
25858: NEG
25859: PUSH
25860: EMPTY
25861: LIST
25862: LIST
25863: PUSH
25864: LD_INT 1
25866: PUSH
25867: LD_INT 0
25869: PUSH
25870: EMPTY
25871: LIST
25872: LIST
25873: PUSH
25874: LD_INT 1
25876: PUSH
25877: LD_INT 1
25879: PUSH
25880: EMPTY
25881: LIST
25882: LIST
25883: PUSH
25884: LD_INT 0
25886: PUSH
25887: LD_INT 1
25889: PUSH
25890: EMPTY
25891: LIST
25892: LIST
25893: PUSH
25894: LD_INT 1
25896: NEG
25897: PUSH
25898: LD_INT 0
25900: PUSH
25901: EMPTY
25902: LIST
25903: LIST
25904: PUSH
25905: LD_INT 1
25907: NEG
25908: PUSH
25909: LD_INT 1
25911: NEG
25912: PUSH
25913: EMPTY
25914: LIST
25915: LIST
25916: PUSH
25917: LD_INT 1
25919: NEG
25920: PUSH
25921: LD_INT 2
25923: NEG
25924: PUSH
25925: EMPTY
25926: LIST
25927: LIST
25928: PUSH
25929: LD_INT 0
25931: PUSH
25932: LD_INT 2
25934: NEG
25935: PUSH
25936: EMPTY
25937: LIST
25938: LIST
25939: PUSH
25940: LD_INT 1
25942: PUSH
25943: LD_INT 1
25945: NEG
25946: PUSH
25947: EMPTY
25948: LIST
25949: LIST
25950: PUSH
25951: LD_INT 2
25953: PUSH
25954: LD_INT 0
25956: PUSH
25957: EMPTY
25958: LIST
25959: LIST
25960: PUSH
25961: LD_INT 2
25963: PUSH
25964: LD_INT 1
25966: PUSH
25967: EMPTY
25968: LIST
25969: LIST
25970: PUSH
25971: LD_INT 2
25973: PUSH
25974: LD_INT 2
25976: PUSH
25977: EMPTY
25978: LIST
25979: LIST
25980: PUSH
25981: LD_INT 1
25983: PUSH
25984: LD_INT 2
25986: PUSH
25987: EMPTY
25988: LIST
25989: LIST
25990: PUSH
25991: LD_INT 0
25993: PUSH
25994: LD_INT 2
25996: PUSH
25997: EMPTY
25998: LIST
25999: LIST
26000: PUSH
26001: LD_INT 1
26003: NEG
26004: PUSH
26005: LD_INT 1
26007: PUSH
26008: EMPTY
26009: LIST
26010: LIST
26011: PUSH
26012: LD_INT 2
26014: NEG
26015: PUSH
26016: LD_INT 0
26018: PUSH
26019: EMPTY
26020: LIST
26021: LIST
26022: PUSH
26023: LD_INT 2
26025: NEG
26026: PUSH
26027: LD_INT 1
26029: NEG
26030: PUSH
26031: EMPTY
26032: LIST
26033: LIST
26034: PUSH
26035: LD_INT 2
26037: NEG
26038: PUSH
26039: LD_INT 2
26041: NEG
26042: PUSH
26043: EMPTY
26044: LIST
26045: LIST
26046: PUSH
26047: LD_INT 2
26049: NEG
26050: PUSH
26051: LD_INT 3
26053: NEG
26054: PUSH
26055: EMPTY
26056: LIST
26057: LIST
26058: PUSH
26059: LD_INT 1
26061: NEG
26062: PUSH
26063: LD_INT 3
26065: NEG
26066: PUSH
26067: EMPTY
26068: LIST
26069: LIST
26070: PUSH
26071: LD_INT 3
26073: NEG
26074: PUSH
26075: LD_INT 1
26077: NEG
26078: PUSH
26079: EMPTY
26080: LIST
26081: LIST
26082: PUSH
26083: LD_INT 3
26085: NEG
26086: PUSH
26087: LD_INT 2
26089: NEG
26090: PUSH
26091: EMPTY
26092: LIST
26093: LIST
26094: PUSH
26095: EMPTY
26096: LIST
26097: LIST
26098: LIST
26099: LIST
26100: LIST
26101: LIST
26102: LIST
26103: LIST
26104: LIST
26105: LIST
26106: LIST
26107: LIST
26108: LIST
26109: LIST
26110: LIST
26111: LIST
26112: LIST
26113: LIST
26114: LIST
26115: LIST
26116: LIST
26117: LIST
26118: LIST
26119: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
26120: LD_ADDR_VAR 0 29
26124: PUSH
26125: LD_INT 0
26127: PUSH
26128: LD_INT 0
26130: PUSH
26131: EMPTY
26132: LIST
26133: LIST
26134: PUSH
26135: LD_INT 0
26137: PUSH
26138: LD_INT 1
26140: NEG
26141: PUSH
26142: EMPTY
26143: LIST
26144: LIST
26145: PUSH
26146: LD_INT 1
26148: PUSH
26149: LD_INT 0
26151: PUSH
26152: EMPTY
26153: LIST
26154: LIST
26155: PUSH
26156: LD_INT 1
26158: PUSH
26159: LD_INT 1
26161: PUSH
26162: EMPTY
26163: LIST
26164: LIST
26165: PUSH
26166: LD_INT 0
26168: PUSH
26169: LD_INT 1
26171: PUSH
26172: EMPTY
26173: LIST
26174: LIST
26175: PUSH
26176: LD_INT 1
26178: NEG
26179: PUSH
26180: LD_INT 0
26182: PUSH
26183: EMPTY
26184: LIST
26185: LIST
26186: PUSH
26187: LD_INT 1
26189: NEG
26190: PUSH
26191: LD_INT 1
26193: NEG
26194: PUSH
26195: EMPTY
26196: LIST
26197: LIST
26198: PUSH
26199: LD_INT 1
26201: NEG
26202: PUSH
26203: LD_INT 2
26205: NEG
26206: PUSH
26207: EMPTY
26208: LIST
26209: LIST
26210: PUSH
26211: LD_INT 0
26213: PUSH
26214: LD_INT 2
26216: NEG
26217: PUSH
26218: EMPTY
26219: LIST
26220: LIST
26221: PUSH
26222: LD_INT 1
26224: PUSH
26225: LD_INT 1
26227: NEG
26228: PUSH
26229: EMPTY
26230: LIST
26231: LIST
26232: PUSH
26233: LD_INT 2
26235: PUSH
26236: LD_INT 0
26238: PUSH
26239: EMPTY
26240: LIST
26241: LIST
26242: PUSH
26243: LD_INT 2
26245: PUSH
26246: LD_INT 1
26248: PUSH
26249: EMPTY
26250: LIST
26251: LIST
26252: PUSH
26253: LD_INT 1
26255: PUSH
26256: LD_INT 2
26258: PUSH
26259: EMPTY
26260: LIST
26261: LIST
26262: PUSH
26263: LD_INT 0
26265: PUSH
26266: LD_INT 2
26268: PUSH
26269: EMPTY
26270: LIST
26271: LIST
26272: PUSH
26273: LD_INT 1
26275: NEG
26276: PUSH
26277: LD_INT 1
26279: PUSH
26280: EMPTY
26281: LIST
26282: LIST
26283: PUSH
26284: LD_INT 2
26286: NEG
26287: PUSH
26288: LD_INT 1
26290: NEG
26291: PUSH
26292: EMPTY
26293: LIST
26294: LIST
26295: PUSH
26296: LD_INT 2
26298: NEG
26299: PUSH
26300: LD_INT 2
26302: NEG
26303: PUSH
26304: EMPTY
26305: LIST
26306: LIST
26307: PUSH
26308: LD_INT 2
26310: NEG
26311: PUSH
26312: LD_INT 3
26314: NEG
26315: PUSH
26316: EMPTY
26317: LIST
26318: LIST
26319: PUSH
26320: LD_INT 2
26322: PUSH
26323: LD_INT 1
26325: NEG
26326: PUSH
26327: EMPTY
26328: LIST
26329: LIST
26330: PUSH
26331: LD_INT 3
26333: PUSH
26334: LD_INT 1
26336: PUSH
26337: EMPTY
26338: LIST
26339: LIST
26340: PUSH
26341: LD_INT 1
26343: PUSH
26344: LD_INT 3
26346: PUSH
26347: EMPTY
26348: LIST
26349: LIST
26350: PUSH
26351: LD_INT 1
26353: NEG
26354: PUSH
26355: LD_INT 2
26357: PUSH
26358: EMPTY
26359: LIST
26360: LIST
26361: PUSH
26362: LD_INT 3
26364: NEG
26365: PUSH
26366: LD_INT 2
26368: NEG
26369: PUSH
26370: EMPTY
26371: LIST
26372: LIST
26373: PUSH
26374: EMPTY
26375: LIST
26376: LIST
26377: LIST
26378: LIST
26379: LIST
26380: LIST
26381: LIST
26382: LIST
26383: LIST
26384: LIST
26385: LIST
26386: LIST
26387: LIST
26388: LIST
26389: LIST
26390: LIST
26391: LIST
26392: LIST
26393: LIST
26394: LIST
26395: LIST
26396: LIST
26397: LIST
26398: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
26399: LD_ADDR_VAR 0 30
26403: PUSH
26404: LD_INT 0
26406: PUSH
26407: LD_INT 0
26409: PUSH
26410: EMPTY
26411: LIST
26412: LIST
26413: PUSH
26414: LD_INT 0
26416: PUSH
26417: LD_INT 1
26419: NEG
26420: PUSH
26421: EMPTY
26422: LIST
26423: LIST
26424: PUSH
26425: LD_INT 1
26427: PUSH
26428: LD_INT 0
26430: PUSH
26431: EMPTY
26432: LIST
26433: LIST
26434: PUSH
26435: LD_INT 1
26437: PUSH
26438: LD_INT 1
26440: PUSH
26441: EMPTY
26442: LIST
26443: LIST
26444: PUSH
26445: LD_INT 0
26447: PUSH
26448: LD_INT 1
26450: PUSH
26451: EMPTY
26452: LIST
26453: LIST
26454: PUSH
26455: LD_INT 1
26457: NEG
26458: PUSH
26459: LD_INT 0
26461: PUSH
26462: EMPTY
26463: LIST
26464: LIST
26465: PUSH
26466: LD_INT 1
26468: NEG
26469: PUSH
26470: LD_INT 1
26472: NEG
26473: PUSH
26474: EMPTY
26475: LIST
26476: LIST
26477: PUSH
26478: LD_INT 1
26480: NEG
26481: PUSH
26482: LD_INT 2
26484: NEG
26485: PUSH
26486: EMPTY
26487: LIST
26488: LIST
26489: PUSH
26490: LD_INT 0
26492: PUSH
26493: LD_INT 2
26495: NEG
26496: PUSH
26497: EMPTY
26498: LIST
26499: LIST
26500: PUSH
26501: LD_INT 1
26503: PUSH
26504: LD_INT 1
26506: NEG
26507: PUSH
26508: EMPTY
26509: LIST
26510: LIST
26511: PUSH
26512: LD_INT 2
26514: PUSH
26515: LD_INT 0
26517: PUSH
26518: EMPTY
26519: LIST
26520: LIST
26521: PUSH
26522: LD_INT 2
26524: PUSH
26525: LD_INT 1
26527: PUSH
26528: EMPTY
26529: LIST
26530: LIST
26531: PUSH
26532: LD_INT 2
26534: PUSH
26535: LD_INT 2
26537: PUSH
26538: EMPTY
26539: LIST
26540: LIST
26541: PUSH
26542: LD_INT 1
26544: PUSH
26545: LD_INT 2
26547: PUSH
26548: EMPTY
26549: LIST
26550: LIST
26551: PUSH
26552: LD_INT 1
26554: NEG
26555: PUSH
26556: LD_INT 1
26558: PUSH
26559: EMPTY
26560: LIST
26561: LIST
26562: PUSH
26563: LD_INT 2
26565: NEG
26566: PUSH
26567: LD_INT 0
26569: PUSH
26570: EMPTY
26571: LIST
26572: LIST
26573: PUSH
26574: LD_INT 2
26576: NEG
26577: PUSH
26578: LD_INT 1
26580: NEG
26581: PUSH
26582: EMPTY
26583: LIST
26584: LIST
26585: PUSH
26586: LD_INT 1
26588: NEG
26589: PUSH
26590: LD_INT 3
26592: NEG
26593: PUSH
26594: EMPTY
26595: LIST
26596: LIST
26597: PUSH
26598: LD_INT 1
26600: PUSH
26601: LD_INT 2
26603: NEG
26604: PUSH
26605: EMPTY
26606: LIST
26607: LIST
26608: PUSH
26609: LD_INT 3
26611: PUSH
26612: LD_INT 2
26614: PUSH
26615: EMPTY
26616: LIST
26617: LIST
26618: PUSH
26619: LD_INT 2
26621: PUSH
26622: LD_INT 3
26624: PUSH
26625: EMPTY
26626: LIST
26627: LIST
26628: PUSH
26629: LD_INT 2
26631: NEG
26632: PUSH
26633: LD_INT 1
26635: PUSH
26636: EMPTY
26637: LIST
26638: LIST
26639: PUSH
26640: LD_INT 3
26642: NEG
26643: PUSH
26644: LD_INT 1
26646: NEG
26647: PUSH
26648: EMPTY
26649: LIST
26650: LIST
26651: PUSH
26652: EMPTY
26653: LIST
26654: LIST
26655: LIST
26656: LIST
26657: LIST
26658: LIST
26659: LIST
26660: LIST
26661: LIST
26662: LIST
26663: LIST
26664: LIST
26665: LIST
26666: LIST
26667: LIST
26668: LIST
26669: LIST
26670: LIST
26671: LIST
26672: LIST
26673: LIST
26674: LIST
26675: LIST
26676: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
26677: LD_ADDR_VAR 0 31
26681: PUSH
26682: LD_INT 0
26684: PUSH
26685: LD_INT 0
26687: PUSH
26688: EMPTY
26689: LIST
26690: LIST
26691: PUSH
26692: LD_INT 0
26694: PUSH
26695: LD_INT 1
26697: NEG
26698: PUSH
26699: EMPTY
26700: LIST
26701: LIST
26702: PUSH
26703: LD_INT 1
26705: PUSH
26706: LD_INT 0
26708: PUSH
26709: EMPTY
26710: LIST
26711: LIST
26712: PUSH
26713: LD_INT 1
26715: PUSH
26716: LD_INT 1
26718: PUSH
26719: EMPTY
26720: LIST
26721: LIST
26722: PUSH
26723: LD_INT 0
26725: PUSH
26726: LD_INT 1
26728: PUSH
26729: EMPTY
26730: LIST
26731: LIST
26732: PUSH
26733: LD_INT 1
26735: NEG
26736: PUSH
26737: LD_INT 0
26739: PUSH
26740: EMPTY
26741: LIST
26742: LIST
26743: PUSH
26744: LD_INT 1
26746: NEG
26747: PUSH
26748: LD_INT 1
26750: NEG
26751: PUSH
26752: EMPTY
26753: LIST
26754: LIST
26755: PUSH
26756: LD_INT 1
26758: NEG
26759: PUSH
26760: LD_INT 2
26762: NEG
26763: PUSH
26764: EMPTY
26765: LIST
26766: LIST
26767: PUSH
26768: LD_INT 1
26770: PUSH
26771: LD_INT 1
26773: NEG
26774: PUSH
26775: EMPTY
26776: LIST
26777: LIST
26778: PUSH
26779: LD_INT 2
26781: PUSH
26782: LD_INT 0
26784: PUSH
26785: EMPTY
26786: LIST
26787: LIST
26788: PUSH
26789: LD_INT 2
26791: PUSH
26792: LD_INT 1
26794: PUSH
26795: EMPTY
26796: LIST
26797: LIST
26798: PUSH
26799: LD_INT 2
26801: PUSH
26802: LD_INT 2
26804: PUSH
26805: EMPTY
26806: LIST
26807: LIST
26808: PUSH
26809: LD_INT 1
26811: PUSH
26812: LD_INT 2
26814: PUSH
26815: EMPTY
26816: LIST
26817: LIST
26818: PUSH
26819: LD_INT 0
26821: PUSH
26822: LD_INT 2
26824: PUSH
26825: EMPTY
26826: LIST
26827: LIST
26828: PUSH
26829: LD_INT 1
26831: NEG
26832: PUSH
26833: LD_INT 1
26835: PUSH
26836: EMPTY
26837: LIST
26838: LIST
26839: PUSH
26840: LD_INT 2
26842: NEG
26843: PUSH
26844: LD_INT 1
26846: NEG
26847: PUSH
26848: EMPTY
26849: LIST
26850: LIST
26851: PUSH
26852: LD_INT 2
26854: NEG
26855: PUSH
26856: LD_INT 2
26858: NEG
26859: PUSH
26860: EMPTY
26861: LIST
26862: LIST
26863: PUSH
26864: LD_INT 2
26866: NEG
26867: PUSH
26868: LD_INT 3
26870: NEG
26871: PUSH
26872: EMPTY
26873: LIST
26874: LIST
26875: PUSH
26876: LD_INT 2
26878: PUSH
26879: LD_INT 1
26881: NEG
26882: PUSH
26883: EMPTY
26884: LIST
26885: LIST
26886: PUSH
26887: LD_INT 3
26889: PUSH
26890: LD_INT 1
26892: PUSH
26893: EMPTY
26894: LIST
26895: LIST
26896: PUSH
26897: LD_INT 1
26899: PUSH
26900: LD_INT 3
26902: PUSH
26903: EMPTY
26904: LIST
26905: LIST
26906: PUSH
26907: LD_INT 1
26909: NEG
26910: PUSH
26911: LD_INT 2
26913: PUSH
26914: EMPTY
26915: LIST
26916: LIST
26917: PUSH
26918: LD_INT 3
26920: NEG
26921: PUSH
26922: LD_INT 2
26924: NEG
26925: PUSH
26926: EMPTY
26927: LIST
26928: LIST
26929: PUSH
26930: EMPTY
26931: LIST
26932: LIST
26933: LIST
26934: LIST
26935: LIST
26936: LIST
26937: LIST
26938: LIST
26939: LIST
26940: LIST
26941: LIST
26942: LIST
26943: LIST
26944: LIST
26945: LIST
26946: LIST
26947: LIST
26948: LIST
26949: LIST
26950: LIST
26951: LIST
26952: LIST
26953: LIST
26954: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
26955: LD_ADDR_VAR 0 32
26959: PUSH
26960: LD_INT 0
26962: PUSH
26963: LD_INT 0
26965: PUSH
26966: EMPTY
26967: LIST
26968: LIST
26969: PUSH
26970: LD_INT 0
26972: PUSH
26973: LD_INT 1
26975: NEG
26976: PUSH
26977: EMPTY
26978: LIST
26979: LIST
26980: PUSH
26981: LD_INT 1
26983: PUSH
26984: LD_INT 0
26986: PUSH
26987: EMPTY
26988: LIST
26989: LIST
26990: PUSH
26991: LD_INT 1
26993: PUSH
26994: LD_INT 1
26996: PUSH
26997: EMPTY
26998: LIST
26999: LIST
27000: PUSH
27001: LD_INT 0
27003: PUSH
27004: LD_INT 1
27006: PUSH
27007: EMPTY
27008: LIST
27009: LIST
27010: PUSH
27011: LD_INT 1
27013: NEG
27014: PUSH
27015: LD_INT 0
27017: PUSH
27018: EMPTY
27019: LIST
27020: LIST
27021: PUSH
27022: LD_INT 1
27024: NEG
27025: PUSH
27026: LD_INT 1
27028: NEG
27029: PUSH
27030: EMPTY
27031: LIST
27032: LIST
27033: PUSH
27034: LD_INT 1
27036: NEG
27037: PUSH
27038: LD_INT 2
27040: NEG
27041: PUSH
27042: EMPTY
27043: LIST
27044: LIST
27045: PUSH
27046: LD_INT 0
27048: PUSH
27049: LD_INT 2
27051: NEG
27052: PUSH
27053: EMPTY
27054: LIST
27055: LIST
27056: PUSH
27057: LD_INT 1
27059: PUSH
27060: LD_INT 1
27062: NEG
27063: PUSH
27064: EMPTY
27065: LIST
27066: LIST
27067: PUSH
27068: LD_INT 2
27070: PUSH
27071: LD_INT 1
27073: PUSH
27074: EMPTY
27075: LIST
27076: LIST
27077: PUSH
27078: LD_INT 2
27080: PUSH
27081: LD_INT 2
27083: PUSH
27084: EMPTY
27085: LIST
27086: LIST
27087: PUSH
27088: LD_INT 1
27090: PUSH
27091: LD_INT 2
27093: PUSH
27094: EMPTY
27095: LIST
27096: LIST
27097: PUSH
27098: LD_INT 0
27100: PUSH
27101: LD_INT 2
27103: PUSH
27104: EMPTY
27105: LIST
27106: LIST
27107: PUSH
27108: LD_INT 1
27110: NEG
27111: PUSH
27112: LD_INT 1
27114: PUSH
27115: EMPTY
27116: LIST
27117: LIST
27118: PUSH
27119: LD_INT 2
27121: NEG
27122: PUSH
27123: LD_INT 0
27125: PUSH
27126: EMPTY
27127: LIST
27128: LIST
27129: PUSH
27130: LD_INT 2
27132: NEG
27133: PUSH
27134: LD_INT 1
27136: NEG
27137: PUSH
27138: EMPTY
27139: LIST
27140: LIST
27141: PUSH
27142: LD_INT 1
27144: NEG
27145: PUSH
27146: LD_INT 3
27148: NEG
27149: PUSH
27150: EMPTY
27151: LIST
27152: LIST
27153: PUSH
27154: LD_INT 1
27156: PUSH
27157: LD_INT 2
27159: NEG
27160: PUSH
27161: EMPTY
27162: LIST
27163: LIST
27164: PUSH
27165: LD_INT 3
27167: PUSH
27168: LD_INT 2
27170: PUSH
27171: EMPTY
27172: LIST
27173: LIST
27174: PUSH
27175: LD_INT 2
27177: PUSH
27178: LD_INT 3
27180: PUSH
27181: EMPTY
27182: LIST
27183: LIST
27184: PUSH
27185: LD_INT 2
27187: NEG
27188: PUSH
27189: LD_INT 1
27191: PUSH
27192: EMPTY
27193: LIST
27194: LIST
27195: PUSH
27196: LD_INT 3
27198: NEG
27199: PUSH
27200: LD_INT 1
27202: NEG
27203: PUSH
27204: EMPTY
27205: LIST
27206: LIST
27207: PUSH
27208: EMPTY
27209: LIST
27210: LIST
27211: LIST
27212: LIST
27213: LIST
27214: LIST
27215: LIST
27216: LIST
27217: LIST
27218: LIST
27219: LIST
27220: LIST
27221: LIST
27222: LIST
27223: LIST
27224: LIST
27225: LIST
27226: LIST
27227: LIST
27228: LIST
27229: LIST
27230: LIST
27231: LIST
27232: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
27233: LD_ADDR_VAR 0 33
27237: PUSH
27238: LD_INT 0
27240: PUSH
27241: LD_INT 0
27243: PUSH
27244: EMPTY
27245: LIST
27246: LIST
27247: PUSH
27248: LD_INT 0
27250: PUSH
27251: LD_INT 1
27253: NEG
27254: PUSH
27255: EMPTY
27256: LIST
27257: LIST
27258: PUSH
27259: LD_INT 1
27261: PUSH
27262: LD_INT 0
27264: PUSH
27265: EMPTY
27266: LIST
27267: LIST
27268: PUSH
27269: LD_INT 1
27271: PUSH
27272: LD_INT 1
27274: PUSH
27275: EMPTY
27276: LIST
27277: LIST
27278: PUSH
27279: LD_INT 0
27281: PUSH
27282: LD_INT 1
27284: PUSH
27285: EMPTY
27286: LIST
27287: LIST
27288: PUSH
27289: LD_INT 1
27291: NEG
27292: PUSH
27293: LD_INT 0
27295: PUSH
27296: EMPTY
27297: LIST
27298: LIST
27299: PUSH
27300: LD_INT 1
27302: NEG
27303: PUSH
27304: LD_INT 1
27306: NEG
27307: PUSH
27308: EMPTY
27309: LIST
27310: LIST
27311: PUSH
27312: LD_INT 1
27314: NEG
27315: PUSH
27316: LD_INT 2
27318: NEG
27319: PUSH
27320: EMPTY
27321: LIST
27322: LIST
27323: PUSH
27324: LD_INT 1
27326: PUSH
27327: LD_INT 1
27329: NEG
27330: PUSH
27331: EMPTY
27332: LIST
27333: LIST
27334: PUSH
27335: LD_INT 2
27337: PUSH
27338: LD_INT 0
27340: PUSH
27341: EMPTY
27342: LIST
27343: LIST
27344: PUSH
27345: LD_INT 2
27347: PUSH
27348: LD_INT 1
27350: PUSH
27351: EMPTY
27352: LIST
27353: LIST
27354: PUSH
27355: LD_INT 1
27357: PUSH
27358: LD_INT 2
27360: PUSH
27361: EMPTY
27362: LIST
27363: LIST
27364: PUSH
27365: LD_INT 0
27367: PUSH
27368: LD_INT 2
27370: PUSH
27371: EMPTY
27372: LIST
27373: LIST
27374: PUSH
27375: LD_INT 1
27377: NEG
27378: PUSH
27379: LD_INT 1
27381: PUSH
27382: EMPTY
27383: LIST
27384: LIST
27385: PUSH
27386: LD_INT 2
27388: NEG
27389: PUSH
27390: LD_INT 0
27392: PUSH
27393: EMPTY
27394: LIST
27395: LIST
27396: PUSH
27397: LD_INT 2
27399: NEG
27400: PUSH
27401: LD_INT 1
27403: NEG
27404: PUSH
27405: EMPTY
27406: LIST
27407: LIST
27408: PUSH
27409: LD_INT 2
27411: NEG
27412: PUSH
27413: LD_INT 2
27415: NEG
27416: PUSH
27417: EMPTY
27418: LIST
27419: LIST
27420: PUSH
27421: LD_INT 2
27423: NEG
27424: PUSH
27425: LD_INT 3
27427: NEG
27428: PUSH
27429: EMPTY
27430: LIST
27431: LIST
27432: PUSH
27433: LD_INT 2
27435: PUSH
27436: LD_INT 1
27438: NEG
27439: PUSH
27440: EMPTY
27441: LIST
27442: LIST
27443: PUSH
27444: LD_INT 3
27446: PUSH
27447: LD_INT 1
27449: PUSH
27450: EMPTY
27451: LIST
27452: LIST
27453: PUSH
27454: LD_INT 1
27456: PUSH
27457: LD_INT 3
27459: PUSH
27460: EMPTY
27461: LIST
27462: LIST
27463: PUSH
27464: LD_INT 1
27466: NEG
27467: PUSH
27468: LD_INT 2
27470: PUSH
27471: EMPTY
27472: LIST
27473: LIST
27474: PUSH
27475: LD_INT 3
27477: NEG
27478: PUSH
27479: LD_INT 2
27481: NEG
27482: PUSH
27483: EMPTY
27484: LIST
27485: LIST
27486: PUSH
27487: EMPTY
27488: LIST
27489: LIST
27490: LIST
27491: LIST
27492: LIST
27493: LIST
27494: LIST
27495: LIST
27496: LIST
27497: LIST
27498: LIST
27499: LIST
27500: LIST
27501: LIST
27502: LIST
27503: LIST
27504: LIST
27505: LIST
27506: LIST
27507: LIST
27508: LIST
27509: LIST
27510: LIST
27511: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
27512: LD_ADDR_VAR 0 34
27516: PUSH
27517: LD_INT 0
27519: PUSH
27520: LD_INT 0
27522: PUSH
27523: EMPTY
27524: LIST
27525: LIST
27526: PUSH
27527: LD_INT 0
27529: PUSH
27530: LD_INT 1
27532: NEG
27533: PUSH
27534: EMPTY
27535: LIST
27536: LIST
27537: PUSH
27538: LD_INT 1
27540: PUSH
27541: LD_INT 0
27543: PUSH
27544: EMPTY
27545: LIST
27546: LIST
27547: PUSH
27548: LD_INT 1
27550: PUSH
27551: LD_INT 1
27553: PUSH
27554: EMPTY
27555: LIST
27556: LIST
27557: PUSH
27558: LD_INT 0
27560: PUSH
27561: LD_INT 1
27563: PUSH
27564: EMPTY
27565: LIST
27566: LIST
27567: PUSH
27568: LD_INT 1
27570: NEG
27571: PUSH
27572: LD_INT 0
27574: PUSH
27575: EMPTY
27576: LIST
27577: LIST
27578: PUSH
27579: LD_INT 1
27581: NEG
27582: PUSH
27583: LD_INT 1
27585: NEG
27586: PUSH
27587: EMPTY
27588: LIST
27589: LIST
27590: PUSH
27591: LD_INT 1
27593: NEG
27594: PUSH
27595: LD_INT 2
27597: NEG
27598: PUSH
27599: EMPTY
27600: LIST
27601: LIST
27602: PUSH
27603: LD_INT 0
27605: PUSH
27606: LD_INT 2
27608: NEG
27609: PUSH
27610: EMPTY
27611: LIST
27612: LIST
27613: PUSH
27614: LD_INT 1
27616: PUSH
27617: LD_INT 1
27619: NEG
27620: PUSH
27621: EMPTY
27622: LIST
27623: LIST
27624: PUSH
27625: LD_INT 2
27627: PUSH
27628: LD_INT 1
27630: PUSH
27631: EMPTY
27632: LIST
27633: LIST
27634: PUSH
27635: LD_INT 2
27637: PUSH
27638: LD_INT 2
27640: PUSH
27641: EMPTY
27642: LIST
27643: LIST
27644: PUSH
27645: LD_INT 1
27647: PUSH
27648: LD_INT 2
27650: PUSH
27651: EMPTY
27652: LIST
27653: LIST
27654: PUSH
27655: LD_INT 1
27657: NEG
27658: PUSH
27659: LD_INT 1
27661: PUSH
27662: EMPTY
27663: LIST
27664: LIST
27665: PUSH
27666: LD_INT 2
27668: NEG
27669: PUSH
27670: LD_INT 0
27672: PUSH
27673: EMPTY
27674: LIST
27675: LIST
27676: PUSH
27677: LD_INT 2
27679: NEG
27680: PUSH
27681: LD_INT 1
27683: NEG
27684: PUSH
27685: EMPTY
27686: LIST
27687: LIST
27688: PUSH
27689: LD_INT 2
27691: NEG
27692: PUSH
27693: LD_INT 2
27695: NEG
27696: PUSH
27697: EMPTY
27698: LIST
27699: LIST
27700: PUSH
27701: LD_INT 1
27703: NEG
27704: PUSH
27705: LD_INT 3
27707: NEG
27708: PUSH
27709: EMPTY
27710: LIST
27711: LIST
27712: PUSH
27713: LD_INT 1
27715: PUSH
27716: LD_INT 2
27718: NEG
27719: PUSH
27720: EMPTY
27721: LIST
27722: LIST
27723: PUSH
27724: LD_INT 3
27726: PUSH
27727: LD_INT 2
27729: PUSH
27730: EMPTY
27731: LIST
27732: LIST
27733: PUSH
27734: LD_INT 2
27736: PUSH
27737: LD_INT 3
27739: PUSH
27740: EMPTY
27741: LIST
27742: LIST
27743: PUSH
27744: LD_INT 2
27746: NEG
27747: PUSH
27748: LD_INT 1
27750: PUSH
27751: EMPTY
27752: LIST
27753: LIST
27754: PUSH
27755: LD_INT 3
27757: NEG
27758: PUSH
27759: LD_INT 1
27761: NEG
27762: PUSH
27763: EMPTY
27764: LIST
27765: LIST
27766: PUSH
27767: EMPTY
27768: LIST
27769: LIST
27770: LIST
27771: LIST
27772: LIST
27773: LIST
27774: LIST
27775: LIST
27776: LIST
27777: LIST
27778: LIST
27779: LIST
27780: LIST
27781: LIST
27782: LIST
27783: LIST
27784: LIST
27785: LIST
27786: LIST
27787: LIST
27788: LIST
27789: LIST
27790: LIST
27791: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
27792: LD_ADDR_VAR 0 35
27796: PUSH
27797: LD_INT 0
27799: PUSH
27800: LD_INT 0
27802: PUSH
27803: EMPTY
27804: LIST
27805: LIST
27806: PUSH
27807: LD_INT 0
27809: PUSH
27810: LD_INT 1
27812: NEG
27813: PUSH
27814: EMPTY
27815: LIST
27816: LIST
27817: PUSH
27818: LD_INT 1
27820: PUSH
27821: LD_INT 0
27823: PUSH
27824: EMPTY
27825: LIST
27826: LIST
27827: PUSH
27828: LD_INT 1
27830: PUSH
27831: LD_INT 1
27833: PUSH
27834: EMPTY
27835: LIST
27836: LIST
27837: PUSH
27838: LD_INT 0
27840: PUSH
27841: LD_INT 1
27843: PUSH
27844: EMPTY
27845: LIST
27846: LIST
27847: PUSH
27848: LD_INT 1
27850: NEG
27851: PUSH
27852: LD_INT 0
27854: PUSH
27855: EMPTY
27856: LIST
27857: LIST
27858: PUSH
27859: LD_INT 1
27861: NEG
27862: PUSH
27863: LD_INT 1
27865: NEG
27866: PUSH
27867: EMPTY
27868: LIST
27869: LIST
27870: PUSH
27871: LD_INT 2
27873: PUSH
27874: LD_INT 1
27876: PUSH
27877: EMPTY
27878: LIST
27879: LIST
27880: PUSH
27881: LD_INT 2
27883: NEG
27884: PUSH
27885: LD_INT 1
27887: NEG
27888: PUSH
27889: EMPTY
27890: LIST
27891: LIST
27892: PUSH
27893: EMPTY
27894: LIST
27895: LIST
27896: LIST
27897: LIST
27898: LIST
27899: LIST
27900: LIST
27901: LIST
27902: LIST
27903: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
27904: LD_ADDR_VAR 0 36
27908: PUSH
27909: LD_INT 0
27911: PUSH
27912: LD_INT 0
27914: PUSH
27915: EMPTY
27916: LIST
27917: LIST
27918: PUSH
27919: LD_INT 0
27921: PUSH
27922: LD_INT 1
27924: NEG
27925: PUSH
27926: EMPTY
27927: LIST
27928: LIST
27929: PUSH
27930: LD_INT 1
27932: PUSH
27933: LD_INT 0
27935: PUSH
27936: EMPTY
27937: LIST
27938: LIST
27939: PUSH
27940: LD_INT 1
27942: PUSH
27943: LD_INT 1
27945: PUSH
27946: EMPTY
27947: LIST
27948: LIST
27949: PUSH
27950: LD_INT 0
27952: PUSH
27953: LD_INT 1
27955: PUSH
27956: EMPTY
27957: LIST
27958: LIST
27959: PUSH
27960: LD_INT 1
27962: NEG
27963: PUSH
27964: LD_INT 0
27966: PUSH
27967: EMPTY
27968: LIST
27969: LIST
27970: PUSH
27971: LD_INT 1
27973: NEG
27974: PUSH
27975: LD_INT 1
27977: NEG
27978: PUSH
27979: EMPTY
27980: LIST
27981: LIST
27982: PUSH
27983: LD_INT 1
27985: NEG
27986: PUSH
27987: LD_INT 2
27989: NEG
27990: PUSH
27991: EMPTY
27992: LIST
27993: LIST
27994: PUSH
27995: LD_INT 1
27997: PUSH
27998: LD_INT 2
28000: PUSH
28001: EMPTY
28002: LIST
28003: LIST
28004: PUSH
28005: EMPTY
28006: LIST
28007: LIST
28008: LIST
28009: LIST
28010: LIST
28011: LIST
28012: LIST
28013: LIST
28014: LIST
28015: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
28016: LD_ADDR_VAR 0 37
28020: PUSH
28021: LD_INT 0
28023: PUSH
28024: LD_INT 0
28026: PUSH
28027: EMPTY
28028: LIST
28029: LIST
28030: PUSH
28031: LD_INT 0
28033: PUSH
28034: LD_INT 1
28036: NEG
28037: PUSH
28038: EMPTY
28039: LIST
28040: LIST
28041: PUSH
28042: LD_INT 1
28044: PUSH
28045: LD_INT 0
28047: PUSH
28048: EMPTY
28049: LIST
28050: LIST
28051: PUSH
28052: LD_INT 1
28054: PUSH
28055: LD_INT 1
28057: PUSH
28058: EMPTY
28059: LIST
28060: LIST
28061: PUSH
28062: LD_INT 0
28064: PUSH
28065: LD_INT 1
28067: PUSH
28068: EMPTY
28069: LIST
28070: LIST
28071: PUSH
28072: LD_INT 1
28074: NEG
28075: PUSH
28076: LD_INT 0
28078: PUSH
28079: EMPTY
28080: LIST
28081: LIST
28082: PUSH
28083: LD_INT 1
28085: NEG
28086: PUSH
28087: LD_INT 1
28089: NEG
28090: PUSH
28091: EMPTY
28092: LIST
28093: LIST
28094: PUSH
28095: LD_INT 1
28097: PUSH
28098: LD_INT 1
28100: NEG
28101: PUSH
28102: EMPTY
28103: LIST
28104: LIST
28105: PUSH
28106: LD_INT 1
28108: NEG
28109: PUSH
28110: LD_INT 1
28112: PUSH
28113: EMPTY
28114: LIST
28115: LIST
28116: PUSH
28117: EMPTY
28118: LIST
28119: LIST
28120: LIST
28121: LIST
28122: LIST
28123: LIST
28124: LIST
28125: LIST
28126: LIST
28127: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
28128: LD_ADDR_VAR 0 38
28132: PUSH
28133: LD_INT 0
28135: PUSH
28136: LD_INT 0
28138: PUSH
28139: EMPTY
28140: LIST
28141: LIST
28142: PUSH
28143: LD_INT 0
28145: PUSH
28146: LD_INT 1
28148: NEG
28149: PUSH
28150: EMPTY
28151: LIST
28152: LIST
28153: PUSH
28154: LD_INT 1
28156: PUSH
28157: LD_INT 0
28159: PUSH
28160: EMPTY
28161: LIST
28162: LIST
28163: PUSH
28164: LD_INT 1
28166: PUSH
28167: LD_INT 1
28169: PUSH
28170: EMPTY
28171: LIST
28172: LIST
28173: PUSH
28174: LD_INT 0
28176: PUSH
28177: LD_INT 1
28179: PUSH
28180: EMPTY
28181: LIST
28182: LIST
28183: PUSH
28184: LD_INT 1
28186: NEG
28187: PUSH
28188: LD_INT 0
28190: PUSH
28191: EMPTY
28192: LIST
28193: LIST
28194: PUSH
28195: LD_INT 1
28197: NEG
28198: PUSH
28199: LD_INT 1
28201: NEG
28202: PUSH
28203: EMPTY
28204: LIST
28205: LIST
28206: PUSH
28207: LD_INT 2
28209: PUSH
28210: LD_INT 1
28212: PUSH
28213: EMPTY
28214: LIST
28215: LIST
28216: PUSH
28217: LD_INT 2
28219: NEG
28220: PUSH
28221: LD_INT 1
28223: NEG
28224: PUSH
28225: EMPTY
28226: LIST
28227: LIST
28228: PUSH
28229: EMPTY
28230: LIST
28231: LIST
28232: LIST
28233: LIST
28234: LIST
28235: LIST
28236: LIST
28237: LIST
28238: LIST
28239: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
28240: LD_ADDR_VAR 0 39
28244: PUSH
28245: LD_INT 0
28247: PUSH
28248: LD_INT 0
28250: PUSH
28251: EMPTY
28252: LIST
28253: LIST
28254: PUSH
28255: LD_INT 0
28257: PUSH
28258: LD_INT 1
28260: NEG
28261: PUSH
28262: EMPTY
28263: LIST
28264: LIST
28265: PUSH
28266: LD_INT 1
28268: PUSH
28269: LD_INT 0
28271: PUSH
28272: EMPTY
28273: LIST
28274: LIST
28275: PUSH
28276: LD_INT 1
28278: PUSH
28279: LD_INT 1
28281: PUSH
28282: EMPTY
28283: LIST
28284: LIST
28285: PUSH
28286: LD_INT 0
28288: PUSH
28289: LD_INT 1
28291: PUSH
28292: EMPTY
28293: LIST
28294: LIST
28295: PUSH
28296: LD_INT 1
28298: NEG
28299: PUSH
28300: LD_INT 0
28302: PUSH
28303: EMPTY
28304: LIST
28305: LIST
28306: PUSH
28307: LD_INT 1
28309: NEG
28310: PUSH
28311: LD_INT 1
28313: NEG
28314: PUSH
28315: EMPTY
28316: LIST
28317: LIST
28318: PUSH
28319: LD_INT 1
28321: NEG
28322: PUSH
28323: LD_INT 2
28325: NEG
28326: PUSH
28327: EMPTY
28328: LIST
28329: LIST
28330: PUSH
28331: LD_INT 1
28333: PUSH
28334: LD_INT 2
28336: PUSH
28337: EMPTY
28338: LIST
28339: LIST
28340: PUSH
28341: EMPTY
28342: LIST
28343: LIST
28344: LIST
28345: LIST
28346: LIST
28347: LIST
28348: LIST
28349: LIST
28350: LIST
28351: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
28352: LD_ADDR_VAR 0 40
28356: PUSH
28357: LD_INT 0
28359: PUSH
28360: LD_INT 0
28362: PUSH
28363: EMPTY
28364: LIST
28365: LIST
28366: PUSH
28367: LD_INT 0
28369: PUSH
28370: LD_INT 1
28372: NEG
28373: PUSH
28374: EMPTY
28375: LIST
28376: LIST
28377: PUSH
28378: LD_INT 1
28380: PUSH
28381: LD_INT 0
28383: PUSH
28384: EMPTY
28385: LIST
28386: LIST
28387: PUSH
28388: LD_INT 1
28390: PUSH
28391: LD_INT 1
28393: PUSH
28394: EMPTY
28395: LIST
28396: LIST
28397: PUSH
28398: LD_INT 0
28400: PUSH
28401: LD_INT 1
28403: PUSH
28404: EMPTY
28405: LIST
28406: LIST
28407: PUSH
28408: LD_INT 1
28410: NEG
28411: PUSH
28412: LD_INT 0
28414: PUSH
28415: EMPTY
28416: LIST
28417: LIST
28418: PUSH
28419: LD_INT 1
28421: NEG
28422: PUSH
28423: LD_INT 1
28425: NEG
28426: PUSH
28427: EMPTY
28428: LIST
28429: LIST
28430: PUSH
28431: LD_INT 1
28433: PUSH
28434: LD_INT 1
28436: NEG
28437: PUSH
28438: EMPTY
28439: LIST
28440: LIST
28441: PUSH
28442: LD_INT 1
28444: NEG
28445: PUSH
28446: LD_INT 1
28448: PUSH
28449: EMPTY
28450: LIST
28451: LIST
28452: PUSH
28453: EMPTY
28454: LIST
28455: LIST
28456: LIST
28457: LIST
28458: LIST
28459: LIST
28460: LIST
28461: LIST
28462: LIST
28463: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
28464: LD_ADDR_VAR 0 41
28468: PUSH
28469: LD_INT 0
28471: PUSH
28472: LD_INT 0
28474: PUSH
28475: EMPTY
28476: LIST
28477: LIST
28478: PUSH
28479: LD_INT 0
28481: PUSH
28482: LD_INT 1
28484: NEG
28485: PUSH
28486: EMPTY
28487: LIST
28488: LIST
28489: PUSH
28490: LD_INT 1
28492: PUSH
28493: LD_INT 0
28495: PUSH
28496: EMPTY
28497: LIST
28498: LIST
28499: PUSH
28500: LD_INT 1
28502: PUSH
28503: LD_INT 1
28505: PUSH
28506: EMPTY
28507: LIST
28508: LIST
28509: PUSH
28510: LD_INT 0
28512: PUSH
28513: LD_INT 1
28515: PUSH
28516: EMPTY
28517: LIST
28518: LIST
28519: PUSH
28520: LD_INT 1
28522: NEG
28523: PUSH
28524: LD_INT 0
28526: PUSH
28527: EMPTY
28528: LIST
28529: LIST
28530: PUSH
28531: LD_INT 1
28533: NEG
28534: PUSH
28535: LD_INT 1
28537: NEG
28538: PUSH
28539: EMPTY
28540: LIST
28541: LIST
28542: PUSH
28543: LD_INT 1
28545: NEG
28546: PUSH
28547: LD_INT 2
28549: NEG
28550: PUSH
28551: EMPTY
28552: LIST
28553: LIST
28554: PUSH
28555: LD_INT 1
28557: PUSH
28558: LD_INT 1
28560: NEG
28561: PUSH
28562: EMPTY
28563: LIST
28564: LIST
28565: PUSH
28566: LD_INT 2
28568: PUSH
28569: LD_INT 0
28571: PUSH
28572: EMPTY
28573: LIST
28574: LIST
28575: PUSH
28576: LD_INT 2
28578: PUSH
28579: LD_INT 1
28581: PUSH
28582: EMPTY
28583: LIST
28584: LIST
28585: PUSH
28586: LD_INT 2
28588: PUSH
28589: LD_INT 2
28591: PUSH
28592: EMPTY
28593: LIST
28594: LIST
28595: PUSH
28596: LD_INT 1
28598: PUSH
28599: LD_INT 2
28601: PUSH
28602: EMPTY
28603: LIST
28604: LIST
28605: PUSH
28606: LD_INT 1
28608: NEG
28609: PUSH
28610: LD_INT 1
28612: PUSH
28613: EMPTY
28614: LIST
28615: LIST
28616: PUSH
28617: LD_INT 2
28619: NEG
28620: PUSH
28621: LD_INT 0
28623: PUSH
28624: EMPTY
28625: LIST
28626: LIST
28627: PUSH
28628: LD_INT 2
28630: NEG
28631: PUSH
28632: LD_INT 1
28634: NEG
28635: PUSH
28636: EMPTY
28637: LIST
28638: LIST
28639: PUSH
28640: LD_INT 2
28642: NEG
28643: PUSH
28644: LD_INT 2
28646: NEG
28647: PUSH
28648: EMPTY
28649: LIST
28650: LIST
28651: PUSH
28652: LD_INT 2
28654: NEG
28655: PUSH
28656: LD_INT 3
28658: NEG
28659: PUSH
28660: EMPTY
28661: LIST
28662: LIST
28663: PUSH
28664: LD_INT 2
28666: PUSH
28667: LD_INT 1
28669: NEG
28670: PUSH
28671: EMPTY
28672: LIST
28673: LIST
28674: PUSH
28675: LD_INT 3
28677: PUSH
28678: LD_INT 0
28680: PUSH
28681: EMPTY
28682: LIST
28683: LIST
28684: PUSH
28685: LD_INT 3
28687: PUSH
28688: LD_INT 1
28690: PUSH
28691: EMPTY
28692: LIST
28693: LIST
28694: PUSH
28695: LD_INT 3
28697: PUSH
28698: LD_INT 2
28700: PUSH
28701: EMPTY
28702: LIST
28703: LIST
28704: PUSH
28705: LD_INT 3
28707: PUSH
28708: LD_INT 3
28710: PUSH
28711: EMPTY
28712: LIST
28713: LIST
28714: PUSH
28715: LD_INT 2
28717: PUSH
28718: LD_INT 3
28720: PUSH
28721: EMPTY
28722: LIST
28723: LIST
28724: PUSH
28725: LD_INT 2
28727: NEG
28728: PUSH
28729: LD_INT 1
28731: PUSH
28732: EMPTY
28733: LIST
28734: LIST
28735: PUSH
28736: LD_INT 3
28738: NEG
28739: PUSH
28740: LD_INT 0
28742: PUSH
28743: EMPTY
28744: LIST
28745: LIST
28746: PUSH
28747: LD_INT 3
28749: NEG
28750: PUSH
28751: LD_INT 1
28753: NEG
28754: PUSH
28755: EMPTY
28756: LIST
28757: LIST
28758: PUSH
28759: LD_INT 3
28761: NEG
28762: PUSH
28763: LD_INT 2
28765: NEG
28766: PUSH
28767: EMPTY
28768: LIST
28769: LIST
28770: PUSH
28771: LD_INT 3
28773: NEG
28774: PUSH
28775: LD_INT 3
28777: NEG
28778: PUSH
28779: EMPTY
28780: LIST
28781: LIST
28782: PUSH
28783: EMPTY
28784: LIST
28785: LIST
28786: LIST
28787: LIST
28788: LIST
28789: LIST
28790: LIST
28791: LIST
28792: LIST
28793: LIST
28794: LIST
28795: LIST
28796: LIST
28797: LIST
28798: LIST
28799: LIST
28800: LIST
28801: LIST
28802: LIST
28803: LIST
28804: LIST
28805: LIST
28806: LIST
28807: LIST
28808: LIST
28809: LIST
28810: LIST
28811: LIST
28812: LIST
28813: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
28814: LD_ADDR_VAR 0 42
28818: PUSH
28819: LD_INT 0
28821: PUSH
28822: LD_INT 0
28824: PUSH
28825: EMPTY
28826: LIST
28827: LIST
28828: PUSH
28829: LD_INT 0
28831: PUSH
28832: LD_INT 1
28834: NEG
28835: PUSH
28836: EMPTY
28837: LIST
28838: LIST
28839: PUSH
28840: LD_INT 1
28842: PUSH
28843: LD_INT 0
28845: PUSH
28846: EMPTY
28847: LIST
28848: LIST
28849: PUSH
28850: LD_INT 1
28852: PUSH
28853: LD_INT 1
28855: PUSH
28856: EMPTY
28857: LIST
28858: LIST
28859: PUSH
28860: LD_INT 0
28862: PUSH
28863: LD_INT 1
28865: PUSH
28866: EMPTY
28867: LIST
28868: LIST
28869: PUSH
28870: LD_INT 1
28872: NEG
28873: PUSH
28874: LD_INT 0
28876: PUSH
28877: EMPTY
28878: LIST
28879: LIST
28880: PUSH
28881: LD_INT 1
28883: NEG
28884: PUSH
28885: LD_INT 1
28887: NEG
28888: PUSH
28889: EMPTY
28890: LIST
28891: LIST
28892: PUSH
28893: LD_INT 1
28895: NEG
28896: PUSH
28897: LD_INT 2
28899: NEG
28900: PUSH
28901: EMPTY
28902: LIST
28903: LIST
28904: PUSH
28905: LD_INT 0
28907: PUSH
28908: LD_INT 2
28910: NEG
28911: PUSH
28912: EMPTY
28913: LIST
28914: LIST
28915: PUSH
28916: LD_INT 1
28918: PUSH
28919: LD_INT 1
28921: NEG
28922: PUSH
28923: EMPTY
28924: LIST
28925: LIST
28926: PUSH
28927: LD_INT 2
28929: PUSH
28930: LD_INT 1
28932: PUSH
28933: EMPTY
28934: LIST
28935: LIST
28936: PUSH
28937: LD_INT 2
28939: PUSH
28940: LD_INT 2
28942: PUSH
28943: EMPTY
28944: LIST
28945: LIST
28946: PUSH
28947: LD_INT 1
28949: PUSH
28950: LD_INT 2
28952: PUSH
28953: EMPTY
28954: LIST
28955: LIST
28956: PUSH
28957: LD_INT 0
28959: PUSH
28960: LD_INT 2
28962: PUSH
28963: EMPTY
28964: LIST
28965: LIST
28966: PUSH
28967: LD_INT 1
28969: NEG
28970: PUSH
28971: LD_INT 1
28973: PUSH
28974: EMPTY
28975: LIST
28976: LIST
28977: PUSH
28978: LD_INT 2
28980: NEG
28981: PUSH
28982: LD_INT 1
28984: NEG
28985: PUSH
28986: EMPTY
28987: LIST
28988: LIST
28989: PUSH
28990: LD_INT 2
28992: NEG
28993: PUSH
28994: LD_INT 2
28996: NEG
28997: PUSH
28998: EMPTY
28999: LIST
29000: LIST
29001: PUSH
29002: LD_INT 2
29004: NEG
29005: PUSH
29006: LD_INT 3
29008: NEG
29009: PUSH
29010: EMPTY
29011: LIST
29012: LIST
29013: PUSH
29014: LD_INT 1
29016: NEG
29017: PUSH
29018: LD_INT 3
29020: NEG
29021: PUSH
29022: EMPTY
29023: LIST
29024: LIST
29025: PUSH
29026: LD_INT 0
29028: PUSH
29029: LD_INT 3
29031: NEG
29032: PUSH
29033: EMPTY
29034: LIST
29035: LIST
29036: PUSH
29037: LD_INT 1
29039: PUSH
29040: LD_INT 2
29042: NEG
29043: PUSH
29044: EMPTY
29045: LIST
29046: LIST
29047: PUSH
29048: LD_INT 3
29050: PUSH
29051: LD_INT 2
29053: PUSH
29054: EMPTY
29055: LIST
29056: LIST
29057: PUSH
29058: LD_INT 3
29060: PUSH
29061: LD_INT 3
29063: PUSH
29064: EMPTY
29065: LIST
29066: LIST
29067: PUSH
29068: LD_INT 2
29070: PUSH
29071: LD_INT 3
29073: PUSH
29074: EMPTY
29075: LIST
29076: LIST
29077: PUSH
29078: LD_INT 1
29080: PUSH
29081: LD_INT 3
29083: PUSH
29084: EMPTY
29085: LIST
29086: LIST
29087: PUSH
29088: LD_INT 0
29090: PUSH
29091: LD_INT 3
29093: PUSH
29094: EMPTY
29095: LIST
29096: LIST
29097: PUSH
29098: LD_INT 1
29100: NEG
29101: PUSH
29102: LD_INT 2
29104: PUSH
29105: EMPTY
29106: LIST
29107: LIST
29108: PUSH
29109: LD_INT 3
29111: NEG
29112: PUSH
29113: LD_INT 2
29115: NEG
29116: PUSH
29117: EMPTY
29118: LIST
29119: LIST
29120: PUSH
29121: LD_INT 3
29123: NEG
29124: PUSH
29125: LD_INT 3
29127: NEG
29128: PUSH
29129: EMPTY
29130: LIST
29131: LIST
29132: PUSH
29133: EMPTY
29134: LIST
29135: LIST
29136: LIST
29137: LIST
29138: LIST
29139: LIST
29140: LIST
29141: LIST
29142: LIST
29143: LIST
29144: LIST
29145: LIST
29146: LIST
29147: LIST
29148: LIST
29149: LIST
29150: LIST
29151: LIST
29152: LIST
29153: LIST
29154: LIST
29155: LIST
29156: LIST
29157: LIST
29158: LIST
29159: LIST
29160: LIST
29161: LIST
29162: LIST
29163: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
29164: LD_ADDR_VAR 0 43
29168: PUSH
29169: LD_INT 0
29171: PUSH
29172: LD_INT 0
29174: PUSH
29175: EMPTY
29176: LIST
29177: LIST
29178: PUSH
29179: LD_INT 0
29181: PUSH
29182: LD_INT 1
29184: NEG
29185: PUSH
29186: EMPTY
29187: LIST
29188: LIST
29189: PUSH
29190: LD_INT 1
29192: PUSH
29193: LD_INT 0
29195: PUSH
29196: EMPTY
29197: LIST
29198: LIST
29199: PUSH
29200: LD_INT 1
29202: PUSH
29203: LD_INT 1
29205: PUSH
29206: EMPTY
29207: LIST
29208: LIST
29209: PUSH
29210: LD_INT 0
29212: PUSH
29213: LD_INT 1
29215: PUSH
29216: EMPTY
29217: LIST
29218: LIST
29219: PUSH
29220: LD_INT 1
29222: NEG
29223: PUSH
29224: LD_INT 0
29226: PUSH
29227: EMPTY
29228: LIST
29229: LIST
29230: PUSH
29231: LD_INT 1
29233: NEG
29234: PUSH
29235: LD_INT 1
29237: NEG
29238: PUSH
29239: EMPTY
29240: LIST
29241: LIST
29242: PUSH
29243: LD_INT 1
29245: NEG
29246: PUSH
29247: LD_INT 2
29249: NEG
29250: PUSH
29251: EMPTY
29252: LIST
29253: LIST
29254: PUSH
29255: LD_INT 0
29257: PUSH
29258: LD_INT 2
29260: NEG
29261: PUSH
29262: EMPTY
29263: LIST
29264: LIST
29265: PUSH
29266: LD_INT 1
29268: PUSH
29269: LD_INT 1
29271: NEG
29272: PUSH
29273: EMPTY
29274: LIST
29275: LIST
29276: PUSH
29277: LD_INT 2
29279: PUSH
29280: LD_INT 0
29282: PUSH
29283: EMPTY
29284: LIST
29285: LIST
29286: PUSH
29287: LD_INT 2
29289: PUSH
29290: LD_INT 1
29292: PUSH
29293: EMPTY
29294: LIST
29295: LIST
29296: PUSH
29297: LD_INT 1
29299: PUSH
29300: LD_INT 2
29302: PUSH
29303: EMPTY
29304: LIST
29305: LIST
29306: PUSH
29307: LD_INT 0
29309: PUSH
29310: LD_INT 2
29312: PUSH
29313: EMPTY
29314: LIST
29315: LIST
29316: PUSH
29317: LD_INT 1
29319: NEG
29320: PUSH
29321: LD_INT 1
29323: PUSH
29324: EMPTY
29325: LIST
29326: LIST
29327: PUSH
29328: LD_INT 2
29330: NEG
29331: PUSH
29332: LD_INT 0
29334: PUSH
29335: EMPTY
29336: LIST
29337: LIST
29338: PUSH
29339: LD_INT 2
29341: NEG
29342: PUSH
29343: LD_INT 1
29345: NEG
29346: PUSH
29347: EMPTY
29348: LIST
29349: LIST
29350: PUSH
29351: LD_INT 1
29353: NEG
29354: PUSH
29355: LD_INT 3
29357: NEG
29358: PUSH
29359: EMPTY
29360: LIST
29361: LIST
29362: PUSH
29363: LD_INT 0
29365: PUSH
29366: LD_INT 3
29368: NEG
29369: PUSH
29370: EMPTY
29371: LIST
29372: LIST
29373: PUSH
29374: LD_INT 1
29376: PUSH
29377: LD_INT 2
29379: NEG
29380: PUSH
29381: EMPTY
29382: LIST
29383: LIST
29384: PUSH
29385: LD_INT 2
29387: PUSH
29388: LD_INT 1
29390: NEG
29391: PUSH
29392: EMPTY
29393: LIST
29394: LIST
29395: PUSH
29396: LD_INT 3
29398: PUSH
29399: LD_INT 0
29401: PUSH
29402: EMPTY
29403: LIST
29404: LIST
29405: PUSH
29406: LD_INT 3
29408: PUSH
29409: LD_INT 1
29411: PUSH
29412: EMPTY
29413: LIST
29414: LIST
29415: PUSH
29416: LD_INT 1
29418: PUSH
29419: LD_INT 3
29421: PUSH
29422: EMPTY
29423: LIST
29424: LIST
29425: PUSH
29426: LD_INT 0
29428: PUSH
29429: LD_INT 3
29431: PUSH
29432: EMPTY
29433: LIST
29434: LIST
29435: PUSH
29436: LD_INT 1
29438: NEG
29439: PUSH
29440: LD_INT 2
29442: PUSH
29443: EMPTY
29444: LIST
29445: LIST
29446: PUSH
29447: LD_INT 2
29449: NEG
29450: PUSH
29451: LD_INT 1
29453: PUSH
29454: EMPTY
29455: LIST
29456: LIST
29457: PUSH
29458: LD_INT 3
29460: NEG
29461: PUSH
29462: LD_INT 0
29464: PUSH
29465: EMPTY
29466: LIST
29467: LIST
29468: PUSH
29469: LD_INT 3
29471: NEG
29472: PUSH
29473: LD_INT 1
29475: NEG
29476: PUSH
29477: EMPTY
29478: LIST
29479: LIST
29480: PUSH
29481: EMPTY
29482: LIST
29483: LIST
29484: LIST
29485: LIST
29486: LIST
29487: LIST
29488: LIST
29489: LIST
29490: LIST
29491: LIST
29492: LIST
29493: LIST
29494: LIST
29495: LIST
29496: LIST
29497: LIST
29498: LIST
29499: LIST
29500: LIST
29501: LIST
29502: LIST
29503: LIST
29504: LIST
29505: LIST
29506: LIST
29507: LIST
29508: LIST
29509: LIST
29510: LIST
29511: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
29512: LD_ADDR_VAR 0 44
29516: PUSH
29517: LD_INT 0
29519: PUSH
29520: LD_INT 0
29522: PUSH
29523: EMPTY
29524: LIST
29525: LIST
29526: PUSH
29527: LD_INT 0
29529: PUSH
29530: LD_INT 1
29532: NEG
29533: PUSH
29534: EMPTY
29535: LIST
29536: LIST
29537: PUSH
29538: LD_INT 1
29540: PUSH
29541: LD_INT 0
29543: PUSH
29544: EMPTY
29545: LIST
29546: LIST
29547: PUSH
29548: LD_INT 1
29550: PUSH
29551: LD_INT 1
29553: PUSH
29554: EMPTY
29555: LIST
29556: LIST
29557: PUSH
29558: LD_INT 0
29560: PUSH
29561: LD_INT 1
29563: PUSH
29564: EMPTY
29565: LIST
29566: LIST
29567: PUSH
29568: LD_INT 1
29570: NEG
29571: PUSH
29572: LD_INT 0
29574: PUSH
29575: EMPTY
29576: LIST
29577: LIST
29578: PUSH
29579: LD_INT 1
29581: NEG
29582: PUSH
29583: LD_INT 1
29585: NEG
29586: PUSH
29587: EMPTY
29588: LIST
29589: LIST
29590: PUSH
29591: LD_INT 1
29593: NEG
29594: PUSH
29595: LD_INT 2
29597: NEG
29598: PUSH
29599: EMPTY
29600: LIST
29601: LIST
29602: PUSH
29603: LD_INT 1
29605: PUSH
29606: LD_INT 1
29608: NEG
29609: PUSH
29610: EMPTY
29611: LIST
29612: LIST
29613: PUSH
29614: LD_INT 2
29616: PUSH
29617: LD_INT 0
29619: PUSH
29620: EMPTY
29621: LIST
29622: LIST
29623: PUSH
29624: LD_INT 2
29626: PUSH
29627: LD_INT 1
29629: PUSH
29630: EMPTY
29631: LIST
29632: LIST
29633: PUSH
29634: LD_INT 2
29636: PUSH
29637: LD_INT 2
29639: PUSH
29640: EMPTY
29641: LIST
29642: LIST
29643: PUSH
29644: LD_INT 1
29646: PUSH
29647: LD_INT 2
29649: PUSH
29650: EMPTY
29651: LIST
29652: LIST
29653: PUSH
29654: LD_INT 1
29656: NEG
29657: PUSH
29658: LD_INT 1
29660: PUSH
29661: EMPTY
29662: LIST
29663: LIST
29664: PUSH
29665: LD_INT 2
29667: NEG
29668: PUSH
29669: LD_INT 0
29671: PUSH
29672: EMPTY
29673: LIST
29674: LIST
29675: PUSH
29676: LD_INT 2
29678: NEG
29679: PUSH
29680: LD_INT 1
29682: NEG
29683: PUSH
29684: EMPTY
29685: LIST
29686: LIST
29687: PUSH
29688: LD_INT 2
29690: NEG
29691: PUSH
29692: LD_INT 2
29694: NEG
29695: PUSH
29696: EMPTY
29697: LIST
29698: LIST
29699: PUSH
29700: LD_INT 2
29702: NEG
29703: PUSH
29704: LD_INT 3
29706: NEG
29707: PUSH
29708: EMPTY
29709: LIST
29710: LIST
29711: PUSH
29712: LD_INT 2
29714: PUSH
29715: LD_INT 1
29717: NEG
29718: PUSH
29719: EMPTY
29720: LIST
29721: LIST
29722: PUSH
29723: LD_INT 3
29725: PUSH
29726: LD_INT 0
29728: PUSH
29729: EMPTY
29730: LIST
29731: LIST
29732: PUSH
29733: LD_INT 3
29735: PUSH
29736: LD_INT 1
29738: PUSH
29739: EMPTY
29740: LIST
29741: LIST
29742: PUSH
29743: LD_INT 3
29745: PUSH
29746: LD_INT 2
29748: PUSH
29749: EMPTY
29750: LIST
29751: LIST
29752: PUSH
29753: LD_INT 3
29755: PUSH
29756: LD_INT 3
29758: PUSH
29759: EMPTY
29760: LIST
29761: LIST
29762: PUSH
29763: LD_INT 2
29765: PUSH
29766: LD_INT 3
29768: PUSH
29769: EMPTY
29770: LIST
29771: LIST
29772: PUSH
29773: LD_INT 2
29775: NEG
29776: PUSH
29777: LD_INT 1
29779: PUSH
29780: EMPTY
29781: LIST
29782: LIST
29783: PUSH
29784: LD_INT 3
29786: NEG
29787: PUSH
29788: LD_INT 0
29790: PUSH
29791: EMPTY
29792: LIST
29793: LIST
29794: PUSH
29795: LD_INT 3
29797: NEG
29798: PUSH
29799: LD_INT 1
29801: NEG
29802: PUSH
29803: EMPTY
29804: LIST
29805: LIST
29806: PUSH
29807: LD_INT 3
29809: NEG
29810: PUSH
29811: LD_INT 2
29813: NEG
29814: PUSH
29815: EMPTY
29816: LIST
29817: LIST
29818: PUSH
29819: LD_INT 3
29821: NEG
29822: PUSH
29823: LD_INT 3
29825: NEG
29826: PUSH
29827: EMPTY
29828: LIST
29829: LIST
29830: PUSH
29831: EMPTY
29832: LIST
29833: LIST
29834: LIST
29835: LIST
29836: LIST
29837: LIST
29838: LIST
29839: LIST
29840: LIST
29841: LIST
29842: LIST
29843: LIST
29844: LIST
29845: LIST
29846: LIST
29847: LIST
29848: LIST
29849: LIST
29850: LIST
29851: LIST
29852: LIST
29853: LIST
29854: LIST
29855: LIST
29856: LIST
29857: LIST
29858: LIST
29859: LIST
29860: LIST
29861: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
29862: LD_ADDR_VAR 0 45
29866: PUSH
29867: LD_INT 0
29869: PUSH
29870: LD_INT 0
29872: PUSH
29873: EMPTY
29874: LIST
29875: LIST
29876: PUSH
29877: LD_INT 0
29879: PUSH
29880: LD_INT 1
29882: NEG
29883: PUSH
29884: EMPTY
29885: LIST
29886: LIST
29887: PUSH
29888: LD_INT 1
29890: PUSH
29891: LD_INT 0
29893: PUSH
29894: EMPTY
29895: LIST
29896: LIST
29897: PUSH
29898: LD_INT 1
29900: PUSH
29901: LD_INT 1
29903: PUSH
29904: EMPTY
29905: LIST
29906: LIST
29907: PUSH
29908: LD_INT 0
29910: PUSH
29911: LD_INT 1
29913: PUSH
29914: EMPTY
29915: LIST
29916: LIST
29917: PUSH
29918: LD_INT 1
29920: NEG
29921: PUSH
29922: LD_INT 0
29924: PUSH
29925: EMPTY
29926: LIST
29927: LIST
29928: PUSH
29929: LD_INT 1
29931: NEG
29932: PUSH
29933: LD_INT 1
29935: NEG
29936: PUSH
29937: EMPTY
29938: LIST
29939: LIST
29940: PUSH
29941: LD_INT 1
29943: NEG
29944: PUSH
29945: LD_INT 2
29947: NEG
29948: PUSH
29949: EMPTY
29950: LIST
29951: LIST
29952: PUSH
29953: LD_INT 0
29955: PUSH
29956: LD_INT 2
29958: NEG
29959: PUSH
29960: EMPTY
29961: LIST
29962: LIST
29963: PUSH
29964: LD_INT 1
29966: PUSH
29967: LD_INT 1
29969: NEG
29970: PUSH
29971: EMPTY
29972: LIST
29973: LIST
29974: PUSH
29975: LD_INT 2
29977: PUSH
29978: LD_INT 1
29980: PUSH
29981: EMPTY
29982: LIST
29983: LIST
29984: PUSH
29985: LD_INT 2
29987: PUSH
29988: LD_INT 2
29990: PUSH
29991: EMPTY
29992: LIST
29993: LIST
29994: PUSH
29995: LD_INT 1
29997: PUSH
29998: LD_INT 2
30000: PUSH
30001: EMPTY
30002: LIST
30003: LIST
30004: PUSH
30005: LD_INT 0
30007: PUSH
30008: LD_INT 2
30010: PUSH
30011: EMPTY
30012: LIST
30013: LIST
30014: PUSH
30015: LD_INT 1
30017: NEG
30018: PUSH
30019: LD_INT 1
30021: PUSH
30022: EMPTY
30023: LIST
30024: LIST
30025: PUSH
30026: LD_INT 2
30028: NEG
30029: PUSH
30030: LD_INT 1
30032: NEG
30033: PUSH
30034: EMPTY
30035: LIST
30036: LIST
30037: PUSH
30038: LD_INT 2
30040: NEG
30041: PUSH
30042: LD_INT 2
30044: NEG
30045: PUSH
30046: EMPTY
30047: LIST
30048: LIST
30049: PUSH
30050: LD_INT 2
30052: NEG
30053: PUSH
30054: LD_INT 3
30056: NEG
30057: PUSH
30058: EMPTY
30059: LIST
30060: LIST
30061: PUSH
30062: LD_INT 1
30064: NEG
30065: PUSH
30066: LD_INT 3
30068: NEG
30069: PUSH
30070: EMPTY
30071: LIST
30072: LIST
30073: PUSH
30074: LD_INT 0
30076: PUSH
30077: LD_INT 3
30079: NEG
30080: PUSH
30081: EMPTY
30082: LIST
30083: LIST
30084: PUSH
30085: LD_INT 1
30087: PUSH
30088: LD_INT 2
30090: NEG
30091: PUSH
30092: EMPTY
30093: LIST
30094: LIST
30095: PUSH
30096: LD_INT 3
30098: PUSH
30099: LD_INT 2
30101: PUSH
30102: EMPTY
30103: LIST
30104: LIST
30105: PUSH
30106: LD_INT 3
30108: PUSH
30109: LD_INT 3
30111: PUSH
30112: EMPTY
30113: LIST
30114: LIST
30115: PUSH
30116: LD_INT 2
30118: PUSH
30119: LD_INT 3
30121: PUSH
30122: EMPTY
30123: LIST
30124: LIST
30125: PUSH
30126: LD_INT 1
30128: PUSH
30129: LD_INT 3
30131: PUSH
30132: EMPTY
30133: LIST
30134: LIST
30135: PUSH
30136: LD_INT 0
30138: PUSH
30139: LD_INT 3
30141: PUSH
30142: EMPTY
30143: LIST
30144: LIST
30145: PUSH
30146: LD_INT 1
30148: NEG
30149: PUSH
30150: LD_INT 2
30152: PUSH
30153: EMPTY
30154: LIST
30155: LIST
30156: PUSH
30157: LD_INT 3
30159: NEG
30160: PUSH
30161: LD_INT 2
30163: NEG
30164: PUSH
30165: EMPTY
30166: LIST
30167: LIST
30168: PUSH
30169: LD_INT 3
30171: NEG
30172: PUSH
30173: LD_INT 3
30175: NEG
30176: PUSH
30177: EMPTY
30178: LIST
30179: LIST
30180: PUSH
30181: EMPTY
30182: LIST
30183: LIST
30184: LIST
30185: LIST
30186: LIST
30187: LIST
30188: LIST
30189: LIST
30190: LIST
30191: LIST
30192: LIST
30193: LIST
30194: LIST
30195: LIST
30196: LIST
30197: LIST
30198: LIST
30199: LIST
30200: LIST
30201: LIST
30202: LIST
30203: LIST
30204: LIST
30205: LIST
30206: LIST
30207: LIST
30208: LIST
30209: LIST
30210: LIST
30211: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
30212: LD_ADDR_VAR 0 46
30216: PUSH
30217: LD_INT 0
30219: PUSH
30220: LD_INT 0
30222: PUSH
30223: EMPTY
30224: LIST
30225: LIST
30226: PUSH
30227: LD_INT 0
30229: PUSH
30230: LD_INT 1
30232: NEG
30233: PUSH
30234: EMPTY
30235: LIST
30236: LIST
30237: PUSH
30238: LD_INT 1
30240: PUSH
30241: LD_INT 0
30243: PUSH
30244: EMPTY
30245: LIST
30246: LIST
30247: PUSH
30248: LD_INT 1
30250: PUSH
30251: LD_INT 1
30253: PUSH
30254: EMPTY
30255: LIST
30256: LIST
30257: PUSH
30258: LD_INT 0
30260: PUSH
30261: LD_INT 1
30263: PUSH
30264: EMPTY
30265: LIST
30266: LIST
30267: PUSH
30268: LD_INT 1
30270: NEG
30271: PUSH
30272: LD_INT 0
30274: PUSH
30275: EMPTY
30276: LIST
30277: LIST
30278: PUSH
30279: LD_INT 1
30281: NEG
30282: PUSH
30283: LD_INT 1
30285: NEG
30286: PUSH
30287: EMPTY
30288: LIST
30289: LIST
30290: PUSH
30291: LD_INT 1
30293: NEG
30294: PUSH
30295: LD_INT 2
30297: NEG
30298: PUSH
30299: EMPTY
30300: LIST
30301: LIST
30302: PUSH
30303: LD_INT 0
30305: PUSH
30306: LD_INT 2
30308: NEG
30309: PUSH
30310: EMPTY
30311: LIST
30312: LIST
30313: PUSH
30314: LD_INT 1
30316: PUSH
30317: LD_INT 1
30319: NEG
30320: PUSH
30321: EMPTY
30322: LIST
30323: LIST
30324: PUSH
30325: LD_INT 2
30327: PUSH
30328: LD_INT 0
30330: PUSH
30331: EMPTY
30332: LIST
30333: LIST
30334: PUSH
30335: LD_INT 2
30337: PUSH
30338: LD_INT 1
30340: PUSH
30341: EMPTY
30342: LIST
30343: LIST
30344: PUSH
30345: LD_INT 1
30347: PUSH
30348: LD_INT 2
30350: PUSH
30351: EMPTY
30352: LIST
30353: LIST
30354: PUSH
30355: LD_INT 0
30357: PUSH
30358: LD_INT 2
30360: PUSH
30361: EMPTY
30362: LIST
30363: LIST
30364: PUSH
30365: LD_INT 1
30367: NEG
30368: PUSH
30369: LD_INT 1
30371: PUSH
30372: EMPTY
30373: LIST
30374: LIST
30375: PUSH
30376: LD_INT 2
30378: NEG
30379: PUSH
30380: LD_INT 0
30382: PUSH
30383: EMPTY
30384: LIST
30385: LIST
30386: PUSH
30387: LD_INT 2
30389: NEG
30390: PUSH
30391: LD_INT 1
30393: NEG
30394: PUSH
30395: EMPTY
30396: LIST
30397: LIST
30398: PUSH
30399: LD_INT 1
30401: NEG
30402: PUSH
30403: LD_INT 3
30405: NEG
30406: PUSH
30407: EMPTY
30408: LIST
30409: LIST
30410: PUSH
30411: LD_INT 0
30413: PUSH
30414: LD_INT 3
30416: NEG
30417: PUSH
30418: EMPTY
30419: LIST
30420: LIST
30421: PUSH
30422: LD_INT 1
30424: PUSH
30425: LD_INT 2
30427: NEG
30428: PUSH
30429: EMPTY
30430: LIST
30431: LIST
30432: PUSH
30433: LD_INT 2
30435: PUSH
30436: LD_INT 1
30438: NEG
30439: PUSH
30440: EMPTY
30441: LIST
30442: LIST
30443: PUSH
30444: LD_INT 3
30446: PUSH
30447: LD_INT 0
30449: PUSH
30450: EMPTY
30451: LIST
30452: LIST
30453: PUSH
30454: LD_INT 3
30456: PUSH
30457: LD_INT 1
30459: PUSH
30460: EMPTY
30461: LIST
30462: LIST
30463: PUSH
30464: LD_INT 1
30466: PUSH
30467: LD_INT 3
30469: PUSH
30470: EMPTY
30471: LIST
30472: LIST
30473: PUSH
30474: LD_INT 0
30476: PUSH
30477: LD_INT 3
30479: PUSH
30480: EMPTY
30481: LIST
30482: LIST
30483: PUSH
30484: LD_INT 1
30486: NEG
30487: PUSH
30488: LD_INT 2
30490: PUSH
30491: EMPTY
30492: LIST
30493: LIST
30494: PUSH
30495: LD_INT 2
30497: NEG
30498: PUSH
30499: LD_INT 1
30501: PUSH
30502: EMPTY
30503: LIST
30504: LIST
30505: PUSH
30506: LD_INT 3
30508: NEG
30509: PUSH
30510: LD_INT 0
30512: PUSH
30513: EMPTY
30514: LIST
30515: LIST
30516: PUSH
30517: LD_INT 3
30519: NEG
30520: PUSH
30521: LD_INT 1
30523: NEG
30524: PUSH
30525: EMPTY
30526: LIST
30527: LIST
30528: PUSH
30529: EMPTY
30530: LIST
30531: LIST
30532: LIST
30533: LIST
30534: LIST
30535: LIST
30536: LIST
30537: LIST
30538: LIST
30539: LIST
30540: LIST
30541: LIST
30542: LIST
30543: LIST
30544: LIST
30545: LIST
30546: LIST
30547: LIST
30548: LIST
30549: LIST
30550: LIST
30551: LIST
30552: LIST
30553: LIST
30554: LIST
30555: LIST
30556: LIST
30557: LIST
30558: LIST
30559: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
30560: LD_ADDR_VAR 0 47
30564: PUSH
30565: LD_INT 0
30567: PUSH
30568: LD_INT 0
30570: PUSH
30571: EMPTY
30572: LIST
30573: LIST
30574: PUSH
30575: LD_INT 0
30577: PUSH
30578: LD_INT 1
30580: NEG
30581: PUSH
30582: EMPTY
30583: LIST
30584: LIST
30585: PUSH
30586: LD_INT 1
30588: PUSH
30589: LD_INT 0
30591: PUSH
30592: EMPTY
30593: LIST
30594: LIST
30595: PUSH
30596: LD_INT 1
30598: PUSH
30599: LD_INT 1
30601: PUSH
30602: EMPTY
30603: LIST
30604: LIST
30605: PUSH
30606: LD_INT 0
30608: PUSH
30609: LD_INT 1
30611: PUSH
30612: EMPTY
30613: LIST
30614: LIST
30615: PUSH
30616: LD_INT 1
30618: NEG
30619: PUSH
30620: LD_INT 0
30622: PUSH
30623: EMPTY
30624: LIST
30625: LIST
30626: PUSH
30627: LD_INT 1
30629: NEG
30630: PUSH
30631: LD_INT 1
30633: NEG
30634: PUSH
30635: EMPTY
30636: LIST
30637: LIST
30638: PUSH
30639: LD_INT 1
30641: NEG
30642: PUSH
30643: LD_INT 2
30645: NEG
30646: PUSH
30647: EMPTY
30648: LIST
30649: LIST
30650: PUSH
30651: LD_INT 0
30653: PUSH
30654: LD_INT 2
30656: NEG
30657: PUSH
30658: EMPTY
30659: LIST
30660: LIST
30661: PUSH
30662: LD_INT 1
30664: PUSH
30665: LD_INT 1
30667: NEG
30668: PUSH
30669: EMPTY
30670: LIST
30671: LIST
30672: PUSH
30673: LD_INT 2
30675: NEG
30676: PUSH
30677: LD_INT 1
30679: NEG
30680: PUSH
30681: EMPTY
30682: LIST
30683: LIST
30684: PUSH
30685: LD_INT 2
30687: NEG
30688: PUSH
30689: LD_INT 2
30691: NEG
30692: PUSH
30693: EMPTY
30694: LIST
30695: LIST
30696: PUSH
30697: EMPTY
30698: LIST
30699: LIST
30700: LIST
30701: LIST
30702: LIST
30703: LIST
30704: LIST
30705: LIST
30706: LIST
30707: LIST
30708: LIST
30709: LIST
30710: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
30711: LD_ADDR_VAR 0 48
30715: PUSH
30716: LD_INT 0
30718: PUSH
30719: LD_INT 0
30721: PUSH
30722: EMPTY
30723: LIST
30724: LIST
30725: PUSH
30726: LD_INT 0
30728: PUSH
30729: LD_INT 1
30731: NEG
30732: PUSH
30733: EMPTY
30734: LIST
30735: LIST
30736: PUSH
30737: LD_INT 1
30739: PUSH
30740: LD_INT 0
30742: PUSH
30743: EMPTY
30744: LIST
30745: LIST
30746: PUSH
30747: LD_INT 1
30749: PUSH
30750: LD_INT 1
30752: PUSH
30753: EMPTY
30754: LIST
30755: LIST
30756: PUSH
30757: LD_INT 0
30759: PUSH
30760: LD_INT 1
30762: PUSH
30763: EMPTY
30764: LIST
30765: LIST
30766: PUSH
30767: LD_INT 1
30769: NEG
30770: PUSH
30771: LD_INT 0
30773: PUSH
30774: EMPTY
30775: LIST
30776: LIST
30777: PUSH
30778: LD_INT 1
30780: NEG
30781: PUSH
30782: LD_INT 1
30784: NEG
30785: PUSH
30786: EMPTY
30787: LIST
30788: LIST
30789: PUSH
30790: LD_INT 1
30792: NEG
30793: PUSH
30794: LD_INT 2
30796: NEG
30797: PUSH
30798: EMPTY
30799: LIST
30800: LIST
30801: PUSH
30802: LD_INT 0
30804: PUSH
30805: LD_INT 2
30807: NEG
30808: PUSH
30809: EMPTY
30810: LIST
30811: LIST
30812: PUSH
30813: LD_INT 1
30815: PUSH
30816: LD_INT 1
30818: NEG
30819: PUSH
30820: EMPTY
30821: LIST
30822: LIST
30823: PUSH
30824: LD_INT 2
30826: PUSH
30827: LD_INT 0
30829: PUSH
30830: EMPTY
30831: LIST
30832: LIST
30833: PUSH
30834: LD_INT 2
30836: PUSH
30837: LD_INT 1
30839: PUSH
30840: EMPTY
30841: LIST
30842: LIST
30843: PUSH
30844: EMPTY
30845: LIST
30846: LIST
30847: LIST
30848: LIST
30849: LIST
30850: LIST
30851: LIST
30852: LIST
30853: LIST
30854: LIST
30855: LIST
30856: LIST
30857: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
30858: LD_ADDR_VAR 0 49
30862: PUSH
30863: LD_INT 0
30865: PUSH
30866: LD_INT 0
30868: PUSH
30869: EMPTY
30870: LIST
30871: LIST
30872: PUSH
30873: LD_INT 0
30875: PUSH
30876: LD_INT 1
30878: NEG
30879: PUSH
30880: EMPTY
30881: LIST
30882: LIST
30883: PUSH
30884: LD_INT 1
30886: PUSH
30887: LD_INT 0
30889: PUSH
30890: EMPTY
30891: LIST
30892: LIST
30893: PUSH
30894: LD_INT 1
30896: PUSH
30897: LD_INT 1
30899: PUSH
30900: EMPTY
30901: LIST
30902: LIST
30903: PUSH
30904: LD_INT 0
30906: PUSH
30907: LD_INT 1
30909: PUSH
30910: EMPTY
30911: LIST
30912: LIST
30913: PUSH
30914: LD_INT 1
30916: NEG
30917: PUSH
30918: LD_INT 0
30920: PUSH
30921: EMPTY
30922: LIST
30923: LIST
30924: PUSH
30925: LD_INT 1
30927: NEG
30928: PUSH
30929: LD_INT 1
30931: NEG
30932: PUSH
30933: EMPTY
30934: LIST
30935: LIST
30936: PUSH
30937: LD_INT 1
30939: PUSH
30940: LD_INT 1
30942: NEG
30943: PUSH
30944: EMPTY
30945: LIST
30946: LIST
30947: PUSH
30948: LD_INT 2
30950: PUSH
30951: LD_INT 0
30953: PUSH
30954: EMPTY
30955: LIST
30956: LIST
30957: PUSH
30958: LD_INT 2
30960: PUSH
30961: LD_INT 1
30963: PUSH
30964: EMPTY
30965: LIST
30966: LIST
30967: PUSH
30968: LD_INT 2
30970: PUSH
30971: LD_INT 2
30973: PUSH
30974: EMPTY
30975: LIST
30976: LIST
30977: PUSH
30978: LD_INT 1
30980: PUSH
30981: LD_INT 2
30983: PUSH
30984: EMPTY
30985: LIST
30986: LIST
30987: PUSH
30988: EMPTY
30989: LIST
30990: LIST
30991: LIST
30992: LIST
30993: LIST
30994: LIST
30995: LIST
30996: LIST
30997: LIST
30998: LIST
30999: LIST
31000: LIST
31001: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
31002: LD_ADDR_VAR 0 50
31006: PUSH
31007: LD_INT 0
31009: PUSH
31010: LD_INT 0
31012: PUSH
31013: EMPTY
31014: LIST
31015: LIST
31016: PUSH
31017: LD_INT 0
31019: PUSH
31020: LD_INT 1
31022: NEG
31023: PUSH
31024: EMPTY
31025: LIST
31026: LIST
31027: PUSH
31028: LD_INT 1
31030: PUSH
31031: LD_INT 0
31033: PUSH
31034: EMPTY
31035: LIST
31036: LIST
31037: PUSH
31038: LD_INT 1
31040: PUSH
31041: LD_INT 1
31043: PUSH
31044: EMPTY
31045: LIST
31046: LIST
31047: PUSH
31048: LD_INT 0
31050: PUSH
31051: LD_INT 1
31053: PUSH
31054: EMPTY
31055: LIST
31056: LIST
31057: PUSH
31058: LD_INT 1
31060: NEG
31061: PUSH
31062: LD_INT 0
31064: PUSH
31065: EMPTY
31066: LIST
31067: LIST
31068: PUSH
31069: LD_INT 1
31071: NEG
31072: PUSH
31073: LD_INT 1
31075: NEG
31076: PUSH
31077: EMPTY
31078: LIST
31079: LIST
31080: PUSH
31081: LD_INT 2
31083: PUSH
31084: LD_INT 1
31086: PUSH
31087: EMPTY
31088: LIST
31089: LIST
31090: PUSH
31091: LD_INT 2
31093: PUSH
31094: LD_INT 2
31096: PUSH
31097: EMPTY
31098: LIST
31099: LIST
31100: PUSH
31101: LD_INT 1
31103: PUSH
31104: LD_INT 2
31106: PUSH
31107: EMPTY
31108: LIST
31109: LIST
31110: PUSH
31111: LD_INT 0
31113: PUSH
31114: LD_INT 2
31116: PUSH
31117: EMPTY
31118: LIST
31119: LIST
31120: PUSH
31121: LD_INT 1
31123: NEG
31124: PUSH
31125: LD_INT 1
31127: PUSH
31128: EMPTY
31129: LIST
31130: LIST
31131: PUSH
31132: EMPTY
31133: LIST
31134: LIST
31135: LIST
31136: LIST
31137: LIST
31138: LIST
31139: LIST
31140: LIST
31141: LIST
31142: LIST
31143: LIST
31144: LIST
31145: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
31146: LD_ADDR_VAR 0 51
31150: PUSH
31151: LD_INT 0
31153: PUSH
31154: LD_INT 0
31156: PUSH
31157: EMPTY
31158: LIST
31159: LIST
31160: PUSH
31161: LD_INT 0
31163: PUSH
31164: LD_INT 1
31166: NEG
31167: PUSH
31168: EMPTY
31169: LIST
31170: LIST
31171: PUSH
31172: LD_INT 1
31174: PUSH
31175: LD_INT 0
31177: PUSH
31178: EMPTY
31179: LIST
31180: LIST
31181: PUSH
31182: LD_INT 1
31184: PUSH
31185: LD_INT 1
31187: PUSH
31188: EMPTY
31189: LIST
31190: LIST
31191: PUSH
31192: LD_INT 0
31194: PUSH
31195: LD_INT 1
31197: PUSH
31198: EMPTY
31199: LIST
31200: LIST
31201: PUSH
31202: LD_INT 1
31204: NEG
31205: PUSH
31206: LD_INT 0
31208: PUSH
31209: EMPTY
31210: LIST
31211: LIST
31212: PUSH
31213: LD_INT 1
31215: NEG
31216: PUSH
31217: LD_INT 1
31219: NEG
31220: PUSH
31221: EMPTY
31222: LIST
31223: LIST
31224: PUSH
31225: LD_INT 1
31227: PUSH
31228: LD_INT 2
31230: PUSH
31231: EMPTY
31232: LIST
31233: LIST
31234: PUSH
31235: LD_INT 0
31237: PUSH
31238: LD_INT 2
31240: PUSH
31241: EMPTY
31242: LIST
31243: LIST
31244: PUSH
31245: LD_INT 1
31247: NEG
31248: PUSH
31249: LD_INT 1
31251: PUSH
31252: EMPTY
31253: LIST
31254: LIST
31255: PUSH
31256: LD_INT 2
31258: NEG
31259: PUSH
31260: LD_INT 0
31262: PUSH
31263: EMPTY
31264: LIST
31265: LIST
31266: PUSH
31267: LD_INT 2
31269: NEG
31270: PUSH
31271: LD_INT 1
31273: NEG
31274: PUSH
31275: EMPTY
31276: LIST
31277: LIST
31278: PUSH
31279: EMPTY
31280: LIST
31281: LIST
31282: LIST
31283: LIST
31284: LIST
31285: LIST
31286: LIST
31287: LIST
31288: LIST
31289: LIST
31290: LIST
31291: LIST
31292: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31293: LD_ADDR_VAR 0 52
31297: PUSH
31298: LD_INT 0
31300: PUSH
31301: LD_INT 0
31303: PUSH
31304: EMPTY
31305: LIST
31306: LIST
31307: PUSH
31308: LD_INT 0
31310: PUSH
31311: LD_INT 1
31313: NEG
31314: PUSH
31315: EMPTY
31316: LIST
31317: LIST
31318: PUSH
31319: LD_INT 1
31321: PUSH
31322: LD_INT 0
31324: PUSH
31325: EMPTY
31326: LIST
31327: LIST
31328: PUSH
31329: LD_INT 1
31331: PUSH
31332: LD_INT 1
31334: PUSH
31335: EMPTY
31336: LIST
31337: LIST
31338: PUSH
31339: LD_INT 0
31341: PUSH
31342: LD_INT 1
31344: PUSH
31345: EMPTY
31346: LIST
31347: LIST
31348: PUSH
31349: LD_INT 1
31351: NEG
31352: PUSH
31353: LD_INT 0
31355: PUSH
31356: EMPTY
31357: LIST
31358: LIST
31359: PUSH
31360: LD_INT 1
31362: NEG
31363: PUSH
31364: LD_INT 1
31366: NEG
31367: PUSH
31368: EMPTY
31369: LIST
31370: LIST
31371: PUSH
31372: LD_INT 1
31374: NEG
31375: PUSH
31376: LD_INT 2
31378: NEG
31379: PUSH
31380: EMPTY
31381: LIST
31382: LIST
31383: PUSH
31384: LD_INT 1
31386: NEG
31387: PUSH
31388: LD_INT 1
31390: PUSH
31391: EMPTY
31392: LIST
31393: LIST
31394: PUSH
31395: LD_INT 2
31397: NEG
31398: PUSH
31399: LD_INT 0
31401: PUSH
31402: EMPTY
31403: LIST
31404: LIST
31405: PUSH
31406: LD_INT 2
31408: NEG
31409: PUSH
31410: LD_INT 1
31412: NEG
31413: PUSH
31414: EMPTY
31415: LIST
31416: LIST
31417: PUSH
31418: LD_INT 2
31420: NEG
31421: PUSH
31422: LD_INT 2
31424: NEG
31425: PUSH
31426: EMPTY
31427: LIST
31428: LIST
31429: PUSH
31430: EMPTY
31431: LIST
31432: LIST
31433: LIST
31434: LIST
31435: LIST
31436: LIST
31437: LIST
31438: LIST
31439: LIST
31440: LIST
31441: LIST
31442: LIST
31443: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31444: LD_ADDR_VAR 0 53
31448: PUSH
31449: LD_INT 0
31451: PUSH
31452: LD_INT 0
31454: PUSH
31455: EMPTY
31456: LIST
31457: LIST
31458: PUSH
31459: LD_INT 0
31461: PUSH
31462: LD_INT 1
31464: NEG
31465: PUSH
31466: EMPTY
31467: LIST
31468: LIST
31469: PUSH
31470: LD_INT 1
31472: PUSH
31473: LD_INT 0
31475: PUSH
31476: EMPTY
31477: LIST
31478: LIST
31479: PUSH
31480: LD_INT 1
31482: PUSH
31483: LD_INT 1
31485: PUSH
31486: EMPTY
31487: LIST
31488: LIST
31489: PUSH
31490: LD_INT 0
31492: PUSH
31493: LD_INT 1
31495: PUSH
31496: EMPTY
31497: LIST
31498: LIST
31499: PUSH
31500: LD_INT 1
31502: NEG
31503: PUSH
31504: LD_INT 0
31506: PUSH
31507: EMPTY
31508: LIST
31509: LIST
31510: PUSH
31511: LD_INT 1
31513: NEG
31514: PUSH
31515: LD_INT 1
31517: NEG
31518: PUSH
31519: EMPTY
31520: LIST
31521: LIST
31522: PUSH
31523: LD_INT 1
31525: NEG
31526: PUSH
31527: LD_INT 2
31529: NEG
31530: PUSH
31531: EMPTY
31532: LIST
31533: LIST
31534: PUSH
31535: LD_INT 0
31537: PUSH
31538: LD_INT 2
31540: NEG
31541: PUSH
31542: EMPTY
31543: LIST
31544: LIST
31545: PUSH
31546: LD_INT 1
31548: PUSH
31549: LD_INT 1
31551: NEG
31552: PUSH
31553: EMPTY
31554: LIST
31555: LIST
31556: PUSH
31557: LD_INT 2
31559: PUSH
31560: LD_INT 0
31562: PUSH
31563: EMPTY
31564: LIST
31565: LIST
31566: PUSH
31567: LD_INT 2
31569: PUSH
31570: LD_INT 1
31572: PUSH
31573: EMPTY
31574: LIST
31575: LIST
31576: PUSH
31577: LD_INT 2
31579: PUSH
31580: LD_INT 2
31582: PUSH
31583: EMPTY
31584: LIST
31585: LIST
31586: PUSH
31587: LD_INT 1
31589: PUSH
31590: LD_INT 2
31592: PUSH
31593: EMPTY
31594: LIST
31595: LIST
31596: PUSH
31597: LD_INT 0
31599: PUSH
31600: LD_INT 2
31602: PUSH
31603: EMPTY
31604: LIST
31605: LIST
31606: PUSH
31607: LD_INT 1
31609: NEG
31610: PUSH
31611: LD_INT 1
31613: PUSH
31614: EMPTY
31615: LIST
31616: LIST
31617: PUSH
31618: LD_INT 2
31620: NEG
31621: PUSH
31622: LD_INT 0
31624: PUSH
31625: EMPTY
31626: LIST
31627: LIST
31628: PUSH
31629: LD_INT 2
31631: NEG
31632: PUSH
31633: LD_INT 1
31635: NEG
31636: PUSH
31637: EMPTY
31638: LIST
31639: LIST
31640: PUSH
31641: LD_INT 2
31643: NEG
31644: PUSH
31645: LD_INT 2
31647: NEG
31648: PUSH
31649: EMPTY
31650: LIST
31651: LIST
31652: PUSH
31653: EMPTY
31654: LIST
31655: LIST
31656: LIST
31657: LIST
31658: LIST
31659: LIST
31660: LIST
31661: LIST
31662: LIST
31663: LIST
31664: LIST
31665: LIST
31666: LIST
31667: LIST
31668: LIST
31669: LIST
31670: LIST
31671: LIST
31672: LIST
31673: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31674: LD_ADDR_VAR 0 54
31678: PUSH
31679: LD_INT 0
31681: PUSH
31682: LD_INT 0
31684: PUSH
31685: EMPTY
31686: LIST
31687: LIST
31688: PUSH
31689: LD_INT 0
31691: PUSH
31692: LD_INT 1
31694: NEG
31695: PUSH
31696: EMPTY
31697: LIST
31698: LIST
31699: PUSH
31700: LD_INT 1
31702: PUSH
31703: LD_INT 0
31705: PUSH
31706: EMPTY
31707: LIST
31708: LIST
31709: PUSH
31710: LD_INT 1
31712: PUSH
31713: LD_INT 1
31715: PUSH
31716: EMPTY
31717: LIST
31718: LIST
31719: PUSH
31720: LD_INT 0
31722: PUSH
31723: LD_INT 1
31725: PUSH
31726: EMPTY
31727: LIST
31728: LIST
31729: PUSH
31730: LD_INT 1
31732: NEG
31733: PUSH
31734: LD_INT 0
31736: PUSH
31737: EMPTY
31738: LIST
31739: LIST
31740: PUSH
31741: LD_INT 1
31743: NEG
31744: PUSH
31745: LD_INT 1
31747: NEG
31748: PUSH
31749: EMPTY
31750: LIST
31751: LIST
31752: PUSH
31753: LD_INT 1
31755: NEG
31756: PUSH
31757: LD_INT 2
31759: NEG
31760: PUSH
31761: EMPTY
31762: LIST
31763: LIST
31764: PUSH
31765: LD_INT 0
31767: PUSH
31768: LD_INT 2
31770: NEG
31771: PUSH
31772: EMPTY
31773: LIST
31774: LIST
31775: PUSH
31776: LD_INT 1
31778: PUSH
31779: LD_INT 1
31781: NEG
31782: PUSH
31783: EMPTY
31784: LIST
31785: LIST
31786: PUSH
31787: LD_INT 2
31789: PUSH
31790: LD_INT 0
31792: PUSH
31793: EMPTY
31794: LIST
31795: LIST
31796: PUSH
31797: LD_INT 2
31799: PUSH
31800: LD_INT 1
31802: PUSH
31803: EMPTY
31804: LIST
31805: LIST
31806: PUSH
31807: LD_INT 2
31809: PUSH
31810: LD_INT 2
31812: PUSH
31813: EMPTY
31814: LIST
31815: LIST
31816: PUSH
31817: LD_INT 1
31819: PUSH
31820: LD_INT 2
31822: PUSH
31823: EMPTY
31824: LIST
31825: LIST
31826: PUSH
31827: LD_INT 0
31829: PUSH
31830: LD_INT 2
31832: PUSH
31833: EMPTY
31834: LIST
31835: LIST
31836: PUSH
31837: LD_INT 1
31839: NEG
31840: PUSH
31841: LD_INT 1
31843: PUSH
31844: EMPTY
31845: LIST
31846: LIST
31847: PUSH
31848: LD_INT 2
31850: NEG
31851: PUSH
31852: LD_INT 0
31854: PUSH
31855: EMPTY
31856: LIST
31857: LIST
31858: PUSH
31859: LD_INT 2
31861: NEG
31862: PUSH
31863: LD_INT 1
31865: NEG
31866: PUSH
31867: EMPTY
31868: LIST
31869: LIST
31870: PUSH
31871: LD_INT 2
31873: NEG
31874: PUSH
31875: LD_INT 2
31877: NEG
31878: PUSH
31879: EMPTY
31880: LIST
31881: LIST
31882: PUSH
31883: EMPTY
31884: LIST
31885: LIST
31886: LIST
31887: LIST
31888: LIST
31889: LIST
31890: LIST
31891: LIST
31892: LIST
31893: LIST
31894: LIST
31895: LIST
31896: LIST
31897: LIST
31898: LIST
31899: LIST
31900: LIST
31901: LIST
31902: LIST
31903: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31904: LD_ADDR_VAR 0 55
31908: PUSH
31909: LD_INT 0
31911: PUSH
31912: LD_INT 0
31914: PUSH
31915: EMPTY
31916: LIST
31917: LIST
31918: PUSH
31919: LD_INT 0
31921: PUSH
31922: LD_INT 1
31924: NEG
31925: PUSH
31926: EMPTY
31927: LIST
31928: LIST
31929: PUSH
31930: LD_INT 1
31932: PUSH
31933: LD_INT 0
31935: PUSH
31936: EMPTY
31937: LIST
31938: LIST
31939: PUSH
31940: LD_INT 1
31942: PUSH
31943: LD_INT 1
31945: PUSH
31946: EMPTY
31947: LIST
31948: LIST
31949: PUSH
31950: LD_INT 0
31952: PUSH
31953: LD_INT 1
31955: PUSH
31956: EMPTY
31957: LIST
31958: LIST
31959: PUSH
31960: LD_INT 1
31962: NEG
31963: PUSH
31964: LD_INT 0
31966: PUSH
31967: EMPTY
31968: LIST
31969: LIST
31970: PUSH
31971: LD_INT 1
31973: NEG
31974: PUSH
31975: LD_INT 1
31977: NEG
31978: PUSH
31979: EMPTY
31980: LIST
31981: LIST
31982: PUSH
31983: LD_INT 1
31985: NEG
31986: PUSH
31987: LD_INT 2
31989: NEG
31990: PUSH
31991: EMPTY
31992: LIST
31993: LIST
31994: PUSH
31995: LD_INT 0
31997: PUSH
31998: LD_INT 2
32000: NEG
32001: PUSH
32002: EMPTY
32003: LIST
32004: LIST
32005: PUSH
32006: LD_INT 1
32008: PUSH
32009: LD_INT 1
32011: NEG
32012: PUSH
32013: EMPTY
32014: LIST
32015: LIST
32016: PUSH
32017: LD_INT 2
32019: PUSH
32020: LD_INT 0
32022: PUSH
32023: EMPTY
32024: LIST
32025: LIST
32026: PUSH
32027: LD_INT 2
32029: PUSH
32030: LD_INT 1
32032: PUSH
32033: EMPTY
32034: LIST
32035: LIST
32036: PUSH
32037: LD_INT 2
32039: PUSH
32040: LD_INT 2
32042: PUSH
32043: EMPTY
32044: LIST
32045: LIST
32046: PUSH
32047: LD_INT 1
32049: PUSH
32050: LD_INT 2
32052: PUSH
32053: EMPTY
32054: LIST
32055: LIST
32056: PUSH
32057: LD_INT 0
32059: PUSH
32060: LD_INT 2
32062: PUSH
32063: EMPTY
32064: LIST
32065: LIST
32066: PUSH
32067: LD_INT 1
32069: NEG
32070: PUSH
32071: LD_INT 1
32073: PUSH
32074: EMPTY
32075: LIST
32076: LIST
32077: PUSH
32078: LD_INT 2
32080: NEG
32081: PUSH
32082: LD_INT 0
32084: PUSH
32085: EMPTY
32086: LIST
32087: LIST
32088: PUSH
32089: LD_INT 2
32091: NEG
32092: PUSH
32093: LD_INT 1
32095: NEG
32096: PUSH
32097: EMPTY
32098: LIST
32099: LIST
32100: PUSH
32101: LD_INT 2
32103: NEG
32104: PUSH
32105: LD_INT 2
32107: NEG
32108: PUSH
32109: EMPTY
32110: LIST
32111: LIST
32112: PUSH
32113: EMPTY
32114: LIST
32115: LIST
32116: LIST
32117: LIST
32118: LIST
32119: LIST
32120: LIST
32121: LIST
32122: LIST
32123: LIST
32124: LIST
32125: LIST
32126: LIST
32127: LIST
32128: LIST
32129: LIST
32130: LIST
32131: LIST
32132: LIST
32133: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32134: LD_ADDR_VAR 0 56
32138: PUSH
32139: LD_INT 0
32141: PUSH
32142: LD_INT 0
32144: PUSH
32145: EMPTY
32146: LIST
32147: LIST
32148: PUSH
32149: LD_INT 0
32151: PUSH
32152: LD_INT 1
32154: NEG
32155: PUSH
32156: EMPTY
32157: LIST
32158: LIST
32159: PUSH
32160: LD_INT 1
32162: PUSH
32163: LD_INT 0
32165: PUSH
32166: EMPTY
32167: LIST
32168: LIST
32169: PUSH
32170: LD_INT 1
32172: PUSH
32173: LD_INT 1
32175: PUSH
32176: EMPTY
32177: LIST
32178: LIST
32179: PUSH
32180: LD_INT 0
32182: PUSH
32183: LD_INT 1
32185: PUSH
32186: EMPTY
32187: LIST
32188: LIST
32189: PUSH
32190: LD_INT 1
32192: NEG
32193: PUSH
32194: LD_INT 0
32196: PUSH
32197: EMPTY
32198: LIST
32199: LIST
32200: PUSH
32201: LD_INT 1
32203: NEG
32204: PUSH
32205: LD_INT 1
32207: NEG
32208: PUSH
32209: EMPTY
32210: LIST
32211: LIST
32212: PUSH
32213: LD_INT 1
32215: NEG
32216: PUSH
32217: LD_INT 2
32219: NEG
32220: PUSH
32221: EMPTY
32222: LIST
32223: LIST
32224: PUSH
32225: LD_INT 0
32227: PUSH
32228: LD_INT 2
32230: NEG
32231: PUSH
32232: EMPTY
32233: LIST
32234: LIST
32235: PUSH
32236: LD_INT 1
32238: PUSH
32239: LD_INT 1
32241: NEG
32242: PUSH
32243: EMPTY
32244: LIST
32245: LIST
32246: PUSH
32247: LD_INT 2
32249: PUSH
32250: LD_INT 0
32252: PUSH
32253: EMPTY
32254: LIST
32255: LIST
32256: PUSH
32257: LD_INT 2
32259: PUSH
32260: LD_INT 1
32262: PUSH
32263: EMPTY
32264: LIST
32265: LIST
32266: PUSH
32267: LD_INT 2
32269: PUSH
32270: LD_INT 2
32272: PUSH
32273: EMPTY
32274: LIST
32275: LIST
32276: PUSH
32277: LD_INT 1
32279: PUSH
32280: LD_INT 2
32282: PUSH
32283: EMPTY
32284: LIST
32285: LIST
32286: PUSH
32287: LD_INT 0
32289: PUSH
32290: LD_INT 2
32292: PUSH
32293: EMPTY
32294: LIST
32295: LIST
32296: PUSH
32297: LD_INT 1
32299: NEG
32300: PUSH
32301: LD_INT 1
32303: PUSH
32304: EMPTY
32305: LIST
32306: LIST
32307: PUSH
32308: LD_INT 2
32310: NEG
32311: PUSH
32312: LD_INT 0
32314: PUSH
32315: EMPTY
32316: LIST
32317: LIST
32318: PUSH
32319: LD_INT 2
32321: NEG
32322: PUSH
32323: LD_INT 1
32325: NEG
32326: PUSH
32327: EMPTY
32328: LIST
32329: LIST
32330: PUSH
32331: LD_INT 2
32333: NEG
32334: PUSH
32335: LD_INT 2
32337: NEG
32338: PUSH
32339: EMPTY
32340: LIST
32341: LIST
32342: PUSH
32343: EMPTY
32344: LIST
32345: LIST
32346: LIST
32347: LIST
32348: LIST
32349: LIST
32350: LIST
32351: LIST
32352: LIST
32353: LIST
32354: LIST
32355: LIST
32356: LIST
32357: LIST
32358: LIST
32359: LIST
32360: LIST
32361: LIST
32362: LIST
32363: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32364: LD_ADDR_VAR 0 57
32368: PUSH
32369: LD_INT 0
32371: PUSH
32372: LD_INT 0
32374: PUSH
32375: EMPTY
32376: LIST
32377: LIST
32378: PUSH
32379: LD_INT 0
32381: PUSH
32382: LD_INT 1
32384: NEG
32385: PUSH
32386: EMPTY
32387: LIST
32388: LIST
32389: PUSH
32390: LD_INT 1
32392: PUSH
32393: LD_INT 0
32395: PUSH
32396: EMPTY
32397: LIST
32398: LIST
32399: PUSH
32400: LD_INT 1
32402: PUSH
32403: LD_INT 1
32405: PUSH
32406: EMPTY
32407: LIST
32408: LIST
32409: PUSH
32410: LD_INT 0
32412: PUSH
32413: LD_INT 1
32415: PUSH
32416: EMPTY
32417: LIST
32418: LIST
32419: PUSH
32420: LD_INT 1
32422: NEG
32423: PUSH
32424: LD_INT 0
32426: PUSH
32427: EMPTY
32428: LIST
32429: LIST
32430: PUSH
32431: LD_INT 1
32433: NEG
32434: PUSH
32435: LD_INT 1
32437: NEG
32438: PUSH
32439: EMPTY
32440: LIST
32441: LIST
32442: PUSH
32443: LD_INT 1
32445: NEG
32446: PUSH
32447: LD_INT 2
32449: NEG
32450: PUSH
32451: EMPTY
32452: LIST
32453: LIST
32454: PUSH
32455: LD_INT 0
32457: PUSH
32458: LD_INT 2
32460: NEG
32461: PUSH
32462: EMPTY
32463: LIST
32464: LIST
32465: PUSH
32466: LD_INT 1
32468: PUSH
32469: LD_INT 1
32471: NEG
32472: PUSH
32473: EMPTY
32474: LIST
32475: LIST
32476: PUSH
32477: LD_INT 2
32479: PUSH
32480: LD_INT 0
32482: PUSH
32483: EMPTY
32484: LIST
32485: LIST
32486: PUSH
32487: LD_INT 2
32489: PUSH
32490: LD_INT 1
32492: PUSH
32493: EMPTY
32494: LIST
32495: LIST
32496: PUSH
32497: LD_INT 2
32499: PUSH
32500: LD_INT 2
32502: PUSH
32503: EMPTY
32504: LIST
32505: LIST
32506: PUSH
32507: LD_INT 1
32509: PUSH
32510: LD_INT 2
32512: PUSH
32513: EMPTY
32514: LIST
32515: LIST
32516: PUSH
32517: LD_INT 0
32519: PUSH
32520: LD_INT 2
32522: PUSH
32523: EMPTY
32524: LIST
32525: LIST
32526: PUSH
32527: LD_INT 1
32529: NEG
32530: PUSH
32531: LD_INT 1
32533: PUSH
32534: EMPTY
32535: LIST
32536: LIST
32537: PUSH
32538: LD_INT 2
32540: NEG
32541: PUSH
32542: LD_INT 0
32544: PUSH
32545: EMPTY
32546: LIST
32547: LIST
32548: PUSH
32549: LD_INT 2
32551: NEG
32552: PUSH
32553: LD_INT 1
32555: NEG
32556: PUSH
32557: EMPTY
32558: LIST
32559: LIST
32560: PUSH
32561: LD_INT 2
32563: NEG
32564: PUSH
32565: LD_INT 2
32567: NEG
32568: PUSH
32569: EMPTY
32570: LIST
32571: LIST
32572: PUSH
32573: EMPTY
32574: LIST
32575: LIST
32576: LIST
32577: LIST
32578: LIST
32579: LIST
32580: LIST
32581: LIST
32582: LIST
32583: LIST
32584: LIST
32585: LIST
32586: LIST
32587: LIST
32588: LIST
32589: LIST
32590: LIST
32591: LIST
32592: LIST
32593: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32594: LD_ADDR_VAR 0 58
32598: PUSH
32599: LD_INT 0
32601: PUSH
32602: LD_INT 0
32604: PUSH
32605: EMPTY
32606: LIST
32607: LIST
32608: PUSH
32609: LD_INT 0
32611: PUSH
32612: LD_INT 1
32614: NEG
32615: PUSH
32616: EMPTY
32617: LIST
32618: LIST
32619: PUSH
32620: LD_INT 1
32622: PUSH
32623: LD_INT 0
32625: PUSH
32626: EMPTY
32627: LIST
32628: LIST
32629: PUSH
32630: LD_INT 1
32632: PUSH
32633: LD_INT 1
32635: PUSH
32636: EMPTY
32637: LIST
32638: LIST
32639: PUSH
32640: LD_INT 0
32642: PUSH
32643: LD_INT 1
32645: PUSH
32646: EMPTY
32647: LIST
32648: LIST
32649: PUSH
32650: LD_INT 1
32652: NEG
32653: PUSH
32654: LD_INT 0
32656: PUSH
32657: EMPTY
32658: LIST
32659: LIST
32660: PUSH
32661: LD_INT 1
32663: NEG
32664: PUSH
32665: LD_INT 1
32667: NEG
32668: PUSH
32669: EMPTY
32670: LIST
32671: LIST
32672: PUSH
32673: LD_INT 1
32675: NEG
32676: PUSH
32677: LD_INT 2
32679: NEG
32680: PUSH
32681: EMPTY
32682: LIST
32683: LIST
32684: PUSH
32685: LD_INT 0
32687: PUSH
32688: LD_INT 2
32690: NEG
32691: PUSH
32692: EMPTY
32693: LIST
32694: LIST
32695: PUSH
32696: LD_INT 1
32698: PUSH
32699: LD_INT 1
32701: NEG
32702: PUSH
32703: EMPTY
32704: LIST
32705: LIST
32706: PUSH
32707: LD_INT 2
32709: PUSH
32710: LD_INT 0
32712: PUSH
32713: EMPTY
32714: LIST
32715: LIST
32716: PUSH
32717: LD_INT 2
32719: PUSH
32720: LD_INT 1
32722: PUSH
32723: EMPTY
32724: LIST
32725: LIST
32726: PUSH
32727: LD_INT 2
32729: PUSH
32730: LD_INT 2
32732: PUSH
32733: EMPTY
32734: LIST
32735: LIST
32736: PUSH
32737: LD_INT 1
32739: PUSH
32740: LD_INT 2
32742: PUSH
32743: EMPTY
32744: LIST
32745: LIST
32746: PUSH
32747: LD_INT 0
32749: PUSH
32750: LD_INT 2
32752: PUSH
32753: EMPTY
32754: LIST
32755: LIST
32756: PUSH
32757: LD_INT 1
32759: NEG
32760: PUSH
32761: LD_INT 1
32763: PUSH
32764: EMPTY
32765: LIST
32766: LIST
32767: PUSH
32768: LD_INT 2
32770: NEG
32771: PUSH
32772: LD_INT 0
32774: PUSH
32775: EMPTY
32776: LIST
32777: LIST
32778: PUSH
32779: LD_INT 2
32781: NEG
32782: PUSH
32783: LD_INT 1
32785: NEG
32786: PUSH
32787: EMPTY
32788: LIST
32789: LIST
32790: PUSH
32791: LD_INT 2
32793: NEG
32794: PUSH
32795: LD_INT 2
32797: NEG
32798: PUSH
32799: EMPTY
32800: LIST
32801: LIST
32802: PUSH
32803: EMPTY
32804: LIST
32805: LIST
32806: LIST
32807: LIST
32808: LIST
32809: LIST
32810: LIST
32811: LIST
32812: LIST
32813: LIST
32814: LIST
32815: LIST
32816: LIST
32817: LIST
32818: LIST
32819: LIST
32820: LIST
32821: LIST
32822: LIST
32823: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
32824: LD_ADDR_VAR 0 59
32828: PUSH
32829: LD_INT 0
32831: PUSH
32832: LD_INT 0
32834: PUSH
32835: EMPTY
32836: LIST
32837: LIST
32838: PUSH
32839: LD_INT 0
32841: PUSH
32842: LD_INT 1
32844: NEG
32845: PUSH
32846: EMPTY
32847: LIST
32848: LIST
32849: PUSH
32850: LD_INT 1
32852: PUSH
32853: LD_INT 0
32855: PUSH
32856: EMPTY
32857: LIST
32858: LIST
32859: PUSH
32860: LD_INT 1
32862: PUSH
32863: LD_INT 1
32865: PUSH
32866: EMPTY
32867: LIST
32868: LIST
32869: PUSH
32870: LD_INT 0
32872: PUSH
32873: LD_INT 1
32875: PUSH
32876: EMPTY
32877: LIST
32878: LIST
32879: PUSH
32880: LD_INT 1
32882: NEG
32883: PUSH
32884: LD_INT 0
32886: PUSH
32887: EMPTY
32888: LIST
32889: LIST
32890: PUSH
32891: LD_INT 1
32893: NEG
32894: PUSH
32895: LD_INT 1
32897: NEG
32898: PUSH
32899: EMPTY
32900: LIST
32901: LIST
32902: PUSH
32903: EMPTY
32904: LIST
32905: LIST
32906: LIST
32907: LIST
32908: LIST
32909: LIST
32910: LIST
32911: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
32912: LD_ADDR_VAR 0 60
32916: PUSH
32917: LD_INT 0
32919: PUSH
32920: LD_INT 0
32922: PUSH
32923: EMPTY
32924: LIST
32925: LIST
32926: PUSH
32927: LD_INT 0
32929: PUSH
32930: LD_INT 1
32932: NEG
32933: PUSH
32934: EMPTY
32935: LIST
32936: LIST
32937: PUSH
32938: LD_INT 1
32940: PUSH
32941: LD_INT 0
32943: PUSH
32944: EMPTY
32945: LIST
32946: LIST
32947: PUSH
32948: LD_INT 1
32950: PUSH
32951: LD_INT 1
32953: PUSH
32954: EMPTY
32955: LIST
32956: LIST
32957: PUSH
32958: LD_INT 0
32960: PUSH
32961: LD_INT 1
32963: PUSH
32964: EMPTY
32965: LIST
32966: LIST
32967: PUSH
32968: LD_INT 1
32970: NEG
32971: PUSH
32972: LD_INT 0
32974: PUSH
32975: EMPTY
32976: LIST
32977: LIST
32978: PUSH
32979: LD_INT 1
32981: NEG
32982: PUSH
32983: LD_INT 1
32985: NEG
32986: PUSH
32987: EMPTY
32988: LIST
32989: LIST
32990: PUSH
32991: EMPTY
32992: LIST
32993: LIST
32994: LIST
32995: LIST
32996: LIST
32997: LIST
32998: LIST
32999: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
33000: LD_ADDR_VAR 0 61
33004: PUSH
33005: LD_INT 0
33007: PUSH
33008: LD_INT 0
33010: PUSH
33011: EMPTY
33012: LIST
33013: LIST
33014: PUSH
33015: LD_INT 0
33017: PUSH
33018: LD_INT 1
33020: NEG
33021: PUSH
33022: EMPTY
33023: LIST
33024: LIST
33025: PUSH
33026: LD_INT 1
33028: PUSH
33029: LD_INT 0
33031: PUSH
33032: EMPTY
33033: LIST
33034: LIST
33035: PUSH
33036: LD_INT 1
33038: PUSH
33039: LD_INT 1
33041: PUSH
33042: EMPTY
33043: LIST
33044: LIST
33045: PUSH
33046: LD_INT 0
33048: PUSH
33049: LD_INT 1
33051: PUSH
33052: EMPTY
33053: LIST
33054: LIST
33055: PUSH
33056: LD_INT 1
33058: NEG
33059: PUSH
33060: LD_INT 0
33062: PUSH
33063: EMPTY
33064: LIST
33065: LIST
33066: PUSH
33067: LD_INT 1
33069: NEG
33070: PUSH
33071: LD_INT 1
33073: NEG
33074: PUSH
33075: EMPTY
33076: LIST
33077: LIST
33078: PUSH
33079: EMPTY
33080: LIST
33081: LIST
33082: LIST
33083: LIST
33084: LIST
33085: LIST
33086: LIST
33087: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
33088: LD_ADDR_VAR 0 62
33092: PUSH
33093: LD_INT 0
33095: PUSH
33096: LD_INT 0
33098: PUSH
33099: EMPTY
33100: LIST
33101: LIST
33102: PUSH
33103: LD_INT 0
33105: PUSH
33106: LD_INT 1
33108: NEG
33109: PUSH
33110: EMPTY
33111: LIST
33112: LIST
33113: PUSH
33114: LD_INT 1
33116: PUSH
33117: LD_INT 0
33119: PUSH
33120: EMPTY
33121: LIST
33122: LIST
33123: PUSH
33124: LD_INT 1
33126: PUSH
33127: LD_INT 1
33129: PUSH
33130: EMPTY
33131: LIST
33132: LIST
33133: PUSH
33134: LD_INT 0
33136: PUSH
33137: LD_INT 1
33139: PUSH
33140: EMPTY
33141: LIST
33142: LIST
33143: PUSH
33144: LD_INT 1
33146: NEG
33147: PUSH
33148: LD_INT 0
33150: PUSH
33151: EMPTY
33152: LIST
33153: LIST
33154: PUSH
33155: LD_INT 1
33157: NEG
33158: PUSH
33159: LD_INT 1
33161: NEG
33162: PUSH
33163: EMPTY
33164: LIST
33165: LIST
33166: PUSH
33167: EMPTY
33168: LIST
33169: LIST
33170: LIST
33171: LIST
33172: LIST
33173: LIST
33174: LIST
33175: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
33176: LD_ADDR_VAR 0 63
33180: PUSH
33181: LD_INT 0
33183: PUSH
33184: LD_INT 0
33186: PUSH
33187: EMPTY
33188: LIST
33189: LIST
33190: PUSH
33191: LD_INT 0
33193: PUSH
33194: LD_INT 1
33196: NEG
33197: PUSH
33198: EMPTY
33199: LIST
33200: LIST
33201: PUSH
33202: LD_INT 1
33204: PUSH
33205: LD_INT 0
33207: PUSH
33208: EMPTY
33209: LIST
33210: LIST
33211: PUSH
33212: LD_INT 1
33214: PUSH
33215: LD_INT 1
33217: PUSH
33218: EMPTY
33219: LIST
33220: LIST
33221: PUSH
33222: LD_INT 0
33224: PUSH
33225: LD_INT 1
33227: PUSH
33228: EMPTY
33229: LIST
33230: LIST
33231: PUSH
33232: LD_INT 1
33234: NEG
33235: PUSH
33236: LD_INT 0
33238: PUSH
33239: EMPTY
33240: LIST
33241: LIST
33242: PUSH
33243: LD_INT 1
33245: NEG
33246: PUSH
33247: LD_INT 1
33249: NEG
33250: PUSH
33251: EMPTY
33252: LIST
33253: LIST
33254: PUSH
33255: EMPTY
33256: LIST
33257: LIST
33258: LIST
33259: LIST
33260: LIST
33261: LIST
33262: LIST
33263: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
33264: LD_ADDR_VAR 0 64
33268: PUSH
33269: LD_INT 0
33271: PUSH
33272: LD_INT 0
33274: PUSH
33275: EMPTY
33276: LIST
33277: LIST
33278: PUSH
33279: LD_INT 0
33281: PUSH
33282: LD_INT 1
33284: NEG
33285: PUSH
33286: EMPTY
33287: LIST
33288: LIST
33289: PUSH
33290: LD_INT 1
33292: PUSH
33293: LD_INT 0
33295: PUSH
33296: EMPTY
33297: LIST
33298: LIST
33299: PUSH
33300: LD_INT 1
33302: PUSH
33303: LD_INT 1
33305: PUSH
33306: EMPTY
33307: LIST
33308: LIST
33309: PUSH
33310: LD_INT 0
33312: PUSH
33313: LD_INT 1
33315: PUSH
33316: EMPTY
33317: LIST
33318: LIST
33319: PUSH
33320: LD_INT 1
33322: NEG
33323: PUSH
33324: LD_INT 0
33326: PUSH
33327: EMPTY
33328: LIST
33329: LIST
33330: PUSH
33331: LD_INT 1
33333: NEG
33334: PUSH
33335: LD_INT 1
33337: NEG
33338: PUSH
33339: EMPTY
33340: LIST
33341: LIST
33342: PUSH
33343: EMPTY
33344: LIST
33345: LIST
33346: LIST
33347: LIST
33348: LIST
33349: LIST
33350: LIST
33351: ST_TO_ADDR
// end ; 1 :
33352: GO 39249
33354: LD_INT 1
33356: DOUBLE
33357: EQUAL
33358: IFTRUE 33362
33360: GO 35985
33362: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
33363: LD_ADDR_VAR 0 11
33367: PUSH
33368: LD_INT 1
33370: NEG
33371: PUSH
33372: LD_INT 3
33374: NEG
33375: PUSH
33376: EMPTY
33377: LIST
33378: LIST
33379: PUSH
33380: LD_INT 0
33382: PUSH
33383: LD_INT 3
33385: NEG
33386: PUSH
33387: EMPTY
33388: LIST
33389: LIST
33390: PUSH
33391: LD_INT 1
33393: PUSH
33394: LD_INT 2
33396: NEG
33397: PUSH
33398: EMPTY
33399: LIST
33400: LIST
33401: PUSH
33402: EMPTY
33403: LIST
33404: LIST
33405: LIST
33406: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
33407: LD_ADDR_VAR 0 12
33411: PUSH
33412: LD_INT 2
33414: PUSH
33415: LD_INT 1
33417: NEG
33418: PUSH
33419: EMPTY
33420: LIST
33421: LIST
33422: PUSH
33423: LD_INT 3
33425: PUSH
33426: LD_INT 0
33428: PUSH
33429: EMPTY
33430: LIST
33431: LIST
33432: PUSH
33433: LD_INT 3
33435: PUSH
33436: LD_INT 1
33438: PUSH
33439: EMPTY
33440: LIST
33441: LIST
33442: PUSH
33443: EMPTY
33444: LIST
33445: LIST
33446: LIST
33447: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
33448: LD_ADDR_VAR 0 13
33452: PUSH
33453: LD_INT 3
33455: PUSH
33456: LD_INT 2
33458: PUSH
33459: EMPTY
33460: LIST
33461: LIST
33462: PUSH
33463: LD_INT 3
33465: PUSH
33466: LD_INT 3
33468: PUSH
33469: EMPTY
33470: LIST
33471: LIST
33472: PUSH
33473: LD_INT 2
33475: PUSH
33476: LD_INT 3
33478: PUSH
33479: EMPTY
33480: LIST
33481: LIST
33482: PUSH
33483: EMPTY
33484: LIST
33485: LIST
33486: LIST
33487: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
33488: LD_ADDR_VAR 0 14
33492: PUSH
33493: LD_INT 1
33495: PUSH
33496: LD_INT 3
33498: PUSH
33499: EMPTY
33500: LIST
33501: LIST
33502: PUSH
33503: LD_INT 0
33505: PUSH
33506: LD_INT 3
33508: PUSH
33509: EMPTY
33510: LIST
33511: LIST
33512: PUSH
33513: LD_INT 1
33515: NEG
33516: PUSH
33517: LD_INT 2
33519: PUSH
33520: EMPTY
33521: LIST
33522: LIST
33523: PUSH
33524: EMPTY
33525: LIST
33526: LIST
33527: LIST
33528: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
33529: LD_ADDR_VAR 0 15
33533: PUSH
33534: LD_INT 2
33536: NEG
33537: PUSH
33538: LD_INT 1
33540: PUSH
33541: EMPTY
33542: LIST
33543: LIST
33544: PUSH
33545: LD_INT 3
33547: NEG
33548: PUSH
33549: LD_INT 0
33551: PUSH
33552: EMPTY
33553: LIST
33554: LIST
33555: PUSH
33556: LD_INT 3
33558: NEG
33559: PUSH
33560: LD_INT 1
33562: NEG
33563: PUSH
33564: EMPTY
33565: LIST
33566: LIST
33567: PUSH
33568: EMPTY
33569: LIST
33570: LIST
33571: LIST
33572: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
33573: LD_ADDR_VAR 0 16
33577: PUSH
33578: LD_INT 2
33580: NEG
33581: PUSH
33582: LD_INT 3
33584: NEG
33585: PUSH
33586: EMPTY
33587: LIST
33588: LIST
33589: PUSH
33590: LD_INT 3
33592: NEG
33593: PUSH
33594: LD_INT 2
33596: NEG
33597: PUSH
33598: EMPTY
33599: LIST
33600: LIST
33601: PUSH
33602: LD_INT 3
33604: NEG
33605: PUSH
33606: LD_INT 3
33608: NEG
33609: PUSH
33610: EMPTY
33611: LIST
33612: LIST
33613: PUSH
33614: EMPTY
33615: LIST
33616: LIST
33617: LIST
33618: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
33619: LD_ADDR_VAR 0 17
33623: PUSH
33624: LD_INT 1
33626: NEG
33627: PUSH
33628: LD_INT 3
33630: NEG
33631: PUSH
33632: EMPTY
33633: LIST
33634: LIST
33635: PUSH
33636: LD_INT 0
33638: PUSH
33639: LD_INT 3
33641: NEG
33642: PUSH
33643: EMPTY
33644: LIST
33645: LIST
33646: PUSH
33647: LD_INT 1
33649: PUSH
33650: LD_INT 2
33652: NEG
33653: PUSH
33654: EMPTY
33655: LIST
33656: LIST
33657: PUSH
33658: EMPTY
33659: LIST
33660: LIST
33661: LIST
33662: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
33663: LD_ADDR_VAR 0 18
33667: PUSH
33668: LD_INT 2
33670: PUSH
33671: LD_INT 1
33673: NEG
33674: PUSH
33675: EMPTY
33676: LIST
33677: LIST
33678: PUSH
33679: LD_INT 3
33681: PUSH
33682: LD_INT 0
33684: PUSH
33685: EMPTY
33686: LIST
33687: LIST
33688: PUSH
33689: LD_INT 3
33691: PUSH
33692: LD_INT 1
33694: PUSH
33695: EMPTY
33696: LIST
33697: LIST
33698: PUSH
33699: EMPTY
33700: LIST
33701: LIST
33702: LIST
33703: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
33704: LD_ADDR_VAR 0 19
33708: PUSH
33709: LD_INT 3
33711: PUSH
33712: LD_INT 2
33714: PUSH
33715: EMPTY
33716: LIST
33717: LIST
33718: PUSH
33719: LD_INT 3
33721: PUSH
33722: LD_INT 3
33724: PUSH
33725: EMPTY
33726: LIST
33727: LIST
33728: PUSH
33729: LD_INT 2
33731: PUSH
33732: LD_INT 3
33734: PUSH
33735: EMPTY
33736: LIST
33737: LIST
33738: PUSH
33739: EMPTY
33740: LIST
33741: LIST
33742: LIST
33743: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
33744: LD_ADDR_VAR 0 20
33748: PUSH
33749: LD_INT 1
33751: PUSH
33752: LD_INT 3
33754: PUSH
33755: EMPTY
33756: LIST
33757: LIST
33758: PUSH
33759: LD_INT 0
33761: PUSH
33762: LD_INT 3
33764: PUSH
33765: EMPTY
33766: LIST
33767: LIST
33768: PUSH
33769: LD_INT 1
33771: NEG
33772: PUSH
33773: LD_INT 2
33775: PUSH
33776: EMPTY
33777: LIST
33778: LIST
33779: PUSH
33780: EMPTY
33781: LIST
33782: LIST
33783: LIST
33784: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
33785: LD_ADDR_VAR 0 21
33789: PUSH
33790: LD_INT 2
33792: NEG
33793: PUSH
33794: LD_INT 1
33796: PUSH
33797: EMPTY
33798: LIST
33799: LIST
33800: PUSH
33801: LD_INT 3
33803: NEG
33804: PUSH
33805: LD_INT 0
33807: PUSH
33808: EMPTY
33809: LIST
33810: LIST
33811: PUSH
33812: LD_INT 3
33814: NEG
33815: PUSH
33816: LD_INT 1
33818: NEG
33819: PUSH
33820: EMPTY
33821: LIST
33822: LIST
33823: PUSH
33824: EMPTY
33825: LIST
33826: LIST
33827: LIST
33828: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
33829: LD_ADDR_VAR 0 22
33833: PUSH
33834: LD_INT 2
33836: NEG
33837: PUSH
33838: LD_INT 3
33840: NEG
33841: PUSH
33842: EMPTY
33843: LIST
33844: LIST
33845: PUSH
33846: LD_INT 3
33848: NEG
33849: PUSH
33850: LD_INT 2
33852: NEG
33853: PUSH
33854: EMPTY
33855: LIST
33856: LIST
33857: PUSH
33858: LD_INT 3
33860: NEG
33861: PUSH
33862: LD_INT 3
33864: NEG
33865: PUSH
33866: EMPTY
33867: LIST
33868: LIST
33869: PUSH
33870: EMPTY
33871: LIST
33872: LIST
33873: LIST
33874: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
33875: LD_ADDR_VAR 0 23
33879: PUSH
33880: LD_INT 0
33882: PUSH
33883: LD_INT 3
33885: NEG
33886: PUSH
33887: EMPTY
33888: LIST
33889: LIST
33890: PUSH
33891: LD_INT 1
33893: NEG
33894: PUSH
33895: LD_INT 4
33897: NEG
33898: PUSH
33899: EMPTY
33900: LIST
33901: LIST
33902: PUSH
33903: LD_INT 1
33905: PUSH
33906: LD_INT 3
33908: NEG
33909: PUSH
33910: EMPTY
33911: LIST
33912: LIST
33913: PUSH
33914: EMPTY
33915: LIST
33916: LIST
33917: LIST
33918: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
33919: LD_ADDR_VAR 0 24
33923: PUSH
33924: LD_INT 3
33926: PUSH
33927: LD_INT 0
33929: PUSH
33930: EMPTY
33931: LIST
33932: LIST
33933: PUSH
33934: LD_INT 3
33936: PUSH
33937: LD_INT 1
33939: NEG
33940: PUSH
33941: EMPTY
33942: LIST
33943: LIST
33944: PUSH
33945: LD_INT 4
33947: PUSH
33948: LD_INT 1
33950: PUSH
33951: EMPTY
33952: LIST
33953: LIST
33954: PUSH
33955: EMPTY
33956: LIST
33957: LIST
33958: LIST
33959: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
33960: LD_ADDR_VAR 0 25
33964: PUSH
33965: LD_INT 3
33967: PUSH
33968: LD_INT 3
33970: PUSH
33971: EMPTY
33972: LIST
33973: LIST
33974: PUSH
33975: LD_INT 4
33977: PUSH
33978: LD_INT 3
33980: PUSH
33981: EMPTY
33982: LIST
33983: LIST
33984: PUSH
33985: LD_INT 3
33987: PUSH
33988: LD_INT 4
33990: PUSH
33991: EMPTY
33992: LIST
33993: LIST
33994: PUSH
33995: EMPTY
33996: LIST
33997: LIST
33998: LIST
33999: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
34000: LD_ADDR_VAR 0 26
34004: PUSH
34005: LD_INT 0
34007: PUSH
34008: LD_INT 3
34010: PUSH
34011: EMPTY
34012: LIST
34013: LIST
34014: PUSH
34015: LD_INT 1
34017: PUSH
34018: LD_INT 4
34020: PUSH
34021: EMPTY
34022: LIST
34023: LIST
34024: PUSH
34025: LD_INT 1
34027: NEG
34028: PUSH
34029: LD_INT 3
34031: PUSH
34032: EMPTY
34033: LIST
34034: LIST
34035: PUSH
34036: EMPTY
34037: LIST
34038: LIST
34039: LIST
34040: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
34041: LD_ADDR_VAR 0 27
34045: PUSH
34046: LD_INT 3
34048: NEG
34049: PUSH
34050: LD_INT 0
34052: PUSH
34053: EMPTY
34054: LIST
34055: LIST
34056: PUSH
34057: LD_INT 3
34059: NEG
34060: PUSH
34061: LD_INT 1
34063: PUSH
34064: EMPTY
34065: LIST
34066: LIST
34067: PUSH
34068: LD_INT 4
34070: NEG
34071: PUSH
34072: LD_INT 1
34074: NEG
34075: PUSH
34076: EMPTY
34077: LIST
34078: LIST
34079: PUSH
34080: EMPTY
34081: LIST
34082: LIST
34083: LIST
34084: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
34085: LD_ADDR_VAR 0 28
34089: PUSH
34090: LD_INT 3
34092: NEG
34093: PUSH
34094: LD_INT 3
34096: NEG
34097: PUSH
34098: EMPTY
34099: LIST
34100: LIST
34101: PUSH
34102: LD_INT 3
34104: NEG
34105: PUSH
34106: LD_INT 4
34108: NEG
34109: PUSH
34110: EMPTY
34111: LIST
34112: LIST
34113: PUSH
34114: LD_INT 4
34116: NEG
34117: PUSH
34118: LD_INT 3
34120: NEG
34121: PUSH
34122: EMPTY
34123: LIST
34124: LIST
34125: PUSH
34126: EMPTY
34127: LIST
34128: LIST
34129: LIST
34130: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
34131: LD_ADDR_VAR 0 29
34135: PUSH
34136: LD_INT 1
34138: NEG
34139: PUSH
34140: LD_INT 3
34142: NEG
34143: PUSH
34144: EMPTY
34145: LIST
34146: LIST
34147: PUSH
34148: LD_INT 0
34150: PUSH
34151: LD_INT 3
34153: NEG
34154: PUSH
34155: EMPTY
34156: LIST
34157: LIST
34158: PUSH
34159: LD_INT 1
34161: PUSH
34162: LD_INT 2
34164: NEG
34165: PUSH
34166: EMPTY
34167: LIST
34168: LIST
34169: PUSH
34170: LD_INT 1
34172: NEG
34173: PUSH
34174: LD_INT 4
34176: NEG
34177: PUSH
34178: EMPTY
34179: LIST
34180: LIST
34181: PUSH
34182: LD_INT 0
34184: PUSH
34185: LD_INT 4
34187: NEG
34188: PUSH
34189: EMPTY
34190: LIST
34191: LIST
34192: PUSH
34193: LD_INT 1
34195: PUSH
34196: LD_INT 3
34198: NEG
34199: PUSH
34200: EMPTY
34201: LIST
34202: LIST
34203: PUSH
34204: LD_INT 1
34206: NEG
34207: PUSH
34208: LD_INT 5
34210: NEG
34211: PUSH
34212: EMPTY
34213: LIST
34214: LIST
34215: PUSH
34216: LD_INT 0
34218: PUSH
34219: LD_INT 5
34221: NEG
34222: PUSH
34223: EMPTY
34224: LIST
34225: LIST
34226: PUSH
34227: LD_INT 1
34229: PUSH
34230: LD_INT 4
34232: NEG
34233: PUSH
34234: EMPTY
34235: LIST
34236: LIST
34237: PUSH
34238: LD_INT 1
34240: NEG
34241: PUSH
34242: LD_INT 6
34244: NEG
34245: PUSH
34246: EMPTY
34247: LIST
34248: LIST
34249: PUSH
34250: LD_INT 0
34252: PUSH
34253: LD_INT 6
34255: NEG
34256: PUSH
34257: EMPTY
34258: LIST
34259: LIST
34260: PUSH
34261: LD_INT 1
34263: PUSH
34264: LD_INT 5
34266: NEG
34267: PUSH
34268: EMPTY
34269: LIST
34270: LIST
34271: PUSH
34272: EMPTY
34273: LIST
34274: LIST
34275: LIST
34276: LIST
34277: LIST
34278: LIST
34279: LIST
34280: LIST
34281: LIST
34282: LIST
34283: LIST
34284: LIST
34285: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
34286: LD_ADDR_VAR 0 30
34290: PUSH
34291: LD_INT 2
34293: PUSH
34294: LD_INT 1
34296: NEG
34297: PUSH
34298: EMPTY
34299: LIST
34300: LIST
34301: PUSH
34302: LD_INT 3
34304: PUSH
34305: LD_INT 0
34307: PUSH
34308: EMPTY
34309: LIST
34310: LIST
34311: PUSH
34312: LD_INT 3
34314: PUSH
34315: LD_INT 1
34317: PUSH
34318: EMPTY
34319: LIST
34320: LIST
34321: PUSH
34322: LD_INT 3
34324: PUSH
34325: LD_INT 1
34327: NEG
34328: PUSH
34329: EMPTY
34330: LIST
34331: LIST
34332: PUSH
34333: LD_INT 4
34335: PUSH
34336: LD_INT 0
34338: PUSH
34339: EMPTY
34340: LIST
34341: LIST
34342: PUSH
34343: LD_INT 4
34345: PUSH
34346: LD_INT 1
34348: PUSH
34349: EMPTY
34350: LIST
34351: LIST
34352: PUSH
34353: LD_INT 4
34355: PUSH
34356: LD_INT 1
34358: NEG
34359: PUSH
34360: EMPTY
34361: LIST
34362: LIST
34363: PUSH
34364: LD_INT 5
34366: PUSH
34367: LD_INT 0
34369: PUSH
34370: EMPTY
34371: LIST
34372: LIST
34373: PUSH
34374: LD_INT 5
34376: PUSH
34377: LD_INT 1
34379: PUSH
34380: EMPTY
34381: LIST
34382: LIST
34383: PUSH
34384: LD_INT 5
34386: PUSH
34387: LD_INT 1
34389: NEG
34390: PUSH
34391: EMPTY
34392: LIST
34393: LIST
34394: PUSH
34395: LD_INT 6
34397: PUSH
34398: LD_INT 0
34400: PUSH
34401: EMPTY
34402: LIST
34403: LIST
34404: PUSH
34405: LD_INT 6
34407: PUSH
34408: LD_INT 1
34410: PUSH
34411: EMPTY
34412: LIST
34413: LIST
34414: PUSH
34415: EMPTY
34416: LIST
34417: LIST
34418: LIST
34419: LIST
34420: LIST
34421: LIST
34422: LIST
34423: LIST
34424: LIST
34425: LIST
34426: LIST
34427: LIST
34428: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
34429: LD_ADDR_VAR 0 31
34433: PUSH
34434: LD_INT 3
34436: PUSH
34437: LD_INT 2
34439: PUSH
34440: EMPTY
34441: LIST
34442: LIST
34443: PUSH
34444: LD_INT 3
34446: PUSH
34447: LD_INT 3
34449: PUSH
34450: EMPTY
34451: LIST
34452: LIST
34453: PUSH
34454: LD_INT 2
34456: PUSH
34457: LD_INT 3
34459: PUSH
34460: EMPTY
34461: LIST
34462: LIST
34463: PUSH
34464: LD_INT 4
34466: PUSH
34467: LD_INT 3
34469: PUSH
34470: EMPTY
34471: LIST
34472: LIST
34473: PUSH
34474: LD_INT 4
34476: PUSH
34477: LD_INT 4
34479: PUSH
34480: EMPTY
34481: LIST
34482: LIST
34483: PUSH
34484: LD_INT 3
34486: PUSH
34487: LD_INT 4
34489: PUSH
34490: EMPTY
34491: LIST
34492: LIST
34493: PUSH
34494: LD_INT 5
34496: PUSH
34497: LD_INT 4
34499: PUSH
34500: EMPTY
34501: LIST
34502: LIST
34503: PUSH
34504: LD_INT 5
34506: PUSH
34507: LD_INT 5
34509: PUSH
34510: EMPTY
34511: LIST
34512: LIST
34513: PUSH
34514: LD_INT 4
34516: PUSH
34517: LD_INT 5
34519: PUSH
34520: EMPTY
34521: LIST
34522: LIST
34523: PUSH
34524: LD_INT 6
34526: PUSH
34527: LD_INT 5
34529: PUSH
34530: EMPTY
34531: LIST
34532: LIST
34533: PUSH
34534: LD_INT 6
34536: PUSH
34537: LD_INT 6
34539: PUSH
34540: EMPTY
34541: LIST
34542: LIST
34543: PUSH
34544: LD_INT 5
34546: PUSH
34547: LD_INT 6
34549: PUSH
34550: EMPTY
34551: LIST
34552: LIST
34553: PUSH
34554: EMPTY
34555: LIST
34556: LIST
34557: LIST
34558: LIST
34559: LIST
34560: LIST
34561: LIST
34562: LIST
34563: LIST
34564: LIST
34565: LIST
34566: LIST
34567: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
34568: LD_ADDR_VAR 0 32
34572: PUSH
34573: LD_INT 1
34575: PUSH
34576: LD_INT 3
34578: PUSH
34579: EMPTY
34580: LIST
34581: LIST
34582: PUSH
34583: LD_INT 0
34585: PUSH
34586: LD_INT 3
34588: PUSH
34589: EMPTY
34590: LIST
34591: LIST
34592: PUSH
34593: LD_INT 1
34595: NEG
34596: PUSH
34597: LD_INT 2
34599: PUSH
34600: EMPTY
34601: LIST
34602: LIST
34603: PUSH
34604: LD_INT 1
34606: PUSH
34607: LD_INT 4
34609: PUSH
34610: EMPTY
34611: LIST
34612: LIST
34613: PUSH
34614: LD_INT 0
34616: PUSH
34617: LD_INT 4
34619: PUSH
34620: EMPTY
34621: LIST
34622: LIST
34623: PUSH
34624: LD_INT 1
34626: NEG
34627: PUSH
34628: LD_INT 3
34630: PUSH
34631: EMPTY
34632: LIST
34633: LIST
34634: PUSH
34635: LD_INT 1
34637: PUSH
34638: LD_INT 5
34640: PUSH
34641: EMPTY
34642: LIST
34643: LIST
34644: PUSH
34645: LD_INT 0
34647: PUSH
34648: LD_INT 5
34650: PUSH
34651: EMPTY
34652: LIST
34653: LIST
34654: PUSH
34655: LD_INT 1
34657: NEG
34658: PUSH
34659: LD_INT 4
34661: PUSH
34662: EMPTY
34663: LIST
34664: LIST
34665: PUSH
34666: LD_INT 1
34668: PUSH
34669: LD_INT 6
34671: PUSH
34672: EMPTY
34673: LIST
34674: LIST
34675: PUSH
34676: LD_INT 0
34678: PUSH
34679: LD_INT 6
34681: PUSH
34682: EMPTY
34683: LIST
34684: LIST
34685: PUSH
34686: LD_INT 1
34688: NEG
34689: PUSH
34690: LD_INT 5
34692: PUSH
34693: EMPTY
34694: LIST
34695: LIST
34696: PUSH
34697: EMPTY
34698: LIST
34699: LIST
34700: LIST
34701: LIST
34702: LIST
34703: LIST
34704: LIST
34705: LIST
34706: LIST
34707: LIST
34708: LIST
34709: LIST
34710: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
34711: LD_ADDR_VAR 0 33
34715: PUSH
34716: LD_INT 2
34718: NEG
34719: PUSH
34720: LD_INT 1
34722: PUSH
34723: EMPTY
34724: LIST
34725: LIST
34726: PUSH
34727: LD_INT 3
34729: NEG
34730: PUSH
34731: LD_INT 0
34733: PUSH
34734: EMPTY
34735: LIST
34736: LIST
34737: PUSH
34738: LD_INT 3
34740: NEG
34741: PUSH
34742: LD_INT 1
34744: NEG
34745: PUSH
34746: EMPTY
34747: LIST
34748: LIST
34749: PUSH
34750: LD_INT 3
34752: NEG
34753: PUSH
34754: LD_INT 1
34756: PUSH
34757: EMPTY
34758: LIST
34759: LIST
34760: PUSH
34761: LD_INT 4
34763: NEG
34764: PUSH
34765: LD_INT 0
34767: PUSH
34768: EMPTY
34769: LIST
34770: LIST
34771: PUSH
34772: LD_INT 4
34774: NEG
34775: PUSH
34776: LD_INT 1
34778: NEG
34779: PUSH
34780: EMPTY
34781: LIST
34782: LIST
34783: PUSH
34784: LD_INT 4
34786: NEG
34787: PUSH
34788: LD_INT 1
34790: PUSH
34791: EMPTY
34792: LIST
34793: LIST
34794: PUSH
34795: LD_INT 5
34797: NEG
34798: PUSH
34799: LD_INT 0
34801: PUSH
34802: EMPTY
34803: LIST
34804: LIST
34805: PUSH
34806: LD_INT 5
34808: NEG
34809: PUSH
34810: LD_INT 1
34812: NEG
34813: PUSH
34814: EMPTY
34815: LIST
34816: LIST
34817: PUSH
34818: LD_INT 5
34820: NEG
34821: PUSH
34822: LD_INT 1
34824: PUSH
34825: EMPTY
34826: LIST
34827: LIST
34828: PUSH
34829: LD_INT 6
34831: NEG
34832: PUSH
34833: LD_INT 0
34835: PUSH
34836: EMPTY
34837: LIST
34838: LIST
34839: PUSH
34840: LD_INT 6
34842: NEG
34843: PUSH
34844: LD_INT 1
34846: NEG
34847: PUSH
34848: EMPTY
34849: LIST
34850: LIST
34851: PUSH
34852: EMPTY
34853: LIST
34854: LIST
34855: LIST
34856: LIST
34857: LIST
34858: LIST
34859: LIST
34860: LIST
34861: LIST
34862: LIST
34863: LIST
34864: LIST
34865: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
34866: LD_ADDR_VAR 0 34
34870: PUSH
34871: LD_INT 2
34873: NEG
34874: PUSH
34875: LD_INT 3
34877: NEG
34878: PUSH
34879: EMPTY
34880: LIST
34881: LIST
34882: PUSH
34883: LD_INT 3
34885: NEG
34886: PUSH
34887: LD_INT 2
34889: NEG
34890: PUSH
34891: EMPTY
34892: LIST
34893: LIST
34894: PUSH
34895: LD_INT 3
34897: NEG
34898: PUSH
34899: LD_INT 3
34901: NEG
34902: PUSH
34903: EMPTY
34904: LIST
34905: LIST
34906: PUSH
34907: LD_INT 3
34909: NEG
34910: PUSH
34911: LD_INT 4
34913: NEG
34914: PUSH
34915: EMPTY
34916: LIST
34917: LIST
34918: PUSH
34919: LD_INT 4
34921: NEG
34922: PUSH
34923: LD_INT 3
34925: NEG
34926: PUSH
34927: EMPTY
34928: LIST
34929: LIST
34930: PUSH
34931: LD_INT 4
34933: NEG
34934: PUSH
34935: LD_INT 4
34937: NEG
34938: PUSH
34939: EMPTY
34940: LIST
34941: LIST
34942: PUSH
34943: LD_INT 4
34945: NEG
34946: PUSH
34947: LD_INT 5
34949: NEG
34950: PUSH
34951: EMPTY
34952: LIST
34953: LIST
34954: PUSH
34955: LD_INT 5
34957: NEG
34958: PUSH
34959: LD_INT 4
34961: NEG
34962: PUSH
34963: EMPTY
34964: LIST
34965: LIST
34966: PUSH
34967: LD_INT 5
34969: NEG
34970: PUSH
34971: LD_INT 5
34973: NEG
34974: PUSH
34975: EMPTY
34976: LIST
34977: LIST
34978: PUSH
34979: LD_INT 5
34981: NEG
34982: PUSH
34983: LD_INT 6
34985: NEG
34986: PUSH
34987: EMPTY
34988: LIST
34989: LIST
34990: PUSH
34991: LD_INT 6
34993: NEG
34994: PUSH
34995: LD_INT 5
34997: NEG
34998: PUSH
34999: EMPTY
35000: LIST
35001: LIST
35002: PUSH
35003: LD_INT 6
35005: NEG
35006: PUSH
35007: LD_INT 6
35009: NEG
35010: PUSH
35011: EMPTY
35012: LIST
35013: LIST
35014: PUSH
35015: EMPTY
35016: LIST
35017: LIST
35018: LIST
35019: LIST
35020: LIST
35021: LIST
35022: LIST
35023: LIST
35024: LIST
35025: LIST
35026: LIST
35027: LIST
35028: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
35029: LD_ADDR_VAR 0 41
35033: PUSH
35034: LD_INT 0
35036: PUSH
35037: LD_INT 2
35039: NEG
35040: PUSH
35041: EMPTY
35042: LIST
35043: LIST
35044: PUSH
35045: LD_INT 1
35047: NEG
35048: PUSH
35049: LD_INT 3
35051: NEG
35052: PUSH
35053: EMPTY
35054: LIST
35055: LIST
35056: PUSH
35057: LD_INT 1
35059: PUSH
35060: LD_INT 2
35062: NEG
35063: PUSH
35064: EMPTY
35065: LIST
35066: LIST
35067: PUSH
35068: EMPTY
35069: LIST
35070: LIST
35071: LIST
35072: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
35073: LD_ADDR_VAR 0 42
35077: PUSH
35078: LD_INT 2
35080: PUSH
35081: LD_INT 0
35083: PUSH
35084: EMPTY
35085: LIST
35086: LIST
35087: PUSH
35088: LD_INT 2
35090: PUSH
35091: LD_INT 1
35093: NEG
35094: PUSH
35095: EMPTY
35096: LIST
35097: LIST
35098: PUSH
35099: LD_INT 3
35101: PUSH
35102: LD_INT 1
35104: PUSH
35105: EMPTY
35106: LIST
35107: LIST
35108: PUSH
35109: EMPTY
35110: LIST
35111: LIST
35112: LIST
35113: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
35114: LD_ADDR_VAR 0 43
35118: PUSH
35119: LD_INT 2
35121: PUSH
35122: LD_INT 2
35124: PUSH
35125: EMPTY
35126: LIST
35127: LIST
35128: PUSH
35129: LD_INT 3
35131: PUSH
35132: LD_INT 2
35134: PUSH
35135: EMPTY
35136: LIST
35137: LIST
35138: PUSH
35139: LD_INT 2
35141: PUSH
35142: LD_INT 3
35144: PUSH
35145: EMPTY
35146: LIST
35147: LIST
35148: PUSH
35149: EMPTY
35150: LIST
35151: LIST
35152: LIST
35153: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
35154: LD_ADDR_VAR 0 44
35158: PUSH
35159: LD_INT 0
35161: PUSH
35162: LD_INT 2
35164: PUSH
35165: EMPTY
35166: LIST
35167: LIST
35168: PUSH
35169: LD_INT 1
35171: PUSH
35172: LD_INT 3
35174: PUSH
35175: EMPTY
35176: LIST
35177: LIST
35178: PUSH
35179: LD_INT 1
35181: NEG
35182: PUSH
35183: LD_INT 2
35185: PUSH
35186: EMPTY
35187: LIST
35188: LIST
35189: PUSH
35190: EMPTY
35191: LIST
35192: LIST
35193: LIST
35194: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
35195: LD_ADDR_VAR 0 45
35199: PUSH
35200: LD_INT 2
35202: NEG
35203: PUSH
35204: LD_INT 0
35206: PUSH
35207: EMPTY
35208: LIST
35209: LIST
35210: PUSH
35211: LD_INT 2
35213: NEG
35214: PUSH
35215: LD_INT 1
35217: PUSH
35218: EMPTY
35219: LIST
35220: LIST
35221: PUSH
35222: LD_INT 3
35224: NEG
35225: PUSH
35226: LD_INT 1
35228: NEG
35229: PUSH
35230: EMPTY
35231: LIST
35232: LIST
35233: PUSH
35234: EMPTY
35235: LIST
35236: LIST
35237: LIST
35238: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
35239: LD_ADDR_VAR 0 46
35243: PUSH
35244: LD_INT 2
35246: NEG
35247: PUSH
35248: LD_INT 2
35250: NEG
35251: PUSH
35252: EMPTY
35253: LIST
35254: LIST
35255: PUSH
35256: LD_INT 2
35258: NEG
35259: PUSH
35260: LD_INT 3
35262: NEG
35263: PUSH
35264: EMPTY
35265: LIST
35266: LIST
35267: PUSH
35268: LD_INT 3
35270: NEG
35271: PUSH
35272: LD_INT 2
35274: NEG
35275: PUSH
35276: EMPTY
35277: LIST
35278: LIST
35279: PUSH
35280: EMPTY
35281: LIST
35282: LIST
35283: LIST
35284: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
35285: LD_ADDR_VAR 0 47
35289: PUSH
35290: LD_INT 2
35292: NEG
35293: PUSH
35294: LD_INT 3
35296: NEG
35297: PUSH
35298: EMPTY
35299: LIST
35300: LIST
35301: PUSH
35302: LD_INT 1
35304: NEG
35305: PUSH
35306: LD_INT 3
35308: NEG
35309: PUSH
35310: EMPTY
35311: LIST
35312: LIST
35313: PUSH
35314: EMPTY
35315: LIST
35316: LIST
35317: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
35318: LD_ADDR_VAR 0 48
35322: PUSH
35323: LD_INT 1
35325: PUSH
35326: LD_INT 2
35328: NEG
35329: PUSH
35330: EMPTY
35331: LIST
35332: LIST
35333: PUSH
35334: LD_INT 2
35336: PUSH
35337: LD_INT 1
35339: NEG
35340: PUSH
35341: EMPTY
35342: LIST
35343: LIST
35344: PUSH
35345: EMPTY
35346: LIST
35347: LIST
35348: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
35349: LD_ADDR_VAR 0 49
35353: PUSH
35354: LD_INT 3
35356: PUSH
35357: LD_INT 1
35359: PUSH
35360: EMPTY
35361: LIST
35362: LIST
35363: PUSH
35364: LD_INT 3
35366: PUSH
35367: LD_INT 2
35369: PUSH
35370: EMPTY
35371: LIST
35372: LIST
35373: PUSH
35374: EMPTY
35375: LIST
35376: LIST
35377: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
35378: LD_ADDR_VAR 0 50
35382: PUSH
35383: LD_INT 2
35385: PUSH
35386: LD_INT 3
35388: PUSH
35389: EMPTY
35390: LIST
35391: LIST
35392: PUSH
35393: LD_INT 1
35395: PUSH
35396: LD_INT 3
35398: PUSH
35399: EMPTY
35400: LIST
35401: LIST
35402: PUSH
35403: EMPTY
35404: LIST
35405: LIST
35406: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
35407: LD_ADDR_VAR 0 51
35411: PUSH
35412: LD_INT 1
35414: NEG
35415: PUSH
35416: LD_INT 2
35418: PUSH
35419: EMPTY
35420: LIST
35421: LIST
35422: PUSH
35423: LD_INT 2
35425: NEG
35426: PUSH
35427: LD_INT 1
35429: PUSH
35430: EMPTY
35431: LIST
35432: LIST
35433: PUSH
35434: EMPTY
35435: LIST
35436: LIST
35437: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
35438: LD_ADDR_VAR 0 52
35442: PUSH
35443: LD_INT 3
35445: NEG
35446: PUSH
35447: LD_INT 1
35449: NEG
35450: PUSH
35451: EMPTY
35452: LIST
35453: LIST
35454: PUSH
35455: LD_INT 3
35457: NEG
35458: PUSH
35459: LD_INT 2
35461: NEG
35462: PUSH
35463: EMPTY
35464: LIST
35465: LIST
35466: PUSH
35467: EMPTY
35468: LIST
35469: LIST
35470: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
35471: LD_ADDR_VAR 0 53
35475: PUSH
35476: LD_INT 1
35478: NEG
35479: PUSH
35480: LD_INT 3
35482: NEG
35483: PUSH
35484: EMPTY
35485: LIST
35486: LIST
35487: PUSH
35488: LD_INT 0
35490: PUSH
35491: LD_INT 3
35493: NEG
35494: PUSH
35495: EMPTY
35496: LIST
35497: LIST
35498: PUSH
35499: LD_INT 1
35501: PUSH
35502: LD_INT 2
35504: NEG
35505: PUSH
35506: EMPTY
35507: LIST
35508: LIST
35509: PUSH
35510: EMPTY
35511: LIST
35512: LIST
35513: LIST
35514: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
35515: LD_ADDR_VAR 0 54
35519: PUSH
35520: LD_INT 2
35522: PUSH
35523: LD_INT 1
35525: NEG
35526: PUSH
35527: EMPTY
35528: LIST
35529: LIST
35530: PUSH
35531: LD_INT 3
35533: PUSH
35534: LD_INT 0
35536: PUSH
35537: EMPTY
35538: LIST
35539: LIST
35540: PUSH
35541: LD_INT 3
35543: PUSH
35544: LD_INT 1
35546: PUSH
35547: EMPTY
35548: LIST
35549: LIST
35550: PUSH
35551: EMPTY
35552: LIST
35553: LIST
35554: LIST
35555: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
35556: LD_ADDR_VAR 0 55
35560: PUSH
35561: LD_INT 3
35563: PUSH
35564: LD_INT 2
35566: PUSH
35567: EMPTY
35568: LIST
35569: LIST
35570: PUSH
35571: LD_INT 3
35573: PUSH
35574: LD_INT 3
35576: PUSH
35577: EMPTY
35578: LIST
35579: LIST
35580: PUSH
35581: LD_INT 2
35583: PUSH
35584: LD_INT 3
35586: PUSH
35587: EMPTY
35588: LIST
35589: LIST
35590: PUSH
35591: EMPTY
35592: LIST
35593: LIST
35594: LIST
35595: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
35596: LD_ADDR_VAR 0 56
35600: PUSH
35601: LD_INT 1
35603: PUSH
35604: LD_INT 3
35606: PUSH
35607: EMPTY
35608: LIST
35609: LIST
35610: PUSH
35611: LD_INT 0
35613: PUSH
35614: LD_INT 3
35616: PUSH
35617: EMPTY
35618: LIST
35619: LIST
35620: PUSH
35621: LD_INT 1
35623: NEG
35624: PUSH
35625: LD_INT 2
35627: PUSH
35628: EMPTY
35629: LIST
35630: LIST
35631: PUSH
35632: EMPTY
35633: LIST
35634: LIST
35635: LIST
35636: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
35637: LD_ADDR_VAR 0 57
35641: PUSH
35642: LD_INT 2
35644: NEG
35645: PUSH
35646: LD_INT 1
35648: PUSH
35649: EMPTY
35650: LIST
35651: LIST
35652: PUSH
35653: LD_INT 3
35655: NEG
35656: PUSH
35657: LD_INT 0
35659: PUSH
35660: EMPTY
35661: LIST
35662: LIST
35663: PUSH
35664: LD_INT 3
35666: NEG
35667: PUSH
35668: LD_INT 1
35670: NEG
35671: PUSH
35672: EMPTY
35673: LIST
35674: LIST
35675: PUSH
35676: EMPTY
35677: LIST
35678: LIST
35679: LIST
35680: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
35681: LD_ADDR_VAR 0 58
35685: PUSH
35686: LD_INT 2
35688: NEG
35689: PUSH
35690: LD_INT 3
35692: NEG
35693: PUSH
35694: EMPTY
35695: LIST
35696: LIST
35697: PUSH
35698: LD_INT 3
35700: NEG
35701: PUSH
35702: LD_INT 2
35704: NEG
35705: PUSH
35706: EMPTY
35707: LIST
35708: LIST
35709: PUSH
35710: LD_INT 3
35712: NEG
35713: PUSH
35714: LD_INT 3
35716: NEG
35717: PUSH
35718: EMPTY
35719: LIST
35720: LIST
35721: PUSH
35722: EMPTY
35723: LIST
35724: LIST
35725: LIST
35726: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
35727: LD_ADDR_VAR 0 59
35731: PUSH
35732: LD_INT 1
35734: NEG
35735: PUSH
35736: LD_INT 2
35738: NEG
35739: PUSH
35740: EMPTY
35741: LIST
35742: LIST
35743: PUSH
35744: LD_INT 0
35746: PUSH
35747: LD_INT 2
35749: NEG
35750: PUSH
35751: EMPTY
35752: LIST
35753: LIST
35754: PUSH
35755: LD_INT 1
35757: PUSH
35758: LD_INT 1
35760: NEG
35761: PUSH
35762: EMPTY
35763: LIST
35764: LIST
35765: PUSH
35766: EMPTY
35767: LIST
35768: LIST
35769: LIST
35770: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
35771: LD_ADDR_VAR 0 60
35775: PUSH
35776: LD_INT 1
35778: PUSH
35779: LD_INT 1
35781: NEG
35782: PUSH
35783: EMPTY
35784: LIST
35785: LIST
35786: PUSH
35787: LD_INT 2
35789: PUSH
35790: LD_INT 0
35792: PUSH
35793: EMPTY
35794: LIST
35795: LIST
35796: PUSH
35797: LD_INT 2
35799: PUSH
35800: LD_INT 1
35802: PUSH
35803: EMPTY
35804: LIST
35805: LIST
35806: PUSH
35807: EMPTY
35808: LIST
35809: LIST
35810: LIST
35811: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
35812: LD_ADDR_VAR 0 61
35816: PUSH
35817: LD_INT 2
35819: PUSH
35820: LD_INT 1
35822: PUSH
35823: EMPTY
35824: LIST
35825: LIST
35826: PUSH
35827: LD_INT 2
35829: PUSH
35830: LD_INT 2
35832: PUSH
35833: EMPTY
35834: LIST
35835: LIST
35836: PUSH
35837: LD_INT 1
35839: PUSH
35840: LD_INT 2
35842: PUSH
35843: EMPTY
35844: LIST
35845: LIST
35846: PUSH
35847: EMPTY
35848: LIST
35849: LIST
35850: LIST
35851: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
35852: LD_ADDR_VAR 0 62
35856: PUSH
35857: LD_INT 1
35859: PUSH
35860: LD_INT 2
35862: PUSH
35863: EMPTY
35864: LIST
35865: LIST
35866: PUSH
35867: LD_INT 0
35869: PUSH
35870: LD_INT 2
35872: PUSH
35873: EMPTY
35874: LIST
35875: LIST
35876: PUSH
35877: LD_INT 1
35879: NEG
35880: PUSH
35881: LD_INT 1
35883: PUSH
35884: EMPTY
35885: LIST
35886: LIST
35887: PUSH
35888: EMPTY
35889: LIST
35890: LIST
35891: LIST
35892: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
35893: LD_ADDR_VAR 0 63
35897: PUSH
35898: LD_INT 1
35900: NEG
35901: PUSH
35902: LD_INT 1
35904: PUSH
35905: EMPTY
35906: LIST
35907: LIST
35908: PUSH
35909: LD_INT 2
35911: NEG
35912: PUSH
35913: LD_INT 0
35915: PUSH
35916: EMPTY
35917: LIST
35918: LIST
35919: PUSH
35920: LD_INT 2
35922: NEG
35923: PUSH
35924: LD_INT 1
35926: NEG
35927: PUSH
35928: EMPTY
35929: LIST
35930: LIST
35931: PUSH
35932: EMPTY
35933: LIST
35934: LIST
35935: LIST
35936: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35937: LD_ADDR_VAR 0 64
35941: PUSH
35942: LD_INT 1
35944: NEG
35945: PUSH
35946: LD_INT 2
35948: NEG
35949: PUSH
35950: EMPTY
35951: LIST
35952: LIST
35953: PUSH
35954: LD_INT 2
35956: NEG
35957: PUSH
35958: LD_INT 1
35960: NEG
35961: PUSH
35962: EMPTY
35963: LIST
35964: LIST
35965: PUSH
35966: LD_INT 2
35968: NEG
35969: PUSH
35970: LD_INT 2
35972: NEG
35973: PUSH
35974: EMPTY
35975: LIST
35976: LIST
35977: PUSH
35978: EMPTY
35979: LIST
35980: LIST
35981: LIST
35982: ST_TO_ADDR
// end ; 2 :
35983: GO 39249
35985: LD_INT 2
35987: DOUBLE
35988: EQUAL
35989: IFTRUE 35993
35991: GO 39248
35993: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
35994: LD_ADDR_VAR 0 29
35998: PUSH
35999: LD_INT 4
36001: PUSH
36002: LD_INT 0
36004: PUSH
36005: EMPTY
36006: LIST
36007: LIST
36008: PUSH
36009: LD_INT 4
36011: PUSH
36012: LD_INT 1
36014: NEG
36015: PUSH
36016: EMPTY
36017: LIST
36018: LIST
36019: PUSH
36020: LD_INT 5
36022: PUSH
36023: LD_INT 0
36025: PUSH
36026: EMPTY
36027: LIST
36028: LIST
36029: PUSH
36030: LD_INT 5
36032: PUSH
36033: LD_INT 1
36035: PUSH
36036: EMPTY
36037: LIST
36038: LIST
36039: PUSH
36040: LD_INT 4
36042: PUSH
36043: LD_INT 1
36045: PUSH
36046: EMPTY
36047: LIST
36048: LIST
36049: PUSH
36050: LD_INT 3
36052: PUSH
36053: LD_INT 0
36055: PUSH
36056: EMPTY
36057: LIST
36058: LIST
36059: PUSH
36060: LD_INT 3
36062: PUSH
36063: LD_INT 1
36065: NEG
36066: PUSH
36067: EMPTY
36068: LIST
36069: LIST
36070: PUSH
36071: LD_INT 3
36073: PUSH
36074: LD_INT 2
36076: NEG
36077: PUSH
36078: EMPTY
36079: LIST
36080: LIST
36081: PUSH
36082: LD_INT 5
36084: PUSH
36085: LD_INT 2
36087: PUSH
36088: EMPTY
36089: LIST
36090: LIST
36091: PUSH
36092: LD_INT 3
36094: PUSH
36095: LD_INT 3
36097: PUSH
36098: EMPTY
36099: LIST
36100: LIST
36101: PUSH
36102: LD_INT 3
36104: PUSH
36105: LD_INT 2
36107: PUSH
36108: EMPTY
36109: LIST
36110: LIST
36111: PUSH
36112: LD_INT 4
36114: PUSH
36115: LD_INT 3
36117: PUSH
36118: EMPTY
36119: LIST
36120: LIST
36121: PUSH
36122: LD_INT 4
36124: PUSH
36125: LD_INT 4
36127: PUSH
36128: EMPTY
36129: LIST
36130: LIST
36131: PUSH
36132: LD_INT 3
36134: PUSH
36135: LD_INT 4
36137: PUSH
36138: EMPTY
36139: LIST
36140: LIST
36141: PUSH
36142: LD_INT 2
36144: PUSH
36145: LD_INT 3
36147: PUSH
36148: EMPTY
36149: LIST
36150: LIST
36151: PUSH
36152: LD_INT 2
36154: PUSH
36155: LD_INT 2
36157: PUSH
36158: EMPTY
36159: LIST
36160: LIST
36161: PUSH
36162: LD_INT 4
36164: PUSH
36165: LD_INT 2
36167: PUSH
36168: EMPTY
36169: LIST
36170: LIST
36171: PUSH
36172: LD_INT 2
36174: PUSH
36175: LD_INT 4
36177: PUSH
36178: EMPTY
36179: LIST
36180: LIST
36181: PUSH
36182: LD_INT 0
36184: PUSH
36185: LD_INT 4
36187: PUSH
36188: EMPTY
36189: LIST
36190: LIST
36191: PUSH
36192: LD_INT 0
36194: PUSH
36195: LD_INT 3
36197: PUSH
36198: EMPTY
36199: LIST
36200: LIST
36201: PUSH
36202: LD_INT 1
36204: PUSH
36205: LD_INT 4
36207: PUSH
36208: EMPTY
36209: LIST
36210: LIST
36211: PUSH
36212: LD_INT 1
36214: PUSH
36215: LD_INT 5
36217: PUSH
36218: EMPTY
36219: LIST
36220: LIST
36221: PUSH
36222: LD_INT 0
36224: PUSH
36225: LD_INT 5
36227: PUSH
36228: EMPTY
36229: LIST
36230: LIST
36231: PUSH
36232: LD_INT 1
36234: NEG
36235: PUSH
36236: LD_INT 4
36238: PUSH
36239: EMPTY
36240: LIST
36241: LIST
36242: PUSH
36243: LD_INT 1
36245: NEG
36246: PUSH
36247: LD_INT 3
36249: PUSH
36250: EMPTY
36251: LIST
36252: LIST
36253: PUSH
36254: LD_INT 2
36256: PUSH
36257: LD_INT 5
36259: PUSH
36260: EMPTY
36261: LIST
36262: LIST
36263: PUSH
36264: LD_INT 2
36266: NEG
36267: PUSH
36268: LD_INT 3
36270: PUSH
36271: EMPTY
36272: LIST
36273: LIST
36274: PUSH
36275: LD_INT 3
36277: NEG
36278: PUSH
36279: LD_INT 0
36281: PUSH
36282: EMPTY
36283: LIST
36284: LIST
36285: PUSH
36286: LD_INT 3
36288: NEG
36289: PUSH
36290: LD_INT 1
36292: NEG
36293: PUSH
36294: EMPTY
36295: LIST
36296: LIST
36297: PUSH
36298: LD_INT 2
36300: NEG
36301: PUSH
36302: LD_INT 0
36304: PUSH
36305: EMPTY
36306: LIST
36307: LIST
36308: PUSH
36309: LD_INT 2
36311: NEG
36312: PUSH
36313: LD_INT 1
36315: PUSH
36316: EMPTY
36317: LIST
36318: LIST
36319: PUSH
36320: LD_INT 3
36322: NEG
36323: PUSH
36324: LD_INT 1
36326: PUSH
36327: EMPTY
36328: LIST
36329: LIST
36330: PUSH
36331: LD_INT 4
36333: NEG
36334: PUSH
36335: LD_INT 0
36337: PUSH
36338: EMPTY
36339: LIST
36340: LIST
36341: PUSH
36342: LD_INT 4
36344: NEG
36345: PUSH
36346: LD_INT 1
36348: NEG
36349: PUSH
36350: EMPTY
36351: LIST
36352: LIST
36353: PUSH
36354: LD_INT 4
36356: NEG
36357: PUSH
36358: LD_INT 2
36360: NEG
36361: PUSH
36362: EMPTY
36363: LIST
36364: LIST
36365: PUSH
36366: LD_INT 2
36368: NEG
36369: PUSH
36370: LD_INT 2
36372: PUSH
36373: EMPTY
36374: LIST
36375: LIST
36376: PUSH
36377: LD_INT 4
36379: NEG
36380: PUSH
36381: LD_INT 4
36383: NEG
36384: PUSH
36385: EMPTY
36386: LIST
36387: LIST
36388: PUSH
36389: LD_INT 4
36391: NEG
36392: PUSH
36393: LD_INT 5
36395: NEG
36396: PUSH
36397: EMPTY
36398: LIST
36399: LIST
36400: PUSH
36401: LD_INT 3
36403: NEG
36404: PUSH
36405: LD_INT 4
36407: NEG
36408: PUSH
36409: EMPTY
36410: LIST
36411: LIST
36412: PUSH
36413: LD_INT 3
36415: NEG
36416: PUSH
36417: LD_INT 3
36419: NEG
36420: PUSH
36421: EMPTY
36422: LIST
36423: LIST
36424: PUSH
36425: LD_INT 4
36427: NEG
36428: PUSH
36429: LD_INT 3
36431: NEG
36432: PUSH
36433: EMPTY
36434: LIST
36435: LIST
36436: PUSH
36437: LD_INT 5
36439: NEG
36440: PUSH
36441: LD_INT 4
36443: NEG
36444: PUSH
36445: EMPTY
36446: LIST
36447: LIST
36448: PUSH
36449: LD_INT 5
36451: NEG
36452: PUSH
36453: LD_INT 5
36455: NEG
36456: PUSH
36457: EMPTY
36458: LIST
36459: LIST
36460: PUSH
36461: LD_INT 3
36463: NEG
36464: PUSH
36465: LD_INT 5
36467: NEG
36468: PUSH
36469: EMPTY
36470: LIST
36471: LIST
36472: PUSH
36473: LD_INT 5
36475: NEG
36476: PUSH
36477: LD_INT 3
36479: NEG
36480: PUSH
36481: EMPTY
36482: LIST
36483: LIST
36484: PUSH
36485: EMPTY
36486: LIST
36487: LIST
36488: LIST
36489: LIST
36490: LIST
36491: LIST
36492: LIST
36493: LIST
36494: LIST
36495: LIST
36496: LIST
36497: LIST
36498: LIST
36499: LIST
36500: LIST
36501: LIST
36502: LIST
36503: LIST
36504: LIST
36505: LIST
36506: LIST
36507: LIST
36508: LIST
36509: LIST
36510: LIST
36511: LIST
36512: LIST
36513: LIST
36514: LIST
36515: LIST
36516: LIST
36517: LIST
36518: LIST
36519: LIST
36520: LIST
36521: LIST
36522: LIST
36523: LIST
36524: LIST
36525: LIST
36526: LIST
36527: LIST
36528: LIST
36529: LIST
36530: LIST
36531: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
36532: LD_ADDR_VAR 0 30
36536: PUSH
36537: LD_INT 4
36539: PUSH
36540: LD_INT 4
36542: PUSH
36543: EMPTY
36544: LIST
36545: LIST
36546: PUSH
36547: LD_INT 4
36549: PUSH
36550: LD_INT 3
36552: PUSH
36553: EMPTY
36554: LIST
36555: LIST
36556: PUSH
36557: LD_INT 5
36559: PUSH
36560: LD_INT 4
36562: PUSH
36563: EMPTY
36564: LIST
36565: LIST
36566: PUSH
36567: LD_INT 5
36569: PUSH
36570: LD_INT 5
36572: PUSH
36573: EMPTY
36574: LIST
36575: LIST
36576: PUSH
36577: LD_INT 4
36579: PUSH
36580: LD_INT 5
36582: PUSH
36583: EMPTY
36584: LIST
36585: LIST
36586: PUSH
36587: LD_INT 3
36589: PUSH
36590: LD_INT 4
36592: PUSH
36593: EMPTY
36594: LIST
36595: LIST
36596: PUSH
36597: LD_INT 3
36599: PUSH
36600: LD_INT 3
36602: PUSH
36603: EMPTY
36604: LIST
36605: LIST
36606: PUSH
36607: LD_INT 5
36609: PUSH
36610: LD_INT 3
36612: PUSH
36613: EMPTY
36614: LIST
36615: LIST
36616: PUSH
36617: LD_INT 3
36619: PUSH
36620: LD_INT 5
36622: PUSH
36623: EMPTY
36624: LIST
36625: LIST
36626: PUSH
36627: LD_INT 0
36629: PUSH
36630: LD_INT 3
36632: PUSH
36633: EMPTY
36634: LIST
36635: LIST
36636: PUSH
36637: LD_INT 0
36639: PUSH
36640: LD_INT 2
36642: PUSH
36643: EMPTY
36644: LIST
36645: LIST
36646: PUSH
36647: LD_INT 1
36649: PUSH
36650: LD_INT 3
36652: PUSH
36653: EMPTY
36654: LIST
36655: LIST
36656: PUSH
36657: LD_INT 1
36659: PUSH
36660: LD_INT 4
36662: PUSH
36663: EMPTY
36664: LIST
36665: LIST
36666: PUSH
36667: LD_INT 0
36669: PUSH
36670: LD_INT 4
36672: PUSH
36673: EMPTY
36674: LIST
36675: LIST
36676: PUSH
36677: LD_INT 1
36679: NEG
36680: PUSH
36681: LD_INT 3
36683: PUSH
36684: EMPTY
36685: LIST
36686: LIST
36687: PUSH
36688: LD_INT 1
36690: NEG
36691: PUSH
36692: LD_INT 2
36694: PUSH
36695: EMPTY
36696: LIST
36697: LIST
36698: PUSH
36699: LD_INT 2
36701: PUSH
36702: LD_INT 4
36704: PUSH
36705: EMPTY
36706: LIST
36707: LIST
36708: PUSH
36709: LD_INT 2
36711: NEG
36712: PUSH
36713: LD_INT 2
36715: PUSH
36716: EMPTY
36717: LIST
36718: LIST
36719: PUSH
36720: LD_INT 4
36722: NEG
36723: PUSH
36724: LD_INT 0
36726: PUSH
36727: EMPTY
36728: LIST
36729: LIST
36730: PUSH
36731: LD_INT 4
36733: NEG
36734: PUSH
36735: LD_INT 1
36737: NEG
36738: PUSH
36739: EMPTY
36740: LIST
36741: LIST
36742: PUSH
36743: LD_INT 3
36745: NEG
36746: PUSH
36747: LD_INT 0
36749: PUSH
36750: EMPTY
36751: LIST
36752: LIST
36753: PUSH
36754: LD_INT 3
36756: NEG
36757: PUSH
36758: LD_INT 1
36760: PUSH
36761: EMPTY
36762: LIST
36763: LIST
36764: PUSH
36765: LD_INT 4
36767: NEG
36768: PUSH
36769: LD_INT 1
36771: PUSH
36772: EMPTY
36773: LIST
36774: LIST
36775: PUSH
36776: LD_INT 5
36778: NEG
36779: PUSH
36780: LD_INT 0
36782: PUSH
36783: EMPTY
36784: LIST
36785: LIST
36786: PUSH
36787: LD_INT 5
36789: NEG
36790: PUSH
36791: LD_INT 1
36793: NEG
36794: PUSH
36795: EMPTY
36796: LIST
36797: LIST
36798: PUSH
36799: LD_INT 5
36801: NEG
36802: PUSH
36803: LD_INT 2
36805: NEG
36806: PUSH
36807: EMPTY
36808: LIST
36809: LIST
36810: PUSH
36811: LD_INT 3
36813: NEG
36814: PUSH
36815: LD_INT 2
36817: PUSH
36818: EMPTY
36819: LIST
36820: LIST
36821: PUSH
36822: LD_INT 3
36824: NEG
36825: PUSH
36826: LD_INT 3
36828: NEG
36829: PUSH
36830: EMPTY
36831: LIST
36832: LIST
36833: PUSH
36834: LD_INT 3
36836: NEG
36837: PUSH
36838: LD_INT 4
36840: NEG
36841: PUSH
36842: EMPTY
36843: LIST
36844: LIST
36845: PUSH
36846: LD_INT 2
36848: NEG
36849: PUSH
36850: LD_INT 3
36852: NEG
36853: PUSH
36854: EMPTY
36855: LIST
36856: LIST
36857: PUSH
36858: LD_INT 2
36860: NEG
36861: PUSH
36862: LD_INT 2
36864: NEG
36865: PUSH
36866: EMPTY
36867: LIST
36868: LIST
36869: PUSH
36870: LD_INT 3
36872: NEG
36873: PUSH
36874: LD_INT 2
36876: NEG
36877: PUSH
36878: EMPTY
36879: LIST
36880: LIST
36881: PUSH
36882: LD_INT 4
36884: NEG
36885: PUSH
36886: LD_INT 3
36888: NEG
36889: PUSH
36890: EMPTY
36891: LIST
36892: LIST
36893: PUSH
36894: LD_INT 4
36896: NEG
36897: PUSH
36898: LD_INT 4
36900: NEG
36901: PUSH
36902: EMPTY
36903: LIST
36904: LIST
36905: PUSH
36906: LD_INT 2
36908: NEG
36909: PUSH
36910: LD_INT 4
36912: NEG
36913: PUSH
36914: EMPTY
36915: LIST
36916: LIST
36917: PUSH
36918: LD_INT 4
36920: NEG
36921: PUSH
36922: LD_INT 2
36924: NEG
36925: PUSH
36926: EMPTY
36927: LIST
36928: LIST
36929: PUSH
36930: LD_INT 0
36932: PUSH
36933: LD_INT 4
36935: NEG
36936: PUSH
36937: EMPTY
36938: LIST
36939: LIST
36940: PUSH
36941: LD_INT 0
36943: PUSH
36944: LD_INT 5
36946: NEG
36947: PUSH
36948: EMPTY
36949: LIST
36950: LIST
36951: PUSH
36952: LD_INT 1
36954: PUSH
36955: LD_INT 4
36957: NEG
36958: PUSH
36959: EMPTY
36960: LIST
36961: LIST
36962: PUSH
36963: LD_INT 1
36965: PUSH
36966: LD_INT 3
36968: NEG
36969: PUSH
36970: EMPTY
36971: LIST
36972: LIST
36973: PUSH
36974: LD_INT 0
36976: PUSH
36977: LD_INT 3
36979: NEG
36980: PUSH
36981: EMPTY
36982: LIST
36983: LIST
36984: PUSH
36985: LD_INT 1
36987: NEG
36988: PUSH
36989: LD_INT 4
36991: NEG
36992: PUSH
36993: EMPTY
36994: LIST
36995: LIST
36996: PUSH
36997: LD_INT 1
36999: NEG
37000: PUSH
37001: LD_INT 5
37003: NEG
37004: PUSH
37005: EMPTY
37006: LIST
37007: LIST
37008: PUSH
37009: LD_INT 2
37011: PUSH
37012: LD_INT 3
37014: NEG
37015: PUSH
37016: EMPTY
37017: LIST
37018: LIST
37019: PUSH
37020: LD_INT 2
37022: NEG
37023: PUSH
37024: LD_INT 5
37026: NEG
37027: PUSH
37028: EMPTY
37029: LIST
37030: LIST
37031: PUSH
37032: EMPTY
37033: LIST
37034: LIST
37035: LIST
37036: LIST
37037: LIST
37038: LIST
37039: LIST
37040: LIST
37041: LIST
37042: LIST
37043: LIST
37044: LIST
37045: LIST
37046: LIST
37047: LIST
37048: LIST
37049: LIST
37050: LIST
37051: LIST
37052: LIST
37053: LIST
37054: LIST
37055: LIST
37056: LIST
37057: LIST
37058: LIST
37059: LIST
37060: LIST
37061: LIST
37062: LIST
37063: LIST
37064: LIST
37065: LIST
37066: LIST
37067: LIST
37068: LIST
37069: LIST
37070: LIST
37071: LIST
37072: LIST
37073: LIST
37074: LIST
37075: LIST
37076: LIST
37077: LIST
37078: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
37079: LD_ADDR_VAR 0 31
37083: PUSH
37084: LD_INT 0
37086: PUSH
37087: LD_INT 4
37089: PUSH
37090: EMPTY
37091: LIST
37092: LIST
37093: PUSH
37094: LD_INT 0
37096: PUSH
37097: LD_INT 3
37099: PUSH
37100: EMPTY
37101: LIST
37102: LIST
37103: PUSH
37104: LD_INT 1
37106: PUSH
37107: LD_INT 4
37109: PUSH
37110: EMPTY
37111: LIST
37112: LIST
37113: PUSH
37114: LD_INT 1
37116: PUSH
37117: LD_INT 5
37119: PUSH
37120: EMPTY
37121: LIST
37122: LIST
37123: PUSH
37124: LD_INT 0
37126: PUSH
37127: LD_INT 5
37129: PUSH
37130: EMPTY
37131: LIST
37132: LIST
37133: PUSH
37134: LD_INT 1
37136: NEG
37137: PUSH
37138: LD_INT 4
37140: PUSH
37141: EMPTY
37142: LIST
37143: LIST
37144: PUSH
37145: LD_INT 1
37147: NEG
37148: PUSH
37149: LD_INT 3
37151: PUSH
37152: EMPTY
37153: LIST
37154: LIST
37155: PUSH
37156: LD_INT 2
37158: PUSH
37159: LD_INT 5
37161: PUSH
37162: EMPTY
37163: LIST
37164: LIST
37165: PUSH
37166: LD_INT 2
37168: NEG
37169: PUSH
37170: LD_INT 3
37172: PUSH
37173: EMPTY
37174: LIST
37175: LIST
37176: PUSH
37177: LD_INT 3
37179: NEG
37180: PUSH
37181: LD_INT 0
37183: PUSH
37184: EMPTY
37185: LIST
37186: LIST
37187: PUSH
37188: LD_INT 3
37190: NEG
37191: PUSH
37192: LD_INT 1
37194: NEG
37195: PUSH
37196: EMPTY
37197: LIST
37198: LIST
37199: PUSH
37200: LD_INT 2
37202: NEG
37203: PUSH
37204: LD_INT 0
37206: PUSH
37207: EMPTY
37208: LIST
37209: LIST
37210: PUSH
37211: LD_INT 2
37213: NEG
37214: PUSH
37215: LD_INT 1
37217: PUSH
37218: EMPTY
37219: LIST
37220: LIST
37221: PUSH
37222: LD_INT 3
37224: NEG
37225: PUSH
37226: LD_INT 1
37228: PUSH
37229: EMPTY
37230: LIST
37231: LIST
37232: PUSH
37233: LD_INT 4
37235: NEG
37236: PUSH
37237: LD_INT 0
37239: PUSH
37240: EMPTY
37241: LIST
37242: LIST
37243: PUSH
37244: LD_INT 4
37246: NEG
37247: PUSH
37248: LD_INT 1
37250: NEG
37251: PUSH
37252: EMPTY
37253: LIST
37254: LIST
37255: PUSH
37256: LD_INT 4
37258: NEG
37259: PUSH
37260: LD_INT 2
37262: NEG
37263: PUSH
37264: EMPTY
37265: LIST
37266: LIST
37267: PUSH
37268: LD_INT 2
37270: NEG
37271: PUSH
37272: LD_INT 2
37274: PUSH
37275: EMPTY
37276: LIST
37277: LIST
37278: PUSH
37279: LD_INT 4
37281: NEG
37282: PUSH
37283: LD_INT 4
37285: NEG
37286: PUSH
37287: EMPTY
37288: LIST
37289: LIST
37290: PUSH
37291: LD_INT 4
37293: NEG
37294: PUSH
37295: LD_INT 5
37297: NEG
37298: PUSH
37299: EMPTY
37300: LIST
37301: LIST
37302: PUSH
37303: LD_INT 3
37305: NEG
37306: PUSH
37307: LD_INT 4
37309: NEG
37310: PUSH
37311: EMPTY
37312: LIST
37313: LIST
37314: PUSH
37315: LD_INT 3
37317: NEG
37318: PUSH
37319: LD_INT 3
37321: NEG
37322: PUSH
37323: EMPTY
37324: LIST
37325: LIST
37326: PUSH
37327: LD_INT 4
37329: NEG
37330: PUSH
37331: LD_INT 3
37333: NEG
37334: PUSH
37335: EMPTY
37336: LIST
37337: LIST
37338: PUSH
37339: LD_INT 5
37341: NEG
37342: PUSH
37343: LD_INT 4
37345: NEG
37346: PUSH
37347: EMPTY
37348: LIST
37349: LIST
37350: PUSH
37351: LD_INT 5
37353: NEG
37354: PUSH
37355: LD_INT 5
37357: NEG
37358: PUSH
37359: EMPTY
37360: LIST
37361: LIST
37362: PUSH
37363: LD_INT 3
37365: NEG
37366: PUSH
37367: LD_INT 5
37369: NEG
37370: PUSH
37371: EMPTY
37372: LIST
37373: LIST
37374: PUSH
37375: LD_INT 5
37377: NEG
37378: PUSH
37379: LD_INT 3
37381: NEG
37382: PUSH
37383: EMPTY
37384: LIST
37385: LIST
37386: PUSH
37387: LD_INT 0
37389: PUSH
37390: LD_INT 3
37392: NEG
37393: PUSH
37394: EMPTY
37395: LIST
37396: LIST
37397: PUSH
37398: LD_INT 0
37400: PUSH
37401: LD_INT 4
37403: NEG
37404: PUSH
37405: EMPTY
37406: LIST
37407: LIST
37408: PUSH
37409: LD_INT 1
37411: PUSH
37412: LD_INT 3
37414: NEG
37415: PUSH
37416: EMPTY
37417: LIST
37418: LIST
37419: PUSH
37420: LD_INT 1
37422: PUSH
37423: LD_INT 2
37425: NEG
37426: PUSH
37427: EMPTY
37428: LIST
37429: LIST
37430: PUSH
37431: LD_INT 0
37433: PUSH
37434: LD_INT 2
37436: NEG
37437: PUSH
37438: EMPTY
37439: LIST
37440: LIST
37441: PUSH
37442: LD_INT 1
37444: NEG
37445: PUSH
37446: LD_INT 3
37448: NEG
37449: PUSH
37450: EMPTY
37451: LIST
37452: LIST
37453: PUSH
37454: LD_INT 1
37456: NEG
37457: PUSH
37458: LD_INT 4
37460: NEG
37461: PUSH
37462: EMPTY
37463: LIST
37464: LIST
37465: PUSH
37466: LD_INT 2
37468: PUSH
37469: LD_INT 2
37471: NEG
37472: PUSH
37473: EMPTY
37474: LIST
37475: LIST
37476: PUSH
37477: LD_INT 2
37479: NEG
37480: PUSH
37481: LD_INT 4
37483: NEG
37484: PUSH
37485: EMPTY
37486: LIST
37487: LIST
37488: PUSH
37489: LD_INT 4
37491: PUSH
37492: LD_INT 0
37494: PUSH
37495: EMPTY
37496: LIST
37497: LIST
37498: PUSH
37499: LD_INT 4
37501: PUSH
37502: LD_INT 1
37504: NEG
37505: PUSH
37506: EMPTY
37507: LIST
37508: LIST
37509: PUSH
37510: LD_INT 5
37512: PUSH
37513: LD_INT 0
37515: PUSH
37516: EMPTY
37517: LIST
37518: LIST
37519: PUSH
37520: LD_INT 5
37522: PUSH
37523: LD_INT 1
37525: PUSH
37526: EMPTY
37527: LIST
37528: LIST
37529: PUSH
37530: LD_INT 4
37532: PUSH
37533: LD_INT 1
37535: PUSH
37536: EMPTY
37537: LIST
37538: LIST
37539: PUSH
37540: LD_INT 3
37542: PUSH
37543: LD_INT 0
37545: PUSH
37546: EMPTY
37547: LIST
37548: LIST
37549: PUSH
37550: LD_INT 3
37552: PUSH
37553: LD_INT 1
37555: NEG
37556: PUSH
37557: EMPTY
37558: LIST
37559: LIST
37560: PUSH
37561: LD_INT 3
37563: PUSH
37564: LD_INT 2
37566: NEG
37567: PUSH
37568: EMPTY
37569: LIST
37570: LIST
37571: PUSH
37572: LD_INT 5
37574: PUSH
37575: LD_INT 2
37577: PUSH
37578: EMPTY
37579: LIST
37580: LIST
37581: PUSH
37582: EMPTY
37583: LIST
37584: LIST
37585: LIST
37586: LIST
37587: LIST
37588: LIST
37589: LIST
37590: LIST
37591: LIST
37592: LIST
37593: LIST
37594: LIST
37595: LIST
37596: LIST
37597: LIST
37598: LIST
37599: LIST
37600: LIST
37601: LIST
37602: LIST
37603: LIST
37604: LIST
37605: LIST
37606: LIST
37607: LIST
37608: LIST
37609: LIST
37610: LIST
37611: LIST
37612: LIST
37613: LIST
37614: LIST
37615: LIST
37616: LIST
37617: LIST
37618: LIST
37619: LIST
37620: LIST
37621: LIST
37622: LIST
37623: LIST
37624: LIST
37625: LIST
37626: LIST
37627: LIST
37628: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
37629: LD_ADDR_VAR 0 32
37633: PUSH
37634: LD_INT 4
37636: NEG
37637: PUSH
37638: LD_INT 0
37640: PUSH
37641: EMPTY
37642: LIST
37643: LIST
37644: PUSH
37645: LD_INT 4
37647: NEG
37648: PUSH
37649: LD_INT 1
37651: NEG
37652: PUSH
37653: EMPTY
37654: LIST
37655: LIST
37656: PUSH
37657: LD_INT 3
37659: NEG
37660: PUSH
37661: LD_INT 0
37663: PUSH
37664: EMPTY
37665: LIST
37666: LIST
37667: PUSH
37668: LD_INT 3
37670: NEG
37671: PUSH
37672: LD_INT 1
37674: PUSH
37675: EMPTY
37676: LIST
37677: LIST
37678: PUSH
37679: LD_INT 4
37681: NEG
37682: PUSH
37683: LD_INT 1
37685: PUSH
37686: EMPTY
37687: LIST
37688: LIST
37689: PUSH
37690: LD_INT 5
37692: NEG
37693: PUSH
37694: LD_INT 0
37696: PUSH
37697: EMPTY
37698: LIST
37699: LIST
37700: PUSH
37701: LD_INT 5
37703: NEG
37704: PUSH
37705: LD_INT 1
37707: NEG
37708: PUSH
37709: EMPTY
37710: LIST
37711: LIST
37712: PUSH
37713: LD_INT 5
37715: NEG
37716: PUSH
37717: LD_INT 2
37719: NEG
37720: PUSH
37721: EMPTY
37722: LIST
37723: LIST
37724: PUSH
37725: LD_INT 3
37727: NEG
37728: PUSH
37729: LD_INT 2
37731: PUSH
37732: EMPTY
37733: LIST
37734: LIST
37735: PUSH
37736: LD_INT 3
37738: NEG
37739: PUSH
37740: LD_INT 3
37742: NEG
37743: PUSH
37744: EMPTY
37745: LIST
37746: LIST
37747: PUSH
37748: LD_INT 3
37750: NEG
37751: PUSH
37752: LD_INT 4
37754: NEG
37755: PUSH
37756: EMPTY
37757: LIST
37758: LIST
37759: PUSH
37760: LD_INT 2
37762: NEG
37763: PUSH
37764: LD_INT 3
37766: NEG
37767: PUSH
37768: EMPTY
37769: LIST
37770: LIST
37771: PUSH
37772: LD_INT 2
37774: NEG
37775: PUSH
37776: LD_INT 2
37778: NEG
37779: PUSH
37780: EMPTY
37781: LIST
37782: LIST
37783: PUSH
37784: LD_INT 3
37786: NEG
37787: PUSH
37788: LD_INT 2
37790: NEG
37791: PUSH
37792: EMPTY
37793: LIST
37794: LIST
37795: PUSH
37796: LD_INT 4
37798: NEG
37799: PUSH
37800: LD_INT 3
37802: NEG
37803: PUSH
37804: EMPTY
37805: LIST
37806: LIST
37807: PUSH
37808: LD_INT 4
37810: NEG
37811: PUSH
37812: LD_INT 4
37814: NEG
37815: PUSH
37816: EMPTY
37817: LIST
37818: LIST
37819: PUSH
37820: LD_INT 2
37822: NEG
37823: PUSH
37824: LD_INT 4
37826: NEG
37827: PUSH
37828: EMPTY
37829: LIST
37830: LIST
37831: PUSH
37832: LD_INT 4
37834: NEG
37835: PUSH
37836: LD_INT 2
37838: NEG
37839: PUSH
37840: EMPTY
37841: LIST
37842: LIST
37843: PUSH
37844: LD_INT 0
37846: PUSH
37847: LD_INT 4
37849: NEG
37850: PUSH
37851: EMPTY
37852: LIST
37853: LIST
37854: PUSH
37855: LD_INT 0
37857: PUSH
37858: LD_INT 5
37860: NEG
37861: PUSH
37862: EMPTY
37863: LIST
37864: LIST
37865: PUSH
37866: LD_INT 1
37868: PUSH
37869: LD_INT 4
37871: NEG
37872: PUSH
37873: EMPTY
37874: LIST
37875: LIST
37876: PUSH
37877: LD_INT 1
37879: PUSH
37880: LD_INT 3
37882: NEG
37883: PUSH
37884: EMPTY
37885: LIST
37886: LIST
37887: PUSH
37888: LD_INT 0
37890: PUSH
37891: LD_INT 3
37893: NEG
37894: PUSH
37895: EMPTY
37896: LIST
37897: LIST
37898: PUSH
37899: LD_INT 1
37901: NEG
37902: PUSH
37903: LD_INT 4
37905: NEG
37906: PUSH
37907: EMPTY
37908: LIST
37909: LIST
37910: PUSH
37911: LD_INT 1
37913: NEG
37914: PUSH
37915: LD_INT 5
37917: NEG
37918: PUSH
37919: EMPTY
37920: LIST
37921: LIST
37922: PUSH
37923: LD_INT 2
37925: PUSH
37926: LD_INT 3
37928: NEG
37929: PUSH
37930: EMPTY
37931: LIST
37932: LIST
37933: PUSH
37934: LD_INT 2
37936: NEG
37937: PUSH
37938: LD_INT 5
37940: NEG
37941: PUSH
37942: EMPTY
37943: LIST
37944: LIST
37945: PUSH
37946: LD_INT 3
37948: PUSH
37949: LD_INT 0
37951: PUSH
37952: EMPTY
37953: LIST
37954: LIST
37955: PUSH
37956: LD_INT 3
37958: PUSH
37959: LD_INT 1
37961: NEG
37962: PUSH
37963: EMPTY
37964: LIST
37965: LIST
37966: PUSH
37967: LD_INT 4
37969: PUSH
37970: LD_INT 0
37972: PUSH
37973: EMPTY
37974: LIST
37975: LIST
37976: PUSH
37977: LD_INT 4
37979: PUSH
37980: LD_INT 1
37982: PUSH
37983: EMPTY
37984: LIST
37985: LIST
37986: PUSH
37987: LD_INT 3
37989: PUSH
37990: LD_INT 1
37992: PUSH
37993: EMPTY
37994: LIST
37995: LIST
37996: PUSH
37997: LD_INT 2
37999: PUSH
38000: LD_INT 0
38002: PUSH
38003: EMPTY
38004: LIST
38005: LIST
38006: PUSH
38007: LD_INT 2
38009: PUSH
38010: LD_INT 1
38012: NEG
38013: PUSH
38014: EMPTY
38015: LIST
38016: LIST
38017: PUSH
38018: LD_INT 2
38020: PUSH
38021: LD_INT 2
38023: NEG
38024: PUSH
38025: EMPTY
38026: LIST
38027: LIST
38028: PUSH
38029: LD_INT 4
38031: PUSH
38032: LD_INT 2
38034: PUSH
38035: EMPTY
38036: LIST
38037: LIST
38038: PUSH
38039: LD_INT 4
38041: PUSH
38042: LD_INT 4
38044: PUSH
38045: EMPTY
38046: LIST
38047: LIST
38048: PUSH
38049: LD_INT 4
38051: PUSH
38052: LD_INT 3
38054: PUSH
38055: EMPTY
38056: LIST
38057: LIST
38058: PUSH
38059: LD_INT 5
38061: PUSH
38062: LD_INT 4
38064: PUSH
38065: EMPTY
38066: LIST
38067: LIST
38068: PUSH
38069: LD_INT 5
38071: PUSH
38072: LD_INT 5
38074: PUSH
38075: EMPTY
38076: LIST
38077: LIST
38078: PUSH
38079: LD_INT 4
38081: PUSH
38082: LD_INT 5
38084: PUSH
38085: EMPTY
38086: LIST
38087: LIST
38088: PUSH
38089: LD_INT 3
38091: PUSH
38092: LD_INT 4
38094: PUSH
38095: EMPTY
38096: LIST
38097: LIST
38098: PUSH
38099: LD_INT 3
38101: PUSH
38102: LD_INT 3
38104: PUSH
38105: EMPTY
38106: LIST
38107: LIST
38108: PUSH
38109: LD_INT 5
38111: PUSH
38112: LD_INT 3
38114: PUSH
38115: EMPTY
38116: LIST
38117: LIST
38118: PUSH
38119: LD_INT 3
38121: PUSH
38122: LD_INT 5
38124: PUSH
38125: EMPTY
38126: LIST
38127: LIST
38128: PUSH
38129: EMPTY
38130: LIST
38131: LIST
38132: LIST
38133: LIST
38134: LIST
38135: LIST
38136: LIST
38137: LIST
38138: LIST
38139: LIST
38140: LIST
38141: LIST
38142: LIST
38143: LIST
38144: LIST
38145: LIST
38146: LIST
38147: LIST
38148: LIST
38149: LIST
38150: LIST
38151: LIST
38152: LIST
38153: LIST
38154: LIST
38155: LIST
38156: LIST
38157: LIST
38158: LIST
38159: LIST
38160: LIST
38161: LIST
38162: LIST
38163: LIST
38164: LIST
38165: LIST
38166: LIST
38167: LIST
38168: LIST
38169: LIST
38170: LIST
38171: LIST
38172: LIST
38173: LIST
38174: LIST
38175: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
38176: LD_ADDR_VAR 0 33
38180: PUSH
38181: LD_INT 4
38183: NEG
38184: PUSH
38185: LD_INT 4
38187: NEG
38188: PUSH
38189: EMPTY
38190: LIST
38191: LIST
38192: PUSH
38193: LD_INT 4
38195: NEG
38196: PUSH
38197: LD_INT 5
38199: NEG
38200: PUSH
38201: EMPTY
38202: LIST
38203: LIST
38204: PUSH
38205: LD_INT 3
38207: NEG
38208: PUSH
38209: LD_INT 4
38211: NEG
38212: PUSH
38213: EMPTY
38214: LIST
38215: LIST
38216: PUSH
38217: LD_INT 3
38219: NEG
38220: PUSH
38221: LD_INT 3
38223: NEG
38224: PUSH
38225: EMPTY
38226: LIST
38227: LIST
38228: PUSH
38229: LD_INT 4
38231: NEG
38232: PUSH
38233: LD_INT 3
38235: NEG
38236: PUSH
38237: EMPTY
38238: LIST
38239: LIST
38240: PUSH
38241: LD_INT 5
38243: NEG
38244: PUSH
38245: LD_INT 4
38247: NEG
38248: PUSH
38249: EMPTY
38250: LIST
38251: LIST
38252: PUSH
38253: LD_INT 5
38255: NEG
38256: PUSH
38257: LD_INT 5
38259: NEG
38260: PUSH
38261: EMPTY
38262: LIST
38263: LIST
38264: PUSH
38265: LD_INT 3
38267: NEG
38268: PUSH
38269: LD_INT 5
38271: NEG
38272: PUSH
38273: EMPTY
38274: LIST
38275: LIST
38276: PUSH
38277: LD_INT 5
38279: NEG
38280: PUSH
38281: LD_INT 3
38283: NEG
38284: PUSH
38285: EMPTY
38286: LIST
38287: LIST
38288: PUSH
38289: LD_INT 0
38291: PUSH
38292: LD_INT 3
38294: NEG
38295: PUSH
38296: EMPTY
38297: LIST
38298: LIST
38299: PUSH
38300: LD_INT 0
38302: PUSH
38303: LD_INT 4
38305: NEG
38306: PUSH
38307: EMPTY
38308: LIST
38309: LIST
38310: PUSH
38311: LD_INT 1
38313: PUSH
38314: LD_INT 3
38316: NEG
38317: PUSH
38318: EMPTY
38319: LIST
38320: LIST
38321: PUSH
38322: LD_INT 1
38324: PUSH
38325: LD_INT 2
38327: NEG
38328: PUSH
38329: EMPTY
38330: LIST
38331: LIST
38332: PUSH
38333: LD_INT 0
38335: PUSH
38336: LD_INT 2
38338: NEG
38339: PUSH
38340: EMPTY
38341: LIST
38342: LIST
38343: PUSH
38344: LD_INT 1
38346: NEG
38347: PUSH
38348: LD_INT 3
38350: NEG
38351: PUSH
38352: EMPTY
38353: LIST
38354: LIST
38355: PUSH
38356: LD_INT 1
38358: NEG
38359: PUSH
38360: LD_INT 4
38362: NEG
38363: PUSH
38364: EMPTY
38365: LIST
38366: LIST
38367: PUSH
38368: LD_INT 2
38370: PUSH
38371: LD_INT 2
38373: NEG
38374: PUSH
38375: EMPTY
38376: LIST
38377: LIST
38378: PUSH
38379: LD_INT 2
38381: NEG
38382: PUSH
38383: LD_INT 4
38385: NEG
38386: PUSH
38387: EMPTY
38388: LIST
38389: LIST
38390: PUSH
38391: LD_INT 4
38393: PUSH
38394: LD_INT 0
38396: PUSH
38397: EMPTY
38398: LIST
38399: LIST
38400: PUSH
38401: LD_INT 4
38403: PUSH
38404: LD_INT 1
38406: NEG
38407: PUSH
38408: EMPTY
38409: LIST
38410: LIST
38411: PUSH
38412: LD_INT 5
38414: PUSH
38415: LD_INT 0
38417: PUSH
38418: EMPTY
38419: LIST
38420: LIST
38421: PUSH
38422: LD_INT 5
38424: PUSH
38425: LD_INT 1
38427: PUSH
38428: EMPTY
38429: LIST
38430: LIST
38431: PUSH
38432: LD_INT 4
38434: PUSH
38435: LD_INT 1
38437: PUSH
38438: EMPTY
38439: LIST
38440: LIST
38441: PUSH
38442: LD_INT 3
38444: PUSH
38445: LD_INT 0
38447: PUSH
38448: EMPTY
38449: LIST
38450: LIST
38451: PUSH
38452: LD_INT 3
38454: PUSH
38455: LD_INT 1
38457: NEG
38458: PUSH
38459: EMPTY
38460: LIST
38461: LIST
38462: PUSH
38463: LD_INT 3
38465: PUSH
38466: LD_INT 2
38468: NEG
38469: PUSH
38470: EMPTY
38471: LIST
38472: LIST
38473: PUSH
38474: LD_INT 5
38476: PUSH
38477: LD_INT 2
38479: PUSH
38480: EMPTY
38481: LIST
38482: LIST
38483: PUSH
38484: LD_INT 3
38486: PUSH
38487: LD_INT 3
38489: PUSH
38490: EMPTY
38491: LIST
38492: LIST
38493: PUSH
38494: LD_INT 3
38496: PUSH
38497: LD_INT 2
38499: PUSH
38500: EMPTY
38501: LIST
38502: LIST
38503: PUSH
38504: LD_INT 4
38506: PUSH
38507: LD_INT 3
38509: PUSH
38510: EMPTY
38511: LIST
38512: LIST
38513: PUSH
38514: LD_INT 4
38516: PUSH
38517: LD_INT 4
38519: PUSH
38520: EMPTY
38521: LIST
38522: LIST
38523: PUSH
38524: LD_INT 3
38526: PUSH
38527: LD_INT 4
38529: PUSH
38530: EMPTY
38531: LIST
38532: LIST
38533: PUSH
38534: LD_INT 2
38536: PUSH
38537: LD_INT 3
38539: PUSH
38540: EMPTY
38541: LIST
38542: LIST
38543: PUSH
38544: LD_INT 2
38546: PUSH
38547: LD_INT 2
38549: PUSH
38550: EMPTY
38551: LIST
38552: LIST
38553: PUSH
38554: LD_INT 4
38556: PUSH
38557: LD_INT 2
38559: PUSH
38560: EMPTY
38561: LIST
38562: LIST
38563: PUSH
38564: LD_INT 2
38566: PUSH
38567: LD_INT 4
38569: PUSH
38570: EMPTY
38571: LIST
38572: LIST
38573: PUSH
38574: LD_INT 0
38576: PUSH
38577: LD_INT 4
38579: PUSH
38580: EMPTY
38581: LIST
38582: LIST
38583: PUSH
38584: LD_INT 0
38586: PUSH
38587: LD_INT 3
38589: PUSH
38590: EMPTY
38591: LIST
38592: LIST
38593: PUSH
38594: LD_INT 1
38596: PUSH
38597: LD_INT 4
38599: PUSH
38600: EMPTY
38601: LIST
38602: LIST
38603: PUSH
38604: LD_INT 1
38606: PUSH
38607: LD_INT 5
38609: PUSH
38610: EMPTY
38611: LIST
38612: LIST
38613: PUSH
38614: LD_INT 0
38616: PUSH
38617: LD_INT 5
38619: PUSH
38620: EMPTY
38621: LIST
38622: LIST
38623: PUSH
38624: LD_INT 1
38626: NEG
38627: PUSH
38628: LD_INT 4
38630: PUSH
38631: EMPTY
38632: LIST
38633: LIST
38634: PUSH
38635: LD_INT 1
38637: NEG
38638: PUSH
38639: LD_INT 3
38641: PUSH
38642: EMPTY
38643: LIST
38644: LIST
38645: PUSH
38646: LD_INT 2
38648: PUSH
38649: LD_INT 5
38651: PUSH
38652: EMPTY
38653: LIST
38654: LIST
38655: PUSH
38656: LD_INT 2
38658: NEG
38659: PUSH
38660: LD_INT 3
38662: PUSH
38663: EMPTY
38664: LIST
38665: LIST
38666: PUSH
38667: EMPTY
38668: LIST
38669: LIST
38670: LIST
38671: LIST
38672: LIST
38673: LIST
38674: LIST
38675: LIST
38676: LIST
38677: LIST
38678: LIST
38679: LIST
38680: LIST
38681: LIST
38682: LIST
38683: LIST
38684: LIST
38685: LIST
38686: LIST
38687: LIST
38688: LIST
38689: LIST
38690: LIST
38691: LIST
38692: LIST
38693: LIST
38694: LIST
38695: LIST
38696: LIST
38697: LIST
38698: LIST
38699: LIST
38700: LIST
38701: LIST
38702: LIST
38703: LIST
38704: LIST
38705: LIST
38706: LIST
38707: LIST
38708: LIST
38709: LIST
38710: LIST
38711: LIST
38712: LIST
38713: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
38714: LD_ADDR_VAR 0 34
38718: PUSH
38719: LD_INT 0
38721: PUSH
38722: LD_INT 4
38724: NEG
38725: PUSH
38726: EMPTY
38727: LIST
38728: LIST
38729: PUSH
38730: LD_INT 0
38732: PUSH
38733: LD_INT 5
38735: NEG
38736: PUSH
38737: EMPTY
38738: LIST
38739: LIST
38740: PUSH
38741: LD_INT 1
38743: PUSH
38744: LD_INT 4
38746: NEG
38747: PUSH
38748: EMPTY
38749: LIST
38750: LIST
38751: PUSH
38752: LD_INT 1
38754: PUSH
38755: LD_INT 3
38757: NEG
38758: PUSH
38759: EMPTY
38760: LIST
38761: LIST
38762: PUSH
38763: LD_INT 0
38765: PUSH
38766: LD_INT 3
38768: NEG
38769: PUSH
38770: EMPTY
38771: LIST
38772: LIST
38773: PUSH
38774: LD_INT 1
38776: NEG
38777: PUSH
38778: LD_INT 4
38780: NEG
38781: PUSH
38782: EMPTY
38783: LIST
38784: LIST
38785: PUSH
38786: LD_INT 1
38788: NEG
38789: PUSH
38790: LD_INT 5
38792: NEG
38793: PUSH
38794: EMPTY
38795: LIST
38796: LIST
38797: PUSH
38798: LD_INT 2
38800: PUSH
38801: LD_INT 3
38803: NEG
38804: PUSH
38805: EMPTY
38806: LIST
38807: LIST
38808: PUSH
38809: LD_INT 2
38811: NEG
38812: PUSH
38813: LD_INT 5
38815: NEG
38816: PUSH
38817: EMPTY
38818: LIST
38819: LIST
38820: PUSH
38821: LD_INT 3
38823: PUSH
38824: LD_INT 0
38826: PUSH
38827: EMPTY
38828: LIST
38829: LIST
38830: PUSH
38831: LD_INT 3
38833: PUSH
38834: LD_INT 1
38836: NEG
38837: PUSH
38838: EMPTY
38839: LIST
38840: LIST
38841: PUSH
38842: LD_INT 4
38844: PUSH
38845: LD_INT 0
38847: PUSH
38848: EMPTY
38849: LIST
38850: LIST
38851: PUSH
38852: LD_INT 4
38854: PUSH
38855: LD_INT 1
38857: PUSH
38858: EMPTY
38859: LIST
38860: LIST
38861: PUSH
38862: LD_INT 3
38864: PUSH
38865: LD_INT 1
38867: PUSH
38868: EMPTY
38869: LIST
38870: LIST
38871: PUSH
38872: LD_INT 2
38874: PUSH
38875: LD_INT 0
38877: PUSH
38878: EMPTY
38879: LIST
38880: LIST
38881: PUSH
38882: LD_INT 2
38884: PUSH
38885: LD_INT 1
38887: NEG
38888: PUSH
38889: EMPTY
38890: LIST
38891: LIST
38892: PUSH
38893: LD_INT 2
38895: PUSH
38896: LD_INT 2
38898: NEG
38899: PUSH
38900: EMPTY
38901: LIST
38902: LIST
38903: PUSH
38904: LD_INT 4
38906: PUSH
38907: LD_INT 2
38909: PUSH
38910: EMPTY
38911: LIST
38912: LIST
38913: PUSH
38914: LD_INT 4
38916: PUSH
38917: LD_INT 4
38919: PUSH
38920: EMPTY
38921: LIST
38922: LIST
38923: PUSH
38924: LD_INT 4
38926: PUSH
38927: LD_INT 3
38929: PUSH
38930: EMPTY
38931: LIST
38932: LIST
38933: PUSH
38934: LD_INT 5
38936: PUSH
38937: LD_INT 4
38939: PUSH
38940: EMPTY
38941: LIST
38942: LIST
38943: PUSH
38944: LD_INT 5
38946: PUSH
38947: LD_INT 5
38949: PUSH
38950: EMPTY
38951: LIST
38952: LIST
38953: PUSH
38954: LD_INT 4
38956: PUSH
38957: LD_INT 5
38959: PUSH
38960: EMPTY
38961: LIST
38962: LIST
38963: PUSH
38964: LD_INT 3
38966: PUSH
38967: LD_INT 4
38969: PUSH
38970: EMPTY
38971: LIST
38972: LIST
38973: PUSH
38974: LD_INT 3
38976: PUSH
38977: LD_INT 3
38979: PUSH
38980: EMPTY
38981: LIST
38982: LIST
38983: PUSH
38984: LD_INT 5
38986: PUSH
38987: LD_INT 3
38989: PUSH
38990: EMPTY
38991: LIST
38992: LIST
38993: PUSH
38994: LD_INT 3
38996: PUSH
38997: LD_INT 5
38999: PUSH
39000: EMPTY
39001: LIST
39002: LIST
39003: PUSH
39004: LD_INT 0
39006: PUSH
39007: LD_INT 3
39009: PUSH
39010: EMPTY
39011: LIST
39012: LIST
39013: PUSH
39014: LD_INT 0
39016: PUSH
39017: LD_INT 2
39019: PUSH
39020: EMPTY
39021: LIST
39022: LIST
39023: PUSH
39024: LD_INT 1
39026: PUSH
39027: LD_INT 3
39029: PUSH
39030: EMPTY
39031: LIST
39032: LIST
39033: PUSH
39034: LD_INT 1
39036: PUSH
39037: LD_INT 4
39039: PUSH
39040: EMPTY
39041: LIST
39042: LIST
39043: PUSH
39044: LD_INT 0
39046: PUSH
39047: LD_INT 4
39049: PUSH
39050: EMPTY
39051: LIST
39052: LIST
39053: PUSH
39054: LD_INT 1
39056: NEG
39057: PUSH
39058: LD_INT 3
39060: PUSH
39061: EMPTY
39062: LIST
39063: LIST
39064: PUSH
39065: LD_INT 1
39067: NEG
39068: PUSH
39069: LD_INT 2
39071: PUSH
39072: EMPTY
39073: LIST
39074: LIST
39075: PUSH
39076: LD_INT 2
39078: PUSH
39079: LD_INT 4
39081: PUSH
39082: EMPTY
39083: LIST
39084: LIST
39085: PUSH
39086: LD_INT 2
39088: NEG
39089: PUSH
39090: LD_INT 2
39092: PUSH
39093: EMPTY
39094: LIST
39095: LIST
39096: PUSH
39097: LD_INT 4
39099: NEG
39100: PUSH
39101: LD_INT 0
39103: PUSH
39104: EMPTY
39105: LIST
39106: LIST
39107: PUSH
39108: LD_INT 4
39110: NEG
39111: PUSH
39112: LD_INT 1
39114: NEG
39115: PUSH
39116: EMPTY
39117: LIST
39118: LIST
39119: PUSH
39120: LD_INT 3
39122: NEG
39123: PUSH
39124: LD_INT 0
39126: PUSH
39127: EMPTY
39128: LIST
39129: LIST
39130: PUSH
39131: LD_INT 3
39133: NEG
39134: PUSH
39135: LD_INT 1
39137: PUSH
39138: EMPTY
39139: LIST
39140: LIST
39141: PUSH
39142: LD_INT 4
39144: NEG
39145: PUSH
39146: LD_INT 1
39148: PUSH
39149: EMPTY
39150: LIST
39151: LIST
39152: PUSH
39153: LD_INT 5
39155: NEG
39156: PUSH
39157: LD_INT 0
39159: PUSH
39160: EMPTY
39161: LIST
39162: LIST
39163: PUSH
39164: LD_INT 5
39166: NEG
39167: PUSH
39168: LD_INT 1
39170: NEG
39171: PUSH
39172: EMPTY
39173: LIST
39174: LIST
39175: PUSH
39176: LD_INT 5
39178: NEG
39179: PUSH
39180: LD_INT 2
39182: NEG
39183: PUSH
39184: EMPTY
39185: LIST
39186: LIST
39187: PUSH
39188: LD_INT 3
39190: NEG
39191: PUSH
39192: LD_INT 2
39194: PUSH
39195: EMPTY
39196: LIST
39197: LIST
39198: PUSH
39199: EMPTY
39200: LIST
39201: LIST
39202: LIST
39203: LIST
39204: LIST
39205: LIST
39206: LIST
39207: LIST
39208: LIST
39209: LIST
39210: LIST
39211: LIST
39212: LIST
39213: LIST
39214: LIST
39215: LIST
39216: LIST
39217: LIST
39218: LIST
39219: LIST
39220: LIST
39221: LIST
39222: LIST
39223: LIST
39224: LIST
39225: LIST
39226: LIST
39227: LIST
39228: LIST
39229: LIST
39230: LIST
39231: LIST
39232: LIST
39233: LIST
39234: LIST
39235: LIST
39236: LIST
39237: LIST
39238: LIST
39239: LIST
39240: LIST
39241: LIST
39242: LIST
39243: LIST
39244: LIST
39245: ST_TO_ADDR
// end ; end ;
39246: GO 39249
39248: POP
// case btype of b_depot , b_warehouse :
39249: LD_VAR 0 1
39253: PUSH
39254: LD_INT 0
39256: DOUBLE
39257: EQUAL
39258: IFTRUE 39268
39260: LD_INT 1
39262: DOUBLE
39263: EQUAL
39264: IFTRUE 39268
39266: GO 39469
39268: POP
// case nation of nation_american :
39269: LD_VAR 0 5
39273: PUSH
39274: LD_INT 1
39276: DOUBLE
39277: EQUAL
39278: IFTRUE 39282
39280: GO 39338
39282: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
39283: LD_ADDR_VAR 0 9
39287: PUSH
39288: LD_VAR 0 11
39292: PUSH
39293: LD_VAR 0 12
39297: PUSH
39298: LD_VAR 0 13
39302: PUSH
39303: LD_VAR 0 14
39307: PUSH
39308: LD_VAR 0 15
39312: PUSH
39313: LD_VAR 0 16
39317: PUSH
39318: EMPTY
39319: LIST
39320: LIST
39321: LIST
39322: LIST
39323: LIST
39324: LIST
39325: PUSH
39326: LD_VAR 0 4
39330: PUSH
39331: LD_INT 1
39333: PLUS
39334: ARRAY
39335: ST_TO_ADDR
39336: GO 39467
39338: LD_INT 2
39340: DOUBLE
39341: EQUAL
39342: IFTRUE 39346
39344: GO 39402
39346: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
39347: LD_ADDR_VAR 0 9
39351: PUSH
39352: LD_VAR 0 17
39356: PUSH
39357: LD_VAR 0 18
39361: PUSH
39362: LD_VAR 0 19
39366: PUSH
39367: LD_VAR 0 20
39371: PUSH
39372: LD_VAR 0 21
39376: PUSH
39377: LD_VAR 0 22
39381: PUSH
39382: EMPTY
39383: LIST
39384: LIST
39385: LIST
39386: LIST
39387: LIST
39388: LIST
39389: PUSH
39390: LD_VAR 0 4
39394: PUSH
39395: LD_INT 1
39397: PLUS
39398: ARRAY
39399: ST_TO_ADDR
39400: GO 39467
39402: LD_INT 3
39404: DOUBLE
39405: EQUAL
39406: IFTRUE 39410
39408: GO 39466
39410: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
39411: LD_ADDR_VAR 0 9
39415: PUSH
39416: LD_VAR 0 23
39420: PUSH
39421: LD_VAR 0 24
39425: PUSH
39426: LD_VAR 0 25
39430: PUSH
39431: LD_VAR 0 26
39435: PUSH
39436: LD_VAR 0 27
39440: PUSH
39441: LD_VAR 0 28
39445: PUSH
39446: EMPTY
39447: LIST
39448: LIST
39449: LIST
39450: LIST
39451: LIST
39452: LIST
39453: PUSH
39454: LD_VAR 0 4
39458: PUSH
39459: LD_INT 1
39461: PLUS
39462: ARRAY
39463: ST_TO_ADDR
39464: GO 39467
39466: POP
39467: GO 40022
39469: LD_INT 2
39471: DOUBLE
39472: EQUAL
39473: IFTRUE 39483
39475: LD_INT 3
39477: DOUBLE
39478: EQUAL
39479: IFTRUE 39483
39481: GO 39539
39483: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
39484: LD_ADDR_VAR 0 9
39488: PUSH
39489: LD_VAR 0 29
39493: PUSH
39494: LD_VAR 0 30
39498: PUSH
39499: LD_VAR 0 31
39503: PUSH
39504: LD_VAR 0 32
39508: PUSH
39509: LD_VAR 0 33
39513: PUSH
39514: LD_VAR 0 34
39518: PUSH
39519: EMPTY
39520: LIST
39521: LIST
39522: LIST
39523: LIST
39524: LIST
39525: LIST
39526: PUSH
39527: LD_VAR 0 4
39531: PUSH
39532: LD_INT 1
39534: PLUS
39535: ARRAY
39536: ST_TO_ADDR
39537: GO 40022
39539: LD_INT 16
39541: DOUBLE
39542: EQUAL
39543: IFTRUE 39601
39545: LD_INT 17
39547: DOUBLE
39548: EQUAL
39549: IFTRUE 39601
39551: LD_INT 18
39553: DOUBLE
39554: EQUAL
39555: IFTRUE 39601
39557: LD_INT 19
39559: DOUBLE
39560: EQUAL
39561: IFTRUE 39601
39563: LD_INT 22
39565: DOUBLE
39566: EQUAL
39567: IFTRUE 39601
39569: LD_INT 20
39571: DOUBLE
39572: EQUAL
39573: IFTRUE 39601
39575: LD_INT 21
39577: DOUBLE
39578: EQUAL
39579: IFTRUE 39601
39581: LD_INT 23
39583: DOUBLE
39584: EQUAL
39585: IFTRUE 39601
39587: LD_INT 24
39589: DOUBLE
39590: EQUAL
39591: IFTRUE 39601
39593: LD_INT 25
39595: DOUBLE
39596: EQUAL
39597: IFTRUE 39601
39599: GO 39657
39601: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
39602: LD_ADDR_VAR 0 9
39606: PUSH
39607: LD_VAR 0 35
39611: PUSH
39612: LD_VAR 0 36
39616: PUSH
39617: LD_VAR 0 37
39621: PUSH
39622: LD_VAR 0 38
39626: PUSH
39627: LD_VAR 0 39
39631: PUSH
39632: LD_VAR 0 40
39636: PUSH
39637: EMPTY
39638: LIST
39639: LIST
39640: LIST
39641: LIST
39642: LIST
39643: LIST
39644: PUSH
39645: LD_VAR 0 4
39649: PUSH
39650: LD_INT 1
39652: PLUS
39653: ARRAY
39654: ST_TO_ADDR
39655: GO 40022
39657: LD_INT 6
39659: DOUBLE
39660: EQUAL
39661: IFTRUE 39713
39663: LD_INT 7
39665: DOUBLE
39666: EQUAL
39667: IFTRUE 39713
39669: LD_INT 8
39671: DOUBLE
39672: EQUAL
39673: IFTRUE 39713
39675: LD_INT 13
39677: DOUBLE
39678: EQUAL
39679: IFTRUE 39713
39681: LD_INT 12
39683: DOUBLE
39684: EQUAL
39685: IFTRUE 39713
39687: LD_INT 15
39689: DOUBLE
39690: EQUAL
39691: IFTRUE 39713
39693: LD_INT 11
39695: DOUBLE
39696: EQUAL
39697: IFTRUE 39713
39699: LD_INT 14
39701: DOUBLE
39702: EQUAL
39703: IFTRUE 39713
39705: LD_INT 10
39707: DOUBLE
39708: EQUAL
39709: IFTRUE 39713
39711: GO 39769
39713: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
39714: LD_ADDR_VAR 0 9
39718: PUSH
39719: LD_VAR 0 41
39723: PUSH
39724: LD_VAR 0 42
39728: PUSH
39729: LD_VAR 0 43
39733: PUSH
39734: LD_VAR 0 44
39738: PUSH
39739: LD_VAR 0 45
39743: PUSH
39744: LD_VAR 0 46
39748: PUSH
39749: EMPTY
39750: LIST
39751: LIST
39752: LIST
39753: LIST
39754: LIST
39755: LIST
39756: PUSH
39757: LD_VAR 0 4
39761: PUSH
39762: LD_INT 1
39764: PLUS
39765: ARRAY
39766: ST_TO_ADDR
39767: GO 40022
39769: LD_INT 36
39771: DOUBLE
39772: EQUAL
39773: IFTRUE 39777
39775: GO 39833
39777: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
39778: LD_ADDR_VAR 0 9
39782: PUSH
39783: LD_VAR 0 47
39787: PUSH
39788: LD_VAR 0 48
39792: PUSH
39793: LD_VAR 0 49
39797: PUSH
39798: LD_VAR 0 50
39802: PUSH
39803: LD_VAR 0 51
39807: PUSH
39808: LD_VAR 0 52
39812: PUSH
39813: EMPTY
39814: LIST
39815: LIST
39816: LIST
39817: LIST
39818: LIST
39819: LIST
39820: PUSH
39821: LD_VAR 0 4
39825: PUSH
39826: LD_INT 1
39828: PLUS
39829: ARRAY
39830: ST_TO_ADDR
39831: GO 40022
39833: LD_INT 4
39835: DOUBLE
39836: EQUAL
39837: IFTRUE 39859
39839: LD_INT 5
39841: DOUBLE
39842: EQUAL
39843: IFTRUE 39859
39845: LD_INT 34
39847: DOUBLE
39848: EQUAL
39849: IFTRUE 39859
39851: LD_INT 37
39853: DOUBLE
39854: EQUAL
39855: IFTRUE 39859
39857: GO 39915
39859: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
39860: LD_ADDR_VAR 0 9
39864: PUSH
39865: LD_VAR 0 53
39869: PUSH
39870: LD_VAR 0 54
39874: PUSH
39875: LD_VAR 0 55
39879: PUSH
39880: LD_VAR 0 56
39884: PUSH
39885: LD_VAR 0 57
39889: PUSH
39890: LD_VAR 0 58
39894: PUSH
39895: EMPTY
39896: LIST
39897: LIST
39898: LIST
39899: LIST
39900: LIST
39901: LIST
39902: PUSH
39903: LD_VAR 0 4
39907: PUSH
39908: LD_INT 1
39910: PLUS
39911: ARRAY
39912: ST_TO_ADDR
39913: GO 40022
39915: LD_INT 31
39917: DOUBLE
39918: EQUAL
39919: IFTRUE 39965
39921: LD_INT 32
39923: DOUBLE
39924: EQUAL
39925: IFTRUE 39965
39927: LD_INT 33
39929: DOUBLE
39930: EQUAL
39931: IFTRUE 39965
39933: LD_INT 27
39935: DOUBLE
39936: EQUAL
39937: IFTRUE 39965
39939: LD_INT 26
39941: DOUBLE
39942: EQUAL
39943: IFTRUE 39965
39945: LD_INT 28
39947: DOUBLE
39948: EQUAL
39949: IFTRUE 39965
39951: LD_INT 29
39953: DOUBLE
39954: EQUAL
39955: IFTRUE 39965
39957: LD_INT 30
39959: DOUBLE
39960: EQUAL
39961: IFTRUE 39965
39963: GO 40021
39965: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
39966: LD_ADDR_VAR 0 9
39970: PUSH
39971: LD_VAR 0 59
39975: PUSH
39976: LD_VAR 0 60
39980: PUSH
39981: LD_VAR 0 61
39985: PUSH
39986: LD_VAR 0 62
39990: PUSH
39991: LD_VAR 0 63
39995: PUSH
39996: LD_VAR 0 64
40000: PUSH
40001: EMPTY
40002: LIST
40003: LIST
40004: LIST
40005: LIST
40006: LIST
40007: LIST
40008: PUSH
40009: LD_VAR 0 4
40013: PUSH
40014: LD_INT 1
40016: PLUS
40017: ARRAY
40018: ST_TO_ADDR
40019: GO 40022
40021: POP
// temp_list2 = [ ] ;
40022: LD_ADDR_VAR 0 10
40026: PUSH
40027: EMPTY
40028: ST_TO_ADDR
// for i in temp_list do
40029: LD_ADDR_VAR 0 8
40033: PUSH
40034: LD_VAR 0 9
40038: PUSH
40039: FOR_IN
40040: IFFALSE 40092
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
40042: LD_ADDR_VAR 0 10
40046: PUSH
40047: LD_VAR 0 10
40051: PUSH
40052: LD_VAR 0 8
40056: PUSH
40057: LD_INT 1
40059: ARRAY
40060: PUSH
40061: LD_VAR 0 2
40065: PLUS
40066: PUSH
40067: LD_VAR 0 8
40071: PUSH
40072: LD_INT 2
40074: ARRAY
40075: PUSH
40076: LD_VAR 0 3
40080: PLUS
40081: PUSH
40082: EMPTY
40083: LIST
40084: LIST
40085: PUSH
40086: EMPTY
40087: LIST
40088: ADD
40089: ST_TO_ADDR
40090: GO 40039
40092: POP
40093: POP
// result = temp_list2 ;
40094: LD_ADDR_VAR 0 7
40098: PUSH
40099: LD_VAR 0 10
40103: ST_TO_ADDR
// end ;
40104: LD_VAR 0 7
40108: RET
// export function EnemyInRange ( unit , dist ) ; begin
40109: LD_INT 0
40111: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
40112: LD_ADDR_VAR 0 3
40116: PUSH
40117: LD_VAR 0 1
40121: PPUSH
40122: CALL_OW 255
40126: PPUSH
40127: LD_VAR 0 1
40131: PPUSH
40132: CALL_OW 250
40136: PPUSH
40137: LD_VAR 0 1
40141: PPUSH
40142: CALL_OW 251
40146: PPUSH
40147: LD_VAR 0 2
40151: PPUSH
40152: CALL 13910 0 4
40156: PUSH
40157: LD_INT 4
40159: ARRAY
40160: ST_TO_ADDR
// end ;
40161: LD_VAR 0 3
40165: RET
// export function PlayerSeeMe ( unit ) ; begin
40166: LD_INT 0
40168: PPUSH
// result := See ( your_side , unit ) ;
40169: LD_ADDR_VAR 0 2
40173: PUSH
40174: LD_OWVAR 2
40178: PPUSH
40179: LD_VAR 0 1
40183: PPUSH
40184: CALL_OW 292
40188: ST_TO_ADDR
// end ;
40189: LD_VAR 0 2
40193: RET
// export function ReverseDir ( unit ) ; begin
40194: LD_INT 0
40196: PPUSH
// if not unit then
40197: LD_VAR 0 1
40201: NOT
40202: IFFALSE 40206
// exit ;
40204: GO 40229
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
40206: LD_ADDR_VAR 0 2
40210: PUSH
40211: LD_VAR 0 1
40215: PPUSH
40216: CALL_OW 254
40220: PUSH
40221: LD_INT 3
40223: PLUS
40224: PUSH
40225: LD_INT 6
40227: MOD
40228: ST_TO_ADDR
// end ;
40229: LD_VAR 0 2
40233: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
40234: LD_INT 0
40236: PPUSH
40237: PPUSH
40238: PPUSH
40239: PPUSH
40240: PPUSH
// if not hexes then
40241: LD_VAR 0 2
40245: NOT
40246: IFFALSE 40250
// exit ;
40248: GO 40398
// dist := 9999 ;
40250: LD_ADDR_VAR 0 5
40254: PUSH
40255: LD_INT 9999
40257: ST_TO_ADDR
// for i = 1 to hexes do
40258: LD_ADDR_VAR 0 4
40262: PUSH
40263: DOUBLE
40264: LD_INT 1
40266: DEC
40267: ST_TO_ADDR
40268: LD_VAR 0 2
40272: PUSH
40273: FOR_TO
40274: IFFALSE 40386
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
40276: LD_VAR 0 1
40280: PPUSH
40281: LD_VAR 0 2
40285: PUSH
40286: LD_VAR 0 4
40290: ARRAY
40291: PUSH
40292: LD_INT 1
40294: ARRAY
40295: PPUSH
40296: LD_VAR 0 2
40300: PUSH
40301: LD_VAR 0 4
40305: ARRAY
40306: PUSH
40307: LD_INT 2
40309: ARRAY
40310: PPUSH
40311: CALL_OW 297
40315: PUSH
40316: LD_VAR 0 5
40320: LESS
40321: IFFALSE 40384
// begin hex := hexes [ i ] ;
40323: LD_ADDR_VAR 0 7
40327: PUSH
40328: LD_VAR 0 2
40332: PUSH
40333: LD_VAR 0 4
40337: ARRAY
40338: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
40339: LD_ADDR_VAR 0 5
40343: PUSH
40344: LD_VAR 0 1
40348: PPUSH
40349: LD_VAR 0 2
40353: PUSH
40354: LD_VAR 0 4
40358: ARRAY
40359: PUSH
40360: LD_INT 1
40362: ARRAY
40363: PPUSH
40364: LD_VAR 0 2
40368: PUSH
40369: LD_VAR 0 4
40373: ARRAY
40374: PUSH
40375: LD_INT 2
40377: ARRAY
40378: PPUSH
40379: CALL_OW 297
40383: ST_TO_ADDR
// end ; end ;
40384: GO 40273
40386: POP
40387: POP
// result := hex ;
40388: LD_ADDR_VAR 0 3
40392: PUSH
40393: LD_VAR 0 7
40397: ST_TO_ADDR
// end ;
40398: LD_VAR 0 3
40402: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
40403: LD_INT 0
40405: PPUSH
40406: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
40407: LD_VAR 0 1
40411: NOT
40412: PUSH
40413: LD_VAR 0 1
40417: PUSH
40418: LD_INT 21
40420: PUSH
40421: LD_INT 2
40423: PUSH
40424: EMPTY
40425: LIST
40426: LIST
40427: PUSH
40428: LD_INT 23
40430: PUSH
40431: LD_INT 2
40433: PUSH
40434: EMPTY
40435: LIST
40436: LIST
40437: PUSH
40438: EMPTY
40439: LIST
40440: LIST
40441: PPUSH
40442: CALL_OW 69
40446: IN
40447: NOT
40448: OR
40449: IFFALSE 40453
// exit ;
40451: GO 40500
// for i = 1 to 3 do
40453: LD_ADDR_VAR 0 3
40457: PUSH
40458: DOUBLE
40459: LD_INT 1
40461: DEC
40462: ST_TO_ADDR
40463: LD_INT 3
40465: PUSH
40466: FOR_TO
40467: IFFALSE 40498
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
40469: LD_VAR 0 1
40473: PPUSH
40474: CALL_OW 250
40478: PPUSH
40479: LD_VAR 0 1
40483: PPUSH
40484: CALL_OW 251
40488: PPUSH
40489: LD_INT 1
40491: PPUSH
40492: CALL_OW 453
40496: GO 40466
40498: POP
40499: POP
// end ;
40500: LD_VAR 0 2
40504: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
40505: LD_INT 0
40507: PPUSH
40508: PPUSH
40509: PPUSH
40510: PPUSH
40511: PPUSH
40512: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
40513: LD_VAR 0 1
40517: NOT
40518: PUSH
40519: LD_VAR 0 2
40523: NOT
40524: OR
40525: PUSH
40526: LD_VAR 0 1
40530: PPUSH
40531: CALL_OW 314
40535: OR
40536: IFFALSE 40540
// exit ;
40538: GO 40981
// x := GetX ( enemy_unit ) ;
40540: LD_ADDR_VAR 0 7
40544: PUSH
40545: LD_VAR 0 2
40549: PPUSH
40550: CALL_OW 250
40554: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
40555: LD_ADDR_VAR 0 8
40559: PUSH
40560: LD_VAR 0 2
40564: PPUSH
40565: CALL_OW 251
40569: ST_TO_ADDR
// if not x or not y then
40570: LD_VAR 0 7
40574: NOT
40575: PUSH
40576: LD_VAR 0 8
40580: NOT
40581: OR
40582: IFFALSE 40586
// exit ;
40584: GO 40981
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
40586: LD_ADDR_VAR 0 6
40590: PUSH
40591: LD_VAR 0 7
40595: PPUSH
40596: LD_INT 0
40598: PPUSH
40599: LD_INT 4
40601: PPUSH
40602: CALL_OW 272
40606: PUSH
40607: LD_VAR 0 8
40611: PPUSH
40612: LD_INT 0
40614: PPUSH
40615: LD_INT 4
40617: PPUSH
40618: CALL_OW 273
40622: PUSH
40623: EMPTY
40624: LIST
40625: LIST
40626: PUSH
40627: LD_VAR 0 7
40631: PPUSH
40632: LD_INT 1
40634: PPUSH
40635: LD_INT 4
40637: PPUSH
40638: CALL_OW 272
40642: PUSH
40643: LD_VAR 0 8
40647: PPUSH
40648: LD_INT 1
40650: PPUSH
40651: LD_INT 4
40653: PPUSH
40654: CALL_OW 273
40658: PUSH
40659: EMPTY
40660: LIST
40661: LIST
40662: PUSH
40663: LD_VAR 0 7
40667: PPUSH
40668: LD_INT 2
40670: PPUSH
40671: LD_INT 4
40673: PPUSH
40674: CALL_OW 272
40678: PUSH
40679: LD_VAR 0 8
40683: PPUSH
40684: LD_INT 2
40686: PPUSH
40687: LD_INT 4
40689: PPUSH
40690: CALL_OW 273
40694: PUSH
40695: EMPTY
40696: LIST
40697: LIST
40698: PUSH
40699: LD_VAR 0 7
40703: PPUSH
40704: LD_INT 3
40706: PPUSH
40707: LD_INT 4
40709: PPUSH
40710: CALL_OW 272
40714: PUSH
40715: LD_VAR 0 8
40719: PPUSH
40720: LD_INT 3
40722: PPUSH
40723: LD_INT 4
40725: PPUSH
40726: CALL_OW 273
40730: PUSH
40731: EMPTY
40732: LIST
40733: LIST
40734: PUSH
40735: LD_VAR 0 7
40739: PPUSH
40740: LD_INT 4
40742: PPUSH
40743: LD_INT 4
40745: PPUSH
40746: CALL_OW 272
40750: PUSH
40751: LD_VAR 0 8
40755: PPUSH
40756: LD_INT 4
40758: PPUSH
40759: LD_INT 4
40761: PPUSH
40762: CALL_OW 273
40766: PUSH
40767: EMPTY
40768: LIST
40769: LIST
40770: PUSH
40771: LD_VAR 0 7
40775: PPUSH
40776: LD_INT 5
40778: PPUSH
40779: LD_INT 4
40781: PPUSH
40782: CALL_OW 272
40786: PUSH
40787: LD_VAR 0 8
40791: PPUSH
40792: LD_INT 5
40794: PPUSH
40795: LD_INT 4
40797: PPUSH
40798: CALL_OW 273
40802: PUSH
40803: EMPTY
40804: LIST
40805: LIST
40806: PUSH
40807: EMPTY
40808: LIST
40809: LIST
40810: LIST
40811: LIST
40812: LIST
40813: LIST
40814: ST_TO_ADDR
// for i = tmp downto 1 do
40815: LD_ADDR_VAR 0 4
40819: PUSH
40820: DOUBLE
40821: LD_VAR 0 6
40825: INC
40826: ST_TO_ADDR
40827: LD_INT 1
40829: PUSH
40830: FOR_DOWNTO
40831: IFFALSE 40932
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
40833: LD_VAR 0 6
40837: PUSH
40838: LD_VAR 0 4
40842: ARRAY
40843: PUSH
40844: LD_INT 1
40846: ARRAY
40847: PPUSH
40848: LD_VAR 0 6
40852: PUSH
40853: LD_VAR 0 4
40857: ARRAY
40858: PUSH
40859: LD_INT 2
40861: ARRAY
40862: PPUSH
40863: CALL_OW 488
40867: NOT
40868: PUSH
40869: LD_VAR 0 6
40873: PUSH
40874: LD_VAR 0 4
40878: ARRAY
40879: PUSH
40880: LD_INT 1
40882: ARRAY
40883: PPUSH
40884: LD_VAR 0 6
40888: PUSH
40889: LD_VAR 0 4
40893: ARRAY
40894: PUSH
40895: LD_INT 2
40897: ARRAY
40898: PPUSH
40899: CALL_OW 428
40903: PUSH
40904: LD_INT 0
40906: NONEQUAL
40907: OR
40908: IFFALSE 40930
// tmp := Delete ( tmp , i ) ;
40910: LD_ADDR_VAR 0 6
40914: PUSH
40915: LD_VAR 0 6
40919: PPUSH
40920: LD_VAR 0 4
40924: PPUSH
40925: CALL_OW 3
40929: ST_TO_ADDR
40930: GO 40830
40932: POP
40933: POP
// j := GetClosestHex ( unit , tmp ) ;
40934: LD_ADDR_VAR 0 5
40938: PUSH
40939: LD_VAR 0 1
40943: PPUSH
40944: LD_VAR 0 6
40948: PPUSH
40949: CALL 40234 0 2
40953: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
40954: LD_VAR 0 1
40958: PPUSH
40959: LD_VAR 0 5
40963: PUSH
40964: LD_INT 1
40966: ARRAY
40967: PPUSH
40968: LD_VAR 0 5
40972: PUSH
40973: LD_INT 2
40975: ARRAY
40976: PPUSH
40977: CALL_OW 111
// end ;
40981: LD_VAR 0 3
40985: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
40986: LD_INT 0
40988: PPUSH
40989: PPUSH
40990: PPUSH
// uc_side = 0 ;
40991: LD_ADDR_OWVAR 20
40995: PUSH
40996: LD_INT 0
40998: ST_TO_ADDR
// uc_nation = 0 ;
40999: LD_ADDR_OWVAR 21
41003: PUSH
41004: LD_INT 0
41006: ST_TO_ADDR
// InitHc_All ( ) ;
41007: CALL_OW 584
// InitVc ;
41011: CALL_OW 20
// if mastodonts then
41015: LD_VAR 0 6
41019: IFFALSE 41086
// for i = 1 to mastodonts do
41021: LD_ADDR_VAR 0 11
41025: PUSH
41026: DOUBLE
41027: LD_INT 1
41029: DEC
41030: ST_TO_ADDR
41031: LD_VAR 0 6
41035: PUSH
41036: FOR_TO
41037: IFFALSE 41084
// begin vc_chassis := 31 ;
41039: LD_ADDR_OWVAR 37
41043: PUSH
41044: LD_INT 31
41046: ST_TO_ADDR
// vc_control := control_rider ;
41047: LD_ADDR_OWVAR 38
41051: PUSH
41052: LD_INT 4
41054: ST_TO_ADDR
// animal := CreateVehicle ;
41055: LD_ADDR_VAR 0 12
41059: PUSH
41060: CALL_OW 45
41064: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
41065: LD_VAR 0 12
41069: PPUSH
41070: LD_VAR 0 8
41074: PPUSH
41075: LD_INT 0
41077: PPUSH
41078: CALL 43274 0 3
// end ;
41082: GO 41036
41084: POP
41085: POP
// if horses then
41086: LD_VAR 0 5
41090: IFFALSE 41157
// for i = 1 to horses do
41092: LD_ADDR_VAR 0 11
41096: PUSH
41097: DOUBLE
41098: LD_INT 1
41100: DEC
41101: ST_TO_ADDR
41102: LD_VAR 0 5
41106: PUSH
41107: FOR_TO
41108: IFFALSE 41155
// begin hc_class := 21 ;
41110: LD_ADDR_OWVAR 28
41114: PUSH
41115: LD_INT 21
41117: ST_TO_ADDR
// hc_gallery :=  ;
41118: LD_ADDR_OWVAR 33
41122: PUSH
41123: LD_STRING 
41125: ST_TO_ADDR
// animal := CreateHuman ;
41126: LD_ADDR_VAR 0 12
41130: PUSH
41131: CALL_OW 44
41135: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
41136: LD_VAR 0 12
41140: PPUSH
41141: LD_VAR 0 8
41145: PPUSH
41146: LD_INT 0
41148: PPUSH
41149: CALL 43274 0 3
// end ;
41153: GO 41107
41155: POP
41156: POP
// if birds then
41157: LD_VAR 0 1
41161: IFFALSE 41228
// for i = 1 to birds do
41163: LD_ADDR_VAR 0 11
41167: PUSH
41168: DOUBLE
41169: LD_INT 1
41171: DEC
41172: ST_TO_ADDR
41173: LD_VAR 0 1
41177: PUSH
41178: FOR_TO
41179: IFFALSE 41226
// begin hc_class = 18 ;
41181: LD_ADDR_OWVAR 28
41185: PUSH
41186: LD_INT 18
41188: ST_TO_ADDR
// hc_gallery =  ;
41189: LD_ADDR_OWVAR 33
41193: PUSH
41194: LD_STRING 
41196: ST_TO_ADDR
// animal := CreateHuman ;
41197: LD_ADDR_VAR 0 12
41201: PUSH
41202: CALL_OW 44
41206: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
41207: LD_VAR 0 12
41211: PPUSH
41212: LD_VAR 0 8
41216: PPUSH
41217: LD_INT 0
41219: PPUSH
41220: CALL 43274 0 3
// end ;
41224: GO 41178
41226: POP
41227: POP
// if tigers then
41228: LD_VAR 0 2
41232: IFFALSE 41316
// for i = 1 to tigers do
41234: LD_ADDR_VAR 0 11
41238: PUSH
41239: DOUBLE
41240: LD_INT 1
41242: DEC
41243: ST_TO_ADDR
41244: LD_VAR 0 2
41248: PUSH
41249: FOR_TO
41250: IFFALSE 41314
// begin hc_class = class_tiger ;
41252: LD_ADDR_OWVAR 28
41256: PUSH
41257: LD_INT 14
41259: ST_TO_ADDR
// hc_gallery =  ;
41260: LD_ADDR_OWVAR 33
41264: PUSH
41265: LD_STRING 
41267: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
41268: LD_ADDR_OWVAR 35
41272: PUSH
41273: LD_INT 7
41275: NEG
41276: PPUSH
41277: LD_INT 7
41279: PPUSH
41280: CALL_OW 12
41284: ST_TO_ADDR
// animal := CreateHuman ;
41285: LD_ADDR_VAR 0 12
41289: PUSH
41290: CALL_OW 44
41294: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
41295: LD_VAR 0 12
41299: PPUSH
41300: LD_VAR 0 8
41304: PPUSH
41305: LD_INT 0
41307: PPUSH
41308: CALL 43274 0 3
// end ;
41312: GO 41249
41314: POP
41315: POP
// if apemans then
41316: LD_VAR 0 3
41320: IFFALSE 41443
// for i = 1 to apemans do
41322: LD_ADDR_VAR 0 11
41326: PUSH
41327: DOUBLE
41328: LD_INT 1
41330: DEC
41331: ST_TO_ADDR
41332: LD_VAR 0 3
41336: PUSH
41337: FOR_TO
41338: IFFALSE 41441
// begin hc_class = class_apeman ;
41340: LD_ADDR_OWVAR 28
41344: PUSH
41345: LD_INT 12
41347: ST_TO_ADDR
// hc_gallery =  ;
41348: LD_ADDR_OWVAR 33
41352: PUSH
41353: LD_STRING 
41355: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
41356: LD_ADDR_OWVAR 35
41360: PUSH
41361: LD_INT 5
41363: NEG
41364: PPUSH
41365: LD_INT 5
41367: PPUSH
41368: CALL_OW 12
41372: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
41373: LD_ADDR_OWVAR 31
41377: PUSH
41378: LD_INT 1
41380: PPUSH
41381: LD_INT 3
41383: PPUSH
41384: CALL_OW 12
41388: PUSH
41389: LD_INT 1
41391: PPUSH
41392: LD_INT 3
41394: PPUSH
41395: CALL_OW 12
41399: PUSH
41400: LD_INT 0
41402: PUSH
41403: LD_INT 0
41405: PUSH
41406: EMPTY
41407: LIST
41408: LIST
41409: LIST
41410: LIST
41411: ST_TO_ADDR
// animal := CreateHuman ;
41412: LD_ADDR_VAR 0 12
41416: PUSH
41417: CALL_OW 44
41421: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
41422: LD_VAR 0 12
41426: PPUSH
41427: LD_VAR 0 8
41431: PPUSH
41432: LD_INT 0
41434: PPUSH
41435: CALL 43274 0 3
// end ;
41439: GO 41337
41441: POP
41442: POP
// if enchidnas then
41443: LD_VAR 0 4
41447: IFFALSE 41514
// for i = 1 to enchidnas do
41449: LD_ADDR_VAR 0 11
41453: PUSH
41454: DOUBLE
41455: LD_INT 1
41457: DEC
41458: ST_TO_ADDR
41459: LD_VAR 0 4
41463: PUSH
41464: FOR_TO
41465: IFFALSE 41512
// begin hc_class = 13 ;
41467: LD_ADDR_OWVAR 28
41471: PUSH
41472: LD_INT 13
41474: ST_TO_ADDR
// hc_gallery =  ;
41475: LD_ADDR_OWVAR 33
41479: PUSH
41480: LD_STRING 
41482: ST_TO_ADDR
// animal := CreateHuman ;
41483: LD_ADDR_VAR 0 12
41487: PUSH
41488: CALL_OW 44
41492: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
41493: LD_VAR 0 12
41497: PPUSH
41498: LD_VAR 0 8
41502: PPUSH
41503: LD_INT 0
41505: PPUSH
41506: CALL 43274 0 3
// end ;
41510: GO 41464
41512: POP
41513: POP
// if fishes then
41514: LD_VAR 0 7
41518: IFFALSE 41585
// for i = 1 to fishes do
41520: LD_ADDR_VAR 0 11
41524: PUSH
41525: DOUBLE
41526: LD_INT 1
41528: DEC
41529: ST_TO_ADDR
41530: LD_VAR 0 7
41534: PUSH
41535: FOR_TO
41536: IFFALSE 41583
// begin hc_class = 20 ;
41538: LD_ADDR_OWVAR 28
41542: PUSH
41543: LD_INT 20
41545: ST_TO_ADDR
// hc_gallery =  ;
41546: LD_ADDR_OWVAR 33
41550: PUSH
41551: LD_STRING 
41553: ST_TO_ADDR
// animal := CreateHuman ;
41554: LD_ADDR_VAR 0 12
41558: PUSH
41559: CALL_OW 44
41563: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
41564: LD_VAR 0 12
41568: PPUSH
41569: LD_VAR 0 9
41573: PPUSH
41574: LD_INT 0
41576: PPUSH
41577: CALL 43274 0 3
// end ;
41581: GO 41535
41583: POP
41584: POP
// end ;
41585: LD_VAR 0 10
41589: RET
// export function WantHeal ( sci , unit ) ; begin
41590: LD_INT 0
41592: PPUSH
// if GetTaskList ( sci ) > 0 then
41593: LD_VAR 0 1
41597: PPUSH
41598: CALL_OW 437
41602: PUSH
41603: LD_INT 0
41605: GREATER
41606: IFFALSE 41676
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
41608: LD_VAR 0 1
41612: PPUSH
41613: CALL_OW 437
41617: PUSH
41618: LD_INT 1
41620: ARRAY
41621: PUSH
41622: LD_INT 1
41624: ARRAY
41625: PUSH
41626: LD_STRING l
41628: EQUAL
41629: PUSH
41630: LD_VAR 0 1
41634: PPUSH
41635: CALL_OW 437
41639: PUSH
41640: LD_INT 1
41642: ARRAY
41643: PUSH
41644: LD_INT 4
41646: ARRAY
41647: PUSH
41648: LD_VAR 0 2
41652: EQUAL
41653: AND
41654: IFFALSE 41666
// result := true else
41656: LD_ADDR_VAR 0 3
41660: PUSH
41661: LD_INT 1
41663: ST_TO_ADDR
41664: GO 41674
// result := false ;
41666: LD_ADDR_VAR 0 3
41670: PUSH
41671: LD_INT 0
41673: ST_TO_ADDR
// end else
41674: GO 41684
// result := false ;
41676: LD_ADDR_VAR 0 3
41680: PUSH
41681: LD_INT 0
41683: ST_TO_ADDR
// end ;
41684: LD_VAR 0 3
41688: RET
// export function HealTarget ( sci ) ; begin
41689: LD_INT 0
41691: PPUSH
// if not sci then
41692: LD_VAR 0 1
41696: NOT
41697: IFFALSE 41701
// exit ;
41699: GO 41766
// result := 0 ;
41701: LD_ADDR_VAR 0 2
41705: PUSH
41706: LD_INT 0
41708: ST_TO_ADDR
// if GetTaskList ( sci ) then
41709: LD_VAR 0 1
41713: PPUSH
41714: CALL_OW 437
41718: IFFALSE 41766
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
41720: LD_VAR 0 1
41724: PPUSH
41725: CALL_OW 437
41729: PUSH
41730: LD_INT 1
41732: ARRAY
41733: PUSH
41734: LD_INT 1
41736: ARRAY
41737: PUSH
41738: LD_STRING l
41740: EQUAL
41741: IFFALSE 41766
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
41743: LD_ADDR_VAR 0 2
41747: PUSH
41748: LD_VAR 0 1
41752: PPUSH
41753: CALL_OW 437
41757: PUSH
41758: LD_INT 1
41760: ARRAY
41761: PUSH
41762: LD_INT 4
41764: ARRAY
41765: ST_TO_ADDR
// end ;
41766: LD_VAR 0 2
41770: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
41771: LD_INT 0
41773: PPUSH
41774: PPUSH
41775: PPUSH
41776: PPUSH
// if not base_units then
41777: LD_VAR 0 1
41781: NOT
41782: IFFALSE 41786
// exit ;
41784: GO 41873
// result := false ;
41786: LD_ADDR_VAR 0 2
41790: PUSH
41791: LD_INT 0
41793: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
41794: LD_ADDR_VAR 0 5
41798: PUSH
41799: LD_VAR 0 1
41803: PPUSH
41804: LD_INT 21
41806: PUSH
41807: LD_INT 3
41809: PUSH
41810: EMPTY
41811: LIST
41812: LIST
41813: PPUSH
41814: CALL_OW 72
41818: ST_TO_ADDR
// if not tmp then
41819: LD_VAR 0 5
41823: NOT
41824: IFFALSE 41828
// exit ;
41826: GO 41873
// for i in tmp do
41828: LD_ADDR_VAR 0 3
41832: PUSH
41833: LD_VAR 0 5
41837: PUSH
41838: FOR_IN
41839: IFFALSE 41871
// begin result := EnemyInRange ( i , 22 ) ;
41841: LD_ADDR_VAR 0 2
41845: PUSH
41846: LD_VAR 0 3
41850: PPUSH
41851: LD_INT 22
41853: PPUSH
41854: CALL 40109 0 2
41858: ST_TO_ADDR
// if result then
41859: LD_VAR 0 2
41863: IFFALSE 41869
// exit ;
41865: POP
41866: POP
41867: GO 41873
// end ;
41869: GO 41838
41871: POP
41872: POP
// end ;
41873: LD_VAR 0 2
41877: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
41878: LD_INT 0
41880: PPUSH
41881: PPUSH
// if not units then
41882: LD_VAR 0 1
41886: NOT
41887: IFFALSE 41891
// exit ;
41889: GO 41961
// result := [ ] ;
41891: LD_ADDR_VAR 0 3
41895: PUSH
41896: EMPTY
41897: ST_TO_ADDR
// for i in units do
41898: LD_ADDR_VAR 0 4
41902: PUSH
41903: LD_VAR 0 1
41907: PUSH
41908: FOR_IN
41909: IFFALSE 41959
// if GetTag ( i ) = tag then
41911: LD_VAR 0 4
41915: PPUSH
41916: CALL_OW 110
41920: PUSH
41921: LD_VAR 0 2
41925: EQUAL
41926: IFFALSE 41957
// result := Insert ( result , result + 1 , i ) ;
41928: LD_ADDR_VAR 0 3
41932: PUSH
41933: LD_VAR 0 3
41937: PPUSH
41938: LD_VAR 0 3
41942: PUSH
41943: LD_INT 1
41945: PLUS
41946: PPUSH
41947: LD_VAR 0 4
41951: PPUSH
41952: CALL_OW 2
41956: ST_TO_ADDR
41957: GO 41908
41959: POP
41960: POP
// end ;
41961: LD_VAR 0 3
41965: RET
// export function IsDriver ( un ) ; begin
41966: LD_INT 0
41968: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
41969: LD_ADDR_VAR 0 2
41973: PUSH
41974: LD_VAR 0 1
41978: PUSH
41979: LD_INT 55
41981: PUSH
41982: EMPTY
41983: LIST
41984: PPUSH
41985: CALL_OW 69
41989: IN
41990: ST_TO_ADDR
// end ;
41991: LD_VAR 0 2
41995: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
41996: LD_INT 0
41998: PPUSH
41999: PPUSH
// list := [ ] ;
42000: LD_ADDR_VAR 0 5
42004: PUSH
42005: EMPTY
42006: ST_TO_ADDR
// case d of 0 :
42007: LD_VAR 0 3
42011: PUSH
42012: LD_INT 0
42014: DOUBLE
42015: EQUAL
42016: IFTRUE 42020
42018: GO 42153
42020: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
42021: LD_ADDR_VAR 0 5
42025: PUSH
42026: LD_VAR 0 1
42030: PUSH
42031: LD_INT 4
42033: MINUS
42034: PUSH
42035: LD_VAR 0 2
42039: PUSH
42040: LD_INT 4
42042: MINUS
42043: PUSH
42044: LD_INT 2
42046: PUSH
42047: EMPTY
42048: LIST
42049: LIST
42050: LIST
42051: PUSH
42052: LD_VAR 0 1
42056: PUSH
42057: LD_INT 3
42059: MINUS
42060: PUSH
42061: LD_VAR 0 2
42065: PUSH
42066: LD_INT 1
42068: PUSH
42069: EMPTY
42070: LIST
42071: LIST
42072: LIST
42073: PUSH
42074: LD_VAR 0 1
42078: PUSH
42079: LD_INT 4
42081: PLUS
42082: PUSH
42083: LD_VAR 0 2
42087: PUSH
42088: LD_INT 4
42090: PUSH
42091: EMPTY
42092: LIST
42093: LIST
42094: LIST
42095: PUSH
42096: LD_VAR 0 1
42100: PUSH
42101: LD_INT 3
42103: PLUS
42104: PUSH
42105: LD_VAR 0 2
42109: PUSH
42110: LD_INT 3
42112: PLUS
42113: PUSH
42114: LD_INT 5
42116: PUSH
42117: EMPTY
42118: LIST
42119: LIST
42120: LIST
42121: PUSH
42122: LD_VAR 0 1
42126: PUSH
42127: LD_VAR 0 2
42131: PUSH
42132: LD_INT 4
42134: PLUS
42135: PUSH
42136: LD_INT 0
42138: PUSH
42139: EMPTY
42140: LIST
42141: LIST
42142: LIST
42143: PUSH
42144: EMPTY
42145: LIST
42146: LIST
42147: LIST
42148: LIST
42149: LIST
42150: ST_TO_ADDR
// end ; 1 :
42151: GO 42851
42153: LD_INT 1
42155: DOUBLE
42156: EQUAL
42157: IFTRUE 42161
42159: GO 42294
42161: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
42162: LD_ADDR_VAR 0 5
42166: PUSH
42167: LD_VAR 0 1
42171: PUSH
42172: LD_VAR 0 2
42176: PUSH
42177: LD_INT 4
42179: MINUS
42180: PUSH
42181: LD_INT 3
42183: PUSH
42184: EMPTY
42185: LIST
42186: LIST
42187: LIST
42188: PUSH
42189: LD_VAR 0 1
42193: PUSH
42194: LD_INT 3
42196: MINUS
42197: PUSH
42198: LD_VAR 0 2
42202: PUSH
42203: LD_INT 3
42205: MINUS
42206: PUSH
42207: LD_INT 2
42209: PUSH
42210: EMPTY
42211: LIST
42212: LIST
42213: LIST
42214: PUSH
42215: LD_VAR 0 1
42219: PUSH
42220: LD_INT 4
42222: MINUS
42223: PUSH
42224: LD_VAR 0 2
42228: PUSH
42229: LD_INT 1
42231: PUSH
42232: EMPTY
42233: LIST
42234: LIST
42235: LIST
42236: PUSH
42237: LD_VAR 0 1
42241: PUSH
42242: LD_VAR 0 2
42246: PUSH
42247: LD_INT 3
42249: PLUS
42250: PUSH
42251: LD_INT 0
42253: PUSH
42254: EMPTY
42255: LIST
42256: LIST
42257: LIST
42258: PUSH
42259: LD_VAR 0 1
42263: PUSH
42264: LD_INT 4
42266: PLUS
42267: PUSH
42268: LD_VAR 0 2
42272: PUSH
42273: LD_INT 4
42275: PLUS
42276: PUSH
42277: LD_INT 5
42279: PUSH
42280: EMPTY
42281: LIST
42282: LIST
42283: LIST
42284: PUSH
42285: EMPTY
42286: LIST
42287: LIST
42288: LIST
42289: LIST
42290: LIST
42291: ST_TO_ADDR
// end ; 2 :
42292: GO 42851
42294: LD_INT 2
42296: DOUBLE
42297: EQUAL
42298: IFTRUE 42302
42300: GO 42431
42302: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
42303: LD_ADDR_VAR 0 5
42307: PUSH
42308: LD_VAR 0 1
42312: PUSH
42313: LD_VAR 0 2
42317: PUSH
42318: LD_INT 3
42320: MINUS
42321: PUSH
42322: LD_INT 3
42324: PUSH
42325: EMPTY
42326: LIST
42327: LIST
42328: LIST
42329: PUSH
42330: LD_VAR 0 1
42334: PUSH
42335: LD_INT 4
42337: PLUS
42338: PUSH
42339: LD_VAR 0 2
42343: PUSH
42344: LD_INT 4
42346: PUSH
42347: EMPTY
42348: LIST
42349: LIST
42350: LIST
42351: PUSH
42352: LD_VAR 0 1
42356: PUSH
42357: LD_VAR 0 2
42361: PUSH
42362: LD_INT 4
42364: PLUS
42365: PUSH
42366: LD_INT 0
42368: PUSH
42369: EMPTY
42370: LIST
42371: LIST
42372: LIST
42373: PUSH
42374: LD_VAR 0 1
42378: PUSH
42379: LD_INT 3
42381: MINUS
42382: PUSH
42383: LD_VAR 0 2
42387: PUSH
42388: LD_INT 1
42390: PUSH
42391: EMPTY
42392: LIST
42393: LIST
42394: LIST
42395: PUSH
42396: LD_VAR 0 1
42400: PUSH
42401: LD_INT 4
42403: MINUS
42404: PUSH
42405: LD_VAR 0 2
42409: PUSH
42410: LD_INT 4
42412: MINUS
42413: PUSH
42414: LD_INT 2
42416: PUSH
42417: EMPTY
42418: LIST
42419: LIST
42420: LIST
42421: PUSH
42422: EMPTY
42423: LIST
42424: LIST
42425: LIST
42426: LIST
42427: LIST
42428: ST_TO_ADDR
// end ; 3 :
42429: GO 42851
42431: LD_INT 3
42433: DOUBLE
42434: EQUAL
42435: IFTRUE 42439
42437: GO 42572
42439: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
42440: LD_ADDR_VAR 0 5
42444: PUSH
42445: LD_VAR 0 1
42449: PUSH
42450: LD_INT 3
42452: PLUS
42453: PUSH
42454: LD_VAR 0 2
42458: PUSH
42459: LD_INT 4
42461: PUSH
42462: EMPTY
42463: LIST
42464: LIST
42465: LIST
42466: PUSH
42467: LD_VAR 0 1
42471: PUSH
42472: LD_INT 4
42474: PLUS
42475: PUSH
42476: LD_VAR 0 2
42480: PUSH
42481: LD_INT 4
42483: PLUS
42484: PUSH
42485: LD_INT 5
42487: PUSH
42488: EMPTY
42489: LIST
42490: LIST
42491: LIST
42492: PUSH
42493: LD_VAR 0 1
42497: PUSH
42498: LD_INT 4
42500: MINUS
42501: PUSH
42502: LD_VAR 0 2
42506: PUSH
42507: LD_INT 1
42509: PUSH
42510: EMPTY
42511: LIST
42512: LIST
42513: LIST
42514: PUSH
42515: LD_VAR 0 1
42519: PUSH
42520: LD_VAR 0 2
42524: PUSH
42525: LD_INT 4
42527: MINUS
42528: PUSH
42529: LD_INT 3
42531: PUSH
42532: EMPTY
42533: LIST
42534: LIST
42535: LIST
42536: PUSH
42537: LD_VAR 0 1
42541: PUSH
42542: LD_INT 3
42544: MINUS
42545: PUSH
42546: LD_VAR 0 2
42550: PUSH
42551: LD_INT 3
42553: MINUS
42554: PUSH
42555: LD_INT 2
42557: PUSH
42558: EMPTY
42559: LIST
42560: LIST
42561: LIST
42562: PUSH
42563: EMPTY
42564: LIST
42565: LIST
42566: LIST
42567: LIST
42568: LIST
42569: ST_TO_ADDR
// end ; 4 :
42570: GO 42851
42572: LD_INT 4
42574: DOUBLE
42575: EQUAL
42576: IFTRUE 42580
42578: GO 42713
42580: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
42581: LD_ADDR_VAR 0 5
42585: PUSH
42586: LD_VAR 0 1
42590: PUSH
42591: LD_VAR 0 2
42595: PUSH
42596: LD_INT 4
42598: PLUS
42599: PUSH
42600: LD_INT 0
42602: PUSH
42603: EMPTY
42604: LIST
42605: LIST
42606: LIST
42607: PUSH
42608: LD_VAR 0 1
42612: PUSH
42613: LD_INT 3
42615: PLUS
42616: PUSH
42617: LD_VAR 0 2
42621: PUSH
42622: LD_INT 3
42624: PLUS
42625: PUSH
42626: LD_INT 5
42628: PUSH
42629: EMPTY
42630: LIST
42631: LIST
42632: LIST
42633: PUSH
42634: LD_VAR 0 1
42638: PUSH
42639: LD_INT 4
42641: PLUS
42642: PUSH
42643: LD_VAR 0 2
42647: PUSH
42648: LD_INT 4
42650: PUSH
42651: EMPTY
42652: LIST
42653: LIST
42654: LIST
42655: PUSH
42656: LD_VAR 0 1
42660: PUSH
42661: LD_VAR 0 2
42665: PUSH
42666: LD_INT 3
42668: MINUS
42669: PUSH
42670: LD_INT 3
42672: PUSH
42673: EMPTY
42674: LIST
42675: LIST
42676: LIST
42677: PUSH
42678: LD_VAR 0 1
42682: PUSH
42683: LD_INT 4
42685: MINUS
42686: PUSH
42687: LD_VAR 0 2
42691: PUSH
42692: LD_INT 4
42694: MINUS
42695: PUSH
42696: LD_INT 2
42698: PUSH
42699: EMPTY
42700: LIST
42701: LIST
42702: LIST
42703: PUSH
42704: EMPTY
42705: LIST
42706: LIST
42707: LIST
42708: LIST
42709: LIST
42710: ST_TO_ADDR
// end ; 5 :
42711: GO 42851
42713: LD_INT 5
42715: DOUBLE
42716: EQUAL
42717: IFTRUE 42721
42719: GO 42850
42721: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
42722: LD_ADDR_VAR 0 5
42726: PUSH
42727: LD_VAR 0 1
42731: PUSH
42732: LD_INT 4
42734: MINUS
42735: PUSH
42736: LD_VAR 0 2
42740: PUSH
42741: LD_INT 1
42743: PUSH
42744: EMPTY
42745: LIST
42746: LIST
42747: LIST
42748: PUSH
42749: LD_VAR 0 1
42753: PUSH
42754: LD_VAR 0 2
42758: PUSH
42759: LD_INT 4
42761: MINUS
42762: PUSH
42763: LD_INT 3
42765: PUSH
42766: EMPTY
42767: LIST
42768: LIST
42769: LIST
42770: PUSH
42771: LD_VAR 0 1
42775: PUSH
42776: LD_INT 4
42778: PLUS
42779: PUSH
42780: LD_VAR 0 2
42784: PUSH
42785: LD_INT 4
42787: PLUS
42788: PUSH
42789: LD_INT 5
42791: PUSH
42792: EMPTY
42793: LIST
42794: LIST
42795: LIST
42796: PUSH
42797: LD_VAR 0 1
42801: PUSH
42802: LD_INT 3
42804: PLUS
42805: PUSH
42806: LD_VAR 0 2
42810: PUSH
42811: LD_INT 4
42813: PUSH
42814: EMPTY
42815: LIST
42816: LIST
42817: LIST
42818: PUSH
42819: LD_VAR 0 1
42823: PUSH
42824: LD_VAR 0 2
42828: PUSH
42829: LD_INT 3
42831: PLUS
42832: PUSH
42833: LD_INT 0
42835: PUSH
42836: EMPTY
42837: LIST
42838: LIST
42839: LIST
42840: PUSH
42841: EMPTY
42842: LIST
42843: LIST
42844: LIST
42845: LIST
42846: LIST
42847: ST_TO_ADDR
// end ; end ;
42848: GO 42851
42850: POP
// result := list ;
42851: LD_ADDR_VAR 0 4
42855: PUSH
42856: LD_VAR 0 5
42860: ST_TO_ADDR
// end ;
42861: LD_VAR 0 4
42865: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
42866: LD_INT 0
42868: PPUSH
42869: PPUSH
42870: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
42871: LD_VAR 0 1
42875: NOT
42876: PUSH
42877: LD_VAR 0 2
42881: PUSH
42882: LD_INT 1
42884: PUSH
42885: LD_INT 2
42887: PUSH
42888: LD_INT 3
42890: PUSH
42891: LD_INT 4
42893: PUSH
42894: EMPTY
42895: LIST
42896: LIST
42897: LIST
42898: LIST
42899: IN
42900: NOT
42901: OR
42902: IFFALSE 42906
// exit ;
42904: GO 42998
// tmp := [ ] ;
42906: LD_ADDR_VAR 0 5
42910: PUSH
42911: EMPTY
42912: ST_TO_ADDR
// for i in units do
42913: LD_ADDR_VAR 0 4
42917: PUSH
42918: LD_VAR 0 1
42922: PUSH
42923: FOR_IN
42924: IFFALSE 42967
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
42926: LD_ADDR_VAR 0 5
42930: PUSH
42931: LD_VAR 0 5
42935: PPUSH
42936: LD_VAR 0 5
42940: PUSH
42941: LD_INT 1
42943: PLUS
42944: PPUSH
42945: LD_VAR 0 4
42949: PPUSH
42950: LD_VAR 0 2
42954: PPUSH
42955: CALL_OW 259
42959: PPUSH
42960: CALL_OW 2
42964: ST_TO_ADDR
42965: GO 42923
42967: POP
42968: POP
// if not tmp then
42969: LD_VAR 0 5
42973: NOT
42974: IFFALSE 42978
// exit ;
42976: GO 42998
// result := SortListByListDesc ( units , tmp ) ;
42978: LD_ADDR_VAR 0 3
42982: PUSH
42983: LD_VAR 0 1
42987: PPUSH
42988: LD_VAR 0 5
42992: PPUSH
42993: CALL_OW 77
42997: ST_TO_ADDR
// end ;
42998: LD_VAR 0 3
43002: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
43003: LD_INT 0
43005: PPUSH
43006: PPUSH
43007: PPUSH
// result := false ;
43008: LD_ADDR_VAR 0 3
43012: PUSH
43013: LD_INT 0
43015: ST_TO_ADDR
// x := GetX ( building ) ;
43016: LD_ADDR_VAR 0 4
43020: PUSH
43021: LD_VAR 0 2
43025: PPUSH
43026: CALL_OW 250
43030: ST_TO_ADDR
// y := GetY ( building ) ;
43031: LD_ADDR_VAR 0 5
43035: PUSH
43036: LD_VAR 0 2
43040: PPUSH
43041: CALL_OW 251
43045: ST_TO_ADDR
// if not building or not x or not y then
43046: LD_VAR 0 2
43050: NOT
43051: PUSH
43052: LD_VAR 0 4
43056: NOT
43057: OR
43058: PUSH
43059: LD_VAR 0 5
43063: NOT
43064: OR
43065: IFFALSE 43069
// exit ;
43067: GO 43161
// if GetTaskList ( unit ) then
43069: LD_VAR 0 1
43073: PPUSH
43074: CALL_OW 437
43078: IFFALSE 43161
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
43080: LD_STRING e
43082: PUSH
43083: LD_VAR 0 1
43087: PPUSH
43088: CALL_OW 437
43092: PUSH
43093: LD_INT 1
43095: ARRAY
43096: PUSH
43097: LD_INT 1
43099: ARRAY
43100: EQUAL
43101: PUSH
43102: LD_VAR 0 4
43106: PUSH
43107: LD_VAR 0 1
43111: PPUSH
43112: CALL_OW 437
43116: PUSH
43117: LD_INT 1
43119: ARRAY
43120: PUSH
43121: LD_INT 2
43123: ARRAY
43124: EQUAL
43125: AND
43126: PUSH
43127: LD_VAR 0 5
43131: PUSH
43132: LD_VAR 0 1
43136: PPUSH
43137: CALL_OW 437
43141: PUSH
43142: LD_INT 1
43144: ARRAY
43145: PUSH
43146: LD_INT 3
43148: ARRAY
43149: EQUAL
43150: AND
43151: IFFALSE 43161
// result := true end ;
43153: LD_ADDR_VAR 0 3
43157: PUSH
43158: LD_INT 1
43160: ST_TO_ADDR
// end ;
43161: LD_VAR 0 3
43165: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
43166: LD_INT 0
43168: PPUSH
// result := false ;
43169: LD_ADDR_VAR 0 4
43173: PUSH
43174: LD_INT 0
43176: ST_TO_ADDR
// if GetTaskList ( unit ) then
43177: LD_VAR 0 1
43181: PPUSH
43182: CALL_OW 437
43186: IFFALSE 43269
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
43188: LD_STRING M
43190: PUSH
43191: LD_VAR 0 1
43195: PPUSH
43196: CALL_OW 437
43200: PUSH
43201: LD_INT 1
43203: ARRAY
43204: PUSH
43205: LD_INT 1
43207: ARRAY
43208: EQUAL
43209: PUSH
43210: LD_VAR 0 2
43214: PUSH
43215: LD_VAR 0 1
43219: PPUSH
43220: CALL_OW 437
43224: PUSH
43225: LD_INT 1
43227: ARRAY
43228: PUSH
43229: LD_INT 2
43231: ARRAY
43232: EQUAL
43233: AND
43234: PUSH
43235: LD_VAR 0 3
43239: PUSH
43240: LD_VAR 0 1
43244: PPUSH
43245: CALL_OW 437
43249: PUSH
43250: LD_INT 1
43252: ARRAY
43253: PUSH
43254: LD_INT 3
43256: ARRAY
43257: EQUAL
43258: AND
43259: IFFALSE 43269
// result := true ;
43261: LD_ADDR_VAR 0 4
43265: PUSH
43266: LD_INT 1
43268: ST_TO_ADDR
// end ; end ;
43269: LD_VAR 0 4
43273: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
43274: LD_INT 0
43276: PPUSH
43277: PPUSH
43278: PPUSH
43279: PPUSH
// if not unit or not area then
43280: LD_VAR 0 1
43284: NOT
43285: PUSH
43286: LD_VAR 0 2
43290: NOT
43291: OR
43292: IFFALSE 43296
// exit ;
43294: GO 43460
// tmp := AreaToList ( area , i ) ;
43296: LD_ADDR_VAR 0 6
43300: PUSH
43301: LD_VAR 0 2
43305: PPUSH
43306: LD_VAR 0 5
43310: PPUSH
43311: CALL_OW 517
43315: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
43316: LD_ADDR_VAR 0 5
43320: PUSH
43321: DOUBLE
43322: LD_INT 1
43324: DEC
43325: ST_TO_ADDR
43326: LD_VAR 0 6
43330: PUSH
43331: LD_INT 1
43333: ARRAY
43334: PUSH
43335: FOR_TO
43336: IFFALSE 43458
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
43338: LD_ADDR_VAR 0 7
43342: PUSH
43343: LD_VAR 0 6
43347: PUSH
43348: LD_INT 1
43350: ARRAY
43351: PUSH
43352: LD_VAR 0 5
43356: ARRAY
43357: PUSH
43358: LD_VAR 0 6
43362: PUSH
43363: LD_INT 2
43365: ARRAY
43366: PUSH
43367: LD_VAR 0 5
43371: ARRAY
43372: PUSH
43373: EMPTY
43374: LIST
43375: LIST
43376: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
43377: LD_VAR 0 7
43381: PUSH
43382: LD_INT 1
43384: ARRAY
43385: PPUSH
43386: LD_VAR 0 7
43390: PUSH
43391: LD_INT 2
43393: ARRAY
43394: PPUSH
43395: CALL_OW 428
43399: PUSH
43400: LD_INT 0
43402: EQUAL
43403: IFFALSE 43456
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
43405: LD_VAR 0 1
43409: PPUSH
43410: LD_VAR 0 7
43414: PUSH
43415: LD_INT 1
43417: ARRAY
43418: PPUSH
43419: LD_VAR 0 7
43423: PUSH
43424: LD_INT 2
43426: ARRAY
43427: PPUSH
43428: LD_VAR 0 3
43432: PPUSH
43433: CALL_OW 48
// result := IsPlaced ( unit ) ;
43437: LD_ADDR_VAR 0 4
43441: PUSH
43442: LD_VAR 0 1
43446: PPUSH
43447: CALL_OW 305
43451: ST_TO_ADDR
// exit ;
43452: POP
43453: POP
43454: GO 43460
// end ; end ;
43456: GO 43335
43458: POP
43459: POP
// end ;
43460: LD_VAR 0 4
43464: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
43465: LD_INT 0
43467: PPUSH
43468: PPUSH
43469: PPUSH
// if not side or side > 8 then
43470: LD_VAR 0 1
43474: NOT
43475: PUSH
43476: LD_VAR 0 1
43480: PUSH
43481: LD_INT 8
43483: GREATER
43484: OR
43485: IFFALSE 43489
// exit ;
43487: GO 43676
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
43489: LD_ADDR_VAR 0 4
43493: PUSH
43494: LD_INT 22
43496: PUSH
43497: LD_VAR 0 1
43501: PUSH
43502: EMPTY
43503: LIST
43504: LIST
43505: PUSH
43506: LD_INT 21
43508: PUSH
43509: LD_INT 3
43511: PUSH
43512: EMPTY
43513: LIST
43514: LIST
43515: PUSH
43516: EMPTY
43517: LIST
43518: LIST
43519: PPUSH
43520: CALL_OW 69
43524: ST_TO_ADDR
// if not tmp then
43525: LD_VAR 0 4
43529: NOT
43530: IFFALSE 43534
// exit ;
43532: GO 43676
// enable_addtolog := true ;
43534: LD_ADDR_OWVAR 81
43538: PUSH
43539: LD_INT 1
43541: ST_TO_ADDR
// AddToLog ( [ ) ;
43542: LD_STRING [
43544: PPUSH
43545: CALL_OW 561
// for i in tmp do
43549: LD_ADDR_VAR 0 3
43553: PUSH
43554: LD_VAR 0 4
43558: PUSH
43559: FOR_IN
43560: IFFALSE 43667
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
43562: LD_STRING [
43564: PUSH
43565: LD_VAR 0 3
43569: PPUSH
43570: CALL_OW 266
43574: STR
43575: PUSH
43576: LD_STRING , 
43578: STR
43579: PUSH
43580: LD_VAR 0 3
43584: PPUSH
43585: CALL_OW 250
43589: STR
43590: PUSH
43591: LD_STRING , 
43593: STR
43594: PUSH
43595: LD_VAR 0 3
43599: PPUSH
43600: CALL_OW 251
43604: STR
43605: PUSH
43606: LD_STRING , 
43608: STR
43609: PUSH
43610: LD_VAR 0 3
43614: PPUSH
43615: CALL_OW 254
43619: STR
43620: PUSH
43621: LD_STRING , 
43623: STR
43624: PUSH
43625: LD_VAR 0 3
43629: PPUSH
43630: LD_INT 1
43632: PPUSH
43633: CALL_OW 268
43637: STR
43638: PUSH
43639: LD_STRING , 
43641: STR
43642: PUSH
43643: LD_VAR 0 3
43647: PPUSH
43648: LD_INT 2
43650: PPUSH
43651: CALL_OW 268
43655: STR
43656: PUSH
43657: LD_STRING ],
43659: STR
43660: PPUSH
43661: CALL_OW 561
// end ;
43665: GO 43559
43667: POP
43668: POP
// AddToLog ( ]; ) ;
43669: LD_STRING ];
43671: PPUSH
43672: CALL_OW 561
// end ;
43676: LD_VAR 0 2
43680: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
43681: LD_INT 0
43683: PPUSH
43684: PPUSH
43685: PPUSH
43686: PPUSH
43687: PPUSH
// if not area or not rate or not max then
43688: LD_VAR 0 1
43692: NOT
43693: PUSH
43694: LD_VAR 0 2
43698: NOT
43699: OR
43700: PUSH
43701: LD_VAR 0 4
43705: NOT
43706: OR
43707: IFFALSE 43711
// exit ;
43709: GO 43903
// while 1 do
43711: LD_INT 1
43713: IFFALSE 43903
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
43715: LD_ADDR_VAR 0 9
43719: PUSH
43720: LD_VAR 0 1
43724: PPUSH
43725: LD_INT 1
43727: PPUSH
43728: CALL_OW 287
43732: PUSH
43733: LD_INT 10
43735: MUL
43736: ST_TO_ADDR
// r := rate / 10 ;
43737: LD_ADDR_VAR 0 7
43741: PUSH
43742: LD_VAR 0 2
43746: PUSH
43747: LD_INT 10
43749: DIVREAL
43750: ST_TO_ADDR
// time := 1 1$00 ;
43751: LD_ADDR_VAR 0 8
43755: PUSH
43756: LD_INT 2100
43758: ST_TO_ADDR
// if amount < min then
43759: LD_VAR 0 9
43763: PUSH
43764: LD_VAR 0 3
43768: LESS
43769: IFFALSE 43787
// r := r * 2 else
43771: LD_ADDR_VAR 0 7
43775: PUSH
43776: LD_VAR 0 7
43780: PUSH
43781: LD_INT 2
43783: MUL
43784: ST_TO_ADDR
43785: GO 43813
// if amount > max then
43787: LD_VAR 0 9
43791: PUSH
43792: LD_VAR 0 4
43796: GREATER
43797: IFFALSE 43813
// r := r / 2 ;
43799: LD_ADDR_VAR 0 7
43803: PUSH
43804: LD_VAR 0 7
43808: PUSH
43809: LD_INT 2
43811: DIVREAL
43812: ST_TO_ADDR
// time := time / r ;
43813: LD_ADDR_VAR 0 8
43817: PUSH
43818: LD_VAR 0 8
43822: PUSH
43823: LD_VAR 0 7
43827: DIVREAL
43828: ST_TO_ADDR
// if time < 0 then
43829: LD_VAR 0 8
43833: PUSH
43834: LD_INT 0
43836: LESS
43837: IFFALSE 43854
// time := time * - 1 ;
43839: LD_ADDR_VAR 0 8
43843: PUSH
43844: LD_VAR 0 8
43848: PUSH
43849: LD_INT 1
43851: NEG
43852: MUL
43853: ST_TO_ADDR
// wait ( time ) ;
43854: LD_VAR 0 8
43858: PPUSH
43859: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
43863: LD_INT 35
43865: PPUSH
43866: LD_INT 875
43868: PPUSH
43869: CALL_OW 12
43873: PPUSH
43874: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
43878: LD_INT 1
43880: PPUSH
43881: LD_INT 5
43883: PPUSH
43884: CALL_OW 12
43888: PPUSH
43889: LD_VAR 0 1
43893: PPUSH
43894: LD_INT 1
43896: PPUSH
43897: CALL_OW 55
// end ;
43901: GO 43711
// end ;
43903: LD_VAR 0 5
43907: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
43908: LD_INT 0
43910: PPUSH
43911: PPUSH
43912: PPUSH
43913: PPUSH
43914: PPUSH
43915: PPUSH
43916: PPUSH
43917: PPUSH
// if not turrets or not factories then
43918: LD_VAR 0 1
43922: NOT
43923: PUSH
43924: LD_VAR 0 2
43928: NOT
43929: OR
43930: IFFALSE 43934
// exit ;
43932: GO 44241
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
43934: LD_ADDR_VAR 0 10
43938: PUSH
43939: LD_INT 5
43941: PUSH
43942: LD_INT 6
43944: PUSH
43945: EMPTY
43946: LIST
43947: LIST
43948: PUSH
43949: LD_INT 2
43951: PUSH
43952: LD_INT 4
43954: PUSH
43955: EMPTY
43956: LIST
43957: LIST
43958: PUSH
43959: LD_INT 3
43961: PUSH
43962: LD_INT 5
43964: PUSH
43965: EMPTY
43966: LIST
43967: LIST
43968: PUSH
43969: EMPTY
43970: LIST
43971: LIST
43972: LIST
43973: PUSH
43974: LD_INT 24
43976: PUSH
43977: LD_INT 25
43979: PUSH
43980: EMPTY
43981: LIST
43982: LIST
43983: PUSH
43984: LD_INT 23
43986: PUSH
43987: LD_INT 27
43989: PUSH
43990: EMPTY
43991: LIST
43992: LIST
43993: PUSH
43994: EMPTY
43995: LIST
43996: LIST
43997: PUSH
43998: LD_INT 42
44000: PUSH
44001: LD_INT 43
44003: PUSH
44004: EMPTY
44005: LIST
44006: LIST
44007: PUSH
44008: LD_INT 44
44010: PUSH
44011: LD_INT 46
44013: PUSH
44014: EMPTY
44015: LIST
44016: LIST
44017: PUSH
44018: LD_INT 45
44020: PUSH
44021: LD_INT 47
44023: PUSH
44024: EMPTY
44025: LIST
44026: LIST
44027: PUSH
44028: EMPTY
44029: LIST
44030: LIST
44031: LIST
44032: PUSH
44033: EMPTY
44034: LIST
44035: LIST
44036: LIST
44037: ST_TO_ADDR
// result := [ ] ;
44038: LD_ADDR_VAR 0 3
44042: PUSH
44043: EMPTY
44044: ST_TO_ADDR
// for i in turrets do
44045: LD_ADDR_VAR 0 4
44049: PUSH
44050: LD_VAR 0 1
44054: PUSH
44055: FOR_IN
44056: IFFALSE 44239
// begin nat := GetNation ( i ) ;
44058: LD_ADDR_VAR 0 7
44062: PUSH
44063: LD_VAR 0 4
44067: PPUSH
44068: CALL_OW 248
44072: ST_TO_ADDR
// weapon := 0 ;
44073: LD_ADDR_VAR 0 8
44077: PUSH
44078: LD_INT 0
44080: ST_TO_ADDR
// if not nat then
44081: LD_VAR 0 7
44085: NOT
44086: IFFALSE 44090
// continue ;
44088: GO 44055
// for j in list [ nat ] do
44090: LD_ADDR_VAR 0 5
44094: PUSH
44095: LD_VAR 0 10
44099: PUSH
44100: LD_VAR 0 7
44104: ARRAY
44105: PUSH
44106: FOR_IN
44107: IFFALSE 44148
// if GetBWeapon ( i ) = j [ 1 ] then
44109: LD_VAR 0 4
44113: PPUSH
44114: CALL_OW 269
44118: PUSH
44119: LD_VAR 0 5
44123: PUSH
44124: LD_INT 1
44126: ARRAY
44127: EQUAL
44128: IFFALSE 44146
// begin weapon := j [ 2 ] ;
44130: LD_ADDR_VAR 0 8
44134: PUSH
44135: LD_VAR 0 5
44139: PUSH
44140: LD_INT 2
44142: ARRAY
44143: ST_TO_ADDR
// break ;
44144: GO 44148
// end ;
44146: GO 44106
44148: POP
44149: POP
// if not weapon then
44150: LD_VAR 0 8
44154: NOT
44155: IFFALSE 44159
// continue ;
44157: GO 44055
// for k in factories do
44159: LD_ADDR_VAR 0 6
44163: PUSH
44164: LD_VAR 0 2
44168: PUSH
44169: FOR_IN
44170: IFFALSE 44235
// begin weapons := AvailableWeaponList ( k ) ;
44172: LD_ADDR_VAR 0 9
44176: PUSH
44177: LD_VAR 0 6
44181: PPUSH
44182: CALL_OW 478
44186: ST_TO_ADDR
// if not weapons then
44187: LD_VAR 0 9
44191: NOT
44192: IFFALSE 44196
// continue ;
44194: GO 44169
// if weapon in weapons then
44196: LD_VAR 0 8
44200: PUSH
44201: LD_VAR 0 9
44205: IN
44206: IFFALSE 44233
// begin result := [ i , weapon ] ;
44208: LD_ADDR_VAR 0 3
44212: PUSH
44213: LD_VAR 0 4
44217: PUSH
44218: LD_VAR 0 8
44222: PUSH
44223: EMPTY
44224: LIST
44225: LIST
44226: ST_TO_ADDR
// exit ;
44227: POP
44228: POP
44229: POP
44230: POP
44231: GO 44241
// end ; end ;
44233: GO 44169
44235: POP
44236: POP
// end ;
44237: GO 44055
44239: POP
44240: POP
// end ;
44241: LD_VAR 0 3
44245: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
44246: LD_INT 0
44248: PPUSH
// if not side or side > 8 then
44249: LD_VAR 0 3
44253: NOT
44254: PUSH
44255: LD_VAR 0 3
44259: PUSH
44260: LD_INT 8
44262: GREATER
44263: OR
44264: IFFALSE 44268
// exit ;
44266: GO 44327
// if not range then
44268: LD_VAR 0 4
44272: NOT
44273: IFFALSE 44284
// range := - 12 ;
44275: LD_ADDR_VAR 0 4
44279: PUSH
44280: LD_INT 12
44282: NEG
44283: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
44284: LD_VAR 0 1
44288: PPUSH
44289: LD_VAR 0 2
44293: PPUSH
44294: LD_VAR 0 3
44298: PPUSH
44299: LD_VAR 0 4
44303: PPUSH
44304: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
44308: LD_VAR 0 1
44312: PPUSH
44313: LD_VAR 0 2
44317: PPUSH
44318: LD_VAR 0 3
44322: PPUSH
44323: CALL_OW 331
// end ;
44327: LD_VAR 0 5
44331: RET
// export function Video ( mode ) ; begin
44332: LD_INT 0
44334: PPUSH
// ingame_video = mode ;
44335: LD_ADDR_OWVAR 52
44339: PUSH
44340: LD_VAR 0 1
44344: ST_TO_ADDR
// interface_hidden = mode ;
44345: LD_ADDR_OWVAR 54
44349: PUSH
44350: LD_VAR 0 1
44354: ST_TO_ADDR
// end ;
44355: LD_VAR 0 2
44359: RET
// export function Join ( array , element ) ; begin
44360: LD_INT 0
44362: PPUSH
// result := Replace ( array , array + 1 , element ) ;
44363: LD_ADDR_VAR 0 3
44367: PUSH
44368: LD_VAR 0 1
44372: PPUSH
44373: LD_VAR 0 1
44377: PUSH
44378: LD_INT 1
44380: PLUS
44381: PPUSH
44382: LD_VAR 0 2
44386: PPUSH
44387: CALL_OW 1
44391: ST_TO_ADDR
// end ;
44392: LD_VAR 0 3
44396: RET
// export function JoinUnion ( array , element ) ; begin
44397: LD_INT 0
44399: PPUSH
// result := array union element ;
44400: LD_ADDR_VAR 0 3
44404: PUSH
44405: LD_VAR 0 1
44409: PUSH
44410: LD_VAR 0 2
44414: UNION
44415: ST_TO_ADDR
// end ;
44416: LD_VAR 0 3
44420: RET
// export function GetBehemoths ( side ) ; begin
44421: LD_INT 0
44423: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
44424: LD_ADDR_VAR 0 2
44428: PUSH
44429: LD_INT 22
44431: PUSH
44432: LD_VAR 0 1
44436: PUSH
44437: EMPTY
44438: LIST
44439: LIST
44440: PUSH
44441: LD_INT 31
44443: PUSH
44444: LD_INT 25
44446: PUSH
44447: EMPTY
44448: LIST
44449: LIST
44450: PUSH
44451: EMPTY
44452: LIST
44453: LIST
44454: PPUSH
44455: CALL_OW 69
44459: ST_TO_ADDR
// end ;
44460: LD_VAR 0 2
44464: RET
// export function Shuffle ( array ) ; var i , index ; begin
44465: LD_INT 0
44467: PPUSH
44468: PPUSH
44469: PPUSH
// result := [ ] ;
44470: LD_ADDR_VAR 0 2
44474: PUSH
44475: EMPTY
44476: ST_TO_ADDR
// if not array then
44477: LD_VAR 0 1
44481: NOT
44482: IFFALSE 44486
// exit ;
44484: GO 44585
// Randomize ;
44486: CALL_OW 10
// for i = array downto 1 do
44490: LD_ADDR_VAR 0 3
44494: PUSH
44495: DOUBLE
44496: LD_VAR 0 1
44500: INC
44501: ST_TO_ADDR
44502: LD_INT 1
44504: PUSH
44505: FOR_DOWNTO
44506: IFFALSE 44583
// begin index := rand ( 1 , array ) ;
44508: LD_ADDR_VAR 0 4
44512: PUSH
44513: LD_INT 1
44515: PPUSH
44516: LD_VAR 0 1
44520: PPUSH
44521: CALL_OW 12
44525: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
44526: LD_ADDR_VAR 0 2
44530: PUSH
44531: LD_VAR 0 2
44535: PPUSH
44536: LD_VAR 0 2
44540: PUSH
44541: LD_INT 1
44543: PLUS
44544: PPUSH
44545: LD_VAR 0 1
44549: PUSH
44550: LD_VAR 0 4
44554: ARRAY
44555: PPUSH
44556: CALL_OW 2
44560: ST_TO_ADDR
// array := Delete ( array , index ) ;
44561: LD_ADDR_VAR 0 1
44565: PUSH
44566: LD_VAR 0 1
44570: PPUSH
44571: LD_VAR 0 4
44575: PPUSH
44576: CALL_OW 3
44580: ST_TO_ADDR
// end ;
44581: GO 44505
44583: POP
44584: POP
// end ;
44585: LD_VAR 0 2
44589: RET
// export function GetBaseMaterials ( base ) ; begin
44590: LD_INT 0
44592: PPUSH
// result := [ 0 , 0 , 0 ] ;
44593: LD_ADDR_VAR 0 2
44597: PUSH
44598: LD_INT 0
44600: PUSH
44601: LD_INT 0
44603: PUSH
44604: LD_INT 0
44606: PUSH
44607: EMPTY
44608: LIST
44609: LIST
44610: LIST
44611: ST_TO_ADDR
// if not base then
44612: LD_VAR 0 1
44616: NOT
44617: IFFALSE 44621
// exit ;
44619: GO 44670
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
44621: LD_ADDR_VAR 0 2
44625: PUSH
44626: LD_VAR 0 1
44630: PPUSH
44631: LD_INT 1
44633: PPUSH
44634: CALL_OW 275
44638: PUSH
44639: LD_VAR 0 1
44643: PPUSH
44644: LD_INT 2
44646: PPUSH
44647: CALL_OW 275
44651: PUSH
44652: LD_VAR 0 1
44656: PPUSH
44657: LD_INT 3
44659: PPUSH
44660: CALL_OW 275
44664: PUSH
44665: EMPTY
44666: LIST
44667: LIST
44668: LIST
44669: ST_TO_ADDR
// end ;
44670: LD_VAR 0 2
44674: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
44675: LD_INT 0
44677: PPUSH
44678: PPUSH
// result := array ;
44679: LD_ADDR_VAR 0 3
44683: PUSH
44684: LD_VAR 0 1
44688: ST_TO_ADDR
// if size > 0 then
44689: LD_VAR 0 2
44693: PUSH
44694: LD_INT 0
44696: GREATER
44697: IFFALSE 44743
// for i := array downto size do
44699: LD_ADDR_VAR 0 4
44703: PUSH
44704: DOUBLE
44705: LD_VAR 0 1
44709: INC
44710: ST_TO_ADDR
44711: LD_VAR 0 2
44715: PUSH
44716: FOR_DOWNTO
44717: IFFALSE 44741
// result := Delete ( result , result ) ;
44719: LD_ADDR_VAR 0 3
44723: PUSH
44724: LD_VAR 0 3
44728: PPUSH
44729: LD_VAR 0 3
44733: PPUSH
44734: CALL_OW 3
44738: ST_TO_ADDR
44739: GO 44716
44741: POP
44742: POP
// end ;
44743: LD_VAR 0 3
44747: RET
// export function ComExit ( unit ) ; var tmp ; begin
44748: LD_INT 0
44750: PPUSH
44751: PPUSH
// if not IsInUnit ( unit ) then
44752: LD_VAR 0 1
44756: PPUSH
44757: CALL_OW 310
44761: NOT
44762: IFFALSE 44766
// exit ;
44764: GO 44826
// tmp := IsInUnit ( unit ) ;
44766: LD_ADDR_VAR 0 3
44770: PUSH
44771: LD_VAR 0 1
44775: PPUSH
44776: CALL_OW 310
44780: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
44781: LD_VAR 0 3
44785: PPUSH
44786: CALL_OW 247
44790: PUSH
44791: LD_INT 2
44793: EQUAL
44794: IFFALSE 44807
// ComExitVehicle ( unit ) else
44796: LD_VAR 0 1
44800: PPUSH
44801: CALL_OW 121
44805: GO 44816
// ComExitBuilding ( unit ) ;
44807: LD_VAR 0 1
44811: PPUSH
44812: CALL_OW 122
// result := tmp ;
44816: LD_ADDR_VAR 0 2
44820: PUSH
44821: LD_VAR 0 3
44825: ST_TO_ADDR
// end ;
44826: LD_VAR 0 2
44830: RET
// export function ComExitAll ( units ) ; var i ; begin
44831: LD_INT 0
44833: PPUSH
44834: PPUSH
// if not units then
44835: LD_VAR 0 1
44839: NOT
44840: IFFALSE 44844
// exit ;
44842: GO 44870
// for i in units do
44844: LD_ADDR_VAR 0 3
44848: PUSH
44849: LD_VAR 0 1
44853: PUSH
44854: FOR_IN
44855: IFFALSE 44868
// ComExit ( i ) ;
44857: LD_VAR 0 3
44861: PPUSH
44862: CALL 44748 0 1
44866: GO 44854
44868: POP
44869: POP
// end ;
44870: LD_VAR 0 2
44874: RET
// export function ResetHc ; begin
44875: LD_INT 0
44877: PPUSH
// InitHc ;
44878: CALL_OW 19
// hc_importance := 0 ;
44882: LD_ADDR_OWVAR 32
44886: PUSH
44887: LD_INT 0
44889: ST_TO_ADDR
// end ;
44890: LD_VAR 0 1
44894: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
44895: LD_INT 0
44897: PPUSH
44898: PPUSH
44899: PPUSH
// _x := ( x1 + x2 ) div 2 ;
44900: LD_ADDR_VAR 0 6
44904: PUSH
44905: LD_VAR 0 1
44909: PUSH
44910: LD_VAR 0 3
44914: PLUS
44915: PUSH
44916: LD_INT 2
44918: DIV
44919: ST_TO_ADDR
// if _x < 0 then
44920: LD_VAR 0 6
44924: PUSH
44925: LD_INT 0
44927: LESS
44928: IFFALSE 44945
// _x := _x * - 1 ;
44930: LD_ADDR_VAR 0 6
44934: PUSH
44935: LD_VAR 0 6
44939: PUSH
44940: LD_INT 1
44942: NEG
44943: MUL
44944: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
44945: LD_ADDR_VAR 0 7
44949: PUSH
44950: LD_VAR 0 2
44954: PUSH
44955: LD_VAR 0 4
44959: PLUS
44960: PUSH
44961: LD_INT 2
44963: DIV
44964: ST_TO_ADDR
// if _y < 0 then
44965: LD_VAR 0 7
44969: PUSH
44970: LD_INT 0
44972: LESS
44973: IFFALSE 44990
// _y := _y * - 1 ;
44975: LD_ADDR_VAR 0 7
44979: PUSH
44980: LD_VAR 0 7
44984: PUSH
44985: LD_INT 1
44987: NEG
44988: MUL
44989: ST_TO_ADDR
// result := [ _x , _y ] ;
44990: LD_ADDR_VAR 0 5
44994: PUSH
44995: LD_VAR 0 6
44999: PUSH
45000: LD_VAR 0 7
45004: PUSH
45005: EMPTY
45006: LIST
45007: LIST
45008: ST_TO_ADDR
// end ;
45009: LD_VAR 0 5
45013: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
45014: LD_INT 0
45016: PPUSH
45017: PPUSH
45018: PPUSH
45019: PPUSH
// task := GetTaskList ( unit ) ;
45020: LD_ADDR_VAR 0 7
45024: PUSH
45025: LD_VAR 0 1
45029: PPUSH
45030: CALL_OW 437
45034: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
45035: LD_VAR 0 7
45039: NOT
45040: PUSH
45041: LD_VAR 0 1
45045: PPUSH
45046: LD_VAR 0 2
45050: PPUSH
45051: CALL_OW 308
45055: NOT
45056: AND
45057: IFFALSE 45061
// exit ;
45059: GO 45179
// if IsInArea ( unit , area ) then
45061: LD_VAR 0 1
45065: PPUSH
45066: LD_VAR 0 2
45070: PPUSH
45071: CALL_OW 308
45075: IFFALSE 45093
// begin ComMoveToArea ( unit , goAway ) ;
45077: LD_VAR 0 1
45081: PPUSH
45082: LD_VAR 0 3
45086: PPUSH
45087: CALL_OW 113
// exit ;
45091: GO 45179
// end ; if task [ 1 ] [ 1 ] <> M then
45093: LD_VAR 0 7
45097: PUSH
45098: LD_INT 1
45100: ARRAY
45101: PUSH
45102: LD_INT 1
45104: ARRAY
45105: PUSH
45106: LD_STRING M
45108: NONEQUAL
45109: IFFALSE 45113
// exit ;
45111: GO 45179
// x := task [ 1 ] [ 2 ] ;
45113: LD_ADDR_VAR 0 5
45117: PUSH
45118: LD_VAR 0 7
45122: PUSH
45123: LD_INT 1
45125: ARRAY
45126: PUSH
45127: LD_INT 2
45129: ARRAY
45130: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
45131: LD_ADDR_VAR 0 6
45135: PUSH
45136: LD_VAR 0 7
45140: PUSH
45141: LD_INT 1
45143: ARRAY
45144: PUSH
45145: LD_INT 3
45147: ARRAY
45148: ST_TO_ADDR
// if InArea ( x , y , area ) then
45149: LD_VAR 0 5
45153: PPUSH
45154: LD_VAR 0 6
45158: PPUSH
45159: LD_VAR 0 2
45163: PPUSH
45164: CALL_OW 309
45168: IFFALSE 45179
// ComStop ( unit ) ;
45170: LD_VAR 0 1
45174: PPUSH
45175: CALL_OW 141
// end ;
45179: LD_VAR 0 4
45183: RET
// export function Abs ( value ) ; begin
45184: LD_INT 0
45186: PPUSH
// result := value ;
45187: LD_ADDR_VAR 0 2
45191: PUSH
45192: LD_VAR 0 1
45196: ST_TO_ADDR
// if value < 0 then
45197: LD_VAR 0 1
45201: PUSH
45202: LD_INT 0
45204: LESS
45205: IFFALSE 45222
// result := value * - 1 ;
45207: LD_ADDR_VAR 0 2
45211: PUSH
45212: LD_VAR 0 1
45216: PUSH
45217: LD_INT 1
45219: NEG
45220: MUL
45221: ST_TO_ADDR
// end ;
45222: LD_VAR 0 2
45226: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
45227: LD_INT 0
45229: PPUSH
45230: PPUSH
45231: PPUSH
45232: PPUSH
45233: PPUSH
45234: PPUSH
45235: PPUSH
45236: PPUSH
// if not unit or not building then
45237: LD_VAR 0 1
45241: NOT
45242: PUSH
45243: LD_VAR 0 2
45247: NOT
45248: OR
45249: IFFALSE 45253
// exit ;
45251: GO 45479
// x := GetX ( building ) ;
45253: LD_ADDR_VAR 0 4
45257: PUSH
45258: LD_VAR 0 2
45262: PPUSH
45263: CALL_OW 250
45267: ST_TO_ADDR
// y := GetY ( building ) ;
45268: LD_ADDR_VAR 0 6
45272: PUSH
45273: LD_VAR 0 2
45277: PPUSH
45278: CALL_OW 251
45282: ST_TO_ADDR
// d := GetDir ( building ) ;
45283: LD_ADDR_VAR 0 8
45287: PUSH
45288: LD_VAR 0 2
45292: PPUSH
45293: CALL_OW 254
45297: ST_TO_ADDR
// r := 4 ;
45298: LD_ADDR_VAR 0 9
45302: PUSH
45303: LD_INT 4
45305: ST_TO_ADDR
// for i := 1 to 5 do
45306: LD_ADDR_VAR 0 10
45310: PUSH
45311: DOUBLE
45312: LD_INT 1
45314: DEC
45315: ST_TO_ADDR
45316: LD_INT 5
45318: PUSH
45319: FOR_TO
45320: IFFALSE 45477
// begin _x := ShiftX ( x , d , r + i ) ;
45322: LD_ADDR_VAR 0 5
45326: PUSH
45327: LD_VAR 0 4
45331: PPUSH
45332: LD_VAR 0 8
45336: PPUSH
45337: LD_VAR 0 9
45341: PUSH
45342: LD_VAR 0 10
45346: PLUS
45347: PPUSH
45348: CALL_OW 272
45352: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
45353: LD_ADDR_VAR 0 7
45357: PUSH
45358: LD_VAR 0 6
45362: PPUSH
45363: LD_VAR 0 8
45367: PPUSH
45368: LD_VAR 0 9
45372: PUSH
45373: LD_VAR 0 10
45377: PLUS
45378: PPUSH
45379: CALL_OW 273
45383: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
45384: LD_VAR 0 5
45388: PPUSH
45389: LD_VAR 0 7
45393: PPUSH
45394: CALL_OW 488
45398: PUSH
45399: LD_VAR 0 5
45403: PPUSH
45404: LD_VAR 0 7
45408: PPUSH
45409: CALL_OW 428
45413: PPUSH
45414: CALL_OW 247
45418: PUSH
45419: LD_INT 3
45421: PUSH
45422: LD_INT 2
45424: PUSH
45425: EMPTY
45426: LIST
45427: LIST
45428: IN
45429: NOT
45430: AND
45431: IFFALSE 45475
// begin ComMoveXY ( unit , _x , _y ) ;
45433: LD_VAR 0 1
45437: PPUSH
45438: LD_VAR 0 5
45442: PPUSH
45443: LD_VAR 0 7
45447: PPUSH
45448: CALL_OW 111
// result := [ _x , _y ] ;
45452: LD_ADDR_VAR 0 3
45456: PUSH
45457: LD_VAR 0 5
45461: PUSH
45462: LD_VAR 0 7
45466: PUSH
45467: EMPTY
45468: LIST
45469: LIST
45470: ST_TO_ADDR
// exit ;
45471: POP
45472: POP
45473: GO 45479
// end ; end ;
45475: GO 45319
45477: POP
45478: POP
// end ;
45479: LD_VAR 0 3
45483: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
45484: LD_INT 0
45486: PPUSH
45487: PPUSH
45488: PPUSH
// result := 0 ;
45489: LD_ADDR_VAR 0 3
45493: PUSH
45494: LD_INT 0
45496: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
45497: LD_VAR 0 1
45501: PUSH
45502: LD_INT 0
45504: LESS
45505: PUSH
45506: LD_VAR 0 1
45510: PUSH
45511: LD_INT 8
45513: GREATER
45514: OR
45515: PUSH
45516: LD_VAR 0 2
45520: PUSH
45521: LD_INT 0
45523: LESS
45524: OR
45525: PUSH
45526: LD_VAR 0 2
45530: PUSH
45531: LD_INT 8
45533: GREATER
45534: OR
45535: IFFALSE 45539
// exit ;
45537: GO 45614
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
45539: LD_ADDR_VAR 0 4
45543: PUSH
45544: LD_INT 22
45546: PUSH
45547: LD_VAR 0 2
45551: PUSH
45552: EMPTY
45553: LIST
45554: LIST
45555: PPUSH
45556: CALL_OW 69
45560: PUSH
45561: FOR_IN
45562: IFFALSE 45612
// begin un := UnitShoot ( i ) ;
45564: LD_ADDR_VAR 0 5
45568: PUSH
45569: LD_VAR 0 4
45573: PPUSH
45574: CALL_OW 504
45578: ST_TO_ADDR
// if GetSide ( un ) = side1 then
45579: LD_VAR 0 5
45583: PPUSH
45584: CALL_OW 255
45588: PUSH
45589: LD_VAR 0 1
45593: EQUAL
45594: IFFALSE 45610
// begin result := un ;
45596: LD_ADDR_VAR 0 3
45600: PUSH
45601: LD_VAR 0 5
45605: ST_TO_ADDR
// exit ;
45606: POP
45607: POP
45608: GO 45614
// end ; end ;
45610: GO 45561
45612: POP
45613: POP
// end ;
45614: LD_VAR 0 3
45618: RET
// export function GetCargoBay ( units ) ; begin
45619: LD_INT 0
45621: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
45622: LD_ADDR_VAR 0 2
45626: PUSH
45627: LD_VAR 0 1
45631: PPUSH
45632: LD_INT 2
45634: PUSH
45635: LD_INT 34
45637: PUSH
45638: LD_INT 12
45640: PUSH
45641: EMPTY
45642: LIST
45643: LIST
45644: PUSH
45645: LD_INT 34
45647: PUSH
45648: LD_INT 51
45650: PUSH
45651: EMPTY
45652: LIST
45653: LIST
45654: PUSH
45655: LD_INT 34
45657: PUSH
45658: LD_INT 32
45660: PUSH
45661: EMPTY
45662: LIST
45663: LIST
45664: PUSH
45665: LD_INT 34
45667: PUSH
45668: LD_EXP 40
45672: PUSH
45673: EMPTY
45674: LIST
45675: LIST
45676: PUSH
45677: EMPTY
45678: LIST
45679: LIST
45680: LIST
45681: LIST
45682: LIST
45683: PPUSH
45684: CALL_OW 72
45688: ST_TO_ADDR
// end ;
45689: LD_VAR 0 2
45693: RET
// export function Negate ( value ) ; begin
45694: LD_INT 0
45696: PPUSH
// result := not value ;
45697: LD_ADDR_VAR 0 2
45701: PUSH
45702: LD_VAR 0 1
45706: NOT
45707: ST_TO_ADDR
// end ;
45708: LD_VAR 0 2
45712: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; begin
45713: LD_INT 0
45715: PPUSH
// if x1 = x2 then
45716: LD_VAR 0 1
45720: PUSH
45721: LD_VAR 0 3
45725: EQUAL
45726: IFFALSE 45760
// begin if y1 > y2 then
45728: LD_VAR 0 2
45732: PUSH
45733: LD_VAR 0 4
45737: GREATER
45738: IFFALSE 45750
// result := 0 else
45740: LD_ADDR_VAR 0 5
45744: PUSH
45745: LD_INT 0
45747: ST_TO_ADDR
45748: GO 45758
// result := 3 ;
45750: LD_ADDR_VAR 0 5
45754: PUSH
45755: LD_INT 3
45757: ST_TO_ADDR
// exit ;
45758: GO 45846
// end ; if y1 = y2 then
45760: LD_VAR 0 2
45764: PUSH
45765: LD_VAR 0 4
45769: EQUAL
45770: IFFALSE 45804
// begin if x1 > x2 then
45772: LD_VAR 0 1
45776: PUSH
45777: LD_VAR 0 3
45781: GREATER
45782: IFFALSE 45794
// result := 1 else
45784: LD_ADDR_VAR 0 5
45788: PUSH
45789: LD_INT 1
45791: ST_TO_ADDR
45792: GO 45802
// result := 4 ;
45794: LD_ADDR_VAR 0 5
45798: PUSH
45799: LD_INT 4
45801: ST_TO_ADDR
// exit ;
45802: GO 45846
// end ; if x1 > x2 and y1 > y2 then
45804: LD_VAR 0 1
45808: PUSH
45809: LD_VAR 0 3
45813: GREATER
45814: PUSH
45815: LD_VAR 0 2
45819: PUSH
45820: LD_VAR 0 4
45824: GREATER
45825: AND
45826: IFFALSE 45838
// result := 2 else
45828: LD_ADDR_VAR 0 5
45832: PUSH
45833: LD_INT 2
45835: ST_TO_ADDR
45836: GO 45846
// result := 5 ;
45838: LD_ADDR_VAR 0 5
45842: PUSH
45843: LD_INT 5
45845: ST_TO_ADDR
// end ;
45846: LD_VAR 0 5
45850: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
45851: LD_INT 0
45853: PPUSH
45854: PPUSH
// if not driver or not IsInUnit ( driver ) then
45855: LD_VAR 0 1
45859: NOT
45860: PUSH
45861: LD_VAR 0 1
45865: PPUSH
45866: CALL_OW 310
45870: NOT
45871: OR
45872: IFFALSE 45876
// exit ;
45874: GO 45966
// vehicle := IsInUnit ( driver ) ;
45876: LD_ADDR_VAR 0 3
45880: PUSH
45881: LD_VAR 0 1
45885: PPUSH
45886: CALL_OW 310
45890: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
45891: LD_VAR 0 1
45895: PPUSH
45896: LD_STRING \
45898: PUSH
45899: LD_INT 0
45901: PUSH
45902: LD_INT 0
45904: PUSH
45905: LD_INT 0
45907: PUSH
45908: LD_INT 0
45910: PUSH
45911: LD_INT 0
45913: PUSH
45914: LD_INT 0
45916: PUSH
45917: EMPTY
45918: LIST
45919: LIST
45920: LIST
45921: LIST
45922: LIST
45923: LIST
45924: LIST
45925: PUSH
45926: LD_STRING E
45928: PUSH
45929: LD_INT 0
45931: PUSH
45932: LD_INT 0
45934: PUSH
45935: LD_VAR 0 3
45939: PUSH
45940: LD_INT 0
45942: PUSH
45943: LD_INT 0
45945: PUSH
45946: LD_INT 0
45948: PUSH
45949: EMPTY
45950: LIST
45951: LIST
45952: LIST
45953: LIST
45954: LIST
45955: LIST
45956: LIST
45957: PUSH
45958: EMPTY
45959: LIST
45960: LIST
45961: PPUSH
45962: CALL_OW 446
// end ; end_of_file
45966: LD_VAR 0 2
45970: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
45971: LD_INT 0
45973: PPUSH
// ar_miner := 81 ;
45974: LD_ADDR_EXP 46
45978: PUSH
45979: LD_INT 81
45981: ST_TO_ADDR
// ar_crane := 88 ;
45982: LD_ADDR_EXP 45
45986: PUSH
45987: LD_INT 88
45989: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
45990: LD_ADDR_EXP 40
45994: PUSH
45995: LD_INT 89
45997: ST_TO_ADDR
// us_hack := 99 ;
45998: LD_ADDR_EXP 41
46002: PUSH
46003: LD_INT 99
46005: ST_TO_ADDR
// us_artillery := 97 ;
46006: LD_ADDR_EXP 42
46010: PUSH
46011: LD_INT 97
46013: ST_TO_ADDR
// ar_bio_bomb := 91 ;
46014: LD_ADDR_EXP 43
46018: PUSH
46019: LD_INT 91
46021: ST_TO_ADDR
// ar_mortar := 92 ;
46022: LD_ADDR_EXP 44
46026: PUSH
46027: LD_INT 92
46029: ST_TO_ADDR
// ru_radar := 98 ;
46030: LD_ADDR_EXP 39
46034: PUSH
46035: LD_INT 98
46037: ST_TO_ADDR
// tech_Artillery := 80 ;
46038: LD_ADDR_EXP 47
46042: PUSH
46043: LD_INT 80
46045: ST_TO_ADDR
// tech_RadMat := 81 ;
46046: LD_ADDR_EXP 48
46050: PUSH
46051: LD_INT 81
46053: ST_TO_ADDR
// tech_BasicTools := 82 ;
46054: LD_ADDR_EXP 49
46058: PUSH
46059: LD_INT 82
46061: ST_TO_ADDR
// tech_Cargo := 83 ;
46062: LD_ADDR_EXP 50
46066: PUSH
46067: LD_INT 83
46069: ST_TO_ADDR
// tech_Track := 84 ;
46070: LD_ADDR_EXP 51
46074: PUSH
46075: LD_INT 84
46077: ST_TO_ADDR
// tech_Crane := 85 ;
46078: LD_ADDR_EXP 52
46082: PUSH
46083: LD_INT 85
46085: ST_TO_ADDR
// tech_Bulldozer := 86 ;
46086: LD_ADDR_EXP 53
46090: PUSH
46091: LD_INT 86
46093: ST_TO_ADDR
// tech_Hovercraft := 87 ;
46094: LD_ADDR_EXP 54
46098: PUSH
46099: LD_INT 87
46101: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
46102: LD_ADDR_EXP 55
46106: PUSH
46107: LD_INT 88
46109: ST_TO_ADDR
// class_mastodont := 31 ;
46110: LD_ADDR_EXP 56
46114: PUSH
46115: LD_INT 31
46117: ST_TO_ADDR
// class_horse := 21 ;
46118: LD_ADDR_EXP 57
46122: PUSH
46123: LD_INT 21
46125: ST_TO_ADDR
// end ;
46126: LD_VAR 0 1
46130: RET
// every 1 do
46131: GO 46133
46133: DISABLE
// InitGlobalVariables ;
46134: CALL 45971 0 0
46138: END
