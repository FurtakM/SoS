// starting begin ResetFog ;
   0: CALL_OW 335
// MC_Init ( ) ;
   4: CALL 585 0 0
// PrepareTestBase ;
   8: CALL 123 0 0
// PlaceDepositsArea ( mat_oil , Area03 ) ;
  12: LD_INT 2
  14: PPUSH
  15: LD_INT 3
  17: PPUSH
  18: CALL 268 0 2
// mc_debug := true ;
  22: LD_ADDR_EXP 5
  26: PUSH
  27: LD_INT 1
  29: ST_TO_ADDR
// MC_Start ( ) ;
  30: CALL 609 0 0
// end ;
  34: END
// export function MC_CustomMacro ( ) ; begin
  35: LD_INT 0
  37: PPUSH
// MC_Add ( 1 , FilterAllUnits ( [ f_side , 1 ] ) ) ;
  38: LD_INT 1
  40: PPUSH
  41: LD_INT 22
  43: PUSH
  44: LD_INT 1
  46: PUSH
  47: EMPTY
  48: LIST
  49: LIST
  50: PPUSH
  51: CALL_OW 69
  55: PPUSH
  56: CALL 664 0 2
// MC_SetParkingArea ( 1 , parkingArea1 ) ;
  60: LD_INT 1
  62: PPUSH
  63: LD_INT 4
  65: PPUSH
  66: CALL 2484 0 2
// MC_SetCratesArea ( 1 , cratesArea1 ) ;
  70: LD_INT 1
  72: PPUSH
  73: LD_INT 2
  75: PPUSH
  76: CALL 2061 0 2
// MC_SetScanArea ( 1 , baseArea1 ) ;
  80: LD_INT 1
  82: PPUSH
  83: LD_INT 1
  85: PPUSH
  86: CALL 2533 0 2
// MC_SetBuildingList ( 1 , [ [ b_barracks , 37 , 33 , 5 ] ] ) ;
  90: LD_INT 1
  92: PPUSH
  93: LD_INT 5
  95: PUSH
  96: LD_INT 37
  98: PUSH
  99: LD_INT 33
 101: PUSH
 102: LD_INT 5
 104: PUSH
 105: EMPTY
 106: LIST
 107: LIST
 108: LIST
 109: LIST
 110: PUSH
 111: EMPTY
 112: LIST
 113: PPUSH
 114: CALL 1161 0 2
// end ;
 118: LD_VAR 0 1
 122: RET
// export function PrepareTestBase ; var i , un ; begin
 123: LD_INT 0
 125: PPUSH
 126: PPUSH
 127: PPUSH
// InitHc_All ;
 128: CALL_OW 584
// uc_side := 1 ;
 132: LD_ADDR_OWVAR 20
 136: PUSH
 137: LD_INT 1
 139: ST_TO_ADDR
// uc_nation := 1 ;
 140: LD_ADDR_OWVAR 21
 144: PUSH
 145: LD_INT 1
 147: ST_TO_ADDR
// for i := 1 to 12 do
 148: LD_ADDR_VAR 0 2
 152: PUSH
 153: DOUBLE
 154: LD_INT 1
 156: DEC
 157: ST_TO_ADDR
 158: LD_INT 12
 160: PUSH
 161: FOR_TO
 162: IFFALSE 229
// begin PrepareHuman ( false , i mod 4 + 1 , 3 ) ;
 164: LD_INT 0
 166: PPUSH
 167: LD_VAR 0 2
 171: PUSH
 172: LD_INT 4
 174: MOD
 175: PUSH
 176: LD_INT 1
 178: PLUS
 179: PPUSH
 180: LD_INT 3
 182: PPUSH
 183: CALL_OW 380
// un := CreateHuman ;
 187: LD_ADDR_VAR 0 3
 191: PUSH
 192: CALL_OW 44
 196: ST_TO_ADDR
// PlaceUnitXYR ( un , 21 , 16 , 8 , false ) ;
 197: LD_VAR 0 3
 201: PPUSH
 202: LD_INT 21
 204: PPUSH
 205: LD_INT 16
 207: PPUSH
 208: LD_INT 8
 210: PPUSH
 211: LD_INT 0
 213: PPUSH
 214: CALL_OW 50
// ComHold ( un ) ;
 218: LD_VAR 0 3
 222: PPUSH
 223: CALL_OW 140
// end ;
 227: GO 161
 229: POP
 230: POP
// end ;
 231: LD_VAR 0 1
 235: RET
// every 0 0$50 trigger mc_debug do
 236: LD_EXP 5
 240: IFFALSE 267
 242: GO 244
 244: DISABLE
// begin enable ;
 245: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , cratesArea1 , true ) ;
 246: LD_INT 1
 248: PPUSH
 249: LD_INT 5
 251: PPUSH
 252: CALL_OW 12
 256: PPUSH
 257: LD_INT 2
 259: PPUSH
 260: LD_INT 1
 262: PPUSH
 263: CALL_OW 55
// end ;
 267: END
// export function PlaceDepositsArea ( type , area ) ; var xy , i ; begin
 268: LD_INT 0
 270: PPUSH
 271: PPUSH
 272: PPUSH
// if not type in [ mat_oil , mat_siberit ] then
 273: LD_VAR 0 1
 277: PUSH
 278: LD_INT 2
 280: PUSH
 281: LD_INT 3
 283: PUSH
 284: EMPTY
 285: LIST
 286: LIST
 287: IN
 288: NOT
 289: IFFALSE 293
// exit ;
 291: GO 407
// xy := AreaToList ( area , 0 ) ;
 293: LD_ADDR_VAR 0 4
 297: PUSH
 298: LD_VAR 0 2
 302: PPUSH
 303: LD_INT 0
 305: PPUSH
 306: CALL_OW 517
 310: ST_TO_ADDR
// if not xy then
 311: LD_VAR 0 4
 315: NOT
 316: IFFALSE 320
// exit ;
 318: GO 407
// result := 0 ;
 320: LD_ADDR_VAR 0 3
 324: PUSH
 325: LD_INT 0
 327: ST_TO_ADDR
// for i := 1 to xy [ 1 ] do
 328: LD_ADDR_VAR 0 5
 332: PUSH
 333: DOUBLE
 334: LD_INT 1
 336: DEC
 337: ST_TO_ADDR
 338: LD_VAR 0 4
 342: PUSH
 343: LD_INT 1
 345: ARRAY
 346: PUSH
 347: FOR_TO
 348: IFFALSE 405
// begin result := result + 1 ;
 350: LD_ADDR_VAR 0 3
 354: PUSH
 355: LD_VAR 0 3
 359: PUSH
 360: LD_INT 1
 362: PLUS
 363: ST_TO_ADDR
// CreateDepositXY ( xy [ 1 ] [ i ] , xy [ 2 ] [ i ] , type ) ;
 364: LD_VAR 0 4
 368: PUSH
 369: LD_INT 1
 371: ARRAY
 372: PUSH
 373: LD_VAR 0 5
 377: ARRAY
 378: PPUSH
 379: LD_VAR 0 4
 383: PUSH
 384: LD_INT 2
 386: ARRAY
 387: PUSH
 388: LD_VAR 0 5
 392: ARRAY
 393: PPUSH
 394: LD_VAR 0 1
 398: PPUSH
 399: CALL_OW 62
// end ;
 403: GO 347
 405: POP
 406: POP
// end ; end_of_file
 407: LD_VAR 0 3
 411: RET
// on SailEventCustom ( event , p1 , p2 , p3 , p4 , p5 , p6 ) do begin MCE_SailEventCustom ( event , p1 , p2 , p3 , p4 , p5 , p6 ) ;
 412: LD_VAR 0 1
 416: PPUSH
 417: LD_VAR 0 2
 421: PPUSH
 422: LD_VAR 0 3
 426: PPUSH
 427: LD_VAR 0 4
 431: PPUSH
 432: LD_VAR 0 5
 436: PPUSH
 437: LD_VAR 0 6
 441: PPUSH
 442: LD_VAR 0 7
 446: PPUSH
 447: CALL 4912 0 7
// end ;
 451: PPOPN 7
 453: END
// on ClassChanged ( unit , old_class , new_class ) do begin MCE_ClassChanged ( unit , old_class , new_class ) ;
 454: LD_VAR 0 1
 458: PPUSH
 459: LD_VAR 0 2
 463: PPUSH
 464: LD_VAR 0 3
 468: PPUSH
 469: CALL 4965 0 3
// end ;
 473: PPOPN 3
 475: END
// on UnitDestroyed ( unit ) do begin MCE_UnitDestroyed ( unit ) ;
 476: LD_VAR 0 1
 480: PPUSH
 481: CALL 4987 0 1
// end ;
 485: PPOPN 1
 487: END
// on EvacuateVehicle ( driver , vehicle , p1 , p2 ) do begin MCE_EvacuateVehicle ( driver , vehicle , p1 , p2 ) ;
 488: LD_VAR 0 1
 492: PPUSH
 493: LD_VAR 0 2
 497: PPUSH
 498: LD_VAR 0 3
 502: PPUSH
 503: LD_VAR 0 4
 507: PPUSH
 508: CALL 5132 0 4
// end ;
 512: PPOPN 4
 514: END
// on BuildingComplete ( building ) do begin MCE_BuildingComplete ( building ) ;
 515: LD_VAR 0 1
 519: PPUSH
 520: CALL 5205 0 1
// end ;
 524: PPOPN 1
 526: END
// on UpgradeComplete ( building ) do begin MCE_BuildingUpgradeComplete ( building ) ;
 527: LD_VAR 0 1
 531: PPUSH
 532: CALL 5924 0 1
// end ;
 536: PPOPN 1
 538: END
// on CommandUnitXY ( comand , unit , x , y , z ) do begin if mc_debug then
 539: LD_EXP 5
 543: IFFALSE 582
// display_strings := [ comand , unit , x , y , z ] ;
 545: LD_ADDR_OWVAR 47
 549: PUSH
 550: LD_VAR 0 1
 554: PUSH
 555: LD_VAR 0 2
 559: PUSH
 560: LD_VAR 0 3
 564: PUSH
 565: LD_VAR 0 4
 569: PUSH
 570: LD_VAR 0 5
 574: PUSH
 575: EMPTY
 576: LIST
 577: LIST
 578: LIST
 579: LIST
 580: LIST
 581: ST_TO_ADDR
// end ; end_of_file
 582: PPOPN 5
 584: END
// export function MC_Init ( ) ; begin
 585: LD_INT 0
 587: PPUSH
// MC_InitVariables ( ) ;
 588: CALL 6185 0 0
// MCE_InitEvents ( ) ;
 592: CALL 4888 0 0
// MCT_InitTags ( ) ;
 596: CALL 6361 0 0
// MCTM_InitTaskManager ( ) end ;
 600: CALL 7948 0 0
 604: LD_VAR 0 1
 608: RET
// export function MC_Start ( ) ; begin
 609: LD_INT 0
 611: PPUSH
// mc_active := true ;
 612: LD_ADDR_EXP 4
 616: PUSH
 617: LD_INT 1
 619: ST_TO_ADDR
// MC_CustomMacro ( ) ;
 620: CALL 35 0 0
// MCE_SailEventCustom ( mce_start , 0 , 0 , 0 , 0 , 0 , 0 ) ;
 624: LD_EXP 1
 628: PPUSH
 629: LD_INT 0
 631: PPUSH
 632: LD_INT 0
 634: PPUSH
 635: LD_INT 0
 637: PPUSH
 638: LD_INT 0
 640: PPUSH
 641: LD_INT 0
 643: PPUSH
 644: LD_INT 0
 646: PPUSH
 647: CALL 4912 0 7
// end ;
 651: LD_VAR 0 1
 655: RET
// export function MC_Kill ( base ) ; begin
 656: LD_INT 0
 658: PPUSH
// end ;
 659: LD_VAR 0 2
 663: RET
// export function MC_Add ( side , units ) ; begin
 664: LD_INT 0
 666: PPUSH
// mc_bases := Replace ( mc_bases , mc_bases + 1 , side ) ;
 667: LD_ADDR_EXP 6
 671: PUSH
 672: LD_EXP 6
 676: PPUSH
 677: LD_EXP 6
 681: PUSH
 682: LD_INT 1
 684: PLUS
 685: PPUSH
 686: LD_VAR 0 1
 690: PPUSH
 691: CALL_OW 1
 695: ST_TO_ADDR
// mc_task := Replace ( mc_task , mc_task + 1 , [ ] ) ;
 696: LD_ADDR_EXP 8
 700: PUSH
 701: LD_EXP 8
 705: PPUSH
 706: LD_EXP 8
 710: PUSH
 711: LD_INT 1
 713: PLUS
 714: PPUSH
 715: EMPTY
 716: PPUSH
 717: CALL_OW 1
 721: ST_TO_ADDR
// mc_people := Replace ( mc_people , mc_people + 1 , UnitFilter ( units , [ [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ) ;
 722: LD_ADDR_EXP 9
 726: PUSH
 727: LD_EXP 9
 731: PPUSH
 732: LD_EXP 9
 736: PUSH
 737: LD_INT 1
 739: PLUS
 740: PPUSH
 741: LD_VAR 0 2
 745: PPUSH
 746: LD_INT 21
 748: PUSH
 749: LD_INT 1
 751: PUSH
 752: EMPTY
 753: LIST
 754: LIST
 755: PUSH
 756: LD_INT 3
 758: PUSH
 759: LD_INT 23
 761: PUSH
 762: LD_INT 0
 764: PUSH
 765: EMPTY
 766: LIST
 767: LIST
 768: PUSH
 769: EMPTY
 770: LIST
 771: LIST
 772: PUSH
 773: EMPTY
 774: LIST
 775: LIST
 776: PPUSH
 777: CALL_OW 72
 781: PPUSH
 782: CALL_OW 1
 786: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , mc_ape + 1 , UnitFilter ( units , [ f_nation , 0 ] ) ) ;
 787: LD_ADDR_EXP 19
 791: PUSH
 792: LD_EXP 19
 796: PPUSH
 797: LD_EXP 19
 801: PUSH
 802: LD_INT 1
 804: PLUS
 805: PPUSH
 806: LD_VAR 0 2
 810: PPUSH
 811: LD_INT 23
 813: PUSH
 814: LD_INT 0
 816: PUSH
 817: EMPTY
 818: LIST
 819: LIST
 820: PPUSH
 821: CALL_OW 72
 825: PPUSH
 826: CALL_OW 1
 830: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , mc_vehicles + 1 , UnitFilter ( units , [ f_type , unit_vehicle ] ) ) ;
 831: LD_ADDR_EXP 11
 835: PUSH
 836: LD_EXP 11
 840: PPUSH
 841: LD_EXP 11
 845: PUSH
 846: LD_INT 1
 848: PLUS
 849: PPUSH
 850: LD_VAR 0 2
 854: PPUSH
 855: LD_INT 21
 857: PUSH
 858: LD_INT 2
 860: PUSH
 861: EMPTY
 862: LIST
 863: LIST
 864: PPUSH
 865: CALL_OW 72
 869: PPUSH
 870: CALL_OW 1
 874: ST_TO_ADDR
// mc_buildings := Replace ( mc_buildings , mc_buildings + 1 , UnitFilter ( units , [ f_type , unit_building ] ) ) ;
 875: LD_ADDR_EXP 10
 879: PUSH
 880: LD_EXP 10
 884: PPUSH
 885: LD_EXP 10
 889: PUSH
 890: LD_INT 1
 892: PLUS
 893: PPUSH
 894: LD_VAR 0 2
 898: PPUSH
 899: LD_INT 21
 901: PUSH
 902: LD_INT 3
 904: PUSH
 905: EMPTY
 906: LIST
 907: LIST
 908: PPUSH
 909: CALL_OW 72
 913: PPUSH
 914: CALL_OW 1
 918: ST_TO_ADDR
// mc_defense_status := Replace ( mc_defense_status , mc_defense_status + 1 , false ) ;
 919: LD_ADDR_EXP 16
 923: PUSH
 924: LD_EXP 16
 928: PPUSH
 929: LD_EXP 16
 933: PUSH
 934: LD_INT 1
 936: PLUS
 937: PPUSH
 938: LD_INT 0
 940: PPUSH
 941: CALL_OW 1
 945: ST_TO_ADDR
// end ;
 946: LD_VAR 0 3
 950: RET
// export function MC_SetMinesField ( base , amount , area ) ; var i , tmp , list , x , j ; begin
 951: LD_INT 0
 953: PPUSH
 954: PPUSH
 955: PPUSH
 956: PPUSH
 957: PPUSH
 958: PPUSH
// if not mc_bases [ base ] then
 959: LD_EXP 6
 963: PUSH
 964: LD_VAR 0 1
 968: ARRAY
 969: NOT
 970: IFFALSE 974
// exit ;
 972: GO 1156
// tmp := [ ] ;
 974: LD_ADDR_VAR 0 6
 978: PUSH
 979: EMPTY
 980: ST_TO_ADDR
// list := AreaToList ( area , 0 ) ;
 981: LD_ADDR_VAR 0 7
 985: PUSH
 986: LD_VAR 0 3
 990: PPUSH
 991: LD_INT 0
 993: PPUSH
 994: CALL_OW 517
 998: ST_TO_ADDR
// if not list then
 999: LD_VAR 0 7
1003: NOT
1004: IFFALSE 1008
// exit ;
1006: GO 1156
// for i = 1 to amount do
1008: LD_ADDR_VAR 0 5
1012: PUSH
1013: DOUBLE
1014: LD_INT 1
1016: DEC
1017: ST_TO_ADDR
1018: LD_VAR 0 2
1022: PUSH
1023: FOR_TO
1024: IFFALSE 1104
// begin x := rand ( 1 , list [ 1 ] ) ;
1026: LD_ADDR_VAR 0 8
1030: PUSH
1031: LD_INT 1
1033: PPUSH
1034: LD_VAR 0 7
1038: PUSH
1039: LD_INT 1
1041: ARRAY
1042: PPUSH
1043: CALL_OW 12
1047: ST_TO_ADDR
// tmp := Replace ( tmp , i , [ list [ 1 ] [ x ] , list [ 2 ] [ x ] ] ) ;
1048: LD_ADDR_VAR 0 6
1052: PUSH
1053: LD_VAR 0 6
1057: PPUSH
1058: LD_VAR 0 5
1062: PPUSH
1063: LD_VAR 0 7
1067: PUSH
1068: LD_INT 1
1070: ARRAY
1071: PUSH
1072: LD_VAR 0 8
1076: ARRAY
1077: PUSH
1078: LD_VAR 0 7
1082: PUSH
1083: LD_INT 2
1085: ARRAY
1086: PUSH
1087: LD_VAR 0 8
1091: ARRAY
1092: PUSH
1093: EMPTY
1094: LIST
1095: LIST
1096: PPUSH
1097: CALL_OW 1
1101: ST_TO_ADDR
// end ;
1102: GO 1023
1104: POP
1105: POP
// mc_mines := Replace ( mc_mines , base , tmp ) ;
1106: LD_ADDR_EXP 12
1110: PUSH
1111: LD_EXP 12
1115: PPUSH
1116: LD_VAR 0 1
1120: PPUSH
1121: LD_VAR 0 6
1125: PPUSH
1126: CALL_OW 1
1130: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , area ) ;
1131: LD_ADDR_EXP 13
1135: PUSH
1136: LD_EXP 13
1140: PPUSH
1141: LD_VAR 0 1
1145: PPUSH
1146: LD_VAR 0 3
1150: PPUSH
1151: CALL_OW 1
1155: ST_TO_ADDR
// end ;
1156: LD_VAR 0 4
1160: RET
// export function MC_SetBuildingList ( base , construct_list ) ; var i , btype ; begin
1161: LD_INT 0
1163: PPUSH
1164: PPUSH
1165: PPUSH
// if not construct_list then
1166: LD_VAR 0 2
1170: NOT
1171: IFFALSE 1175
// exit ;
1173: GO 1401
// for i := 1 to construct_list do
1175: LD_ADDR_VAR 0 4
1179: PUSH
1180: DOUBLE
1181: LD_INT 1
1183: DEC
1184: ST_TO_ADDR
1185: LD_VAR 0 2
1189: PUSH
1190: FOR_TO
1191: IFFALSE 1374
// if construct_list [ i ] [ 1 ] in [ b_factory , b_barracks ] then
1193: LD_VAR 0 2
1197: PUSH
1198: LD_VAR 0 4
1202: ARRAY
1203: PUSH
1204: LD_INT 1
1206: ARRAY
1207: PUSH
1208: LD_INT 3
1210: PUSH
1211: LD_INT 5
1213: PUSH
1214: EMPTY
1215: LIST
1216: LIST
1217: IN
1218: IFFALSE 1372
// begin case construct_list [ i ] [ 1 ] of b_factory :
1220: LD_VAR 0 2
1224: PUSH
1225: LD_VAR 0 4
1229: ARRAY
1230: PUSH
1231: LD_INT 1
1233: ARRAY
1234: PUSH
1235: LD_INT 3
1237: DOUBLE
1238: EQUAL
1239: IFTRUE 1243
1241: GO 1254
1243: POP
// btype := b_workshop ; b_barracks :
1244: LD_ADDR_VAR 0 5
1248: PUSH
1249: LD_INT 2
1251: ST_TO_ADDR
1252: GO 1274
1254: LD_INT 5
1256: DOUBLE
1257: EQUAL
1258: IFTRUE 1262
1260: GO 1273
1262: POP
// btype := b_armoury ; end ;
1263: LD_ADDR_VAR 0 5
1267: PUSH
1268: LD_INT 4
1270: ST_TO_ADDR
1271: GO 1274
1273: POP
// construct_list := Replace ( construct_list , i , Replace ( construct_list [ i ] , 5 , construct_list [ i ] [ 1 ] ) ) ;
1274: LD_ADDR_VAR 0 2
1278: PUSH
1279: LD_VAR 0 2
1283: PPUSH
1284: LD_VAR 0 4
1288: PPUSH
1289: LD_VAR 0 2
1293: PUSH
1294: LD_VAR 0 4
1298: ARRAY
1299: PPUSH
1300: LD_INT 5
1302: PPUSH
1303: LD_VAR 0 2
1307: PUSH
1308: LD_VAR 0 4
1312: ARRAY
1313: PUSH
1314: LD_INT 1
1316: ARRAY
1317: PPUSH
1318: CALL_OW 1
1322: PPUSH
1323: CALL_OW 1
1327: ST_TO_ADDR
// construct_list := Replace ( construct_list , i , Replace ( construct_list [ i ] , 1 , btype ) ) ;
1328: LD_ADDR_VAR 0 2
1332: PUSH
1333: LD_VAR 0 2
1337: PPUSH
1338: LD_VAR 0 4
1342: PPUSH
1343: LD_VAR 0 2
1347: PUSH
1348: LD_VAR 0 4
1352: ARRAY
1353: PPUSH
1354: LD_INT 1
1356: PPUSH
1357: LD_VAR 0 5
1361: PPUSH
1362: CALL_OW 1
1366: PPUSH
1367: CALL_OW 1
1371: ST_TO_ADDR
// end ;
1372: GO 1190
1374: POP
1375: POP
// mc_build_list := Replace ( mc_build_list , base , construct_list ) ;
1376: LD_ADDR_EXP 14
1380: PUSH
1381: LD_EXP 14
1385: PPUSH
1386: LD_VAR 0 1
1390: PPUSH
1391: LD_VAR 0 2
1395: PPUSH
1396: CALL_OW 1
1400: ST_TO_ADDR
// end ;
1401: LD_VAR 0 3
1405: RET
// export function MC_InsertBuildingList ( base , construct_list ) ; var i , btype ; begin
1406: LD_INT 0
1408: PPUSH
1409: PPUSH
1410: PPUSH
// if not construct_list then
1411: LD_VAR 0 2
1415: NOT
1416: IFFALSE 1420
// exit ;
1418: GO 1658
// for i := 1 to construct_list do
1420: LD_ADDR_VAR 0 4
1424: PUSH
1425: DOUBLE
1426: LD_INT 1
1428: DEC
1429: ST_TO_ADDR
1430: LD_VAR 0 2
1434: PUSH
1435: FOR_TO
1436: IFFALSE 1619
// if construct_list [ i ] [ 1 ] in [ b_factory , b_barracks ] then
1438: LD_VAR 0 2
1442: PUSH
1443: LD_VAR 0 4
1447: ARRAY
1448: PUSH
1449: LD_INT 1
1451: ARRAY
1452: PUSH
1453: LD_INT 3
1455: PUSH
1456: LD_INT 5
1458: PUSH
1459: EMPTY
1460: LIST
1461: LIST
1462: IN
1463: IFFALSE 1617
// begin case construct_list [ i ] [ 1 ] of b_factory :
1465: LD_VAR 0 2
1469: PUSH
1470: LD_VAR 0 4
1474: ARRAY
1475: PUSH
1476: LD_INT 1
1478: ARRAY
1479: PUSH
1480: LD_INT 3
1482: DOUBLE
1483: EQUAL
1484: IFTRUE 1488
1486: GO 1499
1488: POP
// btype := b_workshop ; b_barracks :
1489: LD_ADDR_VAR 0 5
1493: PUSH
1494: LD_INT 2
1496: ST_TO_ADDR
1497: GO 1519
1499: LD_INT 5
1501: DOUBLE
1502: EQUAL
1503: IFTRUE 1507
1505: GO 1518
1507: POP
// btype := b_armoury ; end ;
1508: LD_ADDR_VAR 0 5
1512: PUSH
1513: LD_INT 4
1515: ST_TO_ADDR
1516: GO 1519
1518: POP
// construct_list := Replace ( construct_list , i , Replace ( construct_list [ i ] , 5 , construct_list [ i ] [ 1 ] ) ) ;
1519: LD_ADDR_VAR 0 2
1523: PUSH
1524: LD_VAR 0 2
1528: PPUSH
1529: LD_VAR 0 4
1533: PPUSH
1534: LD_VAR 0 2
1538: PUSH
1539: LD_VAR 0 4
1543: ARRAY
1544: PPUSH
1545: LD_INT 5
1547: PPUSH
1548: LD_VAR 0 2
1552: PUSH
1553: LD_VAR 0 4
1557: ARRAY
1558: PUSH
1559: LD_INT 1
1561: ARRAY
1562: PPUSH
1563: CALL_OW 1
1567: PPUSH
1568: CALL_OW 1
1572: ST_TO_ADDR
// construct_list := Replace ( construct_list , i , Replace ( construct_list [ i ] , 1 , btype ) ) ;
1573: LD_ADDR_VAR 0 2
1577: PUSH
1578: LD_VAR 0 2
1582: PPUSH
1583: LD_VAR 0 4
1587: PPUSH
1588: LD_VAR 0 2
1592: PUSH
1593: LD_VAR 0 4
1597: ARRAY
1598: PPUSH
1599: LD_INT 1
1601: PPUSH
1602: LD_VAR 0 5
1606: PPUSH
1607: CALL_OW 1
1611: PPUSH
1612: CALL_OW 1
1616: ST_TO_ADDR
// end ;
1617: GO 1435
1619: POP
1620: POP
// mc_build_list := Replace ( mc_build_list , base , mc_build_list [ base ] union construct_list ) ;
1621: LD_ADDR_EXP 14
1625: PUSH
1626: LD_EXP 14
1630: PPUSH
1631: LD_VAR 0 1
1635: PPUSH
1636: LD_EXP 14
1640: PUSH
1641: LD_VAR 0 1
1645: ARRAY
1646: PUSH
1647: LD_VAR 0 2
1651: UNION
1652: PPUSH
1653: CALL_OW 1
1657: ST_TO_ADDR
// end ;
1658: LD_VAR 0 3
1662: RET
// export function MC_SetProduceList ( base , produce_list ) ; begin
1663: LD_INT 0
1665: PPUSH
// mc_produce_list := Replace ( mc_produce_list , base , produce_list ) ;
1666: LD_ADDR_EXP 15
1670: PUSH
1671: LD_EXP 15
1675: PPUSH
1676: LD_VAR 0 1
1680: PPUSH
1681: LD_VAR 0 2
1685: PPUSH
1686: CALL_OW 1
1690: ST_TO_ADDR
// end ;
1691: LD_VAR 0 3
1695: RET
// export function MC_InsertProduceList ( base , components ) ; begin
1696: LD_INT 0
1698: PPUSH
// mc_produce_list := Replace ( mc_produce_list , base , mc_produce_list [ base ] ^ components ) ;
1699: LD_ADDR_EXP 15
1703: PUSH
1704: LD_EXP 15
1708: PPUSH
1709: LD_VAR 0 1
1713: PPUSH
1714: LD_EXP 15
1718: PUSH
1719: LD_VAR 0 1
1723: ARRAY
1724: PUSH
1725: LD_VAR 0 2
1729: ADD
1730: PPUSH
1731: CALL_OW 1
1735: ST_TO_ADDR
// end ;
1736: LD_VAR 0 3
1740: RET
// export function MC_SetDefenderList ( base , deflist ) ; begin
1741: LD_INT 0
1743: PPUSH
// mc_defender := Replace ( mc_defender , base , deflist ) ;
1744: LD_ADDR_EXP 17
1748: PUSH
1749: LD_EXP 17
1753: PPUSH
1754: LD_VAR 0 1
1758: PPUSH
1759: LD_VAR 0 2
1763: PPUSH
1764: CALL_OW 1
1768: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , base , deflist + 0 ) ;
1769: LD_ADDR_EXP 18
1773: PUSH
1774: LD_EXP 18
1778: PPUSH
1779: LD_VAR 0 1
1783: PPUSH
1784: LD_VAR 0 2
1788: PUSH
1789: LD_INT 0
1791: PLUS
1792: PPUSH
1793: CALL_OW 1
1797: ST_TO_ADDR
// end ;
1798: LD_VAR 0 3
1802: RET
// export function MC_SetDefenderLimit ( base , limit ) ; begin
1803: LD_INT 0
1805: PPUSH
// mc_defender_limit := Replace ( mc_defender_limit , base , limit ) ;
1806: LD_ADDR_EXP 18
1810: PUSH
1811: LD_EXP 18
1815: PPUSH
1816: LD_VAR 0 1
1820: PPUSH
1821: LD_VAR 0 2
1825: PPUSH
1826: CALL_OW 1
1830: ST_TO_ADDR
// end ;
1831: LD_VAR 0 3
1835: RET
// export function MC_PrepareAttack ( base , group , path , flags ) ; begin
1836: LD_INT 0
1838: PPUSH
// mc_attack := ReplaceIn ( mc_attack , [ base , mc_attack [ base ] + 1 ] , [ base , group , path , flags ] ) ;
1839: LD_ADDR_EXP 21
1843: PUSH
1844: LD_EXP 21
1848: PPUSH
1849: LD_VAR 0 1
1853: PUSH
1854: LD_EXP 21
1858: PUSH
1859: LD_VAR 0 1
1863: ARRAY
1864: PUSH
1865: LD_INT 1
1867: PLUS
1868: PUSH
1869: EMPTY
1870: LIST
1871: LIST
1872: PPUSH
1873: LD_VAR 0 1
1877: PUSH
1878: LD_VAR 0 2
1882: PUSH
1883: LD_VAR 0 3
1887: PUSH
1888: LD_VAR 0 4
1892: PUSH
1893: EMPTY
1894: LIST
1895: LIST
1896: LIST
1897: LIST
1898: PPUSH
1899: CALL 13057 0 3
1903: ST_TO_ADDR
// end ;
1904: LD_VAR 0 5
1908: RET
// export function MC_SetDepositsXY ( base , deposits_list ) ; begin
1909: LD_INT 0
1911: PPUSH
// mc_deposits_xy := Replace ( mc_deposits_xy , base , deposits_list ) ;
1912: LD_ADDR_EXP 22
1916: PUSH
1917: LD_EXP 22
1921: PPUSH
1922: LD_VAR 0 1
1926: PPUSH
1927: LD_VAR 0 2
1931: PPUSH
1932: CALL_OW 1
1936: ST_TO_ADDR
// end ;
1937: LD_VAR 0 3
1941: RET
// export function MC_SetTame ( base , area ) ; begin
1942: LD_INT 0
1944: PPUSH
// mc_can_tame := Replace ( mc_can_tame , base , area ) ;
1945: LD_ADDR_EXP 23
1949: PUSH
1950: LD_EXP 23
1954: PPUSH
1955: LD_VAR 0 1
1959: PPUSH
1960: LD_VAR 0 2
1964: PPUSH
1965: CALL_OW 1
1969: ST_TO_ADDR
// end ;
1970: LD_VAR 0 3
1974: RET
// export function MC_SetLabKind ( base , kinds ) ; var i ; begin
1975: LD_INT 0
1977: PPUSH
1978: PPUSH
// if not base or not kinds then
1979: LD_VAR 0 1
1983: NOT
1984: PUSH
1985: LD_VAR 0 2
1989: NOT
1990: OR
1991: IFFALSE 1995
// exit ;
1993: GO 2056
// for i in kinds do
1995: LD_ADDR_VAR 0 4
1999: PUSH
2000: LD_VAR 0 2
2004: PUSH
2005: FOR_IN
2006: IFFALSE 2054
// mc_lab_upgrade := ReplaceIn ( mc_lab_upgrade , [ base , mc_lab_upgrade [ base ] + 1 ] , i ) ;
2008: LD_ADDR_EXP 24
2012: PUSH
2013: LD_EXP 24
2017: PPUSH
2018: LD_VAR 0 1
2022: PUSH
2023: LD_EXP 24
2027: PUSH
2028: LD_VAR 0 1
2032: ARRAY
2033: PUSH
2034: LD_INT 1
2036: PLUS
2037: PUSH
2038: EMPTY
2039: LIST
2040: LIST
2041: PPUSH
2042: LD_VAR 0 4
2046: PPUSH
2047: CALL 13057 0 3
2051: ST_TO_ADDR
2052: GO 2005
2054: POP
2055: POP
// end ;
2056: LD_VAR 0 3
2060: RET
// export function MC_SetCratesArea ( base , areas ) ; begin
2061: LD_INT 0
2063: PPUSH
// if not mc_bases or not base or not areas then
2064: LD_EXP 6
2068: NOT
2069: PUSH
2070: LD_VAR 0 1
2074: NOT
2075: OR
2076: PUSH
2077: LD_VAR 0 2
2081: NOT
2082: OR
2083: IFFALSE 2087
// exit ;
2085: GO 2112
// mc_crates_area := Replace ( mc_crates_area , base , areas ) ;
2087: LD_ADDR_EXP 25
2091: PUSH
2092: LD_EXP 25
2096: PPUSH
2097: LD_VAR 0 1
2101: PPUSH
2102: LD_VAR 0 2
2106: PPUSH
2107: CALL_OW 1
2111: ST_TO_ADDR
// end ;
2112: LD_VAR 0 3
2116: RET
// export function MC_SetTeleportExit ( base , teleports_exit ) ; begin
2117: LD_INT 0
2119: PPUSH
// if not mc_bases or not base or not teleports_exit then
2120: LD_EXP 6
2124: NOT
2125: PUSH
2126: LD_VAR 0 1
2130: NOT
2131: OR
2132: PUSH
2133: LD_VAR 0 2
2137: NOT
2138: OR
2139: IFFALSE 2143
// exit ;
2141: GO 2168
// mc_teleport_exit := Replace ( mc_teleport_exit , base , teleports_exit ) ;
2143: LD_ADDR_EXP 26
2147: PUSH
2148: LD_EXP 26
2152: PPUSH
2153: LD_VAR 0 1
2157: PPUSH
2158: LD_VAR 0 2
2162: PPUSH
2163: CALL_OW 1
2167: ST_TO_ADDR
// end ;
2168: LD_VAR 0 3
2172: RET
// export function MC_SetFactoryExtension ( base , x , y , d , ext_list ) ; var i , tmp ; begin
2173: LD_INT 0
2175: PPUSH
2176: PPUSH
2177: PPUSH
// if not base or not ext_list then
2178: LD_VAR 0 1
2182: NOT
2183: PUSH
2184: LD_VAR 0 5
2188: NOT
2189: OR
2190: IFFALSE 2194
// exit ;
2192: GO 2367
// tmp := GetFacExtXYD ( x , y , d ) ;
2194: LD_ADDR_VAR 0 8
2198: PUSH
2199: LD_VAR 0 2
2203: PPUSH
2204: LD_VAR 0 3
2208: PPUSH
2209: LD_VAR 0 4
2213: PPUSH
2214: CALL 42056 0 3
2218: ST_TO_ADDR
// if not tmp then
2219: LD_VAR 0 8
2223: NOT
2224: IFFALSE 2228
// exit ;
2226: GO 2367
// for i in tmp do
2228: LD_ADDR_VAR 0 7
2232: PUSH
2233: LD_VAR 0 8
2237: PUSH
2238: FOR_IN
2239: IFFALSE 2365
// begin mc_build_list := Replace ( mc_build_list , base , Insert ( mc_build_list [ base ] , mc_build_list [ base ] + 1 , [ ext_list [ 1 ] , i [ 1 ] , i [ 2 ] , i [ 3 ] ] ) ) ;
2241: LD_ADDR_EXP 14
2245: PUSH
2246: LD_EXP 14
2250: PPUSH
2251: LD_VAR 0 1
2255: PPUSH
2256: LD_EXP 14
2260: PUSH
2261: LD_VAR 0 1
2265: ARRAY
2266: PPUSH
2267: LD_EXP 14
2271: PUSH
2272: LD_VAR 0 1
2276: ARRAY
2277: PUSH
2278: LD_INT 1
2280: PLUS
2281: PPUSH
2282: LD_VAR 0 5
2286: PUSH
2287: LD_INT 1
2289: ARRAY
2290: PUSH
2291: LD_VAR 0 7
2295: PUSH
2296: LD_INT 1
2298: ARRAY
2299: PUSH
2300: LD_VAR 0 7
2304: PUSH
2305: LD_INT 2
2307: ARRAY
2308: PUSH
2309: LD_VAR 0 7
2313: PUSH
2314: LD_INT 3
2316: ARRAY
2317: PUSH
2318: EMPTY
2319: LIST
2320: LIST
2321: LIST
2322: LIST
2323: PPUSH
2324: CALL_OW 2
2328: PPUSH
2329: CALL_OW 1
2333: ST_TO_ADDR
// ext_list := Delete ( ext_list , 1 ) ;
2334: LD_ADDR_VAR 0 5
2338: PUSH
2339: LD_VAR 0 5
2343: PPUSH
2344: LD_INT 1
2346: PPUSH
2347: CALL_OW 3
2351: ST_TO_ADDR
// if not ext_list then
2352: LD_VAR 0 5
2356: NOT
2357: IFFALSE 2363
// exit ;
2359: POP
2360: POP
2361: GO 2367
// end ;
2363: GO 2238
2365: POP
2366: POP
// end ;
2367: LD_VAR 0 6
2371: RET
// export function MC_SetAllowedTurretWeapons ( base , weapon_list ) ; begin
2372: LD_INT 0
2374: PPUSH
// if not mc_bases or not base or not weapon_list then
2375: LD_EXP 6
2379: NOT
2380: PUSH
2381: LD_VAR 0 1
2385: NOT
2386: OR
2387: PUSH
2388: LD_VAR 0 2
2392: NOT
2393: OR
2394: IFFALSE 2398
// exit ;
2396: GO 2423
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , base , weapon_list ) ;
2398: LD_ADDR_EXP 27
2402: PUSH
2403: LD_EXP 27
2407: PPUSH
2408: LD_VAR 0 1
2412: PPUSH
2413: LD_VAR 0 2
2417: PPUSH
2418: CALL_OW 1
2422: ST_TO_ADDR
// end ;
2423: LD_VAR 0 3
2427: RET
// export function MC_SetTechList ( base , tech_list ) ; begin
2428: LD_INT 0
2430: PPUSH
// if not mc_bases or not base or not tech_list then
2431: LD_EXP 6
2435: NOT
2436: PUSH
2437: LD_VAR 0 1
2441: NOT
2442: OR
2443: PUSH
2444: LD_VAR 0 2
2448: NOT
2449: OR
2450: IFFALSE 2454
// exit ;
2452: GO 2479
// mc_tech := Replace ( mc_tech , base , tech_list ) ;
2454: LD_ADDR_EXP 20
2458: PUSH
2459: LD_EXP 20
2463: PPUSH
2464: LD_VAR 0 1
2468: PPUSH
2469: LD_VAR 0 2
2473: PPUSH
2474: CALL_OW 1
2478: ST_TO_ADDR
// end ;
2479: LD_VAR 0 3
2483: RET
// export function MC_SetParkingArea ( base , parking_area ) ; begin
2484: LD_INT 0
2486: PPUSH
// if not parking_area or not base then
2487: LD_VAR 0 2
2491: NOT
2492: PUSH
2493: LD_VAR 0 1
2497: NOT
2498: OR
2499: IFFALSE 2503
// exit ;
2501: GO 2528
// mc_parking := Replace ( mc_parking , base , parking_area ) ;
2503: LD_ADDR_EXP 28
2507: PUSH
2508: LD_EXP 28
2512: PPUSH
2513: LD_VAR 0 1
2517: PPUSH
2518: LD_VAR 0 2
2522: PPUSH
2523: CALL_OW 1
2527: ST_TO_ADDR
// end ;
2528: LD_VAR 0 3
2532: RET
// export function MC_SetScanArea ( base , scan_area ) ; begin
2533: LD_INT 0
2535: PPUSH
// if not base or not scan_area then
2536: LD_VAR 0 1
2540: NOT
2541: PUSH
2542: LD_VAR 0 2
2546: NOT
2547: OR
2548: IFFALSE 2552
// exit ;
2550: GO 2577
// mc_scan_area := Replace ( mc_scan_area , base , scan_area ) ;
2552: LD_ADDR_EXP 29
2556: PUSH
2557: LD_EXP 29
2561: PPUSH
2562: LD_VAR 0 1
2566: PPUSH
2567: LD_VAR 0 2
2571: PPUSH
2572: CALL_OW 1
2576: ST_TO_ADDR
// end ; end_of_file
2577: LD_VAR 0 3
2581: RET
// export function MC_Monitor ( ) ; var i , active_players ; begin
2582: LD_INT 0
2584: PPUSH
2585: PPUSH
2586: PPUSH
// while mc_active do
2587: LD_EXP 4
2591: IFFALSE 2701
// begin wait ( 0 0$1 ) ;
2593: LD_INT 35
2595: PPUSH
2596: CALL_OW 67
// active_players := 0 ;
2600: LD_ADDR_VAR 0 3
2604: PUSH
2605: LD_INT 0
2607: ST_TO_ADDR
// for i := 1 to mc_bases do
2608: LD_ADDR_VAR 0 2
2612: PUSH
2613: DOUBLE
2614: LD_INT 1
2616: DEC
2617: ST_TO_ADDR
2618: LD_EXP 6
2622: PUSH
2623: FOR_TO
2624: IFFALSE 2682
// begin if MC_Exist ( i ) then
2626: LD_VAR 0 2
2630: PPUSH
2631: CALL 6618 0 1
2635: IFFALSE 2680
// begin MCE_SailEventCustom ( mce_monitor_base , i , 0 , 0 , 0 , 0 , 0 ) ;
2637: LD_EXP 2
2641: PPUSH
2642: LD_VAR 0 2
2646: PPUSH
2647: LD_INT 0
2649: PPUSH
2650: LD_INT 0
2652: PPUSH
2653: LD_INT 0
2655: PPUSH
2656: LD_INT 0
2658: PPUSH
2659: LD_INT 0
2661: PPUSH
2662: CALL 4912 0 7
// active_players := active_players + 1 ;
2666: LD_ADDR_VAR 0 3
2670: PUSH
2671: LD_VAR 0 3
2675: PUSH
2676: LD_INT 1
2678: PLUS
2679: ST_TO_ADDR
// end ; end ;
2680: GO 2623
2682: POP
2683: POP
// if not active_players then
2684: LD_VAR 0 3
2688: NOT
2689: IFFALSE 2699
// mc_active := false ;
2691: LD_ADDR_EXP 4
2695: PUSH
2696: LD_INT 0
2698: ST_TO_ADDR
// end ;
2699: GO 2587
// end ;
2701: LD_VAR 0 1
2705: RET
// export function MC_MonitorBase ( base ) ; begin
2706: LD_INT 0
2708: PPUSH
// if not mc_people [ base ] then
2709: LD_EXP 9
2713: PUSH
2714: LD_VAR 0 1
2718: ARRAY
2719: NOT
2720: IFFALSE 2745
// mc_bases := Replace ( mc_bases , base , 0 ) ;
2722: LD_ADDR_EXP 6
2726: PUSH
2727: LD_EXP 6
2731: PPUSH
2732: LD_VAR 0 1
2736: PPUSH
2737: LD_INT 0
2739: PPUSH
2740: CALL_OW 1
2744: ST_TO_ADDR
// mc_danger := Replace ( mc_danger , base , DangerInArea ( mc_bases [ base ] , mc_scan_area [ base ] ) ) ;
2745: LD_ADDR_EXP 30
2749: PUSH
2750: LD_EXP 30
2754: PPUSH
2755: LD_VAR 0 1
2759: PPUSH
2760: LD_EXP 6
2764: PUSH
2765: LD_VAR 0 1
2769: ARRAY
2770: PPUSH
2771: LD_EXP 29
2775: PUSH
2776: LD_VAR 0 1
2780: ARRAY
2781: PPUSH
2782: CALL 15703 0 2
2786: PPUSH
2787: CALL_OW 1
2791: ST_TO_ADDR
// if mc_danger [ base ] then
2792: LD_EXP 30
2796: PUSH
2797: LD_VAR 0 1
2801: ARRAY
2802: IFFALSE 2815
// MC_Defend ( base ) else
2804: LD_VAR 0 1
2808: PPUSH
2809: CALL 2829 0 1
2813: GO 2824
// MC_TaskManager ( base ) ;
2815: LD_VAR 0 1
2819: PPUSH
2820: CALL 2891 0 1
// end ;
2824: LD_VAR 0 2
2828: RET
// export function MC_Defend ( base ) ; var defender_vehicles ; begin
2829: LD_INT 0
2831: PPUSH
2832: PPUSH
// if mc_defense_status [ base ] then
2833: LD_EXP 16
2837: PUSH
2838: LD_VAR 0 1
2842: ARRAY
2843: IFFALSE 2847
// exit ;
2845: GO 2886
// mc_defense_status := Replace ( mc_defense_status , base , true ) ;
2847: LD_ADDR_EXP 16
2851: PUSH
2852: LD_EXP 16
2856: PPUSH
2857: LD_VAR 0 1
2861: PPUSH
2862: LD_INT 1
2864: PPUSH
2865: CALL_OW 1
2869: ST_TO_ADDR
// defender_vehicles := mc_defender [ base ] ;
2870: LD_ADDR_VAR 0 3
2874: PUSH
2875: LD_EXP 17
2879: PUSH
2880: LD_VAR 0 1
2884: ARRAY
2885: ST_TO_ADDR
// end ;
2886: LD_VAR 0 2
2890: RET
// export function MC_TaskManager ( base ) ; var crates_list ; begin
2891: LD_INT 0
2893: PPUSH
2894: PPUSH
// MC_CollectCrates ( base , GetListOfCratesInArea ( mc_crates_area [ base ] ) ) ;
2895: LD_VAR 0 1
2899: PPUSH
2900: LD_EXP 25
2904: PUSH
2905: LD_VAR 0 1
2909: ARRAY
2910: PPUSH
2911: CALL_OW 435
2915: PPUSH
2916: CALL 2934 0 2
// MC_Build ( base ) ;
2920: LD_VAR 0 1
2924: PPUSH
2925: CALL 4280 0 1
// end ;
2929: LD_VAR 0 2
2933: RET
// export function MC_CollectCrates ( base , crates ) ; var i , j , amount , cargo_bays , apes , engs , collectors , number_of_crates , driver , drivers , depot , mechanic_used ; begin
2934: LD_INT 0
2936: PPUSH
2937: PPUSH
2938: PPUSH
2939: PPUSH
2940: PPUSH
2941: PPUSH
2942: PPUSH
2943: PPUSH
2944: PPUSH
2945: PPUSH
2946: PPUSH
2947: PPUSH
2948: PPUSH
// if MCTM_HasActiveTask ( base , mctm_collect_crates ) or not crates or not MC_GetDepot ( base ) then
2949: LD_VAR 0 1
2953: PPUSH
2954: LD_EXP 36
2958: PPUSH
2959: CALL 7972 0 2
2963: PUSH
2964: LD_VAR 0 2
2968: NOT
2969: OR
2970: PUSH
2971: LD_VAR 0 1
2975: PPUSH
2976: CALL 7593 0 1
2980: NOT
2981: OR
2982: IFFALSE 2986
// exit ;
2984: GO 4275
// MCTM_SetActiveTask ( base , mctm_collect_crates ) ;
2986: LD_VAR 0 1
2990: PPUSH
2991: LD_EXP 36
2995: PPUSH
2996: CALL 8002 0 2
// collectors := [ ] ;
3000: LD_ADDR_VAR 0 10
3004: PUSH
3005: EMPTY
3006: ST_TO_ADDR
// cargo_bays := GetCargoBay ( mc_vehicles [ base ] ) ;
3007: LD_ADDR_VAR 0 7
3011: PUSH
3012: LD_EXP 11
3016: PUSH
3017: LD_VAR 0 1
3021: ARRAY
3022: PPUSH
3023: CALL 45679 0 1
3027: ST_TO_ADDR
// if cargo_bays then
3028: LD_VAR 0 7
3032: IFFALSE 3713
// begin collectors := collectors union cargo_bays ;
3034: LD_ADDR_VAR 0 10
3038: PUSH
3039: LD_VAR 0 10
3043: PUSH
3044: LD_VAR 0 7
3048: UNION
3049: ST_TO_ADDR
// while crates and collectors do
3050: LD_VAR 0 2
3054: PUSH
3055: LD_VAR 0 10
3059: AND
3060: IFFALSE 3610
// begin wait ( 0 0$1 ) ;
3062: LD_INT 35
3064: PPUSH
3065: CALL_OW 67
// for i in collectors do
3069: LD_ADDR_VAR 0 4
3073: PUSH
3074: LD_VAR 0 10
3078: PUSH
3079: FOR_IN
3080: IFFALSE 3606
// begin driver := 0 ;
3082: LD_ADDR_VAR 0 12
3086: PUSH
3087: LD_INT 0
3089: ST_TO_ADDR
// if GetControl ( i ) = control_manual and not IsDrivenBy ( i ) then
3090: LD_VAR 0 4
3094: PPUSH
3095: CALL_OW 263
3099: PUSH
3100: LD_INT 1
3102: EQUAL
3103: PUSH
3104: LD_VAR 0 4
3108: PPUSH
3109: CALL_OW 311
3113: NOT
3114: AND
3115: IFFALSE 3299
// begin driver := MC_GetOneByClass ( base , 3 , mct_none ) ;
3117: LD_ADDR_VAR 0 12
3121: PUSH
3122: LD_VAR 0 1
3126: PPUSH
3127: LD_INT 3
3129: PPUSH
3130: LD_EXP 31
3134: PPUSH
3135: CALL 7499 0 3
3139: ST_TO_ADDR
// if not driver then
3140: LD_VAR 0 12
3144: NOT
3145: IFFALSE 3214
// begin driver := MC_GetBestForClass ( base , 3 , 1 ) ;
3147: LD_ADDR_VAR 0 12
3151: PUSH
3152: LD_VAR 0 1
3156: PPUSH
3157: LD_INT 3
3159: PPUSH
3160: LD_INT 1
3162: PPUSH
3163: CALL 6658 0 3
3167: ST_TO_ADDR
// if driver then
3168: LD_VAR 0 12
3172: IFFALSE 3214
// begin driver := driver [ 1 ] ;
3174: LD_ADDR_VAR 0 12
3178: PUSH
3179: LD_VAR 0 12
3183: PUSH
3184: LD_INT 1
3186: ARRAY
3187: ST_TO_ADDR
// MC_ChangeClass ( base , 3 , driver ) ;
3188: LD_VAR 0 1
3192: PPUSH
3193: LD_INT 3
3195: PPUSH
3196: LD_VAR 0 12
3200: PPUSH
3201: CALL 6888 0 3
// AddComExitBuilding ( driver ) ;
3205: LD_VAR 0 12
3209: PPUSH
3210: CALL_OW 182
// end ; end ; if IsInUnit ( driver ) then
3214: LD_VAR 0 12
3218: PPUSH
3219: CALL_OW 310
3223: IFFALSE 3234
// ComExit ( driver ) ;
3225: LD_VAR 0 12
3229: PPUSH
3230: CALL 44808 0 1
// SetTag ( driver , mct_collect_crates ) ;
3234: LD_VAR 0 12
3238: PPUSH
3239: LD_EXP 34
3243: PPUSH
3244: CALL_OW 109
// if GetLives ( i ) < 1000 then
3248: LD_VAR 0 4
3252: PPUSH
3253: CALL_OW 256
3257: PUSH
3258: LD_INT 1000
3260: LESS
3261: IFFALSE 3277
// AddComRepairVehicle ( driver , i ) ;
3263: LD_VAR 0 12
3267: PPUSH
3268: LD_VAR 0 4
3272: PPUSH
3273: CALL_OW 189
// AddComEnterUnit ( driver , i ) ;
3277: LD_VAR 0 12
3281: PPUSH
3282: LD_VAR 0 4
3286: PPUSH
3287: CALL_OW 180
// mechanic_used := true ;
3291: LD_ADDR_VAR 0 15
3295: PUSH
3296: LD_INT 1
3298: ST_TO_ADDR
// end ; repeat wait ( 0 0$1 ) ;
3299: LD_INT 35
3301: PPUSH
3302: CALL_OW 67
// if IsDead ( i ) then
3306: LD_VAR 0 4
3310: PPUSH
3311: CALL_OW 301
3315: IFFALSE 3335
// begin collectors := collectors diff i ;
3317: LD_ADDR_VAR 0 10
3321: PUSH
3322: LD_VAR 0 10
3326: PUSH
3327: LD_VAR 0 4
3331: DIFF
3332: ST_TO_ADDR
// continue ;
3333: GO 3299
// end ; if GetEngine ( i ) = engine_combustion and GetFuel ( i ) < 20 then
3335: LD_VAR 0 4
3339: PPUSH
3340: CALL_OW 262
3344: PUSH
3345: LD_INT 1
3347: EQUAL
3348: PUSH
3349: LD_VAR 0 4
3353: PPUSH
3354: CALL_OW 261
3358: PUSH
3359: LD_INT 20
3361: LESS
3362: AND
3363: IFFALSE 3424
// begin depot := NearestUnitToUnit ( MC_GetDepot ( base ) , i ) ;
3365: LD_ADDR_VAR 0 14
3369: PUSH
3370: LD_VAR 0 1
3374: PPUSH
3375: CALL 7593 0 1
3379: PPUSH
3380: LD_VAR 0 4
3384: PPUSH
3385: CALL_OW 74
3389: ST_TO_ADDR
// if GetDistUnits ( i , depot ) < 6 then
3390: LD_VAR 0 4
3394: PPUSH
3395: LD_VAR 0 14
3399: PPUSH
3400: CALL_OW 296
3404: PUSH
3405: LD_INT 6
3407: LESS
3408: IFFALSE 3424
// ComMoveUnit ( i , depot ) ;
3410: LD_VAR 0 4
3414: PPUSH
3415: LD_VAR 0 14
3419: PPUSH
3420: CALL_OW 112
// end ; if GetControl ( i ) = control_manual then
3424: LD_VAR 0 4
3428: PPUSH
3429: CALL_OW 263
3433: PUSH
3434: LD_INT 1
3436: EQUAL
3437: IFFALSE 3502
// begin if not driver then
3439: LD_VAR 0 12
3443: NOT
3444: IFFALSE 3461
// driver := IsDrivenBy ( i ) ;
3446: LD_ADDR_VAR 0 12
3450: PUSH
3451: LD_VAR 0 4
3455: PPUSH
3456: CALL_OW 311
3460: ST_TO_ADDR
// if not HasTask ( driver ) then
3461: LD_VAR 0 12
3465: PPUSH
3466: CALL_OW 314
3470: NOT
3471: IFFALSE 3500
// ComCollect ( driver , crates [ 1 ] , crates [ 2 ] ) ;
3473: LD_VAR 0 12
3477: PPUSH
3478: LD_VAR 0 2
3482: PUSH
3483: LD_INT 1
3485: ARRAY
3486: PPUSH
3487: LD_VAR 0 2
3491: PUSH
3492: LD_INT 2
3494: ARRAY
3495: PPUSH
3496: CALL_OW 117
// end else
3500: GO 3541
// if not HasTask ( i ) then
3502: LD_VAR 0 4
3506: PPUSH
3507: CALL_OW 314
3511: NOT
3512: IFFALSE 3541
// ComCollect ( i , crates [ 1 ] , crates [ 2 ] ) ;
3514: LD_VAR 0 4
3518: PPUSH
3519: LD_VAR 0 2
3523: PUSH
3524: LD_INT 1
3526: ARRAY
3527: PPUSH
3528: LD_VAR 0 2
3532: PUSH
3533: LD_INT 2
3535: ARRAY
3536: PPUSH
3537: CALL_OW 117
// until not GetResourceAmountXY ( crates [ 1 ] , crates [ 2 ] ) ;
3541: LD_VAR 0 2
3545: PUSH
3546: LD_INT 1
3548: ARRAY
3549: PPUSH
3550: LD_VAR 0 2
3554: PUSH
3555: LD_INT 2
3557: ARRAY
3558: PPUSH
3559: CALL_OW 284
3563: NOT
3564: IFFALSE 3299
// for j := 1 to 2 do
3566: LD_ADDR_VAR 0 5
3570: PUSH
3571: DOUBLE
3572: LD_INT 1
3574: DEC
3575: ST_TO_ADDR
3576: LD_INT 2
3578: PUSH
3579: FOR_TO
3580: IFFALSE 3602
// crates := Delete ( crates , 1 ) ;
3582: LD_ADDR_VAR 0 2
3586: PUSH
3587: LD_VAR 0 2
3591: PPUSH
3592: LD_INT 1
3594: PPUSH
3595: CALL_OW 3
3599: ST_TO_ADDR
3600: GO 3579
3602: POP
3603: POP
// end ;
3604: GO 3079
3606: POP
3607: POP
// end ;
3608: GO 3050
// if mechanic_used then
3610: LD_VAR 0 15
3614: IFFALSE 3711
// begin repeat wait ( 0 0$1 ) ;
3616: LD_INT 35
3618: PPUSH
3619: CALL_OW 67
// until not GetCargo ( collectors , mat_cans ) or not collectors ;
3623: LD_VAR 0 10
3627: PPUSH
3628: LD_INT 1
3630: PPUSH
3631: CALL_OW 289
3635: NOT
3636: PUSH
3637: LD_VAR 0 10
3641: NOT
3642: OR
3643: IFFALSE 3616
// drivers := MCT_ResetTag ( base , mct_collect_crates ) ;
3645: LD_ADDR_VAR 0 13
3649: PUSH
3650: LD_VAR 0 1
3654: PPUSH
3655: LD_EXP 34
3659: PPUSH
3660: CALL 6503 0 2
3664: ST_TO_ADDR
// if drivers then
3665: LD_VAR 0 13
3669: IFFALSE 3697
// for i in drivers do
3671: LD_ADDR_VAR 0 4
3675: PUSH
3676: LD_VAR 0 13
3680: PUSH
3681: FOR_IN
3682: IFFALSE 3695
// ComExit ( i ) ;
3684: LD_VAR 0 4
3688: PPUSH
3689: CALL 44808 0 1
3693: GO 3681
3695: POP
3696: POP
// MCTM_DeleteActiveTask ( base , mctm_collect_crates ) ;
3697: LD_VAR 0 1
3701: PPUSH
3702: LD_EXP 36
3706: PPUSH
3707: CALL 8066 0 2
// end ; end else
3711: GO 4275
// begin apes := MC_GetByClass ( base , class_apeman_engineer , mct_none ) ;
3713: LD_ADDR_VAR 0 8
3717: PUSH
3718: LD_VAR 0 1
3722: PPUSH
3723: LD_INT 16
3725: PPUSH
3726: LD_EXP 31
3730: PPUSH
3731: CALL 7396 0 3
3735: ST_TO_ADDR
// if apes then
3736: LD_VAR 0 8
3740: IFFALSE 3758
// collectors := collectors union apes ;
3742: LD_ADDR_VAR 0 10
3746: PUSH
3747: LD_VAR 0 10
3751: PUSH
3752: LD_VAR 0 8
3756: UNION
3757: ST_TO_ADDR
// engs := MC_GetByClass ( base , class_engineer , mct_none ) ;
3758: LD_ADDR_VAR 0 9
3762: PUSH
3763: LD_VAR 0 1
3767: PPUSH
3768: LD_INT 2
3770: PPUSH
3771: LD_EXP 31
3775: PPUSH
3776: CALL 7396 0 3
3780: ST_TO_ADDR
// if engs then
3781: LD_VAR 0 9
3785: IFFALSE 3803
// collectors := collectors union engs ;
3787: LD_ADDR_VAR 0 10
3791: PUSH
3792: LD_VAR 0 10
3796: PUSH
3797: LD_VAR 0 9
3801: UNION
3802: ST_TO_ADDR
// if not collectors then
3803: LD_VAR 0 10
3807: NOT
3808: IFFALSE 3908
// begin engs := MC_GetBestForClass ( base , 2 , 3 ) ;
3810: LD_ADDR_VAR 0 9
3814: PUSH
3815: LD_VAR 0 1
3819: PPUSH
3820: LD_INT 2
3822: PPUSH
3823: LD_INT 3
3825: PPUSH
3826: CALL 6658 0 3
3830: ST_TO_ADDR
// if engs then
3831: LD_VAR 0 9
3835: IFFALSE 3854
// MC_ChangeClass ( base , 2 , engs ) ;
3837: LD_VAR 0 1
3841: PPUSH
3842: LD_INT 2
3844: PPUSH
3845: LD_VAR 0 9
3849: PPUSH
3850: CALL 6888 0 3
// repeat wait ( 0 0$1 ) ;
3854: LD_INT 35
3856: PPUSH
3857: CALL_OW 67
// if not UnitFilter ( engs , [ f_ok ] ) then
3861: LD_VAR 0 9
3865: PPUSH
3866: LD_INT 50
3868: PUSH
3869: EMPTY
3870: LIST
3871: PPUSH
3872: CALL_OW 72
3876: NOT
3877: IFFALSE 3881
// break ;
3879: GO 3908
// until UnitFilter ( engs , [ f_class , 2 ] ) = engs ;
3881: LD_VAR 0 9
3885: PPUSH
3886: LD_INT 25
3888: PUSH
3889: LD_INT 2
3891: PUSH
3892: EMPTY
3893: LIST
3894: LIST
3895: PPUSH
3896: CALL_OW 72
3900: PUSH
3901: LD_VAR 0 9
3905: EQUAL
3906: IFFALSE 3854
// end ; if not collectors then
3908: LD_VAR 0 10
3912: NOT
3913: IFFALSE 3931
// begin MCTM_DeleteActiveTask ( base , mctm_collect_crates ) ;
3915: LD_VAR 0 1
3919: PPUSH
3920: LD_EXP 36
3924: PPUSH
3925: CALL 8066 0 2
// exit ;
3929: GO 4275
// end ; if collectors > 5 then
3931: LD_VAR 0 10
3935: PUSH
3936: LD_INT 5
3938: GREATER
3939: IFFALSE 3995
// for i := collectors downto 5 do
3941: LD_ADDR_VAR 0 4
3945: PUSH
3946: DOUBLE
3947: LD_VAR 0 10
3951: INC
3952: ST_TO_ADDR
3953: LD_INT 5
3955: PUSH
3956: FOR_DOWNTO
3957: IFFALSE 3993
// begin SetTag ( i , 0 ) ;
3959: LD_VAR 0 4
3963: PPUSH
3964: LD_INT 0
3966: PPUSH
3967: CALL_OW 109
// collectors := Delete ( collectors , i ) ;
3971: LD_ADDR_VAR 0 10
3975: PUSH
3976: LD_VAR 0 10
3980: PPUSH
3981: LD_VAR 0 4
3985: PPUSH
3986: CALL_OW 3
3990: ST_TO_ADDR
// end ;
3991: GO 3956
3993: POP
3994: POP
// ComExitAll ( collectors ) ;
3995: LD_VAR 0 10
3999: PPUSH
4000: CALL 44891 0 1
// MCT_SetTag ( collectors , mct_collect_crates ) ;
4004: LD_VAR 0 10
4008: PPUSH
4009: LD_EXP 34
4013: PPUSH
4014: CALL 6569 0 2
// while crates and collectors do
4018: LD_VAR 0 2
4022: PUSH
4023: LD_VAR 0 10
4027: AND
4028: IFFALSE 4247
// begin wait ( 0 0$1 ) ;
4030: LD_INT 35
4032: PPUSH
4033: CALL_OW 67
// amount := GetResourceAmountXY ( crates [ 1 ] , crates [ 2 ] ) ;
4037: LD_ADDR_VAR 0 6
4041: PUSH
4042: LD_VAR 0 2
4046: PUSH
4047: LD_INT 1
4049: ARRAY
4050: PPUSH
4051: LD_VAR 0 2
4055: PUSH
4056: LD_INT 2
4058: ARRAY
4059: PPUSH
4060: CALL_OW 284
4064: ST_TO_ADDR
// j := 0 ;
4065: LD_ADDR_VAR 0 5
4069: PUSH
4070: LD_INT 0
4072: ST_TO_ADDR
// for i in collectors do
4073: LD_ADDR_VAR 0 4
4077: PUSH
4078: LD_VAR 0 10
4082: PUSH
4083: FOR_IN
4084: IFFALSE 4180
// begin if IsDead ( i ) then
4086: LD_VAR 0 4
4090: PPUSH
4091: CALL_OW 301
4095: IFFALSE 4113
// collectors := collectors diff i ;
4097: LD_ADDR_VAR 0 10
4101: PUSH
4102: LD_VAR 0 10
4106: PUSH
4107: LD_VAR 0 4
4111: DIFF
4112: ST_TO_ADDR
// if j < amount and not HasTask ( i ) then
4113: LD_VAR 0 5
4117: PUSH
4118: LD_VAR 0 6
4122: LESS
4123: PUSH
4124: LD_VAR 0 4
4128: PPUSH
4129: CALL_OW 314
4133: NOT
4134: AND
4135: IFFALSE 4178
// begin j := j + 1 ;
4137: LD_ADDR_VAR 0 5
4141: PUSH
4142: LD_VAR 0 5
4146: PUSH
4147: LD_INT 1
4149: PLUS
4150: ST_TO_ADDR
// ComCollect ( i , crates [ 1 ] , crates [ 2 ] ) ;
4151: LD_VAR 0 4
4155: PPUSH
4156: LD_VAR 0 2
4160: PUSH
4161: LD_INT 1
4163: ARRAY
4164: PPUSH
4165: LD_VAR 0 2
4169: PUSH
4170: LD_INT 2
4172: ARRAY
4173: PPUSH
4174: CALL_OW 117
// end ; end ;
4178: GO 4083
4180: POP
4181: POP
// if not GetResourceAmountXY ( crates [ 1 ] , crates [ 2 ] ) then
4182: LD_VAR 0 2
4186: PUSH
4187: LD_INT 1
4189: ARRAY
4190: PPUSH
4191: LD_VAR 0 2
4195: PUSH
4196: LD_INT 2
4198: ARRAY
4199: PPUSH
4200: CALL_OW 284
4204: NOT
4205: IFFALSE 4245
// for j := 1 to 2 do
4207: LD_ADDR_VAR 0 5
4211: PUSH
4212: DOUBLE
4213: LD_INT 1
4215: DEC
4216: ST_TO_ADDR
4217: LD_INT 2
4219: PUSH
4220: FOR_TO
4221: IFFALSE 4243
// crates := Delete ( crates , 1 ) ;
4223: LD_ADDR_VAR 0 2
4227: PUSH
4228: LD_VAR 0 2
4232: PPUSH
4233: LD_INT 1
4235: PPUSH
4236: CALL_OW 3
4240: ST_TO_ADDR
4241: GO 4220
4243: POP
4244: POP
// end ;
4245: GO 4018
// MCT_ResetTag ( base , mct_collect_crates ) ;
4247: LD_VAR 0 1
4251: PPUSH
4252: LD_EXP 34
4256: PPUSH
4257: CALL 6503 0 2
// MCTM_DeleteActiveTask ( base , mctm_collect_crates ) ;
4261: LD_VAR 0 1
4265: PPUSH
4266: LD_EXP 36
4270: PPUSH
4271: CALL 8066 0 2
// end ; end ;
4275: LD_VAR 0 3
4279: RET
// export function MC_Build ( base ) ; var depot , btype , x , y , d , engs ; begin
4280: LD_INT 0
4282: PPUSH
4283: PPUSH
4284: PPUSH
4285: PPUSH
4286: PPUSH
4287: PPUSH
4288: PPUSH
// if MCTM_HasActiveTask ( base , mctm_build ) or not mc_build_list [ base ] or not MC_GetDepot ( base ) then
4289: LD_VAR 0 1
4293: PPUSH
4294: LD_EXP 37
4298: PPUSH
4299: CALL 7972 0 2
4303: PUSH
4304: LD_EXP 14
4308: PUSH
4309: LD_VAR 0 1
4313: ARRAY
4314: NOT
4315: OR
4316: PUSH
4317: LD_VAR 0 1
4321: PPUSH
4322: CALL 7593 0 1
4326: NOT
4327: OR
4328: IFFALSE 4332
// exit ;
4330: GO 4883
// MCTM_SetActiveTask ( base , mctm_build ) ;
4332: LD_VAR 0 1
4336: PPUSH
4337: LD_EXP 37
4341: PPUSH
4342: CALL 8002 0 2
// engs := MC_GetByClass ( base , 2 , mct_none ) ;
4346: LD_ADDR_VAR 0 8
4350: PUSH
4351: LD_VAR 0 1
4355: PPUSH
4356: LD_INT 2
4358: PPUSH
4359: LD_EXP 31
4363: PPUSH
4364: CALL 7396 0 3
4368: ST_TO_ADDR
// if not engs then
4369: LD_VAR 0 8
4373: NOT
4374: IFFALSE 4486
// begin engs := MC_GetBestForClass ( base , 2 , 6 ) ;
4376: LD_ADDR_VAR 0 8
4380: PUSH
4381: LD_VAR 0 1
4385: PPUSH
4386: LD_INT 2
4388: PPUSH
4389: LD_INT 6
4391: PPUSH
4392: CALL 6658 0 3
4396: ST_TO_ADDR
// if not engs then
4397: LD_VAR 0 8
4401: NOT
4402: IFFALSE 4420
// begin MCTM_DeleteActiveTask ( base , mctm_build ) ;
4404: LD_VAR 0 1
4408: PPUSH
4409: LD_EXP 37
4413: PPUSH
4414: CALL 8066 0 2
// exit ;
4418: GO 4883
// end ; MC_ChangeClass ( base , 2 , engs ) ;
4420: LD_VAR 0 1
4424: PPUSH
4425: LD_INT 2
4427: PPUSH
4428: LD_VAR 0 8
4432: PPUSH
4433: CALL 6888 0 3
// repeat wait ( 0 0$1 ) ;
4437: LD_INT 35
4439: PPUSH
4440: CALL_OW 67
// if not mc_people [ base ] then
4444: LD_EXP 9
4448: PUSH
4449: LD_VAR 0 1
4453: ARRAY
4454: NOT
4455: IFFALSE 4459
// exit ;
4457: GO 4883
// until UnitFilter ( engs , [ f_class , 2 ] ) = engs ;
4459: LD_VAR 0 8
4463: PPUSH
4464: LD_INT 25
4466: PUSH
4467: LD_INT 2
4469: PUSH
4470: EMPTY
4471: LIST
4472: LIST
4473: PPUSH
4474: CALL_OW 72
4478: PUSH
4479: LD_VAR 0 8
4483: EQUAL
4484: IFFALSE 4437
// end ; ComExitAll ( engs ) ;
4486: LD_VAR 0 8
4490: PPUSH
4491: CALL 44891 0 1
// MCT_SetTag ( engs , mct_build ) ;
4495: LD_VAR 0 8
4499: PPUSH
4500: LD_EXP 33
4504: PPUSH
4505: CALL 6569 0 2
// btype := mc_build_list [ base ] [ 1 ] [ 1 ] ;
4509: LD_ADDR_VAR 0 4
4513: PUSH
4514: LD_EXP 14
4518: PUSH
4519: LD_VAR 0 1
4523: ARRAY
4524: PUSH
4525: LD_INT 1
4527: ARRAY
4528: PUSH
4529: LD_INT 1
4531: ARRAY
4532: ST_TO_ADDR
// x := mc_build_list [ base ] [ 1 ] [ 2 ] ;
4533: LD_ADDR_VAR 0 5
4537: PUSH
4538: LD_EXP 14
4542: PUSH
4543: LD_VAR 0 1
4547: ARRAY
4548: PUSH
4549: LD_INT 1
4551: ARRAY
4552: PUSH
4553: LD_INT 2
4555: ARRAY
4556: ST_TO_ADDR
// y := mc_build_list [ base ] [ 1 ] [ 3 ] ;
4557: LD_ADDR_VAR 0 6
4561: PUSH
4562: LD_EXP 14
4566: PUSH
4567: LD_VAR 0 1
4571: ARRAY
4572: PUSH
4573: LD_INT 1
4575: ARRAY
4576: PUSH
4577: LD_INT 3
4579: ARRAY
4580: ST_TO_ADDR
// d := mc_build_list [ base ] [ 1 ] [ 4 ] ;
4581: LD_ADDR_VAR 0 7
4585: PUSH
4586: LD_EXP 14
4590: PUSH
4591: LD_VAR 0 1
4595: ARRAY
4596: PUSH
4597: LD_INT 1
4599: ARRAY
4600: PUSH
4601: LD_INT 4
4603: ARRAY
4604: ST_TO_ADDR
// if GetType ( HexInfo ( x , y ) ) = unit_building then
4605: LD_VAR 0 5
4609: PPUSH
4610: LD_VAR 0 6
4614: PPUSH
4615: CALL_OW 428
4619: PPUSH
4620: CALL_OW 247
4624: PUSH
4625: LD_INT 3
4627: EQUAL
4628: IFFALSE 4663
// begin wait ( 0 0$1 ) ;
4630: LD_INT 35
4632: PPUSH
4633: CALL_OW 67
// ComComplete ( engs , HexInfo ( x , y ) ) ;
4637: LD_VAR 0 8
4641: PPUSH
4642: LD_VAR 0 5
4646: PPUSH
4647: LD_VAR 0 6
4651: PPUSH
4652: CALL_OW 428
4656: PPUSH
4657: CALL 15914 0 2
// end else
4661: GO 4883
// begin depot := NearestUnitToXY ( MC_GetDepot ( base ) , x , y ) ;
4663: LD_ADDR_VAR 0 3
4667: PUSH
4668: LD_VAR 0 1
4672: PPUSH
4673: CALL 7593 0 1
4677: PPUSH
4678: LD_VAR 0 5
4682: PPUSH
4683: LD_VAR 0 6
4687: PPUSH
4688: CALL_OW 73
4692: ST_TO_ADDR
// if not HexInfo ( x , y ) and CanBeBuilt ( depot , btype , x , y , d ) then
4693: LD_VAR 0 5
4697: PPUSH
4698: LD_VAR 0 6
4702: PPUSH
4703: CALL_OW 428
4707: NOT
4708: PUSH
4709: LD_VAR 0 3
4713: PPUSH
4714: LD_VAR 0 4
4718: PPUSH
4719: LD_VAR 0 5
4723: PPUSH
4724: LD_VAR 0 6
4728: PPUSH
4729: LD_VAR 0 7
4733: PPUSH
4734: CALL 20792 0 5
4738: AND
4739: IFFALSE 4772
// ComBuild ( engs , btype , x , y , d ) else
4741: LD_VAR 0 8
4745: PPUSH
4746: LD_VAR 0 4
4750: PPUSH
4751: LD_VAR 0 5
4755: PPUSH
4756: LD_VAR 0 6
4760: PPUSH
4761: LD_VAR 0 7
4765: PPUSH
4766: CALL_OW 145
4770: GO 4883
// begin if GetType ( HexInfo ( x , y ) ) <> unit_building then
4772: LD_VAR 0 5
4776: PPUSH
4777: LD_VAR 0 6
4781: PPUSH
4782: CALL_OW 428
4786: PPUSH
4787: CALL_OW 247
4791: PUSH
4792: LD_INT 3
4794: NONEQUAL
4795: IFFALSE 4855
// begin TryClearPlaceForBuilding ( btype , x , y , d , mc_buildings [ base ] , engs , mc_parking [ base ] ) ;
4797: LD_VAR 0 4
4801: PPUSH
4802: LD_VAR 0 5
4806: PPUSH
4807: LD_VAR 0 6
4811: PPUSH
4812: LD_VAR 0 7
4816: PPUSH
4817: LD_EXP 10
4821: PUSH
4822: LD_VAR 0 1
4826: ARRAY
4827: PPUSH
4828: LD_VAR 0 8
4832: PPUSH
4833: LD_EXP 28
4837: PUSH
4838: LD_VAR 0 1
4842: ARRAY
4843: PPUSH
4844: CALL 19935 0 7
// wait ( 0 0$10 ) ;
4848: LD_INT 350
4850: PPUSH
4851: CALL_OW 67
// end ; MCTM_DeleteActiveTask ( base , mctm_build ) ;
4855: LD_VAR 0 1
4859: PPUSH
4860: LD_EXP 37
4864: PPUSH
4865: CALL 8066 0 2
// MCT_ResetTag ( base , mctm_build ) ;
4869: LD_VAR 0 1
4873: PPUSH
4874: LD_EXP 37
4878: PPUSH
4879: CALL 6503 0 2
// end ; end ; end ; end_of_file
4883: LD_VAR 0 2
4887: RET
// export mce_start , mce_monitor_base , mce_ ; export function MCE_InitEvents ( ) ; begin
4888: LD_INT 0
4890: PPUSH
// mce_start := 1 ;
4891: LD_ADDR_EXP 1
4895: PUSH
4896: LD_INT 1
4898: ST_TO_ADDR
// mce_monitor_base := 2 ;
4899: LD_ADDR_EXP 2
4903: PUSH
4904: LD_INT 2
4906: ST_TO_ADDR
// end ;
4907: LD_VAR 0 1
4911: RET
// export function MCE_SailEventCustom ( event , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
4912: LD_INT 0
4914: PPUSH
// case event of mce_start :
4915: LD_VAR 0 1
4919: PUSH
4920: LD_EXP 1
4924: DOUBLE
4925: EQUAL
4926: IFTRUE 4930
4928: GO 4937
4930: POP
// MC_Monitor ( ) ; mce_monitor_base :
4931: CALL 2582 0 0
4935: GO 4960
4937: LD_EXP 2
4941: DOUBLE
4942: EQUAL
4943: IFTRUE 4947
4945: GO 4959
4947: POP
// MC_MonitorBase ( p1 ) ; end ;
4948: LD_VAR 0 2
4952: PPUSH
4953: CALL 2706 0 1
4957: GO 4960
4959: POP
// end ;
4960: LD_VAR 0 8
4964: RET
// export function MCE_ClassChanged ( unit , old_class , new_class ) ; begin
4965: LD_INT 0
4967: PPUSH
// SetTag ( unit , mct_none ) ;
4968: LD_VAR 0 1
4972: PPUSH
4973: LD_EXP 31
4977: PPUSH
4978: CALL_OW 109
// end ;
4982: LD_VAR 0 4
4986: RET
// export function MCE_UnitDestroyed ( un ) ; begin
4987: LD_INT 0
4989: PPUSH
// case GetType ( un ) of unit_human :
4990: LD_VAR 0 1
4994: PPUSH
4995: CALL_OW 247
4999: PUSH
5000: LD_INT 1
5002: DOUBLE
5003: EQUAL
5004: IFTRUE 5008
5006: GO 5020
5008: POP
// MCE_HumanKilled ( un ) ; unit_building :
5009: LD_VAR 0 1
5013: PPUSH
5014: CALL 5046 0 1
5018: GO 5041
5020: LD_INT 3
5022: DOUBLE
5023: EQUAL
5024: IFTRUE 5028
5026: GO 5040
5028: POP
// MCE_BuildingDestroyed ( un ) ; end ;
5029: LD_VAR 0 1
5033: PPUSH
5034: CALL 5603 0 1
5038: GO 5041
5040: POP
// end ;
5041: LD_VAR 0 2
5045: RET
// export function MCE_HumanKilled ( un ) ; var i ; begin
5046: LD_INT 0
5048: PPUSH
5049: PPUSH
// for i := 1 to mc_people do
5050: LD_ADDR_VAR 0 3
5054: PUSH
5055: DOUBLE
5056: LD_INT 1
5058: DEC
5059: ST_TO_ADDR
5060: LD_EXP 9
5064: PUSH
5065: FOR_TO
5066: IFFALSE 5125
// if un in mc_people [ i ] then
5068: LD_VAR 0 1
5072: PUSH
5073: LD_EXP 9
5077: PUSH
5078: LD_VAR 0 3
5082: ARRAY
5083: IN
5084: IFFALSE 5123
// mc_people := Replace ( mc_people , i , mc_people [ i ] diff un ) ;
5086: LD_ADDR_EXP 9
5090: PUSH
5091: LD_EXP 9
5095: PPUSH
5096: LD_VAR 0 3
5100: PPUSH
5101: LD_EXP 9
5105: PUSH
5106: LD_VAR 0 3
5110: ARRAY
5111: PUSH
5112: LD_VAR 0 1
5116: DIFF
5117: PPUSH
5118: CALL_OW 1
5122: ST_TO_ADDR
5123: GO 5065
5125: POP
5126: POP
// end ;
5127: LD_VAR 0 2
5131: RET
// export function MCE_EvacuateVehicle ( driver , vehicle , p1 , p2 ) ; var base ; begin
5132: LD_INT 0
5134: PPUSH
5135: PPUSH
// if GetTag ( driver ) = mct_collect_crates then
5136: LD_VAR 0 1
5140: PPUSH
5141: CALL_OW 110
5145: PUSH
5146: LD_EXP 34
5150: EQUAL
5151: IFFALSE 5200
// begin base := MC_GetHumanBase ( driver ) ;
5153: LD_ADDR_VAR 0 6
5157: PUSH
5158: LD_VAR 0 1
5162: PPUSH
5163: CALL 6825 0 1
5167: ST_TO_ADDR
// if base then
5168: LD_VAR 0 6
5172: IFFALSE 5200
// begin SetTag ( driver , 0 ) ;
5174: LD_VAR 0 1
5178: PPUSH
5179: LD_INT 0
5181: PPUSH
5182: CALL_OW 109
// MC_Retreat ( base , driver ) ;
5186: LD_VAR 0 6
5190: PPUSH
5191: LD_VAR 0 1
5195: PPUSH
5196: CALL 7856 0 2
// end ; end ; end ;
5200: LD_VAR 0 5
5204: RET
// export function MCE_BuildingComplete ( building ) ; var base , btype , x , y , d ; begin
5205: LD_INT 0
5207: PPUSH
5208: PPUSH
5209: PPUSH
5210: PPUSH
5211: PPUSH
5212: PPUSH
// btype := GetBType ( building ) ;
5213: LD_ADDR_VAR 0 4
5217: PUSH
5218: LD_VAR 0 1
5222: PPUSH
5223: CALL_OW 266
5227: ST_TO_ADDR
// x := GetX ( building ) ;
5228: LD_ADDR_VAR 0 5
5232: PUSH
5233: LD_VAR 0 1
5237: PPUSH
5238: CALL_OW 250
5242: ST_TO_ADDR
// y := GetY ( building ) ;
5243: LD_ADDR_VAR 0 6
5247: PUSH
5248: LD_VAR 0 1
5252: PPUSH
5253: CALL_OW 251
5257: ST_TO_ADDR
// d := GetDir ( building ) ;
5258: LD_ADDR_VAR 0 7
5262: PUSH
5263: LD_VAR 0 1
5267: PPUSH
5268: CALL_OW 254
5272: ST_TO_ADDR
// for base = 1 to mc_build_list do
5273: LD_ADDR_VAR 0 3
5277: PUSH
5278: DOUBLE
5279: LD_INT 1
5281: DEC
5282: ST_TO_ADDR
5283: LD_EXP 14
5287: PUSH
5288: FOR_TO
5289: IFFALSE 5596
// begin if not mc_build_list [ base ] then
5291: LD_EXP 14
5295: PUSH
5296: LD_VAR 0 3
5300: ARRAY
5301: NOT
5302: IFFALSE 5306
// continue ;
5304: GO 5288
// if CompareArrayValues ( [ btype , x , y , d ] , mc_build_list [ base ] [ 1 ] ) and GetSide ( building ) = mc_bases [ base ] then
5306: LD_VAR 0 4
5310: PUSH
5311: LD_VAR 0 5
5315: PUSH
5316: LD_VAR 0 6
5320: PUSH
5321: LD_VAR 0 7
5325: PUSH
5326: EMPTY
5327: LIST
5328: LIST
5329: LIST
5330: LIST
5331: PPUSH
5332: LD_EXP 14
5336: PUSH
5337: LD_VAR 0 3
5341: ARRAY
5342: PUSH
5343: LD_INT 1
5345: ARRAY
5346: PPUSH
5347: CALL 19359 0 2
5351: PUSH
5352: LD_VAR 0 1
5356: PPUSH
5357: CALL_OW 255
5361: PUSH
5362: LD_EXP 6
5366: PUSH
5367: LD_VAR 0 3
5371: ARRAY
5372: EQUAL
5373: AND
5374: IFFALSE 5594
// begin if mc_build_list [ base ] [ 1 ] > 4 then
5376: LD_EXP 14
5380: PUSH
5381: LD_VAR 0 3
5385: ARRAY
5386: PUSH
5387: LD_INT 1
5389: ARRAY
5390: PUSH
5391: LD_INT 4
5393: GREATER
5394: IFFALSE 5467
// begin repeat wait ( 0 0$1 ) ;
5396: LD_INT 35
5398: PPUSH
5399: CALL_OW 67
// until not UpgradeCost ( mc_build_list [ base ] [ 1 ] [ 5 ] ) or not IsDead ( building ) ;
5403: LD_EXP 14
5407: PUSH
5408: LD_VAR 0 3
5412: ARRAY
5413: PUSH
5414: LD_INT 1
5416: ARRAY
5417: PUSH
5418: LD_INT 5
5420: ARRAY
5421: PPUSH
5422: CALL 19595 0 1
5426: NOT
5427: PUSH
5428: LD_VAR 0 1
5432: PPUSH
5433: CALL_OW 301
5437: NOT
5438: OR
5439: IFFALSE 5396
// if IsDead ( building ) then
5441: LD_VAR 0 1
5445: PPUSH
5446: CALL_OW 301
5450: IFFALSE 5456
// exit ;
5452: POP
5453: POP
5454: GO 5598
// ComUpgrade ( building ) ;
5456: LD_VAR 0 1
5460: PPUSH
5461: CALL_OW 146
// end else
5465: GO 5506
// mc_build_list := Replace ( mc_build_list , base , Delete ( mc_build_list [ base ] , 1 ) ) ;
5467: LD_ADDR_EXP 14
5471: PUSH
5472: LD_EXP 14
5476: PPUSH
5477: LD_VAR 0 3
5481: PPUSH
5482: LD_EXP 14
5486: PUSH
5487: LD_VAR 0 3
5491: ARRAY
5492: PPUSH
5493: LD_INT 1
5495: PPUSH
5496: CALL_OW 3
5500: PPUSH
5501: CALL_OW 1
5505: ST_TO_ADDR
// mc_buildings := Replace ( mc_buildings , base , Replace ( mc_buildings [ base ] , mc_buildings [ base ] + 1 , building ) ) ;
5506: LD_ADDR_EXP 10
5510: PUSH
5511: LD_EXP 10
5515: PPUSH
5516: LD_VAR 0 3
5520: PPUSH
5521: LD_EXP 10
5525: PUSH
5526: LD_VAR 0 3
5530: ARRAY
5531: PPUSH
5532: LD_EXP 10
5536: PUSH
5537: LD_VAR 0 3
5541: ARRAY
5542: PUSH
5543: LD_INT 1
5545: PLUS
5546: PPUSH
5547: LD_VAR 0 1
5551: PPUSH
5552: CALL_OW 1
5556: PPUSH
5557: CALL_OW 1
5561: ST_TO_ADDR
// MCTM_DeleteActiveTask ( base , mctm_build ) ;
5562: LD_VAR 0 3
5566: PPUSH
5567: LD_EXP 37
5571: PPUSH
5572: CALL 8066 0 2
// MCT_ResetTag ( base , mctm_build ) ;
5576: LD_VAR 0 3
5580: PPUSH
5581: LD_EXP 37
5585: PPUSH
5586: CALL 6503 0 2
// exit ;
5590: POP
5591: POP
5592: GO 5598
// end ; end ;
5594: GO 5288
5596: POP
5597: POP
// end ;
5598: LD_VAR 0 2
5602: RET
// export function MCE_BuildingDestroyed ( building ) ; var base , x , y , d , btype ; begin
5603: LD_INT 0
5605: PPUSH
5606: PPUSH
5607: PPUSH
5608: PPUSH
5609: PPUSH
5610: PPUSH
// btype := GetBType ( building ) ;
5611: LD_ADDR_VAR 0 7
5615: PUSH
5616: LD_VAR 0 1
5620: PPUSH
5621: CALL_OW 266
5625: ST_TO_ADDR
// x := GetX ( building ) ;
5626: LD_ADDR_VAR 0 4
5630: PUSH
5631: LD_VAR 0 1
5635: PPUSH
5636: CALL_OW 250
5640: ST_TO_ADDR
// y := GetY ( building ) ;
5641: LD_ADDR_VAR 0 5
5645: PUSH
5646: LD_VAR 0 1
5650: PPUSH
5651: CALL_OW 251
5655: ST_TO_ADDR
// d := GetDir ( building ) ;
5656: LD_ADDR_VAR 0 6
5660: PUSH
5661: LD_VAR 0 1
5665: PPUSH
5666: CALL_OW 254
5670: ST_TO_ADDR
// for base := 1 to mc_buildings do
5671: LD_ADDR_VAR 0 3
5675: PUSH
5676: DOUBLE
5677: LD_INT 1
5679: DEC
5680: ST_TO_ADDR
5681: LD_EXP 10
5685: PUSH
5686: FOR_TO
5687: IFFALSE 5917
// begin if not mc_buildings [ base ] then
5689: LD_EXP 10
5693: PUSH
5694: LD_VAR 0 3
5698: ARRAY
5699: NOT
5700: IFFALSE 5704
// continue ;
5702: GO 5686
// if building in mc_buildings [ base ] then
5704: LD_VAR 0 1
5708: PUSH
5709: LD_EXP 10
5713: PUSH
5714: LD_VAR 0 3
5718: ARRAY
5719: IN
5720: IFFALSE 5915
// begin mc_buildings := Replace ( mc_buildings , base , mc_buildings [ base ] diff building ) ;
5722: LD_ADDR_EXP 10
5726: PUSH
5727: LD_EXP 10
5731: PPUSH
5732: LD_VAR 0 3
5736: PPUSH
5737: LD_EXP 10
5741: PUSH
5742: LD_VAR 0 3
5746: ARRAY
5747: PUSH
5748: LD_VAR 0 1
5752: DIFF
5753: PPUSH
5754: CALL_OW 1
5758: ST_TO_ADDR
// if mc_build_list [ base ] then
5759: LD_EXP 14
5763: PUSH
5764: LD_VAR 0 3
5768: ARRAY
5769: IFFALSE 5853
// if mc_build_list [ base ] [ 1 ] [ 1 ] = btype and mc_build_list [ base ] [ 1 ] [ 2 ] = x and mc_build_list [ base ] [ 1 ] [ 3 ] = y then
5771: LD_EXP 14
5775: PUSH
5776: LD_VAR 0 3
5780: ARRAY
5781: PUSH
5782: LD_INT 1
5784: ARRAY
5785: PUSH
5786: LD_INT 1
5788: ARRAY
5789: PUSH
5790: LD_VAR 0 7
5794: EQUAL
5795: PUSH
5796: LD_EXP 14
5800: PUSH
5801: LD_VAR 0 3
5805: ARRAY
5806: PUSH
5807: LD_INT 1
5809: ARRAY
5810: PUSH
5811: LD_INT 2
5813: ARRAY
5814: PUSH
5815: LD_VAR 0 4
5819: EQUAL
5820: AND
5821: PUSH
5822: LD_EXP 14
5826: PUSH
5827: LD_VAR 0 3
5831: ARRAY
5832: PUSH
5833: LD_INT 1
5835: ARRAY
5836: PUSH
5837: LD_INT 3
5839: ARRAY
5840: PUSH
5841: LD_VAR 0 5
5845: EQUAL
5846: AND
5847: IFFALSE 5853
// exit ;
5849: POP
5850: POP
5851: GO 5919
// mc_build_list := Replace ( mc_build_list , base , mc_build_list [ base ] ^ [ btype , x , y , d ] ) ;
5853: LD_ADDR_EXP 14
5857: PUSH
5858: LD_EXP 14
5862: PPUSH
5863: LD_VAR 0 3
5867: PPUSH
5868: LD_EXP 14
5872: PUSH
5873: LD_VAR 0 3
5877: ARRAY
5878: PUSH
5879: LD_VAR 0 7
5883: PUSH
5884: LD_VAR 0 4
5888: PUSH
5889: LD_VAR 0 5
5893: PUSH
5894: LD_VAR 0 6
5898: PUSH
5899: EMPTY
5900: LIST
5901: LIST
5902: LIST
5903: LIST
5904: ADD
5905: PPUSH
5906: CALL_OW 1
5910: ST_TO_ADDR
// exit ;
5911: POP
5912: POP
5913: GO 5919
// end ; end ;
5915: GO 5686
5917: POP
5918: POP
// end ;
5919: LD_VAR 0 2
5923: RET
// export function MCE_BuildingUpgradeComplete ( building ) ; var base , btype , x , y , d ; begin
5924: LD_INT 0
5926: PPUSH
5927: PPUSH
5928: PPUSH
5929: PPUSH
5930: PPUSH
5931: PPUSH
// btype := GetBType ( building ) ;
5932: LD_ADDR_VAR 0 4
5936: PUSH
5937: LD_VAR 0 1
5941: PPUSH
5942: CALL_OW 266
5946: ST_TO_ADDR
// x := GetX ( building ) ;
5947: LD_ADDR_VAR 0 5
5951: PUSH
5952: LD_VAR 0 1
5956: PPUSH
5957: CALL_OW 250
5961: ST_TO_ADDR
// y := GetY ( building ) ;
5962: LD_ADDR_VAR 0 6
5966: PUSH
5967: LD_VAR 0 1
5971: PPUSH
5972: CALL_OW 251
5976: ST_TO_ADDR
// d := GetDir ( building ) ;
5977: LD_ADDR_VAR 0 7
5981: PUSH
5982: LD_VAR 0 1
5986: PPUSH
5987: CALL_OW 254
5991: ST_TO_ADDR
// for base = 1 to mc_build_list do
5992: LD_ADDR_VAR 0 3
5996: PUSH
5997: DOUBLE
5998: LD_INT 1
6000: DEC
6001: ST_TO_ADDR
6002: LD_EXP 14
6006: PUSH
6007: FOR_TO
6008: IFFALSE 6178
// begin if not mc_build_list [ base ] then
6010: LD_EXP 14
6014: PUSH
6015: LD_VAR 0 3
6019: ARRAY
6020: NOT
6021: IFFALSE 6025
// continue ;
6023: GO 6007
// if CompareArrayValues ( [ btype - 1 , x , y , d , btype ] , mc_build_list [ base ] [ 1 ] ) and GetSide ( building ) = mc_bases [ base ] then
6025: LD_VAR 0 4
6029: PUSH
6030: LD_INT 1
6032: MINUS
6033: PUSH
6034: LD_VAR 0 5
6038: PUSH
6039: LD_VAR 0 6
6043: PUSH
6044: LD_VAR 0 7
6048: PUSH
6049: LD_VAR 0 4
6053: PUSH
6054: EMPTY
6055: LIST
6056: LIST
6057: LIST
6058: LIST
6059: LIST
6060: PPUSH
6061: LD_EXP 14
6065: PUSH
6066: LD_VAR 0 3
6070: ARRAY
6071: PUSH
6072: LD_INT 1
6074: ARRAY
6075: PPUSH
6076: CALL 19359 0 2
6080: PUSH
6081: LD_VAR 0 1
6085: PPUSH
6086: CALL_OW 255
6090: PUSH
6091: LD_EXP 6
6095: PUSH
6096: LD_VAR 0 3
6100: ARRAY
6101: EQUAL
6102: AND
6103: IFFALSE 6176
// begin mc_build_list := Replace ( mc_build_list , base , Delete ( mc_build_list [ base ] , 1 ) ) ;
6105: LD_ADDR_EXP 14
6109: PUSH
6110: LD_EXP 14
6114: PPUSH
6115: LD_VAR 0 3
6119: PPUSH
6120: LD_EXP 14
6124: PUSH
6125: LD_VAR 0 3
6129: ARRAY
6130: PPUSH
6131: LD_INT 1
6133: PPUSH
6134: CALL_OW 3
6138: PPUSH
6139: CALL_OW 1
6143: ST_TO_ADDR
// MCTM_DeleteActiveTask ( base , mctm_build ) ;
6144: LD_VAR 0 3
6148: PPUSH
6149: LD_EXP 37
6153: PPUSH
6154: CALL 8066 0 2
// MCT_ResetTag ( base , mctm_build ) ;
6158: LD_VAR 0 3
6162: PPUSH
6163: LD_EXP 37
6167: PPUSH
6168: CALL 6503 0 2
// exit ;
6172: POP
6173: POP
6174: GO 6180
// end ; end ;
6176: GO 6007
6178: POP
6179: POP
// end ; end_of_file
6180: LD_VAR 0 2
6184: RET
// export mc_active , mc_debug , mc_bases , mc_tag , mc_task , mc_people , mc_buildings , mc_vehicles , mc_mines , mc_minefields , mc_build_list , mc_produce_list , mc_defense_status , mc_defender , mc_defender_limit , mc_ape , mc_tech , mc_attack , mc_deposits_xy , mc_can_tame , mc_lab_upgrade , mc_crates_area , mc_teleport_exit , mc_allowed_tower_weapons , mc_parking , mc_scan_area , mc_danger ; export function MC_InitVariables ( ) ; begin
6185: LD_INT 0
6187: PPUSH
// mc_bases := [ ] ;
6188: LD_ADDR_EXP 6
6192: PUSH
6193: EMPTY
6194: ST_TO_ADDR
// mc_tag := [ ] ;
6195: LD_ADDR_EXP 7
6199: PUSH
6200: EMPTY
6201: ST_TO_ADDR
// mc_task := [ ] ;
6202: LD_ADDR_EXP 8
6206: PUSH
6207: EMPTY
6208: ST_TO_ADDR
// mc_people := [ ] ;
6209: LD_ADDR_EXP 9
6213: PUSH
6214: EMPTY
6215: ST_TO_ADDR
// mc_buildings := [ ] ;
6216: LD_ADDR_EXP 10
6220: PUSH
6221: EMPTY
6222: ST_TO_ADDR
// mc_vehicles := [ ] ;
6223: LD_ADDR_EXP 11
6227: PUSH
6228: EMPTY
6229: ST_TO_ADDR
// mc_mines := [ ] ;
6230: LD_ADDR_EXP 12
6234: PUSH
6235: EMPTY
6236: ST_TO_ADDR
// mc_minefields := [ ] ;
6237: LD_ADDR_EXP 13
6241: PUSH
6242: EMPTY
6243: ST_TO_ADDR
// mc_build_list := [ ] ;
6244: LD_ADDR_EXP 14
6248: PUSH
6249: EMPTY
6250: ST_TO_ADDR
// mc_produce_list := [ ] ;
6251: LD_ADDR_EXP 15
6255: PUSH
6256: EMPTY
6257: ST_TO_ADDR
// mc_defense_status := [ ] ;
6258: LD_ADDR_EXP 16
6262: PUSH
6263: EMPTY
6264: ST_TO_ADDR
// mc_defender := [ ] ;
6265: LD_ADDR_EXP 17
6269: PUSH
6270: EMPTY
6271: ST_TO_ADDR
// mc_defender_limit := [ ] ;
6272: LD_ADDR_EXP 18
6276: PUSH
6277: EMPTY
6278: ST_TO_ADDR
// mc_ape := [ ] ;
6279: LD_ADDR_EXP 19
6283: PUSH
6284: EMPTY
6285: ST_TO_ADDR
// mc_tech := [ ] ;
6286: LD_ADDR_EXP 20
6290: PUSH
6291: EMPTY
6292: ST_TO_ADDR
// mc_attack := [ ] ;
6293: LD_ADDR_EXP 21
6297: PUSH
6298: EMPTY
6299: ST_TO_ADDR
// mc_deposits_xy := [ ] ;
6300: LD_ADDR_EXP 22
6304: PUSH
6305: EMPTY
6306: ST_TO_ADDR
// mc_can_tame := [ ] ;
6307: LD_ADDR_EXP 23
6311: PUSH
6312: EMPTY
6313: ST_TO_ADDR
// mc_crates_area := [ ] ;
6314: LD_ADDR_EXP 25
6318: PUSH
6319: EMPTY
6320: ST_TO_ADDR
// mc_teleport_exit := [ ] ;
6321: LD_ADDR_EXP 26
6325: PUSH
6326: EMPTY
6327: ST_TO_ADDR
// mc_allowed_tower_weapons := [ ] ;
6328: LD_ADDR_EXP 27
6332: PUSH
6333: EMPTY
6334: ST_TO_ADDR
// mc_parking := [ ] ;
6335: LD_ADDR_EXP 28
6339: PUSH
6340: EMPTY
6341: ST_TO_ADDR
// mc_scan_area := [ ] ;
6342: LD_ADDR_EXP 29
6346: PUSH
6347: EMPTY
6348: ST_TO_ADDR
// mc_danger := [ ] ;
6349: LD_ADDR_EXP 30
6353: PUSH
6354: EMPTY
6355: ST_TO_ADDR
// end ; end_of_file
6356: LD_VAR 0 1
6360: RET
// export mct_none , mct_change_class , mct_build , mct_collect_crates , mct_heal ; export function MCT_InitTags ; begin
6361: LD_INT 0
6363: PPUSH
// mct_none := 0 ;
6364: LD_ADDR_EXP 31
6368: PUSH
6369: LD_INT 0
6371: ST_TO_ADDR
// mct_change_class := 1 ;
6372: LD_ADDR_EXP 32
6376: PUSH
6377: LD_INT 1
6379: ST_TO_ADDR
// mct_build := 2 ;
6380: LD_ADDR_EXP 33
6384: PUSH
6385: LD_INT 2
6387: ST_TO_ADDR
// mct_collect_crates := 3 ;
6388: LD_ADDR_EXP 34
6392: PUSH
6393: LD_INT 3
6395: ST_TO_ADDR
// mct_heal := 4 ;
6396: LD_ADDR_EXP 35
6400: PUSH
6401: LD_INT 4
6403: ST_TO_ADDR
// end ;
6404: LD_VAR 0 1
6408: RET
// export function MCT_GetByTag ( base , tag ) ; var i ; begin
6409: LD_INT 0
6411: PPUSH
6412: PPUSH
// result := [ ] ;
6413: LD_ADDR_VAR 0 3
6417: PUSH
6418: EMPTY
6419: ST_TO_ADDR
// if not base then
6420: LD_VAR 0 1
6424: NOT
6425: IFFALSE 6429
// exit ;
6427: GO 6498
// for i in mc_people [ base ] do
6429: LD_ADDR_VAR 0 4
6433: PUSH
6434: LD_EXP 9
6438: PUSH
6439: LD_VAR 0 1
6443: ARRAY
6444: PUSH
6445: FOR_IN
6446: IFFALSE 6496
// if GetTag ( i ) = tag then
6448: LD_VAR 0 4
6452: PPUSH
6453: CALL_OW 110
6457: PUSH
6458: LD_VAR 0 2
6462: EQUAL
6463: IFFALSE 6494
// result := Replace ( result , result + 1 , i ) ;
6465: LD_ADDR_VAR 0 3
6469: PUSH
6470: LD_VAR 0 3
6474: PPUSH
6475: LD_VAR 0 3
6479: PUSH
6480: LD_INT 1
6482: PLUS
6483: PPUSH
6484: LD_VAR 0 4
6488: PPUSH
6489: CALL_OW 1
6493: ST_TO_ADDR
6494: GO 6445
6496: POP
6497: POP
// end ;
6498: LD_VAR 0 3
6502: RET
// export function MCT_ResetTag ( base , tag ) ; var i ; begin
6503: LD_INT 0
6505: PPUSH
6506: PPUSH
// result := MCT_GetByTag ( base , tag ) ;
6507: LD_ADDR_VAR 0 3
6511: PUSH
6512: LD_VAR 0 1
6516: PPUSH
6517: LD_VAR 0 2
6521: PPUSH
6522: CALL 6409 0 2
6526: ST_TO_ADDR
// if result then
6527: LD_VAR 0 3
6531: IFFALSE 6564
// for i in result do
6533: LD_ADDR_VAR 0 4
6537: PUSH
6538: LD_VAR 0 3
6542: PUSH
6543: FOR_IN
6544: IFFALSE 6562
// SetTag ( i , mct_none ) ;
6546: LD_VAR 0 4
6550: PPUSH
6551: LD_EXP 31
6555: PPUSH
6556: CALL_OW 109
6560: GO 6543
6562: POP
6563: POP
// end ;
6564: LD_VAR 0 3
6568: RET
// export function MCT_SetTag ( units , tag ) ; var i ; begin
6569: LD_INT 0
6571: PPUSH
6572: PPUSH
// if not units then
6573: LD_VAR 0 1
6577: NOT
6578: IFFALSE 6582
// exit ;
6580: GO 6613
// for i in units do
6582: LD_ADDR_VAR 0 4
6586: PUSH
6587: LD_VAR 0 1
6591: PUSH
6592: FOR_IN
6593: IFFALSE 6611
// SetTag ( i , tag ) ;
6595: LD_VAR 0 4
6599: PPUSH
6600: LD_VAR 0 2
6604: PPUSH
6605: CALL_OW 109
6609: GO 6592
6611: POP
6612: POP
// end ; end_of_file
6613: LD_VAR 0 3
6617: RET
// export function MC_Exist ( base ) ; begin
6618: LD_INT 0
6620: PPUSH
// result := mc_bases >= base and mc_bases [ base ] > 0 ;
6621: LD_ADDR_VAR 0 2
6625: PUSH
6626: LD_EXP 6
6630: PUSH
6631: LD_VAR 0 1
6635: GREATEREQUAL
6636: PUSH
6637: LD_EXP 6
6641: PUSH
6642: LD_VAR 0 1
6646: ARRAY
6647: PUSH
6648: LD_INT 0
6650: GREATER
6651: AND
6652: ST_TO_ADDR
// end ;
6653: LD_VAR 0 2
6657: RET
// export function MC_GetBestForClass ( base , class , amount ) ; var i , units ; begin
6658: LD_INT 0
6660: PPUSH
6661: PPUSH
6662: PPUSH
// result := [ ] ;
6663: LD_ADDR_VAR 0 4
6667: PUSH
6668: EMPTY
6669: ST_TO_ADDR
// units := SortBySkill ( UnitFilter ( mc_people [ base ] , [ f_not , [ f_class , class ] ] ) , class ) ;
6670: LD_ADDR_VAR 0 6
6674: PUSH
6675: LD_EXP 9
6679: PUSH
6680: LD_VAR 0 1
6684: ARRAY
6685: PPUSH
6686: LD_INT 3
6688: PUSH
6689: LD_INT 25
6691: PUSH
6692: LD_VAR 0 2
6696: PUSH
6697: EMPTY
6698: LIST
6699: LIST
6700: PUSH
6701: EMPTY
6702: LIST
6703: LIST
6704: PPUSH
6705: CALL_OW 72
6709: PPUSH
6710: LD_VAR 0 2
6714: PPUSH
6715: CALL 42926 0 2
6719: ST_TO_ADDR
// if not units then
6720: LD_VAR 0 6
6724: NOT
6725: IFFALSE 6729
// exit ;
6727: GO 6820
// for i := 1 to amount do
6729: LD_ADDR_VAR 0 5
6733: PUSH
6734: DOUBLE
6735: LD_INT 1
6737: DEC
6738: ST_TO_ADDR
6739: LD_VAR 0 3
6743: PUSH
6744: FOR_TO
6745: IFFALSE 6818
// begin if i > units then
6747: LD_VAR 0 5
6751: PUSH
6752: LD_VAR 0 6
6756: GREATER
6757: IFFALSE 6763
// exit ;
6759: POP
6760: POP
6761: GO 6820
// if not GetTag ( units [ i ] ) then
6763: LD_VAR 0 6
6767: PUSH
6768: LD_VAR 0 5
6772: ARRAY
6773: PPUSH
6774: CALL_OW 110
6778: NOT
6779: IFFALSE 6816
// result := Replace ( result , result + 1 , units [ i ] ) ;
6781: LD_ADDR_VAR 0 4
6785: PUSH
6786: LD_VAR 0 4
6790: PPUSH
6791: LD_VAR 0 4
6795: PUSH
6796: LD_INT 1
6798: PLUS
6799: PPUSH
6800: LD_VAR 0 6
6804: PUSH
6805: LD_VAR 0 5
6809: ARRAY
6810: PPUSH
6811: CALL_OW 1
6815: ST_TO_ADDR
// end ;
6816: GO 6744
6818: POP
6819: POP
// end ;
6820: LD_VAR 0 4
6824: RET
// export function MC_GetHumanBase ( human ) ; var i ; begin
6825: LD_INT 0
6827: PPUSH
6828: PPUSH
// for i := 1 to mc_people do
6829: LD_ADDR_VAR 0 3
6833: PUSH
6834: DOUBLE
6835: LD_INT 1
6837: DEC
6838: ST_TO_ADDR
6839: LD_EXP 9
6843: PUSH
6844: FOR_TO
6845: IFFALSE 6881
// if human in mc_people [ i ] then
6847: LD_VAR 0 1
6851: PUSH
6852: LD_EXP 9
6856: PUSH
6857: LD_VAR 0 3
6861: ARRAY
6862: IN
6863: IFFALSE 6879
// begin result := i ;
6865: LD_ADDR_VAR 0 2
6869: PUSH
6870: LD_VAR 0 3
6874: ST_TO_ADDR
// exit ;
6875: POP
6876: POP
6877: GO 6883
// end ;
6879: GO 6844
6881: POP
6882: POP
// end ;
6883: LD_VAR 0 2
6887: RET
// export function MC_ChangeClass ( base , class , units ) ; var i , buildings , b ; begin
6888: LD_INT 0
6890: PPUSH
6891: PPUSH
6892: PPUSH
6893: PPUSH
// if not base or not units then
6894: LD_VAR 0 1
6898: NOT
6899: PUSH
6900: LD_VAR 0 3
6904: NOT
6905: OR
6906: IFFALSE 6910
// exit ;
6908: GO 7391
// case class of 1 , 5 , 6 , 7 , 8 :
6910: LD_VAR 0 2
6914: PUSH
6915: LD_INT 1
6917: DOUBLE
6918: EQUAL
6919: IFTRUE 6947
6921: LD_INT 5
6923: DOUBLE
6924: EQUAL
6925: IFTRUE 6947
6927: LD_INT 6
6929: DOUBLE
6930: EQUAL
6931: IFTRUE 6947
6933: LD_INT 7
6935: DOUBLE
6936: EQUAL
6937: IFTRUE 6947
6939: LD_INT 8
6941: DOUBLE
6942: EQUAL
6943: IFTRUE 6947
6945: GO 6999
6947: POP
// buildings := UnitFilter ( mc_buildings [ base ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ; 2 :
6948: LD_ADDR_VAR 0 6
6952: PUSH
6953: LD_EXP 10
6957: PUSH
6958: LD_VAR 0 1
6962: ARRAY
6963: PPUSH
6964: LD_INT 2
6966: PUSH
6967: LD_INT 30
6969: PUSH
6970: LD_INT 4
6972: PUSH
6973: EMPTY
6974: LIST
6975: LIST
6976: PUSH
6977: LD_INT 30
6979: PUSH
6980: LD_INT 5
6982: PUSH
6983: EMPTY
6984: LIST
6985: LIST
6986: PUSH
6987: EMPTY
6988: LIST
6989: LIST
6990: LIST
6991: PPUSH
6992: CALL_OW 72
6996: ST_TO_ADDR
6997: GO 7191
6999: LD_INT 2
7001: DOUBLE
7002: EQUAL
7003: IFTRUE 7007
7005: GO 7059
7007: POP
// buildings := UnitFilter ( mc_buildings [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ; 3 :
7008: LD_ADDR_VAR 0 6
7012: PUSH
7013: LD_EXP 10
7017: PUSH
7018: LD_VAR 0 1
7022: ARRAY
7023: PPUSH
7024: LD_INT 2
7026: PUSH
7027: LD_INT 30
7029: PUSH
7030: LD_INT 0
7032: PUSH
7033: EMPTY
7034: LIST
7035: LIST
7036: PUSH
7037: LD_INT 30
7039: PUSH
7040: LD_INT 1
7042: PUSH
7043: EMPTY
7044: LIST
7045: LIST
7046: PUSH
7047: EMPTY
7048: LIST
7049: LIST
7050: LIST
7051: PPUSH
7052: CALL_OW 72
7056: ST_TO_ADDR
7057: GO 7191
7059: LD_INT 3
7061: DOUBLE
7062: EQUAL
7063: IFTRUE 7067
7065: GO 7119
7067: POP
// buildings := UnitFilter ( mc_buildings [ base ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ) ; 4 :
7068: LD_ADDR_VAR 0 6
7072: PUSH
7073: LD_EXP 10
7077: PUSH
7078: LD_VAR 0 1
7082: ARRAY
7083: PPUSH
7084: LD_INT 2
7086: PUSH
7087: LD_INT 30
7089: PUSH
7090: LD_INT 2
7092: PUSH
7093: EMPTY
7094: LIST
7095: LIST
7096: PUSH
7097: LD_INT 30
7099: PUSH
7100: LD_INT 3
7102: PUSH
7103: EMPTY
7104: LIST
7105: LIST
7106: PUSH
7107: EMPTY
7108: LIST
7109: LIST
7110: LIST
7111: PPUSH
7112: CALL_OW 72
7116: ST_TO_ADDR
7117: GO 7191
7119: LD_INT 4
7121: DOUBLE
7122: EQUAL
7123: IFTRUE 7127
7125: GO 7190
7127: POP
// buildings := UnitFilter ( mc_buildings [ base ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ; end ;
7128: LD_ADDR_VAR 0 6
7132: PUSH
7133: LD_EXP 10
7137: PUSH
7138: LD_VAR 0 1
7142: ARRAY
7143: PPUSH
7144: LD_INT 2
7146: PUSH
7147: LD_INT 30
7149: PUSH
7150: LD_INT 6
7152: PUSH
7153: EMPTY
7154: LIST
7155: LIST
7156: PUSH
7157: LD_INT 30
7159: PUSH
7160: LD_INT 7
7162: PUSH
7163: EMPTY
7164: LIST
7165: LIST
7166: PUSH
7167: LD_INT 30
7169: PUSH
7170: LD_INT 8
7172: PUSH
7173: EMPTY
7174: LIST
7175: LIST
7176: PUSH
7177: EMPTY
7178: LIST
7179: LIST
7180: LIST
7181: LIST
7182: PPUSH
7183: CALL_OW 72
7187: ST_TO_ADDR
7188: GO 7191
7190: POP
// if not buildings then
7191: LD_VAR 0 6
7195: NOT
7196: IFFALSE 7200
// exit ;
7198: GO 7391
// for i := 1 to units do
7200: LD_ADDR_VAR 0 5
7204: PUSH
7205: DOUBLE
7206: LD_INT 1
7208: DEC
7209: ST_TO_ADDR
7210: LD_VAR 0 3
7214: PUSH
7215: FOR_TO
7216: IFFALSE 7389
// begin if GetClass ( units [ i ] ) = class then
7218: LD_VAR 0 3
7222: PUSH
7223: LD_VAR 0 5
7227: ARRAY
7228: PPUSH
7229: CALL_OW 257
7233: PUSH
7234: LD_VAR 0 2
7238: EQUAL
7239: IFFALSE 7243
// continue ;
7241: GO 7215
// SetTag ( units [ i ] , mct_change_class ) ;
7243: LD_VAR 0 3
7247: PUSH
7248: LD_VAR 0 5
7252: ARRAY
7253: PPUSH
7254: LD_EXP 32
7258: PPUSH
7259: CALL_OW 109
// if buildings > i div 6 then
7263: LD_VAR 0 6
7267: PUSH
7268: LD_VAR 0 5
7272: PUSH
7273: LD_INT 6
7275: DIV
7276: GREATER
7277: IFFALSE 7301
// b := buildings [ i div 6 ] else
7279: LD_ADDR_VAR 0 7
7283: PUSH
7284: LD_VAR 0 6
7288: PUSH
7289: LD_VAR 0 5
7293: PUSH
7294: LD_INT 6
7296: DIV
7297: ARRAY
7298: ST_TO_ADDR
7299: GO 7315
// b := buildings [ 1 ] ;
7301: LD_ADDR_VAR 0 7
7305: PUSH
7306: LD_VAR 0 6
7310: PUSH
7311: LD_INT 1
7313: ARRAY
7314: ST_TO_ADDR
// if IsInUnit ( units [ i ] ) then
7315: LD_VAR 0 3
7319: PUSH
7320: LD_VAR 0 5
7324: ARRAY
7325: PPUSH
7326: CALL_OW 310
7330: IFFALSE 7347
// ComExit ( units [ i ] ) ;
7332: LD_VAR 0 3
7336: PUSH
7337: LD_VAR 0 5
7341: ARRAY
7342: PPUSH
7343: CALL 44808 0 1
// AddComEnterUnit ( units [ i ] , b ) ;
7347: LD_VAR 0 3
7351: PUSH
7352: LD_VAR 0 5
7356: ARRAY
7357: PPUSH
7358: LD_VAR 0 7
7362: PPUSH
7363: CALL_OW 180
// AddComChangeProfession ( units [ i ] , class ) ;
7367: LD_VAR 0 3
7371: PUSH
7372: LD_VAR 0 5
7376: ARRAY
7377: PPUSH
7378: LD_VAR 0 2
7382: PPUSH
7383: CALL_OW 183
// end ;
7387: GO 7215
7389: POP
7390: POP
// end ;
7391: LD_VAR 0 4
7395: RET
// export function MC_GetByClass ( base , class , tag ) ; var i ; begin
7396: LD_INT 0
7398: PPUSH
7399: PPUSH
// result := UnitFilter ( mc_people [ base ] , [ f_class , class ] ) ;
7400: LD_ADDR_VAR 0 4
7404: PUSH
7405: LD_EXP 9
7409: PUSH
7410: LD_VAR 0 1
7414: ARRAY
7415: PPUSH
7416: LD_INT 25
7418: PUSH
7419: LD_VAR 0 2
7423: PUSH
7424: EMPTY
7425: LIST
7426: LIST
7427: PPUSH
7428: CALL_OW 72
7432: ST_TO_ADDR
// if tag > - 1 then
7433: LD_VAR 0 3
7437: PUSH
7438: LD_INT 1
7440: NEG
7441: GREATER
7442: IFFALSE 7494
// for i in result do
7444: LD_ADDR_VAR 0 5
7448: PUSH
7449: LD_VAR 0 4
7453: PUSH
7454: FOR_IN
7455: IFFALSE 7492
// if GetTag ( i ) <> tag then
7457: LD_VAR 0 5
7461: PPUSH
7462: CALL_OW 110
7466: PUSH
7467: LD_VAR 0 3
7471: NONEQUAL
7472: IFFALSE 7490
// result := result diff i ;
7474: LD_ADDR_VAR 0 4
7478: PUSH
7479: LD_VAR 0 4
7483: PUSH
7484: LD_VAR 0 5
7488: DIFF
7489: ST_TO_ADDR
7490: GO 7454
7492: POP
7493: POP
// end ;
7494: LD_VAR 0 4
7498: RET
// export function MC_GetOneByClass ( base , class , tag ) ; begin
7499: LD_INT 0
7501: PPUSH
// result := MC_GetByClass ( base , class , tag ) ;
7502: LD_ADDR_VAR 0 4
7506: PUSH
7507: LD_VAR 0 1
7511: PPUSH
7512: LD_VAR 0 2
7516: PPUSH
7517: LD_VAR 0 3
7521: PPUSH
7522: CALL 7396 0 3
7526: ST_TO_ADDR
// if result then
7527: LD_VAR 0 4
7531: IFFALSE 7547
// result := result [ 1 ] ;
7533: LD_ADDR_VAR 0 4
7537: PUSH
7538: LD_VAR 0 4
7542: PUSH
7543: LD_INT 1
7545: ARRAY
7546: ST_TO_ADDR
// end ;
7547: LD_VAR 0 4
7551: RET
// export function MC_GetBuilding ( base , btype ) ; begin
7552: LD_INT 0
7554: PPUSH
// result := UnitFilter ( mc_buildings [ base ] , [ f_btype , btype ] ) ;
7555: LD_ADDR_VAR 0 3
7559: PUSH
7560: LD_EXP 10
7564: PUSH
7565: LD_VAR 0 1
7569: ARRAY
7570: PPUSH
7571: LD_INT 30
7573: PUSH
7574: LD_VAR 0 2
7578: PUSH
7579: EMPTY
7580: LIST
7581: LIST
7582: PPUSH
7583: CALL_OW 72
7587: ST_TO_ADDR
// end ;
7588: LD_VAR 0 3
7592: RET
// export function MC_GetDepot ( base ) ; begin
7593: LD_INT 0
7595: PPUSH
// result := UnitFilter ( mc_buildings [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
7596: LD_ADDR_VAR 0 2
7600: PUSH
7601: LD_EXP 10
7605: PUSH
7606: LD_VAR 0 1
7610: ARRAY
7611: PPUSH
7612: LD_INT 2
7614: PUSH
7615: LD_INT 30
7617: PUSH
7618: LD_INT 0
7620: PUSH
7621: EMPTY
7622: LIST
7623: LIST
7624: PUSH
7625: LD_INT 30
7627: PUSH
7628: LD_INT 1
7630: PUSH
7631: EMPTY
7632: LIST
7633: LIST
7634: PUSH
7635: EMPTY
7636: LIST
7637: LIST
7638: LIST
7639: PPUSH
7640: CALL_OW 72
7644: ST_TO_ADDR
// end ;
7645: LD_VAR 0 2
7649: RET
// export function MC_GetVehicles ( base , onlyCombat ) ; begin
7650: LD_INT 0
7652: PPUSH
// result := mc_vehicles [ base ] ;
7653: LD_ADDR_VAR 0 3
7657: PUSH
7658: LD_EXP 11
7662: PUSH
7663: LD_VAR 0 1
7667: ARRAY
7668: ST_TO_ADDR
// if onlyCombat then
7669: LD_VAR 0 2
7673: IFFALSE 7851
// result := result diff UnitFilter ( result , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , us_crane ] , [ f_weapon , ru_crane ] , [ f_weapon , ar_crane ] , [ f_weapon , us_bulldozer ] , [ f_weapon , ru_bulldozer ] , [ f_weapon , ru_radar ] , [ f_weapon , ar_control_tower ] , [ f_weapon , ru_siberium_rocket ] , [ f_weapon , us_siberium_rocket ] ] ) ;
7675: LD_ADDR_VAR 0 3
7679: PUSH
7680: LD_VAR 0 3
7684: PUSH
7685: LD_VAR 0 3
7689: PPUSH
7690: LD_INT 2
7692: PUSH
7693: LD_INT 34
7695: PUSH
7696: LD_INT 12
7698: PUSH
7699: EMPTY
7700: LIST
7701: LIST
7702: PUSH
7703: LD_INT 34
7705: PUSH
7706: LD_INT 51
7708: PUSH
7709: EMPTY
7710: LIST
7711: LIST
7712: PUSH
7713: LD_INT 34
7715: PUSH
7716: LD_EXP 40
7720: PUSH
7721: EMPTY
7722: LIST
7723: LIST
7724: PUSH
7725: LD_INT 34
7727: PUSH
7728: LD_INT 32
7730: PUSH
7731: EMPTY
7732: LIST
7733: LIST
7734: PUSH
7735: LD_INT 34
7737: PUSH
7738: LD_INT 13
7740: PUSH
7741: EMPTY
7742: LIST
7743: LIST
7744: PUSH
7745: LD_INT 34
7747: PUSH
7748: LD_INT 52
7750: PUSH
7751: EMPTY
7752: LIST
7753: LIST
7754: PUSH
7755: LD_INT 34
7757: PUSH
7758: LD_EXP 45
7762: PUSH
7763: EMPTY
7764: LIST
7765: LIST
7766: PUSH
7767: LD_INT 34
7769: PUSH
7770: LD_INT 14
7772: PUSH
7773: EMPTY
7774: LIST
7775: LIST
7776: PUSH
7777: LD_INT 34
7779: PUSH
7780: LD_INT 53
7782: PUSH
7783: EMPTY
7784: LIST
7785: LIST
7786: PUSH
7787: LD_INT 34
7789: PUSH
7790: LD_EXP 39
7794: PUSH
7795: EMPTY
7796: LIST
7797: LIST
7798: PUSH
7799: LD_INT 34
7801: PUSH
7802: LD_INT 31
7804: PUSH
7805: EMPTY
7806: LIST
7807: LIST
7808: PUSH
7809: LD_INT 34
7811: PUSH
7812: LD_INT 48
7814: PUSH
7815: EMPTY
7816: LIST
7817: LIST
7818: PUSH
7819: LD_INT 34
7821: PUSH
7822: LD_INT 8
7824: PUSH
7825: EMPTY
7826: LIST
7827: LIST
7828: PUSH
7829: EMPTY
7830: LIST
7831: LIST
7832: LIST
7833: LIST
7834: LIST
7835: LIST
7836: LIST
7837: LIST
7838: LIST
7839: LIST
7840: LIST
7841: LIST
7842: LIST
7843: LIST
7844: PPUSH
7845: CALL_OW 72
7849: DIFF
7850: ST_TO_ADDR
// end ;
7851: LD_VAR 0 3
7855: RET
// export function MC_Retreat ( base , unit ) ; var depot ; begin
7856: LD_INT 0
7858: PPUSH
7859: PPUSH
// if not base or not unit then
7860: LD_VAR 0 1
7864: NOT
7865: PUSH
7866: LD_VAR 0 2
7870: NOT
7871: OR
7872: IFFALSE 7876
// exit ;
7874: GO 7943
// depot := NearestUnitToUnit ( MC_GetDepot ( base ) , unit ) ;
7876: LD_ADDR_VAR 0 4
7880: PUSH
7881: LD_VAR 0 1
7885: PPUSH
7886: CALL 7593 0 1
7890: PPUSH
7891: LD_VAR 0 2
7895: PPUSH
7896: CALL_OW 74
7900: ST_TO_ADDR
// if depot then
7901: LD_VAR 0 4
7905: IFFALSE 7923
// ComStandNearbyBuilding ( unit , depot ) else
7907: LD_VAR 0 2
7911: PPUSH
7912: LD_VAR 0 4
7916: PPUSH
7917: CALL 9671 0 2
7921: GO 7943
// ComMoveToArea ( unit , mc_scan_area [ base ] ) ;
7923: LD_VAR 0 2
7927: PPUSH
7928: LD_EXP 29
7932: PUSH
7933: LD_VAR 0 1
7937: ARRAY
7938: PPUSH
7939: CALL_OW 113
// end ; end_of_file
7943: LD_VAR 0 3
7947: RET
// export mctm_collect_crates , mctm_build , mctm_ ; export function MCTM_InitTaskManager ( ) ; begin
7948: LD_INT 0
7950: PPUSH
// mctm_collect_crates := 1 ;
7951: LD_ADDR_EXP 36
7955: PUSH
7956: LD_INT 1
7958: ST_TO_ADDR
// mctm_build := 2 ;
7959: LD_ADDR_EXP 37
7963: PUSH
7964: LD_INT 2
7966: ST_TO_ADDR
// end ;
7967: LD_VAR 0 1
7971: RET
// export function MCTM_HasActiveTask ( base , task ) ; begin
7972: LD_INT 0
7974: PPUSH
// result := task in mc_task [ base ] ;
7975: LD_ADDR_VAR 0 3
7979: PUSH
7980: LD_VAR 0 2
7984: PUSH
7985: LD_EXP 8
7989: PUSH
7990: LD_VAR 0 1
7994: ARRAY
7995: IN
7996: ST_TO_ADDR
// end ;
7997: LD_VAR 0 3
8001: RET
// export function MCTM_SetActiveTask ( base , task ) ; begin
8002: LD_INT 0
8004: PPUSH
// mc_task := Replace ( mc_task , base , Replace ( mc_task [ base ] , mc_task [ base ] + 1 , task ) ) ;
8005: LD_ADDR_EXP 8
8009: PUSH
8010: LD_EXP 8
8014: PPUSH
8015: LD_VAR 0 1
8019: PPUSH
8020: LD_EXP 8
8024: PUSH
8025: LD_VAR 0 1
8029: ARRAY
8030: PPUSH
8031: LD_EXP 8
8035: PUSH
8036: LD_VAR 0 1
8040: ARRAY
8041: PUSH
8042: LD_INT 1
8044: PLUS
8045: PPUSH
8046: LD_VAR 0 2
8050: PPUSH
8051: CALL_OW 1
8055: PPUSH
8056: CALL_OW 1
8060: ST_TO_ADDR
// end ;
8061: LD_VAR 0 3
8065: RET
// export function MCTM_DeleteActiveTask ( base , task ) ; begin
8066: LD_INT 0
8068: PPUSH
// mc_task := Replace ( mc_task , base , mc_task [ base ] diff task ) ;
8069: LD_ADDR_EXP 8
8073: PUSH
8074: LD_EXP 8
8078: PPUSH
8079: LD_VAR 0 1
8083: PPUSH
8084: LD_EXP 8
8088: PUSH
8089: LD_VAR 0 1
8093: ARRAY
8094: PUSH
8095: LD_VAR 0 2
8099: DIFF
8100: PPUSH
8101: CALL_OW 1
8105: ST_TO_ADDR
// end ; end_of_file
8106: LD_VAR 0 3
8110: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
8111: LD_INT 0
8113: PPUSH
8114: PPUSH
// if exist_mode then
8115: LD_VAR 0 2
8119: IFFALSE 8144
// unit := CreateCharacter ( prefix & ident ) else
8121: LD_ADDR_VAR 0 5
8125: PUSH
8126: LD_VAR 0 3
8130: PUSH
8131: LD_VAR 0 1
8135: STR
8136: PPUSH
8137: CALL_OW 34
8141: ST_TO_ADDR
8142: GO 8159
// unit := NewCharacter ( ident ) ;
8144: LD_ADDR_VAR 0 5
8148: PUSH
8149: LD_VAR 0 1
8153: PPUSH
8154: CALL_OW 25
8158: ST_TO_ADDR
// result := unit ;
8159: LD_ADDR_VAR 0 4
8163: PUSH
8164: LD_VAR 0 5
8168: ST_TO_ADDR
// end ;
8169: LD_VAR 0 4
8173: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
8174: LD_INT 0
8176: PPUSH
8177: PPUSH
// if not side or not nation then
8178: LD_VAR 0 1
8182: NOT
8183: PUSH
8184: LD_VAR 0 2
8188: NOT
8189: OR
8190: IFFALSE 8194
// exit ;
8192: GO 8958
// case nation of nation_american :
8194: LD_VAR 0 2
8198: PUSH
8199: LD_INT 1
8201: DOUBLE
8202: EQUAL
8203: IFTRUE 8207
8205: GO 8421
8207: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
8208: LD_ADDR_VAR 0 4
8212: PUSH
8213: LD_INT 35
8215: PUSH
8216: LD_INT 45
8218: PUSH
8219: LD_INT 46
8221: PUSH
8222: LD_INT 47
8224: PUSH
8225: LD_INT 82
8227: PUSH
8228: LD_INT 83
8230: PUSH
8231: LD_INT 84
8233: PUSH
8234: LD_INT 85
8236: PUSH
8237: LD_INT 86
8239: PUSH
8240: LD_INT 1
8242: PUSH
8243: LD_INT 2
8245: PUSH
8246: LD_INT 6
8248: PUSH
8249: LD_INT 15
8251: PUSH
8252: LD_INT 16
8254: PUSH
8255: LD_INT 7
8257: PUSH
8258: LD_INT 12
8260: PUSH
8261: LD_INT 13
8263: PUSH
8264: LD_INT 10
8266: PUSH
8267: LD_INT 14
8269: PUSH
8270: LD_INT 20
8272: PUSH
8273: LD_INT 21
8275: PUSH
8276: LD_INT 22
8278: PUSH
8279: LD_INT 25
8281: PUSH
8282: LD_INT 32
8284: PUSH
8285: LD_INT 27
8287: PUSH
8288: LD_INT 36
8290: PUSH
8291: LD_INT 69
8293: PUSH
8294: LD_INT 39
8296: PUSH
8297: LD_INT 34
8299: PUSH
8300: LD_INT 40
8302: PUSH
8303: LD_INT 48
8305: PUSH
8306: LD_INT 49
8308: PUSH
8309: LD_INT 50
8311: PUSH
8312: LD_INT 51
8314: PUSH
8315: LD_INT 52
8317: PUSH
8318: LD_INT 53
8320: PUSH
8321: LD_INT 54
8323: PUSH
8324: LD_INT 55
8326: PUSH
8327: LD_INT 56
8329: PUSH
8330: LD_INT 57
8332: PUSH
8333: LD_INT 58
8335: PUSH
8336: LD_INT 59
8338: PUSH
8339: LD_INT 60
8341: PUSH
8342: LD_INT 61
8344: PUSH
8345: LD_INT 62
8347: PUSH
8348: LD_INT 80
8350: PUSH
8351: LD_INT 82
8353: PUSH
8354: LD_INT 83
8356: PUSH
8357: LD_INT 84
8359: PUSH
8360: LD_INT 85
8362: PUSH
8363: LD_INT 86
8365: PUSH
8366: EMPTY
8367: LIST
8368: LIST
8369: LIST
8370: LIST
8371: LIST
8372: LIST
8373: LIST
8374: LIST
8375: LIST
8376: LIST
8377: LIST
8378: LIST
8379: LIST
8380: LIST
8381: LIST
8382: LIST
8383: LIST
8384: LIST
8385: LIST
8386: LIST
8387: LIST
8388: LIST
8389: LIST
8390: LIST
8391: LIST
8392: LIST
8393: LIST
8394: LIST
8395: LIST
8396: LIST
8397: LIST
8398: LIST
8399: LIST
8400: LIST
8401: LIST
8402: LIST
8403: LIST
8404: LIST
8405: LIST
8406: LIST
8407: LIST
8408: LIST
8409: LIST
8410: LIST
8411: LIST
8412: LIST
8413: LIST
8414: LIST
8415: LIST
8416: LIST
8417: LIST
8418: ST_TO_ADDR
8419: GO 8882
8421: LD_INT 2
8423: DOUBLE
8424: EQUAL
8425: IFTRUE 8429
8427: GO 8651
8429: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
8430: LD_ADDR_VAR 0 4
8434: PUSH
8435: LD_INT 35
8437: PUSH
8438: LD_INT 45
8440: PUSH
8441: LD_INT 46
8443: PUSH
8444: LD_INT 47
8446: PUSH
8447: LD_INT 82
8449: PUSH
8450: LD_INT 83
8452: PUSH
8453: LD_INT 84
8455: PUSH
8456: LD_INT 85
8458: PUSH
8459: LD_INT 87
8461: PUSH
8462: LD_INT 70
8464: PUSH
8465: LD_INT 1
8467: PUSH
8468: LD_INT 11
8470: PUSH
8471: LD_INT 3
8473: PUSH
8474: LD_INT 4
8476: PUSH
8477: LD_INT 5
8479: PUSH
8480: LD_INT 6
8482: PUSH
8483: LD_INT 15
8485: PUSH
8486: LD_INT 18
8488: PUSH
8489: LD_INT 7
8491: PUSH
8492: LD_INT 17
8494: PUSH
8495: LD_INT 8
8497: PUSH
8498: LD_INT 20
8500: PUSH
8501: LD_INT 21
8503: PUSH
8504: LD_INT 22
8506: PUSH
8507: LD_INT 72
8509: PUSH
8510: LD_INT 26
8512: PUSH
8513: LD_INT 69
8515: PUSH
8516: LD_INT 39
8518: PUSH
8519: LD_INT 40
8521: PUSH
8522: LD_INT 41
8524: PUSH
8525: LD_INT 42
8527: PUSH
8528: LD_INT 43
8530: PUSH
8531: LD_INT 48
8533: PUSH
8534: LD_INT 49
8536: PUSH
8537: LD_INT 50
8539: PUSH
8540: LD_INT 51
8542: PUSH
8543: LD_INT 52
8545: PUSH
8546: LD_INT 53
8548: PUSH
8549: LD_INT 54
8551: PUSH
8552: LD_INT 55
8554: PUSH
8555: LD_INT 56
8557: PUSH
8558: LD_INT 60
8560: PUSH
8561: LD_INT 61
8563: PUSH
8564: LD_INT 62
8566: PUSH
8567: LD_INT 66
8569: PUSH
8570: LD_INT 67
8572: PUSH
8573: LD_INT 68
8575: PUSH
8576: LD_INT 81
8578: PUSH
8579: LD_INT 82
8581: PUSH
8582: LD_INT 83
8584: PUSH
8585: LD_INT 84
8587: PUSH
8588: LD_INT 85
8590: PUSH
8591: LD_INT 87
8593: PUSH
8594: EMPTY
8595: LIST
8596: LIST
8597: LIST
8598: LIST
8599: LIST
8600: LIST
8601: LIST
8602: LIST
8603: LIST
8604: LIST
8605: LIST
8606: LIST
8607: LIST
8608: LIST
8609: LIST
8610: LIST
8611: LIST
8612: LIST
8613: LIST
8614: LIST
8615: LIST
8616: LIST
8617: LIST
8618: LIST
8619: LIST
8620: LIST
8621: LIST
8622: LIST
8623: LIST
8624: LIST
8625: LIST
8626: LIST
8627: LIST
8628: LIST
8629: LIST
8630: LIST
8631: LIST
8632: LIST
8633: LIST
8634: LIST
8635: LIST
8636: LIST
8637: LIST
8638: LIST
8639: LIST
8640: LIST
8641: LIST
8642: LIST
8643: LIST
8644: LIST
8645: LIST
8646: LIST
8647: LIST
8648: ST_TO_ADDR
8649: GO 8882
8651: LD_INT 3
8653: DOUBLE
8654: EQUAL
8655: IFTRUE 8659
8657: GO 8881
8659: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
8660: LD_ADDR_VAR 0 4
8664: PUSH
8665: LD_INT 46
8667: PUSH
8668: LD_INT 47
8670: PUSH
8671: LD_INT 1
8673: PUSH
8674: LD_INT 2
8676: PUSH
8677: LD_INT 82
8679: PUSH
8680: LD_INT 83
8682: PUSH
8683: LD_INT 84
8685: PUSH
8686: LD_INT 85
8688: PUSH
8689: LD_INT 86
8691: PUSH
8692: LD_INT 11
8694: PUSH
8695: LD_INT 9
8697: PUSH
8698: LD_INT 20
8700: PUSH
8701: LD_INT 19
8703: PUSH
8704: LD_INT 21
8706: PUSH
8707: LD_INT 24
8709: PUSH
8710: LD_INT 22
8712: PUSH
8713: LD_INT 25
8715: PUSH
8716: LD_INT 28
8718: PUSH
8719: LD_INT 29
8721: PUSH
8722: LD_INT 30
8724: PUSH
8725: LD_INT 31
8727: PUSH
8728: LD_INT 37
8730: PUSH
8731: LD_INT 38
8733: PUSH
8734: LD_INT 32
8736: PUSH
8737: LD_INT 27
8739: PUSH
8740: LD_INT 33
8742: PUSH
8743: LD_INT 69
8745: PUSH
8746: LD_INT 39
8748: PUSH
8749: LD_INT 34
8751: PUSH
8752: LD_INT 40
8754: PUSH
8755: LD_INT 71
8757: PUSH
8758: LD_INT 23
8760: PUSH
8761: LD_INT 44
8763: PUSH
8764: LD_INT 48
8766: PUSH
8767: LD_INT 49
8769: PUSH
8770: LD_INT 50
8772: PUSH
8773: LD_INT 51
8775: PUSH
8776: LD_INT 52
8778: PUSH
8779: LD_INT 53
8781: PUSH
8782: LD_INT 54
8784: PUSH
8785: LD_INT 55
8787: PUSH
8788: LD_INT 56
8790: PUSH
8791: LD_INT 57
8793: PUSH
8794: LD_INT 58
8796: PUSH
8797: LD_INT 59
8799: PUSH
8800: LD_INT 63
8802: PUSH
8803: LD_INT 64
8805: PUSH
8806: LD_INT 65
8808: PUSH
8809: LD_INT 82
8811: PUSH
8812: LD_INT 83
8814: PUSH
8815: LD_INT 84
8817: PUSH
8818: LD_INT 85
8820: PUSH
8821: LD_INT 86
8823: PUSH
8824: EMPTY
8825: LIST
8826: LIST
8827: LIST
8828: LIST
8829: LIST
8830: LIST
8831: LIST
8832: LIST
8833: LIST
8834: LIST
8835: LIST
8836: LIST
8837: LIST
8838: LIST
8839: LIST
8840: LIST
8841: LIST
8842: LIST
8843: LIST
8844: LIST
8845: LIST
8846: LIST
8847: LIST
8848: LIST
8849: LIST
8850: LIST
8851: LIST
8852: LIST
8853: LIST
8854: LIST
8855: LIST
8856: LIST
8857: LIST
8858: LIST
8859: LIST
8860: LIST
8861: LIST
8862: LIST
8863: LIST
8864: LIST
8865: LIST
8866: LIST
8867: LIST
8868: LIST
8869: LIST
8870: LIST
8871: LIST
8872: LIST
8873: LIST
8874: LIST
8875: LIST
8876: LIST
8877: LIST
8878: ST_TO_ADDR
8879: GO 8882
8881: POP
// if state > - 1 and state < 3 then
8882: LD_VAR 0 3
8886: PUSH
8887: LD_INT 1
8889: NEG
8890: GREATER
8891: PUSH
8892: LD_VAR 0 3
8896: PUSH
8897: LD_INT 3
8899: LESS
8900: AND
8901: IFFALSE 8958
// for i in result do
8903: LD_ADDR_VAR 0 5
8907: PUSH
8908: LD_VAR 0 4
8912: PUSH
8913: FOR_IN
8914: IFFALSE 8956
// if GetTech ( i , side ) <> state then
8916: LD_VAR 0 5
8920: PPUSH
8921: LD_VAR 0 1
8925: PPUSH
8926: CALL_OW 321
8930: PUSH
8931: LD_VAR 0 3
8935: NONEQUAL
8936: IFFALSE 8954
// result := result diff i ;
8938: LD_ADDR_VAR 0 4
8942: PUSH
8943: LD_VAR 0 4
8947: PUSH
8948: LD_VAR 0 5
8952: DIFF
8953: ST_TO_ADDR
8954: GO 8913
8956: POP
8957: POP
// end ;
8958: LD_VAR 0 4
8962: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
8963: LD_INT 0
8965: PPUSH
8966: PPUSH
8967: PPUSH
// result := true ;
8968: LD_ADDR_VAR 0 3
8972: PUSH
8973: LD_INT 1
8975: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
8976: LD_ADDR_VAR 0 5
8980: PUSH
8981: LD_VAR 0 2
8985: PPUSH
8986: CALL_OW 480
8990: ST_TO_ADDR
// if not tmp then
8991: LD_VAR 0 5
8995: NOT
8996: IFFALSE 9000
// exit ;
8998: GO 9049
// for i in tmp do
9000: LD_ADDR_VAR 0 4
9004: PUSH
9005: LD_VAR 0 5
9009: PUSH
9010: FOR_IN
9011: IFFALSE 9047
// if GetTech ( i , side ) <> state_researched then
9013: LD_VAR 0 4
9017: PPUSH
9018: LD_VAR 0 1
9022: PPUSH
9023: CALL_OW 321
9027: PUSH
9028: LD_INT 2
9030: NONEQUAL
9031: IFFALSE 9045
// begin result := false ;
9033: LD_ADDR_VAR 0 3
9037: PUSH
9038: LD_INT 0
9040: ST_TO_ADDR
// exit ;
9041: POP
9042: POP
9043: GO 9049
// end ;
9045: GO 9010
9047: POP
9048: POP
// end ;
9049: LD_VAR 0 3
9053: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
9054: LD_INT 0
9056: PPUSH
9057: PPUSH
9058: PPUSH
9059: PPUSH
9060: PPUSH
9061: PPUSH
9062: PPUSH
9063: PPUSH
9064: PPUSH
9065: PPUSH
9066: PPUSH
9067: PPUSH
9068: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
9069: LD_VAR 0 1
9073: NOT
9074: PUSH
9075: LD_VAR 0 1
9079: PPUSH
9080: CALL_OW 257
9084: PUSH
9085: LD_INT 9
9087: NONEQUAL
9088: OR
9089: IFFALSE 9093
// exit ;
9091: GO 9666
// side := GetSide ( unit ) ;
9093: LD_ADDR_VAR 0 9
9097: PUSH
9098: LD_VAR 0 1
9102: PPUSH
9103: CALL_OW 255
9107: ST_TO_ADDR
// tech_space := tech_spacanom ;
9108: LD_ADDR_VAR 0 12
9112: PUSH
9113: LD_INT 29
9115: ST_TO_ADDR
// tech_time := tech_taurad ;
9116: LD_ADDR_VAR 0 13
9120: PUSH
9121: LD_INT 28
9123: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
9124: LD_ADDR_VAR 0 11
9128: PUSH
9129: LD_VAR 0 1
9133: PPUSH
9134: CALL_OW 310
9138: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
9139: LD_VAR 0 11
9143: PPUSH
9144: CALL_OW 247
9148: PUSH
9149: LD_INT 2
9151: EQUAL
9152: IFFALSE 9156
// exit ;
9154: GO 9666
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
9156: LD_ADDR_VAR 0 8
9160: PUSH
9161: LD_INT 81
9163: PUSH
9164: LD_VAR 0 9
9168: PUSH
9169: EMPTY
9170: LIST
9171: LIST
9172: PUSH
9173: LD_INT 3
9175: PUSH
9176: LD_INT 21
9178: PUSH
9179: LD_INT 3
9181: PUSH
9182: EMPTY
9183: LIST
9184: LIST
9185: PUSH
9186: EMPTY
9187: LIST
9188: LIST
9189: PUSH
9190: EMPTY
9191: LIST
9192: LIST
9193: PPUSH
9194: CALL_OW 69
9198: ST_TO_ADDR
// if not tmp then
9199: LD_VAR 0 8
9203: NOT
9204: IFFALSE 9208
// exit ;
9206: GO 9666
// if in_unit then
9208: LD_VAR 0 11
9212: IFFALSE 9236
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
9214: LD_ADDR_VAR 0 10
9218: PUSH
9219: LD_VAR 0 8
9223: PPUSH
9224: LD_VAR 0 11
9228: PPUSH
9229: CALL_OW 74
9233: ST_TO_ADDR
9234: GO 9256
// enemy := NearestUnitToUnit ( tmp , unit ) ;
9236: LD_ADDR_VAR 0 10
9240: PUSH
9241: LD_VAR 0 8
9245: PPUSH
9246: LD_VAR 0 1
9250: PPUSH
9251: CALL_OW 74
9255: ST_TO_ADDR
// if not enemy then
9256: LD_VAR 0 10
9260: NOT
9261: IFFALSE 9265
// exit ;
9263: GO 9666
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
9265: LD_VAR 0 11
9269: PUSH
9270: LD_VAR 0 11
9274: PPUSH
9275: LD_VAR 0 10
9279: PPUSH
9280: CALL_OW 296
9284: PUSH
9285: LD_INT 13
9287: GREATER
9288: AND
9289: PUSH
9290: LD_VAR 0 1
9294: PPUSH
9295: LD_VAR 0 10
9299: PPUSH
9300: CALL_OW 296
9304: PUSH
9305: LD_INT 12
9307: GREATER
9308: OR
9309: IFFALSE 9313
// exit ;
9311: GO 9666
// missile := [ 1 ] ;
9313: LD_ADDR_VAR 0 14
9317: PUSH
9318: LD_INT 1
9320: PUSH
9321: EMPTY
9322: LIST
9323: ST_TO_ADDR
// if Researched ( side , tech_space ) then
9324: LD_VAR 0 9
9328: PPUSH
9329: LD_VAR 0 12
9333: PPUSH
9334: CALL_OW 325
9338: IFFALSE 9367
// missile := Insert ( missile , missile + 1 , 2 ) ;
9340: LD_ADDR_VAR 0 14
9344: PUSH
9345: LD_VAR 0 14
9349: PPUSH
9350: LD_VAR 0 14
9354: PUSH
9355: LD_INT 1
9357: PLUS
9358: PPUSH
9359: LD_INT 2
9361: PPUSH
9362: CALL_OW 2
9366: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
9367: LD_VAR 0 9
9371: PPUSH
9372: LD_VAR 0 13
9376: PPUSH
9377: CALL_OW 325
9381: PUSH
9382: LD_VAR 0 10
9386: PPUSH
9387: CALL_OW 255
9391: PPUSH
9392: LD_VAR 0 13
9396: PPUSH
9397: CALL_OW 325
9401: NOT
9402: AND
9403: IFFALSE 9432
// missile := Insert ( missile , missile + 1 , 3 ) ;
9405: LD_ADDR_VAR 0 14
9409: PUSH
9410: LD_VAR 0 14
9414: PPUSH
9415: LD_VAR 0 14
9419: PUSH
9420: LD_INT 1
9422: PLUS
9423: PPUSH
9424: LD_INT 3
9426: PPUSH
9427: CALL_OW 2
9431: ST_TO_ADDR
// if missile < 2 then
9432: LD_VAR 0 14
9436: PUSH
9437: LD_INT 2
9439: LESS
9440: IFFALSE 9444
// exit ;
9442: GO 9666
// x := GetX ( enemy ) ;
9444: LD_ADDR_VAR 0 4
9448: PUSH
9449: LD_VAR 0 10
9453: PPUSH
9454: CALL_OW 250
9458: ST_TO_ADDR
// y := GetY ( enemy ) ;
9459: LD_ADDR_VAR 0 5
9463: PUSH
9464: LD_VAR 0 10
9468: PPUSH
9469: CALL_OW 251
9473: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
9474: LD_ADDR_VAR 0 6
9478: PUSH
9479: LD_VAR 0 4
9483: PUSH
9484: LD_INT 1
9486: NEG
9487: PPUSH
9488: LD_INT 1
9490: PPUSH
9491: CALL_OW 12
9495: PLUS
9496: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
9497: LD_ADDR_VAR 0 7
9501: PUSH
9502: LD_VAR 0 5
9506: PUSH
9507: LD_INT 1
9509: NEG
9510: PPUSH
9511: LD_INT 1
9513: PPUSH
9514: CALL_OW 12
9518: PLUS
9519: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
9520: LD_VAR 0 6
9524: PPUSH
9525: LD_VAR 0 7
9529: PPUSH
9530: CALL_OW 488
9534: NOT
9535: IFFALSE 9557
// begin _x := x ;
9537: LD_ADDR_VAR 0 6
9541: PUSH
9542: LD_VAR 0 4
9546: ST_TO_ADDR
// _y := y ;
9547: LD_ADDR_VAR 0 7
9551: PUSH
9552: LD_VAR 0 5
9556: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
9557: LD_ADDR_VAR 0 3
9561: PUSH
9562: LD_INT 1
9564: PPUSH
9565: LD_VAR 0 14
9569: PPUSH
9570: CALL_OW 12
9574: ST_TO_ADDR
// case i of 1 :
9575: LD_VAR 0 3
9579: PUSH
9580: LD_INT 1
9582: DOUBLE
9583: EQUAL
9584: IFTRUE 9588
9586: GO 9605
9588: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
9589: LD_VAR 0 1
9593: PPUSH
9594: LD_VAR 0 10
9598: PPUSH
9599: CALL_OW 115
9603: GO 9666
9605: LD_INT 2
9607: DOUBLE
9608: EQUAL
9609: IFTRUE 9613
9611: GO 9635
9613: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
9614: LD_VAR 0 1
9618: PPUSH
9619: LD_VAR 0 6
9623: PPUSH
9624: LD_VAR 0 7
9628: PPUSH
9629: CALL_OW 153
9633: GO 9666
9635: LD_INT 3
9637: DOUBLE
9638: EQUAL
9639: IFTRUE 9643
9641: GO 9665
9643: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
9644: LD_VAR 0 1
9648: PPUSH
9649: LD_VAR 0 6
9653: PPUSH
9654: LD_VAR 0 7
9658: PPUSH
9659: CALL_OW 154
9663: GO 9666
9665: POP
// end ;
9666: LD_VAR 0 2
9670: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
9671: LD_INT 0
9673: PPUSH
9674: PPUSH
9675: PPUSH
9676: PPUSH
9677: PPUSH
9678: PPUSH
// if not unit or not building then
9679: LD_VAR 0 1
9683: NOT
9684: PUSH
9685: LD_VAR 0 2
9689: NOT
9690: OR
9691: IFFALSE 9695
// exit ;
9693: GO 9853
// x := GetX ( building ) ;
9695: LD_ADDR_VAR 0 5
9699: PUSH
9700: LD_VAR 0 2
9704: PPUSH
9705: CALL_OW 250
9709: ST_TO_ADDR
// y := GetY ( building ) ;
9710: LD_ADDR_VAR 0 6
9714: PUSH
9715: LD_VAR 0 2
9719: PPUSH
9720: CALL_OW 251
9724: ST_TO_ADDR
// for i = 0 to 5 do
9725: LD_ADDR_VAR 0 4
9729: PUSH
9730: DOUBLE
9731: LD_INT 0
9733: DEC
9734: ST_TO_ADDR
9735: LD_INT 5
9737: PUSH
9738: FOR_TO
9739: IFFALSE 9851
// begin _x := ShiftX ( x , i , 3 ) ;
9741: LD_ADDR_VAR 0 7
9745: PUSH
9746: LD_VAR 0 5
9750: PPUSH
9751: LD_VAR 0 4
9755: PPUSH
9756: LD_INT 3
9758: PPUSH
9759: CALL_OW 272
9763: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
9764: LD_ADDR_VAR 0 8
9768: PUSH
9769: LD_VAR 0 6
9773: PPUSH
9774: LD_VAR 0 4
9778: PPUSH
9779: LD_INT 3
9781: PPUSH
9782: CALL_OW 273
9786: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
9787: LD_VAR 0 7
9791: PPUSH
9792: LD_VAR 0 8
9796: PPUSH
9797: CALL_OW 488
9801: NOT
9802: IFFALSE 9806
// continue ;
9804: GO 9738
// if HexInfo ( _x , _y ) = 0 then
9806: LD_VAR 0 7
9810: PPUSH
9811: LD_VAR 0 8
9815: PPUSH
9816: CALL_OW 428
9820: PUSH
9821: LD_INT 0
9823: EQUAL
9824: IFFALSE 9849
// begin ComMoveXY ( unit , _x , _y ) ;
9826: LD_VAR 0 1
9830: PPUSH
9831: LD_VAR 0 7
9835: PPUSH
9836: LD_VAR 0 8
9840: PPUSH
9841: CALL_OW 111
// exit ;
9845: POP
9846: POP
9847: GO 9853
// end ; end ;
9849: GO 9738
9851: POP
9852: POP
// end ;
9853: LD_VAR 0 3
9857: RET
// export function ScanBase ( side , base_area ) ; begin
9858: LD_INT 0
9860: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
9861: LD_ADDR_VAR 0 3
9865: PUSH
9866: LD_VAR 0 2
9870: PPUSH
9871: LD_INT 81
9873: PUSH
9874: LD_VAR 0 1
9878: PUSH
9879: EMPTY
9880: LIST
9881: LIST
9882: PPUSH
9883: CALL_OW 70
9887: ST_TO_ADDR
// end ;
9888: LD_VAR 0 3
9892: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
9893: LD_INT 0
9895: PPUSH
9896: PPUSH
9897: PPUSH
9898: PPUSH
// result := false ;
9899: LD_ADDR_VAR 0 2
9903: PUSH
9904: LD_INT 0
9906: ST_TO_ADDR
// side := GetSide ( unit ) ;
9907: LD_ADDR_VAR 0 3
9911: PUSH
9912: LD_VAR 0 1
9916: PPUSH
9917: CALL_OW 255
9921: ST_TO_ADDR
// nat := GetNation ( unit ) ;
9922: LD_ADDR_VAR 0 4
9926: PUSH
9927: LD_VAR 0 1
9931: PPUSH
9932: CALL_OW 248
9936: ST_TO_ADDR
// case nat of 1 :
9937: LD_VAR 0 4
9941: PUSH
9942: LD_INT 1
9944: DOUBLE
9945: EQUAL
9946: IFTRUE 9950
9948: GO 9961
9950: POP
// tech := tech_lassight ; 2 :
9951: LD_ADDR_VAR 0 5
9955: PUSH
9956: LD_INT 12
9958: ST_TO_ADDR
9959: GO 10000
9961: LD_INT 2
9963: DOUBLE
9964: EQUAL
9965: IFTRUE 9969
9967: GO 9980
9969: POP
// tech := tech_mortar ; 3 :
9970: LD_ADDR_VAR 0 5
9974: PUSH
9975: LD_INT 41
9977: ST_TO_ADDR
9978: GO 10000
9980: LD_INT 3
9982: DOUBLE
9983: EQUAL
9984: IFTRUE 9988
9986: GO 9999
9988: POP
// tech := tech_bazooka ; end ;
9989: LD_ADDR_VAR 0 5
9993: PUSH
9994: LD_INT 44
9996: ST_TO_ADDR
9997: GO 10000
9999: POP
// if Researched ( side , tech ) then
10000: LD_VAR 0 3
10004: PPUSH
10005: LD_VAR 0 5
10009: PPUSH
10010: CALL_OW 325
10014: IFFALSE 10041
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
10016: LD_ADDR_VAR 0 2
10020: PUSH
10021: LD_INT 5
10023: PUSH
10024: LD_INT 8
10026: PUSH
10027: LD_INT 9
10029: PUSH
10030: EMPTY
10031: LIST
10032: LIST
10033: LIST
10034: PUSH
10035: LD_VAR 0 4
10039: ARRAY
10040: ST_TO_ADDR
// end ;
10041: LD_VAR 0 2
10045: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
10046: LD_INT 0
10048: PPUSH
10049: PPUSH
10050: PPUSH
// if not mines then
10051: LD_VAR 0 2
10055: NOT
10056: IFFALSE 10060
// exit ;
10058: GO 10204
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
10060: LD_ADDR_VAR 0 5
10064: PUSH
10065: LD_INT 81
10067: PUSH
10068: LD_VAR 0 1
10072: PUSH
10073: EMPTY
10074: LIST
10075: LIST
10076: PUSH
10077: LD_INT 3
10079: PUSH
10080: LD_INT 21
10082: PUSH
10083: LD_INT 3
10085: PUSH
10086: EMPTY
10087: LIST
10088: LIST
10089: PUSH
10090: EMPTY
10091: LIST
10092: LIST
10093: PUSH
10094: EMPTY
10095: LIST
10096: LIST
10097: PPUSH
10098: CALL_OW 69
10102: ST_TO_ADDR
// for i in mines do
10103: LD_ADDR_VAR 0 4
10107: PUSH
10108: LD_VAR 0 2
10112: PUSH
10113: FOR_IN
10114: IFFALSE 10202
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
10116: LD_VAR 0 4
10120: PUSH
10121: LD_INT 1
10123: ARRAY
10124: PPUSH
10125: LD_VAR 0 4
10129: PUSH
10130: LD_INT 2
10132: ARRAY
10133: PPUSH
10134: CALL_OW 458
10138: NOT
10139: IFFALSE 10143
// continue ;
10141: GO 10113
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
10143: LD_VAR 0 4
10147: PUSH
10148: LD_INT 1
10150: ARRAY
10151: PPUSH
10152: LD_VAR 0 4
10156: PUSH
10157: LD_INT 2
10159: ARRAY
10160: PPUSH
10161: CALL_OW 428
10165: PUSH
10166: LD_VAR 0 5
10170: IN
10171: IFFALSE 10200
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
10173: LD_VAR 0 4
10177: PUSH
10178: LD_INT 1
10180: ARRAY
10181: PPUSH
10182: LD_VAR 0 4
10186: PUSH
10187: LD_INT 2
10189: ARRAY
10190: PPUSH
10191: LD_VAR 0 1
10195: PPUSH
10196: CALL_OW 456
// end ;
10200: GO 10113
10202: POP
10203: POP
// end ;
10204: LD_VAR 0 3
10208: RET
// export function Count ( array ) ; var i ; begin
10209: LD_INT 0
10211: PPUSH
10212: PPUSH
// result := 0 ;
10213: LD_ADDR_VAR 0 2
10217: PUSH
10218: LD_INT 0
10220: ST_TO_ADDR
// for i in array do
10221: LD_ADDR_VAR 0 3
10225: PUSH
10226: LD_VAR 0 1
10230: PUSH
10231: FOR_IN
10232: IFFALSE 10256
// if i then
10234: LD_VAR 0 3
10238: IFFALSE 10254
// result := result + 1 ;
10240: LD_ADDR_VAR 0 2
10244: PUSH
10245: LD_VAR 0 2
10249: PUSH
10250: LD_INT 1
10252: PLUS
10253: ST_TO_ADDR
10254: GO 10231
10256: POP
10257: POP
// end ;
10258: LD_VAR 0 2
10262: RET
// export function IsEmpty ( building ) ; begin
10263: LD_INT 0
10265: PPUSH
// if not building then
10266: LD_VAR 0 1
10270: NOT
10271: IFFALSE 10275
// exit ;
10273: GO 10318
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
10275: LD_ADDR_VAR 0 2
10279: PUSH
10280: LD_VAR 0 1
10284: PUSH
10285: LD_INT 22
10287: PUSH
10288: LD_VAR 0 1
10292: PPUSH
10293: CALL_OW 255
10297: PUSH
10298: EMPTY
10299: LIST
10300: LIST
10301: PUSH
10302: LD_INT 58
10304: PUSH
10305: EMPTY
10306: LIST
10307: PUSH
10308: EMPTY
10309: LIST
10310: LIST
10311: PPUSH
10312: CALL_OW 69
10316: IN
10317: ST_TO_ADDR
// end ;
10318: LD_VAR 0 2
10322: RET
// export function IsNotFull ( building ) ; begin
10323: LD_INT 0
10325: PPUSH
// if not building then
10326: LD_VAR 0 1
10330: NOT
10331: IFFALSE 10335
// exit ;
10333: GO 10354
// result := UnitsInside ( building ) < 6 ;
10335: LD_ADDR_VAR 0 2
10339: PUSH
10340: LD_VAR 0 1
10344: PPUSH
10345: CALL_OW 313
10349: PUSH
10350: LD_INT 6
10352: LESS
10353: ST_TO_ADDR
// end ;
10354: LD_VAR 0 2
10358: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
10359: LD_INT 0
10361: PPUSH
10362: PPUSH
10363: PPUSH
10364: PPUSH
// tmp := [ ] ;
10365: LD_ADDR_VAR 0 3
10369: PUSH
10370: EMPTY
10371: ST_TO_ADDR
// list := [ ] ;
10372: LD_ADDR_VAR 0 5
10376: PUSH
10377: EMPTY
10378: ST_TO_ADDR
// for i = 16 to 25 do
10379: LD_ADDR_VAR 0 4
10383: PUSH
10384: DOUBLE
10385: LD_INT 16
10387: DEC
10388: ST_TO_ADDR
10389: LD_INT 25
10391: PUSH
10392: FOR_TO
10393: IFFALSE 10466
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
10395: LD_ADDR_VAR 0 3
10399: PUSH
10400: LD_VAR 0 3
10404: PUSH
10405: LD_INT 22
10407: PUSH
10408: LD_VAR 0 1
10412: PPUSH
10413: CALL_OW 255
10417: PUSH
10418: EMPTY
10419: LIST
10420: LIST
10421: PUSH
10422: LD_INT 91
10424: PUSH
10425: LD_VAR 0 1
10429: PUSH
10430: LD_INT 6
10432: PUSH
10433: EMPTY
10434: LIST
10435: LIST
10436: LIST
10437: PUSH
10438: LD_INT 30
10440: PUSH
10441: LD_VAR 0 4
10445: PUSH
10446: EMPTY
10447: LIST
10448: LIST
10449: PUSH
10450: EMPTY
10451: LIST
10452: LIST
10453: LIST
10454: PUSH
10455: EMPTY
10456: LIST
10457: PPUSH
10458: CALL_OW 69
10462: ADD
10463: ST_TO_ADDR
10464: GO 10392
10466: POP
10467: POP
// for i = 1 to tmp do
10468: LD_ADDR_VAR 0 4
10472: PUSH
10473: DOUBLE
10474: LD_INT 1
10476: DEC
10477: ST_TO_ADDR
10478: LD_VAR 0 3
10482: PUSH
10483: FOR_TO
10484: IFFALSE 10572
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
10486: LD_ADDR_VAR 0 5
10490: PUSH
10491: LD_VAR 0 5
10495: PUSH
10496: LD_VAR 0 3
10500: PUSH
10501: LD_VAR 0 4
10505: ARRAY
10506: PPUSH
10507: CALL_OW 266
10511: PUSH
10512: LD_VAR 0 3
10516: PUSH
10517: LD_VAR 0 4
10521: ARRAY
10522: PPUSH
10523: CALL_OW 250
10527: PUSH
10528: LD_VAR 0 3
10532: PUSH
10533: LD_VAR 0 4
10537: ARRAY
10538: PPUSH
10539: CALL_OW 251
10543: PUSH
10544: LD_VAR 0 3
10548: PUSH
10549: LD_VAR 0 4
10553: ARRAY
10554: PPUSH
10555: CALL_OW 254
10559: PUSH
10560: EMPTY
10561: LIST
10562: LIST
10563: LIST
10564: LIST
10565: PUSH
10566: EMPTY
10567: LIST
10568: ADD
10569: ST_TO_ADDR
10570: GO 10483
10572: POP
10573: POP
// result := list ;
10574: LD_ADDR_VAR 0 2
10578: PUSH
10579: LD_VAR 0 5
10583: ST_TO_ADDR
// end ;
10584: LD_VAR 0 2
10588: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
10589: LD_INT 0
10591: PPUSH
10592: PPUSH
10593: PPUSH
10594: PPUSH
10595: PPUSH
10596: PPUSH
10597: PPUSH
// if not factory then
10598: LD_VAR 0 1
10602: NOT
10603: IFFALSE 10607
// exit ;
10605: GO 11200
// if control = control_apeman then
10607: LD_VAR 0 4
10611: PUSH
10612: LD_INT 5
10614: EQUAL
10615: IFFALSE 10724
// begin tmp := UnitsInside ( factory ) ;
10617: LD_ADDR_VAR 0 8
10621: PUSH
10622: LD_VAR 0 1
10626: PPUSH
10627: CALL_OW 313
10631: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
10632: LD_VAR 0 8
10636: PPUSH
10637: LD_INT 25
10639: PUSH
10640: LD_INT 12
10642: PUSH
10643: EMPTY
10644: LIST
10645: LIST
10646: PPUSH
10647: CALL_OW 72
10651: NOT
10652: IFFALSE 10662
// control := control_manual ;
10654: LD_ADDR_VAR 0 4
10658: PUSH
10659: LD_INT 1
10661: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
10662: LD_ADDR_VAR 0 8
10666: PUSH
10667: LD_VAR 0 1
10671: PPUSH
10672: CALL 10359 0 1
10676: ST_TO_ADDR
// if tmp then
10677: LD_VAR 0 8
10681: IFFALSE 10724
// begin for i in tmp do
10683: LD_ADDR_VAR 0 7
10687: PUSH
10688: LD_VAR 0 8
10692: PUSH
10693: FOR_IN
10694: IFFALSE 10722
// if i [ 1 ] = b_ext_radio then
10696: LD_VAR 0 7
10700: PUSH
10701: LD_INT 1
10703: ARRAY
10704: PUSH
10705: LD_INT 22
10707: EQUAL
10708: IFFALSE 10720
// begin control := control_remote ;
10710: LD_ADDR_VAR 0 4
10714: PUSH
10715: LD_INT 2
10717: ST_TO_ADDR
// break ;
10718: GO 10722
// end ;
10720: GO 10693
10722: POP
10723: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
10724: LD_VAR 0 1
10728: PPUSH
10729: LD_VAR 0 2
10733: PPUSH
10734: LD_VAR 0 3
10738: PPUSH
10739: LD_VAR 0 4
10743: PPUSH
10744: LD_VAR 0 5
10748: PPUSH
10749: CALL_OW 448
10753: IFFALSE 10788
// begin result := [ chassis , engine , control , weapon ] ;
10755: LD_ADDR_VAR 0 6
10759: PUSH
10760: LD_VAR 0 2
10764: PUSH
10765: LD_VAR 0 3
10769: PUSH
10770: LD_VAR 0 4
10774: PUSH
10775: LD_VAR 0 5
10779: PUSH
10780: EMPTY
10781: LIST
10782: LIST
10783: LIST
10784: LIST
10785: ST_TO_ADDR
// exit ;
10786: GO 11200
// end ; _chassis := AvailableChassisList ( factory ) ;
10788: LD_ADDR_VAR 0 9
10792: PUSH
10793: LD_VAR 0 1
10797: PPUSH
10798: CALL_OW 475
10802: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
10803: LD_ADDR_VAR 0 11
10807: PUSH
10808: LD_VAR 0 1
10812: PPUSH
10813: CALL_OW 476
10817: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
10818: LD_ADDR_VAR 0 12
10822: PUSH
10823: LD_VAR 0 1
10827: PPUSH
10828: CALL_OW 477
10832: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
10833: LD_ADDR_VAR 0 10
10837: PUSH
10838: LD_VAR 0 1
10842: PPUSH
10843: CALL_OW 478
10847: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
10848: LD_VAR 0 9
10852: NOT
10853: PUSH
10854: LD_VAR 0 11
10858: NOT
10859: OR
10860: PUSH
10861: LD_VAR 0 12
10865: NOT
10866: OR
10867: PUSH
10868: LD_VAR 0 10
10872: NOT
10873: OR
10874: IFFALSE 10909
// begin result := [ chassis , engine , control , weapon ] ;
10876: LD_ADDR_VAR 0 6
10880: PUSH
10881: LD_VAR 0 2
10885: PUSH
10886: LD_VAR 0 3
10890: PUSH
10891: LD_VAR 0 4
10895: PUSH
10896: LD_VAR 0 5
10900: PUSH
10901: EMPTY
10902: LIST
10903: LIST
10904: LIST
10905: LIST
10906: ST_TO_ADDR
// exit ;
10907: GO 11200
// end ; if not chassis in _chassis then
10909: LD_VAR 0 2
10913: PUSH
10914: LD_VAR 0 9
10918: IN
10919: NOT
10920: IFFALSE 10946
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
10922: LD_ADDR_VAR 0 2
10926: PUSH
10927: LD_VAR 0 9
10931: PUSH
10932: LD_INT 1
10934: PPUSH
10935: LD_VAR 0 9
10939: PPUSH
10940: CALL_OW 12
10944: ARRAY
10945: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
10946: LD_VAR 0 2
10950: PPUSH
10951: LD_VAR 0 3
10955: PPUSH
10956: CALL 11205 0 2
10960: NOT
10961: IFFALSE 11020
// repeat engine := _engine [ 1 ] ;
10963: LD_ADDR_VAR 0 3
10967: PUSH
10968: LD_VAR 0 11
10972: PUSH
10973: LD_INT 1
10975: ARRAY
10976: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
10977: LD_ADDR_VAR 0 11
10981: PUSH
10982: LD_VAR 0 11
10986: PPUSH
10987: LD_INT 1
10989: PPUSH
10990: CALL_OW 3
10994: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
10995: LD_VAR 0 2
10999: PPUSH
11000: LD_VAR 0 3
11004: PPUSH
11005: CALL 11205 0 2
11009: PUSH
11010: LD_VAR 0 11
11014: PUSH
11015: EMPTY
11016: EQUAL
11017: OR
11018: IFFALSE 10963
// if not control in _control then
11020: LD_VAR 0 4
11024: PUSH
11025: LD_VAR 0 12
11029: IN
11030: NOT
11031: IFFALSE 11057
// control := _control [ rand ( 1 , _control ) ] ;
11033: LD_ADDR_VAR 0 4
11037: PUSH
11038: LD_VAR 0 12
11042: PUSH
11043: LD_INT 1
11045: PPUSH
11046: LD_VAR 0 12
11050: PPUSH
11051: CALL_OW 12
11055: ARRAY
11056: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
11057: LD_VAR 0 2
11061: PPUSH
11062: LD_VAR 0 5
11066: PPUSH
11067: CALL 11425 0 2
11071: NOT
11072: IFFALSE 11131
// repeat weapon := _weapon [ 1 ] ;
11074: LD_ADDR_VAR 0 5
11078: PUSH
11079: LD_VAR 0 10
11083: PUSH
11084: LD_INT 1
11086: ARRAY
11087: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
11088: LD_ADDR_VAR 0 10
11092: PUSH
11093: LD_VAR 0 10
11097: PPUSH
11098: LD_INT 1
11100: PPUSH
11101: CALL_OW 3
11105: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
11106: LD_VAR 0 2
11110: PPUSH
11111: LD_VAR 0 5
11115: PPUSH
11116: CALL 11425 0 2
11120: PUSH
11121: LD_VAR 0 10
11125: PUSH
11126: EMPTY
11127: EQUAL
11128: OR
11129: IFFALSE 11074
// result := [ ] ;
11131: LD_ADDR_VAR 0 6
11135: PUSH
11136: EMPTY
11137: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
11138: LD_VAR 0 1
11142: PPUSH
11143: LD_VAR 0 2
11147: PPUSH
11148: LD_VAR 0 3
11152: PPUSH
11153: LD_VAR 0 4
11157: PPUSH
11158: LD_VAR 0 5
11162: PPUSH
11163: CALL_OW 448
11167: IFFALSE 11200
// result := [ chassis , engine , control , weapon ] ;
11169: LD_ADDR_VAR 0 6
11173: PUSH
11174: LD_VAR 0 2
11178: PUSH
11179: LD_VAR 0 3
11183: PUSH
11184: LD_VAR 0 4
11188: PUSH
11189: LD_VAR 0 5
11193: PUSH
11194: EMPTY
11195: LIST
11196: LIST
11197: LIST
11198: LIST
11199: ST_TO_ADDR
// end ;
11200: LD_VAR 0 6
11204: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
11205: LD_INT 0
11207: PPUSH
// if not chassis or not engine then
11208: LD_VAR 0 1
11212: NOT
11213: PUSH
11214: LD_VAR 0 2
11218: NOT
11219: OR
11220: IFFALSE 11224
// exit ;
11222: GO 11420
// case engine of engine_solar :
11224: LD_VAR 0 2
11228: PUSH
11229: LD_INT 2
11231: DOUBLE
11232: EQUAL
11233: IFTRUE 11237
11235: GO 11275
11237: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
11238: LD_ADDR_VAR 0 3
11242: PUSH
11243: LD_INT 11
11245: PUSH
11246: LD_INT 12
11248: PUSH
11249: LD_INT 13
11251: PUSH
11252: LD_INT 14
11254: PUSH
11255: LD_INT 1
11257: PUSH
11258: LD_INT 2
11260: PUSH
11261: LD_INT 3
11263: PUSH
11264: EMPTY
11265: LIST
11266: LIST
11267: LIST
11268: LIST
11269: LIST
11270: LIST
11271: LIST
11272: ST_TO_ADDR
11273: GO 11404
11275: LD_INT 1
11277: DOUBLE
11278: EQUAL
11279: IFTRUE 11283
11281: GO 11345
11283: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
11284: LD_ADDR_VAR 0 3
11288: PUSH
11289: LD_INT 11
11291: PUSH
11292: LD_INT 12
11294: PUSH
11295: LD_INT 13
11297: PUSH
11298: LD_INT 14
11300: PUSH
11301: LD_INT 1
11303: PUSH
11304: LD_INT 2
11306: PUSH
11307: LD_INT 3
11309: PUSH
11310: LD_INT 4
11312: PUSH
11313: LD_INT 5
11315: PUSH
11316: LD_INT 21
11318: PUSH
11319: LD_INT 23
11321: PUSH
11322: LD_INT 22
11324: PUSH
11325: LD_INT 24
11327: PUSH
11328: EMPTY
11329: LIST
11330: LIST
11331: LIST
11332: LIST
11333: LIST
11334: LIST
11335: LIST
11336: LIST
11337: LIST
11338: LIST
11339: LIST
11340: LIST
11341: LIST
11342: ST_TO_ADDR
11343: GO 11404
11345: LD_INT 3
11347: DOUBLE
11348: EQUAL
11349: IFTRUE 11353
11351: GO 11403
11353: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
11354: LD_ADDR_VAR 0 3
11358: PUSH
11359: LD_INT 13
11361: PUSH
11362: LD_INT 14
11364: PUSH
11365: LD_INT 2
11367: PUSH
11368: LD_INT 3
11370: PUSH
11371: LD_INT 4
11373: PUSH
11374: LD_INT 5
11376: PUSH
11377: LD_INT 21
11379: PUSH
11380: LD_INT 22
11382: PUSH
11383: LD_INT 23
11385: PUSH
11386: LD_INT 24
11388: PUSH
11389: EMPTY
11390: LIST
11391: LIST
11392: LIST
11393: LIST
11394: LIST
11395: LIST
11396: LIST
11397: LIST
11398: LIST
11399: LIST
11400: ST_TO_ADDR
11401: GO 11404
11403: POP
// result := ( chassis in result ) ;
11404: LD_ADDR_VAR 0 3
11408: PUSH
11409: LD_VAR 0 1
11413: PUSH
11414: LD_VAR 0 3
11418: IN
11419: ST_TO_ADDR
// end ;
11420: LD_VAR 0 3
11424: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
11425: LD_INT 0
11427: PPUSH
// if not chassis or not weapon then
11428: LD_VAR 0 1
11432: NOT
11433: PUSH
11434: LD_VAR 0 2
11438: NOT
11439: OR
11440: IFFALSE 11444
// exit ;
11442: GO 12470
// case weapon of us_machine_gun :
11444: LD_VAR 0 2
11448: PUSH
11449: LD_INT 2
11451: DOUBLE
11452: EQUAL
11453: IFTRUE 11457
11455: GO 11487
11457: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
11458: LD_ADDR_VAR 0 3
11462: PUSH
11463: LD_INT 1
11465: PUSH
11466: LD_INT 2
11468: PUSH
11469: LD_INT 3
11471: PUSH
11472: LD_INT 4
11474: PUSH
11475: LD_INT 5
11477: PUSH
11478: EMPTY
11479: LIST
11480: LIST
11481: LIST
11482: LIST
11483: LIST
11484: ST_TO_ADDR
11485: GO 12454
11487: LD_INT 3
11489: DOUBLE
11490: EQUAL
11491: IFTRUE 11495
11493: GO 11525
11495: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
11496: LD_ADDR_VAR 0 3
11500: PUSH
11501: LD_INT 1
11503: PUSH
11504: LD_INT 2
11506: PUSH
11507: LD_INT 3
11509: PUSH
11510: LD_INT 4
11512: PUSH
11513: LD_INT 5
11515: PUSH
11516: EMPTY
11517: LIST
11518: LIST
11519: LIST
11520: LIST
11521: LIST
11522: ST_TO_ADDR
11523: GO 12454
11525: LD_INT 11
11527: DOUBLE
11528: EQUAL
11529: IFTRUE 11533
11531: GO 11563
11533: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
11534: LD_ADDR_VAR 0 3
11538: PUSH
11539: LD_INT 1
11541: PUSH
11542: LD_INT 2
11544: PUSH
11545: LD_INT 3
11547: PUSH
11548: LD_INT 4
11550: PUSH
11551: LD_INT 5
11553: PUSH
11554: EMPTY
11555: LIST
11556: LIST
11557: LIST
11558: LIST
11559: LIST
11560: ST_TO_ADDR
11561: GO 12454
11563: LD_INT 4
11565: DOUBLE
11566: EQUAL
11567: IFTRUE 11571
11569: GO 11597
11571: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
11572: LD_ADDR_VAR 0 3
11576: PUSH
11577: LD_INT 2
11579: PUSH
11580: LD_INT 3
11582: PUSH
11583: LD_INT 4
11585: PUSH
11586: LD_INT 5
11588: PUSH
11589: EMPTY
11590: LIST
11591: LIST
11592: LIST
11593: LIST
11594: ST_TO_ADDR
11595: GO 12454
11597: LD_INT 5
11599: DOUBLE
11600: EQUAL
11601: IFTRUE 11605
11603: GO 11631
11605: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
11606: LD_ADDR_VAR 0 3
11610: PUSH
11611: LD_INT 2
11613: PUSH
11614: LD_INT 3
11616: PUSH
11617: LD_INT 4
11619: PUSH
11620: LD_INT 5
11622: PUSH
11623: EMPTY
11624: LIST
11625: LIST
11626: LIST
11627: LIST
11628: ST_TO_ADDR
11629: GO 12454
11631: LD_INT 9
11633: DOUBLE
11634: EQUAL
11635: IFTRUE 11639
11637: GO 11665
11639: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
11640: LD_ADDR_VAR 0 3
11644: PUSH
11645: LD_INT 2
11647: PUSH
11648: LD_INT 3
11650: PUSH
11651: LD_INT 4
11653: PUSH
11654: LD_INT 5
11656: PUSH
11657: EMPTY
11658: LIST
11659: LIST
11660: LIST
11661: LIST
11662: ST_TO_ADDR
11663: GO 12454
11665: LD_INT 7
11667: DOUBLE
11668: EQUAL
11669: IFTRUE 11673
11671: GO 11699
11673: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
11674: LD_ADDR_VAR 0 3
11678: PUSH
11679: LD_INT 2
11681: PUSH
11682: LD_INT 3
11684: PUSH
11685: LD_INT 4
11687: PUSH
11688: LD_INT 5
11690: PUSH
11691: EMPTY
11692: LIST
11693: LIST
11694: LIST
11695: LIST
11696: ST_TO_ADDR
11697: GO 12454
11699: LD_INT 12
11701: DOUBLE
11702: EQUAL
11703: IFTRUE 11707
11705: GO 11733
11707: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
11708: LD_ADDR_VAR 0 3
11712: PUSH
11713: LD_INT 2
11715: PUSH
11716: LD_INT 3
11718: PUSH
11719: LD_INT 4
11721: PUSH
11722: LD_INT 5
11724: PUSH
11725: EMPTY
11726: LIST
11727: LIST
11728: LIST
11729: LIST
11730: ST_TO_ADDR
11731: GO 12454
11733: LD_INT 13
11735: DOUBLE
11736: EQUAL
11737: IFTRUE 11741
11739: GO 11767
11741: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
11742: LD_ADDR_VAR 0 3
11746: PUSH
11747: LD_INT 2
11749: PUSH
11750: LD_INT 3
11752: PUSH
11753: LD_INT 4
11755: PUSH
11756: LD_INT 5
11758: PUSH
11759: EMPTY
11760: LIST
11761: LIST
11762: LIST
11763: LIST
11764: ST_TO_ADDR
11765: GO 12454
11767: LD_INT 14
11769: DOUBLE
11770: EQUAL
11771: IFTRUE 11775
11773: GO 11793
11775: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
11776: LD_ADDR_VAR 0 3
11780: PUSH
11781: LD_INT 4
11783: PUSH
11784: LD_INT 5
11786: PUSH
11787: EMPTY
11788: LIST
11789: LIST
11790: ST_TO_ADDR
11791: GO 12454
11793: LD_INT 6
11795: DOUBLE
11796: EQUAL
11797: IFTRUE 11801
11799: GO 11819
11801: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
11802: LD_ADDR_VAR 0 3
11806: PUSH
11807: LD_INT 4
11809: PUSH
11810: LD_INT 5
11812: PUSH
11813: EMPTY
11814: LIST
11815: LIST
11816: ST_TO_ADDR
11817: GO 12454
11819: LD_INT 10
11821: DOUBLE
11822: EQUAL
11823: IFTRUE 11827
11825: GO 11845
11827: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
11828: LD_ADDR_VAR 0 3
11832: PUSH
11833: LD_INT 4
11835: PUSH
11836: LD_INT 5
11838: PUSH
11839: EMPTY
11840: LIST
11841: LIST
11842: ST_TO_ADDR
11843: GO 12454
11845: LD_INT 22
11847: DOUBLE
11848: EQUAL
11849: IFTRUE 11853
11851: GO 11879
11853: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
11854: LD_ADDR_VAR 0 3
11858: PUSH
11859: LD_INT 11
11861: PUSH
11862: LD_INT 12
11864: PUSH
11865: LD_INT 13
11867: PUSH
11868: LD_INT 14
11870: PUSH
11871: EMPTY
11872: LIST
11873: LIST
11874: LIST
11875: LIST
11876: ST_TO_ADDR
11877: GO 12454
11879: LD_INT 23
11881: DOUBLE
11882: EQUAL
11883: IFTRUE 11887
11885: GO 11913
11887: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
11888: LD_ADDR_VAR 0 3
11892: PUSH
11893: LD_INT 11
11895: PUSH
11896: LD_INT 12
11898: PUSH
11899: LD_INT 13
11901: PUSH
11902: LD_INT 14
11904: PUSH
11905: EMPTY
11906: LIST
11907: LIST
11908: LIST
11909: LIST
11910: ST_TO_ADDR
11911: GO 12454
11913: LD_INT 24
11915: DOUBLE
11916: EQUAL
11917: IFTRUE 11921
11919: GO 11947
11921: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
11922: LD_ADDR_VAR 0 3
11926: PUSH
11927: LD_INT 11
11929: PUSH
11930: LD_INT 12
11932: PUSH
11933: LD_INT 13
11935: PUSH
11936: LD_INT 14
11938: PUSH
11939: EMPTY
11940: LIST
11941: LIST
11942: LIST
11943: LIST
11944: ST_TO_ADDR
11945: GO 12454
11947: LD_INT 30
11949: DOUBLE
11950: EQUAL
11951: IFTRUE 11955
11953: GO 11981
11955: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
11956: LD_ADDR_VAR 0 3
11960: PUSH
11961: LD_INT 11
11963: PUSH
11964: LD_INT 12
11966: PUSH
11967: LD_INT 13
11969: PUSH
11970: LD_INT 14
11972: PUSH
11973: EMPTY
11974: LIST
11975: LIST
11976: LIST
11977: LIST
11978: ST_TO_ADDR
11979: GO 12454
11981: LD_INT 25
11983: DOUBLE
11984: EQUAL
11985: IFTRUE 11989
11987: GO 12007
11989: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
11990: LD_ADDR_VAR 0 3
11994: PUSH
11995: LD_INT 13
11997: PUSH
11998: LD_INT 14
12000: PUSH
12001: EMPTY
12002: LIST
12003: LIST
12004: ST_TO_ADDR
12005: GO 12454
12007: LD_INT 27
12009: DOUBLE
12010: EQUAL
12011: IFTRUE 12015
12013: GO 12033
12015: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
12016: LD_ADDR_VAR 0 3
12020: PUSH
12021: LD_INT 13
12023: PUSH
12024: LD_INT 14
12026: PUSH
12027: EMPTY
12028: LIST
12029: LIST
12030: ST_TO_ADDR
12031: GO 12454
12033: LD_INT 28
12035: DOUBLE
12036: EQUAL
12037: IFTRUE 12041
12039: GO 12059
12041: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
12042: LD_ADDR_VAR 0 3
12046: PUSH
12047: LD_INT 13
12049: PUSH
12050: LD_INT 14
12052: PUSH
12053: EMPTY
12054: LIST
12055: LIST
12056: ST_TO_ADDR
12057: GO 12454
12059: LD_INT 29
12061: DOUBLE
12062: EQUAL
12063: IFTRUE 12067
12065: GO 12085
12067: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
12068: LD_ADDR_VAR 0 3
12072: PUSH
12073: LD_INT 13
12075: PUSH
12076: LD_INT 14
12078: PUSH
12079: EMPTY
12080: LIST
12081: LIST
12082: ST_TO_ADDR
12083: GO 12454
12085: LD_INT 31
12087: DOUBLE
12088: EQUAL
12089: IFTRUE 12093
12091: GO 12111
12093: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
12094: LD_ADDR_VAR 0 3
12098: PUSH
12099: LD_INT 13
12101: PUSH
12102: LD_INT 14
12104: PUSH
12105: EMPTY
12106: LIST
12107: LIST
12108: ST_TO_ADDR
12109: GO 12454
12111: LD_INT 26
12113: DOUBLE
12114: EQUAL
12115: IFTRUE 12119
12117: GO 12137
12119: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
12120: LD_ADDR_VAR 0 3
12124: PUSH
12125: LD_INT 13
12127: PUSH
12128: LD_INT 14
12130: PUSH
12131: EMPTY
12132: LIST
12133: LIST
12134: ST_TO_ADDR
12135: GO 12454
12137: LD_INT 42
12139: DOUBLE
12140: EQUAL
12141: IFTRUE 12145
12143: GO 12171
12145: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
12146: LD_ADDR_VAR 0 3
12150: PUSH
12151: LD_INT 21
12153: PUSH
12154: LD_INT 22
12156: PUSH
12157: LD_INT 23
12159: PUSH
12160: LD_INT 24
12162: PUSH
12163: EMPTY
12164: LIST
12165: LIST
12166: LIST
12167: LIST
12168: ST_TO_ADDR
12169: GO 12454
12171: LD_INT 43
12173: DOUBLE
12174: EQUAL
12175: IFTRUE 12179
12177: GO 12205
12179: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
12180: LD_ADDR_VAR 0 3
12184: PUSH
12185: LD_INT 21
12187: PUSH
12188: LD_INT 22
12190: PUSH
12191: LD_INT 23
12193: PUSH
12194: LD_INT 24
12196: PUSH
12197: EMPTY
12198: LIST
12199: LIST
12200: LIST
12201: LIST
12202: ST_TO_ADDR
12203: GO 12454
12205: LD_INT 44
12207: DOUBLE
12208: EQUAL
12209: IFTRUE 12213
12211: GO 12239
12213: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
12214: LD_ADDR_VAR 0 3
12218: PUSH
12219: LD_INT 21
12221: PUSH
12222: LD_INT 22
12224: PUSH
12225: LD_INT 23
12227: PUSH
12228: LD_INT 24
12230: PUSH
12231: EMPTY
12232: LIST
12233: LIST
12234: LIST
12235: LIST
12236: ST_TO_ADDR
12237: GO 12454
12239: LD_INT 45
12241: DOUBLE
12242: EQUAL
12243: IFTRUE 12247
12245: GO 12273
12247: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
12248: LD_ADDR_VAR 0 3
12252: PUSH
12253: LD_INT 21
12255: PUSH
12256: LD_INT 22
12258: PUSH
12259: LD_INT 23
12261: PUSH
12262: LD_INT 24
12264: PUSH
12265: EMPTY
12266: LIST
12267: LIST
12268: LIST
12269: LIST
12270: ST_TO_ADDR
12271: GO 12454
12273: LD_INT 49
12275: DOUBLE
12276: EQUAL
12277: IFTRUE 12281
12279: GO 12307
12281: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
12282: LD_ADDR_VAR 0 3
12286: PUSH
12287: LD_INT 21
12289: PUSH
12290: LD_INT 22
12292: PUSH
12293: LD_INT 23
12295: PUSH
12296: LD_INT 24
12298: PUSH
12299: EMPTY
12300: LIST
12301: LIST
12302: LIST
12303: LIST
12304: ST_TO_ADDR
12305: GO 12454
12307: LD_INT 51
12309: DOUBLE
12310: EQUAL
12311: IFTRUE 12315
12313: GO 12341
12315: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
12316: LD_ADDR_VAR 0 3
12320: PUSH
12321: LD_INT 21
12323: PUSH
12324: LD_INT 22
12326: PUSH
12327: LD_INT 23
12329: PUSH
12330: LD_INT 24
12332: PUSH
12333: EMPTY
12334: LIST
12335: LIST
12336: LIST
12337: LIST
12338: ST_TO_ADDR
12339: GO 12454
12341: LD_INT 52
12343: DOUBLE
12344: EQUAL
12345: IFTRUE 12349
12347: GO 12375
12349: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
12350: LD_ADDR_VAR 0 3
12354: PUSH
12355: LD_INT 21
12357: PUSH
12358: LD_INT 22
12360: PUSH
12361: LD_INT 23
12363: PUSH
12364: LD_INT 24
12366: PUSH
12367: EMPTY
12368: LIST
12369: LIST
12370: LIST
12371: LIST
12372: ST_TO_ADDR
12373: GO 12454
12375: LD_INT 53
12377: DOUBLE
12378: EQUAL
12379: IFTRUE 12383
12381: GO 12401
12383: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
12384: LD_ADDR_VAR 0 3
12388: PUSH
12389: LD_INT 23
12391: PUSH
12392: LD_INT 24
12394: PUSH
12395: EMPTY
12396: LIST
12397: LIST
12398: ST_TO_ADDR
12399: GO 12454
12401: LD_INT 46
12403: DOUBLE
12404: EQUAL
12405: IFTRUE 12409
12407: GO 12427
12409: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
12410: LD_ADDR_VAR 0 3
12414: PUSH
12415: LD_INT 23
12417: PUSH
12418: LD_INT 24
12420: PUSH
12421: EMPTY
12422: LIST
12423: LIST
12424: ST_TO_ADDR
12425: GO 12454
12427: LD_INT 47
12429: DOUBLE
12430: EQUAL
12431: IFTRUE 12435
12433: GO 12453
12435: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
12436: LD_ADDR_VAR 0 3
12440: PUSH
12441: LD_INT 23
12443: PUSH
12444: LD_INT 24
12446: PUSH
12447: EMPTY
12448: LIST
12449: LIST
12450: ST_TO_ADDR
12451: GO 12454
12453: POP
// result := ( chassis in result ) ;
12454: LD_ADDR_VAR 0 3
12458: PUSH
12459: LD_VAR 0 1
12463: PUSH
12464: LD_VAR 0 3
12468: IN
12469: ST_TO_ADDR
// end ;
12470: LD_VAR 0 3
12474: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
12475: LD_INT 0
12477: PPUSH
12478: PPUSH
12479: PPUSH
12480: PPUSH
12481: PPUSH
12482: PPUSH
12483: PPUSH
// result := array ;
12484: LD_ADDR_VAR 0 5
12488: PUSH
12489: LD_VAR 0 1
12493: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
12494: LD_VAR 0 1
12498: NOT
12499: PUSH
12500: LD_VAR 0 2
12504: NOT
12505: OR
12506: PUSH
12507: LD_VAR 0 3
12511: NOT
12512: OR
12513: PUSH
12514: LD_VAR 0 2
12518: PUSH
12519: LD_VAR 0 1
12523: GREATER
12524: OR
12525: PUSH
12526: LD_VAR 0 3
12530: PUSH
12531: LD_VAR 0 1
12535: GREATER
12536: OR
12537: IFFALSE 12541
// exit ;
12539: GO 12837
// if direction then
12541: LD_VAR 0 4
12545: IFFALSE 12609
// begin d := 1 ;
12547: LD_ADDR_VAR 0 9
12551: PUSH
12552: LD_INT 1
12554: ST_TO_ADDR
// if i_from > i_to then
12555: LD_VAR 0 2
12559: PUSH
12560: LD_VAR 0 3
12564: GREATER
12565: IFFALSE 12591
// length := ( array - i_from ) + i_to else
12567: LD_ADDR_VAR 0 11
12571: PUSH
12572: LD_VAR 0 1
12576: PUSH
12577: LD_VAR 0 2
12581: MINUS
12582: PUSH
12583: LD_VAR 0 3
12587: PLUS
12588: ST_TO_ADDR
12589: GO 12607
// length := i_to - i_from ;
12591: LD_ADDR_VAR 0 11
12595: PUSH
12596: LD_VAR 0 3
12600: PUSH
12601: LD_VAR 0 2
12605: MINUS
12606: ST_TO_ADDR
// end else
12607: GO 12670
// begin d := - 1 ;
12609: LD_ADDR_VAR 0 9
12613: PUSH
12614: LD_INT 1
12616: NEG
12617: ST_TO_ADDR
// if i_from > i_to then
12618: LD_VAR 0 2
12622: PUSH
12623: LD_VAR 0 3
12627: GREATER
12628: IFFALSE 12648
// length := i_from - i_to else
12630: LD_ADDR_VAR 0 11
12634: PUSH
12635: LD_VAR 0 2
12639: PUSH
12640: LD_VAR 0 3
12644: MINUS
12645: ST_TO_ADDR
12646: GO 12670
// length := ( array - i_to ) + i_from ;
12648: LD_ADDR_VAR 0 11
12652: PUSH
12653: LD_VAR 0 1
12657: PUSH
12658: LD_VAR 0 3
12662: MINUS
12663: PUSH
12664: LD_VAR 0 2
12668: PLUS
12669: ST_TO_ADDR
// end ; if not length then
12670: LD_VAR 0 11
12674: NOT
12675: IFFALSE 12679
// exit ;
12677: GO 12837
// tmp := array ;
12679: LD_ADDR_VAR 0 10
12683: PUSH
12684: LD_VAR 0 1
12688: ST_TO_ADDR
// for i = 1 to length do
12689: LD_ADDR_VAR 0 6
12693: PUSH
12694: DOUBLE
12695: LD_INT 1
12697: DEC
12698: ST_TO_ADDR
12699: LD_VAR 0 11
12703: PUSH
12704: FOR_TO
12705: IFFALSE 12825
// begin for j = 1 to array do
12707: LD_ADDR_VAR 0 7
12711: PUSH
12712: DOUBLE
12713: LD_INT 1
12715: DEC
12716: ST_TO_ADDR
12717: LD_VAR 0 1
12721: PUSH
12722: FOR_TO
12723: IFFALSE 12811
// begin k := j + d ;
12725: LD_ADDR_VAR 0 8
12729: PUSH
12730: LD_VAR 0 7
12734: PUSH
12735: LD_VAR 0 9
12739: PLUS
12740: ST_TO_ADDR
// if k > array then
12741: LD_VAR 0 8
12745: PUSH
12746: LD_VAR 0 1
12750: GREATER
12751: IFFALSE 12761
// k := 1 ;
12753: LD_ADDR_VAR 0 8
12757: PUSH
12758: LD_INT 1
12760: ST_TO_ADDR
// if not k then
12761: LD_VAR 0 8
12765: NOT
12766: IFFALSE 12778
// k := array ;
12768: LD_ADDR_VAR 0 8
12772: PUSH
12773: LD_VAR 0 1
12777: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
12778: LD_ADDR_VAR 0 10
12782: PUSH
12783: LD_VAR 0 10
12787: PPUSH
12788: LD_VAR 0 8
12792: PPUSH
12793: LD_VAR 0 1
12797: PUSH
12798: LD_VAR 0 7
12802: ARRAY
12803: PPUSH
12804: CALL_OW 1
12808: ST_TO_ADDR
// end ;
12809: GO 12722
12811: POP
12812: POP
// array := tmp ;
12813: LD_ADDR_VAR 0 1
12817: PUSH
12818: LD_VAR 0 10
12822: ST_TO_ADDR
// end ;
12823: GO 12704
12825: POP
12826: POP
// result := array ;
12827: LD_ADDR_VAR 0 5
12831: PUSH
12832: LD_VAR 0 1
12836: ST_TO_ADDR
// end ;
12837: LD_VAR 0 5
12841: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
12842: LD_INT 0
12844: PPUSH
12845: PPUSH
// result := 0 ;
12846: LD_ADDR_VAR 0 3
12850: PUSH
12851: LD_INT 0
12853: ST_TO_ADDR
// if not array or not value in array then
12854: LD_VAR 0 1
12858: NOT
12859: PUSH
12860: LD_VAR 0 2
12864: PUSH
12865: LD_VAR 0 1
12869: IN
12870: NOT
12871: OR
12872: IFFALSE 12876
// exit ;
12874: GO 12930
// for i = 1 to array do
12876: LD_ADDR_VAR 0 4
12880: PUSH
12881: DOUBLE
12882: LD_INT 1
12884: DEC
12885: ST_TO_ADDR
12886: LD_VAR 0 1
12890: PUSH
12891: FOR_TO
12892: IFFALSE 12928
// if value = array [ i ] then
12894: LD_VAR 0 2
12898: PUSH
12899: LD_VAR 0 1
12903: PUSH
12904: LD_VAR 0 4
12908: ARRAY
12909: EQUAL
12910: IFFALSE 12926
// begin result := i ;
12912: LD_ADDR_VAR 0 3
12916: PUSH
12917: LD_VAR 0 4
12921: ST_TO_ADDR
// exit ;
12922: POP
12923: POP
12924: GO 12930
// end ;
12926: GO 12891
12928: POP
12929: POP
// end ;
12930: LD_VAR 0 3
12934: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
12935: LD_INT 0
12937: PPUSH
// vc_chassis := chassis ;
12938: LD_ADDR_OWVAR 37
12942: PUSH
12943: LD_VAR 0 1
12947: ST_TO_ADDR
// vc_engine := engine ;
12948: LD_ADDR_OWVAR 39
12952: PUSH
12953: LD_VAR 0 2
12957: ST_TO_ADDR
// vc_control := control ;
12958: LD_ADDR_OWVAR 38
12962: PUSH
12963: LD_VAR 0 3
12967: ST_TO_ADDR
// vc_weapon := weapon ;
12968: LD_ADDR_OWVAR 40
12972: PUSH
12973: LD_VAR 0 4
12977: ST_TO_ADDR
// vc_fuel_battery := fuel ;
12978: LD_ADDR_OWVAR 41
12982: PUSH
12983: LD_VAR 0 5
12987: ST_TO_ADDR
// end ;
12988: LD_VAR 0 6
12992: RET
// export function WantPlant ( unit ) ; var task ; begin
12993: LD_INT 0
12995: PPUSH
12996: PPUSH
// result := false ;
12997: LD_ADDR_VAR 0 2
13001: PUSH
13002: LD_INT 0
13004: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
13005: LD_ADDR_VAR 0 3
13009: PUSH
13010: LD_VAR 0 1
13014: PPUSH
13015: CALL_OW 437
13019: ST_TO_ADDR
// if task then
13020: LD_VAR 0 3
13024: IFFALSE 13052
// if task [ 1 ] [ 1 ] = p then
13026: LD_VAR 0 3
13030: PUSH
13031: LD_INT 1
13033: ARRAY
13034: PUSH
13035: LD_INT 1
13037: ARRAY
13038: PUSH
13039: LD_STRING p
13041: EQUAL
13042: IFFALSE 13052
// result := true ;
13044: LD_ADDR_VAR 0 2
13048: PUSH
13049: LD_INT 1
13051: ST_TO_ADDR
// end ;
13052: LD_VAR 0 2
13056: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
13057: LD_INT 0
13059: PPUSH
13060: PPUSH
13061: PPUSH
13062: PPUSH
// if pos < 1 then
13063: LD_VAR 0 2
13067: PUSH
13068: LD_INT 1
13070: LESS
13071: IFFALSE 13075
// exit ;
13073: GO 13378
// if pos = 1 then
13075: LD_VAR 0 2
13079: PUSH
13080: LD_INT 1
13082: EQUAL
13083: IFFALSE 13116
// result := Replace ( arr , pos [ 1 ] , value ) else
13085: LD_ADDR_VAR 0 4
13089: PUSH
13090: LD_VAR 0 1
13094: PPUSH
13095: LD_VAR 0 2
13099: PUSH
13100: LD_INT 1
13102: ARRAY
13103: PPUSH
13104: LD_VAR 0 3
13108: PPUSH
13109: CALL_OW 1
13113: ST_TO_ADDR
13114: GO 13378
// begin tmp := arr ;
13116: LD_ADDR_VAR 0 6
13120: PUSH
13121: LD_VAR 0 1
13125: ST_TO_ADDR
// s_arr := [ tmp ] ;
13126: LD_ADDR_VAR 0 7
13130: PUSH
13131: LD_VAR 0 6
13135: PUSH
13136: EMPTY
13137: LIST
13138: ST_TO_ADDR
// for i = 1 to pos - 1 do
13139: LD_ADDR_VAR 0 5
13143: PUSH
13144: DOUBLE
13145: LD_INT 1
13147: DEC
13148: ST_TO_ADDR
13149: LD_VAR 0 2
13153: PUSH
13154: LD_INT 1
13156: MINUS
13157: PUSH
13158: FOR_TO
13159: IFFALSE 13204
// begin tmp := tmp [ pos [ i ] ] ;
13161: LD_ADDR_VAR 0 6
13165: PUSH
13166: LD_VAR 0 6
13170: PUSH
13171: LD_VAR 0 2
13175: PUSH
13176: LD_VAR 0 5
13180: ARRAY
13181: ARRAY
13182: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
13183: LD_ADDR_VAR 0 7
13187: PUSH
13188: LD_VAR 0 7
13192: PUSH
13193: LD_VAR 0 6
13197: PUSH
13198: EMPTY
13199: LIST
13200: ADD
13201: ST_TO_ADDR
// end ;
13202: GO 13158
13204: POP
13205: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
13206: LD_ADDR_VAR 0 6
13210: PUSH
13211: LD_VAR 0 6
13215: PPUSH
13216: LD_VAR 0 2
13220: PUSH
13221: LD_VAR 0 2
13225: ARRAY
13226: PPUSH
13227: LD_VAR 0 3
13231: PPUSH
13232: CALL_OW 1
13236: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
13237: LD_ADDR_VAR 0 7
13241: PUSH
13242: LD_VAR 0 7
13246: PPUSH
13247: LD_VAR 0 7
13251: PPUSH
13252: LD_VAR 0 6
13256: PPUSH
13257: CALL_OW 1
13261: ST_TO_ADDR
// for i = s_arr downto 2 do
13262: LD_ADDR_VAR 0 5
13266: PUSH
13267: DOUBLE
13268: LD_VAR 0 7
13272: INC
13273: ST_TO_ADDR
13274: LD_INT 2
13276: PUSH
13277: FOR_DOWNTO
13278: IFFALSE 13362
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
13280: LD_ADDR_VAR 0 6
13284: PUSH
13285: LD_VAR 0 7
13289: PUSH
13290: LD_VAR 0 5
13294: PUSH
13295: LD_INT 1
13297: MINUS
13298: ARRAY
13299: PPUSH
13300: LD_VAR 0 2
13304: PUSH
13305: LD_VAR 0 5
13309: PUSH
13310: LD_INT 1
13312: MINUS
13313: ARRAY
13314: PPUSH
13315: LD_VAR 0 7
13319: PUSH
13320: LD_VAR 0 5
13324: ARRAY
13325: PPUSH
13326: CALL_OW 1
13330: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
13331: LD_ADDR_VAR 0 7
13335: PUSH
13336: LD_VAR 0 7
13340: PPUSH
13341: LD_VAR 0 5
13345: PUSH
13346: LD_INT 1
13348: MINUS
13349: PPUSH
13350: LD_VAR 0 6
13354: PPUSH
13355: CALL_OW 1
13359: ST_TO_ADDR
// end ;
13360: GO 13277
13362: POP
13363: POP
// result := s_arr [ 1 ] ;
13364: LD_ADDR_VAR 0 4
13368: PUSH
13369: LD_VAR 0 7
13373: PUSH
13374: LD_INT 1
13376: ARRAY
13377: ST_TO_ADDR
// end ; end ;
13378: LD_VAR 0 4
13382: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
13383: LD_INT 0
13385: PPUSH
13386: PPUSH
// if not list then
13387: LD_VAR 0 1
13391: NOT
13392: IFFALSE 13396
// exit ;
13394: GO 13487
// i := list [ pos1 ] ;
13396: LD_ADDR_VAR 0 5
13400: PUSH
13401: LD_VAR 0 1
13405: PUSH
13406: LD_VAR 0 2
13410: ARRAY
13411: ST_TO_ADDR
// if not i then
13412: LD_VAR 0 5
13416: NOT
13417: IFFALSE 13421
// exit ;
13419: GO 13487
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
13421: LD_ADDR_VAR 0 1
13425: PUSH
13426: LD_VAR 0 1
13430: PPUSH
13431: LD_VAR 0 2
13435: PPUSH
13436: LD_VAR 0 1
13440: PUSH
13441: LD_VAR 0 3
13445: ARRAY
13446: PPUSH
13447: CALL_OW 1
13451: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
13452: LD_ADDR_VAR 0 1
13456: PUSH
13457: LD_VAR 0 1
13461: PPUSH
13462: LD_VAR 0 3
13466: PPUSH
13467: LD_VAR 0 5
13471: PPUSH
13472: CALL_OW 1
13476: ST_TO_ADDR
// result := list ;
13477: LD_ADDR_VAR 0 4
13481: PUSH
13482: LD_VAR 0 1
13486: ST_TO_ADDR
// end ;
13487: LD_VAR 0 4
13491: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
13492: LD_INT 0
13494: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
13495: LD_ADDR_VAR 0 5
13499: PUSH
13500: LD_VAR 0 1
13504: PPUSH
13505: CALL_OW 250
13509: PPUSH
13510: LD_VAR 0 1
13514: PPUSH
13515: CALL_OW 251
13519: PPUSH
13520: LD_VAR 0 2
13524: PPUSH
13525: LD_VAR 0 3
13529: PPUSH
13530: LD_VAR 0 4
13534: PPUSH
13535: CALL 13545 0 5
13539: ST_TO_ADDR
// end ;
13540: LD_VAR 0 5
13544: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
13545: LD_INT 0
13547: PPUSH
13548: PPUSH
13549: PPUSH
13550: PPUSH
// if not list then
13551: LD_VAR 0 3
13555: NOT
13556: IFFALSE 13560
// exit ;
13558: GO 13948
// result := [ ] ;
13560: LD_ADDR_VAR 0 6
13564: PUSH
13565: EMPTY
13566: ST_TO_ADDR
// for i in list do
13567: LD_ADDR_VAR 0 7
13571: PUSH
13572: LD_VAR 0 3
13576: PUSH
13577: FOR_IN
13578: IFFALSE 13780
// begin tmp := GetDistUnitXY ( i , x , y ) ;
13580: LD_ADDR_VAR 0 9
13584: PUSH
13585: LD_VAR 0 7
13589: PPUSH
13590: LD_VAR 0 1
13594: PPUSH
13595: LD_VAR 0 2
13599: PPUSH
13600: CALL_OW 297
13604: ST_TO_ADDR
// if not result then
13605: LD_VAR 0 6
13609: NOT
13610: IFFALSE 13636
// result := [ [ i , tmp ] ] else
13612: LD_ADDR_VAR 0 6
13616: PUSH
13617: LD_VAR 0 7
13621: PUSH
13622: LD_VAR 0 9
13626: PUSH
13627: EMPTY
13628: LIST
13629: LIST
13630: PUSH
13631: EMPTY
13632: LIST
13633: ST_TO_ADDR
13634: GO 13778
// begin if result [ result ] [ 2 ] < tmp then
13636: LD_VAR 0 6
13640: PUSH
13641: LD_VAR 0 6
13645: ARRAY
13646: PUSH
13647: LD_INT 2
13649: ARRAY
13650: PUSH
13651: LD_VAR 0 9
13655: LESS
13656: IFFALSE 13698
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
13658: LD_ADDR_VAR 0 6
13662: PUSH
13663: LD_VAR 0 6
13667: PPUSH
13668: LD_VAR 0 6
13672: PUSH
13673: LD_INT 1
13675: PLUS
13676: PPUSH
13677: LD_VAR 0 7
13681: PUSH
13682: LD_VAR 0 9
13686: PUSH
13687: EMPTY
13688: LIST
13689: LIST
13690: PPUSH
13691: CALL_OW 2
13695: ST_TO_ADDR
13696: GO 13778
// for j = 1 to result do
13698: LD_ADDR_VAR 0 8
13702: PUSH
13703: DOUBLE
13704: LD_INT 1
13706: DEC
13707: ST_TO_ADDR
13708: LD_VAR 0 6
13712: PUSH
13713: FOR_TO
13714: IFFALSE 13776
// begin if tmp < result [ j ] [ 2 ] then
13716: LD_VAR 0 9
13720: PUSH
13721: LD_VAR 0 6
13725: PUSH
13726: LD_VAR 0 8
13730: ARRAY
13731: PUSH
13732: LD_INT 2
13734: ARRAY
13735: LESS
13736: IFFALSE 13774
// begin result := Insert ( result , j , [ i , tmp ] ) ;
13738: LD_ADDR_VAR 0 6
13742: PUSH
13743: LD_VAR 0 6
13747: PPUSH
13748: LD_VAR 0 8
13752: PPUSH
13753: LD_VAR 0 7
13757: PUSH
13758: LD_VAR 0 9
13762: PUSH
13763: EMPTY
13764: LIST
13765: LIST
13766: PPUSH
13767: CALL_OW 2
13771: ST_TO_ADDR
// break ;
13772: GO 13776
// end ; end ;
13774: GO 13713
13776: POP
13777: POP
// end ; end ;
13778: GO 13577
13780: POP
13781: POP
// if result and not asc then
13782: LD_VAR 0 6
13786: PUSH
13787: LD_VAR 0 4
13791: NOT
13792: AND
13793: IFFALSE 13868
// begin tmp := result ;
13795: LD_ADDR_VAR 0 9
13799: PUSH
13800: LD_VAR 0 6
13804: ST_TO_ADDR
// for i = tmp downto 1 do
13805: LD_ADDR_VAR 0 7
13809: PUSH
13810: DOUBLE
13811: LD_VAR 0 9
13815: INC
13816: ST_TO_ADDR
13817: LD_INT 1
13819: PUSH
13820: FOR_DOWNTO
13821: IFFALSE 13866
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
13823: LD_ADDR_VAR 0 6
13827: PUSH
13828: LD_VAR 0 6
13832: PPUSH
13833: LD_VAR 0 9
13837: PUSH
13838: LD_VAR 0 7
13842: MINUS
13843: PUSH
13844: LD_INT 1
13846: PLUS
13847: PPUSH
13848: LD_VAR 0 9
13852: PUSH
13853: LD_VAR 0 7
13857: ARRAY
13858: PPUSH
13859: CALL_OW 1
13863: ST_TO_ADDR
13864: GO 13820
13866: POP
13867: POP
// end ; tmp := [ ] ;
13868: LD_ADDR_VAR 0 9
13872: PUSH
13873: EMPTY
13874: ST_TO_ADDR
// if mode then
13875: LD_VAR 0 5
13879: IFFALSE 13948
// begin for i = 1 to result do
13881: LD_ADDR_VAR 0 7
13885: PUSH
13886: DOUBLE
13887: LD_INT 1
13889: DEC
13890: ST_TO_ADDR
13891: LD_VAR 0 6
13895: PUSH
13896: FOR_TO
13897: IFFALSE 13936
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
13899: LD_ADDR_VAR 0 9
13903: PUSH
13904: LD_VAR 0 9
13908: PPUSH
13909: LD_VAR 0 7
13913: PPUSH
13914: LD_VAR 0 6
13918: PUSH
13919: LD_VAR 0 7
13923: ARRAY
13924: PUSH
13925: LD_INT 1
13927: ARRAY
13928: PPUSH
13929: CALL_OW 1
13933: ST_TO_ADDR
13934: GO 13896
13936: POP
13937: POP
// result := tmp ;
13938: LD_ADDR_VAR 0 6
13942: PUSH
13943: LD_VAR 0 9
13947: ST_TO_ADDR
// end ; end ;
13948: LD_VAR 0 6
13952: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
13953: LD_INT 0
13955: PPUSH
13956: PPUSH
13957: PPUSH
13958: PPUSH
13959: PPUSH
13960: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
13961: LD_ADDR_VAR 0 5
13965: PUSH
13966: LD_INT 0
13968: PUSH
13969: LD_INT 0
13971: PUSH
13972: LD_INT 0
13974: PUSH
13975: EMPTY
13976: PUSH
13977: EMPTY
13978: LIST
13979: LIST
13980: LIST
13981: LIST
13982: ST_TO_ADDR
// if not x or not y then
13983: LD_VAR 0 2
13987: NOT
13988: PUSH
13989: LD_VAR 0 3
13993: NOT
13994: OR
13995: IFFALSE 13999
// exit ;
13997: GO 15645
// if not range then
13999: LD_VAR 0 4
14003: NOT
14004: IFFALSE 14014
// range := 10 ;
14006: LD_ADDR_VAR 0 4
14010: PUSH
14011: LD_INT 10
14013: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
14014: LD_ADDR_VAR 0 8
14018: PUSH
14019: LD_INT 81
14021: PUSH
14022: LD_VAR 0 1
14026: PUSH
14027: EMPTY
14028: LIST
14029: LIST
14030: PUSH
14031: LD_INT 92
14033: PUSH
14034: LD_VAR 0 2
14038: PUSH
14039: LD_VAR 0 3
14043: PUSH
14044: LD_VAR 0 4
14048: PUSH
14049: EMPTY
14050: LIST
14051: LIST
14052: LIST
14053: LIST
14054: PUSH
14055: LD_INT 3
14057: PUSH
14058: LD_INT 21
14060: PUSH
14061: LD_INT 3
14063: PUSH
14064: EMPTY
14065: LIST
14066: LIST
14067: PUSH
14068: EMPTY
14069: LIST
14070: LIST
14071: PUSH
14072: EMPTY
14073: LIST
14074: LIST
14075: LIST
14076: PPUSH
14077: CALL_OW 69
14081: ST_TO_ADDR
// if not tmp then
14082: LD_VAR 0 8
14086: NOT
14087: IFFALSE 14091
// exit ;
14089: GO 15645
// for i in tmp do
14091: LD_ADDR_VAR 0 6
14095: PUSH
14096: LD_VAR 0 8
14100: PUSH
14101: FOR_IN
14102: IFFALSE 15620
// begin points := [ 0 , 0 , 0 ] ;
14104: LD_ADDR_VAR 0 9
14108: PUSH
14109: LD_INT 0
14111: PUSH
14112: LD_INT 0
14114: PUSH
14115: LD_INT 0
14117: PUSH
14118: EMPTY
14119: LIST
14120: LIST
14121: LIST
14122: ST_TO_ADDR
// bpoints := 1 ;
14123: LD_ADDR_VAR 0 10
14127: PUSH
14128: LD_INT 1
14130: ST_TO_ADDR
// case GetType ( i ) of unit_human :
14131: LD_VAR 0 6
14135: PPUSH
14136: CALL_OW 247
14140: PUSH
14141: LD_INT 1
14143: DOUBLE
14144: EQUAL
14145: IFTRUE 14149
14147: GO 14727
14149: POP
// begin if GetClass ( i ) = 1 then
14150: LD_VAR 0 6
14154: PPUSH
14155: CALL_OW 257
14159: PUSH
14160: LD_INT 1
14162: EQUAL
14163: IFFALSE 14184
// points := [ 10 , 5 , 3 ] ;
14165: LD_ADDR_VAR 0 9
14169: PUSH
14170: LD_INT 10
14172: PUSH
14173: LD_INT 5
14175: PUSH
14176: LD_INT 3
14178: PUSH
14179: EMPTY
14180: LIST
14181: LIST
14182: LIST
14183: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
14184: LD_VAR 0 6
14188: PPUSH
14189: CALL_OW 257
14193: PUSH
14194: LD_INT 2
14196: PUSH
14197: LD_INT 3
14199: PUSH
14200: LD_INT 4
14202: PUSH
14203: EMPTY
14204: LIST
14205: LIST
14206: LIST
14207: IN
14208: IFFALSE 14229
// points := [ 3 , 2 , 1 ] ;
14210: LD_ADDR_VAR 0 9
14214: PUSH
14215: LD_INT 3
14217: PUSH
14218: LD_INT 2
14220: PUSH
14221: LD_INT 1
14223: PUSH
14224: EMPTY
14225: LIST
14226: LIST
14227: LIST
14228: ST_TO_ADDR
// if GetClass ( i ) = 5 then
14229: LD_VAR 0 6
14233: PPUSH
14234: CALL_OW 257
14238: PUSH
14239: LD_INT 5
14241: EQUAL
14242: IFFALSE 14263
// points := [ 130 , 5 , 2 ] ;
14244: LD_ADDR_VAR 0 9
14248: PUSH
14249: LD_INT 130
14251: PUSH
14252: LD_INT 5
14254: PUSH
14255: LD_INT 2
14257: PUSH
14258: EMPTY
14259: LIST
14260: LIST
14261: LIST
14262: ST_TO_ADDR
// if GetClass ( i ) = 8 then
14263: LD_VAR 0 6
14267: PPUSH
14268: CALL_OW 257
14272: PUSH
14273: LD_INT 8
14275: EQUAL
14276: IFFALSE 14297
// points := [ 35 , 35 , 30 ] ;
14278: LD_ADDR_VAR 0 9
14282: PUSH
14283: LD_INT 35
14285: PUSH
14286: LD_INT 35
14288: PUSH
14289: LD_INT 30
14291: PUSH
14292: EMPTY
14293: LIST
14294: LIST
14295: LIST
14296: ST_TO_ADDR
// if GetClass ( i ) = 9 then
14297: LD_VAR 0 6
14301: PPUSH
14302: CALL_OW 257
14306: PUSH
14307: LD_INT 9
14309: EQUAL
14310: IFFALSE 14331
// points := [ 20 , 55 , 40 ] ;
14312: LD_ADDR_VAR 0 9
14316: PUSH
14317: LD_INT 20
14319: PUSH
14320: LD_INT 55
14322: PUSH
14323: LD_INT 40
14325: PUSH
14326: EMPTY
14327: LIST
14328: LIST
14329: LIST
14330: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
14331: LD_VAR 0 6
14335: PPUSH
14336: CALL_OW 257
14340: PUSH
14341: LD_INT 12
14343: PUSH
14344: LD_INT 16
14346: PUSH
14347: EMPTY
14348: LIST
14349: LIST
14350: IN
14351: IFFALSE 14372
// points := [ 5 , 3 , 2 ] ;
14353: LD_ADDR_VAR 0 9
14357: PUSH
14358: LD_INT 5
14360: PUSH
14361: LD_INT 3
14363: PUSH
14364: LD_INT 2
14366: PUSH
14367: EMPTY
14368: LIST
14369: LIST
14370: LIST
14371: ST_TO_ADDR
// if GetClass ( i ) = 17 then
14372: LD_VAR 0 6
14376: PPUSH
14377: CALL_OW 257
14381: PUSH
14382: LD_INT 17
14384: EQUAL
14385: IFFALSE 14406
// points := [ 100 , 50 , 75 ] ;
14387: LD_ADDR_VAR 0 9
14391: PUSH
14392: LD_INT 100
14394: PUSH
14395: LD_INT 50
14397: PUSH
14398: LD_INT 75
14400: PUSH
14401: EMPTY
14402: LIST
14403: LIST
14404: LIST
14405: ST_TO_ADDR
// if GetClass ( i ) = 15 then
14406: LD_VAR 0 6
14410: PPUSH
14411: CALL_OW 257
14415: PUSH
14416: LD_INT 15
14418: EQUAL
14419: IFFALSE 14440
// points := [ 10 , 5 , 3 ] ;
14421: LD_ADDR_VAR 0 9
14425: PUSH
14426: LD_INT 10
14428: PUSH
14429: LD_INT 5
14431: PUSH
14432: LD_INT 3
14434: PUSH
14435: EMPTY
14436: LIST
14437: LIST
14438: LIST
14439: ST_TO_ADDR
// if GetClass ( i ) = 14 then
14440: LD_VAR 0 6
14444: PPUSH
14445: CALL_OW 257
14449: PUSH
14450: LD_INT 14
14452: EQUAL
14453: IFFALSE 14474
// points := [ 10 , 0 , 0 ] ;
14455: LD_ADDR_VAR 0 9
14459: PUSH
14460: LD_INT 10
14462: PUSH
14463: LD_INT 0
14465: PUSH
14466: LD_INT 0
14468: PUSH
14469: EMPTY
14470: LIST
14471: LIST
14472: LIST
14473: ST_TO_ADDR
// if GetClass ( i ) = 11 then
14474: LD_VAR 0 6
14478: PPUSH
14479: CALL_OW 257
14483: PUSH
14484: LD_INT 11
14486: EQUAL
14487: IFFALSE 14508
// points := [ 30 , 10 , 5 ] ;
14489: LD_ADDR_VAR 0 9
14493: PUSH
14494: LD_INT 30
14496: PUSH
14497: LD_INT 10
14499: PUSH
14500: LD_INT 5
14502: PUSH
14503: EMPTY
14504: LIST
14505: LIST
14506: LIST
14507: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
14508: LD_VAR 0 1
14512: PPUSH
14513: LD_INT 5
14515: PPUSH
14516: CALL_OW 321
14520: PUSH
14521: LD_INT 2
14523: EQUAL
14524: IFFALSE 14541
// bpoints := bpoints * 1.8 ;
14526: LD_ADDR_VAR 0 10
14530: PUSH
14531: LD_VAR 0 10
14535: PUSH
14536: LD_REAL  1.80000000000000E+0000
14539: MUL
14540: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
14541: LD_VAR 0 6
14545: PPUSH
14546: CALL_OW 257
14550: PUSH
14551: LD_INT 1
14553: PUSH
14554: LD_INT 2
14556: PUSH
14557: LD_INT 3
14559: PUSH
14560: LD_INT 4
14562: PUSH
14563: EMPTY
14564: LIST
14565: LIST
14566: LIST
14567: LIST
14568: IN
14569: PUSH
14570: LD_VAR 0 1
14574: PPUSH
14575: LD_INT 51
14577: PPUSH
14578: CALL_OW 321
14582: PUSH
14583: LD_INT 2
14585: EQUAL
14586: AND
14587: IFFALSE 14604
// bpoints := bpoints * 1.2 ;
14589: LD_ADDR_VAR 0 10
14593: PUSH
14594: LD_VAR 0 10
14598: PUSH
14599: LD_REAL  1.20000000000000E+0000
14602: MUL
14603: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
14604: LD_VAR 0 6
14608: PPUSH
14609: CALL_OW 257
14613: PUSH
14614: LD_INT 5
14616: PUSH
14617: LD_INT 7
14619: PUSH
14620: LD_INT 9
14622: PUSH
14623: EMPTY
14624: LIST
14625: LIST
14626: LIST
14627: IN
14628: PUSH
14629: LD_VAR 0 1
14633: PPUSH
14634: LD_INT 52
14636: PPUSH
14637: CALL_OW 321
14641: PUSH
14642: LD_INT 2
14644: EQUAL
14645: AND
14646: IFFALSE 14663
// bpoints := bpoints * 1.5 ;
14648: LD_ADDR_VAR 0 10
14652: PUSH
14653: LD_VAR 0 10
14657: PUSH
14658: LD_REAL  1.50000000000000E+0000
14661: MUL
14662: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
14663: LD_VAR 0 1
14667: PPUSH
14668: LD_INT 66
14670: PPUSH
14671: CALL_OW 321
14675: PUSH
14676: LD_INT 2
14678: EQUAL
14679: IFFALSE 14696
// bpoints := bpoints * 1.1 ;
14681: LD_ADDR_VAR 0 10
14685: PUSH
14686: LD_VAR 0 10
14690: PUSH
14691: LD_REAL  1.10000000000000E+0000
14694: MUL
14695: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
14696: LD_ADDR_VAR 0 10
14700: PUSH
14701: LD_VAR 0 10
14705: PUSH
14706: LD_VAR 0 6
14710: PPUSH
14711: LD_INT 1
14713: PPUSH
14714: CALL_OW 259
14718: PUSH
14719: LD_REAL  1.15000000000000E+0000
14722: MUL
14723: MUL
14724: ST_TO_ADDR
// end ; unit_vehicle :
14725: GO 15549
14727: LD_INT 2
14729: DOUBLE
14730: EQUAL
14731: IFTRUE 14735
14733: GO 15537
14735: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
14736: LD_VAR 0 6
14740: PPUSH
14741: CALL_OW 264
14745: PUSH
14746: LD_INT 2
14748: PUSH
14749: LD_INT 42
14751: PUSH
14752: LD_INT 24
14754: PUSH
14755: EMPTY
14756: LIST
14757: LIST
14758: LIST
14759: IN
14760: IFFALSE 14781
// points := [ 25 , 5 , 3 ] ;
14762: LD_ADDR_VAR 0 9
14766: PUSH
14767: LD_INT 25
14769: PUSH
14770: LD_INT 5
14772: PUSH
14773: LD_INT 3
14775: PUSH
14776: EMPTY
14777: LIST
14778: LIST
14779: LIST
14780: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
14781: LD_VAR 0 6
14785: PPUSH
14786: CALL_OW 264
14790: PUSH
14791: LD_INT 4
14793: PUSH
14794: LD_INT 43
14796: PUSH
14797: LD_INT 25
14799: PUSH
14800: EMPTY
14801: LIST
14802: LIST
14803: LIST
14804: IN
14805: IFFALSE 14826
// points := [ 40 , 15 , 5 ] ;
14807: LD_ADDR_VAR 0 9
14811: PUSH
14812: LD_INT 40
14814: PUSH
14815: LD_INT 15
14817: PUSH
14818: LD_INT 5
14820: PUSH
14821: EMPTY
14822: LIST
14823: LIST
14824: LIST
14825: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
14826: LD_VAR 0 6
14830: PPUSH
14831: CALL_OW 264
14835: PUSH
14836: LD_INT 3
14838: PUSH
14839: LD_INT 23
14841: PUSH
14842: EMPTY
14843: LIST
14844: LIST
14845: IN
14846: IFFALSE 14867
// points := [ 7 , 25 , 8 ] ;
14848: LD_ADDR_VAR 0 9
14852: PUSH
14853: LD_INT 7
14855: PUSH
14856: LD_INT 25
14858: PUSH
14859: LD_INT 8
14861: PUSH
14862: EMPTY
14863: LIST
14864: LIST
14865: LIST
14866: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
14867: LD_VAR 0 6
14871: PPUSH
14872: CALL_OW 264
14876: PUSH
14877: LD_INT 5
14879: PUSH
14880: LD_INT 27
14882: PUSH
14883: LD_INT 44
14885: PUSH
14886: EMPTY
14887: LIST
14888: LIST
14889: LIST
14890: IN
14891: IFFALSE 14912
// points := [ 14 , 50 , 16 ] ;
14893: LD_ADDR_VAR 0 9
14897: PUSH
14898: LD_INT 14
14900: PUSH
14901: LD_INT 50
14903: PUSH
14904: LD_INT 16
14906: PUSH
14907: EMPTY
14908: LIST
14909: LIST
14910: LIST
14911: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
14912: LD_VAR 0 6
14916: PPUSH
14917: CALL_OW 264
14921: PUSH
14922: LD_INT 6
14924: PUSH
14925: LD_INT 46
14927: PUSH
14928: EMPTY
14929: LIST
14930: LIST
14931: IN
14932: IFFALSE 14953
// points := [ 32 , 120 , 70 ] ;
14934: LD_ADDR_VAR 0 9
14938: PUSH
14939: LD_INT 32
14941: PUSH
14942: LD_INT 120
14944: PUSH
14945: LD_INT 70
14947: PUSH
14948: EMPTY
14949: LIST
14950: LIST
14951: LIST
14952: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
14953: LD_VAR 0 6
14957: PPUSH
14958: CALL_OW 264
14962: PUSH
14963: LD_INT 7
14965: PUSH
14966: LD_INT 28
14968: PUSH
14969: LD_INT 45
14971: PUSH
14972: EMPTY
14973: LIST
14974: LIST
14975: LIST
14976: IN
14977: IFFALSE 14998
// points := [ 35 , 20 , 45 ] ;
14979: LD_ADDR_VAR 0 9
14983: PUSH
14984: LD_INT 35
14986: PUSH
14987: LD_INT 20
14989: PUSH
14990: LD_INT 45
14992: PUSH
14993: EMPTY
14994: LIST
14995: LIST
14996: LIST
14997: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
14998: LD_VAR 0 6
15002: PPUSH
15003: CALL_OW 264
15007: PUSH
15008: LD_INT 47
15010: PUSH
15011: EMPTY
15012: LIST
15013: IN
15014: IFFALSE 15035
// points := [ 67 , 45 , 75 ] ;
15016: LD_ADDR_VAR 0 9
15020: PUSH
15021: LD_INT 67
15023: PUSH
15024: LD_INT 45
15026: PUSH
15027: LD_INT 75
15029: PUSH
15030: EMPTY
15031: LIST
15032: LIST
15033: LIST
15034: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
15035: LD_VAR 0 6
15039: PPUSH
15040: CALL_OW 264
15044: PUSH
15045: LD_INT 26
15047: PUSH
15048: EMPTY
15049: LIST
15050: IN
15051: IFFALSE 15072
// points := [ 120 , 30 , 80 ] ;
15053: LD_ADDR_VAR 0 9
15057: PUSH
15058: LD_INT 120
15060: PUSH
15061: LD_INT 30
15063: PUSH
15064: LD_INT 80
15066: PUSH
15067: EMPTY
15068: LIST
15069: LIST
15070: LIST
15071: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
15072: LD_VAR 0 6
15076: PPUSH
15077: CALL_OW 264
15081: PUSH
15082: LD_INT 22
15084: PUSH
15085: EMPTY
15086: LIST
15087: IN
15088: IFFALSE 15109
// points := [ 40 , 1 , 1 ] ;
15090: LD_ADDR_VAR 0 9
15094: PUSH
15095: LD_INT 40
15097: PUSH
15098: LD_INT 1
15100: PUSH
15101: LD_INT 1
15103: PUSH
15104: EMPTY
15105: LIST
15106: LIST
15107: LIST
15108: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
15109: LD_VAR 0 6
15113: PPUSH
15114: CALL_OW 264
15118: PUSH
15119: LD_INT 29
15121: PUSH
15122: EMPTY
15123: LIST
15124: IN
15125: IFFALSE 15146
// points := [ 70 , 200 , 400 ] ;
15127: LD_ADDR_VAR 0 9
15131: PUSH
15132: LD_INT 70
15134: PUSH
15135: LD_INT 200
15137: PUSH
15138: LD_INT 400
15140: PUSH
15141: EMPTY
15142: LIST
15143: LIST
15144: LIST
15145: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
15146: LD_VAR 0 6
15150: PPUSH
15151: CALL_OW 264
15155: PUSH
15156: LD_INT 14
15158: PUSH
15159: LD_INT 53
15161: PUSH
15162: EMPTY
15163: LIST
15164: LIST
15165: IN
15166: IFFALSE 15187
// points := [ 40 , 10 , 20 ] ;
15168: LD_ADDR_VAR 0 9
15172: PUSH
15173: LD_INT 40
15175: PUSH
15176: LD_INT 10
15178: PUSH
15179: LD_INT 20
15181: PUSH
15182: EMPTY
15183: LIST
15184: LIST
15185: LIST
15186: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
15187: LD_VAR 0 6
15191: PPUSH
15192: CALL_OW 264
15196: PUSH
15197: LD_INT 9
15199: PUSH
15200: EMPTY
15201: LIST
15202: IN
15203: IFFALSE 15224
// points := [ 5 , 70 , 20 ] ;
15205: LD_ADDR_VAR 0 9
15209: PUSH
15210: LD_INT 5
15212: PUSH
15213: LD_INT 70
15215: PUSH
15216: LD_INT 20
15218: PUSH
15219: EMPTY
15220: LIST
15221: LIST
15222: LIST
15223: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
15224: LD_VAR 0 6
15228: PPUSH
15229: CALL_OW 264
15233: PUSH
15234: LD_INT 10
15236: PUSH
15237: EMPTY
15238: LIST
15239: IN
15240: IFFALSE 15261
// points := [ 35 , 110 , 70 ] ;
15242: LD_ADDR_VAR 0 9
15246: PUSH
15247: LD_INT 35
15249: PUSH
15250: LD_INT 110
15252: PUSH
15253: LD_INT 70
15255: PUSH
15256: EMPTY
15257: LIST
15258: LIST
15259: LIST
15260: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
15261: LD_VAR 0 6
15265: PPUSH
15266: CALL_OW 265
15270: PUSH
15271: LD_INT 25
15273: EQUAL
15274: IFFALSE 15295
// points := [ 80 , 65 , 100 ] ;
15276: LD_ADDR_VAR 0 9
15280: PUSH
15281: LD_INT 80
15283: PUSH
15284: LD_INT 65
15286: PUSH
15287: LD_INT 100
15289: PUSH
15290: EMPTY
15291: LIST
15292: LIST
15293: LIST
15294: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
15295: LD_VAR 0 6
15299: PPUSH
15300: CALL_OW 263
15304: PUSH
15305: LD_INT 1
15307: EQUAL
15308: IFFALSE 15343
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
15310: LD_ADDR_VAR 0 10
15314: PUSH
15315: LD_VAR 0 10
15319: PUSH
15320: LD_VAR 0 6
15324: PPUSH
15325: CALL_OW 311
15329: PPUSH
15330: LD_INT 3
15332: PPUSH
15333: CALL_OW 259
15337: PUSH
15338: LD_INT 4
15340: MUL
15341: MUL
15342: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
15343: LD_VAR 0 6
15347: PPUSH
15348: CALL_OW 263
15352: PUSH
15353: LD_INT 2
15355: EQUAL
15356: IFFALSE 15407
// begin j := IsControledBy ( i ) ;
15358: LD_ADDR_VAR 0 7
15362: PUSH
15363: LD_VAR 0 6
15367: PPUSH
15368: CALL_OW 312
15372: ST_TO_ADDR
// if j then
15373: LD_VAR 0 7
15377: IFFALSE 15407
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
15379: LD_ADDR_VAR 0 10
15383: PUSH
15384: LD_VAR 0 10
15388: PUSH
15389: LD_VAR 0 7
15393: PPUSH
15394: LD_INT 3
15396: PPUSH
15397: CALL_OW 259
15401: PUSH
15402: LD_INT 3
15404: MUL
15405: MUL
15406: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
15407: LD_VAR 0 6
15411: PPUSH
15412: CALL_OW 264
15416: PUSH
15417: LD_INT 5
15419: PUSH
15420: LD_INT 6
15422: PUSH
15423: LD_INT 46
15425: PUSH
15426: LD_INT 44
15428: PUSH
15429: LD_INT 47
15431: PUSH
15432: LD_INT 45
15434: PUSH
15435: LD_INT 28
15437: PUSH
15438: LD_INT 7
15440: PUSH
15441: LD_INT 27
15443: PUSH
15444: LD_INT 29
15446: PUSH
15447: EMPTY
15448: LIST
15449: LIST
15450: LIST
15451: LIST
15452: LIST
15453: LIST
15454: LIST
15455: LIST
15456: LIST
15457: LIST
15458: IN
15459: PUSH
15460: LD_VAR 0 1
15464: PPUSH
15465: LD_INT 52
15467: PPUSH
15468: CALL_OW 321
15472: PUSH
15473: LD_INT 2
15475: EQUAL
15476: AND
15477: IFFALSE 15494
// bpoints := bpoints * 1.2 ;
15479: LD_ADDR_VAR 0 10
15483: PUSH
15484: LD_VAR 0 10
15488: PUSH
15489: LD_REAL  1.20000000000000E+0000
15492: MUL
15493: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
15494: LD_VAR 0 6
15498: PPUSH
15499: CALL_OW 264
15503: PUSH
15504: LD_INT 6
15506: PUSH
15507: LD_INT 46
15509: PUSH
15510: LD_INT 47
15512: PUSH
15513: EMPTY
15514: LIST
15515: LIST
15516: LIST
15517: IN
15518: IFFALSE 15535
// bpoints := bpoints * 1.2 ;
15520: LD_ADDR_VAR 0 10
15524: PUSH
15525: LD_VAR 0 10
15529: PUSH
15530: LD_REAL  1.20000000000000E+0000
15533: MUL
15534: ST_TO_ADDR
// end ; unit_building :
15535: GO 15549
15537: LD_INT 3
15539: DOUBLE
15540: EQUAL
15541: IFTRUE 15545
15543: GO 15548
15545: POP
// ; end ;
15546: GO 15549
15548: POP
// for j = 1 to 3 do
15549: LD_ADDR_VAR 0 7
15553: PUSH
15554: DOUBLE
15555: LD_INT 1
15557: DEC
15558: ST_TO_ADDR
15559: LD_INT 3
15561: PUSH
15562: FOR_TO
15563: IFFALSE 15616
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
15565: LD_ADDR_VAR 0 5
15569: PUSH
15570: LD_VAR 0 5
15574: PPUSH
15575: LD_VAR 0 7
15579: PPUSH
15580: LD_VAR 0 5
15584: PUSH
15585: LD_VAR 0 7
15589: ARRAY
15590: PUSH
15591: LD_VAR 0 9
15595: PUSH
15596: LD_VAR 0 7
15600: ARRAY
15601: PUSH
15602: LD_VAR 0 10
15606: MUL
15607: PLUS
15608: PPUSH
15609: CALL_OW 1
15613: ST_TO_ADDR
15614: GO 15562
15616: POP
15617: POP
// end ;
15618: GO 14101
15620: POP
15621: POP
// result := Replace ( result , 4 , tmp ) ;
15622: LD_ADDR_VAR 0 5
15626: PUSH
15627: LD_VAR 0 5
15631: PPUSH
15632: LD_INT 4
15634: PPUSH
15635: LD_VAR 0 8
15639: PPUSH
15640: CALL_OW 1
15644: ST_TO_ADDR
// end ;
15645: LD_VAR 0 5
15649: RET
// export function DangerAtRange ( unit , range ) ; begin
15650: LD_INT 0
15652: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
15653: LD_ADDR_VAR 0 3
15657: PUSH
15658: LD_VAR 0 1
15662: PPUSH
15663: CALL_OW 255
15667: PPUSH
15668: LD_VAR 0 1
15672: PPUSH
15673: CALL_OW 250
15677: PPUSH
15678: LD_VAR 0 1
15682: PPUSH
15683: CALL_OW 251
15687: PPUSH
15688: LD_VAR 0 2
15692: PPUSH
15693: CALL 13953 0 4
15697: ST_TO_ADDR
// end ;
15698: LD_VAR 0 3
15702: RET
// export function DangerInArea ( side , area ) ; begin
15703: LD_INT 0
15705: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
15706: LD_ADDR_VAR 0 3
15710: PUSH
15711: LD_VAR 0 2
15715: PPUSH
15716: LD_INT 81
15718: PUSH
15719: LD_VAR 0 1
15723: PUSH
15724: EMPTY
15725: LIST
15726: LIST
15727: PPUSH
15728: CALL_OW 70
15732: ST_TO_ADDR
// end ;
15733: LD_VAR 0 3
15737: RET
// export function IsExtension ( b ) ; begin
15738: LD_INT 0
15740: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
15741: LD_ADDR_VAR 0 2
15745: PUSH
15746: LD_VAR 0 1
15750: PUSH
15751: LD_INT 23
15753: PUSH
15754: LD_INT 20
15756: PUSH
15757: LD_INT 22
15759: PUSH
15760: LD_INT 17
15762: PUSH
15763: LD_INT 24
15765: PUSH
15766: LD_INT 21
15768: PUSH
15769: LD_INT 19
15771: PUSH
15772: LD_INT 16
15774: PUSH
15775: LD_INT 25
15777: PUSH
15778: LD_INT 18
15780: PUSH
15781: EMPTY
15782: LIST
15783: LIST
15784: LIST
15785: LIST
15786: LIST
15787: LIST
15788: LIST
15789: LIST
15790: LIST
15791: LIST
15792: IN
15793: ST_TO_ADDR
// end ;
15794: LD_VAR 0 2
15798: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
15799: LD_INT 0
15801: PPUSH
15802: PPUSH
15803: PPUSH
// result := [ ] ;
15804: LD_ADDR_VAR 0 4
15808: PUSH
15809: EMPTY
15810: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
15811: LD_ADDR_VAR 0 5
15815: PUSH
15816: LD_VAR 0 2
15820: PPUSH
15821: LD_INT 21
15823: PUSH
15824: LD_INT 3
15826: PUSH
15827: EMPTY
15828: LIST
15829: LIST
15830: PPUSH
15831: CALL_OW 70
15835: ST_TO_ADDR
// if not tmp then
15836: LD_VAR 0 5
15840: NOT
15841: IFFALSE 15845
// exit ;
15843: GO 15909
// if checkLink then
15845: LD_VAR 0 3
15849: IFFALSE 15899
// begin for i in tmp do
15851: LD_ADDR_VAR 0 6
15855: PUSH
15856: LD_VAR 0 5
15860: PUSH
15861: FOR_IN
15862: IFFALSE 15897
// if GetBase ( i ) <> base then
15864: LD_VAR 0 6
15868: PPUSH
15869: CALL_OW 274
15873: PUSH
15874: LD_VAR 0 1
15878: NONEQUAL
15879: IFFALSE 15895
// ComLinkToBase ( base , i ) ;
15881: LD_VAR 0 1
15885: PPUSH
15886: LD_VAR 0 6
15890: PPUSH
15891: CALL_OW 169
15895: GO 15861
15897: POP
15898: POP
// end ; result := tmp ;
15899: LD_ADDR_VAR 0 4
15903: PUSH
15904: LD_VAR 0 5
15908: ST_TO_ADDR
// end ;
15909: LD_VAR 0 4
15913: RET
// export function ComComplete ( units , b ) ; var i ; begin
15914: LD_INT 0
15916: PPUSH
15917: PPUSH
// if not units then
15918: LD_VAR 0 1
15922: NOT
15923: IFFALSE 15927
// exit ;
15925: GO 16017
// for i in units do
15927: LD_ADDR_VAR 0 4
15931: PUSH
15932: LD_VAR 0 1
15936: PUSH
15937: FOR_IN
15938: IFFALSE 16015
// if BuildingStatus ( b ) = bs_build then
15940: LD_VAR 0 2
15944: PPUSH
15945: CALL_OW 461
15949: PUSH
15950: LD_INT 1
15952: EQUAL
15953: IFFALSE 16013
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
15955: LD_VAR 0 4
15959: PPUSH
15960: LD_STRING h
15962: PUSH
15963: LD_VAR 0 2
15967: PPUSH
15968: CALL_OW 250
15972: PUSH
15973: LD_VAR 0 2
15977: PPUSH
15978: CALL_OW 251
15982: PUSH
15983: LD_VAR 0 2
15987: PUSH
15988: LD_INT 0
15990: PUSH
15991: LD_INT 0
15993: PUSH
15994: LD_INT 0
15996: PUSH
15997: EMPTY
15998: LIST
15999: LIST
16000: LIST
16001: LIST
16002: LIST
16003: LIST
16004: LIST
16005: PUSH
16006: EMPTY
16007: LIST
16008: PPUSH
16009: CALL_OW 446
16013: GO 15937
16015: POP
16016: POP
// end ;
16017: LD_VAR 0 3
16021: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
16022: LD_INT 0
16024: PPUSH
16025: PPUSH
16026: PPUSH
16027: PPUSH
16028: PPUSH
16029: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
16030: LD_VAR 0 1
16034: NOT
16035: PUSH
16036: LD_VAR 0 1
16040: PPUSH
16041: CALL_OW 263
16045: PUSH
16046: LD_INT 2
16048: EQUAL
16049: NOT
16050: OR
16051: IFFALSE 16055
// exit ;
16053: GO 16371
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
16055: LD_ADDR_VAR 0 6
16059: PUSH
16060: LD_INT 22
16062: PUSH
16063: LD_VAR 0 1
16067: PPUSH
16068: CALL_OW 255
16072: PUSH
16073: EMPTY
16074: LIST
16075: LIST
16076: PUSH
16077: LD_INT 2
16079: PUSH
16080: LD_INT 30
16082: PUSH
16083: LD_INT 36
16085: PUSH
16086: EMPTY
16087: LIST
16088: LIST
16089: PUSH
16090: LD_INT 34
16092: PUSH
16093: LD_INT 31
16095: PUSH
16096: EMPTY
16097: LIST
16098: LIST
16099: PUSH
16100: EMPTY
16101: LIST
16102: LIST
16103: LIST
16104: PUSH
16105: EMPTY
16106: LIST
16107: LIST
16108: PPUSH
16109: CALL_OW 69
16113: ST_TO_ADDR
// if not tmp then
16114: LD_VAR 0 6
16118: NOT
16119: IFFALSE 16123
// exit ;
16121: GO 16371
// result := [ ] ;
16123: LD_ADDR_VAR 0 2
16127: PUSH
16128: EMPTY
16129: ST_TO_ADDR
// for i in tmp do
16130: LD_ADDR_VAR 0 3
16134: PUSH
16135: LD_VAR 0 6
16139: PUSH
16140: FOR_IN
16141: IFFALSE 16212
// begin t := UnitsInside ( i ) ;
16143: LD_ADDR_VAR 0 4
16147: PUSH
16148: LD_VAR 0 3
16152: PPUSH
16153: CALL_OW 313
16157: ST_TO_ADDR
// if t then
16158: LD_VAR 0 4
16162: IFFALSE 16210
// for j in t do
16164: LD_ADDR_VAR 0 7
16168: PUSH
16169: LD_VAR 0 4
16173: PUSH
16174: FOR_IN
16175: IFFALSE 16208
// result := Insert ( result , result + 1 , j ) ;
16177: LD_ADDR_VAR 0 2
16181: PUSH
16182: LD_VAR 0 2
16186: PPUSH
16187: LD_VAR 0 2
16191: PUSH
16192: LD_INT 1
16194: PLUS
16195: PPUSH
16196: LD_VAR 0 7
16200: PPUSH
16201: CALL_OW 2
16205: ST_TO_ADDR
16206: GO 16174
16208: POP
16209: POP
// end ;
16210: GO 16140
16212: POP
16213: POP
// if not result then
16214: LD_VAR 0 2
16218: NOT
16219: IFFALSE 16223
// exit ;
16221: GO 16371
// mech := result [ 1 ] ;
16223: LD_ADDR_VAR 0 5
16227: PUSH
16228: LD_VAR 0 2
16232: PUSH
16233: LD_INT 1
16235: ARRAY
16236: ST_TO_ADDR
// if result > 1 then
16237: LD_VAR 0 2
16241: PUSH
16242: LD_INT 1
16244: GREATER
16245: IFFALSE 16357
// for i = 2 to result do
16247: LD_ADDR_VAR 0 3
16251: PUSH
16252: DOUBLE
16253: LD_INT 2
16255: DEC
16256: ST_TO_ADDR
16257: LD_VAR 0 2
16261: PUSH
16262: FOR_TO
16263: IFFALSE 16355
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
16265: LD_ADDR_VAR 0 4
16269: PUSH
16270: LD_VAR 0 2
16274: PUSH
16275: LD_VAR 0 3
16279: ARRAY
16280: PPUSH
16281: LD_INT 3
16283: PPUSH
16284: CALL_OW 259
16288: PUSH
16289: LD_VAR 0 2
16293: PUSH
16294: LD_VAR 0 3
16298: ARRAY
16299: PPUSH
16300: CALL_OW 432
16304: MINUS
16305: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
16306: LD_VAR 0 4
16310: PUSH
16311: LD_VAR 0 5
16315: PPUSH
16316: LD_INT 3
16318: PPUSH
16319: CALL_OW 259
16323: PUSH
16324: LD_VAR 0 5
16328: PPUSH
16329: CALL_OW 432
16333: MINUS
16334: GREATEREQUAL
16335: IFFALSE 16353
// mech := result [ i ] ;
16337: LD_ADDR_VAR 0 5
16341: PUSH
16342: LD_VAR 0 2
16346: PUSH
16347: LD_VAR 0 3
16351: ARRAY
16352: ST_TO_ADDR
// end ;
16353: GO 16262
16355: POP
16356: POP
// ComLinkTo ( vehicle , mech ) ;
16357: LD_VAR 0 1
16361: PPUSH
16362: LD_VAR 0 5
16366: PPUSH
16367: CALL_OW 135
// end ;
16371: LD_VAR 0 2
16375: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
16376: LD_INT 0
16378: PPUSH
16379: PPUSH
16380: PPUSH
16381: PPUSH
16382: PPUSH
16383: PPUSH
16384: PPUSH
16385: PPUSH
16386: PPUSH
16387: PPUSH
16388: PPUSH
16389: PPUSH
16390: PPUSH
// result := [ ] ;
16391: LD_ADDR_VAR 0 7
16395: PUSH
16396: EMPTY
16397: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
16398: LD_VAR 0 1
16402: PPUSH
16403: CALL_OW 266
16407: PUSH
16408: LD_INT 0
16410: PUSH
16411: LD_INT 1
16413: PUSH
16414: EMPTY
16415: LIST
16416: LIST
16417: IN
16418: NOT
16419: IFFALSE 16423
// exit ;
16421: GO 18057
// if name then
16423: LD_VAR 0 3
16427: IFFALSE 16443
// SetBName ( base_dep , name ) ;
16429: LD_VAR 0 1
16433: PPUSH
16434: LD_VAR 0 3
16438: PPUSH
16439: CALL_OW 500
// base := GetBase ( base_dep ) ;
16443: LD_ADDR_VAR 0 15
16447: PUSH
16448: LD_VAR 0 1
16452: PPUSH
16453: CALL_OW 274
16457: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
16458: LD_ADDR_VAR 0 16
16462: PUSH
16463: LD_VAR 0 1
16467: PPUSH
16468: CALL_OW 255
16472: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
16473: LD_ADDR_VAR 0 17
16477: PUSH
16478: LD_VAR 0 1
16482: PPUSH
16483: CALL_OW 248
16487: ST_TO_ADDR
// if sources then
16488: LD_VAR 0 5
16492: IFFALSE 16539
// for i = 1 to 3 do
16494: LD_ADDR_VAR 0 8
16498: PUSH
16499: DOUBLE
16500: LD_INT 1
16502: DEC
16503: ST_TO_ADDR
16504: LD_INT 3
16506: PUSH
16507: FOR_TO
16508: IFFALSE 16537
// AddResourceType ( base , i , sources [ i ] ) ;
16510: LD_VAR 0 15
16514: PPUSH
16515: LD_VAR 0 8
16519: PPUSH
16520: LD_VAR 0 5
16524: PUSH
16525: LD_VAR 0 8
16529: ARRAY
16530: PPUSH
16531: CALL_OW 276
16535: GO 16507
16537: POP
16538: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
16539: LD_ADDR_VAR 0 18
16543: PUSH
16544: LD_VAR 0 15
16548: PPUSH
16549: LD_VAR 0 2
16553: PPUSH
16554: LD_INT 1
16556: PPUSH
16557: CALL 15799 0 3
16561: ST_TO_ADDR
// InitHc ;
16562: CALL_OW 19
// InitUc ;
16566: CALL_OW 18
// uc_side := side ;
16570: LD_ADDR_OWVAR 20
16574: PUSH
16575: LD_VAR 0 16
16579: ST_TO_ADDR
// uc_nation := nation ;
16580: LD_ADDR_OWVAR 21
16584: PUSH
16585: LD_VAR 0 17
16589: ST_TO_ADDR
// if buildings then
16590: LD_VAR 0 18
16594: IFFALSE 17916
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
16596: LD_ADDR_VAR 0 19
16600: PUSH
16601: LD_VAR 0 18
16605: PPUSH
16606: LD_INT 2
16608: PUSH
16609: LD_INT 30
16611: PUSH
16612: LD_INT 29
16614: PUSH
16615: EMPTY
16616: LIST
16617: LIST
16618: PUSH
16619: LD_INT 30
16621: PUSH
16622: LD_INT 30
16624: PUSH
16625: EMPTY
16626: LIST
16627: LIST
16628: PUSH
16629: EMPTY
16630: LIST
16631: LIST
16632: LIST
16633: PPUSH
16634: CALL_OW 72
16638: ST_TO_ADDR
// if tmp then
16639: LD_VAR 0 19
16643: IFFALSE 16691
// for i in tmp do
16645: LD_ADDR_VAR 0 8
16649: PUSH
16650: LD_VAR 0 19
16654: PUSH
16655: FOR_IN
16656: IFFALSE 16689
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
16658: LD_VAR 0 8
16662: PPUSH
16663: CALL_OW 250
16667: PPUSH
16668: LD_VAR 0 8
16672: PPUSH
16673: CALL_OW 251
16677: PPUSH
16678: LD_VAR 0 16
16682: PPUSH
16683: CALL_OW 441
16687: GO 16655
16689: POP
16690: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
16691: LD_VAR 0 18
16695: PPUSH
16696: LD_INT 2
16698: PUSH
16699: LD_INT 30
16701: PUSH
16702: LD_INT 32
16704: PUSH
16705: EMPTY
16706: LIST
16707: LIST
16708: PUSH
16709: LD_INT 30
16711: PUSH
16712: LD_INT 33
16714: PUSH
16715: EMPTY
16716: LIST
16717: LIST
16718: PUSH
16719: EMPTY
16720: LIST
16721: LIST
16722: LIST
16723: PPUSH
16724: CALL_OW 72
16728: IFFALSE 16816
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
16730: LD_ADDR_VAR 0 8
16734: PUSH
16735: LD_VAR 0 18
16739: PPUSH
16740: LD_INT 2
16742: PUSH
16743: LD_INT 30
16745: PUSH
16746: LD_INT 32
16748: PUSH
16749: EMPTY
16750: LIST
16751: LIST
16752: PUSH
16753: LD_INT 30
16755: PUSH
16756: LD_INT 33
16758: PUSH
16759: EMPTY
16760: LIST
16761: LIST
16762: PUSH
16763: EMPTY
16764: LIST
16765: LIST
16766: LIST
16767: PPUSH
16768: CALL_OW 72
16772: PUSH
16773: FOR_IN
16774: IFFALSE 16814
// begin if not GetBWeapon ( i ) then
16776: LD_VAR 0 8
16780: PPUSH
16781: CALL_OW 269
16785: NOT
16786: IFFALSE 16812
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
16788: LD_VAR 0 8
16792: PPUSH
16793: LD_VAR 0 8
16797: PPUSH
16798: LD_VAR 0 2
16802: PPUSH
16803: CALL 18062 0 2
16807: PPUSH
16808: CALL_OW 431
// end ;
16812: GO 16773
16814: POP
16815: POP
// end ; for i = 1 to personel do
16816: LD_ADDR_VAR 0 8
16820: PUSH
16821: DOUBLE
16822: LD_INT 1
16824: DEC
16825: ST_TO_ADDR
16826: LD_VAR 0 6
16830: PUSH
16831: FOR_TO
16832: IFFALSE 17896
// begin if i > 4 then
16834: LD_VAR 0 8
16838: PUSH
16839: LD_INT 4
16841: GREATER
16842: IFFALSE 16846
// break ;
16844: GO 17896
// case i of 1 :
16846: LD_VAR 0 8
16850: PUSH
16851: LD_INT 1
16853: DOUBLE
16854: EQUAL
16855: IFTRUE 16859
16857: GO 16939
16859: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
16860: LD_ADDR_VAR 0 12
16864: PUSH
16865: LD_VAR 0 18
16869: PPUSH
16870: LD_INT 22
16872: PUSH
16873: LD_VAR 0 16
16877: PUSH
16878: EMPTY
16879: LIST
16880: LIST
16881: PUSH
16882: LD_INT 58
16884: PUSH
16885: EMPTY
16886: LIST
16887: PUSH
16888: LD_INT 2
16890: PUSH
16891: LD_INT 30
16893: PUSH
16894: LD_INT 32
16896: PUSH
16897: EMPTY
16898: LIST
16899: LIST
16900: PUSH
16901: LD_INT 30
16903: PUSH
16904: LD_INT 4
16906: PUSH
16907: EMPTY
16908: LIST
16909: LIST
16910: PUSH
16911: LD_INT 30
16913: PUSH
16914: LD_INT 5
16916: PUSH
16917: EMPTY
16918: LIST
16919: LIST
16920: PUSH
16921: EMPTY
16922: LIST
16923: LIST
16924: LIST
16925: LIST
16926: PUSH
16927: EMPTY
16928: LIST
16929: LIST
16930: LIST
16931: PPUSH
16932: CALL_OW 72
16936: ST_TO_ADDR
16937: GO 17161
16939: LD_INT 2
16941: DOUBLE
16942: EQUAL
16943: IFTRUE 16947
16945: GO 17009
16947: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
16948: LD_ADDR_VAR 0 12
16952: PUSH
16953: LD_VAR 0 18
16957: PPUSH
16958: LD_INT 22
16960: PUSH
16961: LD_VAR 0 16
16965: PUSH
16966: EMPTY
16967: LIST
16968: LIST
16969: PUSH
16970: LD_INT 2
16972: PUSH
16973: LD_INT 30
16975: PUSH
16976: LD_INT 0
16978: PUSH
16979: EMPTY
16980: LIST
16981: LIST
16982: PUSH
16983: LD_INT 30
16985: PUSH
16986: LD_INT 1
16988: PUSH
16989: EMPTY
16990: LIST
16991: LIST
16992: PUSH
16993: EMPTY
16994: LIST
16995: LIST
16996: LIST
16997: PUSH
16998: EMPTY
16999: LIST
17000: LIST
17001: PPUSH
17002: CALL_OW 72
17006: ST_TO_ADDR
17007: GO 17161
17009: LD_INT 3
17011: DOUBLE
17012: EQUAL
17013: IFTRUE 17017
17015: GO 17079
17017: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
17018: LD_ADDR_VAR 0 12
17022: PUSH
17023: LD_VAR 0 18
17027: PPUSH
17028: LD_INT 22
17030: PUSH
17031: LD_VAR 0 16
17035: PUSH
17036: EMPTY
17037: LIST
17038: LIST
17039: PUSH
17040: LD_INT 2
17042: PUSH
17043: LD_INT 30
17045: PUSH
17046: LD_INT 2
17048: PUSH
17049: EMPTY
17050: LIST
17051: LIST
17052: PUSH
17053: LD_INT 30
17055: PUSH
17056: LD_INT 3
17058: PUSH
17059: EMPTY
17060: LIST
17061: LIST
17062: PUSH
17063: EMPTY
17064: LIST
17065: LIST
17066: LIST
17067: PUSH
17068: EMPTY
17069: LIST
17070: LIST
17071: PPUSH
17072: CALL_OW 72
17076: ST_TO_ADDR
17077: GO 17161
17079: LD_INT 4
17081: DOUBLE
17082: EQUAL
17083: IFTRUE 17087
17085: GO 17160
17087: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
17088: LD_ADDR_VAR 0 12
17092: PUSH
17093: LD_VAR 0 18
17097: PPUSH
17098: LD_INT 22
17100: PUSH
17101: LD_VAR 0 16
17105: PUSH
17106: EMPTY
17107: LIST
17108: LIST
17109: PUSH
17110: LD_INT 2
17112: PUSH
17113: LD_INT 30
17115: PUSH
17116: LD_INT 6
17118: PUSH
17119: EMPTY
17120: LIST
17121: LIST
17122: PUSH
17123: LD_INT 30
17125: PUSH
17126: LD_INT 7
17128: PUSH
17129: EMPTY
17130: LIST
17131: LIST
17132: PUSH
17133: LD_INT 30
17135: PUSH
17136: LD_INT 8
17138: PUSH
17139: EMPTY
17140: LIST
17141: LIST
17142: PUSH
17143: EMPTY
17144: LIST
17145: LIST
17146: LIST
17147: LIST
17148: PUSH
17149: EMPTY
17150: LIST
17151: LIST
17152: PPUSH
17153: CALL_OW 72
17157: ST_TO_ADDR
17158: GO 17161
17160: POP
// if i = 1 then
17161: LD_VAR 0 8
17165: PUSH
17166: LD_INT 1
17168: EQUAL
17169: IFFALSE 17280
// begin tmp := [ ] ;
17171: LD_ADDR_VAR 0 19
17175: PUSH
17176: EMPTY
17177: ST_TO_ADDR
// for j in f do
17178: LD_ADDR_VAR 0 9
17182: PUSH
17183: LD_VAR 0 12
17187: PUSH
17188: FOR_IN
17189: IFFALSE 17262
// if GetBType ( j ) = b_bunker then
17191: LD_VAR 0 9
17195: PPUSH
17196: CALL_OW 266
17200: PUSH
17201: LD_INT 32
17203: EQUAL
17204: IFFALSE 17231
// tmp := Insert ( tmp , 1 , j ) else
17206: LD_ADDR_VAR 0 19
17210: PUSH
17211: LD_VAR 0 19
17215: PPUSH
17216: LD_INT 1
17218: PPUSH
17219: LD_VAR 0 9
17223: PPUSH
17224: CALL_OW 2
17228: ST_TO_ADDR
17229: GO 17260
// tmp := Insert ( tmp , tmp + 1 , j ) ;
17231: LD_ADDR_VAR 0 19
17235: PUSH
17236: LD_VAR 0 19
17240: PPUSH
17241: LD_VAR 0 19
17245: PUSH
17246: LD_INT 1
17248: PLUS
17249: PPUSH
17250: LD_VAR 0 9
17254: PPUSH
17255: CALL_OW 2
17259: ST_TO_ADDR
17260: GO 17188
17262: POP
17263: POP
// if tmp then
17264: LD_VAR 0 19
17268: IFFALSE 17280
// f := tmp ;
17270: LD_ADDR_VAR 0 12
17274: PUSH
17275: LD_VAR 0 19
17279: ST_TO_ADDR
// end ; x := personel [ i ] ;
17280: LD_ADDR_VAR 0 13
17284: PUSH
17285: LD_VAR 0 6
17289: PUSH
17290: LD_VAR 0 8
17294: ARRAY
17295: ST_TO_ADDR
// if x = - 1 then
17296: LD_VAR 0 13
17300: PUSH
17301: LD_INT 1
17303: NEG
17304: EQUAL
17305: IFFALSE 17514
// begin for j in f do
17307: LD_ADDR_VAR 0 9
17311: PUSH
17312: LD_VAR 0 12
17316: PUSH
17317: FOR_IN
17318: IFFALSE 17510
// repeat InitHc ;
17320: CALL_OW 19
// if GetBType ( j ) = b_barracks then
17324: LD_VAR 0 9
17328: PPUSH
17329: CALL_OW 266
17333: PUSH
17334: LD_INT 5
17336: EQUAL
17337: IFFALSE 17407
// begin if UnitsInside ( j ) < 3 then
17339: LD_VAR 0 9
17343: PPUSH
17344: CALL_OW 313
17348: PUSH
17349: LD_INT 3
17351: LESS
17352: IFFALSE 17388
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
17354: LD_INT 0
17356: PPUSH
17357: LD_INT 5
17359: PUSH
17360: LD_INT 8
17362: PUSH
17363: LD_INT 9
17365: PUSH
17366: EMPTY
17367: LIST
17368: LIST
17369: LIST
17370: PUSH
17371: LD_VAR 0 17
17375: ARRAY
17376: PPUSH
17377: LD_VAR 0 4
17381: PPUSH
17382: CALL_OW 380
17386: GO 17405
// PrepareHuman ( false , i , skill ) ;
17388: LD_INT 0
17390: PPUSH
17391: LD_VAR 0 8
17395: PPUSH
17396: LD_VAR 0 4
17400: PPUSH
17401: CALL_OW 380
// end else
17405: GO 17424
// PrepareHuman ( false , i , skill ) ;
17407: LD_INT 0
17409: PPUSH
17410: LD_VAR 0 8
17414: PPUSH
17415: LD_VAR 0 4
17419: PPUSH
17420: CALL_OW 380
// un := CreateHuman ;
17424: LD_ADDR_VAR 0 14
17428: PUSH
17429: CALL_OW 44
17433: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
17434: LD_ADDR_VAR 0 7
17438: PUSH
17439: LD_VAR 0 7
17443: PPUSH
17444: LD_INT 1
17446: PPUSH
17447: LD_VAR 0 14
17451: PPUSH
17452: CALL_OW 2
17456: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
17457: LD_VAR 0 14
17461: PPUSH
17462: LD_VAR 0 9
17466: PPUSH
17467: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
17471: LD_VAR 0 9
17475: PPUSH
17476: CALL_OW 313
17480: PUSH
17481: LD_INT 6
17483: EQUAL
17484: PUSH
17485: LD_VAR 0 9
17489: PPUSH
17490: CALL_OW 266
17494: PUSH
17495: LD_INT 32
17497: PUSH
17498: LD_INT 31
17500: PUSH
17501: EMPTY
17502: LIST
17503: LIST
17504: IN
17505: OR
17506: IFFALSE 17320
17508: GO 17317
17510: POP
17511: POP
// end else
17512: GO 17894
// for j = 1 to x do
17514: LD_ADDR_VAR 0 9
17518: PUSH
17519: DOUBLE
17520: LD_INT 1
17522: DEC
17523: ST_TO_ADDR
17524: LD_VAR 0 13
17528: PUSH
17529: FOR_TO
17530: IFFALSE 17892
// begin InitHc ;
17532: CALL_OW 19
// if not f then
17536: LD_VAR 0 12
17540: NOT
17541: IFFALSE 17630
// begin PrepareHuman ( false , i , skill ) ;
17543: LD_INT 0
17545: PPUSH
17546: LD_VAR 0 8
17550: PPUSH
17551: LD_VAR 0 4
17555: PPUSH
17556: CALL_OW 380
// un := CreateHuman ;
17560: LD_ADDR_VAR 0 14
17564: PUSH
17565: CALL_OW 44
17569: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
17570: LD_ADDR_VAR 0 7
17574: PUSH
17575: LD_VAR 0 7
17579: PPUSH
17580: LD_INT 1
17582: PPUSH
17583: LD_VAR 0 14
17587: PPUSH
17588: CALL_OW 2
17592: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
17593: LD_VAR 0 14
17597: PPUSH
17598: LD_VAR 0 1
17602: PPUSH
17603: CALL_OW 250
17607: PPUSH
17608: LD_VAR 0 1
17612: PPUSH
17613: CALL_OW 251
17617: PPUSH
17618: LD_INT 10
17620: PPUSH
17621: LD_INT 0
17623: PPUSH
17624: CALL_OW 50
// continue ;
17628: GO 17529
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
17630: LD_VAR 0 12
17634: PUSH
17635: LD_INT 1
17637: ARRAY
17638: PPUSH
17639: CALL_OW 313
17643: PUSH
17644: LD_VAR 0 12
17648: PUSH
17649: LD_INT 1
17651: ARRAY
17652: PPUSH
17653: CALL_OW 266
17657: PUSH
17658: LD_INT 32
17660: PUSH
17661: LD_INT 31
17663: PUSH
17664: EMPTY
17665: LIST
17666: LIST
17667: IN
17668: AND
17669: PUSH
17670: LD_VAR 0 12
17674: PUSH
17675: LD_INT 1
17677: ARRAY
17678: PPUSH
17679: CALL_OW 313
17683: PUSH
17684: LD_INT 6
17686: EQUAL
17687: OR
17688: IFFALSE 17708
// f := Delete ( f , 1 ) ;
17690: LD_ADDR_VAR 0 12
17694: PUSH
17695: LD_VAR 0 12
17699: PPUSH
17700: LD_INT 1
17702: PPUSH
17703: CALL_OW 3
17707: ST_TO_ADDR
// if not f then
17708: LD_VAR 0 12
17712: NOT
17713: IFFALSE 17731
// begin x := x + 2 ;
17715: LD_ADDR_VAR 0 13
17719: PUSH
17720: LD_VAR 0 13
17724: PUSH
17725: LD_INT 2
17727: PLUS
17728: ST_TO_ADDR
// continue ;
17729: GO 17529
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
17731: LD_VAR 0 12
17735: PUSH
17736: LD_INT 1
17738: ARRAY
17739: PPUSH
17740: CALL_OW 266
17744: PUSH
17745: LD_INT 5
17747: EQUAL
17748: IFFALSE 17822
// begin if UnitsInside ( f [ 1 ] ) < 3 then
17750: LD_VAR 0 12
17754: PUSH
17755: LD_INT 1
17757: ARRAY
17758: PPUSH
17759: CALL_OW 313
17763: PUSH
17764: LD_INT 3
17766: LESS
17767: IFFALSE 17803
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
17769: LD_INT 0
17771: PPUSH
17772: LD_INT 5
17774: PUSH
17775: LD_INT 8
17777: PUSH
17778: LD_INT 9
17780: PUSH
17781: EMPTY
17782: LIST
17783: LIST
17784: LIST
17785: PUSH
17786: LD_VAR 0 17
17790: ARRAY
17791: PPUSH
17792: LD_VAR 0 4
17796: PPUSH
17797: CALL_OW 380
17801: GO 17820
// PrepareHuman ( false , i , skill ) ;
17803: LD_INT 0
17805: PPUSH
17806: LD_VAR 0 8
17810: PPUSH
17811: LD_VAR 0 4
17815: PPUSH
17816: CALL_OW 380
// end else
17820: GO 17839
// PrepareHuman ( false , i , skill ) ;
17822: LD_INT 0
17824: PPUSH
17825: LD_VAR 0 8
17829: PPUSH
17830: LD_VAR 0 4
17834: PPUSH
17835: CALL_OW 380
// un := CreateHuman ;
17839: LD_ADDR_VAR 0 14
17843: PUSH
17844: CALL_OW 44
17848: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
17849: LD_ADDR_VAR 0 7
17853: PUSH
17854: LD_VAR 0 7
17858: PPUSH
17859: LD_INT 1
17861: PPUSH
17862: LD_VAR 0 14
17866: PPUSH
17867: CALL_OW 2
17871: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
17872: LD_VAR 0 14
17876: PPUSH
17877: LD_VAR 0 12
17881: PUSH
17882: LD_INT 1
17884: ARRAY
17885: PPUSH
17886: CALL_OW 52
// end ;
17890: GO 17529
17892: POP
17893: POP
// end ;
17894: GO 16831
17896: POP
17897: POP
// result := result ^ buildings ;
17898: LD_ADDR_VAR 0 7
17902: PUSH
17903: LD_VAR 0 7
17907: PUSH
17908: LD_VAR 0 18
17912: ADD
17913: ST_TO_ADDR
// end else
17914: GO 18057
// begin for i = 1 to personel do
17916: LD_ADDR_VAR 0 8
17920: PUSH
17921: DOUBLE
17922: LD_INT 1
17924: DEC
17925: ST_TO_ADDR
17926: LD_VAR 0 6
17930: PUSH
17931: FOR_TO
17932: IFFALSE 18055
// begin if i > 4 then
17934: LD_VAR 0 8
17938: PUSH
17939: LD_INT 4
17941: GREATER
17942: IFFALSE 17946
// break ;
17944: GO 18055
// x := personel [ i ] ;
17946: LD_ADDR_VAR 0 13
17950: PUSH
17951: LD_VAR 0 6
17955: PUSH
17956: LD_VAR 0 8
17960: ARRAY
17961: ST_TO_ADDR
// if x = - 1 then
17962: LD_VAR 0 13
17966: PUSH
17967: LD_INT 1
17969: NEG
17970: EQUAL
17971: IFFALSE 17975
// continue ;
17973: GO 17931
// PrepareHuman ( false , i , skill ) ;
17975: LD_INT 0
17977: PPUSH
17978: LD_VAR 0 8
17982: PPUSH
17983: LD_VAR 0 4
17987: PPUSH
17988: CALL_OW 380
// un := CreateHuman ;
17992: LD_ADDR_VAR 0 14
17996: PUSH
17997: CALL_OW 44
18001: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
18002: LD_VAR 0 14
18006: PPUSH
18007: LD_VAR 0 1
18011: PPUSH
18012: CALL_OW 250
18016: PPUSH
18017: LD_VAR 0 1
18021: PPUSH
18022: CALL_OW 251
18026: PPUSH
18027: LD_INT 10
18029: PPUSH
18030: LD_INT 0
18032: PPUSH
18033: CALL_OW 50
// result := result ^ un ;
18037: LD_ADDR_VAR 0 7
18041: PUSH
18042: LD_VAR 0 7
18046: PUSH
18047: LD_VAR 0 14
18051: ADD
18052: ST_TO_ADDR
// end ;
18053: GO 17931
18055: POP
18056: POP
// end ; end ;
18057: LD_VAR 0 7
18061: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
18062: LD_INT 0
18064: PPUSH
18065: PPUSH
18066: PPUSH
18067: PPUSH
18068: PPUSH
18069: PPUSH
18070: PPUSH
18071: PPUSH
18072: PPUSH
18073: PPUSH
18074: PPUSH
18075: PPUSH
18076: PPUSH
18077: PPUSH
18078: PPUSH
18079: PPUSH
// result := false ;
18080: LD_ADDR_VAR 0 3
18084: PUSH
18085: LD_INT 0
18087: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
18088: LD_VAR 0 1
18092: NOT
18093: PUSH
18094: LD_VAR 0 1
18098: PPUSH
18099: CALL_OW 266
18103: PUSH
18104: LD_INT 32
18106: PUSH
18107: LD_INT 33
18109: PUSH
18110: EMPTY
18111: LIST
18112: LIST
18113: IN
18114: NOT
18115: OR
18116: IFFALSE 18120
// exit ;
18118: GO 19259
// nat := GetNation ( tower ) ;
18120: LD_ADDR_VAR 0 12
18124: PUSH
18125: LD_VAR 0 1
18129: PPUSH
18130: CALL_OW 248
18134: ST_TO_ADDR
// side := GetSide ( tower ) ;
18135: LD_ADDR_VAR 0 16
18139: PUSH
18140: LD_VAR 0 1
18144: PPUSH
18145: CALL_OW 255
18149: ST_TO_ADDR
// x := GetX ( tower ) ;
18150: LD_ADDR_VAR 0 10
18154: PUSH
18155: LD_VAR 0 1
18159: PPUSH
18160: CALL_OW 250
18164: ST_TO_ADDR
// y := GetY ( tower ) ;
18165: LD_ADDR_VAR 0 11
18169: PUSH
18170: LD_VAR 0 1
18174: PPUSH
18175: CALL_OW 251
18179: ST_TO_ADDR
// if not x or not y then
18180: LD_VAR 0 10
18184: NOT
18185: PUSH
18186: LD_VAR 0 11
18190: NOT
18191: OR
18192: IFFALSE 18196
// exit ;
18194: GO 19259
// weapon := 0 ;
18196: LD_ADDR_VAR 0 18
18200: PUSH
18201: LD_INT 0
18203: ST_TO_ADDR
// fac_list := [ ] ;
18204: LD_ADDR_VAR 0 17
18208: PUSH
18209: EMPTY
18210: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
18211: LD_ADDR_VAR 0 6
18215: PUSH
18216: LD_VAR 0 1
18220: PPUSH
18221: CALL_OW 274
18225: PPUSH
18226: LD_VAR 0 2
18230: PPUSH
18231: LD_INT 0
18233: PPUSH
18234: CALL 15799 0 3
18238: PPUSH
18239: LD_INT 30
18241: PUSH
18242: LD_INT 3
18244: PUSH
18245: EMPTY
18246: LIST
18247: LIST
18248: PPUSH
18249: CALL_OW 72
18253: ST_TO_ADDR
// if not factories then
18254: LD_VAR 0 6
18258: NOT
18259: IFFALSE 18263
// exit ;
18261: GO 19259
// for i in factories do
18263: LD_ADDR_VAR 0 8
18267: PUSH
18268: LD_VAR 0 6
18272: PUSH
18273: FOR_IN
18274: IFFALSE 18299
// fac_list := fac_list union AvailableWeaponList ( i ) ;
18276: LD_ADDR_VAR 0 17
18280: PUSH
18281: LD_VAR 0 17
18285: PUSH
18286: LD_VAR 0 8
18290: PPUSH
18291: CALL_OW 478
18295: UNION
18296: ST_TO_ADDR
18297: GO 18273
18299: POP
18300: POP
// if not fac_list then
18301: LD_VAR 0 17
18305: NOT
18306: IFFALSE 18310
// exit ;
18308: GO 19259
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
18310: LD_ADDR_VAR 0 5
18314: PUSH
18315: LD_INT 4
18317: PUSH
18318: LD_INT 5
18320: PUSH
18321: LD_INT 9
18323: PUSH
18324: LD_INT 10
18326: PUSH
18327: LD_INT 6
18329: PUSH
18330: LD_INT 7
18332: PUSH
18333: LD_INT 11
18335: PUSH
18336: EMPTY
18337: LIST
18338: LIST
18339: LIST
18340: LIST
18341: LIST
18342: LIST
18343: LIST
18344: PUSH
18345: LD_INT 27
18347: PUSH
18348: LD_INT 28
18350: PUSH
18351: LD_INT 26
18353: PUSH
18354: LD_INT 30
18356: PUSH
18357: EMPTY
18358: LIST
18359: LIST
18360: LIST
18361: LIST
18362: PUSH
18363: LD_INT 43
18365: PUSH
18366: LD_INT 44
18368: PUSH
18369: LD_INT 46
18371: PUSH
18372: LD_INT 45
18374: PUSH
18375: LD_INT 47
18377: PUSH
18378: LD_INT 49
18380: PUSH
18381: EMPTY
18382: LIST
18383: LIST
18384: LIST
18385: LIST
18386: LIST
18387: LIST
18388: PUSH
18389: EMPTY
18390: LIST
18391: LIST
18392: LIST
18393: PUSH
18394: LD_VAR 0 12
18398: ARRAY
18399: ST_TO_ADDR
// for i in list do
18400: LD_ADDR_VAR 0 8
18404: PUSH
18405: LD_VAR 0 5
18409: PUSH
18410: FOR_IN
18411: IFFALSE 18444
// if not i in fac_list then
18413: LD_VAR 0 8
18417: PUSH
18418: LD_VAR 0 17
18422: IN
18423: NOT
18424: IFFALSE 18442
// list := list diff i ;
18426: LD_ADDR_VAR 0 5
18430: PUSH
18431: LD_VAR 0 5
18435: PUSH
18436: LD_VAR 0 8
18440: DIFF
18441: ST_TO_ADDR
18442: GO 18410
18444: POP
18445: POP
// if not list then
18446: LD_VAR 0 5
18450: NOT
18451: IFFALSE 18455
// exit ;
18453: GO 19259
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
18455: LD_VAR 0 12
18459: PUSH
18460: LD_INT 3
18462: EQUAL
18463: PUSH
18464: LD_INT 49
18466: PUSH
18467: LD_VAR 0 5
18471: IN
18472: AND
18473: PUSH
18474: LD_INT 31
18476: PPUSH
18477: LD_VAR 0 16
18481: PPUSH
18482: CALL_OW 321
18486: PUSH
18487: LD_INT 2
18489: EQUAL
18490: AND
18491: IFFALSE 18551
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
18493: LD_INT 22
18495: PUSH
18496: LD_VAR 0 16
18500: PUSH
18501: EMPTY
18502: LIST
18503: LIST
18504: PUSH
18505: LD_INT 35
18507: PUSH
18508: LD_INT 49
18510: PUSH
18511: EMPTY
18512: LIST
18513: LIST
18514: PUSH
18515: LD_INT 91
18517: PUSH
18518: LD_VAR 0 1
18522: PUSH
18523: LD_INT 10
18525: PUSH
18526: EMPTY
18527: LIST
18528: LIST
18529: LIST
18530: PUSH
18531: EMPTY
18532: LIST
18533: LIST
18534: LIST
18535: PPUSH
18536: CALL_OW 69
18540: NOT
18541: IFFALSE 18551
// weapon := ru_time_lapser ;
18543: LD_ADDR_VAR 0 18
18547: PUSH
18548: LD_INT 49
18550: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
18551: LD_VAR 0 12
18555: PUSH
18556: LD_INT 1
18558: PUSH
18559: LD_INT 2
18561: PUSH
18562: EMPTY
18563: LIST
18564: LIST
18565: IN
18566: PUSH
18567: LD_INT 11
18569: PUSH
18570: LD_VAR 0 5
18574: IN
18575: PUSH
18576: LD_INT 30
18578: PUSH
18579: LD_VAR 0 5
18583: IN
18584: OR
18585: AND
18586: PUSH
18587: LD_INT 6
18589: PPUSH
18590: LD_VAR 0 16
18594: PPUSH
18595: CALL_OW 321
18599: PUSH
18600: LD_INT 2
18602: EQUAL
18603: AND
18604: IFFALSE 18769
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
18606: LD_INT 22
18608: PUSH
18609: LD_VAR 0 16
18613: PUSH
18614: EMPTY
18615: LIST
18616: LIST
18617: PUSH
18618: LD_INT 2
18620: PUSH
18621: LD_INT 35
18623: PUSH
18624: LD_INT 11
18626: PUSH
18627: EMPTY
18628: LIST
18629: LIST
18630: PUSH
18631: LD_INT 35
18633: PUSH
18634: LD_INT 30
18636: PUSH
18637: EMPTY
18638: LIST
18639: LIST
18640: PUSH
18641: EMPTY
18642: LIST
18643: LIST
18644: LIST
18645: PUSH
18646: LD_INT 91
18648: PUSH
18649: LD_VAR 0 1
18653: PUSH
18654: LD_INT 18
18656: PUSH
18657: EMPTY
18658: LIST
18659: LIST
18660: LIST
18661: PUSH
18662: EMPTY
18663: LIST
18664: LIST
18665: LIST
18666: PPUSH
18667: CALL_OW 69
18671: NOT
18672: PUSH
18673: LD_INT 22
18675: PUSH
18676: LD_VAR 0 16
18680: PUSH
18681: EMPTY
18682: LIST
18683: LIST
18684: PUSH
18685: LD_INT 2
18687: PUSH
18688: LD_INT 30
18690: PUSH
18691: LD_INT 32
18693: PUSH
18694: EMPTY
18695: LIST
18696: LIST
18697: PUSH
18698: LD_INT 30
18700: PUSH
18701: LD_INT 33
18703: PUSH
18704: EMPTY
18705: LIST
18706: LIST
18707: PUSH
18708: EMPTY
18709: LIST
18710: LIST
18711: LIST
18712: PUSH
18713: LD_INT 91
18715: PUSH
18716: LD_VAR 0 1
18720: PUSH
18721: LD_INT 12
18723: PUSH
18724: EMPTY
18725: LIST
18726: LIST
18727: LIST
18728: PUSH
18729: EMPTY
18730: LIST
18731: LIST
18732: LIST
18733: PUSH
18734: EMPTY
18735: LIST
18736: PPUSH
18737: CALL_OW 69
18741: PUSH
18742: LD_INT 2
18744: GREATER
18745: AND
18746: IFFALSE 18769
// weapon := [ us_radar , ar_radar ] [ nat ] ;
18748: LD_ADDR_VAR 0 18
18752: PUSH
18753: LD_INT 11
18755: PUSH
18756: LD_INT 30
18758: PUSH
18759: EMPTY
18760: LIST
18761: LIST
18762: PUSH
18763: LD_VAR 0 12
18767: ARRAY
18768: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
18769: LD_VAR 0 18
18773: NOT
18774: PUSH
18775: LD_INT 40
18777: PPUSH
18778: LD_VAR 0 16
18782: PPUSH
18783: CALL_OW 321
18787: PUSH
18788: LD_INT 2
18790: EQUAL
18791: AND
18792: PUSH
18793: LD_INT 7
18795: PUSH
18796: LD_VAR 0 5
18800: IN
18801: PUSH
18802: LD_INT 28
18804: PUSH
18805: LD_VAR 0 5
18809: IN
18810: OR
18811: PUSH
18812: LD_INT 45
18814: PUSH
18815: LD_VAR 0 5
18819: IN
18820: OR
18821: AND
18822: IFFALSE 19076
// begin hex := GetHexInfo ( x , y ) ;
18824: LD_ADDR_VAR 0 4
18828: PUSH
18829: LD_VAR 0 10
18833: PPUSH
18834: LD_VAR 0 11
18838: PPUSH
18839: CALL_OW 546
18843: ST_TO_ADDR
// if hex [ 1 ] then
18844: LD_VAR 0 4
18848: PUSH
18849: LD_INT 1
18851: ARRAY
18852: IFFALSE 18856
// exit ;
18854: GO 19259
// height := hex [ 2 ] ;
18856: LD_ADDR_VAR 0 15
18860: PUSH
18861: LD_VAR 0 4
18865: PUSH
18866: LD_INT 2
18868: ARRAY
18869: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
18870: LD_ADDR_VAR 0 14
18874: PUSH
18875: LD_INT 0
18877: PUSH
18878: LD_INT 2
18880: PUSH
18881: LD_INT 3
18883: PUSH
18884: LD_INT 5
18886: PUSH
18887: EMPTY
18888: LIST
18889: LIST
18890: LIST
18891: LIST
18892: ST_TO_ADDR
// for i in tmp do
18893: LD_ADDR_VAR 0 8
18897: PUSH
18898: LD_VAR 0 14
18902: PUSH
18903: FOR_IN
18904: IFFALSE 19074
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
18906: LD_ADDR_VAR 0 9
18910: PUSH
18911: LD_VAR 0 10
18915: PPUSH
18916: LD_VAR 0 8
18920: PPUSH
18921: LD_INT 5
18923: PPUSH
18924: CALL_OW 272
18928: PUSH
18929: LD_VAR 0 11
18933: PPUSH
18934: LD_VAR 0 8
18938: PPUSH
18939: LD_INT 5
18941: PPUSH
18942: CALL_OW 273
18946: PUSH
18947: EMPTY
18948: LIST
18949: LIST
18950: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
18951: LD_VAR 0 9
18955: PUSH
18956: LD_INT 1
18958: ARRAY
18959: PPUSH
18960: LD_VAR 0 9
18964: PUSH
18965: LD_INT 2
18967: ARRAY
18968: PPUSH
18969: CALL_OW 488
18973: IFFALSE 19072
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
18975: LD_ADDR_VAR 0 4
18979: PUSH
18980: LD_VAR 0 9
18984: PUSH
18985: LD_INT 1
18987: ARRAY
18988: PPUSH
18989: LD_VAR 0 9
18993: PUSH
18994: LD_INT 2
18996: ARRAY
18997: PPUSH
18998: CALL_OW 546
19002: ST_TO_ADDR
// if hex [ 1 ] then
19003: LD_VAR 0 4
19007: PUSH
19008: LD_INT 1
19010: ARRAY
19011: IFFALSE 19015
// continue ;
19013: GO 18903
// h := hex [ 2 ] ;
19015: LD_ADDR_VAR 0 13
19019: PUSH
19020: LD_VAR 0 4
19024: PUSH
19025: LD_INT 2
19027: ARRAY
19028: ST_TO_ADDR
// if h + 7 < height then
19029: LD_VAR 0 13
19033: PUSH
19034: LD_INT 7
19036: PLUS
19037: PUSH
19038: LD_VAR 0 15
19042: LESS
19043: IFFALSE 19072
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
19045: LD_ADDR_VAR 0 18
19049: PUSH
19050: LD_INT 7
19052: PUSH
19053: LD_INT 28
19055: PUSH
19056: LD_INT 45
19058: PUSH
19059: EMPTY
19060: LIST
19061: LIST
19062: LIST
19063: PUSH
19064: LD_VAR 0 12
19068: ARRAY
19069: ST_TO_ADDR
// break ;
19070: GO 19074
// end ; end ; end ;
19072: GO 18903
19074: POP
19075: POP
// end ; if not weapon then
19076: LD_VAR 0 18
19080: NOT
19081: IFFALSE 19141
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
19083: LD_ADDR_VAR 0 5
19087: PUSH
19088: LD_VAR 0 5
19092: PUSH
19093: LD_INT 11
19095: PUSH
19096: LD_INT 30
19098: PUSH
19099: LD_INT 49
19101: PUSH
19102: EMPTY
19103: LIST
19104: LIST
19105: LIST
19106: DIFF
19107: ST_TO_ADDR
// if not list then
19108: LD_VAR 0 5
19112: NOT
19113: IFFALSE 19117
// exit ;
19115: GO 19259
// weapon := list [ rand ( 1 , list ) ] ;
19117: LD_ADDR_VAR 0 18
19121: PUSH
19122: LD_VAR 0 5
19126: PUSH
19127: LD_INT 1
19129: PPUSH
19130: LD_VAR 0 5
19134: PPUSH
19135: CALL_OW 12
19139: ARRAY
19140: ST_TO_ADDR
// end ; if weapon then
19141: LD_VAR 0 18
19145: IFFALSE 19259
// begin tmp := CostOfWeapon ( weapon ) ;
19147: LD_ADDR_VAR 0 14
19151: PUSH
19152: LD_VAR 0 18
19156: PPUSH
19157: CALL_OW 451
19161: ST_TO_ADDR
// j := GetBase ( tower ) ;
19162: LD_ADDR_VAR 0 9
19166: PUSH
19167: LD_VAR 0 1
19171: PPUSH
19172: CALL_OW 274
19176: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
19177: LD_VAR 0 9
19181: PPUSH
19182: LD_INT 1
19184: PPUSH
19185: CALL_OW 275
19189: PUSH
19190: LD_VAR 0 14
19194: PUSH
19195: LD_INT 1
19197: ARRAY
19198: GREATEREQUAL
19199: PUSH
19200: LD_VAR 0 9
19204: PPUSH
19205: LD_INT 2
19207: PPUSH
19208: CALL_OW 275
19212: PUSH
19213: LD_VAR 0 14
19217: PUSH
19218: LD_INT 2
19220: ARRAY
19221: GREATEREQUAL
19222: AND
19223: PUSH
19224: LD_VAR 0 9
19228: PPUSH
19229: LD_INT 3
19231: PPUSH
19232: CALL_OW 275
19236: PUSH
19237: LD_VAR 0 14
19241: PUSH
19242: LD_INT 3
19244: ARRAY
19245: GREATEREQUAL
19246: AND
19247: IFFALSE 19259
// result := weapon ;
19249: LD_ADDR_VAR 0 3
19253: PUSH
19254: LD_VAR 0 18
19258: ST_TO_ADDR
// end ; end ;
19259: LD_VAR 0 3
19263: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
19264: LD_INT 0
19266: PPUSH
19267: PPUSH
// result := true ;
19268: LD_ADDR_VAR 0 3
19272: PUSH
19273: LD_INT 1
19275: ST_TO_ADDR
// if array1 = array2 then
19276: LD_VAR 0 1
19280: PUSH
19281: LD_VAR 0 2
19285: EQUAL
19286: IFFALSE 19346
// begin for i = 1 to array1 do
19288: LD_ADDR_VAR 0 4
19292: PUSH
19293: DOUBLE
19294: LD_INT 1
19296: DEC
19297: ST_TO_ADDR
19298: LD_VAR 0 1
19302: PUSH
19303: FOR_TO
19304: IFFALSE 19342
// if array1 [ i ] <> array2 [ i ] then
19306: LD_VAR 0 1
19310: PUSH
19311: LD_VAR 0 4
19315: ARRAY
19316: PUSH
19317: LD_VAR 0 2
19321: PUSH
19322: LD_VAR 0 4
19326: ARRAY
19327: NONEQUAL
19328: IFFALSE 19340
// begin result := false ;
19330: LD_ADDR_VAR 0 3
19334: PUSH
19335: LD_INT 0
19337: ST_TO_ADDR
// break ;
19338: GO 19342
// end ;
19340: GO 19303
19342: POP
19343: POP
// end else
19344: GO 19354
// result := false ;
19346: LD_ADDR_VAR 0 3
19350: PUSH
19351: LD_INT 0
19353: ST_TO_ADDR
// end ;
19354: LD_VAR 0 3
19358: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
19359: LD_INT 0
19361: PPUSH
19362: PPUSH
// if not array1 or not array2 then
19363: LD_VAR 0 1
19367: NOT
19368: PUSH
19369: LD_VAR 0 2
19373: NOT
19374: OR
19375: IFFALSE 19379
// exit ;
19377: GO 19443
// result := true ;
19379: LD_ADDR_VAR 0 3
19383: PUSH
19384: LD_INT 1
19386: ST_TO_ADDR
// for i = 1 to array1 do
19387: LD_ADDR_VAR 0 4
19391: PUSH
19392: DOUBLE
19393: LD_INT 1
19395: DEC
19396: ST_TO_ADDR
19397: LD_VAR 0 1
19401: PUSH
19402: FOR_TO
19403: IFFALSE 19441
// if array1 [ i ] <> array2 [ i ] then
19405: LD_VAR 0 1
19409: PUSH
19410: LD_VAR 0 4
19414: ARRAY
19415: PUSH
19416: LD_VAR 0 2
19420: PUSH
19421: LD_VAR 0 4
19425: ARRAY
19426: NONEQUAL
19427: IFFALSE 19439
// begin result := false ;
19429: LD_ADDR_VAR 0 3
19433: PUSH
19434: LD_INT 0
19436: ST_TO_ADDR
// break ;
19437: GO 19441
// end ;
19439: GO 19402
19441: POP
19442: POP
// end ;
19443: LD_VAR 0 3
19447: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
19448: LD_INT 0
19450: PPUSH
19451: PPUSH
19452: PPUSH
// pom := GetBase ( fac ) ;
19453: LD_ADDR_VAR 0 5
19457: PUSH
19458: LD_VAR 0 1
19462: PPUSH
19463: CALL_OW 274
19467: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
19468: LD_ADDR_VAR 0 4
19472: PUSH
19473: LD_VAR 0 2
19477: PUSH
19478: LD_INT 1
19480: ARRAY
19481: PPUSH
19482: LD_VAR 0 2
19486: PUSH
19487: LD_INT 2
19489: ARRAY
19490: PPUSH
19491: LD_VAR 0 2
19495: PUSH
19496: LD_INT 3
19498: ARRAY
19499: PPUSH
19500: LD_VAR 0 2
19504: PUSH
19505: LD_INT 4
19507: ARRAY
19508: PPUSH
19509: CALL_OW 449
19513: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
19514: LD_ADDR_VAR 0 3
19518: PUSH
19519: LD_VAR 0 5
19523: PPUSH
19524: LD_INT 1
19526: PPUSH
19527: CALL_OW 275
19531: PUSH
19532: LD_VAR 0 4
19536: PUSH
19537: LD_INT 1
19539: ARRAY
19540: GREATEREQUAL
19541: PUSH
19542: LD_VAR 0 5
19546: PPUSH
19547: LD_INT 2
19549: PPUSH
19550: CALL_OW 275
19554: PUSH
19555: LD_VAR 0 4
19559: PUSH
19560: LD_INT 2
19562: ARRAY
19563: GREATEREQUAL
19564: AND
19565: PUSH
19566: LD_VAR 0 5
19570: PPUSH
19571: LD_INT 3
19573: PPUSH
19574: CALL_OW 275
19578: PUSH
19579: LD_VAR 0 4
19583: PUSH
19584: LD_INT 3
19586: ARRAY
19587: GREATEREQUAL
19588: AND
19589: ST_TO_ADDR
// end ;
19590: LD_VAR 0 3
19594: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
19595: LD_INT 0
19597: PPUSH
19598: PPUSH
19599: PPUSH
19600: PPUSH
// pom := GetBase ( building ) ;
19601: LD_ADDR_VAR 0 3
19605: PUSH
19606: LD_VAR 0 1
19610: PPUSH
19611: CALL_OW 274
19615: ST_TO_ADDR
// if not pom then
19616: LD_VAR 0 3
19620: NOT
19621: IFFALSE 19625
// exit ;
19623: GO 19795
// btype := GetBType ( building ) ;
19625: LD_ADDR_VAR 0 5
19629: PUSH
19630: LD_VAR 0 1
19634: PPUSH
19635: CALL_OW 266
19639: ST_TO_ADDR
// if btype = b_armoury then
19640: LD_VAR 0 5
19644: PUSH
19645: LD_INT 4
19647: EQUAL
19648: IFFALSE 19658
// btype := b_barracks ;
19650: LD_ADDR_VAR 0 5
19654: PUSH
19655: LD_INT 5
19657: ST_TO_ADDR
// if btype = b_depot then
19658: LD_VAR 0 5
19662: PUSH
19663: LD_INT 0
19665: EQUAL
19666: IFFALSE 19676
// btype := b_warehouse ;
19668: LD_ADDR_VAR 0 5
19672: PUSH
19673: LD_INT 1
19675: ST_TO_ADDR
// if btype = b_workshop then
19676: LD_VAR 0 5
19680: PUSH
19681: LD_INT 2
19683: EQUAL
19684: IFFALSE 19694
// btype := b_factory ;
19686: LD_ADDR_VAR 0 5
19690: PUSH
19691: LD_INT 3
19693: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
19694: LD_ADDR_VAR 0 4
19698: PUSH
19699: LD_VAR 0 5
19703: PPUSH
19704: LD_VAR 0 1
19708: PPUSH
19709: CALL_OW 248
19713: PPUSH
19714: CALL_OW 450
19718: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
19719: LD_ADDR_VAR 0 2
19723: PUSH
19724: LD_VAR 0 3
19728: PPUSH
19729: LD_INT 1
19731: PPUSH
19732: CALL_OW 275
19736: PUSH
19737: LD_VAR 0 4
19741: PUSH
19742: LD_INT 1
19744: ARRAY
19745: GREATEREQUAL
19746: PUSH
19747: LD_VAR 0 3
19751: PPUSH
19752: LD_INT 2
19754: PPUSH
19755: CALL_OW 275
19759: PUSH
19760: LD_VAR 0 4
19764: PUSH
19765: LD_INT 2
19767: ARRAY
19768: GREATEREQUAL
19769: AND
19770: PUSH
19771: LD_VAR 0 3
19775: PPUSH
19776: LD_INT 3
19778: PPUSH
19779: CALL_OW 275
19783: PUSH
19784: LD_VAR 0 4
19788: PUSH
19789: LD_INT 3
19791: ARRAY
19792: GREATEREQUAL
19793: AND
19794: ST_TO_ADDR
// end ;
19795: LD_VAR 0 2
19799: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
19800: LD_INT 0
19802: PPUSH
19803: PPUSH
19804: PPUSH
// pom := GetBase ( building ) ;
19805: LD_ADDR_VAR 0 4
19809: PUSH
19810: LD_VAR 0 1
19814: PPUSH
19815: CALL_OW 274
19819: ST_TO_ADDR
// if not pom then
19820: LD_VAR 0 4
19824: NOT
19825: IFFALSE 19829
// exit ;
19827: GO 19930
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
19829: LD_ADDR_VAR 0 5
19833: PUSH
19834: LD_VAR 0 2
19838: PPUSH
19839: LD_VAR 0 1
19843: PPUSH
19844: CALL_OW 248
19848: PPUSH
19849: CALL_OW 450
19853: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
19854: LD_ADDR_VAR 0 3
19858: PUSH
19859: LD_VAR 0 4
19863: PPUSH
19864: LD_INT 1
19866: PPUSH
19867: CALL_OW 275
19871: PUSH
19872: LD_VAR 0 5
19876: PUSH
19877: LD_INT 1
19879: ARRAY
19880: GREATEREQUAL
19881: PUSH
19882: LD_VAR 0 4
19886: PPUSH
19887: LD_INT 2
19889: PPUSH
19890: CALL_OW 275
19894: PUSH
19895: LD_VAR 0 5
19899: PUSH
19900: LD_INT 2
19902: ARRAY
19903: GREATEREQUAL
19904: AND
19905: PUSH
19906: LD_VAR 0 4
19910: PPUSH
19911: LD_INT 3
19913: PPUSH
19914: CALL_OW 275
19918: PUSH
19919: LD_VAR 0 5
19923: PUSH
19924: LD_INT 3
19926: ARRAY
19927: GREATEREQUAL
19928: AND
19929: ST_TO_ADDR
// end ;
19930: LD_VAR 0 3
19934: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
19935: LD_INT 0
19937: PPUSH
19938: PPUSH
19939: PPUSH
19940: PPUSH
19941: PPUSH
19942: PPUSH
19943: PPUSH
19944: PPUSH
19945: PPUSH
19946: PPUSH
19947: PPUSH
// result := false ;
19948: LD_ADDR_VAR 0 8
19952: PUSH
19953: LD_INT 0
19955: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
19956: LD_VAR 0 5
19960: NOT
19961: PUSH
19962: LD_VAR 0 1
19966: NOT
19967: OR
19968: PUSH
19969: LD_VAR 0 2
19973: NOT
19974: OR
19975: PUSH
19976: LD_VAR 0 3
19980: NOT
19981: OR
19982: IFFALSE 19986
// exit ;
19984: GO 20787
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
19986: LD_ADDR_VAR 0 14
19990: PUSH
19991: LD_VAR 0 1
19995: PPUSH
19996: LD_VAR 0 2
20000: PPUSH
20001: LD_VAR 0 3
20005: PPUSH
20006: LD_VAR 0 4
20010: PPUSH
20011: LD_VAR 0 5
20015: PUSH
20016: LD_INT 1
20018: ARRAY
20019: PPUSH
20020: CALL_OW 248
20024: PPUSH
20025: LD_INT 0
20027: PPUSH
20028: CALL 21624 0 6
20032: ST_TO_ADDR
// if not hexes then
20033: LD_VAR 0 14
20037: NOT
20038: IFFALSE 20042
// exit ;
20040: GO 20787
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
20042: LD_ADDR_VAR 0 17
20046: PUSH
20047: LD_VAR 0 5
20051: PPUSH
20052: LD_INT 22
20054: PUSH
20055: LD_VAR 0 13
20059: PPUSH
20060: CALL_OW 255
20064: PUSH
20065: EMPTY
20066: LIST
20067: LIST
20068: PUSH
20069: LD_INT 2
20071: PUSH
20072: LD_INT 30
20074: PUSH
20075: LD_INT 0
20077: PUSH
20078: EMPTY
20079: LIST
20080: LIST
20081: PUSH
20082: LD_INT 30
20084: PUSH
20085: LD_INT 1
20087: PUSH
20088: EMPTY
20089: LIST
20090: LIST
20091: PUSH
20092: EMPTY
20093: LIST
20094: LIST
20095: LIST
20096: PUSH
20097: EMPTY
20098: LIST
20099: LIST
20100: PPUSH
20101: CALL_OW 72
20105: ST_TO_ADDR
// for i = 1 to hexes do
20106: LD_ADDR_VAR 0 9
20110: PUSH
20111: DOUBLE
20112: LD_INT 1
20114: DEC
20115: ST_TO_ADDR
20116: LD_VAR 0 14
20120: PUSH
20121: FOR_TO
20122: IFFALSE 20785
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
20124: LD_ADDR_VAR 0 13
20128: PUSH
20129: LD_VAR 0 14
20133: PUSH
20134: LD_VAR 0 9
20138: ARRAY
20139: PUSH
20140: LD_INT 1
20142: ARRAY
20143: PPUSH
20144: LD_VAR 0 14
20148: PUSH
20149: LD_VAR 0 9
20153: ARRAY
20154: PUSH
20155: LD_INT 2
20157: ARRAY
20158: PPUSH
20159: CALL_OW 428
20163: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
20164: LD_VAR 0 14
20168: PUSH
20169: LD_VAR 0 9
20173: ARRAY
20174: PUSH
20175: LD_INT 1
20177: ARRAY
20178: PPUSH
20179: LD_VAR 0 14
20183: PUSH
20184: LD_VAR 0 9
20188: ARRAY
20189: PUSH
20190: LD_INT 2
20192: ARRAY
20193: PPUSH
20194: CALL_OW 351
20198: PUSH
20199: LD_VAR 0 14
20203: PUSH
20204: LD_VAR 0 9
20208: ARRAY
20209: PUSH
20210: LD_INT 1
20212: ARRAY
20213: PPUSH
20214: LD_VAR 0 14
20218: PUSH
20219: LD_VAR 0 9
20223: ARRAY
20224: PUSH
20225: LD_INT 2
20227: ARRAY
20228: PPUSH
20229: CALL_OW 488
20233: NOT
20234: OR
20235: PUSH
20236: LD_VAR 0 13
20240: PPUSH
20241: CALL_OW 247
20245: PUSH
20246: LD_INT 3
20248: EQUAL
20249: OR
20250: IFFALSE 20256
// exit ;
20252: POP
20253: POP
20254: GO 20787
// if not tmp then
20256: LD_VAR 0 13
20260: NOT
20261: IFFALSE 20265
// continue ;
20263: GO 20121
// result := true ;
20265: LD_ADDR_VAR 0 8
20269: PUSH
20270: LD_INT 1
20272: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
20273: LD_VAR 0 13
20277: PPUSH
20278: CALL_OW 247
20282: PUSH
20283: LD_INT 2
20285: EQUAL
20286: PUSH
20287: LD_VAR 0 13
20291: PPUSH
20292: CALL_OW 263
20296: PUSH
20297: LD_INT 1
20299: EQUAL
20300: AND
20301: IFFALSE 20465
// begin if IsDrivenBy ( tmp ) then
20303: LD_VAR 0 13
20307: PPUSH
20308: CALL_OW 311
20312: IFFALSE 20316
// continue ;
20314: GO 20121
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
20316: LD_VAR 0 6
20320: PPUSH
20321: LD_INT 3
20323: PUSH
20324: LD_INT 60
20326: PUSH
20327: EMPTY
20328: LIST
20329: PUSH
20330: EMPTY
20331: LIST
20332: LIST
20333: PUSH
20334: LD_INT 3
20336: PUSH
20337: LD_INT 55
20339: PUSH
20340: EMPTY
20341: LIST
20342: PUSH
20343: EMPTY
20344: LIST
20345: LIST
20346: PUSH
20347: EMPTY
20348: LIST
20349: LIST
20350: PPUSH
20351: CALL_OW 72
20355: IFFALSE 20463
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
20357: LD_ADDR_VAR 0 18
20361: PUSH
20362: LD_VAR 0 6
20366: PPUSH
20367: LD_INT 3
20369: PUSH
20370: LD_INT 60
20372: PUSH
20373: EMPTY
20374: LIST
20375: PUSH
20376: EMPTY
20377: LIST
20378: LIST
20379: PUSH
20380: LD_INT 3
20382: PUSH
20383: LD_INT 55
20385: PUSH
20386: EMPTY
20387: LIST
20388: PUSH
20389: EMPTY
20390: LIST
20391: LIST
20392: PUSH
20393: EMPTY
20394: LIST
20395: LIST
20396: PPUSH
20397: CALL_OW 72
20401: PUSH
20402: LD_INT 1
20404: ARRAY
20405: ST_TO_ADDR
// if IsInUnit ( driver ) then
20406: LD_VAR 0 18
20410: PPUSH
20411: CALL_OW 310
20415: IFFALSE 20426
// ComExit ( driver ) ;
20417: LD_VAR 0 18
20421: PPUSH
20422: CALL 44808 0 1
// AddComEnterUnit ( driver , tmp ) ;
20426: LD_VAR 0 18
20430: PPUSH
20431: LD_VAR 0 13
20435: PPUSH
20436: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
20440: LD_VAR 0 18
20444: PPUSH
20445: LD_VAR 0 7
20449: PPUSH
20450: CALL_OW 173
// AddComExitVehicle ( driver ) ;
20454: LD_VAR 0 18
20458: PPUSH
20459: CALL_OW 181
// end ; continue ;
20463: GO 20121
// end ; if not tmp in cleaners then
20465: LD_VAR 0 13
20469: PUSH
20470: LD_VAR 0 6
20474: IN
20475: NOT
20476: IFFALSE 20783
// begin if dep then
20478: LD_VAR 0 17
20482: IFFALSE 20618
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
20484: LD_ADDR_VAR 0 16
20488: PUSH
20489: LD_VAR 0 17
20493: PUSH
20494: LD_INT 1
20496: ARRAY
20497: PPUSH
20498: CALL_OW 250
20502: PPUSH
20503: LD_VAR 0 17
20507: PUSH
20508: LD_INT 1
20510: ARRAY
20511: PPUSH
20512: CALL_OW 254
20516: PPUSH
20517: LD_INT 5
20519: PPUSH
20520: CALL_OW 272
20524: PUSH
20525: LD_VAR 0 17
20529: PUSH
20530: LD_INT 1
20532: ARRAY
20533: PPUSH
20534: CALL_OW 251
20538: PPUSH
20539: LD_VAR 0 17
20543: PUSH
20544: LD_INT 1
20546: ARRAY
20547: PPUSH
20548: CALL_OW 254
20552: PPUSH
20553: LD_INT 5
20555: PPUSH
20556: CALL_OW 273
20560: PUSH
20561: EMPTY
20562: LIST
20563: LIST
20564: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
20565: LD_VAR 0 16
20569: PUSH
20570: LD_INT 1
20572: ARRAY
20573: PPUSH
20574: LD_VAR 0 16
20578: PUSH
20579: LD_INT 2
20581: ARRAY
20582: PPUSH
20583: CALL_OW 488
20587: IFFALSE 20618
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
20589: LD_VAR 0 13
20593: PPUSH
20594: LD_VAR 0 16
20598: PUSH
20599: LD_INT 1
20601: ARRAY
20602: PPUSH
20603: LD_VAR 0 16
20607: PUSH
20608: LD_INT 2
20610: ARRAY
20611: PPUSH
20612: CALL_OW 111
// continue ;
20616: GO 20121
// end ; end ; r := GetDir ( tmp ) ;
20618: LD_ADDR_VAR 0 15
20622: PUSH
20623: LD_VAR 0 13
20627: PPUSH
20628: CALL_OW 254
20632: ST_TO_ADDR
// if r = 5 then
20633: LD_VAR 0 15
20637: PUSH
20638: LD_INT 5
20640: EQUAL
20641: IFFALSE 20651
// r := 0 ;
20643: LD_ADDR_VAR 0 15
20647: PUSH
20648: LD_INT 0
20650: ST_TO_ADDR
// for j = r to 5 do
20651: LD_ADDR_VAR 0 10
20655: PUSH
20656: DOUBLE
20657: LD_VAR 0 15
20661: DEC
20662: ST_TO_ADDR
20663: LD_INT 5
20665: PUSH
20666: FOR_TO
20667: IFFALSE 20781
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
20669: LD_ADDR_VAR 0 11
20673: PUSH
20674: LD_VAR 0 13
20678: PPUSH
20679: CALL_OW 250
20683: PPUSH
20684: LD_VAR 0 10
20688: PPUSH
20689: LD_INT 2
20691: PPUSH
20692: CALL_OW 272
20696: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
20697: LD_ADDR_VAR 0 12
20701: PUSH
20702: LD_VAR 0 13
20706: PPUSH
20707: CALL_OW 251
20711: PPUSH
20712: LD_VAR 0 10
20716: PPUSH
20717: LD_INT 2
20719: PPUSH
20720: CALL_OW 273
20724: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
20725: LD_VAR 0 11
20729: PPUSH
20730: LD_VAR 0 12
20734: PPUSH
20735: CALL_OW 488
20739: PUSH
20740: LD_VAR 0 11
20744: PPUSH
20745: LD_VAR 0 12
20749: PPUSH
20750: CALL_OW 428
20754: NOT
20755: AND
20756: IFFALSE 20779
// begin ComMoveXY ( tmp , _x , _y ) ;
20758: LD_VAR 0 13
20762: PPUSH
20763: LD_VAR 0 11
20767: PPUSH
20768: LD_VAR 0 12
20772: PPUSH
20773: CALL_OW 111
// break ;
20777: GO 20781
// end ; end ;
20779: GO 20666
20781: POP
20782: POP
// end ; end ;
20783: GO 20121
20785: POP
20786: POP
// end ;
20787: LD_VAR 0 8
20791: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
20792: LD_INT 0
20794: PPUSH
20795: PPUSH
20796: PPUSH
20797: PPUSH
20798: PPUSH
20799: PPUSH
20800: PPUSH
20801: PPUSH
20802: PPUSH
20803: PPUSH
// result := false ;
20804: LD_ADDR_VAR 0 6
20808: PUSH
20809: LD_INT 0
20811: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
20812: LD_VAR 0 1
20816: NOT
20817: PUSH
20818: LD_VAR 0 1
20822: PPUSH
20823: CALL_OW 266
20827: PUSH
20828: LD_INT 0
20830: PUSH
20831: LD_INT 1
20833: PUSH
20834: EMPTY
20835: LIST
20836: LIST
20837: IN
20838: NOT
20839: OR
20840: PUSH
20841: LD_VAR 0 2
20845: NOT
20846: OR
20847: PUSH
20848: LD_VAR 0 5
20852: PUSH
20853: LD_INT 0
20855: PUSH
20856: LD_INT 1
20858: PUSH
20859: LD_INT 2
20861: PUSH
20862: LD_INT 3
20864: PUSH
20865: LD_INT 4
20867: PUSH
20868: LD_INT 5
20870: PUSH
20871: EMPTY
20872: LIST
20873: LIST
20874: LIST
20875: LIST
20876: LIST
20877: LIST
20878: IN
20879: NOT
20880: OR
20881: PUSH
20882: LD_VAR 0 3
20886: PPUSH
20887: LD_VAR 0 4
20891: PPUSH
20892: CALL_OW 488
20896: NOT
20897: OR
20898: IFFALSE 20902
// exit ;
20900: GO 21619
// pom := GetBase ( depot ) ;
20902: LD_ADDR_VAR 0 10
20906: PUSH
20907: LD_VAR 0 1
20911: PPUSH
20912: CALL_OW 274
20916: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
20917: LD_ADDR_VAR 0 11
20921: PUSH
20922: LD_VAR 0 2
20926: PPUSH
20927: LD_VAR 0 1
20931: PPUSH
20932: CALL_OW 248
20936: PPUSH
20937: CALL_OW 450
20941: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
20942: LD_VAR 0 10
20946: PPUSH
20947: LD_INT 1
20949: PPUSH
20950: CALL_OW 275
20954: PUSH
20955: LD_VAR 0 11
20959: PUSH
20960: LD_INT 1
20962: ARRAY
20963: GREATEREQUAL
20964: PUSH
20965: LD_VAR 0 10
20969: PPUSH
20970: LD_INT 2
20972: PPUSH
20973: CALL_OW 275
20977: PUSH
20978: LD_VAR 0 11
20982: PUSH
20983: LD_INT 2
20985: ARRAY
20986: GREATEREQUAL
20987: AND
20988: PUSH
20989: LD_VAR 0 10
20993: PPUSH
20994: LD_INT 3
20996: PPUSH
20997: CALL_OW 275
21001: PUSH
21002: LD_VAR 0 11
21006: PUSH
21007: LD_INT 3
21009: ARRAY
21010: GREATEREQUAL
21011: AND
21012: NOT
21013: IFFALSE 21017
// exit ;
21015: GO 21619
// if GetBType ( depot ) = b_depot then
21017: LD_VAR 0 1
21021: PPUSH
21022: CALL_OW 266
21026: PUSH
21027: LD_INT 0
21029: EQUAL
21030: IFFALSE 21042
// dist := 28 else
21032: LD_ADDR_VAR 0 14
21036: PUSH
21037: LD_INT 28
21039: ST_TO_ADDR
21040: GO 21050
// dist := 36 ;
21042: LD_ADDR_VAR 0 14
21046: PUSH
21047: LD_INT 36
21049: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
21050: LD_VAR 0 1
21054: PPUSH
21055: LD_VAR 0 3
21059: PPUSH
21060: LD_VAR 0 4
21064: PPUSH
21065: CALL_OW 297
21069: PUSH
21070: LD_VAR 0 14
21074: GREATER
21075: IFFALSE 21079
// exit ;
21077: GO 21619
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
21079: LD_ADDR_VAR 0 12
21083: PUSH
21084: LD_VAR 0 2
21088: PPUSH
21089: LD_VAR 0 3
21093: PPUSH
21094: LD_VAR 0 4
21098: PPUSH
21099: LD_VAR 0 5
21103: PPUSH
21104: LD_VAR 0 1
21108: PPUSH
21109: CALL_OW 248
21113: PPUSH
21114: LD_INT 0
21116: PPUSH
21117: CALL 21624 0 6
21121: ST_TO_ADDR
// if not hexes then
21122: LD_VAR 0 12
21126: NOT
21127: IFFALSE 21131
// exit ;
21129: GO 21619
// hex := GetHexInfo ( x , y ) ;
21131: LD_ADDR_VAR 0 15
21135: PUSH
21136: LD_VAR 0 3
21140: PPUSH
21141: LD_VAR 0 4
21145: PPUSH
21146: CALL_OW 546
21150: ST_TO_ADDR
// if hex [ 1 ] then
21151: LD_VAR 0 15
21155: PUSH
21156: LD_INT 1
21158: ARRAY
21159: IFFALSE 21163
// exit ;
21161: GO 21619
// height := hex [ 2 ] ;
21163: LD_ADDR_VAR 0 13
21167: PUSH
21168: LD_VAR 0 15
21172: PUSH
21173: LD_INT 2
21175: ARRAY
21176: ST_TO_ADDR
// for i = 1 to hexes do
21177: LD_ADDR_VAR 0 7
21181: PUSH
21182: DOUBLE
21183: LD_INT 1
21185: DEC
21186: ST_TO_ADDR
21187: LD_VAR 0 12
21191: PUSH
21192: FOR_TO
21193: IFFALSE 21523
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
21195: LD_VAR 0 12
21199: PUSH
21200: LD_VAR 0 7
21204: ARRAY
21205: PUSH
21206: LD_INT 1
21208: ARRAY
21209: PPUSH
21210: LD_VAR 0 12
21214: PUSH
21215: LD_VAR 0 7
21219: ARRAY
21220: PUSH
21221: LD_INT 2
21223: ARRAY
21224: PPUSH
21225: CALL_OW 488
21229: NOT
21230: PUSH
21231: LD_VAR 0 12
21235: PUSH
21236: LD_VAR 0 7
21240: ARRAY
21241: PUSH
21242: LD_INT 1
21244: ARRAY
21245: PPUSH
21246: LD_VAR 0 12
21250: PUSH
21251: LD_VAR 0 7
21255: ARRAY
21256: PUSH
21257: LD_INT 2
21259: ARRAY
21260: PPUSH
21261: CALL_OW 428
21265: PUSH
21266: LD_INT 0
21268: GREATER
21269: OR
21270: PUSH
21271: LD_VAR 0 12
21275: PUSH
21276: LD_VAR 0 7
21280: ARRAY
21281: PUSH
21282: LD_INT 1
21284: ARRAY
21285: PPUSH
21286: LD_VAR 0 12
21290: PUSH
21291: LD_VAR 0 7
21295: ARRAY
21296: PUSH
21297: LD_INT 2
21299: ARRAY
21300: PPUSH
21301: CALL_OW 351
21305: OR
21306: IFFALSE 21312
// exit ;
21308: POP
21309: POP
21310: GO 21619
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
21312: LD_ADDR_VAR 0 8
21316: PUSH
21317: LD_VAR 0 12
21321: PUSH
21322: LD_VAR 0 7
21326: ARRAY
21327: PUSH
21328: LD_INT 1
21330: ARRAY
21331: PPUSH
21332: LD_VAR 0 12
21336: PUSH
21337: LD_VAR 0 7
21341: ARRAY
21342: PUSH
21343: LD_INT 2
21345: ARRAY
21346: PPUSH
21347: CALL_OW 546
21351: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
21352: LD_VAR 0 8
21356: PUSH
21357: LD_INT 1
21359: ARRAY
21360: PUSH
21361: LD_VAR 0 8
21365: PUSH
21366: LD_INT 2
21368: ARRAY
21369: PUSH
21370: LD_VAR 0 13
21374: PUSH
21375: LD_INT 2
21377: PLUS
21378: GREATER
21379: OR
21380: PUSH
21381: LD_VAR 0 8
21385: PUSH
21386: LD_INT 2
21388: ARRAY
21389: PUSH
21390: LD_VAR 0 13
21394: PUSH
21395: LD_INT 2
21397: MINUS
21398: LESS
21399: OR
21400: PUSH
21401: LD_VAR 0 8
21405: PUSH
21406: LD_INT 3
21408: ARRAY
21409: PUSH
21410: LD_INT 0
21412: PUSH
21413: LD_INT 8
21415: PUSH
21416: LD_INT 9
21418: PUSH
21419: LD_INT 10
21421: PUSH
21422: LD_INT 11
21424: PUSH
21425: LD_INT 12
21427: PUSH
21428: LD_INT 13
21430: PUSH
21431: LD_INT 16
21433: PUSH
21434: LD_INT 17
21436: PUSH
21437: LD_INT 18
21439: PUSH
21440: LD_INT 19
21442: PUSH
21443: LD_INT 20
21445: PUSH
21446: LD_INT 21
21448: PUSH
21449: EMPTY
21450: LIST
21451: LIST
21452: LIST
21453: LIST
21454: LIST
21455: LIST
21456: LIST
21457: LIST
21458: LIST
21459: LIST
21460: LIST
21461: LIST
21462: LIST
21463: IN
21464: NOT
21465: OR
21466: PUSH
21467: LD_VAR 0 8
21471: PUSH
21472: LD_INT 5
21474: ARRAY
21475: NOT
21476: OR
21477: PUSH
21478: LD_VAR 0 8
21482: PUSH
21483: LD_INT 6
21485: ARRAY
21486: PUSH
21487: LD_INT 1
21489: PUSH
21490: LD_INT 2
21492: PUSH
21493: LD_INT 7
21495: PUSH
21496: LD_INT 9
21498: PUSH
21499: LD_INT 10
21501: PUSH
21502: LD_INT 11
21504: PUSH
21505: EMPTY
21506: LIST
21507: LIST
21508: LIST
21509: LIST
21510: LIST
21511: LIST
21512: IN
21513: NOT
21514: OR
21515: IFFALSE 21521
// exit ;
21517: POP
21518: POP
21519: GO 21619
// end ;
21521: GO 21192
21523: POP
21524: POP
// side := GetSide ( depot ) ;
21525: LD_ADDR_VAR 0 9
21529: PUSH
21530: LD_VAR 0 1
21534: PPUSH
21535: CALL_OW 255
21539: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
21540: LD_VAR 0 9
21544: PPUSH
21545: LD_VAR 0 3
21549: PPUSH
21550: LD_VAR 0 4
21554: PPUSH
21555: LD_INT 20
21557: PPUSH
21558: CALL 13953 0 4
21562: PUSH
21563: LD_INT 4
21565: ARRAY
21566: IFFALSE 21570
// exit ;
21568: GO 21619
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
21570: LD_VAR 0 2
21574: PUSH
21575: LD_INT 29
21577: PUSH
21578: LD_INT 30
21580: PUSH
21581: EMPTY
21582: LIST
21583: LIST
21584: IN
21585: PUSH
21586: LD_VAR 0 3
21590: PPUSH
21591: LD_VAR 0 4
21595: PPUSH
21596: LD_VAR 0 9
21600: PPUSH
21601: CALL_OW 440
21605: NOT
21606: AND
21607: IFFALSE 21611
// exit ;
21609: GO 21619
// result := true ;
21611: LD_ADDR_VAR 0 6
21615: PUSH
21616: LD_INT 1
21618: ST_TO_ADDR
// end ;
21619: LD_VAR 0 6
21623: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
21624: LD_INT 0
21626: PPUSH
21627: PPUSH
21628: PPUSH
21629: PPUSH
21630: PPUSH
21631: PPUSH
21632: PPUSH
21633: PPUSH
21634: PPUSH
21635: PPUSH
21636: PPUSH
21637: PPUSH
21638: PPUSH
21639: PPUSH
21640: PPUSH
21641: PPUSH
21642: PPUSH
21643: PPUSH
21644: PPUSH
21645: PPUSH
21646: PPUSH
21647: PPUSH
21648: PPUSH
21649: PPUSH
21650: PPUSH
21651: PPUSH
21652: PPUSH
21653: PPUSH
21654: PPUSH
21655: PPUSH
21656: PPUSH
21657: PPUSH
21658: PPUSH
21659: PPUSH
21660: PPUSH
21661: PPUSH
21662: PPUSH
21663: PPUSH
21664: PPUSH
21665: PPUSH
21666: PPUSH
21667: PPUSH
21668: PPUSH
21669: PPUSH
21670: PPUSH
21671: PPUSH
21672: PPUSH
21673: PPUSH
21674: PPUSH
21675: PPUSH
21676: PPUSH
21677: PPUSH
21678: PPUSH
21679: PPUSH
21680: PPUSH
21681: PPUSH
21682: PPUSH
21683: PPUSH
// result = [ ] ;
21684: LD_ADDR_VAR 0 7
21688: PUSH
21689: EMPTY
21690: ST_TO_ADDR
// temp_list = [ ] ;
21691: LD_ADDR_VAR 0 9
21695: PUSH
21696: EMPTY
21697: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
21698: LD_VAR 0 4
21702: PUSH
21703: LD_INT 0
21705: PUSH
21706: LD_INT 1
21708: PUSH
21709: LD_INT 2
21711: PUSH
21712: LD_INT 3
21714: PUSH
21715: LD_INT 4
21717: PUSH
21718: LD_INT 5
21720: PUSH
21721: EMPTY
21722: LIST
21723: LIST
21724: LIST
21725: LIST
21726: LIST
21727: LIST
21728: IN
21729: NOT
21730: PUSH
21731: LD_VAR 0 1
21735: PUSH
21736: LD_INT 0
21738: PUSH
21739: LD_INT 1
21741: PUSH
21742: EMPTY
21743: LIST
21744: LIST
21745: IN
21746: PUSH
21747: LD_VAR 0 5
21751: PUSH
21752: LD_INT 1
21754: PUSH
21755: LD_INT 2
21757: PUSH
21758: LD_INT 3
21760: PUSH
21761: EMPTY
21762: LIST
21763: LIST
21764: LIST
21765: IN
21766: NOT
21767: AND
21768: OR
21769: IFFALSE 21773
// exit ;
21771: GO 40164
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
21773: LD_VAR 0 1
21777: PUSH
21778: LD_INT 6
21780: PUSH
21781: LD_INT 7
21783: PUSH
21784: LD_INT 8
21786: PUSH
21787: LD_INT 13
21789: PUSH
21790: LD_INT 12
21792: PUSH
21793: LD_INT 15
21795: PUSH
21796: LD_INT 11
21798: PUSH
21799: LD_INT 14
21801: PUSH
21802: LD_INT 10
21804: PUSH
21805: EMPTY
21806: LIST
21807: LIST
21808: LIST
21809: LIST
21810: LIST
21811: LIST
21812: LIST
21813: LIST
21814: LIST
21815: IN
21816: IFFALSE 21826
// btype = b_lab ;
21818: LD_ADDR_VAR 0 1
21822: PUSH
21823: LD_INT 6
21825: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
21826: LD_VAR 0 6
21830: PUSH
21831: LD_INT 0
21833: PUSH
21834: LD_INT 1
21836: PUSH
21837: LD_INT 2
21839: PUSH
21840: EMPTY
21841: LIST
21842: LIST
21843: LIST
21844: IN
21845: NOT
21846: PUSH
21847: LD_VAR 0 1
21851: PUSH
21852: LD_INT 0
21854: PUSH
21855: LD_INT 1
21857: PUSH
21858: LD_INT 2
21860: PUSH
21861: LD_INT 3
21863: PUSH
21864: LD_INT 6
21866: PUSH
21867: LD_INT 36
21869: PUSH
21870: LD_INT 4
21872: PUSH
21873: LD_INT 5
21875: PUSH
21876: LD_INT 31
21878: PUSH
21879: LD_INT 32
21881: PUSH
21882: LD_INT 33
21884: PUSH
21885: EMPTY
21886: LIST
21887: LIST
21888: LIST
21889: LIST
21890: LIST
21891: LIST
21892: LIST
21893: LIST
21894: LIST
21895: LIST
21896: LIST
21897: IN
21898: NOT
21899: PUSH
21900: LD_VAR 0 6
21904: PUSH
21905: LD_INT 1
21907: EQUAL
21908: AND
21909: OR
21910: PUSH
21911: LD_VAR 0 1
21915: PUSH
21916: LD_INT 2
21918: PUSH
21919: LD_INT 3
21921: PUSH
21922: EMPTY
21923: LIST
21924: LIST
21925: IN
21926: NOT
21927: PUSH
21928: LD_VAR 0 6
21932: PUSH
21933: LD_INT 2
21935: EQUAL
21936: AND
21937: OR
21938: IFFALSE 21948
// mode = 0 ;
21940: LD_ADDR_VAR 0 6
21944: PUSH
21945: LD_INT 0
21947: ST_TO_ADDR
// case mode of 0 :
21948: LD_VAR 0 6
21952: PUSH
21953: LD_INT 0
21955: DOUBLE
21956: EQUAL
21957: IFTRUE 21961
21959: GO 33414
21961: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
21962: LD_ADDR_VAR 0 11
21966: PUSH
21967: LD_INT 0
21969: PUSH
21970: LD_INT 0
21972: PUSH
21973: EMPTY
21974: LIST
21975: LIST
21976: PUSH
21977: LD_INT 0
21979: PUSH
21980: LD_INT 1
21982: NEG
21983: PUSH
21984: EMPTY
21985: LIST
21986: LIST
21987: PUSH
21988: LD_INT 1
21990: PUSH
21991: LD_INT 0
21993: PUSH
21994: EMPTY
21995: LIST
21996: LIST
21997: PUSH
21998: LD_INT 1
22000: PUSH
22001: LD_INT 1
22003: PUSH
22004: EMPTY
22005: LIST
22006: LIST
22007: PUSH
22008: LD_INT 0
22010: PUSH
22011: LD_INT 1
22013: PUSH
22014: EMPTY
22015: LIST
22016: LIST
22017: PUSH
22018: LD_INT 1
22020: NEG
22021: PUSH
22022: LD_INT 0
22024: PUSH
22025: EMPTY
22026: LIST
22027: LIST
22028: PUSH
22029: LD_INT 1
22031: NEG
22032: PUSH
22033: LD_INT 1
22035: NEG
22036: PUSH
22037: EMPTY
22038: LIST
22039: LIST
22040: PUSH
22041: LD_INT 1
22043: NEG
22044: PUSH
22045: LD_INT 2
22047: NEG
22048: PUSH
22049: EMPTY
22050: LIST
22051: LIST
22052: PUSH
22053: LD_INT 0
22055: PUSH
22056: LD_INT 2
22058: NEG
22059: PUSH
22060: EMPTY
22061: LIST
22062: LIST
22063: PUSH
22064: LD_INT 1
22066: PUSH
22067: LD_INT 1
22069: NEG
22070: PUSH
22071: EMPTY
22072: LIST
22073: LIST
22074: PUSH
22075: LD_INT 1
22077: PUSH
22078: LD_INT 2
22080: PUSH
22081: EMPTY
22082: LIST
22083: LIST
22084: PUSH
22085: LD_INT 0
22087: PUSH
22088: LD_INT 2
22090: PUSH
22091: EMPTY
22092: LIST
22093: LIST
22094: PUSH
22095: LD_INT 1
22097: NEG
22098: PUSH
22099: LD_INT 1
22101: PUSH
22102: EMPTY
22103: LIST
22104: LIST
22105: PUSH
22106: LD_INT 1
22108: PUSH
22109: LD_INT 3
22111: PUSH
22112: EMPTY
22113: LIST
22114: LIST
22115: PUSH
22116: LD_INT 0
22118: PUSH
22119: LD_INT 3
22121: PUSH
22122: EMPTY
22123: LIST
22124: LIST
22125: PUSH
22126: LD_INT 1
22128: NEG
22129: PUSH
22130: LD_INT 2
22132: PUSH
22133: EMPTY
22134: LIST
22135: LIST
22136: PUSH
22137: EMPTY
22138: LIST
22139: LIST
22140: LIST
22141: LIST
22142: LIST
22143: LIST
22144: LIST
22145: LIST
22146: LIST
22147: LIST
22148: LIST
22149: LIST
22150: LIST
22151: LIST
22152: LIST
22153: LIST
22154: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
22155: LD_ADDR_VAR 0 12
22159: PUSH
22160: LD_INT 0
22162: PUSH
22163: LD_INT 0
22165: PUSH
22166: EMPTY
22167: LIST
22168: LIST
22169: PUSH
22170: LD_INT 0
22172: PUSH
22173: LD_INT 1
22175: NEG
22176: PUSH
22177: EMPTY
22178: LIST
22179: LIST
22180: PUSH
22181: LD_INT 1
22183: PUSH
22184: LD_INT 0
22186: PUSH
22187: EMPTY
22188: LIST
22189: LIST
22190: PUSH
22191: LD_INT 1
22193: PUSH
22194: LD_INT 1
22196: PUSH
22197: EMPTY
22198: LIST
22199: LIST
22200: PUSH
22201: LD_INT 0
22203: PUSH
22204: LD_INT 1
22206: PUSH
22207: EMPTY
22208: LIST
22209: LIST
22210: PUSH
22211: LD_INT 1
22213: NEG
22214: PUSH
22215: LD_INT 0
22217: PUSH
22218: EMPTY
22219: LIST
22220: LIST
22221: PUSH
22222: LD_INT 1
22224: NEG
22225: PUSH
22226: LD_INT 1
22228: NEG
22229: PUSH
22230: EMPTY
22231: LIST
22232: LIST
22233: PUSH
22234: LD_INT 1
22236: PUSH
22237: LD_INT 1
22239: NEG
22240: PUSH
22241: EMPTY
22242: LIST
22243: LIST
22244: PUSH
22245: LD_INT 2
22247: PUSH
22248: LD_INT 0
22250: PUSH
22251: EMPTY
22252: LIST
22253: LIST
22254: PUSH
22255: LD_INT 2
22257: PUSH
22258: LD_INT 1
22260: PUSH
22261: EMPTY
22262: LIST
22263: LIST
22264: PUSH
22265: LD_INT 1
22267: NEG
22268: PUSH
22269: LD_INT 1
22271: PUSH
22272: EMPTY
22273: LIST
22274: LIST
22275: PUSH
22276: LD_INT 2
22278: NEG
22279: PUSH
22280: LD_INT 0
22282: PUSH
22283: EMPTY
22284: LIST
22285: LIST
22286: PUSH
22287: LD_INT 2
22289: NEG
22290: PUSH
22291: LD_INT 1
22293: NEG
22294: PUSH
22295: EMPTY
22296: LIST
22297: LIST
22298: PUSH
22299: LD_INT 2
22301: NEG
22302: PUSH
22303: LD_INT 1
22305: PUSH
22306: EMPTY
22307: LIST
22308: LIST
22309: PUSH
22310: LD_INT 3
22312: NEG
22313: PUSH
22314: LD_INT 0
22316: PUSH
22317: EMPTY
22318: LIST
22319: LIST
22320: PUSH
22321: LD_INT 3
22323: NEG
22324: PUSH
22325: LD_INT 1
22327: NEG
22328: PUSH
22329: EMPTY
22330: LIST
22331: LIST
22332: PUSH
22333: EMPTY
22334: LIST
22335: LIST
22336: LIST
22337: LIST
22338: LIST
22339: LIST
22340: LIST
22341: LIST
22342: LIST
22343: LIST
22344: LIST
22345: LIST
22346: LIST
22347: LIST
22348: LIST
22349: LIST
22350: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
22351: LD_ADDR_VAR 0 13
22355: PUSH
22356: LD_INT 0
22358: PUSH
22359: LD_INT 0
22361: PUSH
22362: EMPTY
22363: LIST
22364: LIST
22365: PUSH
22366: LD_INT 0
22368: PUSH
22369: LD_INT 1
22371: NEG
22372: PUSH
22373: EMPTY
22374: LIST
22375: LIST
22376: PUSH
22377: LD_INT 1
22379: PUSH
22380: LD_INT 0
22382: PUSH
22383: EMPTY
22384: LIST
22385: LIST
22386: PUSH
22387: LD_INT 1
22389: PUSH
22390: LD_INT 1
22392: PUSH
22393: EMPTY
22394: LIST
22395: LIST
22396: PUSH
22397: LD_INT 0
22399: PUSH
22400: LD_INT 1
22402: PUSH
22403: EMPTY
22404: LIST
22405: LIST
22406: PUSH
22407: LD_INT 1
22409: NEG
22410: PUSH
22411: LD_INT 0
22413: PUSH
22414: EMPTY
22415: LIST
22416: LIST
22417: PUSH
22418: LD_INT 1
22420: NEG
22421: PUSH
22422: LD_INT 1
22424: NEG
22425: PUSH
22426: EMPTY
22427: LIST
22428: LIST
22429: PUSH
22430: LD_INT 1
22432: NEG
22433: PUSH
22434: LD_INT 2
22436: NEG
22437: PUSH
22438: EMPTY
22439: LIST
22440: LIST
22441: PUSH
22442: LD_INT 2
22444: PUSH
22445: LD_INT 1
22447: PUSH
22448: EMPTY
22449: LIST
22450: LIST
22451: PUSH
22452: LD_INT 2
22454: PUSH
22455: LD_INT 2
22457: PUSH
22458: EMPTY
22459: LIST
22460: LIST
22461: PUSH
22462: LD_INT 1
22464: PUSH
22465: LD_INT 2
22467: PUSH
22468: EMPTY
22469: LIST
22470: LIST
22471: PUSH
22472: LD_INT 2
22474: NEG
22475: PUSH
22476: LD_INT 1
22478: NEG
22479: PUSH
22480: EMPTY
22481: LIST
22482: LIST
22483: PUSH
22484: LD_INT 2
22486: NEG
22487: PUSH
22488: LD_INT 2
22490: NEG
22491: PUSH
22492: EMPTY
22493: LIST
22494: LIST
22495: PUSH
22496: LD_INT 2
22498: NEG
22499: PUSH
22500: LD_INT 3
22502: NEG
22503: PUSH
22504: EMPTY
22505: LIST
22506: LIST
22507: PUSH
22508: LD_INT 3
22510: NEG
22511: PUSH
22512: LD_INT 2
22514: NEG
22515: PUSH
22516: EMPTY
22517: LIST
22518: LIST
22519: PUSH
22520: LD_INT 3
22522: NEG
22523: PUSH
22524: LD_INT 3
22526: NEG
22527: PUSH
22528: EMPTY
22529: LIST
22530: LIST
22531: PUSH
22532: EMPTY
22533: LIST
22534: LIST
22535: LIST
22536: LIST
22537: LIST
22538: LIST
22539: LIST
22540: LIST
22541: LIST
22542: LIST
22543: LIST
22544: LIST
22545: LIST
22546: LIST
22547: LIST
22548: LIST
22549: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
22550: LD_ADDR_VAR 0 14
22554: PUSH
22555: LD_INT 0
22557: PUSH
22558: LD_INT 0
22560: PUSH
22561: EMPTY
22562: LIST
22563: LIST
22564: PUSH
22565: LD_INT 0
22567: PUSH
22568: LD_INT 1
22570: NEG
22571: PUSH
22572: EMPTY
22573: LIST
22574: LIST
22575: PUSH
22576: LD_INT 1
22578: PUSH
22579: LD_INT 0
22581: PUSH
22582: EMPTY
22583: LIST
22584: LIST
22585: PUSH
22586: LD_INT 1
22588: PUSH
22589: LD_INT 1
22591: PUSH
22592: EMPTY
22593: LIST
22594: LIST
22595: PUSH
22596: LD_INT 0
22598: PUSH
22599: LD_INT 1
22601: PUSH
22602: EMPTY
22603: LIST
22604: LIST
22605: PUSH
22606: LD_INT 1
22608: NEG
22609: PUSH
22610: LD_INT 0
22612: PUSH
22613: EMPTY
22614: LIST
22615: LIST
22616: PUSH
22617: LD_INT 1
22619: NEG
22620: PUSH
22621: LD_INT 1
22623: NEG
22624: PUSH
22625: EMPTY
22626: LIST
22627: LIST
22628: PUSH
22629: LD_INT 1
22631: NEG
22632: PUSH
22633: LD_INT 2
22635: NEG
22636: PUSH
22637: EMPTY
22638: LIST
22639: LIST
22640: PUSH
22641: LD_INT 0
22643: PUSH
22644: LD_INT 2
22646: NEG
22647: PUSH
22648: EMPTY
22649: LIST
22650: LIST
22651: PUSH
22652: LD_INT 1
22654: PUSH
22655: LD_INT 1
22657: NEG
22658: PUSH
22659: EMPTY
22660: LIST
22661: LIST
22662: PUSH
22663: LD_INT 1
22665: PUSH
22666: LD_INT 2
22668: PUSH
22669: EMPTY
22670: LIST
22671: LIST
22672: PUSH
22673: LD_INT 0
22675: PUSH
22676: LD_INT 2
22678: PUSH
22679: EMPTY
22680: LIST
22681: LIST
22682: PUSH
22683: LD_INT 1
22685: NEG
22686: PUSH
22687: LD_INT 1
22689: PUSH
22690: EMPTY
22691: LIST
22692: LIST
22693: PUSH
22694: LD_INT 1
22696: NEG
22697: PUSH
22698: LD_INT 3
22700: NEG
22701: PUSH
22702: EMPTY
22703: LIST
22704: LIST
22705: PUSH
22706: LD_INT 0
22708: PUSH
22709: LD_INT 3
22711: NEG
22712: PUSH
22713: EMPTY
22714: LIST
22715: LIST
22716: PUSH
22717: LD_INT 1
22719: PUSH
22720: LD_INT 2
22722: NEG
22723: PUSH
22724: EMPTY
22725: LIST
22726: LIST
22727: PUSH
22728: EMPTY
22729: LIST
22730: LIST
22731: LIST
22732: LIST
22733: LIST
22734: LIST
22735: LIST
22736: LIST
22737: LIST
22738: LIST
22739: LIST
22740: LIST
22741: LIST
22742: LIST
22743: LIST
22744: LIST
22745: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
22746: LD_ADDR_VAR 0 15
22750: PUSH
22751: LD_INT 0
22753: PUSH
22754: LD_INT 0
22756: PUSH
22757: EMPTY
22758: LIST
22759: LIST
22760: PUSH
22761: LD_INT 0
22763: PUSH
22764: LD_INT 1
22766: NEG
22767: PUSH
22768: EMPTY
22769: LIST
22770: LIST
22771: PUSH
22772: LD_INT 1
22774: PUSH
22775: LD_INT 0
22777: PUSH
22778: EMPTY
22779: LIST
22780: LIST
22781: PUSH
22782: LD_INT 1
22784: PUSH
22785: LD_INT 1
22787: PUSH
22788: EMPTY
22789: LIST
22790: LIST
22791: PUSH
22792: LD_INT 0
22794: PUSH
22795: LD_INT 1
22797: PUSH
22798: EMPTY
22799: LIST
22800: LIST
22801: PUSH
22802: LD_INT 1
22804: NEG
22805: PUSH
22806: LD_INT 0
22808: PUSH
22809: EMPTY
22810: LIST
22811: LIST
22812: PUSH
22813: LD_INT 1
22815: NEG
22816: PUSH
22817: LD_INT 1
22819: NEG
22820: PUSH
22821: EMPTY
22822: LIST
22823: LIST
22824: PUSH
22825: LD_INT 1
22827: PUSH
22828: LD_INT 1
22830: NEG
22831: PUSH
22832: EMPTY
22833: LIST
22834: LIST
22835: PUSH
22836: LD_INT 2
22838: PUSH
22839: LD_INT 0
22841: PUSH
22842: EMPTY
22843: LIST
22844: LIST
22845: PUSH
22846: LD_INT 2
22848: PUSH
22849: LD_INT 1
22851: PUSH
22852: EMPTY
22853: LIST
22854: LIST
22855: PUSH
22856: LD_INT 1
22858: NEG
22859: PUSH
22860: LD_INT 1
22862: PUSH
22863: EMPTY
22864: LIST
22865: LIST
22866: PUSH
22867: LD_INT 2
22869: NEG
22870: PUSH
22871: LD_INT 0
22873: PUSH
22874: EMPTY
22875: LIST
22876: LIST
22877: PUSH
22878: LD_INT 2
22880: NEG
22881: PUSH
22882: LD_INT 1
22884: NEG
22885: PUSH
22886: EMPTY
22887: LIST
22888: LIST
22889: PUSH
22890: LD_INT 2
22892: PUSH
22893: LD_INT 1
22895: NEG
22896: PUSH
22897: EMPTY
22898: LIST
22899: LIST
22900: PUSH
22901: LD_INT 3
22903: PUSH
22904: LD_INT 0
22906: PUSH
22907: EMPTY
22908: LIST
22909: LIST
22910: PUSH
22911: LD_INT 3
22913: PUSH
22914: LD_INT 1
22916: PUSH
22917: EMPTY
22918: LIST
22919: LIST
22920: PUSH
22921: EMPTY
22922: LIST
22923: LIST
22924: LIST
22925: LIST
22926: LIST
22927: LIST
22928: LIST
22929: LIST
22930: LIST
22931: LIST
22932: LIST
22933: LIST
22934: LIST
22935: LIST
22936: LIST
22937: LIST
22938: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
22939: LD_ADDR_VAR 0 16
22943: PUSH
22944: LD_INT 0
22946: PUSH
22947: LD_INT 0
22949: PUSH
22950: EMPTY
22951: LIST
22952: LIST
22953: PUSH
22954: LD_INT 0
22956: PUSH
22957: LD_INT 1
22959: NEG
22960: PUSH
22961: EMPTY
22962: LIST
22963: LIST
22964: PUSH
22965: LD_INT 1
22967: PUSH
22968: LD_INT 0
22970: PUSH
22971: EMPTY
22972: LIST
22973: LIST
22974: PUSH
22975: LD_INT 1
22977: PUSH
22978: LD_INT 1
22980: PUSH
22981: EMPTY
22982: LIST
22983: LIST
22984: PUSH
22985: LD_INT 0
22987: PUSH
22988: LD_INT 1
22990: PUSH
22991: EMPTY
22992: LIST
22993: LIST
22994: PUSH
22995: LD_INT 1
22997: NEG
22998: PUSH
22999: LD_INT 0
23001: PUSH
23002: EMPTY
23003: LIST
23004: LIST
23005: PUSH
23006: LD_INT 1
23008: NEG
23009: PUSH
23010: LD_INT 1
23012: NEG
23013: PUSH
23014: EMPTY
23015: LIST
23016: LIST
23017: PUSH
23018: LD_INT 1
23020: NEG
23021: PUSH
23022: LD_INT 2
23024: NEG
23025: PUSH
23026: EMPTY
23027: LIST
23028: LIST
23029: PUSH
23030: LD_INT 2
23032: PUSH
23033: LD_INT 1
23035: PUSH
23036: EMPTY
23037: LIST
23038: LIST
23039: PUSH
23040: LD_INT 2
23042: PUSH
23043: LD_INT 2
23045: PUSH
23046: EMPTY
23047: LIST
23048: LIST
23049: PUSH
23050: LD_INT 1
23052: PUSH
23053: LD_INT 2
23055: PUSH
23056: EMPTY
23057: LIST
23058: LIST
23059: PUSH
23060: LD_INT 2
23062: NEG
23063: PUSH
23064: LD_INT 1
23066: NEG
23067: PUSH
23068: EMPTY
23069: LIST
23070: LIST
23071: PUSH
23072: LD_INT 2
23074: NEG
23075: PUSH
23076: LD_INT 2
23078: NEG
23079: PUSH
23080: EMPTY
23081: LIST
23082: LIST
23083: PUSH
23084: LD_INT 3
23086: PUSH
23087: LD_INT 2
23089: PUSH
23090: EMPTY
23091: LIST
23092: LIST
23093: PUSH
23094: LD_INT 3
23096: PUSH
23097: LD_INT 3
23099: PUSH
23100: EMPTY
23101: LIST
23102: LIST
23103: PUSH
23104: LD_INT 2
23106: PUSH
23107: LD_INT 3
23109: PUSH
23110: EMPTY
23111: LIST
23112: LIST
23113: PUSH
23114: EMPTY
23115: LIST
23116: LIST
23117: LIST
23118: LIST
23119: LIST
23120: LIST
23121: LIST
23122: LIST
23123: LIST
23124: LIST
23125: LIST
23126: LIST
23127: LIST
23128: LIST
23129: LIST
23130: LIST
23131: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
23132: LD_ADDR_VAR 0 17
23136: PUSH
23137: LD_INT 0
23139: PUSH
23140: LD_INT 0
23142: PUSH
23143: EMPTY
23144: LIST
23145: LIST
23146: PUSH
23147: LD_INT 0
23149: PUSH
23150: LD_INT 1
23152: NEG
23153: PUSH
23154: EMPTY
23155: LIST
23156: LIST
23157: PUSH
23158: LD_INT 1
23160: PUSH
23161: LD_INT 0
23163: PUSH
23164: EMPTY
23165: LIST
23166: LIST
23167: PUSH
23168: LD_INT 1
23170: PUSH
23171: LD_INT 1
23173: PUSH
23174: EMPTY
23175: LIST
23176: LIST
23177: PUSH
23178: LD_INT 0
23180: PUSH
23181: LD_INT 1
23183: PUSH
23184: EMPTY
23185: LIST
23186: LIST
23187: PUSH
23188: LD_INT 1
23190: NEG
23191: PUSH
23192: LD_INT 0
23194: PUSH
23195: EMPTY
23196: LIST
23197: LIST
23198: PUSH
23199: LD_INT 1
23201: NEG
23202: PUSH
23203: LD_INT 1
23205: NEG
23206: PUSH
23207: EMPTY
23208: LIST
23209: LIST
23210: PUSH
23211: LD_INT 1
23213: NEG
23214: PUSH
23215: LD_INT 2
23217: NEG
23218: PUSH
23219: EMPTY
23220: LIST
23221: LIST
23222: PUSH
23223: LD_INT 0
23225: PUSH
23226: LD_INT 2
23228: NEG
23229: PUSH
23230: EMPTY
23231: LIST
23232: LIST
23233: PUSH
23234: LD_INT 1
23236: PUSH
23237: LD_INT 1
23239: NEG
23240: PUSH
23241: EMPTY
23242: LIST
23243: LIST
23244: PUSH
23245: LD_INT 2
23247: PUSH
23248: LD_INT 0
23250: PUSH
23251: EMPTY
23252: LIST
23253: LIST
23254: PUSH
23255: LD_INT 2
23257: PUSH
23258: LD_INT 1
23260: PUSH
23261: EMPTY
23262: LIST
23263: LIST
23264: PUSH
23265: LD_INT 2
23267: PUSH
23268: LD_INT 2
23270: PUSH
23271: EMPTY
23272: LIST
23273: LIST
23274: PUSH
23275: LD_INT 1
23277: PUSH
23278: LD_INT 2
23280: PUSH
23281: EMPTY
23282: LIST
23283: LIST
23284: PUSH
23285: LD_INT 0
23287: PUSH
23288: LD_INT 2
23290: PUSH
23291: EMPTY
23292: LIST
23293: LIST
23294: PUSH
23295: LD_INT 1
23297: NEG
23298: PUSH
23299: LD_INT 1
23301: PUSH
23302: EMPTY
23303: LIST
23304: LIST
23305: PUSH
23306: LD_INT 2
23308: NEG
23309: PUSH
23310: LD_INT 0
23312: PUSH
23313: EMPTY
23314: LIST
23315: LIST
23316: PUSH
23317: LD_INT 2
23319: NEG
23320: PUSH
23321: LD_INT 1
23323: NEG
23324: PUSH
23325: EMPTY
23326: LIST
23327: LIST
23328: PUSH
23329: LD_INT 2
23331: NEG
23332: PUSH
23333: LD_INT 2
23335: NEG
23336: PUSH
23337: EMPTY
23338: LIST
23339: LIST
23340: PUSH
23341: EMPTY
23342: LIST
23343: LIST
23344: LIST
23345: LIST
23346: LIST
23347: LIST
23348: LIST
23349: LIST
23350: LIST
23351: LIST
23352: LIST
23353: LIST
23354: LIST
23355: LIST
23356: LIST
23357: LIST
23358: LIST
23359: LIST
23360: LIST
23361: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
23362: LD_ADDR_VAR 0 18
23366: PUSH
23367: LD_INT 0
23369: PUSH
23370: LD_INT 0
23372: PUSH
23373: EMPTY
23374: LIST
23375: LIST
23376: PUSH
23377: LD_INT 0
23379: PUSH
23380: LD_INT 1
23382: NEG
23383: PUSH
23384: EMPTY
23385: LIST
23386: LIST
23387: PUSH
23388: LD_INT 1
23390: PUSH
23391: LD_INT 0
23393: PUSH
23394: EMPTY
23395: LIST
23396: LIST
23397: PUSH
23398: LD_INT 1
23400: PUSH
23401: LD_INT 1
23403: PUSH
23404: EMPTY
23405: LIST
23406: LIST
23407: PUSH
23408: LD_INT 0
23410: PUSH
23411: LD_INT 1
23413: PUSH
23414: EMPTY
23415: LIST
23416: LIST
23417: PUSH
23418: LD_INT 1
23420: NEG
23421: PUSH
23422: LD_INT 0
23424: PUSH
23425: EMPTY
23426: LIST
23427: LIST
23428: PUSH
23429: LD_INT 1
23431: NEG
23432: PUSH
23433: LD_INT 1
23435: NEG
23436: PUSH
23437: EMPTY
23438: LIST
23439: LIST
23440: PUSH
23441: LD_INT 1
23443: NEG
23444: PUSH
23445: LD_INT 2
23447: NEG
23448: PUSH
23449: EMPTY
23450: LIST
23451: LIST
23452: PUSH
23453: LD_INT 0
23455: PUSH
23456: LD_INT 2
23458: NEG
23459: PUSH
23460: EMPTY
23461: LIST
23462: LIST
23463: PUSH
23464: LD_INT 1
23466: PUSH
23467: LD_INT 1
23469: NEG
23470: PUSH
23471: EMPTY
23472: LIST
23473: LIST
23474: PUSH
23475: LD_INT 2
23477: PUSH
23478: LD_INT 0
23480: PUSH
23481: EMPTY
23482: LIST
23483: LIST
23484: PUSH
23485: LD_INT 2
23487: PUSH
23488: LD_INT 1
23490: PUSH
23491: EMPTY
23492: LIST
23493: LIST
23494: PUSH
23495: LD_INT 2
23497: PUSH
23498: LD_INT 2
23500: PUSH
23501: EMPTY
23502: LIST
23503: LIST
23504: PUSH
23505: LD_INT 1
23507: PUSH
23508: LD_INT 2
23510: PUSH
23511: EMPTY
23512: LIST
23513: LIST
23514: PUSH
23515: LD_INT 0
23517: PUSH
23518: LD_INT 2
23520: PUSH
23521: EMPTY
23522: LIST
23523: LIST
23524: PUSH
23525: LD_INT 1
23527: NEG
23528: PUSH
23529: LD_INT 1
23531: PUSH
23532: EMPTY
23533: LIST
23534: LIST
23535: PUSH
23536: LD_INT 2
23538: NEG
23539: PUSH
23540: LD_INT 0
23542: PUSH
23543: EMPTY
23544: LIST
23545: LIST
23546: PUSH
23547: LD_INT 2
23549: NEG
23550: PUSH
23551: LD_INT 1
23553: NEG
23554: PUSH
23555: EMPTY
23556: LIST
23557: LIST
23558: PUSH
23559: LD_INT 2
23561: NEG
23562: PUSH
23563: LD_INT 2
23565: NEG
23566: PUSH
23567: EMPTY
23568: LIST
23569: LIST
23570: PUSH
23571: EMPTY
23572: LIST
23573: LIST
23574: LIST
23575: LIST
23576: LIST
23577: LIST
23578: LIST
23579: LIST
23580: LIST
23581: LIST
23582: LIST
23583: LIST
23584: LIST
23585: LIST
23586: LIST
23587: LIST
23588: LIST
23589: LIST
23590: LIST
23591: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
23592: LD_ADDR_VAR 0 19
23596: PUSH
23597: LD_INT 0
23599: PUSH
23600: LD_INT 0
23602: PUSH
23603: EMPTY
23604: LIST
23605: LIST
23606: PUSH
23607: LD_INT 0
23609: PUSH
23610: LD_INT 1
23612: NEG
23613: PUSH
23614: EMPTY
23615: LIST
23616: LIST
23617: PUSH
23618: LD_INT 1
23620: PUSH
23621: LD_INT 0
23623: PUSH
23624: EMPTY
23625: LIST
23626: LIST
23627: PUSH
23628: LD_INT 1
23630: PUSH
23631: LD_INT 1
23633: PUSH
23634: EMPTY
23635: LIST
23636: LIST
23637: PUSH
23638: LD_INT 0
23640: PUSH
23641: LD_INT 1
23643: PUSH
23644: EMPTY
23645: LIST
23646: LIST
23647: PUSH
23648: LD_INT 1
23650: NEG
23651: PUSH
23652: LD_INT 0
23654: PUSH
23655: EMPTY
23656: LIST
23657: LIST
23658: PUSH
23659: LD_INT 1
23661: NEG
23662: PUSH
23663: LD_INT 1
23665: NEG
23666: PUSH
23667: EMPTY
23668: LIST
23669: LIST
23670: PUSH
23671: LD_INT 1
23673: NEG
23674: PUSH
23675: LD_INT 2
23677: NEG
23678: PUSH
23679: EMPTY
23680: LIST
23681: LIST
23682: PUSH
23683: LD_INT 0
23685: PUSH
23686: LD_INT 2
23688: NEG
23689: PUSH
23690: EMPTY
23691: LIST
23692: LIST
23693: PUSH
23694: LD_INT 1
23696: PUSH
23697: LD_INT 1
23699: NEG
23700: PUSH
23701: EMPTY
23702: LIST
23703: LIST
23704: PUSH
23705: LD_INT 2
23707: PUSH
23708: LD_INT 0
23710: PUSH
23711: EMPTY
23712: LIST
23713: LIST
23714: PUSH
23715: LD_INT 2
23717: PUSH
23718: LD_INT 1
23720: PUSH
23721: EMPTY
23722: LIST
23723: LIST
23724: PUSH
23725: LD_INT 2
23727: PUSH
23728: LD_INT 2
23730: PUSH
23731: EMPTY
23732: LIST
23733: LIST
23734: PUSH
23735: LD_INT 1
23737: PUSH
23738: LD_INT 2
23740: PUSH
23741: EMPTY
23742: LIST
23743: LIST
23744: PUSH
23745: LD_INT 0
23747: PUSH
23748: LD_INT 2
23750: PUSH
23751: EMPTY
23752: LIST
23753: LIST
23754: PUSH
23755: LD_INT 1
23757: NEG
23758: PUSH
23759: LD_INT 1
23761: PUSH
23762: EMPTY
23763: LIST
23764: LIST
23765: PUSH
23766: LD_INT 2
23768: NEG
23769: PUSH
23770: LD_INT 0
23772: PUSH
23773: EMPTY
23774: LIST
23775: LIST
23776: PUSH
23777: LD_INT 2
23779: NEG
23780: PUSH
23781: LD_INT 1
23783: NEG
23784: PUSH
23785: EMPTY
23786: LIST
23787: LIST
23788: PUSH
23789: LD_INT 2
23791: NEG
23792: PUSH
23793: LD_INT 2
23795: NEG
23796: PUSH
23797: EMPTY
23798: LIST
23799: LIST
23800: PUSH
23801: EMPTY
23802: LIST
23803: LIST
23804: LIST
23805: LIST
23806: LIST
23807: LIST
23808: LIST
23809: LIST
23810: LIST
23811: LIST
23812: LIST
23813: LIST
23814: LIST
23815: LIST
23816: LIST
23817: LIST
23818: LIST
23819: LIST
23820: LIST
23821: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
23822: LD_ADDR_VAR 0 20
23826: PUSH
23827: LD_INT 0
23829: PUSH
23830: LD_INT 0
23832: PUSH
23833: EMPTY
23834: LIST
23835: LIST
23836: PUSH
23837: LD_INT 0
23839: PUSH
23840: LD_INT 1
23842: NEG
23843: PUSH
23844: EMPTY
23845: LIST
23846: LIST
23847: PUSH
23848: LD_INT 1
23850: PUSH
23851: LD_INT 0
23853: PUSH
23854: EMPTY
23855: LIST
23856: LIST
23857: PUSH
23858: LD_INT 1
23860: PUSH
23861: LD_INT 1
23863: PUSH
23864: EMPTY
23865: LIST
23866: LIST
23867: PUSH
23868: LD_INT 0
23870: PUSH
23871: LD_INT 1
23873: PUSH
23874: EMPTY
23875: LIST
23876: LIST
23877: PUSH
23878: LD_INT 1
23880: NEG
23881: PUSH
23882: LD_INT 0
23884: PUSH
23885: EMPTY
23886: LIST
23887: LIST
23888: PUSH
23889: LD_INT 1
23891: NEG
23892: PUSH
23893: LD_INT 1
23895: NEG
23896: PUSH
23897: EMPTY
23898: LIST
23899: LIST
23900: PUSH
23901: LD_INT 1
23903: NEG
23904: PUSH
23905: LD_INT 2
23907: NEG
23908: PUSH
23909: EMPTY
23910: LIST
23911: LIST
23912: PUSH
23913: LD_INT 0
23915: PUSH
23916: LD_INT 2
23918: NEG
23919: PUSH
23920: EMPTY
23921: LIST
23922: LIST
23923: PUSH
23924: LD_INT 1
23926: PUSH
23927: LD_INT 1
23929: NEG
23930: PUSH
23931: EMPTY
23932: LIST
23933: LIST
23934: PUSH
23935: LD_INT 2
23937: PUSH
23938: LD_INT 0
23940: PUSH
23941: EMPTY
23942: LIST
23943: LIST
23944: PUSH
23945: LD_INT 2
23947: PUSH
23948: LD_INT 1
23950: PUSH
23951: EMPTY
23952: LIST
23953: LIST
23954: PUSH
23955: LD_INT 2
23957: PUSH
23958: LD_INT 2
23960: PUSH
23961: EMPTY
23962: LIST
23963: LIST
23964: PUSH
23965: LD_INT 1
23967: PUSH
23968: LD_INT 2
23970: PUSH
23971: EMPTY
23972: LIST
23973: LIST
23974: PUSH
23975: LD_INT 0
23977: PUSH
23978: LD_INT 2
23980: PUSH
23981: EMPTY
23982: LIST
23983: LIST
23984: PUSH
23985: LD_INT 1
23987: NEG
23988: PUSH
23989: LD_INT 1
23991: PUSH
23992: EMPTY
23993: LIST
23994: LIST
23995: PUSH
23996: LD_INT 2
23998: NEG
23999: PUSH
24000: LD_INT 0
24002: PUSH
24003: EMPTY
24004: LIST
24005: LIST
24006: PUSH
24007: LD_INT 2
24009: NEG
24010: PUSH
24011: LD_INT 1
24013: NEG
24014: PUSH
24015: EMPTY
24016: LIST
24017: LIST
24018: PUSH
24019: LD_INT 2
24021: NEG
24022: PUSH
24023: LD_INT 2
24025: NEG
24026: PUSH
24027: EMPTY
24028: LIST
24029: LIST
24030: PUSH
24031: EMPTY
24032: LIST
24033: LIST
24034: LIST
24035: LIST
24036: LIST
24037: LIST
24038: LIST
24039: LIST
24040: LIST
24041: LIST
24042: LIST
24043: LIST
24044: LIST
24045: LIST
24046: LIST
24047: LIST
24048: LIST
24049: LIST
24050: LIST
24051: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24052: LD_ADDR_VAR 0 21
24056: PUSH
24057: LD_INT 0
24059: PUSH
24060: LD_INT 0
24062: PUSH
24063: EMPTY
24064: LIST
24065: LIST
24066: PUSH
24067: LD_INT 0
24069: PUSH
24070: LD_INT 1
24072: NEG
24073: PUSH
24074: EMPTY
24075: LIST
24076: LIST
24077: PUSH
24078: LD_INT 1
24080: PUSH
24081: LD_INT 0
24083: PUSH
24084: EMPTY
24085: LIST
24086: LIST
24087: PUSH
24088: LD_INT 1
24090: PUSH
24091: LD_INT 1
24093: PUSH
24094: EMPTY
24095: LIST
24096: LIST
24097: PUSH
24098: LD_INT 0
24100: PUSH
24101: LD_INT 1
24103: PUSH
24104: EMPTY
24105: LIST
24106: LIST
24107: PUSH
24108: LD_INT 1
24110: NEG
24111: PUSH
24112: LD_INT 0
24114: PUSH
24115: EMPTY
24116: LIST
24117: LIST
24118: PUSH
24119: LD_INT 1
24121: NEG
24122: PUSH
24123: LD_INT 1
24125: NEG
24126: PUSH
24127: EMPTY
24128: LIST
24129: LIST
24130: PUSH
24131: LD_INT 1
24133: NEG
24134: PUSH
24135: LD_INT 2
24137: NEG
24138: PUSH
24139: EMPTY
24140: LIST
24141: LIST
24142: PUSH
24143: LD_INT 0
24145: PUSH
24146: LD_INT 2
24148: NEG
24149: PUSH
24150: EMPTY
24151: LIST
24152: LIST
24153: PUSH
24154: LD_INT 1
24156: PUSH
24157: LD_INT 1
24159: NEG
24160: PUSH
24161: EMPTY
24162: LIST
24163: LIST
24164: PUSH
24165: LD_INT 2
24167: PUSH
24168: LD_INT 0
24170: PUSH
24171: EMPTY
24172: LIST
24173: LIST
24174: PUSH
24175: LD_INT 2
24177: PUSH
24178: LD_INT 1
24180: PUSH
24181: EMPTY
24182: LIST
24183: LIST
24184: PUSH
24185: LD_INT 2
24187: PUSH
24188: LD_INT 2
24190: PUSH
24191: EMPTY
24192: LIST
24193: LIST
24194: PUSH
24195: LD_INT 1
24197: PUSH
24198: LD_INT 2
24200: PUSH
24201: EMPTY
24202: LIST
24203: LIST
24204: PUSH
24205: LD_INT 0
24207: PUSH
24208: LD_INT 2
24210: PUSH
24211: EMPTY
24212: LIST
24213: LIST
24214: PUSH
24215: LD_INT 1
24217: NEG
24218: PUSH
24219: LD_INT 1
24221: PUSH
24222: EMPTY
24223: LIST
24224: LIST
24225: PUSH
24226: LD_INT 2
24228: NEG
24229: PUSH
24230: LD_INT 0
24232: PUSH
24233: EMPTY
24234: LIST
24235: LIST
24236: PUSH
24237: LD_INT 2
24239: NEG
24240: PUSH
24241: LD_INT 1
24243: NEG
24244: PUSH
24245: EMPTY
24246: LIST
24247: LIST
24248: PUSH
24249: LD_INT 2
24251: NEG
24252: PUSH
24253: LD_INT 2
24255: NEG
24256: PUSH
24257: EMPTY
24258: LIST
24259: LIST
24260: PUSH
24261: EMPTY
24262: LIST
24263: LIST
24264: LIST
24265: LIST
24266: LIST
24267: LIST
24268: LIST
24269: LIST
24270: LIST
24271: LIST
24272: LIST
24273: LIST
24274: LIST
24275: LIST
24276: LIST
24277: LIST
24278: LIST
24279: LIST
24280: LIST
24281: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24282: LD_ADDR_VAR 0 22
24286: PUSH
24287: LD_INT 0
24289: PUSH
24290: LD_INT 0
24292: PUSH
24293: EMPTY
24294: LIST
24295: LIST
24296: PUSH
24297: LD_INT 0
24299: PUSH
24300: LD_INT 1
24302: NEG
24303: PUSH
24304: EMPTY
24305: LIST
24306: LIST
24307: PUSH
24308: LD_INT 1
24310: PUSH
24311: LD_INT 0
24313: PUSH
24314: EMPTY
24315: LIST
24316: LIST
24317: PUSH
24318: LD_INT 1
24320: PUSH
24321: LD_INT 1
24323: PUSH
24324: EMPTY
24325: LIST
24326: LIST
24327: PUSH
24328: LD_INT 0
24330: PUSH
24331: LD_INT 1
24333: PUSH
24334: EMPTY
24335: LIST
24336: LIST
24337: PUSH
24338: LD_INT 1
24340: NEG
24341: PUSH
24342: LD_INT 0
24344: PUSH
24345: EMPTY
24346: LIST
24347: LIST
24348: PUSH
24349: LD_INT 1
24351: NEG
24352: PUSH
24353: LD_INT 1
24355: NEG
24356: PUSH
24357: EMPTY
24358: LIST
24359: LIST
24360: PUSH
24361: LD_INT 1
24363: NEG
24364: PUSH
24365: LD_INT 2
24367: NEG
24368: PUSH
24369: EMPTY
24370: LIST
24371: LIST
24372: PUSH
24373: LD_INT 0
24375: PUSH
24376: LD_INT 2
24378: NEG
24379: PUSH
24380: EMPTY
24381: LIST
24382: LIST
24383: PUSH
24384: LD_INT 1
24386: PUSH
24387: LD_INT 1
24389: NEG
24390: PUSH
24391: EMPTY
24392: LIST
24393: LIST
24394: PUSH
24395: LD_INT 2
24397: PUSH
24398: LD_INT 0
24400: PUSH
24401: EMPTY
24402: LIST
24403: LIST
24404: PUSH
24405: LD_INT 2
24407: PUSH
24408: LD_INT 1
24410: PUSH
24411: EMPTY
24412: LIST
24413: LIST
24414: PUSH
24415: LD_INT 2
24417: PUSH
24418: LD_INT 2
24420: PUSH
24421: EMPTY
24422: LIST
24423: LIST
24424: PUSH
24425: LD_INT 1
24427: PUSH
24428: LD_INT 2
24430: PUSH
24431: EMPTY
24432: LIST
24433: LIST
24434: PUSH
24435: LD_INT 0
24437: PUSH
24438: LD_INT 2
24440: PUSH
24441: EMPTY
24442: LIST
24443: LIST
24444: PUSH
24445: LD_INT 1
24447: NEG
24448: PUSH
24449: LD_INT 1
24451: PUSH
24452: EMPTY
24453: LIST
24454: LIST
24455: PUSH
24456: LD_INT 2
24458: NEG
24459: PUSH
24460: LD_INT 0
24462: PUSH
24463: EMPTY
24464: LIST
24465: LIST
24466: PUSH
24467: LD_INT 2
24469: NEG
24470: PUSH
24471: LD_INT 1
24473: NEG
24474: PUSH
24475: EMPTY
24476: LIST
24477: LIST
24478: PUSH
24479: LD_INT 2
24481: NEG
24482: PUSH
24483: LD_INT 2
24485: NEG
24486: PUSH
24487: EMPTY
24488: LIST
24489: LIST
24490: PUSH
24491: EMPTY
24492: LIST
24493: LIST
24494: LIST
24495: LIST
24496: LIST
24497: LIST
24498: LIST
24499: LIST
24500: LIST
24501: LIST
24502: LIST
24503: LIST
24504: LIST
24505: LIST
24506: LIST
24507: LIST
24508: LIST
24509: LIST
24510: LIST
24511: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
24512: LD_ADDR_VAR 0 23
24516: PUSH
24517: LD_INT 0
24519: PUSH
24520: LD_INT 0
24522: PUSH
24523: EMPTY
24524: LIST
24525: LIST
24526: PUSH
24527: LD_INT 0
24529: PUSH
24530: LD_INT 1
24532: NEG
24533: PUSH
24534: EMPTY
24535: LIST
24536: LIST
24537: PUSH
24538: LD_INT 1
24540: PUSH
24541: LD_INT 0
24543: PUSH
24544: EMPTY
24545: LIST
24546: LIST
24547: PUSH
24548: LD_INT 1
24550: PUSH
24551: LD_INT 1
24553: PUSH
24554: EMPTY
24555: LIST
24556: LIST
24557: PUSH
24558: LD_INT 0
24560: PUSH
24561: LD_INT 1
24563: PUSH
24564: EMPTY
24565: LIST
24566: LIST
24567: PUSH
24568: LD_INT 1
24570: NEG
24571: PUSH
24572: LD_INT 0
24574: PUSH
24575: EMPTY
24576: LIST
24577: LIST
24578: PUSH
24579: LD_INT 1
24581: NEG
24582: PUSH
24583: LD_INT 1
24585: NEG
24586: PUSH
24587: EMPTY
24588: LIST
24589: LIST
24590: PUSH
24591: LD_INT 1
24593: NEG
24594: PUSH
24595: LD_INT 2
24597: NEG
24598: PUSH
24599: EMPTY
24600: LIST
24601: LIST
24602: PUSH
24603: LD_INT 0
24605: PUSH
24606: LD_INT 2
24608: NEG
24609: PUSH
24610: EMPTY
24611: LIST
24612: LIST
24613: PUSH
24614: LD_INT 1
24616: PUSH
24617: LD_INT 1
24619: NEG
24620: PUSH
24621: EMPTY
24622: LIST
24623: LIST
24624: PUSH
24625: LD_INT 2
24627: PUSH
24628: LD_INT 0
24630: PUSH
24631: EMPTY
24632: LIST
24633: LIST
24634: PUSH
24635: LD_INT 2
24637: PUSH
24638: LD_INT 1
24640: PUSH
24641: EMPTY
24642: LIST
24643: LIST
24644: PUSH
24645: LD_INT 2
24647: PUSH
24648: LD_INT 2
24650: PUSH
24651: EMPTY
24652: LIST
24653: LIST
24654: PUSH
24655: LD_INT 1
24657: PUSH
24658: LD_INT 2
24660: PUSH
24661: EMPTY
24662: LIST
24663: LIST
24664: PUSH
24665: LD_INT 0
24667: PUSH
24668: LD_INT 2
24670: PUSH
24671: EMPTY
24672: LIST
24673: LIST
24674: PUSH
24675: LD_INT 1
24677: NEG
24678: PUSH
24679: LD_INT 1
24681: PUSH
24682: EMPTY
24683: LIST
24684: LIST
24685: PUSH
24686: LD_INT 2
24688: NEG
24689: PUSH
24690: LD_INT 0
24692: PUSH
24693: EMPTY
24694: LIST
24695: LIST
24696: PUSH
24697: LD_INT 2
24699: NEG
24700: PUSH
24701: LD_INT 1
24703: NEG
24704: PUSH
24705: EMPTY
24706: LIST
24707: LIST
24708: PUSH
24709: LD_INT 2
24711: NEG
24712: PUSH
24713: LD_INT 2
24715: NEG
24716: PUSH
24717: EMPTY
24718: LIST
24719: LIST
24720: PUSH
24721: LD_INT 2
24723: NEG
24724: PUSH
24725: LD_INT 3
24727: NEG
24728: PUSH
24729: EMPTY
24730: LIST
24731: LIST
24732: PUSH
24733: LD_INT 1
24735: NEG
24736: PUSH
24737: LD_INT 3
24739: NEG
24740: PUSH
24741: EMPTY
24742: LIST
24743: LIST
24744: PUSH
24745: LD_INT 1
24747: PUSH
24748: LD_INT 2
24750: NEG
24751: PUSH
24752: EMPTY
24753: LIST
24754: LIST
24755: PUSH
24756: LD_INT 2
24758: PUSH
24759: LD_INT 1
24761: NEG
24762: PUSH
24763: EMPTY
24764: LIST
24765: LIST
24766: PUSH
24767: EMPTY
24768: LIST
24769: LIST
24770: LIST
24771: LIST
24772: LIST
24773: LIST
24774: LIST
24775: LIST
24776: LIST
24777: LIST
24778: LIST
24779: LIST
24780: LIST
24781: LIST
24782: LIST
24783: LIST
24784: LIST
24785: LIST
24786: LIST
24787: LIST
24788: LIST
24789: LIST
24790: LIST
24791: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
24792: LD_ADDR_VAR 0 24
24796: PUSH
24797: LD_INT 0
24799: PUSH
24800: LD_INT 0
24802: PUSH
24803: EMPTY
24804: LIST
24805: LIST
24806: PUSH
24807: LD_INT 0
24809: PUSH
24810: LD_INT 1
24812: NEG
24813: PUSH
24814: EMPTY
24815: LIST
24816: LIST
24817: PUSH
24818: LD_INT 1
24820: PUSH
24821: LD_INT 0
24823: PUSH
24824: EMPTY
24825: LIST
24826: LIST
24827: PUSH
24828: LD_INT 1
24830: PUSH
24831: LD_INT 1
24833: PUSH
24834: EMPTY
24835: LIST
24836: LIST
24837: PUSH
24838: LD_INT 0
24840: PUSH
24841: LD_INT 1
24843: PUSH
24844: EMPTY
24845: LIST
24846: LIST
24847: PUSH
24848: LD_INT 1
24850: NEG
24851: PUSH
24852: LD_INT 0
24854: PUSH
24855: EMPTY
24856: LIST
24857: LIST
24858: PUSH
24859: LD_INT 1
24861: NEG
24862: PUSH
24863: LD_INT 1
24865: NEG
24866: PUSH
24867: EMPTY
24868: LIST
24869: LIST
24870: PUSH
24871: LD_INT 1
24873: NEG
24874: PUSH
24875: LD_INT 2
24877: NEG
24878: PUSH
24879: EMPTY
24880: LIST
24881: LIST
24882: PUSH
24883: LD_INT 0
24885: PUSH
24886: LD_INT 2
24888: NEG
24889: PUSH
24890: EMPTY
24891: LIST
24892: LIST
24893: PUSH
24894: LD_INT 1
24896: PUSH
24897: LD_INT 1
24899: NEG
24900: PUSH
24901: EMPTY
24902: LIST
24903: LIST
24904: PUSH
24905: LD_INT 2
24907: PUSH
24908: LD_INT 0
24910: PUSH
24911: EMPTY
24912: LIST
24913: LIST
24914: PUSH
24915: LD_INT 2
24917: PUSH
24918: LD_INT 1
24920: PUSH
24921: EMPTY
24922: LIST
24923: LIST
24924: PUSH
24925: LD_INT 2
24927: PUSH
24928: LD_INT 2
24930: PUSH
24931: EMPTY
24932: LIST
24933: LIST
24934: PUSH
24935: LD_INT 1
24937: PUSH
24938: LD_INT 2
24940: PUSH
24941: EMPTY
24942: LIST
24943: LIST
24944: PUSH
24945: LD_INT 0
24947: PUSH
24948: LD_INT 2
24950: PUSH
24951: EMPTY
24952: LIST
24953: LIST
24954: PUSH
24955: LD_INT 1
24957: NEG
24958: PUSH
24959: LD_INT 1
24961: PUSH
24962: EMPTY
24963: LIST
24964: LIST
24965: PUSH
24966: LD_INT 2
24968: NEG
24969: PUSH
24970: LD_INT 0
24972: PUSH
24973: EMPTY
24974: LIST
24975: LIST
24976: PUSH
24977: LD_INT 2
24979: NEG
24980: PUSH
24981: LD_INT 1
24983: NEG
24984: PUSH
24985: EMPTY
24986: LIST
24987: LIST
24988: PUSH
24989: LD_INT 2
24991: NEG
24992: PUSH
24993: LD_INT 2
24995: NEG
24996: PUSH
24997: EMPTY
24998: LIST
24999: LIST
25000: PUSH
25001: LD_INT 1
25003: PUSH
25004: LD_INT 2
25006: NEG
25007: PUSH
25008: EMPTY
25009: LIST
25010: LIST
25011: PUSH
25012: LD_INT 2
25014: PUSH
25015: LD_INT 1
25017: NEG
25018: PUSH
25019: EMPTY
25020: LIST
25021: LIST
25022: PUSH
25023: LD_INT 3
25025: PUSH
25026: LD_INT 1
25028: PUSH
25029: EMPTY
25030: LIST
25031: LIST
25032: PUSH
25033: LD_INT 3
25035: PUSH
25036: LD_INT 2
25038: PUSH
25039: EMPTY
25040: LIST
25041: LIST
25042: PUSH
25043: EMPTY
25044: LIST
25045: LIST
25046: LIST
25047: LIST
25048: LIST
25049: LIST
25050: LIST
25051: LIST
25052: LIST
25053: LIST
25054: LIST
25055: LIST
25056: LIST
25057: LIST
25058: LIST
25059: LIST
25060: LIST
25061: LIST
25062: LIST
25063: LIST
25064: LIST
25065: LIST
25066: LIST
25067: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
25068: LD_ADDR_VAR 0 25
25072: PUSH
25073: LD_INT 0
25075: PUSH
25076: LD_INT 0
25078: PUSH
25079: EMPTY
25080: LIST
25081: LIST
25082: PUSH
25083: LD_INT 0
25085: PUSH
25086: LD_INT 1
25088: NEG
25089: PUSH
25090: EMPTY
25091: LIST
25092: LIST
25093: PUSH
25094: LD_INT 1
25096: PUSH
25097: LD_INT 0
25099: PUSH
25100: EMPTY
25101: LIST
25102: LIST
25103: PUSH
25104: LD_INT 1
25106: PUSH
25107: LD_INT 1
25109: PUSH
25110: EMPTY
25111: LIST
25112: LIST
25113: PUSH
25114: LD_INT 0
25116: PUSH
25117: LD_INT 1
25119: PUSH
25120: EMPTY
25121: LIST
25122: LIST
25123: PUSH
25124: LD_INT 1
25126: NEG
25127: PUSH
25128: LD_INT 0
25130: PUSH
25131: EMPTY
25132: LIST
25133: LIST
25134: PUSH
25135: LD_INT 1
25137: NEG
25138: PUSH
25139: LD_INT 1
25141: NEG
25142: PUSH
25143: EMPTY
25144: LIST
25145: LIST
25146: PUSH
25147: LD_INT 1
25149: NEG
25150: PUSH
25151: LD_INT 2
25153: NEG
25154: PUSH
25155: EMPTY
25156: LIST
25157: LIST
25158: PUSH
25159: LD_INT 0
25161: PUSH
25162: LD_INT 2
25164: NEG
25165: PUSH
25166: EMPTY
25167: LIST
25168: LIST
25169: PUSH
25170: LD_INT 1
25172: PUSH
25173: LD_INT 1
25175: NEG
25176: PUSH
25177: EMPTY
25178: LIST
25179: LIST
25180: PUSH
25181: LD_INT 2
25183: PUSH
25184: LD_INT 0
25186: PUSH
25187: EMPTY
25188: LIST
25189: LIST
25190: PUSH
25191: LD_INT 2
25193: PUSH
25194: LD_INT 1
25196: PUSH
25197: EMPTY
25198: LIST
25199: LIST
25200: PUSH
25201: LD_INT 2
25203: PUSH
25204: LD_INT 2
25206: PUSH
25207: EMPTY
25208: LIST
25209: LIST
25210: PUSH
25211: LD_INT 1
25213: PUSH
25214: LD_INT 2
25216: PUSH
25217: EMPTY
25218: LIST
25219: LIST
25220: PUSH
25221: LD_INT 0
25223: PUSH
25224: LD_INT 2
25226: PUSH
25227: EMPTY
25228: LIST
25229: LIST
25230: PUSH
25231: LD_INT 1
25233: NEG
25234: PUSH
25235: LD_INT 1
25237: PUSH
25238: EMPTY
25239: LIST
25240: LIST
25241: PUSH
25242: LD_INT 2
25244: NEG
25245: PUSH
25246: LD_INT 0
25248: PUSH
25249: EMPTY
25250: LIST
25251: LIST
25252: PUSH
25253: LD_INT 2
25255: NEG
25256: PUSH
25257: LD_INT 1
25259: NEG
25260: PUSH
25261: EMPTY
25262: LIST
25263: LIST
25264: PUSH
25265: LD_INT 2
25267: NEG
25268: PUSH
25269: LD_INT 2
25271: NEG
25272: PUSH
25273: EMPTY
25274: LIST
25275: LIST
25276: PUSH
25277: LD_INT 3
25279: PUSH
25280: LD_INT 1
25282: PUSH
25283: EMPTY
25284: LIST
25285: LIST
25286: PUSH
25287: LD_INT 3
25289: PUSH
25290: LD_INT 2
25292: PUSH
25293: EMPTY
25294: LIST
25295: LIST
25296: PUSH
25297: LD_INT 2
25299: PUSH
25300: LD_INT 3
25302: PUSH
25303: EMPTY
25304: LIST
25305: LIST
25306: PUSH
25307: LD_INT 1
25309: PUSH
25310: LD_INT 3
25312: PUSH
25313: EMPTY
25314: LIST
25315: LIST
25316: PUSH
25317: EMPTY
25318: LIST
25319: LIST
25320: LIST
25321: LIST
25322: LIST
25323: LIST
25324: LIST
25325: LIST
25326: LIST
25327: LIST
25328: LIST
25329: LIST
25330: LIST
25331: LIST
25332: LIST
25333: LIST
25334: LIST
25335: LIST
25336: LIST
25337: LIST
25338: LIST
25339: LIST
25340: LIST
25341: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
25342: LD_ADDR_VAR 0 26
25346: PUSH
25347: LD_INT 0
25349: PUSH
25350: LD_INT 0
25352: PUSH
25353: EMPTY
25354: LIST
25355: LIST
25356: PUSH
25357: LD_INT 0
25359: PUSH
25360: LD_INT 1
25362: NEG
25363: PUSH
25364: EMPTY
25365: LIST
25366: LIST
25367: PUSH
25368: LD_INT 1
25370: PUSH
25371: LD_INT 0
25373: PUSH
25374: EMPTY
25375: LIST
25376: LIST
25377: PUSH
25378: LD_INT 1
25380: PUSH
25381: LD_INT 1
25383: PUSH
25384: EMPTY
25385: LIST
25386: LIST
25387: PUSH
25388: LD_INT 0
25390: PUSH
25391: LD_INT 1
25393: PUSH
25394: EMPTY
25395: LIST
25396: LIST
25397: PUSH
25398: LD_INT 1
25400: NEG
25401: PUSH
25402: LD_INT 0
25404: PUSH
25405: EMPTY
25406: LIST
25407: LIST
25408: PUSH
25409: LD_INT 1
25411: NEG
25412: PUSH
25413: LD_INT 1
25415: NEG
25416: PUSH
25417: EMPTY
25418: LIST
25419: LIST
25420: PUSH
25421: LD_INT 1
25423: NEG
25424: PUSH
25425: LD_INT 2
25427: NEG
25428: PUSH
25429: EMPTY
25430: LIST
25431: LIST
25432: PUSH
25433: LD_INT 0
25435: PUSH
25436: LD_INT 2
25438: NEG
25439: PUSH
25440: EMPTY
25441: LIST
25442: LIST
25443: PUSH
25444: LD_INT 1
25446: PUSH
25447: LD_INT 1
25449: NEG
25450: PUSH
25451: EMPTY
25452: LIST
25453: LIST
25454: PUSH
25455: LD_INT 2
25457: PUSH
25458: LD_INT 0
25460: PUSH
25461: EMPTY
25462: LIST
25463: LIST
25464: PUSH
25465: LD_INT 2
25467: PUSH
25468: LD_INT 1
25470: PUSH
25471: EMPTY
25472: LIST
25473: LIST
25474: PUSH
25475: LD_INT 2
25477: PUSH
25478: LD_INT 2
25480: PUSH
25481: EMPTY
25482: LIST
25483: LIST
25484: PUSH
25485: LD_INT 1
25487: PUSH
25488: LD_INT 2
25490: PUSH
25491: EMPTY
25492: LIST
25493: LIST
25494: PUSH
25495: LD_INT 0
25497: PUSH
25498: LD_INT 2
25500: PUSH
25501: EMPTY
25502: LIST
25503: LIST
25504: PUSH
25505: LD_INT 1
25507: NEG
25508: PUSH
25509: LD_INT 1
25511: PUSH
25512: EMPTY
25513: LIST
25514: LIST
25515: PUSH
25516: LD_INT 2
25518: NEG
25519: PUSH
25520: LD_INT 0
25522: PUSH
25523: EMPTY
25524: LIST
25525: LIST
25526: PUSH
25527: LD_INT 2
25529: NEG
25530: PUSH
25531: LD_INT 1
25533: NEG
25534: PUSH
25535: EMPTY
25536: LIST
25537: LIST
25538: PUSH
25539: LD_INT 2
25541: NEG
25542: PUSH
25543: LD_INT 2
25545: NEG
25546: PUSH
25547: EMPTY
25548: LIST
25549: LIST
25550: PUSH
25551: LD_INT 2
25553: PUSH
25554: LD_INT 3
25556: PUSH
25557: EMPTY
25558: LIST
25559: LIST
25560: PUSH
25561: LD_INT 1
25563: PUSH
25564: LD_INT 3
25566: PUSH
25567: EMPTY
25568: LIST
25569: LIST
25570: PUSH
25571: LD_INT 1
25573: NEG
25574: PUSH
25575: LD_INT 2
25577: PUSH
25578: EMPTY
25579: LIST
25580: LIST
25581: PUSH
25582: LD_INT 2
25584: NEG
25585: PUSH
25586: LD_INT 1
25588: PUSH
25589: EMPTY
25590: LIST
25591: LIST
25592: PUSH
25593: EMPTY
25594: LIST
25595: LIST
25596: LIST
25597: LIST
25598: LIST
25599: LIST
25600: LIST
25601: LIST
25602: LIST
25603: LIST
25604: LIST
25605: LIST
25606: LIST
25607: LIST
25608: LIST
25609: LIST
25610: LIST
25611: LIST
25612: LIST
25613: LIST
25614: LIST
25615: LIST
25616: LIST
25617: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
25618: LD_ADDR_VAR 0 27
25622: PUSH
25623: LD_INT 0
25625: PUSH
25626: LD_INT 0
25628: PUSH
25629: EMPTY
25630: LIST
25631: LIST
25632: PUSH
25633: LD_INT 0
25635: PUSH
25636: LD_INT 1
25638: NEG
25639: PUSH
25640: EMPTY
25641: LIST
25642: LIST
25643: PUSH
25644: LD_INT 1
25646: PUSH
25647: LD_INT 0
25649: PUSH
25650: EMPTY
25651: LIST
25652: LIST
25653: PUSH
25654: LD_INT 1
25656: PUSH
25657: LD_INT 1
25659: PUSH
25660: EMPTY
25661: LIST
25662: LIST
25663: PUSH
25664: LD_INT 0
25666: PUSH
25667: LD_INT 1
25669: PUSH
25670: EMPTY
25671: LIST
25672: LIST
25673: PUSH
25674: LD_INT 1
25676: NEG
25677: PUSH
25678: LD_INT 0
25680: PUSH
25681: EMPTY
25682: LIST
25683: LIST
25684: PUSH
25685: LD_INT 1
25687: NEG
25688: PUSH
25689: LD_INT 1
25691: NEG
25692: PUSH
25693: EMPTY
25694: LIST
25695: LIST
25696: PUSH
25697: LD_INT 1
25699: NEG
25700: PUSH
25701: LD_INT 2
25703: NEG
25704: PUSH
25705: EMPTY
25706: LIST
25707: LIST
25708: PUSH
25709: LD_INT 0
25711: PUSH
25712: LD_INT 2
25714: NEG
25715: PUSH
25716: EMPTY
25717: LIST
25718: LIST
25719: PUSH
25720: LD_INT 1
25722: PUSH
25723: LD_INT 1
25725: NEG
25726: PUSH
25727: EMPTY
25728: LIST
25729: LIST
25730: PUSH
25731: LD_INT 2
25733: PUSH
25734: LD_INT 0
25736: PUSH
25737: EMPTY
25738: LIST
25739: LIST
25740: PUSH
25741: LD_INT 2
25743: PUSH
25744: LD_INT 1
25746: PUSH
25747: EMPTY
25748: LIST
25749: LIST
25750: PUSH
25751: LD_INT 2
25753: PUSH
25754: LD_INT 2
25756: PUSH
25757: EMPTY
25758: LIST
25759: LIST
25760: PUSH
25761: LD_INT 1
25763: PUSH
25764: LD_INT 2
25766: PUSH
25767: EMPTY
25768: LIST
25769: LIST
25770: PUSH
25771: LD_INT 0
25773: PUSH
25774: LD_INT 2
25776: PUSH
25777: EMPTY
25778: LIST
25779: LIST
25780: PUSH
25781: LD_INT 1
25783: NEG
25784: PUSH
25785: LD_INT 1
25787: PUSH
25788: EMPTY
25789: LIST
25790: LIST
25791: PUSH
25792: LD_INT 2
25794: NEG
25795: PUSH
25796: LD_INT 0
25798: PUSH
25799: EMPTY
25800: LIST
25801: LIST
25802: PUSH
25803: LD_INT 2
25805: NEG
25806: PUSH
25807: LD_INT 1
25809: NEG
25810: PUSH
25811: EMPTY
25812: LIST
25813: LIST
25814: PUSH
25815: LD_INT 2
25817: NEG
25818: PUSH
25819: LD_INT 2
25821: NEG
25822: PUSH
25823: EMPTY
25824: LIST
25825: LIST
25826: PUSH
25827: LD_INT 1
25829: NEG
25830: PUSH
25831: LD_INT 2
25833: PUSH
25834: EMPTY
25835: LIST
25836: LIST
25837: PUSH
25838: LD_INT 2
25840: NEG
25841: PUSH
25842: LD_INT 1
25844: PUSH
25845: EMPTY
25846: LIST
25847: LIST
25848: PUSH
25849: LD_INT 3
25851: NEG
25852: PUSH
25853: LD_INT 1
25855: NEG
25856: PUSH
25857: EMPTY
25858: LIST
25859: LIST
25860: PUSH
25861: LD_INT 3
25863: NEG
25864: PUSH
25865: LD_INT 2
25867: NEG
25868: PUSH
25869: EMPTY
25870: LIST
25871: LIST
25872: PUSH
25873: EMPTY
25874: LIST
25875: LIST
25876: LIST
25877: LIST
25878: LIST
25879: LIST
25880: LIST
25881: LIST
25882: LIST
25883: LIST
25884: LIST
25885: LIST
25886: LIST
25887: LIST
25888: LIST
25889: LIST
25890: LIST
25891: LIST
25892: LIST
25893: LIST
25894: LIST
25895: LIST
25896: LIST
25897: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
25898: LD_ADDR_VAR 0 28
25902: PUSH
25903: LD_INT 0
25905: PUSH
25906: LD_INT 0
25908: PUSH
25909: EMPTY
25910: LIST
25911: LIST
25912: PUSH
25913: LD_INT 0
25915: PUSH
25916: LD_INT 1
25918: NEG
25919: PUSH
25920: EMPTY
25921: LIST
25922: LIST
25923: PUSH
25924: LD_INT 1
25926: PUSH
25927: LD_INT 0
25929: PUSH
25930: EMPTY
25931: LIST
25932: LIST
25933: PUSH
25934: LD_INT 1
25936: PUSH
25937: LD_INT 1
25939: PUSH
25940: EMPTY
25941: LIST
25942: LIST
25943: PUSH
25944: LD_INT 0
25946: PUSH
25947: LD_INT 1
25949: PUSH
25950: EMPTY
25951: LIST
25952: LIST
25953: PUSH
25954: LD_INT 1
25956: NEG
25957: PUSH
25958: LD_INT 0
25960: PUSH
25961: EMPTY
25962: LIST
25963: LIST
25964: PUSH
25965: LD_INT 1
25967: NEG
25968: PUSH
25969: LD_INT 1
25971: NEG
25972: PUSH
25973: EMPTY
25974: LIST
25975: LIST
25976: PUSH
25977: LD_INT 1
25979: NEG
25980: PUSH
25981: LD_INT 2
25983: NEG
25984: PUSH
25985: EMPTY
25986: LIST
25987: LIST
25988: PUSH
25989: LD_INT 0
25991: PUSH
25992: LD_INT 2
25994: NEG
25995: PUSH
25996: EMPTY
25997: LIST
25998: LIST
25999: PUSH
26000: LD_INT 1
26002: PUSH
26003: LD_INT 1
26005: NEG
26006: PUSH
26007: EMPTY
26008: LIST
26009: LIST
26010: PUSH
26011: LD_INT 2
26013: PUSH
26014: LD_INT 0
26016: PUSH
26017: EMPTY
26018: LIST
26019: LIST
26020: PUSH
26021: LD_INT 2
26023: PUSH
26024: LD_INT 1
26026: PUSH
26027: EMPTY
26028: LIST
26029: LIST
26030: PUSH
26031: LD_INT 2
26033: PUSH
26034: LD_INT 2
26036: PUSH
26037: EMPTY
26038: LIST
26039: LIST
26040: PUSH
26041: LD_INT 1
26043: PUSH
26044: LD_INT 2
26046: PUSH
26047: EMPTY
26048: LIST
26049: LIST
26050: PUSH
26051: LD_INT 0
26053: PUSH
26054: LD_INT 2
26056: PUSH
26057: EMPTY
26058: LIST
26059: LIST
26060: PUSH
26061: LD_INT 1
26063: NEG
26064: PUSH
26065: LD_INT 1
26067: PUSH
26068: EMPTY
26069: LIST
26070: LIST
26071: PUSH
26072: LD_INT 2
26074: NEG
26075: PUSH
26076: LD_INT 0
26078: PUSH
26079: EMPTY
26080: LIST
26081: LIST
26082: PUSH
26083: LD_INT 2
26085: NEG
26086: PUSH
26087: LD_INT 1
26089: NEG
26090: PUSH
26091: EMPTY
26092: LIST
26093: LIST
26094: PUSH
26095: LD_INT 2
26097: NEG
26098: PUSH
26099: LD_INT 2
26101: NEG
26102: PUSH
26103: EMPTY
26104: LIST
26105: LIST
26106: PUSH
26107: LD_INT 2
26109: NEG
26110: PUSH
26111: LD_INT 3
26113: NEG
26114: PUSH
26115: EMPTY
26116: LIST
26117: LIST
26118: PUSH
26119: LD_INT 1
26121: NEG
26122: PUSH
26123: LD_INT 3
26125: NEG
26126: PUSH
26127: EMPTY
26128: LIST
26129: LIST
26130: PUSH
26131: LD_INT 3
26133: NEG
26134: PUSH
26135: LD_INT 1
26137: NEG
26138: PUSH
26139: EMPTY
26140: LIST
26141: LIST
26142: PUSH
26143: LD_INT 3
26145: NEG
26146: PUSH
26147: LD_INT 2
26149: NEG
26150: PUSH
26151: EMPTY
26152: LIST
26153: LIST
26154: PUSH
26155: EMPTY
26156: LIST
26157: LIST
26158: LIST
26159: LIST
26160: LIST
26161: LIST
26162: LIST
26163: LIST
26164: LIST
26165: LIST
26166: LIST
26167: LIST
26168: LIST
26169: LIST
26170: LIST
26171: LIST
26172: LIST
26173: LIST
26174: LIST
26175: LIST
26176: LIST
26177: LIST
26178: LIST
26179: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
26180: LD_ADDR_VAR 0 29
26184: PUSH
26185: LD_INT 0
26187: PUSH
26188: LD_INT 0
26190: PUSH
26191: EMPTY
26192: LIST
26193: LIST
26194: PUSH
26195: LD_INT 0
26197: PUSH
26198: LD_INT 1
26200: NEG
26201: PUSH
26202: EMPTY
26203: LIST
26204: LIST
26205: PUSH
26206: LD_INT 1
26208: PUSH
26209: LD_INT 0
26211: PUSH
26212: EMPTY
26213: LIST
26214: LIST
26215: PUSH
26216: LD_INT 1
26218: PUSH
26219: LD_INT 1
26221: PUSH
26222: EMPTY
26223: LIST
26224: LIST
26225: PUSH
26226: LD_INT 0
26228: PUSH
26229: LD_INT 1
26231: PUSH
26232: EMPTY
26233: LIST
26234: LIST
26235: PUSH
26236: LD_INT 1
26238: NEG
26239: PUSH
26240: LD_INT 0
26242: PUSH
26243: EMPTY
26244: LIST
26245: LIST
26246: PUSH
26247: LD_INT 1
26249: NEG
26250: PUSH
26251: LD_INT 1
26253: NEG
26254: PUSH
26255: EMPTY
26256: LIST
26257: LIST
26258: PUSH
26259: LD_INT 1
26261: NEG
26262: PUSH
26263: LD_INT 2
26265: NEG
26266: PUSH
26267: EMPTY
26268: LIST
26269: LIST
26270: PUSH
26271: LD_INT 0
26273: PUSH
26274: LD_INT 2
26276: NEG
26277: PUSH
26278: EMPTY
26279: LIST
26280: LIST
26281: PUSH
26282: LD_INT 1
26284: PUSH
26285: LD_INT 1
26287: NEG
26288: PUSH
26289: EMPTY
26290: LIST
26291: LIST
26292: PUSH
26293: LD_INT 2
26295: PUSH
26296: LD_INT 0
26298: PUSH
26299: EMPTY
26300: LIST
26301: LIST
26302: PUSH
26303: LD_INT 2
26305: PUSH
26306: LD_INT 1
26308: PUSH
26309: EMPTY
26310: LIST
26311: LIST
26312: PUSH
26313: LD_INT 1
26315: PUSH
26316: LD_INT 2
26318: PUSH
26319: EMPTY
26320: LIST
26321: LIST
26322: PUSH
26323: LD_INT 0
26325: PUSH
26326: LD_INT 2
26328: PUSH
26329: EMPTY
26330: LIST
26331: LIST
26332: PUSH
26333: LD_INT 1
26335: NEG
26336: PUSH
26337: LD_INT 1
26339: PUSH
26340: EMPTY
26341: LIST
26342: LIST
26343: PUSH
26344: LD_INT 2
26346: NEG
26347: PUSH
26348: LD_INT 1
26350: NEG
26351: PUSH
26352: EMPTY
26353: LIST
26354: LIST
26355: PUSH
26356: LD_INT 2
26358: NEG
26359: PUSH
26360: LD_INT 2
26362: NEG
26363: PUSH
26364: EMPTY
26365: LIST
26366: LIST
26367: PUSH
26368: LD_INT 2
26370: NEG
26371: PUSH
26372: LD_INT 3
26374: NEG
26375: PUSH
26376: EMPTY
26377: LIST
26378: LIST
26379: PUSH
26380: LD_INT 2
26382: PUSH
26383: LD_INT 1
26385: NEG
26386: PUSH
26387: EMPTY
26388: LIST
26389: LIST
26390: PUSH
26391: LD_INT 3
26393: PUSH
26394: LD_INT 1
26396: PUSH
26397: EMPTY
26398: LIST
26399: LIST
26400: PUSH
26401: LD_INT 1
26403: PUSH
26404: LD_INT 3
26406: PUSH
26407: EMPTY
26408: LIST
26409: LIST
26410: PUSH
26411: LD_INT 1
26413: NEG
26414: PUSH
26415: LD_INT 2
26417: PUSH
26418: EMPTY
26419: LIST
26420: LIST
26421: PUSH
26422: LD_INT 3
26424: NEG
26425: PUSH
26426: LD_INT 2
26428: NEG
26429: PUSH
26430: EMPTY
26431: LIST
26432: LIST
26433: PUSH
26434: EMPTY
26435: LIST
26436: LIST
26437: LIST
26438: LIST
26439: LIST
26440: LIST
26441: LIST
26442: LIST
26443: LIST
26444: LIST
26445: LIST
26446: LIST
26447: LIST
26448: LIST
26449: LIST
26450: LIST
26451: LIST
26452: LIST
26453: LIST
26454: LIST
26455: LIST
26456: LIST
26457: LIST
26458: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
26459: LD_ADDR_VAR 0 30
26463: PUSH
26464: LD_INT 0
26466: PUSH
26467: LD_INT 0
26469: PUSH
26470: EMPTY
26471: LIST
26472: LIST
26473: PUSH
26474: LD_INT 0
26476: PUSH
26477: LD_INT 1
26479: NEG
26480: PUSH
26481: EMPTY
26482: LIST
26483: LIST
26484: PUSH
26485: LD_INT 1
26487: PUSH
26488: LD_INT 0
26490: PUSH
26491: EMPTY
26492: LIST
26493: LIST
26494: PUSH
26495: LD_INT 1
26497: PUSH
26498: LD_INT 1
26500: PUSH
26501: EMPTY
26502: LIST
26503: LIST
26504: PUSH
26505: LD_INT 0
26507: PUSH
26508: LD_INT 1
26510: PUSH
26511: EMPTY
26512: LIST
26513: LIST
26514: PUSH
26515: LD_INT 1
26517: NEG
26518: PUSH
26519: LD_INT 0
26521: PUSH
26522: EMPTY
26523: LIST
26524: LIST
26525: PUSH
26526: LD_INT 1
26528: NEG
26529: PUSH
26530: LD_INT 1
26532: NEG
26533: PUSH
26534: EMPTY
26535: LIST
26536: LIST
26537: PUSH
26538: LD_INT 1
26540: NEG
26541: PUSH
26542: LD_INT 2
26544: NEG
26545: PUSH
26546: EMPTY
26547: LIST
26548: LIST
26549: PUSH
26550: LD_INT 0
26552: PUSH
26553: LD_INT 2
26555: NEG
26556: PUSH
26557: EMPTY
26558: LIST
26559: LIST
26560: PUSH
26561: LD_INT 1
26563: PUSH
26564: LD_INT 1
26566: NEG
26567: PUSH
26568: EMPTY
26569: LIST
26570: LIST
26571: PUSH
26572: LD_INT 2
26574: PUSH
26575: LD_INT 0
26577: PUSH
26578: EMPTY
26579: LIST
26580: LIST
26581: PUSH
26582: LD_INT 2
26584: PUSH
26585: LD_INT 1
26587: PUSH
26588: EMPTY
26589: LIST
26590: LIST
26591: PUSH
26592: LD_INT 2
26594: PUSH
26595: LD_INT 2
26597: PUSH
26598: EMPTY
26599: LIST
26600: LIST
26601: PUSH
26602: LD_INT 1
26604: PUSH
26605: LD_INT 2
26607: PUSH
26608: EMPTY
26609: LIST
26610: LIST
26611: PUSH
26612: LD_INT 1
26614: NEG
26615: PUSH
26616: LD_INT 1
26618: PUSH
26619: EMPTY
26620: LIST
26621: LIST
26622: PUSH
26623: LD_INT 2
26625: NEG
26626: PUSH
26627: LD_INT 0
26629: PUSH
26630: EMPTY
26631: LIST
26632: LIST
26633: PUSH
26634: LD_INT 2
26636: NEG
26637: PUSH
26638: LD_INT 1
26640: NEG
26641: PUSH
26642: EMPTY
26643: LIST
26644: LIST
26645: PUSH
26646: LD_INT 1
26648: NEG
26649: PUSH
26650: LD_INT 3
26652: NEG
26653: PUSH
26654: EMPTY
26655: LIST
26656: LIST
26657: PUSH
26658: LD_INT 1
26660: PUSH
26661: LD_INT 2
26663: NEG
26664: PUSH
26665: EMPTY
26666: LIST
26667: LIST
26668: PUSH
26669: LD_INT 3
26671: PUSH
26672: LD_INT 2
26674: PUSH
26675: EMPTY
26676: LIST
26677: LIST
26678: PUSH
26679: LD_INT 2
26681: PUSH
26682: LD_INT 3
26684: PUSH
26685: EMPTY
26686: LIST
26687: LIST
26688: PUSH
26689: LD_INT 2
26691: NEG
26692: PUSH
26693: LD_INT 1
26695: PUSH
26696: EMPTY
26697: LIST
26698: LIST
26699: PUSH
26700: LD_INT 3
26702: NEG
26703: PUSH
26704: LD_INT 1
26706: NEG
26707: PUSH
26708: EMPTY
26709: LIST
26710: LIST
26711: PUSH
26712: EMPTY
26713: LIST
26714: LIST
26715: LIST
26716: LIST
26717: LIST
26718: LIST
26719: LIST
26720: LIST
26721: LIST
26722: LIST
26723: LIST
26724: LIST
26725: LIST
26726: LIST
26727: LIST
26728: LIST
26729: LIST
26730: LIST
26731: LIST
26732: LIST
26733: LIST
26734: LIST
26735: LIST
26736: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
26737: LD_ADDR_VAR 0 31
26741: PUSH
26742: LD_INT 0
26744: PUSH
26745: LD_INT 0
26747: PUSH
26748: EMPTY
26749: LIST
26750: LIST
26751: PUSH
26752: LD_INT 0
26754: PUSH
26755: LD_INT 1
26757: NEG
26758: PUSH
26759: EMPTY
26760: LIST
26761: LIST
26762: PUSH
26763: LD_INT 1
26765: PUSH
26766: LD_INT 0
26768: PUSH
26769: EMPTY
26770: LIST
26771: LIST
26772: PUSH
26773: LD_INT 1
26775: PUSH
26776: LD_INT 1
26778: PUSH
26779: EMPTY
26780: LIST
26781: LIST
26782: PUSH
26783: LD_INT 0
26785: PUSH
26786: LD_INT 1
26788: PUSH
26789: EMPTY
26790: LIST
26791: LIST
26792: PUSH
26793: LD_INT 1
26795: NEG
26796: PUSH
26797: LD_INT 0
26799: PUSH
26800: EMPTY
26801: LIST
26802: LIST
26803: PUSH
26804: LD_INT 1
26806: NEG
26807: PUSH
26808: LD_INT 1
26810: NEG
26811: PUSH
26812: EMPTY
26813: LIST
26814: LIST
26815: PUSH
26816: LD_INT 1
26818: NEG
26819: PUSH
26820: LD_INT 2
26822: NEG
26823: PUSH
26824: EMPTY
26825: LIST
26826: LIST
26827: PUSH
26828: LD_INT 1
26830: PUSH
26831: LD_INT 1
26833: NEG
26834: PUSH
26835: EMPTY
26836: LIST
26837: LIST
26838: PUSH
26839: LD_INT 2
26841: PUSH
26842: LD_INT 0
26844: PUSH
26845: EMPTY
26846: LIST
26847: LIST
26848: PUSH
26849: LD_INT 2
26851: PUSH
26852: LD_INT 1
26854: PUSH
26855: EMPTY
26856: LIST
26857: LIST
26858: PUSH
26859: LD_INT 2
26861: PUSH
26862: LD_INT 2
26864: PUSH
26865: EMPTY
26866: LIST
26867: LIST
26868: PUSH
26869: LD_INT 1
26871: PUSH
26872: LD_INT 2
26874: PUSH
26875: EMPTY
26876: LIST
26877: LIST
26878: PUSH
26879: LD_INT 0
26881: PUSH
26882: LD_INT 2
26884: PUSH
26885: EMPTY
26886: LIST
26887: LIST
26888: PUSH
26889: LD_INT 1
26891: NEG
26892: PUSH
26893: LD_INT 1
26895: PUSH
26896: EMPTY
26897: LIST
26898: LIST
26899: PUSH
26900: LD_INT 2
26902: NEG
26903: PUSH
26904: LD_INT 1
26906: NEG
26907: PUSH
26908: EMPTY
26909: LIST
26910: LIST
26911: PUSH
26912: LD_INT 2
26914: NEG
26915: PUSH
26916: LD_INT 2
26918: NEG
26919: PUSH
26920: EMPTY
26921: LIST
26922: LIST
26923: PUSH
26924: LD_INT 2
26926: NEG
26927: PUSH
26928: LD_INT 3
26930: NEG
26931: PUSH
26932: EMPTY
26933: LIST
26934: LIST
26935: PUSH
26936: LD_INT 2
26938: PUSH
26939: LD_INT 1
26941: NEG
26942: PUSH
26943: EMPTY
26944: LIST
26945: LIST
26946: PUSH
26947: LD_INT 3
26949: PUSH
26950: LD_INT 1
26952: PUSH
26953: EMPTY
26954: LIST
26955: LIST
26956: PUSH
26957: LD_INT 1
26959: PUSH
26960: LD_INT 3
26962: PUSH
26963: EMPTY
26964: LIST
26965: LIST
26966: PUSH
26967: LD_INT 1
26969: NEG
26970: PUSH
26971: LD_INT 2
26973: PUSH
26974: EMPTY
26975: LIST
26976: LIST
26977: PUSH
26978: LD_INT 3
26980: NEG
26981: PUSH
26982: LD_INT 2
26984: NEG
26985: PUSH
26986: EMPTY
26987: LIST
26988: LIST
26989: PUSH
26990: EMPTY
26991: LIST
26992: LIST
26993: LIST
26994: LIST
26995: LIST
26996: LIST
26997: LIST
26998: LIST
26999: LIST
27000: LIST
27001: LIST
27002: LIST
27003: LIST
27004: LIST
27005: LIST
27006: LIST
27007: LIST
27008: LIST
27009: LIST
27010: LIST
27011: LIST
27012: LIST
27013: LIST
27014: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
27015: LD_ADDR_VAR 0 32
27019: PUSH
27020: LD_INT 0
27022: PUSH
27023: LD_INT 0
27025: PUSH
27026: EMPTY
27027: LIST
27028: LIST
27029: PUSH
27030: LD_INT 0
27032: PUSH
27033: LD_INT 1
27035: NEG
27036: PUSH
27037: EMPTY
27038: LIST
27039: LIST
27040: PUSH
27041: LD_INT 1
27043: PUSH
27044: LD_INT 0
27046: PUSH
27047: EMPTY
27048: LIST
27049: LIST
27050: PUSH
27051: LD_INT 1
27053: PUSH
27054: LD_INT 1
27056: PUSH
27057: EMPTY
27058: LIST
27059: LIST
27060: PUSH
27061: LD_INT 0
27063: PUSH
27064: LD_INT 1
27066: PUSH
27067: EMPTY
27068: LIST
27069: LIST
27070: PUSH
27071: LD_INT 1
27073: NEG
27074: PUSH
27075: LD_INT 0
27077: PUSH
27078: EMPTY
27079: LIST
27080: LIST
27081: PUSH
27082: LD_INT 1
27084: NEG
27085: PUSH
27086: LD_INT 1
27088: NEG
27089: PUSH
27090: EMPTY
27091: LIST
27092: LIST
27093: PUSH
27094: LD_INT 1
27096: NEG
27097: PUSH
27098: LD_INT 2
27100: NEG
27101: PUSH
27102: EMPTY
27103: LIST
27104: LIST
27105: PUSH
27106: LD_INT 0
27108: PUSH
27109: LD_INT 2
27111: NEG
27112: PUSH
27113: EMPTY
27114: LIST
27115: LIST
27116: PUSH
27117: LD_INT 1
27119: PUSH
27120: LD_INT 1
27122: NEG
27123: PUSH
27124: EMPTY
27125: LIST
27126: LIST
27127: PUSH
27128: LD_INT 2
27130: PUSH
27131: LD_INT 1
27133: PUSH
27134: EMPTY
27135: LIST
27136: LIST
27137: PUSH
27138: LD_INT 2
27140: PUSH
27141: LD_INT 2
27143: PUSH
27144: EMPTY
27145: LIST
27146: LIST
27147: PUSH
27148: LD_INT 1
27150: PUSH
27151: LD_INT 2
27153: PUSH
27154: EMPTY
27155: LIST
27156: LIST
27157: PUSH
27158: LD_INT 0
27160: PUSH
27161: LD_INT 2
27163: PUSH
27164: EMPTY
27165: LIST
27166: LIST
27167: PUSH
27168: LD_INT 1
27170: NEG
27171: PUSH
27172: LD_INT 1
27174: PUSH
27175: EMPTY
27176: LIST
27177: LIST
27178: PUSH
27179: LD_INT 2
27181: NEG
27182: PUSH
27183: LD_INT 0
27185: PUSH
27186: EMPTY
27187: LIST
27188: LIST
27189: PUSH
27190: LD_INT 2
27192: NEG
27193: PUSH
27194: LD_INT 1
27196: NEG
27197: PUSH
27198: EMPTY
27199: LIST
27200: LIST
27201: PUSH
27202: LD_INT 1
27204: NEG
27205: PUSH
27206: LD_INT 3
27208: NEG
27209: PUSH
27210: EMPTY
27211: LIST
27212: LIST
27213: PUSH
27214: LD_INT 1
27216: PUSH
27217: LD_INT 2
27219: NEG
27220: PUSH
27221: EMPTY
27222: LIST
27223: LIST
27224: PUSH
27225: LD_INT 3
27227: PUSH
27228: LD_INT 2
27230: PUSH
27231: EMPTY
27232: LIST
27233: LIST
27234: PUSH
27235: LD_INT 2
27237: PUSH
27238: LD_INT 3
27240: PUSH
27241: EMPTY
27242: LIST
27243: LIST
27244: PUSH
27245: LD_INT 2
27247: NEG
27248: PUSH
27249: LD_INT 1
27251: PUSH
27252: EMPTY
27253: LIST
27254: LIST
27255: PUSH
27256: LD_INT 3
27258: NEG
27259: PUSH
27260: LD_INT 1
27262: NEG
27263: PUSH
27264: EMPTY
27265: LIST
27266: LIST
27267: PUSH
27268: EMPTY
27269: LIST
27270: LIST
27271: LIST
27272: LIST
27273: LIST
27274: LIST
27275: LIST
27276: LIST
27277: LIST
27278: LIST
27279: LIST
27280: LIST
27281: LIST
27282: LIST
27283: LIST
27284: LIST
27285: LIST
27286: LIST
27287: LIST
27288: LIST
27289: LIST
27290: LIST
27291: LIST
27292: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
27293: LD_ADDR_VAR 0 33
27297: PUSH
27298: LD_INT 0
27300: PUSH
27301: LD_INT 0
27303: PUSH
27304: EMPTY
27305: LIST
27306: LIST
27307: PUSH
27308: LD_INT 0
27310: PUSH
27311: LD_INT 1
27313: NEG
27314: PUSH
27315: EMPTY
27316: LIST
27317: LIST
27318: PUSH
27319: LD_INT 1
27321: PUSH
27322: LD_INT 0
27324: PUSH
27325: EMPTY
27326: LIST
27327: LIST
27328: PUSH
27329: LD_INT 1
27331: PUSH
27332: LD_INT 1
27334: PUSH
27335: EMPTY
27336: LIST
27337: LIST
27338: PUSH
27339: LD_INT 0
27341: PUSH
27342: LD_INT 1
27344: PUSH
27345: EMPTY
27346: LIST
27347: LIST
27348: PUSH
27349: LD_INT 1
27351: NEG
27352: PUSH
27353: LD_INT 0
27355: PUSH
27356: EMPTY
27357: LIST
27358: LIST
27359: PUSH
27360: LD_INT 1
27362: NEG
27363: PUSH
27364: LD_INT 1
27366: NEG
27367: PUSH
27368: EMPTY
27369: LIST
27370: LIST
27371: PUSH
27372: LD_INT 1
27374: NEG
27375: PUSH
27376: LD_INT 2
27378: NEG
27379: PUSH
27380: EMPTY
27381: LIST
27382: LIST
27383: PUSH
27384: LD_INT 1
27386: PUSH
27387: LD_INT 1
27389: NEG
27390: PUSH
27391: EMPTY
27392: LIST
27393: LIST
27394: PUSH
27395: LD_INT 2
27397: PUSH
27398: LD_INT 0
27400: PUSH
27401: EMPTY
27402: LIST
27403: LIST
27404: PUSH
27405: LD_INT 2
27407: PUSH
27408: LD_INT 1
27410: PUSH
27411: EMPTY
27412: LIST
27413: LIST
27414: PUSH
27415: LD_INT 1
27417: PUSH
27418: LD_INT 2
27420: PUSH
27421: EMPTY
27422: LIST
27423: LIST
27424: PUSH
27425: LD_INT 0
27427: PUSH
27428: LD_INT 2
27430: PUSH
27431: EMPTY
27432: LIST
27433: LIST
27434: PUSH
27435: LD_INT 1
27437: NEG
27438: PUSH
27439: LD_INT 1
27441: PUSH
27442: EMPTY
27443: LIST
27444: LIST
27445: PUSH
27446: LD_INT 2
27448: NEG
27449: PUSH
27450: LD_INT 0
27452: PUSH
27453: EMPTY
27454: LIST
27455: LIST
27456: PUSH
27457: LD_INT 2
27459: NEG
27460: PUSH
27461: LD_INT 1
27463: NEG
27464: PUSH
27465: EMPTY
27466: LIST
27467: LIST
27468: PUSH
27469: LD_INT 2
27471: NEG
27472: PUSH
27473: LD_INT 2
27475: NEG
27476: PUSH
27477: EMPTY
27478: LIST
27479: LIST
27480: PUSH
27481: LD_INT 2
27483: NEG
27484: PUSH
27485: LD_INT 3
27487: NEG
27488: PUSH
27489: EMPTY
27490: LIST
27491: LIST
27492: PUSH
27493: LD_INT 2
27495: PUSH
27496: LD_INT 1
27498: NEG
27499: PUSH
27500: EMPTY
27501: LIST
27502: LIST
27503: PUSH
27504: LD_INT 3
27506: PUSH
27507: LD_INT 1
27509: PUSH
27510: EMPTY
27511: LIST
27512: LIST
27513: PUSH
27514: LD_INT 1
27516: PUSH
27517: LD_INT 3
27519: PUSH
27520: EMPTY
27521: LIST
27522: LIST
27523: PUSH
27524: LD_INT 1
27526: NEG
27527: PUSH
27528: LD_INT 2
27530: PUSH
27531: EMPTY
27532: LIST
27533: LIST
27534: PUSH
27535: LD_INT 3
27537: NEG
27538: PUSH
27539: LD_INT 2
27541: NEG
27542: PUSH
27543: EMPTY
27544: LIST
27545: LIST
27546: PUSH
27547: EMPTY
27548: LIST
27549: LIST
27550: LIST
27551: LIST
27552: LIST
27553: LIST
27554: LIST
27555: LIST
27556: LIST
27557: LIST
27558: LIST
27559: LIST
27560: LIST
27561: LIST
27562: LIST
27563: LIST
27564: LIST
27565: LIST
27566: LIST
27567: LIST
27568: LIST
27569: LIST
27570: LIST
27571: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
27572: LD_ADDR_VAR 0 34
27576: PUSH
27577: LD_INT 0
27579: PUSH
27580: LD_INT 0
27582: PUSH
27583: EMPTY
27584: LIST
27585: LIST
27586: PUSH
27587: LD_INT 0
27589: PUSH
27590: LD_INT 1
27592: NEG
27593: PUSH
27594: EMPTY
27595: LIST
27596: LIST
27597: PUSH
27598: LD_INT 1
27600: PUSH
27601: LD_INT 0
27603: PUSH
27604: EMPTY
27605: LIST
27606: LIST
27607: PUSH
27608: LD_INT 1
27610: PUSH
27611: LD_INT 1
27613: PUSH
27614: EMPTY
27615: LIST
27616: LIST
27617: PUSH
27618: LD_INT 0
27620: PUSH
27621: LD_INT 1
27623: PUSH
27624: EMPTY
27625: LIST
27626: LIST
27627: PUSH
27628: LD_INT 1
27630: NEG
27631: PUSH
27632: LD_INT 0
27634: PUSH
27635: EMPTY
27636: LIST
27637: LIST
27638: PUSH
27639: LD_INT 1
27641: NEG
27642: PUSH
27643: LD_INT 1
27645: NEG
27646: PUSH
27647: EMPTY
27648: LIST
27649: LIST
27650: PUSH
27651: LD_INT 1
27653: NEG
27654: PUSH
27655: LD_INT 2
27657: NEG
27658: PUSH
27659: EMPTY
27660: LIST
27661: LIST
27662: PUSH
27663: LD_INT 0
27665: PUSH
27666: LD_INT 2
27668: NEG
27669: PUSH
27670: EMPTY
27671: LIST
27672: LIST
27673: PUSH
27674: LD_INT 1
27676: PUSH
27677: LD_INT 1
27679: NEG
27680: PUSH
27681: EMPTY
27682: LIST
27683: LIST
27684: PUSH
27685: LD_INT 2
27687: PUSH
27688: LD_INT 1
27690: PUSH
27691: EMPTY
27692: LIST
27693: LIST
27694: PUSH
27695: LD_INT 2
27697: PUSH
27698: LD_INT 2
27700: PUSH
27701: EMPTY
27702: LIST
27703: LIST
27704: PUSH
27705: LD_INT 1
27707: PUSH
27708: LD_INT 2
27710: PUSH
27711: EMPTY
27712: LIST
27713: LIST
27714: PUSH
27715: LD_INT 1
27717: NEG
27718: PUSH
27719: LD_INT 1
27721: PUSH
27722: EMPTY
27723: LIST
27724: LIST
27725: PUSH
27726: LD_INT 2
27728: NEG
27729: PUSH
27730: LD_INT 0
27732: PUSH
27733: EMPTY
27734: LIST
27735: LIST
27736: PUSH
27737: LD_INT 2
27739: NEG
27740: PUSH
27741: LD_INT 1
27743: NEG
27744: PUSH
27745: EMPTY
27746: LIST
27747: LIST
27748: PUSH
27749: LD_INT 2
27751: NEG
27752: PUSH
27753: LD_INT 2
27755: NEG
27756: PUSH
27757: EMPTY
27758: LIST
27759: LIST
27760: PUSH
27761: LD_INT 1
27763: NEG
27764: PUSH
27765: LD_INT 3
27767: NEG
27768: PUSH
27769: EMPTY
27770: LIST
27771: LIST
27772: PUSH
27773: LD_INT 1
27775: PUSH
27776: LD_INT 2
27778: NEG
27779: PUSH
27780: EMPTY
27781: LIST
27782: LIST
27783: PUSH
27784: LD_INT 3
27786: PUSH
27787: LD_INT 2
27789: PUSH
27790: EMPTY
27791: LIST
27792: LIST
27793: PUSH
27794: LD_INT 2
27796: PUSH
27797: LD_INT 3
27799: PUSH
27800: EMPTY
27801: LIST
27802: LIST
27803: PUSH
27804: LD_INT 2
27806: NEG
27807: PUSH
27808: LD_INT 1
27810: PUSH
27811: EMPTY
27812: LIST
27813: LIST
27814: PUSH
27815: LD_INT 3
27817: NEG
27818: PUSH
27819: LD_INT 1
27821: NEG
27822: PUSH
27823: EMPTY
27824: LIST
27825: LIST
27826: PUSH
27827: EMPTY
27828: LIST
27829: LIST
27830: LIST
27831: LIST
27832: LIST
27833: LIST
27834: LIST
27835: LIST
27836: LIST
27837: LIST
27838: LIST
27839: LIST
27840: LIST
27841: LIST
27842: LIST
27843: LIST
27844: LIST
27845: LIST
27846: LIST
27847: LIST
27848: LIST
27849: LIST
27850: LIST
27851: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
27852: LD_ADDR_VAR 0 35
27856: PUSH
27857: LD_INT 0
27859: PUSH
27860: LD_INT 0
27862: PUSH
27863: EMPTY
27864: LIST
27865: LIST
27866: PUSH
27867: LD_INT 0
27869: PUSH
27870: LD_INT 1
27872: NEG
27873: PUSH
27874: EMPTY
27875: LIST
27876: LIST
27877: PUSH
27878: LD_INT 1
27880: PUSH
27881: LD_INT 0
27883: PUSH
27884: EMPTY
27885: LIST
27886: LIST
27887: PUSH
27888: LD_INT 1
27890: PUSH
27891: LD_INT 1
27893: PUSH
27894: EMPTY
27895: LIST
27896: LIST
27897: PUSH
27898: LD_INT 0
27900: PUSH
27901: LD_INT 1
27903: PUSH
27904: EMPTY
27905: LIST
27906: LIST
27907: PUSH
27908: LD_INT 1
27910: NEG
27911: PUSH
27912: LD_INT 0
27914: PUSH
27915: EMPTY
27916: LIST
27917: LIST
27918: PUSH
27919: LD_INT 1
27921: NEG
27922: PUSH
27923: LD_INT 1
27925: NEG
27926: PUSH
27927: EMPTY
27928: LIST
27929: LIST
27930: PUSH
27931: LD_INT 2
27933: PUSH
27934: LD_INT 1
27936: PUSH
27937: EMPTY
27938: LIST
27939: LIST
27940: PUSH
27941: LD_INT 2
27943: NEG
27944: PUSH
27945: LD_INT 1
27947: NEG
27948: PUSH
27949: EMPTY
27950: LIST
27951: LIST
27952: PUSH
27953: EMPTY
27954: LIST
27955: LIST
27956: LIST
27957: LIST
27958: LIST
27959: LIST
27960: LIST
27961: LIST
27962: LIST
27963: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
27964: LD_ADDR_VAR 0 36
27968: PUSH
27969: LD_INT 0
27971: PUSH
27972: LD_INT 0
27974: PUSH
27975: EMPTY
27976: LIST
27977: LIST
27978: PUSH
27979: LD_INT 0
27981: PUSH
27982: LD_INT 1
27984: NEG
27985: PUSH
27986: EMPTY
27987: LIST
27988: LIST
27989: PUSH
27990: LD_INT 1
27992: PUSH
27993: LD_INT 0
27995: PUSH
27996: EMPTY
27997: LIST
27998: LIST
27999: PUSH
28000: LD_INT 1
28002: PUSH
28003: LD_INT 1
28005: PUSH
28006: EMPTY
28007: LIST
28008: LIST
28009: PUSH
28010: LD_INT 0
28012: PUSH
28013: LD_INT 1
28015: PUSH
28016: EMPTY
28017: LIST
28018: LIST
28019: PUSH
28020: LD_INT 1
28022: NEG
28023: PUSH
28024: LD_INT 0
28026: PUSH
28027: EMPTY
28028: LIST
28029: LIST
28030: PUSH
28031: LD_INT 1
28033: NEG
28034: PUSH
28035: LD_INT 1
28037: NEG
28038: PUSH
28039: EMPTY
28040: LIST
28041: LIST
28042: PUSH
28043: LD_INT 1
28045: NEG
28046: PUSH
28047: LD_INT 2
28049: NEG
28050: PUSH
28051: EMPTY
28052: LIST
28053: LIST
28054: PUSH
28055: LD_INT 1
28057: PUSH
28058: LD_INT 2
28060: PUSH
28061: EMPTY
28062: LIST
28063: LIST
28064: PUSH
28065: EMPTY
28066: LIST
28067: LIST
28068: LIST
28069: LIST
28070: LIST
28071: LIST
28072: LIST
28073: LIST
28074: LIST
28075: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
28076: LD_ADDR_VAR 0 37
28080: PUSH
28081: LD_INT 0
28083: PUSH
28084: LD_INT 0
28086: PUSH
28087: EMPTY
28088: LIST
28089: LIST
28090: PUSH
28091: LD_INT 0
28093: PUSH
28094: LD_INT 1
28096: NEG
28097: PUSH
28098: EMPTY
28099: LIST
28100: LIST
28101: PUSH
28102: LD_INT 1
28104: PUSH
28105: LD_INT 0
28107: PUSH
28108: EMPTY
28109: LIST
28110: LIST
28111: PUSH
28112: LD_INT 1
28114: PUSH
28115: LD_INT 1
28117: PUSH
28118: EMPTY
28119: LIST
28120: LIST
28121: PUSH
28122: LD_INT 0
28124: PUSH
28125: LD_INT 1
28127: PUSH
28128: EMPTY
28129: LIST
28130: LIST
28131: PUSH
28132: LD_INT 1
28134: NEG
28135: PUSH
28136: LD_INT 0
28138: PUSH
28139: EMPTY
28140: LIST
28141: LIST
28142: PUSH
28143: LD_INT 1
28145: NEG
28146: PUSH
28147: LD_INT 1
28149: NEG
28150: PUSH
28151: EMPTY
28152: LIST
28153: LIST
28154: PUSH
28155: LD_INT 1
28157: PUSH
28158: LD_INT 1
28160: NEG
28161: PUSH
28162: EMPTY
28163: LIST
28164: LIST
28165: PUSH
28166: LD_INT 1
28168: NEG
28169: PUSH
28170: LD_INT 1
28172: PUSH
28173: EMPTY
28174: LIST
28175: LIST
28176: PUSH
28177: EMPTY
28178: LIST
28179: LIST
28180: LIST
28181: LIST
28182: LIST
28183: LIST
28184: LIST
28185: LIST
28186: LIST
28187: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
28188: LD_ADDR_VAR 0 38
28192: PUSH
28193: LD_INT 0
28195: PUSH
28196: LD_INT 0
28198: PUSH
28199: EMPTY
28200: LIST
28201: LIST
28202: PUSH
28203: LD_INT 0
28205: PUSH
28206: LD_INT 1
28208: NEG
28209: PUSH
28210: EMPTY
28211: LIST
28212: LIST
28213: PUSH
28214: LD_INT 1
28216: PUSH
28217: LD_INT 0
28219: PUSH
28220: EMPTY
28221: LIST
28222: LIST
28223: PUSH
28224: LD_INT 1
28226: PUSH
28227: LD_INT 1
28229: PUSH
28230: EMPTY
28231: LIST
28232: LIST
28233: PUSH
28234: LD_INT 0
28236: PUSH
28237: LD_INT 1
28239: PUSH
28240: EMPTY
28241: LIST
28242: LIST
28243: PUSH
28244: LD_INT 1
28246: NEG
28247: PUSH
28248: LD_INT 0
28250: PUSH
28251: EMPTY
28252: LIST
28253: LIST
28254: PUSH
28255: LD_INT 1
28257: NEG
28258: PUSH
28259: LD_INT 1
28261: NEG
28262: PUSH
28263: EMPTY
28264: LIST
28265: LIST
28266: PUSH
28267: LD_INT 2
28269: PUSH
28270: LD_INT 1
28272: PUSH
28273: EMPTY
28274: LIST
28275: LIST
28276: PUSH
28277: LD_INT 2
28279: NEG
28280: PUSH
28281: LD_INT 1
28283: NEG
28284: PUSH
28285: EMPTY
28286: LIST
28287: LIST
28288: PUSH
28289: EMPTY
28290: LIST
28291: LIST
28292: LIST
28293: LIST
28294: LIST
28295: LIST
28296: LIST
28297: LIST
28298: LIST
28299: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
28300: LD_ADDR_VAR 0 39
28304: PUSH
28305: LD_INT 0
28307: PUSH
28308: LD_INT 0
28310: PUSH
28311: EMPTY
28312: LIST
28313: LIST
28314: PUSH
28315: LD_INT 0
28317: PUSH
28318: LD_INT 1
28320: NEG
28321: PUSH
28322: EMPTY
28323: LIST
28324: LIST
28325: PUSH
28326: LD_INT 1
28328: PUSH
28329: LD_INT 0
28331: PUSH
28332: EMPTY
28333: LIST
28334: LIST
28335: PUSH
28336: LD_INT 1
28338: PUSH
28339: LD_INT 1
28341: PUSH
28342: EMPTY
28343: LIST
28344: LIST
28345: PUSH
28346: LD_INT 0
28348: PUSH
28349: LD_INT 1
28351: PUSH
28352: EMPTY
28353: LIST
28354: LIST
28355: PUSH
28356: LD_INT 1
28358: NEG
28359: PUSH
28360: LD_INT 0
28362: PUSH
28363: EMPTY
28364: LIST
28365: LIST
28366: PUSH
28367: LD_INT 1
28369: NEG
28370: PUSH
28371: LD_INT 1
28373: NEG
28374: PUSH
28375: EMPTY
28376: LIST
28377: LIST
28378: PUSH
28379: LD_INT 1
28381: NEG
28382: PUSH
28383: LD_INT 2
28385: NEG
28386: PUSH
28387: EMPTY
28388: LIST
28389: LIST
28390: PUSH
28391: LD_INT 1
28393: PUSH
28394: LD_INT 2
28396: PUSH
28397: EMPTY
28398: LIST
28399: LIST
28400: PUSH
28401: EMPTY
28402: LIST
28403: LIST
28404: LIST
28405: LIST
28406: LIST
28407: LIST
28408: LIST
28409: LIST
28410: LIST
28411: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
28412: LD_ADDR_VAR 0 40
28416: PUSH
28417: LD_INT 0
28419: PUSH
28420: LD_INT 0
28422: PUSH
28423: EMPTY
28424: LIST
28425: LIST
28426: PUSH
28427: LD_INT 0
28429: PUSH
28430: LD_INT 1
28432: NEG
28433: PUSH
28434: EMPTY
28435: LIST
28436: LIST
28437: PUSH
28438: LD_INT 1
28440: PUSH
28441: LD_INT 0
28443: PUSH
28444: EMPTY
28445: LIST
28446: LIST
28447: PUSH
28448: LD_INT 1
28450: PUSH
28451: LD_INT 1
28453: PUSH
28454: EMPTY
28455: LIST
28456: LIST
28457: PUSH
28458: LD_INT 0
28460: PUSH
28461: LD_INT 1
28463: PUSH
28464: EMPTY
28465: LIST
28466: LIST
28467: PUSH
28468: LD_INT 1
28470: NEG
28471: PUSH
28472: LD_INT 0
28474: PUSH
28475: EMPTY
28476: LIST
28477: LIST
28478: PUSH
28479: LD_INT 1
28481: NEG
28482: PUSH
28483: LD_INT 1
28485: NEG
28486: PUSH
28487: EMPTY
28488: LIST
28489: LIST
28490: PUSH
28491: LD_INT 1
28493: PUSH
28494: LD_INT 1
28496: NEG
28497: PUSH
28498: EMPTY
28499: LIST
28500: LIST
28501: PUSH
28502: LD_INT 1
28504: NEG
28505: PUSH
28506: LD_INT 1
28508: PUSH
28509: EMPTY
28510: LIST
28511: LIST
28512: PUSH
28513: EMPTY
28514: LIST
28515: LIST
28516: LIST
28517: LIST
28518: LIST
28519: LIST
28520: LIST
28521: LIST
28522: LIST
28523: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
28524: LD_ADDR_VAR 0 41
28528: PUSH
28529: LD_INT 0
28531: PUSH
28532: LD_INT 0
28534: PUSH
28535: EMPTY
28536: LIST
28537: LIST
28538: PUSH
28539: LD_INT 0
28541: PUSH
28542: LD_INT 1
28544: NEG
28545: PUSH
28546: EMPTY
28547: LIST
28548: LIST
28549: PUSH
28550: LD_INT 1
28552: PUSH
28553: LD_INT 0
28555: PUSH
28556: EMPTY
28557: LIST
28558: LIST
28559: PUSH
28560: LD_INT 1
28562: PUSH
28563: LD_INT 1
28565: PUSH
28566: EMPTY
28567: LIST
28568: LIST
28569: PUSH
28570: LD_INT 0
28572: PUSH
28573: LD_INT 1
28575: PUSH
28576: EMPTY
28577: LIST
28578: LIST
28579: PUSH
28580: LD_INT 1
28582: NEG
28583: PUSH
28584: LD_INT 0
28586: PUSH
28587: EMPTY
28588: LIST
28589: LIST
28590: PUSH
28591: LD_INT 1
28593: NEG
28594: PUSH
28595: LD_INT 1
28597: NEG
28598: PUSH
28599: EMPTY
28600: LIST
28601: LIST
28602: PUSH
28603: LD_INT 1
28605: NEG
28606: PUSH
28607: LD_INT 2
28609: NEG
28610: PUSH
28611: EMPTY
28612: LIST
28613: LIST
28614: PUSH
28615: LD_INT 1
28617: PUSH
28618: LD_INT 1
28620: NEG
28621: PUSH
28622: EMPTY
28623: LIST
28624: LIST
28625: PUSH
28626: LD_INT 2
28628: PUSH
28629: LD_INT 0
28631: PUSH
28632: EMPTY
28633: LIST
28634: LIST
28635: PUSH
28636: LD_INT 2
28638: PUSH
28639: LD_INT 1
28641: PUSH
28642: EMPTY
28643: LIST
28644: LIST
28645: PUSH
28646: LD_INT 2
28648: PUSH
28649: LD_INT 2
28651: PUSH
28652: EMPTY
28653: LIST
28654: LIST
28655: PUSH
28656: LD_INT 1
28658: PUSH
28659: LD_INT 2
28661: PUSH
28662: EMPTY
28663: LIST
28664: LIST
28665: PUSH
28666: LD_INT 1
28668: NEG
28669: PUSH
28670: LD_INT 1
28672: PUSH
28673: EMPTY
28674: LIST
28675: LIST
28676: PUSH
28677: LD_INT 2
28679: NEG
28680: PUSH
28681: LD_INT 0
28683: PUSH
28684: EMPTY
28685: LIST
28686: LIST
28687: PUSH
28688: LD_INT 2
28690: NEG
28691: PUSH
28692: LD_INT 1
28694: NEG
28695: PUSH
28696: EMPTY
28697: LIST
28698: LIST
28699: PUSH
28700: LD_INT 2
28702: NEG
28703: PUSH
28704: LD_INT 2
28706: NEG
28707: PUSH
28708: EMPTY
28709: LIST
28710: LIST
28711: PUSH
28712: LD_INT 2
28714: NEG
28715: PUSH
28716: LD_INT 3
28718: NEG
28719: PUSH
28720: EMPTY
28721: LIST
28722: LIST
28723: PUSH
28724: LD_INT 2
28726: PUSH
28727: LD_INT 1
28729: NEG
28730: PUSH
28731: EMPTY
28732: LIST
28733: LIST
28734: PUSH
28735: LD_INT 3
28737: PUSH
28738: LD_INT 0
28740: PUSH
28741: EMPTY
28742: LIST
28743: LIST
28744: PUSH
28745: LD_INT 3
28747: PUSH
28748: LD_INT 1
28750: PUSH
28751: EMPTY
28752: LIST
28753: LIST
28754: PUSH
28755: LD_INT 3
28757: PUSH
28758: LD_INT 2
28760: PUSH
28761: EMPTY
28762: LIST
28763: LIST
28764: PUSH
28765: LD_INT 3
28767: PUSH
28768: LD_INT 3
28770: PUSH
28771: EMPTY
28772: LIST
28773: LIST
28774: PUSH
28775: LD_INT 2
28777: PUSH
28778: LD_INT 3
28780: PUSH
28781: EMPTY
28782: LIST
28783: LIST
28784: PUSH
28785: LD_INT 2
28787: NEG
28788: PUSH
28789: LD_INT 1
28791: PUSH
28792: EMPTY
28793: LIST
28794: LIST
28795: PUSH
28796: LD_INT 3
28798: NEG
28799: PUSH
28800: LD_INT 0
28802: PUSH
28803: EMPTY
28804: LIST
28805: LIST
28806: PUSH
28807: LD_INT 3
28809: NEG
28810: PUSH
28811: LD_INT 1
28813: NEG
28814: PUSH
28815: EMPTY
28816: LIST
28817: LIST
28818: PUSH
28819: LD_INT 3
28821: NEG
28822: PUSH
28823: LD_INT 2
28825: NEG
28826: PUSH
28827: EMPTY
28828: LIST
28829: LIST
28830: PUSH
28831: LD_INT 3
28833: NEG
28834: PUSH
28835: LD_INT 3
28837: NEG
28838: PUSH
28839: EMPTY
28840: LIST
28841: LIST
28842: PUSH
28843: EMPTY
28844: LIST
28845: LIST
28846: LIST
28847: LIST
28848: LIST
28849: LIST
28850: LIST
28851: LIST
28852: LIST
28853: LIST
28854: LIST
28855: LIST
28856: LIST
28857: LIST
28858: LIST
28859: LIST
28860: LIST
28861: LIST
28862: LIST
28863: LIST
28864: LIST
28865: LIST
28866: LIST
28867: LIST
28868: LIST
28869: LIST
28870: LIST
28871: LIST
28872: LIST
28873: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
28874: LD_ADDR_VAR 0 42
28878: PUSH
28879: LD_INT 0
28881: PUSH
28882: LD_INT 0
28884: PUSH
28885: EMPTY
28886: LIST
28887: LIST
28888: PUSH
28889: LD_INT 0
28891: PUSH
28892: LD_INT 1
28894: NEG
28895: PUSH
28896: EMPTY
28897: LIST
28898: LIST
28899: PUSH
28900: LD_INT 1
28902: PUSH
28903: LD_INT 0
28905: PUSH
28906: EMPTY
28907: LIST
28908: LIST
28909: PUSH
28910: LD_INT 1
28912: PUSH
28913: LD_INT 1
28915: PUSH
28916: EMPTY
28917: LIST
28918: LIST
28919: PUSH
28920: LD_INT 0
28922: PUSH
28923: LD_INT 1
28925: PUSH
28926: EMPTY
28927: LIST
28928: LIST
28929: PUSH
28930: LD_INT 1
28932: NEG
28933: PUSH
28934: LD_INT 0
28936: PUSH
28937: EMPTY
28938: LIST
28939: LIST
28940: PUSH
28941: LD_INT 1
28943: NEG
28944: PUSH
28945: LD_INT 1
28947: NEG
28948: PUSH
28949: EMPTY
28950: LIST
28951: LIST
28952: PUSH
28953: LD_INT 1
28955: NEG
28956: PUSH
28957: LD_INT 2
28959: NEG
28960: PUSH
28961: EMPTY
28962: LIST
28963: LIST
28964: PUSH
28965: LD_INT 0
28967: PUSH
28968: LD_INT 2
28970: NEG
28971: PUSH
28972: EMPTY
28973: LIST
28974: LIST
28975: PUSH
28976: LD_INT 1
28978: PUSH
28979: LD_INT 1
28981: NEG
28982: PUSH
28983: EMPTY
28984: LIST
28985: LIST
28986: PUSH
28987: LD_INT 2
28989: PUSH
28990: LD_INT 1
28992: PUSH
28993: EMPTY
28994: LIST
28995: LIST
28996: PUSH
28997: LD_INT 2
28999: PUSH
29000: LD_INT 2
29002: PUSH
29003: EMPTY
29004: LIST
29005: LIST
29006: PUSH
29007: LD_INT 1
29009: PUSH
29010: LD_INT 2
29012: PUSH
29013: EMPTY
29014: LIST
29015: LIST
29016: PUSH
29017: LD_INT 0
29019: PUSH
29020: LD_INT 2
29022: PUSH
29023: EMPTY
29024: LIST
29025: LIST
29026: PUSH
29027: LD_INT 1
29029: NEG
29030: PUSH
29031: LD_INT 1
29033: PUSH
29034: EMPTY
29035: LIST
29036: LIST
29037: PUSH
29038: LD_INT 2
29040: NEG
29041: PUSH
29042: LD_INT 1
29044: NEG
29045: PUSH
29046: EMPTY
29047: LIST
29048: LIST
29049: PUSH
29050: LD_INT 2
29052: NEG
29053: PUSH
29054: LD_INT 2
29056: NEG
29057: PUSH
29058: EMPTY
29059: LIST
29060: LIST
29061: PUSH
29062: LD_INT 2
29064: NEG
29065: PUSH
29066: LD_INT 3
29068: NEG
29069: PUSH
29070: EMPTY
29071: LIST
29072: LIST
29073: PUSH
29074: LD_INT 1
29076: NEG
29077: PUSH
29078: LD_INT 3
29080: NEG
29081: PUSH
29082: EMPTY
29083: LIST
29084: LIST
29085: PUSH
29086: LD_INT 0
29088: PUSH
29089: LD_INT 3
29091: NEG
29092: PUSH
29093: EMPTY
29094: LIST
29095: LIST
29096: PUSH
29097: LD_INT 1
29099: PUSH
29100: LD_INT 2
29102: NEG
29103: PUSH
29104: EMPTY
29105: LIST
29106: LIST
29107: PUSH
29108: LD_INT 3
29110: PUSH
29111: LD_INT 2
29113: PUSH
29114: EMPTY
29115: LIST
29116: LIST
29117: PUSH
29118: LD_INT 3
29120: PUSH
29121: LD_INT 3
29123: PUSH
29124: EMPTY
29125: LIST
29126: LIST
29127: PUSH
29128: LD_INT 2
29130: PUSH
29131: LD_INT 3
29133: PUSH
29134: EMPTY
29135: LIST
29136: LIST
29137: PUSH
29138: LD_INT 1
29140: PUSH
29141: LD_INT 3
29143: PUSH
29144: EMPTY
29145: LIST
29146: LIST
29147: PUSH
29148: LD_INT 0
29150: PUSH
29151: LD_INT 3
29153: PUSH
29154: EMPTY
29155: LIST
29156: LIST
29157: PUSH
29158: LD_INT 1
29160: NEG
29161: PUSH
29162: LD_INT 2
29164: PUSH
29165: EMPTY
29166: LIST
29167: LIST
29168: PUSH
29169: LD_INT 3
29171: NEG
29172: PUSH
29173: LD_INT 2
29175: NEG
29176: PUSH
29177: EMPTY
29178: LIST
29179: LIST
29180: PUSH
29181: LD_INT 3
29183: NEG
29184: PUSH
29185: LD_INT 3
29187: NEG
29188: PUSH
29189: EMPTY
29190: LIST
29191: LIST
29192: PUSH
29193: EMPTY
29194: LIST
29195: LIST
29196: LIST
29197: LIST
29198: LIST
29199: LIST
29200: LIST
29201: LIST
29202: LIST
29203: LIST
29204: LIST
29205: LIST
29206: LIST
29207: LIST
29208: LIST
29209: LIST
29210: LIST
29211: LIST
29212: LIST
29213: LIST
29214: LIST
29215: LIST
29216: LIST
29217: LIST
29218: LIST
29219: LIST
29220: LIST
29221: LIST
29222: LIST
29223: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
29224: LD_ADDR_VAR 0 43
29228: PUSH
29229: LD_INT 0
29231: PUSH
29232: LD_INT 0
29234: PUSH
29235: EMPTY
29236: LIST
29237: LIST
29238: PUSH
29239: LD_INT 0
29241: PUSH
29242: LD_INT 1
29244: NEG
29245: PUSH
29246: EMPTY
29247: LIST
29248: LIST
29249: PUSH
29250: LD_INT 1
29252: PUSH
29253: LD_INT 0
29255: PUSH
29256: EMPTY
29257: LIST
29258: LIST
29259: PUSH
29260: LD_INT 1
29262: PUSH
29263: LD_INT 1
29265: PUSH
29266: EMPTY
29267: LIST
29268: LIST
29269: PUSH
29270: LD_INT 0
29272: PUSH
29273: LD_INT 1
29275: PUSH
29276: EMPTY
29277: LIST
29278: LIST
29279: PUSH
29280: LD_INT 1
29282: NEG
29283: PUSH
29284: LD_INT 0
29286: PUSH
29287: EMPTY
29288: LIST
29289: LIST
29290: PUSH
29291: LD_INT 1
29293: NEG
29294: PUSH
29295: LD_INT 1
29297: NEG
29298: PUSH
29299: EMPTY
29300: LIST
29301: LIST
29302: PUSH
29303: LD_INT 1
29305: NEG
29306: PUSH
29307: LD_INT 2
29309: NEG
29310: PUSH
29311: EMPTY
29312: LIST
29313: LIST
29314: PUSH
29315: LD_INT 0
29317: PUSH
29318: LD_INT 2
29320: NEG
29321: PUSH
29322: EMPTY
29323: LIST
29324: LIST
29325: PUSH
29326: LD_INT 1
29328: PUSH
29329: LD_INT 1
29331: NEG
29332: PUSH
29333: EMPTY
29334: LIST
29335: LIST
29336: PUSH
29337: LD_INT 2
29339: PUSH
29340: LD_INT 0
29342: PUSH
29343: EMPTY
29344: LIST
29345: LIST
29346: PUSH
29347: LD_INT 2
29349: PUSH
29350: LD_INT 1
29352: PUSH
29353: EMPTY
29354: LIST
29355: LIST
29356: PUSH
29357: LD_INT 1
29359: PUSH
29360: LD_INT 2
29362: PUSH
29363: EMPTY
29364: LIST
29365: LIST
29366: PUSH
29367: LD_INT 0
29369: PUSH
29370: LD_INT 2
29372: PUSH
29373: EMPTY
29374: LIST
29375: LIST
29376: PUSH
29377: LD_INT 1
29379: NEG
29380: PUSH
29381: LD_INT 1
29383: PUSH
29384: EMPTY
29385: LIST
29386: LIST
29387: PUSH
29388: LD_INT 2
29390: NEG
29391: PUSH
29392: LD_INT 0
29394: PUSH
29395: EMPTY
29396: LIST
29397: LIST
29398: PUSH
29399: LD_INT 2
29401: NEG
29402: PUSH
29403: LD_INT 1
29405: NEG
29406: PUSH
29407: EMPTY
29408: LIST
29409: LIST
29410: PUSH
29411: LD_INT 1
29413: NEG
29414: PUSH
29415: LD_INT 3
29417: NEG
29418: PUSH
29419: EMPTY
29420: LIST
29421: LIST
29422: PUSH
29423: LD_INT 0
29425: PUSH
29426: LD_INT 3
29428: NEG
29429: PUSH
29430: EMPTY
29431: LIST
29432: LIST
29433: PUSH
29434: LD_INT 1
29436: PUSH
29437: LD_INT 2
29439: NEG
29440: PUSH
29441: EMPTY
29442: LIST
29443: LIST
29444: PUSH
29445: LD_INT 2
29447: PUSH
29448: LD_INT 1
29450: NEG
29451: PUSH
29452: EMPTY
29453: LIST
29454: LIST
29455: PUSH
29456: LD_INT 3
29458: PUSH
29459: LD_INT 0
29461: PUSH
29462: EMPTY
29463: LIST
29464: LIST
29465: PUSH
29466: LD_INT 3
29468: PUSH
29469: LD_INT 1
29471: PUSH
29472: EMPTY
29473: LIST
29474: LIST
29475: PUSH
29476: LD_INT 1
29478: PUSH
29479: LD_INT 3
29481: PUSH
29482: EMPTY
29483: LIST
29484: LIST
29485: PUSH
29486: LD_INT 0
29488: PUSH
29489: LD_INT 3
29491: PUSH
29492: EMPTY
29493: LIST
29494: LIST
29495: PUSH
29496: LD_INT 1
29498: NEG
29499: PUSH
29500: LD_INT 2
29502: PUSH
29503: EMPTY
29504: LIST
29505: LIST
29506: PUSH
29507: LD_INT 2
29509: NEG
29510: PUSH
29511: LD_INT 1
29513: PUSH
29514: EMPTY
29515: LIST
29516: LIST
29517: PUSH
29518: LD_INT 3
29520: NEG
29521: PUSH
29522: LD_INT 0
29524: PUSH
29525: EMPTY
29526: LIST
29527: LIST
29528: PUSH
29529: LD_INT 3
29531: NEG
29532: PUSH
29533: LD_INT 1
29535: NEG
29536: PUSH
29537: EMPTY
29538: LIST
29539: LIST
29540: PUSH
29541: EMPTY
29542: LIST
29543: LIST
29544: LIST
29545: LIST
29546: LIST
29547: LIST
29548: LIST
29549: LIST
29550: LIST
29551: LIST
29552: LIST
29553: LIST
29554: LIST
29555: LIST
29556: LIST
29557: LIST
29558: LIST
29559: LIST
29560: LIST
29561: LIST
29562: LIST
29563: LIST
29564: LIST
29565: LIST
29566: LIST
29567: LIST
29568: LIST
29569: LIST
29570: LIST
29571: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
29572: LD_ADDR_VAR 0 44
29576: PUSH
29577: LD_INT 0
29579: PUSH
29580: LD_INT 0
29582: PUSH
29583: EMPTY
29584: LIST
29585: LIST
29586: PUSH
29587: LD_INT 0
29589: PUSH
29590: LD_INT 1
29592: NEG
29593: PUSH
29594: EMPTY
29595: LIST
29596: LIST
29597: PUSH
29598: LD_INT 1
29600: PUSH
29601: LD_INT 0
29603: PUSH
29604: EMPTY
29605: LIST
29606: LIST
29607: PUSH
29608: LD_INT 1
29610: PUSH
29611: LD_INT 1
29613: PUSH
29614: EMPTY
29615: LIST
29616: LIST
29617: PUSH
29618: LD_INT 0
29620: PUSH
29621: LD_INT 1
29623: PUSH
29624: EMPTY
29625: LIST
29626: LIST
29627: PUSH
29628: LD_INT 1
29630: NEG
29631: PUSH
29632: LD_INT 0
29634: PUSH
29635: EMPTY
29636: LIST
29637: LIST
29638: PUSH
29639: LD_INT 1
29641: NEG
29642: PUSH
29643: LD_INT 1
29645: NEG
29646: PUSH
29647: EMPTY
29648: LIST
29649: LIST
29650: PUSH
29651: LD_INT 1
29653: NEG
29654: PUSH
29655: LD_INT 2
29657: NEG
29658: PUSH
29659: EMPTY
29660: LIST
29661: LIST
29662: PUSH
29663: LD_INT 1
29665: PUSH
29666: LD_INT 1
29668: NEG
29669: PUSH
29670: EMPTY
29671: LIST
29672: LIST
29673: PUSH
29674: LD_INT 2
29676: PUSH
29677: LD_INT 0
29679: PUSH
29680: EMPTY
29681: LIST
29682: LIST
29683: PUSH
29684: LD_INT 2
29686: PUSH
29687: LD_INT 1
29689: PUSH
29690: EMPTY
29691: LIST
29692: LIST
29693: PUSH
29694: LD_INT 2
29696: PUSH
29697: LD_INT 2
29699: PUSH
29700: EMPTY
29701: LIST
29702: LIST
29703: PUSH
29704: LD_INT 1
29706: PUSH
29707: LD_INT 2
29709: PUSH
29710: EMPTY
29711: LIST
29712: LIST
29713: PUSH
29714: LD_INT 1
29716: NEG
29717: PUSH
29718: LD_INT 1
29720: PUSH
29721: EMPTY
29722: LIST
29723: LIST
29724: PUSH
29725: LD_INT 2
29727: NEG
29728: PUSH
29729: LD_INT 0
29731: PUSH
29732: EMPTY
29733: LIST
29734: LIST
29735: PUSH
29736: LD_INT 2
29738: NEG
29739: PUSH
29740: LD_INT 1
29742: NEG
29743: PUSH
29744: EMPTY
29745: LIST
29746: LIST
29747: PUSH
29748: LD_INT 2
29750: NEG
29751: PUSH
29752: LD_INT 2
29754: NEG
29755: PUSH
29756: EMPTY
29757: LIST
29758: LIST
29759: PUSH
29760: LD_INT 2
29762: NEG
29763: PUSH
29764: LD_INT 3
29766: NEG
29767: PUSH
29768: EMPTY
29769: LIST
29770: LIST
29771: PUSH
29772: LD_INT 2
29774: PUSH
29775: LD_INT 1
29777: NEG
29778: PUSH
29779: EMPTY
29780: LIST
29781: LIST
29782: PUSH
29783: LD_INT 3
29785: PUSH
29786: LD_INT 0
29788: PUSH
29789: EMPTY
29790: LIST
29791: LIST
29792: PUSH
29793: LD_INT 3
29795: PUSH
29796: LD_INT 1
29798: PUSH
29799: EMPTY
29800: LIST
29801: LIST
29802: PUSH
29803: LD_INT 3
29805: PUSH
29806: LD_INT 2
29808: PUSH
29809: EMPTY
29810: LIST
29811: LIST
29812: PUSH
29813: LD_INT 3
29815: PUSH
29816: LD_INT 3
29818: PUSH
29819: EMPTY
29820: LIST
29821: LIST
29822: PUSH
29823: LD_INT 2
29825: PUSH
29826: LD_INT 3
29828: PUSH
29829: EMPTY
29830: LIST
29831: LIST
29832: PUSH
29833: LD_INT 2
29835: NEG
29836: PUSH
29837: LD_INT 1
29839: PUSH
29840: EMPTY
29841: LIST
29842: LIST
29843: PUSH
29844: LD_INT 3
29846: NEG
29847: PUSH
29848: LD_INT 0
29850: PUSH
29851: EMPTY
29852: LIST
29853: LIST
29854: PUSH
29855: LD_INT 3
29857: NEG
29858: PUSH
29859: LD_INT 1
29861: NEG
29862: PUSH
29863: EMPTY
29864: LIST
29865: LIST
29866: PUSH
29867: LD_INT 3
29869: NEG
29870: PUSH
29871: LD_INT 2
29873: NEG
29874: PUSH
29875: EMPTY
29876: LIST
29877: LIST
29878: PUSH
29879: LD_INT 3
29881: NEG
29882: PUSH
29883: LD_INT 3
29885: NEG
29886: PUSH
29887: EMPTY
29888: LIST
29889: LIST
29890: PUSH
29891: EMPTY
29892: LIST
29893: LIST
29894: LIST
29895: LIST
29896: LIST
29897: LIST
29898: LIST
29899: LIST
29900: LIST
29901: LIST
29902: LIST
29903: LIST
29904: LIST
29905: LIST
29906: LIST
29907: LIST
29908: LIST
29909: LIST
29910: LIST
29911: LIST
29912: LIST
29913: LIST
29914: LIST
29915: LIST
29916: LIST
29917: LIST
29918: LIST
29919: LIST
29920: LIST
29921: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
29922: LD_ADDR_VAR 0 45
29926: PUSH
29927: LD_INT 0
29929: PUSH
29930: LD_INT 0
29932: PUSH
29933: EMPTY
29934: LIST
29935: LIST
29936: PUSH
29937: LD_INT 0
29939: PUSH
29940: LD_INT 1
29942: NEG
29943: PUSH
29944: EMPTY
29945: LIST
29946: LIST
29947: PUSH
29948: LD_INT 1
29950: PUSH
29951: LD_INT 0
29953: PUSH
29954: EMPTY
29955: LIST
29956: LIST
29957: PUSH
29958: LD_INT 1
29960: PUSH
29961: LD_INT 1
29963: PUSH
29964: EMPTY
29965: LIST
29966: LIST
29967: PUSH
29968: LD_INT 0
29970: PUSH
29971: LD_INT 1
29973: PUSH
29974: EMPTY
29975: LIST
29976: LIST
29977: PUSH
29978: LD_INT 1
29980: NEG
29981: PUSH
29982: LD_INT 0
29984: PUSH
29985: EMPTY
29986: LIST
29987: LIST
29988: PUSH
29989: LD_INT 1
29991: NEG
29992: PUSH
29993: LD_INT 1
29995: NEG
29996: PUSH
29997: EMPTY
29998: LIST
29999: LIST
30000: PUSH
30001: LD_INT 1
30003: NEG
30004: PUSH
30005: LD_INT 2
30007: NEG
30008: PUSH
30009: EMPTY
30010: LIST
30011: LIST
30012: PUSH
30013: LD_INT 0
30015: PUSH
30016: LD_INT 2
30018: NEG
30019: PUSH
30020: EMPTY
30021: LIST
30022: LIST
30023: PUSH
30024: LD_INT 1
30026: PUSH
30027: LD_INT 1
30029: NEG
30030: PUSH
30031: EMPTY
30032: LIST
30033: LIST
30034: PUSH
30035: LD_INT 2
30037: PUSH
30038: LD_INT 1
30040: PUSH
30041: EMPTY
30042: LIST
30043: LIST
30044: PUSH
30045: LD_INT 2
30047: PUSH
30048: LD_INT 2
30050: PUSH
30051: EMPTY
30052: LIST
30053: LIST
30054: PUSH
30055: LD_INT 1
30057: PUSH
30058: LD_INT 2
30060: PUSH
30061: EMPTY
30062: LIST
30063: LIST
30064: PUSH
30065: LD_INT 0
30067: PUSH
30068: LD_INT 2
30070: PUSH
30071: EMPTY
30072: LIST
30073: LIST
30074: PUSH
30075: LD_INT 1
30077: NEG
30078: PUSH
30079: LD_INT 1
30081: PUSH
30082: EMPTY
30083: LIST
30084: LIST
30085: PUSH
30086: LD_INT 2
30088: NEG
30089: PUSH
30090: LD_INT 1
30092: NEG
30093: PUSH
30094: EMPTY
30095: LIST
30096: LIST
30097: PUSH
30098: LD_INT 2
30100: NEG
30101: PUSH
30102: LD_INT 2
30104: NEG
30105: PUSH
30106: EMPTY
30107: LIST
30108: LIST
30109: PUSH
30110: LD_INT 2
30112: NEG
30113: PUSH
30114: LD_INT 3
30116: NEG
30117: PUSH
30118: EMPTY
30119: LIST
30120: LIST
30121: PUSH
30122: LD_INT 1
30124: NEG
30125: PUSH
30126: LD_INT 3
30128: NEG
30129: PUSH
30130: EMPTY
30131: LIST
30132: LIST
30133: PUSH
30134: LD_INT 0
30136: PUSH
30137: LD_INT 3
30139: NEG
30140: PUSH
30141: EMPTY
30142: LIST
30143: LIST
30144: PUSH
30145: LD_INT 1
30147: PUSH
30148: LD_INT 2
30150: NEG
30151: PUSH
30152: EMPTY
30153: LIST
30154: LIST
30155: PUSH
30156: LD_INT 3
30158: PUSH
30159: LD_INT 2
30161: PUSH
30162: EMPTY
30163: LIST
30164: LIST
30165: PUSH
30166: LD_INT 3
30168: PUSH
30169: LD_INT 3
30171: PUSH
30172: EMPTY
30173: LIST
30174: LIST
30175: PUSH
30176: LD_INT 2
30178: PUSH
30179: LD_INT 3
30181: PUSH
30182: EMPTY
30183: LIST
30184: LIST
30185: PUSH
30186: LD_INT 1
30188: PUSH
30189: LD_INT 3
30191: PUSH
30192: EMPTY
30193: LIST
30194: LIST
30195: PUSH
30196: LD_INT 0
30198: PUSH
30199: LD_INT 3
30201: PUSH
30202: EMPTY
30203: LIST
30204: LIST
30205: PUSH
30206: LD_INT 1
30208: NEG
30209: PUSH
30210: LD_INT 2
30212: PUSH
30213: EMPTY
30214: LIST
30215: LIST
30216: PUSH
30217: LD_INT 3
30219: NEG
30220: PUSH
30221: LD_INT 2
30223: NEG
30224: PUSH
30225: EMPTY
30226: LIST
30227: LIST
30228: PUSH
30229: LD_INT 3
30231: NEG
30232: PUSH
30233: LD_INT 3
30235: NEG
30236: PUSH
30237: EMPTY
30238: LIST
30239: LIST
30240: PUSH
30241: EMPTY
30242: LIST
30243: LIST
30244: LIST
30245: LIST
30246: LIST
30247: LIST
30248: LIST
30249: LIST
30250: LIST
30251: LIST
30252: LIST
30253: LIST
30254: LIST
30255: LIST
30256: LIST
30257: LIST
30258: LIST
30259: LIST
30260: LIST
30261: LIST
30262: LIST
30263: LIST
30264: LIST
30265: LIST
30266: LIST
30267: LIST
30268: LIST
30269: LIST
30270: LIST
30271: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
30272: LD_ADDR_VAR 0 46
30276: PUSH
30277: LD_INT 0
30279: PUSH
30280: LD_INT 0
30282: PUSH
30283: EMPTY
30284: LIST
30285: LIST
30286: PUSH
30287: LD_INT 0
30289: PUSH
30290: LD_INT 1
30292: NEG
30293: PUSH
30294: EMPTY
30295: LIST
30296: LIST
30297: PUSH
30298: LD_INT 1
30300: PUSH
30301: LD_INT 0
30303: PUSH
30304: EMPTY
30305: LIST
30306: LIST
30307: PUSH
30308: LD_INT 1
30310: PUSH
30311: LD_INT 1
30313: PUSH
30314: EMPTY
30315: LIST
30316: LIST
30317: PUSH
30318: LD_INT 0
30320: PUSH
30321: LD_INT 1
30323: PUSH
30324: EMPTY
30325: LIST
30326: LIST
30327: PUSH
30328: LD_INT 1
30330: NEG
30331: PUSH
30332: LD_INT 0
30334: PUSH
30335: EMPTY
30336: LIST
30337: LIST
30338: PUSH
30339: LD_INT 1
30341: NEG
30342: PUSH
30343: LD_INT 1
30345: NEG
30346: PUSH
30347: EMPTY
30348: LIST
30349: LIST
30350: PUSH
30351: LD_INT 1
30353: NEG
30354: PUSH
30355: LD_INT 2
30357: NEG
30358: PUSH
30359: EMPTY
30360: LIST
30361: LIST
30362: PUSH
30363: LD_INT 0
30365: PUSH
30366: LD_INT 2
30368: NEG
30369: PUSH
30370: EMPTY
30371: LIST
30372: LIST
30373: PUSH
30374: LD_INT 1
30376: PUSH
30377: LD_INT 1
30379: NEG
30380: PUSH
30381: EMPTY
30382: LIST
30383: LIST
30384: PUSH
30385: LD_INT 2
30387: PUSH
30388: LD_INT 0
30390: PUSH
30391: EMPTY
30392: LIST
30393: LIST
30394: PUSH
30395: LD_INT 2
30397: PUSH
30398: LD_INT 1
30400: PUSH
30401: EMPTY
30402: LIST
30403: LIST
30404: PUSH
30405: LD_INT 1
30407: PUSH
30408: LD_INT 2
30410: PUSH
30411: EMPTY
30412: LIST
30413: LIST
30414: PUSH
30415: LD_INT 0
30417: PUSH
30418: LD_INT 2
30420: PUSH
30421: EMPTY
30422: LIST
30423: LIST
30424: PUSH
30425: LD_INT 1
30427: NEG
30428: PUSH
30429: LD_INT 1
30431: PUSH
30432: EMPTY
30433: LIST
30434: LIST
30435: PUSH
30436: LD_INT 2
30438: NEG
30439: PUSH
30440: LD_INT 0
30442: PUSH
30443: EMPTY
30444: LIST
30445: LIST
30446: PUSH
30447: LD_INT 2
30449: NEG
30450: PUSH
30451: LD_INT 1
30453: NEG
30454: PUSH
30455: EMPTY
30456: LIST
30457: LIST
30458: PUSH
30459: LD_INT 1
30461: NEG
30462: PUSH
30463: LD_INT 3
30465: NEG
30466: PUSH
30467: EMPTY
30468: LIST
30469: LIST
30470: PUSH
30471: LD_INT 0
30473: PUSH
30474: LD_INT 3
30476: NEG
30477: PUSH
30478: EMPTY
30479: LIST
30480: LIST
30481: PUSH
30482: LD_INT 1
30484: PUSH
30485: LD_INT 2
30487: NEG
30488: PUSH
30489: EMPTY
30490: LIST
30491: LIST
30492: PUSH
30493: LD_INT 2
30495: PUSH
30496: LD_INT 1
30498: NEG
30499: PUSH
30500: EMPTY
30501: LIST
30502: LIST
30503: PUSH
30504: LD_INT 3
30506: PUSH
30507: LD_INT 0
30509: PUSH
30510: EMPTY
30511: LIST
30512: LIST
30513: PUSH
30514: LD_INT 3
30516: PUSH
30517: LD_INT 1
30519: PUSH
30520: EMPTY
30521: LIST
30522: LIST
30523: PUSH
30524: LD_INT 1
30526: PUSH
30527: LD_INT 3
30529: PUSH
30530: EMPTY
30531: LIST
30532: LIST
30533: PUSH
30534: LD_INT 0
30536: PUSH
30537: LD_INT 3
30539: PUSH
30540: EMPTY
30541: LIST
30542: LIST
30543: PUSH
30544: LD_INT 1
30546: NEG
30547: PUSH
30548: LD_INT 2
30550: PUSH
30551: EMPTY
30552: LIST
30553: LIST
30554: PUSH
30555: LD_INT 2
30557: NEG
30558: PUSH
30559: LD_INT 1
30561: PUSH
30562: EMPTY
30563: LIST
30564: LIST
30565: PUSH
30566: LD_INT 3
30568: NEG
30569: PUSH
30570: LD_INT 0
30572: PUSH
30573: EMPTY
30574: LIST
30575: LIST
30576: PUSH
30577: LD_INT 3
30579: NEG
30580: PUSH
30581: LD_INT 1
30583: NEG
30584: PUSH
30585: EMPTY
30586: LIST
30587: LIST
30588: PUSH
30589: EMPTY
30590: LIST
30591: LIST
30592: LIST
30593: LIST
30594: LIST
30595: LIST
30596: LIST
30597: LIST
30598: LIST
30599: LIST
30600: LIST
30601: LIST
30602: LIST
30603: LIST
30604: LIST
30605: LIST
30606: LIST
30607: LIST
30608: LIST
30609: LIST
30610: LIST
30611: LIST
30612: LIST
30613: LIST
30614: LIST
30615: LIST
30616: LIST
30617: LIST
30618: LIST
30619: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
30620: LD_ADDR_VAR 0 47
30624: PUSH
30625: LD_INT 0
30627: PUSH
30628: LD_INT 0
30630: PUSH
30631: EMPTY
30632: LIST
30633: LIST
30634: PUSH
30635: LD_INT 0
30637: PUSH
30638: LD_INT 1
30640: NEG
30641: PUSH
30642: EMPTY
30643: LIST
30644: LIST
30645: PUSH
30646: LD_INT 1
30648: PUSH
30649: LD_INT 0
30651: PUSH
30652: EMPTY
30653: LIST
30654: LIST
30655: PUSH
30656: LD_INT 1
30658: PUSH
30659: LD_INT 1
30661: PUSH
30662: EMPTY
30663: LIST
30664: LIST
30665: PUSH
30666: LD_INT 0
30668: PUSH
30669: LD_INT 1
30671: PUSH
30672: EMPTY
30673: LIST
30674: LIST
30675: PUSH
30676: LD_INT 1
30678: NEG
30679: PUSH
30680: LD_INT 0
30682: PUSH
30683: EMPTY
30684: LIST
30685: LIST
30686: PUSH
30687: LD_INT 1
30689: NEG
30690: PUSH
30691: LD_INT 1
30693: NEG
30694: PUSH
30695: EMPTY
30696: LIST
30697: LIST
30698: PUSH
30699: LD_INT 1
30701: NEG
30702: PUSH
30703: LD_INT 2
30705: NEG
30706: PUSH
30707: EMPTY
30708: LIST
30709: LIST
30710: PUSH
30711: LD_INT 0
30713: PUSH
30714: LD_INT 2
30716: NEG
30717: PUSH
30718: EMPTY
30719: LIST
30720: LIST
30721: PUSH
30722: LD_INT 1
30724: PUSH
30725: LD_INT 1
30727: NEG
30728: PUSH
30729: EMPTY
30730: LIST
30731: LIST
30732: PUSH
30733: LD_INT 2
30735: NEG
30736: PUSH
30737: LD_INT 1
30739: NEG
30740: PUSH
30741: EMPTY
30742: LIST
30743: LIST
30744: PUSH
30745: LD_INT 2
30747: NEG
30748: PUSH
30749: LD_INT 2
30751: NEG
30752: PUSH
30753: EMPTY
30754: LIST
30755: LIST
30756: PUSH
30757: EMPTY
30758: LIST
30759: LIST
30760: LIST
30761: LIST
30762: LIST
30763: LIST
30764: LIST
30765: LIST
30766: LIST
30767: LIST
30768: LIST
30769: LIST
30770: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
30771: LD_ADDR_VAR 0 48
30775: PUSH
30776: LD_INT 0
30778: PUSH
30779: LD_INT 0
30781: PUSH
30782: EMPTY
30783: LIST
30784: LIST
30785: PUSH
30786: LD_INT 0
30788: PUSH
30789: LD_INT 1
30791: NEG
30792: PUSH
30793: EMPTY
30794: LIST
30795: LIST
30796: PUSH
30797: LD_INT 1
30799: PUSH
30800: LD_INT 0
30802: PUSH
30803: EMPTY
30804: LIST
30805: LIST
30806: PUSH
30807: LD_INT 1
30809: PUSH
30810: LD_INT 1
30812: PUSH
30813: EMPTY
30814: LIST
30815: LIST
30816: PUSH
30817: LD_INT 0
30819: PUSH
30820: LD_INT 1
30822: PUSH
30823: EMPTY
30824: LIST
30825: LIST
30826: PUSH
30827: LD_INT 1
30829: NEG
30830: PUSH
30831: LD_INT 0
30833: PUSH
30834: EMPTY
30835: LIST
30836: LIST
30837: PUSH
30838: LD_INT 1
30840: NEG
30841: PUSH
30842: LD_INT 1
30844: NEG
30845: PUSH
30846: EMPTY
30847: LIST
30848: LIST
30849: PUSH
30850: LD_INT 1
30852: NEG
30853: PUSH
30854: LD_INT 2
30856: NEG
30857: PUSH
30858: EMPTY
30859: LIST
30860: LIST
30861: PUSH
30862: LD_INT 0
30864: PUSH
30865: LD_INT 2
30867: NEG
30868: PUSH
30869: EMPTY
30870: LIST
30871: LIST
30872: PUSH
30873: LD_INT 1
30875: PUSH
30876: LD_INT 1
30878: NEG
30879: PUSH
30880: EMPTY
30881: LIST
30882: LIST
30883: PUSH
30884: LD_INT 2
30886: PUSH
30887: LD_INT 0
30889: PUSH
30890: EMPTY
30891: LIST
30892: LIST
30893: PUSH
30894: LD_INT 2
30896: PUSH
30897: LD_INT 1
30899: PUSH
30900: EMPTY
30901: LIST
30902: LIST
30903: PUSH
30904: EMPTY
30905: LIST
30906: LIST
30907: LIST
30908: LIST
30909: LIST
30910: LIST
30911: LIST
30912: LIST
30913: LIST
30914: LIST
30915: LIST
30916: LIST
30917: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
30918: LD_ADDR_VAR 0 49
30922: PUSH
30923: LD_INT 0
30925: PUSH
30926: LD_INT 0
30928: PUSH
30929: EMPTY
30930: LIST
30931: LIST
30932: PUSH
30933: LD_INT 0
30935: PUSH
30936: LD_INT 1
30938: NEG
30939: PUSH
30940: EMPTY
30941: LIST
30942: LIST
30943: PUSH
30944: LD_INT 1
30946: PUSH
30947: LD_INT 0
30949: PUSH
30950: EMPTY
30951: LIST
30952: LIST
30953: PUSH
30954: LD_INT 1
30956: PUSH
30957: LD_INT 1
30959: PUSH
30960: EMPTY
30961: LIST
30962: LIST
30963: PUSH
30964: LD_INT 0
30966: PUSH
30967: LD_INT 1
30969: PUSH
30970: EMPTY
30971: LIST
30972: LIST
30973: PUSH
30974: LD_INT 1
30976: NEG
30977: PUSH
30978: LD_INT 0
30980: PUSH
30981: EMPTY
30982: LIST
30983: LIST
30984: PUSH
30985: LD_INT 1
30987: NEG
30988: PUSH
30989: LD_INT 1
30991: NEG
30992: PUSH
30993: EMPTY
30994: LIST
30995: LIST
30996: PUSH
30997: LD_INT 1
30999: PUSH
31000: LD_INT 1
31002: NEG
31003: PUSH
31004: EMPTY
31005: LIST
31006: LIST
31007: PUSH
31008: LD_INT 2
31010: PUSH
31011: LD_INT 0
31013: PUSH
31014: EMPTY
31015: LIST
31016: LIST
31017: PUSH
31018: LD_INT 2
31020: PUSH
31021: LD_INT 1
31023: PUSH
31024: EMPTY
31025: LIST
31026: LIST
31027: PUSH
31028: LD_INT 2
31030: PUSH
31031: LD_INT 2
31033: PUSH
31034: EMPTY
31035: LIST
31036: LIST
31037: PUSH
31038: LD_INT 1
31040: PUSH
31041: LD_INT 2
31043: PUSH
31044: EMPTY
31045: LIST
31046: LIST
31047: PUSH
31048: EMPTY
31049: LIST
31050: LIST
31051: LIST
31052: LIST
31053: LIST
31054: LIST
31055: LIST
31056: LIST
31057: LIST
31058: LIST
31059: LIST
31060: LIST
31061: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
31062: LD_ADDR_VAR 0 50
31066: PUSH
31067: LD_INT 0
31069: PUSH
31070: LD_INT 0
31072: PUSH
31073: EMPTY
31074: LIST
31075: LIST
31076: PUSH
31077: LD_INT 0
31079: PUSH
31080: LD_INT 1
31082: NEG
31083: PUSH
31084: EMPTY
31085: LIST
31086: LIST
31087: PUSH
31088: LD_INT 1
31090: PUSH
31091: LD_INT 0
31093: PUSH
31094: EMPTY
31095: LIST
31096: LIST
31097: PUSH
31098: LD_INT 1
31100: PUSH
31101: LD_INT 1
31103: PUSH
31104: EMPTY
31105: LIST
31106: LIST
31107: PUSH
31108: LD_INT 0
31110: PUSH
31111: LD_INT 1
31113: PUSH
31114: EMPTY
31115: LIST
31116: LIST
31117: PUSH
31118: LD_INT 1
31120: NEG
31121: PUSH
31122: LD_INT 0
31124: PUSH
31125: EMPTY
31126: LIST
31127: LIST
31128: PUSH
31129: LD_INT 1
31131: NEG
31132: PUSH
31133: LD_INT 1
31135: NEG
31136: PUSH
31137: EMPTY
31138: LIST
31139: LIST
31140: PUSH
31141: LD_INT 2
31143: PUSH
31144: LD_INT 1
31146: PUSH
31147: EMPTY
31148: LIST
31149: LIST
31150: PUSH
31151: LD_INT 2
31153: PUSH
31154: LD_INT 2
31156: PUSH
31157: EMPTY
31158: LIST
31159: LIST
31160: PUSH
31161: LD_INT 1
31163: PUSH
31164: LD_INT 2
31166: PUSH
31167: EMPTY
31168: LIST
31169: LIST
31170: PUSH
31171: LD_INT 0
31173: PUSH
31174: LD_INT 2
31176: PUSH
31177: EMPTY
31178: LIST
31179: LIST
31180: PUSH
31181: LD_INT 1
31183: NEG
31184: PUSH
31185: LD_INT 1
31187: PUSH
31188: EMPTY
31189: LIST
31190: LIST
31191: PUSH
31192: EMPTY
31193: LIST
31194: LIST
31195: LIST
31196: LIST
31197: LIST
31198: LIST
31199: LIST
31200: LIST
31201: LIST
31202: LIST
31203: LIST
31204: LIST
31205: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
31206: LD_ADDR_VAR 0 51
31210: PUSH
31211: LD_INT 0
31213: PUSH
31214: LD_INT 0
31216: PUSH
31217: EMPTY
31218: LIST
31219: LIST
31220: PUSH
31221: LD_INT 0
31223: PUSH
31224: LD_INT 1
31226: NEG
31227: PUSH
31228: EMPTY
31229: LIST
31230: LIST
31231: PUSH
31232: LD_INT 1
31234: PUSH
31235: LD_INT 0
31237: PUSH
31238: EMPTY
31239: LIST
31240: LIST
31241: PUSH
31242: LD_INT 1
31244: PUSH
31245: LD_INT 1
31247: PUSH
31248: EMPTY
31249: LIST
31250: LIST
31251: PUSH
31252: LD_INT 0
31254: PUSH
31255: LD_INT 1
31257: PUSH
31258: EMPTY
31259: LIST
31260: LIST
31261: PUSH
31262: LD_INT 1
31264: NEG
31265: PUSH
31266: LD_INT 0
31268: PUSH
31269: EMPTY
31270: LIST
31271: LIST
31272: PUSH
31273: LD_INT 1
31275: NEG
31276: PUSH
31277: LD_INT 1
31279: NEG
31280: PUSH
31281: EMPTY
31282: LIST
31283: LIST
31284: PUSH
31285: LD_INT 1
31287: PUSH
31288: LD_INT 2
31290: PUSH
31291: EMPTY
31292: LIST
31293: LIST
31294: PUSH
31295: LD_INT 0
31297: PUSH
31298: LD_INT 2
31300: PUSH
31301: EMPTY
31302: LIST
31303: LIST
31304: PUSH
31305: LD_INT 1
31307: NEG
31308: PUSH
31309: LD_INT 1
31311: PUSH
31312: EMPTY
31313: LIST
31314: LIST
31315: PUSH
31316: LD_INT 2
31318: NEG
31319: PUSH
31320: LD_INT 0
31322: PUSH
31323: EMPTY
31324: LIST
31325: LIST
31326: PUSH
31327: LD_INT 2
31329: NEG
31330: PUSH
31331: LD_INT 1
31333: NEG
31334: PUSH
31335: EMPTY
31336: LIST
31337: LIST
31338: PUSH
31339: EMPTY
31340: LIST
31341: LIST
31342: LIST
31343: LIST
31344: LIST
31345: LIST
31346: LIST
31347: LIST
31348: LIST
31349: LIST
31350: LIST
31351: LIST
31352: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31353: LD_ADDR_VAR 0 52
31357: PUSH
31358: LD_INT 0
31360: PUSH
31361: LD_INT 0
31363: PUSH
31364: EMPTY
31365: LIST
31366: LIST
31367: PUSH
31368: LD_INT 0
31370: PUSH
31371: LD_INT 1
31373: NEG
31374: PUSH
31375: EMPTY
31376: LIST
31377: LIST
31378: PUSH
31379: LD_INT 1
31381: PUSH
31382: LD_INT 0
31384: PUSH
31385: EMPTY
31386: LIST
31387: LIST
31388: PUSH
31389: LD_INT 1
31391: PUSH
31392: LD_INT 1
31394: PUSH
31395: EMPTY
31396: LIST
31397: LIST
31398: PUSH
31399: LD_INT 0
31401: PUSH
31402: LD_INT 1
31404: PUSH
31405: EMPTY
31406: LIST
31407: LIST
31408: PUSH
31409: LD_INT 1
31411: NEG
31412: PUSH
31413: LD_INT 0
31415: PUSH
31416: EMPTY
31417: LIST
31418: LIST
31419: PUSH
31420: LD_INT 1
31422: NEG
31423: PUSH
31424: LD_INT 1
31426: NEG
31427: PUSH
31428: EMPTY
31429: LIST
31430: LIST
31431: PUSH
31432: LD_INT 1
31434: NEG
31435: PUSH
31436: LD_INT 2
31438: NEG
31439: PUSH
31440: EMPTY
31441: LIST
31442: LIST
31443: PUSH
31444: LD_INT 1
31446: NEG
31447: PUSH
31448: LD_INT 1
31450: PUSH
31451: EMPTY
31452: LIST
31453: LIST
31454: PUSH
31455: LD_INT 2
31457: NEG
31458: PUSH
31459: LD_INT 0
31461: PUSH
31462: EMPTY
31463: LIST
31464: LIST
31465: PUSH
31466: LD_INT 2
31468: NEG
31469: PUSH
31470: LD_INT 1
31472: NEG
31473: PUSH
31474: EMPTY
31475: LIST
31476: LIST
31477: PUSH
31478: LD_INT 2
31480: NEG
31481: PUSH
31482: LD_INT 2
31484: NEG
31485: PUSH
31486: EMPTY
31487: LIST
31488: LIST
31489: PUSH
31490: EMPTY
31491: LIST
31492: LIST
31493: LIST
31494: LIST
31495: LIST
31496: LIST
31497: LIST
31498: LIST
31499: LIST
31500: LIST
31501: LIST
31502: LIST
31503: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31504: LD_ADDR_VAR 0 53
31508: PUSH
31509: LD_INT 0
31511: PUSH
31512: LD_INT 0
31514: PUSH
31515: EMPTY
31516: LIST
31517: LIST
31518: PUSH
31519: LD_INT 0
31521: PUSH
31522: LD_INT 1
31524: NEG
31525: PUSH
31526: EMPTY
31527: LIST
31528: LIST
31529: PUSH
31530: LD_INT 1
31532: PUSH
31533: LD_INT 0
31535: PUSH
31536: EMPTY
31537: LIST
31538: LIST
31539: PUSH
31540: LD_INT 1
31542: PUSH
31543: LD_INT 1
31545: PUSH
31546: EMPTY
31547: LIST
31548: LIST
31549: PUSH
31550: LD_INT 0
31552: PUSH
31553: LD_INT 1
31555: PUSH
31556: EMPTY
31557: LIST
31558: LIST
31559: PUSH
31560: LD_INT 1
31562: NEG
31563: PUSH
31564: LD_INT 0
31566: PUSH
31567: EMPTY
31568: LIST
31569: LIST
31570: PUSH
31571: LD_INT 1
31573: NEG
31574: PUSH
31575: LD_INT 1
31577: NEG
31578: PUSH
31579: EMPTY
31580: LIST
31581: LIST
31582: PUSH
31583: LD_INT 1
31585: NEG
31586: PUSH
31587: LD_INT 2
31589: NEG
31590: PUSH
31591: EMPTY
31592: LIST
31593: LIST
31594: PUSH
31595: LD_INT 0
31597: PUSH
31598: LD_INT 2
31600: NEG
31601: PUSH
31602: EMPTY
31603: LIST
31604: LIST
31605: PUSH
31606: LD_INT 1
31608: PUSH
31609: LD_INT 1
31611: NEG
31612: PUSH
31613: EMPTY
31614: LIST
31615: LIST
31616: PUSH
31617: LD_INT 2
31619: PUSH
31620: LD_INT 0
31622: PUSH
31623: EMPTY
31624: LIST
31625: LIST
31626: PUSH
31627: LD_INT 2
31629: PUSH
31630: LD_INT 1
31632: PUSH
31633: EMPTY
31634: LIST
31635: LIST
31636: PUSH
31637: LD_INT 2
31639: PUSH
31640: LD_INT 2
31642: PUSH
31643: EMPTY
31644: LIST
31645: LIST
31646: PUSH
31647: LD_INT 1
31649: PUSH
31650: LD_INT 2
31652: PUSH
31653: EMPTY
31654: LIST
31655: LIST
31656: PUSH
31657: LD_INT 0
31659: PUSH
31660: LD_INT 2
31662: PUSH
31663: EMPTY
31664: LIST
31665: LIST
31666: PUSH
31667: LD_INT 1
31669: NEG
31670: PUSH
31671: LD_INT 1
31673: PUSH
31674: EMPTY
31675: LIST
31676: LIST
31677: PUSH
31678: LD_INT 2
31680: NEG
31681: PUSH
31682: LD_INT 0
31684: PUSH
31685: EMPTY
31686: LIST
31687: LIST
31688: PUSH
31689: LD_INT 2
31691: NEG
31692: PUSH
31693: LD_INT 1
31695: NEG
31696: PUSH
31697: EMPTY
31698: LIST
31699: LIST
31700: PUSH
31701: LD_INT 2
31703: NEG
31704: PUSH
31705: LD_INT 2
31707: NEG
31708: PUSH
31709: EMPTY
31710: LIST
31711: LIST
31712: PUSH
31713: EMPTY
31714: LIST
31715: LIST
31716: LIST
31717: LIST
31718: LIST
31719: LIST
31720: LIST
31721: LIST
31722: LIST
31723: LIST
31724: LIST
31725: LIST
31726: LIST
31727: LIST
31728: LIST
31729: LIST
31730: LIST
31731: LIST
31732: LIST
31733: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31734: LD_ADDR_VAR 0 54
31738: PUSH
31739: LD_INT 0
31741: PUSH
31742: LD_INT 0
31744: PUSH
31745: EMPTY
31746: LIST
31747: LIST
31748: PUSH
31749: LD_INT 0
31751: PUSH
31752: LD_INT 1
31754: NEG
31755: PUSH
31756: EMPTY
31757: LIST
31758: LIST
31759: PUSH
31760: LD_INT 1
31762: PUSH
31763: LD_INT 0
31765: PUSH
31766: EMPTY
31767: LIST
31768: LIST
31769: PUSH
31770: LD_INT 1
31772: PUSH
31773: LD_INT 1
31775: PUSH
31776: EMPTY
31777: LIST
31778: LIST
31779: PUSH
31780: LD_INT 0
31782: PUSH
31783: LD_INT 1
31785: PUSH
31786: EMPTY
31787: LIST
31788: LIST
31789: PUSH
31790: LD_INT 1
31792: NEG
31793: PUSH
31794: LD_INT 0
31796: PUSH
31797: EMPTY
31798: LIST
31799: LIST
31800: PUSH
31801: LD_INT 1
31803: NEG
31804: PUSH
31805: LD_INT 1
31807: NEG
31808: PUSH
31809: EMPTY
31810: LIST
31811: LIST
31812: PUSH
31813: LD_INT 1
31815: NEG
31816: PUSH
31817: LD_INT 2
31819: NEG
31820: PUSH
31821: EMPTY
31822: LIST
31823: LIST
31824: PUSH
31825: LD_INT 0
31827: PUSH
31828: LD_INT 2
31830: NEG
31831: PUSH
31832: EMPTY
31833: LIST
31834: LIST
31835: PUSH
31836: LD_INT 1
31838: PUSH
31839: LD_INT 1
31841: NEG
31842: PUSH
31843: EMPTY
31844: LIST
31845: LIST
31846: PUSH
31847: LD_INT 2
31849: PUSH
31850: LD_INT 0
31852: PUSH
31853: EMPTY
31854: LIST
31855: LIST
31856: PUSH
31857: LD_INT 2
31859: PUSH
31860: LD_INT 1
31862: PUSH
31863: EMPTY
31864: LIST
31865: LIST
31866: PUSH
31867: LD_INT 2
31869: PUSH
31870: LD_INT 2
31872: PUSH
31873: EMPTY
31874: LIST
31875: LIST
31876: PUSH
31877: LD_INT 1
31879: PUSH
31880: LD_INT 2
31882: PUSH
31883: EMPTY
31884: LIST
31885: LIST
31886: PUSH
31887: LD_INT 0
31889: PUSH
31890: LD_INT 2
31892: PUSH
31893: EMPTY
31894: LIST
31895: LIST
31896: PUSH
31897: LD_INT 1
31899: NEG
31900: PUSH
31901: LD_INT 1
31903: PUSH
31904: EMPTY
31905: LIST
31906: LIST
31907: PUSH
31908: LD_INT 2
31910: NEG
31911: PUSH
31912: LD_INT 0
31914: PUSH
31915: EMPTY
31916: LIST
31917: LIST
31918: PUSH
31919: LD_INT 2
31921: NEG
31922: PUSH
31923: LD_INT 1
31925: NEG
31926: PUSH
31927: EMPTY
31928: LIST
31929: LIST
31930: PUSH
31931: LD_INT 2
31933: NEG
31934: PUSH
31935: LD_INT 2
31937: NEG
31938: PUSH
31939: EMPTY
31940: LIST
31941: LIST
31942: PUSH
31943: EMPTY
31944: LIST
31945: LIST
31946: LIST
31947: LIST
31948: LIST
31949: LIST
31950: LIST
31951: LIST
31952: LIST
31953: LIST
31954: LIST
31955: LIST
31956: LIST
31957: LIST
31958: LIST
31959: LIST
31960: LIST
31961: LIST
31962: LIST
31963: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31964: LD_ADDR_VAR 0 55
31968: PUSH
31969: LD_INT 0
31971: PUSH
31972: LD_INT 0
31974: PUSH
31975: EMPTY
31976: LIST
31977: LIST
31978: PUSH
31979: LD_INT 0
31981: PUSH
31982: LD_INT 1
31984: NEG
31985: PUSH
31986: EMPTY
31987: LIST
31988: LIST
31989: PUSH
31990: LD_INT 1
31992: PUSH
31993: LD_INT 0
31995: PUSH
31996: EMPTY
31997: LIST
31998: LIST
31999: PUSH
32000: LD_INT 1
32002: PUSH
32003: LD_INT 1
32005: PUSH
32006: EMPTY
32007: LIST
32008: LIST
32009: PUSH
32010: LD_INT 0
32012: PUSH
32013: LD_INT 1
32015: PUSH
32016: EMPTY
32017: LIST
32018: LIST
32019: PUSH
32020: LD_INT 1
32022: NEG
32023: PUSH
32024: LD_INT 0
32026: PUSH
32027: EMPTY
32028: LIST
32029: LIST
32030: PUSH
32031: LD_INT 1
32033: NEG
32034: PUSH
32035: LD_INT 1
32037: NEG
32038: PUSH
32039: EMPTY
32040: LIST
32041: LIST
32042: PUSH
32043: LD_INT 1
32045: NEG
32046: PUSH
32047: LD_INT 2
32049: NEG
32050: PUSH
32051: EMPTY
32052: LIST
32053: LIST
32054: PUSH
32055: LD_INT 0
32057: PUSH
32058: LD_INT 2
32060: NEG
32061: PUSH
32062: EMPTY
32063: LIST
32064: LIST
32065: PUSH
32066: LD_INT 1
32068: PUSH
32069: LD_INT 1
32071: NEG
32072: PUSH
32073: EMPTY
32074: LIST
32075: LIST
32076: PUSH
32077: LD_INT 2
32079: PUSH
32080: LD_INT 0
32082: PUSH
32083: EMPTY
32084: LIST
32085: LIST
32086: PUSH
32087: LD_INT 2
32089: PUSH
32090: LD_INT 1
32092: PUSH
32093: EMPTY
32094: LIST
32095: LIST
32096: PUSH
32097: LD_INT 2
32099: PUSH
32100: LD_INT 2
32102: PUSH
32103: EMPTY
32104: LIST
32105: LIST
32106: PUSH
32107: LD_INT 1
32109: PUSH
32110: LD_INT 2
32112: PUSH
32113: EMPTY
32114: LIST
32115: LIST
32116: PUSH
32117: LD_INT 0
32119: PUSH
32120: LD_INT 2
32122: PUSH
32123: EMPTY
32124: LIST
32125: LIST
32126: PUSH
32127: LD_INT 1
32129: NEG
32130: PUSH
32131: LD_INT 1
32133: PUSH
32134: EMPTY
32135: LIST
32136: LIST
32137: PUSH
32138: LD_INT 2
32140: NEG
32141: PUSH
32142: LD_INT 0
32144: PUSH
32145: EMPTY
32146: LIST
32147: LIST
32148: PUSH
32149: LD_INT 2
32151: NEG
32152: PUSH
32153: LD_INT 1
32155: NEG
32156: PUSH
32157: EMPTY
32158: LIST
32159: LIST
32160: PUSH
32161: LD_INT 2
32163: NEG
32164: PUSH
32165: LD_INT 2
32167: NEG
32168: PUSH
32169: EMPTY
32170: LIST
32171: LIST
32172: PUSH
32173: EMPTY
32174: LIST
32175: LIST
32176: LIST
32177: LIST
32178: LIST
32179: LIST
32180: LIST
32181: LIST
32182: LIST
32183: LIST
32184: LIST
32185: LIST
32186: LIST
32187: LIST
32188: LIST
32189: LIST
32190: LIST
32191: LIST
32192: LIST
32193: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32194: LD_ADDR_VAR 0 56
32198: PUSH
32199: LD_INT 0
32201: PUSH
32202: LD_INT 0
32204: PUSH
32205: EMPTY
32206: LIST
32207: LIST
32208: PUSH
32209: LD_INT 0
32211: PUSH
32212: LD_INT 1
32214: NEG
32215: PUSH
32216: EMPTY
32217: LIST
32218: LIST
32219: PUSH
32220: LD_INT 1
32222: PUSH
32223: LD_INT 0
32225: PUSH
32226: EMPTY
32227: LIST
32228: LIST
32229: PUSH
32230: LD_INT 1
32232: PUSH
32233: LD_INT 1
32235: PUSH
32236: EMPTY
32237: LIST
32238: LIST
32239: PUSH
32240: LD_INT 0
32242: PUSH
32243: LD_INT 1
32245: PUSH
32246: EMPTY
32247: LIST
32248: LIST
32249: PUSH
32250: LD_INT 1
32252: NEG
32253: PUSH
32254: LD_INT 0
32256: PUSH
32257: EMPTY
32258: LIST
32259: LIST
32260: PUSH
32261: LD_INT 1
32263: NEG
32264: PUSH
32265: LD_INT 1
32267: NEG
32268: PUSH
32269: EMPTY
32270: LIST
32271: LIST
32272: PUSH
32273: LD_INT 1
32275: NEG
32276: PUSH
32277: LD_INT 2
32279: NEG
32280: PUSH
32281: EMPTY
32282: LIST
32283: LIST
32284: PUSH
32285: LD_INT 0
32287: PUSH
32288: LD_INT 2
32290: NEG
32291: PUSH
32292: EMPTY
32293: LIST
32294: LIST
32295: PUSH
32296: LD_INT 1
32298: PUSH
32299: LD_INT 1
32301: NEG
32302: PUSH
32303: EMPTY
32304: LIST
32305: LIST
32306: PUSH
32307: LD_INT 2
32309: PUSH
32310: LD_INT 0
32312: PUSH
32313: EMPTY
32314: LIST
32315: LIST
32316: PUSH
32317: LD_INT 2
32319: PUSH
32320: LD_INT 1
32322: PUSH
32323: EMPTY
32324: LIST
32325: LIST
32326: PUSH
32327: LD_INT 2
32329: PUSH
32330: LD_INT 2
32332: PUSH
32333: EMPTY
32334: LIST
32335: LIST
32336: PUSH
32337: LD_INT 1
32339: PUSH
32340: LD_INT 2
32342: PUSH
32343: EMPTY
32344: LIST
32345: LIST
32346: PUSH
32347: LD_INT 0
32349: PUSH
32350: LD_INT 2
32352: PUSH
32353: EMPTY
32354: LIST
32355: LIST
32356: PUSH
32357: LD_INT 1
32359: NEG
32360: PUSH
32361: LD_INT 1
32363: PUSH
32364: EMPTY
32365: LIST
32366: LIST
32367: PUSH
32368: LD_INT 2
32370: NEG
32371: PUSH
32372: LD_INT 0
32374: PUSH
32375: EMPTY
32376: LIST
32377: LIST
32378: PUSH
32379: LD_INT 2
32381: NEG
32382: PUSH
32383: LD_INT 1
32385: NEG
32386: PUSH
32387: EMPTY
32388: LIST
32389: LIST
32390: PUSH
32391: LD_INT 2
32393: NEG
32394: PUSH
32395: LD_INT 2
32397: NEG
32398: PUSH
32399: EMPTY
32400: LIST
32401: LIST
32402: PUSH
32403: EMPTY
32404: LIST
32405: LIST
32406: LIST
32407: LIST
32408: LIST
32409: LIST
32410: LIST
32411: LIST
32412: LIST
32413: LIST
32414: LIST
32415: LIST
32416: LIST
32417: LIST
32418: LIST
32419: LIST
32420: LIST
32421: LIST
32422: LIST
32423: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32424: LD_ADDR_VAR 0 57
32428: PUSH
32429: LD_INT 0
32431: PUSH
32432: LD_INT 0
32434: PUSH
32435: EMPTY
32436: LIST
32437: LIST
32438: PUSH
32439: LD_INT 0
32441: PUSH
32442: LD_INT 1
32444: NEG
32445: PUSH
32446: EMPTY
32447: LIST
32448: LIST
32449: PUSH
32450: LD_INT 1
32452: PUSH
32453: LD_INT 0
32455: PUSH
32456: EMPTY
32457: LIST
32458: LIST
32459: PUSH
32460: LD_INT 1
32462: PUSH
32463: LD_INT 1
32465: PUSH
32466: EMPTY
32467: LIST
32468: LIST
32469: PUSH
32470: LD_INT 0
32472: PUSH
32473: LD_INT 1
32475: PUSH
32476: EMPTY
32477: LIST
32478: LIST
32479: PUSH
32480: LD_INT 1
32482: NEG
32483: PUSH
32484: LD_INT 0
32486: PUSH
32487: EMPTY
32488: LIST
32489: LIST
32490: PUSH
32491: LD_INT 1
32493: NEG
32494: PUSH
32495: LD_INT 1
32497: NEG
32498: PUSH
32499: EMPTY
32500: LIST
32501: LIST
32502: PUSH
32503: LD_INT 1
32505: NEG
32506: PUSH
32507: LD_INT 2
32509: NEG
32510: PUSH
32511: EMPTY
32512: LIST
32513: LIST
32514: PUSH
32515: LD_INT 0
32517: PUSH
32518: LD_INT 2
32520: NEG
32521: PUSH
32522: EMPTY
32523: LIST
32524: LIST
32525: PUSH
32526: LD_INT 1
32528: PUSH
32529: LD_INT 1
32531: NEG
32532: PUSH
32533: EMPTY
32534: LIST
32535: LIST
32536: PUSH
32537: LD_INT 2
32539: PUSH
32540: LD_INT 0
32542: PUSH
32543: EMPTY
32544: LIST
32545: LIST
32546: PUSH
32547: LD_INT 2
32549: PUSH
32550: LD_INT 1
32552: PUSH
32553: EMPTY
32554: LIST
32555: LIST
32556: PUSH
32557: LD_INT 2
32559: PUSH
32560: LD_INT 2
32562: PUSH
32563: EMPTY
32564: LIST
32565: LIST
32566: PUSH
32567: LD_INT 1
32569: PUSH
32570: LD_INT 2
32572: PUSH
32573: EMPTY
32574: LIST
32575: LIST
32576: PUSH
32577: LD_INT 0
32579: PUSH
32580: LD_INT 2
32582: PUSH
32583: EMPTY
32584: LIST
32585: LIST
32586: PUSH
32587: LD_INT 1
32589: NEG
32590: PUSH
32591: LD_INT 1
32593: PUSH
32594: EMPTY
32595: LIST
32596: LIST
32597: PUSH
32598: LD_INT 2
32600: NEG
32601: PUSH
32602: LD_INT 0
32604: PUSH
32605: EMPTY
32606: LIST
32607: LIST
32608: PUSH
32609: LD_INT 2
32611: NEG
32612: PUSH
32613: LD_INT 1
32615: NEG
32616: PUSH
32617: EMPTY
32618: LIST
32619: LIST
32620: PUSH
32621: LD_INT 2
32623: NEG
32624: PUSH
32625: LD_INT 2
32627: NEG
32628: PUSH
32629: EMPTY
32630: LIST
32631: LIST
32632: PUSH
32633: EMPTY
32634: LIST
32635: LIST
32636: LIST
32637: LIST
32638: LIST
32639: LIST
32640: LIST
32641: LIST
32642: LIST
32643: LIST
32644: LIST
32645: LIST
32646: LIST
32647: LIST
32648: LIST
32649: LIST
32650: LIST
32651: LIST
32652: LIST
32653: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32654: LD_ADDR_VAR 0 58
32658: PUSH
32659: LD_INT 0
32661: PUSH
32662: LD_INT 0
32664: PUSH
32665: EMPTY
32666: LIST
32667: LIST
32668: PUSH
32669: LD_INT 0
32671: PUSH
32672: LD_INT 1
32674: NEG
32675: PUSH
32676: EMPTY
32677: LIST
32678: LIST
32679: PUSH
32680: LD_INT 1
32682: PUSH
32683: LD_INT 0
32685: PUSH
32686: EMPTY
32687: LIST
32688: LIST
32689: PUSH
32690: LD_INT 1
32692: PUSH
32693: LD_INT 1
32695: PUSH
32696: EMPTY
32697: LIST
32698: LIST
32699: PUSH
32700: LD_INT 0
32702: PUSH
32703: LD_INT 1
32705: PUSH
32706: EMPTY
32707: LIST
32708: LIST
32709: PUSH
32710: LD_INT 1
32712: NEG
32713: PUSH
32714: LD_INT 0
32716: PUSH
32717: EMPTY
32718: LIST
32719: LIST
32720: PUSH
32721: LD_INT 1
32723: NEG
32724: PUSH
32725: LD_INT 1
32727: NEG
32728: PUSH
32729: EMPTY
32730: LIST
32731: LIST
32732: PUSH
32733: LD_INT 1
32735: NEG
32736: PUSH
32737: LD_INT 2
32739: NEG
32740: PUSH
32741: EMPTY
32742: LIST
32743: LIST
32744: PUSH
32745: LD_INT 0
32747: PUSH
32748: LD_INT 2
32750: NEG
32751: PUSH
32752: EMPTY
32753: LIST
32754: LIST
32755: PUSH
32756: LD_INT 1
32758: PUSH
32759: LD_INT 1
32761: NEG
32762: PUSH
32763: EMPTY
32764: LIST
32765: LIST
32766: PUSH
32767: LD_INT 2
32769: PUSH
32770: LD_INT 0
32772: PUSH
32773: EMPTY
32774: LIST
32775: LIST
32776: PUSH
32777: LD_INT 2
32779: PUSH
32780: LD_INT 1
32782: PUSH
32783: EMPTY
32784: LIST
32785: LIST
32786: PUSH
32787: LD_INT 2
32789: PUSH
32790: LD_INT 2
32792: PUSH
32793: EMPTY
32794: LIST
32795: LIST
32796: PUSH
32797: LD_INT 1
32799: PUSH
32800: LD_INT 2
32802: PUSH
32803: EMPTY
32804: LIST
32805: LIST
32806: PUSH
32807: LD_INT 0
32809: PUSH
32810: LD_INT 2
32812: PUSH
32813: EMPTY
32814: LIST
32815: LIST
32816: PUSH
32817: LD_INT 1
32819: NEG
32820: PUSH
32821: LD_INT 1
32823: PUSH
32824: EMPTY
32825: LIST
32826: LIST
32827: PUSH
32828: LD_INT 2
32830: NEG
32831: PUSH
32832: LD_INT 0
32834: PUSH
32835: EMPTY
32836: LIST
32837: LIST
32838: PUSH
32839: LD_INT 2
32841: NEG
32842: PUSH
32843: LD_INT 1
32845: NEG
32846: PUSH
32847: EMPTY
32848: LIST
32849: LIST
32850: PUSH
32851: LD_INT 2
32853: NEG
32854: PUSH
32855: LD_INT 2
32857: NEG
32858: PUSH
32859: EMPTY
32860: LIST
32861: LIST
32862: PUSH
32863: EMPTY
32864: LIST
32865: LIST
32866: LIST
32867: LIST
32868: LIST
32869: LIST
32870: LIST
32871: LIST
32872: LIST
32873: LIST
32874: LIST
32875: LIST
32876: LIST
32877: LIST
32878: LIST
32879: LIST
32880: LIST
32881: LIST
32882: LIST
32883: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
32884: LD_ADDR_VAR 0 59
32888: PUSH
32889: LD_INT 0
32891: PUSH
32892: LD_INT 0
32894: PUSH
32895: EMPTY
32896: LIST
32897: LIST
32898: PUSH
32899: LD_INT 0
32901: PUSH
32902: LD_INT 1
32904: NEG
32905: PUSH
32906: EMPTY
32907: LIST
32908: LIST
32909: PUSH
32910: LD_INT 1
32912: PUSH
32913: LD_INT 0
32915: PUSH
32916: EMPTY
32917: LIST
32918: LIST
32919: PUSH
32920: LD_INT 1
32922: PUSH
32923: LD_INT 1
32925: PUSH
32926: EMPTY
32927: LIST
32928: LIST
32929: PUSH
32930: LD_INT 0
32932: PUSH
32933: LD_INT 1
32935: PUSH
32936: EMPTY
32937: LIST
32938: LIST
32939: PUSH
32940: LD_INT 1
32942: NEG
32943: PUSH
32944: LD_INT 0
32946: PUSH
32947: EMPTY
32948: LIST
32949: LIST
32950: PUSH
32951: LD_INT 1
32953: NEG
32954: PUSH
32955: LD_INT 1
32957: NEG
32958: PUSH
32959: EMPTY
32960: LIST
32961: LIST
32962: PUSH
32963: EMPTY
32964: LIST
32965: LIST
32966: LIST
32967: LIST
32968: LIST
32969: LIST
32970: LIST
32971: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
32972: LD_ADDR_VAR 0 60
32976: PUSH
32977: LD_INT 0
32979: PUSH
32980: LD_INT 0
32982: PUSH
32983: EMPTY
32984: LIST
32985: LIST
32986: PUSH
32987: LD_INT 0
32989: PUSH
32990: LD_INT 1
32992: NEG
32993: PUSH
32994: EMPTY
32995: LIST
32996: LIST
32997: PUSH
32998: LD_INT 1
33000: PUSH
33001: LD_INT 0
33003: PUSH
33004: EMPTY
33005: LIST
33006: LIST
33007: PUSH
33008: LD_INT 1
33010: PUSH
33011: LD_INT 1
33013: PUSH
33014: EMPTY
33015: LIST
33016: LIST
33017: PUSH
33018: LD_INT 0
33020: PUSH
33021: LD_INT 1
33023: PUSH
33024: EMPTY
33025: LIST
33026: LIST
33027: PUSH
33028: LD_INT 1
33030: NEG
33031: PUSH
33032: LD_INT 0
33034: PUSH
33035: EMPTY
33036: LIST
33037: LIST
33038: PUSH
33039: LD_INT 1
33041: NEG
33042: PUSH
33043: LD_INT 1
33045: NEG
33046: PUSH
33047: EMPTY
33048: LIST
33049: LIST
33050: PUSH
33051: EMPTY
33052: LIST
33053: LIST
33054: LIST
33055: LIST
33056: LIST
33057: LIST
33058: LIST
33059: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
33060: LD_ADDR_VAR 0 61
33064: PUSH
33065: LD_INT 0
33067: PUSH
33068: LD_INT 0
33070: PUSH
33071: EMPTY
33072: LIST
33073: LIST
33074: PUSH
33075: LD_INT 0
33077: PUSH
33078: LD_INT 1
33080: NEG
33081: PUSH
33082: EMPTY
33083: LIST
33084: LIST
33085: PUSH
33086: LD_INT 1
33088: PUSH
33089: LD_INT 0
33091: PUSH
33092: EMPTY
33093: LIST
33094: LIST
33095: PUSH
33096: LD_INT 1
33098: PUSH
33099: LD_INT 1
33101: PUSH
33102: EMPTY
33103: LIST
33104: LIST
33105: PUSH
33106: LD_INT 0
33108: PUSH
33109: LD_INT 1
33111: PUSH
33112: EMPTY
33113: LIST
33114: LIST
33115: PUSH
33116: LD_INT 1
33118: NEG
33119: PUSH
33120: LD_INT 0
33122: PUSH
33123: EMPTY
33124: LIST
33125: LIST
33126: PUSH
33127: LD_INT 1
33129: NEG
33130: PUSH
33131: LD_INT 1
33133: NEG
33134: PUSH
33135: EMPTY
33136: LIST
33137: LIST
33138: PUSH
33139: EMPTY
33140: LIST
33141: LIST
33142: LIST
33143: LIST
33144: LIST
33145: LIST
33146: LIST
33147: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
33148: LD_ADDR_VAR 0 62
33152: PUSH
33153: LD_INT 0
33155: PUSH
33156: LD_INT 0
33158: PUSH
33159: EMPTY
33160: LIST
33161: LIST
33162: PUSH
33163: LD_INT 0
33165: PUSH
33166: LD_INT 1
33168: NEG
33169: PUSH
33170: EMPTY
33171: LIST
33172: LIST
33173: PUSH
33174: LD_INT 1
33176: PUSH
33177: LD_INT 0
33179: PUSH
33180: EMPTY
33181: LIST
33182: LIST
33183: PUSH
33184: LD_INT 1
33186: PUSH
33187: LD_INT 1
33189: PUSH
33190: EMPTY
33191: LIST
33192: LIST
33193: PUSH
33194: LD_INT 0
33196: PUSH
33197: LD_INT 1
33199: PUSH
33200: EMPTY
33201: LIST
33202: LIST
33203: PUSH
33204: LD_INT 1
33206: NEG
33207: PUSH
33208: LD_INT 0
33210: PUSH
33211: EMPTY
33212: LIST
33213: LIST
33214: PUSH
33215: LD_INT 1
33217: NEG
33218: PUSH
33219: LD_INT 1
33221: NEG
33222: PUSH
33223: EMPTY
33224: LIST
33225: LIST
33226: PUSH
33227: EMPTY
33228: LIST
33229: LIST
33230: LIST
33231: LIST
33232: LIST
33233: LIST
33234: LIST
33235: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
33236: LD_ADDR_VAR 0 63
33240: PUSH
33241: LD_INT 0
33243: PUSH
33244: LD_INT 0
33246: PUSH
33247: EMPTY
33248: LIST
33249: LIST
33250: PUSH
33251: LD_INT 0
33253: PUSH
33254: LD_INT 1
33256: NEG
33257: PUSH
33258: EMPTY
33259: LIST
33260: LIST
33261: PUSH
33262: LD_INT 1
33264: PUSH
33265: LD_INT 0
33267: PUSH
33268: EMPTY
33269: LIST
33270: LIST
33271: PUSH
33272: LD_INT 1
33274: PUSH
33275: LD_INT 1
33277: PUSH
33278: EMPTY
33279: LIST
33280: LIST
33281: PUSH
33282: LD_INT 0
33284: PUSH
33285: LD_INT 1
33287: PUSH
33288: EMPTY
33289: LIST
33290: LIST
33291: PUSH
33292: LD_INT 1
33294: NEG
33295: PUSH
33296: LD_INT 0
33298: PUSH
33299: EMPTY
33300: LIST
33301: LIST
33302: PUSH
33303: LD_INT 1
33305: NEG
33306: PUSH
33307: LD_INT 1
33309: NEG
33310: PUSH
33311: EMPTY
33312: LIST
33313: LIST
33314: PUSH
33315: EMPTY
33316: LIST
33317: LIST
33318: LIST
33319: LIST
33320: LIST
33321: LIST
33322: LIST
33323: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
33324: LD_ADDR_VAR 0 64
33328: PUSH
33329: LD_INT 0
33331: PUSH
33332: LD_INT 0
33334: PUSH
33335: EMPTY
33336: LIST
33337: LIST
33338: PUSH
33339: LD_INT 0
33341: PUSH
33342: LD_INT 1
33344: NEG
33345: PUSH
33346: EMPTY
33347: LIST
33348: LIST
33349: PUSH
33350: LD_INT 1
33352: PUSH
33353: LD_INT 0
33355: PUSH
33356: EMPTY
33357: LIST
33358: LIST
33359: PUSH
33360: LD_INT 1
33362: PUSH
33363: LD_INT 1
33365: PUSH
33366: EMPTY
33367: LIST
33368: LIST
33369: PUSH
33370: LD_INT 0
33372: PUSH
33373: LD_INT 1
33375: PUSH
33376: EMPTY
33377: LIST
33378: LIST
33379: PUSH
33380: LD_INT 1
33382: NEG
33383: PUSH
33384: LD_INT 0
33386: PUSH
33387: EMPTY
33388: LIST
33389: LIST
33390: PUSH
33391: LD_INT 1
33393: NEG
33394: PUSH
33395: LD_INT 1
33397: NEG
33398: PUSH
33399: EMPTY
33400: LIST
33401: LIST
33402: PUSH
33403: EMPTY
33404: LIST
33405: LIST
33406: LIST
33407: LIST
33408: LIST
33409: LIST
33410: LIST
33411: ST_TO_ADDR
// end ; 1 :
33412: GO 39309
33414: LD_INT 1
33416: DOUBLE
33417: EQUAL
33418: IFTRUE 33422
33420: GO 36045
33422: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
33423: LD_ADDR_VAR 0 11
33427: PUSH
33428: LD_INT 1
33430: NEG
33431: PUSH
33432: LD_INT 3
33434: NEG
33435: PUSH
33436: EMPTY
33437: LIST
33438: LIST
33439: PUSH
33440: LD_INT 0
33442: PUSH
33443: LD_INT 3
33445: NEG
33446: PUSH
33447: EMPTY
33448: LIST
33449: LIST
33450: PUSH
33451: LD_INT 1
33453: PUSH
33454: LD_INT 2
33456: NEG
33457: PUSH
33458: EMPTY
33459: LIST
33460: LIST
33461: PUSH
33462: EMPTY
33463: LIST
33464: LIST
33465: LIST
33466: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
33467: LD_ADDR_VAR 0 12
33471: PUSH
33472: LD_INT 2
33474: PUSH
33475: LD_INT 1
33477: NEG
33478: PUSH
33479: EMPTY
33480: LIST
33481: LIST
33482: PUSH
33483: LD_INT 3
33485: PUSH
33486: LD_INT 0
33488: PUSH
33489: EMPTY
33490: LIST
33491: LIST
33492: PUSH
33493: LD_INT 3
33495: PUSH
33496: LD_INT 1
33498: PUSH
33499: EMPTY
33500: LIST
33501: LIST
33502: PUSH
33503: EMPTY
33504: LIST
33505: LIST
33506: LIST
33507: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
33508: LD_ADDR_VAR 0 13
33512: PUSH
33513: LD_INT 3
33515: PUSH
33516: LD_INT 2
33518: PUSH
33519: EMPTY
33520: LIST
33521: LIST
33522: PUSH
33523: LD_INT 3
33525: PUSH
33526: LD_INT 3
33528: PUSH
33529: EMPTY
33530: LIST
33531: LIST
33532: PUSH
33533: LD_INT 2
33535: PUSH
33536: LD_INT 3
33538: PUSH
33539: EMPTY
33540: LIST
33541: LIST
33542: PUSH
33543: EMPTY
33544: LIST
33545: LIST
33546: LIST
33547: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
33548: LD_ADDR_VAR 0 14
33552: PUSH
33553: LD_INT 1
33555: PUSH
33556: LD_INT 3
33558: PUSH
33559: EMPTY
33560: LIST
33561: LIST
33562: PUSH
33563: LD_INT 0
33565: PUSH
33566: LD_INT 3
33568: PUSH
33569: EMPTY
33570: LIST
33571: LIST
33572: PUSH
33573: LD_INT 1
33575: NEG
33576: PUSH
33577: LD_INT 2
33579: PUSH
33580: EMPTY
33581: LIST
33582: LIST
33583: PUSH
33584: EMPTY
33585: LIST
33586: LIST
33587: LIST
33588: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
33589: LD_ADDR_VAR 0 15
33593: PUSH
33594: LD_INT 2
33596: NEG
33597: PUSH
33598: LD_INT 1
33600: PUSH
33601: EMPTY
33602: LIST
33603: LIST
33604: PUSH
33605: LD_INT 3
33607: NEG
33608: PUSH
33609: LD_INT 0
33611: PUSH
33612: EMPTY
33613: LIST
33614: LIST
33615: PUSH
33616: LD_INT 3
33618: NEG
33619: PUSH
33620: LD_INT 1
33622: NEG
33623: PUSH
33624: EMPTY
33625: LIST
33626: LIST
33627: PUSH
33628: EMPTY
33629: LIST
33630: LIST
33631: LIST
33632: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
33633: LD_ADDR_VAR 0 16
33637: PUSH
33638: LD_INT 2
33640: NEG
33641: PUSH
33642: LD_INT 3
33644: NEG
33645: PUSH
33646: EMPTY
33647: LIST
33648: LIST
33649: PUSH
33650: LD_INT 3
33652: NEG
33653: PUSH
33654: LD_INT 2
33656: NEG
33657: PUSH
33658: EMPTY
33659: LIST
33660: LIST
33661: PUSH
33662: LD_INT 3
33664: NEG
33665: PUSH
33666: LD_INT 3
33668: NEG
33669: PUSH
33670: EMPTY
33671: LIST
33672: LIST
33673: PUSH
33674: EMPTY
33675: LIST
33676: LIST
33677: LIST
33678: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
33679: LD_ADDR_VAR 0 17
33683: PUSH
33684: LD_INT 1
33686: NEG
33687: PUSH
33688: LD_INT 3
33690: NEG
33691: PUSH
33692: EMPTY
33693: LIST
33694: LIST
33695: PUSH
33696: LD_INT 0
33698: PUSH
33699: LD_INT 3
33701: NEG
33702: PUSH
33703: EMPTY
33704: LIST
33705: LIST
33706: PUSH
33707: LD_INT 1
33709: PUSH
33710: LD_INT 2
33712: NEG
33713: PUSH
33714: EMPTY
33715: LIST
33716: LIST
33717: PUSH
33718: EMPTY
33719: LIST
33720: LIST
33721: LIST
33722: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
33723: LD_ADDR_VAR 0 18
33727: PUSH
33728: LD_INT 2
33730: PUSH
33731: LD_INT 1
33733: NEG
33734: PUSH
33735: EMPTY
33736: LIST
33737: LIST
33738: PUSH
33739: LD_INT 3
33741: PUSH
33742: LD_INT 0
33744: PUSH
33745: EMPTY
33746: LIST
33747: LIST
33748: PUSH
33749: LD_INT 3
33751: PUSH
33752: LD_INT 1
33754: PUSH
33755: EMPTY
33756: LIST
33757: LIST
33758: PUSH
33759: EMPTY
33760: LIST
33761: LIST
33762: LIST
33763: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
33764: LD_ADDR_VAR 0 19
33768: PUSH
33769: LD_INT 3
33771: PUSH
33772: LD_INT 2
33774: PUSH
33775: EMPTY
33776: LIST
33777: LIST
33778: PUSH
33779: LD_INT 3
33781: PUSH
33782: LD_INT 3
33784: PUSH
33785: EMPTY
33786: LIST
33787: LIST
33788: PUSH
33789: LD_INT 2
33791: PUSH
33792: LD_INT 3
33794: PUSH
33795: EMPTY
33796: LIST
33797: LIST
33798: PUSH
33799: EMPTY
33800: LIST
33801: LIST
33802: LIST
33803: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
33804: LD_ADDR_VAR 0 20
33808: PUSH
33809: LD_INT 1
33811: PUSH
33812: LD_INT 3
33814: PUSH
33815: EMPTY
33816: LIST
33817: LIST
33818: PUSH
33819: LD_INT 0
33821: PUSH
33822: LD_INT 3
33824: PUSH
33825: EMPTY
33826: LIST
33827: LIST
33828: PUSH
33829: LD_INT 1
33831: NEG
33832: PUSH
33833: LD_INT 2
33835: PUSH
33836: EMPTY
33837: LIST
33838: LIST
33839: PUSH
33840: EMPTY
33841: LIST
33842: LIST
33843: LIST
33844: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
33845: LD_ADDR_VAR 0 21
33849: PUSH
33850: LD_INT 2
33852: NEG
33853: PUSH
33854: LD_INT 1
33856: PUSH
33857: EMPTY
33858: LIST
33859: LIST
33860: PUSH
33861: LD_INT 3
33863: NEG
33864: PUSH
33865: LD_INT 0
33867: PUSH
33868: EMPTY
33869: LIST
33870: LIST
33871: PUSH
33872: LD_INT 3
33874: NEG
33875: PUSH
33876: LD_INT 1
33878: NEG
33879: PUSH
33880: EMPTY
33881: LIST
33882: LIST
33883: PUSH
33884: EMPTY
33885: LIST
33886: LIST
33887: LIST
33888: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
33889: LD_ADDR_VAR 0 22
33893: PUSH
33894: LD_INT 2
33896: NEG
33897: PUSH
33898: LD_INT 3
33900: NEG
33901: PUSH
33902: EMPTY
33903: LIST
33904: LIST
33905: PUSH
33906: LD_INT 3
33908: NEG
33909: PUSH
33910: LD_INT 2
33912: NEG
33913: PUSH
33914: EMPTY
33915: LIST
33916: LIST
33917: PUSH
33918: LD_INT 3
33920: NEG
33921: PUSH
33922: LD_INT 3
33924: NEG
33925: PUSH
33926: EMPTY
33927: LIST
33928: LIST
33929: PUSH
33930: EMPTY
33931: LIST
33932: LIST
33933: LIST
33934: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
33935: LD_ADDR_VAR 0 23
33939: PUSH
33940: LD_INT 0
33942: PUSH
33943: LD_INT 3
33945: NEG
33946: PUSH
33947: EMPTY
33948: LIST
33949: LIST
33950: PUSH
33951: LD_INT 1
33953: NEG
33954: PUSH
33955: LD_INT 4
33957: NEG
33958: PUSH
33959: EMPTY
33960: LIST
33961: LIST
33962: PUSH
33963: LD_INT 1
33965: PUSH
33966: LD_INT 3
33968: NEG
33969: PUSH
33970: EMPTY
33971: LIST
33972: LIST
33973: PUSH
33974: EMPTY
33975: LIST
33976: LIST
33977: LIST
33978: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
33979: LD_ADDR_VAR 0 24
33983: PUSH
33984: LD_INT 3
33986: PUSH
33987: LD_INT 0
33989: PUSH
33990: EMPTY
33991: LIST
33992: LIST
33993: PUSH
33994: LD_INT 3
33996: PUSH
33997: LD_INT 1
33999: NEG
34000: PUSH
34001: EMPTY
34002: LIST
34003: LIST
34004: PUSH
34005: LD_INT 4
34007: PUSH
34008: LD_INT 1
34010: PUSH
34011: EMPTY
34012: LIST
34013: LIST
34014: PUSH
34015: EMPTY
34016: LIST
34017: LIST
34018: LIST
34019: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
34020: LD_ADDR_VAR 0 25
34024: PUSH
34025: LD_INT 3
34027: PUSH
34028: LD_INT 3
34030: PUSH
34031: EMPTY
34032: LIST
34033: LIST
34034: PUSH
34035: LD_INT 4
34037: PUSH
34038: LD_INT 3
34040: PUSH
34041: EMPTY
34042: LIST
34043: LIST
34044: PUSH
34045: LD_INT 3
34047: PUSH
34048: LD_INT 4
34050: PUSH
34051: EMPTY
34052: LIST
34053: LIST
34054: PUSH
34055: EMPTY
34056: LIST
34057: LIST
34058: LIST
34059: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
34060: LD_ADDR_VAR 0 26
34064: PUSH
34065: LD_INT 0
34067: PUSH
34068: LD_INT 3
34070: PUSH
34071: EMPTY
34072: LIST
34073: LIST
34074: PUSH
34075: LD_INT 1
34077: PUSH
34078: LD_INT 4
34080: PUSH
34081: EMPTY
34082: LIST
34083: LIST
34084: PUSH
34085: LD_INT 1
34087: NEG
34088: PUSH
34089: LD_INT 3
34091: PUSH
34092: EMPTY
34093: LIST
34094: LIST
34095: PUSH
34096: EMPTY
34097: LIST
34098: LIST
34099: LIST
34100: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
34101: LD_ADDR_VAR 0 27
34105: PUSH
34106: LD_INT 3
34108: NEG
34109: PUSH
34110: LD_INT 0
34112: PUSH
34113: EMPTY
34114: LIST
34115: LIST
34116: PUSH
34117: LD_INT 3
34119: NEG
34120: PUSH
34121: LD_INT 1
34123: PUSH
34124: EMPTY
34125: LIST
34126: LIST
34127: PUSH
34128: LD_INT 4
34130: NEG
34131: PUSH
34132: LD_INT 1
34134: NEG
34135: PUSH
34136: EMPTY
34137: LIST
34138: LIST
34139: PUSH
34140: EMPTY
34141: LIST
34142: LIST
34143: LIST
34144: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
34145: LD_ADDR_VAR 0 28
34149: PUSH
34150: LD_INT 3
34152: NEG
34153: PUSH
34154: LD_INT 3
34156: NEG
34157: PUSH
34158: EMPTY
34159: LIST
34160: LIST
34161: PUSH
34162: LD_INT 3
34164: NEG
34165: PUSH
34166: LD_INT 4
34168: NEG
34169: PUSH
34170: EMPTY
34171: LIST
34172: LIST
34173: PUSH
34174: LD_INT 4
34176: NEG
34177: PUSH
34178: LD_INT 3
34180: NEG
34181: PUSH
34182: EMPTY
34183: LIST
34184: LIST
34185: PUSH
34186: EMPTY
34187: LIST
34188: LIST
34189: LIST
34190: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
34191: LD_ADDR_VAR 0 29
34195: PUSH
34196: LD_INT 1
34198: NEG
34199: PUSH
34200: LD_INT 3
34202: NEG
34203: PUSH
34204: EMPTY
34205: LIST
34206: LIST
34207: PUSH
34208: LD_INT 0
34210: PUSH
34211: LD_INT 3
34213: NEG
34214: PUSH
34215: EMPTY
34216: LIST
34217: LIST
34218: PUSH
34219: LD_INT 1
34221: PUSH
34222: LD_INT 2
34224: NEG
34225: PUSH
34226: EMPTY
34227: LIST
34228: LIST
34229: PUSH
34230: LD_INT 1
34232: NEG
34233: PUSH
34234: LD_INT 4
34236: NEG
34237: PUSH
34238: EMPTY
34239: LIST
34240: LIST
34241: PUSH
34242: LD_INT 0
34244: PUSH
34245: LD_INT 4
34247: NEG
34248: PUSH
34249: EMPTY
34250: LIST
34251: LIST
34252: PUSH
34253: LD_INT 1
34255: PUSH
34256: LD_INT 3
34258: NEG
34259: PUSH
34260: EMPTY
34261: LIST
34262: LIST
34263: PUSH
34264: LD_INT 1
34266: NEG
34267: PUSH
34268: LD_INT 5
34270: NEG
34271: PUSH
34272: EMPTY
34273: LIST
34274: LIST
34275: PUSH
34276: LD_INT 0
34278: PUSH
34279: LD_INT 5
34281: NEG
34282: PUSH
34283: EMPTY
34284: LIST
34285: LIST
34286: PUSH
34287: LD_INT 1
34289: PUSH
34290: LD_INT 4
34292: NEG
34293: PUSH
34294: EMPTY
34295: LIST
34296: LIST
34297: PUSH
34298: LD_INT 1
34300: NEG
34301: PUSH
34302: LD_INT 6
34304: NEG
34305: PUSH
34306: EMPTY
34307: LIST
34308: LIST
34309: PUSH
34310: LD_INT 0
34312: PUSH
34313: LD_INT 6
34315: NEG
34316: PUSH
34317: EMPTY
34318: LIST
34319: LIST
34320: PUSH
34321: LD_INT 1
34323: PUSH
34324: LD_INT 5
34326: NEG
34327: PUSH
34328: EMPTY
34329: LIST
34330: LIST
34331: PUSH
34332: EMPTY
34333: LIST
34334: LIST
34335: LIST
34336: LIST
34337: LIST
34338: LIST
34339: LIST
34340: LIST
34341: LIST
34342: LIST
34343: LIST
34344: LIST
34345: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
34346: LD_ADDR_VAR 0 30
34350: PUSH
34351: LD_INT 2
34353: PUSH
34354: LD_INT 1
34356: NEG
34357: PUSH
34358: EMPTY
34359: LIST
34360: LIST
34361: PUSH
34362: LD_INT 3
34364: PUSH
34365: LD_INT 0
34367: PUSH
34368: EMPTY
34369: LIST
34370: LIST
34371: PUSH
34372: LD_INT 3
34374: PUSH
34375: LD_INT 1
34377: PUSH
34378: EMPTY
34379: LIST
34380: LIST
34381: PUSH
34382: LD_INT 3
34384: PUSH
34385: LD_INT 1
34387: NEG
34388: PUSH
34389: EMPTY
34390: LIST
34391: LIST
34392: PUSH
34393: LD_INT 4
34395: PUSH
34396: LD_INT 0
34398: PUSH
34399: EMPTY
34400: LIST
34401: LIST
34402: PUSH
34403: LD_INT 4
34405: PUSH
34406: LD_INT 1
34408: PUSH
34409: EMPTY
34410: LIST
34411: LIST
34412: PUSH
34413: LD_INT 4
34415: PUSH
34416: LD_INT 1
34418: NEG
34419: PUSH
34420: EMPTY
34421: LIST
34422: LIST
34423: PUSH
34424: LD_INT 5
34426: PUSH
34427: LD_INT 0
34429: PUSH
34430: EMPTY
34431: LIST
34432: LIST
34433: PUSH
34434: LD_INT 5
34436: PUSH
34437: LD_INT 1
34439: PUSH
34440: EMPTY
34441: LIST
34442: LIST
34443: PUSH
34444: LD_INT 5
34446: PUSH
34447: LD_INT 1
34449: NEG
34450: PUSH
34451: EMPTY
34452: LIST
34453: LIST
34454: PUSH
34455: LD_INT 6
34457: PUSH
34458: LD_INT 0
34460: PUSH
34461: EMPTY
34462: LIST
34463: LIST
34464: PUSH
34465: LD_INT 6
34467: PUSH
34468: LD_INT 1
34470: PUSH
34471: EMPTY
34472: LIST
34473: LIST
34474: PUSH
34475: EMPTY
34476: LIST
34477: LIST
34478: LIST
34479: LIST
34480: LIST
34481: LIST
34482: LIST
34483: LIST
34484: LIST
34485: LIST
34486: LIST
34487: LIST
34488: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
34489: LD_ADDR_VAR 0 31
34493: PUSH
34494: LD_INT 3
34496: PUSH
34497: LD_INT 2
34499: PUSH
34500: EMPTY
34501: LIST
34502: LIST
34503: PUSH
34504: LD_INT 3
34506: PUSH
34507: LD_INT 3
34509: PUSH
34510: EMPTY
34511: LIST
34512: LIST
34513: PUSH
34514: LD_INT 2
34516: PUSH
34517: LD_INT 3
34519: PUSH
34520: EMPTY
34521: LIST
34522: LIST
34523: PUSH
34524: LD_INT 4
34526: PUSH
34527: LD_INT 3
34529: PUSH
34530: EMPTY
34531: LIST
34532: LIST
34533: PUSH
34534: LD_INT 4
34536: PUSH
34537: LD_INT 4
34539: PUSH
34540: EMPTY
34541: LIST
34542: LIST
34543: PUSH
34544: LD_INT 3
34546: PUSH
34547: LD_INT 4
34549: PUSH
34550: EMPTY
34551: LIST
34552: LIST
34553: PUSH
34554: LD_INT 5
34556: PUSH
34557: LD_INT 4
34559: PUSH
34560: EMPTY
34561: LIST
34562: LIST
34563: PUSH
34564: LD_INT 5
34566: PUSH
34567: LD_INT 5
34569: PUSH
34570: EMPTY
34571: LIST
34572: LIST
34573: PUSH
34574: LD_INT 4
34576: PUSH
34577: LD_INT 5
34579: PUSH
34580: EMPTY
34581: LIST
34582: LIST
34583: PUSH
34584: LD_INT 6
34586: PUSH
34587: LD_INT 5
34589: PUSH
34590: EMPTY
34591: LIST
34592: LIST
34593: PUSH
34594: LD_INT 6
34596: PUSH
34597: LD_INT 6
34599: PUSH
34600: EMPTY
34601: LIST
34602: LIST
34603: PUSH
34604: LD_INT 5
34606: PUSH
34607: LD_INT 6
34609: PUSH
34610: EMPTY
34611: LIST
34612: LIST
34613: PUSH
34614: EMPTY
34615: LIST
34616: LIST
34617: LIST
34618: LIST
34619: LIST
34620: LIST
34621: LIST
34622: LIST
34623: LIST
34624: LIST
34625: LIST
34626: LIST
34627: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
34628: LD_ADDR_VAR 0 32
34632: PUSH
34633: LD_INT 1
34635: PUSH
34636: LD_INT 3
34638: PUSH
34639: EMPTY
34640: LIST
34641: LIST
34642: PUSH
34643: LD_INT 0
34645: PUSH
34646: LD_INT 3
34648: PUSH
34649: EMPTY
34650: LIST
34651: LIST
34652: PUSH
34653: LD_INT 1
34655: NEG
34656: PUSH
34657: LD_INT 2
34659: PUSH
34660: EMPTY
34661: LIST
34662: LIST
34663: PUSH
34664: LD_INT 1
34666: PUSH
34667: LD_INT 4
34669: PUSH
34670: EMPTY
34671: LIST
34672: LIST
34673: PUSH
34674: LD_INT 0
34676: PUSH
34677: LD_INT 4
34679: PUSH
34680: EMPTY
34681: LIST
34682: LIST
34683: PUSH
34684: LD_INT 1
34686: NEG
34687: PUSH
34688: LD_INT 3
34690: PUSH
34691: EMPTY
34692: LIST
34693: LIST
34694: PUSH
34695: LD_INT 1
34697: PUSH
34698: LD_INT 5
34700: PUSH
34701: EMPTY
34702: LIST
34703: LIST
34704: PUSH
34705: LD_INT 0
34707: PUSH
34708: LD_INT 5
34710: PUSH
34711: EMPTY
34712: LIST
34713: LIST
34714: PUSH
34715: LD_INT 1
34717: NEG
34718: PUSH
34719: LD_INT 4
34721: PUSH
34722: EMPTY
34723: LIST
34724: LIST
34725: PUSH
34726: LD_INT 1
34728: PUSH
34729: LD_INT 6
34731: PUSH
34732: EMPTY
34733: LIST
34734: LIST
34735: PUSH
34736: LD_INT 0
34738: PUSH
34739: LD_INT 6
34741: PUSH
34742: EMPTY
34743: LIST
34744: LIST
34745: PUSH
34746: LD_INT 1
34748: NEG
34749: PUSH
34750: LD_INT 5
34752: PUSH
34753: EMPTY
34754: LIST
34755: LIST
34756: PUSH
34757: EMPTY
34758: LIST
34759: LIST
34760: LIST
34761: LIST
34762: LIST
34763: LIST
34764: LIST
34765: LIST
34766: LIST
34767: LIST
34768: LIST
34769: LIST
34770: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
34771: LD_ADDR_VAR 0 33
34775: PUSH
34776: LD_INT 2
34778: NEG
34779: PUSH
34780: LD_INT 1
34782: PUSH
34783: EMPTY
34784: LIST
34785: LIST
34786: PUSH
34787: LD_INT 3
34789: NEG
34790: PUSH
34791: LD_INT 0
34793: PUSH
34794: EMPTY
34795: LIST
34796: LIST
34797: PUSH
34798: LD_INT 3
34800: NEG
34801: PUSH
34802: LD_INT 1
34804: NEG
34805: PUSH
34806: EMPTY
34807: LIST
34808: LIST
34809: PUSH
34810: LD_INT 3
34812: NEG
34813: PUSH
34814: LD_INT 1
34816: PUSH
34817: EMPTY
34818: LIST
34819: LIST
34820: PUSH
34821: LD_INT 4
34823: NEG
34824: PUSH
34825: LD_INT 0
34827: PUSH
34828: EMPTY
34829: LIST
34830: LIST
34831: PUSH
34832: LD_INT 4
34834: NEG
34835: PUSH
34836: LD_INT 1
34838: NEG
34839: PUSH
34840: EMPTY
34841: LIST
34842: LIST
34843: PUSH
34844: LD_INT 4
34846: NEG
34847: PUSH
34848: LD_INT 1
34850: PUSH
34851: EMPTY
34852: LIST
34853: LIST
34854: PUSH
34855: LD_INT 5
34857: NEG
34858: PUSH
34859: LD_INT 0
34861: PUSH
34862: EMPTY
34863: LIST
34864: LIST
34865: PUSH
34866: LD_INT 5
34868: NEG
34869: PUSH
34870: LD_INT 1
34872: NEG
34873: PUSH
34874: EMPTY
34875: LIST
34876: LIST
34877: PUSH
34878: LD_INT 5
34880: NEG
34881: PUSH
34882: LD_INT 1
34884: PUSH
34885: EMPTY
34886: LIST
34887: LIST
34888: PUSH
34889: LD_INT 6
34891: NEG
34892: PUSH
34893: LD_INT 0
34895: PUSH
34896: EMPTY
34897: LIST
34898: LIST
34899: PUSH
34900: LD_INT 6
34902: NEG
34903: PUSH
34904: LD_INT 1
34906: NEG
34907: PUSH
34908: EMPTY
34909: LIST
34910: LIST
34911: PUSH
34912: EMPTY
34913: LIST
34914: LIST
34915: LIST
34916: LIST
34917: LIST
34918: LIST
34919: LIST
34920: LIST
34921: LIST
34922: LIST
34923: LIST
34924: LIST
34925: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
34926: LD_ADDR_VAR 0 34
34930: PUSH
34931: LD_INT 2
34933: NEG
34934: PUSH
34935: LD_INT 3
34937: NEG
34938: PUSH
34939: EMPTY
34940: LIST
34941: LIST
34942: PUSH
34943: LD_INT 3
34945: NEG
34946: PUSH
34947: LD_INT 2
34949: NEG
34950: PUSH
34951: EMPTY
34952: LIST
34953: LIST
34954: PUSH
34955: LD_INT 3
34957: NEG
34958: PUSH
34959: LD_INT 3
34961: NEG
34962: PUSH
34963: EMPTY
34964: LIST
34965: LIST
34966: PUSH
34967: LD_INT 3
34969: NEG
34970: PUSH
34971: LD_INT 4
34973: NEG
34974: PUSH
34975: EMPTY
34976: LIST
34977: LIST
34978: PUSH
34979: LD_INT 4
34981: NEG
34982: PUSH
34983: LD_INT 3
34985: NEG
34986: PUSH
34987: EMPTY
34988: LIST
34989: LIST
34990: PUSH
34991: LD_INT 4
34993: NEG
34994: PUSH
34995: LD_INT 4
34997: NEG
34998: PUSH
34999: EMPTY
35000: LIST
35001: LIST
35002: PUSH
35003: LD_INT 4
35005: NEG
35006: PUSH
35007: LD_INT 5
35009: NEG
35010: PUSH
35011: EMPTY
35012: LIST
35013: LIST
35014: PUSH
35015: LD_INT 5
35017: NEG
35018: PUSH
35019: LD_INT 4
35021: NEG
35022: PUSH
35023: EMPTY
35024: LIST
35025: LIST
35026: PUSH
35027: LD_INT 5
35029: NEG
35030: PUSH
35031: LD_INT 5
35033: NEG
35034: PUSH
35035: EMPTY
35036: LIST
35037: LIST
35038: PUSH
35039: LD_INT 5
35041: NEG
35042: PUSH
35043: LD_INT 6
35045: NEG
35046: PUSH
35047: EMPTY
35048: LIST
35049: LIST
35050: PUSH
35051: LD_INT 6
35053: NEG
35054: PUSH
35055: LD_INT 5
35057: NEG
35058: PUSH
35059: EMPTY
35060: LIST
35061: LIST
35062: PUSH
35063: LD_INT 6
35065: NEG
35066: PUSH
35067: LD_INT 6
35069: NEG
35070: PUSH
35071: EMPTY
35072: LIST
35073: LIST
35074: PUSH
35075: EMPTY
35076: LIST
35077: LIST
35078: LIST
35079: LIST
35080: LIST
35081: LIST
35082: LIST
35083: LIST
35084: LIST
35085: LIST
35086: LIST
35087: LIST
35088: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
35089: LD_ADDR_VAR 0 41
35093: PUSH
35094: LD_INT 0
35096: PUSH
35097: LD_INT 2
35099: NEG
35100: PUSH
35101: EMPTY
35102: LIST
35103: LIST
35104: PUSH
35105: LD_INT 1
35107: NEG
35108: PUSH
35109: LD_INT 3
35111: NEG
35112: PUSH
35113: EMPTY
35114: LIST
35115: LIST
35116: PUSH
35117: LD_INT 1
35119: PUSH
35120: LD_INT 2
35122: NEG
35123: PUSH
35124: EMPTY
35125: LIST
35126: LIST
35127: PUSH
35128: EMPTY
35129: LIST
35130: LIST
35131: LIST
35132: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
35133: LD_ADDR_VAR 0 42
35137: PUSH
35138: LD_INT 2
35140: PUSH
35141: LD_INT 0
35143: PUSH
35144: EMPTY
35145: LIST
35146: LIST
35147: PUSH
35148: LD_INT 2
35150: PUSH
35151: LD_INT 1
35153: NEG
35154: PUSH
35155: EMPTY
35156: LIST
35157: LIST
35158: PUSH
35159: LD_INT 3
35161: PUSH
35162: LD_INT 1
35164: PUSH
35165: EMPTY
35166: LIST
35167: LIST
35168: PUSH
35169: EMPTY
35170: LIST
35171: LIST
35172: LIST
35173: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
35174: LD_ADDR_VAR 0 43
35178: PUSH
35179: LD_INT 2
35181: PUSH
35182: LD_INT 2
35184: PUSH
35185: EMPTY
35186: LIST
35187: LIST
35188: PUSH
35189: LD_INT 3
35191: PUSH
35192: LD_INT 2
35194: PUSH
35195: EMPTY
35196: LIST
35197: LIST
35198: PUSH
35199: LD_INT 2
35201: PUSH
35202: LD_INT 3
35204: PUSH
35205: EMPTY
35206: LIST
35207: LIST
35208: PUSH
35209: EMPTY
35210: LIST
35211: LIST
35212: LIST
35213: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
35214: LD_ADDR_VAR 0 44
35218: PUSH
35219: LD_INT 0
35221: PUSH
35222: LD_INT 2
35224: PUSH
35225: EMPTY
35226: LIST
35227: LIST
35228: PUSH
35229: LD_INT 1
35231: PUSH
35232: LD_INT 3
35234: PUSH
35235: EMPTY
35236: LIST
35237: LIST
35238: PUSH
35239: LD_INT 1
35241: NEG
35242: PUSH
35243: LD_INT 2
35245: PUSH
35246: EMPTY
35247: LIST
35248: LIST
35249: PUSH
35250: EMPTY
35251: LIST
35252: LIST
35253: LIST
35254: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
35255: LD_ADDR_VAR 0 45
35259: PUSH
35260: LD_INT 2
35262: NEG
35263: PUSH
35264: LD_INT 0
35266: PUSH
35267: EMPTY
35268: LIST
35269: LIST
35270: PUSH
35271: LD_INT 2
35273: NEG
35274: PUSH
35275: LD_INT 1
35277: PUSH
35278: EMPTY
35279: LIST
35280: LIST
35281: PUSH
35282: LD_INT 3
35284: NEG
35285: PUSH
35286: LD_INT 1
35288: NEG
35289: PUSH
35290: EMPTY
35291: LIST
35292: LIST
35293: PUSH
35294: EMPTY
35295: LIST
35296: LIST
35297: LIST
35298: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
35299: LD_ADDR_VAR 0 46
35303: PUSH
35304: LD_INT 2
35306: NEG
35307: PUSH
35308: LD_INT 2
35310: NEG
35311: PUSH
35312: EMPTY
35313: LIST
35314: LIST
35315: PUSH
35316: LD_INT 2
35318: NEG
35319: PUSH
35320: LD_INT 3
35322: NEG
35323: PUSH
35324: EMPTY
35325: LIST
35326: LIST
35327: PUSH
35328: LD_INT 3
35330: NEG
35331: PUSH
35332: LD_INT 2
35334: NEG
35335: PUSH
35336: EMPTY
35337: LIST
35338: LIST
35339: PUSH
35340: EMPTY
35341: LIST
35342: LIST
35343: LIST
35344: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
35345: LD_ADDR_VAR 0 47
35349: PUSH
35350: LD_INT 2
35352: NEG
35353: PUSH
35354: LD_INT 3
35356: NEG
35357: PUSH
35358: EMPTY
35359: LIST
35360: LIST
35361: PUSH
35362: LD_INT 1
35364: NEG
35365: PUSH
35366: LD_INT 3
35368: NEG
35369: PUSH
35370: EMPTY
35371: LIST
35372: LIST
35373: PUSH
35374: EMPTY
35375: LIST
35376: LIST
35377: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
35378: LD_ADDR_VAR 0 48
35382: PUSH
35383: LD_INT 1
35385: PUSH
35386: LD_INT 2
35388: NEG
35389: PUSH
35390: EMPTY
35391: LIST
35392: LIST
35393: PUSH
35394: LD_INT 2
35396: PUSH
35397: LD_INT 1
35399: NEG
35400: PUSH
35401: EMPTY
35402: LIST
35403: LIST
35404: PUSH
35405: EMPTY
35406: LIST
35407: LIST
35408: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
35409: LD_ADDR_VAR 0 49
35413: PUSH
35414: LD_INT 3
35416: PUSH
35417: LD_INT 1
35419: PUSH
35420: EMPTY
35421: LIST
35422: LIST
35423: PUSH
35424: LD_INT 3
35426: PUSH
35427: LD_INT 2
35429: PUSH
35430: EMPTY
35431: LIST
35432: LIST
35433: PUSH
35434: EMPTY
35435: LIST
35436: LIST
35437: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
35438: LD_ADDR_VAR 0 50
35442: PUSH
35443: LD_INT 2
35445: PUSH
35446: LD_INT 3
35448: PUSH
35449: EMPTY
35450: LIST
35451: LIST
35452: PUSH
35453: LD_INT 1
35455: PUSH
35456: LD_INT 3
35458: PUSH
35459: EMPTY
35460: LIST
35461: LIST
35462: PUSH
35463: EMPTY
35464: LIST
35465: LIST
35466: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
35467: LD_ADDR_VAR 0 51
35471: PUSH
35472: LD_INT 1
35474: NEG
35475: PUSH
35476: LD_INT 2
35478: PUSH
35479: EMPTY
35480: LIST
35481: LIST
35482: PUSH
35483: LD_INT 2
35485: NEG
35486: PUSH
35487: LD_INT 1
35489: PUSH
35490: EMPTY
35491: LIST
35492: LIST
35493: PUSH
35494: EMPTY
35495: LIST
35496: LIST
35497: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
35498: LD_ADDR_VAR 0 52
35502: PUSH
35503: LD_INT 3
35505: NEG
35506: PUSH
35507: LD_INT 1
35509: NEG
35510: PUSH
35511: EMPTY
35512: LIST
35513: LIST
35514: PUSH
35515: LD_INT 3
35517: NEG
35518: PUSH
35519: LD_INT 2
35521: NEG
35522: PUSH
35523: EMPTY
35524: LIST
35525: LIST
35526: PUSH
35527: EMPTY
35528: LIST
35529: LIST
35530: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
35531: LD_ADDR_VAR 0 53
35535: PUSH
35536: LD_INT 1
35538: NEG
35539: PUSH
35540: LD_INT 3
35542: NEG
35543: PUSH
35544: EMPTY
35545: LIST
35546: LIST
35547: PUSH
35548: LD_INT 0
35550: PUSH
35551: LD_INT 3
35553: NEG
35554: PUSH
35555: EMPTY
35556: LIST
35557: LIST
35558: PUSH
35559: LD_INT 1
35561: PUSH
35562: LD_INT 2
35564: NEG
35565: PUSH
35566: EMPTY
35567: LIST
35568: LIST
35569: PUSH
35570: EMPTY
35571: LIST
35572: LIST
35573: LIST
35574: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
35575: LD_ADDR_VAR 0 54
35579: PUSH
35580: LD_INT 2
35582: PUSH
35583: LD_INT 1
35585: NEG
35586: PUSH
35587: EMPTY
35588: LIST
35589: LIST
35590: PUSH
35591: LD_INT 3
35593: PUSH
35594: LD_INT 0
35596: PUSH
35597: EMPTY
35598: LIST
35599: LIST
35600: PUSH
35601: LD_INT 3
35603: PUSH
35604: LD_INT 1
35606: PUSH
35607: EMPTY
35608: LIST
35609: LIST
35610: PUSH
35611: EMPTY
35612: LIST
35613: LIST
35614: LIST
35615: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
35616: LD_ADDR_VAR 0 55
35620: PUSH
35621: LD_INT 3
35623: PUSH
35624: LD_INT 2
35626: PUSH
35627: EMPTY
35628: LIST
35629: LIST
35630: PUSH
35631: LD_INT 3
35633: PUSH
35634: LD_INT 3
35636: PUSH
35637: EMPTY
35638: LIST
35639: LIST
35640: PUSH
35641: LD_INT 2
35643: PUSH
35644: LD_INT 3
35646: PUSH
35647: EMPTY
35648: LIST
35649: LIST
35650: PUSH
35651: EMPTY
35652: LIST
35653: LIST
35654: LIST
35655: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
35656: LD_ADDR_VAR 0 56
35660: PUSH
35661: LD_INT 1
35663: PUSH
35664: LD_INT 3
35666: PUSH
35667: EMPTY
35668: LIST
35669: LIST
35670: PUSH
35671: LD_INT 0
35673: PUSH
35674: LD_INT 3
35676: PUSH
35677: EMPTY
35678: LIST
35679: LIST
35680: PUSH
35681: LD_INT 1
35683: NEG
35684: PUSH
35685: LD_INT 2
35687: PUSH
35688: EMPTY
35689: LIST
35690: LIST
35691: PUSH
35692: EMPTY
35693: LIST
35694: LIST
35695: LIST
35696: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
35697: LD_ADDR_VAR 0 57
35701: PUSH
35702: LD_INT 2
35704: NEG
35705: PUSH
35706: LD_INT 1
35708: PUSH
35709: EMPTY
35710: LIST
35711: LIST
35712: PUSH
35713: LD_INT 3
35715: NEG
35716: PUSH
35717: LD_INT 0
35719: PUSH
35720: EMPTY
35721: LIST
35722: LIST
35723: PUSH
35724: LD_INT 3
35726: NEG
35727: PUSH
35728: LD_INT 1
35730: NEG
35731: PUSH
35732: EMPTY
35733: LIST
35734: LIST
35735: PUSH
35736: EMPTY
35737: LIST
35738: LIST
35739: LIST
35740: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
35741: LD_ADDR_VAR 0 58
35745: PUSH
35746: LD_INT 2
35748: NEG
35749: PUSH
35750: LD_INT 3
35752: NEG
35753: PUSH
35754: EMPTY
35755: LIST
35756: LIST
35757: PUSH
35758: LD_INT 3
35760: NEG
35761: PUSH
35762: LD_INT 2
35764: NEG
35765: PUSH
35766: EMPTY
35767: LIST
35768: LIST
35769: PUSH
35770: LD_INT 3
35772: NEG
35773: PUSH
35774: LD_INT 3
35776: NEG
35777: PUSH
35778: EMPTY
35779: LIST
35780: LIST
35781: PUSH
35782: EMPTY
35783: LIST
35784: LIST
35785: LIST
35786: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
35787: LD_ADDR_VAR 0 59
35791: PUSH
35792: LD_INT 1
35794: NEG
35795: PUSH
35796: LD_INT 2
35798: NEG
35799: PUSH
35800: EMPTY
35801: LIST
35802: LIST
35803: PUSH
35804: LD_INT 0
35806: PUSH
35807: LD_INT 2
35809: NEG
35810: PUSH
35811: EMPTY
35812: LIST
35813: LIST
35814: PUSH
35815: LD_INT 1
35817: PUSH
35818: LD_INT 1
35820: NEG
35821: PUSH
35822: EMPTY
35823: LIST
35824: LIST
35825: PUSH
35826: EMPTY
35827: LIST
35828: LIST
35829: LIST
35830: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
35831: LD_ADDR_VAR 0 60
35835: PUSH
35836: LD_INT 1
35838: PUSH
35839: LD_INT 1
35841: NEG
35842: PUSH
35843: EMPTY
35844: LIST
35845: LIST
35846: PUSH
35847: LD_INT 2
35849: PUSH
35850: LD_INT 0
35852: PUSH
35853: EMPTY
35854: LIST
35855: LIST
35856: PUSH
35857: LD_INT 2
35859: PUSH
35860: LD_INT 1
35862: PUSH
35863: EMPTY
35864: LIST
35865: LIST
35866: PUSH
35867: EMPTY
35868: LIST
35869: LIST
35870: LIST
35871: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
35872: LD_ADDR_VAR 0 61
35876: PUSH
35877: LD_INT 2
35879: PUSH
35880: LD_INT 1
35882: PUSH
35883: EMPTY
35884: LIST
35885: LIST
35886: PUSH
35887: LD_INT 2
35889: PUSH
35890: LD_INT 2
35892: PUSH
35893: EMPTY
35894: LIST
35895: LIST
35896: PUSH
35897: LD_INT 1
35899: PUSH
35900: LD_INT 2
35902: PUSH
35903: EMPTY
35904: LIST
35905: LIST
35906: PUSH
35907: EMPTY
35908: LIST
35909: LIST
35910: LIST
35911: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
35912: LD_ADDR_VAR 0 62
35916: PUSH
35917: LD_INT 1
35919: PUSH
35920: LD_INT 2
35922: PUSH
35923: EMPTY
35924: LIST
35925: LIST
35926: PUSH
35927: LD_INT 0
35929: PUSH
35930: LD_INT 2
35932: PUSH
35933: EMPTY
35934: LIST
35935: LIST
35936: PUSH
35937: LD_INT 1
35939: NEG
35940: PUSH
35941: LD_INT 1
35943: PUSH
35944: EMPTY
35945: LIST
35946: LIST
35947: PUSH
35948: EMPTY
35949: LIST
35950: LIST
35951: LIST
35952: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
35953: LD_ADDR_VAR 0 63
35957: PUSH
35958: LD_INT 1
35960: NEG
35961: PUSH
35962: LD_INT 1
35964: PUSH
35965: EMPTY
35966: LIST
35967: LIST
35968: PUSH
35969: LD_INT 2
35971: NEG
35972: PUSH
35973: LD_INT 0
35975: PUSH
35976: EMPTY
35977: LIST
35978: LIST
35979: PUSH
35980: LD_INT 2
35982: NEG
35983: PUSH
35984: LD_INT 1
35986: NEG
35987: PUSH
35988: EMPTY
35989: LIST
35990: LIST
35991: PUSH
35992: EMPTY
35993: LIST
35994: LIST
35995: LIST
35996: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35997: LD_ADDR_VAR 0 64
36001: PUSH
36002: LD_INT 1
36004: NEG
36005: PUSH
36006: LD_INT 2
36008: NEG
36009: PUSH
36010: EMPTY
36011: LIST
36012: LIST
36013: PUSH
36014: LD_INT 2
36016: NEG
36017: PUSH
36018: LD_INT 1
36020: NEG
36021: PUSH
36022: EMPTY
36023: LIST
36024: LIST
36025: PUSH
36026: LD_INT 2
36028: NEG
36029: PUSH
36030: LD_INT 2
36032: NEG
36033: PUSH
36034: EMPTY
36035: LIST
36036: LIST
36037: PUSH
36038: EMPTY
36039: LIST
36040: LIST
36041: LIST
36042: ST_TO_ADDR
// end ; 2 :
36043: GO 39309
36045: LD_INT 2
36047: DOUBLE
36048: EQUAL
36049: IFTRUE 36053
36051: GO 39308
36053: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
36054: LD_ADDR_VAR 0 29
36058: PUSH
36059: LD_INT 4
36061: PUSH
36062: LD_INT 0
36064: PUSH
36065: EMPTY
36066: LIST
36067: LIST
36068: PUSH
36069: LD_INT 4
36071: PUSH
36072: LD_INT 1
36074: NEG
36075: PUSH
36076: EMPTY
36077: LIST
36078: LIST
36079: PUSH
36080: LD_INT 5
36082: PUSH
36083: LD_INT 0
36085: PUSH
36086: EMPTY
36087: LIST
36088: LIST
36089: PUSH
36090: LD_INT 5
36092: PUSH
36093: LD_INT 1
36095: PUSH
36096: EMPTY
36097: LIST
36098: LIST
36099: PUSH
36100: LD_INT 4
36102: PUSH
36103: LD_INT 1
36105: PUSH
36106: EMPTY
36107: LIST
36108: LIST
36109: PUSH
36110: LD_INT 3
36112: PUSH
36113: LD_INT 0
36115: PUSH
36116: EMPTY
36117: LIST
36118: LIST
36119: PUSH
36120: LD_INT 3
36122: PUSH
36123: LD_INT 1
36125: NEG
36126: PUSH
36127: EMPTY
36128: LIST
36129: LIST
36130: PUSH
36131: LD_INT 3
36133: PUSH
36134: LD_INT 2
36136: NEG
36137: PUSH
36138: EMPTY
36139: LIST
36140: LIST
36141: PUSH
36142: LD_INT 5
36144: PUSH
36145: LD_INT 2
36147: PUSH
36148: EMPTY
36149: LIST
36150: LIST
36151: PUSH
36152: LD_INT 3
36154: PUSH
36155: LD_INT 3
36157: PUSH
36158: EMPTY
36159: LIST
36160: LIST
36161: PUSH
36162: LD_INT 3
36164: PUSH
36165: LD_INT 2
36167: PUSH
36168: EMPTY
36169: LIST
36170: LIST
36171: PUSH
36172: LD_INT 4
36174: PUSH
36175: LD_INT 3
36177: PUSH
36178: EMPTY
36179: LIST
36180: LIST
36181: PUSH
36182: LD_INT 4
36184: PUSH
36185: LD_INT 4
36187: PUSH
36188: EMPTY
36189: LIST
36190: LIST
36191: PUSH
36192: LD_INT 3
36194: PUSH
36195: LD_INT 4
36197: PUSH
36198: EMPTY
36199: LIST
36200: LIST
36201: PUSH
36202: LD_INT 2
36204: PUSH
36205: LD_INT 3
36207: PUSH
36208: EMPTY
36209: LIST
36210: LIST
36211: PUSH
36212: LD_INT 2
36214: PUSH
36215: LD_INT 2
36217: PUSH
36218: EMPTY
36219: LIST
36220: LIST
36221: PUSH
36222: LD_INT 4
36224: PUSH
36225: LD_INT 2
36227: PUSH
36228: EMPTY
36229: LIST
36230: LIST
36231: PUSH
36232: LD_INT 2
36234: PUSH
36235: LD_INT 4
36237: PUSH
36238: EMPTY
36239: LIST
36240: LIST
36241: PUSH
36242: LD_INT 0
36244: PUSH
36245: LD_INT 4
36247: PUSH
36248: EMPTY
36249: LIST
36250: LIST
36251: PUSH
36252: LD_INT 0
36254: PUSH
36255: LD_INT 3
36257: PUSH
36258: EMPTY
36259: LIST
36260: LIST
36261: PUSH
36262: LD_INT 1
36264: PUSH
36265: LD_INT 4
36267: PUSH
36268: EMPTY
36269: LIST
36270: LIST
36271: PUSH
36272: LD_INT 1
36274: PUSH
36275: LD_INT 5
36277: PUSH
36278: EMPTY
36279: LIST
36280: LIST
36281: PUSH
36282: LD_INT 0
36284: PUSH
36285: LD_INT 5
36287: PUSH
36288: EMPTY
36289: LIST
36290: LIST
36291: PUSH
36292: LD_INT 1
36294: NEG
36295: PUSH
36296: LD_INT 4
36298: PUSH
36299: EMPTY
36300: LIST
36301: LIST
36302: PUSH
36303: LD_INT 1
36305: NEG
36306: PUSH
36307: LD_INT 3
36309: PUSH
36310: EMPTY
36311: LIST
36312: LIST
36313: PUSH
36314: LD_INT 2
36316: PUSH
36317: LD_INT 5
36319: PUSH
36320: EMPTY
36321: LIST
36322: LIST
36323: PUSH
36324: LD_INT 2
36326: NEG
36327: PUSH
36328: LD_INT 3
36330: PUSH
36331: EMPTY
36332: LIST
36333: LIST
36334: PUSH
36335: LD_INT 3
36337: NEG
36338: PUSH
36339: LD_INT 0
36341: PUSH
36342: EMPTY
36343: LIST
36344: LIST
36345: PUSH
36346: LD_INT 3
36348: NEG
36349: PUSH
36350: LD_INT 1
36352: NEG
36353: PUSH
36354: EMPTY
36355: LIST
36356: LIST
36357: PUSH
36358: LD_INT 2
36360: NEG
36361: PUSH
36362: LD_INT 0
36364: PUSH
36365: EMPTY
36366: LIST
36367: LIST
36368: PUSH
36369: LD_INT 2
36371: NEG
36372: PUSH
36373: LD_INT 1
36375: PUSH
36376: EMPTY
36377: LIST
36378: LIST
36379: PUSH
36380: LD_INT 3
36382: NEG
36383: PUSH
36384: LD_INT 1
36386: PUSH
36387: EMPTY
36388: LIST
36389: LIST
36390: PUSH
36391: LD_INT 4
36393: NEG
36394: PUSH
36395: LD_INT 0
36397: PUSH
36398: EMPTY
36399: LIST
36400: LIST
36401: PUSH
36402: LD_INT 4
36404: NEG
36405: PUSH
36406: LD_INT 1
36408: NEG
36409: PUSH
36410: EMPTY
36411: LIST
36412: LIST
36413: PUSH
36414: LD_INT 4
36416: NEG
36417: PUSH
36418: LD_INT 2
36420: NEG
36421: PUSH
36422: EMPTY
36423: LIST
36424: LIST
36425: PUSH
36426: LD_INT 2
36428: NEG
36429: PUSH
36430: LD_INT 2
36432: PUSH
36433: EMPTY
36434: LIST
36435: LIST
36436: PUSH
36437: LD_INT 4
36439: NEG
36440: PUSH
36441: LD_INT 4
36443: NEG
36444: PUSH
36445: EMPTY
36446: LIST
36447: LIST
36448: PUSH
36449: LD_INT 4
36451: NEG
36452: PUSH
36453: LD_INT 5
36455: NEG
36456: PUSH
36457: EMPTY
36458: LIST
36459: LIST
36460: PUSH
36461: LD_INT 3
36463: NEG
36464: PUSH
36465: LD_INT 4
36467: NEG
36468: PUSH
36469: EMPTY
36470: LIST
36471: LIST
36472: PUSH
36473: LD_INT 3
36475: NEG
36476: PUSH
36477: LD_INT 3
36479: NEG
36480: PUSH
36481: EMPTY
36482: LIST
36483: LIST
36484: PUSH
36485: LD_INT 4
36487: NEG
36488: PUSH
36489: LD_INT 3
36491: NEG
36492: PUSH
36493: EMPTY
36494: LIST
36495: LIST
36496: PUSH
36497: LD_INT 5
36499: NEG
36500: PUSH
36501: LD_INT 4
36503: NEG
36504: PUSH
36505: EMPTY
36506: LIST
36507: LIST
36508: PUSH
36509: LD_INT 5
36511: NEG
36512: PUSH
36513: LD_INT 5
36515: NEG
36516: PUSH
36517: EMPTY
36518: LIST
36519: LIST
36520: PUSH
36521: LD_INT 3
36523: NEG
36524: PUSH
36525: LD_INT 5
36527: NEG
36528: PUSH
36529: EMPTY
36530: LIST
36531: LIST
36532: PUSH
36533: LD_INT 5
36535: NEG
36536: PUSH
36537: LD_INT 3
36539: NEG
36540: PUSH
36541: EMPTY
36542: LIST
36543: LIST
36544: PUSH
36545: EMPTY
36546: LIST
36547: LIST
36548: LIST
36549: LIST
36550: LIST
36551: LIST
36552: LIST
36553: LIST
36554: LIST
36555: LIST
36556: LIST
36557: LIST
36558: LIST
36559: LIST
36560: LIST
36561: LIST
36562: LIST
36563: LIST
36564: LIST
36565: LIST
36566: LIST
36567: LIST
36568: LIST
36569: LIST
36570: LIST
36571: LIST
36572: LIST
36573: LIST
36574: LIST
36575: LIST
36576: LIST
36577: LIST
36578: LIST
36579: LIST
36580: LIST
36581: LIST
36582: LIST
36583: LIST
36584: LIST
36585: LIST
36586: LIST
36587: LIST
36588: LIST
36589: LIST
36590: LIST
36591: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
36592: LD_ADDR_VAR 0 30
36596: PUSH
36597: LD_INT 4
36599: PUSH
36600: LD_INT 4
36602: PUSH
36603: EMPTY
36604: LIST
36605: LIST
36606: PUSH
36607: LD_INT 4
36609: PUSH
36610: LD_INT 3
36612: PUSH
36613: EMPTY
36614: LIST
36615: LIST
36616: PUSH
36617: LD_INT 5
36619: PUSH
36620: LD_INT 4
36622: PUSH
36623: EMPTY
36624: LIST
36625: LIST
36626: PUSH
36627: LD_INT 5
36629: PUSH
36630: LD_INT 5
36632: PUSH
36633: EMPTY
36634: LIST
36635: LIST
36636: PUSH
36637: LD_INT 4
36639: PUSH
36640: LD_INT 5
36642: PUSH
36643: EMPTY
36644: LIST
36645: LIST
36646: PUSH
36647: LD_INT 3
36649: PUSH
36650: LD_INT 4
36652: PUSH
36653: EMPTY
36654: LIST
36655: LIST
36656: PUSH
36657: LD_INT 3
36659: PUSH
36660: LD_INT 3
36662: PUSH
36663: EMPTY
36664: LIST
36665: LIST
36666: PUSH
36667: LD_INT 5
36669: PUSH
36670: LD_INT 3
36672: PUSH
36673: EMPTY
36674: LIST
36675: LIST
36676: PUSH
36677: LD_INT 3
36679: PUSH
36680: LD_INT 5
36682: PUSH
36683: EMPTY
36684: LIST
36685: LIST
36686: PUSH
36687: LD_INT 0
36689: PUSH
36690: LD_INT 3
36692: PUSH
36693: EMPTY
36694: LIST
36695: LIST
36696: PUSH
36697: LD_INT 0
36699: PUSH
36700: LD_INT 2
36702: PUSH
36703: EMPTY
36704: LIST
36705: LIST
36706: PUSH
36707: LD_INT 1
36709: PUSH
36710: LD_INT 3
36712: PUSH
36713: EMPTY
36714: LIST
36715: LIST
36716: PUSH
36717: LD_INT 1
36719: PUSH
36720: LD_INT 4
36722: PUSH
36723: EMPTY
36724: LIST
36725: LIST
36726: PUSH
36727: LD_INT 0
36729: PUSH
36730: LD_INT 4
36732: PUSH
36733: EMPTY
36734: LIST
36735: LIST
36736: PUSH
36737: LD_INT 1
36739: NEG
36740: PUSH
36741: LD_INT 3
36743: PUSH
36744: EMPTY
36745: LIST
36746: LIST
36747: PUSH
36748: LD_INT 1
36750: NEG
36751: PUSH
36752: LD_INT 2
36754: PUSH
36755: EMPTY
36756: LIST
36757: LIST
36758: PUSH
36759: LD_INT 2
36761: PUSH
36762: LD_INT 4
36764: PUSH
36765: EMPTY
36766: LIST
36767: LIST
36768: PUSH
36769: LD_INT 2
36771: NEG
36772: PUSH
36773: LD_INT 2
36775: PUSH
36776: EMPTY
36777: LIST
36778: LIST
36779: PUSH
36780: LD_INT 4
36782: NEG
36783: PUSH
36784: LD_INT 0
36786: PUSH
36787: EMPTY
36788: LIST
36789: LIST
36790: PUSH
36791: LD_INT 4
36793: NEG
36794: PUSH
36795: LD_INT 1
36797: NEG
36798: PUSH
36799: EMPTY
36800: LIST
36801: LIST
36802: PUSH
36803: LD_INT 3
36805: NEG
36806: PUSH
36807: LD_INT 0
36809: PUSH
36810: EMPTY
36811: LIST
36812: LIST
36813: PUSH
36814: LD_INT 3
36816: NEG
36817: PUSH
36818: LD_INT 1
36820: PUSH
36821: EMPTY
36822: LIST
36823: LIST
36824: PUSH
36825: LD_INT 4
36827: NEG
36828: PUSH
36829: LD_INT 1
36831: PUSH
36832: EMPTY
36833: LIST
36834: LIST
36835: PUSH
36836: LD_INT 5
36838: NEG
36839: PUSH
36840: LD_INT 0
36842: PUSH
36843: EMPTY
36844: LIST
36845: LIST
36846: PUSH
36847: LD_INT 5
36849: NEG
36850: PUSH
36851: LD_INT 1
36853: NEG
36854: PUSH
36855: EMPTY
36856: LIST
36857: LIST
36858: PUSH
36859: LD_INT 5
36861: NEG
36862: PUSH
36863: LD_INT 2
36865: NEG
36866: PUSH
36867: EMPTY
36868: LIST
36869: LIST
36870: PUSH
36871: LD_INT 3
36873: NEG
36874: PUSH
36875: LD_INT 2
36877: PUSH
36878: EMPTY
36879: LIST
36880: LIST
36881: PUSH
36882: LD_INT 3
36884: NEG
36885: PUSH
36886: LD_INT 3
36888: NEG
36889: PUSH
36890: EMPTY
36891: LIST
36892: LIST
36893: PUSH
36894: LD_INT 3
36896: NEG
36897: PUSH
36898: LD_INT 4
36900: NEG
36901: PUSH
36902: EMPTY
36903: LIST
36904: LIST
36905: PUSH
36906: LD_INT 2
36908: NEG
36909: PUSH
36910: LD_INT 3
36912: NEG
36913: PUSH
36914: EMPTY
36915: LIST
36916: LIST
36917: PUSH
36918: LD_INT 2
36920: NEG
36921: PUSH
36922: LD_INT 2
36924: NEG
36925: PUSH
36926: EMPTY
36927: LIST
36928: LIST
36929: PUSH
36930: LD_INT 3
36932: NEG
36933: PUSH
36934: LD_INT 2
36936: NEG
36937: PUSH
36938: EMPTY
36939: LIST
36940: LIST
36941: PUSH
36942: LD_INT 4
36944: NEG
36945: PUSH
36946: LD_INT 3
36948: NEG
36949: PUSH
36950: EMPTY
36951: LIST
36952: LIST
36953: PUSH
36954: LD_INT 4
36956: NEG
36957: PUSH
36958: LD_INT 4
36960: NEG
36961: PUSH
36962: EMPTY
36963: LIST
36964: LIST
36965: PUSH
36966: LD_INT 2
36968: NEG
36969: PUSH
36970: LD_INT 4
36972: NEG
36973: PUSH
36974: EMPTY
36975: LIST
36976: LIST
36977: PUSH
36978: LD_INT 4
36980: NEG
36981: PUSH
36982: LD_INT 2
36984: NEG
36985: PUSH
36986: EMPTY
36987: LIST
36988: LIST
36989: PUSH
36990: LD_INT 0
36992: PUSH
36993: LD_INT 4
36995: NEG
36996: PUSH
36997: EMPTY
36998: LIST
36999: LIST
37000: PUSH
37001: LD_INT 0
37003: PUSH
37004: LD_INT 5
37006: NEG
37007: PUSH
37008: EMPTY
37009: LIST
37010: LIST
37011: PUSH
37012: LD_INT 1
37014: PUSH
37015: LD_INT 4
37017: NEG
37018: PUSH
37019: EMPTY
37020: LIST
37021: LIST
37022: PUSH
37023: LD_INT 1
37025: PUSH
37026: LD_INT 3
37028: NEG
37029: PUSH
37030: EMPTY
37031: LIST
37032: LIST
37033: PUSH
37034: LD_INT 0
37036: PUSH
37037: LD_INT 3
37039: NEG
37040: PUSH
37041: EMPTY
37042: LIST
37043: LIST
37044: PUSH
37045: LD_INT 1
37047: NEG
37048: PUSH
37049: LD_INT 4
37051: NEG
37052: PUSH
37053: EMPTY
37054: LIST
37055: LIST
37056: PUSH
37057: LD_INT 1
37059: NEG
37060: PUSH
37061: LD_INT 5
37063: NEG
37064: PUSH
37065: EMPTY
37066: LIST
37067: LIST
37068: PUSH
37069: LD_INT 2
37071: PUSH
37072: LD_INT 3
37074: NEG
37075: PUSH
37076: EMPTY
37077: LIST
37078: LIST
37079: PUSH
37080: LD_INT 2
37082: NEG
37083: PUSH
37084: LD_INT 5
37086: NEG
37087: PUSH
37088: EMPTY
37089: LIST
37090: LIST
37091: PUSH
37092: EMPTY
37093: LIST
37094: LIST
37095: LIST
37096: LIST
37097: LIST
37098: LIST
37099: LIST
37100: LIST
37101: LIST
37102: LIST
37103: LIST
37104: LIST
37105: LIST
37106: LIST
37107: LIST
37108: LIST
37109: LIST
37110: LIST
37111: LIST
37112: LIST
37113: LIST
37114: LIST
37115: LIST
37116: LIST
37117: LIST
37118: LIST
37119: LIST
37120: LIST
37121: LIST
37122: LIST
37123: LIST
37124: LIST
37125: LIST
37126: LIST
37127: LIST
37128: LIST
37129: LIST
37130: LIST
37131: LIST
37132: LIST
37133: LIST
37134: LIST
37135: LIST
37136: LIST
37137: LIST
37138: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
37139: LD_ADDR_VAR 0 31
37143: PUSH
37144: LD_INT 0
37146: PUSH
37147: LD_INT 4
37149: PUSH
37150: EMPTY
37151: LIST
37152: LIST
37153: PUSH
37154: LD_INT 0
37156: PUSH
37157: LD_INT 3
37159: PUSH
37160: EMPTY
37161: LIST
37162: LIST
37163: PUSH
37164: LD_INT 1
37166: PUSH
37167: LD_INT 4
37169: PUSH
37170: EMPTY
37171: LIST
37172: LIST
37173: PUSH
37174: LD_INT 1
37176: PUSH
37177: LD_INT 5
37179: PUSH
37180: EMPTY
37181: LIST
37182: LIST
37183: PUSH
37184: LD_INT 0
37186: PUSH
37187: LD_INT 5
37189: PUSH
37190: EMPTY
37191: LIST
37192: LIST
37193: PUSH
37194: LD_INT 1
37196: NEG
37197: PUSH
37198: LD_INT 4
37200: PUSH
37201: EMPTY
37202: LIST
37203: LIST
37204: PUSH
37205: LD_INT 1
37207: NEG
37208: PUSH
37209: LD_INT 3
37211: PUSH
37212: EMPTY
37213: LIST
37214: LIST
37215: PUSH
37216: LD_INT 2
37218: PUSH
37219: LD_INT 5
37221: PUSH
37222: EMPTY
37223: LIST
37224: LIST
37225: PUSH
37226: LD_INT 2
37228: NEG
37229: PUSH
37230: LD_INT 3
37232: PUSH
37233: EMPTY
37234: LIST
37235: LIST
37236: PUSH
37237: LD_INT 3
37239: NEG
37240: PUSH
37241: LD_INT 0
37243: PUSH
37244: EMPTY
37245: LIST
37246: LIST
37247: PUSH
37248: LD_INT 3
37250: NEG
37251: PUSH
37252: LD_INT 1
37254: NEG
37255: PUSH
37256: EMPTY
37257: LIST
37258: LIST
37259: PUSH
37260: LD_INT 2
37262: NEG
37263: PUSH
37264: LD_INT 0
37266: PUSH
37267: EMPTY
37268: LIST
37269: LIST
37270: PUSH
37271: LD_INT 2
37273: NEG
37274: PUSH
37275: LD_INT 1
37277: PUSH
37278: EMPTY
37279: LIST
37280: LIST
37281: PUSH
37282: LD_INT 3
37284: NEG
37285: PUSH
37286: LD_INT 1
37288: PUSH
37289: EMPTY
37290: LIST
37291: LIST
37292: PUSH
37293: LD_INT 4
37295: NEG
37296: PUSH
37297: LD_INT 0
37299: PUSH
37300: EMPTY
37301: LIST
37302: LIST
37303: PUSH
37304: LD_INT 4
37306: NEG
37307: PUSH
37308: LD_INT 1
37310: NEG
37311: PUSH
37312: EMPTY
37313: LIST
37314: LIST
37315: PUSH
37316: LD_INT 4
37318: NEG
37319: PUSH
37320: LD_INT 2
37322: NEG
37323: PUSH
37324: EMPTY
37325: LIST
37326: LIST
37327: PUSH
37328: LD_INT 2
37330: NEG
37331: PUSH
37332: LD_INT 2
37334: PUSH
37335: EMPTY
37336: LIST
37337: LIST
37338: PUSH
37339: LD_INT 4
37341: NEG
37342: PUSH
37343: LD_INT 4
37345: NEG
37346: PUSH
37347: EMPTY
37348: LIST
37349: LIST
37350: PUSH
37351: LD_INT 4
37353: NEG
37354: PUSH
37355: LD_INT 5
37357: NEG
37358: PUSH
37359: EMPTY
37360: LIST
37361: LIST
37362: PUSH
37363: LD_INT 3
37365: NEG
37366: PUSH
37367: LD_INT 4
37369: NEG
37370: PUSH
37371: EMPTY
37372: LIST
37373: LIST
37374: PUSH
37375: LD_INT 3
37377: NEG
37378: PUSH
37379: LD_INT 3
37381: NEG
37382: PUSH
37383: EMPTY
37384: LIST
37385: LIST
37386: PUSH
37387: LD_INT 4
37389: NEG
37390: PUSH
37391: LD_INT 3
37393: NEG
37394: PUSH
37395: EMPTY
37396: LIST
37397: LIST
37398: PUSH
37399: LD_INT 5
37401: NEG
37402: PUSH
37403: LD_INT 4
37405: NEG
37406: PUSH
37407: EMPTY
37408: LIST
37409: LIST
37410: PUSH
37411: LD_INT 5
37413: NEG
37414: PUSH
37415: LD_INT 5
37417: NEG
37418: PUSH
37419: EMPTY
37420: LIST
37421: LIST
37422: PUSH
37423: LD_INT 3
37425: NEG
37426: PUSH
37427: LD_INT 5
37429: NEG
37430: PUSH
37431: EMPTY
37432: LIST
37433: LIST
37434: PUSH
37435: LD_INT 5
37437: NEG
37438: PUSH
37439: LD_INT 3
37441: NEG
37442: PUSH
37443: EMPTY
37444: LIST
37445: LIST
37446: PUSH
37447: LD_INT 0
37449: PUSH
37450: LD_INT 3
37452: NEG
37453: PUSH
37454: EMPTY
37455: LIST
37456: LIST
37457: PUSH
37458: LD_INT 0
37460: PUSH
37461: LD_INT 4
37463: NEG
37464: PUSH
37465: EMPTY
37466: LIST
37467: LIST
37468: PUSH
37469: LD_INT 1
37471: PUSH
37472: LD_INT 3
37474: NEG
37475: PUSH
37476: EMPTY
37477: LIST
37478: LIST
37479: PUSH
37480: LD_INT 1
37482: PUSH
37483: LD_INT 2
37485: NEG
37486: PUSH
37487: EMPTY
37488: LIST
37489: LIST
37490: PUSH
37491: LD_INT 0
37493: PUSH
37494: LD_INT 2
37496: NEG
37497: PUSH
37498: EMPTY
37499: LIST
37500: LIST
37501: PUSH
37502: LD_INT 1
37504: NEG
37505: PUSH
37506: LD_INT 3
37508: NEG
37509: PUSH
37510: EMPTY
37511: LIST
37512: LIST
37513: PUSH
37514: LD_INT 1
37516: NEG
37517: PUSH
37518: LD_INT 4
37520: NEG
37521: PUSH
37522: EMPTY
37523: LIST
37524: LIST
37525: PUSH
37526: LD_INT 2
37528: PUSH
37529: LD_INT 2
37531: NEG
37532: PUSH
37533: EMPTY
37534: LIST
37535: LIST
37536: PUSH
37537: LD_INT 2
37539: NEG
37540: PUSH
37541: LD_INT 4
37543: NEG
37544: PUSH
37545: EMPTY
37546: LIST
37547: LIST
37548: PUSH
37549: LD_INT 4
37551: PUSH
37552: LD_INT 0
37554: PUSH
37555: EMPTY
37556: LIST
37557: LIST
37558: PUSH
37559: LD_INT 4
37561: PUSH
37562: LD_INT 1
37564: NEG
37565: PUSH
37566: EMPTY
37567: LIST
37568: LIST
37569: PUSH
37570: LD_INT 5
37572: PUSH
37573: LD_INT 0
37575: PUSH
37576: EMPTY
37577: LIST
37578: LIST
37579: PUSH
37580: LD_INT 5
37582: PUSH
37583: LD_INT 1
37585: PUSH
37586: EMPTY
37587: LIST
37588: LIST
37589: PUSH
37590: LD_INT 4
37592: PUSH
37593: LD_INT 1
37595: PUSH
37596: EMPTY
37597: LIST
37598: LIST
37599: PUSH
37600: LD_INT 3
37602: PUSH
37603: LD_INT 0
37605: PUSH
37606: EMPTY
37607: LIST
37608: LIST
37609: PUSH
37610: LD_INT 3
37612: PUSH
37613: LD_INT 1
37615: NEG
37616: PUSH
37617: EMPTY
37618: LIST
37619: LIST
37620: PUSH
37621: LD_INT 3
37623: PUSH
37624: LD_INT 2
37626: NEG
37627: PUSH
37628: EMPTY
37629: LIST
37630: LIST
37631: PUSH
37632: LD_INT 5
37634: PUSH
37635: LD_INT 2
37637: PUSH
37638: EMPTY
37639: LIST
37640: LIST
37641: PUSH
37642: EMPTY
37643: LIST
37644: LIST
37645: LIST
37646: LIST
37647: LIST
37648: LIST
37649: LIST
37650: LIST
37651: LIST
37652: LIST
37653: LIST
37654: LIST
37655: LIST
37656: LIST
37657: LIST
37658: LIST
37659: LIST
37660: LIST
37661: LIST
37662: LIST
37663: LIST
37664: LIST
37665: LIST
37666: LIST
37667: LIST
37668: LIST
37669: LIST
37670: LIST
37671: LIST
37672: LIST
37673: LIST
37674: LIST
37675: LIST
37676: LIST
37677: LIST
37678: LIST
37679: LIST
37680: LIST
37681: LIST
37682: LIST
37683: LIST
37684: LIST
37685: LIST
37686: LIST
37687: LIST
37688: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
37689: LD_ADDR_VAR 0 32
37693: PUSH
37694: LD_INT 4
37696: NEG
37697: PUSH
37698: LD_INT 0
37700: PUSH
37701: EMPTY
37702: LIST
37703: LIST
37704: PUSH
37705: LD_INT 4
37707: NEG
37708: PUSH
37709: LD_INT 1
37711: NEG
37712: PUSH
37713: EMPTY
37714: LIST
37715: LIST
37716: PUSH
37717: LD_INT 3
37719: NEG
37720: PUSH
37721: LD_INT 0
37723: PUSH
37724: EMPTY
37725: LIST
37726: LIST
37727: PUSH
37728: LD_INT 3
37730: NEG
37731: PUSH
37732: LD_INT 1
37734: PUSH
37735: EMPTY
37736: LIST
37737: LIST
37738: PUSH
37739: LD_INT 4
37741: NEG
37742: PUSH
37743: LD_INT 1
37745: PUSH
37746: EMPTY
37747: LIST
37748: LIST
37749: PUSH
37750: LD_INT 5
37752: NEG
37753: PUSH
37754: LD_INT 0
37756: PUSH
37757: EMPTY
37758: LIST
37759: LIST
37760: PUSH
37761: LD_INT 5
37763: NEG
37764: PUSH
37765: LD_INT 1
37767: NEG
37768: PUSH
37769: EMPTY
37770: LIST
37771: LIST
37772: PUSH
37773: LD_INT 5
37775: NEG
37776: PUSH
37777: LD_INT 2
37779: NEG
37780: PUSH
37781: EMPTY
37782: LIST
37783: LIST
37784: PUSH
37785: LD_INT 3
37787: NEG
37788: PUSH
37789: LD_INT 2
37791: PUSH
37792: EMPTY
37793: LIST
37794: LIST
37795: PUSH
37796: LD_INT 3
37798: NEG
37799: PUSH
37800: LD_INT 3
37802: NEG
37803: PUSH
37804: EMPTY
37805: LIST
37806: LIST
37807: PUSH
37808: LD_INT 3
37810: NEG
37811: PUSH
37812: LD_INT 4
37814: NEG
37815: PUSH
37816: EMPTY
37817: LIST
37818: LIST
37819: PUSH
37820: LD_INT 2
37822: NEG
37823: PUSH
37824: LD_INT 3
37826: NEG
37827: PUSH
37828: EMPTY
37829: LIST
37830: LIST
37831: PUSH
37832: LD_INT 2
37834: NEG
37835: PUSH
37836: LD_INT 2
37838: NEG
37839: PUSH
37840: EMPTY
37841: LIST
37842: LIST
37843: PUSH
37844: LD_INT 3
37846: NEG
37847: PUSH
37848: LD_INT 2
37850: NEG
37851: PUSH
37852: EMPTY
37853: LIST
37854: LIST
37855: PUSH
37856: LD_INT 4
37858: NEG
37859: PUSH
37860: LD_INT 3
37862: NEG
37863: PUSH
37864: EMPTY
37865: LIST
37866: LIST
37867: PUSH
37868: LD_INT 4
37870: NEG
37871: PUSH
37872: LD_INT 4
37874: NEG
37875: PUSH
37876: EMPTY
37877: LIST
37878: LIST
37879: PUSH
37880: LD_INT 2
37882: NEG
37883: PUSH
37884: LD_INT 4
37886: NEG
37887: PUSH
37888: EMPTY
37889: LIST
37890: LIST
37891: PUSH
37892: LD_INT 4
37894: NEG
37895: PUSH
37896: LD_INT 2
37898: NEG
37899: PUSH
37900: EMPTY
37901: LIST
37902: LIST
37903: PUSH
37904: LD_INT 0
37906: PUSH
37907: LD_INT 4
37909: NEG
37910: PUSH
37911: EMPTY
37912: LIST
37913: LIST
37914: PUSH
37915: LD_INT 0
37917: PUSH
37918: LD_INT 5
37920: NEG
37921: PUSH
37922: EMPTY
37923: LIST
37924: LIST
37925: PUSH
37926: LD_INT 1
37928: PUSH
37929: LD_INT 4
37931: NEG
37932: PUSH
37933: EMPTY
37934: LIST
37935: LIST
37936: PUSH
37937: LD_INT 1
37939: PUSH
37940: LD_INT 3
37942: NEG
37943: PUSH
37944: EMPTY
37945: LIST
37946: LIST
37947: PUSH
37948: LD_INT 0
37950: PUSH
37951: LD_INT 3
37953: NEG
37954: PUSH
37955: EMPTY
37956: LIST
37957: LIST
37958: PUSH
37959: LD_INT 1
37961: NEG
37962: PUSH
37963: LD_INT 4
37965: NEG
37966: PUSH
37967: EMPTY
37968: LIST
37969: LIST
37970: PUSH
37971: LD_INT 1
37973: NEG
37974: PUSH
37975: LD_INT 5
37977: NEG
37978: PUSH
37979: EMPTY
37980: LIST
37981: LIST
37982: PUSH
37983: LD_INT 2
37985: PUSH
37986: LD_INT 3
37988: NEG
37989: PUSH
37990: EMPTY
37991: LIST
37992: LIST
37993: PUSH
37994: LD_INT 2
37996: NEG
37997: PUSH
37998: LD_INT 5
38000: NEG
38001: PUSH
38002: EMPTY
38003: LIST
38004: LIST
38005: PUSH
38006: LD_INT 3
38008: PUSH
38009: LD_INT 0
38011: PUSH
38012: EMPTY
38013: LIST
38014: LIST
38015: PUSH
38016: LD_INT 3
38018: PUSH
38019: LD_INT 1
38021: NEG
38022: PUSH
38023: EMPTY
38024: LIST
38025: LIST
38026: PUSH
38027: LD_INT 4
38029: PUSH
38030: LD_INT 0
38032: PUSH
38033: EMPTY
38034: LIST
38035: LIST
38036: PUSH
38037: LD_INT 4
38039: PUSH
38040: LD_INT 1
38042: PUSH
38043: EMPTY
38044: LIST
38045: LIST
38046: PUSH
38047: LD_INT 3
38049: PUSH
38050: LD_INT 1
38052: PUSH
38053: EMPTY
38054: LIST
38055: LIST
38056: PUSH
38057: LD_INT 2
38059: PUSH
38060: LD_INT 0
38062: PUSH
38063: EMPTY
38064: LIST
38065: LIST
38066: PUSH
38067: LD_INT 2
38069: PUSH
38070: LD_INT 1
38072: NEG
38073: PUSH
38074: EMPTY
38075: LIST
38076: LIST
38077: PUSH
38078: LD_INT 2
38080: PUSH
38081: LD_INT 2
38083: NEG
38084: PUSH
38085: EMPTY
38086: LIST
38087: LIST
38088: PUSH
38089: LD_INT 4
38091: PUSH
38092: LD_INT 2
38094: PUSH
38095: EMPTY
38096: LIST
38097: LIST
38098: PUSH
38099: LD_INT 4
38101: PUSH
38102: LD_INT 4
38104: PUSH
38105: EMPTY
38106: LIST
38107: LIST
38108: PUSH
38109: LD_INT 4
38111: PUSH
38112: LD_INT 3
38114: PUSH
38115: EMPTY
38116: LIST
38117: LIST
38118: PUSH
38119: LD_INT 5
38121: PUSH
38122: LD_INT 4
38124: PUSH
38125: EMPTY
38126: LIST
38127: LIST
38128: PUSH
38129: LD_INT 5
38131: PUSH
38132: LD_INT 5
38134: PUSH
38135: EMPTY
38136: LIST
38137: LIST
38138: PUSH
38139: LD_INT 4
38141: PUSH
38142: LD_INT 5
38144: PUSH
38145: EMPTY
38146: LIST
38147: LIST
38148: PUSH
38149: LD_INT 3
38151: PUSH
38152: LD_INT 4
38154: PUSH
38155: EMPTY
38156: LIST
38157: LIST
38158: PUSH
38159: LD_INT 3
38161: PUSH
38162: LD_INT 3
38164: PUSH
38165: EMPTY
38166: LIST
38167: LIST
38168: PUSH
38169: LD_INT 5
38171: PUSH
38172: LD_INT 3
38174: PUSH
38175: EMPTY
38176: LIST
38177: LIST
38178: PUSH
38179: LD_INT 3
38181: PUSH
38182: LD_INT 5
38184: PUSH
38185: EMPTY
38186: LIST
38187: LIST
38188: PUSH
38189: EMPTY
38190: LIST
38191: LIST
38192: LIST
38193: LIST
38194: LIST
38195: LIST
38196: LIST
38197: LIST
38198: LIST
38199: LIST
38200: LIST
38201: LIST
38202: LIST
38203: LIST
38204: LIST
38205: LIST
38206: LIST
38207: LIST
38208: LIST
38209: LIST
38210: LIST
38211: LIST
38212: LIST
38213: LIST
38214: LIST
38215: LIST
38216: LIST
38217: LIST
38218: LIST
38219: LIST
38220: LIST
38221: LIST
38222: LIST
38223: LIST
38224: LIST
38225: LIST
38226: LIST
38227: LIST
38228: LIST
38229: LIST
38230: LIST
38231: LIST
38232: LIST
38233: LIST
38234: LIST
38235: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
38236: LD_ADDR_VAR 0 33
38240: PUSH
38241: LD_INT 4
38243: NEG
38244: PUSH
38245: LD_INT 4
38247: NEG
38248: PUSH
38249: EMPTY
38250: LIST
38251: LIST
38252: PUSH
38253: LD_INT 4
38255: NEG
38256: PUSH
38257: LD_INT 5
38259: NEG
38260: PUSH
38261: EMPTY
38262: LIST
38263: LIST
38264: PUSH
38265: LD_INT 3
38267: NEG
38268: PUSH
38269: LD_INT 4
38271: NEG
38272: PUSH
38273: EMPTY
38274: LIST
38275: LIST
38276: PUSH
38277: LD_INT 3
38279: NEG
38280: PUSH
38281: LD_INT 3
38283: NEG
38284: PUSH
38285: EMPTY
38286: LIST
38287: LIST
38288: PUSH
38289: LD_INT 4
38291: NEG
38292: PUSH
38293: LD_INT 3
38295: NEG
38296: PUSH
38297: EMPTY
38298: LIST
38299: LIST
38300: PUSH
38301: LD_INT 5
38303: NEG
38304: PUSH
38305: LD_INT 4
38307: NEG
38308: PUSH
38309: EMPTY
38310: LIST
38311: LIST
38312: PUSH
38313: LD_INT 5
38315: NEG
38316: PUSH
38317: LD_INT 5
38319: NEG
38320: PUSH
38321: EMPTY
38322: LIST
38323: LIST
38324: PUSH
38325: LD_INT 3
38327: NEG
38328: PUSH
38329: LD_INT 5
38331: NEG
38332: PUSH
38333: EMPTY
38334: LIST
38335: LIST
38336: PUSH
38337: LD_INT 5
38339: NEG
38340: PUSH
38341: LD_INT 3
38343: NEG
38344: PUSH
38345: EMPTY
38346: LIST
38347: LIST
38348: PUSH
38349: LD_INT 0
38351: PUSH
38352: LD_INT 3
38354: NEG
38355: PUSH
38356: EMPTY
38357: LIST
38358: LIST
38359: PUSH
38360: LD_INT 0
38362: PUSH
38363: LD_INT 4
38365: NEG
38366: PUSH
38367: EMPTY
38368: LIST
38369: LIST
38370: PUSH
38371: LD_INT 1
38373: PUSH
38374: LD_INT 3
38376: NEG
38377: PUSH
38378: EMPTY
38379: LIST
38380: LIST
38381: PUSH
38382: LD_INT 1
38384: PUSH
38385: LD_INT 2
38387: NEG
38388: PUSH
38389: EMPTY
38390: LIST
38391: LIST
38392: PUSH
38393: LD_INT 0
38395: PUSH
38396: LD_INT 2
38398: NEG
38399: PUSH
38400: EMPTY
38401: LIST
38402: LIST
38403: PUSH
38404: LD_INT 1
38406: NEG
38407: PUSH
38408: LD_INT 3
38410: NEG
38411: PUSH
38412: EMPTY
38413: LIST
38414: LIST
38415: PUSH
38416: LD_INT 1
38418: NEG
38419: PUSH
38420: LD_INT 4
38422: NEG
38423: PUSH
38424: EMPTY
38425: LIST
38426: LIST
38427: PUSH
38428: LD_INT 2
38430: PUSH
38431: LD_INT 2
38433: NEG
38434: PUSH
38435: EMPTY
38436: LIST
38437: LIST
38438: PUSH
38439: LD_INT 2
38441: NEG
38442: PUSH
38443: LD_INT 4
38445: NEG
38446: PUSH
38447: EMPTY
38448: LIST
38449: LIST
38450: PUSH
38451: LD_INT 4
38453: PUSH
38454: LD_INT 0
38456: PUSH
38457: EMPTY
38458: LIST
38459: LIST
38460: PUSH
38461: LD_INT 4
38463: PUSH
38464: LD_INT 1
38466: NEG
38467: PUSH
38468: EMPTY
38469: LIST
38470: LIST
38471: PUSH
38472: LD_INT 5
38474: PUSH
38475: LD_INT 0
38477: PUSH
38478: EMPTY
38479: LIST
38480: LIST
38481: PUSH
38482: LD_INT 5
38484: PUSH
38485: LD_INT 1
38487: PUSH
38488: EMPTY
38489: LIST
38490: LIST
38491: PUSH
38492: LD_INT 4
38494: PUSH
38495: LD_INT 1
38497: PUSH
38498: EMPTY
38499: LIST
38500: LIST
38501: PUSH
38502: LD_INT 3
38504: PUSH
38505: LD_INT 0
38507: PUSH
38508: EMPTY
38509: LIST
38510: LIST
38511: PUSH
38512: LD_INT 3
38514: PUSH
38515: LD_INT 1
38517: NEG
38518: PUSH
38519: EMPTY
38520: LIST
38521: LIST
38522: PUSH
38523: LD_INT 3
38525: PUSH
38526: LD_INT 2
38528: NEG
38529: PUSH
38530: EMPTY
38531: LIST
38532: LIST
38533: PUSH
38534: LD_INT 5
38536: PUSH
38537: LD_INT 2
38539: PUSH
38540: EMPTY
38541: LIST
38542: LIST
38543: PUSH
38544: LD_INT 3
38546: PUSH
38547: LD_INT 3
38549: PUSH
38550: EMPTY
38551: LIST
38552: LIST
38553: PUSH
38554: LD_INT 3
38556: PUSH
38557: LD_INT 2
38559: PUSH
38560: EMPTY
38561: LIST
38562: LIST
38563: PUSH
38564: LD_INT 4
38566: PUSH
38567: LD_INT 3
38569: PUSH
38570: EMPTY
38571: LIST
38572: LIST
38573: PUSH
38574: LD_INT 4
38576: PUSH
38577: LD_INT 4
38579: PUSH
38580: EMPTY
38581: LIST
38582: LIST
38583: PUSH
38584: LD_INT 3
38586: PUSH
38587: LD_INT 4
38589: PUSH
38590: EMPTY
38591: LIST
38592: LIST
38593: PUSH
38594: LD_INT 2
38596: PUSH
38597: LD_INT 3
38599: PUSH
38600: EMPTY
38601: LIST
38602: LIST
38603: PUSH
38604: LD_INT 2
38606: PUSH
38607: LD_INT 2
38609: PUSH
38610: EMPTY
38611: LIST
38612: LIST
38613: PUSH
38614: LD_INT 4
38616: PUSH
38617: LD_INT 2
38619: PUSH
38620: EMPTY
38621: LIST
38622: LIST
38623: PUSH
38624: LD_INT 2
38626: PUSH
38627: LD_INT 4
38629: PUSH
38630: EMPTY
38631: LIST
38632: LIST
38633: PUSH
38634: LD_INT 0
38636: PUSH
38637: LD_INT 4
38639: PUSH
38640: EMPTY
38641: LIST
38642: LIST
38643: PUSH
38644: LD_INT 0
38646: PUSH
38647: LD_INT 3
38649: PUSH
38650: EMPTY
38651: LIST
38652: LIST
38653: PUSH
38654: LD_INT 1
38656: PUSH
38657: LD_INT 4
38659: PUSH
38660: EMPTY
38661: LIST
38662: LIST
38663: PUSH
38664: LD_INT 1
38666: PUSH
38667: LD_INT 5
38669: PUSH
38670: EMPTY
38671: LIST
38672: LIST
38673: PUSH
38674: LD_INT 0
38676: PUSH
38677: LD_INT 5
38679: PUSH
38680: EMPTY
38681: LIST
38682: LIST
38683: PUSH
38684: LD_INT 1
38686: NEG
38687: PUSH
38688: LD_INT 4
38690: PUSH
38691: EMPTY
38692: LIST
38693: LIST
38694: PUSH
38695: LD_INT 1
38697: NEG
38698: PUSH
38699: LD_INT 3
38701: PUSH
38702: EMPTY
38703: LIST
38704: LIST
38705: PUSH
38706: LD_INT 2
38708: PUSH
38709: LD_INT 5
38711: PUSH
38712: EMPTY
38713: LIST
38714: LIST
38715: PUSH
38716: LD_INT 2
38718: NEG
38719: PUSH
38720: LD_INT 3
38722: PUSH
38723: EMPTY
38724: LIST
38725: LIST
38726: PUSH
38727: EMPTY
38728: LIST
38729: LIST
38730: LIST
38731: LIST
38732: LIST
38733: LIST
38734: LIST
38735: LIST
38736: LIST
38737: LIST
38738: LIST
38739: LIST
38740: LIST
38741: LIST
38742: LIST
38743: LIST
38744: LIST
38745: LIST
38746: LIST
38747: LIST
38748: LIST
38749: LIST
38750: LIST
38751: LIST
38752: LIST
38753: LIST
38754: LIST
38755: LIST
38756: LIST
38757: LIST
38758: LIST
38759: LIST
38760: LIST
38761: LIST
38762: LIST
38763: LIST
38764: LIST
38765: LIST
38766: LIST
38767: LIST
38768: LIST
38769: LIST
38770: LIST
38771: LIST
38772: LIST
38773: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
38774: LD_ADDR_VAR 0 34
38778: PUSH
38779: LD_INT 0
38781: PUSH
38782: LD_INT 4
38784: NEG
38785: PUSH
38786: EMPTY
38787: LIST
38788: LIST
38789: PUSH
38790: LD_INT 0
38792: PUSH
38793: LD_INT 5
38795: NEG
38796: PUSH
38797: EMPTY
38798: LIST
38799: LIST
38800: PUSH
38801: LD_INT 1
38803: PUSH
38804: LD_INT 4
38806: NEG
38807: PUSH
38808: EMPTY
38809: LIST
38810: LIST
38811: PUSH
38812: LD_INT 1
38814: PUSH
38815: LD_INT 3
38817: NEG
38818: PUSH
38819: EMPTY
38820: LIST
38821: LIST
38822: PUSH
38823: LD_INT 0
38825: PUSH
38826: LD_INT 3
38828: NEG
38829: PUSH
38830: EMPTY
38831: LIST
38832: LIST
38833: PUSH
38834: LD_INT 1
38836: NEG
38837: PUSH
38838: LD_INT 4
38840: NEG
38841: PUSH
38842: EMPTY
38843: LIST
38844: LIST
38845: PUSH
38846: LD_INT 1
38848: NEG
38849: PUSH
38850: LD_INT 5
38852: NEG
38853: PUSH
38854: EMPTY
38855: LIST
38856: LIST
38857: PUSH
38858: LD_INT 2
38860: PUSH
38861: LD_INT 3
38863: NEG
38864: PUSH
38865: EMPTY
38866: LIST
38867: LIST
38868: PUSH
38869: LD_INT 2
38871: NEG
38872: PUSH
38873: LD_INT 5
38875: NEG
38876: PUSH
38877: EMPTY
38878: LIST
38879: LIST
38880: PUSH
38881: LD_INT 3
38883: PUSH
38884: LD_INT 0
38886: PUSH
38887: EMPTY
38888: LIST
38889: LIST
38890: PUSH
38891: LD_INT 3
38893: PUSH
38894: LD_INT 1
38896: NEG
38897: PUSH
38898: EMPTY
38899: LIST
38900: LIST
38901: PUSH
38902: LD_INT 4
38904: PUSH
38905: LD_INT 0
38907: PUSH
38908: EMPTY
38909: LIST
38910: LIST
38911: PUSH
38912: LD_INT 4
38914: PUSH
38915: LD_INT 1
38917: PUSH
38918: EMPTY
38919: LIST
38920: LIST
38921: PUSH
38922: LD_INT 3
38924: PUSH
38925: LD_INT 1
38927: PUSH
38928: EMPTY
38929: LIST
38930: LIST
38931: PUSH
38932: LD_INT 2
38934: PUSH
38935: LD_INT 0
38937: PUSH
38938: EMPTY
38939: LIST
38940: LIST
38941: PUSH
38942: LD_INT 2
38944: PUSH
38945: LD_INT 1
38947: NEG
38948: PUSH
38949: EMPTY
38950: LIST
38951: LIST
38952: PUSH
38953: LD_INT 2
38955: PUSH
38956: LD_INT 2
38958: NEG
38959: PUSH
38960: EMPTY
38961: LIST
38962: LIST
38963: PUSH
38964: LD_INT 4
38966: PUSH
38967: LD_INT 2
38969: PUSH
38970: EMPTY
38971: LIST
38972: LIST
38973: PUSH
38974: LD_INT 4
38976: PUSH
38977: LD_INT 4
38979: PUSH
38980: EMPTY
38981: LIST
38982: LIST
38983: PUSH
38984: LD_INT 4
38986: PUSH
38987: LD_INT 3
38989: PUSH
38990: EMPTY
38991: LIST
38992: LIST
38993: PUSH
38994: LD_INT 5
38996: PUSH
38997: LD_INT 4
38999: PUSH
39000: EMPTY
39001: LIST
39002: LIST
39003: PUSH
39004: LD_INT 5
39006: PUSH
39007: LD_INT 5
39009: PUSH
39010: EMPTY
39011: LIST
39012: LIST
39013: PUSH
39014: LD_INT 4
39016: PUSH
39017: LD_INT 5
39019: PUSH
39020: EMPTY
39021: LIST
39022: LIST
39023: PUSH
39024: LD_INT 3
39026: PUSH
39027: LD_INT 4
39029: PUSH
39030: EMPTY
39031: LIST
39032: LIST
39033: PUSH
39034: LD_INT 3
39036: PUSH
39037: LD_INT 3
39039: PUSH
39040: EMPTY
39041: LIST
39042: LIST
39043: PUSH
39044: LD_INT 5
39046: PUSH
39047: LD_INT 3
39049: PUSH
39050: EMPTY
39051: LIST
39052: LIST
39053: PUSH
39054: LD_INT 3
39056: PUSH
39057: LD_INT 5
39059: PUSH
39060: EMPTY
39061: LIST
39062: LIST
39063: PUSH
39064: LD_INT 0
39066: PUSH
39067: LD_INT 3
39069: PUSH
39070: EMPTY
39071: LIST
39072: LIST
39073: PUSH
39074: LD_INT 0
39076: PUSH
39077: LD_INT 2
39079: PUSH
39080: EMPTY
39081: LIST
39082: LIST
39083: PUSH
39084: LD_INT 1
39086: PUSH
39087: LD_INT 3
39089: PUSH
39090: EMPTY
39091: LIST
39092: LIST
39093: PUSH
39094: LD_INT 1
39096: PUSH
39097: LD_INT 4
39099: PUSH
39100: EMPTY
39101: LIST
39102: LIST
39103: PUSH
39104: LD_INT 0
39106: PUSH
39107: LD_INT 4
39109: PUSH
39110: EMPTY
39111: LIST
39112: LIST
39113: PUSH
39114: LD_INT 1
39116: NEG
39117: PUSH
39118: LD_INT 3
39120: PUSH
39121: EMPTY
39122: LIST
39123: LIST
39124: PUSH
39125: LD_INT 1
39127: NEG
39128: PUSH
39129: LD_INT 2
39131: PUSH
39132: EMPTY
39133: LIST
39134: LIST
39135: PUSH
39136: LD_INT 2
39138: PUSH
39139: LD_INT 4
39141: PUSH
39142: EMPTY
39143: LIST
39144: LIST
39145: PUSH
39146: LD_INT 2
39148: NEG
39149: PUSH
39150: LD_INT 2
39152: PUSH
39153: EMPTY
39154: LIST
39155: LIST
39156: PUSH
39157: LD_INT 4
39159: NEG
39160: PUSH
39161: LD_INT 0
39163: PUSH
39164: EMPTY
39165: LIST
39166: LIST
39167: PUSH
39168: LD_INT 4
39170: NEG
39171: PUSH
39172: LD_INT 1
39174: NEG
39175: PUSH
39176: EMPTY
39177: LIST
39178: LIST
39179: PUSH
39180: LD_INT 3
39182: NEG
39183: PUSH
39184: LD_INT 0
39186: PUSH
39187: EMPTY
39188: LIST
39189: LIST
39190: PUSH
39191: LD_INT 3
39193: NEG
39194: PUSH
39195: LD_INT 1
39197: PUSH
39198: EMPTY
39199: LIST
39200: LIST
39201: PUSH
39202: LD_INT 4
39204: NEG
39205: PUSH
39206: LD_INT 1
39208: PUSH
39209: EMPTY
39210: LIST
39211: LIST
39212: PUSH
39213: LD_INT 5
39215: NEG
39216: PUSH
39217: LD_INT 0
39219: PUSH
39220: EMPTY
39221: LIST
39222: LIST
39223: PUSH
39224: LD_INT 5
39226: NEG
39227: PUSH
39228: LD_INT 1
39230: NEG
39231: PUSH
39232: EMPTY
39233: LIST
39234: LIST
39235: PUSH
39236: LD_INT 5
39238: NEG
39239: PUSH
39240: LD_INT 2
39242: NEG
39243: PUSH
39244: EMPTY
39245: LIST
39246: LIST
39247: PUSH
39248: LD_INT 3
39250: NEG
39251: PUSH
39252: LD_INT 2
39254: PUSH
39255: EMPTY
39256: LIST
39257: LIST
39258: PUSH
39259: EMPTY
39260: LIST
39261: LIST
39262: LIST
39263: LIST
39264: LIST
39265: LIST
39266: LIST
39267: LIST
39268: LIST
39269: LIST
39270: LIST
39271: LIST
39272: LIST
39273: LIST
39274: LIST
39275: LIST
39276: LIST
39277: LIST
39278: LIST
39279: LIST
39280: LIST
39281: LIST
39282: LIST
39283: LIST
39284: LIST
39285: LIST
39286: LIST
39287: LIST
39288: LIST
39289: LIST
39290: LIST
39291: LIST
39292: LIST
39293: LIST
39294: LIST
39295: LIST
39296: LIST
39297: LIST
39298: LIST
39299: LIST
39300: LIST
39301: LIST
39302: LIST
39303: LIST
39304: LIST
39305: ST_TO_ADDR
// end ; end ;
39306: GO 39309
39308: POP
// case btype of b_depot , b_warehouse :
39309: LD_VAR 0 1
39313: PUSH
39314: LD_INT 0
39316: DOUBLE
39317: EQUAL
39318: IFTRUE 39328
39320: LD_INT 1
39322: DOUBLE
39323: EQUAL
39324: IFTRUE 39328
39326: GO 39529
39328: POP
// case nation of nation_american :
39329: LD_VAR 0 5
39333: PUSH
39334: LD_INT 1
39336: DOUBLE
39337: EQUAL
39338: IFTRUE 39342
39340: GO 39398
39342: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
39343: LD_ADDR_VAR 0 9
39347: PUSH
39348: LD_VAR 0 11
39352: PUSH
39353: LD_VAR 0 12
39357: PUSH
39358: LD_VAR 0 13
39362: PUSH
39363: LD_VAR 0 14
39367: PUSH
39368: LD_VAR 0 15
39372: PUSH
39373: LD_VAR 0 16
39377: PUSH
39378: EMPTY
39379: LIST
39380: LIST
39381: LIST
39382: LIST
39383: LIST
39384: LIST
39385: PUSH
39386: LD_VAR 0 4
39390: PUSH
39391: LD_INT 1
39393: PLUS
39394: ARRAY
39395: ST_TO_ADDR
39396: GO 39527
39398: LD_INT 2
39400: DOUBLE
39401: EQUAL
39402: IFTRUE 39406
39404: GO 39462
39406: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
39407: LD_ADDR_VAR 0 9
39411: PUSH
39412: LD_VAR 0 17
39416: PUSH
39417: LD_VAR 0 18
39421: PUSH
39422: LD_VAR 0 19
39426: PUSH
39427: LD_VAR 0 20
39431: PUSH
39432: LD_VAR 0 21
39436: PUSH
39437: LD_VAR 0 22
39441: PUSH
39442: EMPTY
39443: LIST
39444: LIST
39445: LIST
39446: LIST
39447: LIST
39448: LIST
39449: PUSH
39450: LD_VAR 0 4
39454: PUSH
39455: LD_INT 1
39457: PLUS
39458: ARRAY
39459: ST_TO_ADDR
39460: GO 39527
39462: LD_INT 3
39464: DOUBLE
39465: EQUAL
39466: IFTRUE 39470
39468: GO 39526
39470: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
39471: LD_ADDR_VAR 0 9
39475: PUSH
39476: LD_VAR 0 23
39480: PUSH
39481: LD_VAR 0 24
39485: PUSH
39486: LD_VAR 0 25
39490: PUSH
39491: LD_VAR 0 26
39495: PUSH
39496: LD_VAR 0 27
39500: PUSH
39501: LD_VAR 0 28
39505: PUSH
39506: EMPTY
39507: LIST
39508: LIST
39509: LIST
39510: LIST
39511: LIST
39512: LIST
39513: PUSH
39514: LD_VAR 0 4
39518: PUSH
39519: LD_INT 1
39521: PLUS
39522: ARRAY
39523: ST_TO_ADDR
39524: GO 39527
39526: POP
39527: GO 40082
39529: LD_INT 2
39531: DOUBLE
39532: EQUAL
39533: IFTRUE 39543
39535: LD_INT 3
39537: DOUBLE
39538: EQUAL
39539: IFTRUE 39543
39541: GO 39599
39543: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
39544: LD_ADDR_VAR 0 9
39548: PUSH
39549: LD_VAR 0 29
39553: PUSH
39554: LD_VAR 0 30
39558: PUSH
39559: LD_VAR 0 31
39563: PUSH
39564: LD_VAR 0 32
39568: PUSH
39569: LD_VAR 0 33
39573: PUSH
39574: LD_VAR 0 34
39578: PUSH
39579: EMPTY
39580: LIST
39581: LIST
39582: LIST
39583: LIST
39584: LIST
39585: LIST
39586: PUSH
39587: LD_VAR 0 4
39591: PUSH
39592: LD_INT 1
39594: PLUS
39595: ARRAY
39596: ST_TO_ADDR
39597: GO 40082
39599: LD_INT 16
39601: DOUBLE
39602: EQUAL
39603: IFTRUE 39661
39605: LD_INT 17
39607: DOUBLE
39608: EQUAL
39609: IFTRUE 39661
39611: LD_INT 18
39613: DOUBLE
39614: EQUAL
39615: IFTRUE 39661
39617: LD_INT 19
39619: DOUBLE
39620: EQUAL
39621: IFTRUE 39661
39623: LD_INT 22
39625: DOUBLE
39626: EQUAL
39627: IFTRUE 39661
39629: LD_INT 20
39631: DOUBLE
39632: EQUAL
39633: IFTRUE 39661
39635: LD_INT 21
39637: DOUBLE
39638: EQUAL
39639: IFTRUE 39661
39641: LD_INT 23
39643: DOUBLE
39644: EQUAL
39645: IFTRUE 39661
39647: LD_INT 24
39649: DOUBLE
39650: EQUAL
39651: IFTRUE 39661
39653: LD_INT 25
39655: DOUBLE
39656: EQUAL
39657: IFTRUE 39661
39659: GO 39717
39661: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
39662: LD_ADDR_VAR 0 9
39666: PUSH
39667: LD_VAR 0 35
39671: PUSH
39672: LD_VAR 0 36
39676: PUSH
39677: LD_VAR 0 37
39681: PUSH
39682: LD_VAR 0 38
39686: PUSH
39687: LD_VAR 0 39
39691: PUSH
39692: LD_VAR 0 40
39696: PUSH
39697: EMPTY
39698: LIST
39699: LIST
39700: LIST
39701: LIST
39702: LIST
39703: LIST
39704: PUSH
39705: LD_VAR 0 4
39709: PUSH
39710: LD_INT 1
39712: PLUS
39713: ARRAY
39714: ST_TO_ADDR
39715: GO 40082
39717: LD_INT 6
39719: DOUBLE
39720: EQUAL
39721: IFTRUE 39773
39723: LD_INT 7
39725: DOUBLE
39726: EQUAL
39727: IFTRUE 39773
39729: LD_INT 8
39731: DOUBLE
39732: EQUAL
39733: IFTRUE 39773
39735: LD_INT 13
39737: DOUBLE
39738: EQUAL
39739: IFTRUE 39773
39741: LD_INT 12
39743: DOUBLE
39744: EQUAL
39745: IFTRUE 39773
39747: LD_INT 15
39749: DOUBLE
39750: EQUAL
39751: IFTRUE 39773
39753: LD_INT 11
39755: DOUBLE
39756: EQUAL
39757: IFTRUE 39773
39759: LD_INT 14
39761: DOUBLE
39762: EQUAL
39763: IFTRUE 39773
39765: LD_INT 10
39767: DOUBLE
39768: EQUAL
39769: IFTRUE 39773
39771: GO 39829
39773: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
39774: LD_ADDR_VAR 0 9
39778: PUSH
39779: LD_VAR 0 41
39783: PUSH
39784: LD_VAR 0 42
39788: PUSH
39789: LD_VAR 0 43
39793: PUSH
39794: LD_VAR 0 44
39798: PUSH
39799: LD_VAR 0 45
39803: PUSH
39804: LD_VAR 0 46
39808: PUSH
39809: EMPTY
39810: LIST
39811: LIST
39812: LIST
39813: LIST
39814: LIST
39815: LIST
39816: PUSH
39817: LD_VAR 0 4
39821: PUSH
39822: LD_INT 1
39824: PLUS
39825: ARRAY
39826: ST_TO_ADDR
39827: GO 40082
39829: LD_INT 36
39831: DOUBLE
39832: EQUAL
39833: IFTRUE 39837
39835: GO 39893
39837: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
39838: LD_ADDR_VAR 0 9
39842: PUSH
39843: LD_VAR 0 47
39847: PUSH
39848: LD_VAR 0 48
39852: PUSH
39853: LD_VAR 0 49
39857: PUSH
39858: LD_VAR 0 50
39862: PUSH
39863: LD_VAR 0 51
39867: PUSH
39868: LD_VAR 0 52
39872: PUSH
39873: EMPTY
39874: LIST
39875: LIST
39876: LIST
39877: LIST
39878: LIST
39879: LIST
39880: PUSH
39881: LD_VAR 0 4
39885: PUSH
39886: LD_INT 1
39888: PLUS
39889: ARRAY
39890: ST_TO_ADDR
39891: GO 40082
39893: LD_INT 4
39895: DOUBLE
39896: EQUAL
39897: IFTRUE 39919
39899: LD_INT 5
39901: DOUBLE
39902: EQUAL
39903: IFTRUE 39919
39905: LD_INT 34
39907: DOUBLE
39908: EQUAL
39909: IFTRUE 39919
39911: LD_INT 37
39913: DOUBLE
39914: EQUAL
39915: IFTRUE 39919
39917: GO 39975
39919: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
39920: LD_ADDR_VAR 0 9
39924: PUSH
39925: LD_VAR 0 53
39929: PUSH
39930: LD_VAR 0 54
39934: PUSH
39935: LD_VAR 0 55
39939: PUSH
39940: LD_VAR 0 56
39944: PUSH
39945: LD_VAR 0 57
39949: PUSH
39950: LD_VAR 0 58
39954: PUSH
39955: EMPTY
39956: LIST
39957: LIST
39958: LIST
39959: LIST
39960: LIST
39961: LIST
39962: PUSH
39963: LD_VAR 0 4
39967: PUSH
39968: LD_INT 1
39970: PLUS
39971: ARRAY
39972: ST_TO_ADDR
39973: GO 40082
39975: LD_INT 31
39977: DOUBLE
39978: EQUAL
39979: IFTRUE 40025
39981: LD_INT 32
39983: DOUBLE
39984: EQUAL
39985: IFTRUE 40025
39987: LD_INT 33
39989: DOUBLE
39990: EQUAL
39991: IFTRUE 40025
39993: LD_INT 27
39995: DOUBLE
39996: EQUAL
39997: IFTRUE 40025
39999: LD_INT 26
40001: DOUBLE
40002: EQUAL
40003: IFTRUE 40025
40005: LD_INT 28
40007: DOUBLE
40008: EQUAL
40009: IFTRUE 40025
40011: LD_INT 29
40013: DOUBLE
40014: EQUAL
40015: IFTRUE 40025
40017: LD_INT 30
40019: DOUBLE
40020: EQUAL
40021: IFTRUE 40025
40023: GO 40081
40025: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
40026: LD_ADDR_VAR 0 9
40030: PUSH
40031: LD_VAR 0 59
40035: PUSH
40036: LD_VAR 0 60
40040: PUSH
40041: LD_VAR 0 61
40045: PUSH
40046: LD_VAR 0 62
40050: PUSH
40051: LD_VAR 0 63
40055: PUSH
40056: LD_VAR 0 64
40060: PUSH
40061: EMPTY
40062: LIST
40063: LIST
40064: LIST
40065: LIST
40066: LIST
40067: LIST
40068: PUSH
40069: LD_VAR 0 4
40073: PUSH
40074: LD_INT 1
40076: PLUS
40077: ARRAY
40078: ST_TO_ADDR
40079: GO 40082
40081: POP
// temp_list2 = [ ] ;
40082: LD_ADDR_VAR 0 10
40086: PUSH
40087: EMPTY
40088: ST_TO_ADDR
// for i in temp_list do
40089: LD_ADDR_VAR 0 8
40093: PUSH
40094: LD_VAR 0 9
40098: PUSH
40099: FOR_IN
40100: IFFALSE 40152
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
40102: LD_ADDR_VAR 0 10
40106: PUSH
40107: LD_VAR 0 10
40111: PUSH
40112: LD_VAR 0 8
40116: PUSH
40117: LD_INT 1
40119: ARRAY
40120: PUSH
40121: LD_VAR 0 2
40125: PLUS
40126: PUSH
40127: LD_VAR 0 8
40131: PUSH
40132: LD_INT 2
40134: ARRAY
40135: PUSH
40136: LD_VAR 0 3
40140: PLUS
40141: PUSH
40142: EMPTY
40143: LIST
40144: LIST
40145: PUSH
40146: EMPTY
40147: LIST
40148: ADD
40149: ST_TO_ADDR
40150: GO 40099
40152: POP
40153: POP
// result = temp_list2 ;
40154: LD_ADDR_VAR 0 7
40158: PUSH
40159: LD_VAR 0 10
40163: ST_TO_ADDR
// end ;
40164: LD_VAR 0 7
40168: RET
// export function EnemyInRange ( unit , dist ) ; begin
40169: LD_INT 0
40171: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
40172: LD_ADDR_VAR 0 3
40176: PUSH
40177: LD_VAR 0 1
40181: PPUSH
40182: CALL_OW 255
40186: PPUSH
40187: LD_VAR 0 1
40191: PPUSH
40192: CALL_OW 250
40196: PPUSH
40197: LD_VAR 0 1
40201: PPUSH
40202: CALL_OW 251
40206: PPUSH
40207: LD_VAR 0 2
40211: PPUSH
40212: CALL 13953 0 4
40216: PUSH
40217: LD_INT 4
40219: ARRAY
40220: ST_TO_ADDR
// end ;
40221: LD_VAR 0 3
40225: RET
// export function PlayerSeeMe ( unit ) ; begin
40226: LD_INT 0
40228: PPUSH
// result := See ( your_side , unit ) ;
40229: LD_ADDR_VAR 0 2
40233: PUSH
40234: LD_OWVAR 2
40238: PPUSH
40239: LD_VAR 0 1
40243: PPUSH
40244: CALL_OW 292
40248: ST_TO_ADDR
// end ;
40249: LD_VAR 0 2
40253: RET
// export function ReverseDir ( unit ) ; begin
40254: LD_INT 0
40256: PPUSH
// if not unit then
40257: LD_VAR 0 1
40261: NOT
40262: IFFALSE 40266
// exit ;
40264: GO 40289
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
40266: LD_ADDR_VAR 0 2
40270: PUSH
40271: LD_VAR 0 1
40275: PPUSH
40276: CALL_OW 254
40280: PUSH
40281: LD_INT 3
40283: PLUS
40284: PUSH
40285: LD_INT 6
40287: MOD
40288: ST_TO_ADDR
// end ;
40289: LD_VAR 0 2
40293: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
40294: LD_INT 0
40296: PPUSH
40297: PPUSH
40298: PPUSH
40299: PPUSH
40300: PPUSH
// if not hexes then
40301: LD_VAR 0 2
40305: NOT
40306: IFFALSE 40310
// exit ;
40308: GO 40458
// dist := 9999 ;
40310: LD_ADDR_VAR 0 5
40314: PUSH
40315: LD_INT 9999
40317: ST_TO_ADDR
// for i = 1 to hexes do
40318: LD_ADDR_VAR 0 4
40322: PUSH
40323: DOUBLE
40324: LD_INT 1
40326: DEC
40327: ST_TO_ADDR
40328: LD_VAR 0 2
40332: PUSH
40333: FOR_TO
40334: IFFALSE 40446
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
40336: LD_VAR 0 1
40340: PPUSH
40341: LD_VAR 0 2
40345: PUSH
40346: LD_VAR 0 4
40350: ARRAY
40351: PUSH
40352: LD_INT 1
40354: ARRAY
40355: PPUSH
40356: LD_VAR 0 2
40360: PUSH
40361: LD_VAR 0 4
40365: ARRAY
40366: PUSH
40367: LD_INT 2
40369: ARRAY
40370: PPUSH
40371: CALL_OW 297
40375: PUSH
40376: LD_VAR 0 5
40380: LESS
40381: IFFALSE 40444
// begin hex := hexes [ i ] ;
40383: LD_ADDR_VAR 0 7
40387: PUSH
40388: LD_VAR 0 2
40392: PUSH
40393: LD_VAR 0 4
40397: ARRAY
40398: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
40399: LD_ADDR_VAR 0 5
40403: PUSH
40404: LD_VAR 0 1
40408: PPUSH
40409: LD_VAR 0 2
40413: PUSH
40414: LD_VAR 0 4
40418: ARRAY
40419: PUSH
40420: LD_INT 1
40422: ARRAY
40423: PPUSH
40424: LD_VAR 0 2
40428: PUSH
40429: LD_VAR 0 4
40433: ARRAY
40434: PUSH
40435: LD_INT 2
40437: ARRAY
40438: PPUSH
40439: CALL_OW 297
40443: ST_TO_ADDR
// end ; end ;
40444: GO 40333
40446: POP
40447: POP
// result := hex ;
40448: LD_ADDR_VAR 0 3
40452: PUSH
40453: LD_VAR 0 7
40457: ST_TO_ADDR
// end ;
40458: LD_VAR 0 3
40462: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
40463: LD_INT 0
40465: PPUSH
40466: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
40467: LD_VAR 0 1
40471: NOT
40472: PUSH
40473: LD_VAR 0 1
40477: PUSH
40478: LD_INT 21
40480: PUSH
40481: LD_INT 2
40483: PUSH
40484: EMPTY
40485: LIST
40486: LIST
40487: PUSH
40488: LD_INT 23
40490: PUSH
40491: LD_INT 2
40493: PUSH
40494: EMPTY
40495: LIST
40496: LIST
40497: PUSH
40498: EMPTY
40499: LIST
40500: LIST
40501: PPUSH
40502: CALL_OW 69
40506: IN
40507: NOT
40508: OR
40509: IFFALSE 40513
// exit ;
40511: GO 40560
// for i = 1 to 3 do
40513: LD_ADDR_VAR 0 3
40517: PUSH
40518: DOUBLE
40519: LD_INT 1
40521: DEC
40522: ST_TO_ADDR
40523: LD_INT 3
40525: PUSH
40526: FOR_TO
40527: IFFALSE 40558
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
40529: LD_VAR 0 1
40533: PPUSH
40534: CALL_OW 250
40538: PPUSH
40539: LD_VAR 0 1
40543: PPUSH
40544: CALL_OW 251
40548: PPUSH
40549: LD_INT 1
40551: PPUSH
40552: CALL_OW 453
40556: GO 40526
40558: POP
40559: POP
// end ;
40560: LD_VAR 0 2
40564: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
40565: LD_INT 0
40567: PPUSH
40568: PPUSH
40569: PPUSH
40570: PPUSH
40571: PPUSH
40572: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
40573: LD_VAR 0 1
40577: NOT
40578: PUSH
40579: LD_VAR 0 2
40583: NOT
40584: OR
40585: PUSH
40586: LD_VAR 0 1
40590: PPUSH
40591: CALL_OW 314
40595: OR
40596: IFFALSE 40600
// exit ;
40598: GO 41041
// x := GetX ( enemy_unit ) ;
40600: LD_ADDR_VAR 0 7
40604: PUSH
40605: LD_VAR 0 2
40609: PPUSH
40610: CALL_OW 250
40614: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
40615: LD_ADDR_VAR 0 8
40619: PUSH
40620: LD_VAR 0 2
40624: PPUSH
40625: CALL_OW 251
40629: ST_TO_ADDR
// if not x or not y then
40630: LD_VAR 0 7
40634: NOT
40635: PUSH
40636: LD_VAR 0 8
40640: NOT
40641: OR
40642: IFFALSE 40646
// exit ;
40644: GO 41041
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
40646: LD_ADDR_VAR 0 6
40650: PUSH
40651: LD_VAR 0 7
40655: PPUSH
40656: LD_INT 0
40658: PPUSH
40659: LD_INT 4
40661: PPUSH
40662: CALL_OW 272
40666: PUSH
40667: LD_VAR 0 8
40671: PPUSH
40672: LD_INT 0
40674: PPUSH
40675: LD_INT 4
40677: PPUSH
40678: CALL_OW 273
40682: PUSH
40683: EMPTY
40684: LIST
40685: LIST
40686: PUSH
40687: LD_VAR 0 7
40691: PPUSH
40692: LD_INT 1
40694: PPUSH
40695: LD_INT 4
40697: PPUSH
40698: CALL_OW 272
40702: PUSH
40703: LD_VAR 0 8
40707: PPUSH
40708: LD_INT 1
40710: PPUSH
40711: LD_INT 4
40713: PPUSH
40714: CALL_OW 273
40718: PUSH
40719: EMPTY
40720: LIST
40721: LIST
40722: PUSH
40723: LD_VAR 0 7
40727: PPUSH
40728: LD_INT 2
40730: PPUSH
40731: LD_INT 4
40733: PPUSH
40734: CALL_OW 272
40738: PUSH
40739: LD_VAR 0 8
40743: PPUSH
40744: LD_INT 2
40746: PPUSH
40747: LD_INT 4
40749: PPUSH
40750: CALL_OW 273
40754: PUSH
40755: EMPTY
40756: LIST
40757: LIST
40758: PUSH
40759: LD_VAR 0 7
40763: PPUSH
40764: LD_INT 3
40766: PPUSH
40767: LD_INT 4
40769: PPUSH
40770: CALL_OW 272
40774: PUSH
40775: LD_VAR 0 8
40779: PPUSH
40780: LD_INT 3
40782: PPUSH
40783: LD_INT 4
40785: PPUSH
40786: CALL_OW 273
40790: PUSH
40791: EMPTY
40792: LIST
40793: LIST
40794: PUSH
40795: LD_VAR 0 7
40799: PPUSH
40800: LD_INT 4
40802: PPUSH
40803: LD_INT 4
40805: PPUSH
40806: CALL_OW 272
40810: PUSH
40811: LD_VAR 0 8
40815: PPUSH
40816: LD_INT 4
40818: PPUSH
40819: LD_INT 4
40821: PPUSH
40822: CALL_OW 273
40826: PUSH
40827: EMPTY
40828: LIST
40829: LIST
40830: PUSH
40831: LD_VAR 0 7
40835: PPUSH
40836: LD_INT 5
40838: PPUSH
40839: LD_INT 4
40841: PPUSH
40842: CALL_OW 272
40846: PUSH
40847: LD_VAR 0 8
40851: PPUSH
40852: LD_INT 5
40854: PPUSH
40855: LD_INT 4
40857: PPUSH
40858: CALL_OW 273
40862: PUSH
40863: EMPTY
40864: LIST
40865: LIST
40866: PUSH
40867: EMPTY
40868: LIST
40869: LIST
40870: LIST
40871: LIST
40872: LIST
40873: LIST
40874: ST_TO_ADDR
// for i = tmp downto 1 do
40875: LD_ADDR_VAR 0 4
40879: PUSH
40880: DOUBLE
40881: LD_VAR 0 6
40885: INC
40886: ST_TO_ADDR
40887: LD_INT 1
40889: PUSH
40890: FOR_DOWNTO
40891: IFFALSE 40992
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
40893: LD_VAR 0 6
40897: PUSH
40898: LD_VAR 0 4
40902: ARRAY
40903: PUSH
40904: LD_INT 1
40906: ARRAY
40907: PPUSH
40908: LD_VAR 0 6
40912: PUSH
40913: LD_VAR 0 4
40917: ARRAY
40918: PUSH
40919: LD_INT 2
40921: ARRAY
40922: PPUSH
40923: CALL_OW 488
40927: NOT
40928: PUSH
40929: LD_VAR 0 6
40933: PUSH
40934: LD_VAR 0 4
40938: ARRAY
40939: PUSH
40940: LD_INT 1
40942: ARRAY
40943: PPUSH
40944: LD_VAR 0 6
40948: PUSH
40949: LD_VAR 0 4
40953: ARRAY
40954: PUSH
40955: LD_INT 2
40957: ARRAY
40958: PPUSH
40959: CALL_OW 428
40963: PUSH
40964: LD_INT 0
40966: NONEQUAL
40967: OR
40968: IFFALSE 40990
// tmp := Delete ( tmp , i ) ;
40970: LD_ADDR_VAR 0 6
40974: PUSH
40975: LD_VAR 0 6
40979: PPUSH
40980: LD_VAR 0 4
40984: PPUSH
40985: CALL_OW 3
40989: ST_TO_ADDR
40990: GO 40890
40992: POP
40993: POP
// j := GetClosestHex ( unit , tmp ) ;
40994: LD_ADDR_VAR 0 5
40998: PUSH
40999: LD_VAR 0 1
41003: PPUSH
41004: LD_VAR 0 6
41008: PPUSH
41009: CALL 40294 0 2
41013: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
41014: LD_VAR 0 1
41018: PPUSH
41019: LD_VAR 0 5
41023: PUSH
41024: LD_INT 1
41026: ARRAY
41027: PPUSH
41028: LD_VAR 0 5
41032: PUSH
41033: LD_INT 2
41035: ARRAY
41036: PPUSH
41037: CALL_OW 111
// end ;
41041: LD_VAR 0 3
41045: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
41046: LD_INT 0
41048: PPUSH
41049: PPUSH
41050: PPUSH
// uc_side = 0 ;
41051: LD_ADDR_OWVAR 20
41055: PUSH
41056: LD_INT 0
41058: ST_TO_ADDR
// uc_nation = 0 ;
41059: LD_ADDR_OWVAR 21
41063: PUSH
41064: LD_INT 0
41066: ST_TO_ADDR
// InitHc_All ( ) ;
41067: CALL_OW 584
// InitVc ;
41071: CALL_OW 20
// if mastodonts then
41075: LD_VAR 0 6
41079: IFFALSE 41146
// for i = 1 to mastodonts do
41081: LD_ADDR_VAR 0 11
41085: PUSH
41086: DOUBLE
41087: LD_INT 1
41089: DEC
41090: ST_TO_ADDR
41091: LD_VAR 0 6
41095: PUSH
41096: FOR_TO
41097: IFFALSE 41144
// begin vc_chassis := 31 ;
41099: LD_ADDR_OWVAR 37
41103: PUSH
41104: LD_INT 31
41106: ST_TO_ADDR
// vc_control := control_rider ;
41107: LD_ADDR_OWVAR 38
41111: PUSH
41112: LD_INT 4
41114: ST_TO_ADDR
// animal := CreateVehicle ;
41115: LD_ADDR_VAR 0 12
41119: PUSH
41120: CALL_OW 45
41124: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
41125: LD_VAR 0 12
41129: PPUSH
41130: LD_VAR 0 8
41134: PPUSH
41135: LD_INT 0
41137: PPUSH
41138: CALL 43334 0 3
// end ;
41142: GO 41096
41144: POP
41145: POP
// if horses then
41146: LD_VAR 0 5
41150: IFFALSE 41217
// for i = 1 to horses do
41152: LD_ADDR_VAR 0 11
41156: PUSH
41157: DOUBLE
41158: LD_INT 1
41160: DEC
41161: ST_TO_ADDR
41162: LD_VAR 0 5
41166: PUSH
41167: FOR_TO
41168: IFFALSE 41215
// begin hc_class := 21 ;
41170: LD_ADDR_OWVAR 28
41174: PUSH
41175: LD_INT 21
41177: ST_TO_ADDR
// hc_gallery :=  ;
41178: LD_ADDR_OWVAR 33
41182: PUSH
41183: LD_STRING 
41185: ST_TO_ADDR
// animal := CreateHuman ;
41186: LD_ADDR_VAR 0 12
41190: PUSH
41191: CALL_OW 44
41195: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
41196: LD_VAR 0 12
41200: PPUSH
41201: LD_VAR 0 8
41205: PPUSH
41206: LD_INT 0
41208: PPUSH
41209: CALL 43334 0 3
// end ;
41213: GO 41167
41215: POP
41216: POP
// if birds then
41217: LD_VAR 0 1
41221: IFFALSE 41288
// for i = 1 to birds do
41223: LD_ADDR_VAR 0 11
41227: PUSH
41228: DOUBLE
41229: LD_INT 1
41231: DEC
41232: ST_TO_ADDR
41233: LD_VAR 0 1
41237: PUSH
41238: FOR_TO
41239: IFFALSE 41286
// begin hc_class = 18 ;
41241: LD_ADDR_OWVAR 28
41245: PUSH
41246: LD_INT 18
41248: ST_TO_ADDR
// hc_gallery =  ;
41249: LD_ADDR_OWVAR 33
41253: PUSH
41254: LD_STRING 
41256: ST_TO_ADDR
// animal := CreateHuman ;
41257: LD_ADDR_VAR 0 12
41261: PUSH
41262: CALL_OW 44
41266: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
41267: LD_VAR 0 12
41271: PPUSH
41272: LD_VAR 0 8
41276: PPUSH
41277: LD_INT 0
41279: PPUSH
41280: CALL 43334 0 3
// end ;
41284: GO 41238
41286: POP
41287: POP
// if tigers then
41288: LD_VAR 0 2
41292: IFFALSE 41376
// for i = 1 to tigers do
41294: LD_ADDR_VAR 0 11
41298: PUSH
41299: DOUBLE
41300: LD_INT 1
41302: DEC
41303: ST_TO_ADDR
41304: LD_VAR 0 2
41308: PUSH
41309: FOR_TO
41310: IFFALSE 41374
// begin hc_class = class_tiger ;
41312: LD_ADDR_OWVAR 28
41316: PUSH
41317: LD_INT 14
41319: ST_TO_ADDR
// hc_gallery =  ;
41320: LD_ADDR_OWVAR 33
41324: PUSH
41325: LD_STRING 
41327: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
41328: LD_ADDR_OWVAR 35
41332: PUSH
41333: LD_INT 7
41335: NEG
41336: PPUSH
41337: LD_INT 7
41339: PPUSH
41340: CALL_OW 12
41344: ST_TO_ADDR
// animal := CreateHuman ;
41345: LD_ADDR_VAR 0 12
41349: PUSH
41350: CALL_OW 44
41354: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
41355: LD_VAR 0 12
41359: PPUSH
41360: LD_VAR 0 8
41364: PPUSH
41365: LD_INT 0
41367: PPUSH
41368: CALL 43334 0 3
// end ;
41372: GO 41309
41374: POP
41375: POP
// if apemans then
41376: LD_VAR 0 3
41380: IFFALSE 41503
// for i = 1 to apemans do
41382: LD_ADDR_VAR 0 11
41386: PUSH
41387: DOUBLE
41388: LD_INT 1
41390: DEC
41391: ST_TO_ADDR
41392: LD_VAR 0 3
41396: PUSH
41397: FOR_TO
41398: IFFALSE 41501
// begin hc_class = class_apeman ;
41400: LD_ADDR_OWVAR 28
41404: PUSH
41405: LD_INT 12
41407: ST_TO_ADDR
// hc_gallery =  ;
41408: LD_ADDR_OWVAR 33
41412: PUSH
41413: LD_STRING 
41415: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
41416: LD_ADDR_OWVAR 35
41420: PUSH
41421: LD_INT 5
41423: NEG
41424: PPUSH
41425: LD_INT 5
41427: PPUSH
41428: CALL_OW 12
41432: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
41433: LD_ADDR_OWVAR 31
41437: PUSH
41438: LD_INT 1
41440: PPUSH
41441: LD_INT 3
41443: PPUSH
41444: CALL_OW 12
41448: PUSH
41449: LD_INT 1
41451: PPUSH
41452: LD_INT 3
41454: PPUSH
41455: CALL_OW 12
41459: PUSH
41460: LD_INT 0
41462: PUSH
41463: LD_INT 0
41465: PUSH
41466: EMPTY
41467: LIST
41468: LIST
41469: LIST
41470: LIST
41471: ST_TO_ADDR
// animal := CreateHuman ;
41472: LD_ADDR_VAR 0 12
41476: PUSH
41477: CALL_OW 44
41481: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
41482: LD_VAR 0 12
41486: PPUSH
41487: LD_VAR 0 8
41491: PPUSH
41492: LD_INT 0
41494: PPUSH
41495: CALL 43334 0 3
// end ;
41499: GO 41397
41501: POP
41502: POP
// if enchidnas then
41503: LD_VAR 0 4
41507: IFFALSE 41574
// for i = 1 to enchidnas do
41509: LD_ADDR_VAR 0 11
41513: PUSH
41514: DOUBLE
41515: LD_INT 1
41517: DEC
41518: ST_TO_ADDR
41519: LD_VAR 0 4
41523: PUSH
41524: FOR_TO
41525: IFFALSE 41572
// begin hc_class = 13 ;
41527: LD_ADDR_OWVAR 28
41531: PUSH
41532: LD_INT 13
41534: ST_TO_ADDR
// hc_gallery =  ;
41535: LD_ADDR_OWVAR 33
41539: PUSH
41540: LD_STRING 
41542: ST_TO_ADDR
// animal := CreateHuman ;
41543: LD_ADDR_VAR 0 12
41547: PUSH
41548: CALL_OW 44
41552: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
41553: LD_VAR 0 12
41557: PPUSH
41558: LD_VAR 0 8
41562: PPUSH
41563: LD_INT 0
41565: PPUSH
41566: CALL 43334 0 3
// end ;
41570: GO 41524
41572: POP
41573: POP
// if fishes then
41574: LD_VAR 0 7
41578: IFFALSE 41645
// for i = 1 to fishes do
41580: LD_ADDR_VAR 0 11
41584: PUSH
41585: DOUBLE
41586: LD_INT 1
41588: DEC
41589: ST_TO_ADDR
41590: LD_VAR 0 7
41594: PUSH
41595: FOR_TO
41596: IFFALSE 41643
// begin hc_class = 20 ;
41598: LD_ADDR_OWVAR 28
41602: PUSH
41603: LD_INT 20
41605: ST_TO_ADDR
// hc_gallery =  ;
41606: LD_ADDR_OWVAR 33
41610: PUSH
41611: LD_STRING 
41613: ST_TO_ADDR
// animal := CreateHuman ;
41614: LD_ADDR_VAR 0 12
41618: PUSH
41619: CALL_OW 44
41623: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
41624: LD_VAR 0 12
41628: PPUSH
41629: LD_VAR 0 9
41633: PPUSH
41634: LD_INT 0
41636: PPUSH
41637: CALL 43334 0 3
// end ;
41641: GO 41595
41643: POP
41644: POP
// end ;
41645: LD_VAR 0 10
41649: RET
// export function WantHeal ( sci , unit ) ; begin
41650: LD_INT 0
41652: PPUSH
// if GetTaskList ( sci ) > 0 then
41653: LD_VAR 0 1
41657: PPUSH
41658: CALL_OW 437
41662: PUSH
41663: LD_INT 0
41665: GREATER
41666: IFFALSE 41736
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
41668: LD_VAR 0 1
41672: PPUSH
41673: CALL_OW 437
41677: PUSH
41678: LD_INT 1
41680: ARRAY
41681: PUSH
41682: LD_INT 1
41684: ARRAY
41685: PUSH
41686: LD_STRING l
41688: EQUAL
41689: PUSH
41690: LD_VAR 0 1
41694: PPUSH
41695: CALL_OW 437
41699: PUSH
41700: LD_INT 1
41702: ARRAY
41703: PUSH
41704: LD_INT 4
41706: ARRAY
41707: PUSH
41708: LD_VAR 0 2
41712: EQUAL
41713: AND
41714: IFFALSE 41726
// result := true else
41716: LD_ADDR_VAR 0 3
41720: PUSH
41721: LD_INT 1
41723: ST_TO_ADDR
41724: GO 41734
// result := false ;
41726: LD_ADDR_VAR 0 3
41730: PUSH
41731: LD_INT 0
41733: ST_TO_ADDR
// end else
41734: GO 41744
// result := false ;
41736: LD_ADDR_VAR 0 3
41740: PUSH
41741: LD_INT 0
41743: ST_TO_ADDR
// end ;
41744: LD_VAR 0 3
41748: RET
// export function HealTarget ( sci ) ; begin
41749: LD_INT 0
41751: PPUSH
// if not sci then
41752: LD_VAR 0 1
41756: NOT
41757: IFFALSE 41761
// exit ;
41759: GO 41826
// result := 0 ;
41761: LD_ADDR_VAR 0 2
41765: PUSH
41766: LD_INT 0
41768: ST_TO_ADDR
// if GetTaskList ( sci ) then
41769: LD_VAR 0 1
41773: PPUSH
41774: CALL_OW 437
41778: IFFALSE 41826
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
41780: LD_VAR 0 1
41784: PPUSH
41785: CALL_OW 437
41789: PUSH
41790: LD_INT 1
41792: ARRAY
41793: PUSH
41794: LD_INT 1
41796: ARRAY
41797: PUSH
41798: LD_STRING l
41800: EQUAL
41801: IFFALSE 41826
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
41803: LD_ADDR_VAR 0 2
41807: PUSH
41808: LD_VAR 0 1
41812: PPUSH
41813: CALL_OW 437
41817: PUSH
41818: LD_INT 1
41820: ARRAY
41821: PUSH
41822: LD_INT 4
41824: ARRAY
41825: ST_TO_ADDR
// end ;
41826: LD_VAR 0 2
41830: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
41831: LD_INT 0
41833: PPUSH
41834: PPUSH
41835: PPUSH
41836: PPUSH
// if not base_units then
41837: LD_VAR 0 1
41841: NOT
41842: IFFALSE 41846
// exit ;
41844: GO 41933
// result := false ;
41846: LD_ADDR_VAR 0 2
41850: PUSH
41851: LD_INT 0
41853: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
41854: LD_ADDR_VAR 0 5
41858: PUSH
41859: LD_VAR 0 1
41863: PPUSH
41864: LD_INT 21
41866: PUSH
41867: LD_INT 3
41869: PUSH
41870: EMPTY
41871: LIST
41872: LIST
41873: PPUSH
41874: CALL_OW 72
41878: ST_TO_ADDR
// if not tmp then
41879: LD_VAR 0 5
41883: NOT
41884: IFFALSE 41888
// exit ;
41886: GO 41933
// for i in tmp do
41888: LD_ADDR_VAR 0 3
41892: PUSH
41893: LD_VAR 0 5
41897: PUSH
41898: FOR_IN
41899: IFFALSE 41931
// begin result := EnemyInRange ( i , 22 ) ;
41901: LD_ADDR_VAR 0 2
41905: PUSH
41906: LD_VAR 0 3
41910: PPUSH
41911: LD_INT 22
41913: PPUSH
41914: CALL 40169 0 2
41918: ST_TO_ADDR
// if result then
41919: LD_VAR 0 2
41923: IFFALSE 41929
// exit ;
41925: POP
41926: POP
41927: GO 41933
// end ;
41929: GO 41898
41931: POP
41932: POP
// end ;
41933: LD_VAR 0 2
41937: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
41938: LD_INT 0
41940: PPUSH
41941: PPUSH
// if not units then
41942: LD_VAR 0 1
41946: NOT
41947: IFFALSE 41951
// exit ;
41949: GO 42021
// result := [ ] ;
41951: LD_ADDR_VAR 0 3
41955: PUSH
41956: EMPTY
41957: ST_TO_ADDR
// for i in units do
41958: LD_ADDR_VAR 0 4
41962: PUSH
41963: LD_VAR 0 1
41967: PUSH
41968: FOR_IN
41969: IFFALSE 42019
// if GetTag ( i ) = tag then
41971: LD_VAR 0 4
41975: PPUSH
41976: CALL_OW 110
41980: PUSH
41981: LD_VAR 0 2
41985: EQUAL
41986: IFFALSE 42017
// result := Insert ( result , result + 1 , i ) ;
41988: LD_ADDR_VAR 0 3
41992: PUSH
41993: LD_VAR 0 3
41997: PPUSH
41998: LD_VAR 0 3
42002: PUSH
42003: LD_INT 1
42005: PLUS
42006: PPUSH
42007: LD_VAR 0 4
42011: PPUSH
42012: CALL_OW 2
42016: ST_TO_ADDR
42017: GO 41968
42019: POP
42020: POP
// end ;
42021: LD_VAR 0 3
42025: RET
// export function IsDriver ( un ) ; begin
42026: LD_INT 0
42028: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
42029: LD_ADDR_VAR 0 2
42033: PUSH
42034: LD_VAR 0 1
42038: PUSH
42039: LD_INT 55
42041: PUSH
42042: EMPTY
42043: LIST
42044: PPUSH
42045: CALL_OW 69
42049: IN
42050: ST_TO_ADDR
// end ;
42051: LD_VAR 0 2
42055: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
42056: LD_INT 0
42058: PPUSH
42059: PPUSH
// list := [ ] ;
42060: LD_ADDR_VAR 0 5
42064: PUSH
42065: EMPTY
42066: ST_TO_ADDR
// case d of 0 :
42067: LD_VAR 0 3
42071: PUSH
42072: LD_INT 0
42074: DOUBLE
42075: EQUAL
42076: IFTRUE 42080
42078: GO 42213
42080: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
42081: LD_ADDR_VAR 0 5
42085: PUSH
42086: LD_VAR 0 1
42090: PUSH
42091: LD_INT 4
42093: MINUS
42094: PUSH
42095: LD_VAR 0 2
42099: PUSH
42100: LD_INT 4
42102: MINUS
42103: PUSH
42104: LD_INT 2
42106: PUSH
42107: EMPTY
42108: LIST
42109: LIST
42110: LIST
42111: PUSH
42112: LD_VAR 0 1
42116: PUSH
42117: LD_INT 3
42119: MINUS
42120: PUSH
42121: LD_VAR 0 2
42125: PUSH
42126: LD_INT 1
42128: PUSH
42129: EMPTY
42130: LIST
42131: LIST
42132: LIST
42133: PUSH
42134: LD_VAR 0 1
42138: PUSH
42139: LD_INT 4
42141: PLUS
42142: PUSH
42143: LD_VAR 0 2
42147: PUSH
42148: LD_INT 4
42150: PUSH
42151: EMPTY
42152: LIST
42153: LIST
42154: LIST
42155: PUSH
42156: LD_VAR 0 1
42160: PUSH
42161: LD_INT 3
42163: PLUS
42164: PUSH
42165: LD_VAR 0 2
42169: PUSH
42170: LD_INT 3
42172: PLUS
42173: PUSH
42174: LD_INT 5
42176: PUSH
42177: EMPTY
42178: LIST
42179: LIST
42180: LIST
42181: PUSH
42182: LD_VAR 0 1
42186: PUSH
42187: LD_VAR 0 2
42191: PUSH
42192: LD_INT 4
42194: PLUS
42195: PUSH
42196: LD_INT 0
42198: PUSH
42199: EMPTY
42200: LIST
42201: LIST
42202: LIST
42203: PUSH
42204: EMPTY
42205: LIST
42206: LIST
42207: LIST
42208: LIST
42209: LIST
42210: ST_TO_ADDR
// end ; 1 :
42211: GO 42911
42213: LD_INT 1
42215: DOUBLE
42216: EQUAL
42217: IFTRUE 42221
42219: GO 42354
42221: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
42222: LD_ADDR_VAR 0 5
42226: PUSH
42227: LD_VAR 0 1
42231: PUSH
42232: LD_VAR 0 2
42236: PUSH
42237: LD_INT 4
42239: MINUS
42240: PUSH
42241: LD_INT 3
42243: PUSH
42244: EMPTY
42245: LIST
42246: LIST
42247: LIST
42248: PUSH
42249: LD_VAR 0 1
42253: PUSH
42254: LD_INT 3
42256: MINUS
42257: PUSH
42258: LD_VAR 0 2
42262: PUSH
42263: LD_INT 3
42265: MINUS
42266: PUSH
42267: LD_INT 2
42269: PUSH
42270: EMPTY
42271: LIST
42272: LIST
42273: LIST
42274: PUSH
42275: LD_VAR 0 1
42279: PUSH
42280: LD_INT 4
42282: MINUS
42283: PUSH
42284: LD_VAR 0 2
42288: PUSH
42289: LD_INT 1
42291: PUSH
42292: EMPTY
42293: LIST
42294: LIST
42295: LIST
42296: PUSH
42297: LD_VAR 0 1
42301: PUSH
42302: LD_VAR 0 2
42306: PUSH
42307: LD_INT 3
42309: PLUS
42310: PUSH
42311: LD_INT 0
42313: PUSH
42314: EMPTY
42315: LIST
42316: LIST
42317: LIST
42318: PUSH
42319: LD_VAR 0 1
42323: PUSH
42324: LD_INT 4
42326: PLUS
42327: PUSH
42328: LD_VAR 0 2
42332: PUSH
42333: LD_INT 4
42335: PLUS
42336: PUSH
42337: LD_INT 5
42339: PUSH
42340: EMPTY
42341: LIST
42342: LIST
42343: LIST
42344: PUSH
42345: EMPTY
42346: LIST
42347: LIST
42348: LIST
42349: LIST
42350: LIST
42351: ST_TO_ADDR
// end ; 2 :
42352: GO 42911
42354: LD_INT 2
42356: DOUBLE
42357: EQUAL
42358: IFTRUE 42362
42360: GO 42491
42362: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
42363: LD_ADDR_VAR 0 5
42367: PUSH
42368: LD_VAR 0 1
42372: PUSH
42373: LD_VAR 0 2
42377: PUSH
42378: LD_INT 3
42380: MINUS
42381: PUSH
42382: LD_INT 3
42384: PUSH
42385: EMPTY
42386: LIST
42387: LIST
42388: LIST
42389: PUSH
42390: LD_VAR 0 1
42394: PUSH
42395: LD_INT 4
42397: PLUS
42398: PUSH
42399: LD_VAR 0 2
42403: PUSH
42404: LD_INT 4
42406: PUSH
42407: EMPTY
42408: LIST
42409: LIST
42410: LIST
42411: PUSH
42412: LD_VAR 0 1
42416: PUSH
42417: LD_VAR 0 2
42421: PUSH
42422: LD_INT 4
42424: PLUS
42425: PUSH
42426: LD_INT 0
42428: PUSH
42429: EMPTY
42430: LIST
42431: LIST
42432: LIST
42433: PUSH
42434: LD_VAR 0 1
42438: PUSH
42439: LD_INT 3
42441: MINUS
42442: PUSH
42443: LD_VAR 0 2
42447: PUSH
42448: LD_INT 1
42450: PUSH
42451: EMPTY
42452: LIST
42453: LIST
42454: LIST
42455: PUSH
42456: LD_VAR 0 1
42460: PUSH
42461: LD_INT 4
42463: MINUS
42464: PUSH
42465: LD_VAR 0 2
42469: PUSH
42470: LD_INT 4
42472: MINUS
42473: PUSH
42474: LD_INT 2
42476: PUSH
42477: EMPTY
42478: LIST
42479: LIST
42480: LIST
42481: PUSH
42482: EMPTY
42483: LIST
42484: LIST
42485: LIST
42486: LIST
42487: LIST
42488: ST_TO_ADDR
// end ; 3 :
42489: GO 42911
42491: LD_INT 3
42493: DOUBLE
42494: EQUAL
42495: IFTRUE 42499
42497: GO 42632
42499: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
42500: LD_ADDR_VAR 0 5
42504: PUSH
42505: LD_VAR 0 1
42509: PUSH
42510: LD_INT 3
42512: PLUS
42513: PUSH
42514: LD_VAR 0 2
42518: PUSH
42519: LD_INT 4
42521: PUSH
42522: EMPTY
42523: LIST
42524: LIST
42525: LIST
42526: PUSH
42527: LD_VAR 0 1
42531: PUSH
42532: LD_INT 4
42534: PLUS
42535: PUSH
42536: LD_VAR 0 2
42540: PUSH
42541: LD_INT 4
42543: PLUS
42544: PUSH
42545: LD_INT 5
42547: PUSH
42548: EMPTY
42549: LIST
42550: LIST
42551: LIST
42552: PUSH
42553: LD_VAR 0 1
42557: PUSH
42558: LD_INT 4
42560: MINUS
42561: PUSH
42562: LD_VAR 0 2
42566: PUSH
42567: LD_INT 1
42569: PUSH
42570: EMPTY
42571: LIST
42572: LIST
42573: LIST
42574: PUSH
42575: LD_VAR 0 1
42579: PUSH
42580: LD_VAR 0 2
42584: PUSH
42585: LD_INT 4
42587: MINUS
42588: PUSH
42589: LD_INT 3
42591: PUSH
42592: EMPTY
42593: LIST
42594: LIST
42595: LIST
42596: PUSH
42597: LD_VAR 0 1
42601: PUSH
42602: LD_INT 3
42604: MINUS
42605: PUSH
42606: LD_VAR 0 2
42610: PUSH
42611: LD_INT 3
42613: MINUS
42614: PUSH
42615: LD_INT 2
42617: PUSH
42618: EMPTY
42619: LIST
42620: LIST
42621: LIST
42622: PUSH
42623: EMPTY
42624: LIST
42625: LIST
42626: LIST
42627: LIST
42628: LIST
42629: ST_TO_ADDR
// end ; 4 :
42630: GO 42911
42632: LD_INT 4
42634: DOUBLE
42635: EQUAL
42636: IFTRUE 42640
42638: GO 42773
42640: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
42641: LD_ADDR_VAR 0 5
42645: PUSH
42646: LD_VAR 0 1
42650: PUSH
42651: LD_VAR 0 2
42655: PUSH
42656: LD_INT 4
42658: PLUS
42659: PUSH
42660: LD_INT 0
42662: PUSH
42663: EMPTY
42664: LIST
42665: LIST
42666: LIST
42667: PUSH
42668: LD_VAR 0 1
42672: PUSH
42673: LD_INT 3
42675: PLUS
42676: PUSH
42677: LD_VAR 0 2
42681: PUSH
42682: LD_INT 3
42684: PLUS
42685: PUSH
42686: LD_INT 5
42688: PUSH
42689: EMPTY
42690: LIST
42691: LIST
42692: LIST
42693: PUSH
42694: LD_VAR 0 1
42698: PUSH
42699: LD_INT 4
42701: PLUS
42702: PUSH
42703: LD_VAR 0 2
42707: PUSH
42708: LD_INT 4
42710: PUSH
42711: EMPTY
42712: LIST
42713: LIST
42714: LIST
42715: PUSH
42716: LD_VAR 0 1
42720: PUSH
42721: LD_VAR 0 2
42725: PUSH
42726: LD_INT 3
42728: MINUS
42729: PUSH
42730: LD_INT 3
42732: PUSH
42733: EMPTY
42734: LIST
42735: LIST
42736: LIST
42737: PUSH
42738: LD_VAR 0 1
42742: PUSH
42743: LD_INT 4
42745: MINUS
42746: PUSH
42747: LD_VAR 0 2
42751: PUSH
42752: LD_INT 4
42754: MINUS
42755: PUSH
42756: LD_INT 2
42758: PUSH
42759: EMPTY
42760: LIST
42761: LIST
42762: LIST
42763: PUSH
42764: EMPTY
42765: LIST
42766: LIST
42767: LIST
42768: LIST
42769: LIST
42770: ST_TO_ADDR
// end ; 5 :
42771: GO 42911
42773: LD_INT 5
42775: DOUBLE
42776: EQUAL
42777: IFTRUE 42781
42779: GO 42910
42781: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
42782: LD_ADDR_VAR 0 5
42786: PUSH
42787: LD_VAR 0 1
42791: PUSH
42792: LD_INT 4
42794: MINUS
42795: PUSH
42796: LD_VAR 0 2
42800: PUSH
42801: LD_INT 1
42803: PUSH
42804: EMPTY
42805: LIST
42806: LIST
42807: LIST
42808: PUSH
42809: LD_VAR 0 1
42813: PUSH
42814: LD_VAR 0 2
42818: PUSH
42819: LD_INT 4
42821: MINUS
42822: PUSH
42823: LD_INT 3
42825: PUSH
42826: EMPTY
42827: LIST
42828: LIST
42829: LIST
42830: PUSH
42831: LD_VAR 0 1
42835: PUSH
42836: LD_INT 4
42838: PLUS
42839: PUSH
42840: LD_VAR 0 2
42844: PUSH
42845: LD_INT 4
42847: PLUS
42848: PUSH
42849: LD_INT 5
42851: PUSH
42852: EMPTY
42853: LIST
42854: LIST
42855: LIST
42856: PUSH
42857: LD_VAR 0 1
42861: PUSH
42862: LD_INT 3
42864: PLUS
42865: PUSH
42866: LD_VAR 0 2
42870: PUSH
42871: LD_INT 4
42873: PUSH
42874: EMPTY
42875: LIST
42876: LIST
42877: LIST
42878: PUSH
42879: LD_VAR 0 1
42883: PUSH
42884: LD_VAR 0 2
42888: PUSH
42889: LD_INT 3
42891: PLUS
42892: PUSH
42893: LD_INT 0
42895: PUSH
42896: EMPTY
42897: LIST
42898: LIST
42899: LIST
42900: PUSH
42901: EMPTY
42902: LIST
42903: LIST
42904: LIST
42905: LIST
42906: LIST
42907: ST_TO_ADDR
// end ; end ;
42908: GO 42911
42910: POP
// result := list ;
42911: LD_ADDR_VAR 0 4
42915: PUSH
42916: LD_VAR 0 5
42920: ST_TO_ADDR
// end ;
42921: LD_VAR 0 4
42925: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
42926: LD_INT 0
42928: PPUSH
42929: PPUSH
42930: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
42931: LD_VAR 0 1
42935: NOT
42936: PUSH
42937: LD_VAR 0 2
42941: PUSH
42942: LD_INT 1
42944: PUSH
42945: LD_INT 2
42947: PUSH
42948: LD_INT 3
42950: PUSH
42951: LD_INT 4
42953: PUSH
42954: EMPTY
42955: LIST
42956: LIST
42957: LIST
42958: LIST
42959: IN
42960: NOT
42961: OR
42962: IFFALSE 42966
// exit ;
42964: GO 43058
// tmp := [ ] ;
42966: LD_ADDR_VAR 0 5
42970: PUSH
42971: EMPTY
42972: ST_TO_ADDR
// for i in units do
42973: LD_ADDR_VAR 0 4
42977: PUSH
42978: LD_VAR 0 1
42982: PUSH
42983: FOR_IN
42984: IFFALSE 43027
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
42986: LD_ADDR_VAR 0 5
42990: PUSH
42991: LD_VAR 0 5
42995: PPUSH
42996: LD_VAR 0 5
43000: PUSH
43001: LD_INT 1
43003: PLUS
43004: PPUSH
43005: LD_VAR 0 4
43009: PPUSH
43010: LD_VAR 0 2
43014: PPUSH
43015: CALL_OW 259
43019: PPUSH
43020: CALL_OW 2
43024: ST_TO_ADDR
43025: GO 42983
43027: POP
43028: POP
// if not tmp then
43029: LD_VAR 0 5
43033: NOT
43034: IFFALSE 43038
// exit ;
43036: GO 43058
// result := SortListByListDesc ( units , tmp ) ;
43038: LD_ADDR_VAR 0 3
43042: PUSH
43043: LD_VAR 0 1
43047: PPUSH
43048: LD_VAR 0 5
43052: PPUSH
43053: CALL_OW 77
43057: ST_TO_ADDR
// end ;
43058: LD_VAR 0 3
43062: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
43063: LD_INT 0
43065: PPUSH
43066: PPUSH
43067: PPUSH
// result := false ;
43068: LD_ADDR_VAR 0 3
43072: PUSH
43073: LD_INT 0
43075: ST_TO_ADDR
// x := GetX ( building ) ;
43076: LD_ADDR_VAR 0 4
43080: PUSH
43081: LD_VAR 0 2
43085: PPUSH
43086: CALL_OW 250
43090: ST_TO_ADDR
// y := GetY ( building ) ;
43091: LD_ADDR_VAR 0 5
43095: PUSH
43096: LD_VAR 0 2
43100: PPUSH
43101: CALL_OW 251
43105: ST_TO_ADDR
// if not building or not x or not y then
43106: LD_VAR 0 2
43110: NOT
43111: PUSH
43112: LD_VAR 0 4
43116: NOT
43117: OR
43118: PUSH
43119: LD_VAR 0 5
43123: NOT
43124: OR
43125: IFFALSE 43129
// exit ;
43127: GO 43221
// if GetTaskList ( unit ) then
43129: LD_VAR 0 1
43133: PPUSH
43134: CALL_OW 437
43138: IFFALSE 43221
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
43140: LD_STRING e
43142: PUSH
43143: LD_VAR 0 1
43147: PPUSH
43148: CALL_OW 437
43152: PUSH
43153: LD_INT 1
43155: ARRAY
43156: PUSH
43157: LD_INT 1
43159: ARRAY
43160: EQUAL
43161: PUSH
43162: LD_VAR 0 4
43166: PUSH
43167: LD_VAR 0 1
43171: PPUSH
43172: CALL_OW 437
43176: PUSH
43177: LD_INT 1
43179: ARRAY
43180: PUSH
43181: LD_INT 2
43183: ARRAY
43184: EQUAL
43185: AND
43186: PUSH
43187: LD_VAR 0 5
43191: PUSH
43192: LD_VAR 0 1
43196: PPUSH
43197: CALL_OW 437
43201: PUSH
43202: LD_INT 1
43204: ARRAY
43205: PUSH
43206: LD_INT 3
43208: ARRAY
43209: EQUAL
43210: AND
43211: IFFALSE 43221
// result := true end ;
43213: LD_ADDR_VAR 0 3
43217: PUSH
43218: LD_INT 1
43220: ST_TO_ADDR
// end ;
43221: LD_VAR 0 3
43225: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
43226: LD_INT 0
43228: PPUSH
// result := false ;
43229: LD_ADDR_VAR 0 4
43233: PUSH
43234: LD_INT 0
43236: ST_TO_ADDR
// if GetTaskList ( unit ) then
43237: LD_VAR 0 1
43241: PPUSH
43242: CALL_OW 437
43246: IFFALSE 43329
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
43248: LD_STRING M
43250: PUSH
43251: LD_VAR 0 1
43255: PPUSH
43256: CALL_OW 437
43260: PUSH
43261: LD_INT 1
43263: ARRAY
43264: PUSH
43265: LD_INT 1
43267: ARRAY
43268: EQUAL
43269: PUSH
43270: LD_VAR 0 2
43274: PUSH
43275: LD_VAR 0 1
43279: PPUSH
43280: CALL_OW 437
43284: PUSH
43285: LD_INT 1
43287: ARRAY
43288: PUSH
43289: LD_INT 2
43291: ARRAY
43292: EQUAL
43293: AND
43294: PUSH
43295: LD_VAR 0 3
43299: PUSH
43300: LD_VAR 0 1
43304: PPUSH
43305: CALL_OW 437
43309: PUSH
43310: LD_INT 1
43312: ARRAY
43313: PUSH
43314: LD_INT 3
43316: ARRAY
43317: EQUAL
43318: AND
43319: IFFALSE 43329
// result := true ;
43321: LD_ADDR_VAR 0 4
43325: PUSH
43326: LD_INT 1
43328: ST_TO_ADDR
// end ; end ;
43329: LD_VAR 0 4
43333: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
43334: LD_INT 0
43336: PPUSH
43337: PPUSH
43338: PPUSH
43339: PPUSH
// if not unit or not area then
43340: LD_VAR 0 1
43344: NOT
43345: PUSH
43346: LD_VAR 0 2
43350: NOT
43351: OR
43352: IFFALSE 43356
// exit ;
43354: GO 43520
// tmp := AreaToList ( area , i ) ;
43356: LD_ADDR_VAR 0 6
43360: PUSH
43361: LD_VAR 0 2
43365: PPUSH
43366: LD_VAR 0 5
43370: PPUSH
43371: CALL_OW 517
43375: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
43376: LD_ADDR_VAR 0 5
43380: PUSH
43381: DOUBLE
43382: LD_INT 1
43384: DEC
43385: ST_TO_ADDR
43386: LD_VAR 0 6
43390: PUSH
43391: LD_INT 1
43393: ARRAY
43394: PUSH
43395: FOR_TO
43396: IFFALSE 43518
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
43398: LD_ADDR_VAR 0 7
43402: PUSH
43403: LD_VAR 0 6
43407: PUSH
43408: LD_INT 1
43410: ARRAY
43411: PUSH
43412: LD_VAR 0 5
43416: ARRAY
43417: PUSH
43418: LD_VAR 0 6
43422: PUSH
43423: LD_INT 2
43425: ARRAY
43426: PUSH
43427: LD_VAR 0 5
43431: ARRAY
43432: PUSH
43433: EMPTY
43434: LIST
43435: LIST
43436: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
43437: LD_VAR 0 7
43441: PUSH
43442: LD_INT 1
43444: ARRAY
43445: PPUSH
43446: LD_VAR 0 7
43450: PUSH
43451: LD_INT 2
43453: ARRAY
43454: PPUSH
43455: CALL_OW 428
43459: PUSH
43460: LD_INT 0
43462: EQUAL
43463: IFFALSE 43516
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
43465: LD_VAR 0 1
43469: PPUSH
43470: LD_VAR 0 7
43474: PUSH
43475: LD_INT 1
43477: ARRAY
43478: PPUSH
43479: LD_VAR 0 7
43483: PUSH
43484: LD_INT 2
43486: ARRAY
43487: PPUSH
43488: LD_VAR 0 3
43492: PPUSH
43493: CALL_OW 48
// result := IsPlaced ( unit ) ;
43497: LD_ADDR_VAR 0 4
43501: PUSH
43502: LD_VAR 0 1
43506: PPUSH
43507: CALL_OW 305
43511: ST_TO_ADDR
// exit ;
43512: POP
43513: POP
43514: GO 43520
// end ; end ;
43516: GO 43395
43518: POP
43519: POP
// end ;
43520: LD_VAR 0 4
43524: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
43525: LD_INT 0
43527: PPUSH
43528: PPUSH
43529: PPUSH
// if not side or side > 8 then
43530: LD_VAR 0 1
43534: NOT
43535: PUSH
43536: LD_VAR 0 1
43540: PUSH
43541: LD_INT 8
43543: GREATER
43544: OR
43545: IFFALSE 43549
// exit ;
43547: GO 43736
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
43549: LD_ADDR_VAR 0 4
43553: PUSH
43554: LD_INT 22
43556: PUSH
43557: LD_VAR 0 1
43561: PUSH
43562: EMPTY
43563: LIST
43564: LIST
43565: PUSH
43566: LD_INT 21
43568: PUSH
43569: LD_INT 3
43571: PUSH
43572: EMPTY
43573: LIST
43574: LIST
43575: PUSH
43576: EMPTY
43577: LIST
43578: LIST
43579: PPUSH
43580: CALL_OW 69
43584: ST_TO_ADDR
// if not tmp then
43585: LD_VAR 0 4
43589: NOT
43590: IFFALSE 43594
// exit ;
43592: GO 43736
// enable_addtolog := true ;
43594: LD_ADDR_OWVAR 81
43598: PUSH
43599: LD_INT 1
43601: ST_TO_ADDR
// AddToLog ( [ ) ;
43602: LD_STRING [
43604: PPUSH
43605: CALL_OW 561
// for i in tmp do
43609: LD_ADDR_VAR 0 3
43613: PUSH
43614: LD_VAR 0 4
43618: PUSH
43619: FOR_IN
43620: IFFALSE 43727
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
43622: LD_STRING [
43624: PUSH
43625: LD_VAR 0 3
43629: PPUSH
43630: CALL_OW 266
43634: STR
43635: PUSH
43636: LD_STRING , 
43638: STR
43639: PUSH
43640: LD_VAR 0 3
43644: PPUSH
43645: CALL_OW 250
43649: STR
43650: PUSH
43651: LD_STRING , 
43653: STR
43654: PUSH
43655: LD_VAR 0 3
43659: PPUSH
43660: CALL_OW 251
43664: STR
43665: PUSH
43666: LD_STRING , 
43668: STR
43669: PUSH
43670: LD_VAR 0 3
43674: PPUSH
43675: CALL_OW 254
43679: STR
43680: PUSH
43681: LD_STRING , 
43683: STR
43684: PUSH
43685: LD_VAR 0 3
43689: PPUSH
43690: LD_INT 1
43692: PPUSH
43693: CALL_OW 268
43697: STR
43698: PUSH
43699: LD_STRING , 
43701: STR
43702: PUSH
43703: LD_VAR 0 3
43707: PPUSH
43708: LD_INT 2
43710: PPUSH
43711: CALL_OW 268
43715: STR
43716: PUSH
43717: LD_STRING ],
43719: STR
43720: PPUSH
43721: CALL_OW 561
// end ;
43725: GO 43619
43727: POP
43728: POP
// AddToLog ( ]; ) ;
43729: LD_STRING ];
43731: PPUSH
43732: CALL_OW 561
// end ;
43736: LD_VAR 0 2
43740: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
43741: LD_INT 0
43743: PPUSH
43744: PPUSH
43745: PPUSH
43746: PPUSH
43747: PPUSH
// if not area or not rate or not max then
43748: LD_VAR 0 1
43752: NOT
43753: PUSH
43754: LD_VAR 0 2
43758: NOT
43759: OR
43760: PUSH
43761: LD_VAR 0 4
43765: NOT
43766: OR
43767: IFFALSE 43771
// exit ;
43769: GO 43963
// while 1 do
43771: LD_INT 1
43773: IFFALSE 43963
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
43775: LD_ADDR_VAR 0 9
43779: PUSH
43780: LD_VAR 0 1
43784: PPUSH
43785: LD_INT 1
43787: PPUSH
43788: CALL_OW 287
43792: PUSH
43793: LD_INT 10
43795: MUL
43796: ST_TO_ADDR
// r := rate / 10 ;
43797: LD_ADDR_VAR 0 7
43801: PUSH
43802: LD_VAR 0 2
43806: PUSH
43807: LD_INT 10
43809: DIVREAL
43810: ST_TO_ADDR
// time := 1 1$00 ;
43811: LD_ADDR_VAR 0 8
43815: PUSH
43816: LD_INT 2100
43818: ST_TO_ADDR
// if amount < min then
43819: LD_VAR 0 9
43823: PUSH
43824: LD_VAR 0 3
43828: LESS
43829: IFFALSE 43847
// r := r * 2 else
43831: LD_ADDR_VAR 0 7
43835: PUSH
43836: LD_VAR 0 7
43840: PUSH
43841: LD_INT 2
43843: MUL
43844: ST_TO_ADDR
43845: GO 43873
// if amount > max then
43847: LD_VAR 0 9
43851: PUSH
43852: LD_VAR 0 4
43856: GREATER
43857: IFFALSE 43873
// r := r / 2 ;
43859: LD_ADDR_VAR 0 7
43863: PUSH
43864: LD_VAR 0 7
43868: PUSH
43869: LD_INT 2
43871: DIVREAL
43872: ST_TO_ADDR
// time := time / r ;
43873: LD_ADDR_VAR 0 8
43877: PUSH
43878: LD_VAR 0 8
43882: PUSH
43883: LD_VAR 0 7
43887: DIVREAL
43888: ST_TO_ADDR
// if time < 0 then
43889: LD_VAR 0 8
43893: PUSH
43894: LD_INT 0
43896: LESS
43897: IFFALSE 43914
// time := time * - 1 ;
43899: LD_ADDR_VAR 0 8
43903: PUSH
43904: LD_VAR 0 8
43908: PUSH
43909: LD_INT 1
43911: NEG
43912: MUL
43913: ST_TO_ADDR
// wait ( time ) ;
43914: LD_VAR 0 8
43918: PPUSH
43919: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
43923: LD_INT 35
43925: PPUSH
43926: LD_INT 875
43928: PPUSH
43929: CALL_OW 12
43933: PPUSH
43934: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
43938: LD_INT 1
43940: PPUSH
43941: LD_INT 5
43943: PPUSH
43944: CALL_OW 12
43948: PPUSH
43949: LD_VAR 0 1
43953: PPUSH
43954: LD_INT 1
43956: PPUSH
43957: CALL_OW 55
// end ;
43961: GO 43771
// end ;
43963: LD_VAR 0 5
43967: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
43968: LD_INT 0
43970: PPUSH
43971: PPUSH
43972: PPUSH
43973: PPUSH
43974: PPUSH
43975: PPUSH
43976: PPUSH
43977: PPUSH
// if not turrets or not factories then
43978: LD_VAR 0 1
43982: NOT
43983: PUSH
43984: LD_VAR 0 2
43988: NOT
43989: OR
43990: IFFALSE 43994
// exit ;
43992: GO 44301
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
43994: LD_ADDR_VAR 0 10
43998: PUSH
43999: LD_INT 5
44001: PUSH
44002: LD_INT 6
44004: PUSH
44005: EMPTY
44006: LIST
44007: LIST
44008: PUSH
44009: LD_INT 2
44011: PUSH
44012: LD_INT 4
44014: PUSH
44015: EMPTY
44016: LIST
44017: LIST
44018: PUSH
44019: LD_INT 3
44021: PUSH
44022: LD_INT 5
44024: PUSH
44025: EMPTY
44026: LIST
44027: LIST
44028: PUSH
44029: EMPTY
44030: LIST
44031: LIST
44032: LIST
44033: PUSH
44034: LD_INT 24
44036: PUSH
44037: LD_INT 25
44039: PUSH
44040: EMPTY
44041: LIST
44042: LIST
44043: PUSH
44044: LD_INT 23
44046: PUSH
44047: LD_INT 27
44049: PUSH
44050: EMPTY
44051: LIST
44052: LIST
44053: PUSH
44054: EMPTY
44055: LIST
44056: LIST
44057: PUSH
44058: LD_INT 42
44060: PUSH
44061: LD_INT 43
44063: PUSH
44064: EMPTY
44065: LIST
44066: LIST
44067: PUSH
44068: LD_INT 44
44070: PUSH
44071: LD_INT 46
44073: PUSH
44074: EMPTY
44075: LIST
44076: LIST
44077: PUSH
44078: LD_INT 45
44080: PUSH
44081: LD_INT 47
44083: PUSH
44084: EMPTY
44085: LIST
44086: LIST
44087: PUSH
44088: EMPTY
44089: LIST
44090: LIST
44091: LIST
44092: PUSH
44093: EMPTY
44094: LIST
44095: LIST
44096: LIST
44097: ST_TO_ADDR
// result := [ ] ;
44098: LD_ADDR_VAR 0 3
44102: PUSH
44103: EMPTY
44104: ST_TO_ADDR
// for i in turrets do
44105: LD_ADDR_VAR 0 4
44109: PUSH
44110: LD_VAR 0 1
44114: PUSH
44115: FOR_IN
44116: IFFALSE 44299
// begin nat := GetNation ( i ) ;
44118: LD_ADDR_VAR 0 7
44122: PUSH
44123: LD_VAR 0 4
44127: PPUSH
44128: CALL_OW 248
44132: ST_TO_ADDR
// weapon := 0 ;
44133: LD_ADDR_VAR 0 8
44137: PUSH
44138: LD_INT 0
44140: ST_TO_ADDR
// if not nat then
44141: LD_VAR 0 7
44145: NOT
44146: IFFALSE 44150
// continue ;
44148: GO 44115
// for j in list [ nat ] do
44150: LD_ADDR_VAR 0 5
44154: PUSH
44155: LD_VAR 0 10
44159: PUSH
44160: LD_VAR 0 7
44164: ARRAY
44165: PUSH
44166: FOR_IN
44167: IFFALSE 44208
// if GetBWeapon ( i ) = j [ 1 ] then
44169: LD_VAR 0 4
44173: PPUSH
44174: CALL_OW 269
44178: PUSH
44179: LD_VAR 0 5
44183: PUSH
44184: LD_INT 1
44186: ARRAY
44187: EQUAL
44188: IFFALSE 44206
// begin weapon := j [ 2 ] ;
44190: LD_ADDR_VAR 0 8
44194: PUSH
44195: LD_VAR 0 5
44199: PUSH
44200: LD_INT 2
44202: ARRAY
44203: ST_TO_ADDR
// break ;
44204: GO 44208
// end ;
44206: GO 44166
44208: POP
44209: POP
// if not weapon then
44210: LD_VAR 0 8
44214: NOT
44215: IFFALSE 44219
// continue ;
44217: GO 44115
// for k in factories do
44219: LD_ADDR_VAR 0 6
44223: PUSH
44224: LD_VAR 0 2
44228: PUSH
44229: FOR_IN
44230: IFFALSE 44295
// begin weapons := AvailableWeaponList ( k ) ;
44232: LD_ADDR_VAR 0 9
44236: PUSH
44237: LD_VAR 0 6
44241: PPUSH
44242: CALL_OW 478
44246: ST_TO_ADDR
// if not weapons then
44247: LD_VAR 0 9
44251: NOT
44252: IFFALSE 44256
// continue ;
44254: GO 44229
// if weapon in weapons then
44256: LD_VAR 0 8
44260: PUSH
44261: LD_VAR 0 9
44265: IN
44266: IFFALSE 44293
// begin result := [ i , weapon ] ;
44268: LD_ADDR_VAR 0 3
44272: PUSH
44273: LD_VAR 0 4
44277: PUSH
44278: LD_VAR 0 8
44282: PUSH
44283: EMPTY
44284: LIST
44285: LIST
44286: ST_TO_ADDR
// exit ;
44287: POP
44288: POP
44289: POP
44290: POP
44291: GO 44301
// end ; end ;
44293: GO 44229
44295: POP
44296: POP
// end ;
44297: GO 44115
44299: POP
44300: POP
// end ;
44301: LD_VAR 0 3
44305: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
44306: LD_INT 0
44308: PPUSH
// if not side or side > 8 then
44309: LD_VAR 0 3
44313: NOT
44314: PUSH
44315: LD_VAR 0 3
44319: PUSH
44320: LD_INT 8
44322: GREATER
44323: OR
44324: IFFALSE 44328
// exit ;
44326: GO 44387
// if not range then
44328: LD_VAR 0 4
44332: NOT
44333: IFFALSE 44344
// range := - 12 ;
44335: LD_ADDR_VAR 0 4
44339: PUSH
44340: LD_INT 12
44342: NEG
44343: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
44344: LD_VAR 0 1
44348: PPUSH
44349: LD_VAR 0 2
44353: PPUSH
44354: LD_VAR 0 3
44358: PPUSH
44359: LD_VAR 0 4
44363: PPUSH
44364: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
44368: LD_VAR 0 1
44372: PPUSH
44373: LD_VAR 0 2
44377: PPUSH
44378: LD_VAR 0 3
44382: PPUSH
44383: CALL_OW 331
// end ;
44387: LD_VAR 0 5
44391: RET
// export function Video ( mode ) ; begin
44392: LD_INT 0
44394: PPUSH
// ingame_video = mode ;
44395: LD_ADDR_OWVAR 52
44399: PUSH
44400: LD_VAR 0 1
44404: ST_TO_ADDR
// interface_hidden = mode ;
44405: LD_ADDR_OWVAR 54
44409: PUSH
44410: LD_VAR 0 1
44414: ST_TO_ADDR
// end ;
44415: LD_VAR 0 2
44419: RET
// export function Join ( array , element ) ; begin
44420: LD_INT 0
44422: PPUSH
// result := Replace ( array , array + 1 , element ) ;
44423: LD_ADDR_VAR 0 3
44427: PUSH
44428: LD_VAR 0 1
44432: PPUSH
44433: LD_VAR 0 1
44437: PUSH
44438: LD_INT 1
44440: PLUS
44441: PPUSH
44442: LD_VAR 0 2
44446: PPUSH
44447: CALL_OW 1
44451: ST_TO_ADDR
// end ;
44452: LD_VAR 0 3
44456: RET
// export function JoinUnion ( array , element ) ; begin
44457: LD_INT 0
44459: PPUSH
// result := array union element ;
44460: LD_ADDR_VAR 0 3
44464: PUSH
44465: LD_VAR 0 1
44469: PUSH
44470: LD_VAR 0 2
44474: UNION
44475: ST_TO_ADDR
// end ;
44476: LD_VAR 0 3
44480: RET
// export function GetBehemoths ( side ) ; begin
44481: LD_INT 0
44483: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
44484: LD_ADDR_VAR 0 2
44488: PUSH
44489: LD_INT 22
44491: PUSH
44492: LD_VAR 0 1
44496: PUSH
44497: EMPTY
44498: LIST
44499: LIST
44500: PUSH
44501: LD_INT 31
44503: PUSH
44504: LD_INT 25
44506: PUSH
44507: EMPTY
44508: LIST
44509: LIST
44510: PUSH
44511: EMPTY
44512: LIST
44513: LIST
44514: PPUSH
44515: CALL_OW 69
44519: ST_TO_ADDR
// end ;
44520: LD_VAR 0 2
44524: RET
// export function Shuffle ( array ) ; var i , index ; begin
44525: LD_INT 0
44527: PPUSH
44528: PPUSH
44529: PPUSH
// result := [ ] ;
44530: LD_ADDR_VAR 0 2
44534: PUSH
44535: EMPTY
44536: ST_TO_ADDR
// if not array then
44537: LD_VAR 0 1
44541: NOT
44542: IFFALSE 44546
// exit ;
44544: GO 44645
// Randomize ;
44546: CALL_OW 10
// for i = array downto 1 do
44550: LD_ADDR_VAR 0 3
44554: PUSH
44555: DOUBLE
44556: LD_VAR 0 1
44560: INC
44561: ST_TO_ADDR
44562: LD_INT 1
44564: PUSH
44565: FOR_DOWNTO
44566: IFFALSE 44643
// begin index := rand ( 1 , array ) ;
44568: LD_ADDR_VAR 0 4
44572: PUSH
44573: LD_INT 1
44575: PPUSH
44576: LD_VAR 0 1
44580: PPUSH
44581: CALL_OW 12
44585: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
44586: LD_ADDR_VAR 0 2
44590: PUSH
44591: LD_VAR 0 2
44595: PPUSH
44596: LD_VAR 0 2
44600: PUSH
44601: LD_INT 1
44603: PLUS
44604: PPUSH
44605: LD_VAR 0 1
44609: PUSH
44610: LD_VAR 0 4
44614: ARRAY
44615: PPUSH
44616: CALL_OW 2
44620: ST_TO_ADDR
// array := Delete ( array , index ) ;
44621: LD_ADDR_VAR 0 1
44625: PUSH
44626: LD_VAR 0 1
44630: PPUSH
44631: LD_VAR 0 4
44635: PPUSH
44636: CALL_OW 3
44640: ST_TO_ADDR
// end ;
44641: GO 44565
44643: POP
44644: POP
// end ;
44645: LD_VAR 0 2
44649: RET
// export function GetBaseMaterials ( base ) ; begin
44650: LD_INT 0
44652: PPUSH
// result := [ 0 , 0 , 0 ] ;
44653: LD_ADDR_VAR 0 2
44657: PUSH
44658: LD_INT 0
44660: PUSH
44661: LD_INT 0
44663: PUSH
44664: LD_INT 0
44666: PUSH
44667: EMPTY
44668: LIST
44669: LIST
44670: LIST
44671: ST_TO_ADDR
// if not base then
44672: LD_VAR 0 1
44676: NOT
44677: IFFALSE 44681
// exit ;
44679: GO 44730
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
44681: LD_ADDR_VAR 0 2
44685: PUSH
44686: LD_VAR 0 1
44690: PPUSH
44691: LD_INT 1
44693: PPUSH
44694: CALL_OW 275
44698: PUSH
44699: LD_VAR 0 1
44703: PPUSH
44704: LD_INT 2
44706: PPUSH
44707: CALL_OW 275
44711: PUSH
44712: LD_VAR 0 1
44716: PPUSH
44717: LD_INT 3
44719: PPUSH
44720: CALL_OW 275
44724: PUSH
44725: EMPTY
44726: LIST
44727: LIST
44728: LIST
44729: ST_TO_ADDR
// end ;
44730: LD_VAR 0 2
44734: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
44735: LD_INT 0
44737: PPUSH
44738: PPUSH
// result := array ;
44739: LD_ADDR_VAR 0 3
44743: PUSH
44744: LD_VAR 0 1
44748: ST_TO_ADDR
// if size > 0 then
44749: LD_VAR 0 2
44753: PUSH
44754: LD_INT 0
44756: GREATER
44757: IFFALSE 44803
// for i := array downto size do
44759: LD_ADDR_VAR 0 4
44763: PUSH
44764: DOUBLE
44765: LD_VAR 0 1
44769: INC
44770: ST_TO_ADDR
44771: LD_VAR 0 2
44775: PUSH
44776: FOR_DOWNTO
44777: IFFALSE 44801
// result := Delete ( result , result ) ;
44779: LD_ADDR_VAR 0 3
44783: PUSH
44784: LD_VAR 0 3
44788: PPUSH
44789: LD_VAR 0 3
44793: PPUSH
44794: CALL_OW 3
44798: ST_TO_ADDR
44799: GO 44776
44801: POP
44802: POP
// end ;
44803: LD_VAR 0 3
44807: RET
// export function ComExit ( unit ) ; var tmp ; begin
44808: LD_INT 0
44810: PPUSH
44811: PPUSH
// if not IsInUnit ( unit ) then
44812: LD_VAR 0 1
44816: PPUSH
44817: CALL_OW 310
44821: NOT
44822: IFFALSE 44826
// exit ;
44824: GO 44886
// tmp := IsInUnit ( unit ) ;
44826: LD_ADDR_VAR 0 3
44830: PUSH
44831: LD_VAR 0 1
44835: PPUSH
44836: CALL_OW 310
44840: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
44841: LD_VAR 0 3
44845: PPUSH
44846: CALL_OW 247
44850: PUSH
44851: LD_INT 2
44853: EQUAL
44854: IFFALSE 44867
// ComExitVehicle ( unit ) else
44856: LD_VAR 0 1
44860: PPUSH
44861: CALL_OW 121
44865: GO 44876
// ComExitBuilding ( unit ) ;
44867: LD_VAR 0 1
44871: PPUSH
44872: CALL_OW 122
// result := tmp ;
44876: LD_ADDR_VAR 0 2
44880: PUSH
44881: LD_VAR 0 3
44885: ST_TO_ADDR
// end ;
44886: LD_VAR 0 2
44890: RET
// export function ComExitAll ( units ) ; var i ; begin
44891: LD_INT 0
44893: PPUSH
44894: PPUSH
// if not units then
44895: LD_VAR 0 1
44899: NOT
44900: IFFALSE 44904
// exit ;
44902: GO 44930
// for i in units do
44904: LD_ADDR_VAR 0 3
44908: PUSH
44909: LD_VAR 0 1
44913: PUSH
44914: FOR_IN
44915: IFFALSE 44928
// ComExit ( i ) ;
44917: LD_VAR 0 3
44921: PPUSH
44922: CALL 44808 0 1
44926: GO 44914
44928: POP
44929: POP
// end ;
44930: LD_VAR 0 2
44934: RET
// export function ResetHc ; begin
44935: LD_INT 0
44937: PPUSH
// InitHc ;
44938: CALL_OW 19
// hc_importance := 0 ;
44942: LD_ADDR_OWVAR 32
44946: PUSH
44947: LD_INT 0
44949: ST_TO_ADDR
// end ;
44950: LD_VAR 0 1
44954: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
44955: LD_INT 0
44957: PPUSH
44958: PPUSH
44959: PPUSH
// _x := ( x1 + x2 ) div 2 ;
44960: LD_ADDR_VAR 0 6
44964: PUSH
44965: LD_VAR 0 1
44969: PUSH
44970: LD_VAR 0 3
44974: PLUS
44975: PUSH
44976: LD_INT 2
44978: DIV
44979: ST_TO_ADDR
// if _x < 0 then
44980: LD_VAR 0 6
44984: PUSH
44985: LD_INT 0
44987: LESS
44988: IFFALSE 45005
// _x := _x * - 1 ;
44990: LD_ADDR_VAR 0 6
44994: PUSH
44995: LD_VAR 0 6
44999: PUSH
45000: LD_INT 1
45002: NEG
45003: MUL
45004: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
45005: LD_ADDR_VAR 0 7
45009: PUSH
45010: LD_VAR 0 2
45014: PUSH
45015: LD_VAR 0 4
45019: PLUS
45020: PUSH
45021: LD_INT 2
45023: DIV
45024: ST_TO_ADDR
// if _y < 0 then
45025: LD_VAR 0 7
45029: PUSH
45030: LD_INT 0
45032: LESS
45033: IFFALSE 45050
// _y := _y * - 1 ;
45035: LD_ADDR_VAR 0 7
45039: PUSH
45040: LD_VAR 0 7
45044: PUSH
45045: LD_INT 1
45047: NEG
45048: MUL
45049: ST_TO_ADDR
// result := [ _x , _y ] ;
45050: LD_ADDR_VAR 0 5
45054: PUSH
45055: LD_VAR 0 6
45059: PUSH
45060: LD_VAR 0 7
45064: PUSH
45065: EMPTY
45066: LIST
45067: LIST
45068: ST_TO_ADDR
// end ;
45069: LD_VAR 0 5
45073: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
45074: LD_INT 0
45076: PPUSH
45077: PPUSH
45078: PPUSH
45079: PPUSH
// task := GetTaskList ( unit ) ;
45080: LD_ADDR_VAR 0 7
45084: PUSH
45085: LD_VAR 0 1
45089: PPUSH
45090: CALL_OW 437
45094: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
45095: LD_VAR 0 7
45099: NOT
45100: PUSH
45101: LD_VAR 0 1
45105: PPUSH
45106: LD_VAR 0 2
45110: PPUSH
45111: CALL_OW 308
45115: NOT
45116: AND
45117: IFFALSE 45121
// exit ;
45119: GO 45239
// if IsInArea ( unit , area ) then
45121: LD_VAR 0 1
45125: PPUSH
45126: LD_VAR 0 2
45130: PPUSH
45131: CALL_OW 308
45135: IFFALSE 45153
// begin ComMoveToArea ( unit , goAway ) ;
45137: LD_VAR 0 1
45141: PPUSH
45142: LD_VAR 0 3
45146: PPUSH
45147: CALL_OW 113
// exit ;
45151: GO 45239
// end ; if task [ 1 ] [ 1 ] <> M then
45153: LD_VAR 0 7
45157: PUSH
45158: LD_INT 1
45160: ARRAY
45161: PUSH
45162: LD_INT 1
45164: ARRAY
45165: PUSH
45166: LD_STRING M
45168: NONEQUAL
45169: IFFALSE 45173
// exit ;
45171: GO 45239
// x := task [ 1 ] [ 2 ] ;
45173: LD_ADDR_VAR 0 5
45177: PUSH
45178: LD_VAR 0 7
45182: PUSH
45183: LD_INT 1
45185: ARRAY
45186: PUSH
45187: LD_INT 2
45189: ARRAY
45190: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
45191: LD_ADDR_VAR 0 6
45195: PUSH
45196: LD_VAR 0 7
45200: PUSH
45201: LD_INT 1
45203: ARRAY
45204: PUSH
45205: LD_INT 3
45207: ARRAY
45208: ST_TO_ADDR
// if InArea ( x , y , area ) then
45209: LD_VAR 0 5
45213: PPUSH
45214: LD_VAR 0 6
45218: PPUSH
45219: LD_VAR 0 2
45223: PPUSH
45224: CALL_OW 309
45228: IFFALSE 45239
// ComStop ( unit ) ;
45230: LD_VAR 0 1
45234: PPUSH
45235: CALL_OW 141
// end ;
45239: LD_VAR 0 4
45243: RET
// export function Abs ( value ) ; begin
45244: LD_INT 0
45246: PPUSH
// result := value ;
45247: LD_ADDR_VAR 0 2
45251: PUSH
45252: LD_VAR 0 1
45256: ST_TO_ADDR
// if value < 0 then
45257: LD_VAR 0 1
45261: PUSH
45262: LD_INT 0
45264: LESS
45265: IFFALSE 45282
// result := value * - 1 ;
45267: LD_ADDR_VAR 0 2
45271: PUSH
45272: LD_VAR 0 1
45276: PUSH
45277: LD_INT 1
45279: NEG
45280: MUL
45281: ST_TO_ADDR
// end ;
45282: LD_VAR 0 2
45286: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
45287: LD_INT 0
45289: PPUSH
45290: PPUSH
45291: PPUSH
45292: PPUSH
45293: PPUSH
45294: PPUSH
45295: PPUSH
45296: PPUSH
// if not unit or not building then
45297: LD_VAR 0 1
45301: NOT
45302: PUSH
45303: LD_VAR 0 2
45307: NOT
45308: OR
45309: IFFALSE 45313
// exit ;
45311: GO 45539
// x := GetX ( building ) ;
45313: LD_ADDR_VAR 0 4
45317: PUSH
45318: LD_VAR 0 2
45322: PPUSH
45323: CALL_OW 250
45327: ST_TO_ADDR
// y := GetY ( building ) ;
45328: LD_ADDR_VAR 0 6
45332: PUSH
45333: LD_VAR 0 2
45337: PPUSH
45338: CALL_OW 251
45342: ST_TO_ADDR
// d := GetDir ( building ) ;
45343: LD_ADDR_VAR 0 8
45347: PUSH
45348: LD_VAR 0 2
45352: PPUSH
45353: CALL_OW 254
45357: ST_TO_ADDR
// r := 4 ;
45358: LD_ADDR_VAR 0 9
45362: PUSH
45363: LD_INT 4
45365: ST_TO_ADDR
// for i := 1 to 5 do
45366: LD_ADDR_VAR 0 10
45370: PUSH
45371: DOUBLE
45372: LD_INT 1
45374: DEC
45375: ST_TO_ADDR
45376: LD_INT 5
45378: PUSH
45379: FOR_TO
45380: IFFALSE 45537
// begin _x := ShiftX ( x , d , r + i ) ;
45382: LD_ADDR_VAR 0 5
45386: PUSH
45387: LD_VAR 0 4
45391: PPUSH
45392: LD_VAR 0 8
45396: PPUSH
45397: LD_VAR 0 9
45401: PUSH
45402: LD_VAR 0 10
45406: PLUS
45407: PPUSH
45408: CALL_OW 272
45412: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
45413: LD_ADDR_VAR 0 7
45417: PUSH
45418: LD_VAR 0 6
45422: PPUSH
45423: LD_VAR 0 8
45427: PPUSH
45428: LD_VAR 0 9
45432: PUSH
45433: LD_VAR 0 10
45437: PLUS
45438: PPUSH
45439: CALL_OW 273
45443: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
45444: LD_VAR 0 5
45448: PPUSH
45449: LD_VAR 0 7
45453: PPUSH
45454: CALL_OW 488
45458: PUSH
45459: LD_VAR 0 5
45463: PPUSH
45464: LD_VAR 0 7
45468: PPUSH
45469: CALL_OW 428
45473: PPUSH
45474: CALL_OW 247
45478: PUSH
45479: LD_INT 3
45481: PUSH
45482: LD_INT 2
45484: PUSH
45485: EMPTY
45486: LIST
45487: LIST
45488: IN
45489: NOT
45490: AND
45491: IFFALSE 45535
// begin ComMoveXY ( unit , _x , _y ) ;
45493: LD_VAR 0 1
45497: PPUSH
45498: LD_VAR 0 5
45502: PPUSH
45503: LD_VAR 0 7
45507: PPUSH
45508: CALL_OW 111
// result := [ _x , _y ] ;
45512: LD_ADDR_VAR 0 3
45516: PUSH
45517: LD_VAR 0 5
45521: PUSH
45522: LD_VAR 0 7
45526: PUSH
45527: EMPTY
45528: LIST
45529: LIST
45530: ST_TO_ADDR
// exit ;
45531: POP
45532: POP
45533: GO 45539
// end ; end ;
45535: GO 45379
45537: POP
45538: POP
// end ;
45539: LD_VAR 0 3
45543: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
45544: LD_INT 0
45546: PPUSH
45547: PPUSH
45548: PPUSH
// result := 0 ;
45549: LD_ADDR_VAR 0 3
45553: PUSH
45554: LD_INT 0
45556: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
45557: LD_VAR 0 1
45561: PUSH
45562: LD_INT 0
45564: LESS
45565: PUSH
45566: LD_VAR 0 1
45570: PUSH
45571: LD_INT 8
45573: GREATER
45574: OR
45575: PUSH
45576: LD_VAR 0 2
45580: PUSH
45581: LD_INT 0
45583: LESS
45584: OR
45585: PUSH
45586: LD_VAR 0 2
45590: PUSH
45591: LD_INT 8
45593: GREATER
45594: OR
45595: IFFALSE 45599
// exit ;
45597: GO 45674
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
45599: LD_ADDR_VAR 0 4
45603: PUSH
45604: LD_INT 22
45606: PUSH
45607: LD_VAR 0 2
45611: PUSH
45612: EMPTY
45613: LIST
45614: LIST
45615: PPUSH
45616: CALL_OW 69
45620: PUSH
45621: FOR_IN
45622: IFFALSE 45672
// begin un := UnitShoot ( i ) ;
45624: LD_ADDR_VAR 0 5
45628: PUSH
45629: LD_VAR 0 4
45633: PPUSH
45634: CALL_OW 504
45638: ST_TO_ADDR
// if GetSide ( un ) = side1 then
45639: LD_VAR 0 5
45643: PPUSH
45644: CALL_OW 255
45648: PUSH
45649: LD_VAR 0 1
45653: EQUAL
45654: IFFALSE 45670
// begin result := un ;
45656: LD_ADDR_VAR 0 3
45660: PUSH
45661: LD_VAR 0 5
45665: ST_TO_ADDR
// exit ;
45666: POP
45667: POP
45668: GO 45674
// end ; end ;
45670: GO 45621
45672: POP
45673: POP
// end ;
45674: LD_VAR 0 3
45678: RET
// export function GetCargoBay ( units ) ; begin
45679: LD_INT 0
45681: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
45682: LD_ADDR_VAR 0 2
45686: PUSH
45687: LD_VAR 0 1
45691: PPUSH
45692: LD_INT 2
45694: PUSH
45695: LD_INT 34
45697: PUSH
45698: LD_INT 12
45700: PUSH
45701: EMPTY
45702: LIST
45703: LIST
45704: PUSH
45705: LD_INT 34
45707: PUSH
45708: LD_INT 51
45710: PUSH
45711: EMPTY
45712: LIST
45713: LIST
45714: PUSH
45715: LD_INT 34
45717: PUSH
45718: LD_INT 32
45720: PUSH
45721: EMPTY
45722: LIST
45723: LIST
45724: PUSH
45725: LD_INT 34
45727: PUSH
45728: LD_EXP 40
45732: PUSH
45733: EMPTY
45734: LIST
45735: LIST
45736: PUSH
45737: EMPTY
45738: LIST
45739: LIST
45740: LIST
45741: LIST
45742: LIST
45743: PPUSH
45744: CALL_OW 72
45748: ST_TO_ADDR
// end ; end_of_file
45749: LD_VAR 0 2
45753: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_heavy_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; export function InitGlobalVariables ; begin
45754: LD_INT 0
45756: PPUSH
// ar_miner := 81 ;
45757: LD_ADDR_EXP 46
45761: PUSH
45762: LD_INT 81
45764: ST_TO_ADDR
// ar_crane := 88 ;
45765: LD_ADDR_EXP 45
45769: PUSH
45770: LD_INT 88
45772: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
45773: LD_ADDR_EXP 40
45777: PUSH
45778: LD_INT 89
45780: ST_TO_ADDR
// us_hack := 99 ;
45781: LD_ADDR_EXP 41
45785: PUSH
45786: LD_INT 99
45788: ST_TO_ADDR
// us_artillery := 97 ;
45789: LD_ADDR_EXP 42
45793: PUSH
45794: LD_INT 97
45796: ST_TO_ADDR
// ar_bio_bomb := 91 ;
45797: LD_ADDR_EXP 43
45801: PUSH
45802: LD_INT 91
45804: ST_TO_ADDR
// ar_heavy_mortar := 92 ;
45805: LD_ADDR_EXP 44
45809: PUSH
45810: LD_INT 92
45812: ST_TO_ADDR
// ru_radar := 98 ;
45813: LD_ADDR_EXP 39
45817: PUSH
45818: LD_INT 98
45820: ST_TO_ADDR
// tech_Artillery := 80 ;
45821: LD_ADDR_EXP 47
45825: PUSH
45826: LD_INT 80
45828: ST_TO_ADDR
// tech_RadMat := 81 ;
45829: LD_ADDR_EXP 48
45833: PUSH
45834: LD_INT 81
45836: ST_TO_ADDR
// tech_BasicTools := 82 ;
45837: LD_ADDR_EXP 49
45841: PUSH
45842: LD_INT 82
45844: ST_TO_ADDR
// tech_Cargo := 83 ;
45845: LD_ADDR_EXP 50
45849: PUSH
45850: LD_INT 83
45852: ST_TO_ADDR
// tech_Track := 84 ;
45853: LD_ADDR_EXP 51
45857: PUSH
45858: LD_INT 84
45860: ST_TO_ADDR
// tech_Crane := 85 ;
45861: LD_ADDR_EXP 52
45865: PUSH
45866: LD_INT 85
45868: ST_TO_ADDR
// tech_Bulldozer := 86 ;
45869: LD_ADDR_EXP 53
45873: PUSH
45874: LD_INT 86
45876: ST_TO_ADDR
// tech_Hovercraft := 87 ;
45877: LD_ADDR_EXP 54
45881: PUSH
45882: LD_INT 87
45884: ST_TO_ADDR
// end ;
45885: LD_VAR 0 1
45889: RET
// every 1 do
45890: GO 45892
45892: DISABLE
// InitGlobalVariables ;
45893: CALL 45754 0 0
45897: END
